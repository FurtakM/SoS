// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 45283 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 45543 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 0 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 2
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 0
  48: PUSH
  49: LD_INT 0
  51: PUSH
  52: LD_INT 0
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ ] , [ ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 3 , 6 , 9 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 3
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: EMPTY
 297: PUSH
 298: EMPTY
 299: PUSH
 300: LD_INT 0
 302: PUSH
 303: LD_INT 1
 305: PUSH
 306: EMPTY
 307: LIST
 308: LIST
 309: PUSH
 310: LD_INT 1
 312: NEG
 313: PUSH
 314: LD_INT 350
 316: PUSH
 317: LD_INT 700
 319: PUSH
 320: LD_INT 1400
 322: PUSH
 323: LD_INT 0
 325: PUSH
 326: EMPTY
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: LIST
 332: PUSH
 333: LD_INT 0
 335: PUSH
 336: LD_INT 1
 338: PUSH
 339: EMPTY
 340: LIST
 341: LIST
 342: PUSH
 343: LD_INT 0
 345: PUSH
 346: LD_INT 13650
 348: PUSH
 349: LD_INT 7350
 351: PUSH
 352: EMPTY
 353: LIST
 354: LIST
 355: LIST
 356: PUSH
 357: LD_INT 0
 359: PUSH
 360: LD_INT 3
 362: PUSH
 363: LD_INT 6
 365: PUSH
 366: LD_INT 9
 368: PUSH
 369: EMPTY
 370: LIST
 371: LIST
 372: LIST
 373: LIST
 374: PUSH
 375: EMPTY
 376: PUSH
 377: EMPTY
 378: PUSH
 379: LD_INT 0
 381: PUSH
 382: LD_INT 1
 384: PUSH
 385: LD_INT 31500
 387: PUSH
 388: LD_INT 52500
 390: PUSH
 391: LD_INT 63000
 393: PUSH
 394: LD_INT 94500
 396: PUSH
 397: LD_INT 126000
 399: PUSH
 400: LD_INT 189000
 402: PUSH
 403: LD_INT 210000
 405: PUSH
 406: LD_INT 252000
 408: PUSH
 409: LD_INT 378000
 411: PUSH
 412: EMPTY
 413: LIST
 414: LIST
 415: LIST
 416: LIST
 417: LIST
 418: LIST
 419: LIST
 420: LIST
 421: LIST
 422: LIST
 423: LIST
 424: PUSH
 425: EMPTY
 426: PUSH
 427: EMPTY
 428: PUSH
 429: LD_INT 0
 431: PUSH
 432: LD_INT 6300
 434: PUSH
 435: LD_INT 10500
 437: PUSH
 438: LD_INT 16800
 440: PUSH
 441: LD_INT 21000
 443: PUSH
 444: LD_INT 25200
 446: PUSH
 447: LD_INT 31500
 449: PUSH
 450: LD_INT 42000
 452: PUSH
 453: LD_INT 63000
 455: PUSH
 456: EMPTY
 457: LIST
 458: LIST
 459: LIST
 460: LIST
 461: LIST
 462: LIST
 463: LIST
 464: LIST
 465: LIST
 466: PUSH
 467: EMPTY
 468: LIST
 469: LIST
 470: LIST
 471: LIST
 472: LIST
 473: LIST
 474: LIST
 475: LIST
 476: LIST
 477: LIST
 478: LIST
 479: LIST
 480: LIST
 481: LIST
 482: LIST
 483: LIST
 484: LIST
 485: LIST
 486: LIST
 487: LIST
 488: LIST
 489: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 0 , 0 , 1 , 0 0$20 , 1 , 1 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 3 3$0 ] ;
 490: LD_ADDR_EXP 4
 494: PUSH
 495: LD_INT 2
 497: PUSH
 498: LD_INT 15
 500: PUSH
 501: LD_INT 4
 503: PUSH
 504: LD_INT 100
 506: PUSH
 507: LD_INT 30
 509: PUSH
 510: LD_INT 0
 512: PUSH
 513: EMPTY
 514: LIST
 515: LIST
 516: LIST
 517: PUSH
 518: LD_INT 3
 520: PUSH
 521: LD_INT 1
 523: PUSH
 524: LD_INT 2
 526: PUSH
 527: LD_INT 250
 529: PUSH
 530: LD_INT 0
 532: PUSH
 533: LD_INT 0
 535: PUSH
 536: LD_INT 1
 538: PUSH
 539: LD_INT 700
 541: PUSH
 542: LD_INT 1
 544: PUSH
 545: LD_INT 1
 547: PUSH
 548: LD_INT 3
 550: PUSH
 551: LD_INT 0
 553: PUSH
 554: LD_INT 0
 556: PUSH
 557: LD_INT 31500
 559: PUSH
 560: LD_INT 0
 562: PUSH
 563: LD_INT 0
 565: PUSH
 566: LD_INT 6300
 568: PUSH
 569: EMPTY
 570: LIST
 571: LIST
 572: LIST
 573: LIST
 574: LIST
 575: LIST
 576: LIST
 577: LIST
 578: LIST
 579: LIST
 580: LIST
 581: LIST
 582: LIST
 583: LIST
 584: LIST
 585: LIST
 586: LIST
 587: LIST
 588: LIST
 589: LIST
 590: LIST
 591: ST_TO_ADDR
// mpGameType := GameTypeNormal ;
 592: LD_ADDR_EXP 1
 596: PUSH
 597: LD_INT 1
 599: ST_TO_ADDR
// your_side := 1 ;
 600: LD_ADDR_OWVAR 2
 604: PUSH
 605: LD_INT 1
 607: ST_TO_ADDR
// mpSidePositions := [ 8 , 2 , 3 , 4 , 5 , 6 , 7 , 1 ] ;
 608: LD_ADDR_EXP 5
 612: PUSH
 613: LD_INT 8
 615: PUSH
 616: LD_INT 2
 618: PUSH
 619: LD_INT 3
 621: PUSH
 622: LD_INT 4
 624: PUSH
 625: LD_INT 5
 627: PUSH
 628: LD_INT 6
 630: PUSH
 631: LD_INT 7
 633: PUSH
 634: LD_INT 1
 636: PUSH
 637: EMPTY
 638: LIST
 639: LIST
 640: LIST
 641: LIST
 642: LIST
 643: LIST
 644: LIST
 645: LIST
 646: ST_TO_ADDR
// mpSideTeams := [ 1 , 2 , 2 , 3 , 3 , 4 , 4 , 1 ] ;
 647: LD_ADDR_EXP 6
 651: PUSH
 652: LD_INT 1
 654: PUSH
 655: LD_INT 2
 657: PUSH
 658: LD_INT 2
 660: PUSH
 661: LD_INT 3
 663: PUSH
 664: LD_INT 3
 666: PUSH
 667: LD_INT 4
 669: PUSH
 670: LD_INT 4
 672: PUSH
 673: LD_INT 1
 675: PUSH
 676: EMPTY
 677: LIST
 678: LIST
 679: LIST
 680: LIST
 681: LIST
 682: LIST
 683: LIST
 684: LIST
 685: ST_TO_ADDR
// mpSideNations := [ 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 ] ;
 686: LD_ADDR_EXP 7
 690: PUSH
 691: LD_INT 1
 693: PUSH
 694: LD_INT 2
 696: PUSH
 697: LD_INT 3
 699: PUSH
 700: LD_INT 1
 702: PUSH
 703: LD_INT 2
 705: PUSH
 706: LD_INT 3
 708: PUSH
 709: LD_INT 1
 711: PUSH
 712: LD_INT 2
 714: PUSH
 715: EMPTY
 716: LIST
 717: LIST
 718: LIST
 719: LIST
 720: LIST
 721: LIST
 722: LIST
 723: LIST
 724: ST_TO_ADDR
// mpTeams := [ [ 1 , 8 ] , [ 2 , 3 ] , [ 4 , 5 ] , [ 6 , 7 ] ] ;
 725: LD_ADDR_EXP 8
 729: PUSH
 730: LD_INT 1
 732: PUSH
 733: LD_INT 8
 735: PUSH
 736: EMPTY
 737: LIST
 738: LIST
 739: PUSH
 740: LD_INT 2
 742: PUSH
 743: LD_INT 3
 745: PUSH
 746: EMPTY
 747: LIST
 748: LIST
 749: PUSH
 750: LD_INT 4
 752: PUSH
 753: LD_INT 5
 755: PUSH
 756: EMPTY
 757: LIST
 758: LIST
 759: PUSH
 760: LD_INT 6
 762: PUSH
 763: LD_INT 7
 765: PUSH
 766: EMPTY
 767: LIST
 768: LIST
 769: PUSH
 770: EMPTY
 771: LIST
 772: LIST
 773: LIST
 774: LIST
 775: ST_TO_ADDR
// mpTeamGame := true ;
 776: LD_ADDR_EXP 9
 780: PUSH
 781: LD_INT 1
 783: ST_TO_ADDR
// mpMapSize := [ 160 , 200 ] ;
 784: LD_ADDR_EXP 27
 788: PUSH
 789: LD_INT 160
 791: PUSH
 792: LD_INT 200
 794: PUSH
 795: EMPTY
 796: LIST
 797: LIST
 798: ST_TO_ADDR
// end ;
 799: LD_VAR 0 1
 803: RET
// export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 804: LD_INT 0
 806: PPUSH
 807: PPUSH
 808: PPUSH
 809: PPUSH
 810: PPUSH
 811: PPUSH
 812: PPUSH
// mpBuildUpAreas := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
 813: LD_ADDR_EXP 17
 817: PUSH
 818: LD_INT 9
 820: PUSH
 821: LD_INT 10
 823: PUSH
 824: LD_INT 11
 826: PUSH
 827: LD_INT 12
 829: PUSH
 830: LD_INT 13
 832: PUSH
 833: LD_INT 14
 835: PUSH
 836: LD_INT 15
 838: PUSH
 839: LD_INT 16
 841: PUSH
 842: EMPTY
 843: LIST
 844: LIST
 845: LIST
 846: LIST
 847: LIST
 848: LIST
 849: LIST
 850: LIST
 851: ST_TO_ADDR
// mpMarkedAreas := [ Between1 , Between2 , Between3 , Between4 , Center1 , Center2 ] union mpBuildUpAreas ;
 852: LD_ADDR_EXP 16
 856: PUSH
 857: LD_INT 18
 859: PUSH
 860: LD_INT 19
 862: PUSH
 863: LD_INT 20
 865: PUSH
 866: LD_INT 21
 868: PUSH
 869: LD_INT 22
 871: PUSH
 872: LD_INT 23
 874: PUSH
 875: EMPTY
 876: LIST
 877: LIST
 878: LIST
 879: LIST
 880: LIST
 881: LIST
 882: PUSH
 883: LD_EXP 17
 887: UNION
 888: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 889: LD_VAR 0 1
 893: PUSH
 894: LD_INT 2
 896: EQUAL
 897: IFFALSE 909
// baseLevel := 1 else
 899: LD_ADDR_VAR 0 7
 903: PUSH
 904: LD_INT 1
 906: ST_TO_ADDR
 907: GO 923
// baseLevel := mpGameSettings [ 1 ] ;
 909: LD_ADDR_VAR 0 7
 913: PUSH
 914: LD_EXP 4
 918: PUSH
 919: LD_INT 1
 921: ARRAY
 922: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 923: LD_ADDR_EXP 22
 927: PUSH
 928: LD_EXP 4
 932: PUSH
 933: LD_INT 2
 935: ARRAY
 936: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 937: LD_ADDR_EXP 23
 941: PUSH
 942: LD_EXP 4
 946: PUSH
 947: LD_INT 3
 949: ARRAY
 950: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 951: LD_ADDR_EXP 13
 955: PUSH
 956: LD_EXP 4
 960: PUSH
 961: LD_INT 4
 963: ARRAY
 964: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 965: LD_ADDR_EXP 25
 969: PUSH
 970: LD_EXP 4
 974: PUSH
 975: LD_INT 5
 977: ARRAY
 978: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
 979: LD_ADDR_VAR 0 5
 983: PUSH
 984: LD_EXP 4
 988: PUSH
 989: LD_INT 6
 991: ARRAY
 992: PUSH
 993: LD_INT 0
 995: GREATER
 996: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
 997: LD_ADDR_VAR 0 6
1001: PUSH
1002: LD_EXP 4
1006: PUSH
1007: LD_INT 7
1009: ARRAY
1010: PUSH
1011: LD_INT 0
1013: GREATER
1014: ST_TO_ADDR
// if gameType = GameTypeKing then
1015: LD_VAR 0 1
1019: PUSH
1020: LD_INT 3
1022: EQUAL
1023: IFFALSE 1049
// begin mpKingArea := kingArea ;
1025: LD_ADDR_EXP 31
1029: PUSH
1030: LD_INT 64
1032: ST_TO_ADDR
// mpPoints := mpGameSettings [ 8 ] ;
1033: LD_ADDR_EXP 32
1037: PUSH
1038: LD_EXP 4
1042: PUSH
1043: LD_INT 8
1045: ARRAY
1046: ST_TO_ADDR
// end else
1047: GO 1065
// begin mpKingArea := 0 ;
1049: LD_ADDR_EXP 31
1053: PUSH
1054: LD_INT 0
1056: ST_TO_ADDR
// mpPoints := 0 ;
1057: LD_ADDR_EXP 32
1061: PUSH
1062: LD_INT 0
1064: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1065: LD_ADDR_EXP 14
1069: PUSH
1070: LD_EXP 4
1074: PUSH
1075: LD_INT 11
1077: ARRAY
1078: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1079: LD_ADDR_EXP 20
1083: PUSH
1084: LD_EXP 4
1088: PUSH
1089: LD_INT 12
1091: ARRAY
1092: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1093: LD_ADDR_EXP 24
1097: PUSH
1098: LD_EXP 4
1102: PUSH
1103: LD_INT 13
1105: ARRAY
1106: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1107: LD_ADDR_EXP 30
1111: PUSH
1112: LD_EXP 4
1116: PUSH
1117: LD_INT 14
1119: ARRAY
1120: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1121: LD_ADDR_EXP 28
1125: PUSH
1126: LD_EXP 4
1130: PUSH
1131: LD_INT 15
1133: ARRAY
1134: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 17 ] ;
1135: LD_ADDR_EXP 26
1139: PUSH
1140: LD_EXP 4
1144: PUSH
1145: LD_INT 17
1147: ARRAY
1148: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 20 ] ;
1149: LD_ADDR_EXP 18
1153: PUSH
1154: LD_EXP 4
1158: PUSH
1159: LD_INT 20
1161: ARRAY
1162: ST_TO_ADDR
// mpApemansArea := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , Base7ApeArea , Base8ApeArea ] ;
1163: LD_ADDR_EXP 29
1167: PUSH
1168: LD_INT 1
1170: PUSH
1171: LD_INT 2
1173: PUSH
1174: LD_INT 3
1176: PUSH
1177: LD_INT 4
1179: PUSH
1180: LD_INT 5
1182: PUSH
1183: LD_INT 6
1185: PUSH
1186: LD_INT 7
1188: PUSH
1189: LD_INT 8
1191: PUSH
1192: EMPTY
1193: LIST
1194: LIST
1195: LIST
1196: LIST
1197: LIST
1198: LIST
1199: LIST
1200: LIST
1201: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 2 ) , GetBuildingFromArea ( depotArea2 , 5 ) , GetBuildingFromArea ( depotArea3 , 3 ) , GetBuildingFromArea ( depotArea4 , 4 ) , GetBuildingFromArea ( depotArea5 , 5 ) , GetBuildingFromArea ( depotArea6 , 2 ) , GetBuildingFromArea ( depotArea7 , 0 ) , GetBuildingFromArea ( depotArea8 , 1 ) ] ;
1202: LD_ADDR_VAR 0 8
1206: PUSH
1207: LD_INT 40
1209: PPUSH
1210: LD_INT 2
1212: PPUSH
1213: CALL 44738 0 2
1217: PUSH
1218: LD_INT 41
1220: PPUSH
1221: LD_INT 5
1223: PPUSH
1224: CALL 44738 0 2
1228: PUSH
1229: LD_INT 42
1231: PPUSH
1232: LD_INT 3
1234: PPUSH
1235: CALL 44738 0 2
1239: PUSH
1240: LD_INT 43
1242: PPUSH
1243: LD_INT 4
1245: PPUSH
1246: CALL 44738 0 2
1250: PUSH
1251: LD_INT 44
1253: PPUSH
1254: LD_INT 5
1256: PPUSH
1257: CALL 44738 0 2
1261: PUSH
1262: LD_INT 45
1264: PPUSH
1265: LD_INT 2
1267: PPUSH
1268: CALL 44738 0 2
1272: PUSH
1273: LD_INT 46
1275: PPUSH
1276: LD_INT 0
1278: PPUSH
1279: CALL 44738 0 2
1283: PUSH
1284: LD_INT 47
1286: PPUSH
1287: LD_INT 1
1289: PPUSH
1290: CALL 44738 0 2
1294: PUSH
1295: EMPTY
1296: LIST
1297: LIST
1298: LIST
1299: LIST
1300: LIST
1301: LIST
1302: LIST
1303: LIST
1304: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1305: LD_ADDR_VAR 0 3
1309: PUSH
1310: DOUBLE
1311: LD_INT 1
1313: DEC
1314: ST_TO_ADDR
1315: LD_VAR 0 8
1319: PPUSH
1320: CALL 4610 0 1
1324: PUSH
1325: FOR_TO
1326: IFFALSE 1430
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1328: LD_ADDR_EXP 19
1332: PUSH
1333: LD_EXP 19
1337: PPUSH
1338: LD_VAR 0 3
1342: PPUSH
1343: LD_VAR 0 8
1347: PUSH
1348: LD_VAR 0 3
1352: ARRAY
1353: PUSH
1354: LD_INT 1
1356: ARRAY
1357: PPUSH
1358: LD_VAR 0 8
1362: PUSH
1363: LD_VAR 0 3
1367: ARRAY
1368: PUSH
1369: LD_INT 3
1371: ARRAY
1372: PPUSH
1373: LD_INT 10
1375: PPUSH
1376: CALL_OW 272
1380: PUSH
1381: LD_VAR 0 8
1385: PUSH
1386: LD_VAR 0 3
1390: ARRAY
1391: PUSH
1392: LD_INT 2
1394: ARRAY
1395: PPUSH
1396: LD_VAR 0 8
1400: PUSH
1401: LD_VAR 0 3
1405: ARRAY
1406: PUSH
1407: LD_INT 3
1409: ARRAY
1410: PPUSH
1411: LD_INT 10
1413: PPUSH
1414: CALL_OW 273
1418: PUSH
1419: EMPTY
1420: LIST
1421: LIST
1422: PPUSH
1423: CALL_OW 1
1427: ST_TO_ADDR
1428: GO 1325
1430: POP
1431: POP
// if hasOil then
1432: LD_VAR 0 5
1436: IFFALSE 1575
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1438: LD_ADDR_VAR 0 4
1442: PUSH
1443: LD_EXP 4
1447: PUSH
1448: LD_INT 6
1450: ARRAY
1451: PUSH
1452: LD_INT 2
1454: EQUAL
1455: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) , GetSourcesFromArea ( oilArea7 , all ) , GetSourcesFromArea ( oilArea8 , all ) ] ;
1456: LD_ADDR_EXP 10
1460: PUSH
1461: LD_INT 24
1463: PPUSH
1464: LD_VAR 0 4
1468: PPUSH
1469: CALL 44571 0 2
1473: PUSH
1474: LD_INT 25
1476: PPUSH
1477: LD_VAR 0 4
1481: PPUSH
1482: CALL 44571 0 2
1486: PUSH
1487: LD_INT 26
1489: PPUSH
1490: LD_VAR 0 4
1494: PPUSH
1495: CALL 44571 0 2
1499: PUSH
1500: LD_INT 27
1502: PPUSH
1503: LD_VAR 0 4
1507: PPUSH
1508: CALL 44571 0 2
1512: PUSH
1513: LD_INT 28
1515: PPUSH
1516: LD_VAR 0 4
1520: PPUSH
1521: CALL 44571 0 2
1525: PUSH
1526: LD_INT 29
1528: PPUSH
1529: LD_VAR 0 4
1533: PPUSH
1534: CALL 44571 0 2
1538: PUSH
1539: LD_INT 30
1541: PPUSH
1542: LD_VAR 0 4
1546: PPUSH
1547: CALL 44571 0 2
1551: PUSH
1552: LD_INT 31
1554: PPUSH
1555: LD_VAR 0 4
1559: PPUSH
1560: CALL 44571 0 2
1564: PUSH
1565: EMPTY
1566: LIST
1567: LIST
1568: LIST
1569: LIST
1570: LIST
1571: LIST
1572: LIST
1573: LIST
1574: ST_TO_ADDR
// end ; if hasSib then
1575: LD_VAR 0 6
1579: IFFALSE 1718
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1581: LD_ADDR_VAR 0 4
1585: PUSH
1586: LD_EXP 4
1590: PUSH
1591: LD_INT 7
1593: ARRAY
1594: PUSH
1595: LD_INT 2
1597: EQUAL
1598: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) , GetSourcesFromArea ( sibArea7 , all ) , GetSourcesFromArea ( sibArea8 , all ) ] ;
1599: LD_ADDR_EXP 11
1603: PUSH
1604: LD_INT 32
1606: PPUSH
1607: LD_VAR 0 4
1611: PPUSH
1612: CALL 44571 0 2
1616: PUSH
1617: LD_INT 33
1619: PPUSH
1620: LD_VAR 0 4
1624: PPUSH
1625: CALL 44571 0 2
1629: PUSH
1630: LD_INT 34
1632: PPUSH
1633: LD_VAR 0 4
1637: PPUSH
1638: CALL 44571 0 2
1642: PUSH
1643: LD_INT 35
1645: PPUSH
1646: LD_VAR 0 4
1650: PPUSH
1651: CALL 44571 0 2
1655: PUSH
1656: LD_INT 36
1658: PPUSH
1659: LD_VAR 0 4
1663: PPUSH
1664: CALL 44571 0 2
1668: PUSH
1669: LD_INT 37
1671: PPUSH
1672: LD_VAR 0 4
1676: PPUSH
1677: CALL 44571 0 2
1681: PUSH
1682: LD_INT 38
1684: PPUSH
1685: LD_VAR 0 4
1689: PPUSH
1690: CALL 44571 0 2
1694: PUSH
1695: LD_INT 39
1697: PPUSH
1698: LD_VAR 0 4
1702: PPUSH
1703: CALL 44571 0 2
1707: PUSH
1708: EMPTY
1709: LIST
1710: LIST
1711: LIST
1712: LIST
1713: LIST
1714: LIST
1715: LIST
1716: LIST
1717: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1718: LD_VAR 0 7
1722: PUSH
1723: LD_INT 1
1725: GREATEREQUAL
1726: IFFALSE 1738
// mpDepots := startPos ;
1728: LD_ADDR_EXP 12
1732: PUSH
1733: LD_VAR 0 8
1737: ST_TO_ADDR
// if baseLevel >= 2 then
1738: LD_VAR 0 7
1742: PUSH
1743: LD_INT 2
1745: GREATEREQUAL
1746: IFFALSE 2035
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunArea1a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1b , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea2a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2b , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea3a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3b , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea4a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4b , 1 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea5a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5b , 2 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea6a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6b , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea7a , 3 ) , b_breastwork ^ GetBuildingFromArea ( bunArea7b , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea8a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea8b , 4 ) ] ] ;
1748: LD_ADDR_EXP 15
1752: PUSH
1753: LD_INT 31
1755: PUSH
1756: LD_INT 48
1758: PPUSH
1759: LD_INT 5
1761: PPUSH
1762: CALL 44738 0 2
1766: ADD
1767: PUSH
1768: LD_INT 31
1770: PUSH
1771: LD_INT 49
1773: PPUSH
1774: LD_INT 4
1776: PPUSH
1777: CALL 44738 0 2
1781: ADD
1782: PUSH
1783: EMPTY
1784: LIST
1785: LIST
1786: PUSH
1787: LD_INT 31
1789: PUSH
1790: LD_INT 50
1792: PPUSH
1793: LD_INT 1
1795: PPUSH
1796: CALL 44738 0 2
1800: ADD
1801: PUSH
1802: LD_INT 31
1804: PUSH
1805: LD_INT 51
1807: PPUSH
1808: LD_INT 4
1810: PPUSH
1811: CALL 44738 0 2
1815: ADD
1816: PUSH
1817: EMPTY
1818: LIST
1819: LIST
1820: PUSH
1821: LD_INT 31
1823: PUSH
1824: LD_INT 52
1826: PPUSH
1827: LD_INT 0
1829: PPUSH
1830: CALL 44738 0 2
1834: ADD
1835: PUSH
1836: LD_INT 31
1838: PUSH
1839: LD_INT 53
1841: PPUSH
1842: LD_INT 0
1844: PPUSH
1845: CALL 44738 0 2
1849: ADD
1850: PUSH
1851: EMPTY
1852: LIST
1853: LIST
1854: PUSH
1855: LD_INT 31
1857: PUSH
1858: LD_INT 54
1860: PPUSH
1861: LD_INT 1
1863: PPUSH
1864: CALL 44738 0 2
1868: ADD
1869: PUSH
1870: LD_INT 31
1872: PUSH
1873: LD_INT 55
1875: PPUSH
1876: LD_INT 1
1878: PPUSH
1879: CALL 44738 0 2
1883: ADD
1884: PUSH
1885: EMPTY
1886: LIST
1887: LIST
1888: PUSH
1889: LD_INT 31
1891: PUSH
1892: LD_INT 56
1894: PPUSH
1895: LD_INT 2
1897: PPUSH
1898: CALL 44738 0 2
1902: ADD
1903: PUSH
1904: LD_INT 31
1906: PUSH
1907: LD_INT 57
1909: PPUSH
1910: LD_INT 2
1912: PPUSH
1913: CALL 44738 0 2
1917: ADD
1918: PUSH
1919: EMPTY
1920: LIST
1921: LIST
1922: PUSH
1923: LD_INT 31
1925: PUSH
1926: LD_INT 58
1928: PPUSH
1929: LD_INT 1
1931: PPUSH
1932: CALL 44738 0 2
1936: ADD
1937: PUSH
1938: LD_INT 31
1940: PUSH
1941: LD_INT 59
1943: PPUSH
1944: LD_INT 4
1946: PPUSH
1947: CALL 44738 0 2
1951: ADD
1952: PUSH
1953: EMPTY
1954: LIST
1955: LIST
1956: PUSH
1957: LD_INT 31
1959: PUSH
1960: LD_INT 60
1962: PPUSH
1963: LD_INT 3
1965: PPUSH
1966: CALL 44738 0 2
1970: ADD
1971: PUSH
1972: LD_INT 31
1974: PUSH
1975: LD_INT 61
1977: PPUSH
1978: LD_INT 3
1980: PPUSH
1981: CALL 44738 0 2
1985: ADD
1986: PUSH
1987: EMPTY
1988: LIST
1989: LIST
1990: PUSH
1991: LD_INT 31
1993: PUSH
1994: LD_INT 62
1996: PPUSH
1997: LD_INT 4
1999: PPUSH
2000: CALL 44738 0 2
2004: ADD
2005: PUSH
2006: LD_INT 31
2008: PUSH
2009: LD_INT 63
2011: PPUSH
2012: LD_INT 4
2014: PPUSH
2015: CALL 44738 0 2
2019: ADD
2020: PUSH
2021: EMPTY
2022: LIST
2023: LIST
2024: PUSH
2025: EMPTY
2026: LIST
2027: LIST
2028: LIST
2029: LIST
2030: LIST
2031: LIST
2032: LIST
2033: LIST
2034: ST_TO_ADDR
// end ; end ;
2035: LD_VAR 0 2
2039: RET
// every 0 0$2 marked mpActive do var i , x , tmp , areas , time , normalTime , delayTime , maxTime ;
2040: GO 2042
2042: DISABLE
2043: LD_INT 0
2045: PPUSH
2046: PPUSH
2047: PPUSH
2048: PPUSH
2049: PPUSH
2050: PPUSH
2051: PPUSH
2052: PPUSH
// begin if not mpShipments then
2053: LD_EXP 25
2057: NOT
2058: IFFALSE 2062
// exit ;
2060: GO 2493
// case mpShipments of 1 :
2062: LD_EXP 25
2066: PUSH
2067: LD_INT 1
2069: DOUBLE
2070: EQUAL
2071: IFTRUE 2075
2073: GO 2110
2075: POP
// begin time := 0 0$30 ;
2076: LD_ADDR_VAR 0 5
2080: PUSH
2081: LD_INT 1050
2083: ST_TO_ADDR
// normalTime := 0 0$30 ;
2084: LD_ADDR_VAR 0 6
2088: PUSH
2089: LD_INT 1050
2091: ST_TO_ADDR
// maxTime := 1 1$20 ;
2092: LD_ADDR_VAR 0 8
2096: PUSH
2097: LD_INT 2800
2099: ST_TO_ADDR
// delayTime := 0 0$5 ;
2100: LD_ADDR_VAR 0 7
2104: PUSH
2105: LD_INT 175
2107: ST_TO_ADDR
// end ; 2 :
2108: GO 2240
2110: LD_INT 2
2112: DOUBLE
2113: EQUAL
2114: IFTRUE 2118
2116: GO 2153
2118: POP
// begin time := 0 0$25 ;
2119: LD_ADDR_VAR 0 5
2123: PUSH
2124: LD_INT 875
2126: ST_TO_ADDR
// normalTime := 0 0$25 ;
2127: LD_ADDR_VAR 0 6
2131: PUSH
2132: LD_INT 875
2134: ST_TO_ADDR
// maxTime := 1 1$10 ;
2135: LD_ADDR_VAR 0 8
2139: PUSH
2140: LD_INT 2450
2142: ST_TO_ADDR
// delayTime := 0 0$4 ;
2143: LD_ADDR_VAR 0 7
2147: PUSH
2148: LD_INT 140
2150: ST_TO_ADDR
// end ; 3 :
2151: GO 2240
2153: LD_INT 3
2155: DOUBLE
2156: EQUAL
2157: IFTRUE 2161
2159: GO 2196
2161: POP
// begin time := 0 0$20 ;
2162: LD_ADDR_VAR 0 5
2166: PUSH
2167: LD_INT 700
2169: ST_TO_ADDR
// normalTime := 0 0$20 ;
2170: LD_ADDR_VAR 0 6
2174: PUSH
2175: LD_INT 700
2177: ST_TO_ADDR
// maxTime := 1 1$00 ;
2178: LD_ADDR_VAR 0 8
2182: PUSH
2183: LD_INT 2100
2185: ST_TO_ADDR
// delayTime := 0 0$3 ;
2186: LD_ADDR_VAR 0 7
2190: PUSH
2191: LD_INT 105
2193: ST_TO_ADDR
// end ; 4 :
2194: GO 2240
2196: LD_INT 4
2198: DOUBLE
2199: EQUAL
2200: IFTRUE 2204
2202: GO 2239
2204: POP
// begin time := 0 0$15 ;
2205: LD_ADDR_VAR 0 5
2209: PUSH
2210: LD_INT 525
2212: ST_TO_ADDR
// normalTime := 0 0$15 ;
2213: LD_ADDR_VAR 0 6
2217: PUSH
2218: LD_INT 525
2220: ST_TO_ADDR
// maxTime := 0 0$55 ;
2221: LD_ADDR_VAR 0 8
2225: PUSH
2226: LD_INT 1925
2228: ST_TO_ADDR
// delayTime := 0 0$2 ;
2229: LD_ADDR_VAR 0 7
2233: PUSH
2234: LD_INT 70
2236: ST_TO_ADDR
// end ; end ;
2237: GO 2240
2239: POP
// areas := [ Between1 , Between2 , Between3 , Between4 , Center1 , Center2 ] ;
2240: LD_ADDR_VAR 0 4
2244: PUSH
2245: LD_INT 18
2247: PUSH
2248: LD_INT 19
2250: PUSH
2251: LD_INT 20
2253: PUSH
2254: LD_INT 21
2256: PUSH
2257: LD_INT 22
2259: PUSH
2260: LD_INT 23
2262: PUSH
2263: EMPTY
2264: LIST
2265: LIST
2266: LIST
2267: LIST
2268: LIST
2269: LIST
2270: ST_TO_ADDR
// tmp := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
2271: LD_ADDR_VAR 0 3
2275: PUSH
2276: LD_INT 9
2278: PUSH
2279: LD_INT 10
2281: PUSH
2282: LD_INT 11
2284: PUSH
2285: LD_INT 12
2287: PUSH
2288: LD_INT 13
2290: PUSH
2291: LD_INT 14
2293: PUSH
2294: LD_INT 15
2296: PUSH
2297: LD_INT 16
2299: PUSH
2300: EMPTY
2301: LIST
2302: LIST
2303: LIST
2304: LIST
2305: LIST
2306: LIST
2307: LIST
2308: LIST
2309: ST_TO_ADDR
// for i := 1 to 8 do
2310: LD_ADDR_VAR 0 1
2314: PUSH
2315: DOUBLE
2316: LD_INT 1
2318: DEC
2319: ST_TO_ADDR
2320: LD_INT 8
2322: PUSH
2323: FOR_TO
2324: IFFALSE 2365
// begin if not mpSidePositions [ i ] then
2326: LD_EXP 5
2330: PUSH
2331: LD_VAR 0 1
2335: ARRAY
2336: NOT
2337: IFFALSE 2341
// continue ;
2339: GO 2323
// areas := areas ^ tmp [ i ] ;
2341: LD_ADDR_VAR 0 4
2345: PUSH
2346: LD_VAR 0 4
2350: PUSH
2351: LD_VAR 0 3
2355: PUSH
2356: LD_VAR 0 1
2360: ARRAY
2361: ADD
2362: ST_TO_ADDR
// end ;
2363: GO 2323
2365: POP
2366: POP
// repeat wait ( time ) ;
2367: LD_VAR 0 5
2371: PPUSH
2372: CALL_OW 67
// x := rand ( 1 , 5 ) ;
2376: LD_ADDR_VAR 0 2
2380: PUSH
2381: LD_INT 1
2383: PPUSH
2384: LD_INT 5
2386: PPUSH
2387: CALL_OW 12
2391: ST_TO_ADDR
// for i in areas do
2392: LD_ADDR_VAR 0 1
2396: PUSH
2397: LD_VAR 0 4
2401: PUSH
2402: FOR_IN
2403: IFFALSE 2449
// begin if GetResourceArea ( i , mat_cans ) < 20 then
2405: LD_VAR 0 1
2409: PPUSH
2410: LD_INT 1
2412: PPUSH
2413: CALL_OW 287
2417: PUSH
2418: LD_INT 20
2420: LESS
2421: IFFALSE 2447
// begin wait ( 0 0$2 ) ;
2423: LD_INT 70
2425: PPUSH
2426: CALL_OW 67
// CreateCratesArea ( x , i , true ) ;
2430: LD_VAR 0 2
2434: PPUSH
2435: LD_VAR 0 1
2439: PPUSH
2440: LD_INT 1
2442: PPUSH
2443: CALL_OW 55
// end ; end ;
2447: GO 2402
2449: POP
2450: POP
// time := time + delayTime ;
2451: LD_ADDR_VAR 0 5
2455: PUSH
2456: LD_VAR 0 5
2460: PUSH
2461: LD_VAR 0 7
2465: PLUS
2466: ST_TO_ADDR
// if time > maxTime then
2467: LD_VAR 0 5
2471: PUSH
2472: LD_VAR 0 8
2476: GREATER
2477: IFFALSE 2489
// time := normalTime ;
2479: LD_ADDR_VAR 0 5
2483: PUSH
2484: LD_VAR 0 6
2488: ST_TO_ADDR
// until false ;
2489: LD_INT 0
2491: IFFALSE 2367
// end ; end_of_file
2493: PPOPN 8
2495: END
// on UnitDestroyed ( un ) do begin Multiplayer_UnitDestroyed ( un ) ;
2496: LD_VAR 0 1
2500: PPUSH
2501: CALL 48581 0 1
// end ; end_of_file
2505: PPOPN 1
2507: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
2508: LD_INT 0
2510: PPUSH
2511: PPUSH
// if exist_mode then
2512: LD_VAR 0 2
2516: IFFALSE 2541
// unit := CreateCharacter ( prefix & ident ) else
2518: LD_ADDR_VAR 0 5
2522: PUSH
2523: LD_VAR 0 3
2527: PUSH
2528: LD_VAR 0 1
2532: STR
2533: PPUSH
2534: CALL_OW 34
2538: ST_TO_ADDR
2539: GO 2556
// unit := NewCharacter ( ident ) ;
2541: LD_ADDR_VAR 0 5
2545: PUSH
2546: LD_VAR 0 1
2550: PPUSH
2551: CALL_OW 25
2555: ST_TO_ADDR
// result := unit ;
2556: LD_ADDR_VAR 0 4
2560: PUSH
2561: LD_VAR 0 5
2565: ST_TO_ADDR
// end ;
2566: LD_VAR 0 4
2570: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
2571: LD_INT 0
2573: PPUSH
2574: PPUSH
// if not side or not nation then
2575: LD_VAR 0 1
2579: NOT
2580: PUSH
2581: LD_VAR 0 2
2585: NOT
2586: OR
2587: IFFALSE 2591
// exit ;
2589: GO 3359
// case nation of nation_american :
2591: LD_VAR 0 2
2595: PUSH
2596: LD_INT 1
2598: DOUBLE
2599: EQUAL
2600: IFTRUE 2604
2602: GO 2818
2604: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
2605: LD_ADDR_VAR 0 4
2609: PUSH
2610: LD_INT 35
2612: PUSH
2613: LD_INT 45
2615: PUSH
2616: LD_INT 46
2618: PUSH
2619: LD_INT 47
2621: PUSH
2622: LD_INT 82
2624: PUSH
2625: LD_INT 83
2627: PUSH
2628: LD_INT 84
2630: PUSH
2631: LD_INT 85
2633: PUSH
2634: LD_INT 86
2636: PUSH
2637: LD_INT 1
2639: PUSH
2640: LD_INT 2
2642: PUSH
2643: LD_INT 6
2645: PUSH
2646: LD_INT 15
2648: PUSH
2649: LD_INT 16
2651: PUSH
2652: LD_INT 7
2654: PUSH
2655: LD_INT 12
2657: PUSH
2658: LD_INT 13
2660: PUSH
2661: LD_INT 10
2663: PUSH
2664: LD_INT 14
2666: PUSH
2667: LD_INT 20
2669: PUSH
2670: LD_INT 21
2672: PUSH
2673: LD_INT 22
2675: PUSH
2676: LD_INT 25
2678: PUSH
2679: LD_INT 32
2681: PUSH
2682: LD_INT 27
2684: PUSH
2685: LD_INT 36
2687: PUSH
2688: LD_INT 69
2690: PUSH
2691: LD_INT 39
2693: PUSH
2694: LD_INT 34
2696: PUSH
2697: LD_INT 40
2699: PUSH
2700: LD_INT 48
2702: PUSH
2703: LD_INT 49
2705: PUSH
2706: LD_INT 50
2708: PUSH
2709: LD_INT 51
2711: PUSH
2712: LD_INT 52
2714: PUSH
2715: LD_INT 53
2717: PUSH
2718: LD_INT 54
2720: PUSH
2721: LD_INT 55
2723: PUSH
2724: LD_INT 56
2726: PUSH
2727: LD_INT 57
2729: PUSH
2730: LD_INT 58
2732: PUSH
2733: LD_INT 59
2735: PUSH
2736: LD_INT 60
2738: PUSH
2739: LD_INT 61
2741: PUSH
2742: LD_INT 62
2744: PUSH
2745: LD_INT 80
2747: PUSH
2748: LD_INT 82
2750: PUSH
2751: LD_INT 83
2753: PUSH
2754: LD_INT 84
2756: PUSH
2757: LD_INT 85
2759: PUSH
2760: LD_INT 86
2762: PUSH
2763: EMPTY
2764: LIST
2765: LIST
2766: LIST
2767: LIST
2768: LIST
2769: LIST
2770: LIST
2771: LIST
2772: LIST
2773: LIST
2774: LIST
2775: LIST
2776: LIST
2777: LIST
2778: LIST
2779: LIST
2780: LIST
2781: LIST
2782: LIST
2783: LIST
2784: LIST
2785: LIST
2786: LIST
2787: LIST
2788: LIST
2789: LIST
2790: LIST
2791: LIST
2792: LIST
2793: LIST
2794: LIST
2795: LIST
2796: LIST
2797: LIST
2798: LIST
2799: LIST
2800: LIST
2801: LIST
2802: LIST
2803: LIST
2804: LIST
2805: LIST
2806: LIST
2807: LIST
2808: LIST
2809: LIST
2810: LIST
2811: LIST
2812: LIST
2813: LIST
2814: LIST
2815: ST_TO_ADDR
2816: GO 3283
2818: LD_INT 2
2820: DOUBLE
2821: EQUAL
2822: IFTRUE 2826
2824: GO 3052
2826: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
2827: LD_ADDR_VAR 0 4
2831: PUSH
2832: LD_INT 35
2834: PUSH
2835: LD_INT 45
2837: PUSH
2838: LD_INT 46
2840: PUSH
2841: LD_INT 47
2843: PUSH
2844: LD_INT 82
2846: PUSH
2847: LD_INT 83
2849: PUSH
2850: LD_INT 84
2852: PUSH
2853: LD_INT 85
2855: PUSH
2856: LD_INT 87
2858: PUSH
2859: LD_INT 70
2861: PUSH
2862: LD_INT 1
2864: PUSH
2865: LD_INT 11
2867: PUSH
2868: LD_INT 3
2870: PUSH
2871: LD_INT 4
2873: PUSH
2874: LD_INT 5
2876: PUSH
2877: LD_INT 6
2879: PUSH
2880: LD_INT 15
2882: PUSH
2883: LD_INT 18
2885: PUSH
2886: LD_INT 7
2888: PUSH
2889: LD_INT 17
2891: PUSH
2892: LD_INT 8
2894: PUSH
2895: LD_INT 20
2897: PUSH
2898: LD_INT 21
2900: PUSH
2901: LD_INT 22
2903: PUSH
2904: LD_INT 72
2906: PUSH
2907: LD_INT 26
2909: PUSH
2910: LD_INT 69
2912: PUSH
2913: LD_INT 39
2915: PUSH
2916: LD_INT 40
2918: PUSH
2919: LD_INT 41
2921: PUSH
2922: LD_INT 42
2924: PUSH
2925: LD_INT 43
2927: PUSH
2928: LD_INT 48
2930: PUSH
2931: LD_INT 49
2933: PUSH
2934: LD_INT 50
2936: PUSH
2937: LD_INT 51
2939: PUSH
2940: LD_INT 52
2942: PUSH
2943: LD_INT 53
2945: PUSH
2946: LD_INT 54
2948: PUSH
2949: LD_INT 55
2951: PUSH
2952: LD_INT 56
2954: PUSH
2955: LD_INT 60
2957: PUSH
2958: LD_INT 61
2960: PUSH
2961: LD_INT 62
2963: PUSH
2964: LD_INT 66
2966: PUSH
2967: LD_INT 67
2969: PUSH
2970: LD_INT 68
2972: PUSH
2973: LD_INT 81
2975: PUSH
2976: LD_INT 82
2978: PUSH
2979: LD_INT 83
2981: PUSH
2982: LD_INT 84
2984: PUSH
2985: LD_INT 85
2987: PUSH
2988: LD_INT 87
2990: PUSH
2991: LD_INT 88
2993: PUSH
2994: EMPTY
2995: LIST
2996: LIST
2997: LIST
2998: LIST
2999: LIST
3000: LIST
3001: LIST
3002: LIST
3003: LIST
3004: LIST
3005: LIST
3006: LIST
3007: LIST
3008: LIST
3009: LIST
3010: LIST
3011: LIST
3012: LIST
3013: LIST
3014: LIST
3015: LIST
3016: LIST
3017: LIST
3018: LIST
3019: LIST
3020: LIST
3021: LIST
3022: LIST
3023: LIST
3024: LIST
3025: LIST
3026: LIST
3027: LIST
3028: LIST
3029: LIST
3030: LIST
3031: LIST
3032: LIST
3033: LIST
3034: LIST
3035: LIST
3036: LIST
3037: LIST
3038: LIST
3039: LIST
3040: LIST
3041: LIST
3042: LIST
3043: LIST
3044: LIST
3045: LIST
3046: LIST
3047: LIST
3048: LIST
3049: ST_TO_ADDR
3050: GO 3283
3052: LD_INT 3
3054: DOUBLE
3055: EQUAL
3056: IFTRUE 3060
3058: GO 3282
3060: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
3061: LD_ADDR_VAR 0 4
3065: PUSH
3066: LD_INT 46
3068: PUSH
3069: LD_INT 47
3071: PUSH
3072: LD_INT 1
3074: PUSH
3075: LD_INT 2
3077: PUSH
3078: LD_INT 82
3080: PUSH
3081: LD_INT 83
3083: PUSH
3084: LD_INT 84
3086: PUSH
3087: LD_INT 85
3089: PUSH
3090: LD_INT 86
3092: PUSH
3093: LD_INT 11
3095: PUSH
3096: LD_INT 9
3098: PUSH
3099: LD_INT 20
3101: PUSH
3102: LD_INT 19
3104: PUSH
3105: LD_INT 21
3107: PUSH
3108: LD_INT 24
3110: PUSH
3111: LD_INT 22
3113: PUSH
3114: LD_INT 25
3116: PUSH
3117: LD_INT 28
3119: PUSH
3120: LD_INT 29
3122: PUSH
3123: LD_INT 30
3125: PUSH
3126: LD_INT 31
3128: PUSH
3129: LD_INT 37
3131: PUSH
3132: LD_INT 38
3134: PUSH
3135: LD_INT 32
3137: PUSH
3138: LD_INT 27
3140: PUSH
3141: LD_INT 33
3143: PUSH
3144: LD_INT 69
3146: PUSH
3147: LD_INT 39
3149: PUSH
3150: LD_INT 34
3152: PUSH
3153: LD_INT 40
3155: PUSH
3156: LD_INT 71
3158: PUSH
3159: LD_INT 23
3161: PUSH
3162: LD_INT 44
3164: PUSH
3165: LD_INT 48
3167: PUSH
3168: LD_INT 49
3170: PUSH
3171: LD_INT 50
3173: PUSH
3174: LD_INT 51
3176: PUSH
3177: LD_INT 52
3179: PUSH
3180: LD_INT 53
3182: PUSH
3183: LD_INT 54
3185: PUSH
3186: LD_INT 55
3188: PUSH
3189: LD_INT 56
3191: PUSH
3192: LD_INT 57
3194: PUSH
3195: LD_INT 58
3197: PUSH
3198: LD_INT 59
3200: PUSH
3201: LD_INT 63
3203: PUSH
3204: LD_INT 64
3206: PUSH
3207: LD_INT 65
3209: PUSH
3210: LD_INT 82
3212: PUSH
3213: LD_INT 83
3215: PUSH
3216: LD_INT 84
3218: PUSH
3219: LD_INT 85
3221: PUSH
3222: LD_INT 86
3224: PUSH
3225: EMPTY
3226: LIST
3227: LIST
3228: LIST
3229: LIST
3230: LIST
3231: LIST
3232: LIST
3233: LIST
3234: LIST
3235: LIST
3236: LIST
3237: LIST
3238: LIST
3239: LIST
3240: LIST
3241: LIST
3242: LIST
3243: LIST
3244: LIST
3245: LIST
3246: LIST
3247: LIST
3248: LIST
3249: LIST
3250: LIST
3251: LIST
3252: LIST
3253: LIST
3254: LIST
3255: LIST
3256: LIST
3257: LIST
3258: LIST
3259: LIST
3260: LIST
3261: LIST
3262: LIST
3263: LIST
3264: LIST
3265: LIST
3266: LIST
3267: LIST
3268: LIST
3269: LIST
3270: LIST
3271: LIST
3272: LIST
3273: LIST
3274: LIST
3275: LIST
3276: LIST
3277: LIST
3278: LIST
3279: ST_TO_ADDR
3280: GO 3283
3282: POP
// if state > - 1 and state < 3 then
3283: LD_VAR 0 3
3287: PUSH
3288: LD_INT 1
3290: NEG
3291: GREATER
3292: PUSH
3293: LD_VAR 0 3
3297: PUSH
3298: LD_INT 3
3300: LESS
3301: AND
3302: IFFALSE 3359
// for i in result do
3304: LD_ADDR_VAR 0 5
3308: PUSH
3309: LD_VAR 0 4
3313: PUSH
3314: FOR_IN
3315: IFFALSE 3357
// if GetTech ( i , side ) <> state then
3317: LD_VAR 0 5
3321: PPUSH
3322: LD_VAR 0 1
3326: PPUSH
3327: CALL_OW 321
3331: PUSH
3332: LD_VAR 0 3
3336: NONEQUAL
3337: IFFALSE 3355
// result := result diff i ;
3339: LD_ADDR_VAR 0 4
3343: PUSH
3344: LD_VAR 0 4
3348: PUSH
3349: LD_VAR 0 5
3353: DIFF
3354: ST_TO_ADDR
3355: GO 3314
3357: POP
3358: POP
// end ;
3359: LD_VAR 0 4
3363: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
3364: LD_INT 0
3366: PPUSH
3367: PPUSH
3368: PPUSH
// result := true ;
3369: LD_ADDR_VAR 0 3
3373: PUSH
3374: LD_INT 1
3376: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
3377: LD_ADDR_VAR 0 5
3381: PUSH
3382: LD_VAR 0 2
3386: PPUSH
3387: CALL_OW 480
3391: ST_TO_ADDR
// if not tmp then
3392: LD_VAR 0 5
3396: NOT
3397: IFFALSE 3401
// exit ;
3399: GO 3450
// for i in tmp do
3401: LD_ADDR_VAR 0 4
3405: PUSH
3406: LD_VAR 0 5
3410: PUSH
3411: FOR_IN
3412: IFFALSE 3448
// if GetTech ( i , side ) <> state_researched then
3414: LD_VAR 0 4
3418: PPUSH
3419: LD_VAR 0 1
3423: PPUSH
3424: CALL_OW 321
3428: PUSH
3429: LD_INT 2
3431: NONEQUAL
3432: IFFALSE 3446
// begin result := false ;
3434: LD_ADDR_VAR 0 3
3438: PUSH
3439: LD_INT 0
3441: ST_TO_ADDR
// exit ;
3442: POP
3443: POP
3444: GO 3450
// end ;
3446: GO 3411
3448: POP
3449: POP
// end ;
3450: LD_VAR 0 3
3454: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
3455: LD_INT 0
3457: PPUSH
3458: PPUSH
3459: PPUSH
3460: PPUSH
3461: PPUSH
3462: PPUSH
3463: PPUSH
3464: PPUSH
3465: PPUSH
3466: PPUSH
3467: PPUSH
3468: PPUSH
3469: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
3470: LD_VAR 0 1
3474: NOT
3475: PUSH
3476: LD_VAR 0 1
3480: PPUSH
3481: CALL_OW 257
3485: PUSH
3486: LD_INT 9
3488: NONEQUAL
3489: OR
3490: IFFALSE 3494
// exit ;
3492: GO 4067
// side := GetSide ( unit ) ;
3494: LD_ADDR_VAR 0 9
3498: PUSH
3499: LD_VAR 0 1
3503: PPUSH
3504: CALL_OW 255
3508: ST_TO_ADDR
// tech_space := tech_spacanom ;
3509: LD_ADDR_VAR 0 12
3513: PUSH
3514: LD_INT 29
3516: ST_TO_ADDR
// tech_time := tech_taurad ;
3517: LD_ADDR_VAR 0 13
3521: PUSH
3522: LD_INT 28
3524: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
3525: LD_ADDR_VAR 0 11
3529: PUSH
3530: LD_VAR 0 1
3534: PPUSH
3535: CALL_OW 310
3539: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
3540: LD_VAR 0 11
3544: PPUSH
3545: CALL_OW 247
3549: PUSH
3550: LD_INT 2
3552: EQUAL
3553: IFFALSE 3557
// exit ;
3555: GO 4067
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3557: LD_ADDR_VAR 0 8
3561: PUSH
3562: LD_INT 81
3564: PUSH
3565: LD_VAR 0 9
3569: PUSH
3570: EMPTY
3571: LIST
3572: LIST
3573: PUSH
3574: LD_INT 3
3576: PUSH
3577: LD_INT 21
3579: PUSH
3580: LD_INT 3
3582: PUSH
3583: EMPTY
3584: LIST
3585: LIST
3586: PUSH
3587: EMPTY
3588: LIST
3589: LIST
3590: PUSH
3591: EMPTY
3592: LIST
3593: LIST
3594: PPUSH
3595: CALL_OW 69
3599: ST_TO_ADDR
// if not tmp then
3600: LD_VAR 0 8
3604: NOT
3605: IFFALSE 3609
// exit ;
3607: GO 4067
// if in_unit then
3609: LD_VAR 0 11
3613: IFFALSE 3637
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
3615: LD_ADDR_VAR 0 10
3619: PUSH
3620: LD_VAR 0 8
3624: PPUSH
3625: LD_VAR 0 11
3629: PPUSH
3630: CALL_OW 74
3634: ST_TO_ADDR
3635: GO 3657
// enemy := NearestUnitToUnit ( tmp , unit ) ;
3637: LD_ADDR_VAR 0 10
3641: PUSH
3642: LD_VAR 0 8
3646: PPUSH
3647: LD_VAR 0 1
3651: PPUSH
3652: CALL_OW 74
3656: ST_TO_ADDR
// if not enemy then
3657: LD_VAR 0 10
3661: NOT
3662: IFFALSE 3666
// exit ;
3664: GO 4067
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
3666: LD_VAR 0 11
3670: PUSH
3671: LD_VAR 0 11
3675: PPUSH
3676: LD_VAR 0 10
3680: PPUSH
3681: CALL_OW 296
3685: PUSH
3686: LD_INT 13
3688: GREATER
3689: AND
3690: PUSH
3691: LD_VAR 0 1
3695: PPUSH
3696: LD_VAR 0 10
3700: PPUSH
3701: CALL_OW 296
3705: PUSH
3706: LD_INT 12
3708: GREATER
3709: OR
3710: IFFALSE 3714
// exit ;
3712: GO 4067
// missile := [ 1 ] ;
3714: LD_ADDR_VAR 0 14
3718: PUSH
3719: LD_INT 1
3721: PUSH
3722: EMPTY
3723: LIST
3724: ST_TO_ADDR
// if Researched ( side , tech_space ) then
3725: LD_VAR 0 9
3729: PPUSH
3730: LD_VAR 0 12
3734: PPUSH
3735: CALL_OW 325
3739: IFFALSE 3768
// missile := Replace ( missile , missile + 1 , 2 ) ;
3741: LD_ADDR_VAR 0 14
3745: PUSH
3746: LD_VAR 0 14
3750: PPUSH
3751: LD_VAR 0 14
3755: PUSH
3756: LD_INT 1
3758: PLUS
3759: PPUSH
3760: LD_INT 2
3762: PPUSH
3763: CALL_OW 1
3767: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
3768: LD_VAR 0 9
3772: PPUSH
3773: LD_VAR 0 13
3777: PPUSH
3778: CALL_OW 325
3782: PUSH
3783: LD_VAR 0 10
3787: PPUSH
3788: CALL_OW 255
3792: PPUSH
3793: LD_VAR 0 13
3797: PPUSH
3798: CALL_OW 325
3802: NOT
3803: AND
3804: IFFALSE 3833
// missile := Replace ( missile , missile + 1 , 3 ) ;
3806: LD_ADDR_VAR 0 14
3810: PUSH
3811: LD_VAR 0 14
3815: PPUSH
3816: LD_VAR 0 14
3820: PUSH
3821: LD_INT 1
3823: PLUS
3824: PPUSH
3825: LD_INT 3
3827: PPUSH
3828: CALL_OW 1
3832: ST_TO_ADDR
// if missile < 2 then
3833: LD_VAR 0 14
3837: PUSH
3838: LD_INT 2
3840: LESS
3841: IFFALSE 3845
// exit ;
3843: GO 4067
// x := GetX ( enemy ) ;
3845: LD_ADDR_VAR 0 4
3849: PUSH
3850: LD_VAR 0 10
3854: PPUSH
3855: CALL_OW 250
3859: ST_TO_ADDR
// y := GetY ( enemy ) ;
3860: LD_ADDR_VAR 0 5
3864: PUSH
3865: LD_VAR 0 10
3869: PPUSH
3870: CALL_OW 251
3874: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
3875: LD_ADDR_VAR 0 6
3879: PUSH
3880: LD_VAR 0 4
3884: PUSH
3885: LD_INT 1
3887: NEG
3888: PPUSH
3889: LD_INT 1
3891: PPUSH
3892: CALL_OW 12
3896: PLUS
3897: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
3898: LD_ADDR_VAR 0 7
3902: PUSH
3903: LD_VAR 0 5
3907: PUSH
3908: LD_INT 1
3910: NEG
3911: PPUSH
3912: LD_INT 1
3914: PPUSH
3915: CALL_OW 12
3919: PLUS
3920: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
3921: LD_VAR 0 6
3925: PPUSH
3926: LD_VAR 0 7
3930: PPUSH
3931: CALL_OW 488
3935: NOT
3936: IFFALSE 3958
// begin _x := x ;
3938: LD_ADDR_VAR 0 6
3942: PUSH
3943: LD_VAR 0 4
3947: ST_TO_ADDR
// _y := y ;
3948: LD_ADDR_VAR 0 7
3952: PUSH
3953: LD_VAR 0 5
3957: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
3958: LD_ADDR_VAR 0 3
3962: PUSH
3963: LD_INT 1
3965: PPUSH
3966: LD_VAR 0 14
3970: PPUSH
3971: CALL_OW 12
3975: ST_TO_ADDR
// case i of 1 :
3976: LD_VAR 0 3
3980: PUSH
3981: LD_INT 1
3983: DOUBLE
3984: EQUAL
3985: IFTRUE 3989
3987: GO 4006
3989: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
3990: LD_VAR 0 1
3994: PPUSH
3995: LD_VAR 0 10
3999: PPUSH
4000: CALL_OW 115
4004: GO 4067
4006: LD_INT 2
4008: DOUBLE
4009: EQUAL
4010: IFTRUE 4014
4012: GO 4036
4014: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
4015: LD_VAR 0 1
4019: PPUSH
4020: LD_VAR 0 6
4024: PPUSH
4025: LD_VAR 0 7
4029: PPUSH
4030: CALL_OW 153
4034: GO 4067
4036: LD_INT 3
4038: DOUBLE
4039: EQUAL
4040: IFTRUE 4044
4042: GO 4066
4044: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
4045: LD_VAR 0 1
4049: PPUSH
4050: LD_VAR 0 6
4054: PPUSH
4055: LD_VAR 0 7
4059: PPUSH
4060: CALL_OW 154
4064: GO 4067
4066: POP
// end ;
4067: LD_VAR 0 2
4071: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
4072: LD_INT 0
4074: PPUSH
4075: PPUSH
4076: PPUSH
4077: PPUSH
4078: PPUSH
4079: PPUSH
// if not unit or not building then
4080: LD_VAR 0 1
4084: NOT
4085: PUSH
4086: LD_VAR 0 2
4090: NOT
4091: OR
4092: IFFALSE 4096
// exit ;
4094: GO 4254
// x := GetX ( building ) ;
4096: LD_ADDR_VAR 0 5
4100: PUSH
4101: LD_VAR 0 2
4105: PPUSH
4106: CALL_OW 250
4110: ST_TO_ADDR
// y := GetY ( building ) ;
4111: LD_ADDR_VAR 0 6
4115: PUSH
4116: LD_VAR 0 2
4120: PPUSH
4121: CALL_OW 251
4125: ST_TO_ADDR
// for i = 0 to 5 do
4126: LD_ADDR_VAR 0 4
4130: PUSH
4131: DOUBLE
4132: LD_INT 0
4134: DEC
4135: ST_TO_ADDR
4136: LD_INT 5
4138: PUSH
4139: FOR_TO
4140: IFFALSE 4252
// begin _x := ShiftX ( x , i , 3 ) ;
4142: LD_ADDR_VAR 0 7
4146: PUSH
4147: LD_VAR 0 5
4151: PPUSH
4152: LD_VAR 0 4
4156: PPUSH
4157: LD_INT 3
4159: PPUSH
4160: CALL_OW 272
4164: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
4165: LD_ADDR_VAR 0 8
4169: PUSH
4170: LD_VAR 0 6
4174: PPUSH
4175: LD_VAR 0 4
4179: PPUSH
4180: LD_INT 3
4182: PPUSH
4183: CALL_OW 273
4187: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4188: LD_VAR 0 7
4192: PPUSH
4193: LD_VAR 0 8
4197: PPUSH
4198: CALL_OW 488
4202: NOT
4203: IFFALSE 4207
// continue ;
4205: GO 4139
// if HexInfo ( _x , _y ) = 0 then
4207: LD_VAR 0 7
4211: PPUSH
4212: LD_VAR 0 8
4216: PPUSH
4217: CALL_OW 428
4221: PUSH
4222: LD_INT 0
4224: EQUAL
4225: IFFALSE 4250
// begin ComMoveXY ( unit , _x , _y ) ;
4227: LD_VAR 0 1
4231: PPUSH
4232: LD_VAR 0 7
4236: PPUSH
4237: LD_VAR 0 8
4241: PPUSH
4242: CALL_OW 111
// exit ;
4246: POP
4247: POP
4248: GO 4254
// end ; end ;
4250: GO 4139
4252: POP
4253: POP
// end ;
4254: LD_VAR 0 3
4258: RET
// export function ScanBase ( side , base_area ) ; begin
4259: LD_INT 0
4261: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
4262: LD_ADDR_VAR 0 3
4266: PUSH
4267: LD_VAR 0 2
4271: PPUSH
4272: LD_INT 81
4274: PUSH
4275: LD_VAR 0 1
4279: PUSH
4280: EMPTY
4281: LIST
4282: LIST
4283: PPUSH
4284: CALL_OW 70
4288: ST_TO_ADDR
// end ;
4289: LD_VAR 0 3
4293: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
4294: LD_INT 0
4296: PPUSH
4297: PPUSH
4298: PPUSH
4299: PPUSH
// result := false ;
4300: LD_ADDR_VAR 0 2
4304: PUSH
4305: LD_INT 0
4307: ST_TO_ADDR
// side := GetSide ( unit ) ;
4308: LD_ADDR_VAR 0 3
4312: PUSH
4313: LD_VAR 0 1
4317: PPUSH
4318: CALL_OW 255
4322: ST_TO_ADDR
// nat := GetNation ( unit ) ;
4323: LD_ADDR_VAR 0 4
4327: PUSH
4328: LD_VAR 0 1
4332: PPUSH
4333: CALL_OW 248
4337: ST_TO_ADDR
// case nat of 1 :
4338: LD_VAR 0 4
4342: PUSH
4343: LD_INT 1
4345: DOUBLE
4346: EQUAL
4347: IFTRUE 4351
4349: GO 4362
4351: POP
// tech := tech_lassight ; 2 :
4352: LD_ADDR_VAR 0 5
4356: PUSH
4357: LD_INT 12
4359: ST_TO_ADDR
4360: GO 4401
4362: LD_INT 2
4364: DOUBLE
4365: EQUAL
4366: IFTRUE 4370
4368: GO 4381
4370: POP
// tech := tech_mortar ; 3 :
4371: LD_ADDR_VAR 0 5
4375: PUSH
4376: LD_INT 41
4378: ST_TO_ADDR
4379: GO 4401
4381: LD_INT 3
4383: DOUBLE
4384: EQUAL
4385: IFTRUE 4389
4387: GO 4400
4389: POP
// tech := tech_bazooka ; end ;
4390: LD_ADDR_VAR 0 5
4394: PUSH
4395: LD_INT 44
4397: ST_TO_ADDR
4398: GO 4401
4400: POP
// if Researched ( side , tech ) then
4401: LD_VAR 0 3
4405: PPUSH
4406: LD_VAR 0 5
4410: PPUSH
4411: CALL_OW 325
4415: IFFALSE 4442
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
4417: LD_ADDR_VAR 0 2
4421: PUSH
4422: LD_INT 5
4424: PUSH
4425: LD_INT 8
4427: PUSH
4428: LD_INT 9
4430: PUSH
4431: EMPTY
4432: LIST
4433: LIST
4434: LIST
4435: PUSH
4436: LD_VAR 0 4
4440: ARRAY
4441: ST_TO_ADDR
// end ;
4442: LD_VAR 0 2
4446: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
4447: LD_INT 0
4449: PPUSH
4450: PPUSH
4451: PPUSH
// if not mines then
4452: LD_VAR 0 2
4456: NOT
4457: IFFALSE 4461
// exit ;
4459: GO 4605
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4461: LD_ADDR_VAR 0 5
4465: PUSH
4466: LD_INT 81
4468: PUSH
4469: LD_VAR 0 1
4473: PUSH
4474: EMPTY
4475: LIST
4476: LIST
4477: PUSH
4478: LD_INT 3
4480: PUSH
4481: LD_INT 21
4483: PUSH
4484: LD_INT 3
4486: PUSH
4487: EMPTY
4488: LIST
4489: LIST
4490: PUSH
4491: EMPTY
4492: LIST
4493: LIST
4494: PUSH
4495: EMPTY
4496: LIST
4497: LIST
4498: PPUSH
4499: CALL_OW 69
4503: ST_TO_ADDR
// for i in mines do
4504: LD_ADDR_VAR 0 4
4508: PUSH
4509: LD_VAR 0 2
4513: PUSH
4514: FOR_IN
4515: IFFALSE 4603
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
4517: LD_VAR 0 4
4521: PUSH
4522: LD_INT 1
4524: ARRAY
4525: PPUSH
4526: LD_VAR 0 4
4530: PUSH
4531: LD_INT 2
4533: ARRAY
4534: PPUSH
4535: CALL_OW 458
4539: NOT
4540: IFFALSE 4544
// continue ;
4542: GO 4514
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
4544: LD_VAR 0 4
4548: PUSH
4549: LD_INT 1
4551: ARRAY
4552: PPUSH
4553: LD_VAR 0 4
4557: PUSH
4558: LD_INT 2
4560: ARRAY
4561: PPUSH
4562: CALL_OW 428
4566: PUSH
4567: LD_VAR 0 5
4571: IN
4572: IFFALSE 4601
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
4574: LD_VAR 0 4
4578: PUSH
4579: LD_INT 1
4581: ARRAY
4582: PPUSH
4583: LD_VAR 0 4
4587: PUSH
4588: LD_INT 2
4590: ARRAY
4591: PPUSH
4592: LD_VAR 0 1
4596: PPUSH
4597: CALL_OW 456
// end ;
4601: GO 4514
4603: POP
4604: POP
// end ;
4605: LD_VAR 0 3
4609: RET
// export function Count ( array ) ; begin
4610: LD_INT 0
4612: PPUSH
// result := array + 0 ;
4613: LD_ADDR_VAR 0 2
4617: PUSH
4618: LD_VAR 0 1
4622: PUSH
4623: LD_INT 0
4625: PLUS
4626: ST_TO_ADDR
// end ;
4627: LD_VAR 0 2
4631: RET
// export function IsEmpty ( building ) ; begin
4632: LD_INT 0
4634: PPUSH
// if not building then
4635: LD_VAR 0 1
4639: NOT
4640: IFFALSE 4644
// exit ;
4642: GO 4687
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
4644: LD_ADDR_VAR 0 2
4648: PUSH
4649: LD_VAR 0 1
4653: PUSH
4654: LD_INT 22
4656: PUSH
4657: LD_VAR 0 1
4661: PPUSH
4662: CALL_OW 255
4666: PUSH
4667: EMPTY
4668: LIST
4669: LIST
4670: PUSH
4671: LD_INT 58
4673: PUSH
4674: EMPTY
4675: LIST
4676: PUSH
4677: EMPTY
4678: LIST
4679: LIST
4680: PPUSH
4681: CALL_OW 69
4685: IN
4686: ST_TO_ADDR
// end ;
4687: LD_VAR 0 2
4691: RET
// export function IsNotFull ( building ) ; var places ; begin
4692: LD_INT 0
4694: PPUSH
4695: PPUSH
// if not building then
4696: LD_VAR 0 1
4700: NOT
4701: IFFALSE 4705
// exit ;
4703: GO 4733
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
4705: LD_ADDR_VAR 0 2
4709: PUSH
4710: LD_VAR 0 1
4714: PPUSH
4715: LD_INT 3
4717: PUSH
4718: LD_INT 62
4720: PUSH
4721: EMPTY
4722: LIST
4723: PUSH
4724: EMPTY
4725: LIST
4726: LIST
4727: PPUSH
4728: CALL_OW 72
4732: ST_TO_ADDR
// end ;
4733: LD_VAR 0 2
4737: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
4738: LD_INT 0
4740: PPUSH
4741: PPUSH
4742: PPUSH
4743: PPUSH
// tmp := [ ] ;
4744: LD_ADDR_VAR 0 3
4748: PUSH
4749: EMPTY
4750: ST_TO_ADDR
// list := [ ] ;
4751: LD_ADDR_VAR 0 5
4755: PUSH
4756: EMPTY
4757: ST_TO_ADDR
// for i = 16 to 25 do
4758: LD_ADDR_VAR 0 4
4762: PUSH
4763: DOUBLE
4764: LD_INT 16
4766: DEC
4767: ST_TO_ADDR
4768: LD_INT 25
4770: PUSH
4771: FOR_TO
4772: IFFALSE 4845
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
4774: LD_ADDR_VAR 0 3
4778: PUSH
4779: LD_VAR 0 3
4783: PUSH
4784: LD_INT 22
4786: PUSH
4787: LD_VAR 0 1
4791: PPUSH
4792: CALL_OW 255
4796: PUSH
4797: EMPTY
4798: LIST
4799: LIST
4800: PUSH
4801: LD_INT 91
4803: PUSH
4804: LD_VAR 0 1
4808: PUSH
4809: LD_INT 6
4811: PUSH
4812: EMPTY
4813: LIST
4814: LIST
4815: LIST
4816: PUSH
4817: LD_INT 30
4819: PUSH
4820: LD_VAR 0 4
4824: PUSH
4825: EMPTY
4826: LIST
4827: LIST
4828: PUSH
4829: EMPTY
4830: LIST
4831: LIST
4832: LIST
4833: PUSH
4834: EMPTY
4835: LIST
4836: PPUSH
4837: CALL_OW 69
4841: ADD
4842: ST_TO_ADDR
4843: GO 4771
4845: POP
4846: POP
// for i = 1 to tmp do
4847: LD_ADDR_VAR 0 4
4851: PUSH
4852: DOUBLE
4853: LD_INT 1
4855: DEC
4856: ST_TO_ADDR
4857: LD_VAR 0 3
4861: PUSH
4862: FOR_TO
4863: IFFALSE 4951
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
4865: LD_ADDR_VAR 0 5
4869: PUSH
4870: LD_VAR 0 5
4874: PUSH
4875: LD_VAR 0 3
4879: PUSH
4880: LD_VAR 0 4
4884: ARRAY
4885: PPUSH
4886: CALL_OW 266
4890: PUSH
4891: LD_VAR 0 3
4895: PUSH
4896: LD_VAR 0 4
4900: ARRAY
4901: PPUSH
4902: CALL_OW 250
4906: PUSH
4907: LD_VAR 0 3
4911: PUSH
4912: LD_VAR 0 4
4916: ARRAY
4917: PPUSH
4918: CALL_OW 251
4922: PUSH
4923: LD_VAR 0 3
4927: PUSH
4928: LD_VAR 0 4
4932: ARRAY
4933: PPUSH
4934: CALL_OW 254
4938: PUSH
4939: EMPTY
4940: LIST
4941: LIST
4942: LIST
4943: LIST
4944: PUSH
4945: EMPTY
4946: LIST
4947: ADD
4948: ST_TO_ADDR
4949: GO 4862
4951: POP
4952: POP
// result := list ;
4953: LD_ADDR_VAR 0 2
4957: PUSH
4958: LD_VAR 0 5
4962: ST_TO_ADDR
// end ;
4963: LD_VAR 0 2
4967: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
4968: LD_INT 0
4970: PPUSH
4971: PPUSH
4972: PPUSH
4973: PPUSH
4974: PPUSH
4975: PPUSH
4976: PPUSH
// if not factory then
4977: LD_VAR 0 1
4981: NOT
4982: IFFALSE 4986
// exit ;
4984: GO 5579
// if control = control_apeman then
4986: LD_VAR 0 4
4990: PUSH
4991: LD_INT 5
4993: EQUAL
4994: IFFALSE 5103
// begin tmp := UnitsInside ( factory ) ;
4996: LD_ADDR_VAR 0 8
5000: PUSH
5001: LD_VAR 0 1
5005: PPUSH
5006: CALL_OW 313
5010: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
5011: LD_VAR 0 8
5015: PPUSH
5016: LD_INT 25
5018: PUSH
5019: LD_INT 12
5021: PUSH
5022: EMPTY
5023: LIST
5024: LIST
5025: PPUSH
5026: CALL_OW 72
5030: NOT
5031: IFFALSE 5041
// control := control_manual ;
5033: LD_ADDR_VAR 0 4
5037: PUSH
5038: LD_INT 1
5040: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
5041: LD_ADDR_VAR 0 8
5045: PUSH
5046: LD_VAR 0 1
5050: PPUSH
5051: CALL 4738 0 1
5055: ST_TO_ADDR
// if tmp then
5056: LD_VAR 0 8
5060: IFFALSE 5103
// begin for i in tmp do
5062: LD_ADDR_VAR 0 7
5066: PUSH
5067: LD_VAR 0 8
5071: PUSH
5072: FOR_IN
5073: IFFALSE 5101
// if i [ 1 ] = b_ext_radio then
5075: LD_VAR 0 7
5079: PUSH
5080: LD_INT 1
5082: ARRAY
5083: PUSH
5084: LD_INT 22
5086: EQUAL
5087: IFFALSE 5099
// begin control := control_remote ;
5089: LD_ADDR_VAR 0 4
5093: PUSH
5094: LD_INT 2
5096: ST_TO_ADDR
// break ;
5097: GO 5101
// end ;
5099: GO 5072
5101: POP
5102: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5103: LD_VAR 0 1
5107: PPUSH
5108: LD_VAR 0 2
5112: PPUSH
5113: LD_VAR 0 3
5117: PPUSH
5118: LD_VAR 0 4
5122: PPUSH
5123: LD_VAR 0 5
5127: PPUSH
5128: CALL_OW 448
5132: IFFALSE 5167
// begin result := [ chassis , engine , control , weapon ] ;
5134: LD_ADDR_VAR 0 6
5138: PUSH
5139: LD_VAR 0 2
5143: PUSH
5144: LD_VAR 0 3
5148: PUSH
5149: LD_VAR 0 4
5153: PUSH
5154: LD_VAR 0 5
5158: PUSH
5159: EMPTY
5160: LIST
5161: LIST
5162: LIST
5163: LIST
5164: ST_TO_ADDR
// exit ;
5165: GO 5579
// end ; _chassis := AvailableChassisList ( factory ) ;
5167: LD_ADDR_VAR 0 9
5171: PUSH
5172: LD_VAR 0 1
5176: PPUSH
5177: CALL_OW 475
5181: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
5182: LD_ADDR_VAR 0 11
5186: PUSH
5187: LD_VAR 0 1
5191: PPUSH
5192: CALL_OW 476
5196: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
5197: LD_ADDR_VAR 0 12
5201: PUSH
5202: LD_VAR 0 1
5206: PPUSH
5207: CALL_OW 477
5211: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
5212: LD_ADDR_VAR 0 10
5216: PUSH
5217: LD_VAR 0 1
5221: PPUSH
5222: CALL_OW 478
5226: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
5227: LD_VAR 0 9
5231: NOT
5232: PUSH
5233: LD_VAR 0 11
5237: NOT
5238: OR
5239: PUSH
5240: LD_VAR 0 12
5244: NOT
5245: OR
5246: PUSH
5247: LD_VAR 0 10
5251: NOT
5252: OR
5253: IFFALSE 5288
// begin result := [ chassis , engine , control , weapon ] ;
5255: LD_ADDR_VAR 0 6
5259: PUSH
5260: LD_VAR 0 2
5264: PUSH
5265: LD_VAR 0 3
5269: PUSH
5270: LD_VAR 0 4
5274: PUSH
5275: LD_VAR 0 5
5279: PUSH
5280: EMPTY
5281: LIST
5282: LIST
5283: LIST
5284: LIST
5285: ST_TO_ADDR
// exit ;
5286: GO 5579
// end ; if not chassis in _chassis then
5288: LD_VAR 0 2
5292: PUSH
5293: LD_VAR 0 9
5297: IN
5298: NOT
5299: IFFALSE 5325
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
5301: LD_ADDR_VAR 0 2
5305: PUSH
5306: LD_VAR 0 9
5310: PUSH
5311: LD_INT 1
5313: PPUSH
5314: LD_VAR 0 9
5318: PPUSH
5319: CALL_OW 12
5323: ARRAY
5324: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
5325: LD_VAR 0 2
5329: PPUSH
5330: LD_VAR 0 3
5334: PPUSH
5335: CALL 5584 0 2
5339: NOT
5340: IFFALSE 5399
// repeat engine := _engine [ 1 ] ;
5342: LD_ADDR_VAR 0 3
5346: PUSH
5347: LD_VAR 0 11
5351: PUSH
5352: LD_INT 1
5354: ARRAY
5355: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
5356: LD_ADDR_VAR 0 11
5360: PUSH
5361: LD_VAR 0 11
5365: PPUSH
5366: LD_INT 1
5368: PPUSH
5369: CALL_OW 3
5373: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
5374: LD_VAR 0 2
5378: PPUSH
5379: LD_VAR 0 3
5383: PPUSH
5384: CALL 5584 0 2
5388: PUSH
5389: LD_VAR 0 11
5393: PUSH
5394: EMPTY
5395: EQUAL
5396: OR
5397: IFFALSE 5342
// if not control in _control then
5399: LD_VAR 0 4
5403: PUSH
5404: LD_VAR 0 12
5408: IN
5409: NOT
5410: IFFALSE 5436
// control := _control [ rand ( 1 , _control ) ] ;
5412: LD_ADDR_VAR 0 4
5416: PUSH
5417: LD_VAR 0 12
5421: PUSH
5422: LD_INT 1
5424: PPUSH
5425: LD_VAR 0 12
5429: PPUSH
5430: CALL_OW 12
5434: ARRAY
5435: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
5436: LD_VAR 0 2
5440: PPUSH
5441: LD_VAR 0 5
5445: PPUSH
5446: CALL 5804 0 2
5450: NOT
5451: IFFALSE 5510
// repeat weapon := _weapon [ 1 ] ;
5453: LD_ADDR_VAR 0 5
5457: PUSH
5458: LD_VAR 0 10
5462: PUSH
5463: LD_INT 1
5465: ARRAY
5466: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
5467: LD_ADDR_VAR 0 10
5471: PUSH
5472: LD_VAR 0 10
5476: PPUSH
5477: LD_INT 1
5479: PPUSH
5480: CALL_OW 3
5484: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
5485: LD_VAR 0 2
5489: PPUSH
5490: LD_VAR 0 5
5494: PPUSH
5495: CALL 5804 0 2
5499: PUSH
5500: LD_VAR 0 10
5504: PUSH
5505: EMPTY
5506: EQUAL
5507: OR
5508: IFFALSE 5453
// result := [ ] ;
5510: LD_ADDR_VAR 0 6
5514: PUSH
5515: EMPTY
5516: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5517: LD_VAR 0 1
5521: PPUSH
5522: LD_VAR 0 2
5526: PPUSH
5527: LD_VAR 0 3
5531: PPUSH
5532: LD_VAR 0 4
5536: PPUSH
5537: LD_VAR 0 5
5541: PPUSH
5542: CALL_OW 448
5546: IFFALSE 5579
// result := [ chassis , engine , control , weapon ] ;
5548: LD_ADDR_VAR 0 6
5552: PUSH
5553: LD_VAR 0 2
5557: PUSH
5558: LD_VAR 0 3
5562: PUSH
5563: LD_VAR 0 4
5567: PUSH
5568: LD_VAR 0 5
5572: PUSH
5573: EMPTY
5574: LIST
5575: LIST
5576: LIST
5577: LIST
5578: ST_TO_ADDR
// end ;
5579: LD_VAR 0 6
5583: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
5584: LD_INT 0
5586: PPUSH
// if not chassis or not engine then
5587: LD_VAR 0 1
5591: NOT
5592: PUSH
5593: LD_VAR 0 2
5597: NOT
5598: OR
5599: IFFALSE 5603
// exit ;
5601: GO 5799
// case engine of engine_solar :
5603: LD_VAR 0 2
5607: PUSH
5608: LD_INT 2
5610: DOUBLE
5611: EQUAL
5612: IFTRUE 5616
5614: GO 5654
5616: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
5617: LD_ADDR_VAR 0 3
5621: PUSH
5622: LD_INT 11
5624: PUSH
5625: LD_INT 12
5627: PUSH
5628: LD_INT 13
5630: PUSH
5631: LD_INT 14
5633: PUSH
5634: LD_INT 1
5636: PUSH
5637: LD_INT 2
5639: PUSH
5640: LD_INT 3
5642: PUSH
5643: EMPTY
5644: LIST
5645: LIST
5646: LIST
5647: LIST
5648: LIST
5649: LIST
5650: LIST
5651: ST_TO_ADDR
5652: GO 5783
5654: LD_INT 1
5656: DOUBLE
5657: EQUAL
5658: IFTRUE 5662
5660: GO 5724
5662: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
5663: LD_ADDR_VAR 0 3
5667: PUSH
5668: LD_INT 11
5670: PUSH
5671: LD_INT 12
5673: PUSH
5674: LD_INT 13
5676: PUSH
5677: LD_INT 14
5679: PUSH
5680: LD_INT 1
5682: PUSH
5683: LD_INT 2
5685: PUSH
5686: LD_INT 3
5688: PUSH
5689: LD_INT 4
5691: PUSH
5692: LD_INT 5
5694: PUSH
5695: LD_INT 21
5697: PUSH
5698: LD_INT 23
5700: PUSH
5701: LD_INT 22
5703: PUSH
5704: LD_INT 24
5706: PUSH
5707: EMPTY
5708: LIST
5709: LIST
5710: LIST
5711: LIST
5712: LIST
5713: LIST
5714: LIST
5715: LIST
5716: LIST
5717: LIST
5718: LIST
5719: LIST
5720: LIST
5721: ST_TO_ADDR
5722: GO 5783
5724: LD_INT 3
5726: DOUBLE
5727: EQUAL
5728: IFTRUE 5732
5730: GO 5782
5732: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
5733: LD_ADDR_VAR 0 3
5737: PUSH
5738: LD_INT 13
5740: PUSH
5741: LD_INT 14
5743: PUSH
5744: LD_INT 2
5746: PUSH
5747: LD_INT 3
5749: PUSH
5750: LD_INT 4
5752: PUSH
5753: LD_INT 5
5755: PUSH
5756: LD_INT 21
5758: PUSH
5759: LD_INT 22
5761: PUSH
5762: LD_INT 23
5764: PUSH
5765: LD_INT 24
5767: PUSH
5768: EMPTY
5769: LIST
5770: LIST
5771: LIST
5772: LIST
5773: LIST
5774: LIST
5775: LIST
5776: LIST
5777: LIST
5778: LIST
5779: ST_TO_ADDR
5780: GO 5783
5782: POP
// result := ( chassis in result ) ;
5783: LD_ADDR_VAR 0 3
5787: PUSH
5788: LD_VAR 0 1
5792: PUSH
5793: LD_VAR 0 3
5797: IN
5798: ST_TO_ADDR
// end ;
5799: LD_VAR 0 3
5803: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
5804: LD_INT 0
5806: PPUSH
// if not chassis or not weapon then
5807: LD_VAR 0 1
5811: NOT
5812: PUSH
5813: LD_VAR 0 2
5817: NOT
5818: OR
5819: IFFALSE 5823
// exit ;
5821: GO 6883
// case weapon of us_machine_gun :
5823: LD_VAR 0 2
5827: PUSH
5828: LD_INT 2
5830: DOUBLE
5831: EQUAL
5832: IFTRUE 5836
5834: GO 5866
5836: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
5837: LD_ADDR_VAR 0 3
5841: PUSH
5842: LD_INT 1
5844: PUSH
5845: LD_INT 2
5847: PUSH
5848: LD_INT 3
5850: PUSH
5851: LD_INT 4
5853: PUSH
5854: LD_INT 5
5856: PUSH
5857: EMPTY
5858: LIST
5859: LIST
5860: LIST
5861: LIST
5862: LIST
5863: ST_TO_ADDR
5864: GO 6867
5866: LD_INT 3
5868: DOUBLE
5869: EQUAL
5870: IFTRUE 5874
5872: GO 5904
5874: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
5875: LD_ADDR_VAR 0 3
5879: PUSH
5880: LD_INT 1
5882: PUSH
5883: LD_INT 2
5885: PUSH
5886: LD_INT 3
5888: PUSH
5889: LD_INT 4
5891: PUSH
5892: LD_INT 5
5894: PUSH
5895: EMPTY
5896: LIST
5897: LIST
5898: LIST
5899: LIST
5900: LIST
5901: ST_TO_ADDR
5902: GO 6867
5904: LD_INT 11
5906: DOUBLE
5907: EQUAL
5908: IFTRUE 5912
5910: GO 5942
5912: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
5913: LD_ADDR_VAR 0 3
5917: PUSH
5918: LD_INT 1
5920: PUSH
5921: LD_INT 2
5923: PUSH
5924: LD_INT 3
5926: PUSH
5927: LD_INT 4
5929: PUSH
5930: LD_INT 5
5932: PUSH
5933: EMPTY
5934: LIST
5935: LIST
5936: LIST
5937: LIST
5938: LIST
5939: ST_TO_ADDR
5940: GO 6867
5942: LD_INT 4
5944: DOUBLE
5945: EQUAL
5946: IFTRUE 5950
5948: GO 5976
5950: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
5951: LD_ADDR_VAR 0 3
5955: PUSH
5956: LD_INT 2
5958: PUSH
5959: LD_INT 3
5961: PUSH
5962: LD_INT 4
5964: PUSH
5965: LD_INT 5
5967: PUSH
5968: EMPTY
5969: LIST
5970: LIST
5971: LIST
5972: LIST
5973: ST_TO_ADDR
5974: GO 6867
5976: LD_INT 5
5978: DOUBLE
5979: EQUAL
5980: IFTRUE 5984
5982: GO 6010
5984: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
5985: LD_ADDR_VAR 0 3
5989: PUSH
5990: LD_INT 2
5992: PUSH
5993: LD_INT 3
5995: PUSH
5996: LD_INT 4
5998: PUSH
5999: LD_INT 5
6001: PUSH
6002: EMPTY
6003: LIST
6004: LIST
6005: LIST
6006: LIST
6007: ST_TO_ADDR
6008: GO 6867
6010: LD_INT 9
6012: DOUBLE
6013: EQUAL
6014: IFTRUE 6018
6016: GO 6044
6018: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
6019: LD_ADDR_VAR 0 3
6023: PUSH
6024: LD_INT 2
6026: PUSH
6027: LD_INT 3
6029: PUSH
6030: LD_INT 4
6032: PUSH
6033: LD_INT 5
6035: PUSH
6036: EMPTY
6037: LIST
6038: LIST
6039: LIST
6040: LIST
6041: ST_TO_ADDR
6042: GO 6867
6044: LD_INT 7
6046: DOUBLE
6047: EQUAL
6048: IFTRUE 6052
6050: GO 6078
6052: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
6053: LD_ADDR_VAR 0 3
6057: PUSH
6058: LD_INT 2
6060: PUSH
6061: LD_INT 3
6063: PUSH
6064: LD_INT 4
6066: PUSH
6067: LD_INT 5
6069: PUSH
6070: EMPTY
6071: LIST
6072: LIST
6073: LIST
6074: LIST
6075: ST_TO_ADDR
6076: GO 6867
6078: LD_INT 12
6080: DOUBLE
6081: EQUAL
6082: IFTRUE 6086
6084: GO 6112
6086: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
6087: LD_ADDR_VAR 0 3
6091: PUSH
6092: LD_INT 2
6094: PUSH
6095: LD_INT 3
6097: PUSH
6098: LD_INT 4
6100: PUSH
6101: LD_INT 5
6103: PUSH
6104: EMPTY
6105: LIST
6106: LIST
6107: LIST
6108: LIST
6109: ST_TO_ADDR
6110: GO 6867
6112: LD_INT 13
6114: DOUBLE
6115: EQUAL
6116: IFTRUE 6120
6118: GO 6146
6120: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
6121: LD_ADDR_VAR 0 3
6125: PUSH
6126: LD_INT 2
6128: PUSH
6129: LD_INT 3
6131: PUSH
6132: LD_INT 4
6134: PUSH
6135: LD_INT 5
6137: PUSH
6138: EMPTY
6139: LIST
6140: LIST
6141: LIST
6142: LIST
6143: ST_TO_ADDR
6144: GO 6867
6146: LD_INT 14
6148: DOUBLE
6149: EQUAL
6150: IFTRUE 6154
6152: GO 6172
6154: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
6155: LD_ADDR_VAR 0 3
6159: PUSH
6160: LD_INT 4
6162: PUSH
6163: LD_INT 5
6165: PUSH
6166: EMPTY
6167: LIST
6168: LIST
6169: ST_TO_ADDR
6170: GO 6867
6172: LD_INT 6
6174: DOUBLE
6175: EQUAL
6176: IFTRUE 6180
6178: GO 6198
6180: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
6181: LD_ADDR_VAR 0 3
6185: PUSH
6186: LD_INT 4
6188: PUSH
6189: LD_INT 5
6191: PUSH
6192: EMPTY
6193: LIST
6194: LIST
6195: ST_TO_ADDR
6196: GO 6867
6198: LD_INT 10
6200: DOUBLE
6201: EQUAL
6202: IFTRUE 6206
6204: GO 6224
6206: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
6207: LD_ADDR_VAR 0 3
6211: PUSH
6212: LD_INT 4
6214: PUSH
6215: LD_INT 5
6217: PUSH
6218: EMPTY
6219: LIST
6220: LIST
6221: ST_TO_ADDR
6222: GO 6867
6224: LD_INT 22
6226: DOUBLE
6227: EQUAL
6228: IFTRUE 6232
6230: GO 6258
6232: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
6233: LD_ADDR_VAR 0 3
6237: PUSH
6238: LD_INT 11
6240: PUSH
6241: LD_INT 12
6243: PUSH
6244: LD_INT 13
6246: PUSH
6247: LD_INT 14
6249: PUSH
6250: EMPTY
6251: LIST
6252: LIST
6253: LIST
6254: LIST
6255: ST_TO_ADDR
6256: GO 6867
6258: LD_INT 23
6260: DOUBLE
6261: EQUAL
6262: IFTRUE 6266
6264: GO 6292
6266: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
6267: LD_ADDR_VAR 0 3
6271: PUSH
6272: LD_INT 11
6274: PUSH
6275: LD_INT 12
6277: PUSH
6278: LD_INT 13
6280: PUSH
6281: LD_INT 14
6283: PUSH
6284: EMPTY
6285: LIST
6286: LIST
6287: LIST
6288: LIST
6289: ST_TO_ADDR
6290: GO 6867
6292: LD_INT 24
6294: DOUBLE
6295: EQUAL
6296: IFTRUE 6300
6298: GO 6326
6300: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
6301: LD_ADDR_VAR 0 3
6305: PUSH
6306: LD_INT 11
6308: PUSH
6309: LD_INT 12
6311: PUSH
6312: LD_INT 13
6314: PUSH
6315: LD_INT 14
6317: PUSH
6318: EMPTY
6319: LIST
6320: LIST
6321: LIST
6322: LIST
6323: ST_TO_ADDR
6324: GO 6867
6326: LD_INT 30
6328: DOUBLE
6329: EQUAL
6330: IFTRUE 6334
6332: GO 6360
6334: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
6335: LD_ADDR_VAR 0 3
6339: PUSH
6340: LD_INT 11
6342: PUSH
6343: LD_INT 12
6345: PUSH
6346: LD_INT 13
6348: PUSH
6349: LD_INT 14
6351: PUSH
6352: EMPTY
6353: LIST
6354: LIST
6355: LIST
6356: LIST
6357: ST_TO_ADDR
6358: GO 6867
6360: LD_INT 25
6362: DOUBLE
6363: EQUAL
6364: IFTRUE 6368
6366: GO 6386
6368: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
6369: LD_ADDR_VAR 0 3
6373: PUSH
6374: LD_INT 13
6376: PUSH
6377: LD_INT 14
6379: PUSH
6380: EMPTY
6381: LIST
6382: LIST
6383: ST_TO_ADDR
6384: GO 6867
6386: LD_INT 27
6388: DOUBLE
6389: EQUAL
6390: IFTRUE 6394
6392: GO 6412
6394: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
6395: LD_ADDR_VAR 0 3
6399: PUSH
6400: LD_INT 13
6402: PUSH
6403: LD_INT 14
6405: PUSH
6406: EMPTY
6407: LIST
6408: LIST
6409: ST_TO_ADDR
6410: GO 6867
6412: LD_INT 92
6414: DOUBLE
6415: EQUAL
6416: IFTRUE 6420
6418: GO 6446
6420: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
6421: LD_ADDR_VAR 0 3
6425: PUSH
6426: LD_INT 11
6428: PUSH
6429: LD_INT 12
6431: PUSH
6432: LD_INT 13
6434: PUSH
6435: LD_INT 14
6437: PUSH
6438: EMPTY
6439: LIST
6440: LIST
6441: LIST
6442: LIST
6443: ST_TO_ADDR
6444: GO 6867
6446: LD_INT 28
6448: DOUBLE
6449: EQUAL
6450: IFTRUE 6454
6452: GO 6472
6454: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
6455: LD_ADDR_VAR 0 3
6459: PUSH
6460: LD_INT 13
6462: PUSH
6463: LD_INT 14
6465: PUSH
6466: EMPTY
6467: LIST
6468: LIST
6469: ST_TO_ADDR
6470: GO 6867
6472: LD_INT 29
6474: DOUBLE
6475: EQUAL
6476: IFTRUE 6480
6478: GO 6498
6480: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
6481: LD_ADDR_VAR 0 3
6485: PUSH
6486: LD_INT 13
6488: PUSH
6489: LD_INT 14
6491: PUSH
6492: EMPTY
6493: LIST
6494: LIST
6495: ST_TO_ADDR
6496: GO 6867
6498: LD_INT 31
6500: DOUBLE
6501: EQUAL
6502: IFTRUE 6506
6504: GO 6524
6506: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
6507: LD_ADDR_VAR 0 3
6511: PUSH
6512: LD_INT 13
6514: PUSH
6515: LD_INT 14
6517: PUSH
6518: EMPTY
6519: LIST
6520: LIST
6521: ST_TO_ADDR
6522: GO 6867
6524: LD_INT 26
6526: DOUBLE
6527: EQUAL
6528: IFTRUE 6532
6530: GO 6550
6532: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
6533: LD_ADDR_VAR 0 3
6537: PUSH
6538: LD_INT 13
6540: PUSH
6541: LD_INT 14
6543: PUSH
6544: EMPTY
6545: LIST
6546: LIST
6547: ST_TO_ADDR
6548: GO 6867
6550: LD_INT 42
6552: DOUBLE
6553: EQUAL
6554: IFTRUE 6558
6556: GO 6584
6558: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
6559: LD_ADDR_VAR 0 3
6563: PUSH
6564: LD_INT 21
6566: PUSH
6567: LD_INT 22
6569: PUSH
6570: LD_INT 23
6572: PUSH
6573: LD_INT 24
6575: PUSH
6576: EMPTY
6577: LIST
6578: LIST
6579: LIST
6580: LIST
6581: ST_TO_ADDR
6582: GO 6867
6584: LD_INT 43
6586: DOUBLE
6587: EQUAL
6588: IFTRUE 6592
6590: GO 6618
6592: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
6593: LD_ADDR_VAR 0 3
6597: PUSH
6598: LD_INT 21
6600: PUSH
6601: LD_INT 22
6603: PUSH
6604: LD_INT 23
6606: PUSH
6607: LD_INT 24
6609: PUSH
6610: EMPTY
6611: LIST
6612: LIST
6613: LIST
6614: LIST
6615: ST_TO_ADDR
6616: GO 6867
6618: LD_INT 44
6620: DOUBLE
6621: EQUAL
6622: IFTRUE 6626
6624: GO 6652
6626: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
6627: LD_ADDR_VAR 0 3
6631: PUSH
6632: LD_INT 21
6634: PUSH
6635: LD_INT 22
6637: PUSH
6638: LD_INT 23
6640: PUSH
6641: LD_INT 24
6643: PUSH
6644: EMPTY
6645: LIST
6646: LIST
6647: LIST
6648: LIST
6649: ST_TO_ADDR
6650: GO 6867
6652: LD_INT 45
6654: DOUBLE
6655: EQUAL
6656: IFTRUE 6660
6658: GO 6686
6660: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
6661: LD_ADDR_VAR 0 3
6665: PUSH
6666: LD_INT 21
6668: PUSH
6669: LD_INT 22
6671: PUSH
6672: LD_INT 23
6674: PUSH
6675: LD_INT 24
6677: PUSH
6678: EMPTY
6679: LIST
6680: LIST
6681: LIST
6682: LIST
6683: ST_TO_ADDR
6684: GO 6867
6686: LD_INT 49
6688: DOUBLE
6689: EQUAL
6690: IFTRUE 6694
6692: GO 6720
6694: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
6695: LD_ADDR_VAR 0 3
6699: PUSH
6700: LD_INT 21
6702: PUSH
6703: LD_INT 22
6705: PUSH
6706: LD_INT 23
6708: PUSH
6709: LD_INT 24
6711: PUSH
6712: EMPTY
6713: LIST
6714: LIST
6715: LIST
6716: LIST
6717: ST_TO_ADDR
6718: GO 6867
6720: LD_INT 51
6722: DOUBLE
6723: EQUAL
6724: IFTRUE 6728
6726: GO 6754
6728: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
6729: LD_ADDR_VAR 0 3
6733: PUSH
6734: LD_INT 21
6736: PUSH
6737: LD_INT 22
6739: PUSH
6740: LD_INT 23
6742: PUSH
6743: LD_INT 24
6745: PUSH
6746: EMPTY
6747: LIST
6748: LIST
6749: LIST
6750: LIST
6751: ST_TO_ADDR
6752: GO 6867
6754: LD_INT 52
6756: DOUBLE
6757: EQUAL
6758: IFTRUE 6762
6760: GO 6788
6762: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
6763: LD_ADDR_VAR 0 3
6767: PUSH
6768: LD_INT 21
6770: PUSH
6771: LD_INT 22
6773: PUSH
6774: LD_INT 23
6776: PUSH
6777: LD_INT 24
6779: PUSH
6780: EMPTY
6781: LIST
6782: LIST
6783: LIST
6784: LIST
6785: ST_TO_ADDR
6786: GO 6867
6788: LD_INT 53
6790: DOUBLE
6791: EQUAL
6792: IFTRUE 6796
6794: GO 6814
6796: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
6797: LD_ADDR_VAR 0 3
6801: PUSH
6802: LD_INT 23
6804: PUSH
6805: LD_INT 24
6807: PUSH
6808: EMPTY
6809: LIST
6810: LIST
6811: ST_TO_ADDR
6812: GO 6867
6814: LD_INT 46
6816: DOUBLE
6817: EQUAL
6818: IFTRUE 6822
6820: GO 6840
6822: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
6823: LD_ADDR_VAR 0 3
6827: PUSH
6828: LD_INT 23
6830: PUSH
6831: LD_INT 24
6833: PUSH
6834: EMPTY
6835: LIST
6836: LIST
6837: ST_TO_ADDR
6838: GO 6867
6840: LD_INT 47
6842: DOUBLE
6843: EQUAL
6844: IFTRUE 6848
6846: GO 6866
6848: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
6849: LD_ADDR_VAR 0 3
6853: PUSH
6854: LD_INT 23
6856: PUSH
6857: LD_INT 24
6859: PUSH
6860: EMPTY
6861: LIST
6862: LIST
6863: ST_TO_ADDR
6864: GO 6867
6866: POP
// result := ( chassis in result ) ;
6867: LD_ADDR_VAR 0 3
6871: PUSH
6872: LD_VAR 0 1
6876: PUSH
6877: LD_VAR 0 3
6881: IN
6882: ST_TO_ADDR
// end ;
6883: LD_VAR 0 3
6887: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
6888: LD_INT 0
6890: PPUSH
6891: PPUSH
6892: PPUSH
6893: PPUSH
6894: PPUSH
6895: PPUSH
6896: PPUSH
// result := array ;
6897: LD_ADDR_VAR 0 5
6901: PUSH
6902: LD_VAR 0 1
6906: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
6907: LD_VAR 0 1
6911: NOT
6912: PUSH
6913: LD_VAR 0 2
6917: NOT
6918: OR
6919: PUSH
6920: LD_VAR 0 3
6924: NOT
6925: OR
6926: PUSH
6927: LD_VAR 0 2
6931: PUSH
6932: LD_VAR 0 1
6936: GREATER
6937: OR
6938: PUSH
6939: LD_VAR 0 3
6943: PUSH
6944: LD_VAR 0 1
6948: GREATER
6949: OR
6950: IFFALSE 6954
// exit ;
6952: GO 7250
// if direction then
6954: LD_VAR 0 4
6958: IFFALSE 7022
// begin d := 1 ;
6960: LD_ADDR_VAR 0 9
6964: PUSH
6965: LD_INT 1
6967: ST_TO_ADDR
// if i_from > i_to then
6968: LD_VAR 0 2
6972: PUSH
6973: LD_VAR 0 3
6977: GREATER
6978: IFFALSE 7004
// length := ( array - i_from ) + i_to else
6980: LD_ADDR_VAR 0 11
6984: PUSH
6985: LD_VAR 0 1
6989: PUSH
6990: LD_VAR 0 2
6994: MINUS
6995: PUSH
6996: LD_VAR 0 3
7000: PLUS
7001: ST_TO_ADDR
7002: GO 7020
// length := i_to - i_from ;
7004: LD_ADDR_VAR 0 11
7008: PUSH
7009: LD_VAR 0 3
7013: PUSH
7014: LD_VAR 0 2
7018: MINUS
7019: ST_TO_ADDR
// end else
7020: GO 7083
// begin d := - 1 ;
7022: LD_ADDR_VAR 0 9
7026: PUSH
7027: LD_INT 1
7029: NEG
7030: ST_TO_ADDR
// if i_from > i_to then
7031: LD_VAR 0 2
7035: PUSH
7036: LD_VAR 0 3
7040: GREATER
7041: IFFALSE 7061
// length := i_from - i_to else
7043: LD_ADDR_VAR 0 11
7047: PUSH
7048: LD_VAR 0 2
7052: PUSH
7053: LD_VAR 0 3
7057: MINUS
7058: ST_TO_ADDR
7059: GO 7083
// length := ( array - i_to ) + i_from ;
7061: LD_ADDR_VAR 0 11
7065: PUSH
7066: LD_VAR 0 1
7070: PUSH
7071: LD_VAR 0 3
7075: MINUS
7076: PUSH
7077: LD_VAR 0 2
7081: PLUS
7082: ST_TO_ADDR
// end ; if not length then
7083: LD_VAR 0 11
7087: NOT
7088: IFFALSE 7092
// exit ;
7090: GO 7250
// tmp := array ;
7092: LD_ADDR_VAR 0 10
7096: PUSH
7097: LD_VAR 0 1
7101: ST_TO_ADDR
// for i = 1 to length do
7102: LD_ADDR_VAR 0 6
7106: PUSH
7107: DOUBLE
7108: LD_INT 1
7110: DEC
7111: ST_TO_ADDR
7112: LD_VAR 0 11
7116: PUSH
7117: FOR_TO
7118: IFFALSE 7238
// begin for j = 1 to array do
7120: LD_ADDR_VAR 0 7
7124: PUSH
7125: DOUBLE
7126: LD_INT 1
7128: DEC
7129: ST_TO_ADDR
7130: LD_VAR 0 1
7134: PUSH
7135: FOR_TO
7136: IFFALSE 7224
// begin k := j + d ;
7138: LD_ADDR_VAR 0 8
7142: PUSH
7143: LD_VAR 0 7
7147: PUSH
7148: LD_VAR 0 9
7152: PLUS
7153: ST_TO_ADDR
// if k > array then
7154: LD_VAR 0 8
7158: PUSH
7159: LD_VAR 0 1
7163: GREATER
7164: IFFALSE 7174
// k := 1 ;
7166: LD_ADDR_VAR 0 8
7170: PUSH
7171: LD_INT 1
7173: ST_TO_ADDR
// if not k then
7174: LD_VAR 0 8
7178: NOT
7179: IFFALSE 7191
// k := array ;
7181: LD_ADDR_VAR 0 8
7185: PUSH
7186: LD_VAR 0 1
7190: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
7191: LD_ADDR_VAR 0 10
7195: PUSH
7196: LD_VAR 0 10
7200: PPUSH
7201: LD_VAR 0 8
7205: PPUSH
7206: LD_VAR 0 1
7210: PUSH
7211: LD_VAR 0 7
7215: ARRAY
7216: PPUSH
7217: CALL_OW 1
7221: ST_TO_ADDR
// end ;
7222: GO 7135
7224: POP
7225: POP
// array := tmp ;
7226: LD_ADDR_VAR 0 1
7230: PUSH
7231: LD_VAR 0 10
7235: ST_TO_ADDR
// end ;
7236: GO 7117
7238: POP
7239: POP
// result := array ;
7240: LD_ADDR_VAR 0 5
7244: PUSH
7245: LD_VAR 0 1
7249: ST_TO_ADDR
// end ;
7250: LD_VAR 0 5
7254: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
7255: LD_INT 0
7257: PPUSH
7258: PPUSH
// result := 0 ;
7259: LD_ADDR_VAR 0 3
7263: PUSH
7264: LD_INT 0
7266: ST_TO_ADDR
// if not array or not value in array then
7267: LD_VAR 0 1
7271: NOT
7272: PUSH
7273: LD_VAR 0 2
7277: PUSH
7278: LD_VAR 0 1
7282: IN
7283: NOT
7284: OR
7285: IFFALSE 7289
// exit ;
7287: GO 7343
// for i = 1 to array do
7289: LD_ADDR_VAR 0 4
7293: PUSH
7294: DOUBLE
7295: LD_INT 1
7297: DEC
7298: ST_TO_ADDR
7299: LD_VAR 0 1
7303: PUSH
7304: FOR_TO
7305: IFFALSE 7341
// if value = array [ i ] then
7307: LD_VAR 0 2
7311: PUSH
7312: LD_VAR 0 1
7316: PUSH
7317: LD_VAR 0 4
7321: ARRAY
7322: EQUAL
7323: IFFALSE 7339
// begin result := i ;
7325: LD_ADDR_VAR 0 3
7329: PUSH
7330: LD_VAR 0 4
7334: ST_TO_ADDR
// exit ;
7335: POP
7336: POP
7337: GO 7343
// end ;
7339: GO 7304
7341: POP
7342: POP
// end ;
7343: LD_VAR 0 3
7347: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
7348: LD_INT 0
7350: PPUSH
// vc_chassis := chassis ;
7351: LD_ADDR_OWVAR 37
7355: PUSH
7356: LD_VAR 0 1
7360: ST_TO_ADDR
// vc_engine := engine ;
7361: LD_ADDR_OWVAR 39
7365: PUSH
7366: LD_VAR 0 2
7370: ST_TO_ADDR
// vc_control := control ;
7371: LD_ADDR_OWVAR 38
7375: PUSH
7376: LD_VAR 0 3
7380: ST_TO_ADDR
// vc_weapon := weapon ;
7381: LD_ADDR_OWVAR 40
7385: PUSH
7386: LD_VAR 0 4
7390: ST_TO_ADDR
// vc_fuel_battery := fuel ;
7391: LD_ADDR_OWVAR 41
7395: PUSH
7396: LD_VAR 0 5
7400: ST_TO_ADDR
// end ;
7401: LD_VAR 0 6
7405: RET
// export function WantPlant ( unit ) ; var task ; begin
7406: LD_INT 0
7408: PPUSH
7409: PPUSH
// result := false ;
7410: LD_ADDR_VAR 0 2
7414: PUSH
7415: LD_INT 0
7417: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
7418: LD_ADDR_VAR 0 3
7422: PUSH
7423: LD_VAR 0 1
7427: PPUSH
7428: CALL_OW 437
7432: ST_TO_ADDR
// if task then
7433: LD_VAR 0 3
7437: IFFALSE 7465
// if task [ 1 ] [ 1 ] = p then
7439: LD_VAR 0 3
7443: PUSH
7444: LD_INT 1
7446: ARRAY
7447: PUSH
7448: LD_INT 1
7450: ARRAY
7451: PUSH
7452: LD_STRING p
7454: EQUAL
7455: IFFALSE 7465
// result := true ;
7457: LD_ADDR_VAR 0 2
7461: PUSH
7462: LD_INT 1
7464: ST_TO_ADDR
// end ;
7465: LD_VAR 0 2
7469: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
7470: LD_INT 0
7472: PPUSH
7473: PPUSH
7474: PPUSH
7475: PPUSH
// if pos < 1 then
7476: LD_VAR 0 2
7480: PUSH
7481: LD_INT 1
7483: LESS
7484: IFFALSE 7488
// exit ;
7486: GO 7791
// if pos = 1 then
7488: LD_VAR 0 2
7492: PUSH
7493: LD_INT 1
7495: EQUAL
7496: IFFALSE 7529
// result := Replace ( arr , pos [ 1 ] , value ) else
7498: LD_ADDR_VAR 0 4
7502: PUSH
7503: LD_VAR 0 1
7507: PPUSH
7508: LD_VAR 0 2
7512: PUSH
7513: LD_INT 1
7515: ARRAY
7516: PPUSH
7517: LD_VAR 0 3
7521: PPUSH
7522: CALL_OW 1
7526: ST_TO_ADDR
7527: GO 7791
// begin tmp := arr ;
7529: LD_ADDR_VAR 0 6
7533: PUSH
7534: LD_VAR 0 1
7538: ST_TO_ADDR
// s_arr := [ tmp ] ;
7539: LD_ADDR_VAR 0 7
7543: PUSH
7544: LD_VAR 0 6
7548: PUSH
7549: EMPTY
7550: LIST
7551: ST_TO_ADDR
// for i = 1 to pos - 1 do
7552: LD_ADDR_VAR 0 5
7556: PUSH
7557: DOUBLE
7558: LD_INT 1
7560: DEC
7561: ST_TO_ADDR
7562: LD_VAR 0 2
7566: PUSH
7567: LD_INT 1
7569: MINUS
7570: PUSH
7571: FOR_TO
7572: IFFALSE 7617
// begin tmp := tmp [ pos [ i ] ] ;
7574: LD_ADDR_VAR 0 6
7578: PUSH
7579: LD_VAR 0 6
7583: PUSH
7584: LD_VAR 0 2
7588: PUSH
7589: LD_VAR 0 5
7593: ARRAY
7594: ARRAY
7595: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
7596: LD_ADDR_VAR 0 7
7600: PUSH
7601: LD_VAR 0 7
7605: PUSH
7606: LD_VAR 0 6
7610: PUSH
7611: EMPTY
7612: LIST
7613: ADD
7614: ST_TO_ADDR
// end ;
7615: GO 7571
7617: POP
7618: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
7619: LD_ADDR_VAR 0 6
7623: PUSH
7624: LD_VAR 0 6
7628: PPUSH
7629: LD_VAR 0 2
7633: PUSH
7634: LD_VAR 0 2
7638: ARRAY
7639: PPUSH
7640: LD_VAR 0 3
7644: PPUSH
7645: CALL_OW 1
7649: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
7650: LD_ADDR_VAR 0 7
7654: PUSH
7655: LD_VAR 0 7
7659: PPUSH
7660: LD_VAR 0 7
7664: PPUSH
7665: LD_VAR 0 6
7669: PPUSH
7670: CALL_OW 1
7674: ST_TO_ADDR
// for i = s_arr downto 2 do
7675: LD_ADDR_VAR 0 5
7679: PUSH
7680: DOUBLE
7681: LD_VAR 0 7
7685: INC
7686: ST_TO_ADDR
7687: LD_INT 2
7689: PUSH
7690: FOR_DOWNTO
7691: IFFALSE 7775
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
7693: LD_ADDR_VAR 0 6
7697: PUSH
7698: LD_VAR 0 7
7702: PUSH
7703: LD_VAR 0 5
7707: PUSH
7708: LD_INT 1
7710: MINUS
7711: ARRAY
7712: PPUSH
7713: LD_VAR 0 2
7717: PUSH
7718: LD_VAR 0 5
7722: PUSH
7723: LD_INT 1
7725: MINUS
7726: ARRAY
7727: PPUSH
7728: LD_VAR 0 7
7732: PUSH
7733: LD_VAR 0 5
7737: ARRAY
7738: PPUSH
7739: CALL_OW 1
7743: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
7744: LD_ADDR_VAR 0 7
7748: PUSH
7749: LD_VAR 0 7
7753: PPUSH
7754: LD_VAR 0 5
7758: PUSH
7759: LD_INT 1
7761: MINUS
7762: PPUSH
7763: LD_VAR 0 6
7767: PPUSH
7768: CALL_OW 1
7772: ST_TO_ADDR
// end ;
7773: GO 7690
7775: POP
7776: POP
// result := s_arr [ 1 ] ;
7777: LD_ADDR_VAR 0 4
7781: PUSH
7782: LD_VAR 0 7
7786: PUSH
7787: LD_INT 1
7789: ARRAY
7790: ST_TO_ADDR
// end ; end ;
7791: LD_VAR 0 4
7795: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
7796: LD_INT 0
7798: PPUSH
7799: PPUSH
// if not list then
7800: LD_VAR 0 1
7804: NOT
7805: IFFALSE 7809
// exit ;
7807: GO 7900
// i := list [ pos1 ] ;
7809: LD_ADDR_VAR 0 5
7813: PUSH
7814: LD_VAR 0 1
7818: PUSH
7819: LD_VAR 0 2
7823: ARRAY
7824: ST_TO_ADDR
// if not i then
7825: LD_VAR 0 5
7829: NOT
7830: IFFALSE 7834
// exit ;
7832: GO 7900
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
7834: LD_ADDR_VAR 0 1
7838: PUSH
7839: LD_VAR 0 1
7843: PPUSH
7844: LD_VAR 0 2
7848: PPUSH
7849: LD_VAR 0 1
7853: PUSH
7854: LD_VAR 0 3
7858: ARRAY
7859: PPUSH
7860: CALL_OW 1
7864: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
7865: LD_ADDR_VAR 0 1
7869: PUSH
7870: LD_VAR 0 1
7874: PPUSH
7875: LD_VAR 0 3
7879: PPUSH
7880: LD_VAR 0 5
7884: PPUSH
7885: CALL_OW 1
7889: ST_TO_ADDR
// result := list ;
7890: LD_ADDR_VAR 0 4
7894: PUSH
7895: LD_VAR 0 1
7899: ST_TO_ADDR
// end ;
7900: LD_VAR 0 4
7904: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
7905: LD_INT 0
7907: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
7908: LD_ADDR_VAR 0 5
7912: PUSH
7913: LD_VAR 0 1
7917: PPUSH
7918: CALL_OW 250
7922: PPUSH
7923: LD_VAR 0 1
7927: PPUSH
7928: CALL_OW 251
7932: PPUSH
7933: LD_VAR 0 2
7937: PPUSH
7938: LD_VAR 0 3
7942: PPUSH
7943: LD_VAR 0 4
7947: PPUSH
7948: CALL 8326 0 5
7952: ST_TO_ADDR
// end ;
7953: LD_VAR 0 5
7957: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
7958: LD_INT 0
7960: PPUSH
7961: PPUSH
7962: PPUSH
7963: PPUSH
// if not list or not unit then
7964: LD_VAR 0 2
7968: NOT
7969: PUSH
7970: LD_VAR 0 1
7974: NOT
7975: OR
7976: IFFALSE 7980
// exit ;
7978: GO 8321
// result := [ ] ;
7980: LD_ADDR_VAR 0 5
7984: PUSH
7985: EMPTY
7986: ST_TO_ADDR
// for i in list do
7987: LD_ADDR_VAR 0 6
7991: PUSH
7992: LD_VAR 0 2
7996: PUSH
7997: FOR_IN
7998: IFFALSE 8216
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
8000: LD_ADDR_VAR 0 8
8004: PUSH
8005: LD_VAR 0 1
8009: PPUSH
8010: LD_VAR 0 6
8014: PUSH
8015: LD_INT 1
8017: ARRAY
8018: PPUSH
8019: LD_VAR 0 6
8023: PUSH
8024: LD_INT 2
8026: ARRAY
8027: PPUSH
8028: CALL_OW 297
8032: ST_TO_ADDR
// if not Count ( result ) then
8033: LD_VAR 0 5
8037: PPUSH
8038: CALL 4610 0 1
8042: NOT
8043: IFFALSE 8076
// begin result := Join ( result , [ i , tmp ] ) ;
8045: LD_ADDR_VAR 0 5
8049: PUSH
8050: LD_VAR 0 5
8054: PPUSH
8055: LD_VAR 0 6
8059: PUSH
8060: LD_VAR 0 8
8064: PUSH
8065: EMPTY
8066: LIST
8067: LIST
8068: PPUSH
8069: CALL 40199 0 2
8073: ST_TO_ADDR
// continue ;
8074: GO 7997
// end ; if result [ result ] [ 2 ] <= tmp then
8076: LD_VAR 0 5
8080: PUSH
8081: LD_VAR 0 5
8085: ARRAY
8086: PUSH
8087: LD_INT 2
8089: ARRAY
8090: PUSH
8091: LD_VAR 0 8
8095: LESSEQUAL
8096: IFFALSE 8129
// result := Join ( result , [ i , tmp ] ) else
8098: LD_ADDR_VAR 0 5
8102: PUSH
8103: LD_VAR 0 5
8107: PPUSH
8108: LD_VAR 0 6
8112: PUSH
8113: LD_VAR 0 8
8117: PUSH
8118: EMPTY
8119: LIST
8120: LIST
8121: PPUSH
8122: CALL 40199 0 2
8126: ST_TO_ADDR
8127: GO 8214
// begin for j := 1 to Count ( result ) do
8129: LD_ADDR_VAR 0 7
8133: PUSH
8134: DOUBLE
8135: LD_INT 1
8137: DEC
8138: ST_TO_ADDR
8139: LD_VAR 0 5
8143: PPUSH
8144: CALL 4610 0 1
8148: PUSH
8149: FOR_TO
8150: IFFALSE 8212
// begin if tmp < result [ j ] [ 2 ] then
8152: LD_VAR 0 8
8156: PUSH
8157: LD_VAR 0 5
8161: PUSH
8162: LD_VAR 0 7
8166: ARRAY
8167: PUSH
8168: LD_INT 2
8170: ARRAY
8171: LESS
8172: IFFALSE 8210
// begin result := Insert ( result , j , [ i , tmp ] ) ;
8174: LD_ADDR_VAR 0 5
8178: PUSH
8179: LD_VAR 0 5
8183: PPUSH
8184: LD_VAR 0 7
8188: PPUSH
8189: LD_VAR 0 6
8193: PUSH
8194: LD_VAR 0 8
8198: PUSH
8199: EMPTY
8200: LIST
8201: LIST
8202: PPUSH
8203: CALL_OW 2
8207: ST_TO_ADDR
// break ;
8208: GO 8212
// end ; end ;
8210: GO 8149
8212: POP
8213: POP
// end ; end ;
8214: GO 7997
8216: POP
8217: POP
// if result and not asc then
8218: LD_VAR 0 5
8222: PUSH
8223: LD_VAR 0 3
8227: NOT
8228: AND
8229: IFFALSE 8246
// result := ReverseArray ( result ) ;
8231: LD_ADDR_VAR 0 5
8235: PUSH
8236: LD_VAR 0 5
8240: PPUSH
8241: CALL 35486 0 1
8245: ST_TO_ADDR
// tmp := [ ] ;
8246: LD_ADDR_VAR 0 8
8250: PUSH
8251: EMPTY
8252: ST_TO_ADDR
// if mode then
8253: LD_VAR 0 4
8257: IFFALSE 8321
// begin for i := 1 to result do
8259: LD_ADDR_VAR 0 6
8263: PUSH
8264: DOUBLE
8265: LD_INT 1
8267: DEC
8268: ST_TO_ADDR
8269: LD_VAR 0 5
8273: PUSH
8274: FOR_TO
8275: IFFALSE 8309
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
8277: LD_ADDR_VAR 0 8
8281: PUSH
8282: LD_VAR 0 8
8286: PPUSH
8287: LD_VAR 0 5
8291: PUSH
8292: LD_VAR 0 6
8296: ARRAY
8297: PUSH
8298: LD_INT 1
8300: ARRAY
8301: PPUSH
8302: CALL 40199 0 2
8306: ST_TO_ADDR
8307: GO 8274
8309: POP
8310: POP
// result := tmp ;
8311: LD_ADDR_VAR 0 5
8315: PUSH
8316: LD_VAR 0 8
8320: ST_TO_ADDR
// end ; end ;
8321: LD_VAR 0 5
8325: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
8326: LD_INT 0
8328: PPUSH
8329: PPUSH
8330: PPUSH
8331: PPUSH
// if not list then
8332: LD_VAR 0 3
8336: NOT
8337: IFFALSE 8341
// exit ;
8339: GO 8729
// result := [ ] ;
8341: LD_ADDR_VAR 0 6
8345: PUSH
8346: EMPTY
8347: ST_TO_ADDR
// for i in list do
8348: LD_ADDR_VAR 0 7
8352: PUSH
8353: LD_VAR 0 3
8357: PUSH
8358: FOR_IN
8359: IFFALSE 8561
// begin tmp := GetDistUnitXY ( i , x , y ) ;
8361: LD_ADDR_VAR 0 9
8365: PUSH
8366: LD_VAR 0 7
8370: PPUSH
8371: LD_VAR 0 1
8375: PPUSH
8376: LD_VAR 0 2
8380: PPUSH
8381: CALL_OW 297
8385: ST_TO_ADDR
// if not result then
8386: LD_VAR 0 6
8390: NOT
8391: IFFALSE 8417
// result := [ [ i , tmp ] ] else
8393: LD_ADDR_VAR 0 6
8397: PUSH
8398: LD_VAR 0 7
8402: PUSH
8403: LD_VAR 0 9
8407: PUSH
8408: EMPTY
8409: LIST
8410: LIST
8411: PUSH
8412: EMPTY
8413: LIST
8414: ST_TO_ADDR
8415: GO 8559
// begin if result [ result ] [ 2 ] < tmp then
8417: LD_VAR 0 6
8421: PUSH
8422: LD_VAR 0 6
8426: ARRAY
8427: PUSH
8428: LD_INT 2
8430: ARRAY
8431: PUSH
8432: LD_VAR 0 9
8436: LESS
8437: IFFALSE 8479
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
8439: LD_ADDR_VAR 0 6
8443: PUSH
8444: LD_VAR 0 6
8448: PPUSH
8449: LD_VAR 0 6
8453: PUSH
8454: LD_INT 1
8456: PLUS
8457: PPUSH
8458: LD_VAR 0 7
8462: PUSH
8463: LD_VAR 0 9
8467: PUSH
8468: EMPTY
8469: LIST
8470: LIST
8471: PPUSH
8472: CALL_OW 2
8476: ST_TO_ADDR
8477: GO 8559
// for j = 1 to result do
8479: LD_ADDR_VAR 0 8
8483: PUSH
8484: DOUBLE
8485: LD_INT 1
8487: DEC
8488: ST_TO_ADDR
8489: LD_VAR 0 6
8493: PUSH
8494: FOR_TO
8495: IFFALSE 8557
// begin if tmp < result [ j ] [ 2 ] then
8497: LD_VAR 0 9
8501: PUSH
8502: LD_VAR 0 6
8506: PUSH
8507: LD_VAR 0 8
8511: ARRAY
8512: PUSH
8513: LD_INT 2
8515: ARRAY
8516: LESS
8517: IFFALSE 8555
// begin result := Insert ( result , j , [ i , tmp ] ) ;
8519: LD_ADDR_VAR 0 6
8523: PUSH
8524: LD_VAR 0 6
8528: PPUSH
8529: LD_VAR 0 8
8533: PPUSH
8534: LD_VAR 0 7
8538: PUSH
8539: LD_VAR 0 9
8543: PUSH
8544: EMPTY
8545: LIST
8546: LIST
8547: PPUSH
8548: CALL_OW 2
8552: ST_TO_ADDR
// break ;
8553: GO 8557
// end ; end ;
8555: GO 8494
8557: POP
8558: POP
// end ; end ;
8559: GO 8358
8561: POP
8562: POP
// if result and not asc then
8563: LD_VAR 0 6
8567: PUSH
8568: LD_VAR 0 4
8572: NOT
8573: AND
8574: IFFALSE 8649
// begin tmp := result ;
8576: LD_ADDR_VAR 0 9
8580: PUSH
8581: LD_VAR 0 6
8585: ST_TO_ADDR
// for i = tmp downto 1 do
8586: LD_ADDR_VAR 0 7
8590: PUSH
8591: DOUBLE
8592: LD_VAR 0 9
8596: INC
8597: ST_TO_ADDR
8598: LD_INT 1
8600: PUSH
8601: FOR_DOWNTO
8602: IFFALSE 8647
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
8604: LD_ADDR_VAR 0 6
8608: PUSH
8609: LD_VAR 0 6
8613: PPUSH
8614: LD_VAR 0 9
8618: PUSH
8619: LD_VAR 0 7
8623: MINUS
8624: PUSH
8625: LD_INT 1
8627: PLUS
8628: PPUSH
8629: LD_VAR 0 9
8633: PUSH
8634: LD_VAR 0 7
8638: ARRAY
8639: PPUSH
8640: CALL_OW 1
8644: ST_TO_ADDR
8645: GO 8601
8647: POP
8648: POP
// end ; tmp := [ ] ;
8649: LD_ADDR_VAR 0 9
8653: PUSH
8654: EMPTY
8655: ST_TO_ADDR
// if mode then
8656: LD_VAR 0 5
8660: IFFALSE 8729
// begin for i = 1 to result do
8662: LD_ADDR_VAR 0 7
8666: PUSH
8667: DOUBLE
8668: LD_INT 1
8670: DEC
8671: ST_TO_ADDR
8672: LD_VAR 0 6
8676: PUSH
8677: FOR_TO
8678: IFFALSE 8717
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
8680: LD_ADDR_VAR 0 9
8684: PUSH
8685: LD_VAR 0 9
8689: PPUSH
8690: LD_VAR 0 7
8694: PPUSH
8695: LD_VAR 0 6
8699: PUSH
8700: LD_VAR 0 7
8704: ARRAY
8705: PUSH
8706: LD_INT 1
8708: ARRAY
8709: PPUSH
8710: CALL_OW 1
8714: ST_TO_ADDR
8715: GO 8677
8717: POP
8718: POP
// result := tmp ;
8719: LD_ADDR_VAR 0 6
8723: PUSH
8724: LD_VAR 0 9
8728: ST_TO_ADDR
// end ; end ;
8729: LD_VAR 0 6
8733: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
8734: LD_INT 0
8736: PPUSH
8737: PPUSH
8738: PPUSH
8739: PPUSH
8740: PPUSH
8741: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
8742: LD_ADDR_VAR 0 5
8746: PUSH
8747: LD_INT 0
8749: PUSH
8750: LD_INT 0
8752: PUSH
8753: LD_INT 0
8755: PUSH
8756: EMPTY
8757: PUSH
8758: EMPTY
8759: LIST
8760: LIST
8761: LIST
8762: LIST
8763: ST_TO_ADDR
// if not x or not y then
8764: LD_VAR 0 2
8768: NOT
8769: PUSH
8770: LD_VAR 0 3
8774: NOT
8775: OR
8776: IFFALSE 8780
// exit ;
8778: GO 10430
// if not range then
8780: LD_VAR 0 4
8784: NOT
8785: IFFALSE 8795
// range := 10 ;
8787: LD_ADDR_VAR 0 4
8791: PUSH
8792: LD_INT 10
8794: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
8795: LD_ADDR_VAR 0 8
8799: PUSH
8800: LD_INT 81
8802: PUSH
8803: LD_VAR 0 1
8807: PUSH
8808: EMPTY
8809: LIST
8810: LIST
8811: PUSH
8812: LD_INT 92
8814: PUSH
8815: LD_VAR 0 2
8819: PUSH
8820: LD_VAR 0 3
8824: PUSH
8825: LD_VAR 0 4
8829: PUSH
8830: EMPTY
8831: LIST
8832: LIST
8833: LIST
8834: LIST
8835: PUSH
8836: LD_INT 3
8838: PUSH
8839: LD_INT 21
8841: PUSH
8842: LD_INT 3
8844: PUSH
8845: EMPTY
8846: LIST
8847: LIST
8848: PUSH
8849: EMPTY
8850: LIST
8851: LIST
8852: PUSH
8853: EMPTY
8854: LIST
8855: LIST
8856: LIST
8857: PPUSH
8858: CALL_OW 69
8862: ST_TO_ADDR
// if not tmp then
8863: LD_VAR 0 8
8867: NOT
8868: IFFALSE 8872
// exit ;
8870: GO 10430
// for i in tmp do
8872: LD_ADDR_VAR 0 6
8876: PUSH
8877: LD_VAR 0 8
8881: PUSH
8882: FOR_IN
8883: IFFALSE 10405
// begin points := [ 0 , 0 , 0 ] ;
8885: LD_ADDR_VAR 0 9
8889: PUSH
8890: LD_INT 0
8892: PUSH
8893: LD_INT 0
8895: PUSH
8896: LD_INT 0
8898: PUSH
8899: EMPTY
8900: LIST
8901: LIST
8902: LIST
8903: ST_TO_ADDR
// bpoints := 1 ;
8904: LD_ADDR_VAR 0 10
8908: PUSH
8909: LD_INT 1
8911: ST_TO_ADDR
// case GetType ( i ) of unit_human :
8912: LD_VAR 0 6
8916: PPUSH
8917: CALL_OW 247
8921: PUSH
8922: LD_INT 1
8924: DOUBLE
8925: EQUAL
8926: IFTRUE 8930
8928: GO 9508
8930: POP
// begin if GetClass ( i ) = 1 then
8931: LD_VAR 0 6
8935: PPUSH
8936: CALL_OW 257
8940: PUSH
8941: LD_INT 1
8943: EQUAL
8944: IFFALSE 8965
// points := [ 10 , 5 , 3 ] ;
8946: LD_ADDR_VAR 0 9
8950: PUSH
8951: LD_INT 10
8953: PUSH
8954: LD_INT 5
8956: PUSH
8957: LD_INT 3
8959: PUSH
8960: EMPTY
8961: LIST
8962: LIST
8963: LIST
8964: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
8965: LD_VAR 0 6
8969: PPUSH
8970: CALL_OW 257
8974: PUSH
8975: LD_INT 2
8977: PUSH
8978: LD_INT 3
8980: PUSH
8981: LD_INT 4
8983: PUSH
8984: EMPTY
8985: LIST
8986: LIST
8987: LIST
8988: IN
8989: IFFALSE 9010
// points := [ 3 , 2 , 1 ] ;
8991: LD_ADDR_VAR 0 9
8995: PUSH
8996: LD_INT 3
8998: PUSH
8999: LD_INT 2
9001: PUSH
9002: LD_INT 1
9004: PUSH
9005: EMPTY
9006: LIST
9007: LIST
9008: LIST
9009: ST_TO_ADDR
// if GetClass ( i ) = 5 then
9010: LD_VAR 0 6
9014: PPUSH
9015: CALL_OW 257
9019: PUSH
9020: LD_INT 5
9022: EQUAL
9023: IFFALSE 9044
// points := [ 130 , 5 , 2 ] ;
9025: LD_ADDR_VAR 0 9
9029: PUSH
9030: LD_INT 130
9032: PUSH
9033: LD_INT 5
9035: PUSH
9036: LD_INT 2
9038: PUSH
9039: EMPTY
9040: LIST
9041: LIST
9042: LIST
9043: ST_TO_ADDR
// if GetClass ( i ) = 8 then
9044: LD_VAR 0 6
9048: PPUSH
9049: CALL_OW 257
9053: PUSH
9054: LD_INT 8
9056: EQUAL
9057: IFFALSE 9078
// points := [ 35 , 35 , 30 ] ;
9059: LD_ADDR_VAR 0 9
9063: PUSH
9064: LD_INT 35
9066: PUSH
9067: LD_INT 35
9069: PUSH
9070: LD_INT 30
9072: PUSH
9073: EMPTY
9074: LIST
9075: LIST
9076: LIST
9077: ST_TO_ADDR
// if GetClass ( i ) = 9 then
9078: LD_VAR 0 6
9082: PPUSH
9083: CALL_OW 257
9087: PUSH
9088: LD_INT 9
9090: EQUAL
9091: IFFALSE 9112
// points := [ 20 , 55 , 40 ] ;
9093: LD_ADDR_VAR 0 9
9097: PUSH
9098: LD_INT 20
9100: PUSH
9101: LD_INT 55
9103: PUSH
9104: LD_INT 40
9106: PUSH
9107: EMPTY
9108: LIST
9109: LIST
9110: LIST
9111: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
9112: LD_VAR 0 6
9116: PPUSH
9117: CALL_OW 257
9121: PUSH
9122: LD_INT 12
9124: PUSH
9125: LD_INT 16
9127: PUSH
9128: EMPTY
9129: LIST
9130: LIST
9131: IN
9132: IFFALSE 9153
// points := [ 5 , 3 , 2 ] ;
9134: LD_ADDR_VAR 0 9
9138: PUSH
9139: LD_INT 5
9141: PUSH
9142: LD_INT 3
9144: PUSH
9145: LD_INT 2
9147: PUSH
9148: EMPTY
9149: LIST
9150: LIST
9151: LIST
9152: ST_TO_ADDR
// if GetClass ( i ) = 17 then
9153: LD_VAR 0 6
9157: PPUSH
9158: CALL_OW 257
9162: PUSH
9163: LD_INT 17
9165: EQUAL
9166: IFFALSE 9187
// points := [ 100 , 50 , 75 ] ;
9168: LD_ADDR_VAR 0 9
9172: PUSH
9173: LD_INT 100
9175: PUSH
9176: LD_INT 50
9178: PUSH
9179: LD_INT 75
9181: PUSH
9182: EMPTY
9183: LIST
9184: LIST
9185: LIST
9186: ST_TO_ADDR
// if GetClass ( i ) = 15 then
9187: LD_VAR 0 6
9191: PPUSH
9192: CALL_OW 257
9196: PUSH
9197: LD_INT 15
9199: EQUAL
9200: IFFALSE 9221
// points := [ 10 , 5 , 3 ] ;
9202: LD_ADDR_VAR 0 9
9206: PUSH
9207: LD_INT 10
9209: PUSH
9210: LD_INT 5
9212: PUSH
9213: LD_INT 3
9215: PUSH
9216: EMPTY
9217: LIST
9218: LIST
9219: LIST
9220: ST_TO_ADDR
// if GetClass ( i ) = 14 then
9221: LD_VAR 0 6
9225: PPUSH
9226: CALL_OW 257
9230: PUSH
9231: LD_INT 14
9233: EQUAL
9234: IFFALSE 9255
// points := [ 10 , 0 , 0 ] ;
9236: LD_ADDR_VAR 0 9
9240: PUSH
9241: LD_INT 10
9243: PUSH
9244: LD_INT 0
9246: PUSH
9247: LD_INT 0
9249: PUSH
9250: EMPTY
9251: LIST
9252: LIST
9253: LIST
9254: ST_TO_ADDR
// if GetClass ( i ) = 11 then
9255: LD_VAR 0 6
9259: PPUSH
9260: CALL_OW 257
9264: PUSH
9265: LD_INT 11
9267: EQUAL
9268: IFFALSE 9289
// points := [ 30 , 10 , 5 ] ;
9270: LD_ADDR_VAR 0 9
9274: PUSH
9275: LD_INT 30
9277: PUSH
9278: LD_INT 10
9280: PUSH
9281: LD_INT 5
9283: PUSH
9284: EMPTY
9285: LIST
9286: LIST
9287: LIST
9288: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
9289: LD_VAR 0 1
9293: PPUSH
9294: LD_INT 5
9296: PPUSH
9297: CALL_OW 321
9301: PUSH
9302: LD_INT 2
9304: EQUAL
9305: IFFALSE 9322
// bpoints := bpoints * 1.8 ;
9307: LD_ADDR_VAR 0 10
9311: PUSH
9312: LD_VAR 0 10
9316: PUSH
9317: LD_REAL  1.80000000000000E+0000
9320: MUL
9321: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
9322: LD_VAR 0 6
9326: PPUSH
9327: CALL_OW 257
9331: PUSH
9332: LD_INT 1
9334: PUSH
9335: LD_INT 2
9337: PUSH
9338: LD_INT 3
9340: PUSH
9341: LD_INT 4
9343: PUSH
9344: EMPTY
9345: LIST
9346: LIST
9347: LIST
9348: LIST
9349: IN
9350: PUSH
9351: LD_VAR 0 1
9355: PPUSH
9356: LD_INT 51
9358: PPUSH
9359: CALL_OW 321
9363: PUSH
9364: LD_INT 2
9366: EQUAL
9367: AND
9368: IFFALSE 9385
// bpoints := bpoints * 1.2 ;
9370: LD_ADDR_VAR 0 10
9374: PUSH
9375: LD_VAR 0 10
9379: PUSH
9380: LD_REAL  1.20000000000000E+0000
9383: MUL
9384: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
9385: LD_VAR 0 6
9389: PPUSH
9390: CALL_OW 257
9394: PUSH
9395: LD_INT 5
9397: PUSH
9398: LD_INT 7
9400: PUSH
9401: LD_INT 9
9403: PUSH
9404: EMPTY
9405: LIST
9406: LIST
9407: LIST
9408: IN
9409: PUSH
9410: LD_VAR 0 1
9414: PPUSH
9415: LD_INT 52
9417: PPUSH
9418: CALL_OW 321
9422: PUSH
9423: LD_INT 2
9425: EQUAL
9426: AND
9427: IFFALSE 9444
// bpoints := bpoints * 1.5 ;
9429: LD_ADDR_VAR 0 10
9433: PUSH
9434: LD_VAR 0 10
9438: PUSH
9439: LD_REAL  1.50000000000000E+0000
9442: MUL
9443: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
9444: LD_VAR 0 1
9448: PPUSH
9449: LD_INT 66
9451: PPUSH
9452: CALL_OW 321
9456: PUSH
9457: LD_INT 2
9459: EQUAL
9460: IFFALSE 9477
// bpoints := bpoints * 1.1 ;
9462: LD_ADDR_VAR 0 10
9466: PUSH
9467: LD_VAR 0 10
9471: PUSH
9472: LD_REAL  1.10000000000000E+0000
9475: MUL
9476: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
9477: LD_ADDR_VAR 0 10
9481: PUSH
9482: LD_VAR 0 10
9486: PUSH
9487: LD_VAR 0 6
9491: PPUSH
9492: LD_INT 1
9494: PPUSH
9495: CALL_OW 259
9499: PUSH
9500: LD_REAL  1.15000000000000E+0000
9503: MUL
9504: MUL
9505: ST_TO_ADDR
// end ; unit_vehicle :
9506: GO 10334
9508: LD_INT 2
9510: DOUBLE
9511: EQUAL
9512: IFTRUE 9516
9514: GO 10322
9516: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
9517: LD_VAR 0 6
9521: PPUSH
9522: CALL_OW 264
9526: PUSH
9527: LD_INT 2
9529: PUSH
9530: LD_INT 42
9532: PUSH
9533: LD_INT 24
9535: PUSH
9536: EMPTY
9537: LIST
9538: LIST
9539: LIST
9540: IN
9541: IFFALSE 9562
// points := [ 25 , 5 , 3 ] ;
9543: LD_ADDR_VAR 0 9
9547: PUSH
9548: LD_INT 25
9550: PUSH
9551: LD_INT 5
9553: PUSH
9554: LD_INT 3
9556: PUSH
9557: EMPTY
9558: LIST
9559: LIST
9560: LIST
9561: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
9562: LD_VAR 0 6
9566: PPUSH
9567: CALL_OW 264
9571: PUSH
9572: LD_INT 4
9574: PUSH
9575: LD_INT 43
9577: PUSH
9578: LD_INT 25
9580: PUSH
9581: EMPTY
9582: LIST
9583: LIST
9584: LIST
9585: IN
9586: IFFALSE 9607
// points := [ 40 , 15 , 5 ] ;
9588: LD_ADDR_VAR 0 9
9592: PUSH
9593: LD_INT 40
9595: PUSH
9596: LD_INT 15
9598: PUSH
9599: LD_INT 5
9601: PUSH
9602: EMPTY
9603: LIST
9604: LIST
9605: LIST
9606: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
9607: LD_VAR 0 6
9611: PPUSH
9612: CALL_OW 264
9616: PUSH
9617: LD_INT 3
9619: PUSH
9620: LD_INT 23
9622: PUSH
9623: EMPTY
9624: LIST
9625: LIST
9626: IN
9627: IFFALSE 9648
// points := [ 7 , 25 , 8 ] ;
9629: LD_ADDR_VAR 0 9
9633: PUSH
9634: LD_INT 7
9636: PUSH
9637: LD_INT 25
9639: PUSH
9640: LD_INT 8
9642: PUSH
9643: EMPTY
9644: LIST
9645: LIST
9646: LIST
9647: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
9648: LD_VAR 0 6
9652: PPUSH
9653: CALL_OW 264
9657: PUSH
9658: LD_INT 5
9660: PUSH
9661: LD_INT 27
9663: PUSH
9664: LD_INT 44
9666: PUSH
9667: EMPTY
9668: LIST
9669: LIST
9670: LIST
9671: IN
9672: IFFALSE 9693
// points := [ 14 , 50 , 16 ] ;
9674: LD_ADDR_VAR 0 9
9678: PUSH
9679: LD_INT 14
9681: PUSH
9682: LD_INT 50
9684: PUSH
9685: LD_INT 16
9687: PUSH
9688: EMPTY
9689: LIST
9690: LIST
9691: LIST
9692: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
9693: LD_VAR 0 6
9697: PPUSH
9698: CALL_OW 264
9702: PUSH
9703: LD_INT 6
9705: PUSH
9706: LD_INT 46
9708: PUSH
9709: EMPTY
9710: LIST
9711: LIST
9712: IN
9713: IFFALSE 9734
// points := [ 32 , 120 , 70 ] ;
9715: LD_ADDR_VAR 0 9
9719: PUSH
9720: LD_INT 32
9722: PUSH
9723: LD_INT 120
9725: PUSH
9726: LD_INT 70
9728: PUSH
9729: EMPTY
9730: LIST
9731: LIST
9732: LIST
9733: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
9734: LD_VAR 0 6
9738: PPUSH
9739: CALL_OW 264
9743: PUSH
9744: LD_INT 7
9746: PUSH
9747: LD_INT 28
9749: PUSH
9750: LD_INT 45
9752: PUSH
9753: LD_INT 92
9755: PUSH
9756: EMPTY
9757: LIST
9758: LIST
9759: LIST
9760: LIST
9761: IN
9762: IFFALSE 9783
// points := [ 35 , 20 , 45 ] ;
9764: LD_ADDR_VAR 0 9
9768: PUSH
9769: LD_INT 35
9771: PUSH
9772: LD_INT 20
9774: PUSH
9775: LD_INT 45
9777: PUSH
9778: EMPTY
9779: LIST
9780: LIST
9781: LIST
9782: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
9783: LD_VAR 0 6
9787: PPUSH
9788: CALL_OW 264
9792: PUSH
9793: LD_INT 47
9795: PUSH
9796: EMPTY
9797: LIST
9798: IN
9799: IFFALSE 9820
// points := [ 67 , 45 , 75 ] ;
9801: LD_ADDR_VAR 0 9
9805: PUSH
9806: LD_INT 67
9808: PUSH
9809: LD_INT 45
9811: PUSH
9812: LD_INT 75
9814: PUSH
9815: EMPTY
9816: LIST
9817: LIST
9818: LIST
9819: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
9820: LD_VAR 0 6
9824: PPUSH
9825: CALL_OW 264
9829: PUSH
9830: LD_INT 26
9832: PUSH
9833: EMPTY
9834: LIST
9835: IN
9836: IFFALSE 9857
// points := [ 120 , 30 , 80 ] ;
9838: LD_ADDR_VAR 0 9
9842: PUSH
9843: LD_INT 120
9845: PUSH
9846: LD_INT 30
9848: PUSH
9849: LD_INT 80
9851: PUSH
9852: EMPTY
9853: LIST
9854: LIST
9855: LIST
9856: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
9857: LD_VAR 0 6
9861: PPUSH
9862: CALL_OW 264
9866: PUSH
9867: LD_INT 22
9869: PUSH
9870: EMPTY
9871: LIST
9872: IN
9873: IFFALSE 9894
// points := [ 40 , 1 , 1 ] ;
9875: LD_ADDR_VAR 0 9
9879: PUSH
9880: LD_INT 40
9882: PUSH
9883: LD_INT 1
9885: PUSH
9886: LD_INT 1
9888: PUSH
9889: EMPTY
9890: LIST
9891: LIST
9892: LIST
9893: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
9894: LD_VAR 0 6
9898: PPUSH
9899: CALL_OW 264
9903: PUSH
9904: LD_INT 29
9906: PUSH
9907: EMPTY
9908: LIST
9909: IN
9910: IFFALSE 9931
// points := [ 70 , 200 , 400 ] ;
9912: LD_ADDR_VAR 0 9
9916: PUSH
9917: LD_INT 70
9919: PUSH
9920: LD_INT 200
9922: PUSH
9923: LD_INT 400
9925: PUSH
9926: EMPTY
9927: LIST
9928: LIST
9929: LIST
9930: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
9931: LD_VAR 0 6
9935: PPUSH
9936: CALL_OW 264
9940: PUSH
9941: LD_INT 14
9943: PUSH
9944: LD_INT 53
9946: PUSH
9947: EMPTY
9948: LIST
9949: LIST
9950: IN
9951: IFFALSE 9972
// points := [ 40 , 10 , 20 ] ;
9953: LD_ADDR_VAR 0 9
9957: PUSH
9958: LD_INT 40
9960: PUSH
9961: LD_INT 10
9963: PUSH
9964: LD_INT 20
9966: PUSH
9967: EMPTY
9968: LIST
9969: LIST
9970: LIST
9971: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
9972: LD_VAR 0 6
9976: PPUSH
9977: CALL_OW 264
9981: PUSH
9982: LD_INT 9
9984: PUSH
9985: EMPTY
9986: LIST
9987: IN
9988: IFFALSE 10009
// points := [ 5 , 70 , 20 ] ;
9990: LD_ADDR_VAR 0 9
9994: PUSH
9995: LD_INT 5
9997: PUSH
9998: LD_INT 70
10000: PUSH
10001: LD_INT 20
10003: PUSH
10004: EMPTY
10005: LIST
10006: LIST
10007: LIST
10008: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
10009: LD_VAR 0 6
10013: PPUSH
10014: CALL_OW 264
10018: PUSH
10019: LD_INT 10
10021: PUSH
10022: EMPTY
10023: LIST
10024: IN
10025: IFFALSE 10046
// points := [ 35 , 110 , 70 ] ;
10027: LD_ADDR_VAR 0 9
10031: PUSH
10032: LD_INT 35
10034: PUSH
10035: LD_INT 110
10037: PUSH
10038: LD_INT 70
10040: PUSH
10041: EMPTY
10042: LIST
10043: LIST
10044: LIST
10045: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
10046: LD_VAR 0 6
10050: PPUSH
10051: CALL_OW 265
10055: PUSH
10056: LD_INT 25
10058: EQUAL
10059: IFFALSE 10080
// points := [ 80 , 65 , 100 ] ;
10061: LD_ADDR_VAR 0 9
10065: PUSH
10066: LD_INT 80
10068: PUSH
10069: LD_INT 65
10071: PUSH
10072: LD_INT 100
10074: PUSH
10075: EMPTY
10076: LIST
10077: LIST
10078: LIST
10079: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
10080: LD_VAR 0 6
10084: PPUSH
10085: CALL_OW 263
10089: PUSH
10090: LD_INT 1
10092: EQUAL
10093: IFFALSE 10128
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
10095: LD_ADDR_VAR 0 10
10099: PUSH
10100: LD_VAR 0 10
10104: PUSH
10105: LD_VAR 0 6
10109: PPUSH
10110: CALL_OW 311
10114: PPUSH
10115: LD_INT 3
10117: PPUSH
10118: CALL_OW 259
10122: PUSH
10123: LD_INT 4
10125: MUL
10126: MUL
10127: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
10128: LD_VAR 0 6
10132: PPUSH
10133: CALL_OW 263
10137: PUSH
10138: LD_INT 2
10140: EQUAL
10141: IFFALSE 10192
// begin j := IsControledBy ( i ) ;
10143: LD_ADDR_VAR 0 7
10147: PUSH
10148: LD_VAR 0 6
10152: PPUSH
10153: CALL_OW 312
10157: ST_TO_ADDR
// if j then
10158: LD_VAR 0 7
10162: IFFALSE 10192
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
10164: LD_ADDR_VAR 0 10
10168: PUSH
10169: LD_VAR 0 10
10173: PUSH
10174: LD_VAR 0 7
10178: PPUSH
10179: LD_INT 3
10181: PPUSH
10182: CALL_OW 259
10186: PUSH
10187: LD_INT 3
10189: MUL
10190: MUL
10191: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
10192: LD_VAR 0 6
10196: PPUSH
10197: CALL_OW 264
10201: PUSH
10202: LD_INT 5
10204: PUSH
10205: LD_INT 6
10207: PUSH
10208: LD_INT 46
10210: PUSH
10211: LD_INT 44
10213: PUSH
10214: LD_INT 47
10216: PUSH
10217: LD_INT 45
10219: PUSH
10220: LD_INT 28
10222: PUSH
10223: LD_INT 7
10225: PUSH
10226: LD_INT 27
10228: PUSH
10229: LD_INT 29
10231: PUSH
10232: EMPTY
10233: LIST
10234: LIST
10235: LIST
10236: LIST
10237: LIST
10238: LIST
10239: LIST
10240: LIST
10241: LIST
10242: LIST
10243: IN
10244: PUSH
10245: LD_VAR 0 1
10249: PPUSH
10250: LD_INT 52
10252: PPUSH
10253: CALL_OW 321
10257: PUSH
10258: LD_INT 2
10260: EQUAL
10261: AND
10262: IFFALSE 10279
// bpoints := bpoints * 1.2 ;
10264: LD_ADDR_VAR 0 10
10268: PUSH
10269: LD_VAR 0 10
10273: PUSH
10274: LD_REAL  1.20000000000000E+0000
10277: MUL
10278: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
10279: LD_VAR 0 6
10283: PPUSH
10284: CALL_OW 264
10288: PUSH
10289: LD_INT 6
10291: PUSH
10292: LD_INT 46
10294: PUSH
10295: LD_INT 47
10297: PUSH
10298: EMPTY
10299: LIST
10300: LIST
10301: LIST
10302: IN
10303: IFFALSE 10320
// bpoints := bpoints * 1.2 ;
10305: LD_ADDR_VAR 0 10
10309: PUSH
10310: LD_VAR 0 10
10314: PUSH
10315: LD_REAL  1.20000000000000E+0000
10318: MUL
10319: ST_TO_ADDR
// end ; unit_building :
10320: GO 10334
10322: LD_INT 3
10324: DOUBLE
10325: EQUAL
10326: IFTRUE 10330
10328: GO 10333
10330: POP
// ; end ;
10331: GO 10334
10333: POP
// for j = 1 to 3 do
10334: LD_ADDR_VAR 0 7
10338: PUSH
10339: DOUBLE
10340: LD_INT 1
10342: DEC
10343: ST_TO_ADDR
10344: LD_INT 3
10346: PUSH
10347: FOR_TO
10348: IFFALSE 10401
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
10350: LD_ADDR_VAR 0 5
10354: PUSH
10355: LD_VAR 0 5
10359: PPUSH
10360: LD_VAR 0 7
10364: PPUSH
10365: LD_VAR 0 5
10369: PUSH
10370: LD_VAR 0 7
10374: ARRAY
10375: PUSH
10376: LD_VAR 0 9
10380: PUSH
10381: LD_VAR 0 7
10385: ARRAY
10386: PUSH
10387: LD_VAR 0 10
10391: MUL
10392: PLUS
10393: PPUSH
10394: CALL_OW 1
10398: ST_TO_ADDR
10399: GO 10347
10401: POP
10402: POP
// end ;
10403: GO 8882
10405: POP
10406: POP
// result := Replace ( result , 4 , tmp ) ;
10407: LD_ADDR_VAR 0 5
10411: PUSH
10412: LD_VAR 0 5
10416: PPUSH
10417: LD_INT 4
10419: PPUSH
10420: LD_VAR 0 8
10424: PPUSH
10425: CALL_OW 1
10429: ST_TO_ADDR
// end ;
10430: LD_VAR 0 5
10434: RET
// export function DangerAtRange ( unit , range ) ; begin
10435: LD_INT 0
10437: PPUSH
// if not unit then
10438: LD_VAR 0 1
10442: NOT
10443: IFFALSE 10447
// exit ;
10445: GO 10492
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
10447: LD_ADDR_VAR 0 3
10451: PUSH
10452: LD_VAR 0 1
10456: PPUSH
10457: CALL_OW 255
10461: PPUSH
10462: LD_VAR 0 1
10466: PPUSH
10467: CALL_OW 250
10471: PPUSH
10472: LD_VAR 0 1
10476: PPUSH
10477: CALL_OW 251
10481: PPUSH
10482: LD_VAR 0 2
10486: PPUSH
10487: CALL 8734 0 4
10491: ST_TO_ADDR
// end ;
10492: LD_VAR 0 3
10496: RET
// export function DangerInArea ( side , area ) ; begin
10497: LD_INT 0
10499: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
10500: LD_ADDR_VAR 0 3
10504: PUSH
10505: LD_VAR 0 2
10509: PPUSH
10510: LD_INT 81
10512: PUSH
10513: LD_VAR 0 1
10517: PUSH
10518: EMPTY
10519: LIST
10520: LIST
10521: PPUSH
10522: CALL_OW 70
10526: ST_TO_ADDR
// end ;
10527: LD_VAR 0 3
10531: RET
// export function IsExtension ( b ) ; begin
10532: LD_INT 0
10534: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
10535: LD_ADDR_VAR 0 2
10539: PUSH
10540: LD_VAR 0 1
10544: PUSH
10545: LD_INT 23
10547: PUSH
10548: LD_INT 20
10550: PUSH
10551: LD_INT 22
10553: PUSH
10554: LD_INT 17
10556: PUSH
10557: LD_INT 24
10559: PUSH
10560: LD_INT 21
10562: PUSH
10563: LD_INT 19
10565: PUSH
10566: LD_INT 16
10568: PUSH
10569: LD_INT 25
10571: PUSH
10572: LD_INT 18
10574: PUSH
10575: EMPTY
10576: LIST
10577: LIST
10578: LIST
10579: LIST
10580: LIST
10581: LIST
10582: LIST
10583: LIST
10584: LIST
10585: LIST
10586: IN
10587: ST_TO_ADDR
// end ;
10588: LD_VAR 0 2
10592: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
10593: LD_INT 0
10595: PPUSH
10596: PPUSH
10597: PPUSH
// result := [ ] ;
10598: LD_ADDR_VAR 0 4
10602: PUSH
10603: EMPTY
10604: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
10605: LD_ADDR_VAR 0 5
10609: PUSH
10610: LD_VAR 0 2
10614: PPUSH
10615: LD_INT 21
10617: PUSH
10618: LD_INT 3
10620: PUSH
10621: EMPTY
10622: LIST
10623: LIST
10624: PPUSH
10625: CALL_OW 70
10629: ST_TO_ADDR
// if not tmp then
10630: LD_VAR 0 5
10634: NOT
10635: IFFALSE 10639
// exit ;
10637: GO 10703
// if checkLink then
10639: LD_VAR 0 3
10643: IFFALSE 10693
// begin for i in tmp do
10645: LD_ADDR_VAR 0 6
10649: PUSH
10650: LD_VAR 0 5
10654: PUSH
10655: FOR_IN
10656: IFFALSE 10691
// if GetBase ( i ) <> base then
10658: LD_VAR 0 6
10662: PPUSH
10663: CALL_OW 274
10667: PUSH
10668: LD_VAR 0 1
10672: NONEQUAL
10673: IFFALSE 10689
// ComLinkToBase ( base , i ) ;
10675: LD_VAR 0 1
10679: PPUSH
10680: LD_VAR 0 6
10684: PPUSH
10685: CALL_OW 169
10689: GO 10655
10691: POP
10692: POP
// end ; result := tmp ;
10693: LD_ADDR_VAR 0 4
10697: PUSH
10698: LD_VAR 0 5
10702: ST_TO_ADDR
// end ;
10703: LD_VAR 0 4
10707: RET
// export function ComComplete ( units , b ) ; var i ; begin
10708: LD_INT 0
10710: PPUSH
10711: PPUSH
// if not units then
10712: LD_VAR 0 1
10716: NOT
10717: IFFALSE 10721
// exit ;
10719: GO 10811
// for i in units do
10721: LD_ADDR_VAR 0 4
10725: PUSH
10726: LD_VAR 0 1
10730: PUSH
10731: FOR_IN
10732: IFFALSE 10809
// if BuildingStatus ( b ) = bs_build then
10734: LD_VAR 0 2
10738: PPUSH
10739: CALL_OW 461
10743: PUSH
10744: LD_INT 1
10746: EQUAL
10747: IFFALSE 10807
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
10749: LD_VAR 0 4
10753: PPUSH
10754: LD_STRING h
10756: PUSH
10757: LD_VAR 0 2
10761: PPUSH
10762: CALL_OW 250
10766: PUSH
10767: LD_VAR 0 2
10771: PPUSH
10772: CALL_OW 251
10776: PUSH
10777: LD_VAR 0 2
10781: PUSH
10782: LD_INT 0
10784: PUSH
10785: LD_INT 0
10787: PUSH
10788: LD_INT 0
10790: PUSH
10791: EMPTY
10792: LIST
10793: LIST
10794: LIST
10795: LIST
10796: LIST
10797: LIST
10798: LIST
10799: PUSH
10800: EMPTY
10801: LIST
10802: PPUSH
10803: CALL_OW 446
10807: GO 10731
10809: POP
10810: POP
// end ;
10811: LD_VAR 0 3
10815: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
10816: LD_INT 0
10818: PPUSH
10819: PPUSH
10820: PPUSH
10821: PPUSH
10822: PPUSH
10823: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
10824: LD_VAR 0 1
10828: NOT
10829: PUSH
10830: LD_VAR 0 1
10834: PPUSH
10835: CALL_OW 263
10839: PUSH
10840: LD_INT 2
10842: NONEQUAL
10843: OR
10844: IFFALSE 10848
// exit ;
10846: GO 11164
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
10848: LD_ADDR_VAR 0 6
10852: PUSH
10853: LD_INT 22
10855: PUSH
10856: LD_VAR 0 1
10860: PPUSH
10861: CALL_OW 255
10865: PUSH
10866: EMPTY
10867: LIST
10868: LIST
10869: PUSH
10870: LD_INT 2
10872: PUSH
10873: LD_INT 30
10875: PUSH
10876: LD_INT 36
10878: PUSH
10879: EMPTY
10880: LIST
10881: LIST
10882: PUSH
10883: LD_INT 34
10885: PUSH
10886: LD_INT 31
10888: PUSH
10889: EMPTY
10890: LIST
10891: LIST
10892: PUSH
10893: EMPTY
10894: LIST
10895: LIST
10896: LIST
10897: PUSH
10898: EMPTY
10899: LIST
10900: LIST
10901: PPUSH
10902: CALL_OW 69
10906: ST_TO_ADDR
// if not tmp then
10907: LD_VAR 0 6
10911: NOT
10912: IFFALSE 10916
// exit ;
10914: GO 11164
// result := [ ] ;
10916: LD_ADDR_VAR 0 2
10920: PUSH
10921: EMPTY
10922: ST_TO_ADDR
// for i in tmp do
10923: LD_ADDR_VAR 0 3
10927: PUSH
10928: LD_VAR 0 6
10932: PUSH
10933: FOR_IN
10934: IFFALSE 11005
// begin t := UnitsInside ( i ) ;
10936: LD_ADDR_VAR 0 4
10940: PUSH
10941: LD_VAR 0 3
10945: PPUSH
10946: CALL_OW 313
10950: ST_TO_ADDR
// if t then
10951: LD_VAR 0 4
10955: IFFALSE 11003
// for j in t do
10957: LD_ADDR_VAR 0 7
10961: PUSH
10962: LD_VAR 0 4
10966: PUSH
10967: FOR_IN
10968: IFFALSE 11001
// result := Replace ( result , result + 1 , j ) ;
10970: LD_ADDR_VAR 0 2
10974: PUSH
10975: LD_VAR 0 2
10979: PPUSH
10980: LD_VAR 0 2
10984: PUSH
10985: LD_INT 1
10987: PLUS
10988: PPUSH
10989: LD_VAR 0 7
10993: PPUSH
10994: CALL_OW 1
10998: ST_TO_ADDR
10999: GO 10967
11001: POP
11002: POP
// end ;
11003: GO 10933
11005: POP
11006: POP
// if not result then
11007: LD_VAR 0 2
11011: NOT
11012: IFFALSE 11016
// exit ;
11014: GO 11164
// mech := result [ 1 ] ;
11016: LD_ADDR_VAR 0 5
11020: PUSH
11021: LD_VAR 0 2
11025: PUSH
11026: LD_INT 1
11028: ARRAY
11029: ST_TO_ADDR
// if result > 1 then
11030: LD_VAR 0 2
11034: PUSH
11035: LD_INT 1
11037: GREATER
11038: IFFALSE 11150
// begin for i = 2 to result do
11040: LD_ADDR_VAR 0 3
11044: PUSH
11045: DOUBLE
11046: LD_INT 2
11048: DEC
11049: ST_TO_ADDR
11050: LD_VAR 0 2
11054: PUSH
11055: FOR_TO
11056: IFFALSE 11148
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
11058: LD_ADDR_VAR 0 4
11062: PUSH
11063: LD_VAR 0 2
11067: PUSH
11068: LD_VAR 0 3
11072: ARRAY
11073: PPUSH
11074: LD_INT 3
11076: PPUSH
11077: CALL_OW 259
11081: PUSH
11082: LD_VAR 0 2
11086: PUSH
11087: LD_VAR 0 3
11091: ARRAY
11092: PPUSH
11093: CALL_OW 432
11097: MINUS
11098: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
11099: LD_VAR 0 4
11103: PUSH
11104: LD_VAR 0 5
11108: PPUSH
11109: LD_INT 3
11111: PPUSH
11112: CALL_OW 259
11116: PUSH
11117: LD_VAR 0 5
11121: PPUSH
11122: CALL_OW 432
11126: MINUS
11127: GREATEREQUAL
11128: IFFALSE 11146
// mech := result [ i ] ;
11130: LD_ADDR_VAR 0 5
11134: PUSH
11135: LD_VAR 0 2
11139: PUSH
11140: LD_VAR 0 3
11144: ARRAY
11145: ST_TO_ADDR
// end ;
11146: GO 11055
11148: POP
11149: POP
// end ; ComLinkTo ( vehicle , mech ) ;
11150: LD_VAR 0 1
11154: PPUSH
11155: LD_VAR 0 5
11159: PPUSH
11160: CALL_OW 135
// end ;
11164: LD_VAR 0 2
11168: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
11169: LD_INT 0
11171: PPUSH
11172: PPUSH
11173: PPUSH
11174: PPUSH
11175: PPUSH
11176: PPUSH
11177: PPUSH
11178: PPUSH
11179: PPUSH
11180: PPUSH
11181: PPUSH
11182: PPUSH
11183: PPUSH
// result := [ ] ;
11184: LD_ADDR_VAR 0 7
11188: PUSH
11189: EMPTY
11190: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
11191: LD_VAR 0 1
11195: PPUSH
11196: CALL_OW 266
11200: PUSH
11201: LD_INT 0
11203: PUSH
11204: LD_INT 1
11206: PUSH
11207: EMPTY
11208: LIST
11209: LIST
11210: IN
11211: NOT
11212: IFFALSE 11216
// exit ;
11214: GO 12850
// if name then
11216: LD_VAR 0 3
11220: IFFALSE 11236
// SetBName ( base_dep , name ) ;
11222: LD_VAR 0 1
11226: PPUSH
11227: LD_VAR 0 3
11231: PPUSH
11232: CALL_OW 500
// base := GetBase ( base_dep ) ;
11236: LD_ADDR_VAR 0 15
11240: PUSH
11241: LD_VAR 0 1
11245: PPUSH
11246: CALL_OW 274
11250: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
11251: LD_ADDR_VAR 0 16
11255: PUSH
11256: LD_VAR 0 1
11260: PPUSH
11261: CALL_OW 255
11265: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
11266: LD_ADDR_VAR 0 17
11270: PUSH
11271: LD_VAR 0 1
11275: PPUSH
11276: CALL_OW 248
11280: ST_TO_ADDR
// if sources then
11281: LD_VAR 0 5
11285: IFFALSE 11332
// for i = 1 to 3 do
11287: LD_ADDR_VAR 0 8
11291: PUSH
11292: DOUBLE
11293: LD_INT 1
11295: DEC
11296: ST_TO_ADDR
11297: LD_INT 3
11299: PUSH
11300: FOR_TO
11301: IFFALSE 11330
// AddResourceType ( base , i , sources [ i ] ) ;
11303: LD_VAR 0 15
11307: PPUSH
11308: LD_VAR 0 8
11312: PPUSH
11313: LD_VAR 0 5
11317: PUSH
11318: LD_VAR 0 8
11322: ARRAY
11323: PPUSH
11324: CALL_OW 276
11328: GO 11300
11330: POP
11331: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
11332: LD_ADDR_VAR 0 18
11336: PUSH
11337: LD_VAR 0 15
11341: PPUSH
11342: LD_VAR 0 2
11346: PPUSH
11347: LD_INT 1
11349: PPUSH
11350: CALL 10593 0 3
11354: ST_TO_ADDR
// InitHc ;
11355: CALL_OW 19
// InitUc ;
11359: CALL_OW 18
// uc_side := side ;
11363: LD_ADDR_OWVAR 20
11367: PUSH
11368: LD_VAR 0 16
11372: ST_TO_ADDR
// uc_nation := nation ;
11373: LD_ADDR_OWVAR 21
11377: PUSH
11378: LD_VAR 0 17
11382: ST_TO_ADDR
// if buildings then
11383: LD_VAR 0 18
11387: IFFALSE 12709
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
11389: LD_ADDR_VAR 0 19
11393: PUSH
11394: LD_VAR 0 18
11398: PPUSH
11399: LD_INT 2
11401: PUSH
11402: LD_INT 30
11404: PUSH
11405: LD_INT 29
11407: PUSH
11408: EMPTY
11409: LIST
11410: LIST
11411: PUSH
11412: LD_INT 30
11414: PUSH
11415: LD_INT 30
11417: PUSH
11418: EMPTY
11419: LIST
11420: LIST
11421: PUSH
11422: EMPTY
11423: LIST
11424: LIST
11425: LIST
11426: PPUSH
11427: CALL_OW 72
11431: ST_TO_ADDR
// if tmp then
11432: LD_VAR 0 19
11436: IFFALSE 11484
// for i in tmp do
11438: LD_ADDR_VAR 0 8
11442: PUSH
11443: LD_VAR 0 19
11447: PUSH
11448: FOR_IN
11449: IFFALSE 11482
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
11451: LD_VAR 0 8
11455: PPUSH
11456: CALL_OW 250
11460: PPUSH
11461: LD_VAR 0 8
11465: PPUSH
11466: CALL_OW 251
11470: PPUSH
11471: LD_VAR 0 16
11475: PPUSH
11476: CALL_OW 441
11480: GO 11448
11482: POP
11483: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
11484: LD_VAR 0 18
11488: PPUSH
11489: LD_INT 2
11491: PUSH
11492: LD_INT 30
11494: PUSH
11495: LD_INT 32
11497: PUSH
11498: EMPTY
11499: LIST
11500: LIST
11501: PUSH
11502: LD_INT 30
11504: PUSH
11505: LD_INT 33
11507: PUSH
11508: EMPTY
11509: LIST
11510: LIST
11511: PUSH
11512: EMPTY
11513: LIST
11514: LIST
11515: LIST
11516: PPUSH
11517: CALL_OW 72
11521: IFFALSE 11609
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
11523: LD_ADDR_VAR 0 8
11527: PUSH
11528: LD_VAR 0 18
11532: PPUSH
11533: LD_INT 2
11535: PUSH
11536: LD_INT 30
11538: PUSH
11539: LD_INT 32
11541: PUSH
11542: EMPTY
11543: LIST
11544: LIST
11545: PUSH
11546: LD_INT 30
11548: PUSH
11549: LD_INT 33
11551: PUSH
11552: EMPTY
11553: LIST
11554: LIST
11555: PUSH
11556: EMPTY
11557: LIST
11558: LIST
11559: LIST
11560: PPUSH
11561: CALL_OW 72
11565: PUSH
11566: FOR_IN
11567: IFFALSE 11607
// begin if not GetBWeapon ( i ) then
11569: LD_VAR 0 8
11573: PPUSH
11574: CALL_OW 269
11578: NOT
11579: IFFALSE 11605
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
11581: LD_VAR 0 8
11585: PPUSH
11586: LD_VAR 0 8
11590: PPUSH
11591: LD_VAR 0 2
11595: PPUSH
11596: CALL 12855 0 2
11600: PPUSH
11601: CALL_OW 431
// end ;
11605: GO 11566
11607: POP
11608: POP
// end ; for i = 1 to personel do
11609: LD_ADDR_VAR 0 8
11613: PUSH
11614: DOUBLE
11615: LD_INT 1
11617: DEC
11618: ST_TO_ADDR
11619: LD_VAR 0 6
11623: PUSH
11624: FOR_TO
11625: IFFALSE 12689
// begin if i > 4 then
11627: LD_VAR 0 8
11631: PUSH
11632: LD_INT 4
11634: GREATER
11635: IFFALSE 11639
// break ;
11637: GO 12689
// case i of 1 :
11639: LD_VAR 0 8
11643: PUSH
11644: LD_INT 1
11646: DOUBLE
11647: EQUAL
11648: IFTRUE 11652
11650: GO 11732
11652: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
11653: LD_ADDR_VAR 0 12
11657: PUSH
11658: LD_VAR 0 18
11662: PPUSH
11663: LD_INT 22
11665: PUSH
11666: LD_VAR 0 16
11670: PUSH
11671: EMPTY
11672: LIST
11673: LIST
11674: PUSH
11675: LD_INT 58
11677: PUSH
11678: EMPTY
11679: LIST
11680: PUSH
11681: LD_INT 2
11683: PUSH
11684: LD_INT 30
11686: PUSH
11687: LD_INT 32
11689: PUSH
11690: EMPTY
11691: LIST
11692: LIST
11693: PUSH
11694: LD_INT 30
11696: PUSH
11697: LD_INT 4
11699: PUSH
11700: EMPTY
11701: LIST
11702: LIST
11703: PUSH
11704: LD_INT 30
11706: PUSH
11707: LD_INT 5
11709: PUSH
11710: EMPTY
11711: LIST
11712: LIST
11713: PUSH
11714: EMPTY
11715: LIST
11716: LIST
11717: LIST
11718: LIST
11719: PUSH
11720: EMPTY
11721: LIST
11722: LIST
11723: LIST
11724: PPUSH
11725: CALL_OW 72
11729: ST_TO_ADDR
11730: GO 11954
11732: LD_INT 2
11734: DOUBLE
11735: EQUAL
11736: IFTRUE 11740
11738: GO 11802
11740: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
11741: LD_ADDR_VAR 0 12
11745: PUSH
11746: LD_VAR 0 18
11750: PPUSH
11751: LD_INT 22
11753: PUSH
11754: LD_VAR 0 16
11758: PUSH
11759: EMPTY
11760: LIST
11761: LIST
11762: PUSH
11763: LD_INT 2
11765: PUSH
11766: LD_INT 30
11768: PUSH
11769: LD_INT 0
11771: PUSH
11772: EMPTY
11773: LIST
11774: LIST
11775: PUSH
11776: LD_INT 30
11778: PUSH
11779: LD_INT 1
11781: PUSH
11782: EMPTY
11783: LIST
11784: LIST
11785: PUSH
11786: EMPTY
11787: LIST
11788: LIST
11789: LIST
11790: PUSH
11791: EMPTY
11792: LIST
11793: LIST
11794: PPUSH
11795: CALL_OW 72
11799: ST_TO_ADDR
11800: GO 11954
11802: LD_INT 3
11804: DOUBLE
11805: EQUAL
11806: IFTRUE 11810
11808: GO 11872
11810: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
11811: LD_ADDR_VAR 0 12
11815: PUSH
11816: LD_VAR 0 18
11820: PPUSH
11821: LD_INT 22
11823: PUSH
11824: LD_VAR 0 16
11828: PUSH
11829: EMPTY
11830: LIST
11831: LIST
11832: PUSH
11833: LD_INT 2
11835: PUSH
11836: LD_INT 30
11838: PUSH
11839: LD_INT 2
11841: PUSH
11842: EMPTY
11843: LIST
11844: LIST
11845: PUSH
11846: LD_INT 30
11848: PUSH
11849: LD_INT 3
11851: PUSH
11852: EMPTY
11853: LIST
11854: LIST
11855: PUSH
11856: EMPTY
11857: LIST
11858: LIST
11859: LIST
11860: PUSH
11861: EMPTY
11862: LIST
11863: LIST
11864: PPUSH
11865: CALL_OW 72
11869: ST_TO_ADDR
11870: GO 11954
11872: LD_INT 4
11874: DOUBLE
11875: EQUAL
11876: IFTRUE 11880
11878: GO 11953
11880: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
11881: LD_ADDR_VAR 0 12
11885: PUSH
11886: LD_VAR 0 18
11890: PPUSH
11891: LD_INT 22
11893: PUSH
11894: LD_VAR 0 16
11898: PUSH
11899: EMPTY
11900: LIST
11901: LIST
11902: PUSH
11903: LD_INT 2
11905: PUSH
11906: LD_INT 30
11908: PUSH
11909: LD_INT 6
11911: PUSH
11912: EMPTY
11913: LIST
11914: LIST
11915: PUSH
11916: LD_INT 30
11918: PUSH
11919: LD_INT 7
11921: PUSH
11922: EMPTY
11923: LIST
11924: LIST
11925: PUSH
11926: LD_INT 30
11928: PUSH
11929: LD_INT 8
11931: PUSH
11932: EMPTY
11933: LIST
11934: LIST
11935: PUSH
11936: EMPTY
11937: LIST
11938: LIST
11939: LIST
11940: LIST
11941: PUSH
11942: EMPTY
11943: LIST
11944: LIST
11945: PPUSH
11946: CALL_OW 72
11950: ST_TO_ADDR
11951: GO 11954
11953: POP
// if i = 1 then
11954: LD_VAR 0 8
11958: PUSH
11959: LD_INT 1
11961: EQUAL
11962: IFFALSE 12073
// begin tmp := [ ] ;
11964: LD_ADDR_VAR 0 19
11968: PUSH
11969: EMPTY
11970: ST_TO_ADDR
// for j in f do
11971: LD_ADDR_VAR 0 9
11975: PUSH
11976: LD_VAR 0 12
11980: PUSH
11981: FOR_IN
11982: IFFALSE 12055
// if GetBType ( j ) = b_bunker then
11984: LD_VAR 0 9
11988: PPUSH
11989: CALL_OW 266
11993: PUSH
11994: LD_INT 32
11996: EQUAL
11997: IFFALSE 12024
// tmp := Insert ( tmp , 1 , j ) else
11999: LD_ADDR_VAR 0 19
12003: PUSH
12004: LD_VAR 0 19
12008: PPUSH
12009: LD_INT 1
12011: PPUSH
12012: LD_VAR 0 9
12016: PPUSH
12017: CALL_OW 2
12021: ST_TO_ADDR
12022: GO 12053
// tmp := Insert ( tmp , tmp + 1 , j ) ;
12024: LD_ADDR_VAR 0 19
12028: PUSH
12029: LD_VAR 0 19
12033: PPUSH
12034: LD_VAR 0 19
12038: PUSH
12039: LD_INT 1
12041: PLUS
12042: PPUSH
12043: LD_VAR 0 9
12047: PPUSH
12048: CALL_OW 2
12052: ST_TO_ADDR
12053: GO 11981
12055: POP
12056: POP
// if tmp then
12057: LD_VAR 0 19
12061: IFFALSE 12073
// f := tmp ;
12063: LD_ADDR_VAR 0 12
12067: PUSH
12068: LD_VAR 0 19
12072: ST_TO_ADDR
// end ; x := personel [ i ] ;
12073: LD_ADDR_VAR 0 13
12077: PUSH
12078: LD_VAR 0 6
12082: PUSH
12083: LD_VAR 0 8
12087: ARRAY
12088: ST_TO_ADDR
// if x = - 1 then
12089: LD_VAR 0 13
12093: PUSH
12094: LD_INT 1
12096: NEG
12097: EQUAL
12098: IFFALSE 12307
// begin for j in f do
12100: LD_ADDR_VAR 0 9
12104: PUSH
12105: LD_VAR 0 12
12109: PUSH
12110: FOR_IN
12111: IFFALSE 12303
// repeat InitHc ;
12113: CALL_OW 19
// if GetBType ( j ) = b_barracks then
12117: LD_VAR 0 9
12121: PPUSH
12122: CALL_OW 266
12126: PUSH
12127: LD_INT 5
12129: EQUAL
12130: IFFALSE 12200
// begin if UnitsInside ( j ) < 3 then
12132: LD_VAR 0 9
12136: PPUSH
12137: CALL_OW 313
12141: PUSH
12142: LD_INT 3
12144: LESS
12145: IFFALSE 12181
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12147: LD_INT 0
12149: PPUSH
12150: LD_INT 5
12152: PUSH
12153: LD_INT 8
12155: PUSH
12156: LD_INT 9
12158: PUSH
12159: EMPTY
12160: LIST
12161: LIST
12162: LIST
12163: PUSH
12164: LD_VAR 0 17
12168: ARRAY
12169: PPUSH
12170: LD_VAR 0 4
12174: PPUSH
12175: CALL_OW 380
12179: GO 12198
// PrepareHuman ( false , i , skill ) ;
12181: LD_INT 0
12183: PPUSH
12184: LD_VAR 0 8
12188: PPUSH
12189: LD_VAR 0 4
12193: PPUSH
12194: CALL_OW 380
// end else
12198: GO 12217
// PrepareHuman ( false , i , skill ) ;
12200: LD_INT 0
12202: PPUSH
12203: LD_VAR 0 8
12207: PPUSH
12208: LD_VAR 0 4
12212: PPUSH
12213: CALL_OW 380
// un := CreateHuman ;
12217: LD_ADDR_VAR 0 14
12221: PUSH
12222: CALL_OW 44
12226: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12227: LD_ADDR_VAR 0 7
12231: PUSH
12232: LD_VAR 0 7
12236: PPUSH
12237: LD_INT 1
12239: PPUSH
12240: LD_VAR 0 14
12244: PPUSH
12245: CALL_OW 2
12249: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
12250: LD_VAR 0 14
12254: PPUSH
12255: LD_VAR 0 9
12259: PPUSH
12260: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
12264: LD_VAR 0 9
12268: PPUSH
12269: CALL_OW 313
12273: PUSH
12274: LD_INT 6
12276: EQUAL
12277: PUSH
12278: LD_VAR 0 9
12282: PPUSH
12283: CALL_OW 266
12287: PUSH
12288: LD_INT 32
12290: PUSH
12291: LD_INT 31
12293: PUSH
12294: EMPTY
12295: LIST
12296: LIST
12297: IN
12298: OR
12299: IFFALSE 12113
12301: GO 12110
12303: POP
12304: POP
// end else
12305: GO 12687
// for j = 1 to x do
12307: LD_ADDR_VAR 0 9
12311: PUSH
12312: DOUBLE
12313: LD_INT 1
12315: DEC
12316: ST_TO_ADDR
12317: LD_VAR 0 13
12321: PUSH
12322: FOR_TO
12323: IFFALSE 12685
// begin InitHc ;
12325: CALL_OW 19
// if not f then
12329: LD_VAR 0 12
12333: NOT
12334: IFFALSE 12423
// begin PrepareHuman ( false , i , skill ) ;
12336: LD_INT 0
12338: PPUSH
12339: LD_VAR 0 8
12343: PPUSH
12344: LD_VAR 0 4
12348: PPUSH
12349: CALL_OW 380
// un := CreateHuman ;
12353: LD_ADDR_VAR 0 14
12357: PUSH
12358: CALL_OW 44
12362: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12363: LD_ADDR_VAR 0 7
12367: PUSH
12368: LD_VAR 0 7
12372: PPUSH
12373: LD_INT 1
12375: PPUSH
12376: LD_VAR 0 14
12380: PPUSH
12381: CALL_OW 2
12385: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
12386: LD_VAR 0 14
12390: PPUSH
12391: LD_VAR 0 1
12395: PPUSH
12396: CALL_OW 250
12400: PPUSH
12401: LD_VAR 0 1
12405: PPUSH
12406: CALL_OW 251
12410: PPUSH
12411: LD_INT 10
12413: PPUSH
12414: LD_INT 0
12416: PPUSH
12417: CALL_OW 50
// continue ;
12421: GO 12322
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
12423: LD_VAR 0 12
12427: PUSH
12428: LD_INT 1
12430: ARRAY
12431: PPUSH
12432: CALL_OW 313
12436: PUSH
12437: LD_VAR 0 12
12441: PUSH
12442: LD_INT 1
12444: ARRAY
12445: PPUSH
12446: CALL_OW 266
12450: PUSH
12451: LD_INT 32
12453: PUSH
12454: LD_INT 31
12456: PUSH
12457: EMPTY
12458: LIST
12459: LIST
12460: IN
12461: AND
12462: PUSH
12463: LD_VAR 0 12
12467: PUSH
12468: LD_INT 1
12470: ARRAY
12471: PPUSH
12472: CALL_OW 313
12476: PUSH
12477: LD_INT 6
12479: EQUAL
12480: OR
12481: IFFALSE 12501
// f := Delete ( f , 1 ) ;
12483: LD_ADDR_VAR 0 12
12487: PUSH
12488: LD_VAR 0 12
12492: PPUSH
12493: LD_INT 1
12495: PPUSH
12496: CALL_OW 3
12500: ST_TO_ADDR
// if not f then
12501: LD_VAR 0 12
12505: NOT
12506: IFFALSE 12524
// begin x := x + 2 ;
12508: LD_ADDR_VAR 0 13
12512: PUSH
12513: LD_VAR 0 13
12517: PUSH
12518: LD_INT 2
12520: PLUS
12521: ST_TO_ADDR
// continue ;
12522: GO 12322
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
12524: LD_VAR 0 12
12528: PUSH
12529: LD_INT 1
12531: ARRAY
12532: PPUSH
12533: CALL_OW 266
12537: PUSH
12538: LD_INT 5
12540: EQUAL
12541: IFFALSE 12615
// begin if UnitsInside ( f [ 1 ] ) < 3 then
12543: LD_VAR 0 12
12547: PUSH
12548: LD_INT 1
12550: ARRAY
12551: PPUSH
12552: CALL_OW 313
12556: PUSH
12557: LD_INT 3
12559: LESS
12560: IFFALSE 12596
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12562: LD_INT 0
12564: PPUSH
12565: LD_INT 5
12567: PUSH
12568: LD_INT 8
12570: PUSH
12571: LD_INT 9
12573: PUSH
12574: EMPTY
12575: LIST
12576: LIST
12577: LIST
12578: PUSH
12579: LD_VAR 0 17
12583: ARRAY
12584: PPUSH
12585: LD_VAR 0 4
12589: PPUSH
12590: CALL_OW 380
12594: GO 12613
// PrepareHuman ( false , i , skill ) ;
12596: LD_INT 0
12598: PPUSH
12599: LD_VAR 0 8
12603: PPUSH
12604: LD_VAR 0 4
12608: PPUSH
12609: CALL_OW 380
// end else
12613: GO 12632
// PrepareHuman ( false , i , skill ) ;
12615: LD_INT 0
12617: PPUSH
12618: LD_VAR 0 8
12622: PPUSH
12623: LD_VAR 0 4
12627: PPUSH
12628: CALL_OW 380
// un := CreateHuman ;
12632: LD_ADDR_VAR 0 14
12636: PUSH
12637: CALL_OW 44
12641: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12642: LD_ADDR_VAR 0 7
12646: PUSH
12647: LD_VAR 0 7
12651: PPUSH
12652: LD_INT 1
12654: PPUSH
12655: LD_VAR 0 14
12659: PPUSH
12660: CALL_OW 2
12664: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
12665: LD_VAR 0 14
12669: PPUSH
12670: LD_VAR 0 12
12674: PUSH
12675: LD_INT 1
12677: ARRAY
12678: PPUSH
12679: CALL_OW 52
// end ;
12683: GO 12322
12685: POP
12686: POP
// end ;
12687: GO 11624
12689: POP
12690: POP
// result := result ^ buildings ;
12691: LD_ADDR_VAR 0 7
12695: PUSH
12696: LD_VAR 0 7
12700: PUSH
12701: LD_VAR 0 18
12705: ADD
12706: ST_TO_ADDR
// end else
12707: GO 12850
// begin for i = 1 to personel do
12709: LD_ADDR_VAR 0 8
12713: PUSH
12714: DOUBLE
12715: LD_INT 1
12717: DEC
12718: ST_TO_ADDR
12719: LD_VAR 0 6
12723: PUSH
12724: FOR_TO
12725: IFFALSE 12848
// begin if i > 4 then
12727: LD_VAR 0 8
12731: PUSH
12732: LD_INT 4
12734: GREATER
12735: IFFALSE 12739
// break ;
12737: GO 12848
// x := personel [ i ] ;
12739: LD_ADDR_VAR 0 13
12743: PUSH
12744: LD_VAR 0 6
12748: PUSH
12749: LD_VAR 0 8
12753: ARRAY
12754: ST_TO_ADDR
// if x = - 1 then
12755: LD_VAR 0 13
12759: PUSH
12760: LD_INT 1
12762: NEG
12763: EQUAL
12764: IFFALSE 12768
// continue ;
12766: GO 12724
// PrepareHuman ( false , i , skill ) ;
12768: LD_INT 0
12770: PPUSH
12771: LD_VAR 0 8
12775: PPUSH
12776: LD_VAR 0 4
12780: PPUSH
12781: CALL_OW 380
// un := CreateHuman ;
12785: LD_ADDR_VAR 0 14
12789: PUSH
12790: CALL_OW 44
12794: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
12795: LD_VAR 0 14
12799: PPUSH
12800: LD_VAR 0 1
12804: PPUSH
12805: CALL_OW 250
12809: PPUSH
12810: LD_VAR 0 1
12814: PPUSH
12815: CALL_OW 251
12819: PPUSH
12820: LD_INT 10
12822: PPUSH
12823: LD_INT 0
12825: PPUSH
12826: CALL_OW 50
// result := result ^ un ;
12830: LD_ADDR_VAR 0 7
12834: PUSH
12835: LD_VAR 0 7
12839: PUSH
12840: LD_VAR 0 14
12844: ADD
12845: ST_TO_ADDR
// end ;
12846: GO 12724
12848: POP
12849: POP
// end ; end ;
12850: LD_VAR 0 7
12854: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
12855: LD_INT 0
12857: PPUSH
12858: PPUSH
12859: PPUSH
12860: PPUSH
12861: PPUSH
12862: PPUSH
12863: PPUSH
12864: PPUSH
12865: PPUSH
12866: PPUSH
12867: PPUSH
12868: PPUSH
12869: PPUSH
12870: PPUSH
12871: PPUSH
12872: PPUSH
// result := false ;
12873: LD_ADDR_VAR 0 3
12877: PUSH
12878: LD_INT 0
12880: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
12881: LD_VAR 0 1
12885: NOT
12886: PUSH
12887: LD_VAR 0 1
12891: PPUSH
12892: CALL_OW 266
12896: PUSH
12897: LD_INT 32
12899: PUSH
12900: LD_INT 33
12902: PUSH
12903: EMPTY
12904: LIST
12905: LIST
12906: IN
12907: NOT
12908: OR
12909: IFFALSE 12913
// exit ;
12911: GO 14022
// nat := GetNation ( tower ) ;
12913: LD_ADDR_VAR 0 12
12917: PUSH
12918: LD_VAR 0 1
12922: PPUSH
12923: CALL_OW 248
12927: ST_TO_ADDR
// side := GetSide ( tower ) ;
12928: LD_ADDR_VAR 0 16
12932: PUSH
12933: LD_VAR 0 1
12937: PPUSH
12938: CALL_OW 255
12942: ST_TO_ADDR
// x := GetX ( tower ) ;
12943: LD_ADDR_VAR 0 10
12947: PUSH
12948: LD_VAR 0 1
12952: PPUSH
12953: CALL_OW 250
12957: ST_TO_ADDR
// y := GetY ( tower ) ;
12958: LD_ADDR_VAR 0 11
12962: PUSH
12963: LD_VAR 0 1
12967: PPUSH
12968: CALL_OW 251
12972: ST_TO_ADDR
// if not x or not y then
12973: LD_VAR 0 10
12977: NOT
12978: PUSH
12979: LD_VAR 0 11
12983: NOT
12984: OR
12985: IFFALSE 12989
// exit ;
12987: GO 14022
// weapon := 0 ;
12989: LD_ADDR_VAR 0 18
12993: PUSH
12994: LD_INT 0
12996: ST_TO_ADDR
// fac_list := [ ] ;
12997: LD_ADDR_VAR 0 17
13001: PUSH
13002: EMPTY
13003: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
13004: LD_ADDR_VAR 0 6
13008: PUSH
13009: LD_VAR 0 1
13013: PPUSH
13014: CALL_OW 274
13018: PPUSH
13019: LD_VAR 0 2
13023: PPUSH
13024: LD_INT 0
13026: PPUSH
13027: CALL 10593 0 3
13031: PPUSH
13032: LD_INT 30
13034: PUSH
13035: LD_INT 3
13037: PUSH
13038: EMPTY
13039: LIST
13040: LIST
13041: PPUSH
13042: CALL_OW 72
13046: ST_TO_ADDR
// if not factories then
13047: LD_VAR 0 6
13051: NOT
13052: IFFALSE 13056
// exit ;
13054: GO 14022
// for i in factories do
13056: LD_ADDR_VAR 0 8
13060: PUSH
13061: LD_VAR 0 6
13065: PUSH
13066: FOR_IN
13067: IFFALSE 13092
// fac_list := fac_list union AvailableWeaponList ( i ) ;
13069: LD_ADDR_VAR 0 17
13073: PUSH
13074: LD_VAR 0 17
13078: PUSH
13079: LD_VAR 0 8
13083: PPUSH
13084: CALL_OW 478
13088: UNION
13089: ST_TO_ADDR
13090: GO 13066
13092: POP
13093: POP
// if not fac_list then
13094: LD_VAR 0 17
13098: NOT
13099: IFFALSE 13103
// exit ;
13101: GO 14022
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
13103: LD_ADDR_VAR 0 5
13107: PUSH
13108: LD_INT 4
13110: PUSH
13111: LD_INT 5
13113: PUSH
13114: LD_INT 9
13116: PUSH
13117: LD_INT 10
13119: PUSH
13120: LD_INT 6
13122: PUSH
13123: LD_INT 7
13125: PUSH
13126: LD_INT 11
13128: PUSH
13129: EMPTY
13130: LIST
13131: LIST
13132: LIST
13133: LIST
13134: LIST
13135: LIST
13136: LIST
13137: PUSH
13138: LD_INT 27
13140: PUSH
13141: LD_INT 28
13143: PUSH
13144: LD_INT 26
13146: PUSH
13147: LD_INT 30
13149: PUSH
13150: EMPTY
13151: LIST
13152: LIST
13153: LIST
13154: LIST
13155: PUSH
13156: LD_INT 43
13158: PUSH
13159: LD_INT 44
13161: PUSH
13162: LD_INT 46
13164: PUSH
13165: LD_INT 45
13167: PUSH
13168: LD_INT 47
13170: PUSH
13171: LD_INT 49
13173: PUSH
13174: EMPTY
13175: LIST
13176: LIST
13177: LIST
13178: LIST
13179: LIST
13180: LIST
13181: PUSH
13182: EMPTY
13183: LIST
13184: LIST
13185: LIST
13186: PUSH
13187: LD_VAR 0 12
13191: ARRAY
13192: ST_TO_ADDR
// list := list isect fac_list ;
13193: LD_ADDR_VAR 0 5
13197: PUSH
13198: LD_VAR 0 5
13202: PUSH
13203: LD_VAR 0 17
13207: ISECT
13208: ST_TO_ADDR
// if not list then
13209: LD_VAR 0 5
13213: NOT
13214: IFFALSE 13218
// exit ;
13216: GO 14022
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
13218: LD_VAR 0 12
13222: PUSH
13223: LD_INT 3
13225: EQUAL
13226: PUSH
13227: LD_INT 49
13229: PUSH
13230: LD_VAR 0 5
13234: IN
13235: AND
13236: PUSH
13237: LD_INT 31
13239: PPUSH
13240: LD_VAR 0 16
13244: PPUSH
13245: CALL_OW 321
13249: PUSH
13250: LD_INT 2
13252: EQUAL
13253: AND
13254: IFFALSE 13314
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
13256: LD_INT 22
13258: PUSH
13259: LD_VAR 0 16
13263: PUSH
13264: EMPTY
13265: LIST
13266: LIST
13267: PUSH
13268: LD_INT 35
13270: PUSH
13271: LD_INT 49
13273: PUSH
13274: EMPTY
13275: LIST
13276: LIST
13277: PUSH
13278: LD_INT 91
13280: PUSH
13281: LD_VAR 0 1
13285: PUSH
13286: LD_INT 10
13288: PUSH
13289: EMPTY
13290: LIST
13291: LIST
13292: LIST
13293: PUSH
13294: EMPTY
13295: LIST
13296: LIST
13297: LIST
13298: PPUSH
13299: CALL_OW 69
13303: NOT
13304: IFFALSE 13314
// weapon := ru_time_lapser ;
13306: LD_ADDR_VAR 0 18
13310: PUSH
13311: LD_INT 49
13313: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
13314: LD_VAR 0 12
13318: PUSH
13319: LD_INT 1
13321: PUSH
13322: LD_INT 2
13324: PUSH
13325: EMPTY
13326: LIST
13327: LIST
13328: IN
13329: PUSH
13330: LD_INT 11
13332: PUSH
13333: LD_VAR 0 5
13337: IN
13338: PUSH
13339: LD_INT 30
13341: PUSH
13342: LD_VAR 0 5
13346: IN
13347: OR
13348: AND
13349: PUSH
13350: LD_INT 6
13352: PPUSH
13353: LD_VAR 0 16
13357: PPUSH
13358: CALL_OW 321
13362: PUSH
13363: LD_INT 2
13365: EQUAL
13366: AND
13367: IFFALSE 13532
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
13369: LD_INT 22
13371: PUSH
13372: LD_VAR 0 16
13376: PUSH
13377: EMPTY
13378: LIST
13379: LIST
13380: PUSH
13381: LD_INT 2
13383: PUSH
13384: LD_INT 35
13386: PUSH
13387: LD_INT 11
13389: PUSH
13390: EMPTY
13391: LIST
13392: LIST
13393: PUSH
13394: LD_INT 35
13396: PUSH
13397: LD_INT 30
13399: PUSH
13400: EMPTY
13401: LIST
13402: LIST
13403: PUSH
13404: EMPTY
13405: LIST
13406: LIST
13407: LIST
13408: PUSH
13409: LD_INT 91
13411: PUSH
13412: LD_VAR 0 1
13416: PUSH
13417: LD_INT 18
13419: PUSH
13420: EMPTY
13421: LIST
13422: LIST
13423: LIST
13424: PUSH
13425: EMPTY
13426: LIST
13427: LIST
13428: LIST
13429: PPUSH
13430: CALL_OW 69
13434: NOT
13435: PUSH
13436: LD_INT 22
13438: PUSH
13439: LD_VAR 0 16
13443: PUSH
13444: EMPTY
13445: LIST
13446: LIST
13447: PUSH
13448: LD_INT 2
13450: PUSH
13451: LD_INT 30
13453: PUSH
13454: LD_INT 32
13456: PUSH
13457: EMPTY
13458: LIST
13459: LIST
13460: PUSH
13461: LD_INT 30
13463: PUSH
13464: LD_INT 33
13466: PUSH
13467: EMPTY
13468: LIST
13469: LIST
13470: PUSH
13471: EMPTY
13472: LIST
13473: LIST
13474: LIST
13475: PUSH
13476: LD_INT 91
13478: PUSH
13479: LD_VAR 0 1
13483: PUSH
13484: LD_INT 12
13486: PUSH
13487: EMPTY
13488: LIST
13489: LIST
13490: LIST
13491: PUSH
13492: EMPTY
13493: LIST
13494: LIST
13495: LIST
13496: PUSH
13497: EMPTY
13498: LIST
13499: PPUSH
13500: CALL_OW 69
13504: PUSH
13505: LD_INT 2
13507: GREATER
13508: AND
13509: IFFALSE 13532
// weapon := [ us_radar , ar_radar ] [ nat ] ;
13511: LD_ADDR_VAR 0 18
13515: PUSH
13516: LD_INT 11
13518: PUSH
13519: LD_INT 30
13521: PUSH
13522: EMPTY
13523: LIST
13524: LIST
13525: PUSH
13526: LD_VAR 0 12
13530: ARRAY
13531: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
13532: LD_VAR 0 18
13536: NOT
13537: PUSH
13538: LD_INT 40
13540: PPUSH
13541: LD_VAR 0 16
13545: PPUSH
13546: CALL_OW 321
13550: PUSH
13551: LD_INT 2
13553: EQUAL
13554: AND
13555: PUSH
13556: LD_INT 7
13558: PUSH
13559: LD_VAR 0 5
13563: IN
13564: PUSH
13565: LD_INT 28
13567: PUSH
13568: LD_VAR 0 5
13572: IN
13573: OR
13574: PUSH
13575: LD_INT 45
13577: PUSH
13578: LD_VAR 0 5
13582: IN
13583: OR
13584: AND
13585: IFFALSE 13839
// begin hex := GetHexInfo ( x , y ) ;
13587: LD_ADDR_VAR 0 4
13591: PUSH
13592: LD_VAR 0 10
13596: PPUSH
13597: LD_VAR 0 11
13601: PPUSH
13602: CALL_OW 546
13606: ST_TO_ADDR
// if hex [ 1 ] then
13607: LD_VAR 0 4
13611: PUSH
13612: LD_INT 1
13614: ARRAY
13615: IFFALSE 13619
// exit ;
13617: GO 14022
// height := hex [ 2 ] ;
13619: LD_ADDR_VAR 0 15
13623: PUSH
13624: LD_VAR 0 4
13628: PUSH
13629: LD_INT 2
13631: ARRAY
13632: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
13633: LD_ADDR_VAR 0 14
13637: PUSH
13638: LD_INT 0
13640: PUSH
13641: LD_INT 2
13643: PUSH
13644: LD_INT 3
13646: PUSH
13647: LD_INT 5
13649: PUSH
13650: EMPTY
13651: LIST
13652: LIST
13653: LIST
13654: LIST
13655: ST_TO_ADDR
// for i in tmp do
13656: LD_ADDR_VAR 0 8
13660: PUSH
13661: LD_VAR 0 14
13665: PUSH
13666: FOR_IN
13667: IFFALSE 13837
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
13669: LD_ADDR_VAR 0 9
13673: PUSH
13674: LD_VAR 0 10
13678: PPUSH
13679: LD_VAR 0 8
13683: PPUSH
13684: LD_INT 5
13686: PPUSH
13687: CALL_OW 272
13691: PUSH
13692: LD_VAR 0 11
13696: PPUSH
13697: LD_VAR 0 8
13701: PPUSH
13702: LD_INT 5
13704: PPUSH
13705: CALL_OW 273
13709: PUSH
13710: EMPTY
13711: LIST
13712: LIST
13713: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
13714: LD_VAR 0 9
13718: PUSH
13719: LD_INT 1
13721: ARRAY
13722: PPUSH
13723: LD_VAR 0 9
13727: PUSH
13728: LD_INT 2
13730: ARRAY
13731: PPUSH
13732: CALL_OW 488
13736: IFFALSE 13835
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
13738: LD_ADDR_VAR 0 4
13742: PUSH
13743: LD_VAR 0 9
13747: PUSH
13748: LD_INT 1
13750: ARRAY
13751: PPUSH
13752: LD_VAR 0 9
13756: PUSH
13757: LD_INT 2
13759: ARRAY
13760: PPUSH
13761: CALL_OW 546
13765: ST_TO_ADDR
// if hex [ 1 ] then
13766: LD_VAR 0 4
13770: PUSH
13771: LD_INT 1
13773: ARRAY
13774: IFFALSE 13778
// continue ;
13776: GO 13666
// h := hex [ 2 ] ;
13778: LD_ADDR_VAR 0 13
13782: PUSH
13783: LD_VAR 0 4
13787: PUSH
13788: LD_INT 2
13790: ARRAY
13791: ST_TO_ADDR
// if h + 7 < height then
13792: LD_VAR 0 13
13796: PUSH
13797: LD_INT 7
13799: PLUS
13800: PUSH
13801: LD_VAR 0 15
13805: LESS
13806: IFFALSE 13835
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
13808: LD_ADDR_VAR 0 18
13812: PUSH
13813: LD_INT 7
13815: PUSH
13816: LD_INT 28
13818: PUSH
13819: LD_INT 45
13821: PUSH
13822: EMPTY
13823: LIST
13824: LIST
13825: LIST
13826: PUSH
13827: LD_VAR 0 12
13831: ARRAY
13832: ST_TO_ADDR
// break ;
13833: GO 13837
// end ; end ; end ;
13835: GO 13666
13837: POP
13838: POP
// end ; if not weapon then
13839: LD_VAR 0 18
13843: NOT
13844: IFFALSE 13904
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
13846: LD_ADDR_VAR 0 5
13850: PUSH
13851: LD_VAR 0 5
13855: PUSH
13856: LD_INT 11
13858: PUSH
13859: LD_INT 30
13861: PUSH
13862: LD_INT 49
13864: PUSH
13865: EMPTY
13866: LIST
13867: LIST
13868: LIST
13869: DIFF
13870: ST_TO_ADDR
// if not list then
13871: LD_VAR 0 5
13875: NOT
13876: IFFALSE 13880
// exit ;
13878: GO 14022
// weapon := list [ rand ( 1 , list ) ] ;
13880: LD_ADDR_VAR 0 18
13884: PUSH
13885: LD_VAR 0 5
13889: PUSH
13890: LD_INT 1
13892: PPUSH
13893: LD_VAR 0 5
13897: PPUSH
13898: CALL_OW 12
13902: ARRAY
13903: ST_TO_ADDR
// end ; if weapon then
13904: LD_VAR 0 18
13908: IFFALSE 14022
// begin tmp := CostOfWeapon ( weapon ) ;
13910: LD_ADDR_VAR 0 14
13914: PUSH
13915: LD_VAR 0 18
13919: PPUSH
13920: CALL_OW 451
13924: ST_TO_ADDR
// j := GetBase ( tower ) ;
13925: LD_ADDR_VAR 0 9
13929: PUSH
13930: LD_VAR 0 1
13934: PPUSH
13935: CALL_OW 274
13939: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
13940: LD_VAR 0 9
13944: PPUSH
13945: LD_INT 1
13947: PPUSH
13948: CALL_OW 275
13952: PUSH
13953: LD_VAR 0 14
13957: PUSH
13958: LD_INT 1
13960: ARRAY
13961: GREATEREQUAL
13962: PUSH
13963: LD_VAR 0 9
13967: PPUSH
13968: LD_INT 2
13970: PPUSH
13971: CALL_OW 275
13975: PUSH
13976: LD_VAR 0 14
13980: PUSH
13981: LD_INT 2
13983: ARRAY
13984: GREATEREQUAL
13985: AND
13986: PUSH
13987: LD_VAR 0 9
13991: PPUSH
13992: LD_INT 3
13994: PPUSH
13995: CALL_OW 275
13999: PUSH
14000: LD_VAR 0 14
14004: PUSH
14005: LD_INT 3
14007: ARRAY
14008: GREATEREQUAL
14009: AND
14010: IFFALSE 14022
// result := weapon ;
14012: LD_ADDR_VAR 0 3
14016: PUSH
14017: LD_VAR 0 18
14021: ST_TO_ADDR
// end ; end ;
14022: LD_VAR 0 3
14026: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
14027: LD_INT 0
14029: PPUSH
14030: PPUSH
// result := true ;
14031: LD_ADDR_VAR 0 3
14035: PUSH
14036: LD_INT 1
14038: ST_TO_ADDR
// if array1 = array2 then
14039: LD_VAR 0 1
14043: PUSH
14044: LD_VAR 0 2
14048: EQUAL
14049: IFFALSE 14109
// begin for i = 1 to array1 do
14051: LD_ADDR_VAR 0 4
14055: PUSH
14056: DOUBLE
14057: LD_INT 1
14059: DEC
14060: ST_TO_ADDR
14061: LD_VAR 0 1
14065: PUSH
14066: FOR_TO
14067: IFFALSE 14105
// if array1 [ i ] <> array2 [ i ] then
14069: LD_VAR 0 1
14073: PUSH
14074: LD_VAR 0 4
14078: ARRAY
14079: PUSH
14080: LD_VAR 0 2
14084: PUSH
14085: LD_VAR 0 4
14089: ARRAY
14090: NONEQUAL
14091: IFFALSE 14103
// begin result := false ;
14093: LD_ADDR_VAR 0 3
14097: PUSH
14098: LD_INT 0
14100: ST_TO_ADDR
// break ;
14101: GO 14105
// end ;
14103: GO 14066
14105: POP
14106: POP
// end else
14107: GO 14117
// result := false ;
14109: LD_ADDR_VAR 0 3
14113: PUSH
14114: LD_INT 0
14116: ST_TO_ADDR
// end ;
14117: LD_VAR 0 3
14121: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
14122: LD_INT 0
14124: PPUSH
14125: PPUSH
// if not array1 or not array2 then
14126: LD_VAR 0 1
14130: NOT
14131: PUSH
14132: LD_VAR 0 2
14136: NOT
14137: OR
14138: IFFALSE 14142
// exit ;
14140: GO 14206
// result := true ;
14142: LD_ADDR_VAR 0 3
14146: PUSH
14147: LD_INT 1
14149: ST_TO_ADDR
// for i = 1 to array1 do
14150: LD_ADDR_VAR 0 4
14154: PUSH
14155: DOUBLE
14156: LD_INT 1
14158: DEC
14159: ST_TO_ADDR
14160: LD_VAR 0 1
14164: PUSH
14165: FOR_TO
14166: IFFALSE 14204
// if array1 [ i ] <> array2 [ i ] then
14168: LD_VAR 0 1
14172: PUSH
14173: LD_VAR 0 4
14177: ARRAY
14178: PUSH
14179: LD_VAR 0 2
14183: PUSH
14184: LD_VAR 0 4
14188: ARRAY
14189: NONEQUAL
14190: IFFALSE 14202
// begin result := false ;
14192: LD_ADDR_VAR 0 3
14196: PUSH
14197: LD_INT 0
14199: ST_TO_ADDR
// break ;
14200: GO 14204
// end ;
14202: GO 14165
14204: POP
14205: POP
// end ;
14206: LD_VAR 0 3
14210: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
14211: LD_INT 0
14213: PPUSH
14214: PPUSH
14215: PPUSH
// pom := GetBase ( fac ) ;
14216: LD_ADDR_VAR 0 5
14220: PUSH
14221: LD_VAR 0 1
14225: PPUSH
14226: CALL_OW 274
14230: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
14231: LD_ADDR_VAR 0 4
14235: PUSH
14236: LD_VAR 0 2
14240: PUSH
14241: LD_INT 1
14243: ARRAY
14244: PPUSH
14245: LD_VAR 0 2
14249: PUSH
14250: LD_INT 2
14252: ARRAY
14253: PPUSH
14254: LD_VAR 0 2
14258: PUSH
14259: LD_INT 3
14261: ARRAY
14262: PPUSH
14263: LD_VAR 0 2
14267: PUSH
14268: LD_INT 4
14270: ARRAY
14271: PPUSH
14272: CALL_OW 449
14276: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14277: LD_ADDR_VAR 0 3
14281: PUSH
14282: LD_VAR 0 5
14286: PPUSH
14287: LD_INT 1
14289: PPUSH
14290: CALL_OW 275
14294: PUSH
14295: LD_VAR 0 4
14299: PUSH
14300: LD_INT 1
14302: ARRAY
14303: GREATEREQUAL
14304: PUSH
14305: LD_VAR 0 5
14309: PPUSH
14310: LD_INT 2
14312: PPUSH
14313: CALL_OW 275
14317: PUSH
14318: LD_VAR 0 4
14322: PUSH
14323: LD_INT 2
14325: ARRAY
14326: GREATEREQUAL
14327: AND
14328: PUSH
14329: LD_VAR 0 5
14333: PPUSH
14334: LD_INT 3
14336: PPUSH
14337: CALL_OW 275
14341: PUSH
14342: LD_VAR 0 4
14346: PUSH
14347: LD_INT 3
14349: ARRAY
14350: GREATEREQUAL
14351: AND
14352: ST_TO_ADDR
// end ;
14353: LD_VAR 0 3
14357: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
14358: LD_INT 0
14360: PPUSH
14361: PPUSH
14362: PPUSH
14363: PPUSH
// pom := GetBase ( building ) ;
14364: LD_ADDR_VAR 0 3
14368: PUSH
14369: LD_VAR 0 1
14373: PPUSH
14374: CALL_OW 274
14378: ST_TO_ADDR
// if not pom then
14379: LD_VAR 0 3
14383: NOT
14384: IFFALSE 14388
// exit ;
14386: GO 14558
// btype := GetBType ( building ) ;
14388: LD_ADDR_VAR 0 5
14392: PUSH
14393: LD_VAR 0 1
14397: PPUSH
14398: CALL_OW 266
14402: ST_TO_ADDR
// if btype = b_armoury then
14403: LD_VAR 0 5
14407: PUSH
14408: LD_INT 4
14410: EQUAL
14411: IFFALSE 14421
// btype := b_barracks ;
14413: LD_ADDR_VAR 0 5
14417: PUSH
14418: LD_INT 5
14420: ST_TO_ADDR
// if btype = b_depot then
14421: LD_VAR 0 5
14425: PUSH
14426: LD_INT 0
14428: EQUAL
14429: IFFALSE 14439
// btype := b_warehouse ;
14431: LD_ADDR_VAR 0 5
14435: PUSH
14436: LD_INT 1
14438: ST_TO_ADDR
// if btype = b_workshop then
14439: LD_VAR 0 5
14443: PUSH
14444: LD_INT 2
14446: EQUAL
14447: IFFALSE 14457
// btype := b_factory ;
14449: LD_ADDR_VAR 0 5
14453: PUSH
14454: LD_INT 3
14456: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
14457: LD_ADDR_VAR 0 4
14461: PUSH
14462: LD_VAR 0 5
14466: PPUSH
14467: LD_VAR 0 1
14471: PPUSH
14472: CALL_OW 248
14476: PPUSH
14477: CALL_OW 450
14481: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14482: LD_ADDR_VAR 0 2
14486: PUSH
14487: LD_VAR 0 3
14491: PPUSH
14492: LD_INT 1
14494: PPUSH
14495: CALL_OW 275
14499: PUSH
14500: LD_VAR 0 4
14504: PUSH
14505: LD_INT 1
14507: ARRAY
14508: GREATEREQUAL
14509: PUSH
14510: LD_VAR 0 3
14514: PPUSH
14515: LD_INT 2
14517: PPUSH
14518: CALL_OW 275
14522: PUSH
14523: LD_VAR 0 4
14527: PUSH
14528: LD_INT 2
14530: ARRAY
14531: GREATEREQUAL
14532: AND
14533: PUSH
14534: LD_VAR 0 3
14538: PPUSH
14539: LD_INT 3
14541: PPUSH
14542: CALL_OW 275
14546: PUSH
14547: LD_VAR 0 4
14551: PUSH
14552: LD_INT 3
14554: ARRAY
14555: GREATEREQUAL
14556: AND
14557: ST_TO_ADDR
// end ;
14558: LD_VAR 0 2
14562: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
14563: LD_INT 0
14565: PPUSH
14566: PPUSH
14567: PPUSH
// pom := GetBase ( building ) ;
14568: LD_ADDR_VAR 0 4
14572: PUSH
14573: LD_VAR 0 1
14577: PPUSH
14578: CALL_OW 274
14582: ST_TO_ADDR
// if not pom then
14583: LD_VAR 0 4
14587: NOT
14588: IFFALSE 14592
// exit ;
14590: GO 14693
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
14592: LD_ADDR_VAR 0 5
14596: PUSH
14597: LD_VAR 0 2
14601: PPUSH
14602: LD_VAR 0 1
14606: PPUSH
14607: CALL_OW 248
14611: PPUSH
14612: CALL_OW 450
14616: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14617: LD_ADDR_VAR 0 3
14621: PUSH
14622: LD_VAR 0 4
14626: PPUSH
14627: LD_INT 1
14629: PPUSH
14630: CALL_OW 275
14634: PUSH
14635: LD_VAR 0 5
14639: PUSH
14640: LD_INT 1
14642: ARRAY
14643: GREATEREQUAL
14644: PUSH
14645: LD_VAR 0 4
14649: PPUSH
14650: LD_INT 2
14652: PPUSH
14653: CALL_OW 275
14657: PUSH
14658: LD_VAR 0 5
14662: PUSH
14663: LD_INT 2
14665: ARRAY
14666: GREATEREQUAL
14667: AND
14668: PUSH
14669: LD_VAR 0 4
14673: PPUSH
14674: LD_INT 3
14676: PPUSH
14677: CALL_OW 275
14681: PUSH
14682: LD_VAR 0 5
14686: PUSH
14687: LD_INT 3
14689: ARRAY
14690: GREATEREQUAL
14691: AND
14692: ST_TO_ADDR
// end ;
14693: LD_VAR 0 3
14697: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
14698: LD_INT 0
14700: PPUSH
14701: PPUSH
14702: PPUSH
14703: PPUSH
14704: PPUSH
14705: PPUSH
14706: PPUSH
14707: PPUSH
14708: PPUSH
14709: PPUSH
14710: PPUSH
// result := false ;
14711: LD_ADDR_VAR 0 8
14715: PUSH
14716: LD_INT 0
14718: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
14719: LD_VAR 0 5
14723: NOT
14724: PUSH
14725: LD_VAR 0 1
14729: NOT
14730: OR
14731: PUSH
14732: LD_VAR 0 2
14736: NOT
14737: OR
14738: PUSH
14739: LD_VAR 0 3
14743: NOT
14744: OR
14745: IFFALSE 14749
// exit ;
14747: GO 15563
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
14749: LD_ADDR_VAR 0 14
14753: PUSH
14754: LD_VAR 0 1
14758: PPUSH
14759: LD_VAR 0 2
14763: PPUSH
14764: LD_VAR 0 3
14768: PPUSH
14769: LD_VAR 0 4
14773: PPUSH
14774: LD_VAR 0 5
14778: PUSH
14779: LD_INT 1
14781: ARRAY
14782: PPUSH
14783: CALL_OW 248
14787: PPUSH
14788: LD_INT 0
14790: PPUSH
14791: CALL 16816 0 6
14795: ST_TO_ADDR
// if not hexes then
14796: LD_VAR 0 14
14800: NOT
14801: IFFALSE 14805
// exit ;
14803: GO 15563
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14805: LD_ADDR_VAR 0 17
14809: PUSH
14810: LD_VAR 0 5
14814: PPUSH
14815: LD_INT 22
14817: PUSH
14818: LD_VAR 0 13
14822: PPUSH
14823: CALL_OW 255
14827: PUSH
14828: EMPTY
14829: LIST
14830: LIST
14831: PUSH
14832: LD_INT 2
14834: PUSH
14835: LD_INT 30
14837: PUSH
14838: LD_INT 0
14840: PUSH
14841: EMPTY
14842: LIST
14843: LIST
14844: PUSH
14845: LD_INT 30
14847: PUSH
14848: LD_INT 1
14850: PUSH
14851: EMPTY
14852: LIST
14853: LIST
14854: PUSH
14855: EMPTY
14856: LIST
14857: LIST
14858: LIST
14859: PUSH
14860: EMPTY
14861: LIST
14862: LIST
14863: PPUSH
14864: CALL_OW 72
14868: ST_TO_ADDR
// for i = 1 to hexes do
14869: LD_ADDR_VAR 0 9
14873: PUSH
14874: DOUBLE
14875: LD_INT 1
14877: DEC
14878: ST_TO_ADDR
14879: LD_VAR 0 14
14883: PUSH
14884: FOR_TO
14885: IFFALSE 15561
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
14887: LD_ADDR_VAR 0 13
14891: PUSH
14892: LD_VAR 0 14
14896: PUSH
14897: LD_VAR 0 9
14901: ARRAY
14902: PUSH
14903: LD_INT 1
14905: ARRAY
14906: PPUSH
14907: LD_VAR 0 14
14911: PUSH
14912: LD_VAR 0 9
14916: ARRAY
14917: PUSH
14918: LD_INT 2
14920: ARRAY
14921: PPUSH
14922: CALL_OW 428
14926: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
14927: LD_VAR 0 14
14931: PUSH
14932: LD_VAR 0 9
14936: ARRAY
14937: PUSH
14938: LD_INT 1
14940: ARRAY
14941: PPUSH
14942: LD_VAR 0 14
14946: PUSH
14947: LD_VAR 0 9
14951: ARRAY
14952: PUSH
14953: LD_INT 2
14955: ARRAY
14956: PPUSH
14957: CALL_OW 351
14961: PUSH
14962: LD_VAR 0 14
14966: PUSH
14967: LD_VAR 0 9
14971: ARRAY
14972: PUSH
14973: LD_INT 1
14975: ARRAY
14976: PPUSH
14977: LD_VAR 0 14
14981: PUSH
14982: LD_VAR 0 9
14986: ARRAY
14987: PUSH
14988: LD_INT 2
14990: ARRAY
14991: PPUSH
14992: CALL_OW 488
14996: NOT
14997: OR
14998: PUSH
14999: LD_VAR 0 13
15003: PPUSH
15004: CALL_OW 247
15008: PUSH
15009: LD_INT 3
15011: EQUAL
15012: OR
15013: IFFALSE 15019
// exit ;
15015: POP
15016: POP
15017: GO 15563
// if not tmp then
15019: LD_VAR 0 13
15023: NOT
15024: IFFALSE 15028
// continue ;
15026: GO 14884
// result := true ;
15028: LD_ADDR_VAR 0 8
15032: PUSH
15033: LD_INT 1
15035: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
15036: LD_VAR 0 6
15040: PUSH
15041: LD_VAR 0 13
15045: PPUSH
15046: CALL_OW 247
15050: PUSH
15051: LD_INT 2
15053: EQUAL
15054: AND
15055: PUSH
15056: LD_VAR 0 13
15060: PPUSH
15061: CALL_OW 263
15065: PUSH
15066: LD_INT 1
15068: EQUAL
15069: AND
15070: IFFALSE 15234
// begin if IsDrivenBy ( tmp ) then
15072: LD_VAR 0 13
15076: PPUSH
15077: CALL_OW 311
15081: IFFALSE 15085
// continue ;
15083: GO 14884
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
15085: LD_VAR 0 6
15089: PPUSH
15090: LD_INT 3
15092: PUSH
15093: LD_INT 60
15095: PUSH
15096: EMPTY
15097: LIST
15098: PUSH
15099: EMPTY
15100: LIST
15101: LIST
15102: PUSH
15103: LD_INT 3
15105: PUSH
15106: LD_INT 55
15108: PUSH
15109: EMPTY
15110: LIST
15111: PUSH
15112: EMPTY
15113: LIST
15114: LIST
15115: PUSH
15116: EMPTY
15117: LIST
15118: LIST
15119: PPUSH
15120: CALL_OW 72
15124: IFFALSE 15232
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
15126: LD_ADDR_VAR 0 18
15130: PUSH
15131: LD_VAR 0 6
15135: PPUSH
15136: LD_INT 3
15138: PUSH
15139: LD_INT 60
15141: PUSH
15142: EMPTY
15143: LIST
15144: PUSH
15145: EMPTY
15146: LIST
15147: LIST
15148: PUSH
15149: LD_INT 3
15151: PUSH
15152: LD_INT 55
15154: PUSH
15155: EMPTY
15156: LIST
15157: PUSH
15158: EMPTY
15159: LIST
15160: LIST
15161: PUSH
15162: EMPTY
15163: LIST
15164: LIST
15165: PPUSH
15166: CALL_OW 72
15170: PUSH
15171: LD_INT 1
15173: ARRAY
15174: ST_TO_ADDR
// if IsInUnit ( driver ) then
15175: LD_VAR 0 18
15179: PPUSH
15180: CALL_OW 310
15184: IFFALSE 15195
// ComExit ( driver ) ;
15186: LD_VAR 0 18
15190: PPUSH
15191: CALL 40597 0 1
// AddComEnterUnit ( driver , tmp ) ;
15195: LD_VAR 0 18
15199: PPUSH
15200: LD_VAR 0 13
15204: PPUSH
15205: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
15209: LD_VAR 0 18
15213: PPUSH
15214: LD_VAR 0 7
15218: PPUSH
15219: CALL_OW 173
// AddComExitVehicle ( driver ) ;
15223: LD_VAR 0 18
15227: PPUSH
15228: CALL_OW 181
// end ; continue ;
15232: GO 14884
// end ; if not cleaners or not tmp in cleaners then
15234: LD_VAR 0 6
15238: NOT
15239: PUSH
15240: LD_VAR 0 13
15244: PUSH
15245: LD_VAR 0 6
15249: IN
15250: NOT
15251: OR
15252: IFFALSE 15559
// begin if dep then
15254: LD_VAR 0 17
15258: IFFALSE 15394
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
15260: LD_ADDR_VAR 0 16
15264: PUSH
15265: LD_VAR 0 17
15269: PUSH
15270: LD_INT 1
15272: ARRAY
15273: PPUSH
15274: CALL_OW 250
15278: PPUSH
15279: LD_VAR 0 17
15283: PUSH
15284: LD_INT 1
15286: ARRAY
15287: PPUSH
15288: CALL_OW 254
15292: PPUSH
15293: LD_INT 5
15295: PPUSH
15296: CALL_OW 272
15300: PUSH
15301: LD_VAR 0 17
15305: PUSH
15306: LD_INT 1
15308: ARRAY
15309: PPUSH
15310: CALL_OW 251
15314: PPUSH
15315: LD_VAR 0 17
15319: PUSH
15320: LD_INT 1
15322: ARRAY
15323: PPUSH
15324: CALL_OW 254
15328: PPUSH
15329: LD_INT 5
15331: PPUSH
15332: CALL_OW 273
15336: PUSH
15337: EMPTY
15338: LIST
15339: LIST
15340: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
15341: LD_VAR 0 16
15345: PUSH
15346: LD_INT 1
15348: ARRAY
15349: PPUSH
15350: LD_VAR 0 16
15354: PUSH
15355: LD_INT 2
15357: ARRAY
15358: PPUSH
15359: CALL_OW 488
15363: IFFALSE 15394
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
15365: LD_VAR 0 13
15369: PPUSH
15370: LD_VAR 0 16
15374: PUSH
15375: LD_INT 1
15377: ARRAY
15378: PPUSH
15379: LD_VAR 0 16
15383: PUSH
15384: LD_INT 2
15386: ARRAY
15387: PPUSH
15388: CALL_OW 111
// continue ;
15392: GO 14884
// end ; end ; r := GetDir ( tmp ) ;
15394: LD_ADDR_VAR 0 15
15398: PUSH
15399: LD_VAR 0 13
15403: PPUSH
15404: CALL_OW 254
15408: ST_TO_ADDR
// if r = 5 then
15409: LD_VAR 0 15
15413: PUSH
15414: LD_INT 5
15416: EQUAL
15417: IFFALSE 15427
// r := 0 ;
15419: LD_ADDR_VAR 0 15
15423: PUSH
15424: LD_INT 0
15426: ST_TO_ADDR
// for j = r to 5 do
15427: LD_ADDR_VAR 0 10
15431: PUSH
15432: DOUBLE
15433: LD_VAR 0 15
15437: DEC
15438: ST_TO_ADDR
15439: LD_INT 5
15441: PUSH
15442: FOR_TO
15443: IFFALSE 15557
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
15445: LD_ADDR_VAR 0 11
15449: PUSH
15450: LD_VAR 0 13
15454: PPUSH
15455: CALL_OW 250
15459: PPUSH
15460: LD_VAR 0 10
15464: PPUSH
15465: LD_INT 2
15467: PPUSH
15468: CALL_OW 272
15472: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
15473: LD_ADDR_VAR 0 12
15477: PUSH
15478: LD_VAR 0 13
15482: PPUSH
15483: CALL_OW 251
15487: PPUSH
15488: LD_VAR 0 10
15492: PPUSH
15493: LD_INT 2
15495: PPUSH
15496: CALL_OW 273
15500: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
15501: LD_VAR 0 11
15505: PPUSH
15506: LD_VAR 0 12
15510: PPUSH
15511: CALL_OW 488
15515: PUSH
15516: LD_VAR 0 11
15520: PPUSH
15521: LD_VAR 0 12
15525: PPUSH
15526: CALL_OW 428
15530: NOT
15531: AND
15532: IFFALSE 15555
// begin ComMoveXY ( tmp , _x , _y ) ;
15534: LD_VAR 0 13
15538: PPUSH
15539: LD_VAR 0 11
15543: PPUSH
15544: LD_VAR 0 12
15548: PPUSH
15549: CALL_OW 111
// break ;
15553: GO 15557
// end ; end ;
15555: GO 15442
15557: POP
15558: POP
// end ; end ;
15559: GO 14884
15561: POP
15562: POP
// end ;
15563: LD_VAR 0 8
15567: RET
// export function BuildingTechInvented ( side , btype ) ; begin
15568: LD_INT 0
15570: PPUSH
// result := true ;
15571: LD_ADDR_VAR 0 3
15575: PUSH
15576: LD_INT 1
15578: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
15579: LD_VAR 0 2
15583: PUSH
15584: LD_INT 24
15586: DOUBLE
15587: EQUAL
15588: IFTRUE 15598
15590: LD_INT 33
15592: DOUBLE
15593: EQUAL
15594: IFTRUE 15598
15596: GO 15623
15598: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
15599: LD_ADDR_VAR 0 3
15603: PUSH
15604: LD_INT 32
15606: PPUSH
15607: LD_VAR 0 1
15611: PPUSH
15612: CALL_OW 321
15616: PUSH
15617: LD_INT 2
15619: EQUAL
15620: ST_TO_ADDR
15621: GO 15939
15623: LD_INT 20
15625: DOUBLE
15626: EQUAL
15627: IFTRUE 15631
15629: GO 15656
15631: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
15632: LD_ADDR_VAR 0 3
15636: PUSH
15637: LD_INT 6
15639: PPUSH
15640: LD_VAR 0 1
15644: PPUSH
15645: CALL_OW 321
15649: PUSH
15650: LD_INT 2
15652: EQUAL
15653: ST_TO_ADDR
15654: GO 15939
15656: LD_INT 22
15658: DOUBLE
15659: EQUAL
15660: IFTRUE 15670
15662: LD_INT 36
15664: DOUBLE
15665: EQUAL
15666: IFTRUE 15670
15668: GO 15695
15670: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
15671: LD_ADDR_VAR 0 3
15675: PUSH
15676: LD_INT 15
15678: PPUSH
15679: LD_VAR 0 1
15683: PPUSH
15684: CALL_OW 321
15688: PUSH
15689: LD_INT 2
15691: EQUAL
15692: ST_TO_ADDR
15693: GO 15939
15695: LD_INT 30
15697: DOUBLE
15698: EQUAL
15699: IFTRUE 15703
15701: GO 15728
15703: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
15704: LD_ADDR_VAR 0 3
15708: PUSH
15709: LD_INT 20
15711: PPUSH
15712: LD_VAR 0 1
15716: PPUSH
15717: CALL_OW 321
15721: PUSH
15722: LD_INT 2
15724: EQUAL
15725: ST_TO_ADDR
15726: GO 15939
15728: LD_INT 28
15730: DOUBLE
15731: EQUAL
15732: IFTRUE 15742
15734: LD_INT 21
15736: DOUBLE
15737: EQUAL
15738: IFTRUE 15742
15740: GO 15767
15742: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
15743: LD_ADDR_VAR 0 3
15747: PUSH
15748: LD_INT 21
15750: PPUSH
15751: LD_VAR 0 1
15755: PPUSH
15756: CALL_OW 321
15760: PUSH
15761: LD_INT 2
15763: EQUAL
15764: ST_TO_ADDR
15765: GO 15939
15767: LD_INT 16
15769: DOUBLE
15770: EQUAL
15771: IFTRUE 15775
15773: GO 15800
15775: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
15776: LD_ADDR_VAR 0 3
15780: PUSH
15781: LD_INT 84
15783: PPUSH
15784: LD_VAR 0 1
15788: PPUSH
15789: CALL_OW 321
15793: PUSH
15794: LD_INT 2
15796: EQUAL
15797: ST_TO_ADDR
15798: GO 15939
15800: LD_INT 19
15802: DOUBLE
15803: EQUAL
15804: IFTRUE 15814
15806: LD_INT 23
15808: DOUBLE
15809: EQUAL
15810: IFTRUE 15814
15812: GO 15839
15814: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
15815: LD_ADDR_VAR 0 3
15819: PUSH
15820: LD_INT 83
15822: PPUSH
15823: LD_VAR 0 1
15827: PPUSH
15828: CALL_OW 321
15832: PUSH
15833: LD_INT 2
15835: EQUAL
15836: ST_TO_ADDR
15837: GO 15939
15839: LD_INT 17
15841: DOUBLE
15842: EQUAL
15843: IFTRUE 15847
15845: GO 15872
15847: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
15848: LD_ADDR_VAR 0 3
15852: PUSH
15853: LD_INT 39
15855: PPUSH
15856: LD_VAR 0 1
15860: PPUSH
15861: CALL_OW 321
15865: PUSH
15866: LD_INT 2
15868: EQUAL
15869: ST_TO_ADDR
15870: GO 15939
15872: LD_INT 18
15874: DOUBLE
15875: EQUAL
15876: IFTRUE 15880
15878: GO 15905
15880: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
15881: LD_ADDR_VAR 0 3
15885: PUSH
15886: LD_INT 40
15888: PPUSH
15889: LD_VAR 0 1
15893: PPUSH
15894: CALL_OW 321
15898: PUSH
15899: LD_INT 2
15901: EQUAL
15902: ST_TO_ADDR
15903: GO 15939
15905: LD_INT 27
15907: DOUBLE
15908: EQUAL
15909: IFTRUE 15913
15911: GO 15938
15913: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
15914: LD_ADDR_VAR 0 3
15918: PUSH
15919: LD_INT 35
15921: PPUSH
15922: LD_VAR 0 1
15926: PPUSH
15927: CALL_OW 321
15931: PUSH
15932: LD_INT 2
15934: EQUAL
15935: ST_TO_ADDR
15936: GO 15939
15938: POP
// end ;
15939: LD_VAR 0 3
15943: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
15944: LD_INT 0
15946: PPUSH
15947: PPUSH
15948: PPUSH
15949: PPUSH
15950: PPUSH
15951: PPUSH
15952: PPUSH
15953: PPUSH
15954: PPUSH
15955: PPUSH
15956: PPUSH
// result := false ;
15957: LD_ADDR_VAR 0 6
15961: PUSH
15962: LD_INT 0
15964: ST_TO_ADDR
// if btype = b_depot then
15965: LD_VAR 0 2
15969: PUSH
15970: LD_INT 0
15972: EQUAL
15973: IFFALSE 15985
// begin result := true ;
15975: LD_ADDR_VAR 0 6
15979: PUSH
15980: LD_INT 1
15982: ST_TO_ADDR
// exit ;
15983: GO 16811
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
15985: LD_VAR 0 1
15989: NOT
15990: PUSH
15991: LD_VAR 0 1
15995: PPUSH
15996: CALL_OW 266
16000: PUSH
16001: LD_INT 0
16003: PUSH
16004: LD_INT 1
16006: PUSH
16007: EMPTY
16008: LIST
16009: LIST
16010: IN
16011: NOT
16012: OR
16013: PUSH
16014: LD_VAR 0 2
16018: NOT
16019: OR
16020: PUSH
16021: LD_VAR 0 5
16025: PUSH
16026: LD_INT 0
16028: PUSH
16029: LD_INT 1
16031: PUSH
16032: LD_INT 2
16034: PUSH
16035: LD_INT 3
16037: PUSH
16038: LD_INT 4
16040: PUSH
16041: LD_INT 5
16043: PUSH
16044: EMPTY
16045: LIST
16046: LIST
16047: LIST
16048: LIST
16049: LIST
16050: LIST
16051: IN
16052: NOT
16053: OR
16054: PUSH
16055: LD_VAR 0 3
16059: PPUSH
16060: LD_VAR 0 4
16064: PPUSH
16065: CALL_OW 488
16069: NOT
16070: OR
16071: IFFALSE 16075
// exit ;
16073: GO 16811
// side := GetSide ( depot ) ;
16075: LD_ADDR_VAR 0 9
16079: PUSH
16080: LD_VAR 0 1
16084: PPUSH
16085: CALL_OW 255
16089: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
16090: LD_VAR 0 9
16094: PPUSH
16095: LD_VAR 0 2
16099: PPUSH
16100: CALL 15568 0 2
16104: NOT
16105: IFFALSE 16109
// exit ;
16107: GO 16811
// pom := GetBase ( depot ) ;
16109: LD_ADDR_VAR 0 10
16113: PUSH
16114: LD_VAR 0 1
16118: PPUSH
16119: CALL_OW 274
16123: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
16124: LD_ADDR_VAR 0 11
16128: PUSH
16129: LD_VAR 0 2
16133: PPUSH
16134: LD_VAR 0 1
16138: PPUSH
16139: CALL_OW 248
16143: PPUSH
16144: CALL_OW 450
16148: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
16149: LD_VAR 0 10
16153: PPUSH
16154: LD_INT 1
16156: PPUSH
16157: CALL_OW 275
16161: PUSH
16162: LD_VAR 0 11
16166: PUSH
16167: LD_INT 1
16169: ARRAY
16170: GREATEREQUAL
16171: PUSH
16172: LD_VAR 0 10
16176: PPUSH
16177: LD_INT 2
16179: PPUSH
16180: CALL_OW 275
16184: PUSH
16185: LD_VAR 0 11
16189: PUSH
16190: LD_INT 2
16192: ARRAY
16193: GREATEREQUAL
16194: AND
16195: PUSH
16196: LD_VAR 0 10
16200: PPUSH
16201: LD_INT 3
16203: PPUSH
16204: CALL_OW 275
16208: PUSH
16209: LD_VAR 0 11
16213: PUSH
16214: LD_INT 3
16216: ARRAY
16217: GREATEREQUAL
16218: AND
16219: NOT
16220: IFFALSE 16224
// exit ;
16222: GO 16811
// if GetBType ( depot ) = b_depot then
16224: LD_VAR 0 1
16228: PPUSH
16229: CALL_OW 266
16233: PUSH
16234: LD_INT 0
16236: EQUAL
16237: IFFALSE 16249
// dist := 28 else
16239: LD_ADDR_VAR 0 14
16243: PUSH
16244: LD_INT 28
16246: ST_TO_ADDR
16247: GO 16257
// dist := 36 ;
16249: LD_ADDR_VAR 0 14
16253: PUSH
16254: LD_INT 36
16256: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
16257: LD_VAR 0 1
16261: PPUSH
16262: LD_VAR 0 3
16266: PPUSH
16267: LD_VAR 0 4
16271: PPUSH
16272: CALL_OW 297
16276: PUSH
16277: LD_VAR 0 14
16281: GREATER
16282: IFFALSE 16286
// exit ;
16284: GO 16811
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
16286: LD_ADDR_VAR 0 12
16290: PUSH
16291: LD_VAR 0 2
16295: PPUSH
16296: LD_VAR 0 3
16300: PPUSH
16301: LD_VAR 0 4
16305: PPUSH
16306: LD_VAR 0 5
16310: PPUSH
16311: LD_VAR 0 1
16315: PPUSH
16316: CALL_OW 248
16320: PPUSH
16321: LD_INT 0
16323: PPUSH
16324: CALL 16816 0 6
16328: ST_TO_ADDR
// if not hexes then
16329: LD_VAR 0 12
16333: NOT
16334: IFFALSE 16338
// exit ;
16336: GO 16811
// hex := GetHexInfo ( x , y ) ;
16338: LD_ADDR_VAR 0 15
16342: PUSH
16343: LD_VAR 0 3
16347: PPUSH
16348: LD_VAR 0 4
16352: PPUSH
16353: CALL_OW 546
16357: ST_TO_ADDR
// if hex [ 1 ] then
16358: LD_VAR 0 15
16362: PUSH
16363: LD_INT 1
16365: ARRAY
16366: IFFALSE 16370
// exit ;
16368: GO 16811
// height := hex [ 2 ] ;
16370: LD_ADDR_VAR 0 13
16374: PUSH
16375: LD_VAR 0 15
16379: PUSH
16380: LD_INT 2
16382: ARRAY
16383: ST_TO_ADDR
// for i = 1 to hexes do
16384: LD_ADDR_VAR 0 7
16388: PUSH
16389: DOUBLE
16390: LD_INT 1
16392: DEC
16393: ST_TO_ADDR
16394: LD_VAR 0 12
16398: PUSH
16399: FOR_TO
16400: IFFALSE 16730
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
16402: LD_VAR 0 12
16406: PUSH
16407: LD_VAR 0 7
16411: ARRAY
16412: PUSH
16413: LD_INT 1
16415: ARRAY
16416: PPUSH
16417: LD_VAR 0 12
16421: PUSH
16422: LD_VAR 0 7
16426: ARRAY
16427: PUSH
16428: LD_INT 2
16430: ARRAY
16431: PPUSH
16432: CALL_OW 488
16436: NOT
16437: PUSH
16438: LD_VAR 0 12
16442: PUSH
16443: LD_VAR 0 7
16447: ARRAY
16448: PUSH
16449: LD_INT 1
16451: ARRAY
16452: PPUSH
16453: LD_VAR 0 12
16457: PUSH
16458: LD_VAR 0 7
16462: ARRAY
16463: PUSH
16464: LD_INT 2
16466: ARRAY
16467: PPUSH
16468: CALL_OW 428
16472: PUSH
16473: LD_INT 0
16475: GREATER
16476: OR
16477: PUSH
16478: LD_VAR 0 12
16482: PUSH
16483: LD_VAR 0 7
16487: ARRAY
16488: PUSH
16489: LD_INT 1
16491: ARRAY
16492: PPUSH
16493: LD_VAR 0 12
16497: PUSH
16498: LD_VAR 0 7
16502: ARRAY
16503: PUSH
16504: LD_INT 2
16506: ARRAY
16507: PPUSH
16508: CALL_OW 351
16512: OR
16513: IFFALSE 16519
// exit ;
16515: POP
16516: POP
16517: GO 16811
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
16519: LD_ADDR_VAR 0 8
16523: PUSH
16524: LD_VAR 0 12
16528: PUSH
16529: LD_VAR 0 7
16533: ARRAY
16534: PUSH
16535: LD_INT 1
16537: ARRAY
16538: PPUSH
16539: LD_VAR 0 12
16543: PUSH
16544: LD_VAR 0 7
16548: ARRAY
16549: PUSH
16550: LD_INT 2
16552: ARRAY
16553: PPUSH
16554: CALL_OW 546
16558: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
16559: LD_VAR 0 8
16563: PUSH
16564: LD_INT 1
16566: ARRAY
16567: PUSH
16568: LD_VAR 0 8
16572: PUSH
16573: LD_INT 2
16575: ARRAY
16576: PUSH
16577: LD_VAR 0 13
16581: PUSH
16582: LD_INT 2
16584: PLUS
16585: GREATER
16586: OR
16587: PUSH
16588: LD_VAR 0 8
16592: PUSH
16593: LD_INT 2
16595: ARRAY
16596: PUSH
16597: LD_VAR 0 13
16601: PUSH
16602: LD_INT 2
16604: MINUS
16605: LESS
16606: OR
16607: PUSH
16608: LD_VAR 0 8
16612: PUSH
16613: LD_INT 3
16615: ARRAY
16616: PUSH
16617: LD_INT 0
16619: PUSH
16620: LD_INT 8
16622: PUSH
16623: LD_INT 9
16625: PUSH
16626: LD_INT 10
16628: PUSH
16629: LD_INT 11
16631: PUSH
16632: LD_INT 12
16634: PUSH
16635: LD_INT 13
16637: PUSH
16638: LD_INT 16
16640: PUSH
16641: LD_INT 17
16643: PUSH
16644: LD_INT 18
16646: PUSH
16647: LD_INT 19
16649: PUSH
16650: LD_INT 20
16652: PUSH
16653: LD_INT 21
16655: PUSH
16656: EMPTY
16657: LIST
16658: LIST
16659: LIST
16660: LIST
16661: LIST
16662: LIST
16663: LIST
16664: LIST
16665: LIST
16666: LIST
16667: LIST
16668: LIST
16669: LIST
16670: IN
16671: NOT
16672: OR
16673: PUSH
16674: LD_VAR 0 8
16678: PUSH
16679: LD_INT 5
16681: ARRAY
16682: NOT
16683: OR
16684: PUSH
16685: LD_VAR 0 8
16689: PUSH
16690: LD_INT 6
16692: ARRAY
16693: PUSH
16694: LD_INT 1
16696: PUSH
16697: LD_INT 2
16699: PUSH
16700: LD_INT 7
16702: PUSH
16703: LD_INT 9
16705: PUSH
16706: LD_INT 10
16708: PUSH
16709: LD_INT 11
16711: PUSH
16712: EMPTY
16713: LIST
16714: LIST
16715: LIST
16716: LIST
16717: LIST
16718: LIST
16719: IN
16720: NOT
16721: OR
16722: IFFALSE 16728
// exit ;
16724: POP
16725: POP
16726: GO 16811
// end ;
16728: GO 16399
16730: POP
16731: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
16732: LD_VAR 0 9
16736: PPUSH
16737: LD_VAR 0 3
16741: PPUSH
16742: LD_VAR 0 4
16746: PPUSH
16747: LD_INT 20
16749: PPUSH
16750: CALL 8734 0 4
16754: PUSH
16755: LD_INT 4
16757: ARRAY
16758: IFFALSE 16762
// exit ;
16760: GO 16811
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
16762: LD_VAR 0 2
16766: PUSH
16767: LD_INT 29
16769: PUSH
16770: LD_INT 30
16772: PUSH
16773: EMPTY
16774: LIST
16775: LIST
16776: IN
16777: PUSH
16778: LD_VAR 0 3
16782: PPUSH
16783: LD_VAR 0 4
16787: PPUSH
16788: LD_VAR 0 9
16792: PPUSH
16793: CALL_OW 440
16797: NOT
16798: AND
16799: IFFALSE 16803
// exit ;
16801: GO 16811
// result := true ;
16803: LD_ADDR_VAR 0 6
16807: PUSH
16808: LD_INT 1
16810: ST_TO_ADDR
// end ;
16811: LD_VAR 0 6
16815: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
16816: LD_INT 0
16818: PPUSH
16819: PPUSH
16820: PPUSH
16821: PPUSH
16822: PPUSH
16823: PPUSH
16824: PPUSH
16825: PPUSH
16826: PPUSH
16827: PPUSH
16828: PPUSH
16829: PPUSH
16830: PPUSH
16831: PPUSH
16832: PPUSH
16833: PPUSH
16834: PPUSH
16835: PPUSH
16836: PPUSH
16837: PPUSH
16838: PPUSH
16839: PPUSH
16840: PPUSH
16841: PPUSH
16842: PPUSH
16843: PPUSH
16844: PPUSH
16845: PPUSH
16846: PPUSH
16847: PPUSH
16848: PPUSH
16849: PPUSH
16850: PPUSH
16851: PPUSH
16852: PPUSH
16853: PPUSH
16854: PPUSH
16855: PPUSH
16856: PPUSH
16857: PPUSH
16858: PPUSH
16859: PPUSH
16860: PPUSH
16861: PPUSH
16862: PPUSH
16863: PPUSH
16864: PPUSH
16865: PPUSH
16866: PPUSH
16867: PPUSH
16868: PPUSH
16869: PPUSH
16870: PPUSH
16871: PPUSH
16872: PPUSH
16873: PPUSH
16874: PPUSH
16875: PPUSH
// result = [ ] ;
16876: LD_ADDR_VAR 0 7
16880: PUSH
16881: EMPTY
16882: ST_TO_ADDR
// temp_list = [ ] ;
16883: LD_ADDR_VAR 0 9
16887: PUSH
16888: EMPTY
16889: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
16890: LD_VAR 0 4
16894: PUSH
16895: LD_INT 0
16897: PUSH
16898: LD_INT 1
16900: PUSH
16901: LD_INT 2
16903: PUSH
16904: LD_INT 3
16906: PUSH
16907: LD_INT 4
16909: PUSH
16910: LD_INT 5
16912: PUSH
16913: EMPTY
16914: LIST
16915: LIST
16916: LIST
16917: LIST
16918: LIST
16919: LIST
16920: IN
16921: NOT
16922: PUSH
16923: LD_VAR 0 1
16927: PUSH
16928: LD_INT 0
16930: PUSH
16931: LD_INT 1
16933: PUSH
16934: EMPTY
16935: LIST
16936: LIST
16937: IN
16938: PUSH
16939: LD_VAR 0 5
16943: PUSH
16944: LD_INT 1
16946: PUSH
16947: LD_INT 2
16949: PUSH
16950: LD_INT 3
16952: PUSH
16953: EMPTY
16954: LIST
16955: LIST
16956: LIST
16957: IN
16958: NOT
16959: AND
16960: OR
16961: IFFALSE 16965
// exit ;
16963: GO 35356
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
16965: LD_VAR 0 1
16969: PUSH
16970: LD_INT 6
16972: PUSH
16973: LD_INT 7
16975: PUSH
16976: LD_INT 8
16978: PUSH
16979: LD_INT 13
16981: PUSH
16982: LD_INT 12
16984: PUSH
16985: LD_INT 15
16987: PUSH
16988: LD_INT 11
16990: PUSH
16991: LD_INT 14
16993: PUSH
16994: LD_INT 10
16996: PUSH
16997: EMPTY
16998: LIST
16999: LIST
17000: LIST
17001: LIST
17002: LIST
17003: LIST
17004: LIST
17005: LIST
17006: LIST
17007: IN
17008: IFFALSE 17018
// btype = b_lab ;
17010: LD_ADDR_VAR 0 1
17014: PUSH
17015: LD_INT 6
17017: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
17018: LD_VAR 0 6
17022: PUSH
17023: LD_INT 0
17025: PUSH
17026: LD_INT 1
17028: PUSH
17029: LD_INT 2
17031: PUSH
17032: EMPTY
17033: LIST
17034: LIST
17035: LIST
17036: IN
17037: NOT
17038: PUSH
17039: LD_VAR 0 1
17043: PUSH
17044: LD_INT 0
17046: PUSH
17047: LD_INT 1
17049: PUSH
17050: LD_INT 2
17052: PUSH
17053: LD_INT 3
17055: PUSH
17056: LD_INT 6
17058: PUSH
17059: LD_INT 36
17061: PUSH
17062: LD_INT 4
17064: PUSH
17065: LD_INT 5
17067: PUSH
17068: LD_INT 31
17070: PUSH
17071: LD_INT 32
17073: PUSH
17074: LD_INT 33
17076: PUSH
17077: EMPTY
17078: LIST
17079: LIST
17080: LIST
17081: LIST
17082: LIST
17083: LIST
17084: LIST
17085: LIST
17086: LIST
17087: LIST
17088: LIST
17089: IN
17090: NOT
17091: PUSH
17092: LD_VAR 0 6
17096: PUSH
17097: LD_INT 1
17099: EQUAL
17100: AND
17101: OR
17102: PUSH
17103: LD_VAR 0 1
17107: PUSH
17108: LD_INT 2
17110: PUSH
17111: LD_INT 3
17113: PUSH
17114: EMPTY
17115: LIST
17116: LIST
17117: IN
17118: NOT
17119: PUSH
17120: LD_VAR 0 6
17124: PUSH
17125: LD_INT 2
17127: EQUAL
17128: AND
17129: OR
17130: IFFALSE 17140
// mode = 0 ;
17132: LD_ADDR_VAR 0 6
17136: PUSH
17137: LD_INT 0
17139: ST_TO_ADDR
// case mode of 0 :
17140: LD_VAR 0 6
17144: PUSH
17145: LD_INT 0
17147: DOUBLE
17148: EQUAL
17149: IFTRUE 17153
17151: GO 28606
17153: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
17154: LD_ADDR_VAR 0 11
17158: PUSH
17159: LD_INT 0
17161: PUSH
17162: LD_INT 0
17164: PUSH
17165: EMPTY
17166: LIST
17167: LIST
17168: PUSH
17169: LD_INT 0
17171: PUSH
17172: LD_INT 1
17174: NEG
17175: PUSH
17176: EMPTY
17177: LIST
17178: LIST
17179: PUSH
17180: LD_INT 1
17182: PUSH
17183: LD_INT 0
17185: PUSH
17186: EMPTY
17187: LIST
17188: LIST
17189: PUSH
17190: LD_INT 1
17192: PUSH
17193: LD_INT 1
17195: PUSH
17196: EMPTY
17197: LIST
17198: LIST
17199: PUSH
17200: LD_INT 0
17202: PUSH
17203: LD_INT 1
17205: PUSH
17206: EMPTY
17207: LIST
17208: LIST
17209: PUSH
17210: LD_INT 1
17212: NEG
17213: PUSH
17214: LD_INT 0
17216: PUSH
17217: EMPTY
17218: LIST
17219: LIST
17220: PUSH
17221: LD_INT 1
17223: NEG
17224: PUSH
17225: LD_INT 1
17227: NEG
17228: PUSH
17229: EMPTY
17230: LIST
17231: LIST
17232: PUSH
17233: LD_INT 1
17235: NEG
17236: PUSH
17237: LD_INT 2
17239: NEG
17240: PUSH
17241: EMPTY
17242: LIST
17243: LIST
17244: PUSH
17245: LD_INT 0
17247: PUSH
17248: LD_INT 2
17250: NEG
17251: PUSH
17252: EMPTY
17253: LIST
17254: LIST
17255: PUSH
17256: LD_INT 1
17258: PUSH
17259: LD_INT 1
17261: NEG
17262: PUSH
17263: EMPTY
17264: LIST
17265: LIST
17266: PUSH
17267: LD_INT 1
17269: PUSH
17270: LD_INT 2
17272: PUSH
17273: EMPTY
17274: LIST
17275: LIST
17276: PUSH
17277: LD_INT 0
17279: PUSH
17280: LD_INT 2
17282: PUSH
17283: EMPTY
17284: LIST
17285: LIST
17286: PUSH
17287: LD_INT 1
17289: NEG
17290: PUSH
17291: LD_INT 1
17293: PUSH
17294: EMPTY
17295: LIST
17296: LIST
17297: PUSH
17298: LD_INT 1
17300: PUSH
17301: LD_INT 3
17303: PUSH
17304: EMPTY
17305: LIST
17306: LIST
17307: PUSH
17308: LD_INT 0
17310: PUSH
17311: LD_INT 3
17313: PUSH
17314: EMPTY
17315: LIST
17316: LIST
17317: PUSH
17318: LD_INT 1
17320: NEG
17321: PUSH
17322: LD_INT 2
17324: PUSH
17325: EMPTY
17326: LIST
17327: LIST
17328: PUSH
17329: EMPTY
17330: LIST
17331: LIST
17332: LIST
17333: LIST
17334: LIST
17335: LIST
17336: LIST
17337: LIST
17338: LIST
17339: LIST
17340: LIST
17341: LIST
17342: LIST
17343: LIST
17344: LIST
17345: LIST
17346: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
17347: LD_ADDR_VAR 0 12
17351: PUSH
17352: LD_INT 0
17354: PUSH
17355: LD_INT 0
17357: PUSH
17358: EMPTY
17359: LIST
17360: LIST
17361: PUSH
17362: LD_INT 0
17364: PUSH
17365: LD_INT 1
17367: NEG
17368: PUSH
17369: EMPTY
17370: LIST
17371: LIST
17372: PUSH
17373: LD_INT 1
17375: PUSH
17376: LD_INT 0
17378: PUSH
17379: EMPTY
17380: LIST
17381: LIST
17382: PUSH
17383: LD_INT 1
17385: PUSH
17386: LD_INT 1
17388: PUSH
17389: EMPTY
17390: LIST
17391: LIST
17392: PUSH
17393: LD_INT 0
17395: PUSH
17396: LD_INT 1
17398: PUSH
17399: EMPTY
17400: LIST
17401: LIST
17402: PUSH
17403: LD_INT 1
17405: NEG
17406: PUSH
17407: LD_INT 0
17409: PUSH
17410: EMPTY
17411: LIST
17412: LIST
17413: PUSH
17414: LD_INT 1
17416: NEG
17417: PUSH
17418: LD_INT 1
17420: NEG
17421: PUSH
17422: EMPTY
17423: LIST
17424: LIST
17425: PUSH
17426: LD_INT 1
17428: PUSH
17429: LD_INT 1
17431: NEG
17432: PUSH
17433: EMPTY
17434: LIST
17435: LIST
17436: PUSH
17437: LD_INT 2
17439: PUSH
17440: LD_INT 0
17442: PUSH
17443: EMPTY
17444: LIST
17445: LIST
17446: PUSH
17447: LD_INT 2
17449: PUSH
17450: LD_INT 1
17452: PUSH
17453: EMPTY
17454: LIST
17455: LIST
17456: PUSH
17457: LD_INT 1
17459: NEG
17460: PUSH
17461: LD_INT 1
17463: PUSH
17464: EMPTY
17465: LIST
17466: LIST
17467: PUSH
17468: LD_INT 2
17470: NEG
17471: PUSH
17472: LD_INT 0
17474: PUSH
17475: EMPTY
17476: LIST
17477: LIST
17478: PUSH
17479: LD_INT 2
17481: NEG
17482: PUSH
17483: LD_INT 1
17485: NEG
17486: PUSH
17487: EMPTY
17488: LIST
17489: LIST
17490: PUSH
17491: LD_INT 2
17493: NEG
17494: PUSH
17495: LD_INT 1
17497: PUSH
17498: EMPTY
17499: LIST
17500: LIST
17501: PUSH
17502: LD_INT 3
17504: NEG
17505: PUSH
17506: LD_INT 0
17508: PUSH
17509: EMPTY
17510: LIST
17511: LIST
17512: PUSH
17513: LD_INT 3
17515: NEG
17516: PUSH
17517: LD_INT 1
17519: NEG
17520: PUSH
17521: EMPTY
17522: LIST
17523: LIST
17524: PUSH
17525: EMPTY
17526: LIST
17527: LIST
17528: LIST
17529: LIST
17530: LIST
17531: LIST
17532: LIST
17533: LIST
17534: LIST
17535: LIST
17536: LIST
17537: LIST
17538: LIST
17539: LIST
17540: LIST
17541: LIST
17542: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
17543: LD_ADDR_VAR 0 13
17547: PUSH
17548: LD_INT 0
17550: PUSH
17551: LD_INT 0
17553: PUSH
17554: EMPTY
17555: LIST
17556: LIST
17557: PUSH
17558: LD_INT 0
17560: PUSH
17561: LD_INT 1
17563: NEG
17564: PUSH
17565: EMPTY
17566: LIST
17567: LIST
17568: PUSH
17569: LD_INT 1
17571: PUSH
17572: LD_INT 0
17574: PUSH
17575: EMPTY
17576: LIST
17577: LIST
17578: PUSH
17579: LD_INT 1
17581: PUSH
17582: LD_INT 1
17584: PUSH
17585: EMPTY
17586: LIST
17587: LIST
17588: PUSH
17589: LD_INT 0
17591: PUSH
17592: LD_INT 1
17594: PUSH
17595: EMPTY
17596: LIST
17597: LIST
17598: PUSH
17599: LD_INT 1
17601: NEG
17602: PUSH
17603: LD_INT 0
17605: PUSH
17606: EMPTY
17607: LIST
17608: LIST
17609: PUSH
17610: LD_INT 1
17612: NEG
17613: PUSH
17614: LD_INT 1
17616: NEG
17617: PUSH
17618: EMPTY
17619: LIST
17620: LIST
17621: PUSH
17622: LD_INT 1
17624: NEG
17625: PUSH
17626: LD_INT 2
17628: NEG
17629: PUSH
17630: EMPTY
17631: LIST
17632: LIST
17633: PUSH
17634: LD_INT 2
17636: PUSH
17637: LD_INT 1
17639: PUSH
17640: EMPTY
17641: LIST
17642: LIST
17643: PUSH
17644: LD_INT 2
17646: PUSH
17647: LD_INT 2
17649: PUSH
17650: EMPTY
17651: LIST
17652: LIST
17653: PUSH
17654: LD_INT 1
17656: PUSH
17657: LD_INT 2
17659: PUSH
17660: EMPTY
17661: LIST
17662: LIST
17663: PUSH
17664: LD_INT 2
17666: NEG
17667: PUSH
17668: LD_INT 1
17670: NEG
17671: PUSH
17672: EMPTY
17673: LIST
17674: LIST
17675: PUSH
17676: LD_INT 2
17678: NEG
17679: PUSH
17680: LD_INT 2
17682: NEG
17683: PUSH
17684: EMPTY
17685: LIST
17686: LIST
17687: PUSH
17688: LD_INT 2
17690: NEG
17691: PUSH
17692: LD_INT 3
17694: NEG
17695: PUSH
17696: EMPTY
17697: LIST
17698: LIST
17699: PUSH
17700: LD_INT 3
17702: NEG
17703: PUSH
17704: LD_INT 2
17706: NEG
17707: PUSH
17708: EMPTY
17709: LIST
17710: LIST
17711: PUSH
17712: LD_INT 3
17714: NEG
17715: PUSH
17716: LD_INT 3
17718: NEG
17719: PUSH
17720: EMPTY
17721: LIST
17722: LIST
17723: PUSH
17724: EMPTY
17725: LIST
17726: LIST
17727: LIST
17728: LIST
17729: LIST
17730: LIST
17731: LIST
17732: LIST
17733: LIST
17734: LIST
17735: LIST
17736: LIST
17737: LIST
17738: LIST
17739: LIST
17740: LIST
17741: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
17742: LD_ADDR_VAR 0 14
17746: PUSH
17747: LD_INT 0
17749: PUSH
17750: LD_INT 0
17752: PUSH
17753: EMPTY
17754: LIST
17755: LIST
17756: PUSH
17757: LD_INT 0
17759: PUSH
17760: LD_INT 1
17762: NEG
17763: PUSH
17764: EMPTY
17765: LIST
17766: LIST
17767: PUSH
17768: LD_INT 1
17770: PUSH
17771: LD_INT 0
17773: PUSH
17774: EMPTY
17775: LIST
17776: LIST
17777: PUSH
17778: LD_INT 1
17780: PUSH
17781: LD_INT 1
17783: PUSH
17784: EMPTY
17785: LIST
17786: LIST
17787: PUSH
17788: LD_INT 0
17790: PUSH
17791: LD_INT 1
17793: PUSH
17794: EMPTY
17795: LIST
17796: LIST
17797: PUSH
17798: LD_INT 1
17800: NEG
17801: PUSH
17802: LD_INT 0
17804: PUSH
17805: EMPTY
17806: LIST
17807: LIST
17808: PUSH
17809: LD_INT 1
17811: NEG
17812: PUSH
17813: LD_INT 1
17815: NEG
17816: PUSH
17817: EMPTY
17818: LIST
17819: LIST
17820: PUSH
17821: LD_INT 1
17823: NEG
17824: PUSH
17825: LD_INT 2
17827: NEG
17828: PUSH
17829: EMPTY
17830: LIST
17831: LIST
17832: PUSH
17833: LD_INT 0
17835: PUSH
17836: LD_INT 2
17838: NEG
17839: PUSH
17840: EMPTY
17841: LIST
17842: LIST
17843: PUSH
17844: LD_INT 1
17846: PUSH
17847: LD_INT 1
17849: NEG
17850: PUSH
17851: EMPTY
17852: LIST
17853: LIST
17854: PUSH
17855: LD_INT 1
17857: PUSH
17858: LD_INT 2
17860: PUSH
17861: EMPTY
17862: LIST
17863: LIST
17864: PUSH
17865: LD_INT 0
17867: PUSH
17868: LD_INT 2
17870: PUSH
17871: EMPTY
17872: LIST
17873: LIST
17874: PUSH
17875: LD_INT 1
17877: NEG
17878: PUSH
17879: LD_INT 1
17881: PUSH
17882: EMPTY
17883: LIST
17884: LIST
17885: PUSH
17886: LD_INT 1
17888: NEG
17889: PUSH
17890: LD_INT 3
17892: NEG
17893: PUSH
17894: EMPTY
17895: LIST
17896: LIST
17897: PUSH
17898: LD_INT 0
17900: PUSH
17901: LD_INT 3
17903: NEG
17904: PUSH
17905: EMPTY
17906: LIST
17907: LIST
17908: PUSH
17909: LD_INT 1
17911: PUSH
17912: LD_INT 2
17914: NEG
17915: PUSH
17916: EMPTY
17917: LIST
17918: LIST
17919: PUSH
17920: EMPTY
17921: LIST
17922: LIST
17923: LIST
17924: LIST
17925: LIST
17926: LIST
17927: LIST
17928: LIST
17929: LIST
17930: LIST
17931: LIST
17932: LIST
17933: LIST
17934: LIST
17935: LIST
17936: LIST
17937: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
17938: LD_ADDR_VAR 0 15
17942: PUSH
17943: LD_INT 0
17945: PUSH
17946: LD_INT 0
17948: PUSH
17949: EMPTY
17950: LIST
17951: LIST
17952: PUSH
17953: LD_INT 0
17955: PUSH
17956: LD_INT 1
17958: NEG
17959: PUSH
17960: EMPTY
17961: LIST
17962: LIST
17963: PUSH
17964: LD_INT 1
17966: PUSH
17967: LD_INT 0
17969: PUSH
17970: EMPTY
17971: LIST
17972: LIST
17973: PUSH
17974: LD_INT 1
17976: PUSH
17977: LD_INT 1
17979: PUSH
17980: EMPTY
17981: LIST
17982: LIST
17983: PUSH
17984: LD_INT 0
17986: PUSH
17987: LD_INT 1
17989: PUSH
17990: EMPTY
17991: LIST
17992: LIST
17993: PUSH
17994: LD_INT 1
17996: NEG
17997: PUSH
17998: LD_INT 0
18000: PUSH
18001: EMPTY
18002: LIST
18003: LIST
18004: PUSH
18005: LD_INT 1
18007: NEG
18008: PUSH
18009: LD_INT 1
18011: NEG
18012: PUSH
18013: EMPTY
18014: LIST
18015: LIST
18016: PUSH
18017: LD_INT 1
18019: PUSH
18020: LD_INT 1
18022: NEG
18023: PUSH
18024: EMPTY
18025: LIST
18026: LIST
18027: PUSH
18028: LD_INT 2
18030: PUSH
18031: LD_INT 0
18033: PUSH
18034: EMPTY
18035: LIST
18036: LIST
18037: PUSH
18038: LD_INT 2
18040: PUSH
18041: LD_INT 1
18043: PUSH
18044: EMPTY
18045: LIST
18046: LIST
18047: PUSH
18048: LD_INT 1
18050: NEG
18051: PUSH
18052: LD_INT 1
18054: PUSH
18055: EMPTY
18056: LIST
18057: LIST
18058: PUSH
18059: LD_INT 2
18061: NEG
18062: PUSH
18063: LD_INT 0
18065: PUSH
18066: EMPTY
18067: LIST
18068: LIST
18069: PUSH
18070: LD_INT 2
18072: NEG
18073: PUSH
18074: LD_INT 1
18076: NEG
18077: PUSH
18078: EMPTY
18079: LIST
18080: LIST
18081: PUSH
18082: LD_INT 2
18084: PUSH
18085: LD_INT 1
18087: NEG
18088: PUSH
18089: EMPTY
18090: LIST
18091: LIST
18092: PUSH
18093: LD_INT 3
18095: PUSH
18096: LD_INT 0
18098: PUSH
18099: EMPTY
18100: LIST
18101: LIST
18102: PUSH
18103: LD_INT 3
18105: PUSH
18106: LD_INT 1
18108: PUSH
18109: EMPTY
18110: LIST
18111: LIST
18112: PUSH
18113: EMPTY
18114: LIST
18115: LIST
18116: LIST
18117: LIST
18118: LIST
18119: LIST
18120: LIST
18121: LIST
18122: LIST
18123: LIST
18124: LIST
18125: LIST
18126: LIST
18127: LIST
18128: LIST
18129: LIST
18130: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
18131: LD_ADDR_VAR 0 16
18135: PUSH
18136: LD_INT 0
18138: PUSH
18139: LD_INT 0
18141: PUSH
18142: EMPTY
18143: LIST
18144: LIST
18145: PUSH
18146: LD_INT 0
18148: PUSH
18149: LD_INT 1
18151: NEG
18152: PUSH
18153: EMPTY
18154: LIST
18155: LIST
18156: PUSH
18157: LD_INT 1
18159: PUSH
18160: LD_INT 0
18162: PUSH
18163: EMPTY
18164: LIST
18165: LIST
18166: PUSH
18167: LD_INT 1
18169: PUSH
18170: LD_INT 1
18172: PUSH
18173: EMPTY
18174: LIST
18175: LIST
18176: PUSH
18177: LD_INT 0
18179: PUSH
18180: LD_INT 1
18182: PUSH
18183: EMPTY
18184: LIST
18185: LIST
18186: PUSH
18187: LD_INT 1
18189: NEG
18190: PUSH
18191: LD_INT 0
18193: PUSH
18194: EMPTY
18195: LIST
18196: LIST
18197: PUSH
18198: LD_INT 1
18200: NEG
18201: PUSH
18202: LD_INT 1
18204: NEG
18205: PUSH
18206: EMPTY
18207: LIST
18208: LIST
18209: PUSH
18210: LD_INT 1
18212: NEG
18213: PUSH
18214: LD_INT 2
18216: NEG
18217: PUSH
18218: EMPTY
18219: LIST
18220: LIST
18221: PUSH
18222: LD_INT 2
18224: PUSH
18225: LD_INT 1
18227: PUSH
18228: EMPTY
18229: LIST
18230: LIST
18231: PUSH
18232: LD_INT 2
18234: PUSH
18235: LD_INT 2
18237: PUSH
18238: EMPTY
18239: LIST
18240: LIST
18241: PUSH
18242: LD_INT 1
18244: PUSH
18245: LD_INT 2
18247: PUSH
18248: EMPTY
18249: LIST
18250: LIST
18251: PUSH
18252: LD_INT 2
18254: NEG
18255: PUSH
18256: LD_INT 1
18258: NEG
18259: PUSH
18260: EMPTY
18261: LIST
18262: LIST
18263: PUSH
18264: LD_INT 2
18266: NEG
18267: PUSH
18268: LD_INT 2
18270: NEG
18271: PUSH
18272: EMPTY
18273: LIST
18274: LIST
18275: PUSH
18276: LD_INT 3
18278: PUSH
18279: LD_INT 2
18281: PUSH
18282: EMPTY
18283: LIST
18284: LIST
18285: PUSH
18286: LD_INT 3
18288: PUSH
18289: LD_INT 3
18291: PUSH
18292: EMPTY
18293: LIST
18294: LIST
18295: PUSH
18296: LD_INT 2
18298: PUSH
18299: LD_INT 3
18301: PUSH
18302: EMPTY
18303: LIST
18304: LIST
18305: PUSH
18306: EMPTY
18307: LIST
18308: LIST
18309: LIST
18310: LIST
18311: LIST
18312: LIST
18313: LIST
18314: LIST
18315: LIST
18316: LIST
18317: LIST
18318: LIST
18319: LIST
18320: LIST
18321: LIST
18322: LIST
18323: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18324: LD_ADDR_VAR 0 17
18328: PUSH
18329: LD_INT 0
18331: PUSH
18332: LD_INT 0
18334: PUSH
18335: EMPTY
18336: LIST
18337: LIST
18338: PUSH
18339: LD_INT 0
18341: PUSH
18342: LD_INT 1
18344: NEG
18345: PUSH
18346: EMPTY
18347: LIST
18348: LIST
18349: PUSH
18350: LD_INT 1
18352: PUSH
18353: LD_INT 0
18355: PUSH
18356: EMPTY
18357: LIST
18358: LIST
18359: PUSH
18360: LD_INT 1
18362: PUSH
18363: LD_INT 1
18365: PUSH
18366: EMPTY
18367: LIST
18368: LIST
18369: PUSH
18370: LD_INT 0
18372: PUSH
18373: LD_INT 1
18375: PUSH
18376: EMPTY
18377: LIST
18378: LIST
18379: PUSH
18380: LD_INT 1
18382: NEG
18383: PUSH
18384: LD_INT 0
18386: PUSH
18387: EMPTY
18388: LIST
18389: LIST
18390: PUSH
18391: LD_INT 1
18393: NEG
18394: PUSH
18395: LD_INT 1
18397: NEG
18398: PUSH
18399: EMPTY
18400: LIST
18401: LIST
18402: PUSH
18403: LD_INT 1
18405: NEG
18406: PUSH
18407: LD_INT 2
18409: NEG
18410: PUSH
18411: EMPTY
18412: LIST
18413: LIST
18414: PUSH
18415: LD_INT 0
18417: PUSH
18418: LD_INT 2
18420: NEG
18421: PUSH
18422: EMPTY
18423: LIST
18424: LIST
18425: PUSH
18426: LD_INT 1
18428: PUSH
18429: LD_INT 1
18431: NEG
18432: PUSH
18433: EMPTY
18434: LIST
18435: LIST
18436: PUSH
18437: LD_INT 2
18439: PUSH
18440: LD_INT 0
18442: PUSH
18443: EMPTY
18444: LIST
18445: LIST
18446: PUSH
18447: LD_INT 2
18449: PUSH
18450: LD_INT 1
18452: PUSH
18453: EMPTY
18454: LIST
18455: LIST
18456: PUSH
18457: LD_INT 2
18459: PUSH
18460: LD_INT 2
18462: PUSH
18463: EMPTY
18464: LIST
18465: LIST
18466: PUSH
18467: LD_INT 1
18469: PUSH
18470: LD_INT 2
18472: PUSH
18473: EMPTY
18474: LIST
18475: LIST
18476: PUSH
18477: LD_INT 0
18479: PUSH
18480: LD_INT 2
18482: PUSH
18483: EMPTY
18484: LIST
18485: LIST
18486: PUSH
18487: LD_INT 1
18489: NEG
18490: PUSH
18491: LD_INT 1
18493: PUSH
18494: EMPTY
18495: LIST
18496: LIST
18497: PUSH
18498: LD_INT 2
18500: NEG
18501: PUSH
18502: LD_INT 0
18504: PUSH
18505: EMPTY
18506: LIST
18507: LIST
18508: PUSH
18509: LD_INT 2
18511: NEG
18512: PUSH
18513: LD_INT 1
18515: NEG
18516: PUSH
18517: EMPTY
18518: LIST
18519: LIST
18520: PUSH
18521: LD_INT 2
18523: NEG
18524: PUSH
18525: LD_INT 2
18527: NEG
18528: PUSH
18529: EMPTY
18530: LIST
18531: LIST
18532: PUSH
18533: EMPTY
18534: LIST
18535: LIST
18536: LIST
18537: LIST
18538: LIST
18539: LIST
18540: LIST
18541: LIST
18542: LIST
18543: LIST
18544: LIST
18545: LIST
18546: LIST
18547: LIST
18548: LIST
18549: LIST
18550: LIST
18551: LIST
18552: LIST
18553: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18554: LD_ADDR_VAR 0 18
18558: PUSH
18559: LD_INT 0
18561: PUSH
18562: LD_INT 0
18564: PUSH
18565: EMPTY
18566: LIST
18567: LIST
18568: PUSH
18569: LD_INT 0
18571: PUSH
18572: LD_INT 1
18574: NEG
18575: PUSH
18576: EMPTY
18577: LIST
18578: LIST
18579: PUSH
18580: LD_INT 1
18582: PUSH
18583: LD_INT 0
18585: PUSH
18586: EMPTY
18587: LIST
18588: LIST
18589: PUSH
18590: LD_INT 1
18592: PUSH
18593: LD_INT 1
18595: PUSH
18596: EMPTY
18597: LIST
18598: LIST
18599: PUSH
18600: LD_INT 0
18602: PUSH
18603: LD_INT 1
18605: PUSH
18606: EMPTY
18607: LIST
18608: LIST
18609: PUSH
18610: LD_INT 1
18612: NEG
18613: PUSH
18614: LD_INT 0
18616: PUSH
18617: EMPTY
18618: LIST
18619: LIST
18620: PUSH
18621: LD_INT 1
18623: NEG
18624: PUSH
18625: LD_INT 1
18627: NEG
18628: PUSH
18629: EMPTY
18630: LIST
18631: LIST
18632: PUSH
18633: LD_INT 1
18635: NEG
18636: PUSH
18637: LD_INT 2
18639: NEG
18640: PUSH
18641: EMPTY
18642: LIST
18643: LIST
18644: PUSH
18645: LD_INT 0
18647: PUSH
18648: LD_INT 2
18650: NEG
18651: PUSH
18652: EMPTY
18653: LIST
18654: LIST
18655: PUSH
18656: LD_INT 1
18658: PUSH
18659: LD_INT 1
18661: NEG
18662: PUSH
18663: EMPTY
18664: LIST
18665: LIST
18666: PUSH
18667: LD_INT 2
18669: PUSH
18670: LD_INT 0
18672: PUSH
18673: EMPTY
18674: LIST
18675: LIST
18676: PUSH
18677: LD_INT 2
18679: PUSH
18680: LD_INT 1
18682: PUSH
18683: EMPTY
18684: LIST
18685: LIST
18686: PUSH
18687: LD_INT 2
18689: PUSH
18690: LD_INT 2
18692: PUSH
18693: EMPTY
18694: LIST
18695: LIST
18696: PUSH
18697: LD_INT 1
18699: PUSH
18700: LD_INT 2
18702: PUSH
18703: EMPTY
18704: LIST
18705: LIST
18706: PUSH
18707: LD_INT 0
18709: PUSH
18710: LD_INT 2
18712: PUSH
18713: EMPTY
18714: LIST
18715: LIST
18716: PUSH
18717: LD_INT 1
18719: NEG
18720: PUSH
18721: LD_INT 1
18723: PUSH
18724: EMPTY
18725: LIST
18726: LIST
18727: PUSH
18728: LD_INT 2
18730: NEG
18731: PUSH
18732: LD_INT 0
18734: PUSH
18735: EMPTY
18736: LIST
18737: LIST
18738: PUSH
18739: LD_INT 2
18741: NEG
18742: PUSH
18743: LD_INT 1
18745: NEG
18746: PUSH
18747: EMPTY
18748: LIST
18749: LIST
18750: PUSH
18751: LD_INT 2
18753: NEG
18754: PUSH
18755: LD_INT 2
18757: NEG
18758: PUSH
18759: EMPTY
18760: LIST
18761: LIST
18762: PUSH
18763: EMPTY
18764: LIST
18765: LIST
18766: LIST
18767: LIST
18768: LIST
18769: LIST
18770: LIST
18771: LIST
18772: LIST
18773: LIST
18774: LIST
18775: LIST
18776: LIST
18777: LIST
18778: LIST
18779: LIST
18780: LIST
18781: LIST
18782: LIST
18783: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18784: LD_ADDR_VAR 0 19
18788: PUSH
18789: LD_INT 0
18791: PUSH
18792: LD_INT 0
18794: PUSH
18795: EMPTY
18796: LIST
18797: LIST
18798: PUSH
18799: LD_INT 0
18801: PUSH
18802: LD_INT 1
18804: NEG
18805: PUSH
18806: EMPTY
18807: LIST
18808: LIST
18809: PUSH
18810: LD_INT 1
18812: PUSH
18813: LD_INT 0
18815: PUSH
18816: EMPTY
18817: LIST
18818: LIST
18819: PUSH
18820: LD_INT 1
18822: PUSH
18823: LD_INT 1
18825: PUSH
18826: EMPTY
18827: LIST
18828: LIST
18829: PUSH
18830: LD_INT 0
18832: PUSH
18833: LD_INT 1
18835: PUSH
18836: EMPTY
18837: LIST
18838: LIST
18839: PUSH
18840: LD_INT 1
18842: NEG
18843: PUSH
18844: LD_INT 0
18846: PUSH
18847: EMPTY
18848: LIST
18849: LIST
18850: PUSH
18851: LD_INT 1
18853: NEG
18854: PUSH
18855: LD_INT 1
18857: NEG
18858: PUSH
18859: EMPTY
18860: LIST
18861: LIST
18862: PUSH
18863: LD_INT 1
18865: NEG
18866: PUSH
18867: LD_INT 2
18869: NEG
18870: PUSH
18871: EMPTY
18872: LIST
18873: LIST
18874: PUSH
18875: LD_INT 0
18877: PUSH
18878: LD_INT 2
18880: NEG
18881: PUSH
18882: EMPTY
18883: LIST
18884: LIST
18885: PUSH
18886: LD_INT 1
18888: PUSH
18889: LD_INT 1
18891: NEG
18892: PUSH
18893: EMPTY
18894: LIST
18895: LIST
18896: PUSH
18897: LD_INT 2
18899: PUSH
18900: LD_INT 0
18902: PUSH
18903: EMPTY
18904: LIST
18905: LIST
18906: PUSH
18907: LD_INT 2
18909: PUSH
18910: LD_INT 1
18912: PUSH
18913: EMPTY
18914: LIST
18915: LIST
18916: PUSH
18917: LD_INT 2
18919: PUSH
18920: LD_INT 2
18922: PUSH
18923: EMPTY
18924: LIST
18925: LIST
18926: PUSH
18927: LD_INT 1
18929: PUSH
18930: LD_INT 2
18932: PUSH
18933: EMPTY
18934: LIST
18935: LIST
18936: PUSH
18937: LD_INT 0
18939: PUSH
18940: LD_INT 2
18942: PUSH
18943: EMPTY
18944: LIST
18945: LIST
18946: PUSH
18947: LD_INT 1
18949: NEG
18950: PUSH
18951: LD_INT 1
18953: PUSH
18954: EMPTY
18955: LIST
18956: LIST
18957: PUSH
18958: LD_INT 2
18960: NEG
18961: PUSH
18962: LD_INT 0
18964: PUSH
18965: EMPTY
18966: LIST
18967: LIST
18968: PUSH
18969: LD_INT 2
18971: NEG
18972: PUSH
18973: LD_INT 1
18975: NEG
18976: PUSH
18977: EMPTY
18978: LIST
18979: LIST
18980: PUSH
18981: LD_INT 2
18983: NEG
18984: PUSH
18985: LD_INT 2
18987: NEG
18988: PUSH
18989: EMPTY
18990: LIST
18991: LIST
18992: PUSH
18993: EMPTY
18994: LIST
18995: LIST
18996: LIST
18997: LIST
18998: LIST
18999: LIST
19000: LIST
19001: LIST
19002: LIST
19003: LIST
19004: LIST
19005: LIST
19006: LIST
19007: LIST
19008: LIST
19009: LIST
19010: LIST
19011: LIST
19012: LIST
19013: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19014: LD_ADDR_VAR 0 20
19018: PUSH
19019: LD_INT 0
19021: PUSH
19022: LD_INT 0
19024: PUSH
19025: EMPTY
19026: LIST
19027: LIST
19028: PUSH
19029: LD_INT 0
19031: PUSH
19032: LD_INT 1
19034: NEG
19035: PUSH
19036: EMPTY
19037: LIST
19038: LIST
19039: PUSH
19040: LD_INT 1
19042: PUSH
19043: LD_INT 0
19045: PUSH
19046: EMPTY
19047: LIST
19048: LIST
19049: PUSH
19050: LD_INT 1
19052: PUSH
19053: LD_INT 1
19055: PUSH
19056: EMPTY
19057: LIST
19058: LIST
19059: PUSH
19060: LD_INT 0
19062: PUSH
19063: LD_INT 1
19065: PUSH
19066: EMPTY
19067: LIST
19068: LIST
19069: PUSH
19070: LD_INT 1
19072: NEG
19073: PUSH
19074: LD_INT 0
19076: PUSH
19077: EMPTY
19078: LIST
19079: LIST
19080: PUSH
19081: LD_INT 1
19083: NEG
19084: PUSH
19085: LD_INT 1
19087: NEG
19088: PUSH
19089: EMPTY
19090: LIST
19091: LIST
19092: PUSH
19093: LD_INT 1
19095: NEG
19096: PUSH
19097: LD_INT 2
19099: NEG
19100: PUSH
19101: EMPTY
19102: LIST
19103: LIST
19104: PUSH
19105: LD_INT 0
19107: PUSH
19108: LD_INT 2
19110: NEG
19111: PUSH
19112: EMPTY
19113: LIST
19114: LIST
19115: PUSH
19116: LD_INT 1
19118: PUSH
19119: LD_INT 1
19121: NEG
19122: PUSH
19123: EMPTY
19124: LIST
19125: LIST
19126: PUSH
19127: LD_INT 2
19129: PUSH
19130: LD_INT 0
19132: PUSH
19133: EMPTY
19134: LIST
19135: LIST
19136: PUSH
19137: LD_INT 2
19139: PUSH
19140: LD_INT 1
19142: PUSH
19143: EMPTY
19144: LIST
19145: LIST
19146: PUSH
19147: LD_INT 2
19149: PUSH
19150: LD_INT 2
19152: PUSH
19153: EMPTY
19154: LIST
19155: LIST
19156: PUSH
19157: LD_INT 1
19159: PUSH
19160: LD_INT 2
19162: PUSH
19163: EMPTY
19164: LIST
19165: LIST
19166: PUSH
19167: LD_INT 0
19169: PUSH
19170: LD_INT 2
19172: PUSH
19173: EMPTY
19174: LIST
19175: LIST
19176: PUSH
19177: LD_INT 1
19179: NEG
19180: PUSH
19181: LD_INT 1
19183: PUSH
19184: EMPTY
19185: LIST
19186: LIST
19187: PUSH
19188: LD_INT 2
19190: NEG
19191: PUSH
19192: LD_INT 0
19194: PUSH
19195: EMPTY
19196: LIST
19197: LIST
19198: PUSH
19199: LD_INT 2
19201: NEG
19202: PUSH
19203: LD_INT 1
19205: NEG
19206: PUSH
19207: EMPTY
19208: LIST
19209: LIST
19210: PUSH
19211: LD_INT 2
19213: NEG
19214: PUSH
19215: LD_INT 2
19217: NEG
19218: PUSH
19219: EMPTY
19220: LIST
19221: LIST
19222: PUSH
19223: EMPTY
19224: LIST
19225: LIST
19226: LIST
19227: LIST
19228: LIST
19229: LIST
19230: LIST
19231: LIST
19232: LIST
19233: LIST
19234: LIST
19235: LIST
19236: LIST
19237: LIST
19238: LIST
19239: LIST
19240: LIST
19241: LIST
19242: LIST
19243: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19244: LD_ADDR_VAR 0 21
19248: PUSH
19249: LD_INT 0
19251: PUSH
19252: LD_INT 0
19254: PUSH
19255: EMPTY
19256: LIST
19257: LIST
19258: PUSH
19259: LD_INT 0
19261: PUSH
19262: LD_INT 1
19264: NEG
19265: PUSH
19266: EMPTY
19267: LIST
19268: LIST
19269: PUSH
19270: LD_INT 1
19272: PUSH
19273: LD_INT 0
19275: PUSH
19276: EMPTY
19277: LIST
19278: LIST
19279: PUSH
19280: LD_INT 1
19282: PUSH
19283: LD_INT 1
19285: PUSH
19286: EMPTY
19287: LIST
19288: LIST
19289: PUSH
19290: LD_INT 0
19292: PUSH
19293: LD_INT 1
19295: PUSH
19296: EMPTY
19297: LIST
19298: LIST
19299: PUSH
19300: LD_INT 1
19302: NEG
19303: PUSH
19304: LD_INT 0
19306: PUSH
19307: EMPTY
19308: LIST
19309: LIST
19310: PUSH
19311: LD_INT 1
19313: NEG
19314: PUSH
19315: LD_INT 1
19317: NEG
19318: PUSH
19319: EMPTY
19320: LIST
19321: LIST
19322: PUSH
19323: LD_INT 1
19325: NEG
19326: PUSH
19327: LD_INT 2
19329: NEG
19330: PUSH
19331: EMPTY
19332: LIST
19333: LIST
19334: PUSH
19335: LD_INT 0
19337: PUSH
19338: LD_INT 2
19340: NEG
19341: PUSH
19342: EMPTY
19343: LIST
19344: LIST
19345: PUSH
19346: LD_INT 1
19348: PUSH
19349: LD_INT 1
19351: NEG
19352: PUSH
19353: EMPTY
19354: LIST
19355: LIST
19356: PUSH
19357: LD_INT 2
19359: PUSH
19360: LD_INT 0
19362: PUSH
19363: EMPTY
19364: LIST
19365: LIST
19366: PUSH
19367: LD_INT 2
19369: PUSH
19370: LD_INT 1
19372: PUSH
19373: EMPTY
19374: LIST
19375: LIST
19376: PUSH
19377: LD_INT 2
19379: PUSH
19380: LD_INT 2
19382: PUSH
19383: EMPTY
19384: LIST
19385: LIST
19386: PUSH
19387: LD_INT 1
19389: PUSH
19390: LD_INT 2
19392: PUSH
19393: EMPTY
19394: LIST
19395: LIST
19396: PUSH
19397: LD_INT 0
19399: PUSH
19400: LD_INT 2
19402: PUSH
19403: EMPTY
19404: LIST
19405: LIST
19406: PUSH
19407: LD_INT 1
19409: NEG
19410: PUSH
19411: LD_INT 1
19413: PUSH
19414: EMPTY
19415: LIST
19416: LIST
19417: PUSH
19418: LD_INT 2
19420: NEG
19421: PUSH
19422: LD_INT 0
19424: PUSH
19425: EMPTY
19426: LIST
19427: LIST
19428: PUSH
19429: LD_INT 2
19431: NEG
19432: PUSH
19433: LD_INT 1
19435: NEG
19436: PUSH
19437: EMPTY
19438: LIST
19439: LIST
19440: PUSH
19441: LD_INT 2
19443: NEG
19444: PUSH
19445: LD_INT 2
19447: NEG
19448: PUSH
19449: EMPTY
19450: LIST
19451: LIST
19452: PUSH
19453: EMPTY
19454: LIST
19455: LIST
19456: LIST
19457: LIST
19458: LIST
19459: LIST
19460: LIST
19461: LIST
19462: LIST
19463: LIST
19464: LIST
19465: LIST
19466: LIST
19467: LIST
19468: LIST
19469: LIST
19470: LIST
19471: LIST
19472: LIST
19473: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19474: LD_ADDR_VAR 0 22
19478: PUSH
19479: LD_INT 0
19481: PUSH
19482: LD_INT 0
19484: PUSH
19485: EMPTY
19486: LIST
19487: LIST
19488: PUSH
19489: LD_INT 0
19491: PUSH
19492: LD_INT 1
19494: NEG
19495: PUSH
19496: EMPTY
19497: LIST
19498: LIST
19499: PUSH
19500: LD_INT 1
19502: PUSH
19503: LD_INT 0
19505: PUSH
19506: EMPTY
19507: LIST
19508: LIST
19509: PUSH
19510: LD_INT 1
19512: PUSH
19513: LD_INT 1
19515: PUSH
19516: EMPTY
19517: LIST
19518: LIST
19519: PUSH
19520: LD_INT 0
19522: PUSH
19523: LD_INT 1
19525: PUSH
19526: EMPTY
19527: LIST
19528: LIST
19529: PUSH
19530: LD_INT 1
19532: NEG
19533: PUSH
19534: LD_INT 0
19536: PUSH
19537: EMPTY
19538: LIST
19539: LIST
19540: PUSH
19541: LD_INT 1
19543: NEG
19544: PUSH
19545: LD_INT 1
19547: NEG
19548: PUSH
19549: EMPTY
19550: LIST
19551: LIST
19552: PUSH
19553: LD_INT 1
19555: NEG
19556: PUSH
19557: LD_INT 2
19559: NEG
19560: PUSH
19561: EMPTY
19562: LIST
19563: LIST
19564: PUSH
19565: LD_INT 0
19567: PUSH
19568: LD_INT 2
19570: NEG
19571: PUSH
19572: EMPTY
19573: LIST
19574: LIST
19575: PUSH
19576: LD_INT 1
19578: PUSH
19579: LD_INT 1
19581: NEG
19582: PUSH
19583: EMPTY
19584: LIST
19585: LIST
19586: PUSH
19587: LD_INT 2
19589: PUSH
19590: LD_INT 0
19592: PUSH
19593: EMPTY
19594: LIST
19595: LIST
19596: PUSH
19597: LD_INT 2
19599: PUSH
19600: LD_INT 1
19602: PUSH
19603: EMPTY
19604: LIST
19605: LIST
19606: PUSH
19607: LD_INT 2
19609: PUSH
19610: LD_INT 2
19612: PUSH
19613: EMPTY
19614: LIST
19615: LIST
19616: PUSH
19617: LD_INT 1
19619: PUSH
19620: LD_INT 2
19622: PUSH
19623: EMPTY
19624: LIST
19625: LIST
19626: PUSH
19627: LD_INT 0
19629: PUSH
19630: LD_INT 2
19632: PUSH
19633: EMPTY
19634: LIST
19635: LIST
19636: PUSH
19637: LD_INT 1
19639: NEG
19640: PUSH
19641: LD_INT 1
19643: PUSH
19644: EMPTY
19645: LIST
19646: LIST
19647: PUSH
19648: LD_INT 2
19650: NEG
19651: PUSH
19652: LD_INT 0
19654: PUSH
19655: EMPTY
19656: LIST
19657: LIST
19658: PUSH
19659: LD_INT 2
19661: NEG
19662: PUSH
19663: LD_INT 1
19665: NEG
19666: PUSH
19667: EMPTY
19668: LIST
19669: LIST
19670: PUSH
19671: LD_INT 2
19673: NEG
19674: PUSH
19675: LD_INT 2
19677: NEG
19678: PUSH
19679: EMPTY
19680: LIST
19681: LIST
19682: PUSH
19683: EMPTY
19684: LIST
19685: LIST
19686: LIST
19687: LIST
19688: LIST
19689: LIST
19690: LIST
19691: LIST
19692: LIST
19693: LIST
19694: LIST
19695: LIST
19696: LIST
19697: LIST
19698: LIST
19699: LIST
19700: LIST
19701: LIST
19702: LIST
19703: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
19704: LD_ADDR_VAR 0 23
19708: PUSH
19709: LD_INT 0
19711: PUSH
19712: LD_INT 0
19714: PUSH
19715: EMPTY
19716: LIST
19717: LIST
19718: PUSH
19719: LD_INT 0
19721: PUSH
19722: LD_INT 1
19724: NEG
19725: PUSH
19726: EMPTY
19727: LIST
19728: LIST
19729: PUSH
19730: LD_INT 1
19732: PUSH
19733: LD_INT 0
19735: PUSH
19736: EMPTY
19737: LIST
19738: LIST
19739: PUSH
19740: LD_INT 1
19742: PUSH
19743: LD_INT 1
19745: PUSH
19746: EMPTY
19747: LIST
19748: LIST
19749: PUSH
19750: LD_INT 0
19752: PUSH
19753: LD_INT 1
19755: PUSH
19756: EMPTY
19757: LIST
19758: LIST
19759: PUSH
19760: LD_INT 1
19762: NEG
19763: PUSH
19764: LD_INT 0
19766: PUSH
19767: EMPTY
19768: LIST
19769: LIST
19770: PUSH
19771: LD_INT 1
19773: NEG
19774: PUSH
19775: LD_INT 1
19777: NEG
19778: PUSH
19779: EMPTY
19780: LIST
19781: LIST
19782: PUSH
19783: LD_INT 1
19785: NEG
19786: PUSH
19787: LD_INT 2
19789: NEG
19790: PUSH
19791: EMPTY
19792: LIST
19793: LIST
19794: PUSH
19795: LD_INT 0
19797: PUSH
19798: LD_INT 2
19800: NEG
19801: PUSH
19802: EMPTY
19803: LIST
19804: LIST
19805: PUSH
19806: LD_INT 1
19808: PUSH
19809: LD_INT 1
19811: NEG
19812: PUSH
19813: EMPTY
19814: LIST
19815: LIST
19816: PUSH
19817: LD_INT 2
19819: PUSH
19820: LD_INT 0
19822: PUSH
19823: EMPTY
19824: LIST
19825: LIST
19826: PUSH
19827: LD_INT 2
19829: PUSH
19830: LD_INT 1
19832: PUSH
19833: EMPTY
19834: LIST
19835: LIST
19836: PUSH
19837: LD_INT 2
19839: PUSH
19840: LD_INT 2
19842: PUSH
19843: EMPTY
19844: LIST
19845: LIST
19846: PUSH
19847: LD_INT 1
19849: PUSH
19850: LD_INT 2
19852: PUSH
19853: EMPTY
19854: LIST
19855: LIST
19856: PUSH
19857: LD_INT 0
19859: PUSH
19860: LD_INT 2
19862: PUSH
19863: EMPTY
19864: LIST
19865: LIST
19866: PUSH
19867: LD_INT 1
19869: NEG
19870: PUSH
19871: LD_INT 1
19873: PUSH
19874: EMPTY
19875: LIST
19876: LIST
19877: PUSH
19878: LD_INT 2
19880: NEG
19881: PUSH
19882: LD_INT 0
19884: PUSH
19885: EMPTY
19886: LIST
19887: LIST
19888: PUSH
19889: LD_INT 2
19891: NEG
19892: PUSH
19893: LD_INT 1
19895: NEG
19896: PUSH
19897: EMPTY
19898: LIST
19899: LIST
19900: PUSH
19901: LD_INT 2
19903: NEG
19904: PUSH
19905: LD_INT 2
19907: NEG
19908: PUSH
19909: EMPTY
19910: LIST
19911: LIST
19912: PUSH
19913: LD_INT 2
19915: NEG
19916: PUSH
19917: LD_INT 3
19919: NEG
19920: PUSH
19921: EMPTY
19922: LIST
19923: LIST
19924: PUSH
19925: LD_INT 1
19927: NEG
19928: PUSH
19929: LD_INT 3
19931: NEG
19932: PUSH
19933: EMPTY
19934: LIST
19935: LIST
19936: PUSH
19937: LD_INT 1
19939: PUSH
19940: LD_INT 2
19942: NEG
19943: PUSH
19944: EMPTY
19945: LIST
19946: LIST
19947: PUSH
19948: LD_INT 2
19950: PUSH
19951: LD_INT 1
19953: NEG
19954: PUSH
19955: EMPTY
19956: LIST
19957: LIST
19958: PUSH
19959: EMPTY
19960: LIST
19961: LIST
19962: LIST
19963: LIST
19964: LIST
19965: LIST
19966: LIST
19967: LIST
19968: LIST
19969: LIST
19970: LIST
19971: LIST
19972: LIST
19973: LIST
19974: LIST
19975: LIST
19976: LIST
19977: LIST
19978: LIST
19979: LIST
19980: LIST
19981: LIST
19982: LIST
19983: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
19984: LD_ADDR_VAR 0 24
19988: PUSH
19989: LD_INT 0
19991: PUSH
19992: LD_INT 0
19994: PUSH
19995: EMPTY
19996: LIST
19997: LIST
19998: PUSH
19999: LD_INT 0
20001: PUSH
20002: LD_INT 1
20004: NEG
20005: PUSH
20006: EMPTY
20007: LIST
20008: LIST
20009: PUSH
20010: LD_INT 1
20012: PUSH
20013: LD_INT 0
20015: PUSH
20016: EMPTY
20017: LIST
20018: LIST
20019: PUSH
20020: LD_INT 1
20022: PUSH
20023: LD_INT 1
20025: PUSH
20026: EMPTY
20027: LIST
20028: LIST
20029: PUSH
20030: LD_INT 0
20032: PUSH
20033: LD_INT 1
20035: PUSH
20036: EMPTY
20037: LIST
20038: LIST
20039: PUSH
20040: LD_INT 1
20042: NEG
20043: PUSH
20044: LD_INT 0
20046: PUSH
20047: EMPTY
20048: LIST
20049: LIST
20050: PUSH
20051: LD_INT 1
20053: NEG
20054: PUSH
20055: LD_INT 1
20057: NEG
20058: PUSH
20059: EMPTY
20060: LIST
20061: LIST
20062: PUSH
20063: LD_INT 1
20065: NEG
20066: PUSH
20067: LD_INT 2
20069: NEG
20070: PUSH
20071: EMPTY
20072: LIST
20073: LIST
20074: PUSH
20075: LD_INT 0
20077: PUSH
20078: LD_INT 2
20080: NEG
20081: PUSH
20082: EMPTY
20083: LIST
20084: LIST
20085: PUSH
20086: LD_INT 1
20088: PUSH
20089: LD_INT 1
20091: NEG
20092: PUSH
20093: EMPTY
20094: LIST
20095: LIST
20096: PUSH
20097: LD_INT 2
20099: PUSH
20100: LD_INT 0
20102: PUSH
20103: EMPTY
20104: LIST
20105: LIST
20106: PUSH
20107: LD_INT 2
20109: PUSH
20110: LD_INT 1
20112: PUSH
20113: EMPTY
20114: LIST
20115: LIST
20116: PUSH
20117: LD_INT 2
20119: PUSH
20120: LD_INT 2
20122: PUSH
20123: EMPTY
20124: LIST
20125: LIST
20126: PUSH
20127: LD_INT 1
20129: PUSH
20130: LD_INT 2
20132: PUSH
20133: EMPTY
20134: LIST
20135: LIST
20136: PUSH
20137: LD_INT 0
20139: PUSH
20140: LD_INT 2
20142: PUSH
20143: EMPTY
20144: LIST
20145: LIST
20146: PUSH
20147: LD_INT 1
20149: NEG
20150: PUSH
20151: LD_INT 1
20153: PUSH
20154: EMPTY
20155: LIST
20156: LIST
20157: PUSH
20158: LD_INT 2
20160: NEG
20161: PUSH
20162: LD_INT 0
20164: PUSH
20165: EMPTY
20166: LIST
20167: LIST
20168: PUSH
20169: LD_INT 2
20171: NEG
20172: PUSH
20173: LD_INT 1
20175: NEG
20176: PUSH
20177: EMPTY
20178: LIST
20179: LIST
20180: PUSH
20181: LD_INT 2
20183: NEG
20184: PUSH
20185: LD_INT 2
20187: NEG
20188: PUSH
20189: EMPTY
20190: LIST
20191: LIST
20192: PUSH
20193: LD_INT 1
20195: PUSH
20196: LD_INT 2
20198: NEG
20199: PUSH
20200: EMPTY
20201: LIST
20202: LIST
20203: PUSH
20204: LD_INT 2
20206: PUSH
20207: LD_INT 1
20209: NEG
20210: PUSH
20211: EMPTY
20212: LIST
20213: LIST
20214: PUSH
20215: LD_INT 3
20217: PUSH
20218: LD_INT 1
20220: PUSH
20221: EMPTY
20222: LIST
20223: LIST
20224: PUSH
20225: LD_INT 3
20227: PUSH
20228: LD_INT 2
20230: PUSH
20231: EMPTY
20232: LIST
20233: LIST
20234: PUSH
20235: EMPTY
20236: LIST
20237: LIST
20238: LIST
20239: LIST
20240: LIST
20241: LIST
20242: LIST
20243: LIST
20244: LIST
20245: LIST
20246: LIST
20247: LIST
20248: LIST
20249: LIST
20250: LIST
20251: LIST
20252: LIST
20253: LIST
20254: LIST
20255: LIST
20256: LIST
20257: LIST
20258: LIST
20259: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
20260: LD_ADDR_VAR 0 25
20264: PUSH
20265: LD_INT 0
20267: PUSH
20268: LD_INT 0
20270: PUSH
20271: EMPTY
20272: LIST
20273: LIST
20274: PUSH
20275: LD_INT 0
20277: PUSH
20278: LD_INT 1
20280: NEG
20281: PUSH
20282: EMPTY
20283: LIST
20284: LIST
20285: PUSH
20286: LD_INT 1
20288: PUSH
20289: LD_INT 0
20291: PUSH
20292: EMPTY
20293: LIST
20294: LIST
20295: PUSH
20296: LD_INT 1
20298: PUSH
20299: LD_INT 1
20301: PUSH
20302: EMPTY
20303: LIST
20304: LIST
20305: PUSH
20306: LD_INT 0
20308: PUSH
20309: LD_INT 1
20311: PUSH
20312: EMPTY
20313: LIST
20314: LIST
20315: PUSH
20316: LD_INT 1
20318: NEG
20319: PUSH
20320: LD_INT 0
20322: PUSH
20323: EMPTY
20324: LIST
20325: LIST
20326: PUSH
20327: LD_INT 1
20329: NEG
20330: PUSH
20331: LD_INT 1
20333: NEG
20334: PUSH
20335: EMPTY
20336: LIST
20337: LIST
20338: PUSH
20339: LD_INT 1
20341: NEG
20342: PUSH
20343: LD_INT 2
20345: NEG
20346: PUSH
20347: EMPTY
20348: LIST
20349: LIST
20350: PUSH
20351: LD_INT 0
20353: PUSH
20354: LD_INT 2
20356: NEG
20357: PUSH
20358: EMPTY
20359: LIST
20360: LIST
20361: PUSH
20362: LD_INT 1
20364: PUSH
20365: LD_INT 1
20367: NEG
20368: PUSH
20369: EMPTY
20370: LIST
20371: LIST
20372: PUSH
20373: LD_INT 2
20375: PUSH
20376: LD_INT 0
20378: PUSH
20379: EMPTY
20380: LIST
20381: LIST
20382: PUSH
20383: LD_INT 2
20385: PUSH
20386: LD_INT 1
20388: PUSH
20389: EMPTY
20390: LIST
20391: LIST
20392: PUSH
20393: LD_INT 2
20395: PUSH
20396: LD_INT 2
20398: PUSH
20399: EMPTY
20400: LIST
20401: LIST
20402: PUSH
20403: LD_INT 1
20405: PUSH
20406: LD_INT 2
20408: PUSH
20409: EMPTY
20410: LIST
20411: LIST
20412: PUSH
20413: LD_INT 0
20415: PUSH
20416: LD_INT 2
20418: PUSH
20419: EMPTY
20420: LIST
20421: LIST
20422: PUSH
20423: LD_INT 1
20425: NEG
20426: PUSH
20427: LD_INT 1
20429: PUSH
20430: EMPTY
20431: LIST
20432: LIST
20433: PUSH
20434: LD_INT 2
20436: NEG
20437: PUSH
20438: LD_INT 0
20440: PUSH
20441: EMPTY
20442: LIST
20443: LIST
20444: PUSH
20445: LD_INT 2
20447: NEG
20448: PUSH
20449: LD_INT 1
20451: NEG
20452: PUSH
20453: EMPTY
20454: LIST
20455: LIST
20456: PUSH
20457: LD_INT 2
20459: NEG
20460: PUSH
20461: LD_INT 2
20463: NEG
20464: PUSH
20465: EMPTY
20466: LIST
20467: LIST
20468: PUSH
20469: LD_INT 3
20471: PUSH
20472: LD_INT 1
20474: PUSH
20475: EMPTY
20476: LIST
20477: LIST
20478: PUSH
20479: LD_INT 3
20481: PUSH
20482: LD_INT 2
20484: PUSH
20485: EMPTY
20486: LIST
20487: LIST
20488: PUSH
20489: LD_INT 2
20491: PUSH
20492: LD_INT 3
20494: PUSH
20495: EMPTY
20496: LIST
20497: LIST
20498: PUSH
20499: LD_INT 1
20501: PUSH
20502: LD_INT 3
20504: PUSH
20505: EMPTY
20506: LIST
20507: LIST
20508: PUSH
20509: EMPTY
20510: LIST
20511: LIST
20512: LIST
20513: LIST
20514: LIST
20515: LIST
20516: LIST
20517: LIST
20518: LIST
20519: LIST
20520: LIST
20521: LIST
20522: LIST
20523: LIST
20524: LIST
20525: LIST
20526: LIST
20527: LIST
20528: LIST
20529: LIST
20530: LIST
20531: LIST
20532: LIST
20533: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
20534: LD_ADDR_VAR 0 26
20538: PUSH
20539: LD_INT 0
20541: PUSH
20542: LD_INT 0
20544: PUSH
20545: EMPTY
20546: LIST
20547: LIST
20548: PUSH
20549: LD_INT 0
20551: PUSH
20552: LD_INT 1
20554: NEG
20555: PUSH
20556: EMPTY
20557: LIST
20558: LIST
20559: PUSH
20560: LD_INT 1
20562: PUSH
20563: LD_INT 0
20565: PUSH
20566: EMPTY
20567: LIST
20568: LIST
20569: PUSH
20570: LD_INT 1
20572: PUSH
20573: LD_INT 1
20575: PUSH
20576: EMPTY
20577: LIST
20578: LIST
20579: PUSH
20580: LD_INT 0
20582: PUSH
20583: LD_INT 1
20585: PUSH
20586: EMPTY
20587: LIST
20588: LIST
20589: PUSH
20590: LD_INT 1
20592: NEG
20593: PUSH
20594: LD_INT 0
20596: PUSH
20597: EMPTY
20598: LIST
20599: LIST
20600: PUSH
20601: LD_INT 1
20603: NEG
20604: PUSH
20605: LD_INT 1
20607: NEG
20608: PUSH
20609: EMPTY
20610: LIST
20611: LIST
20612: PUSH
20613: LD_INT 1
20615: NEG
20616: PUSH
20617: LD_INT 2
20619: NEG
20620: PUSH
20621: EMPTY
20622: LIST
20623: LIST
20624: PUSH
20625: LD_INT 0
20627: PUSH
20628: LD_INT 2
20630: NEG
20631: PUSH
20632: EMPTY
20633: LIST
20634: LIST
20635: PUSH
20636: LD_INT 1
20638: PUSH
20639: LD_INT 1
20641: NEG
20642: PUSH
20643: EMPTY
20644: LIST
20645: LIST
20646: PUSH
20647: LD_INT 2
20649: PUSH
20650: LD_INT 0
20652: PUSH
20653: EMPTY
20654: LIST
20655: LIST
20656: PUSH
20657: LD_INT 2
20659: PUSH
20660: LD_INT 1
20662: PUSH
20663: EMPTY
20664: LIST
20665: LIST
20666: PUSH
20667: LD_INT 2
20669: PUSH
20670: LD_INT 2
20672: PUSH
20673: EMPTY
20674: LIST
20675: LIST
20676: PUSH
20677: LD_INT 1
20679: PUSH
20680: LD_INT 2
20682: PUSH
20683: EMPTY
20684: LIST
20685: LIST
20686: PUSH
20687: LD_INT 0
20689: PUSH
20690: LD_INT 2
20692: PUSH
20693: EMPTY
20694: LIST
20695: LIST
20696: PUSH
20697: LD_INT 1
20699: NEG
20700: PUSH
20701: LD_INT 1
20703: PUSH
20704: EMPTY
20705: LIST
20706: LIST
20707: PUSH
20708: LD_INT 2
20710: NEG
20711: PUSH
20712: LD_INT 0
20714: PUSH
20715: EMPTY
20716: LIST
20717: LIST
20718: PUSH
20719: LD_INT 2
20721: NEG
20722: PUSH
20723: LD_INT 1
20725: NEG
20726: PUSH
20727: EMPTY
20728: LIST
20729: LIST
20730: PUSH
20731: LD_INT 2
20733: NEG
20734: PUSH
20735: LD_INT 2
20737: NEG
20738: PUSH
20739: EMPTY
20740: LIST
20741: LIST
20742: PUSH
20743: LD_INT 2
20745: PUSH
20746: LD_INT 3
20748: PUSH
20749: EMPTY
20750: LIST
20751: LIST
20752: PUSH
20753: LD_INT 1
20755: PUSH
20756: LD_INT 3
20758: PUSH
20759: EMPTY
20760: LIST
20761: LIST
20762: PUSH
20763: LD_INT 1
20765: NEG
20766: PUSH
20767: LD_INT 2
20769: PUSH
20770: EMPTY
20771: LIST
20772: LIST
20773: PUSH
20774: LD_INT 2
20776: NEG
20777: PUSH
20778: LD_INT 1
20780: PUSH
20781: EMPTY
20782: LIST
20783: LIST
20784: PUSH
20785: EMPTY
20786: LIST
20787: LIST
20788: LIST
20789: LIST
20790: LIST
20791: LIST
20792: LIST
20793: LIST
20794: LIST
20795: LIST
20796: LIST
20797: LIST
20798: LIST
20799: LIST
20800: LIST
20801: LIST
20802: LIST
20803: LIST
20804: LIST
20805: LIST
20806: LIST
20807: LIST
20808: LIST
20809: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
20810: LD_ADDR_VAR 0 27
20814: PUSH
20815: LD_INT 0
20817: PUSH
20818: LD_INT 0
20820: PUSH
20821: EMPTY
20822: LIST
20823: LIST
20824: PUSH
20825: LD_INT 0
20827: PUSH
20828: LD_INT 1
20830: NEG
20831: PUSH
20832: EMPTY
20833: LIST
20834: LIST
20835: PUSH
20836: LD_INT 1
20838: PUSH
20839: LD_INT 0
20841: PUSH
20842: EMPTY
20843: LIST
20844: LIST
20845: PUSH
20846: LD_INT 1
20848: PUSH
20849: LD_INT 1
20851: PUSH
20852: EMPTY
20853: LIST
20854: LIST
20855: PUSH
20856: LD_INT 0
20858: PUSH
20859: LD_INT 1
20861: PUSH
20862: EMPTY
20863: LIST
20864: LIST
20865: PUSH
20866: LD_INT 1
20868: NEG
20869: PUSH
20870: LD_INT 0
20872: PUSH
20873: EMPTY
20874: LIST
20875: LIST
20876: PUSH
20877: LD_INT 1
20879: NEG
20880: PUSH
20881: LD_INT 1
20883: NEG
20884: PUSH
20885: EMPTY
20886: LIST
20887: LIST
20888: PUSH
20889: LD_INT 1
20891: NEG
20892: PUSH
20893: LD_INT 2
20895: NEG
20896: PUSH
20897: EMPTY
20898: LIST
20899: LIST
20900: PUSH
20901: LD_INT 0
20903: PUSH
20904: LD_INT 2
20906: NEG
20907: PUSH
20908: EMPTY
20909: LIST
20910: LIST
20911: PUSH
20912: LD_INT 1
20914: PUSH
20915: LD_INT 1
20917: NEG
20918: PUSH
20919: EMPTY
20920: LIST
20921: LIST
20922: PUSH
20923: LD_INT 2
20925: PUSH
20926: LD_INT 0
20928: PUSH
20929: EMPTY
20930: LIST
20931: LIST
20932: PUSH
20933: LD_INT 2
20935: PUSH
20936: LD_INT 1
20938: PUSH
20939: EMPTY
20940: LIST
20941: LIST
20942: PUSH
20943: LD_INT 2
20945: PUSH
20946: LD_INT 2
20948: PUSH
20949: EMPTY
20950: LIST
20951: LIST
20952: PUSH
20953: LD_INT 1
20955: PUSH
20956: LD_INT 2
20958: PUSH
20959: EMPTY
20960: LIST
20961: LIST
20962: PUSH
20963: LD_INT 0
20965: PUSH
20966: LD_INT 2
20968: PUSH
20969: EMPTY
20970: LIST
20971: LIST
20972: PUSH
20973: LD_INT 1
20975: NEG
20976: PUSH
20977: LD_INT 1
20979: PUSH
20980: EMPTY
20981: LIST
20982: LIST
20983: PUSH
20984: LD_INT 2
20986: NEG
20987: PUSH
20988: LD_INT 0
20990: PUSH
20991: EMPTY
20992: LIST
20993: LIST
20994: PUSH
20995: LD_INT 2
20997: NEG
20998: PUSH
20999: LD_INT 1
21001: NEG
21002: PUSH
21003: EMPTY
21004: LIST
21005: LIST
21006: PUSH
21007: LD_INT 2
21009: NEG
21010: PUSH
21011: LD_INT 2
21013: NEG
21014: PUSH
21015: EMPTY
21016: LIST
21017: LIST
21018: PUSH
21019: LD_INT 1
21021: NEG
21022: PUSH
21023: LD_INT 2
21025: PUSH
21026: EMPTY
21027: LIST
21028: LIST
21029: PUSH
21030: LD_INT 2
21032: NEG
21033: PUSH
21034: LD_INT 1
21036: PUSH
21037: EMPTY
21038: LIST
21039: LIST
21040: PUSH
21041: LD_INT 3
21043: NEG
21044: PUSH
21045: LD_INT 1
21047: NEG
21048: PUSH
21049: EMPTY
21050: LIST
21051: LIST
21052: PUSH
21053: LD_INT 3
21055: NEG
21056: PUSH
21057: LD_INT 2
21059: NEG
21060: PUSH
21061: EMPTY
21062: LIST
21063: LIST
21064: PUSH
21065: EMPTY
21066: LIST
21067: LIST
21068: LIST
21069: LIST
21070: LIST
21071: LIST
21072: LIST
21073: LIST
21074: LIST
21075: LIST
21076: LIST
21077: LIST
21078: LIST
21079: LIST
21080: LIST
21081: LIST
21082: LIST
21083: LIST
21084: LIST
21085: LIST
21086: LIST
21087: LIST
21088: LIST
21089: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21090: LD_ADDR_VAR 0 28
21094: PUSH
21095: LD_INT 0
21097: PUSH
21098: LD_INT 0
21100: PUSH
21101: EMPTY
21102: LIST
21103: LIST
21104: PUSH
21105: LD_INT 0
21107: PUSH
21108: LD_INT 1
21110: NEG
21111: PUSH
21112: EMPTY
21113: LIST
21114: LIST
21115: PUSH
21116: LD_INT 1
21118: PUSH
21119: LD_INT 0
21121: PUSH
21122: EMPTY
21123: LIST
21124: LIST
21125: PUSH
21126: LD_INT 1
21128: PUSH
21129: LD_INT 1
21131: PUSH
21132: EMPTY
21133: LIST
21134: LIST
21135: PUSH
21136: LD_INT 0
21138: PUSH
21139: LD_INT 1
21141: PUSH
21142: EMPTY
21143: LIST
21144: LIST
21145: PUSH
21146: LD_INT 1
21148: NEG
21149: PUSH
21150: LD_INT 0
21152: PUSH
21153: EMPTY
21154: LIST
21155: LIST
21156: PUSH
21157: LD_INT 1
21159: NEG
21160: PUSH
21161: LD_INT 1
21163: NEG
21164: PUSH
21165: EMPTY
21166: LIST
21167: LIST
21168: PUSH
21169: LD_INT 1
21171: NEG
21172: PUSH
21173: LD_INT 2
21175: NEG
21176: PUSH
21177: EMPTY
21178: LIST
21179: LIST
21180: PUSH
21181: LD_INT 0
21183: PUSH
21184: LD_INT 2
21186: NEG
21187: PUSH
21188: EMPTY
21189: LIST
21190: LIST
21191: PUSH
21192: LD_INT 1
21194: PUSH
21195: LD_INT 1
21197: NEG
21198: PUSH
21199: EMPTY
21200: LIST
21201: LIST
21202: PUSH
21203: LD_INT 2
21205: PUSH
21206: LD_INT 0
21208: PUSH
21209: EMPTY
21210: LIST
21211: LIST
21212: PUSH
21213: LD_INT 2
21215: PUSH
21216: LD_INT 1
21218: PUSH
21219: EMPTY
21220: LIST
21221: LIST
21222: PUSH
21223: LD_INT 2
21225: PUSH
21226: LD_INT 2
21228: PUSH
21229: EMPTY
21230: LIST
21231: LIST
21232: PUSH
21233: LD_INT 1
21235: PUSH
21236: LD_INT 2
21238: PUSH
21239: EMPTY
21240: LIST
21241: LIST
21242: PUSH
21243: LD_INT 0
21245: PUSH
21246: LD_INT 2
21248: PUSH
21249: EMPTY
21250: LIST
21251: LIST
21252: PUSH
21253: LD_INT 1
21255: NEG
21256: PUSH
21257: LD_INT 1
21259: PUSH
21260: EMPTY
21261: LIST
21262: LIST
21263: PUSH
21264: LD_INT 2
21266: NEG
21267: PUSH
21268: LD_INT 0
21270: PUSH
21271: EMPTY
21272: LIST
21273: LIST
21274: PUSH
21275: LD_INT 2
21277: NEG
21278: PUSH
21279: LD_INT 1
21281: NEG
21282: PUSH
21283: EMPTY
21284: LIST
21285: LIST
21286: PUSH
21287: LD_INT 2
21289: NEG
21290: PUSH
21291: LD_INT 2
21293: NEG
21294: PUSH
21295: EMPTY
21296: LIST
21297: LIST
21298: PUSH
21299: LD_INT 2
21301: NEG
21302: PUSH
21303: LD_INT 3
21305: NEG
21306: PUSH
21307: EMPTY
21308: LIST
21309: LIST
21310: PUSH
21311: LD_INT 1
21313: NEG
21314: PUSH
21315: LD_INT 3
21317: NEG
21318: PUSH
21319: EMPTY
21320: LIST
21321: LIST
21322: PUSH
21323: LD_INT 3
21325: NEG
21326: PUSH
21327: LD_INT 1
21329: NEG
21330: PUSH
21331: EMPTY
21332: LIST
21333: LIST
21334: PUSH
21335: LD_INT 3
21337: NEG
21338: PUSH
21339: LD_INT 2
21341: NEG
21342: PUSH
21343: EMPTY
21344: LIST
21345: LIST
21346: PUSH
21347: EMPTY
21348: LIST
21349: LIST
21350: LIST
21351: LIST
21352: LIST
21353: LIST
21354: LIST
21355: LIST
21356: LIST
21357: LIST
21358: LIST
21359: LIST
21360: LIST
21361: LIST
21362: LIST
21363: LIST
21364: LIST
21365: LIST
21366: LIST
21367: LIST
21368: LIST
21369: LIST
21370: LIST
21371: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21372: LD_ADDR_VAR 0 29
21376: PUSH
21377: LD_INT 0
21379: PUSH
21380: LD_INT 0
21382: PUSH
21383: EMPTY
21384: LIST
21385: LIST
21386: PUSH
21387: LD_INT 0
21389: PUSH
21390: LD_INT 1
21392: NEG
21393: PUSH
21394: EMPTY
21395: LIST
21396: LIST
21397: PUSH
21398: LD_INT 1
21400: PUSH
21401: LD_INT 0
21403: PUSH
21404: EMPTY
21405: LIST
21406: LIST
21407: PUSH
21408: LD_INT 1
21410: PUSH
21411: LD_INT 1
21413: PUSH
21414: EMPTY
21415: LIST
21416: LIST
21417: PUSH
21418: LD_INT 0
21420: PUSH
21421: LD_INT 1
21423: PUSH
21424: EMPTY
21425: LIST
21426: LIST
21427: PUSH
21428: LD_INT 1
21430: NEG
21431: PUSH
21432: LD_INT 0
21434: PUSH
21435: EMPTY
21436: LIST
21437: LIST
21438: PUSH
21439: LD_INT 1
21441: NEG
21442: PUSH
21443: LD_INT 1
21445: NEG
21446: PUSH
21447: EMPTY
21448: LIST
21449: LIST
21450: PUSH
21451: LD_INT 1
21453: NEG
21454: PUSH
21455: LD_INT 2
21457: NEG
21458: PUSH
21459: EMPTY
21460: LIST
21461: LIST
21462: PUSH
21463: LD_INT 0
21465: PUSH
21466: LD_INT 2
21468: NEG
21469: PUSH
21470: EMPTY
21471: LIST
21472: LIST
21473: PUSH
21474: LD_INT 1
21476: PUSH
21477: LD_INT 1
21479: NEG
21480: PUSH
21481: EMPTY
21482: LIST
21483: LIST
21484: PUSH
21485: LD_INT 2
21487: PUSH
21488: LD_INT 0
21490: PUSH
21491: EMPTY
21492: LIST
21493: LIST
21494: PUSH
21495: LD_INT 2
21497: PUSH
21498: LD_INT 1
21500: PUSH
21501: EMPTY
21502: LIST
21503: LIST
21504: PUSH
21505: LD_INT 1
21507: PUSH
21508: LD_INT 2
21510: PUSH
21511: EMPTY
21512: LIST
21513: LIST
21514: PUSH
21515: LD_INT 0
21517: PUSH
21518: LD_INT 2
21520: PUSH
21521: EMPTY
21522: LIST
21523: LIST
21524: PUSH
21525: LD_INT 1
21527: NEG
21528: PUSH
21529: LD_INT 1
21531: PUSH
21532: EMPTY
21533: LIST
21534: LIST
21535: PUSH
21536: LD_INT 2
21538: NEG
21539: PUSH
21540: LD_INT 1
21542: NEG
21543: PUSH
21544: EMPTY
21545: LIST
21546: LIST
21547: PUSH
21548: LD_INT 2
21550: NEG
21551: PUSH
21552: LD_INT 2
21554: NEG
21555: PUSH
21556: EMPTY
21557: LIST
21558: LIST
21559: PUSH
21560: LD_INT 2
21562: NEG
21563: PUSH
21564: LD_INT 3
21566: NEG
21567: PUSH
21568: EMPTY
21569: LIST
21570: LIST
21571: PUSH
21572: LD_INT 2
21574: PUSH
21575: LD_INT 1
21577: NEG
21578: PUSH
21579: EMPTY
21580: LIST
21581: LIST
21582: PUSH
21583: LD_INT 3
21585: PUSH
21586: LD_INT 1
21588: PUSH
21589: EMPTY
21590: LIST
21591: LIST
21592: PUSH
21593: LD_INT 1
21595: PUSH
21596: LD_INT 3
21598: PUSH
21599: EMPTY
21600: LIST
21601: LIST
21602: PUSH
21603: LD_INT 1
21605: NEG
21606: PUSH
21607: LD_INT 2
21609: PUSH
21610: EMPTY
21611: LIST
21612: LIST
21613: PUSH
21614: LD_INT 3
21616: NEG
21617: PUSH
21618: LD_INT 2
21620: NEG
21621: PUSH
21622: EMPTY
21623: LIST
21624: LIST
21625: PUSH
21626: EMPTY
21627: LIST
21628: LIST
21629: LIST
21630: LIST
21631: LIST
21632: LIST
21633: LIST
21634: LIST
21635: LIST
21636: LIST
21637: LIST
21638: LIST
21639: LIST
21640: LIST
21641: LIST
21642: LIST
21643: LIST
21644: LIST
21645: LIST
21646: LIST
21647: LIST
21648: LIST
21649: LIST
21650: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21651: LD_ADDR_VAR 0 30
21655: PUSH
21656: LD_INT 0
21658: PUSH
21659: LD_INT 0
21661: PUSH
21662: EMPTY
21663: LIST
21664: LIST
21665: PUSH
21666: LD_INT 0
21668: PUSH
21669: LD_INT 1
21671: NEG
21672: PUSH
21673: EMPTY
21674: LIST
21675: LIST
21676: PUSH
21677: LD_INT 1
21679: PUSH
21680: LD_INT 0
21682: PUSH
21683: EMPTY
21684: LIST
21685: LIST
21686: PUSH
21687: LD_INT 1
21689: PUSH
21690: LD_INT 1
21692: PUSH
21693: EMPTY
21694: LIST
21695: LIST
21696: PUSH
21697: LD_INT 0
21699: PUSH
21700: LD_INT 1
21702: PUSH
21703: EMPTY
21704: LIST
21705: LIST
21706: PUSH
21707: LD_INT 1
21709: NEG
21710: PUSH
21711: LD_INT 0
21713: PUSH
21714: EMPTY
21715: LIST
21716: LIST
21717: PUSH
21718: LD_INT 1
21720: NEG
21721: PUSH
21722: LD_INT 1
21724: NEG
21725: PUSH
21726: EMPTY
21727: LIST
21728: LIST
21729: PUSH
21730: LD_INT 1
21732: NEG
21733: PUSH
21734: LD_INT 2
21736: NEG
21737: PUSH
21738: EMPTY
21739: LIST
21740: LIST
21741: PUSH
21742: LD_INT 0
21744: PUSH
21745: LD_INT 2
21747: NEG
21748: PUSH
21749: EMPTY
21750: LIST
21751: LIST
21752: PUSH
21753: LD_INT 1
21755: PUSH
21756: LD_INT 1
21758: NEG
21759: PUSH
21760: EMPTY
21761: LIST
21762: LIST
21763: PUSH
21764: LD_INT 2
21766: PUSH
21767: LD_INT 0
21769: PUSH
21770: EMPTY
21771: LIST
21772: LIST
21773: PUSH
21774: LD_INT 2
21776: PUSH
21777: LD_INT 1
21779: PUSH
21780: EMPTY
21781: LIST
21782: LIST
21783: PUSH
21784: LD_INT 2
21786: PUSH
21787: LD_INT 2
21789: PUSH
21790: EMPTY
21791: LIST
21792: LIST
21793: PUSH
21794: LD_INT 1
21796: PUSH
21797: LD_INT 2
21799: PUSH
21800: EMPTY
21801: LIST
21802: LIST
21803: PUSH
21804: LD_INT 1
21806: NEG
21807: PUSH
21808: LD_INT 1
21810: PUSH
21811: EMPTY
21812: LIST
21813: LIST
21814: PUSH
21815: LD_INT 2
21817: NEG
21818: PUSH
21819: LD_INT 0
21821: PUSH
21822: EMPTY
21823: LIST
21824: LIST
21825: PUSH
21826: LD_INT 2
21828: NEG
21829: PUSH
21830: LD_INT 1
21832: NEG
21833: PUSH
21834: EMPTY
21835: LIST
21836: LIST
21837: PUSH
21838: LD_INT 1
21840: NEG
21841: PUSH
21842: LD_INT 3
21844: NEG
21845: PUSH
21846: EMPTY
21847: LIST
21848: LIST
21849: PUSH
21850: LD_INT 1
21852: PUSH
21853: LD_INT 2
21855: NEG
21856: PUSH
21857: EMPTY
21858: LIST
21859: LIST
21860: PUSH
21861: LD_INT 3
21863: PUSH
21864: LD_INT 2
21866: PUSH
21867: EMPTY
21868: LIST
21869: LIST
21870: PUSH
21871: LD_INT 2
21873: PUSH
21874: LD_INT 3
21876: PUSH
21877: EMPTY
21878: LIST
21879: LIST
21880: PUSH
21881: LD_INT 2
21883: NEG
21884: PUSH
21885: LD_INT 1
21887: PUSH
21888: EMPTY
21889: LIST
21890: LIST
21891: PUSH
21892: LD_INT 3
21894: NEG
21895: PUSH
21896: LD_INT 1
21898: NEG
21899: PUSH
21900: EMPTY
21901: LIST
21902: LIST
21903: PUSH
21904: EMPTY
21905: LIST
21906: LIST
21907: LIST
21908: LIST
21909: LIST
21910: LIST
21911: LIST
21912: LIST
21913: LIST
21914: LIST
21915: LIST
21916: LIST
21917: LIST
21918: LIST
21919: LIST
21920: LIST
21921: LIST
21922: LIST
21923: LIST
21924: LIST
21925: LIST
21926: LIST
21927: LIST
21928: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21929: LD_ADDR_VAR 0 31
21933: PUSH
21934: LD_INT 0
21936: PUSH
21937: LD_INT 0
21939: PUSH
21940: EMPTY
21941: LIST
21942: LIST
21943: PUSH
21944: LD_INT 0
21946: PUSH
21947: LD_INT 1
21949: NEG
21950: PUSH
21951: EMPTY
21952: LIST
21953: LIST
21954: PUSH
21955: LD_INT 1
21957: PUSH
21958: LD_INT 0
21960: PUSH
21961: EMPTY
21962: LIST
21963: LIST
21964: PUSH
21965: LD_INT 1
21967: PUSH
21968: LD_INT 1
21970: PUSH
21971: EMPTY
21972: LIST
21973: LIST
21974: PUSH
21975: LD_INT 0
21977: PUSH
21978: LD_INT 1
21980: PUSH
21981: EMPTY
21982: LIST
21983: LIST
21984: PUSH
21985: LD_INT 1
21987: NEG
21988: PUSH
21989: LD_INT 0
21991: PUSH
21992: EMPTY
21993: LIST
21994: LIST
21995: PUSH
21996: LD_INT 1
21998: NEG
21999: PUSH
22000: LD_INT 1
22002: NEG
22003: PUSH
22004: EMPTY
22005: LIST
22006: LIST
22007: PUSH
22008: LD_INT 1
22010: NEG
22011: PUSH
22012: LD_INT 2
22014: NEG
22015: PUSH
22016: EMPTY
22017: LIST
22018: LIST
22019: PUSH
22020: LD_INT 1
22022: PUSH
22023: LD_INT 1
22025: NEG
22026: PUSH
22027: EMPTY
22028: LIST
22029: LIST
22030: PUSH
22031: LD_INT 2
22033: PUSH
22034: LD_INT 0
22036: PUSH
22037: EMPTY
22038: LIST
22039: LIST
22040: PUSH
22041: LD_INT 2
22043: PUSH
22044: LD_INT 1
22046: PUSH
22047: EMPTY
22048: LIST
22049: LIST
22050: PUSH
22051: LD_INT 2
22053: PUSH
22054: LD_INT 2
22056: PUSH
22057: EMPTY
22058: LIST
22059: LIST
22060: PUSH
22061: LD_INT 1
22063: PUSH
22064: LD_INT 2
22066: PUSH
22067: EMPTY
22068: LIST
22069: LIST
22070: PUSH
22071: LD_INT 0
22073: PUSH
22074: LD_INT 2
22076: PUSH
22077: EMPTY
22078: LIST
22079: LIST
22080: PUSH
22081: LD_INT 1
22083: NEG
22084: PUSH
22085: LD_INT 1
22087: PUSH
22088: EMPTY
22089: LIST
22090: LIST
22091: PUSH
22092: LD_INT 2
22094: NEG
22095: PUSH
22096: LD_INT 1
22098: NEG
22099: PUSH
22100: EMPTY
22101: LIST
22102: LIST
22103: PUSH
22104: LD_INT 2
22106: NEG
22107: PUSH
22108: LD_INT 2
22110: NEG
22111: PUSH
22112: EMPTY
22113: LIST
22114: LIST
22115: PUSH
22116: LD_INT 2
22118: NEG
22119: PUSH
22120: LD_INT 3
22122: NEG
22123: PUSH
22124: EMPTY
22125: LIST
22126: LIST
22127: PUSH
22128: LD_INT 2
22130: PUSH
22131: LD_INT 1
22133: NEG
22134: PUSH
22135: EMPTY
22136: LIST
22137: LIST
22138: PUSH
22139: LD_INT 3
22141: PUSH
22142: LD_INT 1
22144: PUSH
22145: EMPTY
22146: LIST
22147: LIST
22148: PUSH
22149: LD_INT 1
22151: PUSH
22152: LD_INT 3
22154: PUSH
22155: EMPTY
22156: LIST
22157: LIST
22158: PUSH
22159: LD_INT 1
22161: NEG
22162: PUSH
22163: LD_INT 2
22165: PUSH
22166: EMPTY
22167: LIST
22168: LIST
22169: PUSH
22170: LD_INT 3
22172: NEG
22173: PUSH
22174: LD_INT 2
22176: NEG
22177: PUSH
22178: EMPTY
22179: LIST
22180: LIST
22181: PUSH
22182: EMPTY
22183: LIST
22184: LIST
22185: LIST
22186: LIST
22187: LIST
22188: LIST
22189: LIST
22190: LIST
22191: LIST
22192: LIST
22193: LIST
22194: LIST
22195: LIST
22196: LIST
22197: LIST
22198: LIST
22199: LIST
22200: LIST
22201: LIST
22202: LIST
22203: LIST
22204: LIST
22205: LIST
22206: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22207: LD_ADDR_VAR 0 32
22211: PUSH
22212: LD_INT 0
22214: PUSH
22215: LD_INT 0
22217: PUSH
22218: EMPTY
22219: LIST
22220: LIST
22221: PUSH
22222: LD_INT 0
22224: PUSH
22225: LD_INT 1
22227: NEG
22228: PUSH
22229: EMPTY
22230: LIST
22231: LIST
22232: PUSH
22233: LD_INT 1
22235: PUSH
22236: LD_INT 0
22238: PUSH
22239: EMPTY
22240: LIST
22241: LIST
22242: PUSH
22243: LD_INT 1
22245: PUSH
22246: LD_INT 1
22248: PUSH
22249: EMPTY
22250: LIST
22251: LIST
22252: PUSH
22253: LD_INT 0
22255: PUSH
22256: LD_INT 1
22258: PUSH
22259: EMPTY
22260: LIST
22261: LIST
22262: PUSH
22263: LD_INT 1
22265: NEG
22266: PUSH
22267: LD_INT 0
22269: PUSH
22270: EMPTY
22271: LIST
22272: LIST
22273: PUSH
22274: LD_INT 1
22276: NEG
22277: PUSH
22278: LD_INT 1
22280: NEG
22281: PUSH
22282: EMPTY
22283: LIST
22284: LIST
22285: PUSH
22286: LD_INT 1
22288: NEG
22289: PUSH
22290: LD_INT 2
22292: NEG
22293: PUSH
22294: EMPTY
22295: LIST
22296: LIST
22297: PUSH
22298: LD_INT 0
22300: PUSH
22301: LD_INT 2
22303: NEG
22304: PUSH
22305: EMPTY
22306: LIST
22307: LIST
22308: PUSH
22309: LD_INT 1
22311: PUSH
22312: LD_INT 1
22314: NEG
22315: PUSH
22316: EMPTY
22317: LIST
22318: LIST
22319: PUSH
22320: LD_INT 2
22322: PUSH
22323: LD_INT 1
22325: PUSH
22326: EMPTY
22327: LIST
22328: LIST
22329: PUSH
22330: LD_INT 2
22332: PUSH
22333: LD_INT 2
22335: PUSH
22336: EMPTY
22337: LIST
22338: LIST
22339: PUSH
22340: LD_INT 1
22342: PUSH
22343: LD_INT 2
22345: PUSH
22346: EMPTY
22347: LIST
22348: LIST
22349: PUSH
22350: LD_INT 0
22352: PUSH
22353: LD_INT 2
22355: PUSH
22356: EMPTY
22357: LIST
22358: LIST
22359: PUSH
22360: LD_INT 1
22362: NEG
22363: PUSH
22364: LD_INT 1
22366: PUSH
22367: EMPTY
22368: LIST
22369: LIST
22370: PUSH
22371: LD_INT 2
22373: NEG
22374: PUSH
22375: LD_INT 0
22377: PUSH
22378: EMPTY
22379: LIST
22380: LIST
22381: PUSH
22382: LD_INT 2
22384: NEG
22385: PUSH
22386: LD_INT 1
22388: NEG
22389: PUSH
22390: EMPTY
22391: LIST
22392: LIST
22393: PUSH
22394: LD_INT 1
22396: NEG
22397: PUSH
22398: LD_INT 3
22400: NEG
22401: PUSH
22402: EMPTY
22403: LIST
22404: LIST
22405: PUSH
22406: LD_INT 1
22408: PUSH
22409: LD_INT 2
22411: NEG
22412: PUSH
22413: EMPTY
22414: LIST
22415: LIST
22416: PUSH
22417: LD_INT 3
22419: PUSH
22420: LD_INT 2
22422: PUSH
22423: EMPTY
22424: LIST
22425: LIST
22426: PUSH
22427: LD_INT 2
22429: PUSH
22430: LD_INT 3
22432: PUSH
22433: EMPTY
22434: LIST
22435: LIST
22436: PUSH
22437: LD_INT 2
22439: NEG
22440: PUSH
22441: LD_INT 1
22443: PUSH
22444: EMPTY
22445: LIST
22446: LIST
22447: PUSH
22448: LD_INT 3
22450: NEG
22451: PUSH
22452: LD_INT 1
22454: NEG
22455: PUSH
22456: EMPTY
22457: LIST
22458: LIST
22459: PUSH
22460: EMPTY
22461: LIST
22462: LIST
22463: LIST
22464: LIST
22465: LIST
22466: LIST
22467: LIST
22468: LIST
22469: LIST
22470: LIST
22471: LIST
22472: LIST
22473: LIST
22474: LIST
22475: LIST
22476: LIST
22477: LIST
22478: LIST
22479: LIST
22480: LIST
22481: LIST
22482: LIST
22483: LIST
22484: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22485: LD_ADDR_VAR 0 33
22489: PUSH
22490: LD_INT 0
22492: PUSH
22493: LD_INT 0
22495: PUSH
22496: EMPTY
22497: LIST
22498: LIST
22499: PUSH
22500: LD_INT 0
22502: PUSH
22503: LD_INT 1
22505: NEG
22506: PUSH
22507: EMPTY
22508: LIST
22509: LIST
22510: PUSH
22511: LD_INT 1
22513: PUSH
22514: LD_INT 0
22516: PUSH
22517: EMPTY
22518: LIST
22519: LIST
22520: PUSH
22521: LD_INT 1
22523: PUSH
22524: LD_INT 1
22526: PUSH
22527: EMPTY
22528: LIST
22529: LIST
22530: PUSH
22531: LD_INT 0
22533: PUSH
22534: LD_INT 1
22536: PUSH
22537: EMPTY
22538: LIST
22539: LIST
22540: PUSH
22541: LD_INT 1
22543: NEG
22544: PUSH
22545: LD_INT 0
22547: PUSH
22548: EMPTY
22549: LIST
22550: LIST
22551: PUSH
22552: LD_INT 1
22554: NEG
22555: PUSH
22556: LD_INT 1
22558: NEG
22559: PUSH
22560: EMPTY
22561: LIST
22562: LIST
22563: PUSH
22564: LD_INT 1
22566: NEG
22567: PUSH
22568: LD_INT 2
22570: NEG
22571: PUSH
22572: EMPTY
22573: LIST
22574: LIST
22575: PUSH
22576: LD_INT 1
22578: PUSH
22579: LD_INT 1
22581: NEG
22582: PUSH
22583: EMPTY
22584: LIST
22585: LIST
22586: PUSH
22587: LD_INT 2
22589: PUSH
22590: LD_INT 0
22592: PUSH
22593: EMPTY
22594: LIST
22595: LIST
22596: PUSH
22597: LD_INT 2
22599: PUSH
22600: LD_INT 1
22602: PUSH
22603: EMPTY
22604: LIST
22605: LIST
22606: PUSH
22607: LD_INT 1
22609: PUSH
22610: LD_INT 2
22612: PUSH
22613: EMPTY
22614: LIST
22615: LIST
22616: PUSH
22617: LD_INT 0
22619: PUSH
22620: LD_INT 2
22622: PUSH
22623: EMPTY
22624: LIST
22625: LIST
22626: PUSH
22627: LD_INT 1
22629: NEG
22630: PUSH
22631: LD_INT 1
22633: PUSH
22634: EMPTY
22635: LIST
22636: LIST
22637: PUSH
22638: LD_INT 2
22640: NEG
22641: PUSH
22642: LD_INT 0
22644: PUSH
22645: EMPTY
22646: LIST
22647: LIST
22648: PUSH
22649: LD_INT 2
22651: NEG
22652: PUSH
22653: LD_INT 1
22655: NEG
22656: PUSH
22657: EMPTY
22658: LIST
22659: LIST
22660: PUSH
22661: LD_INT 2
22663: NEG
22664: PUSH
22665: LD_INT 2
22667: NEG
22668: PUSH
22669: EMPTY
22670: LIST
22671: LIST
22672: PUSH
22673: LD_INT 2
22675: NEG
22676: PUSH
22677: LD_INT 3
22679: NEG
22680: PUSH
22681: EMPTY
22682: LIST
22683: LIST
22684: PUSH
22685: LD_INT 2
22687: PUSH
22688: LD_INT 1
22690: NEG
22691: PUSH
22692: EMPTY
22693: LIST
22694: LIST
22695: PUSH
22696: LD_INT 3
22698: PUSH
22699: LD_INT 1
22701: PUSH
22702: EMPTY
22703: LIST
22704: LIST
22705: PUSH
22706: LD_INT 1
22708: PUSH
22709: LD_INT 3
22711: PUSH
22712: EMPTY
22713: LIST
22714: LIST
22715: PUSH
22716: LD_INT 1
22718: NEG
22719: PUSH
22720: LD_INT 2
22722: PUSH
22723: EMPTY
22724: LIST
22725: LIST
22726: PUSH
22727: LD_INT 3
22729: NEG
22730: PUSH
22731: LD_INT 2
22733: NEG
22734: PUSH
22735: EMPTY
22736: LIST
22737: LIST
22738: PUSH
22739: EMPTY
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: LIST
22759: LIST
22760: LIST
22761: LIST
22762: LIST
22763: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22764: LD_ADDR_VAR 0 34
22768: PUSH
22769: LD_INT 0
22771: PUSH
22772: LD_INT 0
22774: PUSH
22775: EMPTY
22776: LIST
22777: LIST
22778: PUSH
22779: LD_INT 0
22781: PUSH
22782: LD_INT 1
22784: NEG
22785: PUSH
22786: EMPTY
22787: LIST
22788: LIST
22789: PUSH
22790: LD_INT 1
22792: PUSH
22793: LD_INT 0
22795: PUSH
22796: EMPTY
22797: LIST
22798: LIST
22799: PUSH
22800: LD_INT 1
22802: PUSH
22803: LD_INT 1
22805: PUSH
22806: EMPTY
22807: LIST
22808: LIST
22809: PUSH
22810: LD_INT 0
22812: PUSH
22813: LD_INT 1
22815: PUSH
22816: EMPTY
22817: LIST
22818: LIST
22819: PUSH
22820: LD_INT 1
22822: NEG
22823: PUSH
22824: LD_INT 0
22826: PUSH
22827: EMPTY
22828: LIST
22829: LIST
22830: PUSH
22831: LD_INT 1
22833: NEG
22834: PUSH
22835: LD_INT 1
22837: NEG
22838: PUSH
22839: EMPTY
22840: LIST
22841: LIST
22842: PUSH
22843: LD_INT 1
22845: NEG
22846: PUSH
22847: LD_INT 2
22849: NEG
22850: PUSH
22851: EMPTY
22852: LIST
22853: LIST
22854: PUSH
22855: LD_INT 0
22857: PUSH
22858: LD_INT 2
22860: NEG
22861: PUSH
22862: EMPTY
22863: LIST
22864: LIST
22865: PUSH
22866: LD_INT 1
22868: PUSH
22869: LD_INT 1
22871: NEG
22872: PUSH
22873: EMPTY
22874: LIST
22875: LIST
22876: PUSH
22877: LD_INT 2
22879: PUSH
22880: LD_INT 1
22882: PUSH
22883: EMPTY
22884: LIST
22885: LIST
22886: PUSH
22887: LD_INT 2
22889: PUSH
22890: LD_INT 2
22892: PUSH
22893: EMPTY
22894: LIST
22895: LIST
22896: PUSH
22897: LD_INT 1
22899: PUSH
22900: LD_INT 2
22902: PUSH
22903: EMPTY
22904: LIST
22905: LIST
22906: PUSH
22907: LD_INT 1
22909: NEG
22910: PUSH
22911: LD_INT 1
22913: PUSH
22914: EMPTY
22915: LIST
22916: LIST
22917: PUSH
22918: LD_INT 2
22920: NEG
22921: PUSH
22922: LD_INT 0
22924: PUSH
22925: EMPTY
22926: LIST
22927: LIST
22928: PUSH
22929: LD_INT 2
22931: NEG
22932: PUSH
22933: LD_INT 1
22935: NEG
22936: PUSH
22937: EMPTY
22938: LIST
22939: LIST
22940: PUSH
22941: LD_INT 2
22943: NEG
22944: PUSH
22945: LD_INT 2
22947: NEG
22948: PUSH
22949: EMPTY
22950: LIST
22951: LIST
22952: PUSH
22953: LD_INT 1
22955: NEG
22956: PUSH
22957: LD_INT 3
22959: NEG
22960: PUSH
22961: EMPTY
22962: LIST
22963: LIST
22964: PUSH
22965: LD_INT 1
22967: PUSH
22968: LD_INT 2
22970: NEG
22971: PUSH
22972: EMPTY
22973: LIST
22974: LIST
22975: PUSH
22976: LD_INT 3
22978: PUSH
22979: LD_INT 2
22981: PUSH
22982: EMPTY
22983: LIST
22984: LIST
22985: PUSH
22986: LD_INT 2
22988: PUSH
22989: LD_INT 3
22991: PUSH
22992: EMPTY
22993: LIST
22994: LIST
22995: PUSH
22996: LD_INT 2
22998: NEG
22999: PUSH
23000: LD_INT 1
23002: PUSH
23003: EMPTY
23004: LIST
23005: LIST
23006: PUSH
23007: LD_INT 3
23009: NEG
23010: PUSH
23011: LD_INT 1
23013: NEG
23014: PUSH
23015: EMPTY
23016: LIST
23017: LIST
23018: PUSH
23019: EMPTY
23020: LIST
23021: LIST
23022: LIST
23023: LIST
23024: LIST
23025: LIST
23026: LIST
23027: LIST
23028: LIST
23029: LIST
23030: LIST
23031: LIST
23032: LIST
23033: LIST
23034: LIST
23035: LIST
23036: LIST
23037: LIST
23038: LIST
23039: LIST
23040: LIST
23041: LIST
23042: LIST
23043: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23044: LD_ADDR_VAR 0 35
23048: PUSH
23049: LD_INT 0
23051: PUSH
23052: LD_INT 0
23054: PUSH
23055: EMPTY
23056: LIST
23057: LIST
23058: PUSH
23059: LD_INT 0
23061: PUSH
23062: LD_INT 1
23064: NEG
23065: PUSH
23066: EMPTY
23067: LIST
23068: LIST
23069: PUSH
23070: LD_INT 1
23072: PUSH
23073: LD_INT 0
23075: PUSH
23076: EMPTY
23077: LIST
23078: LIST
23079: PUSH
23080: LD_INT 1
23082: PUSH
23083: LD_INT 1
23085: PUSH
23086: EMPTY
23087: LIST
23088: LIST
23089: PUSH
23090: LD_INT 0
23092: PUSH
23093: LD_INT 1
23095: PUSH
23096: EMPTY
23097: LIST
23098: LIST
23099: PUSH
23100: LD_INT 1
23102: NEG
23103: PUSH
23104: LD_INT 0
23106: PUSH
23107: EMPTY
23108: LIST
23109: LIST
23110: PUSH
23111: LD_INT 1
23113: NEG
23114: PUSH
23115: LD_INT 1
23117: NEG
23118: PUSH
23119: EMPTY
23120: LIST
23121: LIST
23122: PUSH
23123: LD_INT 2
23125: PUSH
23126: LD_INT 1
23128: PUSH
23129: EMPTY
23130: LIST
23131: LIST
23132: PUSH
23133: LD_INT 2
23135: NEG
23136: PUSH
23137: LD_INT 1
23139: NEG
23140: PUSH
23141: EMPTY
23142: LIST
23143: LIST
23144: PUSH
23145: EMPTY
23146: LIST
23147: LIST
23148: LIST
23149: LIST
23150: LIST
23151: LIST
23152: LIST
23153: LIST
23154: LIST
23155: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23156: LD_ADDR_VAR 0 36
23160: PUSH
23161: LD_INT 0
23163: PUSH
23164: LD_INT 0
23166: PUSH
23167: EMPTY
23168: LIST
23169: LIST
23170: PUSH
23171: LD_INT 0
23173: PUSH
23174: LD_INT 1
23176: NEG
23177: PUSH
23178: EMPTY
23179: LIST
23180: LIST
23181: PUSH
23182: LD_INT 1
23184: PUSH
23185: LD_INT 0
23187: PUSH
23188: EMPTY
23189: LIST
23190: LIST
23191: PUSH
23192: LD_INT 1
23194: PUSH
23195: LD_INT 1
23197: PUSH
23198: EMPTY
23199: LIST
23200: LIST
23201: PUSH
23202: LD_INT 0
23204: PUSH
23205: LD_INT 1
23207: PUSH
23208: EMPTY
23209: LIST
23210: LIST
23211: PUSH
23212: LD_INT 1
23214: NEG
23215: PUSH
23216: LD_INT 0
23218: PUSH
23219: EMPTY
23220: LIST
23221: LIST
23222: PUSH
23223: LD_INT 1
23225: NEG
23226: PUSH
23227: LD_INT 1
23229: NEG
23230: PUSH
23231: EMPTY
23232: LIST
23233: LIST
23234: PUSH
23235: LD_INT 1
23237: NEG
23238: PUSH
23239: LD_INT 2
23241: NEG
23242: PUSH
23243: EMPTY
23244: LIST
23245: LIST
23246: PUSH
23247: LD_INT 1
23249: PUSH
23250: LD_INT 2
23252: PUSH
23253: EMPTY
23254: LIST
23255: LIST
23256: PUSH
23257: EMPTY
23258: LIST
23259: LIST
23260: LIST
23261: LIST
23262: LIST
23263: LIST
23264: LIST
23265: LIST
23266: LIST
23267: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
23268: LD_ADDR_VAR 0 37
23272: PUSH
23273: LD_INT 0
23275: PUSH
23276: LD_INT 0
23278: PUSH
23279: EMPTY
23280: LIST
23281: LIST
23282: PUSH
23283: LD_INT 0
23285: PUSH
23286: LD_INT 1
23288: NEG
23289: PUSH
23290: EMPTY
23291: LIST
23292: LIST
23293: PUSH
23294: LD_INT 1
23296: PUSH
23297: LD_INT 0
23299: PUSH
23300: EMPTY
23301: LIST
23302: LIST
23303: PUSH
23304: LD_INT 1
23306: PUSH
23307: LD_INT 1
23309: PUSH
23310: EMPTY
23311: LIST
23312: LIST
23313: PUSH
23314: LD_INT 0
23316: PUSH
23317: LD_INT 1
23319: PUSH
23320: EMPTY
23321: LIST
23322: LIST
23323: PUSH
23324: LD_INT 1
23326: NEG
23327: PUSH
23328: LD_INT 0
23330: PUSH
23331: EMPTY
23332: LIST
23333: LIST
23334: PUSH
23335: LD_INT 1
23337: NEG
23338: PUSH
23339: LD_INT 1
23341: NEG
23342: PUSH
23343: EMPTY
23344: LIST
23345: LIST
23346: PUSH
23347: LD_INT 1
23349: PUSH
23350: LD_INT 1
23352: NEG
23353: PUSH
23354: EMPTY
23355: LIST
23356: LIST
23357: PUSH
23358: LD_INT 1
23360: NEG
23361: PUSH
23362: LD_INT 1
23364: PUSH
23365: EMPTY
23366: LIST
23367: LIST
23368: PUSH
23369: EMPTY
23370: LIST
23371: LIST
23372: LIST
23373: LIST
23374: LIST
23375: LIST
23376: LIST
23377: LIST
23378: LIST
23379: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23380: LD_ADDR_VAR 0 38
23384: PUSH
23385: LD_INT 0
23387: PUSH
23388: LD_INT 0
23390: PUSH
23391: EMPTY
23392: LIST
23393: LIST
23394: PUSH
23395: LD_INT 0
23397: PUSH
23398: LD_INT 1
23400: NEG
23401: PUSH
23402: EMPTY
23403: LIST
23404: LIST
23405: PUSH
23406: LD_INT 1
23408: PUSH
23409: LD_INT 0
23411: PUSH
23412: EMPTY
23413: LIST
23414: LIST
23415: PUSH
23416: LD_INT 1
23418: PUSH
23419: LD_INT 1
23421: PUSH
23422: EMPTY
23423: LIST
23424: LIST
23425: PUSH
23426: LD_INT 0
23428: PUSH
23429: LD_INT 1
23431: PUSH
23432: EMPTY
23433: LIST
23434: LIST
23435: PUSH
23436: LD_INT 1
23438: NEG
23439: PUSH
23440: LD_INT 0
23442: PUSH
23443: EMPTY
23444: LIST
23445: LIST
23446: PUSH
23447: LD_INT 1
23449: NEG
23450: PUSH
23451: LD_INT 1
23453: NEG
23454: PUSH
23455: EMPTY
23456: LIST
23457: LIST
23458: PUSH
23459: LD_INT 2
23461: PUSH
23462: LD_INT 1
23464: PUSH
23465: EMPTY
23466: LIST
23467: LIST
23468: PUSH
23469: LD_INT 2
23471: NEG
23472: PUSH
23473: LD_INT 1
23475: NEG
23476: PUSH
23477: EMPTY
23478: LIST
23479: LIST
23480: PUSH
23481: EMPTY
23482: LIST
23483: LIST
23484: LIST
23485: LIST
23486: LIST
23487: LIST
23488: LIST
23489: LIST
23490: LIST
23491: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23492: LD_ADDR_VAR 0 39
23496: PUSH
23497: LD_INT 0
23499: PUSH
23500: LD_INT 0
23502: PUSH
23503: EMPTY
23504: LIST
23505: LIST
23506: PUSH
23507: LD_INT 0
23509: PUSH
23510: LD_INT 1
23512: NEG
23513: PUSH
23514: EMPTY
23515: LIST
23516: LIST
23517: PUSH
23518: LD_INT 1
23520: PUSH
23521: LD_INT 0
23523: PUSH
23524: EMPTY
23525: LIST
23526: LIST
23527: PUSH
23528: LD_INT 1
23530: PUSH
23531: LD_INT 1
23533: PUSH
23534: EMPTY
23535: LIST
23536: LIST
23537: PUSH
23538: LD_INT 0
23540: PUSH
23541: LD_INT 1
23543: PUSH
23544: EMPTY
23545: LIST
23546: LIST
23547: PUSH
23548: LD_INT 1
23550: NEG
23551: PUSH
23552: LD_INT 0
23554: PUSH
23555: EMPTY
23556: LIST
23557: LIST
23558: PUSH
23559: LD_INT 1
23561: NEG
23562: PUSH
23563: LD_INT 1
23565: NEG
23566: PUSH
23567: EMPTY
23568: LIST
23569: LIST
23570: PUSH
23571: LD_INT 1
23573: NEG
23574: PUSH
23575: LD_INT 2
23577: NEG
23578: PUSH
23579: EMPTY
23580: LIST
23581: LIST
23582: PUSH
23583: LD_INT 1
23585: PUSH
23586: LD_INT 2
23588: PUSH
23589: EMPTY
23590: LIST
23591: LIST
23592: PUSH
23593: EMPTY
23594: LIST
23595: LIST
23596: LIST
23597: LIST
23598: LIST
23599: LIST
23600: LIST
23601: LIST
23602: LIST
23603: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
23604: LD_ADDR_VAR 0 40
23608: PUSH
23609: LD_INT 0
23611: PUSH
23612: LD_INT 0
23614: PUSH
23615: EMPTY
23616: LIST
23617: LIST
23618: PUSH
23619: LD_INT 0
23621: PUSH
23622: LD_INT 1
23624: NEG
23625: PUSH
23626: EMPTY
23627: LIST
23628: LIST
23629: PUSH
23630: LD_INT 1
23632: PUSH
23633: LD_INT 0
23635: PUSH
23636: EMPTY
23637: LIST
23638: LIST
23639: PUSH
23640: LD_INT 1
23642: PUSH
23643: LD_INT 1
23645: PUSH
23646: EMPTY
23647: LIST
23648: LIST
23649: PUSH
23650: LD_INT 0
23652: PUSH
23653: LD_INT 1
23655: PUSH
23656: EMPTY
23657: LIST
23658: LIST
23659: PUSH
23660: LD_INT 1
23662: NEG
23663: PUSH
23664: LD_INT 0
23666: PUSH
23667: EMPTY
23668: LIST
23669: LIST
23670: PUSH
23671: LD_INT 1
23673: NEG
23674: PUSH
23675: LD_INT 1
23677: NEG
23678: PUSH
23679: EMPTY
23680: LIST
23681: LIST
23682: PUSH
23683: LD_INT 1
23685: PUSH
23686: LD_INT 1
23688: NEG
23689: PUSH
23690: EMPTY
23691: LIST
23692: LIST
23693: PUSH
23694: LD_INT 1
23696: NEG
23697: PUSH
23698: LD_INT 1
23700: PUSH
23701: EMPTY
23702: LIST
23703: LIST
23704: PUSH
23705: EMPTY
23706: LIST
23707: LIST
23708: LIST
23709: LIST
23710: LIST
23711: LIST
23712: LIST
23713: LIST
23714: LIST
23715: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23716: LD_ADDR_VAR 0 41
23720: PUSH
23721: LD_INT 0
23723: PUSH
23724: LD_INT 0
23726: PUSH
23727: EMPTY
23728: LIST
23729: LIST
23730: PUSH
23731: LD_INT 0
23733: PUSH
23734: LD_INT 1
23736: NEG
23737: PUSH
23738: EMPTY
23739: LIST
23740: LIST
23741: PUSH
23742: LD_INT 1
23744: PUSH
23745: LD_INT 0
23747: PUSH
23748: EMPTY
23749: LIST
23750: LIST
23751: PUSH
23752: LD_INT 1
23754: PUSH
23755: LD_INT 1
23757: PUSH
23758: EMPTY
23759: LIST
23760: LIST
23761: PUSH
23762: LD_INT 0
23764: PUSH
23765: LD_INT 1
23767: PUSH
23768: EMPTY
23769: LIST
23770: LIST
23771: PUSH
23772: LD_INT 1
23774: NEG
23775: PUSH
23776: LD_INT 0
23778: PUSH
23779: EMPTY
23780: LIST
23781: LIST
23782: PUSH
23783: LD_INT 1
23785: NEG
23786: PUSH
23787: LD_INT 1
23789: NEG
23790: PUSH
23791: EMPTY
23792: LIST
23793: LIST
23794: PUSH
23795: LD_INT 1
23797: NEG
23798: PUSH
23799: LD_INT 2
23801: NEG
23802: PUSH
23803: EMPTY
23804: LIST
23805: LIST
23806: PUSH
23807: LD_INT 1
23809: PUSH
23810: LD_INT 1
23812: NEG
23813: PUSH
23814: EMPTY
23815: LIST
23816: LIST
23817: PUSH
23818: LD_INT 2
23820: PUSH
23821: LD_INT 0
23823: PUSH
23824: EMPTY
23825: LIST
23826: LIST
23827: PUSH
23828: LD_INT 2
23830: PUSH
23831: LD_INT 1
23833: PUSH
23834: EMPTY
23835: LIST
23836: LIST
23837: PUSH
23838: LD_INT 2
23840: PUSH
23841: LD_INT 2
23843: PUSH
23844: EMPTY
23845: LIST
23846: LIST
23847: PUSH
23848: LD_INT 1
23850: PUSH
23851: LD_INT 2
23853: PUSH
23854: EMPTY
23855: LIST
23856: LIST
23857: PUSH
23858: LD_INT 1
23860: NEG
23861: PUSH
23862: LD_INT 1
23864: PUSH
23865: EMPTY
23866: LIST
23867: LIST
23868: PUSH
23869: LD_INT 2
23871: NEG
23872: PUSH
23873: LD_INT 0
23875: PUSH
23876: EMPTY
23877: LIST
23878: LIST
23879: PUSH
23880: LD_INT 2
23882: NEG
23883: PUSH
23884: LD_INT 1
23886: NEG
23887: PUSH
23888: EMPTY
23889: LIST
23890: LIST
23891: PUSH
23892: LD_INT 2
23894: NEG
23895: PUSH
23896: LD_INT 2
23898: NEG
23899: PUSH
23900: EMPTY
23901: LIST
23902: LIST
23903: PUSH
23904: LD_INT 2
23906: NEG
23907: PUSH
23908: LD_INT 3
23910: NEG
23911: PUSH
23912: EMPTY
23913: LIST
23914: LIST
23915: PUSH
23916: LD_INT 2
23918: PUSH
23919: LD_INT 1
23921: NEG
23922: PUSH
23923: EMPTY
23924: LIST
23925: LIST
23926: PUSH
23927: LD_INT 3
23929: PUSH
23930: LD_INT 0
23932: PUSH
23933: EMPTY
23934: LIST
23935: LIST
23936: PUSH
23937: LD_INT 3
23939: PUSH
23940: LD_INT 1
23942: PUSH
23943: EMPTY
23944: LIST
23945: LIST
23946: PUSH
23947: LD_INT 3
23949: PUSH
23950: LD_INT 2
23952: PUSH
23953: EMPTY
23954: LIST
23955: LIST
23956: PUSH
23957: LD_INT 3
23959: PUSH
23960: LD_INT 3
23962: PUSH
23963: EMPTY
23964: LIST
23965: LIST
23966: PUSH
23967: LD_INT 2
23969: PUSH
23970: LD_INT 3
23972: PUSH
23973: EMPTY
23974: LIST
23975: LIST
23976: PUSH
23977: LD_INT 2
23979: NEG
23980: PUSH
23981: LD_INT 1
23983: PUSH
23984: EMPTY
23985: LIST
23986: LIST
23987: PUSH
23988: LD_INT 3
23990: NEG
23991: PUSH
23992: LD_INT 0
23994: PUSH
23995: EMPTY
23996: LIST
23997: LIST
23998: PUSH
23999: LD_INT 3
24001: NEG
24002: PUSH
24003: LD_INT 1
24005: NEG
24006: PUSH
24007: EMPTY
24008: LIST
24009: LIST
24010: PUSH
24011: LD_INT 3
24013: NEG
24014: PUSH
24015: LD_INT 2
24017: NEG
24018: PUSH
24019: EMPTY
24020: LIST
24021: LIST
24022: PUSH
24023: LD_INT 3
24025: NEG
24026: PUSH
24027: LD_INT 3
24029: NEG
24030: PUSH
24031: EMPTY
24032: LIST
24033: LIST
24034: PUSH
24035: EMPTY
24036: LIST
24037: LIST
24038: LIST
24039: LIST
24040: LIST
24041: LIST
24042: LIST
24043: LIST
24044: LIST
24045: LIST
24046: LIST
24047: LIST
24048: LIST
24049: LIST
24050: LIST
24051: LIST
24052: LIST
24053: LIST
24054: LIST
24055: LIST
24056: LIST
24057: LIST
24058: LIST
24059: LIST
24060: LIST
24061: LIST
24062: LIST
24063: LIST
24064: LIST
24065: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24066: LD_ADDR_VAR 0 42
24070: PUSH
24071: LD_INT 0
24073: PUSH
24074: LD_INT 0
24076: PUSH
24077: EMPTY
24078: LIST
24079: LIST
24080: PUSH
24081: LD_INT 0
24083: PUSH
24084: LD_INT 1
24086: NEG
24087: PUSH
24088: EMPTY
24089: LIST
24090: LIST
24091: PUSH
24092: LD_INT 1
24094: PUSH
24095: LD_INT 0
24097: PUSH
24098: EMPTY
24099: LIST
24100: LIST
24101: PUSH
24102: LD_INT 1
24104: PUSH
24105: LD_INT 1
24107: PUSH
24108: EMPTY
24109: LIST
24110: LIST
24111: PUSH
24112: LD_INT 0
24114: PUSH
24115: LD_INT 1
24117: PUSH
24118: EMPTY
24119: LIST
24120: LIST
24121: PUSH
24122: LD_INT 1
24124: NEG
24125: PUSH
24126: LD_INT 0
24128: PUSH
24129: EMPTY
24130: LIST
24131: LIST
24132: PUSH
24133: LD_INT 1
24135: NEG
24136: PUSH
24137: LD_INT 1
24139: NEG
24140: PUSH
24141: EMPTY
24142: LIST
24143: LIST
24144: PUSH
24145: LD_INT 1
24147: NEG
24148: PUSH
24149: LD_INT 2
24151: NEG
24152: PUSH
24153: EMPTY
24154: LIST
24155: LIST
24156: PUSH
24157: LD_INT 0
24159: PUSH
24160: LD_INT 2
24162: NEG
24163: PUSH
24164: EMPTY
24165: LIST
24166: LIST
24167: PUSH
24168: LD_INT 1
24170: PUSH
24171: LD_INT 1
24173: NEG
24174: PUSH
24175: EMPTY
24176: LIST
24177: LIST
24178: PUSH
24179: LD_INT 2
24181: PUSH
24182: LD_INT 1
24184: PUSH
24185: EMPTY
24186: LIST
24187: LIST
24188: PUSH
24189: LD_INT 2
24191: PUSH
24192: LD_INT 2
24194: PUSH
24195: EMPTY
24196: LIST
24197: LIST
24198: PUSH
24199: LD_INT 1
24201: PUSH
24202: LD_INT 2
24204: PUSH
24205: EMPTY
24206: LIST
24207: LIST
24208: PUSH
24209: LD_INT 0
24211: PUSH
24212: LD_INT 2
24214: PUSH
24215: EMPTY
24216: LIST
24217: LIST
24218: PUSH
24219: LD_INT 1
24221: NEG
24222: PUSH
24223: LD_INT 1
24225: PUSH
24226: EMPTY
24227: LIST
24228: LIST
24229: PUSH
24230: LD_INT 2
24232: NEG
24233: PUSH
24234: LD_INT 1
24236: NEG
24237: PUSH
24238: EMPTY
24239: LIST
24240: LIST
24241: PUSH
24242: LD_INT 2
24244: NEG
24245: PUSH
24246: LD_INT 2
24248: NEG
24249: PUSH
24250: EMPTY
24251: LIST
24252: LIST
24253: PUSH
24254: LD_INT 2
24256: NEG
24257: PUSH
24258: LD_INT 3
24260: NEG
24261: PUSH
24262: EMPTY
24263: LIST
24264: LIST
24265: PUSH
24266: LD_INT 1
24268: NEG
24269: PUSH
24270: LD_INT 3
24272: NEG
24273: PUSH
24274: EMPTY
24275: LIST
24276: LIST
24277: PUSH
24278: LD_INT 0
24280: PUSH
24281: LD_INT 3
24283: NEG
24284: PUSH
24285: EMPTY
24286: LIST
24287: LIST
24288: PUSH
24289: LD_INT 1
24291: PUSH
24292: LD_INT 2
24294: NEG
24295: PUSH
24296: EMPTY
24297: LIST
24298: LIST
24299: PUSH
24300: LD_INT 3
24302: PUSH
24303: LD_INT 2
24305: PUSH
24306: EMPTY
24307: LIST
24308: LIST
24309: PUSH
24310: LD_INT 3
24312: PUSH
24313: LD_INT 3
24315: PUSH
24316: EMPTY
24317: LIST
24318: LIST
24319: PUSH
24320: LD_INT 2
24322: PUSH
24323: LD_INT 3
24325: PUSH
24326: EMPTY
24327: LIST
24328: LIST
24329: PUSH
24330: LD_INT 1
24332: PUSH
24333: LD_INT 3
24335: PUSH
24336: EMPTY
24337: LIST
24338: LIST
24339: PUSH
24340: LD_INT 0
24342: PUSH
24343: LD_INT 3
24345: PUSH
24346: EMPTY
24347: LIST
24348: LIST
24349: PUSH
24350: LD_INT 1
24352: NEG
24353: PUSH
24354: LD_INT 2
24356: PUSH
24357: EMPTY
24358: LIST
24359: LIST
24360: PUSH
24361: LD_INT 3
24363: NEG
24364: PUSH
24365: LD_INT 2
24367: NEG
24368: PUSH
24369: EMPTY
24370: LIST
24371: LIST
24372: PUSH
24373: LD_INT 3
24375: NEG
24376: PUSH
24377: LD_INT 3
24379: NEG
24380: PUSH
24381: EMPTY
24382: LIST
24383: LIST
24384: PUSH
24385: EMPTY
24386: LIST
24387: LIST
24388: LIST
24389: LIST
24390: LIST
24391: LIST
24392: LIST
24393: LIST
24394: LIST
24395: LIST
24396: LIST
24397: LIST
24398: LIST
24399: LIST
24400: LIST
24401: LIST
24402: LIST
24403: LIST
24404: LIST
24405: LIST
24406: LIST
24407: LIST
24408: LIST
24409: LIST
24410: LIST
24411: LIST
24412: LIST
24413: LIST
24414: LIST
24415: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24416: LD_ADDR_VAR 0 43
24420: PUSH
24421: LD_INT 0
24423: PUSH
24424: LD_INT 0
24426: PUSH
24427: EMPTY
24428: LIST
24429: LIST
24430: PUSH
24431: LD_INT 0
24433: PUSH
24434: LD_INT 1
24436: NEG
24437: PUSH
24438: EMPTY
24439: LIST
24440: LIST
24441: PUSH
24442: LD_INT 1
24444: PUSH
24445: LD_INT 0
24447: PUSH
24448: EMPTY
24449: LIST
24450: LIST
24451: PUSH
24452: LD_INT 1
24454: PUSH
24455: LD_INT 1
24457: PUSH
24458: EMPTY
24459: LIST
24460: LIST
24461: PUSH
24462: LD_INT 0
24464: PUSH
24465: LD_INT 1
24467: PUSH
24468: EMPTY
24469: LIST
24470: LIST
24471: PUSH
24472: LD_INT 1
24474: NEG
24475: PUSH
24476: LD_INT 0
24478: PUSH
24479: EMPTY
24480: LIST
24481: LIST
24482: PUSH
24483: LD_INT 1
24485: NEG
24486: PUSH
24487: LD_INT 1
24489: NEG
24490: PUSH
24491: EMPTY
24492: LIST
24493: LIST
24494: PUSH
24495: LD_INT 1
24497: NEG
24498: PUSH
24499: LD_INT 2
24501: NEG
24502: PUSH
24503: EMPTY
24504: LIST
24505: LIST
24506: PUSH
24507: LD_INT 0
24509: PUSH
24510: LD_INT 2
24512: NEG
24513: PUSH
24514: EMPTY
24515: LIST
24516: LIST
24517: PUSH
24518: LD_INT 1
24520: PUSH
24521: LD_INT 1
24523: NEG
24524: PUSH
24525: EMPTY
24526: LIST
24527: LIST
24528: PUSH
24529: LD_INT 2
24531: PUSH
24532: LD_INT 0
24534: PUSH
24535: EMPTY
24536: LIST
24537: LIST
24538: PUSH
24539: LD_INT 2
24541: PUSH
24542: LD_INT 1
24544: PUSH
24545: EMPTY
24546: LIST
24547: LIST
24548: PUSH
24549: LD_INT 1
24551: PUSH
24552: LD_INT 2
24554: PUSH
24555: EMPTY
24556: LIST
24557: LIST
24558: PUSH
24559: LD_INT 0
24561: PUSH
24562: LD_INT 2
24564: PUSH
24565: EMPTY
24566: LIST
24567: LIST
24568: PUSH
24569: LD_INT 1
24571: NEG
24572: PUSH
24573: LD_INT 1
24575: PUSH
24576: EMPTY
24577: LIST
24578: LIST
24579: PUSH
24580: LD_INT 2
24582: NEG
24583: PUSH
24584: LD_INT 0
24586: PUSH
24587: EMPTY
24588: LIST
24589: LIST
24590: PUSH
24591: LD_INT 2
24593: NEG
24594: PUSH
24595: LD_INT 1
24597: NEG
24598: PUSH
24599: EMPTY
24600: LIST
24601: LIST
24602: PUSH
24603: LD_INT 1
24605: NEG
24606: PUSH
24607: LD_INT 3
24609: NEG
24610: PUSH
24611: EMPTY
24612: LIST
24613: LIST
24614: PUSH
24615: LD_INT 0
24617: PUSH
24618: LD_INT 3
24620: NEG
24621: PUSH
24622: EMPTY
24623: LIST
24624: LIST
24625: PUSH
24626: LD_INT 1
24628: PUSH
24629: LD_INT 2
24631: NEG
24632: PUSH
24633: EMPTY
24634: LIST
24635: LIST
24636: PUSH
24637: LD_INT 2
24639: PUSH
24640: LD_INT 1
24642: NEG
24643: PUSH
24644: EMPTY
24645: LIST
24646: LIST
24647: PUSH
24648: LD_INT 3
24650: PUSH
24651: LD_INT 0
24653: PUSH
24654: EMPTY
24655: LIST
24656: LIST
24657: PUSH
24658: LD_INT 3
24660: PUSH
24661: LD_INT 1
24663: PUSH
24664: EMPTY
24665: LIST
24666: LIST
24667: PUSH
24668: LD_INT 1
24670: PUSH
24671: LD_INT 3
24673: PUSH
24674: EMPTY
24675: LIST
24676: LIST
24677: PUSH
24678: LD_INT 0
24680: PUSH
24681: LD_INT 3
24683: PUSH
24684: EMPTY
24685: LIST
24686: LIST
24687: PUSH
24688: LD_INT 1
24690: NEG
24691: PUSH
24692: LD_INT 2
24694: PUSH
24695: EMPTY
24696: LIST
24697: LIST
24698: PUSH
24699: LD_INT 2
24701: NEG
24702: PUSH
24703: LD_INT 1
24705: PUSH
24706: EMPTY
24707: LIST
24708: LIST
24709: PUSH
24710: LD_INT 3
24712: NEG
24713: PUSH
24714: LD_INT 0
24716: PUSH
24717: EMPTY
24718: LIST
24719: LIST
24720: PUSH
24721: LD_INT 3
24723: NEG
24724: PUSH
24725: LD_INT 1
24727: NEG
24728: PUSH
24729: EMPTY
24730: LIST
24731: LIST
24732: PUSH
24733: EMPTY
24734: LIST
24735: LIST
24736: LIST
24737: LIST
24738: LIST
24739: LIST
24740: LIST
24741: LIST
24742: LIST
24743: LIST
24744: LIST
24745: LIST
24746: LIST
24747: LIST
24748: LIST
24749: LIST
24750: LIST
24751: LIST
24752: LIST
24753: LIST
24754: LIST
24755: LIST
24756: LIST
24757: LIST
24758: LIST
24759: LIST
24760: LIST
24761: LIST
24762: LIST
24763: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24764: LD_ADDR_VAR 0 44
24768: PUSH
24769: LD_INT 0
24771: PUSH
24772: LD_INT 0
24774: PUSH
24775: EMPTY
24776: LIST
24777: LIST
24778: PUSH
24779: LD_INT 0
24781: PUSH
24782: LD_INT 1
24784: NEG
24785: PUSH
24786: EMPTY
24787: LIST
24788: LIST
24789: PUSH
24790: LD_INT 1
24792: PUSH
24793: LD_INT 0
24795: PUSH
24796: EMPTY
24797: LIST
24798: LIST
24799: PUSH
24800: LD_INT 1
24802: PUSH
24803: LD_INT 1
24805: PUSH
24806: EMPTY
24807: LIST
24808: LIST
24809: PUSH
24810: LD_INT 0
24812: PUSH
24813: LD_INT 1
24815: PUSH
24816: EMPTY
24817: LIST
24818: LIST
24819: PUSH
24820: LD_INT 1
24822: NEG
24823: PUSH
24824: LD_INT 0
24826: PUSH
24827: EMPTY
24828: LIST
24829: LIST
24830: PUSH
24831: LD_INT 1
24833: NEG
24834: PUSH
24835: LD_INT 1
24837: NEG
24838: PUSH
24839: EMPTY
24840: LIST
24841: LIST
24842: PUSH
24843: LD_INT 1
24845: NEG
24846: PUSH
24847: LD_INT 2
24849: NEG
24850: PUSH
24851: EMPTY
24852: LIST
24853: LIST
24854: PUSH
24855: LD_INT 1
24857: PUSH
24858: LD_INT 1
24860: NEG
24861: PUSH
24862: EMPTY
24863: LIST
24864: LIST
24865: PUSH
24866: LD_INT 2
24868: PUSH
24869: LD_INT 0
24871: PUSH
24872: EMPTY
24873: LIST
24874: LIST
24875: PUSH
24876: LD_INT 2
24878: PUSH
24879: LD_INT 1
24881: PUSH
24882: EMPTY
24883: LIST
24884: LIST
24885: PUSH
24886: LD_INT 2
24888: PUSH
24889: LD_INT 2
24891: PUSH
24892: EMPTY
24893: LIST
24894: LIST
24895: PUSH
24896: LD_INT 1
24898: PUSH
24899: LD_INT 2
24901: PUSH
24902: EMPTY
24903: LIST
24904: LIST
24905: PUSH
24906: LD_INT 1
24908: NEG
24909: PUSH
24910: LD_INT 1
24912: PUSH
24913: EMPTY
24914: LIST
24915: LIST
24916: PUSH
24917: LD_INT 2
24919: NEG
24920: PUSH
24921: LD_INT 0
24923: PUSH
24924: EMPTY
24925: LIST
24926: LIST
24927: PUSH
24928: LD_INT 2
24930: NEG
24931: PUSH
24932: LD_INT 1
24934: NEG
24935: PUSH
24936: EMPTY
24937: LIST
24938: LIST
24939: PUSH
24940: LD_INT 2
24942: NEG
24943: PUSH
24944: LD_INT 2
24946: NEG
24947: PUSH
24948: EMPTY
24949: LIST
24950: LIST
24951: PUSH
24952: LD_INT 2
24954: NEG
24955: PUSH
24956: LD_INT 3
24958: NEG
24959: PUSH
24960: EMPTY
24961: LIST
24962: LIST
24963: PUSH
24964: LD_INT 2
24966: PUSH
24967: LD_INT 1
24969: NEG
24970: PUSH
24971: EMPTY
24972: LIST
24973: LIST
24974: PUSH
24975: LD_INT 3
24977: PUSH
24978: LD_INT 0
24980: PUSH
24981: EMPTY
24982: LIST
24983: LIST
24984: PUSH
24985: LD_INT 3
24987: PUSH
24988: LD_INT 1
24990: PUSH
24991: EMPTY
24992: LIST
24993: LIST
24994: PUSH
24995: LD_INT 3
24997: PUSH
24998: LD_INT 2
25000: PUSH
25001: EMPTY
25002: LIST
25003: LIST
25004: PUSH
25005: LD_INT 3
25007: PUSH
25008: LD_INT 3
25010: PUSH
25011: EMPTY
25012: LIST
25013: LIST
25014: PUSH
25015: LD_INT 2
25017: PUSH
25018: LD_INT 3
25020: PUSH
25021: EMPTY
25022: LIST
25023: LIST
25024: PUSH
25025: LD_INT 2
25027: NEG
25028: PUSH
25029: LD_INT 1
25031: PUSH
25032: EMPTY
25033: LIST
25034: LIST
25035: PUSH
25036: LD_INT 3
25038: NEG
25039: PUSH
25040: LD_INT 0
25042: PUSH
25043: EMPTY
25044: LIST
25045: LIST
25046: PUSH
25047: LD_INT 3
25049: NEG
25050: PUSH
25051: LD_INT 1
25053: NEG
25054: PUSH
25055: EMPTY
25056: LIST
25057: LIST
25058: PUSH
25059: LD_INT 3
25061: NEG
25062: PUSH
25063: LD_INT 2
25065: NEG
25066: PUSH
25067: EMPTY
25068: LIST
25069: LIST
25070: PUSH
25071: LD_INT 3
25073: NEG
25074: PUSH
25075: LD_INT 3
25077: NEG
25078: PUSH
25079: EMPTY
25080: LIST
25081: LIST
25082: PUSH
25083: EMPTY
25084: LIST
25085: LIST
25086: LIST
25087: LIST
25088: LIST
25089: LIST
25090: LIST
25091: LIST
25092: LIST
25093: LIST
25094: LIST
25095: LIST
25096: LIST
25097: LIST
25098: LIST
25099: LIST
25100: LIST
25101: LIST
25102: LIST
25103: LIST
25104: LIST
25105: LIST
25106: LIST
25107: LIST
25108: LIST
25109: LIST
25110: LIST
25111: LIST
25112: LIST
25113: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25114: LD_ADDR_VAR 0 45
25118: PUSH
25119: LD_INT 0
25121: PUSH
25122: LD_INT 0
25124: PUSH
25125: EMPTY
25126: LIST
25127: LIST
25128: PUSH
25129: LD_INT 0
25131: PUSH
25132: LD_INT 1
25134: NEG
25135: PUSH
25136: EMPTY
25137: LIST
25138: LIST
25139: PUSH
25140: LD_INT 1
25142: PUSH
25143: LD_INT 0
25145: PUSH
25146: EMPTY
25147: LIST
25148: LIST
25149: PUSH
25150: LD_INT 1
25152: PUSH
25153: LD_INT 1
25155: PUSH
25156: EMPTY
25157: LIST
25158: LIST
25159: PUSH
25160: LD_INT 0
25162: PUSH
25163: LD_INT 1
25165: PUSH
25166: EMPTY
25167: LIST
25168: LIST
25169: PUSH
25170: LD_INT 1
25172: NEG
25173: PUSH
25174: LD_INT 0
25176: PUSH
25177: EMPTY
25178: LIST
25179: LIST
25180: PUSH
25181: LD_INT 1
25183: NEG
25184: PUSH
25185: LD_INT 1
25187: NEG
25188: PUSH
25189: EMPTY
25190: LIST
25191: LIST
25192: PUSH
25193: LD_INT 1
25195: NEG
25196: PUSH
25197: LD_INT 2
25199: NEG
25200: PUSH
25201: EMPTY
25202: LIST
25203: LIST
25204: PUSH
25205: LD_INT 0
25207: PUSH
25208: LD_INT 2
25210: NEG
25211: PUSH
25212: EMPTY
25213: LIST
25214: LIST
25215: PUSH
25216: LD_INT 1
25218: PUSH
25219: LD_INT 1
25221: NEG
25222: PUSH
25223: EMPTY
25224: LIST
25225: LIST
25226: PUSH
25227: LD_INT 2
25229: PUSH
25230: LD_INT 1
25232: PUSH
25233: EMPTY
25234: LIST
25235: LIST
25236: PUSH
25237: LD_INT 2
25239: PUSH
25240: LD_INT 2
25242: PUSH
25243: EMPTY
25244: LIST
25245: LIST
25246: PUSH
25247: LD_INT 1
25249: PUSH
25250: LD_INT 2
25252: PUSH
25253: EMPTY
25254: LIST
25255: LIST
25256: PUSH
25257: LD_INT 0
25259: PUSH
25260: LD_INT 2
25262: PUSH
25263: EMPTY
25264: LIST
25265: LIST
25266: PUSH
25267: LD_INT 1
25269: NEG
25270: PUSH
25271: LD_INT 1
25273: PUSH
25274: EMPTY
25275: LIST
25276: LIST
25277: PUSH
25278: LD_INT 2
25280: NEG
25281: PUSH
25282: LD_INT 1
25284: NEG
25285: PUSH
25286: EMPTY
25287: LIST
25288: LIST
25289: PUSH
25290: LD_INT 2
25292: NEG
25293: PUSH
25294: LD_INT 2
25296: NEG
25297: PUSH
25298: EMPTY
25299: LIST
25300: LIST
25301: PUSH
25302: LD_INT 2
25304: NEG
25305: PUSH
25306: LD_INT 3
25308: NEG
25309: PUSH
25310: EMPTY
25311: LIST
25312: LIST
25313: PUSH
25314: LD_INT 1
25316: NEG
25317: PUSH
25318: LD_INT 3
25320: NEG
25321: PUSH
25322: EMPTY
25323: LIST
25324: LIST
25325: PUSH
25326: LD_INT 0
25328: PUSH
25329: LD_INT 3
25331: NEG
25332: PUSH
25333: EMPTY
25334: LIST
25335: LIST
25336: PUSH
25337: LD_INT 1
25339: PUSH
25340: LD_INT 2
25342: NEG
25343: PUSH
25344: EMPTY
25345: LIST
25346: LIST
25347: PUSH
25348: LD_INT 3
25350: PUSH
25351: LD_INT 2
25353: PUSH
25354: EMPTY
25355: LIST
25356: LIST
25357: PUSH
25358: LD_INT 3
25360: PUSH
25361: LD_INT 3
25363: PUSH
25364: EMPTY
25365: LIST
25366: LIST
25367: PUSH
25368: LD_INT 2
25370: PUSH
25371: LD_INT 3
25373: PUSH
25374: EMPTY
25375: LIST
25376: LIST
25377: PUSH
25378: LD_INT 1
25380: PUSH
25381: LD_INT 3
25383: PUSH
25384: EMPTY
25385: LIST
25386: LIST
25387: PUSH
25388: LD_INT 0
25390: PUSH
25391: LD_INT 3
25393: PUSH
25394: EMPTY
25395: LIST
25396: LIST
25397: PUSH
25398: LD_INT 1
25400: NEG
25401: PUSH
25402: LD_INT 2
25404: PUSH
25405: EMPTY
25406: LIST
25407: LIST
25408: PUSH
25409: LD_INT 3
25411: NEG
25412: PUSH
25413: LD_INT 2
25415: NEG
25416: PUSH
25417: EMPTY
25418: LIST
25419: LIST
25420: PUSH
25421: LD_INT 3
25423: NEG
25424: PUSH
25425: LD_INT 3
25427: NEG
25428: PUSH
25429: EMPTY
25430: LIST
25431: LIST
25432: PUSH
25433: EMPTY
25434: LIST
25435: LIST
25436: LIST
25437: LIST
25438: LIST
25439: LIST
25440: LIST
25441: LIST
25442: LIST
25443: LIST
25444: LIST
25445: LIST
25446: LIST
25447: LIST
25448: LIST
25449: LIST
25450: LIST
25451: LIST
25452: LIST
25453: LIST
25454: LIST
25455: LIST
25456: LIST
25457: LIST
25458: LIST
25459: LIST
25460: LIST
25461: LIST
25462: LIST
25463: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25464: LD_ADDR_VAR 0 46
25468: PUSH
25469: LD_INT 0
25471: PUSH
25472: LD_INT 0
25474: PUSH
25475: EMPTY
25476: LIST
25477: LIST
25478: PUSH
25479: LD_INT 0
25481: PUSH
25482: LD_INT 1
25484: NEG
25485: PUSH
25486: EMPTY
25487: LIST
25488: LIST
25489: PUSH
25490: LD_INT 1
25492: PUSH
25493: LD_INT 0
25495: PUSH
25496: EMPTY
25497: LIST
25498: LIST
25499: PUSH
25500: LD_INT 1
25502: PUSH
25503: LD_INT 1
25505: PUSH
25506: EMPTY
25507: LIST
25508: LIST
25509: PUSH
25510: LD_INT 0
25512: PUSH
25513: LD_INT 1
25515: PUSH
25516: EMPTY
25517: LIST
25518: LIST
25519: PUSH
25520: LD_INT 1
25522: NEG
25523: PUSH
25524: LD_INT 0
25526: PUSH
25527: EMPTY
25528: LIST
25529: LIST
25530: PUSH
25531: LD_INT 1
25533: NEG
25534: PUSH
25535: LD_INT 1
25537: NEG
25538: PUSH
25539: EMPTY
25540: LIST
25541: LIST
25542: PUSH
25543: LD_INT 1
25545: NEG
25546: PUSH
25547: LD_INT 2
25549: NEG
25550: PUSH
25551: EMPTY
25552: LIST
25553: LIST
25554: PUSH
25555: LD_INT 0
25557: PUSH
25558: LD_INT 2
25560: NEG
25561: PUSH
25562: EMPTY
25563: LIST
25564: LIST
25565: PUSH
25566: LD_INT 1
25568: PUSH
25569: LD_INT 1
25571: NEG
25572: PUSH
25573: EMPTY
25574: LIST
25575: LIST
25576: PUSH
25577: LD_INT 2
25579: PUSH
25580: LD_INT 0
25582: PUSH
25583: EMPTY
25584: LIST
25585: LIST
25586: PUSH
25587: LD_INT 2
25589: PUSH
25590: LD_INT 1
25592: PUSH
25593: EMPTY
25594: LIST
25595: LIST
25596: PUSH
25597: LD_INT 1
25599: PUSH
25600: LD_INT 2
25602: PUSH
25603: EMPTY
25604: LIST
25605: LIST
25606: PUSH
25607: LD_INT 0
25609: PUSH
25610: LD_INT 2
25612: PUSH
25613: EMPTY
25614: LIST
25615: LIST
25616: PUSH
25617: LD_INT 1
25619: NEG
25620: PUSH
25621: LD_INT 1
25623: PUSH
25624: EMPTY
25625: LIST
25626: LIST
25627: PUSH
25628: LD_INT 2
25630: NEG
25631: PUSH
25632: LD_INT 0
25634: PUSH
25635: EMPTY
25636: LIST
25637: LIST
25638: PUSH
25639: LD_INT 2
25641: NEG
25642: PUSH
25643: LD_INT 1
25645: NEG
25646: PUSH
25647: EMPTY
25648: LIST
25649: LIST
25650: PUSH
25651: LD_INT 1
25653: NEG
25654: PUSH
25655: LD_INT 3
25657: NEG
25658: PUSH
25659: EMPTY
25660: LIST
25661: LIST
25662: PUSH
25663: LD_INT 0
25665: PUSH
25666: LD_INT 3
25668: NEG
25669: PUSH
25670: EMPTY
25671: LIST
25672: LIST
25673: PUSH
25674: LD_INT 1
25676: PUSH
25677: LD_INT 2
25679: NEG
25680: PUSH
25681: EMPTY
25682: LIST
25683: LIST
25684: PUSH
25685: LD_INT 2
25687: PUSH
25688: LD_INT 1
25690: NEG
25691: PUSH
25692: EMPTY
25693: LIST
25694: LIST
25695: PUSH
25696: LD_INT 3
25698: PUSH
25699: LD_INT 0
25701: PUSH
25702: EMPTY
25703: LIST
25704: LIST
25705: PUSH
25706: LD_INT 3
25708: PUSH
25709: LD_INT 1
25711: PUSH
25712: EMPTY
25713: LIST
25714: LIST
25715: PUSH
25716: LD_INT 1
25718: PUSH
25719: LD_INT 3
25721: PUSH
25722: EMPTY
25723: LIST
25724: LIST
25725: PUSH
25726: LD_INT 0
25728: PUSH
25729: LD_INT 3
25731: PUSH
25732: EMPTY
25733: LIST
25734: LIST
25735: PUSH
25736: LD_INT 1
25738: NEG
25739: PUSH
25740: LD_INT 2
25742: PUSH
25743: EMPTY
25744: LIST
25745: LIST
25746: PUSH
25747: LD_INT 2
25749: NEG
25750: PUSH
25751: LD_INT 1
25753: PUSH
25754: EMPTY
25755: LIST
25756: LIST
25757: PUSH
25758: LD_INT 3
25760: NEG
25761: PUSH
25762: LD_INT 0
25764: PUSH
25765: EMPTY
25766: LIST
25767: LIST
25768: PUSH
25769: LD_INT 3
25771: NEG
25772: PUSH
25773: LD_INT 1
25775: NEG
25776: PUSH
25777: EMPTY
25778: LIST
25779: LIST
25780: PUSH
25781: EMPTY
25782: LIST
25783: LIST
25784: LIST
25785: LIST
25786: LIST
25787: LIST
25788: LIST
25789: LIST
25790: LIST
25791: LIST
25792: LIST
25793: LIST
25794: LIST
25795: LIST
25796: LIST
25797: LIST
25798: LIST
25799: LIST
25800: LIST
25801: LIST
25802: LIST
25803: LIST
25804: LIST
25805: LIST
25806: LIST
25807: LIST
25808: LIST
25809: LIST
25810: LIST
25811: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25812: LD_ADDR_VAR 0 47
25816: PUSH
25817: LD_INT 0
25819: PUSH
25820: LD_INT 0
25822: PUSH
25823: EMPTY
25824: LIST
25825: LIST
25826: PUSH
25827: LD_INT 0
25829: PUSH
25830: LD_INT 1
25832: NEG
25833: PUSH
25834: EMPTY
25835: LIST
25836: LIST
25837: PUSH
25838: LD_INT 1
25840: PUSH
25841: LD_INT 0
25843: PUSH
25844: EMPTY
25845: LIST
25846: LIST
25847: PUSH
25848: LD_INT 1
25850: PUSH
25851: LD_INT 1
25853: PUSH
25854: EMPTY
25855: LIST
25856: LIST
25857: PUSH
25858: LD_INT 0
25860: PUSH
25861: LD_INT 1
25863: PUSH
25864: EMPTY
25865: LIST
25866: LIST
25867: PUSH
25868: LD_INT 1
25870: NEG
25871: PUSH
25872: LD_INT 0
25874: PUSH
25875: EMPTY
25876: LIST
25877: LIST
25878: PUSH
25879: LD_INT 1
25881: NEG
25882: PUSH
25883: LD_INT 1
25885: NEG
25886: PUSH
25887: EMPTY
25888: LIST
25889: LIST
25890: PUSH
25891: LD_INT 1
25893: NEG
25894: PUSH
25895: LD_INT 2
25897: NEG
25898: PUSH
25899: EMPTY
25900: LIST
25901: LIST
25902: PUSH
25903: LD_INT 0
25905: PUSH
25906: LD_INT 2
25908: NEG
25909: PUSH
25910: EMPTY
25911: LIST
25912: LIST
25913: PUSH
25914: LD_INT 1
25916: PUSH
25917: LD_INT 1
25919: NEG
25920: PUSH
25921: EMPTY
25922: LIST
25923: LIST
25924: PUSH
25925: LD_INT 2
25927: NEG
25928: PUSH
25929: LD_INT 1
25931: NEG
25932: PUSH
25933: EMPTY
25934: LIST
25935: LIST
25936: PUSH
25937: LD_INT 2
25939: NEG
25940: PUSH
25941: LD_INT 2
25943: NEG
25944: PUSH
25945: EMPTY
25946: LIST
25947: LIST
25948: PUSH
25949: EMPTY
25950: LIST
25951: LIST
25952: LIST
25953: LIST
25954: LIST
25955: LIST
25956: LIST
25957: LIST
25958: LIST
25959: LIST
25960: LIST
25961: LIST
25962: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
25963: LD_ADDR_VAR 0 48
25967: PUSH
25968: LD_INT 0
25970: PUSH
25971: LD_INT 0
25973: PUSH
25974: EMPTY
25975: LIST
25976: LIST
25977: PUSH
25978: LD_INT 0
25980: PUSH
25981: LD_INT 1
25983: NEG
25984: PUSH
25985: EMPTY
25986: LIST
25987: LIST
25988: PUSH
25989: LD_INT 1
25991: PUSH
25992: LD_INT 0
25994: PUSH
25995: EMPTY
25996: LIST
25997: LIST
25998: PUSH
25999: LD_INT 1
26001: PUSH
26002: LD_INT 1
26004: PUSH
26005: EMPTY
26006: LIST
26007: LIST
26008: PUSH
26009: LD_INT 0
26011: PUSH
26012: LD_INT 1
26014: PUSH
26015: EMPTY
26016: LIST
26017: LIST
26018: PUSH
26019: LD_INT 1
26021: NEG
26022: PUSH
26023: LD_INT 0
26025: PUSH
26026: EMPTY
26027: LIST
26028: LIST
26029: PUSH
26030: LD_INT 1
26032: NEG
26033: PUSH
26034: LD_INT 1
26036: NEG
26037: PUSH
26038: EMPTY
26039: LIST
26040: LIST
26041: PUSH
26042: LD_INT 1
26044: NEG
26045: PUSH
26046: LD_INT 2
26048: NEG
26049: PUSH
26050: EMPTY
26051: LIST
26052: LIST
26053: PUSH
26054: LD_INT 0
26056: PUSH
26057: LD_INT 2
26059: NEG
26060: PUSH
26061: EMPTY
26062: LIST
26063: LIST
26064: PUSH
26065: LD_INT 1
26067: PUSH
26068: LD_INT 1
26070: NEG
26071: PUSH
26072: EMPTY
26073: LIST
26074: LIST
26075: PUSH
26076: LD_INT 2
26078: PUSH
26079: LD_INT 0
26081: PUSH
26082: EMPTY
26083: LIST
26084: LIST
26085: PUSH
26086: LD_INT 2
26088: PUSH
26089: LD_INT 1
26091: PUSH
26092: EMPTY
26093: LIST
26094: LIST
26095: PUSH
26096: EMPTY
26097: LIST
26098: LIST
26099: LIST
26100: LIST
26101: LIST
26102: LIST
26103: LIST
26104: LIST
26105: LIST
26106: LIST
26107: LIST
26108: LIST
26109: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
26110: LD_ADDR_VAR 0 49
26114: PUSH
26115: LD_INT 0
26117: PUSH
26118: LD_INT 0
26120: PUSH
26121: EMPTY
26122: LIST
26123: LIST
26124: PUSH
26125: LD_INT 0
26127: PUSH
26128: LD_INT 1
26130: NEG
26131: PUSH
26132: EMPTY
26133: LIST
26134: LIST
26135: PUSH
26136: LD_INT 1
26138: PUSH
26139: LD_INT 0
26141: PUSH
26142: EMPTY
26143: LIST
26144: LIST
26145: PUSH
26146: LD_INT 1
26148: PUSH
26149: LD_INT 1
26151: PUSH
26152: EMPTY
26153: LIST
26154: LIST
26155: PUSH
26156: LD_INT 0
26158: PUSH
26159: LD_INT 1
26161: PUSH
26162: EMPTY
26163: LIST
26164: LIST
26165: PUSH
26166: LD_INT 1
26168: NEG
26169: PUSH
26170: LD_INT 0
26172: PUSH
26173: EMPTY
26174: LIST
26175: LIST
26176: PUSH
26177: LD_INT 1
26179: NEG
26180: PUSH
26181: LD_INT 1
26183: NEG
26184: PUSH
26185: EMPTY
26186: LIST
26187: LIST
26188: PUSH
26189: LD_INT 1
26191: PUSH
26192: LD_INT 1
26194: NEG
26195: PUSH
26196: EMPTY
26197: LIST
26198: LIST
26199: PUSH
26200: LD_INT 2
26202: PUSH
26203: LD_INT 0
26205: PUSH
26206: EMPTY
26207: LIST
26208: LIST
26209: PUSH
26210: LD_INT 2
26212: PUSH
26213: LD_INT 1
26215: PUSH
26216: EMPTY
26217: LIST
26218: LIST
26219: PUSH
26220: LD_INT 2
26222: PUSH
26223: LD_INT 2
26225: PUSH
26226: EMPTY
26227: LIST
26228: LIST
26229: PUSH
26230: LD_INT 1
26232: PUSH
26233: LD_INT 2
26235: PUSH
26236: EMPTY
26237: LIST
26238: LIST
26239: PUSH
26240: EMPTY
26241: LIST
26242: LIST
26243: LIST
26244: LIST
26245: LIST
26246: LIST
26247: LIST
26248: LIST
26249: LIST
26250: LIST
26251: LIST
26252: LIST
26253: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
26254: LD_ADDR_VAR 0 50
26258: PUSH
26259: LD_INT 0
26261: PUSH
26262: LD_INT 0
26264: PUSH
26265: EMPTY
26266: LIST
26267: LIST
26268: PUSH
26269: LD_INT 0
26271: PUSH
26272: LD_INT 1
26274: NEG
26275: PUSH
26276: EMPTY
26277: LIST
26278: LIST
26279: PUSH
26280: LD_INT 1
26282: PUSH
26283: LD_INT 0
26285: PUSH
26286: EMPTY
26287: LIST
26288: LIST
26289: PUSH
26290: LD_INT 1
26292: PUSH
26293: LD_INT 1
26295: PUSH
26296: EMPTY
26297: LIST
26298: LIST
26299: PUSH
26300: LD_INT 0
26302: PUSH
26303: LD_INT 1
26305: PUSH
26306: EMPTY
26307: LIST
26308: LIST
26309: PUSH
26310: LD_INT 1
26312: NEG
26313: PUSH
26314: LD_INT 0
26316: PUSH
26317: EMPTY
26318: LIST
26319: LIST
26320: PUSH
26321: LD_INT 1
26323: NEG
26324: PUSH
26325: LD_INT 1
26327: NEG
26328: PUSH
26329: EMPTY
26330: LIST
26331: LIST
26332: PUSH
26333: LD_INT 2
26335: PUSH
26336: LD_INT 1
26338: PUSH
26339: EMPTY
26340: LIST
26341: LIST
26342: PUSH
26343: LD_INT 2
26345: PUSH
26346: LD_INT 2
26348: PUSH
26349: EMPTY
26350: LIST
26351: LIST
26352: PUSH
26353: LD_INT 1
26355: PUSH
26356: LD_INT 2
26358: PUSH
26359: EMPTY
26360: LIST
26361: LIST
26362: PUSH
26363: LD_INT 0
26365: PUSH
26366: LD_INT 2
26368: PUSH
26369: EMPTY
26370: LIST
26371: LIST
26372: PUSH
26373: LD_INT 1
26375: NEG
26376: PUSH
26377: LD_INT 1
26379: PUSH
26380: EMPTY
26381: LIST
26382: LIST
26383: PUSH
26384: EMPTY
26385: LIST
26386: LIST
26387: LIST
26388: LIST
26389: LIST
26390: LIST
26391: LIST
26392: LIST
26393: LIST
26394: LIST
26395: LIST
26396: LIST
26397: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
26398: LD_ADDR_VAR 0 51
26402: PUSH
26403: LD_INT 0
26405: PUSH
26406: LD_INT 0
26408: PUSH
26409: EMPTY
26410: LIST
26411: LIST
26412: PUSH
26413: LD_INT 0
26415: PUSH
26416: LD_INT 1
26418: NEG
26419: PUSH
26420: EMPTY
26421: LIST
26422: LIST
26423: PUSH
26424: LD_INT 1
26426: PUSH
26427: LD_INT 0
26429: PUSH
26430: EMPTY
26431: LIST
26432: LIST
26433: PUSH
26434: LD_INT 1
26436: PUSH
26437: LD_INT 1
26439: PUSH
26440: EMPTY
26441: LIST
26442: LIST
26443: PUSH
26444: LD_INT 0
26446: PUSH
26447: LD_INT 1
26449: PUSH
26450: EMPTY
26451: LIST
26452: LIST
26453: PUSH
26454: LD_INT 1
26456: NEG
26457: PUSH
26458: LD_INT 0
26460: PUSH
26461: EMPTY
26462: LIST
26463: LIST
26464: PUSH
26465: LD_INT 1
26467: NEG
26468: PUSH
26469: LD_INT 1
26471: NEG
26472: PUSH
26473: EMPTY
26474: LIST
26475: LIST
26476: PUSH
26477: LD_INT 1
26479: PUSH
26480: LD_INT 2
26482: PUSH
26483: EMPTY
26484: LIST
26485: LIST
26486: PUSH
26487: LD_INT 0
26489: PUSH
26490: LD_INT 2
26492: PUSH
26493: EMPTY
26494: LIST
26495: LIST
26496: PUSH
26497: LD_INT 1
26499: NEG
26500: PUSH
26501: LD_INT 1
26503: PUSH
26504: EMPTY
26505: LIST
26506: LIST
26507: PUSH
26508: LD_INT 2
26510: NEG
26511: PUSH
26512: LD_INT 0
26514: PUSH
26515: EMPTY
26516: LIST
26517: LIST
26518: PUSH
26519: LD_INT 2
26521: NEG
26522: PUSH
26523: LD_INT 1
26525: NEG
26526: PUSH
26527: EMPTY
26528: LIST
26529: LIST
26530: PUSH
26531: EMPTY
26532: LIST
26533: LIST
26534: LIST
26535: LIST
26536: LIST
26537: LIST
26538: LIST
26539: LIST
26540: LIST
26541: LIST
26542: LIST
26543: LIST
26544: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26545: LD_ADDR_VAR 0 52
26549: PUSH
26550: LD_INT 0
26552: PUSH
26553: LD_INT 0
26555: PUSH
26556: EMPTY
26557: LIST
26558: LIST
26559: PUSH
26560: LD_INT 0
26562: PUSH
26563: LD_INT 1
26565: NEG
26566: PUSH
26567: EMPTY
26568: LIST
26569: LIST
26570: PUSH
26571: LD_INT 1
26573: PUSH
26574: LD_INT 0
26576: PUSH
26577: EMPTY
26578: LIST
26579: LIST
26580: PUSH
26581: LD_INT 1
26583: PUSH
26584: LD_INT 1
26586: PUSH
26587: EMPTY
26588: LIST
26589: LIST
26590: PUSH
26591: LD_INT 0
26593: PUSH
26594: LD_INT 1
26596: PUSH
26597: EMPTY
26598: LIST
26599: LIST
26600: PUSH
26601: LD_INT 1
26603: NEG
26604: PUSH
26605: LD_INT 0
26607: PUSH
26608: EMPTY
26609: LIST
26610: LIST
26611: PUSH
26612: LD_INT 1
26614: NEG
26615: PUSH
26616: LD_INT 1
26618: NEG
26619: PUSH
26620: EMPTY
26621: LIST
26622: LIST
26623: PUSH
26624: LD_INT 1
26626: NEG
26627: PUSH
26628: LD_INT 2
26630: NEG
26631: PUSH
26632: EMPTY
26633: LIST
26634: LIST
26635: PUSH
26636: LD_INT 1
26638: NEG
26639: PUSH
26640: LD_INT 1
26642: PUSH
26643: EMPTY
26644: LIST
26645: LIST
26646: PUSH
26647: LD_INT 2
26649: NEG
26650: PUSH
26651: LD_INT 0
26653: PUSH
26654: EMPTY
26655: LIST
26656: LIST
26657: PUSH
26658: LD_INT 2
26660: NEG
26661: PUSH
26662: LD_INT 1
26664: NEG
26665: PUSH
26666: EMPTY
26667: LIST
26668: LIST
26669: PUSH
26670: LD_INT 2
26672: NEG
26673: PUSH
26674: LD_INT 2
26676: NEG
26677: PUSH
26678: EMPTY
26679: LIST
26680: LIST
26681: PUSH
26682: EMPTY
26683: LIST
26684: LIST
26685: LIST
26686: LIST
26687: LIST
26688: LIST
26689: LIST
26690: LIST
26691: LIST
26692: LIST
26693: LIST
26694: LIST
26695: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26696: LD_ADDR_VAR 0 53
26700: PUSH
26701: LD_INT 0
26703: PUSH
26704: LD_INT 0
26706: PUSH
26707: EMPTY
26708: LIST
26709: LIST
26710: PUSH
26711: LD_INT 0
26713: PUSH
26714: LD_INT 1
26716: NEG
26717: PUSH
26718: EMPTY
26719: LIST
26720: LIST
26721: PUSH
26722: LD_INT 1
26724: PUSH
26725: LD_INT 0
26727: PUSH
26728: EMPTY
26729: LIST
26730: LIST
26731: PUSH
26732: LD_INT 1
26734: PUSH
26735: LD_INT 1
26737: PUSH
26738: EMPTY
26739: LIST
26740: LIST
26741: PUSH
26742: LD_INT 0
26744: PUSH
26745: LD_INT 1
26747: PUSH
26748: EMPTY
26749: LIST
26750: LIST
26751: PUSH
26752: LD_INT 1
26754: NEG
26755: PUSH
26756: LD_INT 0
26758: PUSH
26759: EMPTY
26760: LIST
26761: LIST
26762: PUSH
26763: LD_INT 1
26765: NEG
26766: PUSH
26767: LD_INT 1
26769: NEG
26770: PUSH
26771: EMPTY
26772: LIST
26773: LIST
26774: PUSH
26775: LD_INT 1
26777: NEG
26778: PUSH
26779: LD_INT 2
26781: NEG
26782: PUSH
26783: EMPTY
26784: LIST
26785: LIST
26786: PUSH
26787: LD_INT 0
26789: PUSH
26790: LD_INT 2
26792: NEG
26793: PUSH
26794: EMPTY
26795: LIST
26796: LIST
26797: PUSH
26798: LD_INT 1
26800: PUSH
26801: LD_INT 1
26803: NEG
26804: PUSH
26805: EMPTY
26806: LIST
26807: LIST
26808: PUSH
26809: LD_INT 2
26811: PUSH
26812: LD_INT 0
26814: PUSH
26815: EMPTY
26816: LIST
26817: LIST
26818: PUSH
26819: LD_INT 2
26821: PUSH
26822: LD_INT 1
26824: PUSH
26825: EMPTY
26826: LIST
26827: LIST
26828: PUSH
26829: LD_INT 2
26831: PUSH
26832: LD_INT 2
26834: PUSH
26835: EMPTY
26836: LIST
26837: LIST
26838: PUSH
26839: LD_INT 1
26841: PUSH
26842: LD_INT 2
26844: PUSH
26845: EMPTY
26846: LIST
26847: LIST
26848: PUSH
26849: LD_INT 0
26851: PUSH
26852: LD_INT 2
26854: PUSH
26855: EMPTY
26856: LIST
26857: LIST
26858: PUSH
26859: LD_INT 1
26861: NEG
26862: PUSH
26863: LD_INT 1
26865: PUSH
26866: EMPTY
26867: LIST
26868: LIST
26869: PUSH
26870: LD_INT 2
26872: NEG
26873: PUSH
26874: LD_INT 0
26876: PUSH
26877: EMPTY
26878: LIST
26879: LIST
26880: PUSH
26881: LD_INT 2
26883: NEG
26884: PUSH
26885: LD_INT 1
26887: NEG
26888: PUSH
26889: EMPTY
26890: LIST
26891: LIST
26892: PUSH
26893: LD_INT 2
26895: NEG
26896: PUSH
26897: LD_INT 2
26899: NEG
26900: PUSH
26901: EMPTY
26902: LIST
26903: LIST
26904: PUSH
26905: EMPTY
26906: LIST
26907: LIST
26908: LIST
26909: LIST
26910: LIST
26911: LIST
26912: LIST
26913: LIST
26914: LIST
26915: LIST
26916: LIST
26917: LIST
26918: LIST
26919: LIST
26920: LIST
26921: LIST
26922: LIST
26923: LIST
26924: LIST
26925: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26926: LD_ADDR_VAR 0 54
26930: PUSH
26931: LD_INT 0
26933: PUSH
26934: LD_INT 0
26936: PUSH
26937: EMPTY
26938: LIST
26939: LIST
26940: PUSH
26941: LD_INT 0
26943: PUSH
26944: LD_INT 1
26946: NEG
26947: PUSH
26948: EMPTY
26949: LIST
26950: LIST
26951: PUSH
26952: LD_INT 1
26954: PUSH
26955: LD_INT 0
26957: PUSH
26958: EMPTY
26959: LIST
26960: LIST
26961: PUSH
26962: LD_INT 1
26964: PUSH
26965: LD_INT 1
26967: PUSH
26968: EMPTY
26969: LIST
26970: LIST
26971: PUSH
26972: LD_INT 0
26974: PUSH
26975: LD_INT 1
26977: PUSH
26978: EMPTY
26979: LIST
26980: LIST
26981: PUSH
26982: LD_INT 1
26984: NEG
26985: PUSH
26986: LD_INT 0
26988: PUSH
26989: EMPTY
26990: LIST
26991: LIST
26992: PUSH
26993: LD_INT 1
26995: NEG
26996: PUSH
26997: LD_INT 1
26999: NEG
27000: PUSH
27001: EMPTY
27002: LIST
27003: LIST
27004: PUSH
27005: LD_INT 1
27007: NEG
27008: PUSH
27009: LD_INT 2
27011: NEG
27012: PUSH
27013: EMPTY
27014: LIST
27015: LIST
27016: PUSH
27017: LD_INT 0
27019: PUSH
27020: LD_INT 2
27022: NEG
27023: PUSH
27024: EMPTY
27025: LIST
27026: LIST
27027: PUSH
27028: LD_INT 1
27030: PUSH
27031: LD_INT 1
27033: NEG
27034: PUSH
27035: EMPTY
27036: LIST
27037: LIST
27038: PUSH
27039: LD_INT 2
27041: PUSH
27042: LD_INT 0
27044: PUSH
27045: EMPTY
27046: LIST
27047: LIST
27048: PUSH
27049: LD_INT 2
27051: PUSH
27052: LD_INT 1
27054: PUSH
27055: EMPTY
27056: LIST
27057: LIST
27058: PUSH
27059: LD_INT 2
27061: PUSH
27062: LD_INT 2
27064: PUSH
27065: EMPTY
27066: LIST
27067: LIST
27068: PUSH
27069: LD_INT 1
27071: PUSH
27072: LD_INT 2
27074: PUSH
27075: EMPTY
27076: LIST
27077: LIST
27078: PUSH
27079: LD_INT 0
27081: PUSH
27082: LD_INT 2
27084: PUSH
27085: EMPTY
27086: LIST
27087: LIST
27088: PUSH
27089: LD_INT 1
27091: NEG
27092: PUSH
27093: LD_INT 1
27095: PUSH
27096: EMPTY
27097: LIST
27098: LIST
27099: PUSH
27100: LD_INT 2
27102: NEG
27103: PUSH
27104: LD_INT 0
27106: PUSH
27107: EMPTY
27108: LIST
27109: LIST
27110: PUSH
27111: LD_INT 2
27113: NEG
27114: PUSH
27115: LD_INT 1
27117: NEG
27118: PUSH
27119: EMPTY
27120: LIST
27121: LIST
27122: PUSH
27123: LD_INT 2
27125: NEG
27126: PUSH
27127: LD_INT 2
27129: NEG
27130: PUSH
27131: EMPTY
27132: LIST
27133: LIST
27134: PUSH
27135: EMPTY
27136: LIST
27137: LIST
27138: LIST
27139: LIST
27140: LIST
27141: LIST
27142: LIST
27143: LIST
27144: LIST
27145: LIST
27146: LIST
27147: LIST
27148: LIST
27149: LIST
27150: LIST
27151: LIST
27152: LIST
27153: LIST
27154: LIST
27155: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27156: LD_ADDR_VAR 0 55
27160: PUSH
27161: LD_INT 0
27163: PUSH
27164: LD_INT 0
27166: PUSH
27167: EMPTY
27168: LIST
27169: LIST
27170: PUSH
27171: LD_INT 0
27173: PUSH
27174: LD_INT 1
27176: NEG
27177: PUSH
27178: EMPTY
27179: LIST
27180: LIST
27181: PUSH
27182: LD_INT 1
27184: PUSH
27185: LD_INT 0
27187: PUSH
27188: EMPTY
27189: LIST
27190: LIST
27191: PUSH
27192: LD_INT 1
27194: PUSH
27195: LD_INT 1
27197: PUSH
27198: EMPTY
27199: LIST
27200: LIST
27201: PUSH
27202: LD_INT 0
27204: PUSH
27205: LD_INT 1
27207: PUSH
27208: EMPTY
27209: LIST
27210: LIST
27211: PUSH
27212: LD_INT 1
27214: NEG
27215: PUSH
27216: LD_INT 0
27218: PUSH
27219: EMPTY
27220: LIST
27221: LIST
27222: PUSH
27223: LD_INT 1
27225: NEG
27226: PUSH
27227: LD_INT 1
27229: NEG
27230: PUSH
27231: EMPTY
27232: LIST
27233: LIST
27234: PUSH
27235: LD_INT 1
27237: NEG
27238: PUSH
27239: LD_INT 2
27241: NEG
27242: PUSH
27243: EMPTY
27244: LIST
27245: LIST
27246: PUSH
27247: LD_INT 0
27249: PUSH
27250: LD_INT 2
27252: NEG
27253: PUSH
27254: EMPTY
27255: LIST
27256: LIST
27257: PUSH
27258: LD_INT 1
27260: PUSH
27261: LD_INT 1
27263: NEG
27264: PUSH
27265: EMPTY
27266: LIST
27267: LIST
27268: PUSH
27269: LD_INT 2
27271: PUSH
27272: LD_INT 0
27274: PUSH
27275: EMPTY
27276: LIST
27277: LIST
27278: PUSH
27279: LD_INT 2
27281: PUSH
27282: LD_INT 1
27284: PUSH
27285: EMPTY
27286: LIST
27287: LIST
27288: PUSH
27289: LD_INT 2
27291: PUSH
27292: LD_INT 2
27294: PUSH
27295: EMPTY
27296: LIST
27297: LIST
27298: PUSH
27299: LD_INT 1
27301: PUSH
27302: LD_INT 2
27304: PUSH
27305: EMPTY
27306: LIST
27307: LIST
27308: PUSH
27309: LD_INT 0
27311: PUSH
27312: LD_INT 2
27314: PUSH
27315: EMPTY
27316: LIST
27317: LIST
27318: PUSH
27319: LD_INT 1
27321: NEG
27322: PUSH
27323: LD_INT 1
27325: PUSH
27326: EMPTY
27327: LIST
27328: LIST
27329: PUSH
27330: LD_INT 2
27332: NEG
27333: PUSH
27334: LD_INT 0
27336: PUSH
27337: EMPTY
27338: LIST
27339: LIST
27340: PUSH
27341: LD_INT 2
27343: NEG
27344: PUSH
27345: LD_INT 1
27347: NEG
27348: PUSH
27349: EMPTY
27350: LIST
27351: LIST
27352: PUSH
27353: LD_INT 2
27355: NEG
27356: PUSH
27357: LD_INT 2
27359: NEG
27360: PUSH
27361: EMPTY
27362: LIST
27363: LIST
27364: PUSH
27365: EMPTY
27366: LIST
27367: LIST
27368: LIST
27369: LIST
27370: LIST
27371: LIST
27372: LIST
27373: LIST
27374: LIST
27375: LIST
27376: LIST
27377: LIST
27378: LIST
27379: LIST
27380: LIST
27381: LIST
27382: LIST
27383: LIST
27384: LIST
27385: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27386: LD_ADDR_VAR 0 56
27390: PUSH
27391: LD_INT 0
27393: PUSH
27394: LD_INT 0
27396: PUSH
27397: EMPTY
27398: LIST
27399: LIST
27400: PUSH
27401: LD_INT 0
27403: PUSH
27404: LD_INT 1
27406: NEG
27407: PUSH
27408: EMPTY
27409: LIST
27410: LIST
27411: PUSH
27412: LD_INT 1
27414: PUSH
27415: LD_INT 0
27417: PUSH
27418: EMPTY
27419: LIST
27420: LIST
27421: PUSH
27422: LD_INT 1
27424: PUSH
27425: LD_INT 1
27427: PUSH
27428: EMPTY
27429: LIST
27430: LIST
27431: PUSH
27432: LD_INT 0
27434: PUSH
27435: LD_INT 1
27437: PUSH
27438: EMPTY
27439: LIST
27440: LIST
27441: PUSH
27442: LD_INT 1
27444: NEG
27445: PUSH
27446: LD_INT 0
27448: PUSH
27449: EMPTY
27450: LIST
27451: LIST
27452: PUSH
27453: LD_INT 1
27455: NEG
27456: PUSH
27457: LD_INT 1
27459: NEG
27460: PUSH
27461: EMPTY
27462: LIST
27463: LIST
27464: PUSH
27465: LD_INT 1
27467: NEG
27468: PUSH
27469: LD_INT 2
27471: NEG
27472: PUSH
27473: EMPTY
27474: LIST
27475: LIST
27476: PUSH
27477: LD_INT 0
27479: PUSH
27480: LD_INT 2
27482: NEG
27483: PUSH
27484: EMPTY
27485: LIST
27486: LIST
27487: PUSH
27488: LD_INT 1
27490: PUSH
27491: LD_INT 1
27493: NEG
27494: PUSH
27495: EMPTY
27496: LIST
27497: LIST
27498: PUSH
27499: LD_INT 2
27501: PUSH
27502: LD_INT 0
27504: PUSH
27505: EMPTY
27506: LIST
27507: LIST
27508: PUSH
27509: LD_INT 2
27511: PUSH
27512: LD_INT 1
27514: PUSH
27515: EMPTY
27516: LIST
27517: LIST
27518: PUSH
27519: LD_INT 2
27521: PUSH
27522: LD_INT 2
27524: PUSH
27525: EMPTY
27526: LIST
27527: LIST
27528: PUSH
27529: LD_INT 1
27531: PUSH
27532: LD_INT 2
27534: PUSH
27535: EMPTY
27536: LIST
27537: LIST
27538: PUSH
27539: LD_INT 0
27541: PUSH
27542: LD_INT 2
27544: PUSH
27545: EMPTY
27546: LIST
27547: LIST
27548: PUSH
27549: LD_INT 1
27551: NEG
27552: PUSH
27553: LD_INT 1
27555: PUSH
27556: EMPTY
27557: LIST
27558: LIST
27559: PUSH
27560: LD_INT 2
27562: NEG
27563: PUSH
27564: LD_INT 0
27566: PUSH
27567: EMPTY
27568: LIST
27569: LIST
27570: PUSH
27571: LD_INT 2
27573: NEG
27574: PUSH
27575: LD_INT 1
27577: NEG
27578: PUSH
27579: EMPTY
27580: LIST
27581: LIST
27582: PUSH
27583: LD_INT 2
27585: NEG
27586: PUSH
27587: LD_INT 2
27589: NEG
27590: PUSH
27591: EMPTY
27592: LIST
27593: LIST
27594: PUSH
27595: EMPTY
27596: LIST
27597: LIST
27598: LIST
27599: LIST
27600: LIST
27601: LIST
27602: LIST
27603: LIST
27604: LIST
27605: LIST
27606: LIST
27607: LIST
27608: LIST
27609: LIST
27610: LIST
27611: LIST
27612: LIST
27613: LIST
27614: LIST
27615: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27616: LD_ADDR_VAR 0 57
27620: PUSH
27621: LD_INT 0
27623: PUSH
27624: LD_INT 0
27626: PUSH
27627: EMPTY
27628: LIST
27629: LIST
27630: PUSH
27631: LD_INT 0
27633: PUSH
27634: LD_INT 1
27636: NEG
27637: PUSH
27638: EMPTY
27639: LIST
27640: LIST
27641: PUSH
27642: LD_INT 1
27644: PUSH
27645: LD_INT 0
27647: PUSH
27648: EMPTY
27649: LIST
27650: LIST
27651: PUSH
27652: LD_INT 1
27654: PUSH
27655: LD_INT 1
27657: PUSH
27658: EMPTY
27659: LIST
27660: LIST
27661: PUSH
27662: LD_INT 0
27664: PUSH
27665: LD_INT 1
27667: PUSH
27668: EMPTY
27669: LIST
27670: LIST
27671: PUSH
27672: LD_INT 1
27674: NEG
27675: PUSH
27676: LD_INT 0
27678: PUSH
27679: EMPTY
27680: LIST
27681: LIST
27682: PUSH
27683: LD_INT 1
27685: NEG
27686: PUSH
27687: LD_INT 1
27689: NEG
27690: PUSH
27691: EMPTY
27692: LIST
27693: LIST
27694: PUSH
27695: LD_INT 1
27697: NEG
27698: PUSH
27699: LD_INT 2
27701: NEG
27702: PUSH
27703: EMPTY
27704: LIST
27705: LIST
27706: PUSH
27707: LD_INT 0
27709: PUSH
27710: LD_INT 2
27712: NEG
27713: PUSH
27714: EMPTY
27715: LIST
27716: LIST
27717: PUSH
27718: LD_INT 1
27720: PUSH
27721: LD_INT 1
27723: NEG
27724: PUSH
27725: EMPTY
27726: LIST
27727: LIST
27728: PUSH
27729: LD_INT 2
27731: PUSH
27732: LD_INT 0
27734: PUSH
27735: EMPTY
27736: LIST
27737: LIST
27738: PUSH
27739: LD_INT 2
27741: PUSH
27742: LD_INT 1
27744: PUSH
27745: EMPTY
27746: LIST
27747: LIST
27748: PUSH
27749: LD_INT 2
27751: PUSH
27752: LD_INT 2
27754: PUSH
27755: EMPTY
27756: LIST
27757: LIST
27758: PUSH
27759: LD_INT 1
27761: PUSH
27762: LD_INT 2
27764: PUSH
27765: EMPTY
27766: LIST
27767: LIST
27768: PUSH
27769: LD_INT 0
27771: PUSH
27772: LD_INT 2
27774: PUSH
27775: EMPTY
27776: LIST
27777: LIST
27778: PUSH
27779: LD_INT 1
27781: NEG
27782: PUSH
27783: LD_INT 1
27785: PUSH
27786: EMPTY
27787: LIST
27788: LIST
27789: PUSH
27790: LD_INT 2
27792: NEG
27793: PUSH
27794: LD_INT 0
27796: PUSH
27797: EMPTY
27798: LIST
27799: LIST
27800: PUSH
27801: LD_INT 2
27803: NEG
27804: PUSH
27805: LD_INT 1
27807: NEG
27808: PUSH
27809: EMPTY
27810: LIST
27811: LIST
27812: PUSH
27813: LD_INT 2
27815: NEG
27816: PUSH
27817: LD_INT 2
27819: NEG
27820: PUSH
27821: EMPTY
27822: LIST
27823: LIST
27824: PUSH
27825: EMPTY
27826: LIST
27827: LIST
27828: LIST
27829: LIST
27830: LIST
27831: LIST
27832: LIST
27833: LIST
27834: LIST
27835: LIST
27836: LIST
27837: LIST
27838: LIST
27839: LIST
27840: LIST
27841: LIST
27842: LIST
27843: LIST
27844: LIST
27845: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27846: LD_ADDR_VAR 0 58
27850: PUSH
27851: LD_INT 0
27853: PUSH
27854: LD_INT 0
27856: PUSH
27857: EMPTY
27858: LIST
27859: LIST
27860: PUSH
27861: LD_INT 0
27863: PUSH
27864: LD_INT 1
27866: NEG
27867: PUSH
27868: EMPTY
27869: LIST
27870: LIST
27871: PUSH
27872: LD_INT 1
27874: PUSH
27875: LD_INT 0
27877: PUSH
27878: EMPTY
27879: LIST
27880: LIST
27881: PUSH
27882: LD_INT 1
27884: PUSH
27885: LD_INT 1
27887: PUSH
27888: EMPTY
27889: LIST
27890: LIST
27891: PUSH
27892: LD_INT 0
27894: PUSH
27895: LD_INT 1
27897: PUSH
27898: EMPTY
27899: LIST
27900: LIST
27901: PUSH
27902: LD_INT 1
27904: NEG
27905: PUSH
27906: LD_INT 0
27908: PUSH
27909: EMPTY
27910: LIST
27911: LIST
27912: PUSH
27913: LD_INT 1
27915: NEG
27916: PUSH
27917: LD_INT 1
27919: NEG
27920: PUSH
27921: EMPTY
27922: LIST
27923: LIST
27924: PUSH
27925: LD_INT 1
27927: NEG
27928: PUSH
27929: LD_INT 2
27931: NEG
27932: PUSH
27933: EMPTY
27934: LIST
27935: LIST
27936: PUSH
27937: LD_INT 0
27939: PUSH
27940: LD_INT 2
27942: NEG
27943: PUSH
27944: EMPTY
27945: LIST
27946: LIST
27947: PUSH
27948: LD_INT 1
27950: PUSH
27951: LD_INT 1
27953: NEG
27954: PUSH
27955: EMPTY
27956: LIST
27957: LIST
27958: PUSH
27959: LD_INT 2
27961: PUSH
27962: LD_INT 0
27964: PUSH
27965: EMPTY
27966: LIST
27967: LIST
27968: PUSH
27969: LD_INT 2
27971: PUSH
27972: LD_INT 1
27974: PUSH
27975: EMPTY
27976: LIST
27977: LIST
27978: PUSH
27979: LD_INT 2
27981: PUSH
27982: LD_INT 2
27984: PUSH
27985: EMPTY
27986: LIST
27987: LIST
27988: PUSH
27989: LD_INT 1
27991: PUSH
27992: LD_INT 2
27994: PUSH
27995: EMPTY
27996: LIST
27997: LIST
27998: PUSH
27999: LD_INT 0
28001: PUSH
28002: LD_INT 2
28004: PUSH
28005: EMPTY
28006: LIST
28007: LIST
28008: PUSH
28009: LD_INT 1
28011: NEG
28012: PUSH
28013: LD_INT 1
28015: PUSH
28016: EMPTY
28017: LIST
28018: LIST
28019: PUSH
28020: LD_INT 2
28022: NEG
28023: PUSH
28024: LD_INT 0
28026: PUSH
28027: EMPTY
28028: LIST
28029: LIST
28030: PUSH
28031: LD_INT 2
28033: NEG
28034: PUSH
28035: LD_INT 1
28037: NEG
28038: PUSH
28039: EMPTY
28040: LIST
28041: LIST
28042: PUSH
28043: LD_INT 2
28045: NEG
28046: PUSH
28047: LD_INT 2
28049: NEG
28050: PUSH
28051: EMPTY
28052: LIST
28053: LIST
28054: PUSH
28055: EMPTY
28056: LIST
28057: LIST
28058: LIST
28059: LIST
28060: LIST
28061: LIST
28062: LIST
28063: LIST
28064: LIST
28065: LIST
28066: LIST
28067: LIST
28068: LIST
28069: LIST
28070: LIST
28071: LIST
28072: LIST
28073: LIST
28074: LIST
28075: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28076: LD_ADDR_VAR 0 59
28080: PUSH
28081: LD_INT 0
28083: PUSH
28084: LD_INT 0
28086: PUSH
28087: EMPTY
28088: LIST
28089: LIST
28090: PUSH
28091: LD_INT 0
28093: PUSH
28094: LD_INT 1
28096: NEG
28097: PUSH
28098: EMPTY
28099: LIST
28100: LIST
28101: PUSH
28102: LD_INT 1
28104: PUSH
28105: LD_INT 0
28107: PUSH
28108: EMPTY
28109: LIST
28110: LIST
28111: PUSH
28112: LD_INT 1
28114: PUSH
28115: LD_INT 1
28117: PUSH
28118: EMPTY
28119: LIST
28120: LIST
28121: PUSH
28122: LD_INT 0
28124: PUSH
28125: LD_INT 1
28127: PUSH
28128: EMPTY
28129: LIST
28130: LIST
28131: PUSH
28132: LD_INT 1
28134: NEG
28135: PUSH
28136: LD_INT 0
28138: PUSH
28139: EMPTY
28140: LIST
28141: LIST
28142: PUSH
28143: LD_INT 1
28145: NEG
28146: PUSH
28147: LD_INT 1
28149: NEG
28150: PUSH
28151: EMPTY
28152: LIST
28153: LIST
28154: PUSH
28155: EMPTY
28156: LIST
28157: LIST
28158: LIST
28159: LIST
28160: LIST
28161: LIST
28162: LIST
28163: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28164: LD_ADDR_VAR 0 60
28168: PUSH
28169: LD_INT 0
28171: PUSH
28172: LD_INT 0
28174: PUSH
28175: EMPTY
28176: LIST
28177: LIST
28178: PUSH
28179: LD_INT 0
28181: PUSH
28182: LD_INT 1
28184: NEG
28185: PUSH
28186: EMPTY
28187: LIST
28188: LIST
28189: PUSH
28190: LD_INT 1
28192: PUSH
28193: LD_INT 0
28195: PUSH
28196: EMPTY
28197: LIST
28198: LIST
28199: PUSH
28200: LD_INT 1
28202: PUSH
28203: LD_INT 1
28205: PUSH
28206: EMPTY
28207: LIST
28208: LIST
28209: PUSH
28210: LD_INT 0
28212: PUSH
28213: LD_INT 1
28215: PUSH
28216: EMPTY
28217: LIST
28218: LIST
28219: PUSH
28220: LD_INT 1
28222: NEG
28223: PUSH
28224: LD_INT 0
28226: PUSH
28227: EMPTY
28228: LIST
28229: LIST
28230: PUSH
28231: LD_INT 1
28233: NEG
28234: PUSH
28235: LD_INT 1
28237: NEG
28238: PUSH
28239: EMPTY
28240: LIST
28241: LIST
28242: PUSH
28243: EMPTY
28244: LIST
28245: LIST
28246: LIST
28247: LIST
28248: LIST
28249: LIST
28250: LIST
28251: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28252: LD_ADDR_VAR 0 61
28256: PUSH
28257: LD_INT 0
28259: PUSH
28260: LD_INT 0
28262: PUSH
28263: EMPTY
28264: LIST
28265: LIST
28266: PUSH
28267: LD_INT 0
28269: PUSH
28270: LD_INT 1
28272: NEG
28273: PUSH
28274: EMPTY
28275: LIST
28276: LIST
28277: PUSH
28278: LD_INT 1
28280: PUSH
28281: LD_INT 0
28283: PUSH
28284: EMPTY
28285: LIST
28286: LIST
28287: PUSH
28288: LD_INT 1
28290: PUSH
28291: LD_INT 1
28293: PUSH
28294: EMPTY
28295: LIST
28296: LIST
28297: PUSH
28298: LD_INT 0
28300: PUSH
28301: LD_INT 1
28303: PUSH
28304: EMPTY
28305: LIST
28306: LIST
28307: PUSH
28308: LD_INT 1
28310: NEG
28311: PUSH
28312: LD_INT 0
28314: PUSH
28315: EMPTY
28316: LIST
28317: LIST
28318: PUSH
28319: LD_INT 1
28321: NEG
28322: PUSH
28323: LD_INT 1
28325: NEG
28326: PUSH
28327: EMPTY
28328: LIST
28329: LIST
28330: PUSH
28331: EMPTY
28332: LIST
28333: LIST
28334: LIST
28335: LIST
28336: LIST
28337: LIST
28338: LIST
28339: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28340: LD_ADDR_VAR 0 62
28344: PUSH
28345: LD_INT 0
28347: PUSH
28348: LD_INT 0
28350: PUSH
28351: EMPTY
28352: LIST
28353: LIST
28354: PUSH
28355: LD_INT 0
28357: PUSH
28358: LD_INT 1
28360: NEG
28361: PUSH
28362: EMPTY
28363: LIST
28364: LIST
28365: PUSH
28366: LD_INT 1
28368: PUSH
28369: LD_INT 0
28371: PUSH
28372: EMPTY
28373: LIST
28374: LIST
28375: PUSH
28376: LD_INT 1
28378: PUSH
28379: LD_INT 1
28381: PUSH
28382: EMPTY
28383: LIST
28384: LIST
28385: PUSH
28386: LD_INT 0
28388: PUSH
28389: LD_INT 1
28391: PUSH
28392: EMPTY
28393: LIST
28394: LIST
28395: PUSH
28396: LD_INT 1
28398: NEG
28399: PUSH
28400: LD_INT 0
28402: PUSH
28403: EMPTY
28404: LIST
28405: LIST
28406: PUSH
28407: LD_INT 1
28409: NEG
28410: PUSH
28411: LD_INT 1
28413: NEG
28414: PUSH
28415: EMPTY
28416: LIST
28417: LIST
28418: PUSH
28419: EMPTY
28420: LIST
28421: LIST
28422: LIST
28423: LIST
28424: LIST
28425: LIST
28426: LIST
28427: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28428: LD_ADDR_VAR 0 63
28432: PUSH
28433: LD_INT 0
28435: PUSH
28436: LD_INT 0
28438: PUSH
28439: EMPTY
28440: LIST
28441: LIST
28442: PUSH
28443: LD_INT 0
28445: PUSH
28446: LD_INT 1
28448: NEG
28449: PUSH
28450: EMPTY
28451: LIST
28452: LIST
28453: PUSH
28454: LD_INT 1
28456: PUSH
28457: LD_INT 0
28459: PUSH
28460: EMPTY
28461: LIST
28462: LIST
28463: PUSH
28464: LD_INT 1
28466: PUSH
28467: LD_INT 1
28469: PUSH
28470: EMPTY
28471: LIST
28472: LIST
28473: PUSH
28474: LD_INT 0
28476: PUSH
28477: LD_INT 1
28479: PUSH
28480: EMPTY
28481: LIST
28482: LIST
28483: PUSH
28484: LD_INT 1
28486: NEG
28487: PUSH
28488: LD_INT 0
28490: PUSH
28491: EMPTY
28492: LIST
28493: LIST
28494: PUSH
28495: LD_INT 1
28497: NEG
28498: PUSH
28499: LD_INT 1
28501: NEG
28502: PUSH
28503: EMPTY
28504: LIST
28505: LIST
28506: PUSH
28507: EMPTY
28508: LIST
28509: LIST
28510: LIST
28511: LIST
28512: LIST
28513: LIST
28514: LIST
28515: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28516: LD_ADDR_VAR 0 64
28520: PUSH
28521: LD_INT 0
28523: PUSH
28524: LD_INT 0
28526: PUSH
28527: EMPTY
28528: LIST
28529: LIST
28530: PUSH
28531: LD_INT 0
28533: PUSH
28534: LD_INT 1
28536: NEG
28537: PUSH
28538: EMPTY
28539: LIST
28540: LIST
28541: PUSH
28542: LD_INT 1
28544: PUSH
28545: LD_INT 0
28547: PUSH
28548: EMPTY
28549: LIST
28550: LIST
28551: PUSH
28552: LD_INT 1
28554: PUSH
28555: LD_INT 1
28557: PUSH
28558: EMPTY
28559: LIST
28560: LIST
28561: PUSH
28562: LD_INT 0
28564: PUSH
28565: LD_INT 1
28567: PUSH
28568: EMPTY
28569: LIST
28570: LIST
28571: PUSH
28572: LD_INT 1
28574: NEG
28575: PUSH
28576: LD_INT 0
28578: PUSH
28579: EMPTY
28580: LIST
28581: LIST
28582: PUSH
28583: LD_INT 1
28585: NEG
28586: PUSH
28587: LD_INT 1
28589: NEG
28590: PUSH
28591: EMPTY
28592: LIST
28593: LIST
28594: PUSH
28595: EMPTY
28596: LIST
28597: LIST
28598: LIST
28599: LIST
28600: LIST
28601: LIST
28602: LIST
28603: ST_TO_ADDR
// end ; 1 :
28604: GO 34501
28606: LD_INT 1
28608: DOUBLE
28609: EQUAL
28610: IFTRUE 28614
28612: GO 31237
28614: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28615: LD_ADDR_VAR 0 11
28619: PUSH
28620: LD_INT 1
28622: NEG
28623: PUSH
28624: LD_INT 3
28626: NEG
28627: PUSH
28628: EMPTY
28629: LIST
28630: LIST
28631: PUSH
28632: LD_INT 0
28634: PUSH
28635: LD_INT 3
28637: NEG
28638: PUSH
28639: EMPTY
28640: LIST
28641: LIST
28642: PUSH
28643: LD_INT 1
28645: PUSH
28646: LD_INT 2
28648: NEG
28649: PUSH
28650: EMPTY
28651: LIST
28652: LIST
28653: PUSH
28654: EMPTY
28655: LIST
28656: LIST
28657: LIST
28658: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28659: LD_ADDR_VAR 0 12
28663: PUSH
28664: LD_INT 2
28666: PUSH
28667: LD_INT 1
28669: NEG
28670: PUSH
28671: EMPTY
28672: LIST
28673: LIST
28674: PUSH
28675: LD_INT 3
28677: PUSH
28678: LD_INT 0
28680: PUSH
28681: EMPTY
28682: LIST
28683: LIST
28684: PUSH
28685: LD_INT 3
28687: PUSH
28688: LD_INT 1
28690: PUSH
28691: EMPTY
28692: LIST
28693: LIST
28694: PUSH
28695: EMPTY
28696: LIST
28697: LIST
28698: LIST
28699: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28700: LD_ADDR_VAR 0 13
28704: PUSH
28705: LD_INT 3
28707: PUSH
28708: LD_INT 2
28710: PUSH
28711: EMPTY
28712: LIST
28713: LIST
28714: PUSH
28715: LD_INT 3
28717: PUSH
28718: LD_INT 3
28720: PUSH
28721: EMPTY
28722: LIST
28723: LIST
28724: PUSH
28725: LD_INT 2
28727: PUSH
28728: LD_INT 3
28730: PUSH
28731: EMPTY
28732: LIST
28733: LIST
28734: PUSH
28735: EMPTY
28736: LIST
28737: LIST
28738: LIST
28739: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
28740: LD_ADDR_VAR 0 14
28744: PUSH
28745: LD_INT 1
28747: PUSH
28748: LD_INT 3
28750: PUSH
28751: EMPTY
28752: LIST
28753: LIST
28754: PUSH
28755: LD_INT 0
28757: PUSH
28758: LD_INT 3
28760: PUSH
28761: EMPTY
28762: LIST
28763: LIST
28764: PUSH
28765: LD_INT 1
28767: NEG
28768: PUSH
28769: LD_INT 2
28771: PUSH
28772: EMPTY
28773: LIST
28774: LIST
28775: PUSH
28776: EMPTY
28777: LIST
28778: LIST
28779: LIST
28780: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28781: LD_ADDR_VAR 0 15
28785: PUSH
28786: LD_INT 2
28788: NEG
28789: PUSH
28790: LD_INT 1
28792: PUSH
28793: EMPTY
28794: LIST
28795: LIST
28796: PUSH
28797: LD_INT 3
28799: NEG
28800: PUSH
28801: LD_INT 0
28803: PUSH
28804: EMPTY
28805: LIST
28806: LIST
28807: PUSH
28808: LD_INT 3
28810: NEG
28811: PUSH
28812: LD_INT 1
28814: NEG
28815: PUSH
28816: EMPTY
28817: LIST
28818: LIST
28819: PUSH
28820: EMPTY
28821: LIST
28822: LIST
28823: LIST
28824: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28825: LD_ADDR_VAR 0 16
28829: PUSH
28830: LD_INT 2
28832: NEG
28833: PUSH
28834: LD_INT 3
28836: NEG
28837: PUSH
28838: EMPTY
28839: LIST
28840: LIST
28841: PUSH
28842: LD_INT 3
28844: NEG
28845: PUSH
28846: LD_INT 2
28848: NEG
28849: PUSH
28850: EMPTY
28851: LIST
28852: LIST
28853: PUSH
28854: LD_INT 3
28856: NEG
28857: PUSH
28858: LD_INT 3
28860: NEG
28861: PUSH
28862: EMPTY
28863: LIST
28864: LIST
28865: PUSH
28866: EMPTY
28867: LIST
28868: LIST
28869: LIST
28870: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28871: LD_ADDR_VAR 0 17
28875: PUSH
28876: LD_INT 1
28878: NEG
28879: PUSH
28880: LD_INT 3
28882: NEG
28883: PUSH
28884: EMPTY
28885: LIST
28886: LIST
28887: PUSH
28888: LD_INT 0
28890: PUSH
28891: LD_INT 3
28893: NEG
28894: PUSH
28895: EMPTY
28896: LIST
28897: LIST
28898: PUSH
28899: LD_INT 1
28901: PUSH
28902: LD_INT 2
28904: NEG
28905: PUSH
28906: EMPTY
28907: LIST
28908: LIST
28909: PUSH
28910: EMPTY
28911: LIST
28912: LIST
28913: LIST
28914: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28915: LD_ADDR_VAR 0 18
28919: PUSH
28920: LD_INT 2
28922: PUSH
28923: LD_INT 1
28925: NEG
28926: PUSH
28927: EMPTY
28928: LIST
28929: LIST
28930: PUSH
28931: LD_INT 3
28933: PUSH
28934: LD_INT 0
28936: PUSH
28937: EMPTY
28938: LIST
28939: LIST
28940: PUSH
28941: LD_INT 3
28943: PUSH
28944: LD_INT 1
28946: PUSH
28947: EMPTY
28948: LIST
28949: LIST
28950: PUSH
28951: EMPTY
28952: LIST
28953: LIST
28954: LIST
28955: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28956: LD_ADDR_VAR 0 19
28960: PUSH
28961: LD_INT 3
28963: PUSH
28964: LD_INT 2
28966: PUSH
28967: EMPTY
28968: LIST
28969: LIST
28970: PUSH
28971: LD_INT 3
28973: PUSH
28974: LD_INT 3
28976: PUSH
28977: EMPTY
28978: LIST
28979: LIST
28980: PUSH
28981: LD_INT 2
28983: PUSH
28984: LD_INT 3
28986: PUSH
28987: EMPTY
28988: LIST
28989: LIST
28990: PUSH
28991: EMPTY
28992: LIST
28993: LIST
28994: LIST
28995: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
28996: LD_ADDR_VAR 0 20
29000: PUSH
29001: LD_INT 1
29003: PUSH
29004: LD_INT 3
29006: PUSH
29007: EMPTY
29008: LIST
29009: LIST
29010: PUSH
29011: LD_INT 0
29013: PUSH
29014: LD_INT 3
29016: PUSH
29017: EMPTY
29018: LIST
29019: LIST
29020: PUSH
29021: LD_INT 1
29023: NEG
29024: PUSH
29025: LD_INT 2
29027: PUSH
29028: EMPTY
29029: LIST
29030: LIST
29031: PUSH
29032: EMPTY
29033: LIST
29034: LIST
29035: LIST
29036: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29037: LD_ADDR_VAR 0 21
29041: PUSH
29042: LD_INT 2
29044: NEG
29045: PUSH
29046: LD_INT 1
29048: PUSH
29049: EMPTY
29050: LIST
29051: LIST
29052: PUSH
29053: LD_INT 3
29055: NEG
29056: PUSH
29057: LD_INT 0
29059: PUSH
29060: EMPTY
29061: LIST
29062: LIST
29063: PUSH
29064: LD_INT 3
29066: NEG
29067: PUSH
29068: LD_INT 1
29070: NEG
29071: PUSH
29072: EMPTY
29073: LIST
29074: LIST
29075: PUSH
29076: EMPTY
29077: LIST
29078: LIST
29079: LIST
29080: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29081: LD_ADDR_VAR 0 22
29085: PUSH
29086: LD_INT 2
29088: NEG
29089: PUSH
29090: LD_INT 3
29092: NEG
29093: PUSH
29094: EMPTY
29095: LIST
29096: LIST
29097: PUSH
29098: LD_INT 3
29100: NEG
29101: PUSH
29102: LD_INT 2
29104: NEG
29105: PUSH
29106: EMPTY
29107: LIST
29108: LIST
29109: PUSH
29110: LD_INT 3
29112: NEG
29113: PUSH
29114: LD_INT 3
29116: NEG
29117: PUSH
29118: EMPTY
29119: LIST
29120: LIST
29121: PUSH
29122: EMPTY
29123: LIST
29124: LIST
29125: LIST
29126: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
29127: LD_ADDR_VAR 0 23
29131: PUSH
29132: LD_INT 0
29134: PUSH
29135: LD_INT 3
29137: NEG
29138: PUSH
29139: EMPTY
29140: LIST
29141: LIST
29142: PUSH
29143: LD_INT 1
29145: NEG
29146: PUSH
29147: LD_INT 4
29149: NEG
29150: PUSH
29151: EMPTY
29152: LIST
29153: LIST
29154: PUSH
29155: LD_INT 1
29157: PUSH
29158: LD_INT 3
29160: NEG
29161: PUSH
29162: EMPTY
29163: LIST
29164: LIST
29165: PUSH
29166: EMPTY
29167: LIST
29168: LIST
29169: LIST
29170: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
29171: LD_ADDR_VAR 0 24
29175: PUSH
29176: LD_INT 3
29178: PUSH
29179: LD_INT 0
29181: PUSH
29182: EMPTY
29183: LIST
29184: LIST
29185: PUSH
29186: LD_INT 3
29188: PUSH
29189: LD_INT 1
29191: NEG
29192: PUSH
29193: EMPTY
29194: LIST
29195: LIST
29196: PUSH
29197: LD_INT 4
29199: PUSH
29200: LD_INT 1
29202: PUSH
29203: EMPTY
29204: LIST
29205: LIST
29206: PUSH
29207: EMPTY
29208: LIST
29209: LIST
29210: LIST
29211: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
29212: LD_ADDR_VAR 0 25
29216: PUSH
29217: LD_INT 3
29219: PUSH
29220: LD_INT 3
29222: PUSH
29223: EMPTY
29224: LIST
29225: LIST
29226: PUSH
29227: LD_INT 4
29229: PUSH
29230: LD_INT 3
29232: PUSH
29233: EMPTY
29234: LIST
29235: LIST
29236: PUSH
29237: LD_INT 3
29239: PUSH
29240: LD_INT 4
29242: PUSH
29243: EMPTY
29244: LIST
29245: LIST
29246: PUSH
29247: EMPTY
29248: LIST
29249: LIST
29250: LIST
29251: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
29252: LD_ADDR_VAR 0 26
29256: PUSH
29257: LD_INT 0
29259: PUSH
29260: LD_INT 3
29262: PUSH
29263: EMPTY
29264: LIST
29265: LIST
29266: PUSH
29267: LD_INT 1
29269: PUSH
29270: LD_INT 4
29272: PUSH
29273: EMPTY
29274: LIST
29275: LIST
29276: PUSH
29277: LD_INT 1
29279: NEG
29280: PUSH
29281: LD_INT 3
29283: PUSH
29284: EMPTY
29285: LIST
29286: LIST
29287: PUSH
29288: EMPTY
29289: LIST
29290: LIST
29291: LIST
29292: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
29293: LD_ADDR_VAR 0 27
29297: PUSH
29298: LD_INT 3
29300: NEG
29301: PUSH
29302: LD_INT 0
29304: PUSH
29305: EMPTY
29306: LIST
29307: LIST
29308: PUSH
29309: LD_INT 3
29311: NEG
29312: PUSH
29313: LD_INT 1
29315: PUSH
29316: EMPTY
29317: LIST
29318: LIST
29319: PUSH
29320: LD_INT 4
29322: NEG
29323: PUSH
29324: LD_INT 1
29326: NEG
29327: PUSH
29328: EMPTY
29329: LIST
29330: LIST
29331: PUSH
29332: EMPTY
29333: LIST
29334: LIST
29335: LIST
29336: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
29337: LD_ADDR_VAR 0 28
29341: PUSH
29342: LD_INT 3
29344: NEG
29345: PUSH
29346: LD_INT 3
29348: NEG
29349: PUSH
29350: EMPTY
29351: LIST
29352: LIST
29353: PUSH
29354: LD_INT 3
29356: NEG
29357: PUSH
29358: LD_INT 4
29360: NEG
29361: PUSH
29362: EMPTY
29363: LIST
29364: LIST
29365: PUSH
29366: LD_INT 4
29368: NEG
29369: PUSH
29370: LD_INT 3
29372: NEG
29373: PUSH
29374: EMPTY
29375: LIST
29376: LIST
29377: PUSH
29378: EMPTY
29379: LIST
29380: LIST
29381: LIST
29382: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
29383: LD_ADDR_VAR 0 29
29387: PUSH
29388: LD_INT 1
29390: NEG
29391: PUSH
29392: LD_INT 3
29394: NEG
29395: PUSH
29396: EMPTY
29397: LIST
29398: LIST
29399: PUSH
29400: LD_INT 0
29402: PUSH
29403: LD_INT 3
29405: NEG
29406: PUSH
29407: EMPTY
29408: LIST
29409: LIST
29410: PUSH
29411: LD_INT 1
29413: PUSH
29414: LD_INT 2
29416: NEG
29417: PUSH
29418: EMPTY
29419: LIST
29420: LIST
29421: PUSH
29422: LD_INT 1
29424: NEG
29425: PUSH
29426: LD_INT 4
29428: NEG
29429: PUSH
29430: EMPTY
29431: LIST
29432: LIST
29433: PUSH
29434: LD_INT 0
29436: PUSH
29437: LD_INT 4
29439: NEG
29440: PUSH
29441: EMPTY
29442: LIST
29443: LIST
29444: PUSH
29445: LD_INT 1
29447: PUSH
29448: LD_INT 3
29450: NEG
29451: PUSH
29452: EMPTY
29453: LIST
29454: LIST
29455: PUSH
29456: LD_INT 1
29458: NEG
29459: PUSH
29460: LD_INT 5
29462: NEG
29463: PUSH
29464: EMPTY
29465: LIST
29466: LIST
29467: PUSH
29468: LD_INT 0
29470: PUSH
29471: LD_INT 5
29473: NEG
29474: PUSH
29475: EMPTY
29476: LIST
29477: LIST
29478: PUSH
29479: LD_INT 1
29481: PUSH
29482: LD_INT 4
29484: NEG
29485: PUSH
29486: EMPTY
29487: LIST
29488: LIST
29489: PUSH
29490: LD_INT 1
29492: NEG
29493: PUSH
29494: LD_INT 6
29496: NEG
29497: PUSH
29498: EMPTY
29499: LIST
29500: LIST
29501: PUSH
29502: LD_INT 0
29504: PUSH
29505: LD_INT 6
29507: NEG
29508: PUSH
29509: EMPTY
29510: LIST
29511: LIST
29512: PUSH
29513: LD_INT 1
29515: PUSH
29516: LD_INT 5
29518: NEG
29519: PUSH
29520: EMPTY
29521: LIST
29522: LIST
29523: PUSH
29524: EMPTY
29525: LIST
29526: LIST
29527: LIST
29528: LIST
29529: LIST
29530: LIST
29531: LIST
29532: LIST
29533: LIST
29534: LIST
29535: LIST
29536: LIST
29537: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
29538: LD_ADDR_VAR 0 30
29542: PUSH
29543: LD_INT 2
29545: PUSH
29546: LD_INT 1
29548: NEG
29549: PUSH
29550: EMPTY
29551: LIST
29552: LIST
29553: PUSH
29554: LD_INT 3
29556: PUSH
29557: LD_INT 0
29559: PUSH
29560: EMPTY
29561: LIST
29562: LIST
29563: PUSH
29564: LD_INT 3
29566: PUSH
29567: LD_INT 1
29569: PUSH
29570: EMPTY
29571: LIST
29572: LIST
29573: PUSH
29574: LD_INT 3
29576: PUSH
29577: LD_INT 1
29579: NEG
29580: PUSH
29581: EMPTY
29582: LIST
29583: LIST
29584: PUSH
29585: LD_INT 4
29587: PUSH
29588: LD_INT 0
29590: PUSH
29591: EMPTY
29592: LIST
29593: LIST
29594: PUSH
29595: LD_INT 4
29597: PUSH
29598: LD_INT 1
29600: PUSH
29601: EMPTY
29602: LIST
29603: LIST
29604: PUSH
29605: LD_INT 4
29607: PUSH
29608: LD_INT 1
29610: NEG
29611: PUSH
29612: EMPTY
29613: LIST
29614: LIST
29615: PUSH
29616: LD_INT 5
29618: PUSH
29619: LD_INT 0
29621: PUSH
29622: EMPTY
29623: LIST
29624: LIST
29625: PUSH
29626: LD_INT 5
29628: PUSH
29629: LD_INT 1
29631: PUSH
29632: EMPTY
29633: LIST
29634: LIST
29635: PUSH
29636: LD_INT 5
29638: PUSH
29639: LD_INT 1
29641: NEG
29642: PUSH
29643: EMPTY
29644: LIST
29645: LIST
29646: PUSH
29647: LD_INT 6
29649: PUSH
29650: LD_INT 0
29652: PUSH
29653: EMPTY
29654: LIST
29655: LIST
29656: PUSH
29657: LD_INT 6
29659: PUSH
29660: LD_INT 1
29662: PUSH
29663: EMPTY
29664: LIST
29665: LIST
29666: PUSH
29667: EMPTY
29668: LIST
29669: LIST
29670: LIST
29671: LIST
29672: LIST
29673: LIST
29674: LIST
29675: LIST
29676: LIST
29677: LIST
29678: LIST
29679: LIST
29680: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
29681: LD_ADDR_VAR 0 31
29685: PUSH
29686: LD_INT 3
29688: PUSH
29689: LD_INT 2
29691: PUSH
29692: EMPTY
29693: LIST
29694: LIST
29695: PUSH
29696: LD_INT 3
29698: PUSH
29699: LD_INT 3
29701: PUSH
29702: EMPTY
29703: LIST
29704: LIST
29705: PUSH
29706: LD_INT 2
29708: PUSH
29709: LD_INT 3
29711: PUSH
29712: EMPTY
29713: LIST
29714: LIST
29715: PUSH
29716: LD_INT 4
29718: PUSH
29719: LD_INT 3
29721: PUSH
29722: EMPTY
29723: LIST
29724: LIST
29725: PUSH
29726: LD_INT 4
29728: PUSH
29729: LD_INT 4
29731: PUSH
29732: EMPTY
29733: LIST
29734: LIST
29735: PUSH
29736: LD_INT 3
29738: PUSH
29739: LD_INT 4
29741: PUSH
29742: EMPTY
29743: LIST
29744: LIST
29745: PUSH
29746: LD_INT 5
29748: PUSH
29749: LD_INT 4
29751: PUSH
29752: EMPTY
29753: LIST
29754: LIST
29755: PUSH
29756: LD_INT 5
29758: PUSH
29759: LD_INT 5
29761: PUSH
29762: EMPTY
29763: LIST
29764: LIST
29765: PUSH
29766: LD_INT 4
29768: PUSH
29769: LD_INT 5
29771: PUSH
29772: EMPTY
29773: LIST
29774: LIST
29775: PUSH
29776: LD_INT 6
29778: PUSH
29779: LD_INT 5
29781: PUSH
29782: EMPTY
29783: LIST
29784: LIST
29785: PUSH
29786: LD_INT 6
29788: PUSH
29789: LD_INT 6
29791: PUSH
29792: EMPTY
29793: LIST
29794: LIST
29795: PUSH
29796: LD_INT 5
29798: PUSH
29799: LD_INT 6
29801: PUSH
29802: EMPTY
29803: LIST
29804: LIST
29805: PUSH
29806: EMPTY
29807: LIST
29808: LIST
29809: LIST
29810: LIST
29811: LIST
29812: LIST
29813: LIST
29814: LIST
29815: LIST
29816: LIST
29817: LIST
29818: LIST
29819: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
29820: LD_ADDR_VAR 0 32
29824: PUSH
29825: LD_INT 1
29827: PUSH
29828: LD_INT 3
29830: PUSH
29831: EMPTY
29832: LIST
29833: LIST
29834: PUSH
29835: LD_INT 0
29837: PUSH
29838: LD_INT 3
29840: PUSH
29841: EMPTY
29842: LIST
29843: LIST
29844: PUSH
29845: LD_INT 1
29847: NEG
29848: PUSH
29849: LD_INT 2
29851: PUSH
29852: EMPTY
29853: LIST
29854: LIST
29855: PUSH
29856: LD_INT 1
29858: PUSH
29859: LD_INT 4
29861: PUSH
29862: EMPTY
29863: LIST
29864: LIST
29865: PUSH
29866: LD_INT 0
29868: PUSH
29869: LD_INT 4
29871: PUSH
29872: EMPTY
29873: LIST
29874: LIST
29875: PUSH
29876: LD_INT 1
29878: NEG
29879: PUSH
29880: LD_INT 3
29882: PUSH
29883: EMPTY
29884: LIST
29885: LIST
29886: PUSH
29887: LD_INT 1
29889: PUSH
29890: LD_INT 5
29892: PUSH
29893: EMPTY
29894: LIST
29895: LIST
29896: PUSH
29897: LD_INT 0
29899: PUSH
29900: LD_INT 5
29902: PUSH
29903: EMPTY
29904: LIST
29905: LIST
29906: PUSH
29907: LD_INT 1
29909: NEG
29910: PUSH
29911: LD_INT 4
29913: PUSH
29914: EMPTY
29915: LIST
29916: LIST
29917: PUSH
29918: LD_INT 1
29920: PUSH
29921: LD_INT 6
29923: PUSH
29924: EMPTY
29925: LIST
29926: LIST
29927: PUSH
29928: LD_INT 0
29930: PUSH
29931: LD_INT 6
29933: PUSH
29934: EMPTY
29935: LIST
29936: LIST
29937: PUSH
29938: LD_INT 1
29940: NEG
29941: PUSH
29942: LD_INT 5
29944: PUSH
29945: EMPTY
29946: LIST
29947: LIST
29948: PUSH
29949: EMPTY
29950: LIST
29951: LIST
29952: LIST
29953: LIST
29954: LIST
29955: LIST
29956: LIST
29957: LIST
29958: LIST
29959: LIST
29960: LIST
29961: LIST
29962: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
29963: LD_ADDR_VAR 0 33
29967: PUSH
29968: LD_INT 2
29970: NEG
29971: PUSH
29972: LD_INT 1
29974: PUSH
29975: EMPTY
29976: LIST
29977: LIST
29978: PUSH
29979: LD_INT 3
29981: NEG
29982: PUSH
29983: LD_INT 0
29985: PUSH
29986: EMPTY
29987: LIST
29988: LIST
29989: PUSH
29990: LD_INT 3
29992: NEG
29993: PUSH
29994: LD_INT 1
29996: NEG
29997: PUSH
29998: EMPTY
29999: LIST
30000: LIST
30001: PUSH
30002: LD_INT 3
30004: NEG
30005: PUSH
30006: LD_INT 1
30008: PUSH
30009: EMPTY
30010: LIST
30011: LIST
30012: PUSH
30013: LD_INT 4
30015: NEG
30016: PUSH
30017: LD_INT 0
30019: PUSH
30020: EMPTY
30021: LIST
30022: LIST
30023: PUSH
30024: LD_INT 4
30026: NEG
30027: PUSH
30028: LD_INT 1
30030: NEG
30031: PUSH
30032: EMPTY
30033: LIST
30034: LIST
30035: PUSH
30036: LD_INT 4
30038: NEG
30039: PUSH
30040: LD_INT 1
30042: PUSH
30043: EMPTY
30044: LIST
30045: LIST
30046: PUSH
30047: LD_INT 5
30049: NEG
30050: PUSH
30051: LD_INT 0
30053: PUSH
30054: EMPTY
30055: LIST
30056: LIST
30057: PUSH
30058: LD_INT 5
30060: NEG
30061: PUSH
30062: LD_INT 1
30064: NEG
30065: PUSH
30066: EMPTY
30067: LIST
30068: LIST
30069: PUSH
30070: LD_INT 5
30072: NEG
30073: PUSH
30074: LD_INT 1
30076: PUSH
30077: EMPTY
30078: LIST
30079: LIST
30080: PUSH
30081: LD_INT 6
30083: NEG
30084: PUSH
30085: LD_INT 0
30087: PUSH
30088: EMPTY
30089: LIST
30090: LIST
30091: PUSH
30092: LD_INT 6
30094: NEG
30095: PUSH
30096: LD_INT 1
30098: NEG
30099: PUSH
30100: EMPTY
30101: LIST
30102: LIST
30103: PUSH
30104: EMPTY
30105: LIST
30106: LIST
30107: LIST
30108: LIST
30109: LIST
30110: LIST
30111: LIST
30112: LIST
30113: LIST
30114: LIST
30115: LIST
30116: LIST
30117: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
30118: LD_ADDR_VAR 0 34
30122: PUSH
30123: LD_INT 2
30125: NEG
30126: PUSH
30127: LD_INT 3
30129: NEG
30130: PUSH
30131: EMPTY
30132: LIST
30133: LIST
30134: PUSH
30135: LD_INT 3
30137: NEG
30138: PUSH
30139: LD_INT 2
30141: NEG
30142: PUSH
30143: EMPTY
30144: LIST
30145: LIST
30146: PUSH
30147: LD_INT 3
30149: NEG
30150: PUSH
30151: LD_INT 3
30153: NEG
30154: PUSH
30155: EMPTY
30156: LIST
30157: LIST
30158: PUSH
30159: LD_INT 3
30161: NEG
30162: PUSH
30163: LD_INT 4
30165: NEG
30166: PUSH
30167: EMPTY
30168: LIST
30169: LIST
30170: PUSH
30171: LD_INT 4
30173: NEG
30174: PUSH
30175: LD_INT 3
30177: NEG
30178: PUSH
30179: EMPTY
30180: LIST
30181: LIST
30182: PUSH
30183: LD_INT 4
30185: NEG
30186: PUSH
30187: LD_INT 4
30189: NEG
30190: PUSH
30191: EMPTY
30192: LIST
30193: LIST
30194: PUSH
30195: LD_INT 4
30197: NEG
30198: PUSH
30199: LD_INT 5
30201: NEG
30202: PUSH
30203: EMPTY
30204: LIST
30205: LIST
30206: PUSH
30207: LD_INT 5
30209: NEG
30210: PUSH
30211: LD_INT 4
30213: NEG
30214: PUSH
30215: EMPTY
30216: LIST
30217: LIST
30218: PUSH
30219: LD_INT 5
30221: NEG
30222: PUSH
30223: LD_INT 5
30225: NEG
30226: PUSH
30227: EMPTY
30228: LIST
30229: LIST
30230: PUSH
30231: LD_INT 5
30233: NEG
30234: PUSH
30235: LD_INT 6
30237: NEG
30238: PUSH
30239: EMPTY
30240: LIST
30241: LIST
30242: PUSH
30243: LD_INT 6
30245: NEG
30246: PUSH
30247: LD_INT 5
30249: NEG
30250: PUSH
30251: EMPTY
30252: LIST
30253: LIST
30254: PUSH
30255: LD_INT 6
30257: NEG
30258: PUSH
30259: LD_INT 6
30261: NEG
30262: PUSH
30263: EMPTY
30264: LIST
30265: LIST
30266: PUSH
30267: EMPTY
30268: LIST
30269: LIST
30270: LIST
30271: LIST
30272: LIST
30273: LIST
30274: LIST
30275: LIST
30276: LIST
30277: LIST
30278: LIST
30279: LIST
30280: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
30281: LD_ADDR_VAR 0 41
30285: PUSH
30286: LD_INT 0
30288: PUSH
30289: LD_INT 2
30291: NEG
30292: PUSH
30293: EMPTY
30294: LIST
30295: LIST
30296: PUSH
30297: LD_INT 1
30299: NEG
30300: PUSH
30301: LD_INT 3
30303: NEG
30304: PUSH
30305: EMPTY
30306: LIST
30307: LIST
30308: PUSH
30309: LD_INT 1
30311: PUSH
30312: LD_INT 2
30314: NEG
30315: PUSH
30316: EMPTY
30317: LIST
30318: LIST
30319: PUSH
30320: EMPTY
30321: LIST
30322: LIST
30323: LIST
30324: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
30325: LD_ADDR_VAR 0 42
30329: PUSH
30330: LD_INT 2
30332: PUSH
30333: LD_INT 0
30335: PUSH
30336: EMPTY
30337: LIST
30338: LIST
30339: PUSH
30340: LD_INT 2
30342: PUSH
30343: LD_INT 1
30345: NEG
30346: PUSH
30347: EMPTY
30348: LIST
30349: LIST
30350: PUSH
30351: LD_INT 3
30353: PUSH
30354: LD_INT 1
30356: PUSH
30357: EMPTY
30358: LIST
30359: LIST
30360: PUSH
30361: EMPTY
30362: LIST
30363: LIST
30364: LIST
30365: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
30366: LD_ADDR_VAR 0 43
30370: PUSH
30371: LD_INT 2
30373: PUSH
30374: LD_INT 2
30376: PUSH
30377: EMPTY
30378: LIST
30379: LIST
30380: PUSH
30381: LD_INT 3
30383: PUSH
30384: LD_INT 2
30386: PUSH
30387: EMPTY
30388: LIST
30389: LIST
30390: PUSH
30391: LD_INT 2
30393: PUSH
30394: LD_INT 3
30396: PUSH
30397: EMPTY
30398: LIST
30399: LIST
30400: PUSH
30401: EMPTY
30402: LIST
30403: LIST
30404: LIST
30405: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
30406: LD_ADDR_VAR 0 44
30410: PUSH
30411: LD_INT 0
30413: PUSH
30414: LD_INT 2
30416: PUSH
30417: EMPTY
30418: LIST
30419: LIST
30420: PUSH
30421: LD_INT 1
30423: PUSH
30424: LD_INT 3
30426: PUSH
30427: EMPTY
30428: LIST
30429: LIST
30430: PUSH
30431: LD_INT 1
30433: NEG
30434: PUSH
30435: LD_INT 2
30437: PUSH
30438: EMPTY
30439: LIST
30440: LIST
30441: PUSH
30442: EMPTY
30443: LIST
30444: LIST
30445: LIST
30446: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30447: LD_ADDR_VAR 0 45
30451: PUSH
30452: LD_INT 2
30454: NEG
30455: PUSH
30456: LD_INT 0
30458: PUSH
30459: EMPTY
30460: LIST
30461: LIST
30462: PUSH
30463: LD_INT 2
30465: NEG
30466: PUSH
30467: LD_INT 1
30469: PUSH
30470: EMPTY
30471: LIST
30472: LIST
30473: PUSH
30474: LD_INT 3
30476: NEG
30477: PUSH
30478: LD_INT 1
30480: NEG
30481: PUSH
30482: EMPTY
30483: LIST
30484: LIST
30485: PUSH
30486: EMPTY
30487: LIST
30488: LIST
30489: LIST
30490: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
30491: LD_ADDR_VAR 0 46
30495: PUSH
30496: LD_INT 2
30498: NEG
30499: PUSH
30500: LD_INT 2
30502: NEG
30503: PUSH
30504: EMPTY
30505: LIST
30506: LIST
30507: PUSH
30508: LD_INT 2
30510: NEG
30511: PUSH
30512: LD_INT 3
30514: NEG
30515: PUSH
30516: EMPTY
30517: LIST
30518: LIST
30519: PUSH
30520: LD_INT 3
30522: NEG
30523: PUSH
30524: LD_INT 2
30526: NEG
30527: PUSH
30528: EMPTY
30529: LIST
30530: LIST
30531: PUSH
30532: EMPTY
30533: LIST
30534: LIST
30535: LIST
30536: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
30537: LD_ADDR_VAR 0 47
30541: PUSH
30542: LD_INT 2
30544: NEG
30545: PUSH
30546: LD_INT 3
30548: NEG
30549: PUSH
30550: EMPTY
30551: LIST
30552: LIST
30553: PUSH
30554: LD_INT 1
30556: NEG
30557: PUSH
30558: LD_INT 3
30560: NEG
30561: PUSH
30562: EMPTY
30563: LIST
30564: LIST
30565: PUSH
30566: EMPTY
30567: LIST
30568: LIST
30569: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
30570: LD_ADDR_VAR 0 48
30574: PUSH
30575: LD_INT 1
30577: PUSH
30578: LD_INT 2
30580: NEG
30581: PUSH
30582: EMPTY
30583: LIST
30584: LIST
30585: PUSH
30586: LD_INT 2
30588: PUSH
30589: LD_INT 1
30591: NEG
30592: PUSH
30593: EMPTY
30594: LIST
30595: LIST
30596: PUSH
30597: EMPTY
30598: LIST
30599: LIST
30600: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
30601: LD_ADDR_VAR 0 49
30605: PUSH
30606: LD_INT 3
30608: PUSH
30609: LD_INT 1
30611: PUSH
30612: EMPTY
30613: LIST
30614: LIST
30615: PUSH
30616: LD_INT 3
30618: PUSH
30619: LD_INT 2
30621: PUSH
30622: EMPTY
30623: LIST
30624: LIST
30625: PUSH
30626: EMPTY
30627: LIST
30628: LIST
30629: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
30630: LD_ADDR_VAR 0 50
30634: PUSH
30635: LD_INT 2
30637: PUSH
30638: LD_INT 3
30640: PUSH
30641: EMPTY
30642: LIST
30643: LIST
30644: PUSH
30645: LD_INT 1
30647: PUSH
30648: LD_INT 3
30650: PUSH
30651: EMPTY
30652: LIST
30653: LIST
30654: PUSH
30655: EMPTY
30656: LIST
30657: LIST
30658: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
30659: LD_ADDR_VAR 0 51
30663: PUSH
30664: LD_INT 1
30666: NEG
30667: PUSH
30668: LD_INT 2
30670: PUSH
30671: EMPTY
30672: LIST
30673: LIST
30674: PUSH
30675: LD_INT 2
30677: NEG
30678: PUSH
30679: LD_INT 1
30681: PUSH
30682: EMPTY
30683: LIST
30684: LIST
30685: PUSH
30686: EMPTY
30687: LIST
30688: LIST
30689: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
30690: LD_ADDR_VAR 0 52
30694: PUSH
30695: LD_INT 3
30697: NEG
30698: PUSH
30699: LD_INT 1
30701: NEG
30702: PUSH
30703: EMPTY
30704: LIST
30705: LIST
30706: PUSH
30707: LD_INT 3
30709: NEG
30710: PUSH
30711: LD_INT 2
30713: NEG
30714: PUSH
30715: EMPTY
30716: LIST
30717: LIST
30718: PUSH
30719: EMPTY
30720: LIST
30721: LIST
30722: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30723: LD_ADDR_VAR 0 53
30727: PUSH
30728: LD_INT 1
30730: NEG
30731: PUSH
30732: LD_INT 3
30734: NEG
30735: PUSH
30736: EMPTY
30737: LIST
30738: LIST
30739: PUSH
30740: LD_INT 0
30742: PUSH
30743: LD_INT 3
30745: NEG
30746: PUSH
30747: EMPTY
30748: LIST
30749: LIST
30750: PUSH
30751: LD_INT 1
30753: PUSH
30754: LD_INT 2
30756: NEG
30757: PUSH
30758: EMPTY
30759: LIST
30760: LIST
30761: PUSH
30762: EMPTY
30763: LIST
30764: LIST
30765: LIST
30766: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30767: LD_ADDR_VAR 0 54
30771: PUSH
30772: LD_INT 2
30774: PUSH
30775: LD_INT 1
30777: NEG
30778: PUSH
30779: EMPTY
30780: LIST
30781: LIST
30782: PUSH
30783: LD_INT 3
30785: PUSH
30786: LD_INT 0
30788: PUSH
30789: EMPTY
30790: LIST
30791: LIST
30792: PUSH
30793: LD_INT 3
30795: PUSH
30796: LD_INT 1
30798: PUSH
30799: EMPTY
30800: LIST
30801: LIST
30802: PUSH
30803: EMPTY
30804: LIST
30805: LIST
30806: LIST
30807: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30808: LD_ADDR_VAR 0 55
30812: PUSH
30813: LD_INT 3
30815: PUSH
30816: LD_INT 2
30818: PUSH
30819: EMPTY
30820: LIST
30821: LIST
30822: PUSH
30823: LD_INT 3
30825: PUSH
30826: LD_INT 3
30828: PUSH
30829: EMPTY
30830: LIST
30831: LIST
30832: PUSH
30833: LD_INT 2
30835: PUSH
30836: LD_INT 3
30838: PUSH
30839: EMPTY
30840: LIST
30841: LIST
30842: PUSH
30843: EMPTY
30844: LIST
30845: LIST
30846: LIST
30847: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30848: LD_ADDR_VAR 0 56
30852: PUSH
30853: LD_INT 1
30855: PUSH
30856: LD_INT 3
30858: PUSH
30859: EMPTY
30860: LIST
30861: LIST
30862: PUSH
30863: LD_INT 0
30865: PUSH
30866: LD_INT 3
30868: PUSH
30869: EMPTY
30870: LIST
30871: LIST
30872: PUSH
30873: LD_INT 1
30875: NEG
30876: PUSH
30877: LD_INT 2
30879: PUSH
30880: EMPTY
30881: LIST
30882: LIST
30883: PUSH
30884: EMPTY
30885: LIST
30886: LIST
30887: LIST
30888: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30889: LD_ADDR_VAR 0 57
30893: PUSH
30894: LD_INT 2
30896: NEG
30897: PUSH
30898: LD_INT 1
30900: PUSH
30901: EMPTY
30902: LIST
30903: LIST
30904: PUSH
30905: LD_INT 3
30907: NEG
30908: PUSH
30909: LD_INT 0
30911: PUSH
30912: EMPTY
30913: LIST
30914: LIST
30915: PUSH
30916: LD_INT 3
30918: NEG
30919: PUSH
30920: LD_INT 1
30922: NEG
30923: PUSH
30924: EMPTY
30925: LIST
30926: LIST
30927: PUSH
30928: EMPTY
30929: LIST
30930: LIST
30931: LIST
30932: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30933: LD_ADDR_VAR 0 58
30937: PUSH
30938: LD_INT 2
30940: NEG
30941: PUSH
30942: LD_INT 3
30944: NEG
30945: PUSH
30946: EMPTY
30947: LIST
30948: LIST
30949: PUSH
30950: LD_INT 3
30952: NEG
30953: PUSH
30954: LD_INT 2
30956: NEG
30957: PUSH
30958: EMPTY
30959: LIST
30960: LIST
30961: PUSH
30962: LD_INT 3
30964: NEG
30965: PUSH
30966: LD_INT 3
30968: NEG
30969: PUSH
30970: EMPTY
30971: LIST
30972: LIST
30973: PUSH
30974: EMPTY
30975: LIST
30976: LIST
30977: LIST
30978: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
30979: LD_ADDR_VAR 0 59
30983: PUSH
30984: LD_INT 1
30986: NEG
30987: PUSH
30988: LD_INT 2
30990: NEG
30991: PUSH
30992: EMPTY
30993: LIST
30994: LIST
30995: PUSH
30996: LD_INT 0
30998: PUSH
30999: LD_INT 2
31001: NEG
31002: PUSH
31003: EMPTY
31004: LIST
31005: LIST
31006: PUSH
31007: LD_INT 1
31009: PUSH
31010: LD_INT 1
31012: NEG
31013: PUSH
31014: EMPTY
31015: LIST
31016: LIST
31017: PUSH
31018: EMPTY
31019: LIST
31020: LIST
31021: LIST
31022: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
31023: LD_ADDR_VAR 0 60
31027: PUSH
31028: LD_INT 1
31030: PUSH
31031: LD_INT 1
31033: NEG
31034: PUSH
31035: EMPTY
31036: LIST
31037: LIST
31038: PUSH
31039: LD_INT 2
31041: PUSH
31042: LD_INT 0
31044: PUSH
31045: EMPTY
31046: LIST
31047: LIST
31048: PUSH
31049: LD_INT 2
31051: PUSH
31052: LD_INT 1
31054: PUSH
31055: EMPTY
31056: LIST
31057: LIST
31058: PUSH
31059: EMPTY
31060: LIST
31061: LIST
31062: LIST
31063: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
31064: LD_ADDR_VAR 0 61
31068: PUSH
31069: LD_INT 2
31071: PUSH
31072: LD_INT 1
31074: PUSH
31075: EMPTY
31076: LIST
31077: LIST
31078: PUSH
31079: LD_INT 2
31081: PUSH
31082: LD_INT 2
31084: PUSH
31085: EMPTY
31086: LIST
31087: LIST
31088: PUSH
31089: LD_INT 1
31091: PUSH
31092: LD_INT 2
31094: PUSH
31095: EMPTY
31096: LIST
31097: LIST
31098: PUSH
31099: EMPTY
31100: LIST
31101: LIST
31102: LIST
31103: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
31104: LD_ADDR_VAR 0 62
31108: PUSH
31109: LD_INT 1
31111: PUSH
31112: LD_INT 2
31114: PUSH
31115: EMPTY
31116: LIST
31117: LIST
31118: PUSH
31119: LD_INT 0
31121: PUSH
31122: LD_INT 2
31124: PUSH
31125: EMPTY
31126: LIST
31127: LIST
31128: PUSH
31129: LD_INT 1
31131: NEG
31132: PUSH
31133: LD_INT 1
31135: PUSH
31136: EMPTY
31137: LIST
31138: LIST
31139: PUSH
31140: EMPTY
31141: LIST
31142: LIST
31143: LIST
31144: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
31145: LD_ADDR_VAR 0 63
31149: PUSH
31150: LD_INT 1
31152: NEG
31153: PUSH
31154: LD_INT 1
31156: PUSH
31157: EMPTY
31158: LIST
31159: LIST
31160: PUSH
31161: LD_INT 2
31163: NEG
31164: PUSH
31165: LD_INT 0
31167: PUSH
31168: EMPTY
31169: LIST
31170: LIST
31171: PUSH
31172: LD_INT 2
31174: NEG
31175: PUSH
31176: LD_INT 1
31178: NEG
31179: PUSH
31180: EMPTY
31181: LIST
31182: LIST
31183: PUSH
31184: EMPTY
31185: LIST
31186: LIST
31187: LIST
31188: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31189: LD_ADDR_VAR 0 64
31193: PUSH
31194: LD_INT 1
31196: NEG
31197: PUSH
31198: LD_INT 2
31200: NEG
31201: PUSH
31202: EMPTY
31203: LIST
31204: LIST
31205: PUSH
31206: LD_INT 2
31208: NEG
31209: PUSH
31210: LD_INT 1
31212: NEG
31213: PUSH
31214: EMPTY
31215: LIST
31216: LIST
31217: PUSH
31218: LD_INT 2
31220: NEG
31221: PUSH
31222: LD_INT 2
31224: NEG
31225: PUSH
31226: EMPTY
31227: LIST
31228: LIST
31229: PUSH
31230: EMPTY
31231: LIST
31232: LIST
31233: LIST
31234: ST_TO_ADDR
// end ; 2 :
31235: GO 34501
31237: LD_INT 2
31239: DOUBLE
31240: EQUAL
31241: IFTRUE 31245
31243: GO 34500
31245: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
31246: LD_ADDR_VAR 0 29
31250: PUSH
31251: LD_INT 4
31253: PUSH
31254: LD_INT 0
31256: PUSH
31257: EMPTY
31258: LIST
31259: LIST
31260: PUSH
31261: LD_INT 4
31263: PUSH
31264: LD_INT 1
31266: NEG
31267: PUSH
31268: EMPTY
31269: LIST
31270: LIST
31271: PUSH
31272: LD_INT 5
31274: PUSH
31275: LD_INT 0
31277: PUSH
31278: EMPTY
31279: LIST
31280: LIST
31281: PUSH
31282: LD_INT 5
31284: PUSH
31285: LD_INT 1
31287: PUSH
31288: EMPTY
31289: LIST
31290: LIST
31291: PUSH
31292: LD_INT 4
31294: PUSH
31295: LD_INT 1
31297: PUSH
31298: EMPTY
31299: LIST
31300: LIST
31301: PUSH
31302: LD_INT 3
31304: PUSH
31305: LD_INT 0
31307: PUSH
31308: EMPTY
31309: LIST
31310: LIST
31311: PUSH
31312: LD_INT 3
31314: PUSH
31315: LD_INT 1
31317: NEG
31318: PUSH
31319: EMPTY
31320: LIST
31321: LIST
31322: PUSH
31323: LD_INT 3
31325: PUSH
31326: LD_INT 2
31328: NEG
31329: PUSH
31330: EMPTY
31331: LIST
31332: LIST
31333: PUSH
31334: LD_INT 5
31336: PUSH
31337: LD_INT 2
31339: PUSH
31340: EMPTY
31341: LIST
31342: LIST
31343: PUSH
31344: LD_INT 3
31346: PUSH
31347: LD_INT 3
31349: PUSH
31350: EMPTY
31351: LIST
31352: LIST
31353: PUSH
31354: LD_INT 3
31356: PUSH
31357: LD_INT 2
31359: PUSH
31360: EMPTY
31361: LIST
31362: LIST
31363: PUSH
31364: LD_INT 4
31366: PUSH
31367: LD_INT 3
31369: PUSH
31370: EMPTY
31371: LIST
31372: LIST
31373: PUSH
31374: LD_INT 4
31376: PUSH
31377: LD_INT 4
31379: PUSH
31380: EMPTY
31381: LIST
31382: LIST
31383: PUSH
31384: LD_INT 3
31386: PUSH
31387: LD_INT 4
31389: PUSH
31390: EMPTY
31391: LIST
31392: LIST
31393: PUSH
31394: LD_INT 2
31396: PUSH
31397: LD_INT 3
31399: PUSH
31400: EMPTY
31401: LIST
31402: LIST
31403: PUSH
31404: LD_INT 2
31406: PUSH
31407: LD_INT 2
31409: PUSH
31410: EMPTY
31411: LIST
31412: LIST
31413: PUSH
31414: LD_INT 4
31416: PUSH
31417: LD_INT 2
31419: PUSH
31420: EMPTY
31421: LIST
31422: LIST
31423: PUSH
31424: LD_INT 2
31426: PUSH
31427: LD_INT 4
31429: PUSH
31430: EMPTY
31431: LIST
31432: LIST
31433: PUSH
31434: LD_INT 0
31436: PUSH
31437: LD_INT 4
31439: PUSH
31440: EMPTY
31441: LIST
31442: LIST
31443: PUSH
31444: LD_INT 0
31446: PUSH
31447: LD_INT 3
31449: PUSH
31450: EMPTY
31451: LIST
31452: LIST
31453: PUSH
31454: LD_INT 1
31456: PUSH
31457: LD_INT 4
31459: PUSH
31460: EMPTY
31461: LIST
31462: LIST
31463: PUSH
31464: LD_INT 1
31466: PUSH
31467: LD_INT 5
31469: PUSH
31470: EMPTY
31471: LIST
31472: LIST
31473: PUSH
31474: LD_INT 0
31476: PUSH
31477: LD_INT 5
31479: PUSH
31480: EMPTY
31481: LIST
31482: LIST
31483: PUSH
31484: LD_INT 1
31486: NEG
31487: PUSH
31488: LD_INT 4
31490: PUSH
31491: EMPTY
31492: LIST
31493: LIST
31494: PUSH
31495: LD_INT 1
31497: NEG
31498: PUSH
31499: LD_INT 3
31501: PUSH
31502: EMPTY
31503: LIST
31504: LIST
31505: PUSH
31506: LD_INT 2
31508: PUSH
31509: LD_INT 5
31511: PUSH
31512: EMPTY
31513: LIST
31514: LIST
31515: PUSH
31516: LD_INT 2
31518: NEG
31519: PUSH
31520: LD_INT 3
31522: PUSH
31523: EMPTY
31524: LIST
31525: LIST
31526: PUSH
31527: LD_INT 3
31529: NEG
31530: PUSH
31531: LD_INT 0
31533: PUSH
31534: EMPTY
31535: LIST
31536: LIST
31537: PUSH
31538: LD_INT 3
31540: NEG
31541: PUSH
31542: LD_INT 1
31544: NEG
31545: PUSH
31546: EMPTY
31547: LIST
31548: LIST
31549: PUSH
31550: LD_INT 2
31552: NEG
31553: PUSH
31554: LD_INT 0
31556: PUSH
31557: EMPTY
31558: LIST
31559: LIST
31560: PUSH
31561: LD_INT 2
31563: NEG
31564: PUSH
31565: LD_INT 1
31567: PUSH
31568: EMPTY
31569: LIST
31570: LIST
31571: PUSH
31572: LD_INT 3
31574: NEG
31575: PUSH
31576: LD_INT 1
31578: PUSH
31579: EMPTY
31580: LIST
31581: LIST
31582: PUSH
31583: LD_INT 4
31585: NEG
31586: PUSH
31587: LD_INT 0
31589: PUSH
31590: EMPTY
31591: LIST
31592: LIST
31593: PUSH
31594: LD_INT 4
31596: NEG
31597: PUSH
31598: LD_INT 1
31600: NEG
31601: PUSH
31602: EMPTY
31603: LIST
31604: LIST
31605: PUSH
31606: LD_INT 4
31608: NEG
31609: PUSH
31610: LD_INT 2
31612: NEG
31613: PUSH
31614: EMPTY
31615: LIST
31616: LIST
31617: PUSH
31618: LD_INT 2
31620: NEG
31621: PUSH
31622: LD_INT 2
31624: PUSH
31625: EMPTY
31626: LIST
31627: LIST
31628: PUSH
31629: LD_INT 4
31631: NEG
31632: PUSH
31633: LD_INT 4
31635: NEG
31636: PUSH
31637: EMPTY
31638: LIST
31639: LIST
31640: PUSH
31641: LD_INT 4
31643: NEG
31644: PUSH
31645: LD_INT 5
31647: NEG
31648: PUSH
31649: EMPTY
31650: LIST
31651: LIST
31652: PUSH
31653: LD_INT 3
31655: NEG
31656: PUSH
31657: LD_INT 4
31659: NEG
31660: PUSH
31661: EMPTY
31662: LIST
31663: LIST
31664: PUSH
31665: LD_INT 3
31667: NEG
31668: PUSH
31669: LD_INT 3
31671: NEG
31672: PUSH
31673: EMPTY
31674: LIST
31675: LIST
31676: PUSH
31677: LD_INT 4
31679: NEG
31680: PUSH
31681: LD_INT 3
31683: NEG
31684: PUSH
31685: EMPTY
31686: LIST
31687: LIST
31688: PUSH
31689: LD_INT 5
31691: NEG
31692: PUSH
31693: LD_INT 4
31695: NEG
31696: PUSH
31697: EMPTY
31698: LIST
31699: LIST
31700: PUSH
31701: LD_INT 5
31703: NEG
31704: PUSH
31705: LD_INT 5
31707: NEG
31708: PUSH
31709: EMPTY
31710: LIST
31711: LIST
31712: PUSH
31713: LD_INT 3
31715: NEG
31716: PUSH
31717: LD_INT 5
31719: NEG
31720: PUSH
31721: EMPTY
31722: LIST
31723: LIST
31724: PUSH
31725: LD_INT 5
31727: NEG
31728: PUSH
31729: LD_INT 3
31731: NEG
31732: PUSH
31733: EMPTY
31734: LIST
31735: LIST
31736: PUSH
31737: EMPTY
31738: LIST
31739: LIST
31740: LIST
31741: LIST
31742: LIST
31743: LIST
31744: LIST
31745: LIST
31746: LIST
31747: LIST
31748: LIST
31749: LIST
31750: LIST
31751: LIST
31752: LIST
31753: LIST
31754: LIST
31755: LIST
31756: LIST
31757: LIST
31758: LIST
31759: LIST
31760: LIST
31761: LIST
31762: LIST
31763: LIST
31764: LIST
31765: LIST
31766: LIST
31767: LIST
31768: LIST
31769: LIST
31770: LIST
31771: LIST
31772: LIST
31773: LIST
31774: LIST
31775: LIST
31776: LIST
31777: LIST
31778: LIST
31779: LIST
31780: LIST
31781: LIST
31782: LIST
31783: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
31784: LD_ADDR_VAR 0 30
31788: PUSH
31789: LD_INT 4
31791: PUSH
31792: LD_INT 4
31794: PUSH
31795: EMPTY
31796: LIST
31797: LIST
31798: PUSH
31799: LD_INT 4
31801: PUSH
31802: LD_INT 3
31804: PUSH
31805: EMPTY
31806: LIST
31807: LIST
31808: PUSH
31809: LD_INT 5
31811: PUSH
31812: LD_INT 4
31814: PUSH
31815: EMPTY
31816: LIST
31817: LIST
31818: PUSH
31819: LD_INT 5
31821: PUSH
31822: LD_INT 5
31824: PUSH
31825: EMPTY
31826: LIST
31827: LIST
31828: PUSH
31829: LD_INT 4
31831: PUSH
31832: LD_INT 5
31834: PUSH
31835: EMPTY
31836: LIST
31837: LIST
31838: PUSH
31839: LD_INT 3
31841: PUSH
31842: LD_INT 4
31844: PUSH
31845: EMPTY
31846: LIST
31847: LIST
31848: PUSH
31849: LD_INT 3
31851: PUSH
31852: LD_INT 3
31854: PUSH
31855: EMPTY
31856: LIST
31857: LIST
31858: PUSH
31859: LD_INT 5
31861: PUSH
31862: LD_INT 3
31864: PUSH
31865: EMPTY
31866: LIST
31867: LIST
31868: PUSH
31869: LD_INT 3
31871: PUSH
31872: LD_INT 5
31874: PUSH
31875: EMPTY
31876: LIST
31877: LIST
31878: PUSH
31879: LD_INT 0
31881: PUSH
31882: LD_INT 3
31884: PUSH
31885: EMPTY
31886: LIST
31887: LIST
31888: PUSH
31889: LD_INT 0
31891: PUSH
31892: LD_INT 2
31894: PUSH
31895: EMPTY
31896: LIST
31897: LIST
31898: PUSH
31899: LD_INT 1
31901: PUSH
31902: LD_INT 3
31904: PUSH
31905: EMPTY
31906: LIST
31907: LIST
31908: PUSH
31909: LD_INT 1
31911: PUSH
31912: LD_INT 4
31914: PUSH
31915: EMPTY
31916: LIST
31917: LIST
31918: PUSH
31919: LD_INT 0
31921: PUSH
31922: LD_INT 4
31924: PUSH
31925: EMPTY
31926: LIST
31927: LIST
31928: PUSH
31929: LD_INT 1
31931: NEG
31932: PUSH
31933: LD_INT 3
31935: PUSH
31936: EMPTY
31937: LIST
31938: LIST
31939: PUSH
31940: LD_INT 1
31942: NEG
31943: PUSH
31944: LD_INT 2
31946: PUSH
31947: EMPTY
31948: LIST
31949: LIST
31950: PUSH
31951: LD_INT 2
31953: PUSH
31954: LD_INT 4
31956: PUSH
31957: EMPTY
31958: LIST
31959: LIST
31960: PUSH
31961: LD_INT 2
31963: NEG
31964: PUSH
31965: LD_INT 2
31967: PUSH
31968: EMPTY
31969: LIST
31970: LIST
31971: PUSH
31972: LD_INT 4
31974: NEG
31975: PUSH
31976: LD_INT 0
31978: PUSH
31979: EMPTY
31980: LIST
31981: LIST
31982: PUSH
31983: LD_INT 4
31985: NEG
31986: PUSH
31987: LD_INT 1
31989: NEG
31990: PUSH
31991: EMPTY
31992: LIST
31993: LIST
31994: PUSH
31995: LD_INT 3
31997: NEG
31998: PUSH
31999: LD_INT 0
32001: PUSH
32002: EMPTY
32003: LIST
32004: LIST
32005: PUSH
32006: LD_INT 3
32008: NEG
32009: PUSH
32010: LD_INT 1
32012: PUSH
32013: EMPTY
32014: LIST
32015: LIST
32016: PUSH
32017: LD_INT 4
32019: NEG
32020: PUSH
32021: LD_INT 1
32023: PUSH
32024: EMPTY
32025: LIST
32026: LIST
32027: PUSH
32028: LD_INT 5
32030: NEG
32031: PUSH
32032: LD_INT 0
32034: PUSH
32035: EMPTY
32036: LIST
32037: LIST
32038: PUSH
32039: LD_INT 5
32041: NEG
32042: PUSH
32043: LD_INT 1
32045: NEG
32046: PUSH
32047: EMPTY
32048: LIST
32049: LIST
32050: PUSH
32051: LD_INT 5
32053: NEG
32054: PUSH
32055: LD_INT 2
32057: NEG
32058: PUSH
32059: EMPTY
32060: LIST
32061: LIST
32062: PUSH
32063: LD_INT 3
32065: NEG
32066: PUSH
32067: LD_INT 2
32069: PUSH
32070: EMPTY
32071: LIST
32072: LIST
32073: PUSH
32074: LD_INT 3
32076: NEG
32077: PUSH
32078: LD_INT 3
32080: NEG
32081: PUSH
32082: EMPTY
32083: LIST
32084: LIST
32085: PUSH
32086: LD_INT 3
32088: NEG
32089: PUSH
32090: LD_INT 4
32092: NEG
32093: PUSH
32094: EMPTY
32095: LIST
32096: LIST
32097: PUSH
32098: LD_INT 2
32100: NEG
32101: PUSH
32102: LD_INT 3
32104: NEG
32105: PUSH
32106: EMPTY
32107: LIST
32108: LIST
32109: PUSH
32110: LD_INT 2
32112: NEG
32113: PUSH
32114: LD_INT 2
32116: NEG
32117: PUSH
32118: EMPTY
32119: LIST
32120: LIST
32121: PUSH
32122: LD_INT 3
32124: NEG
32125: PUSH
32126: LD_INT 2
32128: NEG
32129: PUSH
32130: EMPTY
32131: LIST
32132: LIST
32133: PUSH
32134: LD_INT 4
32136: NEG
32137: PUSH
32138: LD_INT 3
32140: NEG
32141: PUSH
32142: EMPTY
32143: LIST
32144: LIST
32145: PUSH
32146: LD_INT 4
32148: NEG
32149: PUSH
32150: LD_INT 4
32152: NEG
32153: PUSH
32154: EMPTY
32155: LIST
32156: LIST
32157: PUSH
32158: LD_INT 2
32160: NEG
32161: PUSH
32162: LD_INT 4
32164: NEG
32165: PUSH
32166: EMPTY
32167: LIST
32168: LIST
32169: PUSH
32170: LD_INT 4
32172: NEG
32173: PUSH
32174: LD_INT 2
32176: NEG
32177: PUSH
32178: EMPTY
32179: LIST
32180: LIST
32181: PUSH
32182: LD_INT 0
32184: PUSH
32185: LD_INT 4
32187: NEG
32188: PUSH
32189: EMPTY
32190: LIST
32191: LIST
32192: PUSH
32193: LD_INT 0
32195: PUSH
32196: LD_INT 5
32198: NEG
32199: PUSH
32200: EMPTY
32201: LIST
32202: LIST
32203: PUSH
32204: LD_INT 1
32206: PUSH
32207: LD_INT 4
32209: NEG
32210: PUSH
32211: EMPTY
32212: LIST
32213: LIST
32214: PUSH
32215: LD_INT 1
32217: PUSH
32218: LD_INT 3
32220: NEG
32221: PUSH
32222: EMPTY
32223: LIST
32224: LIST
32225: PUSH
32226: LD_INT 0
32228: PUSH
32229: LD_INT 3
32231: NEG
32232: PUSH
32233: EMPTY
32234: LIST
32235: LIST
32236: PUSH
32237: LD_INT 1
32239: NEG
32240: PUSH
32241: LD_INT 4
32243: NEG
32244: PUSH
32245: EMPTY
32246: LIST
32247: LIST
32248: PUSH
32249: LD_INT 1
32251: NEG
32252: PUSH
32253: LD_INT 5
32255: NEG
32256: PUSH
32257: EMPTY
32258: LIST
32259: LIST
32260: PUSH
32261: LD_INT 2
32263: PUSH
32264: LD_INT 3
32266: NEG
32267: PUSH
32268: EMPTY
32269: LIST
32270: LIST
32271: PUSH
32272: LD_INT 2
32274: NEG
32275: PUSH
32276: LD_INT 5
32278: NEG
32279: PUSH
32280: EMPTY
32281: LIST
32282: LIST
32283: PUSH
32284: EMPTY
32285: LIST
32286: LIST
32287: LIST
32288: LIST
32289: LIST
32290: LIST
32291: LIST
32292: LIST
32293: LIST
32294: LIST
32295: LIST
32296: LIST
32297: LIST
32298: LIST
32299: LIST
32300: LIST
32301: LIST
32302: LIST
32303: LIST
32304: LIST
32305: LIST
32306: LIST
32307: LIST
32308: LIST
32309: LIST
32310: LIST
32311: LIST
32312: LIST
32313: LIST
32314: LIST
32315: LIST
32316: LIST
32317: LIST
32318: LIST
32319: LIST
32320: LIST
32321: LIST
32322: LIST
32323: LIST
32324: LIST
32325: LIST
32326: LIST
32327: LIST
32328: LIST
32329: LIST
32330: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
32331: LD_ADDR_VAR 0 31
32335: PUSH
32336: LD_INT 0
32338: PUSH
32339: LD_INT 4
32341: PUSH
32342: EMPTY
32343: LIST
32344: LIST
32345: PUSH
32346: LD_INT 0
32348: PUSH
32349: LD_INT 3
32351: PUSH
32352: EMPTY
32353: LIST
32354: LIST
32355: PUSH
32356: LD_INT 1
32358: PUSH
32359: LD_INT 4
32361: PUSH
32362: EMPTY
32363: LIST
32364: LIST
32365: PUSH
32366: LD_INT 1
32368: PUSH
32369: LD_INT 5
32371: PUSH
32372: EMPTY
32373: LIST
32374: LIST
32375: PUSH
32376: LD_INT 0
32378: PUSH
32379: LD_INT 5
32381: PUSH
32382: EMPTY
32383: LIST
32384: LIST
32385: PUSH
32386: LD_INT 1
32388: NEG
32389: PUSH
32390: LD_INT 4
32392: PUSH
32393: EMPTY
32394: LIST
32395: LIST
32396: PUSH
32397: LD_INT 1
32399: NEG
32400: PUSH
32401: LD_INT 3
32403: PUSH
32404: EMPTY
32405: LIST
32406: LIST
32407: PUSH
32408: LD_INT 2
32410: PUSH
32411: LD_INT 5
32413: PUSH
32414: EMPTY
32415: LIST
32416: LIST
32417: PUSH
32418: LD_INT 2
32420: NEG
32421: PUSH
32422: LD_INT 3
32424: PUSH
32425: EMPTY
32426: LIST
32427: LIST
32428: PUSH
32429: LD_INT 3
32431: NEG
32432: PUSH
32433: LD_INT 0
32435: PUSH
32436: EMPTY
32437: LIST
32438: LIST
32439: PUSH
32440: LD_INT 3
32442: NEG
32443: PUSH
32444: LD_INT 1
32446: NEG
32447: PUSH
32448: EMPTY
32449: LIST
32450: LIST
32451: PUSH
32452: LD_INT 2
32454: NEG
32455: PUSH
32456: LD_INT 0
32458: PUSH
32459: EMPTY
32460: LIST
32461: LIST
32462: PUSH
32463: LD_INT 2
32465: NEG
32466: PUSH
32467: LD_INT 1
32469: PUSH
32470: EMPTY
32471: LIST
32472: LIST
32473: PUSH
32474: LD_INT 3
32476: NEG
32477: PUSH
32478: LD_INT 1
32480: PUSH
32481: EMPTY
32482: LIST
32483: LIST
32484: PUSH
32485: LD_INT 4
32487: NEG
32488: PUSH
32489: LD_INT 0
32491: PUSH
32492: EMPTY
32493: LIST
32494: LIST
32495: PUSH
32496: LD_INT 4
32498: NEG
32499: PUSH
32500: LD_INT 1
32502: NEG
32503: PUSH
32504: EMPTY
32505: LIST
32506: LIST
32507: PUSH
32508: LD_INT 4
32510: NEG
32511: PUSH
32512: LD_INT 2
32514: NEG
32515: PUSH
32516: EMPTY
32517: LIST
32518: LIST
32519: PUSH
32520: LD_INT 2
32522: NEG
32523: PUSH
32524: LD_INT 2
32526: PUSH
32527: EMPTY
32528: LIST
32529: LIST
32530: PUSH
32531: LD_INT 4
32533: NEG
32534: PUSH
32535: LD_INT 4
32537: NEG
32538: PUSH
32539: EMPTY
32540: LIST
32541: LIST
32542: PUSH
32543: LD_INT 4
32545: NEG
32546: PUSH
32547: LD_INT 5
32549: NEG
32550: PUSH
32551: EMPTY
32552: LIST
32553: LIST
32554: PUSH
32555: LD_INT 3
32557: NEG
32558: PUSH
32559: LD_INT 4
32561: NEG
32562: PUSH
32563: EMPTY
32564: LIST
32565: LIST
32566: PUSH
32567: LD_INT 3
32569: NEG
32570: PUSH
32571: LD_INT 3
32573: NEG
32574: PUSH
32575: EMPTY
32576: LIST
32577: LIST
32578: PUSH
32579: LD_INT 4
32581: NEG
32582: PUSH
32583: LD_INT 3
32585: NEG
32586: PUSH
32587: EMPTY
32588: LIST
32589: LIST
32590: PUSH
32591: LD_INT 5
32593: NEG
32594: PUSH
32595: LD_INT 4
32597: NEG
32598: PUSH
32599: EMPTY
32600: LIST
32601: LIST
32602: PUSH
32603: LD_INT 5
32605: NEG
32606: PUSH
32607: LD_INT 5
32609: NEG
32610: PUSH
32611: EMPTY
32612: LIST
32613: LIST
32614: PUSH
32615: LD_INT 3
32617: NEG
32618: PUSH
32619: LD_INT 5
32621: NEG
32622: PUSH
32623: EMPTY
32624: LIST
32625: LIST
32626: PUSH
32627: LD_INT 5
32629: NEG
32630: PUSH
32631: LD_INT 3
32633: NEG
32634: PUSH
32635: EMPTY
32636: LIST
32637: LIST
32638: PUSH
32639: LD_INT 0
32641: PUSH
32642: LD_INT 3
32644: NEG
32645: PUSH
32646: EMPTY
32647: LIST
32648: LIST
32649: PUSH
32650: LD_INT 0
32652: PUSH
32653: LD_INT 4
32655: NEG
32656: PUSH
32657: EMPTY
32658: LIST
32659: LIST
32660: PUSH
32661: LD_INT 1
32663: PUSH
32664: LD_INT 3
32666: NEG
32667: PUSH
32668: EMPTY
32669: LIST
32670: LIST
32671: PUSH
32672: LD_INT 1
32674: PUSH
32675: LD_INT 2
32677: NEG
32678: PUSH
32679: EMPTY
32680: LIST
32681: LIST
32682: PUSH
32683: LD_INT 0
32685: PUSH
32686: LD_INT 2
32688: NEG
32689: PUSH
32690: EMPTY
32691: LIST
32692: LIST
32693: PUSH
32694: LD_INT 1
32696: NEG
32697: PUSH
32698: LD_INT 3
32700: NEG
32701: PUSH
32702: EMPTY
32703: LIST
32704: LIST
32705: PUSH
32706: LD_INT 1
32708: NEG
32709: PUSH
32710: LD_INT 4
32712: NEG
32713: PUSH
32714: EMPTY
32715: LIST
32716: LIST
32717: PUSH
32718: LD_INT 2
32720: PUSH
32721: LD_INT 2
32723: NEG
32724: PUSH
32725: EMPTY
32726: LIST
32727: LIST
32728: PUSH
32729: LD_INT 2
32731: NEG
32732: PUSH
32733: LD_INT 4
32735: NEG
32736: PUSH
32737: EMPTY
32738: LIST
32739: LIST
32740: PUSH
32741: LD_INT 4
32743: PUSH
32744: LD_INT 0
32746: PUSH
32747: EMPTY
32748: LIST
32749: LIST
32750: PUSH
32751: LD_INT 4
32753: PUSH
32754: LD_INT 1
32756: NEG
32757: PUSH
32758: EMPTY
32759: LIST
32760: LIST
32761: PUSH
32762: LD_INT 5
32764: PUSH
32765: LD_INT 0
32767: PUSH
32768: EMPTY
32769: LIST
32770: LIST
32771: PUSH
32772: LD_INT 5
32774: PUSH
32775: LD_INT 1
32777: PUSH
32778: EMPTY
32779: LIST
32780: LIST
32781: PUSH
32782: LD_INT 4
32784: PUSH
32785: LD_INT 1
32787: PUSH
32788: EMPTY
32789: LIST
32790: LIST
32791: PUSH
32792: LD_INT 3
32794: PUSH
32795: LD_INT 0
32797: PUSH
32798: EMPTY
32799: LIST
32800: LIST
32801: PUSH
32802: LD_INT 3
32804: PUSH
32805: LD_INT 1
32807: NEG
32808: PUSH
32809: EMPTY
32810: LIST
32811: LIST
32812: PUSH
32813: LD_INT 3
32815: PUSH
32816: LD_INT 2
32818: NEG
32819: PUSH
32820: EMPTY
32821: LIST
32822: LIST
32823: PUSH
32824: LD_INT 5
32826: PUSH
32827: LD_INT 2
32829: PUSH
32830: EMPTY
32831: LIST
32832: LIST
32833: PUSH
32834: EMPTY
32835: LIST
32836: LIST
32837: LIST
32838: LIST
32839: LIST
32840: LIST
32841: LIST
32842: LIST
32843: LIST
32844: LIST
32845: LIST
32846: LIST
32847: LIST
32848: LIST
32849: LIST
32850: LIST
32851: LIST
32852: LIST
32853: LIST
32854: LIST
32855: LIST
32856: LIST
32857: LIST
32858: LIST
32859: LIST
32860: LIST
32861: LIST
32862: LIST
32863: LIST
32864: LIST
32865: LIST
32866: LIST
32867: LIST
32868: LIST
32869: LIST
32870: LIST
32871: LIST
32872: LIST
32873: LIST
32874: LIST
32875: LIST
32876: LIST
32877: LIST
32878: LIST
32879: LIST
32880: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
32881: LD_ADDR_VAR 0 32
32885: PUSH
32886: LD_INT 4
32888: NEG
32889: PUSH
32890: LD_INT 0
32892: PUSH
32893: EMPTY
32894: LIST
32895: LIST
32896: PUSH
32897: LD_INT 4
32899: NEG
32900: PUSH
32901: LD_INT 1
32903: NEG
32904: PUSH
32905: EMPTY
32906: LIST
32907: LIST
32908: PUSH
32909: LD_INT 3
32911: NEG
32912: PUSH
32913: LD_INT 0
32915: PUSH
32916: EMPTY
32917: LIST
32918: LIST
32919: PUSH
32920: LD_INT 3
32922: NEG
32923: PUSH
32924: LD_INT 1
32926: PUSH
32927: EMPTY
32928: LIST
32929: LIST
32930: PUSH
32931: LD_INT 4
32933: NEG
32934: PUSH
32935: LD_INT 1
32937: PUSH
32938: EMPTY
32939: LIST
32940: LIST
32941: PUSH
32942: LD_INT 5
32944: NEG
32945: PUSH
32946: LD_INT 0
32948: PUSH
32949: EMPTY
32950: LIST
32951: LIST
32952: PUSH
32953: LD_INT 5
32955: NEG
32956: PUSH
32957: LD_INT 1
32959: NEG
32960: PUSH
32961: EMPTY
32962: LIST
32963: LIST
32964: PUSH
32965: LD_INT 5
32967: NEG
32968: PUSH
32969: LD_INT 2
32971: NEG
32972: PUSH
32973: EMPTY
32974: LIST
32975: LIST
32976: PUSH
32977: LD_INT 3
32979: NEG
32980: PUSH
32981: LD_INT 2
32983: PUSH
32984: EMPTY
32985: LIST
32986: LIST
32987: PUSH
32988: LD_INT 3
32990: NEG
32991: PUSH
32992: LD_INT 3
32994: NEG
32995: PUSH
32996: EMPTY
32997: LIST
32998: LIST
32999: PUSH
33000: LD_INT 3
33002: NEG
33003: PUSH
33004: LD_INT 4
33006: NEG
33007: PUSH
33008: EMPTY
33009: LIST
33010: LIST
33011: PUSH
33012: LD_INT 2
33014: NEG
33015: PUSH
33016: LD_INT 3
33018: NEG
33019: PUSH
33020: EMPTY
33021: LIST
33022: LIST
33023: PUSH
33024: LD_INT 2
33026: NEG
33027: PUSH
33028: LD_INT 2
33030: NEG
33031: PUSH
33032: EMPTY
33033: LIST
33034: LIST
33035: PUSH
33036: LD_INT 3
33038: NEG
33039: PUSH
33040: LD_INT 2
33042: NEG
33043: PUSH
33044: EMPTY
33045: LIST
33046: LIST
33047: PUSH
33048: LD_INT 4
33050: NEG
33051: PUSH
33052: LD_INT 3
33054: NEG
33055: PUSH
33056: EMPTY
33057: LIST
33058: LIST
33059: PUSH
33060: LD_INT 4
33062: NEG
33063: PUSH
33064: LD_INT 4
33066: NEG
33067: PUSH
33068: EMPTY
33069: LIST
33070: LIST
33071: PUSH
33072: LD_INT 2
33074: NEG
33075: PUSH
33076: LD_INT 4
33078: NEG
33079: PUSH
33080: EMPTY
33081: LIST
33082: LIST
33083: PUSH
33084: LD_INT 4
33086: NEG
33087: PUSH
33088: LD_INT 2
33090: NEG
33091: PUSH
33092: EMPTY
33093: LIST
33094: LIST
33095: PUSH
33096: LD_INT 0
33098: PUSH
33099: LD_INT 4
33101: NEG
33102: PUSH
33103: EMPTY
33104: LIST
33105: LIST
33106: PUSH
33107: LD_INT 0
33109: PUSH
33110: LD_INT 5
33112: NEG
33113: PUSH
33114: EMPTY
33115: LIST
33116: LIST
33117: PUSH
33118: LD_INT 1
33120: PUSH
33121: LD_INT 4
33123: NEG
33124: PUSH
33125: EMPTY
33126: LIST
33127: LIST
33128: PUSH
33129: LD_INT 1
33131: PUSH
33132: LD_INT 3
33134: NEG
33135: PUSH
33136: EMPTY
33137: LIST
33138: LIST
33139: PUSH
33140: LD_INT 0
33142: PUSH
33143: LD_INT 3
33145: NEG
33146: PUSH
33147: EMPTY
33148: LIST
33149: LIST
33150: PUSH
33151: LD_INT 1
33153: NEG
33154: PUSH
33155: LD_INT 4
33157: NEG
33158: PUSH
33159: EMPTY
33160: LIST
33161: LIST
33162: PUSH
33163: LD_INT 1
33165: NEG
33166: PUSH
33167: LD_INT 5
33169: NEG
33170: PUSH
33171: EMPTY
33172: LIST
33173: LIST
33174: PUSH
33175: LD_INT 2
33177: PUSH
33178: LD_INT 3
33180: NEG
33181: PUSH
33182: EMPTY
33183: LIST
33184: LIST
33185: PUSH
33186: LD_INT 2
33188: NEG
33189: PUSH
33190: LD_INT 5
33192: NEG
33193: PUSH
33194: EMPTY
33195: LIST
33196: LIST
33197: PUSH
33198: LD_INT 3
33200: PUSH
33201: LD_INT 0
33203: PUSH
33204: EMPTY
33205: LIST
33206: LIST
33207: PUSH
33208: LD_INT 3
33210: PUSH
33211: LD_INT 1
33213: NEG
33214: PUSH
33215: EMPTY
33216: LIST
33217: LIST
33218: PUSH
33219: LD_INT 4
33221: PUSH
33222: LD_INT 0
33224: PUSH
33225: EMPTY
33226: LIST
33227: LIST
33228: PUSH
33229: LD_INT 4
33231: PUSH
33232: LD_INT 1
33234: PUSH
33235: EMPTY
33236: LIST
33237: LIST
33238: PUSH
33239: LD_INT 3
33241: PUSH
33242: LD_INT 1
33244: PUSH
33245: EMPTY
33246: LIST
33247: LIST
33248: PUSH
33249: LD_INT 2
33251: PUSH
33252: LD_INT 0
33254: PUSH
33255: EMPTY
33256: LIST
33257: LIST
33258: PUSH
33259: LD_INT 2
33261: PUSH
33262: LD_INT 1
33264: NEG
33265: PUSH
33266: EMPTY
33267: LIST
33268: LIST
33269: PUSH
33270: LD_INT 2
33272: PUSH
33273: LD_INT 2
33275: NEG
33276: PUSH
33277: EMPTY
33278: LIST
33279: LIST
33280: PUSH
33281: LD_INT 4
33283: PUSH
33284: LD_INT 2
33286: PUSH
33287: EMPTY
33288: LIST
33289: LIST
33290: PUSH
33291: LD_INT 4
33293: PUSH
33294: LD_INT 4
33296: PUSH
33297: EMPTY
33298: LIST
33299: LIST
33300: PUSH
33301: LD_INT 4
33303: PUSH
33304: LD_INT 3
33306: PUSH
33307: EMPTY
33308: LIST
33309: LIST
33310: PUSH
33311: LD_INT 5
33313: PUSH
33314: LD_INT 4
33316: PUSH
33317: EMPTY
33318: LIST
33319: LIST
33320: PUSH
33321: LD_INT 5
33323: PUSH
33324: LD_INT 5
33326: PUSH
33327: EMPTY
33328: LIST
33329: LIST
33330: PUSH
33331: LD_INT 4
33333: PUSH
33334: LD_INT 5
33336: PUSH
33337: EMPTY
33338: LIST
33339: LIST
33340: PUSH
33341: LD_INT 3
33343: PUSH
33344: LD_INT 4
33346: PUSH
33347: EMPTY
33348: LIST
33349: LIST
33350: PUSH
33351: LD_INT 3
33353: PUSH
33354: LD_INT 3
33356: PUSH
33357: EMPTY
33358: LIST
33359: LIST
33360: PUSH
33361: LD_INT 5
33363: PUSH
33364: LD_INT 3
33366: PUSH
33367: EMPTY
33368: LIST
33369: LIST
33370: PUSH
33371: LD_INT 3
33373: PUSH
33374: LD_INT 5
33376: PUSH
33377: EMPTY
33378: LIST
33379: LIST
33380: PUSH
33381: EMPTY
33382: LIST
33383: LIST
33384: LIST
33385: LIST
33386: LIST
33387: LIST
33388: LIST
33389: LIST
33390: LIST
33391: LIST
33392: LIST
33393: LIST
33394: LIST
33395: LIST
33396: LIST
33397: LIST
33398: LIST
33399: LIST
33400: LIST
33401: LIST
33402: LIST
33403: LIST
33404: LIST
33405: LIST
33406: LIST
33407: LIST
33408: LIST
33409: LIST
33410: LIST
33411: LIST
33412: LIST
33413: LIST
33414: LIST
33415: LIST
33416: LIST
33417: LIST
33418: LIST
33419: LIST
33420: LIST
33421: LIST
33422: LIST
33423: LIST
33424: LIST
33425: LIST
33426: LIST
33427: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
33428: LD_ADDR_VAR 0 33
33432: PUSH
33433: LD_INT 4
33435: NEG
33436: PUSH
33437: LD_INT 4
33439: NEG
33440: PUSH
33441: EMPTY
33442: LIST
33443: LIST
33444: PUSH
33445: LD_INT 4
33447: NEG
33448: PUSH
33449: LD_INT 5
33451: NEG
33452: PUSH
33453: EMPTY
33454: LIST
33455: LIST
33456: PUSH
33457: LD_INT 3
33459: NEG
33460: PUSH
33461: LD_INT 4
33463: NEG
33464: PUSH
33465: EMPTY
33466: LIST
33467: LIST
33468: PUSH
33469: LD_INT 3
33471: NEG
33472: PUSH
33473: LD_INT 3
33475: NEG
33476: PUSH
33477: EMPTY
33478: LIST
33479: LIST
33480: PUSH
33481: LD_INT 4
33483: NEG
33484: PUSH
33485: LD_INT 3
33487: NEG
33488: PUSH
33489: EMPTY
33490: LIST
33491: LIST
33492: PUSH
33493: LD_INT 5
33495: NEG
33496: PUSH
33497: LD_INT 4
33499: NEG
33500: PUSH
33501: EMPTY
33502: LIST
33503: LIST
33504: PUSH
33505: LD_INT 5
33507: NEG
33508: PUSH
33509: LD_INT 5
33511: NEG
33512: PUSH
33513: EMPTY
33514: LIST
33515: LIST
33516: PUSH
33517: LD_INT 3
33519: NEG
33520: PUSH
33521: LD_INT 5
33523: NEG
33524: PUSH
33525: EMPTY
33526: LIST
33527: LIST
33528: PUSH
33529: LD_INT 5
33531: NEG
33532: PUSH
33533: LD_INT 3
33535: NEG
33536: PUSH
33537: EMPTY
33538: LIST
33539: LIST
33540: PUSH
33541: LD_INT 0
33543: PUSH
33544: LD_INT 3
33546: NEG
33547: PUSH
33548: EMPTY
33549: LIST
33550: LIST
33551: PUSH
33552: LD_INT 0
33554: PUSH
33555: LD_INT 4
33557: NEG
33558: PUSH
33559: EMPTY
33560: LIST
33561: LIST
33562: PUSH
33563: LD_INT 1
33565: PUSH
33566: LD_INT 3
33568: NEG
33569: PUSH
33570: EMPTY
33571: LIST
33572: LIST
33573: PUSH
33574: LD_INT 1
33576: PUSH
33577: LD_INT 2
33579: NEG
33580: PUSH
33581: EMPTY
33582: LIST
33583: LIST
33584: PUSH
33585: LD_INT 0
33587: PUSH
33588: LD_INT 2
33590: NEG
33591: PUSH
33592: EMPTY
33593: LIST
33594: LIST
33595: PUSH
33596: LD_INT 1
33598: NEG
33599: PUSH
33600: LD_INT 3
33602: NEG
33603: PUSH
33604: EMPTY
33605: LIST
33606: LIST
33607: PUSH
33608: LD_INT 1
33610: NEG
33611: PUSH
33612: LD_INT 4
33614: NEG
33615: PUSH
33616: EMPTY
33617: LIST
33618: LIST
33619: PUSH
33620: LD_INT 2
33622: PUSH
33623: LD_INT 2
33625: NEG
33626: PUSH
33627: EMPTY
33628: LIST
33629: LIST
33630: PUSH
33631: LD_INT 2
33633: NEG
33634: PUSH
33635: LD_INT 4
33637: NEG
33638: PUSH
33639: EMPTY
33640: LIST
33641: LIST
33642: PUSH
33643: LD_INT 4
33645: PUSH
33646: LD_INT 0
33648: PUSH
33649: EMPTY
33650: LIST
33651: LIST
33652: PUSH
33653: LD_INT 4
33655: PUSH
33656: LD_INT 1
33658: NEG
33659: PUSH
33660: EMPTY
33661: LIST
33662: LIST
33663: PUSH
33664: LD_INT 5
33666: PUSH
33667: LD_INT 0
33669: PUSH
33670: EMPTY
33671: LIST
33672: LIST
33673: PUSH
33674: LD_INT 5
33676: PUSH
33677: LD_INT 1
33679: PUSH
33680: EMPTY
33681: LIST
33682: LIST
33683: PUSH
33684: LD_INT 4
33686: PUSH
33687: LD_INT 1
33689: PUSH
33690: EMPTY
33691: LIST
33692: LIST
33693: PUSH
33694: LD_INT 3
33696: PUSH
33697: LD_INT 0
33699: PUSH
33700: EMPTY
33701: LIST
33702: LIST
33703: PUSH
33704: LD_INT 3
33706: PUSH
33707: LD_INT 1
33709: NEG
33710: PUSH
33711: EMPTY
33712: LIST
33713: LIST
33714: PUSH
33715: LD_INT 3
33717: PUSH
33718: LD_INT 2
33720: NEG
33721: PUSH
33722: EMPTY
33723: LIST
33724: LIST
33725: PUSH
33726: LD_INT 5
33728: PUSH
33729: LD_INT 2
33731: PUSH
33732: EMPTY
33733: LIST
33734: LIST
33735: PUSH
33736: LD_INT 3
33738: PUSH
33739: LD_INT 3
33741: PUSH
33742: EMPTY
33743: LIST
33744: LIST
33745: PUSH
33746: LD_INT 3
33748: PUSH
33749: LD_INT 2
33751: PUSH
33752: EMPTY
33753: LIST
33754: LIST
33755: PUSH
33756: LD_INT 4
33758: PUSH
33759: LD_INT 3
33761: PUSH
33762: EMPTY
33763: LIST
33764: LIST
33765: PUSH
33766: LD_INT 4
33768: PUSH
33769: LD_INT 4
33771: PUSH
33772: EMPTY
33773: LIST
33774: LIST
33775: PUSH
33776: LD_INT 3
33778: PUSH
33779: LD_INT 4
33781: PUSH
33782: EMPTY
33783: LIST
33784: LIST
33785: PUSH
33786: LD_INT 2
33788: PUSH
33789: LD_INT 3
33791: PUSH
33792: EMPTY
33793: LIST
33794: LIST
33795: PUSH
33796: LD_INT 2
33798: PUSH
33799: LD_INT 2
33801: PUSH
33802: EMPTY
33803: LIST
33804: LIST
33805: PUSH
33806: LD_INT 4
33808: PUSH
33809: LD_INT 2
33811: PUSH
33812: EMPTY
33813: LIST
33814: LIST
33815: PUSH
33816: LD_INT 2
33818: PUSH
33819: LD_INT 4
33821: PUSH
33822: EMPTY
33823: LIST
33824: LIST
33825: PUSH
33826: LD_INT 0
33828: PUSH
33829: LD_INT 4
33831: PUSH
33832: EMPTY
33833: LIST
33834: LIST
33835: PUSH
33836: LD_INT 0
33838: PUSH
33839: LD_INT 3
33841: PUSH
33842: EMPTY
33843: LIST
33844: LIST
33845: PUSH
33846: LD_INT 1
33848: PUSH
33849: LD_INT 4
33851: PUSH
33852: EMPTY
33853: LIST
33854: LIST
33855: PUSH
33856: LD_INT 1
33858: PUSH
33859: LD_INT 5
33861: PUSH
33862: EMPTY
33863: LIST
33864: LIST
33865: PUSH
33866: LD_INT 0
33868: PUSH
33869: LD_INT 5
33871: PUSH
33872: EMPTY
33873: LIST
33874: LIST
33875: PUSH
33876: LD_INT 1
33878: NEG
33879: PUSH
33880: LD_INT 4
33882: PUSH
33883: EMPTY
33884: LIST
33885: LIST
33886: PUSH
33887: LD_INT 1
33889: NEG
33890: PUSH
33891: LD_INT 3
33893: PUSH
33894: EMPTY
33895: LIST
33896: LIST
33897: PUSH
33898: LD_INT 2
33900: PUSH
33901: LD_INT 5
33903: PUSH
33904: EMPTY
33905: LIST
33906: LIST
33907: PUSH
33908: LD_INT 2
33910: NEG
33911: PUSH
33912: LD_INT 3
33914: PUSH
33915: EMPTY
33916: LIST
33917: LIST
33918: PUSH
33919: EMPTY
33920: LIST
33921: LIST
33922: LIST
33923: LIST
33924: LIST
33925: LIST
33926: LIST
33927: LIST
33928: LIST
33929: LIST
33930: LIST
33931: LIST
33932: LIST
33933: LIST
33934: LIST
33935: LIST
33936: LIST
33937: LIST
33938: LIST
33939: LIST
33940: LIST
33941: LIST
33942: LIST
33943: LIST
33944: LIST
33945: LIST
33946: LIST
33947: LIST
33948: LIST
33949: LIST
33950: LIST
33951: LIST
33952: LIST
33953: LIST
33954: LIST
33955: LIST
33956: LIST
33957: LIST
33958: LIST
33959: LIST
33960: LIST
33961: LIST
33962: LIST
33963: LIST
33964: LIST
33965: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
33966: LD_ADDR_VAR 0 34
33970: PUSH
33971: LD_INT 0
33973: PUSH
33974: LD_INT 4
33976: NEG
33977: PUSH
33978: EMPTY
33979: LIST
33980: LIST
33981: PUSH
33982: LD_INT 0
33984: PUSH
33985: LD_INT 5
33987: NEG
33988: PUSH
33989: EMPTY
33990: LIST
33991: LIST
33992: PUSH
33993: LD_INT 1
33995: PUSH
33996: LD_INT 4
33998: NEG
33999: PUSH
34000: EMPTY
34001: LIST
34002: LIST
34003: PUSH
34004: LD_INT 1
34006: PUSH
34007: LD_INT 3
34009: NEG
34010: PUSH
34011: EMPTY
34012: LIST
34013: LIST
34014: PUSH
34015: LD_INT 0
34017: PUSH
34018: LD_INT 3
34020: NEG
34021: PUSH
34022: EMPTY
34023: LIST
34024: LIST
34025: PUSH
34026: LD_INT 1
34028: NEG
34029: PUSH
34030: LD_INT 4
34032: NEG
34033: PUSH
34034: EMPTY
34035: LIST
34036: LIST
34037: PUSH
34038: LD_INT 1
34040: NEG
34041: PUSH
34042: LD_INT 5
34044: NEG
34045: PUSH
34046: EMPTY
34047: LIST
34048: LIST
34049: PUSH
34050: LD_INT 2
34052: PUSH
34053: LD_INT 3
34055: NEG
34056: PUSH
34057: EMPTY
34058: LIST
34059: LIST
34060: PUSH
34061: LD_INT 2
34063: NEG
34064: PUSH
34065: LD_INT 5
34067: NEG
34068: PUSH
34069: EMPTY
34070: LIST
34071: LIST
34072: PUSH
34073: LD_INT 3
34075: PUSH
34076: LD_INT 0
34078: PUSH
34079: EMPTY
34080: LIST
34081: LIST
34082: PUSH
34083: LD_INT 3
34085: PUSH
34086: LD_INT 1
34088: NEG
34089: PUSH
34090: EMPTY
34091: LIST
34092: LIST
34093: PUSH
34094: LD_INT 4
34096: PUSH
34097: LD_INT 0
34099: PUSH
34100: EMPTY
34101: LIST
34102: LIST
34103: PUSH
34104: LD_INT 4
34106: PUSH
34107: LD_INT 1
34109: PUSH
34110: EMPTY
34111: LIST
34112: LIST
34113: PUSH
34114: LD_INT 3
34116: PUSH
34117: LD_INT 1
34119: PUSH
34120: EMPTY
34121: LIST
34122: LIST
34123: PUSH
34124: LD_INT 2
34126: PUSH
34127: LD_INT 0
34129: PUSH
34130: EMPTY
34131: LIST
34132: LIST
34133: PUSH
34134: LD_INT 2
34136: PUSH
34137: LD_INT 1
34139: NEG
34140: PUSH
34141: EMPTY
34142: LIST
34143: LIST
34144: PUSH
34145: LD_INT 2
34147: PUSH
34148: LD_INT 2
34150: NEG
34151: PUSH
34152: EMPTY
34153: LIST
34154: LIST
34155: PUSH
34156: LD_INT 4
34158: PUSH
34159: LD_INT 2
34161: PUSH
34162: EMPTY
34163: LIST
34164: LIST
34165: PUSH
34166: LD_INT 4
34168: PUSH
34169: LD_INT 4
34171: PUSH
34172: EMPTY
34173: LIST
34174: LIST
34175: PUSH
34176: LD_INT 4
34178: PUSH
34179: LD_INT 3
34181: PUSH
34182: EMPTY
34183: LIST
34184: LIST
34185: PUSH
34186: LD_INT 5
34188: PUSH
34189: LD_INT 4
34191: PUSH
34192: EMPTY
34193: LIST
34194: LIST
34195: PUSH
34196: LD_INT 5
34198: PUSH
34199: LD_INT 5
34201: PUSH
34202: EMPTY
34203: LIST
34204: LIST
34205: PUSH
34206: LD_INT 4
34208: PUSH
34209: LD_INT 5
34211: PUSH
34212: EMPTY
34213: LIST
34214: LIST
34215: PUSH
34216: LD_INT 3
34218: PUSH
34219: LD_INT 4
34221: PUSH
34222: EMPTY
34223: LIST
34224: LIST
34225: PUSH
34226: LD_INT 3
34228: PUSH
34229: LD_INT 3
34231: PUSH
34232: EMPTY
34233: LIST
34234: LIST
34235: PUSH
34236: LD_INT 5
34238: PUSH
34239: LD_INT 3
34241: PUSH
34242: EMPTY
34243: LIST
34244: LIST
34245: PUSH
34246: LD_INT 3
34248: PUSH
34249: LD_INT 5
34251: PUSH
34252: EMPTY
34253: LIST
34254: LIST
34255: PUSH
34256: LD_INT 0
34258: PUSH
34259: LD_INT 3
34261: PUSH
34262: EMPTY
34263: LIST
34264: LIST
34265: PUSH
34266: LD_INT 0
34268: PUSH
34269: LD_INT 2
34271: PUSH
34272: EMPTY
34273: LIST
34274: LIST
34275: PUSH
34276: LD_INT 1
34278: PUSH
34279: LD_INT 3
34281: PUSH
34282: EMPTY
34283: LIST
34284: LIST
34285: PUSH
34286: LD_INT 1
34288: PUSH
34289: LD_INT 4
34291: PUSH
34292: EMPTY
34293: LIST
34294: LIST
34295: PUSH
34296: LD_INT 0
34298: PUSH
34299: LD_INT 4
34301: PUSH
34302: EMPTY
34303: LIST
34304: LIST
34305: PUSH
34306: LD_INT 1
34308: NEG
34309: PUSH
34310: LD_INT 3
34312: PUSH
34313: EMPTY
34314: LIST
34315: LIST
34316: PUSH
34317: LD_INT 1
34319: NEG
34320: PUSH
34321: LD_INT 2
34323: PUSH
34324: EMPTY
34325: LIST
34326: LIST
34327: PUSH
34328: LD_INT 2
34330: PUSH
34331: LD_INT 4
34333: PUSH
34334: EMPTY
34335: LIST
34336: LIST
34337: PUSH
34338: LD_INT 2
34340: NEG
34341: PUSH
34342: LD_INT 2
34344: PUSH
34345: EMPTY
34346: LIST
34347: LIST
34348: PUSH
34349: LD_INT 4
34351: NEG
34352: PUSH
34353: LD_INT 0
34355: PUSH
34356: EMPTY
34357: LIST
34358: LIST
34359: PUSH
34360: LD_INT 4
34362: NEG
34363: PUSH
34364: LD_INT 1
34366: NEG
34367: PUSH
34368: EMPTY
34369: LIST
34370: LIST
34371: PUSH
34372: LD_INT 3
34374: NEG
34375: PUSH
34376: LD_INT 0
34378: PUSH
34379: EMPTY
34380: LIST
34381: LIST
34382: PUSH
34383: LD_INT 3
34385: NEG
34386: PUSH
34387: LD_INT 1
34389: PUSH
34390: EMPTY
34391: LIST
34392: LIST
34393: PUSH
34394: LD_INT 4
34396: NEG
34397: PUSH
34398: LD_INT 1
34400: PUSH
34401: EMPTY
34402: LIST
34403: LIST
34404: PUSH
34405: LD_INT 5
34407: NEG
34408: PUSH
34409: LD_INT 0
34411: PUSH
34412: EMPTY
34413: LIST
34414: LIST
34415: PUSH
34416: LD_INT 5
34418: NEG
34419: PUSH
34420: LD_INT 1
34422: NEG
34423: PUSH
34424: EMPTY
34425: LIST
34426: LIST
34427: PUSH
34428: LD_INT 5
34430: NEG
34431: PUSH
34432: LD_INT 2
34434: NEG
34435: PUSH
34436: EMPTY
34437: LIST
34438: LIST
34439: PUSH
34440: LD_INT 3
34442: NEG
34443: PUSH
34444: LD_INT 2
34446: PUSH
34447: EMPTY
34448: LIST
34449: LIST
34450: PUSH
34451: EMPTY
34452: LIST
34453: LIST
34454: LIST
34455: LIST
34456: LIST
34457: LIST
34458: LIST
34459: LIST
34460: LIST
34461: LIST
34462: LIST
34463: LIST
34464: LIST
34465: LIST
34466: LIST
34467: LIST
34468: LIST
34469: LIST
34470: LIST
34471: LIST
34472: LIST
34473: LIST
34474: LIST
34475: LIST
34476: LIST
34477: LIST
34478: LIST
34479: LIST
34480: LIST
34481: LIST
34482: LIST
34483: LIST
34484: LIST
34485: LIST
34486: LIST
34487: LIST
34488: LIST
34489: LIST
34490: LIST
34491: LIST
34492: LIST
34493: LIST
34494: LIST
34495: LIST
34496: LIST
34497: ST_TO_ADDR
// end ; end ;
34498: GO 34501
34500: POP
// case btype of b_depot , b_warehouse :
34501: LD_VAR 0 1
34505: PUSH
34506: LD_INT 0
34508: DOUBLE
34509: EQUAL
34510: IFTRUE 34520
34512: LD_INT 1
34514: DOUBLE
34515: EQUAL
34516: IFTRUE 34520
34518: GO 34721
34520: POP
// case nation of nation_american :
34521: LD_VAR 0 5
34525: PUSH
34526: LD_INT 1
34528: DOUBLE
34529: EQUAL
34530: IFTRUE 34534
34532: GO 34590
34534: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
34535: LD_ADDR_VAR 0 9
34539: PUSH
34540: LD_VAR 0 11
34544: PUSH
34545: LD_VAR 0 12
34549: PUSH
34550: LD_VAR 0 13
34554: PUSH
34555: LD_VAR 0 14
34559: PUSH
34560: LD_VAR 0 15
34564: PUSH
34565: LD_VAR 0 16
34569: PUSH
34570: EMPTY
34571: LIST
34572: LIST
34573: LIST
34574: LIST
34575: LIST
34576: LIST
34577: PUSH
34578: LD_VAR 0 4
34582: PUSH
34583: LD_INT 1
34585: PLUS
34586: ARRAY
34587: ST_TO_ADDR
34588: GO 34719
34590: LD_INT 2
34592: DOUBLE
34593: EQUAL
34594: IFTRUE 34598
34596: GO 34654
34598: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
34599: LD_ADDR_VAR 0 9
34603: PUSH
34604: LD_VAR 0 17
34608: PUSH
34609: LD_VAR 0 18
34613: PUSH
34614: LD_VAR 0 19
34618: PUSH
34619: LD_VAR 0 20
34623: PUSH
34624: LD_VAR 0 21
34628: PUSH
34629: LD_VAR 0 22
34633: PUSH
34634: EMPTY
34635: LIST
34636: LIST
34637: LIST
34638: LIST
34639: LIST
34640: LIST
34641: PUSH
34642: LD_VAR 0 4
34646: PUSH
34647: LD_INT 1
34649: PLUS
34650: ARRAY
34651: ST_TO_ADDR
34652: GO 34719
34654: LD_INT 3
34656: DOUBLE
34657: EQUAL
34658: IFTRUE 34662
34660: GO 34718
34662: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
34663: LD_ADDR_VAR 0 9
34667: PUSH
34668: LD_VAR 0 23
34672: PUSH
34673: LD_VAR 0 24
34677: PUSH
34678: LD_VAR 0 25
34682: PUSH
34683: LD_VAR 0 26
34687: PUSH
34688: LD_VAR 0 27
34692: PUSH
34693: LD_VAR 0 28
34697: PUSH
34698: EMPTY
34699: LIST
34700: LIST
34701: LIST
34702: LIST
34703: LIST
34704: LIST
34705: PUSH
34706: LD_VAR 0 4
34710: PUSH
34711: LD_INT 1
34713: PLUS
34714: ARRAY
34715: ST_TO_ADDR
34716: GO 34719
34718: POP
34719: GO 35274
34721: LD_INT 2
34723: DOUBLE
34724: EQUAL
34725: IFTRUE 34735
34727: LD_INT 3
34729: DOUBLE
34730: EQUAL
34731: IFTRUE 34735
34733: GO 34791
34735: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
34736: LD_ADDR_VAR 0 9
34740: PUSH
34741: LD_VAR 0 29
34745: PUSH
34746: LD_VAR 0 30
34750: PUSH
34751: LD_VAR 0 31
34755: PUSH
34756: LD_VAR 0 32
34760: PUSH
34761: LD_VAR 0 33
34765: PUSH
34766: LD_VAR 0 34
34770: PUSH
34771: EMPTY
34772: LIST
34773: LIST
34774: LIST
34775: LIST
34776: LIST
34777: LIST
34778: PUSH
34779: LD_VAR 0 4
34783: PUSH
34784: LD_INT 1
34786: PLUS
34787: ARRAY
34788: ST_TO_ADDR
34789: GO 35274
34791: LD_INT 16
34793: DOUBLE
34794: EQUAL
34795: IFTRUE 34853
34797: LD_INT 17
34799: DOUBLE
34800: EQUAL
34801: IFTRUE 34853
34803: LD_INT 18
34805: DOUBLE
34806: EQUAL
34807: IFTRUE 34853
34809: LD_INT 19
34811: DOUBLE
34812: EQUAL
34813: IFTRUE 34853
34815: LD_INT 22
34817: DOUBLE
34818: EQUAL
34819: IFTRUE 34853
34821: LD_INT 20
34823: DOUBLE
34824: EQUAL
34825: IFTRUE 34853
34827: LD_INT 21
34829: DOUBLE
34830: EQUAL
34831: IFTRUE 34853
34833: LD_INT 23
34835: DOUBLE
34836: EQUAL
34837: IFTRUE 34853
34839: LD_INT 24
34841: DOUBLE
34842: EQUAL
34843: IFTRUE 34853
34845: LD_INT 25
34847: DOUBLE
34848: EQUAL
34849: IFTRUE 34853
34851: GO 34909
34853: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
34854: LD_ADDR_VAR 0 9
34858: PUSH
34859: LD_VAR 0 35
34863: PUSH
34864: LD_VAR 0 36
34868: PUSH
34869: LD_VAR 0 37
34873: PUSH
34874: LD_VAR 0 38
34878: PUSH
34879: LD_VAR 0 39
34883: PUSH
34884: LD_VAR 0 40
34888: PUSH
34889: EMPTY
34890: LIST
34891: LIST
34892: LIST
34893: LIST
34894: LIST
34895: LIST
34896: PUSH
34897: LD_VAR 0 4
34901: PUSH
34902: LD_INT 1
34904: PLUS
34905: ARRAY
34906: ST_TO_ADDR
34907: GO 35274
34909: LD_INT 6
34911: DOUBLE
34912: EQUAL
34913: IFTRUE 34965
34915: LD_INT 7
34917: DOUBLE
34918: EQUAL
34919: IFTRUE 34965
34921: LD_INT 8
34923: DOUBLE
34924: EQUAL
34925: IFTRUE 34965
34927: LD_INT 13
34929: DOUBLE
34930: EQUAL
34931: IFTRUE 34965
34933: LD_INT 12
34935: DOUBLE
34936: EQUAL
34937: IFTRUE 34965
34939: LD_INT 15
34941: DOUBLE
34942: EQUAL
34943: IFTRUE 34965
34945: LD_INT 11
34947: DOUBLE
34948: EQUAL
34949: IFTRUE 34965
34951: LD_INT 14
34953: DOUBLE
34954: EQUAL
34955: IFTRUE 34965
34957: LD_INT 10
34959: DOUBLE
34960: EQUAL
34961: IFTRUE 34965
34963: GO 35021
34965: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
34966: LD_ADDR_VAR 0 9
34970: PUSH
34971: LD_VAR 0 41
34975: PUSH
34976: LD_VAR 0 42
34980: PUSH
34981: LD_VAR 0 43
34985: PUSH
34986: LD_VAR 0 44
34990: PUSH
34991: LD_VAR 0 45
34995: PUSH
34996: LD_VAR 0 46
35000: PUSH
35001: EMPTY
35002: LIST
35003: LIST
35004: LIST
35005: LIST
35006: LIST
35007: LIST
35008: PUSH
35009: LD_VAR 0 4
35013: PUSH
35014: LD_INT 1
35016: PLUS
35017: ARRAY
35018: ST_TO_ADDR
35019: GO 35274
35021: LD_INT 36
35023: DOUBLE
35024: EQUAL
35025: IFTRUE 35029
35027: GO 35085
35029: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
35030: LD_ADDR_VAR 0 9
35034: PUSH
35035: LD_VAR 0 47
35039: PUSH
35040: LD_VAR 0 48
35044: PUSH
35045: LD_VAR 0 49
35049: PUSH
35050: LD_VAR 0 50
35054: PUSH
35055: LD_VAR 0 51
35059: PUSH
35060: LD_VAR 0 52
35064: PUSH
35065: EMPTY
35066: LIST
35067: LIST
35068: LIST
35069: LIST
35070: LIST
35071: LIST
35072: PUSH
35073: LD_VAR 0 4
35077: PUSH
35078: LD_INT 1
35080: PLUS
35081: ARRAY
35082: ST_TO_ADDR
35083: GO 35274
35085: LD_INT 4
35087: DOUBLE
35088: EQUAL
35089: IFTRUE 35111
35091: LD_INT 5
35093: DOUBLE
35094: EQUAL
35095: IFTRUE 35111
35097: LD_INT 34
35099: DOUBLE
35100: EQUAL
35101: IFTRUE 35111
35103: LD_INT 37
35105: DOUBLE
35106: EQUAL
35107: IFTRUE 35111
35109: GO 35167
35111: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
35112: LD_ADDR_VAR 0 9
35116: PUSH
35117: LD_VAR 0 53
35121: PUSH
35122: LD_VAR 0 54
35126: PUSH
35127: LD_VAR 0 55
35131: PUSH
35132: LD_VAR 0 56
35136: PUSH
35137: LD_VAR 0 57
35141: PUSH
35142: LD_VAR 0 58
35146: PUSH
35147: EMPTY
35148: LIST
35149: LIST
35150: LIST
35151: LIST
35152: LIST
35153: LIST
35154: PUSH
35155: LD_VAR 0 4
35159: PUSH
35160: LD_INT 1
35162: PLUS
35163: ARRAY
35164: ST_TO_ADDR
35165: GO 35274
35167: LD_INT 31
35169: DOUBLE
35170: EQUAL
35171: IFTRUE 35217
35173: LD_INT 32
35175: DOUBLE
35176: EQUAL
35177: IFTRUE 35217
35179: LD_INT 33
35181: DOUBLE
35182: EQUAL
35183: IFTRUE 35217
35185: LD_INT 27
35187: DOUBLE
35188: EQUAL
35189: IFTRUE 35217
35191: LD_INT 26
35193: DOUBLE
35194: EQUAL
35195: IFTRUE 35217
35197: LD_INT 28
35199: DOUBLE
35200: EQUAL
35201: IFTRUE 35217
35203: LD_INT 29
35205: DOUBLE
35206: EQUAL
35207: IFTRUE 35217
35209: LD_INT 30
35211: DOUBLE
35212: EQUAL
35213: IFTRUE 35217
35215: GO 35273
35217: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
35218: LD_ADDR_VAR 0 9
35222: PUSH
35223: LD_VAR 0 59
35227: PUSH
35228: LD_VAR 0 60
35232: PUSH
35233: LD_VAR 0 61
35237: PUSH
35238: LD_VAR 0 62
35242: PUSH
35243: LD_VAR 0 63
35247: PUSH
35248: LD_VAR 0 64
35252: PUSH
35253: EMPTY
35254: LIST
35255: LIST
35256: LIST
35257: LIST
35258: LIST
35259: LIST
35260: PUSH
35261: LD_VAR 0 4
35265: PUSH
35266: LD_INT 1
35268: PLUS
35269: ARRAY
35270: ST_TO_ADDR
35271: GO 35274
35273: POP
// temp_list2 = [ ] ;
35274: LD_ADDR_VAR 0 10
35278: PUSH
35279: EMPTY
35280: ST_TO_ADDR
// for i in temp_list do
35281: LD_ADDR_VAR 0 8
35285: PUSH
35286: LD_VAR 0 9
35290: PUSH
35291: FOR_IN
35292: IFFALSE 35344
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
35294: LD_ADDR_VAR 0 10
35298: PUSH
35299: LD_VAR 0 10
35303: PUSH
35304: LD_VAR 0 8
35308: PUSH
35309: LD_INT 1
35311: ARRAY
35312: PUSH
35313: LD_VAR 0 2
35317: PLUS
35318: PUSH
35319: LD_VAR 0 8
35323: PUSH
35324: LD_INT 2
35326: ARRAY
35327: PUSH
35328: LD_VAR 0 3
35332: PLUS
35333: PUSH
35334: EMPTY
35335: LIST
35336: LIST
35337: PUSH
35338: EMPTY
35339: LIST
35340: ADD
35341: ST_TO_ADDR
35342: GO 35291
35344: POP
35345: POP
// result = temp_list2 ;
35346: LD_ADDR_VAR 0 7
35350: PUSH
35351: LD_VAR 0 10
35355: ST_TO_ADDR
// end ;
35356: LD_VAR 0 7
35360: RET
// export function EnemyInRange ( unit , dist ) ; begin
35361: LD_INT 0
35363: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
35364: LD_ADDR_VAR 0 3
35368: PUSH
35369: LD_VAR 0 1
35373: PPUSH
35374: CALL_OW 255
35378: PPUSH
35379: LD_VAR 0 1
35383: PPUSH
35384: CALL_OW 250
35388: PPUSH
35389: LD_VAR 0 1
35393: PPUSH
35394: CALL_OW 251
35398: PPUSH
35399: LD_VAR 0 2
35403: PPUSH
35404: CALL 8734 0 4
35408: PUSH
35409: LD_INT 4
35411: ARRAY
35412: ST_TO_ADDR
// end ;
35413: LD_VAR 0 3
35417: RET
// export function PlayerSeeMe ( unit ) ; begin
35418: LD_INT 0
35420: PPUSH
// result := See ( your_side , unit ) ;
35421: LD_ADDR_VAR 0 2
35425: PUSH
35426: LD_OWVAR 2
35430: PPUSH
35431: LD_VAR 0 1
35435: PPUSH
35436: CALL_OW 292
35440: ST_TO_ADDR
// end ;
35441: LD_VAR 0 2
35445: RET
// export function ReverseDir ( unit ) ; begin
35446: LD_INT 0
35448: PPUSH
// if not unit then
35449: LD_VAR 0 1
35453: NOT
35454: IFFALSE 35458
// exit ;
35456: GO 35481
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
35458: LD_ADDR_VAR 0 2
35462: PUSH
35463: LD_VAR 0 1
35467: PPUSH
35468: CALL_OW 254
35472: PUSH
35473: LD_INT 3
35475: PLUS
35476: PUSH
35477: LD_INT 6
35479: MOD
35480: ST_TO_ADDR
// end ;
35481: LD_VAR 0 2
35485: RET
// export function ReverseArray ( array ) ; var i ; begin
35486: LD_INT 0
35488: PPUSH
35489: PPUSH
// if not array then
35490: LD_VAR 0 1
35494: NOT
35495: IFFALSE 35499
// exit ;
35497: GO 35554
// result := [ ] ;
35499: LD_ADDR_VAR 0 2
35503: PUSH
35504: EMPTY
35505: ST_TO_ADDR
// for i := array downto 1 do
35506: LD_ADDR_VAR 0 3
35510: PUSH
35511: DOUBLE
35512: LD_VAR 0 1
35516: INC
35517: ST_TO_ADDR
35518: LD_INT 1
35520: PUSH
35521: FOR_DOWNTO
35522: IFFALSE 35552
// result := Join ( result , array [ i ] ) ;
35524: LD_ADDR_VAR 0 2
35528: PUSH
35529: LD_VAR 0 2
35533: PPUSH
35534: LD_VAR 0 1
35538: PUSH
35539: LD_VAR 0 3
35543: ARRAY
35544: PPUSH
35545: CALL 40199 0 2
35549: ST_TO_ADDR
35550: GO 35521
35552: POP
35553: POP
// end ;
35554: LD_VAR 0 2
35558: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
35559: LD_INT 0
35561: PPUSH
35562: PPUSH
35563: PPUSH
35564: PPUSH
35565: PPUSH
35566: PPUSH
// if not unit or not hexes then
35567: LD_VAR 0 1
35571: NOT
35572: PUSH
35573: LD_VAR 0 2
35577: NOT
35578: OR
35579: IFFALSE 35583
// exit ;
35581: GO 35706
// dist := 9999 ;
35583: LD_ADDR_VAR 0 5
35587: PUSH
35588: LD_INT 9999
35590: ST_TO_ADDR
// for i = 1 to hexes do
35591: LD_ADDR_VAR 0 4
35595: PUSH
35596: DOUBLE
35597: LD_INT 1
35599: DEC
35600: ST_TO_ADDR
35601: LD_VAR 0 2
35605: PUSH
35606: FOR_TO
35607: IFFALSE 35694
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35609: LD_ADDR_VAR 0 6
35613: PUSH
35614: LD_VAR 0 1
35618: PPUSH
35619: LD_VAR 0 2
35623: PUSH
35624: LD_VAR 0 4
35628: ARRAY
35629: PUSH
35630: LD_INT 1
35632: ARRAY
35633: PPUSH
35634: LD_VAR 0 2
35638: PUSH
35639: LD_VAR 0 4
35643: ARRAY
35644: PUSH
35645: LD_INT 2
35647: ARRAY
35648: PPUSH
35649: CALL_OW 297
35653: ST_TO_ADDR
// if tdist < dist then
35654: LD_VAR 0 6
35658: PUSH
35659: LD_VAR 0 5
35663: LESS
35664: IFFALSE 35692
// begin hex := hexes [ i ] ;
35666: LD_ADDR_VAR 0 8
35670: PUSH
35671: LD_VAR 0 2
35675: PUSH
35676: LD_VAR 0 4
35680: ARRAY
35681: ST_TO_ADDR
// dist := tdist ;
35682: LD_ADDR_VAR 0 5
35686: PUSH
35687: LD_VAR 0 6
35691: ST_TO_ADDR
// end ; end ;
35692: GO 35606
35694: POP
35695: POP
// result := hex ;
35696: LD_ADDR_VAR 0 3
35700: PUSH
35701: LD_VAR 0 8
35705: ST_TO_ADDR
// end ;
35706: LD_VAR 0 3
35710: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
35711: LD_INT 0
35713: PPUSH
35714: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
35715: LD_VAR 0 1
35719: NOT
35720: PUSH
35721: LD_VAR 0 1
35725: PUSH
35726: LD_INT 21
35728: PUSH
35729: LD_INT 2
35731: PUSH
35732: EMPTY
35733: LIST
35734: LIST
35735: PUSH
35736: LD_INT 23
35738: PUSH
35739: LD_INT 2
35741: PUSH
35742: EMPTY
35743: LIST
35744: LIST
35745: PUSH
35746: EMPTY
35747: LIST
35748: LIST
35749: PPUSH
35750: CALL_OW 69
35754: IN
35755: NOT
35756: OR
35757: IFFALSE 35761
// exit ;
35759: GO 35808
// for i = 1 to 3 do
35761: LD_ADDR_VAR 0 3
35765: PUSH
35766: DOUBLE
35767: LD_INT 1
35769: DEC
35770: ST_TO_ADDR
35771: LD_INT 3
35773: PUSH
35774: FOR_TO
35775: IFFALSE 35806
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
35777: LD_VAR 0 1
35781: PPUSH
35782: CALL_OW 250
35786: PPUSH
35787: LD_VAR 0 1
35791: PPUSH
35792: CALL_OW 251
35796: PPUSH
35797: LD_INT 1
35799: PPUSH
35800: CALL_OW 453
35804: GO 35774
35806: POP
35807: POP
// end ;
35808: LD_VAR 0 2
35812: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
35813: LD_INT 0
35815: PPUSH
35816: PPUSH
35817: PPUSH
35818: PPUSH
35819: PPUSH
35820: PPUSH
// if not unit or not enemy_unit then
35821: LD_VAR 0 1
35825: NOT
35826: PUSH
35827: LD_VAR 0 2
35831: NOT
35832: OR
35833: IFFALSE 35837
// exit ;
35835: GO 36304
// if GetLives ( i ) < 250 then
35837: LD_VAR 0 4
35841: PPUSH
35842: CALL_OW 256
35846: PUSH
35847: LD_INT 250
35849: LESS
35850: IFFALSE 35863
// begin ComAutodestruct ( i ) ;
35852: LD_VAR 0 4
35856: PPUSH
35857: CALL 35711 0 1
// exit ;
35861: GO 36304
// end ; x := GetX ( enemy_unit ) ;
35863: LD_ADDR_VAR 0 7
35867: PUSH
35868: LD_VAR 0 2
35872: PPUSH
35873: CALL_OW 250
35877: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
35878: LD_ADDR_VAR 0 8
35882: PUSH
35883: LD_VAR 0 2
35887: PPUSH
35888: CALL_OW 251
35892: ST_TO_ADDR
// if not x or not y then
35893: LD_VAR 0 7
35897: NOT
35898: PUSH
35899: LD_VAR 0 8
35903: NOT
35904: OR
35905: IFFALSE 35909
// exit ;
35907: GO 36304
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
35909: LD_ADDR_VAR 0 6
35913: PUSH
35914: LD_VAR 0 7
35918: PPUSH
35919: LD_INT 0
35921: PPUSH
35922: LD_INT 4
35924: PPUSH
35925: CALL_OW 272
35929: PUSH
35930: LD_VAR 0 8
35934: PPUSH
35935: LD_INT 0
35937: PPUSH
35938: LD_INT 4
35940: PPUSH
35941: CALL_OW 273
35945: PUSH
35946: EMPTY
35947: LIST
35948: LIST
35949: PUSH
35950: LD_VAR 0 7
35954: PPUSH
35955: LD_INT 1
35957: PPUSH
35958: LD_INT 4
35960: PPUSH
35961: CALL_OW 272
35965: PUSH
35966: LD_VAR 0 8
35970: PPUSH
35971: LD_INT 1
35973: PPUSH
35974: LD_INT 4
35976: PPUSH
35977: CALL_OW 273
35981: PUSH
35982: EMPTY
35983: LIST
35984: LIST
35985: PUSH
35986: LD_VAR 0 7
35990: PPUSH
35991: LD_INT 2
35993: PPUSH
35994: LD_INT 4
35996: PPUSH
35997: CALL_OW 272
36001: PUSH
36002: LD_VAR 0 8
36006: PPUSH
36007: LD_INT 2
36009: PPUSH
36010: LD_INT 4
36012: PPUSH
36013: CALL_OW 273
36017: PUSH
36018: EMPTY
36019: LIST
36020: LIST
36021: PUSH
36022: LD_VAR 0 7
36026: PPUSH
36027: LD_INT 3
36029: PPUSH
36030: LD_INT 4
36032: PPUSH
36033: CALL_OW 272
36037: PUSH
36038: LD_VAR 0 8
36042: PPUSH
36043: LD_INT 3
36045: PPUSH
36046: LD_INT 4
36048: PPUSH
36049: CALL_OW 273
36053: PUSH
36054: EMPTY
36055: LIST
36056: LIST
36057: PUSH
36058: LD_VAR 0 7
36062: PPUSH
36063: LD_INT 4
36065: PPUSH
36066: LD_INT 4
36068: PPUSH
36069: CALL_OW 272
36073: PUSH
36074: LD_VAR 0 8
36078: PPUSH
36079: LD_INT 4
36081: PPUSH
36082: LD_INT 4
36084: PPUSH
36085: CALL_OW 273
36089: PUSH
36090: EMPTY
36091: LIST
36092: LIST
36093: PUSH
36094: LD_VAR 0 7
36098: PPUSH
36099: LD_INT 5
36101: PPUSH
36102: LD_INT 4
36104: PPUSH
36105: CALL_OW 272
36109: PUSH
36110: LD_VAR 0 8
36114: PPUSH
36115: LD_INT 5
36117: PPUSH
36118: LD_INT 4
36120: PPUSH
36121: CALL_OW 273
36125: PUSH
36126: EMPTY
36127: LIST
36128: LIST
36129: PUSH
36130: EMPTY
36131: LIST
36132: LIST
36133: LIST
36134: LIST
36135: LIST
36136: LIST
36137: ST_TO_ADDR
// for i = tmp downto 1 do
36138: LD_ADDR_VAR 0 4
36142: PUSH
36143: DOUBLE
36144: LD_VAR 0 6
36148: INC
36149: ST_TO_ADDR
36150: LD_INT 1
36152: PUSH
36153: FOR_DOWNTO
36154: IFFALSE 36255
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
36156: LD_VAR 0 6
36160: PUSH
36161: LD_VAR 0 4
36165: ARRAY
36166: PUSH
36167: LD_INT 1
36169: ARRAY
36170: PPUSH
36171: LD_VAR 0 6
36175: PUSH
36176: LD_VAR 0 4
36180: ARRAY
36181: PUSH
36182: LD_INT 2
36184: ARRAY
36185: PPUSH
36186: CALL_OW 488
36190: NOT
36191: PUSH
36192: LD_VAR 0 6
36196: PUSH
36197: LD_VAR 0 4
36201: ARRAY
36202: PUSH
36203: LD_INT 1
36205: ARRAY
36206: PPUSH
36207: LD_VAR 0 6
36211: PUSH
36212: LD_VAR 0 4
36216: ARRAY
36217: PUSH
36218: LD_INT 2
36220: ARRAY
36221: PPUSH
36222: CALL_OW 428
36226: PUSH
36227: LD_INT 0
36229: NONEQUAL
36230: OR
36231: IFFALSE 36253
// tmp := Delete ( tmp , i ) ;
36233: LD_ADDR_VAR 0 6
36237: PUSH
36238: LD_VAR 0 6
36242: PPUSH
36243: LD_VAR 0 4
36247: PPUSH
36248: CALL_OW 3
36252: ST_TO_ADDR
36253: GO 36153
36255: POP
36256: POP
// j := GetClosestHex ( unit , tmp ) ;
36257: LD_ADDR_VAR 0 5
36261: PUSH
36262: LD_VAR 0 1
36266: PPUSH
36267: LD_VAR 0 6
36271: PPUSH
36272: CALL 35559 0 2
36276: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
36277: LD_VAR 0 1
36281: PPUSH
36282: LD_VAR 0 5
36286: PUSH
36287: LD_INT 1
36289: ARRAY
36290: PPUSH
36291: LD_VAR 0 5
36295: PUSH
36296: LD_INT 2
36298: ARRAY
36299: PPUSH
36300: CALL_OW 111
// end ;
36304: LD_VAR 0 3
36308: RET
// export function PrepareApemanSoldier ( ) ; begin
36309: LD_INT 0
36311: PPUSH
// uc_nation := 0 ;
36312: LD_ADDR_OWVAR 21
36316: PUSH
36317: LD_INT 0
36319: ST_TO_ADDR
// hc_sex := sex_male ;
36320: LD_ADDR_OWVAR 27
36324: PUSH
36325: LD_INT 1
36327: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
36328: LD_ADDR_OWVAR 28
36332: PUSH
36333: LD_INT 15
36335: ST_TO_ADDR
// hc_gallery :=  ;
36336: LD_ADDR_OWVAR 33
36340: PUSH
36341: LD_STRING 
36343: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36344: LD_ADDR_OWVAR 31
36348: PUSH
36349: LD_INT 0
36351: PPUSH
36352: LD_INT 3
36354: PPUSH
36355: CALL_OW 12
36359: PUSH
36360: LD_INT 0
36362: PPUSH
36363: LD_INT 3
36365: PPUSH
36366: CALL_OW 12
36370: PUSH
36371: LD_INT 0
36373: PUSH
36374: LD_INT 0
36376: PUSH
36377: EMPTY
36378: LIST
36379: LIST
36380: LIST
36381: LIST
36382: ST_TO_ADDR
// end ;
36383: LD_VAR 0 1
36387: RET
// export function PrepareApemanEngineer ( ) ; begin
36388: LD_INT 0
36390: PPUSH
// uc_nation := 0 ;
36391: LD_ADDR_OWVAR 21
36395: PUSH
36396: LD_INT 0
36398: ST_TO_ADDR
// hc_sex := sex_male ;
36399: LD_ADDR_OWVAR 27
36403: PUSH
36404: LD_INT 1
36406: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
36407: LD_ADDR_OWVAR 28
36411: PUSH
36412: LD_INT 16
36414: ST_TO_ADDR
// hc_gallery :=  ;
36415: LD_ADDR_OWVAR 33
36419: PUSH
36420: LD_STRING 
36422: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36423: LD_ADDR_OWVAR 31
36427: PUSH
36428: LD_INT 0
36430: PPUSH
36431: LD_INT 3
36433: PPUSH
36434: CALL_OW 12
36438: PUSH
36439: LD_INT 0
36441: PPUSH
36442: LD_INT 3
36444: PPUSH
36445: CALL_OW 12
36449: PUSH
36450: LD_INT 0
36452: PUSH
36453: LD_INT 0
36455: PUSH
36456: EMPTY
36457: LIST
36458: LIST
36459: LIST
36460: LIST
36461: ST_TO_ADDR
// end ;
36462: LD_VAR 0 1
36466: RET
// export function PrepareApeman ( agressivity ) ; begin
36467: LD_INT 0
36469: PPUSH
// uc_side := 0 ;
36470: LD_ADDR_OWVAR 20
36474: PUSH
36475: LD_INT 0
36477: ST_TO_ADDR
// uc_nation := 0 ;
36478: LD_ADDR_OWVAR 21
36482: PUSH
36483: LD_INT 0
36485: ST_TO_ADDR
// hc_sex := sex_male ;
36486: LD_ADDR_OWVAR 27
36490: PUSH
36491: LD_INT 1
36493: ST_TO_ADDR
// hc_class := class_apeman ;
36494: LD_ADDR_OWVAR 28
36498: PUSH
36499: LD_INT 12
36501: ST_TO_ADDR
// hc_gallery :=  ;
36502: LD_ADDR_OWVAR 33
36506: PUSH
36507: LD_STRING 
36509: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
36510: LD_ADDR_OWVAR 35
36514: PUSH
36515: LD_VAR 0 1
36519: NEG
36520: PPUSH
36521: LD_VAR 0 1
36525: PPUSH
36526: CALL_OW 12
36530: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36531: LD_ADDR_OWVAR 31
36535: PUSH
36536: LD_INT 0
36538: PPUSH
36539: LD_INT 3
36541: PPUSH
36542: CALL_OW 12
36546: PUSH
36547: LD_INT 0
36549: PPUSH
36550: LD_INT 3
36552: PPUSH
36553: CALL_OW 12
36557: PUSH
36558: LD_INT 0
36560: PUSH
36561: LD_INT 0
36563: PUSH
36564: EMPTY
36565: LIST
36566: LIST
36567: LIST
36568: LIST
36569: ST_TO_ADDR
// end ;
36570: LD_VAR 0 2
36574: RET
// export function PrepareTiger ( agressivity ) ; begin
36575: LD_INT 0
36577: PPUSH
// uc_side := 0 ;
36578: LD_ADDR_OWVAR 20
36582: PUSH
36583: LD_INT 0
36585: ST_TO_ADDR
// uc_nation := 0 ;
36586: LD_ADDR_OWVAR 21
36590: PUSH
36591: LD_INT 0
36593: ST_TO_ADDR
// hc_class := class_tiger ;
36594: LD_ADDR_OWVAR 28
36598: PUSH
36599: LD_INT 14
36601: ST_TO_ADDR
// hc_gallery :=  ;
36602: LD_ADDR_OWVAR 33
36606: PUSH
36607: LD_STRING 
36609: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
36610: LD_ADDR_OWVAR 35
36614: PUSH
36615: LD_VAR 0 1
36619: NEG
36620: PPUSH
36621: LD_VAR 0 1
36625: PPUSH
36626: CALL_OW 12
36630: ST_TO_ADDR
// end ;
36631: LD_VAR 0 2
36635: RET
// export function PrepareEnchidna ( ) ; begin
36636: LD_INT 0
36638: PPUSH
// uc_side := 0 ;
36639: LD_ADDR_OWVAR 20
36643: PUSH
36644: LD_INT 0
36646: ST_TO_ADDR
// uc_nation := 0 ;
36647: LD_ADDR_OWVAR 21
36651: PUSH
36652: LD_INT 0
36654: ST_TO_ADDR
// hc_class := class_baggie ;
36655: LD_ADDR_OWVAR 28
36659: PUSH
36660: LD_INT 13
36662: ST_TO_ADDR
// hc_gallery :=  ;
36663: LD_ADDR_OWVAR 33
36667: PUSH
36668: LD_STRING 
36670: ST_TO_ADDR
// end ;
36671: LD_VAR 0 1
36675: RET
// export function PrepareFrog ( ) ; begin
36676: LD_INT 0
36678: PPUSH
// uc_side := 0 ;
36679: LD_ADDR_OWVAR 20
36683: PUSH
36684: LD_INT 0
36686: ST_TO_ADDR
// uc_nation := 0 ;
36687: LD_ADDR_OWVAR 21
36691: PUSH
36692: LD_INT 0
36694: ST_TO_ADDR
// hc_class := class_frog ;
36695: LD_ADDR_OWVAR 28
36699: PUSH
36700: LD_INT 19
36702: ST_TO_ADDR
// hc_gallery :=  ;
36703: LD_ADDR_OWVAR 33
36707: PUSH
36708: LD_STRING 
36710: ST_TO_ADDR
// end ;
36711: LD_VAR 0 1
36715: RET
// export function PrepareFish ( ) ; begin
36716: LD_INT 0
36718: PPUSH
// uc_side := 0 ;
36719: LD_ADDR_OWVAR 20
36723: PUSH
36724: LD_INT 0
36726: ST_TO_ADDR
// uc_nation := 0 ;
36727: LD_ADDR_OWVAR 21
36731: PUSH
36732: LD_INT 0
36734: ST_TO_ADDR
// hc_class := class_fish ;
36735: LD_ADDR_OWVAR 28
36739: PUSH
36740: LD_INT 20
36742: ST_TO_ADDR
// hc_gallery :=  ;
36743: LD_ADDR_OWVAR 33
36747: PUSH
36748: LD_STRING 
36750: ST_TO_ADDR
// end ;
36751: LD_VAR 0 1
36755: RET
// export function PrepareBird ( ) ; begin
36756: LD_INT 0
36758: PPUSH
// uc_side := 0 ;
36759: LD_ADDR_OWVAR 20
36763: PUSH
36764: LD_INT 0
36766: ST_TO_ADDR
// uc_nation := 0 ;
36767: LD_ADDR_OWVAR 21
36771: PUSH
36772: LD_INT 0
36774: ST_TO_ADDR
// hc_class := class_phororhacos ;
36775: LD_ADDR_OWVAR 28
36779: PUSH
36780: LD_INT 18
36782: ST_TO_ADDR
// hc_gallery :=  ;
36783: LD_ADDR_OWVAR 33
36787: PUSH
36788: LD_STRING 
36790: ST_TO_ADDR
// end ;
36791: LD_VAR 0 1
36795: RET
// export function PrepareHorse ( ) ; begin
36796: LD_INT 0
36798: PPUSH
// uc_side := 0 ;
36799: LD_ADDR_OWVAR 20
36803: PUSH
36804: LD_INT 0
36806: ST_TO_ADDR
// uc_nation := 0 ;
36807: LD_ADDR_OWVAR 21
36811: PUSH
36812: LD_INT 0
36814: ST_TO_ADDR
// hc_class := class_horse ;
36815: LD_ADDR_OWVAR 28
36819: PUSH
36820: LD_INT 21
36822: ST_TO_ADDR
// hc_gallery :=  ;
36823: LD_ADDR_OWVAR 33
36827: PUSH
36828: LD_STRING 
36830: ST_TO_ADDR
// end ;
36831: LD_VAR 0 1
36835: RET
// export function PrepareMastodont ( ) ; begin
36836: LD_INT 0
36838: PPUSH
// uc_side := 0 ;
36839: LD_ADDR_OWVAR 20
36843: PUSH
36844: LD_INT 0
36846: ST_TO_ADDR
// uc_nation := 0 ;
36847: LD_ADDR_OWVAR 21
36851: PUSH
36852: LD_INT 0
36854: ST_TO_ADDR
// vc_chassis := class_mastodont ;
36855: LD_ADDR_OWVAR 37
36859: PUSH
36860: LD_INT 31
36862: ST_TO_ADDR
// vc_control := control_rider ;
36863: LD_ADDR_OWVAR 38
36867: PUSH
36868: LD_INT 4
36870: ST_TO_ADDR
// end ;
36871: LD_VAR 0 1
36875: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
36876: LD_INT 0
36878: PPUSH
36879: PPUSH
36880: PPUSH
// uc_side = 0 ;
36881: LD_ADDR_OWVAR 20
36885: PUSH
36886: LD_INT 0
36888: ST_TO_ADDR
// uc_nation = 0 ;
36889: LD_ADDR_OWVAR 21
36893: PUSH
36894: LD_INT 0
36896: ST_TO_ADDR
// InitHc_All ( ) ;
36897: CALL_OW 584
// InitVc ;
36901: CALL_OW 20
// if mastodonts then
36905: LD_VAR 0 6
36909: IFFALSE 36976
// for i = 1 to mastodonts do
36911: LD_ADDR_VAR 0 11
36915: PUSH
36916: DOUBLE
36917: LD_INT 1
36919: DEC
36920: ST_TO_ADDR
36921: LD_VAR 0 6
36925: PUSH
36926: FOR_TO
36927: IFFALSE 36974
// begin vc_chassis := 31 ;
36929: LD_ADDR_OWVAR 37
36933: PUSH
36934: LD_INT 31
36936: ST_TO_ADDR
// vc_control := control_rider ;
36937: LD_ADDR_OWVAR 38
36941: PUSH
36942: LD_INT 4
36944: ST_TO_ADDR
// animal := CreateVehicle ;
36945: LD_ADDR_VAR 0 12
36949: PUSH
36950: CALL_OW 45
36954: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36955: LD_VAR 0 12
36959: PPUSH
36960: LD_VAR 0 8
36964: PPUSH
36965: LD_INT 0
36967: PPUSH
36968: CALL 39104 0 3
// end ;
36972: GO 36926
36974: POP
36975: POP
// if horses then
36976: LD_VAR 0 5
36980: IFFALSE 37047
// for i = 1 to horses do
36982: LD_ADDR_VAR 0 11
36986: PUSH
36987: DOUBLE
36988: LD_INT 1
36990: DEC
36991: ST_TO_ADDR
36992: LD_VAR 0 5
36996: PUSH
36997: FOR_TO
36998: IFFALSE 37045
// begin hc_class := 21 ;
37000: LD_ADDR_OWVAR 28
37004: PUSH
37005: LD_INT 21
37007: ST_TO_ADDR
// hc_gallery :=  ;
37008: LD_ADDR_OWVAR 33
37012: PUSH
37013: LD_STRING 
37015: ST_TO_ADDR
// animal := CreateHuman ;
37016: LD_ADDR_VAR 0 12
37020: PUSH
37021: CALL_OW 44
37025: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37026: LD_VAR 0 12
37030: PPUSH
37031: LD_VAR 0 8
37035: PPUSH
37036: LD_INT 0
37038: PPUSH
37039: CALL 39104 0 3
// end ;
37043: GO 36997
37045: POP
37046: POP
// if birds then
37047: LD_VAR 0 1
37051: IFFALSE 37118
// for i = 1 to birds do
37053: LD_ADDR_VAR 0 11
37057: PUSH
37058: DOUBLE
37059: LD_INT 1
37061: DEC
37062: ST_TO_ADDR
37063: LD_VAR 0 1
37067: PUSH
37068: FOR_TO
37069: IFFALSE 37116
// begin hc_class := 18 ;
37071: LD_ADDR_OWVAR 28
37075: PUSH
37076: LD_INT 18
37078: ST_TO_ADDR
// hc_gallery =  ;
37079: LD_ADDR_OWVAR 33
37083: PUSH
37084: LD_STRING 
37086: ST_TO_ADDR
// animal := CreateHuman ;
37087: LD_ADDR_VAR 0 12
37091: PUSH
37092: CALL_OW 44
37096: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37097: LD_VAR 0 12
37101: PPUSH
37102: LD_VAR 0 8
37106: PPUSH
37107: LD_INT 0
37109: PPUSH
37110: CALL 39104 0 3
// end ;
37114: GO 37068
37116: POP
37117: POP
// if tigers then
37118: LD_VAR 0 2
37122: IFFALSE 37206
// for i = 1 to tigers do
37124: LD_ADDR_VAR 0 11
37128: PUSH
37129: DOUBLE
37130: LD_INT 1
37132: DEC
37133: ST_TO_ADDR
37134: LD_VAR 0 2
37138: PUSH
37139: FOR_TO
37140: IFFALSE 37204
// begin hc_class = class_tiger ;
37142: LD_ADDR_OWVAR 28
37146: PUSH
37147: LD_INT 14
37149: ST_TO_ADDR
// hc_gallery =  ;
37150: LD_ADDR_OWVAR 33
37154: PUSH
37155: LD_STRING 
37157: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
37158: LD_ADDR_OWVAR 35
37162: PUSH
37163: LD_INT 7
37165: NEG
37166: PPUSH
37167: LD_INT 7
37169: PPUSH
37170: CALL_OW 12
37174: ST_TO_ADDR
// animal := CreateHuman ;
37175: LD_ADDR_VAR 0 12
37179: PUSH
37180: CALL_OW 44
37184: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37185: LD_VAR 0 12
37189: PPUSH
37190: LD_VAR 0 8
37194: PPUSH
37195: LD_INT 0
37197: PPUSH
37198: CALL 39104 0 3
// end ;
37202: GO 37139
37204: POP
37205: POP
// if apemans then
37206: LD_VAR 0 3
37210: IFFALSE 37333
// for i = 1 to apemans do
37212: LD_ADDR_VAR 0 11
37216: PUSH
37217: DOUBLE
37218: LD_INT 1
37220: DEC
37221: ST_TO_ADDR
37222: LD_VAR 0 3
37226: PUSH
37227: FOR_TO
37228: IFFALSE 37331
// begin hc_class = class_apeman ;
37230: LD_ADDR_OWVAR 28
37234: PUSH
37235: LD_INT 12
37237: ST_TO_ADDR
// hc_gallery =  ;
37238: LD_ADDR_OWVAR 33
37242: PUSH
37243: LD_STRING 
37245: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
37246: LD_ADDR_OWVAR 35
37250: PUSH
37251: LD_INT 2
37253: NEG
37254: PPUSH
37255: LD_INT 2
37257: PPUSH
37258: CALL_OW 12
37262: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
37263: LD_ADDR_OWVAR 31
37267: PUSH
37268: LD_INT 1
37270: PPUSH
37271: LD_INT 3
37273: PPUSH
37274: CALL_OW 12
37278: PUSH
37279: LD_INT 1
37281: PPUSH
37282: LD_INT 3
37284: PPUSH
37285: CALL_OW 12
37289: PUSH
37290: LD_INT 0
37292: PUSH
37293: LD_INT 0
37295: PUSH
37296: EMPTY
37297: LIST
37298: LIST
37299: LIST
37300: LIST
37301: ST_TO_ADDR
// animal := CreateHuman ;
37302: LD_ADDR_VAR 0 12
37306: PUSH
37307: CALL_OW 44
37311: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37312: LD_VAR 0 12
37316: PPUSH
37317: LD_VAR 0 8
37321: PPUSH
37322: LD_INT 0
37324: PPUSH
37325: CALL 39104 0 3
// end ;
37329: GO 37227
37331: POP
37332: POP
// if enchidnas then
37333: LD_VAR 0 4
37337: IFFALSE 37404
// for i = 1 to enchidnas do
37339: LD_ADDR_VAR 0 11
37343: PUSH
37344: DOUBLE
37345: LD_INT 1
37347: DEC
37348: ST_TO_ADDR
37349: LD_VAR 0 4
37353: PUSH
37354: FOR_TO
37355: IFFALSE 37402
// begin hc_class = 13 ;
37357: LD_ADDR_OWVAR 28
37361: PUSH
37362: LD_INT 13
37364: ST_TO_ADDR
// hc_gallery =  ;
37365: LD_ADDR_OWVAR 33
37369: PUSH
37370: LD_STRING 
37372: ST_TO_ADDR
// animal := CreateHuman ;
37373: LD_ADDR_VAR 0 12
37377: PUSH
37378: CALL_OW 44
37382: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37383: LD_VAR 0 12
37387: PPUSH
37388: LD_VAR 0 8
37392: PPUSH
37393: LD_INT 0
37395: PPUSH
37396: CALL 39104 0 3
// end ;
37400: GO 37354
37402: POP
37403: POP
// if fishes then
37404: LD_VAR 0 7
37408: IFFALSE 37475
// for i = 1 to fishes do
37410: LD_ADDR_VAR 0 11
37414: PUSH
37415: DOUBLE
37416: LD_INT 1
37418: DEC
37419: ST_TO_ADDR
37420: LD_VAR 0 7
37424: PUSH
37425: FOR_TO
37426: IFFALSE 37473
// begin hc_class = 20 ;
37428: LD_ADDR_OWVAR 28
37432: PUSH
37433: LD_INT 20
37435: ST_TO_ADDR
// hc_gallery =  ;
37436: LD_ADDR_OWVAR 33
37440: PUSH
37441: LD_STRING 
37443: ST_TO_ADDR
// animal := CreateHuman ;
37444: LD_ADDR_VAR 0 12
37448: PUSH
37449: CALL_OW 44
37453: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
37454: LD_VAR 0 12
37458: PPUSH
37459: LD_VAR 0 9
37463: PPUSH
37464: LD_INT 0
37466: PPUSH
37467: CALL 39104 0 3
// end ;
37471: GO 37425
37473: POP
37474: POP
// end ;
37475: LD_VAR 0 10
37479: RET
// export function WantHeal ( sci , unit ) ; begin
37480: LD_INT 0
37482: PPUSH
// if GetTaskList ( sci ) > 0 then
37483: LD_VAR 0 1
37487: PPUSH
37488: CALL_OW 437
37492: PUSH
37493: LD_INT 0
37495: GREATER
37496: IFFALSE 37566
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
37498: LD_VAR 0 1
37502: PPUSH
37503: CALL_OW 437
37507: PUSH
37508: LD_INT 1
37510: ARRAY
37511: PUSH
37512: LD_INT 1
37514: ARRAY
37515: PUSH
37516: LD_STRING l
37518: EQUAL
37519: PUSH
37520: LD_VAR 0 1
37524: PPUSH
37525: CALL_OW 437
37529: PUSH
37530: LD_INT 1
37532: ARRAY
37533: PUSH
37534: LD_INT 4
37536: ARRAY
37537: PUSH
37538: LD_VAR 0 2
37542: EQUAL
37543: AND
37544: IFFALSE 37556
// result := true else
37546: LD_ADDR_VAR 0 3
37550: PUSH
37551: LD_INT 1
37553: ST_TO_ADDR
37554: GO 37564
// result := false ;
37556: LD_ADDR_VAR 0 3
37560: PUSH
37561: LD_INT 0
37563: ST_TO_ADDR
// end else
37564: GO 37574
// result := false ;
37566: LD_ADDR_VAR 0 3
37570: PUSH
37571: LD_INT 0
37573: ST_TO_ADDR
// end ;
37574: LD_VAR 0 3
37578: RET
// export function HealTarget ( sci ) ; begin
37579: LD_INT 0
37581: PPUSH
// if not sci then
37582: LD_VAR 0 1
37586: NOT
37587: IFFALSE 37591
// exit ;
37589: GO 37656
// result := 0 ;
37591: LD_ADDR_VAR 0 2
37595: PUSH
37596: LD_INT 0
37598: ST_TO_ADDR
// if GetTaskList ( sci ) then
37599: LD_VAR 0 1
37603: PPUSH
37604: CALL_OW 437
37608: IFFALSE 37656
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
37610: LD_VAR 0 1
37614: PPUSH
37615: CALL_OW 437
37619: PUSH
37620: LD_INT 1
37622: ARRAY
37623: PUSH
37624: LD_INT 1
37626: ARRAY
37627: PUSH
37628: LD_STRING l
37630: EQUAL
37631: IFFALSE 37656
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
37633: LD_ADDR_VAR 0 2
37637: PUSH
37638: LD_VAR 0 1
37642: PPUSH
37643: CALL_OW 437
37647: PUSH
37648: LD_INT 1
37650: ARRAY
37651: PUSH
37652: LD_INT 4
37654: ARRAY
37655: ST_TO_ADDR
// end ;
37656: LD_VAR 0 2
37660: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
37661: LD_INT 0
37663: PPUSH
37664: PPUSH
37665: PPUSH
37666: PPUSH
// if not base_units then
37667: LD_VAR 0 1
37671: NOT
37672: IFFALSE 37676
// exit ;
37674: GO 37763
// result := false ;
37676: LD_ADDR_VAR 0 2
37680: PUSH
37681: LD_INT 0
37683: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
37684: LD_ADDR_VAR 0 5
37688: PUSH
37689: LD_VAR 0 1
37693: PPUSH
37694: LD_INT 21
37696: PUSH
37697: LD_INT 3
37699: PUSH
37700: EMPTY
37701: LIST
37702: LIST
37703: PPUSH
37704: CALL_OW 72
37708: ST_TO_ADDR
// if not tmp then
37709: LD_VAR 0 5
37713: NOT
37714: IFFALSE 37718
// exit ;
37716: GO 37763
// for i in tmp do
37718: LD_ADDR_VAR 0 3
37722: PUSH
37723: LD_VAR 0 5
37727: PUSH
37728: FOR_IN
37729: IFFALSE 37761
// begin result := EnemyInRange ( i , 22 ) ;
37731: LD_ADDR_VAR 0 2
37735: PUSH
37736: LD_VAR 0 3
37740: PPUSH
37741: LD_INT 22
37743: PPUSH
37744: CALL 35361 0 2
37748: ST_TO_ADDR
// if result then
37749: LD_VAR 0 2
37753: IFFALSE 37759
// exit ;
37755: POP
37756: POP
37757: GO 37763
// end ;
37759: GO 37728
37761: POP
37762: POP
// end ;
37763: LD_VAR 0 2
37767: RET
// export function FilterByTag ( units , tag ) ; begin
37768: LD_INT 0
37770: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
37771: LD_ADDR_VAR 0 3
37775: PUSH
37776: LD_VAR 0 1
37780: PPUSH
37781: LD_INT 120
37783: PUSH
37784: LD_VAR 0 2
37788: PUSH
37789: EMPTY
37790: LIST
37791: LIST
37792: PPUSH
37793: CALL_OW 72
37797: ST_TO_ADDR
// end ;
37798: LD_VAR 0 3
37802: RET
// export function IsDriver ( un ) ; begin
37803: LD_INT 0
37805: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
37806: LD_ADDR_VAR 0 2
37810: PUSH
37811: LD_VAR 0 1
37815: PUSH
37816: LD_INT 55
37818: PUSH
37819: EMPTY
37820: LIST
37821: PPUSH
37822: CALL_OW 69
37826: IN
37827: ST_TO_ADDR
// end ;
37828: LD_VAR 0 2
37832: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
37833: LD_INT 0
37835: PPUSH
37836: PPUSH
// list := [ ] ;
37837: LD_ADDR_VAR 0 5
37841: PUSH
37842: EMPTY
37843: ST_TO_ADDR
// case d of 0 :
37844: LD_VAR 0 3
37848: PUSH
37849: LD_INT 0
37851: DOUBLE
37852: EQUAL
37853: IFTRUE 37857
37855: GO 37990
37857: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
37858: LD_ADDR_VAR 0 5
37862: PUSH
37863: LD_VAR 0 1
37867: PUSH
37868: LD_INT 4
37870: MINUS
37871: PUSH
37872: LD_VAR 0 2
37876: PUSH
37877: LD_INT 4
37879: MINUS
37880: PUSH
37881: LD_INT 2
37883: PUSH
37884: EMPTY
37885: LIST
37886: LIST
37887: LIST
37888: PUSH
37889: LD_VAR 0 1
37893: PUSH
37894: LD_INT 3
37896: MINUS
37897: PUSH
37898: LD_VAR 0 2
37902: PUSH
37903: LD_INT 1
37905: PUSH
37906: EMPTY
37907: LIST
37908: LIST
37909: LIST
37910: PUSH
37911: LD_VAR 0 1
37915: PUSH
37916: LD_INT 4
37918: PLUS
37919: PUSH
37920: LD_VAR 0 2
37924: PUSH
37925: LD_INT 4
37927: PUSH
37928: EMPTY
37929: LIST
37930: LIST
37931: LIST
37932: PUSH
37933: LD_VAR 0 1
37937: PUSH
37938: LD_INT 3
37940: PLUS
37941: PUSH
37942: LD_VAR 0 2
37946: PUSH
37947: LD_INT 3
37949: PLUS
37950: PUSH
37951: LD_INT 5
37953: PUSH
37954: EMPTY
37955: LIST
37956: LIST
37957: LIST
37958: PUSH
37959: LD_VAR 0 1
37963: PUSH
37964: LD_VAR 0 2
37968: PUSH
37969: LD_INT 4
37971: PLUS
37972: PUSH
37973: LD_INT 0
37975: PUSH
37976: EMPTY
37977: LIST
37978: LIST
37979: LIST
37980: PUSH
37981: EMPTY
37982: LIST
37983: LIST
37984: LIST
37985: LIST
37986: LIST
37987: ST_TO_ADDR
// end ; 1 :
37988: GO 38688
37990: LD_INT 1
37992: DOUBLE
37993: EQUAL
37994: IFTRUE 37998
37996: GO 38131
37998: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
37999: LD_ADDR_VAR 0 5
38003: PUSH
38004: LD_VAR 0 1
38008: PUSH
38009: LD_VAR 0 2
38013: PUSH
38014: LD_INT 4
38016: MINUS
38017: PUSH
38018: LD_INT 3
38020: PUSH
38021: EMPTY
38022: LIST
38023: LIST
38024: LIST
38025: PUSH
38026: LD_VAR 0 1
38030: PUSH
38031: LD_INT 3
38033: MINUS
38034: PUSH
38035: LD_VAR 0 2
38039: PUSH
38040: LD_INT 3
38042: MINUS
38043: PUSH
38044: LD_INT 2
38046: PUSH
38047: EMPTY
38048: LIST
38049: LIST
38050: LIST
38051: PUSH
38052: LD_VAR 0 1
38056: PUSH
38057: LD_INT 4
38059: MINUS
38060: PUSH
38061: LD_VAR 0 2
38065: PUSH
38066: LD_INT 1
38068: PUSH
38069: EMPTY
38070: LIST
38071: LIST
38072: LIST
38073: PUSH
38074: LD_VAR 0 1
38078: PUSH
38079: LD_VAR 0 2
38083: PUSH
38084: LD_INT 3
38086: PLUS
38087: PUSH
38088: LD_INT 0
38090: PUSH
38091: EMPTY
38092: LIST
38093: LIST
38094: LIST
38095: PUSH
38096: LD_VAR 0 1
38100: PUSH
38101: LD_INT 4
38103: PLUS
38104: PUSH
38105: LD_VAR 0 2
38109: PUSH
38110: LD_INT 4
38112: PLUS
38113: PUSH
38114: LD_INT 5
38116: PUSH
38117: EMPTY
38118: LIST
38119: LIST
38120: LIST
38121: PUSH
38122: EMPTY
38123: LIST
38124: LIST
38125: LIST
38126: LIST
38127: LIST
38128: ST_TO_ADDR
// end ; 2 :
38129: GO 38688
38131: LD_INT 2
38133: DOUBLE
38134: EQUAL
38135: IFTRUE 38139
38137: GO 38268
38139: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
38140: LD_ADDR_VAR 0 5
38144: PUSH
38145: LD_VAR 0 1
38149: PUSH
38150: LD_VAR 0 2
38154: PUSH
38155: LD_INT 3
38157: MINUS
38158: PUSH
38159: LD_INT 3
38161: PUSH
38162: EMPTY
38163: LIST
38164: LIST
38165: LIST
38166: PUSH
38167: LD_VAR 0 1
38171: PUSH
38172: LD_INT 4
38174: PLUS
38175: PUSH
38176: LD_VAR 0 2
38180: PUSH
38181: LD_INT 4
38183: PUSH
38184: EMPTY
38185: LIST
38186: LIST
38187: LIST
38188: PUSH
38189: LD_VAR 0 1
38193: PUSH
38194: LD_VAR 0 2
38198: PUSH
38199: LD_INT 4
38201: PLUS
38202: PUSH
38203: LD_INT 0
38205: PUSH
38206: EMPTY
38207: LIST
38208: LIST
38209: LIST
38210: PUSH
38211: LD_VAR 0 1
38215: PUSH
38216: LD_INT 3
38218: MINUS
38219: PUSH
38220: LD_VAR 0 2
38224: PUSH
38225: LD_INT 1
38227: PUSH
38228: EMPTY
38229: LIST
38230: LIST
38231: LIST
38232: PUSH
38233: LD_VAR 0 1
38237: PUSH
38238: LD_INT 4
38240: MINUS
38241: PUSH
38242: LD_VAR 0 2
38246: PUSH
38247: LD_INT 4
38249: MINUS
38250: PUSH
38251: LD_INT 2
38253: PUSH
38254: EMPTY
38255: LIST
38256: LIST
38257: LIST
38258: PUSH
38259: EMPTY
38260: LIST
38261: LIST
38262: LIST
38263: LIST
38264: LIST
38265: ST_TO_ADDR
// end ; 3 :
38266: GO 38688
38268: LD_INT 3
38270: DOUBLE
38271: EQUAL
38272: IFTRUE 38276
38274: GO 38409
38276: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
38277: LD_ADDR_VAR 0 5
38281: PUSH
38282: LD_VAR 0 1
38286: PUSH
38287: LD_INT 3
38289: PLUS
38290: PUSH
38291: LD_VAR 0 2
38295: PUSH
38296: LD_INT 4
38298: PUSH
38299: EMPTY
38300: LIST
38301: LIST
38302: LIST
38303: PUSH
38304: LD_VAR 0 1
38308: PUSH
38309: LD_INT 4
38311: PLUS
38312: PUSH
38313: LD_VAR 0 2
38317: PUSH
38318: LD_INT 4
38320: PLUS
38321: PUSH
38322: LD_INT 5
38324: PUSH
38325: EMPTY
38326: LIST
38327: LIST
38328: LIST
38329: PUSH
38330: LD_VAR 0 1
38334: PUSH
38335: LD_INT 4
38337: MINUS
38338: PUSH
38339: LD_VAR 0 2
38343: PUSH
38344: LD_INT 1
38346: PUSH
38347: EMPTY
38348: LIST
38349: LIST
38350: LIST
38351: PUSH
38352: LD_VAR 0 1
38356: PUSH
38357: LD_VAR 0 2
38361: PUSH
38362: LD_INT 4
38364: MINUS
38365: PUSH
38366: LD_INT 3
38368: PUSH
38369: EMPTY
38370: LIST
38371: LIST
38372: LIST
38373: PUSH
38374: LD_VAR 0 1
38378: PUSH
38379: LD_INT 3
38381: MINUS
38382: PUSH
38383: LD_VAR 0 2
38387: PUSH
38388: LD_INT 3
38390: MINUS
38391: PUSH
38392: LD_INT 2
38394: PUSH
38395: EMPTY
38396: LIST
38397: LIST
38398: LIST
38399: PUSH
38400: EMPTY
38401: LIST
38402: LIST
38403: LIST
38404: LIST
38405: LIST
38406: ST_TO_ADDR
// end ; 4 :
38407: GO 38688
38409: LD_INT 4
38411: DOUBLE
38412: EQUAL
38413: IFTRUE 38417
38415: GO 38550
38417: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
38418: LD_ADDR_VAR 0 5
38422: PUSH
38423: LD_VAR 0 1
38427: PUSH
38428: LD_VAR 0 2
38432: PUSH
38433: LD_INT 4
38435: PLUS
38436: PUSH
38437: LD_INT 0
38439: PUSH
38440: EMPTY
38441: LIST
38442: LIST
38443: LIST
38444: PUSH
38445: LD_VAR 0 1
38449: PUSH
38450: LD_INT 3
38452: PLUS
38453: PUSH
38454: LD_VAR 0 2
38458: PUSH
38459: LD_INT 3
38461: PLUS
38462: PUSH
38463: LD_INT 5
38465: PUSH
38466: EMPTY
38467: LIST
38468: LIST
38469: LIST
38470: PUSH
38471: LD_VAR 0 1
38475: PUSH
38476: LD_INT 4
38478: PLUS
38479: PUSH
38480: LD_VAR 0 2
38484: PUSH
38485: LD_INT 4
38487: PUSH
38488: EMPTY
38489: LIST
38490: LIST
38491: LIST
38492: PUSH
38493: LD_VAR 0 1
38497: PUSH
38498: LD_VAR 0 2
38502: PUSH
38503: LD_INT 3
38505: MINUS
38506: PUSH
38507: LD_INT 3
38509: PUSH
38510: EMPTY
38511: LIST
38512: LIST
38513: LIST
38514: PUSH
38515: LD_VAR 0 1
38519: PUSH
38520: LD_INT 4
38522: MINUS
38523: PUSH
38524: LD_VAR 0 2
38528: PUSH
38529: LD_INT 4
38531: MINUS
38532: PUSH
38533: LD_INT 2
38535: PUSH
38536: EMPTY
38537: LIST
38538: LIST
38539: LIST
38540: PUSH
38541: EMPTY
38542: LIST
38543: LIST
38544: LIST
38545: LIST
38546: LIST
38547: ST_TO_ADDR
// end ; 5 :
38548: GO 38688
38550: LD_INT 5
38552: DOUBLE
38553: EQUAL
38554: IFTRUE 38558
38556: GO 38687
38558: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
38559: LD_ADDR_VAR 0 5
38563: PUSH
38564: LD_VAR 0 1
38568: PUSH
38569: LD_INT 4
38571: MINUS
38572: PUSH
38573: LD_VAR 0 2
38577: PUSH
38578: LD_INT 1
38580: PUSH
38581: EMPTY
38582: LIST
38583: LIST
38584: LIST
38585: PUSH
38586: LD_VAR 0 1
38590: PUSH
38591: LD_VAR 0 2
38595: PUSH
38596: LD_INT 4
38598: MINUS
38599: PUSH
38600: LD_INT 3
38602: PUSH
38603: EMPTY
38604: LIST
38605: LIST
38606: LIST
38607: PUSH
38608: LD_VAR 0 1
38612: PUSH
38613: LD_INT 4
38615: PLUS
38616: PUSH
38617: LD_VAR 0 2
38621: PUSH
38622: LD_INT 4
38624: PLUS
38625: PUSH
38626: LD_INT 5
38628: PUSH
38629: EMPTY
38630: LIST
38631: LIST
38632: LIST
38633: PUSH
38634: LD_VAR 0 1
38638: PUSH
38639: LD_INT 3
38641: PLUS
38642: PUSH
38643: LD_VAR 0 2
38647: PUSH
38648: LD_INT 4
38650: PUSH
38651: EMPTY
38652: LIST
38653: LIST
38654: LIST
38655: PUSH
38656: LD_VAR 0 1
38660: PUSH
38661: LD_VAR 0 2
38665: PUSH
38666: LD_INT 3
38668: PLUS
38669: PUSH
38670: LD_INT 0
38672: PUSH
38673: EMPTY
38674: LIST
38675: LIST
38676: LIST
38677: PUSH
38678: EMPTY
38679: LIST
38680: LIST
38681: LIST
38682: LIST
38683: LIST
38684: ST_TO_ADDR
// end ; end ;
38685: GO 38688
38687: POP
// result := list ;
38688: LD_ADDR_VAR 0 4
38692: PUSH
38693: LD_VAR 0 5
38697: ST_TO_ADDR
// end ;
38698: LD_VAR 0 4
38702: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
38703: LD_INT 0
38705: PPUSH
38706: PPUSH
38707: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
38708: LD_VAR 0 1
38712: NOT
38713: PUSH
38714: LD_VAR 0 2
38718: PUSH
38719: LD_INT 1
38721: PUSH
38722: LD_INT 2
38724: PUSH
38725: LD_INT 3
38727: PUSH
38728: LD_INT 4
38730: PUSH
38731: EMPTY
38732: LIST
38733: LIST
38734: LIST
38735: LIST
38736: IN
38737: NOT
38738: OR
38739: IFFALSE 38743
// exit ;
38741: GO 38826
// tmp := [ ] ;
38743: LD_ADDR_VAR 0 5
38747: PUSH
38748: EMPTY
38749: ST_TO_ADDR
// for i in units do
38750: LD_ADDR_VAR 0 4
38754: PUSH
38755: LD_VAR 0 1
38759: PUSH
38760: FOR_IN
38761: IFFALSE 38795
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
38763: LD_ADDR_VAR 0 5
38767: PUSH
38768: LD_VAR 0 5
38772: PPUSH
38773: LD_VAR 0 4
38777: PPUSH
38778: LD_VAR 0 2
38782: PPUSH
38783: CALL_OW 259
38787: PPUSH
38788: CALL 40199 0 2
38792: ST_TO_ADDR
38793: GO 38760
38795: POP
38796: POP
// if not tmp then
38797: LD_VAR 0 5
38801: NOT
38802: IFFALSE 38806
// exit ;
38804: GO 38826
// result := SortListByListDesc ( units , tmp ) ;
38806: LD_ADDR_VAR 0 3
38810: PUSH
38811: LD_VAR 0 1
38815: PPUSH
38816: LD_VAR 0 5
38820: PPUSH
38821: CALL_OW 77
38825: ST_TO_ADDR
// end ;
38826: LD_VAR 0 3
38830: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
38831: LD_INT 0
38833: PPUSH
38834: PPUSH
38835: PPUSH
// result := false ;
38836: LD_ADDR_VAR 0 3
38840: PUSH
38841: LD_INT 0
38843: ST_TO_ADDR
// if not building then
38844: LD_VAR 0 2
38848: NOT
38849: IFFALSE 38853
// exit ;
38851: GO 38991
// x := GetX ( building ) ;
38853: LD_ADDR_VAR 0 4
38857: PUSH
38858: LD_VAR 0 2
38862: PPUSH
38863: CALL_OW 250
38867: ST_TO_ADDR
// y := GetY ( building ) ;
38868: LD_ADDR_VAR 0 5
38872: PUSH
38873: LD_VAR 0 2
38877: PPUSH
38878: CALL_OW 251
38882: ST_TO_ADDR
// if not x or not y then
38883: LD_VAR 0 4
38887: NOT
38888: PUSH
38889: LD_VAR 0 5
38893: NOT
38894: OR
38895: IFFALSE 38899
// exit ;
38897: GO 38991
// if GetTaskList ( unit ) then
38899: LD_VAR 0 1
38903: PPUSH
38904: CALL_OW 437
38908: IFFALSE 38991
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
38910: LD_STRING e
38912: PUSH
38913: LD_VAR 0 1
38917: PPUSH
38918: CALL_OW 437
38922: PUSH
38923: LD_INT 1
38925: ARRAY
38926: PUSH
38927: LD_INT 1
38929: ARRAY
38930: EQUAL
38931: PUSH
38932: LD_VAR 0 4
38936: PUSH
38937: LD_VAR 0 1
38941: PPUSH
38942: CALL_OW 437
38946: PUSH
38947: LD_INT 1
38949: ARRAY
38950: PUSH
38951: LD_INT 2
38953: ARRAY
38954: EQUAL
38955: AND
38956: PUSH
38957: LD_VAR 0 5
38961: PUSH
38962: LD_VAR 0 1
38966: PPUSH
38967: CALL_OW 437
38971: PUSH
38972: LD_INT 1
38974: ARRAY
38975: PUSH
38976: LD_INT 3
38978: ARRAY
38979: EQUAL
38980: AND
38981: IFFALSE 38991
// result := true end ;
38983: LD_ADDR_VAR 0 3
38987: PUSH
38988: LD_INT 1
38990: ST_TO_ADDR
// end ;
38991: LD_VAR 0 3
38995: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
38996: LD_INT 0
38998: PPUSH
// result := false ;
38999: LD_ADDR_VAR 0 4
39003: PUSH
39004: LD_INT 0
39006: ST_TO_ADDR
// if GetTaskList ( unit ) then
39007: LD_VAR 0 1
39011: PPUSH
39012: CALL_OW 437
39016: IFFALSE 39099
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39018: LD_STRING M
39020: PUSH
39021: LD_VAR 0 1
39025: PPUSH
39026: CALL_OW 437
39030: PUSH
39031: LD_INT 1
39033: ARRAY
39034: PUSH
39035: LD_INT 1
39037: ARRAY
39038: EQUAL
39039: PUSH
39040: LD_VAR 0 2
39044: PUSH
39045: LD_VAR 0 1
39049: PPUSH
39050: CALL_OW 437
39054: PUSH
39055: LD_INT 1
39057: ARRAY
39058: PUSH
39059: LD_INT 2
39061: ARRAY
39062: EQUAL
39063: AND
39064: PUSH
39065: LD_VAR 0 3
39069: PUSH
39070: LD_VAR 0 1
39074: PPUSH
39075: CALL_OW 437
39079: PUSH
39080: LD_INT 1
39082: ARRAY
39083: PUSH
39084: LD_INT 3
39086: ARRAY
39087: EQUAL
39088: AND
39089: IFFALSE 39099
// result := true ;
39091: LD_ADDR_VAR 0 4
39095: PUSH
39096: LD_INT 1
39098: ST_TO_ADDR
// end ; end ;
39099: LD_VAR 0 4
39103: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
39104: LD_INT 0
39106: PPUSH
39107: PPUSH
39108: PPUSH
39109: PPUSH
// if not unit or not area then
39110: LD_VAR 0 1
39114: NOT
39115: PUSH
39116: LD_VAR 0 2
39120: NOT
39121: OR
39122: IFFALSE 39126
// exit ;
39124: GO 39302
// tmp := AreaToList ( area , i ) ;
39126: LD_ADDR_VAR 0 6
39130: PUSH
39131: LD_VAR 0 2
39135: PPUSH
39136: LD_VAR 0 5
39140: PPUSH
39141: CALL_OW 517
39145: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
39146: LD_ADDR_VAR 0 5
39150: PUSH
39151: DOUBLE
39152: LD_INT 1
39154: DEC
39155: ST_TO_ADDR
39156: LD_VAR 0 6
39160: PUSH
39161: LD_INT 1
39163: ARRAY
39164: PUSH
39165: FOR_TO
39166: IFFALSE 39300
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
39168: LD_ADDR_VAR 0 7
39172: PUSH
39173: LD_VAR 0 6
39177: PUSH
39178: LD_INT 1
39180: ARRAY
39181: PUSH
39182: LD_VAR 0 5
39186: ARRAY
39187: PUSH
39188: LD_VAR 0 6
39192: PUSH
39193: LD_INT 2
39195: ARRAY
39196: PUSH
39197: LD_VAR 0 5
39201: ARRAY
39202: PUSH
39203: EMPTY
39204: LIST
39205: LIST
39206: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
39207: LD_INT 92
39209: PUSH
39210: LD_VAR 0 7
39214: PUSH
39215: LD_INT 1
39217: ARRAY
39218: PUSH
39219: LD_VAR 0 7
39223: PUSH
39224: LD_INT 2
39226: ARRAY
39227: PUSH
39228: LD_INT 2
39230: PUSH
39231: EMPTY
39232: LIST
39233: LIST
39234: LIST
39235: LIST
39236: PPUSH
39237: CALL_OW 69
39241: PUSH
39242: LD_INT 0
39244: EQUAL
39245: IFFALSE 39298
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
39247: LD_VAR 0 1
39251: PPUSH
39252: LD_VAR 0 7
39256: PUSH
39257: LD_INT 1
39259: ARRAY
39260: PPUSH
39261: LD_VAR 0 7
39265: PUSH
39266: LD_INT 2
39268: ARRAY
39269: PPUSH
39270: LD_VAR 0 3
39274: PPUSH
39275: CALL_OW 48
// result := IsPlaced ( unit ) ;
39279: LD_ADDR_VAR 0 4
39283: PUSH
39284: LD_VAR 0 1
39288: PPUSH
39289: CALL_OW 305
39293: ST_TO_ADDR
// exit ;
39294: POP
39295: POP
39296: GO 39302
// end ; end ;
39298: GO 39165
39300: POP
39301: POP
// end ;
39302: LD_VAR 0 4
39306: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
39307: LD_INT 0
39309: PPUSH
39310: PPUSH
39311: PPUSH
// if not side or side > 8 then
39312: LD_VAR 0 1
39316: NOT
39317: PUSH
39318: LD_VAR 0 1
39322: PUSH
39323: LD_INT 8
39325: GREATER
39326: OR
39327: IFFALSE 39331
// exit ;
39329: GO 39518
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
39331: LD_ADDR_VAR 0 4
39335: PUSH
39336: LD_INT 22
39338: PUSH
39339: LD_VAR 0 1
39343: PUSH
39344: EMPTY
39345: LIST
39346: LIST
39347: PUSH
39348: LD_INT 21
39350: PUSH
39351: LD_INT 3
39353: PUSH
39354: EMPTY
39355: LIST
39356: LIST
39357: PUSH
39358: EMPTY
39359: LIST
39360: LIST
39361: PPUSH
39362: CALL_OW 69
39366: ST_TO_ADDR
// if not tmp then
39367: LD_VAR 0 4
39371: NOT
39372: IFFALSE 39376
// exit ;
39374: GO 39518
// enable_addtolog := true ;
39376: LD_ADDR_OWVAR 81
39380: PUSH
39381: LD_INT 1
39383: ST_TO_ADDR
// AddToLog ( [ ) ;
39384: LD_STRING [
39386: PPUSH
39387: CALL_OW 561
// for i in tmp do
39391: LD_ADDR_VAR 0 3
39395: PUSH
39396: LD_VAR 0 4
39400: PUSH
39401: FOR_IN
39402: IFFALSE 39509
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
39404: LD_STRING [
39406: PUSH
39407: LD_VAR 0 3
39411: PPUSH
39412: CALL_OW 266
39416: STR
39417: PUSH
39418: LD_STRING , 
39420: STR
39421: PUSH
39422: LD_VAR 0 3
39426: PPUSH
39427: CALL_OW 250
39431: STR
39432: PUSH
39433: LD_STRING , 
39435: STR
39436: PUSH
39437: LD_VAR 0 3
39441: PPUSH
39442: CALL_OW 251
39446: STR
39447: PUSH
39448: LD_STRING , 
39450: STR
39451: PUSH
39452: LD_VAR 0 3
39456: PPUSH
39457: CALL_OW 254
39461: STR
39462: PUSH
39463: LD_STRING , 
39465: STR
39466: PUSH
39467: LD_VAR 0 3
39471: PPUSH
39472: LD_INT 1
39474: PPUSH
39475: CALL_OW 268
39479: STR
39480: PUSH
39481: LD_STRING , 
39483: STR
39484: PUSH
39485: LD_VAR 0 3
39489: PPUSH
39490: LD_INT 2
39492: PPUSH
39493: CALL_OW 268
39497: STR
39498: PUSH
39499: LD_STRING ],
39501: STR
39502: PPUSH
39503: CALL_OW 561
// end ;
39507: GO 39401
39509: POP
39510: POP
// AddToLog ( ]; ) ;
39511: LD_STRING ];
39513: PPUSH
39514: CALL_OW 561
// end ;
39518: LD_VAR 0 2
39522: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
39523: LD_INT 0
39525: PPUSH
39526: PPUSH
39527: PPUSH
39528: PPUSH
39529: PPUSH
// if not area or not rate or not max then
39530: LD_VAR 0 1
39534: NOT
39535: PUSH
39536: LD_VAR 0 2
39540: NOT
39541: OR
39542: PUSH
39543: LD_VAR 0 4
39547: NOT
39548: OR
39549: IFFALSE 39553
// exit ;
39551: GO 39742
// while 1 do
39553: LD_INT 1
39555: IFFALSE 39742
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
39557: LD_ADDR_VAR 0 9
39561: PUSH
39562: LD_VAR 0 1
39566: PPUSH
39567: LD_INT 1
39569: PPUSH
39570: CALL_OW 287
39574: PUSH
39575: LD_INT 10
39577: MUL
39578: ST_TO_ADDR
// r := rate / 10 ;
39579: LD_ADDR_VAR 0 7
39583: PUSH
39584: LD_VAR 0 2
39588: PUSH
39589: LD_INT 10
39591: DIVREAL
39592: ST_TO_ADDR
// time := 1 1$00 ;
39593: LD_ADDR_VAR 0 8
39597: PUSH
39598: LD_INT 2100
39600: ST_TO_ADDR
// if amount < min then
39601: LD_VAR 0 9
39605: PUSH
39606: LD_VAR 0 3
39610: LESS
39611: IFFALSE 39629
// r := r * 2 else
39613: LD_ADDR_VAR 0 7
39617: PUSH
39618: LD_VAR 0 7
39622: PUSH
39623: LD_INT 2
39625: MUL
39626: ST_TO_ADDR
39627: GO 39655
// if amount > max then
39629: LD_VAR 0 9
39633: PUSH
39634: LD_VAR 0 4
39638: GREATER
39639: IFFALSE 39655
// r := r / 2 ;
39641: LD_ADDR_VAR 0 7
39645: PUSH
39646: LD_VAR 0 7
39650: PUSH
39651: LD_INT 2
39653: DIVREAL
39654: ST_TO_ADDR
// time := time / r ;
39655: LD_ADDR_VAR 0 8
39659: PUSH
39660: LD_VAR 0 8
39664: PUSH
39665: LD_VAR 0 7
39669: DIVREAL
39670: ST_TO_ADDR
// if time < 0 then
39671: LD_VAR 0 8
39675: PUSH
39676: LD_INT 0
39678: LESS
39679: IFFALSE 39696
// time := time * - 1 ;
39681: LD_ADDR_VAR 0 8
39685: PUSH
39686: LD_VAR 0 8
39690: PUSH
39691: LD_INT 1
39693: NEG
39694: MUL
39695: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
39696: LD_VAR 0 8
39700: PUSH
39701: LD_INT 35
39703: PPUSH
39704: LD_INT 875
39706: PPUSH
39707: CALL_OW 12
39711: PLUS
39712: PPUSH
39713: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
39717: LD_INT 1
39719: PPUSH
39720: LD_INT 5
39722: PPUSH
39723: CALL_OW 12
39727: PPUSH
39728: LD_VAR 0 1
39732: PPUSH
39733: LD_INT 1
39735: PPUSH
39736: CALL_OW 55
// end ;
39740: GO 39553
// end ;
39742: LD_VAR 0 5
39746: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
39747: LD_INT 0
39749: PPUSH
39750: PPUSH
39751: PPUSH
39752: PPUSH
39753: PPUSH
39754: PPUSH
39755: PPUSH
39756: PPUSH
// if not turrets or not factories then
39757: LD_VAR 0 1
39761: NOT
39762: PUSH
39763: LD_VAR 0 2
39767: NOT
39768: OR
39769: IFFALSE 39773
// exit ;
39771: GO 40080
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
39773: LD_ADDR_VAR 0 10
39777: PUSH
39778: LD_INT 5
39780: PUSH
39781: LD_INT 6
39783: PUSH
39784: EMPTY
39785: LIST
39786: LIST
39787: PUSH
39788: LD_INT 2
39790: PUSH
39791: LD_INT 4
39793: PUSH
39794: EMPTY
39795: LIST
39796: LIST
39797: PUSH
39798: LD_INT 3
39800: PUSH
39801: LD_INT 5
39803: PUSH
39804: EMPTY
39805: LIST
39806: LIST
39807: PUSH
39808: EMPTY
39809: LIST
39810: LIST
39811: LIST
39812: PUSH
39813: LD_INT 24
39815: PUSH
39816: LD_INT 25
39818: PUSH
39819: EMPTY
39820: LIST
39821: LIST
39822: PUSH
39823: LD_INT 23
39825: PUSH
39826: LD_INT 27
39828: PUSH
39829: EMPTY
39830: LIST
39831: LIST
39832: PUSH
39833: EMPTY
39834: LIST
39835: LIST
39836: PUSH
39837: LD_INT 42
39839: PUSH
39840: LD_INT 43
39842: PUSH
39843: EMPTY
39844: LIST
39845: LIST
39846: PUSH
39847: LD_INT 44
39849: PUSH
39850: LD_INT 46
39852: PUSH
39853: EMPTY
39854: LIST
39855: LIST
39856: PUSH
39857: LD_INT 45
39859: PUSH
39860: LD_INT 47
39862: PUSH
39863: EMPTY
39864: LIST
39865: LIST
39866: PUSH
39867: EMPTY
39868: LIST
39869: LIST
39870: LIST
39871: PUSH
39872: EMPTY
39873: LIST
39874: LIST
39875: LIST
39876: ST_TO_ADDR
// result := [ ] ;
39877: LD_ADDR_VAR 0 3
39881: PUSH
39882: EMPTY
39883: ST_TO_ADDR
// for i in turrets do
39884: LD_ADDR_VAR 0 4
39888: PUSH
39889: LD_VAR 0 1
39893: PUSH
39894: FOR_IN
39895: IFFALSE 40078
// begin nat := GetNation ( i ) ;
39897: LD_ADDR_VAR 0 7
39901: PUSH
39902: LD_VAR 0 4
39906: PPUSH
39907: CALL_OW 248
39911: ST_TO_ADDR
// weapon := 0 ;
39912: LD_ADDR_VAR 0 8
39916: PUSH
39917: LD_INT 0
39919: ST_TO_ADDR
// if not nat then
39920: LD_VAR 0 7
39924: NOT
39925: IFFALSE 39929
// continue ;
39927: GO 39894
// for j in list [ nat ] do
39929: LD_ADDR_VAR 0 5
39933: PUSH
39934: LD_VAR 0 10
39938: PUSH
39939: LD_VAR 0 7
39943: ARRAY
39944: PUSH
39945: FOR_IN
39946: IFFALSE 39987
// if GetBWeapon ( i ) = j [ 1 ] then
39948: LD_VAR 0 4
39952: PPUSH
39953: CALL_OW 269
39957: PUSH
39958: LD_VAR 0 5
39962: PUSH
39963: LD_INT 1
39965: ARRAY
39966: EQUAL
39967: IFFALSE 39985
// begin weapon := j [ 2 ] ;
39969: LD_ADDR_VAR 0 8
39973: PUSH
39974: LD_VAR 0 5
39978: PUSH
39979: LD_INT 2
39981: ARRAY
39982: ST_TO_ADDR
// break ;
39983: GO 39987
// end ;
39985: GO 39945
39987: POP
39988: POP
// if not weapon then
39989: LD_VAR 0 8
39993: NOT
39994: IFFALSE 39998
// continue ;
39996: GO 39894
// for k in factories do
39998: LD_ADDR_VAR 0 6
40002: PUSH
40003: LD_VAR 0 2
40007: PUSH
40008: FOR_IN
40009: IFFALSE 40074
// begin weapons := AvailableWeaponList ( k ) ;
40011: LD_ADDR_VAR 0 9
40015: PUSH
40016: LD_VAR 0 6
40020: PPUSH
40021: CALL_OW 478
40025: ST_TO_ADDR
// if not weapons then
40026: LD_VAR 0 9
40030: NOT
40031: IFFALSE 40035
// continue ;
40033: GO 40008
// if weapon in weapons then
40035: LD_VAR 0 8
40039: PUSH
40040: LD_VAR 0 9
40044: IN
40045: IFFALSE 40072
// begin result := [ i , weapon ] ;
40047: LD_ADDR_VAR 0 3
40051: PUSH
40052: LD_VAR 0 4
40056: PUSH
40057: LD_VAR 0 8
40061: PUSH
40062: EMPTY
40063: LIST
40064: LIST
40065: ST_TO_ADDR
// exit ;
40066: POP
40067: POP
40068: POP
40069: POP
40070: GO 40080
// end ; end ;
40072: GO 40008
40074: POP
40075: POP
// end ;
40076: GO 39894
40078: POP
40079: POP
// end ;
40080: LD_VAR 0 3
40084: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
40085: LD_INT 0
40087: PPUSH
// if not side or side > 8 then
40088: LD_VAR 0 3
40092: NOT
40093: PUSH
40094: LD_VAR 0 3
40098: PUSH
40099: LD_INT 8
40101: GREATER
40102: OR
40103: IFFALSE 40107
// exit ;
40105: GO 40166
// if not range then
40107: LD_VAR 0 4
40111: NOT
40112: IFFALSE 40123
// range := - 12 ;
40114: LD_ADDR_VAR 0 4
40118: PUSH
40119: LD_INT 12
40121: NEG
40122: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
40123: LD_VAR 0 1
40127: PPUSH
40128: LD_VAR 0 2
40132: PPUSH
40133: LD_VAR 0 3
40137: PPUSH
40138: LD_VAR 0 4
40142: PPUSH
40143: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
40147: LD_VAR 0 1
40151: PPUSH
40152: LD_VAR 0 2
40156: PPUSH
40157: LD_VAR 0 3
40161: PPUSH
40162: CALL_OW 331
// end ;
40166: LD_VAR 0 5
40170: RET
// export function Video ( mode ) ; begin
40171: LD_INT 0
40173: PPUSH
// ingame_video = mode ;
40174: LD_ADDR_OWVAR 52
40178: PUSH
40179: LD_VAR 0 1
40183: ST_TO_ADDR
// interface_hidden = mode ;
40184: LD_ADDR_OWVAR 54
40188: PUSH
40189: LD_VAR 0 1
40193: ST_TO_ADDR
// end ;
40194: LD_VAR 0 2
40198: RET
// export function Join ( array , element ) ; begin
40199: LD_INT 0
40201: PPUSH
// result := Replace ( array , array + 1 , element ) ;
40202: LD_ADDR_VAR 0 3
40206: PUSH
40207: LD_VAR 0 1
40211: PPUSH
40212: LD_VAR 0 1
40216: PUSH
40217: LD_INT 1
40219: PLUS
40220: PPUSH
40221: LD_VAR 0 2
40225: PPUSH
40226: CALL_OW 1
40230: ST_TO_ADDR
// end ;
40231: LD_VAR 0 3
40235: RET
// export function JoinUnion ( array , element ) ; begin
40236: LD_INT 0
40238: PPUSH
// result := array union element ;
40239: LD_ADDR_VAR 0 3
40243: PUSH
40244: LD_VAR 0 1
40248: PUSH
40249: LD_VAR 0 2
40253: UNION
40254: ST_TO_ADDR
// end ;
40255: LD_VAR 0 3
40259: RET
// export function GetBehemoths ( side ) ; begin
40260: LD_INT 0
40262: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
40263: LD_ADDR_VAR 0 2
40267: PUSH
40268: LD_INT 22
40270: PUSH
40271: LD_VAR 0 1
40275: PUSH
40276: EMPTY
40277: LIST
40278: LIST
40279: PUSH
40280: LD_INT 31
40282: PUSH
40283: LD_INT 25
40285: PUSH
40286: EMPTY
40287: LIST
40288: LIST
40289: PUSH
40290: EMPTY
40291: LIST
40292: LIST
40293: PPUSH
40294: CALL_OW 69
40298: ST_TO_ADDR
// end ;
40299: LD_VAR 0 2
40303: RET
// export function Shuffle ( array ) ; var i , index ; begin
40304: LD_INT 0
40306: PPUSH
40307: PPUSH
40308: PPUSH
// result := [ ] ;
40309: LD_ADDR_VAR 0 2
40313: PUSH
40314: EMPTY
40315: ST_TO_ADDR
// if not array then
40316: LD_VAR 0 1
40320: NOT
40321: IFFALSE 40325
// exit ;
40323: GO 40424
// Randomize ;
40325: CALL_OW 10
// for i = array downto 1 do
40329: LD_ADDR_VAR 0 3
40333: PUSH
40334: DOUBLE
40335: LD_VAR 0 1
40339: INC
40340: ST_TO_ADDR
40341: LD_INT 1
40343: PUSH
40344: FOR_DOWNTO
40345: IFFALSE 40422
// begin index := rand ( 1 , array ) ;
40347: LD_ADDR_VAR 0 4
40351: PUSH
40352: LD_INT 1
40354: PPUSH
40355: LD_VAR 0 1
40359: PPUSH
40360: CALL_OW 12
40364: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
40365: LD_ADDR_VAR 0 2
40369: PUSH
40370: LD_VAR 0 2
40374: PPUSH
40375: LD_VAR 0 2
40379: PUSH
40380: LD_INT 1
40382: PLUS
40383: PPUSH
40384: LD_VAR 0 1
40388: PUSH
40389: LD_VAR 0 4
40393: ARRAY
40394: PPUSH
40395: CALL_OW 2
40399: ST_TO_ADDR
// array := Delete ( array , index ) ;
40400: LD_ADDR_VAR 0 1
40404: PUSH
40405: LD_VAR 0 1
40409: PPUSH
40410: LD_VAR 0 4
40414: PPUSH
40415: CALL_OW 3
40419: ST_TO_ADDR
// end ;
40420: GO 40344
40422: POP
40423: POP
// end ;
40424: LD_VAR 0 2
40428: RET
// export function GetBaseMaterials ( base ) ; begin
40429: LD_INT 0
40431: PPUSH
// result := [ 0 , 0 , 0 ] ;
40432: LD_ADDR_VAR 0 2
40436: PUSH
40437: LD_INT 0
40439: PUSH
40440: LD_INT 0
40442: PUSH
40443: LD_INT 0
40445: PUSH
40446: EMPTY
40447: LIST
40448: LIST
40449: LIST
40450: ST_TO_ADDR
// if not base then
40451: LD_VAR 0 1
40455: NOT
40456: IFFALSE 40460
// exit ;
40458: GO 40509
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
40460: LD_ADDR_VAR 0 2
40464: PUSH
40465: LD_VAR 0 1
40469: PPUSH
40470: LD_INT 1
40472: PPUSH
40473: CALL_OW 275
40477: PUSH
40478: LD_VAR 0 1
40482: PPUSH
40483: LD_INT 2
40485: PPUSH
40486: CALL_OW 275
40490: PUSH
40491: LD_VAR 0 1
40495: PPUSH
40496: LD_INT 3
40498: PPUSH
40499: CALL_OW 275
40503: PUSH
40504: EMPTY
40505: LIST
40506: LIST
40507: LIST
40508: ST_TO_ADDR
// end ;
40509: LD_VAR 0 2
40513: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
40514: LD_INT 0
40516: PPUSH
40517: PPUSH
// result := array ;
40518: LD_ADDR_VAR 0 3
40522: PUSH
40523: LD_VAR 0 1
40527: ST_TO_ADDR
// if size >= result then
40528: LD_VAR 0 2
40532: PUSH
40533: LD_VAR 0 3
40537: GREATEREQUAL
40538: IFFALSE 40542
// exit ;
40540: GO 40592
// if size then
40542: LD_VAR 0 2
40546: IFFALSE 40592
// for i := array downto size do
40548: LD_ADDR_VAR 0 4
40552: PUSH
40553: DOUBLE
40554: LD_VAR 0 1
40558: INC
40559: ST_TO_ADDR
40560: LD_VAR 0 2
40564: PUSH
40565: FOR_DOWNTO
40566: IFFALSE 40590
// result := Delete ( result , result ) ;
40568: LD_ADDR_VAR 0 3
40572: PUSH
40573: LD_VAR 0 3
40577: PPUSH
40578: LD_VAR 0 3
40582: PPUSH
40583: CALL_OW 3
40587: ST_TO_ADDR
40588: GO 40565
40590: POP
40591: POP
// end ;
40592: LD_VAR 0 3
40596: RET
// export function ComExit ( unit ) ; var tmp ; begin
40597: LD_INT 0
40599: PPUSH
40600: PPUSH
// if not IsInUnit ( unit ) then
40601: LD_VAR 0 1
40605: PPUSH
40606: CALL_OW 310
40610: NOT
40611: IFFALSE 40615
// exit ;
40613: GO 40675
// tmp := IsInUnit ( unit ) ;
40615: LD_ADDR_VAR 0 3
40619: PUSH
40620: LD_VAR 0 1
40624: PPUSH
40625: CALL_OW 310
40629: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
40630: LD_VAR 0 3
40634: PPUSH
40635: CALL_OW 247
40639: PUSH
40640: LD_INT 2
40642: EQUAL
40643: IFFALSE 40656
// ComExitVehicle ( unit ) else
40645: LD_VAR 0 1
40649: PPUSH
40650: CALL_OW 121
40654: GO 40665
// ComExitBuilding ( unit ) ;
40656: LD_VAR 0 1
40660: PPUSH
40661: CALL_OW 122
// result := tmp ;
40665: LD_ADDR_VAR 0 2
40669: PUSH
40670: LD_VAR 0 3
40674: ST_TO_ADDR
// end ;
40675: LD_VAR 0 2
40679: RET
// export function ComExitAll ( units ) ; var i ; begin
40680: LD_INT 0
40682: PPUSH
40683: PPUSH
// if not units then
40684: LD_VAR 0 1
40688: NOT
40689: IFFALSE 40693
// exit ;
40691: GO 40719
// for i in units do
40693: LD_ADDR_VAR 0 3
40697: PUSH
40698: LD_VAR 0 1
40702: PUSH
40703: FOR_IN
40704: IFFALSE 40717
// ComExit ( i ) ;
40706: LD_VAR 0 3
40710: PPUSH
40711: CALL 40597 0 1
40715: GO 40703
40717: POP
40718: POP
// end ;
40719: LD_VAR 0 2
40723: RET
// export function ResetHc ; begin
40724: LD_INT 0
40726: PPUSH
// InitHc ;
40727: CALL_OW 19
// hc_importance := 0 ;
40731: LD_ADDR_OWVAR 32
40735: PUSH
40736: LD_INT 0
40738: ST_TO_ADDR
// end ;
40739: LD_VAR 0 1
40743: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
40744: LD_INT 0
40746: PPUSH
40747: PPUSH
40748: PPUSH
// _x := ( x1 + x2 ) div 2 ;
40749: LD_ADDR_VAR 0 6
40753: PUSH
40754: LD_VAR 0 1
40758: PUSH
40759: LD_VAR 0 3
40763: PLUS
40764: PUSH
40765: LD_INT 2
40767: DIV
40768: ST_TO_ADDR
// if _x < 0 then
40769: LD_VAR 0 6
40773: PUSH
40774: LD_INT 0
40776: LESS
40777: IFFALSE 40794
// _x := _x * - 1 ;
40779: LD_ADDR_VAR 0 6
40783: PUSH
40784: LD_VAR 0 6
40788: PUSH
40789: LD_INT 1
40791: NEG
40792: MUL
40793: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
40794: LD_ADDR_VAR 0 7
40798: PUSH
40799: LD_VAR 0 2
40803: PUSH
40804: LD_VAR 0 4
40808: PLUS
40809: PUSH
40810: LD_INT 2
40812: DIV
40813: ST_TO_ADDR
// if _y < 0 then
40814: LD_VAR 0 7
40818: PUSH
40819: LD_INT 0
40821: LESS
40822: IFFALSE 40839
// _y := _y * - 1 ;
40824: LD_ADDR_VAR 0 7
40828: PUSH
40829: LD_VAR 0 7
40833: PUSH
40834: LD_INT 1
40836: NEG
40837: MUL
40838: ST_TO_ADDR
// result := [ _x , _y ] ;
40839: LD_ADDR_VAR 0 5
40843: PUSH
40844: LD_VAR 0 6
40848: PUSH
40849: LD_VAR 0 7
40853: PUSH
40854: EMPTY
40855: LIST
40856: LIST
40857: ST_TO_ADDR
// end ;
40858: LD_VAR 0 5
40862: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
40863: LD_INT 0
40865: PPUSH
40866: PPUSH
40867: PPUSH
40868: PPUSH
// task := GetTaskList ( unit ) ;
40869: LD_ADDR_VAR 0 7
40873: PUSH
40874: LD_VAR 0 1
40878: PPUSH
40879: CALL_OW 437
40883: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
40884: LD_VAR 0 7
40888: NOT
40889: PUSH
40890: LD_VAR 0 1
40894: PPUSH
40895: LD_VAR 0 2
40899: PPUSH
40900: CALL_OW 308
40904: NOT
40905: AND
40906: IFFALSE 40910
// exit ;
40908: GO 41028
// if IsInArea ( unit , area ) then
40910: LD_VAR 0 1
40914: PPUSH
40915: LD_VAR 0 2
40919: PPUSH
40920: CALL_OW 308
40924: IFFALSE 40942
// begin ComMoveToArea ( unit , goAway ) ;
40926: LD_VAR 0 1
40930: PPUSH
40931: LD_VAR 0 3
40935: PPUSH
40936: CALL_OW 113
// exit ;
40940: GO 41028
// end ; if task [ 1 ] [ 1 ] <> M then
40942: LD_VAR 0 7
40946: PUSH
40947: LD_INT 1
40949: ARRAY
40950: PUSH
40951: LD_INT 1
40953: ARRAY
40954: PUSH
40955: LD_STRING M
40957: NONEQUAL
40958: IFFALSE 40962
// exit ;
40960: GO 41028
// x := task [ 1 ] [ 2 ] ;
40962: LD_ADDR_VAR 0 5
40966: PUSH
40967: LD_VAR 0 7
40971: PUSH
40972: LD_INT 1
40974: ARRAY
40975: PUSH
40976: LD_INT 2
40978: ARRAY
40979: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
40980: LD_ADDR_VAR 0 6
40984: PUSH
40985: LD_VAR 0 7
40989: PUSH
40990: LD_INT 1
40992: ARRAY
40993: PUSH
40994: LD_INT 3
40996: ARRAY
40997: ST_TO_ADDR
// if InArea ( x , y , area ) then
40998: LD_VAR 0 5
41002: PPUSH
41003: LD_VAR 0 6
41007: PPUSH
41008: LD_VAR 0 2
41012: PPUSH
41013: CALL_OW 309
41017: IFFALSE 41028
// ComStop ( unit ) ;
41019: LD_VAR 0 1
41023: PPUSH
41024: CALL_OW 141
// end ;
41028: LD_VAR 0 4
41032: RET
// export function Abs ( value ) ; begin
41033: LD_INT 0
41035: PPUSH
// result := value ;
41036: LD_ADDR_VAR 0 2
41040: PUSH
41041: LD_VAR 0 1
41045: ST_TO_ADDR
// if value < 0 then
41046: LD_VAR 0 1
41050: PUSH
41051: LD_INT 0
41053: LESS
41054: IFFALSE 41071
// result := value * - 1 ;
41056: LD_ADDR_VAR 0 2
41060: PUSH
41061: LD_VAR 0 1
41065: PUSH
41066: LD_INT 1
41068: NEG
41069: MUL
41070: ST_TO_ADDR
// end ;
41071: LD_VAR 0 2
41075: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
41076: LD_INT 0
41078: PPUSH
41079: PPUSH
41080: PPUSH
41081: PPUSH
41082: PPUSH
41083: PPUSH
41084: PPUSH
41085: PPUSH
// if not unit or not building then
41086: LD_VAR 0 1
41090: NOT
41091: PUSH
41092: LD_VAR 0 2
41096: NOT
41097: OR
41098: IFFALSE 41102
// exit ;
41100: GO 41328
// x := GetX ( building ) ;
41102: LD_ADDR_VAR 0 4
41106: PUSH
41107: LD_VAR 0 2
41111: PPUSH
41112: CALL_OW 250
41116: ST_TO_ADDR
// y := GetY ( building ) ;
41117: LD_ADDR_VAR 0 6
41121: PUSH
41122: LD_VAR 0 2
41126: PPUSH
41127: CALL_OW 251
41131: ST_TO_ADDR
// d := GetDir ( building ) ;
41132: LD_ADDR_VAR 0 8
41136: PUSH
41137: LD_VAR 0 2
41141: PPUSH
41142: CALL_OW 254
41146: ST_TO_ADDR
// r := 4 ;
41147: LD_ADDR_VAR 0 9
41151: PUSH
41152: LD_INT 4
41154: ST_TO_ADDR
// for i := 1 to 5 do
41155: LD_ADDR_VAR 0 10
41159: PUSH
41160: DOUBLE
41161: LD_INT 1
41163: DEC
41164: ST_TO_ADDR
41165: LD_INT 5
41167: PUSH
41168: FOR_TO
41169: IFFALSE 41326
// begin _x := ShiftX ( x , d , r + i ) ;
41171: LD_ADDR_VAR 0 5
41175: PUSH
41176: LD_VAR 0 4
41180: PPUSH
41181: LD_VAR 0 8
41185: PPUSH
41186: LD_VAR 0 9
41190: PUSH
41191: LD_VAR 0 10
41195: PLUS
41196: PPUSH
41197: CALL_OW 272
41201: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
41202: LD_ADDR_VAR 0 7
41206: PUSH
41207: LD_VAR 0 6
41211: PPUSH
41212: LD_VAR 0 8
41216: PPUSH
41217: LD_VAR 0 9
41221: PUSH
41222: LD_VAR 0 10
41226: PLUS
41227: PPUSH
41228: CALL_OW 273
41232: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
41233: LD_VAR 0 5
41237: PPUSH
41238: LD_VAR 0 7
41242: PPUSH
41243: CALL_OW 488
41247: PUSH
41248: LD_VAR 0 5
41252: PPUSH
41253: LD_VAR 0 7
41257: PPUSH
41258: CALL_OW 428
41262: PPUSH
41263: CALL_OW 247
41267: PUSH
41268: LD_INT 3
41270: PUSH
41271: LD_INT 2
41273: PUSH
41274: EMPTY
41275: LIST
41276: LIST
41277: IN
41278: NOT
41279: AND
41280: IFFALSE 41324
// begin ComMoveXY ( unit , _x , _y ) ;
41282: LD_VAR 0 1
41286: PPUSH
41287: LD_VAR 0 5
41291: PPUSH
41292: LD_VAR 0 7
41296: PPUSH
41297: CALL_OW 111
// result := [ _x , _y ] ;
41301: LD_ADDR_VAR 0 3
41305: PUSH
41306: LD_VAR 0 5
41310: PUSH
41311: LD_VAR 0 7
41315: PUSH
41316: EMPTY
41317: LIST
41318: LIST
41319: ST_TO_ADDR
// exit ;
41320: POP
41321: POP
41322: GO 41328
// end ; end ;
41324: GO 41168
41326: POP
41327: POP
// end ;
41328: LD_VAR 0 3
41332: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
41333: LD_INT 0
41335: PPUSH
41336: PPUSH
41337: PPUSH
// result := 0 ;
41338: LD_ADDR_VAR 0 3
41342: PUSH
41343: LD_INT 0
41345: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
41346: LD_VAR 0 1
41350: PUSH
41351: LD_INT 0
41353: LESS
41354: PUSH
41355: LD_VAR 0 1
41359: PUSH
41360: LD_INT 8
41362: GREATER
41363: OR
41364: PUSH
41365: LD_VAR 0 2
41369: PUSH
41370: LD_INT 0
41372: LESS
41373: OR
41374: PUSH
41375: LD_VAR 0 2
41379: PUSH
41380: LD_INT 8
41382: GREATER
41383: OR
41384: IFFALSE 41388
// exit ;
41386: GO 41463
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
41388: LD_ADDR_VAR 0 4
41392: PUSH
41393: LD_INT 22
41395: PUSH
41396: LD_VAR 0 2
41400: PUSH
41401: EMPTY
41402: LIST
41403: LIST
41404: PPUSH
41405: CALL_OW 69
41409: PUSH
41410: FOR_IN
41411: IFFALSE 41461
// begin un := UnitShoot ( i ) ;
41413: LD_ADDR_VAR 0 5
41417: PUSH
41418: LD_VAR 0 4
41422: PPUSH
41423: CALL_OW 504
41427: ST_TO_ADDR
// if GetSide ( un ) = side1 then
41428: LD_VAR 0 5
41432: PPUSH
41433: CALL_OW 255
41437: PUSH
41438: LD_VAR 0 1
41442: EQUAL
41443: IFFALSE 41459
// begin result := un ;
41445: LD_ADDR_VAR 0 3
41449: PUSH
41450: LD_VAR 0 5
41454: ST_TO_ADDR
// exit ;
41455: POP
41456: POP
41457: GO 41463
// end ; end ;
41459: GO 41410
41461: POP
41462: POP
// end ;
41463: LD_VAR 0 3
41467: RET
// export function GetCargoBay ( units ) ; begin
41468: LD_INT 0
41470: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
41471: LD_ADDR_VAR 0 2
41475: PUSH
41476: LD_VAR 0 1
41480: PPUSH
41481: LD_INT 2
41483: PUSH
41484: LD_INT 34
41486: PUSH
41487: LD_INT 12
41489: PUSH
41490: EMPTY
41491: LIST
41492: LIST
41493: PUSH
41494: LD_INT 34
41496: PUSH
41497: LD_INT 51
41499: PUSH
41500: EMPTY
41501: LIST
41502: LIST
41503: PUSH
41504: LD_INT 34
41506: PUSH
41507: LD_INT 32
41509: PUSH
41510: EMPTY
41511: LIST
41512: LIST
41513: PUSH
41514: LD_INT 34
41516: PUSH
41517: LD_INT 89
41519: PUSH
41520: EMPTY
41521: LIST
41522: LIST
41523: PUSH
41524: EMPTY
41525: LIST
41526: LIST
41527: LIST
41528: LIST
41529: LIST
41530: PPUSH
41531: CALL_OW 72
41535: ST_TO_ADDR
// end ;
41536: LD_VAR 0 2
41540: RET
// export function Negate ( value ) ; begin
41541: LD_INT 0
41543: PPUSH
// result := not value ;
41544: LD_ADDR_VAR 0 2
41548: PUSH
41549: LD_VAR 0 1
41553: NOT
41554: ST_TO_ADDR
// end ;
41555: LD_VAR 0 2
41559: RET
// export function Inc ( value ) ; begin
41560: LD_INT 0
41562: PPUSH
// result := value + 1 ;
41563: LD_ADDR_VAR 0 2
41567: PUSH
41568: LD_VAR 0 1
41572: PUSH
41573: LD_INT 1
41575: PLUS
41576: ST_TO_ADDR
// end ;
41577: LD_VAR 0 2
41581: RET
// export function Dec ( value ) ; begin
41582: LD_INT 0
41584: PPUSH
// result := value - 1 ;
41585: LD_ADDR_VAR 0 2
41589: PUSH
41590: LD_VAR 0 1
41594: PUSH
41595: LD_INT 1
41597: MINUS
41598: ST_TO_ADDR
// end ;
41599: LD_VAR 0 2
41603: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
41604: LD_INT 0
41606: PPUSH
41607: PPUSH
41608: PPUSH
41609: PPUSH
41610: PPUSH
41611: PPUSH
41612: PPUSH
41613: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
41614: LD_VAR 0 1
41618: PPUSH
41619: LD_VAR 0 2
41623: PPUSH
41624: CALL_OW 488
41628: NOT
41629: PUSH
41630: LD_VAR 0 3
41634: PPUSH
41635: LD_VAR 0 4
41639: PPUSH
41640: CALL_OW 488
41644: NOT
41645: OR
41646: IFFALSE 41659
// begin result := - 1 ;
41648: LD_ADDR_VAR 0 5
41652: PUSH
41653: LD_INT 1
41655: NEG
41656: ST_TO_ADDR
// exit ;
41657: GO 41894
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
41659: LD_ADDR_VAR 0 12
41663: PUSH
41664: LD_VAR 0 1
41668: PPUSH
41669: LD_VAR 0 2
41673: PPUSH
41674: LD_VAR 0 3
41678: PPUSH
41679: LD_VAR 0 4
41683: PPUSH
41684: CALL 40744 0 4
41688: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
41689: LD_ADDR_VAR 0 11
41693: PUSH
41694: LD_VAR 0 1
41698: PPUSH
41699: LD_VAR 0 2
41703: PPUSH
41704: LD_VAR 0 12
41708: PUSH
41709: LD_INT 1
41711: ARRAY
41712: PPUSH
41713: LD_VAR 0 12
41717: PUSH
41718: LD_INT 2
41720: ARRAY
41721: PPUSH
41722: CALL_OW 298
41726: ST_TO_ADDR
// distance := 9999 ;
41727: LD_ADDR_VAR 0 10
41731: PUSH
41732: LD_INT 9999
41734: ST_TO_ADDR
// for i := 0 to 5 do
41735: LD_ADDR_VAR 0 6
41739: PUSH
41740: DOUBLE
41741: LD_INT 0
41743: DEC
41744: ST_TO_ADDR
41745: LD_INT 5
41747: PUSH
41748: FOR_TO
41749: IFFALSE 41892
// begin _x := ShiftX ( x1 , i , centerDist ) ;
41751: LD_ADDR_VAR 0 7
41755: PUSH
41756: LD_VAR 0 1
41760: PPUSH
41761: LD_VAR 0 6
41765: PPUSH
41766: LD_VAR 0 11
41770: PPUSH
41771: CALL_OW 272
41775: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
41776: LD_ADDR_VAR 0 8
41780: PUSH
41781: LD_VAR 0 2
41785: PPUSH
41786: LD_VAR 0 6
41790: PPUSH
41791: LD_VAR 0 11
41795: PPUSH
41796: CALL_OW 273
41800: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41801: LD_VAR 0 7
41805: PPUSH
41806: LD_VAR 0 8
41810: PPUSH
41811: CALL_OW 488
41815: NOT
41816: IFFALSE 41820
// continue ;
41818: GO 41748
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
41820: LD_ADDR_VAR 0 9
41824: PUSH
41825: LD_VAR 0 12
41829: PUSH
41830: LD_INT 1
41832: ARRAY
41833: PPUSH
41834: LD_VAR 0 12
41838: PUSH
41839: LD_INT 2
41841: ARRAY
41842: PPUSH
41843: LD_VAR 0 7
41847: PPUSH
41848: LD_VAR 0 8
41852: PPUSH
41853: CALL_OW 298
41857: ST_TO_ADDR
// if tmp < distance then
41858: LD_VAR 0 9
41862: PUSH
41863: LD_VAR 0 10
41867: LESS
41868: IFFALSE 41890
// begin result := i ;
41870: LD_ADDR_VAR 0 5
41874: PUSH
41875: LD_VAR 0 6
41879: ST_TO_ADDR
// distance := tmp ;
41880: LD_ADDR_VAR 0 10
41884: PUSH
41885: LD_VAR 0 9
41889: ST_TO_ADDR
// end ; end ;
41890: GO 41748
41892: POP
41893: POP
// end ;
41894: LD_VAR 0 5
41898: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
41899: LD_INT 0
41901: PPUSH
41902: PPUSH
// if not driver or not IsInUnit ( driver ) then
41903: LD_VAR 0 1
41907: NOT
41908: PUSH
41909: LD_VAR 0 1
41913: PPUSH
41914: CALL_OW 310
41918: NOT
41919: OR
41920: IFFALSE 41924
// exit ;
41922: GO 42014
// vehicle := IsInUnit ( driver ) ;
41924: LD_ADDR_VAR 0 3
41928: PUSH
41929: LD_VAR 0 1
41933: PPUSH
41934: CALL_OW 310
41938: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
41939: LD_VAR 0 1
41943: PPUSH
41944: LD_STRING \
41946: PUSH
41947: LD_INT 0
41949: PUSH
41950: LD_INT 0
41952: PUSH
41953: LD_INT 0
41955: PUSH
41956: LD_INT 0
41958: PUSH
41959: LD_INT 0
41961: PUSH
41962: LD_INT 0
41964: PUSH
41965: EMPTY
41966: LIST
41967: LIST
41968: LIST
41969: LIST
41970: LIST
41971: LIST
41972: LIST
41973: PUSH
41974: LD_STRING E
41976: PUSH
41977: LD_INT 0
41979: PUSH
41980: LD_INT 0
41982: PUSH
41983: LD_VAR 0 3
41987: PUSH
41988: LD_INT 0
41990: PUSH
41991: LD_INT 0
41993: PUSH
41994: LD_INT 0
41996: PUSH
41997: EMPTY
41998: LIST
41999: LIST
42000: LIST
42001: LIST
42002: LIST
42003: LIST
42004: LIST
42005: PUSH
42006: EMPTY
42007: LIST
42008: LIST
42009: PPUSH
42010: CALL_OW 446
// end ;
42014: LD_VAR 0 2
42018: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42019: LD_INT 0
42021: PPUSH
42022: PPUSH
// if not driver or not IsInUnit ( driver ) then
42023: LD_VAR 0 1
42027: NOT
42028: PUSH
42029: LD_VAR 0 1
42033: PPUSH
42034: CALL_OW 310
42038: NOT
42039: OR
42040: IFFALSE 42044
// exit ;
42042: GO 42134
// vehicle := IsInUnit ( driver ) ;
42044: LD_ADDR_VAR 0 3
42048: PUSH
42049: LD_VAR 0 1
42053: PPUSH
42054: CALL_OW 310
42058: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42059: LD_VAR 0 1
42063: PPUSH
42064: LD_STRING \
42066: PUSH
42067: LD_INT 0
42069: PUSH
42070: LD_INT 0
42072: PUSH
42073: LD_INT 0
42075: PUSH
42076: LD_INT 0
42078: PUSH
42079: LD_INT 0
42081: PUSH
42082: LD_INT 0
42084: PUSH
42085: EMPTY
42086: LIST
42087: LIST
42088: LIST
42089: LIST
42090: LIST
42091: LIST
42092: LIST
42093: PUSH
42094: LD_STRING E
42096: PUSH
42097: LD_INT 0
42099: PUSH
42100: LD_INT 0
42102: PUSH
42103: LD_VAR 0 3
42107: PUSH
42108: LD_INT 0
42110: PUSH
42111: LD_INT 0
42113: PUSH
42114: LD_INT 0
42116: PUSH
42117: EMPTY
42118: LIST
42119: LIST
42120: LIST
42121: LIST
42122: LIST
42123: LIST
42124: LIST
42125: PUSH
42126: EMPTY
42127: LIST
42128: LIST
42129: PPUSH
42130: CALL_OW 447
// end ;
42134: LD_VAR 0 2
42138: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
42139: LD_INT 0
42141: PPUSH
42142: PPUSH
42143: PPUSH
// tmp := [ ] ;
42144: LD_ADDR_VAR 0 5
42148: PUSH
42149: EMPTY
42150: ST_TO_ADDR
// for i in units do
42151: LD_ADDR_VAR 0 4
42155: PUSH
42156: LD_VAR 0 1
42160: PUSH
42161: FOR_IN
42162: IFFALSE 42200
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
42164: LD_ADDR_VAR 0 5
42168: PUSH
42169: LD_VAR 0 5
42173: PPUSH
42174: LD_VAR 0 5
42178: PUSH
42179: LD_INT 1
42181: PLUS
42182: PPUSH
42183: LD_VAR 0 4
42187: PPUSH
42188: CALL_OW 256
42192: PPUSH
42193: CALL_OW 2
42197: ST_TO_ADDR
42198: GO 42161
42200: POP
42201: POP
// if not tmp then
42202: LD_VAR 0 5
42206: NOT
42207: IFFALSE 42211
// exit ;
42209: GO 42259
// if asc then
42211: LD_VAR 0 2
42215: IFFALSE 42239
// result := SortListByListAsc ( units , tmp ) else
42217: LD_ADDR_VAR 0 3
42221: PUSH
42222: LD_VAR 0 1
42226: PPUSH
42227: LD_VAR 0 5
42231: PPUSH
42232: CALL_OW 76
42236: ST_TO_ADDR
42237: GO 42259
// result := SortListByListDesc ( units , tmp ) ;
42239: LD_ADDR_VAR 0 3
42243: PUSH
42244: LD_VAR 0 1
42248: PPUSH
42249: LD_VAR 0 5
42253: PPUSH
42254: CALL_OW 77
42258: ST_TO_ADDR
// end ;
42259: LD_VAR 0 3
42263: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
42264: LD_INT 0
42266: PPUSH
42267: PPUSH
// task := GetTaskList ( mech ) ;
42268: LD_ADDR_VAR 0 4
42272: PUSH
42273: LD_VAR 0 1
42277: PPUSH
42278: CALL_OW 437
42282: ST_TO_ADDR
// if not task then
42283: LD_VAR 0 4
42287: NOT
42288: IFFALSE 42292
// exit ;
42290: GO 42334
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
42292: LD_ADDR_VAR 0 3
42296: PUSH
42297: LD_VAR 0 4
42301: PUSH
42302: LD_INT 1
42304: ARRAY
42305: PUSH
42306: LD_INT 1
42308: ARRAY
42309: PUSH
42310: LD_STRING r
42312: EQUAL
42313: PUSH
42314: LD_VAR 0 4
42318: PUSH
42319: LD_INT 1
42321: ARRAY
42322: PUSH
42323: LD_INT 4
42325: ARRAY
42326: PUSH
42327: LD_VAR 0 2
42331: EQUAL
42332: AND
42333: ST_TO_ADDR
// end ;
42334: LD_VAR 0 3
42338: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
42339: LD_INT 0
42341: PPUSH
// SetDir ( unit , d ) ;
42342: LD_VAR 0 1
42346: PPUSH
42347: LD_VAR 0 4
42351: PPUSH
42352: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
42356: LD_VAR 0 1
42360: PPUSH
42361: LD_VAR 0 2
42365: PPUSH
42366: LD_VAR 0 3
42370: PPUSH
42371: LD_VAR 0 5
42375: PPUSH
42376: CALL_OW 48
// end ;
42380: LD_VAR 0 6
42384: RET
// export function ToNaturalNumber ( number ) ; begin
42385: LD_INT 0
42387: PPUSH
// result := number div 1 ;
42388: LD_ADDR_VAR 0 2
42392: PUSH
42393: LD_VAR 0 1
42397: PUSH
42398: LD_INT 1
42400: DIV
42401: ST_TO_ADDR
// if number < 0 then
42402: LD_VAR 0 1
42406: PUSH
42407: LD_INT 0
42409: LESS
42410: IFFALSE 42420
// result := 0 ;
42412: LD_ADDR_VAR 0 2
42416: PUSH
42417: LD_INT 0
42419: ST_TO_ADDR
// end ;
42420: LD_VAR 0 2
42424: RET
// export function SortByClass ( units , class ) ; var un ; begin
42425: LD_INT 0
42427: PPUSH
42428: PPUSH
// if not units or not class then
42429: LD_VAR 0 1
42433: NOT
42434: PUSH
42435: LD_VAR 0 2
42439: NOT
42440: OR
42441: IFFALSE 42445
// exit ;
42443: GO 42540
// result := [ ] ;
42445: LD_ADDR_VAR 0 3
42449: PUSH
42450: EMPTY
42451: ST_TO_ADDR
// for un in units do
42452: LD_ADDR_VAR 0 4
42456: PUSH
42457: LD_VAR 0 1
42461: PUSH
42462: FOR_IN
42463: IFFALSE 42538
// if GetClass ( un ) = class then
42465: LD_VAR 0 4
42469: PPUSH
42470: CALL_OW 257
42474: PUSH
42475: LD_VAR 0 2
42479: EQUAL
42480: IFFALSE 42507
// result := Insert ( result , 1 , un ) else
42482: LD_ADDR_VAR 0 3
42486: PUSH
42487: LD_VAR 0 3
42491: PPUSH
42492: LD_INT 1
42494: PPUSH
42495: LD_VAR 0 4
42499: PPUSH
42500: CALL_OW 2
42504: ST_TO_ADDR
42505: GO 42536
// result := Replace ( result , result + 1 , un ) ;
42507: LD_ADDR_VAR 0 3
42511: PUSH
42512: LD_VAR 0 3
42516: PPUSH
42517: LD_VAR 0 3
42521: PUSH
42522: LD_INT 1
42524: PLUS
42525: PPUSH
42526: LD_VAR 0 4
42530: PPUSH
42531: CALL_OW 1
42535: ST_TO_ADDR
42536: GO 42462
42538: POP
42539: POP
// end ;
42540: LD_VAR 0 3
42544: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
42545: LD_INT 0
42547: PPUSH
42548: PPUSH
42549: PPUSH
42550: PPUSH
42551: PPUSH
42552: PPUSH
42553: PPUSH
// result := [ ] ;
42554: LD_ADDR_VAR 0 4
42558: PUSH
42559: EMPTY
42560: ST_TO_ADDR
// if x - r < 0 then
42561: LD_VAR 0 1
42565: PUSH
42566: LD_VAR 0 3
42570: MINUS
42571: PUSH
42572: LD_INT 0
42574: LESS
42575: IFFALSE 42587
// min_x := 0 else
42577: LD_ADDR_VAR 0 8
42581: PUSH
42582: LD_INT 0
42584: ST_TO_ADDR
42585: GO 42603
// min_x := x - r ;
42587: LD_ADDR_VAR 0 8
42591: PUSH
42592: LD_VAR 0 1
42596: PUSH
42597: LD_VAR 0 3
42601: MINUS
42602: ST_TO_ADDR
// if y - r < 0 then
42603: LD_VAR 0 2
42607: PUSH
42608: LD_VAR 0 3
42612: MINUS
42613: PUSH
42614: LD_INT 0
42616: LESS
42617: IFFALSE 42629
// min_y := 0 else
42619: LD_ADDR_VAR 0 7
42623: PUSH
42624: LD_INT 0
42626: ST_TO_ADDR
42627: GO 42645
// min_y := y - r ;
42629: LD_ADDR_VAR 0 7
42633: PUSH
42634: LD_VAR 0 2
42638: PUSH
42639: LD_VAR 0 3
42643: MINUS
42644: ST_TO_ADDR
// max_x := x + r ;
42645: LD_ADDR_VAR 0 9
42649: PUSH
42650: LD_VAR 0 1
42654: PUSH
42655: LD_VAR 0 3
42659: PLUS
42660: ST_TO_ADDR
// max_y := y + r ;
42661: LD_ADDR_VAR 0 10
42665: PUSH
42666: LD_VAR 0 2
42670: PUSH
42671: LD_VAR 0 3
42675: PLUS
42676: ST_TO_ADDR
// for _x = min_x to max_x do
42677: LD_ADDR_VAR 0 5
42681: PUSH
42682: DOUBLE
42683: LD_VAR 0 8
42687: DEC
42688: ST_TO_ADDR
42689: LD_VAR 0 9
42693: PUSH
42694: FOR_TO
42695: IFFALSE 42796
// for _y = min_y to max_y do
42697: LD_ADDR_VAR 0 6
42701: PUSH
42702: DOUBLE
42703: LD_VAR 0 7
42707: DEC
42708: ST_TO_ADDR
42709: LD_VAR 0 10
42713: PUSH
42714: FOR_TO
42715: IFFALSE 42792
// begin if not ValidHex ( _x , _y ) then
42717: LD_VAR 0 5
42721: PPUSH
42722: LD_VAR 0 6
42726: PPUSH
42727: CALL_OW 488
42731: NOT
42732: IFFALSE 42736
// continue ;
42734: GO 42714
// if GetResourceTypeXY ( _x , _y ) then
42736: LD_VAR 0 5
42740: PPUSH
42741: LD_VAR 0 6
42745: PPUSH
42746: CALL_OW 283
42750: IFFALSE 42790
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
42752: LD_ADDR_VAR 0 4
42756: PUSH
42757: LD_VAR 0 4
42761: PPUSH
42762: LD_VAR 0 4
42766: PUSH
42767: LD_INT 1
42769: PLUS
42770: PPUSH
42771: LD_VAR 0 5
42775: PUSH
42776: LD_VAR 0 6
42780: PUSH
42781: EMPTY
42782: LIST
42783: LIST
42784: PPUSH
42785: CALL_OW 1
42789: ST_TO_ADDR
// end ;
42790: GO 42714
42792: POP
42793: POP
42794: GO 42694
42796: POP
42797: POP
// end ;
42798: LD_VAR 0 4
42802: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
42803: LD_INT 0
42805: PPUSH
42806: PPUSH
42807: PPUSH
42808: PPUSH
42809: PPUSH
42810: PPUSH
42811: PPUSH
42812: PPUSH
// if not units then
42813: LD_VAR 0 1
42817: NOT
42818: IFFALSE 42822
// exit ;
42820: GO 43350
// result := UnitFilter ( units , [ f_ok ] ) ;
42822: LD_ADDR_VAR 0 3
42826: PUSH
42827: LD_VAR 0 1
42831: PPUSH
42832: LD_INT 50
42834: PUSH
42835: EMPTY
42836: LIST
42837: PPUSH
42838: CALL_OW 72
42842: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
42843: LD_ADDR_VAR 0 8
42847: PUSH
42848: LD_VAR 0 1
42852: PUSH
42853: LD_INT 1
42855: ARRAY
42856: PPUSH
42857: CALL_OW 255
42861: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
42862: LD_ADDR_VAR 0 10
42866: PUSH
42867: LD_INT 29
42869: PUSH
42870: LD_INT 91
42872: PUSH
42873: LD_INT 49
42875: PUSH
42876: EMPTY
42877: LIST
42878: LIST
42879: LIST
42880: ST_TO_ADDR
// if not result then
42881: LD_VAR 0 3
42885: NOT
42886: IFFALSE 42890
// exit ;
42888: GO 43350
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
42890: LD_ADDR_VAR 0 5
42894: PUSH
42895: LD_INT 81
42897: PUSH
42898: LD_VAR 0 8
42902: PUSH
42903: EMPTY
42904: LIST
42905: LIST
42906: PPUSH
42907: CALL_OW 69
42911: ST_TO_ADDR
// for i in result do
42912: LD_ADDR_VAR 0 4
42916: PUSH
42917: LD_VAR 0 3
42921: PUSH
42922: FOR_IN
42923: IFFALSE 43348
// begin tag := GetTag ( i ) + 1 ;
42925: LD_ADDR_VAR 0 9
42929: PUSH
42930: LD_VAR 0 4
42934: PPUSH
42935: CALL_OW 110
42939: PUSH
42940: LD_INT 1
42942: PLUS
42943: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
42944: LD_ADDR_VAR 0 7
42948: PUSH
42949: LD_VAR 0 4
42953: PPUSH
42954: CALL_OW 250
42958: PPUSH
42959: LD_VAR 0 4
42963: PPUSH
42964: CALL_OW 251
42968: PPUSH
42969: LD_INT 4
42971: PPUSH
42972: CALL 42545 0 3
42976: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
42977: LD_VAR 0 4
42981: PPUSH
42982: CALL_OW 247
42986: PUSH
42987: LD_INT 2
42989: EQUAL
42990: PUSH
42991: LD_VAR 0 7
42995: PUSH
42996: LD_INT 2
42998: GREATER
42999: AND
43000: PUSH
43001: LD_VAR 0 4
43005: PPUSH
43006: CALL_OW 264
43010: PUSH
43011: LD_VAR 0 10
43015: IN
43016: NOT
43017: AND
43018: IFFALSE 43057
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
43020: LD_VAR 0 4
43024: PPUSH
43025: LD_VAR 0 7
43029: PUSH
43030: LD_INT 1
43032: ARRAY
43033: PUSH
43034: LD_INT 1
43036: ARRAY
43037: PPUSH
43038: LD_VAR 0 7
43042: PUSH
43043: LD_INT 1
43045: ARRAY
43046: PUSH
43047: LD_INT 2
43049: ARRAY
43050: PPUSH
43051: CALL_OW 116
43055: GO 43346
// if path > tag then
43057: LD_VAR 0 2
43061: PUSH
43062: LD_VAR 0 9
43066: GREATER
43067: IFFALSE 43275
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
43069: LD_ADDR_VAR 0 6
43073: PUSH
43074: LD_VAR 0 5
43078: PPUSH
43079: LD_INT 91
43081: PUSH
43082: LD_VAR 0 4
43086: PUSH
43087: LD_INT 8
43089: PUSH
43090: EMPTY
43091: LIST
43092: LIST
43093: LIST
43094: PPUSH
43095: CALL_OW 72
43099: ST_TO_ADDR
// if nearEnemy then
43100: LD_VAR 0 6
43104: IFFALSE 43173
// begin if GetWeapon ( i ) = ru_time_lapser then
43106: LD_VAR 0 4
43110: PPUSH
43111: CALL_OW 264
43115: PUSH
43116: LD_INT 49
43118: EQUAL
43119: IFFALSE 43147
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
43121: LD_VAR 0 4
43125: PPUSH
43126: LD_VAR 0 6
43130: PPUSH
43131: LD_VAR 0 4
43135: PPUSH
43136: CALL_OW 74
43140: PPUSH
43141: CALL_OW 112
43145: GO 43171
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
43147: LD_VAR 0 4
43151: PPUSH
43152: LD_VAR 0 6
43156: PPUSH
43157: LD_VAR 0 4
43161: PPUSH
43162: CALL_OW 74
43166: PPUSH
43167: CALL 44421 0 2
// end else
43171: GO 43273
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
43173: LD_VAR 0 4
43177: PPUSH
43178: LD_VAR 0 2
43182: PUSH
43183: LD_VAR 0 9
43187: ARRAY
43188: PUSH
43189: LD_INT 1
43191: ARRAY
43192: PPUSH
43193: LD_VAR 0 2
43197: PUSH
43198: LD_VAR 0 9
43202: ARRAY
43203: PUSH
43204: LD_INT 2
43206: ARRAY
43207: PPUSH
43208: CALL_OW 297
43212: PUSH
43213: LD_INT 6
43215: GREATER
43216: IFFALSE 43259
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
43218: LD_VAR 0 4
43222: PPUSH
43223: LD_VAR 0 2
43227: PUSH
43228: LD_VAR 0 9
43232: ARRAY
43233: PUSH
43234: LD_INT 1
43236: ARRAY
43237: PPUSH
43238: LD_VAR 0 2
43242: PUSH
43243: LD_VAR 0 9
43247: ARRAY
43248: PUSH
43249: LD_INT 2
43251: ARRAY
43252: PPUSH
43253: CALL_OW 114
43257: GO 43273
// SetTag ( i , tag ) ;
43259: LD_VAR 0 4
43263: PPUSH
43264: LD_VAR 0 9
43268: PPUSH
43269: CALL_OW 109
// end else
43273: GO 43346
// if enemy then
43275: LD_VAR 0 5
43279: IFFALSE 43346
// begin if GetWeapon ( i ) = ru_time_lapser then
43281: LD_VAR 0 4
43285: PPUSH
43286: CALL_OW 264
43290: PUSH
43291: LD_INT 49
43293: EQUAL
43294: IFFALSE 43322
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
43296: LD_VAR 0 4
43300: PPUSH
43301: LD_VAR 0 5
43305: PPUSH
43306: LD_VAR 0 4
43310: PPUSH
43311: CALL_OW 74
43315: PPUSH
43316: CALL_OW 112
43320: GO 43346
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
43322: LD_VAR 0 4
43326: PPUSH
43327: LD_VAR 0 5
43331: PPUSH
43332: LD_VAR 0 4
43336: PPUSH
43337: CALL_OW 74
43341: PPUSH
43342: CALL 44421 0 2
// end ; end ;
43346: GO 42922
43348: POP
43349: POP
// end ;
43350: LD_VAR 0 3
43354: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
43355: LD_INT 0
43357: PPUSH
43358: PPUSH
43359: PPUSH
// if not unit or IsInUnit ( unit ) then
43360: LD_VAR 0 1
43364: NOT
43365: PUSH
43366: LD_VAR 0 1
43370: PPUSH
43371: CALL_OW 310
43375: OR
43376: IFFALSE 43380
// exit ;
43378: GO 43471
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
43380: LD_ADDR_VAR 0 4
43384: PUSH
43385: LD_VAR 0 1
43389: PPUSH
43390: CALL_OW 250
43394: PPUSH
43395: LD_VAR 0 2
43399: PPUSH
43400: LD_INT 1
43402: PPUSH
43403: CALL_OW 272
43407: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
43408: LD_ADDR_VAR 0 5
43412: PUSH
43413: LD_VAR 0 1
43417: PPUSH
43418: CALL_OW 251
43422: PPUSH
43423: LD_VAR 0 2
43427: PPUSH
43428: LD_INT 1
43430: PPUSH
43431: CALL_OW 273
43435: ST_TO_ADDR
// if ValidHex ( x , y ) then
43436: LD_VAR 0 4
43440: PPUSH
43441: LD_VAR 0 5
43445: PPUSH
43446: CALL_OW 488
43450: IFFALSE 43471
// ComTurnXY ( unit , x , y ) ;
43452: LD_VAR 0 1
43456: PPUSH
43457: LD_VAR 0 4
43461: PPUSH
43462: LD_VAR 0 5
43466: PPUSH
43467: CALL_OW 118
// end ;
43471: LD_VAR 0 3
43475: RET
// export function SeeUnits ( side , units ) ; var i ; begin
43476: LD_INT 0
43478: PPUSH
43479: PPUSH
// result := false ;
43480: LD_ADDR_VAR 0 3
43484: PUSH
43485: LD_INT 0
43487: ST_TO_ADDR
// if not units then
43488: LD_VAR 0 2
43492: NOT
43493: IFFALSE 43497
// exit ;
43495: GO 43542
// for i in units do
43497: LD_ADDR_VAR 0 4
43501: PUSH
43502: LD_VAR 0 2
43506: PUSH
43507: FOR_IN
43508: IFFALSE 43540
// if See ( side , i ) then
43510: LD_VAR 0 1
43514: PPUSH
43515: LD_VAR 0 4
43519: PPUSH
43520: CALL_OW 292
43524: IFFALSE 43538
// begin result := true ;
43526: LD_ADDR_VAR 0 3
43530: PUSH
43531: LD_INT 1
43533: ST_TO_ADDR
// exit ;
43534: POP
43535: POP
43536: GO 43542
// end ;
43538: GO 43507
43540: POP
43541: POP
// end ;
43542: LD_VAR 0 3
43546: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
43547: LD_INT 0
43549: PPUSH
43550: PPUSH
43551: PPUSH
43552: PPUSH
// if not unit or not points then
43553: LD_VAR 0 1
43557: NOT
43558: PUSH
43559: LD_VAR 0 2
43563: NOT
43564: OR
43565: IFFALSE 43569
// exit ;
43567: GO 43659
// dist := 99999 ;
43569: LD_ADDR_VAR 0 5
43573: PUSH
43574: LD_INT 99999
43576: ST_TO_ADDR
// for i in points do
43577: LD_ADDR_VAR 0 4
43581: PUSH
43582: LD_VAR 0 2
43586: PUSH
43587: FOR_IN
43588: IFFALSE 43657
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
43590: LD_ADDR_VAR 0 6
43594: PUSH
43595: LD_VAR 0 1
43599: PPUSH
43600: LD_VAR 0 4
43604: PUSH
43605: LD_INT 1
43607: ARRAY
43608: PPUSH
43609: LD_VAR 0 4
43613: PUSH
43614: LD_INT 2
43616: ARRAY
43617: PPUSH
43618: CALL_OW 297
43622: ST_TO_ADDR
// if tmpDist < dist then
43623: LD_VAR 0 6
43627: PUSH
43628: LD_VAR 0 5
43632: LESS
43633: IFFALSE 43655
// begin result := i ;
43635: LD_ADDR_VAR 0 3
43639: PUSH
43640: LD_VAR 0 4
43644: ST_TO_ADDR
// dist := tmpDist ;
43645: LD_ADDR_VAR 0 5
43649: PUSH
43650: LD_VAR 0 6
43654: ST_TO_ADDR
// end ; end ;
43655: GO 43587
43657: POP
43658: POP
// end ;
43659: LD_VAR 0 3
43663: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
43664: LD_INT 0
43666: PPUSH
// uc_side := side ;
43667: LD_ADDR_OWVAR 20
43671: PUSH
43672: LD_VAR 0 1
43676: ST_TO_ADDR
// uc_nation := 3 ;
43677: LD_ADDR_OWVAR 21
43681: PUSH
43682: LD_INT 3
43684: ST_TO_ADDR
// vc_chassis := 25 ;
43685: LD_ADDR_OWVAR 37
43689: PUSH
43690: LD_INT 25
43692: ST_TO_ADDR
// vc_engine := engine_siberite ;
43693: LD_ADDR_OWVAR 39
43697: PUSH
43698: LD_INT 3
43700: ST_TO_ADDR
// vc_control := control_computer ;
43701: LD_ADDR_OWVAR 38
43705: PUSH
43706: LD_INT 3
43708: ST_TO_ADDR
// vc_weapon := 59 ;
43709: LD_ADDR_OWVAR 40
43713: PUSH
43714: LD_INT 59
43716: ST_TO_ADDR
// result := CreateVehicle ;
43717: LD_ADDR_VAR 0 5
43721: PUSH
43722: CALL_OW 45
43726: ST_TO_ADDR
// SetDir ( result , d ) ;
43727: LD_VAR 0 5
43731: PPUSH
43732: LD_VAR 0 4
43736: PPUSH
43737: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
43741: LD_VAR 0 5
43745: PPUSH
43746: LD_VAR 0 2
43750: PPUSH
43751: LD_VAR 0 3
43755: PPUSH
43756: LD_INT 0
43758: PPUSH
43759: CALL_OW 48
// end ;
43763: LD_VAR 0 5
43767: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
43768: LD_INT 0
43770: PPUSH
43771: PPUSH
43772: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
43773: LD_ADDR_VAR 0 2
43777: PUSH
43778: LD_INT 0
43780: PUSH
43781: LD_INT 0
43783: PUSH
43784: LD_INT 0
43786: PUSH
43787: LD_INT 0
43789: PUSH
43790: EMPTY
43791: LIST
43792: LIST
43793: LIST
43794: LIST
43795: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
43796: LD_VAR 0 1
43800: NOT
43801: PUSH
43802: LD_VAR 0 1
43806: PPUSH
43807: CALL_OW 264
43811: PUSH
43812: LD_INT 12
43814: PUSH
43815: LD_INT 51
43817: PUSH
43818: LD_INT 32
43820: PUSH
43821: LD_INT 89
43823: PUSH
43824: EMPTY
43825: LIST
43826: LIST
43827: LIST
43828: LIST
43829: IN
43830: NOT
43831: OR
43832: IFFALSE 43836
// exit ;
43834: GO 43934
// for i := 1 to 3 do
43836: LD_ADDR_VAR 0 3
43840: PUSH
43841: DOUBLE
43842: LD_INT 1
43844: DEC
43845: ST_TO_ADDR
43846: LD_INT 3
43848: PUSH
43849: FOR_TO
43850: IFFALSE 43932
// begin tmp := GetCargo ( cargo , i ) ;
43852: LD_ADDR_VAR 0 4
43856: PUSH
43857: LD_VAR 0 1
43861: PPUSH
43862: LD_VAR 0 3
43866: PPUSH
43867: CALL_OW 289
43871: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
43872: LD_ADDR_VAR 0 2
43876: PUSH
43877: LD_VAR 0 2
43881: PPUSH
43882: LD_VAR 0 3
43886: PPUSH
43887: LD_VAR 0 4
43891: PPUSH
43892: CALL_OW 1
43896: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
43897: LD_ADDR_VAR 0 2
43901: PUSH
43902: LD_VAR 0 2
43906: PPUSH
43907: LD_INT 4
43909: PPUSH
43910: LD_VAR 0 2
43914: PUSH
43915: LD_INT 4
43917: ARRAY
43918: PUSH
43919: LD_VAR 0 4
43923: PLUS
43924: PPUSH
43925: CALL_OW 1
43929: ST_TO_ADDR
// end ;
43930: GO 43849
43932: POP
43933: POP
// end ;
43934: LD_VAR 0 2
43938: RET
// export function Length ( array ) ; begin
43939: LD_INT 0
43941: PPUSH
// result := array + 0 ;
43942: LD_ADDR_VAR 0 2
43946: PUSH
43947: LD_VAR 0 1
43951: PUSH
43952: LD_INT 0
43954: PLUS
43955: ST_TO_ADDR
// end ;
43956: LD_VAR 0 2
43960: RET
// export function PrepareArray ( array ) ; begin
43961: LD_INT 0
43963: PPUSH
// result := array diff 0 ;
43964: LD_ADDR_VAR 0 2
43968: PUSH
43969: LD_VAR 0 1
43973: PUSH
43974: LD_INT 0
43976: DIFF
43977: ST_TO_ADDR
// if not result [ 1 ] then
43978: LD_VAR 0 2
43982: PUSH
43983: LD_INT 1
43985: ARRAY
43986: NOT
43987: IFFALSE 44007
// result := Delete ( result , 1 ) ;
43989: LD_ADDR_VAR 0 2
43993: PUSH
43994: LD_VAR 0 2
43998: PPUSH
43999: LD_INT 1
44001: PPUSH
44002: CALL_OW 3
44006: ST_TO_ADDR
// end ;
44007: LD_VAR 0 2
44011: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
44012: LD_INT 0
44014: PPUSH
44015: PPUSH
44016: PPUSH
44017: PPUSH
// sibRocketRange := 25 ;
44018: LD_ADDR_VAR 0 6
44022: PUSH
44023: LD_INT 25
44025: ST_TO_ADDR
// result := false ;
44026: LD_ADDR_VAR 0 4
44030: PUSH
44031: LD_INT 0
44033: ST_TO_ADDR
// for i := 0 to 5 do
44034: LD_ADDR_VAR 0 5
44038: PUSH
44039: DOUBLE
44040: LD_INT 0
44042: DEC
44043: ST_TO_ADDR
44044: LD_INT 5
44046: PUSH
44047: FOR_TO
44048: IFFALSE 44115
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
44050: LD_VAR 0 1
44054: PPUSH
44055: LD_VAR 0 5
44059: PPUSH
44060: LD_VAR 0 6
44064: PPUSH
44065: CALL_OW 272
44069: PPUSH
44070: LD_VAR 0 2
44074: PPUSH
44075: LD_VAR 0 5
44079: PPUSH
44080: LD_VAR 0 6
44084: PPUSH
44085: CALL_OW 273
44089: PPUSH
44090: LD_VAR 0 3
44094: PPUSH
44095: CALL_OW 309
44099: IFFALSE 44113
// begin result := true ;
44101: LD_ADDR_VAR 0 4
44105: PUSH
44106: LD_INT 1
44108: ST_TO_ADDR
// exit ;
44109: POP
44110: POP
44111: GO 44117
// end ;
44113: GO 44047
44115: POP
44116: POP
// end ;
44117: LD_VAR 0 4
44121: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
44122: LD_INT 0
44124: PPUSH
44125: PPUSH
44126: PPUSH
// if btype = b_depot then
44127: LD_VAR 0 2
44131: PUSH
44132: LD_INT 0
44134: EQUAL
44135: IFFALSE 44147
// begin result := true ;
44137: LD_ADDR_VAR 0 3
44141: PUSH
44142: LD_INT 1
44144: ST_TO_ADDR
// exit ;
44145: GO 44263
// end ; pom := GetBase ( depot ) ;
44147: LD_ADDR_VAR 0 4
44151: PUSH
44152: LD_VAR 0 1
44156: PPUSH
44157: CALL_OW 274
44161: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44162: LD_ADDR_VAR 0 5
44166: PUSH
44167: LD_VAR 0 2
44171: PPUSH
44172: LD_VAR 0 1
44176: PPUSH
44177: CALL_OW 248
44181: PPUSH
44182: CALL_OW 450
44186: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
44187: LD_ADDR_VAR 0 3
44191: PUSH
44192: LD_VAR 0 4
44196: PPUSH
44197: LD_INT 1
44199: PPUSH
44200: CALL_OW 275
44204: PUSH
44205: LD_VAR 0 5
44209: PUSH
44210: LD_INT 1
44212: ARRAY
44213: GREATEREQUAL
44214: PUSH
44215: LD_VAR 0 4
44219: PPUSH
44220: LD_INT 2
44222: PPUSH
44223: CALL_OW 275
44227: PUSH
44228: LD_VAR 0 5
44232: PUSH
44233: LD_INT 2
44235: ARRAY
44236: GREATEREQUAL
44237: AND
44238: PUSH
44239: LD_VAR 0 4
44243: PPUSH
44244: LD_INT 3
44246: PPUSH
44247: CALL_OW 275
44251: PUSH
44252: LD_VAR 0 5
44256: PUSH
44257: LD_INT 3
44259: ARRAY
44260: GREATEREQUAL
44261: AND
44262: ST_TO_ADDR
// end ;
44263: LD_VAR 0 3
44267: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
44268: LD_INT 0
44270: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
44271: LD_VAR 0 1
44275: PPUSH
44276: LD_VAR 0 2
44280: PPUSH
44281: LD_INT 0
44283: PPUSH
44284: LD_INT 0
44286: PPUSH
44287: LD_INT 1
44289: PPUSH
44290: LD_INT 0
44292: PPUSH
44293: CALL_OW 587
// end ;
44297: LD_VAR 0 3
44301: RET
// export function CenterOnNow ( unit ) ; begin
44302: LD_INT 0
44304: PPUSH
// result := IsInUnit ( unit ) ;
44305: LD_ADDR_VAR 0 2
44309: PUSH
44310: LD_VAR 0 1
44314: PPUSH
44315: CALL_OW 310
44319: ST_TO_ADDR
// if not result then
44320: LD_VAR 0 2
44324: NOT
44325: IFFALSE 44337
// result := unit ;
44327: LD_ADDR_VAR 0 2
44331: PUSH
44332: LD_VAR 0 1
44336: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
44337: LD_VAR 0 1
44341: PPUSH
44342: CALL_OW 87
// end ;
44346: LD_VAR 0 2
44350: RET
// export function ComMoveHex ( unit , hex ) ; begin
44351: LD_INT 0
44353: PPUSH
// if not hex then
44354: LD_VAR 0 2
44358: NOT
44359: IFFALSE 44363
// exit ;
44361: GO 44416
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
44363: LD_VAR 0 2
44367: PUSH
44368: LD_INT 1
44370: ARRAY
44371: PPUSH
44372: LD_VAR 0 2
44376: PUSH
44377: LD_INT 2
44379: ARRAY
44380: PPUSH
44381: CALL_OW 428
44385: IFFALSE 44389
// exit ;
44387: GO 44416
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
44389: LD_VAR 0 1
44393: PPUSH
44394: LD_VAR 0 2
44398: PUSH
44399: LD_INT 1
44401: ARRAY
44402: PPUSH
44403: LD_VAR 0 2
44407: PUSH
44408: LD_INT 2
44410: ARRAY
44411: PPUSH
44412: CALL_OW 111
// end ;
44416: LD_VAR 0 3
44420: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
44421: LD_INT 0
44423: PPUSH
44424: PPUSH
44425: PPUSH
// if not unit or not enemy then
44426: LD_VAR 0 1
44430: NOT
44431: PUSH
44432: LD_VAR 0 2
44436: NOT
44437: OR
44438: IFFALSE 44442
// exit ;
44440: GO 44566
// x := GetX ( enemy ) ;
44442: LD_ADDR_VAR 0 4
44446: PUSH
44447: LD_VAR 0 2
44451: PPUSH
44452: CALL_OW 250
44456: ST_TO_ADDR
// y := GetY ( enemy ) ;
44457: LD_ADDR_VAR 0 5
44461: PUSH
44462: LD_VAR 0 2
44466: PPUSH
44467: CALL_OW 251
44471: ST_TO_ADDR
// if ValidHex ( x , y ) then
44472: LD_VAR 0 4
44476: PPUSH
44477: LD_VAR 0 5
44481: PPUSH
44482: CALL_OW 488
44486: IFFALSE 44566
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
44488: LD_VAR 0 2
44492: PPUSH
44493: CALL_OW 247
44497: PUSH
44498: LD_INT 3
44500: PUSH
44501: LD_INT 2
44503: PUSH
44504: EMPTY
44505: LIST
44506: LIST
44507: IN
44508: PUSH
44509: LD_VAR 0 1
44513: PPUSH
44514: CALL_OW 255
44518: PPUSH
44519: LD_VAR 0 2
44523: PPUSH
44524: CALL_OW 292
44528: OR
44529: IFFALSE 44547
// ComAttackUnit ( unit , enemy ) else
44531: LD_VAR 0 1
44535: PPUSH
44536: LD_VAR 0 2
44540: PPUSH
44541: CALL_OW 115
44545: GO 44566
// ComAgressiveMove ( unit , x , y ) ;
44547: LD_VAR 0 1
44551: PPUSH
44552: LD_VAR 0 4
44556: PPUSH
44557: LD_VAR 0 5
44561: PPUSH
44562: CALL_OW 114
// end ;
44566: LD_VAR 0 3
44570: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
44571: LD_INT 0
44573: PPUSH
44574: PPUSH
44575: PPUSH
// list := AreaToList ( area , 0 ) ;
44576: LD_ADDR_VAR 0 5
44580: PUSH
44581: LD_VAR 0 1
44585: PPUSH
44586: LD_INT 0
44588: PPUSH
44589: CALL_OW 517
44593: ST_TO_ADDR
// if not list then
44594: LD_VAR 0 5
44598: NOT
44599: IFFALSE 44603
// exit ;
44601: GO 44733
// if all then
44603: LD_VAR 0 2
44607: IFFALSE 44695
// begin for i := 1 to list [ 1 ] do
44609: LD_ADDR_VAR 0 4
44613: PUSH
44614: DOUBLE
44615: LD_INT 1
44617: DEC
44618: ST_TO_ADDR
44619: LD_VAR 0 5
44623: PUSH
44624: LD_INT 1
44626: ARRAY
44627: PUSH
44628: FOR_TO
44629: IFFALSE 44691
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
44631: LD_ADDR_VAR 0 3
44635: PUSH
44636: LD_VAR 0 3
44640: PPUSH
44641: LD_VAR 0 3
44645: PUSH
44646: LD_INT 1
44648: PLUS
44649: PPUSH
44650: LD_VAR 0 5
44654: PUSH
44655: LD_INT 1
44657: ARRAY
44658: PUSH
44659: LD_VAR 0 4
44663: ARRAY
44664: PUSH
44665: LD_VAR 0 5
44669: PUSH
44670: LD_INT 2
44672: ARRAY
44673: PUSH
44674: LD_VAR 0 4
44678: ARRAY
44679: PUSH
44680: EMPTY
44681: LIST
44682: LIST
44683: PPUSH
44684: CALL_OW 1
44688: ST_TO_ADDR
44689: GO 44628
44691: POP
44692: POP
// exit ;
44693: GO 44733
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
44695: LD_ADDR_VAR 0 3
44699: PUSH
44700: LD_VAR 0 5
44704: PUSH
44705: LD_INT 1
44707: ARRAY
44708: PUSH
44709: LD_INT 1
44711: ARRAY
44712: PUSH
44713: LD_VAR 0 5
44717: PUSH
44718: LD_INT 2
44720: ARRAY
44721: PUSH
44722: LD_INT 1
44724: ARRAY
44725: PUSH
44726: EMPTY
44727: LIST
44728: LIST
44729: PUSH
44730: EMPTY
44731: LIST
44732: ST_TO_ADDR
// end ;
44733: LD_VAR 0 3
44737: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
44738: LD_INT 0
44740: PPUSH
44741: PPUSH
// list := AreaToList ( area , 0 ) ;
44742: LD_ADDR_VAR 0 4
44746: PUSH
44747: LD_VAR 0 1
44751: PPUSH
44752: LD_INT 0
44754: PPUSH
44755: CALL_OW 517
44759: ST_TO_ADDR
// if not list then
44760: LD_VAR 0 4
44764: NOT
44765: IFFALSE 44769
// exit ;
44767: GO 44810
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
44769: LD_ADDR_VAR 0 3
44773: PUSH
44774: LD_VAR 0 4
44778: PUSH
44779: LD_INT 1
44781: ARRAY
44782: PUSH
44783: LD_INT 1
44785: ARRAY
44786: PUSH
44787: LD_VAR 0 4
44791: PUSH
44792: LD_INT 2
44794: ARRAY
44795: PUSH
44796: LD_INT 1
44798: ARRAY
44799: PUSH
44800: LD_VAR 0 2
44804: PUSH
44805: EMPTY
44806: LIST
44807: LIST
44808: LIST
44809: ST_TO_ADDR
// end ;
44810: LD_VAR 0 3
44814: RET
// export function First ( array ) ; begin
44815: LD_INT 0
44817: PPUSH
// if not array then
44818: LD_VAR 0 1
44822: NOT
44823: IFFALSE 44827
// exit ;
44825: GO 44841
// result := array [ 1 ] ;
44827: LD_ADDR_VAR 0 2
44831: PUSH
44832: LD_VAR 0 1
44836: PUSH
44837: LD_INT 1
44839: ARRAY
44840: ST_TO_ADDR
// end ;
44841: LD_VAR 0 2
44845: RET
// export function Last ( array ) ; begin
44846: LD_INT 0
44848: PPUSH
// if not array then
44849: LD_VAR 0 1
44853: NOT
44854: IFFALSE 44858
// exit ;
44856: GO 44874
// result := array [ array ] ;
44858: LD_ADDR_VAR 0 2
44862: PUSH
44863: LD_VAR 0 1
44867: PUSH
44868: LD_VAR 0 1
44872: ARRAY
44873: ST_TO_ADDR
// end ;
44874: LD_VAR 0 2
44878: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
44879: LD_INT 0
44881: PPUSH
44882: PPUSH
// result := [ ] ;
44883: LD_ADDR_VAR 0 5
44887: PUSH
44888: EMPTY
44889: ST_TO_ADDR
// if not array then
44890: LD_VAR 0 1
44894: NOT
44895: IFFALSE 44899
// exit ;
44897: GO 45011
// for i := 1 to array do
44899: LD_ADDR_VAR 0 6
44903: PUSH
44904: DOUBLE
44905: LD_INT 1
44907: DEC
44908: ST_TO_ADDR
44909: LD_VAR 0 1
44913: PUSH
44914: FOR_TO
44915: IFFALSE 45009
// if array [ i ] [ index ] = value then
44917: LD_VAR 0 1
44921: PUSH
44922: LD_VAR 0 6
44926: ARRAY
44927: PUSH
44928: LD_VAR 0 2
44932: ARRAY
44933: PUSH
44934: LD_VAR 0 3
44938: EQUAL
44939: IFFALSE 45007
// begin if indexColumn then
44941: LD_VAR 0 4
44945: IFFALSE 44981
// result := Join ( result , array [ i ] [ indexColumn ] ) else
44947: LD_ADDR_VAR 0 5
44951: PUSH
44952: LD_VAR 0 5
44956: PPUSH
44957: LD_VAR 0 1
44961: PUSH
44962: LD_VAR 0 6
44966: ARRAY
44967: PUSH
44968: LD_VAR 0 4
44972: ARRAY
44973: PPUSH
44974: CALL 40199 0 2
44978: ST_TO_ADDR
44979: GO 45007
// result := Join ( result , array [ i ] ) ;
44981: LD_ADDR_VAR 0 5
44985: PUSH
44986: LD_VAR 0 5
44990: PPUSH
44991: LD_VAR 0 1
44995: PUSH
44996: LD_VAR 0 6
45000: ARRAY
45001: PPUSH
45002: CALL 40199 0 2
45006: ST_TO_ADDR
// end ;
45007: GO 44914
45009: POP
45010: POP
// end ;
45011: LD_VAR 0 5
45015: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
45016: LD_INT 0
45018: PPUSH
// if not vehicles or not parkingPoint then
45019: LD_VAR 0 1
45023: NOT
45024: PUSH
45025: LD_VAR 0 2
45029: NOT
45030: OR
45031: IFFALSE 45035
// exit ;
45033: GO 45133
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
45035: LD_ADDR_VAR 0 1
45039: PUSH
45040: LD_VAR 0 1
45044: PPUSH
45045: LD_INT 50
45047: PUSH
45048: EMPTY
45049: LIST
45050: PUSH
45051: LD_INT 3
45053: PUSH
45054: LD_INT 92
45056: PUSH
45057: LD_VAR 0 2
45061: PUSH
45062: LD_INT 1
45064: ARRAY
45065: PUSH
45066: LD_VAR 0 2
45070: PUSH
45071: LD_INT 2
45073: ARRAY
45074: PUSH
45075: LD_INT 8
45077: PUSH
45078: EMPTY
45079: LIST
45080: LIST
45081: LIST
45082: LIST
45083: PUSH
45084: EMPTY
45085: LIST
45086: LIST
45087: PUSH
45088: EMPTY
45089: LIST
45090: LIST
45091: PPUSH
45092: CALL_OW 72
45096: ST_TO_ADDR
// if not vehicles then
45097: LD_VAR 0 1
45101: NOT
45102: IFFALSE 45106
// exit ;
45104: GO 45133
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
45106: LD_VAR 0 1
45110: PPUSH
45111: LD_VAR 0 2
45115: PUSH
45116: LD_INT 1
45118: ARRAY
45119: PPUSH
45120: LD_VAR 0 2
45124: PUSH
45125: LD_INT 2
45127: ARRAY
45128: PPUSH
45129: CALL_OW 111
// end ;
45133: LD_VAR 0 3
45137: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
45138: LD_INT 0
45140: PPUSH
45141: PPUSH
45142: PPUSH
// if not side or not area then
45143: LD_VAR 0 1
45147: NOT
45148: PUSH
45149: LD_VAR 0 2
45153: NOT
45154: OR
45155: IFFALSE 45159
// exit ;
45157: GO 45278
// tmp := AreaToList ( area , 0 ) ;
45159: LD_ADDR_VAR 0 5
45163: PUSH
45164: LD_VAR 0 2
45168: PPUSH
45169: LD_INT 0
45171: PPUSH
45172: CALL_OW 517
45176: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
45177: LD_ADDR_VAR 0 4
45181: PUSH
45182: DOUBLE
45183: LD_INT 1
45185: DEC
45186: ST_TO_ADDR
45187: LD_VAR 0 5
45191: PUSH
45192: LD_INT 1
45194: ARRAY
45195: PUSH
45196: FOR_TO
45197: IFFALSE 45276
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
45199: LD_VAR 0 5
45203: PUSH
45204: LD_INT 1
45206: ARRAY
45207: PUSH
45208: LD_VAR 0 4
45212: ARRAY
45213: PPUSH
45214: LD_VAR 0 5
45218: PUSH
45219: LD_INT 2
45221: ARRAY
45222: PUSH
45223: LD_VAR 0 4
45227: ARRAY
45228: PPUSH
45229: CALL_OW 351
45233: IFFALSE 45274
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
45235: LD_VAR 0 5
45239: PUSH
45240: LD_INT 1
45242: ARRAY
45243: PUSH
45244: LD_VAR 0 4
45248: ARRAY
45249: PPUSH
45250: LD_VAR 0 5
45254: PUSH
45255: LD_INT 2
45257: ARRAY
45258: PUSH
45259: LD_VAR 0 4
45263: ARRAY
45264: PPUSH
45265: LD_VAR 0 1
45269: PPUSH
45270: CALL_OW 244
// end ;
45274: GO 45196
45276: POP
45277: POP
// end ; end_of_file
45278: LD_VAR 0 3
45282: RET
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpRespawn , mpKingArea , mpPoints , mpDisplayStrings , mpGameActive ; export function InitMultiplayer ; var i ; begin
45283: LD_INT 0
45285: PPUSH
45286: PPUSH
// disable ( mpActive ) ;
45287: LD_INT 100
45289: DISABLE_MARKED
// disable ( mpWin ) ;
45290: LD_INT 101
45292: DISABLE_MARKED
// disable ( mpLose ) ;
45293: LD_INT 102
45295: DISABLE_MARKED
// mpGameType := 0 ;
45296: LD_ADDR_EXP 1
45300: PUSH
45301: LD_INT 0
45303: ST_TO_ADDR
// mpGameSettings := [ ] ;
45304: LD_ADDR_EXP 4
45308: PUSH
45309: EMPTY
45310: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
45311: LD_ADDR_EXP 2
45315: PUSH
45316: EMPTY
45317: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
45318: LD_ADDR_EXP 3
45322: PUSH
45323: EMPTY
45324: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
45325: LD_ADDR_EXP 27
45329: PUSH
45330: LD_INT 2
45332: PUSH
45333: LD_INT 2
45335: PUSH
45336: EMPTY
45337: LIST
45338: LIST
45339: ST_TO_ADDR
// mpOilDeposits := [ ] ;
45340: LD_ADDR_EXP 10
45344: PUSH
45345: EMPTY
45346: ST_TO_ADDR
// mpSibDeposits := [ ] ;
45347: LD_ADDR_EXP 11
45351: PUSH
45352: EMPTY
45353: ST_TO_ADDR
// mpDepots := [ ] ;
45354: LD_ADDR_EXP 12
45358: PUSH
45359: EMPTY
45360: ST_TO_ADDR
// mpBuildings := [ ] ;
45361: LD_ADDR_EXP 15
45365: PUSH
45366: EMPTY
45367: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
45368: LD_ADDR_EXP 16
45372: PUSH
45373: EMPTY
45374: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
45375: LD_ADDR_EXP 17
45379: PUSH
45380: EMPTY
45381: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
45382: LD_ADDR_EXP 18
45386: PUSH
45387: EMPTY
45388: ST_TO_ADDR
// mpStartingResources := [ ] ;
45389: LD_ADDR_EXP 13
45393: PUSH
45394: EMPTY
45395: ST_TO_ADDR
// mpStartPos := [ ] ;
45396: LD_ADDR_EXP 19
45400: PUSH
45401: EMPTY
45402: ST_TO_ADDR
// mpBattleFlag := - 1 ;
45403: LD_ADDR_EXP 20
45407: PUSH
45408: LD_INT 1
45410: NEG
45411: ST_TO_ADDR
// mpBattleFlags := [ ] ;
45412: LD_ADDR_EXP 21
45416: PUSH
45417: EMPTY
45418: ST_TO_ADDR
// mpApemans := [ ] ;
45419: LD_ADDR_EXP 28
45423: PUSH
45424: EMPTY
45425: ST_TO_ADDR
// mpApemansArea := [ ] ;
45426: LD_ADDR_EXP 29
45430: PUSH
45431: EMPTY
45432: ST_TO_ADDR
// mpRespawn := [ ] ;
45433: LD_ADDR_EXP 30
45437: PUSH
45438: EMPTY
45439: ST_TO_ADDR
// mpKingArea := 0 ;
45440: LD_ADDR_EXP 31
45444: PUSH
45445: LD_INT 0
45447: ST_TO_ADDR
// mpPoints := [ ] ;
45448: LD_ADDR_EXP 32
45452: PUSH
45453: EMPTY
45454: ST_TO_ADDR
// mpShipments := 0 ;
45455: LD_ADDR_EXP 25
45459: PUSH
45460: LD_INT 0
45462: ST_TO_ADDR
// mpPeopleSkill := 3 ;
45463: LD_ADDR_EXP 23
45467: PUSH
45468: LD_INT 3
45470: ST_TO_ADDR
// mpPeopleAmount := 15 ;
45471: LD_ADDR_EXP 22
45475: PUSH
45476: LD_INT 15
45478: ST_TO_ADDR
// mpDisplayStrings := 0 ;
45479: LD_ADDR_EXP 33
45483: PUSH
45484: LD_INT 0
45486: ST_TO_ADDR
// mpGameActive := false ;
45487: LD_ADDR_EXP 34
45491: PUSH
45492: LD_INT 0
45494: ST_TO_ADDR
// for i := 1 to 32 do
45495: LD_ADDR_VAR 0 2
45499: PUSH
45500: DOUBLE
45501: LD_INT 1
45503: DEC
45504: ST_TO_ADDR
45505: LD_INT 32
45507: PUSH
45508: FOR_TO
45509: IFFALSE 45536
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
45511: LD_ADDR_EXP 4
45515: PUSH
45516: LD_EXP 4
45520: PPUSH
45521: LD_VAR 0 2
45525: PPUSH
45526: LD_INT 0
45528: PPUSH
45529: CALL_OW 1
45533: ST_TO_ADDR
45534: GO 45508
45536: POP
45537: POP
// end ;
45538: LD_VAR 0 1
45542: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
45543: LD_INT 0
45545: PPUSH
45546: PPUSH
45547: PPUSH
45548: PPUSH
45549: PPUSH
45550: PPUSH
45551: PPUSH
45552: PPUSH
45553: PPUSH
45554: PPUSH
45555: PPUSH
45556: PPUSH
45557: PPUSH
45558: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing ] ;
45559: LD_ADDR_VAR 0 14
45563: PUSH
45564: LD_INT 1
45566: PUSH
45567: LD_INT 2
45569: PUSH
45570: LD_INT 3
45572: PUSH
45573: EMPTY
45574: LIST
45575: LIST
45576: LIST
45577: ST_TO_ADDR
// for i in gameTypes do
45578: LD_ADDR_VAR 0 2
45582: PUSH
45583: LD_VAR 0 14
45587: PUSH
45588: FOR_IN
45589: IFFALSE 45598
// disable ( i ) ;
45591: LD_VAR 0 2
45595: DISABLE_MARKED
45596: GO 45588
45598: POP
45599: POP
// if Multiplayer then
45600: LD_OWVAR 4
45604: IFFALSE 45788
// begin mpGameType := mp_game_type ;
45606: LD_ADDR_EXP 1
45610: PUSH
45611: LD_OWVAR 6
45615: ST_TO_ADDR
// your_side := mp_player_side ;
45616: LD_ADDR_OWVAR 2
45620: PUSH
45621: LD_OWVAR 7
45625: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
45626: LD_ADDR_EXP 5
45630: PUSH
45631: LD_OWVAR 17
45635: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
45636: LD_ADDR_EXP 6
45640: PUSH
45641: LD_OWVAR 15
45645: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
45646: LD_ADDR_EXP 7
45650: PUSH
45651: LD_OWVAR 16
45655: ST_TO_ADDR
// mpTeams := mp_teams ;
45656: LD_ADDR_EXP 8
45660: PUSH
45661: LD_OWVAR 12
45665: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
45666: LD_ADDR_VAR 0 2
45670: PUSH
45671: DOUBLE
45672: LD_INT 1
45674: DEC
45675: ST_TO_ADDR
45676: LD_EXP 2
45680: PPUSH
45681: CALL 4610 0 1
45685: PUSH
45686: FOR_TO
45687: IFFALSE 45763
// begin setting := mpGameSettingsKeys [ i ] ;
45689: LD_ADDR_VAR 0 12
45693: PUSH
45694: LD_EXP 2
45698: PUSH
45699: LD_VAR 0 2
45703: ARRAY
45704: ST_TO_ADDR
// if setting then
45705: LD_VAR 0 12
45709: IFFALSE 45761
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
45711: LD_ADDR_EXP 4
45715: PUSH
45716: LD_EXP 4
45720: PPUSH
45721: LD_VAR 0 2
45725: PPUSH
45726: LD_EXP 3
45730: PUSH
45731: LD_VAR 0 2
45735: ARRAY
45736: PUSH
45737: LD_VAR 0 2
45741: PUSH
45742: LD_INT 1
45744: MINUS
45745: PPUSH
45746: CALL_OW 426
45750: PUSH
45751: LD_INT 1
45753: PLUS
45754: ARRAY
45755: PPUSH
45756: CALL_OW 1
45760: ST_TO_ADDR
// end ;
45761: GO 45686
45763: POP
45764: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
45765: LD_ADDR_EXP 9
45769: PUSH
45770: LD_EXP 6
45774: PUSH
45775: LD_INT 0
45777: PUSH
45778: EMPTY
45779: LIST
45780: DIFF
45781: PUSH
45782: LD_INT 1
45784: GREATER
45785: ST_TO_ADDR
// end else
45786: GO 45788
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
45788: LD_EXP 1
45792: PPUSH
45793: CALL 804 0 1
// if Count ( mpMarkedAreas ) then
45797: LD_EXP 16
45801: PPUSH
45802: CALL 4610 0 1
45806: IFFALSE 45837
// begin for i in mpMarkedAreas do
45808: LD_ADDR_VAR 0 2
45812: PUSH
45813: LD_EXP 16
45817: PUSH
45818: FOR_IN
45819: IFFALSE 45835
// SetAreaMapShow ( i , 0 ) ;
45821: LD_VAR 0 2
45825: PPUSH
45826: LD_INT 0
45828: PPUSH
45829: CALL_OW 424
45833: GO 45818
45835: POP
45836: POP
// end ; for i := 1 to 8 do
45837: LD_ADDR_VAR 0 2
45841: PUSH
45842: DOUBLE
45843: LD_INT 1
45845: DEC
45846: ST_TO_ADDR
45847: LD_INT 8
45849: PUSH
45850: FOR_TO
45851: IFFALSE 46950
// begin if not mpSidePositions [ i ] then
45853: LD_EXP 5
45857: PUSH
45858: LD_VAR 0 2
45862: ARRAY
45863: NOT
45864: IFFALSE 45868
// continue ;
45866: GO 45850
// side := i ;
45868: LD_ADDR_VAR 0 7
45872: PUSH
45873: LD_VAR 0 2
45877: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
45878: LD_ADDR_VAR 0 9
45882: PUSH
45883: LD_EXP 7
45887: PUSH
45888: LD_VAR 0 2
45892: ARRAY
45893: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
45894: LD_ADDR_VAR 0 8
45898: PUSH
45899: LD_EXP 5
45903: PUSH
45904: LD_VAR 0 2
45908: ARRAY
45909: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
45910: LD_EXP 10
45914: PPUSH
45915: CALL 4610 0 1
45919: IFFALSE 45996
// begin for j in mpOilDeposits [ pos ] do
45921: LD_ADDR_VAR 0 3
45925: PUSH
45926: LD_EXP 10
45930: PUSH
45931: LD_VAR 0 8
45935: ARRAY
45936: PUSH
45937: FOR_IN
45938: IFFALSE 45994
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
45940: LD_VAR 0 3
45944: PUSH
45945: LD_INT 1
45947: ARRAY
45948: PPUSH
45949: LD_VAR 0 3
45953: PUSH
45954: LD_INT 2
45956: ARRAY
45957: PPUSH
45958: LD_INT 2
45960: PPUSH
45961: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
45965: LD_VAR 0 3
45969: PUSH
45970: LD_INT 1
45972: ARRAY
45973: PPUSH
45974: LD_VAR 0 3
45978: PUSH
45979: LD_INT 2
45981: ARRAY
45982: PPUSH
45983: LD_VAR 0 7
45987: PPUSH
45988: CALL_OW 441
// end ;
45992: GO 45937
45994: POP
45995: POP
// end ; if Count ( mpSibDeposits ) then
45996: LD_EXP 11
46000: PPUSH
46001: CALL 4610 0 1
46005: IFFALSE 46082
// begin for j in mpSibDeposits [ pos ] do
46007: LD_ADDR_VAR 0 3
46011: PUSH
46012: LD_EXP 11
46016: PUSH
46017: LD_VAR 0 8
46021: ARRAY
46022: PUSH
46023: FOR_IN
46024: IFFALSE 46080
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
46026: LD_VAR 0 3
46030: PUSH
46031: LD_INT 1
46033: ARRAY
46034: PPUSH
46035: LD_VAR 0 3
46039: PUSH
46040: LD_INT 2
46042: ARRAY
46043: PPUSH
46044: LD_INT 3
46046: PPUSH
46047: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
46051: LD_VAR 0 3
46055: PUSH
46056: LD_INT 1
46058: ARRAY
46059: PPUSH
46060: LD_VAR 0 3
46064: PUSH
46065: LD_INT 2
46067: ARRAY
46068: PPUSH
46069: LD_VAR 0 7
46073: PPUSH
46074: CALL_OW 441
// end ;
46078: GO 46023
46080: POP
46081: POP
// end ; InitBc ;
46082: CALL_OW 21
// InitUc ;
46086: CALL_OW 18
// uc_side := side ;
46090: LD_ADDR_OWVAR 20
46094: PUSH
46095: LD_VAR 0 7
46099: ST_TO_ADDR
// uc_nation := nation ;
46100: LD_ADDR_OWVAR 21
46104: PUSH
46105: LD_VAR 0 9
46109: ST_TO_ADDR
// if Count ( mpDepots ) then
46110: LD_EXP 12
46114: PPUSH
46115: CALL 4610 0 1
46119: IFFALSE 46275
// begin bc_level := 0 ;
46121: LD_ADDR_OWVAR 43
46125: PUSH
46126: LD_INT 0
46128: ST_TO_ADDR
// bc_type := b_depot ;
46129: LD_ADDR_OWVAR 42
46133: PUSH
46134: LD_INT 0
46136: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
46137: LD_ADDR_VAR 0 4
46141: PUSH
46142: LD_EXP 12
46146: PUSH
46147: LD_VAR 0 8
46151: ARRAY
46152: PUSH
46153: LD_INT 1
46155: ARRAY
46156: PPUSH
46157: LD_EXP 12
46161: PUSH
46162: LD_VAR 0 8
46166: ARRAY
46167: PUSH
46168: LD_INT 2
46170: ARRAY
46171: PPUSH
46172: LD_EXP 12
46176: PUSH
46177: LD_VAR 0 8
46181: ARRAY
46182: PUSH
46183: LD_INT 3
46185: ARRAY
46186: PPUSH
46187: CALL_OW 47
46191: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
46192: LD_VAR 0 4
46196: PPUSH
46197: LD_STRING @
46199: PUSH
46200: LD_VAR 0 7
46204: STR
46205: PPUSH
46206: CALL_OW 500
// if Count ( mpStartingResources ) then
46210: LD_EXP 13
46214: PPUSH
46215: CALL 4610 0 1
46219: IFFALSE 46273
// begin for j := 1 to mpStartingResources do
46221: LD_ADDR_VAR 0 3
46225: PUSH
46226: DOUBLE
46227: LD_INT 1
46229: DEC
46230: ST_TO_ADDR
46231: LD_EXP 13
46235: PUSH
46236: FOR_TO
46237: IFFALSE 46271
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
46239: LD_VAR 0 4
46243: PPUSH
46244: CALL_OW 274
46248: PPUSH
46249: LD_VAR 0 3
46253: PPUSH
46254: LD_EXP 13
46258: PUSH
46259: LD_VAR 0 3
46263: ARRAY
46264: PPUSH
46265: CALL_OW 277
46269: GO 46236
46271: POP
46272: POP
// end ; end else
46273: GO 46422
// if Count ( mpStartingResources ) then
46275: LD_EXP 13
46279: PPUSH
46280: CALL 4610 0 1
46284: IFFALSE 46422
// begin for j := 1 to mpStartingResources do
46286: LD_ADDR_VAR 0 3
46290: PUSH
46291: DOUBLE
46292: LD_INT 1
46294: DEC
46295: ST_TO_ADDR
46296: LD_EXP 13
46300: PUSH
46301: FOR_TO
46302: IFFALSE 46420
// begin resources := mpStartingResources [ j ] ;
46304: LD_ADDR_VAR 0 13
46308: PUSH
46309: LD_EXP 13
46313: PUSH
46314: LD_VAR 0 3
46318: ARRAY
46319: ST_TO_ADDR
// repeat if resources >= 50 then
46320: LD_VAR 0 13
46324: PUSH
46325: LD_INT 50
46327: GREATEREQUAL
46328: IFFALSE 46374
// begin CreateResourcesXYR ( j , 5 , x , y , 4 , false ) ;
46330: LD_VAR 0 3
46334: PPUSH
46335: LD_INT 5
46337: PPUSH
46338: LD_VAR 0 5
46342: PPUSH
46343: LD_VAR 0 6
46347: PPUSH
46348: LD_INT 4
46350: PPUSH
46351: LD_INT 0
46353: PPUSH
46354: CALL_OW 60
// resources := resources - 50 ;
46358: LD_ADDR_VAR 0 13
46362: PUSH
46363: LD_VAR 0 13
46367: PUSH
46368: LD_INT 50
46370: MINUS
46371: ST_TO_ADDR
// end else
46372: GO 46408
// CreateResourcesXYR ( j , resources div 10 , x , y , 4 , false ) ;
46374: LD_VAR 0 3
46378: PPUSH
46379: LD_VAR 0 13
46383: PUSH
46384: LD_INT 10
46386: DIV
46387: PPUSH
46388: LD_VAR 0 5
46392: PPUSH
46393: LD_VAR 0 6
46397: PPUSH
46398: LD_INT 4
46400: PPUSH
46401: LD_INT 0
46403: PPUSH
46404: CALL_OW 60
// until resources <= 0 ;
46408: LD_VAR 0 13
46412: PUSH
46413: LD_INT 0
46415: LESSEQUAL
46416: IFFALSE 46320
// end ;
46418: GO 46301
46420: POP
46421: POP
// end ; if Count ( mpBuildings ) then
46422: LD_EXP 15
46426: PPUSH
46427: CALL 4610 0 1
46431: IFFALSE 46509
// begin for j in mpBuildings [ pos ] do
46433: LD_ADDR_VAR 0 3
46437: PUSH
46438: LD_EXP 15
46442: PUSH
46443: LD_VAR 0 8
46447: ARRAY
46448: PUSH
46449: FOR_IN
46450: IFFALSE 46507
// begin bc_level := 0 ;
46452: LD_ADDR_OWVAR 43
46456: PUSH
46457: LD_INT 0
46459: ST_TO_ADDR
// bc_type := j [ 1 ] ;
46460: LD_ADDR_OWVAR 42
46464: PUSH
46465: LD_VAR 0 3
46469: PUSH
46470: LD_INT 1
46472: ARRAY
46473: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
46474: LD_VAR 0 3
46478: PUSH
46479: LD_INT 2
46481: ARRAY
46482: PPUSH
46483: LD_VAR 0 3
46487: PUSH
46488: LD_INT 3
46490: ARRAY
46491: PPUSH
46492: LD_VAR 0 3
46496: PUSH
46497: LD_INT 4
46499: ARRAY
46500: PPUSH
46501: CALL_OW 47
// end ;
46505: GO 46449
46507: POP
46508: POP
// end ; if mpBattleFlag > - 1 then
46509: LD_EXP 20
46513: PUSH
46514: LD_INT 1
46516: NEG
46517: GREATER
46518: IFFALSE 46677
// begin x := mpStartPos [ pos ] [ 1 ] ;
46520: LD_ADDR_VAR 0 5
46524: PUSH
46525: LD_EXP 19
46529: PUSH
46530: LD_VAR 0 8
46534: ARRAY
46535: PUSH
46536: LD_INT 1
46538: ARRAY
46539: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
46540: LD_ADDR_VAR 0 6
46544: PUSH
46545: LD_EXP 19
46549: PUSH
46550: LD_VAR 0 8
46554: ARRAY
46555: PUSH
46556: LD_INT 2
46558: ARRAY
46559: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
46560: LD_VAR 0 5
46564: PPUSH
46565: LD_VAR 0 6
46569: PPUSH
46570: LD_INT 12
46572: PPUSH
46573: LD_INT 2
46575: PPUSH
46576: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
46580: LD_ADDR_EXP 21
46584: PUSH
46585: LD_EXP 21
46589: PPUSH
46590: LD_VAR 0 7
46594: PPUSH
46595: LD_VAR 0 7
46599: PPUSH
46600: LD_VAR 0 5
46604: PPUSH
46605: LD_VAR 0 6
46609: PPUSH
46610: LD_INT 1
46612: PUSH
46613: LD_INT 100
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: PUSH
46620: LD_INT 2
46622: PUSH
46623: LD_INT 70
46625: PUSH
46626: EMPTY
46627: LIST
46628: LIST
46629: PUSH
46630: LD_INT 3
46632: PUSH
46633: LD_INT 40
46635: PUSH
46636: EMPTY
46637: LIST
46638: LIST
46639: PUSH
46640: LD_INT 10
46642: PUSH
46643: LD_INT 25
46645: PUSH
46646: EMPTY
46647: LIST
46648: LIST
46649: PUSH
46650: LD_INT 20
46652: PUSH
46653: LD_INT 100
46655: PUSH
46656: EMPTY
46657: LIST
46658: LIST
46659: PUSH
46660: EMPTY
46661: LIST
46662: LIST
46663: LIST
46664: LIST
46665: LIST
46666: PPUSH
46667: CALL_OW 418
46671: PPUSH
46672: CALL_OW 1
46676: ST_TO_ADDR
// end ; if mpApemans then
46677: LD_EXP 28
46681: IFFALSE 46760
// begin for j := 1 to mpApemans do
46683: LD_ADDR_VAR 0 3
46687: PUSH
46688: DOUBLE
46689: LD_INT 1
46691: DEC
46692: ST_TO_ADDR
46693: LD_EXP 28
46697: PUSH
46698: FOR_TO
46699: IFFALSE 46758
// begin PrepareApeman ( - 5 ) ;
46701: LD_INT 5
46703: NEG
46704: PPUSH
46705: CALL 36467 0 1
// ape := CreateHuman ;
46709: LD_ADDR_VAR 0 10
46713: PUSH
46714: CALL_OW 44
46718: ST_TO_ADDR
// SetTag ( ape , side ) ;
46719: LD_VAR 0 10
46723: PPUSH
46724: LD_VAR 0 7
46728: PPUSH
46729: CALL_OW 109
// PlaceUnitArea ( ape , mpApemansArea [ side ] , false ) ;
46733: LD_VAR 0 10
46737: PPUSH
46738: LD_EXP 29
46742: PUSH
46743: LD_VAR 0 7
46747: ARRAY
46748: PPUSH
46749: LD_INT 0
46751: PPUSH
46752: CALL_OW 49
// end ;
46756: GO 46698
46758: POP
46759: POP
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
46760: LD_EXP 24
46764: PUSH
46765: LD_INT 20
46767: PPUSH
46768: LD_VAR 0 7
46772: PPUSH
46773: CALL_OW 321
46777: PUSH
46778: LD_INT 1
46780: EQUAL
46781: AND
46782: IFFALSE 46799
// SetTech ( tech_SibDet , side , state_researched ) ;
46784: LD_INT 20
46786: PPUSH
46787: LD_VAR 0 7
46791: PPUSH
46792: LD_INT 2
46794: PPUSH
46795: CALL_OW 322
// SetTech ( tech_artifact , side , state_disabled ) ;
46799: LD_INT 24
46801: PPUSH
46802: LD_VAR 0 7
46806: PPUSH
46807: LD_INT 0
46809: PPUSH
46810: CALL_OW 322
// if mpSibBomb = 1 then
46814: LD_EXP 26
46818: PUSH
46819: LD_INT 1
46821: EQUAL
46822: IFFALSE 46841
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
46824: LD_INT 25
46826: PPUSH
46827: LD_VAR 0 7
46831: PPUSH
46832: LD_INT 1
46834: PPUSH
46835: CALL_OW 322
// end else
46839: GO 46856
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
46841: LD_INT 25
46843: PPUSH
46844: LD_VAR 0 7
46848: PPUSH
46849: LD_INT 0
46851: PPUSH
46852: CALL_OW 322
// end ; team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
46856: LD_ADDR_VAR 0 11
46860: PUSH
46861: LD_VAR 0 7
46865: PPUSH
46866: LD_VAR 0 9
46870: PPUSH
46871: LD_EXP 22
46875: PPUSH
46876: LD_EXP 23
46880: PPUSH
46881: CALL 47362 0 4
46885: ST_TO_ADDR
// for j in team do
46886: LD_ADDR_VAR 0 3
46890: PUSH
46891: LD_VAR 0 11
46895: PUSH
46896: FOR_IN
46897: IFFALSE 46946
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 9 , false ) ;
46899: LD_VAR 0 3
46903: PPUSH
46904: LD_EXP 19
46908: PUSH
46909: LD_VAR 0 8
46913: ARRAY
46914: PUSH
46915: LD_INT 1
46917: ARRAY
46918: PPUSH
46919: LD_EXP 19
46923: PUSH
46924: LD_VAR 0 8
46928: ARRAY
46929: PUSH
46930: LD_INT 2
46932: ARRAY
46933: PPUSH
46934: LD_INT 9
46936: PPUSH
46937: LD_INT 0
46939: PPUSH
46940: CALL_OW 50
46944: GO 46896
46946: POP
46947: POP
// end ;
46948: GO 45850
46950: POP
46951: POP
// if not mpTeamGame then
46952: LD_EXP 9
46956: NOT
46957: IFFALSE 47055
// begin for i := 1 to 8 do
46959: LD_ADDR_VAR 0 2
46963: PUSH
46964: DOUBLE
46965: LD_INT 1
46967: DEC
46968: ST_TO_ADDR
46969: LD_INT 8
46971: PUSH
46972: FOR_TO
46973: IFFALSE 47051
// for j := 1 to 8 do
46975: LD_ADDR_VAR 0 3
46979: PUSH
46980: DOUBLE
46981: LD_INT 1
46983: DEC
46984: ST_TO_ADDR
46985: LD_INT 8
46987: PUSH
46988: FOR_TO
46989: IFFALSE 47047
// if i <> j then
46991: LD_VAR 0 2
46995: PUSH
46996: LD_VAR 0 3
47000: NONEQUAL
47001: IFFALSE 47025
// SetAttitude ( i , j , att_neutral , true ) else
47003: LD_VAR 0 2
47007: PPUSH
47008: LD_VAR 0 3
47012: PPUSH
47013: LD_INT 0
47015: PPUSH
47016: LD_INT 1
47018: PPUSH
47019: CALL_OW 80
47023: GO 47045
// SetAttitude ( i , j , att_friend , true ) ;
47025: LD_VAR 0 2
47029: PPUSH
47030: LD_VAR 0 3
47034: PPUSH
47035: LD_INT 1
47037: PPUSH
47038: LD_INT 1
47040: PPUSH
47041: CALL_OW 80
47045: GO 46988
47047: POP
47048: POP
47049: GO 46972
47051: POP
47052: POP
// end else
47053: GO 47124
// begin if mpSharedVision then
47055: LD_EXP 14
47059: IFFALSE 47124
// begin for i in mpTeams do
47061: LD_ADDR_VAR 0 2
47065: PUSH
47066: LD_EXP 8
47070: PUSH
47071: FOR_IN
47072: IFFALSE 47122
// for j := 2 to i do
47074: LD_ADDR_VAR 0 3
47078: PUSH
47079: DOUBLE
47080: LD_INT 2
47082: DEC
47083: ST_TO_ADDR
47084: LD_VAR 0 2
47088: PUSH
47089: FOR_TO
47090: IFFALSE 47118
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
47092: LD_VAR 0 2
47096: PUSH
47097: LD_VAR 0 3
47101: ARRAY
47102: PPUSH
47103: LD_VAR 0 2
47107: PUSH
47108: LD_INT 1
47110: ARRAY
47111: PPUSH
47112: CALL_OW 343
47116: GO 47089
47118: POP
47119: POP
47120: GO 47071
47122: POP
47123: POP
// end ; end ; for i := 1 to 8 do
47124: LD_ADDR_VAR 0 2
47128: PUSH
47129: DOUBLE
47130: LD_INT 1
47132: DEC
47133: ST_TO_ADDR
47134: LD_INT 8
47136: PUSH
47137: FOR_TO
47138: IFFALSE 47228
// for j := 1 to 8 do
47140: LD_ADDR_VAR 0 3
47144: PUSH
47145: DOUBLE
47146: LD_INT 1
47148: DEC
47149: ST_TO_ADDR
47150: LD_INT 8
47152: PUSH
47153: FOR_TO
47154: IFFALSE 47224
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
47156: LD_EXP 6
47160: PUSH
47161: LD_VAR 0 2
47165: ARRAY
47166: PUSH
47167: LD_EXP 6
47171: PUSH
47172: LD_VAR 0 3
47176: ARRAY
47177: EQUAL
47178: IFFALSE 47202
// SetAttitude ( i , j , att_friend , true ) else
47180: LD_VAR 0 2
47184: PPUSH
47185: LD_VAR 0 3
47189: PPUSH
47190: LD_INT 1
47192: PPUSH
47193: LD_INT 1
47195: PPUSH
47196: CALL_OW 80
47200: GO 47222
// SetAttitude ( i , j , att_enemy , true ) ;
47202: LD_VAR 0 2
47206: PPUSH
47207: LD_VAR 0 3
47211: PPUSH
47212: LD_INT 2
47214: PPUSH
47215: LD_INT 1
47217: PPUSH
47218: CALL_OW 80
47222: GO 47153
47224: POP
47225: POP
47226: GO 47137
47228: POP
47229: POP
// music_nat := mpSideNations [ your_side ] ;
47230: LD_ADDR_OWVAR 71
47234: PUSH
47235: LD_EXP 7
47239: PUSH
47240: LD_OWVAR 2
47244: ARRAY
47245: ST_TO_ADDR
// if IAmSpec then
47246: CALL_OW 531
47250: IFFALSE 47291
// begin FogOff ( true ) ;
47252: LD_INT 1
47254: PPUSH
47255: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
47259: LD_EXP 27
47263: PUSH
47264: LD_INT 1
47266: ARRAY
47267: PUSH
47268: LD_INT 2
47270: DIV
47271: PPUSH
47272: LD_EXP 27
47276: PUSH
47277: LD_INT 2
47279: ARRAY
47280: PUSH
47281: LD_INT 2
47283: DIV
47284: PPUSH
47285: CALL_OW 86
// end else
47289: GO 47337
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
47291: LD_EXP 19
47295: PUSH
47296: LD_EXP 5
47300: PUSH
47301: LD_OWVAR 2
47305: ARRAY
47306: ARRAY
47307: PUSH
47308: LD_INT 1
47310: ARRAY
47311: PPUSH
47312: LD_EXP 19
47316: PUSH
47317: LD_EXP 5
47321: PUSH
47322: LD_OWVAR 2
47326: ARRAY
47327: ARRAY
47328: PUSH
47329: LD_INT 2
47331: ARRAY
47332: PPUSH
47333: CALL_OW 86
// end ; BeginBuildUp ;
47337: CALL 47901 0 0
// enable ( mpActive ) ;
47341: LD_INT 100
47343: ENABLE_MARKED
// enable ( mpGameType ) ;
47344: LD_EXP 1
47348: ENABLE_MARKED
// mpGameActive := true ;
47349: LD_ADDR_EXP 34
47353: PUSH
47354: LD_INT 1
47356: ST_TO_ADDR
// end ;
47357: LD_VAR 0 1
47361: RET
// function mpPrepareTeam ( side , nation , amount , skill ) ; var i , d , class ; begin
47362: LD_INT 0
47364: PPUSH
47365: PPUSH
47366: PPUSH
47367: PPUSH
// result := [ ] ;
47368: LD_ADDR_VAR 0 5
47372: PUSH
47373: EMPTY
47374: ST_TO_ADDR
// class := class_soldier ;
47375: LD_ADDR_VAR 0 8
47379: PUSH
47380: LD_INT 1
47382: ST_TO_ADDR
// uc_side := side ;
47383: LD_ADDR_OWVAR 20
47387: PUSH
47388: LD_VAR 0 1
47392: ST_TO_ADDR
// uc_nation := nation ;
47393: LD_ADDR_OWVAR 21
47397: PUSH
47398: LD_VAR 0 2
47402: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
47403: LD_ADDR_OWVAR 26
47407: PUSH
47408: LD_OWVAR 19
47412: PUSH
47413: LD_VAR 0 1
47417: ARRAY
47418: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
47419: LD_INT 1
47421: PPUSH
47422: LD_INT 2
47424: PPUSH
47425: CALL_OW 12
47429: PPUSH
47430: LD_VAR 0 8
47434: PPUSH
47435: LD_VAR 0 4
47439: PUSH
47440: LD_INT 2
47442: PLUS
47443: PPUSH
47444: CALL_OW 380
// hc_importance := 105 ;
47448: LD_ADDR_OWVAR 32
47452: PUSH
47453: LD_INT 105
47455: ST_TO_ADDR
// if Multiplayer then
47456: LD_OWVAR 4
47460: IFFALSE 47500
// begin hc_gallery := MULTIAVATARS ;
47462: LD_ADDR_OWVAR 33
47466: PUSH
47467: LD_STRING MULTIAVATARS
47469: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
47470: LD_ADDR_OWVAR 34
47474: PUSH
47475: LD_VAR 0 1
47479: PPUSH
47480: CALL_OW 525
47484: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
47485: LD_ADDR_OWVAR 27
47489: PUSH
47490: LD_VAR 0 1
47494: PPUSH
47495: CALL_OW 526
47499: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
47500: LD_ADDR_VAR 0 5
47504: PUSH
47505: LD_VAR 0 5
47509: PPUSH
47510: CALL_OW 44
47514: PPUSH
47515: CALL 40199 0 2
47519: ST_TO_ADDR
// InitHc_All ( ) ;
47520: CALL_OW 584
// d := ( amount div 4 ) + 1 ;
47524: LD_ADDR_VAR 0 7
47528: PUSH
47529: LD_VAR 0 3
47533: PUSH
47534: LD_INT 4
47536: DIV
47537: PUSH
47538: LD_INT 1
47540: PLUS
47541: ST_TO_ADDR
// for i := 2 to amount do
47542: LD_ADDR_VAR 0 6
47546: PUSH
47547: DOUBLE
47548: LD_INT 2
47550: DEC
47551: ST_TO_ADDR
47552: LD_VAR 0 3
47556: PUSH
47557: FOR_TO
47558: IFFALSE 47630
// begin if i mod d = 0 then
47560: LD_VAR 0 6
47564: PUSH
47565: LD_VAR 0 7
47569: MOD
47570: PUSH
47571: LD_INT 0
47573: EQUAL
47574: IFFALSE 47591
// class := Inc ( class ) ;
47576: LD_ADDR_VAR 0 8
47580: PUSH
47581: LD_VAR 0 8
47585: PPUSH
47586: CALL 41560 0 1
47590: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
47591: LD_INT 0
47593: PPUSH
47594: LD_VAR 0 8
47598: PPUSH
47599: LD_VAR 0 4
47603: PPUSH
47604: CALL_OW 380
// result := Join ( result , CreateHuman ) ;
47608: LD_ADDR_VAR 0 5
47612: PUSH
47613: LD_VAR 0 5
47617: PPUSH
47618: CALL_OW 44
47622: PPUSH
47623: CALL 40199 0 2
47627: ST_TO_ADDR
// end ;
47628: GO 47557
47630: POP
47631: POP
// end ;
47632: LD_VAR 0 5
47636: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
47637: LD_INT 0
47639: PPUSH
47640: PPUSH
// for i in mpBattleFlags do
47641: LD_ADDR_VAR 0 3
47645: PUSH
47646: LD_EXP 21
47650: PUSH
47651: FOR_IN
47652: IFFALSE 47729
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
47654: LD_VAR 0 3
47658: PPUSH
47659: LD_INT 1
47661: PUSH
47662: LD_VAR 0 1
47666: PUSH
47667: EMPTY
47668: LIST
47669: LIST
47670: PUSH
47671: LD_INT 2
47673: PUSH
47674: LD_VAR 0 1
47678: PUSH
47679: LD_REAL  7.00000000000000E-0001
47682: MUL
47683: PUSH
47684: EMPTY
47685: LIST
47686: LIST
47687: PUSH
47688: LD_INT 3
47690: PUSH
47691: LD_VAR 0 1
47695: PUSH
47696: LD_REAL  4.00000000000000E-0001
47699: MUL
47700: PUSH
47701: EMPTY
47702: LIST
47703: LIST
47704: PUSH
47705: LD_INT 20
47707: PUSH
47708: LD_VAR 0 1
47712: PUSH
47713: EMPTY
47714: LIST
47715: LIST
47716: PUSH
47717: EMPTY
47718: LIST
47719: LIST
47720: LIST
47721: LIST
47722: PPUSH
47723: CALL_OW 423
47727: GO 47651
47729: POP
47730: POP
// end ;
47731: LD_VAR 0 2
47735: RET
// every 0 0$1 trigger mpActive do var i , strength ;
47736: LD_INT 100
47738: IFFALSE 47833
47740: GO 47742
47742: DISABLE
47743: LD_INT 0
47745: PPUSH
47746: PPUSH
// begin if mpBattleFlag <= 0 then
47747: LD_EXP 20
47751: PUSH
47752: LD_INT 0
47754: LESSEQUAL
47755: IFFALSE 47759
// exit ;
47757: GO 47833
// strength := 100 ;
47759: LD_ADDR_VAR 0 2
47763: PUSH
47764: LD_INT 100
47766: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
47767: LD_EXP 20
47771: PPUSH
47772: CALL_OW 67
// strength := Dec ( strength ) ;
47776: LD_ADDR_VAR 0 2
47780: PUSH
47781: LD_VAR 0 2
47785: PPUSH
47786: CALL 41582 0 1
47790: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
47791: LD_VAR 0 2
47795: PPUSH
47796: CALL 47637 0 1
// until not strength ;
47800: LD_VAR 0 2
47804: NOT
47805: IFFALSE 47767
// for i in mpBattleFlags do
47807: LD_ADDR_VAR 0 1
47811: PUSH
47812: LD_EXP 21
47816: PUSH
47817: FOR_IN
47818: IFFALSE 47831
// KillBattleFlag ( i ) ;
47820: LD_VAR 0 1
47824: PPUSH
47825: CALL_OW 419
47829: GO 47817
47831: POP
47832: POP
// end ;
47833: PPOPN 2
47835: END
// every 0 0$1 marked mpActive do var side ;
47836: GO 47838
47838: DISABLE
47839: LD_INT 0
47841: PPUSH
// begin if mpSibBomb <= 1 then
47842: LD_EXP 26
47846: PUSH
47847: LD_INT 1
47849: LESSEQUAL
47850: IFFALSE 47854
// exit ;
47852: GO 47898
// wait ( mpSibBomb ) ;
47854: LD_EXP 26
47858: PPUSH
47859: CALL_OW 67
// for side := 1 to 8 do
47863: LD_ADDR_VAR 0 1
47867: PUSH
47868: DOUBLE
47869: LD_INT 1
47871: DEC
47872: ST_TO_ADDR
47873: LD_INT 8
47875: PUSH
47876: FOR_TO
47877: IFFALSE 47896
// SetTech ( tech_SibFiss , side , state_enabled ) ;
47879: LD_INT 25
47881: PPUSH
47882: LD_VAR 0 1
47886: PPUSH
47887: LD_INT 1
47889: PPUSH
47890: CALL_OW 322
47894: GO 47876
47896: POP
47897: POP
// end ;
47898: PPOPN 1
47900: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
47901: LD_INT 0
47903: PPUSH
47904: PPUSH
47905: PPUSH
// mpBuildUpTimeDelay := 0 ;
47906: LD_ADDR_EXP 35
47910: PUSH
47911: LD_INT 0
47913: ST_TO_ADDR
// if not mpBuildUpTime then
47914: LD_EXP 18
47918: NOT
47919: IFFALSE 47923
// exit ;
47921: GO 48106
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
47923: LD_ADDR_EXP 35
47927: PUSH
47928: LD_INT 8400
47930: PUSH
47931: LD_INT 2100
47933: PUSH
47934: LD_EXP 18
47938: MUL
47939: PLUS
47940: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
47941: LD_ADDR_EXP 36
47945: PUSH
47946: LD_INT 1
47948: ST_TO_ADDR
// for i := 1 to 8 do
47949: LD_ADDR_VAR 0 2
47953: PUSH
47954: DOUBLE
47955: LD_INT 1
47957: DEC
47958: ST_TO_ADDR
47959: LD_INT 8
47961: PUSH
47962: FOR_TO
47963: IFFALSE 48104
// if mpSidePositions [ i ] then
47965: LD_EXP 5
47969: PUSH
47970: LD_VAR 0 2
47974: ARRAY
47975: IFFALSE 48102
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
47977: LD_EXP 17
47981: PUSH
47982: LD_EXP 5
47986: PUSH
47987: LD_VAR 0 2
47991: ARRAY
47992: ARRAY
47993: PPUSH
47994: LD_INT 5
47996: PPUSH
47997: CALL_OW 424
// for j := 1 to 8 do
48001: LD_ADDR_VAR 0 3
48005: PUSH
48006: DOUBLE
48007: LD_INT 1
48009: DEC
48010: ST_TO_ADDR
48011: LD_INT 8
48013: PUSH
48014: FOR_TO
48015: IFFALSE 48100
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
48017: LD_EXP 5
48021: PUSH
48022: LD_VAR 0 3
48026: ARRAY
48027: PUSH
48028: LD_EXP 6
48032: PUSH
48033: LD_VAR 0 2
48037: ARRAY
48038: PUSH
48039: LD_EXP 6
48043: PUSH
48044: LD_VAR 0 3
48048: ARRAY
48049: NONEQUAL
48050: PUSH
48051: LD_EXP 9
48055: NOT
48056: PUSH
48057: LD_VAR 0 2
48061: PUSH
48062: LD_VAR 0 3
48066: NONEQUAL
48067: AND
48068: OR
48069: AND
48070: IFFALSE 48098
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
48072: LD_VAR 0 3
48076: PPUSH
48077: LD_EXP 17
48081: PUSH
48082: LD_EXP 5
48086: PUSH
48087: LD_VAR 0 2
48091: ARRAY
48092: ARRAY
48093: PPUSH
48094: CALL_OW 333
48098: GO 48014
48100: POP
48101: POP
// end ;
48102: GO 47962
48104: POP
48105: POP
// end ;
48106: LD_VAR 0 1
48110: RET
// function EndBuildUp ; var i , j ; begin
48111: LD_INT 0
48113: PPUSH
48114: PPUSH
48115: PPUSH
// mpBuildUpTimeActive := false ;
48116: LD_ADDR_EXP 36
48120: PUSH
48121: LD_INT 0
48123: ST_TO_ADDR
// for i := 1 to 8 do
48124: LD_ADDR_VAR 0 2
48128: PUSH
48129: DOUBLE
48130: LD_INT 1
48132: DEC
48133: ST_TO_ADDR
48134: LD_INT 8
48136: PUSH
48137: FOR_TO
48138: IFFALSE 48279
// if mpSidePositions [ i ] then
48140: LD_EXP 5
48144: PUSH
48145: LD_VAR 0 2
48149: ARRAY
48150: IFFALSE 48277
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
48152: LD_EXP 17
48156: PUSH
48157: LD_EXP 5
48161: PUSH
48162: LD_VAR 0 2
48166: ARRAY
48167: ARRAY
48168: PPUSH
48169: LD_INT 0
48171: PPUSH
48172: CALL_OW 424
// for j := 1 to 8 do
48176: LD_ADDR_VAR 0 3
48180: PUSH
48181: DOUBLE
48182: LD_INT 1
48184: DEC
48185: ST_TO_ADDR
48186: LD_INT 8
48188: PUSH
48189: FOR_TO
48190: IFFALSE 48275
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
48192: LD_EXP 5
48196: PUSH
48197: LD_VAR 0 3
48201: ARRAY
48202: PUSH
48203: LD_EXP 6
48207: PUSH
48208: LD_VAR 0 2
48212: ARRAY
48213: PUSH
48214: LD_EXP 6
48218: PUSH
48219: LD_VAR 0 3
48223: ARRAY
48224: NONEQUAL
48225: PUSH
48226: LD_EXP 9
48230: NOT
48231: PUSH
48232: LD_VAR 0 2
48236: PUSH
48237: LD_VAR 0 3
48241: NONEQUAL
48242: AND
48243: OR
48244: AND
48245: IFFALSE 48273
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
48247: LD_VAR 0 3
48251: PPUSH
48252: LD_EXP 17
48256: PUSH
48257: LD_EXP 5
48261: PUSH
48262: LD_VAR 0 2
48266: ARRAY
48267: ARRAY
48268: PPUSH
48269: CALL_OW 334
48273: GO 48189
48275: POP
48276: POP
// end ;
48277: GO 48137
48279: POP
48280: POP
// end ;
48281: LD_VAR 0 1
48285: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
48286: LD_EXP 36
48290: IFFALSE 48465
48292: GO 48294
48294: DISABLE
48295: LD_INT 0
48297: PPUSH
48298: PPUSH
// begin for i := 1 to 8 do
48299: LD_ADDR_VAR 0 1
48303: PUSH
48304: DOUBLE
48305: LD_INT 1
48307: DEC
48308: ST_TO_ADDR
48309: LD_INT 8
48311: PUSH
48312: FOR_TO
48313: IFFALSE 48462
// if mpSidePositions [ i ] then
48315: LD_EXP 5
48319: PUSH
48320: LD_VAR 0 1
48324: ARRAY
48325: IFFALSE 48460
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
48327: LD_ADDR_VAR 0 2
48331: PUSH
48332: LD_EXP 17
48336: PUSH
48337: LD_EXP 5
48341: PUSH
48342: LD_VAR 0 1
48346: ARRAY
48347: ARRAY
48348: PPUSH
48349: LD_INT 2
48351: PUSH
48352: LD_INT 21
48354: PUSH
48355: LD_INT 1
48357: PUSH
48358: EMPTY
48359: LIST
48360: LIST
48361: PUSH
48362: LD_INT 21
48364: PUSH
48365: LD_INT 2
48367: PUSH
48368: EMPTY
48369: LIST
48370: LIST
48371: PUSH
48372: EMPTY
48373: LIST
48374: LIST
48375: LIST
48376: PUSH
48377: LD_INT 22
48379: PUSH
48380: LD_OWVAR 2
48384: PUSH
48385: EMPTY
48386: LIST
48387: LIST
48388: PUSH
48389: EMPTY
48390: LIST
48391: LIST
48392: PPUSH
48393: CALL_OW 70
48397: PUSH
48398: FOR_IN
48399: IFFALSE 48458
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
48401: LD_EXP 6
48405: PUSH
48406: LD_VAR 0 1
48410: ARRAY
48411: PUSH
48412: LD_EXP 6
48416: PUSH
48417: LD_OWVAR 2
48421: ARRAY
48422: NONEQUAL
48423: PUSH
48424: LD_EXP 9
48428: NOT
48429: PUSH
48430: LD_VAR 0 1
48434: PUSH
48435: LD_OWVAR 2
48439: NONEQUAL
48440: AND
48441: OR
48442: IFFALSE 48456
// ComMoveToArea ( un , BuildUpEscape ) ;
48444: LD_VAR 0 2
48448: PPUSH
48449: LD_INT 17
48451: PPUSH
48452: CALL_OW 113
48456: GO 48398
48458: POP
48459: POP
48460: GO 48312
48462: POP
48463: POP
// enable ;
48464: ENABLE
// end ;
48465: PPOPN 2
48467: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do
48468: LD_EXP 18
48472: IFFALSE 48498
48474: GO 48476
48476: DISABLE
// begin wait ( 4 4$00 + ( mpBuildUpTime * 1 1$00 ) ) ;
48477: LD_INT 8400
48479: PUSH
48480: LD_EXP 18
48484: PUSH
48485: LD_INT 2100
48487: MUL
48488: PLUS
48489: PPUSH
48490: CALL_OW 67
// EndBuildUp ;
48494: CALL 48111 0 0
// end ;
48498: END
// every 0 0$1 trigger mpActive marked mpWin do
48499: LD_INT 100
48501: IFFALSE 48522
48503: GO 48505
48505: DISABLE
// begin if Multiplayer then
48506: LD_OWVAR 4
48510: IFFALSE 48518
// YouWinInMultiplayer else
48512: CALL_OW 106
48516: GO 48522
// YouWin ;
48518: CALL_OW 103
// end ;
48522: END
// every 0 0$1 trigger mpActive marked mpLose do
48523: LD_INT 100
48525: IFFALSE 48549
48527: GO 48529
48529: DISABLE
// begin if Multiplayer then
48530: LD_OWVAR 4
48534: IFFALSE 48542
// YouLostInMultiplayer else
48536: CALL_OW 107
48540: GO 48549
// YouLost (  ) ;
48542: LD_STRING 
48544: PPUSH
48545: CALL_OW 104
// end ;
48549: END
// every 0 0$1 marked mpActive do
48550: GO 48552
48552: DISABLE
// begin enable ;
48553: ENABLE
// if not mpDisplayStrings then
48554: LD_EXP 33
48558: NOT
48559: IFFALSE 48570
// begin display_strings := [ ] ;
48561: LD_ADDR_OWVAR 47
48565: PUSH
48566: EMPTY
48567: ST_TO_ADDR
// exit ;
48568: GO 48580
// end ; display_strings := mpDisplayStrings ;
48570: LD_ADDR_OWVAR 47
48574: PUSH
48575: LD_EXP 33
48579: ST_TO_ADDR
// end ; end_of_file
48580: END
// export function Multiplayer_UnitDestroyed ( un ) ; var ape , tag , area , side , tmp ; begin
48581: LD_INT 0
48583: PPUSH
48584: PPUSH
48585: PPUSH
48586: PPUSH
48587: PPUSH
48588: PPUSH
// if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
48589: LD_VAR 0 1
48593: PPUSH
48594: CALL_OW 257
48598: PUSH
48599: LD_INT 12
48601: PUSH
48602: LD_INT 17
48604: PUSH
48605: LD_INT 15
48607: PUSH
48608: LD_INT 16
48610: PUSH
48611: EMPTY
48612: LIST
48613: LIST
48614: LIST
48615: LIST
48616: IN
48617: PUSH
48618: LD_VAR 0 1
48622: PPUSH
48623: CALL_OW 263
48627: PUSH
48628: LD_INT 5
48630: EQUAL
48631: OR
48632: IFFALSE 48721
// begin tag := GetTag ( un ) ;
48634: LD_ADDR_VAR 0 4
48638: PUSH
48639: LD_VAR 0 1
48643: PPUSH
48644: CALL_OW 110
48648: ST_TO_ADDR
// area := mpApemansArea [ tag ] ;
48649: LD_ADDR_VAR 0 5
48653: PUSH
48654: LD_EXP 29
48658: PUSH
48659: LD_VAR 0 4
48663: ARRAY
48664: ST_TO_ADDR
// wait ( 4 4$00 ) ;
48665: LD_INT 8400
48667: PPUSH
48668: CALL_OW 67
// PrepareApeman ( - 5 ) ;
48672: LD_INT 5
48674: NEG
48675: PPUSH
48676: CALL 36467 0 1
// ape := CreateHuman ;
48680: LD_ADDR_VAR 0 3
48684: PUSH
48685: CALL_OW 44
48689: ST_TO_ADDR
// SetTag ( ape , tag ) ;
48690: LD_VAR 0 3
48694: PPUSH
48695: LD_VAR 0 4
48699: PPUSH
48700: CALL_OW 109
// PlaceUnitArea ( ape , area , false ) ;
48704: LD_VAR 0 3
48708: PPUSH
48709: LD_VAR 0 5
48713: PPUSH
48714: LD_INT 0
48716: PPUSH
48717: CALL_OW 49
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
48721: LD_VAR 0 1
48725: PPUSH
48726: CALL_OW 247
48730: PUSH
48731: LD_INT 1
48733: EQUAL
48734: PUSH
48735: LD_VAR 0 1
48739: PPUSH
48740: CALL_OW 248
48744: PUSH
48745: LD_INT 0
48747: GREATER
48748: AND
48749: IFFALSE 48968
// begin if not mpRespawn then
48751: LD_EXP 30
48755: NOT
48756: IFFALSE 48760
// exit ;
48758: GO 48968
// side := GetSide ( un ) ;
48760: LD_ADDR_VAR 0 6
48764: PUSH
48765: LD_VAR 0 1
48769: PPUSH
48770: CALL_OW 255
48774: ST_TO_ADDR
// wait ( mpRespawn ) ;
48775: LD_EXP 30
48779: PPUSH
48780: CALL_OW 67
// if not MultiplayerSideAlive ( side ) then
48784: LD_VAR 0 6
48788: PPUSH
48789: CALL_OW 108
48793: NOT
48794: IFFALSE 48798
// exit ;
48796: GO 48968
// uc_side := side ;
48798: LD_ADDR_OWVAR 20
48802: PUSH
48803: LD_VAR 0 6
48807: ST_TO_ADDR
// uc_nation := GetNation ( un ) ;
48808: LD_ADDR_OWVAR 21
48812: PUSH
48813: LD_VAR 0 1
48817: PPUSH
48818: CALL_OW 248
48822: ST_TO_ADDR
// PrepareHuman ( GetSex ( un ) , GetClass ( un ) , 2 ) ;
48823: LD_VAR 0 1
48827: PPUSH
48828: CALL_OW 258
48832: PPUSH
48833: LD_VAR 0 1
48837: PPUSH
48838: CALL_OW 257
48842: PPUSH
48843: LD_INT 2
48845: PPUSH
48846: CALL_OW 380
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
48850: LD_ADDR_VAR 0 7
48854: PUSH
48855: LD_INT 22
48857: PUSH
48858: LD_VAR 0 6
48862: PUSH
48863: EMPTY
48864: LIST
48865: LIST
48866: PUSH
48867: LD_INT 2
48869: PUSH
48870: LD_INT 30
48872: PUSH
48873: LD_INT 0
48875: PUSH
48876: EMPTY
48877: LIST
48878: LIST
48879: PUSH
48880: LD_INT 30
48882: PUSH
48883: LD_INT 1
48885: PUSH
48886: EMPTY
48887: LIST
48888: LIST
48889: PUSH
48890: EMPTY
48891: LIST
48892: LIST
48893: LIST
48894: PUSH
48895: EMPTY
48896: LIST
48897: LIST
48898: PPUSH
48899: CALL_OW 69
48903: ST_TO_ADDR
// if not tmp then
48904: LD_VAR 0 7
48908: NOT
48909: IFFALSE 48925
// PlaceUnitAnywhere ( CreateHuman , true ) else
48911: CALL_OW 44
48915: PPUSH
48916: LD_INT 1
48918: PPUSH
48919: CALL_OW 51
48923: GO 48968
// PlaceUnitXYR ( CreateHuman , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 20 , true ) ;
48925: CALL_OW 44
48929: PPUSH
48930: LD_VAR 0 7
48934: PUSH
48935: LD_INT 1
48937: ARRAY
48938: PPUSH
48939: CALL_OW 250
48943: PPUSH
48944: LD_VAR 0 7
48948: PUSH
48949: LD_INT 1
48951: ARRAY
48952: PPUSH
48953: CALL_OW 251
48957: PPUSH
48958: LD_INT 20
48960: PPUSH
48961: LD_INT 1
48963: PPUSH
48964: CALL_OW 50
// end ; end ; end_of_file
48968: LD_VAR 0 2
48972: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
48973: LD_EXP 34
48977: PUSH
48978: CALL 49163 0 0
48982: AND
48983: PUSH
48984: LD_OWVAR 4
48988: AND
48989: IFFALSE 49160
48991: GO 48993
48993: DISABLE
48994: LD_INT 0
48996: PPUSH
48997: PPUSH
// begin canWin := false ;
48998: LD_ADDR_VAR 0 2
49002: PUSH
49003: LD_INT 0
49005: ST_TO_ADDR
// if not HasPower ( your_side ) then
49006: LD_OWVAR 2
49010: PPUSH
49011: CALL 49227 0 1
49015: NOT
49016: IFFALSE 49027
// begin Multiplayer_Loose_Message ;
49018: CALL_OW 521
// enable ( mpLose ) ;
49022: LD_INT 102
49024: ENABLE_MARKED
// end else
49025: GO 49160
// begin canWin := true ;
49027: LD_ADDR_VAR 0 2
49031: PUSH
49032: LD_INT 1
49034: ST_TO_ADDR
// for i := 1 to 8 do
49035: LD_ADDR_VAR 0 1
49039: PUSH
49040: DOUBLE
49041: LD_INT 1
49043: DEC
49044: ST_TO_ADDR
49045: LD_INT 8
49047: PUSH
49048: FOR_TO
49049: IFFALSE 49146
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
49051: LD_EXP 5
49055: PUSH
49056: LD_VAR 0 1
49060: ARRAY
49061: PUSH
49062: LD_VAR 0 1
49066: PPUSH
49067: CALL_OW 108
49071: AND
49072: PUSH
49073: LD_VAR 0 1
49077: PUSH
49078: LD_OWVAR 2
49082: NONEQUAL
49083: AND
49084: IFFALSE 49144
// if not mpSideTeams [ i ] or ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) then
49086: LD_EXP 6
49090: PUSH
49091: LD_VAR 0 1
49095: ARRAY
49096: NOT
49097: PUSH
49098: LD_EXP 6
49102: PUSH
49103: LD_VAR 0 1
49107: ARRAY
49108: PUSH
49109: LD_EXP 6
49113: PUSH
49114: LD_OWVAR 2
49118: ARRAY
49119: NONEQUAL
49120: OR
49121: IFFALSE 49144
// if HasPower ( i ) then
49123: LD_VAR 0 1
49127: PPUSH
49128: CALL 49227 0 1
49132: IFFALSE 49144
// begin canWin := false ;
49134: LD_ADDR_VAR 0 2
49138: PUSH
49139: LD_INT 0
49141: ST_TO_ADDR
// break ;
49142: GO 49146
// end ;
49144: GO 49048
49146: POP
49147: POP
// if canWin then
49148: LD_VAR 0 2
49152: IFFALSE 49159
// enable ( mpWin ) else
49154: LD_INT 101
49156: ENABLE_MARKED
49157: GO 49160
// enable ;
49159: ENABLE
// end ; end ;
49160: PPOPN 2
49162: END
// function CanWinLoose ; begin
49163: LD_INT 0
49165: PPUSH
// result := true ;
49166: LD_ADDR_VAR 0 1
49170: PUSH
49171: LD_INT 1
49173: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
49174: CALL_OW 518
49178: PUSH
49179: CALL_OW 519
49183: PUSH
49184: LD_INT 0
49186: GREATER
49187: AND
49188: IFFALSE 49198
// result := false ;
49190: LD_ADDR_VAR 0 1
49194: PUSH
49195: LD_INT 0
49197: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
49198: CALL_OW 531
49202: PUSH
49203: CALL_OW 519
49207: PUSH
49208: LD_INT 1
49210: GREATER
49211: AND
49212: IFFALSE 49222
// result := false ;
49214: LD_ADDR_VAR 0 1
49218: PUSH
49219: LD_INT 0
49221: ST_TO_ADDR
// end ;
49222: LD_VAR 0 1
49226: RET
// function HasPower ( i ) ; begin
49227: LD_INT 0
49229: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
49230: LD_ADDR_VAR 0 2
49234: PUSH
49235: LD_INT 22
49237: PUSH
49238: LD_VAR 0 1
49242: PUSH
49243: EMPTY
49244: LIST
49245: LIST
49246: PUSH
49247: LD_INT 2
49249: PUSH
49250: LD_INT 21
49252: PUSH
49253: LD_INT 1
49255: PUSH
49256: EMPTY
49257: LIST
49258: LIST
49259: PUSH
49260: LD_INT 33
49262: PUSH
49263: LD_INT 3
49265: PUSH
49266: EMPTY
49267: LIST
49268: LIST
49269: PUSH
49270: LD_INT 33
49272: PUSH
49273: LD_INT 5
49275: PUSH
49276: EMPTY
49277: LIST
49278: LIST
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: LIST
49284: LIST
49285: PUSH
49286: EMPTY
49287: LIST
49288: LIST
49289: PPUSH
49290: CALL_OW 69
49294: ST_TO_ADDR
// end ; end_of_file
49295: LD_VAR 0 2
49299: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
49300: LD_EXP 34
49304: IFFALSE 49347
49306: GO 49308
49308: DISABLE
49309: LD_INT 0
49311: PPUSH
// begin for i := 1 to 8 do
49312: LD_ADDR_VAR 0 1
49316: PUSH
49317: DOUBLE
49318: LD_INT 1
49320: DEC
49321: ST_TO_ADDR
49322: LD_INT 8
49324: PUSH
49325: FOR_TO
49326: IFFALSE 49345
// SetRestrict ( b_depot , i , state_disabled ) ;
49328: LD_INT 0
49330: PPUSH
49331: LD_VAR 0 1
49335: PPUSH
49336: LD_INT 0
49338: PPUSH
49339: CALL_OW 324
49343: GO 49325
49345: POP
49346: POP
// end ;
49347: PPOPN 1
49349: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
49350: LD_EXP 34
49354: PUSH
49355: CALL 49540 0 0
49359: AND
49360: PUSH
49361: LD_OWVAR 4
49365: AND
49366: IFFALSE 49537
49368: GO 49370
49370: DISABLE
49371: LD_INT 0
49373: PPUSH
49374: PPUSH
// begin canWin := false ;
49375: LD_ADDR_VAR 0 2
49379: PUSH
49380: LD_INT 0
49382: ST_TO_ADDR
// if not HasPower ( your_side ) then
49383: LD_OWVAR 2
49387: PPUSH
49388: CALL 49604 0 1
49392: NOT
49393: IFFALSE 49404
// begin Multiplayer_Loose_Message ;
49395: CALL_OW 521
// enable ( mpLose ) ;
49399: LD_INT 102
49401: ENABLE_MARKED
// end else
49402: GO 49537
// begin canWin := true ;
49404: LD_ADDR_VAR 0 2
49408: PUSH
49409: LD_INT 1
49411: ST_TO_ADDR
// for i := 1 to 8 do
49412: LD_ADDR_VAR 0 1
49416: PUSH
49417: DOUBLE
49418: LD_INT 1
49420: DEC
49421: ST_TO_ADDR
49422: LD_INT 8
49424: PUSH
49425: FOR_TO
49426: IFFALSE 49523
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
49428: LD_EXP 5
49432: PUSH
49433: LD_VAR 0 1
49437: ARRAY
49438: PUSH
49439: LD_VAR 0 1
49443: PPUSH
49444: CALL_OW 108
49448: AND
49449: PUSH
49450: LD_VAR 0 1
49454: PUSH
49455: LD_OWVAR 2
49459: NONEQUAL
49460: AND
49461: IFFALSE 49521
// if not mpSideTeams [ i ] or ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) then
49463: LD_EXP 6
49467: PUSH
49468: LD_VAR 0 1
49472: ARRAY
49473: NOT
49474: PUSH
49475: LD_EXP 6
49479: PUSH
49480: LD_VAR 0 1
49484: ARRAY
49485: PUSH
49486: LD_EXP 6
49490: PUSH
49491: LD_OWVAR 2
49495: ARRAY
49496: NONEQUAL
49497: OR
49498: IFFALSE 49521
// if HasPower ( i ) then
49500: LD_VAR 0 1
49504: PPUSH
49505: CALL 49604 0 1
49509: IFFALSE 49521
// begin canWin := false ;
49511: LD_ADDR_VAR 0 2
49515: PUSH
49516: LD_INT 0
49518: ST_TO_ADDR
// break ;
49519: GO 49523
// end ;
49521: GO 49425
49523: POP
49524: POP
// if canWin then
49525: LD_VAR 0 2
49529: IFFALSE 49536
// enable ( mpWin ) else
49531: LD_INT 101
49533: ENABLE_MARKED
49534: GO 49537
// enable ;
49536: ENABLE
// end ; end ;
49537: PPOPN 2
49539: END
// function CanWinLoose ; begin
49540: LD_INT 0
49542: PPUSH
// result := true ;
49543: LD_ADDR_VAR 0 1
49547: PUSH
49548: LD_INT 1
49550: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
49551: CALL_OW 518
49555: PUSH
49556: CALL_OW 519
49560: PUSH
49561: LD_INT 0
49563: GREATER
49564: AND
49565: IFFALSE 49575
// result := false ;
49567: LD_ADDR_VAR 0 1
49571: PUSH
49572: LD_INT 0
49574: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
49575: CALL_OW 531
49579: PUSH
49580: CALL_OW 519
49584: PUSH
49585: LD_INT 1
49587: GREATER
49588: AND
49589: IFFALSE 49599
// result := false ;
49591: LD_ADDR_VAR 0 1
49595: PUSH
49596: LD_INT 0
49598: ST_TO_ADDR
// end ;
49599: LD_VAR 0 1
49603: RET
// function HasPower ( i ) ; begin
49604: LD_INT 0
49606: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
49607: LD_INT 22
49609: PUSH
49610: LD_VAR 0 1
49614: PUSH
49615: EMPTY
49616: LIST
49617: LIST
49618: PUSH
49619: LD_INT 2
49621: PUSH
49622: LD_INT 30
49624: PUSH
49625: LD_INT 0
49627: PUSH
49628: EMPTY
49629: LIST
49630: LIST
49631: PUSH
49632: LD_INT 30
49634: PUSH
49635: LD_INT 1
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: PUSH
49642: EMPTY
49643: LIST
49644: LIST
49645: LIST
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: PPUSH
49651: CALL_OW 69
49655: NOT
49656: IFFALSE 49660
// exit ;
49658: GO 49725
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
49660: LD_ADDR_VAR 0 2
49664: PUSH
49665: LD_INT 22
49667: PUSH
49668: LD_VAR 0 1
49672: PUSH
49673: EMPTY
49674: LIST
49675: LIST
49676: PUSH
49677: LD_INT 2
49679: PUSH
49680: LD_INT 21
49682: PUSH
49683: LD_INT 1
49685: PUSH
49686: EMPTY
49687: LIST
49688: LIST
49689: PUSH
49690: LD_INT 33
49692: PUSH
49693: LD_INT 3
49695: PUSH
49696: EMPTY
49697: LIST
49698: LIST
49699: PUSH
49700: LD_INT 33
49702: PUSH
49703: LD_INT 5
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: PUSH
49710: EMPTY
49711: LIST
49712: LIST
49713: LIST
49714: LIST
49715: PUSH
49716: EMPTY
49717: LIST
49718: LIST
49719: PPUSH
49720: CALL_OW 69
49724: ST_TO_ADDR
// end ; end_of_file
49725: LD_VAR 0 2
49729: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , tmp ;
49730: LD_EXP 34
49734: IFFALSE 49967
49736: GO 49738
49738: DISABLE
49739: LD_INT 0
49741: PPUSH
49742: PPUSH
// begin mpKingPoints := [ ] ;
49743: LD_ADDR_EXP 37
49747: PUSH
49748: EMPTY
49749: ST_TO_ADDR
// if mpTeamGame then
49750: LD_EXP 9
49754: IFFALSE 49808
// begin for i := 1 to Count ( mpTeams ) do
49756: LD_ADDR_VAR 0 1
49760: PUSH
49761: DOUBLE
49762: LD_INT 1
49764: DEC
49765: ST_TO_ADDR
49766: LD_EXP 8
49770: PPUSH
49771: CALL 4610 0 1
49775: PUSH
49776: FOR_TO
49777: IFFALSE 49804
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
49779: LD_ADDR_EXP 37
49783: PUSH
49784: LD_EXP 37
49788: PPUSH
49789: LD_VAR 0 1
49793: PPUSH
49794: LD_INT 0
49796: PPUSH
49797: CALL_OW 1
49801: ST_TO_ADDR
49802: GO 49776
49804: POP
49805: POP
// end else
49806: GO 49851
// begin for i := 1 to 8 do
49808: LD_ADDR_VAR 0 1
49812: PUSH
49813: DOUBLE
49814: LD_INT 1
49816: DEC
49817: ST_TO_ADDR
49818: LD_INT 8
49820: PUSH
49821: FOR_TO
49822: IFFALSE 49849
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
49824: LD_ADDR_EXP 37
49828: PUSH
49829: LD_EXP 37
49833: PPUSH
49834: LD_VAR 0 1
49838: PPUSH
49839: LD_INT 0
49841: PPUSH
49842: CALL_OW 1
49846: ST_TO_ADDR
49847: GO 49821
49849: POP
49850: POP
// end ; SetAreaMapShow ( mpKingArea , 1 ) ;
49851: LD_EXP 31
49855: PPUSH
49856: LD_INT 1
49858: PPUSH
49859: CALL_OW 424
// UpdateCounter ;
49863: CALL 50299 0 0
// repeat wait ( 0 0$3 ) ;
49867: LD_INT 105
49869: PPUSH
49870: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
49874: LD_ADDR_VAR 0 2
49878: PUSH
49879: LD_EXP 31
49883: PPUSH
49884: LD_INT 3
49886: PUSH
49887: LD_INT 57
49889: PUSH
49890: EMPTY
49891: LIST
49892: PUSH
49893: EMPTY
49894: LIST
49895: LIST
49896: PUSH
49897: LD_INT 50
49899: PUSH
49900: EMPTY
49901: LIST
49902: PUSH
49903: LD_INT 2
49905: PUSH
49906: LD_INT 30
49908: PUSH
49909: LD_INT 0
49911: PUSH
49912: EMPTY
49913: LIST
49914: LIST
49915: PUSH
49916: LD_INT 30
49918: PUSH
49919: LD_INT 1
49921: PUSH
49922: EMPTY
49923: LIST
49924: LIST
49925: PUSH
49926: EMPTY
49927: LIST
49928: LIST
49929: LIST
49930: PUSH
49931: EMPTY
49932: LIST
49933: LIST
49934: LIST
49935: PPUSH
49936: CALL_OW 70
49940: ST_TO_ADDR
// if not tmp then
49941: LD_VAR 0 2
49945: NOT
49946: IFFALSE 49950
// continue ;
49948: GO 49867
// AddPoints ( tmp ) ;
49950: LD_VAR 0 2
49954: PPUSH
49955: CALL 49970 0 1
// UpdateCounter ;
49959: CALL 50299 0 0
// until false ;
49963: LD_INT 0
49965: IFFALSE 49867
// end ;
49967: PPOPN 2
49969: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
49970: LD_INT 0
49972: PPUSH
49973: PPUSH
49974: PPUSH
49975: PPUSH
49976: PPUSH
// if mpTeamGame then
49977: LD_EXP 9
49981: IFFALSE 50178
// begin first := depots [ 1 ] ;
49983: LD_ADDR_VAR 0 4
49987: PUSH
49988: LD_VAR 0 1
49992: PUSH
49993: LD_INT 1
49995: ARRAY
49996: ST_TO_ADDR
// side := GetSide ( first ) ;
49997: LD_ADDR_VAR 0 6
50001: PUSH
50002: LD_VAR 0 4
50006: PPUSH
50007: CALL_OW 255
50011: ST_TO_ADDR
// for i := 1 to mpTeams do
50012: LD_ADDR_VAR 0 3
50016: PUSH
50017: DOUBLE
50018: LD_INT 1
50020: DEC
50021: ST_TO_ADDR
50022: LD_EXP 8
50026: PUSH
50027: FOR_TO
50028: IFFALSE 50062
// if side in mpTeams [ i ] then
50030: LD_VAR 0 6
50034: PUSH
50035: LD_EXP 8
50039: PUSH
50040: LD_VAR 0 3
50044: ARRAY
50045: IN
50046: IFFALSE 50060
// begin team := i ;
50048: LD_ADDR_VAR 0 5
50052: PUSH
50053: LD_VAR 0 3
50057: ST_TO_ADDR
// break ;
50058: GO 50062
// end ;
50060: GO 50027
50062: POP
50063: POP
// if not team then
50064: LD_VAR 0 5
50068: NOT
50069: IFFALSE 50073
// exit ;
50071: GO 50294
// if UnitFilter ( depots , [ f_enemy , side ] ) then
50073: LD_VAR 0 1
50077: PPUSH
50078: LD_INT 81
50080: PUSH
50081: LD_VAR 0 6
50085: PUSH
50086: EMPTY
50087: LIST
50088: LIST
50089: PPUSH
50090: CALL_OW 72
50094: IFFALSE 50098
// exit ;
50096: GO 50294
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 3 ) ;
50098: LD_ADDR_EXP 37
50102: PUSH
50103: LD_EXP 37
50107: PPUSH
50108: LD_VAR 0 5
50112: PPUSH
50113: LD_EXP 37
50117: PUSH
50118: LD_VAR 0 5
50122: ARRAY
50123: PUSH
50124: LD_INT 3
50126: PLUS
50127: PPUSH
50128: CALL_OW 1
50132: ST_TO_ADDR
// for i in mpTeams [ team ] do
50133: LD_ADDR_VAR 0 3
50137: PUSH
50138: LD_EXP 8
50142: PUSH
50143: LD_VAR 0 5
50147: ARRAY
50148: PUSH
50149: FOR_IN
50150: IFFALSE 50174
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
50152: LD_VAR 0 3
50156: PPUSH
50157: LD_EXP 37
50161: PUSH
50162: LD_VAR 0 5
50166: ARRAY
50167: PPUSH
50168: CALL_OW 506
50172: GO 50149
50174: POP
50175: POP
// end else
50176: GO 50294
// begin first := depots [ 1 ] ;
50178: LD_ADDR_VAR 0 4
50182: PUSH
50183: LD_VAR 0 1
50187: PUSH
50188: LD_INT 1
50190: ARRAY
50191: ST_TO_ADDR
// side := GetSide ( first ) ;
50192: LD_ADDR_VAR 0 6
50196: PUSH
50197: LD_VAR 0 4
50201: PPUSH
50202: CALL_OW 255
50206: ST_TO_ADDR
// if UnitFilter ( depots , [ f_not , [ f_side , side ] ] ) then
50207: LD_VAR 0 1
50211: PPUSH
50212: LD_INT 3
50214: PUSH
50215: LD_INT 22
50217: PUSH
50218: LD_VAR 0 6
50222: PUSH
50223: EMPTY
50224: LIST
50225: LIST
50226: PUSH
50227: EMPTY
50228: LIST
50229: LIST
50230: PPUSH
50231: CALL_OW 72
50235: IFFALSE 50239
// exit ;
50237: GO 50294
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 3 ) ;
50239: LD_ADDR_EXP 37
50243: PUSH
50244: LD_EXP 37
50248: PPUSH
50249: LD_VAR 0 6
50253: PPUSH
50254: LD_EXP 37
50258: PUSH
50259: LD_VAR 0 6
50263: ARRAY
50264: PUSH
50265: LD_INT 3
50267: PLUS
50268: PPUSH
50269: CALL_OW 1
50273: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
50274: LD_VAR 0 6
50278: PPUSH
50279: LD_EXP 37
50283: PUSH
50284: LD_VAR 0 6
50288: ARRAY
50289: PPUSH
50290: CALL_OW 506
// end ; end ;
50294: LD_VAR 0 2
50298: RET
// function UpdateCounter ; var i ; begin
50299: LD_INT 0
50301: PPUSH
50302: PPUSH
// result := [ ] ;
50303: LD_ADDR_VAR 0 1
50307: PUSH
50308: EMPTY
50309: ST_TO_ADDR
// if mpTeamGame then
50310: LD_EXP 9
50314: IFFALSE 50381
// begin for i := 1 to mpTeams do
50316: LD_ADDR_VAR 0 2
50320: PUSH
50321: DOUBLE
50322: LD_INT 1
50324: DEC
50325: ST_TO_ADDR
50326: LD_EXP 8
50330: PUSH
50331: FOR_TO
50332: IFFALSE 50377
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
50334: LD_ADDR_VAR 0 1
50338: PUSH
50339: LD_VAR 0 1
50343: PUSH
50344: LD_STRING #KingoftheHill-Team
50346: PUSH
50347: LD_VAR 0 2
50351: PUSH
50352: LD_EXP 37
50356: PUSH
50357: LD_VAR 0 2
50361: ARRAY
50362: PUSH
50363: LD_EXP 32
50367: PUSH
50368: EMPTY
50369: LIST
50370: LIST
50371: LIST
50372: LIST
50373: ADD
50374: ST_TO_ADDR
50375: GO 50331
50377: POP
50378: POP
// end else
50379: GO 50454
// begin for i := 1 to 8 do
50381: LD_ADDR_VAR 0 2
50385: PUSH
50386: DOUBLE
50387: LD_INT 1
50389: DEC
50390: ST_TO_ADDR
50391: LD_INT 8
50393: PUSH
50394: FOR_TO
50395: IFFALSE 50452
// if mpSidePositions [ i ] then
50397: LD_EXP 5
50401: PUSH
50402: LD_VAR 0 2
50406: ARRAY
50407: IFFALSE 50450
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
50409: LD_ADDR_VAR 0 1
50413: PUSH
50414: LD_VAR 0 1
50418: PUSH
50419: LD_STRING #KingoftheHill-Player
50421: PUSH
50422: LD_VAR 0 2
50426: PUSH
50427: LD_EXP 37
50431: PUSH
50432: LD_VAR 0 2
50436: ARRAY
50437: PUSH
50438: LD_EXP 32
50442: PUSH
50443: EMPTY
50444: LIST
50445: LIST
50446: LIST
50447: LIST
50448: ADD
50449: ST_TO_ADDR
50450: GO 50394
50452: POP
50453: POP
// end ; mpDisplayStrings := result ;
50454: LD_ADDR_EXP 33
50458: PUSH
50459: LD_VAR 0 1
50463: ST_TO_ADDR
// end ;
50464: LD_VAR 0 1
50468: RET
// function HowMuchPoints ( side ) ; var i ; begin
50469: LD_INT 0
50471: PPUSH
50472: PPUSH
// if mpTeamGame then
50473: LD_EXP 9
50477: IFFALSE 50546
// begin for i := 1 to Count ( mpTeams ) do
50479: LD_ADDR_VAR 0 3
50483: PUSH
50484: DOUBLE
50485: LD_INT 1
50487: DEC
50488: ST_TO_ADDR
50489: LD_EXP 8
50493: PPUSH
50494: CALL 4610 0 1
50498: PUSH
50499: FOR_TO
50500: IFFALSE 50542
// begin if side in mpTeams [ i ] then
50502: LD_VAR 0 1
50506: PUSH
50507: LD_EXP 8
50511: PUSH
50512: LD_VAR 0 3
50516: ARRAY
50517: IN
50518: IFFALSE 50540
// begin result := mpKingPoints [ i ] ;
50520: LD_ADDR_VAR 0 2
50524: PUSH
50525: LD_EXP 37
50529: PUSH
50530: LD_VAR 0 3
50534: ARRAY
50535: ST_TO_ADDR
// exit ;
50536: POP
50537: POP
50538: GO 50562
// end ; end ;
50540: GO 50499
50542: POP
50543: POP
// end else
50544: GO 50562
// result := mpKingPoints [ side ] ;
50546: LD_ADDR_VAR 0 2
50550: PUSH
50551: LD_EXP 37
50555: PUSH
50556: LD_VAR 0 1
50560: ARRAY
50561: ST_TO_ADDR
// end ;
50562: LD_VAR 0 2
50566: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
50567: LD_EXP 34
50571: PUSH
50572: CALL 50773 0 0
50576: AND
50577: PUSH
50578: LD_OWVAR 4
50582: AND
50583: IFFALSE 50770
50585: GO 50587
50587: DISABLE
50588: LD_INT 0
50590: PPUSH
50591: PPUSH
// begin canWin := false ;
50592: LD_ADDR_VAR 0 2
50596: PUSH
50597: LD_INT 0
50599: ST_TO_ADDR
// if not HasPower ( your_side ) then
50600: LD_OWVAR 2
50604: PPUSH
50605: CALL 50837 0 1
50609: NOT
50610: IFFALSE 50621
// begin Multiplayer_Loose_Message ;
50612: CALL_OW 521
// enable ( mpLose ) ;
50616: LD_INT 102
50618: ENABLE_MARKED
// end else
50619: GO 50770
// begin canWin := HowMuchPoints ( your_side ) >= mpPoints ;
50621: LD_ADDR_VAR 0 2
50625: PUSH
50626: LD_OWVAR 2
50630: PPUSH
50631: CALL 50469 0 1
50635: PUSH
50636: LD_EXP 32
50640: GREATEREQUAL
50641: ST_TO_ADDR
// for i := 1 to 8 do
50642: LD_ADDR_VAR 0 1
50646: PUSH
50647: DOUBLE
50648: LD_INT 1
50650: DEC
50651: ST_TO_ADDR
50652: LD_INT 8
50654: PUSH
50655: FOR_TO
50656: IFFALSE 50756
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
50658: LD_EXP 5
50662: PUSH
50663: LD_VAR 0 1
50667: ARRAY
50668: PUSH
50669: LD_VAR 0 1
50673: PPUSH
50674: CALL_OW 108
50678: AND
50679: PUSH
50680: LD_VAR 0 1
50684: PUSH
50685: LD_OWVAR 2
50689: NONEQUAL
50690: AND
50691: IFFALSE 50754
// if not mpSideTeams [ i ] or ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) then
50693: LD_EXP 6
50697: PUSH
50698: LD_VAR 0 1
50702: ARRAY
50703: NOT
50704: PUSH
50705: LD_EXP 6
50709: PUSH
50710: LD_VAR 0 1
50714: ARRAY
50715: PUSH
50716: LD_EXP 6
50720: PUSH
50721: LD_OWVAR 2
50725: ARRAY
50726: NONEQUAL
50727: OR
50728: IFFALSE 50754
// if HowMuchPoints ( i ) >= mpPoints then
50730: LD_VAR 0 1
50734: PPUSH
50735: CALL 50469 0 1
50739: PUSH
50740: LD_EXP 32
50744: GREATEREQUAL
50745: IFFALSE 50754
// begin enable ( mpLose ) ;
50747: LD_INT 102
50749: ENABLE_MARKED
// exit ;
50750: POP
50751: POP
50752: GO 50770
// end ;
50754: GO 50655
50756: POP
50757: POP
// if canWin then
50758: LD_VAR 0 2
50762: IFFALSE 50769
// enable ( mpWin ) else
50764: LD_INT 101
50766: ENABLE_MARKED
50767: GO 50770
// enable ;
50769: ENABLE
// end ; end ;
50770: PPOPN 2
50772: END
// function CanWinLoose ; begin
50773: LD_INT 0
50775: PPUSH
// result := true ;
50776: LD_ADDR_VAR 0 1
50780: PUSH
50781: LD_INT 1
50783: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
50784: CALL_OW 518
50788: PUSH
50789: CALL_OW 519
50793: PUSH
50794: LD_INT 0
50796: GREATER
50797: AND
50798: IFFALSE 50808
// result := false ;
50800: LD_ADDR_VAR 0 1
50804: PUSH
50805: LD_INT 0
50807: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
50808: CALL_OW 531
50812: PUSH
50813: CALL_OW 519
50817: PUSH
50818: LD_INT 1
50820: GREATER
50821: AND
50822: IFFALSE 50832
// result := false ;
50824: LD_ADDR_VAR 0 1
50828: PUSH
50829: LD_INT 0
50831: ST_TO_ADDR
// end ;
50832: LD_VAR 0 1
50836: RET
// function HasPower ( i ) ; begin
50837: LD_INT 0
50839: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
50840: LD_ADDR_VAR 0 2
50844: PUSH
50845: LD_INT 22
50847: PUSH
50848: LD_VAR 0 1
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: PUSH
50857: LD_INT 2
50859: PUSH
50860: LD_INT 21
50862: PUSH
50863: LD_INT 1
50865: PUSH
50866: EMPTY
50867: LIST
50868: LIST
50869: PUSH
50870: LD_INT 33
50872: PUSH
50873: LD_INT 3
50875: PUSH
50876: EMPTY
50877: LIST
50878: LIST
50879: PUSH
50880: LD_INT 33
50882: PUSH
50883: LD_INT 5
50885: PUSH
50886: EMPTY
50887: LIST
50888: LIST
50889: PUSH
50890: EMPTY
50891: LIST
50892: LIST
50893: LIST
50894: LIST
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: PPUSH
50900: CALL_OW 69
50904: ST_TO_ADDR
// end ; end_of_file end_of_file
50905: LD_VAR 0 2
50909: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
50910: LD_VAR 0 1
50914: PPUSH
50915: LD_VAR 0 2
50919: PPUSH
50920: LD_VAR 0 3
50924: PPUSH
50925: LD_VAR 0 4
50929: PPUSH
50930: LD_VAR 0 5
50934: PPUSH
50935: LD_VAR 0 6
50939: PPUSH
50940: CALL 51141 0 6
// end ;
50944: PPOPN 6
50946: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
50947: LD_INT 0
50949: PPUSH
// begin if not units then
50950: LD_VAR 0 1
50954: NOT
50955: IFFALSE 50959
// exit ;
50957: GO 50959
// end ;
50959: PPOPN 7
50961: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
50962: CALL 51028 0 0
// end ; end_of_file
50966: PPOPN 1
50968: END
// export globalGameSaveCounter ; every 0 0$1 do
50969: GO 50971
50971: DISABLE
// begin enable ;
50972: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
50973: LD_STRING updateTimer(
50975: PUSH
50976: LD_OWVAR 1
50980: STR
50981: PUSH
50982: LD_STRING );
50984: STR
50985: PPUSH
50986: CALL_OW 559
// end ;
50990: END
// every 0 0$1 do
50991: GO 50993
50993: DISABLE
// begin globalGameSaveCounter := 0 ;
50994: LD_ADDR_EXP 38
50998: PUSH
50999: LD_INT 0
51001: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
51002: LD_STRING setGameSaveCounter(0)
51004: PPUSH
51005: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
51009: LD_STRING initStreamRollete();
51011: PPUSH
51012: CALL_OW 559
// InitStreamMode ;
51016: CALL 52359 0 0
// DefineStreamItems ( false ) ;
51020: LD_INT 0
51022: PPUSH
51023: CALL 52823 0 1
// end ;
51027: END
// export function SOS_MapStart ( ) ; begin
51028: LD_INT 0
51030: PPUSH
// if streamModeActive then
51031: LD_EXP 39
51035: IFFALSE 51044
// DefineStreamItems ( true ) ;
51037: LD_INT 1
51039: PPUSH
51040: CALL 52823 0 1
// UpdateLuaVariables ( ) ;
51044: CALL 51061 0 0
// UpdateFactoryWaypoints ( ) ;
51048: CALL 65692 0 0
// UpdateWarehouseGatheringPoints ( ) ;
51052: CALL 65949 0 0
// end ;
51056: LD_VAR 0 1
51060: RET
// function UpdateLuaVariables ( ) ; begin
51061: LD_INT 0
51063: PPUSH
// if globalGameSaveCounter then
51064: LD_EXP 38
51068: IFFALSE 51102
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
51070: LD_ADDR_EXP 38
51074: PUSH
51075: LD_EXP 38
51079: PPUSH
51080: CALL 41560 0 1
51084: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
51085: LD_STRING setGameSaveCounter(
51087: PUSH
51088: LD_EXP 38
51092: STR
51093: PUSH
51094: LD_STRING )
51096: STR
51097: PPUSH
51098: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
51102: LD_STRING setGameDifficulty(
51104: PUSH
51105: LD_OWVAR 67
51109: STR
51110: PUSH
51111: LD_STRING )
51113: STR
51114: PPUSH
51115: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
51119: LD_STRING displayDifficulty(
51121: PUSH
51122: LD_OWVAR 67
51126: STR
51127: PUSH
51128: LD_STRING )
51130: STR
51131: PPUSH
51132: CALL_OW 559
// end ;
51136: LD_VAR 0 1
51140: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
51141: LD_INT 0
51143: PPUSH
// if p2 = stream_mode then
51144: LD_VAR 0 2
51148: PUSH
51149: LD_INT 100
51151: EQUAL
51152: IFFALSE 52155
// begin if not StreamModeActive then
51154: LD_EXP 39
51158: NOT
51159: IFFALSE 51169
// StreamModeActive := true ;
51161: LD_ADDR_EXP 39
51165: PUSH
51166: LD_INT 1
51168: ST_TO_ADDR
// if p3 = 0 then
51169: LD_VAR 0 3
51173: PUSH
51174: LD_INT 0
51176: EQUAL
51177: IFFALSE 51183
// InitStreamMode ;
51179: CALL 52359 0 0
// if p3 = 1 then
51183: LD_VAR 0 3
51187: PUSH
51188: LD_INT 1
51190: EQUAL
51191: IFFALSE 51201
// sRocket := true ;
51193: LD_ADDR_EXP 44
51197: PUSH
51198: LD_INT 1
51200: ST_TO_ADDR
// if p3 = 2 then
51201: LD_VAR 0 3
51205: PUSH
51206: LD_INT 2
51208: EQUAL
51209: IFFALSE 51219
// sSpeed := true ;
51211: LD_ADDR_EXP 43
51215: PUSH
51216: LD_INT 1
51218: ST_TO_ADDR
// if p3 = 3 then
51219: LD_VAR 0 3
51223: PUSH
51224: LD_INT 3
51226: EQUAL
51227: IFFALSE 51237
// sEngine := true ;
51229: LD_ADDR_EXP 45
51233: PUSH
51234: LD_INT 1
51236: ST_TO_ADDR
// if p3 = 4 then
51237: LD_VAR 0 3
51241: PUSH
51242: LD_INT 4
51244: EQUAL
51245: IFFALSE 51255
// sSpec := true ;
51247: LD_ADDR_EXP 42
51251: PUSH
51252: LD_INT 1
51254: ST_TO_ADDR
// if p3 = 5 then
51255: LD_VAR 0 3
51259: PUSH
51260: LD_INT 5
51262: EQUAL
51263: IFFALSE 51273
// sLevel := true ;
51265: LD_ADDR_EXP 46
51269: PUSH
51270: LD_INT 1
51272: ST_TO_ADDR
// if p3 = 6 then
51273: LD_VAR 0 3
51277: PUSH
51278: LD_INT 6
51280: EQUAL
51281: IFFALSE 51291
// sArmoury := true ;
51283: LD_ADDR_EXP 47
51287: PUSH
51288: LD_INT 1
51290: ST_TO_ADDR
// if p3 = 7 then
51291: LD_VAR 0 3
51295: PUSH
51296: LD_INT 7
51298: EQUAL
51299: IFFALSE 51309
// sRadar := true ;
51301: LD_ADDR_EXP 48
51305: PUSH
51306: LD_INT 1
51308: ST_TO_ADDR
// if p3 = 8 then
51309: LD_VAR 0 3
51313: PUSH
51314: LD_INT 8
51316: EQUAL
51317: IFFALSE 51327
// sBunker := true ;
51319: LD_ADDR_EXP 49
51323: PUSH
51324: LD_INT 1
51326: ST_TO_ADDR
// if p3 = 9 then
51327: LD_VAR 0 3
51331: PUSH
51332: LD_INT 9
51334: EQUAL
51335: IFFALSE 51345
// sHack := true ;
51337: LD_ADDR_EXP 50
51341: PUSH
51342: LD_INT 1
51344: ST_TO_ADDR
// if p3 = 10 then
51345: LD_VAR 0 3
51349: PUSH
51350: LD_INT 10
51352: EQUAL
51353: IFFALSE 51363
// sFire := true ;
51355: LD_ADDR_EXP 51
51359: PUSH
51360: LD_INT 1
51362: ST_TO_ADDR
// if p3 = 11 then
51363: LD_VAR 0 3
51367: PUSH
51368: LD_INT 11
51370: EQUAL
51371: IFFALSE 51381
// sRefresh := true ;
51373: LD_ADDR_EXP 52
51377: PUSH
51378: LD_INT 1
51380: ST_TO_ADDR
// if p3 = 12 then
51381: LD_VAR 0 3
51385: PUSH
51386: LD_INT 12
51388: EQUAL
51389: IFFALSE 51399
// sExp := true ;
51391: LD_ADDR_EXP 53
51395: PUSH
51396: LD_INT 1
51398: ST_TO_ADDR
// if p3 = 13 then
51399: LD_VAR 0 3
51403: PUSH
51404: LD_INT 13
51406: EQUAL
51407: IFFALSE 51417
// sDepot := true ;
51409: LD_ADDR_EXP 54
51413: PUSH
51414: LD_INT 1
51416: ST_TO_ADDR
// if p3 = 14 then
51417: LD_VAR 0 3
51421: PUSH
51422: LD_INT 14
51424: EQUAL
51425: IFFALSE 51435
// sFlag := true ;
51427: LD_ADDR_EXP 55
51431: PUSH
51432: LD_INT 1
51434: ST_TO_ADDR
// if p3 = 15 then
51435: LD_VAR 0 3
51439: PUSH
51440: LD_INT 15
51442: EQUAL
51443: IFFALSE 51453
// sKamikadze := true ;
51445: LD_ADDR_EXP 63
51449: PUSH
51450: LD_INT 1
51452: ST_TO_ADDR
// if p3 = 16 then
51453: LD_VAR 0 3
51457: PUSH
51458: LD_INT 16
51460: EQUAL
51461: IFFALSE 51471
// sTroll := true ;
51463: LD_ADDR_EXP 64
51467: PUSH
51468: LD_INT 1
51470: ST_TO_ADDR
// if p3 = 17 then
51471: LD_VAR 0 3
51475: PUSH
51476: LD_INT 17
51478: EQUAL
51479: IFFALSE 51489
// sSlow := true ;
51481: LD_ADDR_EXP 65
51485: PUSH
51486: LD_INT 1
51488: ST_TO_ADDR
// if p3 = 18 then
51489: LD_VAR 0 3
51493: PUSH
51494: LD_INT 18
51496: EQUAL
51497: IFFALSE 51507
// sLack := true ;
51499: LD_ADDR_EXP 66
51503: PUSH
51504: LD_INT 1
51506: ST_TO_ADDR
// if p3 = 19 then
51507: LD_VAR 0 3
51511: PUSH
51512: LD_INT 19
51514: EQUAL
51515: IFFALSE 51525
// sTank := true ;
51517: LD_ADDR_EXP 68
51521: PUSH
51522: LD_INT 1
51524: ST_TO_ADDR
// if p3 = 20 then
51525: LD_VAR 0 3
51529: PUSH
51530: LD_INT 20
51532: EQUAL
51533: IFFALSE 51543
// sRemote := true ;
51535: LD_ADDR_EXP 69
51539: PUSH
51540: LD_INT 1
51542: ST_TO_ADDR
// if p3 = 21 then
51543: LD_VAR 0 3
51547: PUSH
51548: LD_INT 21
51550: EQUAL
51551: IFFALSE 51561
// sPowell := true ;
51553: LD_ADDR_EXP 70
51557: PUSH
51558: LD_INT 1
51560: ST_TO_ADDR
// if p3 = 22 then
51561: LD_VAR 0 3
51565: PUSH
51566: LD_INT 22
51568: EQUAL
51569: IFFALSE 51579
// sTeleport := true ;
51571: LD_ADDR_EXP 73
51575: PUSH
51576: LD_INT 1
51578: ST_TO_ADDR
// if p3 = 23 then
51579: LD_VAR 0 3
51583: PUSH
51584: LD_INT 23
51586: EQUAL
51587: IFFALSE 51597
// sOilTower := true ;
51589: LD_ADDR_EXP 75
51593: PUSH
51594: LD_INT 1
51596: ST_TO_ADDR
// if p3 = 24 then
51597: LD_VAR 0 3
51601: PUSH
51602: LD_INT 24
51604: EQUAL
51605: IFFALSE 51615
// sShovel := true ;
51607: LD_ADDR_EXP 76
51611: PUSH
51612: LD_INT 1
51614: ST_TO_ADDR
// if p3 = 25 then
51615: LD_VAR 0 3
51619: PUSH
51620: LD_INT 25
51622: EQUAL
51623: IFFALSE 51633
// sSheik := true ;
51625: LD_ADDR_EXP 77
51629: PUSH
51630: LD_INT 1
51632: ST_TO_ADDR
// if p3 = 26 then
51633: LD_VAR 0 3
51637: PUSH
51638: LD_INT 26
51640: EQUAL
51641: IFFALSE 51651
// sEarthquake := true ;
51643: LD_ADDR_EXP 79
51647: PUSH
51648: LD_INT 1
51650: ST_TO_ADDR
// if p3 = 27 then
51651: LD_VAR 0 3
51655: PUSH
51656: LD_INT 27
51658: EQUAL
51659: IFFALSE 51669
// sAI := true ;
51661: LD_ADDR_EXP 80
51665: PUSH
51666: LD_INT 1
51668: ST_TO_ADDR
// if p3 = 28 then
51669: LD_VAR 0 3
51673: PUSH
51674: LD_INT 28
51676: EQUAL
51677: IFFALSE 51687
// sCargo := true ;
51679: LD_ADDR_EXP 83
51683: PUSH
51684: LD_INT 1
51686: ST_TO_ADDR
// if p3 = 29 then
51687: LD_VAR 0 3
51691: PUSH
51692: LD_INT 29
51694: EQUAL
51695: IFFALSE 51705
// sDLaser := true ;
51697: LD_ADDR_EXP 84
51701: PUSH
51702: LD_INT 1
51704: ST_TO_ADDR
// if p3 = 30 then
51705: LD_VAR 0 3
51709: PUSH
51710: LD_INT 30
51712: EQUAL
51713: IFFALSE 51723
// sExchange := true ;
51715: LD_ADDR_EXP 85
51719: PUSH
51720: LD_INT 1
51722: ST_TO_ADDR
// if p3 = 31 then
51723: LD_VAR 0 3
51727: PUSH
51728: LD_INT 31
51730: EQUAL
51731: IFFALSE 51741
// sFac := true ;
51733: LD_ADDR_EXP 86
51737: PUSH
51738: LD_INT 1
51740: ST_TO_ADDR
// if p3 = 32 then
51741: LD_VAR 0 3
51745: PUSH
51746: LD_INT 32
51748: EQUAL
51749: IFFALSE 51759
// sPower := true ;
51751: LD_ADDR_EXP 87
51755: PUSH
51756: LD_INT 1
51758: ST_TO_ADDR
// if p3 = 33 then
51759: LD_VAR 0 3
51763: PUSH
51764: LD_INT 33
51766: EQUAL
51767: IFFALSE 51777
// sRandom := true ;
51769: LD_ADDR_EXP 88
51773: PUSH
51774: LD_INT 1
51776: ST_TO_ADDR
// if p3 = 34 then
51777: LD_VAR 0 3
51781: PUSH
51782: LD_INT 34
51784: EQUAL
51785: IFFALSE 51795
// sShield := true ;
51787: LD_ADDR_EXP 89
51791: PUSH
51792: LD_INT 1
51794: ST_TO_ADDR
// if p3 = 35 then
51795: LD_VAR 0 3
51799: PUSH
51800: LD_INT 35
51802: EQUAL
51803: IFFALSE 51813
// sTime := true ;
51805: LD_ADDR_EXP 90
51809: PUSH
51810: LD_INT 1
51812: ST_TO_ADDR
// if p3 = 36 then
51813: LD_VAR 0 3
51817: PUSH
51818: LD_INT 36
51820: EQUAL
51821: IFFALSE 51831
// sTools := true ;
51823: LD_ADDR_EXP 91
51827: PUSH
51828: LD_INT 1
51830: ST_TO_ADDR
// if p3 = 101 then
51831: LD_VAR 0 3
51835: PUSH
51836: LD_INT 101
51838: EQUAL
51839: IFFALSE 51849
// sSold := true ;
51841: LD_ADDR_EXP 56
51845: PUSH
51846: LD_INT 1
51848: ST_TO_ADDR
// if p3 = 102 then
51849: LD_VAR 0 3
51853: PUSH
51854: LD_INT 102
51856: EQUAL
51857: IFFALSE 51867
// sDiff := true ;
51859: LD_ADDR_EXP 57
51863: PUSH
51864: LD_INT 1
51866: ST_TO_ADDR
// if p3 = 103 then
51867: LD_VAR 0 3
51871: PUSH
51872: LD_INT 103
51874: EQUAL
51875: IFFALSE 51885
// sFog := true ;
51877: LD_ADDR_EXP 60
51881: PUSH
51882: LD_INT 1
51884: ST_TO_ADDR
// if p3 = 104 then
51885: LD_VAR 0 3
51889: PUSH
51890: LD_INT 104
51892: EQUAL
51893: IFFALSE 51903
// sReset := true ;
51895: LD_ADDR_EXP 61
51899: PUSH
51900: LD_INT 1
51902: ST_TO_ADDR
// if p3 = 105 then
51903: LD_VAR 0 3
51907: PUSH
51908: LD_INT 105
51910: EQUAL
51911: IFFALSE 51921
// sSun := true ;
51913: LD_ADDR_EXP 62
51917: PUSH
51918: LD_INT 1
51920: ST_TO_ADDR
// if p3 = 106 then
51921: LD_VAR 0 3
51925: PUSH
51926: LD_INT 106
51928: EQUAL
51929: IFFALSE 51939
// sTiger := true ;
51931: LD_ADDR_EXP 58
51935: PUSH
51936: LD_INT 1
51938: ST_TO_ADDR
// if p3 = 107 then
51939: LD_VAR 0 3
51943: PUSH
51944: LD_INT 107
51946: EQUAL
51947: IFFALSE 51957
// sBomb := true ;
51949: LD_ADDR_EXP 59
51953: PUSH
51954: LD_INT 1
51956: ST_TO_ADDR
// if p3 = 108 then
51957: LD_VAR 0 3
51961: PUSH
51962: LD_INT 108
51964: EQUAL
51965: IFFALSE 51975
// sWound := true ;
51967: LD_ADDR_EXP 67
51971: PUSH
51972: LD_INT 1
51974: ST_TO_ADDR
// if p3 = 109 then
51975: LD_VAR 0 3
51979: PUSH
51980: LD_INT 109
51982: EQUAL
51983: IFFALSE 51993
// sBetray := true ;
51985: LD_ADDR_EXP 71
51989: PUSH
51990: LD_INT 1
51992: ST_TO_ADDR
// if p3 = 110 then
51993: LD_VAR 0 3
51997: PUSH
51998: LD_INT 110
52000: EQUAL
52001: IFFALSE 52011
// sContamin := true ;
52003: LD_ADDR_EXP 72
52007: PUSH
52008: LD_INT 1
52010: ST_TO_ADDR
// if p3 = 111 then
52011: LD_VAR 0 3
52015: PUSH
52016: LD_INT 111
52018: EQUAL
52019: IFFALSE 52029
// sOil := true ;
52021: LD_ADDR_EXP 74
52025: PUSH
52026: LD_INT 1
52028: ST_TO_ADDR
// if p3 = 112 then
52029: LD_VAR 0 3
52033: PUSH
52034: LD_INT 112
52036: EQUAL
52037: IFFALSE 52047
// sStu := true ;
52039: LD_ADDR_EXP 78
52043: PUSH
52044: LD_INT 1
52046: ST_TO_ADDR
// if p3 = 113 then
52047: LD_VAR 0 3
52051: PUSH
52052: LD_INT 113
52054: EQUAL
52055: IFFALSE 52065
// sBazooka := true ;
52057: LD_ADDR_EXP 81
52061: PUSH
52062: LD_INT 1
52064: ST_TO_ADDR
// if p3 = 114 then
52065: LD_VAR 0 3
52069: PUSH
52070: LD_INT 114
52072: EQUAL
52073: IFFALSE 52083
// sMortar := true ;
52075: LD_ADDR_EXP 82
52079: PUSH
52080: LD_INT 1
52082: ST_TO_ADDR
// if p3 = 115 then
52083: LD_VAR 0 3
52087: PUSH
52088: LD_INT 115
52090: EQUAL
52091: IFFALSE 52101
// sRanger := true ;
52093: LD_ADDR_EXP 92
52097: PUSH
52098: LD_INT 1
52100: ST_TO_ADDR
// if p3 = 116 then
52101: LD_VAR 0 3
52105: PUSH
52106: LD_INT 116
52108: EQUAL
52109: IFFALSE 52119
// sComputer := true ;
52111: LD_ADDR_EXP 93
52115: PUSH
52116: LD_INT 1
52118: ST_TO_ADDR
// if p3 = 117 then
52119: LD_VAR 0 3
52123: PUSH
52124: LD_INT 117
52126: EQUAL
52127: IFFALSE 52137
// s30 := true ;
52129: LD_ADDR_EXP 94
52133: PUSH
52134: LD_INT 1
52136: ST_TO_ADDR
// if p3 = 118 then
52137: LD_VAR 0 3
52141: PUSH
52142: LD_INT 118
52144: EQUAL
52145: IFFALSE 52155
// s60 := true ;
52147: LD_ADDR_EXP 95
52151: PUSH
52152: LD_INT 1
52154: ST_TO_ADDR
// end ; if p2 = hack_mode then
52155: LD_VAR 0 2
52159: PUSH
52160: LD_INT 101
52162: EQUAL
52163: IFFALSE 52291
// begin case p3 of 1 :
52165: LD_VAR 0 3
52169: PUSH
52170: LD_INT 1
52172: DOUBLE
52173: EQUAL
52174: IFTRUE 52178
52176: GO 52185
52178: POP
// hHackUnlimitedResources ; 2 :
52179: CALL 64438 0 0
52183: GO 52291
52185: LD_INT 2
52187: DOUBLE
52188: EQUAL
52189: IFTRUE 52193
52191: GO 52200
52193: POP
// hHackSetLevel10 ; 3 :
52194: CALL 64571 0 0
52198: GO 52291
52200: LD_INT 3
52202: DOUBLE
52203: EQUAL
52204: IFTRUE 52208
52206: GO 52215
52208: POP
// hHackSetLevel10YourUnits ; 4 :
52209: CALL 64656 0 0
52213: GO 52291
52215: LD_INT 4
52217: DOUBLE
52218: EQUAL
52219: IFTRUE 52223
52221: GO 52230
52223: POP
// hHackInvincible ; 5 :
52224: CALL 65104 0 0
52228: GO 52291
52230: LD_INT 5
52232: DOUBLE
52233: EQUAL
52234: IFTRUE 52238
52236: GO 52245
52238: POP
// hHackInvisible ; 6 :
52239: CALL 65215 0 0
52243: GO 52291
52245: LD_INT 6
52247: DOUBLE
52248: EQUAL
52249: IFTRUE 52253
52251: GO 52260
52253: POP
// hHackChangeYourSide ; 7 :
52254: CALL 65272 0 0
52258: GO 52291
52260: LD_INT 7
52262: DOUBLE
52263: EQUAL
52264: IFTRUE 52268
52266: GO 52275
52268: POP
// hHackChangeUnitSide ; 8 :
52269: CALL 65314 0 0
52273: GO 52291
52275: LD_INT 8
52277: DOUBLE
52278: EQUAL
52279: IFTRUE 52283
52281: GO 52290
52283: POP
// hHackFog ; end ;
52284: CALL 65415 0 0
52288: GO 52291
52290: POP
// end ; if p2 = game_save_mode then
52291: LD_VAR 0 2
52295: PUSH
52296: LD_INT 102
52298: EQUAL
52299: IFFALSE 52354
// begin if p3 = 1 then
52301: LD_VAR 0 3
52305: PUSH
52306: LD_INT 1
52308: EQUAL
52309: IFFALSE 52321
// globalGameSaveCounter := p4 ;
52311: LD_ADDR_EXP 38
52315: PUSH
52316: LD_VAR 0 4
52320: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
52321: LD_VAR 0 3
52325: PUSH
52326: LD_INT 2
52328: EQUAL
52329: PUSH
52330: LD_EXP 38
52334: AND
52335: IFFALSE 52354
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
52337: LD_STRING setGameSaveCounter(
52339: PUSH
52340: LD_EXP 38
52344: STR
52345: PUSH
52346: LD_STRING )
52348: STR
52349: PPUSH
52350: CALL_OW 559
// end ; end ;
52354: LD_VAR 0 7
52358: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
52359: LD_INT 0
52361: PPUSH
// streamModeActive := false ;
52362: LD_ADDR_EXP 39
52366: PUSH
52367: LD_INT 0
52369: ST_TO_ADDR
// normalCounter := 36 ;
52370: LD_ADDR_EXP 40
52374: PUSH
52375: LD_INT 36
52377: ST_TO_ADDR
// hardcoreCounter := 18 ;
52378: LD_ADDR_EXP 41
52382: PUSH
52383: LD_INT 18
52385: ST_TO_ADDR
// sRocket := false ;
52386: LD_ADDR_EXP 44
52390: PUSH
52391: LD_INT 0
52393: ST_TO_ADDR
// sSpeed := false ;
52394: LD_ADDR_EXP 43
52398: PUSH
52399: LD_INT 0
52401: ST_TO_ADDR
// sEngine := false ;
52402: LD_ADDR_EXP 45
52406: PUSH
52407: LD_INT 0
52409: ST_TO_ADDR
// sSpec := false ;
52410: LD_ADDR_EXP 42
52414: PUSH
52415: LD_INT 0
52417: ST_TO_ADDR
// sLevel := false ;
52418: LD_ADDR_EXP 46
52422: PUSH
52423: LD_INT 0
52425: ST_TO_ADDR
// sArmoury := false ;
52426: LD_ADDR_EXP 47
52430: PUSH
52431: LD_INT 0
52433: ST_TO_ADDR
// sRadar := false ;
52434: LD_ADDR_EXP 48
52438: PUSH
52439: LD_INT 0
52441: ST_TO_ADDR
// sBunker := false ;
52442: LD_ADDR_EXP 49
52446: PUSH
52447: LD_INT 0
52449: ST_TO_ADDR
// sHack := false ;
52450: LD_ADDR_EXP 50
52454: PUSH
52455: LD_INT 0
52457: ST_TO_ADDR
// sFire := false ;
52458: LD_ADDR_EXP 51
52462: PUSH
52463: LD_INT 0
52465: ST_TO_ADDR
// sRefresh := false ;
52466: LD_ADDR_EXP 52
52470: PUSH
52471: LD_INT 0
52473: ST_TO_ADDR
// sExp := false ;
52474: LD_ADDR_EXP 53
52478: PUSH
52479: LD_INT 0
52481: ST_TO_ADDR
// sDepot := false ;
52482: LD_ADDR_EXP 54
52486: PUSH
52487: LD_INT 0
52489: ST_TO_ADDR
// sFlag := false ;
52490: LD_ADDR_EXP 55
52494: PUSH
52495: LD_INT 0
52497: ST_TO_ADDR
// sKamikadze := false ;
52498: LD_ADDR_EXP 63
52502: PUSH
52503: LD_INT 0
52505: ST_TO_ADDR
// sTroll := false ;
52506: LD_ADDR_EXP 64
52510: PUSH
52511: LD_INT 0
52513: ST_TO_ADDR
// sSlow := false ;
52514: LD_ADDR_EXP 65
52518: PUSH
52519: LD_INT 0
52521: ST_TO_ADDR
// sLack := false ;
52522: LD_ADDR_EXP 66
52526: PUSH
52527: LD_INT 0
52529: ST_TO_ADDR
// sTank := false ;
52530: LD_ADDR_EXP 68
52534: PUSH
52535: LD_INT 0
52537: ST_TO_ADDR
// sRemote := false ;
52538: LD_ADDR_EXP 69
52542: PUSH
52543: LD_INT 0
52545: ST_TO_ADDR
// sPowell := false ;
52546: LD_ADDR_EXP 70
52550: PUSH
52551: LD_INT 0
52553: ST_TO_ADDR
// sTeleport := false ;
52554: LD_ADDR_EXP 73
52558: PUSH
52559: LD_INT 0
52561: ST_TO_ADDR
// sOilTower := false ;
52562: LD_ADDR_EXP 75
52566: PUSH
52567: LD_INT 0
52569: ST_TO_ADDR
// sShovel := false ;
52570: LD_ADDR_EXP 76
52574: PUSH
52575: LD_INT 0
52577: ST_TO_ADDR
// sSheik := false ;
52578: LD_ADDR_EXP 77
52582: PUSH
52583: LD_INT 0
52585: ST_TO_ADDR
// sEarthquake := false ;
52586: LD_ADDR_EXP 79
52590: PUSH
52591: LD_INT 0
52593: ST_TO_ADDR
// sAI := false ;
52594: LD_ADDR_EXP 80
52598: PUSH
52599: LD_INT 0
52601: ST_TO_ADDR
// sCargo := false ;
52602: LD_ADDR_EXP 83
52606: PUSH
52607: LD_INT 0
52609: ST_TO_ADDR
// sDLaser := false ;
52610: LD_ADDR_EXP 84
52614: PUSH
52615: LD_INT 0
52617: ST_TO_ADDR
// sExchange := false ;
52618: LD_ADDR_EXP 85
52622: PUSH
52623: LD_INT 0
52625: ST_TO_ADDR
// sFac := false ;
52626: LD_ADDR_EXP 86
52630: PUSH
52631: LD_INT 0
52633: ST_TO_ADDR
// sPower := false ;
52634: LD_ADDR_EXP 87
52638: PUSH
52639: LD_INT 0
52641: ST_TO_ADDR
// sRandom := false ;
52642: LD_ADDR_EXP 88
52646: PUSH
52647: LD_INT 0
52649: ST_TO_ADDR
// sShield := false ;
52650: LD_ADDR_EXP 89
52654: PUSH
52655: LD_INT 0
52657: ST_TO_ADDR
// sTime := false ;
52658: LD_ADDR_EXP 90
52662: PUSH
52663: LD_INT 0
52665: ST_TO_ADDR
// sTools := false ;
52666: LD_ADDR_EXP 91
52670: PUSH
52671: LD_INT 0
52673: ST_TO_ADDR
// sSold := false ;
52674: LD_ADDR_EXP 56
52678: PUSH
52679: LD_INT 0
52681: ST_TO_ADDR
// sDiff := false ;
52682: LD_ADDR_EXP 57
52686: PUSH
52687: LD_INT 0
52689: ST_TO_ADDR
// sFog := false ;
52690: LD_ADDR_EXP 60
52694: PUSH
52695: LD_INT 0
52697: ST_TO_ADDR
// sReset := false ;
52698: LD_ADDR_EXP 61
52702: PUSH
52703: LD_INT 0
52705: ST_TO_ADDR
// sSun := false ;
52706: LD_ADDR_EXP 62
52710: PUSH
52711: LD_INT 0
52713: ST_TO_ADDR
// sTiger := false ;
52714: LD_ADDR_EXP 58
52718: PUSH
52719: LD_INT 0
52721: ST_TO_ADDR
// sBomb := false ;
52722: LD_ADDR_EXP 59
52726: PUSH
52727: LD_INT 0
52729: ST_TO_ADDR
// sWound := false ;
52730: LD_ADDR_EXP 67
52734: PUSH
52735: LD_INT 0
52737: ST_TO_ADDR
// sBetray := false ;
52738: LD_ADDR_EXP 71
52742: PUSH
52743: LD_INT 0
52745: ST_TO_ADDR
// sContamin := false ;
52746: LD_ADDR_EXP 72
52750: PUSH
52751: LD_INT 0
52753: ST_TO_ADDR
// sOil := false ;
52754: LD_ADDR_EXP 74
52758: PUSH
52759: LD_INT 0
52761: ST_TO_ADDR
// sStu := false ;
52762: LD_ADDR_EXP 78
52766: PUSH
52767: LD_INT 0
52769: ST_TO_ADDR
// sBazooka := false ;
52770: LD_ADDR_EXP 81
52774: PUSH
52775: LD_INT 0
52777: ST_TO_ADDR
// sMortar := false ;
52778: LD_ADDR_EXP 82
52782: PUSH
52783: LD_INT 0
52785: ST_TO_ADDR
// sRanger := false ;
52786: LD_ADDR_EXP 92
52790: PUSH
52791: LD_INT 0
52793: ST_TO_ADDR
// sComputer := false ;
52794: LD_ADDR_EXP 93
52798: PUSH
52799: LD_INT 0
52801: ST_TO_ADDR
// s30 := false ;
52802: LD_ADDR_EXP 94
52806: PUSH
52807: LD_INT 0
52809: ST_TO_ADDR
// s60 := false ;
52810: LD_ADDR_EXP 95
52814: PUSH
52815: LD_INT 0
52817: ST_TO_ADDR
// end ;
52818: LD_VAR 0 1
52822: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
52823: LD_INT 0
52825: PPUSH
52826: PPUSH
52827: PPUSH
52828: PPUSH
52829: PPUSH
52830: PPUSH
52831: PPUSH
// result := [ ] ;
52832: LD_ADDR_VAR 0 2
52836: PUSH
52837: EMPTY
52838: ST_TO_ADDR
// if campaign_id = 1 then
52839: LD_OWVAR 69
52843: PUSH
52844: LD_INT 1
52846: EQUAL
52847: IFFALSE 56013
// begin case mission_number of 1 :
52849: LD_OWVAR 70
52853: PUSH
52854: LD_INT 1
52856: DOUBLE
52857: EQUAL
52858: IFTRUE 52862
52860: GO 52938
52862: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
52863: LD_ADDR_VAR 0 2
52867: PUSH
52868: LD_INT 2
52870: PUSH
52871: LD_INT 4
52873: PUSH
52874: LD_INT 11
52876: PUSH
52877: LD_INT 12
52879: PUSH
52880: LD_INT 15
52882: PUSH
52883: LD_INT 16
52885: PUSH
52886: LD_INT 22
52888: PUSH
52889: LD_INT 23
52891: PUSH
52892: LD_INT 26
52894: PUSH
52895: EMPTY
52896: LIST
52897: LIST
52898: LIST
52899: LIST
52900: LIST
52901: LIST
52902: LIST
52903: LIST
52904: LIST
52905: PUSH
52906: LD_INT 101
52908: PUSH
52909: LD_INT 102
52911: PUSH
52912: LD_INT 106
52914: PUSH
52915: LD_INT 116
52917: PUSH
52918: LD_INT 117
52920: PUSH
52921: LD_INT 118
52923: PUSH
52924: EMPTY
52925: LIST
52926: LIST
52927: LIST
52928: LIST
52929: LIST
52930: LIST
52931: PUSH
52932: EMPTY
52933: LIST
52934: LIST
52935: ST_TO_ADDR
52936: GO 56011
52938: LD_INT 2
52940: DOUBLE
52941: EQUAL
52942: IFTRUE 52946
52944: GO 53030
52946: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
52947: LD_ADDR_VAR 0 2
52951: PUSH
52952: LD_INT 2
52954: PUSH
52955: LD_INT 4
52957: PUSH
52958: LD_INT 11
52960: PUSH
52961: LD_INT 12
52963: PUSH
52964: LD_INT 15
52966: PUSH
52967: LD_INT 16
52969: PUSH
52970: LD_INT 22
52972: PUSH
52973: LD_INT 23
52975: PUSH
52976: LD_INT 26
52978: PUSH
52979: EMPTY
52980: LIST
52981: LIST
52982: LIST
52983: LIST
52984: LIST
52985: LIST
52986: LIST
52987: LIST
52988: LIST
52989: PUSH
52990: LD_INT 101
52992: PUSH
52993: LD_INT 102
52995: PUSH
52996: LD_INT 105
52998: PUSH
52999: LD_INT 106
53001: PUSH
53002: LD_INT 108
53004: PUSH
53005: LD_INT 116
53007: PUSH
53008: LD_INT 117
53010: PUSH
53011: LD_INT 118
53013: PUSH
53014: EMPTY
53015: LIST
53016: LIST
53017: LIST
53018: LIST
53019: LIST
53020: LIST
53021: LIST
53022: LIST
53023: PUSH
53024: EMPTY
53025: LIST
53026: LIST
53027: ST_TO_ADDR
53028: GO 56011
53030: LD_INT 3
53032: DOUBLE
53033: EQUAL
53034: IFTRUE 53038
53036: GO 53126
53038: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
53039: LD_ADDR_VAR 0 2
53043: PUSH
53044: LD_INT 2
53046: PUSH
53047: LD_INT 4
53049: PUSH
53050: LD_INT 5
53052: PUSH
53053: LD_INT 11
53055: PUSH
53056: LD_INT 12
53058: PUSH
53059: LD_INT 15
53061: PUSH
53062: LD_INT 16
53064: PUSH
53065: LD_INT 22
53067: PUSH
53068: LD_INT 26
53070: PUSH
53071: LD_INT 36
53073: PUSH
53074: EMPTY
53075: LIST
53076: LIST
53077: LIST
53078: LIST
53079: LIST
53080: LIST
53081: LIST
53082: LIST
53083: LIST
53084: LIST
53085: PUSH
53086: LD_INT 101
53088: PUSH
53089: LD_INT 102
53091: PUSH
53092: LD_INT 105
53094: PUSH
53095: LD_INT 106
53097: PUSH
53098: LD_INT 108
53100: PUSH
53101: LD_INT 116
53103: PUSH
53104: LD_INT 117
53106: PUSH
53107: LD_INT 118
53109: PUSH
53110: EMPTY
53111: LIST
53112: LIST
53113: LIST
53114: LIST
53115: LIST
53116: LIST
53117: LIST
53118: LIST
53119: PUSH
53120: EMPTY
53121: LIST
53122: LIST
53123: ST_TO_ADDR
53124: GO 56011
53126: LD_INT 4
53128: DOUBLE
53129: EQUAL
53130: IFTRUE 53134
53132: GO 53230
53134: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
53135: LD_ADDR_VAR 0 2
53139: PUSH
53140: LD_INT 2
53142: PUSH
53143: LD_INT 4
53145: PUSH
53146: LD_INT 5
53148: PUSH
53149: LD_INT 8
53151: PUSH
53152: LD_INT 11
53154: PUSH
53155: LD_INT 12
53157: PUSH
53158: LD_INT 15
53160: PUSH
53161: LD_INT 16
53163: PUSH
53164: LD_INT 22
53166: PUSH
53167: LD_INT 23
53169: PUSH
53170: LD_INT 26
53172: PUSH
53173: LD_INT 36
53175: PUSH
53176: EMPTY
53177: LIST
53178: LIST
53179: LIST
53180: LIST
53181: LIST
53182: LIST
53183: LIST
53184: LIST
53185: LIST
53186: LIST
53187: LIST
53188: LIST
53189: PUSH
53190: LD_INT 101
53192: PUSH
53193: LD_INT 102
53195: PUSH
53196: LD_INT 105
53198: PUSH
53199: LD_INT 106
53201: PUSH
53202: LD_INT 108
53204: PUSH
53205: LD_INT 116
53207: PUSH
53208: LD_INT 117
53210: PUSH
53211: LD_INT 118
53213: PUSH
53214: EMPTY
53215: LIST
53216: LIST
53217: LIST
53218: LIST
53219: LIST
53220: LIST
53221: LIST
53222: LIST
53223: PUSH
53224: EMPTY
53225: LIST
53226: LIST
53227: ST_TO_ADDR
53228: GO 56011
53230: LD_INT 5
53232: DOUBLE
53233: EQUAL
53234: IFTRUE 53238
53236: GO 53350
53238: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
53239: LD_ADDR_VAR 0 2
53243: PUSH
53244: LD_INT 2
53246: PUSH
53247: LD_INT 4
53249: PUSH
53250: LD_INT 5
53252: PUSH
53253: LD_INT 6
53255: PUSH
53256: LD_INT 8
53258: PUSH
53259: LD_INT 11
53261: PUSH
53262: LD_INT 12
53264: PUSH
53265: LD_INT 15
53267: PUSH
53268: LD_INT 16
53270: PUSH
53271: LD_INT 22
53273: PUSH
53274: LD_INT 23
53276: PUSH
53277: LD_INT 25
53279: PUSH
53280: LD_INT 26
53282: PUSH
53283: LD_INT 36
53285: PUSH
53286: EMPTY
53287: LIST
53288: LIST
53289: LIST
53290: LIST
53291: LIST
53292: LIST
53293: LIST
53294: LIST
53295: LIST
53296: LIST
53297: LIST
53298: LIST
53299: LIST
53300: LIST
53301: PUSH
53302: LD_INT 101
53304: PUSH
53305: LD_INT 102
53307: PUSH
53308: LD_INT 105
53310: PUSH
53311: LD_INT 106
53313: PUSH
53314: LD_INT 108
53316: PUSH
53317: LD_INT 109
53319: PUSH
53320: LD_INT 112
53322: PUSH
53323: LD_INT 116
53325: PUSH
53326: LD_INT 117
53328: PUSH
53329: LD_INT 118
53331: PUSH
53332: EMPTY
53333: LIST
53334: LIST
53335: LIST
53336: LIST
53337: LIST
53338: LIST
53339: LIST
53340: LIST
53341: LIST
53342: LIST
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: ST_TO_ADDR
53348: GO 56011
53350: LD_INT 6
53352: DOUBLE
53353: EQUAL
53354: IFTRUE 53358
53356: GO 53490
53358: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
53359: LD_ADDR_VAR 0 2
53363: PUSH
53364: LD_INT 2
53366: PUSH
53367: LD_INT 4
53369: PUSH
53370: LD_INT 5
53372: PUSH
53373: LD_INT 6
53375: PUSH
53376: LD_INT 8
53378: PUSH
53379: LD_INT 11
53381: PUSH
53382: LD_INT 12
53384: PUSH
53385: LD_INT 15
53387: PUSH
53388: LD_INT 16
53390: PUSH
53391: LD_INT 20
53393: PUSH
53394: LD_INT 21
53396: PUSH
53397: LD_INT 22
53399: PUSH
53400: LD_INT 23
53402: PUSH
53403: LD_INT 25
53405: PUSH
53406: LD_INT 26
53408: PUSH
53409: LD_INT 30
53411: PUSH
53412: LD_INT 31
53414: PUSH
53415: LD_INT 32
53417: PUSH
53418: LD_INT 36
53420: PUSH
53421: EMPTY
53422: LIST
53423: LIST
53424: LIST
53425: LIST
53426: LIST
53427: LIST
53428: LIST
53429: LIST
53430: LIST
53431: LIST
53432: LIST
53433: LIST
53434: LIST
53435: LIST
53436: LIST
53437: LIST
53438: LIST
53439: LIST
53440: LIST
53441: PUSH
53442: LD_INT 101
53444: PUSH
53445: LD_INT 102
53447: PUSH
53448: LD_INT 105
53450: PUSH
53451: LD_INT 106
53453: PUSH
53454: LD_INT 108
53456: PUSH
53457: LD_INT 109
53459: PUSH
53460: LD_INT 112
53462: PUSH
53463: LD_INT 116
53465: PUSH
53466: LD_INT 117
53468: PUSH
53469: LD_INT 118
53471: PUSH
53472: EMPTY
53473: LIST
53474: LIST
53475: LIST
53476: LIST
53477: LIST
53478: LIST
53479: LIST
53480: LIST
53481: LIST
53482: LIST
53483: PUSH
53484: EMPTY
53485: LIST
53486: LIST
53487: ST_TO_ADDR
53488: GO 56011
53490: LD_INT 7
53492: DOUBLE
53493: EQUAL
53494: IFTRUE 53498
53496: GO 53610
53498: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
53499: LD_ADDR_VAR 0 2
53503: PUSH
53504: LD_INT 2
53506: PUSH
53507: LD_INT 4
53509: PUSH
53510: LD_INT 5
53512: PUSH
53513: LD_INT 7
53515: PUSH
53516: LD_INT 11
53518: PUSH
53519: LD_INT 12
53521: PUSH
53522: LD_INT 15
53524: PUSH
53525: LD_INT 16
53527: PUSH
53528: LD_INT 20
53530: PUSH
53531: LD_INT 21
53533: PUSH
53534: LD_INT 22
53536: PUSH
53537: LD_INT 23
53539: PUSH
53540: LD_INT 25
53542: PUSH
53543: LD_INT 26
53545: PUSH
53546: EMPTY
53547: LIST
53548: LIST
53549: LIST
53550: LIST
53551: LIST
53552: LIST
53553: LIST
53554: LIST
53555: LIST
53556: LIST
53557: LIST
53558: LIST
53559: LIST
53560: LIST
53561: PUSH
53562: LD_INT 101
53564: PUSH
53565: LD_INT 102
53567: PUSH
53568: LD_INT 103
53570: PUSH
53571: LD_INT 105
53573: PUSH
53574: LD_INT 106
53576: PUSH
53577: LD_INT 108
53579: PUSH
53580: LD_INT 112
53582: PUSH
53583: LD_INT 116
53585: PUSH
53586: LD_INT 117
53588: PUSH
53589: LD_INT 118
53591: PUSH
53592: EMPTY
53593: LIST
53594: LIST
53595: LIST
53596: LIST
53597: LIST
53598: LIST
53599: LIST
53600: LIST
53601: LIST
53602: LIST
53603: PUSH
53604: EMPTY
53605: LIST
53606: LIST
53607: ST_TO_ADDR
53608: GO 56011
53610: LD_INT 8
53612: DOUBLE
53613: EQUAL
53614: IFTRUE 53618
53616: GO 53758
53618: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
53619: LD_ADDR_VAR 0 2
53623: PUSH
53624: LD_INT 2
53626: PUSH
53627: LD_INT 4
53629: PUSH
53630: LD_INT 5
53632: PUSH
53633: LD_INT 6
53635: PUSH
53636: LD_INT 7
53638: PUSH
53639: LD_INT 8
53641: PUSH
53642: LD_INT 11
53644: PUSH
53645: LD_INT 12
53647: PUSH
53648: LD_INT 15
53650: PUSH
53651: LD_INT 16
53653: PUSH
53654: LD_INT 20
53656: PUSH
53657: LD_INT 21
53659: PUSH
53660: LD_INT 22
53662: PUSH
53663: LD_INT 23
53665: PUSH
53666: LD_INT 25
53668: PUSH
53669: LD_INT 26
53671: PUSH
53672: LD_INT 30
53674: PUSH
53675: LD_INT 31
53677: PUSH
53678: LD_INT 32
53680: PUSH
53681: LD_INT 36
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: LIST
53688: LIST
53689: LIST
53690: LIST
53691: LIST
53692: LIST
53693: LIST
53694: LIST
53695: LIST
53696: LIST
53697: LIST
53698: LIST
53699: LIST
53700: LIST
53701: LIST
53702: LIST
53703: LIST
53704: LIST
53705: PUSH
53706: LD_INT 101
53708: PUSH
53709: LD_INT 102
53711: PUSH
53712: LD_INT 103
53714: PUSH
53715: LD_INT 105
53717: PUSH
53718: LD_INT 106
53720: PUSH
53721: LD_INT 108
53723: PUSH
53724: LD_INT 109
53726: PUSH
53727: LD_INT 112
53729: PUSH
53730: LD_INT 116
53732: PUSH
53733: LD_INT 117
53735: PUSH
53736: LD_INT 118
53738: PUSH
53739: EMPTY
53740: LIST
53741: LIST
53742: LIST
53743: LIST
53744: LIST
53745: LIST
53746: LIST
53747: LIST
53748: LIST
53749: LIST
53750: LIST
53751: PUSH
53752: EMPTY
53753: LIST
53754: LIST
53755: ST_TO_ADDR
53756: GO 56011
53758: LD_INT 9
53760: DOUBLE
53761: EQUAL
53762: IFTRUE 53766
53764: GO 53914
53766: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
53767: LD_ADDR_VAR 0 2
53771: PUSH
53772: LD_INT 2
53774: PUSH
53775: LD_INT 4
53777: PUSH
53778: LD_INT 5
53780: PUSH
53781: LD_INT 6
53783: PUSH
53784: LD_INT 7
53786: PUSH
53787: LD_INT 8
53789: PUSH
53790: LD_INT 11
53792: PUSH
53793: LD_INT 12
53795: PUSH
53796: LD_INT 15
53798: PUSH
53799: LD_INT 16
53801: PUSH
53802: LD_INT 20
53804: PUSH
53805: LD_INT 21
53807: PUSH
53808: LD_INT 22
53810: PUSH
53811: LD_INT 23
53813: PUSH
53814: LD_INT 25
53816: PUSH
53817: LD_INT 26
53819: PUSH
53820: LD_INT 28
53822: PUSH
53823: LD_INT 30
53825: PUSH
53826: LD_INT 31
53828: PUSH
53829: LD_INT 32
53831: PUSH
53832: LD_INT 36
53834: PUSH
53835: EMPTY
53836: LIST
53837: LIST
53838: LIST
53839: LIST
53840: LIST
53841: LIST
53842: LIST
53843: LIST
53844: LIST
53845: LIST
53846: LIST
53847: LIST
53848: LIST
53849: LIST
53850: LIST
53851: LIST
53852: LIST
53853: LIST
53854: LIST
53855: LIST
53856: LIST
53857: PUSH
53858: LD_INT 101
53860: PUSH
53861: LD_INT 102
53863: PUSH
53864: LD_INT 103
53866: PUSH
53867: LD_INT 105
53869: PUSH
53870: LD_INT 106
53872: PUSH
53873: LD_INT 108
53875: PUSH
53876: LD_INT 109
53878: PUSH
53879: LD_INT 112
53881: PUSH
53882: LD_INT 114
53884: PUSH
53885: LD_INT 116
53887: PUSH
53888: LD_INT 117
53890: PUSH
53891: LD_INT 118
53893: PUSH
53894: EMPTY
53895: LIST
53896: LIST
53897: LIST
53898: LIST
53899: LIST
53900: LIST
53901: LIST
53902: LIST
53903: LIST
53904: LIST
53905: LIST
53906: LIST
53907: PUSH
53908: EMPTY
53909: LIST
53910: LIST
53911: ST_TO_ADDR
53912: GO 56011
53914: LD_INT 10
53916: DOUBLE
53917: EQUAL
53918: IFTRUE 53922
53920: GO 54118
53922: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
53923: LD_ADDR_VAR 0 2
53927: PUSH
53928: LD_INT 2
53930: PUSH
53931: LD_INT 4
53933: PUSH
53934: LD_INT 5
53936: PUSH
53937: LD_INT 6
53939: PUSH
53940: LD_INT 7
53942: PUSH
53943: LD_INT 8
53945: PUSH
53946: LD_INT 9
53948: PUSH
53949: LD_INT 10
53951: PUSH
53952: LD_INT 11
53954: PUSH
53955: LD_INT 12
53957: PUSH
53958: LD_INT 13
53960: PUSH
53961: LD_INT 14
53963: PUSH
53964: LD_INT 15
53966: PUSH
53967: LD_INT 16
53969: PUSH
53970: LD_INT 17
53972: PUSH
53973: LD_INT 18
53975: PUSH
53976: LD_INT 19
53978: PUSH
53979: LD_INT 20
53981: PUSH
53982: LD_INT 21
53984: PUSH
53985: LD_INT 22
53987: PUSH
53988: LD_INT 23
53990: PUSH
53991: LD_INT 24
53993: PUSH
53994: LD_INT 25
53996: PUSH
53997: LD_INT 26
53999: PUSH
54000: LD_INT 28
54002: PUSH
54003: LD_INT 30
54005: PUSH
54006: LD_INT 31
54008: PUSH
54009: LD_INT 32
54011: PUSH
54012: LD_INT 36
54014: PUSH
54015: EMPTY
54016: LIST
54017: LIST
54018: LIST
54019: LIST
54020: LIST
54021: LIST
54022: LIST
54023: LIST
54024: LIST
54025: LIST
54026: LIST
54027: LIST
54028: LIST
54029: LIST
54030: LIST
54031: LIST
54032: LIST
54033: LIST
54034: LIST
54035: LIST
54036: LIST
54037: LIST
54038: LIST
54039: LIST
54040: LIST
54041: LIST
54042: LIST
54043: LIST
54044: LIST
54045: PUSH
54046: LD_INT 101
54048: PUSH
54049: LD_INT 102
54051: PUSH
54052: LD_INT 103
54054: PUSH
54055: LD_INT 104
54057: PUSH
54058: LD_INT 105
54060: PUSH
54061: LD_INT 106
54063: PUSH
54064: LD_INT 107
54066: PUSH
54067: LD_INT 108
54069: PUSH
54070: LD_INT 109
54072: PUSH
54073: LD_INT 110
54075: PUSH
54076: LD_INT 111
54078: PUSH
54079: LD_INT 112
54081: PUSH
54082: LD_INT 114
54084: PUSH
54085: LD_INT 116
54087: PUSH
54088: LD_INT 117
54090: PUSH
54091: LD_INT 118
54093: PUSH
54094: EMPTY
54095: LIST
54096: LIST
54097: LIST
54098: LIST
54099: LIST
54100: LIST
54101: LIST
54102: LIST
54103: LIST
54104: LIST
54105: LIST
54106: LIST
54107: LIST
54108: LIST
54109: LIST
54110: LIST
54111: PUSH
54112: EMPTY
54113: LIST
54114: LIST
54115: ST_TO_ADDR
54116: GO 56011
54118: LD_INT 11
54120: DOUBLE
54121: EQUAL
54122: IFTRUE 54126
54124: GO 54330
54126: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
54127: LD_ADDR_VAR 0 2
54131: PUSH
54132: LD_INT 2
54134: PUSH
54135: LD_INT 3
54137: PUSH
54138: LD_INT 4
54140: PUSH
54141: LD_INT 5
54143: PUSH
54144: LD_INT 6
54146: PUSH
54147: LD_INT 7
54149: PUSH
54150: LD_INT 8
54152: PUSH
54153: LD_INT 9
54155: PUSH
54156: LD_INT 10
54158: PUSH
54159: LD_INT 11
54161: PUSH
54162: LD_INT 12
54164: PUSH
54165: LD_INT 13
54167: PUSH
54168: LD_INT 14
54170: PUSH
54171: LD_INT 15
54173: PUSH
54174: LD_INT 16
54176: PUSH
54177: LD_INT 17
54179: PUSH
54180: LD_INT 18
54182: PUSH
54183: LD_INT 19
54185: PUSH
54186: LD_INT 20
54188: PUSH
54189: LD_INT 21
54191: PUSH
54192: LD_INT 22
54194: PUSH
54195: LD_INT 23
54197: PUSH
54198: LD_INT 24
54200: PUSH
54201: LD_INT 25
54203: PUSH
54204: LD_INT 26
54206: PUSH
54207: LD_INT 28
54209: PUSH
54210: LD_INT 30
54212: PUSH
54213: LD_INT 31
54215: PUSH
54216: LD_INT 32
54218: PUSH
54219: LD_INT 34
54221: PUSH
54222: LD_INT 36
54224: PUSH
54225: EMPTY
54226: LIST
54227: LIST
54228: LIST
54229: LIST
54230: LIST
54231: LIST
54232: LIST
54233: LIST
54234: LIST
54235: LIST
54236: LIST
54237: LIST
54238: LIST
54239: LIST
54240: LIST
54241: LIST
54242: LIST
54243: LIST
54244: LIST
54245: LIST
54246: LIST
54247: LIST
54248: LIST
54249: LIST
54250: LIST
54251: LIST
54252: LIST
54253: LIST
54254: LIST
54255: LIST
54256: LIST
54257: PUSH
54258: LD_INT 101
54260: PUSH
54261: LD_INT 102
54263: PUSH
54264: LD_INT 103
54266: PUSH
54267: LD_INT 104
54269: PUSH
54270: LD_INT 105
54272: PUSH
54273: LD_INT 106
54275: PUSH
54276: LD_INT 107
54278: PUSH
54279: LD_INT 108
54281: PUSH
54282: LD_INT 109
54284: PUSH
54285: LD_INT 110
54287: PUSH
54288: LD_INT 111
54290: PUSH
54291: LD_INT 112
54293: PUSH
54294: LD_INT 114
54296: PUSH
54297: LD_INT 116
54299: PUSH
54300: LD_INT 117
54302: PUSH
54303: LD_INT 118
54305: PUSH
54306: EMPTY
54307: LIST
54308: LIST
54309: LIST
54310: LIST
54311: LIST
54312: LIST
54313: LIST
54314: LIST
54315: LIST
54316: LIST
54317: LIST
54318: LIST
54319: LIST
54320: LIST
54321: LIST
54322: LIST
54323: PUSH
54324: EMPTY
54325: LIST
54326: LIST
54327: ST_TO_ADDR
54328: GO 56011
54330: LD_INT 12
54332: DOUBLE
54333: EQUAL
54334: IFTRUE 54338
54336: GO 54558
54338: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
54339: LD_ADDR_VAR 0 2
54343: PUSH
54344: LD_INT 1
54346: PUSH
54347: LD_INT 2
54349: PUSH
54350: LD_INT 3
54352: PUSH
54353: LD_INT 4
54355: PUSH
54356: LD_INT 5
54358: PUSH
54359: LD_INT 6
54361: PUSH
54362: LD_INT 7
54364: PUSH
54365: LD_INT 8
54367: PUSH
54368: LD_INT 9
54370: PUSH
54371: LD_INT 10
54373: PUSH
54374: LD_INT 11
54376: PUSH
54377: LD_INT 12
54379: PUSH
54380: LD_INT 13
54382: PUSH
54383: LD_INT 14
54385: PUSH
54386: LD_INT 15
54388: PUSH
54389: LD_INT 16
54391: PUSH
54392: LD_INT 17
54394: PUSH
54395: LD_INT 18
54397: PUSH
54398: LD_INT 19
54400: PUSH
54401: LD_INT 20
54403: PUSH
54404: LD_INT 21
54406: PUSH
54407: LD_INT 22
54409: PUSH
54410: LD_INT 23
54412: PUSH
54413: LD_INT 24
54415: PUSH
54416: LD_INT 25
54418: PUSH
54419: LD_INT 26
54421: PUSH
54422: LD_INT 27
54424: PUSH
54425: LD_INT 28
54427: PUSH
54428: LD_INT 30
54430: PUSH
54431: LD_INT 31
54433: PUSH
54434: LD_INT 32
54436: PUSH
54437: LD_INT 33
54439: PUSH
54440: LD_INT 34
54442: PUSH
54443: LD_INT 36
54445: PUSH
54446: EMPTY
54447: LIST
54448: LIST
54449: LIST
54450: LIST
54451: LIST
54452: LIST
54453: LIST
54454: LIST
54455: LIST
54456: LIST
54457: LIST
54458: LIST
54459: LIST
54460: LIST
54461: LIST
54462: LIST
54463: LIST
54464: LIST
54465: LIST
54466: LIST
54467: LIST
54468: LIST
54469: LIST
54470: LIST
54471: LIST
54472: LIST
54473: LIST
54474: LIST
54475: LIST
54476: LIST
54477: LIST
54478: LIST
54479: LIST
54480: LIST
54481: PUSH
54482: LD_INT 101
54484: PUSH
54485: LD_INT 102
54487: PUSH
54488: LD_INT 103
54490: PUSH
54491: LD_INT 104
54493: PUSH
54494: LD_INT 105
54496: PUSH
54497: LD_INT 106
54499: PUSH
54500: LD_INT 107
54502: PUSH
54503: LD_INT 108
54505: PUSH
54506: LD_INT 109
54508: PUSH
54509: LD_INT 110
54511: PUSH
54512: LD_INT 111
54514: PUSH
54515: LD_INT 112
54517: PUSH
54518: LD_INT 113
54520: PUSH
54521: LD_INT 114
54523: PUSH
54524: LD_INT 116
54526: PUSH
54527: LD_INT 117
54529: PUSH
54530: LD_INT 118
54532: PUSH
54533: EMPTY
54534: LIST
54535: LIST
54536: LIST
54537: LIST
54538: LIST
54539: LIST
54540: LIST
54541: LIST
54542: LIST
54543: LIST
54544: LIST
54545: LIST
54546: LIST
54547: LIST
54548: LIST
54549: LIST
54550: LIST
54551: PUSH
54552: EMPTY
54553: LIST
54554: LIST
54555: ST_TO_ADDR
54556: GO 56011
54558: LD_INT 13
54560: DOUBLE
54561: EQUAL
54562: IFTRUE 54566
54564: GO 54774
54566: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
54567: LD_ADDR_VAR 0 2
54571: PUSH
54572: LD_INT 1
54574: PUSH
54575: LD_INT 2
54577: PUSH
54578: LD_INT 3
54580: PUSH
54581: LD_INT 4
54583: PUSH
54584: LD_INT 5
54586: PUSH
54587: LD_INT 8
54589: PUSH
54590: LD_INT 9
54592: PUSH
54593: LD_INT 10
54595: PUSH
54596: LD_INT 11
54598: PUSH
54599: LD_INT 12
54601: PUSH
54602: LD_INT 14
54604: PUSH
54605: LD_INT 15
54607: PUSH
54608: LD_INT 16
54610: PUSH
54611: LD_INT 17
54613: PUSH
54614: LD_INT 18
54616: PUSH
54617: LD_INT 19
54619: PUSH
54620: LD_INT 20
54622: PUSH
54623: LD_INT 21
54625: PUSH
54626: LD_INT 22
54628: PUSH
54629: LD_INT 23
54631: PUSH
54632: LD_INT 24
54634: PUSH
54635: LD_INT 25
54637: PUSH
54638: LD_INT 26
54640: PUSH
54641: LD_INT 27
54643: PUSH
54644: LD_INT 28
54646: PUSH
54647: LD_INT 30
54649: PUSH
54650: LD_INT 31
54652: PUSH
54653: LD_INT 32
54655: PUSH
54656: LD_INT 33
54658: PUSH
54659: LD_INT 34
54661: PUSH
54662: LD_INT 36
54664: PUSH
54665: EMPTY
54666: LIST
54667: LIST
54668: LIST
54669: LIST
54670: LIST
54671: LIST
54672: LIST
54673: LIST
54674: LIST
54675: LIST
54676: LIST
54677: LIST
54678: LIST
54679: LIST
54680: LIST
54681: LIST
54682: LIST
54683: LIST
54684: LIST
54685: LIST
54686: LIST
54687: LIST
54688: LIST
54689: LIST
54690: LIST
54691: LIST
54692: LIST
54693: LIST
54694: LIST
54695: LIST
54696: LIST
54697: PUSH
54698: LD_INT 101
54700: PUSH
54701: LD_INT 102
54703: PUSH
54704: LD_INT 103
54706: PUSH
54707: LD_INT 104
54709: PUSH
54710: LD_INT 105
54712: PUSH
54713: LD_INT 106
54715: PUSH
54716: LD_INT 107
54718: PUSH
54719: LD_INT 108
54721: PUSH
54722: LD_INT 109
54724: PUSH
54725: LD_INT 110
54727: PUSH
54728: LD_INT 111
54730: PUSH
54731: LD_INT 112
54733: PUSH
54734: LD_INT 113
54736: PUSH
54737: LD_INT 114
54739: PUSH
54740: LD_INT 116
54742: PUSH
54743: LD_INT 117
54745: PUSH
54746: LD_INT 118
54748: PUSH
54749: EMPTY
54750: LIST
54751: LIST
54752: LIST
54753: LIST
54754: LIST
54755: LIST
54756: LIST
54757: LIST
54758: LIST
54759: LIST
54760: LIST
54761: LIST
54762: LIST
54763: LIST
54764: LIST
54765: LIST
54766: LIST
54767: PUSH
54768: EMPTY
54769: LIST
54770: LIST
54771: ST_TO_ADDR
54772: GO 56011
54774: LD_INT 14
54776: DOUBLE
54777: EQUAL
54778: IFTRUE 54782
54780: GO 55006
54782: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
54783: LD_ADDR_VAR 0 2
54787: PUSH
54788: LD_INT 1
54790: PUSH
54791: LD_INT 2
54793: PUSH
54794: LD_INT 3
54796: PUSH
54797: LD_INT 4
54799: PUSH
54800: LD_INT 5
54802: PUSH
54803: LD_INT 6
54805: PUSH
54806: LD_INT 7
54808: PUSH
54809: LD_INT 8
54811: PUSH
54812: LD_INT 9
54814: PUSH
54815: LD_INT 10
54817: PUSH
54818: LD_INT 11
54820: PUSH
54821: LD_INT 12
54823: PUSH
54824: LD_INT 13
54826: PUSH
54827: LD_INT 14
54829: PUSH
54830: LD_INT 15
54832: PUSH
54833: LD_INT 16
54835: PUSH
54836: LD_INT 17
54838: PUSH
54839: LD_INT 18
54841: PUSH
54842: LD_INT 19
54844: PUSH
54845: LD_INT 20
54847: PUSH
54848: LD_INT 21
54850: PUSH
54851: LD_INT 22
54853: PUSH
54854: LD_INT 23
54856: PUSH
54857: LD_INT 24
54859: PUSH
54860: LD_INT 25
54862: PUSH
54863: LD_INT 26
54865: PUSH
54866: LD_INT 27
54868: PUSH
54869: LD_INT 28
54871: PUSH
54872: LD_INT 29
54874: PUSH
54875: LD_INT 30
54877: PUSH
54878: LD_INT 31
54880: PUSH
54881: LD_INT 32
54883: PUSH
54884: LD_INT 33
54886: PUSH
54887: LD_INT 34
54889: PUSH
54890: LD_INT 36
54892: PUSH
54893: EMPTY
54894: LIST
54895: LIST
54896: LIST
54897: LIST
54898: LIST
54899: LIST
54900: LIST
54901: LIST
54902: LIST
54903: LIST
54904: LIST
54905: LIST
54906: LIST
54907: LIST
54908: LIST
54909: LIST
54910: LIST
54911: LIST
54912: LIST
54913: LIST
54914: LIST
54915: LIST
54916: LIST
54917: LIST
54918: LIST
54919: LIST
54920: LIST
54921: LIST
54922: LIST
54923: LIST
54924: LIST
54925: LIST
54926: LIST
54927: LIST
54928: LIST
54929: PUSH
54930: LD_INT 101
54932: PUSH
54933: LD_INT 102
54935: PUSH
54936: LD_INT 103
54938: PUSH
54939: LD_INT 104
54941: PUSH
54942: LD_INT 105
54944: PUSH
54945: LD_INT 106
54947: PUSH
54948: LD_INT 107
54950: PUSH
54951: LD_INT 108
54953: PUSH
54954: LD_INT 109
54956: PUSH
54957: LD_INT 110
54959: PUSH
54960: LD_INT 111
54962: PUSH
54963: LD_INT 112
54965: PUSH
54966: LD_INT 113
54968: PUSH
54969: LD_INT 114
54971: PUSH
54972: LD_INT 116
54974: PUSH
54975: LD_INT 117
54977: PUSH
54978: LD_INT 118
54980: PUSH
54981: EMPTY
54982: LIST
54983: LIST
54984: LIST
54985: LIST
54986: LIST
54987: LIST
54988: LIST
54989: LIST
54990: LIST
54991: LIST
54992: LIST
54993: LIST
54994: LIST
54995: LIST
54996: LIST
54997: LIST
54998: LIST
54999: PUSH
55000: EMPTY
55001: LIST
55002: LIST
55003: ST_TO_ADDR
55004: GO 56011
55006: LD_INT 15
55008: DOUBLE
55009: EQUAL
55010: IFTRUE 55014
55012: GO 55238
55014: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
55015: LD_ADDR_VAR 0 2
55019: PUSH
55020: LD_INT 1
55022: PUSH
55023: LD_INT 2
55025: PUSH
55026: LD_INT 3
55028: PUSH
55029: LD_INT 4
55031: PUSH
55032: LD_INT 5
55034: PUSH
55035: LD_INT 6
55037: PUSH
55038: LD_INT 7
55040: PUSH
55041: LD_INT 8
55043: PUSH
55044: LD_INT 9
55046: PUSH
55047: LD_INT 10
55049: PUSH
55050: LD_INT 11
55052: PUSH
55053: LD_INT 12
55055: PUSH
55056: LD_INT 13
55058: PUSH
55059: LD_INT 14
55061: PUSH
55062: LD_INT 15
55064: PUSH
55065: LD_INT 16
55067: PUSH
55068: LD_INT 17
55070: PUSH
55071: LD_INT 18
55073: PUSH
55074: LD_INT 19
55076: PUSH
55077: LD_INT 20
55079: PUSH
55080: LD_INT 21
55082: PUSH
55083: LD_INT 22
55085: PUSH
55086: LD_INT 23
55088: PUSH
55089: LD_INT 24
55091: PUSH
55092: LD_INT 25
55094: PUSH
55095: LD_INT 26
55097: PUSH
55098: LD_INT 27
55100: PUSH
55101: LD_INT 28
55103: PUSH
55104: LD_INT 29
55106: PUSH
55107: LD_INT 30
55109: PUSH
55110: LD_INT 31
55112: PUSH
55113: LD_INT 32
55115: PUSH
55116: LD_INT 33
55118: PUSH
55119: LD_INT 34
55121: PUSH
55122: LD_INT 36
55124: PUSH
55125: EMPTY
55126: LIST
55127: LIST
55128: LIST
55129: LIST
55130: LIST
55131: LIST
55132: LIST
55133: LIST
55134: LIST
55135: LIST
55136: LIST
55137: LIST
55138: LIST
55139: LIST
55140: LIST
55141: LIST
55142: LIST
55143: LIST
55144: LIST
55145: LIST
55146: LIST
55147: LIST
55148: LIST
55149: LIST
55150: LIST
55151: LIST
55152: LIST
55153: LIST
55154: LIST
55155: LIST
55156: LIST
55157: LIST
55158: LIST
55159: LIST
55160: LIST
55161: PUSH
55162: LD_INT 101
55164: PUSH
55165: LD_INT 102
55167: PUSH
55168: LD_INT 103
55170: PUSH
55171: LD_INT 104
55173: PUSH
55174: LD_INT 105
55176: PUSH
55177: LD_INT 106
55179: PUSH
55180: LD_INT 107
55182: PUSH
55183: LD_INT 108
55185: PUSH
55186: LD_INT 109
55188: PUSH
55189: LD_INT 110
55191: PUSH
55192: LD_INT 111
55194: PUSH
55195: LD_INT 112
55197: PUSH
55198: LD_INT 113
55200: PUSH
55201: LD_INT 114
55203: PUSH
55204: LD_INT 116
55206: PUSH
55207: LD_INT 117
55209: PUSH
55210: LD_INT 118
55212: PUSH
55213: EMPTY
55214: LIST
55215: LIST
55216: LIST
55217: LIST
55218: LIST
55219: LIST
55220: LIST
55221: LIST
55222: LIST
55223: LIST
55224: LIST
55225: LIST
55226: LIST
55227: LIST
55228: LIST
55229: LIST
55230: LIST
55231: PUSH
55232: EMPTY
55233: LIST
55234: LIST
55235: ST_TO_ADDR
55236: GO 56011
55238: LD_INT 16
55240: DOUBLE
55241: EQUAL
55242: IFTRUE 55246
55244: GO 55382
55246: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
55247: LD_ADDR_VAR 0 2
55251: PUSH
55252: LD_INT 2
55254: PUSH
55255: LD_INT 4
55257: PUSH
55258: LD_INT 5
55260: PUSH
55261: LD_INT 7
55263: PUSH
55264: LD_INT 11
55266: PUSH
55267: LD_INT 12
55269: PUSH
55270: LD_INT 15
55272: PUSH
55273: LD_INT 16
55275: PUSH
55276: LD_INT 20
55278: PUSH
55279: LD_INT 21
55281: PUSH
55282: LD_INT 22
55284: PUSH
55285: LD_INT 23
55287: PUSH
55288: LD_INT 25
55290: PUSH
55291: LD_INT 26
55293: PUSH
55294: LD_INT 30
55296: PUSH
55297: LD_INT 31
55299: PUSH
55300: LD_INT 32
55302: PUSH
55303: LD_INT 33
55305: PUSH
55306: LD_INT 34
55308: PUSH
55309: EMPTY
55310: LIST
55311: LIST
55312: LIST
55313: LIST
55314: LIST
55315: LIST
55316: LIST
55317: LIST
55318: LIST
55319: LIST
55320: LIST
55321: LIST
55322: LIST
55323: LIST
55324: LIST
55325: LIST
55326: LIST
55327: LIST
55328: LIST
55329: PUSH
55330: LD_INT 101
55332: PUSH
55333: LD_INT 102
55335: PUSH
55336: LD_INT 103
55338: PUSH
55339: LD_INT 106
55341: PUSH
55342: LD_INT 108
55344: PUSH
55345: LD_INT 112
55347: PUSH
55348: LD_INT 113
55350: PUSH
55351: LD_INT 114
55353: PUSH
55354: LD_INT 116
55356: PUSH
55357: LD_INT 117
55359: PUSH
55360: LD_INT 118
55362: PUSH
55363: EMPTY
55364: LIST
55365: LIST
55366: LIST
55367: LIST
55368: LIST
55369: LIST
55370: LIST
55371: LIST
55372: LIST
55373: LIST
55374: LIST
55375: PUSH
55376: EMPTY
55377: LIST
55378: LIST
55379: ST_TO_ADDR
55380: GO 56011
55382: LD_INT 17
55384: DOUBLE
55385: EQUAL
55386: IFTRUE 55390
55388: GO 55614
55390: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
55391: LD_ADDR_VAR 0 2
55395: PUSH
55396: LD_INT 1
55398: PUSH
55399: LD_INT 2
55401: PUSH
55402: LD_INT 3
55404: PUSH
55405: LD_INT 4
55407: PUSH
55408: LD_INT 5
55410: PUSH
55411: LD_INT 6
55413: PUSH
55414: LD_INT 7
55416: PUSH
55417: LD_INT 8
55419: PUSH
55420: LD_INT 9
55422: PUSH
55423: LD_INT 10
55425: PUSH
55426: LD_INT 11
55428: PUSH
55429: LD_INT 12
55431: PUSH
55432: LD_INT 13
55434: PUSH
55435: LD_INT 14
55437: PUSH
55438: LD_INT 15
55440: PUSH
55441: LD_INT 16
55443: PUSH
55444: LD_INT 17
55446: PUSH
55447: LD_INT 18
55449: PUSH
55450: LD_INT 19
55452: PUSH
55453: LD_INT 20
55455: PUSH
55456: LD_INT 21
55458: PUSH
55459: LD_INT 22
55461: PUSH
55462: LD_INT 23
55464: PUSH
55465: LD_INT 24
55467: PUSH
55468: LD_INT 25
55470: PUSH
55471: LD_INT 26
55473: PUSH
55474: LD_INT 27
55476: PUSH
55477: LD_INT 28
55479: PUSH
55480: LD_INT 29
55482: PUSH
55483: LD_INT 30
55485: PUSH
55486: LD_INT 31
55488: PUSH
55489: LD_INT 32
55491: PUSH
55492: LD_INT 33
55494: PUSH
55495: LD_INT 34
55497: PUSH
55498: LD_INT 36
55500: PUSH
55501: EMPTY
55502: LIST
55503: LIST
55504: LIST
55505: LIST
55506: LIST
55507: LIST
55508: LIST
55509: LIST
55510: LIST
55511: LIST
55512: LIST
55513: LIST
55514: LIST
55515: LIST
55516: LIST
55517: LIST
55518: LIST
55519: LIST
55520: LIST
55521: LIST
55522: LIST
55523: LIST
55524: LIST
55525: LIST
55526: LIST
55527: LIST
55528: LIST
55529: LIST
55530: LIST
55531: LIST
55532: LIST
55533: LIST
55534: LIST
55535: LIST
55536: LIST
55537: PUSH
55538: LD_INT 101
55540: PUSH
55541: LD_INT 102
55543: PUSH
55544: LD_INT 103
55546: PUSH
55547: LD_INT 104
55549: PUSH
55550: LD_INT 105
55552: PUSH
55553: LD_INT 106
55555: PUSH
55556: LD_INT 107
55558: PUSH
55559: LD_INT 108
55561: PUSH
55562: LD_INT 109
55564: PUSH
55565: LD_INT 110
55567: PUSH
55568: LD_INT 111
55570: PUSH
55571: LD_INT 112
55573: PUSH
55574: LD_INT 113
55576: PUSH
55577: LD_INT 114
55579: PUSH
55580: LD_INT 116
55582: PUSH
55583: LD_INT 117
55585: PUSH
55586: LD_INT 118
55588: PUSH
55589: EMPTY
55590: LIST
55591: LIST
55592: LIST
55593: LIST
55594: LIST
55595: LIST
55596: LIST
55597: LIST
55598: LIST
55599: LIST
55600: LIST
55601: LIST
55602: LIST
55603: LIST
55604: LIST
55605: LIST
55606: LIST
55607: PUSH
55608: EMPTY
55609: LIST
55610: LIST
55611: ST_TO_ADDR
55612: GO 56011
55614: LD_INT 18
55616: DOUBLE
55617: EQUAL
55618: IFTRUE 55622
55620: GO 55770
55622: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
55623: LD_ADDR_VAR 0 2
55627: PUSH
55628: LD_INT 2
55630: PUSH
55631: LD_INT 4
55633: PUSH
55634: LD_INT 5
55636: PUSH
55637: LD_INT 7
55639: PUSH
55640: LD_INT 11
55642: PUSH
55643: LD_INT 12
55645: PUSH
55646: LD_INT 15
55648: PUSH
55649: LD_INT 16
55651: PUSH
55652: LD_INT 20
55654: PUSH
55655: LD_INT 21
55657: PUSH
55658: LD_INT 22
55660: PUSH
55661: LD_INT 23
55663: PUSH
55664: LD_INT 25
55666: PUSH
55667: LD_INT 26
55669: PUSH
55670: LD_INT 30
55672: PUSH
55673: LD_INT 31
55675: PUSH
55676: LD_INT 32
55678: PUSH
55679: LD_INT 33
55681: PUSH
55682: LD_INT 34
55684: PUSH
55685: LD_INT 35
55687: PUSH
55688: LD_INT 36
55690: PUSH
55691: EMPTY
55692: LIST
55693: LIST
55694: LIST
55695: LIST
55696: LIST
55697: LIST
55698: LIST
55699: LIST
55700: LIST
55701: LIST
55702: LIST
55703: LIST
55704: LIST
55705: LIST
55706: LIST
55707: LIST
55708: LIST
55709: LIST
55710: LIST
55711: LIST
55712: LIST
55713: PUSH
55714: LD_INT 101
55716: PUSH
55717: LD_INT 102
55719: PUSH
55720: LD_INT 103
55722: PUSH
55723: LD_INT 106
55725: PUSH
55726: LD_INT 108
55728: PUSH
55729: LD_INT 112
55731: PUSH
55732: LD_INT 113
55734: PUSH
55735: LD_INT 114
55737: PUSH
55738: LD_INT 115
55740: PUSH
55741: LD_INT 116
55743: PUSH
55744: LD_INT 117
55746: PUSH
55747: LD_INT 118
55749: PUSH
55750: EMPTY
55751: LIST
55752: LIST
55753: LIST
55754: LIST
55755: LIST
55756: LIST
55757: LIST
55758: LIST
55759: LIST
55760: LIST
55761: LIST
55762: LIST
55763: PUSH
55764: EMPTY
55765: LIST
55766: LIST
55767: ST_TO_ADDR
55768: GO 56011
55770: LD_INT 19
55772: DOUBLE
55773: EQUAL
55774: IFTRUE 55778
55776: GO 56010
55778: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
55779: LD_ADDR_VAR 0 2
55783: PUSH
55784: LD_INT 1
55786: PUSH
55787: LD_INT 2
55789: PUSH
55790: LD_INT 3
55792: PUSH
55793: LD_INT 4
55795: PUSH
55796: LD_INT 5
55798: PUSH
55799: LD_INT 6
55801: PUSH
55802: LD_INT 7
55804: PUSH
55805: LD_INT 8
55807: PUSH
55808: LD_INT 9
55810: PUSH
55811: LD_INT 10
55813: PUSH
55814: LD_INT 11
55816: PUSH
55817: LD_INT 12
55819: PUSH
55820: LD_INT 13
55822: PUSH
55823: LD_INT 14
55825: PUSH
55826: LD_INT 15
55828: PUSH
55829: LD_INT 16
55831: PUSH
55832: LD_INT 17
55834: PUSH
55835: LD_INT 18
55837: PUSH
55838: LD_INT 19
55840: PUSH
55841: LD_INT 20
55843: PUSH
55844: LD_INT 21
55846: PUSH
55847: LD_INT 22
55849: PUSH
55850: LD_INT 23
55852: PUSH
55853: LD_INT 24
55855: PUSH
55856: LD_INT 25
55858: PUSH
55859: LD_INT 26
55861: PUSH
55862: LD_INT 27
55864: PUSH
55865: LD_INT 28
55867: PUSH
55868: LD_INT 29
55870: PUSH
55871: LD_INT 30
55873: PUSH
55874: LD_INT 31
55876: PUSH
55877: LD_INT 32
55879: PUSH
55880: LD_INT 33
55882: PUSH
55883: LD_INT 34
55885: PUSH
55886: LD_INT 35
55888: PUSH
55889: LD_INT 36
55891: PUSH
55892: EMPTY
55893: LIST
55894: LIST
55895: LIST
55896: LIST
55897: LIST
55898: LIST
55899: LIST
55900: LIST
55901: LIST
55902: LIST
55903: LIST
55904: LIST
55905: LIST
55906: LIST
55907: LIST
55908: LIST
55909: LIST
55910: LIST
55911: LIST
55912: LIST
55913: LIST
55914: LIST
55915: LIST
55916: LIST
55917: LIST
55918: LIST
55919: LIST
55920: LIST
55921: LIST
55922: LIST
55923: LIST
55924: LIST
55925: LIST
55926: LIST
55927: LIST
55928: LIST
55929: PUSH
55930: LD_INT 101
55932: PUSH
55933: LD_INT 102
55935: PUSH
55936: LD_INT 103
55938: PUSH
55939: LD_INT 104
55941: PUSH
55942: LD_INT 105
55944: PUSH
55945: LD_INT 106
55947: PUSH
55948: LD_INT 107
55950: PUSH
55951: LD_INT 108
55953: PUSH
55954: LD_INT 109
55956: PUSH
55957: LD_INT 110
55959: PUSH
55960: LD_INT 111
55962: PUSH
55963: LD_INT 112
55965: PUSH
55966: LD_INT 113
55968: PUSH
55969: LD_INT 114
55971: PUSH
55972: LD_INT 115
55974: PUSH
55975: LD_INT 116
55977: PUSH
55978: LD_INT 117
55980: PUSH
55981: LD_INT 118
55983: PUSH
55984: EMPTY
55985: LIST
55986: LIST
55987: LIST
55988: LIST
55989: LIST
55990: LIST
55991: LIST
55992: LIST
55993: LIST
55994: LIST
55995: LIST
55996: LIST
55997: LIST
55998: LIST
55999: LIST
56000: LIST
56001: LIST
56002: LIST
56003: PUSH
56004: EMPTY
56005: LIST
56006: LIST
56007: ST_TO_ADDR
56008: GO 56011
56010: POP
// end else
56011: GO 56242
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
56013: LD_ADDR_VAR 0 2
56017: PUSH
56018: LD_INT 1
56020: PUSH
56021: LD_INT 2
56023: PUSH
56024: LD_INT 3
56026: PUSH
56027: LD_INT 4
56029: PUSH
56030: LD_INT 5
56032: PUSH
56033: LD_INT 6
56035: PUSH
56036: LD_INT 7
56038: PUSH
56039: LD_INT 8
56041: PUSH
56042: LD_INT 9
56044: PUSH
56045: LD_INT 10
56047: PUSH
56048: LD_INT 11
56050: PUSH
56051: LD_INT 12
56053: PUSH
56054: LD_INT 13
56056: PUSH
56057: LD_INT 14
56059: PUSH
56060: LD_INT 15
56062: PUSH
56063: LD_INT 16
56065: PUSH
56066: LD_INT 17
56068: PUSH
56069: LD_INT 18
56071: PUSH
56072: LD_INT 19
56074: PUSH
56075: LD_INT 20
56077: PUSH
56078: LD_INT 21
56080: PUSH
56081: LD_INT 22
56083: PUSH
56084: LD_INT 23
56086: PUSH
56087: LD_INT 24
56089: PUSH
56090: LD_INT 25
56092: PUSH
56093: LD_INT 26
56095: PUSH
56096: LD_INT 27
56098: PUSH
56099: LD_INT 28
56101: PUSH
56102: LD_INT 29
56104: PUSH
56105: LD_INT 30
56107: PUSH
56108: LD_INT 31
56110: PUSH
56111: LD_INT 32
56113: PUSH
56114: LD_INT 33
56116: PUSH
56117: LD_INT 34
56119: PUSH
56120: LD_INT 35
56122: PUSH
56123: LD_INT 36
56125: PUSH
56126: EMPTY
56127: LIST
56128: LIST
56129: LIST
56130: LIST
56131: LIST
56132: LIST
56133: LIST
56134: LIST
56135: LIST
56136: LIST
56137: LIST
56138: LIST
56139: LIST
56140: LIST
56141: LIST
56142: LIST
56143: LIST
56144: LIST
56145: LIST
56146: LIST
56147: LIST
56148: LIST
56149: LIST
56150: LIST
56151: LIST
56152: LIST
56153: LIST
56154: LIST
56155: LIST
56156: LIST
56157: LIST
56158: LIST
56159: LIST
56160: LIST
56161: LIST
56162: LIST
56163: PUSH
56164: LD_INT 101
56166: PUSH
56167: LD_INT 102
56169: PUSH
56170: LD_INT 103
56172: PUSH
56173: LD_INT 104
56175: PUSH
56176: LD_INT 105
56178: PUSH
56179: LD_INT 106
56181: PUSH
56182: LD_INT 107
56184: PUSH
56185: LD_INT 108
56187: PUSH
56188: LD_INT 109
56190: PUSH
56191: LD_INT 110
56193: PUSH
56194: LD_INT 111
56196: PUSH
56197: LD_INT 112
56199: PUSH
56200: LD_INT 113
56202: PUSH
56203: LD_INT 114
56205: PUSH
56206: LD_INT 115
56208: PUSH
56209: LD_INT 116
56211: PUSH
56212: LD_INT 117
56214: PUSH
56215: LD_INT 118
56217: PUSH
56218: EMPTY
56219: LIST
56220: LIST
56221: LIST
56222: LIST
56223: LIST
56224: LIST
56225: LIST
56226: LIST
56227: LIST
56228: LIST
56229: LIST
56230: LIST
56231: LIST
56232: LIST
56233: LIST
56234: LIST
56235: LIST
56236: LIST
56237: PUSH
56238: EMPTY
56239: LIST
56240: LIST
56241: ST_TO_ADDR
// if result then
56242: LD_VAR 0 2
56246: IFFALSE 57032
// begin normal :=  ;
56248: LD_ADDR_VAR 0 5
56252: PUSH
56253: LD_STRING 
56255: ST_TO_ADDR
// hardcore :=  ;
56256: LD_ADDR_VAR 0 6
56260: PUSH
56261: LD_STRING 
56263: ST_TO_ADDR
// active :=  ;
56264: LD_ADDR_VAR 0 7
56268: PUSH
56269: LD_STRING 
56271: ST_TO_ADDR
// for i = 1 to normalCounter do
56272: LD_ADDR_VAR 0 8
56276: PUSH
56277: DOUBLE
56278: LD_INT 1
56280: DEC
56281: ST_TO_ADDR
56282: LD_EXP 40
56286: PUSH
56287: FOR_TO
56288: IFFALSE 56389
// begin tmp := 0 ;
56290: LD_ADDR_VAR 0 3
56294: PUSH
56295: LD_STRING 0
56297: ST_TO_ADDR
// if result [ 1 ] then
56298: LD_VAR 0 2
56302: PUSH
56303: LD_INT 1
56305: ARRAY
56306: IFFALSE 56371
// if result [ 1 ] [ 1 ] = i then
56308: LD_VAR 0 2
56312: PUSH
56313: LD_INT 1
56315: ARRAY
56316: PUSH
56317: LD_INT 1
56319: ARRAY
56320: PUSH
56321: LD_VAR 0 8
56325: EQUAL
56326: IFFALSE 56371
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
56328: LD_ADDR_VAR 0 2
56332: PUSH
56333: LD_VAR 0 2
56337: PPUSH
56338: LD_INT 1
56340: PPUSH
56341: LD_VAR 0 2
56345: PUSH
56346: LD_INT 1
56348: ARRAY
56349: PPUSH
56350: LD_INT 1
56352: PPUSH
56353: CALL_OW 3
56357: PPUSH
56358: CALL_OW 1
56362: ST_TO_ADDR
// tmp := 1 ;
56363: LD_ADDR_VAR 0 3
56367: PUSH
56368: LD_STRING 1
56370: ST_TO_ADDR
// end ; normal := normal & tmp ;
56371: LD_ADDR_VAR 0 5
56375: PUSH
56376: LD_VAR 0 5
56380: PUSH
56381: LD_VAR 0 3
56385: STR
56386: ST_TO_ADDR
// end ;
56387: GO 56287
56389: POP
56390: POP
// for i = 1 to hardcoreCounter do
56391: LD_ADDR_VAR 0 8
56395: PUSH
56396: DOUBLE
56397: LD_INT 1
56399: DEC
56400: ST_TO_ADDR
56401: LD_EXP 41
56405: PUSH
56406: FOR_TO
56407: IFFALSE 56512
// begin tmp := 0 ;
56409: LD_ADDR_VAR 0 3
56413: PUSH
56414: LD_STRING 0
56416: ST_TO_ADDR
// if result [ 2 ] then
56417: LD_VAR 0 2
56421: PUSH
56422: LD_INT 2
56424: ARRAY
56425: IFFALSE 56494
// if result [ 2 ] [ 1 ] = 100 + i then
56427: LD_VAR 0 2
56431: PUSH
56432: LD_INT 2
56434: ARRAY
56435: PUSH
56436: LD_INT 1
56438: ARRAY
56439: PUSH
56440: LD_INT 100
56442: PUSH
56443: LD_VAR 0 8
56447: PLUS
56448: EQUAL
56449: IFFALSE 56494
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
56451: LD_ADDR_VAR 0 2
56455: PUSH
56456: LD_VAR 0 2
56460: PPUSH
56461: LD_INT 2
56463: PPUSH
56464: LD_VAR 0 2
56468: PUSH
56469: LD_INT 2
56471: ARRAY
56472: PPUSH
56473: LD_INT 1
56475: PPUSH
56476: CALL_OW 3
56480: PPUSH
56481: CALL_OW 1
56485: ST_TO_ADDR
// tmp := 1 ;
56486: LD_ADDR_VAR 0 3
56490: PUSH
56491: LD_STRING 1
56493: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
56494: LD_ADDR_VAR 0 6
56498: PUSH
56499: LD_VAR 0 6
56503: PUSH
56504: LD_VAR 0 3
56508: STR
56509: ST_TO_ADDR
// end ;
56510: GO 56406
56512: POP
56513: POP
// if isGameLoad then
56514: LD_VAR 0 1
56518: IFFALSE 56993
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
56520: LD_ADDR_VAR 0 4
56524: PUSH
56525: LD_EXP 44
56529: PUSH
56530: LD_EXP 43
56534: PUSH
56535: LD_EXP 45
56539: PUSH
56540: LD_EXP 42
56544: PUSH
56545: LD_EXP 46
56549: PUSH
56550: LD_EXP 47
56554: PUSH
56555: LD_EXP 48
56559: PUSH
56560: LD_EXP 49
56564: PUSH
56565: LD_EXP 50
56569: PUSH
56570: LD_EXP 51
56574: PUSH
56575: LD_EXP 52
56579: PUSH
56580: LD_EXP 53
56584: PUSH
56585: LD_EXP 54
56589: PUSH
56590: LD_EXP 55
56594: PUSH
56595: LD_EXP 63
56599: PUSH
56600: LD_EXP 64
56604: PUSH
56605: LD_EXP 65
56609: PUSH
56610: LD_EXP 66
56614: PUSH
56615: LD_EXP 68
56619: PUSH
56620: LD_EXP 69
56624: PUSH
56625: LD_EXP 70
56629: PUSH
56630: LD_EXP 73
56634: PUSH
56635: LD_EXP 75
56639: PUSH
56640: LD_EXP 76
56644: PUSH
56645: LD_EXP 77
56649: PUSH
56650: LD_EXP 79
56654: PUSH
56655: LD_EXP 80
56659: PUSH
56660: LD_EXP 83
56664: PUSH
56665: LD_EXP 84
56669: PUSH
56670: LD_EXP 85
56674: PUSH
56675: LD_EXP 86
56679: PUSH
56680: LD_EXP 87
56684: PUSH
56685: LD_EXP 88
56689: PUSH
56690: LD_EXP 89
56694: PUSH
56695: LD_EXP 90
56699: PUSH
56700: LD_EXP 91
56704: PUSH
56705: LD_EXP 56
56709: PUSH
56710: LD_EXP 57
56714: PUSH
56715: LD_EXP 60
56719: PUSH
56720: LD_EXP 61
56724: PUSH
56725: LD_EXP 62
56729: PUSH
56730: LD_EXP 58
56734: PUSH
56735: LD_EXP 59
56739: PUSH
56740: LD_EXP 67
56744: PUSH
56745: LD_EXP 71
56749: PUSH
56750: LD_EXP 72
56754: PUSH
56755: LD_EXP 74
56759: PUSH
56760: LD_EXP 78
56764: PUSH
56765: LD_EXP 81
56769: PUSH
56770: LD_EXP 82
56774: PUSH
56775: LD_EXP 92
56779: PUSH
56780: LD_EXP 93
56784: PUSH
56785: LD_EXP 94
56789: PUSH
56790: LD_EXP 95
56794: PUSH
56795: EMPTY
56796: LIST
56797: LIST
56798: LIST
56799: LIST
56800: LIST
56801: LIST
56802: LIST
56803: LIST
56804: LIST
56805: LIST
56806: LIST
56807: LIST
56808: LIST
56809: LIST
56810: LIST
56811: LIST
56812: LIST
56813: LIST
56814: LIST
56815: LIST
56816: LIST
56817: LIST
56818: LIST
56819: LIST
56820: LIST
56821: LIST
56822: LIST
56823: LIST
56824: LIST
56825: LIST
56826: LIST
56827: LIST
56828: LIST
56829: LIST
56830: LIST
56831: LIST
56832: LIST
56833: LIST
56834: LIST
56835: LIST
56836: LIST
56837: LIST
56838: LIST
56839: LIST
56840: LIST
56841: LIST
56842: LIST
56843: LIST
56844: LIST
56845: LIST
56846: LIST
56847: LIST
56848: LIST
56849: LIST
56850: ST_TO_ADDR
// tmp :=  ;
56851: LD_ADDR_VAR 0 3
56855: PUSH
56856: LD_STRING 
56858: ST_TO_ADDR
// for i = 1 to normalCounter do
56859: LD_ADDR_VAR 0 8
56863: PUSH
56864: DOUBLE
56865: LD_INT 1
56867: DEC
56868: ST_TO_ADDR
56869: LD_EXP 40
56873: PUSH
56874: FOR_TO
56875: IFFALSE 56911
// begin if flags [ i ] then
56877: LD_VAR 0 4
56881: PUSH
56882: LD_VAR 0 8
56886: ARRAY
56887: IFFALSE 56909
// tmp := tmp & i & ; ;
56889: LD_ADDR_VAR 0 3
56893: PUSH
56894: LD_VAR 0 3
56898: PUSH
56899: LD_VAR 0 8
56903: STR
56904: PUSH
56905: LD_STRING ;
56907: STR
56908: ST_TO_ADDR
// end ;
56909: GO 56874
56911: POP
56912: POP
// for i = 1 to hardcoreCounter do
56913: LD_ADDR_VAR 0 8
56917: PUSH
56918: DOUBLE
56919: LD_INT 1
56921: DEC
56922: ST_TO_ADDR
56923: LD_EXP 41
56927: PUSH
56928: FOR_TO
56929: IFFALSE 56975
// begin if flags [ normalCounter + i ] then
56931: LD_VAR 0 4
56935: PUSH
56936: LD_EXP 40
56940: PUSH
56941: LD_VAR 0 8
56945: PLUS
56946: ARRAY
56947: IFFALSE 56973
// tmp := tmp & ( 100 + i ) & ; ;
56949: LD_ADDR_VAR 0 3
56953: PUSH
56954: LD_VAR 0 3
56958: PUSH
56959: LD_INT 100
56961: PUSH
56962: LD_VAR 0 8
56966: PLUS
56967: STR
56968: PUSH
56969: LD_STRING ;
56971: STR
56972: ST_TO_ADDR
// end ;
56973: GO 56928
56975: POP
56976: POP
// if tmp then
56977: LD_VAR 0 3
56981: IFFALSE 56993
// active := tmp ;
56983: LD_ADDR_VAR 0 7
56987: PUSH
56988: LD_VAR 0 3
56992: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
56993: LD_STRING getStreamItemsFromMission("
56995: PUSH
56996: LD_VAR 0 5
57000: STR
57001: PUSH
57002: LD_STRING ","
57004: STR
57005: PUSH
57006: LD_VAR 0 6
57010: STR
57011: PUSH
57012: LD_STRING ","
57014: STR
57015: PUSH
57016: LD_VAR 0 7
57020: STR
57021: PUSH
57022: LD_STRING ")
57024: STR
57025: PPUSH
57026: CALL_OW 559
// end else
57030: GO 57039
// ToLua ( getStreamItemsFromMission("","","") ) ;
57032: LD_STRING getStreamItemsFromMission("","","")
57034: PPUSH
57035: CALL_OW 559
// end ;
57039: LD_VAR 0 2
57043: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
57044: LD_EXP 39
57048: PUSH
57049: LD_EXP 44
57053: AND
57054: IFFALSE 57178
57056: GO 57058
57058: DISABLE
57059: LD_INT 0
57061: PPUSH
57062: PPUSH
// begin enable ;
57063: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
57064: LD_ADDR_VAR 0 2
57068: PUSH
57069: LD_INT 22
57071: PUSH
57072: LD_OWVAR 2
57076: PUSH
57077: EMPTY
57078: LIST
57079: LIST
57080: PUSH
57081: LD_INT 2
57083: PUSH
57084: LD_INT 34
57086: PUSH
57087: LD_INT 7
57089: PUSH
57090: EMPTY
57091: LIST
57092: LIST
57093: PUSH
57094: LD_INT 34
57096: PUSH
57097: LD_INT 45
57099: PUSH
57100: EMPTY
57101: LIST
57102: LIST
57103: PUSH
57104: LD_INT 34
57106: PUSH
57107: LD_INT 28
57109: PUSH
57110: EMPTY
57111: LIST
57112: LIST
57113: PUSH
57114: LD_INT 34
57116: PUSH
57117: LD_INT 47
57119: PUSH
57120: EMPTY
57121: LIST
57122: LIST
57123: PUSH
57124: EMPTY
57125: LIST
57126: LIST
57127: LIST
57128: LIST
57129: LIST
57130: PUSH
57131: EMPTY
57132: LIST
57133: LIST
57134: PPUSH
57135: CALL_OW 69
57139: ST_TO_ADDR
// if not tmp then
57140: LD_VAR 0 2
57144: NOT
57145: IFFALSE 57149
// exit ;
57147: GO 57178
// for i in tmp do
57149: LD_ADDR_VAR 0 1
57153: PUSH
57154: LD_VAR 0 2
57158: PUSH
57159: FOR_IN
57160: IFFALSE 57176
// begin SetLives ( i , 0 ) ;
57162: LD_VAR 0 1
57166: PPUSH
57167: LD_INT 0
57169: PPUSH
57170: CALL_OW 234
// end ;
57174: GO 57159
57176: POP
57177: POP
// end ;
57178: PPOPN 2
57180: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
57181: LD_EXP 39
57185: PUSH
57186: LD_EXP 45
57190: AND
57191: IFFALSE 57275
57193: GO 57195
57195: DISABLE
57196: LD_INT 0
57198: PPUSH
57199: PPUSH
// begin enable ;
57200: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
57201: LD_ADDR_VAR 0 2
57205: PUSH
57206: LD_INT 22
57208: PUSH
57209: LD_OWVAR 2
57213: PUSH
57214: EMPTY
57215: LIST
57216: LIST
57217: PUSH
57218: LD_INT 32
57220: PUSH
57221: LD_INT 3
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: PUSH
57228: EMPTY
57229: LIST
57230: LIST
57231: PPUSH
57232: CALL_OW 69
57236: ST_TO_ADDR
// if not tmp then
57237: LD_VAR 0 2
57241: NOT
57242: IFFALSE 57246
// exit ;
57244: GO 57275
// for i in tmp do
57246: LD_ADDR_VAR 0 1
57250: PUSH
57251: LD_VAR 0 2
57255: PUSH
57256: FOR_IN
57257: IFFALSE 57273
// begin SetLives ( i , 0 ) ;
57259: LD_VAR 0 1
57263: PPUSH
57264: LD_INT 0
57266: PPUSH
57267: CALL_OW 234
// end ;
57271: GO 57256
57273: POP
57274: POP
// end ;
57275: PPOPN 2
57277: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
57278: LD_EXP 39
57282: PUSH
57283: LD_EXP 42
57287: AND
57288: IFFALSE 57381
57290: GO 57292
57292: DISABLE
57293: LD_INT 0
57295: PPUSH
// begin enable ;
57296: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
57297: LD_ADDR_VAR 0 1
57301: PUSH
57302: LD_INT 22
57304: PUSH
57305: LD_OWVAR 2
57309: PUSH
57310: EMPTY
57311: LIST
57312: LIST
57313: PUSH
57314: LD_INT 2
57316: PUSH
57317: LD_INT 25
57319: PUSH
57320: LD_INT 5
57322: PUSH
57323: EMPTY
57324: LIST
57325: LIST
57326: PUSH
57327: LD_INT 25
57329: PUSH
57330: LD_INT 9
57332: PUSH
57333: EMPTY
57334: LIST
57335: LIST
57336: PUSH
57337: LD_INT 25
57339: PUSH
57340: LD_INT 8
57342: PUSH
57343: EMPTY
57344: LIST
57345: LIST
57346: PUSH
57347: EMPTY
57348: LIST
57349: LIST
57350: LIST
57351: LIST
57352: PUSH
57353: EMPTY
57354: LIST
57355: LIST
57356: PPUSH
57357: CALL_OW 69
57361: PUSH
57362: FOR_IN
57363: IFFALSE 57379
// begin SetClass ( i , 1 ) ;
57365: LD_VAR 0 1
57369: PPUSH
57370: LD_INT 1
57372: PPUSH
57373: CALL_OW 336
// end ;
57377: GO 57362
57379: POP
57380: POP
// end ;
57381: PPOPN 1
57383: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
57384: LD_EXP 39
57388: PUSH
57389: LD_EXP 43
57393: AND
57394: PUSH
57395: LD_OWVAR 65
57399: PUSH
57400: LD_INT 7
57402: LESS
57403: AND
57404: IFFALSE 57418
57406: GO 57408
57408: DISABLE
// begin enable ;
57409: ENABLE
// game_speed := 7 ;
57410: LD_ADDR_OWVAR 65
57414: PUSH
57415: LD_INT 7
57417: ST_TO_ADDR
// end ;
57418: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
57419: LD_EXP 39
57423: PUSH
57424: LD_EXP 46
57428: AND
57429: IFFALSE 57631
57431: GO 57433
57433: DISABLE
57434: LD_INT 0
57436: PPUSH
57437: PPUSH
57438: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
57439: LD_ADDR_VAR 0 3
57443: PUSH
57444: LD_INT 81
57446: PUSH
57447: LD_OWVAR 2
57451: PUSH
57452: EMPTY
57453: LIST
57454: LIST
57455: PUSH
57456: LD_INT 21
57458: PUSH
57459: LD_INT 1
57461: PUSH
57462: EMPTY
57463: LIST
57464: LIST
57465: PUSH
57466: EMPTY
57467: LIST
57468: LIST
57469: PPUSH
57470: CALL_OW 69
57474: ST_TO_ADDR
// if not tmp then
57475: LD_VAR 0 3
57479: NOT
57480: IFFALSE 57484
// exit ;
57482: GO 57631
// if tmp > 5 then
57484: LD_VAR 0 3
57488: PUSH
57489: LD_INT 5
57491: GREATER
57492: IFFALSE 57504
// k := 5 else
57494: LD_ADDR_VAR 0 2
57498: PUSH
57499: LD_INT 5
57501: ST_TO_ADDR
57502: GO 57514
// k := tmp ;
57504: LD_ADDR_VAR 0 2
57508: PUSH
57509: LD_VAR 0 3
57513: ST_TO_ADDR
// for i := 1 to k do
57514: LD_ADDR_VAR 0 1
57518: PUSH
57519: DOUBLE
57520: LD_INT 1
57522: DEC
57523: ST_TO_ADDR
57524: LD_VAR 0 2
57528: PUSH
57529: FOR_TO
57530: IFFALSE 57629
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
57532: LD_VAR 0 3
57536: PUSH
57537: LD_VAR 0 1
57541: ARRAY
57542: PPUSH
57543: LD_VAR 0 1
57547: PUSH
57548: LD_INT 4
57550: MOD
57551: PUSH
57552: LD_INT 1
57554: PLUS
57555: PPUSH
57556: CALL_OW 259
57560: PUSH
57561: LD_INT 10
57563: LESS
57564: IFFALSE 57627
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
57566: LD_VAR 0 3
57570: PUSH
57571: LD_VAR 0 1
57575: ARRAY
57576: PPUSH
57577: LD_VAR 0 1
57581: PUSH
57582: LD_INT 4
57584: MOD
57585: PUSH
57586: LD_INT 1
57588: PLUS
57589: PPUSH
57590: LD_VAR 0 3
57594: PUSH
57595: LD_VAR 0 1
57599: ARRAY
57600: PPUSH
57601: LD_VAR 0 1
57605: PUSH
57606: LD_INT 4
57608: MOD
57609: PUSH
57610: LD_INT 1
57612: PLUS
57613: PPUSH
57614: CALL_OW 259
57618: PUSH
57619: LD_INT 1
57621: PLUS
57622: PPUSH
57623: CALL_OW 237
57627: GO 57529
57629: POP
57630: POP
// end ;
57631: PPOPN 3
57633: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
57634: LD_EXP 39
57638: PUSH
57639: LD_EXP 47
57643: AND
57644: IFFALSE 57664
57646: GO 57648
57648: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
57649: LD_INT 4
57651: PPUSH
57652: LD_OWVAR 2
57656: PPUSH
57657: LD_INT 0
57659: PPUSH
57660: CALL_OW 324
57664: END
// every 0 0$1 trigger StreamModeActive and sShovel do
57665: LD_EXP 39
57669: PUSH
57670: LD_EXP 76
57674: AND
57675: IFFALSE 57695
57677: GO 57679
57679: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
57680: LD_INT 19
57682: PPUSH
57683: LD_OWVAR 2
57687: PPUSH
57688: LD_INT 0
57690: PPUSH
57691: CALL_OW 324
57695: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
57696: LD_EXP 39
57700: PUSH
57701: LD_EXP 48
57705: AND
57706: IFFALSE 57808
57708: GO 57710
57710: DISABLE
57711: LD_INT 0
57713: PPUSH
57714: PPUSH
// begin enable ;
57715: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
57716: LD_ADDR_VAR 0 2
57720: PUSH
57721: LD_INT 22
57723: PUSH
57724: LD_OWVAR 2
57728: PUSH
57729: EMPTY
57730: LIST
57731: LIST
57732: PUSH
57733: LD_INT 2
57735: PUSH
57736: LD_INT 34
57738: PUSH
57739: LD_INT 11
57741: PUSH
57742: EMPTY
57743: LIST
57744: LIST
57745: PUSH
57746: LD_INT 34
57748: PUSH
57749: LD_INT 30
57751: PUSH
57752: EMPTY
57753: LIST
57754: LIST
57755: PUSH
57756: EMPTY
57757: LIST
57758: LIST
57759: LIST
57760: PUSH
57761: EMPTY
57762: LIST
57763: LIST
57764: PPUSH
57765: CALL_OW 69
57769: ST_TO_ADDR
// if not tmp then
57770: LD_VAR 0 2
57774: NOT
57775: IFFALSE 57779
// exit ;
57777: GO 57808
// for i in tmp do
57779: LD_ADDR_VAR 0 1
57783: PUSH
57784: LD_VAR 0 2
57788: PUSH
57789: FOR_IN
57790: IFFALSE 57806
// begin SetLives ( i , 0 ) ;
57792: LD_VAR 0 1
57796: PPUSH
57797: LD_INT 0
57799: PPUSH
57800: CALL_OW 234
// end ;
57804: GO 57789
57806: POP
57807: POP
// end ;
57808: PPOPN 2
57810: END
// every 0 0$1 trigger StreamModeActive and sBunker do
57811: LD_EXP 39
57815: PUSH
57816: LD_EXP 49
57820: AND
57821: IFFALSE 57841
57823: GO 57825
57825: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
57826: LD_INT 32
57828: PPUSH
57829: LD_OWVAR 2
57833: PPUSH
57834: LD_INT 0
57836: PPUSH
57837: CALL_OW 324
57841: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
57842: LD_EXP 39
57846: PUSH
57847: LD_EXP 50
57851: AND
57852: IFFALSE 58033
57854: GO 57856
57856: DISABLE
57857: LD_INT 0
57859: PPUSH
57860: PPUSH
57861: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
57862: LD_ADDR_VAR 0 2
57866: PUSH
57867: LD_INT 22
57869: PUSH
57870: LD_OWVAR 2
57874: PUSH
57875: EMPTY
57876: LIST
57877: LIST
57878: PUSH
57879: LD_INT 33
57881: PUSH
57882: LD_INT 3
57884: PUSH
57885: EMPTY
57886: LIST
57887: LIST
57888: PUSH
57889: EMPTY
57890: LIST
57891: LIST
57892: PPUSH
57893: CALL_OW 69
57897: ST_TO_ADDR
// if not tmp then
57898: LD_VAR 0 2
57902: NOT
57903: IFFALSE 57907
// exit ;
57905: GO 58033
// side := 0 ;
57907: LD_ADDR_VAR 0 3
57911: PUSH
57912: LD_INT 0
57914: ST_TO_ADDR
// for i := 1 to 8 do
57915: LD_ADDR_VAR 0 1
57919: PUSH
57920: DOUBLE
57921: LD_INT 1
57923: DEC
57924: ST_TO_ADDR
57925: LD_INT 8
57927: PUSH
57928: FOR_TO
57929: IFFALSE 57977
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
57931: LD_OWVAR 2
57935: PUSH
57936: LD_VAR 0 1
57940: NONEQUAL
57941: PUSH
57942: LD_OWVAR 2
57946: PPUSH
57947: LD_VAR 0 1
57951: PPUSH
57952: CALL_OW 81
57956: PUSH
57957: LD_INT 2
57959: EQUAL
57960: AND
57961: IFFALSE 57975
// begin side := i ;
57963: LD_ADDR_VAR 0 3
57967: PUSH
57968: LD_VAR 0 1
57972: ST_TO_ADDR
// break ;
57973: GO 57977
// end ;
57975: GO 57928
57977: POP
57978: POP
// if not side then
57979: LD_VAR 0 3
57983: NOT
57984: IFFALSE 57988
// exit ;
57986: GO 58033
// for i := 1 to tmp do
57988: LD_ADDR_VAR 0 1
57992: PUSH
57993: DOUBLE
57994: LD_INT 1
57996: DEC
57997: ST_TO_ADDR
57998: LD_VAR 0 2
58002: PUSH
58003: FOR_TO
58004: IFFALSE 58031
// if Prob ( 60 ) then
58006: LD_INT 60
58008: PPUSH
58009: CALL_OW 13
58013: IFFALSE 58029
// SetSide ( i , side ) ;
58015: LD_VAR 0 1
58019: PPUSH
58020: LD_VAR 0 3
58024: PPUSH
58025: CALL_OW 235
58029: GO 58003
58031: POP
58032: POP
// end ;
58033: PPOPN 3
58035: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
58036: LD_EXP 39
58040: PUSH
58041: LD_EXP 52
58045: AND
58046: IFFALSE 58165
58048: GO 58050
58050: DISABLE
58051: LD_INT 0
58053: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
58054: LD_ADDR_VAR 0 1
58058: PUSH
58059: LD_INT 22
58061: PUSH
58062: LD_OWVAR 2
58066: PUSH
58067: EMPTY
58068: LIST
58069: LIST
58070: PUSH
58071: LD_INT 21
58073: PUSH
58074: LD_INT 1
58076: PUSH
58077: EMPTY
58078: LIST
58079: LIST
58080: PUSH
58081: LD_INT 3
58083: PUSH
58084: LD_INT 23
58086: PUSH
58087: LD_INT 0
58089: PUSH
58090: EMPTY
58091: LIST
58092: LIST
58093: PUSH
58094: EMPTY
58095: LIST
58096: LIST
58097: PUSH
58098: EMPTY
58099: LIST
58100: LIST
58101: LIST
58102: PPUSH
58103: CALL_OW 69
58107: PUSH
58108: FOR_IN
58109: IFFALSE 58163
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
58111: LD_VAR 0 1
58115: PPUSH
58116: CALL_OW 257
58120: PUSH
58121: LD_INT 1
58123: PUSH
58124: LD_INT 2
58126: PUSH
58127: LD_INT 3
58129: PUSH
58130: LD_INT 4
58132: PUSH
58133: EMPTY
58134: LIST
58135: LIST
58136: LIST
58137: LIST
58138: IN
58139: IFFALSE 58161
// SetClass ( un , rand ( 1 , 4 ) ) ;
58141: LD_VAR 0 1
58145: PPUSH
58146: LD_INT 1
58148: PPUSH
58149: LD_INT 4
58151: PPUSH
58152: CALL_OW 12
58156: PPUSH
58157: CALL_OW 336
58161: GO 58108
58163: POP
58164: POP
// end ;
58165: PPOPN 1
58167: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
58168: LD_EXP 39
58172: PUSH
58173: LD_EXP 51
58177: AND
58178: IFFALSE 58257
58180: GO 58182
58182: DISABLE
58183: LD_INT 0
58185: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
58186: LD_ADDR_VAR 0 1
58190: PUSH
58191: LD_INT 22
58193: PUSH
58194: LD_OWVAR 2
58198: PUSH
58199: EMPTY
58200: LIST
58201: LIST
58202: PUSH
58203: LD_INT 21
58205: PUSH
58206: LD_INT 3
58208: PUSH
58209: EMPTY
58210: LIST
58211: LIST
58212: PUSH
58213: EMPTY
58214: LIST
58215: LIST
58216: PPUSH
58217: CALL_OW 69
58221: ST_TO_ADDR
// if not tmp then
58222: LD_VAR 0 1
58226: NOT
58227: IFFALSE 58231
// exit ;
58229: GO 58257
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
58231: LD_VAR 0 1
58235: PUSH
58236: LD_INT 1
58238: PPUSH
58239: LD_VAR 0 1
58243: PPUSH
58244: CALL_OW 12
58248: ARRAY
58249: PPUSH
58250: LD_INT 100
58252: PPUSH
58253: CALL_OW 234
// end ;
58257: PPOPN 1
58259: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
58260: LD_EXP 39
58264: PUSH
58265: LD_EXP 53
58269: AND
58270: IFFALSE 58368
58272: GO 58274
58274: DISABLE
58275: LD_INT 0
58277: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
58278: LD_ADDR_VAR 0 1
58282: PUSH
58283: LD_INT 22
58285: PUSH
58286: LD_OWVAR 2
58290: PUSH
58291: EMPTY
58292: LIST
58293: LIST
58294: PUSH
58295: LD_INT 21
58297: PUSH
58298: LD_INT 1
58300: PUSH
58301: EMPTY
58302: LIST
58303: LIST
58304: PUSH
58305: EMPTY
58306: LIST
58307: LIST
58308: PPUSH
58309: CALL_OW 69
58313: ST_TO_ADDR
// if not tmp then
58314: LD_VAR 0 1
58318: NOT
58319: IFFALSE 58323
// exit ;
58321: GO 58368
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
58323: LD_VAR 0 1
58327: PUSH
58328: LD_INT 1
58330: PPUSH
58331: LD_VAR 0 1
58335: PPUSH
58336: CALL_OW 12
58340: ARRAY
58341: PPUSH
58342: LD_INT 1
58344: PPUSH
58345: LD_INT 4
58347: PPUSH
58348: CALL_OW 12
58352: PPUSH
58353: LD_INT 3000
58355: PPUSH
58356: LD_INT 9000
58358: PPUSH
58359: CALL_OW 12
58363: PPUSH
58364: CALL_OW 492
// end ;
58368: PPOPN 1
58370: END
// every 0 0$1 trigger StreamModeActive and sDepot do
58371: LD_EXP 39
58375: PUSH
58376: LD_EXP 54
58380: AND
58381: IFFALSE 58401
58383: GO 58385
58385: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
58386: LD_INT 1
58388: PPUSH
58389: LD_OWVAR 2
58393: PPUSH
58394: LD_INT 0
58396: PPUSH
58397: CALL_OW 324
58401: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
58402: LD_EXP 39
58406: PUSH
58407: LD_EXP 55
58411: AND
58412: IFFALSE 58495
58414: GO 58416
58416: DISABLE
58417: LD_INT 0
58419: PPUSH
58420: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
58421: LD_ADDR_VAR 0 2
58425: PUSH
58426: LD_INT 22
58428: PUSH
58429: LD_OWVAR 2
58433: PUSH
58434: EMPTY
58435: LIST
58436: LIST
58437: PUSH
58438: LD_INT 21
58440: PUSH
58441: LD_INT 3
58443: PUSH
58444: EMPTY
58445: LIST
58446: LIST
58447: PUSH
58448: EMPTY
58449: LIST
58450: LIST
58451: PPUSH
58452: CALL_OW 69
58456: ST_TO_ADDR
// if not tmp then
58457: LD_VAR 0 2
58461: NOT
58462: IFFALSE 58466
// exit ;
58464: GO 58495
// for i in tmp do
58466: LD_ADDR_VAR 0 1
58470: PUSH
58471: LD_VAR 0 2
58475: PUSH
58476: FOR_IN
58477: IFFALSE 58493
// SetBLevel ( i , 10 ) ;
58479: LD_VAR 0 1
58483: PPUSH
58484: LD_INT 10
58486: PPUSH
58487: CALL_OW 241
58491: GO 58476
58493: POP
58494: POP
// end ;
58495: PPOPN 2
58497: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
58498: LD_EXP 39
58502: PUSH
58503: LD_EXP 56
58507: AND
58508: IFFALSE 58619
58510: GO 58512
58512: DISABLE
58513: LD_INT 0
58515: PPUSH
58516: PPUSH
58517: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
58518: LD_ADDR_VAR 0 3
58522: PUSH
58523: LD_INT 22
58525: PUSH
58526: LD_OWVAR 2
58530: PUSH
58531: EMPTY
58532: LIST
58533: LIST
58534: PUSH
58535: LD_INT 25
58537: PUSH
58538: LD_INT 1
58540: PUSH
58541: EMPTY
58542: LIST
58543: LIST
58544: PUSH
58545: EMPTY
58546: LIST
58547: LIST
58548: PPUSH
58549: CALL_OW 69
58553: ST_TO_ADDR
// if not tmp then
58554: LD_VAR 0 3
58558: NOT
58559: IFFALSE 58563
// exit ;
58561: GO 58619
// un := tmp [ rand ( 1 , tmp ) ] ;
58563: LD_ADDR_VAR 0 2
58567: PUSH
58568: LD_VAR 0 3
58572: PUSH
58573: LD_INT 1
58575: PPUSH
58576: LD_VAR 0 3
58580: PPUSH
58581: CALL_OW 12
58585: ARRAY
58586: ST_TO_ADDR
// if Crawls ( un ) then
58587: LD_VAR 0 2
58591: PPUSH
58592: CALL_OW 318
58596: IFFALSE 58607
// ComWalk ( un ) ;
58598: LD_VAR 0 2
58602: PPUSH
58603: CALL_OW 138
// SetClass ( un , class_sniper ) ;
58607: LD_VAR 0 2
58611: PPUSH
58612: LD_INT 5
58614: PPUSH
58615: CALL_OW 336
// end ;
58619: PPOPN 3
58621: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
58622: LD_EXP 39
58626: PUSH
58627: LD_EXP 57
58631: AND
58632: PUSH
58633: LD_OWVAR 67
58637: PUSH
58638: LD_INT 4
58640: LESS
58641: AND
58642: IFFALSE 58661
58644: GO 58646
58646: DISABLE
// begin Difficulty := Difficulty + 1 ;
58647: LD_ADDR_OWVAR 67
58651: PUSH
58652: LD_OWVAR 67
58656: PUSH
58657: LD_INT 1
58659: PLUS
58660: ST_TO_ADDR
// end ;
58661: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
58662: LD_EXP 39
58666: PUSH
58667: LD_EXP 58
58671: AND
58672: IFFALSE 58775
58674: GO 58676
58676: DISABLE
58677: LD_INT 0
58679: PPUSH
// begin for i := 1 to 5 do
58680: LD_ADDR_VAR 0 1
58684: PUSH
58685: DOUBLE
58686: LD_INT 1
58688: DEC
58689: ST_TO_ADDR
58690: LD_INT 5
58692: PUSH
58693: FOR_TO
58694: IFFALSE 58773
// begin uc_nation := nation_nature ;
58696: LD_ADDR_OWVAR 21
58700: PUSH
58701: LD_INT 0
58703: ST_TO_ADDR
// uc_side := 0 ;
58704: LD_ADDR_OWVAR 20
58708: PUSH
58709: LD_INT 0
58711: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
58712: LD_ADDR_OWVAR 29
58716: PUSH
58717: LD_INT 12
58719: PUSH
58720: LD_INT 12
58722: PUSH
58723: EMPTY
58724: LIST
58725: LIST
58726: ST_TO_ADDR
// hc_agressivity := 20 ;
58727: LD_ADDR_OWVAR 35
58731: PUSH
58732: LD_INT 20
58734: ST_TO_ADDR
// hc_class := class_tiger ;
58735: LD_ADDR_OWVAR 28
58739: PUSH
58740: LD_INT 14
58742: ST_TO_ADDR
// hc_gallery :=  ;
58743: LD_ADDR_OWVAR 33
58747: PUSH
58748: LD_STRING 
58750: ST_TO_ADDR
// hc_name :=  ;
58751: LD_ADDR_OWVAR 26
58755: PUSH
58756: LD_STRING 
58758: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
58759: CALL_OW 44
58763: PPUSH
58764: LD_INT 0
58766: PPUSH
58767: CALL_OW 51
// end ;
58771: GO 58693
58773: POP
58774: POP
// end ;
58775: PPOPN 1
58777: END
// every 0 0$1 trigger StreamModeActive and sBomb do
58778: LD_EXP 39
58782: PUSH
58783: LD_EXP 59
58787: AND
58788: IFFALSE 58797
58790: GO 58792
58792: DISABLE
// StreamSibBomb ;
58793: CALL 58798 0 0
58797: END
// export function StreamSibBomb ; var i , x , y ; begin
58798: LD_INT 0
58800: PPUSH
58801: PPUSH
58802: PPUSH
58803: PPUSH
// result := false ;
58804: LD_ADDR_VAR 0 1
58808: PUSH
58809: LD_INT 0
58811: ST_TO_ADDR
// for i := 1 to 16 do
58812: LD_ADDR_VAR 0 2
58816: PUSH
58817: DOUBLE
58818: LD_INT 1
58820: DEC
58821: ST_TO_ADDR
58822: LD_INT 16
58824: PUSH
58825: FOR_TO
58826: IFFALSE 59025
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
58828: LD_ADDR_VAR 0 3
58832: PUSH
58833: LD_INT 10
58835: PUSH
58836: LD_INT 20
58838: PUSH
58839: LD_INT 30
58841: PUSH
58842: LD_INT 40
58844: PUSH
58845: LD_INT 50
58847: PUSH
58848: LD_INT 60
58850: PUSH
58851: LD_INT 70
58853: PUSH
58854: LD_INT 80
58856: PUSH
58857: LD_INT 90
58859: PUSH
58860: LD_INT 100
58862: PUSH
58863: LD_INT 110
58865: PUSH
58866: LD_INT 120
58868: PUSH
58869: LD_INT 130
58871: PUSH
58872: LD_INT 140
58874: PUSH
58875: LD_INT 150
58877: PUSH
58878: EMPTY
58879: LIST
58880: LIST
58881: LIST
58882: LIST
58883: LIST
58884: LIST
58885: LIST
58886: LIST
58887: LIST
58888: LIST
58889: LIST
58890: LIST
58891: LIST
58892: LIST
58893: LIST
58894: PUSH
58895: LD_INT 1
58897: PPUSH
58898: LD_INT 15
58900: PPUSH
58901: CALL_OW 12
58905: ARRAY
58906: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
58907: LD_ADDR_VAR 0 4
58911: PUSH
58912: LD_INT 10
58914: PUSH
58915: LD_INT 20
58917: PUSH
58918: LD_INT 30
58920: PUSH
58921: LD_INT 40
58923: PUSH
58924: LD_INT 50
58926: PUSH
58927: LD_INT 60
58929: PUSH
58930: LD_INT 70
58932: PUSH
58933: LD_INT 80
58935: PUSH
58936: LD_INT 90
58938: PUSH
58939: LD_INT 100
58941: PUSH
58942: LD_INT 110
58944: PUSH
58945: LD_INT 120
58947: PUSH
58948: LD_INT 130
58950: PUSH
58951: LD_INT 140
58953: PUSH
58954: LD_INT 150
58956: PUSH
58957: EMPTY
58958: LIST
58959: LIST
58960: LIST
58961: LIST
58962: LIST
58963: LIST
58964: LIST
58965: LIST
58966: LIST
58967: LIST
58968: LIST
58969: LIST
58970: LIST
58971: LIST
58972: LIST
58973: PUSH
58974: LD_INT 1
58976: PPUSH
58977: LD_INT 15
58979: PPUSH
58980: CALL_OW 12
58984: ARRAY
58985: ST_TO_ADDR
// if ValidHex ( x , y ) then
58986: LD_VAR 0 3
58990: PPUSH
58991: LD_VAR 0 4
58995: PPUSH
58996: CALL_OW 488
59000: IFFALSE 59023
// begin result := [ x , y ] ;
59002: LD_ADDR_VAR 0 1
59006: PUSH
59007: LD_VAR 0 3
59011: PUSH
59012: LD_VAR 0 4
59016: PUSH
59017: EMPTY
59018: LIST
59019: LIST
59020: ST_TO_ADDR
// break ;
59021: GO 59025
// end ; end ;
59023: GO 58825
59025: POP
59026: POP
// if result then
59027: LD_VAR 0 1
59031: IFFALSE 59091
// begin ToLua ( playSibBomb() ) ;
59033: LD_STRING playSibBomb()
59035: PPUSH
59036: CALL_OW 559
// wait ( 0 0$14 ) ;
59040: LD_INT 490
59042: PPUSH
59043: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
59047: LD_VAR 0 1
59051: PUSH
59052: LD_INT 1
59054: ARRAY
59055: PPUSH
59056: LD_VAR 0 1
59060: PUSH
59061: LD_INT 2
59063: ARRAY
59064: PPUSH
59065: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
59069: LD_VAR 0 1
59073: PUSH
59074: LD_INT 1
59076: ARRAY
59077: PPUSH
59078: LD_VAR 0 1
59082: PUSH
59083: LD_INT 2
59085: ARRAY
59086: PPUSH
59087: CALL_OW 429
// end ; end ;
59091: LD_VAR 0 1
59095: RET
// every 0 0$1 trigger StreamModeActive and sReset do
59096: LD_EXP 39
59100: PUSH
59101: LD_EXP 61
59105: AND
59106: IFFALSE 59118
59108: GO 59110
59110: DISABLE
// YouLost (  ) ;
59111: LD_STRING 
59113: PPUSH
59114: CALL_OW 104
59118: END
// every 0 0$1 trigger StreamModeActive and sFog do
59119: LD_EXP 39
59123: PUSH
59124: LD_EXP 60
59128: AND
59129: IFFALSE 59143
59131: GO 59133
59133: DISABLE
// FogOff ( your_side ) ;
59134: LD_OWVAR 2
59138: PPUSH
59139: CALL_OW 344
59143: END
// every 0 0$1 trigger StreamModeActive and sSun do
59144: LD_EXP 39
59148: PUSH
59149: LD_EXP 62
59153: AND
59154: IFFALSE 59182
59156: GO 59158
59158: DISABLE
// begin solar_recharge_percent := 0 ;
59159: LD_ADDR_OWVAR 79
59163: PUSH
59164: LD_INT 0
59166: ST_TO_ADDR
// wait ( 5 5$00 ) ;
59167: LD_INT 10500
59169: PPUSH
59170: CALL_OW 67
// solar_recharge_percent := 100 ;
59174: LD_ADDR_OWVAR 79
59178: PUSH
59179: LD_INT 100
59181: ST_TO_ADDR
// end ;
59182: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
59183: LD_EXP 39
59187: PUSH
59188: LD_EXP 63
59192: AND
59193: IFFALSE 59432
59195: GO 59197
59197: DISABLE
59198: LD_INT 0
59200: PPUSH
59201: PPUSH
59202: PPUSH
// begin tmp := [ ] ;
59203: LD_ADDR_VAR 0 3
59207: PUSH
59208: EMPTY
59209: ST_TO_ADDR
// for i := 1 to 6 do
59210: LD_ADDR_VAR 0 1
59214: PUSH
59215: DOUBLE
59216: LD_INT 1
59218: DEC
59219: ST_TO_ADDR
59220: LD_INT 6
59222: PUSH
59223: FOR_TO
59224: IFFALSE 59329
// begin uc_nation := nation_nature ;
59226: LD_ADDR_OWVAR 21
59230: PUSH
59231: LD_INT 0
59233: ST_TO_ADDR
// uc_side := 0 ;
59234: LD_ADDR_OWVAR 20
59238: PUSH
59239: LD_INT 0
59241: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
59242: LD_ADDR_OWVAR 29
59246: PUSH
59247: LD_INT 12
59249: PUSH
59250: LD_INT 12
59252: PUSH
59253: EMPTY
59254: LIST
59255: LIST
59256: ST_TO_ADDR
// hc_agressivity := 20 ;
59257: LD_ADDR_OWVAR 35
59261: PUSH
59262: LD_INT 20
59264: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
59265: LD_ADDR_OWVAR 28
59269: PUSH
59270: LD_INT 17
59272: ST_TO_ADDR
// hc_gallery :=  ;
59273: LD_ADDR_OWVAR 33
59277: PUSH
59278: LD_STRING 
59280: ST_TO_ADDR
// hc_name :=  ;
59281: LD_ADDR_OWVAR 26
59285: PUSH
59286: LD_STRING 
59288: ST_TO_ADDR
// un := CreateHuman ;
59289: LD_ADDR_VAR 0 2
59293: PUSH
59294: CALL_OW 44
59298: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
59299: LD_VAR 0 2
59303: PPUSH
59304: LD_INT 1
59306: PPUSH
59307: CALL_OW 51
// tmp := tmp ^ un ;
59311: LD_ADDR_VAR 0 3
59315: PUSH
59316: LD_VAR 0 3
59320: PUSH
59321: LD_VAR 0 2
59325: ADD
59326: ST_TO_ADDR
// end ;
59327: GO 59223
59329: POP
59330: POP
// repeat wait ( 0 0$1 ) ;
59331: LD_INT 35
59333: PPUSH
59334: CALL_OW 67
// for un in tmp do
59338: LD_ADDR_VAR 0 2
59342: PUSH
59343: LD_VAR 0 3
59347: PUSH
59348: FOR_IN
59349: IFFALSE 59423
// begin if IsDead ( un ) then
59351: LD_VAR 0 2
59355: PPUSH
59356: CALL_OW 301
59360: IFFALSE 59380
// begin tmp := tmp diff un ;
59362: LD_ADDR_VAR 0 3
59366: PUSH
59367: LD_VAR 0 3
59371: PUSH
59372: LD_VAR 0 2
59376: DIFF
59377: ST_TO_ADDR
// continue ;
59378: GO 59348
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
59380: LD_VAR 0 2
59384: PPUSH
59385: LD_INT 3
59387: PUSH
59388: LD_INT 22
59390: PUSH
59391: LD_INT 0
59393: PUSH
59394: EMPTY
59395: LIST
59396: LIST
59397: PUSH
59398: EMPTY
59399: LIST
59400: LIST
59401: PPUSH
59402: CALL_OW 69
59406: PPUSH
59407: LD_VAR 0 2
59411: PPUSH
59412: CALL_OW 74
59416: PPUSH
59417: CALL_OW 115
// end ;
59421: GO 59348
59423: POP
59424: POP
// until not tmp ;
59425: LD_VAR 0 3
59429: NOT
59430: IFFALSE 59331
// end ;
59432: PPOPN 3
59434: END
// every 0 0$1 trigger StreamModeActive and sTroll do
59435: LD_EXP 39
59439: PUSH
59440: LD_EXP 64
59444: AND
59445: IFFALSE 59499
59447: GO 59449
59449: DISABLE
// begin ToLua ( displayTroll(); ) ;
59450: LD_STRING displayTroll();
59452: PPUSH
59453: CALL_OW 559
// wait ( 3 3$00 ) ;
59457: LD_INT 6300
59459: PPUSH
59460: CALL_OW 67
// ToLua ( hideTroll(); ) ;
59464: LD_STRING hideTroll();
59466: PPUSH
59467: CALL_OW 559
// wait ( 1 1$00 ) ;
59471: LD_INT 2100
59473: PPUSH
59474: CALL_OW 67
// ToLua ( displayTroll(); ) ;
59478: LD_STRING displayTroll();
59480: PPUSH
59481: CALL_OW 559
// wait ( 1 1$00 ) ;
59485: LD_INT 2100
59487: PPUSH
59488: CALL_OW 67
// ToLua ( hideTroll(); ) ;
59492: LD_STRING hideTroll();
59494: PPUSH
59495: CALL_OW 559
// end ;
59499: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
59500: LD_EXP 39
59504: PUSH
59505: LD_EXP 65
59509: AND
59510: IFFALSE 59573
59512: GO 59514
59514: DISABLE
59515: LD_INT 0
59517: PPUSH
// begin p := 0 ;
59518: LD_ADDR_VAR 0 1
59522: PUSH
59523: LD_INT 0
59525: ST_TO_ADDR
// repeat game_speed := 1 ;
59526: LD_ADDR_OWVAR 65
59530: PUSH
59531: LD_INT 1
59533: ST_TO_ADDR
// wait ( 0 0$1 ) ;
59534: LD_INT 35
59536: PPUSH
59537: CALL_OW 67
// p := p + 1 ;
59541: LD_ADDR_VAR 0 1
59545: PUSH
59546: LD_VAR 0 1
59550: PUSH
59551: LD_INT 1
59553: PLUS
59554: ST_TO_ADDR
// until p >= 60 ;
59555: LD_VAR 0 1
59559: PUSH
59560: LD_INT 60
59562: GREATEREQUAL
59563: IFFALSE 59526
// game_speed := 4 ;
59565: LD_ADDR_OWVAR 65
59569: PUSH
59570: LD_INT 4
59572: ST_TO_ADDR
// end ;
59573: PPOPN 1
59575: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
59576: LD_EXP 39
59580: PUSH
59581: LD_EXP 66
59585: AND
59586: IFFALSE 59732
59588: GO 59590
59590: DISABLE
59591: LD_INT 0
59593: PPUSH
59594: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
59595: LD_ADDR_VAR 0 1
59599: PUSH
59600: LD_INT 22
59602: PUSH
59603: LD_OWVAR 2
59607: PUSH
59608: EMPTY
59609: LIST
59610: LIST
59611: PUSH
59612: LD_INT 2
59614: PUSH
59615: LD_INT 30
59617: PUSH
59618: LD_INT 0
59620: PUSH
59621: EMPTY
59622: LIST
59623: LIST
59624: PUSH
59625: LD_INT 30
59627: PUSH
59628: LD_INT 1
59630: PUSH
59631: EMPTY
59632: LIST
59633: LIST
59634: PUSH
59635: EMPTY
59636: LIST
59637: LIST
59638: LIST
59639: PUSH
59640: EMPTY
59641: LIST
59642: LIST
59643: PPUSH
59644: CALL_OW 69
59648: ST_TO_ADDR
// if not depot then
59649: LD_VAR 0 1
59653: NOT
59654: IFFALSE 59658
// exit ;
59656: GO 59732
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
59658: LD_ADDR_VAR 0 2
59662: PUSH
59663: LD_VAR 0 1
59667: PUSH
59668: LD_INT 1
59670: PPUSH
59671: LD_VAR 0 1
59675: PPUSH
59676: CALL_OW 12
59680: ARRAY
59681: PPUSH
59682: CALL_OW 274
59686: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
59687: LD_VAR 0 2
59691: PPUSH
59692: LD_INT 1
59694: PPUSH
59695: LD_INT 0
59697: PPUSH
59698: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
59702: LD_VAR 0 2
59706: PPUSH
59707: LD_INT 2
59709: PPUSH
59710: LD_INT 0
59712: PPUSH
59713: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
59717: LD_VAR 0 2
59721: PPUSH
59722: LD_INT 3
59724: PPUSH
59725: LD_INT 0
59727: PPUSH
59728: CALL_OW 277
// end ;
59732: PPOPN 2
59734: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
59735: LD_EXP 39
59739: PUSH
59740: LD_EXP 67
59744: AND
59745: IFFALSE 59842
59747: GO 59749
59749: DISABLE
59750: LD_INT 0
59752: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
59753: LD_ADDR_VAR 0 1
59757: PUSH
59758: LD_INT 22
59760: PUSH
59761: LD_OWVAR 2
59765: PUSH
59766: EMPTY
59767: LIST
59768: LIST
59769: PUSH
59770: LD_INT 21
59772: PUSH
59773: LD_INT 1
59775: PUSH
59776: EMPTY
59777: LIST
59778: LIST
59779: PUSH
59780: LD_INT 3
59782: PUSH
59783: LD_INT 23
59785: PUSH
59786: LD_INT 0
59788: PUSH
59789: EMPTY
59790: LIST
59791: LIST
59792: PUSH
59793: EMPTY
59794: LIST
59795: LIST
59796: PUSH
59797: EMPTY
59798: LIST
59799: LIST
59800: LIST
59801: PPUSH
59802: CALL_OW 69
59806: ST_TO_ADDR
// if not tmp then
59807: LD_VAR 0 1
59811: NOT
59812: IFFALSE 59816
// exit ;
59814: GO 59842
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
59816: LD_VAR 0 1
59820: PUSH
59821: LD_INT 1
59823: PPUSH
59824: LD_VAR 0 1
59828: PPUSH
59829: CALL_OW 12
59833: ARRAY
59834: PPUSH
59835: LD_INT 200
59837: PPUSH
59838: CALL_OW 234
// end ;
59842: PPOPN 1
59844: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
59845: LD_EXP 39
59849: PUSH
59850: LD_EXP 68
59854: AND
59855: IFFALSE 59934
59857: GO 59859
59859: DISABLE
59860: LD_INT 0
59862: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
59863: LD_ADDR_VAR 0 1
59867: PUSH
59868: LD_INT 22
59870: PUSH
59871: LD_OWVAR 2
59875: PUSH
59876: EMPTY
59877: LIST
59878: LIST
59879: PUSH
59880: LD_INT 21
59882: PUSH
59883: LD_INT 2
59885: PUSH
59886: EMPTY
59887: LIST
59888: LIST
59889: PUSH
59890: EMPTY
59891: LIST
59892: LIST
59893: PPUSH
59894: CALL_OW 69
59898: ST_TO_ADDR
// if not tmp then
59899: LD_VAR 0 1
59903: NOT
59904: IFFALSE 59908
// exit ;
59906: GO 59934
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
59908: LD_VAR 0 1
59912: PUSH
59913: LD_INT 1
59915: PPUSH
59916: LD_VAR 0 1
59920: PPUSH
59921: CALL_OW 12
59925: ARRAY
59926: PPUSH
59927: LD_INT 60
59929: PPUSH
59930: CALL_OW 234
// end ;
59934: PPOPN 1
59936: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
59937: LD_EXP 39
59941: PUSH
59942: LD_EXP 69
59946: AND
59947: IFFALSE 60046
59949: GO 59951
59951: DISABLE
59952: LD_INT 0
59954: PPUSH
59955: PPUSH
// begin enable ;
59956: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
59957: LD_ADDR_VAR 0 1
59961: PUSH
59962: LD_INT 22
59964: PUSH
59965: LD_OWVAR 2
59969: PUSH
59970: EMPTY
59971: LIST
59972: LIST
59973: PUSH
59974: LD_INT 61
59976: PUSH
59977: EMPTY
59978: LIST
59979: PUSH
59980: LD_INT 33
59982: PUSH
59983: LD_INT 2
59985: PUSH
59986: EMPTY
59987: LIST
59988: LIST
59989: PUSH
59990: EMPTY
59991: LIST
59992: LIST
59993: LIST
59994: PPUSH
59995: CALL_OW 69
59999: ST_TO_ADDR
// if not tmp then
60000: LD_VAR 0 1
60004: NOT
60005: IFFALSE 60009
// exit ;
60007: GO 60046
// for i in tmp do
60009: LD_ADDR_VAR 0 2
60013: PUSH
60014: LD_VAR 0 1
60018: PUSH
60019: FOR_IN
60020: IFFALSE 60044
// if IsControledBy ( i ) then
60022: LD_VAR 0 2
60026: PPUSH
60027: CALL_OW 312
60031: IFFALSE 60042
// ComUnlink ( i ) ;
60033: LD_VAR 0 2
60037: PPUSH
60038: CALL_OW 136
60042: GO 60019
60044: POP
60045: POP
// end ;
60046: PPOPN 2
60048: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
60049: LD_EXP 39
60053: PUSH
60054: LD_EXP 70
60058: AND
60059: IFFALSE 60199
60061: GO 60063
60063: DISABLE
60064: LD_INT 0
60066: PPUSH
60067: PPUSH
// begin ToLua ( displayPowell(); ) ;
60068: LD_STRING displayPowell();
60070: PPUSH
60071: CALL_OW 559
// uc_side := 0 ;
60075: LD_ADDR_OWVAR 20
60079: PUSH
60080: LD_INT 0
60082: ST_TO_ADDR
// uc_nation := 2 ;
60083: LD_ADDR_OWVAR 21
60087: PUSH
60088: LD_INT 2
60090: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
60091: LD_ADDR_OWVAR 37
60095: PUSH
60096: LD_INT 14
60098: ST_TO_ADDR
// vc_engine := engine_siberite ;
60099: LD_ADDR_OWVAR 39
60103: PUSH
60104: LD_INT 3
60106: ST_TO_ADDR
// vc_control := control_apeman ;
60107: LD_ADDR_OWVAR 38
60111: PUSH
60112: LD_INT 5
60114: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
60115: LD_ADDR_OWVAR 40
60119: PUSH
60120: LD_INT 29
60122: ST_TO_ADDR
// un := CreateVehicle ;
60123: LD_ADDR_VAR 0 2
60127: PUSH
60128: CALL_OW 45
60132: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
60133: LD_VAR 0 2
60137: PPUSH
60138: LD_INT 1
60140: PPUSH
60141: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
60145: LD_INT 35
60147: PPUSH
60148: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
60152: LD_VAR 0 2
60156: PPUSH
60157: LD_INT 22
60159: PUSH
60160: LD_OWVAR 2
60164: PUSH
60165: EMPTY
60166: LIST
60167: LIST
60168: PPUSH
60169: CALL_OW 69
60173: PPUSH
60174: LD_VAR 0 2
60178: PPUSH
60179: CALL_OW 74
60183: PPUSH
60184: CALL_OW 115
// until IsDead ( un ) ;
60188: LD_VAR 0 2
60192: PPUSH
60193: CALL_OW 301
60197: IFFALSE 60145
// end ;
60199: PPOPN 2
60201: END
// every 0 0$1 trigger StreamModeActive and sStu do
60202: LD_EXP 39
60206: PUSH
60207: LD_EXP 78
60211: AND
60212: IFFALSE 60228
60214: GO 60216
60216: DISABLE
// begin ToLua ( displayStucuk(); ) ;
60217: LD_STRING displayStucuk();
60219: PPUSH
60220: CALL_OW 559
// ResetFog ;
60224: CALL_OW 335
// end ;
60228: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
60229: LD_EXP 39
60233: PUSH
60234: LD_EXP 71
60238: AND
60239: IFFALSE 60380
60241: GO 60243
60243: DISABLE
60244: LD_INT 0
60246: PPUSH
60247: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
60248: LD_ADDR_VAR 0 2
60252: PUSH
60253: LD_INT 22
60255: PUSH
60256: LD_OWVAR 2
60260: PUSH
60261: EMPTY
60262: LIST
60263: LIST
60264: PUSH
60265: LD_INT 21
60267: PUSH
60268: LD_INT 1
60270: PUSH
60271: EMPTY
60272: LIST
60273: LIST
60274: PUSH
60275: EMPTY
60276: LIST
60277: LIST
60278: PPUSH
60279: CALL_OW 69
60283: ST_TO_ADDR
// if not tmp then
60284: LD_VAR 0 2
60288: NOT
60289: IFFALSE 60293
// exit ;
60291: GO 60380
// un := tmp [ rand ( 1 , tmp ) ] ;
60293: LD_ADDR_VAR 0 1
60297: PUSH
60298: LD_VAR 0 2
60302: PUSH
60303: LD_INT 1
60305: PPUSH
60306: LD_VAR 0 2
60310: PPUSH
60311: CALL_OW 12
60315: ARRAY
60316: ST_TO_ADDR
// SetSide ( un , 0 ) ;
60317: LD_VAR 0 1
60321: PPUSH
60322: LD_INT 0
60324: PPUSH
60325: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
60329: LD_VAR 0 1
60333: PPUSH
60334: LD_OWVAR 3
60338: PUSH
60339: LD_VAR 0 1
60343: DIFF
60344: PPUSH
60345: LD_VAR 0 1
60349: PPUSH
60350: CALL_OW 74
60354: PPUSH
60355: CALL_OW 115
// wait ( 0 0$20 ) ;
60359: LD_INT 700
60361: PPUSH
60362: CALL_OW 67
// SetSide ( un , your_side ) ;
60366: LD_VAR 0 1
60370: PPUSH
60371: LD_OWVAR 2
60375: PPUSH
60376: CALL_OW 235
// end ;
60380: PPOPN 2
60382: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
60383: LD_EXP 39
60387: PUSH
60388: LD_EXP 72
60392: AND
60393: IFFALSE 60499
60395: GO 60397
60397: DISABLE
60398: LD_INT 0
60400: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
60401: LD_ADDR_VAR 0 1
60405: PUSH
60406: LD_INT 22
60408: PUSH
60409: LD_OWVAR 2
60413: PUSH
60414: EMPTY
60415: LIST
60416: LIST
60417: PUSH
60418: LD_INT 2
60420: PUSH
60421: LD_INT 30
60423: PUSH
60424: LD_INT 0
60426: PUSH
60427: EMPTY
60428: LIST
60429: LIST
60430: PUSH
60431: LD_INT 30
60433: PUSH
60434: LD_INT 1
60436: PUSH
60437: EMPTY
60438: LIST
60439: LIST
60440: PUSH
60441: EMPTY
60442: LIST
60443: LIST
60444: LIST
60445: PUSH
60446: EMPTY
60447: LIST
60448: LIST
60449: PPUSH
60450: CALL_OW 69
60454: ST_TO_ADDR
// if not depot then
60455: LD_VAR 0 1
60459: NOT
60460: IFFALSE 60464
// exit ;
60462: GO 60499
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
60464: LD_VAR 0 1
60468: PUSH
60469: LD_INT 1
60471: ARRAY
60472: PPUSH
60473: CALL_OW 250
60477: PPUSH
60478: LD_VAR 0 1
60482: PUSH
60483: LD_INT 1
60485: ARRAY
60486: PPUSH
60487: CALL_OW 251
60491: PPUSH
60492: LD_INT 70
60494: PPUSH
60495: CALL_OW 495
// end ;
60499: PPOPN 1
60501: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
60502: LD_EXP 39
60506: PUSH
60507: LD_EXP 73
60511: AND
60512: IFFALSE 60723
60514: GO 60516
60516: DISABLE
60517: LD_INT 0
60519: PPUSH
60520: PPUSH
60521: PPUSH
60522: PPUSH
60523: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
60524: LD_ADDR_VAR 0 5
60528: PUSH
60529: LD_INT 22
60531: PUSH
60532: LD_OWVAR 2
60536: PUSH
60537: EMPTY
60538: LIST
60539: LIST
60540: PUSH
60541: LD_INT 21
60543: PUSH
60544: LD_INT 1
60546: PUSH
60547: EMPTY
60548: LIST
60549: LIST
60550: PUSH
60551: EMPTY
60552: LIST
60553: LIST
60554: PPUSH
60555: CALL_OW 69
60559: ST_TO_ADDR
// if not tmp then
60560: LD_VAR 0 5
60564: NOT
60565: IFFALSE 60569
// exit ;
60567: GO 60723
// for i in tmp do
60569: LD_ADDR_VAR 0 1
60573: PUSH
60574: LD_VAR 0 5
60578: PUSH
60579: FOR_IN
60580: IFFALSE 60721
// begin d := rand ( 0 , 5 ) ;
60582: LD_ADDR_VAR 0 4
60586: PUSH
60587: LD_INT 0
60589: PPUSH
60590: LD_INT 5
60592: PPUSH
60593: CALL_OW 12
60597: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
60598: LD_ADDR_VAR 0 2
60602: PUSH
60603: LD_VAR 0 1
60607: PPUSH
60608: CALL_OW 250
60612: PPUSH
60613: LD_VAR 0 4
60617: PPUSH
60618: LD_INT 3
60620: PPUSH
60621: LD_INT 12
60623: PPUSH
60624: CALL_OW 12
60628: PPUSH
60629: CALL_OW 272
60633: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
60634: LD_ADDR_VAR 0 3
60638: PUSH
60639: LD_VAR 0 1
60643: PPUSH
60644: CALL_OW 251
60648: PPUSH
60649: LD_VAR 0 4
60653: PPUSH
60654: LD_INT 3
60656: PPUSH
60657: LD_INT 12
60659: PPUSH
60660: CALL_OW 12
60664: PPUSH
60665: CALL_OW 273
60669: ST_TO_ADDR
// if ValidHex ( x , y ) then
60670: LD_VAR 0 2
60674: PPUSH
60675: LD_VAR 0 3
60679: PPUSH
60680: CALL_OW 488
60684: IFFALSE 60719
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
60686: LD_VAR 0 1
60690: PPUSH
60691: LD_VAR 0 2
60695: PPUSH
60696: LD_VAR 0 3
60700: PPUSH
60701: LD_INT 3
60703: PPUSH
60704: LD_INT 6
60706: PPUSH
60707: CALL_OW 12
60711: PPUSH
60712: LD_INT 1
60714: PPUSH
60715: CALL_OW 483
// end ;
60719: GO 60579
60721: POP
60722: POP
// end ;
60723: PPOPN 5
60725: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
60726: LD_EXP 39
60730: PUSH
60731: LD_EXP 74
60735: AND
60736: IFFALSE 60830
60738: GO 60740
60740: DISABLE
60741: LD_INT 0
60743: PPUSH
60744: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
60745: LD_ADDR_VAR 0 2
60749: PUSH
60750: LD_INT 22
60752: PUSH
60753: LD_OWVAR 2
60757: PUSH
60758: EMPTY
60759: LIST
60760: LIST
60761: PUSH
60762: LD_INT 32
60764: PUSH
60765: LD_INT 1
60767: PUSH
60768: EMPTY
60769: LIST
60770: LIST
60771: PUSH
60772: LD_INT 21
60774: PUSH
60775: LD_INT 2
60777: PUSH
60778: EMPTY
60779: LIST
60780: LIST
60781: PUSH
60782: EMPTY
60783: LIST
60784: LIST
60785: LIST
60786: PPUSH
60787: CALL_OW 69
60791: ST_TO_ADDR
// if not tmp then
60792: LD_VAR 0 2
60796: NOT
60797: IFFALSE 60801
// exit ;
60799: GO 60830
// for i in tmp do
60801: LD_ADDR_VAR 0 1
60805: PUSH
60806: LD_VAR 0 2
60810: PUSH
60811: FOR_IN
60812: IFFALSE 60828
// SetFuel ( i , 0 ) ;
60814: LD_VAR 0 1
60818: PPUSH
60819: LD_INT 0
60821: PPUSH
60822: CALL_OW 240
60826: GO 60811
60828: POP
60829: POP
// end ;
60830: PPOPN 2
60832: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
60833: LD_EXP 39
60837: PUSH
60838: LD_EXP 75
60842: AND
60843: IFFALSE 60909
60845: GO 60847
60847: DISABLE
60848: LD_INT 0
60850: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
60851: LD_ADDR_VAR 0 1
60855: PUSH
60856: LD_INT 22
60858: PUSH
60859: LD_OWVAR 2
60863: PUSH
60864: EMPTY
60865: LIST
60866: LIST
60867: PUSH
60868: LD_INT 30
60870: PUSH
60871: LD_INT 29
60873: PUSH
60874: EMPTY
60875: LIST
60876: LIST
60877: PUSH
60878: EMPTY
60879: LIST
60880: LIST
60881: PPUSH
60882: CALL_OW 69
60886: ST_TO_ADDR
// if not tmp then
60887: LD_VAR 0 1
60891: NOT
60892: IFFALSE 60896
// exit ;
60894: GO 60909
// DestroyUnit ( tmp [ 1 ] ) ;
60896: LD_VAR 0 1
60900: PUSH
60901: LD_INT 1
60903: ARRAY
60904: PPUSH
60905: CALL_OW 65
// end ;
60909: PPOPN 1
60911: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
60912: LD_EXP 39
60916: PUSH
60917: LD_EXP 77
60921: AND
60922: IFFALSE 61051
60924: GO 60926
60926: DISABLE
60927: LD_INT 0
60929: PPUSH
// begin uc_side := 0 ;
60930: LD_ADDR_OWVAR 20
60934: PUSH
60935: LD_INT 0
60937: ST_TO_ADDR
// uc_nation := nation_arabian ;
60938: LD_ADDR_OWVAR 21
60942: PUSH
60943: LD_INT 2
60945: ST_TO_ADDR
// hc_gallery :=  ;
60946: LD_ADDR_OWVAR 33
60950: PUSH
60951: LD_STRING 
60953: ST_TO_ADDR
// hc_name :=  ;
60954: LD_ADDR_OWVAR 26
60958: PUSH
60959: LD_STRING 
60961: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
60962: LD_INT 1
60964: PPUSH
60965: LD_INT 11
60967: PPUSH
60968: LD_INT 10
60970: PPUSH
60971: CALL_OW 380
// un := CreateHuman ;
60975: LD_ADDR_VAR 0 1
60979: PUSH
60980: CALL_OW 44
60984: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
60985: LD_VAR 0 1
60989: PPUSH
60990: LD_INT 1
60992: PPUSH
60993: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
60997: LD_INT 35
60999: PPUSH
61000: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
61004: LD_VAR 0 1
61008: PPUSH
61009: LD_INT 22
61011: PUSH
61012: LD_OWVAR 2
61016: PUSH
61017: EMPTY
61018: LIST
61019: LIST
61020: PPUSH
61021: CALL_OW 69
61025: PPUSH
61026: LD_VAR 0 1
61030: PPUSH
61031: CALL_OW 74
61035: PPUSH
61036: CALL_OW 115
// until IsDead ( un ) ;
61040: LD_VAR 0 1
61044: PPUSH
61045: CALL_OW 301
61049: IFFALSE 60997
// end ;
61051: PPOPN 1
61053: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
61054: LD_EXP 39
61058: PUSH
61059: LD_EXP 79
61063: AND
61064: IFFALSE 61076
61066: GO 61068
61068: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
61069: LD_STRING earthquake(getX(game), 0, 32)
61071: PPUSH
61072: CALL_OW 559
61076: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
61077: LD_EXP 39
61081: PUSH
61082: LD_EXP 80
61086: AND
61087: IFFALSE 61178
61089: GO 61091
61091: DISABLE
61092: LD_INT 0
61094: PPUSH
// begin enable ;
61095: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
61096: LD_ADDR_VAR 0 1
61100: PUSH
61101: LD_INT 22
61103: PUSH
61104: LD_OWVAR 2
61108: PUSH
61109: EMPTY
61110: LIST
61111: LIST
61112: PUSH
61113: LD_INT 21
61115: PUSH
61116: LD_INT 2
61118: PUSH
61119: EMPTY
61120: LIST
61121: LIST
61122: PUSH
61123: LD_INT 33
61125: PUSH
61126: LD_INT 3
61128: PUSH
61129: EMPTY
61130: LIST
61131: LIST
61132: PUSH
61133: EMPTY
61134: LIST
61135: LIST
61136: LIST
61137: PPUSH
61138: CALL_OW 69
61142: ST_TO_ADDR
// if not tmp then
61143: LD_VAR 0 1
61147: NOT
61148: IFFALSE 61152
// exit ;
61150: GO 61178
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
61152: LD_VAR 0 1
61156: PUSH
61157: LD_INT 1
61159: PPUSH
61160: LD_VAR 0 1
61164: PPUSH
61165: CALL_OW 12
61169: ARRAY
61170: PPUSH
61171: LD_INT 1
61173: PPUSH
61174: CALL_OW 234
// end ;
61178: PPOPN 1
61180: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
61181: LD_EXP 39
61185: PUSH
61186: LD_EXP 81
61190: AND
61191: IFFALSE 61332
61193: GO 61195
61195: DISABLE
61196: LD_INT 0
61198: PPUSH
61199: PPUSH
61200: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
61201: LD_ADDR_VAR 0 3
61205: PUSH
61206: LD_INT 22
61208: PUSH
61209: LD_OWVAR 2
61213: PUSH
61214: EMPTY
61215: LIST
61216: LIST
61217: PUSH
61218: LD_INT 25
61220: PUSH
61221: LD_INT 1
61223: PUSH
61224: EMPTY
61225: LIST
61226: LIST
61227: PUSH
61228: EMPTY
61229: LIST
61230: LIST
61231: PPUSH
61232: CALL_OW 69
61236: ST_TO_ADDR
// if not tmp then
61237: LD_VAR 0 3
61241: NOT
61242: IFFALSE 61246
// exit ;
61244: GO 61332
// un := tmp [ rand ( 1 , tmp ) ] ;
61246: LD_ADDR_VAR 0 2
61250: PUSH
61251: LD_VAR 0 3
61255: PUSH
61256: LD_INT 1
61258: PPUSH
61259: LD_VAR 0 3
61263: PPUSH
61264: CALL_OW 12
61268: ARRAY
61269: ST_TO_ADDR
// if Crawls ( un ) then
61270: LD_VAR 0 2
61274: PPUSH
61275: CALL_OW 318
61279: IFFALSE 61290
// ComWalk ( un ) ;
61281: LD_VAR 0 2
61285: PPUSH
61286: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
61290: LD_VAR 0 2
61294: PPUSH
61295: LD_INT 9
61297: PPUSH
61298: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
61302: LD_INT 28
61304: PPUSH
61305: LD_OWVAR 2
61309: PPUSH
61310: LD_INT 2
61312: PPUSH
61313: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
61317: LD_INT 29
61319: PPUSH
61320: LD_OWVAR 2
61324: PPUSH
61325: LD_INT 2
61327: PPUSH
61328: CALL_OW 322
// end ;
61332: PPOPN 3
61334: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
61335: LD_EXP 39
61339: PUSH
61340: LD_EXP 82
61344: AND
61345: IFFALSE 61456
61347: GO 61349
61349: DISABLE
61350: LD_INT 0
61352: PPUSH
61353: PPUSH
61354: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
61355: LD_ADDR_VAR 0 3
61359: PUSH
61360: LD_INT 22
61362: PUSH
61363: LD_OWVAR 2
61367: PUSH
61368: EMPTY
61369: LIST
61370: LIST
61371: PUSH
61372: LD_INT 25
61374: PUSH
61375: LD_INT 1
61377: PUSH
61378: EMPTY
61379: LIST
61380: LIST
61381: PUSH
61382: EMPTY
61383: LIST
61384: LIST
61385: PPUSH
61386: CALL_OW 69
61390: ST_TO_ADDR
// if not tmp then
61391: LD_VAR 0 3
61395: NOT
61396: IFFALSE 61400
// exit ;
61398: GO 61456
// un := tmp [ rand ( 1 , tmp ) ] ;
61400: LD_ADDR_VAR 0 2
61404: PUSH
61405: LD_VAR 0 3
61409: PUSH
61410: LD_INT 1
61412: PPUSH
61413: LD_VAR 0 3
61417: PPUSH
61418: CALL_OW 12
61422: ARRAY
61423: ST_TO_ADDR
// if Crawls ( un ) then
61424: LD_VAR 0 2
61428: PPUSH
61429: CALL_OW 318
61433: IFFALSE 61444
// ComWalk ( un ) ;
61435: LD_VAR 0 2
61439: PPUSH
61440: CALL_OW 138
// SetClass ( un , class_mortar ) ;
61444: LD_VAR 0 2
61448: PPUSH
61449: LD_INT 8
61451: PPUSH
61452: CALL_OW 336
// end ;
61456: PPOPN 3
61458: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
61459: LD_EXP 39
61463: PUSH
61464: LD_EXP 83
61468: AND
61469: IFFALSE 61613
61471: GO 61473
61473: DISABLE
61474: LD_INT 0
61476: PPUSH
61477: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
61478: LD_ADDR_VAR 0 2
61482: PUSH
61483: LD_INT 22
61485: PUSH
61486: LD_OWVAR 2
61490: PUSH
61491: EMPTY
61492: LIST
61493: LIST
61494: PUSH
61495: LD_INT 21
61497: PUSH
61498: LD_INT 2
61500: PUSH
61501: EMPTY
61502: LIST
61503: LIST
61504: PUSH
61505: LD_INT 2
61507: PUSH
61508: LD_INT 34
61510: PUSH
61511: LD_INT 12
61513: PUSH
61514: EMPTY
61515: LIST
61516: LIST
61517: PUSH
61518: LD_INT 34
61520: PUSH
61521: LD_INT 51
61523: PUSH
61524: EMPTY
61525: LIST
61526: LIST
61527: PUSH
61528: LD_INT 34
61530: PUSH
61531: LD_INT 32
61533: PUSH
61534: EMPTY
61535: LIST
61536: LIST
61537: PUSH
61538: EMPTY
61539: LIST
61540: LIST
61541: LIST
61542: LIST
61543: PUSH
61544: EMPTY
61545: LIST
61546: LIST
61547: LIST
61548: PPUSH
61549: CALL_OW 69
61553: ST_TO_ADDR
// if not tmp then
61554: LD_VAR 0 2
61558: NOT
61559: IFFALSE 61563
// exit ;
61561: GO 61613
// for i in tmp do
61563: LD_ADDR_VAR 0 1
61567: PUSH
61568: LD_VAR 0 2
61572: PUSH
61573: FOR_IN
61574: IFFALSE 61611
// if GetCargo ( i , mat_artifact ) = 0 then
61576: LD_VAR 0 1
61580: PPUSH
61581: LD_INT 4
61583: PPUSH
61584: CALL_OW 289
61588: PUSH
61589: LD_INT 0
61591: EQUAL
61592: IFFALSE 61609
// SetCargo ( i , mat_siberit , 100 ) ;
61594: LD_VAR 0 1
61598: PPUSH
61599: LD_INT 3
61601: PPUSH
61602: LD_INT 100
61604: PPUSH
61605: CALL_OW 290
61609: GO 61573
61611: POP
61612: POP
// end ;
61613: PPOPN 2
61615: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
61616: LD_EXP 39
61620: PUSH
61621: LD_EXP 84
61625: AND
61626: IFFALSE 61809
61628: GO 61630
61630: DISABLE
61631: LD_INT 0
61633: PPUSH
61634: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
61635: LD_ADDR_VAR 0 2
61639: PUSH
61640: LD_INT 22
61642: PUSH
61643: LD_OWVAR 2
61647: PUSH
61648: EMPTY
61649: LIST
61650: LIST
61651: PPUSH
61652: CALL_OW 69
61656: ST_TO_ADDR
// if not tmp then
61657: LD_VAR 0 2
61661: NOT
61662: IFFALSE 61666
// exit ;
61664: GO 61809
// for i := 1 to 2 do
61666: LD_ADDR_VAR 0 1
61670: PUSH
61671: DOUBLE
61672: LD_INT 1
61674: DEC
61675: ST_TO_ADDR
61676: LD_INT 2
61678: PUSH
61679: FOR_TO
61680: IFFALSE 61807
// begin uc_side := your_side ;
61682: LD_ADDR_OWVAR 20
61686: PUSH
61687: LD_OWVAR 2
61691: ST_TO_ADDR
// uc_nation := nation_american ;
61692: LD_ADDR_OWVAR 21
61696: PUSH
61697: LD_INT 1
61699: ST_TO_ADDR
// vc_chassis := us_morphling ;
61700: LD_ADDR_OWVAR 37
61704: PUSH
61705: LD_INT 5
61707: ST_TO_ADDR
// vc_engine := engine_siberite ;
61708: LD_ADDR_OWVAR 39
61712: PUSH
61713: LD_INT 3
61715: ST_TO_ADDR
// vc_control := control_computer ;
61716: LD_ADDR_OWVAR 38
61720: PUSH
61721: LD_INT 3
61723: ST_TO_ADDR
// vc_weapon := us_double_laser ;
61724: LD_ADDR_OWVAR 40
61728: PUSH
61729: LD_INT 10
61731: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
61732: LD_VAR 0 2
61736: PUSH
61737: LD_INT 1
61739: ARRAY
61740: PPUSH
61741: CALL_OW 310
61745: NOT
61746: IFFALSE 61793
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
61748: CALL_OW 45
61752: PPUSH
61753: LD_VAR 0 2
61757: PUSH
61758: LD_INT 1
61760: ARRAY
61761: PPUSH
61762: CALL_OW 250
61766: PPUSH
61767: LD_VAR 0 2
61771: PUSH
61772: LD_INT 1
61774: ARRAY
61775: PPUSH
61776: CALL_OW 251
61780: PPUSH
61781: LD_INT 12
61783: PPUSH
61784: LD_INT 1
61786: PPUSH
61787: CALL_OW 50
61791: GO 61805
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
61793: CALL_OW 45
61797: PPUSH
61798: LD_INT 1
61800: PPUSH
61801: CALL_OW 51
// end ;
61805: GO 61679
61807: POP
61808: POP
// end ;
61809: PPOPN 2
61811: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
61812: LD_EXP 39
61816: PUSH
61817: LD_EXP 85
61821: AND
61822: IFFALSE 62044
61824: GO 61826
61826: DISABLE
61827: LD_INT 0
61829: PPUSH
61830: PPUSH
61831: PPUSH
61832: PPUSH
61833: PPUSH
61834: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
61835: LD_ADDR_VAR 0 6
61839: PUSH
61840: LD_INT 22
61842: PUSH
61843: LD_OWVAR 2
61847: PUSH
61848: EMPTY
61849: LIST
61850: LIST
61851: PUSH
61852: LD_INT 21
61854: PUSH
61855: LD_INT 1
61857: PUSH
61858: EMPTY
61859: LIST
61860: LIST
61861: PUSH
61862: LD_INT 3
61864: PUSH
61865: LD_INT 23
61867: PUSH
61868: LD_INT 0
61870: PUSH
61871: EMPTY
61872: LIST
61873: LIST
61874: PUSH
61875: EMPTY
61876: LIST
61877: LIST
61878: PUSH
61879: EMPTY
61880: LIST
61881: LIST
61882: LIST
61883: PPUSH
61884: CALL_OW 69
61888: ST_TO_ADDR
// if not tmp then
61889: LD_VAR 0 6
61893: NOT
61894: IFFALSE 61898
// exit ;
61896: GO 62044
// s1 := rand ( 1 , 4 ) ;
61898: LD_ADDR_VAR 0 2
61902: PUSH
61903: LD_INT 1
61905: PPUSH
61906: LD_INT 4
61908: PPUSH
61909: CALL_OW 12
61913: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
61914: LD_ADDR_VAR 0 4
61918: PUSH
61919: LD_VAR 0 6
61923: PUSH
61924: LD_INT 1
61926: ARRAY
61927: PPUSH
61928: LD_VAR 0 2
61932: PPUSH
61933: CALL_OW 259
61937: ST_TO_ADDR
// if s1 = 1 then
61938: LD_VAR 0 2
61942: PUSH
61943: LD_INT 1
61945: EQUAL
61946: IFFALSE 61966
// s2 := rand ( 2 , 4 ) else
61948: LD_ADDR_VAR 0 3
61952: PUSH
61953: LD_INT 2
61955: PPUSH
61956: LD_INT 4
61958: PPUSH
61959: CALL_OW 12
61963: ST_TO_ADDR
61964: GO 61974
// s2 := 1 ;
61966: LD_ADDR_VAR 0 3
61970: PUSH
61971: LD_INT 1
61973: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
61974: LD_ADDR_VAR 0 5
61978: PUSH
61979: LD_VAR 0 6
61983: PUSH
61984: LD_INT 1
61986: ARRAY
61987: PPUSH
61988: LD_VAR 0 3
61992: PPUSH
61993: CALL_OW 259
61997: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
61998: LD_VAR 0 6
62002: PUSH
62003: LD_INT 1
62005: ARRAY
62006: PPUSH
62007: LD_VAR 0 2
62011: PPUSH
62012: LD_VAR 0 5
62016: PPUSH
62017: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
62021: LD_VAR 0 6
62025: PUSH
62026: LD_INT 1
62028: ARRAY
62029: PPUSH
62030: LD_VAR 0 3
62034: PPUSH
62035: LD_VAR 0 4
62039: PPUSH
62040: CALL_OW 237
// end ;
62044: PPOPN 6
62046: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
62047: LD_EXP 39
62051: PUSH
62052: LD_EXP 86
62056: AND
62057: IFFALSE 62136
62059: GO 62061
62061: DISABLE
62062: LD_INT 0
62064: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
62065: LD_ADDR_VAR 0 1
62069: PUSH
62070: LD_INT 22
62072: PUSH
62073: LD_OWVAR 2
62077: PUSH
62078: EMPTY
62079: LIST
62080: LIST
62081: PUSH
62082: LD_INT 30
62084: PUSH
62085: LD_INT 3
62087: PUSH
62088: EMPTY
62089: LIST
62090: LIST
62091: PUSH
62092: EMPTY
62093: LIST
62094: LIST
62095: PPUSH
62096: CALL_OW 69
62100: ST_TO_ADDR
// if not tmp then
62101: LD_VAR 0 1
62105: NOT
62106: IFFALSE 62110
// exit ;
62108: GO 62136
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
62110: LD_VAR 0 1
62114: PUSH
62115: LD_INT 1
62117: PPUSH
62118: LD_VAR 0 1
62122: PPUSH
62123: CALL_OW 12
62127: ARRAY
62128: PPUSH
62129: LD_INT 1
62131: PPUSH
62132: CALL_OW 234
// end ;
62136: PPOPN 1
62138: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
62139: LD_EXP 39
62143: PUSH
62144: LD_EXP 87
62148: AND
62149: IFFALSE 62261
62151: GO 62153
62153: DISABLE
62154: LD_INT 0
62156: PPUSH
62157: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
62158: LD_ADDR_VAR 0 2
62162: PUSH
62163: LD_INT 22
62165: PUSH
62166: LD_OWVAR 2
62170: PUSH
62171: EMPTY
62172: LIST
62173: LIST
62174: PUSH
62175: LD_INT 2
62177: PUSH
62178: LD_INT 30
62180: PUSH
62181: LD_INT 27
62183: PUSH
62184: EMPTY
62185: LIST
62186: LIST
62187: PUSH
62188: LD_INT 30
62190: PUSH
62191: LD_INT 26
62193: PUSH
62194: EMPTY
62195: LIST
62196: LIST
62197: PUSH
62198: LD_INT 30
62200: PUSH
62201: LD_INT 28
62203: PUSH
62204: EMPTY
62205: LIST
62206: LIST
62207: PUSH
62208: EMPTY
62209: LIST
62210: LIST
62211: LIST
62212: LIST
62213: PUSH
62214: EMPTY
62215: LIST
62216: LIST
62217: PPUSH
62218: CALL_OW 69
62222: ST_TO_ADDR
// if not tmp then
62223: LD_VAR 0 2
62227: NOT
62228: IFFALSE 62232
// exit ;
62230: GO 62261
// for i in tmp do
62232: LD_ADDR_VAR 0 1
62236: PUSH
62237: LD_VAR 0 2
62241: PUSH
62242: FOR_IN
62243: IFFALSE 62259
// SetLives ( i , 1 ) ;
62245: LD_VAR 0 1
62249: PPUSH
62250: LD_INT 1
62252: PPUSH
62253: CALL_OW 234
62257: GO 62242
62259: POP
62260: POP
// end ;
62261: PPOPN 2
62263: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
62264: LD_EXP 39
62268: PUSH
62269: LD_EXP 88
62273: AND
62274: IFFALSE 62561
62276: GO 62278
62278: DISABLE
62279: LD_INT 0
62281: PPUSH
62282: PPUSH
62283: PPUSH
// begin i := rand ( 1 , 7 ) ;
62284: LD_ADDR_VAR 0 1
62288: PUSH
62289: LD_INT 1
62291: PPUSH
62292: LD_INT 7
62294: PPUSH
62295: CALL_OW 12
62299: ST_TO_ADDR
// case i of 1 :
62300: LD_VAR 0 1
62304: PUSH
62305: LD_INT 1
62307: DOUBLE
62308: EQUAL
62309: IFTRUE 62313
62311: GO 62323
62313: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
62314: LD_STRING earthquake(getX(game), 0, 32)
62316: PPUSH
62317: CALL_OW 559
62321: GO 62561
62323: LD_INT 2
62325: DOUBLE
62326: EQUAL
62327: IFTRUE 62331
62329: GO 62345
62331: POP
// begin ToLua ( displayStucuk(); ) ;
62332: LD_STRING displayStucuk();
62334: PPUSH
62335: CALL_OW 559
// ResetFog ;
62339: CALL_OW 335
// end ; 3 :
62343: GO 62561
62345: LD_INT 3
62347: DOUBLE
62348: EQUAL
62349: IFTRUE 62353
62351: GO 62457
62353: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
62354: LD_ADDR_VAR 0 2
62358: PUSH
62359: LD_INT 22
62361: PUSH
62362: LD_OWVAR 2
62366: PUSH
62367: EMPTY
62368: LIST
62369: LIST
62370: PUSH
62371: LD_INT 25
62373: PUSH
62374: LD_INT 1
62376: PUSH
62377: EMPTY
62378: LIST
62379: LIST
62380: PUSH
62381: EMPTY
62382: LIST
62383: LIST
62384: PPUSH
62385: CALL_OW 69
62389: ST_TO_ADDR
// if not tmp then
62390: LD_VAR 0 2
62394: NOT
62395: IFFALSE 62399
// exit ;
62397: GO 62561
// un := tmp [ rand ( 1 , tmp ) ] ;
62399: LD_ADDR_VAR 0 3
62403: PUSH
62404: LD_VAR 0 2
62408: PUSH
62409: LD_INT 1
62411: PPUSH
62412: LD_VAR 0 2
62416: PPUSH
62417: CALL_OW 12
62421: ARRAY
62422: ST_TO_ADDR
// if Crawls ( un ) then
62423: LD_VAR 0 3
62427: PPUSH
62428: CALL_OW 318
62432: IFFALSE 62443
// ComWalk ( un ) ;
62434: LD_VAR 0 3
62438: PPUSH
62439: CALL_OW 138
// SetClass ( un , class_mortar ) ;
62443: LD_VAR 0 3
62447: PPUSH
62448: LD_INT 8
62450: PPUSH
62451: CALL_OW 336
// end ; 4 :
62455: GO 62561
62457: LD_INT 4
62459: DOUBLE
62460: EQUAL
62461: IFTRUE 62465
62463: GO 62539
62465: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
62466: LD_ADDR_VAR 0 2
62470: PUSH
62471: LD_INT 22
62473: PUSH
62474: LD_OWVAR 2
62478: PUSH
62479: EMPTY
62480: LIST
62481: LIST
62482: PUSH
62483: LD_INT 30
62485: PUSH
62486: LD_INT 29
62488: PUSH
62489: EMPTY
62490: LIST
62491: LIST
62492: PUSH
62493: EMPTY
62494: LIST
62495: LIST
62496: PPUSH
62497: CALL_OW 69
62501: ST_TO_ADDR
// if not tmp then
62502: LD_VAR 0 2
62506: NOT
62507: IFFALSE 62511
// exit ;
62509: GO 62561
// CenterNowOnUnits ( tmp [ 1 ] ) ;
62511: LD_VAR 0 2
62515: PUSH
62516: LD_INT 1
62518: ARRAY
62519: PPUSH
62520: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
62524: LD_VAR 0 2
62528: PUSH
62529: LD_INT 1
62531: ARRAY
62532: PPUSH
62533: CALL_OW 65
// end ; 5 .. 7 :
62537: GO 62561
62539: LD_INT 5
62541: DOUBLE
62542: GREATEREQUAL
62543: IFFALSE 62551
62545: LD_INT 7
62547: DOUBLE
62548: LESSEQUAL
62549: IFTRUE 62553
62551: GO 62560
62553: POP
// StreamSibBomb ; end ;
62554: CALL 58798 0 0
62558: GO 62561
62560: POP
// end ;
62561: PPOPN 3
62563: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
62564: LD_EXP 39
62568: PUSH
62569: LD_EXP 89
62573: AND
62574: IFFALSE 62730
62576: GO 62578
62578: DISABLE
62579: LD_INT 0
62581: PPUSH
62582: PPUSH
62583: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
62584: LD_ADDR_VAR 0 2
62588: PUSH
62589: LD_INT 81
62591: PUSH
62592: LD_OWVAR 2
62596: PUSH
62597: EMPTY
62598: LIST
62599: LIST
62600: PUSH
62601: LD_INT 2
62603: PUSH
62604: LD_INT 21
62606: PUSH
62607: LD_INT 1
62609: PUSH
62610: EMPTY
62611: LIST
62612: LIST
62613: PUSH
62614: LD_INT 21
62616: PUSH
62617: LD_INT 2
62619: PUSH
62620: EMPTY
62621: LIST
62622: LIST
62623: PUSH
62624: EMPTY
62625: LIST
62626: LIST
62627: LIST
62628: PUSH
62629: EMPTY
62630: LIST
62631: LIST
62632: PPUSH
62633: CALL_OW 69
62637: ST_TO_ADDR
// if not tmp then
62638: LD_VAR 0 2
62642: NOT
62643: IFFALSE 62647
// exit ;
62645: GO 62730
// p := 0 ;
62647: LD_ADDR_VAR 0 3
62651: PUSH
62652: LD_INT 0
62654: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
62655: LD_INT 35
62657: PPUSH
62658: CALL_OW 67
// p := p + 1 ;
62662: LD_ADDR_VAR 0 3
62666: PUSH
62667: LD_VAR 0 3
62671: PUSH
62672: LD_INT 1
62674: PLUS
62675: ST_TO_ADDR
// for i in tmp do
62676: LD_ADDR_VAR 0 1
62680: PUSH
62681: LD_VAR 0 2
62685: PUSH
62686: FOR_IN
62687: IFFALSE 62718
// if GetLives ( i ) < 1000 then
62689: LD_VAR 0 1
62693: PPUSH
62694: CALL_OW 256
62698: PUSH
62699: LD_INT 1000
62701: LESS
62702: IFFALSE 62716
// SetLives ( i , 1000 ) ;
62704: LD_VAR 0 1
62708: PPUSH
62709: LD_INT 1000
62711: PPUSH
62712: CALL_OW 234
62716: GO 62686
62718: POP
62719: POP
// until p > 20 ;
62720: LD_VAR 0 3
62724: PUSH
62725: LD_INT 20
62727: GREATER
62728: IFFALSE 62655
// end ;
62730: PPOPN 3
62732: END
// every 0 0$1 trigger StreamModeActive and sTime do
62733: LD_EXP 39
62737: PUSH
62738: LD_EXP 90
62742: AND
62743: IFFALSE 62778
62745: GO 62747
62747: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
62748: LD_INT 28
62750: PPUSH
62751: LD_OWVAR 2
62755: PPUSH
62756: LD_INT 2
62758: PPUSH
62759: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
62763: LD_INT 30
62765: PPUSH
62766: LD_OWVAR 2
62770: PPUSH
62771: LD_INT 2
62773: PPUSH
62774: CALL_OW 322
// end ;
62778: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
62779: LD_EXP 39
62783: PUSH
62784: LD_EXP 91
62788: AND
62789: IFFALSE 62910
62791: GO 62793
62793: DISABLE
62794: LD_INT 0
62796: PPUSH
62797: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
62798: LD_ADDR_VAR 0 2
62802: PUSH
62803: LD_INT 22
62805: PUSH
62806: LD_OWVAR 2
62810: PUSH
62811: EMPTY
62812: LIST
62813: LIST
62814: PUSH
62815: LD_INT 21
62817: PUSH
62818: LD_INT 1
62820: PUSH
62821: EMPTY
62822: LIST
62823: LIST
62824: PUSH
62825: LD_INT 3
62827: PUSH
62828: LD_INT 23
62830: PUSH
62831: LD_INT 0
62833: PUSH
62834: EMPTY
62835: LIST
62836: LIST
62837: PUSH
62838: EMPTY
62839: LIST
62840: LIST
62841: PUSH
62842: EMPTY
62843: LIST
62844: LIST
62845: LIST
62846: PPUSH
62847: CALL_OW 69
62851: ST_TO_ADDR
// if not tmp then
62852: LD_VAR 0 2
62856: NOT
62857: IFFALSE 62861
// exit ;
62859: GO 62910
// for i in tmp do
62861: LD_ADDR_VAR 0 1
62865: PUSH
62866: LD_VAR 0 2
62870: PUSH
62871: FOR_IN
62872: IFFALSE 62908
// begin if Crawls ( i ) then
62874: LD_VAR 0 1
62878: PPUSH
62879: CALL_OW 318
62883: IFFALSE 62894
// ComWalk ( i ) ;
62885: LD_VAR 0 1
62889: PPUSH
62890: CALL_OW 138
// SetClass ( i , 2 ) ;
62894: LD_VAR 0 1
62898: PPUSH
62899: LD_INT 2
62901: PPUSH
62902: CALL_OW 336
// end ;
62906: GO 62871
62908: POP
62909: POP
// end ;
62910: PPOPN 2
62912: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
62913: LD_EXP 39
62917: PUSH
62918: LD_EXP 92
62922: AND
62923: IFFALSE 63211
62925: GO 62927
62927: DISABLE
62928: LD_INT 0
62930: PPUSH
62931: PPUSH
62932: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
62933: LD_OWVAR 2
62937: PPUSH
62938: LD_INT 9
62940: PPUSH
62941: LD_INT 1
62943: PPUSH
62944: LD_INT 1
62946: PPUSH
62947: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
62951: LD_INT 9
62953: PPUSH
62954: LD_OWVAR 2
62958: PPUSH
62959: CALL_OW 343
// uc_side := 9 ;
62963: LD_ADDR_OWVAR 20
62967: PUSH
62968: LD_INT 9
62970: ST_TO_ADDR
// uc_nation := 2 ;
62971: LD_ADDR_OWVAR 21
62975: PUSH
62976: LD_INT 2
62978: ST_TO_ADDR
// hc_name := Dark Warrior ;
62979: LD_ADDR_OWVAR 26
62983: PUSH
62984: LD_STRING Dark Warrior
62986: ST_TO_ADDR
// hc_gallery :=  ;
62987: LD_ADDR_OWVAR 33
62991: PUSH
62992: LD_STRING 
62994: ST_TO_ADDR
// hc_noskilllimit := true ;
62995: LD_ADDR_OWVAR 76
62999: PUSH
63000: LD_INT 1
63002: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
63003: LD_ADDR_OWVAR 31
63007: PUSH
63008: LD_INT 30
63010: PUSH
63011: LD_INT 30
63013: PUSH
63014: LD_INT 30
63016: PUSH
63017: LD_INT 30
63019: PUSH
63020: EMPTY
63021: LIST
63022: LIST
63023: LIST
63024: LIST
63025: ST_TO_ADDR
// un := CreateHuman ;
63026: LD_ADDR_VAR 0 3
63030: PUSH
63031: CALL_OW 44
63035: ST_TO_ADDR
// hc_noskilllimit := false ;
63036: LD_ADDR_OWVAR 76
63040: PUSH
63041: LD_INT 0
63043: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
63044: LD_VAR 0 3
63048: PPUSH
63049: LD_INT 1
63051: PPUSH
63052: CALL_OW 51
// ToLua ( playRanger() ) ;
63056: LD_STRING playRanger()
63058: PPUSH
63059: CALL_OW 559
// p := 0 ;
63063: LD_ADDR_VAR 0 2
63067: PUSH
63068: LD_INT 0
63070: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
63071: LD_INT 35
63073: PPUSH
63074: CALL_OW 67
// p := p + 1 ;
63078: LD_ADDR_VAR 0 2
63082: PUSH
63083: LD_VAR 0 2
63087: PUSH
63088: LD_INT 1
63090: PLUS
63091: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
63092: LD_VAR 0 3
63096: PPUSH
63097: CALL_OW 256
63101: PUSH
63102: LD_INT 1000
63104: LESS
63105: IFFALSE 63119
// SetLives ( un , 1000 ) ;
63107: LD_VAR 0 3
63111: PPUSH
63112: LD_INT 1000
63114: PPUSH
63115: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
63119: LD_VAR 0 3
63123: PPUSH
63124: LD_INT 81
63126: PUSH
63127: LD_OWVAR 2
63131: PUSH
63132: EMPTY
63133: LIST
63134: LIST
63135: PUSH
63136: LD_INT 91
63138: PUSH
63139: LD_VAR 0 3
63143: PUSH
63144: LD_INT 30
63146: PUSH
63147: EMPTY
63148: LIST
63149: LIST
63150: LIST
63151: PUSH
63152: EMPTY
63153: LIST
63154: LIST
63155: PPUSH
63156: CALL_OW 69
63160: PPUSH
63161: LD_VAR 0 3
63165: PPUSH
63166: CALL_OW 74
63170: PPUSH
63171: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
63175: LD_VAR 0 2
63179: PUSH
63180: LD_INT 80
63182: GREATER
63183: PUSH
63184: LD_VAR 0 3
63188: PPUSH
63189: CALL_OW 301
63193: OR
63194: IFFALSE 63071
// if un then
63196: LD_VAR 0 3
63200: IFFALSE 63211
// RemoveUnit ( un ) ;
63202: LD_VAR 0 3
63206: PPUSH
63207: CALL_OW 64
// end ;
63211: PPOPN 3
63213: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
63214: LD_EXP 93
63218: IFFALSE 63334
63220: GO 63222
63222: DISABLE
63223: LD_INT 0
63225: PPUSH
63226: PPUSH
63227: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
63228: LD_ADDR_VAR 0 2
63232: PUSH
63233: LD_INT 81
63235: PUSH
63236: LD_OWVAR 2
63240: PUSH
63241: EMPTY
63242: LIST
63243: LIST
63244: PUSH
63245: LD_INT 21
63247: PUSH
63248: LD_INT 1
63250: PUSH
63251: EMPTY
63252: LIST
63253: LIST
63254: PUSH
63255: EMPTY
63256: LIST
63257: LIST
63258: PPUSH
63259: CALL_OW 69
63263: ST_TO_ADDR
// ToLua ( playComputer() ) ;
63264: LD_STRING playComputer()
63266: PPUSH
63267: CALL_OW 559
// if not tmp then
63271: LD_VAR 0 2
63275: NOT
63276: IFFALSE 63280
// exit ;
63278: GO 63334
// for i in tmp do
63280: LD_ADDR_VAR 0 1
63284: PUSH
63285: LD_VAR 0 2
63289: PUSH
63290: FOR_IN
63291: IFFALSE 63332
// for j := 1 to 4 do
63293: LD_ADDR_VAR 0 3
63297: PUSH
63298: DOUBLE
63299: LD_INT 1
63301: DEC
63302: ST_TO_ADDR
63303: LD_INT 4
63305: PUSH
63306: FOR_TO
63307: IFFALSE 63328
// SetSkill ( i , j , 10 ) ;
63309: LD_VAR 0 1
63313: PPUSH
63314: LD_VAR 0 3
63318: PPUSH
63319: LD_INT 10
63321: PPUSH
63322: CALL_OW 237
63326: GO 63306
63328: POP
63329: POP
63330: GO 63290
63332: POP
63333: POP
// end ;
63334: PPOPN 3
63336: END
// every 0 0$1 trigger s30 do var i , tmp ;
63337: LD_EXP 94
63341: IFFALSE 63410
63343: GO 63345
63345: DISABLE
63346: LD_INT 0
63348: PPUSH
63349: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
63350: LD_ADDR_VAR 0 2
63354: PUSH
63355: LD_INT 22
63357: PUSH
63358: LD_OWVAR 2
63362: PUSH
63363: EMPTY
63364: LIST
63365: LIST
63366: PPUSH
63367: CALL_OW 69
63371: ST_TO_ADDR
// if not tmp then
63372: LD_VAR 0 2
63376: NOT
63377: IFFALSE 63381
// exit ;
63379: GO 63410
// for i in tmp do
63381: LD_ADDR_VAR 0 1
63385: PUSH
63386: LD_VAR 0 2
63390: PUSH
63391: FOR_IN
63392: IFFALSE 63408
// SetLives ( i , 300 ) ;
63394: LD_VAR 0 1
63398: PPUSH
63399: LD_INT 300
63401: PPUSH
63402: CALL_OW 234
63406: GO 63391
63408: POP
63409: POP
// end ;
63410: PPOPN 2
63412: END
// every 0 0$1 trigger s60 do var i , tmp ;
63413: LD_EXP 95
63417: IFFALSE 63486
63419: GO 63421
63421: DISABLE
63422: LD_INT 0
63424: PPUSH
63425: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
63426: LD_ADDR_VAR 0 2
63430: PUSH
63431: LD_INT 22
63433: PUSH
63434: LD_OWVAR 2
63438: PUSH
63439: EMPTY
63440: LIST
63441: LIST
63442: PPUSH
63443: CALL_OW 69
63447: ST_TO_ADDR
// if not tmp then
63448: LD_VAR 0 2
63452: NOT
63453: IFFALSE 63457
// exit ;
63455: GO 63486
// for i in tmp do
63457: LD_ADDR_VAR 0 1
63461: PUSH
63462: LD_VAR 0 2
63466: PUSH
63467: FOR_IN
63468: IFFALSE 63484
// SetLives ( i , 600 ) ;
63470: LD_VAR 0 1
63474: PPUSH
63475: LD_INT 600
63477: PPUSH
63478: CALL_OW 234
63482: GO 63467
63484: POP
63485: POP
// end ;
63486: PPOPN 2
63488: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
63489: LD_INT 0
63491: PPUSH
// case cmd of 301 :
63492: LD_VAR 0 1
63496: PUSH
63497: LD_INT 301
63499: DOUBLE
63500: EQUAL
63501: IFTRUE 63505
63503: GO 63537
63505: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
63506: LD_VAR 0 6
63510: PPUSH
63511: LD_VAR 0 7
63515: PPUSH
63516: LD_VAR 0 8
63520: PPUSH
63521: LD_VAR 0 4
63525: PPUSH
63526: LD_VAR 0 5
63530: PPUSH
63531: CALL 64746 0 5
63535: GO 63658
63537: LD_INT 302
63539: DOUBLE
63540: EQUAL
63541: IFTRUE 63545
63543: GO 63582
63545: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
63546: LD_VAR 0 6
63550: PPUSH
63551: LD_VAR 0 7
63555: PPUSH
63556: LD_VAR 0 8
63560: PPUSH
63561: LD_VAR 0 9
63565: PPUSH
63566: LD_VAR 0 4
63570: PPUSH
63571: LD_VAR 0 5
63575: PPUSH
63576: CALL 64837 0 6
63580: GO 63658
63582: LD_INT 303
63584: DOUBLE
63585: EQUAL
63586: IFTRUE 63590
63588: GO 63627
63590: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
63591: LD_VAR 0 6
63595: PPUSH
63596: LD_VAR 0 7
63600: PPUSH
63601: LD_VAR 0 8
63605: PPUSH
63606: LD_VAR 0 9
63610: PPUSH
63611: LD_VAR 0 4
63615: PPUSH
63616: LD_VAR 0 5
63620: PPUSH
63621: CALL 63663 0 6
63625: GO 63658
63627: LD_INT 304
63629: DOUBLE
63630: EQUAL
63631: IFTRUE 63635
63633: GO 63657
63635: POP
// hHackTeleport ( unit , x , y ) ; end ;
63636: LD_VAR 0 2
63640: PPUSH
63641: LD_VAR 0 4
63645: PPUSH
63646: LD_VAR 0 5
63650: PPUSH
63651: CALL 65430 0 3
63655: GO 63658
63657: POP
// end ;
63658: LD_VAR 0 12
63662: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
63663: LD_INT 0
63665: PPUSH
63666: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
63667: LD_VAR 0 1
63671: PUSH
63672: LD_INT 1
63674: LESS
63675: PUSH
63676: LD_VAR 0 1
63680: PUSH
63681: LD_INT 3
63683: GREATER
63684: OR
63685: PUSH
63686: LD_VAR 0 5
63690: PPUSH
63691: LD_VAR 0 6
63695: PPUSH
63696: CALL_OW 428
63700: OR
63701: IFFALSE 63705
// exit ;
63703: GO 64433
// uc_side := your_side ;
63705: LD_ADDR_OWVAR 20
63709: PUSH
63710: LD_OWVAR 2
63714: ST_TO_ADDR
// uc_nation := nation ;
63715: LD_ADDR_OWVAR 21
63719: PUSH
63720: LD_VAR 0 1
63724: ST_TO_ADDR
// bc_level = 1 ;
63725: LD_ADDR_OWVAR 43
63729: PUSH
63730: LD_INT 1
63732: ST_TO_ADDR
// case btype of 1 :
63733: LD_VAR 0 2
63737: PUSH
63738: LD_INT 1
63740: DOUBLE
63741: EQUAL
63742: IFTRUE 63746
63744: GO 63757
63746: POP
// bc_type := b_depot ; 2 :
63747: LD_ADDR_OWVAR 42
63751: PUSH
63752: LD_INT 0
63754: ST_TO_ADDR
63755: GO 64377
63757: LD_INT 2
63759: DOUBLE
63760: EQUAL
63761: IFTRUE 63765
63763: GO 63776
63765: POP
// bc_type := b_warehouse ; 3 :
63766: LD_ADDR_OWVAR 42
63770: PUSH
63771: LD_INT 1
63773: ST_TO_ADDR
63774: GO 64377
63776: LD_INT 3
63778: DOUBLE
63779: EQUAL
63780: IFTRUE 63784
63782: GO 63795
63784: POP
// bc_type := b_lab ; 4 .. 9 :
63785: LD_ADDR_OWVAR 42
63789: PUSH
63790: LD_INT 6
63792: ST_TO_ADDR
63793: GO 64377
63795: LD_INT 4
63797: DOUBLE
63798: GREATEREQUAL
63799: IFFALSE 63807
63801: LD_INT 9
63803: DOUBLE
63804: LESSEQUAL
63805: IFTRUE 63809
63807: GO 63869
63809: POP
// begin bc_type := b_lab_half ;
63810: LD_ADDR_OWVAR 42
63814: PUSH
63815: LD_INT 7
63817: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
63818: LD_ADDR_OWVAR 44
63822: PUSH
63823: LD_INT 10
63825: PUSH
63826: LD_INT 11
63828: PUSH
63829: LD_INT 12
63831: PUSH
63832: LD_INT 15
63834: PUSH
63835: LD_INT 14
63837: PUSH
63838: LD_INT 13
63840: PUSH
63841: EMPTY
63842: LIST
63843: LIST
63844: LIST
63845: LIST
63846: LIST
63847: LIST
63848: PUSH
63849: LD_VAR 0 2
63853: PUSH
63854: LD_INT 3
63856: MINUS
63857: ARRAY
63858: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
63859: LD_ADDR_OWVAR 45
63863: PUSH
63864: LD_INT 9
63866: ST_TO_ADDR
// end ; 10 .. 13 :
63867: GO 64377
63869: LD_INT 10
63871: DOUBLE
63872: GREATEREQUAL
63873: IFFALSE 63881
63875: LD_INT 13
63877: DOUBLE
63878: LESSEQUAL
63879: IFTRUE 63883
63881: GO 63960
63883: POP
// begin bc_type := b_lab_full ;
63884: LD_ADDR_OWVAR 42
63888: PUSH
63889: LD_INT 8
63891: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
63892: LD_ADDR_OWVAR 44
63896: PUSH
63897: LD_INT 10
63899: PUSH
63900: LD_INT 12
63902: PUSH
63903: LD_INT 14
63905: PUSH
63906: LD_INT 13
63908: PUSH
63909: EMPTY
63910: LIST
63911: LIST
63912: LIST
63913: LIST
63914: PUSH
63915: LD_VAR 0 2
63919: PUSH
63920: LD_INT 9
63922: MINUS
63923: ARRAY
63924: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
63925: LD_ADDR_OWVAR 45
63929: PUSH
63930: LD_INT 11
63932: PUSH
63933: LD_INT 15
63935: PUSH
63936: LD_INT 12
63938: PUSH
63939: LD_INT 15
63941: PUSH
63942: EMPTY
63943: LIST
63944: LIST
63945: LIST
63946: LIST
63947: PUSH
63948: LD_VAR 0 2
63952: PUSH
63953: LD_INT 9
63955: MINUS
63956: ARRAY
63957: ST_TO_ADDR
// end ; 14 :
63958: GO 64377
63960: LD_INT 14
63962: DOUBLE
63963: EQUAL
63964: IFTRUE 63968
63966: GO 63979
63968: POP
// bc_type := b_workshop ; 15 :
63969: LD_ADDR_OWVAR 42
63973: PUSH
63974: LD_INT 2
63976: ST_TO_ADDR
63977: GO 64377
63979: LD_INT 15
63981: DOUBLE
63982: EQUAL
63983: IFTRUE 63987
63985: GO 63998
63987: POP
// bc_type := b_factory ; 16 :
63988: LD_ADDR_OWVAR 42
63992: PUSH
63993: LD_INT 3
63995: ST_TO_ADDR
63996: GO 64377
63998: LD_INT 16
64000: DOUBLE
64001: EQUAL
64002: IFTRUE 64006
64004: GO 64017
64006: POP
// bc_type := b_ext_gun ; 17 :
64007: LD_ADDR_OWVAR 42
64011: PUSH
64012: LD_INT 17
64014: ST_TO_ADDR
64015: GO 64377
64017: LD_INT 17
64019: DOUBLE
64020: EQUAL
64021: IFTRUE 64025
64023: GO 64053
64025: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
64026: LD_ADDR_OWVAR 42
64030: PUSH
64031: LD_INT 19
64033: PUSH
64034: LD_INT 23
64036: PUSH
64037: LD_INT 19
64039: PUSH
64040: EMPTY
64041: LIST
64042: LIST
64043: LIST
64044: PUSH
64045: LD_VAR 0 1
64049: ARRAY
64050: ST_TO_ADDR
64051: GO 64377
64053: LD_INT 18
64055: DOUBLE
64056: EQUAL
64057: IFTRUE 64061
64059: GO 64072
64061: POP
// bc_type := b_ext_radar ; 19 :
64062: LD_ADDR_OWVAR 42
64066: PUSH
64067: LD_INT 20
64069: ST_TO_ADDR
64070: GO 64377
64072: LD_INT 19
64074: DOUBLE
64075: EQUAL
64076: IFTRUE 64080
64078: GO 64091
64080: POP
// bc_type := b_ext_radio ; 20 :
64081: LD_ADDR_OWVAR 42
64085: PUSH
64086: LD_INT 22
64088: ST_TO_ADDR
64089: GO 64377
64091: LD_INT 20
64093: DOUBLE
64094: EQUAL
64095: IFTRUE 64099
64097: GO 64110
64099: POP
// bc_type := b_ext_siberium ; 21 :
64100: LD_ADDR_OWVAR 42
64104: PUSH
64105: LD_INT 21
64107: ST_TO_ADDR
64108: GO 64377
64110: LD_INT 21
64112: DOUBLE
64113: EQUAL
64114: IFTRUE 64118
64116: GO 64129
64118: POP
// bc_type := b_ext_computer ; 22 :
64119: LD_ADDR_OWVAR 42
64123: PUSH
64124: LD_INT 24
64126: ST_TO_ADDR
64127: GO 64377
64129: LD_INT 22
64131: DOUBLE
64132: EQUAL
64133: IFTRUE 64137
64135: GO 64148
64137: POP
// bc_type := b_ext_track ; 23 :
64138: LD_ADDR_OWVAR 42
64142: PUSH
64143: LD_INT 16
64145: ST_TO_ADDR
64146: GO 64377
64148: LD_INT 23
64150: DOUBLE
64151: EQUAL
64152: IFTRUE 64156
64154: GO 64167
64156: POP
// bc_type := b_ext_laser ; 24 :
64157: LD_ADDR_OWVAR 42
64161: PUSH
64162: LD_INT 25
64164: ST_TO_ADDR
64165: GO 64377
64167: LD_INT 24
64169: DOUBLE
64170: EQUAL
64171: IFTRUE 64175
64173: GO 64186
64175: POP
// bc_type := b_control_tower ; 25 :
64176: LD_ADDR_OWVAR 42
64180: PUSH
64181: LD_INT 36
64183: ST_TO_ADDR
64184: GO 64377
64186: LD_INT 25
64188: DOUBLE
64189: EQUAL
64190: IFTRUE 64194
64192: GO 64205
64194: POP
// bc_type := b_breastwork ; 26 :
64195: LD_ADDR_OWVAR 42
64199: PUSH
64200: LD_INT 31
64202: ST_TO_ADDR
64203: GO 64377
64205: LD_INT 26
64207: DOUBLE
64208: EQUAL
64209: IFTRUE 64213
64211: GO 64224
64213: POP
// bc_type := b_bunker ; 27 :
64214: LD_ADDR_OWVAR 42
64218: PUSH
64219: LD_INT 32
64221: ST_TO_ADDR
64222: GO 64377
64224: LD_INT 27
64226: DOUBLE
64227: EQUAL
64228: IFTRUE 64232
64230: GO 64243
64232: POP
// bc_type := b_turret ; 28 :
64233: LD_ADDR_OWVAR 42
64237: PUSH
64238: LD_INT 33
64240: ST_TO_ADDR
64241: GO 64377
64243: LD_INT 28
64245: DOUBLE
64246: EQUAL
64247: IFTRUE 64251
64249: GO 64262
64251: POP
// bc_type := b_armoury ; 29 :
64252: LD_ADDR_OWVAR 42
64256: PUSH
64257: LD_INT 4
64259: ST_TO_ADDR
64260: GO 64377
64262: LD_INT 29
64264: DOUBLE
64265: EQUAL
64266: IFTRUE 64270
64268: GO 64281
64270: POP
// bc_type := b_barracks ; 30 :
64271: LD_ADDR_OWVAR 42
64275: PUSH
64276: LD_INT 5
64278: ST_TO_ADDR
64279: GO 64377
64281: LD_INT 30
64283: DOUBLE
64284: EQUAL
64285: IFTRUE 64289
64287: GO 64300
64289: POP
// bc_type := b_solar_power ; 31 :
64290: LD_ADDR_OWVAR 42
64294: PUSH
64295: LD_INT 27
64297: ST_TO_ADDR
64298: GO 64377
64300: LD_INT 31
64302: DOUBLE
64303: EQUAL
64304: IFTRUE 64308
64306: GO 64319
64308: POP
// bc_type := b_oil_power ; 32 :
64309: LD_ADDR_OWVAR 42
64313: PUSH
64314: LD_INT 26
64316: ST_TO_ADDR
64317: GO 64377
64319: LD_INT 32
64321: DOUBLE
64322: EQUAL
64323: IFTRUE 64327
64325: GO 64338
64327: POP
// bc_type := b_siberite_power ; 33 :
64328: LD_ADDR_OWVAR 42
64332: PUSH
64333: LD_INT 28
64335: ST_TO_ADDR
64336: GO 64377
64338: LD_INT 33
64340: DOUBLE
64341: EQUAL
64342: IFTRUE 64346
64344: GO 64357
64346: POP
// bc_type := b_oil_mine ; 34 :
64347: LD_ADDR_OWVAR 42
64351: PUSH
64352: LD_INT 29
64354: ST_TO_ADDR
64355: GO 64377
64357: LD_INT 34
64359: DOUBLE
64360: EQUAL
64361: IFTRUE 64365
64363: GO 64376
64365: POP
// bc_type := b_siberite_mine ; end ;
64366: LD_ADDR_OWVAR 42
64370: PUSH
64371: LD_INT 30
64373: ST_TO_ADDR
64374: GO 64377
64376: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
64377: LD_ADDR_VAR 0 8
64381: PUSH
64382: LD_VAR 0 5
64386: PPUSH
64387: LD_VAR 0 6
64391: PPUSH
64392: LD_VAR 0 3
64396: PPUSH
64397: CALL_OW 47
64401: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
64402: LD_OWVAR 42
64406: PUSH
64407: LD_INT 32
64409: PUSH
64410: LD_INT 33
64412: PUSH
64413: EMPTY
64414: LIST
64415: LIST
64416: IN
64417: IFFALSE 64433
// PlaceWeaponTurret ( b , weapon ) ;
64419: LD_VAR 0 8
64423: PPUSH
64424: LD_VAR 0 4
64428: PPUSH
64429: CALL_OW 431
// end ;
64433: LD_VAR 0 7
64437: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
64438: LD_INT 0
64440: PPUSH
64441: PPUSH
64442: PPUSH
64443: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
64444: LD_ADDR_VAR 0 4
64448: PUSH
64449: LD_INT 22
64451: PUSH
64452: LD_OWVAR 2
64456: PUSH
64457: EMPTY
64458: LIST
64459: LIST
64460: PUSH
64461: LD_INT 2
64463: PUSH
64464: LD_INT 30
64466: PUSH
64467: LD_INT 0
64469: PUSH
64470: EMPTY
64471: LIST
64472: LIST
64473: PUSH
64474: LD_INT 30
64476: PUSH
64477: LD_INT 1
64479: PUSH
64480: EMPTY
64481: LIST
64482: LIST
64483: PUSH
64484: EMPTY
64485: LIST
64486: LIST
64487: LIST
64488: PUSH
64489: EMPTY
64490: LIST
64491: LIST
64492: PPUSH
64493: CALL_OW 69
64497: ST_TO_ADDR
// if not tmp then
64498: LD_VAR 0 4
64502: NOT
64503: IFFALSE 64507
// exit ;
64505: GO 64566
// for i in tmp do
64507: LD_ADDR_VAR 0 2
64511: PUSH
64512: LD_VAR 0 4
64516: PUSH
64517: FOR_IN
64518: IFFALSE 64564
// for j = 1 to 3 do
64520: LD_ADDR_VAR 0 3
64524: PUSH
64525: DOUBLE
64526: LD_INT 1
64528: DEC
64529: ST_TO_ADDR
64530: LD_INT 3
64532: PUSH
64533: FOR_TO
64534: IFFALSE 64560
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
64536: LD_VAR 0 2
64540: PPUSH
64541: CALL_OW 274
64545: PPUSH
64546: LD_VAR 0 3
64550: PPUSH
64551: LD_INT 99999
64553: PPUSH
64554: CALL_OW 277
64558: GO 64533
64560: POP
64561: POP
64562: GO 64517
64564: POP
64565: POP
// end ;
64566: LD_VAR 0 1
64570: RET
// export function hHackSetLevel10 ; var i , j ; begin
64571: LD_INT 0
64573: PPUSH
64574: PPUSH
64575: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
64576: LD_ADDR_VAR 0 2
64580: PUSH
64581: LD_INT 21
64583: PUSH
64584: LD_INT 1
64586: PUSH
64587: EMPTY
64588: LIST
64589: LIST
64590: PPUSH
64591: CALL_OW 69
64595: PUSH
64596: FOR_IN
64597: IFFALSE 64649
// if IsSelected ( i ) then
64599: LD_VAR 0 2
64603: PPUSH
64604: CALL_OW 306
64608: IFFALSE 64647
// begin for j := 1 to 4 do
64610: LD_ADDR_VAR 0 3
64614: PUSH
64615: DOUBLE
64616: LD_INT 1
64618: DEC
64619: ST_TO_ADDR
64620: LD_INT 4
64622: PUSH
64623: FOR_TO
64624: IFFALSE 64645
// SetSkill ( i , j , 10 ) ;
64626: LD_VAR 0 2
64630: PPUSH
64631: LD_VAR 0 3
64635: PPUSH
64636: LD_INT 10
64638: PPUSH
64639: CALL_OW 237
64643: GO 64623
64645: POP
64646: POP
// end ;
64647: GO 64596
64649: POP
64650: POP
// end ;
64651: LD_VAR 0 1
64655: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
64656: LD_INT 0
64658: PPUSH
64659: PPUSH
64660: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
64661: LD_ADDR_VAR 0 2
64665: PUSH
64666: LD_INT 22
64668: PUSH
64669: LD_OWVAR 2
64673: PUSH
64674: EMPTY
64675: LIST
64676: LIST
64677: PUSH
64678: LD_INT 21
64680: PUSH
64681: LD_INT 1
64683: PUSH
64684: EMPTY
64685: LIST
64686: LIST
64687: PUSH
64688: EMPTY
64689: LIST
64690: LIST
64691: PPUSH
64692: CALL_OW 69
64696: PUSH
64697: FOR_IN
64698: IFFALSE 64739
// begin for j := 1 to 4 do
64700: LD_ADDR_VAR 0 3
64704: PUSH
64705: DOUBLE
64706: LD_INT 1
64708: DEC
64709: ST_TO_ADDR
64710: LD_INT 4
64712: PUSH
64713: FOR_TO
64714: IFFALSE 64735
// SetSkill ( i , j , 10 ) ;
64716: LD_VAR 0 2
64720: PPUSH
64721: LD_VAR 0 3
64725: PPUSH
64726: LD_INT 10
64728: PPUSH
64729: CALL_OW 237
64733: GO 64713
64735: POP
64736: POP
// end ;
64737: GO 64697
64739: POP
64740: POP
// end ;
64741: LD_VAR 0 1
64745: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
64746: LD_INT 0
64748: PPUSH
// uc_side := your_side ;
64749: LD_ADDR_OWVAR 20
64753: PUSH
64754: LD_OWVAR 2
64758: ST_TO_ADDR
// uc_nation := nation ;
64759: LD_ADDR_OWVAR 21
64763: PUSH
64764: LD_VAR 0 1
64768: ST_TO_ADDR
// InitHc ;
64769: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
64773: LD_INT 0
64775: PPUSH
64776: LD_VAR 0 2
64780: PPUSH
64781: LD_VAR 0 3
64785: PPUSH
64786: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
64790: LD_VAR 0 4
64794: PPUSH
64795: LD_VAR 0 5
64799: PPUSH
64800: CALL_OW 428
64804: PUSH
64805: LD_INT 0
64807: EQUAL
64808: IFFALSE 64832
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
64810: CALL_OW 44
64814: PPUSH
64815: LD_VAR 0 4
64819: PPUSH
64820: LD_VAR 0 5
64824: PPUSH
64825: LD_INT 1
64827: PPUSH
64828: CALL_OW 48
// end ;
64832: LD_VAR 0 6
64836: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
64837: LD_INT 0
64839: PPUSH
64840: PPUSH
// uc_side := your_side ;
64841: LD_ADDR_OWVAR 20
64845: PUSH
64846: LD_OWVAR 2
64850: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
64851: LD_VAR 0 1
64855: PUSH
64856: LD_INT 1
64858: PUSH
64859: LD_INT 2
64861: PUSH
64862: LD_INT 3
64864: PUSH
64865: LD_INT 4
64867: PUSH
64868: LD_INT 5
64870: PUSH
64871: EMPTY
64872: LIST
64873: LIST
64874: LIST
64875: LIST
64876: LIST
64877: IN
64878: IFFALSE 64890
// uc_nation := nation_american else
64880: LD_ADDR_OWVAR 21
64884: PUSH
64885: LD_INT 1
64887: ST_TO_ADDR
64888: GO 64933
// if chassis in [ 11 , 12 , 13 , 14 ] then
64890: LD_VAR 0 1
64894: PUSH
64895: LD_INT 11
64897: PUSH
64898: LD_INT 12
64900: PUSH
64901: LD_INT 13
64903: PUSH
64904: LD_INT 14
64906: PUSH
64907: EMPTY
64908: LIST
64909: LIST
64910: LIST
64911: LIST
64912: IN
64913: IFFALSE 64925
// uc_nation := nation_arabian else
64915: LD_ADDR_OWVAR 21
64919: PUSH
64920: LD_INT 2
64922: ST_TO_ADDR
64923: GO 64933
// uc_nation := nation_russian ;
64925: LD_ADDR_OWVAR 21
64929: PUSH
64930: LD_INT 3
64932: ST_TO_ADDR
// vc_chassis := chassis ;
64933: LD_ADDR_OWVAR 37
64937: PUSH
64938: LD_VAR 0 1
64942: ST_TO_ADDR
// vc_engine := engine ;
64943: LD_ADDR_OWVAR 39
64947: PUSH
64948: LD_VAR 0 2
64952: ST_TO_ADDR
// vc_control := control ;
64953: LD_ADDR_OWVAR 38
64957: PUSH
64958: LD_VAR 0 3
64962: ST_TO_ADDR
// vc_weapon := weapon ;
64963: LD_ADDR_OWVAR 40
64967: PUSH
64968: LD_VAR 0 4
64972: ST_TO_ADDR
// un := CreateVehicle ;
64973: LD_ADDR_VAR 0 8
64977: PUSH
64978: CALL_OW 45
64982: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
64983: LD_VAR 0 8
64987: PPUSH
64988: LD_INT 0
64990: PPUSH
64991: LD_INT 5
64993: PPUSH
64994: CALL_OW 12
64998: PPUSH
64999: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
65003: LD_VAR 0 8
65007: PPUSH
65008: LD_VAR 0 5
65012: PPUSH
65013: LD_VAR 0 6
65017: PPUSH
65018: LD_INT 1
65020: PPUSH
65021: CALL_OW 48
// end ;
65025: LD_VAR 0 7
65029: RET
// export hInvincible ; every 1 do
65030: GO 65032
65032: DISABLE
// hInvincible := [ ] ;
65033: LD_ADDR_EXP 96
65037: PUSH
65038: EMPTY
65039: ST_TO_ADDR
65040: END
// every 10 do var i ;
65041: GO 65043
65043: DISABLE
65044: LD_INT 0
65046: PPUSH
// begin enable ;
65047: ENABLE
// if not hInvincible then
65048: LD_EXP 96
65052: NOT
65053: IFFALSE 65057
// exit ;
65055: GO 65101
// for i in hInvincible do
65057: LD_ADDR_VAR 0 1
65061: PUSH
65062: LD_EXP 96
65066: PUSH
65067: FOR_IN
65068: IFFALSE 65099
// if GetLives ( i ) < 1000 then
65070: LD_VAR 0 1
65074: PPUSH
65075: CALL_OW 256
65079: PUSH
65080: LD_INT 1000
65082: LESS
65083: IFFALSE 65097
// SetLives ( i , 1000 ) ;
65085: LD_VAR 0 1
65089: PPUSH
65090: LD_INT 1000
65092: PPUSH
65093: CALL_OW 234
65097: GO 65067
65099: POP
65100: POP
// end ;
65101: PPOPN 1
65103: END
// export function hHackInvincible ; var i ; begin
65104: LD_INT 0
65106: PPUSH
65107: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
65108: LD_ADDR_VAR 0 2
65112: PUSH
65113: LD_INT 2
65115: PUSH
65116: LD_INT 21
65118: PUSH
65119: LD_INT 1
65121: PUSH
65122: EMPTY
65123: LIST
65124: LIST
65125: PUSH
65126: LD_INT 21
65128: PUSH
65129: LD_INT 2
65131: PUSH
65132: EMPTY
65133: LIST
65134: LIST
65135: PUSH
65136: EMPTY
65137: LIST
65138: LIST
65139: LIST
65140: PPUSH
65141: CALL_OW 69
65145: PUSH
65146: FOR_IN
65147: IFFALSE 65208
// if IsSelected ( i ) then
65149: LD_VAR 0 2
65153: PPUSH
65154: CALL_OW 306
65158: IFFALSE 65206
// begin if i in hInvincible then
65160: LD_VAR 0 2
65164: PUSH
65165: LD_EXP 96
65169: IN
65170: IFFALSE 65190
// hInvincible := hInvincible diff i else
65172: LD_ADDR_EXP 96
65176: PUSH
65177: LD_EXP 96
65181: PUSH
65182: LD_VAR 0 2
65186: DIFF
65187: ST_TO_ADDR
65188: GO 65206
// hInvincible := hInvincible union i ;
65190: LD_ADDR_EXP 96
65194: PUSH
65195: LD_EXP 96
65199: PUSH
65200: LD_VAR 0 2
65204: UNION
65205: ST_TO_ADDR
// end ;
65206: GO 65146
65208: POP
65209: POP
// end ;
65210: LD_VAR 0 1
65214: RET
// export function hHackInvisible ; var i , j ; begin
65215: LD_INT 0
65217: PPUSH
65218: PPUSH
65219: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
65220: LD_ADDR_VAR 0 2
65224: PUSH
65225: LD_INT 21
65227: PUSH
65228: LD_INT 1
65230: PUSH
65231: EMPTY
65232: LIST
65233: LIST
65234: PPUSH
65235: CALL_OW 69
65239: PUSH
65240: FOR_IN
65241: IFFALSE 65265
// if IsSelected ( i ) then
65243: LD_VAR 0 2
65247: PPUSH
65248: CALL_OW 306
65252: IFFALSE 65263
// ComForceInvisible ( i ) ;
65254: LD_VAR 0 2
65258: PPUSH
65259: CALL_OW 496
65263: GO 65240
65265: POP
65266: POP
// end ;
65267: LD_VAR 0 1
65271: RET
// export function hHackChangeYourSide ; begin
65272: LD_INT 0
65274: PPUSH
// if your_side = 8 then
65275: LD_OWVAR 2
65279: PUSH
65280: LD_INT 8
65282: EQUAL
65283: IFFALSE 65295
// your_side := 0 else
65285: LD_ADDR_OWVAR 2
65289: PUSH
65290: LD_INT 0
65292: ST_TO_ADDR
65293: GO 65309
// your_side := your_side + 1 ;
65295: LD_ADDR_OWVAR 2
65299: PUSH
65300: LD_OWVAR 2
65304: PUSH
65305: LD_INT 1
65307: PLUS
65308: ST_TO_ADDR
// end ;
65309: LD_VAR 0 1
65313: RET
// export function hHackChangeUnitSide ; var i , j ; begin
65314: LD_INT 0
65316: PPUSH
65317: PPUSH
65318: PPUSH
// for i in all_units do
65319: LD_ADDR_VAR 0 2
65323: PUSH
65324: LD_OWVAR 3
65328: PUSH
65329: FOR_IN
65330: IFFALSE 65408
// if IsSelected ( i ) then
65332: LD_VAR 0 2
65336: PPUSH
65337: CALL_OW 306
65341: IFFALSE 65406
// begin j := GetSide ( i ) ;
65343: LD_ADDR_VAR 0 3
65347: PUSH
65348: LD_VAR 0 2
65352: PPUSH
65353: CALL_OW 255
65357: ST_TO_ADDR
// if j = 8 then
65358: LD_VAR 0 3
65362: PUSH
65363: LD_INT 8
65365: EQUAL
65366: IFFALSE 65378
// j := 0 else
65368: LD_ADDR_VAR 0 3
65372: PUSH
65373: LD_INT 0
65375: ST_TO_ADDR
65376: GO 65392
// j := j + 1 ;
65378: LD_ADDR_VAR 0 3
65382: PUSH
65383: LD_VAR 0 3
65387: PUSH
65388: LD_INT 1
65390: PLUS
65391: ST_TO_ADDR
// SetSide ( i , j ) ;
65392: LD_VAR 0 2
65396: PPUSH
65397: LD_VAR 0 3
65401: PPUSH
65402: CALL_OW 235
// end ;
65406: GO 65329
65408: POP
65409: POP
// end ;
65410: LD_VAR 0 1
65414: RET
// export function hHackFog ; begin
65415: LD_INT 0
65417: PPUSH
// FogOff ( true ) ;
65418: LD_INT 1
65420: PPUSH
65421: CALL_OW 344
// end ;
65425: LD_VAR 0 1
65429: RET
// export function hHackTeleport ( unit , x , y ) ; begin
65430: LD_INT 0
65432: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
65433: LD_VAR 0 1
65437: PPUSH
65438: LD_VAR 0 2
65442: PPUSH
65443: LD_VAR 0 3
65447: PPUSH
65448: LD_INT 1
65450: PPUSH
65451: LD_INT 1
65453: PPUSH
65454: CALL_OW 483
// CenterOnXY ( x , y ) ;
65458: LD_VAR 0 2
65462: PPUSH
65463: LD_VAR 0 3
65467: PPUSH
65468: CALL_OW 84
// end ;
65472: LD_VAR 0 4
65476: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
65477: LD_INT 0
65479: PPUSH
65480: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
65481: LD_VAR 0 1
65485: NOT
65486: PUSH
65487: LD_VAR 0 2
65491: PPUSH
65492: LD_VAR 0 3
65496: PPUSH
65497: CALL_OW 488
65501: NOT
65502: OR
65503: PUSH
65504: LD_VAR 0 1
65508: PPUSH
65509: CALL_OW 266
65513: PUSH
65514: LD_INT 3
65516: NONEQUAL
65517: PUSH
65518: LD_VAR 0 1
65522: PPUSH
65523: CALL_OW 247
65527: PUSH
65528: LD_INT 1
65530: EQUAL
65531: NOT
65532: AND
65533: OR
65534: IFFALSE 65538
// exit ;
65536: GO 65687
// if GetType ( factory ) = unit_human then
65538: LD_VAR 0 1
65542: PPUSH
65543: CALL_OW 247
65547: PUSH
65548: LD_INT 1
65550: EQUAL
65551: IFFALSE 65568
// factory := IsInUnit ( factory ) ;
65553: LD_ADDR_VAR 0 1
65557: PUSH
65558: LD_VAR 0 1
65562: PPUSH
65563: CALL_OW 310
65567: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
65568: LD_VAR 0 1
65572: PPUSH
65573: CALL_OW 266
65577: PUSH
65578: LD_INT 3
65580: NONEQUAL
65581: IFFALSE 65585
// exit ;
65583: GO 65687
// if HexInfo ( x , y ) = factory then
65585: LD_VAR 0 2
65589: PPUSH
65590: LD_VAR 0 3
65594: PPUSH
65595: CALL_OW 428
65599: PUSH
65600: LD_VAR 0 1
65604: EQUAL
65605: IFFALSE 65632
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
65607: LD_ADDR_EXP 97
65611: PUSH
65612: LD_EXP 97
65616: PPUSH
65617: LD_VAR 0 1
65621: PPUSH
65622: LD_INT 0
65624: PPUSH
65625: CALL_OW 1
65629: ST_TO_ADDR
65630: GO 65683
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
65632: LD_ADDR_EXP 97
65636: PUSH
65637: LD_EXP 97
65641: PPUSH
65642: LD_VAR 0 1
65646: PPUSH
65647: LD_VAR 0 1
65651: PPUSH
65652: CALL_OW 255
65656: PUSH
65657: LD_VAR 0 1
65661: PUSH
65662: LD_VAR 0 2
65666: PUSH
65667: LD_VAR 0 3
65671: PUSH
65672: EMPTY
65673: LIST
65674: LIST
65675: LIST
65676: LIST
65677: PPUSH
65678: CALL_OW 1
65682: ST_TO_ADDR
// UpdateFactoryWaypoints ;
65683: CALL 65692 0 0
// end ;
65687: LD_VAR 0 4
65691: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
65692: LD_INT 0
65694: PPUSH
65695: PPUSH
65696: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
65697: LD_STRING resetFactoryWaypoint();
65699: PPUSH
65700: CALL_OW 559
// if factoryWaypoints then
65704: LD_EXP 97
65708: IFFALSE 65834
// begin list := PrepareArray ( factoryWaypoints ) ;
65710: LD_ADDR_VAR 0 3
65714: PUSH
65715: LD_EXP 97
65719: PPUSH
65720: CALL 43961 0 1
65724: ST_TO_ADDR
// for i := 1 to list do
65725: LD_ADDR_VAR 0 2
65729: PUSH
65730: DOUBLE
65731: LD_INT 1
65733: DEC
65734: ST_TO_ADDR
65735: LD_VAR 0 3
65739: PUSH
65740: FOR_TO
65741: IFFALSE 65832
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
65743: LD_STRING setFactoryWaypointXY(
65745: PUSH
65746: LD_VAR 0 3
65750: PUSH
65751: LD_VAR 0 2
65755: ARRAY
65756: PUSH
65757: LD_INT 1
65759: ARRAY
65760: STR
65761: PUSH
65762: LD_STRING ,
65764: STR
65765: PUSH
65766: LD_VAR 0 3
65770: PUSH
65771: LD_VAR 0 2
65775: ARRAY
65776: PUSH
65777: LD_INT 2
65779: ARRAY
65780: STR
65781: PUSH
65782: LD_STRING ,
65784: STR
65785: PUSH
65786: LD_VAR 0 3
65790: PUSH
65791: LD_VAR 0 2
65795: ARRAY
65796: PUSH
65797: LD_INT 3
65799: ARRAY
65800: STR
65801: PUSH
65802: LD_STRING ,
65804: STR
65805: PUSH
65806: LD_VAR 0 3
65810: PUSH
65811: LD_VAR 0 2
65815: ARRAY
65816: PUSH
65817: LD_INT 4
65819: ARRAY
65820: STR
65821: PUSH
65822: LD_STRING )
65824: STR
65825: PPUSH
65826: CALL_OW 559
65830: GO 65740
65832: POP
65833: POP
// end ; end ;
65834: LD_VAR 0 1
65838: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
65839: LD_INT 0
65841: PPUSH
// if HexInfo ( x , y ) = warehouse then
65842: LD_VAR 0 2
65846: PPUSH
65847: LD_VAR 0 3
65851: PPUSH
65852: CALL_OW 428
65856: PUSH
65857: LD_VAR 0 1
65861: EQUAL
65862: IFFALSE 65889
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
65864: LD_ADDR_EXP 98
65868: PUSH
65869: LD_EXP 98
65873: PPUSH
65874: LD_VAR 0 1
65878: PPUSH
65879: LD_INT 0
65881: PPUSH
65882: CALL_OW 1
65886: ST_TO_ADDR
65887: GO 65940
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
65889: LD_ADDR_EXP 98
65893: PUSH
65894: LD_EXP 98
65898: PPUSH
65899: LD_VAR 0 1
65903: PPUSH
65904: LD_VAR 0 1
65908: PPUSH
65909: CALL_OW 255
65913: PUSH
65914: LD_VAR 0 1
65918: PUSH
65919: LD_VAR 0 2
65923: PUSH
65924: LD_VAR 0 3
65928: PUSH
65929: EMPTY
65930: LIST
65931: LIST
65932: LIST
65933: LIST
65934: PPUSH
65935: CALL_OW 1
65939: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
65940: CALL 65949 0 0
// end ;
65944: LD_VAR 0 4
65948: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
65949: LD_INT 0
65951: PPUSH
65952: PPUSH
65953: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
65954: LD_STRING resetWarehouseGatheringPoints();
65956: PPUSH
65957: CALL_OW 559
// if warehouseGatheringPoints then
65961: LD_EXP 98
65965: IFFALSE 66091
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
65967: LD_ADDR_VAR 0 3
65971: PUSH
65972: LD_EXP 98
65976: PPUSH
65977: CALL 43961 0 1
65981: ST_TO_ADDR
// for i := 1 to list do
65982: LD_ADDR_VAR 0 2
65986: PUSH
65987: DOUBLE
65988: LD_INT 1
65990: DEC
65991: ST_TO_ADDR
65992: LD_VAR 0 3
65996: PUSH
65997: FOR_TO
65998: IFFALSE 66089
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
66000: LD_STRING setWarehouseGatheringPointXY(
66002: PUSH
66003: LD_VAR 0 3
66007: PUSH
66008: LD_VAR 0 2
66012: ARRAY
66013: PUSH
66014: LD_INT 1
66016: ARRAY
66017: STR
66018: PUSH
66019: LD_STRING ,
66021: STR
66022: PUSH
66023: LD_VAR 0 3
66027: PUSH
66028: LD_VAR 0 2
66032: ARRAY
66033: PUSH
66034: LD_INT 2
66036: ARRAY
66037: STR
66038: PUSH
66039: LD_STRING ,
66041: STR
66042: PUSH
66043: LD_VAR 0 3
66047: PUSH
66048: LD_VAR 0 2
66052: ARRAY
66053: PUSH
66054: LD_INT 3
66056: ARRAY
66057: STR
66058: PUSH
66059: LD_STRING ,
66061: STR
66062: PUSH
66063: LD_VAR 0 3
66067: PUSH
66068: LD_VAR 0 2
66072: ARRAY
66073: PUSH
66074: LD_INT 4
66076: ARRAY
66077: STR
66078: PUSH
66079: LD_STRING )
66081: STR
66082: PPUSH
66083: CALL_OW 559
66087: GO 65997
66089: POP
66090: POP
// end ; end ;
66091: LD_VAR 0 1
66095: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
66096: LD_EXP 98
66100: IFFALSE 66785
66102: GO 66104
66104: DISABLE
66105: LD_INT 0
66107: PPUSH
66108: PPUSH
66109: PPUSH
66110: PPUSH
66111: PPUSH
66112: PPUSH
66113: PPUSH
66114: PPUSH
66115: PPUSH
// begin enable ;
66116: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
66117: LD_ADDR_VAR 0 3
66121: PUSH
66122: LD_EXP 98
66126: PPUSH
66127: CALL 43961 0 1
66131: ST_TO_ADDR
// if not list then
66132: LD_VAR 0 3
66136: NOT
66137: IFFALSE 66141
// exit ;
66139: GO 66785
// for i := 1 to list do
66141: LD_ADDR_VAR 0 1
66145: PUSH
66146: DOUBLE
66147: LD_INT 1
66149: DEC
66150: ST_TO_ADDR
66151: LD_VAR 0 3
66155: PUSH
66156: FOR_TO
66157: IFFALSE 66783
// begin depot := list [ i ] [ 2 ] ;
66159: LD_ADDR_VAR 0 8
66163: PUSH
66164: LD_VAR 0 3
66168: PUSH
66169: LD_VAR 0 1
66173: ARRAY
66174: PUSH
66175: LD_INT 2
66177: ARRAY
66178: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
66179: LD_ADDR_VAR 0 5
66183: PUSH
66184: LD_VAR 0 3
66188: PUSH
66189: LD_VAR 0 1
66193: ARRAY
66194: PUSH
66195: LD_INT 1
66197: ARRAY
66198: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
66199: LD_VAR 0 8
66203: PPUSH
66204: CALL_OW 301
66208: PUSH
66209: LD_VAR 0 5
66213: PUSH
66214: LD_VAR 0 8
66218: PPUSH
66219: CALL_OW 255
66223: NONEQUAL
66224: OR
66225: IFFALSE 66254
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
66227: LD_ADDR_EXP 98
66231: PUSH
66232: LD_EXP 98
66236: PPUSH
66237: LD_VAR 0 8
66241: PPUSH
66242: LD_INT 0
66244: PPUSH
66245: CALL_OW 1
66249: ST_TO_ADDR
// exit ;
66250: POP
66251: POP
66252: GO 66785
// end ; x := list [ i ] [ 3 ] ;
66254: LD_ADDR_VAR 0 6
66258: PUSH
66259: LD_VAR 0 3
66263: PUSH
66264: LD_VAR 0 1
66268: ARRAY
66269: PUSH
66270: LD_INT 3
66272: ARRAY
66273: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
66274: LD_ADDR_VAR 0 7
66278: PUSH
66279: LD_VAR 0 3
66283: PUSH
66284: LD_VAR 0 1
66288: ARRAY
66289: PUSH
66290: LD_INT 4
66292: ARRAY
66293: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
66294: LD_ADDR_VAR 0 9
66298: PUSH
66299: LD_VAR 0 6
66303: PPUSH
66304: LD_VAR 0 7
66308: PPUSH
66309: LD_INT 16
66311: PPUSH
66312: CALL 42545 0 3
66316: ST_TO_ADDR
// if not cratesNearbyPoint then
66317: LD_VAR 0 9
66321: NOT
66322: IFFALSE 66328
// exit ;
66324: POP
66325: POP
66326: GO 66785
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
66328: LD_ADDR_VAR 0 4
66332: PUSH
66333: LD_INT 22
66335: PUSH
66336: LD_VAR 0 5
66340: PUSH
66341: EMPTY
66342: LIST
66343: LIST
66344: PUSH
66345: LD_INT 3
66347: PUSH
66348: LD_INT 60
66350: PUSH
66351: EMPTY
66352: LIST
66353: PUSH
66354: EMPTY
66355: LIST
66356: LIST
66357: PUSH
66358: LD_INT 91
66360: PUSH
66361: LD_VAR 0 8
66365: PUSH
66366: LD_INT 6
66368: PUSH
66369: EMPTY
66370: LIST
66371: LIST
66372: LIST
66373: PUSH
66374: LD_INT 2
66376: PUSH
66377: LD_INT 25
66379: PUSH
66380: LD_INT 2
66382: PUSH
66383: EMPTY
66384: LIST
66385: LIST
66386: PUSH
66387: LD_INT 25
66389: PUSH
66390: LD_INT 16
66392: PUSH
66393: EMPTY
66394: LIST
66395: LIST
66396: PUSH
66397: EMPTY
66398: LIST
66399: LIST
66400: LIST
66401: PUSH
66402: EMPTY
66403: LIST
66404: LIST
66405: LIST
66406: LIST
66407: PPUSH
66408: CALL_OW 69
66412: PUSH
66413: LD_VAR 0 8
66417: PPUSH
66418: CALL_OW 313
66422: PPUSH
66423: LD_INT 3
66425: PUSH
66426: LD_INT 60
66428: PUSH
66429: EMPTY
66430: LIST
66431: PUSH
66432: EMPTY
66433: LIST
66434: LIST
66435: PUSH
66436: LD_INT 2
66438: PUSH
66439: LD_INT 25
66441: PUSH
66442: LD_INT 2
66444: PUSH
66445: EMPTY
66446: LIST
66447: LIST
66448: PUSH
66449: LD_INT 25
66451: PUSH
66452: LD_INT 16
66454: PUSH
66455: EMPTY
66456: LIST
66457: LIST
66458: PUSH
66459: EMPTY
66460: LIST
66461: LIST
66462: LIST
66463: PUSH
66464: EMPTY
66465: LIST
66466: LIST
66467: PPUSH
66468: CALL_OW 72
66472: UNION
66473: ST_TO_ADDR
// if tmp then
66474: LD_VAR 0 4
66478: IFFALSE 66558
// begin tmp := ShrinkArray ( tmp , 3 ) ;
66480: LD_ADDR_VAR 0 4
66484: PUSH
66485: LD_VAR 0 4
66489: PPUSH
66490: LD_INT 3
66492: PPUSH
66493: CALL 40514 0 2
66497: ST_TO_ADDR
// for j in tmp do
66498: LD_ADDR_VAR 0 2
66502: PUSH
66503: LD_VAR 0 4
66507: PUSH
66508: FOR_IN
66509: IFFALSE 66552
// begin if IsInUnit ( j ) then
66511: LD_VAR 0 2
66515: PPUSH
66516: CALL_OW 310
66520: IFFALSE 66531
// ComExit ( j ) ;
66522: LD_VAR 0 2
66526: PPUSH
66527: CALL 40597 0 1
// AddComCollect ( j , x , y ) ;
66531: LD_VAR 0 2
66535: PPUSH
66536: LD_VAR 0 6
66540: PPUSH
66541: LD_VAR 0 7
66545: PPUSH
66546: CALL_OW 177
// end ;
66550: GO 66508
66552: POP
66553: POP
// exit ;
66554: POP
66555: POP
66556: GO 66785
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
66558: LD_ADDR_VAR 0 4
66562: PUSH
66563: LD_INT 22
66565: PUSH
66566: LD_VAR 0 5
66570: PUSH
66571: EMPTY
66572: LIST
66573: LIST
66574: PUSH
66575: LD_INT 91
66577: PUSH
66578: LD_VAR 0 8
66582: PUSH
66583: LD_INT 8
66585: PUSH
66586: EMPTY
66587: LIST
66588: LIST
66589: LIST
66590: PUSH
66591: LD_INT 2
66593: PUSH
66594: LD_INT 34
66596: PUSH
66597: LD_INT 12
66599: PUSH
66600: EMPTY
66601: LIST
66602: LIST
66603: PUSH
66604: LD_INT 34
66606: PUSH
66607: LD_INT 51
66609: PUSH
66610: EMPTY
66611: LIST
66612: LIST
66613: PUSH
66614: LD_INT 34
66616: PUSH
66617: LD_INT 32
66619: PUSH
66620: EMPTY
66621: LIST
66622: LIST
66623: PUSH
66624: LD_INT 34
66626: PUSH
66627: LD_INT 89
66629: PUSH
66630: EMPTY
66631: LIST
66632: LIST
66633: PUSH
66634: EMPTY
66635: LIST
66636: LIST
66637: LIST
66638: LIST
66639: LIST
66640: PUSH
66641: EMPTY
66642: LIST
66643: LIST
66644: LIST
66645: PPUSH
66646: CALL_OW 69
66650: ST_TO_ADDR
// if tmp then
66651: LD_VAR 0 4
66655: IFFALSE 66781
// begin for j in tmp do
66657: LD_ADDR_VAR 0 2
66661: PUSH
66662: LD_VAR 0 4
66666: PUSH
66667: FOR_IN
66668: IFFALSE 66779
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
66670: LD_VAR 0 2
66674: PPUSH
66675: CALL_OW 262
66679: PUSH
66680: LD_INT 3
66682: EQUAL
66683: PUSH
66684: LD_VAR 0 2
66688: PPUSH
66689: CALL_OW 261
66693: PUSH
66694: LD_INT 20
66696: GREATER
66697: OR
66698: PUSH
66699: LD_VAR 0 2
66703: PPUSH
66704: CALL_OW 314
66708: NOT
66709: AND
66710: PUSH
66711: LD_VAR 0 2
66715: PPUSH
66716: CALL_OW 263
66720: PUSH
66721: LD_INT 1
66723: NONEQUAL
66724: PUSH
66725: LD_VAR 0 2
66729: PPUSH
66730: CALL_OW 311
66734: OR
66735: AND
66736: IFFALSE 66777
// begin ComCollect ( j , x , y ) ;
66738: LD_VAR 0 2
66742: PPUSH
66743: LD_VAR 0 6
66747: PPUSH
66748: LD_VAR 0 7
66752: PPUSH
66753: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
66757: LD_VAR 0 2
66761: PPUSH
66762: LD_VAR 0 8
66766: PPUSH
66767: CALL_OW 172
// exit ;
66771: POP
66772: POP
66773: POP
66774: POP
66775: GO 66785
// end ;
66777: GO 66667
66779: POP
66780: POP
// end ; end ;
66781: GO 66156
66783: POP
66784: POP
// end ; end_of_file
66785: PPOPN 9
66787: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
66788: LD_VAR 0 1
66792: PUSH
66793: LD_INT 200
66795: DOUBLE
66796: GREATEREQUAL
66797: IFFALSE 66805
66799: LD_INT 299
66801: DOUBLE
66802: LESSEQUAL
66803: IFTRUE 66807
66805: GO 66839
66807: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
66808: LD_VAR 0 1
66812: PPUSH
66813: LD_VAR 0 2
66817: PPUSH
66818: LD_VAR 0 3
66822: PPUSH
66823: LD_VAR 0 4
66827: PPUSH
66828: LD_VAR 0 5
66832: PPUSH
66833: CALL 67327 0 5
66837: GO 66916
66839: LD_INT 300
66841: DOUBLE
66842: GREATEREQUAL
66843: IFFALSE 66851
66845: LD_INT 399
66847: DOUBLE
66848: LESSEQUAL
66849: IFTRUE 66853
66851: GO 66915
66853: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
66854: LD_VAR 0 1
66858: PPUSH
66859: LD_VAR 0 2
66863: PPUSH
66864: LD_VAR 0 3
66868: PPUSH
66869: LD_VAR 0 4
66873: PPUSH
66874: LD_VAR 0 5
66878: PPUSH
66879: LD_VAR 0 6
66883: PPUSH
66884: LD_VAR 0 7
66888: PPUSH
66889: LD_VAR 0 8
66893: PPUSH
66894: LD_VAR 0 9
66898: PPUSH
66899: LD_VAR 0 10
66903: PPUSH
66904: LD_VAR 0 11
66908: PPUSH
66909: CALL 63489 0 11
66913: GO 66916
66915: POP
// end ;
66916: PPOPN 11
66918: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
66919: LD_VAR 0 1
66923: PPUSH
66924: LD_VAR 0 2
66928: PPUSH
66929: LD_VAR 0 3
66933: PPUSH
66934: LD_VAR 0 4
66938: PPUSH
66939: LD_VAR 0 5
66943: PPUSH
66944: CALL 67063 0 5
// end ; end_of_file
66948: PPOPN 5
66950: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
66951: LD_INT 0
66953: PPUSH
66954: PPUSH
66955: PPUSH
66956: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
66957: LD_VAR 0 1
66961: PPUSH
66962: CALL_OW 264
66966: PUSH
66967: LD_INT 91
66969: EQUAL
66970: IFFALSE 67042
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
66972: LD_INT 68
66974: PPUSH
66975: LD_VAR 0 1
66979: PPUSH
66980: CALL_OW 255
66984: PPUSH
66985: CALL_OW 321
66989: PUSH
66990: LD_INT 2
66992: EQUAL
66993: IFFALSE 67005
// eff := 70 else
66995: LD_ADDR_VAR 0 4
66999: PUSH
67000: LD_INT 70
67002: ST_TO_ADDR
67003: GO 67013
// eff := 30 ;
67005: LD_ADDR_VAR 0 4
67009: PUSH
67010: LD_INT 30
67012: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
67013: LD_VAR 0 1
67017: PPUSH
67018: CALL_OW 250
67022: PPUSH
67023: LD_VAR 0 1
67027: PPUSH
67028: CALL_OW 251
67032: PPUSH
67033: LD_VAR 0 4
67037: PPUSH
67038: CALL_OW 495
// end ; end ;
67042: LD_VAR 0 2
67046: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
67047: LD_INT 0
67049: PPUSH
// end ;
67050: LD_VAR 0 4
67054: RET
// export function SOS_Command ( cmd ) ; begin
67055: LD_INT 0
67057: PPUSH
// end ;
67058: LD_VAR 0 2
67062: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
67063: LD_INT 0
67065: PPUSH
// end ;
67066: LD_VAR 0 6
67070: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
67071: LD_INT 0
67073: PPUSH
67074: PPUSH
// if not vehicle or not factory then
67075: LD_VAR 0 1
67079: NOT
67080: PUSH
67081: LD_VAR 0 2
67085: NOT
67086: OR
67087: IFFALSE 67091
// exit ;
67089: GO 67322
// if factoryWaypoints >= factory then
67091: LD_EXP 97
67095: PUSH
67096: LD_VAR 0 2
67100: GREATEREQUAL
67101: IFFALSE 67322
// if factoryWaypoints [ factory ] then
67103: LD_EXP 97
67107: PUSH
67108: LD_VAR 0 2
67112: ARRAY
67113: IFFALSE 67322
// begin if GetControl ( vehicle ) = control_manual then
67115: LD_VAR 0 1
67119: PPUSH
67120: CALL_OW 263
67124: PUSH
67125: LD_INT 1
67127: EQUAL
67128: IFFALSE 67209
// begin driver := IsDrivenBy ( vehicle ) ;
67130: LD_ADDR_VAR 0 4
67134: PUSH
67135: LD_VAR 0 1
67139: PPUSH
67140: CALL_OW 311
67144: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
67145: LD_VAR 0 4
67149: PPUSH
67150: LD_EXP 97
67154: PUSH
67155: LD_VAR 0 2
67159: ARRAY
67160: PUSH
67161: LD_INT 3
67163: ARRAY
67164: PPUSH
67165: LD_EXP 97
67169: PUSH
67170: LD_VAR 0 2
67174: ARRAY
67175: PUSH
67176: LD_INT 4
67178: ARRAY
67179: PPUSH
67180: CALL_OW 171
// AddComExitVehicle ( driver ) ;
67184: LD_VAR 0 4
67188: PPUSH
67189: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
67193: LD_VAR 0 4
67197: PPUSH
67198: LD_VAR 0 2
67202: PPUSH
67203: CALL_OW 180
// end else
67207: GO 67322
// if GetControl ( vehicle ) = control_remote then
67209: LD_VAR 0 1
67213: PPUSH
67214: CALL_OW 263
67218: PUSH
67219: LD_INT 2
67221: EQUAL
67222: IFFALSE 67283
// begin wait ( 0 0$2 ) ;
67224: LD_INT 70
67226: PPUSH
67227: CALL_OW 67
// if Connect ( vehicle ) then
67231: LD_VAR 0 1
67235: PPUSH
67236: CALL 10816 0 1
67240: IFFALSE 67281
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
67242: LD_VAR 0 1
67246: PPUSH
67247: LD_EXP 97
67251: PUSH
67252: LD_VAR 0 2
67256: ARRAY
67257: PUSH
67258: LD_INT 3
67260: ARRAY
67261: PPUSH
67262: LD_EXP 97
67266: PUSH
67267: LD_VAR 0 2
67271: ARRAY
67272: PUSH
67273: LD_INT 4
67275: ARRAY
67276: PPUSH
67277: CALL_OW 171
// end else
67281: GO 67322
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
67283: LD_VAR 0 1
67287: PPUSH
67288: LD_EXP 97
67292: PUSH
67293: LD_VAR 0 2
67297: ARRAY
67298: PUSH
67299: LD_INT 3
67301: ARRAY
67302: PPUSH
67303: LD_EXP 97
67307: PUSH
67308: LD_VAR 0 2
67312: ARRAY
67313: PUSH
67314: LD_INT 4
67316: ARRAY
67317: PPUSH
67318: CALL_OW 171
// end ; end ;
67322: LD_VAR 0 3
67326: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
67327: LD_INT 0
67329: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
67330: LD_VAR 0 1
67334: PUSH
67335: LD_INT 250
67337: EQUAL
67338: PUSH
67339: LD_VAR 0 2
67343: PPUSH
67344: CALL_OW 264
67348: PUSH
67349: LD_INT 81
67351: EQUAL
67352: AND
67353: IFFALSE 67374
// MinerPlaceMine ( unit , x , y ) ;
67355: LD_VAR 0 2
67359: PPUSH
67360: LD_VAR 0 4
67364: PPUSH
67365: LD_VAR 0 5
67369: PPUSH
67370: CALL 70364 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
67374: LD_VAR 0 1
67378: PUSH
67379: LD_INT 251
67381: EQUAL
67382: PUSH
67383: LD_VAR 0 2
67387: PPUSH
67388: CALL_OW 264
67392: PUSH
67393: LD_INT 81
67395: EQUAL
67396: AND
67397: IFFALSE 67418
// MinerDetonateMine ( unit , x , y ) ;
67399: LD_VAR 0 2
67403: PPUSH
67404: LD_VAR 0 4
67408: PPUSH
67409: LD_VAR 0 5
67413: PPUSH
67414: CALL 70639 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
67418: LD_VAR 0 1
67422: PUSH
67423: LD_INT 252
67425: EQUAL
67426: PUSH
67427: LD_VAR 0 2
67431: PPUSH
67432: CALL_OW 264
67436: PUSH
67437: LD_INT 81
67439: EQUAL
67440: AND
67441: IFFALSE 67462
// MinerCreateMinefield ( unit , x , y ) ;
67443: LD_VAR 0 2
67447: PPUSH
67448: LD_VAR 0 4
67452: PPUSH
67453: LD_VAR 0 5
67457: PPUSH
67458: CALL 71056 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
67462: LD_VAR 0 1
67466: PUSH
67467: LD_INT 253
67469: EQUAL
67470: PUSH
67471: LD_VAR 0 2
67475: PPUSH
67476: CALL_OW 257
67480: PUSH
67481: LD_INT 5
67483: EQUAL
67484: AND
67485: IFFALSE 67506
// ComBinocular ( unit , x , y ) ;
67487: LD_VAR 0 2
67491: PPUSH
67492: LD_VAR 0 4
67496: PPUSH
67497: LD_VAR 0 5
67501: PPUSH
67502: CALL 71425 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
67506: LD_VAR 0 1
67510: PUSH
67511: LD_INT 254
67513: EQUAL
67514: PUSH
67515: LD_VAR 0 2
67519: PPUSH
67520: CALL_OW 264
67524: PUSH
67525: LD_INT 99
67527: EQUAL
67528: AND
67529: PUSH
67530: LD_VAR 0 3
67534: PPUSH
67535: CALL_OW 263
67539: PUSH
67540: LD_INT 3
67542: EQUAL
67543: AND
67544: IFFALSE 67560
// HackDestroyVehicle ( unit , selectedUnit ) ;
67546: LD_VAR 0 2
67550: PPUSH
67551: LD_VAR 0 3
67555: PPUSH
67556: CALL 69728 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
67560: LD_VAR 0 1
67564: PUSH
67565: LD_INT 255
67567: EQUAL
67568: PUSH
67569: LD_VAR 0 2
67573: PPUSH
67574: CALL_OW 264
67578: PUSH
67579: LD_INT 14
67581: PUSH
67582: LD_INT 53
67584: PUSH
67585: EMPTY
67586: LIST
67587: LIST
67588: IN
67589: AND
67590: PUSH
67591: LD_VAR 0 4
67595: PPUSH
67596: LD_VAR 0 5
67600: PPUSH
67601: CALL_OW 488
67605: AND
67606: IFFALSE 67630
// CutTreeXYR ( unit , x , y , 12 ) ;
67608: LD_VAR 0 2
67612: PPUSH
67613: LD_VAR 0 4
67617: PPUSH
67618: LD_VAR 0 5
67622: PPUSH
67623: LD_INT 12
67625: PPUSH
67626: CALL 67725 0 4
// if cmd = 256 then
67630: LD_VAR 0 1
67634: PUSH
67635: LD_INT 256
67637: EQUAL
67638: IFFALSE 67659
// SetFactoryWaypoint ( unit , x , y ) ;
67640: LD_VAR 0 2
67644: PPUSH
67645: LD_VAR 0 4
67649: PPUSH
67650: LD_VAR 0 5
67654: PPUSH
67655: CALL 65477 0 3
// if cmd = 257 then
67659: LD_VAR 0 1
67663: PUSH
67664: LD_INT 257
67666: EQUAL
67667: IFFALSE 67688
// SetWarehouseGatheringPoint ( unit , x , y ) ;
67669: LD_VAR 0 2
67673: PPUSH
67674: LD_VAR 0 4
67678: PPUSH
67679: LD_VAR 0 5
67683: PPUSH
67684: CALL 65839 0 3
// if cmd = 258 then
67688: LD_VAR 0 1
67692: PUSH
67693: LD_INT 258
67695: EQUAL
67696: IFFALSE 67720
// BurnTreeXYR ( unit , x , y , 8 ) ;
67698: LD_VAR 0 2
67702: PPUSH
67703: LD_VAR 0 4
67707: PPUSH
67708: LD_VAR 0 5
67712: PPUSH
67713: LD_INT 8
67715: PPUSH
67716: CALL 68119 0 4
// end ;
67720: LD_VAR 0 6
67724: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
67725: LD_INT 0
67727: PPUSH
67728: PPUSH
67729: PPUSH
67730: PPUSH
67731: PPUSH
67732: PPUSH
67733: PPUSH
67734: PPUSH
67735: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
67736: LD_VAR 0 1
67740: PPUSH
67741: CALL_OW 302
67745: NOT
67746: PUSH
67747: LD_VAR 0 2
67751: PPUSH
67752: LD_VAR 0 3
67756: PPUSH
67757: CALL_OW 488
67761: NOT
67762: OR
67763: PUSH
67764: LD_VAR 0 4
67768: NOT
67769: OR
67770: IFFALSE 67774
// exit ;
67772: GO 68114
// list := [ ] ;
67774: LD_ADDR_VAR 0 13
67778: PUSH
67779: EMPTY
67780: ST_TO_ADDR
// if x - r < 0 then
67781: LD_VAR 0 2
67785: PUSH
67786: LD_VAR 0 4
67790: MINUS
67791: PUSH
67792: LD_INT 0
67794: LESS
67795: IFFALSE 67807
// min_x := 0 else
67797: LD_ADDR_VAR 0 7
67801: PUSH
67802: LD_INT 0
67804: ST_TO_ADDR
67805: GO 67823
// min_x := x - r ;
67807: LD_ADDR_VAR 0 7
67811: PUSH
67812: LD_VAR 0 2
67816: PUSH
67817: LD_VAR 0 4
67821: MINUS
67822: ST_TO_ADDR
// if y - r < 0 then
67823: LD_VAR 0 3
67827: PUSH
67828: LD_VAR 0 4
67832: MINUS
67833: PUSH
67834: LD_INT 0
67836: LESS
67837: IFFALSE 67849
// min_y := 0 else
67839: LD_ADDR_VAR 0 8
67843: PUSH
67844: LD_INT 0
67846: ST_TO_ADDR
67847: GO 67865
// min_y := y - r ;
67849: LD_ADDR_VAR 0 8
67853: PUSH
67854: LD_VAR 0 3
67858: PUSH
67859: LD_VAR 0 4
67863: MINUS
67864: ST_TO_ADDR
// max_x := x + r ;
67865: LD_ADDR_VAR 0 9
67869: PUSH
67870: LD_VAR 0 2
67874: PUSH
67875: LD_VAR 0 4
67879: PLUS
67880: ST_TO_ADDR
// max_y := y + r ;
67881: LD_ADDR_VAR 0 10
67885: PUSH
67886: LD_VAR 0 3
67890: PUSH
67891: LD_VAR 0 4
67895: PLUS
67896: ST_TO_ADDR
// for _x = min_x to max_x do
67897: LD_ADDR_VAR 0 11
67901: PUSH
67902: DOUBLE
67903: LD_VAR 0 7
67907: DEC
67908: ST_TO_ADDR
67909: LD_VAR 0 9
67913: PUSH
67914: FOR_TO
67915: IFFALSE 68032
// for _y = min_y to max_y do
67917: LD_ADDR_VAR 0 12
67921: PUSH
67922: DOUBLE
67923: LD_VAR 0 8
67927: DEC
67928: ST_TO_ADDR
67929: LD_VAR 0 10
67933: PUSH
67934: FOR_TO
67935: IFFALSE 68028
// begin if not ValidHex ( _x , _y ) then
67937: LD_VAR 0 11
67941: PPUSH
67942: LD_VAR 0 12
67946: PPUSH
67947: CALL_OW 488
67951: NOT
67952: IFFALSE 67956
// continue ;
67954: GO 67934
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
67956: LD_VAR 0 11
67960: PPUSH
67961: LD_VAR 0 12
67965: PPUSH
67966: CALL_OW 351
67970: PUSH
67971: LD_VAR 0 11
67975: PPUSH
67976: LD_VAR 0 12
67980: PPUSH
67981: CALL_OW 554
67985: AND
67986: IFFALSE 68026
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
67988: LD_ADDR_VAR 0 13
67992: PUSH
67993: LD_VAR 0 13
67997: PPUSH
67998: LD_VAR 0 13
68002: PUSH
68003: LD_INT 1
68005: PLUS
68006: PPUSH
68007: LD_VAR 0 11
68011: PUSH
68012: LD_VAR 0 12
68016: PUSH
68017: EMPTY
68018: LIST
68019: LIST
68020: PPUSH
68021: CALL_OW 2
68025: ST_TO_ADDR
// end ;
68026: GO 67934
68028: POP
68029: POP
68030: GO 67914
68032: POP
68033: POP
// if not list then
68034: LD_VAR 0 13
68038: NOT
68039: IFFALSE 68043
// exit ;
68041: GO 68114
// for i in list do
68043: LD_ADDR_VAR 0 6
68047: PUSH
68048: LD_VAR 0 13
68052: PUSH
68053: FOR_IN
68054: IFFALSE 68112
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
68056: LD_VAR 0 1
68060: PPUSH
68061: LD_STRING M
68063: PUSH
68064: LD_VAR 0 6
68068: PUSH
68069: LD_INT 1
68071: ARRAY
68072: PUSH
68073: LD_VAR 0 6
68077: PUSH
68078: LD_INT 2
68080: ARRAY
68081: PUSH
68082: LD_INT 0
68084: PUSH
68085: LD_INT 0
68087: PUSH
68088: LD_INT 0
68090: PUSH
68091: LD_INT 0
68093: PUSH
68094: EMPTY
68095: LIST
68096: LIST
68097: LIST
68098: LIST
68099: LIST
68100: LIST
68101: LIST
68102: PUSH
68103: EMPTY
68104: LIST
68105: PPUSH
68106: CALL_OW 447
68110: GO 68053
68112: POP
68113: POP
// end ;
68114: LD_VAR 0 5
68118: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
68119: LD_INT 0
68121: PPUSH
68122: PPUSH
68123: PPUSH
68124: PPUSH
68125: PPUSH
68126: PPUSH
68127: PPUSH
68128: PPUSH
68129: PPUSH
68130: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
68131: LD_VAR 0 1
68135: PPUSH
68136: CALL_OW 302
68140: NOT
68141: PUSH
68142: LD_VAR 0 2
68146: PPUSH
68147: LD_VAR 0 3
68151: PPUSH
68152: CALL_OW 488
68156: NOT
68157: OR
68158: PUSH
68159: LD_VAR 0 4
68163: NOT
68164: OR
68165: IFFALSE 68169
// exit ;
68167: GO 68682
// list := [ ] ;
68169: LD_ADDR_VAR 0 13
68173: PUSH
68174: EMPTY
68175: ST_TO_ADDR
// if x - r < 0 then
68176: LD_VAR 0 2
68180: PUSH
68181: LD_VAR 0 4
68185: MINUS
68186: PUSH
68187: LD_INT 0
68189: LESS
68190: IFFALSE 68202
// min_x := 0 else
68192: LD_ADDR_VAR 0 7
68196: PUSH
68197: LD_INT 0
68199: ST_TO_ADDR
68200: GO 68218
// min_x := x - r ;
68202: LD_ADDR_VAR 0 7
68206: PUSH
68207: LD_VAR 0 2
68211: PUSH
68212: LD_VAR 0 4
68216: MINUS
68217: ST_TO_ADDR
// if y - r < 0 then
68218: LD_VAR 0 3
68222: PUSH
68223: LD_VAR 0 4
68227: MINUS
68228: PUSH
68229: LD_INT 0
68231: LESS
68232: IFFALSE 68244
// min_y := 0 else
68234: LD_ADDR_VAR 0 8
68238: PUSH
68239: LD_INT 0
68241: ST_TO_ADDR
68242: GO 68260
// min_y := y - r ;
68244: LD_ADDR_VAR 0 8
68248: PUSH
68249: LD_VAR 0 3
68253: PUSH
68254: LD_VAR 0 4
68258: MINUS
68259: ST_TO_ADDR
// max_x := x + r ;
68260: LD_ADDR_VAR 0 9
68264: PUSH
68265: LD_VAR 0 2
68269: PUSH
68270: LD_VAR 0 4
68274: PLUS
68275: ST_TO_ADDR
// max_y := y + r ;
68276: LD_ADDR_VAR 0 10
68280: PUSH
68281: LD_VAR 0 3
68285: PUSH
68286: LD_VAR 0 4
68290: PLUS
68291: ST_TO_ADDR
// for _x = min_x to max_x do
68292: LD_ADDR_VAR 0 11
68296: PUSH
68297: DOUBLE
68298: LD_VAR 0 7
68302: DEC
68303: ST_TO_ADDR
68304: LD_VAR 0 9
68308: PUSH
68309: FOR_TO
68310: IFFALSE 68427
// for _y = min_y to max_y do
68312: LD_ADDR_VAR 0 12
68316: PUSH
68317: DOUBLE
68318: LD_VAR 0 8
68322: DEC
68323: ST_TO_ADDR
68324: LD_VAR 0 10
68328: PUSH
68329: FOR_TO
68330: IFFALSE 68423
// begin if not ValidHex ( _x , _y ) then
68332: LD_VAR 0 11
68336: PPUSH
68337: LD_VAR 0 12
68341: PPUSH
68342: CALL_OW 488
68346: NOT
68347: IFFALSE 68351
// continue ;
68349: GO 68329
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
68351: LD_VAR 0 11
68355: PPUSH
68356: LD_VAR 0 12
68360: PPUSH
68361: CALL_OW 351
68365: PUSH
68366: LD_VAR 0 11
68370: PPUSH
68371: LD_VAR 0 12
68375: PPUSH
68376: CALL_OW 554
68380: AND
68381: IFFALSE 68421
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
68383: LD_ADDR_VAR 0 13
68387: PUSH
68388: LD_VAR 0 13
68392: PPUSH
68393: LD_VAR 0 13
68397: PUSH
68398: LD_INT 1
68400: PLUS
68401: PPUSH
68402: LD_VAR 0 11
68406: PUSH
68407: LD_VAR 0 12
68411: PUSH
68412: EMPTY
68413: LIST
68414: LIST
68415: PPUSH
68416: CALL_OW 2
68420: ST_TO_ADDR
// end ;
68421: GO 68329
68423: POP
68424: POP
68425: GO 68309
68427: POP
68428: POP
// if not list then
68429: LD_VAR 0 13
68433: NOT
68434: IFFALSE 68438
// exit ;
68436: GO 68682
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
68438: LD_ADDR_VAR 0 13
68442: PUSH
68443: LD_VAR 0 1
68447: PPUSH
68448: LD_VAR 0 13
68452: PPUSH
68453: LD_INT 1
68455: PPUSH
68456: LD_INT 1
68458: PPUSH
68459: CALL 7958 0 4
68463: ST_TO_ADDR
// ComStop ( flame ) ;
68464: LD_VAR 0 1
68468: PPUSH
68469: CALL_OW 141
// for i in list do
68473: LD_ADDR_VAR 0 6
68477: PUSH
68478: LD_VAR 0 13
68482: PUSH
68483: FOR_IN
68484: IFFALSE 68515
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
68486: LD_VAR 0 1
68490: PPUSH
68491: LD_VAR 0 6
68495: PUSH
68496: LD_INT 1
68498: ARRAY
68499: PPUSH
68500: LD_VAR 0 6
68504: PUSH
68505: LD_INT 2
68507: ARRAY
68508: PPUSH
68509: CALL_OW 176
68513: GO 68483
68515: POP
68516: POP
// repeat wait ( 0 0$1 ) ;
68517: LD_INT 35
68519: PPUSH
68520: CALL_OW 67
// task := GetTaskList ( flame ) ;
68524: LD_ADDR_VAR 0 14
68528: PUSH
68529: LD_VAR 0 1
68533: PPUSH
68534: CALL_OW 437
68538: ST_TO_ADDR
// if not task then
68539: LD_VAR 0 14
68543: NOT
68544: IFFALSE 68548
// exit ;
68546: GO 68682
// if task [ 1 ] [ 1 ] <> | then
68548: LD_VAR 0 14
68552: PUSH
68553: LD_INT 1
68555: ARRAY
68556: PUSH
68557: LD_INT 1
68559: ARRAY
68560: PUSH
68561: LD_STRING |
68563: NONEQUAL
68564: IFFALSE 68568
// exit ;
68566: GO 68682
// _x := task [ 1 ] [ 2 ] ;
68568: LD_ADDR_VAR 0 11
68572: PUSH
68573: LD_VAR 0 14
68577: PUSH
68578: LD_INT 1
68580: ARRAY
68581: PUSH
68582: LD_INT 2
68584: ARRAY
68585: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
68586: LD_ADDR_VAR 0 12
68590: PUSH
68591: LD_VAR 0 14
68595: PUSH
68596: LD_INT 1
68598: ARRAY
68599: PUSH
68600: LD_INT 3
68602: ARRAY
68603: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
68604: LD_VAR 0 11
68608: PPUSH
68609: LD_VAR 0 12
68613: PPUSH
68614: CALL_OW 351
68618: NOT
68619: PUSH
68620: LD_VAR 0 11
68624: PPUSH
68625: LD_VAR 0 12
68629: PPUSH
68630: CALL_OW 554
68634: NOT
68635: OR
68636: IFFALSE 68670
// begin task := Delete ( task , 1 ) ;
68638: LD_ADDR_VAR 0 14
68642: PUSH
68643: LD_VAR 0 14
68647: PPUSH
68648: LD_INT 1
68650: PPUSH
68651: CALL_OW 3
68655: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
68656: LD_VAR 0 1
68660: PPUSH
68661: LD_VAR 0 14
68665: PPUSH
68666: CALL_OW 446
// end ; until not HasTask ( flame ) ;
68670: LD_VAR 0 1
68674: PPUSH
68675: CALL_OW 314
68679: NOT
68680: IFFALSE 68517
// end ;
68682: LD_VAR 0 5
68686: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
68687: LD_EXP 100
68691: NOT
68692: IFFALSE 68742
68694: GO 68696
68696: DISABLE
// begin initHack := true ;
68697: LD_ADDR_EXP 100
68701: PUSH
68702: LD_INT 1
68704: ST_TO_ADDR
// hackTanks := [ ] ;
68705: LD_ADDR_EXP 101
68709: PUSH
68710: EMPTY
68711: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
68712: LD_ADDR_EXP 102
68716: PUSH
68717: EMPTY
68718: ST_TO_ADDR
// hackLimit := 3 ;
68719: LD_ADDR_EXP 103
68723: PUSH
68724: LD_INT 3
68726: ST_TO_ADDR
// hackDist := 12 ;
68727: LD_ADDR_EXP 104
68731: PUSH
68732: LD_INT 12
68734: ST_TO_ADDR
// hackCounter := [ ] ;
68735: LD_ADDR_EXP 105
68739: PUSH
68740: EMPTY
68741: ST_TO_ADDR
// end ;
68742: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
68743: LD_EXP 100
68747: PUSH
68748: LD_INT 34
68750: PUSH
68751: LD_INT 99
68753: PUSH
68754: EMPTY
68755: LIST
68756: LIST
68757: PPUSH
68758: CALL_OW 69
68762: AND
68763: IFFALSE 69016
68765: GO 68767
68767: DISABLE
68768: LD_INT 0
68770: PPUSH
68771: PPUSH
// begin enable ;
68772: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
68773: LD_ADDR_VAR 0 1
68777: PUSH
68778: LD_INT 34
68780: PUSH
68781: LD_INT 99
68783: PUSH
68784: EMPTY
68785: LIST
68786: LIST
68787: PPUSH
68788: CALL_OW 69
68792: PUSH
68793: FOR_IN
68794: IFFALSE 69014
// begin if not i in hackTanks then
68796: LD_VAR 0 1
68800: PUSH
68801: LD_EXP 101
68805: IN
68806: NOT
68807: IFFALSE 68890
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
68809: LD_ADDR_EXP 101
68813: PUSH
68814: LD_EXP 101
68818: PPUSH
68819: LD_EXP 101
68823: PUSH
68824: LD_INT 1
68826: PLUS
68827: PPUSH
68828: LD_VAR 0 1
68832: PPUSH
68833: CALL_OW 1
68837: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
68838: LD_ADDR_EXP 102
68842: PUSH
68843: LD_EXP 102
68847: PPUSH
68848: LD_EXP 102
68852: PUSH
68853: LD_INT 1
68855: PLUS
68856: PPUSH
68857: EMPTY
68858: PPUSH
68859: CALL_OW 1
68863: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
68864: LD_ADDR_EXP 105
68868: PUSH
68869: LD_EXP 105
68873: PPUSH
68874: LD_EXP 105
68878: PUSH
68879: LD_INT 1
68881: PLUS
68882: PPUSH
68883: EMPTY
68884: PPUSH
68885: CALL_OW 1
68889: ST_TO_ADDR
// end ; if not IsOk ( i ) then
68890: LD_VAR 0 1
68894: PPUSH
68895: CALL_OW 302
68899: NOT
68900: IFFALSE 68913
// begin HackUnlinkAll ( i ) ;
68902: LD_VAR 0 1
68906: PPUSH
68907: CALL 69019 0 1
// continue ;
68911: GO 68793
// end ; HackCheckCapturedStatus ( i ) ;
68913: LD_VAR 0 1
68917: PPUSH
68918: CALL 69462 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
68922: LD_ADDR_VAR 0 2
68926: PUSH
68927: LD_INT 81
68929: PUSH
68930: LD_VAR 0 1
68934: PPUSH
68935: CALL_OW 255
68939: PUSH
68940: EMPTY
68941: LIST
68942: LIST
68943: PUSH
68944: LD_INT 33
68946: PUSH
68947: LD_INT 3
68949: PUSH
68950: EMPTY
68951: LIST
68952: LIST
68953: PUSH
68954: LD_INT 91
68956: PUSH
68957: LD_VAR 0 1
68961: PUSH
68962: LD_EXP 104
68966: PUSH
68967: EMPTY
68968: LIST
68969: LIST
68970: LIST
68971: PUSH
68972: LD_INT 50
68974: PUSH
68975: EMPTY
68976: LIST
68977: PUSH
68978: EMPTY
68979: LIST
68980: LIST
68981: LIST
68982: LIST
68983: PPUSH
68984: CALL_OW 69
68988: ST_TO_ADDR
// if not tmp then
68989: LD_VAR 0 2
68993: NOT
68994: IFFALSE 68998
// continue ;
68996: GO 68793
// HackLink ( i , tmp ) ;
68998: LD_VAR 0 1
69002: PPUSH
69003: LD_VAR 0 2
69007: PPUSH
69008: CALL 69155 0 2
// end ;
69012: GO 68793
69014: POP
69015: POP
// end ;
69016: PPOPN 2
69018: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
69019: LD_INT 0
69021: PPUSH
69022: PPUSH
69023: PPUSH
// if not hack in hackTanks then
69024: LD_VAR 0 1
69028: PUSH
69029: LD_EXP 101
69033: IN
69034: NOT
69035: IFFALSE 69039
// exit ;
69037: GO 69150
// index := GetElementIndex ( hackTanks , hack ) ;
69039: LD_ADDR_VAR 0 4
69043: PUSH
69044: LD_EXP 101
69048: PPUSH
69049: LD_VAR 0 1
69053: PPUSH
69054: CALL 7255 0 2
69058: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
69059: LD_EXP 102
69063: PUSH
69064: LD_VAR 0 4
69068: ARRAY
69069: IFFALSE 69150
// begin for i in hackTanksCaptured [ index ] do
69071: LD_ADDR_VAR 0 3
69075: PUSH
69076: LD_EXP 102
69080: PUSH
69081: LD_VAR 0 4
69085: ARRAY
69086: PUSH
69087: FOR_IN
69088: IFFALSE 69114
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
69090: LD_VAR 0 3
69094: PUSH
69095: LD_INT 1
69097: ARRAY
69098: PPUSH
69099: LD_VAR 0 3
69103: PUSH
69104: LD_INT 2
69106: ARRAY
69107: PPUSH
69108: CALL_OW 235
69112: GO 69087
69114: POP
69115: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
69116: LD_ADDR_EXP 102
69120: PUSH
69121: LD_EXP 102
69125: PPUSH
69126: LD_VAR 0 4
69130: PPUSH
69131: EMPTY
69132: PPUSH
69133: CALL_OW 1
69137: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
69138: LD_VAR 0 1
69142: PPUSH
69143: LD_INT 0
69145: PPUSH
69146: CALL_OW 505
// end ; end ;
69150: LD_VAR 0 2
69154: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
69155: LD_INT 0
69157: PPUSH
69158: PPUSH
69159: PPUSH
// if not hack in hackTanks or not vehicles then
69160: LD_VAR 0 1
69164: PUSH
69165: LD_EXP 101
69169: IN
69170: NOT
69171: PUSH
69172: LD_VAR 0 2
69176: NOT
69177: OR
69178: IFFALSE 69182
// exit ;
69180: GO 69457
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
69182: LD_ADDR_VAR 0 2
69186: PUSH
69187: LD_VAR 0 1
69191: PPUSH
69192: LD_VAR 0 2
69196: PPUSH
69197: LD_INT 1
69199: PPUSH
69200: LD_INT 1
69202: PPUSH
69203: CALL 7905 0 4
69207: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
69208: LD_ADDR_VAR 0 5
69212: PUSH
69213: LD_EXP 101
69217: PPUSH
69218: LD_VAR 0 1
69222: PPUSH
69223: CALL 7255 0 2
69227: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
69228: LD_EXP 102
69232: PUSH
69233: LD_VAR 0 5
69237: ARRAY
69238: PUSH
69239: LD_EXP 103
69243: LESS
69244: IFFALSE 69433
// begin for i := 1 to vehicles do
69246: LD_ADDR_VAR 0 4
69250: PUSH
69251: DOUBLE
69252: LD_INT 1
69254: DEC
69255: ST_TO_ADDR
69256: LD_VAR 0 2
69260: PUSH
69261: FOR_TO
69262: IFFALSE 69431
// begin if hackTanksCaptured [ index ] = hackLimit then
69264: LD_EXP 102
69268: PUSH
69269: LD_VAR 0 5
69273: ARRAY
69274: PUSH
69275: LD_EXP 103
69279: EQUAL
69280: IFFALSE 69284
// break ;
69282: GO 69431
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
69284: LD_ADDR_EXP 105
69288: PUSH
69289: LD_EXP 105
69293: PPUSH
69294: LD_VAR 0 5
69298: PPUSH
69299: LD_EXP 105
69303: PUSH
69304: LD_VAR 0 5
69308: ARRAY
69309: PUSH
69310: LD_INT 1
69312: PLUS
69313: PPUSH
69314: CALL_OW 1
69318: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
69319: LD_ADDR_EXP 102
69323: PUSH
69324: LD_EXP 102
69328: PPUSH
69329: LD_VAR 0 5
69333: PUSH
69334: LD_EXP 102
69338: PUSH
69339: LD_VAR 0 5
69343: ARRAY
69344: PUSH
69345: LD_INT 1
69347: PLUS
69348: PUSH
69349: EMPTY
69350: LIST
69351: LIST
69352: PPUSH
69353: LD_VAR 0 2
69357: PUSH
69358: LD_VAR 0 4
69362: ARRAY
69363: PUSH
69364: LD_VAR 0 2
69368: PUSH
69369: LD_VAR 0 4
69373: ARRAY
69374: PPUSH
69375: CALL_OW 255
69379: PUSH
69380: EMPTY
69381: LIST
69382: LIST
69383: PPUSH
69384: CALL 7470 0 3
69388: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
69389: LD_VAR 0 2
69393: PUSH
69394: LD_VAR 0 4
69398: ARRAY
69399: PPUSH
69400: LD_VAR 0 1
69404: PPUSH
69405: CALL_OW 255
69409: PPUSH
69410: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
69414: LD_VAR 0 2
69418: PUSH
69419: LD_VAR 0 4
69423: ARRAY
69424: PPUSH
69425: CALL_OW 141
// end ;
69429: GO 69261
69431: POP
69432: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
69433: LD_VAR 0 1
69437: PPUSH
69438: LD_EXP 102
69442: PUSH
69443: LD_VAR 0 5
69447: ARRAY
69448: PUSH
69449: LD_INT 0
69451: PLUS
69452: PPUSH
69453: CALL_OW 505
// end ;
69457: LD_VAR 0 3
69461: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
69462: LD_INT 0
69464: PPUSH
69465: PPUSH
69466: PPUSH
69467: PPUSH
// if not hack in hackTanks then
69468: LD_VAR 0 1
69472: PUSH
69473: LD_EXP 101
69477: IN
69478: NOT
69479: IFFALSE 69483
// exit ;
69481: GO 69723
// index := GetElementIndex ( hackTanks , hack ) ;
69483: LD_ADDR_VAR 0 4
69487: PUSH
69488: LD_EXP 101
69492: PPUSH
69493: LD_VAR 0 1
69497: PPUSH
69498: CALL 7255 0 2
69502: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
69503: LD_ADDR_VAR 0 3
69507: PUSH
69508: DOUBLE
69509: LD_EXP 102
69513: PUSH
69514: LD_VAR 0 4
69518: ARRAY
69519: INC
69520: ST_TO_ADDR
69521: LD_INT 1
69523: PUSH
69524: FOR_DOWNTO
69525: IFFALSE 69697
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
69527: LD_ADDR_VAR 0 5
69531: PUSH
69532: LD_EXP 102
69536: PUSH
69537: LD_VAR 0 4
69541: ARRAY
69542: PUSH
69543: LD_VAR 0 3
69547: ARRAY
69548: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
69549: LD_VAR 0 5
69553: PUSH
69554: LD_INT 1
69556: ARRAY
69557: PPUSH
69558: CALL_OW 302
69562: NOT
69563: PUSH
69564: LD_VAR 0 5
69568: PUSH
69569: LD_INT 1
69571: ARRAY
69572: PPUSH
69573: CALL_OW 255
69577: PUSH
69578: LD_VAR 0 1
69582: PPUSH
69583: CALL_OW 255
69587: NONEQUAL
69588: OR
69589: IFFALSE 69695
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
69591: LD_VAR 0 5
69595: PUSH
69596: LD_INT 1
69598: ARRAY
69599: PPUSH
69600: CALL_OW 305
69604: PUSH
69605: LD_VAR 0 5
69609: PUSH
69610: LD_INT 1
69612: ARRAY
69613: PPUSH
69614: CALL_OW 255
69618: PUSH
69619: LD_VAR 0 1
69623: PPUSH
69624: CALL_OW 255
69628: EQUAL
69629: AND
69630: IFFALSE 69654
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
69632: LD_VAR 0 5
69636: PUSH
69637: LD_INT 1
69639: ARRAY
69640: PPUSH
69641: LD_VAR 0 5
69645: PUSH
69646: LD_INT 2
69648: ARRAY
69649: PPUSH
69650: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
69654: LD_ADDR_EXP 102
69658: PUSH
69659: LD_EXP 102
69663: PPUSH
69664: LD_VAR 0 4
69668: PPUSH
69669: LD_EXP 102
69673: PUSH
69674: LD_VAR 0 4
69678: ARRAY
69679: PPUSH
69680: LD_VAR 0 3
69684: PPUSH
69685: CALL_OW 3
69689: PPUSH
69690: CALL_OW 1
69694: ST_TO_ADDR
// end ; end ;
69695: GO 69524
69697: POP
69698: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
69699: LD_VAR 0 1
69703: PPUSH
69704: LD_EXP 102
69708: PUSH
69709: LD_VAR 0 4
69713: ARRAY
69714: PUSH
69715: LD_INT 0
69717: PLUS
69718: PPUSH
69719: CALL_OW 505
// end ;
69723: LD_VAR 0 2
69727: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
69728: LD_INT 0
69730: PPUSH
69731: PPUSH
69732: PPUSH
69733: PPUSH
// if not hack in hackTanks then
69734: LD_VAR 0 1
69738: PUSH
69739: LD_EXP 101
69743: IN
69744: NOT
69745: IFFALSE 69749
// exit ;
69747: GO 69834
// index := GetElementIndex ( hackTanks , hack ) ;
69749: LD_ADDR_VAR 0 5
69753: PUSH
69754: LD_EXP 101
69758: PPUSH
69759: LD_VAR 0 1
69763: PPUSH
69764: CALL 7255 0 2
69768: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
69769: LD_ADDR_VAR 0 4
69773: PUSH
69774: DOUBLE
69775: LD_INT 1
69777: DEC
69778: ST_TO_ADDR
69779: LD_EXP 102
69783: PUSH
69784: LD_VAR 0 5
69788: ARRAY
69789: PUSH
69790: FOR_TO
69791: IFFALSE 69832
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
69793: LD_EXP 102
69797: PUSH
69798: LD_VAR 0 5
69802: ARRAY
69803: PUSH
69804: LD_VAR 0 4
69808: ARRAY
69809: PUSH
69810: LD_INT 1
69812: ARRAY
69813: PUSH
69814: LD_VAR 0 2
69818: EQUAL
69819: IFFALSE 69830
// KillUnit ( vehicle ) ;
69821: LD_VAR 0 2
69825: PPUSH
69826: CALL_OW 66
69830: GO 69790
69832: POP
69833: POP
// end ;
69834: LD_VAR 0 3
69838: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
69839: LD_EXP 106
69843: NOT
69844: IFFALSE 69879
69846: GO 69848
69848: DISABLE
// begin initMiner := true ;
69849: LD_ADDR_EXP 106
69853: PUSH
69854: LD_INT 1
69856: ST_TO_ADDR
// minersList := [ ] ;
69857: LD_ADDR_EXP 107
69861: PUSH
69862: EMPTY
69863: ST_TO_ADDR
// minerMinesList := [ ] ;
69864: LD_ADDR_EXP 108
69868: PUSH
69869: EMPTY
69870: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
69871: LD_ADDR_EXP 109
69875: PUSH
69876: LD_INT 5
69878: ST_TO_ADDR
// end ;
69879: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
69880: LD_EXP 106
69884: PUSH
69885: LD_INT 34
69887: PUSH
69888: LD_INT 81
69890: PUSH
69891: EMPTY
69892: LIST
69893: LIST
69894: PPUSH
69895: CALL_OW 69
69899: AND
69900: IFFALSE 70361
69902: GO 69904
69904: DISABLE
69905: LD_INT 0
69907: PPUSH
69908: PPUSH
69909: PPUSH
69910: PPUSH
// begin enable ;
69911: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
69912: LD_ADDR_VAR 0 1
69916: PUSH
69917: LD_INT 34
69919: PUSH
69920: LD_INT 81
69922: PUSH
69923: EMPTY
69924: LIST
69925: LIST
69926: PPUSH
69927: CALL_OW 69
69931: PUSH
69932: FOR_IN
69933: IFFALSE 70005
// begin if not i in minersList then
69935: LD_VAR 0 1
69939: PUSH
69940: LD_EXP 107
69944: IN
69945: NOT
69946: IFFALSE 70003
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
69948: LD_ADDR_EXP 107
69952: PUSH
69953: LD_EXP 107
69957: PPUSH
69958: LD_EXP 107
69962: PUSH
69963: LD_INT 1
69965: PLUS
69966: PPUSH
69967: LD_VAR 0 1
69971: PPUSH
69972: CALL_OW 1
69976: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
69977: LD_ADDR_EXP 108
69981: PUSH
69982: LD_EXP 108
69986: PPUSH
69987: LD_EXP 108
69991: PUSH
69992: LD_INT 1
69994: PLUS
69995: PPUSH
69996: EMPTY
69997: PPUSH
69998: CALL_OW 1
70002: ST_TO_ADDR
// end end ;
70003: GO 69932
70005: POP
70006: POP
// for i := minerMinesList downto 1 do
70007: LD_ADDR_VAR 0 1
70011: PUSH
70012: DOUBLE
70013: LD_EXP 108
70017: INC
70018: ST_TO_ADDR
70019: LD_INT 1
70021: PUSH
70022: FOR_DOWNTO
70023: IFFALSE 70359
// begin if IsLive ( minersList [ i ] ) then
70025: LD_EXP 107
70029: PUSH
70030: LD_VAR 0 1
70034: ARRAY
70035: PPUSH
70036: CALL_OW 300
70040: IFFALSE 70068
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
70042: LD_EXP 107
70046: PUSH
70047: LD_VAR 0 1
70051: ARRAY
70052: PPUSH
70053: LD_EXP 108
70057: PUSH
70058: LD_VAR 0 1
70062: ARRAY
70063: PPUSH
70064: CALL_OW 505
// if not minerMinesList [ i ] then
70068: LD_EXP 108
70072: PUSH
70073: LD_VAR 0 1
70077: ARRAY
70078: NOT
70079: IFFALSE 70083
// continue ;
70081: GO 70022
// for j := minerMinesList [ i ] downto 1 do
70083: LD_ADDR_VAR 0 2
70087: PUSH
70088: DOUBLE
70089: LD_EXP 108
70093: PUSH
70094: LD_VAR 0 1
70098: ARRAY
70099: INC
70100: ST_TO_ADDR
70101: LD_INT 1
70103: PUSH
70104: FOR_DOWNTO
70105: IFFALSE 70355
// begin side := GetSide ( minersList [ i ] ) ;
70107: LD_ADDR_VAR 0 3
70111: PUSH
70112: LD_EXP 107
70116: PUSH
70117: LD_VAR 0 1
70121: ARRAY
70122: PPUSH
70123: CALL_OW 255
70127: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
70128: LD_ADDR_VAR 0 4
70132: PUSH
70133: LD_EXP 108
70137: PUSH
70138: LD_VAR 0 1
70142: ARRAY
70143: PUSH
70144: LD_VAR 0 2
70148: ARRAY
70149: PUSH
70150: LD_INT 1
70152: ARRAY
70153: PPUSH
70154: LD_EXP 108
70158: PUSH
70159: LD_VAR 0 1
70163: ARRAY
70164: PUSH
70165: LD_VAR 0 2
70169: ARRAY
70170: PUSH
70171: LD_INT 2
70173: ARRAY
70174: PPUSH
70175: CALL_OW 428
70179: ST_TO_ADDR
// if not tmp then
70180: LD_VAR 0 4
70184: NOT
70185: IFFALSE 70189
// continue ;
70187: GO 70104
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
70189: LD_VAR 0 4
70193: PUSH
70194: LD_INT 81
70196: PUSH
70197: LD_VAR 0 3
70201: PUSH
70202: EMPTY
70203: LIST
70204: LIST
70205: PPUSH
70206: CALL_OW 69
70210: IN
70211: PUSH
70212: LD_EXP 108
70216: PUSH
70217: LD_VAR 0 1
70221: ARRAY
70222: PUSH
70223: LD_VAR 0 2
70227: ARRAY
70228: PUSH
70229: LD_INT 1
70231: ARRAY
70232: PPUSH
70233: LD_EXP 108
70237: PUSH
70238: LD_VAR 0 1
70242: ARRAY
70243: PUSH
70244: LD_VAR 0 2
70248: ARRAY
70249: PUSH
70250: LD_INT 2
70252: ARRAY
70253: PPUSH
70254: CALL_OW 458
70258: AND
70259: IFFALSE 70353
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
70261: LD_EXP 108
70265: PUSH
70266: LD_VAR 0 1
70270: ARRAY
70271: PUSH
70272: LD_VAR 0 2
70276: ARRAY
70277: PUSH
70278: LD_INT 1
70280: ARRAY
70281: PPUSH
70282: LD_EXP 108
70286: PUSH
70287: LD_VAR 0 1
70291: ARRAY
70292: PUSH
70293: LD_VAR 0 2
70297: ARRAY
70298: PUSH
70299: LD_INT 2
70301: ARRAY
70302: PPUSH
70303: LD_VAR 0 3
70307: PPUSH
70308: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
70312: LD_ADDR_EXP 108
70316: PUSH
70317: LD_EXP 108
70321: PPUSH
70322: LD_VAR 0 1
70326: PPUSH
70327: LD_EXP 108
70331: PUSH
70332: LD_VAR 0 1
70336: ARRAY
70337: PPUSH
70338: LD_VAR 0 2
70342: PPUSH
70343: CALL_OW 3
70347: PPUSH
70348: CALL_OW 1
70352: ST_TO_ADDR
// end ; end ;
70353: GO 70104
70355: POP
70356: POP
// end ;
70357: GO 70022
70359: POP
70360: POP
// end ;
70361: PPOPN 4
70363: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
70364: LD_INT 0
70366: PPUSH
70367: PPUSH
// result := false ;
70368: LD_ADDR_VAR 0 4
70372: PUSH
70373: LD_INT 0
70375: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
70376: LD_VAR 0 1
70380: PPUSH
70381: CALL_OW 264
70385: PUSH
70386: LD_INT 81
70388: EQUAL
70389: NOT
70390: IFFALSE 70394
// exit ;
70392: GO 70634
// index := GetElementIndex ( minersList , unit ) ;
70394: LD_ADDR_VAR 0 5
70398: PUSH
70399: LD_EXP 107
70403: PPUSH
70404: LD_VAR 0 1
70408: PPUSH
70409: CALL 7255 0 2
70413: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
70414: LD_EXP 108
70418: PUSH
70419: LD_VAR 0 5
70423: ARRAY
70424: PUSH
70425: LD_EXP 109
70429: GREATEREQUAL
70430: IFFALSE 70434
// exit ;
70432: GO 70634
// ComMoveXY ( unit , x , y ) ;
70434: LD_VAR 0 1
70438: PPUSH
70439: LD_VAR 0 2
70443: PPUSH
70444: LD_VAR 0 3
70448: PPUSH
70449: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
70453: LD_INT 35
70455: PPUSH
70456: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
70460: LD_VAR 0 1
70464: PPUSH
70465: LD_VAR 0 2
70469: PPUSH
70470: LD_VAR 0 3
70474: PPUSH
70475: CALL 38996 0 3
70479: NOT
70480: PUSH
70481: LD_VAR 0 1
70485: PPUSH
70486: CALL_OW 314
70490: AND
70491: IFFALSE 70495
// exit ;
70493: GO 70634
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
70495: LD_VAR 0 2
70499: PPUSH
70500: LD_VAR 0 3
70504: PPUSH
70505: CALL_OW 428
70509: PUSH
70510: LD_VAR 0 1
70514: EQUAL
70515: PUSH
70516: LD_VAR 0 1
70520: PPUSH
70521: CALL_OW 314
70525: NOT
70526: AND
70527: IFFALSE 70453
// PlaySoundXY ( x , y , PlantMine ) ;
70529: LD_VAR 0 2
70533: PPUSH
70534: LD_VAR 0 3
70538: PPUSH
70539: LD_STRING PlantMine
70541: PPUSH
70542: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
70546: LD_VAR 0 2
70550: PPUSH
70551: LD_VAR 0 3
70555: PPUSH
70556: LD_VAR 0 1
70560: PPUSH
70561: CALL_OW 255
70565: PPUSH
70566: LD_INT 0
70568: PPUSH
70569: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
70573: LD_ADDR_EXP 108
70577: PUSH
70578: LD_EXP 108
70582: PPUSH
70583: LD_VAR 0 5
70587: PUSH
70588: LD_EXP 108
70592: PUSH
70593: LD_VAR 0 5
70597: ARRAY
70598: PUSH
70599: LD_INT 1
70601: PLUS
70602: PUSH
70603: EMPTY
70604: LIST
70605: LIST
70606: PPUSH
70607: LD_VAR 0 2
70611: PUSH
70612: LD_VAR 0 3
70616: PUSH
70617: EMPTY
70618: LIST
70619: LIST
70620: PPUSH
70621: CALL 7470 0 3
70625: ST_TO_ADDR
// result := true ;
70626: LD_ADDR_VAR 0 4
70630: PUSH
70631: LD_INT 1
70633: ST_TO_ADDR
// end ;
70634: LD_VAR 0 4
70638: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
70639: LD_INT 0
70641: PPUSH
70642: PPUSH
70643: PPUSH
// if not unit in minersList then
70644: LD_VAR 0 1
70648: PUSH
70649: LD_EXP 107
70653: IN
70654: NOT
70655: IFFALSE 70659
// exit ;
70657: GO 71051
// index := GetElementIndex ( minersList , unit ) ;
70659: LD_ADDR_VAR 0 6
70663: PUSH
70664: LD_EXP 107
70668: PPUSH
70669: LD_VAR 0 1
70673: PPUSH
70674: CALL 7255 0 2
70678: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
70679: LD_ADDR_VAR 0 5
70683: PUSH
70684: DOUBLE
70685: LD_EXP 108
70689: PUSH
70690: LD_VAR 0 6
70694: ARRAY
70695: INC
70696: ST_TO_ADDR
70697: LD_INT 1
70699: PUSH
70700: FOR_DOWNTO
70701: IFFALSE 70862
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
70703: LD_EXP 108
70707: PUSH
70708: LD_VAR 0 6
70712: ARRAY
70713: PUSH
70714: LD_VAR 0 5
70718: ARRAY
70719: PUSH
70720: LD_INT 1
70722: ARRAY
70723: PUSH
70724: LD_VAR 0 2
70728: EQUAL
70729: PUSH
70730: LD_EXP 108
70734: PUSH
70735: LD_VAR 0 6
70739: ARRAY
70740: PUSH
70741: LD_VAR 0 5
70745: ARRAY
70746: PUSH
70747: LD_INT 2
70749: ARRAY
70750: PUSH
70751: LD_VAR 0 3
70755: EQUAL
70756: AND
70757: IFFALSE 70860
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
70759: LD_EXP 108
70763: PUSH
70764: LD_VAR 0 6
70768: ARRAY
70769: PUSH
70770: LD_VAR 0 5
70774: ARRAY
70775: PUSH
70776: LD_INT 1
70778: ARRAY
70779: PPUSH
70780: LD_EXP 108
70784: PUSH
70785: LD_VAR 0 6
70789: ARRAY
70790: PUSH
70791: LD_VAR 0 5
70795: ARRAY
70796: PUSH
70797: LD_INT 2
70799: ARRAY
70800: PPUSH
70801: LD_VAR 0 1
70805: PPUSH
70806: CALL_OW 255
70810: PPUSH
70811: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
70815: LD_ADDR_EXP 108
70819: PUSH
70820: LD_EXP 108
70824: PPUSH
70825: LD_VAR 0 6
70829: PPUSH
70830: LD_EXP 108
70834: PUSH
70835: LD_VAR 0 6
70839: ARRAY
70840: PPUSH
70841: LD_VAR 0 5
70845: PPUSH
70846: CALL_OW 3
70850: PPUSH
70851: CALL_OW 1
70855: ST_TO_ADDR
// exit ;
70856: POP
70857: POP
70858: GO 71051
// end ; end ;
70860: GO 70700
70862: POP
70863: POP
// for i := minerMinesList [ index ] downto 1 do
70864: LD_ADDR_VAR 0 5
70868: PUSH
70869: DOUBLE
70870: LD_EXP 108
70874: PUSH
70875: LD_VAR 0 6
70879: ARRAY
70880: INC
70881: ST_TO_ADDR
70882: LD_INT 1
70884: PUSH
70885: FOR_DOWNTO
70886: IFFALSE 71049
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
70888: LD_EXP 108
70892: PUSH
70893: LD_VAR 0 6
70897: ARRAY
70898: PUSH
70899: LD_VAR 0 5
70903: ARRAY
70904: PUSH
70905: LD_INT 1
70907: ARRAY
70908: PPUSH
70909: LD_EXP 108
70913: PUSH
70914: LD_VAR 0 6
70918: ARRAY
70919: PUSH
70920: LD_VAR 0 5
70924: ARRAY
70925: PUSH
70926: LD_INT 2
70928: ARRAY
70929: PPUSH
70930: LD_VAR 0 2
70934: PPUSH
70935: LD_VAR 0 3
70939: PPUSH
70940: CALL_OW 298
70944: PUSH
70945: LD_INT 6
70947: LESS
70948: IFFALSE 71047
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
70950: LD_EXP 108
70954: PUSH
70955: LD_VAR 0 6
70959: ARRAY
70960: PUSH
70961: LD_VAR 0 5
70965: ARRAY
70966: PUSH
70967: LD_INT 1
70969: ARRAY
70970: PPUSH
70971: LD_EXP 108
70975: PUSH
70976: LD_VAR 0 6
70980: ARRAY
70981: PUSH
70982: LD_VAR 0 5
70986: ARRAY
70987: PUSH
70988: LD_INT 2
70990: ARRAY
70991: PPUSH
70992: LD_VAR 0 1
70996: PPUSH
70997: CALL_OW 255
71001: PPUSH
71002: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
71006: LD_ADDR_EXP 108
71010: PUSH
71011: LD_EXP 108
71015: PPUSH
71016: LD_VAR 0 6
71020: PPUSH
71021: LD_EXP 108
71025: PUSH
71026: LD_VAR 0 6
71030: ARRAY
71031: PPUSH
71032: LD_VAR 0 5
71036: PPUSH
71037: CALL_OW 3
71041: PPUSH
71042: CALL_OW 1
71046: ST_TO_ADDR
// end ; end ;
71047: GO 70885
71049: POP
71050: POP
// end ;
71051: LD_VAR 0 4
71055: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
71056: LD_INT 0
71058: PPUSH
71059: PPUSH
71060: PPUSH
71061: PPUSH
71062: PPUSH
71063: PPUSH
71064: PPUSH
71065: PPUSH
71066: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
71067: LD_VAR 0 1
71071: PPUSH
71072: CALL_OW 264
71076: PUSH
71077: LD_INT 81
71079: EQUAL
71080: NOT
71081: PUSH
71082: LD_VAR 0 1
71086: PUSH
71087: LD_EXP 107
71091: IN
71092: NOT
71093: OR
71094: IFFALSE 71098
// exit ;
71096: GO 71420
// index := GetElementIndex ( minersList , unit ) ;
71098: LD_ADDR_VAR 0 6
71102: PUSH
71103: LD_EXP 107
71107: PPUSH
71108: LD_VAR 0 1
71112: PPUSH
71113: CALL 7255 0 2
71117: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
71118: LD_ADDR_VAR 0 8
71122: PUSH
71123: LD_EXP 109
71127: PUSH
71128: LD_EXP 108
71132: PUSH
71133: LD_VAR 0 6
71137: ARRAY
71138: MINUS
71139: ST_TO_ADDR
// if not minesFreeAmount then
71140: LD_VAR 0 8
71144: NOT
71145: IFFALSE 71149
// exit ;
71147: GO 71420
// tmp := [ ] ;
71149: LD_ADDR_VAR 0 7
71153: PUSH
71154: EMPTY
71155: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
71156: LD_ADDR_VAR 0 5
71160: PUSH
71161: DOUBLE
71162: LD_INT 1
71164: DEC
71165: ST_TO_ADDR
71166: LD_VAR 0 8
71170: PUSH
71171: FOR_TO
71172: IFFALSE 71367
// begin _d := rand ( 0 , 5 ) ;
71174: LD_ADDR_VAR 0 11
71178: PUSH
71179: LD_INT 0
71181: PPUSH
71182: LD_INT 5
71184: PPUSH
71185: CALL_OW 12
71189: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
71190: LD_ADDR_VAR 0 12
71194: PUSH
71195: LD_INT 2
71197: PPUSH
71198: LD_INT 6
71200: PPUSH
71201: CALL_OW 12
71205: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
71206: LD_ADDR_VAR 0 9
71210: PUSH
71211: LD_VAR 0 2
71215: PPUSH
71216: LD_VAR 0 11
71220: PPUSH
71221: LD_VAR 0 12
71225: PPUSH
71226: CALL_OW 272
71230: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
71231: LD_ADDR_VAR 0 10
71235: PUSH
71236: LD_VAR 0 3
71240: PPUSH
71241: LD_VAR 0 11
71245: PPUSH
71246: LD_VAR 0 12
71250: PPUSH
71251: CALL_OW 273
71255: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
71256: LD_VAR 0 9
71260: PPUSH
71261: LD_VAR 0 10
71265: PPUSH
71266: CALL_OW 488
71270: PUSH
71271: LD_VAR 0 9
71275: PUSH
71276: LD_VAR 0 10
71280: PUSH
71281: EMPTY
71282: LIST
71283: LIST
71284: PUSH
71285: LD_VAR 0 7
71289: IN
71290: NOT
71291: AND
71292: PUSH
71293: LD_VAR 0 9
71297: PPUSH
71298: LD_VAR 0 10
71302: PPUSH
71303: CALL_OW 458
71307: NOT
71308: AND
71309: IFFALSE 71351
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
71311: LD_ADDR_VAR 0 7
71315: PUSH
71316: LD_VAR 0 7
71320: PPUSH
71321: LD_VAR 0 7
71325: PUSH
71326: LD_INT 1
71328: PLUS
71329: PPUSH
71330: LD_VAR 0 9
71334: PUSH
71335: LD_VAR 0 10
71339: PUSH
71340: EMPTY
71341: LIST
71342: LIST
71343: PPUSH
71344: CALL_OW 1
71348: ST_TO_ADDR
71349: GO 71365
// i := i - 1 ;
71351: LD_ADDR_VAR 0 5
71355: PUSH
71356: LD_VAR 0 5
71360: PUSH
71361: LD_INT 1
71363: MINUS
71364: ST_TO_ADDR
// end ;
71365: GO 71171
71367: POP
71368: POP
// for i in tmp do
71369: LD_ADDR_VAR 0 5
71373: PUSH
71374: LD_VAR 0 7
71378: PUSH
71379: FOR_IN
71380: IFFALSE 71418
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
71382: LD_VAR 0 1
71386: PPUSH
71387: LD_VAR 0 5
71391: PUSH
71392: LD_INT 1
71394: ARRAY
71395: PPUSH
71396: LD_VAR 0 5
71400: PUSH
71401: LD_INT 2
71403: ARRAY
71404: PPUSH
71405: CALL 70364 0 3
71409: NOT
71410: IFFALSE 71416
// exit ;
71412: POP
71413: POP
71414: GO 71420
71416: GO 71379
71418: POP
71419: POP
// end ;
71420: LD_VAR 0 4
71424: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
71425: LD_INT 0
71427: PPUSH
71428: PPUSH
71429: PPUSH
71430: PPUSH
71431: PPUSH
71432: PPUSH
71433: PPUSH
// if not GetClass ( unit ) = class_sniper then
71434: LD_VAR 0 1
71438: PPUSH
71439: CALL_OW 257
71443: PUSH
71444: LD_INT 5
71446: EQUAL
71447: NOT
71448: IFFALSE 71452
// exit ;
71450: GO 71840
// dist := 8 ;
71452: LD_ADDR_VAR 0 5
71456: PUSH
71457: LD_INT 8
71459: ST_TO_ADDR
// viewRange := 12 ;
71460: LD_ADDR_VAR 0 7
71464: PUSH
71465: LD_INT 12
71467: ST_TO_ADDR
// side := GetSide ( unit ) ;
71468: LD_ADDR_VAR 0 6
71472: PUSH
71473: LD_VAR 0 1
71477: PPUSH
71478: CALL_OW 255
71482: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
71483: LD_INT 61
71485: PPUSH
71486: LD_VAR 0 6
71490: PPUSH
71491: CALL_OW 321
71495: PUSH
71496: LD_INT 2
71498: EQUAL
71499: IFFALSE 71509
// viewRange := 16 ;
71501: LD_ADDR_VAR 0 7
71505: PUSH
71506: LD_INT 16
71508: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
71509: LD_VAR 0 1
71513: PPUSH
71514: LD_VAR 0 2
71518: PPUSH
71519: LD_VAR 0 3
71523: PPUSH
71524: CALL_OW 297
71528: PUSH
71529: LD_VAR 0 5
71533: GREATER
71534: IFFALSE 71613
// begin ComMoveXY ( unit , x , y ) ;
71536: LD_VAR 0 1
71540: PPUSH
71541: LD_VAR 0 2
71545: PPUSH
71546: LD_VAR 0 3
71550: PPUSH
71551: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
71555: LD_INT 35
71557: PPUSH
71558: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
71562: LD_VAR 0 1
71566: PPUSH
71567: LD_VAR 0 2
71571: PPUSH
71572: LD_VAR 0 3
71576: PPUSH
71577: CALL 38996 0 3
71581: NOT
71582: IFFALSE 71586
// exit ;
71584: GO 71840
// until GetDistUnitXY ( unit , x , y ) < dist ;
71586: LD_VAR 0 1
71590: PPUSH
71591: LD_VAR 0 2
71595: PPUSH
71596: LD_VAR 0 3
71600: PPUSH
71601: CALL_OW 297
71605: PUSH
71606: LD_VAR 0 5
71610: LESS
71611: IFFALSE 71555
// end ; ComTurnXY ( unit , x , y ) ;
71613: LD_VAR 0 1
71617: PPUSH
71618: LD_VAR 0 2
71622: PPUSH
71623: LD_VAR 0 3
71627: PPUSH
71628: CALL_OW 118
// wait ( 5 ) ;
71632: LD_INT 5
71634: PPUSH
71635: CALL_OW 67
// _d := GetDir ( unit ) ;
71639: LD_ADDR_VAR 0 10
71643: PUSH
71644: LD_VAR 0 1
71648: PPUSH
71649: CALL_OW 254
71653: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
71654: LD_ADDR_VAR 0 8
71658: PUSH
71659: LD_VAR 0 1
71663: PPUSH
71664: CALL_OW 250
71668: PPUSH
71669: LD_VAR 0 10
71673: PPUSH
71674: LD_VAR 0 5
71678: PPUSH
71679: CALL_OW 272
71683: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
71684: LD_ADDR_VAR 0 9
71688: PUSH
71689: LD_VAR 0 1
71693: PPUSH
71694: CALL_OW 251
71698: PPUSH
71699: LD_VAR 0 10
71703: PPUSH
71704: LD_VAR 0 5
71708: PPUSH
71709: CALL_OW 273
71713: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
71714: LD_VAR 0 8
71718: PPUSH
71719: LD_VAR 0 9
71723: PPUSH
71724: CALL_OW 488
71728: NOT
71729: IFFALSE 71733
// exit ;
71731: GO 71840
// ComAnimCustom ( unit , 1 ) ;
71733: LD_VAR 0 1
71737: PPUSH
71738: LD_INT 1
71740: PPUSH
71741: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
71745: LD_VAR 0 8
71749: PPUSH
71750: LD_VAR 0 9
71754: PPUSH
71755: LD_VAR 0 6
71759: PPUSH
71760: LD_VAR 0 7
71764: PPUSH
71765: CALL_OW 330
// repeat wait ( 1 ) ;
71769: LD_INT 1
71771: PPUSH
71772: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
71776: LD_VAR 0 1
71780: PPUSH
71781: CALL_OW 316
71785: PUSH
71786: LD_VAR 0 1
71790: PPUSH
71791: CALL_OW 314
71795: OR
71796: PUSH
71797: LD_VAR 0 1
71801: PPUSH
71802: CALL_OW 302
71806: NOT
71807: OR
71808: PUSH
71809: LD_VAR 0 1
71813: PPUSH
71814: CALL_OW 301
71818: OR
71819: IFFALSE 71769
// RemoveSeeing ( _x , _y , side ) ;
71821: LD_VAR 0 8
71825: PPUSH
71826: LD_VAR 0 9
71830: PPUSH
71831: LD_VAR 0 6
71835: PPUSH
71836: CALL_OW 331
// end ;
71840: LD_VAR 0 4
71844: RET
