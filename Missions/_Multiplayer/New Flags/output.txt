// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 44435 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 44695 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 0 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 2
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 0
  48: PUSH
  49: LD_INT 0
  51: PUSH
  52: LD_INT 0
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ ] , [ ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 3 , 6 , 9 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 3
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: EMPTY
 297: PUSH
 298: EMPTY
 299: PUSH
 300: LD_INT 0
 302: PUSH
 303: LD_INT 1
 305: PUSH
 306: EMPTY
 307: LIST
 308: LIST
 309: PUSH
 310: LD_INT 1
 312: NEG
 313: PUSH
 314: LD_INT 350
 316: PUSH
 317: LD_INT 700
 319: PUSH
 320: LD_INT 1400
 322: PUSH
 323: LD_INT 0
 325: PUSH
 326: EMPTY
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: LIST
 332: PUSH
 333: LD_INT 0
 335: PUSH
 336: LD_INT 1
 338: PUSH
 339: EMPTY
 340: LIST
 341: LIST
 342: PUSH
 343: LD_INT 0
 345: PUSH
 346: LD_INT 13650
 348: PUSH
 349: LD_INT 7350
 351: PUSH
 352: EMPTY
 353: LIST
 354: LIST
 355: LIST
 356: PUSH
 357: LD_INT 0
 359: PUSH
 360: LD_INT 3
 362: PUSH
 363: LD_INT 6
 365: PUSH
 366: LD_INT 9
 368: PUSH
 369: EMPTY
 370: LIST
 371: LIST
 372: LIST
 373: LIST
 374: PUSH
 375: EMPTY
 376: PUSH
 377: EMPTY
 378: PUSH
 379: LD_INT 0
 381: PUSH
 382: LD_INT 1
 384: PUSH
 385: LD_INT 31500
 387: PUSH
 388: LD_INT 52500
 390: PUSH
 391: LD_INT 63000
 393: PUSH
 394: LD_INT 94500
 396: PUSH
 397: LD_INT 126000
 399: PUSH
 400: LD_INT 189000
 402: PUSH
 403: LD_INT 210000
 405: PUSH
 406: LD_INT 252000
 408: PUSH
 409: LD_INT 378000
 411: PUSH
 412: EMPTY
 413: LIST
 414: LIST
 415: LIST
 416: LIST
 417: LIST
 418: LIST
 419: LIST
 420: LIST
 421: LIST
 422: LIST
 423: LIST
 424: PUSH
 425: EMPTY
 426: PUSH
 427: EMPTY
 428: PUSH
 429: LD_INT 0
 431: PUSH
 432: LD_INT 6300
 434: PUSH
 435: LD_INT 10500
 437: PUSH
 438: LD_INT 16800
 440: PUSH
 441: LD_INT 21000
 443: PUSH
 444: LD_INT 25200
 446: PUSH
 447: LD_INT 31500
 449: PUSH
 450: LD_INT 42000
 452: PUSH
 453: LD_INT 63000
 455: PUSH
 456: EMPTY
 457: LIST
 458: LIST
 459: LIST
 460: LIST
 461: LIST
 462: LIST
 463: LIST
 464: LIST
 465: LIST
 466: PUSH
 467: EMPTY
 468: LIST
 469: LIST
 470: LIST
 471: LIST
 472: LIST
 473: LIST
 474: LIST
 475: LIST
 476: LIST
 477: LIST
 478: LIST
 479: LIST
 480: LIST
 481: LIST
 482: LIST
 483: LIST
 484: LIST
 485: LIST
 486: LIST
 487: LIST
 488: LIST
 489: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 0 , 0 , 1 , 0 0$20 , 1 , 1 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 3 3$0 ] ;
 490: LD_ADDR_EXP 4
 494: PUSH
 495: LD_INT 2
 497: PUSH
 498: LD_INT 15
 500: PUSH
 501: LD_INT 4
 503: PUSH
 504: LD_INT 100
 506: PUSH
 507: LD_INT 30
 509: PUSH
 510: LD_INT 0
 512: PUSH
 513: EMPTY
 514: LIST
 515: LIST
 516: LIST
 517: PUSH
 518: LD_INT 3
 520: PUSH
 521: LD_INT 1
 523: PUSH
 524: LD_INT 2
 526: PUSH
 527: LD_INT 250
 529: PUSH
 530: LD_INT 0
 532: PUSH
 533: LD_INT 0
 535: PUSH
 536: LD_INT 1
 538: PUSH
 539: LD_INT 700
 541: PUSH
 542: LD_INT 1
 544: PUSH
 545: LD_INT 1
 547: PUSH
 548: LD_INT 3
 550: PUSH
 551: LD_INT 0
 553: PUSH
 554: LD_INT 0
 556: PUSH
 557: LD_INT 31500
 559: PUSH
 560: LD_INT 0
 562: PUSH
 563: LD_INT 0
 565: PUSH
 566: LD_INT 6300
 568: PUSH
 569: EMPTY
 570: LIST
 571: LIST
 572: LIST
 573: LIST
 574: LIST
 575: LIST
 576: LIST
 577: LIST
 578: LIST
 579: LIST
 580: LIST
 581: LIST
 582: LIST
 583: LIST
 584: LIST
 585: LIST
 586: LIST
 587: LIST
 588: LIST
 589: LIST
 590: LIST
 591: ST_TO_ADDR
// mpGameType := GameTypeNormal ;
 592: LD_ADDR_EXP 1
 596: PUSH
 597: LD_INT 1
 599: ST_TO_ADDR
// your_side := 1 ;
 600: LD_ADDR_OWVAR 2
 604: PUSH
 605: LD_INT 1
 607: ST_TO_ADDR
// mpSidePositions := [ 8 , 2 , 3 , 4 , 5 , 6 , 7 , 1 ] ;
 608: LD_ADDR_EXP 5
 612: PUSH
 613: LD_INT 8
 615: PUSH
 616: LD_INT 2
 618: PUSH
 619: LD_INT 3
 621: PUSH
 622: LD_INT 4
 624: PUSH
 625: LD_INT 5
 627: PUSH
 628: LD_INT 6
 630: PUSH
 631: LD_INT 7
 633: PUSH
 634: LD_INT 1
 636: PUSH
 637: EMPTY
 638: LIST
 639: LIST
 640: LIST
 641: LIST
 642: LIST
 643: LIST
 644: LIST
 645: LIST
 646: ST_TO_ADDR
// mpSideTeams := [ 1 , 2 , 2 , 3 , 3 , 4 , 4 , 1 ] ;
 647: LD_ADDR_EXP 6
 651: PUSH
 652: LD_INT 1
 654: PUSH
 655: LD_INT 2
 657: PUSH
 658: LD_INT 2
 660: PUSH
 661: LD_INT 3
 663: PUSH
 664: LD_INT 3
 666: PUSH
 667: LD_INT 4
 669: PUSH
 670: LD_INT 4
 672: PUSH
 673: LD_INT 1
 675: PUSH
 676: EMPTY
 677: LIST
 678: LIST
 679: LIST
 680: LIST
 681: LIST
 682: LIST
 683: LIST
 684: LIST
 685: ST_TO_ADDR
// mpSideNations := [ 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 ] ;
 686: LD_ADDR_EXP 7
 690: PUSH
 691: LD_INT 1
 693: PUSH
 694: LD_INT 2
 696: PUSH
 697: LD_INT 3
 699: PUSH
 700: LD_INT 1
 702: PUSH
 703: LD_INT 2
 705: PUSH
 706: LD_INT 3
 708: PUSH
 709: LD_INT 1
 711: PUSH
 712: LD_INT 2
 714: PUSH
 715: EMPTY
 716: LIST
 717: LIST
 718: LIST
 719: LIST
 720: LIST
 721: LIST
 722: LIST
 723: LIST
 724: ST_TO_ADDR
// mpTeams := [ [ 1 , 8 ] , [ 2 , 3 ] , [ 4 , 5 ] , [ 6 , 7 ] ] ;
 725: LD_ADDR_EXP 8
 729: PUSH
 730: LD_INT 1
 732: PUSH
 733: LD_INT 8
 735: PUSH
 736: EMPTY
 737: LIST
 738: LIST
 739: PUSH
 740: LD_INT 2
 742: PUSH
 743: LD_INT 3
 745: PUSH
 746: EMPTY
 747: LIST
 748: LIST
 749: PUSH
 750: LD_INT 4
 752: PUSH
 753: LD_INT 5
 755: PUSH
 756: EMPTY
 757: LIST
 758: LIST
 759: PUSH
 760: LD_INT 6
 762: PUSH
 763: LD_INT 7
 765: PUSH
 766: EMPTY
 767: LIST
 768: LIST
 769: PUSH
 770: EMPTY
 771: LIST
 772: LIST
 773: LIST
 774: LIST
 775: ST_TO_ADDR
// mpTeamGame := true ;
 776: LD_ADDR_EXP 9
 780: PUSH
 781: LD_INT 1
 783: ST_TO_ADDR
// mpMapSize := [ 160 , 200 ] ;
 784: LD_ADDR_EXP 27
 788: PUSH
 789: LD_INT 160
 791: PUSH
 792: LD_INT 200
 794: PUSH
 795: EMPTY
 796: LIST
 797: LIST
 798: ST_TO_ADDR
// end ;
 799: LD_VAR 0 1
 803: RET
// export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 804: LD_INT 0
 806: PPUSH
 807: PPUSH
 808: PPUSH
 809: PPUSH
 810: PPUSH
 811: PPUSH
 812: PPUSH
// mpBuildUpAreas := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
 813: LD_ADDR_EXP 17
 817: PUSH
 818: LD_INT 9
 820: PUSH
 821: LD_INT 10
 823: PUSH
 824: LD_INT 11
 826: PUSH
 827: LD_INT 12
 829: PUSH
 830: LD_INT 13
 832: PUSH
 833: LD_INT 14
 835: PUSH
 836: LD_INT 15
 838: PUSH
 839: LD_INT 16
 841: PUSH
 842: EMPTY
 843: LIST
 844: LIST
 845: LIST
 846: LIST
 847: LIST
 848: LIST
 849: LIST
 850: LIST
 851: ST_TO_ADDR
// mpMarkedAreas := [ Between1 , Between2 , Between3 , Between4 , Center1 , Center2 ] union mpBuildUpAreas ;
 852: LD_ADDR_EXP 16
 856: PUSH
 857: LD_INT 18
 859: PUSH
 860: LD_INT 19
 862: PUSH
 863: LD_INT 20
 865: PUSH
 866: LD_INT 21
 868: PUSH
 869: LD_INT 22
 871: PUSH
 872: LD_INT 23
 874: PUSH
 875: EMPTY
 876: LIST
 877: LIST
 878: LIST
 879: LIST
 880: LIST
 881: LIST
 882: PUSH
 883: LD_EXP 17
 887: UNION
 888: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 889: LD_VAR 0 1
 893: PUSH
 894: LD_INT 2
 896: EQUAL
 897: IFFALSE 909
// baseLevel := 1 else
 899: LD_ADDR_VAR 0 7
 903: PUSH
 904: LD_INT 1
 906: ST_TO_ADDR
 907: GO 923
// baseLevel := mpGameSettings [ 1 ] ;
 909: LD_ADDR_VAR 0 7
 913: PUSH
 914: LD_EXP 4
 918: PUSH
 919: LD_INT 1
 921: ARRAY
 922: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 923: LD_ADDR_EXP 22
 927: PUSH
 928: LD_EXP 4
 932: PUSH
 933: LD_INT 2
 935: ARRAY
 936: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 937: LD_ADDR_EXP 23
 941: PUSH
 942: LD_EXP 4
 946: PUSH
 947: LD_INT 3
 949: ARRAY
 950: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 951: LD_ADDR_EXP 13
 955: PUSH
 956: LD_EXP 4
 960: PUSH
 961: LD_INT 4
 963: ARRAY
 964: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 965: LD_ADDR_EXP 25
 969: PUSH
 970: LD_EXP 4
 974: PUSH
 975: LD_INT 5
 977: ARRAY
 978: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
 979: LD_ADDR_VAR 0 5
 983: PUSH
 984: LD_EXP 4
 988: PUSH
 989: LD_INT 6
 991: ARRAY
 992: PUSH
 993: LD_INT 0
 995: GREATER
 996: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
 997: LD_ADDR_VAR 0 6
1001: PUSH
1002: LD_EXP 4
1006: PUSH
1007: LD_INT 7
1009: ARRAY
1010: PUSH
1011: LD_INT 0
1013: GREATER
1014: ST_TO_ADDR
// if gameType = GameTypeKing then
1015: LD_VAR 0 1
1019: PUSH
1020: LD_INT 3
1022: EQUAL
1023: IFFALSE 1049
// begin mpKingArea := kingArea ;
1025: LD_ADDR_EXP 31
1029: PUSH
1030: LD_INT 64
1032: ST_TO_ADDR
// mpPoints := mpGameSettings [ 8 ] ;
1033: LD_ADDR_EXP 32
1037: PUSH
1038: LD_EXP 4
1042: PUSH
1043: LD_INT 8
1045: ARRAY
1046: ST_TO_ADDR
// end else
1047: GO 1065
// begin mpKingArea := 0 ;
1049: LD_ADDR_EXP 31
1053: PUSH
1054: LD_INT 0
1056: ST_TO_ADDR
// mpPoints := 0 ;
1057: LD_ADDR_EXP 32
1061: PUSH
1062: LD_INT 0
1064: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1065: LD_ADDR_EXP 14
1069: PUSH
1070: LD_EXP 4
1074: PUSH
1075: LD_INT 11
1077: ARRAY
1078: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1079: LD_ADDR_EXP 20
1083: PUSH
1084: LD_EXP 4
1088: PUSH
1089: LD_INT 12
1091: ARRAY
1092: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1093: LD_ADDR_EXP 24
1097: PUSH
1098: LD_EXP 4
1102: PUSH
1103: LD_INT 13
1105: ARRAY
1106: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1107: LD_ADDR_EXP 30
1111: PUSH
1112: LD_EXP 4
1116: PUSH
1117: LD_INT 14
1119: ARRAY
1120: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1121: LD_ADDR_EXP 28
1125: PUSH
1126: LD_EXP 4
1130: PUSH
1131: LD_INT 15
1133: ARRAY
1134: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 17 ] ;
1135: LD_ADDR_EXP 26
1139: PUSH
1140: LD_EXP 4
1144: PUSH
1145: LD_INT 17
1147: ARRAY
1148: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 20 ] ;
1149: LD_ADDR_EXP 18
1153: PUSH
1154: LD_EXP 4
1158: PUSH
1159: LD_INT 20
1161: ARRAY
1162: ST_TO_ADDR
// mpApemansArea := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , Base7ApeArea , Base8ApeArea ] ;
1163: LD_ADDR_EXP 29
1167: PUSH
1168: LD_INT 1
1170: PUSH
1171: LD_INT 2
1173: PUSH
1174: LD_INT 3
1176: PUSH
1177: LD_INT 4
1179: PUSH
1180: LD_INT 5
1182: PUSH
1183: LD_INT 6
1185: PUSH
1186: LD_INT 7
1188: PUSH
1189: LD_INT 8
1191: PUSH
1192: EMPTY
1193: LIST
1194: LIST
1195: LIST
1196: LIST
1197: LIST
1198: LIST
1199: LIST
1200: LIST
1201: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 2 ) , GetBuildingFromArea ( depotArea2 , 5 ) , GetBuildingFromArea ( depotArea3 , 3 ) , GetBuildingFromArea ( depotArea4 , 4 ) , GetBuildingFromArea ( depotArea5 , 5 ) , GetBuildingFromArea ( depotArea6 , 2 ) , GetBuildingFromArea ( depotArea7 , 0 ) , GetBuildingFromArea ( depotArea8 , 1 ) ] ;
1202: LD_ADDR_VAR 0 8
1206: PUSH
1207: LD_INT 40
1209: PPUSH
1210: LD_INT 2
1212: PPUSH
1213: CALL 44294 0 2
1217: PUSH
1218: LD_INT 41
1220: PPUSH
1221: LD_INT 5
1223: PPUSH
1224: CALL 44294 0 2
1228: PUSH
1229: LD_INT 42
1231: PPUSH
1232: LD_INT 3
1234: PPUSH
1235: CALL 44294 0 2
1239: PUSH
1240: LD_INT 43
1242: PPUSH
1243: LD_INT 4
1245: PPUSH
1246: CALL 44294 0 2
1250: PUSH
1251: LD_INT 44
1253: PPUSH
1254: LD_INT 5
1256: PPUSH
1257: CALL 44294 0 2
1261: PUSH
1262: LD_INT 45
1264: PPUSH
1265: LD_INT 2
1267: PPUSH
1268: CALL 44294 0 2
1272: PUSH
1273: LD_INT 46
1275: PPUSH
1276: LD_INT 0
1278: PPUSH
1279: CALL 44294 0 2
1283: PUSH
1284: LD_INT 47
1286: PPUSH
1287: LD_INT 1
1289: PPUSH
1290: CALL 44294 0 2
1294: PUSH
1295: EMPTY
1296: LIST
1297: LIST
1298: LIST
1299: LIST
1300: LIST
1301: LIST
1302: LIST
1303: LIST
1304: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1305: LD_ADDR_VAR 0 3
1309: PUSH
1310: DOUBLE
1311: LD_INT 1
1313: DEC
1314: ST_TO_ADDR
1315: LD_VAR 0 8
1319: PPUSH
1320: CALL 4305 0 1
1324: PUSH
1325: FOR_TO
1326: IFFALSE 1430
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1328: LD_ADDR_EXP 19
1332: PUSH
1333: LD_EXP 19
1337: PPUSH
1338: LD_VAR 0 3
1342: PPUSH
1343: LD_VAR 0 8
1347: PUSH
1348: LD_VAR 0 3
1352: ARRAY
1353: PUSH
1354: LD_INT 1
1356: ARRAY
1357: PPUSH
1358: LD_VAR 0 8
1362: PUSH
1363: LD_VAR 0 3
1367: ARRAY
1368: PUSH
1369: LD_INT 3
1371: ARRAY
1372: PPUSH
1373: LD_INT 10
1375: PPUSH
1376: CALL_OW 272
1380: PUSH
1381: LD_VAR 0 8
1385: PUSH
1386: LD_VAR 0 3
1390: ARRAY
1391: PUSH
1392: LD_INT 2
1394: ARRAY
1395: PPUSH
1396: LD_VAR 0 8
1400: PUSH
1401: LD_VAR 0 3
1405: ARRAY
1406: PUSH
1407: LD_INT 3
1409: ARRAY
1410: PPUSH
1411: LD_INT 10
1413: PPUSH
1414: CALL_OW 273
1418: PUSH
1419: EMPTY
1420: LIST
1421: LIST
1422: PPUSH
1423: CALL_OW 1
1427: ST_TO_ADDR
1428: GO 1325
1430: POP
1431: POP
// if hasOil then
1432: LD_VAR 0 5
1436: IFFALSE 1575
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1438: LD_ADDR_VAR 0 4
1442: PUSH
1443: LD_EXP 4
1447: PUSH
1448: LD_INT 6
1450: ARRAY
1451: PUSH
1452: LD_INT 2
1454: EQUAL
1455: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) , GetSourcesFromArea ( oilArea7 , all ) , GetSourcesFromArea ( oilArea8 , all ) ] ;
1456: LD_ADDR_EXP 10
1460: PUSH
1461: LD_INT 24
1463: PPUSH
1464: LD_VAR 0 4
1468: PPUSH
1469: CALL 44127 0 2
1473: PUSH
1474: LD_INT 25
1476: PPUSH
1477: LD_VAR 0 4
1481: PPUSH
1482: CALL 44127 0 2
1486: PUSH
1487: LD_INT 26
1489: PPUSH
1490: LD_VAR 0 4
1494: PPUSH
1495: CALL 44127 0 2
1499: PUSH
1500: LD_INT 27
1502: PPUSH
1503: LD_VAR 0 4
1507: PPUSH
1508: CALL 44127 0 2
1512: PUSH
1513: LD_INT 28
1515: PPUSH
1516: LD_VAR 0 4
1520: PPUSH
1521: CALL 44127 0 2
1525: PUSH
1526: LD_INT 29
1528: PPUSH
1529: LD_VAR 0 4
1533: PPUSH
1534: CALL 44127 0 2
1538: PUSH
1539: LD_INT 30
1541: PPUSH
1542: LD_VAR 0 4
1546: PPUSH
1547: CALL 44127 0 2
1551: PUSH
1552: LD_INT 31
1554: PPUSH
1555: LD_VAR 0 4
1559: PPUSH
1560: CALL 44127 0 2
1564: PUSH
1565: EMPTY
1566: LIST
1567: LIST
1568: LIST
1569: LIST
1570: LIST
1571: LIST
1572: LIST
1573: LIST
1574: ST_TO_ADDR
// end ; if hasSib then
1575: LD_VAR 0 6
1579: IFFALSE 1718
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1581: LD_ADDR_VAR 0 4
1585: PUSH
1586: LD_EXP 4
1590: PUSH
1591: LD_INT 7
1593: ARRAY
1594: PUSH
1595: LD_INT 2
1597: EQUAL
1598: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) , GetSourcesFromArea ( sibArea7 , all ) , GetSourcesFromArea ( sibArea8 , all ) ] ;
1599: LD_ADDR_EXP 11
1603: PUSH
1604: LD_INT 32
1606: PPUSH
1607: LD_VAR 0 4
1611: PPUSH
1612: CALL 44127 0 2
1616: PUSH
1617: LD_INT 33
1619: PPUSH
1620: LD_VAR 0 4
1624: PPUSH
1625: CALL 44127 0 2
1629: PUSH
1630: LD_INT 34
1632: PPUSH
1633: LD_VAR 0 4
1637: PPUSH
1638: CALL 44127 0 2
1642: PUSH
1643: LD_INT 35
1645: PPUSH
1646: LD_VAR 0 4
1650: PPUSH
1651: CALL 44127 0 2
1655: PUSH
1656: LD_INT 36
1658: PPUSH
1659: LD_VAR 0 4
1663: PPUSH
1664: CALL 44127 0 2
1668: PUSH
1669: LD_INT 37
1671: PPUSH
1672: LD_VAR 0 4
1676: PPUSH
1677: CALL 44127 0 2
1681: PUSH
1682: LD_INT 38
1684: PPUSH
1685: LD_VAR 0 4
1689: PPUSH
1690: CALL 44127 0 2
1694: PUSH
1695: LD_INT 39
1697: PPUSH
1698: LD_VAR 0 4
1702: PPUSH
1703: CALL 44127 0 2
1707: PUSH
1708: EMPTY
1709: LIST
1710: LIST
1711: LIST
1712: LIST
1713: LIST
1714: LIST
1715: LIST
1716: LIST
1717: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1718: LD_VAR 0 7
1722: PUSH
1723: LD_INT 1
1725: GREATEREQUAL
1726: IFFALSE 1738
// mpDepots := startPos ;
1728: LD_ADDR_EXP 12
1732: PUSH
1733: LD_VAR 0 8
1737: ST_TO_ADDR
// if baseLevel >= 2 then
1738: LD_VAR 0 7
1742: PUSH
1743: LD_INT 2
1745: GREATEREQUAL
1746: IFFALSE 2035
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunArea1a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1b , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea2a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2b , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea3a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3b , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea4a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4b , 1 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea5a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5b , 2 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea6a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6b , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea7a , 3 ) , b_breastwork ^ GetBuildingFromArea ( bunArea7b , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea8a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea8b , 4 ) ] ] ;
1748: LD_ADDR_EXP 15
1752: PUSH
1753: LD_INT 31
1755: PUSH
1756: LD_INT 48
1758: PPUSH
1759: LD_INT 5
1761: PPUSH
1762: CALL 44294 0 2
1766: ADD
1767: PUSH
1768: LD_INT 31
1770: PUSH
1771: LD_INT 49
1773: PPUSH
1774: LD_INT 4
1776: PPUSH
1777: CALL 44294 0 2
1781: ADD
1782: PUSH
1783: EMPTY
1784: LIST
1785: LIST
1786: PUSH
1787: LD_INT 31
1789: PUSH
1790: LD_INT 50
1792: PPUSH
1793: LD_INT 1
1795: PPUSH
1796: CALL 44294 0 2
1800: ADD
1801: PUSH
1802: LD_INT 31
1804: PUSH
1805: LD_INT 51
1807: PPUSH
1808: LD_INT 4
1810: PPUSH
1811: CALL 44294 0 2
1815: ADD
1816: PUSH
1817: EMPTY
1818: LIST
1819: LIST
1820: PUSH
1821: LD_INT 31
1823: PUSH
1824: LD_INT 52
1826: PPUSH
1827: LD_INT 0
1829: PPUSH
1830: CALL 44294 0 2
1834: ADD
1835: PUSH
1836: LD_INT 31
1838: PUSH
1839: LD_INT 53
1841: PPUSH
1842: LD_INT 0
1844: PPUSH
1845: CALL 44294 0 2
1849: ADD
1850: PUSH
1851: EMPTY
1852: LIST
1853: LIST
1854: PUSH
1855: LD_INT 31
1857: PUSH
1858: LD_INT 54
1860: PPUSH
1861: LD_INT 1
1863: PPUSH
1864: CALL 44294 0 2
1868: ADD
1869: PUSH
1870: LD_INT 31
1872: PUSH
1873: LD_INT 55
1875: PPUSH
1876: LD_INT 1
1878: PPUSH
1879: CALL 44294 0 2
1883: ADD
1884: PUSH
1885: EMPTY
1886: LIST
1887: LIST
1888: PUSH
1889: LD_INT 31
1891: PUSH
1892: LD_INT 56
1894: PPUSH
1895: LD_INT 2
1897: PPUSH
1898: CALL 44294 0 2
1902: ADD
1903: PUSH
1904: LD_INT 31
1906: PUSH
1907: LD_INT 57
1909: PPUSH
1910: LD_INT 2
1912: PPUSH
1913: CALL 44294 0 2
1917: ADD
1918: PUSH
1919: EMPTY
1920: LIST
1921: LIST
1922: PUSH
1923: LD_INT 31
1925: PUSH
1926: LD_INT 58
1928: PPUSH
1929: LD_INT 1
1931: PPUSH
1932: CALL 44294 0 2
1936: ADD
1937: PUSH
1938: LD_INT 31
1940: PUSH
1941: LD_INT 59
1943: PPUSH
1944: LD_INT 4
1946: PPUSH
1947: CALL 44294 0 2
1951: ADD
1952: PUSH
1953: EMPTY
1954: LIST
1955: LIST
1956: PUSH
1957: LD_INT 31
1959: PUSH
1960: LD_INT 60
1962: PPUSH
1963: LD_INT 3
1965: PPUSH
1966: CALL 44294 0 2
1970: ADD
1971: PUSH
1972: LD_INT 31
1974: PUSH
1975: LD_INT 61
1977: PPUSH
1978: LD_INT 3
1980: PPUSH
1981: CALL 44294 0 2
1985: ADD
1986: PUSH
1987: EMPTY
1988: LIST
1989: LIST
1990: PUSH
1991: LD_INT 31
1993: PUSH
1994: LD_INT 62
1996: PPUSH
1997: LD_INT 4
1999: PPUSH
2000: CALL 44294 0 2
2004: ADD
2005: PUSH
2006: LD_INT 31
2008: PUSH
2009: LD_INT 63
2011: PPUSH
2012: LD_INT 4
2014: PPUSH
2015: CALL 44294 0 2
2019: ADD
2020: PUSH
2021: EMPTY
2022: LIST
2023: LIST
2024: PUSH
2025: EMPTY
2026: LIST
2027: LIST
2028: LIST
2029: LIST
2030: LIST
2031: LIST
2032: LIST
2033: LIST
2034: ST_TO_ADDR
// end ; end ;
2035: LD_VAR 0 2
2039: RET
// every 0 0$2 marked mpActive do var i , d , cratesTimeRate , cratesPerMinute ;
2040: GO 2042
2042: DISABLE
2043: LD_INT 0
2045: PPUSH
2046: PPUSH
2047: PPUSH
2048: PPUSH
// begin if not mpShipments then
2049: LD_EXP 25
2053: NOT
2054: IFFALSE 2058
// exit ;
2056: GO 2188
// case mpShipments of 1 :
2058: LD_EXP 25
2062: PUSH
2063: LD_INT 1
2065: DOUBLE
2066: EQUAL
2067: IFTRUE 2071
2069: GO 2082
2071: POP
// begin cratesPerMinute := 90 ;
2072: LD_ADDR_VAR 0 4
2076: PUSH
2077: LD_INT 90
2079: ST_TO_ADDR
// end ; 2 :
2080: GO 2140
2082: LD_INT 2
2084: DOUBLE
2085: EQUAL
2086: IFTRUE 2090
2088: GO 2101
2090: POP
// begin cratesPerMinute := 120 ;
2091: LD_ADDR_VAR 0 4
2095: PUSH
2096: LD_INT 120
2098: ST_TO_ADDR
// end ; 3 :
2099: GO 2140
2101: LD_INT 3
2103: DOUBLE
2104: EQUAL
2105: IFTRUE 2109
2107: GO 2120
2109: POP
// begin cratesPerMinute := 150 ;
2110: LD_ADDR_VAR 0 4
2114: PUSH
2115: LD_INT 150
2117: ST_TO_ADDR
// end ; 4 :
2118: GO 2140
2120: LD_INT 4
2122: DOUBLE
2123: EQUAL
2124: IFTRUE 2128
2126: GO 2139
2128: POP
// begin cratesPerMinute := 180 ;
2129: LD_ADDR_VAR 0 4
2133: PUSH
2134: LD_INT 180
2136: ST_TO_ADDR
// end ; end ;
2137: GO 2140
2139: POP
// if cratesPerMinute <= 50 then
2140: LD_VAR 0 4
2144: PUSH
2145: LD_INT 50
2147: LESSEQUAL
2148: IFFALSE 2160
// cratesTimeRate := 60 else
2150: LD_ADDR_VAR 0 3
2154: PUSH
2155: LD_INT 60
2157: ST_TO_ADDR
2158: GO 2188
// begin d := cratesPerMinute div 50 ;
2160: LD_ADDR_VAR 0 2
2164: PUSH
2165: LD_VAR 0 4
2169: PUSH
2170: LD_INT 50
2172: DIV
2173: ST_TO_ADDR
// cratesTimeRate := 60 div d ;
2174: LD_ADDR_VAR 0 3
2178: PUSH
2179: LD_INT 60
2181: PUSH
2182: LD_VAR 0 2
2186: DIV
2187: ST_TO_ADDR
// end ; end ; end_of_file
2188: PPOPN 4
2190: END
// on UnitDestroyed ( un ) do begin Multiplayer_UnitDestroyed ( un ) ;
2191: LD_VAR 0 1
2195: PPUSH
2196: CALL 47733 0 1
// end ; end_of_file
2200: PPOPN 1
2202: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
2203: LD_INT 0
2205: PPUSH
2206: PPUSH
// if exist_mode then
2207: LD_VAR 0 2
2211: IFFALSE 2236
// unit := CreateCharacter ( prefix & ident ) else
2213: LD_ADDR_VAR 0 5
2217: PUSH
2218: LD_VAR 0 3
2222: PUSH
2223: LD_VAR 0 1
2227: STR
2228: PPUSH
2229: CALL_OW 34
2233: ST_TO_ADDR
2234: GO 2251
// unit := NewCharacter ( ident ) ;
2236: LD_ADDR_VAR 0 5
2240: PUSH
2241: LD_VAR 0 1
2245: PPUSH
2246: CALL_OW 25
2250: ST_TO_ADDR
// result := unit ;
2251: LD_ADDR_VAR 0 4
2255: PUSH
2256: LD_VAR 0 5
2260: ST_TO_ADDR
// end ;
2261: LD_VAR 0 4
2265: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
2266: LD_INT 0
2268: PPUSH
2269: PPUSH
// if not side or not nation then
2270: LD_VAR 0 1
2274: NOT
2275: PUSH
2276: LD_VAR 0 2
2280: NOT
2281: OR
2282: IFFALSE 2286
// exit ;
2284: GO 3054
// case nation of nation_american :
2286: LD_VAR 0 2
2290: PUSH
2291: LD_INT 1
2293: DOUBLE
2294: EQUAL
2295: IFTRUE 2299
2297: GO 2513
2299: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
2300: LD_ADDR_VAR 0 4
2304: PUSH
2305: LD_INT 35
2307: PUSH
2308: LD_INT 45
2310: PUSH
2311: LD_INT 46
2313: PUSH
2314: LD_INT 47
2316: PUSH
2317: LD_INT 82
2319: PUSH
2320: LD_INT 83
2322: PUSH
2323: LD_INT 84
2325: PUSH
2326: LD_INT 85
2328: PUSH
2329: LD_INT 86
2331: PUSH
2332: LD_INT 1
2334: PUSH
2335: LD_INT 2
2337: PUSH
2338: LD_INT 6
2340: PUSH
2341: LD_INT 15
2343: PUSH
2344: LD_INT 16
2346: PUSH
2347: LD_INT 7
2349: PUSH
2350: LD_INT 12
2352: PUSH
2353: LD_INT 13
2355: PUSH
2356: LD_INT 10
2358: PUSH
2359: LD_INT 14
2361: PUSH
2362: LD_INT 20
2364: PUSH
2365: LD_INT 21
2367: PUSH
2368: LD_INT 22
2370: PUSH
2371: LD_INT 25
2373: PUSH
2374: LD_INT 32
2376: PUSH
2377: LD_INT 27
2379: PUSH
2380: LD_INT 36
2382: PUSH
2383: LD_INT 69
2385: PUSH
2386: LD_INT 39
2388: PUSH
2389: LD_INT 34
2391: PUSH
2392: LD_INT 40
2394: PUSH
2395: LD_INT 48
2397: PUSH
2398: LD_INT 49
2400: PUSH
2401: LD_INT 50
2403: PUSH
2404: LD_INT 51
2406: PUSH
2407: LD_INT 52
2409: PUSH
2410: LD_INT 53
2412: PUSH
2413: LD_INT 54
2415: PUSH
2416: LD_INT 55
2418: PUSH
2419: LD_INT 56
2421: PUSH
2422: LD_INT 57
2424: PUSH
2425: LD_INT 58
2427: PUSH
2428: LD_INT 59
2430: PUSH
2431: LD_INT 60
2433: PUSH
2434: LD_INT 61
2436: PUSH
2437: LD_INT 62
2439: PUSH
2440: LD_INT 80
2442: PUSH
2443: LD_INT 82
2445: PUSH
2446: LD_INT 83
2448: PUSH
2449: LD_INT 84
2451: PUSH
2452: LD_INT 85
2454: PUSH
2455: LD_INT 86
2457: PUSH
2458: EMPTY
2459: LIST
2460: LIST
2461: LIST
2462: LIST
2463: LIST
2464: LIST
2465: LIST
2466: LIST
2467: LIST
2468: LIST
2469: LIST
2470: LIST
2471: LIST
2472: LIST
2473: LIST
2474: LIST
2475: LIST
2476: LIST
2477: LIST
2478: LIST
2479: LIST
2480: LIST
2481: LIST
2482: LIST
2483: LIST
2484: LIST
2485: LIST
2486: LIST
2487: LIST
2488: LIST
2489: LIST
2490: LIST
2491: LIST
2492: LIST
2493: LIST
2494: LIST
2495: LIST
2496: LIST
2497: LIST
2498: LIST
2499: LIST
2500: LIST
2501: LIST
2502: LIST
2503: LIST
2504: LIST
2505: LIST
2506: LIST
2507: LIST
2508: LIST
2509: LIST
2510: ST_TO_ADDR
2511: GO 2978
2513: LD_INT 2
2515: DOUBLE
2516: EQUAL
2517: IFTRUE 2521
2519: GO 2747
2521: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
2522: LD_ADDR_VAR 0 4
2526: PUSH
2527: LD_INT 35
2529: PUSH
2530: LD_INT 45
2532: PUSH
2533: LD_INT 46
2535: PUSH
2536: LD_INT 47
2538: PUSH
2539: LD_INT 82
2541: PUSH
2542: LD_INT 83
2544: PUSH
2545: LD_INT 84
2547: PUSH
2548: LD_INT 85
2550: PUSH
2551: LD_INT 87
2553: PUSH
2554: LD_INT 70
2556: PUSH
2557: LD_INT 1
2559: PUSH
2560: LD_INT 11
2562: PUSH
2563: LD_INT 3
2565: PUSH
2566: LD_INT 4
2568: PUSH
2569: LD_INT 5
2571: PUSH
2572: LD_INT 6
2574: PUSH
2575: LD_INT 15
2577: PUSH
2578: LD_INT 18
2580: PUSH
2581: LD_INT 7
2583: PUSH
2584: LD_INT 17
2586: PUSH
2587: LD_INT 8
2589: PUSH
2590: LD_INT 20
2592: PUSH
2593: LD_INT 21
2595: PUSH
2596: LD_INT 22
2598: PUSH
2599: LD_INT 72
2601: PUSH
2602: LD_INT 26
2604: PUSH
2605: LD_INT 69
2607: PUSH
2608: LD_INT 39
2610: PUSH
2611: LD_INT 40
2613: PUSH
2614: LD_INT 41
2616: PUSH
2617: LD_INT 42
2619: PUSH
2620: LD_INT 43
2622: PUSH
2623: LD_INT 48
2625: PUSH
2626: LD_INT 49
2628: PUSH
2629: LD_INT 50
2631: PUSH
2632: LD_INT 51
2634: PUSH
2635: LD_INT 52
2637: PUSH
2638: LD_INT 53
2640: PUSH
2641: LD_INT 54
2643: PUSH
2644: LD_INT 55
2646: PUSH
2647: LD_INT 56
2649: PUSH
2650: LD_INT 60
2652: PUSH
2653: LD_INT 61
2655: PUSH
2656: LD_INT 62
2658: PUSH
2659: LD_INT 66
2661: PUSH
2662: LD_INT 67
2664: PUSH
2665: LD_INT 68
2667: PUSH
2668: LD_INT 81
2670: PUSH
2671: LD_INT 82
2673: PUSH
2674: LD_INT 83
2676: PUSH
2677: LD_INT 84
2679: PUSH
2680: LD_INT 85
2682: PUSH
2683: LD_INT 87
2685: PUSH
2686: LD_INT 88
2688: PUSH
2689: EMPTY
2690: LIST
2691: LIST
2692: LIST
2693: LIST
2694: LIST
2695: LIST
2696: LIST
2697: LIST
2698: LIST
2699: LIST
2700: LIST
2701: LIST
2702: LIST
2703: LIST
2704: LIST
2705: LIST
2706: LIST
2707: LIST
2708: LIST
2709: LIST
2710: LIST
2711: LIST
2712: LIST
2713: LIST
2714: LIST
2715: LIST
2716: LIST
2717: LIST
2718: LIST
2719: LIST
2720: LIST
2721: LIST
2722: LIST
2723: LIST
2724: LIST
2725: LIST
2726: LIST
2727: LIST
2728: LIST
2729: LIST
2730: LIST
2731: LIST
2732: LIST
2733: LIST
2734: LIST
2735: LIST
2736: LIST
2737: LIST
2738: LIST
2739: LIST
2740: LIST
2741: LIST
2742: LIST
2743: LIST
2744: ST_TO_ADDR
2745: GO 2978
2747: LD_INT 3
2749: DOUBLE
2750: EQUAL
2751: IFTRUE 2755
2753: GO 2977
2755: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
2756: LD_ADDR_VAR 0 4
2760: PUSH
2761: LD_INT 46
2763: PUSH
2764: LD_INT 47
2766: PUSH
2767: LD_INT 1
2769: PUSH
2770: LD_INT 2
2772: PUSH
2773: LD_INT 82
2775: PUSH
2776: LD_INT 83
2778: PUSH
2779: LD_INT 84
2781: PUSH
2782: LD_INT 85
2784: PUSH
2785: LD_INT 86
2787: PUSH
2788: LD_INT 11
2790: PUSH
2791: LD_INT 9
2793: PUSH
2794: LD_INT 20
2796: PUSH
2797: LD_INT 19
2799: PUSH
2800: LD_INT 21
2802: PUSH
2803: LD_INT 24
2805: PUSH
2806: LD_INT 22
2808: PUSH
2809: LD_INT 25
2811: PUSH
2812: LD_INT 28
2814: PUSH
2815: LD_INT 29
2817: PUSH
2818: LD_INT 30
2820: PUSH
2821: LD_INT 31
2823: PUSH
2824: LD_INT 37
2826: PUSH
2827: LD_INT 38
2829: PUSH
2830: LD_INT 32
2832: PUSH
2833: LD_INT 27
2835: PUSH
2836: LD_INT 33
2838: PUSH
2839: LD_INT 69
2841: PUSH
2842: LD_INT 39
2844: PUSH
2845: LD_INT 34
2847: PUSH
2848: LD_INT 40
2850: PUSH
2851: LD_INT 71
2853: PUSH
2854: LD_INT 23
2856: PUSH
2857: LD_INT 44
2859: PUSH
2860: LD_INT 48
2862: PUSH
2863: LD_INT 49
2865: PUSH
2866: LD_INT 50
2868: PUSH
2869: LD_INT 51
2871: PUSH
2872: LD_INT 52
2874: PUSH
2875: LD_INT 53
2877: PUSH
2878: LD_INT 54
2880: PUSH
2881: LD_INT 55
2883: PUSH
2884: LD_INT 56
2886: PUSH
2887: LD_INT 57
2889: PUSH
2890: LD_INT 58
2892: PUSH
2893: LD_INT 59
2895: PUSH
2896: LD_INT 63
2898: PUSH
2899: LD_INT 64
2901: PUSH
2902: LD_INT 65
2904: PUSH
2905: LD_INT 82
2907: PUSH
2908: LD_INT 83
2910: PUSH
2911: LD_INT 84
2913: PUSH
2914: LD_INT 85
2916: PUSH
2917: LD_INT 86
2919: PUSH
2920: EMPTY
2921: LIST
2922: LIST
2923: LIST
2924: LIST
2925: LIST
2926: LIST
2927: LIST
2928: LIST
2929: LIST
2930: LIST
2931: LIST
2932: LIST
2933: LIST
2934: LIST
2935: LIST
2936: LIST
2937: LIST
2938: LIST
2939: LIST
2940: LIST
2941: LIST
2942: LIST
2943: LIST
2944: LIST
2945: LIST
2946: LIST
2947: LIST
2948: LIST
2949: LIST
2950: LIST
2951: LIST
2952: LIST
2953: LIST
2954: LIST
2955: LIST
2956: LIST
2957: LIST
2958: LIST
2959: LIST
2960: LIST
2961: LIST
2962: LIST
2963: LIST
2964: LIST
2965: LIST
2966: LIST
2967: LIST
2968: LIST
2969: LIST
2970: LIST
2971: LIST
2972: LIST
2973: LIST
2974: ST_TO_ADDR
2975: GO 2978
2977: POP
// if state > - 1 and state < 3 then
2978: LD_VAR 0 3
2982: PUSH
2983: LD_INT 1
2985: NEG
2986: GREATER
2987: PUSH
2988: LD_VAR 0 3
2992: PUSH
2993: LD_INT 3
2995: LESS
2996: AND
2997: IFFALSE 3054
// for i in result do
2999: LD_ADDR_VAR 0 5
3003: PUSH
3004: LD_VAR 0 4
3008: PUSH
3009: FOR_IN
3010: IFFALSE 3052
// if GetTech ( i , side ) <> state then
3012: LD_VAR 0 5
3016: PPUSH
3017: LD_VAR 0 1
3021: PPUSH
3022: CALL_OW 321
3026: PUSH
3027: LD_VAR 0 3
3031: NONEQUAL
3032: IFFALSE 3050
// result := result diff i ;
3034: LD_ADDR_VAR 0 4
3038: PUSH
3039: LD_VAR 0 4
3043: PUSH
3044: LD_VAR 0 5
3048: DIFF
3049: ST_TO_ADDR
3050: GO 3009
3052: POP
3053: POP
// end ;
3054: LD_VAR 0 4
3058: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
3059: LD_INT 0
3061: PPUSH
3062: PPUSH
3063: PPUSH
// result := true ;
3064: LD_ADDR_VAR 0 3
3068: PUSH
3069: LD_INT 1
3071: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
3072: LD_ADDR_VAR 0 5
3076: PUSH
3077: LD_VAR 0 2
3081: PPUSH
3082: CALL_OW 480
3086: ST_TO_ADDR
// if not tmp then
3087: LD_VAR 0 5
3091: NOT
3092: IFFALSE 3096
// exit ;
3094: GO 3145
// for i in tmp do
3096: LD_ADDR_VAR 0 4
3100: PUSH
3101: LD_VAR 0 5
3105: PUSH
3106: FOR_IN
3107: IFFALSE 3143
// if GetTech ( i , side ) <> state_researched then
3109: LD_VAR 0 4
3113: PPUSH
3114: LD_VAR 0 1
3118: PPUSH
3119: CALL_OW 321
3123: PUSH
3124: LD_INT 2
3126: NONEQUAL
3127: IFFALSE 3141
// begin result := false ;
3129: LD_ADDR_VAR 0 3
3133: PUSH
3134: LD_INT 0
3136: ST_TO_ADDR
// exit ;
3137: POP
3138: POP
3139: GO 3145
// end ;
3141: GO 3106
3143: POP
3144: POP
// end ;
3145: LD_VAR 0 3
3149: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
3150: LD_INT 0
3152: PPUSH
3153: PPUSH
3154: PPUSH
3155: PPUSH
3156: PPUSH
3157: PPUSH
3158: PPUSH
3159: PPUSH
3160: PPUSH
3161: PPUSH
3162: PPUSH
3163: PPUSH
3164: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
3165: LD_VAR 0 1
3169: NOT
3170: PUSH
3171: LD_VAR 0 1
3175: PPUSH
3176: CALL_OW 257
3180: PUSH
3181: LD_INT 9
3183: NONEQUAL
3184: OR
3185: IFFALSE 3189
// exit ;
3187: GO 3762
// side := GetSide ( unit ) ;
3189: LD_ADDR_VAR 0 9
3193: PUSH
3194: LD_VAR 0 1
3198: PPUSH
3199: CALL_OW 255
3203: ST_TO_ADDR
// tech_space := tech_spacanom ;
3204: LD_ADDR_VAR 0 12
3208: PUSH
3209: LD_INT 29
3211: ST_TO_ADDR
// tech_time := tech_taurad ;
3212: LD_ADDR_VAR 0 13
3216: PUSH
3217: LD_INT 28
3219: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
3220: LD_ADDR_VAR 0 11
3224: PUSH
3225: LD_VAR 0 1
3229: PPUSH
3230: CALL_OW 310
3234: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
3235: LD_VAR 0 11
3239: PPUSH
3240: CALL_OW 247
3244: PUSH
3245: LD_INT 2
3247: EQUAL
3248: IFFALSE 3252
// exit ;
3250: GO 3762
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3252: LD_ADDR_VAR 0 8
3256: PUSH
3257: LD_INT 81
3259: PUSH
3260: LD_VAR 0 9
3264: PUSH
3265: EMPTY
3266: LIST
3267: LIST
3268: PUSH
3269: LD_INT 3
3271: PUSH
3272: LD_INT 21
3274: PUSH
3275: LD_INT 3
3277: PUSH
3278: EMPTY
3279: LIST
3280: LIST
3281: PUSH
3282: EMPTY
3283: LIST
3284: LIST
3285: PUSH
3286: EMPTY
3287: LIST
3288: LIST
3289: PPUSH
3290: CALL_OW 69
3294: ST_TO_ADDR
// if not tmp then
3295: LD_VAR 0 8
3299: NOT
3300: IFFALSE 3304
// exit ;
3302: GO 3762
// if in_unit then
3304: LD_VAR 0 11
3308: IFFALSE 3332
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
3310: LD_ADDR_VAR 0 10
3314: PUSH
3315: LD_VAR 0 8
3319: PPUSH
3320: LD_VAR 0 11
3324: PPUSH
3325: CALL_OW 74
3329: ST_TO_ADDR
3330: GO 3352
// enemy := NearestUnitToUnit ( tmp , unit ) ;
3332: LD_ADDR_VAR 0 10
3336: PUSH
3337: LD_VAR 0 8
3341: PPUSH
3342: LD_VAR 0 1
3346: PPUSH
3347: CALL_OW 74
3351: ST_TO_ADDR
// if not enemy then
3352: LD_VAR 0 10
3356: NOT
3357: IFFALSE 3361
// exit ;
3359: GO 3762
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
3361: LD_VAR 0 11
3365: PUSH
3366: LD_VAR 0 11
3370: PPUSH
3371: LD_VAR 0 10
3375: PPUSH
3376: CALL_OW 296
3380: PUSH
3381: LD_INT 13
3383: GREATER
3384: AND
3385: PUSH
3386: LD_VAR 0 1
3390: PPUSH
3391: LD_VAR 0 10
3395: PPUSH
3396: CALL_OW 296
3400: PUSH
3401: LD_INT 12
3403: GREATER
3404: OR
3405: IFFALSE 3409
// exit ;
3407: GO 3762
// missile := [ 1 ] ;
3409: LD_ADDR_VAR 0 14
3413: PUSH
3414: LD_INT 1
3416: PUSH
3417: EMPTY
3418: LIST
3419: ST_TO_ADDR
// if Researched ( side , tech_space ) then
3420: LD_VAR 0 9
3424: PPUSH
3425: LD_VAR 0 12
3429: PPUSH
3430: CALL_OW 325
3434: IFFALSE 3463
// missile := Replace ( missile , missile + 1 , 2 ) ;
3436: LD_ADDR_VAR 0 14
3440: PUSH
3441: LD_VAR 0 14
3445: PPUSH
3446: LD_VAR 0 14
3450: PUSH
3451: LD_INT 1
3453: PLUS
3454: PPUSH
3455: LD_INT 2
3457: PPUSH
3458: CALL_OW 1
3462: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
3463: LD_VAR 0 9
3467: PPUSH
3468: LD_VAR 0 13
3472: PPUSH
3473: CALL_OW 325
3477: PUSH
3478: LD_VAR 0 10
3482: PPUSH
3483: CALL_OW 255
3487: PPUSH
3488: LD_VAR 0 13
3492: PPUSH
3493: CALL_OW 325
3497: NOT
3498: AND
3499: IFFALSE 3528
// missile := Replace ( missile , missile + 1 , 3 ) ;
3501: LD_ADDR_VAR 0 14
3505: PUSH
3506: LD_VAR 0 14
3510: PPUSH
3511: LD_VAR 0 14
3515: PUSH
3516: LD_INT 1
3518: PLUS
3519: PPUSH
3520: LD_INT 3
3522: PPUSH
3523: CALL_OW 1
3527: ST_TO_ADDR
// if missile < 2 then
3528: LD_VAR 0 14
3532: PUSH
3533: LD_INT 2
3535: LESS
3536: IFFALSE 3540
// exit ;
3538: GO 3762
// x := GetX ( enemy ) ;
3540: LD_ADDR_VAR 0 4
3544: PUSH
3545: LD_VAR 0 10
3549: PPUSH
3550: CALL_OW 250
3554: ST_TO_ADDR
// y := GetY ( enemy ) ;
3555: LD_ADDR_VAR 0 5
3559: PUSH
3560: LD_VAR 0 10
3564: PPUSH
3565: CALL_OW 251
3569: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
3570: LD_ADDR_VAR 0 6
3574: PUSH
3575: LD_VAR 0 4
3579: PUSH
3580: LD_INT 1
3582: NEG
3583: PPUSH
3584: LD_INT 1
3586: PPUSH
3587: CALL_OW 12
3591: PLUS
3592: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
3593: LD_ADDR_VAR 0 7
3597: PUSH
3598: LD_VAR 0 5
3602: PUSH
3603: LD_INT 1
3605: NEG
3606: PPUSH
3607: LD_INT 1
3609: PPUSH
3610: CALL_OW 12
3614: PLUS
3615: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
3616: LD_VAR 0 6
3620: PPUSH
3621: LD_VAR 0 7
3625: PPUSH
3626: CALL_OW 488
3630: NOT
3631: IFFALSE 3653
// begin _x := x ;
3633: LD_ADDR_VAR 0 6
3637: PUSH
3638: LD_VAR 0 4
3642: ST_TO_ADDR
// _y := y ;
3643: LD_ADDR_VAR 0 7
3647: PUSH
3648: LD_VAR 0 5
3652: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
3653: LD_ADDR_VAR 0 3
3657: PUSH
3658: LD_INT 1
3660: PPUSH
3661: LD_VAR 0 14
3665: PPUSH
3666: CALL_OW 12
3670: ST_TO_ADDR
// case i of 1 :
3671: LD_VAR 0 3
3675: PUSH
3676: LD_INT 1
3678: DOUBLE
3679: EQUAL
3680: IFTRUE 3684
3682: GO 3701
3684: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
3685: LD_VAR 0 1
3689: PPUSH
3690: LD_VAR 0 10
3694: PPUSH
3695: CALL_OW 115
3699: GO 3762
3701: LD_INT 2
3703: DOUBLE
3704: EQUAL
3705: IFTRUE 3709
3707: GO 3731
3709: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
3710: LD_VAR 0 1
3714: PPUSH
3715: LD_VAR 0 6
3719: PPUSH
3720: LD_VAR 0 7
3724: PPUSH
3725: CALL_OW 153
3729: GO 3762
3731: LD_INT 3
3733: DOUBLE
3734: EQUAL
3735: IFTRUE 3739
3737: GO 3761
3739: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
3740: LD_VAR 0 1
3744: PPUSH
3745: LD_VAR 0 6
3749: PPUSH
3750: LD_VAR 0 7
3754: PPUSH
3755: CALL_OW 154
3759: GO 3762
3761: POP
// end ;
3762: LD_VAR 0 2
3766: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
3767: LD_INT 0
3769: PPUSH
3770: PPUSH
3771: PPUSH
3772: PPUSH
3773: PPUSH
3774: PPUSH
// if not unit or not building then
3775: LD_VAR 0 1
3779: NOT
3780: PUSH
3781: LD_VAR 0 2
3785: NOT
3786: OR
3787: IFFALSE 3791
// exit ;
3789: GO 3949
// x := GetX ( building ) ;
3791: LD_ADDR_VAR 0 5
3795: PUSH
3796: LD_VAR 0 2
3800: PPUSH
3801: CALL_OW 250
3805: ST_TO_ADDR
// y := GetY ( building ) ;
3806: LD_ADDR_VAR 0 6
3810: PUSH
3811: LD_VAR 0 2
3815: PPUSH
3816: CALL_OW 251
3820: ST_TO_ADDR
// for i = 0 to 5 do
3821: LD_ADDR_VAR 0 4
3825: PUSH
3826: DOUBLE
3827: LD_INT 0
3829: DEC
3830: ST_TO_ADDR
3831: LD_INT 5
3833: PUSH
3834: FOR_TO
3835: IFFALSE 3947
// begin _x := ShiftX ( x , i , 3 ) ;
3837: LD_ADDR_VAR 0 7
3841: PUSH
3842: LD_VAR 0 5
3846: PPUSH
3847: LD_VAR 0 4
3851: PPUSH
3852: LD_INT 3
3854: PPUSH
3855: CALL_OW 272
3859: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
3860: LD_ADDR_VAR 0 8
3864: PUSH
3865: LD_VAR 0 6
3869: PPUSH
3870: LD_VAR 0 4
3874: PPUSH
3875: LD_INT 3
3877: PPUSH
3878: CALL_OW 273
3882: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
3883: LD_VAR 0 7
3887: PPUSH
3888: LD_VAR 0 8
3892: PPUSH
3893: CALL_OW 488
3897: NOT
3898: IFFALSE 3902
// continue ;
3900: GO 3834
// if HexInfo ( _x , _y ) = 0 then
3902: LD_VAR 0 7
3906: PPUSH
3907: LD_VAR 0 8
3911: PPUSH
3912: CALL_OW 428
3916: PUSH
3917: LD_INT 0
3919: EQUAL
3920: IFFALSE 3945
// begin ComMoveXY ( unit , _x , _y ) ;
3922: LD_VAR 0 1
3926: PPUSH
3927: LD_VAR 0 7
3931: PPUSH
3932: LD_VAR 0 8
3936: PPUSH
3937: CALL_OW 111
// exit ;
3941: POP
3942: POP
3943: GO 3949
// end ; end ;
3945: GO 3834
3947: POP
3948: POP
// end ;
3949: LD_VAR 0 3
3953: RET
// export function ScanBase ( side , base_area ) ; begin
3954: LD_INT 0
3956: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
3957: LD_ADDR_VAR 0 3
3961: PUSH
3962: LD_VAR 0 2
3966: PPUSH
3967: LD_INT 81
3969: PUSH
3970: LD_VAR 0 1
3974: PUSH
3975: EMPTY
3976: LIST
3977: LIST
3978: PPUSH
3979: CALL_OW 70
3983: ST_TO_ADDR
// end ;
3984: LD_VAR 0 3
3988: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
3989: LD_INT 0
3991: PPUSH
3992: PPUSH
3993: PPUSH
3994: PPUSH
// result := false ;
3995: LD_ADDR_VAR 0 2
3999: PUSH
4000: LD_INT 0
4002: ST_TO_ADDR
// side := GetSide ( unit ) ;
4003: LD_ADDR_VAR 0 3
4007: PUSH
4008: LD_VAR 0 1
4012: PPUSH
4013: CALL_OW 255
4017: ST_TO_ADDR
// nat := GetNation ( unit ) ;
4018: LD_ADDR_VAR 0 4
4022: PUSH
4023: LD_VAR 0 1
4027: PPUSH
4028: CALL_OW 248
4032: ST_TO_ADDR
// case nat of 1 :
4033: LD_VAR 0 4
4037: PUSH
4038: LD_INT 1
4040: DOUBLE
4041: EQUAL
4042: IFTRUE 4046
4044: GO 4057
4046: POP
// tech := tech_lassight ; 2 :
4047: LD_ADDR_VAR 0 5
4051: PUSH
4052: LD_INT 12
4054: ST_TO_ADDR
4055: GO 4096
4057: LD_INT 2
4059: DOUBLE
4060: EQUAL
4061: IFTRUE 4065
4063: GO 4076
4065: POP
// tech := tech_mortar ; 3 :
4066: LD_ADDR_VAR 0 5
4070: PUSH
4071: LD_INT 41
4073: ST_TO_ADDR
4074: GO 4096
4076: LD_INT 3
4078: DOUBLE
4079: EQUAL
4080: IFTRUE 4084
4082: GO 4095
4084: POP
// tech := tech_bazooka ; end ;
4085: LD_ADDR_VAR 0 5
4089: PUSH
4090: LD_INT 44
4092: ST_TO_ADDR
4093: GO 4096
4095: POP
// if Researched ( side , tech ) then
4096: LD_VAR 0 3
4100: PPUSH
4101: LD_VAR 0 5
4105: PPUSH
4106: CALL_OW 325
4110: IFFALSE 4137
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
4112: LD_ADDR_VAR 0 2
4116: PUSH
4117: LD_INT 5
4119: PUSH
4120: LD_INT 8
4122: PUSH
4123: LD_INT 9
4125: PUSH
4126: EMPTY
4127: LIST
4128: LIST
4129: LIST
4130: PUSH
4131: LD_VAR 0 4
4135: ARRAY
4136: ST_TO_ADDR
// end ;
4137: LD_VAR 0 2
4141: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
4142: LD_INT 0
4144: PPUSH
4145: PPUSH
4146: PPUSH
// if not mines then
4147: LD_VAR 0 2
4151: NOT
4152: IFFALSE 4156
// exit ;
4154: GO 4300
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4156: LD_ADDR_VAR 0 5
4160: PUSH
4161: LD_INT 81
4163: PUSH
4164: LD_VAR 0 1
4168: PUSH
4169: EMPTY
4170: LIST
4171: LIST
4172: PUSH
4173: LD_INT 3
4175: PUSH
4176: LD_INT 21
4178: PUSH
4179: LD_INT 3
4181: PUSH
4182: EMPTY
4183: LIST
4184: LIST
4185: PUSH
4186: EMPTY
4187: LIST
4188: LIST
4189: PUSH
4190: EMPTY
4191: LIST
4192: LIST
4193: PPUSH
4194: CALL_OW 69
4198: ST_TO_ADDR
// for i in mines do
4199: LD_ADDR_VAR 0 4
4203: PUSH
4204: LD_VAR 0 2
4208: PUSH
4209: FOR_IN
4210: IFFALSE 4298
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
4212: LD_VAR 0 4
4216: PUSH
4217: LD_INT 1
4219: ARRAY
4220: PPUSH
4221: LD_VAR 0 4
4225: PUSH
4226: LD_INT 2
4228: ARRAY
4229: PPUSH
4230: CALL_OW 458
4234: NOT
4235: IFFALSE 4239
// continue ;
4237: GO 4209
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
4239: LD_VAR 0 4
4243: PUSH
4244: LD_INT 1
4246: ARRAY
4247: PPUSH
4248: LD_VAR 0 4
4252: PUSH
4253: LD_INT 2
4255: ARRAY
4256: PPUSH
4257: CALL_OW 428
4261: PUSH
4262: LD_VAR 0 5
4266: IN
4267: IFFALSE 4296
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
4269: LD_VAR 0 4
4273: PUSH
4274: LD_INT 1
4276: ARRAY
4277: PPUSH
4278: LD_VAR 0 4
4282: PUSH
4283: LD_INT 2
4285: ARRAY
4286: PPUSH
4287: LD_VAR 0 1
4291: PPUSH
4292: CALL_OW 456
// end ;
4296: GO 4209
4298: POP
4299: POP
// end ;
4300: LD_VAR 0 3
4304: RET
// export function Count ( array ) ; begin
4305: LD_INT 0
4307: PPUSH
// result := array + 0 ;
4308: LD_ADDR_VAR 0 2
4312: PUSH
4313: LD_VAR 0 1
4317: PUSH
4318: LD_INT 0
4320: PLUS
4321: ST_TO_ADDR
// end ;
4322: LD_VAR 0 2
4326: RET
// export function IsEmpty ( building ) ; begin
4327: LD_INT 0
4329: PPUSH
// if not building then
4330: LD_VAR 0 1
4334: NOT
4335: IFFALSE 4339
// exit ;
4337: GO 4382
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
4339: LD_ADDR_VAR 0 2
4343: PUSH
4344: LD_VAR 0 1
4348: PUSH
4349: LD_INT 22
4351: PUSH
4352: LD_VAR 0 1
4356: PPUSH
4357: CALL_OW 255
4361: PUSH
4362: EMPTY
4363: LIST
4364: LIST
4365: PUSH
4366: LD_INT 58
4368: PUSH
4369: EMPTY
4370: LIST
4371: PUSH
4372: EMPTY
4373: LIST
4374: LIST
4375: PPUSH
4376: CALL_OW 69
4380: IN
4381: ST_TO_ADDR
// end ;
4382: LD_VAR 0 2
4386: RET
// export function IsNotFull ( building ) ; var places ; begin
4387: LD_INT 0
4389: PPUSH
4390: PPUSH
// if not building then
4391: LD_VAR 0 1
4395: NOT
4396: IFFALSE 4400
// exit ;
4398: GO 4428
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
4400: LD_ADDR_VAR 0 2
4404: PUSH
4405: LD_VAR 0 1
4409: PPUSH
4410: LD_INT 3
4412: PUSH
4413: LD_INT 62
4415: PUSH
4416: EMPTY
4417: LIST
4418: PUSH
4419: EMPTY
4420: LIST
4421: LIST
4422: PPUSH
4423: CALL_OW 72
4427: ST_TO_ADDR
// end ;
4428: LD_VAR 0 2
4432: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
4433: LD_INT 0
4435: PPUSH
4436: PPUSH
4437: PPUSH
4438: PPUSH
// tmp := [ ] ;
4439: LD_ADDR_VAR 0 3
4443: PUSH
4444: EMPTY
4445: ST_TO_ADDR
// list := [ ] ;
4446: LD_ADDR_VAR 0 5
4450: PUSH
4451: EMPTY
4452: ST_TO_ADDR
// for i = 16 to 25 do
4453: LD_ADDR_VAR 0 4
4457: PUSH
4458: DOUBLE
4459: LD_INT 16
4461: DEC
4462: ST_TO_ADDR
4463: LD_INT 25
4465: PUSH
4466: FOR_TO
4467: IFFALSE 4540
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
4469: LD_ADDR_VAR 0 3
4473: PUSH
4474: LD_VAR 0 3
4478: PUSH
4479: LD_INT 22
4481: PUSH
4482: LD_VAR 0 1
4486: PPUSH
4487: CALL_OW 255
4491: PUSH
4492: EMPTY
4493: LIST
4494: LIST
4495: PUSH
4496: LD_INT 91
4498: PUSH
4499: LD_VAR 0 1
4503: PUSH
4504: LD_INT 6
4506: PUSH
4507: EMPTY
4508: LIST
4509: LIST
4510: LIST
4511: PUSH
4512: LD_INT 30
4514: PUSH
4515: LD_VAR 0 4
4519: PUSH
4520: EMPTY
4521: LIST
4522: LIST
4523: PUSH
4524: EMPTY
4525: LIST
4526: LIST
4527: LIST
4528: PUSH
4529: EMPTY
4530: LIST
4531: PPUSH
4532: CALL_OW 69
4536: ADD
4537: ST_TO_ADDR
4538: GO 4466
4540: POP
4541: POP
// for i = 1 to tmp do
4542: LD_ADDR_VAR 0 4
4546: PUSH
4547: DOUBLE
4548: LD_INT 1
4550: DEC
4551: ST_TO_ADDR
4552: LD_VAR 0 3
4556: PUSH
4557: FOR_TO
4558: IFFALSE 4646
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
4560: LD_ADDR_VAR 0 5
4564: PUSH
4565: LD_VAR 0 5
4569: PUSH
4570: LD_VAR 0 3
4574: PUSH
4575: LD_VAR 0 4
4579: ARRAY
4580: PPUSH
4581: CALL_OW 266
4585: PUSH
4586: LD_VAR 0 3
4590: PUSH
4591: LD_VAR 0 4
4595: ARRAY
4596: PPUSH
4597: CALL_OW 250
4601: PUSH
4602: LD_VAR 0 3
4606: PUSH
4607: LD_VAR 0 4
4611: ARRAY
4612: PPUSH
4613: CALL_OW 251
4617: PUSH
4618: LD_VAR 0 3
4622: PUSH
4623: LD_VAR 0 4
4627: ARRAY
4628: PPUSH
4629: CALL_OW 254
4633: PUSH
4634: EMPTY
4635: LIST
4636: LIST
4637: LIST
4638: LIST
4639: PUSH
4640: EMPTY
4641: LIST
4642: ADD
4643: ST_TO_ADDR
4644: GO 4557
4646: POP
4647: POP
// result := list ;
4648: LD_ADDR_VAR 0 2
4652: PUSH
4653: LD_VAR 0 5
4657: ST_TO_ADDR
// end ;
4658: LD_VAR 0 2
4662: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
4663: LD_INT 0
4665: PPUSH
4666: PPUSH
4667: PPUSH
4668: PPUSH
4669: PPUSH
4670: PPUSH
4671: PPUSH
// if not factory then
4672: LD_VAR 0 1
4676: NOT
4677: IFFALSE 4681
// exit ;
4679: GO 5274
// if control = control_apeman then
4681: LD_VAR 0 4
4685: PUSH
4686: LD_INT 5
4688: EQUAL
4689: IFFALSE 4798
// begin tmp := UnitsInside ( factory ) ;
4691: LD_ADDR_VAR 0 8
4695: PUSH
4696: LD_VAR 0 1
4700: PPUSH
4701: CALL_OW 313
4705: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
4706: LD_VAR 0 8
4710: PPUSH
4711: LD_INT 25
4713: PUSH
4714: LD_INT 12
4716: PUSH
4717: EMPTY
4718: LIST
4719: LIST
4720: PPUSH
4721: CALL_OW 72
4725: NOT
4726: IFFALSE 4736
// control := control_manual ;
4728: LD_ADDR_VAR 0 4
4732: PUSH
4733: LD_INT 1
4735: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
4736: LD_ADDR_VAR 0 8
4740: PUSH
4741: LD_VAR 0 1
4745: PPUSH
4746: CALL 4433 0 1
4750: ST_TO_ADDR
// if tmp then
4751: LD_VAR 0 8
4755: IFFALSE 4798
// begin for i in tmp do
4757: LD_ADDR_VAR 0 7
4761: PUSH
4762: LD_VAR 0 8
4766: PUSH
4767: FOR_IN
4768: IFFALSE 4796
// if i [ 1 ] = b_ext_radio then
4770: LD_VAR 0 7
4774: PUSH
4775: LD_INT 1
4777: ARRAY
4778: PUSH
4779: LD_INT 22
4781: EQUAL
4782: IFFALSE 4794
// begin control := control_remote ;
4784: LD_ADDR_VAR 0 4
4788: PUSH
4789: LD_INT 2
4791: ST_TO_ADDR
// break ;
4792: GO 4796
// end ;
4794: GO 4767
4796: POP
4797: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
4798: LD_VAR 0 1
4802: PPUSH
4803: LD_VAR 0 2
4807: PPUSH
4808: LD_VAR 0 3
4812: PPUSH
4813: LD_VAR 0 4
4817: PPUSH
4818: LD_VAR 0 5
4822: PPUSH
4823: CALL_OW 448
4827: IFFALSE 4862
// begin result := [ chassis , engine , control , weapon ] ;
4829: LD_ADDR_VAR 0 6
4833: PUSH
4834: LD_VAR 0 2
4838: PUSH
4839: LD_VAR 0 3
4843: PUSH
4844: LD_VAR 0 4
4848: PUSH
4849: LD_VAR 0 5
4853: PUSH
4854: EMPTY
4855: LIST
4856: LIST
4857: LIST
4858: LIST
4859: ST_TO_ADDR
// exit ;
4860: GO 5274
// end ; _chassis := AvailableChassisList ( factory ) ;
4862: LD_ADDR_VAR 0 9
4866: PUSH
4867: LD_VAR 0 1
4871: PPUSH
4872: CALL_OW 475
4876: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
4877: LD_ADDR_VAR 0 11
4881: PUSH
4882: LD_VAR 0 1
4886: PPUSH
4887: CALL_OW 476
4891: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
4892: LD_ADDR_VAR 0 12
4896: PUSH
4897: LD_VAR 0 1
4901: PPUSH
4902: CALL_OW 477
4906: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
4907: LD_ADDR_VAR 0 10
4911: PUSH
4912: LD_VAR 0 1
4916: PPUSH
4917: CALL_OW 478
4921: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
4922: LD_VAR 0 9
4926: NOT
4927: PUSH
4928: LD_VAR 0 11
4932: NOT
4933: OR
4934: PUSH
4935: LD_VAR 0 12
4939: NOT
4940: OR
4941: PUSH
4942: LD_VAR 0 10
4946: NOT
4947: OR
4948: IFFALSE 4983
// begin result := [ chassis , engine , control , weapon ] ;
4950: LD_ADDR_VAR 0 6
4954: PUSH
4955: LD_VAR 0 2
4959: PUSH
4960: LD_VAR 0 3
4964: PUSH
4965: LD_VAR 0 4
4969: PUSH
4970: LD_VAR 0 5
4974: PUSH
4975: EMPTY
4976: LIST
4977: LIST
4978: LIST
4979: LIST
4980: ST_TO_ADDR
// exit ;
4981: GO 5274
// end ; if not chassis in _chassis then
4983: LD_VAR 0 2
4987: PUSH
4988: LD_VAR 0 9
4992: IN
4993: NOT
4994: IFFALSE 5020
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
4996: LD_ADDR_VAR 0 2
5000: PUSH
5001: LD_VAR 0 9
5005: PUSH
5006: LD_INT 1
5008: PPUSH
5009: LD_VAR 0 9
5013: PPUSH
5014: CALL_OW 12
5018: ARRAY
5019: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
5020: LD_VAR 0 2
5024: PPUSH
5025: LD_VAR 0 3
5029: PPUSH
5030: CALL 5279 0 2
5034: NOT
5035: IFFALSE 5094
// repeat engine := _engine [ 1 ] ;
5037: LD_ADDR_VAR 0 3
5041: PUSH
5042: LD_VAR 0 11
5046: PUSH
5047: LD_INT 1
5049: ARRAY
5050: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
5051: LD_ADDR_VAR 0 11
5055: PUSH
5056: LD_VAR 0 11
5060: PPUSH
5061: LD_INT 1
5063: PPUSH
5064: CALL_OW 3
5068: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
5069: LD_VAR 0 2
5073: PPUSH
5074: LD_VAR 0 3
5078: PPUSH
5079: CALL 5279 0 2
5083: PUSH
5084: LD_VAR 0 11
5088: PUSH
5089: EMPTY
5090: EQUAL
5091: OR
5092: IFFALSE 5037
// if not control in _control then
5094: LD_VAR 0 4
5098: PUSH
5099: LD_VAR 0 12
5103: IN
5104: NOT
5105: IFFALSE 5131
// control := _control [ rand ( 1 , _control ) ] ;
5107: LD_ADDR_VAR 0 4
5111: PUSH
5112: LD_VAR 0 12
5116: PUSH
5117: LD_INT 1
5119: PPUSH
5120: LD_VAR 0 12
5124: PPUSH
5125: CALL_OW 12
5129: ARRAY
5130: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
5131: LD_VAR 0 2
5135: PPUSH
5136: LD_VAR 0 5
5140: PPUSH
5141: CALL 5499 0 2
5145: NOT
5146: IFFALSE 5205
// repeat weapon := _weapon [ 1 ] ;
5148: LD_ADDR_VAR 0 5
5152: PUSH
5153: LD_VAR 0 10
5157: PUSH
5158: LD_INT 1
5160: ARRAY
5161: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
5162: LD_ADDR_VAR 0 10
5166: PUSH
5167: LD_VAR 0 10
5171: PPUSH
5172: LD_INT 1
5174: PPUSH
5175: CALL_OW 3
5179: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
5180: LD_VAR 0 2
5184: PPUSH
5185: LD_VAR 0 5
5189: PPUSH
5190: CALL 5499 0 2
5194: PUSH
5195: LD_VAR 0 10
5199: PUSH
5200: EMPTY
5201: EQUAL
5202: OR
5203: IFFALSE 5148
// result := [ ] ;
5205: LD_ADDR_VAR 0 6
5209: PUSH
5210: EMPTY
5211: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5212: LD_VAR 0 1
5216: PPUSH
5217: LD_VAR 0 2
5221: PPUSH
5222: LD_VAR 0 3
5226: PPUSH
5227: LD_VAR 0 4
5231: PPUSH
5232: LD_VAR 0 5
5236: PPUSH
5237: CALL_OW 448
5241: IFFALSE 5274
// result := [ chassis , engine , control , weapon ] ;
5243: LD_ADDR_VAR 0 6
5247: PUSH
5248: LD_VAR 0 2
5252: PUSH
5253: LD_VAR 0 3
5257: PUSH
5258: LD_VAR 0 4
5262: PUSH
5263: LD_VAR 0 5
5267: PUSH
5268: EMPTY
5269: LIST
5270: LIST
5271: LIST
5272: LIST
5273: ST_TO_ADDR
// end ;
5274: LD_VAR 0 6
5278: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
5279: LD_INT 0
5281: PPUSH
// if not chassis or not engine then
5282: LD_VAR 0 1
5286: NOT
5287: PUSH
5288: LD_VAR 0 2
5292: NOT
5293: OR
5294: IFFALSE 5298
// exit ;
5296: GO 5494
// case engine of engine_solar :
5298: LD_VAR 0 2
5302: PUSH
5303: LD_INT 2
5305: DOUBLE
5306: EQUAL
5307: IFTRUE 5311
5309: GO 5349
5311: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
5312: LD_ADDR_VAR 0 3
5316: PUSH
5317: LD_INT 11
5319: PUSH
5320: LD_INT 12
5322: PUSH
5323: LD_INT 13
5325: PUSH
5326: LD_INT 14
5328: PUSH
5329: LD_INT 1
5331: PUSH
5332: LD_INT 2
5334: PUSH
5335: LD_INT 3
5337: PUSH
5338: EMPTY
5339: LIST
5340: LIST
5341: LIST
5342: LIST
5343: LIST
5344: LIST
5345: LIST
5346: ST_TO_ADDR
5347: GO 5478
5349: LD_INT 1
5351: DOUBLE
5352: EQUAL
5353: IFTRUE 5357
5355: GO 5419
5357: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
5358: LD_ADDR_VAR 0 3
5362: PUSH
5363: LD_INT 11
5365: PUSH
5366: LD_INT 12
5368: PUSH
5369: LD_INT 13
5371: PUSH
5372: LD_INT 14
5374: PUSH
5375: LD_INT 1
5377: PUSH
5378: LD_INT 2
5380: PUSH
5381: LD_INT 3
5383: PUSH
5384: LD_INT 4
5386: PUSH
5387: LD_INT 5
5389: PUSH
5390: LD_INT 21
5392: PUSH
5393: LD_INT 23
5395: PUSH
5396: LD_INT 22
5398: PUSH
5399: LD_INT 24
5401: PUSH
5402: EMPTY
5403: LIST
5404: LIST
5405: LIST
5406: LIST
5407: LIST
5408: LIST
5409: LIST
5410: LIST
5411: LIST
5412: LIST
5413: LIST
5414: LIST
5415: LIST
5416: ST_TO_ADDR
5417: GO 5478
5419: LD_INT 3
5421: DOUBLE
5422: EQUAL
5423: IFTRUE 5427
5425: GO 5477
5427: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
5428: LD_ADDR_VAR 0 3
5432: PUSH
5433: LD_INT 13
5435: PUSH
5436: LD_INT 14
5438: PUSH
5439: LD_INT 2
5441: PUSH
5442: LD_INT 3
5444: PUSH
5445: LD_INT 4
5447: PUSH
5448: LD_INT 5
5450: PUSH
5451: LD_INT 21
5453: PUSH
5454: LD_INT 22
5456: PUSH
5457: LD_INT 23
5459: PUSH
5460: LD_INT 24
5462: PUSH
5463: EMPTY
5464: LIST
5465: LIST
5466: LIST
5467: LIST
5468: LIST
5469: LIST
5470: LIST
5471: LIST
5472: LIST
5473: LIST
5474: ST_TO_ADDR
5475: GO 5478
5477: POP
// result := ( chassis in result ) ;
5478: LD_ADDR_VAR 0 3
5482: PUSH
5483: LD_VAR 0 1
5487: PUSH
5488: LD_VAR 0 3
5492: IN
5493: ST_TO_ADDR
// end ;
5494: LD_VAR 0 3
5498: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
5499: LD_INT 0
5501: PPUSH
// if not chassis or not weapon then
5502: LD_VAR 0 1
5506: NOT
5507: PUSH
5508: LD_VAR 0 2
5512: NOT
5513: OR
5514: IFFALSE 5518
// exit ;
5516: GO 6578
// case weapon of us_machine_gun :
5518: LD_VAR 0 2
5522: PUSH
5523: LD_INT 2
5525: DOUBLE
5526: EQUAL
5527: IFTRUE 5531
5529: GO 5561
5531: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
5532: LD_ADDR_VAR 0 3
5536: PUSH
5537: LD_INT 1
5539: PUSH
5540: LD_INT 2
5542: PUSH
5543: LD_INT 3
5545: PUSH
5546: LD_INT 4
5548: PUSH
5549: LD_INT 5
5551: PUSH
5552: EMPTY
5553: LIST
5554: LIST
5555: LIST
5556: LIST
5557: LIST
5558: ST_TO_ADDR
5559: GO 6562
5561: LD_INT 3
5563: DOUBLE
5564: EQUAL
5565: IFTRUE 5569
5567: GO 5599
5569: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
5570: LD_ADDR_VAR 0 3
5574: PUSH
5575: LD_INT 1
5577: PUSH
5578: LD_INT 2
5580: PUSH
5581: LD_INT 3
5583: PUSH
5584: LD_INT 4
5586: PUSH
5587: LD_INT 5
5589: PUSH
5590: EMPTY
5591: LIST
5592: LIST
5593: LIST
5594: LIST
5595: LIST
5596: ST_TO_ADDR
5597: GO 6562
5599: LD_INT 11
5601: DOUBLE
5602: EQUAL
5603: IFTRUE 5607
5605: GO 5637
5607: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
5608: LD_ADDR_VAR 0 3
5612: PUSH
5613: LD_INT 1
5615: PUSH
5616: LD_INT 2
5618: PUSH
5619: LD_INT 3
5621: PUSH
5622: LD_INT 4
5624: PUSH
5625: LD_INT 5
5627: PUSH
5628: EMPTY
5629: LIST
5630: LIST
5631: LIST
5632: LIST
5633: LIST
5634: ST_TO_ADDR
5635: GO 6562
5637: LD_INT 4
5639: DOUBLE
5640: EQUAL
5641: IFTRUE 5645
5643: GO 5671
5645: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
5646: LD_ADDR_VAR 0 3
5650: PUSH
5651: LD_INT 2
5653: PUSH
5654: LD_INT 3
5656: PUSH
5657: LD_INT 4
5659: PUSH
5660: LD_INT 5
5662: PUSH
5663: EMPTY
5664: LIST
5665: LIST
5666: LIST
5667: LIST
5668: ST_TO_ADDR
5669: GO 6562
5671: LD_INT 5
5673: DOUBLE
5674: EQUAL
5675: IFTRUE 5679
5677: GO 5705
5679: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
5680: LD_ADDR_VAR 0 3
5684: PUSH
5685: LD_INT 2
5687: PUSH
5688: LD_INT 3
5690: PUSH
5691: LD_INT 4
5693: PUSH
5694: LD_INT 5
5696: PUSH
5697: EMPTY
5698: LIST
5699: LIST
5700: LIST
5701: LIST
5702: ST_TO_ADDR
5703: GO 6562
5705: LD_INT 9
5707: DOUBLE
5708: EQUAL
5709: IFTRUE 5713
5711: GO 5739
5713: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
5714: LD_ADDR_VAR 0 3
5718: PUSH
5719: LD_INT 2
5721: PUSH
5722: LD_INT 3
5724: PUSH
5725: LD_INT 4
5727: PUSH
5728: LD_INT 5
5730: PUSH
5731: EMPTY
5732: LIST
5733: LIST
5734: LIST
5735: LIST
5736: ST_TO_ADDR
5737: GO 6562
5739: LD_INT 7
5741: DOUBLE
5742: EQUAL
5743: IFTRUE 5747
5745: GO 5773
5747: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
5748: LD_ADDR_VAR 0 3
5752: PUSH
5753: LD_INT 2
5755: PUSH
5756: LD_INT 3
5758: PUSH
5759: LD_INT 4
5761: PUSH
5762: LD_INT 5
5764: PUSH
5765: EMPTY
5766: LIST
5767: LIST
5768: LIST
5769: LIST
5770: ST_TO_ADDR
5771: GO 6562
5773: LD_INT 12
5775: DOUBLE
5776: EQUAL
5777: IFTRUE 5781
5779: GO 5807
5781: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
5782: LD_ADDR_VAR 0 3
5786: PUSH
5787: LD_INT 2
5789: PUSH
5790: LD_INT 3
5792: PUSH
5793: LD_INT 4
5795: PUSH
5796: LD_INT 5
5798: PUSH
5799: EMPTY
5800: LIST
5801: LIST
5802: LIST
5803: LIST
5804: ST_TO_ADDR
5805: GO 6562
5807: LD_INT 13
5809: DOUBLE
5810: EQUAL
5811: IFTRUE 5815
5813: GO 5841
5815: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
5816: LD_ADDR_VAR 0 3
5820: PUSH
5821: LD_INT 2
5823: PUSH
5824: LD_INT 3
5826: PUSH
5827: LD_INT 4
5829: PUSH
5830: LD_INT 5
5832: PUSH
5833: EMPTY
5834: LIST
5835: LIST
5836: LIST
5837: LIST
5838: ST_TO_ADDR
5839: GO 6562
5841: LD_INT 14
5843: DOUBLE
5844: EQUAL
5845: IFTRUE 5849
5847: GO 5867
5849: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
5850: LD_ADDR_VAR 0 3
5854: PUSH
5855: LD_INT 4
5857: PUSH
5858: LD_INT 5
5860: PUSH
5861: EMPTY
5862: LIST
5863: LIST
5864: ST_TO_ADDR
5865: GO 6562
5867: LD_INT 6
5869: DOUBLE
5870: EQUAL
5871: IFTRUE 5875
5873: GO 5893
5875: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
5876: LD_ADDR_VAR 0 3
5880: PUSH
5881: LD_INT 4
5883: PUSH
5884: LD_INT 5
5886: PUSH
5887: EMPTY
5888: LIST
5889: LIST
5890: ST_TO_ADDR
5891: GO 6562
5893: LD_INT 10
5895: DOUBLE
5896: EQUAL
5897: IFTRUE 5901
5899: GO 5919
5901: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
5902: LD_ADDR_VAR 0 3
5906: PUSH
5907: LD_INT 4
5909: PUSH
5910: LD_INT 5
5912: PUSH
5913: EMPTY
5914: LIST
5915: LIST
5916: ST_TO_ADDR
5917: GO 6562
5919: LD_INT 22
5921: DOUBLE
5922: EQUAL
5923: IFTRUE 5927
5925: GO 5953
5927: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
5928: LD_ADDR_VAR 0 3
5932: PUSH
5933: LD_INT 11
5935: PUSH
5936: LD_INT 12
5938: PUSH
5939: LD_INT 13
5941: PUSH
5942: LD_INT 14
5944: PUSH
5945: EMPTY
5946: LIST
5947: LIST
5948: LIST
5949: LIST
5950: ST_TO_ADDR
5951: GO 6562
5953: LD_INT 23
5955: DOUBLE
5956: EQUAL
5957: IFTRUE 5961
5959: GO 5987
5961: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
5962: LD_ADDR_VAR 0 3
5966: PUSH
5967: LD_INT 11
5969: PUSH
5970: LD_INT 12
5972: PUSH
5973: LD_INT 13
5975: PUSH
5976: LD_INT 14
5978: PUSH
5979: EMPTY
5980: LIST
5981: LIST
5982: LIST
5983: LIST
5984: ST_TO_ADDR
5985: GO 6562
5987: LD_INT 24
5989: DOUBLE
5990: EQUAL
5991: IFTRUE 5995
5993: GO 6021
5995: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
5996: LD_ADDR_VAR 0 3
6000: PUSH
6001: LD_INT 11
6003: PUSH
6004: LD_INT 12
6006: PUSH
6007: LD_INT 13
6009: PUSH
6010: LD_INT 14
6012: PUSH
6013: EMPTY
6014: LIST
6015: LIST
6016: LIST
6017: LIST
6018: ST_TO_ADDR
6019: GO 6562
6021: LD_INT 30
6023: DOUBLE
6024: EQUAL
6025: IFTRUE 6029
6027: GO 6055
6029: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
6030: LD_ADDR_VAR 0 3
6034: PUSH
6035: LD_INT 11
6037: PUSH
6038: LD_INT 12
6040: PUSH
6041: LD_INT 13
6043: PUSH
6044: LD_INT 14
6046: PUSH
6047: EMPTY
6048: LIST
6049: LIST
6050: LIST
6051: LIST
6052: ST_TO_ADDR
6053: GO 6562
6055: LD_INT 25
6057: DOUBLE
6058: EQUAL
6059: IFTRUE 6063
6061: GO 6081
6063: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
6064: LD_ADDR_VAR 0 3
6068: PUSH
6069: LD_INT 13
6071: PUSH
6072: LD_INT 14
6074: PUSH
6075: EMPTY
6076: LIST
6077: LIST
6078: ST_TO_ADDR
6079: GO 6562
6081: LD_INT 27
6083: DOUBLE
6084: EQUAL
6085: IFTRUE 6089
6087: GO 6107
6089: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
6090: LD_ADDR_VAR 0 3
6094: PUSH
6095: LD_INT 13
6097: PUSH
6098: LD_INT 14
6100: PUSH
6101: EMPTY
6102: LIST
6103: LIST
6104: ST_TO_ADDR
6105: GO 6562
6107: LD_INT 92
6109: DOUBLE
6110: EQUAL
6111: IFTRUE 6115
6113: GO 6141
6115: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
6116: LD_ADDR_VAR 0 3
6120: PUSH
6121: LD_INT 11
6123: PUSH
6124: LD_INT 12
6126: PUSH
6127: LD_INT 13
6129: PUSH
6130: LD_INT 14
6132: PUSH
6133: EMPTY
6134: LIST
6135: LIST
6136: LIST
6137: LIST
6138: ST_TO_ADDR
6139: GO 6562
6141: LD_INT 28
6143: DOUBLE
6144: EQUAL
6145: IFTRUE 6149
6147: GO 6167
6149: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
6150: LD_ADDR_VAR 0 3
6154: PUSH
6155: LD_INT 13
6157: PUSH
6158: LD_INT 14
6160: PUSH
6161: EMPTY
6162: LIST
6163: LIST
6164: ST_TO_ADDR
6165: GO 6562
6167: LD_INT 29
6169: DOUBLE
6170: EQUAL
6171: IFTRUE 6175
6173: GO 6193
6175: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
6176: LD_ADDR_VAR 0 3
6180: PUSH
6181: LD_INT 13
6183: PUSH
6184: LD_INT 14
6186: PUSH
6187: EMPTY
6188: LIST
6189: LIST
6190: ST_TO_ADDR
6191: GO 6562
6193: LD_INT 31
6195: DOUBLE
6196: EQUAL
6197: IFTRUE 6201
6199: GO 6219
6201: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
6202: LD_ADDR_VAR 0 3
6206: PUSH
6207: LD_INT 13
6209: PUSH
6210: LD_INT 14
6212: PUSH
6213: EMPTY
6214: LIST
6215: LIST
6216: ST_TO_ADDR
6217: GO 6562
6219: LD_INT 26
6221: DOUBLE
6222: EQUAL
6223: IFTRUE 6227
6225: GO 6245
6227: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
6228: LD_ADDR_VAR 0 3
6232: PUSH
6233: LD_INT 13
6235: PUSH
6236: LD_INT 14
6238: PUSH
6239: EMPTY
6240: LIST
6241: LIST
6242: ST_TO_ADDR
6243: GO 6562
6245: LD_INT 42
6247: DOUBLE
6248: EQUAL
6249: IFTRUE 6253
6251: GO 6279
6253: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
6254: LD_ADDR_VAR 0 3
6258: PUSH
6259: LD_INT 21
6261: PUSH
6262: LD_INT 22
6264: PUSH
6265: LD_INT 23
6267: PUSH
6268: LD_INT 24
6270: PUSH
6271: EMPTY
6272: LIST
6273: LIST
6274: LIST
6275: LIST
6276: ST_TO_ADDR
6277: GO 6562
6279: LD_INT 43
6281: DOUBLE
6282: EQUAL
6283: IFTRUE 6287
6285: GO 6313
6287: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
6288: LD_ADDR_VAR 0 3
6292: PUSH
6293: LD_INT 21
6295: PUSH
6296: LD_INT 22
6298: PUSH
6299: LD_INT 23
6301: PUSH
6302: LD_INT 24
6304: PUSH
6305: EMPTY
6306: LIST
6307: LIST
6308: LIST
6309: LIST
6310: ST_TO_ADDR
6311: GO 6562
6313: LD_INT 44
6315: DOUBLE
6316: EQUAL
6317: IFTRUE 6321
6319: GO 6347
6321: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
6322: LD_ADDR_VAR 0 3
6326: PUSH
6327: LD_INT 21
6329: PUSH
6330: LD_INT 22
6332: PUSH
6333: LD_INT 23
6335: PUSH
6336: LD_INT 24
6338: PUSH
6339: EMPTY
6340: LIST
6341: LIST
6342: LIST
6343: LIST
6344: ST_TO_ADDR
6345: GO 6562
6347: LD_INT 45
6349: DOUBLE
6350: EQUAL
6351: IFTRUE 6355
6353: GO 6381
6355: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
6356: LD_ADDR_VAR 0 3
6360: PUSH
6361: LD_INT 21
6363: PUSH
6364: LD_INT 22
6366: PUSH
6367: LD_INT 23
6369: PUSH
6370: LD_INT 24
6372: PUSH
6373: EMPTY
6374: LIST
6375: LIST
6376: LIST
6377: LIST
6378: ST_TO_ADDR
6379: GO 6562
6381: LD_INT 49
6383: DOUBLE
6384: EQUAL
6385: IFTRUE 6389
6387: GO 6415
6389: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
6390: LD_ADDR_VAR 0 3
6394: PUSH
6395: LD_INT 21
6397: PUSH
6398: LD_INT 22
6400: PUSH
6401: LD_INT 23
6403: PUSH
6404: LD_INT 24
6406: PUSH
6407: EMPTY
6408: LIST
6409: LIST
6410: LIST
6411: LIST
6412: ST_TO_ADDR
6413: GO 6562
6415: LD_INT 51
6417: DOUBLE
6418: EQUAL
6419: IFTRUE 6423
6421: GO 6449
6423: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
6424: LD_ADDR_VAR 0 3
6428: PUSH
6429: LD_INT 21
6431: PUSH
6432: LD_INT 22
6434: PUSH
6435: LD_INT 23
6437: PUSH
6438: LD_INT 24
6440: PUSH
6441: EMPTY
6442: LIST
6443: LIST
6444: LIST
6445: LIST
6446: ST_TO_ADDR
6447: GO 6562
6449: LD_INT 52
6451: DOUBLE
6452: EQUAL
6453: IFTRUE 6457
6455: GO 6483
6457: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
6458: LD_ADDR_VAR 0 3
6462: PUSH
6463: LD_INT 21
6465: PUSH
6466: LD_INT 22
6468: PUSH
6469: LD_INT 23
6471: PUSH
6472: LD_INT 24
6474: PUSH
6475: EMPTY
6476: LIST
6477: LIST
6478: LIST
6479: LIST
6480: ST_TO_ADDR
6481: GO 6562
6483: LD_INT 53
6485: DOUBLE
6486: EQUAL
6487: IFTRUE 6491
6489: GO 6509
6491: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
6492: LD_ADDR_VAR 0 3
6496: PUSH
6497: LD_INT 23
6499: PUSH
6500: LD_INT 24
6502: PUSH
6503: EMPTY
6504: LIST
6505: LIST
6506: ST_TO_ADDR
6507: GO 6562
6509: LD_INT 46
6511: DOUBLE
6512: EQUAL
6513: IFTRUE 6517
6515: GO 6535
6517: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
6518: LD_ADDR_VAR 0 3
6522: PUSH
6523: LD_INT 23
6525: PUSH
6526: LD_INT 24
6528: PUSH
6529: EMPTY
6530: LIST
6531: LIST
6532: ST_TO_ADDR
6533: GO 6562
6535: LD_INT 47
6537: DOUBLE
6538: EQUAL
6539: IFTRUE 6543
6541: GO 6561
6543: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
6544: LD_ADDR_VAR 0 3
6548: PUSH
6549: LD_INT 23
6551: PUSH
6552: LD_INT 24
6554: PUSH
6555: EMPTY
6556: LIST
6557: LIST
6558: ST_TO_ADDR
6559: GO 6562
6561: POP
// result := ( chassis in result ) ;
6562: LD_ADDR_VAR 0 3
6566: PUSH
6567: LD_VAR 0 1
6571: PUSH
6572: LD_VAR 0 3
6576: IN
6577: ST_TO_ADDR
// end ;
6578: LD_VAR 0 3
6582: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
6583: LD_INT 0
6585: PPUSH
6586: PPUSH
6587: PPUSH
6588: PPUSH
6589: PPUSH
6590: PPUSH
6591: PPUSH
// result := array ;
6592: LD_ADDR_VAR 0 5
6596: PUSH
6597: LD_VAR 0 1
6601: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
6602: LD_VAR 0 1
6606: NOT
6607: PUSH
6608: LD_VAR 0 2
6612: NOT
6613: OR
6614: PUSH
6615: LD_VAR 0 3
6619: NOT
6620: OR
6621: PUSH
6622: LD_VAR 0 2
6626: PUSH
6627: LD_VAR 0 1
6631: GREATER
6632: OR
6633: PUSH
6634: LD_VAR 0 3
6638: PUSH
6639: LD_VAR 0 1
6643: GREATER
6644: OR
6645: IFFALSE 6649
// exit ;
6647: GO 6945
// if direction then
6649: LD_VAR 0 4
6653: IFFALSE 6717
// begin d := 1 ;
6655: LD_ADDR_VAR 0 9
6659: PUSH
6660: LD_INT 1
6662: ST_TO_ADDR
// if i_from > i_to then
6663: LD_VAR 0 2
6667: PUSH
6668: LD_VAR 0 3
6672: GREATER
6673: IFFALSE 6699
// length := ( array - i_from ) + i_to else
6675: LD_ADDR_VAR 0 11
6679: PUSH
6680: LD_VAR 0 1
6684: PUSH
6685: LD_VAR 0 2
6689: MINUS
6690: PUSH
6691: LD_VAR 0 3
6695: PLUS
6696: ST_TO_ADDR
6697: GO 6715
// length := i_to - i_from ;
6699: LD_ADDR_VAR 0 11
6703: PUSH
6704: LD_VAR 0 3
6708: PUSH
6709: LD_VAR 0 2
6713: MINUS
6714: ST_TO_ADDR
// end else
6715: GO 6778
// begin d := - 1 ;
6717: LD_ADDR_VAR 0 9
6721: PUSH
6722: LD_INT 1
6724: NEG
6725: ST_TO_ADDR
// if i_from > i_to then
6726: LD_VAR 0 2
6730: PUSH
6731: LD_VAR 0 3
6735: GREATER
6736: IFFALSE 6756
// length := i_from - i_to else
6738: LD_ADDR_VAR 0 11
6742: PUSH
6743: LD_VAR 0 2
6747: PUSH
6748: LD_VAR 0 3
6752: MINUS
6753: ST_TO_ADDR
6754: GO 6778
// length := ( array - i_to ) + i_from ;
6756: LD_ADDR_VAR 0 11
6760: PUSH
6761: LD_VAR 0 1
6765: PUSH
6766: LD_VAR 0 3
6770: MINUS
6771: PUSH
6772: LD_VAR 0 2
6776: PLUS
6777: ST_TO_ADDR
// end ; if not length then
6778: LD_VAR 0 11
6782: NOT
6783: IFFALSE 6787
// exit ;
6785: GO 6945
// tmp := array ;
6787: LD_ADDR_VAR 0 10
6791: PUSH
6792: LD_VAR 0 1
6796: ST_TO_ADDR
// for i = 1 to length do
6797: LD_ADDR_VAR 0 6
6801: PUSH
6802: DOUBLE
6803: LD_INT 1
6805: DEC
6806: ST_TO_ADDR
6807: LD_VAR 0 11
6811: PUSH
6812: FOR_TO
6813: IFFALSE 6933
// begin for j = 1 to array do
6815: LD_ADDR_VAR 0 7
6819: PUSH
6820: DOUBLE
6821: LD_INT 1
6823: DEC
6824: ST_TO_ADDR
6825: LD_VAR 0 1
6829: PUSH
6830: FOR_TO
6831: IFFALSE 6919
// begin k := j + d ;
6833: LD_ADDR_VAR 0 8
6837: PUSH
6838: LD_VAR 0 7
6842: PUSH
6843: LD_VAR 0 9
6847: PLUS
6848: ST_TO_ADDR
// if k > array then
6849: LD_VAR 0 8
6853: PUSH
6854: LD_VAR 0 1
6858: GREATER
6859: IFFALSE 6869
// k := 1 ;
6861: LD_ADDR_VAR 0 8
6865: PUSH
6866: LD_INT 1
6868: ST_TO_ADDR
// if not k then
6869: LD_VAR 0 8
6873: NOT
6874: IFFALSE 6886
// k := array ;
6876: LD_ADDR_VAR 0 8
6880: PUSH
6881: LD_VAR 0 1
6885: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
6886: LD_ADDR_VAR 0 10
6890: PUSH
6891: LD_VAR 0 10
6895: PPUSH
6896: LD_VAR 0 8
6900: PPUSH
6901: LD_VAR 0 1
6905: PUSH
6906: LD_VAR 0 7
6910: ARRAY
6911: PPUSH
6912: CALL_OW 1
6916: ST_TO_ADDR
// end ;
6917: GO 6830
6919: POP
6920: POP
// array := tmp ;
6921: LD_ADDR_VAR 0 1
6925: PUSH
6926: LD_VAR 0 10
6930: ST_TO_ADDR
// end ;
6931: GO 6812
6933: POP
6934: POP
// result := array ;
6935: LD_ADDR_VAR 0 5
6939: PUSH
6940: LD_VAR 0 1
6944: ST_TO_ADDR
// end ;
6945: LD_VAR 0 5
6949: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
6950: LD_INT 0
6952: PPUSH
6953: PPUSH
// result := 0 ;
6954: LD_ADDR_VAR 0 3
6958: PUSH
6959: LD_INT 0
6961: ST_TO_ADDR
// if not array or not value in array then
6962: LD_VAR 0 1
6966: NOT
6967: PUSH
6968: LD_VAR 0 2
6972: PUSH
6973: LD_VAR 0 1
6977: IN
6978: NOT
6979: OR
6980: IFFALSE 6984
// exit ;
6982: GO 7038
// for i = 1 to array do
6984: LD_ADDR_VAR 0 4
6988: PUSH
6989: DOUBLE
6990: LD_INT 1
6992: DEC
6993: ST_TO_ADDR
6994: LD_VAR 0 1
6998: PUSH
6999: FOR_TO
7000: IFFALSE 7036
// if value = array [ i ] then
7002: LD_VAR 0 2
7006: PUSH
7007: LD_VAR 0 1
7011: PUSH
7012: LD_VAR 0 4
7016: ARRAY
7017: EQUAL
7018: IFFALSE 7034
// begin result := i ;
7020: LD_ADDR_VAR 0 3
7024: PUSH
7025: LD_VAR 0 4
7029: ST_TO_ADDR
// exit ;
7030: POP
7031: POP
7032: GO 7038
// end ;
7034: GO 6999
7036: POP
7037: POP
// end ;
7038: LD_VAR 0 3
7042: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
7043: LD_INT 0
7045: PPUSH
// vc_chassis := chassis ;
7046: LD_ADDR_OWVAR 37
7050: PUSH
7051: LD_VAR 0 1
7055: ST_TO_ADDR
// vc_engine := engine ;
7056: LD_ADDR_OWVAR 39
7060: PUSH
7061: LD_VAR 0 2
7065: ST_TO_ADDR
// vc_control := control ;
7066: LD_ADDR_OWVAR 38
7070: PUSH
7071: LD_VAR 0 3
7075: ST_TO_ADDR
// vc_weapon := weapon ;
7076: LD_ADDR_OWVAR 40
7080: PUSH
7081: LD_VAR 0 4
7085: ST_TO_ADDR
// vc_fuel_battery := fuel ;
7086: LD_ADDR_OWVAR 41
7090: PUSH
7091: LD_VAR 0 5
7095: ST_TO_ADDR
// end ;
7096: LD_VAR 0 6
7100: RET
// export function WantPlant ( unit ) ; var task ; begin
7101: LD_INT 0
7103: PPUSH
7104: PPUSH
// result := false ;
7105: LD_ADDR_VAR 0 2
7109: PUSH
7110: LD_INT 0
7112: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
7113: LD_ADDR_VAR 0 3
7117: PUSH
7118: LD_VAR 0 1
7122: PPUSH
7123: CALL_OW 437
7127: ST_TO_ADDR
// if task then
7128: LD_VAR 0 3
7132: IFFALSE 7160
// if task [ 1 ] [ 1 ] = p then
7134: LD_VAR 0 3
7138: PUSH
7139: LD_INT 1
7141: ARRAY
7142: PUSH
7143: LD_INT 1
7145: ARRAY
7146: PUSH
7147: LD_STRING p
7149: EQUAL
7150: IFFALSE 7160
// result := true ;
7152: LD_ADDR_VAR 0 2
7156: PUSH
7157: LD_INT 1
7159: ST_TO_ADDR
// end ;
7160: LD_VAR 0 2
7164: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
7165: LD_INT 0
7167: PPUSH
7168: PPUSH
7169: PPUSH
7170: PPUSH
// if pos < 1 then
7171: LD_VAR 0 2
7175: PUSH
7176: LD_INT 1
7178: LESS
7179: IFFALSE 7183
// exit ;
7181: GO 7486
// if pos = 1 then
7183: LD_VAR 0 2
7187: PUSH
7188: LD_INT 1
7190: EQUAL
7191: IFFALSE 7224
// result := Replace ( arr , pos [ 1 ] , value ) else
7193: LD_ADDR_VAR 0 4
7197: PUSH
7198: LD_VAR 0 1
7202: PPUSH
7203: LD_VAR 0 2
7207: PUSH
7208: LD_INT 1
7210: ARRAY
7211: PPUSH
7212: LD_VAR 0 3
7216: PPUSH
7217: CALL_OW 1
7221: ST_TO_ADDR
7222: GO 7486
// begin tmp := arr ;
7224: LD_ADDR_VAR 0 6
7228: PUSH
7229: LD_VAR 0 1
7233: ST_TO_ADDR
// s_arr := [ tmp ] ;
7234: LD_ADDR_VAR 0 7
7238: PUSH
7239: LD_VAR 0 6
7243: PUSH
7244: EMPTY
7245: LIST
7246: ST_TO_ADDR
// for i = 1 to pos - 1 do
7247: LD_ADDR_VAR 0 5
7251: PUSH
7252: DOUBLE
7253: LD_INT 1
7255: DEC
7256: ST_TO_ADDR
7257: LD_VAR 0 2
7261: PUSH
7262: LD_INT 1
7264: MINUS
7265: PUSH
7266: FOR_TO
7267: IFFALSE 7312
// begin tmp := tmp [ pos [ i ] ] ;
7269: LD_ADDR_VAR 0 6
7273: PUSH
7274: LD_VAR 0 6
7278: PUSH
7279: LD_VAR 0 2
7283: PUSH
7284: LD_VAR 0 5
7288: ARRAY
7289: ARRAY
7290: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
7291: LD_ADDR_VAR 0 7
7295: PUSH
7296: LD_VAR 0 7
7300: PUSH
7301: LD_VAR 0 6
7305: PUSH
7306: EMPTY
7307: LIST
7308: ADD
7309: ST_TO_ADDR
// end ;
7310: GO 7266
7312: POP
7313: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
7314: LD_ADDR_VAR 0 6
7318: PUSH
7319: LD_VAR 0 6
7323: PPUSH
7324: LD_VAR 0 2
7328: PUSH
7329: LD_VAR 0 2
7333: ARRAY
7334: PPUSH
7335: LD_VAR 0 3
7339: PPUSH
7340: CALL_OW 1
7344: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
7345: LD_ADDR_VAR 0 7
7349: PUSH
7350: LD_VAR 0 7
7354: PPUSH
7355: LD_VAR 0 7
7359: PPUSH
7360: LD_VAR 0 6
7364: PPUSH
7365: CALL_OW 1
7369: ST_TO_ADDR
// for i = s_arr downto 2 do
7370: LD_ADDR_VAR 0 5
7374: PUSH
7375: DOUBLE
7376: LD_VAR 0 7
7380: INC
7381: ST_TO_ADDR
7382: LD_INT 2
7384: PUSH
7385: FOR_DOWNTO
7386: IFFALSE 7470
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
7388: LD_ADDR_VAR 0 6
7392: PUSH
7393: LD_VAR 0 7
7397: PUSH
7398: LD_VAR 0 5
7402: PUSH
7403: LD_INT 1
7405: MINUS
7406: ARRAY
7407: PPUSH
7408: LD_VAR 0 2
7412: PUSH
7413: LD_VAR 0 5
7417: PUSH
7418: LD_INT 1
7420: MINUS
7421: ARRAY
7422: PPUSH
7423: LD_VAR 0 7
7427: PUSH
7428: LD_VAR 0 5
7432: ARRAY
7433: PPUSH
7434: CALL_OW 1
7438: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
7439: LD_ADDR_VAR 0 7
7443: PUSH
7444: LD_VAR 0 7
7448: PPUSH
7449: LD_VAR 0 5
7453: PUSH
7454: LD_INT 1
7456: MINUS
7457: PPUSH
7458: LD_VAR 0 6
7462: PPUSH
7463: CALL_OW 1
7467: ST_TO_ADDR
// end ;
7468: GO 7385
7470: POP
7471: POP
// result := s_arr [ 1 ] ;
7472: LD_ADDR_VAR 0 4
7476: PUSH
7477: LD_VAR 0 7
7481: PUSH
7482: LD_INT 1
7484: ARRAY
7485: ST_TO_ADDR
// end ; end ;
7486: LD_VAR 0 4
7490: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
7491: LD_INT 0
7493: PPUSH
7494: PPUSH
// if not list then
7495: LD_VAR 0 1
7499: NOT
7500: IFFALSE 7504
// exit ;
7502: GO 7595
// i := list [ pos1 ] ;
7504: LD_ADDR_VAR 0 5
7508: PUSH
7509: LD_VAR 0 1
7513: PUSH
7514: LD_VAR 0 2
7518: ARRAY
7519: ST_TO_ADDR
// if not i then
7520: LD_VAR 0 5
7524: NOT
7525: IFFALSE 7529
// exit ;
7527: GO 7595
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
7529: LD_ADDR_VAR 0 1
7533: PUSH
7534: LD_VAR 0 1
7538: PPUSH
7539: LD_VAR 0 2
7543: PPUSH
7544: LD_VAR 0 1
7548: PUSH
7549: LD_VAR 0 3
7553: ARRAY
7554: PPUSH
7555: CALL_OW 1
7559: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
7560: LD_ADDR_VAR 0 1
7564: PUSH
7565: LD_VAR 0 1
7569: PPUSH
7570: LD_VAR 0 3
7574: PPUSH
7575: LD_VAR 0 5
7579: PPUSH
7580: CALL_OW 1
7584: ST_TO_ADDR
// result := list ;
7585: LD_ADDR_VAR 0 4
7589: PUSH
7590: LD_VAR 0 1
7594: ST_TO_ADDR
// end ;
7595: LD_VAR 0 4
7599: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
7600: LD_INT 0
7602: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
7603: LD_ADDR_VAR 0 5
7607: PUSH
7608: LD_VAR 0 1
7612: PPUSH
7613: CALL_OW 250
7617: PPUSH
7618: LD_VAR 0 1
7622: PPUSH
7623: CALL_OW 251
7627: PPUSH
7628: LD_VAR 0 2
7632: PPUSH
7633: LD_VAR 0 3
7637: PPUSH
7638: LD_VAR 0 4
7642: PPUSH
7643: CALL 8021 0 5
7647: ST_TO_ADDR
// end ;
7648: LD_VAR 0 5
7652: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
7653: LD_INT 0
7655: PPUSH
7656: PPUSH
7657: PPUSH
7658: PPUSH
// if not list or not unit then
7659: LD_VAR 0 2
7663: NOT
7664: PUSH
7665: LD_VAR 0 1
7669: NOT
7670: OR
7671: IFFALSE 7675
// exit ;
7673: GO 8016
// result := [ ] ;
7675: LD_ADDR_VAR 0 5
7679: PUSH
7680: EMPTY
7681: ST_TO_ADDR
// for i in list do
7682: LD_ADDR_VAR 0 6
7686: PUSH
7687: LD_VAR 0 2
7691: PUSH
7692: FOR_IN
7693: IFFALSE 7911
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
7695: LD_ADDR_VAR 0 8
7699: PUSH
7700: LD_VAR 0 1
7704: PPUSH
7705: LD_VAR 0 6
7709: PUSH
7710: LD_INT 1
7712: ARRAY
7713: PPUSH
7714: LD_VAR 0 6
7718: PUSH
7719: LD_INT 2
7721: ARRAY
7722: PPUSH
7723: CALL_OW 297
7727: ST_TO_ADDR
// if not Count ( result ) then
7728: LD_VAR 0 5
7732: PPUSH
7733: CALL 4305 0 1
7737: NOT
7738: IFFALSE 7771
// begin result := Join ( result , [ i , tmp ] ) ;
7740: LD_ADDR_VAR 0 5
7744: PUSH
7745: LD_VAR 0 5
7749: PPUSH
7750: LD_VAR 0 6
7754: PUSH
7755: LD_VAR 0 8
7759: PUSH
7760: EMPTY
7761: LIST
7762: LIST
7763: PPUSH
7764: CALL 39905 0 2
7768: ST_TO_ADDR
// continue ;
7769: GO 7692
// end ; if result [ result ] [ 2 ] <= tmp then
7771: LD_VAR 0 5
7775: PUSH
7776: LD_VAR 0 5
7780: ARRAY
7781: PUSH
7782: LD_INT 2
7784: ARRAY
7785: PUSH
7786: LD_VAR 0 8
7790: LESSEQUAL
7791: IFFALSE 7824
// result := Join ( result , [ i , tmp ] ) else
7793: LD_ADDR_VAR 0 5
7797: PUSH
7798: LD_VAR 0 5
7802: PPUSH
7803: LD_VAR 0 6
7807: PUSH
7808: LD_VAR 0 8
7812: PUSH
7813: EMPTY
7814: LIST
7815: LIST
7816: PPUSH
7817: CALL 39905 0 2
7821: ST_TO_ADDR
7822: GO 7909
// begin for j := 1 to Count ( result ) do
7824: LD_ADDR_VAR 0 7
7828: PUSH
7829: DOUBLE
7830: LD_INT 1
7832: DEC
7833: ST_TO_ADDR
7834: LD_VAR 0 5
7838: PPUSH
7839: CALL 4305 0 1
7843: PUSH
7844: FOR_TO
7845: IFFALSE 7907
// begin if tmp < result [ j ] [ 2 ] then
7847: LD_VAR 0 8
7851: PUSH
7852: LD_VAR 0 5
7856: PUSH
7857: LD_VAR 0 7
7861: ARRAY
7862: PUSH
7863: LD_INT 2
7865: ARRAY
7866: LESS
7867: IFFALSE 7905
// begin result := Insert ( result , j , [ i , tmp ] ) ;
7869: LD_ADDR_VAR 0 5
7873: PUSH
7874: LD_VAR 0 5
7878: PPUSH
7879: LD_VAR 0 7
7883: PPUSH
7884: LD_VAR 0 6
7888: PUSH
7889: LD_VAR 0 8
7893: PUSH
7894: EMPTY
7895: LIST
7896: LIST
7897: PPUSH
7898: CALL_OW 2
7902: ST_TO_ADDR
// break ;
7903: GO 7907
// end ; end ;
7905: GO 7844
7907: POP
7908: POP
// end ; end ;
7909: GO 7692
7911: POP
7912: POP
// if result and not asc then
7913: LD_VAR 0 5
7917: PUSH
7918: LD_VAR 0 3
7922: NOT
7923: AND
7924: IFFALSE 7941
// result := ReverseArray ( result ) ;
7926: LD_ADDR_VAR 0 5
7930: PUSH
7931: LD_VAR 0 5
7935: PPUSH
7936: CALL 35181 0 1
7940: ST_TO_ADDR
// tmp := [ ] ;
7941: LD_ADDR_VAR 0 8
7945: PUSH
7946: EMPTY
7947: ST_TO_ADDR
// if mode then
7948: LD_VAR 0 4
7952: IFFALSE 8016
// begin for i := 1 to result do
7954: LD_ADDR_VAR 0 6
7958: PUSH
7959: DOUBLE
7960: LD_INT 1
7962: DEC
7963: ST_TO_ADDR
7964: LD_VAR 0 5
7968: PUSH
7969: FOR_TO
7970: IFFALSE 8004
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
7972: LD_ADDR_VAR 0 8
7976: PUSH
7977: LD_VAR 0 8
7981: PPUSH
7982: LD_VAR 0 5
7986: PUSH
7987: LD_VAR 0 6
7991: ARRAY
7992: PUSH
7993: LD_INT 1
7995: ARRAY
7996: PPUSH
7997: CALL 39905 0 2
8001: ST_TO_ADDR
8002: GO 7969
8004: POP
8005: POP
// result := tmp ;
8006: LD_ADDR_VAR 0 5
8010: PUSH
8011: LD_VAR 0 8
8015: ST_TO_ADDR
// end ; end ;
8016: LD_VAR 0 5
8020: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
8021: LD_INT 0
8023: PPUSH
8024: PPUSH
8025: PPUSH
8026: PPUSH
// if not list then
8027: LD_VAR 0 3
8031: NOT
8032: IFFALSE 8036
// exit ;
8034: GO 8424
// result := [ ] ;
8036: LD_ADDR_VAR 0 6
8040: PUSH
8041: EMPTY
8042: ST_TO_ADDR
// for i in list do
8043: LD_ADDR_VAR 0 7
8047: PUSH
8048: LD_VAR 0 3
8052: PUSH
8053: FOR_IN
8054: IFFALSE 8256
// begin tmp := GetDistUnitXY ( i , x , y ) ;
8056: LD_ADDR_VAR 0 9
8060: PUSH
8061: LD_VAR 0 7
8065: PPUSH
8066: LD_VAR 0 1
8070: PPUSH
8071: LD_VAR 0 2
8075: PPUSH
8076: CALL_OW 297
8080: ST_TO_ADDR
// if not result then
8081: LD_VAR 0 6
8085: NOT
8086: IFFALSE 8112
// result := [ [ i , tmp ] ] else
8088: LD_ADDR_VAR 0 6
8092: PUSH
8093: LD_VAR 0 7
8097: PUSH
8098: LD_VAR 0 9
8102: PUSH
8103: EMPTY
8104: LIST
8105: LIST
8106: PUSH
8107: EMPTY
8108: LIST
8109: ST_TO_ADDR
8110: GO 8254
// begin if result [ result ] [ 2 ] < tmp then
8112: LD_VAR 0 6
8116: PUSH
8117: LD_VAR 0 6
8121: ARRAY
8122: PUSH
8123: LD_INT 2
8125: ARRAY
8126: PUSH
8127: LD_VAR 0 9
8131: LESS
8132: IFFALSE 8174
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
8134: LD_ADDR_VAR 0 6
8138: PUSH
8139: LD_VAR 0 6
8143: PPUSH
8144: LD_VAR 0 6
8148: PUSH
8149: LD_INT 1
8151: PLUS
8152: PPUSH
8153: LD_VAR 0 7
8157: PUSH
8158: LD_VAR 0 9
8162: PUSH
8163: EMPTY
8164: LIST
8165: LIST
8166: PPUSH
8167: CALL_OW 2
8171: ST_TO_ADDR
8172: GO 8254
// for j = 1 to result do
8174: LD_ADDR_VAR 0 8
8178: PUSH
8179: DOUBLE
8180: LD_INT 1
8182: DEC
8183: ST_TO_ADDR
8184: LD_VAR 0 6
8188: PUSH
8189: FOR_TO
8190: IFFALSE 8252
// begin if tmp < result [ j ] [ 2 ] then
8192: LD_VAR 0 9
8196: PUSH
8197: LD_VAR 0 6
8201: PUSH
8202: LD_VAR 0 8
8206: ARRAY
8207: PUSH
8208: LD_INT 2
8210: ARRAY
8211: LESS
8212: IFFALSE 8250
// begin result := Insert ( result , j , [ i , tmp ] ) ;
8214: LD_ADDR_VAR 0 6
8218: PUSH
8219: LD_VAR 0 6
8223: PPUSH
8224: LD_VAR 0 8
8228: PPUSH
8229: LD_VAR 0 7
8233: PUSH
8234: LD_VAR 0 9
8238: PUSH
8239: EMPTY
8240: LIST
8241: LIST
8242: PPUSH
8243: CALL_OW 2
8247: ST_TO_ADDR
// break ;
8248: GO 8252
// end ; end ;
8250: GO 8189
8252: POP
8253: POP
// end ; end ;
8254: GO 8053
8256: POP
8257: POP
// if result and not asc then
8258: LD_VAR 0 6
8262: PUSH
8263: LD_VAR 0 4
8267: NOT
8268: AND
8269: IFFALSE 8344
// begin tmp := result ;
8271: LD_ADDR_VAR 0 9
8275: PUSH
8276: LD_VAR 0 6
8280: ST_TO_ADDR
// for i = tmp downto 1 do
8281: LD_ADDR_VAR 0 7
8285: PUSH
8286: DOUBLE
8287: LD_VAR 0 9
8291: INC
8292: ST_TO_ADDR
8293: LD_INT 1
8295: PUSH
8296: FOR_DOWNTO
8297: IFFALSE 8342
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
8299: LD_ADDR_VAR 0 6
8303: PUSH
8304: LD_VAR 0 6
8308: PPUSH
8309: LD_VAR 0 9
8313: PUSH
8314: LD_VAR 0 7
8318: MINUS
8319: PUSH
8320: LD_INT 1
8322: PLUS
8323: PPUSH
8324: LD_VAR 0 9
8328: PUSH
8329: LD_VAR 0 7
8333: ARRAY
8334: PPUSH
8335: CALL_OW 1
8339: ST_TO_ADDR
8340: GO 8296
8342: POP
8343: POP
// end ; tmp := [ ] ;
8344: LD_ADDR_VAR 0 9
8348: PUSH
8349: EMPTY
8350: ST_TO_ADDR
// if mode then
8351: LD_VAR 0 5
8355: IFFALSE 8424
// begin for i = 1 to result do
8357: LD_ADDR_VAR 0 7
8361: PUSH
8362: DOUBLE
8363: LD_INT 1
8365: DEC
8366: ST_TO_ADDR
8367: LD_VAR 0 6
8371: PUSH
8372: FOR_TO
8373: IFFALSE 8412
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
8375: LD_ADDR_VAR 0 9
8379: PUSH
8380: LD_VAR 0 9
8384: PPUSH
8385: LD_VAR 0 7
8389: PPUSH
8390: LD_VAR 0 6
8394: PUSH
8395: LD_VAR 0 7
8399: ARRAY
8400: PUSH
8401: LD_INT 1
8403: ARRAY
8404: PPUSH
8405: CALL_OW 1
8409: ST_TO_ADDR
8410: GO 8372
8412: POP
8413: POP
// result := tmp ;
8414: LD_ADDR_VAR 0 6
8418: PUSH
8419: LD_VAR 0 9
8423: ST_TO_ADDR
// end ; end ;
8424: LD_VAR 0 6
8428: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
8429: LD_INT 0
8431: PPUSH
8432: PPUSH
8433: PPUSH
8434: PPUSH
8435: PPUSH
8436: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
8437: LD_ADDR_VAR 0 5
8441: PUSH
8442: LD_INT 0
8444: PUSH
8445: LD_INT 0
8447: PUSH
8448: LD_INT 0
8450: PUSH
8451: EMPTY
8452: PUSH
8453: EMPTY
8454: LIST
8455: LIST
8456: LIST
8457: LIST
8458: ST_TO_ADDR
// if not x or not y then
8459: LD_VAR 0 2
8463: NOT
8464: PUSH
8465: LD_VAR 0 3
8469: NOT
8470: OR
8471: IFFALSE 8475
// exit ;
8473: GO 10125
// if not range then
8475: LD_VAR 0 4
8479: NOT
8480: IFFALSE 8490
// range := 10 ;
8482: LD_ADDR_VAR 0 4
8486: PUSH
8487: LD_INT 10
8489: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
8490: LD_ADDR_VAR 0 8
8494: PUSH
8495: LD_INT 81
8497: PUSH
8498: LD_VAR 0 1
8502: PUSH
8503: EMPTY
8504: LIST
8505: LIST
8506: PUSH
8507: LD_INT 92
8509: PUSH
8510: LD_VAR 0 2
8514: PUSH
8515: LD_VAR 0 3
8519: PUSH
8520: LD_VAR 0 4
8524: PUSH
8525: EMPTY
8526: LIST
8527: LIST
8528: LIST
8529: LIST
8530: PUSH
8531: LD_INT 3
8533: PUSH
8534: LD_INT 21
8536: PUSH
8537: LD_INT 3
8539: PUSH
8540: EMPTY
8541: LIST
8542: LIST
8543: PUSH
8544: EMPTY
8545: LIST
8546: LIST
8547: PUSH
8548: EMPTY
8549: LIST
8550: LIST
8551: LIST
8552: PPUSH
8553: CALL_OW 69
8557: ST_TO_ADDR
// if not tmp then
8558: LD_VAR 0 8
8562: NOT
8563: IFFALSE 8567
// exit ;
8565: GO 10125
// for i in tmp do
8567: LD_ADDR_VAR 0 6
8571: PUSH
8572: LD_VAR 0 8
8576: PUSH
8577: FOR_IN
8578: IFFALSE 10100
// begin points := [ 0 , 0 , 0 ] ;
8580: LD_ADDR_VAR 0 9
8584: PUSH
8585: LD_INT 0
8587: PUSH
8588: LD_INT 0
8590: PUSH
8591: LD_INT 0
8593: PUSH
8594: EMPTY
8595: LIST
8596: LIST
8597: LIST
8598: ST_TO_ADDR
// bpoints := 1 ;
8599: LD_ADDR_VAR 0 10
8603: PUSH
8604: LD_INT 1
8606: ST_TO_ADDR
// case GetType ( i ) of unit_human :
8607: LD_VAR 0 6
8611: PPUSH
8612: CALL_OW 247
8616: PUSH
8617: LD_INT 1
8619: DOUBLE
8620: EQUAL
8621: IFTRUE 8625
8623: GO 9203
8625: POP
// begin if GetClass ( i ) = 1 then
8626: LD_VAR 0 6
8630: PPUSH
8631: CALL_OW 257
8635: PUSH
8636: LD_INT 1
8638: EQUAL
8639: IFFALSE 8660
// points := [ 10 , 5 , 3 ] ;
8641: LD_ADDR_VAR 0 9
8645: PUSH
8646: LD_INT 10
8648: PUSH
8649: LD_INT 5
8651: PUSH
8652: LD_INT 3
8654: PUSH
8655: EMPTY
8656: LIST
8657: LIST
8658: LIST
8659: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
8660: LD_VAR 0 6
8664: PPUSH
8665: CALL_OW 257
8669: PUSH
8670: LD_INT 2
8672: PUSH
8673: LD_INT 3
8675: PUSH
8676: LD_INT 4
8678: PUSH
8679: EMPTY
8680: LIST
8681: LIST
8682: LIST
8683: IN
8684: IFFALSE 8705
// points := [ 3 , 2 , 1 ] ;
8686: LD_ADDR_VAR 0 9
8690: PUSH
8691: LD_INT 3
8693: PUSH
8694: LD_INT 2
8696: PUSH
8697: LD_INT 1
8699: PUSH
8700: EMPTY
8701: LIST
8702: LIST
8703: LIST
8704: ST_TO_ADDR
// if GetClass ( i ) = 5 then
8705: LD_VAR 0 6
8709: PPUSH
8710: CALL_OW 257
8714: PUSH
8715: LD_INT 5
8717: EQUAL
8718: IFFALSE 8739
// points := [ 130 , 5 , 2 ] ;
8720: LD_ADDR_VAR 0 9
8724: PUSH
8725: LD_INT 130
8727: PUSH
8728: LD_INT 5
8730: PUSH
8731: LD_INT 2
8733: PUSH
8734: EMPTY
8735: LIST
8736: LIST
8737: LIST
8738: ST_TO_ADDR
// if GetClass ( i ) = 8 then
8739: LD_VAR 0 6
8743: PPUSH
8744: CALL_OW 257
8748: PUSH
8749: LD_INT 8
8751: EQUAL
8752: IFFALSE 8773
// points := [ 35 , 35 , 30 ] ;
8754: LD_ADDR_VAR 0 9
8758: PUSH
8759: LD_INT 35
8761: PUSH
8762: LD_INT 35
8764: PUSH
8765: LD_INT 30
8767: PUSH
8768: EMPTY
8769: LIST
8770: LIST
8771: LIST
8772: ST_TO_ADDR
// if GetClass ( i ) = 9 then
8773: LD_VAR 0 6
8777: PPUSH
8778: CALL_OW 257
8782: PUSH
8783: LD_INT 9
8785: EQUAL
8786: IFFALSE 8807
// points := [ 20 , 55 , 40 ] ;
8788: LD_ADDR_VAR 0 9
8792: PUSH
8793: LD_INT 20
8795: PUSH
8796: LD_INT 55
8798: PUSH
8799: LD_INT 40
8801: PUSH
8802: EMPTY
8803: LIST
8804: LIST
8805: LIST
8806: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
8807: LD_VAR 0 6
8811: PPUSH
8812: CALL_OW 257
8816: PUSH
8817: LD_INT 12
8819: PUSH
8820: LD_INT 16
8822: PUSH
8823: EMPTY
8824: LIST
8825: LIST
8826: IN
8827: IFFALSE 8848
// points := [ 5 , 3 , 2 ] ;
8829: LD_ADDR_VAR 0 9
8833: PUSH
8834: LD_INT 5
8836: PUSH
8837: LD_INT 3
8839: PUSH
8840: LD_INT 2
8842: PUSH
8843: EMPTY
8844: LIST
8845: LIST
8846: LIST
8847: ST_TO_ADDR
// if GetClass ( i ) = 17 then
8848: LD_VAR 0 6
8852: PPUSH
8853: CALL_OW 257
8857: PUSH
8858: LD_INT 17
8860: EQUAL
8861: IFFALSE 8882
// points := [ 100 , 50 , 75 ] ;
8863: LD_ADDR_VAR 0 9
8867: PUSH
8868: LD_INT 100
8870: PUSH
8871: LD_INT 50
8873: PUSH
8874: LD_INT 75
8876: PUSH
8877: EMPTY
8878: LIST
8879: LIST
8880: LIST
8881: ST_TO_ADDR
// if GetClass ( i ) = 15 then
8882: LD_VAR 0 6
8886: PPUSH
8887: CALL_OW 257
8891: PUSH
8892: LD_INT 15
8894: EQUAL
8895: IFFALSE 8916
// points := [ 10 , 5 , 3 ] ;
8897: LD_ADDR_VAR 0 9
8901: PUSH
8902: LD_INT 10
8904: PUSH
8905: LD_INT 5
8907: PUSH
8908: LD_INT 3
8910: PUSH
8911: EMPTY
8912: LIST
8913: LIST
8914: LIST
8915: ST_TO_ADDR
// if GetClass ( i ) = 14 then
8916: LD_VAR 0 6
8920: PPUSH
8921: CALL_OW 257
8925: PUSH
8926: LD_INT 14
8928: EQUAL
8929: IFFALSE 8950
// points := [ 10 , 0 , 0 ] ;
8931: LD_ADDR_VAR 0 9
8935: PUSH
8936: LD_INT 10
8938: PUSH
8939: LD_INT 0
8941: PUSH
8942: LD_INT 0
8944: PUSH
8945: EMPTY
8946: LIST
8947: LIST
8948: LIST
8949: ST_TO_ADDR
// if GetClass ( i ) = 11 then
8950: LD_VAR 0 6
8954: PPUSH
8955: CALL_OW 257
8959: PUSH
8960: LD_INT 11
8962: EQUAL
8963: IFFALSE 8984
// points := [ 30 , 10 , 5 ] ;
8965: LD_ADDR_VAR 0 9
8969: PUSH
8970: LD_INT 30
8972: PUSH
8973: LD_INT 10
8975: PUSH
8976: LD_INT 5
8978: PUSH
8979: EMPTY
8980: LIST
8981: LIST
8982: LIST
8983: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
8984: LD_VAR 0 1
8988: PPUSH
8989: LD_INT 5
8991: PPUSH
8992: CALL_OW 321
8996: PUSH
8997: LD_INT 2
8999: EQUAL
9000: IFFALSE 9017
// bpoints := bpoints * 1.8 ;
9002: LD_ADDR_VAR 0 10
9006: PUSH
9007: LD_VAR 0 10
9011: PUSH
9012: LD_REAL  1.80000000000000E+0000
9015: MUL
9016: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
9017: LD_VAR 0 6
9021: PPUSH
9022: CALL_OW 257
9026: PUSH
9027: LD_INT 1
9029: PUSH
9030: LD_INT 2
9032: PUSH
9033: LD_INT 3
9035: PUSH
9036: LD_INT 4
9038: PUSH
9039: EMPTY
9040: LIST
9041: LIST
9042: LIST
9043: LIST
9044: IN
9045: PUSH
9046: LD_VAR 0 1
9050: PPUSH
9051: LD_INT 51
9053: PPUSH
9054: CALL_OW 321
9058: PUSH
9059: LD_INT 2
9061: EQUAL
9062: AND
9063: IFFALSE 9080
// bpoints := bpoints * 1.2 ;
9065: LD_ADDR_VAR 0 10
9069: PUSH
9070: LD_VAR 0 10
9074: PUSH
9075: LD_REAL  1.20000000000000E+0000
9078: MUL
9079: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
9080: LD_VAR 0 6
9084: PPUSH
9085: CALL_OW 257
9089: PUSH
9090: LD_INT 5
9092: PUSH
9093: LD_INT 7
9095: PUSH
9096: LD_INT 9
9098: PUSH
9099: EMPTY
9100: LIST
9101: LIST
9102: LIST
9103: IN
9104: PUSH
9105: LD_VAR 0 1
9109: PPUSH
9110: LD_INT 52
9112: PPUSH
9113: CALL_OW 321
9117: PUSH
9118: LD_INT 2
9120: EQUAL
9121: AND
9122: IFFALSE 9139
// bpoints := bpoints * 1.5 ;
9124: LD_ADDR_VAR 0 10
9128: PUSH
9129: LD_VAR 0 10
9133: PUSH
9134: LD_REAL  1.50000000000000E+0000
9137: MUL
9138: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
9139: LD_VAR 0 1
9143: PPUSH
9144: LD_INT 66
9146: PPUSH
9147: CALL_OW 321
9151: PUSH
9152: LD_INT 2
9154: EQUAL
9155: IFFALSE 9172
// bpoints := bpoints * 1.1 ;
9157: LD_ADDR_VAR 0 10
9161: PUSH
9162: LD_VAR 0 10
9166: PUSH
9167: LD_REAL  1.10000000000000E+0000
9170: MUL
9171: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
9172: LD_ADDR_VAR 0 10
9176: PUSH
9177: LD_VAR 0 10
9181: PUSH
9182: LD_VAR 0 6
9186: PPUSH
9187: LD_INT 1
9189: PPUSH
9190: CALL_OW 259
9194: PUSH
9195: LD_REAL  1.15000000000000E+0000
9198: MUL
9199: MUL
9200: ST_TO_ADDR
// end ; unit_vehicle :
9201: GO 10029
9203: LD_INT 2
9205: DOUBLE
9206: EQUAL
9207: IFTRUE 9211
9209: GO 10017
9211: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
9212: LD_VAR 0 6
9216: PPUSH
9217: CALL_OW 264
9221: PUSH
9222: LD_INT 2
9224: PUSH
9225: LD_INT 42
9227: PUSH
9228: LD_INT 24
9230: PUSH
9231: EMPTY
9232: LIST
9233: LIST
9234: LIST
9235: IN
9236: IFFALSE 9257
// points := [ 25 , 5 , 3 ] ;
9238: LD_ADDR_VAR 0 9
9242: PUSH
9243: LD_INT 25
9245: PUSH
9246: LD_INT 5
9248: PUSH
9249: LD_INT 3
9251: PUSH
9252: EMPTY
9253: LIST
9254: LIST
9255: LIST
9256: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
9257: LD_VAR 0 6
9261: PPUSH
9262: CALL_OW 264
9266: PUSH
9267: LD_INT 4
9269: PUSH
9270: LD_INT 43
9272: PUSH
9273: LD_INT 25
9275: PUSH
9276: EMPTY
9277: LIST
9278: LIST
9279: LIST
9280: IN
9281: IFFALSE 9302
// points := [ 40 , 15 , 5 ] ;
9283: LD_ADDR_VAR 0 9
9287: PUSH
9288: LD_INT 40
9290: PUSH
9291: LD_INT 15
9293: PUSH
9294: LD_INT 5
9296: PUSH
9297: EMPTY
9298: LIST
9299: LIST
9300: LIST
9301: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
9302: LD_VAR 0 6
9306: PPUSH
9307: CALL_OW 264
9311: PUSH
9312: LD_INT 3
9314: PUSH
9315: LD_INT 23
9317: PUSH
9318: EMPTY
9319: LIST
9320: LIST
9321: IN
9322: IFFALSE 9343
// points := [ 7 , 25 , 8 ] ;
9324: LD_ADDR_VAR 0 9
9328: PUSH
9329: LD_INT 7
9331: PUSH
9332: LD_INT 25
9334: PUSH
9335: LD_INT 8
9337: PUSH
9338: EMPTY
9339: LIST
9340: LIST
9341: LIST
9342: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
9343: LD_VAR 0 6
9347: PPUSH
9348: CALL_OW 264
9352: PUSH
9353: LD_INT 5
9355: PUSH
9356: LD_INT 27
9358: PUSH
9359: LD_INT 44
9361: PUSH
9362: EMPTY
9363: LIST
9364: LIST
9365: LIST
9366: IN
9367: IFFALSE 9388
// points := [ 14 , 50 , 16 ] ;
9369: LD_ADDR_VAR 0 9
9373: PUSH
9374: LD_INT 14
9376: PUSH
9377: LD_INT 50
9379: PUSH
9380: LD_INT 16
9382: PUSH
9383: EMPTY
9384: LIST
9385: LIST
9386: LIST
9387: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
9388: LD_VAR 0 6
9392: PPUSH
9393: CALL_OW 264
9397: PUSH
9398: LD_INT 6
9400: PUSH
9401: LD_INT 46
9403: PUSH
9404: EMPTY
9405: LIST
9406: LIST
9407: IN
9408: IFFALSE 9429
// points := [ 32 , 120 , 70 ] ;
9410: LD_ADDR_VAR 0 9
9414: PUSH
9415: LD_INT 32
9417: PUSH
9418: LD_INT 120
9420: PUSH
9421: LD_INT 70
9423: PUSH
9424: EMPTY
9425: LIST
9426: LIST
9427: LIST
9428: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
9429: LD_VAR 0 6
9433: PPUSH
9434: CALL_OW 264
9438: PUSH
9439: LD_INT 7
9441: PUSH
9442: LD_INT 28
9444: PUSH
9445: LD_INT 45
9447: PUSH
9448: LD_INT 92
9450: PUSH
9451: EMPTY
9452: LIST
9453: LIST
9454: LIST
9455: LIST
9456: IN
9457: IFFALSE 9478
// points := [ 35 , 20 , 45 ] ;
9459: LD_ADDR_VAR 0 9
9463: PUSH
9464: LD_INT 35
9466: PUSH
9467: LD_INT 20
9469: PUSH
9470: LD_INT 45
9472: PUSH
9473: EMPTY
9474: LIST
9475: LIST
9476: LIST
9477: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
9478: LD_VAR 0 6
9482: PPUSH
9483: CALL_OW 264
9487: PUSH
9488: LD_INT 47
9490: PUSH
9491: EMPTY
9492: LIST
9493: IN
9494: IFFALSE 9515
// points := [ 67 , 45 , 75 ] ;
9496: LD_ADDR_VAR 0 9
9500: PUSH
9501: LD_INT 67
9503: PUSH
9504: LD_INT 45
9506: PUSH
9507: LD_INT 75
9509: PUSH
9510: EMPTY
9511: LIST
9512: LIST
9513: LIST
9514: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
9515: LD_VAR 0 6
9519: PPUSH
9520: CALL_OW 264
9524: PUSH
9525: LD_INT 26
9527: PUSH
9528: EMPTY
9529: LIST
9530: IN
9531: IFFALSE 9552
// points := [ 120 , 30 , 80 ] ;
9533: LD_ADDR_VAR 0 9
9537: PUSH
9538: LD_INT 120
9540: PUSH
9541: LD_INT 30
9543: PUSH
9544: LD_INT 80
9546: PUSH
9547: EMPTY
9548: LIST
9549: LIST
9550: LIST
9551: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
9552: LD_VAR 0 6
9556: PPUSH
9557: CALL_OW 264
9561: PUSH
9562: LD_INT 22
9564: PUSH
9565: EMPTY
9566: LIST
9567: IN
9568: IFFALSE 9589
// points := [ 40 , 1 , 1 ] ;
9570: LD_ADDR_VAR 0 9
9574: PUSH
9575: LD_INT 40
9577: PUSH
9578: LD_INT 1
9580: PUSH
9581: LD_INT 1
9583: PUSH
9584: EMPTY
9585: LIST
9586: LIST
9587: LIST
9588: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
9589: LD_VAR 0 6
9593: PPUSH
9594: CALL_OW 264
9598: PUSH
9599: LD_INT 29
9601: PUSH
9602: EMPTY
9603: LIST
9604: IN
9605: IFFALSE 9626
// points := [ 70 , 200 , 400 ] ;
9607: LD_ADDR_VAR 0 9
9611: PUSH
9612: LD_INT 70
9614: PUSH
9615: LD_INT 200
9617: PUSH
9618: LD_INT 400
9620: PUSH
9621: EMPTY
9622: LIST
9623: LIST
9624: LIST
9625: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
9626: LD_VAR 0 6
9630: PPUSH
9631: CALL_OW 264
9635: PUSH
9636: LD_INT 14
9638: PUSH
9639: LD_INT 53
9641: PUSH
9642: EMPTY
9643: LIST
9644: LIST
9645: IN
9646: IFFALSE 9667
// points := [ 40 , 10 , 20 ] ;
9648: LD_ADDR_VAR 0 9
9652: PUSH
9653: LD_INT 40
9655: PUSH
9656: LD_INT 10
9658: PUSH
9659: LD_INT 20
9661: PUSH
9662: EMPTY
9663: LIST
9664: LIST
9665: LIST
9666: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
9667: LD_VAR 0 6
9671: PPUSH
9672: CALL_OW 264
9676: PUSH
9677: LD_INT 9
9679: PUSH
9680: EMPTY
9681: LIST
9682: IN
9683: IFFALSE 9704
// points := [ 5 , 70 , 20 ] ;
9685: LD_ADDR_VAR 0 9
9689: PUSH
9690: LD_INT 5
9692: PUSH
9693: LD_INT 70
9695: PUSH
9696: LD_INT 20
9698: PUSH
9699: EMPTY
9700: LIST
9701: LIST
9702: LIST
9703: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
9704: LD_VAR 0 6
9708: PPUSH
9709: CALL_OW 264
9713: PUSH
9714: LD_INT 10
9716: PUSH
9717: EMPTY
9718: LIST
9719: IN
9720: IFFALSE 9741
// points := [ 35 , 110 , 70 ] ;
9722: LD_ADDR_VAR 0 9
9726: PUSH
9727: LD_INT 35
9729: PUSH
9730: LD_INT 110
9732: PUSH
9733: LD_INT 70
9735: PUSH
9736: EMPTY
9737: LIST
9738: LIST
9739: LIST
9740: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
9741: LD_VAR 0 6
9745: PPUSH
9746: CALL_OW 265
9750: PUSH
9751: LD_INT 25
9753: EQUAL
9754: IFFALSE 9775
// points := [ 80 , 65 , 100 ] ;
9756: LD_ADDR_VAR 0 9
9760: PUSH
9761: LD_INT 80
9763: PUSH
9764: LD_INT 65
9766: PUSH
9767: LD_INT 100
9769: PUSH
9770: EMPTY
9771: LIST
9772: LIST
9773: LIST
9774: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
9775: LD_VAR 0 6
9779: PPUSH
9780: CALL_OW 263
9784: PUSH
9785: LD_INT 1
9787: EQUAL
9788: IFFALSE 9823
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
9790: LD_ADDR_VAR 0 10
9794: PUSH
9795: LD_VAR 0 10
9799: PUSH
9800: LD_VAR 0 6
9804: PPUSH
9805: CALL_OW 311
9809: PPUSH
9810: LD_INT 3
9812: PPUSH
9813: CALL_OW 259
9817: PUSH
9818: LD_INT 4
9820: MUL
9821: MUL
9822: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
9823: LD_VAR 0 6
9827: PPUSH
9828: CALL_OW 263
9832: PUSH
9833: LD_INT 2
9835: EQUAL
9836: IFFALSE 9887
// begin j := IsControledBy ( i ) ;
9838: LD_ADDR_VAR 0 7
9842: PUSH
9843: LD_VAR 0 6
9847: PPUSH
9848: CALL_OW 312
9852: ST_TO_ADDR
// if j then
9853: LD_VAR 0 7
9857: IFFALSE 9887
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
9859: LD_ADDR_VAR 0 10
9863: PUSH
9864: LD_VAR 0 10
9868: PUSH
9869: LD_VAR 0 7
9873: PPUSH
9874: LD_INT 3
9876: PPUSH
9877: CALL_OW 259
9881: PUSH
9882: LD_INT 3
9884: MUL
9885: MUL
9886: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
9887: LD_VAR 0 6
9891: PPUSH
9892: CALL_OW 264
9896: PUSH
9897: LD_INT 5
9899: PUSH
9900: LD_INT 6
9902: PUSH
9903: LD_INT 46
9905: PUSH
9906: LD_INT 44
9908: PUSH
9909: LD_INT 47
9911: PUSH
9912: LD_INT 45
9914: PUSH
9915: LD_INT 28
9917: PUSH
9918: LD_INT 7
9920: PUSH
9921: LD_INT 27
9923: PUSH
9924: LD_INT 29
9926: PUSH
9927: EMPTY
9928: LIST
9929: LIST
9930: LIST
9931: LIST
9932: LIST
9933: LIST
9934: LIST
9935: LIST
9936: LIST
9937: LIST
9938: IN
9939: PUSH
9940: LD_VAR 0 1
9944: PPUSH
9945: LD_INT 52
9947: PPUSH
9948: CALL_OW 321
9952: PUSH
9953: LD_INT 2
9955: EQUAL
9956: AND
9957: IFFALSE 9974
// bpoints := bpoints * 1.2 ;
9959: LD_ADDR_VAR 0 10
9963: PUSH
9964: LD_VAR 0 10
9968: PUSH
9969: LD_REAL  1.20000000000000E+0000
9972: MUL
9973: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
9974: LD_VAR 0 6
9978: PPUSH
9979: CALL_OW 264
9983: PUSH
9984: LD_INT 6
9986: PUSH
9987: LD_INT 46
9989: PUSH
9990: LD_INT 47
9992: PUSH
9993: EMPTY
9994: LIST
9995: LIST
9996: LIST
9997: IN
9998: IFFALSE 10015
// bpoints := bpoints * 1.2 ;
10000: LD_ADDR_VAR 0 10
10004: PUSH
10005: LD_VAR 0 10
10009: PUSH
10010: LD_REAL  1.20000000000000E+0000
10013: MUL
10014: ST_TO_ADDR
// end ; unit_building :
10015: GO 10029
10017: LD_INT 3
10019: DOUBLE
10020: EQUAL
10021: IFTRUE 10025
10023: GO 10028
10025: POP
// ; end ;
10026: GO 10029
10028: POP
// for j = 1 to 3 do
10029: LD_ADDR_VAR 0 7
10033: PUSH
10034: DOUBLE
10035: LD_INT 1
10037: DEC
10038: ST_TO_ADDR
10039: LD_INT 3
10041: PUSH
10042: FOR_TO
10043: IFFALSE 10096
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
10045: LD_ADDR_VAR 0 5
10049: PUSH
10050: LD_VAR 0 5
10054: PPUSH
10055: LD_VAR 0 7
10059: PPUSH
10060: LD_VAR 0 5
10064: PUSH
10065: LD_VAR 0 7
10069: ARRAY
10070: PUSH
10071: LD_VAR 0 9
10075: PUSH
10076: LD_VAR 0 7
10080: ARRAY
10081: PUSH
10082: LD_VAR 0 10
10086: MUL
10087: PLUS
10088: PPUSH
10089: CALL_OW 1
10093: ST_TO_ADDR
10094: GO 10042
10096: POP
10097: POP
// end ;
10098: GO 8577
10100: POP
10101: POP
// result := Replace ( result , 4 , tmp ) ;
10102: LD_ADDR_VAR 0 5
10106: PUSH
10107: LD_VAR 0 5
10111: PPUSH
10112: LD_INT 4
10114: PPUSH
10115: LD_VAR 0 8
10119: PPUSH
10120: CALL_OW 1
10124: ST_TO_ADDR
// end ;
10125: LD_VAR 0 5
10129: RET
// export function DangerAtRange ( unit , range ) ; begin
10130: LD_INT 0
10132: PPUSH
// if not unit then
10133: LD_VAR 0 1
10137: NOT
10138: IFFALSE 10142
// exit ;
10140: GO 10187
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
10142: LD_ADDR_VAR 0 3
10146: PUSH
10147: LD_VAR 0 1
10151: PPUSH
10152: CALL_OW 255
10156: PPUSH
10157: LD_VAR 0 1
10161: PPUSH
10162: CALL_OW 250
10166: PPUSH
10167: LD_VAR 0 1
10171: PPUSH
10172: CALL_OW 251
10176: PPUSH
10177: LD_VAR 0 2
10181: PPUSH
10182: CALL 8429 0 4
10186: ST_TO_ADDR
// end ;
10187: LD_VAR 0 3
10191: RET
// export function DangerInArea ( side , area ) ; begin
10192: LD_INT 0
10194: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
10195: LD_ADDR_VAR 0 3
10199: PUSH
10200: LD_VAR 0 2
10204: PPUSH
10205: LD_INT 81
10207: PUSH
10208: LD_VAR 0 1
10212: PUSH
10213: EMPTY
10214: LIST
10215: LIST
10216: PPUSH
10217: CALL_OW 70
10221: ST_TO_ADDR
// end ;
10222: LD_VAR 0 3
10226: RET
// export function IsExtension ( b ) ; begin
10227: LD_INT 0
10229: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
10230: LD_ADDR_VAR 0 2
10234: PUSH
10235: LD_VAR 0 1
10239: PUSH
10240: LD_INT 23
10242: PUSH
10243: LD_INT 20
10245: PUSH
10246: LD_INT 22
10248: PUSH
10249: LD_INT 17
10251: PUSH
10252: LD_INT 24
10254: PUSH
10255: LD_INT 21
10257: PUSH
10258: LD_INT 19
10260: PUSH
10261: LD_INT 16
10263: PUSH
10264: LD_INT 25
10266: PUSH
10267: LD_INT 18
10269: PUSH
10270: EMPTY
10271: LIST
10272: LIST
10273: LIST
10274: LIST
10275: LIST
10276: LIST
10277: LIST
10278: LIST
10279: LIST
10280: LIST
10281: IN
10282: ST_TO_ADDR
// end ;
10283: LD_VAR 0 2
10287: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
10288: LD_INT 0
10290: PPUSH
10291: PPUSH
10292: PPUSH
// result := [ ] ;
10293: LD_ADDR_VAR 0 4
10297: PUSH
10298: EMPTY
10299: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
10300: LD_ADDR_VAR 0 5
10304: PUSH
10305: LD_VAR 0 2
10309: PPUSH
10310: LD_INT 21
10312: PUSH
10313: LD_INT 3
10315: PUSH
10316: EMPTY
10317: LIST
10318: LIST
10319: PPUSH
10320: CALL_OW 70
10324: ST_TO_ADDR
// if not tmp then
10325: LD_VAR 0 5
10329: NOT
10330: IFFALSE 10334
// exit ;
10332: GO 10398
// if checkLink then
10334: LD_VAR 0 3
10338: IFFALSE 10388
// begin for i in tmp do
10340: LD_ADDR_VAR 0 6
10344: PUSH
10345: LD_VAR 0 5
10349: PUSH
10350: FOR_IN
10351: IFFALSE 10386
// if GetBase ( i ) <> base then
10353: LD_VAR 0 6
10357: PPUSH
10358: CALL_OW 274
10362: PUSH
10363: LD_VAR 0 1
10367: NONEQUAL
10368: IFFALSE 10384
// ComLinkToBase ( base , i ) ;
10370: LD_VAR 0 1
10374: PPUSH
10375: LD_VAR 0 6
10379: PPUSH
10380: CALL_OW 169
10384: GO 10350
10386: POP
10387: POP
// end ; result := tmp ;
10388: LD_ADDR_VAR 0 4
10392: PUSH
10393: LD_VAR 0 5
10397: ST_TO_ADDR
// end ;
10398: LD_VAR 0 4
10402: RET
// export function ComComplete ( units , b ) ; var i ; begin
10403: LD_INT 0
10405: PPUSH
10406: PPUSH
// if not units then
10407: LD_VAR 0 1
10411: NOT
10412: IFFALSE 10416
// exit ;
10414: GO 10506
// for i in units do
10416: LD_ADDR_VAR 0 4
10420: PUSH
10421: LD_VAR 0 1
10425: PUSH
10426: FOR_IN
10427: IFFALSE 10504
// if BuildingStatus ( b ) = bs_build then
10429: LD_VAR 0 2
10433: PPUSH
10434: CALL_OW 461
10438: PUSH
10439: LD_INT 1
10441: EQUAL
10442: IFFALSE 10502
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
10444: LD_VAR 0 4
10448: PPUSH
10449: LD_STRING h
10451: PUSH
10452: LD_VAR 0 2
10456: PPUSH
10457: CALL_OW 250
10461: PUSH
10462: LD_VAR 0 2
10466: PPUSH
10467: CALL_OW 251
10471: PUSH
10472: LD_VAR 0 2
10476: PUSH
10477: LD_INT 0
10479: PUSH
10480: LD_INT 0
10482: PUSH
10483: LD_INT 0
10485: PUSH
10486: EMPTY
10487: LIST
10488: LIST
10489: LIST
10490: LIST
10491: LIST
10492: LIST
10493: LIST
10494: PUSH
10495: EMPTY
10496: LIST
10497: PPUSH
10498: CALL_OW 446
10502: GO 10426
10504: POP
10505: POP
// end ;
10506: LD_VAR 0 3
10510: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
10511: LD_INT 0
10513: PPUSH
10514: PPUSH
10515: PPUSH
10516: PPUSH
10517: PPUSH
10518: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
10519: LD_VAR 0 1
10523: NOT
10524: PUSH
10525: LD_VAR 0 1
10529: PPUSH
10530: CALL_OW 263
10534: PUSH
10535: LD_INT 2
10537: NONEQUAL
10538: OR
10539: IFFALSE 10543
// exit ;
10541: GO 10859
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
10543: LD_ADDR_VAR 0 6
10547: PUSH
10548: LD_INT 22
10550: PUSH
10551: LD_VAR 0 1
10555: PPUSH
10556: CALL_OW 255
10560: PUSH
10561: EMPTY
10562: LIST
10563: LIST
10564: PUSH
10565: LD_INT 2
10567: PUSH
10568: LD_INT 30
10570: PUSH
10571: LD_INT 36
10573: PUSH
10574: EMPTY
10575: LIST
10576: LIST
10577: PUSH
10578: LD_INT 34
10580: PUSH
10581: LD_INT 31
10583: PUSH
10584: EMPTY
10585: LIST
10586: LIST
10587: PUSH
10588: EMPTY
10589: LIST
10590: LIST
10591: LIST
10592: PUSH
10593: EMPTY
10594: LIST
10595: LIST
10596: PPUSH
10597: CALL_OW 69
10601: ST_TO_ADDR
// if not tmp then
10602: LD_VAR 0 6
10606: NOT
10607: IFFALSE 10611
// exit ;
10609: GO 10859
// result := [ ] ;
10611: LD_ADDR_VAR 0 2
10615: PUSH
10616: EMPTY
10617: ST_TO_ADDR
// for i in tmp do
10618: LD_ADDR_VAR 0 3
10622: PUSH
10623: LD_VAR 0 6
10627: PUSH
10628: FOR_IN
10629: IFFALSE 10700
// begin t := UnitsInside ( i ) ;
10631: LD_ADDR_VAR 0 4
10635: PUSH
10636: LD_VAR 0 3
10640: PPUSH
10641: CALL_OW 313
10645: ST_TO_ADDR
// if t then
10646: LD_VAR 0 4
10650: IFFALSE 10698
// for j in t do
10652: LD_ADDR_VAR 0 7
10656: PUSH
10657: LD_VAR 0 4
10661: PUSH
10662: FOR_IN
10663: IFFALSE 10696
// result := Replace ( result , result + 1 , j ) ;
10665: LD_ADDR_VAR 0 2
10669: PUSH
10670: LD_VAR 0 2
10674: PPUSH
10675: LD_VAR 0 2
10679: PUSH
10680: LD_INT 1
10682: PLUS
10683: PPUSH
10684: LD_VAR 0 7
10688: PPUSH
10689: CALL_OW 1
10693: ST_TO_ADDR
10694: GO 10662
10696: POP
10697: POP
// end ;
10698: GO 10628
10700: POP
10701: POP
// if not result then
10702: LD_VAR 0 2
10706: NOT
10707: IFFALSE 10711
// exit ;
10709: GO 10859
// mech := result [ 1 ] ;
10711: LD_ADDR_VAR 0 5
10715: PUSH
10716: LD_VAR 0 2
10720: PUSH
10721: LD_INT 1
10723: ARRAY
10724: ST_TO_ADDR
// if result > 1 then
10725: LD_VAR 0 2
10729: PUSH
10730: LD_INT 1
10732: GREATER
10733: IFFALSE 10845
// begin for i = 2 to result do
10735: LD_ADDR_VAR 0 3
10739: PUSH
10740: DOUBLE
10741: LD_INT 2
10743: DEC
10744: ST_TO_ADDR
10745: LD_VAR 0 2
10749: PUSH
10750: FOR_TO
10751: IFFALSE 10843
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
10753: LD_ADDR_VAR 0 4
10757: PUSH
10758: LD_VAR 0 2
10762: PUSH
10763: LD_VAR 0 3
10767: ARRAY
10768: PPUSH
10769: LD_INT 3
10771: PPUSH
10772: CALL_OW 259
10776: PUSH
10777: LD_VAR 0 2
10781: PUSH
10782: LD_VAR 0 3
10786: ARRAY
10787: PPUSH
10788: CALL_OW 432
10792: MINUS
10793: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
10794: LD_VAR 0 4
10798: PUSH
10799: LD_VAR 0 5
10803: PPUSH
10804: LD_INT 3
10806: PPUSH
10807: CALL_OW 259
10811: PUSH
10812: LD_VAR 0 5
10816: PPUSH
10817: CALL_OW 432
10821: MINUS
10822: GREATEREQUAL
10823: IFFALSE 10841
// mech := result [ i ] ;
10825: LD_ADDR_VAR 0 5
10829: PUSH
10830: LD_VAR 0 2
10834: PUSH
10835: LD_VAR 0 3
10839: ARRAY
10840: ST_TO_ADDR
// end ;
10841: GO 10750
10843: POP
10844: POP
// end ; ComLinkTo ( vehicle , mech ) ;
10845: LD_VAR 0 1
10849: PPUSH
10850: LD_VAR 0 5
10854: PPUSH
10855: CALL_OW 135
// end ;
10859: LD_VAR 0 2
10863: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
10864: LD_INT 0
10866: PPUSH
10867: PPUSH
10868: PPUSH
10869: PPUSH
10870: PPUSH
10871: PPUSH
10872: PPUSH
10873: PPUSH
10874: PPUSH
10875: PPUSH
10876: PPUSH
10877: PPUSH
10878: PPUSH
// result := [ ] ;
10879: LD_ADDR_VAR 0 7
10883: PUSH
10884: EMPTY
10885: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
10886: LD_VAR 0 1
10890: PPUSH
10891: CALL_OW 266
10895: PUSH
10896: LD_INT 0
10898: PUSH
10899: LD_INT 1
10901: PUSH
10902: EMPTY
10903: LIST
10904: LIST
10905: IN
10906: NOT
10907: IFFALSE 10911
// exit ;
10909: GO 12545
// if name then
10911: LD_VAR 0 3
10915: IFFALSE 10931
// SetBName ( base_dep , name ) ;
10917: LD_VAR 0 1
10921: PPUSH
10922: LD_VAR 0 3
10926: PPUSH
10927: CALL_OW 500
// base := GetBase ( base_dep ) ;
10931: LD_ADDR_VAR 0 15
10935: PUSH
10936: LD_VAR 0 1
10940: PPUSH
10941: CALL_OW 274
10945: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
10946: LD_ADDR_VAR 0 16
10950: PUSH
10951: LD_VAR 0 1
10955: PPUSH
10956: CALL_OW 255
10960: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
10961: LD_ADDR_VAR 0 17
10965: PUSH
10966: LD_VAR 0 1
10970: PPUSH
10971: CALL_OW 248
10975: ST_TO_ADDR
// if sources then
10976: LD_VAR 0 5
10980: IFFALSE 11027
// for i = 1 to 3 do
10982: LD_ADDR_VAR 0 8
10986: PUSH
10987: DOUBLE
10988: LD_INT 1
10990: DEC
10991: ST_TO_ADDR
10992: LD_INT 3
10994: PUSH
10995: FOR_TO
10996: IFFALSE 11025
// AddResourceType ( base , i , sources [ i ] ) ;
10998: LD_VAR 0 15
11002: PPUSH
11003: LD_VAR 0 8
11007: PPUSH
11008: LD_VAR 0 5
11012: PUSH
11013: LD_VAR 0 8
11017: ARRAY
11018: PPUSH
11019: CALL_OW 276
11023: GO 10995
11025: POP
11026: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
11027: LD_ADDR_VAR 0 18
11031: PUSH
11032: LD_VAR 0 15
11036: PPUSH
11037: LD_VAR 0 2
11041: PPUSH
11042: LD_INT 1
11044: PPUSH
11045: CALL 10288 0 3
11049: ST_TO_ADDR
// InitHc ;
11050: CALL_OW 19
// InitUc ;
11054: CALL_OW 18
// uc_side := side ;
11058: LD_ADDR_OWVAR 20
11062: PUSH
11063: LD_VAR 0 16
11067: ST_TO_ADDR
// uc_nation := nation ;
11068: LD_ADDR_OWVAR 21
11072: PUSH
11073: LD_VAR 0 17
11077: ST_TO_ADDR
// if buildings then
11078: LD_VAR 0 18
11082: IFFALSE 12404
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
11084: LD_ADDR_VAR 0 19
11088: PUSH
11089: LD_VAR 0 18
11093: PPUSH
11094: LD_INT 2
11096: PUSH
11097: LD_INT 30
11099: PUSH
11100: LD_INT 29
11102: PUSH
11103: EMPTY
11104: LIST
11105: LIST
11106: PUSH
11107: LD_INT 30
11109: PUSH
11110: LD_INT 30
11112: PUSH
11113: EMPTY
11114: LIST
11115: LIST
11116: PUSH
11117: EMPTY
11118: LIST
11119: LIST
11120: LIST
11121: PPUSH
11122: CALL_OW 72
11126: ST_TO_ADDR
// if tmp then
11127: LD_VAR 0 19
11131: IFFALSE 11179
// for i in tmp do
11133: LD_ADDR_VAR 0 8
11137: PUSH
11138: LD_VAR 0 19
11142: PUSH
11143: FOR_IN
11144: IFFALSE 11177
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
11146: LD_VAR 0 8
11150: PPUSH
11151: CALL_OW 250
11155: PPUSH
11156: LD_VAR 0 8
11160: PPUSH
11161: CALL_OW 251
11165: PPUSH
11166: LD_VAR 0 16
11170: PPUSH
11171: CALL_OW 441
11175: GO 11143
11177: POP
11178: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
11179: LD_VAR 0 18
11183: PPUSH
11184: LD_INT 2
11186: PUSH
11187: LD_INT 30
11189: PUSH
11190: LD_INT 32
11192: PUSH
11193: EMPTY
11194: LIST
11195: LIST
11196: PUSH
11197: LD_INT 30
11199: PUSH
11200: LD_INT 33
11202: PUSH
11203: EMPTY
11204: LIST
11205: LIST
11206: PUSH
11207: EMPTY
11208: LIST
11209: LIST
11210: LIST
11211: PPUSH
11212: CALL_OW 72
11216: IFFALSE 11304
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
11218: LD_ADDR_VAR 0 8
11222: PUSH
11223: LD_VAR 0 18
11227: PPUSH
11228: LD_INT 2
11230: PUSH
11231: LD_INT 30
11233: PUSH
11234: LD_INT 32
11236: PUSH
11237: EMPTY
11238: LIST
11239: LIST
11240: PUSH
11241: LD_INT 30
11243: PUSH
11244: LD_INT 33
11246: PUSH
11247: EMPTY
11248: LIST
11249: LIST
11250: PUSH
11251: EMPTY
11252: LIST
11253: LIST
11254: LIST
11255: PPUSH
11256: CALL_OW 72
11260: PUSH
11261: FOR_IN
11262: IFFALSE 11302
// begin if not GetBWeapon ( i ) then
11264: LD_VAR 0 8
11268: PPUSH
11269: CALL_OW 269
11273: NOT
11274: IFFALSE 11300
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
11276: LD_VAR 0 8
11280: PPUSH
11281: LD_VAR 0 8
11285: PPUSH
11286: LD_VAR 0 2
11290: PPUSH
11291: CALL 12550 0 2
11295: PPUSH
11296: CALL_OW 431
// end ;
11300: GO 11261
11302: POP
11303: POP
// end ; for i = 1 to personel do
11304: LD_ADDR_VAR 0 8
11308: PUSH
11309: DOUBLE
11310: LD_INT 1
11312: DEC
11313: ST_TO_ADDR
11314: LD_VAR 0 6
11318: PUSH
11319: FOR_TO
11320: IFFALSE 12384
// begin if i > 4 then
11322: LD_VAR 0 8
11326: PUSH
11327: LD_INT 4
11329: GREATER
11330: IFFALSE 11334
// break ;
11332: GO 12384
// case i of 1 :
11334: LD_VAR 0 8
11338: PUSH
11339: LD_INT 1
11341: DOUBLE
11342: EQUAL
11343: IFTRUE 11347
11345: GO 11427
11347: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
11348: LD_ADDR_VAR 0 12
11352: PUSH
11353: LD_VAR 0 18
11357: PPUSH
11358: LD_INT 22
11360: PUSH
11361: LD_VAR 0 16
11365: PUSH
11366: EMPTY
11367: LIST
11368: LIST
11369: PUSH
11370: LD_INT 58
11372: PUSH
11373: EMPTY
11374: LIST
11375: PUSH
11376: LD_INT 2
11378: PUSH
11379: LD_INT 30
11381: PUSH
11382: LD_INT 32
11384: PUSH
11385: EMPTY
11386: LIST
11387: LIST
11388: PUSH
11389: LD_INT 30
11391: PUSH
11392: LD_INT 4
11394: PUSH
11395: EMPTY
11396: LIST
11397: LIST
11398: PUSH
11399: LD_INT 30
11401: PUSH
11402: LD_INT 5
11404: PUSH
11405: EMPTY
11406: LIST
11407: LIST
11408: PUSH
11409: EMPTY
11410: LIST
11411: LIST
11412: LIST
11413: LIST
11414: PUSH
11415: EMPTY
11416: LIST
11417: LIST
11418: LIST
11419: PPUSH
11420: CALL_OW 72
11424: ST_TO_ADDR
11425: GO 11649
11427: LD_INT 2
11429: DOUBLE
11430: EQUAL
11431: IFTRUE 11435
11433: GO 11497
11435: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
11436: LD_ADDR_VAR 0 12
11440: PUSH
11441: LD_VAR 0 18
11445: PPUSH
11446: LD_INT 22
11448: PUSH
11449: LD_VAR 0 16
11453: PUSH
11454: EMPTY
11455: LIST
11456: LIST
11457: PUSH
11458: LD_INT 2
11460: PUSH
11461: LD_INT 30
11463: PUSH
11464: LD_INT 0
11466: PUSH
11467: EMPTY
11468: LIST
11469: LIST
11470: PUSH
11471: LD_INT 30
11473: PUSH
11474: LD_INT 1
11476: PUSH
11477: EMPTY
11478: LIST
11479: LIST
11480: PUSH
11481: EMPTY
11482: LIST
11483: LIST
11484: LIST
11485: PUSH
11486: EMPTY
11487: LIST
11488: LIST
11489: PPUSH
11490: CALL_OW 72
11494: ST_TO_ADDR
11495: GO 11649
11497: LD_INT 3
11499: DOUBLE
11500: EQUAL
11501: IFTRUE 11505
11503: GO 11567
11505: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
11506: LD_ADDR_VAR 0 12
11510: PUSH
11511: LD_VAR 0 18
11515: PPUSH
11516: LD_INT 22
11518: PUSH
11519: LD_VAR 0 16
11523: PUSH
11524: EMPTY
11525: LIST
11526: LIST
11527: PUSH
11528: LD_INT 2
11530: PUSH
11531: LD_INT 30
11533: PUSH
11534: LD_INT 2
11536: PUSH
11537: EMPTY
11538: LIST
11539: LIST
11540: PUSH
11541: LD_INT 30
11543: PUSH
11544: LD_INT 3
11546: PUSH
11547: EMPTY
11548: LIST
11549: LIST
11550: PUSH
11551: EMPTY
11552: LIST
11553: LIST
11554: LIST
11555: PUSH
11556: EMPTY
11557: LIST
11558: LIST
11559: PPUSH
11560: CALL_OW 72
11564: ST_TO_ADDR
11565: GO 11649
11567: LD_INT 4
11569: DOUBLE
11570: EQUAL
11571: IFTRUE 11575
11573: GO 11648
11575: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
11576: LD_ADDR_VAR 0 12
11580: PUSH
11581: LD_VAR 0 18
11585: PPUSH
11586: LD_INT 22
11588: PUSH
11589: LD_VAR 0 16
11593: PUSH
11594: EMPTY
11595: LIST
11596: LIST
11597: PUSH
11598: LD_INT 2
11600: PUSH
11601: LD_INT 30
11603: PUSH
11604: LD_INT 6
11606: PUSH
11607: EMPTY
11608: LIST
11609: LIST
11610: PUSH
11611: LD_INT 30
11613: PUSH
11614: LD_INT 7
11616: PUSH
11617: EMPTY
11618: LIST
11619: LIST
11620: PUSH
11621: LD_INT 30
11623: PUSH
11624: LD_INT 8
11626: PUSH
11627: EMPTY
11628: LIST
11629: LIST
11630: PUSH
11631: EMPTY
11632: LIST
11633: LIST
11634: LIST
11635: LIST
11636: PUSH
11637: EMPTY
11638: LIST
11639: LIST
11640: PPUSH
11641: CALL_OW 72
11645: ST_TO_ADDR
11646: GO 11649
11648: POP
// if i = 1 then
11649: LD_VAR 0 8
11653: PUSH
11654: LD_INT 1
11656: EQUAL
11657: IFFALSE 11768
// begin tmp := [ ] ;
11659: LD_ADDR_VAR 0 19
11663: PUSH
11664: EMPTY
11665: ST_TO_ADDR
// for j in f do
11666: LD_ADDR_VAR 0 9
11670: PUSH
11671: LD_VAR 0 12
11675: PUSH
11676: FOR_IN
11677: IFFALSE 11750
// if GetBType ( j ) = b_bunker then
11679: LD_VAR 0 9
11683: PPUSH
11684: CALL_OW 266
11688: PUSH
11689: LD_INT 32
11691: EQUAL
11692: IFFALSE 11719
// tmp := Insert ( tmp , 1 , j ) else
11694: LD_ADDR_VAR 0 19
11698: PUSH
11699: LD_VAR 0 19
11703: PPUSH
11704: LD_INT 1
11706: PPUSH
11707: LD_VAR 0 9
11711: PPUSH
11712: CALL_OW 2
11716: ST_TO_ADDR
11717: GO 11748
// tmp := Insert ( tmp , tmp + 1 , j ) ;
11719: LD_ADDR_VAR 0 19
11723: PUSH
11724: LD_VAR 0 19
11728: PPUSH
11729: LD_VAR 0 19
11733: PUSH
11734: LD_INT 1
11736: PLUS
11737: PPUSH
11738: LD_VAR 0 9
11742: PPUSH
11743: CALL_OW 2
11747: ST_TO_ADDR
11748: GO 11676
11750: POP
11751: POP
// if tmp then
11752: LD_VAR 0 19
11756: IFFALSE 11768
// f := tmp ;
11758: LD_ADDR_VAR 0 12
11762: PUSH
11763: LD_VAR 0 19
11767: ST_TO_ADDR
// end ; x := personel [ i ] ;
11768: LD_ADDR_VAR 0 13
11772: PUSH
11773: LD_VAR 0 6
11777: PUSH
11778: LD_VAR 0 8
11782: ARRAY
11783: ST_TO_ADDR
// if x = - 1 then
11784: LD_VAR 0 13
11788: PUSH
11789: LD_INT 1
11791: NEG
11792: EQUAL
11793: IFFALSE 12002
// begin for j in f do
11795: LD_ADDR_VAR 0 9
11799: PUSH
11800: LD_VAR 0 12
11804: PUSH
11805: FOR_IN
11806: IFFALSE 11998
// repeat InitHc ;
11808: CALL_OW 19
// if GetBType ( j ) = b_barracks then
11812: LD_VAR 0 9
11816: PPUSH
11817: CALL_OW 266
11821: PUSH
11822: LD_INT 5
11824: EQUAL
11825: IFFALSE 11895
// begin if UnitsInside ( j ) < 3 then
11827: LD_VAR 0 9
11831: PPUSH
11832: CALL_OW 313
11836: PUSH
11837: LD_INT 3
11839: LESS
11840: IFFALSE 11876
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
11842: LD_INT 0
11844: PPUSH
11845: LD_INT 5
11847: PUSH
11848: LD_INT 8
11850: PUSH
11851: LD_INT 9
11853: PUSH
11854: EMPTY
11855: LIST
11856: LIST
11857: LIST
11858: PUSH
11859: LD_VAR 0 17
11863: ARRAY
11864: PPUSH
11865: LD_VAR 0 4
11869: PPUSH
11870: CALL_OW 380
11874: GO 11893
// PrepareHuman ( false , i , skill ) ;
11876: LD_INT 0
11878: PPUSH
11879: LD_VAR 0 8
11883: PPUSH
11884: LD_VAR 0 4
11888: PPUSH
11889: CALL_OW 380
// end else
11893: GO 11912
// PrepareHuman ( false , i , skill ) ;
11895: LD_INT 0
11897: PPUSH
11898: LD_VAR 0 8
11902: PPUSH
11903: LD_VAR 0 4
11907: PPUSH
11908: CALL_OW 380
// un := CreateHuman ;
11912: LD_ADDR_VAR 0 14
11916: PUSH
11917: CALL_OW 44
11921: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11922: LD_ADDR_VAR 0 7
11926: PUSH
11927: LD_VAR 0 7
11931: PPUSH
11932: LD_INT 1
11934: PPUSH
11935: LD_VAR 0 14
11939: PPUSH
11940: CALL_OW 2
11944: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
11945: LD_VAR 0 14
11949: PPUSH
11950: LD_VAR 0 9
11954: PPUSH
11955: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
11959: LD_VAR 0 9
11963: PPUSH
11964: CALL_OW 313
11968: PUSH
11969: LD_INT 6
11971: EQUAL
11972: PUSH
11973: LD_VAR 0 9
11977: PPUSH
11978: CALL_OW 266
11982: PUSH
11983: LD_INT 32
11985: PUSH
11986: LD_INT 31
11988: PUSH
11989: EMPTY
11990: LIST
11991: LIST
11992: IN
11993: OR
11994: IFFALSE 11808
11996: GO 11805
11998: POP
11999: POP
// end else
12000: GO 12382
// for j = 1 to x do
12002: LD_ADDR_VAR 0 9
12006: PUSH
12007: DOUBLE
12008: LD_INT 1
12010: DEC
12011: ST_TO_ADDR
12012: LD_VAR 0 13
12016: PUSH
12017: FOR_TO
12018: IFFALSE 12380
// begin InitHc ;
12020: CALL_OW 19
// if not f then
12024: LD_VAR 0 12
12028: NOT
12029: IFFALSE 12118
// begin PrepareHuman ( false , i , skill ) ;
12031: LD_INT 0
12033: PPUSH
12034: LD_VAR 0 8
12038: PPUSH
12039: LD_VAR 0 4
12043: PPUSH
12044: CALL_OW 380
// un := CreateHuman ;
12048: LD_ADDR_VAR 0 14
12052: PUSH
12053: CALL_OW 44
12057: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12058: LD_ADDR_VAR 0 7
12062: PUSH
12063: LD_VAR 0 7
12067: PPUSH
12068: LD_INT 1
12070: PPUSH
12071: LD_VAR 0 14
12075: PPUSH
12076: CALL_OW 2
12080: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
12081: LD_VAR 0 14
12085: PPUSH
12086: LD_VAR 0 1
12090: PPUSH
12091: CALL_OW 250
12095: PPUSH
12096: LD_VAR 0 1
12100: PPUSH
12101: CALL_OW 251
12105: PPUSH
12106: LD_INT 10
12108: PPUSH
12109: LD_INT 0
12111: PPUSH
12112: CALL_OW 50
// continue ;
12116: GO 12017
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
12118: LD_VAR 0 12
12122: PUSH
12123: LD_INT 1
12125: ARRAY
12126: PPUSH
12127: CALL_OW 313
12131: PUSH
12132: LD_VAR 0 12
12136: PUSH
12137: LD_INT 1
12139: ARRAY
12140: PPUSH
12141: CALL_OW 266
12145: PUSH
12146: LD_INT 32
12148: PUSH
12149: LD_INT 31
12151: PUSH
12152: EMPTY
12153: LIST
12154: LIST
12155: IN
12156: AND
12157: PUSH
12158: LD_VAR 0 12
12162: PUSH
12163: LD_INT 1
12165: ARRAY
12166: PPUSH
12167: CALL_OW 313
12171: PUSH
12172: LD_INT 6
12174: EQUAL
12175: OR
12176: IFFALSE 12196
// f := Delete ( f , 1 ) ;
12178: LD_ADDR_VAR 0 12
12182: PUSH
12183: LD_VAR 0 12
12187: PPUSH
12188: LD_INT 1
12190: PPUSH
12191: CALL_OW 3
12195: ST_TO_ADDR
// if not f then
12196: LD_VAR 0 12
12200: NOT
12201: IFFALSE 12219
// begin x := x + 2 ;
12203: LD_ADDR_VAR 0 13
12207: PUSH
12208: LD_VAR 0 13
12212: PUSH
12213: LD_INT 2
12215: PLUS
12216: ST_TO_ADDR
// continue ;
12217: GO 12017
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
12219: LD_VAR 0 12
12223: PUSH
12224: LD_INT 1
12226: ARRAY
12227: PPUSH
12228: CALL_OW 266
12232: PUSH
12233: LD_INT 5
12235: EQUAL
12236: IFFALSE 12310
// begin if UnitsInside ( f [ 1 ] ) < 3 then
12238: LD_VAR 0 12
12242: PUSH
12243: LD_INT 1
12245: ARRAY
12246: PPUSH
12247: CALL_OW 313
12251: PUSH
12252: LD_INT 3
12254: LESS
12255: IFFALSE 12291
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12257: LD_INT 0
12259: PPUSH
12260: LD_INT 5
12262: PUSH
12263: LD_INT 8
12265: PUSH
12266: LD_INT 9
12268: PUSH
12269: EMPTY
12270: LIST
12271: LIST
12272: LIST
12273: PUSH
12274: LD_VAR 0 17
12278: ARRAY
12279: PPUSH
12280: LD_VAR 0 4
12284: PPUSH
12285: CALL_OW 380
12289: GO 12308
// PrepareHuman ( false , i , skill ) ;
12291: LD_INT 0
12293: PPUSH
12294: LD_VAR 0 8
12298: PPUSH
12299: LD_VAR 0 4
12303: PPUSH
12304: CALL_OW 380
// end else
12308: GO 12327
// PrepareHuman ( false , i , skill ) ;
12310: LD_INT 0
12312: PPUSH
12313: LD_VAR 0 8
12317: PPUSH
12318: LD_VAR 0 4
12322: PPUSH
12323: CALL_OW 380
// un := CreateHuman ;
12327: LD_ADDR_VAR 0 14
12331: PUSH
12332: CALL_OW 44
12336: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12337: LD_ADDR_VAR 0 7
12341: PUSH
12342: LD_VAR 0 7
12346: PPUSH
12347: LD_INT 1
12349: PPUSH
12350: LD_VAR 0 14
12354: PPUSH
12355: CALL_OW 2
12359: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
12360: LD_VAR 0 14
12364: PPUSH
12365: LD_VAR 0 12
12369: PUSH
12370: LD_INT 1
12372: ARRAY
12373: PPUSH
12374: CALL_OW 52
// end ;
12378: GO 12017
12380: POP
12381: POP
// end ;
12382: GO 11319
12384: POP
12385: POP
// result := result ^ buildings ;
12386: LD_ADDR_VAR 0 7
12390: PUSH
12391: LD_VAR 0 7
12395: PUSH
12396: LD_VAR 0 18
12400: ADD
12401: ST_TO_ADDR
// end else
12402: GO 12545
// begin for i = 1 to personel do
12404: LD_ADDR_VAR 0 8
12408: PUSH
12409: DOUBLE
12410: LD_INT 1
12412: DEC
12413: ST_TO_ADDR
12414: LD_VAR 0 6
12418: PUSH
12419: FOR_TO
12420: IFFALSE 12543
// begin if i > 4 then
12422: LD_VAR 0 8
12426: PUSH
12427: LD_INT 4
12429: GREATER
12430: IFFALSE 12434
// break ;
12432: GO 12543
// x := personel [ i ] ;
12434: LD_ADDR_VAR 0 13
12438: PUSH
12439: LD_VAR 0 6
12443: PUSH
12444: LD_VAR 0 8
12448: ARRAY
12449: ST_TO_ADDR
// if x = - 1 then
12450: LD_VAR 0 13
12454: PUSH
12455: LD_INT 1
12457: NEG
12458: EQUAL
12459: IFFALSE 12463
// continue ;
12461: GO 12419
// PrepareHuman ( false , i , skill ) ;
12463: LD_INT 0
12465: PPUSH
12466: LD_VAR 0 8
12470: PPUSH
12471: LD_VAR 0 4
12475: PPUSH
12476: CALL_OW 380
// un := CreateHuman ;
12480: LD_ADDR_VAR 0 14
12484: PUSH
12485: CALL_OW 44
12489: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
12490: LD_VAR 0 14
12494: PPUSH
12495: LD_VAR 0 1
12499: PPUSH
12500: CALL_OW 250
12504: PPUSH
12505: LD_VAR 0 1
12509: PPUSH
12510: CALL_OW 251
12514: PPUSH
12515: LD_INT 10
12517: PPUSH
12518: LD_INT 0
12520: PPUSH
12521: CALL_OW 50
// result := result ^ un ;
12525: LD_ADDR_VAR 0 7
12529: PUSH
12530: LD_VAR 0 7
12534: PUSH
12535: LD_VAR 0 14
12539: ADD
12540: ST_TO_ADDR
// end ;
12541: GO 12419
12543: POP
12544: POP
// end ; end ;
12545: LD_VAR 0 7
12549: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
12550: LD_INT 0
12552: PPUSH
12553: PPUSH
12554: PPUSH
12555: PPUSH
12556: PPUSH
12557: PPUSH
12558: PPUSH
12559: PPUSH
12560: PPUSH
12561: PPUSH
12562: PPUSH
12563: PPUSH
12564: PPUSH
12565: PPUSH
12566: PPUSH
12567: PPUSH
// result := false ;
12568: LD_ADDR_VAR 0 3
12572: PUSH
12573: LD_INT 0
12575: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
12576: LD_VAR 0 1
12580: NOT
12581: PUSH
12582: LD_VAR 0 1
12586: PPUSH
12587: CALL_OW 266
12591: PUSH
12592: LD_INT 32
12594: PUSH
12595: LD_INT 33
12597: PUSH
12598: EMPTY
12599: LIST
12600: LIST
12601: IN
12602: NOT
12603: OR
12604: IFFALSE 12608
// exit ;
12606: GO 13717
// nat := GetNation ( tower ) ;
12608: LD_ADDR_VAR 0 12
12612: PUSH
12613: LD_VAR 0 1
12617: PPUSH
12618: CALL_OW 248
12622: ST_TO_ADDR
// side := GetSide ( tower ) ;
12623: LD_ADDR_VAR 0 16
12627: PUSH
12628: LD_VAR 0 1
12632: PPUSH
12633: CALL_OW 255
12637: ST_TO_ADDR
// x := GetX ( tower ) ;
12638: LD_ADDR_VAR 0 10
12642: PUSH
12643: LD_VAR 0 1
12647: PPUSH
12648: CALL_OW 250
12652: ST_TO_ADDR
// y := GetY ( tower ) ;
12653: LD_ADDR_VAR 0 11
12657: PUSH
12658: LD_VAR 0 1
12662: PPUSH
12663: CALL_OW 251
12667: ST_TO_ADDR
// if not x or not y then
12668: LD_VAR 0 10
12672: NOT
12673: PUSH
12674: LD_VAR 0 11
12678: NOT
12679: OR
12680: IFFALSE 12684
// exit ;
12682: GO 13717
// weapon := 0 ;
12684: LD_ADDR_VAR 0 18
12688: PUSH
12689: LD_INT 0
12691: ST_TO_ADDR
// fac_list := [ ] ;
12692: LD_ADDR_VAR 0 17
12696: PUSH
12697: EMPTY
12698: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
12699: LD_ADDR_VAR 0 6
12703: PUSH
12704: LD_VAR 0 1
12708: PPUSH
12709: CALL_OW 274
12713: PPUSH
12714: LD_VAR 0 2
12718: PPUSH
12719: LD_INT 0
12721: PPUSH
12722: CALL 10288 0 3
12726: PPUSH
12727: LD_INT 30
12729: PUSH
12730: LD_INT 3
12732: PUSH
12733: EMPTY
12734: LIST
12735: LIST
12736: PPUSH
12737: CALL_OW 72
12741: ST_TO_ADDR
// if not factories then
12742: LD_VAR 0 6
12746: NOT
12747: IFFALSE 12751
// exit ;
12749: GO 13717
// for i in factories do
12751: LD_ADDR_VAR 0 8
12755: PUSH
12756: LD_VAR 0 6
12760: PUSH
12761: FOR_IN
12762: IFFALSE 12787
// fac_list := fac_list union AvailableWeaponList ( i ) ;
12764: LD_ADDR_VAR 0 17
12768: PUSH
12769: LD_VAR 0 17
12773: PUSH
12774: LD_VAR 0 8
12778: PPUSH
12779: CALL_OW 478
12783: UNION
12784: ST_TO_ADDR
12785: GO 12761
12787: POP
12788: POP
// if not fac_list then
12789: LD_VAR 0 17
12793: NOT
12794: IFFALSE 12798
// exit ;
12796: GO 13717
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
12798: LD_ADDR_VAR 0 5
12802: PUSH
12803: LD_INT 4
12805: PUSH
12806: LD_INT 5
12808: PUSH
12809: LD_INT 9
12811: PUSH
12812: LD_INT 10
12814: PUSH
12815: LD_INT 6
12817: PUSH
12818: LD_INT 7
12820: PUSH
12821: LD_INT 11
12823: PUSH
12824: EMPTY
12825: LIST
12826: LIST
12827: LIST
12828: LIST
12829: LIST
12830: LIST
12831: LIST
12832: PUSH
12833: LD_INT 27
12835: PUSH
12836: LD_INT 28
12838: PUSH
12839: LD_INT 26
12841: PUSH
12842: LD_INT 30
12844: PUSH
12845: EMPTY
12846: LIST
12847: LIST
12848: LIST
12849: LIST
12850: PUSH
12851: LD_INT 43
12853: PUSH
12854: LD_INT 44
12856: PUSH
12857: LD_INT 46
12859: PUSH
12860: LD_INT 45
12862: PUSH
12863: LD_INT 47
12865: PUSH
12866: LD_INT 49
12868: PUSH
12869: EMPTY
12870: LIST
12871: LIST
12872: LIST
12873: LIST
12874: LIST
12875: LIST
12876: PUSH
12877: EMPTY
12878: LIST
12879: LIST
12880: LIST
12881: PUSH
12882: LD_VAR 0 12
12886: ARRAY
12887: ST_TO_ADDR
// list := list isect fac_list ;
12888: LD_ADDR_VAR 0 5
12892: PUSH
12893: LD_VAR 0 5
12897: PUSH
12898: LD_VAR 0 17
12902: ISECT
12903: ST_TO_ADDR
// if not list then
12904: LD_VAR 0 5
12908: NOT
12909: IFFALSE 12913
// exit ;
12911: GO 13717
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
12913: LD_VAR 0 12
12917: PUSH
12918: LD_INT 3
12920: EQUAL
12921: PUSH
12922: LD_INT 49
12924: PUSH
12925: LD_VAR 0 5
12929: IN
12930: AND
12931: PUSH
12932: LD_INT 31
12934: PPUSH
12935: LD_VAR 0 16
12939: PPUSH
12940: CALL_OW 321
12944: PUSH
12945: LD_INT 2
12947: EQUAL
12948: AND
12949: IFFALSE 13009
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
12951: LD_INT 22
12953: PUSH
12954: LD_VAR 0 16
12958: PUSH
12959: EMPTY
12960: LIST
12961: LIST
12962: PUSH
12963: LD_INT 35
12965: PUSH
12966: LD_INT 49
12968: PUSH
12969: EMPTY
12970: LIST
12971: LIST
12972: PUSH
12973: LD_INT 91
12975: PUSH
12976: LD_VAR 0 1
12980: PUSH
12981: LD_INT 10
12983: PUSH
12984: EMPTY
12985: LIST
12986: LIST
12987: LIST
12988: PUSH
12989: EMPTY
12990: LIST
12991: LIST
12992: LIST
12993: PPUSH
12994: CALL_OW 69
12998: NOT
12999: IFFALSE 13009
// weapon := ru_time_lapser ;
13001: LD_ADDR_VAR 0 18
13005: PUSH
13006: LD_INT 49
13008: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
13009: LD_VAR 0 12
13013: PUSH
13014: LD_INT 1
13016: PUSH
13017: LD_INT 2
13019: PUSH
13020: EMPTY
13021: LIST
13022: LIST
13023: IN
13024: PUSH
13025: LD_INT 11
13027: PUSH
13028: LD_VAR 0 5
13032: IN
13033: PUSH
13034: LD_INT 30
13036: PUSH
13037: LD_VAR 0 5
13041: IN
13042: OR
13043: AND
13044: PUSH
13045: LD_INT 6
13047: PPUSH
13048: LD_VAR 0 16
13052: PPUSH
13053: CALL_OW 321
13057: PUSH
13058: LD_INT 2
13060: EQUAL
13061: AND
13062: IFFALSE 13227
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
13064: LD_INT 22
13066: PUSH
13067: LD_VAR 0 16
13071: PUSH
13072: EMPTY
13073: LIST
13074: LIST
13075: PUSH
13076: LD_INT 2
13078: PUSH
13079: LD_INT 35
13081: PUSH
13082: LD_INT 11
13084: PUSH
13085: EMPTY
13086: LIST
13087: LIST
13088: PUSH
13089: LD_INT 35
13091: PUSH
13092: LD_INT 30
13094: PUSH
13095: EMPTY
13096: LIST
13097: LIST
13098: PUSH
13099: EMPTY
13100: LIST
13101: LIST
13102: LIST
13103: PUSH
13104: LD_INT 91
13106: PUSH
13107: LD_VAR 0 1
13111: PUSH
13112: LD_INT 18
13114: PUSH
13115: EMPTY
13116: LIST
13117: LIST
13118: LIST
13119: PUSH
13120: EMPTY
13121: LIST
13122: LIST
13123: LIST
13124: PPUSH
13125: CALL_OW 69
13129: NOT
13130: PUSH
13131: LD_INT 22
13133: PUSH
13134: LD_VAR 0 16
13138: PUSH
13139: EMPTY
13140: LIST
13141: LIST
13142: PUSH
13143: LD_INT 2
13145: PUSH
13146: LD_INT 30
13148: PUSH
13149: LD_INT 32
13151: PUSH
13152: EMPTY
13153: LIST
13154: LIST
13155: PUSH
13156: LD_INT 30
13158: PUSH
13159: LD_INT 33
13161: PUSH
13162: EMPTY
13163: LIST
13164: LIST
13165: PUSH
13166: EMPTY
13167: LIST
13168: LIST
13169: LIST
13170: PUSH
13171: LD_INT 91
13173: PUSH
13174: LD_VAR 0 1
13178: PUSH
13179: LD_INT 12
13181: PUSH
13182: EMPTY
13183: LIST
13184: LIST
13185: LIST
13186: PUSH
13187: EMPTY
13188: LIST
13189: LIST
13190: LIST
13191: PUSH
13192: EMPTY
13193: LIST
13194: PPUSH
13195: CALL_OW 69
13199: PUSH
13200: LD_INT 2
13202: GREATER
13203: AND
13204: IFFALSE 13227
// weapon := [ us_radar , ar_radar ] [ nat ] ;
13206: LD_ADDR_VAR 0 18
13210: PUSH
13211: LD_INT 11
13213: PUSH
13214: LD_INT 30
13216: PUSH
13217: EMPTY
13218: LIST
13219: LIST
13220: PUSH
13221: LD_VAR 0 12
13225: ARRAY
13226: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
13227: LD_VAR 0 18
13231: NOT
13232: PUSH
13233: LD_INT 40
13235: PPUSH
13236: LD_VAR 0 16
13240: PPUSH
13241: CALL_OW 321
13245: PUSH
13246: LD_INT 2
13248: EQUAL
13249: AND
13250: PUSH
13251: LD_INT 7
13253: PUSH
13254: LD_VAR 0 5
13258: IN
13259: PUSH
13260: LD_INT 28
13262: PUSH
13263: LD_VAR 0 5
13267: IN
13268: OR
13269: PUSH
13270: LD_INT 45
13272: PUSH
13273: LD_VAR 0 5
13277: IN
13278: OR
13279: AND
13280: IFFALSE 13534
// begin hex := GetHexInfo ( x , y ) ;
13282: LD_ADDR_VAR 0 4
13286: PUSH
13287: LD_VAR 0 10
13291: PPUSH
13292: LD_VAR 0 11
13296: PPUSH
13297: CALL_OW 546
13301: ST_TO_ADDR
// if hex [ 1 ] then
13302: LD_VAR 0 4
13306: PUSH
13307: LD_INT 1
13309: ARRAY
13310: IFFALSE 13314
// exit ;
13312: GO 13717
// height := hex [ 2 ] ;
13314: LD_ADDR_VAR 0 15
13318: PUSH
13319: LD_VAR 0 4
13323: PUSH
13324: LD_INT 2
13326: ARRAY
13327: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
13328: LD_ADDR_VAR 0 14
13332: PUSH
13333: LD_INT 0
13335: PUSH
13336: LD_INT 2
13338: PUSH
13339: LD_INT 3
13341: PUSH
13342: LD_INT 5
13344: PUSH
13345: EMPTY
13346: LIST
13347: LIST
13348: LIST
13349: LIST
13350: ST_TO_ADDR
// for i in tmp do
13351: LD_ADDR_VAR 0 8
13355: PUSH
13356: LD_VAR 0 14
13360: PUSH
13361: FOR_IN
13362: IFFALSE 13532
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
13364: LD_ADDR_VAR 0 9
13368: PUSH
13369: LD_VAR 0 10
13373: PPUSH
13374: LD_VAR 0 8
13378: PPUSH
13379: LD_INT 5
13381: PPUSH
13382: CALL_OW 272
13386: PUSH
13387: LD_VAR 0 11
13391: PPUSH
13392: LD_VAR 0 8
13396: PPUSH
13397: LD_INT 5
13399: PPUSH
13400: CALL_OW 273
13404: PUSH
13405: EMPTY
13406: LIST
13407: LIST
13408: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
13409: LD_VAR 0 9
13413: PUSH
13414: LD_INT 1
13416: ARRAY
13417: PPUSH
13418: LD_VAR 0 9
13422: PUSH
13423: LD_INT 2
13425: ARRAY
13426: PPUSH
13427: CALL_OW 488
13431: IFFALSE 13530
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
13433: LD_ADDR_VAR 0 4
13437: PUSH
13438: LD_VAR 0 9
13442: PUSH
13443: LD_INT 1
13445: ARRAY
13446: PPUSH
13447: LD_VAR 0 9
13451: PUSH
13452: LD_INT 2
13454: ARRAY
13455: PPUSH
13456: CALL_OW 546
13460: ST_TO_ADDR
// if hex [ 1 ] then
13461: LD_VAR 0 4
13465: PUSH
13466: LD_INT 1
13468: ARRAY
13469: IFFALSE 13473
// continue ;
13471: GO 13361
// h := hex [ 2 ] ;
13473: LD_ADDR_VAR 0 13
13477: PUSH
13478: LD_VAR 0 4
13482: PUSH
13483: LD_INT 2
13485: ARRAY
13486: ST_TO_ADDR
// if h + 7 < height then
13487: LD_VAR 0 13
13491: PUSH
13492: LD_INT 7
13494: PLUS
13495: PUSH
13496: LD_VAR 0 15
13500: LESS
13501: IFFALSE 13530
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
13503: LD_ADDR_VAR 0 18
13507: PUSH
13508: LD_INT 7
13510: PUSH
13511: LD_INT 28
13513: PUSH
13514: LD_INT 45
13516: PUSH
13517: EMPTY
13518: LIST
13519: LIST
13520: LIST
13521: PUSH
13522: LD_VAR 0 12
13526: ARRAY
13527: ST_TO_ADDR
// break ;
13528: GO 13532
// end ; end ; end ;
13530: GO 13361
13532: POP
13533: POP
// end ; if not weapon then
13534: LD_VAR 0 18
13538: NOT
13539: IFFALSE 13599
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
13541: LD_ADDR_VAR 0 5
13545: PUSH
13546: LD_VAR 0 5
13550: PUSH
13551: LD_INT 11
13553: PUSH
13554: LD_INT 30
13556: PUSH
13557: LD_INT 49
13559: PUSH
13560: EMPTY
13561: LIST
13562: LIST
13563: LIST
13564: DIFF
13565: ST_TO_ADDR
// if not list then
13566: LD_VAR 0 5
13570: NOT
13571: IFFALSE 13575
// exit ;
13573: GO 13717
// weapon := list [ rand ( 1 , list ) ] ;
13575: LD_ADDR_VAR 0 18
13579: PUSH
13580: LD_VAR 0 5
13584: PUSH
13585: LD_INT 1
13587: PPUSH
13588: LD_VAR 0 5
13592: PPUSH
13593: CALL_OW 12
13597: ARRAY
13598: ST_TO_ADDR
// end ; if weapon then
13599: LD_VAR 0 18
13603: IFFALSE 13717
// begin tmp := CostOfWeapon ( weapon ) ;
13605: LD_ADDR_VAR 0 14
13609: PUSH
13610: LD_VAR 0 18
13614: PPUSH
13615: CALL_OW 451
13619: ST_TO_ADDR
// j := GetBase ( tower ) ;
13620: LD_ADDR_VAR 0 9
13624: PUSH
13625: LD_VAR 0 1
13629: PPUSH
13630: CALL_OW 274
13634: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
13635: LD_VAR 0 9
13639: PPUSH
13640: LD_INT 1
13642: PPUSH
13643: CALL_OW 275
13647: PUSH
13648: LD_VAR 0 14
13652: PUSH
13653: LD_INT 1
13655: ARRAY
13656: GREATEREQUAL
13657: PUSH
13658: LD_VAR 0 9
13662: PPUSH
13663: LD_INT 2
13665: PPUSH
13666: CALL_OW 275
13670: PUSH
13671: LD_VAR 0 14
13675: PUSH
13676: LD_INT 2
13678: ARRAY
13679: GREATEREQUAL
13680: AND
13681: PUSH
13682: LD_VAR 0 9
13686: PPUSH
13687: LD_INT 3
13689: PPUSH
13690: CALL_OW 275
13694: PUSH
13695: LD_VAR 0 14
13699: PUSH
13700: LD_INT 3
13702: ARRAY
13703: GREATEREQUAL
13704: AND
13705: IFFALSE 13717
// result := weapon ;
13707: LD_ADDR_VAR 0 3
13711: PUSH
13712: LD_VAR 0 18
13716: ST_TO_ADDR
// end ; end ;
13717: LD_VAR 0 3
13721: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
13722: LD_INT 0
13724: PPUSH
13725: PPUSH
// result := true ;
13726: LD_ADDR_VAR 0 3
13730: PUSH
13731: LD_INT 1
13733: ST_TO_ADDR
// if array1 = array2 then
13734: LD_VAR 0 1
13738: PUSH
13739: LD_VAR 0 2
13743: EQUAL
13744: IFFALSE 13804
// begin for i = 1 to array1 do
13746: LD_ADDR_VAR 0 4
13750: PUSH
13751: DOUBLE
13752: LD_INT 1
13754: DEC
13755: ST_TO_ADDR
13756: LD_VAR 0 1
13760: PUSH
13761: FOR_TO
13762: IFFALSE 13800
// if array1 [ i ] <> array2 [ i ] then
13764: LD_VAR 0 1
13768: PUSH
13769: LD_VAR 0 4
13773: ARRAY
13774: PUSH
13775: LD_VAR 0 2
13779: PUSH
13780: LD_VAR 0 4
13784: ARRAY
13785: NONEQUAL
13786: IFFALSE 13798
// begin result := false ;
13788: LD_ADDR_VAR 0 3
13792: PUSH
13793: LD_INT 0
13795: ST_TO_ADDR
// break ;
13796: GO 13800
// end ;
13798: GO 13761
13800: POP
13801: POP
// end else
13802: GO 13812
// result := false ;
13804: LD_ADDR_VAR 0 3
13808: PUSH
13809: LD_INT 0
13811: ST_TO_ADDR
// end ;
13812: LD_VAR 0 3
13816: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
13817: LD_INT 0
13819: PPUSH
13820: PPUSH
// if not array1 or not array2 then
13821: LD_VAR 0 1
13825: NOT
13826: PUSH
13827: LD_VAR 0 2
13831: NOT
13832: OR
13833: IFFALSE 13837
// exit ;
13835: GO 13901
// result := true ;
13837: LD_ADDR_VAR 0 3
13841: PUSH
13842: LD_INT 1
13844: ST_TO_ADDR
// for i = 1 to array1 do
13845: LD_ADDR_VAR 0 4
13849: PUSH
13850: DOUBLE
13851: LD_INT 1
13853: DEC
13854: ST_TO_ADDR
13855: LD_VAR 0 1
13859: PUSH
13860: FOR_TO
13861: IFFALSE 13899
// if array1 [ i ] <> array2 [ i ] then
13863: LD_VAR 0 1
13867: PUSH
13868: LD_VAR 0 4
13872: ARRAY
13873: PUSH
13874: LD_VAR 0 2
13878: PUSH
13879: LD_VAR 0 4
13883: ARRAY
13884: NONEQUAL
13885: IFFALSE 13897
// begin result := false ;
13887: LD_ADDR_VAR 0 3
13891: PUSH
13892: LD_INT 0
13894: ST_TO_ADDR
// break ;
13895: GO 13899
// end ;
13897: GO 13860
13899: POP
13900: POP
// end ;
13901: LD_VAR 0 3
13905: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
13906: LD_INT 0
13908: PPUSH
13909: PPUSH
13910: PPUSH
// pom := GetBase ( fac ) ;
13911: LD_ADDR_VAR 0 5
13915: PUSH
13916: LD_VAR 0 1
13920: PPUSH
13921: CALL_OW 274
13925: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
13926: LD_ADDR_VAR 0 4
13930: PUSH
13931: LD_VAR 0 2
13935: PUSH
13936: LD_INT 1
13938: ARRAY
13939: PPUSH
13940: LD_VAR 0 2
13944: PUSH
13945: LD_INT 2
13947: ARRAY
13948: PPUSH
13949: LD_VAR 0 2
13953: PUSH
13954: LD_INT 3
13956: ARRAY
13957: PPUSH
13958: LD_VAR 0 2
13962: PUSH
13963: LD_INT 4
13965: ARRAY
13966: PPUSH
13967: CALL_OW 449
13971: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13972: LD_ADDR_VAR 0 3
13976: PUSH
13977: LD_VAR 0 5
13981: PPUSH
13982: LD_INT 1
13984: PPUSH
13985: CALL_OW 275
13989: PUSH
13990: LD_VAR 0 4
13994: PUSH
13995: LD_INT 1
13997: ARRAY
13998: GREATEREQUAL
13999: PUSH
14000: LD_VAR 0 5
14004: PPUSH
14005: LD_INT 2
14007: PPUSH
14008: CALL_OW 275
14012: PUSH
14013: LD_VAR 0 4
14017: PUSH
14018: LD_INT 2
14020: ARRAY
14021: GREATEREQUAL
14022: AND
14023: PUSH
14024: LD_VAR 0 5
14028: PPUSH
14029: LD_INT 3
14031: PPUSH
14032: CALL_OW 275
14036: PUSH
14037: LD_VAR 0 4
14041: PUSH
14042: LD_INT 3
14044: ARRAY
14045: GREATEREQUAL
14046: AND
14047: ST_TO_ADDR
// end ;
14048: LD_VAR 0 3
14052: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
14053: LD_INT 0
14055: PPUSH
14056: PPUSH
14057: PPUSH
14058: PPUSH
// pom := GetBase ( building ) ;
14059: LD_ADDR_VAR 0 3
14063: PUSH
14064: LD_VAR 0 1
14068: PPUSH
14069: CALL_OW 274
14073: ST_TO_ADDR
// if not pom then
14074: LD_VAR 0 3
14078: NOT
14079: IFFALSE 14083
// exit ;
14081: GO 14253
// btype := GetBType ( building ) ;
14083: LD_ADDR_VAR 0 5
14087: PUSH
14088: LD_VAR 0 1
14092: PPUSH
14093: CALL_OW 266
14097: ST_TO_ADDR
// if btype = b_armoury then
14098: LD_VAR 0 5
14102: PUSH
14103: LD_INT 4
14105: EQUAL
14106: IFFALSE 14116
// btype := b_barracks ;
14108: LD_ADDR_VAR 0 5
14112: PUSH
14113: LD_INT 5
14115: ST_TO_ADDR
// if btype = b_depot then
14116: LD_VAR 0 5
14120: PUSH
14121: LD_INT 0
14123: EQUAL
14124: IFFALSE 14134
// btype := b_warehouse ;
14126: LD_ADDR_VAR 0 5
14130: PUSH
14131: LD_INT 1
14133: ST_TO_ADDR
// if btype = b_workshop then
14134: LD_VAR 0 5
14138: PUSH
14139: LD_INT 2
14141: EQUAL
14142: IFFALSE 14152
// btype := b_factory ;
14144: LD_ADDR_VAR 0 5
14148: PUSH
14149: LD_INT 3
14151: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
14152: LD_ADDR_VAR 0 4
14156: PUSH
14157: LD_VAR 0 5
14161: PPUSH
14162: LD_VAR 0 1
14166: PPUSH
14167: CALL_OW 248
14171: PPUSH
14172: CALL_OW 450
14176: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14177: LD_ADDR_VAR 0 2
14181: PUSH
14182: LD_VAR 0 3
14186: PPUSH
14187: LD_INT 1
14189: PPUSH
14190: CALL_OW 275
14194: PUSH
14195: LD_VAR 0 4
14199: PUSH
14200: LD_INT 1
14202: ARRAY
14203: GREATEREQUAL
14204: PUSH
14205: LD_VAR 0 3
14209: PPUSH
14210: LD_INT 2
14212: PPUSH
14213: CALL_OW 275
14217: PUSH
14218: LD_VAR 0 4
14222: PUSH
14223: LD_INT 2
14225: ARRAY
14226: GREATEREQUAL
14227: AND
14228: PUSH
14229: LD_VAR 0 3
14233: PPUSH
14234: LD_INT 3
14236: PPUSH
14237: CALL_OW 275
14241: PUSH
14242: LD_VAR 0 4
14246: PUSH
14247: LD_INT 3
14249: ARRAY
14250: GREATEREQUAL
14251: AND
14252: ST_TO_ADDR
// end ;
14253: LD_VAR 0 2
14257: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
14258: LD_INT 0
14260: PPUSH
14261: PPUSH
14262: PPUSH
// pom := GetBase ( building ) ;
14263: LD_ADDR_VAR 0 4
14267: PUSH
14268: LD_VAR 0 1
14272: PPUSH
14273: CALL_OW 274
14277: ST_TO_ADDR
// if not pom then
14278: LD_VAR 0 4
14282: NOT
14283: IFFALSE 14287
// exit ;
14285: GO 14388
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
14287: LD_ADDR_VAR 0 5
14291: PUSH
14292: LD_VAR 0 2
14296: PPUSH
14297: LD_VAR 0 1
14301: PPUSH
14302: CALL_OW 248
14306: PPUSH
14307: CALL_OW 450
14311: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14312: LD_ADDR_VAR 0 3
14316: PUSH
14317: LD_VAR 0 4
14321: PPUSH
14322: LD_INT 1
14324: PPUSH
14325: CALL_OW 275
14329: PUSH
14330: LD_VAR 0 5
14334: PUSH
14335: LD_INT 1
14337: ARRAY
14338: GREATEREQUAL
14339: PUSH
14340: LD_VAR 0 4
14344: PPUSH
14345: LD_INT 2
14347: PPUSH
14348: CALL_OW 275
14352: PUSH
14353: LD_VAR 0 5
14357: PUSH
14358: LD_INT 2
14360: ARRAY
14361: GREATEREQUAL
14362: AND
14363: PUSH
14364: LD_VAR 0 4
14368: PPUSH
14369: LD_INT 3
14371: PPUSH
14372: CALL_OW 275
14376: PUSH
14377: LD_VAR 0 5
14381: PUSH
14382: LD_INT 3
14384: ARRAY
14385: GREATEREQUAL
14386: AND
14387: ST_TO_ADDR
// end ;
14388: LD_VAR 0 3
14392: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
14393: LD_INT 0
14395: PPUSH
14396: PPUSH
14397: PPUSH
14398: PPUSH
14399: PPUSH
14400: PPUSH
14401: PPUSH
14402: PPUSH
14403: PPUSH
14404: PPUSH
14405: PPUSH
// result := false ;
14406: LD_ADDR_VAR 0 8
14410: PUSH
14411: LD_INT 0
14413: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
14414: LD_VAR 0 5
14418: NOT
14419: PUSH
14420: LD_VAR 0 1
14424: NOT
14425: OR
14426: PUSH
14427: LD_VAR 0 2
14431: NOT
14432: OR
14433: PUSH
14434: LD_VAR 0 3
14438: NOT
14439: OR
14440: IFFALSE 14444
// exit ;
14442: GO 15258
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
14444: LD_ADDR_VAR 0 14
14448: PUSH
14449: LD_VAR 0 1
14453: PPUSH
14454: LD_VAR 0 2
14458: PPUSH
14459: LD_VAR 0 3
14463: PPUSH
14464: LD_VAR 0 4
14468: PPUSH
14469: LD_VAR 0 5
14473: PUSH
14474: LD_INT 1
14476: ARRAY
14477: PPUSH
14478: CALL_OW 248
14482: PPUSH
14483: LD_INT 0
14485: PPUSH
14486: CALL 16511 0 6
14490: ST_TO_ADDR
// if not hexes then
14491: LD_VAR 0 14
14495: NOT
14496: IFFALSE 14500
// exit ;
14498: GO 15258
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14500: LD_ADDR_VAR 0 17
14504: PUSH
14505: LD_VAR 0 5
14509: PPUSH
14510: LD_INT 22
14512: PUSH
14513: LD_VAR 0 13
14517: PPUSH
14518: CALL_OW 255
14522: PUSH
14523: EMPTY
14524: LIST
14525: LIST
14526: PUSH
14527: LD_INT 2
14529: PUSH
14530: LD_INT 30
14532: PUSH
14533: LD_INT 0
14535: PUSH
14536: EMPTY
14537: LIST
14538: LIST
14539: PUSH
14540: LD_INT 30
14542: PUSH
14543: LD_INT 1
14545: PUSH
14546: EMPTY
14547: LIST
14548: LIST
14549: PUSH
14550: EMPTY
14551: LIST
14552: LIST
14553: LIST
14554: PUSH
14555: EMPTY
14556: LIST
14557: LIST
14558: PPUSH
14559: CALL_OW 72
14563: ST_TO_ADDR
// for i = 1 to hexes do
14564: LD_ADDR_VAR 0 9
14568: PUSH
14569: DOUBLE
14570: LD_INT 1
14572: DEC
14573: ST_TO_ADDR
14574: LD_VAR 0 14
14578: PUSH
14579: FOR_TO
14580: IFFALSE 15256
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
14582: LD_ADDR_VAR 0 13
14586: PUSH
14587: LD_VAR 0 14
14591: PUSH
14592: LD_VAR 0 9
14596: ARRAY
14597: PUSH
14598: LD_INT 1
14600: ARRAY
14601: PPUSH
14602: LD_VAR 0 14
14606: PUSH
14607: LD_VAR 0 9
14611: ARRAY
14612: PUSH
14613: LD_INT 2
14615: ARRAY
14616: PPUSH
14617: CALL_OW 428
14621: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
14622: LD_VAR 0 14
14626: PUSH
14627: LD_VAR 0 9
14631: ARRAY
14632: PUSH
14633: LD_INT 1
14635: ARRAY
14636: PPUSH
14637: LD_VAR 0 14
14641: PUSH
14642: LD_VAR 0 9
14646: ARRAY
14647: PUSH
14648: LD_INT 2
14650: ARRAY
14651: PPUSH
14652: CALL_OW 351
14656: PUSH
14657: LD_VAR 0 14
14661: PUSH
14662: LD_VAR 0 9
14666: ARRAY
14667: PUSH
14668: LD_INT 1
14670: ARRAY
14671: PPUSH
14672: LD_VAR 0 14
14676: PUSH
14677: LD_VAR 0 9
14681: ARRAY
14682: PUSH
14683: LD_INT 2
14685: ARRAY
14686: PPUSH
14687: CALL_OW 488
14691: NOT
14692: OR
14693: PUSH
14694: LD_VAR 0 13
14698: PPUSH
14699: CALL_OW 247
14703: PUSH
14704: LD_INT 3
14706: EQUAL
14707: OR
14708: IFFALSE 14714
// exit ;
14710: POP
14711: POP
14712: GO 15258
// if not tmp then
14714: LD_VAR 0 13
14718: NOT
14719: IFFALSE 14723
// continue ;
14721: GO 14579
// result := true ;
14723: LD_ADDR_VAR 0 8
14727: PUSH
14728: LD_INT 1
14730: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
14731: LD_VAR 0 6
14735: PUSH
14736: LD_VAR 0 13
14740: PPUSH
14741: CALL_OW 247
14745: PUSH
14746: LD_INT 2
14748: EQUAL
14749: AND
14750: PUSH
14751: LD_VAR 0 13
14755: PPUSH
14756: CALL_OW 263
14760: PUSH
14761: LD_INT 1
14763: EQUAL
14764: AND
14765: IFFALSE 14929
// begin if IsDrivenBy ( tmp ) then
14767: LD_VAR 0 13
14771: PPUSH
14772: CALL_OW 311
14776: IFFALSE 14780
// continue ;
14778: GO 14579
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
14780: LD_VAR 0 6
14784: PPUSH
14785: LD_INT 3
14787: PUSH
14788: LD_INT 60
14790: PUSH
14791: EMPTY
14792: LIST
14793: PUSH
14794: EMPTY
14795: LIST
14796: LIST
14797: PUSH
14798: LD_INT 3
14800: PUSH
14801: LD_INT 55
14803: PUSH
14804: EMPTY
14805: LIST
14806: PUSH
14807: EMPTY
14808: LIST
14809: LIST
14810: PUSH
14811: EMPTY
14812: LIST
14813: LIST
14814: PPUSH
14815: CALL_OW 72
14819: IFFALSE 14927
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
14821: LD_ADDR_VAR 0 18
14825: PUSH
14826: LD_VAR 0 6
14830: PPUSH
14831: LD_INT 3
14833: PUSH
14834: LD_INT 60
14836: PUSH
14837: EMPTY
14838: LIST
14839: PUSH
14840: EMPTY
14841: LIST
14842: LIST
14843: PUSH
14844: LD_INT 3
14846: PUSH
14847: LD_INT 55
14849: PUSH
14850: EMPTY
14851: LIST
14852: PUSH
14853: EMPTY
14854: LIST
14855: LIST
14856: PUSH
14857: EMPTY
14858: LIST
14859: LIST
14860: PPUSH
14861: CALL_OW 72
14865: PUSH
14866: LD_INT 1
14868: ARRAY
14869: ST_TO_ADDR
// if IsInUnit ( driver ) then
14870: LD_VAR 0 18
14874: PPUSH
14875: CALL_OW 310
14879: IFFALSE 14890
// ComExit ( driver ) ;
14881: LD_VAR 0 18
14885: PPUSH
14886: CALL 40303 0 1
// AddComEnterUnit ( driver , tmp ) ;
14890: LD_VAR 0 18
14894: PPUSH
14895: LD_VAR 0 13
14899: PPUSH
14900: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
14904: LD_VAR 0 18
14908: PPUSH
14909: LD_VAR 0 7
14913: PPUSH
14914: CALL_OW 173
// AddComExitVehicle ( driver ) ;
14918: LD_VAR 0 18
14922: PPUSH
14923: CALL_OW 181
// end ; continue ;
14927: GO 14579
// end ; if not cleaners or not tmp in cleaners then
14929: LD_VAR 0 6
14933: NOT
14934: PUSH
14935: LD_VAR 0 13
14939: PUSH
14940: LD_VAR 0 6
14944: IN
14945: NOT
14946: OR
14947: IFFALSE 15254
// begin if dep then
14949: LD_VAR 0 17
14953: IFFALSE 15089
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
14955: LD_ADDR_VAR 0 16
14959: PUSH
14960: LD_VAR 0 17
14964: PUSH
14965: LD_INT 1
14967: ARRAY
14968: PPUSH
14969: CALL_OW 250
14973: PPUSH
14974: LD_VAR 0 17
14978: PUSH
14979: LD_INT 1
14981: ARRAY
14982: PPUSH
14983: CALL_OW 254
14987: PPUSH
14988: LD_INT 5
14990: PPUSH
14991: CALL_OW 272
14995: PUSH
14996: LD_VAR 0 17
15000: PUSH
15001: LD_INT 1
15003: ARRAY
15004: PPUSH
15005: CALL_OW 251
15009: PPUSH
15010: LD_VAR 0 17
15014: PUSH
15015: LD_INT 1
15017: ARRAY
15018: PPUSH
15019: CALL_OW 254
15023: PPUSH
15024: LD_INT 5
15026: PPUSH
15027: CALL_OW 273
15031: PUSH
15032: EMPTY
15033: LIST
15034: LIST
15035: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
15036: LD_VAR 0 16
15040: PUSH
15041: LD_INT 1
15043: ARRAY
15044: PPUSH
15045: LD_VAR 0 16
15049: PUSH
15050: LD_INT 2
15052: ARRAY
15053: PPUSH
15054: CALL_OW 488
15058: IFFALSE 15089
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
15060: LD_VAR 0 13
15064: PPUSH
15065: LD_VAR 0 16
15069: PUSH
15070: LD_INT 1
15072: ARRAY
15073: PPUSH
15074: LD_VAR 0 16
15078: PUSH
15079: LD_INT 2
15081: ARRAY
15082: PPUSH
15083: CALL_OW 111
// continue ;
15087: GO 14579
// end ; end ; r := GetDir ( tmp ) ;
15089: LD_ADDR_VAR 0 15
15093: PUSH
15094: LD_VAR 0 13
15098: PPUSH
15099: CALL_OW 254
15103: ST_TO_ADDR
// if r = 5 then
15104: LD_VAR 0 15
15108: PUSH
15109: LD_INT 5
15111: EQUAL
15112: IFFALSE 15122
// r := 0 ;
15114: LD_ADDR_VAR 0 15
15118: PUSH
15119: LD_INT 0
15121: ST_TO_ADDR
// for j = r to 5 do
15122: LD_ADDR_VAR 0 10
15126: PUSH
15127: DOUBLE
15128: LD_VAR 0 15
15132: DEC
15133: ST_TO_ADDR
15134: LD_INT 5
15136: PUSH
15137: FOR_TO
15138: IFFALSE 15252
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
15140: LD_ADDR_VAR 0 11
15144: PUSH
15145: LD_VAR 0 13
15149: PPUSH
15150: CALL_OW 250
15154: PPUSH
15155: LD_VAR 0 10
15159: PPUSH
15160: LD_INT 2
15162: PPUSH
15163: CALL_OW 272
15167: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
15168: LD_ADDR_VAR 0 12
15172: PUSH
15173: LD_VAR 0 13
15177: PPUSH
15178: CALL_OW 251
15182: PPUSH
15183: LD_VAR 0 10
15187: PPUSH
15188: LD_INT 2
15190: PPUSH
15191: CALL_OW 273
15195: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
15196: LD_VAR 0 11
15200: PPUSH
15201: LD_VAR 0 12
15205: PPUSH
15206: CALL_OW 488
15210: PUSH
15211: LD_VAR 0 11
15215: PPUSH
15216: LD_VAR 0 12
15220: PPUSH
15221: CALL_OW 428
15225: NOT
15226: AND
15227: IFFALSE 15250
// begin ComMoveXY ( tmp , _x , _y ) ;
15229: LD_VAR 0 13
15233: PPUSH
15234: LD_VAR 0 11
15238: PPUSH
15239: LD_VAR 0 12
15243: PPUSH
15244: CALL_OW 111
// break ;
15248: GO 15252
// end ; end ;
15250: GO 15137
15252: POP
15253: POP
// end ; end ;
15254: GO 14579
15256: POP
15257: POP
// end ;
15258: LD_VAR 0 8
15262: RET
// export function BuildingTechInvented ( side , btype ) ; begin
15263: LD_INT 0
15265: PPUSH
// result := true ;
15266: LD_ADDR_VAR 0 3
15270: PUSH
15271: LD_INT 1
15273: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
15274: LD_VAR 0 2
15278: PUSH
15279: LD_INT 24
15281: DOUBLE
15282: EQUAL
15283: IFTRUE 15293
15285: LD_INT 33
15287: DOUBLE
15288: EQUAL
15289: IFTRUE 15293
15291: GO 15318
15293: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
15294: LD_ADDR_VAR 0 3
15298: PUSH
15299: LD_INT 32
15301: PPUSH
15302: LD_VAR 0 1
15306: PPUSH
15307: CALL_OW 321
15311: PUSH
15312: LD_INT 2
15314: EQUAL
15315: ST_TO_ADDR
15316: GO 15634
15318: LD_INT 20
15320: DOUBLE
15321: EQUAL
15322: IFTRUE 15326
15324: GO 15351
15326: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
15327: LD_ADDR_VAR 0 3
15331: PUSH
15332: LD_INT 6
15334: PPUSH
15335: LD_VAR 0 1
15339: PPUSH
15340: CALL_OW 321
15344: PUSH
15345: LD_INT 2
15347: EQUAL
15348: ST_TO_ADDR
15349: GO 15634
15351: LD_INT 22
15353: DOUBLE
15354: EQUAL
15355: IFTRUE 15365
15357: LD_INT 36
15359: DOUBLE
15360: EQUAL
15361: IFTRUE 15365
15363: GO 15390
15365: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
15366: LD_ADDR_VAR 0 3
15370: PUSH
15371: LD_INT 15
15373: PPUSH
15374: LD_VAR 0 1
15378: PPUSH
15379: CALL_OW 321
15383: PUSH
15384: LD_INT 2
15386: EQUAL
15387: ST_TO_ADDR
15388: GO 15634
15390: LD_INT 30
15392: DOUBLE
15393: EQUAL
15394: IFTRUE 15398
15396: GO 15423
15398: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
15399: LD_ADDR_VAR 0 3
15403: PUSH
15404: LD_INT 20
15406: PPUSH
15407: LD_VAR 0 1
15411: PPUSH
15412: CALL_OW 321
15416: PUSH
15417: LD_INT 2
15419: EQUAL
15420: ST_TO_ADDR
15421: GO 15634
15423: LD_INT 28
15425: DOUBLE
15426: EQUAL
15427: IFTRUE 15437
15429: LD_INT 21
15431: DOUBLE
15432: EQUAL
15433: IFTRUE 15437
15435: GO 15462
15437: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
15438: LD_ADDR_VAR 0 3
15442: PUSH
15443: LD_INT 21
15445: PPUSH
15446: LD_VAR 0 1
15450: PPUSH
15451: CALL_OW 321
15455: PUSH
15456: LD_INT 2
15458: EQUAL
15459: ST_TO_ADDR
15460: GO 15634
15462: LD_INT 16
15464: DOUBLE
15465: EQUAL
15466: IFTRUE 15470
15468: GO 15495
15470: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
15471: LD_ADDR_VAR 0 3
15475: PUSH
15476: LD_INT 84
15478: PPUSH
15479: LD_VAR 0 1
15483: PPUSH
15484: CALL_OW 321
15488: PUSH
15489: LD_INT 2
15491: EQUAL
15492: ST_TO_ADDR
15493: GO 15634
15495: LD_INT 19
15497: DOUBLE
15498: EQUAL
15499: IFTRUE 15509
15501: LD_INT 23
15503: DOUBLE
15504: EQUAL
15505: IFTRUE 15509
15507: GO 15534
15509: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
15510: LD_ADDR_VAR 0 3
15514: PUSH
15515: LD_INT 83
15517: PPUSH
15518: LD_VAR 0 1
15522: PPUSH
15523: CALL_OW 321
15527: PUSH
15528: LD_INT 2
15530: EQUAL
15531: ST_TO_ADDR
15532: GO 15634
15534: LD_INT 17
15536: DOUBLE
15537: EQUAL
15538: IFTRUE 15542
15540: GO 15567
15542: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
15543: LD_ADDR_VAR 0 3
15547: PUSH
15548: LD_INT 39
15550: PPUSH
15551: LD_VAR 0 1
15555: PPUSH
15556: CALL_OW 321
15560: PUSH
15561: LD_INT 2
15563: EQUAL
15564: ST_TO_ADDR
15565: GO 15634
15567: LD_INT 18
15569: DOUBLE
15570: EQUAL
15571: IFTRUE 15575
15573: GO 15600
15575: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
15576: LD_ADDR_VAR 0 3
15580: PUSH
15581: LD_INT 40
15583: PPUSH
15584: LD_VAR 0 1
15588: PPUSH
15589: CALL_OW 321
15593: PUSH
15594: LD_INT 2
15596: EQUAL
15597: ST_TO_ADDR
15598: GO 15634
15600: LD_INT 27
15602: DOUBLE
15603: EQUAL
15604: IFTRUE 15608
15606: GO 15633
15608: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
15609: LD_ADDR_VAR 0 3
15613: PUSH
15614: LD_INT 35
15616: PPUSH
15617: LD_VAR 0 1
15621: PPUSH
15622: CALL_OW 321
15626: PUSH
15627: LD_INT 2
15629: EQUAL
15630: ST_TO_ADDR
15631: GO 15634
15633: POP
// end ;
15634: LD_VAR 0 3
15638: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
15639: LD_INT 0
15641: PPUSH
15642: PPUSH
15643: PPUSH
15644: PPUSH
15645: PPUSH
15646: PPUSH
15647: PPUSH
15648: PPUSH
15649: PPUSH
15650: PPUSH
15651: PPUSH
// result := false ;
15652: LD_ADDR_VAR 0 6
15656: PUSH
15657: LD_INT 0
15659: ST_TO_ADDR
// if btype = b_depot then
15660: LD_VAR 0 2
15664: PUSH
15665: LD_INT 0
15667: EQUAL
15668: IFFALSE 15680
// begin result := true ;
15670: LD_ADDR_VAR 0 6
15674: PUSH
15675: LD_INT 1
15677: ST_TO_ADDR
// exit ;
15678: GO 16506
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
15680: LD_VAR 0 1
15684: NOT
15685: PUSH
15686: LD_VAR 0 1
15690: PPUSH
15691: CALL_OW 266
15695: PUSH
15696: LD_INT 0
15698: PUSH
15699: LD_INT 1
15701: PUSH
15702: EMPTY
15703: LIST
15704: LIST
15705: IN
15706: NOT
15707: OR
15708: PUSH
15709: LD_VAR 0 2
15713: NOT
15714: OR
15715: PUSH
15716: LD_VAR 0 5
15720: PUSH
15721: LD_INT 0
15723: PUSH
15724: LD_INT 1
15726: PUSH
15727: LD_INT 2
15729: PUSH
15730: LD_INT 3
15732: PUSH
15733: LD_INT 4
15735: PUSH
15736: LD_INT 5
15738: PUSH
15739: EMPTY
15740: LIST
15741: LIST
15742: LIST
15743: LIST
15744: LIST
15745: LIST
15746: IN
15747: NOT
15748: OR
15749: PUSH
15750: LD_VAR 0 3
15754: PPUSH
15755: LD_VAR 0 4
15759: PPUSH
15760: CALL_OW 488
15764: NOT
15765: OR
15766: IFFALSE 15770
// exit ;
15768: GO 16506
// side := GetSide ( depot ) ;
15770: LD_ADDR_VAR 0 9
15774: PUSH
15775: LD_VAR 0 1
15779: PPUSH
15780: CALL_OW 255
15784: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
15785: LD_VAR 0 9
15789: PPUSH
15790: LD_VAR 0 2
15794: PPUSH
15795: CALL 15263 0 2
15799: NOT
15800: IFFALSE 15804
// exit ;
15802: GO 16506
// pom := GetBase ( depot ) ;
15804: LD_ADDR_VAR 0 10
15808: PUSH
15809: LD_VAR 0 1
15813: PPUSH
15814: CALL_OW 274
15818: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
15819: LD_ADDR_VAR 0 11
15823: PUSH
15824: LD_VAR 0 2
15828: PPUSH
15829: LD_VAR 0 1
15833: PPUSH
15834: CALL_OW 248
15838: PPUSH
15839: CALL_OW 450
15843: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
15844: LD_VAR 0 10
15848: PPUSH
15849: LD_INT 1
15851: PPUSH
15852: CALL_OW 275
15856: PUSH
15857: LD_VAR 0 11
15861: PUSH
15862: LD_INT 1
15864: ARRAY
15865: GREATEREQUAL
15866: PUSH
15867: LD_VAR 0 10
15871: PPUSH
15872: LD_INT 2
15874: PPUSH
15875: CALL_OW 275
15879: PUSH
15880: LD_VAR 0 11
15884: PUSH
15885: LD_INT 2
15887: ARRAY
15888: GREATEREQUAL
15889: AND
15890: PUSH
15891: LD_VAR 0 10
15895: PPUSH
15896: LD_INT 3
15898: PPUSH
15899: CALL_OW 275
15903: PUSH
15904: LD_VAR 0 11
15908: PUSH
15909: LD_INT 3
15911: ARRAY
15912: GREATEREQUAL
15913: AND
15914: NOT
15915: IFFALSE 15919
// exit ;
15917: GO 16506
// if GetBType ( depot ) = b_depot then
15919: LD_VAR 0 1
15923: PPUSH
15924: CALL_OW 266
15928: PUSH
15929: LD_INT 0
15931: EQUAL
15932: IFFALSE 15944
// dist := 28 else
15934: LD_ADDR_VAR 0 14
15938: PUSH
15939: LD_INT 28
15941: ST_TO_ADDR
15942: GO 15952
// dist := 36 ;
15944: LD_ADDR_VAR 0 14
15948: PUSH
15949: LD_INT 36
15951: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
15952: LD_VAR 0 1
15956: PPUSH
15957: LD_VAR 0 3
15961: PPUSH
15962: LD_VAR 0 4
15966: PPUSH
15967: CALL_OW 297
15971: PUSH
15972: LD_VAR 0 14
15976: GREATER
15977: IFFALSE 15981
// exit ;
15979: GO 16506
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
15981: LD_ADDR_VAR 0 12
15985: PUSH
15986: LD_VAR 0 2
15990: PPUSH
15991: LD_VAR 0 3
15995: PPUSH
15996: LD_VAR 0 4
16000: PPUSH
16001: LD_VAR 0 5
16005: PPUSH
16006: LD_VAR 0 1
16010: PPUSH
16011: CALL_OW 248
16015: PPUSH
16016: LD_INT 0
16018: PPUSH
16019: CALL 16511 0 6
16023: ST_TO_ADDR
// if not hexes then
16024: LD_VAR 0 12
16028: NOT
16029: IFFALSE 16033
// exit ;
16031: GO 16506
// hex := GetHexInfo ( x , y ) ;
16033: LD_ADDR_VAR 0 15
16037: PUSH
16038: LD_VAR 0 3
16042: PPUSH
16043: LD_VAR 0 4
16047: PPUSH
16048: CALL_OW 546
16052: ST_TO_ADDR
// if hex [ 1 ] then
16053: LD_VAR 0 15
16057: PUSH
16058: LD_INT 1
16060: ARRAY
16061: IFFALSE 16065
// exit ;
16063: GO 16506
// height := hex [ 2 ] ;
16065: LD_ADDR_VAR 0 13
16069: PUSH
16070: LD_VAR 0 15
16074: PUSH
16075: LD_INT 2
16077: ARRAY
16078: ST_TO_ADDR
// for i = 1 to hexes do
16079: LD_ADDR_VAR 0 7
16083: PUSH
16084: DOUBLE
16085: LD_INT 1
16087: DEC
16088: ST_TO_ADDR
16089: LD_VAR 0 12
16093: PUSH
16094: FOR_TO
16095: IFFALSE 16425
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
16097: LD_VAR 0 12
16101: PUSH
16102: LD_VAR 0 7
16106: ARRAY
16107: PUSH
16108: LD_INT 1
16110: ARRAY
16111: PPUSH
16112: LD_VAR 0 12
16116: PUSH
16117: LD_VAR 0 7
16121: ARRAY
16122: PUSH
16123: LD_INT 2
16125: ARRAY
16126: PPUSH
16127: CALL_OW 488
16131: NOT
16132: PUSH
16133: LD_VAR 0 12
16137: PUSH
16138: LD_VAR 0 7
16142: ARRAY
16143: PUSH
16144: LD_INT 1
16146: ARRAY
16147: PPUSH
16148: LD_VAR 0 12
16152: PUSH
16153: LD_VAR 0 7
16157: ARRAY
16158: PUSH
16159: LD_INT 2
16161: ARRAY
16162: PPUSH
16163: CALL_OW 428
16167: PUSH
16168: LD_INT 0
16170: GREATER
16171: OR
16172: PUSH
16173: LD_VAR 0 12
16177: PUSH
16178: LD_VAR 0 7
16182: ARRAY
16183: PUSH
16184: LD_INT 1
16186: ARRAY
16187: PPUSH
16188: LD_VAR 0 12
16192: PUSH
16193: LD_VAR 0 7
16197: ARRAY
16198: PUSH
16199: LD_INT 2
16201: ARRAY
16202: PPUSH
16203: CALL_OW 351
16207: OR
16208: IFFALSE 16214
// exit ;
16210: POP
16211: POP
16212: GO 16506
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
16214: LD_ADDR_VAR 0 8
16218: PUSH
16219: LD_VAR 0 12
16223: PUSH
16224: LD_VAR 0 7
16228: ARRAY
16229: PUSH
16230: LD_INT 1
16232: ARRAY
16233: PPUSH
16234: LD_VAR 0 12
16238: PUSH
16239: LD_VAR 0 7
16243: ARRAY
16244: PUSH
16245: LD_INT 2
16247: ARRAY
16248: PPUSH
16249: CALL_OW 546
16253: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
16254: LD_VAR 0 8
16258: PUSH
16259: LD_INT 1
16261: ARRAY
16262: PUSH
16263: LD_VAR 0 8
16267: PUSH
16268: LD_INT 2
16270: ARRAY
16271: PUSH
16272: LD_VAR 0 13
16276: PUSH
16277: LD_INT 2
16279: PLUS
16280: GREATER
16281: OR
16282: PUSH
16283: LD_VAR 0 8
16287: PUSH
16288: LD_INT 2
16290: ARRAY
16291: PUSH
16292: LD_VAR 0 13
16296: PUSH
16297: LD_INT 2
16299: MINUS
16300: LESS
16301: OR
16302: PUSH
16303: LD_VAR 0 8
16307: PUSH
16308: LD_INT 3
16310: ARRAY
16311: PUSH
16312: LD_INT 0
16314: PUSH
16315: LD_INT 8
16317: PUSH
16318: LD_INT 9
16320: PUSH
16321: LD_INT 10
16323: PUSH
16324: LD_INT 11
16326: PUSH
16327: LD_INT 12
16329: PUSH
16330: LD_INT 13
16332: PUSH
16333: LD_INT 16
16335: PUSH
16336: LD_INT 17
16338: PUSH
16339: LD_INT 18
16341: PUSH
16342: LD_INT 19
16344: PUSH
16345: LD_INT 20
16347: PUSH
16348: LD_INT 21
16350: PUSH
16351: EMPTY
16352: LIST
16353: LIST
16354: LIST
16355: LIST
16356: LIST
16357: LIST
16358: LIST
16359: LIST
16360: LIST
16361: LIST
16362: LIST
16363: LIST
16364: LIST
16365: IN
16366: NOT
16367: OR
16368: PUSH
16369: LD_VAR 0 8
16373: PUSH
16374: LD_INT 5
16376: ARRAY
16377: NOT
16378: OR
16379: PUSH
16380: LD_VAR 0 8
16384: PUSH
16385: LD_INT 6
16387: ARRAY
16388: PUSH
16389: LD_INT 1
16391: PUSH
16392: LD_INT 2
16394: PUSH
16395: LD_INT 7
16397: PUSH
16398: LD_INT 9
16400: PUSH
16401: LD_INT 10
16403: PUSH
16404: LD_INT 11
16406: PUSH
16407: EMPTY
16408: LIST
16409: LIST
16410: LIST
16411: LIST
16412: LIST
16413: LIST
16414: IN
16415: NOT
16416: OR
16417: IFFALSE 16423
// exit ;
16419: POP
16420: POP
16421: GO 16506
// end ;
16423: GO 16094
16425: POP
16426: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
16427: LD_VAR 0 9
16431: PPUSH
16432: LD_VAR 0 3
16436: PPUSH
16437: LD_VAR 0 4
16441: PPUSH
16442: LD_INT 20
16444: PPUSH
16445: CALL 8429 0 4
16449: PUSH
16450: LD_INT 4
16452: ARRAY
16453: IFFALSE 16457
// exit ;
16455: GO 16506
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
16457: LD_VAR 0 2
16461: PUSH
16462: LD_INT 29
16464: PUSH
16465: LD_INT 30
16467: PUSH
16468: EMPTY
16469: LIST
16470: LIST
16471: IN
16472: PUSH
16473: LD_VAR 0 3
16477: PPUSH
16478: LD_VAR 0 4
16482: PPUSH
16483: LD_VAR 0 9
16487: PPUSH
16488: CALL_OW 440
16492: NOT
16493: AND
16494: IFFALSE 16498
// exit ;
16496: GO 16506
// result := true ;
16498: LD_ADDR_VAR 0 6
16502: PUSH
16503: LD_INT 1
16505: ST_TO_ADDR
// end ;
16506: LD_VAR 0 6
16510: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
16511: LD_INT 0
16513: PPUSH
16514: PPUSH
16515: PPUSH
16516: PPUSH
16517: PPUSH
16518: PPUSH
16519: PPUSH
16520: PPUSH
16521: PPUSH
16522: PPUSH
16523: PPUSH
16524: PPUSH
16525: PPUSH
16526: PPUSH
16527: PPUSH
16528: PPUSH
16529: PPUSH
16530: PPUSH
16531: PPUSH
16532: PPUSH
16533: PPUSH
16534: PPUSH
16535: PPUSH
16536: PPUSH
16537: PPUSH
16538: PPUSH
16539: PPUSH
16540: PPUSH
16541: PPUSH
16542: PPUSH
16543: PPUSH
16544: PPUSH
16545: PPUSH
16546: PPUSH
16547: PPUSH
16548: PPUSH
16549: PPUSH
16550: PPUSH
16551: PPUSH
16552: PPUSH
16553: PPUSH
16554: PPUSH
16555: PPUSH
16556: PPUSH
16557: PPUSH
16558: PPUSH
16559: PPUSH
16560: PPUSH
16561: PPUSH
16562: PPUSH
16563: PPUSH
16564: PPUSH
16565: PPUSH
16566: PPUSH
16567: PPUSH
16568: PPUSH
16569: PPUSH
16570: PPUSH
// result = [ ] ;
16571: LD_ADDR_VAR 0 7
16575: PUSH
16576: EMPTY
16577: ST_TO_ADDR
// temp_list = [ ] ;
16578: LD_ADDR_VAR 0 9
16582: PUSH
16583: EMPTY
16584: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
16585: LD_VAR 0 4
16589: PUSH
16590: LD_INT 0
16592: PUSH
16593: LD_INT 1
16595: PUSH
16596: LD_INT 2
16598: PUSH
16599: LD_INT 3
16601: PUSH
16602: LD_INT 4
16604: PUSH
16605: LD_INT 5
16607: PUSH
16608: EMPTY
16609: LIST
16610: LIST
16611: LIST
16612: LIST
16613: LIST
16614: LIST
16615: IN
16616: NOT
16617: PUSH
16618: LD_VAR 0 1
16622: PUSH
16623: LD_INT 0
16625: PUSH
16626: LD_INT 1
16628: PUSH
16629: EMPTY
16630: LIST
16631: LIST
16632: IN
16633: PUSH
16634: LD_VAR 0 5
16638: PUSH
16639: LD_INT 1
16641: PUSH
16642: LD_INT 2
16644: PUSH
16645: LD_INT 3
16647: PUSH
16648: EMPTY
16649: LIST
16650: LIST
16651: LIST
16652: IN
16653: NOT
16654: AND
16655: OR
16656: IFFALSE 16660
// exit ;
16658: GO 35051
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
16660: LD_VAR 0 1
16664: PUSH
16665: LD_INT 6
16667: PUSH
16668: LD_INT 7
16670: PUSH
16671: LD_INT 8
16673: PUSH
16674: LD_INT 13
16676: PUSH
16677: LD_INT 12
16679: PUSH
16680: LD_INT 15
16682: PUSH
16683: LD_INT 11
16685: PUSH
16686: LD_INT 14
16688: PUSH
16689: LD_INT 10
16691: PUSH
16692: EMPTY
16693: LIST
16694: LIST
16695: LIST
16696: LIST
16697: LIST
16698: LIST
16699: LIST
16700: LIST
16701: LIST
16702: IN
16703: IFFALSE 16713
// btype = b_lab ;
16705: LD_ADDR_VAR 0 1
16709: PUSH
16710: LD_INT 6
16712: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
16713: LD_VAR 0 6
16717: PUSH
16718: LD_INT 0
16720: PUSH
16721: LD_INT 1
16723: PUSH
16724: LD_INT 2
16726: PUSH
16727: EMPTY
16728: LIST
16729: LIST
16730: LIST
16731: IN
16732: NOT
16733: PUSH
16734: LD_VAR 0 1
16738: PUSH
16739: LD_INT 0
16741: PUSH
16742: LD_INT 1
16744: PUSH
16745: LD_INT 2
16747: PUSH
16748: LD_INT 3
16750: PUSH
16751: LD_INT 6
16753: PUSH
16754: LD_INT 36
16756: PUSH
16757: LD_INT 4
16759: PUSH
16760: LD_INT 5
16762: PUSH
16763: LD_INT 31
16765: PUSH
16766: LD_INT 32
16768: PUSH
16769: LD_INT 33
16771: PUSH
16772: EMPTY
16773: LIST
16774: LIST
16775: LIST
16776: LIST
16777: LIST
16778: LIST
16779: LIST
16780: LIST
16781: LIST
16782: LIST
16783: LIST
16784: IN
16785: NOT
16786: PUSH
16787: LD_VAR 0 6
16791: PUSH
16792: LD_INT 1
16794: EQUAL
16795: AND
16796: OR
16797: PUSH
16798: LD_VAR 0 1
16802: PUSH
16803: LD_INT 2
16805: PUSH
16806: LD_INT 3
16808: PUSH
16809: EMPTY
16810: LIST
16811: LIST
16812: IN
16813: NOT
16814: PUSH
16815: LD_VAR 0 6
16819: PUSH
16820: LD_INT 2
16822: EQUAL
16823: AND
16824: OR
16825: IFFALSE 16835
// mode = 0 ;
16827: LD_ADDR_VAR 0 6
16831: PUSH
16832: LD_INT 0
16834: ST_TO_ADDR
// case mode of 0 :
16835: LD_VAR 0 6
16839: PUSH
16840: LD_INT 0
16842: DOUBLE
16843: EQUAL
16844: IFTRUE 16848
16846: GO 28301
16848: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
16849: LD_ADDR_VAR 0 11
16853: PUSH
16854: LD_INT 0
16856: PUSH
16857: LD_INT 0
16859: PUSH
16860: EMPTY
16861: LIST
16862: LIST
16863: PUSH
16864: LD_INT 0
16866: PUSH
16867: LD_INT 1
16869: NEG
16870: PUSH
16871: EMPTY
16872: LIST
16873: LIST
16874: PUSH
16875: LD_INT 1
16877: PUSH
16878: LD_INT 0
16880: PUSH
16881: EMPTY
16882: LIST
16883: LIST
16884: PUSH
16885: LD_INT 1
16887: PUSH
16888: LD_INT 1
16890: PUSH
16891: EMPTY
16892: LIST
16893: LIST
16894: PUSH
16895: LD_INT 0
16897: PUSH
16898: LD_INT 1
16900: PUSH
16901: EMPTY
16902: LIST
16903: LIST
16904: PUSH
16905: LD_INT 1
16907: NEG
16908: PUSH
16909: LD_INT 0
16911: PUSH
16912: EMPTY
16913: LIST
16914: LIST
16915: PUSH
16916: LD_INT 1
16918: NEG
16919: PUSH
16920: LD_INT 1
16922: NEG
16923: PUSH
16924: EMPTY
16925: LIST
16926: LIST
16927: PUSH
16928: LD_INT 1
16930: NEG
16931: PUSH
16932: LD_INT 2
16934: NEG
16935: PUSH
16936: EMPTY
16937: LIST
16938: LIST
16939: PUSH
16940: LD_INT 0
16942: PUSH
16943: LD_INT 2
16945: NEG
16946: PUSH
16947: EMPTY
16948: LIST
16949: LIST
16950: PUSH
16951: LD_INT 1
16953: PUSH
16954: LD_INT 1
16956: NEG
16957: PUSH
16958: EMPTY
16959: LIST
16960: LIST
16961: PUSH
16962: LD_INT 1
16964: PUSH
16965: LD_INT 2
16967: PUSH
16968: EMPTY
16969: LIST
16970: LIST
16971: PUSH
16972: LD_INT 0
16974: PUSH
16975: LD_INT 2
16977: PUSH
16978: EMPTY
16979: LIST
16980: LIST
16981: PUSH
16982: LD_INT 1
16984: NEG
16985: PUSH
16986: LD_INT 1
16988: PUSH
16989: EMPTY
16990: LIST
16991: LIST
16992: PUSH
16993: LD_INT 1
16995: PUSH
16996: LD_INT 3
16998: PUSH
16999: EMPTY
17000: LIST
17001: LIST
17002: PUSH
17003: LD_INT 0
17005: PUSH
17006: LD_INT 3
17008: PUSH
17009: EMPTY
17010: LIST
17011: LIST
17012: PUSH
17013: LD_INT 1
17015: NEG
17016: PUSH
17017: LD_INT 2
17019: PUSH
17020: EMPTY
17021: LIST
17022: LIST
17023: PUSH
17024: EMPTY
17025: LIST
17026: LIST
17027: LIST
17028: LIST
17029: LIST
17030: LIST
17031: LIST
17032: LIST
17033: LIST
17034: LIST
17035: LIST
17036: LIST
17037: LIST
17038: LIST
17039: LIST
17040: LIST
17041: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
17042: LD_ADDR_VAR 0 12
17046: PUSH
17047: LD_INT 0
17049: PUSH
17050: LD_INT 0
17052: PUSH
17053: EMPTY
17054: LIST
17055: LIST
17056: PUSH
17057: LD_INT 0
17059: PUSH
17060: LD_INT 1
17062: NEG
17063: PUSH
17064: EMPTY
17065: LIST
17066: LIST
17067: PUSH
17068: LD_INT 1
17070: PUSH
17071: LD_INT 0
17073: PUSH
17074: EMPTY
17075: LIST
17076: LIST
17077: PUSH
17078: LD_INT 1
17080: PUSH
17081: LD_INT 1
17083: PUSH
17084: EMPTY
17085: LIST
17086: LIST
17087: PUSH
17088: LD_INT 0
17090: PUSH
17091: LD_INT 1
17093: PUSH
17094: EMPTY
17095: LIST
17096: LIST
17097: PUSH
17098: LD_INT 1
17100: NEG
17101: PUSH
17102: LD_INT 0
17104: PUSH
17105: EMPTY
17106: LIST
17107: LIST
17108: PUSH
17109: LD_INT 1
17111: NEG
17112: PUSH
17113: LD_INT 1
17115: NEG
17116: PUSH
17117: EMPTY
17118: LIST
17119: LIST
17120: PUSH
17121: LD_INT 1
17123: PUSH
17124: LD_INT 1
17126: NEG
17127: PUSH
17128: EMPTY
17129: LIST
17130: LIST
17131: PUSH
17132: LD_INT 2
17134: PUSH
17135: LD_INT 0
17137: PUSH
17138: EMPTY
17139: LIST
17140: LIST
17141: PUSH
17142: LD_INT 2
17144: PUSH
17145: LD_INT 1
17147: PUSH
17148: EMPTY
17149: LIST
17150: LIST
17151: PUSH
17152: LD_INT 1
17154: NEG
17155: PUSH
17156: LD_INT 1
17158: PUSH
17159: EMPTY
17160: LIST
17161: LIST
17162: PUSH
17163: LD_INT 2
17165: NEG
17166: PUSH
17167: LD_INT 0
17169: PUSH
17170: EMPTY
17171: LIST
17172: LIST
17173: PUSH
17174: LD_INT 2
17176: NEG
17177: PUSH
17178: LD_INT 1
17180: NEG
17181: PUSH
17182: EMPTY
17183: LIST
17184: LIST
17185: PUSH
17186: LD_INT 2
17188: NEG
17189: PUSH
17190: LD_INT 1
17192: PUSH
17193: EMPTY
17194: LIST
17195: LIST
17196: PUSH
17197: LD_INT 3
17199: NEG
17200: PUSH
17201: LD_INT 0
17203: PUSH
17204: EMPTY
17205: LIST
17206: LIST
17207: PUSH
17208: LD_INT 3
17210: NEG
17211: PUSH
17212: LD_INT 1
17214: NEG
17215: PUSH
17216: EMPTY
17217: LIST
17218: LIST
17219: PUSH
17220: EMPTY
17221: LIST
17222: LIST
17223: LIST
17224: LIST
17225: LIST
17226: LIST
17227: LIST
17228: LIST
17229: LIST
17230: LIST
17231: LIST
17232: LIST
17233: LIST
17234: LIST
17235: LIST
17236: LIST
17237: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
17238: LD_ADDR_VAR 0 13
17242: PUSH
17243: LD_INT 0
17245: PUSH
17246: LD_INT 0
17248: PUSH
17249: EMPTY
17250: LIST
17251: LIST
17252: PUSH
17253: LD_INT 0
17255: PUSH
17256: LD_INT 1
17258: NEG
17259: PUSH
17260: EMPTY
17261: LIST
17262: LIST
17263: PUSH
17264: LD_INT 1
17266: PUSH
17267: LD_INT 0
17269: PUSH
17270: EMPTY
17271: LIST
17272: LIST
17273: PUSH
17274: LD_INT 1
17276: PUSH
17277: LD_INT 1
17279: PUSH
17280: EMPTY
17281: LIST
17282: LIST
17283: PUSH
17284: LD_INT 0
17286: PUSH
17287: LD_INT 1
17289: PUSH
17290: EMPTY
17291: LIST
17292: LIST
17293: PUSH
17294: LD_INT 1
17296: NEG
17297: PUSH
17298: LD_INT 0
17300: PUSH
17301: EMPTY
17302: LIST
17303: LIST
17304: PUSH
17305: LD_INT 1
17307: NEG
17308: PUSH
17309: LD_INT 1
17311: NEG
17312: PUSH
17313: EMPTY
17314: LIST
17315: LIST
17316: PUSH
17317: LD_INT 1
17319: NEG
17320: PUSH
17321: LD_INT 2
17323: NEG
17324: PUSH
17325: EMPTY
17326: LIST
17327: LIST
17328: PUSH
17329: LD_INT 2
17331: PUSH
17332: LD_INT 1
17334: PUSH
17335: EMPTY
17336: LIST
17337: LIST
17338: PUSH
17339: LD_INT 2
17341: PUSH
17342: LD_INT 2
17344: PUSH
17345: EMPTY
17346: LIST
17347: LIST
17348: PUSH
17349: LD_INT 1
17351: PUSH
17352: LD_INT 2
17354: PUSH
17355: EMPTY
17356: LIST
17357: LIST
17358: PUSH
17359: LD_INT 2
17361: NEG
17362: PUSH
17363: LD_INT 1
17365: NEG
17366: PUSH
17367: EMPTY
17368: LIST
17369: LIST
17370: PUSH
17371: LD_INT 2
17373: NEG
17374: PUSH
17375: LD_INT 2
17377: NEG
17378: PUSH
17379: EMPTY
17380: LIST
17381: LIST
17382: PUSH
17383: LD_INT 2
17385: NEG
17386: PUSH
17387: LD_INT 3
17389: NEG
17390: PUSH
17391: EMPTY
17392: LIST
17393: LIST
17394: PUSH
17395: LD_INT 3
17397: NEG
17398: PUSH
17399: LD_INT 2
17401: NEG
17402: PUSH
17403: EMPTY
17404: LIST
17405: LIST
17406: PUSH
17407: LD_INT 3
17409: NEG
17410: PUSH
17411: LD_INT 3
17413: NEG
17414: PUSH
17415: EMPTY
17416: LIST
17417: LIST
17418: PUSH
17419: EMPTY
17420: LIST
17421: LIST
17422: LIST
17423: LIST
17424: LIST
17425: LIST
17426: LIST
17427: LIST
17428: LIST
17429: LIST
17430: LIST
17431: LIST
17432: LIST
17433: LIST
17434: LIST
17435: LIST
17436: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
17437: LD_ADDR_VAR 0 14
17441: PUSH
17442: LD_INT 0
17444: PUSH
17445: LD_INT 0
17447: PUSH
17448: EMPTY
17449: LIST
17450: LIST
17451: PUSH
17452: LD_INT 0
17454: PUSH
17455: LD_INT 1
17457: NEG
17458: PUSH
17459: EMPTY
17460: LIST
17461: LIST
17462: PUSH
17463: LD_INT 1
17465: PUSH
17466: LD_INT 0
17468: PUSH
17469: EMPTY
17470: LIST
17471: LIST
17472: PUSH
17473: LD_INT 1
17475: PUSH
17476: LD_INT 1
17478: PUSH
17479: EMPTY
17480: LIST
17481: LIST
17482: PUSH
17483: LD_INT 0
17485: PUSH
17486: LD_INT 1
17488: PUSH
17489: EMPTY
17490: LIST
17491: LIST
17492: PUSH
17493: LD_INT 1
17495: NEG
17496: PUSH
17497: LD_INT 0
17499: PUSH
17500: EMPTY
17501: LIST
17502: LIST
17503: PUSH
17504: LD_INT 1
17506: NEG
17507: PUSH
17508: LD_INT 1
17510: NEG
17511: PUSH
17512: EMPTY
17513: LIST
17514: LIST
17515: PUSH
17516: LD_INT 1
17518: NEG
17519: PUSH
17520: LD_INT 2
17522: NEG
17523: PUSH
17524: EMPTY
17525: LIST
17526: LIST
17527: PUSH
17528: LD_INT 0
17530: PUSH
17531: LD_INT 2
17533: NEG
17534: PUSH
17535: EMPTY
17536: LIST
17537: LIST
17538: PUSH
17539: LD_INT 1
17541: PUSH
17542: LD_INT 1
17544: NEG
17545: PUSH
17546: EMPTY
17547: LIST
17548: LIST
17549: PUSH
17550: LD_INT 1
17552: PUSH
17553: LD_INT 2
17555: PUSH
17556: EMPTY
17557: LIST
17558: LIST
17559: PUSH
17560: LD_INT 0
17562: PUSH
17563: LD_INT 2
17565: PUSH
17566: EMPTY
17567: LIST
17568: LIST
17569: PUSH
17570: LD_INT 1
17572: NEG
17573: PUSH
17574: LD_INT 1
17576: PUSH
17577: EMPTY
17578: LIST
17579: LIST
17580: PUSH
17581: LD_INT 1
17583: NEG
17584: PUSH
17585: LD_INT 3
17587: NEG
17588: PUSH
17589: EMPTY
17590: LIST
17591: LIST
17592: PUSH
17593: LD_INT 0
17595: PUSH
17596: LD_INT 3
17598: NEG
17599: PUSH
17600: EMPTY
17601: LIST
17602: LIST
17603: PUSH
17604: LD_INT 1
17606: PUSH
17607: LD_INT 2
17609: NEG
17610: PUSH
17611: EMPTY
17612: LIST
17613: LIST
17614: PUSH
17615: EMPTY
17616: LIST
17617: LIST
17618: LIST
17619: LIST
17620: LIST
17621: LIST
17622: LIST
17623: LIST
17624: LIST
17625: LIST
17626: LIST
17627: LIST
17628: LIST
17629: LIST
17630: LIST
17631: LIST
17632: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
17633: LD_ADDR_VAR 0 15
17637: PUSH
17638: LD_INT 0
17640: PUSH
17641: LD_INT 0
17643: PUSH
17644: EMPTY
17645: LIST
17646: LIST
17647: PUSH
17648: LD_INT 0
17650: PUSH
17651: LD_INT 1
17653: NEG
17654: PUSH
17655: EMPTY
17656: LIST
17657: LIST
17658: PUSH
17659: LD_INT 1
17661: PUSH
17662: LD_INT 0
17664: PUSH
17665: EMPTY
17666: LIST
17667: LIST
17668: PUSH
17669: LD_INT 1
17671: PUSH
17672: LD_INT 1
17674: PUSH
17675: EMPTY
17676: LIST
17677: LIST
17678: PUSH
17679: LD_INT 0
17681: PUSH
17682: LD_INT 1
17684: PUSH
17685: EMPTY
17686: LIST
17687: LIST
17688: PUSH
17689: LD_INT 1
17691: NEG
17692: PUSH
17693: LD_INT 0
17695: PUSH
17696: EMPTY
17697: LIST
17698: LIST
17699: PUSH
17700: LD_INT 1
17702: NEG
17703: PUSH
17704: LD_INT 1
17706: NEG
17707: PUSH
17708: EMPTY
17709: LIST
17710: LIST
17711: PUSH
17712: LD_INT 1
17714: PUSH
17715: LD_INT 1
17717: NEG
17718: PUSH
17719: EMPTY
17720: LIST
17721: LIST
17722: PUSH
17723: LD_INT 2
17725: PUSH
17726: LD_INT 0
17728: PUSH
17729: EMPTY
17730: LIST
17731: LIST
17732: PUSH
17733: LD_INT 2
17735: PUSH
17736: LD_INT 1
17738: PUSH
17739: EMPTY
17740: LIST
17741: LIST
17742: PUSH
17743: LD_INT 1
17745: NEG
17746: PUSH
17747: LD_INT 1
17749: PUSH
17750: EMPTY
17751: LIST
17752: LIST
17753: PUSH
17754: LD_INT 2
17756: NEG
17757: PUSH
17758: LD_INT 0
17760: PUSH
17761: EMPTY
17762: LIST
17763: LIST
17764: PUSH
17765: LD_INT 2
17767: NEG
17768: PUSH
17769: LD_INT 1
17771: NEG
17772: PUSH
17773: EMPTY
17774: LIST
17775: LIST
17776: PUSH
17777: LD_INT 2
17779: PUSH
17780: LD_INT 1
17782: NEG
17783: PUSH
17784: EMPTY
17785: LIST
17786: LIST
17787: PUSH
17788: LD_INT 3
17790: PUSH
17791: LD_INT 0
17793: PUSH
17794: EMPTY
17795: LIST
17796: LIST
17797: PUSH
17798: LD_INT 3
17800: PUSH
17801: LD_INT 1
17803: PUSH
17804: EMPTY
17805: LIST
17806: LIST
17807: PUSH
17808: EMPTY
17809: LIST
17810: LIST
17811: LIST
17812: LIST
17813: LIST
17814: LIST
17815: LIST
17816: LIST
17817: LIST
17818: LIST
17819: LIST
17820: LIST
17821: LIST
17822: LIST
17823: LIST
17824: LIST
17825: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
17826: LD_ADDR_VAR 0 16
17830: PUSH
17831: LD_INT 0
17833: PUSH
17834: LD_INT 0
17836: PUSH
17837: EMPTY
17838: LIST
17839: LIST
17840: PUSH
17841: LD_INT 0
17843: PUSH
17844: LD_INT 1
17846: NEG
17847: PUSH
17848: EMPTY
17849: LIST
17850: LIST
17851: PUSH
17852: LD_INT 1
17854: PUSH
17855: LD_INT 0
17857: PUSH
17858: EMPTY
17859: LIST
17860: LIST
17861: PUSH
17862: LD_INT 1
17864: PUSH
17865: LD_INT 1
17867: PUSH
17868: EMPTY
17869: LIST
17870: LIST
17871: PUSH
17872: LD_INT 0
17874: PUSH
17875: LD_INT 1
17877: PUSH
17878: EMPTY
17879: LIST
17880: LIST
17881: PUSH
17882: LD_INT 1
17884: NEG
17885: PUSH
17886: LD_INT 0
17888: PUSH
17889: EMPTY
17890: LIST
17891: LIST
17892: PUSH
17893: LD_INT 1
17895: NEG
17896: PUSH
17897: LD_INT 1
17899: NEG
17900: PUSH
17901: EMPTY
17902: LIST
17903: LIST
17904: PUSH
17905: LD_INT 1
17907: NEG
17908: PUSH
17909: LD_INT 2
17911: NEG
17912: PUSH
17913: EMPTY
17914: LIST
17915: LIST
17916: PUSH
17917: LD_INT 2
17919: PUSH
17920: LD_INT 1
17922: PUSH
17923: EMPTY
17924: LIST
17925: LIST
17926: PUSH
17927: LD_INT 2
17929: PUSH
17930: LD_INT 2
17932: PUSH
17933: EMPTY
17934: LIST
17935: LIST
17936: PUSH
17937: LD_INT 1
17939: PUSH
17940: LD_INT 2
17942: PUSH
17943: EMPTY
17944: LIST
17945: LIST
17946: PUSH
17947: LD_INT 2
17949: NEG
17950: PUSH
17951: LD_INT 1
17953: NEG
17954: PUSH
17955: EMPTY
17956: LIST
17957: LIST
17958: PUSH
17959: LD_INT 2
17961: NEG
17962: PUSH
17963: LD_INT 2
17965: NEG
17966: PUSH
17967: EMPTY
17968: LIST
17969: LIST
17970: PUSH
17971: LD_INT 3
17973: PUSH
17974: LD_INT 2
17976: PUSH
17977: EMPTY
17978: LIST
17979: LIST
17980: PUSH
17981: LD_INT 3
17983: PUSH
17984: LD_INT 3
17986: PUSH
17987: EMPTY
17988: LIST
17989: LIST
17990: PUSH
17991: LD_INT 2
17993: PUSH
17994: LD_INT 3
17996: PUSH
17997: EMPTY
17998: LIST
17999: LIST
18000: PUSH
18001: EMPTY
18002: LIST
18003: LIST
18004: LIST
18005: LIST
18006: LIST
18007: LIST
18008: LIST
18009: LIST
18010: LIST
18011: LIST
18012: LIST
18013: LIST
18014: LIST
18015: LIST
18016: LIST
18017: LIST
18018: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18019: LD_ADDR_VAR 0 17
18023: PUSH
18024: LD_INT 0
18026: PUSH
18027: LD_INT 0
18029: PUSH
18030: EMPTY
18031: LIST
18032: LIST
18033: PUSH
18034: LD_INT 0
18036: PUSH
18037: LD_INT 1
18039: NEG
18040: PUSH
18041: EMPTY
18042: LIST
18043: LIST
18044: PUSH
18045: LD_INT 1
18047: PUSH
18048: LD_INT 0
18050: PUSH
18051: EMPTY
18052: LIST
18053: LIST
18054: PUSH
18055: LD_INT 1
18057: PUSH
18058: LD_INT 1
18060: PUSH
18061: EMPTY
18062: LIST
18063: LIST
18064: PUSH
18065: LD_INT 0
18067: PUSH
18068: LD_INT 1
18070: PUSH
18071: EMPTY
18072: LIST
18073: LIST
18074: PUSH
18075: LD_INT 1
18077: NEG
18078: PUSH
18079: LD_INT 0
18081: PUSH
18082: EMPTY
18083: LIST
18084: LIST
18085: PUSH
18086: LD_INT 1
18088: NEG
18089: PUSH
18090: LD_INT 1
18092: NEG
18093: PUSH
18094: EMPTY
18095: LIST
18096: LIST
18097: PUSH
18098: LD_INT 1
18100: NEG
18101: PUSH
18102: LD_INT 2
18104: NEG
18105: PUSH
18106: EMPTY
18107: LIST
18108: LIST
18109: PUSH
18110: LD_INT 0
18112: PUSH
18113: LD_INT 2
18115: NEG
18116: PUSH
18117: EMPTY
18118: LIST
18119: LIST
18120: PUSH
18121: LD_INT 1
18123: PUSH
18124: LD_INT 1
18126: NEG
18127: PUSH
18128: EMPTY
18129: LIST
18130: LIST
18131: PUSH
18132: LD_INT 2
18134: PUSH
18135: LD_INT 0
18137: PUSH
18138: EMPTY
18139: LIST
18140: LIST
18141: PUSH
18142: LD_INT 2
18144: PUSH
18145: LD_INT 1
18147: PUSH
18148: EMPTY
18149: LIST
18150: LIST
18151: PUSH
18152: LD_INT 2
18154: PUSH
18155: LD_INT 2
18157: PUSH
18158: EMPTY
18159: LIST
18160: LIST
18161: PUSH
18162: LD_INT 1
18164: PUSH
18165: LD_INT 2
18167: PUSH
18168: EMPTY
18169: LIST
18170: LIST
18171: PUSH
18172: LD_INT 0
18174: PUSH
18175: LD_INT 2
18177: PUSH
18178: EMPTY
18179: LIST
18180: LIST
18181: PUSH
18182: LD_INT 1
18184: NEG
18185: PUSH
18186: LD_INT 1
18188: PUSH
18189: EMPTY
18190: LIST
18191: LIST
18192: PUSH
18193: LD_INT 2
18195: NEG
18196: PUSH
18197: LD_INT 0
18199: PUSH
18200: EMPTY
18201: LIST
18202: LIST
18203: PUSH
18204: LD_INT 2
18206: NEG
18207: PUSH
18208: LD_INT 1
18210: NEG
18211: PUSH
18212: EMPTY
18213: LIST
18214: LIST
18215: PUSH
18216: LD_INT 2
18218: NEG
18219: PUSH
18220: LD_INT 2
18222: NEG
18223: PUSH
18224: EMPTY
18225: LIST
18226: LIST
18227: PUSH
18228: EMPTY
18229: LIST
18230: LIST
18231: LIST
18232: LIST
18233: LIST
18234: LIST
18235: LIST
18236: LIST
18237: LIST
18238: LIST
18239: LIST
18240: LIST
18241: LIST
18242: LIST
18243: LIST
18244: LIST
18245: LIST
18246: LIST
18247: LIST
18248: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18249: LD_ADDR_VAR 0 18
18253: PUSH
18254: LD_INT 0
18256: PUSH
18257: LD_INT 0
18259: PUSH
18260: EMPTY
18261: LIST
18262: LIST
18263: PUSH
18264: LD_INT 0
18266: PUSH
18267: LD_INT 1
18269: NEG
18270: PUSH
18271: EMPTY
18272: LIST
18273: LIST
18274: PUSH
18275: LD_INT 1
18277: PUSH
18278: LD_INT 0
18280: PUSH
18281: EMPTY
18282: LIST
18283: LIST
18284: PUSH
18285: LD_INT 1
18287: PUSH
18288: LD_INT 1
18290: PUSH
18291: EMPTY
18292: LIST
18293: LIST
18294: PUSH
18295: LD_INT 0
18297: PUSH
18298: LD_INT 1
18300: PUSH
18301: EMPTY
18302: LIST
18303: LIST
18304: PUSH
18305: LD_INT 1
18307: NEG
18308: PUSH
18309: LD_INT 0
18311: PUSH
18312: EMPTY
18313: LIST
18314: LIST
18315: PUSH
18316: LD_INT 1
18318: NEG
18319: PUSH
18320: LD_INT 1
18322: NEG
18323: PUSH
18324: EMPTY
18325: LIST
18326: LIST
18327: PUSH
18328: LD_INT 1
18330: NEG
18331: PUSH
18332: LD_INT 2
18334: NEG
18335: PUSH
18336: EMPTY
18337: LIST
18338: LIST
18339: PUSH
18340: LD_INT 0
18342: PUSH
18343: LD_INT 2
18345: NEG
18346: PUSH
18347: EMPTY
18348: LIST
18349: LIST
18350: PUSH
18351: LD_INT 1
18353: PUSH
18354: LD_INT 1
18356: NEG
18357: PUSH
18358: EMPTY
18359: LIST
18360: LIST
18361: PUSH
18362: LD_INT 2
18364: PUSH
18365: LD_INT 0
18367: PUSH
18368: EMPTY
18369: LIST
18370: LIST
18371: PUSH
18372: LD_INT 2
18374: PUSH
18375: LD_INT 1
18377: PUSH
18378: EMPTY
18379: LIST
18380: LIST
18381: PUSH
18382: LD_INT 2
18384: PUSH
18385: LD_INT 2
18387: PUSH
18388: EMPTY
18389: LIST
18390: LIST
18391: PUSH
18392: LD_INT 1
18394: PUSH
18395: LD_INT 2
18397: PUSH
18398: EMPTY
18399: LIST
18400: LIST
18401: PUSH
18402: LD_INT 0
18404: PUSH
18405: LD_INT 2
18407: PUSH
18408: EMPTY
18409: LIST
18410: LIST
18411: PUSH
18412: LD_INT 1
18414: NEG
18415: PUSH
18416: LD_INT 1
18418: PUSH
18419: EMPTY
18420: LIST
18421: LIST
18422: PUSH
18423: LD_INT 2
18425: NEG
18426: PUSH
18427: LD_INT 0
18429: PUSH
18430: EMPTY
18431: LIST
18432: LIST
18433: PUSH
18434: LD_INT 2
18436: NEG
18437: PUSH
18438: LD_INT 1
18440: NEG
18441: PUSH
18442: EMPTY
18443: LIST
18444: LIST
18445: PUSH
18446: LD_INT 2
18448: NEG
18449: PUSH
18450: LD_INT 2
18452: NEG
18453: PUSH
18454: EMPTY
18455: LIST
18456: LIST
18457: PUSH
18458: EMPTY
18459: LIST
18460: LIST
18461: LIST
18462: LIST
18463: LIST
18464: LIST
18465: LIST
18466: LIST
18467: LIST
18468: LIST
18469: LIST
18470: LIST
18471: LIST
18472: LIST
18473: LIST
18474: LIST
18475: LIST
18476: LIST
18477: LIST
18478: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18479: LD_ADDR_VAR 0 19
18483: PUSH
18484: LD_INT 0
18486: PUSH
18487: LD_INT 0
18489: PUSH
18490: EMPTY
18491: LIST
18492: LIST
18493: PUSH
18494: LD_INT 0
18496: PUSH
18497: LD_INT 1
18499: NEG
18500: PUSH
18501: EMPTY
18502: LIST
18503: LIST
18504: PUSH
18505: LD_INT 1
18507: PUSH
18508: LD_INT 0
18510: PUSH
18511: EMPTY
18512: LIST
18513: LIST
18514: PUSH
18515: LD_INT 1
18517: PUSH
18518: LD_INT 1
18520: PUSH
18521: EMPTY
18522: LIST
18523: LIST
18524: PUSH
18525: LD_INT 0
18527: PUSH
18528: LD_INT 1
18530: PUSH
18531: EMPTY
18532: LIST
18533: LIST
18534: PUSH
18535: LD_INT 1
18537: NEG
18538: PUSH
18539: LD_INT 0
18541: PUSH
18542: EMPTY
18543: LIST
18544: LIST
18545: PUSH
18546: LD_INT 1
18548: NEG
18549: PUSH
18550: LD_INT 1
18552: NEG
18553: PUSH
18554: EMPTY
18555: LIST
18556: LIST
18557: PUSH
18558: LD_INT 1
18560: NEG
18561: PUSH
18562: LD_INT 2
18564: NEG
18565: PUSH
18566: EMPTY
18567: LIST
18568: LIST
18569: PUSH
18570: LD_INT 0
18572: PUSH
18573: LD_INT 2
18575: NEG
18576: PUSH
18577: EMPTY
18578: LIST
18579: LIST
18580: PUSH
18581: LD_INT 1
18583: PUSH
18584: LD_INT 1
18586: NEG
18587: PUSH
18588: EMPTY
18589: LIST
18590: LIST
18591: PUSH
18592: LD_INT 2
18594: PUSH
18595: LD_INT 0
18597: PUSH
18598: EMPTY
18599: LIST
18600: LIST
18601: PUSH
18602: LD_INT 2
18604: PUSH
18605: LD_INT 1
18607: PUSH
18608: EMPTY
18609: LIST
18610: LIST
18611: PUSH
18612: LD_INT 2
18614: PUSH
18615: LD_INT 2
18617: PUSH
18618: EMPTY
18619: LIST
18620: LIST
18621: PUSH
18622: LD_INT 1
18624: PUSH
18625: LD_INT 2
18627: PUSH
18628: EMPTY
18629: LIST
18630: LIST
18631: PUSH
18632: LD_INT 0
18634: PUSH
18635: LD_INT 2
18637: PUSH
18638: EMPTY
18639: LIST
18640: LIST
18641: PUSH
18642: LD_INT 1
18644: NEG
18645: PUSH
18646: LD_INT 1
18648: PUSH
18649: EMPTY
18650: LIST
18651: LIST
18652: PUSH
18653: LD_INT 2
18655: NEG
18656: PUSH
18657: LD_INT 0
18659: PUSH
18660: EMPTY
18661: LIST
18662: LIST
18663: PUSH
18664: LD_INT 2
18666: NEG
18667: PUSH
18668: LD_INT 1
18670: NEG
18671: PUSH
18672: EMPTY
18673: LIST
18674: LIST
18675: PUSH
18676: LD_INT 2
18678: NEG
18679: PUSH
18680: LD_INT 2
18682: NEG
18683: PUSH
18684: EMPTY
18685: LIST
18686: LIST
18687: PUSH
18688: EMPTY
18689: LIST
18690: LIST
18691: LIST
18692: LIST
18693: LIST
18694: LIST
18695: LIST
18696: LIST
18697: LIST
18698: LIST
18699: LIST
18700: LIST
18701: LIST
18702: LIST
18703: LIST
18704: LIST
18705: LIST
18706: LIST
18707: LIST
18708: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18709: LD_ADDR_VAR 0 20
18713: PUSH
18714: LD_INT 0
18716: PUSH
18717: LD_INT 0
18719: PUSH
18720: EMPTY
18721: LIST
18722: LIST
18723: PUSH
18724: LD_INT 0
18726: PUSH
18727: LD_INT 1
18729: NEG
18730: PUSH
18731: EMPTY
18732: LIST
18733: LIST
18734: PUSH
18735: LD_INT 1
18737: PUSH
18738: LD_INT 0
18740: PUSH
18741: EMPTY
18742: LIST
18743: LIST
18744: PUSH
18745: LD_INT 1
18747: PUSH
18748: LD_INT 1
18750: PUSH
18751: EMPTY
18752: LIST
18753: LIST
18754: PUSH
18755: LD_INT 0
18757: PUSH
18758: LD_INT 1
18760: PUSH
18761: EMPTY
18762: LIST
18763: LIST
18764: PUSH
18765: LD_INT 1
18767: NEG
18768: PUSH
18769: LD_INT 0
18771: PUSH
18772: EMPTY
18773: LIST
18774: LIST
18775: PUSH
18776: LD_INT 1
18778: NEG
18779: PUSH
18780: LD_INT 1
18782: NEG
18783: PUSH
18784: EMPTY
18785: LIST
18786: LIST
18787: PUSH
18788: LD_INT 1
18790: NEG
18791: PUSH
18792: LD_INT 2
18794: NEG
18795: PUSH
18796: EMPTY
18797: LIST
18798: LIST
18799: PUSH
18800: LD_INT 0
18802: PUSH
18803: LD_INT 2
18805: NEG
18806: PUSH
18807: EMPTY
18808: LIST
18809: LIST
18810: PUSH
18811: LD_INT 1
18813: PUSH
18814: LD_INT 1
18816: NEG
18817: PUSH
18818: EMPTY
18819: LIST
18820: LIST
18821: PUSH
18822: LD_INT 2
18824: PUSH
18825: LD_INT 0
18827: PUSH
18828: EMPTY
18829: LIST
18830: LIST
18831: PUSH
18832: LD_INT 2
18834: PUSH
18835: LD_INT 1
18837: PUSH
18838: EMPTY
18839: LIST
18840: LIST
18841: PUSH
18842: LD_INT 2
18844: PUSH
18845: LD_INT 2
18847: PUSH
18848: EMPTY
18849: LIST
18850: LIST
18851: PUSH
18852: LD_INT 1
18854: PUSH
18855: LD_INT 2
18857: PUSH
18858: EMPTY
18859: LIST
18860: LIST
18861: PUSH
18862: LD_INT 0
18864: PUSH
18865: LD_INT 2
18867: PUSH
18868: EMPTY
18869: LIST
18870: LIST
18871: PUSH
18872: LD_INT 1
18874: NEG
18875: PUSH
18876: LD_INT 1
18878: PUSH
18879: EMPTY
18880: LIST
18881: LIST
18882: PUSH
18883: LD_INT 2
18885: NEG
18886: PUSH
18887: LD_INT 0
18889: PUSH
18890: EMPTY
18891: LIST
18892: LIST
18893: PUSH
18894: LD_INT 2
18896: NEG
18897: PUSH
18898: LD_INT 1
18900: NEG
18901: PUSH
18902: EMPTY
18903: LIST
18904: LIST
18905: PUSH
18906: LD_INT 2
18908: NEG
18909: PUSH
18910: LD_INT 2
18912: NEG
18913: PUSH
18914: EMPTY
18915: LIST
18916: LIST
18917: PUSH
18918: EMPTY
18919: LIST
18920: LIST
18921: LIST
18922: LIST
18923: LIST
18924: LIST
18925: LIST
18926: LIST
18927: LIST
18928: LIST
18929: LIST
18930: LIST
18931: LIST
18932: LIST
18933: LIST
18934: LIST
18935: LIST
18936: LIST
18937: LIST
18938: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18939: LD_ADDR_VAR 0 21
18943: PUSH
18944: LD_INT 0
18946: PUSH
18947: LD_INT 0
18949: PUSH
18950: EMPTY
18951: LIST
18952: LIST
18953: PUSH
18954: LD_INT 0
18956: PUSH
18957: LD_INT 1
18959: NEG
18960: PUSH
18961: EMPTY
18962: LIST
18963: LIST
18964: PUSH
18965: LD_INT 1
18967: PUSH
18968: LD_INT 0
18970: PUSH
18971: EMPTY
18972: LIST
18973: LIST
18974: PUSH
18975: LD_INT 1
18977: PUSH
18978: LD_INT 1
18980: PUSH
18981: EMPTY
18982: LIST
18983: LIST
18984: PUSH
18985: LD_INT 0
18987: PUSH
18988: LD_INT 1
18990: PUSH
18991: EMPTY
18992: LIST
18993: LIST
18994: PUSH
18995: LD_INT 1
18997: NEG
18998: PUSH
18999: LD_INT 0
19001: PUSH
19002: EMPTY
19003: LIST
19004: LIST
19005: PUSH
19006: LD_INT 1
19008: NEG
19009: PUSH
19010: LD_INT 1
19012: NEG
19013: PUSH
19014: EMPTY
19015: LIST
19016: LIST
19017: PUSH
19018: LD_INT 1
19020: NEG
19021: PUSH
19022: LD_INT 2
19024: NEG
19025: PUSH
19026: EMPTY
19027: LIST
19028: LIST
19029: PUSH
19030: LD_INT 0
19032: PUSH
19033: LD_INT 2
19035: NEG
19036: PUSH
19037: EMPTY
19038: LIST
19039: LIST
19040: PUSH
19041: LD_INT 1
19043: PUSH
19044: LD_INT 1
19046: NEG
19047: PUSH
19048: EMPTY
19049: LIST
19050: LIST
19051: PUSH
19052: LD_INT 2
19054: PUSH
19055: LD_INT 0
19057: PUSH
19058: EMPTY
19059: LIST
19060: LIST
19061: PUSH
19062: LD_INT 2
19064: PUSH
19065: LD_INT 1
19067: PUSH
19068: EMPTY
19069: LIST
19070: LIST
19071: PUSH
19072: LD_INT 2
19074: PUSH
19075: LD_INT 2
19077: PUSH
19078: EMPTY
19079: LIST
19080: LIST
19081: PUSH
19082: LD_INT 1
19084: PUSH
19085: LD_INT 2
19087: PUSH
19088: EMPTY
19089: LIST
19090: LIST
19091: PUSH
19092: LD_INT 0
19094: PUSH
19095: LD_INT 2
19097: PUSH
19098: EMPTY
19099: LIST
19100: LIST
19101: PUSH
19102: LD_INT 1
19104: NEG
19105: PUSH
19106: LD_INT 1
19108: PUSH
19109: EMPTY
19110: LIST
19111: LIST
19112: PUSH
19113: LD_INT 2
19115: NEG
19116: PUSH
19117: LD_INT 0
19119: PUSH
19120: EMPTY
19121: LIST
19122: LIST
19123: PUSH
19124: LD_INT 2
19126: NEG
19127: PUSH
19128: LD_INT 1
19130: NEG
19131: PUSH
19132: EMPTY
19133: LIST
19134: LIST
19135: PUSH
19136: LD_INT 2
19138: NEG
19139: PUSH
19140: LD_INT 2
19142: NEG
19143: PUSH
19144: EMPTY
19145: LIST
19146: LIST
19147: PUSH
19148: EMPTY
19149: LIST
19150: LIST
19151: LIST
19152: LIST
19153: LIST
19154: LIST
19155: LIST
19156: LIST
19157: LIST
19158: LIST
19159: LIST
19160: LIST
19161: LIST
19162: LIST
19163: LIST
19164: LIST
19165: LIST
19166: LIST
19167: LIST
19168: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19169: LD_ADDR_VAR 0 22
19173: PUSH
19174: LD_INT 0
19176: PUSH
19177: LD_INT 0
19179: PUSH
19180: EMPTY
19181: LIST
19182: LIST
19183: PUSH
19184: LD_INT 0
19186: PUSH
19187: LD_INT 1
19189: NEG
19190: PUSH
19191: EMPTY
19192: LIST
19193: LIST
19194: PUSH
19195: LD_INT 1
19197: PUSH
19198: LD_INT 0
19200: PUSH
19201: EMPTY
19202: LIST
19203: LIST
19204: PUSH
19205: LD_INT 1
19207: PUSH
19208: LD_INT 1
19210: PUSH
19211: EMPTY
19212: LIST
19213: LIST
19214: PUSH
19215: LD_INT 0
19217: PUSH
19218: LD_INT 1
19220: PUSH
19221: EMPTY
19222: LIST
19223: LIST
19224: PUSH
19225: LD_INT 1
19227: NEG
19228: PUSH
19229: LD_INT 0
19231: PUSH
19232: EMPTY
19233: LIST
19234: LIST
19235: PUSH
19236: LD_INT 1
19238: NEG
19239: PUSH
19240: LD_INT 1
19242: NEG
19243: PUSH
19244: EMPTY
19245: LIST
19246: LIST
19247: PUSH
19248: LD_INT 1
19250: NEG
19251: PUSH
19252: LD_INT 2
19254: NEG
19255: PUSH
19256: EMPTY
19257: LIST
19258: LIST
19259: PUSH
19260: LD_INT 0
19262: PUSH
19263: LD_INT 2
19265: NEG
19266: PUSH
19267: EMPTY
19268: LIST
19269: LIST
19270: PUSH
19271: LD_INT 1
19273: PUSH
19274: LD_INT 1
19276: NEG
19277: PUSH
19278: EMPTY
19279: LIST
19280: LIST
19281: PUSH
19282: LD_INT 2
19284: PUSH
19285: LD_INT 0
19287: PUSH
19288: EMPTY
19289: LIST
19290: LIST
19291: PUSH
19292: LD_INT 2
19294: PUSH
19295: LD_INT 1
19297: PUSH
19298: EMPTY
19299: LIST
19300: LIST
19301: PUSH
19302: LD_INT 2
19304: PUSH
19305: LD_INT 2
19307: PUSH
19308: EMPTY
19309: LIST
19310: LIST
19311: PUSH
19312: LD_INT 1
19314: PUSH
19315: LD_INT 2
19317: PUSH
19318: EMPTY
19319: LIST
19320: LIST
19321: PUSH
19322: LD_INT 0
19324: PUSH
19325: LD_INT 2
19327: PUSH
19328: EMPTY
19329: LIST
19330: LIST
19331: PUSH
19332: LD_INT 1
19334: NEG
19335: PUSH
19336: LD_INT 1
19338: PUSH
19339: EMPTY
19340: LIST
19341: LIST
19342: PUSH
19343: LD_INT 2
19345: NEG
19346: PUSH
19347: LD_INT 0
19349: PUSH
19350: EMPTY
19351: LIST
19352: LIST
19353: PUSH
19354: LD_INT 2
19356: NEG
19357: PUSH
19358: LD_INT 1
19360: NEG
19361: PUSH
19362: EMPTY
19363: LIST
19364: LIST
19365: PUSH
19366: LD_INT 2
19368: NEG
19369: PUSH
19370: LD_INT 2
19372: NEG
19373: PUSH
19374: EMPTY
19375: LIST
19376: LIST
19377: PUSH
19378: EMPTY
19379: LIST
19380: LIST
19381: LIST
19382: LIST
19383: LIST
19384: LIST
19385: LIST
19386: LIST
19387: LIST
19388: LIST
19389: LIST
19390: LIST
19391: LIST
19392: LIST
19393: LIST
19394: LIST
19395: LIST
19396: LIST
19397: LIST
19398: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
19399: LD_ADDR_VAR 0 23
19403: PUSH
19404: LD_INT 0
19406: PUSH
19407: LD_INT 0
19409: PUSH
19410: EMPTY
19411: LIST
19412: LIST
19413: PUSH
19414: LD_INT 0
19416: PUSH
19417: LD_INT 1
19419: NEG
19420: PUSH
19421: EMPTY
19422: LIST
19423: LIST
19424: PUSH
19425: LD_INT 1
19427: PUSH
19428: LD_INT 0
19430: PUSH
19431: EMPTY
19432: LIST
19433: LIST
19434: PUSH
19435: LD_INT 1
19437: PUSH
19438: LD_INT 1
19440: PUSH
19441: EMPTY
19442: LIST
19443: LIST
19444: PUSH
19445: LD_INT 0
19447: PUSH
19448: LD_INT 1
19450: PUSH
19451: EMPTY
19452: LIST
19453: LIST
19454: PUSH
19455: LD_INT 1
19457: NEG
19458: PUSH
19459: LD_INT 0
19461: PUSH
19462: EMPTY
19463: LIST
19464: LIST
19465: PUSH
19466: LD_INT 1
19468: NEG
19469: PUSH
19470: LD_INT 1
19472: NEG
19473: PUSH
19474: EMPTY
19475: LIST
19476: LIST
19477: PUSH
19478: LD_INT 1
19480: NEG
19481: PUSH
19482: LD_INT 2
19484: NEG
19485: PUSH
19486: EMPTY
19487: LIST
19488: LIST
19489: PUSH
19490: LD_INT 0
19492: PUSH
19493: LD_INT 2
19495: NEG
19496: PUSH
19497: EMPTY
19498: LIST
19499: LIST
19500: PUSH
19501: LD_INT 1
19503: PUSH
19504: LD_INT 1
19506: NEG
19507: PUSH
19508: EMPTY
19509: LIST
19510: LIST
19511: PUSH
19512: LD_INT 2
19514: PUSH
19515: LD_INT 0
19517: PUSH
19518: EMPTY
19519: LIST
19520: LIST
19521: PUSH
19522: LD_INT 2
19524: PUSH
19525: LD_INT 1
19527: PUSH
19528: EMPTY
19529: LIST
19530: LIST
19531: PUSH
19532: LD_INT 2
19534: PUSH
19535: LD_INT 2
19537: PUSH
19538: EMPTY
19539: LIST
19540: LIST
19541: PUSH
19542: LD_INT 1
19544: PUSH
19545: LD_INT 2
19547: PUSH
19548: EMPTY
19549: LIST
19550: LIST
19551: PUSH
19552: LD_INT 0
19554: PUSH
19555: LD_INT 2
19557: PUSH
19558: EMPTY
19559: LIST
19560: LIST
19561: PUSH
19562: LD_INT 1
19564: NEG
19565: PUSH
19566: LD_INT 1
19568: PUSH
19569: EMPTY
19570: LIST
19571: LIST
19572: PUSH
19573: LD_INT 2
19575: NEG
19576: PUSH
19577: LD_INT 0
19579: PUSH
19580: EMPTY
19581: LIST
19582: LIST
19583: PUSH
19584: LD_INT 2
19586: NEG
19587: PUSH
19588: LD_INT 1
19590: NEG
19591: PUSH
19592: EMPTY
19593: LIST
19594: LIST
19595: PUSH
19596: LD_INT 2
19598: NEG
19599: PUSH
19600: LD_INT 2
19602: NEG
19603: PUSH
19604: EMPTY
19605: LIST
19606: LIST
19607: PUSH
19608: LD_INT 2
19610: NEG
19611: PUSH
19612: LD_INT 3
19614: NEG
19615: PUSH
19616: EMPTY
19617: LIST
19618: LIST
19619: PUSH
19620: LD_INT 1
19622: NEG
19623: PUSH
19624: LD_INT 3
19626: NEG
19627: PUSH
19628: EMPTY
19629: LIST
19630: LIST
19631: PUSH
19632: LD_INT 1
19634: PUSH
19635: LD_INT 2
19637: NEG
19638: PUSH
19639: EMPTY
19640: LIST
19641: LIST
19642: PUSH
19643: LD_INT 2
19645: PUSH
19646: LD_INT 1
19648: NEG
19649: PUSH
19650: EMPTY
19651: LIST
19652: LIST
19653: PUSH
19654: EMPTY
19655: LIST
19656: LIST
19657: LIST
19658: LIST
19659: LIST
19660: LIST
19661: LIST
19662: LIST
19663: LIST
19664: LIST
19665: LIST
19666: LIST
19667: LIST
19668: LIST
19669: LIST
19670: LIST
19671: LIST
19672: LIST
19673: LIST
19674: LIST
19675: LIST
19676: LIST
19677: LIST
19678: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
19679: LD_ADDR_VAR 0 24
19683: PUSH
19684: LD_INT 0
19686: PUSH
19687: LD_INT 0
19689: PUSH
19690: EMPTY
19691: LIST
19692: LIST
19693: PUSH
19694: LD_INT 0
19696: PUSH
19697: LD_INT 1
19699: NEG
19700: PUSH
19701: EMPTY
19702: LIST
19703: LIST
19704: PUSH
19705: LD_INT 1
19707: PUSH
19708: LD_INT 0
19710: PUSH
19711: EMPTY
19712: LIST
19713: LIST
19714: PUSH
19715: LD_INT 1
19717: PUSH
19718: LD_INT 1
19720: PUSH
19721: EMPTY
19722: LIST
19723: LIST
19724: PUSH
19725: LD_INT 0
19727: PUSH
19728: LD_INT 1
19730: PUSH
19731: EMPTY
19732: LIST
19733: LIST
19734: PUSH
19735: LD_INT 1
19737: NEG
19738: PUSH
19739: LD_INT 0
19741: PUSH
19742: EMPTY
19743: LIST
19744: LIST
19745: PUSH
19746: LD_INT 1
19748: NEG
19749: PUSH
19750: LD_INT 1
19752: NEG
19753: PUSH
19754: EMPTY
19755: LIST
19756: LIST
19757: PUSH
19758: LD_INT 1
19760: NEG
19761: PUSH
19762: LD_INT 2
19764: NEG
19765: PUSH
19766: EMPTY
19767: LIST
19768: LIST
19769: PUSH
19770: LD_INT 0
19772: PUSH
19773: LD_INT 2
19775: NEG
19776: PUSH
19777: EMPTY
19778: LIST
19779: LIST
19780: PUSH
19781: LD_INT 1
19783: PUSH
19784: LD_INT 1
19786: NEG
19787: PUSH
19788: EMPTY
19789: LIST
19790: LIST
19791: PUSH
19792: LD_INT 2
19794: PUSH
19795: LD_INT 0
19797: PUSH
19798: EMPTY
19799: LIST
19800: LIST
19801: PUSH
19802: LD_INT 2
19804: PUSH
19805: LD_INT 1
19807: PUSH
19808: EMPTY
19809: LIST
19810: LIST
19811: PUSH
19812: LD_INT 2
19814: PUSH
19815: LD_INT 2
19817: PUSH
19818: EMPTY
19819: LIST
19820: LIST
19821: PUSH
19822: LD_INT 1
19824: PUSH
19825: LD_INT 2
19827: PUSH
19828: EMPTY
19829: LIST
19830: LIST
19831: PUSH
19832: LD_INT 0
19834: PUSH
19835: LD_INT 2
19837: PUSH
19838: EMPTY
19839: LIST
19840: LIST
19841: PUSH
19842: LD_INT 1
19844: NEG
19845: PUSH
19846: LD_INT 1
19848: PUSH
19849: EMPTY
19850: LIST
19851: LIST
19852: PUSH
19853: LD_INT 2
19855: NEG
19856: PUSH
19857: LD_INT 0
19859: PUSH
19860: EMPTY
19861: LIST
19862: LIST
19863: PUSH
19864: LD_INT 2
19866: NEG
19867: PUSH
19868: LD_INT 1
19870: NEG
19871: PUSH
19872: EMPTY
19873: LIST
19874: LIST
19875: PUSH
19876: LD_INT 2
19878: NEG
19879: PUSH
19880: LD_INT 2
19882: NEG
19883: PUSH
19884: EMPTY
19885: LIST
19886: LIST
19887: PUSH
19888: LD_INT 1
19890: PUSH
19891: LD_INT 2
19893: NEG
19894: PUSH
19895: EMPTY
19896: LIST
19897: LIST
19898: PUSH
19899: LD_INT 2
19901: PUSH
19902: LD_INT 1
19904: NEG
19905: PUSH
19906: EMPTY
19907: LIST
19908: LIST
19909: PUSH
19910: LD_INT 3
19912: PUSH
19913: LD_INT 1
19915: PUSH
19916: EMPTY
19917: LIST
19918: LIST
19919: PUSH
19920: LD_INT 3
19922: PUSH
19923: LD_INT 2
19925: PUSH
19926: EMPTY
19927: LIST
19928: LIST
19929: PUSH
19930: EMPTY
19931: LIST
19932: LIST
19933: LIST
19934: LIST
19935: LIST
19936: LIST
19937: LIST
19938: LIST
19939: LIST
19940: LIST
19941: LIST
19942: LIST
19943: LIST
19944: LIST
19945: LIST
19946: LIST
19947: LIST
19948: LIST
19949: LIST
19950: LIST
19951: LIST
19952: LIST
19953: LIST
19954: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
19955: LD_ADDR_VAR 0 25
19959: PUSH
19960: LD_INT 0
19962: PUSH
19963: LD_INT 0
19965: PUSH
19966: EMPTY
19967: LIST
19968: LIST
19969: PUSH
19970: LD_INT 0
19972: PUSH
19973: LD_INT 1
19975: NEG
19976: PUSH
19977: EMPTY
19978: LIST
19979: LIST
19980: PUSH
19981: LD_INT 1
19983: PUSH
19984: LD_INT 0
19986: PUSH
19987: EMPTY
19988: LIST
19989: LIST
19990: PUSH
19991: LD_INT 1
19993: PUSH
19994: LD_INT 1
19996: PUSH
19997: EMPTY
19998: LIST
19999: LIST
20000: PUSH
20001: LD_INT 0
20003: PUSH
20004: LD_INT 1
20006: PUSH
20007: EMPTY
20008: LIST
20009: LIST
20010: PUSH
20011: LD_INT 1
20013: NEG
20014: PUSH
20015: LD_INT 0
20017: PUSH
20018: EMPTY
20019: LIST
20020: LIST
20021: PUSH
20022: LD_INT 1
20024: NEG
20025: PUSH
20026: LD_INT 1
20028: NEG
20029: PUSH
20030: EMPTY
20031: LIST
20032: LIST
20033: PUSH
20034: LD_INT 1
20036: NEG
20037: PUSH
20038: LD_INT 2
20040: NEG
20041: PUSH
20042: EMPTY
20043: LIST
20044: LIST
20045: PUSH
20046: LD_INT 0
20048: PUSH
20049: LD_INT 2
20051: NEG
20052: PUSH
20053: EMPTY
20054: LIST
20055: LIST
20056: PUSH
20057: LD_INT 1
20059: PUSH
20060: LD_INT 1
20062: NEG
20063: PUSH
20064: EMPTY
20065: LIST
20066: LIST
20067: PUSH
20068: LD_INT 2
20070: PUSH
20071: LD_INT 0
20073: PUSH
20074: EMPTY
20075: LIST
20076: LIST
20077: PUSH
20078: LD_INT 2
20080: PUSH
20081: LD_INT 1
20083: PUSH
20084: EMPTY
20085: LIST
20086: LIST
20087: PUSH
20088: LD_INT 2
20090: PUSH
20091: LD_INT 2
20093: PUSH
20094: EMPTY
20095: LIST
20096: LIST
20097: PUSH
20098: LD_INT 1
20100: PUSH
20101: LD_INT 2
20103: PUSH
20104: EMPTY
20105: LIST
20106: LIST
20107: PUSH
20108: LD_INT 0
20110: PUSH
20111: LD_INT 2
20113: PUSH
20114: EMPTY
20115: LIST
20116: LIST
20117: PUSH
20118: LD_INT 1
20120: NEG
20121: PUSH
20122: LD_INT 1
20124: PUSH
20125: EMPTY
20126: LIST
20127: LIST
20128: PUSH
20129: LD_INT 2
20131: NEG
20132: PUSH
20133: LD_INT 0
20135: PUSH
20136: EMPTY
20137: LIST
20138: LIST
20139: PUSH
20140: LD_INT 2
20142: NEG
20143: PUSH
20144: LD_INT 1
20146: NEG
20147: PUSH
20148: EMPTY
20149: LIST
20150: LIST
20151: PUSH
20152: LD_INT 2
20154: NEG
20155: PUSH
20156: LD_INT 2
20158: NEG
20159: PUSH
20160: EMPTY
20161: LIST
20162: LIST
20163: PUSH
20164: LD_INT 3
20166: PUSH
20167: LD_INT 1
20169: PUSH
20170: EMPTY
20171: LIST
20172: LIST
20173: PUSH
20174: LD_INT 3
20176: PUSH
20177: LD_INT 2
20179: PUSH
20180: EMPTY
20181: LIST
20182: LIST
20183: PUSH
20184: LD_INT 2
20186: PUSH
20187: LD_INT 3
20189: PUSH
20190: EMPTY
20191: LIST
20192: LIST
20193: PUSH
20194: LD_INT 1
20196: PUSH
20197: LD_INT 3
20199: PUSH
20200: EMPTY
20201: LIST
20202: LIST
20203: PUSH
20204: EMPTY
20205: LIST
20206: LIST
20207: LIST
20208: LIST
20209: LIST
20210: LIST
20211: LIST
20212: LIST
20213: LIST
20214: LIST
20215: LIST
20216: LIST
20217: LIST
20218: LIST
20219: LIST
20220: LIST
20221: LIST
20222: LIST
20223: LIST
20224: LIST
20225: LIST
20226: LIST
20227: LIST
20228: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
20229: LD_ADDR_VAR 0 26
20233: PUSH
20234: LD_INT 0
20236: PUSH
20237: LD_INT 0
20239: PUSH
20240: EMPTY
20241: LIST
20242: LIST
20243: PUSH
20244: LD_INT 0
20246: PUSH
20247: LD_INT 1
20249: NEG
20250: PUSH
20251: EMPTY
20252: LIST
20253: LIST
20254: PUSH
20255: LD_INT 1
20257: PUSH
20258: LD_INT 0
20260: PUSH
20261: EMPTY
20262: LIST
20263: LIST
20264: PUSH
20265: LD_INT 1
20267: PUSH
20268: LD_INT 1
20270: PUSH
20271: EMPTY
20272: LIST
20273: LIST
20274: PUSH
20275: LD_INT 0
20277: PUSH
20278: LD_INT 1
20280: PUSH
20281: EMPTY
20282: LIST
20283: LIST
20284: PUSH
20285: LD_INT 1
20287: NEG
20288: PUSH
20289: LD_INT 0
20291: PUSH
20292: EMPTY
20293: LIST
20294: LIST
20295: PUSH
20296: LD_INT 1
20298: NEG
20299: PUSH
20300: LD_INT 1
20302: NEG
20303: PUSH
20304: EMPTY
20305: LIST
20306: LIST
20307: PUSH
20308: LD_INT 1
20310: NEG
20311: PUSH
20312: LD_INT 2
20314: NEG
20315: PUSH
20316: EMPTY
20317: LIST
20318: LIST
20319: PUSH
20320: LD_INT 0
20322: PUSH
20323: LD_INT 2
20325: NEG
20326: PUSH
20327: EMPTY
20328: LIST
20329: LIST
20330: PUSH
20331: LD_INT 1
20333: PUSH
20334: LD_INT 1
20336: NEG
20337: PUSH
20338: EMPTY
20339: LIST
20340: LIST
20341: PUSH
20342: LD_INT 2
20344: PUSH
20345: LD_INT 0
20347: PUSH
20348: EMPTY
20349: LIST
20350: LIST
20351: PUSH
20352: LD_INT 2
20354: PUSH
20355: LD_INT 1
20357: PUSH
20358: EMPTY
20359: LIST
20360: LIST
20361: PUSH
20362: LD_INT 2
20364: PUSH
20365: LD_INT 2
20367: PUSH
20368: EMPTY
20369: LIST
20370: LIST
20371: PUSH
20372: LD_INT 1
20374: PUSH
20375: LD_INT 2
20377: PUSH
20378: EMPTY
20379: LIST
20380: LIST
20381: PUSH
20382: LD_INT 0
20384: PUSH
20385: LD_INT 2
20387: PUSH
20388: EMPTY
20389: LIST
20390: LIST
20391: PUSH
20392: LD_INT 1
20394: NEG
20395: PUSH
20396: LD_INT 1
20398: PUSH
20399: EMPTY
20400: LIST
20401: LIST
20402: PUSH
20403: LD_INT 2
20405: NEG
20406: PUSH
20407: LD_INT 0
20409: PUSH
20410: EMPTY
20411: LIST
20412: LIST
20413: PUSH
20414: LD_INT 2
20416: NEG
20417: PUSH
20418: LD_INT 1
20420: NEG
20421: PUSH
20422: EMPTY
20423: LIST
20424: LIST
20425: PUSH
20426: LD_INT 2
20428: NEG
20429: PUSH
20430: LD_INT 2
20432: NEG
20433: PUSH
20434: EMPTY
20435: LIST
20436: LIST
20437: PUSH
20438: LD_INT 2
20440: PUSH
20441: LD_INT 3
20443: PUSH
20444: EMPTY
20445: LIST
20446: LIST
20447: PUSH
20448: LD_INT 1
20450: PUSH
20451: LD_INT 3
20453: PUSH
20454: EMPTY
20455: LIST
20456: LIST
20457: PUSH
20458: LD_INT 1
20460: NEG
20461: PUSH
20462: LD_INT 2
20464: PUSH
20465: EMPTY
20466: LIST
20467: LIST
20468: PUSH
20469: LD_INT 2
20471: NEG
20472: PUSH
20473: LD_INT 1
20475: PUSH
20476: EMPTY
20477: LIST
20478: LIST
20479: PUSH
20480: EMPTY
20481: LIST
20482: LIST
20483: LIST
20484: LIST
20485: LIST
20486: LIST
20487: LIST
20488: LIST
20489: LIST
20490: LIST
20491: LIST
20492: LIST
20493: LIST
20494: LIST
20495: LIST
20496: LIST
20497: LIST
20498: LIST
20499: LIST
20500: LIST
20501: LIST
20502: LIST
20503: LIST
20504: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
20505: LD_ADDR_VAR 0 27
20509: PUSH
20510: LD_INT 0
20512: PUSH
20513: LD_INT 0
20515: PUSH
20516: EMPTY
20517: LIST
20518: LIST
20519: PUSH
20520: LD_INT 0
20522: PUSH
20523: LD_INT 1
20525: NEG
20526: PUSH
20527: EMPTY
20528: LIST
20529: LIST
20530: PUSH
20531: LD_INT 1
20533: PUSH
20534: LD_INT 0
20536: PUSH
20537: EMPTY
20538: LIST
20539: LIST
20540: PUSH
20541: LD_INT 1
20543: PUSH
20544: LD_INT 1
20546: PUSH
20547: EMPTY
20548: LIST
20549: LIST
20550: PUSH
20551: LD_INT 0
20553: PUSH
20554: LD_INT 1
20556: PUSH
20557: EMPTY
20558: LIST
20559: LIST
20560: PUSH
20561: LD_INT 1
20563: NEG
20564: PUSH
20565: LD_INT 0
20567: PUSH
20568: EMPTY
20569: LIST
20570: LIST
20571: PUSH
20572: LD_INT 1
20574: NEG
20575: PUSH
20576: LD_INT 1
20578: NEG
20579: PUSH
20580: EMPTY
20581: LIST
20582: LIST
20583: PUSH
20584: LD_INT 1
20586: NEG
20587: PUSH
20588: LD_INT 2
20590: NEG
20591: PUSH
20592: EMPTY
20593: LIST
20594: LIST
20595: PUSH
20596: LD_INT 0
20598: PUSH
20599: LD_INT 2
20601: NEG
20602: PUSH
20603: EMPTY
20604: LIST
20605: LIST
20606: PUSH
20607: LD_INT 1
20609: PUSH
20610: LD_INT 1
20612: NEG
20613: PUSH
20614: EMPTY
20615: LIST
20616: LIST
20617: PUSH
20618: LD_INT 2
20620: PUSH
20621: LD_INT 0
20623: PUSH
20624: EMPTY
20625: LIST
20626: LIST
20627: PUSH
20628: LD_INT 2
20630: PUSH
20631: LD_INT 1
20633: PUSH
20634: EMPTY
20635: LIST
20636: LIST
20637: PUSH
20638: LD_INT 2
20640: PUSH
20641: LD_INT 2
20643: PUSH
20644: EMPTY
20645: LIST
20646: LIST
20647: PUSH
20648: LD_INT 1
20650: PUSH
20651: LD_INT 2
20653: PUSH
20654: EMPTY
20655: LIST
20656: LIST
20657: PUSH
20658: LD_INT 0
20660: PUSH
20661: LD_INT 2
20663: PUSH
20664: EMPTY
20665: LIST
20666: LIST
20667: PUSH
20668: LD_INT 1
20670: NEG
20671: PUSH
20672: LD_INT 1
20674: PUSH
20675: EMPTY
20676: LIST
20677: LIST
20678: PUSH
20679: LD_INT 2
20681: NEG
20682: PUSH
20683: LD_INT 0
20685: PUSH
20686: EMPTY
20687: LIST
20688: LIST
20689: PUSH
20690: LD_INT 2
20692: NEG
20693: PUSH
20694: LD_INT 1
20696: NEG
20697: PUSH
20698: EMPTY
20699: LIST
20700: LIST
20701: PUSH
20702: LD_INT 2
20704: NEG
20705: PUSH
20706: LD_INT 2
20708: NEG
20709: PUSH
20710: EMPTY
20711: LIST
20712: LIST
20713: PUSH
20714: LD_INT 1
20716: NEG
20717: PUSH
20718: LD_INT 2
20720: PUSH
20721: EMPTY
20722: LIST
20723: LIST
20724: PUSH
20725: LD_INT 2
20727: NEG
20728: PUSH
20729: LD_INT 1
20731: PUSH
20732: EMPTY
20733: LIST
20734: LIST
20735: PUSH
20736: LD_INT 3
20738: NEG
20739: PUSH
20740: LD_INT 1
20742: NEG
20743: PUSH
20744: EMPTY
20745: LIST
20746: LIST
20747: PUSH
20748: LD_INT 3
20750: NEG
20751: PUSH
20752: LD_INT 2
20754: NEG
20755: PUSH
20756: EMPTY
20757: LIST
20758: LIST
20759: PUSH
20760: EMPTY
20761: LIST
20762: LIST
20763: LIST
20764: LIST
20765: LIST
20766: LIST
20767: LIST
20768: LIST
20769: LIST
20770: LIST
20771: LIST
20772: LIST
20773: LIST
20774: LIST
20775: LIST
20776: LIST
20777: LIST
20778: LIST
20779: LIST
20780: LIST
20781: LIST
20782: LIST
20783: LIST
20784: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
20785: LD_ADDR_VAR 0 28
20789: PUSH
20790: LD_INT 0
20792: PUSH
20793: LD_INT 0
20795: PUSH
20796: EMPTY
20797: LIST
20798: LIST
20799: PUSH
20800: LD_INT 0
20802: PUSH
20803: LD_INT 1
20805: NEG
20806: PUSH
20807: EMPTY
20808: LIST
20809: LIST
20810: PUSH
20811: LD_INT 1
20813: PUSH
20814: LD_INT 0
20816: PUSH
20817: EMPTY
20818: LIST
20819: LIST
20820: PUSH
20821: LD_INT 1
20823: PUSH
20824: LD_INT 1
20826: PUSH
20827: EMPTY
20828: LIST
20829: LIST
20830: PUSH
20831: LD_INT 0
20833: PUSH
20834: LD_INT 1
20836: PUSH
20837: EMPTY
20838: LIST
20839: LIST
20840: PUSH
20841: LD_INT 1
20843: NEG
20844: PUSH
20845: LD_INT 0
20847: PUSH
20848: EMPTY
20849: LIST
20850: LIST
20851: PUSH
20852: LD_INT 1
20854: NEG
20855: PUSH
20856: LD_INT 1
20858: NEG
20859: PUSH
20860: EMPTY
20861: LIST
20862: LIST
20863: PUSH
20864: LD_INT 1
20866: NEG
20867: PUSH
20868: LD_INT 2
20870: NEG
20871: PUSH
20872: EMPTY
20873: LIST
20874: LIST
20875: PUSH
20876: LD_INT 0
20878: PUSH
20879: LD_INT 2
20881: NEG
20882: PUSH
20883: EMPTY
20884: LIST
20885: LIST
20886: PUSH
20887: LD_INT 1
20889: PUSH
20890: LD_INT 1
20892: NEG
20893: PUSH
20894: EMPTY
20895: LIST
20896: LIST
20897: PUSH
20898: LD_INT 2
20900: PUSH
20901: LD_INT 0
20903: PUSH
20904: EMPTY
20905: LIST
20906: LIST
20907: PUSH
20908: LD_INT 2
20910: PUSH
20911: LD_INT 1
20913: PUSH
20914: EMPTY
20915: LIST
20916: LIST
20917: PUSH
20918: LD_INT 2
20920: PUSH
20921: LD_INT 2
20923: PUSH
20924: EMPTY
20925: LIST
20926: LIST
20927: PUSH
20928: LD_INT 1
20930: PUSH
20931: LD_INT 2
20933: PUSH
20934: EMPTY
20935: LIST
20936: LIST
20937: PUSH
20938: LD_INT 0
20940: PUSH
20941: LD_INT 2
20943: PUSH
20944: EMPTY
20945: LIST
20946: LIST
20947: PUSH
20948: LD_INT 1
20950: NEG
20951: PUSH
20952: LD_INT 1
20954: PUSH
20955: EMPTY
20956: LIST
20957: LIST
20958: PUSH
20959: LD_INT 2
20961: NEG
20962: PUSH
20963: LD_INT 0
20965: PUSH
20966: EMPTY
20967: LIST
20968: LIST
20969: PUSH
20970: LD_INT 2
20972: NEG
20973: PUSH
20974: LD_INT 1
20976: NEG
20977: PUSH
20978: EMPTY
20979: LIST
20980: LIST
20981: PUSH
20982: LD_INT 2
20984: NEG
20985: PUSH
20986: LD_INT 2
20988: NEG
20989: PUSH
20990: EMPTY
20991: LIST
20992: LIST
20993: PUSH
20994: LD_INT 2
20996: NEG
20997: PUSH
20998: LD_INT 3
21000: NEG
21001: PUSH
21002: EMPTY
21003: LIST
21004: LIST
21005: PUSH
21006: LD_INT 1
21008: NEG
21009: PUSH
21010: LD_INT 3
21012: NEG
21013: PUSH
21014: EMPTY
21015: LIST
21016: LIST
21017: PUSH
21018: LD_INT 3
21020: NEG
21021: PUSH
21022: LD_INT 1
21024: NEG
21025: PUSH
21026: EMPTY
21027: LIST
21028: LIST
21029: PUSH
21030: LD_INT 3
21032: NEG
21033: PUSH
21034: LD_INT 2
21036: NEG
21037: PUSH
21038: EMPTY
21039: LIST
21040: LIST
21041: PUSH
21042: EMPTY
21043: LIST
21044: LIST
21045: LIST
21046: LIST
21047: LIST
21048: LIST
21049: LIST
21050: LIST
21051: LIST
21052: LIST
21053: LIST
21054: LIST
21055: LIST
21056: LIST
21057: LIST
21058: LIST
21059: LIST
21060: LIST
21061: LIST
21062: LIST
21063: LIST
21064: LIST
21065: LIST
21066: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21067: LD_ADDR_VAR 0 29
21071: PUSH
21072: LD_INT 0
21074: PUSH
21075: LD_INT 0
21077: PUSH
21078: EMPTY
21079: LIST
21080: LIST
21081: PUSH
21082: LD_INT 0
21084: PUSH
21085: LD_INT 1
21087: NEG
21088: PUSH
21089: EMPTY
21090: LIST
21091: LIST
21092: PUSH
21093: LD_INT 1
21095: PUSH
21096: LD_INT 0
21098: PUSH
21099: EMPTY
21100: LIST
21101: LIST
21102: PUSH
21103: LD_INT 1
21105: PUSH
21106: LD_INT 1
21108: PUSH
21109: EMPTY
21110: LIST
21111: LIST
21112: PUSH
21113: LD_INT 0
21115: PUSH
21116: LD_INT 1
21118: PUSH
21119: EMPTY
21120: LIST
21121: LIST
21122: PUSH
21123: LD_INT 1
21125: NEG
21126: PUSH
21127: LD_INT 0
21129: PUSH
21130: EMPTY
21131: LIST
21132: LIST
21133: PUSH
21134: LD_INT 1
21136: NEG
21137: PUSH
21138: LD_INT 1
21140: NEG
21141: PUSH
21142: EMPTY
21143: LIST
21144: LIST
21145: PUSH
21146: LD_INT 1
21148: NEG
21149: PUSH
21150: LD_INT 2
21152: NEG
21153: PUSH
21154: EMPTY
21155: LIST
21156: LIST
21157: PUSH
21158: LD_INT 0
21160: PUSH
21161: LD_INT 2
21163: NEG
21164: PUSH
21165: EMPTY
21166: LIST
21167: LIST
21168: PUSH
21169: LD_INT 1
21171: PUSH
21172: LD_INT 1
21174: NEG
21175: PUSH
21176: EMPTY
21177: LIST
21178: LIST
21179: PUSH
21180: LD_INT 2
21182: PUSH
21183: LD_INT 0
21185: PUSH
21186: EMPTY
21187: LIST
21188: LIST
21189: PUSH
21190: LD_INT 2
21192: PUSH
21193: LD_INT 1
21195: PUSH
21196: EMPTY
21197: LIST
21198: LIST
21199: PUSH
21200: LD_INT 1
21202: PUSH
21203: LD_INT 2
21205: PUSH
21206: EMPTY
21207: LIST
21208: LIST
21209: PUSH
21210: LD_INT 0
21212: PUSH
21213: LD_INT 2
21215: PUSH
21216: EMPTY
21217: LIST
21218: LIST
21219: PUSH
21220: LD_INT 1
21222: NEG
21223: PUSH
21224: LD_INT 1
21226: PUSH
21227: EMPTY
21228: LIST
21229: LIST
21230: PUSH
21231: LD_INT 2
21233: NEG
21234: PUSH
21235: LD_INT 1
21237: NEG
21238: PUSH
21239: EMPTY
21240: LIST
21241: LIST
21242: PUSH
21243: LD_INT 2
21245: NEG
21246: PUSH
21247: LD_INT 2
21249: NEG
21250: PUSH
21251: EMPTY
21252: LIST
21253: LIST
21254: PUSH
21255: LD_INT 2
21257: NEG
21258: PUSH
21259: LD_INT 3
21261: NEG
21262: PUSH
21263: EMPTY
21264: LIST
21265: LIST
21266: PUSH
21267: LD_INT 2
21269: PUSH
21270: LD_INT 1
21272: NEG
21273: PUSH
21274: EMPTY
21275: LIST
21276: LIST
21277: PUSH
21278: LD_INT 3
21280: PUSH
21281: LD_INT 1
21283: PUSH
21284: EMPTY
21285: LIST
21286: LIST
21287: PUSH
21288: LD_INT 1
21290: PUSH
21291: LD_INT 3
21293: PUSH
21294: EMPTY
21295: LIST
21296: LIST
21297: PUSH
21298: LD_INT 1
21300: NEG
21301: PUSH
21302: LD_INT 2
21304: PUSH
21305: EMPTY
21306: LIST
21307: LIST
21308: PUSH
21309: LD_INT 3
21311: NEG
21312: PUSH
21313: LD_INT 2
21315: NEG
21316: PUSH
21317: EMPTY
21318: LIST
21319: LIST
21320: PUSH
21321: EMPTY
21322: LIST
21323: LIST
21324: LIST
21325: LIST
21326: LIST
21327: LIST
21328: LIST
21329: LIST
21330: LIST
21331: LIST
21332: LIST
21333: LIST
21334: LIST
21335: LIST
21336: LIST
21337: LIST
21338: LIST
21339: LIST
21340: LIST
21341: LIST
21342: LIST
21343: LIST
21344: LIST
21345: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21346: LD_ADDR_VAR 0 30
21350: PUSH
21351: LD_INT 0
21353: PUSH
21354: LD_INT 0
21356: PUSH
21357: EMPTY
21358: LIST
21359: LIST
21360: PUSH
21361: LD_INT 0
21363: PUSH
21364: LD_INT 1
21366: NEG
21367: PUSH
21368: EMPTY
21369: LIST
21370: LIST
21371: PUSH
21372: LD_INT 1
21374: PUSH
21375: LD_INT 0
21377: PUSH
21378: EMPTY
21379: LIST
21380: LIST
21381: PUSH
21382: LD_INT 1
21384: PUSH
21385: LD_INT 1
21387: PUSH
21388: EMPTY
21389: LIST
21390: LIST
21391: PUSH
21392: LD_INT 0
21394: PUSH
21395: LD_INT 1
21397: PUSH
21398: EMPTY
21399: LIST
21400: LIST
21401: PUSH
21402: LD_INT 1
21404: NEG
21405: PUSH
21406: LD_INT 0
21408: PUSH
21409: EMPTY
21410: LIST
21411: LIST
21412: PUSH
21413: LD_INT 1
21415: NEG
21416: PUSH
21417: LD_INT 1
21419: NEG
21420: PUSH
21421: EMPTY
21422: LIST
21423: LIST
21424: PUSH
21425: LD_INT 1
21427: NEG
21428: PUSH
21429: LD_INT 2
21431: NEG
21432: PUSH
21433: EMPTY
21434: LIST
21435: LIST
21436: PUSH
21437: LD_INT 0
21439: PUSH
21440: LD_INT 2
21442: NEG
21443: PUSH
21444: EMPTY
21445: LIST
21446: LIST
21447: PUSH
21448: LD_INT 1
21450: PUSH
21451: LD_INT 1
21453: NEG
21454: PUSH
21455: EMPTY
21456: LIST
21457: LIST
21458: PUSH
21459: LD_INT 2
21461: PUSH
21462: LD_INT 0
21464: PUSH
21465: EMPTY
21466: LIST
21467: LIST
21468: PUSH
21469: LD_INT 2
21471: PUSH
21472: LD_INT 1
21474: PUSH
21475: EMPTY
21476: LIST
21477: LIST
21478: PUSH
21479: LD_INT 2
21481: PUSH
21482: LD_INT 2
21484: PUSH
21485: EMPTY
21486: LIST
21487: LIST
21488: PUSH
21489: LD_INT 1
21491: PUSH
21492: LD_INT 2
21494: PUSH
21495: EMPTY
21496: LIST
21497: LIST
21498: PUSH
21499: LD_INT 1
21501: NEG
21502: PUSH
21503: LD_INT 1
21505: PUSH
21506: EMPTY
21507: LIST
21508: LIST
21509: PUSH
21510: LD_INT 2
21512: NEG
21513: PUSH
21514: LD_INT 0
21516: PUSH
21517: EMPTY
21518: LIST
21519: LIST
21520: PUSH
21521: LD_INT 2
21523: NEG
21524: PUSH
21525: LD_INT 1
21527: NEG
21528: PUSH
21529: EMPTY
21530: LIST
21531: LIST
21532: PUSH
21533: LD_INT 1
21535: NEG
21536: PUSH
21537: LD_INT 3
21539: NEG
21540: PUSH
21541: EMPTY
21542: LIST
21543: LIST
21544: PUSH
21545: LD_INT 1
21547: PUSH
21548: LD_INT 2
21550: NEG
21551: PUSH
21552: EMPTY
21553: LIST
21554: LIST
21555: PUSH
21556: LD_INT 3
21558: PUSH
21559: LD_INT 2
21561: PUSH
21562: EMPTY
21563: LIST
21564: LIST
21565: PUSH
21566: LD_INT 2
21568: PUSH
21569: LD_INT 3
21571: PUSH
21572: EMPTY
21573: LIST
21574: LIST
21575: PUSH
21576: LD_INT 2
21578: NEG
21579: PUSH
21580: LD_INT 1
21582: PUSH
21583: EMPTY
21584: LIST
21585: LIST
21586: PUSH
21587: LD_INT 3
21589: NEG
21590: PUSH
21591: LD_INT 1
21593: NEG
21594: PUSH
21595: EMPTY
21596: LIST
21597: LIST
21598: PUSH
21599: EMPTY
21600: LIST
21601: LIST
21602: LIST
21603: LIST
21604: LIST
21605: LIST
21606: LIST
21607: LIST
21608: LIST
21609: LIST
21610: LIST
21611: LIST
21612: LIST
21613: LIST
21614: LIST
21615: LIST
21616: LIST
21617: LIST
21618: LIST
21619: LIST
21620: LIST
21621: LIST
21622: LIST
21623: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21624: LD_ADDR_VAR 0 31
21628: PUSH
21629: LD_INT 0
21631: PUSH
21632: LD_INT 0
21634: PUSH
21635: EMPTY
21636: LIST
21637: LIST
21638: PUSH
21639: LD_INT 0
21641: PUSH
21642: LD_INT 1
21644: NEG
21645: PUSH
21646: EMPTY
21647: LIST
21648: LIST
21649: PUSH
21650: LD_INT 1
21652: PUSH
21653: LD_INT 0
21655: PUSH
21656: EMPTY
21657: LIST
21658: LIST
21659: PUSH
21660: LD_INT 1
21662: PUSH
21663: LD_INT 1
21665: PUSH
21666: EMPTY
21667: LIST
21668: LIST
21669: PUSH
21670: LD_INT 0
21672: PUSH
21673: LD_INT 1
21675: PUSH
21676: EMPTY
21677: LIST
21678: LIST
21679: PUSH
21680: LD_INT 1
21682: NEG
21683: PUSH
21684: LD_INT 0
21686: PUSH
21687: EMPTY
21688: LIST
21689: LIST
21690: PUSH
21691: LD_INT 1
21693: NEG
21694: PUSH
21695: LD_INT 1
21697: NEG
21698: PUSH
21699: EMPTY
21700: LIST
21701: LIST
21702: PUSH
21703: LD_INT 1
21705: NEG
21706: PUSH
21707: LD_INT 2
21709: NEG
21710: PUSH
21711: EMPTY
21712: LIST
21713: LIST
21714: PUSH
21715: LD_INT 1
21717: PUSH
21718: LD_INT 1
21720: NEG
21721: PUSH
21722: EMPTY
21723: LIST
21724: LIST
21725: PUSH
21726: LD_INT 2
21728: PUSH
21729: LD_INT 0
21731: PUSH
21732: EMPTY
21733: LIST
21734: LIST
21735: PUSH
21736: LD_INT 2
21738: PUSH
21739: LD_INT 1
21741: PUSH
21742: EMPTY
21743: LIST
21744: LIST
21745: PUSH
21746: LD_INT 2
21748: PUSH
21749: LD_INT 2
21751: PUSH
21752: EMPTY
21753: LIST
21754: LIST
21755: PUSH
21756: LD_INT 1
21758: PUSH
21759: LD_INT 2
21761: PUSH
21762: EMPTY
21763: LIST
21764: LIST
21765: PUSH
21766: LD_INT 0
21768: PUSH
21769: LD_INT 2
21771: PUSH
21772: EMPTY
21773: LIST
21774: LIST
21775: PUSH
21776: LD_INT 1
21778: NEG
21779: PUSH
21780: LD_INT 1
21782: PUSH
21783: EMPTY
21784: LIST
21785: LIST
21786: PUSH
21787: LD_INT 2
21789: NEG
21790: PUSH
21791: LD_INT 1
21793: NEG
21794: PUSH
21795: EMPTY
21796: LIST
21797: LIST
21798: PUSH
21799: LD_INT 2
21801: NEG
21802: PUSH
21803: LD_INT 2
21805: NEG
21806: PUSH
21807: EMPTY
21808: LIST
21809: LIST
21810: PUSH
21811: LD_INT 2
21813: NEG
21814: PUSH
21815: LD_INT 3
21817: NEG
21818: PUSH
21819: EMPTY
21820: LIST
21821: LIST
21822: PUSH
21823: LD_INT 2
21825: PUSH
21826: LD_INT 1
21828: NEG
21829: PUSH
21830: EMPTY
21831: LIST
21832: LIST
21833: PUSH
21834: LD_INT 3
21836: PUSH
21837: LD_INT 1
21839: PUSH
21840: EMPTY
21841: LIST
21842: LIST
21843: PUSH
21844: LD_INT 1
21846: PUSH
21847: LD_INT 3
21849: PUSH
21850: EMPTY
21851: LIST
21852: LIST
21853: PUSH
21854: LD_INT 1
21856: NEG
21857: PUSH
21858: LD_INT 2
21860: PUSH
21861: EMPTY
21862: LIST
21863: LIST
21864: PUSH
21865: LD_INT 3
21867: NEG
21868: PUSH
21869: LD_INT 2
21871: NEG
21872: PUSH
21873: EMPTY
21874: LIST
21875: LIST
21876: PUSH
21877: EMPTY
21878: LIST
21879: LIST
21880: LIST
21881: LIST
21882: LIST
21883: LIST
21884: LIST
21885: LIST
21886: LIST
21887: LIST
21888: LIST
21889: LIST
21890: LIST
21891: LIST
21892: LIST
21893: LIST
21894: LIST
21895: LIST
21896: LIST
21897: LIST
21898: LIST
21899: LIST
21900: LIST
21901: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21902: LD_ADDR_VAR 0 32
21906: PUSH
21907: LD_INT 0
21909: PUSH
21910: LD_INT 0
21912: PUSH
21913: EMPTY
21914: LIST
21915: LIST
21916: PUSH
21917: LD_INT 0
21919: PUSH
21920: LD_INT 1
21922: NEG
21923: PUSH
21924: EMPTY
21925: LIST
21926: LIST
21927: PUSH
21928: LD_INT 1
21930: PUSH
21931: LD_INT 0
21933: PUSH
21934: EMPTY
21935: LIST
21936: LIST
21937: PUSH
21938: LD_INT 1
21940: PUSH
21941: LD_INT 1
21943: PUSH
21944: EMPTY
21945: LIST
21946: LIST
21947: PUSH
21948: LD_INT 0
21950: PUSH
21951: LD_INT 1
21953: PUSH
21954: EMPTY
21955: LIST
21956: LIST
21957: PUSH
21958: LD_INT 1
21960: NEG
21961: PUSH
21962: LD_INT 0
21964: PUSH
21965: EMPTY
21966: LIST
21967: LIST
21968: PUSH
21969: LD_INT 1
21971: NEG
21972: PUSH
21973: LD_INT 1
21975: NEG
21976: PUSH
21977: EMPTY
21978: LIST
21979: LIST
21980: PUSH
21981: LD_INT 1
21983: NEG
21984: PUSH
21985: LD_INT 2
21987: NEG
21988: PUSH
21989: EMPTY
21990: LIST
21991: LIST
21992: PUSH
21993: LD_INT 0
21995: PUSH
21996: LD_INT 2
21998: NEG
21999: PUSH
22000: EMPTY
22001: LIST
22002: LIST
22003: PUSH
22004: LD_INT 1
22006: PUSH
22007: LD_INT 1
22009: NEG
22010: PUSH
22011: EMPTY
22012: LIST
22013: LIST
22014: PUSH
22015: LD_INT 2
22017: PUSH
22018: LD_INT 1
22020: PUSH
22021: EMPTY
22022: LIST
22023: LIST
22024: PUSH
22025: LD_INT 2
22027: PUSH
22028: LD_INT 2
22030: PUSH
22031: EMPTY
22032: LIST
22033: LIST
22034: PUSH
22035: LD_INT 1
22037: PUSH
22038: LD_INT 2
22040: PUSH
22041: EMPTY
22042: LIST
22043: LIST
22044: PUSH
22045: LD_INT 0
22047: PUSH
22048: LD_INT 2
22050: PUSH
22051: EMPTY
22052: LIST
22053: LIST
22054: PUSH
22055: LD_INT 1
22057: NEG
22058: PUSH
22059: LD_INT 1
22061: PUSH
22062: EMPTY
22063: LIST
22064: LIST
22065: PUSH
22066: LD_INT 2
22068: NEG
22069: PUSH
22070: LD_INT 0
22072: PUSH
22073: EMPTY
22074: LIST
22075: LIST
22076: PUSH
22077: LD_INT 2
22079: NEG
22080: PUSH
22081: LD_INT 1
22083: NEG
22084: PUSH
22085: EMPTY
22086: LIST
22087: LIST
22088: PUSH
22089: LD_INT 1
22091: NEG
22092: PUSH
22093: LD_INT 3
22095: NEG
22096: PUSH
22097: EMPTY
22098: LIST
22099: LIST
22100: PUSH
22101: LD_INT 1
22103: PUSH
22104: LD_INT 2
22106: NEG
22107: PUSH
22108: EMPTY
22109: LIST
22110: LIST
22111: PUSH
22112: LD_INT 3
22114: PUSH
22115: LD_INT 2
22117: PUSH
22118: EMPTY
22119: LIST
22120: LIST
22121: PUSH
22122: LD_INT 2
22124: PUSH
22125: LD_INT 3
22127: PUSH
22128: EMPTY
22129: LIST
22130: LIST
22131: PUSH
22132: LD_INT 2
22134: NEG
22135: PUSH
22136: LD_INT 1
22138: PUSH
22139: EMPTY
22140: LIST
22141: LIST
22142: PUSH
22143: LD_INT 3
22145: NEG
22146: PUSH
22147: LD_INT 1
22149: NEG
22150: PUSH
22151: EMPTY
22152: LIST
22153: LIST
22154: PUSH
22155: EMPTY
22156: LIST
22157: LIST
22158: LIST
22159: LIST
22160: LIST
22161: LIST
22162: LIST
22163: LIST
22164: LIST
22165: LIST
22166: LIST
22167: LIST
22168: LIST
22169: LIST
22170: LIST
22171: LIST
22172: LIST
22173: LIST
22174: LIST
22175: LIST
22176: LIST
22177: LIST
22178: LIST
22179: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22180: LD_ADDR_VAR 0 33
22184: PUSH
22185: LD_INT 0
22187: PUSH
22188: LD_INT 0
22190: PUSH
22191: EMPTY
22192: LIST
22193: LIST
22194: PUSH
22195: LD_INT 0
22197: PUSH
22198: LD_INT 1
22200: NEG
22201: PUSH
22202: EMPTY
22203: LIST
22204: LIST
22205: PUSH
22206: LD_INT 1
22208: PUSH
22209: LD_INT 0
22211: PUSH
22212: EMPTY
22213: LIST
22214: LIST
22215: PUSH
22216: LD_INT 1
22218: PUSH
22219: LD_INT 1
22221: PUSH
22222: EMPTY
22223: LIST
22224: LIST
22225: PUSH
22226: LD_INT 0
22228: PUSH
22229: LD_INT 1
22231: PUSH
22232: EMPTY
22233: LIST
22234: LIST
22235: PUSH
22236: LD_INT 1
22238: NEG
22239: PUSH
22240: LD_INT 0
22242: PUSH
22243: EMPTY
22244: LIST
22245: LIST
22246: PUSH
22247: LD_INT 1
22249: NEG
22250: PUSH
22251: LD_INT 1
22253: NEG
22254: PUSH
22255: EMPTY
22256: LIST
22257: LIST
22258: PUSH
22259: LD_INT 1
22261: NEG
22262: PUSH
22263: LD_INT 2
22265: NEG
22266: PUSH
22267: EMPTY
22268: LIST
22269: LIST
22270: PUSH
22271: LD_INT 1
22273: PUSH
22274: LD_INT 1
22276: NEG
22277: PUSH
22278: EMPTY
22279: LIST
22280: LIST
22281: PUSH
22282: LD_INT 2
22284: PUSH
22285: LD_INT 0
22287: PUSH
22288: EMPTY
22289: LIST
22290: LIST
22291: PUSH
22292: LD_INT 2
22294: PUSH
22295: LD_INT 1
22297: PUSH
22298: EMPTY
22299: LIST
22300: LIST
22301: PUSH
22302: LD_INT 1
22304: PUSH
22305: LD_INT 2
22307: PUSH
22308: EMPTY
22309: LIST
22310: LIST
22311: PUSH
22312: LD_INT 0
22314: PUSH
22315: LD_INT 2
22317: PUSH
22318: EMPTY
22319: LIST
22320: LIST
22321: PUSH
22322: LD_INT 1
22324: NEG
22325: PUSH
22326: LD_INT 1
22328: PUSH
22329: EMPTY
22330: LIST
22331: LIST
22332: PUSH
22333: LD_INT 2
22335: NEG
22336: PUSH
22337: LD_INT 0
22339: PUSH
22340: EMPTY
22341: LIST
22342: LIST
22343: PUSH
22344: LD_INT 2
22346: NEG
22347: PUSH
22348: LD_INT 1
22350: NEG
22351: PUSH
22352: EMPTY
22353: LIST
22354: LIST
22355: PUSH
22356: LD_INT 2
22358: NEG
22359: PUSH
22360: LD_INT 2
22362: NEG
22363: PUSH
22364: EMPTY
22365: LIST
22366: LIST
22367: PUSH
22368: LD_INT 2
22370: NEG
22371: PUSH
22372: LD_INT 3
22374: NEG
22375: PUSH
22376: EMPTY
22377: LIST
22378: LIST
22379: PUSH
22380: LD_INT 2
22382: PUSH
22383: LD_INT 1
22385: NEG
22386: PUSH
22387: EMPTY
22388: LIST
22389: LIST
22390: PUSH
22391: LD_INT 3
22393: PUSH
22394: LD_INT 1
22396: PUSH
22397: EMPTY
22398: LIST
22399: LIST
22400: PUSH
22401: LD_INT 1
22403: PUSH
22404: LD_INT 3
22406: PUSH
22407: EMPTY
22408: LIST
22409: LIST
22410: PUSH
22411: LD_INT 1
22413: NEG
22414: PUSH
22415: LD_INT 2
22417: PUSH
22418: EMPTY
22419: LIST
22420: LIST
22421: PUSH
22422: LD_INT 3
22424: NEG
22425: PUSH
22426: LD_INT 2
22428: NEG
22429: PUSH
22430: EMPTY
22431: LIST
22432: LIST
22433: PUSH
22434: EMPTY
22435: LIST
22436: LIST
22437: LIST
22438: LIST
22439: LIST
22440: LIST
22441: LIST
22442: LIST
22443: LIST
22444: LIST
22445: LIST
22446: LIST
22447: LIST
22448: LIST
22449: LIST
22450: LIST
22451: LIST
22452: LIST
22453: LIST
22454: LIST
22455: LIST
22456: LIST
22457: LIST
22458: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22459: LD_ADDR_VAR 0 34
22463: PUSH
22464: LD_INT 0
22466: PUSH
22467: LD_INT 0
22469: PUSH
22470: EMPTY
22471: LIST
22472: LIST
22473: PUSH
22474: LD_INT 0
22476: PUSH
22477: LD_INT 1
22479: NEG
22480: PUSH
22481: EMPTY
22482: LIST
22483: LIST
22484: PUSH
22485: LD_INT 1
22487: PUSH
22488: LD_INT 0
22490: PUSH
22491: EMPTY
22492: LIST
22493: LIST
22494: PUSH
22495: LD_INT 1
22497: PUSH
22498: LD_INT 1
22500: PUSH
22501: EMPTY
22502: LIST
22503: LIST
22504: PUSH
22505: LD_INT 0
22507: PUSH
22508: LD_INT 1
22510: PUSH
22511: EMPTY
22512: LIST
22513: LIST
22514: PUSH
22515: LD_INT 1
22517: NEG
22518: PUSH
22519: LD_INT 0
22521: PUSH
22522: EMPTY
22523: LIST
22524: LIST
22525: PUSH
22526: LD_INT 1
22528: NEG
22529: PUSH
22530: LD_INT 1
22532: NEG
22533: PUSH
22534: EMPTY
22535: LIST
22536: LIST
22537: PUSH
22538: LD_INT 1
22540: NEG
22541: PUSH
22542: LD_INT 2
22544: NEG
22545: PUSH
22546: EMPTY
22547: LIST
22548: LIST
22549: PUSH
22550: LD_INT 0
22552: PUSH
22553: LD_INT 2
22555: NEG
22556: PUSH
22557: EMPTY
22558: LIST
22559: LIST
22560: PUSH
22561: LD_INT 1
22563: PUSH
22564: LD_INT 1
22566: NEG
22567: PUSH
22568: EMPTY
22569: LIST
22570: LIST
22571: PUSH
22572: LD_INT 2
22574: PUSH
22575: LD_INT 1
22577: PUSH
22578: EMPTY
22579: LIST
22580: LIST
22581: PUSH
22582: LD_INT 2
22584: PUSH
22585: LD_INT 2
22587: PUSH
22588: EMPTY
22589: LIST
22590: LIST
22591: PUSH
22592: LD_INT 1
22594: PUSH
22595: LD_INT 2
22597: PUSH
22598: EMPTY
22599: LIST
22600: LIST
22601: PUSH
22602: LD_INT 1
22604: NEG
22605: PUSH
22606: LD_INT 1
22608: PUSH
22609: EMPTY
22610: LIST
22611: LIST
22612: PUSH
22613: LD_INT 2
22615: NEG
22616: PUSH
22617: LD_INT 0
22619: PUSH
22620: EMPTY
22621: LIST
22622: LIST
22623: PUSH
22624: LD_INT 2
22626: NEG
22627: PUSH
22628: LD_INT 1
22630: NEG
22631: PUSH
22632: EMPTY
22633: LIST
22634: LIST
22635: PUSH
22636: LD_INT 2
22638: NEG
22639: PUSH
22640: LD_INT 2
22642: NEG
22643: PUSH
22644: EMPTY
22645: LIST
22646: LIST
22647: PUSH
22648: LD_INT 1
22650: NEG
22651: PUSH
22652: LD_INT 3
22654: NEG
22655: PUSH
22656: EMPTY
22657: LIST
22658: LIST
22659: PUSH
22660: LD_INT 1
22662: PUSH
22663: LD_INT 2
22665: NEG
22666: PUSH
22667: EMPTY
22668: LIST
22669: LIST
22670: PUSH
22671: LD_INT 3
22673: PUSH
22674: LD_INT 2
22676: PUSH
22677: EMPTY
22678: LIST
22679: LIST
22680: PUSH
22681: LD_INT 2
22683: PUSH
22684: LD_INT 3
22686: PUSH
22687: EMPTY
22688: LIST
22689: LIST
22690: PUSH
22691: LD_INT 2
22693: NEG
22694: PUSH
22695: LD_INT 1
22697: PUSH
22698: EMPTY
22699: LIST
22700: LIST
22701: PUSH
22702: LD_INT 3
22704: NEG
22705: PUSH
22706: LD_INT 1
22708: NEG
22709: PUSH
22710: EMPTY
22711: LIST
22712: LIST
22713: PUSH
22714: EMPTY
22715: LIST
22716: LIST
22717: LIST
22718: LIST
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: LIST
22724: LIST
22725: LIST
22726: LIST
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: LIST
22732: LIST
22733: LIST
22734: LIST
22735: LIST
22736: LIST
22737: LIST
22738: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
22739: LD_ADDR_VAR 0 35
22743: PUSH
22744: LD_INT 0
22746: PUSH
22747: LD_INT 0
22749: PUSH
22750: EMPTY
22751: LIST
22752: LIST
22753: PUSH
22754: LD_INT 0
22756: PUSH
22757: LD_INT 1
22759: NEG
22760: PUSH
22761: EMPTY
22762: LIST
22763: LIST
22764: PUSH
22765: LD_INT 1
22767: PUSH
22768: LD_INT 0
22770: PUSH
22771: EMPTY
22772: LIST
22773: LIST
22774: PUSH
22775: LD_INT 1
22777: PUSH
22778: LD_INT 1
22780: PUSH
22781: EMPTY
22782: LIST
22783: LIST
22784: PUSH
22785: LD_INT 0
22787: PUSH
22788: LD_INT 1
22790: PUSH
22791: EMPTY
22792: LIST
22793: LIST
22794: PUSH
22795: LD_INT 1
22797: NEG
22798: PUSH
22799: LD_INT 0
22801: PUSH
22802: EMPTY
22803: LIST
22804: LIST
22805: PUSH
22806: LD_INT 1
22808: NEG
22809: PUSH
22810: LD_INT 1
22812: NEG
22813: PUSH
22814: EMPTY
22815: LIST
22816: LIST
22817: PUSH
22818: LD_INT 2
22820: PUSH
22821: LD_INT 1
22823: PUSH
22824: EMPTY
22825: LIST
22826: LIST
22827: PUSH
22828: LD_INT 2
22830: NEG
22831: PUSH
22832: LD_INT 1
22834: NEG
22835: PUSH
22836: EMPTY
22837: LIST
22838: LIST
22839: PUSH
22840: EMPTY
22841: LIST
22842: LIST
22843: LIST
22844: LIST
22845: LIST
22846: LIST
22847: LIST
22848: LIST
22849: LIST
22850: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
22851: LD_ADDR_VAR 0 36
22855: PUSH
22856: LD_INT 0
22858: PUSH
22859: LD_INT 0
22861: PUSH
22862: EMPTY
22863: LIST
22864: LIST
22865: PUSH
22866: LD_INT 0
22868: PUSH
22869: LD_INT 1
22871: NEG
22872: PUSH
22873: EMPTY
22874: LIST
22875: LIST
22876: PUSH
22877: LD_INT 1
22879: PUSH
22880: LD_INT 0
22882: PUSH
22883: EMPTY
22884: LIST
22885: LIST
22886: PUSH
22887: LD_INT 1
22889: PUSH
22890: LD_INT 1
22892: PUSH
22893: EMPTY
22894: LIST
22895: LIST
22896: PUSH
22897: LD_INT 0
22899: PUSH
22900: LD_INT 1
22902: PUSH
22903: EMPTY
22904: LIST
22905: LIST
22906: PUSH
22907: LD_INT 1
22909: NEG
22910: PUSH
22911: LD_INT 0
22913: PUSH
22914: EMPTY
22915: LIST
22916: LIST
22917: PUSH
22918: LD_INT 1
22920: NEG
22921: PUSH
22922: LD_INT 1
22924: NEG
22925: PUSH
22926: EMPTY
22927: LIST
22928: LIST
22929: PUSH
22930: LD_INT 1
22932: NEG
22933: PUSH
22934: LD_INT 2
22936: NEG
22937: PUSH
22938: EMPTY
22939: LIST
22940: LIST
22941: PUSH
22942: LD_INT 1
22944: PUSH
22945: LD_INT 2
22947: PUSH
22948: EMPTY
22949: LIST
22950: LIST
22951: PUSH
22952: EMPTY
22953: LIST
22954: LIST
22955: LIST
22956: LIST
22957: LIST
22958: LIST
22959: LIST
22960: LIST
22961: LIST
22962: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
22963: LD_ADDR_VAR 0 37
22967: PUSH
22968: LD_INT 0
22970: PUSH
22971: LD_INT 0
22973: PUSH
22974: EMPTY
22975: LIST
22976: LIST
22977: PUSH
22978: LD_INT 0
22980: PUSH
22981: LD_INT 1
22983: NEG
22984: PUSH
22985: EMPTY
22986: LIST
22987: LIST
22988: PUSH
22989: LD_INT 1
22991: PUSH
22992: LD_INT 0
22994: PUSH
22995: EMPTY
22996: LIST
22997: LIST
22998: PUSH
22999: LD_INT 1
23001: PUSH
23002: LD_INT 1
23004: PUSH
23005: EMPTY
23006: LIST
23007: LIST
23008: PUSH
23009: LD_INT 0
23011: PUSH
23012: LD_INT 1
23014: PUSH
23015: EMPTY
23016: LIST
23017: LIST
23018: PUSH
23019: LD_INT 1
23021: NEG
23022: PUSH
23023: LD_INT 0
23025: PUSH
23026: EMPTY
23027: LIST
23028: LIST
23029: PUSH
23030: LD_INT 1
23032: NEG
23033: PUSH
23034: LD_INT 1
23036: NEG
23037: PUSH
23038: EMPTY
23039: LIST
23040: LIST
23041: PUSH
23042: LD_INT 1
23044: PUSH
23045: LD_INT 1
23047: NEG
23048: PUSH
23049: EMPTY
23050: LIST
23051: LIST
23052: PUSH
23053: LD_INT 1
23055: NEG
23056: PUSH
23057: LD_INT 1
23059: PUSH
23060: EMPTY
23061: LIST
23062: LIST
23063: PUSH
23064: EMPTY
23065: LIST
23066: LIST
23067: LIST
23068: LIST
23069: LIST
23070: LIST
23071: LIST
23072: LIST
23073: LIST
23074: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23075: LD_ADDR_VAR 0 38
23079: PUSH
23080: LD_INT 0
23082: PUSH
23083: LD_INT 0
23085: PUSH
23086: EMPTY
23087: LIST
23088: LIST
23089: PUSH
23090: LD_INT 0
23092: PUSH
23093: LD_INT 1
23095: NEG
23096: PUSH
23097: EMPTY
23098: LIST
23099: LIST
23100: PUSH
23101: LD_INT 1
23103: PUSH
23104: LD_INT 0
23106: PUSH
23107: EMPTY
23108: LIST
23109: LIST
23110: PUSH
23111: LD_INT 1
23113: PUSH
23114: LD_INT 1
23116: PUSH
23117: EMPTY
23118: LIST
23119: LIST
23120: PUSH
23121: LD_INT 0
23123: PUSH
23124: LD_INT 1
23126: PUSH
23127: EMPTY
23128: LIST
23129: LIST
23130: PUSH
23131: LD_INT 1
23133: NEG
23134: PUSH
23135: LD_INT 0
23137: PUSH
23138: EMPTY
23139: LIST
23140: LIST
23141: PUSH
23142: LD_INT 1
23144: NEG
23145: PUSH
23146: LD_INT 1
23148: NEG
23149: PUSH
23150: EMPTY
23151: LIST
23152: LIST
23153: PUSH
23154: LD_INT 2
23156: PUSH
23157: LD_INT 1
23159: PUSH
23160: EMPTY
23161: LIST
23162: LIST
23163: PUSH
23164: LD_INT 2
23166: NEG
23167: PUSH
23168: LD_INT 1
23170: NEG
23171: PUSH
23172: EMPTY
23173: LIST
23174: LIST
23175: PUSH
23176: EMPTY
23177: LIST
23178: LIST
23179: LIST
23180: LIST
23181: LIST
23182: LIST
23183: LIST
23184: LIST
23185: LIST
23186: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23187: LD_ADDR_VAR 0 39
23191: PUSH
23192: LD_INT 0
23194: PUSH
23195: LD_INT 0
23197: PUSH
23198: EMPTY
23199: LIST
23200: LIST
23201: PUSH
23202: LD_INT 0
23204: PUSH
23205: LD_INT 1
23207: NEG
23208: PUSH
23209: EMPTY
23210: LIST
23211: LIST
23212: PUSH
23213: LD_INT 1
23215: PUSH
23216: LD_INT 0
23218: PUSH
23219: EMPTY
23220: LIST
23221: LIST
23222: PUSH
23223: LD_INT 1
23225: PUSH
23226: LD_INT 1
23228: PUSH
23229: EMPTY
23230: LIST
23231: LIST
23232: PUSH
23233: LD_INT 0
23235: PUSH
23236: LD_INT 1
23238: PUSH
23239: EMPTY
23240: LIST
23241: LIST
23242: PUSH
23243: LD_INT 1
23245: NEG
23246: PUSH
23247: LD_INT 0
23249: PUSH
23250: EMPTY
23251: LIST
23252: LIST
23253: PUSH
23254: LD_INT 1
23256: NEG
23257: PUSH
23258: LD_INT 1
23260: NEG
23261: PUSH
23262: EMPTY
23263: LIST
23264: LIST
23265: PUSH
23266: LD_INT 1
23268: NEG
23269: PUSH
23270: LD_INT 2
23272: NEG
23273: PUSH
23274: EMPTY
23275: LIST
23276: LIST
23277: PUSH
23278: LD_INT 1
23280: PUSH
23281: LD_INT 2
23283: PUSH
23284: EMPTY
23285: LIST
23286: LIST
23287: PUSH
23288: EMPTY
23289: LIST
23290: LIST
23291: LIST
23292: LIST
23293: LIST
23294: LIST
23295: LIST
23296: LIST
23297: LIST
23298: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
23299: LD_ADDR_VAR 0 40
23303: PUSH
23304: LD_INT 0
23306: PUSH
23307: LD_INT 0
23309: PUSH
23310: EMPTY
23311: LIST
23312: LIST
23313: PUSH
23314: LD_INT 0
23316: PUSH
23317: LD_INT 1
23319: NEG
23320: PUSH
23321: EMPTY
23322: LIST
23323: LIST
23324: PUSH
23325: LD_INT 1
23327: PUSH
23328: LD_INT 0
23330: PUSH
23331: EMPTY
23332: LIST
23333: LIST
23334: PUSH
23335: LD_INT 1
23337: PUSH
23338: LD_INT 1
23340: PUSH
23341: EMPTY
23342: LIST
23343: LIST
23344: PUSH
23345: LD_INT 0
23347: PUSH
23348: LD_INT 1
23350: PUSH
23351: EMPTY
23352: LIST
23353: LIST
23354: PUSH
23355: LD_INT 1
23357: NEG
23358: PUSH
23359: LD_INT 0
23361: PUSH
23362: EMPTY
23363: LIST
23364: LIST
23365: PUSH
23366: LD_INT 1
23368: NEG
23369: PUSH
23370: LD_INT 1
23372: NEG
23373: PUSH
23374: EMPTY
23375: LIST
23376: LIST
23377: PUSH
23378: LD_INT 1
23380: PUSH
23381: LD_INT 1
23383: NEG
23384: PUSH
23385: EMPTY
23386: LIST
23387: LIST
23388: PUSH
23389: LD_INT 1
23391: NEG
23392: PUSH
23393: LD_INT 1
23395: PUSH
23396: EMPTY
23397: LIST
23398: LIST
23399: PUSH
23400: EMPTY
23401: LIST
23402: LIST
23403: LIST
23404: LIST
23405: LIST
23406: LIST
23407: LIST
23408: LIST
23409: LIST
23410: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23411: LD_ADDR_VAR 0 41
23415: PUSH
23416: LD_INT 0
23418: PUSH
23419: LD_INT 0
23421: PUSH
23422: EMPTY
23423: LIST
23424: LIST
23425: PUSH
23426: LD_INT 0
23428: PUSH
23429: LD_INT 1
23431: NEG
23432: PUSH
23433: EMPTY
23434: LIST
23435: LIST
23436: PUSH
23437: LD_INT 1
23439: PUSH
23440: LD_INT 0
23442: PUSH
23443: EMPTY
23444: LIST
23445: LIST
23446: PUSH
23447: LD_INT 1
23449: PUSH
23450: LD_INT 1
23452: PUSH
23453: EMPTY
23454: LIST
23455: LIST
23456: PUSH
23457: LD_INT 0
23459: PUSH
23460: LD_INT 1
23462: PUSH
23463: EMPTY
23464: LIST
23465: LIST
23466: PUSH
23467: LD_INT 1
23469: NEG
23470: PUSH
23471: LD_INT 0
23473: PUSH
23474: EMPTY
23475: LIST
23476: LIST
23477: PUSH
23478: LD_INT 1
23480: NEG
23481: PUSH
23482: LD_INT 1
23484: NEG
23485: PUSH
23486: EMPTY
23487: LIST
23488: LIST
23489: PUSH
23490: LD_INT 1
23492: NEG
23493: PUSH
23494: LD_INT 2
23496: NEG
23497: PUSH
23498: EMPTY
23499: LIST
23500: LIST
23501: PUSH
23502: LD_INT 1
23504: PUSH
23505: LD_INT 1
23507: NEG
23508: PUSH
23509: EMPTY
23510: LIST
23511: LIST
23512: PUSH
23513: LD_INT 2
23515: PUSH
23516: LD_INT 0
23518: PUSH
23519: EMPTY
23520: LIST
23521: LIST
23522: PUSH
23523: LD_INT 2
23525: PUSH
23526: LD_INT 1
23528: PUSH
23529: EMPTY
23530: LIST
23531: LIST
23532: PUSH
23533: LD_INT 2
23535: PUSH
23536: LD_INT 2
23538: PUSH
23539: EMPTY
23540: LIST
23541: LIST
23542: PUSH
23543: LD_INT 1
23545: PUSH
23546: LD_INT 2
23548: PUSH
23549: EMPTY
23550: LIST
23551: LIST
23552: PUSH
23553: LD_INT 1
23555: NEG
23556: PUSH
23557: LD_INT 1
23559: PUSH
23560: EMPTY
23561: LIST
23562: LIST
23563: PUSH
23564: LD_INT 2
23566: NEG
23567: PUSH
23568: LD_INT 0
23570: PUSH
23571: EMPTY
23572: LIST
23573: LIST
23574: PUSH
23575: LD_INT 2
23577: NEG
23578: PUSH
23579: LD_INT 1
23581: NEG
23582: PUSH
23583: EMPTY
23584: LIST
23585: LIST
23586: PUSH
23587: LD_INT 2
23589: NEG
23590: PUSH
23591: LD_INT 2
23593: NEG
23594: PUSH
23595: EMPTY
23596: LIST
23597: LIST
23598: PUSH
23599: LD_INT 2
23601: NEG
23602: PUSH
23603: LD_INT 3
23605: NEG
23606: PUSH
23607: EMPTY
23608: LIST
23609: LIST
23610: PUSH
23611: LD_INT 2
23613: PUSH
23614: LD_INT 1
23616: NEG
23617: PUSH
23618: EMPTY
23619: LIST
23620: LIST
23621: PUSH
23622: LD_INT 3
23624: PUSH
23625: LD_INT 0
23627: PUSH
23628: EMPTY
23629: LIST
23630: LIST
23631: PUSH
23632: LD_INT 3
23634: PUSH
23635: LD_INT 1
23637: PUSH
23638: EMPTY
23639: LIST
23640: LIST
23641: PUSH
23642: LD_INT 3
23644: PUSH
23645: LD_INT 2
23647: PUSH
23648: EMPTY
23649: LIST
23650: LIST
23651: PUSH
23652: LD_INT 3
23654: PUSH
23655: LD_INT 3
23657: PUSH
23658: EMPTY
23659: LIST
23660: LIST
23661: PUSH
23662: LD_INT 2
23664: PUSH
23665: LD_INT 3
23667: PUSH
23668: EMPTY
23669: LIST
23670: LIST
23671: PUSH
23672: LD_INT 2
23674: NEG
23675: PUSH
23676: LD_INT 1
23678: PUSH
23679: EMPTY
23680: LIST
23681: LIST
23682: PUSH
23683: LD_INT 3
23685: NEG
23686: PUSH
23687: LD_INT 0
23689: PUSH
23690: EMPTY
23691: LIST
23692: LIST
23693: PUSH
23694: LD_INT 3
23696: NEG
23697: PUSH
23698: LD_INT 1
23700: NEG
23701: PUSH
23702: EMPTY
23703: LIST
23704: LIST
23705: PUSH
23706: LD_INT 3
23708: NEG
23709: PUSH
23710: LD_INT 2
23712: NEG
23713: PUSH
23714: EMPTY
23715: LIST
23716: LIST
23717: PUSH
23718: LD_INT 3
23720: NEG
23721: PUSH
23722: LD_INT 3
23724: NEG
23725: PUSH
23726: EMPTY
23727: LIST
23728: LIST
23729: PUSH
23730: EMPTY
23731: LIST
23732: LIST
23733: LIST
23734: LIST
23735: LIST
23736: LIST
23737: LIST
23738: LIST
23739: LIST
23740: LIST
23741: LIST
23742: LIST
23743: LIST
23744: LIST
23745: LIST
23746: LIST
23747: LIST
23748: LIST
23749: LIST
23750: LIST
23751: LIST
23752: LIST
23753: LIST
23754: LIST
23755: LIST
23756: LIST
23757: LIST
23758: LIST
23759: LIST
23760: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23761: LD_ADDR_VAR 0 42
23765: PUSH
23766: LD_INT 0
23768: PUSH
23769: LD_INT 0
23771: PUSH
23772: EMPTY
23773: LIST
23774: LIST
23775: PUSH
23776: LD_INT 0
23778: PUSH
23779: LD_INT 1
23781: NEG
23782: PUSH
23783: EMPTY
23784: LIST
23785: LIST
23786: PUSH
23787: LD_INT 1
23789: PUSH
23790: LD_INT 0
23792: PUSH
23793: EMPTY
23794: LIST
23795: LIST
23796: PUSH
23797: LD_INT 1
23799: PUSH
23800: LD_INT 1
23802: PUSH
23803: EMPTY
23804: LIST
23805: LIST
23806: PUSH
23807: LD_INT 0
23809: PUSH
23810: LD_INT 1
23812: PUSH
23813: EMPTY
23814: LIST
23815: LIST
23816: PUSH
23817: LD_INT 1
23819: NEG
23820: PUSH
23821: LD_INT 0
23823: PUSH
23824: EMPTY
23825: LIST
23826: LIST
23827: PUSH
23828: LD_INT 1
23830: NEG
23831: PUSH
23832: LD_INT 1
23834: NEG
23835: PUSH
23836: EMPTY
23837: LIST
23838: LIST
23839: PUSH
23840: LD_INT 1
23842: NEG
23843: PUSH
23844: LD_INT 2
23846: NEG
23847: PUSH
23848: EMPTY
23849: LIST
23850: LIST
23851: PUSH
23852: LD_INT 0
23854: PUSH
23855: LD_INT 2
23857: NEG
23858: PUSH
23859: EMPTY
23860: LIST
23861: LIST
23862: PUSH
23863: LD_INT 1
23865: PUSH
23866: LD_INT 1
23868: NEG
23869: PUSH
23870: EMPTY
23871: LIST
23872: LIST
23873: PUSH
23874: LD_INT 2
23876: PUSH
23877: LD_INT 1
23879: PUSH
23880: EMPTY
23881: LIST
23882: LIST
23883: PUSH
23884: LD_INT 2
23886: PUSH
23887: LD_INT 2
23889: PUSH
23890: EMPTY
23891: LIST
23892: LIST
23893: PUSH
23894: LD_INT 1
23896: PUSH
23897: LD_INT 2
23899: PUSH
23900: EMPTY
23901: LIST
23902: LIST
23903: PUSH
23904: LD_INT 0
23906: PUSH
23907: LD_INT 2
23909: PUSH
23910: EMPTY
23911: LIST
23912: LIST
23913: PUSH
23914: LD_INT 1
23916: NEG
23917: PUSH
23918: LD_INT 1
23920: PUSH
23921: EMPTY
23922: LIST
23923: LIST
23924: PUSH
23925: LD_INT 2
23927: NEG
23928: PUSH
23929: LD_INT 1
23931: NEG
23932: PUSH
23933: EMPTY
23934: LIST
23935: LIST
23936: PUSH
23937: LD_INT 2
23939: NEG
23940: PUSH
23941: LD_INT 2
23943: NEG
23944: PUSH
23945: EMPTY
23946: LIST
23947: LIST
23948: PUSH
23949: LD_INT 2
23951: NEG
23952: PUSH
23953: LD_INT 3
23955: NEG
23956: PUSH
23957: EMPTY
23958: LIST
23959: LIST
23960: PUSH
23961: LD_INT 1
23963: NEG
23964: PUSH
23965: LD_INT 3
23967: NEG
23968: PUSH
23969: EMPTY
23970: LIST
23971: LIST
23972: PUSH
23973: LD_INT 0
23975: PUSH
23976: LD_INT 3
23978: NEG
23979: PUSH
23980: EMPTY
23981: LIST
23982: LIST
23983: PUSH
23984: LD_INT 1
23986: PUSH
23987: LD_INT 2
23989: NEG
23990: PUSH
23991: EMPTY
23992: LIST
23993: LIST
23994: PUSH
23995: LD_INT 3
23997: PUSH
23998: LD_INT 2
24000: PUSH
24001: EMPTY
24002: LIST
24003: LIST
24004: PUSH
24005: LD_INT 3
24007: PUSH
24008: LD_INT 3
24010: PUSH
24011: EMPTY
24012: LIST
24013: LIST
24014: PUSH
24015: LD_INT 2
24017: PUSH
24018: LD_INT 3
24020: PUSH
24021: EMPTY
24022: LIST
24023: LIST
24024: PUSH
24025: LD_INT 1
24027: PUSH
24028: LD_INT 3
24030: PUSH
24031: EMPTY
24032: LIST
24033: LIST
24034: PUSH
24035: LD_INT 0
24037: PUSH
24038: LD_INT 3
24040: PUSH
24041: EMPTY
24042: LIST
24043: LIST
24044: PUSH
24045: LD_INT 1
24047: NEG
24048: PUSH
24049: LD_INT 2
24051: PUSH
24052: EMPTY
24053: LIST
24054: LIST
24055: PUSH
24056: LD_INT 3
24058: NEG
24059: PUSH
24060: LD_INT 2
24062: NEG
24063: PUSH
24064: EMPTY
24065: LIST
24066: LIST
24067: PUSH
24068: LD_INT 3
24070: NEG
24071: PUSH
24072: LD_INT 3
24074: NEG
24075: PUSH
24076: EMPTY
24077: LIST
24078: LIST
24079: PUSH
24080: EMPTY
24081: LIST
24082: LIST
24083: LIST
24084: LIST
24085: LIST
24086: LIST
24087: LIST
24088: LIST
24089: LIST
24090: LIST
24091: LIST
24092: LIST
24093: LIST
24094: LIST
24095: LIST
24096: LIST
24097: LIST
24098: LIST
24099: LIST
24100: LIST
24101: LIST
24102: LIST
24103: LIST
24104: LIST
24105: LIST
24106: LIST
24107: LIST
24108: LIST
24109: LIST
24110: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24111: LD_ADDR_VAR 0 43
24115: PUSH
24116: LD_INT 0
24118: PUSH
24119: LD_INT 0
24121: PUSH
24122: EMPTY
24123: LIST
24124: LIST
24125: PUSH
24126: LD_INT 0
24128: PUSH
24129: LD_INT 1
24131: NEG
24132: PUSH
24133: EMPTY
24134: LIST
24135: LIST
24136: PUSH
24137: LD_INT 1
24139: PUSH
24140: LD_INT 0
24142: PUSH
24143: EMPTY
24144: LIST
24145: LIST
24146: PUSH
24147: LD_INT 1
24149: PUSH
24150: LD_INT 1
24152: PUSH
24153: EMPTY
24154: LIST
24155: LIST
24156: PUSH
24157: LD_INT 0
24159: PUSH
24160: LD_INT 1
24162: PUSH
24163: EMPTY
24164: LIST
24165: LIST
24166: PUSH
24167: LD_INT 1
24169: NEG
24170: PUSH
24171: LD_INT 0
24173: PUSH
24174: EMPTY
24175: LIST
24176: LIST
24177: PUSH
24178: LD_INT 1
24180: NEG
24181: PUSH
24182: LD_INT 1
24184: NEG
24185: PUSH
24186: EMPTY
24187: LIST
24188: LIST
24189: PUSH
24190: LD_INT 1
24192: NEG
24193: PUSH
24194: LD_INT 2
24196: NEG
24197: PUSH
24198: EMPTY
24199: LIST
24200: LIST
24201: PUSH
24202: LD_INT 0
24204: PUSH
24205: LD_INT 2
24207: NEG
24208: PUSH
24209: EMPTY
24210: LIST
24211: LIST
24212: PUSH
24213: LD_INT 1
24215: PUSH
24216: LD_INT 1
24218: NEG
24219: PUSH
24220: EMPTY
24221: LIST
24222: LIST
24223: PUSH
24224: LD_INT 2
24226: PUSH
24227: LD_INT 0
24229: PUSH
24230: EMPTY
24231: LIST
24232: LIST
24233: PUSH
24234: LD_INT 2
24236: PUSH
24237: LD_INT 1
24239: PUSH
24240: EMPTY
24241: LIST
24242: LIST
24243: PUSH
24244: LD_INT 1
24246: PUSH
24247: LD_INT 2
24249: PUSH
24250: EMPTY
24251: LIST
24252: LIST
24253: PUSH
24254: LD_INT 0
24256: PUSH
24257: LD_INT 2
24259: PUSH
24260: EMPTY
24261: LIST
24262: LIST
24263: PUSH
24264: LD_INT 1
24266: NEG
24267: PUSH
24268: LD_INT 1
24270: PUSH
24271: EMPTY
24272: LIST
24273: LIST
24274: PUSH
24275: LD_INT 2
24277: NEG
24278: PUSH
24279: LD_INT 0
24281: PUSH
24282: EMPTY
24283: LIST
24284: LIST
24285: PUSH
24286: LD_INT 2
24288: NEG
24289: PUSH
24290: LD_INT 1
24292: NEG
24293: PUSH
24294: EMPTY
24295: LIST
24296: LIST
24297: PUSH
24298: LD_INT 1
24300: NEG
24301: PUSH
24302: LD_INT 3
24304: NEG
24305: PUSH
24306: EMPTY
24307: LIST
24308: LIST
24309: PUSH
24310: LD_INT 0
24312: PUSH
24313: LD_INT 3
24315: NEG
24316: PUSH
24317: EMPTY
24318: LIST
24319: LIST
24320: PUSH
24321: LD_INT 1
24323: PUSH
24324: LD_INT 2
24326: NEG
24327: PUSH
24328: EMPTY
24329: LIST
24330: LIST
24331: PUSH
24332: LD_INT 2
24334: PUSH
24335: LD_INT 1
24337: NEG
24338: PUSH
24339: EMPTY
24340: LIST
24341: LIST
24342: PUSH
24343: LD_INT 3
24345: PUSH
24346: LD_INT 0
24348: PUSH
24349: EMPTY
24350: LIST
24351: LIST
24352: PUSH
24353: LD_INT 3
24355: PUSH
24356: LD_INT 1
24358: PUSH
24359: EMPTY
24360: LIST
24361: LIST
24362: PUSH
24363: LD_INT 1
24365: PUSH
24366: LD_INT 3
24368: PUSH
24369: EMPTY
24370: LIST
24371: LIST
24372: PUSH
24373: LD_INT 0
24375: PUSH
24376: LD_INT 3
24378: PUSH
24379: EMPTY
24380: LIST
24381: LIST
24382: PUSH
24383: LD_INT 1
24385: NEG
24386: PUSH
24387: LD_INT 2
24389: PUSH
24390: EMPTY
24391: LIST
24392: LIST
24393: PUSH
24394: LD_INT 2
24396: NEG
24397: PUSH
24398: LD_INT 1
24400: PUSH
24401: EMPTY
24402: LIST
24403: LIST
24404: PUSH
24405: LD_INT 3
24407: NEG
24408: PUSH
24409: LD_INT 0
24411: PUSH
24412: EMPTY
24413: LIST
24414: LIST
24415: PUSH
24416: LD_INT 3
24418: NEG
24419: PUSH
24420: LD_INT 1
24422: NEG
24423: PUSH
24424: EMPTY
24425: LIST
24426: LIST
24427: PUSH
24428: EMPTY
24429: LIST
24430: LIST
24431: LIST
24432: LIST
24433: LIST
24434: LIST
24435: LIST
24436: LIST
24437: LIST
24438: LIST
24439: LIST
24440: LIST
24441: LIST
24442: LIST
24443: LIST
24444: LIST
24445: LIST
24446: LIST
24447: LIST
24448: LIST
24449: LIST
24450: LIST
24451: LIST
24452: LIST
24453: LIST
24454: LIST
24455: LIST
24456: LIST
24457: LIST
24458: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24459: LD_ADDR_VAR 0 44
24463: PUSH
24464: LD_INT 0
24466: PUSH
24467: LD_INT 0
24469: PUSH
24470: EMPTY
24471: LIST
24472: LIST
24473: PUSH
24474: LD_INT 0
24476: PUSH
24477: LD_INT 1
24479: NEG
24480: PUSH
24481: EMPTY
24482: LIST
24483: LIST
24484: PUSH
24485: LD_INT 1
24487: PUSH
24488: LD_INT 0
24490: PUSH
24491: EMPTY
24492: LIST
24493: LIST
24494: PUSH
24495: LD_INT 1
24497: PUSH
24498: LD_INT 1
24500: PUSH
24501: EMPTY
24502: LIST
24503: LIST
24504: PUSH
24505: LD_INT 0
24507: PUSH
24508: LD_INT 1
24510: PUSH
24511: EMPTY
24512: LIST
24513: LIST
24514: PUSH
24515: LD_INT 1
24517: NEG
24518: PUSH
24519: LD_INT 0
24521: PUSH
24522: EMPTY
24523: LIST
24524: LIST
24525: PUSH
24526: LD_INT 1
24528: NEG
24529: PUSH
24530: LD_INT 1
24532: NEG
24533: PUSH
24534: EMPTY
24535: LIST
24536: LIST
24537: PUSH
24538: LD_INT 1
24540: NEG
24541: PUSH
24542: LD_INT 2
24544: NEG
24545: PUSH
24546: EMPTY
24547: LIST
24548: LIST
24549: PUSH
24550: LD_INT 1
24552: PUSH
24553: LD_INT 1
24555: NEG
24556: PUSH
24557: EMPTY
24558: LIST
24559: LIST
24560: PUSH
24561: LD_INT 2
24563: PUSH
24564: LD_INT 0
24566: PUSH
24567: EMPTY
24568: LIST
24569: LIST
24570: PUSH
24571: LD_INT 2
24573: PUSH
24574: LD_INT 1
24576: PUSH
24577: EMPTY
24578: LIST
24579: LIST
24580: PUSH
24581: LD_INT 2
24583: PUSH
24584: LD_INT 2
24586: PUSH
24587: EMPTY
24588: LIST
24589: LIST
24590: PUSH
24591: LD_INT 1
24593: PUSH
24594: LD_INT 2
24596: PUSH
24597: EMPTY
24598: LIST
24599: LIST
24600: PUSH
24601: LD_INT 1
24603: NEG
24604: PUSH
24605: LD_INT 1
24607: PUSH
24608: EMPTY
24609: LIST
24610: LIST
24611: PUSH
24612: LD_INT 2
24614: NEG
24615: PUSH
24616: LD_INT 0
24618: PUSH
24619: EMPTY
24620: LIST
24621: LIST
24622: PUSH
24623: LD_INT 2
24625: NEG
24626: PUSH
24627: LD_INT 1
24629: NEG
24630: PUSH
24631: EMPTY
24632: LIST
24633: LIST
24634: PUSH
24635: LD_INT 2
24637: NEG
24638: PUSH
24639: LD_INT 2
24641: NEG
24642: PUSH
24643: EMPTY
24644: LIST
24645: LIST
24646: PUSH
24647: LD_INT 2
24649: NEG
24650: PUSH
24651: LD_INT 3
24653: NEG
24654: PUSH
24655: EMPTY
24656: LIST
24657: LIST
24658: PUSH
24659: LD_INT 2
24661: PUSH
24662: LD_INT 1
24664: NEG
24665: PUSH
24666: EMPTY
24667: LIST
24668: LIST
24669: PUSH
24670: LD_INT 3
24672: PUSH
24673: LD_INT 0
24675: PUSH
24676: EMPTY
24677: LIST
24678: LIST
24679: PUSH
24680: LD_INT 3
24682: PUSH
24683: LD_INT 1
24685: PUSH
24686: EMPTY
24687: LIST
24688: LIST
24689: PUSH
24690: LD_INT 3
24692: PUSH
24693: LD_INT 2
24695: PUSH
24696: EMPTY
24697: LIST
24698: LIST
24699: PUSH
24700: LD_INT 3
24702: PUSH
24703: LD_INT 3
24705: PUSH
24706: EMPTY
24707: LIST
24708: LIST
24709: PUSH
24710: LD_INT 2
24712: PUSH
24713: LD_INT 3
24715: PUSH
24716: EMPTY
24717: LIST
24718: LIST
24719: PUSH
24720: LD_INT 2
24722: NEG
24723: PUSH
24724: LD_INT 1
24726: PUSH
24727: EMPTY
24728: LIST
24729: LIST
24730: PUSH
24731: LD_INT 3
24733: NEG
24734: PUSH
24735: LD_INT 0
24737: PUSH
24738: EMPTY
24739: LIST
24740: LIST
24741: PUSH
24742: LD_INT 3
24744: NEG
24745: PUSH
24746: LD_INT 1
24748: NEG
24749: PUSH
24750: EMPTY
24751: LIST
24752: LIST
24753: PUSH
24754: LD_INT 3
24756: NEG
24757: PUSH
24758: LD_INT 2
24760: NEG
24761: PUSH
24762: EMPTY
24763: LIST
24764: LIST
24765: PUSH
24766: LD_INT 3
24768: NEG
24769: PUSH
24770: LD_INT 3
24772: NEG
24773: PUSH
24774: EMPTY
24775: LIST
24776: LIST
24777: PUSH
24778: EMPTY
24779: LIST
24780: LIST
24781: LIST
24782: LIST
24783: LIST
24784: LIST
24785: LIST
24786: LIST
24787: LIST
24788: LIST
24789: LIST
24790: LIST
24791: LIST
24792: LIST
24793: LIST
24794: LIST
24795: LIST
24796: LIST
24797: LIST
24798: LIST
24799: LIST
24800: LIST
24801: LIST
24802: LIST
24803: LIST
24804: LIST
24805: LIST
24806: LIST
24807: LIST
24808: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24809: LD_ADDR_VAR 0 45
24813: PUSH
24814: LD_INT 0
24816: PUSH
24817: LD_INT 0
24819: PUSH
24820: EMPTY
24821: LIST
24822: LIST
24823: PUSH
24824: LD_INT 0
24826: PUSH
24827: LD_INT 1
24829: NEG
24830: PUSH
24831: EMPTY
24832: LIST
24833: LIST
24834: PUSH
24835: LD_INT 1
24837: PUSH
24838: LD_INT 0
24840: PUSH
24841: EMPTY
24842: LIST
24843: LIST
24844: PUSH
24845: LD_INT 1
24847: PUSH
24848: LD_INT 1
24850: PUSH
24851: EMPTY
24852: LIST
24853: LIST
24854: PUSH
24855: LD_INT 0
24857: PUSH
24858: LD_INT 1
24860: PUSH
24861: EMPTY
24862: LIST
24863: LIST
24864: PUSH
24865: LD_INT 1
24867: NEG
24868: PUSH
24869: LD_INT 0
24871: PUSH
24872: EMPTY
24873: LIST
24874: LIST
24875: PUSH
24876: LD_INT 1
24878: NEG
24879: PUSH
24880: LD_INT 1
24882: NEG
24883: PUSH
24884: EMPTY
24885: LIST
24886: LIST
24887: PUSH
24888: LD_INT 1
24890: NEG
24891: PUSH
24892: LD_INT 2
24894: NEG
24895: PUSH
24896: EMPTY
24897: LIST
24898: LIST
24899: PUSH
24900: LD_INT 0
24902: PUSH
24903: LD_INT 2
24905: NEG
24906: PUSH
24907: EMPTY
24908: LIST
24909: LIST
24910: PUSH
24911: LD_INT 1
24913: PUSH
24914: LD_INT 1
24916: NEG
24917: PUSH
24918: EMPTY
24919: LIST
24920: LIST
24921: PUSH
24922: LD_INT 2
24924: PUSH
24925: LD_INT 1
24927: PUSH
24928: EMPTY
24929: LIST
24930: LIST
24931: PUSH
24932: LD_INT 2
24934: PUSH
24935: LD_INT 2
24937: PUSH
24938: EMPTY
24939: LIST
24940: LIST
24941: PUSH
24942: LD_INT 1
24944: PUSH
24945: LD_INT 2
24947: PUSH
24948: EMPTY
24949: LIST
24950: LIST
24951: PUSH
24952: LD_INT 0
24954: PUSH
24955: LD_INT 2
24957: PUSH
24958: EMPTY
24959: LIST
24960: LIST
24961: PUSH
24962: LD_INT 1
24964: NEG
24965: PUSH
24966: LD_INT 1
24968: PUSH
24969: EMPTY
24970: LIST
24971: LIST
24972: PUSH
24973: LD_INT 2
24975: NEG
24976: PUSH
24977: LD_INT 1
24979: NEG
24980: PUSH
24981: EMPTY
24982: LIST
24983: LIST
24984: PUSH
24985: LD_INT 2
24987: NEG
24988: PUSH
24989: LD_INT 2
24991: NEG
24992: PUSH
24993: EMPTY
24994: LIST
24995: LIST
24996: PUSH
24997: LD_INT 2
24999: NEG
25000: PUSH
25001: LD_INT 3
25003: NEG
25004: PUSH
25005: EMPTY
25006: LIST
25007: LIST
25008: PUSH
25009: LD_INT 1
25011: NEG
25012: PUSH
25013: LD_INT 3
25015: NEG
25016: PUSH
25017: EMPTY
25018: LIST
25019: LIST
25020: PUSH
25021: LD_INT 0
25023: PUSH
25024: LD_INT 3
25026: NEG
25027: PUSH
25028: EMPTY
25029: LIST
25030: LIST
25031: PUSH
25032: LD_INT 1
25034: PUSH
25035: LD_INT 2
25037: NEG
25038: PUSH
25039: EMPTY
25040: LIST
25041: LIST
25042: PUSH
25043: LD_INT 3
25045: PUSH
25046: LD_INT 2
25048: PUSH
25049: EMPTY
25050: LIST
25051: LIST
25052: PUSH
25053: LD_INT 3
25055: PUSH
25056: LD_INT 3
25058: PUSH
25059: EMPTY
25060: LIST
25061: LIST
25062: PUSH
25063: LD_INT 2
25065: PUSH
25066: LD_INT 3
25068: PUSH
25069: EMPTY
25070: LIST
25071: LIST
25072: PUSH
25073: LD_INT 1
25075: PUSH
25076: LD_INT 3
25078: PUSH
25079: EMPTY
25080: LIST
25081: LIST
25082: PUSH
25083: LD_INT 0
25085: PUSH
25086: LD_INT 3
25088: PUSH
25089: EMPTY
25090: LIST
25091: LIST
25092: PUSH
25093: LD_INT 1
25095: NEG
25096: PUSH
25097: LD_INT 2
25099: PUSH
25100: EMPTY
25101: LIST
25102: LIST
25103: PUSH
25104: LD_INT 3
25106: NEG
25107: PUSH
25108: LD_INT 2
25110: NEG
25111: PUSH
25112: EMPTY
25113: LIST
25114: LIST
25115: PUSH
25116: LD_INT 3
25118: NEG
25119: PUSH
25120: LD_INT 3
25122: NEG
25123: PUSH
25124: EMPTY
25125: LIST
25126: LIST
25127: PUSH
25128: EMPTY
25129: LIST
25130: LIST
25131: LIST
25132: LIST
25133: LIST
25134: LIST
25135: LIST
25136: LIST
25137: LIST
25138: LIST
25139: LIST
25140: LIST
25141: LIST
25142: LIST
25143: LIST
25144: LIST
25145: LIST
25146: LIST
25147: LIST
25148: LIST
25149: LIST
25150: LIST
25151: LIST
25152: LIST
25153: LIST
25154: LIST
25155: LIST
25156: LIST
25157: LIST
25158: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25159: LD_ADDR_VAR 0 46
25163: PUSH
25164: LD_INT 0
25166: PUSH
25167: LD_INT 0
25169: PUSH
25170: EMPTY
25171: LIST
25172: LIST
25173: PUSH
25174: LD_INT 0
25176: PUSH
25177: LD_INT 1
25179: NEG
25180: PUSH
25181: EMPTY
25182: LIST
25183: LIST
25184: PUSH
25185: LD_INT 1
25187: PUSH
25188: LD_INT 0
25190: PUSH
25191: EMPTY
25192: LIST
25193: LIST
25194: PUSH
25195: LD_INT 1
25197: PUSH
25198: LD_INT 1
25200: PUSH
25201: EMPTY
25202: LIST
25203: LIST
25204: PUSH
25205: LD_INT 0
25207: PUSH
25208: LD_INT 1
25210: PUSH
25211: EMPTY
25212: LIST
25213: LIST
25214: PUSH
25215: LD_INT 1
25217: NEG
25218: PUSH
25219: LD_INT 0
25221: PUSH
25222: EMPTY
25223: LIST
25224: LIST
25225: PUSH
25226: LD_INT 1
25228: NEG
25229: PUSH
25230: LD_INT 1
25232: NEG
25233: PUSH
25234: EMPTY
25235: LIST
25236: LIST
25237: PUSH
25238: LD_INT 1
25240: NEG
25241: PUSH
25242: LD_INT 2
25244: NEG
25245: PUSH
25246: EMPTY
25247: LIST
25248: LIST
25249: PUSH
25250: LD_INT 0
25252: PUSH
25253: LD_INT 2
25255: NEG
25256: PUSH
25257: EMPTY
25258: LIST
25259: LIST
25260: PUSH
25261: LD_INT 1
25263: PUSH
25264: LD_INT 1
25266: NEG
25267: PUSH
25268: EMPTY
25269: LIST
25270: LIST
25271: PUSH
25272: LD_INT 2
25274: PUSH
25275: LD_INT 0
25277: PUSH
25278: EMPTY
25279: LIST
25280: LIST
25281: PUSH
25282: LD_INT 2
25284: PUSH
25285: LD_INT 1
25287: PUSH
25288: EMPTY
25289: LIST
25290: LIST
25291: PUSH
25292: LD_INT 1
25294: PUSH
25295: LD_INT 2
25297: PUSH
25298: EMPTY
25299: LIST
25300: LIST
25301: PUSH
25302: LD_INT 0
25304: PUSH
25305: LD_INT 2
25307: PUSH
25308: EMPTY
25309: LIST
25310: LIST
25311: PUSH
25312: LD_INT 1
25314: NEG
25315: PUSH
25316: LD_INT 1
25318: PUSH
25319: EMPTY
25320: LIST
25321: LIST
25322: PUSH
25323: LD_INT 2
25325: NEG
25326: PUSH
25327: LD_INT 0
25329: PUSH
25330: EMPTY
25331: LIST
25332: LIST
25333: PUSH
25334: LD_INT 2
25336: NEG
25337: PUSH
25338: LD_INT 1
25340: NEG
25341: PUSH
25342: EMPTY
25343: LIST
25344: LIST
25345: PUSH
25346: LD_INT 1
25348: NEG
25349: PUSH
25350: LD_INT 3
25352: NEG
25353: PUSH
25354: EMPTY
25355: LIST
25356: LIST
25357: PUSH
25358: LD_INT 0
25360: PUSH
25361: LD_INT 3
25363: NEG
25364: PUSH
25365: EMPTY
25366: LIST
25367: LIST
25368: PUSH
25369: LD_INT 1
25371: PUSH
25372: LD_INT 2
25374: NEG
25375: PUSH
25376: EMPTY
25377: LIST
25378: LIST
25379: PUSH
25380: LD_INT 2
25382: PUSH
25383: LD_INT 1
25385: NEG
25386: PUSH
25387: EMPTY
25388: LIST
25389: LIST
25390: PUSH
25391: LD_INT 3
25393: PUSH
25394: LD_INT 0
25396: PUSH
25397: EMPTY
25398: LIST
25399: LIST
25400: PUSH
25401: LD_INT 3
25403: PUSH
25404: LD_INT 1
25406: PUSH
25407: EMPTY
25408: LIST
25409: LIST
25410: PUSH
25411: LD_INT 1
25413: PUSH
25414: LD_INT 3
25416: PUSH
25417: EMPTY
25418: LIST
25419: LIST
25420: PUSH
25421: LD_INT 0
25423: PUSH
25424: LD_INT 3
25426: PUSH
25427: EMPTY
25428: LIST
25429: LIST
25430: PUSH
25431: LD_INT 1
25433: NEG
25434: PUSH
25435: LD_INT 2
25437: PUSH
25438: EMPTY
25439: LIST
25440: LIST
25441: PUSH
25442: LD_INT 2
25444: NEG
25445: PUSH
25446: LD_INT 1
25448: PUSH
25449: EMPTY
25450: LIST
25451: LIST
25452: PUSH
25453: LD_INT 3
25455: NEG
25456: PUSH
25457: LD_INT 0
25459: PUSH
25460: EMPTY
25461: LIST
25462: LIST
25463: PUSH
25464: LD_INT 3
25466: NEG
25467: PUSH
25468: LD_INT 1
25470: NEG
25471: PUSH
25472: EMPTY
25473: LIST
25474: LIST
25475: PUSH
25476: EMPTY
25477: LIST
25478: LIST
25479: LIST
25480: LIST
25481: LIST
25482: LIST
25483: LIST
25484: LIST
25485: LIST
25486: LIST
25487: LIST
25488: LIST
25489: LIST
25490: LIST
25491: LIST
25492: LIST
25493: LIST
25494: LIST
25495: LIST
25496: LIST
25497: LIST
25498: LIST
25499: LIST
25500: LIST
25501: LIST
25502: LIST
25503: LIST
25504: LIST
25505: LIST
25506: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25507: LD_ADDR_VAR 0 47
25511: PUSH
25512: LD_INT 0
25514: PUSH
25515: LD_INT 0
25517: PUSH
25518: EMPTY
25519: LIST
25520: LIST
25521: PUSH
25522: LD_INT 0
25524: PUSH
25525: LD_INT 1
25527: NEG
25528: PUSH
25529: EMPTY
25530: LIST
25531: LIST
25532: PUSH
25533: LD_INT 1
25535: PUSH
25536: LD_INT 0
25538: PUSH
25539: EMPTY
25540: LIST
25541: LIST
25542: PUSH
25543: LD_INT 1
25545: PUSH
25546: LD_INT 1
25548: PUSH
25549: EMPTY
25550: LIST
25551: LIST
25552: PUSH
25553: LD_INT 0
25555: PUSH
25556: LD_INT 1
25558: PUSH
25559: EMPTY
25560: LIST
25561: LIST
25562: PUSH
25563: LD_INT 1
25565: NEG
25566: PUSH
25567: LD_INT 0
25569: PUSH
25570: EMPTY
25571: LIST
25572: LIST
25573: PUSH
25574: LD_INT 1
25576: NEG
25577: PUSH
25578: LD_INT 1
25580: NEG
25581: PUSH
25582: EMPTY
25583: LIST
25584: LIST
25585: PUSH
25586: LD_INT 1
25588: NEG
25589: PUSH
25590: LD_INT 2
25592: NEG
25593: PUSH
25594: EMPTY
25595: LIST
25596: LIST
25597: PUSH
25598: LD_INT 0
25600: PUSH
25601: LD_INT 2
25603: NEG
25604: PUSH
25605: EMPTY
25606: LIST
25607: LIST
25608: PUSH
25609: LD_INT 1
25611: PUSH
25612: LD_INT 1
25614: NEG
25615: PUSH
25616: EMPTY
25617: LIST
25618: LIST
25619: PUSH
25620: LD_INT 2
25622: NEG
25623: PUSH
25624: LD_INT 1
25626: NEG
25627: PUSH
25628: EMPTY
25629: LIST
25630: LIST
25631: PUSH
25632: LD_INT 2
25634: NEG
25635: PUSH
25636: LD_INT 2
25638: NEG
25639: PUSH
25640: EMPTY
25641: LIST
25642: LIST
25643: PUSH
25644: EMPTY
25645: LIST
25646: LIST
25647: LIST
25648: LIST
25649: LIST
25650: LIST
25651: LIST
25652: LIST
25653: LIST
25654: LIST
25655: LIST
25656: LIST
25657: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
25658: LD_ADDR_VAR 0 48
25662: PUSH
25663: LD_INT 0
25665: PUSH
25666: LD_INT 0
25668: PUSH
25669: EMPTY
25670: LIST
25671: LIST
25672: PUSH
25673: LD_INT 0
25675: PUSH
25676: LD_INT 1
25678: NEG
25679: PUSH
25680: EMPTY
25681: LIST
25682: LIST
25683: PUSH
25684: LD_INT 1
25686: PUSH
25687: LD_INT 0
25689: PUSH
25690: EMPTY
25691: LIST
25692: LIST
25693: PUSH
25694: LD_INT 1
25696: PUSH
25697: LD_INT 1
25699: PUSH
25700: EMPTY
25701: LIST
25702: LIST
25703: PUSH
25704: LD_INT 0
25706: PUSH
25707: LD_INT 1
25709: PUSH
25710: EMPTY
25711: LIST
25712: LIST
25713: PUSH
25714: LD_INT 1
25716: NEG
25717: PUSH
25718: LD_INT 0
25720: PUSH
25721: EMPTY
25722: LIST
25723: LIST
25724: PUSH
25725: LD_INT 1
25727: NEG
25728: PUSH
25729: LD_INT 1
25731: NEG
25732: PUSH
25733: EMPTY
25734: LIST
25735: LIST
25736: PUSH
25737: LD_INT 1
25739: NEG
25740: PUSH
25741: LD_INT 2
25743: NEG
25744: PUSH
25745: EMPTY
25746: LIST
25747: LIST
25748: PUSH
25749: LD_INT 0
25751: PUSH
25752: LD_INT 2
25754: NEG
25755: PUSH
25756: EMPTY
25757: LIST
25758: LIST
25759: PUSH
25760: LD_INT 1
25762: PUSH
25763: LD_INT 1
25765: NEG
25766: PUSH
25767: EMPTY
25768: LIST
25769: LIST
25770: PUSH
25771: LD_INT 2
25773: PUSH
25774: LD_INT 0
25776: PUSH
25777: EMPTY
25778: LIST
25779: LIST
25780: PUSH
25781: LD_INT 2
25783: PUSH
25784: LD_INT 1
25786: PUSH
25787: EMPTY
25788: LIST
25789: LIST
25790: PUSH
25791: EMPTY
25792: LIST
25793: LIST
25794: LIST
25795: LIST
25796: LIST
25797: LIST
25798: LIST
25799: LIST
25800: LIST
25801: LIST
25802: LIST
25803: LIST
25804: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
25805: LD_ADDR_VAR 0 49
25809: PUSH
25810: LD_INT 0
25812: PUSH
25813: LD_INT 0
25815: PUSH
25816: EMPTY
25817: LIST
25818: LIST
25819: PUSH
25820: LD_INT 0
25822: PUSH
25823: LD_INT 1
25825: NEG
25826: PUSH
25827: EMPTY
25828: LIST
25829: LIST
25830: PUSH
25831: LD_INT 1
25833: PUSH
25834: LD_INT 0
25836: PUSH
25837: EMPTY
25838: LIST
25839: LIST
25840: PUSH
25841: LD_INT 1
25843: PUSH
25844: LD_INT 1
25846: PUSH
25847: EMPTY
25848: LIST
25849: LIST
25850: PUSH
25851: LD_INT 0
25853: PUSH
25854: LD_INT 1
25856: PUSH
25857: EMPTY
25858: LIST
25859: LIST
25860: PUSH
25861: LD_INT 1
25863: NEG
25864: PUSH
25865: LD_INT 0
25867: PUSH
25868: EMPTY
25869: LIST
25870: LIST
25871: PUSH
25872: LD_INT 1
25874: NEG
25875: PUSH
25876: LD_INT 1
25878: NEG
25879: PUSH
25880: EMPTY
25881: LIST
25882: LIST
25883: PUSH
25884: LD_INT 1
25886: PUSH
25887: LD_INT 1
25889: NEG
25890: PUSH
25891: EMPTY
25892: LIST
25893: LIST
25894: PUSH
25895: LD_INT 2
25897: PUSH
25898: LD_INT 0
25900: PUSH
25901: EMPTY
25902: LIST
25903: LIST
25904: PUSH
25905: LD_INT 2
25907: PUSH
25908: LD_INT 1
25910: PUSH
25911: EMPTY
25912: LIST
25913: LIST
25914: PUSH
25915: LD_INT 2
25917: PUSH
25918: LD_INT 2
25920: PUSH
25921: EMPTY
25922: LIST
25923: LIST
25924: PUSH
25925: LD_INT 1
25927: PUSH
25928: LD_INT 2
25930: PUSH
25931: EMPTY
25932: LIST
25933: LIST
25934: PUSH
25935: EMPTY
25936: LIST
25937: LIST
25938: LIST
25939: LIST
25940: LIST
25941: LIST
25942: LIST
25943: LIST
25944: LIST
25945: LIST
25946: LIST
25947: LIST
25948: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
25949: LD_ADDR_VAR 0 50
25953: PUSH
25954: LD_INT 0
25956: PUSH
25957: LD_INT 0
25959: PUSH
25960: EMPTY
25961: LIST
25962: LIST
25963: PUSH
25964: LD_INT 0
25966: PUSH
25967: LD_INT 1
25969: NEG
25970: PUSH
25971: EMPTY
25972: LIST
25973: LIST
25974: PUSH
25975: LD_INT 1
25977: PUSH
25978: LD_INT 0
25980: PUSH
25981: EMPTY
25982: LIST
25983: LIST
25984: PUSH
25985: LD_INT 1
25987: PUSH
25988: LD_INT 1
25990: PUSH
25991: EMPTY
25992: LIST
25993: LIST
25994: PUSH
25995: LD_INT 0
25997: PUSH
25998: LD_INT 1
26000: PUSH
26001: EMPTY
26002: LIST
26003: LIST
26004: PUSH
26005: LD_INT 1
26007: NEG
26008: PUSH
26009: LD_INT 0
26011: PUSH
26012: EMPTY
26013: LIST
26014: LIST
26015: PUSH
26016: LD_INT 1
26018: NEG
26019: PUSH
26020: LD_INT 1
26022: NEG
26023: PUSH
26024: EMPTY
26025: LIST
26026: LIST
26027: PUSH
26028: LD_INT 2
26030: PUSH
26031: LD_INT 1
26033: PUSH
26034: EMPTY
26035: LIST
26036: LIST
26037: PUSH
26038: LD_INT 2
26040: PUSH
26041: LD_INT 2
26043: PUSH
26044: EMPTY
26045: LIST
26046: LIST
26047: PUSH
26048: LD_INT 1
26050: PUSH
26051: LD_INT 2
26053: PUSH
26054: EMPTY
26055: LIST
26056: LIST
26057: PUSH
26058: LD_INT 0
26060: PUSH
26061: LD_INT 2
26063: PUSH
26064: EMPTY
26065: LIST
26066: LIST
26067: PUSH
26068: LD_INT 1
26070: NEG
26071: PUSH
26072: LD_INT 1
26074: PUSH
26075: EMPTY
26076: LIST
26077: LIST
26078: PUSH
26079: EMPTY
26080: LIST
26081: LIST
26082: LIST
26083: LIST
26084: LIST
26085: LIST
26086: LIST
26087: LIST
26088: LIST
26089: LIST
26090: LIST
26091: LIST
26092: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
26093: LD_ADDR_VAR 0 51
26097: PUSH
26098: LD_INT 0
26100: PUSH
26101: LD_INT 0
26103: PUSH
26104: EMPTY
26105: LIST
26106: LIST
26107: PUSH
26108: LD_INT 0
26110: PUSH
26111: LD_INT 1
26113: NEG
26114: PUSH
26115: EMPTY
26116: LIST
26117: LIST
26118: PUSH
26119: LD_INT 1
26121: PUSH
26122: LD_INT 0
26124: PUSH
26125: EMPTY
26126: LIST
26127: LIST
26128: PUSH
26129: LD_INT 1
26131: PUSH
26132: LD_INT 1
26134: PUSH
26135: EMPTY
26136: LIST
26137: LIST
26138: PUSH
26139: LD_INT 0
26141: PUSH
26142: LD_INT 1
26144: PUSH
26145: EMPTY
26146: LIST
26147: LIST
26148: PUSH
26149: LD_INT 1
26151: NEG
26152: PUSH
26153: LD_INT 0
26155: PUSH
26156: EMPTY
26157: LIST
26158: LIST
26159: PUSH
26160: LD_INT 1
26162: NEG
26163: PUSH
26164: LD_INT 1
26166: NEG
26167: PUSH
26168: EMPTY
26169: LIST
26170: LIST
26171: PUSH
26172: LD_INT 1
26174: PUSH
26175: LD_INT 2
26177: PUSH
26178: EMPTY
26179: LIST
26180: LIST
26181: PUSH
26182: LD_INT 0
26184: PUSH
26185: LD_INT 2
26187: PUSH
26188: EMPTY
26189: LIST
26190: LIST
26191: PUSH
26192: LD_INT 1
26194: NEG
26195: PUSH
26196: LD_INT 1
26198: PUSH
26199: EMPTY
26200: LIST
26201: LIST
26202: PUSH
26203: LD_INT 2
26205: NEG
26206: PUSH
26207: LD_INT 0
26209: PUSH
26210: EMPTY
26211: LIST
26212: LIST
26213: PUSH
26214: LD_INT 2
26216: NEG
26217: PUSH
26218: LD_INT 1
26220: NEG
26221: PUSH
26222: EMPTY
26223: LIST
26224: LIST
26225: PUSH
26226: EMPTY
26227: LIST
26228: LIST
26229: LIST
26230: LIST
26231: LIST
26232: LIST
26233: LIST
26234: LIST
26235: LIST
26236: LIST
26237: LIST
26238: LIST
26239: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26240: LD_ADDR_VAR 0 52
26244: PUSH
26245: LD_INT 0
26247: PUSH
26248: LD_INT 0
26250: PUSH
26251: EMPTY
26252: LIST
26253: LIST
26254: PUSH
26255: LD_INT 0
26257: PUSH
26258: LD_INT 1
26260: NEG
26261: PUSH
26262: EMPTY
26263: LIST
26264: LIST
26265: PUSH
26266: LD_INT 1
26268: PUSH
26269: LD_INT 0
26271: PUSH
26272: EMPTY
26273: LIST
26274: LIST
26275: PUSH
26276: LD_INT 1
26278: PUSH
26279: LD_INT 1
26281: PUSH
26282: EMPTY
26283: LIST
26284: LIST
26285: PUSH
26286: LD_INT 0
26288: PUSH
26289: LD_INT 1
26291: PUSH
26292: EMPTY
26293: LIST
26294: LIST
26295: PUSH
26296: LD_INT 1
26298: NEG
26299: PUSH
26300: LD_INT 0
26302: PUSH
26303: EMPTY
26304: LIST
26305: LIST
26306: PUSH
26307: LD_INT 1
26309: NEG
26310: PUSH
26311: LD_INT 1
26313: NEG
26314: PUSH
26315: EMPTY
26316: LIST
26317: LIST
26318: PUSH
26319: LD_INT 1
26321: NEG
26322: PUSH
26323: LD_INT 2
26325: NEG
26326: PUSH
26327: EMPTY
26328: LIST
26329: LIST
26330: PUSH
26331: LD_INT 1
26333: NEG
26334: PUSH
26335: LD_INT 1
26337: PUSH
26338: EMPTY
26339: LIST
26340: LIST
26341: PUSH
26342: LD_INT 2
26344: NEG
26345: PUSH
26346: LD_INT 0
26348: PUSH
26349: EMPTY
26350: LIST
26351: LIST
26352: PUSH
26353: LD_INT 2
26355: NEG
26356: PUSH
26357: LD_INT 1
26359: NEG
26360: PUSH
26361: EMPTY
26362: LIST
26363: LIST
26364: PUSH
26365: LD_INT 2
26367: NEG
26368: PUSH
26369: LD_INT 2
26371: NEG
26372: PUSH
26373: EMPTY
26374: LIST
26375: LIST
26376: PUSH
26377: EMPTY
26378: LIST
26379: LIST
26380: LIST
26381: LIST
26382: LIST
26383: LIST
26384: LIST
26385: LIST
26386: LIST
26387: LIST
26388: LIST
26389: LIST
26390: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26391: LD_ADDR_VAR 0 53
26395: PUSH
26396: LD_INT 0
26398: PUSH
26399: LD_INT 0
26401: PUSH
26402: EMPTY
26403: LIST
26404: LIST
26405: PUSH
26406: LD_INT 0
26408: PUSH
26409: LD_INT 1
26411: NEG
26412: PUSH
26413: EMPTY
26414: LIST
26415: LIST
26416: PUSH
26417: LD_INT 1
26419: PUSH
26420: LD_INT 0
26422: PUSH
26423: EMPTY
26424: LIST
26425: LIST
26426: PUSH
26427: LD_INT 1
26429: PUSH
26430: LD_INT 1
26432: PUSH
26433: EMPTY
26434: LIST
26435: LIST
26436: PUSH
26437: LD_INT 0
26439: PUSH
26440: LD_INT 1
26442: PUSH
26443: EMPTY
26444: LIST
26445: LIST
26446: PUSH
26447: LD_INT 1
26449: NEG
26450: PUSH
26451: LD_INT 0
26453: PUSH
26454: EMPTY
26455: LIST
26456: LIST
26457: PUSH
26458: LD_INT 1
26460: NEG
26461: PUSH
26462: LD_INT 1
26464: NEG
26465: PUSH
26466: EMPTY
26467: LIST
26468: LIST
26469: PUSH
26470: LD_INT 1
26472: NEG
26473: PUSH
26474: LD_INT 2
26476: NEG
26477: PUSH
26478: EMPTY
26479: LIST
26480: LIST
26481: PUSH
26482: LD_INT 0
26484: PUSH
26485: LD_INT 2
26487: NEG
26488: PUSH
26489: EMPTY
26490: LIST
26491: LIST
26492: PUSH
26493: LD_INT 1
26495: PUSH
26496: LD_INT 1
26498: NEG
26499: PUSH
26500: EMPTY
26501: LIST
26502: LIST
26503: PUSH
26504: LD_INT 2
26506: PUSH
26507: LD_INT 0
26509: PUSH
26510: EMPTY
26511: LIST
26512: LIST
26513: PUSH
26514: LD_INT 2
26516: PUSH
26517: LD_INT 1
26519: PUSH
26520: EMPTY
26521: LIST
26522: LIST
26523: PUSH
26524: LD_INT 2
26526: PUSH
26527: LD_INT 2
26529: PUSH
26530: EMPTY
26531: LIST
26532: LIST
26533: PUSH
26534: LD_INT 1
26536: PUSH
26537: LD_INT 2
26539: PUSH
26540: EMPTY
26541: LIST
26542: LIST
26543: PUSH
26544: LD_INT 0
26546: PUSH
26547: LD_INT 2
26549: PUSH
26550: EMPTY
26551: LIST
26552: LIST
26553: PUSH
26554: LD_INT 1
26556: NEG
26557: PUSH
26558: LD_INT 1
26560: PUSH
26561: EMPTY
26562: LIST
26563: LIST
26564: PUSH
26565: LD_INT 2
26567: NEG
26568: PUSH
26569: LD_INT 0
26571: PUSH
26572: EMPTY
26573: LIST
26574: LIST
26575: PUSH
26576: LD_INT 2
26578: NEG
26579: PUSH
26580: LD_INT 1
26582: NEG
26583: PUSH
26584: EMPTY
26585: LIST
26586: LIST
26587: PUSH
26588: LD_INT 2
26590: NEG
26591: PUSH
26592: LD_INT 2
26594: NEG
26595: PUSH
26596: EMPTY
26597: LIST
26598: LIST
26599: PUSH
26600: EMPTY
26601: LIST
26602: LIST
26603: LIST
26604: LIST
26605: LIST
26606: LIST
26607: LIST
26608: LIST
26609: LIST
26610: LIST
26611: LIST
26612: LIST
26613: LIST
26614: LIST
26615: LIST
26616: LIST
26617: LIST
26618: LIST
26619: LIST
26620: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26621: LD_ADDR_VAR 0 54
26625: PUSH
26626: LD_INT 0
26628: PUSH
26629: LD_INT 0
26631: PUSH
26632: EMPTY
26633: LIST
26634: LIST
26635: PUSH
26636: LD_INT 0
26638: PUSH
26639: LD_INT 1
26641: NEG
26642: PUSH
26643: EMPTY
26644: LIST
26645: LIST
26646: PUSH
26647: LD_INT 1
26649: PUSH
26650: LD_INT 0
26652: PUSH
26653: EMPTY
26654: LIST
26655: LIST
26656: PUSH
26657: LD_INT 1
26659: PUSH
26660: LD_INT 1
26662: PUSH
26663: EMPTY
26664: LIST
26665: LIST
26666: PUSH
26667: LD_INT 0
26669: PUSH
26670: LD_INT 1
26672: PUSH
26673: EMPTY
26674: LIST
26675: LIST
26676: PUSH
26677: LD_INT 1
26679: NEG
26680: PUSH
26681: LD_INT 0
26683: PUSH
26684: EMPTY
26685: LIST
26686: LIST
26687: PUSH
26688: LD_INT 1
26690: NEG
26691: PUSH
26692: LD_INT 1
26694: NEG
26695: PUSH
26696: EMPTY
26697: LIST
26698: LIST
26699: PUSH
26700: LD_INT 1
26702: NEG
26703: PUSH
26704: LD_INT 2
26706: NEG
26707: PUSH
26708: EMPTY
26709: LIST
26710: LIST
26711: PUSH
26712: LD_INT 0
26714: PUSH
26715: LD_INT 2
26717: NEG
26718: PUSH
26719: EMPTY
26720: LIST
26721: LIST
26722: PUSH
26723: LD_INT 1
26725: PUSH
26726: LD_INT 1
26728: NEG
26729: PUSH
26730: EMPTY
26731: LIST
26732: LIST
26733: PUSH
26734: LD_INT 2
26736: PUSH
26737: LD_INT 0
26739: PUSH
26740: EMPTY
26741: LIST
26742: LIST
26743: PUSH
26744: LD_INT 2
26746: PUSH
26747: LD_INT 1
26749: PUSH
26750: EMPTY
26751: LIST
26752: LIST
26753: PUSH
26754: LD_INT 2
26756: PUSH
26757: LD_INT 2
26759: PUSH
26760: EMPTY
26761: LIST
26762: LIST
26763: PUSH
26764: LD_INT 1
26766: PUSH
26767: LD_INT 2
26769: PUSH
26770: EMPTY
26771: LIST
26772: LIST
26773: PUSH
26774: LD_INT 0
26776: PUSH
26777: LD_INT 2
26779: PUSH
26780: EMPTY
26781: LIST
26782: LIST
26783: PUSH
26784: LD_INT 1
26786: NEG
26787: PUSH
26788: LD_INT 1
26790: PUSH
26791: EMPTY
26792: LIST
26793: LIST
26794: PUSH
26795: LD_INT 2
26797: NEG
26798: PUSH
26799: LD_INT 0
26801: PUSH
26802: EMPTY
26803: LIST
26804: LIST
26805: PUSH
26806: LD_INT 2
26808: NEG
26809: PUSH
26810: LD_INT 1
26812: NEG
26813: PUSH
26814: EMPTY
26815: LIST
26816: LIST
26817: PUSH
26818: LD_INT 2
26820: NEG
26821: PUSH
26822: LD_INT 2
26824: NEG
26825: PUSH
26826: EMPTY
26827: LIST
26828: LIST
26829: PUSH
26830: EMPTY
26831: LIST
26832: LIST
26833: LIST
26834: LIST
26835: LIST
26836: LIST
26837: LIST
26838: LIST
26839: LIST
26840: LIST
26841: LIST
26842: LIST
26843: LIST
26844: LIST
26845: LIST
26846: LIST
26847: LIST
26848: LIST
26849: LIST
26850: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26851: LD_ADDR_VAR 0 55
26855: PUSH
26856: LD_INT 0
26858: PUSH
26859: LD_INT 0
26861: PUSH
26862: EMPTY
26863: LIST
26864: LIST
26865: PUSH
26866: LD_INT 0
26868: PUSH
26869: LD_INT 1
26871: NEG
26872: PUSH
26873: EMPTY
26874: LIST
26875: LIST
26876: PUSH
26877: LD_INT 1
26879: PUSH
26880: LD_INT 0
26882: PUSH
26883: EMPTY
26884: LIST
26885: LIST
26886: PUSH
26887: LD_INT 1
26889: PUSH
26890: LD_INT 1
26892: PUSH
26893: EMPTY
26894: LIST
26895: LIST
26896: PUSH
26897: LD_INT 0
26899: PUSH
26900: LD_INT 1
26902: PUSH
26903: EMPTY
26904: LIST
26905: LIST
26906: PUSH
26907: LD_INT 1
26909: NEG
26910: PUSH
26911: LD_INT 0
26913: PUSH
26914: EMPTY
26915: LIST
26916: LIST
26917: PUSH
26918: LD_INT 1
26920: NEG
26921: PUSH
26922: LD_INT 1
26924: NEG
26925: PUSH
26926: EMPTY
26927: LIST
26928: LIST
26929: PUSH
26930: LD_INT 1
26932: NEG
26933: PUSH
26934: LD_INT 2
26936: NEG
26937: PUSH
26938: EMPTY
26939: LIST
26940: LIST
26941: PUSH
26942: LD_INT 0
26944: PUSH
26945: LD_INT 2
26947: NEG
26948: PUSH
26949: EMPTY
26950: LIST
26951: LIST
26952: PUSH
26953: LD_INT 1
26955: PUSH
26956: LD_INT 1
26958: NEG
26959: PUSH
26960: EMPTY
26961: LIST
26962: LIST
26963: PUSH
26964: LD_INT 2
26966: PUSH
26967: LD_INT 0
26969: PUSH
26970: EMPTY
26971: LIST
26972: LIST
26973: PUSH
26974: LD_INT 2
26976: PUSH
26977: LD_INT 1
26979: PUSH
26980: EMPTY
26981: LIST
26982: LIST
26983: PUSH
26984: LD_INT 2
26986: PUSH
26987: LD_INT 2
26989: PUSH
26990: EMPTY
26991: LIST
26992: LIST
26993: PUSH
26994: LD_INT 1
26996: PUSH
26997: LD_INT 2
26999: PUSH
27000: EMPTY
27001: LIST
27002: LIST
27003: PUSH
27004: LD_INT 0
27006: PUSH
27007: LD_INT 2
27009: PUSH
27010: EMPTY
27011: LIST
27012: LIST
27013: PUSH
27014: LD_INT 1
27016: NEG
27017: PUSH
27018: LD_INT 1
27020: PUSH
27021: EMPTY
27022: LIST
27023: LIST
27024: PUSH
27025: LD_INT 2
27027: NEG
27028: PUSH
27029: LD_INT 0
27031: PUSH
27032: EMPTY
27033: LIST
27034: LIST
27035: PUSH
27036: LD_INT 2
27038: NEG
27039: PUSH
27040: LD_INT 1
27042: NEG
27043: PUSH
27044: EMPTY
27045: LIST
27046: LIST
27047: PUSH
27048: LD_INT 2
27050: NEG
27051: PUSH
27052: LD_INT 2
27054: NEG
27055: PUSH
27056: EMPTY
27057: LIST
27058: LIST
27059: PUSH
27060: EMPTY
27061: LIST
27062: LIST
27063: LIST
27064: LIST
27065: LIST
27066: LIST
27067: LIST
27068: LIST
27069: LIST
27070: LIST
27071: LIST
27072: LIST
27073: LIST
27074: LIST
27075: LIST
27076: LIST
27077: LIST
27078: LIST
27079: LIST
27080: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27081: LD_ADDR_VAR 0 56
27085: PUSH
27086: LD_INT 0
27088: PUSH
27089: LD_INT 0
27091: PUSH
27092: EMPTY
27093: LIST
27094: LIST
27095: PUSH
27096: LD_INT 0
27098: PUSH
27099: LD_INT 1
27101: NEG
27102: PUSH
27103: EMPTY
27104: LIST
27105: LIST
27106: PUSH
27107: LD_INT 1
27109: PUSH
27110: LD_INT 0
27112: PUSH
27113: EMPTY
27114: LIST
27115: LIST
27116: PUSH
27117: LD_INT 1
27119: PUSH
27120: LD_INT 1
27122: PUSH
27123: EMPTY
27124: LIST
27125: LIST
27126: PUSH
27127: LD_INT 0
27129: PUSH
27130: LD_INT 1
27132: PUSH
27133: EMPTY
27134: LIST
27135: LIST
27136: PUSH
27137: LD_INT 1
27139: NEG
27140: PUSH
27141: LD_INT 0
27143: PUSH
27144: EMPTY
27145: LIST
27146: LIST
27147: PUSH
27148: LD_INT 1
27150: NEG
27151: PUSH
27152: LD_INT 1
27154: NEG
27155: PUSH
27156: EMPTY
27157: LIST
27158: LIST
27159: PUSH
27160: LD_INT 1
27162: NEG
27163: PUSH
27164: LD_INT 2
27166: NEG
27167: PUSH
27168: EMPTY
27169: LIST
27170: LIST
27171: PUSH
27172: LD_INT 0
27174: PUSH
27175: LD_INT 2
27177: NEG
27178: PUSH
27179: EMPTY
27180: LIST
27181: LIST
27182: PUSH
27183: LD_INT 1
27185: PUSH
27186: LD_INT 1
27188: NEG
27189: PUSH
27190: EMPTY
27191: LIST
27192: LIST
27193: PUSH
27194: LD_INT 2
27196: PUSH
27197: LD_INT 0
27199: PUSH
27200: EMPTY
27201: LIST
27202: LIST
27203: PUSH
27204: LD_INT 2
27206: PUSH
27207: LD_INT 1
27209: PUSH
27210: EMPTY
27211: LIST
27212: LIST
27213: PUSH
27214: LD_INT 2
27216: PUSH
27217: LD_INT 2
27219: PUSH
27220: EMPTY
27221: LIST
27222: LIST
27223: PUSH
27224: LD_INT 1
27226: PUSH
27227: LD_INT 2
27229: PUSH
27230: EMPTY
27231: LIST
27232: LIST
27233: PUSH
27234: LD_INT 0
27236: PUSH
27237: LD_INT 2
27239: PUSH
27240: EMPTY
27241: LIST
27242: LIST
27243: PUSH
27244: LD_INT 1
27246: NEG
27247: PUSH
27248: LD_INT 1
27250: PUSH
27251: EMPTY
27252: LIST
27253: LIST
27254: PUSH
27255: LD_INT 2
27257: NEG
27258: PUSH
27259: LD_INT 0
27261: PUSH
27262: EMPTY
27263: LIST
27264: LIST
27265: PUSH
27266: LD_INT 2
27268: NEG
27269: PUSH
27270: LD_INT 1
27272: NEG
27273: PUSH
27274: EMPTY
27275: LIST
27276: LIST
27277: PUSH
27278: LD_INT 2
27280: NEG
27281: PUSH
27282: LD_INT 2
27284: NEG
27285: PUSH
27286: EMPTY
27287: LIST
27288: LIST
27289: PUSH
27290: EMPTY
27291: LIST
27292: LIST
27293: LIST
27294: LIST
27295: LIST
27296: LIST
27297: LIST
27298: LIST
27299: LIST
27300: LIST
27301: LIST
27302: LIST
27303: LIST
27304: LIST
27305: LIST
27306: LIST
27307: LIST
27308: LIST
27309: LIST
27310: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27311: LD_ADDR_VAR 0 57
27315: PUSH
27316: LD_INT 0
27318: PUSH
27319: LD_INT 0
27321: PUSH
27322: EMPTY
27323: LIST
27324: LIST
27325: PUSH
27326: LD_INT 0
27328: PUSH
27329: LD_INT 1
27331: NEG
27332: PUSH
27333: EMPTY
27334: LIST
27335: LIST
27336: PUSH
27337: LD_INT 1
27339: PUSH
27340: LD_INT 0
27342: PUSH
27343: EMPTY
27344: LIST
27345: LIST
27346: PUSH
27347: LD_INT 1
27349: PUSH
27350: LD_INT 1
27352: PUSH
27353: EMPTY
27354: LIST
27355: LIST
27356: PUSH
27357: LD_INT 0
27359: PUSH
27360: LD_INT 1
27362: PUSH
27363: EMPTY
27364: LIST
27365: LIST
27366: PUSH
27367: LD_INT 1
27369: NEG
27370: PUSH
27371: LD_INT 0
27373: PUSH
27374: EMPTY
27375: LIST
27376: LIST
27377: PUSH
27378: LD_INT 1
27380: NEG
27381: PUSH
27382: LD_INT 1
27384: NEG
27385: PUSH
27386: EMPTY
27387: LIST
27388: LIST
27389: PUSH
27390: LD_INT 1
27392: NEG
27393: PUSH
27394: LD_INT 2
27396: NEG
27397: PUSH
27398: EMPTY
27399: LIST
27400: LIST
27401: PUSH
27402: LD_INT 0
27404: PUSH
27405: LD_INT 2
27407: NEG
27408: PUSH
27409: EMPTY
27410: LIST
27411: LIST
27412: PUSH
27413: LD_INT 1
27415: PUSH
27416: LD_INT 1
27418: NEG
27419: PUSH
27420: EMPTY
27421: LIST
27422: LIST
27423: PUSH
27424: LD_INT 2
27426: PUSH
27427: LD_INT 0
27429: PUSH
27430: EMPTY
27431: LIST
27432: LIST
27433: PUSH
27434: LD_INT 2
27436: PUSH
27437: LD_INT 1
27439: PUSH
27440: EMPTY
27441: LIST
27442: LIST
27443: PUSH
27444: LD_INT 2
27446: PUSH
27447: LD_INT 2
27449: PUSH
27450: EMPTY
27451: LIST
27452: LIST
27453: PUSH
27454: LD_INT 1
27456: PUSH
27457: LD_INT 2
27459: PUSH
27460: EMPTY
27461: LIST
27462: LIST
27463: PUSH
27464: LD_INT 0
27466: PUSH
27467: LD_INT 2
27469: PUSH
27470: EMPTY
27471: LIST
27472: LIST
27473: PUSH
27474: LD_INT 1
27476: NEG
27477: PUSH
27478: LD_INT 1
27480: PUSH
27481: EMPTY
27482: LIST
27483: LIST
27484: PUSH
27485: LD_INT 2
27487: NEG
27488: PUSH
27489: LD_INT 0
27491: PUSH
27492: EMPTY
27493: LIST
27494: LIST
27495: PUSH
27496: LD_INT 2
27498: NEG
27499: PUSH
27500: LD_INT 1
27502: NEG
27503: PUSH
27504: EMPTY
27505: LIST
27506: LIST
27507: PUSH
27508: LD_INT 2
27510: NEG
27511: PUSH
27512: LD_INT 2
27514: NEG
27515: PUSH
27516: EMPTY
27517: LIST
27518: LIST
27519: PUSH
27520: EMPTY
27521: LIST
27522: LIST
27523: LIST
27524: LIST
27525: LIST
27526: LIST
27527: LIST
27528: LIST
27529: LIST
27530: LIST
27531: LIST
27532: LIST
27533: LIST
27534: LIST
27535: LIST
27536: LIST
27537: LIST
27538: LIST
27539: LIST
27540: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27541: LD_ADDR_VAR 0 58
27545: PUSH
27546: LD_INT 0
27548: PUSH
27549: LD_INT 0
27551: PUSH
27552: EMPTY
27553: LIST
27554: LIST
27555: PUSH
27556: LD_INT 0
27558: PUSH
27559: LD_INT 1
27561: NEG
27562: PUSH
27563: EMPTY
27564: LIST
27565: LIST
27566: PUSH
27567: LD_INT 1
27569: PUSH
27570: LD_INT 0
27572: PUSH
27573: EMPTY
27574: LIST
27575: LIST
27576: PUSH
27577: LD_INT 1
27579: PUSH
27580: LD_INT 1
27582: PUSH
27583: EMPTY
27584: LIST
27585: LIST
27586: PUSH
27587: LD_INT 0
27589: PUSH
27590: LD_INT 1
27592: PUSH
27593: EMPTY
27594: LIST
27595: LIST
27596: PUSH
27597: LD_INT 1
27599: NEG
27600: PUSH
27601: LD_INT 0
27603: PUSH
27604: EMPTY
27605: LIST
27606: LIST
27607: PUSH
27608: LD_INT 1
27610: NEG
27611: PUSH
27612: LD_INT 1
27614: NEG
27615: PUSH
27616: EMPTY
27617: LIST
27618: LIST
27619: PUSH
27620: LD_INT 1
27622: NEG
27623: PUSH
27624: LD_INT 2
27626: NEG
27627: PUSH
27628: EMPTY
27629: LIST
27630: LIST
27631: PUSH
27632: LD_INT 0
27634: PUSH
27635: LD_INT 2
27637: NEG
27638: PUSH
27639: EMPTY
27640: LIST
27641: LIST
27642: PUSH
27643: LD_INT 1
27645: PUSH
27646: LD_INT 1
27648: NEG
27649: PUSH
27650: EMPTY
27651: LIST
27652: LIST
27653: PUSH
27654: LD_INT 2
27656: PUSH
27657: LD_INT 0
27659: PUSH
27660: EMPTY
27661: LIST
27662: LIST
27663: PUSH
27664: LD_INT 2
27666: PUSH
27667: LD_INT 1
27669: PUSH
27670: EMPTY
27671: LIST
27672: LIST
27673: PUSH
27674: LD_INT 2
27676: PUSH
27677: LD_INT 2
27679: PUSH
27680: EMPTY
27681: LIST
27682: LIST
27683: PUSH
27684: LD_INT 1
27686: PUSH
27687: LD_INT 2
27689: PUSH
27690: EMPTY
27691: LIST
27692: LIST
27693: PUSH
27694: LD_INT 0
27696: PUSH
27697: LD_INT 2
27699: PUSH
27700: EMPTY
27701: LIST
27702: LIST
27703: PUSH
27704: LD_INT 1
27706: NEG
27707: PUSH
27708: LD_INT 1
27710: PUSH
27711: EMPTY
27712: LIST
27713: LIST
27714: PUSH
27715: LD_INT 2
27717: NEG
27718: PUSH
27719: LD_INT 0
27721: PUSH
27722: EMPTY
27723: LIST
27724: LIST
27725: PUSH
27726: LD_INT 2
27728: NEG
27729: PUSH
27730: LD_INT 1
27732: NEG
27733: PUSH
27734: EMPTY
27735: LIST
27736: LIST
27737: PUSH
27738: LD_INT 2
27740: NEG
27741: PUSH
27742: LD_INT 2
27744: NEG
27745: PUSH
27746: EMPTY
27747: LIST
27748: LIST
27749: PUSH
27750: EMPTY
27751: LIST
27752: LIST
27753: LIST
27754: LIST
27755: LIST
27756: LIST
27757: LIST
27758: LIST
27759: LIST
27760: LIST
27761: LIST
27762: LIST
27763: LIST
27764: LIST
27765: LIST
27766: LIST
27767: LIST
27768: LIST
27769: LIST
27770: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27771: LD_ADDR_VAR 0 59
27775: PUSH
27776: LD_INT 0
27778: PUSH
27779: LD_INT 0
27781: PUSH
27782: EMPTY
27783: LIST
27784: LIST
27785: PUSH
27786: LD_INT 0
27788: PUSH
27789: LD_INT 1
27791: NEG
27792: PUSH
27793: EMPTY
27794: LIST
27795: LIST
27796: PUSH
27797: LD_INT 1
27799: PUSH
27800: LD_INT 0
27802: PUSH
27803: EMPTY
27804: LIST
27805: LIST
27806: PUSH
27807: LD_INT 1
27809: PUSH
27810: LD_INT 1
27812: PUSH
27813: EMPTY
27814: LIST
27815: LIST
27816: PUSH
27817: LD_INT 0
27819: PUSH
27820: LD_INT 1
27822: PUSH
27823: EMPTY
27824: LIST
27825: LIST
27826: PUSH
27827: LD_INT 1
27829: NEG
27830: PUSH
27831: LD_INT 0
27833: PUSH
27834: EMPTY
27835: LIST
27836: LIST
27837: PUSH
27838: LD_INT 1
27840: NEG
27841: PUSH
27842: LD_INT 1
27844: NEG
27845: PUSH
27846: EMPTY
27847: LIST
27848: LIST
27849: PUSH
27850: EMPTY
27851: LIST
27852: LIST
27853: LIST
27854: LIST
27855: LIST
27856: LIST
27857: LIST
27858: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27859: LD_ADDR_VAR 0 60
27863: PUSH
27864: LD_INT 0
27866: PUSH
27867: LD_INT 0
27869: PUSH
27870: EMPTY
27871: LIST
27872: LIST
27873: PUSH
27874: LD_INT 0
27876: PUSH
27877: LD_INT 1
27879: NEG
27880: PUSH
27881: EMPTY
27882: LIST
27883: LIST
27884: PUSH
27885: LD_INT 1
27887: PUSH
27888: LD_INT 0
27890: PUSH
27891: EMPTY
27892: LIST
27893: LIST
27894: PUSH
27895: LD_INT 1
27897: PUSH
27898: LD_INT 1
27900: PUSH
27901: EMPTY
27902: LIST
27903: LIST
27904: PUSH
27905: LD_INT 0
27907: PUSH
27908: LD_INT 1
27910: PUSH
27911: EMPTY
27912: LIST
27913: LIST
27914: PUSH
27915: LD_INT 1
27917: NEG
27918: PUSH
27919: LD_INT 0
27921: PUSH
27922: EMPTY
27923: LIST
27924: LIST
27925: PUSH
27926: LD_INT 1
27928: NEG
27929: PUSH
27930: LD_INT 1
27932: NEG
27933: PUSH
27934: EMPTY
27935: LIST
27936: LIST
27937: PUSH
27938: EMPTY
27939: LIST
27940: LIST
27941: LIST
27942: LIST
27943: LIST
27944: LIST
27945: LIST
27946: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27947: LD_ADDR_VAR 0 61
27951: PUSH
27952: LD_INT 0
27954: PUSH
27955: LD_INT 0
27957: PUSH
27958: EMPTY
27959: LIST
27960: LIST
27961: PUSH
27962: LD_INT 0
27964: PUSH
27965: LD_INT 1
27967: NEG
27968: PUSH
27969: EMPTY
27970: LIST
27971: LIST
27972: PUSH
27973: LD_INT 1
27975: PUSH
27976: LD_INT 0
27978: PUSH
27979: EMPTY
27980: LIST
27981: LIST
27982: PUSH
27983: LD_INT 1
27985: PUSH
27986: LD_INT 1
27988: PUSH
27989: EMPTY
27990: LIST
27991: LIST
27992: PUSH
27993: LD_INT 0
27995: PUSH
27996: LD_INT 1
27998: PUSH
27999: EMPTY
28000: LIST
28001: LIST
28002: PUSH
28003: LD_INT 1
28005: NEG
28006: PUSH
28007: LD_INT 0
28009: PUSH
28010: EMPTY
28011: LIST
28012: LIST
28013: PUSH
28014: LD_INT 1
28016: NEG
28017: PUSH
28018: LD_INT 1
28020: NEG
28021: PUSH
28022: EMPTY
28023: LIST
28024: LIST
28025: PUSH
28026: EMPTY
28027: LIST
28028: LIST
28029: LIST
28030: LIST
28031: LIST
28032: LIST
28033: LIST
28034: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28035: LD_ADDR_VAR 0 62
28039: PUSH
28040: LD_INT 0
28042: PUSH
28043: LD_INT 0
28045: PUSH
28046: EMPTY
28047: LIST
28048: LIST
28049: PUSH
28050: LD_INT 0
28052: PUSH
28053: LD_INT 1
28055: NEG
28056: PUSH
28057: EMPTY
28058: LIST
28059: LIST
28060: PUSH
28061: LD_INT 1
28063: PUSH
28064: LD_INT 0
28066: PUSH
28067: EMPTY
28068: LIST
28069: LIST
28070: PUSH
28071: LD_INT 1
28073: PUSH
28074: LD_INT 1
28076: PUSH
28077: EMPTY
28078: LIST
28079: LIST
28080: PUSH
28081: LD_INT 0
28083: PUSH
28084: LD_INT 1
28086: PUSH
28087: EMPTY
28088: LIST
28089: LIST
28090: PUSH
28091: LD_INT 1
28093: NEG
28094: PUSH
28095: LD_INT 0
28097: PUSH
28098: EMPTY
28099: LIST
28100: LIST
28101: PUSH
28102: LD_INT 1
28104: NEG
28105: PUSH
28106: LD_INT 1
28108: NEG
28109: PUSH
28110: EMPTY
28111: LIST
28112: LIST
28113: PUSH
28114: EMPTY
28115: LIST
28116: LIST
28117: LIST
28118: LIST
28119: LIST
28120: LIST
28121: LIST
28122: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28123: LD_ADDR_VAR 0 63
28127: PUSH
28128: LD_INT 0
28130: PUSH
28131: LD_INT 0
28133: PUSH
28134: EMPTY
28135: LIST
28136: LIST
28137: PUSH
28138: LD_INT 0
28140: PUSH
28141: LD_INT 1
28143: NEG
28144: PUSH
28145: EMPTY
28146: LIST
28147: LIST
28148: PUSH
28149: LD_INT 1
28151: PUSH
28152: LD_INT 0
28154: PUSH
28155: EMPTY
28156: LIST
28157: LIST
28158: PUSH
28159: LD_INT 1
28161: PUSH
28162: LD_INT 1
28164: PUSH
28165: EMPTY
28166: LIST
28167: LIST
28168: PUSH
28169: LD_INT 0
28171: PUSH
28172: LD_INT 1
28174: PUSH
28175: EMPTY
28176: LIST
28177: LIST
28178: PUSH
28179: LD_INT 1
28181: NEG
28182: PUSH
28183: LD_INT 0
28185: PUSH
28186: EMPTY
28187: LIST
28188: LIST
28189: PUSH
28190: LD_INT 1
28192: NEG
28193: PUSH
28194: LD_INT 1
28196: NEG
28197: PUSH
28198: EMPTY
28199: LIST
28200: LIST
28201: PUSH
28202: EMPTY
28203: LIST
28204: LIST
28205: LIST
28206: LIST
28207: LIST
28208: LIST
28209: LIST
28210: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28211: LD_ADDR_VAR 0 64
28215: PUSH
28216: LD_INT 0
28218: PUSH
28219: LD_INT 0
28221: PUSH
28222: EMPTY
28223: LIST
28224: LIST
28225: PUSH
28226: LD_INT 0
28228: PUSH
28229: LD_INT 1
28231: NEG
28232: PUSH
28233: EMPTY
28234: LIST
28235: LIST
28236: PUSH
28237: LD_INT 1
28239: PUSH
28240: LD_INT 0
28242: PUSH
28243: EMPTY
28244: LIST
28245: LIST
28246: PUSH
28247: LD_INT 1
28249: PUSH
28250: LD_INT 1
28252: PUSH
28253: EMPTY
28254: LIST
28255: LIST
28256: PUSH
28257: LD_INT 0
28259: PUSH
28260: LD_INT 1
28262: PUSH
28263: EMPTY
28264: LIST
28265: LIST
28266: PUSH
28267: LD_INT 1
28269: NEG
28270: PUSH
28271: LD_INT 0
28273: PUSH
28274: EMPTY
28275: LIST
28276: LIST
28277: PUSH
28278: LD_INT 1
28280: NEG
28281: PUSH
28282: LD_INT 1
28284: NEG
28285: PUSH
28286: EMPTY
28287: LIST
28288: LIST
28289: PUSH
28290: EMPTY
28291: LIST
28292: LIST
28293: LIST
28294: LIST
28295: LIST
28296: LIST
28297: LIST
28298: ST_TO_ADDR
// end ; 1 :
28299: GO 34196
28301: LD_INT 1
28303: DOUBLE
28304: EQUAL
28305: IFTRUE 28309
28307: GO 30932
28309: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28310: LD_ADDR_VAR 0 11
28314: PUSH
28315: LD_INT 1
28317: NEG
28318: PUSH
28319: LD_INT 3
28321: NEG
28322: PUSH
28323: EMPTY
28324: LIST
28325: LIST
28326: PUSH
28327: LD_INT 0
28329: PUSH
28330: LD_INT 3
28332: NEG
28333: PUSH
28334: EMPTY
28335: LIST
28336: LIST
28337: PUSH
28338: LD_INT 1
28340: PUSH
28341: LD_INT 2
28343: NEG
28344: PUSH
28345: EMPTY
28346: LIST
28347: LIST
28348: PUSH
28349: EMPTY
28350: LIST
28351: LIST
28352: LIST
28353: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28354: LD_ADDR_VAR 0 12
28358: PUSH
28359: LD_INT 2
28361: PUSH
28362: LD_INT 1
28364: NEG
28365: PUSH
28366: EMPTY
28367: LIST
28368: LIST
28369: PUSH
28370: LD_INT 3
28372: PUSH
28373: LD_INT 0
28375: PUSH
28376: EMPTY
28377: LIST
28378: LIST
28379: PUSH
28380: LD_INT 3
28382: PUSH
28383: LD_INT 1
28385: PUSH
28386: EMPTY
28387: LIST
28388: LIST
28389: PUSH
28390: EMPTY
28391: LIST
28392: LIST
28393: LIST
28394: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28395: LD_ADDR_VAR 0 13
28399: PUSH
28400: LD_INT 3
28402: PUSH
28403: LD_INT 2
28405: PUSH
28406: EMPTY
28407: LIST
28408: LIST
28409: PUSH
28410: LD_INT 3
28412: PUSH
28413: LD_INT 3
28415: PUSH
28416: EMPTY
28417: LIST
28418: LIST
28419: PUSH
28420: LD_INT 2
28422: PUSH
28423: LD_INT 3
28425: PUSH
28426: EMPTY
28427: LIST
28428: LIST
28429: PUSH
28430: EMPTY
28431: LIST
28432: LIST
28433: LIST
28434: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
28435: LD_ADDR_VAR 0 14
28439: PUSH
28440: LD_INT 1
28442: PUSH
28443: LD_INT 3
28445: PUSH
28446: EMPTY
28447: LIST
28448: LIST
28449: PUSH
28450: LD_INT 0
28452: PUSH
28453: LD_INT 3
28455: PUSH
28456: EMPTY
28457: LIST
28458: LIST
28459: PUSH
28460: LD_INT 1
28462: NEG
28463: PUSH
28464: LD_INT 2
28466: PUSH
28467: EMPTY
28468: LIST
28469: LIST
28470: PUSH
28471: EMPTY
28472: LIST
28473: LIST
28474: LIST
28475: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28476: LD_ADDR_VAR 0 15
28480: PUSH
28481: LD_INT 2
28483: NEG
28484: PUSH
28485: LD_INT 1
28487: PUSH
28488: EMPTY
28489: LIST
28490: LIST
28491: PUSH
28492: LD_INT 3
28494: NEG
28495: PUSH
28496: LD_INT 0
28498: PUSH
28499: EMPTY
28500: LIST
28501: LIST
28502: PUSH
28503: LD_INT 3
28505: NEG
28506: PUSH
28507: LD_INT 1
28509: NEG
28510: PUSH
28511: EMPTY
28512: LIST
28513: LIST
28514: PUSH
28515: EMPTY
28516: LIST
28517: LIST
28518: LIST
28519: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28520: LD_ADDR_VAR 0 16
28524: PUSH
28525: LD_INT 2
28527: NEG
28528: PUSH
28529: LD_INT 3
28531: NEG
28532: PUSH
28533: EMPTY
28534: LIST
28535: LIST
28536: PUSH
28537: LD_INT 3
28539: NEG
28540: PUSH
28541: LD_INT 2
28543: NEG
28544: PUSH
28545: EMPTY
28546: LIST
28547: LIST
28548: PUSH
28549: LD_INT 3
28551: NEG
28552: PUSH
28553: LD_INT 3
28555: NEG
28556: PUSH
28557: EMPTY
28558: LIST
28559: LIST
28560: PUSH
28561: EMPTY
28562: LIST
28563: LIST
28564: LIST
28565: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28566: LD_ADDR_VAR 0 17
28570: PUSH
28571: LD_INT 1
28573: NEG
28574: PUSH
28575: LD_INT 3
28577: NEG
28578: PUSH
28579: EMPTY
28580: LIST
28581: LIST
28582: PUSH
28583: LD_INT 0
28585: PUSH
28586: LD_INT 3
28588: NEG
28589: PUSH
28590: EMPTY
28591: LIST
28592: LIST
28593: PUSH
28594: LD_INT 1
28596: PUSH
28597: LD_INT 2
28599: NEG
28600: PUSH
28601: EMPTY
28602: LIST
28603: LIST
28604: PUSH
28605: EMPTY
28606: LIST
28607: LIST
28608: LIST
28609: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28610: LD_ADDR_VAR 0 18
28614: PUSH
28615: LD_INT 2
28617: PUSH
28618: LD_INT 1
28620: NEG
28621: PUSH
28622: EMPTY
28623: LIST
28624: LIST
28625: PUSH
28626: LD_INT 3
28628: PUSH
28629: LD_INT 0
28631: PUSH
28632: EMPTY
28633: LIST
28634: LIST
28635: PUSH
28636: LD_INT 3
28638: PUSH
28639: LD_INT 1
28641: PUSH
28642: EMPTY
28643: LIST
28644: LIST
28645: PUSH
28646: EMPTY
28647: LIST
28648: LIST
28649: LIST
28650: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28651: LD_ADDR_VAR 0 19
28655: PUSH
28656: LD_INT 3
28658: PUSH
28659: LD_INT 2
28661: PUSH
28662: EMPTY
28663: LIST
28664: LIST
28665: PUSH
28666: LD_INT 3
28668: PUSH
28669: LD_INT 3
28671: PUSH
28672: EMPTY
28673: LIST
28674: LIST
28675: PUSH
28676: LD_INT 2
28678: PUSH
28679: LD_INT 3
28681: PUSH
28682: EMPTY
28683: LIST
28684: LIST
28685: PUSH
28686: EMPTY
28687: LIST
28688: LIST
28689: LIST
28690: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
28691: LD_ADDR_VAR 0 20
28695: PUSH
28696: LD_INT 1
28698: PUSH
28699: LD_INT 3
28701: PUSH
28702: EMPTY
28703: LIST
28704: LIST
28705: PUSH
28706: LD_INT 0
28708: PUSH
28709: LD_INT 3
28711: PUSH
28712: EMPTY
28713: LIST
28714: LIST
28715: PUSH
28716: LD_INT 1
28718: NEG
28719: PUSH
28720: LD_INT 2
28722: PUSH
28723: EMPTY
28724: LIST
28725: LIST
28726: PUSH
28727: EMPTY
28728: LIST
28729: LIST
28730: LIST
28731: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28732: LD_ADDR_VAR 0 21
28736: PUSH
28737: LD_INT 2
28739: NEG
28740: PUSH
28741: LD_INT 1
28743: PUSH
28744: EMPTY
28745: LIST
28746: LIST
28747: PUSH
28748: LD_INT 3
28750: NEG
28751: PUSH
28752: LD_INT 0
28754: PUSH
28755: EMPTY
28756: LIST
28757: LIST
28758: PUSH
28759: LD_INT 3
28761: NEG
28762: PUSH
28763: LD_INT 1
28765: NEG
28766: PUSH
28767: EMPTY
28768: LIST
28769: LIST
28770: PUSH
28771: EMPTY
28772: LIST
28773: LIST
28774: LIST
28775: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28776: LD_ADDR_VAR 0 22
28780: PUSH
28781: LD_INT 2
28783: NEG
28784: PUSH
28785: LD_INT 3
28787: NEG
28788: PUSH
28789: EMPTY
28790: LIST
28791: LIST
28792: PUSH
28793: LD_INT 3
28795: NEG
28796: PUSH
28797: LD_INT 2
28799: NEG
28800: PUSH
28801: EMPTY
28802: LIST
28803: LIST
28804: PUSH
28805: LD_INT 3
28807: NEG
28808: PUSH
28809: LD_INT 3
28811: NEG
28812: PUSH
28813: EMPTY
28814: LIST
28815: LIST
28816: PUSH
28817: EMPTY
28818: LIST
28819: LIST
28820: LIST
28821: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
28822: LD_ADDR_VAR 0 23
28826: PUSH
28827: LD_INT 0
28829: PUSH
28830: LD_INT 3
28832: NEG
28833: PUSH
28834: EMPTY
28835: LIST
28836: LIST
28837: PUSH
28838: LD_INT 1
28840: NEG
28841: PUSH
28842: LD_INT 4
28844: NEG
28845: PUSH
28846: EMPTY
28847: LIST
28848: LIST
28849: PUSH
28850: LD_INT 1
28852: PUSH
28853: LD_INT 3
28855: NEG
28856: PUSH
28857: EMPTY
28858: LIST
28859: LIST
28860: PUSH
28861: EMPTY
28862: LIST
28863: LIST
28864: LIST
28865: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
28866: LD_ADDR_VAR 0 24
28870: PUSH
28871: LD_INT 3
28873: PUSH
28874: LD_INT 0
28876: PUSH
28877: EMPTY
28878: LIST
28879: LIST
28880: PUSH
28881: LD_INT 3
28883: PUSH
28884: LD_INT 1
28886: NEG
28887: PUSH
28888: EMPTY
28889: LIST
28890: LIST
28891: PUSH
28892: LD_INT 4
28894: PUSH
28895: LD_INT 1
28897: PUSH
28898: EMPTY
28899: LIST
28900: LIST
28901: PUSH
28902: EMPTY
28903: LIST
28904: LIST
28905: LIST
28906: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
28907: LD_ADDR_VAR 0 25
28911: PUSH
28912: LD_INT 3
28914: PUSH
28915: LD_INT 3
28917: PUSH
28918: EMPTY
28919: LIST
28920: LIST
28921: PUSH
28922: LD_INT 4
28924: PUSH
28925: LD_INT 3
28927: PUSH
28928: EMPTY
28929: LIST
28930: LIST
28931: PUSH
28932: LD_INT 3
28934: PUSH
28935: LD_INT 4
28937: PUSH
28938: EMPTY
28939: LIST
28940: LIST
28941: PUSH
28942: EMPTY
28943: LIST
28944: LIST
28945: LIST
28946: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
28947: LD_ADDR_VAR 0 26
28951: PUSH
28952: LD_INT 0
28954: PUSH
28955: LD_INT 3
28957: PUSH
28958: EMPTY
28959: LIST
28960: LIST
28961: PUSH
28962: LD_INT 1
28964: PUSH
28965: LD_INT 4
28967: PUSH
28968: EMPTY
28969: LIST
28970: LIST
28971: PUSH
28972: LD_INT 1
28974: NEG
28975: PUSH
28976: LD_INT 3
28978: PUSH
28979: EMPTY
28980: LIST
28981: LIST
28982: PUSH
28983: EMPTY
28984: LIST
28985: LIST
28986: LIST
28987: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
28988: LD_ADDR_VAR 0 27
28992: PUSH
28993: LD_INT 3
28995: NEG
28996: PUSH
28997: LD_INT 0
28999: PUSH
29000: EMPTY
29001: LIST
29002: LIST
29003: PUSH
29004: LD_INT 3
29006: NEG
29007: PUSH
29008: LD_INT 1
29010: PUSH
29011: EMPTY
29012: LIST
29013: LIST
29014: PUSH
29015: LD_INT 4
29017: NEG
29018: PUSH
29019: LD_INT 1
29021: NEG
29022: PUSH
29023: EMPTY
29024: LIST
29025: LIST
29026: PUSH
29027: EMPTY
29028: LIST
29029: LIST
29030: LIST
29031: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
29032: LD_ADDR_VAR 0 28
29036: PUSH
29037: LD_INT 3
29039: NEG
29040: PUSH
29041: LD_INT 3
29043: NEG
29044: PUSH
29045: EMPTY
29046: LIST
29047: LIST
29048: PUSH
29049: LD_INT 3
29051: NEG
29052: PUSH
29053: LD_INT 4
29055: NEG
29056: PUSH
29057: EMPTY
29058: LIST
29059: LIST
29060: PUSH
29061: LD_INT 4
29063: NEG
29064: PUSH
29065: LD_INT 3
29067: NEG
29068: PUSH
29069: EMPTY
29070: LIST
29071: LIST
29072: PUSH
29073: EMPTY
29074: LIST
29075: LIST
29076: LIST
29077: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
29078: LD_ADDR_VAR 0 29
29082: PUSH
29083: LD_INT 1
29085: NEG
29086: PUSH
29087: LD_INT 3
29089: NEG
29090: PUSH
29091: EMPTY
29092: LIST
29093: LIST
29094: PUSH
29095: LD_INT 0
29097: PUSH
29098: LD_INT 3
29100: NEG
29101: PUSH
29102: EMPTY
29103: LIST
29104: LIST
29105: PUSH
29106: LD_INT 1
29108: PUSH
29109: LD_INT 2
29111: NEG
29112: PUSH
29113: EMPTY
29114: LIST
29115: LIST
29116: PUSH
29117: LD_INT 1
29119: NEG
29120: PUSH
29121: LD_INT 4
29123: NEG
29124: PUSH
29125: EMPTY
29126: LIST
29127: LIST
29128: PUSH
29129: LD_INT 0
29131: PUSH
29132: LD_INT 4
29134: NEG
29135: PUSH
29136: EMPTY
29137: LIST
29138: LIST
29139: PUSH
29140: LD_INT 1
29142: PUSH
29143: LD_INT 3
29145: NEG
29146: PUSH
29147: EMPTY
29148: LIST
29149: LIST
29150: PUSH
29151: LD_INT 1
29153: NEG
29154: PUSH
29155: LD_INT 5
29157: NEG
29158: PUSH
29159: EMPTY
29160: LIST
29161: LIST
29162: PUSH
29163: LD_INT 0
29165: PUSH
29166: LD_INT 5
29168: NEG
29169: PUSH
29170: EMPTY
29171: LIST
29172: LIST
29173: PUSH
29174: LD_INT 1
29176: PUSH
29177: LD_INT 4
29179: NEG
29180: PUSH
29181: EMPTY
29182: LIST
29183: LIST
29184: PUSH
29185: LD_INT 1
29187: NEG
29188: PUSH
29189: LD_INT 6
29191: NEG
29192: PUSH
29193: EMPTY
29194: LIST
29195: LIST
29196: PUSH
29197: LD_INT 0
29199: PUSH
29200: LD_INT 6
29202: NEG
29203: PUSH
29204: EMPTY
29205: LIST
29206: LIST
29207: PUSH
29208: LD_INT 1
29210: PUSH
29211: LD_INT 5
29213: NEG
29214: PUSH
29215: EMPTY
29216: LIST
29217: LIST
29218: PUSH
29219: EMPTY
29220: LIST
29221: LIST
29222: LIST
29223: LIST
29224: LIST
29225: LIST
29226: LIST
29227: LIST
29228: LIST
29229: LIST
29230: LIST
29231: LIST
29232: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
29233: LD_ADDR_VAR 0 30
29237: PUSH
29238: LD_INT 2
29240: PUSH
29241: LD_INT 1
29243: NEG
29244: PUSH
29245: EMPTY
29246: LIST
29247: LIST
29248: PUSH
29249: LD_INT 3
29251: PUSH
29252: LD_INT 0
29254: PUSH
29255: EMPTY
29256: LIST
29257: LIST
29258: PUSH
29259: LD_INT 3
29261: PUSH
29262: LD_INT 1
29264: PUSH
29265: EMPTY
29266: LIST
29267: LIST
29268: PUSH
29269: LD_INT 3
29271: PUSH
29272: LD_INT 1
29274: NEG
29275: PUSH
29276: EMPTY
29277: LIST
29278: LIST
29279: PUSH
29280: LD_INT 4
29282: PUSH
29283: LD_INT 0
29285: PUSH
29286: EMPTY
29287: LIST
29288: LIST
29289: PUSH
29290: LD_INT 4
29292: PUSH
29293: LD_INT 1
29295: PUSH
29296: EMPTY
29297: LIST
29298: LIST
29299: PUSH
29300: LD_INT 4
29302: PUSH
29303: LD_INT 1
29305: NEG
29306: PUSH
29307: EMPTY
29308: LIST
29309: LIST
29310: PUSH
29311: LD_INT 5
29313: PUSH
29314: LD_INT 0
29316: PUSH
29317: EMPTY
29318: LIST
29319: LIST
29320: PUSH
29321: LD_INT 5
29323: PUSH
29324: LD_INT 1
29326: PUSH
29327: EMPTY
29328: LIST
29329: LIST
29330: PUSH
29331: LD_INT 5
29333: PUSH
29334: LD_INT 1
29336: NEG
29337: PUSH
29338: EMPTY
29339: LIST
29340: LIST
29341: PUSH
29342: LD_INT 6
29344: PUSH
29345: LD_INT 0
29347: PUSH
29348: EMPTY
29349: LIST
29350: LIST
29351: PUSH
29352: LD_INT 6
29354: PUSH
29355: LD_INT 1
29357: PUSH
29358: EMPTY
29359: LIST
29360: LIST
29361: PUSH
29362: EMPTY
29363: LIST
29364: LIST
29365: LIST
29366: LIST
29367: LIST
29368: LIST
29369: LIST
29370: LIST
29371: LIST
29372: LIST
29373: LIST
29374: LIST
29375: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
29376: LD_ADDR_VAR 0 31
29380: PUSH
29381: LD_INT 3
29383: PUSH
29384: LD_INT 2
29386: PUSH
29387: EMPTY
29388: LIST
29389: LIST
29390: PUSH
29391: LD_INT 3
29393: PUSH
29394: LD_INT 3
29396: PUSH
29397: EMPTY
29398: LIST
29399: LIST
29400: PUSH
29401: LD_INT 2
29403: PUSH
29404: LD_INT 3
29406: PUSH
29407: EMPTY
29408: LIST
29409: LIST
29410: PUSH
29411: LD_INT 4
29413: PUSH
29414: LD_INT 3
29416: PUSH
29417: EMPTY
29418: LIST
29419: LIST
29420: PUSH
29421: LD_INT 4
29423: PUSH
29424: LD_INT 4
29426: PUSH
29427: EMPTY
29428: LIST
29429: LIST
29430: PUSH
29431: LD_INT 3
29433: PUSH
29434: LD_INT 4
29436: PUSH
29437: EMPTY
29438: LIST
29439: LIST
29440: PUSH
29441: LD_INT 5
29443: PUSH
29444: LD_INT 4
29446: PUSH
29447: EMPTY
29448: LIST
29449: LIST
29450: PUSH
29451: LD_INT 5
29453: PUSH
29454: LD_INT 5
29456: PUSH
29457: EMPTY
29458: LIST
29459: LIST
29460: PUSH
29461: LD_INT 4
29463: PUSH
29464: LD_INT 5
29466: PUSH
29467: EMPTY
29468: LIST
29469: LIST
29470: PUSH
29471: LD_INT 6
29473: PUSH
29474: LD_INT 5
29476: PUSH
29477: EMPTY
29478: LIST
29479: LIST
29480: PUSH
29481: LD_INT 6
29483: PUSH
29484: LD_INT 6
29486: PUSH
29487: EMPTY
29488: LIST
29489: LIST
29490: PUSH
29491: LD_INT 5
29493: PUSH
29494: LD_INT 6
29496: PUSH
29497: EMPTY
29498: LIST
29499: LIST
29500: PUSH
29501: EMPTY
29502: LIST
29503: LIST
29504: LIST
29505: LIST
29506: LIST
29507: LIST
29508: LIST
29509: LIST
29510: LIST
29511: LIST
29512: LIST
29513: LIST
29514: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
29515: LD_ADDR_VAR 0 32
29519: PUSH
29520: LD_INT 1
29522: PUSH
29523: LD_INT 3
29525: PUSH
29526: EMPTY
29527: LIST
29528: LIST
29529: PUSH
29530: LD_INT 0
29532: PUSH
29533: LD_INT 3
29535: PUSH
29536: EMPTY
29537: LIST
29538: LIST
29539: PUSH
29540: LD_INT 1
29542: NEG
29543: PUSH
29544: LD_INT 2
29546: PUSH
29547: EMPTY
29548: LIST
29549: LIST
29550: PUSH
29551: LD_INT 1
29553: PUSH
29554: LD_INT 4
29556: PUSH
29557: EMPTY
29558: LIST
29559: LIST
29560: PUSH
29561: LD_INT 0
29563: PUSH
29564: LD_INT 4
29566: PUSH
29567: EMPTY
29568: LIST
29569: LIST
29570: PUSH
29571: LD_INT 1
29573: NEG
29574: PUSH
29575: LD_INT 3
29577: PUSH
29578: EMPTY
29579: LIST
29580: LIST
29581: PUSH
29582: LD_INT 1
29584: PUSH
29585: LD_INT 5
29587: PUSH
29588: EMPTY
29589: LIST
29590: LIST
29591: PUSH
29592: LD_INT 0
29594: PUSH
29595: LD_INT 5
29597: PUSH
29598: EMPTY
29599: LIST
29600: LIST
29601: PUSH
29602: LD_INT 1
29604: NEG
29605: PUSH
29606: LD_INT 4
29608: PUSH
29609: EMPTY
29610: LIST
29611: LIST
29612: PUSH
29613: LD_INT 1
29615: PUSH
29616: LD_INT 6
29618: PUSH
29619: EMPTY
29620: LIST
29621: LIST
29622: PUSH
29623: LD_INT 0
29625: PUSH
29626: LD_INT 6
29628: PUSH
29629: EMPTY
29630: LIST
29631: LIST
29632: PUSH
29633: LD_INT 1
29635: NEG
29636: PUSH
29637: LD_INT 5
29639: PUSH
29640: EMPTY
29641: LIST
29642: LIST
29643: PUSH
29644: EMPTY
29645: LIST
29646: LIST
29647: LIST
29648: LIST
29649: LIST
29650: LIST
29651: LIST
29652: LIST
29653: LIST
29654: LIST
29655: LIST
29656: LIST
29657: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
29658: LD_ADDR_VAR 0 33
29662: PUSH
29663: LD_INT 2
29665: NEG
29666: PUSH
29667: LD_INT 1
29669: PUSH
29670: EMPTY
29671: LIST
29672: LIST
29673: PUSH
29674: LD_INT 3
29676: NEG
29677: PUSH
29678: LD_INT 0
29680: PUSH
29681: EMPTY
29682: LIST
29683: LIST
29684: PUSH
29685: LD_INT 3
29687: NEG
29688: PUSH
29689: LD_INT 1
29691: NEG
29692: PUSH
29693: EMPTY
29694: LIST
29695: LIST
29696: PUSH
29697: LD_INT 3
29699: NEG
29700: PUSH
29701: LD_INT 1
29703: PUSH
29704: EMPTY
29705: LIST
29706: LIST
29707: PUSH
29708: LD_INT 4
29710: NEG
29711: PUSH
29712: LD_INT 0
29714: PUSH
29715: EMPTY
29716: LIST
29717: LIST
29718: PUSH
29719: LD_INT 4
29721: NEG
29722: PUSH
29723: LD_INT 1
29725: NEG
29726: PUSH
29727: EMPTY
29728: LIST
29729: LIST
29730: PUSH
29731: LD_INT 4
29733: NEG
29734: PUSH
29735: LD_INT 1
29737: PUSH
29738: EMPTY
29739: LIST
29740: LIST
29741: PUSH
29742: LD_INT 5
29744: NEG
29745: PUSH
29746: LD_INT 0
29748: PUSH
29749: EMPTY
29750: LIST
29751: LIST
29752: PUSH
29753: LD_INT 5
29755: NEG
29756: PUSH
29757: LD_INT 1
29759: NEG
29760: PUSH
29761: EMPTY
29762: LIST
29763: LIST
29764: PUSH
29765: LD_INT 5
29767: NEG
29768: PUSH
29769: LD_INT 1
29771: PUSH
29772: EMPTY
29773: LIST
29774: LIST
29775: PUSH
29776: LD_INT 6
29778: NEG
29779: PUSH
29780: LD_INT 0
29782: PUSH
29783: EMPTY
29784: LIST
29785: LIST
29786: PUSH
29787: LD_INT 6
29789: NEG
29790: PUSH
29791: LD_INT 1
29793: NEG
29794: PUSH
29795: EMPTY
29796: LIST
29797: LIST
29798: PUSH
29799: EMPTY
29800: LIST
29801: LIST
29802: LIST
29803: LIST
29804: LIST
29805: LIST
29806: LIST
29807: LIST
29808: LIST
29809: LIST
29810: LIST
29811: LIST
29812: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
29813: LD_ADDR_VAR 0 34
29817: PUSH
29818: LD_INT 2
29820: NEG
29821: PUSH
29822: LD_INT 3
29824: NEG
29825: PUSH
29826: EMPTY
29827: LIST
29828: LIST
29829: PUSH
29830: LD_INT 3
29832: NEG
29833: PUSH
29834: LD_INT 2
29836: NEG
29837: PUSH
29838: EMPTY
29839: LIST
29840: LIST
29841: PUSH
29842: LD_INT 3
29844: NEG
29845: PUSH
29846: LD_INT 3
29848: NEG
29849: PUSH
29850: EMPTY
29851: LIST
29852: LIST
29853: PUSH
29854: LD_INT 3
29856: NEG
29857: PUSH
29858: LD_INT 4
29860: NEG
29861: PUSH
29862: EMPTY
29863: LIST
29864: LIST
29865: PUSH
29866: LD_INT 4
29868: NEG
29869: PUSH
29870: LD_INT 3
29872: NEG
29873: PUSH
29874: EMPTY
29875: LIST
29876: LIST
29877: PUSH
29878: LD_INT 4
29880: NEG
29881: PUSH
29882: LD_INT 4
29884: NEG
29885: PUSH
29886: EMPTY
29887: LIST
29888: LIST
29889: PUSH
29890: LD_INT 4
29892: NEG
29893: PUSH
29894: LD_INT 5
29896: NEG
29897: PUSH
29898: EMPTY
29899: LIST
29900: LIST
29901: PUSH
29902: LD_INT 5
29904: NEG
29905: PUSH
29906: LD_INT 4
29908: NEG
29909: PUSH
29910: EMPTY
29911: LIST
29912: LIST
29913: PUSH
29914: LD_INT 5
29916: NEG
29917: PUSH
29918: LD_INT 5
29920: NEG
29921: PUSH
29922: EMPTY
29923: LIST
29924: LIST
29925: PUSH
29926: LD_INT 5
29928: NEG
29929: PUSH
29930: LD_INT 6
29932: NEG
29933: PUSH
29934: EMPTY
29935: LIST
29936: LIST
29937: PUSH
29938: LD_INT 6
29940: NEG
29941: PUSH
29942: LD_INT 5
29944: NEG
29945: PUSH
29946: EMPTY
29947: LIST
29948: LIST
29949: PUSH
29950: LD_INT 6
29952: NEG
29953: PUSH
29954: LD_INT 6
29956: NEG
29957: PUSH
29958: EMPTY
29959: LIST
29960: LIST
29961: PUSH
29962: EMPTY
29963: LIST
29964: LIST
29965: LIST
29966: LIST
29967: LIST
29968: LIST
29969: LIST
29970: LIST
29971: LIST
29972: LIST
29973: LIST
29974: LIST
29975: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
29976: LD_ADDR_VAR 0 41
29980: PUSH
29981: LD_INT 0
29983: PUSH
29984: LD_INT 2
29986: NEG
29987: PUSH
29988: EMPTY
29989: LIST
29990: LIST
29991: PUSH
29992: LD_INT 1
29994: NEG
29995: PUSH
29996: LD_INT 3
29998: NEG
29999: PUSH
30000: EMPTY
30001: LIST
30002: LIST
30003: PUSH
30004: LD_INT 1
30006: PUSH
30007: LD_INT 2
30009: NEG
30010: PUSH
30011: EMPTY
30012: LIST
30013: LIST
30014: PUSH
30015: EMPTY
30016: LIST
30017: LIST
30018: LIST
30019: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
30020: LD_ADDR_VAR 0 42
30024: PUSH
30025: LD_INT 2
30027: PUSH
30028: LD_INT 0
30030: PUSH
30031: EMPTY
30032: LIST
30033: LIST
30034: PUSH
30035: LD_INT 2
30037: PUSH
30038: LD_INT 1
30040: NEG
30041: PUSH
30042: EMPTY
30043: LIST
30044: LIST
30045: PUSH
30046: LD_INT 3
30048: PUSH
30049: LD_INT 1
30051: PUSH
30052: EMPTY
30053: LIST
30054: LIST
30055: PUSH
30056: EMPTY
30057: LIST
30058: LIST
30059: LIST
30060: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
30061: LD_ADDR_VAR 0 43
30065: PUSH
30066: LD_INT 2
30068: PUSH
30069: LD_INT 2
30071: PUSH
30072: EMPTY
30073: LIST
30074: LIST
30075: PUSH
30076: LD_INT 3
30078: PUSH
30079: LD_INT 2
30081: PUSH
30082: EMPTY
30083: LIST
30084: LIST
30085: PUSH
30086: LD_INT 2
30088: PUSH
30089: LD_INT 3
30091: PUSH
30092: EMPTY
30093: LIST
30094: LIST
30095: PUSH
30096: EMPTY
30097: LIST
30098: LIST
30099: LIST
30100: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
30101: LD_ADDR_VAR 0 44
30105: PUSH
30106: LD_INT 0
30108: PUSH
30109: LD_INT 2
30111: PUSH
30112: EMPTY
30113: LIST
30114: LIST
30115: PUSH
30116: LD_INT 1
30118: PUSH
30119: LD_INT 3
30121: PUSH
30122: EMPTY
30123: LIST
30124: LIST
30125: PUSH
30126: LD_INT 1
30128: NEG
30129: PUSH
30130: LD_INT 2
30132: PUSH
30133: EMPTY
30134: LIST
30135: LIST
30136: PUSH
30137: EMPTY
30138: LIST
30139: LIST
30140: LIST
30141: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30142: LD_ADDR_VAR 0 45
30146: PUSH
30147: LD_INT 2
30149: NEG
30150: PUSH
30151: LD_INT 0
30153: PUSH
30154: EMPTY
30155: LIST
30156: LIST
30157: PUSH
30158: LD_INT 2
30160: NEG
30161: PUSH
30162: LD_INT 1
30164: PUSH
30165: EMPTY
30166: LIST
30167: LIST
30168: PUSH
30169: LD_INT 3
30171: NEG
30172: PUSH
30173: LD_INT 1
30175: NEG
30176: PUSH
30177: EMPTY
30178: LIST
30179: LIST
30180: PUSH
30181: EMPTY
30182: LIST
30183: LIST
30184: LIST
30185: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
30186: LD_ADDR_VAR 0 46
30190: PUSH
30191: LD_INT 2
30193: NEG
30194: PUSH
30195: LD_INT 2
30197: NEG
30198: PUSH
30199: EMPTY
30200: LIST
30201: LIST
30202: PUSH
30203: LD_INT 2
30205: NEG
30206: PUSH
30207: LD_INT 3
30209: NEG
30210: PUSH
30211: EMPTY
30212: LIST
30213: LIST
30214: PUSH
30215: LD_INT 3
30217: NEG
30218: PUSH
30219: LD_INT 2
30221: NEG
30222: PUSH
30223: EMPTY
30224: LIST
30225: LIST
30226: PUSH
30227: EMPTY
30228: LIST
30229: LIST
30230: LIST
30231: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
30232: LD_ADDR_VAR 0 47
30236: PUSH
30237: LD_INT 2
30239: NEG
30240: PUSH
30241: LD_INT 3
30243: NEG
30244: PUSH
30245: EMPTY
30246: LIST
30247: LIST
30248: PUSH
30249: LD_INT 1
30251: NEG
30252: PUSH
30253: LD_INT 3
30255: NEG
30256: PUSH
30257: EMPTY
30258: LIST
30259: LIST
30260: PUSH
30261: EMPTY
30262: LIST
30263: LIST
30264: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
30265: LD_ADDR_VAR 0 48
30269: PUSH
30270: LD_INT 1
30272: PUSH
30273: LD_INT 2
30275: NEG
30276: PUSH
30277: EMPTY
30278: LIST
30279: LIST
30280: PUSH
30281: LD_INT 2
30283: PUSH
30284: LD_INT 1
30286: NEG
30287: PUSH
30288: EMPTY
30289: LIST
30290: LIST
30291: PUSH
30292: EMPTY
30293: LIST
30294: LIST
30295: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
30296: LD_ADDR_VAR 0 49
30300: PUSH
30301: LD_INT 3
30303: PUSH
30304: LD_INT 1
30306: PUSH
30307: EMPTY
30308: LIST
30309: LIST
30310: PUSH
30311: LD_INT 3
30313: PUSH
30314: LD_INT 2
30316: PUSH
30317: EMPTY
30318: LIST
30319: LIST
30320: PUSH
30321: EMPTY
30322: LIST
30323: LIST
30324: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
30325: LD_ADDR_VAR 0 50
30329: PUSH
30330: LD_INT 2
30332: PUSH
30333: LD_INT 3
30335: PUSH
30336: EMPTY
30337: LIST
30338: LIST
30339: PUSH
30340: LD_INT 1
30342: PUSH
30343: LD_INT 3
30345: PUSH
30346: EMPTY
30347: LIST
30348: LIST
30349: PUSH
30350: EMPTY
30351: LIST
30352: LIST
30353: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
30354: LD_ADDR_VAR 0 51
30358: PUSH
30359: LD_INT 1
30361: NEG
30362: PUSH
30363: LD_INT 2
30365: PUSH
30366: EMPTY
30367: LIST
30368: LIST
30369: PUSH
30370: LD_INT 2
30372: NEG
30373: PUSH
30374: LD_INT 1
30376: PUSH
30377: EMPTY
30378: LIST
30379: LIST
30380: PUSH
30381: EMPTY
30382: LIST
30383: LIST
30384: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
30385: LD_ADDR_VAR 0 52
30389: PUSH
30390: LD_INT 3
30392: NEG
30393: PUSH
30394: LD_INT 1
30396: NEG
30397: PUSH
30398: EMPTY
30399: LIST
30400: LIST
30401: PUSH
30402: LD_INT 3
30404: NEG
30405: PUSH
30406: LD_INT 2
30408: NEG
30409: PUSH
30410: EMPTY
30411: LIST
30412: LIST
30413: PUSH
30414: EMPTY
30415: LIST
30416: LIST
30417: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30418: LD_ADDR_VAR 0 53
30422: PUSH
30423: LD_INT 1
30425: NEG
30426: PUSH
30427: LD_INT 3
30429: NEG
30430: PUSH
30431: EMPTY
30432: LIST
30433: LIST
30434: PUSH
30435: LD_INT 0
30437: PUSH
30438: LD_INT 3
30440: NEG
30441: PUSH
30442: EMPTY
30443: LIST
30444: LIST
30445: PUSH
30446: LD_INT 1
30448: PUSH
30449: LD_INT 2
30451: NEG
30452: PUSH
30453: EMPTY
30454: LIST
30455: LIST
30456: PUSH
30457: EMPTY
30458: LIST
30459: LIST
30460: LIST
30461: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30462: LD_ADDR_VAR 0 54
30466: PUSH
30467: LD_INT 2
30469: PUSH
30470: LD_INT 1
30472: NEG
30473: PUSH
30474: EMPTY
30475: LIST
30476: LIST
30477: PUSH
30478: LD_INT 3
30480: PUSH
30481: LD_INT 0
30483: PUSH
30484: EMPTY
30485: LIST
30486: LIST
30487: PUSH
30488: LD_INT 3
30490: PUSH
30491: LD_INT 1
30493: PUSH
30494: EMPTY
30495: LIST
30496: LIST
30497: PUSH
30498: EMPTY
30499: LIST
30500: LIST
30501: LIST
30502: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30503: LD_ADDR_VAR 0 55
30507: PUSH
30508: LD_INT 3
30510: PUSH
30511: LD_INT 2
30513: PUSH
30514: EMPTY
30515: LIST
30516: LIST
30517: PUSH
30518: LD_INT 3
30520: PUSH
30521: LD_INT 3
30523: PUSH
30524: EMPTY
30525: LIST
30526: LIST
30527: PUSH
30528: LD_INT 2
30530: PUSH
30531: LD_INT 3
30533: PUSH
30534: EMPTY
30535: LIST
30536: LIST
30537: PUSH
30538: EMPTY
30539: LIST
30540: LIST
30541: LIST
30542: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30543: LD_ADDR_VAR 0 56
30547: PUSH
30548: LD_INT 1
30550: PUSH
30551: LD_INT 3
30553: PUSH
30554: EMPTY
30555: LIST
30556: LIST
30557: PUSH
30558: LD_INT 0
30560: PUSH
30561: LD_INT 3
30563: PUSH
30564: EMPTY
30565: LIST
30566: LIST
30567: PUSH
30568: LD_INT 1
30570: NEG
30571: PUSH
30572: LD_INT 2
30574: PUSH
30575: EMPTY
30576: LIST
30577: LIST
30578: PUSH
30579: EMPTY
30580: LIST
30581: LIST
30582: LIST
30583: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30584: LD_ADDR_VAR 0 57
30588: PUSH
30589: LD_INT 2
30591: NEG
30592: PUSH
30593: LD_INT 1
30595: PUSH
30596: EMPTY
30597: LIST
30598: LIST
30599: PUSH
30600: LD_INT 3
30602: NEG
30603: PUSH
30604: LD_INT 0
30606: PUSH
30607: EMPTY
30608: LIST
30609: LIST
30610: PUSH
30611: LD_INT 3
30613: NEG
30614: PUSH
30615: LD_INT 1
30617: NEG
30618: PUSH
30619: EMPTY
30620: LIST
30621: LIST
30622: PUSH
30623: EMPTY
30624: LIST
30625: LIST
30626: LIST
30627: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30628: LD_ADDR_VAR 0 58
30632: PUSH
30633: LD_INT 2
30635: NEG
30636: PUSH
30637: LD_INT 3
30639: NEG
30640: PUSH
30641: EMPTY
30642: LIST
30643: LIST
30644: PUSH
30645: LD_INT 3
30647: NEG
30648: PUSH
30649: LD_INT 2
30651: NEG
30652: PUSH
30653: EMPTY
30654: LIST
30655: LIST
30656: PUSH
30657: LD_INT 3
30659: NEG
30660: PUSH
30661: LD_INT 3
30663: NEG
30664: PUSH
30665: EMPTY
30666: LIST
30667: LIST
30668: PUSH
30669: EMPTY
30670: LIST
30671: LIST
30672: LIST
30673: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
30674: LD_ADDR_VAR 0 59
30678: PUSH
30679: LD_INT 1
30681: NEG
30682: PUSH
30683: LD_INT 2
30685: NEG
30686: PUSH
30687: EMPTY
30688: LIST
30689: LIST
30690: PUSH
30691: LD_INT 0
30693: PUSH
30694: LD_INT 2
30696: NEG
30697: PUSH
30698: EMPTY
30699: LIST
30700: LIST
30701: PUSH
30702: LD_INT 1
30704: PUSH
30705: LD_INT 1
30707: NEG
30708: PUSH
30709: EMPTY
30710: LIST
30711: LIST
30712: PUSH
30713: EMPTY
30714: LIST
30715: LIST
30716: LIST
30717: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
30718: LD_ADDR_VAR 0 60
30722: PUSH
30723: LD_INT 1
30725: PUSH
30726: LD_INT 1
30728: NEG
30729: PUSH
30730: EMPTY
30731: LIST
30732: LIST
30733: PUSH
30734: LD_INT 2
30736: PUSH
30737: LD_INT 0
30739: PUSH
30740: EMPTY
30741: LIST
30742: LIST
30743: PUSH
30744: LD_INT 2
30746: PUSH
30747: LD_INT 1
30749: PUSH
30750: EMPTY
30751: LIST
30752: LIST
30753: PUSH
30754: EMPTY
30755: LIST
30756: LIST
30757: LIST
30758: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
30759: LD_ADDR_VAR 0 61
30763: PUSH
30764: LD_INT 2
30766: PUSH
30767: LD_INT 1
30769: PUSH
30770: EMPTY
30771: LIST
30772: LIST
30773: PUSH
30774: LD_INT 2
30776: PUSH
30777: LD_INT 2
30779: PUSH
30780: EMPTY
30781: LIST
30782: LIST
30783: PUSH
30784: LD_INT 1
30786: PUSH
30787: LD_INT 2
30789: PUSH
30790: EMPTY
30791: LIST
30792: LIST
30793: PUSH
30794: EMPTY
30795: LIST
30796: LIST
30797: LIST
30798: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
30799: LD_ADDR_VAR 0 62
30803: PUSH
30804: LD_INT 1
30806: PUSH
30807: LD_INT 2
30809: PUSH
30810: EMPTY
30811: LIST
30812: LIST
30813: PUSH
30814: LD_INT 0
30816: PUSH
30817: LD_INT 2
30819: PUSH
30820: EMPTY
30821: LIST
30822: LIST
30823: PUSH
30824: LD_INT 1
30826: NEG
30827: PUSH
30828: LD_INT 1
30830: PUSH
30831: EMPTY
30832: LIST
30833: LIST
30834: PUSH
30835: EMPTY
30836: LIST
30837: LIST
30838: LIST
30839: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
30840: LD_ADDR_VAR 0 63
30844: PUSH
30845: LD_INT 1
30847: NEG
30848: PUSH
30849: LD_INT 1
30851: PUSH
30852: EMPTY
30853: LIST
30854: LIST
30855: PUSH
30856: LD_INT 2
30858: NEG
30859: PUSH
30860: LD_INT 0
30862: PUSH
30863: EMPTY
30864: LIST
30865: LIST
30866: PUSH
30867: LD_INT 2
30869: NEG
30870: PUSH
30871: LD_INT 1
30873: NEG
30874: PUSH
30875: EMPTY
30876: LIST
30877: LIST
30878: PUSH
30879: EMPTY
30880: LIST
30881: LIST
30882: LIST
30883: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30884: LD_ADDR_VAR 0 64
30888: PUSH
30889: LD_INT 1
30891: NEG
30892: PUSH
30893: LD_INT 2
30895: NEG
30896: PUSH
30897: EMPTY
30898: LIST
30899: LIST
30900: PUSH
30901: LD_INT 2
30903: NEG
30904: PUSH
30905: LD_INT 1
30907: NEG
30908: PUSH
30909: EMPTY
30910: LIST
30911: LIST
30912: PUSH
30913: LD_INT 2
30915: NEG
30916: PUSH
30917: LD_INT 2
30919: NEG
30920: PUSH
30921: EMPTY
30922: LIST
30923: LIST
30924: PUSH
30925: EMPTY
30926: LIST
30927: LIST
30928: LIST
30929: ST_TO_ADDR
// end ; 2 :
30930: GO 34196
30932: LD_INT 2
30934: DOUBLE
30935: EQUAL
30936: IFTRUE 30940
30938: GO 34195
30940: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
30941: LD_ADDR_VAR 0 29
30945: PUSH
30946: LD_INT 4
30948: PUSH
30949: LD_INT 0
30951: PUSH
30952: EMPTY
30953: LIST
30954: LIST
30955: PUSH
30956: LD_INT 4
30958: PUSH
30959: LD_INT 1
30961: NEG
30962: PUSH
30963: EMPTY
30964: LIST
30965: LIST
30966: PUSH
30967: LD_INT 5
30969: PUSH
30970: LD_INT 0
30972: PUSH
30973: EMPTY
30974: LIST
30975: LIST
30976: PUSH
30977: LD_INT 5
30979: PUSH
30980: LD_INT 1
30982: PUSH
30983: EMPTY
30984: LIST
30985: LIST
30986: PUSH
30987: LD_INT 4
30989: PUSH
30990: LD_INT 1
30992: PUSH
30993: EMPTY
30994: LIST
30995: LIST
30996: PUSH
30997: LD_INT 3
30999: PUSH
31000: LD_INT 0
31002: PUSH
31003: EMPTY
31004: LIST
31005: LIST
31006: PUSH
31007: LD_INT 3
31009: PUSH
31010: LD_INT 1
31012: NEG
31013: PUSH
31014: EMPTY
31015: LIST
31016: LIST
31017: PUSH
31018: LD_INT 3
31020: PUSH
31021: LD_INT 2
31023: NEG
31024: PUSH
31025: EMPTY
31026: LIST
31027: LIST
31028: PUSH
31029: LD_INT 5
31031: PUSH
31032: LD_INT 2
31034: PUSH
31035: EMPTY
31036: LIST
31037: LIST
31038: PUSH
31039: LD_INT 3
31041: PUSH
31042: LD_INT 3
31044: PUSH
31045: EMPTY
31046: LIST
31047: LIST
31048: PUSH
31049: LD_INT 3
31051: PUSH
31052: LD_INT 2
31054: PUSH
31055: EMPTY
31056: LIST
31057: LIST
31058: PUSH
31059: LD_INT 4
31061: PUSH
31062: LD_INT 3
31064: PUSH
31065: EMPTY
31066: LIST
31067: LIST
31068: PUSH
31069: LD_INT 4
31071: PUSH
31072: LD_INT 4
31074: PUSH
31075: EMPTY
31076: LIST
31077: LIST
31078: PUSH
31079: LD_INT 3
31081: PUSH
31082: LD_INT 4
31084: PUSH
31085: EMPTY
31086: LIST
31087: LIST
31088: PUSH
31089: LD_INT 2
31091: PUSH
31092: LD_INT 3
31094: PUSH
31095: EMPTY
31096: LIST
31097: LIST
31098: PUSH
31099: LD_INT 2
31101: PUSH
31102: LD_INT 2
31104: PUSH
31105: EMPTY
31106: LIST
31107: LIST
31108: PUSH
31109: LD_INT 4
31111: PUSH
31112: LD_INT 2
31114: PUSH
31115: EMPTY
31116: LIST
31117: LIST
31118: PUSH
31119: LD_INT 2
31121: PUSH
31122: LD_INT 4
31124: PUSH
31125: EMPTY
31126: LIST
31127: LIST
31128: PUSH
31129: LD_INT 0
31131: PUSH
31132: LD_INT 4
31134: PUSH
31135: EMPTY
31136: LIST
31137: LIST
31138: PUSH
31139: LD_INT 0
31141: PUSH
31142: LD_INT 3
31144: PUSH
31145: EMPTY
31146: LIST
31147: LIST
31148: PUSH
31149: LD_INT 1
31151: PUSH
31152: LD_INT 4
31154: PUSH
31155: EMPTY
31156: LIST
31157: LIST
31158: PUSH
31159: LD_INT 1
31161: PUSH
31162: LD_INT 5
31164: PUSH
31165: EMPTY
31166: LIST
31167: LIST
31168: PUSH
31169: LD_INT 0
31171: PUSH
31172: LD_INT 5
31174: PUSH
31175: EMPTY
31176: LIST
31177: LIST
31178: PUSH
31179: LD_INT 1
31181: NEG
31182: PUSH
31183: LD_INT 4
31185: PUSH
31186: EMPTY
31187: LIST
31188: LIST
31189: PUSH
31190: LD_INT 1
31192: NEG
31193: PUSH
31194: LD_INT 3
31196: PUSH
31197: EMPTY
31198: LIST
31199: LIST
31200: PUSH
31201: LD_INT 2
31203: PUSH
31204: LD_INT 5
31206: PUSH
31207: EMPTY
31208: LIST
31209: LIST
31210: PUSH
31211: LD_INT 2
31213: NEG
31214: PUSH
31215: LD_INT 3
31217: PUSH
31218: EMPTY
31219: LIST
31220: LIST
31221: PUSH
31222: LD_INT 3
31224: NEG
31225: PUSH
31226: LD_INT 0
31228: PUSH
31229: EMPTY
31230: LIST
31231: LIST
31232: PUSH
31233: LD_INT 3
31235: NEG
31236: PUSH
31237: LD_INT 1
31239: NEG
31240: PUSH
31241: EMPTY
31242: LIST
31243: LIST
31244: PUSH
31245: LD_INT 2
31247: NEG
31248: PUSH
31249: LD_INT 0
31251: PUSH
31252: EMPTY
31253: LIST
31254: LIST
31255: PUSH
31256: LD_INT 2
31258: NEG
31259: PUSH
31260: LD_INT 1
31262: PUSH
31263: EMPTY
31264: LIST
31265: LIST
31266: PUSH
31267: LD_INT 3
31269: NEG
31270: PUSH
31271: LD_INT 1
31273: PUSH
31274: EMPTY
31275: LIST
31276: LIST
31277: PUSH
31278: LD_INT 4
31280: NEG
31281: PUSH
31282: LD_INT 0
31284: PUSH
31285: EMPTY
31286: LIST
31287: LIST
31288: PUSH
31289: LD_INT 4
31291: NEG
31292: PUSH
31293: LD_INT 1
31295: NEG
31296: PUSH
31297: EMPTY
31298: LIST
31299: LIST
31300: PUSH
31301: LD_INT 4
31303: NEG
31304: PUSH
31305: LD_INT 2
31307: NEG
31308: PUSH
31309: EMPTY
31310: LIST
31311: LIST
31312: PUSH
31313: LD_INT 2
31315: NEG
31316: PUSH
31317: LD_INT 2
31319: PUSH
31320: EMPTY
31321: LIST
31322: LIST
31323: PUSH
31324: LD_INT 4
31326: NEG
31327: PUSH
31328: LD_INT 4
31330: NEG
31331: PUSH
31332: EMPTY
31333: LIST
31334: LIST
31335: PUSH
31336: LD_INT 4
31338: NEG
31339: PUSH
31340: LD_INT 5
31342: NEG
31343: PUSH
31344: EMPTY
31345: LIST
31346: LIST
31347: PUSH
31348: LD_INT 3
31350: NEG
31351: PUSH
31352: LD_INT 4
31354: NEG
31355: PUSH
31356: EMPTY
31357: LIST
31358: LIST
31359: PUSH
31360: LD_INT 3
31362: NEG
31363: PUSH
31364: LD_INT 3
31366: NEG
31367: PUSH
31368: EMPTY
31369: LIST
31370: LIST
31371: PUSH
31372: LD_INT 4
31374: NEG
31375: PUSH
31376: LD_INT 3
31378: NEG
31379: PUSH
31380: EMPTY
31381: LIST
31382: LIST
31383: PUSH
31384: LD_INT 5
31386: NEG
31387: PUSH
31388: LD_INT 4
31390: NEG
31391: PUSH
31392: EMPTY
31393: LIST
31394: LIST
31395: PUSH
31396: LD_INT 5
31398: NEG
31399: PUSH
31400: LD_INT 5
31402: NEG
31403: PUSH
31404: EMPTY
31405: LIST
31406: LIST
31407: PUSH
31408: LD_INT 3
31410: NEG
31411: PUSH
31412: LD_INT 5
31414: NEG
31415: PUSH
31416: EMPTY
31417: LIST
31418: LIST
31419: PUSH
31420: LD_INT 5
31422: NEG
31423: PUSH
31424: LD_INT 3
31426: NEG
31427: PUSH
31428: EMPTY
31429: LIST
31430: LIST
31431: PUSH
31432: EMPTY
31433: LIST
31434: LIST
31435: LIST
31436: LIST
31437: LIST
31438: LIST
31439: LIST
31440: LIST
31441: LIST
31442: LIST
31443: LIST
31444: LIST
31445: LIST
31446: LIST
31447: LIST
31448: LIST
31449: LIST
31450: LIST
31451: LIST
31452: LIST
31453: LIST
31454: LIST
31455: LIST
31456: LIST
31457: LIST
31458: LIST
31459: LIST
31460: LIST
31461: LIST
31462: LIST
31463: LIST
31464: LIST
31465: LIST
31466: LIST
31467: LIST
31468: LIST
31469: LIST
31470: LIST
31471: LIST
31472: LIST
31473: LIST
31474: LIST
31475: LIST
31476: LIST
31477: LIST
31478: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
31479: LD_ADDR_VAR 0 30
31483: PUSH
31484: LD_INT 4
31486: PUSH
31487: LD_INT 4
31489: PUSH
31490: EMPTY
31491: LIST
31492: LIST
31493: PUSH
31494: LD_INT 4
31496: PUSH
31497: LD_INT 3
31499: PUSH
31500: EMPTY
31501: LIST
31502: LIST
31503: PUSH
31504: LD_INT 5
31506: PUSH
31507: LD_INT 4
31509: PUSH
31510: EMPTY
31511: LIST
31512: LIST
31513: PUSH
31514: LD_INT 5
31516: PUSH
31517: LD_INT 5
31519: PUSH
31520: EMPTY
31521: LIST
31522: LIST
31523: PUSH
31524: LD_INT 4
31526: PUSH
31527: LD_INT 5
31529: PUSH
31530: EMPTY
31531: LIST
31532: LIST
31533: PUSH
31534: LD_INT 3
31536: PUSH
31537: LD_INT 4
31539: PUSH
31540: EMPTY
31541: LIST
31542: LIST
31543: PUSH
31544: LD_INT 3
31546: PUSH
31547: LD_INT 3
31549: PUSH
31550: EMPTY
31551: LIST
31552: LIST
31553: PUSH
31554: LD_INT 5
31556: PUSH
31557: LD_INT 3
31559: PUSH
31560: EMPTY
31561: LIST
31562: LIST
31563: PUSH
31564: LD_INT 3
31566: PUSH
31567: LD_INT 5
31569: PUSH
31570: EMPTY
31571: LIST
31572: LIST
31573: PUSH
31574: LD_INT 0
31576: PUSH
31577: LD_INT 3
31579: PUSH
31580: EMPTY
31581: LIST
31582: LIST
31583: PUSH
31584: LD_INT 0
31586: PUSH
31587: LD_INT 2
31589: PUSH
31590: EMPTY
31591: LIST
31592: LIST
31593: PUSH
31594: LD_INT 1
31596: PUSH
31597: LD_INT 3
31599: PUSH
31600: EMPTY
31601: LIST
31602: LIST
31603: PUSH
31604: LD_INT 1
31606: PUSH
31607: LD_INT 4
31609: PUSH
31610: EMPTY
31611: LIST
31612: LIST
31613: PUSH
31614: LD_INT 0
31616: PUSH
31617: LD_INT 4
31619: PUSH
31620: EMPTY
31621: LIST
31622: LIST
31623: PUSH
31624: LD_INT 1
31626: NEG
31627: PUSH
31628: LD_INT 3
31630: PUSH
31631: EMPTY
31632: LIST
31633: LIST
31634: PUSH
31635: LD_INT 1
31637: NEG
31638: PUSH
31639: LD_INT 2
31641: PUSH
31642: EMPTY
31643: LIST
31644: LIST
31645: PUSH
31646: LD_INT 2
31648: PUSH
31649: LD_INT 4
31651: PUSH
31652: EMPTY
31653: LIST
31654: LIST
31655: PUSH
31656: LD_INT 2
31658: NEG
31659: PUSH
31660: LD_INT 2
31662: PUSH
31663: EMPTY
31664: LIST
31665: LIST
31666: PUSH
31667: LD_INT 4
31669: NEG
31670: PUSH
31671: LD_INT 0
31673: PUSH
31674: EMPTY
31675: LIST
31676: LIST
31677: PUSH
31678: LD_INT 4
31680: NEG
31681: PUSH
31682: LD_INT 1
31684: NEG
31685: PUSH
31686: EMPTY
31687: LIST
31688: LIST
31689: PUSH
31690: LD_INT 3
31692: NEG
31693: PUSH
31694: LD_INT 0
31696: PUSH
31697: EMPTY
31698: LIST
31699: LIST
31700: PUSH
31701: LD_INT 3
31703: NEG
31704: PUSH
31705: LD_INT 1
31707: PUSH
31708: EMPTY
31709: LIST
31710: LIST
31711: PUSH
31712: LD_INT 4
31714: NEG
31715: PUSH
31716: LD_INT 1
31718: PUSH
31719: EMPTY
31720: LIST
31721: LIST
31722: PUSH
31723: LD_INT 5
31725: NEG
31726: PUSH
31727: LD_INT 0
31729: PUSH
31730: EMPTY
31731: LIST
31732: LIST
31733: PUSH
31734: LD_INT 5
31736: NEG
31737: PUSH
31738: LD_INT 1
31740: NEG
31741: PUSH
31742: EMPTY
31743: LIST
31744: LIST
31745: PUSH
31746: LD_INT 5
31748: NEG
31749: PUSH
31750: LD_INT 2
31752: NEG
31753: PUSH
31754: EMPTY
31755: LIST
31756: LIST
31757: PUSH
31758: LD_INT 3
31760: NEG
31761: PUSH
31762: LD_INT 2
31764: PUSH
31765: EMPTY
31766: LIST
31767: LIST
31768: PUSH
31769: LD_INT 3
31771: NEG
31772: PUSH
31773: LD_INT 3
31775: NEG
31776: PUSH
31777: EMPTY
31778: LIST
31779: LIST
31780: PUSH
31781: LD_INT 3
31783: NEG
31784: PUSH
31785: LD_INT 4
31787: NEG
31788: PUSH
31789: EMPTY
31790: LIST
31791: LIST
31792: PUSH
31793: LD_INT 2
31795: NEG
31796: PUSH
31797: LD_INT 3
31799: NEG
31800: PUSH
31801: EMPTY
31802: LIST
31803: LIST
31804: PUSH
31805: LD_INT 2
31807: NEG
31808: PUSH
31809: LD_INT 2
31811: NEG
31812: PUSH
31813: EMPTY
31814: LIST
31815: LIST
31816: PUSH
31817: LD_INT 3
31819: NEG
31820: PUSH
31821: LD_INT 2
31823: NEG
31824: PUSH
31825: EMPTY
31826: LIST
31827: LIST
31828: PUSH
31829: LD_INT 4
31831: NEG
31832: PUSH
31833: LD_INT 3
31835: NEG
31836: PUSH
31837: EMPTY
31838: LIST
31839: LIST
31840: PUSH
31841: LD_INT 4
31843: NEG
31844: PUSH
31845: LD_INT 4
31847: NEG
31848: PUSH
31849: EMPTY
31850: LIST
31851: LIST
31852: PUSH
31853: LD_INT 2
31855: NEG
31856: PUSH
31857: LD_INT 4
31859: NEG
31860: PUSH
31861: EMPTY
31862: LIST
31863: LIST
31864: PUSH
31865: LD_INT 4
31867: NEG
31868: PUSH
31869: LD_INT 2
31871: NEG
31872: PUSH
31873: EMPTY
31874: LIST
31875: LIST
31876: PUSH
31877: LD_INT 0
31879: PUSH
31880: LD_INT 4
31882: NEG
31883: PUSH
31884: EMPTY
31885: LIST
31886: LIST
31887: PUSH
31888: LD_INT 0
31890: PUSH
31891: LD_INT 5
31893: NEG
31894: PUSH
31895: EMPTY
31896: LIST
31897: LIST
31898: PUSH
31899: LD_INT 1
31901: PUSH
31902: LD_INT 4
31904: NEG
31905: PUSH
31906: EMPTY
31907: LIST
31908: LIST
31909: PUSH
31910: LD_INT 1
31912: PUSH
31913: LD_INT 3
31915: NEG
31916: PUSH
31917: EMPTY
31918: LIST
31919: LIST
31920: PUSH
31921: LD_INT 0
31923: PUSH
31924: LD_INT 3
31926: NEG
31927: PUSH
31928: EMPTY
31929: LIST
31930: LIST
31931: PUSH
31932: LD_INT 1
31934: NEG
31935: PUSH
31936: LD_INT 4
31938: NEG
31939: PUSH
31940: EMPTY
31941: LIST
31942: LIST
31943: PUSH
31944: LD_INT 1
31946: NEG
31947: PUSH
31948: LD_INT 5
31950: NEG
31951: PUSH
31952: EMPTY
31953: LIST
31954: LIST
31955: PUSH
31956: LD_INT 2
31958: PUSH
31959: LD_INT 3
31961: NEG
31962: PUSH
31963: EMPTY
31964: LIST
31965: LIST
31966: PUSH
31967: LD_INT 2
31969: NEG
31970: PUSH
31971: LD_INT 5
31973: NEG
31974: PUSH
31975: EMPTY
31976: LIST
31977: LIST
31978: PUSH
31979: EMPTY
31980: LIST
31981: LIST
31982: LIST
31983: LIST
31984: LIST
31985: LIST
31986: LIST
31987: LIST
31988: LIST
31989: LIST
31990: LIST
31991: LIST
31992: LIST
31993: LIST
31994: LIST
31995: LIST
31996: LIST
31997: LIST
31998: LIST
31999: LIST
32000: LIST
32001: LIST
32002: LIST
32003: LIST
32004: LIST
32005: LIST
32006: LIST
32007: LIST
32008: LIST
32009: LIST
32010: LIST
32011: LIST
32012: LIST
32013: LIST
32014: LIST
32015: LIST
32016: LIST
32017: LIST
32018: LIST
32019: LIST
32020: LIST
32021: LIST
32022: LIST
32023: LIST
32024: LIST
32025: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
32026: LD_ADDR_VAR 0 31
32030: PUSH
32031: LD_INT 0
32033: PUSH
32034: LD_INT 4
32036: PUSH
32037: EMPTY
32038: LIST
32039: LIST
32040: PUSH
32041: LD_INT 0
32043: PUSH
32044: LD_INT 3
32046: PUSH
32047: EMPTY
32048: LIST
32049: LIST
32050: PUSH
32051: LD_INT 1
32053: PUSH
32054: LD_INT 4
32056: PUSH
32057: EMPTY
32058: LIST
32059: LIST
32060: PUSH
32061: LD_INT 1
32063: PUSH
32064: LD_INT 5
32066: PUSH
32067: EMPTY
32068: LIST
32069: LIST
32070: PUSH
32071: LD_INT 0
32073: PUSH
32074: LD_INT 5
32076: PUSH
32077: EMPTY
32078: LIST
32079: LIST
32080: PUSH
32081: LD_INT 1
32083: NEG
32084: PUSH
32085: LD_INT 4
32087: PUSH
32088: EMPTY
32089: LIST
32090: LIST
32091: PUSH
32092: LD_INT 1
32094: NEG
32095: PUSH
32096: LD_INT 3
32098: PUSH
32099: EMPTY
32100: LIST
32101: LIST
32102: PUSH
32103: LD_INT 2
32105: PUSH
32106: LD_INT 5
32108: PUSH
32109: EMPTY
32110: LIST
32111: LIST
32112: PUSH
32113: LD_INT 2
32115: NEG
32116: PUSH
32117: LD_INT 3
32119: PUSH
32120: EMPTY
32121: LIST
32122: LIST
32123: PUSH
32124: LD_INT 3
32126: NEG
32127: PUSH
32128: LD_INT 0
32130: PUSH
32131: EMPTY
32132: LIST
32133: LIST
32134: PUSH
32135: LD_INT 3
32137: NEG
32138: PUSH
32139: LD_INT 1
32141: NEG
32142: PUSH
32143: EMPTY
32144: LIST
32145: LIST
32146: PUSH
32147: LD_INT 2
32149: NEG
32150: PUSH
32151: LD_INT 0
32153: PUSH
32154: EMPTY
32155: LIST
32156: LIST
32157: PUSH
32158: LD_INT 2
32160: NEG
32161: PUSH
32162: LD_INT 1
32164: PUSH
32165: EMPTY
32166: LIST
32167: LIST
32168: PUSH
32169: LD_INT 3
32171: NEG
32172: PUSH
32173: LD_INT 1
32175: PUSH
32176: EMPTY
32177: LIST
32178: LIST
32179: PUSH
32180: LD_INT 4
32182: NEG
32183: PUSH
32184: LD_INT 0
32186: PUSH
32187: EMPTY
32188: LIST
32189: LIST
32190: PUSH
32191: LD_INT 4
32193: NEG
32194: PUSH
32195: LD_INT 1
32197: NEG
32198: PUSH
32199: EMPTY
32200: LIST
32201: LIST
32202: PUSH
32203: LD_INT 4
32205: NEG
32206: PUSH
32207: LD_INT 2
32209: NEG
32210: PUSH
32211: EMPTY
32212: LIST
32213: LIST
32214: PUSH
32215: LD_INT 2
32217: NEG
32218: PUSH
32219: LD_INT 2
32221: PUSH
32222: EMPTY
32223: LIST
32224: LIST
32225: PUSH
32226: LD_INT 4
32228: NEG
32229: PUSH
32230: LD_INT 4
32232: NEG
32233: PUSH
32234: EMPTY
32235: LIST
32236: LIST
32237: PUSH
32238: LD_INT 4
32240: NEG
32241: PUSH
32242: LD_INT 5
32244: NEG
32245: PUSH
32246: EMPTY
32247: LIST
32248: LIST
32249: PUSH
32250: LD_INT 3
32252: NEG
32253: PUSH
32254: LD_INT 4
32256: NEG
32257: PUSH
32258: EMPTY
32259: LIST
32260: LIST
32261: PUSH
32262: LD_INT 3
32264: NEG
32265: PUSH
32266: LD_INT 3
32268: NEG
32269: PUSH
32270: EMPTY
32271: LIST
32272: LIST
32273: PUSH
32274: LD_INT 4
32276: NEG
32277: PUSH
32278: LD_INT 3
32280: NEG
32281: PUSH
32282: EMPTY
32283: LIST
32284: LIST
32285: PUSH
32286: LD_INT 5
32288: NEG
32289: PUSH
32290: LD_INT 4
32292: NEG
32293: PUSH
32294: EMPTY
32295: LIST
32296: LIST
32297: PUSH
32298: LD_INT 5
32300: NEG
32301: PUSH
32302: LD_INT 5
32304: NEG
32305: PUSH
32306: EMPTY
32307: LIST
32308: LIST
32309: PUSH
32310: LD_INT 3
32312: NEG
32313: PUSH
32314: LD_INT 5
32316: NEG
32317: PUSH
32318: EMPTY
32319: LIST
32320: LIST
32321: PUSH
32322: LD_INT 5
32324: NEG
32325: PUSH
32326: LD_INT 3
32328: NEG
32329: PUSH
32330: EMPTY
32331: LIST
32332: LIST
32333: PUSH
32334: LD_INT 0
32336: PUSH
32337: LD_INT 3
32339: NEG
32340: PUSH
32341: EMPTY
32342: LIST
32343: LIST
32344: PUSH
32345: LD_INT 0
32347: PUSH
32348: LD_INT 4
32350: NEG
32351: PUSH
32352: EMPTY
32353: LIST
32354: LIST
32355: PUSH
32356: LD_INT 1
32358: PUSH
32359: LD_INT 3
32361: NEG
32362: PUSH
32363: EMPTY
32364: LIST
32365: LIST
32366: PUSH
32367: LD_INT 1
32369: PUSH
32370: LD_INT 2
32372: NEG
32373: PUSH
32374: EMPTY
32375: LIST
32376: LIST
32377: PUSH
32378: LD_INT 0
32380: PUSH
32381: LD_INT 2
32383: NEG
32384: PUSH
32385: EMPTY
32386: LIST
32387: LIST
32388: PUSH
32389: LD_INT 1
32391: NEG
32392: PUSH
32393: LD_INT 3
32395: NEG
32396: PUSH
32397: EMPTY
32398: LIST
32399: LIST
32400: PUSH
32401: LD_INT 1
32403: NEG
32404: PUSH
32405: LD_INT 4
32407: NEG
32408: PUSH
32409: EMPTY
32410: LIST
32411: LIST
32412: PUSH
32413: LD_INT 2
32415: PUSH
32416: LD_INT 2
32418: NEG
32419: PUSH
32420: EMPTY
32421: LIST
32422: LIST
32423: PUSH
32424: LD_INT 2
32426: NEG
32427: PUSH
32428: LD_INT 4
32430: NEG
32431: PUSH
32432: EMPTY
32433: LIST
32434: LIST
32435: PUSH
32436: LD_INT 4
32438: PUSH
32439: LD_INT 0
32441: PUSH
32442: EMPTY
32443: LIST
32444: LIST
32445: PUSH
32446: LD_INT 4
32448: PUSH
32449: LD_INT 1
32451: NEG
32452: PUSH
32453: EMPTY
32454: LIST
32455: LIST
32456: PUSH
32457: LD_INT 5
32459: PUSH
32460: LD_INT 0
32462: PUSH
32463: EMPTY
32464: LIST
32465: LIST
32466: PUSH
32467: LD_INT 5
32469: PUSH
32470: LD_INT 1
32472: PUSH
32473: EMPTY
32474: LIST
32475: LIST
32476: PUSH
32477: LD_INT 4
32479: PUSH
32480: LD_INT 1
32482: PUSH
32483: EMPTY
32484: LIST
32485: LIST
32486: PUSH
32487: LD_INT 3
32489: PUSH
32490: LD_INT 0
32492: PUSH
32493: EMPTY
32494: LIST
32495: LIST
32496: PUSH
32497: LD_INT 3
32499: PUSH
32500: LD_INT 1
32502: NEG
32503: PUSH
32504: EMPTY
32505: LIST
32506: LIST
32507: PUSH
32508: LD_INT 3
32510: PUSH
32511: LD_INT 2
32513: NEG
32514: PUSH
32515: EMPTY
32516: LIST
32517: LIST
32518: PUSH
32519: LD_INT 5
32521: PUSH
32522: LD_INT 2
32524: PUSH
32525: EMPTY
32526: LIST
32527: LIST
32528: PUSH
32529: EMPTY
32530: LIST
32531: LIST
32532: LIST
32533: LIST
32534: LIST
32535: LIST
32536: LIST
32537: LIST
32538: LIST
32539: LIST
32540: LIST
32541: LIST
32542: LIST
32543: LIST
32544: LIST
32545: LIST
32546: LIST
32547: LIST
32548: LIST
32549: LIST
32550: LIST
32551: LIST
32552: LIST
32553: LIST
32554: LIST
32555: LIST
32556: LIST
32557: LIST
32558: LIST
32559: LIST
32560: LIST
32561: LIST
32562: LIST
32563: LIST
32564: LIST
32565: LIST
32566: LIST
32567: LIST
32568: LIST
32569: LIST
32570: LIST
32571: LIST
32572: LIST
32573: LIST
32574: LIST
32575: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
32576: LD_ADDR_VAR 0 32
32580: PUSH
32581: LD_INT 4
32583: NEG
32584: PUSH
32585: LD_INT 0
32587: PUSH
32588: EMPTY
32589: LIST
32590: LIST
32591: PUSH
32592: LD_INT 4
32594: NEG
32595: PUSH
32596: LD_INT 1
32598: NEG
32599: PUSH
32600: EMPTY
32601: LIST
32602: LIST
32603: PUSH
32604: LD_INT 3
32606: NEG
32607: PUSH
32608: LD_INT 0
32610: PUSH
32611: EMPTY
32612: LIST
32613: LIST
32614: PUSH
32615: LD_INT 3
32617: NEG
32618: PUSH
32619: LD_INT 1
32621: PUSH
32622: EMPTY
32623: LIST
32624: LIST
32625: PUSH
32626: LD_INT 4
32628: NEG
32629: PUSH
32630: LD_INT 1
32632: PUSH
32633: EMPTY
32634: LIST
32635: LIST
32636: PUSH
32637: LD_INT 5
32639: NEG
32640: PUSH
32641: LD_INT 0
32643: PUSH
32644: EMPTY
32645: LIST
32646: LIST
32647: PUSH
32648: LD_INT 5
32650: NEG
32651: PUSH
32652: LD_INT 1
32654: NEG
32655: PUSH
32656: EMPTY
32657: LIST
32658: LIST
32659: PUSH
32660: LD_INT 5
32662: NEG
32663: PUSH
32664: LD_INT 2
32666: NEG
32667: PUSH
32668: EMPTY
32669: LIST
32670: LIST
32671: PUSH
32672: LD_INT 3
32674: NEG
32675: PUSH
32676: LD_INT 2
32678: PUSH
32679: EMPTY
32680: LIST
32681: LIST
32682: PUSH
32683: LD_INT 3
32685: NEG
32686: PUSH
32687: LD_INT 3
32689: NEG
32690: PUSH
32691: EMPTY
32692: LIST
32693: LIST
32694: PUSH
32695: LD_INT 3
32697: NEG
32698: PUSH
32699: LD_INT 4
32701: NEG
32702: PUSH
32703: EMPTY
32704: LIST
32705: LIST
32706: PUSH
32707: LD_INT 2
32709: NEG
32710: PUSH
32711: LD_INT 3
32713: NEG
32714: PUSH
32715: EMPTY
32716: LIST
32717: LIST
32718: PUSH
32719: LD_INT 2
32721: NEG
32722: PUSH
32723: LD_INT 2
32725: NEG
32726: PUSH
32727: EMPTY
32728: LIST
32729: LIST
32730: PUSH
32731: LD_INT 3
32733: NEG
32734: PUSH
32735: LD_INT 2
32737: NEG
32738: PUSH
32739: EMPTY
32740: LIST
32741: LIST
32742: PUSH
32743: LD_INT 4
32745: NEG
32746: PUSH
32747: LD_INT 3
32749: NEG
32750: PUSH
32751: EMPTY
32752: LIST
32753: LIST
32754: PUSH
32755: LD_INT 4
32757: NEG
32758: PUSH
32759: LD_INT 4
32761: NEG
32762: PUSH
32763: EMPTY
32764: LIST
32765: LIST
32766: PUSH
32767: LD_INT 2
32769: NEG
32770: PUSH
32771: LD_INT 4
32773: NEG
32774: PUSH
32775: EMPTY
32776: LIST
32777: LIST
32778: PUSH
32779: LD_INT 4
32781: NEG
32782: PUSH
32783: LD_INT 2
32785: NEG
32786: PUSH
32787: EMPTY
32788: LIST
32789: LIST
32790: PUSH
32791: LD_INT 0
32793: PUSH
32794: LD_INT 4
32796: NEG
32797: PUSH
32798: EMPTY
32799: LIST
32800: LIST
32801: PUSH
32802: LD_INT 0
32804: PUSH
32805: LD_INT 5
32807: NEG
32808: PUSH
32809: EMPTY
32810: LIST
32811: LIST
32812: PUSH
32813: LD_INT 1
32815: PUSH
32816: LD_INT 4
32818: NEG
32819: PUSH
32820: EMPTY
32821: LIST
32822: LIST
32823: PUSH
32824: LD_INT 1
32826: PUSH
32827: LD_INT 3
32829: NEG
32830: PUSH
32831: EMPTY
32832: LIST
32833: LIST
32834: PUSH
32835: LD_INT 0
32837: PUSH
32838: LD_INT 3
32840: NEG
32841: PUSH
32842: EMPTY
32843: LIST
32844: LIST
32845: PUSH
32846: LD_INT 1
32848: NEG
32849: PUSH
32850: LD_INT 4
32852: NEG
32853: PUSH
32854: EMPTY
32855: LIST
32856: LIST
32857: PUSH
32858: LD_INT 1
32860: NEG
32861: PUSH
32862: LD_INT 5
32864: NEG
32865: PUSH
32866: EMPTY
32867: LIST
32868: LIST
32869: PUSH
32870: LD_INT 2
32872: PUSH
32873: LD_INT 3
32875: NEG
32876: PUSH
32877: EMPTY
32878: LIST
32879: LIST
32880: PUSH
32881: LD_INT 2
32883: NEG
32884: PUSH
32885: LD_INT 5
32887: NEG
32888: PUSH
32889: EMPTY
32890: LIST
32891: LIST
32892: PUSH
32893: LD_INT 3
32895: PUSH
32896: LD_INT 0
32898: PUSH
32899: EMPTY
32900: LIST
32901: LIST
32902: PUSH
32903: LD_INT 3
32905: PUSH
32906: LD_INT 1
32908: NEG
32909: PUSH
32910: EMPTY
32911: LIST
32912: LIST
32913: PUSH
32914: LD_INT 4
32916: PUSH
32917: LD_INT 0
32919: PUSH
32920: EMPTY
32921: LIST
32922: LIST
32923: PUSH
32924: LD_INT 4
32926: PUSH
32927: LD_INT 1
32929: PUSH
32930: EMPTY
32931: LIST
32932: LIST
32933: PUSH
32934: LD_INT 3
32936: PUSH
32937: LD_INT 1
32939: PUSH
32940: EMPTY
32941: LIST
32942: LIST
32943: PUSH
32944: LD_INT 2
32946: PUSH
32947: LD_INT 0
32949: PUSH
32950: EMPTY
32951: LIST
32952: LIST
32953: PUSH
32954: LD_INT 2
32956: PUSH
32957: LD_INT 1
32959: NEG
32960: PUSH
32961: EMPTY
32962: LIST
32963: LIST
32964: PUSH
32965: LD_INT 2
32967: PUSH
32968: LD_INT 2
32970: NEG
32971: PUSH
32972: EMPTY
32973: LIST
32974: LIST
32975: PUSH
32976: LD_INT 4
32978: PUSH
32979: LD_INT 2
32981: PUSH
32982: EMPTY
32983: LIST
32984: LIST
32985: PUSH
32986: LD_INT 4
32988: PUSH
32989: LD_INT 4
32991: PUSH
32992: EMPTY
32993: LIST
32994: LIST
32995: PUSH
32996: LD_INT 4
32998: PUSH
32999: LD_INT 3
33001: PUSH
33002: EMPTY
33003: LIST
33004: LIST
33005: PUSH
33006: LD_INT 5
33008: PUSH
33009: LD_INT 4
33011: PUSH
33012: EMPTY
33013: LIST
33014: LIST
33015: PUSH
33016: LD_INT 5
33018: PUSH
33019: LD_INT 5
33021: PUSH
33022: EMPTY
33023: LIST
33024: LIST
33025: PUSH
33026: LD_INT 4
33028: PUSH
33029: LD_INT 5
33031: PUSH
33032: EMPTY
33033: LIST
33034: LIST
33035: PUSH
33036: LD_INT 3
33038: PUSH
33039: LD_INT 4
33041: PUSH
33042: EMPTY
33043: LIST
33044: LIST
33045: PUSH
33046: LD_INT 3
33048: PUSH
33049: LD_INT 3
33051: PUSH
33052: EMPTY
33053: LIST
33054: LIST
33055: PUSH
33056: LD_INT 5
33058: PUSH
33059: LD_INT 3
33061: PUSH
33062: EMPTY
33063: LIST
33064: LIST
33065: PUSH
33066: LD_INT 3
33068: PUSH
33069: LD_INT 5
33071: PUSH
33072: EMPTY
33073: LIST
33074: LIST
33075: PUSH
33076: EMPTY
33077: LIST
33078: LIST
33079: LIST
33080: LIST
33081: LIST
33082: LIST
33083: LIST
33084: LIST
33085: LIST
33086: LIST
33087: LIST
33088: LIST
33089: LIST
33090: LIST
33091: LIST
33092: LIST
33093: LIST
33094: LIST
33095: LIST
33096: LIST
33097: LIST
33098: LIST
33099: LIST
33100: LIST
33101: LIST
33102: LIST
33103: LIST
33104: LIST
33105: LIST
33106: LIST
33107: LIST
33108: LIST
33109: LIST
33110: LIST
33111: LIST
33112: LIST
33113: LIST
33114: LIST
33115: LIST
33116: LIST
33117: LIST
33118: LIST
33119: LIST
33120: LIST
33121: LIST
33122: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
33123: LD_ADDR_VAR 0 33
33127: PUSH
33128: LD_INT 4
33130: NEG
33131: PUSH
33132: LD_INT 4
33134: NEG
33135: PUSH
33136: EMPTY
33137: LIST
33138: LIST
33139: PUSH
33140: LD_INT 4
33142: NEG
33143: PUSH
33144: LD_INT 5
33146: NEG
33147: PUSH
33148: EMPTY
33149: LIST
33150: LIST
33151: PUSH
33152: LD_INT 3
33154: NEG
33155: PUSH
33156: LD_INT 4
33158: NEG
33159: PUSH
33160: EMPTY
33161: LIST
33162: LIST
33163: PUSH
33164: LD_INT 3
33166: NEG
33167: PUSH
33168: LD_INT 3
33170: NEG
33171: PUSH
33172: EMPTY
33173: LIST
33174: LIST
33175: PUSH
33176: LD_INT 4
33178: NEG
33179: PUSH
33180: LD_INT 3
33182: NEG
33183: PUSH
33184: EMPTY
33185: LIST
33186: LIST
33187: PUSH
33188: LD_INT 5
33190: NEG
33191: PUSH
33192: LD_INT 4
33194: NEG
33195: PUSH
33196: EMPTY
33197: LIST
33198: LIST
33199: PUSH
33200: LD_INT 5
33202: NEG
33203: PUSH
33204: LD_INT 5
33206: NEG
33207: PUSH
33208: EMPTY
33209: LIST
33210: LIST
33211: PUSH
33212: LD_INT 3
33214: NEG
33215: PUSH
33216: LD_INT 5
33218: NEG
33219: PUSH
33220: EMPTY
33221: LIST
33222: LIST
33223: PUSH
33224: LD_INT 5
33226: NEG
33227: PUSH
33228: LD_INT 3
33230: NEG
33231: PUSH
33232: EMPTY
33233: LIST
33234: LIST
33235: PUSH
33236: LD_INT 0
33238: PUSH
33239: LD_INT 3
33241: NEG
33242: PUSH
33243: EMPTY
33244: LIST
33245: LIST
33246: PUSH
33247: LD_INT 0
33249: PUSH
33250: LD_INT 4
33252: NEG
33253: PUSH
33254: EMPTY
33255: LIST
33256: LIST
33257: PUSH
33258: LD_INT 1
33260: PUSH
33261: LD_INT 3
33263: NEG
33264: PUSH
33265: EMPTY
33266: LIST
33267: LIST
33268: PUSH
33269: LD_INT 1
33271: PUSH
33272: LD_INT 2
33274: NEG
33275: PUSH
33276: EMPTY
33277: LIST
33278: LIST
33279: PUSH
33280: LD_INT 0
33282: PUSH
33283: LD_INT 2
33285: NEG
33286: PUSH
33287: EMPTY
33288: LIST
33289: LIST
33290: PUSH
33291: LD_INT 1
33293: NEG
33294: PUSH
33295: LD_INT 3
33297: NEG
33298: PUSH
33299: EMPTY
33300: LIST
33301: LIST
33302: PUSH
33303: LD_INT 1
33305: NEG
33306: PUSH
33307: LD_INT 4
33309: NEG
33310: PUSH
33311: EMPTY
33312: LIST
33313: LIST
33314: PUSH
33315: LD_INT 2
33317: PUSH
33318: LD_INT 2
33320: NEG
33321: PUSH
33322: EMPTY
33323: LIST
33324: LIST
33325: PUSH
33326: LD_INT 2
33328: NEG
33329: PUSH
33330: LD_INT 4
33332: NEG
33333: PUSH
33334: EMPTY
33335: LIST
33336: LIST
33337: PUSH
33338: LD_INT 4
33340: PUSH
33341: LD_INT 0
33343: PUSH
33344: EMPTY
33345: LIST
33346: LIST
33347: PUSH
33348: LD_INT 4
33350: PUSH
33351: LD_INT 1
33353: NEG
33354: PUSH
33355: EMPTY
33356: LIST
33357: LIST
33358: PUSH
33359: LD_INT 5
33361: PUSH
33362: LD_INT 0
33364: PUSH
33365: EMPTY
33366: LIST
33367: LIST
33368: PUSH
33369: LD_INT 5
33371: PUSH
33372: LD_INT 1
33374: PUSH
33375: EMPTY
33376: LIST
33377: LIST
33378: PUSH
33379: LD_INT 4
33381: PUSH
33382: LD_INT 1
33384: PUSH
33385: EMPTY
33386: LIST
33387: LIST
33388: PUSH
33389: LD_INT 3
33391: PUSH
33392: LD_INT 0
33394: PUSH
33395: EMPTY
33396: LIST
33397: LIST
33398: PUSH
33399: LD_INT 3
33401: PUSH
33402: LD_INT 1
33404: NEG
33405: PUSH
33406: EMPTY
33407: LIST
33408: LIST
33409: PUSH
33410: LD_INT 3
33412: PUSH
33413: LD_INT 2
33415: NEG
33416: PUSH
33417: EMPTY
33418: LIST
33419: LIST
33420: PUSH
33421: LD_INT 5
33423: PUSH
33424: LD_INT 2
33426: PUSH
33427: EMPTY
33428: LIST
33429: LIST
33430: PUSH
33431: LD_INT 3
33433: PUSH
33434: LD_INT 3
33436: PUSH
33437: EMPTY
33438: LIST
33439: LIST
33440: PUSH
33441: LD_INT 3
33443: PUSH
33444: LD_INT 2
33446: PUSH
33447: EMPTY
33448: LIST
33449: LIST
33450: PUSH
33451: LD_INT 4
33453: PUSH
33454: LD_INT 3
33456: PUSH
33457: EMPTY
33458: LIST
33459: LIST
33460: PUSH
33461: LD_INT 4
33463: PUSH
33464: LD_INT 4
33466: PUSH
33467: EMPTY
33468: LIST
33469: LIST
33470: PUSH
33471: LD_INT 3
33473: PUSH
33474: LD_INT 4
33476: PUSH
33477: EMPTY
33478: LIST
33479: LIST
33480: PUSH
33481: LD_INT 2
33483: PUSH
33484: LD_INT 3
33486: PUSH
33487: EMPTY
33488: LIST
33489: LIST
33490: PUSH
33491: LD_INT 2
33493: PUSH
33494: LD_INT 2
33496: PUSH
33497: EMPTY
33498: LIST
33499: LIST
33500: PUSH
33501: LD_INT 4
33503: PUSH
33504: LD_INT 2
33506: PUSH
33507: EMPTY
33508: LIST
33509: LIST
33510: PUSH
33511: LD_INT 2
33513: PUSH
33514: LD_INT 4
33516: PUSH
33517: EMPTY
33518: LIST
33519: LIST
33520: PUSH
33521: LD_INT 0
33523: PUSH
33524: LD_INT 4
33526: PUSH
33527: EMPTY
33528: LIST
33529: LIST
33530: PUSH
33531: LD_INT 0
33533: PUSH
33534: LD_INT 3
33536: PUSH
33537: EMPTY
33538: LIST
33539: LIST
33540: PUSH
33541: LD_INT 1
33543: PUSH
33544: LD_INT 4
33546: PUSH
33547: EMPTY
33548: LIST
33549: LIST
33550: PUSH
33551: LD_INT 1
33553: PUSH
33554: LD_INT 5
33556: PUSH
33557: EMPTY
33558: LIST
33559: LIST
33560: PUSH
33561: LD_INT 0
33563: PUSH
33564: LD_INT 5
33566: PUSH
33567: EMPTY
33568: LIST
33569: LIST
33570: PUSH
33571: LD_INT 1
33573: NEG
33574: PUSH
33575: LD_INT 4
33577: PUSH
33578: EMPTY
33579: LIST
33580: LIST
33581: PUSH
33582: LD_INT 1
33584: NEG
33585: PUSH
33586: LD_INT 3
33588: PUSH
33589: EMPTY
33590: LIST
33591: LIST
33592: PUSH
33593: LD_INT 2
33595: PUSH
33596: LD_INT 5
33598: PUSH
33599: EMPTY
33600: LIST
33601: LIST
33602: PUSH
33603: LD_INT 2
33605: NEG
33606: PUSH
33607: LD_INT 3
33609: PUSH
33610: EMPTY
33611: LIST
33612: LIST
33613: PUSH
33614: EMPTY
33615: LIST
33616: LIST
33617: LIST
33618: LIST
33619: LIST
33620: LIST
33621: LIST
33622: LIST
33623: LIST
33624: LIST
33625: LIST
33626: LIST
33627: LIST
33628: LIST
33629: LIST
33630: LIST
33631: LIST
33632: LIST
33633: LIST
33634: LIST
33635: LIST
33636: LIST
33637: LIST
33638: LIST
33639: LIST
33640: LIST
33641: LIST
33642: LIST
33643: LIST
33644: LIST
33645: LIST
33646: LIST
33647: LIST
33648: LIST
33649: LIST
33650: LIST
33651: LIST
33652: LIST
33653: LIST
33654: LIST
33655: LIST
33656: LIST
33657: LIST
33658: LIST
33659: LIST
33660: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
33661: LD_ADDR_VAR 0 34
33665: PUSH
33666: LD_INT 0
33668: PUSH
33669: LD_INT 4
33671: NEG
33672: PUSH
33673: EMPTY
33674: LIST
33675: LIST
33676: PUSH
33677: LD_INT 0
33679: PUSH
33680: LD_INT 5
33682: NEG
33683: PUSH
33684: EMPTY
33685: LIST
33686: LIST
33687: PUSH
33688: LD_INT 1
33690: PUSH
33691: LD_INT 4
33693: NEG
33694: PUSH
33695: EMPTY
33696: LIST
33697: LIST
33698: PUSH
33699: LD_INT 1
33701: PUSH
33702: LD_INT 3
33704: NEG
33705: PUSH
33706: EMPTY
33707: LIST
33708: LIST
33709: PUSH
33710: LD_INT 0
33712: PUSH
33713: LD_INT 3
33715: NEG
33716: PUSH
33717: EMPTY
33718: LIST
33719: LIST
33720: PUSH
33721: LD_INT 1
33723: NEG
33724: PUSH
33725: LD_INT 4
33727: NEG
33728: PUSH
33729: EMPTY
33730: LIST
33731: LIST
33732: PUSH
33733: LD_INT 1
33735: NEG
33736: PUSH
33737: LD_INT 5
33739: NEG
33740: PUSH
33741: EMPTY
33742: LIST
33743: LIST
33744: PUSH
33745: LD_INT 2
33747: PUSH
33748: LD_INT 3
33750: NEG
33751: PUSH
33752: EMPTY
33753: LIST
33754: LIST
33755: PUSH
33756: LD_INT 2
33758: NEG
33759: PUSH
33760: LD_INT 5
33762: NEG
33763: PUSH
33764: EMPTY
33765: LIST
33766: LIST
33767: PUSH
33768: LD_INT 3
33770: PUSH
33771: LD_INT 0
33773: PUSH
33774: EMPTY
33775: LIST
33776: LIST
33777: PUSH
33778: LD_INT 3
33780: PUSH
33781: LD_INT 1
33783: NEG
33784: PUSH
33785: EMPTY
33786: LIST
33787: LIST
33788: PUSH
33789: LD_INT 4
33791: PUSH
33792: LD_INT 0
33794: PUSH
33795: EMPTY
33796: LIST
33797: LIST
33798: PUSH
33799: LD_INT 4
33801: PUSH
33802: LD_INT 1
33804: PUSH
33805: EMPTY
33806: LIST
33807: LIST
33808: PUSH
33809: LD_INT 3
33811: PUSH
33812: LD_INT 1
33814: PUSH
33815: EMPTY
33816: LIST
33817: LIST
33818: PUSH
33819: LD_INT 2
33821: PUSH
33822: LD_INT 0
33824: PUSH
33825: EMPTY
33826: LIST
33827: LIST
33828: PUSH
33829: LD_INT 2
33831: PUSH
33832: LD_INT 1
33834: NEG
33835: PUSH
33836: EMPTY
33837: LIST
33838: LIST
33839: PUSH
33840: LD_INT 2
33842: PUSH
33843: LD_INT 2
33845: NEG
33846: PUSH
33847: EMPTY
33848: LIST
33849: LIST
33850: PUSH
33851: LD_INT 4
33853: PUSH
33854: LD_INT 2
33856: PUSH
33857: EMPTY
33858: LIST
33859: LIST
33860: PUSH
33861: LD_INT 4
33863: PUSH
33864: LD_INT 4
33866: PUSH
33867: EMPTY
33868: LIST
33869: LIST
33870: PUSH
33871: LD_INT 4
33873: PUSH
33874: LD_INT 3
33876: PUSH
33877: EMPTY
33878: LIST
33879: LIST
33880: PUSH
33881: LD_INT 5
33883: PUSH
33884: LD_INT 4
33886: PUSH
33887: EMPTY
33888: LIST
33889: LIST
33890: PUSH
33891: LD_INT 5
33893: PUSH
33894: LD_INT 5
33896: PUSH
33897: EMPTY
33898: LIST
33899: LIST
33900: PUSH
33901: LD_INT 4
33903: PUSH
33904: LD_INT 5
33906: PUSH
33907: EMPTY
33908: LIST
33909: LIST
33910: PUSH
33911: LD_INT 3
33913: PUSH
33914: LD_INT 4
33916: PUSH
33917: EMPTY
33918: LIST
33919: LIST
33920: PUSH
33921: LD_INT 3
33923: PUSH
33924: LD_INT 3
33926: PUSH
33927: EMPTY
33928: LIST
33929: LIST
33930: PUSH
33931: LD_INT 5
33933: PUSH
33934: LD_INT 3
33936: PUSH
33937: EMPTY
33938: LIST
33939: LIST
33940: PUSH
33941: LD_INT 3
33943: PUSH
33944: LD_INT 5
33946: PUSH
33947: EMPTY
33948: LIST
33949: LIST
33950: PUSH
33951: LD_INT 0
33953: PUSH
33954: LD_INT 3
33956: PUSH
33957: EMPTY
33958: LIST
33959: LIST
33960: PUSH
33961: LD_INT 0
33963: PUSH
33964: LD_INT 2
33966: PUSH
33967: EMPTY
33968: LIST
33969: LIST
33970: PUSH
33971: LD_INT 1
33973: PUSH
33974: LD_INT 3
33976: PUSH
33977: EMPTY
33978: LIST
33979: LIST
33980: PUSH
33981: LD_INT 1
33983: PUSH
33984: LD_INT 4
33986: PUSH
33987: EMPTY
33988: LIST
33989: LIST
33990: PUSH
33991: LD_INT 0
33993: PUSH
33994: LD_INT 4
33996: PUSH
33997: EMPTY
33998: LIST
33999: LIST
34000: PUSH
34001: LD_INT 1
34003: NEG
34004: PUSH
34005: LD_INT 3
34007: PUSH
34008: EMPTY
34009: LIST
34010: LIST
34011: PUSH
34012: LD_INT 1
34014: NEG
34015: PUSH
34016: LD_INT 2
34018: PUSH
34019: EMPTY
34020: LIST
34021: LIST
34022: PUSH
34023: LD_INT 2
34025: PUSH
34026: LD_INT 4
34028: PUSH
34029: EMPTY
34030: LIST
34031: LIST
34032: PUSH
34033: LD_INT 2
34035: NEG
34036: PUSH
34037: LD_INT 2
34039: PUSH
34040: EMPTY
34041: LIST
34042: LIST
34043: PUSH
34044: LD_INT 4
34046: NEG
34047: PUSH
34048: LD_INT 0
34050: PUSH
34051: EMPTY
34052: LIST
34053: LIST
34054: PUSH
34055: LD_INT 4
34057: NEG
34058: PUSH
34059: LD_INT 1
34061: NEG
34062: PUSH
34063: EMPTY
34064: LIST
34065: LIST
34066: PUSH
34067: LD_INT 3
34069: NEG
34070: PUSH
34071: LD_INT 0
34073: PUSH
34074: EMPTY
34075: LIST
34076: LIST
34077: PUSH
34078: LD_INT 3
34080: NEG
34081: PUSH
34082: LD_INT 1
34084: PUSH
34085: EMPTY
34086: LIST
34087: LIST
34088: PUSH
34089: LD_INT 4
34091: NEG
34092: PUSH
34093: LD_INT 1
34095: PUSH
34096: EMPTY
34097: LIST
34098: LIST
34099: PUSH
34100: LD_INT 5
34102: NEG
34103: PUSH
34104: LD_INT 0
34106: PUSH
34107: EMPTY
34108: LIST
34109: LIST
34110: PUSH
34111: LD_INT 5
34113: NEG
34114: PUSH
34115: LD_INT 1
34117: NEG
34118: PUSH
34119: EMPTY
34120: LIST
34121: LIST
34122: PUSH
34123: LD_INT 5
34125: NEG
34126: PUSH
34127: LD_INT 2
34129: NEG
34130: PUSH
34131: EMPTY
34132: LIST
34133: LIST
34134: PUSH
34135: LD_INT 3
34137: NEG
34138: PUSH
34139: LD_INT 2
34141: PUSH
34142: EMPTY
34143: LIST
34144: LIST
34145: PUSH
34146: EMPTY
34147: LIST
34148: LIST
34149: LIST
34150: LIST
34151: LIST
34152: LIST
34153: LIST
34154: LIST
34155: LIST
34156: LIST
34157: LIST
34158: LIST
34159: LIST
34160: LIST
34161: LIST
34162: LIST
34163: LIST
34164: LIST
34165: LIST
34166: LIST
34167: LIST
34168: LIST
34169: LIST
34170: LIST
34171: LIST
34172: LIST
34173: LIST
34174: LIST
34175: LIST
34176: LIST
34177: LIST
34178: LIST
34179: LIST
34180: LIST
34181: LIST
34182: LIST
34183: LIST
34184: LIST
34185: LIST
34186: LIST
34187: LIST
34188: LIST
34189: LIST
34190: LIST
34191: LIST
34192: ST_TO_ADDR
// end ; end ;
34193: GO 34196
34195: POP
// case btype of b_depot , b_warehouse :
34196: LD_VAR 0 1
34200: PUSH
34201: LD_INT 0
34203: DOUBLE
34204: EQUAL
34205: IFTRUE 34215
34207: LD_INT 1
34209: DOUBLE
34210: EQUAL
34211: IFTRUE 34215
34213: GO 34416
34215: POP
// case nation of nation_american :
34216: LD_VAR 0 5
34220: PUSH
34221: LD_INT 1
34223: DOUBLE
34224: EQUAL
34225: IFTRUE 34229
34227: GO 34285
34229: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
34230: LD_ADDR_VAR 0 9
34234: PUSH
34235: LD_VAR 0 11
34239: PUSH
34240: LD_VAR 0 12
34244: PUSH
34245: LD_VAR 0 13
34249: PUSH
34250: LD_VAR 0 14
34254: PUSH
34255: LD_VAR 0 15
34259: PUSH
34260: LD_VAR 0 16
34264: PUSH
34265: EMPTY
34266: LIST
34267: LIST
34268: LIST
34269: LIST
34270: LIST
34271: LIST
34272: PUSH
34273: LD_VAR 0 4
34277: PUSH
34278: LD_INT 1
34280: PLUS
34281: ARRAY
34282: ST_TO_ADDR
34283: GO 34414
34285: LD_INT 2
34287: DOUBLE
34288: EQUAL
34289: IFTRUE 34293
34291: GO 34349
34293: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
34294: LD_ADDR_VAR 0 9
34298: PUSH
34299: LD_VAR 0 17
34303: PUSH
34304: LD_VAR 0 18
34308: PUSH
34309: LD_VAR 0 19
34313: PUSH
34314: LD_VAR 0 20
34318: PUSH
34319: LD_VAR 0 21
34323: PUSH
34324: LD_VAR 0 22
34328: PUSH
34329: EMPTY
34330: LIST
34331: LIST
34332: LIST
34333: LIST
34334: LIST
34335: LIST
34336: PUSH
34337: LD_VAR 0 4
34341: PUSH
34342: LD_INT 1
34344: PLUS
34345: ARRAY
34346: ST_TO_ADDR
34347: GO 34414
34349: LD_INT 3
34351: DOUBLE
34352: EQUAL
34353: IFTRUE 34357
34355: GO 34413
34357: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
34358: LD_ADDR_VAR 0 9
34362: PUSH
34363: LD_VAR 0 23
34367: PUSH
34368: LD_VAR 0 24
34372: PUSH
34373: LD_VAR 0 25
34377: PUSH
34378: LD_VAR 0 26
34382: PUSH
34383: LD_VAR 0 27
34387: PUSH
34388: LD_VAR 0 28
34392: PUSH
34393: EMPTY
34394: LIST
34395: LIST
34396: LIST
34397: LIST
34398: LIST
34399: LIST
34400: PUSH
34401: LD_VAR 0 4
34405: PUSH
34406: LD_INT 1
34408: PLUS
34409: ARRAY
34410: ST_TO_ADDR
34411: GO 34414
34413: POP
34414: GO 34969
34416: LD_INT 2
34418: DOUBLE
34419: EQUAL
34420: IFTRUE 34430
34422: LD_INT 3
34424: DOUBLE
34425: EQUAL
34426: IFTRUE 34430
34428: GO 34486
34430: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
34431: LD_ADDR_VAR 0 9
34435: PUSH
34436: LD_VAR 0 29
34440: PUSH
34441: LD_VAR 0 30
34445: PUSH
34446: LD_VAR 0 31
34450: PUSH
34451: LD_VAR 0 32
34455: PUSH
34456: LD_VAR 0 33
34460: PUSH
34461: LD_VAR 0 34
34465: PUSH
34466: EMPTY
34467: LIST
34468: LIST
34469: LIST
34470: LIST
34471: LIST
34472: LIST
34473: PUSH
34474: LD_VAR 0 4
34478: PUSH
34479: LD_INT 1
34481: PLUS
34482: ARRAY
34483: ST_TO_ADDR
34484: GO 34969
34486: LD_INT 16
34488: DOUBLE
34489: EQUAL
34490: IFTRUE 34548
34492: LD_INT 17
34494: DOUBLE
34495: EQUAL
34496: IFTRUE 34548
34498: LD_INT 18
34500: DOUBLE
34501: EQUAL
34502: IFTRUE 34548
34504: LD_INT 19
34506: DOUBLE
34507: EQUAL
34508: IFTRUE 34548
34510: LD_INT 22
34512: DOUBLE
34513: EQUAL
34514: IFTRUE 34548
34516: LD_INT 20
34518: DOUBLE
34519: EQUAL
34520: IFTRUE 34548
34522: LD_INT 21
34524: DOUBLE
34525: EQUAL
34526: IFTRUE 34548
34528: LD_INT 23
34530: DOUBLE
34531: EQUAL
34532: IFTRUE 34548
34534: LD_INT 24
34536: DOUBLE
34537: EQUAL
34538: IFTRUE 34548
34540: LD_INT 25
34542: DOUBLE
34543: EQUAL
34544: IFTRUE 34548
34546: GO 34604
34548: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
34549: LD_ADDR_VAR 0 9
34553: PUSH
34554: LD_VAR 0 35
34558: PUSH
34559: LD_VAR 0 36
34563: PUSH
34564: LD_VAR 0 37
34568: PUSH
34569: LD_VAR 0 38
34573: PUSH
34574: LD_VAR 0 39
34578: PUSH
34579: LD_VAR 0 40
34583: PUSH
34584: EMPTY
34585: LIST
34586: LIST
34587: LIST
34588: LIST
34589: LIST
34590: LIST
34591: PUSH
34592: LD_VAR 0 4
34596: PUSH
34597: LD_INT 1
34599: PLUS
34600: ARRAY
34601: ST_TO_ADDR
34602: GO 34969
34604: LD_INT 6
34606: DOUBLE
34607: EQUAL
34608: IFTRUE 34660
34610: LD_INT 7
34612: DOUBLE
34613: EQUAL
34614: IFTRUE 34660
34616: LD_INT 8
34618: DOUBLE
34619: EQUAL
34620: IFTRUE 34660
34622: LD_INT 13
34624: DOUBLE
34625: EQUAL
34626: IFTRUE 34660
34628: LD_INT 12
34630: DOUBLE
34631: EQUAL
34632: IFTRUE 34660
34634: LD_INT 15
34636: DOUBLE
34637: EQUAL
34638: IFTRUE 34660
34640: LD_INT 11
34642: DOUBLE
34643: EQUAL
34644: IFTRUE 34660
34646: LD_INT 14
34648: DOUBLE
34649: EQUAL
34650: IFTRUE 34660
34652: LD_INT 10
34654: DOUBLE
34655: EQUAL
34656: IFTRUE 34660
34658: GO 34716
34660: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
34661: LD_ADDR_VAR 0 9
34665: PUSH
34666: LD_VAR 0 41
34670: PUSH
34671: LD_VAR 0 42
34675: PUSH
34676: LD_VAR 0 43
34680: PUSH
34681: LD_VAR 0 44
34685: PUSH
34686: LD_VAR 0 45
34690: PUSH
34691: LD_VAR 0 46
34695: PUSH
34696: EMPTY
34697: LIST
34698: LIST
34699: LIST
34700: LIST
34701: LIST
34702: LIST
34703: PUSH
34704: LD_VAR 0 4
34708: PUSH
34709: LD_INT 1
34711: PLUS
34712: ARRAY
34713: ST_TO_ADDR
34714: GO 34969
34716: LD_INT 36
34718: DOUBLE
34719: EQUAL
34720: IFTRUE 34724
34722: GO 34780
34724: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
34725: LD_ADDR_VAR 0 9
34729: PUSH
34730: LD_VAR 0 47
34734: PUSH
34735: LD_VAR 0 48
34739: PUSH
34740: LD_VAR 0 49
34744: PUSH
34745: LD_VAR 0 50
34749: PUSH
34750: LD_VAR 0 51
34754: PUSH
34755: LD_VAR 0 52
34759: PUSH
34760: EMPTY
34761: LIST
34762: LIST
34763: LIST
34764: LIST
34765: LIST
34766: LIST
34767: PUSH
34768: LD_VAR 0 4
34772: PUSH
34773: LD_INT 1
34775: PLUS
34776: ARRAY
34777: ST_TO_ADDR
34778: GO 34969
34780: LD_INT 4
34782: DOUBLE
34783: EQUAL
34784: IFTRUE 34806
34786: LD_INT 5
34788: DOUBLE
34789: EQUAL
34790: IFTRUE 34806
34792: LD_INT 34
34794: DOUBLE
34795: EQUAL
34796: IFTRUE 34806
34798: LD_INT 37
34800: DOUBLE
34801: EQUAL
34802: IFTRUE 34806
34804: GO 34862
34806: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
34807: LD_ADDR_VAR 0 9
34811: PUSH
34812: LD_VAR 0 53
34816: PUSH
34817: LD_VAR 0 54
34821: PUSH
34822: LD_VAR 0 55
34826: PUSH
34827: LD_VAR 0 56
34831: PUSH
34832: LD_VAR 0 57
34836: PUSH
34837: LD_VAR 0 58
34841: PUSH
34842: EMPTY
34843: LIST
34844: LIST
34845: LIST
34846: LIST
34847: LIST
34848: LIST
34849: PUSH
34850: LD_VAR 0 4
34854: PUSH
34855: LD_INT 1
34857: PLUS
34858: ARRAY
34859: ST_TO_ADDR
34860: GO 34969
34862: LD_INT 31
34864: DOUBLE
34865: EQUAL
34866: IFTRUE 34912
34868: LD_INT 32
34870: DOUBLE
34871: EQUAL
34872: IFTRUE 34912
34874: LD_INT 33
34876: DOUBLE
34877: EQUAL
34878: IFTRUE 34912
34880: LD_INT 27
34882: DOUBLE
34883: EQUAL
34884: IFTRUE 34912
34886: LD_INT 26
34888: DOUBLE
34889: EQUAL
34890: IFTRUE 34912
34892: LD_INT 28
34894: DOUBLE
34895: EQUAL
34896: IFTRUE 34912
34898: LD_INT 29
34900: DOUBLE
34901: EQUAL
34902: IFTRUE 34912
34904: LD_INT 30
34906: DOUBLE
34907: EQUAL
34908: IFTRUE 34912
34910: GO 34968
34912: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
34913: LD_ADDR_VAR 0 9
34917: PUSH
34918: LD_VAR 0 59
34922: PUSH
34923: LD_VAR 0 60
34927: PUSH
34928: LD_VAR 0 61
34932: PUSH
34933: LD_VAR 0 62
34937: PUSH
34938: LD_VAR 0 63
34942: PUSH
34943: LD_VAR 0 64
34947: PUSH
34948: EMPTY
34949: LIST
34950: LIST
34951: LIST
34952: LIST
34953: LIST
34954: LIST
34955: PUSH
34956: LD_VAR 0 4
34960: PUSH
34961: LD_INT 1
34963: PLUS
34964: ARRAY
34965: ST_TO_ADDR
34966: GO 34969
34968: POP
// temp_list2 = [ ] ;
34969: LD_ADDR_VAR 0 10
34973: PUSH
34974: EMPTY
34975: ST_TO_ADDR
// for i in temp_list do
34976: LD_ADDR_VAR 0 8
34980: PUSH
34981: LD_VAR 0 9
34985: PUSH
34986: FOR_IN
34987: IFFALSE 35039
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
34989: LD_ADDR_VAR 0 10
34993: PUSH
34994: LD_VAR 0 10
34998: PUSH
34999: LD_VAR 0 8
35003: PUSH
35004: LD_INT 1
35006: ARRAY
35007: PUSH
35008: LD_VAR 0 2
35012: PLUS
35013: PUSH
35014: LD_VAR 0 8
35018: PUSH
35019: LD_INT 2
35021: ARRAY
35022: PUSH
35023: LD_VAR 0 3
35027: PLUS
35028: PUSH
35029: EMPTY
35030: LIST
35031: LIST
35032: PUSH
35033: EMPTY
35034: LIST
35035: ADD
35036: ST_TO_ADDR
35037: GO 34986
35039: POP
35040: POP
// result = temp_list2 ;
35041: LD_ADDR_VAR 0 7
35045: PUSH
35046: LD_VAR 0 10
35050: ST_TO_ADDR
// end ;
35051: LD_VAR 0 7
35055: RET
// export function EnemyInRange ( unit , dist ) ; begin
35056: LD_INT 0
35058: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
35059: LD_ADDR_VAR 0 3
35063: PUSH
35064: LD_VAR 0 1
35068: PPUSH
35069: CALL_OW 255
35073: PPUSH
35074: LD_VAR 0 1
35078: PPUSH
35079: CALL_OW 250
35083: PPUSH
35084: LD_VAR 0 1
35088: PPUSH
35089: CALL_OW 251
35093: PPUSH
35094: LD_VAR 0 2
35098: PPUSH
35099: CALL 8429 0 4
35103: PUSH
35104: LD_INT 4
35106: ARRAY
35107: ST_TO_ADDR
// end ;
35108: LD_VAR 0 3
35112: RET
// export function PlayerSeeMe ( unit ) ; begin
35113: LD_INT 0
35115: PPUSH
// result := See ( your_side , unit ) ;
35116: LD_ADDR_VAR 0 2
35120: PUSH
35121: LD_OWVAR 2
35125: PPUSH
35126: LD_VAR 0 1
35130: PPUSH
35131: CALL_OW 292
35135: ST_TO_ADDR
// end ;
35136: LD_VAR 0 2
35140: RET
// export function ReverseDir ( unit ) ; begin
35141: LD_INT 0
35143: PPUSH
// if not unit then
35144: LD_VAR 0 1
35148: NOT
35149: IFFALSE 35153
// exit ;
35151: GO 35176
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
35153: LD_ADDR_VAR 0 2
35157: PUSH
35158: LD_VAR 0 1
35162: PPUSH
35163: CALL_OW 254
35167: PUSH
35168: LD_INT 3
35170: PLUS
35171: PUSH
35172: LD_INT 6
35174: MOD
35175: ST_TO_ADDR
// end ;
35176: LD_VAR 0 2
35180: RET
// export function ReverseArray ( array ) ; var i ; begin
35181: LD_INT 0
35183: PPUSH
35184: PPUSH
// if not array then
35185: LD_VAR 0 1
35189: NOT
35190: IFFALSE 35194
// exit ;
35192: GO 35249
// result := [ ] ;
35194: LD_ADDR_VAR 0 2
35198: PUSH
35199: EMPTY
35200: ST_TO_ADDR
// for i := array downto 1 do
35201: LD_ADDR_VAR 0 3
35205: PUSH
35206: DOUBLE
35207: LD_VAR 0 1
35211: INC
35212: ST_TO_ADDR
35213: LD_INT 1
35215: PUSH
35216: FOR_DOWNTO
35217: IFFALSE 35247
// result := Join ( result , array [ i ] ) ;
35219: LD_ADDR_VAR 0 2
35223: PUSH
35224: LD_VAR 0 2
35228: PPUSH
35229: LD_VAR 0 1
35233: PUSH
35234: LD_VAR 0 3
35238: ARRAY
35239: PPUSH
35240: CALL 39905 0 2
35244: ST_TO_ADDR
35245: GO 35216
35247: POP
35248: POP
// end ;
35249: LD_VAR 0 2
35253: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
35254: LD_INT 0
35256: PPUSH
35257: PPUSH
35258: PPUSH
35259: PPUSH
35260: PPUSH
35261: PPUSH
// if not unit or not hexes then
35262: LD_VAR 0 1
35266: NOT
35267: PUSH
35268: LD_VAR 0 2
35272: NOT
35273: OR
35274: IFFALSE 35278
// exit ;
35276: GO 35401
// dist := 9999 ;
35278: LD_ADDR_VAR 0 5
35282: PUSH
35283: LD_INT 9999
35285: ST_TO_ADDR
// for i = 1 to hexes do
35286: LD_ADDR_VAR 0 4
35290: PUSH
35291: DOUBLE
35292: LD_INT 1
35294: DEC
35295: ST_TO_ADDR
35296: LD_VAR 0 2
35300: PUSH
35301: FOR_TO
35302: IFFALSE 35389
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35304: LD_ADDR_VAR 0 6
35308: PUSH
35309: LD_VAR 0 1
35313: PPUSH
35314: LD_VAR 0 2
35318: PUSH
35319: LD_VAR 0 4
35323: ARRAY
35324: PUSH
35325: LD_INT 1
35327: ARRAY
35328: PPUSH
35329: LD_VAR 0 2
35333: PUSH
35334: LD_VAR 0 4
35338: ARRAY
35339: PUSH
35340: LD_INT 2
35342: ARRAY
35343: PPUSH
35344: CALL_OW 297
35348: ST_TO_ADDR
// if tdist < dist then
35349: LD_VAR 0 6
35353: PUSH
35354: LD_VAR 0 5
35358: LESS
35359: IFFALSE 35387
// begin hex := hexes [ i ] ;
35361: LD_ADDR_VAR 0 8
35365: PUSH
35366: LD_VAR 0 2
35370: PUSH
35371: LD_VAR 0 4
35375: ARRAY
35376: ST_TO_ADDR
// dist := tdist ;
35377: LD_ADDR_VAR 0 5
35381: PUSH
35382: LD_VAR 0 6
35386: ST_TO_ADDR
// end ; end ;
35387: GO 35301
35389: POP
35390: POP
// result := hex ;
35391: LD_ADDR_VAR 0 3
35395: PUSH
35396: LD_VAR 0 8
35400: ST_TO_ADDR
// end ;
35401: LD_VAR 0 3
35405: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
35406: LD_INT 0
35408: PPUSH
35409: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
35410: LD_VAR 0 1
35414: NOT
35415: PUSH
35416: LD_VAR 0 1
35420: PUSH
35421: LD_INT 21
35423: PUSH
35424: LD_INT 2
35426: PUSH
35427: EMPTY
35428: LIST
35429: LIST
35430: PUSH
35431: LD_INT 23
35433: PUSH
35434: LD_INT 2
35436: PUSH
35437: EMPTY
35438: LIST
35439: LIST
35440: PUSH
35441: EMPTY
35442: LIST
35443: LIST
35444: PPUSH
35445: CALL_OW 69
35449: IN
35450: NOT
35451: OR
35452: IFFALSE 35456
// exit ;
35454: GO 35503
// for i = 1 to 3 do
35456: LD_ADDR_VAR 0 3
35460: PUSH
35461: DOUBLE
35462: LD_INT 1
35464: DEC
35465: ST_TO_ADDR
35466: LD_INT 3
35468: PUSH
35469: FOR_TO
35470: IFFALSE 35501
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
35472: LD_VAR 0 1
35476: PPUSH
35477: CALL_OW 250
35481: PPUSH
35482: LD_VAR 0 1
35486: PPUSH
35487: CALL_OW 251
35491: PPUSH
35492: LD_INT 1
35494: PPUSH
35495: CALL_OW 453
35499: GO 35469
35501: POP
35502: POP
// end ;
35503: LD_VAR 0 2
35507: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
35508: LD_INT 0
35510: PPUSH
35511: PPUSH
35512: PPUSH
35513: PPUSH
35514: PPUSH
35515: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
35516: LD_VAR 0 1
35520: NOT
35521: PUSH
35522: LD_VAR 0 2
35526: NOT
35527: OR
35528: PUSH
35529: LD_VAR 0 1
35533: PPUSH
35534: CALL_OW 314
35538: OR
35539: IFFALSE 35543
// exit ;
35541: GO 36010
// if GetLives ( i ) < 250 then
35543: LD_VAR 0 4
35547: PPUSH
35548: CALL_OW 256
35552: PUSH
35553: LD_INT 250
35555: LESS
35556: IFFALSE 35569
// begin ComAutodestruct ( i ) ;
35558: LD_VAR 0 4
35562: PPUSH
35563: CALL 35406 0 1
// exit ;
35567: GO 36010
// end ; x := GetX ( enemy_unit ) ;
35569: LD_ADDR_VAR 0 7
35573: PUSH
35574: LD_VAR 0 2
35578: PPUSH
35579: CALL_OW 250
35583: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
35584: LD_ADDR_VAR 0 8
35588: PUSH
35589: LD_VAR 0 2
35593: PPUSH
35594: CALL_OW 251
35598: ST_TO_ADDR
// if not x or not y then
35599: LD_VAR 0 7
35603: NOT
35604: PUSH
35605: LD_VAR 0 8
35609: NOT
35610: OR
35611: IFFALSE 35615
// exit ;
35613: GO 36010
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
35615: LD_ADDR_VAR 0 6
35619: PUSH
35620: LD_VAR 0 7
35624: PPUSH
35625: LD_INT 0
35627: PPUSH
35628: LD_INT 4
35630: PPUSH
35631: CALL_OW 272
35635: PUSH
35636: LD_VAR 0 8
35640: PPUSH
35641: LD_INT 0
35643: PPUSH
35644: LD_INT 4
35646: PPUSH
35647: CALL_OW 273
35651: PUSH
35652: EMPTY
35653: LIST
35654: LIST
35655: PUSH
35656: LD_VAR 0 7
35660: PPUSH
35661: LD_INT 1
35663: PPUSH
35664: LD_INT 4
35666: PPUSH
35667: CALL_OW 272
35671: PUSH
35672: LD_VAR 0 8
35676: PPUSH
35677: LD_INT 1
35679: PPUSH
35680: LD_INT 4
35682: PPUSH
35683: CALL_OW 273
35687: PUSH
35688: EMPTY
35689: LIST
35690: LIST
35691: PUSH
35692: LD_VAR 0 7
35696: PPUSH
35697: LD_INT 2
35699: PPUSH
35700: LD_INT 4
35702: PPUSH
35703: CALL_OW 272
35707: PUSH
35708: LD_VAR 0 8
35712: PPUSH
35713: LD_INT 2
35715: PPUSH
35716: LD_INT 4
35718: PPUSH
35719: CALL_OW 273
35723: PUSH
35724: EMPTY
35725: LIST
35726: LIST
35727: PUSH
35728: LD_VAR 0 7
35732: PPUSH
35733: LD_INT 3
35735: PPUSH
35736: LD_INT 4
35738: PPUSH
35739: CALL_OW 272
35743: PUSH
35744: LD_VAR 0 8
35748: PPUSH
35749: LD_INT 3
35751: PPUSH
35752: LD_INT 4
35754: PPUSH
35755: CALL_OW 273
35759: PUSH
35760: EMPTY
35761: LIST
35762: LIST
35763: PUSH
35764: LD_VAR 0 7
35768: PPUSH
35769: LD_INT 4
35771: PPUSH
35772: LD_INT 4
35774: PPUSH
35775: CALL_OW 272
35779: PUSH
35780: LD_VAR 0 8
35784: PPUSH
35785: LD_INT 4
35787: PPUSH
35788: LD_INT 4
35790: PPUSH
35791: CALL_OW 273
35795: PUSH
35796: EMPTY
35797: LIST
35798: LIST
35799: PUSH
35800: LD_VAR 0 7
35804: PPUSH
35805: LD_INT 5
35807: PPUSH
35808: LD_INT 4
35810: PPUSH
35811: CALL_OW 272
35815: PUSH
35816: LD_VAR 0 8
35820: PPUSH
35821: LD_INT 5
35823: PPUSH
35824: LD_INT 4
35826: PPUSH
35827: CALL_OW 273
35831: PUSH
35832: EMPTY
35833: LIST
35834: LIST
35835: PUSH
35836: EMPTY
35837: LIST
35838: LIST
35839: LIST
35840: LIST
35841: LIST
35842: LIST
35843: ST_TO_ADDR
// for i = tmp downto 1 do
35844: LD_ADDR_VAR 0 4
35848: PUSH
35849: DOUBLE
35850: LD_VAR 0 6
35854: INC
35855: ST_TO_ADDR
35856: LD_INT 1
35858: PUSH
35859: FOR_DOWNTO
35860: IFFALSE 35961
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
35862: LD_VAR 0 6
35866: PUSH
35867: LD_VAR 0 4
35871: ARRAY
35872: PUSH
35873: LD_INT 1
35875: ARRAY
35876: PPUSH
35877: LD_VAR 0 6
35881: PUSH
35882: LD_VAR 0 4
35886: ARRAY
35887: PUSH
35888: LD_INT 2
35890: ARRAY
35891: PPUSH
35892: CALL_OW 488
35896: NOT
35897: PUSH
35898: LD_VAR 0 6
35902: PUSH
35903: LD_VAR 0 4
35907: ARRAY
35908: PUSH
35909: LD_INT 1
35911: ARRAY
35912: PPUSH
35913: LD_VAR 0 6
35917: PUSH
35918: LD_VAR 0 4
35922: ARRAY
35923: PUSH
35924: LD_INT 2
35926: ARRAY
35927: PPUSH
35928: CALL_OW 428
35932: PUSH
35933: LD_INT 0
35935: NONEQUAL
35936: OR
35937: IFFALSE 35959
// tmp := Delete ( tmp , i ) ;
35939: LD_ADDR_VAR 0 6
35943: PUSH
35944: LD_VAR 0 6
35948: PPUSH
35949: LD_VAR 0 4
35953: PPUSH
35954: CALL_OW 3
35958: ST_TO_ADDR
35959: GO 35859
35961: POP
35962: POP
// j := GetClosestHex ( unit , tmp ) ;
35963: LD_ADDR_VAR 0 5
35967: PUSH
35968: LD_VAR 0 1
35972: PPUSH
35973: LD_VAR 0 6
35977: PPUSH
35978: CALL 35254 0 2
35982: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
35983: LD_VAR 0 1
35987: PPUSH
35988: LD_VAR 0 5
35992: PUSH
35993: LD_INT 1
35995: ARRAY
35996: PPUSH
35997: LD_VAR 0 5
36001: PUSH
36002: LD_INT 2
36004: ARRAY
36005: PPUSH
36006: CALL_OW 111
// end ;
36010: LD_VAR 0 3
36014: RET
// export function PrepareApemanSoldier ( ) ; begin
36015: LD_INT 0
36017: PPUSH
// uc_nation := 0 ;
36018: LD_ADDR_OWVAR 21
36022: PUSH
36023: LD_INT 0
36025: ST_TO_ADDR
// hc_sex := sex_male ;
36026: LD_ADDR_OWVAR 27
36030: PUSH
36031: LD_INT 1
36033: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
36034: LD_ADDR_OWVAR 28
36038: PUSH
36039: LD_INT 15
36041: ST_TO_ADDR
// hc_gallery :=  ;
36042: LD_ADDR_OWVAR 33
36046: PUSH
36047: LD_STRING 
36049: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36050: LD_ADDR_OWVAR 31
36054: PUSH
36055: LD_INT 0
36057: PPUSH
36058: LD_INT 3
36060: PPUSH
36061: CALL_OW 12
36065: PUSH
36066: LD_INT 0
36068: PPUSH
36069: LD_INT 3
36071: PPUSH
36072: CALL_OW 12
36076: PUSH
36077: LD_INT 0
36079: PUSH
36080: LD_INT 0
36082: PUSH
36083: EMPTY
36084: LIST
36085: LIST
36086: LIST
36087: LIST
36088: ST_TO_ADDR
// end ;
36089: LD_VAR 0 1
36093: RET
// export function PrepareApemanEngineer ( ) ; begin
36094: LD_INT 0
36096: PPUSH
// uc_nation := 0 ;
36097: LD_ADDR_OWVAR 21
36101: PUSH
36102: LD_INT 0
36104: ST_TO_ADDR
// hc_sex := sex_male ;
36105: LD_ADDR_OWVAR 27
36109: PUSH
36110: LD_INT 1
36112: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
36113: LD_ADDR_OWVAR 28
36117: PUSH
36118: LD_INT 16
36120: ST_TO_ADDR
// hc_gallery :=  ;
36121: LD_ADDR_OWVAR 33
36125: PUSH
36126: LD_STRING 
36128: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36129: LD_ADDR_OWVAR 31
36133: PUSH
36134: LD_INT 0
36136: PPUSH
36137: LD_INT 3
36139: PPUSH
36140: CALL_OW 12
36144: PUSH
36145: LD_INT 0
36147: PPUSH
36148: LD_INT 3
36150: PPUSH
36151: CALL_OW 12
36155: PUSH
36156: LD_INT 0
36158: PUSH
36159: LD_INT 0
36161: PUSH
36162: EMPTY
36163: LIST
36164: LIST
36165: LIST
36166: LIST
36167: ST_TO_ADDR
// end ;
36168: LD_VAR 0 1
36172: RET
// export function PrepareApeman ( agressivity ) ; begin
36173: LD_INT 0
36175: PPUSH
// uc_side := 0 ;
36176: LD_ADDR_OWVAR 20
36180: PUSH
36181: LD_INT 0
36183: ST_TO_ADDR
// uc_nation := 0 ;
36184: LD_ADDR_OWVAR 21
36188: PUSH
36189: LD_INT 0
36191: ST_TO_ADDR
// hc_sex := sex_male ;
36192: LD_ADDR_OWVAR 27
36196: PUSH
36197: LD_INT 1
36199: ST_TO_ADDR
// hc_class := class_apeman ;
36200: LD_ADDR_OWVAR 28
36204: PUSH
36205: LD_INT 12
36207: ST_TO_ADDR
// hc_gallery :=  ;
36208: LD_ADDR_OWVAR 33
36212: PUSH
36213: LD_STRING 
36215: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
36216: LD_ADDR_OWVAR 35
36220: PUSH
36221: LD_VAR 0 1
36225: NEG
36226: PPUSH
36227: LD_VAR 0 1
36231: PPUSH
36232: CALL_OW 12
36236: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36237: LD_ADDR_OWVAR 31
36241: PUSH
36242: LD_INT 0
36244: PPUSH
36245: LD_INT 3
36247: PPUSH
36248: CALL_OW 12
36252: PUSH
36253: LD_INT 0
36255: PPUSH
36256: LD_INT 3
36258: PPUSH
36259: CALL_OW 12
36263: PUSH
36264: LD_INT 0
36266: PUSH
36267: LD_INT 0
36269: PUSH
36270: EMPTY
36271: LIST
36272: LIST
36273: LIST
36274: LIST
36275: ST_TO_ADDR
// end ;
36276: LD_VAR 0 2
36280: RET
// export function PrepareTiger ( agressivity ) ; begin
36281: LD_INT 0
36283: PPUSH
// uc_side := 0 ;
36284: LD_ADDR_OWVAR 20
36288: PUSH
36289: LD_INT 0
36291: ST_TO_ADDR
// uc_nation := 0 ;
36292: LD_ADDR_OWVAR 21
36296: PUSH
36297: LD_INT 0
36299: ST_TO_ADDR
// hc_class := class_tiger ;
36300: LD_ADDR_OWVAR 28
36304: PUSH
36305: LD_INT 14
36307: ST_TO_ADDR
// hc_gallery :=  ;
36308: LD_ADDR_OWVAR 33
36312: PUSH
36313: LD_STRING 
36315: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
36316: LD_ADDR_OWVAR 35
36320: PUSH
36321: LD_VAR 0 1
36325: NEG
36326: PPUSH
36327: LD_VAR 0 1
36331: PPUSH
36332: CALL_OW 12
36336: ST_TO_ADDR
// end ;
36337: LD_VAR 0 2
36341: RET
// export function PrepareEnchidna ( ) ; begin
36342: LD_INT 0
36344: PPUSH
// uc_side := 0 ;
36345: LD_ADDR_OWVAR 20
36349: PUSH
36350: LD_INT 0
36352: ST_TO_ADDR
// uc_nation := 0 ;
36353: LD_ADDR_OWVAR 21
36357: PUSH
36358: LD_INT 0
36360: ST_TO_ADDR
// hc_class := class_baggie ;
36361: LD_ADDR_OWVAR 28
36365: PUSH
36366: LD_INT 13
36368: ST_TO_ADDR
// hc_gallery :=  ;
36369: LD_ADDR_OWVAR 33
36373: PUSH
36374: LD_STRING 
36376: ST_TO_ADDR
// end ;
36377: LD_VAR 0 1
36381: RET
// export function PrepareFrog ( ) ; begin
36382: LD_INT 0
36384: PPUSH
// uc_side := 0 ;
36385: LD_ADDR_OWVAR 20
36389: PUSH
36390: LD_INT 0
36392: ST_TO_ADDR
// uc_nation := 0 ;
36393: LD_ADDR_OWVAR 21
36397: PUSH
36398: LD_INT 0
36400: ST_TO_ADDR
// hc_class := class_frog ;
36401: LD_ADDR_OWVAR 28
36405: PUSH
36406: LD_INT 19
36408: ST_TO_ADDR
// hc_gallery :=  ;
36409: LD_ADDR_OWVAR 33
36413: PUSH
36414: LD_STRING 
36416: ST_TO_ADDR
// end ;
36417: LD_VAR 0 1
36421: RET
// export function PrepareFish ( ) ; begin
36422: LD_INT 0
36424: PPUSH
// uc_side := 0 ;
36425: LD_ADDR_OWVAR 20
36429: PUSH
36430: LD_INT 0
36432: ST_TO_ADDR
// uc_nation := 0 ;
36433: LD_ADDR_OWVAR 21
36437: PUSH
36438: LD_INT 0
36440: ST_TO_ADDR
// hc_class := class_fish ;
36441: LD_ADDR_OWVAR 28
36445: PUSH
36446: LD_INT 20
36448: ST_TO_ADDR
// hc_gallery :=  ;
36449: LD_ADDR_OWVAR 33
36453: PUSH
36454: LD_STRING 
36456: ST_TO_ADDR
// end ;
36457: LD_VAR 0 1
36461: RET
// export function PrepareBird ( ) ; begin
36462: LD_INT 0
36464: PPUSH
// uc_side := 0 ;
36465: LD_ADDR_OWVAR 20
36469: PUSH
36470: LD_INT 0
36472: ST_TO_ADDR
// uc_nation := 0 ;
36473: LD_ADDR_OWVAR 21
36477: PUSH
36478: LD_INT 0
36480: ST_TO_ADDR
// hc_class := class_phororhacos ;
36481: LD_ADDR_OWVAR 28
36485: PUSH
36486: LD_INT 18
36488: ST_TO_ADDR
// hc_gallery :=  ;
36489: LD_ADDR_OWVAR 33
36493: PUSH
36494: LD_STRING 
36496: ST_TO_ADDR
// end ;
36497: LD_VAR 0 1
36501: RET
// export function PrepareHorse ( ) ; begin
36502: LD_INT 0
36504: PPUSH
// uc_side := 0 ;
36505: LD_ADDR_OWVAR 20
36509: PUSH
36510: LD_INT 0
36512: ST_TO_ADDR
// uc_nation := 0 ;
36513: LD_ADDR_OWVAR 21
36517: PUSH
36518: LD_INT 0
36520: ST_TO_ADDR
// hc_class := class_horse ;
36521: LD_ADDR_OWVAR 28
36525: PUSH
36526: LD_INT 21
36528: ST_TO_ADDR
// hc_gallery :=  ;
36529: LD_ADDR_OWVAR 33
36533: PUSH
36534: LD_STRING 
36536: ST_TO_ADDR
// end ;
36537: LD_VAR 0 1
36541: RET
// export function PrepareMastodont ( ) ; begin
36542: LD_INT 0
36544: PPUSH
// uc_side := 0 ;
36545: LD_ADDR_OWVAR 20
36549: PUSH
36550: LD_INT 0
36552: ST_TO_ADDR
// uc_nation := 0 ;
36553: LD_ADDR_OWVAR 21
36557: PUSH
36558: LD_INT 0
36560: ST_TO_ADDR
// vc_chassis := class_mastodont ;
36561: LD_ADDR_OWVAR 37
36565: PUSH
36566: LD_INT 31
36568: ST_TO_ADDR
// vc_control := control_rider ;
36569: LD_ADDR_OWVAR 38
36573: PUSH
36574: LD_INT 4
36576: ST_TO_ADDR
// end ;
36577: LD_VAR 0 1
36581: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
36582: LD_INT 0
36584: PPUSH
36585: PPUSH
36586: PPUSH
// uc_side = 0 ;
36587: LD_ADDR_OWVAR 20
36591: PUSH
36592: LD_INT 0
36594: ST_TO_ADDR
// uc_nation = 0 ;
36595: LD_ADDR_OWVAR 21
36599: PUSH
36600: LD_INT 0
36602: ST_TO_ADDR
// InitHc_All ( ) ;
36603: CALL_OW 584
// InitVc ;
36607: CALL_OW 20
// if mastodonts then
36611: LD_VAR 0 6
36615: IFFALSE 36682
// for i = 1 to mastodonts do
36617: LD_ADDR_VAR 0 11
36621: PUSH
36622: DOUBLE
36623: LD_INT 1
36625: DEC
36626: ST_TO_ADDR
36627: LD_VAR 0 6
36631: PUSH
36632: FOR_TO
36633: IFFALSE 36680
// begin vc_chassis := 31 ;
36635: LD_ADDR_OWVAR 37
36639: PUSH
36640: LD_INT 31
36642: ST_TO_ADDR
// vc_control := control_rider ;
36643: LD_ADDR_OWVAR 38
36647: PUSH
36648: LD_INT 4
36650: ST_TO_ADDR
// animal := CreateVehicle ;
36651: LD_ADDR_VAR 0 12
36655: PUSH
36656: CALL_OW 45
36660: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36661: LD_VAR 0 12
36665: PPUSH
36666: LD_VAR 0 8
36670: PPUSH
36671: LD_INT 0
36673: PPUSH
36674: CALL 38810 0 3
// end ;
36678: GO 36632
36680: POP
36681: POP
// if horses then
36682: LD_VAR 0 5
36686: IFFALSE 36753
// for i = 1 to horses do
36688: LD_ADDR_VAR 0 11
36692: PUSH
36693: DOUBLE
36694: LD_INT 1
36696: DEC
36697: ST_TO_ADDR
36698: LD_VAR 0 5
36702: PUSH
36703: FOR_TO
36704: IFFALSE 36751
// begin hc_class := 21 ;
36706: LD_ADDR_OWVAR 28
36710: PUSH
36711: LD_INT 21
36713: ST_TO_ADDR
// hc_gallery :=  ;
36714: LD_ADDR_OWVAR 33
36718: PUSH
36719: LD_STRING 
36721: ST_TO_ADDR
// animal := CreateHuman ;
36722: LD_ADDR_VAR 0 12
36726: PUSH
36727: CALL_OW 44
36731: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36732: LD_VAR 0 12
36736: PPUSH
36737: LD_VAR 0 8
36741: PPUSH
36742: LD_INT 0
36744: PPUSH
36745: CALL 38810 0 3
// end ;
36749: GO 36703
36751: POP
36752: POP
// if birds then
36753: LD_VAR 0 1
36757: IFFALSE 36824
// for i = 1 to birds do
36759: LD_ADDR_VAR 0 11
36763: PUSH
36764: DOUBLE
36765: LD_INT 1
36767: DEC
36768: ST_TO_ADDR
36769: LD_VAR 0 1
36773: PUSH
36774: FOR_TO
36775: IFFALSE 36822
// begin hc_class := 18 ;
36777: LD_ADDR_OWVAR 28
36781: PUSH
36782: LD_INT 18
36784: ST_TO_ADDR
// hc_gallery =  ;
36785: LD_ADDR_OWVAR 33
36789: PUSH
36790: LD_STRING 
36792: ST_TO_ADDR
// animal := CreateHuman ;
36793: LD_ADDR_VAR 0 12
36797: PUSH
36798: CALL_OW 44
36802: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36803: LD_VAR 0 12
36807: PPUSH
36808: LD_VAR 0 8
36812: PPUSH
36813: LD_INT 0
36815: PPUSH
36816: CALL 38810 0 3
// end ;
36820: GO 36774
36822: POP
36823: POP
// if tigers then
36824: LD_VAR 0 2
36828: IFFALSE 36912
// for i = 1 to tigers do
36830: LD_ADDR_VAR 0 11
36834: PUSH
36835: DOUBLE
36836: LD_INT 1
36838: DEC
36839: ST_TO_ADDR
36840: LD_VAR 0 2
36844: PUSH
36845: FOR_TO
36846: IFFALSE 36910
// begin hc_class = class_tiger ;
36848: LD_ADDR_OWVAR 28
36852: PUSH
36853: LD_INT 14
36855: ST_TO_ADDR
// hc_gallery =  ;
36856: LD_ADDR_OWVAR 33
36860: PUSH
36861: LD_STRING 
36863: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
36864: LD_ADDR_OWVAR 35
36868: PUSH
36869: LD_INT 7
36871: NEG
36872: PPUSH
36873: LD_INT 7
36875: PPUSH
36876: CALL_OW 12
36880: ST_TO_ADDR
// animal := CreateHuman ;
36881: LD_ADDR_VAR 0 12
36885: PUSH
36886: CALL_OW 44
36890: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36891: LD_VAR 0 12
36895: PPUSH
36896: LD_VAR 0 8
36900: PPUSH
36901: LD_INT 0
36903: PPUSH
36904: CALL 38810 0 3
// end ;
36908: GO 36845
36910: POP
36911: POP
// if apemans then
36912: LD_VAR 0 3
36916: IFFALSE 37039
// for i = 1 to apemans do
36918: LD_ADDR_VAR 0 11
36922: PUSH
36923: DOUBLE
36924: LD_INT 1
36926: DEC
36927: ST_TO_ADDR
36928: LD_VAR 0 3
36932: PUSH
36933: FOR_TO
36934: IFFALSE 37037
// begin hc_class = class_apeman ;
36936: LD_ADDR_OWVAR 28
36940: PUSH
36941: LD_INT 12
36943: ST_TO_ADDR
// hc_gallery =  ;
36944: LD_ADDR_OWVAR 33
36948: PUSH
36949: LD_STRING 
36951: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
36952: LD_ADDR_OWVAR 35
36956: PUSH
36957: LD_INT 2
36959: NEG
36960: PPUSH
36961: LD_INT 2
36963: PPUSH
36964: CALL_OW 12
36968: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
36969: LD_ADDR_OWVAR 31
36973: PUSH
36974: LD_INT 1
36976: PPUSH
36977: LD_INT 3
36979: PPUSH
36980: CALL_OW 12
36984: PUSH
36985: LD_INT 1
36987: PPUSH
36988: LD_INT 3
36990: PPUSH
36991: CALL_OW 12
36995: PUSH
36996: LD_INT 0
36998: PUSH
36999: LD_INT 0
37001: PUSH
37002: EMPTY
37003: LIST
37004: LIST
37005: LIST
37006: LIST
37007: ST_TO_ADDR
// animal := CreateHuman ;
37008: LD_ADDR_VAR 0 12
37012: PUSH
37013: CALL_OW 44
37017: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37018: LD_VAR 0 12
37022: PPUSH
37023: LD_VAR 0 8
37027: PPUSH
37028: LD_INT 0
37030: PPUSH
37031: CALL 38810 0 3
// end ;
37035: GO 36933
37037: POP
37038: POP
// if enchidnas then
37039: LD_VAR 0 4
37043: IFFALSE 37110
// for i = 1 to enchidnas do
37045: LD_ADDR_VAR 0 11
37049: PUSH
37050: DOUBLE
37051: LD_INT 1
37053: DEC
37054: ST_TO_ADDR
37055: LD_VAR 0 4
37059: PUSH
37060: FOR_TO
37061: IFFALSE 37108
// begin hc_class = 13 ;
37063: LD_ADDR_OWVAR 28
37067: PUSH
37068: LD_INT 13
37070: ST_TO_ADDR
// hc_gallery =  ;
37071: LD_ADDR_OWVAR 33
37075: PUSH
37076: LD_STRING 
37078: ST_TO_ADDR
// animal := CreateHuman ;
37079: LD_ADDR_VAR 0 12
37083: PUSH
37084: CALL_OW 44
37088: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37089: LD_VAR 0 12
37093: PPUSH
37094: LD_VAR 0 8
37098: PPUSH
37099: LD_INT 0
37101: PPUSH
37102: CALL 38810 0 3
// end ;
37106: GO 37060
37108: POP
37109: POP
// if fishes then
37110: LD_VAR 0 7
37114: IFFALSE 37181
// for i = 1 to fishes do
37116: LD_ADDR_VAR 0 11
37120: PUSH
37121: DOUBLE
37122: LD_INT 1
37124: DEC
37125: ST_TO_ADDR
37126: LD_VAR 0 7
37130: PUSH
37131: FOR_TO
37132: IFFALSE 37179
// begin hc_class = 20 ;
37134: LD_ADDR_OWVAR 28
37138: PUSH
37139: LD_INT 20
37141: ST_TO_ADDR
// hc_gallery =  ;
37142: LD_ADDR_OWVAR 33
37146: PUSH
37147: LD_STRING 
37149: ST_TO_ADDR
// animal := CreateHuman ;
37150: LD_ADDR_VAR 0 12
37154: PUSH
37155: CALL_OW 44
37159: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
37160: LD_VAR 0 12
37164: PPUSH
37165: LD_VAR 0 9
37169: PPUSH
37170: LD_INT 0
37172: PPUSH
37173: CALL 38810 0 3
// end ;
37177: GO 37131
37179: POP
37180: POP
// end ;
37181: LD_VAR 0 10
37185: RET
// export function WantHeal ( sci , unit ) ; begin
37186: LD_INT 0
37188: PPUSH
// if GetTaskList ( sci ) > 0 then
37189: LD_VAR 0 1
37193: PPUSH
37194: CALL_OW 437
37198: PUSH
37199: LD_INT 0
37201: GREATER
37202: IFFALSE 37272
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
37204: LD_VAR 0 1
37208: PPUSH
37209: CALL_OW 437
37213: PUSH
37214: LD_INT 1
37216: ARRAY
37217: PUSH
37218: LD_INT 1
37220: ARRAY
37221: PUSH
37222: LD_STRING l
37224: EQUAL
37225: PUSH
37226: LD_VAR 0 1
37230: PPUSH
37231: CALL_OW 437
37235: PUSH
37236: LD_INT 1
37238: ARRAY
37239: PUSH
37240: LD_INT 4
37242: ARRAY
37243: PUSH
37244: LD_VAR 0 2
37248: EQUAL
37249: AND
37250: IFFALSE 37262
// result := true else
37252: LD_ADDR_VAR 0 3
37256: PUSH
37257: LD_INT 1
37259: ST_TO_ADDR
37260: GO 37270
// result := false ;
37262: LD_ADDR_VAR 0 3
37266: PUSH
37267: LD_INT 0
37269: ST_TO_ADDR
// end else
37270: GO 37280
// result := false ;
37272: LD_ADDR_VAR 0 3
37276: PUSH
37277: LD_INT 0
37279: ST_TO_ADDR
// end ;
37280: LD_VAR 0 3
37284: RET
// export function HealTarget ( sci ) ; begin
37285: LD_INT 0
37287: PPUSH
// if not sci then
37288: LD_VAR 0 1
37292: NOT
37293: IFFALSE 37297
// exit ;
37295: GO 37362
// result := 0 ;
37297: LD_ADDR_VAR 0 2
37301: PUSH
37302: LD_INT 0
37304: ST_TO_ADDR
// if GetTaskList ( sci ) then
37305: LD_VAR 0 1
37309: PPUSH
37310: CALL_OW 437
37314: IFFALSE 37362
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
37316: LD_VAR 0 1
37320: PPUSH
37321: CALL_OW 437
37325: PUSH
37326: LD_INT 1
37328: ARRAY
37329: PUSH
37330: LD_INT 1
37332: ARRAY
37333: PUSH
37334: LD_STRING l
37336: EQUAL
37337: IFFALSE 37362
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
37339: LD_ADDR_VAR 0 2
37343: PUSH
37344: LD_VAR 0 1
37348: PPUSH
37349: CALL_OW 437
37353: PUSH
37354: LD_INT 1
37356: ARRAY
37357: PUSH
37358: LD_INT 4
37360: ARRAY
37361: ST_TO_ADDR
// end ;
37362: LD_VAR 0 2
37366: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
37367: LD_INT 0
37369: PPUSH
37370: PPUSH
37371: PPUSH
37372: PPUSH
// if not base_units then
37373: LD_VAR 0 1
37377: NOT
37378: IFFALSE 37382
// exit ;
37380: GO 37469
// result := false ;
37382: LD_ADDR_VAR 0 2
37386: PUSH
37387: LD_INT 0
37389: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
37390: LD_ADDR_VAR 0 5
37394: PUSH
37395: LD_VAR 0 1
37399: PPUSH
37400: LD_INT 21
37402: PUSH
37403: LD_INT 3
37405: PUSH
37406: EMPTY
37407: LIST
37408: LIST
37409: PPUSH
37410: CALL_OW 72
37414: ST_TO_ADDR
// if not tmp then
37415: LD_VAR 0 5
37419: NOT
37420: IFFALSE 37424
// exit ;
37422: GO 37469
// for i in tmp do
37424: LD_ADDR_VAR 0 3
37428: PUSH
37429: LD_VAR 0 5
37433: PUSH
37434: FOR_IN
37435: IFFALSE 37467
// begin result := EnemyInRange ( i , 22 ) ;
37437: LD_ADDR_VAR 0 2
37441: PUSH
37442: LD_VAR 0 3
37446: PPUSH
37447: LD_INT 22
37449: PPUSH
37450: CALL 35056 0 2
37454: ST_TO_ADDR
// if result then
37455: LD_VAR 0 2
37459: IFFALSE 37465
// exit ;
37461: POP
37462: POP
37463: GO 37469
// end ;
37465: GO 37434
37467: POP
37468: POP
// end ;
37469: LD_VAR 0 2
37473: RET
// export function FilterByTag ( units , tag ) ; begin
37474: LD_INT 0
37476: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
37477: LD_ADDR_VAR 0 3
37481: PUSH
37482: LD_VAR 0 1
37486: PPUSH
37487: LD_INT 120
37489: PUSH
37490: LD_VAR 0 2
37494: PUSH
37495: EMPTY
37496: LIST
37497: LIST
37498: PPUSH
37499: CALL_OW 72
37503: ST_TO_ADDR
// end ;
37504: LD_VAR 0 3
37508: RET
// export function IsDriver ( un ) ; begin
37509: LD_INT 0
37511: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
37512: LD_ADDR_VAR 0 2
37516: PUSH
37517: LD_VAR 0 1
37521: PUSH
37522: LD_INT 55
37524: PUSH
37525: EMPTY
37526: LIST
37527: PPUSH
37528: CALL_OW 69
37532: IN
37533: ST_TO_ADDR
// end ;
37534: LD_VAR 0 2
37538: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
37539: LD_INT 0
37541: PPUSH
37542: PPUSH
// list := [ ] ;
37543: LD_ADDR_VAR 0 5
37547: PUSH
37548: EMPTY
37549: ST_TO_ADDR
// case d of 0 :
37550: LD_VAR 0 3
37554: PUSH
37555: LD_INT 0
37557: DOUBLE
37558: EQUAL
37559: IFTRUE 37563
37561: GO 37696
37563: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
37564: LD_ADDR_VAR 0 5
37568: PUSH
37569: LD_VAR 0 1
37573: PUSH
37574: LD_INT 4
37576: MINUS
37577: PUSH
37578: LD_VAR 0 2
37582: PUSH
37583: LD_INT 4
37585: MINUS
37586: PUSH
37587: LD_INT 2
37589: PUSH
37590: EMPTY
37591: LIST
37592: LIST
37593: LIST
37594: PUSH
37595: LD_VAR 0 1
37599: PUSH
37600: LD_INT 3
37602: MINUS
37603: PUSH
37604: LD_VAR 0 2
37608: PUSH
37609: LD_INT 1
37611: PUSH
37612: EMPTY
37613: LIST
37614: LIST
37615: LIST
37616: PUSH
37617: LD_VAR 0 1
37621: PUSH
37622: LD_INT 4
37624: PLUS
37625: PUSH
37626: LD_VAR 0 2
37630: PUSH
37631: LD_INT 4
37633: PUSH
37634: EMPTY
37635: LIST
37636: LIST
37637: LIST
37638: PUSH
37639: LD_VAR 0 1
37643: PUSH
37644: LD_INT 3
37646: PLUS
37647: PUSH
37648: LD_VAR 0 2
37652: PUSH
37653: LD_INT 3
37655: PLUS
37656: PUSH
37657: LD_INT 5
37659: PUSH
37660: EMPTY
37661: LIST
37662: LIST
37663: LIST
37664: PUSH
37665: LD_VAR 0 1
37669: PUSH
37670: LD_VAR 0 2
37674: PUSH
37675: LD_INT 4
37677: PLUS
37678: PUSH
37679: LD_INT 0
37681: PUSH
37682: EMPTY
37683: LIST
37684: LIST
37685: LIST
37686: PUSH
37687: EMPTY
37688: LIST
37689: LIST
37690: LIST
37691: LIST
37692: LIST
37693: ST_TO_ADDR
// end ; 1 :
37694: GO 38394
37696: LD_INT 1
37698: DOUBLE
37699: EQUAL
37700: IFTRUE 37704
37702: GO 37837
37704: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
37705: LD_ADDR_VAR 0 5
37709: PUSH
37710: LD_VAR 0 1
37714: PUSH
37715: LD_VAR 0 2
37719: PUSH
37720: LD_INT 4
37722: MINUS
37723: PUSH
37724: LD_INT 3
37726: PUSH
37727: EMPTY
37728: LIST
37729: LIST
37730: LIST
37731: PUSH
37732: LD_VAR 0 1
37736: PUSH
37737: LD_INT 3
37739: MINUS
37740: PUSH
37741: LD_VAR 0 2
37745: PUSH
37746: LD_INT 3
37748: MINUS
37749: PUSH
37750: LD_INT 2
37752: PUSH
37753: EMPTY
37754: LIST
37755: LIST
37756: LIST
37757: PUSH
37758: LD_VAR 0 1
37762: PUSH
37763: LD_INT 4
37765: MINUS
37766: PUSH
37767: LD_VAR 0 2
37771: PUSH
37772: LD_INT 1
37774: PUSH
37775: EMPTY
37776: LIST
37777: LIST
37778: LIST
37779: PUSH
37780: LD_VAR 0 1
37784: PUSH
37785: LD_VAR 0 2
37789: PUSH
37790: LD_INT 3
37792: PLUS
37793: PUSH
37794: LD_INT 0
37796: PUSH
37797: EMPTY
37798: LIST
37799: LIST
37800: LIST
37801: PUSH
37802: LD_VAR 0 1
37806: PUSH
37807: LD_INT 4
37809: PLUS
37810: PUSH
37811: LD_VAR 0 2
37815: PUSH
37816: LD_INT 4
37818: PLUS
37819: PUSH
37820: LD_INT 5
37822: PUSH
37823: EMPTY
37824: LIST
37825: LIST
37826: LIST
37827: PUSH
37828: EMPTY
37829: LIST
37830: LIST
37831: LIST
37832: LIST
37833: LIST
37834: ST_TO_ADDR
// end ; 2 :
37835: GO 38394
37837: LD_INT 2
37839: DOUBLE
37840: EQUAL
37841: IFTRUE 37845
37843: GO 37974
37845: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
37846: LD_ADDR_VAR 0 5
37850: PUSH
37851: LD_VAR 0 1
37855: PUSH
37856: LD_VAR 0 2
37860: PUSH
37861: LD_INT 3
37863: MINUS
37864: PUSH
37865: LD_INT 3
37867: PUSH
37868: EMPTY
37869: LIST
37870: LIST
37871: LIST
37872: PUSH
37873: LD_VAR 0 1
37877: PUSH
37878: LD_INT 4
37880: PLUS
37881: PUSH
37882: LD_VAR 0 2
37886: PUSH
37887: LD_INT 4
37889: PUSH
37890: EMPTY
37891: LIST
37892: LIST
37893: LIST
37894: PUSH
37895: LD_VAR 0 1
37899: PUSH
37900: LD_VAR 0 2
37904: PUSH
37905: LD_INT 4
37907: PLUS
37908: PUSH
37909: LD_INT 0
37911: PUSH
37912: EMPTY
37913: LIST
37914: LIST
37915: LIST
37916: PUSH
37917: LD_VAR 0 1
37921: PUSH
37922: LD_INT 3
37924: MINUS
37925: PUSH
37926: LD_VAR 0 2
37930: PUSH
37931: LD_INT 1
37933: PUSH
37934: EMPTY
37935: LIST
37936: LIST
37937: LIST
37938: PUSH
37939: LD_VAR 0 1
37943: PUSH
37944: LD_INT 4
37946: MINUS
37947: PUSH
37948: LD_VAR 0 2
37952: PUSH
37953: LD_INT 4
37955: MINUS
37956: PUSH
37957: LD_INT 2
37959: PUSH
37960: EMPTY
37961: LIST
37962: LIST
37963: LIST
37964: PUSH
37965: EMPTY
37966: LIST
37967: LIST
37968: LIST
37969: LIST
37970: LIST
37971: ST_TO_ADDR
// end ; 3 :
37972: GO 38394
37974: LD_INT 3
37976: DOUBLE
37977: EQUAL
37978: IFTRUE 37982
37980: GO 38115
37982: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
37983: LD_ADDR_VAR 0 5
37987: PUSH
37988: LD_VAR 0 1
37992: PUSH
37993: LD_INT 3
37995: PLUS
37996: PUSH
37997: LD_VAR 0 2
38001: PUSH
38002: LD_INT 4
38004: PUSH
38005: EMPTY
38006: LIST
38007: LIST
38008: LIST
38009: PUSH
38010: LD_VAR 0 1
38014: PUSH
38015: LD_INT 4
38017: PLUS
38018: PUSH
38019: LD_VAR 0 2
38023: PUSH
38024: LD_INT 4
38026: PLUS
38027: PUSH
38028: LD_INT 5
38030: PUSH
38031: EMPTY
38032: LIST
38033: LIST
38034: LIST
38035: PUSH
38036: LD_VAR 0 1
38040: PUSH
38041: LD_INT 4
38043: MINUS
38044: PUSH
38045: LD_VAR 0 2
38049: PUSH
38050: LD_INT 1
38052: PUSH
38053: EMPTY
38054: LIST
38055: LIST
38056: LIST
38057: PUSH
38058: LD_VAR 0 1
38062: PUSH
38063: LD_VAR 0 2
38067: PUSH
38068: LD_INT 4
38070: MINUS
38071: PUSH
38072: LD_INT 3
38074: PUSH
38075: EMPTY
38076: LIST
38077: LIST
38078: LIST
38079: PUSH
38080: LD_VAR 0 1
38084: PUSH
38085: LD_INT 3
38087: MINUS
38088: PUSH
38089: LD_VAR 0 2
38093: PUSH
38094: LD_INT 3
38096: MINUS
38097: PUSH
38098: LD_INT 2
38100: PUSH
38101: EMPTY
38102: LIST
38103: LIST
38104: LIST
38105: PUSH
38106: EMPTY
38107: LIST
38108: LIST
38109: LIST
38110: LIST
38111: LIST
38112: ST_TO_ADDR
// end ; 4 :
38113: GO 38394
38115: LD_INT 4
38117: DOUBLE
38118: EQUAL
38119: IFTRUE 38123
38121: GO 38256
38123: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
38124: LD_ADDR_VAR 0 5
38128: PUSH
38129: LD_VAR 0 1
38133: PUSH
38134: LD_VAR 0 2
38138: PUSH
38139: LD_INT 4
38141: PLUS
38142: PUSH
38143: LD_INT 0
38145: PUSH
38146: EMPTY
38147: LIST
38148: LIST
38149: LIST
38150: PUSH
38151: LD_VAR 0 1
38155: PUSH
38156: LD_INT 3
38158: PLUS
38159: PUSH
38160: LD_VAR 0 2
38164: PUSH
38165: LD_INT 3
38167: PLUS
38168: PUSH
38169: LD_INT 5
38171: PUSH
38172: EMPTY
38173: LIST
38174: LIST
38175: LIST
38176: PUSH
38177: LD_VAR 0 1
38181: PUSH
38182: LD_INT 4
38184: PLUS
38185: PUSH
38186: LD_VAR 0 2
38190: PUSH
38191: LD_INT 4
38193: PUSH
38194: EMPTY
38195: LIST
38196: LIST
38197: LIST
38198: PUSH
38199: LD_VAR 0 1
38203: PUSH
38204: LD_VAR 0 2
38208: PUSH
38209: LD_INT 3
38211: MINUS
38212: PUSH
38213: LD_INT 3
38215: PUSH
38216: EMPTY
38217: LIST
38218: LIST
38219: LIST
38220: PUSH
38221: LD_VAR 0 1
38225: PUSH
38226: LD_INT 4
38228: MINUS
38229: PUSH
38230: LD_VAR 0 2
38234: PUSH
38235: LD_INT 4
38237: MINUS
38238: PUSH
38239: LD_INT 2
38241: PUSH
38242: EMPTY
38243: LIST
38244: LIST
38245: LIST
38246: PUSH
38247: EMPTY
38248: LIST
38249: LIST
38250: LIST
38251: LIST
38252: LIST
38253: ST_TO_ADDR
// end ; 5 :
38254: GO 38394
38256: LD_INT 5
38258: DOUBLE
38259: EQUAL
38260: IFTRUE 38264
38262: GO 38393
38264: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
38265: LD_ADDR_VAR 0 5
38269: PUSH
38270: LD_VAR 0 1
38274: PUSH
38275: LD_INT 4
38277: MINUS
38278: PUSH
38279: LD_VAR 0 2
38283: PUSH
38284: LD_INT 1
38286: PUSH
38287: EMPTY
38288: LIST
38289: LIST
38290: LIST
38291: PUSH
38292: LD_VAR 0 1
38296: PUSH
38297: LD_VAR 0 2
38301: PUSH
38302: LD_INT 4
38304: MINUS
38305: PUSH
38306: LD_INT 3
38308: PUSH
38309: EMPTY
38310: LIST
38311: LIST
38312: LIST
38313: PUSH
38314: LD_VAR 0 1
38318: PUSH
38319: LD_INT 4
38321: PLUS
38322: PUSH
38323: LD_VAR 0 2
38327: PUSH
38328: LD_INT 4
38330: PLUS
38331: PUSH
38332: LD_INT 5
38334: PUSH
38335: EMPTY
38336: LIST
38337: LIST
38338: LIST
38339: PUSH
38340: LD_VAR 0 1
38344: PUSH
38345: LD_INT 3
38347: PLUS
38348: PUSH
38349: LD_VAR 0 2
38353: PUSH
38354: LD_INT 4
38356: PUSH
38357: EMPTY
38358: LIST
38359: LIST
38360: LIST
38361: PUSH
38362: LD_VAR 0 1
38366: PUSH
38367: LD_VAR 0 2
38371: PUSH
38372: LD_INT 3
38374: PLUS
38375: PUSH
38376: LD_INT 0
38378: PUSH
38379: EMPTY
38380: LIST
38381: LIST
38382: LIST
38383: PUSH
38384: EMPTY
38385: LIST
38386: LIST
38387: LIST
38388: LIST
38389: LIST
38390: ST_TO_ADDR
// end ; end ;
38391: GO 38394
38393: POP
// result := list ;
38394: LD_ADDR_VAR 0 4
38398: PUSH
38399: LD_VAR 0 5
38403: ST_TO_ADDR
// end ;
38404: LD_VAR 0 4
38408: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
38409: LD_INT 0
38411: PPUSH
38412: PPUSH
38413: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
38414: LD_VAR 0 1
38418: NOT
38419: PUSH
38420: LD_VAR 0 2
38424: PUSH
38425: LD_INT 1
38427: PUSH
38428: LD_INT 2
38430: PUSH
38431: LD_INT 3
38433: PUSH
38434: LD_INT 4
38436: PUSH
38437: EMPTY
38438: LIST
38439: LIST
38440: LIST
38441: LIST
38442: IN
38443: NOT
38444: OR
38445: IFFALSE 38449
// exit ;
38447: GO 38532
// tmp := [ ] ;
38449: LD_ADDR_VAR 0 5
38453: PUSH
38454: EMPTY
38455: ST_TO_ADDR
// for i in units do
38456: LD_ADDR_VAR 0 4
38460: PUSH
38461: LD_VAR 0 1
38465: PUSH
38466: FOR_IN
38467: IFFALSE 38501
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
38469: LD_ADDR_VAR 0 5
38473: PUSH
38474: LD_VAR 0 5
38478: PPUSH
38479: LD_VAR 0 4
38483: PPUSH
38484: LD_VAR 0 2
38488: PPUSH
38489: CALL_OW 259
38493: PPUSH
38494: CALL 39905 0 2
38498: ST_TO_ADDR
38499: GO 38466
38501: POP
38502: POP
// if not tmp then
38503: LD_VAR 0 5
38507: NOT
38508: IFFALSE 38512
// exit ;
38510: GO 38532
// result := SortListByListDesc ( units , tmp ) ;
38512: LD_ADDR_VAR 0 3
38516: PUSH
38517: LD_VAR 0 1
38521: PPUSH
38522: LD_VAR 0 5
38526: PPUSH
38527: CALL_OW 77
38531: ST_TO_ADDR
// end ;
38532: LD_VAR 0 3
38536: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
38537: LD_INT 0
38539: PPUSH
38540: PPUSH
38541: PPUSH
// result := false ;
38542: LD_ADDR_VAR 0 3
38546: PUSH
38547: LD_INT 0
38549: ST_TO_ADDR
// if not building then
38550: LD_VAR 0 2
38554: NOT
38555: IFFALSE 38559
// exit ;
38557: GO 38697
// x := GetX ( building ) ;
38559: LD_ADDR_VAR 0 4
38563: PUSH
38564: LD_VAR 0 2
38568: PPUSH
38569: CALL_OW 250
38573: ST_TO_ADDR
// y := GetY ( building ) ;
38574: LD_ADDR_VAR 0 5
38578: PUSH
38579: LD_VAR 0 2
38583: PPUSH
38584: CALL_OW 251
38588: ST_TO_ADDR
// if not x or not y then
38589: LD_VAR 0 4
38593: NOT
38594: PUSH
38595: LD_VAR 0 5
38599: NOT
38600: OR
38601: IFFALSE 38605
// exit ;
38603: GO 38697
// if GetTaskList ( unit ) then
38605: LD_VAR 0 1
38609: PPUSH
38610: CALL_OW 437
38614: IFFALSE 38697
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
38616: LD_STRING e
38618: PUSH
38619: LD_VAR 0 1
38623: PPUSH
38624: CALL_OW 437
38628: PUSH
38629: LD_INT 1
38631: ARRAY
38632: PUSH
38633: LD_INT 1
38635: ARRAY
38636: EQUAL
38637: PUSH
38638: LD_VAR 0 4
38642: PUSH
38643: LD_VAR 0 1
38647: PPUSH
38648: CALL_OW 437
38652: PUSH
38653: LD_INT 1
38655: ARRAY
38656: PUSH
38657: LD_INT 2
38659: ARRAY
38660: EQUAL
38661: AND
38662: PUSH
38663: LD_VAR 0 5
38667: PUSH
38668: LD_VAR 0 1
38672: PPUSH
38673: CALL_OW 437
38677: PUSH
38678: LD_INT 1
38680: ARRAY
38681: PUSH
38682: LD_INT 3
38684: ARRAY
38685: EQUAL
38686: AND
38687: IFFALSE 38697
// result := true end ;
38689: LD_ADDR_VAR 0 3
38693: PUSH
38694: LD_INT 1
38696: ST_TO_ADDR
// end ;
38697: LD_VAR 0 3
38701: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
38702: LD_INT 0
38704: PPUSH
// result := false ;
38705: LD_ADDR_VAR 0 4
38709: PUSH
38710: LD_INT 0
38712: ST_TO_ADDR
// if GetTaskList ( unit ) then
38713: LD_VAR 0 1
38717: PPUSH
38718: CALL_OW 437
38722: IFFALSE 38805
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
38724: LD_STRING M
38726: PUSH
38727: LD_VAR 0 1
38731: PPUSH
38732: CALL_OW 437
38736: PUSH
38737: LD_INT 1
38739: ARRAY
38740: PUSH
38741: LD_INT 1
38743: ARRAY
38744: EQUAL
38745: PUSH
38746: LD_VAR 0 2
38750: PUSH
38751: LD_VAR 0 1
38755: PPUSH
38756: CALL_OW 437
38760: PUSH
38761: LD_INT 1
38763: ARRAY
38764: PUSH
38765: LD_INT 2
38767: ARRAY
38768: EQUAL
38769: AND
38770: PUSH
38771: LD_VAR 0 3
38775: PUSH
38776: LD_VAR 0 1
38780: PPUSH
38781: CALL_OW 437
38785: PUSH
38786: LD_INT 1
38788: ARRAY
38789: PUSH
38790: LD_INT 3
38792: ARRAY
38793: EQUAL
38794: AND
38795: IFFALSE 38805
// result := true ;
38797: LD_ADDR_VAR 0 4
38801: PUSH
38802: LD_INT 1
38804: ST_TO_ADDR
// end ; end ;
38805: LD_VAR 0 4
38809: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
38810: LD_INT 0
38812: PPUSH
38813: PPUSH
38814: PPUSH
38815: PPUSH
// if not unit or not area then
38816: LD_VAR 0 1
38820: NOT
38821: PUSH
38822: LD_VAR 0 2
38826: NOT
38827: OR
38828: IFFALSE 38832
// exit ;
38830: GO 39008
// tmp := AreaToList ( area , i ) ;
38832: LD_ADDR_VAR 0 6
38836: PUSH
38837: LD_VAR 0 2
38841: PPUSH
38842: LD_VAR 0 5
38846: PPUSH
38847: CALL_OW 517
38851: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
38852: LD_ADDR_VAR 0 5
38856: PUSH
38857: DOUBLE
38858: LD_INT 1
38860: DEC
38861: ST_TO_ADDR
38862: LD_VAR 0 6
38866: PUSH
38867: LD_INT 1
38869: ARRAY
38870: PUSH
38871: FOR_TO
38872: IFFALSE 39006
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
38874: LD_ADDR_VAR 0 7
38878: PUSH
38879: LD_VAR 0 6
38883: PUSH
38884: LD_INT 1
38886: ARRAY
38887: PUSH
38888: LD_VAR 0 5
38892: ARRAY
38893: PUSH
38894: LD_VAR 0 6
38898: PUSH
38899: LD_INT 2
38901: ARRAY
38902: PUSH
38903: LD_VAR 0 5
38907: ARRAY
38908: PUSH
38909: EMPTY
38910: LIST
38911: LIST
38912: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
38913: LD_INT 92
38915: PUSH
38916: LD_VAR 0 7
38920: PUSH
38921: LD_INT 1
38923: ARRAY
38924: PUSH
38925: LD_VAR 0 7
38929: PUSH
38930: LD_INT 2
38932: ARRAY
38933: PUSH
38934: LD_INT 2
38936: PUSH
38937: EMPTY
38938: LIST
38939: LIST
38940: LIST
38941: LIST
38942: PPUSH
38943: CALL_OW 69
38947: PUSH
38948: LD_INT 0
38950: EQUAL
38951: IFFALSE 39004
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
38953: LD_VAR 0 1
38957: PPUSH
38958: LD_VAR 0 7
38962: PUSH
38963: LD_INT 1
38965: ARRAY
38966: PPUSH
38967: LD_VAR 0 7
38971: PUSH
38972: LD_INT 2
38974: ARRAY
38975: PPUSH
38976: LD_VAR 0 3
38980: PPUSH
38981: CALL_OW 48
// result := IsPlaced ( unit ) ;
38985: LD_ADDR_VAR 0 4
38989: PUSH
38990: LD_VAR 0 1
38994: PPUSH
38995: CALL_OW 305
38999: ST_TO_ADDR
// exit ;
39000: POP
39001: POP
39002: GO 39008
// end ; end ;
39004: GO 38871
39006: POP
39007: POP
// end ;
39008: LD_VAR 0 4
39012: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
39013: LD_INT 0
39015: PPUSH
39016: PPUSH
39017: PPUSH
// if not side or side > 8 then
39018: LD_VAR 0 1
39022: NOT
39023: PUSH
39024: LD_VAR 0 1
39028: PUSH
39029: LD_INT 8
39031: GREATER
39032: OR
39033: IFFALSE 39037
// exit ;
39035: GO 39224
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
39037: LD_ADDR_VAR 0 4
39041: PUSH
39042: LD_INT 22
39044: PUSH
39045: LD_VAR 0 1
39049: PUSH
39050: EMPTY
39051: LIST
39052: LIST
39053: PUSH
39054: LD_INT 21
39056: PUSH
39057: LD_INT 3
39059: PUSH
39060: EMPTY
39061: LIST
39062: LIST
39063: PUSH
39064: EMPTY
39065: LIST
39066: LIST
39067: PPUSH
39068: CALL_OW 69
39072: ST_TO_ADDR
// if not tmp then
39073: LD_VAR 0 4
39077: NOT
39078: IFFALSE 39082
// exit ;
39080: GO 39224
// enable_addtolog := true ;
39082: LD_ADDR_OWVAR 81
39086: PUSH
39087: LD_INT 1
39089: ST_TO_ADDR
// AddToLog ( [ ) ;
39090: LD_STRING [
39092: PPUSH
39093: CALL_OW 561
// for i in tmp do
39097: LD_ADDR_VAR 0 3
39101: PUSH
39102: LD_VAR 0 4
39106: PUSH
39107: FOR_IN
39108: IFFALSE 39215
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
39110: LD_STRING [
39112: PUSH
39113: LD_VAR 0 3
39117: PPUSH
39118: CALL_OW 266
39122: STR
39123: PUSH
39124: LD_STRING , 
39126: STR
39127: PUSH
39128: LD_VAR 0 3
39132: PPUSH
39133: CALL_OW 250
39137: STR
39138: PUSH
39139: LD_STRING , 
39141: STR
39142: PUSH
39143: LD_VAR 0 3
39147: PPUSH
39148: CALL_OW 251
39152: STR
39153: PUSH
39154: LD_STRING , 
39156: STR
39157: PUSH
39158: LD_VAR 0 3
39162: PPUSH
39163: CALL_OW 254
39167: STR
39168: PUSH
39169: LD_STRING , 
39171: STR
39172: PUSH
39173: LD_VAR 0 3
39177: PPUSH
39178: LD_INT 1
39180: PPUSH
39181: CALL_OW 268
39185: STR
39186: PUSH
39187: LD_STRING , 
39189: STR
39190: PUSH
39191: LD_VAR 0 3
39195: PPUSH
39196: LD_INT 2
39198: PPUSH
39199: CALL_OW 268
39203: STR
39204: PUSH
39205: LD_STRING ],
39207: STR
39208: PPUSH
39209: CALL_OW 561
// end ;
39213: GO 39107
39215: POP
39216: POP
// AddToLog ( ]; ) ;
39217: LD_STRING ];
39219: PPUSH
39220: CALL_OW 561
// end ;
39224: LD_VAR 0 2
39228: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
39229: LD_INT 0
39231: PPUSH
39232: PPUSH
39233: PPUSH
39234: PPUSH
39235: PPUSH
// if not area or not rate or not max then
39236: LD_VAR 0 1
39240: NOT
39241: PUSH
39242: LD_VAR 0 2
39246: NOT
39247: OR
39248: PUSH
39249: LD_VAR 0 4
39253: NOT
39254: OR
39255: IFFALSE 39259
// exit ;
39257: GO 39448
// while 1 do
39259: LD_INT 1
39261: IFFALSE 39448
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
39263: LD_ADDR_VAR 0 9
39267: PUSH
39268: LD_VAR 0 1
39272: PPUSH
39273: LD_INT 1
39275: PPUSH
39276: CALL_OW 287
39280: PUSH
39281: LD_INT 10
39283: MUL
39284: ST_TO_ADDR
// r := rate / 10 ;
39285: LD_ADDR_VAR 0 7
39289: PUSH
39290: LD_VAR 0 2
39294: PUSH
39295: LD_INT 10
39297: DIVREAL
39298: ST_TO_ADDR
// time := 1 1$00 ;
39299: LD_ADDR_VAR 0 8
39303: PUSH
39304: LD_INT 2100
39306: ST_TO_ADDR
// if amount < min then
39307: LD_VAR 0 9
39311: PUSH
39312: LD_VAR 0 3
39316: LESS
39317: IFFALSE 39335
// r := r * 2 else
39319: LD_ADDR_VAR 0 7
39323: PUSH
39324: LD_VAR 0 7
39328: PUSH
39329: LD_INT 2
39331: MUL
39332: ST_TO_ADDR
39333: GO 39361
// if amount > max then
39335: LD_VAR 0 9
39339: PUSH
39340: LD_VAR 0 4
39344: GREATER
39345: IFFALSE 39361
// r := r / 2 ;
39347: LD_ADDR_VAR 0 7
39351: PUSH
39352: LD_VAR 0 7
39356: PUSH
39357: LD_INT 2
39359: DIVREAL
39360: ST_TO_ADDR
// time := time / r ;
39361: LD_ADDR_VAR 0 8
39365: PUSH
39366: LD_VAR 0 8
39370: PUSH
39371: LD_VAR 0 7
39375: DIVREAL
39376: ST_TO_ADDR
// if time < 0 then
39377: LD_VAR 0 8
39381: PUSH
39382: LD_INT 0
39384: LESS
39385: IFFALSE 39402
// time := time * - 1 ;
39387: LD_ADDR_VAR 0 8
39391: PUSH
39392: LD_VAR 0 8
39396: PUSH
39397: LD_INT 1
39399: NEG
39400: MUL
39401: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
39402: LD_VAR 0 8
39406: PUSH
39407: LD_INT 35
39409: PPUSH
39410: LD_INT 875
39412: PPUSH
39413: CALL_OW 12
39417: PLUS
39418: PPUSH
39419: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
39423: LD_INT 1
39425: PPUSH
39426: LD_INT 5
39428: PPUSH
39429: CALL_OW 12
39433: PPUSH
39434: LD_VAR 0 1
39438: PPUSH
39439: LD_INT 1
39441: PPUSH
39442: CALL_OW 55
// end ;
39446: GO 39259
// end ;
39448: LD_VAR 0 5
39452: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
39453: LD_INT 0
39455: PPUSH
39456: PPUSH
39457: PPUSH
39458: PPUSH
39459: PPUSH
39460: PPUSH
39461: PPUSH
39462: PPUSH
// if not turrets or not factories then
39463: LD_VAR 0 1
39467: NOT
39468: PUSH
39469: LD_VAR 0 2
39473: NOT
39474: OR
39475: IFFALSE 39479
// exit ;
39477: GO 39786
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
39479: LD_ADDR_VAR 0 10
39483: PUSH
39484: LD_INT 5
39486: PUSH
39487: LD_INT 6
39489: PUSH
39490: EMPTY
39491: LIST
39492: LIST
39493: PUSH
39494: LD_INT 2
39496: PUSH
39497: LD_INT 4
39499: PUSH
39500: EMPTY
39501: LIST
39502: LIST
39503: PUSH
39504: LD_INT 3
39506: PUSH
39507: LD_INT 5
39509: PUSH
39510: EMPTY
39511: LIST
39512: LIST
39513: PUSH
39514: EMPTY
39515: LIST
39516: LIST
39517: LIST
39518: PUSH
39519: LD_INT 24
39521: PUSH
39522: LD_INT 25
39524: PUSH
39525: EMPTY
39526: LIST
39527: LIST
39528: PUSH
39529: LD_INT 23
39531: PUSH
39532: LD_INT 27
39534: PUSH
39535: EMPTY
39536: LIST
39537: LIST
39538: PUSH
39539: EMPTY
39540: LIST
39541: LIST
39542: PUSH
39543: LD_INT 42
39545: PUSH
39546: LD_INT 43
39548: PUSH
39549: EMPTY
39550: LIST
39551: LIST
39552: PUSH
39553: LD_INT 44
39555: PUSH
39556: LD_INT 46
39558: PUSH
39559: EMPTY
39560: LIST
39561: LIST
39562: PUSH
39563: LD_INT 45
39565: PUSH
39566: LD_INT 47
39568: PUSH
39569: EMPTY
39570: LIST
39571: LIST
39572: PUSH
39573: EMPTY
39574: LIST
39575: LIST
39576: LIST
39577: PUSH
39578: EMPTY
39579: LIST
39580: LIST
39581: LIST
39582: ST_TO_ADDR
// result := [ ] ;
39583: LD_ADDR_VAR 0 3
39587: PUSH
39588: EMPTY
39589: ST_TO_ADDR
// for i in turrets do
39590: LD_ADDR_VAR 0 4
39594: PUSH
39595: LD_VAR 0 1
39599: PUSH
39600: FOR_IN
39601: IFFALSE 39784
// begin nat := GetNation ( i ) ;
39603: LD_ADDR_VAR 0 7
39607: PUSH
39608: LD_VAR 0 4
39612: PPUSH
39613: CALL_OW 248
39617: ST_TO_ADDR
// weapon := 0 ;
39618: LD_ADDR_VAR 0 8
39622: PUSH
39623: LD_INT 0
39625: ST_TO_ADDR
// if not nat then
39626: LD_VAR 0 7
39630: NOT
39631: IFFALSE 39635
// continue ;
39633: GO 39600
// for j in list [ nat ] do
39635: LD_ADDR_VAR 0 5
39639: PUSH
39640: LD_VAR 0 10
39644: PUSH
39645: LD_VAR 0 7
39649: ARRAY
39650: PUSH
39651: FOR_IN
39652: IFFALSE 39693
// if GetBWeapon ( i ) = j [ 1 ] then
39654: LD_VAR 0 4
39658: PPUSH
39659: CALL_OW 269
39663: PUSH
39664: LD_VAR 0 5
39668: PUSH
39669: LD_INT 1
39671: ARRAY
39672: EQUAL
39673: IFFALSE 39691
// begin weapon := j [ 2 ] ;
39675: LD_ADDR_VAR 0 8
39679: PUSH
39680: LD_VAR 0 5
39684: PUSH
39685: LD_INT 2
39687: ARRAY
39688: ST_TO_ADDR
// break ;
39689: GO 39693
// end ;
39691: GO 39651
39693: POP
39694: POP
// if not weapon then
39695: LD_VAR 0 8
39699: NOT
39700: IFFALSE 39704
// continue ;
39702: GO 39600
// for k in factories do
39704: LD_ADDR_VAR 0 6
39708: PUSH
39709: LD_VAR 0 2
39713: PUSH
39714: FOR_IN
39715: IFFALSE 39780
// begin weapons := AvailableWeaponList ( k ) ;
39717: LD_ADDR_VAR 0 9
39721: PUSH
39722: LD_VAR 0 6
39726: PPUSH
39727: CALL_OW 478
39731: ST_TO_ADDR
// if not weapons then
39732: LD_VAR 0 9
39736: NOT
39737: IFFALSE 39741
// continue ;
39739: GO 39714
// if weapon in weapons then
39741: LD_VAR 0 8
39745: PUSH
39746: LD_VAR 0 9
39750: IN
39751: IFFALSE 39778
// begin result := [ i , weapon ] ;
39753: LD_ADDR_VAR 0 3
39757: PUSH
39758: LD_VAR 0 4
39762: PUSH
39763: LD_VAR 0 8
39767: PUSH
39768: EMPTY
39769: LIST
39770: LIST
39771: ST_TO_ADDR
// exit ;
39772: POP
39773: POP
39774: POP
39775: POP
39776: GO 39786
// end ; end ;
39778: GO 39714
39780: POP
39781: POP
// end ;
39782: GO 39600
39784: POP
39785: POP
// end ;
39786: LD_VAR 0 3
39790: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
39791: LD_INT 0
39793: PPUSH
// if not side or side > 8 then
39794: LD_VAR 0 3
39798: NOT
39799: PUSH
39800: LD_VAR 0 3
39804: PUSH
39805: LD_INT 8
39807: GREATER
39808: OR
39809: IFFALSE 39813
// exit ;
39811: GO 39872
// if not range then
39813: LD_VAR 0 4
39817: NOT
39818: IFFALSE 39829
// range := - 12 ;
39820: LD_ADDR_VAR 0 4
39824: PUSH
39825: LD_INT 12
39827: NEG
39828: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
39829: LD_VAR 0 1
39833: PPUSH
39834: LD_VAR 0 2
39838: PPUSH
39839: LD_VAR 0 3
39843: PPUSH
39844: LD_VAR 0 4
39848: PPUSH
39849: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
39853: LD_VAR 0 1
39857: PPUSH
39858: LD_VAR 0 2
39862: PPUSH
39863: LD_VAR 0 3
39867: PPUSH
39868: CALL_OW 331
// end ;
39872: LD_VAR 0 5
39876: RET
// export function Video ( mode ) ; begin
39877: LD_INT 0
39879: PPUSH
// ingame_video = mode ;
39880: LD_ADDR_OWVAR 52
39884: PUSH
39885: LD_VAR 0 1
39889: ST_TO_ADDR
// interface_hidden = mode ;
39890: LD_ADDR_OWVAR 54
39894: PUSH
39895: LD_VAR 0 1
39899: ST_TO_ADDR
// end ;
39900: LD_VAR 0 2
39904: RET
// export function Join ( array , element ) ; begin
39905: LD_INT 0
39907: PPUSH
// result := Replace ( array , array + 1 , element ) ;
39908: LD_ADDR_VAR 0 3
39912: PUSH
39913: LD_VAR 0 1
39917: PPUSH
39918: LD_VAR 0 1
39922: PUSH
39923: LD_INT 1
39925: PLUS
39926: PPUSH
39927: LD_VAR 0 2
39931: PPUSH
39932: CALL_OW 1
39936: ST_TO_ADDR
// end ;
39937: LD_VAR 0 3
39941: RET
// export function JoinUnion ( array , element ) ; begin
39942: LD_INT 0
39944: PPUSH
// result := array union element ;
39945: LD_ADDR_VAR 0 3
39949: PUSH
39950: LD_VAR 0 1
39954: PUSH
39955: LD_VAR 0 2
39959: UNION
39960: ST_TO_ADDR
// end ;
39961: LD_VAR 0 3
39965: RET
// export function GetBehemoths ( side ) ; begin
39966: LD_INT 0
39968: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
39969: LD_ADDR_VAR 0 2
39973: PUSH
39974: LD_INT 22
39976: PUSH
39977: LD_VAR 0 1
39981: PUSH
39982: EMPTY
39983: LIST
39984: LIST
39985: PUSH
39986: LD_INT 31
39988: PUSH
39989: LD_INT 25
39991: PUSH
39992: EMPTY
39993: LIST
39994: LIST
39995: PUSH
39996: EMPTY
39997: LIST
39998: LIST
39999: PPUSH
40000: CALL_OW 69
40004: ST_TO_ADDR
// end ;
40005: LD_VAR 0 2
40009: RET
// export function Shuffle ( array ) ; var i , index ; begin
40010: LD_INT 0
40012: PPUSH
40013: PPUSH
40014: PPUSH
// result := [ ] ;
40015: LD_ADDR_VAR 0 2
40019: PUSH
40020: EMPTY
40021: ST_TO_ADDR
// if not array then
40022: LD_VAR 0 1
40026: NOT
40027: IFFALSE 40031
// exit ;
40029: GO 40130
// Randomize ;
40031: CALL_OW 10
// for i = array downto 1 do
40035: LD_ADDR_VAR 0 3
40039: PUSH
40040: DOUBLE
40041: LD_VAR 0 1
40045: INC
40046: ST_TO_ADDR
40047: LD_INT 1
40049: PUSH
40050: FOR_DOWNTO
40051: IFFALSE 40128
// begin index := rand ( 1 , array ) ;
40053: LD_ADDR_VAR 0 4
40057: PUSH
40058: LD_INT 1
40060: PPUSH
40061: LD_VAR 0 1
40065: PPUSH
40066: CALL_OW 12
40070: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
40071: LD_ADDR_VAR 0 2
40075: PUSH
40076: LD_VAR 0 2
40080: PPUSH
40081: LD_VAR 0 2
40085: PUSH
40086: LD_INT 1
40088: PLUS
40089: PPUSH
40090: LD_VAR 0 1
40094: PUSH
40095: LD_VAR 0 4
40099: ARRAY
40100: PPUSH
40101: CALL_OW 2
40105: ST_TO_ADDR
// array := Delete ( array , index ) ;
40106: LD_ADDR_VAR 0 1
40110: PUSH
40111: LD_VAR 0 1
40115: PPUSH
40116: LD_VAR 0 4
40120: PPUSH
40121: CALL_OW 3
40125: ST_TO_ADDR
// end ;
40126: GO 40050
40128: POP
40129: POP
// end ;
40130: LD_VAR 0 2
40134: RET
// export function GetBaseMaterials ( base ) ; begin
40135: LD_INT 0
40137: PPUSH
// result := [ 0 , 0 , 0 ] ;
40138: LD_ADDR_VAR 0 2
40142: PUSH
40143: LD_INT 0
40145: PUSH
40146: LD_INT 0
40148: PUSH
40149: LD_INT 0
40151: PUSH
40152: EMPTY
40153: LIST
40154: LIST
40155: LIST
40156: ST_TO_ADDR
// if not base then
40157: LD_VAR 0 1
40161: NOT
40162: IFFALSE 40166
// exit ;
40164: GO 40215
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
40166: LD_ADDR_VAR 0 2
40170: PUSH
40171: LD_VAR 0 1
40175: PPUSH
40176: LD_INT 1
40178: PPUSH
40179: CALL_OW 275
40183: PUSH
40184: LD_VAR 0 1
40188: PPUSH
40189: LD_INT 2
40191: PPUSH
40192: CALL_OW 275
40196: PUSH
40197: LD_VAR 0 1
40201: PPUSH
40202: LD_INT 3
40204: PPUSH
40205: CALL_OW 275
40209: PUSH
40210: EMPTY
40211: LIST
40212: LIST
40213: LIST
40214: ST_TO_ADDR
// end ;
40215: LD_VAR 0 2
40219: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
40220: LD_INT 0
40222: PPUSH
40223: PPUSH
// result := array ;
40224: LD_ADDR_VAR 0 3
40228: PUSH
40229: LD_VAR 0 1
40233: ST_TO_ADDR
// if size >= result then
40234: LD_VAR 0 2
40238: PUSH
40239: LD_VAR 0 3
40243: GREATEREQUAL
40244: IFFALSE 40248
// exit ;
40246: GO 40298
// if size then
40248: LD_VAR 0 2
40252: IFFALSE 40298
// for i := array downto size do
40254: LD_ADDR_VAR 0 4
40258: PUSH
40259: DOUBLE
40260: LD_VAR 0 1
40264: INC
40265: ST_TO_ADDR
40266: LD_VAR 0 2
40270: PUSH
40271: FOR_DOWNTO
40272: IFFALSE 40296
// result := Delete ( result , result ) ;
40274: LD_ADDR_VAR 0 3
40278: PUSH
40279: LD_VAR 0 3
40283: PPUSH
40284: LD_VAR 0 3
40288: PPUSH
40289: CALL_OW 3
40293: ST_TO_ADDR
40294: GO 40271
40296: POP
40297: POP
// end ;
40298: LD_VAR 0 3
40302: RET
// export function ComExit ( unit ) ; var tmp ; begin
40303: LD_INT 0
40305: PPUSH
40306: PPUSH
// if not IsInUnit ( unit ) then
40307: LD_VAR 0 1
40311: PPUSH
40312: CALL_OW 310
40316: NOT
40317: IFFALSE 40321
// exit ;
40319: GO 40381
// tmp := IsInUnit ( unit ) ;
40321: LD_ADDR_VAR 0 3
40325: PUSH
40326: LD_VAR 0 1
40330: PPUSH
40331: CALL_OW 310
40335: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
40336: LD_VAR 0 3
40340: PPUSH
40341: CALL_OW 247
40345: PUSH
40346: LD_INT 2
40348: EQUAL
40349: IFFALSE 40362
// ComExitVehicle ( unit ) else
40351: LD_VAR 0 1
40355: PPUSH
40356: CALL_OW 121
40360: GO 40371
// ComExitBuilding ( unit ) ;
40362: LD_VAR 0 1
40366: PPUSH
40367: CALL_OW 122
// result := tmp ;
40371: LD_ADDR_VAR 0 2
40375: PUSH
40376: LD_VAR 0 3
40380: ST_TO_ADDR
// end ;
40381: LD_VAR 0 2
40385: RET
// export function ComExitAll ( units ) ; var i ; begin
40386: LD_INT 0
40388: PPUSH
40389: PPUSH
// if not units then
40390: LD_VAR 0 1
40394: NOT
40395: IFFALSE 40399
// exit ;
40397: GO 40425
// for i in units do
40399: LD_ADDR_VAR 0 3
40403: PUSH
40404: LD_VAR 0 1
40408: PUSH
40409: FOR_IN
40410: IFFALSE 40423
// ComExit ( i ) ;
40412: LD_VAR 0 3
40416: PPUSH
40417: CALL 40303 0 1
40421: GO 40409
40423: POP
40424: POP
// end ;
40425: LD_VAR 0 2
40429: RET
// export function ResetHc ; begin
40430: LD_INT 0
40432: PPUSH
// InitHc ;
40433: CALL_OW 19
// hc_importance := 0 ;
40437: LD_ADDR_OWVAR 32
40441: PUSH
40442: LD_INT 0
40444: ST_TO_ADDR
// end ;
40445: LD_VAR 0 1
40449: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
40450: LD_INT 0
40452: PPUSH
40453: PPUSH
40454: PPUSH
// _x := ( x1 + x2 ) div 2 ;
40455: LD_ADDR_VAR 0 6
40459: PUSH
40460: LD_VAR 0 1
40464: PUSH
40465: LD_VAR 0 3
40469: PLUS
40470: PUSH
40471: LD_INT 2
40473: DIV
40474: ST_TO_ADDR
// if _x < 0 then
40475: LD_VAR 0 6
40479: PUSH
40480: LD_INT 0
40482: LESS
40483: IFFALSE 40500
// _x := _x * - 1 ;
40485: LD_ADDR_VAR 0 6
40489: PUSH
40490: LD_VAR 0 6
40494: PUSH
40495: LD_INT 1
40497: NEG
40498: MUL
40499: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
40500: LD_ADDR_VAR 0 7
40504: PUSH
40505: LD_VAR 0 2
40509: PUSH
40510: LD_VAR 0 4
40514: PLUS
40515: PUSH
40516: LD_INT 2
40518: DIV
40519: ST_TO_ADDR
// if _y < 0 then
40520: LD_VAR 0 7
40524: PUSH
40525: LD_INT 0
40527: LESS
40528: IFFALSE 40545
// _y := _y * - 1 ;
40530: LD_ADDR_VAR 0 7
40534: PUSH
40535: LD_VAR 0 7
40539: PUSH
40540: LD_INT 1
40542: NEG
40543: MUL
40544: ST_TO_ADDR
// result := [ _x , _y ] ;
40545: LD_ADDR_VAR 0 5
40549: PUSH
40550: LD_VAR 0 6
40554: PUSH
40555: LD_VAR 0 7
40559: PUSH
40560: EMPTY
40561: LIST
40562: LIST
40563: ST_TO_ADDR
// end ;
40564: LD_VAR 0 5
40568: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
40569: LD_INT 0
40571: PPUSH
40572: PPUSH
40573: PPUSH
40574: PPUSH
// task := GetTaskList ( unit ) ;
40575: LD_ADDR_VAR 0 7
40579: PUSH
40580: LD_VAR 0 1
40584: PPUSH
40585: CALL_OW 437
40589: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
40590: LD_VAR 0 7
40594: NOT
40595: PUSH
40596: LD_VAR 0 1
40600: PPUSH
40601: LD_VAR 0 2
40605: PPUSH
40606: CALL_OW 308
40610: NOT
40611: AND
40612: IFFALSE 40616
// exit ;
40614: GO 40734
// if IsInArea ( unit , area ) then
40616: LD_VAR 0 1
40620: PPUSH
40621: LD_VAR 0 2
40625: PPUSH
40626: CALL_OW 308
40630: IFFALSE 40648
// begin ComMoveToArea ( unit , goAway ) ;
40632: LD_VAR 0 1
40636: PPUSH
40637: LD_VAR 0 3
40641: PPUSH
40642: CALL_OW 113
// exit ;
40646: GO 40734
// end ; if task [ 1 ] [ 1 ] <> M then
40648: LD_VAR 0 7
40652: PUSH
40653: LD_INT 1
40655: ARRAY
40656: PUSH
40657: LD_INT 1
40659: ARRAY
40660: PUSH
40661: LD_STRING M
40663: NONEQUAL
40664: IFFALSE 40668
// exit ;
40666: GO 40734
// x := task [ 1 ] [ 2 ] ;
40668: LD_ADDR_VAR 0 5
40672: PUSH
40673: LD_VAR 0 7
40677: PUSH
40678: LD_INT 1
40680: ARRAY
40681: PUSH
40682: LD_INT 2
40684: ARRAY
40685: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
40686: LD_ADDR_VAR 0 6
40690: PUSH
40691: LD_VAR 0 7
40695: PUSH
40696: LD_INT 1
40698: ARRAY
40699: PUSH
40700: LD_INT 3
40702: ARRAY
40703: ST_TO_ADDR
// if InArea ( x , y , area ) then
40704: LD_VAR 0 5
40708: PPUSH
40709: LD_VAR 0 6
40713: PPUSH
40714: LD_VAR 0 2
40718: PPUSH
40719: CALL_OW 309
40723: IFFALSE 40734
// ComStop ( unit ) ;
40725: LD_VAR 0 1
40729: PPUSH
40730: CALL_OW 141
// end ;
40734: LD_VAR 0 4
40738: RET
// export function Abs ( value ) ; begin
40739: LD_INT 0
40741: PPUSH
// result := value ;
40742: LD_ADDR_VAR 0 2
40746: PUSH
40747: LD_VAR 0 1
40751: ST_TO_ADDR
// if value < 0 then
40752: LD_VAR 0 1
40756: PUSH
40757: LD_INT 0
40759: LESS
40760: IFFALSE 40777
// result := value * - 1 ;
40762: LD_ADDR_VAR 0 2
40766: PUSH
40767: LD_VAR 0 1
40771: PUSH
40772: LD_INT 1
40774: NEG
40775: MUL
40776: ST_TO_ADDR
// end ;
40777: LD_VAR 0 2
40781: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
40782: LD_INT 0
40784: PPUSH
40785: PPUSH
40786: PPUSH
40787: PPUSH
40788: PPUSH
40789: PPUSH
40790: PPUSH
40791: PPUSH
// if not unit or not building then
40792: LD_VAR 0 1
40796: NOT
40797: PUSH
40798: LD_VAR 0 2
40802: NOT
40803: OR
40804: IFFALSE 40808
// exit ;
40806: GO 41034
// x := GetX ( building ) ;
40808: LD_ADDR_VAR 0 4
40812: PUSH
40813: LD_VAR 0 2
40817: PPUSH
40818: CALL_OW 250
40822: ST_TO_ADDR
// y := GetY ( building ) ;
40823: LD_ADDR_VAR 0 6
40827: PUSH
40828: LD_VAR 0 2
40832: PPUSH
40833: CALL_OW 251
40837: ST_TO_ADDR
// d := GetDir ( building ) ;
40838: LD_ADDR_VAR 0 8
40842: PUSH
40843: LD_VAR 0 2
40847: PPUSH
40848: CALL_OW 254
40852: ST_TO_ADDR
// r := 4 ;
40853: LD_ADDR_VAR 0 9
40857: PUSH
40858: LD_INT 4
40860: ST_TO_ADDR
// for i := 1 to 5 do
40861: LD_ADDR_VAR 0 10
40865: PUSH
40866: DOUBLE
40867: LD_INT 1
40869: DEC
40870: ST_TO_ADDR
40871: LD_INT 5
40873: PUSH
40874: FOR_TO
40875: IFFALSE 41032
// begin _x := ShiftX ( x , d , r + i ) ;
40877: LD_ADDR_VAR 0 5
40881: PUSH
40882: LD_VAR 0 4
40886: PPUSH
40887: LD_VAR 0 8
40891: PPUSH
40892: LD_VAR 0 9
40896: PUSH
40897: LD_VAR 0 10
40901: PLUS
40902: PPUSH
40903: CALL_OW 272
40907: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
40908: LD_ADDR_VAR 0 7
40912: PUSH
40913: LD_VAR 0 6
40917: PPUSH
40918: LD_VAR 0 8
40922: PPUSH
40923: LD_VAR 0 9
40927: PUSH
40928: LD_VAR 0 10
40932: PLUS
40933: PPUSH
40934: CALL_OW 273
40938: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
40939: LD_VAR 0 5
40943: PPUSH
40944: LD_VAR 0 7
40948: PPUSH
40949: CALL_OW 488
40953: PUSH
40954: LD_VAR 0 5
40958: PPUSH
40959: LD_VAR 0 7
40963: PPUSH
40964: CALL_OW 428
40968: PPUSH
40969: CALL_OW 247
40973: PUSH
40974: LD_INT 3
40976: PUSH
40977: LD_INT 2
40979: PUSH
40980: EMPTY
40981: LIST
40982: LIST
40983: IN
40984: NOT
40985: AND
40986: IFFALSE 41030
// begin ComMoveXY ( unit , _x , _y ) ;
40988: LD_VAR 0 1
40992: PPUSH
40993: LD_VAR 0 5
40997: PPUSH
40998: LD_VAR 0 7
41002: PPUSH
41003: CALL_OW 111
// result := [ _x , _y ] ;
41007: LD_ADDR_VAR 0 3
41011: PUSH
41012: LD_VAR 0 5
41016: PUSH
41017: LD_VAR 0 7
41021: PUSH
41022: EMPTY
41023: LIST
41024: LIST
41025: ST_TO_ADDR
// exit ;
41026: POP
41027: POP
41028: GO 41034
// end ; end ;
41030: GO 40874
41032: POP
41033: POP
// end ;
41034: LD_VAR 0 3
41038: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
41039: LD_INT 0
41041: PPUSH
41042: PPUSH
41043: PPUSH
// result := 0 ;
41044: LD_ADDR_VAR 0 3
41048: PUSH
41049: LD_INT 0
41051: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
41052: LD_VAR 0 1
41056: PUSH
41057: LD_INT 0
41059: LESS
41060: PUSH
41061: LD_VAR 0 1
41065: PUSH
41066: LD_INT 8
41068: GREATER
41069: OR
41070: PUSH
41071: LD_VAR 0 2
41075: PUSH
41076: LD_INT 0
41078: LESS
41079: OR
41080: PUSH
41081: LD_VAR 0 2
41085: PUSH
41086: LD_INT 8
41088: GREATER
41089: OR
41090: IFFALSE 41094
// exit ;
41092: GO 41169
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
41094: LD_ADDR_VAR 0 4
41098: PUSH
41099: LD_INT 22
41101: PUSH
41102: LD_VAR 0 2
41106: PUSH
41107: EMPTY
41108: LIST
41109: LIST
41110: PPUSH
41111: CALL_OW 69
41115: PUSH
41116: FOR_IN
41117: IFFALSE 41167
// begin un := UnitShoot ( i ) ;
41119: LD_ADDR_VAR 0 5
41123: PUSH
41124: LD_VAR 0 4
41128: PPUSH
41129: CALL_OW 504
41133: ST_TO_ADDR
// if GetSide ( un ) = side1 then
41134: LD_VAR 0 5
41138: PPUSH
41139: CALL_OW 255
41143: PUSH
41144: LD_VAR 0 1
41148: EQUAL
41149: IFFALSE 41165
// begin result := un ;
41151: LD_ADDR_VAR 0 3
41155: PUSH
41156: LD_VAR 0 5
41160: ST_TO_ADDR
// exit ;
41161: POP
41162: POP
41163: GO 41169
// end ; end ;
41165: GO 41116
41167: POP
41168: POP
// end ;
41169: LD_VAR 0 3
41173: RET
// export function GetCargoBay ( units ) ; begin
41174: LD_INT 0
41176: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
41177: LD_ADDR_VAR 0 2
41181: PUSH
41182: LD_VAR 0 1
41186: PPUSH
41187: LD_INT 2
41189: PUSH
41190: LD_INT 34
41192: PUSH
41193: LD_INT 12
41195: PUSH
41196: EMPTY
41197: LIST
41198: LIST
41199: PUSH
41200: LD_INT 34
41202: PUSH
41203: LD_INT 51
41205: PUSH
41206: EMPTY
41207: LIST
41208: LIST
41209: PUSH
41210: LD_INT 34
41212: PUSH
41213: LD_INT 32
41215: PUSH
41216: EMPTY
41217: LIST
41218: LIST
41219: PUSH
41220: LD_INT 34
41222: PUSH
41223: LD_INT 89
41225: PUSH
41226: EMPTY
41227: LIST
41228: LIST
41229: PUSH
41230: EMPTY
41231: LIST
41232: LIST
41233: LIST
41234: LIST
41235: LIST
41236: PPUSH
41237: CALL_OW 72
41241: ST_TO_ADDR
// end ;
41242: LD_VAR 0 2
41246: RET
// export function Negate ( value ) ; begin
41247: LD_INT 0
41249: PPUSH
// result := not value ;
41250: LD_ADDR_VAR 0 2
41254: PUSH
41255: LD_VAR 0 1
41259: NOT
41260: ST_TO_ADDR
// end ;
41261: LD_VAR 0 2
41265: RET
// export function Inc ( value ) ; begin
41266: LD_INT 0
41268: PPUSH
// result := value + 1 ;
41269: LD_ADDR_VAR 0 2
41273: PUSH
41274: LD_VAR 0 1
41278: PUSH
41279: LD_INT 1
41281: PLUS
41282: ST_TO_ADDR
// end ;
41283: LD_VAR 0 2
41287: RET
// export function Dec ( value ) ; begin
41288: LD_INT 0
41290: PPUSH
// result := value - 1 ;
41291: LD_ADDR_VAR 0 2
41295: PUSH
41296: LD_VAR 0 1
41300: PUSH
41301: LD_INT 1
41303: MINUS
41304: ST_TO_ADDR
// end ;
41305: LD_VAR 0 2
41309: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
41310: LD_INT 0
41312: PPUSH
41313: PPUSH
41314: PPUSH
41315: PPUSH
41316: PPUSH
41317: PPUSH
41318: PPUSH
41319: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
41320: LD_VAR 0 1
41324: PPUSH
41325: LD_VAR 0 2
41329: PPUSH
41330: CALL_OW 488
41334: NOT
41335: PUSH
41336: LD_VAR 0 3
41340: PPUSH
41341: LD_VAR 0 4
41345: PPUSH
41346: CALL_OW 488
41350: NOT
41351: OR
41352: IFFALSE 41365
// begin result := - 1 ;
41354: LD_ADDR_VAR 0 5
41358: PUSH
41359: LD_INT 1
41361: NEG
41362: ST_TO_ADDR
// exit ;
41363: GO 41600
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
41365: LD_ADDR_VAR 0 12
41369: PUSH
41370: LD_VAR 0 1
41374: PPUSH
41375: LD_VAR 0 2
41379: PPUSH
41380: LD_VAR 0 3
41384: PPUSH
41385: LD_VAR 0 4
41389: PPUSH
41390: CALL 40450 0 4
41394: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
41395: LD_ADDR_VAR 0 11
41399: PUSH
41400: LD_VAR 0 1
41404: PPUSH
41405: LD_VAR 0 2
41409: PPUSH
41410: LD_VAR 0 12
41414: PUSH
41415: LD_INT 1
41417: ARRAY
41418: PPUSH
41419: LD_VAR 0 12
41423: PUSH
41424: LD_INT 2
41426: ARRAY
41427: PPUSH
41428: CALL_OW 298
41432: ST_TO_ADDR
// distance := 9999 ;
41433: LD_ADDR_VAR 0 10
41437: PUSH
41438: LD_INT 9999
41440: ST_TO_ADDR
// for i := 0 to 5 do
41441: LD_ADDR_VAR 0 6
41445: PUSH
41446: DOUBLE
41447: LD_INT 0
41449: DEC
41450: ST_TO_ADDR
41451: LD_INT 5
41453: PUSH
41454: FOR_TO
41455: IFFALSE 41598
// begin _x := ShiftX ( x1 , i , centerDist ) ;
41457: LD_ADDR_VAR 0 7
41461: PUSH
41462: LD_VAR 0 1
41466: PPUSH
41467: LD_VAR 0 6
41471: PPUSH
41472: LD_VAR 0 11
41476: PPUSH
41477: CALL_OW 272
41481: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
41482: LD_ADDR_VAR 0 8
41486: PUSH
41487: LD_VAR 0 2
41491: PPUSH
41492: LD_VAR 0 6
41496: PPUSH
41497: LD_VAR 0 11
41501: PPUSH
41502: CALL_OW 273
41506: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41507: LD_VAR 0 7
41511: PPUSH
41512: LD_VAR 0 8
41516: PPUSH
41517: CALL_OW 488
41521: NOT
41522: IFFALSE 41526
// continue ;
41524: GO 41454
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
41526: LD_ADDR_VAR 0 9
41530: PUSH
41531: LD_VAR 0 12
41535: PUSH
41536: LD_INT 1
41538: ARRAY
41539: PPUSH
41540: LD_VAR 0 12
41544: PUSH
41545: LD_INT 2
41547: ARRAY
41548: PPUSH
41549: LD_VAR 0 7
41553: PPUSH
41554: LD_VAR 0 8
41558: PPUSH
41559: CALL_OW 298
41563: ST_TO_ADDR
// if tmp < distance then
41564: LD_VAR 0 9
41568: PUSH
41569: LD_VAR 0 10
41573: LESS
41574: IFFALSE 41596
// begin result := i ;
41576: LD_ADDR_VAR 0 5
41580: PUSH
41581: LD_VAR 0 6
41585: ST_TO_ADDR
// distance := tmp ;
41586: LD_ADDR_VAR 0 10
41590: PUSH
41591: LD_VAR 0 9
41595: ST_TO_ADDR
// end ; end ;
41596: GO 41454
41598: POP
41599: POP
// end ;
41600: LD_VAR 0 5
41604: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
41605: LD_INT 0
41607: PPUSH
41608: PPUSH
// if not driver or not IsInUnit ( driver ) then
41609: LD_VAR 0 1
41613: NOT
41614: PUSH
41615: LD_VAR 0 1
41619: PPUSH
41620: CALL_OW 310
41624: NOT
41625: OR
41626: IFFALSE 41630
// exit ;
41628: GO 41720
// vehicle := IsInUnit ( driver ) ;
41630: LD_ADDR_VAR 0 3
41634: PUSH
41635: LD_VAR 0 1
41639: PPUSH
41640: CALL_OW 310
41644: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
41645: LD_VAR 0 1
41649: PPUSH
41650: LD_STRING \
41652: PUSH
41653: LD_INT 0
41655: PUSH
41656: LD_INT 0
41658: PUSH
41659: LD_INT 0
41661: PUSH
41662: LD_INT 0
41664: PUSH
41665: LD_INT 0
41667: PUSH
41668: LD_INT 0
41670: PUSH
41671: EMPTY
41672: LIST
41673: LIST
41674: LIST
41675: LIST
41676: LIST
41677: LIST
41678: LIST
41679: PUSH
41680: LD_STRING E
41682: PUSH
41683: LD_INT 0
41685: PUSH
41686: LD_INT 0
41688: PUSH
41689: LD_VAR 0 3
41693: PUSH
41694: LD_INT 0
41696: PUSH
41697: LD_INT 0
41699: PUSH
41700: LD_INT 0
41702: PUSH
41703: EMPTY
41704: LIST
41705: LIST
41706: LIST
41707: LIST
41708: LIST
41709: LIST
41710: LIST
41711: PUSH
41712: EMPTY
41713: LIST
41714: LIST
41715: PPUSH
41716: CALL_OW 446
// end ;
41720: LD_VAR 0 2
41724: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
41725: LD_INT 0
41727: PPUSH
41728: PPUSH
// if not driver or not IsInUnit ( driver ) then
41729: LD_VAR 0 1
41733: NOT
41734: PUSH
41735: LD_VAR 0 1
41739: PPUSH
41740: CALL_OW 310
41744: NOT
41745: OR
41746: IFFALSE 41750
// exit ;
41748: GO 41840
// vehicle := IsInUnit ( driver ) ;
41750: LD_ADDR_VAR 0 3
41754: PUSH
41755: LD_VAR 0 1
41759: PPUSH
41760: CALL_OW 310
41764: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
41765: LD_VAR 0 1
41769: PPUSH
41770: LD_STRING \
41772: PUSH
41773: LD_INT 0
41775: PUSH
41776: LD_INT 0
41778: PUSH
41779: LD_INT 0
41781: PUSH
41782: LD_INT 0
41784: PUSH
41785: LD_INT 0
41787: PUSH
41788: LD_INT 0
41790: PUSH
41791: EMPTY
41792: LIST
41793: LIST
41794: LIST
41795: LIST
41796: LIST
41797: LIST
41798: LIST
41799: PUSH
41800: LD_STRING E
41802: PUSH
41803: LD_INT 0
41805: PUSH
41806: LD_INT 0
41808: PUSH
41809: LD_VAR 0 3
41813: PUSH
41814: LD_INT 0
41816: PUSH
41817: LD_INT 0
41819: PUSH
41820: LD_INT 0
41822: PUSH
41823: EMPTY
41824: LIST
41825: LIST
41826: LIST
41827: LIST
41828: LIST
41829: LIST
41830: LIST
41831: PUSH
41832: EMPTY
41833: LIST
41834: LIST
41835: PPUSH
41836: CALL_OW 447
// end ;
41840: LD_VAR 0 2
41844: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
41845: LD_INT 0
41847: PPUSH
41848: PPUSH
41849: PPUSH
// tmp := [ ] ;
41850: LD_ADDR_VAR 0 5
41854: PUSH
41855: EMPTY
41856: ST_TO_ADDR
// for i in units do
41857: LD_ADDR_VAR 0 4
41861: PUSH
41862: LD_VAR 0 1
41866: PUSH
41867: FOR_IN
41868: IFFALSE 41906
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
41870: LD_ADDR_VAR 0 5
41874: PUSH
41875: LD_VAR 0 5
41879: PPUSH
41880: LD_VAR 0 5
41884: PUSH
41885: LD_INT 1
41887: PLUS
41888: PPUSH
41889: LD_VAR 0 4
41893: PPUSH
41894: CALL_OW 256
41898: PPUSH
41899: CALL_OW 2
41903: ST_TO_ADDR
41904: GO 41867
41906: POP
41907: POP
// if not tmp then
41908: LD_VAR 0 5
41912: NOT
41913: IFFALSE 41917
// exit ;
41915: GO 41965
// if asc then
41917: LD_VAR 0 2
41921: IFFALSE 41945
// result := SortListByListAsc ( units , tmp ) else
41923: LD_ADDR_VAR 0 3
41927: PUSH
41928: LD_VAR 0 1
41932: PPUSH
41933: LD_VAR 0 5
41937: PPUSH
41938: CALL_OW 76
41942: ST_TO_ADDR
41943: GO 41965
// result := SortListByListDesc ( units , tmp ) ;
41945: LD_ADDR_VAR 0 3
41949: PUSH
41950: LD_VAR 0 1
41954: PPUSH
41955: LD_VAR 0 5
41959: PPUSH
41960: CALL_OW 77
41964: ST_TO_ADDR
// end ;
41965: LD_VAR 0 3
41969: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
41970: LD_INT 0
41972: PPUSH
41973: PPUSH
// task := GetTaskList ( mech ) ;
41974: LD_ADDR_VAR 0 4
41978: PUSH
41979: LD_VAR 0 1
41983: PPUSH
41984: CALL_OW 437
41988: ST_TO_ADDR
// if not task then
41989: LD_VAR 0 4
41993: NOT
41994: IFFALSE 41998
// exit ;
41996: GO 42040
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
41998: LD_ADDR_VAR 0 3
42002: PUSH
42003: LD_VAR 0 4
42007: PUSH
42008: LD_INT 1
42010: ARRAY
42011: PUSH
42012: LD_INT 1
42014: ARRAY
42015: PUSH
42016: LD_STRING r
42018: EQUAL
42019: PUSH
42020: LD_VAR 0 4
42024: PUSH
42025: LD_INT 1
42027: ARRAY
42028: PUSH
42029: LD_INT 4
42031: ARRAY
42032: PUSH
42033: LD_VAR 0 2
42037: EQUAL
42038: AND
42039: ST_TO_ADDR
// end ;
42040: LD_VAR 0 3
42044: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
42045: LD_INT 0
42047: PPUSH
// SetDir ( unit , d ) ;
42048: LD_VAR 0 1
42052: PPUSH
42053: LD_VAR 0 4
42057: PPUSH
42058: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
42062: LD_VAR 0 1
42066: PPUSH
42067: LD_VAR 0 2
42071: PPUSH
42072: LD_VAR 0 3
42076: PPUSH
42077: LD_VAR 0 5
42081: PPUSH
42082: CALL_OW 48
// end ;
42086: LD_VAR 0 6
42090: RET
// export function ToNaturalNumber ( number ) ; begin
42091: LD_INT 0
42093: PPUSH
// result := number div 1 ;
42094: LD_ADDR_VAR 0 2
42098: PUSH
42099: LD_VAR 0 1
42103: PUSH
42104: LD_INT 1
42106: DIV
42107: ST_TO_ADDR
// if number < 0 then
42108: LD_VAR 0 1
42112: PUSH
42113: LD_INT 0
42115: LESS
42116: IFFALSE 42126
// result := 0 ;
42118: LD_ADDR_VAR 0 2
42122: PUSH
42123: LD_INT 0
42125: ST_TO_ADDR
// end ;
42126: LD_VAR 0 2
42130: RET
// export function SortByClass ( units , class ) ; var un ; begin
42131: LD_INT 0
42133: PPUSH
42134: PPUSH
// if not units or not class then
42135: LD_VAR 0 1
42139: NOT
42140: PUSH
42141: LD_VAR 0 2
42145: NOT
42146: OR
42147: IFFALSE 42151
// exit ;
42149: GO 42246
// result := [ ] ;
42151: LD_ADDR_VAR 0 3
42155: PUSH
42156: EMPTY
42157: ST_TO_ADDR
// for un in units do
42158: LD_ADDR_VAR 0 4
42162: PUSH
42163: LD_VAR 0 1
42167: PUSH
42168: FOR_IN
42169: IFFALSE 42244
// if GetClass ( un ) = class then
42171: LD_VAR 0 4
42175: PPUSH
42176: CALL_OW 257
42180: PUSH
42181: LD_VAR 0 2
42185: EQUAL
42186: IFFALSE 42213
// result := Insert ( result , 1 , un ) else
42188: LD_ADDR_VAR 0 3
42192: PUSH
42193: LD_VAR 0 3
42197: PPUSH
42198: LD_INT 1
42200: PPUSH
42201: LD_VAR 0 4
42205: PPUSH
42206: CALL_OW 2
42210: ST_TO_ADDR
42211: GO 42242
// result := Replace ( result , result + 1 , un ) ;
42213: LD_ADDR_VAR 0 3
42217: PUSH
42218: LD_VAR 0 3
42222: PPUSH
42223: LD_VAR 0 3
42227: PUSH
42228: LD_INT 1
42230: PLUS
42231: PPUSH
42232: LD_VAR 0 4
42236: PPUSH
42237: CALL_OW 1
42241: ST_TO_ADDR
42242: GO 42168
42244: POP
42245: POP
// end ;
42246: LD_VAR 0 3
42250: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
42251: LD_INT 0
42253: PPUSH
42254: PPUSH
42255: PPUSH
42256: PPUSH
42257: PPUSH
42258: PPUSH
42259: PPUSH
// result := [ ] ;
42260: LD_ADDR_VAR 0 4
42264: PUSH
42265: EMPTY
42266: ST_TO_ADDR
// if x - r < 0 then
42267: LD_VAR 0 1
42271: PUSH
42272: LD_VAR 0 3
42276: MINUS
42277: PUSH
42278: LD_INT 0
42280: LESS
42281: IFFALSE 42293
// min_x := 0 else
42283: LD_ADDR_VAR 0 8
42287: PUSH
42288: LD_INT 0
42290: ST_TO_ADDR
42291: GO 42309
// min_x := x - r ;
42293: LD_ADDR_VAR 0 8
42297: PUSH
42298: LD_VAR 0 1
42302: PUSH
42303: LD_VAR 0 3
42307: MINUS
42308: ST_TO_ADDR
// if y - r < 0 then
42309: LD_VAR 0 2
42313: PUSH
42314: LD_VAR 0 3
42318: MINUS
42319: PUSH
42320: LD_INT 0
42322: LESS
42323: IFFALSE 42335
// min_y := 0 else
42325: LD_ADDR_VAR 0 7
42329: PUSH
42330: LD_INT 0
42332: ST_TO_ADDR
42333: GO 42351
// min_y := y - r ;
42335: LD_ADDR_VAR 0 7
42339: PUSH
42340: LD_VAR 0 2
42344: PUSH
42345: LD_VAR 0 3
42349: MINUS
42350: ST_TO_ADDR
// max_x := x + r ;
42351: LD_ADDR_VAR 0 9
42355: PUSH
42356: LD_VAR 0 1
42360: PUSH
42361: LD_VAR 0 3
42365: PLUS
42366: ST_TO_ADDR
// max_y := y + r ;
42367: LD_ADDR_VAR 0 10
42371: PUSH
42372: LD_VAR 0 2
42376: PUSH
42377: LD_VAR 0 3
42381: PLUS
42382: ST_TO_ADDR
// for _x = min_x to max_x do
42383: LD_ADDR_VAR 0 5
42387: PUSH
42388: DOUBLE
42389: LD_VAR 0 8
42393: DEC
42394: ST_TO_ADDR
42395: LD_VAR 0 9
42399: PUSH
42400: FOR_TO
42401: IFFALSE 42502
// for _y = min_y to max_y do
42403: LD_ADDR_VAR 0 6
42407: PUSH
42408: DOUBLE
42409: LD_VAR 0 7
42413: DEC
42414: ST_TO_ADDR
42415: LD_VAR 0 10
42419: PUSH
42420: FOR_TO
42421: IFFALSE 42498
// begin if not ValidHex ( _x , _y ) then
42423: LD_VAR 0 5
42427: PPUSH
42428: LD_VAR 0 6
42432: PPUSH
42433: CALL_OW 488
42437: NOT
42438: IFFALSE 42442
// continue ;
42440: GO 42420
// if GetResourceTypeXY ( _x , _y ) then
42442: LD_VAR 0 5
42446: PPUSH
42447: LD_VAR 0 6
42451: PPUSH
42452: CALL_OW 283
42456: IFFALSE 42496
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
42458: LD_ADDR_VAR 0 4
42462: PUSH
42463: LD_VAR 0 4
42467: PPUSH
42468: LD_VAR 0 4
42472: PUSH
42473: LD_INT 1
42475: PLUS
42476: PPUSH
42477: LD_VAR 0 5
42481: PUSH
42482: LD_VAR 0 6
42486: PUSH
42487: EMPTY
42488: LIST
42489: LIST
42490: PPUSH
42491: CALL_OW 1
42495: ST_TO_ADDR
// end ;
42496: GO 42420
42498: POP
42499: POP
42500: GO 42400
42502: POP
42503: POP
// end ;
42504: LD_VAR 0 4
42508: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
42509: LD_INT 0
42511: PPUSH
42512: PPUSH
42513: PPUSH
42514: PPUSH
42515: PPUSH
42516: PPUSH
42517: PPUSH
42518: PPUSH
// if not units then
42519: LD_VAR 0 1
42523: NOT
42524: IFFALSE 42528
// exit ;
42526: GO 43052
// result := UnitFilter ( units , [ f_ok ] ) ;
42528: LD_ADDR_VAR 0 3
42532: PUSH
42533: LD_VAR 0 1
42537: PPUSH
42538: LD_INT 50
42540: PUSH
42541: EMPTY
42542: LIST
42543: PPUSH
42544: CALL_OW 72
42548: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
42549: LD_ADDR_VAR 0 8
42553: PUSH
42554: LD_VAR 0 1
42558: PUSH
42559: LD_INT 1
42561: ARRAY
42562: PPUSH
42563: CALL_OW 255
42567: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
42568: LD_ADDR_VAR 0 10
42572: PUSH
42573: LD_INT 29
42575: PUSH
42576: LD_INT 91
42578: PUSH
42579: LD_INT 49
42581: PUSH
42582: EMPTY
42583: LIST
42584: LIST
42585: LIST
42586: ST_TO_ADDR
// if not result then
42587: LD_VAR 0 3
42591: NOT
42592: IFFALSE 42596
// exit ;
42594: GO 43052
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
42596: LD_ADDR_VAR 0 5
42600: PUSH
42601: LD_INT 81
42603: PUSH
42604: LD_VAR 0 8
42608: PUSH
42609: EMPTY
42610: LIST
42611: LIST
42612: PPUSH
42613: CALL_OW 69
42617: ST_TO_ADDR
// for i in result do
42618: LD_ADDR_VAR 0 4
42622: PUSH
42623: LD_VAR 0 3
42627: PUSH
42628: FOR_IN
42629: IFFALSE 43050
// begin tag := GetTag ( i ) + 1 ;
42631: LD_ADDR_VAR 0 9
42635: PUSH
42636: LD_VAR 0 4
42640: PPUSH
42641: CALL_OW 110
42645: PUSH
42646: LD_INT 1
42648: PLUS
42649: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
42650: LD_ADDR_VAR 0 7
42654: PUSH
42655: LD_VAR 0 4
42659: PPUSH
42660: CALL_OW 250
42664: PPUSH
42665: LD_VAR 0 4
42669: PPUSH
42670: CALL_OW 251
42674: PPUSH
42675: LD_INT 6
42677: PPUSH
42678: CALL 42251 0 3
42682: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
42683: LD_VAR 0 4
42687: PPUSH
42688: CALL_OW 247
42692: PUSH
42693: LD_INT 2
42695: EQUAL
42696: PUSH
42697: LD_VAR 0 7
42701: AND
42702: PUSH
42703: LD_VAR 0 4
42707: PPUSH
42708: CALL_OW 264
42712: PUSH
42713: LD_VAR 0 10
42717: IN
42718: NOT
42719: AND
42720: IFFALSE 42759
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
42722: LD_VAR 0 4
42726: PPUSH
42727: LD_VAR 0 7
42731: PUSH
42732: LD_INT 1
42734: ARRAY
42735: PUSH
42736: LD_INT 1
42738: ARRAY
42739: PPUSH
42740: LD_VAR 0 7
42744: PUSH
42745: LD_INT 1
42747: ARRAY
42748: PUSH
42749: LD_INT 2
42751: ARRAY
42752: PPUSH
42753: CALL_OW 116
42757: GO 43048
// if path > tag then
42759: LD_VAR 0 2
42763: PUSH
42764: LD_VAR 0 9
42768: GREATER
42769: IFFALSE 42977
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
42771: LD_ADDR_VAR 0 6
42775: PUSH
42776: LD_VAR 0 5
42780: PPUSH
42781: LD_INT 91
42783: PUSH
42784: LD_VAR 0 4
42788: PUSH
42789: LD_INT 8
42791: PUSH
42792: EMPTY
42793: LIST
42794: LIST
42795: LIST
42796: PPUSH
42797: CALL_OW 72
42801: ST_TO_ADDR
// if nearEnemy then
42802: LD_VAR 0 6
42806: IFFALSE 42875
// begin if GetWeapon ( i ) = ru_time_lapser then
42808: LD_VAR 0 4
42812: PPUSH
42813: CALL_OW 264
42817: PUSH
42818: LD_INT 49
42820: EQUAL
42821: IFFALSE 42849
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
42823: LD_VAR 0 4
42827: PPUSH
42828: LD_VAR 0 6
42832: PPUSH
42833: LD_VAR 0 4
42837: PPUSH
42838: CALL_OW 74
42842: PPUSH
42843: CALL_OW 112
42847: GO 42873
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
42849: LD_VAR 0 4
42853: PPUSH
42854: LD_VAR 0 6
42858: PPUSH
42859: LD_VAR 0 4
42863: PPUSH
42864: CALL_OW 74
42868: PPUSH
42869: CALL 43977 0 2
// end else
42873: GO 42975
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
42875: LD_VAR 0 4
42879: PPUSH
42880: LD_VAR 0 2
42884: PUSH
42885: LD_VAR 0 9
42889: ARRAY
42890: PUSH
42891: LD_INT 1
42893: ARRAY
42894: PPUSH
42895: LD_VAR 0 2
42899: PUSH
42900: LD_VAR 0 9
42904: ARRAY
42905: PUSH
42906: LD_INT 2
42908: ARRAY
42909: PPUSH
42910: CALL_OW 297
42914: PUSH
42915: LD_INT 6
42917: GREATER
42918: IFFALSE 42961
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
42920: LD_VAR 0 4
42924: PPUSH
42925: LD_VAR 0 2
42929: PUSH
42930: LD_VAR 0 9
42934: ARRAY
42935: PUSH
42936: LD_INT 1
42938: ARRAY
42939: PPUSH
42940: LD_VAR 0 2
42944: PUSH
42945: LD_VAR 0 9
42949: ARRAY
42950: PUSH
42951: LD_INT 2
42953: ARRAY
42954: PPUSH
42955: CALL_OW 114
42959: GO 42975
// SetTag ( i , tag ) ;
42961: LD_VAR 0 4
42965: PPUSH
42966: LD_VAR 0 9
42970: PPUSH
42971: CALL_OW 109
// end else
42975: GO 43048
// if enemy then
42977: LD_VAR 0 5
42981: IFFALSE 43048
// begin if GetWeapon ( i ) = ru_time_lapser then
42983: LD_VAR 0 4
42987: PPUSH
42988: CALL_OW 264
42992: PUSH
42993: LD_INT 49
42995: EQUAL
42996: IFFALSE 43024
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
42998: LD_VAR 0 4
43002: PPUSH
43003: LD_VAR 0 5
43007: PPUSH
43008: LD_VAR 0 4
43012: PPUSH
43013: CALL_OW 74
43017: PPUSH
43018: CALL_OW 112
43022: GO 43048
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
43024: LD_VAR 0 4
43028: PPUSH
43029: LD_VAR 0 5
43033: PPUSH
43034: LD_VAR 0 4
43038: PPUSH
43039: CALL_OW 74
43043: PPUSH
43044: CALL 43977 0 2
// end ; end ;
43048: GO 42628
43050: POP
43051: POP
// end ;
43052: LD_VAR 0 3
43056: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
43057: LD_INT 0
43059: PPUSH
43060: PPUSH
43061: PPUSH
// if not unit or IsInUnit ( unit ) then
43062: LD_VAR 0 1
43066: NOT
43067: PUSH
43068: LD_VAR 0 1
43072: PPUSH
43073: CALL_OW 310
43077: OR
43078: IFFALSE 43082
// exit ;
43080: GO 43173
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
43082: LD_ADDR_VAR 0 4
43086: PUSH
43087: LD_VAR 0 1
43091: PPUSH
43092: CALL_OW 250
43096: PPUSH
43097: LD_VAR 0 2
43101: PPUSH
43102: LD_INT 1
43104: PPUSH
43105: CALL_OW 272
43109: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
43110: LD_ADDR_VAR 0 5
43114: PUSH
43115: LD_VAR 0 1
43119: PPUSH
43120: CALL_OW 251
43124: PPUSH
43125: LD_VAR 0 2
43129: PPUSH
43130: LD_INT 1
43132: PPUSH
43133: CALL_OW 273
43137: ST_TO_ADDR
// if ValidHex ( x , y ) then
43138: LD_VAR 0 4
43142: PPUSH
43143: LD_VAR 0 5
43147: PPUSH
43148: CALL_OW 488
43152: IFFALSE 43173
// ComTurnXY ( unit , x , y ) ;
43154: LD_VAR 0 1
43158: PPUSH
43159: LD_VAR 0 4
43163: PPUSH
43164: LD_VAR 0 5
43168: PPUSH
43169: CALL_OW 118
// end ;
43173: LD_VAR 0 3
43177: RET
// export function SeeUnits ( side , units ) ; var i ; begin
43178: LD_INT 0
43180: PPUSH
43181: PPUSH
// result := false ;
43182: LD_ADDR_VAR 0 3
43186: PUSH
43187: LD_INT 0
43189: ST_TO_ADDR
// if not units then
43190: LD_VAR 0 2
43194: NOT
43195: IFFALSE 43199
// exit ;
43197: GO 43244
// for i in units do
43199: LD_ADDR_VAR 0 4
43203: PUSH
43204: LD_VAR 0 2
43208: PUSH
43209: FOR_IN
43210: IFFALSE 43242
// if See ( side , i ) then
43212: LD_VAR 0 1
43216: PPUSH
43217: LD_VAR 0 4
43221: PPUSH
43222: CALL_OW 292
43226: IFFALSE 43240
// begin result := true ;
43228: LD_ADDR_VAR 0 3
43232: PUSH
43233: LD_INT 1
43235: ST_TO_ADDR
// exit ;
43236: POP
43237: POP
43238: GO 43244
// end ;
43240: GO 43209
43242: POP
43243: POP
// end ;
43244: LD_VAR 0 3
43248: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
43249: LD_INT 0
43251: PPUSH
43252: PPUSH
43253: PPUSH
43254: PPUSH
// if not unit or not points then
43255: LD_VAR 0 1
43259: NOT
43260: PUSH
43261: LD_VAR 0 2
43265: NOT
43266: OR
43267: IFFALSE 43271
// exit ;
43269: GO 43361
// dist := 99999 ;
43271: LD_ADDR_VAR 0 5
43275: PUSH
43276: LD_INT 99999
43278: ST_TO_ADDR
// for i in points do
43279: LD_ADDR_VAR 0 4
43283: PUSH
43284: LD_VAR 0 2
43288: PUSH
43289: FOR_IN
43290: IFFALSE 43359
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
43292: LD_ADDR_VAR 0 6
43296: PUSH
43297: LD_VAR 0 1
43301: PPUSH
43302: LD_VAR 0 4
43306: PUSH
43307: LD_INT 1
43309: ARRAY
43310: PPUSH
43311: LD_VAR 0 4
43315: PUSH
43316: LD_INT 2
43318: ARRAY
43319: PPUSH
43320: CALL_OW 297
43324: ST_TO_ADDR
// if tmpDist < dist then
43325: LD_VAR 0 6
43329: PUSH
43330: LD_VAR 0 5
43334: LESS
43335: IFFALSE 43357
// begin result := i ;
43337: LD_ADDR_VAR 0 3
43341: PUSH
43342: LD_VAR 0 4
43346: ST_TO_ADDR
// dist := tmpDist ;
43347: LD_ADDR_VAR 0 5
43351: PUSH
43352: LD_VAR 0 6
43356: ST_TO_ADDR
// end ; end ;
43357: GO 43289
43359: POP
43360: POP
// end ;
43361: LD_VAR 0 3
43365: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
43366: LD_INT 0
43368: PPUSH
// uc_side := side ;
43369: LD_ADDR_OWVAR 20
43373: PUSH
43374: LD_VAR 0 1
43378: ST_TO_ADDR
// uc_nation := 3 ;
43379: LD_ADDR_OWVAR 21
43383: PUSH
43384: LD_INT 3
43386: ST_TO_ADDR
// vc_chassis := 25 ;
43387: LD_ADDR_OWVAR 37
43391: PUSH
43392: LD_INT 25
43394: ST_TO_ADDR
// vc_engine := engine_siberite ;
43395: LD_ADDR_OWVAR 39
43399: PUSH
43400: LD_INT 3
43402: ST_TO_ADDR
// vc_control := control_computer ;
43403: LD_ADDR_OWVAR 38
43407: PUSH
43408: LD_INT 3
43410: ST_TO_ADDR
// vc_weapon := 59 ;
43411: LD_ADDR_OWVAR 40
43415: PUSH
43416: LD_INT 59
43418: ST_TO_ADDR
// result := CreateVehicle ;
43419: LD_ADDR_VAR 0 5
43423: PUSH
43424: CALL_OW 45
43428: ST_TO_ADDR
// SetDir ( result , d ) ;
43429: LD_VAR 0 5
43433: PPUSH
43434: LD_VAR 0 4
43438: PPUSH
43439: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
43443: LD_VAR 0 5
43447: PPUSH
43448: LD_VAR 0 2
43452: PPUSH
43453: LD_VAR 0 3
43457: PPUSH
43458: LD_INT 0
43460: PPUSH
43461: CALL_OW 48
// end ;
43465: LD_VAR 0 5
43469: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
43470: LD_INT 0
43472: PPUSH
43473: PPUSH
43474: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
43475: LD_ADDR_VAR 0 2
43479: PUSH
43480: LD_INT 0
43482: PUSH
43483: LD_INT 0
43485: PUSH
43486: LD_INT 0
43488: PUSH
43489: LD_INT 0
43491: PUSH
43492: EMPTY
43493: LIST
43494: LIST
43495: LIST
43496: LIST
43497: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
43498: LD_VAR 0 1
43502: NOT
43503: PUSH
43504: LD_VAR 0 1
43508: PPUSH
43509: CALL_OW 264
43513: PUSH
43514: LD_INT 12
43516: PUSH
43517: LD_INT 51
43519: PUSH
43520: LD_INT 32
43522: PUSH
43523: LD_INT 89
43525: PUSH
43526: EMPTY
43527: LIST
43528: LIST
43529: LIST
43530: LIST
43531: IN
43532: NOT
43533: OR
43534: IFFALSE 43538
// exit ;
43536: GO 43636
// for i := 1 to 3 do
43538: LD_ADDR_VAR 0 3
43542: PUSH
43543: DOUBLE
43544: LD_INT 1
43546: DEC
43547: ST_TO_ADDR
43548: LD_INT 3
43550: PUSH
43551: FOR_TO
43552: IFFALSE 43634
// begin tmp := GetCargo ( cargo , i ) ;
43554: LD_ADDR_VAR 0 4
43558: PUSH
43559: LD_VAR 0 1
43563: PPUSH
43564: LD_VAR 0 3
43568: PPUSH
43569: CALL_OW 289
43573: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
43574: LD_ADDR_VAR 0 2
43578: PUSH
43579: LD_VAR 0 2
43583: PPUSH
43584: LD_VAR 0 3
43588: PPUSH
43589: LD_VAR 0 4
43593: PPUSH
43594: CALL_OW 1
43598: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
43599: LD_ADDR_VAR 0 2
43603: PUSH
43604: LD_VAR 0 2
43608: PPUSH
43609: LD_INT 4
43611: PPUSH
43612: LD_VAR 0 2
43616: PUSH
43617: LD_INT 4
43619: ARRAY
43620: PUSH
43621: LD_VAR 0 4
43625: PLUS
43626: PPUSH
43627: CALL_OW 1
43631: ST_TO_ADDR
// end ;
43632: GO 43551
43634: POP
43635: POP
// end ;
43636: LD_VAR 0 2
43640: RET
// export function Length ( array ) ; begin
43641: LD_INT 0
43643: PPUSH
// result := array + 0 ;
43644: LD_ADDR_VAR 0 2
43648: PUSH
43649: LD_VAR 0 1
43653: PUSH
43654: LD_INT 0
43656: PLUS
43657: ST_TO_ADDR
// end ;
43658: LD_VAR 0 2
43662: RET
// export function PrepareArray ( array ) ; begin
43663: LD_INT 0
43665: PPUSH
// result := array diff 0 ;
43666: LD_ADDR_VAR 0 2
43670: PUSH
43671: LD_VAR 0 1
43675: PUSH
43676: LD_INT 0
43678: DIFF
43679: ST_TO_ADDR
// if not result [ 1 ] then
43680: LD_VAR 0 2
43684: PUSH
43685: LD_INT 1
43687: ARRAY
43688: NOT
43689: IFFALSE 43709
// result := Delete ( result , 1 ) ;
43691: LD_ADDR_VAR 0 2
43695: PUSH
43696: LD_VAR 0 2
43700: PPUSH
43701: LD_INT 1
43703: PPUSH
43704: CALL_OW 3
43708: ST_TO_ADDR
// end ;
43709: LD_VAR 0 2
43713: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
43714: LD_INT 0
43716: PPUSH
43717: PPUSH
43718: PPUSH
43719: PPUSH
// sibRocketRange := 25 ;
43720: LD_ADDR_VAR 0 6
43724: PUSH
43725: LD_INT 25
43727: ST_TO_ADDR
// result := false ;
43728: LD_ADDR_VAR 0 4
43732: PUSH
43733: LD_INT 0
43735: ST_TO_ADDR
// for i := 0 to 5 do
43736: LD_ADDR_VAR 0 5
43740: PUSH
43741: DOUBLE
43742: LD_INT 0
43744: DEC
43745: ST_TO_ADDR
43746: LD_INT 5
43748: PUSH
43749: FOR_TO
43750: IFFALSE 43817
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
43752: LD_VAR 0 1
43756: PPUSH
43757: LD_VAR 0 5
43761: PPUSH
43762: LD_VAR 0 6
43766: PPUSH
43767: CALL_OW 272
43771: PPUSH
43772: LD_VAR 0 2
43776: PPUSH
43777: LD_VAR 0 5
43781: PPUSH
43782: LD_VAR 0 6
43786: PPUSH
43787: CALL_OW 273
43791: PPUSH
43792: LD_VAR 0 3
43796: PPUSH
43797: CALL_OW 309
43801: IFFALSE 43815
// begin result := true ;
43803: LD_ADDR_VAR 0 4
43807: PUSH
43808: LD_INT 1
43810: ST_TO_ADDR
// exit ;
43811: POP
43812: POP
43813: GO 43819
// end ;
43815: GO 43749
43817: POP
43818: POP
// end ;
43819: LD_VAR 0 4
43823: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
43824: LD_INT 0
43826: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
43827: LD_VAR 0 1
43831: PPUSH
43832: LD_VAR 0 2
43836: PPUSH
43837: LD_INT 0
43839: PPUSH
43840: LD_INT 0
43842: PPUSH
43843: LD_INT 1
43845: PPUSH
43846: LD_INT 0
43848: PPUSH
43849: CALL_OW 587
// end ;
43853: LD_VAR 0 3
43857: RET
// export function CenterOnNow ( unit ) ; begin
43858: LD_INT 0
43860: PPUSH
// result := IsInUnit ( unit ) ;
43861: LD_ADDR_VAR 0 2
43865: PUSH
43866: LD_VAR 0 1
43870: PPUSH
43871: CALL_OW 310
43875: ST_TO_ADDR
// if not result then
43876: LD_VAR 0 2
43880: NOT
43881: IFFALSE 43893
// result := unit ;
43883: LD_ADDR_VAR 0 2
43887: PUSH
43888: LD_VAR 0 1
43892: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
43893: LD_VAR 0 1
43897: PPUSH
43898: CALL_OW 87
// end ;
43902: LD_VAR 0 2
43906: RET
// export function ComMoveHex ( unit , hex ) ; begin
43907: LD_INT 0
43909: PPUSH
// if not hex then
43910: LD_VAR 0 2
43914: NOT
43915: IFFALSE 43919
// exit ;
43917: GO 43972
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
43919: LD_VAR 0 2
43923: PUSH
43924: LD_INT 1
43926: ARRAY
43927: PPUSH
43928: LD_VAR 0 2
43932: PUSH
43933: LD_INT 2
43935: ARRAY
43936: PPUSH
43937: CALL_OW 428
43941: IFFALSE 43945
// exit ;
43943: GO 43972
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
43945: LD_VAR 0 1
43949: PPUSH
43950: LD_VAR 0 2
43954: PUSH
43955: LD_INT 1
43957: ARRAY
43958: PPUSH
43959: LD_VAR 0 2
43963: PUSH
43964: LD_INT 2
43966: ARRAY
43967: PPUSH
43968: CALL_OW 111
// end ;
43972: LD_VAR 0 3
43976: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
43977: LD_INT 0
43979: PPUSH
43980: PPUSH
43981: PPUSH
// if not unit or not enemy then
43982: LD_VAR 0 1
43986: NOT
43987: PUSH
43988: LD_VAR 0 2
43992: NOT
43993: OR
43994: IFFALSE 43998
// exit ;
43996: GO 44122
// x := GetX ( enemy ) ;
43998: LD_ADDR_VAR 0 4
44002: PUSH
44003: LD_VAR 0 2
44007: PPUSH
44008: CALL_OW 250
44012: ST_TO_ADDR
// y := GetY ( enemy ) ;
44013: LD_ADDR_VAR 0 5
44017: PUSH
44018: LD_VAR 0 2
44022: PPUSH
44023: CALL_OW 251
44027: ST_TO_ADDR
// if ValidHex ( x , y ) then
44028: LD_VAR 0 4
44032: PPUSH
44033: LD_VAR 0 5
44037: PPUSH
44038: CALL_OW 488
44042: IFFALSE 44122
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
44044: LD_VAR 0 2
44048: PPUSH
44049: CALL_OW 247
44053: PUSH
44054: LD_INT 3
44056: PUSH
44057: LD_INT 2
44059: PUSH
44060: EMPTY
44061: LIST
44062: LIST
44063: IN
44064: PUSH
44065: LD_VAR 0 1
44069: PPUSH
44070: CALL_OW 255
44074: PPUSH
44075: LD_VAR 0 2
44079: PPUSH
44080: CALL_OW 292
44084: AND
44085: IFFALSE 44103
// ComAttackUnit ( unit , enemy ) else
44087: LD_VAR 0 1
44091: PPUSH
44092: LD_VAR 0 2
44096: PPUSH
44097: CALL_OW 115
44101: GO 44122
// ComAgressiveMove ( unit , x , y ) ;
44103: LD_VAR 0 1
44107: PPUSH
44108: LD_VAR 0 4
44112: PPUSH
44113: LD_VAR 0 5
44117: PPUSH
44118: CALL_OW 114
// end ;
44122: LD_VAR 0 3
44126: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
44127: LD_INT 0
44129: PPUSH
44130: PPUSH
44131: PPUSH
// list := AreaToList ( area , 0 ) ;
44132: LD_ADDR_VAR 0 5
44136: PUSH
44137: LD_VAR 0 1
44141: PPUSH
44142: LD_INT 0
44144: PPUSH
44145: CALL_OW 517
44149: ST_TO_ADDR
// if not list then
44150: LD_VAR 0 5
44154: NOT
44155: IFFALSE 44159
// exit ;
44157: GO 44289
// if all then
44159: LD_VAR 0 2
44163: IFFALSE 44251
// begin for i := 1 to list [ 1 ] do
44165: LD_ADDR_VAR 0 4
44169: PUSH
44170: DOUBLE
44171: LD_INT 1
44173: DEC
44174: ST_TO_ADDR
44175: LD_VAR 0 5
44179: PUSH
44180: LD_INT 1
44182: ARRAY
44183: PUSH
44184: FOR_TO
44185: IFFALSE 44247
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
44187: LD_ADDR_VAR 0 3
44191: PUSH
44192: LD_VAR 0 3
44196: PPUSH
44197: LD_VAR 0 3
44201: PUSH
44202: LD_INT 1
44204: PLUS
44205: PPUSH
44206: LD_VAR 0 5
44210: PUSH
44211: LD_INT 1
44213: ARRAY
44214: PUSH
44215: LD_VAR 0 4
44219: ARRAY
44220: PUSH
44221: LD_VAR 0 5
44225: PUSH
44226: LD_INT 2
44228: ARRAY
44229: PUSH
44230: LD_VAR 0 4
44234: ARRAY
44235: PUSH
44236: EMPTY
44237: LIST
44238: LIST
44239: PPUSH
44240: CALL_OW 1
44244: ST_TO_ADDR
44245: GO 44184
44247: POP
44248: POP
// exit ;
44249: GO 44289
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
44251: LD_ADDR_VAR 0 3
44255: PUSH
44256: LD_VAR 0 5
44260: PUSH
44261: LD_INT 1
44263: ARRAY
44264: PUSH
44265: LD_INT 1
44267: ARRAY
44268: PUSH
44269: LD_VAR 0 5
44273: PUSH
44274: LD_INT 2
44276: ARRAY
44277: PUSH
44278: LD_INT 1
44280: ARRAY
44281: PUSH
44282: EMPTY
44283: LIST
44284: LIST
44285: PUSH
44286: EMPTY
44287: LIST
44288: ST_TO_ADDR
// end ;
44289: LD_VAR 0 3
44293: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
44294: LD_INT 0
44296: PPUSH
44297: PPUSH
// list := AreaToList ( area , 0 ) ;
44298: LD_ADDR_VAR 0 4
44302: PUSH
44303: LD_VAR 0 1
44307: PPUSH
44308: LD_INT 0
44310: PPUSH
44311: CALL_OW 517
44315: ST_TO_ADDR
// if not list then
44316: LD_VAR 0 4
44320: NOT
44321: IFFALSE 44325
// exit ;
44323: GO 44366
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
44325: LD_ADDR_VAR 0 3
44329: PUSH
44330: LD_VAR 0 4
44334: PUSH
44335: LD_INT 1
44337: ARRAY
44338: PUSH
44339: LD_INT 1
44341: ARRAY
44342: PUSH
44343: LD_VAR 0 4
44347: PUSH
44348: LD_INT 2
44350: ARRAY
44351: PUSH
44352: LD_INT 1
44354: ARRAY
44355: PUSH
44356: LD_VAR 0 2
44360: PUSH
44361: EMPTY
44362: LIST
44363: LIST
44364: LIST
44365: ST_TO_ADDR
// end ;
44366: LD_VAR 0 3
44370: RET
// export function First ( array ) ; begin
44371: LD_INT 0
44373: PPUSH
// if not array then
44374: LD_VAR 0 1
44378: NOT
44379: IFFALSE 44383
// exit ;
44381: GO 44397
// result := array [ 1 ] ;
44383: LD_ADDR_VAR 0 2
44387: PUSH
44388: LD_VAR 0 1
44392: PUSH
44393: LD_INT 1
44395: ARRAY
44396: ST_TO_ADDR
// end ;
44397: LD_VAR 0 2
44401: RET
// export function Last ( array ) ; begin
44402: LD_INT 0
44404: PPUSH
// if not array then
44405: LD_VAR 0 1
44409: NOT
44410: IFFALSE 44414
// exit ;
44412: GO 44430
// result := array [ array ] ;
44414: LD_ADDR_VAR 0 2
44418: PUSH
44419: LD_VAR 0 1
44423: PUSH
44424: LD_VAR 0 1
44428: ARRAY
44429: ST_TO_ADDR
// end ; end_of_file
44430: LD_VAR 0 2
44434: RET
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpRespawn , mpKingArea , mpPoints , mpDisplayStrings , mpGameActive ; export function InitMultiplayer ; var i ; begin
44435: LD_INT 0
44437: PPUSH
44438: PPUSH
// disable ( mpActive ) ;
44439: LD_INT 100
44441: DISABLE_MARKED
// disable ( mpWin ) ;
44442: LD_INT 101
44444: DISABLE_MARKED
// disable ( mpLose ) ;
44445: LD_INT 102
44447: DISABLE_MARKED
// mpGameType := 0 ;
44448: LD_ADDR_EXP 1
44452: PUSH
44453: LD_INT 0
44455: ST_TO_ADDR
// mpGameSettings := [ ] ;
44456: LD_ADDR_EXP 4
44460: PUSH
44461: EMPTY
44462: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
44463: LD_ADDR_EXP 2
44467: PUSH
44468: EMPTY
44469: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
44470: LD_ADDR_EXP 3
44474: PUSH
44475: EMPTY
44476: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
44477: LD_ADDR_EXP 27
44481: PUSH
44482: LD_INT 2
44484: PUSH
44485: LD_INT 2
44487: PUSH
44488: EMPTY
44489: LIST
44490: LIST
44491: ST_TO_ADDR
// mpOilDeposits := [ ] ;
44492: LD_ADDR_EXP 10
44496: PUSH
44497: EMPTY
44498: ST_TO_ADDR
// mpSibDeposits := [ ] ;
44499: LD_ADDR_EXP 11
44503: PUSH
44504: EMPTY
44505: ST_TO_ADDR
// mpDepots := [ ] ;
44506: LD_ADDR_EXP 12
44510: PUSH
44511: EMPTY
44512: ST_TO_ADDR
// mpBuildings := [ ] ;
44513: LD_ADDR_EXP 15
44517: PUSH
44518: EMPTY
44519: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
44520: LD_ADDR_EXP 16
44524: PUSH
44525: EMPTY
44526: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
44527: LD_ADDR_EXP 17
44531: PUSH
44532: EMPTY
44533: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
44534: LD_ADDR_EXP 18
44538: PUSH
44539: EMPTY
44540: ST_TO_ADDR
// mpStartingResources := [ ] ;
44541: LD_ADDR_EXP 13
44545: PUSH
44546: EMPTY
44547: ST_TO_ADDR
// mpStartPos := [ ] ;
44548: LD_ADDR_EXP 19
44552: PUSH
44553: EMPTY
44554: ST_TO_ADDR
// mpBattleFlag := - 1 ;
44555: LD_ADDR_EXP 20
44559: PUSH
44560: LD_INT 1
44562: NEG
44563: ST_TO_ADDR
// mpBattleFlags := [ ] ;
44564: LD_ADDR_EXP 21
44568: PUSH
44569: EMPTY
44570: ST_TO_ADDR
// mpApemans := [ ] ;
44571: LD_ADDR_EXP 28
44575: PUSH
44576: EMPTY
44577: ST_TO_ADDR
// mpApemansArea := [ ] ;
44578: LD_ADDR_EXP 29
44582: PUSH
44583: EMPTY
44584: ST_TO_ADDR
// mpRespawn := [ ] ;
44585: LD_ADDR_EXP 30
44589: PUSH
44590: EMPTY
44591: ST_TO_ADDR
// mpKingArea := 0 ;
44592: LD_ADDR_EXP 31
44596: PUSH
44597: LD_INT 0
44599: ST_TO_ADDR
// mpPoints := [ ] ;
44600: LD_ADDR_EXP 32
44604: PUSH
44605: EMPTY
44606: ST_TO_ADDR
// mpShipments := 0 ;
44607: LD_ADDR_EXP 25
44611: PUSH
44612: LD_INT 0
44614: ST_TO_ADDR
// mpPeopleSkill := 3 ;
44615: LD_ADDR_EXP 23
44619: PUSH
44620: LD_INT 3
44622: ST_TO_ADDR
// mpPeopleAmount := 15 ;
44623: LD_ADDR_EXP 22
44627: PUSH
44628: LD_INT 15
44630: ST_TO_ADDR
// mpDisplayStrings := 0 ;
44631: LD_ADDR_EXP 33
44635: PUSH
44636: LD_INT 0
44638: ST_TO_ADDR
// mpGameActive := false ;
44639: LD_ADDR_EXP 34
44643: PUSH
44644: LD_INT 0
44646: ST_TO_ADDR
// for i := 1 to 32 do
44647: LD_ADDR_VAR 0 2
44651: PUSH
44652: DOUBLE
44653: LD_INT 1
44655: DEC
44656: ST_TO_ADDR
44657: LD_INT 32
44659: PUSH
44660: FOR_TO
44661: IFFALSE 44688
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
44663: LD_ADDR_EXP 4
44667: PUSH
44668: LD_EXP 4
44672: PPUSH
44673: LD_VAR 0 2
44677: PPUSH
44678: LD_INT 0
44680: PPUSH
44681: CALL_OW 1
44685: ST_TO_ADDR
44686: GO 44660
44688: POP
44689: POP
// end ;
44690: LD_VAR 0 1
44694: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
44695: LD_INT 0
44697: PPUSH
44698: PPUSH
44699: PPUSH
44700: PPUSH
44701: PPUSH
44702: PPUSH
44703: PPUSH
44704: PPUSH
44705: PPUSH
44706: PPUSH
44707: PPUSH
44708: PPUSH
44709: PPUSH
44710: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing ] ;
44711: LD_ADDR_VAR 0 14
44715: PUSH
44716: LD_INT 1
44718: PUSH
44719: LD_INT 2
44721: PUSH
44722: LD_INT 3
44724: PUSH
44725: EMPTY
44726: LIST
44727: LIST
44728: LIST
44729: ST_TO_ADDR
// for i in gameTypes do
44730: LD_ADDR_VAR 0 2
44734: PUSH
44735: LD_VAR 0 14
44739: PUSH
44740: FOR_IN
44741: IFFALSE 44750
// disable ( i ) ;
44743: LD_VAR 0 2
44747: DISABLE_MARKED
44748: GO 44740
44750: POP
44751: POP
// if Multiplayer then
44752: LD_OWVAR 4
44756: IFFALSE 44940
// begin mpGameType := mp_game_type ;
44758: LD_ADDR_EXP 1
44762: PUSH
44763: LD_OWVAR 6
44767: ST_TO_ADDR
// your_side := mp_player_side ;
44768: LD_ADDR_OWVAR 2
44772: PUSH
44773: LD_OWVAR 7
44777: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
44778: LD_ADDR_EXP 5
44782: PUSH
44783: LD_OWVAR 17
44787: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
44788: LD_ADDR_EXP 6
44792: PUSH
44793: LD_OWVAR 15
44797: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
44798: LD_ADDR_EXP 7
44802: PUSH
44803: LD_OWVAR 16
44807: ST_TO_ADDR
// mpTeams := mp_teams ;
44808: LD_ADDR_EXP 8
44812: PUSH
44813: LD_OWVAR 12
44817: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
44818: LD_ADDR_VAR 0 2
44822: PUSH
44823: DOUBLE
44824: LD_INT 1
44826: DEC
44827: ST_TO_ADDR
44828: LD_EXP 2
44832: PPUSH
44833: CALL 4305 0 1
44837: PUSH
44838: FOR_TO
44839: IFFALSE 44915
// begin setting := mpGameSettingsKeys [ i ] ;
44841: LD_ADDR_VAR 0 12
44845: PUSH
44846: LD_EXP 2
44850: PUSH
44851: LD_VAR 0 2
44855: ARRAY
44856: ST_TO_ADDR
// if setting then
44857: LD_VAR 0 12
44861: IFFALSE 44913
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
44863: LD_ADDR_EXP 4
44867: PUSH
44868: LD_EXP 4
44872: PPUSH
44873: LD_VAR 0 2
44877: PPUSH
44878: LD_EXP 3
44882: PUSH
44883: LD_VAR 0 2
44887: ARRAY
44888: PUSH
44889: LD_VAR 0 2
44893: PUSH
44894: LD_INT 1
44896: MINUS
44897: PPUSH
44898: CALL_OW 426
44902: PUSH
44903: LD_INT 1
44905: PLUS
44906: ARRAY
44907: PPUSH
44908: CALL_OW 1
44912: ST_TO_ADDR
// end ;
44913: GO 44838
44915: POP
44916: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
44917: LD_ADDR_EXP 9
44921: PUSH
44922: LD_EXP 6
44926: PUSH
44927: LD_INT 0
44929: PUSH
44930: EMPTY
44931: LIST
44932: DIFF
44933: PUSH
44934: LD_INT 1
44936: GREATER
44937: ST_TO_ADDR
// end else
44938: GO 44940
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
44940: LD_EXP 1
44944: PPUSH
44945: CALL 804 0 1
// if Count ( mpMarkedAreas ) then
44949: LD_EXP 16
44953: PPUSH
44954: CALL 4305 0 1
44958: IFFALSE 44989
// begin for i in mpMarkedAreas do
44960: LD_ADDR_VAR 0 2
44964: PUSH
44965: LD_EXP 16
44969: PUSH
44970: FOR_IN
44971: IFFALSE 44987
// SetAreaMapShow ( i , 0 ) ;
44973: LD_VAR 0 2
44977: PPUSH
44978: LD_INT 0
44980: PPUSH
44981: CALL_OW 424
44985: GO 44970
44987: POP
44988: POP
// end ; for i := 1 to 8 do
44989: LD_ADDR_VAR 0 2
44993: PUSH
44994: DOUBLE
44995: LD_INT 1
44997: DEC
44998: ST_TO_ADDR
44999: LD_INT 8
45001: PUSH
45002: FOR_TO
45003: IFFALSE 46102
// begin if not mpSidePositions [ i ] then
45005: LD_EXP 5
45009: PUSH
45010: LD_VAR 0 2
45014: ARRAY
45015: NOT
45016: IFFALSE 45020
// continue ;
45018: GO 45002
// side := i ;
45020: LD_ADDR_VAR 0 7
45024: PUSH
45025: LD_VAR 0 2
45029: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
45030: LD_ADDR_VAR 0 9
45034: PUSH
45035: LD_EXP 7
45039: PUSH
45040: LD_VAR 0 2
45044: ARRAY
45045: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
45046: LD_ADDR_VAR 0 8
45050: PUSH
45051: LD_EXP 5
45055: PUSH
45056: LD_VAR 0 2
45060: ARRAY
45061: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
45062: LD_EXP 10
45066: PPUSH
45067: CALL 4305 0 1
45071: IFFALSE 45148
// begin for j in mpOilDeposits [ pos ] do
45073: LD_ADDR_VAR 0 3
45077: PUSH
45078: LD_EXP 10
45082: PUSH
45083: LD_VAR 0 8
45087: ARRAY
45088: PUSH
45089: FOR_IN
45090: IFFALSE 45146
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
45092: LD_VAR 0 3
45096: PUSH
45097: LD_INT 1
45099: ARRAY
45100: PPUSH
45101: LD_VAR 0 3
45105: PUSH
45106: LD_INT 2
45108: ARRAY
45109: PPUSH
45110: LD_INT 2
45112: PPUSH
45113: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
45117: LD_VAR 0 3
45121: PUSH
45122: LD_INT 1
45124: ARRAY
45125: PPUSH
45126: LD_VAR 0 3
45130: PUSH
45131: LD_INT 2
45133: ARRAY
45134: PPUSH
45135: LD_VAR 0 7
45139: PPUSH
45140: CALL_OW 441
// end ;
45144: GO 45089
45146: POP
45147: POP
// end ; if Count ( mpSibDeposits ) then
45148: LD_EXP 11
45152: PPUSH
45153: CALL 4305 0 1
45157: IFFALSE 45234
// begin for j in mpSibDeposits [ pos ] do
45159: LD_ADDR_VAR 0 3
45163: PUSH
45164: LD_EXP 11
45168: PUSH
45169: LD_VAR 0 8
45173: ARRAY
45174: PUSH
45175: FOR_IN
45176: IFFALSE 45232
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
45178: LD_VAR 0 3
45182: PUSH
45183: LD_INT 1
45185: ARRAY
45186: PPUSH
45187: LD_VAR 0 3
45191: PUSH
45192: LD_INT 2
45194: ARRAY
45195: PPUSH
45196: LD_INT 3
45198: PPUSH
45199: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
45203: LD_VAR 0 3
45207: PUSH
45208: LD_INT 1
45210: ARRAY
45211: PPUSH
45212: LD_VAR 0 3
45216: PUSH
45217: LD_INT 2
45219: ARRAY
45220: PPUSH
45221: LD_VAR 0 7
45225: PPUSH
45226: CALL_OW 441
// end ;
45230: GO 45175
45232: POP
45233: POP
// end ; InitBc ;
45234: CALL_OW 21
// InitUc ;
45238: CALL_OW 18
// uc_side := side ;
45242: LD_ADDR_OWVAR 20
45246: PUSH
45247: LD_VAR 0 7
45251: ST_TO_ADDR
// uc_nation := nation ;
45252: LD_ADDR_OWVAR 21
45256: PUSH
45257: LD_VAR 0 9
45261: ST_TO_ADDR
// if Count ( mpDepots ) then
45262: LD_EXP 12
45266: PPUSH
45267: CALL 4305 0 1
45271: IFFALSE 45427
// begin bc_level := 0 ;
45273: LD_ADDR_OWVAR 43
45277: PUSH
45278: LD_INT 0
45280: ST_TO_ADDR
// bc_type := b_depot ;
45281: LD_ADDR_OWVAR 42
45285: PUSH
45286: LD_INT 0
45288: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
45289: LD_ADDR_VAR 0 4
45293: PUSH
45294: LD_EXP 12
45298: PUSH
45299: LD_VAR 0 8
45303: ARRAY
45304: PUSH
45305: LD_INT 1
45307: ARRAY
45308: PPUSH
45309: LD_EXP 12
45313: PUSH
45314: LD_VAR 0 8
45318: ARRAY
45319: PUSH
45320: LD_INT 2
45322: ARRAY
45323: PPUSH
45324: LD_EXP 12
45328: PUSH
45329: LD_VAR 0 8
45333: ARRAY
45334: PUSH
45335: LD_INT 3
45337: ARRAY
45338: PPUSH
45339: CALL_OW 47
45343: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
45344: LD_VAR 0 4
45348: PPUSH
45349: LD_STRING @
45351: PUSH
45352: LD_VAR 0 7
45356: STR
45357: PPUSH
45358: CALL_OW 500
// if Count ( mpStartingResources ) then
45362: LD_EXP 13
45366: PPUSH
45367: CALL 4305 0 1
45371: IFFALSE 45425
// begin for j := 1 to mpStartingResources do
45373: LD_ADDR_VAR 0 3
45377: PUSH
45378: DOUBLE
45379: LD_INT 1
45381: DEC
45382: ST_TO_ADDR
45383: LD_EXP 13
45387: PUSH
45388: FOR_TO
45389: IFFALSE 45423
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
45391: LD_VAR 0 4
45395: PPUSH
45396: CALL_OW 274
45400: PPUSH
45401: LD_VAR 0 3
45405: PPUSH
45406: LD_EXP 13
45410: PUSH
45411: LD_VAR 0 3
45415: ARRAY
45416: PPUSH
45417: CALL_OW 277
45421: GO 45388
45423: POP
45424: POP
// end ; end else
45425: GO 45574
// if Count ( mpStartingResources ) then
45427: LD_EXP 13
45431: PPUSH
45432: CALL 4305 0 1
45436: IFFALSE 45574
// begin for j := 1 to mpStartingResources do
45438: LD_ADDR_VAR 0 3
45442: PUSH
45443: DOUBLE
45444: LD_INT 1
45446: DEC
45447: ST_TO_ADDR
45448: LD_EXP 13
45452: PUSH
45453: FOR_TO
45454: IFFALSE 45572
// begin resources := mpStartingResources [ j ] ;
45456: LD_ADDR_VAR 0 13
45460: PUSH
45461: LD_EXP 13
45465: PUSH
45466: LD_VAR 0 3
45470: ARRAY
45471: ST_TO_ADDR
// repeat if resources >= 50 then
45472: LD_VAR 0 13
45476: PUSH
45477: LD_INT 50
45479: GREATEREQUAL
45480: IFFALSE 45526
// begin CreateResourcesXYR ( j , 5 , x , y , 4 , false ) ;
45482: LD_VAR 0 3
45486: PPUSH
45487: LD_INT 5
45489: PPUSH
45490: LD_VAR 0 5
45494: PPUSH
45495: LD_VAR 0 6
45499: PPUSH
45500: LD_INT 4
45502: PPUSH
45503: LD_INT 0
45505: PPUSH
45506: CALL_OW 60
// resources := resources - 50 ;
45510: LD_ADDR_VAR 0 13
45514: PUSH
45515: LD_VAR 0 13
45519: PUSH
45520: LD_INT 50
45522: MINUS
45523: ST_TO_ADDR
// end else
45524: GO 45560
// CreateResourcesXYR ( j , resources div 10 , x , y , 4 , false ) ;
45526: LD_VAR 0 3
45530: PPUSH
45531: LD_VAR 0 13
45535: PUSH
45536: LD_INT 10
45538: DIV
45539: PPUSH
45540: LD_VAR 0 5
45544: PPUSH
45545: LD_VAR 0 6
45549: PPUSH
45550: LD_INT 4
45552: PPUSH
45553: LD_INT 0
45555: PPUSH
45556: CALL_OW 60
// until resources <= 0 ;
45560: LD_VAR 0 13
45564: PUSH
45565: LD_INT 0
45567: LESSEQUAL
45568: IFFALSE 45472
// end ;
45570: GO 45453
45572: POP
45573: POP
// end ; if Count ( mpBuildings ) then
45574: LD_EXP 15
45578: PPUSH
45579: CALL 4305 0 1
45583: IFFALSE 45661
// begin for j in mpBuildings [ pos ] do
45585: LD_ADDR_VAR 0 3
45589: PUSH
45590: LD_EXP 15
45594: PUSH
45595: LD_VAR 0 8
45599: ARRAY
45600: PUSH
45601: FOR_IN
45602: IFFALSE 45659
// begin bc_level := 0 ;
45604: LD_ADDR_OWVAR 43
45608: PUSH
45609: LD_INT 0
45611: ST_TO_ADDR
// bc_type := j [ 1 ] ;
45612: LD_ADDR_OWVAR 42
45616: PUSH
45617: LD_VAR 0 3
45621: PUSH
45622: LD_INT 1
45624: ARRAY
45625: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
45626: LD_VAR 0 3
45630: PUSH
45631: LD_INT 2
45633: ARRAY
45634: PPUSH
45635: LD_VAR 0 3
45639: PUSH
45640: LD_INT 3
45642: ARRAY
45643: PPUSH
45644: LD_VAR 0 3
45648: PUSH
45649: LD_INT 4
45651: ARRAY
45652: PPUSH
45653: CALL_OW 47
// end ;
45657: GO 45601
45659: POP
45660: POP
// end ; if mpBattleFlag > - 1 then
45661: LD_EXP 20
45665: PUSH
45666: LD_INT 1
45668: NEG
45669: GREATER
45670: IFFALSE 45829
// begin x := mpStartPos [ pos ] [ 1 ] ;
45672: LD_ADDR_VAR 0 5
45676: PUSH
45677: LD_EXP 19
45681: PUSH
45682: LD_VAR 0 8
45686: ARRAY
45687: PUSH
45688: LD_INT 1
45690: ARRAY
45691: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
45692: LD_ADDR_VAR 0 6
45696: PUSH
45697: LD_EXP 19
45701: PUSH
45702: LD_VAR 0 8
45706: ARRAY
45707: PUSH
45708: LD_INT 2
45710: ARRAY
45711: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
45712: LD_VAR 0 5
45716: PPUSH
45717: LD_VAR 0 6
45721: PPUSH
45722: LD_INT 12
45724: PPUSH
45725: LD_INT 2
45727: PPUSH
45728: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
45732: LD_ADDR_EXP 21
45736: PUSH
45737: LD_EXP 21
45741: PPUSH
45742: LD_VAR 0 7
45746: PPUSH
45747: LD_VAR 0 7
45751: PPUSH
45752: LD_VAR 0 5
45756: PPUSH
45757: LD_VAR 0 6
45761: PPUSH
45762: LD_INT 1
45764: PUSH
45765: LD_INT 100
45767: PUSH
45768: EMPTY
45769: LIST
45770: LIST
45771: PUSH
45772: LD_INT 2
45774: PUSH
45775: LD_INT 70
45777: PUSH
45778: EMPTY
45779: LIST
45780: LIST
45781: PUSH
45782: LD_INT 3
45784: PUSH
45785: LD_INT 40
45787: PUSH
45788: EMPTY
45789: LIST
45790: LIST
45791: PUSH
45792: LD_INT 10
45794: PUSH
45795: LD_INT 25
45797: PUSH
45798: EMPTY
45799: LIST
45800: LIST
45801: PUSH
45802: LD_INT 20
45804: PUSH
45805: LD_INT 100
45807: PUSH
45808: EMPTY
45809: LIST
45810: LIST
45811: PUSH
45812: EMPTY
45813: LIST
45814: LIST
45815: LIST
45816: LIST
45817: LIST
45818: PPUSH
45819: CALL_OW 418
45823: PPUSH
45824: CALL_OW 1
45828: ST_TO_ADDR
// end ; if mpApemans then
45829: LD_EXP 28
45833: IFFALSE 45912
// begin for j := 1 to mpApemans do
45835: LD_ADDR_VAR 0 3
45839: PUSH
45840: DOUBLE
45841: LD_INT 1
45843: DEC
45844: ST_TO_ADDR
45845: LD_EXP 28
45849: PUSH
45850: FOR_TO
45851: IFFALSE 45910
// begin PrepareApeman ( - 5 ) ;
45853: LD_INT 5
45855: NEG
45856: PPUSH
45857: CALL 36173 0 1
// ape := CreateHuman ;
45861: LD_ADDR_VAR 0 10
45865: PUSH
45866: CALL_OW 44
45870: ST_TO_ADDR
// SetTag ( ape , side ) ;
45871: LD_VAR 0 10
45875: PPUSH
45876: LD_VAR 0 7
45880: PPUSH
45881: CALL_OW 109
// PlaceUnitArea ( ape , mpApemansArea [ side ] , false ) ;
45885: LD_VAR 0 10
45889: PPUSH
45890: LD_EXP 29
45894: PUSH
45895: LD_VAR 0 7
45899: ARRAY
45900: PPUSH
45901: LD_INT 0
45903: PPUSH
45904: CALL_OW 49
// end ;
45908: GO 45850
45910: POP
45911: POP
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
45912: LD_EXP 24
45916: PUSH
45917: LD_INT 20
45919: PPUSH
45920: LD_VAR 0 7
45924: PPUSH
45925: CALL_OW 321
45929: PUSH
45930: LD_INT 1
45932: EQUAL
45933: AND
45934: IFFALSE 45951
// SetTech ( tech_SibDet , side , state_researched ) ;
45936: LD_INT 20
45938: PPUSH
45939: LD_VAR 0 7
45943: PPUSH
45944: LD_INT 2
45946: PPUSH
45947: CALL_OW 322
// SetTech ( tech_artifact , side , state_disabled ) ;
45951: LD_INT 24
45953: PPUSH
45954: LD_VAR 0 7
45958: PPUSH
45959: LD_INT 0
45961: PPUSH
45962: CALL_OW 322
// if mpSibBomb = 1 then
45966: LD_EXP 26
45970: PUSH
45971: LD_INT 1
45973: EQUAL
45974: IFFALSE 45993
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
45976: LD_INT 25
45978: PPUSH
45979: LD_VAR 0 7
45983: PPUSH
45984: LD_INT 1
45986: PPUSH
45987: CALL_OW 322
// end else
45991: GO 46008
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
45993: LD_INT 25
45995: PPUSH
45996: LD_VAR 0 7
46000: PPUSH
46001: LD_INT 0
46003: PPUSH
46004: CALL_OW 322
// end ; team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
46008: LD_ADDR_VAR 0 11
46012: PUSH
46013: LD_VAR 0 7
46017: PPUSH
46018: LD_VAR 0 9
46022: PPUSH
46023: LD_EXP 22
46027: PPUSH
46028: LD_EXP 23
46032: PPUSH
46033: CALL 46514 0 4
46037: ST_TO_ADDR
// for j in team do
46038: LD_ADDR_VAR 0 3
46042: PUSH
46043: LD_VAR 0 11
46047: PUSH
46048: FOR_IN
46049: IFFALSE 46098
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 9 , false ) ;
46051: LD_VAR 0 3
46055: PPUSH
46056: LD_EXP 19
46060: PUSH
46061: LD_VAR 0 8
46065: ARRAY
46066: PUSH
46067: LD_INT 1
46069: ARRAY
46070: PPUSH
46071: LD_EXP 19
46075: PUSH
46076: LD_VAR 0 8
46080: ARRAY
46081: PUSH
46082: LD_INT 2
46084: ARRAY
46085: PPUSH
46086: LD_INT 9
46088: PPUSH
46089: LD_INT 0
46091: PPUSH
46092: CALL_OW 50
46096: GO 46048
46098: POP
46099: POP
// end ;
46100: GO 45002
46102: POP
46103: POP
// if not mpTeamGame then
46104: LD_EXP 9
46108: NOT
46109: IFFALSE 46207
// begin for i := 1 to 8 do
46111: LD_ADDR_VAR 0 2
46115: PUSH
46116: DOUBLE
46117: LD_INT 1
46119: DEC
46120: ST_TO_ADDR
46121: LD_INT 8
46123: PUSH
46124: FOR_TO
46125: IFFALSE 46203
// for j := 1 to 8 do
46127: LD_ADDR_VAR 0 3
46131: PUSH
46132: DOUBLE
46133: LD_INT 1
46135: DEC
46136: ST_TO_ADDR
46137: LD_INT 8
46139: PUSH
46140: FOR_TO
46141: IFFALSE 46199
// if i <> j then
46143: LD_VAR 0 2
46147: PUSH
46148: LD_VAR 0 3
46152: NONEQUAL
46153: IFFALSE 46177
// SetAttitude ( i , j , att_neutral , true ) else
46155: LD_VAR 0 2
46159: PPUSH
46160: LD_VAR 0 3
46164: PPUSH
46165: LD_INT 0
46167: PPUSH
46168: LD_INT 1
46170: PPUSH
46171: CALL_OW 80
46175: GO 46197
// SetAttitude ( i , j , att_friend , true ) ;
46177: LD_VAR 0 2
46181: PPUSH
46182: LD_VAR 0 3
46186: PPUSH
46187: LD_INT 1
46189: PPUSH
46190: LD_INT 1
46192: PPUSH
46193: CALL_OW 80
46197: GO 46140
46199: POP
46200: POP
46201: GO 46124
46203: POP
46204: POP
// end else
46205: GO 46276
// begin if mpSharedVision then
46207: LD_EXP 14
46211: IFFALSE 46276
// begin for i in mpTeams do
46213: LD_ADDR_VAR 0 2
46217: PUSH
46218: LD_EXP 8
46222: PUSH
46223: FOR_IN
46224: IFFALSE 46274
// for j := 2 to i do
46226: LD_ADDR_VAR 0 3
46230: PUSH
46231: DOUBLE
46232: LD_INT 2
46234: DEC
46235: ST_TO_ADDR
46236: LD_VAR 0 2
46240: PUSH
46241: FOR_TO
46242: IFFALSE 46270
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
46244: LD_VAR 0 2
46248: PUSH
46249: LD_VAR 0 3
46253: ARRAY
46254: PPUSH
46255: LD_VAR 0 2
46259: PUSH
46260: LD_INT 1
46262: ARRAY
46263: PPUSH
46264: CALL_OW 343
46268: GO 46241
46270: POP
46271: POP
46272: GO 46223
46274: POP
46275: POP
// end ; end ; for i := 1 to 8 do
46276: LD_ADDR_VAR 0 2
46280: PUSH
46281: DOUBLE
46282: LD_INT 1
46284: DEC
46285: ST_TO_ADDR
46286: LD_INT 8
46288: PUSH
46289: FOR_TO
46290: IFFALSE 46380
// for j := 1 to 8 do
46292: LD_ADDR_VAR 0 3
46296: PUSH
46297: DOUBLE
46298: LD_INT 1
46300: DEC
46301: ST_TO_ADDR
46302: LD_INT 8
46304: PUSH
46305: FOR_TO
46306: IFFALSE 46376
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
46308: LD_EXP 6
46312: PUSH
46313: LD_VAR 0 2
46317: ARRAY
46318: PUSH
46319: LD_EXP 6
46323: PUSH
46324: LD_VAR 0 3
46328: ARRAY
46329: EQUAL
46330: IFFALSE 46354
// SetAttitude ( i , j , att_friend , true ) else
46332: LD_VAR 0 2
46336: PPUSH
46337: LD_VAR 0 3
46341: PPUSH
46342: LD_INT 1
46344: PPUSH
46345: LD_INT 1
46347: PPUSH
46348: CALL_OW 80
46352: GO 46374
// SetAttitude ( i , j , att_enemy , true ) ;
46354: LD_VAR 0 2
46358: PPUSH
46359: LD_VAR 0 3
46363: PPUSH
46364: LD_INT 2
46366: PPUSH
46367: LD_INT 1
46369: PPUSH
46370: CALL_OW 80
46374: GO 46305
46376: POP
46377: POP
46378: GO 46289
46380: POP
46381: POP
// music_nat := mpSideNations [ your_side ] ;
46382: LD_ADDR_OWVAR 71
46386: PUSH
46387: LD_EXP 7
46391: PUSH
46392: LD_OWVAR 2
46396: ARRAY
46397: ST_TO_ADDR
// if IAmSpec then
46398: CALL_OW 531
46402: IFFALSE 46443
// begin FogOff ( true ) ;
46404: LD_INT 1
46406: PPUSH
46407: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
46411: LD_EXP 27
46415: PUSH
46416: LD_INT 1
46418: ARRAY
46419: PUSH
46420: LD_INT 2
46422: DIV
46423: PPUSH
46424: LD_EXP 27
46428: PUSH
46429: LD_INT 2
46431: ARRAY
46432: PUSH
46433: LD_INT 2
46435: DIV
46436: PPUSH
46437: CALL_OW 86
// end else
46441: GO 46489
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
46443: LD_EXP 19
46447: PUSH
46448: LD_EXP 5
46452: PUSH
46453: LD_OWVAR 2
46457: ARRAY
46458: ARRAY
46459: PUSH
46460: LD_INT 1
46462: ARRAY
46463: PPUSH
46464: LD_EXP 19
46468: PUSH
46469: LD_EXP 5
46473: PUSH
46474: LD_OWVAR 2
46478: ARRAY
46479: ARRAY
46480: PUSH
46481: LD_INT 2
46483: ARRAY
46484: PPUSH
46485: CALL_OW 86
// end ; BeginBuildUp ;
46489: CALL 47053 0 0
// enable ( mpActive ) ;
46493: LD_INT 100
46495: ENABLE_MARKED
// enable ( mpGameType ) ;
46496: LD_EXP 1
46500: ENABLE_MARKED
// mpGameActive := true ;
46501: LD_ADDR_EXP 34
46505: PUSH
46506: LD_INT 1
46508: ST_TO_ADDR
// end ;
46509: LD_VAR 0 1
46513: RET
// function mpPrepareTeam ( side , nation , amount , skill ) ; var i , d , class ; begin
46514: LD_INT 0
46516: PPUSH
46517: PPUSH
46518: PPUSH
46519: PPUSH
// result := [ ] ;
46520: LD_ADDR_VAR 0 5
46524: PUSH
46525: EMPTY
46526: ST_TO_ADDR
// class := class_soldier ;
46527: LD_ADDR_VAR 0 8
46531: PUSH
46532: LD_INT 1
46534: ST_TO_ADDR
// uc_side := side ;
46535: LD_ADDR_OWVAR 20
46539: PUSH
46540: LD_VAR 0 1
46544: ST_TO_ADDR
// uc_nation := nation ;
46545: LD_ADDR_OWVAR 21
46549: PUSH
46550: LD_VAR 0 2
46554: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
46555: LD_ADDR_OWVAR 26
46559: PUSH
46560: LD_OWVAR 19
46564: PUSH
46565: LD_VAR 0 1
46569: ARRAY
46570: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
46571: LD_INT 1
46573: PPUSH
46574: LD_INT 2
46576: PPUSH
46577: CALL_OW 12
46581: PPUSH
46582: LD_VAR 0 8
46586: PPUSH
46587: LD_VAR 0 4
46591: PUSH
46592: LD_INT 2
46594: PLUS
46595: PPUSH
46596: CALL_OW 380
// hc_importance := 105 ;
46600: LD_ADDR_OWVAR 32
46604: PUSH
46605: LD_INT 105
46607: ST_TO_ADDR
// if Multiplayer then
46608: LD_OWVAR 4
46612: IFFALSE 46652
// begin hc_gallery := MULTIAVATARS ;
46614: LD_ADDR_OWVAR 33
46618: PUSH
46619: LD_STRING MULTIAVATARS
46621: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
46622: LD_ADDR_OWVAR 34
46626: PUSH
46627: LD_VAR 0 1
46631: PPUSH
46632: CALL_OW 525
46636: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
46637: LD_ADDR_OWVAR 27
46641: PUSH
46642: LD_VAR 0 1
46646: PPUSH
46647: CALL_OW 526
46651: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
46652: LD_ADDR_VAR 0 5
46656: PUSH
46657: LD_VAR 0 5
46661: PPUSH
46662: CALL_OW 44
46666: PPUSH
46667: CALL 39905 0 2
46671: ST_TO_ADDR
// InitHc_All ( ) ;
46672: CALL_OW 584
// d := ( amount div 4 ) + 1 ;
46676: LD_ADDR_VAR 0 7
46680: PUSH
46681: LD_VAR 0 3
46685: PUSH
46686: LD_INT 4
46688: DIV
46689: PUSH
46690: LD_INT 1
46692: PLUS
46693: ST_TO_ADDR
// for i := 2 to amount do
46694: LD_ADDR_VAR 0 6
46698: PUSH
46699: DOUBLE
46700: LD_INT 2
46702: DEC
46703: ST_TO_ADDR
46704: LD_VAR 0 3
46708: PUSH
46709: FOR_TO
46710: IFFALSE 46782
// begin if i mod d = 0 then
46712: LD_VAR 0 6
46716: PUSH
46717: LD_VAR 0 7
46721: MOD
46722: PUSH
46723: LD_INT 0
46725: EQUAL
46726: IFFALSE 46743
// class := Inc ( class ) ;
46728: LD_ADDR_VAR 0 8
46732: PUSH
46733: LD_VAR 0 8
46737: PPUSH
46738: CALL 41266 0 1
46742: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
46743: LD_INT 0
46745: PPUSH
46746: LD_VAR 0 8
46750: PPUSH
46751: LD_VAR 0 4
46755: PPUSH
46756: CALL_OW 380
// result := Join ( result , CreateHuman ) ;
46760: LD_ADDR_VAR 0 5
46764: PUSH
46765: LD_VAR 0 5
46769: PPUSH
46770: CALL_OW 44
46774: PPUSH
46775: CALL 39905 0 2
46779: ST_TO_ADDR
// end ;
46780: GO 46709
46782: POP
46783: POP
// end ;
46784: LD_VAR 0 5
46788: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
46789: LD_INT 0
46791: PPUSH
46792: PPUSH
// for i in mpBattleFlags do
46793: LD_ADDR_VAR 0 3
46797: PUSH
46798: LD_EXP 21
46802: PUSH
46803: FOR_IN
46804: IFFALSE 46881
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
46806: LD_VAR 0 3
46810: PPUSH
46811: LD_INT 1
46813: PUSH
46814: LD_VAR 0 1
46818: PUSH
46819: EMPTY
46820: LIST
46821: LIST
46822: PUSH
46823: LD_INT 2
46825: PUSH
46826: LD_VAR 0 1
46830: PUSH
46831: LD_REAL  7.00000000000000E-0001
46834: MUL
46835: PUSH
46836: EMPTY
46837: LIST
46838: LIST
46839: PUSH
46840: LD_INT 3
46842: PUSH
46843: LD_VAR 0 1
46847: PUSH
46848: LD_REAL  4.00000000000000E-0001
46851: MUL
46852: PUSH
46853: EMPTY
46854: LIST
46855: LIST
46856: PUSH
46857: LD_INT 20
46859: PUSH
46860: LD_VAR 0 1
46864: PUSH
46865: EMPTY
46866: LIST
46867: LIST
46868: PUSH
46869: EMPTY
46870: LIST
46871: LIST
46872: LIST
46873: LIST
46874: PPUSH
46875: CALL_OW 423
46879: GO 46803
46881: POP
46882: POP
// end ;
46883: LD_VAR 0 2
46887: RET
// every 0 0$1 trigger mpActive do var i , strength ;
46888: LD_INT 100
46890: IFFALSE 46985
46892: GO 46894
46894: DISABLE
46895: LD_INT 0
46897: PPUSH
46898: PPUSH
// begin if mpBattleFlag <= 0 then
46899: LD_EXP 20
46903: PUSH
46904: LD_INT 0
46906: LESSEQUAL
46907: IFFALSE 46911
// exit ;
46909: GO 46985
// strength := 100 ;
46911: LD_ADDR_VAR 0 2
46915: PUSH
46916: LD_INT 100
46918: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
46919: LD_EXP 20
46923: PPUSH
46924: CALL_OW 67
// strength := Dec ( strength ) ;
46928: LD_ADDR_VAR 0 2
46932: PUSH
46933: LD_VAR 0 2
46937: PPUSH
46938: CALL 41288 0 1
46942: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
46943: LD_VAR 0 2
46947: PPUSH
46948: CALL 46789 0 1
// until not strength ;
46952: LD_VAR 0 2
46956: NOT
46957: IFFALSE 46919
// for i in mpBattleFlags do
46959: LD_ADDR_VAR 0 1
46963: PUSH
46964: LD_EXP 21
46968: PUSH
46969: FOR_IN
46970: IFFALSE 46983
// KillBattleFlag ( i ) ;
46972: LD_VAR 0 1
46976: PPUSH
46977: CALL_OW 419
46981: GO 46969
46983: POP
46984: POP
// end ;
46985: PPOPN 2
46987: END
// every 0 0$1 marked mpActive do var side ;
46988: GO 46990
46990: DISABLE
46991: LD_INT 0
46993: PPUSH
// begin if mpSibBomb <= 1 then
46994: LD_EXP 26
46998: PUSH
46999: LD_INT 1
47001: LESSEQUAL
47002: IFFALSE 47006
// exit ;
47004: GO 47050
// wait ( mpSibBomb ) ;
47006: LD_EXP 26
47010: PPUSH
47011: CALL_OW 67
// for side := 1 to 8 do
47015: LD_ADDR_VAR 0 1
47019: PUSH
47020: DOUBLE
47021: LD_INT 1
47023: DEC
47024: ST_TO_ADDR
47025: LD_INT 8
47027: PUSH
47028: FOR_TO
47029: IFFALSE 47048
// SetTech ( tech_SibFiss , side , state_enabled ) ;
47031: LD_INT 25
47033: PPUSH
47034: LD_VAR 0 1
47038: PPUSH
47039: LD_INT 1
47041: PPUSH
47042: CALL_OW 322
47046: GO 47028
47048: POP
47049: POP
// end ;
47050: PPOPN 1
47052: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
47053: LD_INT 0
47055: PPUSH
47056: PPUSH
47057: PPUSH
// mpBuildUpTimeDelay := 0 ;
47058: LD_ADDR_EXP 35
47062: PUSH
47063: LD_INT 0
47065: ST_TO_ADDR
// if not mpBuildUpTime then
47066: LD_EXP 18
47070: NOT
47071: IFFALSE 47075
// exit ;
47073: GO 47258
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
47075: LD_ADDR_EXP 35
47079: PUSH
47080: LD_INT 8400
47082: PUSH
47083: LD_INT 2100
47085: PUSH
47086: LD_EXP 18
47090: MUL
47091: PLUS
47092: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
47093: LD_ADDR_EXP 36
47097: PUSH
47098: LD_INT 1
47100: ST_TO_ADDR
// for i := 1 to 8 do
47101: LD_ADDR_VAR 0 2
47105: PUSH
47106: DOUBLE
47107: LD_INT 1
47109: DEC
47110: ST_TO_ADDR
47111: LD_INT 8
47113: PUSH
47114: FOR_TO
47115: IFFALSE 47256
// if mpSidePositions [ i ] then
47117: LD_EXP 5
47121: PUSH
47122: LD_VAR 0 2
47126: ARRAY
47127: IFFALSE 47254
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
47129: LD_EXP 17
47133: PUSH
47134: LD_EXP 5
47138: PUSH
47139: LD_VAR 0 2
47143: ARRAY
47144: ARRAY
47145: PPUSH
47146: LD_INT 5
47148: PPUSH
47149: CALL_OW 424
// for j := 1 to 8 do
47153: LD_ADDR_VAR 0 3
47157: PUSH
47158: DOUBLE
47159: LD_INT 1
47161: DEC
47162: ST_TO_ADDR
47163: LD_INT 8
47165: PUSH
47166: FOR_TO
47167: IFFALSE 47252
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
47169: LD_EXP 5
47173: PUSH
47174: LD_VAR 0 3
47178: ARRAY
47179: PUSH
47180: LD_EXP 6
47184: PUSH
47185: LD_VAR 0 2
47189: ARRAY
47190: PUSH
47191: LD_EXP 6
47195: PUSH
47196: LD_VAR 0 3
47200: ARRAY
47201: NONEQUAL
47202: PUSH
47203: LD_EXP 9
47207: NOT
47208: PUSH
47209: LD_VAR 0 2
47213: PUSH
47214: LD_VAR 0 3
47218: NONEQUAL
47219: AND
47220: OR
47221: AND
47222: IFFALSE 47250
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
47224: LD_VAR 0 3
47228: PPUSH
47229: LD_EXP 17
47233: PUSH
47234: LD_EXP 5
47238: PUSH
47239: LD_VAR 0 2
47243: ARRAY
47244: ARRAY
47245: PPUSH
47246: CALL_OW 333
47250: GO 47166
47252: POP
47253: POP
// end ;
47254: GO 47114
47256: POP
47257: POP
// end ;
47258: LD_VAR 0 1
47262: RET
// function EndBuildUp ; var i , j ; begin
47263: LD_INT 0
47265: PPUSH
47266: PPUSH
47267: PPUSH
// mpBuildUpTimeActive := false ;
47268: LD_ADDR_EXP 36
47272: PUSH
47273: LD_INT 0
47275: ST_TO_ADDR
// for i := 1 to 8 do
47276: LD_ADDR_VAR 0 2
47280: PUSH
47281: DOUBLE
47282: LD_INT 1
47284: DEC
47285: ST_TO_ADDR
47286: LD_INT 8
47288: PUSH
47289: FOR_TO
47290: IFFALSE 47431
// if mpSidePositions [ i ] then
47292: LD_EXP 5
47296: PUSH
47297: LD_VAR 0 2
47301: ARRAY
47302: IFFALSE 47429
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
47304: LD_EXP 17
47308: PUSH
47309: LD_EXP 5
47313: PUSH
47314: LD_VAR 0 2
47318: ARRAY
47319: ARRAY
47320: PPUSH
47321: LD_INT 0
47323: PPUSH
47324: CALL_OW 424
// for j := 1 to 8 do
47328: LD_ADDR_VAR 0 3
47332: PUSH
47333: DOUBLE
47334: LD_INT 1
47336: DEC
47337: ST_TO_ADDR
47338: LD_INT 8
47340: PUSH
47341: FOR_TO
47342: IFFALSE 47427
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
47344: LD_EXP 5
47348: PUSH
47349: LD_VAR 0 3
47353: ARRAY
47354: PUSH
47355: LD_EXP 6
47359: PUSH
47360: LD_VAR 0 2
47364: ARRAY
47365: PUSH
47366: LD_EXP 6
47370: PUSH
47371: LD_VAR 0 3
47375: ARRAY
47376: NONEQUAL
47377: PUSH
47378: LD_EXP 9
47382: NOT
47383: PUSH
47384: LD_VAR 0 2
47388: PUSH
47389: LD_VAR 0 3
47393: NONEQUAL
47394: AND
47395: OR
47396: AND
47397: IFFALSE 47425
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
47399: LD_VAR 0 3
47403: PPUSH
47404: LD_EXP 17
47408: PUSH
47409: LD_EXP 5
47413: PUSH
47414: LD_VAR 0 2
47418: ARRAY
47419: ARRAY
47420: PPUSH
47421: CALL_OW 334
47425: GO 47341
47427: POP
47428: POP
// end ;
47429: GO 47289
47431: POP
47432: POP
// end ;
47433: LD_VAR 0 1
47437: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
47438: LD_EXP 36
47442: IFFALSE 47617
47444: GO 47446
47446: DISABLE
47447: LD_INT 0
47449: PPUSH
47450: PPUSH
// begin for i := 1 to 8 do
47451: LD_ADDR_VAR 0 1
47455: PUSH
47456: DOUBLE
47457: LD_INT 1
47459: DEC
47460: ST_TO_ADDR
47461: LD_INT 8
47463: PUSH
47464: FOR_TO
47465: IFFALSE 47614
// if mpSidePositions [ i ] then
47467: LD_EXP 5
47471: PUSH
47472: LD_VAR 0 1
47476: ARRAY
47477: IFFALSE 47612
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
47479: LD_ADDR_VAR 0 2
47483: PUSH
47484: LD_EXP 17
47488: PUSH
47489: LD_EXP 5
47493: PUSH
47494: LD_VAR 0 1
47498: ARRAY
47499: ARRAY
47500: PPUSH
47501: LD_INT 2
47503: PUSH
47504: LD_INT 21
47506: PUSH
47507: LD_INT 1
47509: PUSH
47510: EMPTY
47511: LIST
47512: LIST
47513: PUSH
47514: LD_INT 21
47516: PUSH
47517: LD_INT 2
47519: PUSH
47520: EMPTY
47521: LIST
47522: LIST
47523: PUSH
47524: EMPTY
47525: LIST
47526: LIST
47527: LIST
47528: PUSH
47529: LD_INT 22
47531: PUSH
47532: LD_OWVAR 2
47536: PUSH
47537: EMPTY
47538: LIST
47539: LIST
47540: PUSH
47541: EMPTY
47542: LIST
47543: LIST
47544: PPUSH
47545: CALL_OW 70
47549: PUSH
47550: FOR_IN
47551: IFFALSE 47610
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
47553: LD_EXP 6
47557: PUSH
47558: LD_VAR 0 1
47562: ARRAY
47563: PUSH
47564: LD_EXP 6
47568: PUSH
47569: LD_OWVAR 2
47573: ARRAY
47574: NONEQUAL
47575: PUSH
47576: LD_EXP 9
47580: NOT
47581: PUSH
47582: LD_VAR 0 1
47586: PUSH
47587: LD_OWVAR 2
47591: NONEQUAL
47592: AND
47593: OR
47594: IFFALSE 47608
// ComMoveToArea ( un , BuildUpEscape ) ;
47596: LD_VAR 0 2
47600: PPUSH
47601: LD_INT 17
47603: PPUSH
47604: CALL_OW 113
47608: GO 47550
47610: POP
47611: POP
47612: GO 47464
47614: POP
47615: POP
// enable ;
47616: ENABLE
// end ;
47617: PPOPN 2
47619: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do
47620: LD_EXP 18
47624: IFFALSE 47650
47626: GO 47628
47628: DISABLE
// begin wait ( 4 4$00 + ( mpBuildUpTime * 1 1$00 ) ) ;
47629: LD_INT 8400
47631: PUSH
47632: LD_EXP 18
47636: PUSH
47637: LD_INT 2100
47639: MUL
47640: PLUS
47641: PPUSH
47642: CALL_OW 67
// EndBuildUp ;
47646: CALL 47263 0 0
// end ;
47650: END
// every 0 0$1 trigger mpActive marked mpWin do
47651: LD_INT 100
47653: IFFALSE 47674
47655: GO 47657
47657: DISABLE
// begin if Multiplayer then
47658: LD_OWVAR 4
47662: IFFALSE 47670
// YouWinInMultiplayer else
47664: CALL_OW 106
47668: GO 47674
// YouWin ;
47670: CALL_OW 103
// end ;
47674: END
// every 0 0$1 trigger mpActive marked mpLose do
47675: LD_INT 100
47677: IFFALSE 47701
47679: GO 47681
47681: DISABLE
// begin if Multiplayer then
47682: LD_OWVAR 4
47686: IFFALSE 47694
// YouLostInMultiplayer else
47688: CALL_OW 107
47692: GO 47701
// YouLost (  ) ;
47694: LD_STRING 
47696: PPUSH
47697: CALL_OW 104
// end ;
47701: END
// every 0 0$1 marked mpActive do
47702: GO 47704
47704: DISABLE
// begin enable ;
47705: ENABLE
// if not mpDisplayStrings then
47706: LD_EXP 33
47710: NOT
47711: IFFALSE 47722
// begin display_strings := [ ] ;
47713: LD_ADDR_OWVAR 47
47717: PUSH
47718: EMPTY
47719: ST_TO_ADDR
// exit ;
47720: GO 47732
// end ; display_strings := mpDisplayStrings ;
47722: LD_ADDR_OWVAR 47
47726: PUSH
47727: LD_EXP 33
47731: ST_TO_ADDR
// end ; end_of_file
47732: END
// export function Multiplayer_UnitDestroyed ( un ) ; var ape , tag , area , side , tmp ; begin
47733: LD_INT 0
47735: PPUSH
47736: PPUSH
47737: PPUSH
47738: PPUSH
47739: PPUSH
47740: PPUSH
// if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
47741: LD_VAR 0 1
47745: PPUSH
47746: CALL_OW 257
47750: PUSH
47751: LD_INT 12
47753: PUSH
47754: LD_INT 17
47756: PUSH
47757: LD_INT 15
47759: PUSH
47760: LD_INT 16
47762: PUSH
47763: EMPTY
47764: LIST
47765: LIST
47766: LIST
47767: LIST
47768: IN
47769: PUSH
47770: LD_VAR 0 1
47774: PPUSH
47775: CALL_OW 263
47779: PUSH
47780: LD_INT 5
47782: EQUAL
47783: OR
47784: IFFALSE 47873
// begin tag := GetTag ( un ) ;
47786: LD_ADDR_VAR 0 4
47790: PUSH
47791: LD_VAR 0 1
47795: PPUSH
47796: CALL_OW 110
47800: ST_TO_ADDR
// area := mpApemansArea [ tag ] ;
47801: LD_ADDR_VAR 0 5
47805: PUSH
47806: LD_EXP 29
47810: PUSH
47811: LD_VAR 0 4
47815: ARRAY
47816: ST_TO_ADDR
// wait ( 4 4$00 ) ;
47817: LD_INT 8400
47819: PPUSH
47820: CALL_OW 67
// PrepareApeman ( - 5 ) ;
47824: LD_INT 5
47826: NEG
47827: PPUSH
47828: CALL 36173 0 1
// ape := CreateHuman ;
47832: LD_ADDR_VAR 0 3
47836: PUSH
47837: CALL_OW 44
47841: ST_TO_ADDR
// SetTag ( ape , tag ) ;
47842: LD_VAR 0 3
47846: PPUSH
47847: LD_VAR 0 4
47851: PPUSH
47852: CALL_OW 109
// PlaceUnitArea ( ape , area , false ) ;
47856: LD_VAR 0 3
47860: PPUSH
47861: LD_VAR 0 5
47865: PPUSH
47866: LD_INT 0
47868: PPUSH
47869: CALL_OW 49
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
47873: LD_VAR 0 1
47877: PPUSH
47878: CALL_OW 247
47882: PUSH
47883: LD_INT 1
47885: EQUAL
47886: PUSH
47887: LD_VAR 0 1
47891: PPUSH
47892: CALL_OW 248
47896: PUSH
47897: LD_INT 0
47899: GREATER
47900: AND
47901: IFFALSE 48120
// begin if not mpRespawn then
47903: LD_EXP 30
47907: NOT
47908: IFFALSE 47912
// exit ;
47910: GO 48120
// side := GetSide ( un ) ;
47912: LD_ADDR_VAR 0 6
47916: PUSH
47917: LD_VAR 0 1
47921: PPUSH
47922: CALL_OW 255
47926: ST_TO_ADDR
// wait ( mpRespawn ) ;
47927: LD_EXP 30
47931: PPUSH
47932: CALL_OW 67
// if not MultiplayerSideAlive ( side ) then
47936: LD_VAR 0 6
47940: PPUSH
47941: CALL_OW 108
47945: NOT
47946: IFFALSE 47950
// exit ;
47948: GO 48120
// uc_side := side ;
47950: LD_ADDR_OWVAR 20
47954: PUSH
47955: LD_VAR 0 6
47959: ST_TO_ADDR
// uc_nation := GetNation ( un ) ;
47960: LD_ADDR_OWVAR 21
47964: PUSH
47965: LD_VAR 0 1
47969: PPUSH
47970: CALL_OW 248
47974: ST_TO_ADDR
// PrepareHuman ( GetSex ( un ) , GetClass ( un ) , 2 ) ;
47975: LD_VAR 0 1
47979: PPUSH
47980: CALL_OW 258
47984: PPUSH
47985: LD_VAR 0 1
47989: PPUSH
47990: CALL_OW 257
47994: PPUSH
47995: LD_INT 2
47997: PPUSH
47998: CALL_OW 380
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
48002: LD_ADDR_VAR 0 7
48006: PUSH
48007: LD_INT 22
48009: PUSH
48010: LD_VAR 0 6
48014: PUSH
48015: EMPTY
48016: LIST
48017: LIST
48018: PUSH
48019: LD_INT 2
48021: PUSH
48022: LD_INT 30
48024: PUSH
48025: LD_INT 0
48027: PUSH
48028: EMPTY
48029: LIST
48030: LIST
48031: PUSH
48032: LD_INT 30
48034: PUSH
48035: LD_INT 1
48037: PUSH
48038: EMPTY
48039: LIST
48040: LIST
48041: PUSH
48042: EMPTY
48043: LIST
48044: LIST
48045: LIST
48046: PUSH
48047: EMPTY
48048: LIST
48049: LIST
48050: PPUSH
48051: CALL_OW 69
48055: ST_TO_ADDR
// if not tmp then
48056: LD_VAR 0 7
48060: NOT
48061: IFFALSE 48077
// PlaceUnitAnywhere ( CreateHuman , true ) else
48063: CALL_OW 44
48067: PPUSH
48068: LD_INT 1
48070: PPUSH
48071: CALL_OW 51
48075: GO 48120
// PlaceUnitXYR ( CreateHuman , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 20 , true ) ;
48077: CALL_OW 44
48081: PPUSH
48082: LD_VAR 0 7
48086: PUSH
48087: LD_INT 1
48089: ARRAY
48090: PPUSH
48091: CALL_OW 250
48095: PPUSH
48096: LD_VAR 0 7
48100: PUSH
48101: LD_INT 1
48103: ARRAY
48104: PPUSH
48105: CALL_OW 251
48109: PPUSH
48110: LD_INT 20
48112: PPUSH
48113: LD_INT 1
48115: PPUSH
48116: CALL_OW 50
// end ; end ; end_of_file
48120: LD_VAR 0 2
48124: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
48125: LD_EXP 34
48129: PUSH
48130: CALL 48315 0 0
48134: AND
48135: PUSH
48136: LD_OWVAR 4
48140: AND
48141: IFFALSE 48312
48143: GO 48145
48145: DISABLE
48146: LD_INT 0
48148: PPUSH
48149: PPUSH
// begin canWin := false ;
48150: LD_ADDR_VAR 0 2
48154: PUSH
48155: LD_INT 0
48157: ST_TO_ADDR
// if not HasPower ( your_side ) then
48158: LD_OWVAR 2
48162: PPUSH
48163: CALL 48379 0 1
48167: NOT
48168: IFFALSE 48179
// begin Multiplayer_Loose_Message ;
48170: CALL_OW 521
// enable ( mpLose ) ;
48174: LD_INT 102
48176: ENABLE_MARKED
// end else
48177: GO 48312
// begin canWin := true ;
48179: LD_ADDR_VAR 0 2
48183: PUSH
48184: LD_INT 1
48186: ST_TO_ADDR
// for i := 1 to 8 do
48187: LD_ADDR_VAR 0 1
48191: PUSH
48192: DOUBLE
48193: LD_INT 1
48195: DEC
48196: ST_TO_ADDR
48197: LD_INT 8
48199: PUSH
48200: FOR_TO
48201: IFFALSE 48298
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
48203: LD_EXP 5
48207: PUSH
48208: LD_VAR 0 1
48212: ARRAY
48213: PUSH
48214: LD_VAR 0 1
48218: PPUSH
48219: CALL_OW 108
48223: AND
48224: PUSH
48225: LD_VAR 0 1
48229: PUSH
48230: LD_OWVAR 2
48234: NONEQUAL
48235: AND
48236: IFFALSE 48296
// if not mpSideTeams [ i ] or ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) then
48238: LD_EXP 6
48242: PUSH
48243: LD_VAR 0 1
48247: ARRAY
48248: NOT
48249: PUSH
48250: LD_EXP 6
48254: PUSH
48255: LD_VAR 0 1
48259: ARRAY
48260: PUSH
48261: LD_EXP 6
48265: PUSH
48266: LD_OWVAR 2
48270: ARRAY
48271: NONEQUAL
48272: OR
48273: IFFALSE 48296
// if HasPower ( i ) then
48275: LD_VAR 0 1
48279: PPUSH
48280: CALL 48379 0 1
48284: IFFALSE 48296
// begin canWin := false ;
48286: LD_ADDR_VAR 0 2
48290: PUSH
48291: LD_INT 0
48293: ST_TO_ADDR
// break ;
48294: GO 48298
// end ;
48296: GO 48200
48298: POP
48299: POP
// if canWin then
48300: LD_VAR 0 2
48304: IFFALSE 48311
// enable ( mpWin ) else
48306: LD_INT 101
48308: ENABLE_MARKED
48309: GO 48312
// enable ;
48311: ENABLE
// end ; end ;
48312: PPOPN 2
48314: END
// function CanWinLoose ; begin
48315: LD_INT 0
48317: PPUSH
// result := true ;
48318: LD_ADDR_VAR 0 1
48322: PUSH
48323: LD_INT 1
48325: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
48326: CALL_OW 518
48330: PUSH
48331: CALL_OW 519
48335: PUSH
48336: LD_INT 0
48338: GREATER
48339: AND
48340: IFFALSE 48350
// result := false ;
48342: LD_ADDR_VAR 0 1
48346: PUSH
48347: LD_INT 0
48349: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
48350: CALL_OW 531
48354: PUSH
48355: CALL_OW 519
48359: PUSH
48360: LD_INT 1
48362: GREATER
48363: AND
48364: IFFALSE 48374
// result := false ;
48366: LD_ADDR_VAR 0 1
48370: PUSH
48371: LD_INT 0
48373: ST_TO_ADDR
// end ;
48374: LD_VAR 0 1
48378: RET
// function HasPower ( i ) ; begin
48379: LD_INT 0
48381: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
48382: LD_ADDR_VAR 0 2
48386: PUSH
48387: LD_INT 22
48389: PUSH
48390: LD_VAR 0 1
48394: PUSH
48395: EMPTY
48396: LIST
48397: LIST
48398: PUSH
48399: LD_INT 2
48401: PUSH
48402: LD_INT 21
48404: PUSH
48405: LD_INT 1
48407: PUSH
48408: EMPTY
48409: LIST
48410: LIST
48411: PUSH
48412: LD_INT 33
48414: PUSH
48415: LD_INT 3
48417: PUSH
48418: EMPTY
48419: LIST
48420: LIST
48421: PUSH
48422: LD_INT 33
48424: PUSH
48425: LD_INT 5
48427: PUSH
48428: EMPTY
48429: LIST
48430: LIST
48431: PUSH
48432: EMPTY
48433: LIST
48434: LIST
48435: LIST
48436: LIST
48437: PUSH
48438: EMPTY
48439: LIST
48440: LIST
48441: PPUSH
48442: CALL_OW 69
48446: ST_TO_ADDR
// end ; end_of_file
48447: LD_VAR 0 2
48451: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
48452: LD_EXP 34
48456: IFFALSE 48499
48458: GO 48460
48460: DISABLE
48461: LD_INT 0
48463: PPUSH
// begin for i := 1 to 8 do
48464: LD_ADDR_VAR 0 1
48468: PUSH
48469: DOUBLE
48470: LD_INT 1
48472: DEC
48473: ST_TO_ADDR
48474: LD_INT 8
48476: PUSH
48477: FOR_TO
48478: IFFALSE 48497
// SetRestrict ( b_depot , i , state_disabled ) ;
48480: LD_INT 0
48482: PPUSH
48483: LD_VAR 0 1
48487: PPUSH
48488: LD_INT 0
48490: PPUSH
48491: CALL_OW 324
48495: GO 48477
48497: POP
48498: POP
// end ;
48499: PPOPN 1
48501: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
48502: LD_EXP 34
48506: PUSH
48507: CALL 48692 0 0
48511: AND
48512: PUSH
48513: LD_OWVAR 4
48517: AND
48518: IFFALSE 48689
48520: GO 48522
48522: DISABLE
48523: LD_INT 0
48525: PPUSH
48526: PPUSH
// begin canWin := false ;
48527: LD_ADDR_VAR 0 2
48531: PUSH
48532: LD_INT 0
48534: ST_TO_ADDR
// if not HasPower ( your_side ) then
48535: LD_OWVAR 2
48539: PPUSH
48540: CALL 48756 0 1
48544: NOT
48545: IFFALSE 48556
// begin Multiplayer_Loose_Message ;
48547: CALL_OW 521
// enable ( mpLose ) ;
48551: LD_INT 102
48553: ENABLE_MARKED
// end else
48554: GO 48689
// begin canWin := true ;
48556: LD_ADDR_VAR 0 2
48560: PUSH
48561: LD_INT 1
48563: ST_TO_ADDR
// for i := 1 to 8 do
48564: LD_ADDR_VAR 0 1
48568: PUSH
48569: DOUBLE
48570: LD_INT 1
48572: DEC
48573: ST_TO_ADDR
48574: LD_INT 8
48576: PUSH
48577: FOR_TO
48578: IFFALSE 48675
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
48580: LD_EXP 5
48584: PUSH
48585: LD_VAR 0 1
48589: ARRAY
48590: PUSH
48591: LD_VAR 0 1
48595: PPUSH
48596: CALL_OW 108
48600: AND
48601: PUSH
48602: LD_VAR 0 1
48606: PUSH
48607: LD_OWVAR 2
48611: NONEQUAL
48612: AND
48613: IFFALSE 48673
// if not mpSideTeams [ i ] or ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) then
48615: LD_EXP 6
48619: PUSH
48620: LD_VAR 0 1
48624: ARRAY
48625: NOT
48626: PUSH
48627: LD_EXP 6
48631: PUSH
48632: LD_VAR 0 1
48636: ARRAY
48637: PUSH
48638: LD_EXP 6
48642: PUSH
48643: LD_OWVAR 2
48647: ARRAY
48648: NONEQUAL
48649: OR
48650: IFFALSE 48673
// if HasPower ( i ) then
48652: LD_VAR 0 1
48656: PPUSH
48657: CALL 48756 0 1
48661: IFFALSE 48673
// begin canWin := false ;
48663: LD_ADDR_VAR 0 2
48667: PUSH
48668: LD_INT 0
48670: ST_TO_ADDR
// break ;
48671: GO 48675
// end ;
48673: GO 48577
48675: POP
48676: POP
// if canWin then
48677: LD_VAR 0 2
48681: IFFALSE 48688
// enable ( mpWin ) else
48683: LD_INT 101
48685: ENABLE_MARKED
48686: GO 48689
// enable ;
48688: ENABLE
// end ; end ;
48689: PPOPN 2
48691: END
// function CanWinLoose ; begin
48692: LD_INT 0
48694: PPUSH
// result := true ;
48695: LD_ADDR_VAR 0 1
48699: PUSH
48700: LD_INT 1
48702: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
48703: CALL_OW 518
48707: PUSH
48708: CALL_OW 519
48712: PUSH
48713: LD_INT 0
48715: GREATER
48716: AND
48717: IFFALSE 48727
// result := false ;
48719: LD_ADDR_VAR 0 1
48723: PUSH
48724: LD_INT 0
48726: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
48727: CALL_OW 531
48731: PUSH
48732: CALL_OW 519
48736: PUSH
48737: LD_INT 1
48739: GREATER
48740: AND
48741: IFFALSE 48751
// result := false ;
48743: LD_ADDR_VAR 0 1
48747: PUSH
48748: LD_INT 0
48750: ST_TO_ADDR
// end ;
48751: LD_VAR 0 1
48755: RET
// function HasPower ( i ) ; begin
48756: LD_INT 0
48758: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
48759: LD_INT 22
48761: PUSH
48762: LD_VAR 0 1
48766: PUSH
48767: EMPTY
48768: LIST
48769: LIST
48770: PUSH
48771: LD_INT 2
48773: PUSH
48774: LD_INT 30
48776: PUSH
48777: LD_INT 0
48779: PUSH
48780: EMPTY
48781: LIST
48782: LIST
48783: PUSH
48784: LD_INT 30
48786: PUSH
48787: LD_INT 1
48789: PUSH
48790: EMPTY
48791: LIST
48792: LIST
48793: PUSH
48794: EMPTY
48795: LIST
48796: LIST
48797: LIST
48798: PUSH
48799: EMPTY
48800: LIST
48801: LIST
48802: PPUSH
48803: CALL_OW 69
48807: NOT
48808: IFFALSE 48812
// exit ;
48810: GO 48877
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
48812: LD_ADDR_VAR 0 2
48816: PUSH
48817: LD_INT 22
48819: PUSH
48820: LD_VAR 0 1
48824: PUSH
48825: EMPTY
48826: LIST
48827: LIST
48828: PUSH
48829: LD_INT 2
48831: PUSH
48832: LD_INT 21
48834: PUSH
48835: LD_INT 1
48837: PUSH
48838: EMPTY
48839: LIST
48840: LIST
48841: PUSH
48842: LD_INT 33
48844: PUSH
48845: LD_INT 3
48847: PUSH
48848: EMPTY
48849: LIST
48850: LIST
48851: PUSH
48852: LD_INT 33
48854: PUSH
48855: LD_INT 5
48857: PUSH
48858: EMPTY
48859: LIST
48860: LIST
48861: PUSH
48862: EMPTY
48863: LIST
48864: LIST
48865: LIST
48866: LIST
48867: PUSH
48868: EMPTY
48869: LIST
48870: LIST
48871: PPUSH
48872: CALL_OW 69
48876: ST_TO_ADDR
// end ; end_of_file
48877: LD_VAR 0 2
48881: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , tmp ;
48882: LD_EXP 34
48886: IFFALSE 49119
48888: GO 48890
48890: DISABLE
48891: LD_INT 0
48893: PPUSH
48894: PPUSH
// begin mpKingPoints := [ ] ;
48895: LD_ADDR_EXP 37
48899: PUSH
48900: EMPTY
48901: ST_TO_ADDR
// if mpTeamGame then
48902: LD_EXP 9
48906: IFFALSE 48960
// begin for i := 1 to Count ( mpTeams ) do
48908: LD_ADDR_VAR 0 1
48912: PUSH
48913: DOUBLE
48914: LD_INT 1
48916: DEC
48917: ST_TO_ADDR
48918: LD_EXP 8
48922: PPUSH
48923: CALL 4305 0 1
48927: PUSH
48928: FOR_TO
48929: IFFALSE 48956
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
48931: LD_ADDR_EXP 37
48935: PUSH
48936: LD_EXP 37
48940: PPUSH
48941: LD_VAR 0 1
48945: PPUSH
48946: LD_INT 0
48948: PPUSH
48949: CALL_OW 1
48953: ST_TO_ADDR
48954: GO 48928
48956: POP
48957: POP
// end else
48958: GO 49003
// begin for i := 1 to 8 do
48960: LD_ADDR_VAR 0 1
48964: PUSH
48965: DOUBLE
48966: LD_INT 1
48968: DEC
48969: ST_TO_ADDR
48970: LD_INT 8
48972: PUSH
48973: FOR_TO
48974: IFFALSE 49001
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
48976: LD_ADDR_EXP 37
48980: PUSH
48981: LD_EXP 37
48985: PPUSH
48986: LD_VAR 0 1
48990: PPUSH
48991: LD_INT 0
48993: PPUSH
48994: CALL_OW 1
48998: ST_TO_ADDR
48999: GO 48973
49001: POP
49002: POP
// end ; SetAreaMapShow ( mpKingArea , 1 ) ;
49003: LD_EXP 31
49007: PPUSH
49008: LD_INT 1
49010: PPUSH
49011: CALL_OW 424
// UpdateCounter ;
49015: CALL 49451 0 0
// repeat wait ( 0 0$3 ) ;
49019: LD_INT 105
49021: PPUSH
49022: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
49026: LD_ADDR_VAR 0 2
49030: PUSH
49031: LD_EXP 31
49035: PPUSH
49036: LD_INT 3
49038: PUSH
49039: LD_INT 57
49041: PUSH
49042: EMPTY
49043: LIST
49044: PUSH
49045: EMPTY
49046: LIST
49047: LIST
49048: PUSH
49049: LD_INT 50
49051: PUSH
49052: EMPTY
49053: LIST
49054: PUSH
49055: LD_INT 2
49057: PUSH
49058: LD_INT 30
49060: PUSH
49061: LD_INT 0
49063: PUSH
49064: EMPTY
49065: LIST
49066: LIST
49067: PUSH
49068: LD_INT 30
49070: PUSH
49071: LD_INT 1
49073: PUSH
49074: EMPTY
49075: LIST
49076: LIST
49077: PUSH
49078: EMPTY
49079: LIST
49080: LIST
49081: LIST
49082: PUSH
49083: EMPTY
49084: LIST
49085: LIST
49086: LIST
49087: PPUSH
49088: CALL_OW 70
49092: ST_TO_ADDR
// if not tmp then
49093: LD_VAR 0 2
49097: NOT
49098: IFFALSE 49102
// continue ;
49100: GO 49019
// AddPoints ( tmp ) ;
49102: LD_VAR 0 2
49106: PPUSH
49107: CALL 49122 0 1
// UpdateCounter ;
49111: CALL 49451 0 0
// until false ;
49115: LD_INT 0
49117: IFFALSE 49019
// end ;
49119: PPOPN 2
49121: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
49122: LD_INT 0
49124: PPUSH
49125: PPUSH
49126: PPUSH
49127: PPUSH
49128: PPUSH
// if mpTeamGame then
49129: LD_EXP 9
49133: IFFALSE 49330
// begin first := depots [ 1 ] ;
49135: LD_ADDR_VAR 0 4
49139: PUSH
49140: LD_VAR 0 1
49144: PUSH
49145: LD_INT 1
49147: ARRAY
49148: ST_TO_ADDR
// side := GetSide ( first ) ;
49149: LD_ADDR_VAR 0 6
49153: PUSH
49154: LD_VAR 0 4
49158: PPUSH
49159: CALL_OW 255
49163: ST_TO_ADDR
// for i := 1 to mpTeams do
49164: LD_ADDR_VAR 0 3
49168: PUSH
49169: DOUBLE
49170: LD_INT 1
49172: DEC
49173: ST_TO_ADDR
49174: LD_EXP 8
49178: PUSH
49179: FOR_TO
49180: IFFALSE 49214
// if side in mpTeams [ i ] then
49182: LD_VAR 0 6
49186: PUSH
49187: LD_EXP 8
49191: PUSH
49192: LD_VAR 0 3
49196: ARRAY
49197: IN
49198: IFFALSE 49212
// begin team := i ;
49200: LD_ADDR_VAR 0 5
49204: PUSH
49205: LD_VAR 0 3
49209: ST_TO_ADDR
// break ;
49210: GO 49214
// end ;
49212: GO 49179
49214: POP
49215: POP
// if not team then
49216: LD_VAR 0 5
49220: NOT
49221: IFFALSE 49225
// exit ;
49223: GO 49446
// if UnitFilter ( depots , [ f_enemy , side ] ) then
49225: LD_VAR 0 1
49229: PPUSH
49230: LD_INT 81
49232: PUSH
49233: LD_VAR 0 6
49237: PUSH
49238: EMPTY
49239: LIST
49240: LIST
49241: PPUSH
49242: CALL_OW 72
49246: IFFALSE 49250
// exit ;
49248: GO 49446
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 3 ) ;
49250: LD_ADDR_EXP 37
49254: PUSH
49255: LD_EXP 37
49259: PPUSH
49260: LD_VAR 0 5
49264: PPUSH
49265: LD_EXP 37
49269: PUSH
49270: LD_VAR 0 5
49274: ARRAY
49275: PUSH
49276: LD_INT 3
49278: PLUS
49279: PPUSH
49280: CALL_OW 1
49284: ST_TO_ADDR
// for i in mpTeams [ team ] do
49285: LD_ADDR_VAR 0 3
49289: PUSH
49290: LD_EXP 8
49294: PUSH
49295: LD_VAR 0 5
49299: ARRAY
49300: PUSH
49301: FOR_IN
49302: IFFALSE 49326
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
49304: LD_VAR 0 3
49308: PPUSH
49309: LD_EXP 37
49313: PUSH
49314: LD_VAR 0 5
49318: ARRAY
49319: PPUSH
49320: CALL_OW 506
49324: GO 49301
49326: POP
49327: POP
// end else
49328: GO 49446
// begin first := depots [ 1 ] ;
49330: LD_ADDR_VAR 0 4
49334: PUSH
49335: LD_VAR 0 1
49339: PUSH
49340: LD_INT 1
49342: ARRAY
49343: ST_TO_ADDR
// side := GetSide ( first ) ;
49344: LD_ADDR_VAR 0 6
49348: PUSH
49349: LD_VAR 0 4
49353: PPUSH
49354: CALL_OW 255
49358: ST_TO_ADDR
// if UnitFilter ( depots , [ f_not , [ f_side , side ] ] ) then
49359: LD_VAR 0 1
49363: PPUSH
49364: LD_INT 3
49366: PUSH
49367: LD_INT 22
49369: PUSH
49370: LD_VAR 0 6
49374: PUSH
49375: EMPTY
49376: LIST
49377: LIST
49378: PUSH
49379: EMPTY
49380: LIST
49381: LIST
49382: PPUSH
49383: CALL_OW 72
49387: IFFALSE 49391
// exit ;
49389: GO 49446
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 3 ) ;
49391: LD_ADDR_EXP 37
49395: PUSH
49396: LD_EXP 37
49400: PPUSH
49401: LD_VAR 0 6
49405: PPUSH
49406: LD_EXP 37
49410: PUSH
49411: LD_VAR 0 6
49415: ARRAY
49416: PUSH
49417: LD_INT 3
49419: PLUS
49420: PPUSH
49421: CALL_OW 1
49425: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
49426: LD_VAR 0 6
49430: PPUSH
49431: LD_EXP 37
49435: PUSH
49436: LD_VAR 0 6
49440: ARRAY
49441: PPUSH
49442: CALL_OW 506
// end ; end ;
49446: LD_VAR 0 2
49450: RET
// function UpdateCounter ; var i ; begin
49451: LD_INT 0
49453: PPUSH
49454: PPUSH
// result := [ ] ;
49455: LD_ADDR_VAR 0 1
49459: PUSH
49460: EMPTY
49461: ST_TO_ADDR
// if mpTeamGame then
49462: LD_EXP 9
49466: IFFALSE 49533
// begin for i := 1 to mpTeams do
49468: LD_ADDR_VAR 0 2
49472: PUSH
49473: DOUBLE
49474: LD_INT 1
49476: DEC
49477: ST_TO_ADDR
49478: LD_EXP 8
49482: PUSH
49483: FOR_TO
49484: IFFALSE 49529
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
49486: LD_ADDR_VAR 0 1
49490: PUSH
49491: LD_VAR 0 1
49495: PUSH
49496: LD_STRING #KingoftheHill-Team
49498: PUSH
49499: LD_VAR 0 2
49503: PUSH
49504: LD_EXP 37
49508: PUSH
49509: LD_VAR 0 2
49513: ARRAY
49514: PUSH
49515: LD_EXP 32
49519: PUSH
49520: EMPTY
49521: LIST
49522: LIST
49523: LIST
49524: LIST
49525: ADD
49526: ST_TO_ADDR
49527: GO 49483
49529: POP
49530: POP
// end else
49531: GO 49606
// begin for i := 1 to 8 do
49533: LD_ADDR_VAR 0 2
49537: PUSH
49538: DOUBLE
49539: LD_INT 1
49541: DEC
49542: ST_TO_ADDR
49543: LD_INT 8
49545: PUSH
49546: FOR_TO
49547: IFFALSE 49604
// if mpSidePositions [ i ] then
49549: LD_EXP 5
49553: PUSH
49554: LD_VAR 0 2
49558: ARRAY
49559: IFFALSE 49602
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
49561: LD_ADDR_VAR 0 1
49565: PUSH
49566: LD_VAR 0 1
49570: PUSH
49571: LD_STRING #KingoftheHill-Player
49573: PUSH
49574: LD_VAR 0 2
49578: PUSH
49579: LD_EXP 37
49583: PUSH
49584: LD_VAR 0 2
49588: ARRAY
49589: PUSH
49590: LD_EXP 32
49594: PUSH
49595: EMPTY
49596: LIST
49597: LIST
49598: LIST
49599: LIST
49600: ADD
49601: ST_TO_ADDR
49602: GO 49546
49604: POP
49605: POP
// end ; mpDisplayStrings := result ;
49606: LD_ADDR_EXP 33
49610: PUSH
49611: LD_VAR 0 1
49615: ST_TO_ADDR
// end ;
49616: LD_VAR 0 1
49620: RET
// function HowMuchPoints ( side ) ; var i ; begin
49621: LD_INT 0
49623: PPUSH
49624: PPUSH
// if mpTeamGame then
49625: LD_EXP 9
49629: IFFALSE 49698
// begin for i := 1 to Count ( mpTeams ) do
49631: LD_ADDR_VAR 0 3
49635: PUSH
49636: DOUBLE
49637: LD_INT 1
49639: DEC
49640: ST_TO_ADDR
49641: LD_EXP 8
49645: PPUSH
49646: CALL 4305 0 1
49650: PUSH
49651: FOR_TO
49652: IFFALSE 49694
// begin if side in mpTeams [ i ] then
49654: LD_VAR 0 1
49658: PUSH
49659: LD_EXP 8
49663: PUSH
49664: LD_VAR 0 3
49668: ARRAY
49669: IN
49670: IFFALSE 49692
// begin result := mpKingPoints [ i ] ;
49672: LD_ADDR_VAR 0 2
49676: PUSH
49677: LD_EXP 37
49681: PUSH
49682: LD_VAR 0 3
49686: ARRAY
49687: ST_TO_ADDR
// exit ;
49688: POP
49689: POP
49690: GO 49714
// end ; end ;
49692: GO 49651
49694: POP
49695: POP
// end else
49696: GO 49714
// result := mpKingPoints [ side ] ;
49698: LD_ADDR_VAR 0 2
49702: PUSH
49703: LD_EXP 37
49707: PUSH
49708: LD_VAR 0 1
49712: ARRAY
49713: ST_TO_ADDR
// end ;
49714: LD_VAR 0 2
49718: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
49719: LD_EXP 34
49723: PUSH
49724: CALL 49925 0 0
49728: AND
49729: PUSH
49730: LD_OWVAR 4
49734: AND
49735: IFFALSE 49922
49737: GO 49739
49739: DISABLE
49740: LD_INT 0
49742: PPUSH
49743: PPUSH
// begin canWin := false ;
49744: LD_ADDR_VAR 0 2
49748: PUSH
49749: LD_INT 0
49751: ST_TO_ADDR
// if not HasPower ( your_side ) then
49752: LD_OWVAR 2
49756: PPUSH
49757: CALL 49989 0 1
49761: NOT
49762: IFFALSE 49773
// begin Multiplayer_Loose_Message ;
49764: CALL_OW 521
// enable ( mpLose ) ;
49768: LD_INT 102
49770: ENABLE_MARKED
// end else
49771: GO 49922
// begin canWin := HowMuchPoints ( your_side ) >= mpPoints ;
49773: LD_ADDR_VAR 0 2
49777: PUSH
49778: LD_OWVAR 2
49782: PPUSH
49783: CALL 49621 0 1
49787: PUSH
49788: LD_EXP 32
49792: GREATEREQUAL
49793: ST_TO_ADDR
// for i := 1 to 8 do
49794: LD_ADDR_VAR 0 1
49798: PUSH
49799: DOUBLE
49800: LD_INT 1
49802: DEC
49803: ST_TO_ADDR
49804: LD_INT 8
49806: PUSH
49807: FOR_TO
49808: IFFALSE 49908
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
49810: LD_EXP 5
49814: PUSH
49815: LD_VAR 0 1
49819: ARRAY
49820: PUSH
49821: LD_VAR 0 1
49825: PPUSH
49826: CALL_OW 108
49830: AND
49831: PUSH
49832: LD_VAR 0 1
49836: PUSH
49837: LD_OWVAR 2
49841: NONEQUAL
49842: AND
49843: IFFALSE 49906
// if not mpSideTeams [ i ] or ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) then
49845: LD_EXP 6
49849: PUSH
49850: LD_VAR 0 1
49854: ARRAY
49855: NOT
49856: PUSH
49857: LD_EXP 6
49861: PUSH
49862: LD_VAR 0 1
49866: ARRAY
49867: PUSH
49868: LD_EXP 6
49872: PUSH
49873: LD_OWVAR 2
49877: ARRAY
49878: NONEQUAL
49879: OR
49880: IFFALSE 49906
// if HowMuchPoints ( i ) >= mpPoints then
49882: LD_VAR 0 1
49886: PPUSH
49887: CALL 49621 0 1
49891: PUSH
49892: LD_EXP 32
49896: GREATEREQUAL
49897: IFFALSE 49906
// begin enable ( mpLose ) ;
49899: LD_INT 102
49901: ENABLE_MARKED
// exit ;
49902: POP
49903: POP
49904: GO 49922
// end ;
49906: GO 49807
49908: POP
49909: POP
// if canWin then
49910: LD_VAR 0 2
49914: IFFALSE 49921
// enable ( mpWin ) else
49916: LD_INT 101
49918: ENABLE_MARKED
49919: GO 49922
// enable ;
49921: ENABLE
// end ; end ;
49922: PPOPN 2
49924: END
// function CanWinLoose ; begin
49925: LD_INT 0
49927: PPUSH
// result := true ;
49928: LD_ADDR_VAR 0 1
49932: PUSH
49933: LD_INT 1
49935: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
49936: CALL_OW 518
49940: PUSH
49941: CALL_OW 519
49945: PUSH
49946: LD_INT 0
49948: GREATER
49949: AND
49950: IFFALSE 49960
// result := false ;
49952: LD_ADDR_VAR 0 1
49956: PUSH
49957: LD_INT 0
49959: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
49960: CALL_OW 531
49964: PUSH
49965: CALL_OW 519
49969: PUSH
49970: LD_INT 1
49972: GREATER
49973: AND
49974: IFFALSE 49984
// result := false ;
49976: LD_ADDR_VAR 0 1
49980: PUSH
49981: LD_INT 0
49983: ST_TO_ADDR
// end ;
49984: LD_VAR 0 1
49988: RET
// function HasPower ( i ) ; begin
49989: LD_INT 0
49991: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
49992: LD_ADDR_VAR 0 2
49996: PUSH
49997: LD_INT 22
49999: PUSH
50000: LD_VAR 0 1
50004: PUSH
50005: EMPTY
50006: LIST
50007: LIST
50008: PUSH
50009: LD_INT 2
50011: PUSH
50012: LD_INT 21
50014: PUSH
50015: LD_INT 1
50017: PUSH
50018: EMPTY
50019: LIST
50020: LIST
50021: PUSH
50022: LD_INT 33
50024: PUSH
50025: LD_INT 3
50027: PUSH
50028: EMPTY
50029: LIST
50030: LIST
50031: PUSH
50032: LD_INT 33
50034: PUSH
50035: LD_INT 5
50037: PUSH
50038: EMPTY
50039: LIST
50040: LIST
50041: PUSH
50042: EMPTY
50043: LIST
50044: LIST
50045: LIST
50046: LIST
50047: PUSH
50048: EMPTY
50049: LIST
50050: LIST
50051: PPUSH
50052: CALL_OW 69
50056: ST_TO_ADDR
// end ; end_of_file end_of_file
50057: LD_VAR 0 2
50061: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
50062: LD_VAR 0 1
50066: PPUSH
50067: LD_VAR 0 2
50071: PPUSH
50072: LD_VAR 0 3
50076: PPUSH
50077: LD_VAR 0 4
50081: PPUSH
50082: LD_VAR 0 5
50086: PPUSH
50087: LD_VAR 0 6
50091: PPUSH
50092: CALL 50276 0 6
// end ;
50096: PPOPN 6
50098: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
50099: LD_INT 0
50101: PPUSH
// begin if not units then
50102: LD_VAR 0 1
50106: NOT
50107: IFFALSE 50111
// exit ;
50109: GO 50111
// end ;
50111: PPOPN 7
50113: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
50114: CALL 50180 0 0
// end ; end_of_file
50118: PPOPN 1
50120: END
// export globalGameSaveCounter ; every 0 0$1 do
50121: GO 50123
50123: DISABLE
// begin enable ;
50124: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
50125: LD_STRING updateTimer(
50127: PUSH
50128: LD_OWVAR 1
50132: STR
50133: PUSH
50134: LD_STRING );
50136: STR
50137: PPUSH
50138: CALL_OW 559
// end ;
50142: END
// every 0 0$1 do
50143: GO 50145
50145: DISABLE
// begin globalGameSaveCounter := 0 ;
50146: LD_ADDR_EXP 38
50150: PUSH
50151: LD_INT 0
50153: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
50154: LD_STRING setGameSaveCounter(0)
50156: PPUSH
50157: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
50161: LD_STRING initStreamRollete();
50163: PPUSH
50164: CALL_OW 559
// InitStreamMode ;
50168: CALL 51494 0 0
// DefineStreamItems ( false ) ;
50172: LD_INT 0
50174: PPUSH
50175: CALL 51958 0 1
// end ;
50179: END
// export function SOS_MapStart ( ) ; begin
50180: LD_INT 0
50182: PPUSH
// if streamModeActive then
50183: LD_EXP 39
50187: IFFALSE 50196
// DefineStreamItems ( true ) ;
50189: LD_INT 1
50191: PPUSH
50192: CALL 51958 0 1
// UpdateLuaVariables ( ) ;
50196: CALL 50213 0 0
// UpdateFactoryWaypoints ( ) ;
50200: CALL 64827 0 0
// UpdateWarehouseGatheringPoints ( ) ;
50204: CALL 65084 0 0
// end ;
50208: LD_VAR 0 1
50212: RET
// function UpdateLuaVariables ( ) ; begin
50213: LD_INT 0
50215: PPUSH
// if globalGameSaveCounter then
50216: LD_EXP 38
50220: IFFALSE 50254
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
50222: LD_ADDR_EXP 38
50226: PUSH
50227: LD_EXP 38
50231: PPUSH
50232: CALL 41266 0 1
50236: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
50237: LD_STRING setGameSaveCounter(
50239: PUSH
50240: LD_EXP 38
50244: STR
50245: PUSH
50246: LD_STRING )
50248: STR
50249: PPUSH
50250: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
50254: LD_STRING setGameDifficulty(
50256: PUSH
50257: LD_OWVAR 67
50261: STR
50262: PUSH
50263: LD_STRING )
50265: STR
50266: PPUSH
50267: CALL_OW 559
// end ;
50271: LD_VAR 0 1
50275: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
50276: LD_INT 0
50278: PPUSH
// if p2 = stream_mode then
50279: LD_VAR 0 2
50283: PUSH
50284: LD_INT 100
50286: EQUAL
50287: IFFALSE 51290
// begin if not StreamModeActive then
50289: LD_EXP 39
50293: NOT
50294: IFFALSE 50304
// StreamModeActive := true ;
50296: LD_ADDR_EXP 39
50300: PUSH
50301: LD_INT 1
50303: ST_TO_ADDR
// if p3 = 0 then
50304: LD_VAR 0 3
50308: PUSH
50309: LD_INT 0
50311: EQUAL
50312: IFFALSE 50318
// InitStreamMode ;
50314: CALL 51494 0 0
// if p3 = 1 then
50318: LD_VAR 0 3
50322: PUSH
50323: LD_INT 1
50325: EQUAL
50326: IFFALSE 50336
// sRocket := true ;
50328: LD_ADDR_EXP 44
50332: PUSH
50333: LD_INT 1
50335: ST_TO_ADDR
// if p3 = 2 then
50336: LD_VAR 0 3
50340: PUSH
50341: LD_INT 2
50343: EQUAL
50344: IFFALSE 50354
// sSpeed := true ;
50346: LD_ADDR_EXP 43
50350: PUSH
50351: LD_INT 1
50353: ST_TO_ADDR
// if p3 = 3 then
50354: LD_VAR 0 3
50358: PUSH
50359: LD_INT 3
50361: EQUAL
50362: IFFALSE 50372
// sEngine := true ;
50364: LD_ADDR_EXP 45
50368: PUSH
50369: LD_INT 1
50371: ST_TO_ADDR
// if p3 = 4 then
50372: LD_VAR 0 3
50376: PUSH
50377: LD_INT 4
50379: EQUAL
50380: IFFALSE 50390
// sSpec := true ;
50382: LD_ADDR_EXP 42
50386: PUSH
50387: LD_INT 1
50389: ST_TO_ADDR
// if p3 = 5 then
50390: LD_VAR 0 3
50394: PUSH
50395: LD_INT 5
50397: EQUAL
50398: IFFALSE 50408
// sLevel := true ;
50400: LD_ADDR_EXP 46
50404: PUSH
50405: LD_INT 1
50407: ST_TO_ADDR
// if p3 = 6 then
50408: LD_VAR 0 3
50412: PUSH
50413: LD_INT 6
50415: EQUAL
50416: IFFALSE 50426
// sArmoury := true ;
50418: LD_ADDR_EXP 47
50422: PUSH
50423: LD_INT 1
50425: ST_TO_ADDR
// if p3 = 7 then
50426: LD_VAR 0 3
50430: PUSH
50431: LD_INT 7
50433: EQUAL
50434: IFFALSE 50444
// sRadar := true ;
50436: LD_ADDR_EXP 48
50440: PUSH
50441: LD_INT 1
50443: ST_TO_ADDR
// if p3 = 8 then
50444: LD_VAR 0 3
50448: PUSH
50449: LD_INT 8
50451: EQUAL
50452: IFFALSE 50462
// sBunker := true ;
50454: LD_ADDR_EXP 49
50458: PUSH
50459: LD_INT 1
50461: ST_TO_ADDR
// if p3 = 9 then
50462: LD_VAR 0 3
50466: PUSH
50467: LD_INT 9
50469: EQUAL
50470: IFFALSE 50480
// sHack := true ;
50472: LD_ADDR_EXP 50
50476: PUSH
50477: LD_INT 1
50479: ST_TO_ADDR
// if p3 = 10 then
50480: LD_VAR 0 3
50484: PUSH
50485: LD_INT 10
50487: EQUAL
50488: IFFALSE 50498
// sFire := true ;
50490: LD_ADDR_EXP 51
50494: PUSH
50495: LD_INT 1
50497: ST_TO_ADDR
// if p3 = 11 then
50498: LD_VAR 0 3
50502: PUSH
50503: LD_INT 11
50505: EQUAL
50506: IFFALSE 50516
// sRefresh := true ;
50508: LD_ADDR_EXP 52
50512: PUSH
50513: LD_INT 1
50515: ST_TO_ADDR
// if p3 = 12 then
50516: LD_VAR 0 3
50520: PUSH
50521: LD_INT 12
50523: EQUAL
50524: IFFALSE 50534
// sExp := true ;
50526: LD_ADDR_EXP 53
50530: PUSH
50531: LD_INT 1
50533: ST_TO_ADDR
// if p3 = 13 then
50534: LD_VAR 0 3
50538: PUSH
50539: LD_INT 13
50541: EQUAL
50542: IFFALSE 50552
// sDepot := true ;
50544: LD_ADDR_EXP 54
50548: PUSH
50549: LD_INT 1
50551: ST_TO_ADDR
// if p3 = 14 then
50552: LD_VAR 0 3
50556: PUSH
50557: LD_INT 14
50559: EQUAL
50560: IFFALSE 50570
// sFlag := true ;
50562: LD_ADDR_EXP 55
50566: PUSH
50567: LD_INT 1
50569: ST_TO_ADDR
// if p3 = 15 then
50570: LD_VAR 0 3
50574: PUSH
50575: LD_INT 15
50577: EQUAL
50578: IFFALSE 50588
// sKamikadze := true ;
50580: LD_ADDR_EXP 63
50584: PUSH
50585: LD_INT 1
50587: ST_TO_ADDR
// if p3 = 16 then
50588: LD_VAR 0 3
50592: PUSH
50593: LD_INT 16
50595: EQUAL
50596: IFFALSE 50606
// sTroll := true ;
50598: LD_ADDR_EXP 64
50602: PUSH
50603: LD_INT 1
50605: ST_TO_ADDR
// if p3 = 17 then
50606: LD_VAR 0 3
50610: PUSH
50611: LD_INT 17
50613: EQUAL
50614: IFFALSE 50624
// sSlow := true ;
50616: LD_ADDR_EXP 65
50620: PUSH
50621: LD_INT 1
50623: ST_TO_ADDR
// if p3 = 18 then
50624: LD_VAR 0 3
50628: PUSH
50629: LD_INT 18
50631: EQUAL
50632: IFFALSE 50642
// sLack := true ;
50634: LD_ADDR_EXP 66
50638: PUSH
50639: LD_INT 1
50641: ST_TO_ADDR
// if p3 = 19 then
50642: LD_VAR 0 3
50646: PUSH
50647: LD_INT 19
50649: EQUAL
50650: IFFALSE 50660
// sTank := true ;
50652: LD_ADDR_EXP 68
50656: PUSH
50657: LD_INT 1
50659: ST_TO_ADDR
// if p3 = 20 then
50660: LD_VAR 0 3
50664: PUSH
50665: LD_INT 20
50667: EQUAL
50668: IFFALSE 50678
// sRemote := true ;
50670: LD_ADDR_EXP 69
50674: PUSH
50675: LD_INT 1
50677: ST_TO_ADDR
// if p3 = 21 then
50678: LD_VAR 0 3
50682: PUSH
50683: LD_INT 21
50685: EQUAL
50686: IFFALSE 50696
// sPowell := true ;
50688: LD_ADDR_EXP 70
50692: PUSH
50693: LD_INT 1
50695: ST_TO_ADDR
// if p3 = 22 then
50696: LD_VAR 0 3
50700: PUSH
50701: LD_INT 22
50703: EQUAL
50704: IFFALSE 50714
// sTeleport := true ;
50706: LD_ADDR_EXP 73
50710: PUSH
50711: LD_INT 1
50713: ST_TO_ADDR
// if p3 = 23 then
50714: LD_VAR 0 3
50718: PUSH
50719: LD_INT 23
50721: EQUAL
50722: IFFALSE 50732
// sOilTower := true ;
50724: LD_ADDR_EXP 75
50728: PUSH
50729: LD_INT 1
50731: ST_TO_ADDR
// if p3 = 24 then
50732: LD_VAR 0 3
50736: PUSH
50737: LD_INT 24
50739: EQUAL
50740: IFFALSE 50750
// sShovel := true ;
50742: LD_ADDR_EXP 76
50746: PUSH
50747: LD_INT 1
50749: ST_TO_ADDR
// if p3 = 25 then
50750: LD_VAR 0 3
50754: PUSH
50755: LD_INT 25
50757: EQUAL
50758: IFFALSE 50768
// sSheik := true ;
50760: LD_ADDR_EXP 77
50764: PUSH
50765: LD_INT 1
50767: ST_TO_ADDR
// if p3 = 26 then
50768: LD_VAR 0 3
50772: PUSH
50773: LD_INT 26
50775: EQUAL
50776: IFFALSE 50786
// sEarthquake := true ;
50778: LD_ADDR_EXP 79
50782: PUSH
50783: LD_INT 1
50785: ST_TO_ADDR
// if p3 = 27 then
50786: LD_VAR 0 3
50790: PUSH
50791: LD_INT 27
50793: EQUAL
50794: IFFALSE 50804
// sAI := true ;
50796: LD_ADDR_EXP 80
50800: PUSH
50801: LD_INT 1
50803: ST_TO_ADDR
// if p3 = 28 then
50804: LD_VAR 0 3
50808: PUSH
50809: LD_INT 28
50811: EQUAL
50812: IFFALSE 50822
// sCargo := true ;
50814: LD_ADDR_EXP 83
50818: PUSH
50819: LD_INT 1
50821: ST_TO_ADDR
// if p3 = 29 then
50822: LD_VAR 0 3
50826: PUSH
50827: LD_INT 29
50829: EQUAL
50830: IFFALSE 50840
// sDLaser := true ;
50832: LD_ADDR_EXP 84
50836: PUSH
50837: LD_INT 1
50839: ST_TO_ADDR
// if p3 = 30 then
50840: LD_VAR 0 3
50844: PUSH
50845: LD_INT 30
50847: EQUAL
50848: IFFALSE 50858
// sExchange := true ;
50850: LD_ADDR_EXP 85
50854: PUSH
50855: LD_INT 1
50857: ST_TO_ADDR
// if p3 = 31 then
50858: LD_VAR 0 3
50862: PUSH
50863: LD_INT 31
50865: EQUAL
50866: IFFALSE 50876
// sFac := true ;
50868: LD_ADDR_EXP 86
50872: PUSH
50873: LD_INT 1
50875: ST_TO_ADDR
// if p3 = 32 then
50876: LD_VAR 0 3
50880: PUSH
50881: LD_INT 32
50883: EQUAL
50884: IFFALSE 50894
// sPower := true ;
50886: LD_ADDR_EXP 87
50890: PUSH
50891: LD_INT 1
50893: ST_TO_ADDR
// if p3 = 33 then
50894: LD_VAR 0 3
50898: PUSH
50899: LD_INT 33
50901: EQUAL
50902: IFFALSE 50912
// sRandom := true ;
50904: LD_ADDR_EXP 88
50908: PUSH
50909: LD_INT 1
50911: ST_TO_ADDR
// if p3 = 34 then
50912: LD_VAR 0 3
50916: PUSH
50917: LD_INT 34
50919: EQUAL
50920: IFFALSE 50930
// sShield := true ;
50922: LD_ADDR_EXP 89
50926: PUSH
50927: LD_INT 1
50929: ST_TO_ADDR
// if p3 = 35 then
50930: LD_VAR 0 3
50934: PUSH
50935: LD_INT 35
50937: EQUAL
50938: IFFALSE 50948
// sTime := true ;
50940: LD_ADDR_EXP 90
50944: PUSH
50945: LD_INT 1
50947: ST_TO_ADDR
// if p3 = 36 then
50948: LD_VAR 0 3
50952: PUSH
50953: LD_INT 36
50955: EQUAL
50956: IFFALSE 50966
// sTools := true ;
50958: LD_ADDR_EXP 91
50962: PUSH
50963: LD_INT 1
50965: ST_TO_ADDR
// if p3 = 101 then
50966: LD_VAR 0 3
50970: PUSH
50971: LD_INT 101
50973: EQUAL
50974: IFFALSE 50984
// sSold := true ;
50976: LD_ADDR_EXP 56
50980: PUSH
50981: LD_INT 1
50983: ST_TO_ADDR
// if p3 = 102 then
50984: LD_VAR 0 3
50988: PUSH
50989: LD_INT 102
50991: EQUAL
50992: IFFALSE 51002
// sDiff := true ;
50994: LD_ADDR_EXP 57
50998: PUSH
50999: LD_INT 1
51001: ST_TO_ADDR
// if p3 = 103 then
51002: LD_VAR 0 3
51006: PUSH
51007: LD_INT 103
51009: EQUAL
51010: IFFALSE 51020
// sFog := true ;
51012: LD_ADDR_EXP 60
51016: PUSH
51017: LD_INT 1
51019: ST_TO_ADDR
// if p3 = 104 then
51020: LD_VAR 0 3
51024: PUSH
51025: LD_INT 104
51027: EQUAL
51028: IFFALSE 51038
// sReset := true ;
51030: LD_ADDR_EXP 61
51034: PUSH
51035: LD_INT 1
51037: ST_TO_ADDR
// if p3 = 105 then
51038: LD_VAR 0 3
51042: PUSH
51043: LD_INT 105
51045: EQUAL
51046: IFFALSE 51056
// sSun := true ;
51048: LD_ADDR_EXP 62
51052: PUSH
51053: LD_INT 1
51055: ST_TO_ADDR
// if p3 = 106 then
51056: LD_VAR 0 3
51060: PUSH
51061: LD_INT 106
51063: EQUAL
51064: IFFALSE 51074
// sTiger := true ;
51066: LD_ADDR_EXP 58
51070: PUSH
51071: LD_INT 1
51073: ST_TO_ADDR
// if p3 = 107 then
51074: LD_VAR 0 3
51078: PUSH
51079: LD_INT 107
51081: EQUAL
51082: IFFALSE 51092
// sBomb := true ;
51084: LD_ADDR_EXP 59
51088: PUSH
51089: LD_INT 1
51091: ST_TO_ADDR
// if p3 = 108 then
51092: LD_VAR 0 3
51096: PUSH
51097: LD_INT 108
51099: EQUAL
51100: IFFALSE 51110
// sWound := true ;
51102: LD_ADDR_EXP 67
51106: PUSH
51107: LD_INT 1
51109: ST_TO_ADDR
// if p3 = 109 then
51110: LD_VAR 0 3
51114: PUSH
51115: LD_INT 109
51117: EQUAL
51118: IFFALSE 51128
// sBetray := true ;
51120: LD_ADDR_EXP 71
51124: PUSH
51125: LD_INT 1
51127: ST_TO_ADDR
// if p3 = 110 then
51128: LD_VAR 0 3
51132: PUSH
51133: LD_INT 110
51135: EQUAL
51136: IFFALSE 51146
// sContamin := true ;
51138: LD_ADDR_EXP 72
51142: PUSH
51143: LD_INT 1
51145: ST_TO_ADDR
// if p3 = 111 then
51146: LD_VAR 0 3
51150: PUSH
51151: LD_INT 111
51153: EQUAL
51154: IFFALSE 51164
// sOil := true ;
51156: LD_ADDR_EXP 74
51160: PUSH
51161: LD_INT 1
51163: ST_TO_ADDR
// if p3 = 112 then
51164: LD_VAR 0 3
51168: PUSH
51169: LD_INT 112
51171: EQUAL
51172: IFFALSE 51182
// sStu := true ;
51174: LD_ADDR_EXP 78
51178: PUSH
51179: LD_INT 1
51181: ST_TO_ADDR
// if p3 = 113 then
51182: LD_VAR 0 3
51186: PUSH
51187: LD_INT 113
51189: EQUAL
51190: IFFALSE 51200
// sBazooka := true ;
51192: LD_ADDR_EXP 81
51196: PUSH
51197: LD_INT 1
51199: ST_TO_ADDR
// if p3 = 114 then
51200: LD_VAR 0 3
51204: PUSH
51205: LD_INT 114
51207: EQUAL
51208: IFFALSE 51218
// sMortar := true ;
51210: LD_ADDR_EXP 82
51214: PUSH
51215: LD_INT 1
51217: ST_TO_ADDR
// if p3 = 115 then
51218: LD_VAR 0 3
51222: PUSH
51223: LD_INT 115
51225: EQUAL
51226: IFFALSE 51236
// sRanger := true ;
51228: LD_ADDR_EXP 92
51232: PUSH
51233: LD_INT 1
51235: ST_TO_ADDR
// if p3 = 116 then
51236: LD_VAR 0 3
51240: PUSH
51241: LD_INT 116
51243: EQUAL
51244: IFFALSE 51254
// sComputer := true ;
51246: LD_ADDR_EXP 93
51250: PUSH
51251: LD_INT 1
51253: ST_TO_ADDR
// if p3 = 117 then
51254: LD_VAR 0 3
51258: PUSH
51259: LD_INT 117
51261: EQUAL
51262: IFFALSE 51272
// s30 := true ;
51264: LD_ADDR_EXP 94
51268: PUSH
51269: LD_INT 1
51271: ST_TO_ADDR
// if p3 = 118 then
51272: LD_VAR 0 3
51276: PUSH
51277: LD_INT 118
51279: EQUAL
51280: IFFALSE 51290
// s60 := true ;
51282: LD_ADDR_EXP 95
51286: PUSH
51287: LD_INT 1
51289: ST_TO_ADDR
// end ; if p2 = hack_mode then
51290: LD_VAR 0 2
51294: PUSH
51295: LD_INT 101
51297: EQUAL
51298: IFFALSE 51426
// begin case p3 of 1 :
51300: LD_VAR 0 3
51304: PUSH
51305: LD_INT 1
51307: DOUBLE
51308: EQUAL
51309: IFTRUE 51313
51311: GO 51320
51313: POP
// hHackUnlimitedResources ; 2 :
51314: CALL 63573 0 0
51318: GO 51426
51320: LD_INT 2
51322: DOUBLE
51323: EQUAL
51324: IFTRUE 51328
51326: GO 51335
51328: POP
// hHackSetLevel10 ; 3 :
51329: CALL 63706 0 0
51333: GO 51426
51335: LD_INT 3
51337: DOUBLE
51338: EQUAL
51339: IFTRUE 51343
51341: GO 51350
51343: POP
// hHackSetLevel10YourUnits ; 4 :
51344: CALL 63791 0 0
51348: GO 51426
51350: LD_INT 4
51352: DOUBLE
51353: EQUAL
51354: IFTRUE 51358
51356: GO 51365
51358: POP
// hHackInvincible ; 5 :
51359: CALL 64239 0 0
51363: GO 51426
51365: LD_INT 5
51367: DOUBLE
51368: EQUAL
51369: IFTRUE 51373
51371: GO 51380
51373: POP
// hHackInvisible ; 6 :
51374: CALL 64350 0 0
51378: GO 51426
51380: LD_INT 6
51382: DOUBLE
51383: EQUAL
51384: IFTRUE 51388
51386: GO 51395
51388: POP
// hHackChangeYourSide ; 7 :
51389: CALL 64407 0 0
51393: GO 51426
51395: LD_INT 7
51397: DOUBLE
51398: EQUAL
51399: IFTRUE 51403
51401: GO 51410
51403: POP
// hHackChangeUnitSide ; 8 :
51404: CALL 64449 0 0
51408: GO 51426
51410: LD_INT 8
51412: DOUBLE
51413: EQUAL
51414: IFTRUE 51418
51416: GO 51425
51418: POP
// hHackFog ; end ;
51419: CALL 64550 0 0
51423: GO 51426
51425: POP
// end ; if p2 = game_save_mode then
51426: LD_VAR 0 2
51430: PUSH
51431: LD_INT 102
51433: EQUAL
51434: IFFALSE 51489
// begin if p3 = 1 then
51436: LD_VAR 0 3
51440: PUSH
51441: LD_INT 1
51443: EQUAL
51444: IFFALSE 51456
// globalGameSaveCounter := p4 ;
51446: LD_ADDR_EXP 38
51450: PUSH
51451: LD_VAR 0 4
51455: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
51456: LD_VAR 0 3
51460: PUSH
51461: LD_INT 2
51463: EQUAL
51464: PUSH
51465: LD_EXP 38
51469: AND
51470: IFFALSE 51489
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
51472: LD_STRING setGameSaveCounter(
51474: PUSH
51475: LD_EXP 38
51479: STR
51480: PUSH
51481: LD_STRING )
51483: STR
51484: PPUSH
51485: CALL_OW 559
// end ; end ;
51489: LD_VAR 0 7
51493: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
51494: LD_INT 0
51496: PPUSH
// streamModeActive := false ;
51497: LD_ADDR_EXP 39
51501: PUSH
51502: LD_INT 0
51504: ST_TO_ADDR
// normalCounter := 36 ;
51505: LD_ADDR_EXP 40
51509: PUSH
51510: LD_INT 36
51512: ST_TO_ADDR
// hardcoreCounter := 18 ;
51513: LD_ADDR_EXP 41
51517: PUSH
51518: LD_INT 18
51520: ST_TO_ADDR
// sRocket := false ;
51521: LD_ADDR_EXP 44
51525: PUSH
51526: LD_INT 0
51528: ST_TO_ADDR
// sSpeed := false ;
51529: LD_ADDR_EXP 43
51533: PUSH
51534: LD_INT 0
51536: ST_TO_ADDR
// sEngine := false ;
51537: LD_ADDR_EXP 45
51541: PUSH
51542: LD_INT 0
51544: ST_TO_ADDR
// sSpec := false ;
51545: LD_ADDR_EXP 42
51549: PUSH
51550: LD_INT 0
51552: ST_TO_ADDR
// sLevel := false ;
51553: LD_ADDR_EXP 46
51557: PUSH
51558: LD_INT 0
51560: ST_TO_ADDR
// sArmoury := false ;
51561: LD_ADDR_EXP 47
51565: PUSH
51566: LD_INT 0
51568: ST_TO_ADDR
// sRadar := false ;
51569: LD_ADDR_EXP 48
51573: PUSH
51574: LD_INT 0
51576: ST_TO_ADDR
// sBunker := false ;
51577: LD_ADDR_EXP 49
51581: PUSH
51582: LD_INT 0
51584: ST_TO_ADDR
// sHack := false ;
51585: LD_ADDR_EXP 50
51589: PUSH
51590: LD_INT 0
51592: ST_TO_ADDR
// sFire := false ;
51593: LD_ADDR_EXP 51
51597: PUSH
51598: LD_INT 0
51600: ST_TO_ADDR
// sRefresh := false ;
51601: LD_ADDR_EXP 52
51605: PUSH
51606: LD_INT 0
51608: ST_TO_ADDR
// sExp := false ;
51609: LD_ADDR_EXP 53
51613: PUSH
51614: LD_INT 0
51616: ST_TO_ADDR
// sDepot := false ;
51617: LD_ADDR_EXP 54
51621: PUSH
51622: LD_INT 0
51624: ST_TO_ADDR
// sFlag := false ;
51625: LD_ADDR_EXP 55
51629: PUSH
51630: LD_INT 0
51632: ST_TO_ADDR
// sKamikadze := false ;
51633: LD_ADDR_EXP 63
51637: PUSH
51638: LD_INT 0
51640: ST_TO_ADDR
// sTroll := false ;
51641: LD_ADDR_EXP 64
51645: PUSH
51646: LD_INT 0
51648: ST_TO_ADDR
// sSlow := false ;
51649: LD_ADDR_EXP 65
51653: PUSH
51654: LD_INT 0
51656: ST_TO_ADDR
// sLack := false ;
51657: LD_ADDR_EXP 66
51661: PUSH
51662: LD_INT 0
51664: ST_TO_ADDR
// sTank := false ;
51665: LD_ADDR_EXP 68
51669: PUSH
51670: LD_INT 0
51672: ST_TO_ADDR
// sRemote := false ;
51673: LD_ADDR_EXP 69
51677: PUSH
51678: LD_INT 0
51680: ST_TO_ADDR
// sPowell := false ;
51681: LD_ADDR_EXP 70
51685: PUSH
51686: LD_INT 0
51688: ST_TO_ADDR
// sTeleport := false ;
51689: LD_ADDR_EXP 73
51693: PUSH
51694: LD_INT 0
51696: ST_TO_ADDR
// sOilTower := false ;
51697: LD_ADDR_EXP 75
51701: PUSH
51702: LD_INT 0
51704: ST_TO_ADDR
// sShovel := false ;
51705: LD_ADDR_EXP 76
51709: PUSH
51710: LD_INT 0
51712: ST_TO_ADDR
// sSheik := false ;
51713: LD_ADDR_EXP 77
51717: PUSH
51718: LD_INT 0
51720: ST_TO_ADDR
// sEarthquake := false ;
51721: LD_ADDR_EXP 79
51725: PUSH
51726: LD_INT 0
51728: ST_TO_ADDR
// sAI := false ;
51729: LD_ADDR_EXP 80
51733: PUSH
51734: LD_INT 0
51736: ST_TO_ADDR
// sCargo := false ;
51737: LD_ADDR_EXP 83
51741: PUSH
51742: LD_INT 0
51744: ST_TO_ADDR
// sDLaser := false ;
51745: LD_ADDR_EXP 84
51749: PUSH
51750: LD_INT 0
51752: ST_TO_ADDR
// sExchange := false ;
51753: LD_ADDR_EXP 85
51757: PUSH
51758: LD_INT 0
51760: ST_TO_ADDR
// sFac := false ;
51761: LD_ADDR_EXP 86
51765: PUSH
51766: LD_INT 0
51768: ST_TO_ADDR
// sPower := false ;
51769: LD_ADDR_EXP 87
51773: PUSH
51774: LD_INT 0
51776: ST_TO_ADDR
// sRandom := false ;
51777: LD_ADDR_EXP 88
51781: PUSH
51782: LD_INT 0
51784: ST_TO_ADDR
// sShield := false ;
51785: LD_ADDR_EXP 89
51789: PUSH
51790: LD_INT 0
51792: ST_TO_ADDR
// sTime := false ;
51793: LD_ADDR_EXP 90
51797: PUSH
51798: LD_INT 0
51800: ST_TO_ADDR
// sTools := false ;
51801: LD_ADDR_EXP 91
51805: PUSH
51806: LD_INT 0
51808: ST_TO_ADDR
// sSold := false ;
51809: LD_ADDR_EXP 56
51813: PUSH
51814: LD_INT 0
51816: ST_TO_ADDR
// sDiff := false ;
51817: LD_ADDR_EXP 57
51821: PUSH
51822: LD_INT 0
51824: ST_TO_ADDR
// sFog := false ;
51825: LD_ADDR_EXP 60
51829: PUSH
51830: LD_INT 0
51832: ST_TO_ADDR
// sReset := false ;
51833: LD_ADDR_EXP 61
51837: PUSH
51838: LD_INT 0
51840: ST_TO_ADDR
// sSun := false ;
51841: LD_ADDR_EXP 62
51845: PUSH
51846: LD_INT 0
51848: ST_TO_ADDR
// sTiger := false ;
51849: LD_ADDR_EXP 58
51853: PUSH
51854: LD_INT 0
51856: ST_TO_ADDR
// sBomb := false ;
51857: LD_ADDR_EXP 59
51861: PUSH
51862: LD_INT 0
51864: ST_TO_ADDR
// sWound := false ;
51865: LD_ADDR_EXP 67
51869: PUSH
51870: LD_INT 0
51872: ST_TO_ADDR
// sBetray := false ;
51873: LD_ADDR_EXP 71
51877: PUSH
51878: LD_INT 0
51880: ST_TO_ADDR
// sContamin := false ;
51881: LD_ADDR_EXP 72
51885: PUSH
51886: LD_INT 0
51888: ST_TO_ADDR
// sOil := false ;
51889: LD_ADDR_EXP 74
51893: PUSH
51894: LD_INT 0
51896: ST_TO_ADDR
// sStu := false ;
51897: LD_ADDR_EXP 78
51901: PUSH
51902: LD_INT 0
51904: ST_TO_ADDR
// sBazooka := false ;
51905: LD_ADDR_EXP 81
51909: PUSH
51910: LD_INT 0
51912: ST_TO_ADDR
// sMortar := false ;
51913: LD_ADDR_EXP 82
51917: PUSH
51918: LD_INT 0
51920: ST_TO_ADDR
// sRanger := false ;
51921: LD_ADDR_EXP 92
51925: PUSH
51926: LD_INT 0
51928: ST_TO_ADDR
// sComputer := false ;
51929: LD_ADDR_EXP 93
51933: PUSH
51934: LD_INT 0
51936: ST_TO_ADDR
// s30 := false ;
51937: LD_ADDR_EXP 94
51941: PUSH
51942: LD_INT 0
51944: ST_TO_ADDR
// s60 := false ;
51945: LD_ADDR_EXP 95
51949: PUSH
51950: LD_INT 0
51952: ST_TO_ADDR
// end ;
51953: LD_VAR 0 1
51957: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
51958: LD_INT 0
51960: PPUSH
51961: PPUSH
51962: PPUSH
51963: PPUSH
51964: PPUSH
51965: PPUSH
51966: PPUSH
// result := [ ] ;
51967: LD_ADDR_VAR 0 2
51971: PUSH
51972: EMPTY
51973: ST_TO_ADDR
// if campaign_id = 1 then
51974: LD_OWVAR 69
51978: PUSH
51979: LD_INT 1
51981: EQUAL
51982: IFFALSE 55148
// begin case mission_number of 1 :
51984: LD_OWVAR 70
51988: PUSH
51989: LD_INT 1
51991: DOUBLE
51992: EQUAL
51993: IFTRUE 51997
51995: GO 52073
51997: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
51998: LD_ADDR_VAR 0 2
52002: PUSH
52003: LD_INT 2
52005: PUSH
52006: LD_INT 4
52008: PUSH
52009: LD_INT 11
52011: PUSH
52012: LD_INT 12
52014: PUSH
52015: LD_INT 15
52017: PUSH
52018: LD_INT 16
52020: PUSH
52021: LD_INT 22
52023: PUSH
52024: LD_INT 23
52026: PUSH
52027: LD_INT 26
52029: PUSH
52030: EMPTY
52031: LIST
52032: LIST
52033: LIST
52034: LIST
52035: LIST
52036: LIST
52037: LIST
52038: LIST
52039: LIST
52040: PUSH
52041: LD_INT 101
52043: PUSH
52044: LD_INT 102
52046: PUSH
52047: LD_INT 106
52049: PUSH
52050: LD_INT 116
52052: PUSH
52053: LD_INT 117
52055: PUSH
52056: LD_INT 118
52058: PUSH
52059: EMPTY
52060: LIST
52061: LIST
52062: LIST
52063: LIST
52064: LIST
52065: LIST
52066: PUSH
52067: EMPTY
52068: LIST
52069: LIST
52070: ST_TO_ADDR
52071: GO 55146
52073: LD_INT 2
52075: DOUBLE
52076: EQUAL
52077: IFTRUE 52081
52079: GO 52165
52081: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
52082: LD_ADDR_VAR 0 2
52086: PUSH
52087: LD_INT 2
52089: PUSH
52090: LD_INT 4
52092: PUSH
52093: LD_INT 11
52095: PUSH
52096: LD_INT 12
52098: PUSH
52099: LD_INT 15
52101: PUSH
52102: LD_INT 16
52104: PUSH
52105: LD_INT 22
52107: PUSH
52108: LD_INT 23
52110: PUSH
52111: LD_INT 26
52113: PUSH
52114: EMPTY
52115: LIST
52116: LIST
52117: LIST
52118: LIST
52119: LIST
52120: LIST
52121: LIST
52122: LIST
52123: LIST
52124: PUSH
52125: LD_INT 101
52127: PUSH
52128: LD_INT 102
52130: PUSH
52131: LD_INT 105
52133: PUSH
52134: LD_INT 106
52136: PUSH
52137: LD_INT 108
52139: PUSH
52140: LD_INT 116
52142: PUSH
52143: LD_INT 117
52145: PUSH
52146: LD_INT 118
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: LIST
52153: LIST
52154: LIST
52155: LIST
52156: LIST
52157: LIST
52158: PUSH
52159: EMPTY
52160: LIST
52161: LIST
52162: ST_TO_ADDR
52163: GO 55146
52165: LD_INT 3
52167: DOUBLE
52168: EQUAL
52169: IFTRUE 52173
52171: GO 52261
52173: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
52174: LD_ADDR_VAR 0 2
52178: PUSH
52179: LD_INT 2
52181: PUSH
52182: LD_INT 4
52184: PUSH
52185: LD_INT 5
52187: PUSH
52188: LD_INT 11
52190: PUSH
52191: LD_INT 12
52193: PUSH
52194: LD_INT 15
52196: PUSH
52197: LD_INT 16
52199: PUSH
52200: LD_INT 22
52202: PUSH
52203: LD_INT 26
52205: PUSH
52206: LD_INT 36
52208: PUSH
52209: EMPTY
52210: LIST
52211: LIST
52212: LIST
52213: LIST
52214: LIST
52215: LIST
52216: LIST
52217: LIST
52218: LIST
52219: LIST
52220: PUSH
52221: LD_INT 101
52223: PUSH
52224: LD_INT 102
52226: PUSH
52227: LD_INT 105
52229: PUSH
52230: LD_INT 106
52232: PUSH
52233: LD_INT 108
52235: PUSH
52236: LD_INT 116
52238: PUSH
52239: LD_INT 117
52241: PUSH
52242: LD_INT 118
52244: PUSH
52245: EMPTY
52246: LIST
52247: LIST
52248: LIST
52249: LIST
52250: LIST
52251: LIST
52252: LIST
52253: LIST
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: ST_TO_ADDR
52259: GO 55146
52261: LD_INT 4
52263: DOUBLE
52264: EQUAL
52265: IFTRUE 52269
52267: GO 52365
52269: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
52270: LD_ADDR_VAR 0 2
52274: PUSH
52275: LD_INT 2
52277: PUSH
52278: LD_INT 4
52280: PUSH
52281: LD_INT 5
52283: PUSH
52284: LD_INT 8
52286: PUSH
52287: LD_INT 11
52289: PUSH
52290: LD_INT 12
52292: PUSH
52293: LD_INT 15
52295: PUSH
52296: LD_INT 16
52298: PUSH
52299: LD_INT 22
52301: PUSH
52302: LD_INT 23
52304: PUSH
52305: LD_INT 26
52307: PUSH
52308: LD_INT 36
52310: PUSH
52311: EMPTY
52312: LIST
52313: LIST
52314: LIST
52315: LIST
52316: LIST
52317: LIST
52318: LIST
52319: LIST
52320: LIST
52321: LIST
52322: LIST
52323: LIST
52324: PUSH
52325: LD_INT 101
52327: PUSH
52328: LD_INT 102
52330: PUSH
52331: LD_INT 105
52333: PUSH
52334: LD_INT 106
52336: PUSH
52337: LD_INT 108
52339: PUSH
52340: LD_INT 116
52342: PUSH
52343: LD_INT 117
52345: PUSH
52346: LD_INT 118
52348: PUSH
52349: EMPTY
52350: LIST
52351: LIST
52352: LIST
52353: LIST
52354: LIST
52355: LIST
52356: LIST
52357: LIST
52358: PUSH
52359: EMPTY
52360: LIST
52361: LIST
52362: ST_TO_ADDR
52363: GO 55146
52365: LD_INT 5
52367: DOUBLE
52368: EQUAL
52369: IFTRUE 52373
52371: GO 52485
52373: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
52374: LD_ADDR_VAR 0 2
52378: PUSH
52379: LD_INT 2
52381: PUSH
52382: LD_INT 4
52384: PUSH
52385: LD_INT 5
52387: PUSH
52388: LD_INT 6
52390: PUSH
52391: LD_INT 8
52393: PUSH
52394: LD_INT 11
52396: PUSH
52397: LD_INT 12
52399: PUSH
52400: LD_INT 15
52402: PUSH
52403: LD_INT 16
52405: PUSH
52406: LD_INT 22
52408: PUSH
52409: LD_INT 23
52411: PUSH
52412: LD_INT 25
52414: PUSH
52415: LD_INT 26
52417: PUSH
52418: LD_INT 36
52420: PUSH
52421: EMPTY
52422: LIST
52423: LIST
52424: LIST
52425: LIST
52426: LIST
52427: LIST
52428: LIST
52429: LIST
52430: LIST
52431: LIST
52432: LIST
52433: LIST
52434: LIST
52435: LIST
52436: PUSH
52437: LD_INT 101
52439: PUSH
52440: LD_INT 102
52442: PUSH
52443: LD_INT 105
52445: PUSH
52446: LD_INT 106
52448: PUSH
52449: LD_INT 108
52451: PUSH
52452: LD_INT 109
52454: PUSH
52455: LD_INT 112
52457: PUSH
52458: LD_INT 116
52460: PUSH
52461: LD_INT 117
52463: PUSH
52464: LD_INT 118
52466: PUSH
52467: EMPTY
52468: LIST
52469: LIST
52470: LIST
52471: LIST
52472: LIST
52473: LIST
52474: LIST
52475: LIST
52476: LIST
52477: LIST
52478: PUSH
52479: EMPTY
52480: LIST
52481: LIST
52482: ST_TO_ADDR
52483: GO 55146
52485: LD_INT 6
52487: DOUBLE
52488: EQUAL
52489: IFTRUE 52493
52491: GO 52625
52493: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
52494: LD_ADDR_VAR 0 2
52498: PUSH
52499: LD_INT 2
52501: PUSH
52502: LD_INT 4
52504: PUSH
52505: LD_INT 5
52507: PUSH
52508: LD_INT 6
52510: PUSH
52511: LD_INT 8
52513: PUSH
52514: LD_INT 11
52516: PUSH
52517: LD_INT 12
52519: PUSH
52520: LD_INT 15
52522: PUSH
52523: LD_INT 16
52525: PUSH
52526: LD_INT 20
52528: PUSH
52529: LD_INT 21
52531: PUSH
52532: LD_INT 22
52534: PUSH
52535: LD_INT 23
52537: PUSH
52538: LD_INT 25
52540: PUSH
52541: LD_INT 26
52543: PUSH
52544: LD_INT 30
52546: PUSH
52547: LD_INT 31
52549: PUSH
52550: LD_INT 32
52552: PUSH
52553: LD_INT 36
52555: PUSH
52556: EMPTY
52557: LIST
52558: LIST
52559: LIST
52560: LIST
52561: LIST
52562: LIST
52563: LIST
52564: LIST
52565: LIST
52566: LIST
52567: LIST
52568: LIST
52569: LIST
52570: LIST
52571: LIST
52572: LIST
52573: LIST
52574: LIST
52575: LIST
52576: PUSH
52577: LD_INT 101
52579: PUSH
52580: LD_INT 102
52582: PUSH
52583: LD_INT 105
52585: PUSH
52586: LD_INT 106
52588: PUSH
52589: LD_INT 108
52591: PUSH
52592: LD_INT 109
52594: PUSH
52595: LD_INT 112
52597: PUSH
52598: LD_INT 116
52600: PUSH
52601: LD_INT 117
52603: PUSH
52604: LD_INT 118
52606: PUSH
52607: EMPTY
52608: LIST
52609: LIST
52610: LIST
52611: LIST
52612: LIST
52613: LIST
52614: LIST
52615: LIST
52616: LIST
52617: LIST
52618: PUSH
52619: EMPTY
52620: LIST
52621: LIST
52622: ST_TO_ADDR
52623: GO 55146
52625: LD_INT 7
52627: DOUBLE
52628: EQUAL
52629: IFTRUE 52633
52631: GO 52745
52633: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
52634: LD_ADDR_VAR 0 2
52638: PUSH
52639: LD_INT 2
52641: PUSH
52642: LD_INT 4
52644: PUSH
52645: LD_INT 5
52647: PUSH
52648: LD_INT 7
52650: PUSH
52651: LD_INT 11
52653: PUSH
52654: LD_INT 12
52656: PUSH
52657: LD_INT 15
52659: PUSH
52660: LD_INT 16
52662: PUSH
52663: LD_INT 20
52665: PUSH
52666: LD_INT 21
52668: PUSH
52669: LD_INT 22
52671: PUSH
52672: LD_INT 23
52674: PUSH
52675: LD_INT 25
52677: PUSH
52678: LD_INT 26
52680: PUSH
52681: EMPTY
52682: LIST
52683: LIST
52684: LIST
52685: LIST
52686: LIST
52687: LIST
52688: LIST
52689: LIST
52690: LIST
52691: LIST
52692: LIST
52693: LIST
52694: LIST
52695: LIST
52696: PUSH
52697: LD_INT 101
52699: PUSH
52700: LD_INT 102
52702: PUSH
52703: LD_INT 103
52705: PUSH
52706: LD_INT 105
52708: PUSH
52709: LD_INT 106
52711: PUSH
52712: LD_INT 108
52714: PUSH
52715: LD_INT 112
52717: PUSH
52718: LD_INT 116
52720: PUSH
52721: LD_INT 117
52723: PUSH
52724: LD_INT 118
52726: PUSH
52727: EMPTY
52728: LIST
52729: LIST
52730: LIST
52731: LIST
52732: LIST
52733: LIST
52734: LIST
52735: LIST
52736: LIST
52737: LIST
52738: PUSH
52739: EMPTY
52740: LIST
52741: LIST
52742: ST_TO_ADDR
52743: GO 55146
52745: LD_INT 8
52747: DOUBLE
52748: EQUAL
52749: IFTRUE 52753
52751: GO 52893
52753: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
52754: LD_ADDR_VAR 0 2
52758: PUSH
52759: LD_INT 2
52761: PUSH
52762: LD_INT 4
52764: PUSH
52765: LD_INT 5
52767: PUSH
52768: LD_INT 6
52770: PUSH
52771: LD_INT 7
52773: PUSH
52774: LD_INT 8
52776: PUSH
52777: LD_INT 11
52779: PUSH
52780: LD_INT 12
52782: PUSH
52783: LD_INT 15
52785: PUSH
52786: LD_INT 16
52788: PUSH
52789: LD_INT 20
52791: PUSH
52792: LD_INT 21
52794: PUSH
52795: LD_INT 22
52797: PUSH
52798: LD_INT 23
52800: PUSH
52801: LD_INT 25
52803: PUSH
52804: LD_INT 26
52806: PUSH
52807: LD_INT 30
52809: PUSH
52810: LD_INT 31
52812: PUSH
52813: LD_INT 32
52815: PUSH
52816: LD_INT 36
52818: PUSH
52819: EMPTY
52820: LIST
52821: LIST
52822: LIST
52823: LIST
52824: LIST
52825: LIST
52826: LIST
52827: LIST
52828: LIST
52829: LIST
52830: LIST
52831: LIST
52832: LIST
52833: LIST
52834: LIST
52835: LIST
52836: LIST
52837: LIST
52838: LIST
52839: LIST
52840: PUSH
52841: LD_INT 101
52843: PUSH
52844: LD_INT 102
52846: PUSH
52847: LD_INT 103
52849: PUSH
52850: LD_INT 105
52852: PUSH
52853: LD_INT 106
52855: PUSH
52856: LD_INT 108
52858: PUSH
52859: LD_INT 109
52861: PUSH
52862: LD_INT 112
52864: PUSH
52865: LD_INT 116
52867: PUSH
52868: LD_INT 117
52870: PUSH
52871: LD_INT 118
52873: PUSH
52874: EMPTY
52875: LIST
52876: LIST
52877: LIST
52878: LIST
52879: LIST
52880: LIST
52881: LIST
52882: LIST
52883: LIST
52884: LIST
52885: LIST
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: ST_TO_ADDR
52891: GO 55146
52893: LD_INT 9
52895: DOUBLE
52896: EQUAL
52897: IFTRUE 52901
52899: GO 53049
52901: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
52902: LD_ADDR_VAR 0 2
52906: PUSH
52907: LD_INT 2
52909: PUSH
52910: LD_INT 4
52912: PUSH
52913: LD_INT 5
52915: PUSH
52916: LD_INT 6
52918: PUSH
52919: LD_INT 7
52921: PUSH
52922: LD_INT 8
52924: PUSH
52925: LD_INT 11
52927: PUSH
52928: LD_INT 12
52930: PUSH
52931: LD_INT 15
52933: PUSH
52934: LD_INT 16
52936: PUSH
52937: LD_INT 20
52939: PUSH
52940: LD_INT 21
52942: PUSH
52943: LD_INT 22
52945: PUSH
52946: LD_INT 23
52948: PUSH
52949: LD_INT 25
52951: PUSH
52952: LD_INT 26
52954: PUSH
52955: LD_INT 28
52957: PUSH
52958: LD_INT 30
52960: PUSH
52961: LD_INT 31
52963: PUSH
52964: LD_INT 32
52966: PUSH
52967: LD_INT 36
52969: PUSH
52970: EMPTY
52971: LIST
52972: LIST
52973: LIST
52974: LIST
52975: LIST
52976: LIST
52977: LIST
52978: LIST
52979: LIST
52980: LIST
52981: LIST
52982: LIST
52983: LIST
52984: LIST
52985: LIST
52986: LIST
52987: LIST
52988: LIST
52989: LIST
52990: LIST
52991: LIST
52992: PUSH
52993: LD_INT 101
52995: PUSH
52996: LD_INT 102
52998: PUSH
52999: LD_INT 103
53001: PUSH
53002: LD_INT 105
53004: PUSH
53005: LD_INT 106
53007: PUSH
53008: LD_INT 108
53010: PUSH
53011: LD_INT 109
53013: PUSH
53014: LD_INT 112
53016: PUSH
53017: LD_INT 114
53019: PUSH
53020: LD_INT 116
53022: PUSH
53023: LD_INT 117
53025: PUSH
53026: LD_INT 118
53028: PUSH
53029: EMPTY
53030: LIST
53031: LIST
53032: LIST
53033: LIST
53034: LIST
53035: LIST
53036: LIST
53037: LIST
53038: LIST
53039: LIST
53040: LIST
53041: LIST
53042: PUSH
53043: EMPTY
53044: LIST
53045: LIST
53046: ST_TO_ADDR
53047: GO 55146
53049: LD_INT 10
53051: DOUBLE
53052: EQUAL
53053: IFTRUE 53057
53055: GO 53253
53057: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
53058: LD_ADDR_VAR 0 2
53062: PUSH
53063: LD_INT 2
53065: PUSH
53066: LD_INT 4
53068: PUSH
53069: LD_INT 5
53071: PUSH
53072: LD_INT 6
53074: PUSH
53075: LD_INT 7
53077: PUSH
53078: LD_INT 8
53080: PUSH
53081: LD_INT 9
53083: PUSH
53084: LD_INT 10
53086: PUSH
53087: LD_INT 11
53089: PUSH
53090: LD_INT 12
53092: PUSH
53093: LD_INT 13
53095: PUSH
53096: LD_INT 14
53098: PUSH
53099: LD_INT 15
53101: PUSH
53102: LD_INT 16
53104: PUSH
53105: LD_INT 17
53107: PUSH
53108: LD_INT 18
53110: PUSH
53111: LD_INT 19
53113: PUSH
53114: LD_INT 20
53116: PUSH
53117: LD_INT 21
53119: PUSH
53120: LD_INT 22
53122: PUSH
53123: LD_INT 23
53125: PUSH
53126: LD_INT 24
53128: PUSH
53129: LD_INT 25
53131: PUSH
53132: LD_INT 26
53134: PUSH
53135: LD_INT 28
53137: PUSH
53138: LD_INT 30
53140: PUSH
53141: LD_INT 31
53143: PUSH
53144: LD_INT 32
53146: PUSH
53147: LD_INT 36
53149: PUSH
53150: EMPTY
53151: LIST
53152: LIST
53153: LIST
53154: LIST
53155: LIST
53156: LIST
53157: LIST
53158: LIST
53159: LIST
53160: LIST
53161: LIST
53162: LIST
53163: LIST
53164: LIST
53165: LIST
53166: LIST
53167: LIST
53168: LIST
53169: LIST
53170: LIST
53171: LIST
53172: LIST
53173: LIST
53174: LIST
53175: LIST
53176: LIST
53177: LIST
53178: LIST
53179: LIST
53180: PUSH
53181: LD_INT 101
53183: PUSH
53184: LD_INT 102
53186: PUSH
53187: LD_INT 103
53189: PUSH
53190: LD_INT 104
53192: PUSH
53193: LD_INT 105
53195: PUSH
53196: LD_INT 106
53198: PUSH
53199: LD_INT 107
53201: PUSH
53202: LD_INT 108
53204: PUSH
53205: LD_INT 109
53207: PUSH
53208: LD_INT 110
53210: PUSH
53211: LD_INT 111
53213: PUSH
53214: LD_INT 112
53216: PUSH
53217: LD_INT 114
53219: PUSH
53220: LD_INT 116
53222: PUSH
53223: LD_INT 117
53225: PUSH
53226: LD_INT 118
53228: PUSH
53229: EMPTY
53230: LIST
53231: LIST
53232: LIST
53233: LIST
53234: LIST
53235: LIST
53236: LIST
53237: LIST
53238: LIST
53239: LIST
53240: LIST
53241: LIST
53242: LIST
53243: LIST
53244: LIST
53245: LIST
53246: PUSH
53247: EMPTY
53248: LIST
53249: LIST
53250: ST_TO_ADDR
53251: GO 55146
53253: LD_INT 11
53255: DOUBLE
53256: EQUAL
53257: IFTRUE 53261
53259: GO 53465
53261: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
53262: LD_ADDR_VAR 0 2
53266: PUSH
53267: LD_INT 2
53269: PUSH
53270: LD_INT 3
53272: PUSH
53273: LD_INT 4
53275: PUSH
53276: LD_INT 5
53278: PUSH
53279: LD_INT 6
53281: PUSH
53282: LD_INT 7
53284: PUSH
53285: LD_INT 8
53287: PUSH
53288: LD_INT 9
53290: PUSH
53291: LD_INT 10
53293: PUSH
53294: LD_INT 11
53296: PUSH
53297: LD_INT 12
53299: PUSH
53300: LD_INT 13
53302: PUSH
53303: LD_INT 14
53305: PUSH
53306: LD_INT 15
53308: PUSH
53309: LD_INT 16
53311: PUSH
53312: LD_INT 17
53314: PUSH
53315: LD_INT 18
53317: PUSH
53318: LD_INT 19
53320: PUSH
53321: LD_INT 20
53323: PUSH
53324: LD_INT 21
53326: PUSH
53327: LD_INT 22
53329: PUSH
53330: LD_INT 23
53332: PUSH
53333: LD_INT 24
53335: PUSH
53336: LD_INT 25
53338: PUSH
53339: LD_INT 26
53341: PUSH
53342: LD_INT 28
53344: PUSH
53345: LD_INT 30
53347: PUSH
53348: LD_INT 31
53350: PUSH
53351: LD_INT 32
53353: PUSH
53354: LD_INT 34
53356: PUSH
53357: LD_INT 36
53359: PUSH
53360: EMPTY
53361: LIST
53362: LIST
53363: LIST
53364: LIST
53365: LIST
53366: LIST
53367: LIST
53368: LIST
53369: LIST
53370: LIST
53371: LIST
53372: LIST
53373: LIST
53374: LIST
53375: LIST
53376: LIST
53377: LIST
53378: LIST
53379: LIST
53380: LIST
53381: LIST
53382: LIST
53383: LIST
53384: LIST
53385: LIST
53386: LIST
53387: LIST
53388: LIST
53389: LIST
53390: LIST
53391: LIST
53392: PUSH
53393: LD_INT 101
53395: PUSH
53396: LD_INT 102
53398: PUSH
53399: LD_INT 103
53401: PUSH
53402: LD_INT 104
53404: PUSH
53405: LD_INT 105
53407: PUSH
53408: LD_INT 106
53410: PUSH
53411: LD_INT 107
53413: PUSH
53414: LD_INT 108
53416: PUSH
53417: LD_INT 109
53419: PUSH
53420: LD_INT 110
53422: PUSH
53423: LD_INT 111
53425: PUSH
53426: LD_INT 112
53428: PUSH
53429: LD_INT 114
53431: PUSH
53432: LD_INT 116
53434: PUSH
53435: LD_INT 117
53437: PUSH
53438: LD_INT 118
53440: PUSH
53441: EMPTY
53442: LIST
53443: LIST
53444: LIST
53445: LIST
53446: LIST
53447: LIST
53448: LIST
53449: LIST
53450: LIST
53451: LIST
53452: LIST
53453: LIST
53454: LIST
53455: LIST
53456: LIST
53457: LIST
53458: PUSH
53459: EMPTY
53460: LIST
53461: LIST
53462: ST_TO_ADDR
53463: GO 55146
53465: LD_INT 12
53467: DOUBLE
53468: EQUAL
53469: IFTRUE 53473
53471: GO 53693
53473: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
53474: LD_ADDR_VAR 0 2
53478: PUSH
53479: LD_INT 1
53481: PUSH
53482: LD_INT 2
53484: PUSH
53485: LD_INT 3
53487: PUSH
53488: LD_INT 4
53490: PUSH
53491: LD_INT 5
53493: PUSH
53494: LD_INT 6
53496: PUSH
53497: LD_INT 7
53499: PUSH
53500: LD_INT 8
53502: PUSH
53503: LD_INT 9
53505: PUSH
53506: LD_INT 10
53508: PUSH
53509: LD_INT 11
53511: PUSH
53512: LD_INT 12
53514: PUSH
53515: LD_INT 13
53517: PUSH
53518: LD_INT 14
53520: PUSH
53521: LD_INT 15
53523: PUSH
53524: LD_INT 16
53526: PUSH
53527: LD_INT 17
53529: PUSH
53530: LD_INT 18
53532: PUSH
53533: LD_INT 19
53535: PUSH
53536: LD_INT 20
53538: PUSH
53539: LD_INT 21
53541: PUSH
53542: LD_INT 22
53544: PUSH
53545: LD_INT 23
53547: PUSH
53548: LD_INT 24
53550: PUSH
53551: LD_INT 25
53553: PUSH
53554: LD_INT 26
53556: PUSH
53557: LD_INT 27
53559: PUSH
53560: LD_INT 28
53562: PUSH
53563: LD_INT 30
53565: PUSH
53566: LD_INT 31
53568: PUSH
53569: LD_INT 32
53571: PUSH
53572: LD_INT 33
53574: PUSH
53575: LD_INT 34
53577: PUSH
53578: LD_INT 36
53580: PUSH
53581: EMPTY
53582: LIST
53583: LIST
53584: LIST
53585: LIST
53586: LIST
53587: LIST
53588: LIST
53589: LIST
53590: LIST
53591: LIST
53592: LIST
53593: LIST
53594: LIST
53595: LIST
53596: LIST
53597: LIST
53598: LIST
53599: LIST
53600: LIST
53601: LIST
53602: LIST
53603: LIST
53604: LIST
53605: LIST
53606: LIST
53607: LIST
53608: LIST
53609: LIST
53610: LIST
53611: LIST
53612: LIST
53613: LIST
53614: LIST
53615: LIST
53616: PUSH
53617: LD_INT 101
53619: PUSH
53620: LD_INT 102
53622: PUSH
53623: LD_INT 103
53625: PUSH
53626: LD_INT 104
53628: PUSH
53629: LD_INT 105
53631: PUSH
53632: LD_INT 106
53634: PUSH
53635: LD_INT 107
53637: PUSH
53638: LD_INT 108
53640: PUSH
53641: LD_INT 109
53643: PUSH
53644: LD_INT 110
53646: PUSH
53647: LD_INT 111
53649: PUSH
53650: LD_INT 112
53652: PUSH
53653: LD_INT 113
53655: PUSH
53656: LD_INT 114
53658: PUSH
53659: LD_INT 116
53661: PUSH
53662: LD_INT 117
53664: PUSH
53665: LD_INT 118
53667: PUSH
53668: EMPTY
53669: LIST
53670: LIST
53671: LIST
53672: LIST
53673: LIST
53674: LIST
53675: LIST
53676: LIST
53677: LIST
53678: LIST
53679: LIST
53680: LIST
53681: LIST
53682: LIST
53683: LIST
53684: LIST
53685: LIST
53686: PUSH
53687: EMPTY
53688: LIST
53689: LIST
53690: ST_TO_ADDR
53691: GO 55146
53693: LD_INT 13
53695: DOUBLE
53696: EQUAL
53697: IFTRUE 53701
53699: GO 53909
53701: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
53702: LD_ADDR_VAR 0 2
53706: PUSH
53707: LD_INT 1
53709: PUSH
53710: LD_INT 2
53712: PUSH
53713: LD_INT 3
53715: PUSH
53716: LD_INT 4
53718: PUSH
53719: LD_INT 5
53721: PUSH
53722: LD_INT 8
53724: PUSH
53725: LD_INT 9
53727: PUSH
53728: LD_INT 10
53730: PUSH
53731: LD_INT 11
53733: PUSH
53734: LD_INT 12
53736: PUSH
53737: LD_INT 14
53739: PUSH
53740: LD_INT 15
53742: PUSH
53743: LD_INT 16
53745: PUSH
53746: LD_INT 17
53748: PUSH
53749: LD_INT 18
53751: PUSH
53752: LD_INT 19
53754: PUSH
53755: LD_INT 20
53757: PUSH
53758: LD_INT 21
53760: PUSH
53761: LD_INT 22
53763: PUSH
53764: LD_INT 23
53766: PUSH
53767: LD_INT 24
53769: PUSH
53770: LD_INT 25
53772: PUSH
53773: LD_INT 26
53775: PUSH
53776: LD_INT 27
53778: PUSH
53779: LD_INT 28
53781: PUSH
53782: LD_INT 30
53784: PUSH
53785: LD_INT 31
53787: PUSH
53788: LD_INT 32
53790: PUSH
53791: LD_INT 33
53793: PUSH
53794: LD_INT 34
53796: PUSH
53797: LD_INT 36
53799: PUSH
53800: EMPTY
53801: LIST
53802: LIST
53803: LIST
53804: LIST
53805: LIST
53806: LIST
53807: LIST
53808: LIST
53809: LIST
53810: LIST
53811: LIST
53812: LIST
53813: LIST
53814: LIST
53815: LIST
53816: LIST
53817: LIST
53818: LIST
53819: LIST
53820: LIST
53821: LIST
53822: LIST
53823: LIST
53824: LIST
53825: LIST
53826: LIST
53827: LIST
53828: LIST
53829: LIST
53830: LIST
53831: LIST
53832: PUSH
53833: LD_INT 101
53835: PUSH
53836: LD_INT 102
53838: PUSH
53839: LD_INT 103
53841: PUSH
53842: LD_INT 104
53844: PUSH
53845: LD_INT 105
53847: PUSH
53848: LD_INT 106
53850: PUSH
53851: LD_INT 107
53853: PUSH
53854: LD_INT 108
53856: PUSH
53857: LD_INT 109
53859: PUSH
53860: LD_INT 110
53862: PUSH
53863: LD_INT 111
53865: PUSH
53866: LD_INT 112
53868: PUSH
53869: LD_INT 113
53871: PUSH
53872: LD_INT 114
53874: PUSH
53875: LD_INT 116
53877: PUSH
53878: LD_INT 117
53880: PUSH
53881: LD_INT 118
53883: PUSH
53884: EMPTY
53885: LIST
53886: LIST
53887: LIST
53888: LIST
53889: LIST
53890: LIST
53891: LIST
53892: LIST
53893: LIST
53894: LIST
53895: LIST
53896: LIST
53897: LIST
53898: LIST
53899: LIST
53900: LIST
53901: LIST
53902: PUSH
53903: EMPTY
53904: LIST
53905: LIST
53906: ST_TO_ADDR
53907: GO 55146
53909: LD_INT 14
53911: DOUBLE
53912: EQUAL
53913: IFTRUE 53917
53915: GO 54141
53917: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
53918: LD_ADDR_VAR 0 2
53922: PUSH
53923: LD_INT 1
53925: PUSH
53926: LD_INT 2
53928: PUSH
53929: LD_INT 3
53931: PUSH
53932: LD_INT 4
53934: PUSH
53935: LD_INT 5
53937: PUSH
53938: LD_INT 6
53940: PUSH
53941: LD_INT 7
53943: PUSH
53944: LD_INT 8
53946: PUSH
53947: LD_INT 9
53949: PUSH
53950: LD_INT 10
53952: PUSH
53953: LD_INT 11
53955: PUSH
53956: LD_INT 12
53958: PUSH
53959: LD_INT 13
53961: PUSH
53962: LD_INT 14
53964: PUSH
53965: LD_INT 15
53967: PUSH
53968: LD_INT 16
53970: PUSH
53971: LD_INT 17
53973: PUSH
53974: LD_INT 18
53976: PUSH
53977: LD_INT 19
53979: PUSH
53980: LD_INT 20
53982: PUSH
53983: LD_INT 21
53985: PUSH
53986: LD_INT 22
53988: PUSH
53989: LD_INT 23
53991: PUSH
53992: LD_INT 24
53994: PUSH
53995: LD_INT 25
53997: PUSH
53998: LD_INT 26
54000: PUSH
54001: LD_INT 27
54003: PUSH
54004: LD_INT 28
54006: PUSH
54007: LD_INT 29
54009: PUSH
54010: LD_INT 30
54012: PUSH
54013: LD_INT 31
54015: PUSH
54016: LD_INT 32
54018: PUSH
54019: LD_INT 33
54021: PUSH
54022: LD_INT 34
54024: PUSH
54025: LD_INT 36
54027: PUSH
54028: EMPTY
54029: LIST
54030: LIST
54031: LIST
54032: LIST
54033: LIST
54034: LIST
54035: LIST
54036: LIST
54037: LIST
54038: LIST
54039: LIST
54040: LIST
54041: LIST
54042: LIST
54043: LIST
54044: LIST
54045: LIST
54046: LIST
54047: LIST
54048: LIST
54049: LIST
54050: LIST
54051: LIST
54052: LIST
54053: LIST
54054: LIST
54055: LIST
54056: LIST
54057: LIST
54058: LIST
54059: LIST
54060: LIST
54061: LIST
54062: LIST
54063: LIST
54064: PUSH
54065: LD_INT 101
54067: PUSH
54068: LD_INT 102
54070: PUSH
54071: LD_INT 103
54073: PUSH
54074: LD_INT 104
54076: PUSH
54077: LD_INT 105
54079: PUSH
54080: LD_INT 106
54082: PUSH
54083: LD_INT 107
54085: PUSH
54086: LD_INT 108
54088: PUSH
54089: LD_INT 109
54091: PUSH
54092: LD_INT 110
54094: PUSH
54095: LD_INT 111
54097: PUSH
54098: LD_INT 112
54100: PUSH
54101: LD_INT 113
54103: PUSH
54104: LD_INT 114
54106: PUSH
54107: LD_INT 116
54109: PUSH
54110: LD_INT 117
54112: PUSH
54113: LD_INT 118
54115: PUSH
54116: EMPTY
54117: LIST
54118: LIST
54119: LIST
54120: LIST
54121: LIST
54122: LIST
54123: LIST
54124: LIST
54125: LIST
54126: LIST
54127: LIST
54128: LIST
54129: LIST
54130: LIST
54131: LIST
54132: LIST
54133: LIST
54134: PUSH
54135: EMPTY
54136: LIST
54137: LIST
54138: ST_TO_ADDR
54139: GO 55146
54141: LD_INT 15
54143: DOUBLE
54144: EQUAL
54145: IFTRUE 54149
54147: GO 54373
54149: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
54150: LD_ADDR_VAR 0 2
54154: PUSH
54155: LD_INT 1
54157: PUSH
54158: LD_INT 2
54160: PUSH
54161: LD_INT 3
54163: PUSH
54164: LD_INT 4
54166: PUSH
54167: LD_INT 5
54169: PUSH
54170: LD_INT 6
54172: PUSH
54173: LD_INT 7
54175: PUSH
54176: LD_INT 8
54178: PUSH
54179: LD_INT 9
54181: PUSH
54182: LD_INT 10
54184: PUSH
54185: LD_INT 11
54187: PUSH
54188: LD_INT 12
54190: PUSH
54191: LD_INT 13
54193: PUSH
54194: LD_INT 14
54196: PUSH
54197: LD_INT 15
54199: PUSH
54200: LD_INT 16
54202: PUSH
54203: LD_INT 17
54205: PUSH
54206: LD_INT 18
54208: PUSH
54209: LD_INT 19
54211: PUSH
54212: LD_INT 20
54214: PUSH
54215: LD_INT 21
54217: PUSH
54218: LD_INT 22
54220: PUSH
54221: LD_INT 23
54223: PUSH
54224: LD_INT 24
54226: PUSH
54227: LD_INT 25
54229: PUSH
54230: LD_INT 26
54232: PUSH
54233: LD_INT 27
54235: PUSH
54236: LD_INT 28
54238: PUSH
54239: LD_INT 29
54241: PUSH
54242: LD_INT 30
54244: PUSH
54245: LD_INT 31
54247: PUSH
54248: LD_INT 32
54250: PUSH
54251: LD_INT 33
54253: PUSH
54254: LD_INT 34
54256: PUSH
54257: LD_INT 36
54259: PUSH
54260: EMPTY
54261: LIST
54262: LIST
54263: LIST
54264: LIST
54265: LIST
54266: LIST
54267: LIST
54268: LIST
54269: LIST
54270: LIST
54271: LIST
54272: LIST
54273: LIST
54274: LIST
54275: LIST
54276: LIST
54277: LIST
54278: LIST
54279: LIST
54280: LIST
54281: LIST
54282: LIST
54283: LIST
54284: LIST
54285: LIST
54286: LIST
54287: LIST
54288: LIST
54289: LIST
54290: LIST
54291: LIST
54292: LIST
54293: LIST
54294: LIST
54295: LIST
54296: PUSH
54297: LD_INT 101
54299: PUSH
54300: LD_INT 102
54302: PUSH
54303: LD_INT 103
54305: PUSH
54306: LD_INT 104
54308: PUSH
54309: LD_INT 105
54311: PUSH
54312: LD_INT 106
54314: PUSH
54315: LD_INT 107
54317: PUSH
54318: LD_INT 108
54320: PUSH
54321: LD_INT 109
54323: PUSH
54324: LD_INT 110
54326: PUSH
54327: LD_INT 111
54329: PUSH
54330: LD_INT 112
54332: PUSH
54333: LD_INT 113
54335: PUSH
54336: LD_INT 114
54338: PUSH
54339: LD_INT 116
54341: PUSH
54342: LD_INT 117
54344: PUSH
54345: LD_INT 118
54347: PUSH
54348: EMPTY
54349: LIST
54350: LIST
54351: LIST
54352: LIST
54353: LIST
54354: LIST
54355: LIST
54356: LIST
54357: LIST
54358: LIST
54359: LIST
54360: LIST
54361: LIST
54362: LIST
54363: LIST
54364: LIST
54365: LIST
54366: PUSH
54367: EMPTY
54368: LIST
54369: LIST
54370: ST_TO_ADDR
54371: GO 55146
54373: LD_INT 16
54375: DOUBLE
54376: EQUAL
54377: IFTRUE 54381
54379: GO 54517
54381: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
54382: LD_ADDR_VAR 0 2
54386: PUSH
54387: LD_INT 2
54389: PUSH
54390: LD_INT 4
54392: PUSH
54393: LD_INT 5
54395: PUSH
54396: LD_INT 7
54398: PUSH
54399: LD_INT 11
54401: PUSH
54402: LD_INT 12
54404: PUSH
54405: LD_INT 15
54407: PUSH
54408: LD_INT 16
54410: PUSH
54411: LD_INT 20
54413: PUSH
54414: LD_INT 21
54416: PUSH
54417: LD_INT 22
54419: PUSH
54420: LD_INT 23
54422: PUSH
54423: LD_INT 25
54425: PUSH
54426: LD_INT 26
54428: PUSH
54429: LD_INT 30
54431: PUSH
54432: LD_INT 31
54434: PUSH
54435: LD_INT 32
54437: PUSH
54438: LD_INT 33
54440: PUSH
54441: LD_INT 34
54443: PUSH
54444: EMPTY
54445: LIST
54446: LIST
54447: LIST
54448: LIST
54449: LIST
54450: LIST
54451: LIST
54452: LIST
54453: LIST
54454: LIST
54455: LIST
54456: LIST
54457: LIST
54458: LIST
54459: LIST
54460: LIST
54461: LIST
54462: LIST
54463: LIST
54464: PUSH
54465: LD_INT 101
54467: PUSH
54468: LD_INT 102
54470: PUSH
54471: LD_INT 103
54473: PUSH
54474: LD_INT 106
54476: PUSH
54477: LD_INT 108
54479: PUSH
54480: LD_INT 112
54482: PUSH
54483: LD_INT 113
54485: PUSH
54486: LD_INT 114
54488: PUSH
54489: LD_INT 116
54491: PUSH
54492: LD_INT 117
54494: PUSH
54495: LD_INT 118
54497: PUSH
54498: EMPTY
54499: LIST
54500: LIST
54501: LIST
54502: LIST
54503: LIST
54504: LIST
54505: LIST
54506: LIST
54507: LIST
54508: LIST
54509: LIST
54510: PUSH
54511: EMPTY
54512: LIST
54513: LIST
54514: ST_TO_ADDR
54515: GO 55146
54517: LD_INT 17
54519: DOUBLE
54520: EQUAL
54521: IFTRUE 54525
54523: GO 54749
54525: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
54526: LD_ADDR_VAR 0 2
54530: PUSH
54531: LD_INT 1
54533: PUSH
54534: LD_INT 2
54536: PUSH
54537: LD_INT 3
54539: PUSH
54540: LD_INT 4
54542: PUSH
54543: LD_INT 5
54545: PUSH
54546: LD_INT 6
54548: PUSH
54549: LD_INT 7
54551: PUSH
54552: LD_INT 8
54554: PUSH
54555: LD_INT 9
54557: PUSH
54558: LD_INT 10
54560: PUSH
54561: LD_INT 11
54563: PUSH
54564: LD_INT 12
54566: PUSH
54567: LD_INT 13
54569: PUSH
54570: LD_INT 14
54572: PUSH
54573: LD_INT 15
54575: PUSH
54576: LD_INT 16
54578: PUSH
54579: LD_INT 17
54581: PUSH
54582: LD_INT 18
54584: PUSH
54585: LD_INT 19
54587: PUSH
54588: LD_INT 20
54590: PUSH
54591: LD_INT 21
54593: PUSH
54594: LD_INT 22
54596: PUSH
54597: LD_INT 23
54599: PUSH
54600: LD_INT 24
54602: PUSH
54603: LD_INT 25
54605: PUSH
54606: LD_INT 26
54608: PUSH
54609: LD_INT 27
54611: PUSH
54612: LD_INT 28
54614: PUSH
54615: LD_INT 29
54617: PUSH
54618: LD_INT 30
54620: PUSH
54621: LD_INT 31
54623: PUSH
54624: LD_INT 32
54626: PUSH
54627: LD_INT 33
54629: PUSH
54630: LD_INT 34
54632: PUSH
54633: LD_INT 36
54635: PUSH
54636: EMPTY
54637: LIST
54638: LIST
54639: LIST
54640: LIST
54641: LIST
54642: LIST
54643: LIST
54644: LIST
54645: LIST
54646: LIST
54647: LIST
54648: LIST
54649: LIST
54650: LIST
54651: LIST
54652: LIST
54653: LIST
54654: LIST
54655: LIST
54656: LIST
54657: LIST
54658: LIST
54659: LIST
54660: LIST
54661: LIST
54662: LIST
54663: LIST
54664: LIST
54665: LIST
54666: LIST
54667: LIST
54668: LIST
54669: LIST
54670: LIST
54671: LIST
54672: PUSH
54673: LD_INT 101
54675: PUSH
54676: LD_INT 102
54678: PUSH
54679: LD_INT 103
54681: PUSH
54682: LD_INT 104
54684: PUSH
54685: LD_INT 105
54687: PUSH
54688: LD_INT 106
54690: PUSH
54691: LD_INT 107
54693: PUSH
54694: LD_INT 108
54696: PUSH
54697: LD_INT 109
54699: PUSH
54700: LD_INT 110
54702: PUSH
54703: LD_INT 111
54705: PUSH
54706: LD_INT 112
54708: PUSH
54709: LD_INT 113
54711: PUSH
54712: LD_INT 114
54714: PUSH
54715: LD_INT 116
54717: PUSH
54718: LD_INT 117
54720: PUSH
54721: LD_INT 118
54723: PUSH
54724: EMPTY
54725: LIST
54726: LIST
54727: LIST
54728: LIST
54729: LIST
54730: LIST
54731: LIST
54732: LIST
54733: LIST
54734: LIST
54735: LIST
54736: LIST
54737: LIST
54738: LIST
54739: LIST
54740: LIST
54741: LIST
54742: PUSH
54743: EMPTY
54744: LIST
54745: LIST
54746: ST_TO_ADDR
54747: GO 55146
54749: LD_INT 18
54751: DOUBLE
54752: EQUAL
54753: IFTRUE 54757
54755: GO 54905
54757: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
54758: LD_ADDR_VAR 0 2
54762: PUSH
54763: LD_INT 2
54765: PUSH
54766: LD_INT 4
54768: PUSH
54769: LD_INT 5
54771: PUSH
54772: LD_INT 7
54774: PUSH
54775: LD_INT 11
54777: PUSH
54778: LD_INT 12
54780: PUSH
54781: LD_INT 15
54783: PUSH
54784: LD_INT 16
54786: PUSH
54787: LD_INT 20
54789: PUSH
54790: LD_INT 21
54792: PUSH
54793: LD_INT 22
54795: PUSH
54796: LD_INT 23
54798: PUSH
54799: LD_INT 25
54801: PUSH
54802: LD_INT 26
54804: PUSH
54805: LD_INT 30
54807: PUSH
54808: LD_INT 31
54810: PUSH
54811: LD_INT 32
54813: PUSH
54814: LD_INT 33
54816: PUSH
54817: LD_INT 34
54819: PUSH
54820: LD_INT 35
54822: PUSH
54823: LD_INT 36
54825: PUSH
54826: EMPTY
54827: LIST
54828: LIST
54829: LIST
54830: LIST
54831: LIST
54832: LIST
54833: LIST
54834: LIST
54835: LIST
54836: LIST
54837: LIST
54838: LIST
54839: LIST
54840: LIST
54841: LIST
54842: LIST
54843: LIST
54844: LIST
54845: LIST
54846: LIST
54847: LIST
54848: PUSH
54849: LD_INT 101
54851: PUSH
54852: LD_INT 102
54854: PUSH
54855: LD_INT 103
54857: PUSH
54858: LD_INT 106
54860: PUSH
54861: LD_INT 108
54863: PUSH
54864: LD_INT 112
54866: PUSH
54867: LD_INT 113
54869: PUSH
54870: LD_INT 114
54872: PUSH
54873: LD_INT 115
54875: PUSH
54876: LD_INT 116
54878: PUSH
54879: LD_INT 117
54881: PUSH
54882: LD_INT 118
54884: PUSH
54885: EMPTY
54886: LIST
54887: LIST
54888: LIST
54889: LIST
54890: LIST
54891: LIST
54892: LIST
54893: LIST
54894: LIST
54895: LIST
54896: LIST
54897: LIST
54898: PUSH
54899: EMPTY
54900: LIST
54901: LIST
54902: ST_TO_ADDR
54903: GO 55146
54905: LD_INT 19
54907: DOUBLE
54908: EQUAL
54909: IFTRUE 54913
54911: GO 55145
54913: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
54914: LD_ADDR_VAR 0 2
54918: PUSH
54919: LD_INT 1
54921: PUSH
54922: LD_INT 2
54924: PUSH
54925: LD_INT 3
54927: PUSH
54928: LD_INT 4
54930: PUSH
54931: LD_INT 5
54933: PUSH
54934: LD_INT 6
54936: PUSH
54937: LD_INT 7
54939: PUSH
54940: LD_INT 8
54942: PUSH
54943: LD_INT 9
54945: PUSH
54946: LD_INT 10
54948: PUSH
54949: LD_INT 11
54951: PUSH
54952: LD_INT 12
54954: PUSH
54955: LD_INT 13
54957: PUSH
54958: LD_INT 14
54960: PUSH
54961: LD_INT 15
54963: PUSH
54964: LD_INT 16
54966: PUSH
54967: LD_INT 17
54969: PUSH
54970: LD_INT 18
54972: PUSH
54973: LD_INT 19
54975: PUSH
54976: LD_INT 20
54978: PUSH
54979: LD_INT 21
54981: PUSH
54982: LD_INT 22
54984: PUSH
54985: LD_INT 23
54987: PUSH
54988: LD_INT 24
54990: PUSH
54991: LD_INT 25
54993: PUSH
54994: LD_INT 26
54996: PUSH
54997: LD_INT 27
54999: PUSH
55000: LD_INT 28
55002: PUSH
55003: LD_INT 29
55005: PUSH
55006: LD_INT 30
55008: PUSH
55009: LD_INT 31
55011: PUSH
55012: LD_INT 32
55014: PUSH
55015: LD_INT 33
55017: PUSH
55018: LD_INT 34
55020: PUSH
55021: LD_INT 35
55023: PUSH
55024: LD_INT 36
55026: PUSH
55027: EMPTY
55028: LIST
55029: LIST
55030: LIST
55031: LIST
55032: LIST
55033: LIST
55034: LIST
55035: LIST
55036: LIST
55037: LIST
55038: LIST
55039: LIST
55040: LIST
55041: LIST
55042: LIST
55043: LIST
55044: LIST
55045: LIST
55046: LIST
55047: LIST
55048: LIST
55049: LIST
55050: LIST
55051: LIST
55052: LIST
55053: LIST
55054: LIST
55055: LIST
55056: LIST
55057: LIST
55058: LIST
55059: LIST
55060: LIST
55061: LIST
55062: LIST
55063: LIST
55064: PUSH
55065: LD_INT 101
55067: PUSH
55068: LD_INT 102
55070: PUSH
55071: LD_INT 103
55073: PUSH
55074: LD_INT 104
55076: PUSH
55077: LD_INT 105
55079: PUSH
55080: LD_INT 106
55082: PUSH
55083: LD_INT 107
55085: PUSH
55086: LD_INT 108
55088: PUSH
55089: LD_INT 109
55091: PUSH
55092: LD_INT 110
55094: PUSH
55095: LD_INT 111
55097: PUSH
55098: LD_INT 112
55100: PUSH
55101: LD_INT 113
55103: PUSH
55104: LD_INT 114
55106: PUSH
55107: LD_INT 115
55109: PUSH
55110: LD_INT 116
55112: PUSH
55113: LD_INT 117
55115: PUSH
55116: LD_INT 118
55118: PUSH
55119: EMPTY
55120: LIST
55121: LIST
55122: LIST
55123: LIST
55124: LIST
55125: LIST
55126: LIST
55127: LIST
55128: LIST
55129: LIST
55130: LIST
55131: LIST
55132: LIST
55133: LIST
55134: LIST
55135: LIST
55136: LIST
55137: LIST
55138: PUSH
55139: EMPTY
55140: LIST
55141: LIST
55142: ST_TO_ADDR
55143: GO 55146
55145: POP
// end else
55146: GO 55377
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
55148: LD_ADDR_VAR 0 2
55152: PUSH
55153: LD_INT 1
55155: PUSH
55156: LD_INT 2
55158: PUSH
55159: LD_INT 3
55161: PUSH
55162: LD_INT 4
55164: PUSH
55165: LD_INT 5
55167: PUSH
55168: LD_INT 6
55170: PUSH
55171: LD_INT 7
55173: PUSH
55174: LD_INT 8
55176: PUSH
55177: LD_INT 9
55179: PUSH
55180: LD_INT 10
55182: PUSH
55183: LD_INT 11
55185: PUSH
55186: LD_INT 12
55188: PUSH
55189: LD_INT 13
55191: PUSH
55192: LD_INT 14
55194: PUSH
55195: LD_INT 15
55197: PUSH
55198: LD_INT 16
55200: PUSH
55201: LD_INT 17
55203: PUSH
55204: LD_INT 18
55206: PUSH
55207: LD_INT 19
55209: PUSH
55210: LD_INT 20
55212: PUSH
55213: LD_INT 21
55215: PUSH
55216: LD_INT 22
55218: PUSH
55219: LD_INT 23
55221: PUSH
55222: LD_INT 24
55224: PUSH
55225: LD_INT 25
55227: PUSH
55228: LD_INT 26
55230: PUSH
55231: LD_INT 27
55233: PUSH
55234: LD_INT 28
55236: PUSH
55237: LD_INT 29
55239: PUSH
55240: LD_INT 30
55242: PUSH
55243: LD_INT 31
55245: PUSH
55246: LD_INT 32
55248: PUSH
55249: LD_INT 33
55251: PUSH
55252: LD_INT 34
55254: PUSH
55255: LD_INT 35
55257: PUSH
55258: LD_INT 36
55260: PUSH
55261: EMPTY
55262: LIST
55263: LIST
55264: LIST
55265: LIST
55266: LIST
55267: LIST
55268: LIST
55269: LIST
55270: LIST
55271: LIST
55272: LIST
55273: LIST
55274: LIST
55275: LIST
55276: LIST
55277: LIST
55278: LIST
55279: LIST
55280: LIST
55281: LIST
55282: LIST
55283: LIST
55284: LIST
55285: LIST
55286: LIST
55287: LIST
55288: LIST
55289: LIST
55290: LIST
55291: LIST
55292: LIST
55293: LIST
55294: LIST
55295: LIST
55296: LIST
55297: LIST
55298: PUSH
55299: LD_INT 101
55301: PUSH
55302: LD_INT 102
55304: PUSH
55305: LD_INT 103
55307: PUSH
55308: LD_INT 104
55310: PUSH
55311: LD_INT 105
55313: PUSH
55314: LD_INT 106
55316: PUSH
55317: LD_INT 107
55319: PUSH
55320: LD_INT 108
55322: PUSH
55323: LD_INT 109
55325: PUSH
55326: LD_INT 110
55328: PUSH
55329: LD_INT 111
55331: PUSH
55332: LD_INT 112
55334: PUSH
55335: LD_INT 113
55337: PUSH
55338: LD_INT 114
55340: PUSH
55341: LD_INT 115
55343: PUSH
55344: LD_INT 116
55346: PUSH
55347: LD_INT 117
55349: PUSH
55350: LD_INT 118
55352: PUSH
55353: EMPTY
55354: LIST
55355: LIST
55356: LIST
55357: LIST
55358: LIST
55359: LIST
55360: LIST
55361: LIST
55362: LIST
55363: LIST
55364: LIST
55365: LIST
55366: LIST
55367: LIST
55368: LIST
55369: LIST
55370: LIST
55371: LIST
55372: PUSH
55373: EMPTY
55374: LIST
55375: LIST
55376: ST_TO_ADDR
// if result then
55377: LD_VAR 0 2
55381: IFFALSE 56167
// begin normal :=  ;
55383: LD_ADDR_VAR 0 5
55387: PUSH
55388: LD_STRING 
55390: ST_TO_ADDR
// hardcore :=  ;
55391: LD_ADDR_VAR 0 6
55395: PUSH
55396: LD_STRING 
55398: ST_TO_ADDR
// active :=  ;
55399: LD_ADDR_VAR 0 7
55403: PUSH
55404: LD_STRING 
55406: ST_TO_ADDR
// for i = 1 to normalCounter do
55407: LD_ADDR_VAR 0 8
55411: PUSH
55412: DOUBLE
55413: LD_INT 1
55415: DEC
55416: ST_TO_ADDR
55417: LD_EXP 40
55421: PUSH
55422: FOR_TO
55423: IFFALSE 55524
// begin tmp := 0 ;
55425: LD_ADDR_VAR 0 3
55429: PUSH
55430: LD_STRING 0
55432: ST_TO_ADDR
// if result [ 1 ] then
55433: LD_VAR 0 2
55437: PUSH
55438: LD_INT 1
55440: ARRAY
55441: IFFALSE 55506
// if result [ 1 ] [ 1 ] = i then
55443: LD_VAR 0 2
55447: PUSH
55448: LD_INT 1
55450: ARRAY
55451: PUSH
55452: LD_INT 1
55454: ARRAY
55455: PUSH
55456: LD_VAR 0 8
55460: EQUAL
55461: IFFALSE 55506
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
55463: LD_ADDR_VAR 0 2
55467: PUSH
55468: LD_VAR 0 2
55472: PPUSH
55473: LD_INT 1
55475: PPUSH
55476: LD_VAR 0 2
55480: PUSH
55481: LD_INT 1
55483: ARRAY
55484: PPUSH
55485: LD_INT 1
55487: PPUSH
55488: CALL_OW 3
55492: PPUSH
55493: CALL_OW 1
55497: ST_TO_ADDR
// tmp := 1 ;
55498: LD_ADDR_VAR 0 3
55502: PUSH
55503: LD_STRING 1
55505: ST_TO_ADDR
// end ; normal := normal & tmp ;
55506: LD_ADDR_VAR 0 5
55510: PUSH
55511: LD_VAR 0 5
55515: PUSH
55516: LD_VAR 0 3
55520: STR
55521: ST_TO_ADDR
// end ;
55522: GO 55422
55524: POP
55525: POP
// for i = 1 to hardcoreCounter do
55526: LD_ADDR_VAR 0 8
55530: PUSH
55531: DOUBLE
55532: LD_INT 1
55534: DEC
55535: ST_TO_ADDR
55536: LD_EXP 41
55540: PUSH
55541: FOR_TO
55542: IFFALSE 55647
// begin tmp := 0 ;
55544: LD_ADDR_VAR 0 3
55548: PUSH
55549: LD_STRING 0
55551: ST_TO_ADDR
// if result [ 2 ] then
55552: LD_VAR 0 2
55556: PUSH
55557: LD_INT 2
55559: ARRAY
55560: IFFALSE 55629
// if result [ 2 ] [ 1 ] = 100 + i then
55562: LD_VAR 0 2
55566: PUSH
55567: LD_INT 2
55569: ARRAY
55570: PUSH
55571: LD_INT 1
55573: ARRAY
55574: PUSH
55575: LD_INT 100
55577: PUSH
55578: LD_VAR 0 8
55582: PLUS
55583: EQUAL
55584: IFFALSE 55629
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
55586: LD_ADDR_VAR 0 2
55590: PUSH
55591: LD_VAR 0 2
55595: PPUSH
55596: LD_INT 2
55598: PPUSH
55599: LD_VAR 0 2
55603: PUSH
55604: LD_INT 2
55606: ARRAY
55607: PPUSH
55608: LD_INT 1
55610: PPUSH
55611: CALL_OW 3
55615: PPUSH
55616: CALL_OW 1
55620: ST_TO_ADDR
// tmp := 1 ;
55621: LD_ADDR_VAR 0 3
55625: PUSH
55626: LD_STRING 1
55628: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
55629: LD_ADDR_VAR 0 6
55633: PUSH
55634: LD_VAR 0 6
55638: PUSH
55639: LD_VAR 0 3
55643: STR
55644: ST_TO_ADDR
// end ;
55645: GO 55541
55647: POP
55648: POP
// if isGameLoad then
55649: LD_VAR 0 1
55653: IFFALSE 56128
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
55655: LD_ADDR_VAR 0 4
55659: PUSH
55660: LD_EXP 44
55664: PUSH
55665: LD_EXP 43
55669: PUSH
55670: LD_EXP 45
55674: PUSH
55675: LD_EXP 42
55679: PUSH
55680: LD_EXP 46
55684: PUSH
55685: LD_EXP 47
55689: PUSH
55690: LD_EXP 48
55694: PUSH
55695: LD_EXP 49
55699: PUSH
55700: LD_EXP 50
55704: PUSH
55705: LD_EXP 51
55709: PUSH
55710: LD_EXP 52
55714: PUSH
55715: LD_EXP 53
55719: PUSH
55720: LD_EXP 54
55724: PUSH
55725: LD_EXP 55
55729: PUSH
55730: LD_EXP 63
55734: PUSH
55735: LD_EXP 64
55739: PUSH
55740: LD_EXP 65
55744: PUSH
55745: LD_EXP 66
55749: PUSH
55750: LD_EXP 68
55754: PUSH
55755: LD_EXP 69
55759: PUSH
55760: LD_EXP 70
55764: PUSH
55765: LD_EXP 73
55769: PUSH
55770: LD_EXP 75
55774: PUSH
55775: LD_EXP 76
55779: PUSH
55780: LD_EXP 77
55784: PUSH
55785: LD_EXP 79
55789: PUSH
55790: LD_EXP 80
55794: PUSH
55795: LD_EXP 83
55799: PUSH
55800: LD_EXP 84
55804: PUSH
55805: LD_EXP 85
55809: PUSH
55810: LD_EXP 86
55814: PUSH
55815: LD_EXP 87
55819: PUSH
55820: LD_EXP 88
55824: PUSH
55825: LD_EXP 89
55829: PUSH
55830: LD_EXP 90
55834: PUSH
55835: LD_EXP 91
55839: PUSH
55840: LD_EXP 56
55844: PUSH
55845: LD_EXP 57
55849: PUSH
55850: LD_EXP 60
55854: PUSH
55855: LD_EXP 61
55859: PUSH
55860: LD_EXP 62
55864: PUSH
55865: LD_EXP 58
55869: PUSH
55870: LD_EXP 59
55874: PUSH
55875: LD_EXP 67
55879: PUSH
55880: LD_EXP 71
55884: PUSH
55885: LD_EXP 72
55889: PUSH
55890: LD_EXP 74
55894: PUSH
55895: LD_EXP 78
55899: PUSH
55900: LD_EXP 81
55904: PUSH
55905: LD_EXP 82
55909: PUSH
55910: LD_EXP 92
55914: PUSH
55915: LD_EXP 93
55919: PUSH
55920: LD_EXP 94
55924: PUSH
55925: LD_EXP 95
55929: PUSH
55930: EMPTY
55931: LIST
55932: LIST
55933: LIST
55934: LIST
55935: LIST
55936: LIST
55937: LIST
55938: LIST
55939: LIST
55940: LIST
55941: LIST
55942: LIST
55943: LIST
55944: LIST
55945: LIST
55946: LIST
55947: LIST
55948: LIST
55949: LIST
55950: LIST
55951: LIST
55952: LIST
55953: LIST
55954: LIST
55955: LIST
55956: LIST
55957: LIST
55958: LIST
55959: LIST
55960: LIST
55961: LIST
55962: LIST
55963: LIST
55964: LIST
55965: LIST
55966: LIST
55967: LIST
55968: LIST
55969: LIST
55970: LIST
55971: LIST
55972: LIST
55973: LIST
55974: LIST
55975: LIST
55976: LIST
55977: LIST
55978: LIST
55979: LIST
55980: LIST
55981: LIST
55982: LIST
55983: LIST
55984: LIST
55985: ST_TO_ADDR
// tmp :=  ;
55986: LD_ADDR_VAR 0 3
55990: PUSH
55991: LD_STRING 
55993: ST_TO_ADDR
// for i = 1 to normalCounter do
55994: LD_ADDR_VAR 0 8
55998: PUSH
55999: DOUBLE
56000: LD_INT 1
56002: DEC
56003: ST_TO_ADDR
56004: LD_EXP 40
56008: PUSH
56009: FOR_TO
56010: IFFALSE 56046
// begin if flags [ i ] then
56012: LD_VAR 0 4
56016: PUSH
56017: LD_VAR 0 8
56021: ARRAY
56022: IFFALSE 56044
// tmp := tmp & i & ; ;
56024: LD_ADDR_VAR 0 3
56028: PUSH
56029: LD_VAR 0 3
56033: PUSH
56034: LD_VAR 0 8
56038: STR
56039: PUSH
56040: LD_STRING ;
56042: STR
56043: ST_TO_ADDR
// end ;
56044: GO 56009
56046: POP
56047: POP
// for i = 1 to hardcoreCounter do
56048: LD_ADDR_VAR 0 8
56052: PUSH
56053: DOUBLE
56054: LD_INT 1
56056: DEC
56057: ST_TO_ADDR
56058: LD_EXP 41
56062: PUSH
56063: FOR_TO
56064: IFFALSE 56110
// begin if flags [ normalCounter + i ] then
56066: LD_VAR 0 4
56070: PUSH
56071: LD_EXP 40
56075: PUSH
56076: LD_VAR 0 8
56080: PLUS
56081: ARRAY
56082: IFFALSE 56108
// tmp := tmp & ( 100 + i ) & ; ;
56084: LD_ADDR_VAR 0 3
56088: PUSH
56089: LD_VAR 0 3
56093: PUSH
56094: LD_INT 100
56096: PUSH
56097: LD_VAR 0 8
56101: PLUS
56102: STR
56103: PUSH
56104: LD_STRING ;
56106: STR
56107: ST_TO_ADDR
// end ;
56108: GO 56063
56110: POP
56111: POP
// if tmp then
56112: LD_VAR 0 3
56116: IFFALSE 56128
// active := tmp ;
56118: LD_ADDR_VAR 0 7
56122: PUSH
56123: LD_VAR 0 3
56127: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
56128: LD_STRING getStreamItemsFromMission("
56130: PUSH
56131: LD_VAR 0 5
56135: STR
56136: PUSH
56137: LD_STRING ","
56139: STR
56140: PUSH
56141: LD_VAR 0 6
56145: STR
56146: PUSH
56147: LD_STRING ","
56149: STR
56150: PUSH
56151: LD_VAR 0 7
56155: STR
56156: PUSH
56157: LD_STRING ")
56159: STR
56160: PPUSH
56161: CALL_OW 559
// end else
56165: GO 56174
// ToLua ( getStreamItemsFromMission("","","") ) ;
56167: LD_STRING getStreamItemsFromMission("","","")
56169: PPUSH
56170: CALL_OW 559
// end ;
56174: LD_VAR 0 2
56178: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
56179: LD_EXP 39
56183: PUSH
56184: LD_EXP 44
56188: AND
56189: IFFALSE 56313
56191: GO 56193
56193: DISABLE
56194: LD_INT 0
56196: PPUSH
56197: PPUSH
// begin enable ;
56198: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
56199: LD_ADDR_VAR 0 2
56203: PUSH
56204: LD_INT 22
56206: PUSH
56207: LD_OWVAR 2
56211: PUSH
56212: EMPTY
56213: LIST
56214: LIST
56215: PUSH
56216: LD_INT 2
56218: PUSH
56219: LD_INT 34
56221: PUSH
56222: LD_INT 7
56224: PUSH
56225: EMPTY
56226: LIST
56227: LIST
56228: PUSH
56229: LD_INT 34
56231: PUSH
56232: LD_INT 45
56234: PUSH
56235: EMPTY
56236: LIST
56237: LIST
56238: PUSH
56239: LD_INT 34
56241: PUSH
56242: LD_INT 28
56244: PUSH
56245: EMPTY
56246: LIST
56247: LIST
56248: PUSH
56249: LD_INT 34
56251: PUSH
56252: LD_INT 47
56254: PUSH
56255: EMPTY
56256: LIST
56257: LIST
56258: PUSH
56259: EMPTY
56260: LIST
56261: LIST
56262: LIST
56263: LIST
56264: LIST
56265: PUSH
56266: EMPTY
56267: LIST
56268: LIST
56269: PPUSH
56270: CALL_OW 69
56274: ST_TO_ADDR
// if not tmp then
56275: LD_VAR 0 2
56279: NOT
56280: IFFALSE 56284
// exit ;
56282: GO 56313
// for i in tmp do
56284: LD_ADDR_VAR 0 1
56288: PUSH
56289: LD_VAR 0 2
56293: PUSH
56294: FOR_IN
56295: IFFALSE 56311
// begin SetLives ( i , 0 ) ;
56297: LD_VAR 0 1
56301: PPUSH
56302: LD_INT 0
56304: PPUSH
56305: CALL_OW 234
// end ;
56309: GO 56294
56311: POP
56312: POP
// end ;
56313: PPOPN 2
56315: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
56316: LD_EXP 39
56320: PUSH
56321: LD_EXP 45
56325: AND
56326: IFFALSE 56410
56328: GO 56330
56330: DISABLE
56331: LD_INT 0
56333: PPUSH
56334: PPUSH
// begin enable ;
56335: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
56336: LD_ADDR_VAR 0 2
56340: PUSH
56341: LD_INT 22
56343: PUSH
56344: LD_OWVAR 2
56348: PUSH
56349: EMPTY
56350: LIST
56351: LIST
56352: PUSH
56353: LD_INT 32
56355: PUSH
56356: LD_INT 3
56358: PUSH
56359: EMPTY
56360: LIST
56361: LIST
56362: PUSH
56363: EMPTY
56364: LIST
56365: LIST
56366: PPUSH
56367: CALL_OW 69
56371: ST_TO_ADDR
// if not tmp then
56372: LD_VAR 0 2
56376: NOT
56377: IFFALSE 56381
// exit ;
56379: GO 56410
// for i in tmp do
56381: LD_ADDR_VAR 0 1
56385: PUSH
56386: LD_VAR 0 2
56390: PUSH
56391: FOR_IN
56392: IFFALSE 56408
// begin SetLives ( i , 0 ) ;
56394: LD_VAR 0 1
56398: PPUSH
56399: LD_INT 0
56401: PPUSH
56402: CALL_OW 234
// end ;
56406: GO 56391
56408: POP
56409: POP
// end ;
56410: PPOPN 2
56412: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
56413: LD_EXP 39
56417: PUSH
56418: LD_EXP 42
56422: AND
56423: IFFALSE 56516
56425: GO 56427
56427: DISABLE
56428: LD_INT 0
56430: PPUSH
// begin enable ;
56431: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
56432: LD_ADDR_VAR 0 1
56436: PUSH
56437: LD_INT 22
56439: PUSH
56440: LD_OWVAR 2
56444: PUSH
56445: EMPTY
56446: LIST
56447: LIST
56448: PUSH
56449: LD_INT 2
56451: PUSH
56452: LD_INT 25
56454: PUSH
56455: LD_INT 5
56457: PUSH
56458: EMPTY
56459: LIST
56460: LIST
56461: PUSH
56462: LD_INT 25
56464: PUSH
56465: LD_INT 9
56467: PUSH
56468: EMPTY
56469: LIST
56470: LIST
56471: PUSH
56472: LD_INT 25
56474: PUSH
56475: LD_INT 8
56477: PUSH
56478: EMPTY
56479: LIST
56480: LIST
56481: PUSH
56482: EMPTY
56483: LIST
56484: LIST
56485: LIST
56486: LIST
56487: PUSH
56488: EMPTY
56489: LIST
56490: LIST
56491: PPUSH
56492: CALL_OW 69
56496: PUSH
56497: FOR_IN
56498: IFFALSE 56514
// begin SetClass ( i , 1 ) ;
56500: LD_VAR 0 1
56504: PPUSH
56505: LD_INT 1
56507: PPUSH
56508: CALL_OW 336
// end ;
56512: GO 56497
56514: POP
56515: POP
// end ;
56516: PPOPN 1
56518: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
56519: LD_EXP 39
56523: PUSH
56524: LD_EXP 43
56528: AND
56529: PUSH
56530: LD_OWVAR 65
56534: PUSH
56535: LD_INT 7
56537: LESS
56538: AND
56539: IFFALSE 56553
56541: GO 56543
56543: DISABLE
// begin enable ;
56544: ENABLE
// game_speed := 7 ;
56545: LD_ADDR_OWVAR 65
56549: PUSH
56550: LD_INT 7
56552: ST_TO_ADDR
// end ;
56553: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
56554: LD_EXP 39
56558: PUSH
56559: LD_EXP 46
56563: AND
56564: IFFALSE 56766
56566: GO 56568
56568: DISABLE
56569: LD_INT 0
56571: PPUSH
56572: PPUSH
56573: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
56574: LD_ADDR_VAR 0 3
56578: PUSH
56579: LD_INT 81
56581: PUSH
56582: LD_OWVAR 2
56586: PUSH
56587: EMPTY
56588: LIST
56589: LIST
56590: PUSH
56591: LD_INT 21
56593: PUSH
56594: LD_INT 1
56596: PUSH
56597: EMPTY
56598: LIST
56599: LIST
56600: PUSH
56601: EMPTY
56602: LIST
56603: LIST
56604: PPUSH
56605: CALL_OW 69
56609: ST_TO_ADDR
// if not tmp then
56610: LD_VAR 0 3
56614: NOT
56615: IFFALSE 56619
// exit ;
56617: GO 56766
// if tmp > 5 then
56619: LD_VAR 0 3
56623: PUSH
56624: LD_INT 5
56626: GREATER
56627: IFFALSE 56639
// k := 5 else
56629: LD_ADDR_VAR 0 2
56633: PUSH
56634: LD_INT 5
56636: ST_TO_ADDR
56637: GO 56649
// k := tmp ;
56639: LD_ADDR_VAR 0 2
56643: PUSH
56644: LD_VAR 0 3
56648: ST_TO_ADDR
// for i := 1 to k do
56649: LD_ADDR_VAR 0 1
56653: PUSH
56654: DOUBLE
56655: LD_INT 1
56657: DEC
56658: ST_TO_ADDR
56659: LD_VAR 0 2
56663: PUSH
56664: FOR_TO
56665: IFFALSE 56764
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
56667: LD_VAR 0 3
56671: PUSH
56672: LD_VAR 0 1
56676: ARRAY
56677: PPUSH
56678: LD_VAR 0 1
56682: PUSH
56683: LD_INT 4
56685: MOD
56686: PUSH
56687: LD_INT 1
56689: PLUS
56690: PPUSH
56691: CALL_OW 259
56695: PUSH
56696: LD_INT 10
56698: LESS
56699: IFFALSE 56762
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
56701: LD_VAR 0 3
56705: PUSH
56706: LD_VAR 0 1
56710: ARRAY
56711: PPUSH
56712: LD_VAR 0 1
56716: PUSH
56717: LD_INT 4
56719: MOD
56720: PUSH
56721: LD_INT 1
56723: PLUS
56724: PPUSH
56725: LD_VAR 0 3
56729: PUSH
56730: LD_VAR 0 1
56734: ARRAY
56735: PPUSH
56736: LD_VAR 0 1
56740: PUSH
56741: LD_INT 4
56743: MOD
56744: PUSH
56745: LD_INT 1
56747: PLUS
56748: PPUSH
56749: CALL_OW 259
56753: PUSH
56754: LD_INT 1
56756: PLUS
56757: PPUSH
56758: CALL_OW 237
56762: GO 56664
56764: POP
56765: POP
// end ;
56766: PPOPN 3
56768: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
56769: LD_EXP 39
56773: PUSH
56774: LD_EXP 47
56778: AND
56779: IFFALSE 56799
56781: GO 56783
56783: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
56784: LD_INT 4
56786: PPUSH
56787: LD_OWVAR 2
56791: PPUSH
56792: LD_INT 0
56794: PPUSH
56795: CALL_OW 324
56799: END
// every 0 0$1 trigger StreamModeActive and sShovel do
56800: LD_EXP 39
56804: PUSH
56805: LD_EXP 76
56809: AND
56810: IFFALSE 56830
56812: GO 56814
56814: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
56815: LD_INT 19
56817: PPUSH
56818: LD_OWVAR 2
56822: PPUSH
56823: LD_INT 0
56825: PPUSH
56826: CALL_OW 324
56830: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
56831: LD_EXP 39
56835: PUSH
56836: LD_EXP 48
56840: AND
56841: IFFALSE 56943
56843: GO 56845
56845: DISABLE
56846: LD_INT 0
56848: PPUSH
56849: PPUSH
// begin enable ;
56850: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
56851: LD_ADDR_VAR 0 2
56855: PUSH
56856: LD_INT 22
56858: PUSH
56859: LD_OWVAR 2
56863: PUSH
56864: EMPTY
56865: LIST
56866: LIST
56867: PUSH
56868: LD_INT 2
56870: PUSH
56871: LD_INT 34
56873: PUSH
56874: LD_INT 11
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: PUSH
56881: LD_INT 34
56883: PUSH
56884: LD_INT 30
56886: PUSH
56887: EMPTY
56888: LIST
56889: LIST
56890: PUSH
56891: EMPTY
56892: LIST
56893: LIST
56894: LIST
56895: PUSH
56896: EMPTY
56897: LIST
56898: LIST
56899: PPUSH
56900: CALL_OW 69
56904: ST_TO_ADDR
// if not tmp then
56905: LD_VAR 0 2
56909: NOT
56910: IFFALSE 56914
// exit ;
56912: GO 56943
// for i in tmp do
56914: LD_ADDR_VAR 0 1
56918: PUSH
56919: LD_VAR 0 2
56923: PUSH
56924: FOR_IN
56925: IFFALSE 56941
// begin SetLives ( i , 0 ) ;
56927: LD_VAR 0 1
56931: PPUSH
56932: LD_INT 0
56934: PPUSH
56935: CALL_OW 234
// end ;
56939: GO 56924
56941: POP
56942: POP
// end ;
56943: PPOPN 2
56945: END
// every 0 0$1 trigger StreamModeActive and sBunker do
56946: LD_EXP 39
56950: PUSH
56951: LD_EXP 49
56955: AND
56956: IFFALSE 56976
56958: GO 56960
56960: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
56961: LD_INT 32
56963: PPUSH
56964: LD_OWVAR 2
56968: PPUSH
56969: LD_INT 0
56971: PPUSH
56972: CALL_OW 324
56976: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
56977: LD_EXP 39
56981: PUSH
56982: LD_EXP 50
56986: AND
56987: IFFALSE 57168
56989: GO 56991
56991: DISABLE
56992: LD_INT 0
56994: PPUSH
56995: PPUSH
56996: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
56997: LD_ADDR_VAR 0 2
57001: PUSH
57002: LD_INT 22
57004: PUSH
57005: LD_OWVAR 2
57009: PUSH
57010: EMPTY
57011: LIST
57012: LIST
57013: PUSH
57014: LD_INT 33
57016: PUSH
57017: LD_INT 3
57019: PUSH
57020: EMPTY
57021: LIST
57022: LIST
57023: PUSH
57024: EMPTY
57025: LIST
57026: LIST
57027: PPUSH
57028: CALL_OW 69
57032: ST_TO_ADDR
// if not tmp then
57033: LD_VAR 0 2
57037: NOT
57038: IFFALSE 57042
// exit ;
57040: GO 57168
// side := 0 ;
57042: LD_ADDR_VAR 0 3
57046: PUSH
57047: LD_INT 0
57049: ST_TO_ADDR
// for i := 1 to 8 do
57050: LD_ADDR_VAR 0 1
57054: PUSH
57055: DOUBLE
57056: LD_INT 1
57058: DEC
57059: ST_TO_ADDR
57060: LD_INT 8
57062: PUSH
57063: FOR_TO
57064: IFFALSE 57112
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
57066: LD_OWVAR 2
57070: PUSH
57071: LD_VAR 0 1
57075: NONEQUAL
57076: PUSH
57077: LD_OWVAR 2
57081: PPUSH
57082: LD_VAR 0 1
57086: PPUSH
57087: CALL_OW 81
57091: PUSH
57092: LD_INT 2
57094: EQUAL
57095: AND
57096: IFFALSE 57110
// begin side := i ;
57098: LD_ADDR_VAR 0 3
57102: PUSH
57103: LD_VAR 0 1
57107: ST_TO_ADDR
// break ;
57108: GO 57112
// end ;
57110: GO 57063
57112: POP
57113: POP
// if not side then
57114: LD_VAR 0 3
57118: NOT
57119: IFFALSE 57123
// exit ;
57121: GO 57168
// for i := 1 to tmp do
57123: LD_ADDR_VAR 0 1
57127: PUSH
57128: DOUBLE
57129: LD_INT 1
57131: DEC
57132: ST_TO_ADDR
57133: LD_VAR 0 2
57137: PUSH
57138: FOR_TO
57139: IFFALSE 57166
// if Prob ( 60 ) then
57141: LD_INT 60
57143: PPUSH
57144: CALL_OW 13
57148: IFFALSE 57164
// SetSide ( i , side ) ;
57150: LD_VAR 0 1
57154: PPUSH
57155: LD_VAR 0 3
57159: PPUSH
57160: CALL_OW 235
57164: GO 57138
57166: POP
57167: POP
// end ;
57168: PPOPN 3
57170: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
57171: LD_EXP 39
57175: PUSH
57176: LD_EXP 52
57180: AND
57181: IFFALSE 57300
57183: GO 57185
57185: DISABLE
57186: LD_INT 0
57188: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
57189: LD_ADDR_VAR 0 1
57193: PUSH
57194: LD_INT 22
57196: PUSH
57197: LD_OWVAR 2
57201: PUSH
57202: EMPTY
57203: LIST
57204: LIST
57205: PUSH
57206: LD_INT 21
57208: PUSH
57209: LD_INT 1
57211: PUSH
57212: EMPTY
57213: LIST
57214: LIST
57215: PUSH
57216: LD_INT 3
57218: PUSH
57219: LD_INT 23
57221: PUSH
57222: LD_INT 0
57224: PUSH
57225: EMPTY
57226: LIST
57227: LIST
57228: PUSH
57229: EMPTY
57230: LIST
57231: LIST
57232: PUSH
57233: EMPTY
57234: LIST
57235: LIST
57236: LIST
57237: PPUSH
57238: CALL_OW 69
57242: PUSH
57243: FOR_IN
57244: IFFALSE 57298
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
57246: LD_VAR 0 1
57250: PPUSH
57251: CALL_OW 257
57255: PUSH
57256: LD_INT 1
57258: PUSH
57259: LD_INT 2
57261: PUSH
57262: LD_INT 3
57264: PUSH
57265: LD_INT 4
57267: PUSH
57268: EMPTY
57269: LIST
57270: LIST
57271: LIST
57272: LIST
57273: IN
57274: IFFALSE 57296
// SetClass ( un , rand ( 1 , 4 ) ) ;
57276: LD_VAR 0 1
57280: PPUSH
57281: LD_INT 1
57283: PPUSH
57284: LD_INT 4
57286: PPUSH
57287: CALL_OW 12
57291: PPUSH
57292: CALL_OW 336
57296: GO 57243
57298: POP
57299: POP
// end ;
57300: PPOPN 1
57302: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
57303: LD_EXP 39
57307: PUSH
57308: LD_EXP 51
57312: AND
57313: IFFALSE 57392
57315: GO 57317
57317: DISABLE
57318: LD_INT 0
57320: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
57321: LD_ADDR_VAR 0 1
57325: PUSH
57326: LD_INT 22
57328: PUSH
57329: LD_OWVAR 2
57333: PUSH
57334: EMPTY
57335: LIST
57336: LIST
57337: PUSH
57338: LD_INT 21
57340: PUSH
57341: LD_INT 3
57343: PUSH
57344: EMPTY
57345: LIST
57346: LIST
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PPUSH
57352: CALL_OW 69
57356: ST_TO_ADDR
// if not tmp then
57357: LD_VAR 0 1
57361: NOT
57362: IFFALSE 57366
// exit ;
57364: GO 57392
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
57366: LD_VAR 0 1
57370: PUSH
57371: LD_INT 1
57373: PPUSH
57374: LD_VAR 0 1
57378: PPUSH
57379: CALL_OW 12
57383: ARRAY
57384: PPUSH
57385: LD_INT 100
57387: PPUSH
57388: CALL_OW 234
// end ;
57392: PPOPN 1
57394: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
57395: LD_EXP 39
57399: PUSH
57400: LD_EXP 53
57404: AND
57405: IFFALSE 57503
57407: GO 57409
57409: DISABLE
57410: LD_INT 0
57412: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
57413: LD_ADDR_VAR 0 1
57417: PUSH
57418: LD_INT 22
57420: PUSH
57421: LD_OWVAR 2
57425: PUSH
57426: EMPTY
57427: LIST
57428: LIST
57429: PUSH
57430: LD_INT 21
57432: PUSH
57433: LD_INT 1
57435: PUSH
57436: EMPTY
57437: LIST
57438: LIST
57439: PUSH
57440: EMPTY
57441: LIST
57442: LIST
57443: PPUSH
57444: CALL_OW 69
57448: ST_TO_ADDR
// if not tmp then
57449: LD_VAR 0 1
57453: NOT
57454: IFFALSE 57458
// exit ;
57456: GO 57503
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
57458: LD_VAR 0 1
57462: PUSH
57463: LD_INT 1
57465: PPUSH
57466: LD_VAR 0 1
57470: PPUSH
57471: CALL_OW 12
57475: ARRAY
57476: PPUSH
57477: LD_INT 1
57479: PPUSH
57480: LD_INT 4
57482: PPUSH
57483: CALL_OW 12
57487: PPUSH
57488: LD_INT 3000
57490: PPUSH
57491: LD_INT 9000
57493: PPUSH
57494: CALL_OW 12
57498: PPUSH
57499: CALL_OW 492
// end ;
57503: PPOPN 1
57505: END
// every 0 0$1 trigger StreamModeActive and sDepot do
57506: LD_EXP 39
57510: PUSH
57511: LD_EXP 54
57515: AND
57516: IFFALSE 57536
57518: GO 57520
57520: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
57521: LD_INT 1
57523: PPUSH
57524: LD_OWVAR 2
57528: PPUSH
57529: LD_INT 0
57531: PPUSH
57532: CALL_OW 324
57536: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
57537: LD_EXP 39
57541: PUSH
57542: LD_EXP 55
57546: AND
57547: IFFALSE 57630
57549: GO 57551
57551: DISABLE
57552: LD_INT 0
57554: PPUSH
57555: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
57556: LD_ADDR_VAR 0 2
57560: PUSH
57561: LD_INT 22
57563: PUSH
57564: LD_OWVAR 2
57568: PUSH
57569: EMPTY
57570: LIST
57571: LIST
57572: PUSH
57573: LD_INT 21
57575: PUSH
57576: LD_INT 3
57578: PUSH
57579: EMPTY
57580: LIST
57581: LIST
57582: PUSH
57583: EMPTY
57584: LIST
57585: LIST
57586: PPUSH
57587: CALL_OW 69
57591: ST_TO_ADDR
// if not tmp then
57592: LD_VAR 0 2
57596: NOT
57597: IFFALSE 57601
// exit ;
57599: GO 57630
// for i in tmp do
57601: LD_ADDR_VAR 0 1
57605: PUSH
57606: LD_VAR 0 2
57610: PUSH
57611: FOR_IN
57612: IFFALSE 57628
// SetBLevel ( i , 10 ) ;
57614: LD_VAR 0 1
57618: PPUSH
57619: LD_INT 10
57621: PPUSH
57622: CALL_OW 241
57626: GO 57611
57628: POP
57629: POP
// end ;
57630: PPOPN 2
57632: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
57633: LD_EXP 39
57637: PUSH
57638: LD_EXP 56
57642: AND
57643: IFFALSE 57754
57645: GO 57647
57647: DISABLE
57648: LD_INT 0
57650: PPUSH
57651: PPUSH
57652: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
57653: LD_ADDR_VAR 0 3
57657: PUSH
57658: LD_INT 22
57660: PUSH
57661: LD_OWVAR 2
57665: PUSH
57666: EMPTY
57667: LIST
57668: LIST
57669: PUSH
57670: LD_INT 25
57672: PUSH
57673: LD_INT 1
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: PUSH
57680: EMPTY
57681: LIST
57682: LIST
57683: PPUSH
57684: CALL_OW 69
57688: ST_TO_ADDR
// if not tmp then
57689: LD_VAR 0 3
57693: NOT
57694: IFFALSE 57698
// exit ;
57696: GO 57754
// un := tmp [ rand ( 1 , tmp ) ] ;
57698: LD_ADDR_VAR 0 2
57702: PUSH
57703: LD_VAR 0 3
57707: PUSH
57708: LD_INT 1
57710: PPUSH
57711: LD_VAR 0 3
57715: PPUSH
57716: CALL_OW 12
57720: ARRAY
57721: ST_TO_ADDR
// if Crawls ( un ) then
57722: LD_VAR 0 2
57726: PPUSH
57727: CALL_OW 318
57731: IFFALSE 57742
// ComWalk ( un ) ;
57733: LD_VAR 0 2
57737: PPUSH
57738: CALL_OW 138
// SetClass ( un , class_sniper ) ;
57742: LD_VAR 0 2
57746: PPUSH
57747: LD_INT 5
57749: PPUSH
57750: CALL_OW 336
// end ;
57754: PPOPN 3
57756: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
57757: LD_EXP 39
57761: PUSH
57762: LD_EXP 57
57766: AND
57767: PUSH
57768: LD_OWVAR 67
57772: PUSH
57773: LD_INT 4
57775: LESS
57776: AND
57777: IFFALSE 57796
57779: GO 57781
57781: DISABLE
// begin Difficulty := Difficulty + 1 ;
57782: LD_ADDR_OWVAR 67
57786: PUSH
57787: LD_OWVAR 67
57791: PUSH
57792: LD_INT 1
57794: PLUS
57795: ST_TO_ADDR
// end ;
57796: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
57797: LD_EXP 39
57801: PUSH
57802: LD_EXP 58
57806: AND
57807: IFFALSE 57910
57809: GO 57811
57811: DISABLE
57812: LD_INT 0
57814: PPUSH
// begin for i := 1 to 5 do
57815: LD_ADDR_VAR 0 1
57819: PUSH
57820: DOUBLE
57821: LD_INT 1
57823: DEC
57824: ST_TO_ADDR
57825: LD_INT 5
57827: PUSH
57828: FOR_TO
57829: IFFALSE 57908
// begin uc_nation := nation_nature ;
57831: LD_ADDR_OWVAR 21
57835: PUSH
57836: LD_INT 0
57838: ST_TO_ADDR
// uc_side := 0 ;
57839: LD_ADDR_OWVAR 20
57843: PUSH
57844: LD_INT 0
57846: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
57847: LD_ADDR_OWVAR 29
57851: PUSH
57852: LD_INT 12
57854: PUSH
57855: LD_INT 12
57857: PUSH
57858: EMPTY
57859: LIST
57860: LIST
57861: ST_TO_ADDR
// hc_agressivity := 20 ;
57862: LD_ADDR_OWVAR 35
57866: PUSH
57867: LD_INT 20
57869: ST_TO_ADDR
// hc_class := class_tiger ;
57870: LD_ADDR_OWVAR 28
57874: PUSH
57875: LD_INT 14
57877: ST_TO_ADDR
// hc_gallery :=  ;
57878: LD_ADDR_OWVAR 33
57882: PUSH
57883: LD_STRING 
57885: ST_TO_ADDR
// hc_name :=  ;
57886: LD_ADDR_OWVAR 26
57890: PUSH
57891: LD_STRING 
57893: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
57894: CALL_OW 44
57898: PPUSH
57899: LD_INT 0
57901: PPUSH
57902: CALL_OW 51
// end ;
57906: GO 57828
57908: POP
57909: POP
// end ;
57910: PPOPN 1
57912: END
// every 0 0$1 trigger StreamModeActive and sBomb do
57913: LD_EXP 39
57917: PUSH
57918: LD_EXP 59
57922: AND
57923: IFFALSE 57932
57925: GO 57927
57927: DISABLE
// StreamSibBomb ;
57928: CALL 57933 0 0
57932: END
// export function StreamSibBomb ; var i , x , y ; begin
57933: LD_INT 0
57935: PPUSH
57936: PPUSH
57937: PPUSH
57938: PPUSH
// result := false ;
57939: LD_ADDR_VAR 0 1
57943: PUSH
57944: LD_INT 0
57946: ST_TO_ADDR
// for i := 1 to 16 do
57947: LD_ADDR_VAR 0 2
57951: PUSH
57952: DOUBLE
57953: LD_INT 1
57955: DEC
57956: ST_TO_ADDR
57957: LD_INT 16
57959: PUSH
57960: FOR_TO
57961: IFFALSE 58160
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
57963: LD_ADDR_VAR 0 3
57967: PUSH
57968: LD_INT 10
57970: PUSH
57971: LD_INT 20
57973: PUSH
57974: LD_INT 30
57976: PUSH
57977: LD_INT 40
57979: PUSH
57980: LD_INT 50
57982: PUSH
57983: LD_INT 60
57985: PUSH
57986: LD_INT 70
57988: PUSH
57989: LD_INT 80
57991: PUSH
57992: LD_INT 90
57994: PUSH
57995: LD_INT 100
57997: PUSH
57998: LD_INT 110
58000: PUSH
58001: LD_INT 120
58003: PUSH
58004: LD_INT 130
58006: PUSH
58007: LD_INT 140
58009: PUSH
58010: LD_INT 150
58012: PUSH
58013: EMPTY
58014: LIST
58015: LIST
58016: LIST
58017: LIST
58018: LIST
58019: LIST
58020: LIST
58021: LIST
58022: LIST
58023: LIST
58024: LIST
58025: LIST
58026: LIST
58027: LIST
58028: LIST
58029: PUSH
58030: LD_INT 1
58032: PPUSH
58033: LD_INT 15
58035: PPUSH
58036: CALL_OW 12
58040: ARRAY
58041: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
58042: LD_ADDR_VAR 0 4
58046: PUSH
58047: LD_INT 10
58049: PUSH
58050: LD_INT 20
58052: PUSH
58053: LD_INT 30
58055: PUSH
58056: LD_INT 40
58058: PUSH
58059: LD_INT 50
58061: PUSH
58062: LD_INT 60
58064: PUSH
58065: LD_INT 70
58067: PUSH
58068: LD_INT 80
58070: PUSH
58071: LD_INT 90
58073: PUSH
58074: LD_INT 100
58076: PUSH
58077: LD_INT 110
58079: PUSH
58080: LD_INT 120
58082: PUSH
58083: LD_INT 130
58085: PUSH
58086: LD_INT 140
58088: PUSH
58089: LD_INT 150
58091: PUSH
58092: EMPTY
58093: LIST
58094: LIST
58095: LIST
58096: LIST
58097: LIST
58098: LIST
58099: LIST
58100: LIST
58101: LIST
58102: LIST
58103: LIST
58104: LIST
58105: LIST
58106: LIST
58107: LIST
58108: PUSH
58109: LD_INT 1
58111: PPUSH
58112: LD_INT 15
58114: PPUSH
58115: CALL_OW 12
58119: ARRAY
58120: ST_TO_ADDR
// if ValidHex ( x , y ) then
58121: LD_VAR 0 3
58125: PPUSH
58126: LD_VAR 0 4
58130: PPUSH
58131: CALL_OW 488
58135: IFFALSE 58158
// begin result := [ x , y ] ;
58137: LD_ADDR_VAR 0 1
58141: PUSH
58142: LD_VAR 0 3
58146: PUSH
58147: LD_VAR 0 4
58151: PUSH
58152: EMPTY
58153: LIST
58154: LIST
58155: ST_TO_ADDR
// break ;
58156: GO 58160
// end ; end ;
58158: GO 57960
58160: POP
58161: POP
// if result then
58162: LD_VAR 0 1
58166: IFFALSE 58226
// begin ToLua ( playSibBomb() ) ;
58168: LD_STRING playSibBomb()
58170: PPUSH
58171: CALL_OW 559
// wait ( 0 0$14 ) ;
58175: LD_INT 490
58177: PPUSH
58178: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
58182: LD_VAR 0 1
58186: PUSH
58187: LD_INT 1
58189: ARRAY
58190: PPUSH
58191: LD_VAR 0 1
58195: PUSH
58196: LD_INT 2
58198: ARRAY
58199: PPUSH
58200: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
58204: LD_VAR 0 1
58208: PUSH
58209: LD_INT 1
58211: ARRAY
58212: PPUSH
58213: LD_VAR 0 1
58217: PUSH
58218: LD_INT 2
58220: ARRAY
58221: PPUSH
58222: CALL_OW 429
// end ; end ;
58226: LD_VAR 0 1
58230: RET
// every 0 0$1 trigger StreamModeActive and sReset do
58231: LD_EXP 39
58235: PUSH
58236: LD_EXP 61
58240: AND
58241: IFFALSE 58253
58243: GO 58245
58245: DISABLE
// YouLost (  ) ;
58246: LD_STRING 
58248: PPUSH
58249: CALL_OW 104
58253: END
// every 0 0$1 trigger StreamModeActive and sFog do
58254: LD_EXP 39
58258: PUSH
58259: LD_EXP 60
58263: AND
58264: IFFALSE 58278
58266: GO 58268
58268: DISABLE
// FogOff ( your_side ) ;
58269: LD_OWVAR 2
58273: PPUSH
58274: CALL_OW 344
58278: END
// every 0 0$1 trigger StreamModeActive and sSun do
58279: LD_EXP 39
58283: PUSH
58284: LD_EXP 62
58288: AND
58289: IFFALSE 58317
58291: GO 58293
58293: DISABLE
// begin solar_recharge_percent := 0 ;
58294: LD_ADDR_OWVAR 79
58298: PUSH
58299: LD_INT 0
58301: ST_TO_ADDR
// wait ( 5 5$00 ) ;
58302: LD_INT 10500
58304: PPUSH
58305: CALL_OW 67
// solar_recharge_percent := 100 ;
58309: LD_ADDR_OWVAR 79
58313: PUSH
58314: LD_INT 100
58316: ST_TO_ADDR
// end ;
58317: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
58318: LD_EXP 39
58322: PUSH
58323: LD_EXP 63
58327: AND
58328: IFFALSE 58567
58330: GO 58332
58332: DISABLE
58333: LD_INT 0
58335: PPUSH
58336: PPUSH
58337: PPUSH
// begin tmp := [ ] ;
58338: LD_ADDR_VAR 0 3
58342: PUSH
58343: EMPTY
58344: ST_TO_ADDR
// for i := 1 to 6 do
58345: LD_ADDR_VAR 0 1
58349: PUSH
58350: DOUBLE
58351: LD_INT 1
58353: DEC
58354: ST_TO_ADDR
58355: LD_INT 6
58357: PUSH
58358: FOR_TO
58359: IFFALSE 58464
// begin uc_nation := nation_nature ;
58361: LD_ADDR_OWVAR 21
58365: PUSH
58366: LD_INT 0
58368: ST_TO_ADDR
// uc_side := 0 ;
58369: LD_ADDR_OWVAR 20
58373: PUSH
58374: LD_INT 0
58376: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
58377: LD_ADDR_OWVAR 29
58381: PUSH
58382: LD_INT 12
58384: PUSH
58385: LD_INT 12
58387: PUSH
58388: EMPTY
58389: LIST
58390: LIST
58391: ST_TO_ADDR
// hc_agressivity := 20 ;
58392: LD_ADDR_OWVAR 35
58396: PUSH
58397: LD_INT 20
58399: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
58400: LD_ADDR_OWVAR 28
58404: PUSH
58405: LD_INT 17
58407: ST_TO_ADDR
// hc_gallery :=  ;
58408: LD_ADDR_OWVAR 33
58412: PUSH
58413: LD_STRING 
58415: ST_TO_ADDR
// hc_name :=  ;
58416: LD_ADDR_OWVAR 26
58420: PUSH
58421: LD_STRING 
58423: ST_TO_ADDR
// un := CreateHuman ;
58424: LD_ADDR_VAR 0 2
58428: PUSH
58429: CALL_OW 44
58433: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
58434: LD_VAR 0 2
58438: PPUSH
58439: LD_INT 1
58441: PPUSH
58442: CALL_OW 51
// tmp := tmp ^ un ;
58446: LD_ADDR_VAR 0 3
58450: PUSH
58451: LD_VAR 0 3
58455: PUSH
58456: LD_VAR 0 2
58460: ADD
58461: ST_TO_ADDR
// end ;
58462: GO 58358
58464: POP
58465: POP
// repeat wait ( 0 0$1 ) ;
58466: LD_INT 35
58468: PPUSH
58469: CALL_OW 67
// for un in tmp do
58473: LD_ADDR_VAR 0 2
58477: PUSH
58478: LD_VAR 0 3
58482: PUSH
58483: FOR_IN
58484: IFFALSE 58558
// begin if IsDead ( un ) then
58486: LD_VAR 0 2
58490: PPUSH
58491: CALL_OW 301
58495: IFFALSE 58515
// begin tmp := tmp diff un ;
58497: LD_ADDR_VAR 0 3
58501: PUSH
58502: LD_VAR 0 3
58506: PUSH
58507: LD_VAR 0 2
58511: DIFF
58512: ST_TO_ADDR
// continue ;
58513: GO 58483
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
58515: LD_VAR 0 2
58519: PPUSH
58520: LD_INT 3
58522: PUSH
58523: LD_INT 22
58525: PUSH
58526: LD_INT 0
58528: PUSH
58529: EMPTY
58530: LIST
58531: LIST
58532: PUSH
58533: EMPTY
58534: LIST
58535: LIST
58536: PPUSH
58537: CALL_OW 69
58541: PPUSH
58542: LD_VAR 0 2
58546: PPUSH
58547: CALL_OW 74
58551: PPUSH
58552: CALL_OW 115
// end ;
58556: GO 58483
58558: POP
58559: POP
// until not tmp ;
58560: LD_VAR 0 3
58564: NOT
58565: IFFALSE 58466
// end ;
58567: PPOPN 3
58569: END
// every 0 0$1 trigger StreamModeActive and sTroll do
58570: LD_EXP 39
58574: PUSH
58575: LD_EXP 64
58579: AND
58580: IFFALSE 58634
58582: GO 58584
58584: DISABLE
// begin ToLua ( displayTroll(); ) ;
58585: LD_STRING displayTroll();
58587: PPUSH
58588: CALL_OW 559
// wait ( 3 3$00 ) ;
58592: LD_INT 6300
58594: PPUSH
58595: CALL_OW 67
// ToLua ( hideTroll(); ) ;
58599: LD_STRING hideTroll();
58601: PPUSH
58602: CALL_OW 559
// wait ( 1 1$00 ) ;
58606: LD_INT 2100
58608: PPUSH
58609: CALL_OW 67
// ToLua ( displayTroll(); ) ;
58613: LD_STRING displayTroll();
58615: PPUSH
58616: CALL_OW 559
// wait ( 1 1$00 ) ;
58620: LD_INT 2100
58622: PPUSH
58623: CALL_OW 67
// ToLua ( hideTroll(); ) ;
58627: LD_STRING hideTroll();
58629: PPUSH
58630: CALL_OW 559
// end ;
58634: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
58635: LD_EXP 39
58639: PUSH
58640: LD_EXP 65
58644: AND
58645: IFFALSE 58708
58647: GO 58649
58649: DISABLE
58650: LD_INT 0
58652: PPUSH
// begin p := 0 ;
58653: LD_ADDR_VAR 0 1
58657: PUSH
58658: LD_INT 0
58660: ST_TO_ADDR
// repeat game_speed := 1 ;
58661: LD_ADDR_OWVAR 65
58665: PUSH
58666: LD_INT 1
58668: ST_TO_ADDR
// wait ( 0 0$1 ) ;
58669: LD_INT 35
58671: PPUSH
58672: CALL_OW 67
// p := p + 1 ;
58676: LD_ADDR_VAR 0 1
58680: PUSH
58681: LD_VAR 0 1
58685: PUSH
58686: LD_INT 1
58688: PLUS
58689: ST_TO_ADDR
// until p >= 60 ;
58690: LD_VAR 0 1
58694: PUSH
58695: LD_INT 60
58697: GREATEREQUAL
58698: IFFALSE 58661
// game_speed := 4 ;
58700: LD_ADDR_OWVAR 65
58704: PUSH
58705: LD_INT 4
58707: ST_TO_ADDR
// end ;
58708: PPOPN 1
58710: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
58711: LD_EXP 39
58715: PUSH
58716: LD_EXP 66
58720: AND
58721: IFFALSE 58867
58723: GO 58725
58725: DISABLE
58726: LD_INT 0
58728: PPUSH
58729: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
58730: LD_ADDR_VAR 0 1
58734: PUSH
58735: LD_INT 22
58737: PUSH
58738: LD_OWVAR 2
58742: PUSH
58743: EMPTY
58744: LIST
58745: LIST
58746: PUSH
58747: LD_INT 2
58749: PUSH
58750: LD_INT 30
58752: PUSH
58753: LD_INT 0
58755: PUSH
58756: EMPTY
58757: LIST
58758: LIST
58759: PUSH
58760: LD_INT 30
58762: PUSH
58763: LD_INT 1
58765: PUSH
58766: EMPTY
58767: LIST
58768: LIST
58769: PUSH
58770: EMPTY
58771: LIST
58772: LIST
58773: LIST
58774: PUSH
58775: EMPTY
58776: LIST
58777: LIST
58778: PPUSH
58779: CALL_OW 69
58783: ST_TO_ADDR
// if not depot then
58784: LD_VAR 0 1
58788: NOT
58789: IFFALSE 58793
// exit ;
58791: GO 58867
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
58793: LD_ADDR_VAR 0 2
58797: PUSH
58798: LD_VAR 0 1
58802: PUSH
58803: LD_INT 1
58805: PPUSH
58806: LD_VAR 0 1
58810: PPUSH
58811: CALL_OW 12
58815: ARRAY
58816: PPUSH
58817: CALL_OW 274
58821: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
58822: LD_VAR 0 2
58826: PPUSH
58827: LD_INT 1
58829: PPUSH
58830: LD_INT 0
58832: PPUSH
58833: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
58837: LD_VAR 0 2
58841: PPUSH
58842: LD_INT 2
58844: PPUSH
58845: LD_INT 0
58847: PPUSH
58848: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
58852: LD_VAR 0 2
58856: PPUSH
58857: LD_INT 3
58859: PPUSH
58860: LD_INT 0
58862: PPUSH
58863: CALL_OW 277
// end ;
58867: PPOPN 2
58869: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
58870: LD_EXP 39
58874: PUSH
58875: LD_EXP 67
58879: AND
58880: IFFALSE 58977
58882: GO 58884
58884: DISABLE
58885: LD_INT 0
58887: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
58888: LD_ADDR_VAR 0 1
58892: PUSH
58893: LD_INT 22
58895: PUSH
58896: LD_OWVAR 2
58900: PUSH
58901: EMPTY
58902: LIST
58903: LIST
58904: PUSH
58905: LD_INT 21
58907: PUSH
58908: LD_INT 1
58910: PUSH
58911: EMPTY
58912: LIST
58913: LIST
58914: PUSH
58915: LD_INT 3
58917: PUSH
58918: LD_INT 23
58920: PUSH
58921: LD_INT 0
58923: PUSH
58924: EMPTY
58925: LIST
58926: LIST
58927: PUSH
58928: EMPTY
58929: LIST
58930: LIST
58931: PUSH
58932: EMPTY
58933: LIST
58934: LIST
58935: LIST
58936: PPUSH
58937: CALL_OW 69
58941: ST_TO_ADDR
// if not tmp then
58942: LD_VAR 0 1
58946: NOT
58947: IFFALSE 58951
// exit ;
58949: GO 58977
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
58951: LD_VAR 0 1
58955: PUSH
58956: LD_INT 1
58958: PPUSH
58959: LD_VAR 0 1
58963: PPUSH
58964: CALL_OW 12
58968: ARRAY
58969: PPUSH
58970: LD_INT 200
58972: PPUSH
58973: CALL_OW 234
// end ;
58977: PPOPN 1
58979: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
58980: LD_EXP 39
58984: PUSH
58985: LD_EXP 68
58989: AND
58990: IFFALSE 59069
58992: GO 58994
58994: DISABLE
58995: LD_INT 0
58997: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
58998: LD_ADDR_VAR 0 1
59002: PUSH
59003: LD_INT 22
59005: PUSH
59006: LD_OWVAR 2
59010: PUSH
59011: EMPTY
59012: LIST
59013: LIST
59014: PUSH
59015: LD_INT 21
59017: PUSH
59018: LD_INT 2
59020: PUSH
59021: EMPTY
59022: LIST
59023: LIST
59024: PUSH
59025: EMPTY
59026: LIST
59027: LIST
59028: PPUSH
59029: CALL_OW 69
59033: ST_TO_ADDR
// if not tmp then
59034: LD_VAR 0 1
59038: NOT
59039: IFFALSE 59043
// exit ;
59041: GO 59069
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
59043: LD_VAR 0 1
59047: PUSH
59048: LD_INT 1
59050: PPUSH
59051: LD_VAR 0 1
59055: PPUSH
59056: CALL_OW 12
59060: ARRAY
59061: PPUSH
59062: LD_INT 60
59064: PPUSH
59065: CALL_OW 234
// end ;
59069: PPOPN 1
59071: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
59072: LD_EXP 39
59076: PUSH
59077: LD_EXP 69
59081: AND
59082: IFFALSE 59181
59084: GO 59086
59086: DISABLE
59087: LD_INT 0
59089: PPUSH
59090: PPUSH
// begin enable ;
59091: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
59092: LD_ADDR_VAR 0 1
59096: PUSH
59097: LD_INT 22
59099: PUSH
59100: LD_OWVAR 2
59104: PUSH
59105: EMPTY
59106: LIST
59107: LIST
59108: PUSH
59109: LD_INT 61
59111: PUSH
59112: EMPTY
59113: LIST
59114: PUSH
59115: LD_INT 33
59117: PUSH
59118: LD_INT 2
59120: PUSH
59121: EMPTY
59122: LIST
59123: LIST
59124: PUSH
59125: EMPTY
59126: LIST
59127: LIST
59128: LIST
59129: PPUSH
59130: CALL_OW 69
59134: ST_TO_ADDR
// if not tmp then
59135: LD_VAR 0 1
59139: NOT
59140: IFFALSE 59144
// exit ;
59142: GO 59181
// for i in tmp do
59144: LD_ADDR_VAR 0 2
59148: PUSH
59149: LD_VAR 0 1
59153: PUSH
59154: FOR_IN
59155: IFFALSE 59179
// if IsControledBy ( i ) then
59157: LD_VAR 0 2
59161: PPUSH
59162: CALL_OW 312
59166: IFFALSE 59177
// ComUnlink ( i ) ;
59168: LD_VAR 0 2
59172: PPUSH
59173: CALL_OW 136
59177: GO 59154
59179: POP
59180: POP
// end ;
59181: PPOPN 2
59183: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
59184: LD_EXP 39
59188: PUSH
59189: LD_EXP 70
59193: AND
59194: IFFALSE 59334
59196: GO 59198
59198: DISABLE
59199: LD_INT 0
59201: PPUSH
59202: PPUSH
// begin ToLua ( displayPowell(); ) ;
59203: LD_STRING displayPowell();
59205: PPUSH
59206: CALL_OW 559
// uc_side := 0 ;
59210: LD_ADDR_OWVAR 20
59214: PUSH
59215: LD_INT 0
59217: ST_TO_ADDR
// uc_nation := 2 ;
59218: LD_ADDR_OWVAR 21
59222: PUSH
59223: LD_INT 2
59225: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
59226: LD_ADDR_OWVAR 37
59230: PUSH
59231: LD_INT 14
59233: ST_TO_ADDR
// vc_engine := engine_siberite ;
59234: LD_ADDR_OWVAR 39
59238: PUSH
59239: LD_INT 3
59241: ST_TO_ADDR
// vc_control := control_apeman ;
59242: LD_ADDR_OWVAR 38
59246: PUSH
59247: LD_INT 5
59249: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
59250: LD_ADDR_OWVAR 40
59254: PUSH
59255: LD_INT 29
59257: ST_TO_ADDR
// un := CreateVehicle ;
59258: LD_ADDR_VAR 0 2
59262: PUSH
59263: CALL_OW 45
59267: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
59268: LD_VAR 0 2
59272: PPUSH
59273: LD_INT 1
59275: PPUSH
59276: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
59280: LD_INT 35
59282: PPUSH
59283: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
59287: LD_VAR 0 2
59291: PPUSH
59292: LD_INT 22
59294: PUSH
59295: LD_OWVAR 2
59299: PUSH
59300: EMPTY
59301: LIST
59302: LIST
59303: PPUSH
59304: CALL_OW 69
59308: PPUSH
59309: LD_VAR 0 2
59313: PPUSH
59314: CALL_OW 74
59318: PPUSH
59319: CALL_OW 115
// until IsDead ( un ) ;
59323: LD_VAR 0 2
59327: PPUSH
59328: CALL_OW 301
59332: IFFALSE 59280
// end ;
59334: PPOPN 2
59336: END
// every 0 0$1 trigger StreamModeActive and sStu do
59337: LD_EXP 39
59341: PUSH
59342: LD_EXP 78
59346: AND
59347: IFFALSE 59363
59349: GO 59351
59351: DISABLE
// begin ToLua ( displayStucuk(); ) ;
59352: LD_STRING displayStucuk();
59354: PPUSH
59355: CALL_OW 559
// ResetFog ;
59359: CALL_OW 335
// end ;
59363: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
59364: LD_EXP 39
59368: PUSH
59369: LD_EXP 71
59373: AND
59374: IFFALSE 59515
59376: GO 59378
59378: DISABLE
59379: LD_INT 0
59381: PPUSH
59382: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
59383: LD_ADDR_VAR 0 2
59387: PUSH
59388: LD_INT 22
59390: PUSH
59391: LD_OWVAR 2
59395: PUSH
59396: EMPTY
59397: LIST
59398: LIST
59399: PUSH
59400: LD_INT 21
59402: PUSH
59403: LD_INT 1
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: PUSH
59410: EMPTY
59411: LIST
59412: LIST
59413: PPUSH
59414: CALL_OW 69
59418: ST_TO_ADDR
// if not tmp then
59419: LD_VAR 0 2
59423: NOT
59424: IFFALSE 59428
// exit ;
59426: GO 59515
// un := tmp [ rand ( 1 , tmp ) ] ;
59428: LD_ADDR_VAR 0 1
59432: PUSH
59433: LD_VAR 0 2
59437: PUSH
59438: LD_INT 1
59440: PPUSH
59441: LD_VAR 0 2
59445: PPUSH
59446: CALL_OW 12
59450: ARRAY
59451: ST_TO_ADDR
// SetSide ( un , 0 ) ;
59452: LD_VAR 0 1
59456: PPUSH
59457: LD_INT 0
59459: PPUSH
59460: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
59464: LD_VAR 0 1
59468: PPUSH
59469: LD_OWVAR 3
59473: PUSH
59474: LD_VAR 0 1
59478: DIFF
59479: PPUSH
59480: LD_VAR 0 1
59484: PPUSH
59485: CALL_OW 74
59489: PPUSH
59490: CALL_OW 115
// wait ( 0 0$20 ) ;
59494: LD_INT 700
59496: PPUSH
59497: CALL_OW 67
// SetSide ( un , your_side ) ;
59501: LD_VAR 0 1
59505: PPUSH
59506: LD_OWVAR 2
59510: PPUSH
59511: CALL_OW 235
// end ;
59515: PPOPN 2
59517: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
59518: LD_EXP 39
59522: PUSH
59523: LD_EXP 72
59527: AND
59528: IFFALSE 59634
59530: GO 59532
59532: DISABLE
59533: LD_INT 0
59535: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
59536: LD_ADDR_VAR 0 1
59540: PUSH
59541: LD_INT 22
59543: PUSH
59544: LD_OWVAR 2
59548: PUSH
59549: EMPTY
59550: LIST
59551: LIST
59552: PUSH
59553: LD_INT 2
59555: PUSH
59556: LD_INT 30
59558: PUSH
59559: LD_INT 0
59561: PUSH
59562: EMPTY
59563: LIST
59564: LIST
59565: PUSH
59566: LD_INT 30
59568: PUSH
59569: LD_INT 1
59571: PUSH
59572: EMPTY
59573: LIST
59574: LIST
59575: PUSH
59576: EMPTY
59577: LIST
59578: LIST
59579: LIST
59580: PUSH
59581: EMPTY
59582: LIST
59583: LIST
59584: PPUSH
59585: CALL_OW 69
59589: ST_TO_ADDR
// if not depot then
59590: LD_VAR 0 1
59594: NOT
59595: IFFALSE 59599
// exit ;
59597: GO 59634
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
59599: LD_VAR 0 1
59603: PUSH
59604: LD_INT 1
59606: ARRAY
59607: PPUSH
59608: CALL_OW 250
59612: PPUSH
59613: LD_VAR 0 1
59617: PUSH
59618: LD_INT 1
59620: ARRAY
59621: PPUSH
59622: CALL_OW 251
59626: PPUSH
59627: LD_INT 70
59629: PPUSH
59630: CALL_OW 495
// end ;
59634: PPOPN 1
59636: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
59637: LD_EXP 39
59641: PUSH
59642: LD_EXP 73
59646: AND
59647: IFFALSE 59858
59649: GO 59651
59651: DISABLE
59652: LD_INT 0
59654: PPUSH
59655: PPUSH
59656: PPUSH
59657: PPUSH
59658: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
59659: LD_ADDR_VAR 0 5
59663: PUSH
59664: LD_INT 22
59666: PUSH
59667: LD_OWVAR 2
59671: PUSH
59672: EMPTY
59673: LIST
59674: LIST
59675: PUSH
59676: LD_INT 21
59678: PUSH
59679: LD_INT 1
59681: PUSH
59682: EMPTY
59683: LIST
59684: LIST
59685: PUSH
59686: EMPTY
59687: LIST
59688: LIST
59689: PPUSH
59690: CALL_OW 69
59694: ST_TO_ADDR
// if not tmp then
59695: LD_VAR 0 5
59699: NOT
59700: IFFALSE 59704
// exit ;
59702: GO 59858
// for i in tmp do
59704: LD_ADDR_VAR 0 1
59708: PUSH
59709: LD_VAR 0 5
59713: PUSH
59714: FOR_IN
59715: IFFALSE 59856
// begin d := rand ( 0 , 5 ) ;
59717: LD_ADDR_VAR 0 4
59721: PUSH
59722: LD_INT 0
59724: PPUSH
59725: LD_INT 5
59727: PPUSH
59728: CALL_OW 12
59732: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
59733: LD_ADDR_VAR 0 2
59737: PUSH
59738: LD_VAR 0 1
59742: PPUSH
59743: CALL_OW 250
59747: PPUSH
59748: LD_VAR 0 4
59752: PPUSH
59753: LD_INT 3
59755: PPUSH
59756: LD_INT 12
59758: PPUSH
59759: CALL_OW 12
59763: PPUSH
59764: CALL_OW 272
59768: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
59769: LD_ADDR_VAR 0 3
59773: PUSH
59774: LD_VAR 0 1
59778: PPUSH
59779: CALL_OW 251
59783: PPUSH
59784: LD_VAR 0 4
59788: PPUSH
59789: LD_INT 3
59791: PPUSH
59792: LD_INT 12
59794: PPUSH
59795: CALL_OW 12
59799: PPUSH
59800: CALL_OW 273
59804: ST_TO_ADDR
// if ValidHex ( x , y ) then
59805: LD_VAR 0 2
59809: PPUSH
59810: LD_VAR 0 3
59814: PPUSH
59815: CALL_OW 488
59819: IFFALSE 59854
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
59821: LD_VAR 0 1
59825: PPUSH
59826: LD_VAR 0 2
59830: PPUSH
59831: LD_VAR 0 3
59835: PPUSH
59836: LD_INT 3
59838: PPUSH
59839: LD_INT 6
59841: PPUSH
59842: CALL_OW 12
59846: PPUSH
59847: LD_INT 1
59849: PPUSH
59850: CALL_OW 483
// end ;
59854: GO 59714
59856: POP
59857: POP
// end ;
59858: PPOPN 5
59860: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
59861: LD_EXP 39
59865: PUSH
59866: LD_EXP 74
59870: AND
59871: IFFALSE 59965
59873: GO 59875
59875: DISABLE
59876: LD_INT 0
59878: PPUSH
59879: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
59880: LD_ADDR_VAR 0 2
59884: PUSH
59885: LD_INT 22
59887: PUSH
59888: LD_OWVAR 2
59892: PUSH
59893: EMPTY
59894: LIST
59895: LIST
59896: PUSH
59897: LD_INT 32
59899: PUSH
59900: LD_INT 1
59902: PUSH
59903: EMPTY
59904: LIST
59905: LIST
59906: PUSH
59907: LD_INT 21
59909: PUSH
59910: LD_INT 2
59912: PUSH
59913: EMPTY
59914: LIST
59915: LIST
59916: PUSH
59917: EMPTY
59918: LIST
59919: LIST
59920: LIST
59921: PPUSH
59922: CALL_OW 69
59926: ST_TO_ADDR
// if not tmp then
59927: LD_VAR 0 2
59931: NOT
59932: IFFALSE 59936
// exit ;
59934: GO 59965
// for i in tmp do
59936: LD_ADDR_VAR 0 1
59940: PUSH
59941: LD_VAR 0 2
59945: PUSH
59946: FOR_IN
59947: IFFALSE 59963
// SetFuel ( i , 0 ) ;
59949: LD_VAR 0 1
59953: PPUSH
59954: LD_INT 0
59956: PPUSH
59957: CALL_OW 240
59961: GO 59946
59963: POP
59964: POP
// end ;
59965: PPOPN 2
59967: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
59968: LD_EXP 39
59972: PUSH
59973: LD_EXP 75
59977: AND
59978: IFFALSE 60044
59980: GO 59982
59982: DISABLE
59983: LD_INT 0
59985: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
59986: LD_ADDR_VAR 0 1
59990: PUSH
59991: LD_INT 22
59993: PUSH
59994: LD_OWVAR 2
59998: PUSH
59999: EMPTY
60000: LIST
60001: LIST
60002: PUSH
60003: LD_INT 30
60005: PUSH
60006: LD_INT 29
60008: PUSH
60009: EMPTY
60010: LIST
60011: LIST
60012: PUSH
60013: EMPTY
60014: LIST
60015: LIST
60016: PPUSH
60017: CALL_OW 69
60021: ST_TO_ADDR
// if not tmp then
60022: LD_VAR 0 1
60026: NOT
60027: IFFALSE 60031
// exit ;
60029: GO 60044
// DestroyUnit ( tmp [ 1 ] ) ;
60031: LD_VAR 0 1
60035: PUSH
60036: LD_INT 1
60038: ARRAY
60039: PPUSH
60040: CALL_OW 65
// end ;
60044: PPOPN 1
60046: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
60047: LD_EXP 39
60051: PUSH
60052: LD_EXP 77
60056: AND
60057: IFFALSE 60186
60059: GO 60061
60061: DISABLE
60062: LD_INT 0
60064: PPUSH
// begin uc_side := 0 ;
60065: LD_ADDR_OWVAR 20
60069: PUSH
60070: LD_INT 0
60072: ST_TO_ADDR
// uc_nation := nation_arabian ;
60073: LD_ADDR_OWVAR 21
60077: PUSH
60078: LD_INT 2
60080: ST_TO_ADDR
// hc_gallery :=  ;
60081: LD_ADDR_OWVAR 33
60085: PUSH
60086: LD_STRING 
60088: ST_TO_ADDR
// hc_name :=  ;
60089: LD_ADDR_OWVAR 26
60093: PUSH
60094: LD_STRING 
60096: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
60097: LD_INT 1
60099: PPUSH
60100: LD_INT 11
60102: PPUSH
60103: LD_INT 10
60105: PPUSH
60106: CALL_OW 380
// un := CreateHuman ;
60110: LD_ADDR_VAR 0 1
60114: PUSH
60115: CALL_OW 44
60119: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
60120: LD_VAR 0 1
60124: PPUSH
60125: LD_INT 1
60127: PPUSH
60128: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
60132: LD_INT 35
60134: PPUSH
60135: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
60139: LD_VAR 0 1
60143: PPUSH
60144: LD_INT 22
60146: PUSH
60147: LD_OWVAR 2
60151: PUSH
60152: EMPTY
60153: LIST
60154: LIST
60155: PPUSH
60156: CALL_OW 69
60160: PPUSH
60161: LD_VAR 0 1
60165: PPUSH
60166: CALL_OW 74
60170: PPUSH
60171: CALL_OW 115
// until IsDead ( un ) ;
60175: LD_VAR 0 1
60179: PPUSH
60180: CALL_OW 301
60184: IFFALSE 60132
// end ;
60186: PPOPN 1
60188: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
60189: LD_EXP 39
60193: PUSH
60194: LD_EXP 79
60198: AND
60199: IFFALSE 60211
60201: GO 60203
60203: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
60204: LD_STRING earthquake(getX(game), 0, 32)
60206: PPUSH
60207: CALL_OW 559
60211: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
60212: LD_EXP 39
60216: PUSH
60217: LD_EXP 80
60221: AND
60222: IFFALSE 60313
60224: GO 60226
60226: DISABLE
60227: LD_INT 0
60229: PPUSH
// begin enable ;
60230: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
60231: LD_ADDR_VAR 0 1
60235: PUSH
60236: LD_INT 22
60238: PUSH
60239: LD_OWVAR 2
60243: PUSH
60244: EMPTY
60245: LIST
60246: LIST
60247: PUSH
60248: LD_INT 21
60250: PUSH
60251: LD_INT 2
60253: PUSH
60254: EMPTY
60255: LIST
60256: LIST
60257: PUSH
60258: LD_INT 33
60260: PUSH
60261: LD_INT 3
60263: PUSH
60264: EMPTY
60265: LIST
60266: LIST
60267: PUSH
60268: EMPTY
60269: LIST
60270: LIST
60271: LIST
60272: PPUSH
60273: CALL_OW 69
60277: ST_TO_ADDR
// if not tmp then
60278: LD_VAR 0 1
60282: NOT
60283: IFFALSE 60287
// exit ;
60285: GO 60313
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
60287: LD_VAR 0 1
60291: PUSH
60292: LD_INT 1
60294: PPUSH
60295: LD_VAR 0 1
60299: PPUSH
60300: CALL_OW 12
60304: ARRAY
60305: PPUSH
60306: LD_INT 1
60308: PPUSH
60309: CALL_OW 234
// end ;
60313: PPOPN 1
60315: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
60316: LD_EXP 39
60320: PUSH
60321: LD_EXP 81
60325: AND
60326: IFFALSE 60467
60328: GO 60330
60330: DISABLE
60331: LD_INT 0
60333: PPUSH
60334: PPUSH
60335: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
60336: LD_ADDR_VAR 0 3
60340: PUSH
60341: LD_INT 22
60343: PUSH
60344: LD_OWVAR 2
60348: PUSH
60349: EMPTY
60350: LIST
60351: LIST
60352: PUSH
60353: LD_INT 25
60355: PUSH
60356: LD_INT 1
60358: PUSH
60359: EMPTY
60360: LIST
60361: LIST
60362: PUSH
60363: EMPTY
60364: LIST
60365: LIST
60366: PPUSH
60367: CALL_OW 69
60371: ST_TO_ADDR
// if not tmp then
60372: LD_VAR 0 3
60376: NOT
60377: IFFALSE 60381
// exit ;
60379: GO 60467
// un := tmp [ rand ( 1 , tmp ) ] ;
60381: LD_ADDR_VAR 0 2
60385: PUSH
60386: LD_VAR 0 3
60390: PUSH
60391: LD_INT 1
60393: PPUSH
60394: LD_VAR 0 3
60398: PPUSH
60399: CALL_OW 12
60403: ARRAY
60404: ST_TO_ADDR
// if Crawls ( un ) then
60405: LD_VAR 0 2
60409: PPUSH
60410: CALL_OW 318
60414: IFFALSE 60425
// ComWalk ( un ) ;
60416: LD_VAR 0 2
60420: PPUSH
60421: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
60425: LD_VAR 0 2
60429: PPUSH
60430: LD_INT 9
60432: PPUSH
60433: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
60437: LD_INT 28
60439: PPUSH
60440: LD_OWVAR 2
60444: PPUSH
60445: LD_INT 2
60447: PPUSH
60448: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
60452: LD_INT 29
60454: PPUSH
60455: LD_OWVAR 2
60459: PPUSH
60460: LD_INT 2
60462: PPUSH
60463: CALL_OW 322
// end ;
60467: PPOPN 3
60469: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
60470: LD_EXP 39
60474: PUSH
60475: LD_EXP 82
60479: AND
60480: IFFALSE 60591
60482: GO 60484
60484: DISABLE
60485: LD_INT 0
60487: PPUSH
60488: PPUSH
60489: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
60490: LD_ADDR_VAR 0 3
60494: PUSH
60495: LD_INT 22
60497: PUSH
60498: LD_OWVAR 2
60502: PUSH
60503: EMPTY
60504: LIST
60505: LIST
60506: PUSH
60507: LD_INT 25
60509: PUSH
60510: LD_INT 1
60512: PUSH
60513: EMPTY
60514: LIST
60515: LIST
60516: PUSH
60517: EMPTY
60518: LIST
60519: LIST
60520: PPUSH
60521: CALL_OW 69
60525: ST_TO_ADDR
// if not tmp then
60526: LD_VAR 0 3
60530: NOT
60531: IFFALSE 60535
// exit ;
60533: GO 60591
// un := tmp [ rand ( 1 , tmp ) ] ;
60535: LD_ADDR_VAR 0 2
60539: PUSH
60540: LD_VAR 0 3
60544: PUSH
60545: LD_INT 1
60547: PPUSH
60548: LD_VAR 0 3
60552: PPUSH
60553: CALL_OW 12
60557: ARRAY
60558: ST_TO_ADDR
// if Crawls ( un ) then
60559: LD_VAR 0 2
60563: PPUSH
60564: CALL_OW 318
60568: IFFALSE 60579
// ComWalk ( un ) ;
60570: LD_VAR 0 2
60574: PPUSH
60575: CALL_OW 138
// SetClass ( un , class_mortar ) ;
60579: LD_VAR 0 2
60583: PPUSH
60584: LD_INT 8
60586: PPUSH
60587: CALL_OW 336
// end ;
60591: PPOPN 3
60593: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
60594: LD_EXP 39
60598: PUSH
60599: LD_EXP 83
60603: AND
60604: IFFALSE 60748
60606: GO 60608
60608: DISABLE
60609: LD_INT 0
60611: PPUSH
60612: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
60613: LD_ADDR_VAR 0 2
60617: PUSH
60618: LD_INT 22
60620: PUSH
60621: LD_OWVAR 2
60625: PUSH
60626: EMPTY
60627: LIST
60628: LIST
60629: PUSH
60630: LD_INT 21
60632: PUSH
60633: LD_INT 2
60635: PUSH
60636: EMPTY
60637: LIST
60638: LIST
60639: PUSH
60640: LD_INT 2
60642: PUSH
60643: LD_INT 34
60645: PUSH
60646: LD_INT 12
60648: PUSH
60649: EMPTY
60650: LIST
60651: LIST
60652: PUSH
60653: LD_INT 34
60655: PUSH
60656: LD_INT 51
60658: PUSH
60659: EMPTY
60660: LIST
60661: LIST
60662: PUSH
60663: LD_INT 34
60665: PUSH
60666: LD_INT 32
60668: PUSH
60669: EMPTY
60670: LIST
60671: LIST
60672: PUSH
60673: EMPTY
60674: LIST
60675: LIST
60676: LIST
60677: LIST
60678: PUSH
60679: EMPTY
60680: LIST
60681: LIST
60682: LIST
60683: PPUSH
60684: CALL_OW 69
60688: ST_TO_ADDR
// if not tmp then
60689: LD_VAR 0 2
60693: NOT
60694: IFFALSE 60698
// exit ;
60696: GO 60748
// for i in tmp do
60698: LD_ADDR_VAR 0 1
60702: PUSH
60703: LD_VAR 0 2
60707: PUSH
60708: FOR_IN
60709: IFFALSE 60746
// if GetCargo ( i , mat_artifact ) = 0 then
60711: LD_VAR 0 1
60715: PPUSH
60716: LD_INT 4
60718: PPUSH
60719: CALL_OW 289
60723: PUSH
60724: LD_INT 0
60726: EQUAL
60727: IFFALSE 60744
// SetCargo ( i , mat_siberit , 100 ) ;
60729: LD_VAR 0 1
60733: PPUSH
60734: LD_INT 3
60736: PPUSH
60737: LD_INT 100
60739: PPUSH
60740: CALL_OW 290
60744: GO 60708
60746: POP
60747: POP
// end ;
60748: PPOPN 2
60750: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
60751: LD_EXP 39
60755: PUSH
60756: LD_EXP 84
60760: AND
60761: IFFALSE 60944
60763: GO 60765
60765: DISABLE
60766: LD_INT 0
60768: PPUSH
60769: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
60770: LD_ADDR_VAR 0 2
60774: PUSH
60775: LD_INT 22
60777: PUSH
60778: LD_OWVAR 2
60782: PUSH
60783: EMPTY
60784: LIST
60785: LIST
60786: PPUSH
60787: CALL_OW 69
60791: ST_TO_ADDR
// if not tmp then
60792: LD_VAR 0 2
60796: NOT
60797: IFFALSE 60801
// exit ;
60799: GO 60944
// for i := 1 to 2 do
60801: LD_ADDR_VAR 0 1
60805: PUSH
60806: DOUBLE
60807: LD_INT 1
60809: DEC
60810: ST_TO_ADDR
60811: LD_INT 2
60813: PUSH
60814: FOR_TO
60815: IFFALSE 60942
// begin uc_side := your_side ;
60817: LD_ADDR_OWVAR 20
60821: PUSH
60822: LD_OWVAR 2
60826: ST_TO_ADDR
// uc_nation := nation_american ;
60827: LD_ADDR_OWVAR 21
60831: PUSH
60832: LD_INT 1
60834: ST_TO_ADDR
// vc_chassis := us_morphling ;
60835: LD_ADDR_OWVAR 37
60839: PUSH
60840: LD_INT 5
60842: ST_TO_ADDR
// vc_engine := engine_siberite ;
60843: LD_ADDR_OWVAR 39
60847: PUSH
60848: LD_INT 3
60850: ST_TO_ADDR
// vc_control := control_computer ;
60851: LD_ADDR_OWVAR 38
60855: PUSH
60856: LD_INT 3
60858: ST_TO_ADDR
// vc_weapon := us_double_laser ;
60859: LD_ADDR_OWVAR 40
60863: PUSH
60864: LD_INT 10
60866: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
60867: LD_VAR 0 2
60871: PUSH
60872: LD_INT 1
60874: ARRAY
60875: PPUSH
60876: CALL_OW 310
60880: NOT
60881: IFFALSE 60928
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
60883: CALL_OW 45
60887: PPUSH
60888: LD_VAR 0 2
60892: PUSH
60893: LD_INT 1
60895: ARRAY
60896: PPUSH
60897: CALL_OW 250
60901: PPUSH
60902: LD_VAR 0 2
60906: PUSH
60907: LD_INT 1
60909: ARRAY
60910: PPUSH
60911: CALL_OW 251
60915: PPUSH
60916: LD_INT 12
60918: PPUSH
60919: LD_INT 1
60921: PPUSH
60922: CALL_OW 50
60926: GO 60940
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
60928: CALL_OW 45
60932: PPUSH
60933: LD_INT 1
60935: PPUSH
60936: CALL_OW 51
// end ;
60940: GO 60814
60942: POP
60943: POP
// end ;
60944: PPOPN 2
60946: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
60947: LD_EXP 39
60951: PUSH
60952: LD_EXP 85
60956: AND
60957: IFFALSE 61179
60959: GO 60961
60961: DISABLE
60962: LD_INT 0
60964: PPUSH
60965: PPUSH
60966: PPUSH
60967: PPUSH
60968: PPUSH
60969: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
60970: LD_ADDR_VAR 0 6
60974: PUSH
60975: LD_INT 22
60977: PUSH
60978: LD_OWVAR 2
60982: PUSH
60983: EMPTY
60984: LIST
60985: LIST
60986: PUSH
60987: LD_INT 21
60989: PUSH
60990: LD_INT 1
60992: PUSH
60993: EMPTY
60994: LIST
60995: LIST
60996: PUSH
60997: LD_INT 3
60999: PUSH
61000: LD_INT 23
61002: PUSH
61003: LD_INT 0
61005: PUSH
61006: EMPTY
61007: LIST
61008: LIST
61009: PUSH
61010: EMPTY
61011: LIST
61012: LIST
61013: PUSH
61014: EMPTY
61015: LIST
61016: LIST
61017: LIST
61018: PPUSH
61019: CALL_OW 69
61023: ST_TO_ADDR
// if not tmp then
61024: LD_VAR 0 6
61028: NOT
61029: IFFALSE 61033
// exit ;
61031: GO 61179
// s1 := rand ( 1 , 4 ) ;
61033: LD_ADDR_VAR 0 2
61037: PUSH
61038: LD_INT 1
61040: PPUSH
61041: LD_INT 4
61043: PPUSH
61044: CALL_OW 12
61048: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
61049: LD_ADDR_VAR 0 4
61053: PUSH
61054: LD_VAR 0 6
61058: PUSH
61059: LD_INT 1
61061: ARRAY
61062: PPUSH
61063: LD_VAR 0 2
61067: PPUSH
61068: CALL_OW 259
61072: ST_TO_ADDR
// if s1 = 1 then
61073: LD_VAR 0 2
61077: PUSH
61078: LD_INT 1
61080: EQUAL
61081: IFFALSE 61101
// s2 := rand ( 2 , 4 ) else
61083: LD_ADDR_VAR 0 3
61087: PUSH
61088: LD_INT 2
61090: PPUSH
61091: LD_INT 4
61093: PPUSH
61094: CALL_OW 12
61098: ST_TO_ADDR
61099: GO 61109
// s2 := 1 ;
61101: LD_ADDR_VAR 0 3
61105: PUSH
61106: LD_INT 1
61108: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
61109: LD_ADDR_VAR 0 5
61113: PUSH
61114: LD_VAR 0 6
61118: PUSH
61119: LD_INT 1
61121: ARRAY
61122: PPUSH
61123: LD_VAR 0 3
61127: PPUSH
61128: CALL_OW 259
61132: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
61133: LD_VAR 0 6
61137: PUSH
61138: LD_INT 1
61140: ARRAY
61141: PPUSH
61142: LD_VAR 0 2
61146: PPUSH
61147: LD_VAR 0 5
61151: PPUSH
61152: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
61156: LD_VAR 0 6
61160: PUSH
61161: LD_INT 1
61163: ARRAY
61164: PPUSH
61165: LD_VAR 0 3
61169: PPUSH
61170: LD_VAR 0 4
61174: PPUSH
61175: CALL_OW 237
// end ;
61179: PPOPN 6
61181: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
61182: LD_EXP 39
61186: PUSH
61187: LD_EXP 86
61191: AND
61192: IFFALSE 61271
61194: GO 61196
61196: DISABLE
61197: LD_INT 0
61199: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
61200: LD_ADDR_VAR 0 1
61204: PUSH
61205: LD_INT 22
61207: PUSH
61208: LD_OWVAR 2
61212: PUSH
61213: EMPTY
61214: LIST
61215: LIST
61216: PUSH
61217: LD_INT 30
61219: PUSH
61220: LD_INT 3
61222: PUSH
61223: EMPTY
61224: LIST
61225: LIST
61226: PUSH
61227: EMPTY
61228: LIST
61229: LIST
61230: PPUSH
61231: CALL_OW 69
61235: ST_TO_ADDR
// if not tmp then
61236: LD_VAR 0 1
61240: NOT
61241: IFFALSE 61245
// exit ;
61243: GO 61271
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
61245: LD_VAR 0 1
61249: PUSH
61250: LD_INT 1
61252: PPUSH
61253: LD_VAR 0 1
61257: PPUSH
61258: CALL_OW 12
61262: ARRAY
61263: PPUSH
61264: LD_INT 1
61266: PPUSH
61267: CALL_OW 234
// end ;
61271: PPOPN 1
61273: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
61274: LD_EXP 39
61278: PUSH
61279: LD_EXP 87
61283: AND
61284: IFFALSE 61396
61286: GO 61288
61288: DISABLE
61289: LD_INT 0
61291: PPUSH
61292: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
61293: LD_ADDR_VAR 0 2
61297: PUSH
61298: LD_INT 22
61300: PUSH
61301: LD_OWVAR 2
61305: PUSH
61306: EMPTY
61307: LIST
61308: LIST
61309: PUSH
61310: LD_INT 2
61312: PUSH
61313: LD_INT 30
61315: PUSH
61316: LD_INT 27
61318: PUSH
61319: EMPTY
61320: LIST
61321: LIST
61322: PUSH
61323: LD_INT 30
61325: PUSH
61326: LD_INT 26
61328: PUSH
61329: EMPTY
61330: LIST
61331: LIST
61332: PUSH
61333: LD_INT 30
61335: PUSH
61336: LD_INT 28
61338: PUSH
61339: EMPTY
61340: LIST
61341: LIST
61342: PUSH
61343: EMPTY
61344: LIST
61345: LIST
61346: LIST
61347: LIST
61348: PUSH
61349: EMPTY
61350: LIST
61351: LIST
61352: PPUSH
61353: CALL_OW 69
61357: ST_TO_ADDR
// if not tmp then
61358: LD_VAR 0 2
61362: NOT
61363: IFFALSE 61367
// exit ;
61365: GO 61396
// for i in tmp do
61367: LD_ADDR_VAR 0 1
61371: PUSH
61372: LD_VAR 0 2
61376: PUSH
61377: FOR_IN
61378: IFFALSE 61394
// SetLives ( i , 1 ) ;
61380: LD_VAR 0 1
61384: PPUSH
61385: LD_INT 1
61387: PPUSH
61388: CALL_OW 234
61392: GO 61377
61394: POP
61395: POP
// end ;
61396: PPOPN 2
61398: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
61399: LD_EXP 39
61403: PUSH
61404: LD_EXP 88
61408: AND
61409: IFFALSE 61696
61411: GO 61413
61413: DISABLE
61414: LD_INT 0
61416: PPUSH
61417: PPUSH
61418: PPUSH
// begin i := rand ( 1 , 7 ) ;
61419: LD_ADDR_VAR 0 1
61423: PUSH
61424: LD_INT 1
61426: PPUSH
61427: LD_INT 7
61429: PPUSH
61430: CALL_OW 12
61434: ST_TO_ADDR
// case i of 1 :
61435: LD_VAR 0 1
61439: PUSH
61440: LD_INT 1
61442: DOUBLE
61443: EQUAL
61444: IFTRUE 61448
61446: GO 61458
61448: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
61449: LD_STRING earthquake(getX(game), 0, 32)
61451: PPUSH
61452: CALL_OW 559
61456: GO 61696
61458: LD_INT 2
61460: DOUBLE
61461: EQUAL
61462: IFTRUE 61466
61464: GO 61480
61466: POP
// begin ToLua ( displayStucuk(); ) ;
61467: LD_STRING displayStucuk();
61469: PPUSH
61470: CALL_OW 559
// ResetFog ;
61474: CALL_OW 335
// end ; 3 :
61478: GO 61696
61480: LD_INT 3
61482: DOUBLE
61483: EQUAL
61484: IFTRUE 61488
61486: GO 61592
61488: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
61489: LD_ADDR_VAR 0 2
61493: PUSH
61494: LD_INT 22
61496: PUSH
61497: LD_OWVAR 2
61501: PUSH
61502: EMPTY
61503: LIST
61504: LIST
61505: PUSH
61506: LD_INT 25
61508: PUSH
61509: LD_INT 1
61511: PUSH
61512: EMPTY
61513: LIST
61514: LIST
61515: PUSH
61516: EMPTY
61517: LIST
61518: LIST
61519: PPUSH
61520: CALL_OW 69
61524: ST_TO_ADDR
// if not tmp then
61525: LD_VAR 0 2
61529: NOT
61530: IFFALSE 61534
// exit ;
61532: GO 61696
// un := tmp [ rand ( 1 , tmp ) ] ;
61534: LD_ADDR_VAR 0 3
61538: PUSH
61539: LD_VAR 0 2
61543: PUSH
61544: LD_INT 1
61546: PPUSH
61547: LD_VAR 0 2
61551: PPUSH
61552: CALL_OW 12
61556: ARRAY
61557: ST_TO_ADDR
// if Crawls ( un ) then
61558: LD_VAR 0 3
61562: PPUSH
61563: CALL_OW 318
61567: IFFALSE 61578
// ComWalk ( un ) ;
61569: LD_VAR 0 3
61573: PPUSH
61574: CALL_OW 138
// SetClass ( un , class_mortar ) ;
61578: LD_VAR 0 3
61582: PPUSH
61583: LD_INT 8
61585: PPUSH
61586: CALL_OW 336
// end ; 4 :
61590: GO 61696
61592: LD_INT 4
61594: DOUBLE
61595: EQUAL
61596: IFTRUE 61600
61598: GO 61674
61600: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
61601: LD_ADDR_VAR 0 2
61605: PUSH
61606: LD_INT 22
61608: PUSH
61609: LD_OWVAR 2
61613: PUSH
61614: EMPTY
61615: LIST
61616: LIST
61617: PUSH
61618: LD_INT 30
61620: PUSH
61621: LD_INT 29
61623: PUSH
61624: EMPTY
61625: LIST
61626: LIST
61627: PUSH
61628: EMPTY
61629: LIST
61630: LIST
61631: PPUSH
61632: CALL_OW 69
61636: ST_TO_ADDR
// if not tmp then
61637: LD_VAR 0 2
61641: NOT
61642: IFFALSE 61646
// exit ;
61644: GO 61696
// CenterNowOnUnits ( tmp [ 1 ] ) ;
61646: LD_VAR 0 2
61650: PUSH
61651: LD_INT 1
61653: ARRAY
61654: PPUSH
61655: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
61659: LD_VAR 0 2
61663: PUSH
61664: LD_INT 1
61666: ARRAY
61667: PPUSH
61668: CALL_OW 65
// end ; 5 .. 7 :
61672: GO 61696
61674: LD_INT 5
61676: DOUBLE
61677: GREATEREQUAL
61678: IFFALSE 61686
61680: LD_INT 7
61682: DOUBLE
61683: LESSEQUAL
61684: IFTRUE 61688
61686: GO 61695
61688: POP
// StreamSibBomb ; end ;
61689: CALL 57933 0 0
61693: GO 61696
61695: POP
// end ;
61696: PPOPN 3
61698: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
61699: LD_EXP 39
61703: PUSH
61704: LD_EXP 89
61708: AND
61709: IFFALSE 61865
61711: GO 61713
61713: DISABLE
61714: LD_INT 0
61716: PPUSH
61717: PPUSH
61718: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
61719: LD_ADDR_VAR 0 2
61723: PUSH
61724: LD_INT 81
61726: PUSH
61727: LD_OWVAR 2
61731: PUSH
61732: EMPTY
61733: LIST
61734: LIST
61735: PUSH
61736: LD_INT 2
61738: PUSH
61739: LD_INT 21
61741: PUSH
61742: LD_INT 1
61744: PUSH
61745: EMPTY
61746: LIST
61747: LIST
61748: PUSH
61749: LD_INT 21
61751: PUSH
61752: LD_INT 2
61754: PUSH
61755: EMPTY
61756: LIST
61757: LIST
61758: PUSH
61759: EMPTY
61760: LIST
61761: LIST
61762: LIST
61763: PUSH
61764: EMPTY
61765: LIST
61766: LIST
61767: PPUSH
61768: CALL_OW 69
61772: ST_TO_ADDR
// if not tmp then
61773: LD_VAR 0 2
61777: NOT
61778: IFFALSE 61782
// exit ;
61780: GO 61865
// p := 0 ;
61782: LD_ADDR_VAR 0 3
61786: PUSH
61787: LD_INT 0
61789: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
61790: LD_INT 35
61792: PPUSH
61793: CALL_OW 67
// p := p + 1 ;
61797: LD_ADDR_VAR 0 3
61801: PUSH
61802: LD_VAR 0 3
61806: PUSH
61807: LD_INT 1
61809: PLUS
61810: ST_TO_ADDR
// for i in tmp do
61811: LD_ADDR_VAR 0 1
61815: PUSH
61816: LD_VAR 0 2
61820: PUSH
61821: FOR_IN
61822: IFFALSE 61853
// if GetLives ( i ) < 1000 then
61824: LD_VAR 0 1
61828: PPUSH
61829: CALL_OW 256
61833: PUSH
61834: LD_INT 1000
61836: LESS
61837: IFFALSE 61851
// SetLives ( i , 1000 ) ;
61839: LD_VAR 0 1
61843: PPUSH
61844: LD_INT 1000
61846: PPUSH
61847: CALL_OW 234
61851: GO 61821
61853: POP
61854: POP
// until p > 20 ;
61855: LD_VAR 0 3
61859: PUSH
61860: LD_INT 20
61862: GREATER
61863: IFFALSE 61790
// end ;
61865: PPOPN 3
61867: END
// every 0 0$1 trigger StreamModeActive and sTime do
61868: LD_EXP 39
61872: PUSH
61873: LD_EXP 90
61877: AND
61878: IFFALSE 61913
61880: GO 61882
61882: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
61883: LD_INT 28
61885: PPUSH
61886: LD_OWVAR 2
61890: PPUSH
61891: LD_INT 2
61893: PPUSH
61894: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
61898: LD_INT 30
61900: PPUSH
61901: LD_OWVAR 2
61905: PPUSH
61906: LD_INT 2
61908: PPUSH
61909: CALL_OW 322
// end ;
61913: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
61914: LD_EXP 39
61918: PUSH
61919: LD_EXP 91
61923: AND
61924: IFFALSE 62045
61926: GO 61928
61928: DISABLE
61929: LD_INT 0
61931: PPUSH
61932: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
61933: LD_ADDR_VAR 0 2
61937: PUSH
61938: LD_INT 22
61940: PUSH
61941: LD_OWVAR 2
61945: PUSH
61946: EMPTY
61947: LIST
61948: LIST
61949: PUSH
61950: LD_INT 21
61952: PUSH
61953: LD_INT 1
61955: PUSH
61956: EMPTY
61957: LIST
61958: LIST
61959: PUSH
61960: LD_INT 3
61962: PUSH
61963: LD_INT 23
61965: PUSH
61966: LD_INT 0
61968: PUSH
61969: EMPTY
61970: LIST
61971: LIST
61972: PUSH
61973: EMPTY
61974: LIST
61975: LIST
61976: PUSH
61977: EMPTY
61978: LIST
61979: LIST
61980: LIST
61981: PPUSH
61982: CALL_OW 69
61986: ST_TO_ADDR
// if not tmp then
61987: LD_VAR 0 2
61991: NOT
61992: IFFALSE 61996
// exit ;
61994: GO 62045
// for i in tmp do
61996: LD_ADDR_VAR 0 1
62000: PUSH
62001: LD_VAR 0 2
62005: PUSH
62006: FOR_IN
62007: IFFALSE 62043
// begin if Crawls ( i ) then
62009: LD_VAR 0 1
62013: PPUSH
62014: CALL_OW 318
62018: IFFALSE 62029
// ComWalk ( i ) ;
62020: LD_VAR 0 1
62024: PPUSH
62025: CALL_OW 138
// SetClass ( i , 2 ) ;
62029: LD_VAR 0 1
62033: PPUSH
62034: LD_INT 2
62036: PPUSH
62037: CALL_OW 336
// end ;
62041: GO 62006
62043: POP
62044: POP
// end ;
62045: PPOPN 2
62047: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
62048: LD_EXP 39
62052: PUSH
62053: LD_EXP 92
62057: AND
62058: IFFALSE 62346
62060: GO 62062
62062: DISABLE
62063: LD_INT 0
62065: PPUSH
62066: PPUSH
62067: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
62068: LD_OWVAR 2
62072: PPUSH
62073: LD_INT 9
62075: PPUSH
62076: LD_INT 1
62078: PPUSH
62079: LD_INT 1
62081: PPUSH
62082: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
62086: LD_INT 9
62088: PPUSH
62089: LD_OWVAR 2
62093: PPUSH
62094: CALL_OW 343
// uc_side := 9 ;
62098: LD_ADDR_OWVAR 20
62102: PUSH
62103: LD_INT 9
62105: ST_TO_ADDR
// uc_nation := 2 ;
62106: LD_ADDR_OWVAR 21
62110: PUSH
62111: LD_INT 2
62113: ST_TO_ADDR
// hc_name := Dark Warrior ;
62114: LD_ADDR_OWVAR 26
62118: PUSH
62119: LD_STRING Dark Warrior
62121: ST_TO_ADDR
// hc_gallery :=  ;
62122: LD_ADDR_OWVAR 33
62126: PUSH
62127: LD_STRING 
62129: ST_TO_ADDR
// hc_noskilllimit := true ;
62130: LD_ADDR_OWVAR 76
62134: PUSH
62135: LD_INT 1
62137: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
62138: LD_ADDR_OWVAR 31
62142: PUSH
62143: LD_INT 30
62145: PUSH
62146: LD_INT 30
62148: PUSH
62149: LD_INT 30
62151: PUSH
62152: LD_INT 30
62154: PUSH
62155: EMPTY
62156: LIST
62157: LIST
62158: LIST
62159: LIST
62160: ST_TO_ADDR
// un := CreateHuman ;
62161: LD_ADDR_VAR 0 3
62165: PUSH
62166: CALL_OW 44
62170: ST_TO_ADDR
// hc_noskilllimit := false ;
62171: LD_ADDR_OWVAR 76
62175: PUSH
62176: LD_INT 0
62178: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
62179: LD_VAR 0 3
62183: PPUSH
62184: LD_INT 1
62186: PPUSH
62187: CALL_OW 51
// ToLua ( playRanger() ) ;
62191: LD_STRING playRanger()
62193: PPUSH
62194: CALL_OW 559
// p := 0 ;
62198: LD_ADDR_VAR 0 2
62202: PUSH
62203: LD_INT 0
62205: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
62206: LD_INT 35
62208: PPUSH
62209: CALL_OW 67
// p := p + 1 ;
62213: LD_ADDR_VAR 0 2
62217: PUSH
62218: LD_VAR 0 2
62222: PUSH
62223: LD_INT 1
62225: PLUS
62226: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
62227: LD_VAR 0 3
62231: PPUSH
62232: CALL_OW 256
62236: PUSH
62237: LD_INT 1000
62239: LESS
62240: IFFALSE 62254
// SetLives ( un , 1000 ) ;
62242: LD_VAR 0 3
62246: PPUSH
62247: LD_INT 1000
62249: PPUSH
62250: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
62254: LD_VAR 0 3
62258: PPUSH
62259: LD_INT 81
62261: PUSH
62262: LD_OWVAR 2
62266: PUSH
62267: EMPTY
62268: LIST
62269: LIST
62270: PUSH
62271: LD_INT 91
62273: PUSH
62274: LD_VAR 0 3
62278: PUSH
62279: LD_INT 30
62281: PUSH
62282: EMPTY
62283: LIST
62284: LIST
62285: LIST
62286: PUSH
62287: EMPTY
62288: LIST
62289: LIST
62290: PPUSH
62291: CALL_OW 69
62295: PPUSH
62296: LD_VAR 0 3
62300: PPUSH
62301: CALL_OW 74
62305: PPUSH
62306: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
62310: LD_VAR 0 2
62314: PUSH
62315: LD_INT 80
62317: GREATER
62318: PUSH
62319: LD_VAR 0 3
62323: PPUSH
62324: CALL_OW 301
62328: OR
62329: IFFALSE 62206
// if un then
62331: LD_VAR 0 3
62335: IFFALSE 62346
// RemoveUnit ( un ) ;
62337: LD_VAR 0 3
62341: PPUSH
62342: CALL_OW 64
// end ;
62346: PPOPN 3
62348: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
62349: LD_EXP 93
62353: IFFALSE 62469
62355: GO 62357
62357: DISABLE
62358: LD_INT 0
62360: PPUSH
62361: PPUSH
62362: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
62363: LD_ADDR_VAR 0 2
62367: PUSH
62368: LD_INT 81
62370: PUSH
62371: LD_OWVAR 2
62375: PUSH
62376: EMPTY
62377: LIST
62378: LIST
62379: PUSH
62380: LD_INT 21
62382: PUSH
62383: LD_INT 1
62385: PUSH
62386: EMPTY
62387: LIST
62388: LIST
62389: PUSH
62390: EMPTY
62391: LIST
62392: LIST
62393: PPUSH
62394: CALL_OW 69
62398: ST_TO_ADDR
// ToLua ( playComputer() ) ;
62399: LD_STRING playComputer()
62401: PPUSH
62402: CALL_OW 559
// if not tmp then
62406: LD_VAR 0 2
62410: NOT
62411: IFFALSE 62415
// exit ;
62413: GO 62469
// for i in tmp do
62415: LD_ADDR_VAR 0 1
62419: PUSH
62420: LD_VAR 0 2
62424: PUSH
62425: FOR_IN
62426: IFFALSE 62467
// for j := 1 to 4 do
62428: LD_ADDR_VAR 0 3
62432: PUSH
62433: DOUBLE
62434: LD_INT 1
62436: DEC
62437: ST_TO_ADDR
62438: LD_INT 4
62440: PUSH
62441: FOR_TO
62442: IFFALSE 62463
// SetSkill ( i , j , 10 ) ;
62444: LD_VAR 0 1
62448: PPUSH
62449: LD_VAR 0 3
62453: PPUSH
62454: LD_INT 10
62456: PPUSH
62457: CALL_OW 237
62461: GO 62441
62463: POP
62464: POP
62465: GO 62425
62467: POP
62468: POP
// end ;
62469: PPOPN 3
62471: END
// every 0 0$1 trigger s30 do var i , tmp ;
62472: LD_EXP 94
62476: IFFALSE 62545
62478: GO 62480
62480: DISABLE
62481: LD_INT 0
62483: PPUSH
62484: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
62485: LD_ADDR_VAR 0 2
62489: PUSH
62490: LD_INT 22
62492: PUSH
62493: LD_OWVAR 2
62497: PUSH
62498: EMPTY
62499: LIST
62500: LIST
62501: PPUSH
62502: CALL_OW 69
62506: ST_TO_ADDR
// if not tmp then
62507: LD_VAR 0 2
62511: NOT
62512: IFFALSE 62516
// exit ;
62514: GO 62545
// for i in tmp do
62516: LD_ADDR_VAR 0 1
62520: PUSH
62521: LD_VAR 0 2
62525: PUSH
62526: FOR_IN
62527: IFFALSE 62543
// SetLives ( i , 300 ) ;
62529: LD_VAR 0 1
62533: PPUSH
62534: LD_INT 300
62536: PPUSH
62537: CALL_OW 234
62541: GO 62526
62543: POP
62544: POP
// end ;
62545: PPOPN 2
62547: END
// every 0 0$1 trigger s60 do var i , tmp ;
62548: LD_EXP 95
62552: IFFALSE 62621
62554: GO 62556
62556: DISABLE
62557: LD_INT 0
62559: PPUSH
62560: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
62561: LD_ADDR_VAR 0 2
62565: PUSH
62566: LD_INT 22
62568: PUSH
62569: LD_OWVAR 2
62573: PUSH
62574: EMPTY
62575: LIST
62576: LIST
62577: PPUSH
62578: CALL_OW 69
62582: ST_TO_ADDR
// if not tmp then
62583: LD_VAR 0 2
62587: NOT
62588: IFFALSE 62592
// exit ;
62590: GO 62621
// for i in tmp do
62592: LD_ADDR_VAR 0 1
62596: PUSH
62597: LD_VAR 0 2
62601: PUSH
62602: FOR_IN
62603: IFFALSE 62619
// SetLives ( i , 600 ) ;
62605: LD_VAR 0 1
62609: PPUSH
62610: LD_INT 600
62612: PPUSH
62613: CALL_OW 234
62617: GO 62602
62619: POP
62620: POP
// end ;
62621: PPOPN 2
62623: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
62624: LD_INT 0
62626: PPUSH
// case cmd of 301 :
62627: LD_VAR 0 1
62631: PUSH
62632: LD_INT 301
62634: DOUBLE
62635: EQUAL
62636: IFTRUE 62640
62638: GO 62672
62640: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
62641: LD_VAR 0 6
62645: PPUSH
62646: LD_VAR 0 7
62650: PPUSH
62651: LD_VAR 0 8
62655: PPUSH
62656: LD_VAR 0 4
62660: PPUSH
62661: LD_VAR 0 5
62665: PPUSH
62666: CALL 63881 0 5
62670: GO 62793
62672: LD_INT 302
62674: DOUBLE
62675: EQUAL
62676: IFTRUE 62680
62678: GO 62717
62680: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
62681: LD_VAR 0 6
62685: PPUSH
62686: LD_VAR 0 7
62690: PPUSH
62691: LD_VAR 0 8
62695: PPUSH
62696: LD_VAR 0 9
62700: PPUSH
62701: LD_VAR 0 4
62705: PPUSH
62706: LD_VAR 0 5
62710: PPUSH
62711: CALL 63972 0 6
62715: GO 62793
62717: LD_INT 303
62719: DOUBLE
62720: EQUAL
62721: IFTRUE 62725
62723: GO 62762
62725: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
62726: LD_VAR 0 6
62730: PPUSH
62731: LD_VAR 0 7
62735: PPUSH
62736: LD_VAR 0 8
62740: PPUSH
62741: LD_VAR 0 9
62745: PPUSH
62746: LD_VAR 0 4
62750: PPUSH
62751: LD_VAR 0 5
62755: PPUSH
62756: CALL 62798 0 6
62760: GO 62793
62762: LD_INT 304
62764: DOUBLE
62765: EQUAL
62766: IFTRUE 62770
62768: GO 62792
62770: POP
// hHackTeleport ( unit , x , y ) ; end ;
62771: LD_VAR 0 2
62775: PPUSH
62776: LD_VAR 0 4
62780: PPUSH
62781: LD_VAR 0 5
62785: PPUSH
62786: CALL 64565 0 3
62790: GO 62793
62792: POP
// end ;
62793: LD_VAR 0 12
62797: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
62798: LD_INT 0
62800: PPUSH
62801: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
62802: LD_VAR 0 1
62806: PUSH
62807: LD_INT 1
62809: LESS
62810: PUSH
62811: LD_VAR 0 1
62815: PUSH
62816: LD_INT 3
62818: GREATER
62819: OR
62820: PUSH
62821: LD_VAR 0 5
62825: PPUSH
62826: LD_VAR 0 6
62830: PPUSH
62831: CALL_OW 428
62835: OR
62836: IFFALSE 62840
// exit ;
62838: GO 63568
// uc_side := your_side ;
62840: LD_ADDR_OWVAR 20
62844: PUSH
62845: LD_OWVAR 2
62849: ST_TO_ADDR
// uc_nation := nation ;
62850: LD_ADDR_OWVAR 21
62854: PUSH
62855: LD_VAR 0 1
62859: ST_TO_ADDR
// bc_level = 1 ;
62860: LD_ADDR_OWVAR 43
62864: PUSH
62865: LD_INT 1
62867: ST_TO_ADDR
// case btype of 1 :
62868: LD_VAR 0 2
62872: PUSH
62873: LD_INT 1
62875: DOUBLE
62876: EQUAL
62877: IFTRUE 62881
62879: GO 62892
62881: POP
// bc_type := b_depot ; 2 :
62882: LD_ADDR_OWVAR 42
62886: PUSH
62887: LD_INT 0
62889: ST_TO_ADDR
62890: GO 63512
62892: LD_INT 2
62894: DOUBLE
62895: EQUAL
62896: IFTRUE 62900
62898: GO 62911
62900: POP
// bc_type := b_warehouse ; 3 :
62901: LD_ADDR_OWVAR 42
62905: PUSH
62906: LD_INT 1
62908: ST_TO_ADDR
62909: GO 63512
62911: LD_INT 3
62913: DOUBLE
62914: EQUAL
62915: IFTRUE 62919
62917: GO 62930
62919: POP
// bc_type := b_lab ; 4 .. 9 :
62920: LD_ADDR_OWVAR 42
62924: PUSH
62925: LD_INT 6
62927: ST_TO_ADDR
62928: GO 63512
62930: LD_INT 4
62932: DOUBLE
62933: GREATEREQUAL
62934: IFFALSE 62942
62936: LD_INT 9
62938: DOUBLE
62939: LESSEQUAL
62940: IFTRUE 62944
62942: GO 63004
62944: POP
// begin bc_type := b_lab_half ;
62945: LD_ADDR_OWVAR 42
62949: PUSH
62950: LD_INT 7
62952: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
62953: LD_ADDR_OWVAR 44
62957: PUSH
62958: LD_INT 10
62960: PUSH
62961: LD_INT 11
62963: PUSH
62964: LD_INT 12
62966: PUSH
62967: LD_INT 15
62969: PUSH
62970: LD_INT 14
62972: PUSH
62973: LD_INT 13
62975: PUSH
62976: EMPTY
62977: LIST
62978: LIST
62979: LIST
62980: LIST
62981: LIST
62982: LIST
62983: PUSH
62984: LD_VAR 0 2
62988: PUSH
62989: LD_INT 3
62991: MINUS
62992: ARRAY
62993: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
62994: LD_ADDR_OWVAR 45
62998: PUSH
62999: LD_INT 9
63001: ST_TO_ADDR
// end ; 10 .. 13 :
63002: GO 63512
63004: LD_INT 10
63006: DOUBLE
63007: GREATEREQUAL
63008: IFFALSE 63016
63010: LD_INT 13
63012: DOUBLE
63013: LESSEQUAL
63014: IFTRUE 63018
63016: GO 63095
63018: POP
// begin bc_type := b_lab_full ;
63019: LD_ADDR_OWVAR 42
63023: PUSH
63024: LD_INT 8
63026: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
63027: LD_ADDR_OWVAR 44
63031: PUSH
63032: LD_INT 10
63034: PUSH
63035: LD_INT 12
63037: PUSH
63038: LD_INT 14
63040: PUSH
63041: LD_INT 13
63043: PUSH
63044: EMPTY
63045: LIST
63046: LIST
63047: LIST
63048: LIST
63049: PUSH
63050: LD_VAR 0 2
63054: PUSH
63055: LD_INT 9
63057: MINUS
63058: ARRAY
63059: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
63060: LD_ADDR_OWVAR 45
63064: PUSH
63065: LD_INT 11
63067: PUSH
63068: LD_INT 15
63070: PUSH
63071: LD_INT 12
63073: PUSH
63074: LD_INT 15
63076: PUSH
63077: EMPTY
63078: LIST
63079: LIST
63080: LIST
63081: LIST
63082: PUSH
63083: LD_VAR 0 2
63087: PUSH
63088: LD_INT 9
63090: MINUS
63091: ARRAY
63092: ST_TO_ADDR
// end ; 14 :
63093: GO 63512
63095: LD_INT 14
63097: DOUBLE
63098: EQUAL
63099: IFTRUE 63103
63101: GO 63114
63103: POP
// bc_type := b_workshop ; 15 :
63104: LD_ADDR_OWVAR 42
63108: PUSH
63109: LD_INT 2
63111: ST_TO_ADDR
63112: GO 63512
63114: LD_INT 15
63116: DOUBLE
63117: EQUAL
63118: IFTRUE 63122
63120: GO 63133
63122: POP
// bc_type := b_factory ; 16 :
63123: LD_ADDR_OWVAR 42
63127: PUSH
63128: LD_INT 3
63130: ST_TO_ADDR
63131: GO 63512
63133: LD_INT 16
63135: DOUBLE
63136: EQUAL
63137: IFTRUE 63141
63139: GO 63152
63141: POP
// bc_type := b_ext_gun ; 17 :
63142: LD_ADDR_OWVAR 42
63146: PUSH
63147: LD_INT 17
63149: ST_TO_ADDR
63150: GO 63512
63152: LD_INT 17
63154: DOUBLE
63155: EQUAL
63156: IFTRUE 63160
63158: GO 63188
63160: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
63161: LD_ADDR_OWVAR 42
63165: PUSH
63166: LD_INT 19
63168: PUSH
63169: LD_INT 23
63171: PUSH
63172: LD_INT 19
63174: PUSH
63175: EMPTY
63176: LIST
63177: LIST
63178: LIST
63179: PUSH
63180: LD_VAR 0 1
63184: ARRAY
63185: ST_TO_ADDR
63186: GO 63512
63188: LD_INT 18
63190: DOUBLE
63191: EQUAL
63192: IFTRUE 63196
63194: GO 63207
63196: POP
// bc_type := b_ext_radar ; 19 :
63197: LD_ADDR_OWVAR 42
63201: PUSH
63202: LD_INT 20
63204: ST_TO_ADDR
63205: GO 63512
63207: LD_INT 19
63209: DOUBLE
63210: EQUAL
63211: IFTRUE 63215
63213: GO 63226
63215: POP
// bc_type := b_ext_radio ; 20 :
63216: LD_ADDR_OWVAR 42
63220: PUSH
63221: LD_INT 22
63223: ST_TO_ADDR
63224: GO 63512
63226: LD_INT 20
63228: DOUBLE
63229: EQUAL
63230: IFTRUE 63234
63232: GO 63245
63234: POP
// bc_type := b_ext_siberium ; 21 :
63235: LD_ADDR_OWVAR 42
63239: PUSH
63240: LD_INT 21
63242: ST_TO_ADDR
63243: GO 63512
63245: LD_INT 21
63247: DOUBLE
63248: EQUAL
63249: IFTRUE 63253
63251: GO 63264
63253: POP
// bc_type := b_ext_computer ; 22 :
63254: LD_ADDR_OWVAR 42
63258: PUSH
63259: LD_INT 24
63261: ST_TO_ADDR
63262: GO 63512
63264: LD_INT 22
63266: DOUBLE
63267: EQUAL
63268: IFTRUE 63272
63270: GO 63283
63272: POP
// bc_type := b_ext_track ; 23 :
63273: LD_ADDR_OWVAR 42
63277: PUSH
63278: LD_INT 16
63280: ST_TO_ADDR
63281: GO 63512
63283: LD_INT 23
63285: DOUBLE
63286: EQUAL
63287: IFTRUE 63291
63289: GO 63302
63291: POP
// bc_type := b_ext_laser ; 24 :
63292: LD_ADDR_OWVAR 42
63296: PUSH
63297: LD_INT 25
63299: ST_TO_ADDR
63300: GO 63512
63302: LD_INT 24
63304: DOUBLE
63305: EQUAL
63306: IFTRUE 63310
63308: GO 63321
63310: POP
// bc_type := b_control_tower ; 25 :
63311: LD_ADDR_OWVAR 42
63315: PUSH
63316: LD_INT 36
63318: ST_TO_ADDR
63319: GO 63512
63321: LD_INT 25
63323: DOUBLE
63324: EQUAL
63325: IFTRUE 63329
63327: GO 63340
63329: POP
// bc_type := b_breastwork ; 26 :
63330: LD_ADDR_OWVAR 42
63334: PUSH
63335: LD_INT 31
63337: ST_TO_ADDR
63338: GO 63512
63340: LD_INT 26
63342: DOUBLE
63343: EQUAL
63344: IFTRUE 63348
63346: GO 63359
63348: POP
// bc_type := b_bunker ; 27 :
63349: LD_ADDR_OWVAR 42
63353: PUSH
63354: LD_INT 32
63356: ST_TO_ADDR
63357: GO 63512
63359: LD_INT 27
63361: DOUBLE
63362: EQUAL
63363: IFTRUE 63367
63365: GO 63378
63367: POP
// bc_type := b_turret ; 28 :
63368: LD_ADDR_OWVAR 42
63372: PUSH
63373: LD_INT 33
63375: ST_TO_ADDR
63376: GO 63512
63378: LD_INT 28
63380: DOUBLE
63381: EQUAL
63382: IFTRUE 63386
63384: GO 63397
63386: POP
// bc_type := b_armoury ; 29 :
63387: LD_ADDR_OWVAR 42
63391: PUSH
63392: LD_INT 4
63394: ST_TO_ADDR
63395: GO 63512
63397: LD_INT 29
63399: DOUBLE
63400: EQUAL
63401: IFTRUE 63405
63403: GO 63416
63405: POP
// bc_type := b_barracks ; 30 :
63406: LD_ADDR_OWVAR 42
63410: PUSH
63411: LD_INT 5
63413: ST_TO_ADDR
63414: GO 63512
63416: LD_INT 30
63418: DOUBLE
63419: EQUAL
63420: IFTRUE 63424
63422: GO 63435
63424: POP
// bc_type := b_solar_power ; 31 :
63425: LD_ADDR_OWVAR 42
63429: PUSH
63430: LD_INT 27
63432: ST_TO_ADDR
63433: GO 63512
63435: LD_INT 31
63437: DOUBLE
63438: EQUAL
63439: IFTRUE 63443
63441: GO 63454
63443: POP
// bc_type := b_oil_power ; 32 :
63444: LD_ADDR_OWVAR 42
63448: PUSH
63449: LD_INT 26
63451: ST_TO_ADDR
63452: GO 63512
63454: LD_INT 32
63456: DOUBLE
63457: EQUAL
63458: IFTRUE 63462
63460: GO 63473
63462: POP
// bc_type := b_siberite_power ; 33 :
63463: LD_ADDR_OWVAR 42
63467: PUSH
63468: LD_INT 28
63470: ST_TO_ADDR
63471: GO 63512
63473: LD_INT 33
63475: DOUBLE
63476: EQUAL
63477: IFTRUE 63481
63479: GO 63492
63481: POP
// bc_type := b_oil_mine ; 34 :
63482: LD_ADDR_OWVAR 42
63486: PUSH
63487: LD_INT 29
63489: ST_TO_ADDR
63490: GO 63512
63492: LD_INT 34
63494: DOUBLE
63495: EQUAL
63496: IFTRUE 63500
63498: GO 63511
63500: POP
// bc_type := b_siberite_mine ; end ;
63501: LD_ADDR_OWVAR 42
63505: PUSH
63506: LD_INT 30
63508: ST_TO_ADDR
63509: GO 63512
63511: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
63512: LD_ADDR_VAR 0 8
63516: PUSH
63517: LD_VAR 0 5
63521: PPUSH
63522: LD_VAR 0 6
63526: PPUSH
63527: LD_VAR 0 3
63531: PPUSH
63532: CALL_OW 47
63536: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
63537: LD_OWVAR 42
63541: PUSH
63542: LD_INT 32
63544: PUSH
63545: LD_INT 33
63547: PUSH
63548: EMPTY
63549: LIST
63550: LIST
63551: IN
63552: IFFALSE 63568
// PlaceWeaponTurret ( b , weapon ) ;
63554: LD_VAR 0 8
63558: PPUSH
63559: LD_VAR 0 4
63563: PPUSH
63564: CALL_OW 431
// end ;
63568: LD_VAR 0 7
63572: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
63573: LD_INT 0
63575: PPUSH
63576: PPUSH
63577: PPUSH
63578: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
63579: LD_ADDR_VAR 0 4
63583: PUSH
63584: LD_INT 22
63586: PUSH
63587: LD_OWVAR 2
63591: PUSH
63592: EMPTY
63593: LIST
63594: LIST
63595: PUSH
63596: LD_INT 2
63598: PUSH
63599: LD_INT 30
63601: PUSH
63602: LD_INT 0
63604: PUSH
63605: EMPTY
63606: LIST
63607: LIST
63608: PUSH
63609: LD_INT 30
63611: PUSH
63612: LD_INT 1
63614: PUSH
63615: EMPTY
63616: LIST
63617: LIST
63618: PUSH
63619: EMPTY
63620: LIST
63621: LIST
63622: LIST
63623: PUSH
63624: EMPTY
63625: LIST
63626: LIST
63627: PPUSH
63628: CALL_OW 69
63632: ST_TO_ADDR
// if not tmp then
63633: LD_VAR 0 4
63637: NOT
63638: IFFALSE 63642
// exit ;
63640: GO 63701
// for i in tmp do
63642: LD_ADDR_VAR 0 2
63646: PUSH
63647: LD_VAR 0 4
63651: PUSH
63652: FOR_IN
63653: IFFALSE 63699
// for j = 1 to 3 do
63655: LD_ADDR_VAR 0 3
63659: PUSH
63660: DOUBLE
63661: LD_INT 1
63663: DEC
63664: ST_TO_ADDR
63665: LD_INT 3
63667: PUSH
63668: FOR_TO
63669: IFFALSE 63695
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
63671: LD_VAR 0 2
63675: PPUSH
63676: CALL_OW 274
63680: PPUSH
63681: LD_VAR 0 3
63685: PPUSH
63686: LD_INT 99999
63688: PPUSH
63689: CALL_OW 277
63693: GO 63668
63695: POP
63696: POP
63697: GO 63652
63699: POP
63700: POP
// end ;
63701: LD_VAR 0 1
63705: RET
// export function hHackSetLevel10 ; var i , j ; begin
63706: LD_INT 0
63708: PPUSH
63709: PPUSH
63710: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
63711: LD_ADDR_VAR 0 2
63715: PUSH
63716: LD_INT 21
63718: PUSH
63719: LD_INT 1
63721: PUSH
63722: EMPTY
63723: LIST
63724: LIST
63725: PPUSH
63726: CALL_OW 69
63730: PUSH
63731: FOR_IN
63732: IFFALSE 63784
// if IsSelected ( i ) then
63734: LD_VAR 0 2
63738: PPUSH
63739: CALL_OW 306
63743: IFFALSE 63782
// begin for j := 1 to 4 do
63745: LD_ADDR_VAR 0 3
63749: PUSH
63750: DOUBLE
63751: LD_INT 1
63753: DEC
63754: ST_TO_ADDR
63755: LD_INT 4
63757: PUSH
63758: FOR_TO
63759: IFFALSE 63780
// SetSkill ( i , j , 10 ) ;
63761: LD_VAR 0 2
63765: PPUSH
63766: LD_VAR 0 3
63770: PPUSH
63771: LD_INT 10
63773: PPUSH
63774: CALL_OW 237
63778: GO 63758
63780: POP
63781: POP
// end ;
63782: GO 63731
63784: POP
63785: POP
// end ;
63786: LD_VAR 0 1
63790: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
63791: LD_INT 0
63793: PPUSH
63794: PPUSH
63795: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
63796: LD_ADDR_VAR 0 2
63800: PUSH
63801: LD_INT 22
63803: PUSH
63804: LD_OWVAR 2
63808: PUSH
63809: EMPTY
63810: LIST
63811: LIST
63812: PUSH
63813: LD_INT 21
63815: PUSH
63816: LD_INT 1
63818: PUSH
63819: EMPTY
63820: LIST
63821: LIST
63822: PUSH
63823: EMPTY
63824: LIST
63825: LIST
63826: PPUSH
63827: CALL_OW 69
63831: PUSH
63832: FOR_IN
63833: IFFALSE 63874
// begin for j := 1 to 4 do
63835: LD_ADDR_VAR 0 3
63839: PUSH
63840: DOUBLE
63841: LD_INT 1
63843: DEC
63844: ST_TO_ADDR
63845: LD_INT 4
63847: PUSH
63848: FOR_TO
63849: IFFALSE 63870
// SetSkill ( i , j , 10 ) ;
63851: LD_VAR 0 2
63855: PPUSH
63856: LD_VAR 0 3
63860: PPUSH
63861: LD_INT 10
63863: PPUSH
63864: CALL_OW 237
63868: GO 63848
63870: POP
63871: POP
// end ;
63872: GO 63832
63874: POP
63875: POP
// end ;
63876: LD_VAR 0 1
63880: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
63881: LD_INT 0
63883: PPUSH
// uc_side := your_side ;
63884: LD_ADDR_OWVAR 20
63888: PUSH
63889: LD_OWVAR 2
63893: ST_TO_ADDR
// uc_nation := nation ;
63894: LD_ADDR_OWVAR 21
63898: PUSH
63899: LD_VAR 0 1
63903: ST_TO_ADDR
// InitHc ;
63904: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
63908: LD_INT 0
63910: PPUSH
63911: LD_VAR 0 2
63915: PPUSH
63916: LD_VAR 0 3
63920: PPUSH
63921: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
63925: LD_VAR 0 4
63929: PPUSH
63930: LD_VAR 0 5
63934: PPUSH
63935: CALL_OW 428
63939: PUSH
63940: LD_INT 0
63942: EQUAL
63943: IFFALSE 63967
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
63945: CALL_OW 44
63949: PPUSH
63950: LD_VAR 0 4
63954: PPUSH
63955: LD_VAR 0 5
63959: PPUSH
63960: LD_INT 1
63962: PPUSH
63963: CALL_OW 48
// end ;
63967: LD_VAR 0 6
63971: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
63972: LD_INT 0
63974: PPUSH
63975: PPUSH
// uc_side := your_side ;
63976: LD_ADDR_OWVAR 20
63980: PUSH
63981: LD_OWVAR 2
63985: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
63986: LD_VAR 0 1
63990: PUSH
63991: LD_INT 1
63993: PUSH
63994: LD_INT 2
63996: PUSH
63997: LD_INT 3
63999: PUSH
64000: LD_INT 4
64002: PUSH
64003: LD_INT 5
64005: PUSH
64006: EMPTY
64007: LIST
64008: LIST
64009: LIST
64010: LIST
64011: LIST
64012: IN
64013: IFFALSE 64025
// uc_nation := nation_american else
64015: LD_ADDR_OWVAR 21
64019: PUSH
64020: LD_INT 1
64022: ST_TO_ADDR
64023: GO 64068
// if chassis in [ 11 , 12 , 13 , 14 ] then
64025: LD_VAR 0 1
64029: PUSH
64030: LD_INT 11
64032: PUSH
64033: LD_INT 12
64035: PUSH
64036: LD_INT 13
64038: PUSH
64039: LD_INT 14
64041: PUSH
64042: EMPTY
64043: LIST
64044: LIST
64045: LIST
64046: LIST
64047: IN
64048: IFFALSE 64060
// uc_nation := nation_arabian else
64050: LD_ADDR_OWVAR 21
64054: PUSH
64055: LD_INT 2
64057: ST_TO_ADDR
64058: GO 64068
// uc_nation := nation_russian ;
64060: LD_ADDR_OWVAR 21
64064: PUSH
64065: LD_INT 3
64067: ST_TO_ADDR
// vc_chassis := chassis ;
64068: LD_ADDR_OWVAR 37
64072: PUSH
64073: LD_VAR 0 1
64077: ST_TO_ADDR
// vc_engine := engine ;
64078: LD_ADDR_OWVAR 39
64082: PUSH
64083: LD_VAR 0 2
64087: ST_TO_ADDR
// vc_control := control ;
64088: LD_ADDR_OWVAR 38
64092: PUSH
64093: LD_VAR 0 3
64097: ST_TO_ADDR
// vc_weapon := weapon ;
64098: LD_ADDR_OWVAR 40
64102: PUSH
64103: LD_VAR 0 4
64107: ST_TO_ADDR
// un := CreateVehicle ;
64108: LD_ADDR_VAR 0 8
64112: PUSH
64113: CALL_OW 45
64117: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
64118: LD_VAR 0 8
64122: PPUSH
64123: LD_INT 0
64125: PPUSH
64126: LD_INT 5
64128: PPUSH
64129: CALL_OW 12
64133: PPUSH
64134: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
64138: LD_VAR 0 8
64142: PPUSH
64143: LD_VAR 0 5
64147: PPUSH
64148: LD_VAR 0 6
64152: PPUSH
64153: LD_INT 1
64155: PPUSH
64156: CALL_OW 48
// end ;
64160: LD_VAR 0 7
64164: RET
// export hInvincible ; every 1 do
64165: GO 64167
64167: DISABLE
// hInvincible := [ ] ;
64168: LD_ADDR_EXP 96
64172: PUSH
64173: EMPTY
64174: ST_TO_ADDR
64175: END
// every 10 do var i ;
64176: GO 64178
64178: DISABLE
64179: LD_INT 0
64181: PPUSH
// begin enable ;
64182: ENABLE
// if not hInvincible then
64183: LD_EXP 96
64187: NOT
64188: IFFALSE 64192
// exit ;
64190: GO 64236
// for i in hInvincible do
64192: LD_ADDR_VAR 0 1
64196: PUSH
64197: LD_EXP 96
64201: PUSH
64202: FOR_IN
64203: IFFALSE 64234
// if GetLives ( i ) < 1000 then
64205: LD_VAR 0 1
64209: PPUSH
64210: CALL_OW 256
64214: PUSH
64215: LD_INT 1000
64217: LESS
64218: IFFALSE 64232
// SetLives ( i , 1000 ) ;
64220: LD_VAR 0 1
64224: PPUSH
64225: LD_INT 1000
64227: PPUSH
64228: CALL_OW 234
64232: GO 64202
64234: POP
64235: POP
// end ;
64236: PPOPN 1
64238: END
// export function hHackInvincible ; var i ; begin
64239: LD_INT 0
64241: PPUSH
64242: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
64243: LD_ADDR_VAR 0 2
64247: PUSH
64248: LD_INT 2
64250: PUSH
64251: LD_INT 21
64253: PUSH
64254: LD_INT 1
64256: PUSH
64257: EMPTY
64258: LIST
64259: LIST
64260: PUSH
64261: LD_INT 21
64263: PUSH
64264: LD_INT 2
64266: PUSH
64267: EMPTY
64268: LIST
64269: LIST
64270: PUSH
64271: EMPTY
64272: LIST
64273: LIST
64274: LIST
64275: PPUSH
64276: CALL_OW 69
64280: PUSH
64281: FOR_IN
64282: IFFALSE 64343
// if IsSelected ( i ) then
64284: LD_VAR 0 2
64288: PPUSH
64289: CALL_OW 306
64293: IFFALSE 64341
// begin if i in hInvincible then
64295: LD_VAR 0 2
64299: PUSH
64300: LD_EXP 96
64304: IN
64305: IFFALSE 64325
// hInvincible := hInvincible diff i else
64307: LD_ADDR_EXP 96
64311: PUSH
64312: LD_EXP 96
64316: PUSH
64317: LD_VAR 0 2
64321: DIFF
64322: ST_TO_ADDR
64323: GO 64341
// hInvincible := hInvincible union i ;
64325: LD_ADDR_EXP 96
64329: PUSH
64330: LD_EXP 96
64334: PUSH
64335: LD_VAR 0 2
64339: UNION
64340: ST_TO_ADDR
// end ;
64341: GO 64281
64343: POP
64344: POP
// end ;
64345: LD_VAR 0 1
64349: RET
// export function hHackInvisible ; var i , j ; begin
64350: LD_INT 0
64352: PPUSH
64353: PPUSH
64354: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
64355: LD_ADDR_VAR 0 2
64359: PUSH
64360: LD_INT 21
64362: PUSH
64363: LD_INT 1
64365: PUSH
64366: EMPTY
64367: LIST
64368: LIST
64369: PPUSH
64370: CALL_OW 69
64374: PUSH
64375: FOR_IN
64376: IFFALSE 64400
// if IsSelected ( i ) then
64378: LD_VAR 0 2
64382: PPUSH
64383: CALL_OW 306
64387: IFFALSE 64398
// ComForceInvisible ( i ) ;
64389: LD_VAR 0 2
64393: PPUSH
64394: CALL_OW 496
64398: GO 64375
64400: POP
64401: POP
// end ;
64402: LD_VAR 0 1
64406: RET
// export function hHackChangeYourSide ; begin
64407: LD_INT 0
64409: PPUSH
// if your_side = 8 then
64410: LD_OWVAR 2
64414: PUSH
64415: LD_INT 8
64417: EQUAL
64418: IFFALSE 64430
// your_side := 0 else
64420: LD_ADDR_OWVAR 2
64424: PUSH
64425: LD_INT 0
64427: ST_TO_ADDR
64428: GO 64444
// your_side := your_side + 1 ;
64430: LD_ADDR_OWVAR 2
64434: PUSH
64435: LD_OWVAR 2
64439: PUSH
64440: LD_INT 1
64442: PLUS
64443: ST_TO_ADDR
// end ;
64444: LD_VAR 0 1
64448: RET
// export function hHackChangeUnitSide ; var i , j ; begin
64449: LD_INT 0
64451: PPUSH
64452: PPUSH
64453: PPUSH
// for i in all_units do
64454: LD_ADDR_VAR 0 2
64458: PUSH
64459: LD_OWVAR 3
64463: PUSH
64464: FOR_IN
64465: IFFALSE 64543
// if IsSelected ( i ) then
64467: LD_VAR 0 2
64471: PPUSH
64472: CALL_OW 306
64476: IFFALSE 64541
// begin j := GetSide ( i ) ;
64478: LD_ADDR_VAR 0 3
64482: PUSH
64483: LD_VAR 0 2
64487: PPUSH
64488: CALL_OW 255
64492: ST_TO_ADDR
// if j = 8 then
64493: LD_VAR 0 3
64497: PUSH
64498: LD_INT 8
64500: EQUAL
64501: IFFALSE 64513
// j := 0 else
64503: LD_ADDR_VAR 0 3
64507: PUSH
64508: LD_INT 0
64510: ST_TO_ADDR
64511: GO 64527
// j := j + 1 ;
64513: LD_ADDR_VAR 0 3
64517: PUSH
64518: LD_VAR 0 3
64522: PUSH
64523: LD_INT 1
64525: PLUS
64526: ST_TO_ADDR
// SetSide ( i , j ) ;
64527: LD_VAR 0 2
64531: PPUSH
64532: LD_VAR 0 3
64536: PPUSH
64537: CALL_OW 235
// end ;
64541: GO 64464
64543: POP
64544: POP
// end ;
64545: LD_VAR 0 1
64549: RET
// export function hHackFog ; begin
64550: LD_INT 0
64552: PPUSH
// FogOff ( true ) ;
64553: LD_INT 1
64555: PPUSH
64556: CALL_OW 344
// end ;
64560: LD_VAR 0 1
64564: RET
// export function hHackTeleport ( unit , x , y ) ; begin
64565: LD_INT 0
64567: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
64568: LD_VAR 0 1
64572: PPUSH
64573: LD_VAR 0 2
64577: PPUSH
64578: LD_VAR 0 3
64582: PPUSH
64583: LD_INT 1
64585: PPUSH
64586: LD_INT 1
64588: PPUSH
64589: CALL_OW 483
// CenterOnXY ( x , y ) ;
64593: LD_VAR 0 2
64597: PPUSH
64598: LD_VAR 0 3
64602: PPUSH
64603: CALL_OW 84
// end ;
64607: LD_VAR 0 4
64611: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
64612: LD_INT 0
64614: PPUSH
64615: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
64616: LD_VAR 0 1
64620: NOT
64621: PUSH
64622: LD_VAR 0 2
64626: PPUSH
64627: LD_VAR 0 3
64631: PPUSH
64632: CALL_OW 488
64636: NOT
64637: OR
64638: PUSH
64639: LD_VAR 0 1
64643: PPUSH
64644: CALL_OW 266
64648: PUSH
64649: LD_INT 3
64651: NONEQUAL
64652: PUSH
64653: LD_VAR 0 1
64657: PPUSH
64658: CALL_OW 247
64662: PUSH
64663: LD_INT 1
64665: EQUAL
64666: NOT
64667: AND
64668: OR
64669: IFFALSE 64673
// exit ;
64671: GO 64822
// if GetType ( factory ) = unit_human then
64673: LD_VAR 0 1
64677: PPUSH
64678: CALL_OW 247
64682: PUSH
64683: LD_INT 1
64685: EQUAL
64686: IFFALSE 64703
// factory := IsInUnit ( factory ) ;
64688: LD_ADDR_VAR 0 1
64692: PUSH
64693: LD_VAR 0 1
64697: PPUSH
64698: CALL_OW 310
64702: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
64703: LD_VAR 0 1
64707: PPUSH
64708: CALL_OW 266
64712: PUSH
64713: LD_INT 3
64715: NONEQUAL
64716: IFFALSE 64720
// exit ;
64718: GO 64822
// if HexInfo ( x , y ) = factory then
64720: LD_VAR 0 2
64724: PPUSH
64725: LD_VAR 0 3
64729: PPUSH
64730: CALL_OW 428
64734: PUSH
64735: LD_VAR 0 1
64739: EQUAL
64740: IFFALSE 64767
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
64742: LD_ADDR_EXP 97
64746: PUSH
64747: LD_EXP 97
64751: PPUSH
64752: LD_VAR 0 1
64756: PPUSH
64757: LD_INT 0
64759: PPUSH
64760: CALL_OW 1
64764: ST_TO_ADDR
64765: GO 64818
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
64767: LD_ADDR_EXP 97
64771: PUSH
64772: LD_EXP 97
64776: PPUSH
64777: LD_VAR 0 1
64781: PPUSH
64782: LD_VAR 0 1
64786: PPUSH
64787: CALL_OW 255
64791: PUSH
64792: LD_VAR 0 1
64796: PUSH
64797: LD_VAR 0 2
64801: PUSH
64802: LD_VAR 0 3
64806: PUSH
64807: EMPTY
64808: LIST
64809: LIST
64810: LIST
64811: LIST
64812: PPUSH
64813: CALL_OW 1
64817: ST_TO_ADDR
// UpdateFactoryWaypoints ;
64818: CALL 64827 0 0
// end ;
64822: LD_VAR 0 4
64826: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
64827: LD_INT 0
64829: PPUSH
64830: PPUSH
64831: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
64832: LD_STRING resetFactoryWaypoint();
64834: PPUSH
64835: CALL_OW 559
// if factoryWaypoints then
64839: LD_EXP 97
64843: IFFALSE 64969
// begin list := PrepareArray ( factoryWaypoints ) ;
64845: LD_ADDR_VAR 0 3
64849: PUSH
64850: LD_EXP 97
64854: PPUSH
64855: CALL 43663 0 1
64859: ST_TO_ADDR
// for i := 1 to list do
64860: LD_ADDR_VAR 0 2
64864: PUSH
64865: DOUBLE
64866: LD_INT 1
64868: DEC
64869: ST_TO_ADDR
64870: LD_VAR 0 3
64874: PUSH
64875: FOR_TO
64876: IFFALSE 64967
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
64878: LD_STRING setFactoryWaypointXY(
64880: PUSH
64881: LD_VAR 0 3
64885: PUSH
64886: LD_VAR 0 2
64890: ARRAY
64891: PUSH
64892: LD_INT 1
64894: ARRAY
64895: STR
64896: PUSH
64897: LD_STRING ,
64899: STR
64900: PUSH
64901: LD_VAR 0 3
64905: PUSH
64906: LD_VAR 0 2
64910: ARRAY
64911: PUSH
64912: LD_INT 2
64914: ARRAY
64915: STR
64916: PUSH
64917: LD_STRING ,
64919: STR
64920: PUSH
64921: LD_VAR 0 3
64925: PUSH
64926: LD_VAR 0 2
64930: ARRAY
64931: PUSH
64932: LD_INT 3
64934: ARRAY
64935: STR
64936: PUSH
64937: LD_STRING ,
64939: STR
64940: PUSH
64941: LD_VAR 0 3
64945: PUSH
64946: LD_VAR 0 2
64950: ARRAY
64951: PUSH
64952: LD_INT 4
64954: ARRAY
64955: STR
64956: PUSH
64957: LD_STRING )
64959: STR
64960: PPUSH
64961: CALL_OW 559
64965: GO 64875
64967: POP
64968: POP
// end ; end ;
64969: LD_VAR 0 1
64973: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
64974: LD_INT 0
64976: PPUSH
// if HexInfo ( x , y ) = warehouse then
64977: LD_VAR 0 2
64981: PPUSH
64982: LD_VAR 0 3
64986: PPUSH
64987: CALL_OW 428
64991: PUSH
64992: LD_VAR 0 1
64996: EQUAL
64997: IFFALSE 65024
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
64999: LD_ADDR_EXP 98
65003: PUSH
65004: LD_EXP 98
65008: PPUSH
65009: LD_VAR 0 1
65013: PPUSH
65014: LD_INT 0
65016: PPUSH
65017: CALL_OW 1
65021: ST_TO_ADDR
65022: GO 65075
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
65024: LD_ADDR_EXP 98
65028: PUSH
65029: LD_EXP 98
65033: PPUSH
65034: LD_VAR 0 1
65038: PPUSH
65039: LD_VAR 0 1
65043: PPUSH
65044: CALL_OW 255
65048: PUSH
65049: LD_VAR 0 1
65053: PUSH
65054: LD_VAR 0 2
65058: PUSH
65059: LD_VAR 0 3
65063: PUSH
65064: EMPTY
65065: LIST
65066: LIST
65067: LIST
65068: LIST
65069: PPUSH
65070: CALL_OW 1
65074: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
65075: CALL 65084 0 0
// end ;
65079: LD_VAR 0 4
65083: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
65084: LD_INT 0
65086: PPUSH
65087: PPUSH
65088: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
65089: LD_STRING resetWarehouseGatheringPoints();
65091: PPUSH
65092: CALL_OW 559
// if warehouseGatheringPoints then
65096: LD_EXP 98
65100: IFFALSE 65226
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
65102: LD_ADDR_VAR 0 3
65106: PUSH
65107: LD_EXP 98
65111: PPUSH
65112: CALL 43663 0 1
65116: ST_TO_ADDR
// for i := 1 to list do
65117: LD_ADDR_VAR 0 2
65121: PUSH
65122: DOUBLE
65123: LD_INT 1
65125: DEC
65126: ST_TO_ADDR
65127: LD_VAR 0 3
65131: PUSH
65132: FOR_TO
65133: IFFALSE 65224
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
65135: LD_STRING setWarehouseGatheringPointXY(
65137: PUSH
65138: LD_VAR 0 3
65142: PUSH
65143: LD_VAR 0 2
65147: ARRAY
65148: PUSH
65149: LD_INT 1
65151: ARRAY
65152: STR
65153: PUSH
65154: LD_STRING ,
65156: STR
65157: PUSH
65158: LD_VAR 0 3
65162: PUSH
65163: LD_VAR 0 2
65167: ARRAY
65168: PUSH
65169: LD_INT 2
65171: ARRAY
65172: STR
65173: PUSH
65174: LD_STRING ,
65176: STR
65177: PUSH
65178: LD_VAR 0 3
65182: PUSH
65183: LD_VAR 0 2
65187: ARRAY
65188: PUSH
65189: LD_INT 3
65191: ARRAY
65192: STR
65193: PUSH
65194: LD_STRING ,
65196: STR
65197: PUSH
65198: LD_VAR 0 3
65202: PUSH
65203: LD_VAR 0 2
65207: ARRAY
65208: PUSH
65209: LD_INT 4
65211: ARRAY
65212: STR
65213: PUSH
65214: LD_STRING )
65216: STR
65217: PPUSH
65218: CALL_OW 559
65222: GO 65132
65224: POP
65225: POP
// end ; end ;
65226: LD_VAR 0 1
65230: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
65231: LD_EXP 98
65235: IFFALSE 65920
65237: GO 65239
65239: DISABLE
65240: LD_INT 0
65242: PPUSH
65243: PPUSH
65244: PPUSH
65245: PPUSH
65246: PPUSH
65247: PPUSH
65248: PPUSH
65249: PPUSH
65250: PPUSH
// begin enable ;
65251: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
65252: LD_ADDR_VAR 0 3
65256: PUSH
65257: LD_EXP 98
65261: PPUSH
65262: CALL 43663 0 1
65266: ST_TO_ADDR
// if not list then
65267: LD_VAR 0 3
65271: NOT
65272: IFFALSE 65276
// exit ;
65274: GO 65920
// for i := 1 to list do
65276: LD_ADDR_VAR 0 1
65280: PUSH
65281: DOUBLE
65282: LD_INT 1
65284: DEC
65285: ST_TO_ADDR
65286: LD_VAR 0 3
65290: PUSH
65291: FOR_TO
65292: IFFALSE 65918
// begin depot := list [ i ] [ 2 ] ;
65294: LD_ADDR_VAR 0 8
65298: PUSH
65299: LD_VAR 0 3
65303: PUSH
65304: LD_VAR 0 1
65308: ARRAY
65309: PUSH
65310: LD_INT 2
65312: ARRAY
65313: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
65314: LD_ADDR_VAR 0 5
65318: PUSH
65319: LD_VAR 0 3
65323: PUSH
65324: LD_VAR 0 1
65328: ARRAY
65329: PUSH
65330: LD_INT 1
65332: ARRAY
65333: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
65334: LD_VAR 0 8
65338: PPUSH
65339: CALL_OW 301
65343: PUSH
65344: LD_VAR 0 5
65348: PUSH
65349: LD_VAR 0 8
65353: PPUSH
65354: CALL_OW 255
65358: NONEQUAL
65359: OR
65360: IFFALSE 65389
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
65362: LD_ADDR_EXP 98
65366: PUSH
65367: LD_EXP 98
65371: PPUSH
65372: LD_VAR 0 8
65376: PPUSH
65377: LD_INT 0
65379: PPUSH
65380: CALL_OW 1
65384: ST_TO_ADDR
// exit ;
65385: POP
65386: POP
65387: GO 65920
// end ; x := list [ i ] [ 3 ] ;
65389: LD_ADDR_VAR 0 6
65393: PUSH
65394: LD_VAR 0 3
65398: PUSH
65399: LD_VAR 0 1
65403: ARRAY
65404: PUSH
65405: LD_INT 3
65407: ARRAY
65408: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
65409: LD_ADDR_VAR 0 7
65413: PUSH
65414: LD_VAR 0 3
65418: PUSH
65419: LD_VAR 0 1
65423: ARRAY
65424: PUSH
65425: LD_INT 4
65427: ARRAY
65428: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
65429: LD_ADDR_VAR 0 9
65433: PUSH
65434: LD_VAR 0 6
65438: PPUSH
65439: LD_VAR 0 7
65443: PPUSH
65444: LD_INT 16
65446: PPUSH
65447: CALL 42251 0 3
65451: ST_TO_ADDR
// if not cratesNearbyPoint then
65452: LD_VAR 0 9
65456: NOT
65457: IFFALSE 65463
// exit ;
65459: POP
65460: POP
65461: GO 65920
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
65463: LD_ADDR_VAR 0 4
65467: PUSH
65468: LD_INT 22
65470: PUSH
65471: LD_VAR 0 5
65475: PUSH
65476: EMPTY
65477: LIST
65478: LIST
65479: PUSH
65480: LD_INT 3
65482: PUSH
65483: LD_INT 60
65485: PUSH
65486: EMPTY
65487: LIST
65488: PUSH
65489: EMPTY
65490: LIST
65491: LIST
65492: PUSH
65493: LD_INT 91
65495: PUSH
65496: LD_VAR 0 8
65500: PUSH
65501: LD_INT 6
65503: PUSH
65504: EMPTY
65505: LIST
65506: LIST
65507: LIST
65508: PUSH
65509: LD_INT 2
65511: PUSH
65512: LD_INT 25
65514: PUSH
65515: LD_INT 2
65517: PUSH
65518: EMPTY
65519: LIST
65520: LIST
65521: PUSH
65522: LD_INT 25
65524: PUSH
65525: LD_INT 16
65527: PUSH
65528: EMPTY
65529: LIST
65530: LIST
65531: PUSH
65532: EMPTY
65533: LIST
65534: LIST
65535: LIST
65536: PUSH
65537: EMPTY
65538: LIST
65539: LIST
65540: LIST
65541: LIST
65542: PPUSH
65543: CALL_OW 69
65547: PUSH
65548: LD_VAR 0 8
65552: PPUSH
65553: CALL_OW 313
65557: PPUSH
65558: LD_INT 3
65560: PUSH
65561: LD_INT 60
65563: PUSH
65564: EMPTY
65565: LIST
65566: PUSH
65567: EMPTY
65568: LIST
65569: LIST
65570: PUSH
65571: LD_INT 2
65573: PUSH
65574: LD_INT 25
65576: PUSH
65577: LD_INT 2
65579: PUSH
65580: EMPTY
65581: LIST
65582: LIST
65583: PUSH
65584: LD_INT 25
65586: PUSH
65587: LD_INT 16
65589: PUSH
65590: EMPTY
65591: LIST
65592: LIST
65593: PUSH
65594: EMPTY
65595: LIST
65596: LIST
65597: LIST
65598: PUSH
65599: EMPTY
65600: LIST
65601: LIST
65602: PPUSH
65603: CALL_OW 72
65607: UNION
65608: ST_TO_ADDR
// if tmp then
65609: LD_VAR 0 4
65613: IFFALSE 65693
// begin tmp := ShrinkArray ( tmp , 3 ) ;
65615: LD_ADDR_VAR 0 4
65619: PUSH
65620: LD_VAR 0 4
65624: PPUSH
65625: LD_INT 3
65627: PPUSH
65628: CALL 40220 0 2
65632: ST_TO_ADDR
// for j in tmp do
65633: LD_ADDR_VAR 0 2
65637: PUSH
65638: LD_VAR 0 4
65642: PUSH
65643: FOR_IN
65644: IFFALSE 65687
// begin if IsInUnit ( j ) then
65646: LD_VAR 0 2
65650: PPUSH
65651: CALL_OW 310
65655: IFFALSE 65666
// ComExit ( j ) ;
65657: LD_VAR 0 2
65661: PPUSH
65662: CALL 40303 0 1
// AddComCollect ( j , x , y ) ;
65666: LD_VAR 0 2
65670: PPUSH
65671: LD_VAR 0 6
65675: PPUSH
65676: LD_VAR 0 7
65680: PPUSH
65681: CALL_OW 177
// end ;
65685: GO 65643
65687: POP
65688: POP
// exit ;
65689: POP
65690: POP
65691: GO 65920
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
65693: LD_ADDR_VAR 0 4
65697: PUSH
65698: LD_INT 22
65700: PUSH
65701: LD_VAR 0 5
65705: PUSH
65706: EMPTY
65707: LIST
65708: LIST
65709: PUSH
65710: LD_INT 91
65712: PUSH
65713: LD_VAR 0 8
65717: PUSH
65718: LD_INT 8
65720: PUSH
65721: EMPTY
65722: LIST
65723: LIST
65724: LIST
65725: PUSH
65726: LD_INT 2
65728: PUSH
65729: LD_INT 34
65731: PUSH
65732: LD_INT 12
65734: PUSH
65735: EMPTY
65736: LIST
65737: LIST
65738: PUSH
65739: LD_INT 34
65741: PUSH
65742: LD_INT 51
65744: PUSH
65745: EMPTY
65746: LIST
65747: LIST
65748: PUSH
65749: LD_INT 34
65751: PUSH
65752: LD_INT 32
65754: PUSH
65755: EMPTY
65756: LIST
65757: LIST
65758: PUSH
65759: LD_INT 34
65761: PUSH
65762: LD_INT 89
65764: PUSH
65765: EMPTY
65766: LIST
65767: LIST
65768: PUSH
65769: EMPTY
65770: LIST
65771: LIST
65772: LIST
65773: LIST
65774: LIST
65775: PUSH
65776: EMPTY
65777: LIST
65778: LIST
65779: LIST
65780: PPUSH
65781: CALL_OW 69
65785: ST_TO_ADDR
// if tmp then
65786: LD_VAR 0 4
65790: IFFALSE 65916
// begin for j in tmp do
65792: LD_ADDR_VAR 0 2
65796: PUSH
65797: LD_VAR 0 4
65801: PUSH
65802: FOR_IN
65803: IFFALSE 65914
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
65805: LD_VAR 0 2
65809: PPUSH
65810: CALL_OW 262
65814: PUSH
65815: LD_INT 3
65817: EQUAL
65818: PUSH
65819: LD_VAR 0 2
65823: PPUSH
65824: CALL_OW 261
65828: PUSH
65829: LD_INT 20
65831: GREATER
65832: OR
65833: PUSH
65834: LD_VAR 0 2
65838: PPUSH
65839: CALL_OW 314
65843: NOT
65844: AND
65845: PUSH
65846: LD_VAR 0 2
65850: PPUSH
65851: CALL_OW 263
65855: PUSH
65856: LD_INT 1
65858: NONEQUAL
65859: PUSH
65860: LD_VAR 0 2
65864: PPUSH
65865: CALL_OW 311
65869: OR
65870: AND
65871: IFFALSE 65912
// begin ComCollect ( j , x , y ) ;
65873: LD_VAR 0 2
65877: PPUSH
65878: LD_VAR 0 6
65882: PPUSH
65883: LD_VAR 0 7
65887: PPUSH
65888: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
65892: LD_VAR 0 2
65896: PPUSH
65897: LD_VAR 0 8
65901: PPUSH
65902: CALL_OW 172
// exit ;
65906: POP
65907: POP
65908: POP
65909: POP
65910: GO 65920
// end ;
65912: GO 65802
65914: POP
65915: POP
// end ; end ;
65916: GO 65291
65918: POP
65919: POP
// end ; end_of_file
65920: PPOPN 9
65922: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
65923: LD_VAR 0 1
65927: PUSH
65928: LD_INT 200
65930: DOUBLE
65931: GREATEREQUAL
65932: IFFALSE 65940
65934: LD_INT 299
65936: DOUBLE
65937: LESSEQUAL
65938: IFTRUE 65942
65940: GO 65974
65942: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
65943: LD_VAR 0 1
65947: PPUSH
65948: LD_VAR 0 2
65952: PPUSH
65953: LD_VAR 0 3
65957: PPUSH
65958: LD_VAR 0 4
65962: PPUSH
65963: LD_VAR 0 5
65967: PPUSH
65968: CALL 66462 0 5
65972: GO 66051
65974: LD_INT 300
65976: DOUBLE
65977: GREATEREQUAL
65978: IFFALSE 65986
65980: LD_INT 399
65982: DOUBLE
65983: LESSEQUAL
65984: IFTRUE 65988
65986: GO 66050
65988: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
65989: LD_VAR 0 1
65993: PPUSH
65994: LD_VAR 0 2
65998: PPUSH
65999: LD_VAR 0 3
66003: PPUSH
66004: LD_VAR 0 4
66008: PPUSH
66009: LD_VAR 0 5
66013: PPUSH
66014: LD_VAR 0 6
66018: PPUSH
66019: LD_VAR 0 7
66023: PPUSH
66024: LD_VAR 0 8
66028: PPUSH
66029: LD_VAR 0 9
66033: PPUSH
66034: LD_VAR 0 10
66038: PPUSH
66039: LD_VAR 0 11
66043: PPUSH
66044: CALL 62624 0 11
66048: GO 66051
66050: POP
// end ;
66051: PPOPN 11
66053: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
66054: LD_VAR 0 1
66058: PPUSH
66059: LD_VAR 0 2
66063: PPUSH
66064: LD_VAR 0 3
66068: PPUSH
66069: LD_VAR 0 4
66073: PPUSH
66074: LD_VAR 0 5
66078: PPUSH
66079: CALL 66198 0 5
// end ; end_of_file
66083: PPOPN 5
66085: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
66086: LD_INT 0
66088: PPUSH
66089: PPUSH
66090: PPUSH
66091: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
66092: LD_VAR 0 1
66096: PPUSH
66097: CALL_OW 264
66101: PUSH
66102: LD_INT 91
66104: EQUAL
66105: IFFALSE 66177
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
66107: LD_INT 68
66109: PPUSH
66110: LD_VAR 0 1
66114: PPUSH
66115: CALL_OW 255
66119: PPUSH
66120: CALL_OW 321
66124: PUSH
66125: LD_INT 2
66127: EQUAL
66128: IFFALSE 66140
// eff := 70 else
66130: LD_ADDR_VAR 0 4
66134: PUSH
66135: LD_INT 70
66137: ST_TO_ADDR
66138: GO 66148
// eff := 30 ;
66140: LD_ADDR_VAR 0 4
66144: PUSH
66145: LD_INT 30
66147: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
66148: LD_VAR 0 1
66152: PPUSH
66153: CALL_OW 250
66157: PPUSH
66158: LD_VAR 0 1
66162: PPUSH
66163: CALL_OW 251
66167: PPUSH
66168: LD_VAR 0 4
66172: PPUSH
66173: CALL_OW 495
// end ; end ;
66177: LD_VAR 0 2
66181: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
66182: LD_INT 0
66184: PPUSH
// end ;
66185: LD_VAR 0 4
66189: RET
// export function SOS_Command ( cmd ) ; begin
66190: LD_INT 0
66192: PPUSH
// end ;
66193: LD_VAR 0 2
66197: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
66198: LD_INT 0
66200: PPUSH
// end ;
66201: LD_VAR 0 6
66205: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
66206: LD_INT 0
66208: PPUSH
66209: PPUSH
// if not vehicle or not factory then
66210: LD_VAR 0 1
66214: NOT
66215: PUSH
66216: LD_VAR 0 2
66220: NOT
66221: OR
66222: IFFALSE 66226
// exit ;
66224: GO 66457
// if factoryWaypoints >= factory then
66226: LD_EXP 97
66230: PUSH
66231: LD_VAR 0 2
66235: GREATEREQUAL
66236: IFFALSE 66457
// if factoryWaypoints [ factory ] then
66238: LD_EXP 97
66242: PUSH
66243: LD_VAR 0 2
66247: ARRAY
66248: IFFALSE 66457
// begin if GetControl ( vehicle ) = control_manual then
66250: LD_VAR 0 1
66254: PPUSH
66255: CALL_OW 263
66259: PUSH
66260: LD_INT 1
66262: EQUAL
66263: IFFALSE 66344
// begin driver := IsDrivenBy ( vehicle ) ;
66265: LD_ADDR_VAR 0 4
66269: PUSH
66270: LD_VAR 0 1
66274: PPUSH
66275: CALL_OW 311
66279: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
66280: LD_VAR 0 4
66284: PPUSH
66285: LD_EXP 97
66289: PUSH
66290: LD_VAR 0 2
66294: ARRAY
66295: PUSH
66296: LD_INT 3
66298: ARRAY
66299: PPUSH
66300: LD_EXP 97
66304: PUSH
66305: LD_VAR 0 2
66309: ARRAY
66310: PUSH
66311: LD_INT 4
66313: ARRAY
66314: PPUSH
66315: CALL_OW 171
// AddComExitVehicle ( driver ) ;
66319: LD_VAR 0 4
66323: PPUSH
66324: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
66328: LD_VAR 0 4
66332: PPUSH
66333: LD_VAR 0 2
66337: PPUSH
66338: CALL_OW 180
// end else
66342: GO 66457
// if GetControl ( vehicle ) = control_remote then
66344: LD_VAR 0 1
66348: PPUSH
66349: CALL_OW 263
66353: PUSH
66354: LD_INT 2
66356: EQUAL
66357: IFFALSE 66418
// begin wait ( 0 0$2 ) ;
66359: LD_INT 70
66361: PPUSH
66362: CALL_OW 67
// if Connect ( vehicle ) then
66366: LD_VAR 0 1
66370: PPUSH
66371: CALL 10511 0 1
66375: IFFALSE 66416
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
66377: LD_VAR 0 1
66381: PPUSH
66382: LD_EXP 97
66386: PUSH
66387: LD_VAR 0 2
66391: ARRAY
66392: PUSH
66393: LD_INT 3
66395: ARRAY
66396: PPUSH
66397: LD_EXP 97
66401: PUSH
66402: LD_VAR 0 2
66406: ARRAY
66407: PUSH
66408: LD_INT 4
66410: ARRAY
66411: PPUSH
66412: CALL_OW 171
// end else
66416: GO 66457
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
66418: LD_VAR 0 1
66422: PPUSH
66423: LD_EXP 97
66427: PUSH
66428: LD_VAR 0 2
66432: ARRAY
66433: PUSH
66434: LD_INT 3
66436: ARRAY
66437: PPUSH
66438: LD_EXP 97
66442: PUSH
66443: LD_VAR 0 2
66447: ARRAY
66448: PUSH
66449: LD_INT 4
66451: ARRAY
66452: PPUSH
66453: CALL_OW 171
// end ; end ;
66457: LD_VAR 0 3
66461: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
66462: LD_INT 0
66464: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
66465: LD_VAR 0 1
66469: PUSH
66470: LD_INT 250
66472: EQUAL
66473: PUSH
66474: LD_VAR 0 2
66478: PPUSH
66479: CALL_OW 264
66483: PUSH
66484: LD_INT 81
66486: EQUAL
66487: AND
66488: IFFALSE 66509
// MinerPlaceMine ( unit , x , y ) ;
66490: LD_VAR 0 2
66494: PPUSH
66495: LD_VAR 0 4
66499: PPUSH
66500: LD_VAR 0 5
66504: PPUSH
66505: CALL 69333 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
66509: LD_VAR 0 1
66513: PUSH
66514: LD_INT 251
66516: EQUAL
66517: PUSH
66518: LD_VAR 0 2
66522: PPUSH
66523: CALL_OW 264
66527: PUSH
66528: LD_INT 81
66530: EQUAL
66531: AND
66532: IFFALSE 66553
// MinerDetonateMine ( unit , x , y ) ;
66534: LD_VAR 0 2
66538: PPUSH
66539: LD_VAR 0 4
66543: PPUSH
66544: LD_VAR 0 5
66548: PPUSH
66549: CALL 69608 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
66553: LD_VAR 0 1
66557: PUSH
66558: LD_INT 252
66560: EQUAL
66561: PUSH
66562: LD_VAR 0 2
66566: PPUSH
66567: CALL_OW 264
66571: PUSH
66572: LD_INT 81
66574: EQUAL
66575: AND
66576: IFFALSE 66597
// MinerCreateMinefield ( unit , x , y ) ;
66578: LD_VAR 0 2
66582: PPUSH
66583: LD_VAR 0 4
66587: PPUSH
66588: LD_VAR 0 5
66592: PPUSH
66593: CALL 70025 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
66597: LD_VAR 0 1
66601: PUSH
66602: LD_INT 253
66604: EQUAL
66605: PUSH
66606: LD_VAR 0 2
66610: PPUSH
66611: CALL_OW 257
66615: PUSH
66616: LD_INT 5
66618: EQUAL
66619: AND
66620: IFFALSE 66641
// ComBinocular ( unit , x , y ) ;
66622: LD_VAR 0 2
66626: PPUSH
66627: LD_VAR 0 4
66631: PPUSH
66632: LD_VAR 0 5
66636: PPUSH
66637: CALL 70394 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
66641: LD_VAR 0 1
66645: PUSH
66646: LD_INT 254
66648: EQUAL
66649: PUSH
66650: LD_VAR 0 2
66654: PPUSH
66655: CALL_OW 264
66659: PUSH
66660: LD_INT 99
66662: EQUAL
66663: AND
66664: PUSH
66665: LD_VAR 0 3
66669: PPUSH
66670: CALL_OW 263
66674: PUSH
66675: LD_INT 3
66677: EQUAL
66678: AND
66679: IFFALSE 66695
// HackDestroyVehicle ( unit , selectedUnit ) ;
66681: LD_VAR 0 2
66685: PPUSH
66686: LD_VAR 0 3
66690: PPUSH
66691: CALL 68697 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
66695: LD_VAR 0 1
66699: PUSH
66700: LD_INT 255
66702: EQUAL
66703: PUSH
66704: LD_VAR 0 2
66708: PPUSH
66709: CALL_OW 264
66713: PUSH
66714: LD_INT 14
66716: PUSH
66717: LD_INT 53
66719: PUSH
66720: EMPTY
66721: LIST
66722: LIST
66723: IN
66724: AND
66725: PUSH
66726: LD_VAR 0 4
66730: PPUSH
66731: LD_VAR 0 5
66735: PPUSH
66736: CALL_OW 488
66740: AND
66741: IFFALSE 66765
// CutTreeXYR ( unit , x , y , 12 ) ;
66743: LD_VAR 0 2
66747: PPUSH
66748: LD_VAR 0 4
66752: PPUSH
66753: LD_VAR 0 5
66757: PPUSH
66758: LD_INT 12
66760: PPUSH
66761: CALL 66860 0 4
// if cmd = 256 then
66765: LD_VAR 0 1
66769: PUSH
66770: LD_INT 256
66772: EQUAL
66773: IFFALSE 66794
// SetFactoryWaypoint ( unit , x , y ) ;
66775: LD_VAR 0 2
66779: PPUSH
66780: LD_VAR 0 4
66784: PPUSH
66785: LD_VAR 0 5
66789: PPUSH
66790: CALL 64612 0 3
// if cmd = 257 then
66794: LD_VAR 0 1
66798: PUSH
66799: LD_INT 257
66801: EQUAL
66802: IFFALSE 66823
// SetWarehouseGatheringPoint ( unit , x , y ) ;
66804: LD_VAR 0 2
66808: PPUSH
66809: LD_VAR 0 4
66813: PPUSH
66814: LD_VAR 0 5
66818: PPUSH
66819: CALL 64974 0 3
// if cmd = 258 then
66823: LD_VAR 0 1
66827: PUSH
66828: LD_INT 258
66830: EQUAL
66831: IFFALSE 66855
// BurnTreeXYR ( unit , x , y , 8 ) ;
66833: LD_VAR 0 2
66837: PPUSH
66838: LD_VAR 0 4
66842: PPUSH
66843: LD_VAR 0 5
66847: PPUSH
66848: LD_INT 8
66850: PPUSH
66851: CALL 67254 0 4
// end ;
66855: LD_VAR 0 6
66859: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
66860: LD_INT 0
66862: PPUSH
66863: PPUSH
66864: PPUSH
66865: PPUSH
66866: PPUSH
66867: PPUSH
66868: PPUSH
66869: PPUSH
66870: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
66871: LD_VAR 0 1
66875: PPUSH
66876: CALL_OW 302
66880: NOT
66881: PUSH
66882: LD_VAR 0 2
66886: PPUSH
66887: LD_VAR 0 3
66891: PPUSH
66892: CALL_OW 488
66896: NOT
66897: OR
66898: PUSH
66899: LD_VAR 0 4
66903: NOT
66904: OR
66905: IFFALSE 66909
// exit ;
66907: GO 67249
// list := [ ] ;
66909: LD_ADDR_VAR 0 13
66913: PUSH
66914: EMPTY
66915: ST_TO_ADDR
// if x - r < 0 then
66916: LD_VAR 0 2
66920: PUSH
66921: LD_VAR 0 4
66925: MINUS
66926: PUSH
66927: LD_INT 0
66929: LESS
66930: IFFALSE 66942
// min_x := 0 else
66932: LD_ADDR_VAR 0 7
66936: PUSH
66937: LD_INT 0
66939: ST_TO_ADDR
66940: GO 66958
// min_x := x - r ;
66942: LD_ADDR_VAR 0 7
66946: PUSH
66947: LD_VAR 0 2
66951: PUSH
66952: LD_VAR 0 4
66956: MINUS
66957: ST_TO_ADDR
// if y - r < 0 then
66958: LD_VAR 0 3
66962: PUSH
66963: LD_VAR 0 4
66967: MINUS
66968: PUSH
66969: LD_INT 0
66971: LESS
66972: IFFALSE 66984
// min_y := 0 else
66974: LD_ADDR_VAR 0 8
66978: PUSH
66979: LD_INT 0
66981: ST_TO_ADDR
66982: GO 67000
// min_y := y - r ;
66984: LD_ADDR_VAR 0 8
66988: PUSH
66989: LD_VAR 0 3
66993: PUSH
66994: LD_VAR 0 4
66998: MINUS
66999: ST_TO_ADDR
// max_x := x + r ;
67000: LD_ADDR_VAR 0 9
67004: PUSH
67005: LD_VAR 0 2
67009: PUSH
67010: LD_VAR 0 4
67014: PLUS
67015: ST_TO_ADDR
// max_y := y + r ;
67016: LD_ADDR_VAR 0 10
67020: PUSH
67021: LD_VAR 0 3
67025: PUSH
67026: LD_VAR 0 4
67030: PLUS
67031: ST_TO_ADDR
// for _x = min_x to max_x do
67032: LD_ADDR_VAR 0 11
67036: PUSH
67037: DOUBLE
67038: LD_VAR 0 7
67042: DEC
67043: ST_TO_ADDR
67044: LD_VAR 0 9
67048: PUSH
67049: FOR_TO
67050: IFFALSE 67167
// for _y = min_y to max_y do
67052: LD_ADDR_VAR 0 12
67056: PUSH
67057: DOUBLE
67058: LD_VAR 0 8
67062: DEC
67063: ST_TO_ADDR
67064: LD_VAR 0 10
67068: PUSH
67069: FOR_TO
67070: IFFALSE 67163
// begin if not ValidHex ( _x , _y ) then
67072: LD_VAR 0 11
67076: PPUSH
67077: LD_VAR 0 12
67081: PPUSH
67082: CALL_OW 488
67086: NOT
67087: IFFALSE 67091
// continue ;
67089: GO 67069
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
67091: LD_VAR 0 11
67095: PPUSH
67096: LD_VAR 0 12
67100: PPUSH
67101: CALL_OW 351
67105: PUSH
67106: LD_VAR 0 11
67110: PPUSH
67111: LD_VAR 0 12
67115: PPUSH
67116: CALL_OW 554
67120: AND
67121: IFFALSE 67161
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
67123: LD_ADDR_VAR 0 13
67127: PUSH
67128: LD_VAR 0 13
67132: PPUSH
67133: LD_VAR 0 13
67137: PUSH
67138: LD_INT 1
67140: PLUS
67141: PPUSH
67142: LD_VAR 0 11
67146: PUSH
67147: LD_VAR 0 12
67151: PUSH
67152: EMPTY
67153: LIST
67154: LIST
67155: PPUSH
67156: CALL_OW 2
67160: ST_TO_ADDR
// end ;
67161: GO 67069
67163: POP
67164: POP
67165: GO 67049
67167: POP
67168: POP
// if not list then
67169: LD_VAR 0 13
67173: NOT
67174: IFFALSE 67178
// exit ;
67176: GO 67249
// for i in list do
67178: LD_ADDR_VAR 0 6
67182: PUSH
67183: LD_VAR 0 13
67187: PUSH
67188: FOR_IN
67189: IFFALSE 67247
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
67191: LD_VAR 0 1
67195: PPUSH
67196: LD_STRING M
67198: PUSH
67199: LD_VAR 0 6
67203: PUSH
67204: LD_INT 1
67206: ARRAY
67207: PUSH
67208: LD_VAR 0 6
67212: PUSH
67213: LD_INT 2
67215: ARRAY
67216: PUSH
67217: LD_INT 0
67219: PUSH
67220: LD_INT 0
67222: PUSH
67223: LD_INT 0
67225: PUSH
67226: LD_INT 0
67228: PUSH
67229: EMPTY
67230: LIST
67231: LIST
67232: LIST
67233: LIST
67234: LIST
67235: LIST
67236: LIST
67237: PUSH
67238: EMPTY
67239: LIST
67240: PPUSH
67241: CALL_OW 447
67245: GO 67188
67247: POP
67248: POP
// end ;
67249: LD_VAR 0 5
67253: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
67254: LD_INT 0
67256: PPUSH
67257: PPUSH
67258: PPUSH
67259: PPUSH
67260: PPUSH
67261: PPUSH
67262: PPUSH
67263: PPUSH
67264: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
67265: LD_VAR 0 1
67269: PPUSH
67270: CALL_OW 302
67274: NOT
67275: PUSH
67276: LD_VAR 0 2
67280: PPUSH
67281: LD_VAR 0 3
67285: PPUSH
67286: CALL_OW 488
67290: NOT
67291: OR
67292: PUSH
67293: LD_VAR 0 4
67297: NOT
67298: OR
67299: IFFALSE 67303
// exit ;
67301: GO 67651
// list := [ ] ;
67303: LD_ADDR_VAR 0 13
67307: PUSH
67308: EMPTY
67309: ST_TO_ADDR
// if x - r < 0 then
67310: LD_VAR 0 2
67314: PUSH
67315: LD_VAR 0 4
67319: MINUS
67320: PUSH
67321: LD_INT 0
67323: LESS
67324: IFFALSE 67336
// min_x := 0 else
67326: LD_ADDR_VAR 0 7
67330: PUSH
67331: LD_INT 0
67333: ST_TO_ADDR
67334: GO 67352
// min_x := x - r ;
67336: LD_ADDR_VAR 0 7
67340: PUSH
67341: LD_VAR 0 2
67345: PUSH
67346: LD_VAR 0 4
67350: MINUS
67351: ST_TO_ADDR
// if y - r < 0 then
67352: LD_VAR 0 3
67356: PUSH
67357: LD_VAR 0 4
67361: MINUS
67362: PUSH
67363: LD_INT 0
67365: LESS
67366: IFFALSE 67378
// min_y := 0 else
67368: LD_ADDR_VAR 0 8
67372: PUSH
67373: LD_INT 0
67375: ST_TO_ADDR
67376: GO 67394
// min_y := y - r ;
67378: LD_ADDR_VAR 0 8
67382: PUSH
67383: LD_VAR 0 3
67387: PUSH
67388: LD_VAR 0 4
67392: MINUS
67393: ST_TO_ADDR
// max_x := x + r ;
67394: LD_ADDR_VAR 0 9
67398: PUSH
67399: LD_VAR 0 2
67403: PUSH
67404: LD_VAR 0 4
67408: PLUS
67409: ST_TO_ADDR
// max_y := y + r ;
67410: LD_ADDR_VAR 0 10
67414: PUSH
67415: LD_VAR 0 3
67419: PUSH
67420: LD_VAR 0 4
67424: PLUS
67425: ST_TO_ADDR
// for _x = min_x to max_x do
67426: LD_ADDR_VAR 0 11
67430: PUSH
67431: DOUBLE
67432: LD_VAR 0 7
67436: DEC
67437: ST_TO_ADDR
67438: LD_VAR 0 9
67442: PUSH
67443: FOR_TO
67444: IFFALSE 67561
// for _y = min_y to max_y do
67446: LD_ADDR_VAR 0 12
67450: PUSH
67451: DOUBLE
67452: LD_VAR 0 8
67456: DEC
67457: ST_TO_ADDR
67458: LD_VAR 0 10
67462: PUSH
67463: FOR_TO
67464: IFFALSE 67557
// begin if not ValidHex ( _x , _y ) then
67466: LD_VAR 0 11
67470: PPUSH
67471: LD_VAR 0 12
67475: PPUSH
67476: CALL_OW 488
67480: NOT
67481: IFFALSE 67485
// continue ;
67483: GO 67463
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
67485: LD_VAR 0 11
67489: PPUSH
67490: LD_VAR 0 12
67494: PPUSH
67495: CALL_OW 351
67499: PUSH
67500: LD_VAR 0 11
67504: PPUSH
67505: LD_VAR 0 12
67509: PPUSH
67510: CALL_OW 554
67514: AND
67515: IFFALSE 67555
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
67517: LD_ADDR_VAR 0 13
67521: PUSH
67522: LD_VAR 0 13
67526: PPUSH
67527: LD_VAR 0 13
67531: PUSH
67532: LD_INT 1
67534: PLUS
67535: PPUSH
67536: LD_VAR 0 11
67540: PUSH
67541: LD_VAR 0 12
67545: PUSH
67546: EMPTY
67547: LIST
67548: LIST
67549: PPUSH
67550: CALL_OW 2
67554: ST_TO_ADDR
// end ;
67555: GO 67463
67557: POP
67558: POP
67559: GO 67443
67561: POP
67562: POP
// if not list then
67563: LD_VAR 0 13
67567: NOT
67568: IFFALSE 67572
// exit ;
67570: GO 67651
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
67572: LD_ADDR_VAR 0 13
67576: PUSH
67577: LD_VAR 0 1
67581: PPUSH
67582: LD_VAR 0 13
67586: PPUSH
67587: LD_INT 1
67589: PPUSH
67590: LD_INT 1
67592: PPUSH
67593: CALL 7653 0 4
67597: ST_TO_ADDR
// ComStop ( flame ) ;
67598: LD_VAR 0 1
67602: PPUSH
67603: CALL_OW 141
// for i in list do
67607: LD_ADDR_VAR 0 6
67611: PUSH
67612: LD_VAR 0 13
67616: PUSH
67617: FOR_IN
67618: IFFALSE 67649
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
67620: LD_VAR 0 1
67624: PPUSH
67625: LD_VAR 0 6
67629: PUSH
67630: LD_INT 1
67632: ARRAY
67633: PPUSH
67634: LD_VAR 0 6
67638: PUSH
67639: LD_INT 2
67641: ARRAY
67642: PPUSH
67643: CALL_OW 176
67647: GO 67617
67649: POP
67650: POP
// end ;
67651: LD_VAR 0 5
67655: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
67656: LD_EXP 100
67660: NOT
67661: IFFALSE 67711
67663: GO 67665
67665: DISABLE
// begin initHack := true ;
67666: LD_ADDR_EXP 100
67670: PUSH
67671: LD_INT 1
67673: ST_TO_ADDR
// hackTanks := [ ] ;
67674: LD_ADDR_EXP 101
67678: PUSH
67679: EMPTY
67680: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
67681: LD_ADDR_EXP 102
67685: PUSH
67686: EMPTY
67687: ST_TO_ADDR
// hackLimit := 3 ;
67688: LD_ADDR_EXP 103
67692: PUSH
67693: LD_INT 3
67695: ST_TO_ADDR
// hackDist := 12 ;
67696: LD_ADDR_EXP 104
67700: PUSH
67701: LD_INT 12
67703: ST_TO_ADDR
// hackCounter := [ ] ;
67704: LD_ADDR_EXP 105
67708: PUSH
67709: EMPTY
67710: ST_TO_ADDR
// end ;
67711: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
67712: LD_EXP 100
67716: PUSH
67717: LD_INT 34
67719: PUSH
67720: LD_INT 99
67722: PUSH
67723: EMPTY
67724: LIST
67725: LIST
67726: PPUSH
67727: CALL_OW 69
67731: AND
67732: IFFALSE 67985
67734: GO 67736
67736: DISABLE
67737: LD_INT 0
67739: PPUSH
67740: PPUSH
// begin enable ;
67741: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
67742: LD_ADDR_VAR 0 1
67746: PUSH
67747: LD_INT 34
67749: PUSH
67750: LD_INT 99
67752: PUSH
67753: EMPTY
67754: LIST
67755: LIST
67756: PPUSH
67757: CALL_OW 69
67761: PUSH
67762: FOR_IN
67763: IFFALSE 67983
// begin if not i in hackTanks then
67765: LD_VAR 0 1
67769: PUSH
67770: LD_EXP 101
67774: IN
67775: NOT
67776: IFFALSE 67859
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
67778: LD_ADDR_EXP 101
67782: PUSH
67783: LD_EXP 101
67787: PPUSH
67788: LD_EXP 101
67792: PUSH
67793: LD_INT 1
67795: PLUS
67796: PPUSH
67797: LD_VAR 0 1
67801: PPUSH
67802: CALL_OW 1
67806: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
67807: LD_ADDR_EXP 102
67811: PUSH
67812: LD_EXP 102
67816: PPUSH
67817: LD_EXP 102
67821: PUSH
67822: LD_INT 1
67824: PLUS
67825: PPUSH
67826: EMPTY
67827: PPUSH
67828: CALL_OW 1
67832: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
67833: LD_ADDR_EXP 105
67837: PUSH
67838: LD_EXP 105
67842: PPUSH
67843: LD_EXP 105
67847: PUSH
67848: LD_INT 1
67850: PLUS
67851: PPUSH
67852: EMPTY
67853: PPUSH
67854: CALL_OW 1
67858: ST_TO_ADDR
// end ; if not IsOk ( i ) then
67859: LD_VAR 0 1
67863: PPUSH
67864: CALL_OW 302
67868: NOT
67869: IFFALSE 67882
// begin HackUnlinkAll ( i ) ;
67871: LD_VAR 0 1
67875: PPUSH
67876: CALL 67988 0 1
// continue ;
67880: GO 67762
// end ; HackCheckCapturedStatus ( i ) ;
67882: LD_VAR 0 1
67886: PPUSH
67887: CALL 68431 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
67891: LD_ADDR_VAR 0 2
67895: PUSH
67896: LD_INT 81
67898: PUSH
67899: LD_VAR 0 1
67903: PPUSH
67904: CALL_OW 255
67908: PUSH
67909: EMPTY
67910: LIST
67911: LIST
67912: PUSH
67913: LD_INT 33
67915: PUSH
67916: LD_INT 3
67918: PUSH
67919: EMPTY
67920: LIST
67921: LIST
67922: PUSH
67923: LD_INT 91
67925: PUSH
67926: LD_VAR 0 1
67930: PUSH
67931: LD_EXP 104
67935: PUSH
67936: EMPTY
67937: LIST
67938: LIST
67939: LIST
67940: PUSH
67941: LD_INT 50
67943: PUSH
67944: EMPTY
67945: LIST
67946: PUSH
67947: EMPTY
67948: LIST
67949: LIST
67950: LIST
67951: LIST
67952: PPUSH
67953: CALL_OW 69
67957: ST_TO_ADDR
// if not tmp then
67958: LD_VAR 0 2
67962: NOT
67963: IFFALSE 67967
// continue ;
67965: GO 67762
// HackLink ( i , tmp ) ;
67967: LD_VAR 0 1
67971: PPUSH
67972: LD_VAR 0 2
67976: PPUSH
67977: CALL 68124 0 2
// end ;
67981: GO 67762
67983: POP
67984: POP
// end ;
67985: PPOPN 2
67987: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
67988: LD_INT 0
67990: PPUSH
67991: PPUSH
67992: PPUSH
// if not hack in hackTanks then
67993: LD_VAR 0 1
67997: PUSH
67998: LD_EXP 101
68002: IN
68003: NOT
68004: IFFALSE 68008
// exit ;
68006: GO 68119
// index := GetElementIndex ( hackTanks , hack ) ;
68008: LD_ADDR_VAR 0 4
68012: PUSH
68013: LD_EXP 101
68017: PPUSH
68018: LD_VAR 0 1
68022: PPUSH
68023: CALL 6950 0 2
68027: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
68028: LD_EXP 102
68032: PUSH
68033: LD_VAR 0 4
68037: ARRAY
68038: IFFALSE 68119
// begin for i in hackTanksCaptured [ index ] do
68040: LD_ADDR_VAR 0 3
68044: PUSH
68045: LD_EXP 102
68049: PUSH
68050: LD_VAR 0 4
68054: ARRAY
68055: PUSH
68056: FOR_IN
68057: IFFALSE 68083
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
68059: LD_VAR 0 3
68063: PUSH
68064: LD_INT 1
68066: ARRAY
68067: PPUSH
68068: LD_VAR 0 3
68072: PUSH
68073: LD_INT 2
68075: ARRAY
68076: PPUSH
68077: CALL_OW 235
68081: GO 68056
68083: POP
68084: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
68085: LD_ADDR_EXP 102
68089: PUSH
68090: LD_EXP 102
68094: PPUSH
68095: LD_VAR 0 4
68099: PPUSH
68100: EMPTY
68101: PPUSH
68102: CALL_OW 1
68106: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
68107: LD_VAR 0 1
68111: PPUSH
68112: LD_INT 0
68114: PPUSH
68115: CALL_OW 505
// end ; end ;
68119: LD_VAR 0 2
68123: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
68124: LD_INT 0
68126: PPUSH
68127: PPUSH
68128: PPUSH
// if not hack in hackTanks or not vehicles then
68129: LD_VAR 0 1
68133: PUSH
68134: LD_EXP 101
68138: IN
68139: NOT
68140: PUSH
68141: LD_VAR 0 2
68145: NOT
68146: OR
68147: IFFALSE 68151
// exit ;
68149: GO 68426
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
68151: LD_ADDR_VAR 0 2
68155: PUSH
68156: LD_VAR 0 1
68160: PPUSH
68161: LD_VAR 0 2
68165: PPUSH
68166: LD_INT 1
68168: PPUSH
68169: LD_INT 1
68171: PPUSH
68172: CALL 7600 0 4
68176: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
68177: LD_ADDR_VAR 0 5
68181: PUSH
68182: LD_EXP 101
68186: PPUSH
68187: LD_VAR 0 1
68191: PPUSH
68192: CALL 6950 0 2
68196: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
68197: LD_EXP 102
68201: PUSH
68202: LD_VAR 0 5
68206: ARRAY
68207: PUSH
68208: LD_EXP 103
68212: LESS
68213: IFFALSE 68402
// begin for i := 1 to vehicles do
68215: LD_ADDR_VAR 0 4
68219: PUSH
68220: DOUBLE
68221: LD_INT 1
68223: DEC
68224: ST_TO_ADDR
68225: LD_VAR 0 2
68229: PUSH
68230: FOR_TO
68231: IFFALSE 68400
// begin if hackTanksCaptured [ index ] = hackLimit then
68233: LD_EXP 102
68237: PUSH
68238: LD_VAR 0 5
68242: ARRAY
68243: PUSH
68244: LD_EXP 103
68248: EQUAL
68249: IFFALSE 68253
// break ;
68251: GO 68400
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
68253: LD_ADDR_EXP 105
68257: PUSH
68258: LD_EXP 105
68262: PPUSH
68263: LD_VAR 0 5
68267: PPUSH
68268: LD_EXP 105
68272: PUSH
68273: LD_VAR 0 5
68277: ARRAY
68278: PUSH
68279: LD_INT 1
68281: PLUS
68282: PPUSH
68283: CALL_OW 1
68287: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
68288: LD_ADDR_EXP 102
68292: PUSH
68293: LD_EXP 102
68297: PPUSH
68298: LD_VAR 0 5
68302: PUSH
68303: LD_EXP 102
68307: PUSH
68308: LD_VAR 0 5
68312: ARRAY
68313: PUSH
68314: LD_INT 1
68316: PLUS
68317: PUSH
68318: EMPTY
68319: LIST
68320: LIST
68321: PPUSH
68322: LD_VAR 0 2
68326: PUSH
68327: LD_VAR 0 4
68331: ARRAY
68332: PUSH
68333: LD_VAR 0 2
68337: PUSH
68338: LD_VAR 0 4
68342: ARRAY
68343: PPUSH
68344: CALL_OW 255
68348: PUSH
68349: EMPTY
68350: LIST
68351: LIST
68352: PPUSH
68353: CALL 7165 0 3
68357: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
68358: LD_VAR 0 2
68362: PUSH
68363: LD_VAR 0 4
68367: ARRAY
68368: PPUSH
68369: LD_VAR 0 1
68373: PPUSH
68374: CALL_OW 255
68378: PPUSH
68379: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
68383: LD_VAR 0 2
68387: PUSH
68388: LD_VAR 0 4
68392: ARRAY
68393: PPUSH
68394: CALL_OW 141
// end ;
68398: GO 68230
68400: POP
68401: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
68402: LD_VAR 0 1
68406: PPUSH
68407: LD_EXP 102
68411: PUSH
68412: LD_VAR 0 5
68416: ARRAY
68417: PUSH
68418: LD_INT 0
68420: PLUS
68421: PPUSH
68422: CALL_OW 505
// end ;
68426: LD_VAR 0 3
68430: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
68431: LD_INT 0
68433: PPUSH
68434: PPUSH
68435: PPUSH
68436: PPUSH
// if not hack in hackTanks then
68437: LD_VAR 0 1
68441: PUSH
68442: LD_EXP 101
68446: IN
68447: NOT
68448: IFFALSE 68452
// exit ;
68450: GO 68692
// index := GetElementIndex ( hackTanks , hack ) ;
68452: LD_ADDR_VAR 0 4
68456: PUSH
68457: LD_EXP 101
68461: PPUSH
68462: LD_VAR 0 1
68466: PPUSH
68467: CALL 6950 0 2
68471: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
68472: LD_ADDR_VAR 0 3
68476: PUSH
68477: DOUBLE
68478: LD_EXP 102
68482: PUSH
68483: LD_VAR 0 4
68487: ARRAY
68488: INC
68489: ST_TO_ADDR
68490: LD_INT 1
68492: PUSH
68493: FOR_DOWNTO
68494: IFFALSE 68666
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
68496: LD_ADDR_VAR 0 5
68500: PUSH
68501: LD_EXP 102
68505: PUSH
68506: LD_VAR 0 4
68510: ARRAY
68511: PUSH
68512: LD_VAR 0 3
68516: ARRAY
68517: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
68518: LD_VAR 0 5
68522: PUSH
68523: LD_INT 1
68525: ARRAY
68526: PPUSH
68527: CALL_OW 302
68531: NOT
68532: PUSH
68533: LD_VAR 0 5
68537: PUSH
68538: LD_INT 1
68540: ARRAY
68541: PPUSH
68542: CALL_OW 255
68546: PUSH
68547: LD_VAR 0 1
68551: PPUSH
68552: CALL_OW 255
68556: NONEQUAL
68557: OR
68558: IFFALSE 68664
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
68560: LD_VAR 0 5
68564: PUSH
68565: LD_INT 1
68567: ARRAY
68568: PPUSH
68569: CALL_OW 305
68573: PUSH
68574: LD_VAR 0 5
68578: PUSH
68579: LD_INT 1
68581: ARRAY
68582: PPUSH
68583: CALL_OW 255
68587: PUSH
68588: LD_VAR 0 1
68592: PPUSH
68593: CALL_OW 255
68597: EQUAL
68598: AND
68599: IFFALSE 68623
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
68601: LD_VAR 0 5
68605: PUSH
68606: LD_INT 1
68608: ARRAY
68609: PPUSH
68610: LD_VAR 0 5
68614: PUSH
68615: LD_INT 2
68617: ARRAY
68618: PPUSH
68619: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
68623: LD_ADDR_EXP 102
68627: PUSH
68628: LD_EXP 102
68632: PPUSH
68633: LD_VAR 0 4
68637: PPUSH
68638: LD_EXP 102
68642: PUSH
68643: LD_VAR 0 4
68647: ARRAY
68648: PPUSH
68649: LD_VAR 0 3
68653: PPUSH
68654: CALL_OW 3
68658: PPUSH
68659: CALL_OW 1
68663: ST_TO_ADDR
// end ; end ;
68664: GO 68493
68666: POP
68667: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
68668: LD_VAR 0 1
68672: PPUSH
68673: LD_EXP 102
68677: PUSH
68678: LD_VAR 0 4
68682: ARRAY
68683: PUSH
68684: LD_INT 0
68686: PLUS
68687: PPUSH
68688: CALL_OW 505
// end ;
68692: LD_VAR 0 2
68696: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
68697: LD_INT 0
68699: PPUSH
68700: PPUSH
68701: PPUSH
68702: PPUSH
// if not hack in hackTanks then
68703: LD_VAR 0 1
68707: PUSH
68708: LD_EXP 101
68712: IN
68713: NOT
68714: IFFALSE 68718
// exit ;
68716: GO 68803
// index := GetElementIndex ( hackTanks , hack ) ;
68718: LD_ADDR_VAR 0 5
68722: PUSH
68723: LD_EXP 101
68727: PPUSH
68728: LD_VAR 0 1
68732: PPUSH
68733: CALL 6950 0 2
68737: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
68738: LD_ADDR_VAR 0 4
68742: PUSH
68743: DOUBLE
68744: LD_INT 1
68746: DEC
68747: ST_TO_ADDR
68748: LD_EXP 102
68752: PUSH
68753: LD_VAR 0 5
68757: ARRAY
68758: PUSH
68759: FOR_TO
68760: IFFALSE 68801
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
68762: LD_EXP 102
68766: PUSH
68767: LD_VAR 0 5
68771: ARRAY
68772: PUSH
68773: LD_VAR 0 4
68777: ARRAY
68778: PUSH
68779: LD_INT 1
68781: ARRAY
68782: PUSH
68783: LD_VAR 0 2
68787: EQUAL
68788: IFFALSE 68799
// KillUnit ( vehicle ) ;
68790: LD_VAR 0 2
68794: PPUSH
68795: CALL_OW 66
68799: GO 68759
68801: POP
68802: POP
// end ;
68803: LD_VAR 0 3
68807: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
68808: LD_EXP 106
68812: NOT
68813: IFFALSE 68848
68815: GO 68817
68817: DISABLE
// begin initMiner := true ;
68818: LD_ADDR_EXP 106
68822: PUSH
68823: LD_INT 1
68825: ST_TO_ADDR
// minersList := [ ] ;
68826: LD_ADDR_EXP 107
68830: PUSH
68831: EMPTY
68832: ST_TO_ADDR
// minerMinesList := [ ] ;
68833: LD_ADDR_EXP 108
68837: PUSH
68838: EMPTY
68839: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
68840: LD_ADDR_EXP 109
68844: PUSH
68845: LD_INT 5
68847: ST_TO_ADDR
// end ;
68848: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
68849: LD_EXP 106
68853: PUSH
68854: LD_INT 34
68856: PUSH
68857: LD_INT 81
68859: PUSH
68860: EMPTY
68861: LIST
68862: LIST
68863: PPUSH
68864: CALL_OW 69
68868: AND
68869: IFFALSE 69330
68871: GO 68873
68873: DISABLE
68874: LD_INT 0
68876: PPUSH
68877: PPUSH
68878: PPUSH
68879: PPUSH
// begin enable ;
68880: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
68881: LD_ADDR_VAR 0 1
68885: PUSH
68886: LD_INT 34
68888: PUSH
68889: LD_INT 81
68891: PUSH
68892: EMPTY
68893: LIST
68894: LIST
68895: PPUSH
68896: CALL_OW 69
68900: PUSH
68901: FOR_IN
68902: IFFALSE 68974
// begin if not i in minersList then
68904: LD_VAR 0 1
68908: PUSH
68909: LD_EXP 107
68913: IN
68914: NOT
68915: IFFALSE 68972
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
68917: LD_ADDR_EXP 107
68921: PUSH
68922: LD_EXP 107
68926: PPUSH
68927: LD_EXP 107
68931: PUSH
68932: LD_INT 1
68934: PLUS
68935: PPUSH
68936: LD_VAR 0 1
68940: PPUSH
68941: CALL_OW 1
68945: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
68946: LD_ADDR_EXP 108
68950: PUSH
68951: LD_EXP 108
68955: PPUSH
68956: LD_EXP 108
68960: PUSH
68961: LD_INT 1
68963: PLUS
68964: PPUSH
68965: EMPTY
68966: PPUSH
68967: CALL_OW 1
68971: ST_TO_ADDR
// end end ;
68972: GO 68901
68974: POP
68975: POP
// for i := minerMinesList downto 1 do
68976: LD_ADDR_VAR 0 1
68980: PUSH
68981: DOUBLE
68982: LD_EXP 108
68986: INC
68987: ST_TO_ADDR
68988: LD_INT 1
68990: PUSH
68991: FOR_DOWNTO
68992: IFFALSE 69328
// begin if IsLive ( minersList [ i ] ) then
68994: LD_EXP 107
68998: PUSH
68999: LD_VAR 0 1
69003: ARRAY
69004: PPUSH
69005: CALL_OW 300
69009: IFFALSE 69037
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
69011: LD_EXP 107
69015: PUSH
69016: LD_VAR 0 1
69020: ARRAY
69021: PPUSH
69022: LD_EXP 108
69026: PUSH
69027: LD_VAR 0 1
69031: ARRAY
69032: PPUSH
69033: CALL_OW 505
// if not minerMinesList [ i ] then
69037: LD_EXP 108
69041: PUSH
69042: LD_VAR 0 1
69046: ARRAY
69047: NOT
69048: IFFALSE 69052
// continue ;
69050: GO 68991
// for j := minerMinesList [ i ] downto 1 do
69052: LD_ADDR_VAR 0 2
69056: PUSH
69057: DOUBLE
69058: LD_EXP 108
69062: PUSH
69063: LD_VAR 0 1
69067: ARRAY
69068: INC
69069: ST_TO_ADDR
69070: LD_INT 1
69072: PUSH
69073: FOR_DOWNTO
69074: IFFALSE 69324
// begin side := GetSide ( minersList [ i ] ) ;
69076: LD_ADDR_VAR 0 3
69080: PUSH
69081: LD_EXP 107
69085: PUSH
69086: LD_VAR 0 1
69090: ARRAY
69091: PPUSH
69092: CALL_OW 255
69096: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
69097: LD_ADDR_VAR 0 4
69101: PUSH
69102: LD_EXP 108
69106: PUSH
69107: LD_VAR 0 1
69111: ARRAY
69112: PUSH
69113: LD_VAR 0 2
69117: ARRAY
69118: PUSH
69119: LD_INT 1
69121: ARRAY
69122: PPUSH
69123: LD_EXP 108
69127: PUSH
69128: LD_VAR 0 1
69132: ARRAY
69133: PUSH
69134: LD_VAR 0 2
69138: ARRAY
69139: PUSH
69140: LD_INT 2
69142: ARRAY
69143: PPUSH
69144: CALL_OW 428
69148: ST_TO_ADDR
// if not tmp then
69149: LD_VAR 0 4
69153: NOT
69154: IFFALSE 69158
// continue ;
69156: GO 69073
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
69158: LD_VAR 0 4
69162: PUSH
69163: LD_INT 81
69165: PUSH
69166: LD_VAR 0 3
69170: PUSH
69171: EMPTY
69172: LIST
69173: LIST
69174: PPUSH
69175: CALL_OW 69
69179: IN
69180: PUSH
69181: LD_EXP 108
69185: PUSH
69186: LD_VAR 0 1
69190: ARRAY
69191: PUSH
69192: LD_VAR 0 2
69196: ARRAY
69197: PUSH
69198: LD_INT 1
69200: ARRAY
69201: PPUSH
69202: LD_EXP 108
69206: PUSH
69207: LD_VAR 0 1
69211: ARRAY
69212: PUSH
69213: LD_VAR 0 2
69217: ARRAY
69218: PUSH
69219: LD_INT 2
69221: ARRAY
69222: PPUSH
69223: CALL_OW 458
69227: AND
69228: IFFALSE 69322
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
69230: LD_EXP 108
69234: PUSH
69235: LD_VAR 0 1
69239: ARRAY
69240: PUSH
69241: LD_VAR 0 2
69245: ARRAY
69246: PUSH
69247: LD_INT 1
69249: ARRAY
69250: PPUSH
69251: LD_EXP 108
69255: PUSH
69256: LD_VAR 0 1
69260: ARRAY
69261: PUSH
69262: LD_VAR 0 2
69266: ARRAY
69267: PUSH
69268: LD_INT 2
69270: ARRAY
69271: PPUSH
69272: LD_VAR 0 3
69276: PPUSH
69277: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
69281: LD_ADDR_EXP 108
69285: PUSH
69286: LD_EXP 108
69290: PPUSH
69291: LD_VAR 0 1
69295: PPUSH
69296: LD_EXP 108
69300: PUSH
69301: LD_VAR 0 1
69305: ARRAY
69306: PPUSH
69307: LD_VAR 0 2
69311: PPUSH
69312: CALL_OW 3
69316: PPUSH
69317: CALL_OW 1
69321: ST_TO_ADDR
// end ; end ;
69322: GO 69073
69324: POP
69325: POP
// end ;
69326: GO 68991
69328: POP
69329: POP
// end ;
69330: PPOPN 4
69332: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
69333: LD_INT 0
69335: PPUSH
69336: PPUSH
// result := false ;
69337: LD_ADDR_VAR 0 4
69341: PUSH
69342: LD_INT 0
69344: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
69345: LD_VAR 0 1
69349: PPUSH
69350: CALL_OW 264
69354: PUSH
69355: LD_INT 81
69357: EQUAL
69358: NOT
69359: IFFALSE 69363
// exit ;
69361: GO 69603
// index := GetElementIndex ( minersList , unit ) ;
69363: LD_ADDR_VAR 0 5
69367: PUSH
69368: LD_EXP 107
69372: PPUSH
69373: LD_VAR 0 1
69377: PPUSH
69378: CALL 6950 0 2
69382: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
69383: LD_EXP 108
69387: PUSH
69388: LD_VAR 0 5
69392: ARRAY
69393: PUSH
69394: LD_EXP 109
69398: GREATEREQUAL
69399: IFFALSE 69403
// exit ;
69401: GO 69603
// ComMoveXY ( unit , x , y ) ;
69403: LD_VAR 0 1
69407: PPUSH
69408: LD_VAR 0 2
69412: PPUSH
69413: LD_VAR 0 3
69417: PPUSH
69418: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
69422: LD_INT 35
69424: PPUSH
69425: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
69429: LD_VAR 0 1
69433: PPUSH
69434: LD_VAR 0 2
69438: PPUSH
69439: LD_VAR 0 3
69443: PPUSH
69444: CALL 38702 0 3
69448: NOT
69449: PUSH
69450: LD_VAR 0 1
69454: PPUSH
69455: CALL_OW 314
69459: AND
69460: IFFALSE 69464
// exit ;
69462: GO 69603
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
69464: LD_VAR 0 2
69468: PPUSH
69469: LD_VAR 0 3
69473: PPUSH
69474: CALL_OW 428
69478: PUSH
69479: LD_VAR 0 1
69483: EQUAL
69484: PUSH
69485: LD_VAR 0 1
69489: PPUSH
69490: CALL_OW 314
69494: NOT
69495: AND
69496: IFFALSE 69422
// PlaySoundXY ( x , y , PlantMine ) ;
69498: LD_VAR 0 2
69502: PPUSH
69503: LD_VAR 0 3
69507: PPUSH
69508: LD_STRING PlantMine
69510: PPUSH
69511: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
69515: LD_VAR 0 2
69519: PPUSH
69520: LD_VAR 0 3
69524: PPUSH
69525: LD_VAR 0 1
69529: PPUSH
69530: CALL_OW 255
69534: PPUSH
69535: LD_INT 0
69537: PPUSH
69538: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
69542: LD_ADDR_EXP 108
69546: PUSH
69547: LD_EXP 108
69551: PPUSH
69552: LD_VAR 0 5
69556: PUSH
69557: LD_EXP 108
69561: PUSH
69562: LD_VAR 0 5
69566: ARRAY
69567: PUSH
69568: LD_INT 1
69570: PLUS
69571: PUSH
69572: EMPTY
69573: LIST
69574: LIST
69575: PPUSH
69576: LD_VAR 0 2
69580: PUSH
69581: LD_VAR 0 3
69585: PUSH
69586: EMPTY
69587: LIST
69588: LIST
69589: PPUSH
69590: CALL 7165 0 3
69594: ST_TO_ADDR
// result := true ;
69595: LD_ADDR_VAR 0 4
69599: PUSH
69600: LD_INT 1
69602: ST_TO_ADDR
// end ;
69603: LD_VAR 0 4
69607: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
69608: LD_INT 0
69610: PPUSH
69611: PPUSH
69612: PPUSH
// if not unit in minersList then
69613: LD_VAR 0 1
69617: PUSH
69618: LD_EXP 107
69622: IN
69623: NOT
69624: IFFALSE 69628
// exit ;
69626: GO 70020
// index := GetElementIndex ( minersList , unit ) ;
69628: LD_ADDR_VAR 0 6
69632: PUSH
69633: LD_EXP 107
69637: PPUSH
69638: LD_VAR 0 1
69642: PPUSH
69643: CALL 6950 0 2
69647: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
69648: LD_ADDR_VAR 0 5
69652: PUSH
69653: DOUBLE
69654: LD_EXP 108
69658: PUSH
69659: LD_VAR 0 6
69663: ARRAY
69664: INC
69665: ST_TO_ADDR
69666: LD_INT 1
69668: PUSH
69669: FOR_DOWNTO
69670: IFFALSE 69831
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
69672: LD_EXP 108
69676: PUSH
69677: LD_VAR 0 6
69681: ARRAY
69682: PUSH
69683: LD_VAR 0 5
69687: ARRAY
69688: PUSH
69689: LD_INT 1
69691: ARRAY
69692: PUSH
69693: LD_VAR 0 2
69697: EQUAL
69698: PUSH
69699: LD_EXP 108
69703: PUSH
69704: LD_VAR 0 6
69708: ARRAY
69709: PUSH
69710: LD_VAR 0 5
69714: ARRAY
69715: PUSH
69716: LD_INT 2
69718: ARRAY
69719: PUSH
69720: LD_VAR 0 3
69724: EQUAL
69725: AND
69726: IFFALSE 69829
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
69728: LD_EXP 108
69732: PUSH
69733: LD_VAR 0 6
69737: ARRAY
69738: PUSH
69739: LD_VAR 0 5
69743: ARRAY
69744: PUSH
69745: LD_INT 1
69747: ARRAY
69748: PPUSH
69749: LD_EXP 108
69753: PUSH
69754: LD_VAR 0 6
69758: ARRAY
69759: PUSH
69760: LD_VAR 0 5
69764: ARRAY
69765: PUSH
69766: LD_INT 2
69768: ARRAY
69769: PPUSH
69770: LD_VAR 0 1
69774: PPUSH
69775: CALL_OW 255
69779: PPUSH
69780: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
69784: LD_ADDR_EXP 108
69788: PUSH
69789: LD_EXP 108
69793: PPUSH
69794: LD_VAR 0 6
69798: PPUSH
69799: LD_EXP 108
69803: PUSH
69804: LD_VAR 0 6
69808: ARRAY
69809: PPUSH
69810: LD_VAR 0 5
69814: PPUSH
69815: CALL_OW 3
69819: PPUSH
69820: CALL_OW 1
69824: ST_TO_ADDR
// exit ;
69825: POP
69826: POP
69827: GO 70020
// end ; end ;
69829: GO 69669
69831: POP
69832: POP
// for i := minerMinesList [ index ] downto 1 do
69833: LD_ADDR_VAR 0 5
69837: PUSH
69838: DOUBLE
69839: LD_EXP 108
69843: PUSH
69844: LD_VAR 0 6
69848: ARRAY
69849: INC
69850: ST_TO_ADDR
69851: LD_INT 1
69853: PUSH
69854: FOR_DOWNTO
69855: IFFALSE 70018
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
69857: LD_EXP 108
69861: PUSH
69862: LD_VAR 0 6
69866: ARRAY
69867: PUSH
69868: LD_VAR 0 5
69872: ARRAY
69873: PUSH
69874: LD_INT 1
69876: ARRAY
69877: PPUSH
69878: LD_EXP 108
69882: PUSH
69883: LD_VAR 0 6
69887: ARRAY
69888: PUSH
69889: LD_VAR 0 5
69893: ARRAY
69894: PUSH
69895: LD_INT 2
69897: ARRAY
69898: PPUSH
69899: LD_VAR 0 2
69903: PPUSH
69904: LD_VAR 0 3
69908: PPUSH
69909: CALL_OW 298
69913: PUSH
69914: LD_INT 6
69916: LESS
69917: IFFALSE 70016
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
69919: LD_EXP 108
69923: PUSH
69924: LD_VAR 0 6
69928: ARRAY
69929: PUSH
69930: LD_VAR 0 5
69934: ARRAY
69935: PUSH
69936: LD_INT 1
69938: ARRAY
69939: PPUSH
69940: LD_EXP 108
69944: PUSH
69945: LD_VAR 0 6
69949: ARRAY
69950: PUSH
69951: LD_VAR 0 5
69955: ARRAY
69956: PUSH
69957: LD_INT 2
69959: ARRAY
69960: PPUSH
69961: LD_VAR 0 1
69965: PPUSH
69966: CALL_OW 255
69970: PPUSH
69971: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
69975: LD_ADDR_EXP 108
69979: PUSH
69980: LD_EXP 108
69984: PPUSH
69985: LD_VAR 0 6
69989: PPUSH
69990: LD_EXP 108
69994: PUSH
69995: LD_VAR 0 6
69999: ARRAY
70000: PPUSH
70001: LD_VAR 0 5
70005: PPUSH
70006: CALL_OW 3
70010: PPUSH
70011: CALL_OW 1
70015: ST_TO_ADDR
// end ; end ;
70016: GO 69854
70018: POP
70019: POP
// end ;
70020: LD_VAR 0 4
70024: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
70025: LD_INT 0
70027: PPUSH
70028: PPUSH
70029: PPUSH
70030: PPUSH
70031: PPUSH
70032: PPUSH
70033: PPUSH
70034: PPUSH
70035: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
70036: LD_VAR 0 1
70040: PPUSH
70041: CALL_OW 264
70045: PUSH
70046: LD_INT 81
70048: EQUAL
70049: NOT
70050: PUSH
70051: LD_VAR 0 1
70055: PUSH
70056: LD_EXP 107
70060: IN
70061: NOT
70062: OR
70063: IFFALSE 70067
// exit ;
70065: GO 70389
// index := GetElementIndex ( minersList , unit ) ;
70067: LD_ADDR_VAR 0 6
70071: PUSH
70072: LD_EXP 107
70076: PPUSH
70077: LD_VAR 0 1
70081: PPUSH
70082: CALL 6950 0 2
70086: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
70087: LD_ADDR_VAR 0 8
70091: PUSH
70092: LD_EXP 109
70096: PUSH
70097: LD_EXP 108
70101: PUSH
70102: LD_VAR 0 6
70106: ARRAY
70107: MINUS
70108: ST_TO_ADDR
// if not minesFreeAmount then
70109: LD_VAR 0 8
70113: NOT
70114: IFFALSE 70118
// exit ;
70116: GO 70389
// tmp := [ ] ;
70118: LD_ADDR_VAR 0 7
70122: PUSH
70123: EMPTY
70124: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
70125: LD_ADDR_VAR 0 5
70129: PUSH
70130: DOUBLE
70131: LD_INT 1
70133: DEC
70134: ST_TO_ADDR
70135: LD_VAR 0 8
70139: PUSH
70140: FOR_TO
70141: IFFALSE 70336
// begin _d := rand ( 0 , 5 ) ;
70143: LD_ADDR_VAR 0 11
70147: PUSH
70148: LD_INT 0
70150: PPUSH
70151: LD_INT 5
70153: PPUSH
70154: CALL_OW 12
70158: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
70159: LD_ADDR_VAR 0 12
70163: PUSH
70164: LD_INT 2
70166: PPUSH
70167: LD_INT 6
70169: PPUSH
70170: CALL_OW 12
70174: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
70175: LD_ADDR_VAR 0 9
70179: PUSH
70180: LD_VAR 0 2
70184: PPUSH
70185: LD_VAR 0 11
70189: PPUSH
70190: LD_VAR 0 12
70194: PPUSH
70195: CALL_OW 272
70199: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
70200: LD_ADDR_VAR 0 10
70204: PUSH
70205: LD_VAR 0 3
70209: PPUSH
70210: LD_VAR 0 11
70214: PPUSH
70215: LD_VAR 0 12
70219: PPUSH
70220: CALL_OW 273
70224: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
70225: LD_VAR 0 9
70229: PPUSH
70230: LD_VAR 0 10
70234: PPUSH
70235: CALL_OW 488
70239: PUSH
70240: LD_VAR 0 9
70244: PUSH
70245: LD_VAR 0 10
70249: PUSH
70250: EMPTY
70251: LIST
70252: LIST
70253: PUSH
70254: LD_VAR 0 7
70258: IN
70259: NOT
70260: AND
70261: PUSH
70262: LD_VAR 0 9
70266: PPUSH
70267: LD_VAR 0 10
70271: PPUSH
70272: CALL_OW 458
70276: NOT
70277: AND
70278: IFFALSE 70320
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
70280: LD_ADDR_VAR 0 7
70284: PUSH
70285: LD_VAR 0 7
70289: PPUSH
70290: LD_VAR 0 7
70294: PUSH
70295: LD_INT 1
70297: PLUS
70298: PPUSH
70299: LD_VAR 0 9
70303: PUSH
70304: LD_VAR 0 10
70308: PUSH
70309: EMPTY
70310: LIST
70311: LIST
70312: PPUSH
70313: CALL_OW 1
70317: ST_TO_ADDR
70318: GO 70334
// i := i - 1 ;
70320: LD_ADDR_VAR 0 5
70324: PUSH
70325: LD_VAR 0 5
70329: PUSH
70330: LD_INT 1
70332: MINUS
70333: ST_TO_ADDR
// end ;
70334: GO 70140
70336: POP
70337: POP
// for i in tmp do
70338: LD_ADDR_VAR 0 5
70342: PUSH
70343: LD_VAR 0 7
70347: PUSH
70348: FOR_IN
70349: IFFALSE 70387
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
70351: LD_VAR 0 1
70355: PPUSH
70356: LD_VAR 0 5
70360: PUSH
70361: LD_INT 1
70363: ARRAY
70364: PPUSH
70365: LD_VAR 0 5
70369: PUSH
70370: LD_INT 2
70372: ARRAY
70373: PPUSH
70374: CALL 69333 0 3
70378: NOT
70379: IFFALSE 70385
// exit ;
70381: POP
70382: POP
70383: GO 70389
70385: GO 70348
70387: POP
70388: POP
// end ;
70389: LD_VAR 0 4
70393: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
70394: LD_INT 0
70396: PPUSH
70397: PPUSH
70398: PPUSH
70399: PPUSH
70400: PPUSH
70401: PPUSH
70402: PPUSH
// if not GetClass ( unit ) = class_sniper then
70403: LD_VAR 0 1
70407: PPUSH
70408: CALL_OW 257
70412: PUSH
70413: LD_INT 5
70415: EQUAL
70416: NOT
70417: IFFALSE 70421
// exit ;
70419: GO 70809
// dist := 8 ;
70421: LD_ADDR_VAR 0 5
70425: PUSH
70426: LD_INT 8
70428: ST_TO_ADDR
// viewRange := 12 ;
70429: LD_ADDR_VAR 0 7
70433: PUSH
70434: LD_INT 12
70436: ST_TO_ADDR
// side := GetSide ( unit ) ;
70437: LD_ADDR_VAR 0 6
70441: PUSH
70442: LD_VAR 0 1
70446: PPUSH
70447: CALL_OW 255
70451: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
70452: LD_INT 61
70454: PPUSH
70455: LD_VAR 0 6
70459: PPUSH
70460: CALL_OW 321
70464: PUSH
70465: LD_INT 2
70467: EQUAL
70468: IFFALSE 70478
// viewRange := 16 ;
70470: LD_ADDR_VAR 0 7
70474: PUSH
70475: LD_INT 16
70477: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
70478: LD_VAR 0 1
70482: PPUSH
70483: LD_VAR 0 2
70487: PPUSH
70488: LD_VAR 0 3
70492: PPUSH
70493: CALL_OW 297
70497: PUSH
70498: LD_VAR 0 5
70502: GREATER
70503: IFFALSE 70582
// begin ComMoveXY ( unit , x , y ) ;
70505: LD_VAR 0 1
70509: PPUSH
70510: LD_VAR 0 2
70514: PPUSH
70515: LD_VAR 0 3
70519: PPUSH
70520: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
70524: LD_INT 35
70526: PPUSH
70527: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
70531: LD_VAR 0 1
70535: PPUSH
70536: LD_VAR 0 2
70540: PPUSH
70541: LD_VAR 0 3
70545: PPUSH
70546: CALL 38702 0 3
70550: NOT
70551: IFFALSE 70555
// exit ;
70553: GO 70809
// until GetDistUnitXY ( unit , x , y ) < dist ;
70555: LD_VAR 0 1
70559: PPUSH
70560: LD_VAR 0 2
70564: PPUSH
70565: LD_VAR 0 3
70569: PPUSH
70570: CALL_OW 297
70574: PUSH
70575: LD_VAR 0 5
70579: LESS
70580: IFFALSE 70524
// end ; ComTurnXY ( unit , x , y ) ;
70582: LD_VAR 0 1
70586: PPUSH
70587: LD_VAR 0 2
70591: PPUSH
70592: LD_VAR 0 3
70596: PPUSH
70597: CALL_OW 118
// wait ( 5 ) ;
70601: LD_INT 5
70603: PPUSH
70604: CALL_OW 67
// _d := GetDir ( unit ) ;
70608: LD_ADDR_VAR 0 10
70612: PUSH
70613: LD_VAR 0 1
70617: PPUSH
70618: CALL_OW 254
70622: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
70623: LD_ADDR_VAR 0 8
70627: PUSH
70628: LD_VAR 0 1
70632: PPUSH
70633: CALL_OW 250
70637: PPUSH
70638: LD_VAR 0 10
70642: PPUSH
70643: LD_VAR 0 5
70647: PPUSH
70648: CALL_OW 272
70652: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
70653: LD_ADDR_VAR 0 9
70657: PUSH
70658: LD_VAR 0 1
70662: PPUSH
70663: CALL_OW 251
70667: PPUSH
70668: LD_VAR 0 10
70672: PPUSH
70673: LD_VAR 0 5
70677: PPUSH
70678: CALL_OW 273
70682: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
70683: LD_VAR 0 8
70687: PPUSH
70688: LD_VAR 0 9
70692: PPUSH
70693: CALL_OW 488
70697: NOT
70698: IFFALSE 70702
// exit ;
70700: GO 70809
// ComAnimCustom ( unit , 1 ) ;
70702: LD_VAR 0 1
70706: PPUSH
70707: LD_INT 1
70709: PPUSH
70710: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
70714: LD_VAR 0 8
70718: PPUSH
70719: LD_VAR 0 9
70723: PPUSH
70724: LD_VAR 0 6
70728: PPUSH
70729: LD_VAR 0 7
70733: PPUSH
70734: CALL_OW 330
// repeat wait ( 1 ) ;
70738: LD_INT 1
70740: PPUSH
70741: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
70745: LD_VAR 0 1
70749: PPUSH
70750: CALL_OW 316
70754: PUSH
70755: LD_VAR 0 1
70759: PPUSH
70760: CALL_OW 314
70764: OR
70765: PUSH
70766: LD_VAR 0 1
70770: PPUSH
70771: CALL_OW 302
70775: NOT
70776: OR
70777: PUSH
70778: LD_VAR 0 1
70782: PPUSH
70783: CALL_OW 301
70787: OR
70788: IFFALSE 70738
// RemoveSeeing ( _x , _y , side ) ;
70790: LD_VAR 0 8
70794: PPUSH
70795: LD_VAR 0 9
70799: PPUSH
70800: LD_VAR 0 6
70804: PPUSH
70805: CALL_OW 331
// end ;
70809: LD_VAR 0 4
70813: RET
