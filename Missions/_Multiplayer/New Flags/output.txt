// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 45302 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 45562 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 2
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 0
  51: PUSH
  52: LD_INT 0
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ ] , [ ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 3 , 6 , 9 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 3
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: EMPTY
 297: PUSH
 298: EMPTY
 299: PUSH
 300: LD_INT 0
 302: PUSH
 303: LD_INT 1
 305: PUSH
 306: EMPTY
 307: LIST
 308: LIST
 309: PUSH
 310: LD_INT 1
 312: NEG
 313: PUSH
 314: LD_INT 350
 316: PUSH
 317: LD_INT 700
 319: PUSH
 320: LD_INT 1400
 322: PUSH
 323: LD_INT 0
 325: PUSH
 326: EMPTY
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: LIST
 332: PUSH
 333: LD_INT 0
 335: PUSH
 336: LD_INT 1
 338: PUSH
 339: EMPTY
 340: LIST
 341: LIST
 342: PUSH
 343: LD_INT 0
 345: PUSH
 346: LD_INT 13650
 348: PUSH
 349: LD_INT 7350
 351: PUSH
 352: EMPTY
 353: LIST
 354: LIST
 355: LIST
 356: PUSH
 357: LD_INT 0
 359: PUSH
 360: LD_INT 3
 362: PUSH
 363: LD_INT 6
 365: PUSH
 366: LD_INT 9
 368: PUSH
 369: EMPTY
 370: LIST
 371: LIST
 372: LIST
 373: LIST
 374: PUSH
 375: EMPTY
 376: PUSH
 377: EMPTY
 378: PUSH
 379: LD_INT 0
 381: PUSH
 382: LD_INT 1
 384: PUSH
 385: LD_INT 31500
 387: PUSH
 388: LD_INT 52500
 390: PUSH
 391: LD_INT 63000
 393: PUSH
 394: LD_INT 94500
 396: PUSH
 397: LD_INT 126000
 399: PUSH
 400: LD_INT 189000
 402: PUSH
 403: LD_INT 210000
 405: PUSH
 406: LD_INT 252000
 408: PUSH
 409: LD_INT 378000
 411: PUSH
 412: EMPTY
 413: LIST
 414: LIST
 415: LIST
 416: LIST
 417: LIST
 418: LIST
 419: LIST
 420: LIST
 421: LIST
 422: LIST
 423: LIST
 424: PUSH
 425: EMPTY
 426: PUSH
 427: EMPTY
 428: PUSH
 429: LD_INT 0
 431: PUSH
 432: LD_INT 6300
 434: PUSH
 435: LD_INT 10500
 437: PUSH
 438: LD_INT 16800
 440: PUSH
 441: LD_INT 21000
 443: PUSH
 444: LD_INT 25200
 446: PUSH
 447: LD_INT 31500
 449: PUSH
 450: LD_INT 42000
 452: PUSH
 453: LD_INT 63000
 455: PUSH
 456: EMPTY
 457: LIST
 458: LIST
 459: LIST
 460: LIST
 461: LIST
 462: LIST
 463: LIST
 464: LIST
 465: LIST
 466: PUSH
 467: EMPTY
 468: LIST
 469: LIST
 470: LIST
 471: LIST
 472: LIST
 473: LIST
 474: LIST
 475: LIST
 476: LIST
 477: LIST
 478: LIST
 479: LIST
 480: LIST
 481: LIST
 482: LIST
 483: LIST
 484: LIST
 485: LIST
 486: LIST
 487: LIST
 488: LIST
 489: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 0 , 0 , 1 , 0 0$20 , 1 , 1 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 3 3$0 ] ;
 490: LD_ADDR_EXP 4
 494: PUSH
 495: LD_INT 2
 497: PUSH
 498: LD_INT 15
 500: PUSH
 501: LD_INT 4
 503: PUSH
 504: LD_INT 100
 506: PUSH
 507: LD_INT 30
 509: PUSH
 510: LD_INT 0
 512: PUSH
 513: EMPTY
 514: LIST
 515: LIST
 516: LIST
 517: PUSH
 518: LD_INT 3
 520: PUSH
 521: LD_INT 1
 523: PUSH
 524: LD_INT 2
 526: PUSH
 527: LD_INT 250
 529: PUSH
 530: LD_INT 0
 532: PUSH
 533: LD_INT 0
 535: PUSH
 536: LD_INT 1
 538: PUSH
 539: LD_INT 700
 541: PUSH
 542: LD_INT 1
 544: PUSH
 545: LD_INT 1
 547: PUSH
 548: LD_INT 3
 550: PUSH
 551: LD_INT 0
 553: PUSH
 554: LD_INT 0
 556: PUSH
 557: LD_INT 31500
 559: PUSH
 560: LD_INT 0
 562: PUSH
 563: LD_INT 0
 565: PUSH
 566: LD_INT 6300
 568: PUSH
 569: EMPTY
 570: LIST
 571: LIST
 572: LIST
 573: LIST
 574: LIST
 575: LIST
 576: LIST
 577: LIST
 578: LIST
 579: LIST
 580: LIST
 581: LIST
 582: LIST
 583: LIST
 584: LIST
 585: LIST
 586: LIST
 587: LIST
 588: LIST
 589: LIST
 590: LIST
 591: ST_TO_ADDR
// mpGameType := GameTypeNormal ;
 592: LD_ADDR_EXP 1
 596: PUSH
 597: LD_INT 1
 599: ST_TO_ADDR
// your_side := 1 ;
 600: LD_ADDR_OWVAR 2
 604: PUSH
 605: LD_INT 1
 607: ST_TO_ADDR
// mpSidePositions := [ 8 , 2 , 3 , 4 , 5 , 6 , 7 , 1 ] ;
 608: LD_ADDR_EXP 5
 612: PUSH
 613: LD_INT 8
 615: PUSH
 616: LD_INT 2
 618: PUSH
 619: LD_INT 3
 621: PUSH
 622: LD_INT 4
 624: PUSH
 625: LD_INT 5
 627: PUSH
 628: LD_INT 6
 630: PUSH
 631: LD_INT 7
 633: PUSH
 634: LD_INT 1
 636: PUSH
 637: EMPTY
 638: LIST
 639: LIST
 640: LIST
 641: LIST
 642: LIST
 643: LIST
 644: LIST
 645: LIST
 646: ST_TO_ADDR
// mpSideTeams := [ 1 , 2 , 2 , 3 , 3 , 4 , 4 , 1 ] ;
 647: LD_ADDR_EXP 6
 651: PUSH
 652: LD_INT 1
 654: PUSH
 655: LD_INT 2
 657: PUSH
 658: LD_INT 2
 660: PUSH
 661: LD_INT 3
 663: PUSH
 664: LD_INT 3
 666: PUSH
 667: LD_INT 4
 669: PUSH
 670: LD_INT 4
 672: PUSH
 673: LD_INT 1
 675: PUSH
 676: EMPTY
 677: LIST
 678: LIST
 679: LIST
 680: LIST
 681: LIST
 682: LIST
 683: LIST
 684: LIST
 685: ST_TO_ADDR
// mpSideNations := [ 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 ] ;
 686: LD_ADDR_EXP 7
 690: PUSH
 691: LD_INT 1
 693: PUSH
 694: LD_INT 2
 696: PUSH
 697: LD_INT 3
 699: PUSH
 700: LD_INT 1
 702: PUSH
 703: LD_INT 2
 705: PUSH
 706: LD_INT 3
 708: PUSH
 709: LD_INT 1
 711: PUSH
 712: LD_INT 2
 714: PUSH
 715: EMPTY
 716: LIST
 717: LIST
 718: LIST
 719: LIST
 720: LIST
 721: LIST
 722: LIST
 723: LIST
 724: ST_TO_ADDR
// mpTeams := [ [ 1 , 8 ] , [ 2 , 3 ] , [ 4 , 5 ] , [ 6 , 7 ] ] ;
 725: LD_ADDR_EXP 8
 729: PUSH
 730: LD_INT 1
 732: PUSH
 733: LD_INT 8
 735: PUSH
 736: EMPTY
 737: LIST
 738: LIST
 739: PUSH
 740: LD_INT 2
 742: PUSH
 743: LD_INT 3
 745: PUSH
 746: EMPTY
 747: LIST
 748: LIST
 749: PUSH
 750: LD_INT 4
 752: PUSH
 753: LD_INT 5
 755: PUSH
 756: EMPTY
 757: LIST
 758: LIST
 759: PUSH
 760: LD_INT 6
 762: PUSH
 763: LD_INT 7
 765: PUSH
 766: EMPTY
 767: LIST
 768: LIST
 769: PUSH
 770: EMPTY
 771: LIST
 772: LIST
 773: LIST
 774: LIST
 775: ST_TO_ADDR
// mpTeamGame := true ;
 776: LD_ADDR_EXP 9
 780: PUSH
 781: LD_INT 1
 783: ST_TO_ADDR
// mpMapSize := [ 160 , 200 ] ;
 784: LD_ADDR_EXP 27
 788: PUSH
 789: LD_INT 160
 791: PUSH
 792: LD_INT 200
 794: PUSH
 795: EMPTY
 796: LIST
 797: LIST
 798: ST_TO_ADDR
// end ;
 799: LD_VAR 0 1
 803: RET
// export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 804: LD_INT 0
 806: PPUSH
 807: PPUSH
 808: PPUSH
 809: PPUSH
 810: PPUSH
 811: PPUSH
 812: PPUSH
// mpBuildUpAreas := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
 813: LD_ADDR_EXP 17
 817: PUSH
 818: LD_INT 9
 820: PUSH
 821: LD_INT 10
 823: PUSH
 824: LD_INT 11
 826: PUSH
 827: LD_INT 12
 829: PUSH
 830: LD_INT 13
 832: PUSH
 833: LD_INT 14
 835: PUSH
 836: LD_INT 15
 838: PUSH
 839: LD_INT 16
 841: PUSH
 842: EMPTY
 843: LIST
 844: LIST
 845: LIST
 846: LIST
 847: LIST
 848: LIST
 849: LIST
 850: LIST
 851: ST_TO_ADDR
// mpMarkedAreas := [ Between1 , Between2 , Between3 , Between4 , Center1 , Center2 ] union mpBuildUpAreas ;
 852: LD_ADDR_EXP 16
 856: PUSH
 857: LD_INT 18
 859: PUSH
 860: LD_INT 19
 862: PUSH
 863: LD_INT 20
 865: PUSH
 866: LD_INT 21
 868: PUSH
 869: LD_INT 22
 871: PUSH
 872: LD_INT 23
 874: PUSH
 875: EMPTY
 876: LIST
 877: LIST
 878: LIST
 879: LIST
 880: LIST
 881: LIST
 882: PUSH
 883: LD_EXP 17
 887: UNION
 888: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 889: LD_VAR 0 1
 893: PUSH
 894: LD_INT 2
 896: EQUAL
 897: IFFALSE 909
// baseLevel := 1 else
 899: LD_ADDR_VAR 0 7
 903: PUSH
 904: LD_INT 1
 906: ST_TO_ADDR
 907: GO 923
// baseLevel := mpGameSettings [ 1 ] ;
 909: LD_ADDR_VAR 0 7
 913: PUSH
 914: LD_EXP 4
 918: PUSH
 919: LD_INT 1
 921: ARRAY
 922: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 923: LD_ADDR_EXP 22
 927: PUSH
 928: LD_EXP 4
 932: PUSH
 933: LD_INT 2
 935: ARRAY
 936: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 937: LD_ADDR_EXP 23
 941: PUSH
 942: LD_EXP 4
 946: PUSH
 947: LD_INT 3
 949: ARRAY
 950: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 951: LD_ADDR_EXP 13
 955: PUSH
 956: LD_EXP 4
 960: PUSH
 961: LD_INT 4
 963: ARRAY
 964: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 965: LD_ADDR_EXP 25
 969: PUSH
 970: LD_EXP 4
 974: PUSH
 975: LD_INT 5
 977: ARRAY
 978: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
 979: LD_ADDR_VAR 0 5
 983: PUSH
 984: LD_EXP 4
 988: PUSH
 989: LD_INT 6
 991: ARRAY
 992: PUSH
 993: LD_INT 0
 995: GREATER
 996: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
 997: LD_ADDR_VAR 0 6
1001: PUSH
1002: LD_EXP 4
1006: PUSH
1007: LD_INT 7
1009: ARRAY
1010: PUSH
1011: LD_INT 0
1013: GREATER
1014: ST_TO_ADDR
// if gameType = GameTypeKing then
1015: LD_VAR 0 1
1019: PUSH
1020: LD_INT 3
1022: EQUAL
1023: IFFALSE 1049
// begin mpKingArea := kingArea ;
1025: LD_ADDR_EXP 31
1029: PUSH
1030: LD_INT 64
1032: ST_TO_ADDR
// mpPoints := mpGameSettings [ 8 ] ;
1033: LD_ADDR_EXP 32
1037: PUSH
1038: LD_EXP 4
1042: PUSH
1043: LD_INT 8
1045: ARRAY
1046: ST_TO_ADDR
// end else
1047: GO 1065
// begin mpKingArea := 0 ;
1049: LD_ADDR_EXP 31
1053: PUSH
1054: LD_INT 0
1056: ST_TO_ADDR
// mpPoints := 0 ;
1057: LD_ADDR_EXP 32
1061: PUSH
1062: LD_INT 0
1064: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1065: LD_ADDR_EXP 14
1069: PUSH
1070: LD_EXP 4
1074: PUSH
1075: LD_INT 11
1077: ARRAY
1078: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1079: LD_ADDR_EXP 20
1083: PUSH
1084: LD_EXP 4
1088: PUSH
1089: LD_INT 12
1091: ARRAY
1092: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1093: LD_ADDR_EXP 24
1097: PUSH
1098: LD_EXP 4
1102: PUSH
1103: LD_INT 13
1105: ARRAY
1106: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1107: LD_ADDR_EXP 30
1111: PUSH
1112: LD_EXP 4
1116: PUSH
1117: LD_INT 14
1119: ARRAY
1120: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1121: LD_ADDR_EXP 28
1125: PUSH
1126: LD_EXP 4
1130: PUSH
1131: LD_INT 15
1133: ARRAY
1134: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1135: LD_ADDR_EXP 26
1139: PUSH
1140: LD_EXP 4
1144: PUSH
1145: LD_INT 18
1147: ARRAY
1148: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1149: LD_ADDR_EXP 18
1153: PUSH
1154: LD_EXP 4
1158: PUSH
1159: LD_INT 21
1161: ARRAY
1162: ST_TO_ADDR
// mpApemansArea := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , Base7ApeArea , Base8ApeArea ] ;
1163: LD_ADDR_EXP 29
1167: PUSH
1168: LD_INT 1
1170: PUSH
1171: LD_INT 2
1173: PUSH
1174: LD_INT 3
1176: PUSH
1177: LD_INT 4
1179: PUSH
1180: LD_INT 5
1182: PUSH
1183: LD_INT 6
1185: PUSH
1186: LD_INT 7
1188: PUSH
1189: LD_INT 8
1191: PUSH
1192: EMPTY
1193: LIST
1194: LIST
1195: LIST
1196: LIST
1197: LIST
1198: LIST
1199: LIST
1200: LIST
1201: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 2 ) , GetBuildingFromArea ( depotArea2 , 5 ) , GetBuildingFromArea ( depotArea3 , 3 ) , GetBuildingFromArea ( depotArea4 , 4 ) , GetBuildingFromArea ( depotArea5 , 5 ) , GetBuildingFromArea ( depotArea6 , 2 ) , GetBuildingFromArea ( depotArea7 , 0 ) , GetBuildingFromArea ( depotArea8 , 1 ) ] ;
1202: LD_ADDR_VAR 0 8
1206: PUSH
1207: LD_INT 40
1209: PPUSH
1210: LD_INT 2
1212: PPUSH
1213: CALL 44757 0 2
1217: PUSH
1218: LD_INT 41
1220: PPUSH
1221: LD_INT 5
1223: PPUSH
1224: CALL 44757 0 2
1228: PUSH
1229: LD_INT 42
1231: PPUSH
1232: LD_INT 3
1234: PPUSH
1235: CALL 44757 0 2
1239: PUSH
1240: LD_INT 43
1242: PPUSH
1243: LD_INT 4
1245: PPUSH
1246: CALL 44757 0 2
1250: PUSH
1251: LD_INT 44
1253: PPUSH
1254: LD_INT 5
1256: PPUSH
1257: CALL 44757 0 2
1261: PUSH
1262: LD_INT 45
1264: PPUSH
1265: LD_INT 2
1267: PPUSH
1268: CALL 44757 0 2
1272: PUSH
1273: LD_INT 46
1275: PPUSH
1276: LD_INT 0
1278: PPUSH
1279: CALL 44757 0 2
1283: PUSH
1284: LD_INT 47
1286: PPUSH
1287: LD_INT 1
1289: PPUSH
1290: CALL 44757 0 2
1294: PUSH
1295: EMPTY
1296: LIST
1297: LIST
1298: LIST
1299: LIST
1300: LIST
1301: LIST
1302: LIST
1303: LIST
1304: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1305: LD_ADDR_VAR 0 3
1309: PUSH
1310: DOUBLE
1311: LD_INT 1
1313: DEC
1314: ST_TO_ADDR
1315: LD_VAR 0 8
1319: PPUSH
1320: CALL 4629 0 1
1324: PUSH
1325: FOR_TO
1326: IFFALSE 1430
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1328: LD_ADDR_EXP 19
1332: PUSH
1333: LD_EXP 19
1337: PPUSH
1338: LD_VAR 0 3
1342: PPUSH
1343: LD_VAR 0 8
1347: PUSH
1348: LD_VAR 0 3
1352: ARRAY
1353: PUSH
1354: LD_INT 1
1356: ARRAY
1357: PPUSH
1358: LD_VAR 0 8
1362: PUSH
1363: LD_VAR 0 3
1367: ARRAY
1368: PUSH
1369: LD_INT 3
1371: ARRAY
1372: PPUSH
1373: LD_INT 10
1375: PPUSH
1376: CALL_OW 272
1380: PUSH
1381: LD_VAR 0 8
1385: PUSH
1386: LD_VAR 0 3
1390: ARRAY
1391: PUSH
1392: LD_INT 2
1394: ARRAY
1395: PPUSH
1396: LD_VAR 0 8
1400: PUSH
1401: LD_VAR 0 3
1405: ARRAY
1406: PUSH
1407: LD_INT 3
1409: ARRAY
1410: PPUSH
1411: LD_INT 10
1413: PPUSH
1414: CALL_OW 273
1418: PUSH
1419: EMPTY
1420: LIST
1421: LIST
1422: PPUSH
1423: CALL_OW 1
1427: ST_TO_ADDR
1428: GO 1325
1430: POP
1431: POP
// if hasOil then
1432: LD_VAR 0 5
1436: IFFALSE 1575
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1438: LD_ADDR_VAR 0 4
1442: PUSH
1443: LD_EXP 4
1447: PUSH
1448: LD_INT 6
1450: ARRAY
1451: PUSH
1452: LD_INT 2
1454: EQUAL
1455: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) , GetSourcesFromArea ( oilArea7 , all ) , GetSourcesFromArea ( oilArea8 , all ) ] ;
1456: LD_ADDR_EXP 10
1460: PUSH
1461: LD_INT 24
1463: PPUSH
1464: LD_VAR 0 4
1468: PPUSH
1469: CALL 44590 0 2
1473: PUSH
1474: LD_INT 25
1476: PPUSH
1477: LD_VAR 0 4
1481: PPUSH
1482: CALL 44590 0 2
1486: PUSH
1487: LD_INT 26
1489: PPUSH
1490: LD_VAR 0 4
1494: PPUSH
1495: CALL 44590 0 2
1499: PUSH
1500: LD_INT 27
1502: PPUSH
1503: LD_VAR 0 4
1507: PPUSH
1508: CALL 44590 0 2
1512: PUSH
1513: LD_INT 28
1515: PPUSH
1516: LD_VAR 0 4
1520: PPUSH
1521: CALL 44590 0 2
1525: PUSH
1526: LD_INT 29
1528: PPUSH
1529: LD_VAR 0 4
1533: PPUSH
1534: CALL 44590 0 2
1538: PUSH
1539: LD_INT 30
1541: PPUSH
1542: LD_VAR 0 4
1546: PPUSH
1547: CALL 44590 0 2
1551: PUSH
1552: LD_INT 31
1554: PPUSH
1555: LD_VAR 0 4
1559: PPUSH
1560: CALL 44590 0 2
1564: PUSH
1565: EMPTY
1566: LIST
1567: LIST
1568: LIST
1569: LIST
1570: LIST
1571: LIST
1572: LIST
1573: LIST
1574: ST_TO_ADDR
// end ; if hasSib then
1575: LD_VAR 0 6
1579: IFFALSE 1718
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1581: LD_ADDR_VAR 0 4
1585: PUSH
1586: LD_EXP 4
1590: PUSH
1591: LD_INT 7
1593: ARRAY
1594: PUSH
1595: LD_INT 2
1597: EQUAL
1598: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) , GetSourcesFromArea ( sibArea7 , all ) , GetSourcesFromArea ( sibArea8 , all ) ] ;
1599: LD_ADDR_EXP 11
1603: PUSH
1604: LD_INT 32
1606: PPUSH
1607: LD_VAR 0 4
1611: PPUSH
1612: CALL 44590 0 2
1616: PUSH
1617: LD_INT 33
1619: PPUSH
1620: LD_VAR 0 4
1624: PPUSH
1625: CALL 44590 0 2
1629: PUSH
1630: LD_INT 34
1632: PPUSH
1633: LD_VAR 0 4
1637: PPUSH
1638: CALL 44590 0 2
1642: PUSH
1643: LD_INT 35
1645: PPUSH
1646: LD_VAR 0 4
1650: PPUSH
1651: CALL 44590 0 2
1655: PUSH
1656: LD_INT 36
1658: PPUSH
1659: LD_VAR 0 4
1663: PPUSH
1664: CALL 44590 0 2
1668: PUSH
1669: LD_INT 37
1671: PPUSH
1672: LD_VAR 0 4
1676: PPUSH
1677: CALL 44590 0 2
1681: PUSH
1682: LD_INT 38
1684: PPUSH
1685: LD_VAR 0 4
1689: PPUSH
1690: CALL 44590 0 2
1694: PUSH
1695: LD_INT 39
1697: PPUSH
1698: LD_VAR 0 4
1702: PPUSH
1703: CALL 44590 0 2
1707: PUSH
1708: EMPTY
1709: LIST
1710: LIST
1711: LIST
1712: LIST
1713: LIST
1714: LIST
1715: LIST
1716: LIST
1717: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1718: LD_VAR 0 7
1722: PUSH
1723: LD_INT 1
1725: GREATEREQUAL
1726: IFFALSE 1738
// mpDepots := startPos ;
1728: LD_ADDR_EXP 12
1732: PUSH
1733: LD_VAR 0 8
1737: ST_TO_ADDR
// if baseLevel >= 2 then
1738: LD_VAR 0 7
1742: PUSH
1743: LD_INT 2
1745: GREATEREQUAL
1746: IFFALSE 2035
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunArea1a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1b , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea2a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2b , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea3a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3b , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea4a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4b , 1 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea5a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5b , 2 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea6a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6b , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea7a , 3 ) , b_breastwork ^ GetBuildingFromArea ( bunArea7b , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea8a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea8b , 4 ) ] ] ;
1748: LD_ADDR_EXP 15
1752: PUSH
1753: LD_INT 31
1755: PUSH
1756: LD_INT 48
1758: PPUSH
1759: LD_INT 5
1761: PPUSH
1762: CALL 44757 0 2
1766: ADD
1767: PUSH
1768: LD_INT 31
1770: PUSH
1771: LD_INT 49
1773: PPUSH
1774: LD_INT 4
1776: PPUSH
1777: CALL 44757 0 2
1781: ADD
1782: PUSH
1783: EMPTY
1784: LIST
1785: LIST
1786: PUSH
1787: LD_INT 31
1789: PUSH
1790: LD_INT 50
1792: PPUSH
1793: LD_INT 1
1795: PPUSH
1796: CALL 44757 0 2
1800: ADD
1801: PUSH
1802: LD_INT 31
1804: PUSH
1805: LD_INT 51
1807: PPUSH
1808: LD_INT 4
1810: PPUSH
1811: CALL 44757 0 2
1815: ADD
1816: PUSH
1817: EMPTY
1818: LIST
1819: LIST
1820: PUSH
1821: LD_INT 31
1823: PUSH
1824: LD_INT 52
1826: PPUSH
1827: LD_INT 0
1829: PPUSH
1830: CALL 44757 0 2
1834: ADD
1835: PUSH
1836: LD_INT 31
1838: PUSH
1839: LD_INT 53
1841: PPUSH
1842: LD_INT 0
1844: PPUSH
1845: CALL 44757 0 2
1849: ADD
1850: PUSH
1851: EMPTY
1852: LIST
1853: LIST
1854: PUSH
1855: LD_INT 31
1857: PUSH
1858: LD_INT 54
1860: PPUSH
1861: LD_INT 1
1863: PPUSH
1864: CALL 44757 0 2
1868: ADD
1869: PUSH
1870: LD_INT 31
1872: PUSH
1873: LD_INT 55
1875: PPUSH
1876: LD_INT 1
1878: PPUSH
1879: CALL 44757 0 2
1883: ADD
1884: PUSH
1885: EMPTY
1886: LIST
1887: LIST
1888: PUSH
1889: LD_INT 31
1891: PUSH
1892: LD_INT 56
1894: PPUSH
1895: LD_INT 2
1897: PPUSH
1898: CALL 44757 0 2
1902: ADD
1903: PUSH
1904: LD_INT 31
1906: PUSH
1907: LD_INT 57
1909: PPUSH
1910: LD_INT 2
1912: PPUSH
1913: CALL 44757 0 2
1917: ADD
1918: PUSH
1919: EMPTY
1920: LIST
1921: LIST
1922: PUSH
1923: LD_INT 31
1925: PUSH
1926: LD_INT 58
1928: PPUSH
1929: LD_INT 1
1931: PPUSH
1932: CALL 44757 0 2
1936: ADD
1937: PUSH
1938: LD_INT 31
1940: PUSH
1941: LD_INT 59
1943: PPUSH
1944: LD_INT 4
1946: PPUSH
1947: CALL 44757 0 2
1951: ADD
1952: PUSH
1953: EMPTY
1954: LIST
1955: LIST
1956: PUSH
1957: LD_INT 31
1959: PUSH
1960: LD_INT 60
1962: PPUSH
1963: LD_INT 3
1965: PPUSH
1966: CALL 44757 0 2
1970: ADD
1971: PUSH
1972: LD_INT 31
1974: PUSH
1975: LD_INT 61
1977: PPUSH
1978: LD_INT 3
1980: PPUSH
1981: CALL 44757 0 2
1985: ADD
1986: PUSH
1987: EMPTY
1988: LIST
1989: LIST
1990: PUSH
1991: LD_INT 31
1993: PUSH
1994: LD_INT 62
1996: PPUSH
1997: LD_INT 4
1999: PPUSH
2000: CALL 44757 0 2
2004: ADD
2005: PUSH
2006: LD_INT 31
2008: PUSH
2009: LD_INT 63
2011: PPUSH
2012: LD_INT 4
2014: PPUSH
2015: CALL 44757 0 2
2019: ADD
2020: PUSH
2021: EMPTY
2022: LIST
2023: LIST
2024: PUSH
2025: EMPTY
2026: LIST
2027: LIST
2028: LIST
2029: LIST
2030: LIST
2031: LIST
2032: LIST
2033: LIST
2034: ST_TO_ADDR
// end ; end ;
2035: LD_VAR 0 2
2039: RET
// every 0 0$2 marked mpActive do var i , x , tmp , areas , time , normalTime , delayTime , maxTime ;
2040: GO 2042
2042: DISABLE
2043: LD_INT 0
2045: PPUSH
2046: PPUSH
2047: PPUSH
2048: PPUSH
2049: PPUSH
2050: PPUSH
2051: PPUSH
2052: PPUSH
// begin if not mpShipments then
2053: LD_EXP 25
2057: NOT
2058: IFFALSE 2062
// exit ;
2060: GO 2486
// case mpShipments of 1 :
2062: LD_EXP 25
2066: PUSH
2067: LD_INT 1
2069: DOUBLE
2070: EQUAL
2071: IFTRUE 2075
2073: GO 2110
2075: POP
// begin time := 0 0$30 ;
2076: LD_ADDR_VAR 0 5
2080: PUSH
2081: LD_INT 1050
2083: ST_TO_ADDR
// normalTime := 0 0$30 ;
2084: LD_ADDR_VAR 0 6
2088: PUSH
2089: LD_INT 1050
2091: ST_TO_ADDR
// maxTime := 1 1$20 ;
2092: LD_ADDR_VAR 0 8
2096: PUSH
2097: LD_INT 2800
2099: ST_TO_ADDR
// delayTime := 0 0$5 ;
2100: LD_ADDR_VAR 0 7
2104: PUSH
2105: LD_INT 175
2107: ST_TO_ADDR
// end ; 2 :
2108: GO 2240
2110: LD_INT 2
2112: DOUBLE
2113: EQUAL
2114: IFTRUE 2118
2116: GO 2153
2118: POP
// begin time := 0 0$25 ;
2119: LD_ADDR_VAR 0 5
2123: PUSH
2124: LD_INT 875
2126: ST_TO_ADDR
// normalTime := 0 0$25 ;
2127: LD_ADDR_VAR 0 6
2131: PUSH
2132: LD_INT 875
2134: ST_TO_ADDR
// maxTime := 1 1$10 ;
2135: LD_ADDR_VAR 0 8
2139: PUSH
2140: LD_INT 2450
2142: ST_TO_ADDR
// delayTime := 0 0$4 ;
2143: LD_ADDR_VAR 0 7
2147: PUSH
2148: LD_INT 140
2150: ST_TO_ADDR
// end ; 3 :
2151: GO 2240
2153: LD_INT 3
2155: DOUBLE
2156: EQUAL
2157: IFTRUE 2161
2159: GO 2196
2161: POP
// begin time := 0 0$20 ;
2162: LD_ADDR_VAR 0 5
2166: PUSH
2167: LD_INT 700
2169: ST_TO_ADDR
// normalTime := 0 0$20 ;
2170: LD_ADDR_VAR 0 6
2174: PUSH
2175: LD_INT 700
2177: ST_TO_ADDR
// maxTime := 1 1$00 ;
2178: LD_ADDR_VAR 0 8
2182: PUSH
2183: LD_INT 2100
2185: ST_TO_ADDR
// delayTime := 0 0$3 ;
2186: LD_ADDR_VAR 0 7
2190: PUSH
2191: LD_INT 105
2193: ST_TO_ADDR
// end ; 4 :
2194: GO 2240
2196: LD_INT 4
2198: DOUBLE
2199: EQUAL
2200: IFTRUE 2204
2202: GO 2239
2204: POP
// begin time := 0 0$15 ;
2205: LD_ADDR_VAR 0 5
2209: PUSH
2210: LD_INT 525
2212: ST_TO_ADDR
// normalTime := 0 0$15 ;
2213: LD_ADDR_VAR 0 6
2217: PUSH
2218: LD_INT 525
2220: ST_TO_ADDR
// maxTime := 0 0$55 ;
2221: LD_ADDR_VAR 0 8
2225: PUSH
2226: LD_INT 1925
2228: ST_TO_ADDR
// delayTime := 0 0$2 ;
2229: LD_ADDR_VAR 0 7
2233: PUSH
2234: LD_INT 70
2236: ST_TO_ADDR
// end ; end ;
2237: GO 2240
2239: POP
// areas := [ Between1 , Between2 , Between3 , Between4 , Center1 , Center2 ] ;
2240: LD_ADDR_VAR 0 4
2244: PUSH
2245: LD_INT 18
2247: PUSH
2248: LD_INT 19
2250: PUSH
2251: LD_INT 20
2253: PUSH
2254: LD_INT 21
2256: PUSH
2257: LD_INT 22
2259: PUSH
2260: LD_INT 23
2262: PUSH
2263: EMPTY
2264: LIST
2265: LIST
2266: LIST
2267: LIST
2268: LIST
2269: LIST
2270: ST_TO_ADDR
// tmp := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
2271: LD_ADDR_VAR 0 3
2275: PUSH
2276: LD_INT 9
2278: PUSH
2279: LD_INT 10
2281: PUSH
2282: LD_INT 11
2284: PUSH
2285: LD_INT 12
2287: PUSH
2288: LD_INT 13
2290: PUSH
2291: LD_INT 14
2293: PUSH
2294: LD_INT 15
2296: PUSH
2297: LD_INT 16
2299: PUSH
2300: EMPTY
2301: LIST
2302: LIST
2303: LIST
2304: LIST
2305: LIST
2306: LIST
2307: LIST
2308: LIST
2309: ST_TO_ADDR
// for i := 1 to 8 do
2310: LD_ADDR_VAR 0 1
2314: PUSH
2315: DOUBLE
2316: LD_INT 1
2318: DEC
2319: ST_TO_ADDR
2320: LD_INT 8
2322: PUSH
2323: FOR_TO
2324: IFFALSE 2365
// begin if not mpSidePositions [ i ] then
2326: LD_EXP 5
2330: PUSH
2331: LD_VAR 0 1
2335: ARRAY
2336: NOT
2337: IFFALSE 2341
// continue ;
2339: GO 2323
// areas := areas ^ tmp [ i ] ;
2341: LD_ADDR_VAR 0 4
2345: PUSH
2346: LD_VAR 0 4
2350: PUSH
2351: LD_VAR 0 3
2355: PUSH
2356: LD_VAR 0 1
2360: ARRAY
2361: ADD
2362: ST_TO_ADDR
// end ;
2363: GO 2323
2365: POP
2366: POP
// repeat wait ( time ) ;
2367: LD_VAR 0 5
2371: PPUSH
2372: CALL_OW 67
// x := rand ( 1 , 5 ) ;
2376: LD_ADDR_VAR 0 2
2380: PUSH
2381: LD_INT 1
2383: PPUSH
2384: LD_INT 5
2386: PPUSH
2387: CALL_OW 12
2391: ST_TO_ADDR
// for i in areas do
2392: LD_ADDR_VAR 0 1
2396: PUSH
2397: LD_VAR 0 4
2401: PUSH
2402: FOR_IN
2403: IFFALSE 2442
// begin if GetResourceArea ( i , mat_cans ) < 20 then
2405: LD_VAR 0 1
2409: PPUSH
2410: LD_INT 1
2412: PPUSH
2413: CALL_OW 287
2417: PUSH
2418: LD_INT 20
2420: LESS
2421: IFFALSE 2440
// begin CreateCratesArea ( x , i , true ) ;
2423: LD_VAR 0 2
2427: PPUSH
2428: LD_VAR 0 1
2432: PPUSH
2433: LD_INT 1
2435: PPUSH
2436: CALL_OW 55
// end ; end ;
2440: GO 2402
2442: POP
2443: POP
// time := time + delayTime ;
2444: LD_ADDR_VAR 0 5
2448: PUSH
2449: LD_VAR 0 5
2453: PUSH
2454: LD_VAR 0 7
2458: PLUS
2459: ST_TO_ADDR
// if time > maxTime then
2460: LD_VAR 0 5
2464: PUSH
2465: LD_VAR 0 8
2469: GREATER
2470: IFFALSE 2482
// time := normalTime ;
2472: LD_ADDR_VAR 0 5
2476: PUSH
2477: LD_VAR 0 6
2481: ST_TO_ADDR
// until false ;
2482: LD_INT 0
2484: IFFALSE 2367
// end ; end_of_file
2486: PPOPN 8
2488: END
// on UnitDestroyed ( un ) do begin Multiplayer_UnitDestroyed ( un ) ;
2489: LD_VAR 0 1
2493: PPUSH
2494: CALL 48656 0 1
// SOS_UnitDestroyed ( un ) ;
2498: LD_VAR 0 1
2502: PPUSH
2503: CALL 67019 0 1
// end ;
2507: PPOPN 1
2509: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ; end_of_file
2510: LD_VAR 0 1
2514: PPUSH
2515: LD_VAR 0 2
2519: PPUSH
2520: CALL 67139 0 2
2524: PPOPN 2
2526: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
2527: LD_INT 0
2529: PPUSH
2530: PPUSH
// if exist_mode then
2531: LD_VAR 0 2
2535: IFFALSE 2560
// unit := CreateCharacter ( prefix & ident ) else
2537: LD_ADDR_VAR 0 5
2541: PUSH
2542: LD_VAR 0 3
2546: PUSH
2547: LD_VAR 0 1
2551: STR
2552: PPUSH
2553: CALL_OW 34
2557: ST_TO_ADDR
2558: GO 2575
// unit := NewCharacter ( ident ) ;
2560: LD_ADDR_VAR 0 5
2564: PUSH
2565: LD_VAR 0 1
2569: PPUSH
2570: CALL_OW 25
2574: ST_TO_ADDR
// result := unit ;
2575: LD_ADDR_VAR 0 4
2579: PUSH
2580: LD_VAR 0 5
2584: ST_TO_ADDR
// end ;
2585: LD_VAR 0 4
2589: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
2590: LD_INT 0
2592: PPUSH
2593: PPUSH
// if not side or not nation then
2594: LD_VAR 0 1
2598: NOT
2599: PUSH
2600: LD_VAR 0 2
2604: NOT
2605: OR
2606: IFFALSE 2610
// exit ;
2608: GO 3378
// case nation of nation_american :
2610: LD_VAR 0 2
2614: PUSH
2615: LD_INT 1
2617: DOUBLE
2618: EQUAL
2619: IFTRUE 2623
2621: GO 2837
2623: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
2624: LD_ADDR_VAR 0 4
2628: PUSH
2629: LD_INT 35
2631: PUSH
2632: LD_INT 45
2634: PUSH
2635: LD_INT 46
2637: PUSH
2638: LD_INT 47
2640: PUSH
2641: LD_INT 82
2643: PUSH
2644: LD_INT 83
2646: PUSH
2647: LD_INT 84
2649: PUSH
2650: LD_INT 85
2652: PUSH
2653: LD_INT 86
2655: PUSH
2656: LD_INT 1
2658: PUSH
2659: LD_INT 2
2661: PUSH
2662: LD_INT 6
2664: PUSH
2665: LD_INT 15
2667: PUSH
2668: LD_INT 16
2670: PUSH
2671: LD_INT 7
2673: PUSH
2674: LD_INT 12
2676: PUSH
2677: LD_INT 13
2679: PUSH
2680: LD_INT 10
2682: PUSH
2683: LD_INT 14
2685: PUSH
2686: LD_INT 20
2688: PUSH
2689: LD_INT 21
2691: PUSH
2692: LD_INT 22
2694: PUSH
2695: LD_INT 25
2697: PUSH
2698: LD_INT 32
2700: PUSH
2701: LD_INT 27
2703: PUSH
2704: LD_INT 36
2706: PUSH
2707: LD_INT 69
2709: PUSH
2710: LD_INT 39
2712: PUSH
2713: LD_INT 34
2715: PUSH
2716: LD_INT 40
2718: PUSH
2719: LD_INT 48
2721: PUSH
2722: LD_INT 49
2724: PUSH
2725: LD_INT 50
2727: PUSH
2728: LD_INT 51
2730: PUSH
2731: LD_INT 52
2733: PUSH
2734: LD_INT 53
2736: PUSH
2737: LD_INT 54
2739: PUSH
2740: LD_INT 55
2742: PUSH
2743: LD_INT 56
2745: PUSH
2746: LD_INT 57
2748: PUSH
2749: LD_INT 58
2751: PUSH
2752: LD_INT 59
2754: PUSH
2755: LD_INT 60
2757: PUSH
2758: LD_INT 61
2760: PUSH
2761: LD_INT 62
2763: PUSH
2764: LD_INT 80
2766: PUSH
2767: LD_INT 82
2769: PUSH
2770: LD_INT 83
2772: PUSH
2773: LD_INT 84
2775: PUSH
2776: LD_INT 85
2778: PUSH
2779: LD_INT 86
2781: PUSH
2782: EMPTY
2783: LIST
2784: LIST
2785: LIST
2786: LIST
2787: LIST
2788: LIST
2789: LIST
2790: LIST
2791: LIST
2792: LIST
2793: LIST
2794: LIST
2795: LIST
2796: LIST
2797: LIST
2798: LIST
2799: LIST
2800: LIST
2801: LIST
2802: LIST
2803: LIST
2804: LIST
2805: LIST
2806: LIST
2807: LIST
2808: LIST
2809: LIST
2810: LIST
2811: LIST
2812: LIST
2813: LIST
2814: LIST
2815: LIST
2816: LIST
2817: LIST
2818: LIST
2819: LIST
2820: LIST
2821: LIST
2822: LIST
2823: LIST
2824: LIST
2825: LIST
2826: LIST
2827: LIST
2828: LIST
2829: LIST
2830: LIST
2831: LIST
2832: LIST
2833: LIST
2834: ST_TO_ADDR
2835: GO 3302
2837: LD_INT 2
2839: DOUBLE
2840: EQUAL
2841: IFTRUE 2845
2843: GO 3071
2845: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
2846: LD_ADDR_VAR 0 4
2850: PUSH
2851: LD_INT 35
2853: PUSH
2854: LD_INT 45
2856: PUSH
2857: LD_INT 46
2859: PUSH
2860: LD_INT 47
2862: PUSH
2863: LD_INT 82
2865: PUSH
2866: LD_INT 83
2868: PUSH
2869: LD_INT 84
2871: PUSH
2872: LD_INT 85
2874: PUSH
2875: LD_INT 87
2877: PUSH
2878: LD_INT 70
2880: PUSH
2881: LD_INT 1
2883: PUSH
2884: LD_INT 11
2886: PUSH
2887: LD_INT 3
2889: PUSH
2890: LD_INT 4
2892: PUSH
2893: LD_INT 5
2895: PUSH
2896: LD_INT 6
2898: PUSH
2899: LD_INT 15
2901: PUSH
2902: LD_INT 18
2904: PUSH
2905: LD_INT 7
2907: PUSH
2908: LD_INT 17
2910: PUSH
2911: LD_INT 8
2913: PUSH
2914: LD_INT 20
2916: PUSH
2917: LD_INT 21
2919: PUSH
2920: LD_INT 22
2922: PUSH
2923: LD_INT 72
2925: PUSH
2926: LD_INT 26
2928: PUSH
2929: LD_INT 69
2931: PUSH
2932: LD_INT 39
2934: PUSH
2935: LD_INT 40
2937: PUSH
2938: LD_INT 41
2940: PUSH
2941: LD_INT 42
2943: PUSH
2944: LD_INT 43
2946: PUSH
2947: LD_INT 48
2949: PUSH
2950: LD_INT 49
2952: PUSH
2953: LD_INT 50
2955: PUSH
2956: LD_INT 51
2958: PUSH
2959: LD_INT 52
2961: PUSH
2962: LD_INT 53
2964: PUSH
2965: LD_INT 54
2967: PUSH
2968: LD_INT 55
2970: PUSH
2971: LD_INT 56
2973: PUSH
2974: LD_INT 60
2976: PUSH
2977: LD_INT 61
2979: PUSH
2980: LD_INT 62
2982: PUSH
2983: LD_INT 66
2985: PUSH
2986: LD_INT 67
2988: PUSH
2989: LD_INT 68
2991: PUSH
2992: LD_INT 81
2994: PUSH
2995: LD_INT 82
2997: PUSH
2998: LD_INT 83
3000: PUSH
3001: LD_INT 84
3003: PUSH
3004: LD_INT 85
3006: PUSH
3007: LD_INT 87
3009: PUSH
3010: LD_INT 88
3012: PUSH
3013: EMPTY
3014: LIST
3015: LIST
3016: LIST
3017: LIST
3018: LIST
3019: LIST
3020: LIST
3021: LIST
3022: LIST
3023: LIST
3024: LIST
3025: LIST
3026: LIST
3027: LIST
3028: LIST
3029: LIST
3030: LIST
3031: LIST
3032: LIST
3033: LIST
3034: LIST
3035: LIST
3036: LIST
3037: LIST
3038: LIST
3039: LIST
3040: LIST
3041: LIST
3042: LIST
3043: LIST
3044: LIST
3045: LIST
3046: LIST
3047: LIST
3048: LIST
3049: LIST
3050: LIST
3051: LIST
3052: LIST
3053: LIST
3054: LIST
3055: LIST
3056: LIST
3057: LIST
3058: LIST
3059: LIST
3060: LIST
3061: LIST
3062: LIST
3063: LIST
3064: LIST
3065: LIST
3066: LIST
3067: LIST
3068: ST_TO_ADDR
3069: GO 3302
3071: LD_INT 3
3073: DOUBLE
3074: EQUAL
3075: IFTRUE 3079
3077: GO 3301
3079: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
3080: LD_ADDR_VAR 0 4
3084: PUSH
3085: LD_INT 46
3087: PUSH
3088: LD_INT 47
3090: PUSH
3091: LD_INT 1
3093: PUSH
3094: LD_INT 2
3096: PUSH
3097: LD_INT 82
3099: PUSH
3100: LD_INT 83
3102: PUSH
3103: LD_INT 84
3105: PUSH
3106: LD_INT 85
3108: PUSH
3109: LD_INT 86
3111: PUSH
3112: LD_INT 11
3114: PUSH
3115: LD_INT 9
3117: PUSH
3118: LD_INT 20
3120: PUSH
3121: LD_INT 19
3123: PUSH
3124: LD_INT 21
3126: PUSH
3127: LD_INT 24
3129: PUSH
3130: LD_INT 22
3132: PUSH
3133: LD_INT 25
3135: PUSH
3136: LD_INT 28
3138: PUSH
3139: LD_INT 29
3141: PUSH
3142: LD_INT 30
3144: PUSH
3145: LD_INT 31
3147: PUSH
3148: LD_INT 37
3150: PUSH
3151: LD_INT 38
3153: PUSH
3154: LD_INT 32
3156: PUSH
3157: LD_INT 27
3159: PUSH
3160: LD_INT 33
3162: PUSH
3163: LD_INT 69
3165: PUSH
3166: LD_INT 39
3168: PUSH
3169: LD_INT 34
3171: PUSH
3172: LD_INT 40
3174: PUSH
3175: LD_INT 71
3177: PUSH
3178: LD_INT 23
3180: PUSH
3181: LD_INT 44
3183: PUSH
3184: LD_INT 48
3186: PUSH
3187: LD_INT 49
3189: PUSH
3190: LD_INT 50
3192: PUSH
3193: LD_INT 51
3195: PUSH
3196: LD_INT 52
3198: PUSH
3199: LD_INT 53
3201: PUSH
3202: LD_INT 54
3204: PUSH
3205: LD_INT 55
3207: PUSH
3208: LD_INT 56
3210: PUSH
3211: LD_INT 57
3213: PUSH
3214: LD_INT 58
3216: PUSH
3217: LD_INT 59
3219: PUSH
3220: LD_INT 63
3222: PUSH
3223: LD_INT 64
3225: PUSH
3226: LD_INT 65
3228: PUSH
3229: LD_INT 82
3231: PUSH
3232: LD_INT 83
3234: PUSH
3235: LD_INT 84
3237: PUSH
3238: LD_INT 85
3240: PUSH
3241: LD_INT 86
3243: PUSH
3244: EMPTY
3245: LIST
3246: LIST
3247: LIST
3248: LIST
3249: LIST
3250: LIST
3251: LIST
3252: LIST
3253: LIST
3254: LIST
3255: LIST
3256: LIST
3257: LIST
3258: LIST
3259: LIST
3260: LIST
3261: LIST
3262: LIST
3263: LIST
3264: LIST
3265: LIST
3266: LIST
3267: LIST
3268: LIST
3269: LIST
3270: LIST
3271: LIST
3272: LIST
3273: LIST
3274: LIST
3275: LIST
3276: LIST
3277: LIST
3278: LIST
3279: LIST
3280: LIST
3281: LIST
3282: LIST
3283: LIST
3284: LIST
3285: LIST
3286: LIST
3287: LIST
3288: LIST
3289: LIST
3290: LIST
3291: LIST
3292: LIST
3293: LIST
3294: LIST
3295: LIST
3296: LIST
3297: LIST
3298: ST_TO_ADDR
3299: GO 3302
3301: POP
// if state > - 1 and state < 3 then
3302: LD_VAR 0 3
3306: PUSH
3307: LD_INT 1
3309: NEG
3310: GREATER
3311: PUSH
3312: LD_VAR 0 3
3316: PUSH
3317: LD_INT 3
3319: LESS
3320: AND
3321: IFFALSE 3378
// for i in result do
3323: LD_ADDR_VAR 0 5
3327: PUSH
3328: LD_VAR 0 4
3332: PUSH
3333: FOR_IN
3334: IFFALSE 3376
// if GetTech ( i , side ) <> state then
3336: LD_VAR 0 5
3340: PPUSH
3341: LD_VAR 0 1
3345: PPUSH
3346: CALL_OW 321
3350: PUSH
3351: LD_VAR 0 3
3355: NONEQUAL
3356: IFFALSE 3374
// result := result diff i ;
3358: LD_ADDR_VAR 0 4
3362: PUSH
3363: LD_VAR 0 4
3367: PUSH
3368: LD_VAR 0 5
3372: DIFF
3373: ST_TO_ADDR
3374: GO 3333
3376: POP
3377: POP
// end ;
3378: LD_VAR 0 4
3382: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
3383: LD_INT 0
3385: PPUSH
3386: PPUSH
3387: PPUSH
// result := true ;
3388: LD_ADDR_VAR 0 3
3392: PUSH
3393: LD_INT 1
3395: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
3396: LD_ADDR_VAR 0 5
3400: PUSH
3401: LD_VAR 0 2
3405: PPUSH
3406: CALL_OW 480
3410: ST_TO_ADDR
// if not tmp then
3411: LD_VAR 0 5
3415: NOT
3416: IFFALSE 3420
// exit ;
3418: GO 3469
// for i in tmp do
3420: LD_ADDR_VAR 0 4
3424: PUSH
3425: LD_VAR 0 5
3429: PUSH
3430: FOR_IN
3431: IFFALSE 3467
// if GetTech ( i , side ) <> state_researched then
3433: LD_VAR 0 4
3437: PPUSH
3438: LD_VAR 0 1
3442: PPUSH
3443: CALL_OW 321
3447: PUSH
3448: LD_INT 2
3450: NONEQUAL
3451: IFFALSE 3465
// begin result := false ;
3453: LD_ADDR_VAR 0 3
3457: PUSH
3458: LD_INT 0
3460: ST_TO_ADDR
// exit ;
3461: POP
3462: POP
3463: GO 3469
// end ;
3465: GO 3430
3467: POP
3468: POP
// end ;
3469: LD_VAR 0 3
3473: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
3474: LD_INT 0
3476: PPUSH
3477: PPUSH
3478: PPUSH
3479: PPUSH
3480: PPUSH
3481: PPUSH
3482: PPUSH
3483: PPUSH
3484: PPUSH
3485: PPUSH
3486: PPUSH
3487: PPUSH
3488: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
3489: LD_VAR 0 1
3493: NOT
3494: PUSH
3495: LD_VAR 0 1
3499: PPUSH
3500: CALL_OW 257
3504: PUSH
3505: LD_INT 9
3507: NONEQUAL
3508: OR
3509: IFFALSE 3513
// exit ;
3511: GO 4086
// side := GetSide ( unit ) ;
3513: LD_ADDR_VAR 0 9
3517: PUSH
3518: LD_VAR 0 1
3522: PPUSH
3523: CALL_OW 255
3527: ST_TO_ADDR
// tech_space := tech_spacanom ;
3528: LD_ADDR_VAR 0 12
3532: PUSH
3533: LD_INT 29
3535: ST_TO_ADDR
// tech_time := tech_taurad ;
3536: LD_ADDR_VAR 0 13
3540: PUSH
3541: LD_INT 28
3543: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
3544: LD_ADDR_VAR 0 11
3548: PUSH
3549: LD_VAR 0 1
3553: PPUSH
3554: CALL_OW 310
3558: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
3559: LD_VAR 0 11
3563: PPUSH
3564: CALL_OW 247
3568: PUSH
3569: LD_INT 2
3571: EQUAL
3572: IFFALSE 3576
// exit ;
3574: GO 4086
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3576: LD_ADDR_VAR 0 8
3580: PUSH
3581: LD_INT 81
3583: PUSH
3584: LD_VAR 0 9
3588: PUSH
3589: EMPTY
3590: LIST
3591: LIST
3592: PUSH
3593: LD_INT 3
3595: PUSH
3596: LD_INT 21
3598: PUSH
3599: LD_INT 3
3601: PUSH
3602: EMPTY
3603: LIST
3604: LIST
3605: PUSH
3606: EMPTY
3607: LIST
3608: LIST
3609: PUSH
3610: EMPTY
3611: LIST
3612: LIST
3613: PPUSH
3614: CALL_OW 69
3618: ST_TO_ADDR
// if not tmp then
3619: LD_VAR 0 8
3623: NOT
3624: IFFALSE 3628
// exit ;
3626: GO 4086
// if in_unit then
3628: LD_VAR 0 11
3632: IFFALSE 3656
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
3634: LD_ADDR_VAR 0 10
3638: PUSH
3639: LD_VAR 0 8
3643: PPUSH
3644: LD_VAR 0 11
3648: PPUSH
3649: CALL_OW 74
3653: ST_TO_ADDR
3654: GO 3676
// enemy := NearestUnitToUnit ( tmp , unit ) ;
3656: LD_ADDR_VAR 0 10
3660: PUSH
3661: LD_VAR 0 8
3665: PPUSH
3666: LD_VAR 0 1
3670: PPUSH
3671: CALL_OW 74
3675: ST_TO_ADDR
// if not enemy then
3676: LD_VAR 0 10
3680: NOT
3681: IFFALSE 3685
// exit ;
3683: GO 4086
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
3685: LD_VAR 0 11
3689: PUSH
3690: LD_VAR 0 11
3694: PPUSH
3695: LD_VAR 0 10
3699: PPUSH
3700: CALL_OW 296
3704: PUSH
3705: LD_INT 13
3707: GREATER
3708: AND
3709: PUSH
3710: LD_VAR 0 1
3714: PPUSH
3715: LD_VAR 0 10
3719: PPUSH
3720: CALL_OW 296
3724: PUSH
3725: LD_INT 12
3727: GREATER
3728: OR
3729: IFFALSE 3733
// exit ;
3731: GO 4086
// missile := [ 1 ] ;
3733: LD_ADDR_VAR 0 14
3737: PUSH
3738: LD_INT 1
3740: PUSH
3741: EMPTY
3742: LIST
3743: ST_TO_ADDR
// if Researched ( side , tech_space ) then
3744: LD_VAR 0 9
3748: PPUSH
3749: LD_VAR 0 12
3753: PPUSH
3754: CALL_OW 325
3758: IFFALSE 3787
// missile := Replace ( missile , missile + 1 , 2 ) ;
3760: LD_ADDR_VAR 0 14
3764: PUSH
3765: LD_VAR 0 14
3769: PPUSH
3770: LD_VAR 0 14
3774: PUSH
3775: LD_INT 1
3777: PLUS
3778: PPUSH
3779: LD_INT 2
3781: PPUSH
3782: CALL_OW 1
3786: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
3787: LD_VAR 0 9
3791: PPUSH
3792: LD_VAR 0 13
3796: PPUSH
3797: CALL_OW 325
3801: PUSH
3802: LD_VAR 0 10
3806: PPUSH
3807: CALL_OW 255
3811: PPUSH
3812: LD_VAR 0 13
3816: PPUSH
3817: CALL_OW 325
3821: NOT
3822: AND
3823: IFFALSE 3852
// missile := Replace ( missile , missile + 1 , 3 ) ;
3825: LD_ADDR_VAR 0 14
3829: PUSH
3830: LD_VAR 0 14
3834: PPUSH
3835: LD_VAR 0 14
3839: PUSH
3840: LD_INT 1
3842: PLUS
3843: PPUSH
3844: LD_INT 3
3846: PPUSH
3847: CALL_OW 1
3851: ST_TO_ADDR
// if missile < 2 then
3852: LD_VAR 0 14
3856: PUSH
3857: LD_INT 2
3859: LESS
3860: IFFALSE 3864
// exit ;
3862: GO 4086
// x := GetX ( enemy ) ;
3864: LD_ADDR_VAR 0 4
3868: PUSH
3869: LD_VAR 0 10
3873: PPUSH
3874: CALL_OW 250
3878: ST_TO_ADDR
// y := GetY ( enemy ) ;
3879: LD_ADDR_VAR 0 5
3883: PUSH
3884: LD_VAR 0 10
3888: PPUSH
3889: CALL_OW 251
3893: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
3894: LD_ADDR_VAR 0 6
3898: PUSH
3899: LD_VAR 0 4
3903: PUSH
3904: LD_INT 1
3906: NEG
3907: PPUSH
3908: LD_INT 1
3910: PPUSH
3911: CALL_OW 12
3915: PLUS
3916: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
3917: LD_ADDR_VAR 0 7
3921: PUSH
3922: LD_VAR 0 5
3926: PUSH
3927: LD_INT 1
3929: NEG
3930: PPUSH
3931: LD_INT 1
3933: PPUSH
3934: CALL_OW 12
3938: PLUS
3939: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
3940: LD_VAR 0 6
3944: PPUSH
3945: LD_VAR 0 7
3949: PPUSH
3950: CALL_OW 488
3954: NOT
3955: IFFALSE 3977
// begin _x := x ;
3957: LD_ADDR_VAR 0 6
3961: PUSH
3962: LD_VAR 0 4
3966: ST_TO_ADDR
// _y := y ;
3967: LD_ADDR_VAR 0 7
3971: PUSH
3972: LD_VAR 0 5
3976: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
3977: LD_ADDR_VAR 0 3
3981: PUSH
3982: LD_INT 1
3984: PPUSH
3985: LD_VAR 0 14
3989: PPUSH
3990: CALL_OW 12
3994: ST_TO_ADDR
// case i of 1 :
3995: LD_VAR 0 3
3999: PUSH
4000: LD_INT 1
4002: DOUBLE
4003: EQUAL
4004: IFTRUE 4008
4006: GO 4025
4008: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
4009: LD_VAR 0 1
4013: PPUSH
4014: LD_VAR 0 10
4018: PPUSH
4019: CALL_OW 115
4023: GO 4086
4025: LD_INT 2
4027: DOUBLE
4028: EQUAL
4029: IFTRUE 4033
4031: GO 4055
4033: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
4034: LD_VAR 0 1
4038: PPUSH
4039: LD_VAR 0 6
4043: PPUSH
4044: LD_VAR 0 7
4048: PPUSH
4049: CALL_OW 153
4053: GO 4086
4055: LD_INT 3
4057: DOUBLE
4058: EQUAL
4059: IFTRUE 4063
4061: GO 4085
4063: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
4064: LD_VAR 0 1
4068: PPUSH
4069: LD_VAR 0 6
4073: PPUSH
4074: LD_VAR 0 7
4078: PPUSH
4079: CALL_OW 154
4083: GO 4086
4085: POP
// end ;
4086: LD_VAR 0 2
4090: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
4091: LD_INT 0
4093: PPUSH
4094: PPUSH
4095: PPUSH
4096: PPUSH
4097: PPUSH
4098: PPUSH
// if not unit or not building then
4099: LD_VAR 0 1
4103: NOT
4104: PUSH
4105: LD_VAR 0 2
4109: NOT
4110: OR
4111: IFFALSE 4115
// exit ;
4113: GO 4273
// x := GetX ( building ) ;
4115: LD_ADDR_VAR 0 5
4119: PUSH
4120: LD_VAR 0 2
4124: PPUSH
4125: CALL_OW 250
4129: ST_TO_ADDR
// y := GetY ( building ) ;
4130: LD_ADDR_VAR 0 6
4134: PUSH
4135: LD_VAR 0 2
4139: PPUSH
4140: CALL_OW 251
4144: ST_TO_ADDR
// for i = 0 to 5 do
4145: LD_ADDR_VAR 0 4
4149: PUSH
4150: DOUBLE
4151: LD_INT 0
4153: DEC
4154: ST_TO_ADDR
4155: LD_INT 5
4157: PUSH
4158: FOR_TO
4159: IFFALSE 4271
// begin _x := ShiftX ( x , i , 3 ) ;
4161: LD_ADDR_VAR 0 7
4165: PUSH
4166: LD_VAR 0 5
4170: PPUSH
4171: LD_VAR 0 4
4175: PPUSH
4176: LD_INT 3
4178: PPUSH
4179: CALL_OW 272
4183: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
4184: LD_ADDR_VAR 0 8
4188: PUSH
4189: LD_VAR 0 6
4193: PPUSH
4194: LD_VAR 0 4
4198: PPUSH
4199: LD_INT 3
4201: PPUSH
4202: CALL_OW 273
4206: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4207: LD_VAR 0 7
4211: PPUSH
4212: LD_VAR 0 8
4216: PPUSH
4217: CALL_OW 488
4221: NOT
4222: IFFALSE 4226
// continue ;
4224: GO 4158
// if HexInfo ( _x , _y ) = 0 then
4226: LD_VAR 0 7
4230: PPUSH
4231: LD_VAR 0 8
4235: PPUSH
4236: CALL_OW 428
4240: PUSH
4241: LD_INT 0
4243: EQUAL
4244: IFFALSE 4269
// begin ComMoveXY ( unit , _x , _y ) ;
4246: LD_VAR 0 1
4250: PPUSH
4251: LD_VAR 0 7
4255: PPUSH
4256: LD_VAR 0 8
4260: PPUSH
4261: CALL_OW 111
// exit ;
4265: POP
4266: POP
4267: GO 4273
// end ; end ;
4269: GO 4158
4271: POP
4272: POP
// end ;
4273: LD_VAR 0 3
4277: RET
// export function ScanBase ( side , base_area ) ; begin
4278: LD_INT 0
4280: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
4281: LD_ADDR_VAR 0 3
4285: PUSH
4286: LD_VAR 0 2
4290: PPUSH
4291: LD_INT 81
4293: PUSH
4294: LD_VAR 0 1
4298: PUSH
4299: EMPTY
4300: LIST
4301: LIST
4302: PPUSH
4303: CALL_OW 70
4307: ST_TO_ADDR
// end ;
4308: LD_VAR 0 3
4312: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
4313: LD_INT 0
4315: PPUSH
4316: PPUSH
4317: PPUSH
4318: PPUSH
// result := false ;
4319: LD_ADDR_VAR 0 2
4323: PUSH
4324: LD_INT 0
4326: ST_TO_ADDR
// side := GetSide ( unit ) ;
4327: LD_ADDR_VAR 0 3
4331: PUSH
4332: LD_VAR 0 1
4336: PPUSH
4337: CALL_OW 255
4341: ST_TO_ADDR
// nat := GetNation ( unit ) ;
4342: LD_ADDR_VAR 0 4
4346: PUSH
4347: LD_VAR 0 1
4351: PPUSH
4352: CALL_OW 248
4356: ST_TO_ADDR
// case nat of 1 :
4357: LD_VAR 0 4
4361: PUSH
4362: LD_INT 1
4364: DOUBLE
4365: EQUAL
4366: IFTRUE 4370
4368: GO 4381
4370: POP
// tech := tech_lassight ; 2 :
4371: LD_ADDR_VAR 0 5
4375: PUSH
4376: LD_INT 12
4378: ST_TO_ADDR
4379: GO 4420
4381: LD_INT 2
4383: DOUBLE
4384: EQUAL
4385: IFTRUE 4389
4387: GO 4400
4389: POP
// tech := tech_mortar ; 3 :
4390: LD_ADDR_VAR 0 5
4394: PUSH
4395: LD_INT 41
4397: ST_TO_ADDR
4398: GO 4420
4400: LD_INT 3
4402: DOUBLE
4403: EQUAL
4404: IFTRUE 4408
4406: GO 4419
4408: POP
// tech := tech_bazooka ; end ;
4409: LD_ADDR_VAR 0 5
4413: PUSH
4414: LD_INT 44
4416: ST_TO_ADDR
4417: GO 4420
4419: POP
// if Researched ( side , tech ) then
4420: LD_VAR 0 3
4424: PPUSH
4425: LD_VAR 0 5
4429: PPUSH
4430: CALL_OW 325
4434: IFFALSE 4461
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
4436: LD_ADDR_VAR 0 2
4440: PUSH
4441: LD_INT 5
4443: PUSH
4444: LD_INT 8
4446: PUSH
4447: LD_INT 9
4449: PUSH
4450: EMPTY
4451: LIST
4452: LIST
4453: LIST
4454: PUSH
4455: LD_VAR 0 4
4459: ARRAY
4460: ST_TO_ADDR
// end ;
4461: LD_VAR 0 2
4465: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
4466: LD_INT 0
4468: PPUSH
4469: PPUSH
4470: PPUSH
// if not mines then
4471: LD_VAR 0 2
4475: NOT
4476: IFFALSE 4480
// exit ;
4478: GO 4624
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4480: LD_ADDR_VAR 0 5
4484: PUSH
4485: LD_INT 81
4487: PUSH
4488: LD_VAR 0 1
4492: PUSH
4493: EMPTY
4494: LIST
4495: LIST
4496: PUSH
4497: LD_INT 3
4499: PUSH
4500: LD_INT 21
4502: PUSH
4503: LD_INT 3
4505: PUSH
4506: EMPTY
4507: LIST
4508: LIST
4509: PUSH
4510: EMPTY
4511: LIST
4512: LIST
4513: PUSH
4514: EMPTY
4515: LIST
4516: LIST
4517: PPUSH
4518: CALL_OW 69
4522: ST_TO_ADDR
// for i in mines do
4523: LD_ADDR_VAR 0 4
4527: PUSH
4528: LD_VAR 0 2
4532: PUSH
4533: FOR_IN
4534: IFFALSE 4622
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
4536: LD_VAR 0 4
4540: PUSH
4541: LD_INT 1
4543: ARRAY
4544: PPUSH
4545: LD_VAR 0 4
4549: PUSH
4550: LD_INT 2
4552: ARRAY
4553: PPUSH
4554: CALL_OW 458
4558: NOT
4559: IFFALSE 4563
// continue ;
4561: GO 4533
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
4563: LD_VAR 0 4
4567: PUSH
4568: LD_INT 1
4570: ARRAY
4571: PPUSH
4572: LD_VAR 0 4
4576: PUSH
4577: LD_INT 2
4579: ARRAY
4580: PPUSH
4581: CALL_OW 428
4585: PUSH
4586: LD_VAR 0 5
4590: IN
4591: IFFALSE 4620
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
4593: LD_VAR 0 4
4597: PUSH
4598: LD_INT 1
4600: ARRAY
4601: PPUSH
4602: LD_VAR 0 4
4606: PUSH
4607: LD_INT 2
4609: ARRAY
4610: PPUSH
4611: LD_VAR 0 1
4615: PPUSH
4616: CALL_OW 456
// end ;
4620: GO 4533
4622: POP
4623: POP
// end ;
4624: LD_VAR 0 3
4628: RET
// export function Count ( array ) ; begin
4629: LD_INT 0
4631: PPUSH
// result := array + 0 ;
4632: LD_ADDR_VAR 0 2
4636: PUSH
4637: LD_VAR 0 1
4641: PUSH
4642: LD_INT 0
4644: PLUS
4645: ST_TO_ADDR
// end ;
4646: LD_VAR 0 2
4650: RET
// export function IsEmpty ( building ) ; begin
4651: LD_INT 0
4653: PPUSH
// if not building then
4654: LD_VAR 0 1
4658: NOT
4659: IFFALSE 4663
// exit ;
4661: GO 4706
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
4663: LD_ADDR_VAR 0 2
4667: PUSH
4668: LD_VAR 0 1
4672: PUSH
4673: LD_INT 22
4675: PUSH
4676: LD_VAR 0 1
4680: PPUSH
4681: CALL_OW 255
4685: PUSH
4686: EMPTY
4687: LIST
4688: LIST
4689: PUSH
4690: LD_INT 58
4692: PUSH
4693: EMPTY
4694: LIST
4695: PUSH
4696: EMPTY
4697: LIST
4698: LIST
4699: PPUSH
4700: CALL_OW 69
4704: IN
4705: ST_TO_ADDR
// end ;
4706: LD_VAR 0 2
4710: RET
// export function IsNotFull ( building ) ; var places ; begin
4711: LD_INT 0
4713: PPUSH
4714: PPUSH
// if not building then
4715: LD_VAR 0 1
4719: NOT
4720: IFFALSE 4724
// exit ;
4722: GO 4752
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
4724: LD_ADDR_VAR 0 2
4728: PUSH
4729: LD_VAR 0 1
4733: PPUSH
4734: LD_INT 3
4736: PUSH
4737: LD_INT 62
4739: PUSH
4740: EMPTY
4741: LIST
4742: PUSH
4743: EMPTY
4744: LIST
4745: LIST
4746: PPUSH
4747: CALL_OW 72
4751: ST_TO_ADDR
// end ;
4752: LD_VAR 0 2
4756: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
4757: LD_INT 0
4759: PPUSH
4760: PPUSH
4761: PPUSH
4762: PPUSH
// tmp := [ ] ;
4763: LD_ADDR_VAR 0 3
4767: PUSH
4768: EMPTY
4769: ST_TO_ADDR
// list := [ ] ;
4770: LD_ADDR_VAR 0 5
4774: PUSH
4775: EMPTY
4776: ST_TO_ADDR
// for i = 16 to 25 do
4777: LD_ADDR_VAR 0 4
4781: PUSH
4782: DOUBLE
4783: LD_INT 16
4785: DEC
4786: ST_TO_ADDR
4787: LD_INT 25
4789: PUSH
4790: FOR_TO
4791: IFFALSE 4864
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
4793: LD_ADDR_VAR 0 3
4797: PUSH
4798: LD_VAR 0 3
4802: PUSH
4803: LD_INT 22
4805: PUSH
4806: LD_VAR 0 1
4810: PPUSH
4811: CALL_OW 255
4815: PUSH
4816: EMPTY
4817: LIST
4818: LIST
4819: PUSH
4820: LD_INT 91
4822: PUSH
4823: LD_VAR 0 1
4827: PUSH
4828: LD_INT 6
4830: PUSH
4831: EMPTY
4832: LIST
4833: LIST
4834: LIST
4835: PUSH
4836: LD_INT 30
4838: PUSH
4839: LD_VAR 0 4
4843: PUSH
4844: EMPTY
4845: LIST
4846: LIST
4847: PUSH
4848: EMPTY
4849: LIST
4850: LIST
4851: LIST
4852: PUSH
4853: EMPTY
4854: LIST
4855: PPUSH
4856: CALL_OW 69
4860: ADD
4861: ST_TO_ADDR
4862: GO 4790
4864: POP
4865: POP
// for i = 1 to tmp do
4866: LD_ADDR_VAR 0 4
4870: PUSH
4871: DOUBLE
4872: LD_INT 1
4874: DEC
4875: ST_TO_ADDR
4876: LD_VAR 0 3
4880: PUSH
4881: FOR_TO
4882: IFFALSE 4970
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
4884: LD_ADDR_VAR 0 5
4888: PUSH
4889: LD_VAR 0 5
4893: PUSH
4894: LD_VAR 0 3
4898: PUSH
4899: LD_VAR 0 4
4903: ARRAY
4904: PPUSH
4905: CALL_OW 266
4909: PUSH
4910: LD_VAR 0 3
4914: PUSH
4915: LD_VAR 0 4
4919: ARRAY
4920: PPUSH
4921: CALL_OW 250
4925: PUSH
4926: LD_VAR 0 3
4930: PUSH
4931: LD_VAR 0 4
4935: ARRAY
4936: PPUSH
4937: CALL_OW 251
4941: PUSH
4942: LD_VAR 0 3
4946: PUSH
4947: LD_VAR 0 4
4951: ARRAY
4952: PPUSH
4953: CALL_OW 254
4957: PUSH
4958: EMPTY
4959: LIST
4960: LIST
4961: LIST
4962: LIST
4963: PUSH
4964: EMPTY
4965: LIST
4966: ADD
4967: ST_TO_ADDR
4968: GO 4881
4970: POP
4971: POP
// result := list ;
4972: LD_ADDR_VAR 0 2
4976: PUSH
4977: LD_VAR 0 5
4981: ST_TO_ADDR
// end ;
4982: LD_VAR 0 2
4986: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
4987: LD_INT 0
4989: PPUSH
4990: PPUSH
4991: PPUSH
4992: PPUSH
4993: PPUSH
4994: PPUSH
4995: PPUSH
// if not factory then
4996: LD_VAR 0 1
5000: NOT
5001: IFFALSE 5005
// exit ;
5003: GO 5598
// if control = control_apeman then
5005: LD_VAR 0 4
5009: PUSH
5010: LD_INT 5
5012: EQUAL
5013: IFFALSE 5122
// begin tmp := UnitsInside ( factory ) ;
5015: LD_ADDR_VAR 0 8
5019: PUSH
5020: LD_VAR 0 1
5024: PPUSH
5025: CALL_OW 313
5029: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
5030: LD_VAR 0 8
5034: PPUSH
5035: LD_INT 25
5037: PUSH
5038: LD_INT 12
5040: PUSH
5041: EMPTY
5042: LIST
5043: LIST
5044: PPUSH
5045: CALL_OW 72
5049: NOT
5050: IFFALSE 5060
// control := control_manual ;
5052: LD_ADDR_VAR 0 4
5056: PUSH
5057: LD_INT 1
5059: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
5060: LD_ADDR_VAR 0 8
5064: PUSH
5065: LD_VAR 0 1
5069: PPUSH
5070: CALL 4757 0 1
5074: ST_TO_ADDR
// if tmp then
5075: LD_VAR 0 8
5079: IFFALSE 5122
// begin for i in tmp do
5081: LD_ADDR_VAR 0 7
5085: PUSH
5086: LD_VAR 0 8
5090: PUSH
5091: FOR_IN
5092: IFFALSE 5120
// if i [ 1 ] = b_ext_radio then
5094: LD_VAR 0 7
5098: PUSH
5099: LD_INT 1
5101: ARRAY
5102: PUSH
5103: LD_INT 22
5105: EQUAL
5106: IFFALSE 5118
// begin control := control_remote ;
5108: LD_ADDR_VAR 0 4
5112: PUSH
5113: LD_INT 2
5115: ST_TO_ADDR
// break ;
5116: GO 5120
// end ;
5118: GO 5091
5120: POP
5121: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5122: LD_VAR 0 1
5126: PPUSH
5127: LD_VAR 0 2
5131: PPUSH
5132: LD_VAR 0 3
5136: PPUSH
5137: LD_VAR 0 4
5141: PPUSH
5142: LD_VAR 0 5
5146: PPUSH
5147: CALL_OW 448
5151: IFFALSE 5186
// begin result := [ chassis , engine , control , weapon ] ;
5153: LD_ADDR_VAR 0 6
5157: PUSH
5158: LD_VAR 0 2
5162: PUSH
5163: LD_VAR 0 3
5167: PUSH
5168: LD_VAR 0 4
5172: PUSH
5173: LD_VAR 0 5
5177: PUSH
5178: EMPTY
5179: LIST
5180: LIST
5181: LIST
5182: LIST
5183: ST_TO_ADDR
// exit ;
5184: GO 5598
// end ; _chassis := AvailableChassisList ( factory ) ;
5186: LD_ADDR_VAR 0 9
5190: PUSH
5191: LD_VAR 0 1
5195: PPUSH
5196: CALL_OW 475
5200: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
5201: LD_ADDR_VAR 0 11
5205: PUSH
5206: LD_VAR 0 1
5210: PPUSH
5211: CALL_OW 476
5215: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
5216: LD_ADDR_VAR 0 12
5220: PUSH
5221: LD_VAR 0 1
5225: PPUSH
5226: CALL_OW 477
5230: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
5231: LD_ADDR_VAR 0 10
5235: PUSH
5236: LD_VAR 0 1
5240: PPUSH
5241: CALL_OW 478
5245: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
5246: LD_VAR 0 9
5250: NOT
5251: PUSH
5252: LD_VAR 0 11
5256: NOT
5257: OR
5258: PUSH
5259: LD_VAR 0 12
5263: NOT
5264: OR
5265: PUSH
5266: LD_VAR 0 10
5270: NOT
5271: OR
5272: IFFALSE 5307
// begin result := [ chassis , engine , control , weapon ] ;
5274: LD_ADDR_VAR 0 6
5278: PUSH
5279: LD_VAR 0 2
5283: PUSH
5284: LD_VAR 0 3
5288: PUSH
5289: LD_VAR 0 4
5293: PUSH
5294: LD_VAR 0 5
5298: PUSH
5299: EMPTY
5300: LIST
5301: LIST
5302: LIST
5303: LIST
5304: ST_TO_ADDR
// exit ;
5305: GO 5598
// end ; if not chassis in _chassis then
5307: LD_VAR 0 2
5311: PUSH
5312: LD_VAR 0 9
5316: IN
5317: NOT
5318: IFFALSE 5344
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
5320: LD_ADDR_VAR 0 2
5324: PUSH
5325: LD_VAR 0 9
5329: PUSH
5330: LD_INT 1
5332: PPUSH
5333: LD_VAR 0 9
5337: PPUSH
5338: CALL_OW 12
5342: ARRAY
5343: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
5344: LD_VAR 0 2
5348: PPUSH
5349: LD_VAR 0 3
5353: PPUSH
5354: CALL 5603 0 2
5358: NOT
5359: IFFALSE 5418
// repeat engine := _engine [ 1 ] ;
5361: LD_ADDR_VAR 0 3
5365: PUSH
5366: LD_VAR 0 11
5370: PUSH
5371: LD_INT 1
5373: ARRAY
5374: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
5375: LD_ADDR_VAR 0 11
5379: PUSH
5380: LD_VAR 0 11
5384: PPUSH
5385: LD_INT 1
5387: PPUSH
5388: CALL_OW 3
5392: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
5393: LD_VAR 0 2
5397: PPUSH
5398: LD_VAR 0 3
5402: PPUSH
5403: CALL 5603 0 2
5407: PUSH
5408: LD_VAR 0 11
5412: PUSH
5413: EMPTY
5414: EQUAL
5415: OR
5416: IFFALSE 5361
// if not control in _control then
5418: LD_VAR 0 4
5422: PUSH
5423: LD_VAR 0 12
5427: IN
5428: NOT
5429: IFFALSE 5455
// control := _control [ rand ( 1 , _control ) ] ;
5431: LD_ADDR_VAR 0 4
5435: PUSH
5436: LD_VAR 0 12
5440: PUSH
5441: LD_INT 1
5443: PPUSH
5444: LD_VAR 0 12
5448: PPUSH
5449: CALL_OW 12
5453: ARRAY
5454: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
5455: LD_VAR 0 2
5459: PPUSH
5460: LD_VAR 0 5
5464: PPUSH
5465: CALL 5823 0 2
5469: NOT
5470: IFFALSE 5529
// repeat weapon := _weapon [ 1 ] ;
5472: LD_ADDR_VAR 0 5
5476: PUSH
5477: LD_VAR 0 10
5481: PUSH
5482: LD_INT 1
5484: ARRAY
5485: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
5486: LD_ADDR_VAR 0 10
5490: PUSH
5491: LD_VAR 0 10
5495: PPUSH
5496: LD_INT 1
5498: PPUSH
5499: CALL_OW 3
5503: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
5504: LD_VAR 0 2
5508: PPUSH
5509: LD_VAR 0 5
5513: PPUSH
5514: CALL 5823 0 2
5518: PUSH
5519: LD_VAR 0 10
5523: PUSH
5524: EMPTY
5525: EQUAL
5526: OR
5527: IFFALSE 5472
// result := [ ] ;
5529: LD_ADDR_VAR 0 6
5533: PUSH
5534: EMPTY
5535: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5536: LD_VAR 0 1
5540: PPUSH
5541: LD_VAR 0 2
5545: PPUSH
5546: LD_VAR 0 3
5550: PPUSH
5551: LD_VAR 0 4
5555: PPUSH
5556: LD_VAR 0 5
5560: PPUSH
5561: CALL_OW 448
5565: IFFALSE 5598
// result := [ chassis , engine , control , weapon ] ;
5567: LD_ADDR_VAR 0 6
5571: PUSH
5572: LD_VAR 0 2
5576: PUSH
5577: LD_VAR 0 3
5581: PUSH
5582: LD_VAR 0 4
5586: PUSH
5587: LD_VAR 0 5
5591: PUSH
5592: EMPTY
5593: LIST
5594: LIST
5595: LIST
5596: LIST
5597: ST_TO_ADDR
// end ;
5598: LD_VAR 0 6
5602: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
5603: LD_INT 0
5605: PPUSH
// if not chassis or not engine then
5606: LD_VAR 0 1
5610: NOT
5611: PUSH
5612: LD_VAR 0 2
5616: NOT
5617: OR
5618: IFFALSE 5622
// exit ;
5620: GO 5818
// case engine of engine_solar :
5622: LD_VAR 0 2
5626: PUSH
5627: LD_INT 2
5629: DOUBLE
5630: EQUAL
5631: IFTRUE 5635
5633: GO 5673
5635: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
5636: LD_ADDR_VAR 0 3
5640: PUSH
5641: LD_INT 11
5643: PUSH
5644: LD_INT 12
5646: PUSH
5647: LD_INT 13
5649: PUSH
5650: LD_INT 14
5652: PUSH
5653: LD_INT 1
5655: PUSH
5656: LD_INT 2
5658: PUSH
5659: LD_INT 3
5661: PUSH
5662: EMPTY
5663: LIST
5664: LIST
5665: LIST
5666: LIST
5667: LIST
5668: LIST
5669: LIST
5670: ST_TO_ADDR
5671: GO 5802
5673: LD_INT 1
5675: DOUBLE
5676: EQUAL
5677: IFTRUE 5681
5679: GO 5743
5681: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
5682: LD_ADDR_VAR 0 3
5686: PUSH
5687: LD_INT 11
5689: PUSH
5690: LD_INT 12
5692: PUSH
5693: LD_INT 13
5695: PUSH
5696: LD_INT 14
5698: PUSH
5699: LD_INT 1
5701: PUSH
5702: LD_INT 2
5704: PUSH
5705: LD_INT 3
5707: PUSH
5708: LD_INT 4
5710: PUSH
5711: LD_INT 5
5713: PUSH
5714: LD_INT 21
5716: PUSH
5717: LD_INT 23
5719: PUSH
5720: LD_INT 22
5722: PUSH
5723: LD_INT 24
5725: PUSH
5726: EMPTY
5727: LIST
5728: LIST
5729: LIST
5730: LIST
5731: LIST
5732: LIST
5733: LIST
5734: LIST
5735: LIST
5736: LIST
5737: LIST
5738: LIST
5739: LIST
5740: ST_TO_ADDR
5741: GO 5802
5743: LD_INT 3
5745: DOUBLE
5746: EQUAL
5747: IFTRUE 5751
5749: GO 5801
5751: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
5752: LD_ADDR_VAR 0 3
5756: PUSH
5757: LD_INT 13
5759: PUSH
5760: LD_INT 14
5762: PUSH
5763: LD_INT 2
5765: PUSH
5766: LD_INT 3
5768: PUSH
5769: LD_INT 4
5771: PUSH
5772: LD_INT 5
5774: PUSH
5775: LD_INT 21
5777: PUSH
5778: LD_INT 22
5780: PUSH
5781: LD_INT 23
5783: PUSH
5784: LD_INT 24
5786: PUSH
5787: EMPTY
5788: LIST
5789: LIST
5790: LIST
5791: LIST
5792: LIST
5793: LIST
5794: LIST
5795: LIST
5796: LIST
5797: LIST
5798: ST_TO_ADDR
5799: GO 5802
5801: POP
// result := ( chassis in result ) ;
5802: LD_ADDR_VAR 0 3
5806: PUSH
5807: LD_VAR 0 1
5811: PUSH
5812: LD_VAR 0 3
5816: IN
5817: ST_TO_ADDR
// end ;
5818: LD_VAR 0 3
5822: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
5823: LD_INT 0
5825: PPUSH
// if not chassis or not weapon then
5826: LD_VAR 0 1
5830: NOT
5831: PUSH
5832: LD_VAR 0 2
5836: NOT
5837: OR
5838: IFFALSE 5842
// exit ;
5840: GO 6902
// case weapon of us_machine_gun :
5842: LD_VAR 0 2
5846: PUSH
5847: LD_INT 2
5849: DOUBLE
5850: EQUAL
5851: IFTRUE 5855
5853: GO 5885
5855: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
5856: LD_ADDR_VAR 0 3
5860: PUSH
5861: LD_INT 1
5863: PUSH
5864: LD_INT 2
5866: PUSH
5867: LD_INT 3
5869: PUSH
5870: LD_INT 4
5872: PUSH
5873: LD_INT 5
5875: PUSH
5876: EMPTY
5877: LIST
5878: LIST
5879: LIST
5880: LIST
5881: LIST
5882: ST_TO_ADDR
5883: GO 6886
5885: LD_INT 3
5887: DOUBLE
5888: EQUAL
5889: IFTRUE 5893
5891: GO 5923
5893: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
5894: LD_ADDR_VAR 0 3
5898: PUSH
5899: LD_INT 1
5901: PUSH
5902: LD_INT 2
5904: PUSH
5905: LD_INT 3
5907: PUSH
5908: LD_INT 4
5910: PUSH
5911: LD_INT 5
5913: PUSH
5914: EMPTY
5915: LIST
5916: LIST
5917: LIST
5918: LIST
5919: LIST
5920: ST_TO_ADDR
5921: GO 6886
5923: LD_INT 11
5925: DOUBLE
5926: EQUAL
5927: IFTRUE 5931
5929: GO 5961
5931: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
5932: LD_ADDR_VAR 0 3
5936: PUSH
5937: LD_INT 1
5939: PUSH
5940: LD_INT 2
5942: PUSH
5943: LD_INT 3
5945: PUSH
5946: LD_INT 4
5948: PUSH
5949: LD_INT 5
5951: PUSH
5952: EMPTY
5953: LIST
5954: LIST
5955: LIST
5956: LIST
5957: LIST
5958: ST_TO_ADDR
5959: GO 6886
5961: LD_INT 4
5963: DOUBLE
5964: EQUAL
5965: IFTRUE 5969
5967: GO 5995
5969: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
5970: LD_ADDR_VAR 0 3
5974: PUSH
5975: LD_INT 2
5977: PUSH
5978: LD_INT 3
5980: PUSH
5981: LD_INT 4
5983: PUSH
5984: LD_INT 5
5986: PUSH
5987: EMPTY
5988: LIST
5989: LIST
5990: LIST
5991: LIST
5992: ST_TO_ADDR
5993: GO 6886
5995: LD_INT 5
5997: DOUBLE
5998: EQUAL
5999: IFTRUE 6003
6001: GO 6029
6003: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
6004: LD_ADDR_VAR 0 3
6008: PUSH
6009: LD_INT 2
6011: PUSH
6012: LD_INT 3
6014: PUSH
6015: LD_INT 4
6017: PUSH
6018: LD_INT 5
6020: PUSH
6021: EMPTY
6022: LIST
6023: LIST
6024: LIST
6025: LIST
6026: ST_TO_ADDR
6027: GO 6886
6029: LD_INT 9
6031: DOUBLE
6032: EQUAL
6033: IFTRUE 6037
6035: GO 6063
6037: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
6038: LD_ADDR_VAR 0 3
6042: PUSH
6043: LD_INT 2
6045: PUSH
6046: LD_INT 3
6048: PUSH
6049: LD_INT 4
6051: PUSH
6052: LD_INT 5
6054: PUSH
6055: EMPTY
6056: LIST
6057: LIST
6058: LIST
6059: LIST
6060: ST_TO_ADDR
6061: GO 6886
6063: LD_INT 7
6065: DOUBLE
6066: EQUAL
6067: IFTRUE 6071
6069: GO 6097
6071: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
6072: LD_ADDR_VAR 0 3
6076: PUSH
6077: LD_INT 2
6079: PUSH
6080: LD_INT 3
6082: PUSH
6083: LD_INT 4
6085: PUSH
6086: LD_INT 5
6088: PUSH
6089: EMPTY
6090: LIST
6091: LIST
6092: LIST
6093: LIST
6094: ST_TO_ADDR
6095: GO 6886
6097: LD_INT 12
6099: DOUBLE
6100: EQUAL
6101: IFTRUE 6105
6103: GO 6131
6105: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
6106: LD_ADDR_VAR 0 3
6110: PUSH
6111: LD_INT 2
6113: PUSH
6114: LD_INT 3
6116: PUSH
6117: LD_INT 4
6119: PUSH
6120: LD_INT 5
6122: PUSH
6123: EMPTY
6124: LIST
6125: LIST
6126: LIST
6127: LIST
6128: ST_TO_ADDR
6129: GO 6886
6131: LD_INT 13
6133: DOUBLE
6134: EQUAL
6135: IFTRUE 6139
6137: GO 6165
6139: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
6140: LD_ADDR_VAR 0 3
6144: PUSH
6145: LD_INT 2
6147: PUSH
6148: LD_INT 3
6150: PUSH
6151: LD_INT 4
6153: PUSH
6154: LD_INT 5
6156: PUSH
6157: EMPTY
6158: LIST
6159: LIST
6160: LIST
6161: LIST
6162: ST_TO_ADDR
6163: GO 6886
6165: LD_INT 14
6167: DOUBLE
6168: EQUAL
6169: IFTRUE 6173
6171: GO 6191
6173: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
6174: LD_ADDR_VAR 0 3
6178: PUSH
6179: LD_INT 4
6181: PUSH
6182: LD_INT 5
6184: PUSH
6185: EMPTY
6186: LIST
6187: LIST
6188: ST_TO_ADDR
6189: GO 6886
6191: LD_INT 6
6193: DOUBLE
6194: EQUAL
6195: IFTRUE 6199
6197: GO 6217
6199: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
6200: LD_ADDR_VAR 0 3
6204: PUSH
6205: LD_INT 4
6207: PUSH
6208: LD_INT 5
6210: PUSH
6211: EMPTY
6212: LIST
6213: LIST
6214: ST_TO_ADDR
6215: GO 6886
6217: LD_INT 10
6219: DOUBLE
6220: EQUAL
6221: IFTRUE 6225
6223: GO 6243
6225: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
6226: LD_ADDR_VAR 0 3
6230: PUSH
6231: LD_INT 4
6233: PUSH
6234: LD_INT 5
6236: PUSH
6237: EMPTY
6238: LIST
6239: LIST
6240: ST_TO_ADDR
6241: GO 6886
6243: LD_INT 22
6245: DOUBLE
6246: EQUAL
6247: IFTRUE 6251
6249: GO 6277
6251: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
6252: LD_ADDR_VAR 0 3
6256: PUSH
6257: LD_INT 11
6259: PUSH
6260: LD_INT 12
6262: PUSH
6263: LD_INT 13
6265: PUSH
6266: LD_INT 14
6268: PUSH
6269: EMPTY
6270: LIST
6271: LIST
6272: LIST
6273: LIST
6274: ST_TO_ADDR
6275: GO 6886
6277: LD_INT 23
6279: DOUBLE
6280: EQUAL
6281: IFTRUE 6285
6283: GO 6311
6285: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
6286: LD_ADDR_VAR 0 3
6290: PUSH
6291: LD_INT 11
6293: PUSH
6294: LD_INT 12
6296: PUSH
6297: LD_INT 13
6299: PUSH
6300: LD_INT 14
6302: PUSH
6303: EMPTY
6304: LIST
6305: LIST
6306: LIST
6307: LIST
6308: ST_TO_ADDR
6309: GO 6886
6311: LD_INT 24
6313: DOUBLE
6314: EQUAL
6315: IFTRUE 6319
6317: GO 6345
6319: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
6320: LD_ADDR_VAR 0 3
6324: PUSH
6325: LD_INT 11
6327: PUSH
6328: LD_INT 12
6330: PUSH
6331: LD_INT 13
6333: PUSH
6334: LD_INT 14
6336: PUSH
6337: EMPTY
6338: LIST
6339: LIST
6340: LIST
6341: LIST
6342: ST_TO_ADDR
6343: GO 6886
6345: LD_INT 30
6347: DOUBLE
6348: EQUAL
6349: IFTRUE 6353
6351: GO 6379
6353: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
6354: LD_ADDR_VAR 0 3
6358: PUSH
6359: LD_INT 11
6361: PUSH
6362: LD_INT 12
6364: PUSH
6365: LD_INT 13
6367: PUSH
6368: LD_INT 14
6370: PUSH
6371: EMPTY
6372: LIST
6373: LIST
6374: LIST
6375: LIST
6376: ST_TO_ADDR
6377: GO 6886
6379: LD_INT 25
6381: DOUBLE
6382: EQUAL
6383: IFTRUE 6387
6385: GO 6405
6387: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
6388: LD_ADDR_VAR 0 3
6392: PUSH
6393: LD_INT 13
6395: PUSH
6396: LD_INT 14
6398: PUSH
6399: EMPTY
6400: LIST
6401: LIST
6402: ST_TO_ADDR
6403: GO 6886
6405: LD_INT 27
6407: DOUBLE
6408: EQUAL
6409: IFTRUE 6413
6411: GO 6431
6413: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
6414: LD_ADDR_VAR 0 3
6418: PUSH
6419: LD_INT 13
6421: PUSH
6422: LD_INT 14
6424: PUSH
6425: EMPTY
6426: LIST
6427: LIST
6428: ST_TO_ADDR
6429: GO 6886
6431: LD_INT 92
6433: DOUBLE
6434: EQUAL
6435: IFTRUE 6439
6437: GO 6465
6439: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
6440: LD_ADDR_VAR 0 3
6444: PUSH
6445: LD_INT 11
6447: PUSH
6448: LD_INT 12
6450: PUSH
6451: LD_INT 13
6453: PUSH
6454: LD_INT 14
6456: PUSH
6457: EMPTY
6458: LIST
6459: LIST
6460: LIST
6461: LIST
6462: ST_TO_ADDR
6463: GO 6886
6465: LD_INT 28
6467: DOUBLE
6468: EQUAL
6469: IFTRUE 6473
6471: GO 6491
6473: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
6474: LD_ADDR_VAR 0 3
6478: PUSH
6479: LD_INT 13
6481: PUSH
6482: LD_INT 14
6484: PUSH
6485: EMPTY
6486: LIST
6487: LIST
6488: ST_TO_ADDR
6489: GO 6886
6491: LD_INT 29
6493: DOUBLE
6494: EQUAL
6495: IFTRUE 6499
6497: GO 6517
6499: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
6500: LD_ADDR_VAR 0 3
6504: PUSH
6505: LD_INT 13
6507: PUSH
6508: LD_INT 14
6510: PUSH
6511: EMPTY
6512: LIST
6513: LIST
6514: ST_TO_ADDR
6515: GO 6886
6517: LD_INT 31
6519: DOUBLE
6520: EQUAL
6521: IFTRUE 6525
6523: GO 6543
6525: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
6526: LD_ADDR_VAR 0 3
6530: PUSH
6531: LD_INT 13
6533: PUSH
6534: LD_INT 14
6536: PUSH
6537: EMPTY
6538: LIST
6539: LIST
6540: ST_TO_ADDR
6541: GO 6886
6543: LD_INT 26
6545: DOUBLE
6546: EQUAL
6547: IFTRUE 6551
6549: GO 6569
6551: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
6552: LD_ADDR_VAR 0 3
6556: PUSH
6557: LD_INT 13
6559: PUSH
6560: LD_INT 14
6562: PUSH
6563: EMPTY
6564: LIST
6565: LIST
6566: ST_TO_ADDR
6567: GO 6886
6569: LD_INT 42
6571: DOUBLE
6572: EQUAL
6573: IFTRUE 6577
6575: GO 6603
6577: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
6578: LD_ADDR_VAR 0 3
6582: PUSH
6583: LD_INT 21
6585: PUSH
6586: LD_INT 22
6588: PUSH
6589: LD_INT 23
6591: PUSH
6592: LD_INT 24
6594: PUSH
6595: EMPTY
6596: LIST
6597: LIST
6598: LIST
6599: LIST
6600: ST_TO_ADDR
6601: GO 6886
6603: LD_INT 43
6605: DOUBLE
6606: EQUAL
6607: IFTRUE 6611
6609: GO 6637
6611: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
6612: LD_ADDR_VAR 0 3
6616: PUSH
6617: LD_INT 21
6619: PUSH
6620: LD_INT 22
6622: PUSH
6623: LD_INT 23
6625: PUSH
6626: LD_INT 24
6628: PUSH
6629: EMPTY
6630: LIST
6631: LIST
6632: LIST
6633: LIST
6634: ST_TO_ADDR
6635: GO 6886
6637: LD_INT 44
6639: DOUBLE
6640: EQUAL
6641: IFTRUE 6645
6643: GO 6671
6645: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
6646: LD_ADDR_VAR 0 3
6650: PUSH
6651: LD_INT 21
6653: PUSH
6654: LD_INT 22
6656: PUSH
6657: LD_INT 23
6659: PUSH
6660: LD_INT 24
6662: PUSH
6663: EMPTY
6664: LIST
6665: LIST
6666: LIST
6667: LIST
6668: ST_TO_ADDR
6669: GO 6886
6671: LD_INT 45
6673: DOUBLE
6674: EQUAL
6675: IFTRUE 6679
6677: GO 6705
6679: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
6680: LD_ADDR_VAR 0 3
6684: PUSH
6685: LD_INT 21
6687: PUSH
6688: LD_INT 22
6690: PUSH
6691: LD_INT 23
6693: PUSH
6694: LD_INT 24
6696: PUSH
6697: EMPTY
6698: LIST
6699: LIST
6700: LIST
6701: LIST
6702: ST_TO_ADDR
6703: GO 6886
6705: LD_INT 49
6707: DOUBLE
6708: EQUAL
6709: IFTRUE 6713
6711: GO 6739
6713: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
6714: LD_ADDR_VAR 0 3
6718: PUSH
6719: LD_INT 21
6721: PUSH
6722: LD_INT 22
6724: PUSH
6725: LD_INT 23
6727: PUSH
6728: LD_INT 24
6730: PUSH
6731: EMPTY
6732: LIST
6733: LIST
6734: LIST
6735: LIST
6736: ST_TO_ADDR
6737: GO 6886
6739: LD_INT 51
6741: DOUBLE
6742: EQUAL
6743: IFTRUE 6747
6745: GO 6773
6747: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
6748: LD_ADDR_VAR 0 3
6752: PUSH
6753: LD_INT 21
6755: PUSH
6756: LD_INT 22
6758: PUSH
6759: LD_INT 23
6761: PUSH
6762: LD_INT 24
6764: PUSH
6765: EMPTY
6766: LIST
6767: LIST
6768: LIST
6769: LIST
6770: ST_TO_ADDR
6771: GO 6886
6773: LD_INT 52
6775: DOUBLE
6776: EQUAL
6777: IFTRUE 6781
6779: GO 6807
6781: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
6782: LD_ADDR_VAR 0 3
6786: PUSH
6787: LD_INT 21
6789: PUSH
6790: LD_INT 22
6792: PUSH
6793: LD_INT 23
6795: PUSH
6796: LD_INT 24
6798: PUSH
6799: EMPTY
6800: LIST
6801: LIST
6802: LIST
6803: LIST
6804: ST_TO_ADDR
6805: GO 6886
6807: LD_INT 53
6809: DOUBLE
6810: EQUAL
6811: IFTRUE 6815
6813: GO 6833
6815: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
6816: LD_ADDR_VAR 0 3
6820: PUSH
6821: LD_INT 23
6823: PUSH
6824: LD_INT 24
6826: PUSH
6827: EMPTY
6828: LIST
6829: LIST
6830: ST_TO_ADDR
6831: GO 6886
6833: LD_INT 46
6835: DOUBLE
6836: EQUAL
6837: IFTRUE 6841
6839: GO 6859
6841: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
6842: LD_ADDR_VAR 0 3
6846: PUSH
6847: LD_INT 23
6849: PUSH
6850: LD_INT 24
6852: PUSH
6853: EMPTY
6854: LIST
6855: LIST
6856: ST_TO_ADDR
6857: GO 6886
6859: LD_INT 47
6861: DOUBLE
6862: EQUAL
6863: IFTRUE 6867
6865: GO 6885
6867: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
6868: LD_ADDR_VAR 0 3
6872: PUSH
6873: LD_INT 23
6875: PUSH
6876: LD_INT 24
6878: PUSH
6879: EMPTY
6880: LIST
6881: LIST
6882: ST_TO_ADDR
6883: GO 6886
6885: POP
// result := ( chassis in result ) ;
6886: LD_ADDR_VAR 0 3
6890: PUSH
6891: LD_VAR 0 1
6895: PUSH
6896: LD_VAR 0 3
6900: IN
6901: ST_TO_ADDR
// end ;
6902: LD_VAR 0 3
6906: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
6907: LD_INT 0
6909: PPUSH
6910: PPUSH
6911: PPUSH
6912: PPUSH
6913: PPUSH
6914: PPUSH
6915: PPUSH
// result := array ;
6916: LD_ADDR_VAR 0 5
6920: PUSH
6921: LD_VAR 0 1
6925: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
6926: LD_VAR 0 1
6930: NOT
6931: PUSH
6932: LD_VAR 0 2
6936: NOT
6937: OR
6938: PUSH
6939: LD_VAR 0 3
6943: NOT
6944: OR
6945: PUSH
6946: LD_VAR 0 2
6950: PUSH
6951: LD_VAR 0 1
6955: GREATER
6956: OR
6957: PUSH
6958: LD_VAR 0 3
6962: PUSH
6963: LD_VAR 0 1
6967: GREATER
6968: OR
6969: IFFALSE 6973
// exit ;
6971: GO 7269
// if direction then
6973: LD_VAR 0 4
6977: IFFALSE 7041
// begin d := 1 ;
6979: LD_ADDR_VAR 0 9
6983: PUSH
6984: LD_INT 1
6986: ST_TO_ADDR
// if i_from > i_to then
6987: LD_VAR 0 2
6991: PUSH
6992: LD_VAR 0 3
6996: GREATER
6997: IFFALSE 7023
// length := ( array - i_from ) + i_to else
6999: LD_ADDR_VAR 0 11
7003: PUSH
7004: LD_VAR 0 1
7008: PUSH
7009: LD_VAR 0 2
7013: MINUS
7014: PUSH
7015: LD_VAR 0 3
7019: PLUS
7020: ST_TO_ADDR
7021: GO 7039
// length := i_to - i_from ;
7023: LD_ADDR_VAR 0 11
7027: PUSH
7028: LD_VAR 0 3
7032: PUSH
7033: LD_VAR 0 2
7037: MINUS
7038: ST_TO_ADDR
// end else
7039: GO 7102
// begin d := - 1 ;
7041: LD_ADDR_VAR 0 9
7045: PUSH
7046: LD_INT 1
7048: NEG
7049: ST_TO_ADDR
// if i_from > i_to then
7050: LD_VAR 0 2
7054: PUSH
7055: LD_VAR 0 3
7059: GREATER
7060: IFFALSE 7080
// length := i_from - i_to else
7062: LD_ADDR_VAR 0 11
7066: PUSH
7067: LD_VAR 0 2
7071: PUSH
7072: LD_VAR 0 3
7076: MINUS
7077: ST_TO_ADDR
7078: GO 7102
// length := ( array - i_to ) + i_from ;
7080: LD_ADDR_VAR 0 11
7084: PUSH
7085: LD_VAR 0 1
7089: PUSH
7090: LD_VAR 0 3
7094: MINUS
7095: PUSH
7096: LD_VAR 0 2
7100: PLUS
7101: ST_TO_ADDR
// end ; if not length then
7102: LD_VAR 0 11
7106: NOT
7107: IFFALSE 7111
// exit ;
7109: GO 7269
// tmp := array ;
7111: LD_ADDR_VAR 0 10
7115: PUSH
7116: LD_VAR 0 1
7120: ST_TO_ADDR
// for i = 1 to length do
7121: LD_ADDR_VAR 0 6
7125: PUSH
7126: DOUBLE
7127: LD_INT 1
7129: DEC
7130: ST_TO_ADDR
7131: LD_VAR 0 11
7135: PUSH
7136: FOR_TO
7137: IFFALSE 7257
// begin for j = 1 to array do
7139: LD_ADDR_VAR 0 7
7143: PUSH
7144: DOUBLE
7145: LD_INT 1
7147: DEC
7148: ST_TO_ADDR
7149: LD_VAR 0 1
7153: PUSH
7154: FOR_TO
7155: IFFALSE 7243
// begin k := j + d ;
7157: LD_ADDR_VAR 0 8
7161: PUSH
7162: LD_VAR 0 7
7166: PUSH
7167: LD_VAR 0 9
7171: PLUS
7172: ST_TO_ADDR
// if k > array then
7173: LD_VAR 0 8
7177: PUSH
7178: LD_VAR 0 1
7182: GREATER
7183: IFFALSE 7193
// k := 1 ;
7185: LD_ADDR_VAR 0 8
7189: PUSH
7190: LD_INT 1
7192: ST_TO_ADDR
// if not k then
7193: LD_VAR 0 8
7197: NOT
7198: IFFALSE 7210
// k := array ;
7200: LD_ADDR_VAR 0 8
7204: PUSH
7205: LD_VAR 0 1
7209: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
7210: LD_ADDR_VAR 0 10
7214: PUSH
7215: LD_VAR 0 10
7219: PPUSH
7220: LD_VAR 0 8
7224: PPUSH
7225: LD_VAR 0 1
7229: PUSH
7230: LD_VAR 0 7
7234: ARRAY
7235: PPUSH
7236: CALL_OW 1
7240: ST_TO_ADDR
// end ;
7241: GO 7154
7243: POP
7244: POP
// array := tmp ;
7245: LD_ADDR_VAR 0 1
7249: PUSH
7250: LD_VAR 0 10
7254: ST_TO_ADDR
// end ;
7255: GO 7136
7257: POP
7258: POP
// result := array ;
7259: LD_ADDR_VAR 0 5
7263: PUSH
7264: LD_VAR 0 1
7268: ST_TO_ADDR
// end ;
7269: LD_VAR 0 5
7273: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
7274: LD_INT 0
7276: PPUSH
7277: PPUSH
// result := 0 ;
7278: LD_ADDR_VAR 0 3
7282: PUSH
7283: LD_INT 0
7285: ST_TO_ADDR
// if not array or not value in array then
7286: LD_VAR 0 1
7290: NOT
7291: PUSH
7292: LD_VAR 0 2
7296: PUSH
7297: LD_VAR 0 1
7301: IN
7302: NOT
7303: OR
7304: IFFALSE 7308
// exit ;
7306: GO 7362
// for i = 1 to array do
7308: LD_ADDR_VAR 0 4
7312: PUSH
7313: DOUBLE
7314: LD_INT 1
7316: DEC
7317: ST_TO_ADDR
7318: LD_VAR 0 1
7322: PUSH
7323: FOR_TO
7324: IFFALSE 7360
// if value = array [ i ] then
7326: LD_VAR 0 2
7330: PUSH
7331: LD_VAR 0 1
7335: PUSH
7336: LD_VAR 0 4
7340: ARRAY
7341: EQUAL
7342: IFFALSE 7358
// begin result := i ;
7344: LD_ADDR_VAR 0 3
7348: PUSH
7349: LD_VAR 0 4
7353: ST_TO_ADDR
// exit ;
7354: POP
7355: POP
7356: GO 7362
// end ;
7358: GO 7323
7360: POP
7361: POP
// end ;
7362: LD_VAR 0 3
7366: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
7367: LD_INT 0
7369: PPUSH
// vc_chassis := chassis ;
7370: LD_ADDR_OWVAR 37
7374: PUSH
7375: LD_VAR 0 1
7379: ST_TO_ADDR
// vc_engine := engine ;
7380: LD_ADDR_OWVAR 39
7384: PUSH
7385: LD_VAR 0 2
7389: ST_TO_ADDR
// vc_control := control ;
7390: LD_ADDR_OWVAR 38
7394: PUSH
7395: LD_VAR 0 3
7399: ST_TO_ADDR
// vc_weapon := weapon ;
7400: LD_ADDR_OWVAR 40
7404: PUSH
7405: LD_VAR 0 4
7409: ST_TO_ADDR
// vc_fuel_battery := fuel ;
7410: LD_ADDR_OWVAR 41
7414: PUSH
7415: LD_VAR 0 5
7419: ST_TO_ADDR
// end ;
7420: LD_VAR 0 6
7424: RET
// export function WantPlant ( unit ) ; var task ; begin
7425: LD_INT 0
7427: PPUSH
7428: PPUSH
// result := false ;
7429: LD_ADDR_VAR 0 2
7433: PUSH
7434: LD_INT 0
7436: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
7437: LD_ADDR_VAR 0 3
7441: PUSH
7442: LD_VAR 0 1
7446: PPUSH
7447: CALL_OW 437
7451: ST_TO_ADDR
// if task then
7452: LD_VAR 0 3
7456: IFFALSE 7484
// if task [ 1 ] [ 1 ] = p then
7458: LD_VAR 0 3
7462: PUSH
7463: LD_INT 1
7465: ARRAY
7466: PUSH
7467: LD_INT 1
7469: ARRAY
7470: PUSH
7471: LD_STRING p
7473: EQUAL
7474: IFFALSE 7484
// result := true ;
7476: LD_ADDR_VAR 0 2
7480: PUSH
7481: LD_INT 1
7483: ST_TO_ADDR
// end ;
7484: LD_VAR 0 2
7488: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
7489: LD_INT 0
7491: PPUSH
7492: PPUSH
7493: PPUSH
7494: PPUSH
// if pos < 1 then
7495: LD_VAR 0 2
7499: PUSH
7500: LD_INT 1
7502: LESS
7503: IFFALSE 7507
// exit ;
7505: GO 7810
// if pos = 1 then
7507: LD_VAR 0 2
7511: PUSH
7512: LD_INT 1
7514: EQUAL
7515: IFFALSE 7548
// result := Replace ( arr , pos [ 1 ] , value ) else
7517: LD_ADDR_VAR 0 4
7521: PUSH
7522: LD_VAR 0 1
7526: PPUSH
7527: LD_VAR 0 2
7531: PUSH
7532: LD_INT 1
7534: ARRAY
7535: PPUSH
7536: LD_VAR 0 3
7540: PPUSH
7541: CALL_OW 1
7545: ST_TO_ADDR
7546: GO 7810
// begin tmp := arr ;
7548: LD_ADDR_VAR 0 6
7552: PUSH
7553: LD_VAR 0 1
7557: ST_TO_ADDR
// s_arr := [ tmp ] ;
7558: LD_ADDR_VAR 0 7
7562: PUSH
7563: LD_VAR 0 6
7567: PUSH
7568: EMPTY
7569: LIST
7570: ST_TO_ADDR
// for i = 1 to pos - 1 do
7571: LD_ADDR_VAR 0 5
7575: PUSH
7576: DOUBLE
7577: LD_INT 1
7579: DEC
7580: ST_TO_ADDR
7581: LD_VAR 0 2
7585: PUSH
7586: LD_INT 1
7588: MINUS
7589: PUSH
7590: FOR_TO
7591: IFFALSE 7636
// begin tmp := tmp [ pos [ i ] ] ;
7593: LD_ADDR_VAR 0 6
7597: PUSH
7598: LD_VAR 0 6
7602: PUSH
7603: LD_VAR 0 2
7607: PUSH
7608: LD_VAR 0 5
7612: ARRAY
7613: ARRAY
7614: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
7615: LD_ADDR_VAR 0 7
7619: PUSH
7620: LD_VAR 0 7
7624: PUSH
7625: LD_VAR 0 6
7629: PUSH
7630: EMPTY
7631: LIST
7632: ADD
7633: ST_TO_ADDR
// end ;
7634: GO 7590
7636: POP
7637: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
7638: LD_ADDR_VAR 0 6
7642: PUSH
7643: LD_VAR 0 6
7647: PPUSH
7648: LD_VAR 0 2
7652: PUSH
7653: LD_VAR 0 2
7657: ARRAY
7658: PPUSH
7659: LD_VAR 0 3
7663: PPUSH
7664: CALL_OW 1
7668: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
7669: LD_ADDR_VAR 0 7
7673: PUSH
7674: LD_VAR 0 7
7678: PPUSH
7679: LD_VAR 0 7
7683: PPUSH
7684: LD_VAR 0 6
7688: PPUSH
7689: CALL_OW 1
7693: ST_TO_ADDR
// for i = s_arr downto 2 do
7694: LD_ADDR_VAR 0 5
7698: PUSH
7699: DOUBLE
7700: LD_VAR 0 7
7704: INC
7705: ST_TO_ADDR
7706: LD_INT 2
7708: PUSH
7709: FOR_DOWNTO
7710: IFFALSE 7794
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
7712: LD_ADDR_VAR 0 6
7716: PUSH
7717: LD_VAR 0 7
7721: PUSH
7722: LD_VAR 0 5
7726: PUSH
7727: LD_INT 1
7729: MINUS
7730: ARRAY
7731: PPUSH
7732: LD_VAR 0 2
7736: PUSH
7737: LD_VAR 0 5
7741: PUSH
7742: LD_INT 1
7744: MINUS
7745: ARRAY
7746: PPUSH
7747: LD_VAR 0 7
7751: PUSH
7752: LD_VAR 0 5
7756: ARRAY
7757: PPUSH
7758: CALL_OW 1
7762: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
7763: LD_ADDR_VAR 0 7
7767: PUSH
7768: LD_VAR 0 7
7772: PPUSH
7773: LD_VAR 0 5
7777: PUSH
7778: LD_INT 1
7780: MINUS
7781: PPUSH
7782: LD_VAR 0 6
7786: PPUSH
7787: CALL_OW 1
7791: ST_TO_ADDR
// end ;
7792: GO 7709
7794: POP
7795: POP
// result := s_arr [ 1 ] ;
7796: LD_ADDR_VAR 0 4
7800: PUSH
7801: LD_VAR 0 7
7805: PUSH
7806: LD_INT 1
7808: ARRAY
7809: ST_TO_ADDR
// end ; end ;
7810: LD_VAR 0 4
7814: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
7815: LD_INT 0
7817: PPUSH
7818: PPUSH
// if not list then
7819: LD_VAR 0 1
7823: NOT
7824: IFFALSE 7828
// exit ;
7826: GO 7919
// i := list [ pos1 ] ;
7828: LD_ADDR_VAR 0 5
7832: PUSH
7833: LD_VAR 0 1
7837: PUSH
7838: LD_VAR 0 2
7842: ARRAY
7843: ST_TO_ADDR
// if not i then
7844: LD_VAR 0 5
7848: NOT
7849: IFFALSE 7853
// exit ;
7851: GO 7919
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
7853: LD_ADDR_VAR 0 1
7857: PUSH
7858: LD_VAR 0 1
7862: PPUSH
7863: LD_VAR 0 2
7867: PPUSH
7868: LD_VAR 0 1
7872: PUSH
7873: LD_VAR 0 3
7877: ARRAY
7878: PPUSH
7879: CALL_OW 1
7883: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
7884: LD_ADDR_VAR 0 1
7888: PUSH
7889: LD_VAR 0 1
7893: PPUSH
7894: LD_VAR 0 3
7898: PPUSH
7899: LD_VAR 0 5
7903: PPUSH
7904: CALL_OW 1
7908: ST_TO_ADDR
// result := list ;
7909: LD_ADDR_VAR 0 4
7913: PUSH
7914: LD_VAR 0 1
7918: ST_TO_ADDR
// end ;
7919: LD_VAR 0 4
7923: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
7924: LD_INT 0
7926: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
7927: LD_ADDR_VAR 0 5
7931: PUSH
7932: LD_VAR 0 1
7936: PPUSH
7937: CALL_OW 250
7941: PPUSH
7942: LD_VAR 0 1
7946: PPUSH
7947: CALL_OW 251
7951: PPUSH
7952: LD_VAR 0 2
7956: PPUSH
7957: LD_VAR 0 3
7961: PPUSH
7962: LD_VAR 0 4
7966: PPUSH
7967: CALL 8345 0 5
7971: ST_TO_ADDR
// end ;
7972: LD_VAR 0 5
7976: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
7977: LD_INT 0
7979: PPUSH
7980: PPUSH
7981: PPUSH
7982: PPUSH
// if not list or not unit then
7983: LD_VAR 0 2
7987: NOT
7988: PUSH
7989: LD_VAR 0 1
7993: NOT
7994: OR
7995: IFFALSE 7999
// exit ;
7997: GO 8340
// result := [ ] ;
7999: LD_ADDR_VAR 0 5
8003: PUSH
8004: EMPTY
8005: ST_TO_ADDR
// for i in list do
8006: LD_ADDR_VAR 0 6
8010: PUSH
8011: LD_VAR 0 2
8015: PUSH
8016: FOR_IN
8017: IFFALSE 8235
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
8019: LD_ADDR_VAR 0 8
8023: PUSH
8024: LD_VAR 0 1
8028: PPUSH
8029: LD_VAR 0 6
8033: PUSH
8034: LD_INT 1
8036: ARRAY
8037: PPUSH
8038: LD_VAR 0 6
8042: PUSH
8043: LD_INT 2
8045: ARRAY
8046: PPUSH
8047: CALL_OW 297
8051: ST_TO_ADDR
// if not Count ( result ) then
8052: LD_VAR 0 5
8056: PPUSH
8057: CALL 4629 0 1
8061: NOT
8062: IFFALSE 8095
// begin result := Join ( result , [ i , tmp ] ) ;
8064: LD_ADDR_VAR 0 5
8068: PUSH
8069: LD_VAR 0 5
8073: PPUSH
8074: LD_VAR 0 6
8078: PUSH
8079: LD_VAR 0 8
8083: PUSH
8084: EMPTY
8085: LIST
8086: LIST
8087: PPUSH
8088: CALL 40218 0 2
8092: ST_TO_ADDR
// continue ;
8093: GO 8016
// end ; if result [ result ] [ 2 ] <= tmp then
8095: LD_VAR 0 5
8099: PUSH
8100: LD_VAR 0 5
8104: ARRAY
8105: PUSH
8106: LD_INT 2
8108: ARRAY
8109: PUSH
8110: LD_VAR 0 8
8114: LESSEQUAL
8115: IFFALSE 8148
// result := Join ( result , [ i , tmp ] ) else
8117: LD_ADDR_VAR 0 5
8121: PUSH
8122: LD_VAR 0 5
8126: PPUSH
8127: LD_VAR 0 6
8131: PUSH
8132: LD_VAR 0 8
8136: PUSH
8137: EMPTY
8138: LIST
8139: LIST
8140: PPUSH
8141: CALL 40218 0 2
8145: ST_TO_ADDR
8146: GO 8233
// begin for j := 1 to Count ( result ) do
8148: LD_ADDR_VAR 0 7
8152: PUSH
8153: DOUBLE
8154: LD_INT 1
8156: DEC
8157: ST_TO_ADDR
8158: LD_VAR 0 5
8162: PPUSH
8163: CALL 4629 0 1
8167: PUSH
8168: FOR_TO
8169: IFFALSE 8231
// begin if tmp < result [ j ] [ 2 ] then
8171: LD_VAR 0 8
8175: PUSH
8176: LD_VAR 0 5
8180: PUSH
8181: LD_VAR 0 7
8185: ARRAY
8186: PUSH
8187: LD_INT 2
8189: ARRAY
8190: LESS
8191: IFFALSE 8229
// begin result := Insert ( result , j , [ i , tmp ] ) ;
8193: LD_ADDR_VAR 0 5
8197: PUSH
8198: LD_VAR 0 5
8202: PPUSH
8203: LD_VAR 0 7
8207: PPUSH
8208: LD_VAR 0 6
8212: PUSH
8213: LD_VAR 0 8
8217: PUSH
8218: EMPTY
8219: LIST
8220: LIST
8221: PPUSH
8222: CALL_OW 2
8226: ST_TO_ADDR
// break ;
8227: GO 8231
// end ; end ;
8229: GO 8168
8231: POP
8232: POP
// end ; end ;
8233: GO 8016
8235: POP
8236: POP
// if result and not asc then
8237: LD_VAR 0 5
8241: PUSH
8242: LD_VAR 0 3
8246: NOT
8247: AND
8248: IFFALSE 8265
// result := ReverseArray ( result ) ;
8250: LD_ADDR_VAR 0 5
8254: PUSH
8255: LD_VAR 0 5
8259: PPUSH
8260: CALL 35505 0 1
8264: ST_TO_ADDR
// tmp := [ ] ;
8265: LD_ADDR_VAR 0 8
8269: PUSH
8270: EMPTY
8271: ST_TO_ADDR
// if mode then
8272: LD_VAR 0 4
8276: IFFALSE 8340
// begin for i := 1 to result do
8278: LD_ADDR_VAR 0 6
8282: PUSH
8283: DOUBLE
8284: LD_INT 1
8286: DEC
8287: ST_TO_ADDR
8288: LD_VAR 0 5
8292: PUSH
8293: FOR_TO
8294: IFFALSE 8328
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
8296: LD_ADDR_VAR 0 8
8300: PUSH
8301: LD_VAR 0 8
8305: PPUSH
8306: LD_VAR 0 5
8310: PUSH
8311: LD_VAR 0 6
8315: ARRAY
8316: PUSH
8317: LD_INT 1
8319: ARRAY
8320: PPUSH
8321: CALL 40218 0 2
8325: ST_TO_ADDR
8326: GO 8293
8328: POP
8329: POP
// result := tmp ;
8330: LD_ADDR_VAR 0 5
8334: PUSH
8335: LD_VAR 0 8
8339: ST_TO_ADDR
// end ; end ;
8340: LD_VAR 0 5
8344: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
8345: LD_INT 0
8347: PPUSH
8348: PPUSH
8349: PPUSH
8350: PPUSH
// if not list then
8351: LD_VAR 0 3
8355: NOT
8356: IFFALSE 8360
// exit ;
8358: GO 8748
// result := [ ] ;
8360: LD_ADDR_VAR 0 6
8364: PUSH
8365: EMPTY
8366: ST_TO_ADDR
// for i in list do
8367: LD_ADDR_VAR 0 7
8371: PUSH
8372: LD_VAR 0 3
8376: PUSH
8377: FOR_IN
8378: IFFALSE 8580
// begin tmp := GetDistUnitXY ( i , x , y ) ;
8380: LD_ADDR_VAR 0 9
8384: PUSH
8385: LD_VAR 0 7
8389: PPUSH
8390: LD_VAR 0 1
8394: PPUSH
8395: LD_VAR 0 2
8399: PPUSH
8400: CALL_OW 297
8404: ST_TO_ADDR
// if not result then
8405: LD_VAR 0 6
8409: NOT
8410: IFFALSE 8436
// result := [ [ i , tmp ] ] else
8412: LD_ADDR_VAR 0 6
8416: PUSH
8417: LD_VAR 0 7
8421: PUSH
8422: LD_VAR 0 9
8426: PUSH
8427: EMPTY
8428: LIST
8429: LIST
8430: PUSH
8431: EMPTY
8432: LIST
8433: ST_TO_ADDR
8434: GO 8578
// begin if result [ result ] [ 2 ] < tmp then
8436: LD_VAR 0 6
8440: PUSH
8441: LD_VAR 0 6
8445: ARRAY
8446: PUSH
8447: LD_INT 2
8449: ARRAY
8450: PUSH
8451: LD_VAR 0 9
8455: LESS
8456: IFFALSE 8498
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
8458: LD_ADDR_VAR 0 6
8462: PUSH
8463: LD_VAR 0 6
8467: PPUSH
8468: LD_VAR 0 6
8472: PUSH
8473: LD_INT 1
8475: PLUS
8476: PPUSH
8477: LD_VAR 0 7
8481: PUSH
8482: LD_VAR 0 9
8486: PUSH
8487: EMPTY
8488: LIST
8489: LIST
8490: PPUSH
8491: CALL_OW 2
8495: ST_TO_ADDR
8496: GO 8578
// for j = 1 to result do
8498: LD_ADDR_VAR 0 8
8502: PUSH
8503: DOUBLE
8504: LD_INT 1
8506: DEC
8507: ST_TO_ADDR
8508: LD_VAR 0 6
8512: PUSH
8513: FOR_TO
8514: IFFALSE 8576
// begin if tmp < result [ j ] [ 2 ] then
8516: LD_VAR 0 9
8520: PUSH
8521: LD_VAR 0 6
8525: PUSH
8526: LD_VAR 0 8
8530: ARRAY
8531: PUSH
8532: LD_INT 2
8534: ARRAY
8535: LESS
8536: IFFALSE 8574
// begin result := Insert ( result , j , [ i , tmp ] ) ;
8538: LD_ADDR_VAR 0 6
8542: PUSH
8543: LD_VAR 0 6
8547: PPUSH
8548: LD_VAR 0 8
8552: PPUSH
8553: LD_VAR 0 7
8557: PUSH
8558: LD_VAR 0 9
8562: PUSH
8563: EMPTY
8564: LIST
8565: LIST
8566: PPUSH
8567: CALL_OW 2
8571: ST_TO_ADDR
// break ;
8572: GO 8576
// end ; end ;
8574: GO 8513
8576: POP
8577: POP
// end ; end ;
8578: GO 8377
8580: POP
8581: POP
// if result and not asc then
8582: LD_VAR 0 6
8586: PUSH
8587: LD_VAR 0 4
8591: NOT
8592: AND
8593: IFFALSE 8668
// begin tmp := result ;
8595: LD_ADDR_VAR 0 9
8599: PUSH
8600: LD_VAR 0 6
8604: ST_TO_ADDR
// for i = tmp downto 1 do
8605: LD_ADDR_VAR 0 7
8609: PUSH
8610: DOUBLE
8611: LD_VAR 0 9
8615: INC
8616: ST_TO_ADDR
8617: LD_INT 1
8619: PUSH
8620: FOR_DOWNTO
8621: IFFALSE 8666
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
8623: LD_ADDR_VAR 0 6
8627: PUSH
8628: LD_VAR 0 6
8632: PPUSH
8633: LD_VAR 0 9
8637: PUSH
8638: LD_VAR 0 7
8642: MINUS
8643: PUSH
8644: LD_INT 1
8646: PLUS
8647: PPUSH
8648: LD_VAR 0 9
8652: PUSH
8653: LD_VAR 0 7
8657: ARRAY
8658: PPUSH
8659: CALL_OW 1
8663: ST_TO_ADDR
8664: GO 8620
8666: POP
8667: POP
// end ; tmp := [ ] ;
8668: LD_ADDR_VAR 0 9
8672: PUSH
8673: EMPTY
8674: ST_TO_ADDR
// if mode then
8675: LD_VAR 0 5
8679: IFFALSE 8748
// begin for i = 1 to result do
8681: LD_ADDR_VAR 0 7
8685: PUSH
8686: DOUBLE
8687: LD_INT 1
8689: DEC
8690: ST_TO_ADDR
8691: LD_VAR 0 6
8695: PUSH
8696: FOR_TO
8697: IFFALSE 8736
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
8699: LD_ADDR_VAR 0 9
8703: PUSH
8704: LD_VAR 0 9
8708: PPUSH
8709: LD_VAR 0 7
8713: PPUSH
8714: LD_VAR 0 6
8718: PUSH
8719: LD_VAR 0 7
8723: ARRAY
8724: PUSH
8725: LD_INT 1
8727: ARRAY
8728: PPUSH
8729: CALL_OW 1
8733: ST_TO_ADDR
8734: GO 8696
8736: POP
8737: POP
// result := tmp ;
8738: LD_ADDR_VAR 0 6
8742: PUSH
8743: LD_VAR 0 9
8747: ST_TO_ADDR
// end ; end ;
8748: LD_VAR 0 6
8752: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
8753: LD_INT 0
8755: PPUSH
8756: PPUSH
8757: PPUSH
8758: PPUSH
8759: PPUSH
8760: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
8761: LD_ADDR_VAR 0 5
8765: PUSH
8766: LD_INT 0
8768: PUSH
8769: LD_INT 0
8771: PUSH
8772: LD_INT 0
8774: PUSH
8775: EMPTY
8776: PUSH
8777: EMPTY
8778: LIST
8779: LIST
8780: LIST
8781: LIST
8782: ST_TO_ADDR
// if not x or not y then
8783: LD_VAR 0 2
8787: NOT
8788: PUSH
8789: LD_VAR 0 3
8793: NOT
8794: OR
8795: IFFALSE 8799
// exit ;
8797: GO 10449
// if not range then
8799: LD_VAR 0 4
8803: NOT
8804: IFFALSE 8814
// range := 10 ;
8806: LD_ADDR_VAR 0 4
8810: PUSH
8811: LD_INT 10
8813: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
8814: LD_ADDR_VAR 0 8
8818: PUSH
8819: LD_INT 81
8821: PUSH
8822: LD_VAR 0 1
8826: PUSH
8827: EMPTY
8828: LIST
8829: LIST
8830: PUSH
8831: LD_INT 92
8833: PUSH
8834: LD_VAR 0 2
8838: PUSH
8839: LD_VAR 0 3
8843: PUSH
8844: LD_VAR 0 4
8848: PUSH
8849: EMPTY
8850: LIST
8851: LIST
8852: LIST
8853: LIST
8854: PUSH
8855: LD_INT 3
8857: PUSH
8858: LD_INT 21
8860: PUSH
8861: LD_INT 3
8863: PUSH
8864: EMPTY
8865: LIST
8866: LIST
8867: PUSH
8868: EMPTY
8869: LIST
8870: LIST
8871: PUSH
8872: EMPTY
8873: LIST
8874: LIST
8875: LIST
8876: PPUSH
8877: CALL_OW 69
8881: ST_TO_ADDR
// if not tmp then
8882: LD_VAR 0 8
8886: NOT
8887: IFFALSE 8891
// exit ;
8889: GO 10449
// for i in tmp do
8891: LD_ADDR_VAR 0 6
8895: PUSH
8896: LD_VAR 0 8
8900: PUSH
8901: FOR_IN
8902: IFFALSE 10424
// begin points := [ 0 , 0 , 0 ] ;
8904: LD_ADDR_VAR 0 9
8908: PUSH
8909: LD_INT 0
8911: PUSH
8912: LD_INT 0
8914: PUSH
8915: LD_INT 0
8917: PUSH
8918: EMPTY
8919: LIST
8920: LIST
8921: LIST
8922: ST_TO_ADDR
// bpoints := 1 ;
8923: LD_ADDR_VAR 0 10
8927: PUSH
8928: LD_INT 1
8930: ST_TO_ADDR
// case GetType ( i ) of unit_human :
8931: LD_VAR 0 6
8935: PPUSH
8936: CALL_OW 247
8940: PUSH
8941: LD_INT 1
8943: DOUBLE
8944: EQUAL
8945: IFTRUE 8949
8947: GO 9527
8949: POP
// begin if GetClass ( i ) = 1 then
8950: LD_VAR 0 6
8954: PPUSH
8955: CALL_OW 257
8959: PUSH
8960: LD_INT 1
8962: EQUAL
8963: IFFALSE 8984
// points := [ 10 , 5 , 3 ] ;
8965: LD_ADDR_VAR 0 9
8969: PUSH
8970: LD_INT 10
8972: PUSH
8973: LD_INT 5
8975: PUSH
8976: LD_INT 3
8978: PUSH
8979: EMPTY
8980: LIST
8981: LIST
8982: LIST
8983: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
8984: LD_VAR 0 6
8988: PPUSH
8989: CALL_OW 257
8993: PUSH
8994: LD_INT 2
8996: PUSH
8997: LD_INT 3
8999: PUSH
9000: LD_INT 4
9002: PUSH
9003: EMPTY
9004: LIST
9005: LIST
9006: LIST
9007: IN
9008: IFFALSE 9029
// points := [ 3 , 2 , 1 ] ;
9010: LD_ADDR_VAR 0 9
9014: PUSH
9015: LD_INT 3
9017: PUSH
9018: LD_INT 2
9020: PUSH
9021: LD_INT 1
9023: PUSH
9024: EMPTY
9025: LIST
9026: LIST
9027: LIST
9028: ST_TO_ADDR
// if GetClass ( i ) = 5 then
9029: LD_VAR 0 6
9033: PPUSH
9034: CALL_OW 257
9038: PUSH
9039: LD_INT 5
9041: EQUAL
9042: IFFALSE 9063
// points := [ 130 , 5 , 2 ] ;
9044: LD_ADDR_VAR 0 9
9048: PUSH
9049: LD_INT 130
9051: PUSH
9052: LD_INT 5
9054: PUSH
9055: LD_INT 2
9057: PUSH
9058: EMPTY
9059: LIST
9060: LIST
9061: LIST
9062: ST_TO_ADDR
// if GetClass ( i ) = 8 then
9063: LD_VAR 0 6
9067: PPUSH
9068: CALL_OW 257
9072: PUSH
9073: LD_INT 8
9075: EQUAL
9076: IFFALSE 9097
// points := [ 35 , 35 , 30 ] ;
9078: LD_ADDR_VAR 0 9
9082: PUSH
9083: LD_INT 35
9085: PUSH
9086: LD_INT 35
9088: PUSH
9089: LD_INT 30
9091: PUSH
9092: EMPTY
9093: LIST
9094: LIST
9095: LIST
9096: ST_TO_ADDR
// if GetClass ( i ) = 9 then
9097: LD_VAR 0 6
9101: PPUSH
9102: CALL_OW 257
9106: PUSH
9107: LD_INT 9
9109: EQUAL
9110: IFFALSE 9131
// points := [ 20 , 55 , 40 ] ;
9112: LD_ADDR_VAR 0 9
9116: PUSH
9117: LD_INT 20
9119: PUSH
9120: LD_INT 55
9122: PUSH
9123: LD_INT 40
9125: PUSH
9126: EMPTY
9127: LIST
9128: LIST
9129: LIST
9130: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
9131: LD_VAR 0 6
9135: PPUSH
9136: CALL_OW 257
9140: PUSH
9141: LD_INT 12
9143: PUSH
9144: LD_INT 16
9146: PUSH
9147: EMPTY
9148: LIST
9149: LIST
9150: IN
9151: IFFALSE 9172
// points := [ 5 , 3 , 2 ] ;
9153: LD_ADDR_VAR 0 9
9157: PUSH
9158: LD_INT 5
9160: PUSH
9161: LD_INT 3
9163: PUSH
9164: LD_INT 2
9166: PUSH
9167: EMPTY
9168: LIST
9169: LIST
9170: LIST
9171: ST_TO_ADDR
// if GetClass ( i ) = 17 then
9172: LD_VAR 0 6
9176: PPUSH
9177: CALL_OW 257
9181: PUSH
9182: LD_INT 17
9184: EQUAL
9185: IFFALSE 9206
// points := [ 100 , 50 , 75 ] ;
9187: LD_ADDR_VAR 0 9
9191: PUSH
9192: LD_INT 100
9194: PUSH
9195: LD_INT 50
9197: PUSH
9198: LD_INT 75
9200: PUSH
9201: EMPTY
9202: LIST
9203: LIST
9204: LIST
9205: ST_TO_ADDR
// if GetClass ( i ) = 15 then
9206: LD_VAR 0 6
9210: PPUSH
9211: CALL_OW 257
9215: PUSH
9216: LD_INT 15
9218: EQUAL
9219: IFFALSE 9240
// points := [ 10 , 5 , 3 ] ;
9221: LD_ADDR_VAR 0 9
9225: PUSH
9226: LD_INT 10
9228: PUSH
9229: LD_INT 5
9231: PUSH
9232: LD_INT 3
9234: PUSH
9235: EMPTY
9236: LIST
9237: LIST
9238: LIST
9239: ST_TO_ADDR
// if GetClass ( i ) = 14 then
9240: LD_VAR 0 6
9244: PPUSH
9245: CALL_OW 257
9249: PUSH
9250: LD_INT 14
9252: EQUAL
9253: IFFALSE 9274
// points := [ 10 , 0 , 0 ] ;
9255: LD_ADDR_VAR 0 9
9259: PUSH
9260: LD_INT 10
9262: PUSH
9263: LD_INT 0
9265: PUSH
9266: LD_INT 0
9268: PUSH
9269: EMPTY
9270: LIST
9271: LIST
9272: LIST
9273: ST_TO_ADDR
// if GetClass ( i ) = 11 then
9274: LD_VAR 0 6
9278: PPUSH
9279: CALL_OW 257
9283: PUSH
9284: LD_INT 11
9286: EQUAL
9287: IFFALSE 9308
// points := [ 30 , 10 , 5 ] ;
9289: LD_ADDR_VAR 0 9
9293: PUSH
9294: LD_INT 30
9296: PUSH
9297: LD_INT 10
9299: PUSH
9300: LD_INT 5
9302: PUSH
9303: EMPTY
9304: LIST
9305: LIST
9306: LIST
9307: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
9308: LD_VAR 0 1
9312: PPUSH
9313: LD_INT 5
9315: PPUSH
9316: CALL_OW 321
9320: PUSH
9321: LD_INT 2
9323: EQUAL
9324: IFFALSE 9341
// bpoints := bpoints * 1.8 ;
9326: LD_ADDR_VAR 0 10
9330: PUSH
9331: LD_VAR 0 10
9335: PUSH
9336: LD_REAL  1.80000000000000E+0000
9339: MUL
9340: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
9341: LD_VAR 0 6
9345: PPUSH
9346: CALL_OW 257
9350: PUSH
9351: LD_INT 1
9353: PUSH
9354: LD_INT 2
9356: PUSH
9357: LD_INT 3
9359: PUSH
9360: LD_INT 4
9362: PUSH
9363: EMPTY
9364: LIST
9365: LIST
9366: LIST
9367: LIST
9368: IN
9369: PUSH
9370: LD_VAR 0 1
9374: PPUSH
9375: LD_INT 51
9377: PPUSH
9378: CALL_OW 321
9382: PUSH
9383: LD_INT 2
9385: EQUAL
9386: AND
9387: IFFALSE 9404
// bpoints := bpoints * 1.2 ;
9389: LD_ADDR_VAR 0 10
9393: PUSH
9394: LD_VAR 0 10
9398: PUSH
9399: LD_REAL  1.20000000000000E+0000
9402: MUL
9403: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
9404: LD_VAR 0 6
9408: PPUSH
9409: CALL_OW 257
9413: PUSH
9414: LD_INT 5
9416: PUSH
9417: LD_INT 7
9419: PUSH
9420: LD_INT 9
9422: PUSH
9423: EMPTY
9424: LIST
9425: LIST
9426: LIST
9427: IN
9428: PUSH
9429: LD_VAR 0 1
9433: PPUSH
9434: LD_INT 52
9436: PPUSH
9437: CALL_OW 321
9441: PUSH
9442: LD_INT 2
9444: EQUAL
9445: AND
9446: IFFALSE 9463
// bpoints := bpoints * 1.5 ;
9448: LD_ADDR_VAR 0 10
9452: PUSH
9453: LD_VAR 0 10
9457: PUSH
9458: LD_REAL  1.50000000000000E+0000
9461: MUL
9462: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
9463: LD_VAR 0 1
9467: PPUSH
9468: LD_INT 66
9470: PPUSH
9471: CALL_OW 321
9475: PUSH
9476: LD_INT 2
9478: EQUAL
9479: IFFALSE 9496
// bpoints := bpoints * 1.1 ;
9481: LD_ADDR_VAR 0 10
9485: PUSH
9486: LD_VAR 0 10
9490: PUSH
9491: LD_REAL  1.10000000000000E+0000
9494: MUL
9495: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
9496: LD_ADDR_VAR 0 10
9500: PUSH
9501: LD_VAR 0 10
9505: PUSH
9506: LD_VAR 0 6
9510: PPUSH
9511: LD_INT 1
9513: PPUSH
9514: CALL_OW 259
9518: PUSH
9519: LD_REAL  1.15000000000000E+0000
9522: MUL
9523: MUL
9524: ST_TO_ADDR
// end ; unit_vehicle :
9525: GO 10353
9527: LD_INT 2
9529: DOUBLE
9530: EQUAL
9531: IFTRUE 9535
9533: GO 10341
9535: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
9536: LD_VAR 0 6
9540: PPUSH
9541: CALL_OW 264
9545: PUSH
9546: LD_INT 2
9548: PUSH
9549: LD_INT 42
9551: PUSH
9552: LD_INT 24
9554: PUSH
9555: EMPTY
9556: LIST
9557: LIST
9558: LIST
9559: IN
9560: IFFALSE 9581
// points := [ 25 , 5 , 3 ] ;
9562: LD_ADDR_VAR 0 9
9566: PUSH
9567: LD_INT 25
9569: PUSH
9570: LD_INT 5
9572: PUSH
9573: LD_INT 3
9575: PUSH
9576: EMPTY
9577: LIST
9578: LIST
9579: LIST
9580: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
9581: LD_VAR 0 6
9585: PPUSH
9586: CALL_OW 264
9590: PUSH
9591: LD_INT 4
9593: PUSH
9594: LD_INT 43
9596: PUSH
9597: LD_INT 25
9599: PUSH
9600: EMPTY
9601: LIST
9602: LIST
9603: LIST
9604: IN
9605: IFFALSE 9626
// points := [ 40 , 15 , 5 ] ;
9607: LD_ADDR_VAR 0 9
9611: PUSH
9612: LD_INT 40
9614: PUSH
9615: LD_INT 15
9617: PUSH
9618: LD_INT 5
9620: PUSH
9621: EMPTY
9622: LIST
9623: LIST
9624: LIST
9625: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
9626: LD_VAR 0 6
9630: PPUSH
9631: CALL_OW 264
9635: PUSH
9636: LD_INT 3
9638: PUSH
9639: LD_INT 23
9641: PUSH
9642: EMPTY
9643: LIST
9644: LIST
9645: IN
9646: IFFALSE 9667
// points := [ 7 , 25 , 8 ] ;
9648: LD_ADDR_VAR 0 9
9652: PUSH
9653: LD_INT 7
9655: PUSH
9656: LD_INT 25
9658: PUSH
9659: LD_INT 8
9661: PUSH
9662: EMPTY
9663: LIST
9664: LIST
9665: LIST
9666: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
9667: LD_VAR 0 6
9671: PPUSH
9672: CALL_OW 264
9676: PUSH
9677: LD_INT 5
9679: PUSH
9680: LD_INT 27
9682: PUSH
9683: LD_INT 44
9685: PUSH
9686: EMPTY
9687: LIST
9688: LIST
9689: LIST
9690: IN
9691: IFFALSE 9712
// points := [ 14 , 50 , 16 ] ;
9693: LD_ADDR_VAR 0 9
9697: PUSH
9698: LD_INT 14
9700: PUSH
9701: LD_INT 50
9703: PUSH
9704: LD_INT 16
9706: PUSH
9707: EMPTY
9708: LIST
9709: LIST
9710: LIST
9711: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
9712: LD_VAR 0 6
9716: PPUSH
9717: CALL_OW 264
9721: PUSH
9722: LD_INT 6
9724: PUSH
9725: LD_INT 46
9727: PUSH
9728: EMPTY
9729: LIST
9730: LIST
9731: IN
9732: IFFALSE 9753
// points := [ 32 , 120 , 70 ] ;
9734: LD_ADDR_VAR 0 9
9738: PUSH
9739: LD_INT 32
9741: PUSH
9742: LD_INT 120
9744: PUSH
9745: LD_INT 70
9747: PUSH
9748: EMPTY
9749: LIST
9750: LIST
9751: LIST
9752: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
9753: LD_VAR 0 6
9757: PPUSH
9758: CALL_OW 264
9762: PUSH
9763: LD_INT 7
9765: PUSH
9766: LD_INT 28
9768: PUSH
9769: LD_INT 45
9771: PUSH
9772: LD_INT 92
9774: PUSH
9775: EMPTY
9776: LIST
9777: LIST
9778: LIST
9779: LIST
9780: IN
9781: IFFALSE 9802
// points := [ 35 , 20 , 45 ] ;
9783: LD_ADDR_VAR 0 9
9787: PUSH
9788: LD_INT 35
9790: PUSH
9791: LD_INT 20
9793: PUSH
9794: LD_INT 45
9796: PUSH
9797: EMPTY
9798: LIST
9799: LIST
9800: LIST
9801: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
9802: LD_VAR 0 6
9806: PPUSH
9807: CALL_OW 264
9811: PUSH
9812: LD_INT 47
9814: PUSH
9815: EMPTY
9816: LIST
9817: IN
9818: IFFALSE 9839
// points := [ 67 , 45 , 75 ] ;
9820: LD_ADDR_VAR 0 9
9824: PUSH
9825: LD_INT 67
9827: PUSH
9828: LD_INT 45
9830: PUSH
9831: LD_INT 75
9833: PUSH
9834: EMPTY
9835: LIST
9836: LIST
9837: LIST
9838: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
9839: LD_VAR 0 6
9843: PPUSH
9844: CALL_OW 264
9848: PUSH
9849: LD_INT 26
9851: PUSH
9852: EMPTY
9853: LIST
9854: IN
9855: IFFALSE 9876
// points := [ 120 , 30 , 80 ] ;
9857: LD_ADDR_VAR 0 9
9861: PUSH
9862: LD_INT 120
9864: PUSH
9865: LD_INT 30
9867: PUSH
9868: LD_INT 80
9870: PUSH
9871: EMPTY
9872: LIST
9873: LIST
9874: LIST
9875: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
9876: LD_VAR 0 6
9880: PPUSH
9881: CALL_OW 264
9885: PUSH
9886: LD_INT 22
9888: PUSH
9889: EMPTY
9890: LIST
9891: IN
9892: IFFALSE 9913
// points := [ 40 , 1 , 1 ] ;
9894: LD_ADDR_VAR 0 9
9898: PUSH
9899: LD_INT 40
9901: PUSH
9902: LD_INT 1
9904: PUSH
9905: LD_INT 1
9907: PUSH
9908: EMPTY
9909: LIST
9910: LIST
9911: LIST
9912: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
9913: LD_VAR 0 6
9917: PPUSH
9918: CALL_OW 264
9922: PUSH
9923: LD_INT 29
9925: PUSH
9926: EMPTY
9927: LIST
9928: IN
9929: IFFALSE 9950
// points := [ 70 , 200 , 400 ] ;
9931: LD_ADDR_VAR 0 9
9935: PUSH
9936: LD_INT 70
9938: PUSH
9939: LD_INT 200
9941: PUSH
9942: LD_INT 400
9944: PUSH
9945: EMPTY
9946: LIST
9947: LIST
9948: LIST
9949: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
9950: LD_VAR 0 6
9954: PPUSH
9955: CALL_OW 264
9959: PUSH
9960: LD_INT 14
9962: PUSH
9963: LD_INT 53
9965: PUSH
9966: EMPTY
9967: LIST
9968: LIST
9969: IN
9970: IFFALSE 9991
// points := [ 40 , 10 , 20 ] ;
9972: LD_ADDR_VAR 0 9
9976: PUSH
9977: LD_INT 40
9979: PUSH
9980: LD_INT 10
9982: PUSH
9983: LD_INT 20
9985: PUSH
9986: EMPTY
9987: LIST
9988: LIST
9989: LIST
9990: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
9991: LD_VAR 0 6
9995: PPUSH
9996: CALL_OW 264
10000: PUSH
10001: LD_INT 9
10003: PUSH
10004: EMPTY
10005: LIST
10006: IN
10007: IFFALSE 10028
// points := [ 5 , 70 , 20 ] ;
10009: LD_ADDR_VAR 0 9
10013: PUSH
10014: LD_INT 5
10016: PUSH
10017: LD_INT 70
10019: PUSH
10020: LD_INT 20
10022: PUSH
10023: EMPTY
10024: LIST
10025: LIST
10026: LIST
10027: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
10028: LD_VAR 0 6
10032: PPUSH
10033: CALL_OW 264
10037: PUSH
10038: LD_INT 10
10040: PUSH
10041: EMPTY
10042: LIST
10043: IN
10044: IFFALSE 10065
// points := [ 35 , 110 , 70 ] ;
10046: LD_ADDR_VAR 0 9
10050: PUSH
10051: LD_INT 35
10053: PUSH
10054: LD_INT 110
10056: PUSH
10057: LD_INT 70
10059: PUSH
10060: EMPTY
10061: LIST
10062: LIST
10063: LIST
10064: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
10065: LD_VAR 0 6
10069: PPUSH
10070: CALL_OW 265
10074: PUSH
10075: LD_INT 25
10077: EQUAL
10078: IFFALSE 10099
// points := [ 80 , 65 , 100 ] ;
10080: LD_ADDR_VAR 0 9
10084: PUSH
10085: LD_INT 80
10087: PUSH
10088: LD_INT 65
10090: PUSH
10091: LD_INT 100
10093: PUSH
10094: EMPTY
10095: LIST
10096: LIST
10097: LIST
10098: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
10099: LD_VAR 0 6
10103: PPUSH
10104: CALL_OW 263
10108: PUSH
10109: LD_INT 1
10111: EQUAL
10112: IFFALSE 10147
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
10114: LD_ADDR_VAR 0 10
10118: PUSH
10119: LD_VAR 0 10
10123: PUSH
10124: LD_VAR 0 6
10128: PPUSH
10129: CALL_OW 311
10133: PPUSH
10134: LD_INT 3
10136: PPUSH
10137: CALL_OW 259
10141: PUSH
10142: LD_INT 4
10144: MUL
10145: MUL
10146: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
10147: LD_VAR 0 6
10151: PPUSH
10152: CALL_OW 263
10156: PUSH
10157: LD_INT 2
10159: EQUAL
10160: IFFALSE 10211
// begin j := IsControledBy ( i ) ;
10162: LD_ADDR_VAR 0 7
10166: PUSH
10167: LD_VAR 0 6
10171: PPUSH
10172: CALL_OW 312
10176: ST_TO_ADDR
// if j then
10177: LD_VAR 0 7
10181: IFFALSE 10211
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
10183: LD_ADDR_VAR 0 10
10187: PUSH
10188: LD_VAR 0 10
10192: PUSH
10193: LD_VAR 0 7
10197: PPUSH
10198: LD_INT 3
10200: PPUSH
10201: CALL_OW 259
10205: PUSH
10206: LD_INT 3
10208: MUL
10209: MUL
10210: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
10211: LD_VAR 0 6
10215: PPUSH
10216: CALL_OW 264
10220: PUSH
10221: LD_INT 5
10223: PUSH
10224: LD_INT 6
10226: PUSH
10227: LD_INT 46
10229: PUSH
10230: LD_INT 44
10232: PUSH
10233: LD_INT 47
10235: PUSH
10236: LD_INT 45
10238: PUSH
10239: LD_INT 28
10241: PUSH
10242: LD_INT 7
10244: PUSH
10245: LD_INT 27
10247: PUSH
10248: LD_INT 29
10250: PUSH
10251: EMPTY
10252: LIST
10253: LIST
10254: LIST
10255: LIST
10256: LIST
10257: LIST
10258: LIST
10259: LIST
10260: LIST
10261: LIST
10262: IN
10263: PUSH
10264: LD_VAR 0 1
10268: PPUSH
10269: LD_INT 52
10271: PPUSH
10272: CALL_OW 321
10276: PUSH
10277: LD_INT 2
10279: EQUAL
10280: AND
10281: IFFALSE 10298
// bpoints := bpoints * 1.2 ;
10283: LD_ADDR_VAR 0 10
10287: PUSH
10288: LD_VAR 0 10
10292: PUSH
10293: LD_REAL  1.20000000000000E+0000
10296: MUL
10297: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
10298: LD_VAR 0 6
10302: PPUSH
10303: CALL_OW 264
10307: PUSH
10308: LD_INT 6
10310: PUSH
10311: LD_INT 46
10313: PUSH
10314: LD_INT 47
10316: PUSH
10317: EMPTY
10318: LIST
10319: LIST
10320: LIST
10321: IN
10322: IFFALSE 10339
// bpoints := bpoints * 1.2 ;
10324: LD_ADDR_VAR 0 10
10328: PUSH
10329: LD_VAR 0 10
10333: PUSH
10334: LD_REAL  1.20000000000000E+0000
10337: MUL
10338: ST_TO_ADDR
// end ; unit_building :
10339: GO 10353
10341: LD_INT 3
10343: DOUBLE
10344: EQUAL
10345: IFTRUE 10349
10347: GO 10352
10349: POP
// ; end ;
10350: GO 10353
10352: POP
// for j = 1 to 3 do
10353: LD_ADDR_VAR 0 7
10357: PUSH
10358: DOUBLE
10359: LD_INT 1
10361: DEC
10362: ST_TO_ADDR
10363: LD_INT 3
10365: PUSH
10366: FOR_TO
10367: IFFALSE 10420
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
10369: LD_ADDR_VAR 0 5
10373: PUSH
10374: LD_VAR 0 5
10378: PPUSH
10379: LD_VAR 0 7
10383: PPUSH
10384: LD_VAR 0 5
10388: PUSH
10389: LD_VAR 0 7
10393: ARRAY
10394: PUSH
10395: LD_VAR 0 9
10399: PUSH
10400: LD_VAR 0 7
10404: ARRAY
10405: PUSH
10406: LD_VAR 0 10
10410: MUL
10411: PLUS
10412: PPUSH
10413: CALL_OW 1
10417: ST_TO_ADDR
10418: GO 10366
10420: POP
10421: POP
// end ;
10422: GO 8901
10424: POP
10425: POP
// result := Replace ( result , 4 , tmp ) ;
10426: LD_ADDR_VAR 0 5
10430: PUSH
10431: LD_VAR 0 5
10435: PPUSH
10436: LD_INT 4
10438: PPUSH
10439: LD_VAR 0 8
10443: PPUSH
10444: CALL_OW 1
10448: ST_TO_ADDR
// end ;
10449: LD_VAR 0 5
10453: RET
// export function DangerAtRange ( unit , range ) ; begin
10454: LD_INT 0
10456: PPUSH
// if not unit then
10457: LD_VAR 0 1
10461: NOT
10462: IFFALSE 10466
// exit ;
10464: GO 10511
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
10466: LD_ADDR_VAR 0 3
10470: PUSH
10471: LD_VAR 0 1
10475: PPUSH
10476: CALL_OW 255
10480: PPUSH
10481: LD_VAR 0 1
10485: PPUSH
10486: CALL_OW 250
10490: PPUSH
10491: LD_VAR 0 1
10495: PPUSH
10496: CALL_OW 251
10500: PPUSH
10501: LD_VAR 0 2
10505: PPUSH
10506: CALL 8753 0 4
10510: ST_TO_ADDR
// end ;
10511: LD_VAR 0 3
10515: RET
// export function DangerInArea ( side , area ) ; begin
10516: LD_INT 0
10518: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
10519: LD_ADDR_VAR 0 3
10523: PUSH
10524: LD_VAR 0 2
10528: PPUSH
10529: LD_INT 81
10531: PUSH
10532: LD_VAR 0 1
10536: PUSH
10537: EMPTY
10538: LIST
10539: LIST
10540: PPUSH
10541: CALL_OW 70
10545: ST_TO_ADDR
// end ;
10546: LD_VAR 0 3
10550: RET
// export function IsExtension ( b ) ; begin
10551: LD_INT 0
10553: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
10554: LD_ADDR_VAR 0 2
10558: PUSH
10559: LD_VAR 0 1
10563: PUSH
10564: LD_INT 23
10566: PUSH
10567: LD_INT 20
10569: PUSH
10570: LD_INT 22
10572: PUSH
10573: LD_INT 17
10575: PUSH
10576: LD_INT 24
10578: PUSH
10579: LD_INT 21
10581: PUSH
10582: LD_INT 19
10584: PUSH
10585: LD_INT 16
10587: PUSH
10588: LD_INT 25
10590: PUSH
10591: LD_INT 18
10593: PUSH
10594: EMPTY
10595: LIST
10596: LIST
10597: LIST
10598: LIST
10599: LIST
10600: LIST
10601: LIST
10602: LIST
10603: LIST
10604: LIST
10605: IN
10606: ST_TO_ADDR
// end ;
10607: LD_VAR 0 2
10611: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
10612: LD_INT 0
10614: PPUSH
10615: PPUSH
10616: PPUSH
// result := [ ] ;
10617: LD_ADDR_VAR 0 4
10621: PUSH
10622: EMPTY
10623: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
10624: LD_ADDR_VAR 0 5
10628: PUSH
10629: LD_VAR 0 2
10633: PPUSH
10634: LD_INT 21
10636: PUSH
10637: LD_INT 3
10639: PUSH
10640: EMPTY
10641: LIST
10642: LIST
10643: PPUSH
10644: CALL_OW 70
10648: ST_TO_ADDR
// if not tmp then
10649: LD_VAR 0 5
10653: NOT
10654: IFFALSE 10658
// exit ;
10656: GO 10722
// if checkLink then
10658: LD_VAR 0 3
10662: IFFALSE 10712
// begin for i in tmp do
10664: LD_ADDR_VAR 0 6
10668: PUSH
10669: LD_VAR 0 5
10673: PUSH
10674: FOR_IN
10675: IFFALSE 10710
// if GetBase ( i ) <> base then
10677: LD_VAR 0 6
10681: PPUSH
10682: CALL_OW 274
10686: PUSH
10687: LD_VAR 0 1
10691: NONEQUAL
10692: IFFALSE 10708
// ComLinkToBase ( base , i ) ;
10694: LD_VAR 0 1
10698: PPUSH
10699: LD_VAR 0 6
10703: PPUSH
10704: CALL_OW 169
10708: GO 10674
10710: POP
10711: POP
// end ; result := tmp ;
10712: LD_ADDR_VAR 0 4
10716: PUSH
10717: LD_VAR 0 5
10721: ST_TO_ADDR
// end ;
10722: LD_VAR 0 4
10726: RET
// export function ComComplete ( units , b ) ; var i ; begin
10727: LD_INT 0
10729: PPUSH
10730: PPUSH
// if not units then
10731: LD_VAR 0 1
10735: NOT
10736: IFFALSE 10740
// exit ;
10738: GO 10830
// for i in units do
10740: LD_ADDR_VAR 0 4
10744: PUSH
10745: LD_VAR 0 1
10749: PUSH
10750: FOR_IN
10751: IFFALSE 10828
// if BuildingStatus ( b ) = bs_build then
10753: LD_VAR 0 2
10757: PPUSH
10758: CALL_OW 461
10762: PUSH
10763: LD_INT 1
10765: EQUAL
10766: IFFALSE 10826
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
10768: LD_VAR 0 4
10772: PPUSH
10773: LD_STRING h
10775: PUSH
10776: LD_VAR 0 2
10780: PPUSH
10781: CALL_OW 250
10785: PUSH
10786: LD_VAR 0 2
10790: PPUSH
10791: CALL_OW 251
10795: PUSH
10796: LD_VAR 0 2
10800: PUSH
10801: LD_INT 0
10803: PUSH
10804: LD_INT 0
10806: PUSH
10807: LD_INT 0
10809: PUSH
10810: EMPTY
10811: LIST
10812: LIST
10813: LIST
10814: LIST
10815: LIST
10816: LIST
10817: LIST
10818: PUSH
10819: EMPTY
10820: LIST
10821: PPUSH
10822: CALL_OW 446
10826: GO 10750
10828: POP
10829: POP
// end ;
10830: LD_VAR 0 3
10834: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
10835: LD_INT 0
10837: PPUSH
10838: PPUSH
10839: PPUSH
10840: PPUSH
10841: PPUSH
10842: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
10843: LD_VAR 0 1
10847: NOT
10848: PUSH
10849: LD_VAR 0 1
10853: PPUSH
10854: CALL_OW 263
10858: PUSH
10859: LD_INT 2
10861: NONEQUAL
10862: OR
10863: IFFALSE 10867
// exit ;
10865: GO 11183
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
10867: LD_ADDR_VAR 0 6
10871: PUSH
10872: LD_INT 22
10874: PUSH
10875: LD_VAR 0 1
10879: PPUSH
10880: CALL_OW 255
10884: PUSH
10885: EMPTY
10886: LIST
10887: LIST
10888: PUSH
10889: LD_INT 2
10891: PUSH
10892: LD_INT 30
10894: PUSH
10895: LD_INT 36
10897: PUSH
10898: EMPTY
10899: LIST
10900: LIST
10901: PUSH
10902: LD_INT 34
10904: PUSH
10905: LD_INT 31
10907: PUSH
10908: EMPTY
10909: LIST
10910: LIST
10911: PUSH
10912: EMPTY
10913: LIST
10914: LIST
10915: LIST
10916: PUSH
10917: EMPTY
10918: LIST
10919: LIST
10920: PPUSH
10921: CALL_OW 69
10925: ST_TO_ADDR
// if not tmp then
10926: LD_VAR 0 6
10930: NOT
10931: IFFALSE 10935
// exit ;
10933: GO 11183
// result := [ ] ;
10935: LD_ADDR_VAR 0 2
10939: PUSH
10940: EMPTY
10941: ST_TO_ADDR
// for i in tmp do
10942: LD_ADDR_VAR 0 3
10946: PUSH
10947: LD_VAR 0 6
10951: PUSH
10952: FOR_IN
10953: IFFALSE 11024
// begin t := UnitsInside ( i ) ;
10955: LD_ADDR_VAR 0 4
10959: PUSH
10960: LD_VAR 0 3
10964: PPUSH
10965: CALL_OW 313
10969: ST_TO_ADDR
// if t then
10970: LD_VAR 0 4
10974: IFFALSE 11022
// for j in t do
10976: LD_ADDR_VAR 0 7
10980: PUSH
10981: LD_VAR 0 4
10985: PUSH
10986: FOR_IN
10987: IFFALSE 11020
// result := Replace ( result , result + 1 , j ) ;
10989: LD_ADDR_VAR 0 2
10993: PUSH
10994: LD_VAR 0 2
10998: PPUSH
10999: LD_VAR 0 2
11003: PUSH
11004: LD_INT 1
11006: PLUS
11007: PPUSH
11008: LD_VAR 0 7
11012: PPUSH
11013: CALL_OW 1
11017: ST_TO_ADDR
11018: GO 10986
11020: POP
11021: POP
// end ;
11022: GO 10952
11024: POP
11025: POP
// if not result then
11026: LD_VAR 0 2
11030: NOT
11031: IFFALSE 11035
// exit ;
11033: GO 11183
// mech := result [ 1 ] ;
11035: LD_ADDR_VAR 0 5
11039: PUSH
11040: LD_VAR 0 2
11044: PUSH
11045: LD_INT 1
11047: ARRAY
11048: ST_TO_ADDR
// if result > 1 then
11049: LD_VAR 0 2
11053: PUSH
11054: LD_INT 1
11056: GREATER
11057: IFFALSE 11169
// begin for i = 2 to result do
11059: LD_ADDR_VAR 0 3
11063: PUSH
11064: DOUBLE
11065: LD_INT 2
11067: DEC
11068: ST_TO_ADDR
11069: LD_VAR 0 2
11073: PUSH
11074: FOR_TO
11075: IFFALSE 11167
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
11077: LD_ADDR_VAR 0 4
11081: PUSH
11082: LD_VAR 0 2
11086: PUSH
11087: LD_VAR 0 3
11091: ARRAY
11092: PPUSH
11093: LD_INT 3
11095: PPUSH
11096: CALL_OW 259
11100: PUSH
11101: LD_VAR 0 2
11105: PUSH
11106: LD_VAR 0 3
11110: ARRAY
11111: PPUSH
11112: CALL_OW 432
11116: MINUS
11117: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
11118: LD_VAR 0 4
11122: PUSH
11123: LD_VAR 0 5
11127: PPUSH
11128: LD_INT 3
11130: PPUSH
11131: CALL_OW 259
11135: PUSH
11136: LD_VAR 0 5
11140: PPUSH
11141: CALL_OW 432
11145: MINUS
11146: GREATEREQUAL
11147: IFFALSE 11165
// mech := result [ i ] ;
11149: LD_ADDR_VAR 0 5
11153: PUSH
11154: LD_VAR 0 2
11158: PUSH
11159: LD_VAR 0 3
11163: ARRAY
11164: ST_TO_ADDR
// end ;
11165: GO 11074
11167: POP
11168: POP
// end ; ComLinkTo ( vehicle , mech ) ;
11169: LD_VAR 0 1
11173: PPUSH
11174: LD_VAR 0 5
11178: PPUSH
11179: CALL_OW 135
// end ;
11183: LD_VAR 0 2
11187: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
11188: LD_INT 0
11190: PPUSH
11191: PPUSH
11192: PPUSH
11193: PPUSH
11194: PPUSH
11195: PPUSH
11196: PPUSH
11197: PPUSH
11198: PPUSH
11199: PPUSH
11200: PPUSH
11201: PPUSH
11202: PPUSH
// result := [ ] ;
11203: LD_ADDR_VAR 0 7
11207: PUSH
11208: EMPTY
11209: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
11210: LD_VAR 0 1
11214: PPUSH
11215: CALL_OW 266
11219: PUSH
11220: LD_INT 0
11222: PUSH
11223: LD_INT 1
11225: PUSH
11226: EMPTY
11227: LIST
11228: LIST
11229: IN
11230: NOT
11231: IFFALSE 11235
// exit ;
11233: GO 12869
// if name then
11235: LD_VAR 0 3
11239: IFFALSE 11255
// SetBName ( base_dep , name ) ;
11241: LD_VAR 0 1
11245: PPUSH
11246: LD_VAR 0 3
11250: PPUSH
11251: CALL_OW 500
// base := GetBase ( base_dep ) ;
11255: LD_ADDR_VAR 0 15
11259: PUSH
11260: LD_VAR 0 1
11264: PPUSH
11265: CALL_OW 274
11269: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
11270: LD_ADDR_VAR 0 16
11274: PUSH
11275: LD_VAR 0 1
11279: PPUSH
11280: CALL_OW 255
11284: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
11285: LD_ADDR_VAR 0 17
11289: PUSH
11290: LD_VAR 0 1
11294: PPUSH
11295: CALL_OW 248
11299: ST_TO_ADDR
// if sources then
11300: LD_VAR 0 5
11304: IFFALSE 11351
// for i = 1 to 3 do
11306: LD_ADDR_VAR 0 8
11310: PUSH
11311: DOUBLE
11312: LD_INT 1
11314: DEC
11315: ST_TO_ADDR
11316: LD_INT 3
11318: PUSH
11319: FOR_TO
11320: IFFALSE 11349
// AddResourceType ( base , i , sources [ i ] ) ;
11322: LD_VAR 0 15
11326: PPUSH
11327: LD_VAR 0 8
11331: PPUSH
11332: LD_VAR 0 5
11336: PUSH
11337: LD_VAR 0 8
11341: ARRAY
11342: PPUSH
11343: CALL_OW 276
11347: GO 11319
11349: POP
11350: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
11351: LD_ADDR_VAR 0 18
11355: PUSH
11356: LD_VAR 0 15
11360: PPUSH
11361: LD_VAR 0 2
11365: PPUSH
11366: LD_INT 1
11368: PPUSH
11369: CALL 10612 0 3
11373: ST_TO_ADDR
// InitHc ;
11374: CALL_OW 19
// InitUc ;
11378: CALL_OW 18
// uc_side := side ;
11382: LD_ADDR_OWVAR 20
11386: PUSH
11387: LD_VAR 0 16
11391: ST_TO_ADDR
// uc_nation := nation ;
11392: LD_ADDR_OWVAR 21
11396: PUSH
11397: LD_VAR 0 17
11401: ST_TO_ADDR
// if buildings then
11402: LD_VAR 0 18
11406: IFFALSE 12728
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
11408: LD_ADDR_VAR 0 19
11412: PUSH
11413: LD_VAR 0 18
11417: PPUSH
11418: LD_INT 2
11420: PUSH
11421: LD_INT 30
11423: PUSH
11424: LD_INT 29
11426: PUSH
11427: EMPTY
11428: LIST
11429: LIST
11430: PUSH
11431: LD_INT 30
11433: PUSH
11434: LD_INT 30
11436: PUSH
11437: EMPTY
11438: LIST
11439: LIST
11440: PUSH
11441: EMPTY
11442: LIST
11443: LIST
11444: LIST
11445: PPUSH
11446: CALL_OW 72
11450: ST_TO_ADDR
// if tmp then
11451: LD_VAR 0 19
11455: IFFALSE 11503
// for i in tmp do
11457: LD_ADDR_VAR 0 8
11461: PUSH
11462: LD_VAR 0 19
11466: PUSH
11467: FOR_IN
11468: IFFALSE 11501
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
11470: LD_VAR 0 8
11474: PPUSH
11475: CALL_OW 250
11479: PPUSH
11480: LD_VAR 0 8
11484: PPUSH
11485: CALL_OW 251
11489: PPUSH
11490: LD_VAR 0 16
11494: PPUSH
11495: CALL_OW 441
11499: GO 11467
11501: POP
11502: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
11503: LD_VAR 0 18
11507: PPUSH
11508: LD_INT 2
11510: PUSH
11511: LD_INT 30
11513: PUSH
11514: LD_INT 32
11516: PUSH
11517: EMPTY
11518: LIST
11519: LIST
11520: PUSH
11521: LD_INT 30
11523: PUSH
11524: LD_INT 33
11526: PUSH
11527: EMPTY
11528: LIST
11529: LIST
11530: PUSH
11531: EMPTY
11532: LIST
11533: LIST
11534: LIST
11535: PPUSH
11536: CALL_OW 72
11540: IFFALSE 11628
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
11542: LD_ADDR_VAR 0 8
11546: PUSH
11547: LD_VAR 0 18
11551: PPUSH
11552: LD_INT 2
11554: PUSH
11555: LD_INT 30
11557: PUSH
11558: LD_INT 32
11560: PUSH
11561: EMPTY
11562: LIST
11563: LIST
11564: PUSH
11565: LD_INT 30
11567: PUSH
11568: LD_INT 33
11570: PUSH
11571: EMPTY
11572: LIST
11573: LIST
11574: PUSH
11575: EMPTY
11576: LIST
11577: LIST
11578: LIST
11579: PPUSH
11580: CALL_OW 72
11584: PUSH
11585: FOR_IN
11586: IFFALSE 11626
// begin if not GetBWeapon ( i ) then
11588: LD_VAR 0 8
11592: PPUSH
11593: CALL_OW 269
11597: NOT
11598: IFFALSE 11624
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
11600: LD_VAR 0 8
11604: PPUSH
11605: LD_VAR 0 8
11609: PPUSH
11610: LD_VAR 0 2
11614: PPUSH
11615: CALL 12874 0 2
11619: PPUSH
11620: CALL_OW 431
// end ;
11624: GO 11585
11626: POP
11627: POP
// end ; for i = 1 to personel do
11628: LD_ADDR_VAR 0 8
11632: PUSH
11633: DOUBLE
11634: LD_INT 1
11636: DEC
11637: ST_TO_ADDR
11638: LD_VAR 0 6
11642: PUSH
11643: FOR_TO
11644: IFFALSE 12708
// begin if i > 4 then
11646: LD_VAR 0 8
11650: PUSH
11651: LD_INT 4
11653: GREATER
11654: IFFALSE 11658
// break ;
11656: GO 12708
// case i of 1 :
11658: LD_VAR 0 8
11662: PUSH
11663: LD_INT 1
11665: DOUBLE
11666: EQUAL
11667: IFTRUE 11671
11669: GO 11751
11671: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
11672: LD_ADDR_VAR 0 12
11676: PUSH
11677: LD_VAR 0 18
11681: PPUSH
11682: LD_INT 22
11684: PUSH
11685: LD_VAR 0 16
11689: PUSH
11690: EMPTY
11691: LIST
11692: LIST
11693: PUSH
11694: LD_INT 58
11696: PUSH
11697: EMPTY
11698: LIST
11699: PUSH
11700: LD_INT 2
11702: PUSH
11703: LD_INT 30
11705: PUSH
11706: LD_INT 32
11708: PUSH
11709: EMPTY
11710: LIST
11711: LIST
11712: PUSH
11713: LD_INT 30
11715: PUSH
11716: LD_INT 4
11718: PUSH
11719: EMPTY
11720: LIST
11721: LIST
11722: PUSH
11723: LD_INT 30
11725: PUSH
11726: LD_INT 5
11728: PUSH
11729: EMPTY
11730: LIST
11731: LIST
11732: PUSH
11733: EMPTY
11734: LIST
11735: LIST
11736: LIST
11737: LIST
11738: PUSH
11739: EMPTY
11740: LIST
11741: LIST
11742: LIST
11743: PPUSH
11744: CALL_OW 72
11748: ST_TO_ADDR
11749: GO 11973
11751: LD_INT 2
11753: DOUBLE
11754: EQUAL
11755: IFTRUE 11759
11757: GO 11821
11759: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
11760: LD_ADDR_VAR 0 12
11764: PUSH
11765: LD_VAR 0 18
11769: PPUSH
11770: LD_INT 22
11772: PUSH
11773: LD_VAR 0 16
11777: PUSH
11778: EMPTY
11779: LIST
11780: LIST
11781: PUSH
11782: LD_INT 2
11784: PUSH
11785: LD_INT 30
11787: PUSH
11788: LD_INT 0
11790: PUSH
11791: EMPTY
11792: LIST
11793: LIST
11794: PUSH
11795: LD_INT 30
11797: PUSH
11798: LD_INT 1
11800: PUSH
11801: EMPTY
11802: LIST
11803: LIST
11804: PUSH
11805: EMPTY
11806: LIST
11807: LIST
11808: LIST
11809: PUSH
11810: EMPTY
11811: LIST
11812: LIST
11813: PPUSH
11814: CALL_OW 72
11818: ST_TO_ADDR
11819: GO 11973
11821: LD_INT 3
11823: DOUBLE
11824: EQUAL
11825: IFTRUE 11829
11827: GO 11891
11829: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
11830: LD_ADDR_VAR 0 12
11834: PUSH
11835: LD_VAR 0 18
11839: PPUSH
11840: LD_INT 22
11842: PUSH
11843: LD_VAR 0 16
11847: PUSH
11848: EMPTY
11849: LIST
11850: LIST
11851: PUSH
11852: LD_INT 2
11854: PUSH
11855: LD_INT 30
11857: PUSH
11858: LD_INT 2
11860: PUSH
11861: EMPTY
11862: LIST
11863: LIST
11864: PUSH
11865: LD_INT 30
11867: PUSH
11868: LD_INT 3
11870: PUSH
11871: EMPTY
11872: LIST
11873: LIST
11874: PUSH
11875: EMPTY
11876: LIST
11877: LIST
11878: LIST
11879: PUSH
11880: EMPTY
11881: LIST
11882: LIST
11883: PPUSH
11884: CALL_OW 72
11888: ST_TO_ADDR
11889: GO 11973
11891: LD_INT 4
11893: DOUBLE
11894: EQUAL
11895: IFTRUE 11899
11897: GO 11972
11899: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
11900: LD_ADDR_VAR 0 12
11904: PUSH
11905: LD_VAR 0 18
11909: PPUSH
11910: LD_INT 22
11912: PUSH
11913: LD_VAR 0 16
11917: PUSH
11918: EMPTY
11919: LIST
11920: LIST
11921: PUSH
11922: LD_INT 2
11924: PUSH
11925: LD_INT 30
11927: PUSH
11928: LD_INT 6
11930: PUSH
11931: EMPTY
11932: LIST
11933: LIST
11934: PUSH
11935: LD_INT 30
11937: PUSH
11938: LD_INT 7
11940: PUSH
11941: EMPTY
11942: LIST
11943: LIST
11944: PUSH
11945: LD_INT 30
11947: PUSH
11948: LD_INT 8
11950: PUSH
11951: EMPTY
11952: LIST
11953: LIST
11954: PUSH
11955: EMPTY
11956: LIST
11957: LIST
11958: LIST
11959: LIST
11960: PUSH
11961: EMPTY
11962: LIST
11963: LIST
11964: PPUSH
11965: CALL_OW 72
11969: ST_TO_ADDR
11970: GO 11973
11972: POP
// if i = 1 then
11973: LD_VAR 0 8
11977: PUSH
11978: LD_INT 1
11980: EQUAL
11981: IFFALSE 12092
// begin tmp := [ ] ;
11983: LD_ADDR_VAR 0 19
11987: PUSH
11988: EMPTY
11989: ST_TO_ADDR
// for j in f do
11990: LD_ADDR_VAR 0 9
11994: PUSH
11995: LD_VAR 0 12
11999: PUSH
12000: FOR_IN
12001: IFFALSE 12074
// if GetBType ( j ) = b_bunker then
12003: LD_VAR 0 9
12007: PPUSH
12008: CALL_OW 266
12012: PUSH
12013: LD_INT 32
12015: EQUAL
12016: IFFALSE 12043
// tmp := Insert ( tmp , 1 , j ) else
12018: LD_ADDR_VAR 0 19
12022: PUSH
12023: LD_VAR 0 19
12027: PPUSH
12028: LD_INT 1
12030: PPUSH
12031: LD_VAR 0 9
12035: PPUSH
12036: CALL_OW 2
12040: ST_TO_ADDR
12041: GO 12072
// tmp := Insert ( tmp , tmp + 1 , j ) ;
12043: LD_ADDR_VAR 0 19
12047: PUSH
12048: LD_VAR 0 19
12052: PPUSH
12053: LD_VAR 0 19
12057: PUSH
12058: LD_INT 1
12060: PLUS
12061: PPUSH
12062: LD_VAR 0 9
12066: PPUSH
12067: CALL_OW 2
12071: ST_TO_ADDR
12072: GO 12000
12074: POP
12075: POP
// if tmp then
12076: LD_VAR 0 19
12080: IFFALSE 12092
// f := tmp ;
12082: LD_ADDR_VAR 0 12
12086: PUSH
12087: LD_VAR 0 19
12091: ST_TO_ADDR
// end ; x := personel [ i ] ;
12092: LD_ADDR_VAR 0 13
12096: PUSH
12097: LD_VAR 0 6
12101: PUSH
12102: LD_VAR 0 8
12106: ARRAY
12107: ST_TO_ADDR
// if x = - 1 then
12108: LD_VAR 0 13
12112: PUSH
12113: LD_INT 1
12115: NEG
12116: EQUAL
12117: IFFALSE 12326
// begin for j in f do
12119: LD_ADDR_VAR 0 9
12123: PUSH
12124: LD_VAR 0 12
12128: PUSH
12129: FOR_IN
12130: IFFALSE 12322
// repeat InitHc ;
12132: CALL_OW 19
// if GetBType ( j ) = b_barracks then
12136: LD_VAR 0 9
12140: PPUSH
12141: CALL_OW 266
12145: PUSH
12146: LD_INT 5
12148: EQUAL
12149: IFFALSE 12219
// begin if UnitsInside ( j ) < 3 then
12151: LD_VAR 0 9
12155: PPUSH
12156: CALL_OW 313
12160: PUSH
12161: LD_INT 3
12163: LESS
12164: IFFALSE 12200
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12166: LD_INT 0
12168: PPUSH
12169: LD_INT 5
12171: PUSH
12172: LD_INT 8
12174: PUSH
12175: LD_INT 9
12177: PUSH
12178: EMPTY
12179: LIST
12180: LIST
12181: LIST
12182: PUSH
12183: LD_VAR 0 17
12187: ARRAY
12188: PPUSH
12189: LD_VAR 0 4
12193: PPUSH
12194: CALL_OW 380
12198: GO 12217
// PrepareHuman ( false , i , skill ) ;
12200: LD_INT 0
12202: PPUSH
12203: LD_VAR 0 8
12207: PPUSH
12208: LD_VAR 0 4
12212: PPUSH
12213: CALL_OW 380
// end else
12217: GO 12236
// PrepareHuman ( false , i , skill ) ;
12219: LD_INT 0
12221: PPUSH
12222: LD_VAR 0 8
12226: PPUSH
12227: LD_VAR 0 4
12231: PPUSH
12232: CALL_OW 380
// un := CreateHuman ;
12236: LD_ADDR_VAR 0 14
12240: PUSH
12241: CALL_OW 44
12245: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12246: LD_ADDR_VAR 0 7
12250: PUSH
12251: LD_VAR 0 7
12255: PPUSH
12256: LD_INT 1
12258: PPUSH
12259: LD_VAR 0 14
12263: PPUSH
12264: CALL_OW 2
12268: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
12269: LD_VAR 0 14
12273: PPUSH
12274: LD_VAR 0 9
12278: PPUSH
12279: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
12283: LD_VAR 0 9
12287: PPUSH
12288: CALL_OW 313
12292: PUSH
12293: LD_INT 6
12295: EQUAL
12296: PUSH
12297: LD_VAR 0 9
12301: PPUSH
12302: CALL_OW 266
12306: PUSH
12307: LD_INT 32
12309: PUSH
12310: LD_INT 31
12312: PUSH
12313: EMPTY
12314: LIST
12315: LIST
12316: IN
12317: OR
12318: IFFALSE 12132
12320: GO 12129
12322: POP
12323: POP
// end else
12324: GO 12706
// for j = 1 to x do
12326: LD_ADDR_VAR 0 9
12330: PUSH
12331: DOUBLE
12332: LD_INT 1
12334: DEC
12335: ST_TO_ADDR
12336: LD_VAR 0 13
12340: PUSH
12341: FOR_TO
12342: IFFALSE 12704
// begin InitHc ;
12344: CALL_OW 19
// if not f then
12348: LD_VAR 0 12
12352: NOT
12353: IFFALSE 12442
// begin PrepareHuman ( false , i , skill ) ;
12355: LD_INT 0
12357: PPUSH
12358: LD_VAR 0 8
12362: PPUSH
12363: LD_VAR 0 4
12367: PPUSH
12368: CALL_OW 380
// un := CreateHuman ;
12372: LD_ADDR_VAR 0 14
12376: PUSH
12377: CALL_OW 44
12381: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12382: LD_ADDR_VAR 0 7
12386: PUSH
12387: LD_VAR 0 7
12391: PPUSH
12392: LD_INT 1
12394: PPUSH
12395: LD_VAR 0 14
12399: PPUSH
12400: CALL_OW 2
12404: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
12405: LD_VAR 0 14
12409: PPUSH
12410: LD_VAR 0 1
12414: PPUSH
12415: CALL_OW 250
12419: PPUSH
12420: LD_VAR 0 1
12424: PPUSH
12425: CALL_OW 251
12429: PPUSH
12430: LD_INT 10
12432: PPUSH
12433: LD_INT 0
12435: PPUSH
12436: CALL_OW 50
// continue ;
12440: GO 12341
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
12442: LD_VAR 0 12
12446: PUSH
12447: LD_INT 1
12449: ARRAY
12450: PPUSH
12451: CALL_OW 313
12455: PUSH
12456: LD_VAR 0 12
12460: PUSH
12461: LD_INT 1
12463: ARRAY
12464: PPUSH
12465: CALL_OW 266
12469: PUSH
12470: LD_INT 32
12472: PUSH
12473: LD_INT 31
12475: PUSH
12476: EMPTY
12477: LIST
12478: LIST
12479: IN
12480: AND
12481: PUSH
12482: LD_VAR 0 12
12486: PUSH
12487: LD_INT 1
12489: ARRAY
12490: PPUSH
12491: CALL_OW 313
12495: PUSH
12496: LD_INT 6
12498: EQUAL
12499: OR
12500: IFFALSE 12520
// f := Delete ( f , 1 ) ;
12502: LD_ADDR_VAR 0 12
12506: PUSH
12507: LD_VAR 0 12
12511: PPUSH
12512: LD_INT 1
12514: PPUSH
12515: CALL_OW 3
12519: ST_TO_ADDR
// if not f then
12520: LD_VAR 0 12
12524: NOT
12525: IFFALSE 12543
// begin x := x + 2 ;
12527: LD_ADDR_VAR 0 13
12531: PUSH
12532: LD_VAR 0 13
12536: PUSH
12537: LD_INT 2
12539: PLUS
12540: ST_TO_ADDR
// continue ;
12541: GO 12341
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
12543: LD_VAR 0 12
12547: PUSH
12548: LD_INT 1
12550: ARRAY
12551: PPUSH
12552: CALL_OW 266
12556: PUSH
12557: LD_INT 5
12559: EQUAL
12560: IFFALSE 12634
// begin if UnitsInside ( f [ 1 ] ) < 3 then
12562: LD_VAR 0 12
12566: PUSH
12567: LD_INT 1
12569: ARRAY
12570: PPUSH
12571: CALL_OW 313
12575: PUSH
12576: LD_INT 3
12578: LESS
12579: IFFALSE 12615
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12581: LD_INT 0
12583: PPUSH
12584: LD_INT 5
12586: PUSH
12587: LD_INT 8
12589: PUSH
12590: LD_INT 9
12592: PUSH
12593: EMPTY
12594: LIST
12595: LIST
12596: LIST
12597: PUSH
12598: LD_VAR 0 17
12602: ARRAY
12603: PPUSH
12604: LD_VAR 0 4
12608: PPUSH
12609: CALL_OW 380
12613: GO 12632
// PrepareHuman ( false , i , skill ) ;
12615: LD_INT 0
12617: PPUSH
12618: LD_VAR 0 8
12622: PPUSH
12623: LD_VAR 0 4
12627: PPUSH
12628: CALL_OW 380
// end else
12632: GO 12651
// PrepareHuman ( false , i , skill ) ;
12634: LD_INT 0
12636: PPUSH
12637: LD_VAR 0 8
12641: PPUSH
12642: LD_VAR 0 4
12646: PPUSH
12647: CALL_OW 380
// un := CreateHuman ;
12651: LD_ADDR_VAR 0 14
12655: PUSH
12656: CALL_OW 44
12660: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12661: LD_ADDR_VAR 0 7
12665: PUSH
12666: LD_VAR 0 7
12670: PPUSH
12671: LD_INT 1
12673: PPUSH
12674: LD_VAR 0 14
12678: PPUSH
12679: CALL_OW 2
12683: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
12684: LD_VAR 0 14
12688: PPUSH
12689: LD_VAR 0 12
12693: PUSH
12694: LD_INT 1
12696: ARRAY
12697: PPUSH
12698: CALL_OW 52
// end ;
12702: GO 12341
12704: POP
12705: POP
// end ;
12706: GO 11643
12708: POP
12709: POP
// result := result ^ buildings ;
12710: LD_ADDR_VAR 0 7
12714: PUSH
12715: LD_VAR 0 7
12719: PUSH
12720: LD_VAR 0 18
12724: ADD
12725: ST_TO_ADDR
// end else
12726: GO 12869
// begin for i = 1 to personel do
12728: LD_ADDR_VAR 0 8
12732: PUSH
12733: DOUBLE
12734: LD_INT 1
12736: DEC
12737: ST_TO_ADDR
12738: LD_VAR 0 6
12742: PUSH
12743: FOR_TO
12744: IFFALSE 12867
// begin if i > 4 then
12746: LD_VAR 0 8
12750: PUSH
12751: LD_INT 4
12753: GREATER
12754: IFFALSE 12758
// break ;
12756: GO 12867
// x := personel [ i ] ;
12758: LD_ADDR_VAR 0 13
12762: PUSH
12763: LD_VAR 0 6
12767: PUSH
12768: LD_VAR 0 8
12772: ARRAY
12773: ST_TO_ADDR
// if x = - 1 then
12774: LD_VAR 0 13
12778: PUSH
12779: LD_INT 1
12781: NEG
12782: EQUAL
12783: IFFALSE 12787
// continue ;
12785: GO 12743
// PrepareHuman ( false , i , skill ) ;
12787: LD_INT 0
12789: PPUSH
12790: LD_VAR 0 8
12794: PPUSH
12795: LD_VAR 0 4
12799: PPUSH
12800: CALL_OW 380
// un := CreateHuman ;
12804: LD_ADDR_VAR 0 14
12808: PUSH
12809: CALL_OW 44
12813: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
12814: LD_VAR 0 14
12818: PPUSH
12819: LD_VAR 0 1
12823: PPUSH
12824: CALL_OW 250
12828: PPUSH
12829: LD_VAR 0 1
12833: PPUSH
12834: CALL_OW 251
12838: PPUSH
12839: LD_INT 10
12841: PPUSH
12842: LD_INT 0
12844: PPUSH
12845: CALL_OW 50
// result := result ^ un ;
12849: LD_ADDR_VAR 0 7
12853: PUSH
12854: LD_VAR 0 7
12858: PUSH
12859: LD_VAR 0 14
12863: ADD
12864: ST_TO_ADDR
// end ;
12865: GO 12743
12867: POP
12868: POP
// end ; end ;
12869: LD_VAR 0 7
12873: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
12874: LD_INT 0
12876: PPUSH
12877: PPUSH
12878: PPUSH
12879: PPUSH
12880: PPUSH
12881: PPUSH
12882: PPUSH
12883: PPUSH
12884: PPUSH
12885: PPUSH
12886: PPUSH
12887: PPUSH
12888: PPUSH
12889: PPUSH
12890: PPUSH
12891: PPUSH
// result := false ;
12892: LD_ADDR_VAR 0 3
12896: PUSH
12897: LD_INT 0
12899: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
12900: LD_VAR 0 1
12904: NOT
12905: PUSH
12906: LD_VAR 0 1
12910: PPUSH
12911: CALL_OW 266
12915: PUSH
12916: LD_INT 32
12918: PUSH
12919: LD_INT 33
12921: PUSH
12922: EMPTY
12923: LIST
12924: LIST
12925: IN
12926: NOT
12927: OR
12928: IFFALSE 12932
// exit ;
12930: GO 14041
// nat := GetNation ( tower ) ;
12932: LD_ADDR_VAR 0 12
12936: PUSH
12937: LD_VAR 0 1
12941: PPUSH
12942: CALL_OW 248
12946: ST_TO_ADDR
// side := GetSide ( tower ) ;
12947: LD_ADDR_VAR 0 16
12951: PUSH
12952: LD_VAR 0 1
12956: PPUSH
12957: CALL_OW 255
12961: ST_TO_ADDR
// x := GetX ( tower ) ;
12962: LD_ADDR_VAR 0 10
12966: PUSH
12967: LD_VAR 0 1
12971: PPUSH
12972: CALL_OW 250
12976: ST_TO_ADDR
// y := GetY ( tower ) ;
12977: LD_ADDR_VAR 0 11
12981: PUSH
12982: LD_VAR 0 1
12986: PPUSH
12987: CALL_OW 251
12991: ST_TO_ADDR
// if not x or not y then
12992: LD_VAR 0 10
12996: NOT
12997: PUSH
12998: LD_VAR 0 11
13002: NOT
13003: OR
13004: IFFALSE 13008
// exit ;
13006: GO 14041
// weapon := 0 ;
13008: LD_ADDR_VAR 0 18
13012: PUSH
13013: LD_INT 0
13015: ST_TO_ADDR
// fac_list := [ ] ;
13016: LD_ADDR_VAR 0 17
13020: PUSH
13021: EMPTY
13022: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
13023: LD_ADDR_VAR 0 6
13027: PUSH
13028: LD_VAR 0 1
13032: PPUSH
13033: CALL_OW 274
13037: PPUSH
13038: LD_VAR 0 2
13042: PPUSH
13043: LD_INT 0
13045: PPUSH
13046: CALL 10612 0 3
13050: PPUSH
13051: LD_INT 30
13053: PUSH
13054: LD_INT 3
13056: PUSH
13057: EMPTY
13058: LIST
13059: LIST
13060: PPUSH
13061: CALL_OW 72
13065: ST_TO_ADDR
// if not factories then
13066: LD_VAR 0 6
13070: NOT
13071: IFFALSE 13075
// exit ;
13073: GO 14041
// for i in factories do
13075: LD_ADDR_VAR 0 8
13079: PUSH
13080: LD_VAR 0 6
13084: PUSH
13085: FOR_IN
13086: IFFALSE 13111
// fac_list := fac_list union AvailableWeaponList ( i ) ;
13088: LD_ADDR_VAR 0 17
13092: PUSH
13093: LD_VAR 0 17
13097: PUSH
13098: LD_VAR 0 8
13102: PPUSH
13103: CALL_OW 478
13107: UNION
13108: ST_TO_ADDR
13109: GO 13085
13111: POP
13112: POP
// if not fac_list then
13113: LD_VAR 0 17
13117: NOT
13118: IFFALSE 13122
// exit ;
13120: GO 14041
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
13122: LD_ADDR_VAR 0 5
13126: PUSH
13127: LD_INT 4
13129: PUSH
13130: LD_INT 5
13132: PUSH
13133: LD_INT 9
13135: PUSH
13136: LD_INT 10
13138: PUSH
13139: LD_INT 6
13141: PUSH
13142: LD_INT 7
13144: PUSH
13145: LD_INT 11
13147: PUSH
13148: EMPTY
13149: LIST
13150: LIST
13151: LIST
13152: LIST
13153: LIST
13154: LIST
13155: LIST
13156: PUSH
13157: LD_INT 27
13159: PUSH
13160: LD_INT 28
13162: PUSH
13163: LD_INT 26
13165: PUSH
13166: LD_INT 30
13168: PUSH
13169: EMPTY
13170: LIST
13171: LIST
13172: LIST
13173: LIST
13174: PUSH
13175: LD_INT 43
13177: PUSH
13178: LD_INT 44
13180: PUSH
13181: LD_INT 46
13183: PUSH
13184: LD_INT 45
13186: PUSH
13187: LD_INT 47
13189: PUSH
13190: LD_INT 49
13192: PUSH
13193: EMPTY
13194: LIST
13195: LIST
13196: LIST
13197: LIST
13198: LIST
13199: LIST
13200: PUSH
13201: EMPTY
13202: LIST
13203: LIST
13204: LIST
13205: PUSH
13206: LD_VAR 0 12
13210: ARRAY
13211: ST_TO_ADDR
// list := list isect fac_list ;
13212: LD_ADDR_VAR 0 5
13216: PUSH
13217: LD_VAR 0 5
13221: PUSH
13222: LD_VAR 0 17
13226: ISECT
13227: ST_TO_ADDR
// if not list then
13228: LD_VAR 0 5
13232: NOT
13233: IFFALSE 13237
// exit ;
13235: GO 14041
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
13237: LD_VAR 0 12
13241: PUSH
13242: LD_INT 3
13244: EQUAL
13245: PUSH
13246: LD_INT 49
13248: PUSH
13249: LD_VAR 0 5
13253: IN
13254: AND
13255: PUSH
13256: LD_INT 31
13258: PPUSH
13259: LD_VAR 0 16
13263: PPUSH
13264: CALL_OW 321
13268: PUSH
13269: LD_INT 2
13271: EQUAL
13272: AND
13273: IFFALSE 13333
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
13275: LD_INT 22
13277: PUSH
13278: LD_VAR 0 16
13282: PUSH
13283: EMPTY
13284: LIST
13285: LIST
13286: PUSH
13287: LD_INT 35
13289: PUSH
13290: LD_INT 49
13292: PUSH
13293: EMPTY
13294: LIST
13295: LIST
13296: PUSH
13297: LD_INT 91
13299: PUSH
13300: LD_VAR 0 1
13304: PUSH
13305: LD_INT 10
13307: PUSH
13308: EMPTY
13309: LIST
13310: LIST
13311: LIST
13312: PUSH
13313: EMPTY
13314: LIST
13315: LIST
13316: LIST
13317: PPUSH
13318: CALL_OW 69
13322: NOT
13323: IFFALSE 13333
// weapon := ru_time_lapser ;
13325: LD_ADDR_VAR 0 18
13329: PUSH
13330: LD_INT 49
13332: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
13333: LD_VAR 0 12
13337: PUSH
13338: LD_INT 1
13340: PUSH
13341: LD_INT 2
13343: PUSH
13344: EMPTY
13345: LIST
13346: LIST
13347: IN
13348: PUSH
13349: LD_INT 11
13351: PUSH
13352: LD_VAR 0 5
13356: IN
13357: PUSH
13358: LD_INT 30
13360: PUSH
13361: LD_VAR 0 5
13365: IN
13366: OR
13367: AND
13368: PUSH
13369: LD_INT 6
13371: PPUSH
13372: LD_VAR 0 16
13376: PPUSH
13377: CALL_OW 321
13381: PUSH
13382: LD_INT 2
13384: EQUAL
13385: AND
13386: IFFALSE 13551
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
13388: LD_INT 22
13390: PUSH
13391: LD_VAR 0 16
13395: PUSH
13396: EMPTY
13397: LIST
13398: LIST
13399: PUSH
13400: LD_INT 2
13402: PUSH
13403: LD_INT 35
13405: PUSH
13406: LD_INT 11
13408: PUSH
13409: EMPTY
13410: LIST
13411: LIST
13412: PUSH
13413: LD_INT 35
13415: PUSH
13416: LD_INT 30
13418: PUSH
13419: EMPTY
13420: LIST
13421: LIST
13422: PUSH
13423: EMPTY
13424: LIST
13425: LIST
13426: LIST
13427: PUSH
13428: LD_INT 91
13430: PUSH
13431: LD_VAR 0 1
13435: PUSH
13436: LD_INT 18
13438: PUSH
13439: EMPTY
13440: LIST
13441: LIST
13442: LIST
13443: PUSH
13444: EMPTY
13445: LIST
13446: LIST
13447: LIST
13448: PPUSH
13449: CALL_OW 69
13453: NOT
13454: PUSH
13455: LD_INT 22
13457: PUSH
13458: LD_VAR 0 16
13462: PUSH
13463: EMPTY
13464: LIST
13465: LIST
13466: PUSH
13467: LD_INT 2
13469: PUSH
13470: LD_INT 30
13472: PUSH
13473: LD_INT 32
13475: PUSH
13476: EMPTY
13477: LIST
13478: LIST
13479: PUSH
13480: LD_INT 30
13482: PUSH
13483: LD_INT 33
13485: PUSH
13486: EMPTY
13487: LIST
13488: LIST
13489: PUSH
13490: EMPTY
13491: LIST
13492: LIST
13493: LIST
13494: PUSH
13495: LD_INT 91
13497: PUSH
13498: LD_VAR 0 1
13502: PUSH
13503: LD_INT 12
13505: PUSH
13506: EMPTY
13507: LIST
13508: LIST
13509: LIST
13510: PUSH
13511: EMPTY
13512: LIST
13513: LIST
13514: LIST
13515: PUSH
13516: EMPTY
13517: LIST
13518: PPUSH
13519: CALL_OW 69
13523: PUSH
13524: LD_INT 2
13526: GREATER
13527: AND
13528: IFFALSE 13551
// weapon := [ us_radar , ar_radar ] [ nat ] ;
13530: LD_ADDR_VAR 0 18
13534: PUSH
13535: LD_INT 11
13537: PUSH
13538: LD_INT 30
13540: PUSH
13541: EMPTY
13542: LIST
13543: LIST
13544: PUSH
13545: LD_VAR 0 12
13549: ARRAY
13550: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
13551: LD_VAR 0 18
13555: NOT
13556: PUSH
13557: LD_INT 40
13559: PPUSH
13560: LD_VAR 0 16
13564: PPUSH
13565: CALL_OW 321
13569: PUSH
13570: LD_INT 2
13572: EQUAL
13573: AND
13574: PUSH
13575: LD_INT 7
13577: PUSH
13578: LD_VAR 0 5
13582: IN
13583: PUSH
13584: LD_INT 28
13586: PUSH
13587: LD_VAR 0 5
13591: IN
13592: OR
13593: PUSH
13594: LD_INT 45
13596: PUSH
13597: LD_VAR 0 5
13601: IN
13602: OR
13603: AND
13604: IFFALSE 13858
// begin hex := GetHexInfo ( x , y ) ;
13606: LD_ADDR_VAR 0 4
13610: PUSH
13611: LD_VAR 0 10
13615: PPUSH
13616: LD_VAR 0 11
13620: PPUSH
13621: CALL_OW 546
13625: ST_TO_ADDR
// if hex [ 1 ] then
13626: LD_VAR 0 4
13630: PUSH
13631: LD_INT 1
13633: ARRAY
13634: IFFALSE 13638
// exit ;
13636: GO 14041
// height := hex [ 2 ] ;
13638: LD_ADDR_VAR 0 15
13642: PUSH
13643: LD_VAR 0 4
13647: PUSH
13648: LD_INT 2
13650: ARRAY
13651: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
13652: LD_ADDR_VAR 0 14
13656: PUSH
13657: LD_INT 0
13659: PUSH
13660: LD_INT 2
13662: PUSH
13663: LD_INT 3
13665: PUSH
13666: LD_INT 5
13668: PUSH
13669: EMPTY
13670: LIST
13671: LIST
13672: LIST
13673: LIST
13674: ST_TO_ADDR
// for i in tmp do
13675: LD_ADDR_VAR 0 8
13679: PUSH
13680: LD_VAR 0 14
13684: PUSH
13685: FOR_IN
13686: IFFALSE 13856
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
13688: LD_ADDR_VAR 0 9
13692: PUSH
13693: LD_VAR 0 10
13697: PPUSH
13698: LD_VAR 0 8
13702: PPUSH
13703: LD_INT 5
13705: PPUSH
13706: CALL_OW 272
13710: PUSH
13711: LD_VAR 0 11
13715: PPUSH
13716: LD_VAR 0 8
13720: PPUSH
13721: LD_INT 5
13723: PPUSH
13724: CALL_OW 273
13728: PUSH
13729: EMPTY
13730: LIST
13731: LIST
13732: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
13733: LD_VAR 0 9
13737: PUSH
13738: LD_INT 1
13740: ARRAY
13741: PPUSH
13742: LD_VAR 0 9
13746: PUSH
13747: LD_INT 2
13749: ARRAY
13750: PPUSH
13751: CALL_OW 488
13755: IFFALSE 13854
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
13757: LD_ADDR_VAR 0 4
13761: PUSH
13762: LD_VAR 0 9
13766: PUSH
13767: LD_INT 1
13769: ARRAY
13770: PPUSH
13771: LD_VAR 0 9
13775: PUSH
13776: LD_INT 2
13778: ARRAY
13779: PPUSH
13780: CALL_OW 546
13784: ST_TO_ADDR
// if hex [ 1 ] then
13785: LD_VAR 0 4
13789: PUSH
13790: LD_INT 1
13792: ARRAY
13793: IFFALSE 13797
// continue ;
13795: GO 13685
// h := hex [ 2 ] ;
13797: LD_ADDR_VAR 0 13
13801: PUSH
13802: LD_VAR 0 4
13806: PUSH
13807: LD_INT 2
13809: ARRAY
13810: ST_TO_ADDR
// if h + 7 < height then
13811: LD_VAR 0 13
13815: PUSH
13816: LD_INT 7
13818: PLUS
13819: PUSH
13820: LD_VAR 0 15
13824: LESS
13825: IFFALSE 13854
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
13827: LD_ADDR_VAR 0 18
13831: PUSH
13832: LD_INT 7
13834: PUSH
13835: LD_INT 28
13837: PUSH
13838: LD_INT 45
13840: PUSH
13841: EMPTY
13842: LIST
13843: LIST
13844: LIST
13845: PUSH
13846: LD_VAR 0 12
13850: ARRAY
13851: ST_TO_ADDR
// break ;
13852: GO 13856
// end ; end ; end ;
13854: GO 13685
13856: POP
13857: POP
// end ; if not weapon then
13858: LD_VAR 0 18
13862: NOT
13863: IFFALSE 13923
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
13865: LD_ADDR_VAR 0 5
13869: PUSH
13870: LD_VAR 0 5
13874: PUSH
13875: LD_INT 11
13877: PUSH
13878: LD_INT 30
13880: PUSH
13881: LD_INT 49
13883: PUSH
13884: EMPTY
13885: LIST
13886: LIST
13887: LIST
13888: DIFF
13889: ST_TO_ADDR
// if not list then
13890: LD_VAR 0 5
13894: NOT
13895: IFFALSE 13899
// exit ;
13897: GO 14041
// weapon := list [ rand ( 1 , list ) ] ;
13899: LD_ADDR_VAR 0 18
13903: PUSH
13904: LD_VAR 0 5
13908: PUSH
13909: LD_INT 1
13911: PPUSH
13912: LD_VAR 0 5
13916: PPUSH
13917: CALL_OW 12
13921: ARRAY
13922: ST_TO_ADDR
// end ; if weapon then
13923: LD_VAR 0 18
13927: IFFALSE 14041
// begin tmp := CostOfWeapon ( weapon ) ;
13929: LD_ADDR_VAR 0 14
13933: PUSH
13934: LD_VAR 0 18
13938: PPUSH
13939: CALL_OW 451
13943: ST_TO_ADDR
// j := GetBase ( tower ) ;
13944: LD_ADDR_VAR 0 9
13948: PUSH
13949: LD_VAR 0 1
13953: PPUSH
13954: CALL_OW 274
13958: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
13959: LD_VAR 0 9
13963: PPUSH
13964: LD_INT 1
13966: PPUSH
13967: CALL_OW 275
13971: PUSH
13972: LD_VAR 0 14
13976: PUSH
13977: LD_INT 1
13979: ARRAY
13980: GREATEREQUAL
13981: PUSH
13982: LD_VAR 0 9
13986: PPUSH
13987: LD_INT 2
13989: PPUSH
13990: CALL_OW 275
13994: PUSH
13995: LD_VAR 0 14
13999: PUSH
14000: LD_INT 2
14002: ARRAY
14003: GREATEREQUAL
14004: AND
14005: PUSH
14006: LD_VAR 0 9
14010: PPUSH
14011: LD_INT 3
14013: PPUSH
14014: CALL_OW 275
14018: PUSH
14019: LD_VAR 0 14
14023: PUSH
14024: LD_INT 3
14026: ARRAY
14027: GREATEREQUAL
14028: AND
14029: IFFALSE 14041
// result := weapon ;
14031: LD_ADDR_VAR 0 3
14035: PUSH
14036: LD_VAR 0 18
14040: ST_TO_ADDR
// end ; end ;
14041: LD_VAR 0 3
14045: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
14046: LD_INT 0
14048: PPUSH
14049: PPUSH
// result := true ;
14050: LD_ADDR_VAR 0 3
14054: PUSH
14055: LD_INT 1
14057: ST_TO_ADDR
// if array1 = array2 then
14058: LD_VAR 0 1
14062: PUSH
14063: LD_VAR 0 2
14067: EQUAL
14068: IFFALSE 14128
// begin for i = 1 to array1 do
14070: LD_ADDR_VAR 0 4
14074: PUSH
14075: DOUBLE
14076: LD_INT 1
14078: DEC
14079: ST_TO_ADDR
14080: LD_VAR 0 1
14084: PUSH
14085: FOR_TO
14086: IFFALSE 14124
// if array1 [ i ] <> array2 [ i ] then
14088: LD_VAR 0 1
14092: PUSH
14093: LD_VAR 0 4
14097: ARRAY
14098: PUSH
14099: LD_VAR 0 2
14103: PUSH
14104: LD_VAR 0 4
14108: ARRAY
14109: NONEQUAL
14110: IFFALSE 14122
// begin result := false ;
14112: LD_ADDR_VAR 0 3
14116: PUSH
14117: LD_INT 0
14119: ST_TO_ADDR
// break ;
14120: GO 14124
// end ;
14122: GO 14085
14124: POP
14125: POP
// end else
14126: GO 14136
// result := false ;
14128: LD_ADDR_VAR 0 3
14132: PUSH
14133: LD_INT 0
14135: ST_TO_ADDR
// end ;
14136: LD_VAR 0 3
14140: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
14141: LD_INT 0
14143: PPUSH
14144: PPUSH
// if not array1 or not array2 then
14145: LD_VAR 0 1
14149: NOT
14150: PUSH
14151: LD_VAR 0 2
14155: NOT
14156: OR
14157: IFFALSE 14161
// exit ;
14159: GO 14225
// result := true ;
14161: LD_ADDR_VAR 0 3
14165: PUSH
14166: LD_INT 1
14168: ST_TO_ADDR
// for i = 1 to array1 do
14169: LD_ADDR_VAR 0 4
14173: PUSH
14174: DOUBLE
14175: LD_INT 1
14177: DEC
14178: ST_TO_ADDR
14179: LD_VAR 0 1
14183: PUSH
14184: FOR_TO
14185: IFFALSE 14223
// if array1 [ i ] <> array2 [ i ] then
14187: LD_VAR 0 1
14191: PUSH
14192: LD_VAR 0 4
14196: ARRAY
14197: PUSH
14198: LD_VAR 0 2
14202: PUSH
14203: LD_VAR 0 4
14207: ARRAY
14208: NONEQUAL
14209: IFFALSE 14221
// begin result := false ;
14211: LD_ADDR_VAR 0 3
14215: PUSH
14216: LD_INT 0
14218: ST_TO_ADDR
// break ;
14219: GO 14223
// end ;
14221: GO 14184
14223: POP
14224: POP
// end ;
14225: LD_VAR 0 3
14229: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
14230: LD_INT 0
14232: PPUSH
14233: PPUSH
14234: PPUSH
// pom := GetBase ( fac ) ;
14235: LD_ADDR_VAR 0 5
14239: PUSH
14240: LD_VAR 0 1
14244: PPUSH
14245: CALL_OW 274
14249: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
14250: LD_ADDR_VAR 0 4
14254: PUSH
14255: LD_VAR 0 2
14259: PUSH
14260: LD_INT 1
14262: ARRAY
14263: PPUSH
14264: LD_VAR 0 2
14268: PUSH
14269: LD_INT 2
14271: ARRAY
14272: PPUSH
14273: LD_VAR 0 2
14277: PUSH
14278: LD_INT 3
14280: ARRAY
14281: PPUSH
14282: LD_VAR 0 2
14286: PUSH
14287: LD_INT 4
14289: ARRAY
14290: PPUSH
14291: CALL_OW 449
14295: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14296: LD_ADDR_VAR 0 3
14300: PUSH
14301: LD_VAR 0 5
14305: PPUSH
14306: LD_INT 1
14308: PPUSH
14309: CALL_OW 275
14313: PUSH
14314: LD_VAR 0 4
14318: PUSH
14319: LD_INT 1
14321: ARRAY
14322: GREATEREQUAL
14323: PUSH
14324: LD_VAR 0 5
14328: PPUSH
14329: LD_INT 2
14331: PPUSH
14332: CALL_OW 275
14336: PUSH
14337: LD_VAR 0 4
14341: PUSH
14342: LD_INT 2
14344: ARRAY
14345: GREATEREQUAL
14346: AND
14347: PUSH
14348: LD_VAR 0 5
14352: PPUSH
14353: LD_INT 3
14355: PPUSH
14356: CALL_OW 275
14360: PUSH
14361: LD_VAR 0 4
14365: PUSH
14366: LD_INT 3
14368: ARRAY
14369: GREATEREQUAL
14370: AND
14371: ST_TO_ADDR
// end ;
14372: LD_VAR 0 3
14376: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
14377: LD_INT 0
14379: PPUSH
14380: PPUSH
14381: PPUSH
14382: PPUSH
// pom := GetBase ( building ) ;
14383: LD_ADDR_VAR 0 3
14387: PUSH
14388: LD_VAR 0 1
14392: PPUSH
14393: CALL_OW 274
14397: ST_TO_ADDR
// if not pom then
14398: LD_VAR 0 3
14402: NOT
14403: IFFALSE 14407
// exit ;
14405: GO 14577
// btype := GetBType ( building ) ;
14407: LD_ADDR_VAR 0 5
14411: PUSH
14412: LD_VAR 0 1
14416: PPUSH
14417: CALL_OW 266
14421: ST_TO_ADDR
// if btype = b_armoury then
14422: LD_VAR 0 5
14426: PUSH
14427: LD_INT 4
14429: EQUAL
14430: IFFALSE 14440
// btype := b_barracks ;
14432: LD_ADDR_VAR 0 5
14436: PUSH
14437: LD_INT 5
14439: ST_TO_ADDR
// if btype = b_depot then
14440: LD_VAR 0 5
14444: PUSH
14445: LD_INT 0
14447: EQUAL
14448: IFFALSE 14458
// btype := b_warehouse ;
14450: LD_ADDR_VAR 0 5
14454: PUSH
14455: LD_INT 1
14457: ST_TO_ADDR
// if btype = b_workshop then
14458: LD_VAR 0 5
14462: PUSH
14463: LD_INT 2
14465: EQUAL
14466: IFFALSE 14476
// btype := b_factory ;
14468: LD_ADDR_VAR 0 5
14472: PUSH
14473: LD_INT 3
14475: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
14476: LD_ADDR_VAR 0 4
14480: PUSH
14481: LD_VAR 0 5
14485: PPUSH
14486: LD_VAR 0 1
14490: PPUSH
14491: CALL_OW 248
14495: PPUSH
14496: CALL_OW 450
14500: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14501: LD_ADDR_VAR 0 2
14505: PUSH
14506: LD_VAR 0 3
14510: PPUSH
14511: LD_INT 1
14513: PPUSH
14514: CALL_OW 275
14518: PUSH
14519: LD_VAR 0 4
14523: PUSH
14524: LD_INT 1
14526: ARRAY
14527: GREATEREQUAL
14528: PUSH
14529: LD_VAR 0 3
14533: PPUSH
14534: LD_INT 2
14536: PPUSH
14537: CALL_OW 275
14541: PUSH
14542: LD_VAR 0 4
14546: PUSH
14547: LD_INT 2
14549: ARRAY
14550: GREATEREQUAL
14551: AND
14552: PUSH
14553: LD_VAR 0 3
14557: PPUSH
14558: LD_INT 3
14560: PPUSH
14561: CALL_OW 275
14565: PUSH
14566: LD_VAR 0 4
14570: PUSH
14571: LD_INT 3
14573: ARRAY
14574: GREATEREQUAL
14575: AND
14576: ST_TO_ADDR
// end ;
14577: LD_VAR 0 2
14581: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
14582: LD_INT 0
14584: PPUSH
14585: PPUSH
14586: PPUSH
// pom := GetBase ( building ) ;
14587: LD_ADDR_VAR 0 4
14591: PUSH
14592: LD_VAR 0 1
14596: PPUSH
14597: CALL_OW 274
14601: ST_TO_ADDR
// if not pom then
14602: LD_VAR 0 4
14606: NOT
14607: IFFALSE 14611
// exit ;
14609: GO 14712
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
14611: LD_ADDR_VAR 0 5
14615: PUSH
14616: LD_VAR 0 2
14620: PPUSH
14621: LD_VAR 0 1
14625: PPUSH
14626: CALL_OW 248
14630: PPUSH
14631: CALL_OW 450
14635: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14636: LD_ADDR_VAR 0 3
14640: PUSH
14641: LD_VAR 0 4
14645: PPUSH
14646: LD_INT 1
14648: PPUSH
14649: CALL_OW 275
14653: PUSH
14654: LD_VAR 0 5
14658: PUSH
14659: LD_INT 1
14661: ARRAY
14662: GREATEREQUAL
14663: PUSH
14664: LD_VAR 0 4
14668: PPUSH
14669: LD_INT 2
14671: PPUSH
14672: CALL_OW 275
14676: PUSH
14677: LD_VAR 0 5
14681: PUSH
14682: LD_INT 2
14684: ARRAY
14685: GREATEREQUAL
14686: AND
14687: PUSH
14688: LD_VAR 0 4
14692: PPUSH
14693: LD_INT 3
14695: PPUSH
14696: CALL_OW 275
14700: PUSH
14701: LD_VAR 0 5
14705: PUSH
14706: LD_INT 3
14708: ARRAY
14709: GREATEREQUAL
14710: AND
14711: ST_TO_ADDR
// end ;
14712: LD_VAR 0 3
14716: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
14717: LD_INT 0
14719: PPUSH
14720: PPUSH
14721: PPUSH
14722: PPUSH
14723: PPUSH
14724: PPUSH
14725: PPUSH
14726: PPUSH
14727: PPUSH
14728: PPUSH
14729: PPUSH
// result := false ;
14730: LD_ADDR_VAR 0 8
14734: PUSH
14735: LD_INT 0
14737: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
14738: LD_VAR 0 5
14742: NOT
14743: PUSH
14744: LD_VAR 0 1
14748: NOT
14749: OR
14750: PUSH
14751: LD_VAR 0 2
14755: NOT
14756: OR
14757: PUSH
14758: LD_VAR 0 3
14762: NOT
14763: OR
14764: IFFALSE 14768
// exit ;
14766: GO 15582
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
14768: LD_ADDR_VAR 0 14
14772: PUSH
14773: LD_VAR 0 1
14777: PPUSH
14778: LD_VAR 0 2
14782: PPUSH
14783: LD_VAR 0 3
14787: PPUSH
14788: LD_VAR 0 4
14792: PPUSH
14793: LD_VAR 0 5
14797: PUSH
14798: LD_INT 1
14800: ARRAY
14801: PPUSH
14802: CALL_OW 248
14806: PPUSH
14807: LD_INT 0
14809: PPUSH
14810: CALL 16835 0 6
14814: ST_TO_ADDR
// if not hexes then
14815: LD_VAR 0 14
14819: NOT
14820: IFFALSE 14824
// exit ;
14822: GO 15582
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14824: LD_ADDR_VAR 0 17
14828: PUSH
14829: LD_VAR 0 5
14833: PPUSH
14834: LD_INT 22
14836: PUSH
14837: LD_VAR 0 13
14841: PPUSH
14842: CALL_OW 255
14846: PUSH
14847: EMPTY
14848: LIST
14849: LIST
14850: PUSH
14851: LD_INT 2
14853: PUSH
14854: LD_INT 30
14856: PUSH
14857: LD_INT 0
14859: PUSH
14860: EMPTY
14861: LIST
14862: LIST
14863: PUSH
14864: LD_INT 30
14866: PUSH
14867: LD_INT 1
14869: PUSH
14870: EMPTY
14871: LIST
14872: LIST
14873: PUSH
14874: EMPTY
14875: LIST
14876: LIST
14877: LIST
14878: PUSH
14879: EMPTY
14880: LIST
14881: LIST
14882: PPUSH
14883: CALL_OW 72
14887: ST_TO_ADDR
// for i = 1 to hexes do
14888: LD_ADDR_VAR 0 9
14892: PUSH
14893: DOUBLE
14894: LD_INT 1
14896: DEC
14897: ST_TO_ADDR
14898: LD_VAR 0 14
14902: PUSH
14903: FOR_TO
14904: IFFALSE 15580
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
14906: LD_ADDR_VAR 0 13
14910: PUSH
14911: LD_VAR 0 14
14915: PUSH
14916: LD_VAR 0 9
14920: ARRAY
14921: PUSH
14922: LD_INT 1
14924: ARRAY
14925: PPUSH
14926: LD_VAR 0 14
14930: PUSH
14931: LD_VAR 0 9
14935: ARRAY
14936: PUSH
14937: LD_INT 2
14939: ARRAY
14940: PPUSH
14941: CALL_OW 428
14945: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
14946: LD_VAR 0 14
14950: PUSH
14951: LD_VAR 0 9
14955: ARRAY
14956: PUSH
14957: LD_INT 1
14959: ARRAY
14960: PPUSH
14961: LD_VAR 0 14
14965: PUSH
14966: LD_VAR 0 9
14970: ARRAY
14971: PUSH
14972: LD_INT 2
14974: ARRAY
14975: PPUSH
14976: CALL_OW 351
14980: PUSH
14981: LD_VAR 0 14
14985: PUSH
14986: LD_VAR 0 9
14990: ARRAY
14991: PUSH
14992: LD_INT 1
14994: ARRAY
14995: PPUSH
14996: LD_VAR 0 14
15000: PUSH
15001: LD_VAR 0 9
15005: ARRAY
15006: PUSH
15007: LD_INT 2
15009: ARRAY
15010: PPUSH
15011: CALL_OW 488
15015: NOT
15016: OR
15017: PUSH
15018: LD_VAR 0 13
15022: PPUSH
15023: CALL_OW 247
15027: PUSH
15028: LD_INT 3
15030: EQUAL
15031: OR
15032: IFFALSE 15038
// exit ;
15034: POP
15035: POP
15036: GO 15582
// if not tmp then
15038: LD_VAR 0 13
15042: NOT
15043: IFFALSE 15047
// continue ;
15045: GO 14903
// result := true ;
15047: LD_ADDR_VAR 0 8
15051: PUSH
15052: LD_INT 1
15054: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
15055: LD_VAR 0 6
15059: PUSH
15060: LD_VAR 0 13
15064: PPUSH
15065: CALL_OW 247
15069: PUSH
15070: LD_INT 2
15072: EQUAL
15073: AND
15074: PUSH
15075: LD_VAR 0 13
15079: PPUSH
15080: CALL_OW 263
15084: PUSH
15085: LD_INT 1
15087: EQUAL
15088: AND
15089: IFFALSE 15253
// begin if IsDrivenBy ( tmp ) then
15091: LD_VAR 0 13
15095: PPUSH
15096: CALL_OW 311
15100: IFFALSE 15104
// continue ;
15102: GO 14903
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
15104: LD_VAR 0 6
15108: PPUSH
15109: LD_INT 3
15111: PUSH
15112: LD_INT 60
15114: PUSH
15115: EMPTY
15116: LIST
15117: PUSH
15118: EMPTY
15119: LIST
15120: LIST
15121: PUSH
15122: LD_INT 3
15124: PUSH
15125: LD_INT 55
15127: PUSH
15128: EMPTY
15129: LIST
15130: PUSH
15131: EMPTY
15132: LIST
15133: LIST
15134: PUSH
15135: EMPTY
15136: LIST
15137: LIST
15138: PPUSH
15139: CALL_OW 72
15143: IFFALSE 15251
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
15145: LD_ADDR_VAR 0 18
15149: PUSH
15150: LD_VAR 0 6
15154: PPUSH
15155: LD_INT 3
15157: PUSH
15158: LD_INT 60
15160: PUSH
15161: EMPTY
15162: LIST
15163: PUSH
15164: EMPTY
15165: LIST
15166: LIST
15167: PUSH
15168: LD_INT 3
15170: PUSH
15171: LD_INT 55
15173: PUSH
15174: EMPTY
15175: LIST
15176: PUSH
15177: EMPTY
15178: LIST
15179: LIST
15180: PUSH
15181: EMPTY
15182: LIST
15183: LIST
15184: PPUSH
15185: CALL_OW 72
15189: PUSH
15190: LD_INT 1
15192: ARRAY
15193: ST_TO_ADDR
// if IsInUnit ( driver ) then
15194: LD_VAR 0 18
15198: PPUSH
15199: CALL_OW 310
15203: IFFALSE 15214
// ComExit ( driver ) ;
15205: LD_VAR 0 18
15209: PPUSH
15210: CALL 40616 0 1
// AddComEnterUnit ( driver , tmp ) ;
15214: LD_VAR 0 18
15218: PPUSH
15219: LD_VAR 0 13
15223: PPUSH
15224: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
15228: LD_VAR 0 18
15232: PPUSH
15233: LD_VAR 0 7
15237: PPUSH
15238: CALL_OW 173
// AddComExitVehicle ( driver ) ;
15242: LD_VAR 0 18
15246: PPUSH
15247: CALL_OW 181
// end ; continue ;
15251: GO 14903
// end ; if not cleaners or not tmp in cleaners then
15253: LD_VAR 0 6
15257: NOT
15258: PUSH
15259: LD_VAR 0 13
15263: PUSH
15264: LD_VAR 0 6
15268: IN
15269: NOT
15270: OR
15271: IFFALSE 15578
// begin if dep then
15273: LD_VAR 0 17
15277: IFFALSE 15413
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
15279: LD_ADDR_VAR 0 16
15283: PUSH
15284: LD_VAR 0 17
15288: PUSH
15289: LD_INT 1
15291: ARRAY
15292: PPUSH
15293: CALL_OW 250
15297: PPUSH
15298: LD_VAR 0 17
15302: PUSH
15303: LD_INT 1
15305: ARRAY
15306: PPUSH
15307: CALL_OW 254
15311: PPUSH
15312: LD_INT 5
15314: PPUSH
15315: CALL_OW 272
15319: PUSH
15320: LD_VAR 0 17
15324: PUSH
15325: LD_INT 1
15327: ARRAY
15328: PPUSH
15329: CALL_OW 251
15333: PPUSH
15334: LD_VAR 0 17
15338: PUSH
15339: LD_INT 1
15341: ARRAY
15342: PPUSH
15343: CALL_OW 254
15347: PPUSH
15348: LD_INT 5
15350: PPUSH
15351: CALL_OW 273
15355: PUSH
15356: EMPTY
15357: LIST
15358: LIST
15359: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
15360: LD_VAR 0 16
15364: PUSH
15365: LD_INT 1
15367: ARRAY
15368: PPUSH
15369: LD_VAR 0 16
15373: PUSH
15374: LD_INT 2
15376: ARRAY
15377: PPUSH
15378: CALL_OW 488
15382: IFFALSE 15413
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
15384: LD_VAR 0 13
15388: PPUSH
15389: LD_VAR 0 16
15393: PUSH
15394: LD_INT 1
15396: ARRAY
15397: PPUSH
15398: LD_VAR 0 16
15402: PUSH
15403: LD_INT 2
15405: ARRAY
15406: PPUSH
15407: CALL_OW 111
// continue ;
15411: GO 14903
// end ; end ; r := GetDir ( tmp ) ;
15413: LD_ADDR_VAR 0 15
15417: PUSH
15418: LD_VAR 0 13
15422: PPUSH
15423: CALL_OW 254
15427: ST_TO_ADDR
// if r = 5 then
15428: LD_VAR 0 15
15432: PUSH
15433: LD_INT 5
15435: EQUAL
15436: IFFALSE 15446
// r := 0 ;
15438: LD_ADDR_VAR 0 15
15442: PUSH
15443: LD_INT 0
15445: ST_TO_ADDR
// for j = r to 5 do
15446: LD_ADDR_VAR 0 10
15450: PUSH
15451: DOUBLE
15452: LD_VAR 0 15
15456: DEC
15457: ST_TO_ADDR
15458: LD_INT 5
15460: PUSH
15461: FOR_TO
15462: IFFALSE 15576
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
15464: LD_ADDR_VAR 0 11
15468: PUSH
15469: LD_VAR 0 13
15473: PPUSH
15474: CALL_OW 250
15478: PPUSH
15479: LD_VAR 0 10
15483: PPUSH
15484: LD_INT 2
15486: PPUSH
15487: CALL_OW 272
15491: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
15492: LD_ADDR_VAR 0 12
15496: PUSH
15497: LD_VAR 0 13
15501: PPUSH
15502: CALL_OW 251
15506: PPUSH
15507: LD_VAR 0 10
15511: PPUSH
15512: LD_INT 2
15514: PPUSH
15515: CALL_OW 273
15519: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
15520: LD_VAR 0 11
15524: PPUSH
15525: LD_VAR 0 12
15529: PPUSH
15530: CALL_OW 488
15534: PUSH
15535: LD_VAR 0 11
15539: PPUSH
15540: LD_VAR 0 12
15544: PPUSH
15545: CALL_OW 428
15549: NOT
15550: AND
15551: IFFALSE 15574
// begin ComMoveXY ( tmp , _x , _y ) ;
15553: LD_VAR 0 13
15557: PPUSH
15558: LD_VAR 0 11
15562: PPUSH
15563: LD_VAR 0 12
15567: PPUSH
15568: CALL_OW 111
// break ;
15572: GO 15576
// end ; end ;
15574: GO 15461
15576: POP
15577: POP
// end ; end ;
15578: GO 14903
15580: POP
15581: POP
// end ;
15582: LD_VAR 0 8
15586: RET
// export function BuildingTechInvented ( side , btype ) ; begin
15587: LD_INT 0
15589: PPUSH
// result := true ;
15590: LD_ADDR_VAR 0 3
15594: PUSH
15595: LD_INT 1
15597: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
15598: LD_VAR 0 2
15602: PUSH
15603: LD_INT 24
15605: DOUBLE
15606: EQUAL
15607: IFTRUE 15617
15609: LD_INT 33
15611: DOUBLE
15612: EQUAL
15613: IFTRUE 15617
15615: GO 15642
15617: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
15618: LD_ADDR_VAR 0 3
15622: PUSH
15623: LD_INT 32
15625: PPUSH
15626: LD_VAR 0 1
15630: PPUSH
15631: CALL_OW 321
15635: PUSH
15636: LD_INT 2
15638: EQUAL
15639: ST_TO_ADDR
15640: GO 15958
15642: LD_INT 20
15644: DOUBLE
15645: EQUAL
15646: IFTRUE 15650
15648: GO 15675
15650: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
15651: LD_ADDR_VAR 0 3
15655: PUSH
15656: LD_INT 6
15658: PPUSH
15659: LD_VAR 0 1
15663: PPUSH
15664: CALL_OW 321
15668: PUSH
15669: LD_INT 2
15671: EQUAL
15672: ST_TO_ADDR
15673: GO 15958
15675: LD_INT 22
15677: DOUBLE
15678: EQUAL
15679: IFTRUE 15689
15681: LD_INT 36
15683: DOUBLE
15684: EQUAL
15685: IFTRUE 15689
15687: GO 15714
15689: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
15690: LD_ADDR_VAR 0 3
15694: PUSH
15695: LD_INT 15
15697: PPUSH
15698: LD_VAR 0 1
15702: PPUSH
15703: CALL_OW 321
15707: PUSH
15708: LD_INT 2
15710: EQUAL
15711: ST_TO_ADDR
15712: GO 15958
15714: LD_INT 30
15716: DOUBLE
15717: EQUAL
15718: IFTRUE 15722
15720: GO 15747
15722: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
15723: LD_ADDR_VAR 0 3
15727: PUSH
15728: LD_INT 20
15730: PPUSH
15731: LD_VAR 0 1
15735: PPUSH
15736: CALL_OW 321
15740: PUSH
15741: LD_INT 2
15743: EQUAL
15744: ST_TO_ADDR
15745: GO 15958
15747: LD_INT 28
15749: DOUBLE
15750: EQUAL
15751: IFTRUE 15761
15753: LD_INT 21
15755: DOUBLE
15756: EQUAL
15757: IFTRUE 15761
15759: GO 15786
15761: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
15762: LD_ADDR_VAR 0 3
15766: PUSH
15767: LD_INT 21
15769: PPUSH
15770: LD_VAR 0 1
15774: PPUSH
15775: CALL_OW 321
15779: PUSH
15780: LD_INT 2
15782: EQUAL
15783: ST_TO_ADDR
15784: GO 15958
15786: LD_INT 16
15788: DOUBLE
15789: EQUAL
15790: IFTRUE 15794
15792: GO 15819
15794: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
15795: LD_ADDR_VAR 0 3
15799: PUSH
15800: LD_INT 84
15802: PPUSH
15803: LD_VAR 0 1
15807: PPUSH
15808: CALL_OW 321
15812: PUSH
15813: LD_INT 2
15815: EQUAL
15816: ST_TO_ADDR
15817: GO 15958
15819: LD_INT 19
15821: DOUBLE
15822: EQUAL
15823: IFTRUE 15833
15825: LD_INT 23
15827: DOUBLE
15828: EQUAL
15829: IFTRUE 15833
15831: GO 15858
15833: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
15834: LD_ADDR_VAR 0 3
15838: PUSH
15839: LD_INT 83
15841: PPUSH
15842: LD_VAR 0 1
15846: PPUSH
15847: CALL_OW 321
15851: PUSH
15852: LD_INT 2
15854: EQUAL
15855: ST_TO_ADDR
15856: GO 15958
15858: LD_INT 17
15860: DOUBLE
15861: EQUAL
15862: IFTRUE 15866
15864: GO 15891
15866: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
15867: LD_ADDR_VAR 0 3
15871: PUSH
15872: LD_INT 39
15874: PPUSH
15875: LD_VAR 0 1
15879: PPUSH
15880: CALL_OW 321
15884: PUSH
15885: LD_INT 2
15887: EQUAL
15888: ST_TO_ADDR
15889: GO 15958
15891: LD_INT 18
15893: DOUBLE
15894: EQUAL
15895: IFTRUE 15899
15897: GO 15924
15899: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
15900: LD_ADDR_VAR 0 3
15904: PUSH
15905: LD_INT 40
15907: PPUSH
15908: LD_VAR 0 1
15912: PPUSH
15913: CALL_OW 321
15917: PUSH
15918: LD_INT 2
15920: EQUAL
15921: ST_TO_ADDR
15922: GO 15958
15924: LD_INT 27
15926: DOUBLE
15927: EQUAL
15928: IFTRUE 15932
15930: GO 15957
15932: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
15933: LD_ADDR_VAR 0 3
15937: PUSH
15938: LD_INT 35
15940: PPUSH
15941: LD_VAR 0 1
15945: PPUSH
15946: CALL_OW 321
15950: PUSH
15951: LD_INT 2
15953: EQUAL
15954: ST_TO_ADDR
15955: GO 15958
15957: POP
// end ;
15958: LD_VAR 0 3
15962: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
15963: LD_INT 0
15965: PPUSH
15966: PPUSH
15967: PPUSH
15968: PPUSH
15969: PPUSH
15970: PPUSH
15971: PPUSH
15972: PPUSH
15973: PPUSH
15974: PPUSH
15975: PPUSH
// result := false ;
15976: LD_ADDR_VAR 0 6
15980: PUSH
15981: LD_INT 0
15983: ST_TO_ADDR
// if btype = b_depot then
15984: LD_VAR 0 2
15988: PUSH
15989: LD_INT 0
15991: EQUAL
15992: IFFALSE 16004
// begin result := true ;
15994: LD_ADDR_VAR 0 6
15998: PUSH
15999: LD_INT 1
16001: ST_TO_ADDR
// exit ;
16002: GO 16830
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
16004: LD_VAR 0 1
16008: NOT
16009: PUSH
16010: LD_VAR 0 1
16014: PPUSH
16015: CALL_OW 266
16019: PUSH
16020: LD_INT 0
16022: PUSH
16023: LD_INT 1
16025: PUSH
16026: EMPTY
16027: LIST
16028: LIST
16029: IN
16030: NOT
16031: OR
16032: PUSH
16033: LD_VAR 0 2
16037: NOT
16038: OR
16039: PUSH
16040: LD_VAR 0 5
16044: PUSH
16045: LD_INT 0
16047: PUSH
16048: LD_INT 1
16050: PUSH
16051: LD_INT 2
16053: PUSH
16054: LD_INT 3
16056: PUSH
16057: LD_INT 4
16059: PUSH
16060: LD_INT 5
16062: PUSH
16063: EMPTY
16064: LIST
16065: LIST
16066: LIST
16067: LIST
16068: LIST
16069: LIST
16070: IN
16071: NOT
16072: OR
16073: PUSH
16074: LD_VAR 0 3
16078: PPUSH
16079: LD_VAR 0 4
16083: PPUSH
16084: CALL_OW 488
16088: NOT
16089: OR
16090: IFFALSE 16094
// exit ;
16092: GO 16830
// side := GetSide ( depot ) ;
16094: LD_ADDR_VAR 0 9
16098: PUSH
16099: LD_VAR 0 1
16103: PPUSH
16104: CALL_OW 255
16108: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
16109: LD_VAR 0 9
16113: PPUSH
16114: LD_VAR 0 2
16118: PPUSH
16119: CALL 15587 0 2
16123: NOT
16124: IFFALSE 16128
// exit ;
16126: GO 16830
// pom := GetBase ( depot ) ;
16128: LD_ADDR_VAR 0 10
16132: PUSH
16133: LD_VAR 0 1
16137: PPUSH
16138: CALL_OW 274
16142: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
16143: LD_ADDR_VAR 0 11
16147: PUSH
16148: LD_VAR 0 2
16152: PPUSH
16153: LD_VAR 0 1
16157: PPUSH
16158: CALL_OW 248
16162: PPUSH
16163: CALL_OW 450
16167: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
16168: LD_VAR 0 10
16172: PPUSH
16173: LD_INT 1
16175: PPUSH
16176: CALL_OW 275
16180: PUSH
16181: LD_VAR 0 11
16185: PUSH
16186: LD_INT 1
16188: ARRAY
16189: GREATEREQUAL
16190: PUSH
16191: LD_VAR 0 10
16195: PPUSH
16196: LD_INT 2
16198: PPUSH
16199: CALL_OW 275
16203: PUSH
16204: LD_VAR 0 11
16208: PUSH
16209: LD_INT 2
16211: ARRAY
16212: GREATEREQUAL
16213: AND
16214: PUSH
16215: LD_VAR 0 10
16219: PPUSH
16220: LD_INT 3
16222: PPUSH
16223: CALL_OW 275
16227: PUSH
16228: LD_VAR 0 11
16232: PUSH
16233: LD_INT 3
16235: ARRAY
16236: GREATEREQUAL
16237: AND
16238: NOT
16239: IFFALSE 16243
// exit ;
16241: GO 16830
// if GetBType ( depot ) = b_depot then
16243: LD_VAR 0 1
16247: PPUSH
16248: CALL_OW 266
16252: PUSH
16253: LD_INT 0
16255: EQUAL
16256: IFFALSE 16268
// dist := 28 else
16258: LD_ADDR_VAR 0 14
16262: PUSH
16263: LD_INT 28
16265: ST_TO_ADDR
16266: GO 16276
// dist := 36 ;
16268: LD_ADDR_VAR 0 14
16272: PUSH
16273: LD_INT 36
16275: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
16276: LD_VAR 0 1
16280: PPUSH
16281: LD_VAR 0 3
16285: PPUSH
16286: LD_VAR 0 4
16290: PPUSH
16291: CALL_OW 297
16295: PUSH
16296: LD_VAR 0 14
16300: GREATER
16301: IFFALSE 16305
// exit ;
16303: GO 16830
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
16305: LD_ADDR_VAR 0 12
16309: PUSH
16310: LD_VAR 0 2
16314: PPUSH
16315: LD_VAR 0 3
16319: PPUSH
16320: LD_VAR 0 4
16324: PPUSH
16325: LD_VAR 0 5
16329: PPUSH
16330: LD_VAR 0 1
16334: PPUSH
16335: CALL_OW 248
16339: PPUSH
16340: LD_INT 0
16342: PPUSH
16343: CALL 16835 0 6
16347: ST_TO_ADDR
// if not hexes then
16348: LD_VAR 0 12
16352: NOT
16353: IFFALSE 16357
// exit ;
16355: GO 16830
// hex := GetHexInfo ( x , y ) ;
16357: LD_ADDR_VAR 0 15
16361: PUSH
16362: LD_VAR 0 3
16366: PPUSH
16367: LD_VAR 0 4
16371: PPUSH
16372: CALL_OW 546
16376: ST_TO_ADDR
// if hex [ 1 ] then
16377: LD_VAR 0 15
16381: PUSH
16382: LD_INT 1
16384: ARRAY
16385: IFFALSE 16389
// exit ;
16387: GO 16830
// height := hex [ 2 ] ;
16389: LD_ADDR_VAR 0 13
16393: PUSH
16394: LD_VAR 0 15
16398: PUSH
16399: LD_INT 2
16401: ARRAY
16402: ST_TO_ADDR
// for i = 1 to hexes do
16403: LD_ADDR_VAR 0 7
16407: PUSH
16408: DOUBLE
16409: LD_INT 1
16411: DEC
16412: ST_TO_ADDR
16413: LD_VAR 0 12
16417: PUSH
16418: FOR_TO
16419: IFFALSE 16749
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
16421: LD_VAR 0 12
16425: PUSH
16426: LD_VAR 0 7
16430: ARRAY
16431: PUSH
16432: LD_INT 1
16434: ARRAY
16435: PPUSH
16436: LD_VAR 0 12
16440: PUSH
16441: LD_VAR 0 7
16445: ARRAY
16446: PUSH
16447: LD_INT 2
16449: ARRAY
16450: PPUSH
16451: CALL_OW 488
16455: NOT
16456: PUSH
16457: LD_VAR 0 12
16461: PUSH
16462: LD_VAR 0 7
16466: ARRAY
16467: PUSH
16468: LD_INT 1
16470: ARRAY
16471: PPUSH
16472: LD_VAR 0 12
16476: PUSH
16477: LD_VAR 0 7
16481: ARRAY
16482: PUSH
16483: LD_INT 2
16485: ARRAY
16486: PPUSH
16487: CALL_OW 428
16491: PUSH
16492: LD_INT 0
16494: GREATER
16495: OR
16496: PUSH
16497: LD_VAR 0 12
16501: PUSH
16502: LD_VAR 0 7
16506: ARRAY
16507: PUSH
16508: LD_INT 1
16510: ARRAY
16511: PPUSH
16512: LD_VAR 0 12
16516: PUSH
16517: LD_VAR 0 7
16521: ARRAY
16522: PUSH
16523: LD_INT 2
16525: ARRAY
16526: PPUSH
16527: CALL_OW 351
16531: OR
16532: IFFALSE 16538
// exit ;
16534: POP
16535: POP
16536: GO 16830
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
16538: LD_ADDR_VAR 0 8
16542: PUSH
16543: LD_VAR 0 12
16547: PUSH
16548: LD_VAR 0 7
16552: ARRAY
16553: PUSH
16554: LD_INT 1
16556: ARRAY
16557: PPUSH
16558: LD_VAR 0 12
16562: PUSH
16563: LD_VAR 0 7
16567: ARRAY
16568: PUSH
16569: LD_INT 2
16571: ARRAY
16572: PPUSH
16573: CALL_OW 546
16577: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
16578: LD_VAR 0 8
16582: PUSH
16583: LD_INT 1
16585: ARRAY
16586: PUSH
16587: LD_VAR 0 8
16591: PUSH
16592: LD_INT 2
16594: ARRAY
16595: PUSH
16596: LD_VAR 0 13
16600: PUSH
16601: LD_INT 2
16603: PLUS
16604: GREATER
16605: OR
16606: PUSH
16607: LD_VAR 0 8
16611: PUSH
16612: LD_INT 2
16614: ARRAY
16615: PUSH
16616: LD_VAR 0 13
16620: PUSH
16621: LD_INT 2
16623: MINUS
16624: LESS
16625: OR
16626: PUSH
16627: LD_VAR 0 8
16631: PUSH
16632: LD_INT 3
16634: ARRAY
16635: PUSH
16636: LD_INT 0
16638: PUSH
16639: LD_INT 8
16641: PUSH
16642: LD_INT 9
16644: PUSH
16645: LD_INT 10
16647: PUSH
16648: LD_INT 11
16650: PUSH
16651: LD_INT 12
16653: PUSH
16654: LD_INT 13
16656: PUSH
16657: LD_INT 16
16659: PUSH
16660: LD_INT 17
16662: PUSH
16663: LD_INT 18
16665: PUSH
16666: LD_INT 19
16668: PUSH
16669: LD_INT 20
16671: PUSH
16672: LD_INT 21
16674: PUSH
16675: EMPTY
16676: LIST
16677: LIST
16678: LIST
16679: LIST
16680: LIST
16681: LIST
16682: LIST
16683: LIST
16684: LIST
16685: LIST
16686: LIST
16687: LIST
16688: LIST
16689: IN
16690: NOT
16691: OR
16692: PUSH
16693: LD_VAR 0 8
16697: PUSH
16698: LD_INT 5
16700: ARRAY
16701: NOT
16702: OR
16703: PUSH
16704: LD_VAR 0 8
16708: PUSH
16709: LD_INT 6
16711: ARRAY
16712: PUSH
16713: LD_INT 1
16715: PUSH
16716: LD_INT 2
16718: PUSH
16719: LD_INT 7
16721: PUSH
16722: LD_INT 9
16724: PUSH
16725: LD_INT 10
16727: PUSH
16728: LD_INT 11
16730: PUSH
16731: EMPTY
16732: LIST
16733: LIST
16734: LIST
16735: LIST
16736: LIST
16737: LIST
16738: IN
16739: NOT
16740: OR
16741: IFFALSE 16747
// exit ;
16743: POP
16744: POP
16745: GO 16830
// end ;
16747: GO 16418
16749: POP
16750: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
16751: LD_VAR 0 9
16755: PPUSH
16756: LD_VAR 0 3
16760: PPUSH
16761: LD_VAR 0 4
16765: PPUSH
16766: LD_INT 20
16768: PPUSH
16769: CALL 8753 0 4
16773: PUSH
16774: LD_INT 4
16776: ARRAY
16777: IFFALSE 16781
// exit ;
16779: GO 16830
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
16781: LD_VAR 0 2
16785: PUSH
16786: LD_INT 29
16788: PUSH
16789: LD_INT 30
16791: PUSH
16792: EMPTY
16793: LIST
16794: LIST
16795: IN
16796: PUSH
16797: LD_VAR 0 3
16801: PPUSH
16802: LD_VAR 0 4
16806: PPUSH
16807: LD_VAR 0 9
16811: PPUSH
16812: CALL_OW 440
16816: NOT
16817: AND
16818: IFFALSE 16822
// exit ;
16820: GO 16830
// result := true ;
16822: LD_ADDR_VAR 0 6
16826: PUSH
16827: LD_INT 1
16829: ST_TO_ADDR
// end ;
16830: LD_VAR 0 6
16834: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
16835: LD_INT 0
16837: PPUSH
16838: PPUSH
16839: PPUSH
16840: PPUSH
16841: PPUSH
16842: PPUSH
16843: PPUSH
16844: PPUSH
16845: PPUSH
16846: PPUSH
16847: PPUSH
16848: PPUSH
16849: PPUSH
16850: PPUSH
16851: PPUSH
16852: PPUSH
16853: PPUSH
16854: PPUSH
16855: PPUSH
16856: PPUSH
16857: PPUSH
16858: PPUSH
16859: PPUSH
16860: PPUSH
16861: PPUSH
16862: PPUSH
16863: PPUSH
16864: PPUSH
16865: PPUSH
16866: PPUSH
16867: PPUSH
16868: PPUSH
16869: PPUSH
16870: PPUSH
16871: PPUSH
16872: PPUSH
16873: PPUSH
16874: PPUSH
16875: PPUSH
16876: PPUSH
16877: PPUSH
16878: PPUSH
16879: PPUSH
16880: PPUSH
16881: PPUSH
16882: PPUSH
16883: PPUSH
16884: PPUSH
16885: PPUSH
16886: PPUSH
16887: PPUSH
16888: PPUSH
16889: PPUSH
16890: PPUSH
16891: PPUSH
16892: PPUSH
16893: PPUSH
16894: PPUSH
// result = [ ] ;
16895: LD_ADDR_VAR 0 7
16899: PUSH
16900: EMPTY
16901: ST_TO_ADDR
// temp_list = [ ] ;
16902: LD_ADDR_VAR 0 9
16906: PUSH
16907: EMPTY
16908: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
16909: LD_VAR 0 4
16913: PUSH
16914: LD_INT 0
16916: PUSH
16917: LD_INT 1
16919: PUSH
16920: LD_INT 2
16922: PUSH
16923: LD_INT 3
16925: PUSH
16926: LD_INT 4
16928: PUSH
16929: LD_INT 5
16931: PUSH
16932: EMPTY
16933: LIST
16934: LIST
16935: LIST
16936: LIST
16937: LIST
16938: LIST
16939: IN
16940: NOT
16941: PUSH
16942: LD_VAR 0 1
16946: PUSH
16947: LD_INT 0
16949: PUSH
16950: LD_INT 1
16952: PUSH
16953: EMPTY
16954: LIST
16955: LIST
16956: IN
16957: PUSH
16958: LD_VAR 0 5
16962: PUSH
16963: LD_INT 1
16965: PUSH
16966: LD_INT 2
16968: PUSH
16969: LD_INT 3
16971: PUSH
16972: EMPTY
16973: LIST
16974: LIST
16975: LIST
16976: IN
16977: NOT
16978: AND
16979: OR
16980: IFFALSE 16984
// exit ;
16982: GO 35375
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
16984: LD_VAR 0 1
16988: PUSH
16989: LD_INT 6
16991: PUSH
16992: LD_INT 7
16994: PUSH
16995: LD_INT 8
16997: PUSH
16998: LD_INT 13
17000: PUSH
17001: LD_INT 12
17003: PUSH
17004: LD_INT 15
17006: PUSH
17007: LD_INT 11
17009: PUSH
17010: LD_INT 14
17012: PUSH
17013: LD_INT 10
17015: PUSH
17016: EMPTY
17017: LIST
17018: LIST
17019: LIST
17020: LIST
17021: LIST
17022: LIST
17023: LIST
17024: LIST
17025: LIST
17026: IN
17027: IFFALSE 17037
// btype = b_lab ;
17029: LD_ADDR_VAR 0 1
17033: PUSH
17034: LD_INT 6
17036: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
17037: LD_VAR 0 6
17041: PUSH
17042: LD_INT 0
17044: PUSH
17045: LD_INT 1
17047: PUSH
17048: LD_INT 2
17050: PUSH
17051: EMPTY
17052: LIST
17053: LIST
17054: LIST
17055: IN
17056: NOT
17057: PUSH
17058: LD_VAR 0 1
17062: PUSH
17063: LD_INT 0
17065: PUSH
17066: LD_INT 1
17068: PUSH
17069: LD_INT 2
17071: PUSH
17072: LD_INT 3
17074: PUSH
17075: LD_INT 6
17077: PUSH
17078: LD_INT 36
17080: PUSH
17081: LD_INT 4
17083: PUSH
17084: LD_INT 5
17086: PUSH
17087: LD_INT 31
17089: PUSH
17090: LD_INT 32
17092: PUSH
17093: LD_INT 33
17095: PUSH
17096: EMPTY
17097: LIST
17098: LIST
17099: LIST
17100: LIST
17101: LIST
17102: LIST
17103: LIST
17104: LIST
17105: LIST
17106: LIST
17107: LIST
17108: IN
17109: NOT
17110: PUSH
17111: LD_VAR 0 6
17115: PUSH
17116: LD_INT 1
17118: EQUAL
17119: AND
17120: OR
17121: PUSH
17122: LD_VAR 0 1
17126: PUSH
17127: LD_INT 2
17129: PUSH
17130: LD_INT 3
17132: PUSH
17133: EMPTY
17134: LIST
17135: LIST
17136: IN
17137: NOT
17138: PUSH
17139: LD_VAR 0 6
17143: PUSH
17144: LD_INT 2
17146: EQUAL
17147: AND
17148: OR
17149: IFFALSE 17159
// mode = 0 ;
17151: LD_ADDR_VAR 0 6
17155: PUSH
17156: LD_INT 0
17158: ST_TO_ADDR
// case mode of 0 :
17159: LD_VAR 0 6
17163: PUSH
17164: LD_INT 0
17166: DOUBLE
17167: EQUAL
17168: IFTRUE 17172
17170: GO 28625
17172: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
17173: LD_ADDR_VAR 0 11
17177: PUSH
17178: LD_INT 0
17180: PUSH
17181: LD_INT 0
17183: PUSH
17184: EMPTY
17185: LIST
17186: LIST
17187: PUSH
17188: LD_INT 0
17190: PUSH
17191: LD_INT 1
17193: NEG
17194: PUSH
17195: EMPTY
17196: LIST
17197: LIST
17198: PUSH
17199: LD_INT 1
17201: PUSH
17202: LD_INT 0
17204: PUSH
17205: EMPTY
17206: LIST
17207: LIST
17208: PUSH
17209: LD_INT 1
17211: PUSH
17212: LD_INT 1
17214: PUSH
17215: EMPTY
17216: LIST
17217: LIST
17218: PUSH
17219: LD_INT 0
17221: PUSH
17222: LD_INT 1
17224: PUSH
17225: EMPTY
17226: LIST
17227: LIST
17228: PUSH
17229: LD_INT 1
17231: NEG
17232: PUSH
17233: LD_INT 0
17235: PUSH
17236: EMPTY
17237: LIST
17238: LIST
17239: PUSH
17240: LD_INT 1
17242: NEG
17243: PUSH
17244: LD_INT 1
17246: NEG
17247: PUSH
17248: EMPTY
17249: LIST
17250: LIST
17251: PUSH
17252: LD_INT 1
17254: NEG
17255: PUSH
17256: LD_INT 2
17258: NEG
17259: PUSH
17260: EMPTY
17261: LIST
17262: LIST
17263: PUSH
17264: LD_INT 0
17266: PUSH
17267: LD_INT 2
17269: NEG
17270: PUSH
17271: EMPTY
17272: LIST
17273: LIST
17274: PUSH
17275: LD_INT 1
17277: PUSH
17278: LD_INT 1
17280: NEG
17281: PUSH
17282: EMPTY
17283: LIST
17284: LIST
17285: PUSH
17286: LD_INT 1
17288: PUSH
17289: LD_INT 2
17291: PUSH
17292: EMPTY
17293: LIST
17294: LIST
17295: PUSH
17296: LD_INT 0
17298: PUSH
17299: LD_INT 2
17301: PUSH
17302: EMPTY
17303: LIST
17304: LIST
17305: PUSH
17306: LD_INT 1
17308: NEG
17309: PUSH
17310: LD_INT 1
17312: PUSH
17313: EMPTY
17314: LIST
17315: LIST
17316: PUSH
17317: LD_INT 1
17319: PUSH
17320: LD_INT 3
17322: PUSH
17323: EMPTY
17324: LIST
17325: LIST
17326: PUSH
17327: LD_INT 0
17329: PUSH
17330: LD_INT 3
17332: PUSH
17333: EMPTY
17334: LIST
17335: LIST
17336: PUSH
17337: LD_INT 1
17339: NEG
17340: PUSH
17341: LD_INT 2
17343: PUSH
17344: EMPTY
17345: LIST
17346: LIST
17347: PUSH
17348: EMPTY
17349: LIST
17350: LIST
17351: LIST
17352: LIST
17353: LIST
17354: LIST
17355: LIST
17356: LIST
17357: LIST
17358: LIST
17359: LIST
17360: LIST
17361: LIST
17362: LIST
17363: LIST
17364: LIST
17365: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
17366: LD_ADDR_VAR 0 12
17370: PUSH
17371: LD_INT 0
17373: PUSH
17374: LD_INT 0
17376: PUSH
17377: EMPTY
17378: LIST
17379: LIST
17380: PUSH
17381: LD_INT 0
17383: PUSH
17384: LD_INT 1
17386: NEG
17387: PUSH
17388: EMPTY
17389: LIST
17390: LIST
17391: PUSH
17392: LD_INT 1
17394: PUSH
17395: LD_INT 0
17397: PUSH
17398: EMPTY
17399: LIST
17400: LIST
17401: PUSH
17402: LD_INT 1
17404: PUSH
17405: LD_INT 1
17407: PUSH
17408: EMPTY
17409: LIST
17410: LIST
17411: PUSH
17412: LD_INT 0
17414: PUSH
17415: LD_INT 1
17417: PUSH
17418: EMPTY
17419: LIST
17420: LIST
17421: PUSH
17422: LD_INT 1
17424: NEG
17425: PUSH
17426: LD_INT 0
17428: PUSH
17429: EMPTY
17430: LIST
17431: LIST
17432: PUSH
17433: LD_INT 1
17435: NEG
17436: PUSH
17437: LD_INT 1
17439: NEG
17440: PUSH
17441: EMPTY
17442: LIST
17443: LIST
17444: PUSH
17445: LD_INT 1
17447: PUSH
17448: LD_INT 1
17450: NEG
17451: PUSH
17452: EMPTY
17453: LIST
17454: LIST
17455: PUSH
17456: LD_INT 2
17458: PUSH
17459: LD_INT 0
17461: PUSH
17462: EMPTY
17463: LIST
17464: LIST
17465: PUSH
17466: LD_INT 2
17468: PUSH
17469: LD_INT 1
17471: PUSH
17472: EMPTY
17473: LIST
17474: LIST
17475: PUSH
17476: LD_INT 1
17478: NEG
17479: PUSH
17480: LD_INT 1
17482: PUSH
17483: EMPTY
17484: LIST
17485: LIST
17486: PUSH
17487: LD_INT 2
17489: NEG
17490: PUSH
17491: LD_INT 0
17493: PUSH
17494: EMPTY
17495: LIST
17496: LIST
17497: PUSH
17498: LD_INT 2
17500: NEG
17501: PUSH
17502: LD_INT 1
17504: NEG
17505: PUSH
17506: EMPTY
17507: LIST
17508: LIST
17509: PUSH
17510: LD_INT 2
17512: NEG
17513: PUSH
17514: LD_INT 1
17516: PUSH
17517: EMPTY
17518: LIST
17519: LIST
17520: PUSH
17521: LD_INT 3
17523: NEG
17524: PUSH
17525: LD_INT 0
17527: PUSH
17528: EMPTY
17529: LIST
17530: LIST
17531: PUSH
17532: LD_INT 3
17534: NEG
17535: PUSH
17536: LD_INT 1
17538: NEG
17539: PUSH
17540: EMPTY
17541: LIST
17542: LIST
17543: PUSH
17544: EMPTY
17545: LIST
17546: LIST
17547: LIST
17548: LIST
17549: LIST
17550: LIST
17551: LIST
17552: LIST
17553: LIST
17554: LIST
17555: LIST
17556: LIST
17557: LIST
17558: LIST
17559: LIST
17560: LIST
17561: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
17562: LD_ADDR_VAR 0 13
17566: PUSH
17567: LD_INT 0
17569: PUSH
17570: LD_INT 0
17572: PUSH
17573: EMPTY
17574: LIST
17575: LIST
17576: PUSH
17577: LD_INT 0
17579: PUSH
17580: LD_INT 1
17582: NEG
17583: PUSH
17584: EMPTY
17585: LIST
17586: LIST
17587: PUSH
17588: LD_INT 1
17590: PUSH
17591: LD_INT 0
17593: PUSH
17594: EMPTY
17595: LIST
17596: LIST
17597: PUSH
17598: LD_INT 1
17600: PUSH
17601: LD_INT 1
17603: PUSH
17604: EMPTY
17605: LIST
17606: LIST
17607: PUSH
17608: LD_INT 0
17610: PUSH
17611: LD_INT 1
17613: PUSH
17614: EMPTY
17615: LIST
17616: LIST
17617: PUSH
17618: LD_INT 1
17620: NEG
17621: PUSH
17622: LD_INT 0
17624: PUSH
17625: EMPTY
17626: LIST
17627: LIST
17628: PUSH
17629: LD_INT 1
17631: NEG
17632: PUSH
17633: LD_INT 1
17635: NEG
17636: PUSH
17637: EMPTY
17638: LIST
17639: LIST
17640: PUSH
17641: LD_INT 1
17643: NEG
17644: PUSH
17645: LD_INT 2
17647: NEG
17648: PUSH
17649: EMPTY
17650: LIST
17651: LIST
17652: PUSH
17653: LD_INT 2
17655: PUSH
17656: LD_INT 1
17658: PUSH
17659: EMPTY
17660: LIST
17661: LIST
17662: PUSH
17663: LD_INT 2
17665: PUSH
17666: LD_INT 2
17668: PUSH
17669: EMPTY
17670: LIST
17671: LIST
17672: PUSH
17673: LD_INT 1
17675: PUSH
17676: LD_INT 2
17678: PUSH
17679: EMPTY
17680: LIST
17681: LIST
17682: PUSH
17683: LD_INT 2
17685: NEG
17686: PUSH
17687: LD_INT 1
17689: NEG
17690: PUSH
17691: EMPTY
17692: LIST
17693: LIST
17694: PUSH
17695: LD_INT 2
17697: NEG
17698: PUSH
17699: LD_INT 2
17701: NEG
17702: PUSH
17703: EMPTY
17704: LIST
17705: LIST
17706: PUSH
17707: LD_INT 2
17709: NEG
17710: PUSH
17711: LD_INT 3
17713: NEG
17714: PUSH
17715: EMPTY
17716: LIST
17717: LIST
17718: PUSH
17719: LD_INT 3
17721: NEG
17722: PUSH
17723: LD_INT 2
17725: NEG
17726: PUSH
17727: EMPTY
17728: LIST
17729: LIST
17730: PUSH
17731: LD_INT 3
17733: NEG
17734: PUSH
17735: LD_INT 3
17737: NEG
17738: PUSH
17739: EMPTY
17740: LIST
17741: LIST
17742: PUSH
17743: EMPTY
17744: LIST
17745: LIST
17746: LIST
17747: LIST
17748: LIST
17749: LIST
17750: LIST
17751: LIST
17752: LIST
17753: LIST
17754: LIST
17755: LIST
17756: LIST
17757: LIST
17758: LIST
17759: LIST
17760: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
17761: LD_ADDR_VAR 0 14
17765: PUSH
17766: LD_INT 0
17768: PUSH
17769: LD_INT 0
17771: PUSH
17772: EMPTY
17773: LIST
17774: LIST
17775: PUSH
17776: LD_INT 0
17778: PUSH
17779: LD_INT 1
17781: NEG
17782: PUSH
17783: EMPTY
17784: LIST
17785: LIST
17786: PUSH
17787: LD_INT 1
17789: PUSH
17790: LD_INT 0
17792: PUSH
17793: EMPTY
17794: LIST
17795: LIST
17796: PUSH
17797: LD_INT 1
17799: PUSH
17800: LD_INT 1
17802: PUSH
17803: EMPTY
17804: LIST
17805: LIST
17806: PUSH
17807: LD_INT 0
17809: PUSH
17810: LD_INT 1
17812: PUSH
17813: EMPTY
17814: LIST
17815: LIST
17816: PUSH
17817: LD_INT 1
17819: NEG
17820: PUSH
17821: LD_INT 0
17823: PUSH
17824: EMPTY
17825: LIST
17826: LIST
17827: PUSH
17828: LD_INT 1
17830: NEG
17831: PUSH
17832: LD_INT 1
17834: NEG
17835: PUSH
17836: EMPTY
17837: LIST
17838: LIST
17839: PUSH
17840: LD_INT 1
17842: NEG
17843: PUSH
17844: LD_INT 2
17846: NEG
17847: PUSH
17848: EMPTY
17849: LIST
17850: LIST
17851: PUSH
17852: LD_INT 0
17854: PUSH
17855: LD_INT 2
17857: NEG
17858: PUSH
17859: EMPTY
17860: LIST
17861: LIST
17862: PUSH
17863: LD_INT 1
17865: PUSH
17866: LD_INT 1
17868: NEG
17869: PUSH
17870: EMPTY
17871: LIST
17872: LIST
17873: PUSH
17874: LD_INT 1
17876: PUSH
17877: LD_INT 2
17879: PUSH
17880: EMPTY
17881: LIST
17882: LIST
17883: PUSH
17884: LD_INT 0
17886: PUSH
17887: LD_INT 2
17889: PUSH
17890: EMPTY
17891: LIST
17892: LIST
17893: PUSH
17894: LD_INT 1
17896: NEG
17897: PUSH
17898: LD_INT 1
17900: PUSH
17901: EMPTY
17902: LIST
17903: LIST
17904: PUSH
17905: LD_INT 1
17907: NEG
17908: PUSH
17909: LD_INT 3
17911: NEG
17912: PUSH
17913: EMPTY
17914: LIST
17915: LIST
17916: PUSH
17917: LD_INT 0
17919: PUSH
17920: LD_INT 3
17922: NEG
17923: PUSH
17924: EMPTY
17925: LIST
17926: LIST
17927: PUSH
17928: LD_INT 1
17930: PUSH
17931: LD_INT 2
17933: NEG
17934: PUSH
17935: EMPTY
17936: LIST
17937: LIST
17938: PUSH
17939: EMPTY
17940: LIST
17941: LIST
17942: LIST
17943: LIST
17944: LIST
17945: LIST
17946: LIST
17947: LIST
17948: LIST
17949: LIST
17950: LIST
17951: LIST
17952: LIST
17953: LIST
17954: LIST
17955: LIST
17956: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
17957: LD_ADDR_VAR 0 15
17961: PUSH
17962: LD_INT 0
17964: PUSH
17965: LD_INT 0
17967: PUSH
17968: EMPTY
17969: LIST
17970: LIST
17971: PUSH
17972: LD_INT 0
17974: PUSH
17975: LD_INT 1
17977: NEG
17978: PUSH
17979: EMPTY
17980: LIST
17981: LIST
17982: PUSH
17983: LD_INT 1
17985: PUSH
17986: LD_INT 0
17988: PUSH
17989: EMPTY
17990: LIST
17991: LIST
17992: PUSH
17993: LD_INT 1
17995: PUSH
17996: LD_INT 1
17998: PUSH
17999: EMPTY
18000: LIST
18001: LIST
18002: PUSH
18003: LD_INT 0
18005: PUSH
18006: LD_INT 1
18008: PUSH
18009: EMPTY
18010: LIST
18011: LIST
18012: PUSH
18013: LD_INT 1
18015: NEG
18016: PUSH
18017: LD_INT 0
18019: PUSH
18020: EMPTY
18021: LIST
18022: LIST
18023: PUSH
18024: LD_INT 1
18026: NEG
18027: PUSH
18028: LD_INT 1
18030: NEG
18031: PUSH
18032: EMPTY
18033: LIST
18034: LIST
18035: PUSH
18036: LD_INT 1
18038: PUSH
18039: LD_INT 1
18041: NEG
18042: PUSH
18043: EMPTY
18044: LIST
18045: LIST
18046: PUSH
18047: LD_INT 2
18049: PUSH
18050: LD_INT 0
18052: PUSH
18053: EMPTY
18054: LIST
18055: LIST
18056: PUSH
18057: LD_INT 2
18059: PUSH
18060: LD_INT 1
18062: PUSH
18063: EMPTY
18064: LIST
18065: LIST
18066: PUSH
18067: LD_INT 1
18069: NEG
18070: PUSH
18071: LD_INT 1
18073: PUSH
18074: EMPTY
18075: LIST
18076: LIST
18077: PUSH
18078: LD_INT 2
18080: NEG
18081: PUSH
18082: LD_INT 0
18084: PUSH
18085: EMPTY
18086: LIST
18087: LIST
18088: PUSH
18089: LD_INT 2
18091: NEG
18092: PUSH
18093: LD_INT 1
18095: NEG
18096: PUSH
18097: EMPTY
18098: LIST
18099: LIST
18100: PUSH
18101: LD_INT 2
18103: PUSH
18104: LD_INT 1
18106: NEG
18107: PUSH
18108: EMPTY
18109: LIST
18110: LIST
18111: PUSH
18112: LD_INT 3
18114: PUSH
18115: LD_INT 0
18117: PUSH
18118: EMPTY
18119: LIST
18120: LIST
18121: PUSH
18122: LD_INT 3
18124: PUSH
18125: LD_INT 1
18127: PUSH
18128: EMPTY
18129: LIST
18130: LIST
18131: PUSH
18132: EMPTY
18133: LIST
18134: LIST
18135: LIST
18136: LIST
18137: LIST
18138: LIST
18139: LIST
18140: LIST
18141: LIST
18142: LIST
18143: LIST
18144: LIST
18145: LIST
18146: LIST
18147: LIST
18148: LIST
18149: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
18150: LD_ADDR_VAR 0 16
18154: PUSH
18155: LD_INT 0
18157: PUSH
18158: LD_INT 0
18160: PUSH
18161: EMPTY
18162: LIST
18163: LIST
18164: PUSH
18165: LD_INT 0
18167: PUSH
18168: LD_INT 1
18170: NEG
18171: PUSH
18172: EMPTY
18173: LIST
18174: LIST
18175: PUSH
18176: LD_INT 1
18178: PUSH
18179: LD_INT 0
18181: PUSH
18182: EMPTY
18183: LIST
18184: LIST
18185: PUSH
18186: LD_INT 1
18188: PUSH
18189: LD_INT 1
18191: PUSH
18192: EMPTY
18193: LIST
18194: LIST
18195: PUSH
18196: LD_INT 0
18198: PUSH
18199: LD_INT 1
18201: PUSH
18202: EMPTY
18203: LIST
18204: LIST
18205: PUSH
18206: LD_INT 1
18208: NEG
18209: PUSH
18210: LD_INT 0
18212: PUSH
18213: EMPTY
18214: LIST
18215: LIST
18216: PUSH
18217: LD_INT 1
18219: NEG
18220: PUSH
18221: LD_INT 1
18223: NEG
18224: PUSH
18225: EMPTY
18226: LIST
18227: LIST
18228: PUSH
18229: LD_INT 1
18231: NEG
18232: PUSH
18233: LD_INT 2
18235: NEG
18236: PUSH
18237: EMPTY
18238: LIST
18239: LIST
18240: PUSH
18241: LD_INT 2
18243: PUSH
18244: LD_INT 1
18246: PUSH
18247: EMPTY
18248: LIST
18249: LIST
18250: PUSH
18251: LD_INT 2
18253: PUSH
18254: LD_INT 2
18256: PUSH
18257: EMPTY
18258: LIST
18259: LIST
18260: PUSH
18261: LD_INT 1
18263: PUSH
18264: LD_INT 2
18266: PUSH
18267: EMPTY
18268: LIST
18269: LIST
18270: PUSH
18271: LD_INT 2
18273: NEG
18274: PUSH
18275: LD_INT 1
18277: NEG
18278: PUSH
18279: EMPTY
18280: LIST
18281: LIST
18282: PUSH
18283: LD_INT 2
18285: NEG
18286: PUSH
18287: LD_INT 2
18289: NEG
18290: PUSH
18291: EMPTY
18292: LIST
18293: LIST
18294: PUSH
18295: LD_INT 3
18297: PUSH
18298: LD_INT 2
18300: PUSH
18301: EMPTY
18302: LIST
18303: LIST
18304: PUSH
18305: LD_INT 3
18307: PUSH
18308: LD_INT 3
18310: PUSH
18311: EMPTY
18312: LIST
18313: LIST
18314: PUSH
18315: LD_INT 2
18317: PUSH
18318: LD_INT 3
18320: PUSH
18321: EMPTY
18322: LIST
18323: LIST
18324: PUSH
18325: EMPTY
18326: LIST
18327: LIST
18328: LIST
18329: LIST
18330: LIST
18331: LIST
18332: LIST
18333: LIST
18334: LIST
18335: LIST
18336: LIST
18337: LIST
18338: LIST
18339: LIST
18340: LIST
18341: LIST
18342: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18343: LD_ADDR_VAR 0 17
18347: PUSH
18348: LD_INT 0
18350: PUSH
18351: LD_INT 0
18353: PUSH
18354: EMPTY
18355: LIST
18356: LIST
18357: PUSH
18358: LD_INT 0
18360: PUSH
18361: LD_INT 1
18363: NEG
18364: PUSH
18365: EMPTY
18366: LIST
18367: LIST
18368: PUSH
18369: LD_INT 1
18371: PUSH
18372: LD_INT 0
18374: PUSH
18375: EMPTY
18376: LIST
18377: LIST
18378: PUSH
18379: LD_INT 1
18381: PUSH
18382: LD_INT 1
18384: PUSH
18385: EMPTY
18386: LIST
18387: LIST
18388: PUSH
18389: LD_INT 0
18391: PUSH
18392: LD_INT 1
18394: PUSH
18395: EMPTY
18396: LIST
18397: LIST
18398: PUSH
18399: LD_INT 1
18401: NEG
18402: PUSH
18403: LD_INT 0
18405: PUSH
18406: EMPTY
18407: LIST
18408: LIST
18409: PUSH
18410: LD_INT 1
18412: NEG
18413: PUSH
18414: LD_INT 1
18416: NEG
18417: PUSH
18418: EMPTY
18419: LIST
18420: LIST
18421: PUSH
18422: LD_INT 1
18424: NEG
18425: PUSH
18426: LD_INT 2
18428: NEG
18429: PUSH
18430: EMPTY
18431: LIST
18432: LIST
18433: PUSH
18434: LD_INT 0
18436: PUSH
18437: LD_INT 2
18439: NEG
18440: PUSH
18441: EMPTY
18442: LIST
18443: LIST
18444: PUSH
18445: LD_INT 1
18447: PUSH
18448: LD_INT 1
18450: NEG
18451: PUSH
18452: EMPTY
18453: LIST
18454: LIST
18455: PUSH
18456: LD_INT 2
18458: PUSH
18459: LD_INT 0
18461: PUSH
18462: EMPTY
18463: LIST
18464: LIST
18465: PUSH
18466: LD_INT 2
18468: PUSH
18469: LD_INT 1
18471: PUSH
18472: EMPTY
18473: LIST
18474: LIST
18475: PUSH
18476: LD_INT 2
18478: PUSH
18479: LD_INT 2
18481: PUSH
18482: EMPTY
18483: LIST
18484: LIST
18485: PUSH
18486: LD_INT 1
18488: PUSH
18489: LD_INT 2
18491: PUSH
18492: EMPTY
18493: LIST
18494: LIST
18495: PUSH
18496: LD_INT 0
18498: PUSH
18499: LD_INT 2
18501: PUSH
18502: EMPTY
18503: LIST
18504: LIST
18505: PUSH
18506: LD_INT 1
18508: NEG
18509: PUSH
18510: LD_INT 1
18512: PUSH
18513: EMPTY
18514: LIST
18515: LIST
18516: PUSH
18517: LD_INT 2
18519: NEG
18520: PUSH
18521: LD_INT 0
18523: PUSH
18524: EMPTY
18525: LIST
18526: LIST
18527: PUSH
18528: LD_INT 2
18530: NEG
18531: PUSH
18532: LD_INT 1
18534: NEG
18535: PUSH
18536: EMPTY
18537: LIST
18538: LIST
18539: PUSH
18540: LD_INT 2
18542: NEG
18543: PUSH
18544: LD_INT 2
18546: NEG
18547: PUSH
18548: EMPTY
18549: LIST
18550: LIST
18551: PUSH
18552: EMPTY
18553: LIST
18554: LIST
18555: LIST
18556: LIST
18557: LIST
18558: LIST
18559: LIST
18560: LIST
18561: LIST
18562: LIST
18563: LIST
18564: LIST
18565: LIST
18566: LIST
18567: LIST
18568: LIST
18569: LIST
18570: LIST
18571: LIST
18572: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18573: LD_ADDR_VAR 0 18
18577: PUSH
18578: LD_INT 0
18580: PUSH
18581: LD_INT 0
18583: PUSH
18584: EMPTY
18585: LIST
18586: LIST
18587: PUSH
18588: LD_INT 0
18590: PUSH
18591: LD_INT 1
18593: NEG
18594: PUSH
18595: EMPTY
18596: LIST
18597: LIST
18598: PUSH
18599: LD_INT 1
18601: PUSH
18602: LD_INT 0
18604: PUSH
18605: EMPTY
18606: LIST
18607: LIST
18608: PUSH
18609: LD_INT 1
18611: PUSH
18612: LD_INT 1
18614: PUSH
18615: EMPTY
18616: LIST
18617: LIST
18618: PUSH
18619: LD_INT 0
18621: PUSH
18622: LD_INT 1
18624: PUSH
18625: EMPTY
18626: LIST
18627: LIST
18628: PUSH
18629: LD_INT 1
18631: NEG
18632: PUSH
18633: LD_INT 0
18635: PUSH
18636: EMPTY
18637: LIST
18638: LIST
18639: PUSH
18640: LD_INT 1
18642: NEG
18643: PUSH
18644: LD_INT 1
18646: NEG
18647: PUSH
18648: EMPTY
18649: LIST
18650: LIST
18651: PUSH
18652: LD_INT 1
18654: NEG
18655: PUSH
18656: LD_INT 2
18658: NEG
18659: PUSH
18660: EMPTY
18661: LIST
18662: LIST
18663: PUSH
18664: LD_INT 0
18666: PUSH
18667: LD_INT 2
18669: NEG
18670: PUSH
18671: EMPTY
18672: LIST
18673: LIST
18674: PUSH
18675: LD_INT 1
18677: PUSH
18678: LD_INT 1
18680: NEG
18681: PUSH
18682: EMPTY
18683: LIST
18684: LIST
18685: PUSH
18686: LD_INT 2
18688: PUSH
18689: LD_INT 0
18691: PUSH
18692: EMPTY
18693: LIST
18694: LIST
18695: PUSH
18696: LD_INT 2
18698: PUSH
18699: LD_INT 1
18701: PUSH
18702: EMPTY
18703: LIST
18704: LIST
18705: PUSH
18706: LD_INT 2
18708: PUSH
18709: LD_INT 2
18711: PUSH
18712: EMPTY
18713: LIST
18714: LIST
18715: PUSH
18716: LD_INT 1
18718: PUSH
18719: LD_INT 2
18721: PUSH
18722: EMPTY
18723: LIST
18724: LIST
18725: PUSH
18726: LD_INT 0
18728: PUSH
18729: LD_INT 2
18731: PUSH
18732: EMPTY
18733: LIST
18734: LIST
18735: PUSH
18736: LD_INT 1
18738: NEG
18739: PUSH
18740: LD_INT 1
18742: PUSH
18743: EMPTY
18744: LIST
18745: LIST
18746: PUSH
18747: LD_INT 2
18749: NEG
18750: PUSH
18751: LD_INT 0
18753: PUSH
18754: EMPTY
18755: LIST
18756: LIST
18757: PUSH
18758: LD_INT 2
18760: NEG
18761: PUSH
18762: LD_INT 1
18764: NEG
18765: PUSH
18766: EMPTY
18767: LIST
18768: LIST
18769: PUSH
18770: LD_INT 2
18772: NEG
18773: PUSH
18774: LD_INT 2
18776: NEG
18777: PUSH
18778: EMPTY
18779: LIST
18780: LIST
18781: PUSH
18782: EMPTY
18783: LIST
18784: LIST
18785: LIST
18786: LIST
18787: LIST
18788: LIST
18789: LIST
18790: LIST
18791: LIST
18792: LIST
18793: LIST
18794: LIST
18795: LIST
18796: LIST
18797: LIST
18798: LIST
18799: LIST
18800: LIST
18801: LIST
18802: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18803: LD_ADDR_VAR 0 19
18807: PUSH
18808: LD_INT 0
18810: PUSH
18811: LD_INT 0
18813: PUSH
18814: EMPTY
18815: LIST
18816: LIST
18817: PUSH
18818: LD_INT 0
18820: PUSH
18821: LD_INT 1
18823: NEG
18824: PUSH
18825: EMPTY
18826: LIST
18827: LIST
18828: PUSH
18829: LD_INT 1
18831: PUSH
18832: LD_INT 0
18834: PUSH
18835: EMPTY
18836: LIST
18837: LIST
18838: PUSH
18839: LD_INT 1
18841: PUSH
18842: LD_INT 1
18844: PUSH
18845: EMPTY
18846: LIST
18847: LIST
18848: PUSH
18849: LD_INT 0
18851: PUSH
18852: LD_INT 1
18854: PUSH
18855: EMPTY
18856: LIST
18857: LIST
18858: PUSH
18859: LD_INT 1
18861: NEG
18862: PUSH
18863: LD_INT 0
18865: PUSH
18866: EMPTY
18867: LIST
18868: LIST
18869: PUSH
18870: LD_INT 1
18872: NEG
18873: PUSH
18874: LD_INT 1
18876: NEG
18877: PUSH
18878: EMPTY
18879: LIST
18880: LIST
18881: PUSH
18882: LD_INT 1
18884: NEG
18885: PUSH
18886: LD_INT 2
18888: NEG
18889: PUSH
18890: EMPTY
18891: LIST
18892: LIST
18893: PUSH
18894: LD_INT 0
18896: PUSH
18897: LD_INT 2
18899: NEG
18900: PUSH
18901: EMPTY
18902: LIST
18903: LIST
18904: PUSH
18905: LD_INT 1
18907: PUSH
18908: LD_INT 1
18910: NEG
18911: PUSH
18912: EMPTY
18913: LIST
18914: LIST
18915: PUSH
18916: LD_INT 2
18918: PUSH
18919: LD_INT 0
18921: PUSH
18922: EMPTY
18923: LIST
18924: LIST
18925: PUSH
18926: LD_INT 2
18928: PUSH
18929: LD_INT 1
18931: PUSH
18932: EMPTY
18933: LIST
18934: LIST
18935: PUSH
18936: LD_INT 2
18938: PUSH
18939: LD_INT 2
18941: PUSH
18942: EMPTY
18943: LIST
18944: LIST
18945: PUSH
18946: LD_INT 1
18948: PUSH
18949: LD_INT 2
18951: PUSH
18952: EMPTY
18953: LIST
18954: LIST
18955: PUSH
18956: LD_INT 0
18958: PUSH
18959: LD_INT 2
18961: PUSH
18962: EMPTY
18963: LIST
18964: LIST
18965: PUSH
18966: LD_INT 1
18968: NEG
18969: PUSH
18970: LD_INT 1
18972: PUSH
18973: EMPTY
18974: LIST
18975: LIST
18976: PUSH
18977: LD_INT 2
18979: NEG
18980: PUSH
18981: LD_INT 0
18983: PUSH
18984: EMPTY
18985: LIST
18986: LIST
18987: PUSH
18988: LD_INT 2
18990: NEG
18991: PUSH
18992: LD_INT 1
18994: NEG
18995: PUSH
18996: EMPTY
18997: LIST
18998: LIST
18999: PUSH
19000: LD_INT 2
19002: NEG
19003: PUSH
19004: LD_INT 2
19006: NEG
19007: PUSH
19008: EMPTY
19009: LIST
19010: LIST
19011: PUSH
19012: EMPTY
19013: LIST
19014: LIST
19015: LIST
19016: LIST
19017: LIST
19018: LIST
19019: LIST
19020: LIST
19021: LIST
19022: LIST
19023: LIST
19024: LIST
19025: LIST
19026: LIST
19027: LIST
19028: LIST
19029: LIST
19030: LIST
19031: LIST
19032: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19033: LD_ADDR_VAR 0 20
19037: PUSH
19038: LD_INT 0
19040: PUSH
19041: LD_INT 0
19043: PUSH
19044: EMPTY
19045: LIST
19046: LIST
19047: PUSH
19048: LD_INT 0
19050: PUSH
19051: LD_INT 1
19053: NEG
19054: PUSH
19055: EMPTY
19056: LIST
19057: LIST
19058: PUSH
19059: LD_INT 1
19061: PUSH
19062: LD_INT 0
19064: PUSH
19065: EMPTY
19066: LIST
19067: LIST
19068: PUSH
19069: LD_INT 1
19071: PUSH
19072: LD_INT 1
19074: PUSH
19075: EMPTY
19076: LIST
19077: LIST
19078: PUSH
19079: LD_INT 0
19081: PUSH
19082: LD_INT 1
19084: PUSH
19085: EMPTY
19086: LIST
19087: LIST
19088: PUSH
19089: LD_INT 1
19091: NEG
19092: PUSH
19093: LD_INT 0
19095: PUSH
19096: EMPTY
19097: LIST
19098: LIST
19099: PUSH
19100: LD_INT 1
19102: NEG
19103: PUSH
19104: LD_INT 1
19106: NEG
19107: PUSH
19108: EMPTY
19109: LIST
19110: LIST
19111: PUSH
19112: LD_INT 1
19114: NEG
19115: PUSH
19116: LD_INT 2
19118: NEG
19119: PUSH
19120: EMPTY
19121: LIST
19122: LIST
19123: PUSH
19124: LD_INT 0
19126: PUSH
19127: LD_INT 2
19129: NEG
19130: PUSH
19131: EMPTY
19132: LIST
19133: LIST
19134: PUSH
19135: LD_INT 1
19137: PUSH
19138: LD_INT 1
19140: NEG
19141: PUSH
19142: EMPTY
19143: LIST
19144: LIST
19145: PUSH
19146: LD_INT 2
19148: PUSH
19149: LD_INT 0
19151: PUSH
19152: EMPTY
19153: LIST
19154: LIST
19155: PUSH
19156: LD_INT 2
19158: PUSH
19159: LD_INT 1
19161: PUSH
19162: EMPTY
19163: LIST
19164: LIST
19165: PUSH
19166: LD_INT 2
19168: PUSH
19169: LD_INT 2
19171: PUSH
19172: EMPTY
19173: LIST
19174: LIST
19175: PUSH
19176: LD_INT 1
19178: PUSH
19179: LD_INT 2
19181: PUSH
19182: EMPTY
19183: LIST
19184: LIST
19185: PUSH
19186: LD_INT 0
19188: PUSH
19189: LD_INT 2
19191: PUSH
19192: EMPTY
19193: LIST
19194: LIST
19195: PUSH
19196: LD_INT 1
19198: NEG
19199: PUSH
19200: LD_INT 1
19202: PUSH
19203: EMPTY
19204: LIST
19205: LIST
19206: PUSH
19207: LD_INT 2
19209: NEG
19210: PUSH
19211: LD_INT 0
19213: PUSH
19214: EMPTY
19215: LIST
19216: LIST
19217: PUSH
19218: LD_INT 2
19220: NEG
19221: PUSH
19222: LD_INT 1
19224: NEG
19225: PUSH
19226: EMPTY
19227: LIST
19228: LIST
19229: PUSH
19230: LD_INT 2
19232: NEG
19233: PUSH
19234: LD_INT 2
19236: NEG
19237: PUSH
19238: EMPTY
19239: LIST
19240: LIST
19241: PUSH
19242: EMPTY
19243: LIST
19244: LIST
19245: LIST
19246: LIST
19247: LIST
19248: LIST
19249: LIST
19250: LIST
19251: LIST
19252: LIST
19253: LIST
19254: LIST
19255: LIST
19256: LIST
19257: LIST
19258: LIST
19259: LIST
19260: LIST
19261: LIST
19262: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19263: LD_ADDR_VAR 0 21
19267: PUSH
19268: LD_INT 0
19270: PUSH
19271: LD_INT 0
19273: PUSH
19274: EMPTY
19275: LIST
19276: LIST
19277: PUSH
19278: LD_INT 0
19280: PUSH
19281: LD_INT 1
19283: NEG
19284: PUSH
19285: EMPTY
19286: LIST
19287: LIST
19288: PUSH
19289: LD_INT 1
19291: PUSH
19292: LD_INT 0
19294: PUSH
19295: EMPTY
19296: LIST
19297: LIST
19298: PUSH
19299: LD_INT 1
19301: PUSH
19302: LD_INT 1
19304: PUSH
19305: EMPTY
19306: LIST
19307: LIST
19308: PUSH
19309: LD_INT 0
19311: PUSH
19312: LD_INT 1
19314: PUSH
19315: EMPTY
19316: LIST
19317: LIST
19318: PUSH
19319: LD_INT 1
19321: NEG
19322: PUSH
19323: LD_INT 0
19325: PUSH
19326: EMPTY
19327: LIST
19328: LIST
19329: PUSH
19330: LD_INT 1
19332: NEG
19333: PUSH
19334: LD_INT 1
19336: NEG
19337: PUSH
19338: EMPTY
19339: LIST
19340: LIST
19341: PUSH
19342: LD_INT 1
19344: NEG
19345: PUSH
19346: LD_INT 2
19348: NEG
19349: PUSH
19350: EMPTY
19351: LIST
19352: LIST
19353: PUSH
19354: LD_INT 0
19356: PUSH
19357: LD_INT 2
19359: NEG
19360: PUSH
19361: EMPTY
19362: LIST
19363: LIST
19364: PUSH
19365: LD_INT 1
19367: PUSH
19368: LD_INT 1
19370: NEG
19371: PUSH
19372: EMPTY
19373: LIST
19374: LIST
19375: PUSH
19376: LD_INT 2
19378: PUSH
19379: LD_INT 0
19381: PUSH
19382: EMPTY
19383: LIST
19384: LIST
19385: PUSH
19386: LD_INT 2
19388: PUSH
19389: LD_INT 1
19391: PUSH
19392: EMPTY
19393: LIST
19394: LIST
19395: PUSH
19396: LD_INT 2
19398: PUSH
19399: LD_INT 2
19401: PUSH
19402: EMPTY
19403: LIST
19404: LIST
19405: PUSH
19406: LD_INT 1
19408: PUSH
19409: LD_INT 2
19411: PUSH
19412: EMPTY
19413: LIST
19414: LIST
19415: PUSH
19416: LD_INT 0
19418: PUSH
19419: LD_INT 2
19421: PUSH
19422: EMPTY
19423: LIST
19424: LIST
19425: PUSH
19426: LD_INT 1
19428: NEG
19429: PUSH
19430: LD_INT 1
19432: PUSH
19433: EMPTY
19434: LIST
19435: LIST
19436: PUSH
19437: LD_INT 2
19439: NEG
19440: PUSH
19441: LD_INT 0
19443: PUSH
19444: EMPTY
19445: LIST
19446: LIST
19447: PUSH
19448: LD_INT 2
19450: NEG
19451: PUSH
19452: LD_INT 1
19454: NEG
19455: PUSH
19456: EMPTY
19457: LIST
19458: LIST
19459: PUSH
19460: LD_INT 2
19462: NEG
19463: PUSH
19464: LD_INT 2
19466: NEG
19467: PUSH
19468: EMPTY
19469: LIST
19470: LIST
19471: PUSH
19472: EMPTY
19473: LIST
19474: LIST
19475: LIST
19476: LIST
19477: LIST
19478: LIST
19479: LIST
19480: LIST
19481: LIST
19482: LIST
19483: LIST
19484: LIST
19485: LIST
19486: LIST
19487: LIST
19488: LIST
19489: LIST
19490: LIST
19491: LIST
19492: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19493: LD_ADDR_VAR 0 22
19497: PUSH
19498: LD_INT 0
19500: PUSH
19501: LD_INT 0
19503: PUSH
19504: EMPTY
19505: LIST
19506: LIST
19507: PUSH
19508: LD_INT 0
19510: PUSH
19511: LD_INT 1
19513: NEG
19514: PUSH
19515: EMPTY
19516: LIST
19517: LIST
19518: PUSH
19519: LD_INT 1
19521: PUSH
19522: LD_INT 0
19524: PUSH
19525: EMPTY
19526: LIST
19527: LIST
19528: PUSH
19529: LD_INT 1
19531: PUSH
19532: LD_INT 1
19534: PUSH
19535: EMPTY
19536: LIST
19537: LIST
19538: PUSH
19539: LD_INT 0
19541: PUSH
19542: LD_INT 1
19544: PUSH
19545: EMPTY
19546: LIST
19547: LIST
19548: PUSH
19549: LD_INT 1
19551: NEG
19552: PUSH
19553: LD_INT 0
19555: PUSH
19556: EMPTY
19557: LIST
19558: LIST
19559: PUSH
19560: LD_INT 1
19562: NEG
19563: PUSH
19564: LD_INT 1
19566: NEG
19567: PUSH
19568: EMPTY
19569: LIST
19570: LIST
19571: PUSH
19572: LD_INT 1
19574: NEG
19575: PUSH
19576: LD_INT 2
19578: NEG
19579: PUSH
19580: EMPTY
19581: LIST
19582: LIST
19583: PUSH
19584: LD_INT 0
19586: PUSH
19587: LD_INT 2
19589: NEG
19590: PUSH
19591: EMPTY
19592: LIST
19593: LIST
19594: PUSH
19595: LD_INT 1
19597: PUSH
19598: LD_INT 1
19600: NEG
19601: PUSH
19602: EMPTY
19603: LIST
19604: LIST
19605: PUSH
19606: LD_INT 2
19608: PUSH
19609: LD_INT 0
19611: PUSH
19612: EMPTY
19613: LIST
19614: LIST
19615: PUSH
19616: LD_INT 2
19618: PUSH
19619: LD_INT 1
19621: PUSH
19622: EMPTY
19623: LIST
19624: LIST
19625: PUSH
19626: LD_INT 2
19628: PUSH
19629: LD_INT 2
19631: PUSH
19632: EMPTY
19633: LIST
19634: LIST
19635: PUSH
19636: LD_INT 1
19638: PUSH
19639: LD_INT 2
19641: PUSH
19642: EMPTY
19643: LIST
19644: LIST
19645: PUSH
19646: LD_INT 0
19648: PUSH
19649: LD_INT 2
19651: PUSH
19652: EMPTY
19653: LIST
19654: LIST
19655: PUSH
19656: LD_INT 1
19658: NEG
19659: PUSH
19660: LD_INT 1
19662: PUSH
19663: EMPTY
19664: LIST
19665: LIST
19666: PUSH
19667: LD_INT 2
19669: NEG
19670: PUSH
19671: LD_INT 0
19673: PUSH
19674: EMPTY
19675: LIST
19676: LIST
19677: PUSH
19678: LD_INT 2
19680: NEG
19681: PUSH
19682: LD_INT 1
19684: NEG
19685: PUSH
19686: EMPTY
19687: LIST
19688: LIST
19689: PUSH
19690: LD_INT 2
19692: NEG
19693: PUSH
19694: LD_INT 2
19696: NEG
19697: PUSH
19698: EMPTY
19699: LIST
19700: LIST
19701: PUSH
19702: EMPTY
19703: LIST
19704: LIST
19705: LIST
19706: LIST
19707: LIST
19708: LIST
19709: LIST
19710: LIST
19711: LIST
19712: LIST
19713: LIST
19714: LIST
19715: LIST
19716: LIST
19717: LIST
19718: LIST
19719: LIST
19720: LIST
19721: LIST
19722: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
19723: LD_ADDR_VAR 0 23
19727: PUSH
19728: LD_INT 0
19730: PUSH
19731: LD_INT 0
19733: PUSH
19734: EMPTY
19735: LIST
19736: LIST
19737: PUSH
19738: LD_INT 0
19740: PUSH
19741: LD_INT 1
19743: NEG
19744: PUSH
19745: EMPTY
19746: LIST
19747: LIST
19748: PUSH
19749: LD_INT 1
19751: PUSH
19752: LD_INT 0
19754: PUSH
19755: EMPTY
19756: LIST
19757: LIST
19758: PUSH
19759: LD_INT 1
19761: PUSH
19762: LD_INT 1
19764: PUSH
19765: EMPTY
19766: LIST
19767: LIST
19768: PUSH
19769: LD_INT 0
19771: PUSH
19772: LD_INT 1
19774: PUSH
19775: EMPTY
19776: LIST
19777: LIST
19778: PUSH
19779: LD_INT 1
19781: NEG
19782: PUSH
19783: LD_INT 0
19785: PUSH
19786: EMPTY
19787: LIST
19788: LIST
19789: PUSH
19790: LD_INT 1
19792: NEG
19793: PUSH
19794: LD_INT 1
19796: NEG
19797: PUSH
19798: EMPTY
19799: LIST
19800: LIST
19801: PUSH
19802: LD_INT 1
19804: NEG
19805: PUSH
19806: LD_INT 2
19808: NEG
19809: PUSH
19810: EMPTY
19811: LIST
19812: LIST
19813: PUSH
19814: LD_INT 0
19816: PUSH
19817: LD_INT 2
19819: NEG
19820: PUSH
19821: EMPTY
19822: LIST
19823: LIST
19824: PUSH
19825: LD_INT 1
19827: PUSH
19828: LD_INT 1
19830: NEG
19831: PUSH
19832: EMPTY
19833: LIST
19834: LIST
19835: PUSH
19836: LD_INT 2
19838: PUSH
19839: LD_INT 0
19841: PUSH
19842: EMPTY
19843: LIST
19844: LIST
19845: PUSH
19846: LD_INT 2
19848: PUSH
19849: LD_INT 1
19851: PUSH
19852: EMPTY
19853: LIST
19854: LIST
19855: PUSH
19856: LD_INT 2
19858: PUSH
19859: LD_INT 2
19861: PUSH
19862: EMPTY
19863: LIST
19864: LIST
19865: PUSH
19866: LD_INT 1
19868: PUSH
19869: LD_INT 2
19871: PUSH
19872: EMPTY
19873: LIST
19874: LIST
19875: PUSH
19876: LD_INT 0
19878: PUSH
19879: LD_INT 2
19881: PUSH
19882: EMPTY
19883: LIST
19884: LIST
19885: PUSH
19886: LD_INT 1
19888: NEG
19889: PUSH
19890: LD_INT 1
19892: PUSH
19893: EMPTY
19894: LIST
19895: LIST
19896: PUSH
19897: LD_INT 2
19899: NEG
19900: PUSH
19901: LD_INT 0
19903: PUSH
19904: EMPTY
19905: LIST
19906: LIST
19907: PUSH
19908: LD_INT 2
19910: NEG
19911: PUSH
19912: LD_INT 1
19914: NEG
19915: PUSH
19916: EMPTY
19917: LIST
19918: LIST
19919: PUSH
19920: LD_INT 2
19922: NEG
19923: PUSH
19924: LD_INT 2
19926: NEG
19927: PUSH
19928: EMPTY
19929: LIST
19930: LIST
19931: PUSH
19932: LD_INT 2
19934: NEG
19935: PUSH
19936: LD_INT 3
19938: NEG
19939: PUSH
19940: EMPTY
19941: LIST
19942: LIST
19943: PUSH
19944: LD_INT 1
19946: NEG
19947: PUSH
19948: LD_INT 3
19950: NEG
19951: PUSH
19952: EMPTY
19953: LIST
19954: LIST
19955: PUSH
19956: LD_INT 1
19958: PUSH
19959: LD_INT 2
19961: NEG
19962: PUSH
19963: EMPTY
19964: LIST
19965: LIST
19966: PUSH
19967: LD_INT 2
19969: PUSH
19970: LD_INT 1
19972: NEG
19973: PUSH
19974: EMPTY
19975: LIST
19976: LIST
19977: PUSH
19978: EMPTY
19979: LIST
19980: LIST
19981: LIST
19982: LIST
19983: LIST
19984: LIST
19985: LIST
19986: LIST
19987: LIST
19988: LIST
19989: LIST
19990: LIST
19991: LIST
19992: LIST
19993: LIST
19994: LIST
19995: LIST
19996: LIST
19997: LIST
19998: LIST
19999: LIST
20000: LIST
20001: LIST
20002: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
20003: LD_ADDR_VAR 0 24
20007: PUSH
20008: LD_INT 0
20010: PUSH
20011: LD_INT 0
20013: PUSH
20014: EMPTY
20015: LIST
20016: LIST
20017: PUSH
20018: LD_INT 0
20020: PUSH
20021: LD_INT 1
20023: NEG
20024: PUSH
20025: EMPTY
20026: LIST
20027: LIST
20028: PUSH
20029: LD_INT 1
20031: PUSH
20032: LD_INT 0
20034: PUSH
20035: EMPTY
20036: LIST
20037: LIST
20038: PUSH
20039: LD_INT 1
20041: PUSH
20042: LD_INT 1
20044: PUSH
20045: EMPTY
20046: LIST
20047: LIST
20048: PUSH
20049: LD_INT 0
20051: PUSH
20052: LD_INT 1
20054: PUSH
20055: EMPTY
20056: LIST
20057: LIST
20058: PUSH
20059: LD_INT 1
20061: NEG
20062: PUSH
20063: LD_INT 0
20065: PUSH
20066: EMPTY
20067: LIST
20068: LIST
20069: PUSH
20070: LD_INT 1
20072: NEG
20073: PUSH
20074: LD_INT 1
20076: NEG
20077: PUSH
20078: EMPTY
20079: LIST
20080: LIST
20081: PUSH
20082: LD_INT 1
20084: NEG
20085: PUSH
20086: LD_INT 2
20088: NEG
20089: PUSH
20090: EMPTY
20091: LIST
20092: LIST
20093: PUSH
20094: LD_INT 0
20096: PUSH
20097: LD_INT 2
20099: NEG
20100: PUSH
20101: EMPTY
20102: LIST
20103: LIST
20104: PUSH
20105: LD_INT 1
20107: PUSH
20108: LD_INT 1
20110: NEG
20111: PUSH
20112: EMPTY
20113: LIST
20114: LIST
20115: PUSH
20116: LD_INT 2
20118: PUSH
20119: LD_INT 0
20121: PUSH
20122: EMPTY
20123: LIST
20124: LIST
20125: PUSH
20126: LD_INT 2
20128: PUSH
20129: LD_INT 1
20131: PUSH
20132: EMPTY
20133: LIST
20134: LIST
20135: PUSH
20136: LD_INT 2
20138: PUSH
20139: LD_INT 2
20141: PUSH
20142: EMPTY
20143: LIST
20144: LIST
20145: PUSH
20146: LD_INT 1
20148: PUSH
20149: LD_INT 2
20151: PUSH
20152: EMPTY
20153: LIST
20154: LIST
20155: PUSH
20156: LD_INT 0
20158: PUSH
20159: LD_INT 2
20161: PUSH
20162: EMPTY
20163: LIST
20164: LIST
20165: PUSH
20166: LD_INT 1
20168: NEG
20169: PUSH
20170: LD_INT 1
20172: PUSH
20173: EMPTY
20174: LIST
20175: LIST
20176: PUSH
20177: LD_INT 2
20179: NEG
20180: PUSH
20181: LD_INT 0
20183: PUSH
20184: EMPTY
20185: LIST
20186: LIST
20187: PUSH
20188: LD_INT 2
20190: NEG
20191: PUSH
20192: LD_INT 1
20194: NEG
20195: PUSH
20196: EMPTY
20197: LIST
20198: LIST
20199: PUSH
20200: LD_INT 2
20202: NEG
20203: PUSH
20204: LD_INT 2
20206: NEG
20207: PUSH
20208: EMPTY
20209: LIST
20210: LIST
20211: PUSH
20212: LD_INT 1
20214: PUSH
20215: LD_INT 2
20217: NEG
20218: PUSH
20219: EMPTY
20220: LIST
20221: LIST
20222: PUSH
20223: LD_INT 2
20225: PUSH
20226: LD_INT 1
20228: NEG
20229: PUSH
20230: EMPTY
20231: LIST
20232: LIST
20233: PUSH
20234: LD_INT 3
20236: PUSH
20237: LD_INT 1
20239: PUSH
20240: EMPTY
20241: LIST
20242: LIST
20243: PUSH
20244: LD_INT 3
20246: PUSH
20247: LD_INT 2
20249: PUSH
20250: EMPTY
20251: LIST
20252: LIST
20253: PUSH
20254: EMPTY
20255: LIST
20256: LIST
20257: LIST
20258: LIST
20259: LIST
20260: LIST
20261: LIST
20262: LIST
20263: LIST
20264: LIST
20265: LIST
20266: LIST
20267: LIST
20268: LIST
20269: LIST
20270: LIST
20271: LIST
20272: LIST
20273: LIST
20274: LIST
20275: LIST
20276: LIST
20277: LIST
20278: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
20279: LD_ADDR_VAR 0 25
20283: PUSH
20284: LD_INT 0
20286: PUSH
20287: LD_INT 0
20289: PUSH
20290: EMPTY
20291: LIST
20292: LIST
20293: PUSH
20294: LD_INT 0
20296: PUSH
20297: LD_INT 1
20299: NEG
20300: PUSH
20301: EMPTY
20302: LIST
20303: LIST
20304: PUSH
20305: LD_INT 1
20307: PUSH
20308: LD_INT 0
20310: PUSH
20311: EMPTY
20312: LIST
20313: LIST
20314: PUSH
20315: LD_INT 1
20317: PUSH
20318: LD_INT 1
20320: PUSH
20321: EMPTY
20322: LIST
20323: LIST
20324: PUSH
20325: LD_INT 0
20327: PUSH
20328: LD_INT 1
20330: PUSH
20331: EMPTY
20332: LIST
20333: LIST
20334: PUSH
20335: LD_INT 1
20337: NEG
20338: PUSH
20339: LD_INT 0
20341: PUSH
20342: EMPTY
20343: LIST
20344: LIST
20345: PUSH
20346: LD_INT 1
20348: NEG
20349: PUSH
20350: LD_INT 1
20352: NEG
20353: PUSH
20354: EMPTY
20355: LIST
20356: LIST
20357: PUSH
20358: LD_INT 1
20360: NEG
20361: PUSH
20362: LD_INT 2
20364: NEG
20365: PUSH
20366: EMPTY
20367: LIST
20368: LIST
20369: PUSH
20370: LD_INT 0
20372: PUSH
20373: LD_INT 2
20375: NEG
20376: PUSH
20377: EMPTY
20378: LIST
20379: LIST
20380: PUSH
20381: LD_INT 1
20383: PUSH
20384: LD_INT 1
20386: NEG
20387: PUSH
20388: EMPTY
20389: LIST
20390: LIST
20391: PUSH
20392: LD_INT 2
20394: PUSH
20395: LD_INT 0
20397: PUSH
20398: EMPTY
20399: LIST
20400: LIST
20401: PUSH
20402: LD_INT 2
20404: PUSH
20405: LD_INT 1
20407: PUSH
20408: EMPTY
20409: LIST
20410: LIST
20411: PUSH
20412: LD_INT 2
20414: PUSH
20415: LD_INT 2
20417: PUSH
20418: EMPTY
20419: LIST
20420: LIST
20421: PUSH
20422: LD_INT 1
20424: PUSH
20425: LD_INT 2
20427: PUSH
20428: EMPTY
20429: LIST
20430: LIST
20431: PUSH
20432: LD_INT 0
20434: PUSH
20435: LD_INT 2
20437: PUSH
20438: EMPTY
20439: LIST
20440: LIST
20441: PUSH
20442: LD_INT 1
20444: NEG
20445: PUSH
20446: LD_INT 1
20448: PUSH
20449: EMPTY
20450: LIST
20451: LIST
20452: PUSH
20453: LD_INT 2
20455: NEG
20456: PUSH
20457: LD_INT 0
20459: PUSH
20460: EMPTY
20461: LIST
20462: LIST
20463: PUSH
20464: LD_INT 2
20466: NEG
20467: PUSH
20468: LD_INT 1
20470: NEG
20471: PUSH
20472: EMPTY
20473: LIST
20474: LIST
20475: PUSH
20476: LD_INT 2
20478: NEG
20479: PUSH
20480: LD_INT 2
20482: NEG
20483: PUSH
20484: EMPTY
20485: LIST
20486: LIST
20487: PUSH
20488: LD_INT 3
20490: PUSH
20491: LD_INT 1
20493: PUSH
20494: EMPTY
20495: LIST
20496: LIST
20497: PUSH
20498: LD_INT 3
20500: PUSH
20501: LD_INT 2
20503: PUSH
20504: EMPTY
20505: LIST
20506: LIST
20507: PUSH
20508: LD_INT 2
20510: PUSH
20511: LD_INT 3
20513: PUSH
20514: EMPTY
20515: LIST
20516: LIST
20517: PUSH
20518: LD_INT 1
20520: PUSH
20521: LD_INT 3
20523: PUSH
20524: EMPTY
20525: LIST
20526: LIST
20527: PUSH
20528: EMPTY
20529: LIST
20530: LIST
20531: LIST
20532: LIST
20533: LIST
20534: LIST
20535: LIST
20536: LIST
20537: LIST
20538: LIST
20539: LIST
20540: LIST
20541: LIST
20542: LIST
20543: LIST
20544: LIST
20545: LIST
20546: LIST
20547: LIST
20548: LIST
20549: LIST
20550: LIST
20551: LIST
20552: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
20553: LD_ADDR_VAR 0 26
20557: PUSH
20558: LD_INT 0
20560: PUSH
20561: LD_INT 0
20563: PUSH
20564: EMPTY
20565: LIST
20566: LIST
20567: PUSH
20568: LD_INT 0
20570: PUSH
20571: LD_INT 1
20573: NEG
20574: PUSH
20575: EMPTY
20576: LIST
20577: LIST
20578: PUSH
20579: LD_INT 1
20581: PUSH
20582: LD_INT 0
20584: PUSH
20585: EMPTY
20586: LIST
20587: LIST
20588: PUSH
20589: LD_INT 1
20591: PUSH
20592: LD_INT 1
20594: PUSH
20595: EMPTY
20596: LIST
20597: LIST
20598: PUSH
20599: LD_INT 0
20601: PUSH
20602: LD_INT 1
20604: PUSH
20605: EMPTY
20606: LIST
20607: LIST
20608: PUSH
20609: LD_INT 1
20611: NEG
20612: PUSH
20613: LD_INT 0
20615: PUSH
20616: EMPTY
20617: LIST
20618: LIST
20619: PUSH
20620: LD_INT 1
20622: NEG
20623: PUSH
20624: LD_INT 1
20626: NEG
20627: PUSH
20628: EMPTY
20629: LIST
20630: LIST
20631: PUSH
20632: LD_INT 1
20634: NEG
20635: PUSH
20636: LD_INT 2
20638: NEG
20639: PUSH
20640: EMPTY
20641: LIST
20642: LIST
20643: PUSH
20644: LD_INT 0
20646: PUSH
20647: LD_INT 2
20649: NEG
20650: PUSH
20651: EMPTY
20652: LIST
20653: LIST
20654: PUSH
20655: LD_INT 1
20657: PUSH
20658: LD_INT 1
20660: NEG
20661: PUSH
20662: EMPTY
20663: LIST
20664: LIST
20665: PUSH
20666: LD_INT 2
20668: PUSH
20669: LD_INT 0
20671: PUSH
20672: EMPTY
20673: LIST
20674: LIST
20675: PUSH
20676: LD_INT 2
20678: PUSH
20679: LD_INT 1
20681: PUSH
20682: EMPTY
20683: LIST
20684: LIST
20685: PUSH
20686: LD_INT 2
20688: PUSH
20689: LD_INT 2
20691: PUSH
20692: EMPTY
20693: LIST
20694: LIST
20695: PUSH
20696: LD_INT 1
20698: PUSH
20699: LD_INT 2
20701: PUSH
20702: EMPTY
20703: LIST
20704: LIST
20705: PUSH
20706: LD_INT 0
20708: PUSH
20709: LD_INT 2
20711: PUSH
20712: EMPTY
20713: LIST
20714: LIST
20715: PUSH
20716: LD_INT 1
20718: NEG
20719: PUSH
20720: LD_INT 1
20722: PUSH
20723: EMPTY
20724: LIST
20725: LIST
20726: PUSH
20727: LD_INT 2
20729: NEG
20730: PUSH
20731: LD_INT 0
20733: PUSH
20734: EMPTY
20735: LIST
20736: LIST
20737: PUSH
20738: LD_INT 2
20740: NEG
20741: PUSH
20742: LD_INT 1
20744: NEG
20745: PUSH
20746: EMPTY
20747: LIST
20748: LIST
20749: PUSH
20750: LD_INT 2
20752: NEG
20753: PUSH
20754: LD_INT 2
20756: NEG
20757: PUSH
20758: EMPTY
20759: LIST
20760: LIST
20761: PUSH
20762: LD_INT 2
20764: PUSH
20765: LD_INT 3
20767: PUSH
20768: EMPTY
20769: LIST
20770: LIST
20771: PUSH
20772: LD_INT 1
20774: PUSH
20775: LD_INT 3
20777: PUSH
20778: EMPTY
20779: LIST
20780: LIST
20781: PUSH
20782: LD_INT 1
20784: NEG
20785: PUSH
20786: LD_INT 2
20788: PUSH
20789: EMPTY
20790: LIST
20791: LIST
20792: PUSH
20793: LD_INT 2
20795: NEG
20796: PUSH
20797: LD_INT 1
20799: PUSH
20800: EMPTY
20801: LIST
20802: LIST
20803: PUSH
20804: EMPTY
20805: LIST
20806: LIST
20807: LIST
20808: LIST
20809: LIST
20810: LIST
20811: LIST
20812: LIST
20813: LIST
20814: LIST
20815: LIST
20816: LIST
20817: LIST
20818: LIST
20819: LIST
20820: LIST
20821: LIST
20822: LIST
20823: LIST
20824: LIST
20825: LIST
20826: LIST
20827: LIST
20828: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
20829: LD_ADDR_VAR 0 27
20833: PUSH
20834: LD_INT 0
20836: PUSH
20837: LD_INT 0
20839: PUSH
20840: EMPTY
20841: LIST
20842: LIST
20843: PUSH
20844: LD_INT 0
20846: PUSH
20847: LD_INT 1
20849: NEG
20850: PUSH
20851: EMPTY
20852: LIST
20853: LIST
20854: PUSH
20855: LD_INT 1
20857: PUSH
20858: LD_INT 0
20860: PUSH
20861: EMPTY
20862: LIST
20863: LIST
20864: PUSH
20865: LD_INT 1
20867: PUSH
20868: LD_INT 1
20870: PUSH
20871: EMPTY
20872: LIST
20873: LIST
20874: PUSH
20875: LD_INT 0
20877: PUSH
20878: LD_INT 1
20880: PUSH
20881: EMPTY
20882: LIST
20883: LIST
20884: PUSH
20885: LD_INT 1
20887: NEG
20888: PUSH
20889: LD_INT 0
20891: PUSH
20892: EMPTY
20893: LIST
20894: LIST
20895: PUSH
20896: LD_INT 1
20898: NEG
20899: PUSH
20900: LD_INT 1
20902: NEG
20903: PUSH
20904: EMPTY
20905: LIST
20906: LIST
20907: PUSH
20908: LD_INT 1
20910: NEG
20911: PUSH
20912: LD_INT 2
20914: NEG
20915: PUSH
20916: EMPTY
20917: LIST
20918: LIST
20919: PUSH
20920: LD_INT 0
20922: PUSH
20923: LD_INT 2
20925: NEG
20926: PUSH
20927: EMPTY
20928: LIST
20929: LIST
20930: PUSH
20931: LD_INT 1
20933: PUSH
20934: LD_INT 1
20936: NEG
20937: PUSH
20938: EMPTY
20939: LIST
20940: LIST
20941: PUSH
20942: LD_INT 2
20944: PUSH
20945: LD_INT 0
20947: PUSH
20948: EMPTY
20949: LIST
20950: LIST
20951: PUSH
20952: LD_INT 2
20954: PUSH
20955: LD_INT 1
20957: PUSH
20958: EMPTY
20959: LIST
20960: LIST
20961: PUSH
20962: LD_INT 2
20964: PUSH
20965: LD_INT 2
20967: PUSH
20968: EMPTY
20969: LIST
20970: LIST
20971: PUSH
20972: LD_INT 1
20974: PUSH
20975: LD_INT 2
20977: PUSH
20978: EMPTY
20979: LIST
20980: LIST
20981: PUSH
20982: LD_INT 0
20984: PUSH
20985: LD_INT 2
20987: PUSH
20988: EMPTY
20989: LIST
20990: LIST
20991: PUSH
20992: LD_INT 1
20994: NEG
20995: PUSH
20996: LD_INT 1
20998: PUSH
20999: EMPTY
21000: LIST
21001: LIST
21002: PUSH
21003: LD_INT 2
21005: NEG
21006: PUSH
21007: LD_INT 0
21009: PUSH
21010: EMPTY
21011: LIST
21012: LIST
21013: PUSH
21014: LD_INT 2
21016: NEG
21017: PUSH
21018: LD_INT 1
21020: NEG
21021: PUSH
21022: EMPTY
21023: LIST
21024: LIST
21025: PUSH
21026: LD_INT 2
21028: NEG
21029: PUSH
21030: LD_INT 2
21032: NEG
21033: PUSH
21034: EMPTY
21035: LIST
21036: LIST
21037: PUSH
21038: LD_INT 1
21040: NEG
21041: PUSH
21042: LD_INT 2
21044: PUSH
21045: EMPTY
21046: LIST
21047: LIST
21048: PUSH
21049: LD_INT 2
21051: NEG
21052: PUSH
21053: LD_INT 1
21055: PUSH
21056: EMPTY
21057: LIST
21058: LIST
21059: PUSH
21060: LD_INT 3
21062: NEG
21063: PUSH
21064: LD_INT 1
21066: NEG
21067: PUSH
21068: EMPTY
21069: LIST
21070: LIST
21071: PUSH
21072: LD_INT 3
21074: NEG
21075: PUSH
21076: LD_INT 2
21078: NEG
21079: PUSH
21080: EMPTY
21081: LIST
21082: LIST
21083: PUSH
21084: EMPTY
21085: LIST
21086: LIST
21087: LIST
21088: LIST
21089: LIST
21090: LIST
21091: LIST
21092: LIST
21093: LIST
21094: LIST
21095: LIST
21096: LIST
21097: LIST
21098: LIST
21099: LIST
21100: LIST
21101: LIST
21102: LIST
21103: LIST
21104: LIST
21105: LIST
21106: LIST
21107: LIST
21108: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21109: LD_ADDR_VAR 0 28
21113: PUSH
21114: LD_INT 0
21116: PUSH
21117: LD_INT 0
21119: PUSH
21120: EMPTY
21121: LIST
21122: LIST
21123: PUSH
21124: LD_INT 0
21126: PUSH
21127: LD_INT 1
21129: NEG
21130: PUSH
21131: EMPTY
21132: LIST
21133: LIST
21134: PUSH
21135: LD_INT 1
21137: PUSH
21138: LD_INT 0
21140: PUSH
21141: EMPTY
21142: LIST
21143: LIST
21144: PUSH
21145: LD_INT 1
21147: PUSH
21148: LD_INT 1
21150: PUSH
21151: EMPTY
21152: LIST
21153: LIST
21154: PUSH
21155: LD_INT 0
21157: PUSH
21158: LD_INT 1
21160: PUSH
21161: EMPTY
21162: LIST
21163: LIST
21164: PUSH
21165: LD_INT 1
21167: NEG
21168: PUSH
21169: LD_INT 0
21171: PUSH
21172: EMPTY
21173: LIST
21174: LIST
21175: PUSH
21176: LD_INT 1
21178: NEG
21179: PUSH
21180: LD_INT 1
21182: NEG
21183: PUSH
21184: EMPTY
21185: LIST
21186: LIST
21187: PUSH
21188: LD_INT 1
21190: NEG
21191: PUSH
21192: LD_INT 2
21194: NEG
21195: PUSH
21196: EMPTY
21197: LIST
21198: LIST
21199: PUSH
21200: LD_INT 0
21202: PUSH
21203: LD_INT 2
21205: NEG
21206: PUSH
21207: EMPTY
21208: LIST
21209: LIST
21210: PUSH
21211: LD_INT 1
21213: PUSH
21214: LD_INT 1
21216: NEG
21217: PUSH
21218: EMPTY
21219: LIST
21220: LIST
21221: PUSH
21222: LD_INT 2
21224: PUSH
21225: LD_INT 0
21227: PUSH
21228: EMPTY
21229: LIST
21230: LIST
21231: PUSH
21232: LD_INT 2
21234: PUSH
21235: LD_INT 1
21237: PUSH
21238: EMPTY
21239: LIST
21240: LIST
21241: PUSH
21242: LD_INT 2
21244: PUSH
21245: LD_INT 2
21247: PUSH
21248: EMPTY
21249: LIST
21250: LIST
21251: PUSH
21252: LD_INT 1
21254: PUSH
21255: LD_INT 2
21257: PUSH
21258: EMPTY
21259: LIST
21260: LIST
21261: PUSH
21262: LD_INT 0
21264: PUSH
21265: LD_INT 2
21267: PUSH
21268: EMPTY
21269: LIST
21270: LIST
21271: PUSH
21272: LD_INT 1
21274: NEG
21275: PUSH
21276: LD_INT 1
21278: PUSH
21279: EMPTY
21280: LIST
21281: LIST
21282: PUSH
21283: LD_INT 2
21285: NEG
21286: PUSH
21287: LD_INT 0
21289: PUSH
21290: EMPTY
21291: LIST
21292: LIST
21293: PUSH
21294: LD_INT 2
21296: NEG
21297: PUSH
21298: LD_INT 1
21300: NEG
21301: PUSH
21302: EMPTY
21303: LIST
21304: LIST
21305: PUSH
21306: LD_INT 2
21308: NEG
21309: PUSH
21310: LD_INT 2
21312: NEG
21313: PUSH
21314: EMPTY
21315: LIST
21316: LIST
21317: PUSH
21318: LD_INT 2
21320: NEG
21321: PUSH
21322: LD_INT 3
21324: NEG
21325: PUSH
21326: EMPTY
21327: LIST
21328: LIST
21329: PUSH
21330: LD_INT 1
21332: NEG
21333: PUSH
21334: LD_INT 3
21336: NEG
21337: PUSH
21338: EMPTY
21339: LIST
21340: LIST
21341: PUSH
21342: LD_INT 3
21344: NEG
21345: PUSH
21346: LD_INT 1
21348: NEG
21349: PUSH
21350: EMPTY
21351: LIST
21352: LIST
21353: PUSH
21354: LD_INT 3
21356: NEG
21357: PUSH
21358: LD_INT 2
21360: NEG
21361: PUSH
21362: EMPTY
21363: LIST
21364: LIST
21365: PUSH
21366: EMPTY
21367: LIST
21368: LIST
21369: LIST
21370: LIST
21371: LIST
21372: LIST
21373: LIST
21374: LIST
21375: LIST
21376: LIST
21377: LIST
21378: LIST
21379: LIST
21380: LIST
21381: LIST
21382: LIST
21383: LIST
21384: LIST
21385: LIST
21386: LIST
21387: LIST
21388: LIST
21389: LIST
21390: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21391: LD_ADDR_VAR 0 29
21395: PUSH
21396: LD_INT 0
21398: PUSH
21399: LD_INT 0
21401: PUSH
21402: EMPTY
21403: LIST
21404: LIST
21405: PUSH
21406: LD_INT 0
21408: PUSH
21409: LD_INT 1
21411: NEG
21412: PUSH
21413: EMPTY
21414: LIST
21415: LIST
21416: PUSH
21417: LD_INT 1
21419: PUSH
21420: LD_INT 0
21422: PUSH
21423: EMPTY
21424: LIST
21425: LIST
21426: PUSH
21427: LD_INT 1
21429: PUSH
21430: LD_INT 1
21432: PUSH
21433: EMPTY
21434: LIST
21435: LIST
21436: PUSH
21437: LD_INT 0
21439: PUSH
21440: LD_INT 1
21442: PUSH
21443: EMPTY
21444: LIST
21445: LIST
21446: PUSH
21447: LD_INT 1
21449: NEG
21450: PUSH
21451: LD_INT 0
21453: PUSH
21454: EMPTY
21455: LIST
21456: LIST
21457: PUSH
21458: LD_INT 1
21460: NEG
21461: PUSH
21462: LD_INT 1
21464: NEG
21465: PUSH
21466: EMPTY
21467: LIST
21468: LIST
21469: PUSH
21470: LD_INT 1
21472: NEG
21473: PUSH
21474: LD_INT 2
21476: NEG
21477: PUSH
21478: EMPTY
21479: LIST
21480: LIST
21481: PUSH
21482: LD_INT 0
21484: PUSH
21485: LD_INT 2
21487: NEG
21488: PUSH
21489: EMPTY
21490: LIST
21491: LIST
21492: PUSH
21493: LD_INT 1
21495: PUSH
21496: LD_INT 1
21498: NEG
21499: PUSH
21500: EMPTY
21501: LIST
21502: LIST
21503: PUSH
21504: LD_INT 2
21506: PUSH
21507: LD_INT 0
21509: PUSH
21510: EMPTY
21511: LIST
21512: LIST
21513: PUSH
21514: LD_INT 2
21516: PUSH
21517: LD_INT 1
21519: PUSH
21520: EMPTY
21521: LIST
21522: LIST
21523: PUSH
21524: LD_INT 1
21526: PUSH
21527: LD_INT 2
21529: PUSH
21530: EMPTY
21531: LIST
21532: LIST
21533: PUSH
21534: LD_INT 0
21536: PUSH
21537: LD_INT 2
21539: PUSH
21540: EMPTY
21541: LIST
21542: LIST
21543: PUSH
21544: LD_INT 1
21546: NEG
21547: PUSH
21548: LD_INT 1
21550: PUSH
21551: EMPTY
21552: LIST
21553: LIST
21554: PUSH
21555: LD_INT 2
21557: NEG
21558: PUSH
21559: LD_INT 1
21561: NEG
21562: PUSH
21563: EMPTY
21564: LIST
21565: LIST
21566: PUSH
21567: LD_INT 2
21569: NEG
21570: PUSH
21571: LD_INT 2
21573: NEG
21574: PUSH
21575: EMPTY
21576: LIST
21577: LIST
21578: PUSH
21579: LD_INT 2
21581: NEG
21582: PUSH
21583: LD_INT 3
21585: NEG
21586: PUSH
21587: EMPTY
21588: LIST
21589: LIST
21590: PUSH
21591: LD_INT 2
21593: PUSH
21594: LD_INT 1
21596: NEG
21597: PUSH
21598: EMPTY
21599: LIST
21600: LIST
21601: PUSH
21602: LD_INT 3
21604: PUSH
21605: LD_INT 1
21607: PUSH
21608: EMPTY
21609: LIST
21610: LIST
21611: PUSH
21612: LD_INT 1
21614: PUSH
21615: LD_INT 3
21617: PUSH
21618: EMPTY
21619: LIST
21620: LIST
21621: PUSH
21622: LD_INT 1
21624: NEG
21625: PUSH
21626: LD_INT 2
21628: PUSH
21629: EMPTY
21630: LIST
21631: LIST
21632: PUSH
21633: LD_INT 3
21635: NEG
21636: PUSH
21637: LD_INT 2
21639: NEG
21640: PUSH
21641: EMPTY
21642: LIST
21643: LIST
21644: PUSH
21645: EMPTY
21646: LIST
21647: LIST
21648: LIST
21649: LIST
21650: LIST
21651: LIST
21652: LIST
21653: LIST
21654: LIST
21655: LIST
21656: LIST
21657: LIST
21658: LIST
21659: LIST
21660: LIST
21661: LIST
21662: LIST
21663: LIST
21664: LIST
21665: LIST
21666: LIST
21667: LIST
21668: LIST
21669: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21670: LD_ADDR_VAR 0 30
21674: PUSH
21675: LD_INT 0
21677: PUSH
21678: LD_INT 0
21680: PUSH
21681: EMPTY
21682: LIST
21683: LIST
21684: PUSH
21685: LD_INT 0
21687: PUSH
21688: LD_INT 1
21690: NEG
21691: PUSH
21692: EMPTY
21693: LIST
21694: LIST
21695: PUSH
21696: LD_INT 1
21698: PUSH
21699: LD_INT 0
21701: PUSH
21702: EMPTY
21703: LIST
21704: LIST
21705: PUSH
21706: LD_INT 1
21708: PUSH
21709: LD_INT 1
21711: PUSH
21712: EMPTY
21713: LIST
21714: LIST
21715: PUSH
21716: LD_INT 0
21718: PUSH
21719: LD_INT 1
21721: PUSH
21722: EMPTY
21723: LIST
21724: LIST
21725: PUSH
21726: LD_INT 1
21728: NEG
21729: PUSH
21730: LD_INT 0
21732: PUSH
21733: EMPTY
21734: LIST
21735: LIST
21736: PUSH
21737: LD_INT 1
21739: NEG
21740: PUSH
21741: LD_INT 1
21743: NEG
21744: PUSH
21745: EMPTY
21746: LIST
21747: LIST
21748: PUSH
21749: LD_INT 1
21751: NEG
21752: PUSH
21753: LD_INT 2
21755: NEG
21756: PUSH
21757: EMPTY
21758: LIST
21759: LIST
21760: PUSH
21761: LD_INT 0
21763: PUSH
21764: LD_INT 2
21766: NEG
21767: PUSH
21768: EMPTY
21769: LIST
21770: LIST
21771: PUSH
21772: LD_INT 1
21774: PUSH
21775: LD_INT 1
21777: NEG
21778: PUSH
21779: EMPTY
21780: LIST
21781: LIST
21782: PUSH
21783: LD_INT 2
21785: PUSH
21786: LD_INT 0
21788: PUSH
21789: EMPTY
21790: LIST
21791: LIST
21792: PUSH
21793: LD_INT 2
21795: PUSH
21796: LD_INT 1
21798: PUSH
21799: EMPTY
21800: LIST
21801: LIST
21802: PUSH
21803: LD_INT 2
21805: PUSH
21806: LD_INT 2
21808: PUSH
21809: EMPTY
21810: LIST
21811: LIST
21812: PUSH
21813: LD_INT 1
21815: PUSH
21816: LD_INT 2
21818: PUSH
21819: EMPTY
21820: LIST
21821: LIST
21822: PUSH
21823: LD_INT 1
21825: NEG
21826: PUSH
21827: LD_INT 1
21829: PUSH
21830: EMPTY
21831: LIST
21832: LIST
21833: PUSH
21834: LD_INT 2
21836: NEG
21837: PUSH
21838: LD_INT 0
21840: PUSH
21841: EMPTY
21842: LIST
21843: LIST
21844: PUSH
21845: LD_INT 2
21847: NEG
21848: PUSH
21849: LD_INT 1
21851: NEG
21852: PUSH
21853: EMPTY
21854: LIST
21855: LIST
21856: PUSH
21857: LD_INT 1
21859: NEG
21860: PUSH
21861: LD_INT 3
21863: NEG
21864: PUSH
21865: EMPTY
21866: LIST
21867: LIST
21868: PUSH
21869: LD_INT 1
21871: PUSH
21872: LD_INT 2
21874: NEG
21875: PUSH
21876: EMPTY
21877: LIST
21878: LIST
21879: PUSH
21880: LD_INT 3
21882: PUSH
21883: LD_INT 2
21885: PUSH
21886: EMPTY
21887: LIST
21888: LIST
21889: PUSH
21890: LD_INT 2
21892: PUSH
21893: LD_INT 3
21895: PUSH
21896: EMPTY
21897: LIST
21898: LIST
21899: PUSH
21900: LD_INT 2
21902: NEG
21903: PUSH
21904: LD_INT 1
21906: PUSH
21907: EMPTY
21908: LIST
21909: LIST
21910: PUSH
21911: LD_INT 3
21913: NEG
21914: PUSH
21915: LD_INT 1
21917: NEG
21918: PUSH
21919: EMPTY
21920: LIST
21921: LIST
21922: PUSH
21923: EMPTY
21924: LIST
21925: LIST
21926: LIST
21927: LIST
21928: LIST
21929: LIST
21930: LIST
21931: LIST
21932: LIST
21933: LIST
21934: LIST
21935: LIST
21936: LIST
21937: LIST
21938: LIST
21939: LIST
21940: LIST
21941: LIST
21942: LIST
21943: LIST
21944: LIST
21945: LIST
21946: LIST
21947: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21948: LD_ADDR_VAR 0 31
21952: PUSH
21953: LD_INT 0
21955: PUSH
21956: LD_INT 0
21958: PUSH
21959: EMPTY
21960: LIST
21961: LIST
21962: PUSH
21963: LD_INT 0
21965: PUSH
21966: LD_INT 1
21968: NEG
21969: PUSH
21970: EMPTY
21971: LIST
21972: LIST
21973: PUSH
21974: LD_INT 1
21976: PUSH
21977: LD_INT 0
21979: PUSH
21980: EMPTY
21981: LIST
21982: LIST
21983: PUSH
21984: LD_INT 1
21986: PUSH
21987: LD_INT 1
21989: PUSH
21990: EMPTY
21991: LIST
21992: LIST
21993: PUSH
21994: LD_INT 0
21996: PUSH
21997: LD_INT 1
21999: PUSH
22000: EMPTY
22001: LIST
22002: LIST
22003: PUSH
22004: LD_INT 1
22006: NEG
22007: PUSH
22008: LD_INT 0
22010: PUSH
22011: EMPTY
22012: LIST
22013: LIST
22014: PUSH
22015: LD_INT 1
22017: NEG
22018: PUSH
22019: LD_INT 1
22021: NEG
22022: PUSH
22023: EMPTY
22024: LIST
22025: LIST
22026: PUSH
22027: LD_INT 1
22029: NEG
22030: PUSH
22031: LD_INT 2
22033: NEG
22034: PUSH
22035: EMPTY
22036: LIST
22037: LIST
22038: PUSH
22039: LD_INT 1
22041: PUSH
22042: LD_INT 1
22044: NEG
22045: PUSH
22046: EMPTY
22047: LIST
22048: LIST
22049: PUSH
22050: LD_INT 2
22052: PUSH
22053: LD_INT 0
22055: PUSH
22056: EMPTY
22057: LIST
22058: LIST
22059: PUSH
22060: LD_INT 2
22062: PUSH
22063: LD_INT 1
22065: PUSH
22066: EMPTY
22067: LIST
22068: LIST
22069: PUSH
22070: LD_INT 2
22072: PUSH
22073: LD_INT 2
22075: PUSH
22076: EMPTY
22077: LIST
22078: LIST
22079: PUSH
22080: LD_INT 1
22082: PUSH
22083: LD_INT 2
22085: PUSH
22086: EMPTY
22087: LIST
22088: LIST
22089: PUSH
22090: LD_INT 0
22092: PUSH
22093: LD_INT 2
22095: PUSH
22096: EMPTY
22097: LIST
22098: LIST
22099: PUSH
22100: LD_INT 1
22102: NEG
22103: PUSH
22104: LD_INT 1
22106: PUSH
22107: EMPTY
22108: LIST
22109: LIST
22110: PUSH
22111: LD_INT 2
22113: NEG
22114: PUSH
22115: LD_INT 1
22117: NEG
22118: PUSH
22119: EMPTY
22120: LIST
22121: LIST
22122: PUSH
22123: LD_INT 2
22125: NEG
22126: PUSH
22127: LD_INT 2
22129: NEG
22130: PUSH
22131: EMPTY
22132: LIST
22133: LIST
22134: PUSH
22135: LD_INT 2
22137: NEG
22138: PUSH
22139: LD_INT 3
22141: NEG
22142: PUSH
22143: EMPTY
22144: LIST
22145: LIST
22146: PUSH
22147: LD_INT 2
22149: PUSH
22150: LD_INT 1
22152: NEG
22153: PUSH
22154: EMPTY
22155: LIST
22156: LIST
22157: PUSH
22158: LD_INT 3
22160: PUSH
22161: LD_INT 1
22163: PUSH
22164: EMPTY
22165: LIST
22166: LIST
22167: PUSH
22168: LD_INT 1
22170: PUSH
22171: LD_INT 3
22173: PUSH
22174: EMPTY
22175: LIST
22176: LIST
22177: PUSH
22178: LD_INT 1
22180: NEG
22181: PUSH
22182: LD_INT 2
22184: PUSH
22185: EMPTY
22186: LIST
22187: LIST
22188: PUSH
22189: LD_INT 3
22191: NEG
22192: PUSH
22193: LD_INT 2
22195: NEG
22196: PUSH
22197: EMPTY
22198: LIST
22199: LIST
22200: PUSH
22201: EMPTY
22202: LIST
22203: LIST
22204: LIST
22205: LIST
22206: LIST
22207: LIST
22208: LIST
22209: LIST
22210: LIST
22211: LIST
22212: LIST
22213: LIST
22214: LIST
22215: LIST
22216: LIST
22217: LIST
22218: LIST
22219: LIST
22220: LIST
22221: LIST
22222: LIST
22223: LIST
22224: LIST
22225: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22226: LD_ADDR_VAR 0 32
22230: PUSH
22231: LD_INT 0
22233: PUSH
22234: LD_INT 0
22236: PUSH
22237: EMPTY
22238: LIST
22239: LIST
22240: PUSH
22241: LD_INT 0
22243: PUSH
22244: LD_INT 1
22246: NEG
22247: PUSH
22248: EMPTY
22249: LIST
22250: LIST
22251: PUSH
22252: LD_INT 1
22254: PUSH
22255: LD_INT 0
22257: PUSH
22258: EMPTY
22259: LIST
22260: LIST
22261: PUSH
22262: LD_INT 1
22264: PUSH
22265: LD_INT 1
22267: PUSH
22268: EMPTY
22269: LIST
22270: LIST
22271: PUSH
22272: LD_INT 0
22274: PUSH
22275: LD_INT 1
22277: PUSH
22278: EMPTY
22279: LIST
22280: LIST
22281: PUSH
22282: LD_INT 1
22284: NEG
22285: PUSH
22286: LD_INT 0
22288: PUSH
22289: EMPTY
22290: LIST
22291: LIST
22292: PUSH
22293: LD_INT 1
22295: NEG
22296: PUSH
22297: LD_INT 1
22299: NEG
22300: PUSH
22301: EMPTY
22302: LIST
22303: LIST
22304: PUSH
22305: LD_INT 1
22307: NEG
22308: PUSH
22309: LD_INT 2
22311: NEG
22312: PUSH
22313: EMPTY
22314: LIST
22315: LIST
22316: PUSH
22317: LD_INT 0
22319: PUSH
22320: LD_INT 2
22322: NEG
22323: PUSH
22324: EMPTY
22325: LIST
22326: LIST
22327: PUSH
22328: LD_INT 1
22330: PUSH
22331: LD_INT 1
22333: NEG
22334: PUSH
22335: EMPTY
22336: LIST
22337: LIST
22338: PUSH
22339: LD_INT 2
22341: PUSH
22342: LD_INT 1
22344: PUSH
22345: EMPTY
22346: LIST
22347: LIST
22348: PUSH
22349: LD_INT 2
22351: PUSH
22352: LD_INT 2
22354: PUSH
22355: EMPTY
22356: LIST
22357: LIST
22358: PUSH
22359: LD_INT 1
22361: PUSH
22362: LD_INT 2
22364: PUSH
22365: EMPTY
22366: LIST
22367: LIST
22368: PUSH
22369: LD_INT 0
22371: PUSH
22372: LD_INT 2
22374: PUSH
22375: EMPTY
22376: LIST
22377: LIST
22378: PUSH
22379: LD_INT 1
22381: NEG
22382: PUSH
22383: LD_INT 1
22385: PUSH
22386: EMPTY
22387: LIST
22388: LIST
22389: PUSH
22390: LD_INT 2
22392: NEG
22393: PUSH
22394: LD_INT 0
22396: PUSH
22397: EMPTY
22398: LIST
22399: LIST
22400: PUSH
22401: LD_INT 2
22403: NEG
22404: PUSH
22405: LD_INT 1
22407: NEG
22408: PUSH
22409: EMPTY
22410: LIST
22411: LIST
22412: PUSH
22413: LD_INT 1
22415: NEG
22416: PUSH
22417: LD_INT 3
22419: NEG
22420: PUSH
22421: EMPTY
22422: LIST
22423: LIST
22424: PUSH
22425: LD_INT 1
22427: PUSH
22428: LD_INT 2
22430: NEG
22431: PUSH
22432: EMPTY
22433: LIST
22434: LIST
22435: PUSH
22436: LD_INT 3
22438: PUSH
22439: LD_INT 2
22441: PUSH
22442: EMPTY
22443: LIST
22444: LIST
22445: PUSH
22446: LD_INT 2
22448: PUSH
22449: LD_INT 3
22451: PUSH
22452: EMPTY
22453: LIST
22454: LIST
22455: PUSH
22456: LD_INT 2
22458: NEG
22459: PUSH
22460: LD_INT 1
22462: PUSH
22463: EMPTY
22464: LIST
22465: LIST
22466: PUSH
22467: LD_INT 3
22469: NEG
22470: PUSH
22471: LD_INT 1
22473: NEG
22474: PUSH
22475: EMPTY
22476: LIST
22477: LIST
22478: PUSH
22479: EMPTY
22480: LIST
22481: LIST
22482: LIST
22483: LIST
22484: LIST
22485: LIST
22486: LIST
22487: LIST
22488: LIST
22489: LIST
22490: LIST
22491: LIST
22492: LIST
22493: LIST
22494: LIST
22495: LIST
22496: LIST
22497: LIST
22498: LIST
22499: LIST
22500: LIST
22501: LIST
22502: LIST
22503: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22504: LD_ADDR_VAR 0 33
22508: PUSH
22509: LD_INT 0
22511: PUSH
22512: LD_INT 0
22514: PUSH
22515: EMPTY
22516: LIST
22517: LIST
22518: PUSH
22519: LD_INT 0
22521: PUSH
22522: LD_INT 1
22524: NEG
22525: PUSH
22526: EMPTY
22527: LIST
22528: LIST
22529: PUSH
22530: LD_INT 1
22532: PUSH
22533: LD_INT 0
22535: PUSH
22536: EMPTY
22537: LIST
22538: LIST
22539: PUSH
22540: LD_INT 1
22542: PUSH
22543: LD_INT 1
22545: PUSH
22546: EMPTY
22547: LIST
22548: LIST
22549: PUSH
22550: LD_INT 0
22552: PUSH
22553: LD_INT 1
22555: PUSH
22556: EMPTY
22557: LIST
22558: LIST
22559: PUSH
22560: LD_INT 1
22562: NEG
22563: PUSH
22564: LD_INT 0
22566: PUSH
22567: EMPTY
22568: LIST
22569: LIST
22570: PUSH
22571: LD_INT 1
22573: NEG
22574: PUSH
22575: LD_INT 1
22577: NEG
22578: PUSH
22579: EMPTY
22580: LIST
22581: LIST
22582: PUSH
22583: LD_INT 1
22585: NEG
22586: PUSH
22587: LD_INT 2
22589: NEG
22590: PUSH
22591: EMPTY
22592: LIST
22593: LIST
22594: PUSH
22595: LD_INT 1
22597: PUSH
22598: LD_INT 1
22600: NEG
22601: PUSH
22602: EMPTY
22603: LIST
22604: LIST
22605: PUSH
22606: LD_INT 2
22608: PUSH
22609: LD_INT 0
22611: PUSH
22612: EMPTY
22613: LIST
22614: LIST
22615: PUSH
22616: LD_INT 2
22618: PUSH
22619: LD_INT 1
22621: PUSH
22622: EMPTY
22623: LIST
22624: LIST
22625: PUSH
22626: LD_INT 1
22628: PUSH
22629: LD_INT 2
22631: PUSH
22632: EMPTY
22633: LIST
22634: LIST
22635: PUSH
22636: LD_INT 0
22638: PUSH
22639: LD_INT 2
22641: PUSH
22642: EMPTY
22643: LIST
22644: LIST
22645: PUSH
22646: LD_INT 1
22648: NEG
22649: PUSH
22650: LD_INT 1
22652: PUSH
22653: EMPTY
22654: LIST
22655: LIST
22656: PUSH
22657: LD_INT 2
22659: NEG
22660: PUSH
22661: LD_INT 0
22663: PUSH
22664: EMPTY
22665: LIST
22666: LIST
22667: PUSH
22668: LD_INT 2
22670: NEG
22671: PUSH
22672: LD_INT 1
22674: NEG
22675: PUSH
22676: EMPTY
22677: LIST
22678: LIST
22679: PUSH
22680: LD_INT 2
22682: NEG
22683: PUSH
22684: LD_INT 2
22686: NEG
22687: PUSH
22688: EMPTY
22689: LIST
22690: LIST
22691: PUSH
22692: LD_INT 2
22694: NEG
22695: PUSH
22696: LD_INT 3
22698: NEG
22699: PUSH
22700: EMPTY
22701: LIST
22702: LIST
22703: PUSH
22704: LD_INT 2
22706: PUSH
22707: LD_INT 1
22709: NEG
22710: PUSH
22711: EMPTY
22712: LIST
22713: LIST
22714: PUSH
22715: LD_INT 3
22717: PUSH
22718: LD_INT 1
22720: PUSH
22721: EMPTY
22722: LIST
22723: LIST
22724: PUSH
22725: LD_INT 1
22727: PUSH
22728: LD_INT 3
22730: PUSH
22731: EMPTY
22732: LIST
22733: LIST
22734: PUSH
22735: LD_INT 1
22737: NEG
22738: PUSH
22739: LD_INT 2
22741: PUSH
22742: EMPTY
22743: LIST
22744: LIST
22745: PUSH
22746: LD_INT 3
22748: NEG
22749: PUSH
22750: LD_INT 2
22752: NEG
22753: PUSH
22754: EMPTY
22755: LIST
22756: LIST
22757: PUSH
22758: EMPTY
22759: LIST
22760: LIST
22761: LIST
22762: LIST
22763: LIST
22764: LIST
22765: LIST
22766: LIST
22767: LIST
22768: LIST
22769: LIST
22770: LIST
22771: LIST
22772: LIST
22773: LIST
22774: LIST
22775: LIST
22776: LIST
22777: LIST
22778: LIST
22779: LIST
22780: LIST
22781: LIST
22782: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22783: LD_ADDR_VAR 0 34
22787: PUSH
22788: LD_INT 0
22790: PUSH
22791: LD_INT 0
22793: PUSH
22794: EMPTY
22795: LIST
22796: LIST
22797: PUSH
22798: LD_INT 0
22800: PUSH
22801: LD_INT 1
22803: NEG
22804: PUSH
22805: EMPTY
22806: LIST
22807: LIST
22808: PUSH
22809: LD_INT 1
22811: PUSH
22812: LD_INT 0
22814: PUSH
22815: EMPTY
22816: LIST
22817: LIST
22818: PUSH
22819: LD_INT 1
22821: PUSH
22822: LD_INT 1
22824: PUSH
22825: EMPTY
22826: LIST
22827: LIST
22828: PUSH
22829: LD_INT 0
22831: PUSH
22832: LD_INT 1
22834: PUSH
22835: EMPTY
22836: LIST
22837: LIST
22838: PUSH
22839: LD_INT 1
22841: NEG
22842: PUSH
22843: LD_INT 0
22845: PUSH
22846: EMPTY
22847: LIST
22848: LIST
22849: PUSH
22850: LD_INT 1
22852: NEG
22853: PUSH
22854: LD_INT 1
22856: NEG
22857: PUSH
22858: EMPTY
22859: LIST
22860: LIST
22861: PUSH
22862: LD_INT 1
22864: NEG
22865: PUSH
22866: LD_INT 2
22868: NEG
22869: PUSH
22870: EMPTY
22871: LIST
22872: LIST
22873: PUSH
22874: LD_INT 0
22876: PUSH
22877: LD_INT 2
22879: NEG
22880: PUSH
22881: EMPTY
22882: LIST
22883: LIST
22884: PUSH
22885: LD_INT 1
22887: PUSH
22888: LD_INT 1
22890: NEG
22891: PUSH
22892: EMPTY
22893: LIST
22894: LIST
22895: PUSH
22896: LD_INT 2
22898: PUSH
22899: LD_INT 1
22901: PUSH
22902: EMPTY
22903: LIST
22904: LIST
22905: PUSH
22906: LD_INT 2
22908: PUSH
22909: LD_INT 2
22911: PUSH
22912: EMPTY
22913: LIST
22914: LIST
22915: PUSH
22916: LD_INT 1
22918: PUSH
22919: LD_INT 2
22921: PUSH
22922: EMPTY
22923: LIST
22924: LIST
22925: PUSH
22926: LD_INT 1
22928: NEG
22929: PUSH
22930: LD_INT 1
22932: PUSH
22933: EMPTY
22934: LIST
22935: LIST
22936: PUSH
22937: LD_INT 2
22939: NEG
22940: PUSH
22941: LD_INT 0
22943: PUSH
22944: EMPTY
22945: LIST
22946: LIST
22947: PUSH
22948: LD_INT 2
22950: NEG
22951: PUSH
22952: LD_INT 1
22954: NEG
22955: PUSH
22956: EMPTY
22957: LIST
22958: LIST
22959: PUSH
22960: LD_INT 2
22962: NEG
22963: PUSH
22964: LD_INT 2
22966: NEG
22967: PUSH
22968: EMPTY
22969: LIST
22970: LIST
22971: PUSH
22972: LD_INT 1
22974: NEG
22975: PUSH
22976: LD_INT 3
22978: NEG
22979: PUSH
22980: EMPTY
22981: LIST
22982: LIST
22983: PUSH
22984: LD_INT 1
22986: PUSH
22987: LD_INT 2
22989: NEG
22990: PUSH
22991: EMPTY
22992: LIST
22993: LIST
22994: PUSH
22995: LD_INT 3
22997: PUSH
22998: LD_INT 2
23000: PUSH
23001: EMPTY
23002: LIST
23003: LIST
23004: PUSH
23005: LD_INT 2
23007: PUSH
23008: LD_INT 3
23010: PUSH
23011: EMPTY
23012: LIST
23013: LIST
23014: PUSH
23015: LD_INT 2
23017: NEG
23018: PUSH
23019: LD_INT 1
23021: PUSH
23022: EMPTY
23023: LIST
23024: LIST
23025: PUSH
23026: LD_INT 3
23028: NEG
23029: PUSH
23030: LD_INT 1
23032: NEG
23033: PUSH
23034: EMPTY
23035: LIST
23036: LIST
23037: PUSH
23038: EMPTY
23039: LIST
23040: LIST
23041: LIST
23042: LIST
23043: LIST
23044: LIST
23045: LIST
23046: LIST
23047: LIST
23048: LIST
23049: LIST
23050: LIST
23051: LIST
23052: LIST
23053: LIST
23054: LIST
23055: LIST
23056: LIST
23057: LIST
23058: LIST
23059: LIST
23060: LIST
23061: LIST
23062: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23063: LD_ADDR_VAR 0 35
23067: PUSH
23068: LD_INT 0
23070: PUSH
23071: LD_INT 0
23073: PUSH
23074: EMPTY
23075: LIST
23076: LIST
23077: PUSH
23078: LD_INT 0
23080: PUSH
23081: LD_INT 1
23083: NEG
23084: PUSH
23085: EMPTY
23086: LIST
23087: LIST
23088: PUSH
23089: LD_INT 1
23091: PUSH
23092: LD_INT 0
23094: PUSH
23095: EMPTY
23096: LIST
23097: LIST
23098: PUSH
23099: LD_INT 1
23101: PUSH
23102: LD_INT 1
23104: PUSH
23105: EMPTY
23106: LIST
23107: LIST
23108: PUSH
23109: LD_INT 0
23111: PUSH
23112: LD_INT 1
23114: PUSH
23115: EMPTY
23116: LIST
23117: LIST
23118: PUSH
23119: LD_INT 1
23121: NEG
23122: PUSH
23123: LD_INT 0
23125: PUSH
23126: EMPTY
23127: LIST
23128: LIST
23129: PUSH
23130: LD_INT 1
23132: NEG
23133: PUSH
23134: LD_INT 1
23136: NEG
23137: PUSH
23138: EMPTY
23139: LIST
23140: LIST
23141: PUSH
23142: LD_INT 2
23144: PUSH
23145: LD_INT 1
23147: PUSH
23148: EMPTY
23149: LIST
23150: LIST
23151: PUSH
23152: LD_INT 2
23154: NEG
23155: PUSH
23156: LD_INT 1
23158: NEG
23159: PUSH
23160: EMPTY
23161: LIST
23162: LIST
23163: PUSH
23164: EMPTY
23165: LIST
23166: LIST
23167: LIST
23168: LIST
23169: LIST
23170: LIST
23171: LIST
23172: LIST
23173: LIST
23174: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23175: LD_ADDR_VAR 0 36
23179: PUSH
23180: LD_INT 0
23182: PUSH
23183: LD_INT 0
23185: PUSH
23186: EMPTY
23187: LIST
23188: LIST
23189: PUSH
23190: LD_INT 0
23192: PUSH
23193: LD_INT 1
23195: NEG
23196: PUSH
23197: EMPTY
23198: LIST
23199: LIST
23200: PUSH
23201: LD_INT 1
23203: PUSH
23204: LD_INT 0
23206: PUSH
23207: EMPTY
23208: LIST
23209: LIST
23210: PUSH
23211: LD_INT 1
23213: PUSH
23214: LD_INT 1
23216: PUSH
23217: EMPTY
23218: LIST
23219: LIST
23220: PUSH
23221: LD_INT 0
23223: PUSH
23224: LD_INT 1
23226: PUSH
23227: EMPTY
23228: LIST
23229: LIST
23230: PUSH
23231: LD_INT 1
23233: NEG
23234: PUSH
23235: LD_INT 0
23237: PUSH
23238: EMPTY
23239: LIST
23240: LIST
23241: PUSH
23242: LD_INT 1
23244: NEG
23245: PUSH
23246: LD_INT 1
23248: NEG
23249: PUSH
23250: EMPTY
23251: LIST
23252: LIST
23253: PUSH
23254: LD_INT 1
23256: NEG
23257: PUSH
23258: LD_INT 2
23260: NEG
23261: PUSH
23262: EMPTY
23263: LIST
23264: LIST
23265: PUSH
23266: LD_INT 1
23268: PUSH
23269: LD_INT 2
23271: PUSH
23272: EMPTY
23273: LIST
23274: LIST
23275: PUSH
23276: EMPTY
23277: LIST
23278: LIST
23279: LIST
23280: LIST
23281: LIST
23282: LIST
23283: LIST
23284: LIST
23285: LIST
23286: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
23287: LD_ADDR_VAR 0 37
23291: PUSH
23292: LD_INT 0
23294: PUSH
23295: LD_INT 0
23297: PUSH
23298: EMPTY
23299: LIST
23300: LIST
23301: PUSH
23302: LD_INT 0
23304: PUSH
23305: LD_INT 1
23307: NEG
23308: PUSH
23309: EMPTY
23310: LIST
23311: LIST
23312: PUSH
23313: LD_INT 1
23315: PUSH
23316: LD_INT 0
23318: PUSH
23319: EMPTY
23320: LIST
23321: LIST
23322: PUSH
23323: LD_INT 1
23325: PUSH
23326: LD_INT 1
23328: PUSH
23329: EMPTY
23330: LIST
23331: LIST
23332: PUSH
23333: LD_INT 0
23335: PUSH
23336: LD_INT 1
23338: PUSH
23339: EMPTY
23340: LIST
23341: LIST
23342: PUSH
23343: LD_INT 1
23345: NEG
23346: PUSH
23347: LD_INT 0
23349: PUSH
23350: EMPTY
23351: LIST
23352: LIST
23353: PUSH
23354: LD_INT 1
23356: NEG
23357: PUSH
23358: LD_INT 1
23360: NEG
23361: PUSH
23362: EMPTY
23363: LIST
23364: LIST
23365: PUSH
23366: LD_INT 1
23368: PUSH
23369: LD_INT 1
23371: NEG
23372: PUSH
23373: EMPTY
23374: LIST
23375: LIST
23376: PUSH
23377: LD_INT 1
23379: NEG
23380: PUSH
23381: LD_INT 1
23383: PUSH
23384: EMPTY
23385: LIST
23386: LIST
23387: PUSH
23388: EMPTY
23389: LIST
23390: LIST
23391: LIST
23392: LIST
23393: LIST
23394: LIST
23395: LIST
23396: LIST
23397: LIST
23398: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23399: LD_ADDR_VAR 0 38
23403: PUSH
23404: LD_INT 0
23406: PUSH
23407: LD_INT 0
23409: PUSH
23410: EMPTY
23411: LIST
23412: LIST
23413: PUSH
23414: LD_INT 0
23416: PUSH
23417: LD_INT 1
23419: NEG
23420: PUSH
23421: EMPTY
23422: LIST
23423: LIST
23424: PUSH
23425: LD_INT 1
23427: PUSH
23428: LD_INT 0
23430: PUSH
23431: EMPTY
23432: LIST
23433: LIST
23434: PUSH
23435: LD_INT 1
23437: PUSH
23438: LD_INT 1
23440: PUSH
23441: EMPTY
23442: LIST
23443: LIST
23444: PUSH
23445: LD_INT 0
23447: PUSH
23448: LD_INT 1
23450: PUSH
23451: EMPTY
23452: LIST
23453: LIST
23454: PUSH
23455: LD_INT 1
23457: NEG
23458: PUSH
23459: LD_INT 0
23461: PUSH
23462: EMPTY
23463: LIST
23464: LIST
23465: PUSH
23466: LD_INT 1
23468: NEG
23469: PUSH
23470: LD_INT 1
23472: NEG
23473: PUSH
23474: EMPTY
23475: LIST
23476: LIST
23477: PUSH
23478: LD_INT 2
23480: PUSH
23481: LD_INT 1
23483: PUSH
23484: EMPTY
23485: LIST
23486: LIST
23487: PUSH
23488: LD_INT 2
23490: NEG
23491: PUSH
23492: LD_INT 1
23494: NEG
23495: PUSH
23496: EMPTY
23497: LIST
23498: LIST
23499: PUSH
23500: EMPTY
23501: LIST
23502: LIST
23503: LIST
23504: LIST
23505: LIST
23506: LIST
23507: LIST
23508: LIST
23509: LIST
23510: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23511: LD_ADDR_VAR 0 39
23515: PUSH
23516: LD_INT 0
23518: PUSH
23519: LD_INT 0
23521: PUSH
23522: EMPTY
23523: LIST
23524: LIST
23525: PUSH
23526: LD_INT 0
23528: PUSH
23529: LD_INT 1
23531: NEG
23532: PUSH
23533: EMPTY
23534: LIST
23535: LIST
23536: PUSH
23537: LD_INT 1
23539: PUSH
23540: LD_INT 0
23542: PUSH
23543: EMPTY
23544: LIST
23545: LIST
23546: PUSH
23547: LD_INT 1
23549: PUSH
23550: LD_INT 1
23552: PUSH
23553: EMPTY
23554: LIST
23555: LIST
23556: PUSH
23557: LD_INT 0
23559: PUSH
23560: LD_INT 1
23562: PUSH
23563: EMPTY
23564: LIST
23565: LIST
23566: PUSH
23567: LD_INT 1
23569: NEG
23570: PUSH
23571: LD_INT 0
23573: PUSH
23574: EMPTY
23575: LIST
23576: LIST
23577: PUSH
23578: LD_INT 1
23580: NEG
23581: PUSH
23582: LD_INT 1
23584: NEG
23585: PUSH
23586: EMPTY
23587: LIST
23588: LIST
23589: PUSH
23590: LD_INT 1
23592: NEG
23593: PUSH
23594: LD_INT 2
23596: NEG
23597: PUSH
23598: EMPTY
23599: LIST
23600: LIST
23601: PUSH
23602: LD_INT 1
23604: PUSH
23605: LD_INT 2
23607: PUSH
23608: EMPTY
23609: LIST
23610: LIST
23611: PUSH
23612: EMPTY
23613: LIST
23614: LIST
23615: LIST
23616: LIST
23617: LIST
23618: LIST
23619: LIST
23620: LIST
23621: LIST
23622: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
23623: LD_ADDR_VAR 0 40
23627: PUSH
23628: LD_INT 0
23630: PUSH
23631: LD_INT 0
23633: PUSH
23634: EMPTY
23635: LIST
23636: LIST
23637: PUSH
23638: LD_INT 0
23640: PUSH
23641: LD_INT 1
23643: NEG
23644: PUSH
23645: EMPTY
23646: LIST
23647: LIST
23648: PUSH
23649: LD_INT 1
23651: PUSH
23652: LD_INT 0
23654: PUSH
23655: EMPTY
23656: LIST
23657: LIST
23658: PUSH
23659: LD_INT 1
23661: PUSH
23662: LD_INT 1
23664: PUSH
23665: EMPTY
23666: LIST
23667: LIST
23668: PUSH
23669: LD_INT 0
23671: PUSH
23672: LD_INT 1
23674: PUSH
23675: EMPTY
23676: LIST
23677: LIST
23678: PUSH
23679: LD_INT 1
23681: NEG
23682: PUSH
23683: LD_INT 0
23685: PUSH
23686: EMPTY
23687: LIST
23688: LIST
23689: PUSH
23690: LD_INT 1
23692: NEG
23693: PUSH
23694: LD_INT 1
23696: NEG
23697: PUSH
23698: EMPTY
23699: LIST
23700: LIST
23701: PUSH
23702: LD_INT 1
23704: PUSH
23705: LD_INT 1
23707: NEG
23708: PUSH
23709: EMPTY
23710: LIST
23711: LIST
23712: PUSH
23713: LD_INT 1
23715: NEG
23716: PUSH
23717: LD_INT 1
23719: PUSH
23720: EMPTY
23721: LIST
23722: LIST
23723: PUSH
23724: EMPTY
23725: LIST
23726: LIST
23727: LIST
23728: LIST
23729: LIST
23730: LIST
23731: LIST
23732: LIST
23733: LIST
23734: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23735: LD_ADDR_VAR 0 41
23739: PUSH
23740: LD_INT 0
23742: PUSH
23743: LD_INT 0
23745: PUSH
23746: EMPTY
23747: LIST
23748: LIST
23749: PUSH
23750: LD_INT 0
23752: PUSH
23753: LD_INT 1
23755: NEG
23756: PUSH
23757: EMPTY
23758: LIST
23759: LIST
23760: PUSH
23761: LD_INT 1
23763: PUSH
23764: LD_INT 0
23766: PUSH
23767: EMPTY
23768: LIST
23769: LIST
23770: PUSH
23771: LD_INT 1
23773: PUSH
23774: LD_INT 1
23776: PUSH
23777: EMPTY
23778: LIST
23779: LIST
23780: PUSH
23781: LD_INT 0
23783: PUSH
23784: LD_INT 1
23786: PUSH
23787: EMPTY
23788: LIST
23789: LIST
23790: PUSH
23791: LD_INT 1
23793: NEG
23794: PUSH
23795: LD_INT 0
23797: PUSH
23798: EMPTY
23799: LIST
23800: LIST
23801: PUSH
23802: LD_INT 1
23804: NEG
23805: PUSH
23806: LD_INT 1
23808: NEG
23809: PUSH
23810: EMPTY
23811: LIST
23812: LIST
23813: PUSH
23814: LD_INT 1
23816: NEG
23817: PUSH
23818: LD_INT 2
23820: NEG
23821: PUSH
23822: EMPTY
23823: LIST
23824: LIST
23825: PUSH
23826: LD_INT 1
23828: PUSH
23829: LD_INT 1
23831: NEG
23832: PUSH
23833: EMPTY
23834: LIST
23835: LIST
23836: PUSH
23837: LD_INT 2
23839: PUSH
23840: LD_INT 0
23842: PUSH
23843: EMPTY
23844: LIST
23845: LIST
23846: PUSH
23847: LD_INT 2
23849: PUSH
23850: LD_INT 1
23852: PUSH
23853: EMPTY
23854: LIST
23855: LIST
23856: PUSH
23857: LD_INT 2
23859: PUSH
23860: LD_INT 2
23862: PUSH
23863: EMPTY
23864: LIST
23865: LIST
23866: PUSH
23867: LD_INT 1
23869: PUSH
23870: LD_INT 2
23872: PUSH
23873: EMPTY
23874: LIST
23875: LIST
23876: PUSH
23877: LD_INT 1
23879: NEG
23880: PUSH
23881: LD_INT 1
23883: PUSH
23884: EMPTY
23885: LIST
23886: LIST
23887: PUSH
23888: LD_INT 2
23890: NEG
23891: PUSH
23892: LD_INT 0
23894: PUSH
23895: EMPTY
23896: LIST
23897: LIST
23898: PUSH
23899: LD_INT 2
23901: NEG
23902: PUSH
23903: LD_INT 1
23905: NEG
23906: PUSH
23907: EMPTY
23908: LIST
23909: LIST
23910: PUSH
23911: LD_INT 2
23913: NEG
23914: PUSH
23915: LD_INT 2
23917: NEG
23918: PUSH
23919: EMPTY
23920: LIST
23921: LIST
23922: PUSH
23923: LD_INT 2
23925: NEG
23926: PUSH
23927: LD_INT 3
23929: NEG
23930: PUSH
23931: EMPTY
23932: LIST
23933: LIST
23934: PUSH
23935: LD_INT 2
23937: PUSH
23938: LD_INT 1
23940: NEG
23941: PUSH
23942: EMPTY
23943: LIST
23944: LIST
23945: PUSH
23946: LD_INT 3
23948: PUSH
23949: LD_INT 0
23951: PUSH
23952: EMPTY
23953: LIST
23954: LIST
23955: PUSH
23956: LD_INT 3
23958: PUSH
23959: LD_INT 1
23961: PUSH
23962: EMPTY
23963: LIST
23964: LIST
23965: PUSH
23966: LD_INT 3
23968: PUSH
23969: LD_INT 2
23971: PUSH
23972: EMPTY
23973: LIST
23974: LIST
23975: PUSH
23976: LD_INT 3
23978: PUSH
23979: LD_INT 3
23981: PUSH
23982: EMPTY
23983: LIST
23984: LIST
23985: PUSH
23986: LD_INT 2
23988: PUSH
23989: LD_INT 3
23991: PUSH
23992: EMPTY
23993: LIST
23994: LIST
23995: PUSH
23996: LD_INT 2
23998: NEG
23999: PUSH
24000: LD_INT 1
24002: PUSH
24003: EMPTY
24004: LIST
24005: LIST
24006: PUSH
24007: LD_INT 3
24009: NEG
24010: PUSH
24011: LD_INT 0
24013: PUSH
24014: EMPTY
24015: LIST
24016: LIST
24017: PUSH
24018: LD_INT 3
24020: NEG
24021: PUSH
24022: LD_INT 1
24024: NEG
24025: PUSH
24026: EMPTY
24027: LIST
24028: LIST
24029: PUSH
24030: LD_INT 3
24032: NEG
24033: PUSH
24034: LD_INT 2
24036: NEG
24037: PUSH
24038: EMPTY
24039: LIST
24040: LIST
24041: PUSH
24042: LD_INT 3
24044: NEG
24045: PUSH
24046: LD_INT 3
24048: NEG
24049: PUSH
24050: EMPTY
24051: LIST
24052: LIST
24053: PUSH
24054: EMPTY
24055: LIST
24056: LIST
24057: LIST
24058: LIST
24059: LIST
24060: LIST
24061: LIST
24062: LIST
24063: LIST
24064: LIST
24065: LIST
24066: LIST
24067: LIST
24068: LIST
24069: LIST
24070: LIST
24071: LIST
24072: LIST
24073: LIST
24074: LIST
24075: LIST
24076: LIST
24077: LIST
24078: LIST
24079: LIST
24080: LIST
24081: LIST
24082: LIST
24083: LIST
24084: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24085: LD_ADDR_VAR 0 42
24089: PUSH
24090: LD_INT 0
24092: PUSH
24093: LD_INT 0
24095: PUSH
24096: EMPTY
24097: LIST
24098: LIST
24099: PUSH
24100: LD_INT 0
24102: PUSH
24103: LD_INT 1
24105: NEG
24106: PUSH
24107: EMPTY
24108: LIST
24109: LIST
24110: PUSH
24111: LD_INT 1
24113: PUSH
24114: LD_INT 0
24116: PUSH
24117: EMPTY
24118: LIST
24119: LIST
24120: PUSH
24121: LD_INT 1
24123: PUSH
24124: LD_INT 1
24126: PUSH
24127: EMPTY
24128: LIST
24129: LIST
24130: PUSH
24131: LD_INT 0
24133: PUSH
24134: LD_INT 1
24136: PUSH
24137: EMPTY
24138: LIST
24139: LIST
24140: PUSH
24141: LD_INT 1
24143: NEG
24144: PUSH
24145: LD_INT 0
24147: PUSH
24148: EMPTY
24149: LIST
24150: LIST
24151: PUSH
24152: LD_INT 1
24154: NEG
24155: PUSH
24156: LD_INT 1
24158: NEG
24159: PUSH
24160: EMPTY
24161: LIST
24162: LIST
24163: PUSH
24164: LD_INT 1
24166: NEG
24167: PUSH
24168: LD_INT 2
24170: NEG
24171: PUSH
24172: EMPTY
24173: LIST
24174: LIST
24175: PUSH
24176: LD_INT 0
24178: PUSH
24179: LD_INT 2
24181: NEG
24182: PUSH
24183: EMPTY
24184: LIST
24185: LIST
24186: PUSH
24187: LD_INT 1
24189: PUSH
24190: LD_INT 1
24192: NEG
24193: PUSH
24194: EMPTY
24195: LIST
24196: LIST
24197: PUSH
24198: LD_INT 2
24200: PUSH
24201: LD_INT 1
24203: PUSH
24204: EMPTY
24205: LIST
24206: LIST
24207: PUSH
24208: LD_INT 2
24210: PUSH
24211: LD_INT 2
24213: PUSH
24214: EMPTY
24215: LIST
24216: LIST
24217: PUSH
24218: LD_INT 1
24220: PUSH
24221: LD_INT 2
24223: PUSH
24224: EMPTY
24225: LIST
24226: LIST
24227: PUSH
24228: LD_INT 0
24230: PUSH
24231: LD_INT 2
24233: PUSH
24234: EMPTY
24235: LIST
24236: LIST
24237: PUSH
24238: LD_INT 1
24240: NEG
24241: PUSH
24242: LD_INT 1
24244: PUSH
24245: EMPTY
24246: LIST
24247: LIST
24248: PUSH
24249: LD_INT 2
24251: NEG
24252: PUSH
24253: LD_INT 1
24255: NEG
24256: PUSH
24257: EMPTY
24258: LIST
24259: LIST
24260: PUSH
24261: LD_INT 2
24263: NEG
24264: PUSH
24265: LD_INT 2
24267: NEG
24268: PUSH
24269: EMPTY
24270: LIST
24271: LIST
24272: PUSH
24273: LD_INT 2
24275: NEG
24276: PUSH
24277: LD_INT 3
24279: NEG
24280: PUSH
24281: EMPTY
24282: LIST
24283: LIST
24284: PUSH
24285: LD_INT 1
24287: NEG
24288: PUSH
24289: LD_INT 3
24291: NEG
24292: PUSH
24293: EMPTY
24294: LIST
24295: LIST
24296: PUSH
24297: LD_INT 0
24299: PUSH
24300: LD_INT 3
24302: NEG
24303: PUSH
24304: EMPTY
24305: LIST
24306: LIST
24307: PUSH
24308: LD_INT 1
24310: PUSH
24311: LD_INT 2
24313: NEG
24314: PUSH
24315: EMPTY
24316: LIST
24317: LIST
24318: PUSH
24319: LD_INT 3
24321: PUSH
24322: LD_INT 2
24324: PUSH
24325: EMPTY
24326: LIST
24327: LIST
24328: PUSH
24329: LD_INT 3
24331: PUSH
24332: LD_INT 3
24334: PUSH
24335: EMPTY
24336: LIST
24337: LIST
24338: PUSH
24339: LD_INT 2
24341: PUSH
24342: LD_INT 3
24344: PUSH
24345: EMPTY
24346: LIST
24347: LIST
24348: PUSH
24349: LD_INT 1
24351: PUSH
24352: LD_INT 3
24354: PUSH
24355: EMPTY
24356: LIST
24357: LIST
24358: PUSH
24359: LD_INT 0
24361: PUSH
24362: LD_INT 3
24364: PUSH
24365: EMPTY
24366: LIST
24367: LIST
24368: PUSH
24369: LD_INT 1
24371: NEG
24372: PUSH
24373: LD_INT 2
24375: PUSH
24376: EMPTY
24377: LIST
24378: LIST
24379: PUSH
24380: LD_INT 3
24382: NEG
24383: PUSH
24384: LD_INT 2
24386: NEG
24387: PUSH
24388: EMPTY
24389: LIST
24390: LIST
24391: PUSH
24392: LD_INT 3
24394: NEG
24395: PUSH
24396: LD_INT 3
24398: NEG
24399: PUSH
24400: EMPTY
24401: LIST
24402: LIST
24403: PUSH
24404: EMPTY
24405: LIST
24406: LIST
24407: LIST
24408: LIST
24409: LIST
24410: LIST
24411: LIST
24412: LIST
24413: LIST
24414: LIST
24415: LIST
24416: LIST
24417: LIST
24418: LIST
24419: LIST
24420: LIST
24421: LIST
24422: LIST
24423: LIST
24424: LIST
24425: LIST
24426: LIST
24427: LIST
24428: LIST
24429: LIST
24430: LIST
24431: LIST
24432: LIST
24433: LIST
24434: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24435: LD_ADDR_VAR 0 43
24439: PUSH
24440: LD_INT 0
24442: PUSH
24443: LD_INT 0
24445: PUSH
24446: EMPTY
24447: LIST
24448: LIST
24449: PUSH
24450: LD_INT 0
24452: PUSH
24453: LD_INT 1
24455: NEG
24456: PUSH
24457: EMPTY
24458: LIST
24459: LIST
24460: PUSH
24461: LD_INT 1
24463: PUSH
24464: LD_INT 0
24466: PUSH
24467: EMPTY
24468: LIST
24469: LIST
24470: PUSH
24471: LD_INT 1
24473: PUSH
24474: LD_INT 1
24476: PUSH
24477: EMPTY
24478: LIST
24479: LIST
24480: PUSH
24481: LD_INT 0
24483: PUSH
24484: LD_INT 1
24486: PUSH
24487: EMPTY
24488: LIST
24489: LIST
24490: PUSH
24491: LD_INT 1
24493: NEG
24494: PUSH
24495: LD_INT 0
24497: PUSH
24498: EMPTY
24499: LIST
24500: LIST
24501: PUSH
24502: LD_INT 1
24504: NEG
24505: PUSH
24506: LD_INT 1
24508: NEG
24509: PUSH
24510: EMPTY
24511: LIST
24512: LIST
24513: PUSH
24514: LD_INT 1
24516: NEG
24517: PUSH
24518: LD_INT 2
24520: NEG
24521: PUSH
24522: EMPTY
24523: LIST
24524: LIST
24525: PUSH
24526: LD_INT 0
24528: PUSH
24529: LD_INT 2
24531: NEG
24532: PUSH
24533: EMPTY
24534: LIST
24535: LIST
24536: PUSH
24537: LD_INT 1
24539: PUSH
24540: LD_INT 1
24542: NEG
24543: PUSH
24544: EMPTY
24545: LIST
24546: LIST
24547: PUSH
24548: LD_INT 2
24550: PUSH
24551: LD_INT 0
24553: PUSH
24554: EMPTY
24555: LIST
24556: LIST
24557: PUSH
24558: LD_INT 2
24560: PUSH
24561: LD_INT 1
24563: PUSH
24564: EMPTY
24565: LIST
24566: LIST
24567: PUSH
24568: LD_INT 1
24570: PUSH
24571: LD_INT 2
24573: PUSH
24574: EMPTY
24575: LIST
24576: LIST
24577: PUSH
24578: LD_INT 0
24580: PUSH
24581: LD_INT 2
24583: PUSH
24584: EMPTY
24585: LIST
24586: LIST
24587: PUSH
24588: LD_INT 1
24590: NEG
24591: PUSH
24592: LD_INT 1
24594: PUSH
24595: EMPTY
24596: LIST
24597: LIST
24598: PUSH
24599: LD_INT 2
24601: NEG
24602: PUSH
24603: LD_INT 0
24605: PUSH
24606: EMPTY
24607: LIST
24608: LIST
24609: PUSH
24610: LD_INT 2
24612: NEG
24613: PUSH
24614: LD_INT 1
24616: NEG
24617: PUSH
24618: EMPTY
24619: LIST
24620: LIST
24621: PUSH
24622: LD_INT 1
24624: NEG
24625: PUSH
24626: LD_INT 3
24628: NEG
24629: PUSH
24630: EMPTY
24631: LIST
24632: LIST
24633: PUSH
24634: LD_INT 0
24636: PUSH
24637: LD_INT 3
24639: NEG
24640: PUSH
24641: EMPTY
24642: LIST
24643: LIST
24644: PUSH
24645: LD_INT 1
24647: PUSH
24648: LD_INT 2
24650: NEG
24651: PUSH
24652: EMPTY
24653: LIST
24654: LIST
24655: PUSH
24656: LD_INT 2
24658: PUSH
24659: LD_INT 1
24661: NEG
24662: PUSH
24663: EMPTY
24664: LIST
24665: LIST
24666: PUSH
24667: LD_INT 3
24669: PUSH
24670: LD_INT 0
24672: PUSH
24673: EMPTY
24674: LIST
24675: LIST
24676: PUSH
24677: LD_INT 3
24679: PUSH
24680: LD_INT 1
24682: PUSH
24683: EMPTY
24684: LIST
24685: LIST
24686: PUSH
24687: LD_INT 1
24689: PUSH
24690: LD_INT 3
24692: PUSH
24693: EMPTY
24694: LIST
24695: LIST
24696: PUSH
24697: LD_INT 0
24699: PUSH
24700: LD_INT 3
24702: PUSH
24703: EMPTY
24704: LIST
24705: LIST
24706: PUSH
24707: LD_INT 1
24709: NEG
24710: PUSH
24711: LD_INT 2
24713: PUSH
24714: EMPTY
24715: LIST
24716: LIST
24717: PUSH
24718: LD_INT 2
24720: NEG
24721: PUSH
24722: LD_INT 1
24724: PUSH
24725: EMPTY
24726: LIST
24727: LIST
24728: PUSH
24729: LD_INT 3
24731: NEG
24732: PUSH
24733: LD_INT 0
24735: PUSH
24736: EMPTY
24737: LIST
24738: LIST
24739: PUSH
24740: LD_INT 3
24742: NEG
24743: PUSH
24744: LD_INT 1
24746: NEG
24747: PUSH
24748: EMPTY
24749: LIST
24750: LIST
24751: PUSH
24752: EMPTY
24753: LIST
24754: LIST
24755: LIST
24756: LIST
24757: LIST
24758: LIST
24759: LIST
24760: LIST
24761: LIST
24762: LIST
24763: LIST
24764: LIST
24765: LIST
24766: LIST
24767: LIST
24768: LIST
24769: LIST
24770: LIST
24771: LIST
24772: LIST
24773: LIST
24774: LIST
24775: LIST
24776: LIST
24777: LIST
24778: LIST
24779: LIST
24780: LIST
24781: LIST
24782: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24783: LD_ADDR_VAR 0 44
24787: PUSH
24788: LD_INT 0
24790: PUSH
24791: LD_INT 0
24793: PUSH
24794: EMPTY
24795: LIST
24796: LIST
24797: PUSH
24798: LD_INT 0
24800: PUSH
24801: LD_INT 1
24803: NEG
24804: PUSH
24805: EMPTY
24806: LIST
24807: LIST
24808: PUSH
24809: LD_INT 1
24811: PUSH
24812: LD_INT 0
24814: PUSH
24815: EMPTY
24816: LIST
24817: LIST
24818: PUSH
24819: LD_INT 1
24821: PUSH
24822: LD_INT 1
24824: PUSH
24825: EMPTY
24826: LIST
24827: LIST
24828: PUSH
24829: LD_INT 0
24831: PUSH
24832: LD_INT 1
24834: PUSH
24835: EMPTY
24836: LIST
24837: LIST
24838: PUSH
24839: LD_INT 1
24841: NEG
24842: PUSH
24843: LD_INT 0
24845: PUSH
24846: EMPTY
24847: LIST
24848: LIST
24849: PUSH
24850: LD_INT 1
24852: NEG
24853: PUSH
24854: LD_INT 1
24856: NEG
24857: PUSH
24858: EMPTY
24859: LIST
24860: LIST
24861: PUSH
24862: LD_INT 1
24864: NEG
24865: PUSH
24866: LD_INT 2
24868: NEG
24869: PUSH
24870: EMPTY
24871: LIST
24872: LIST
24873: PUSH
24874: LD_INT 1
24876: PUSH
24877: LD_INT 1
24879: NEG
24880: PUSH
24881: EMPTY
24882: LIST
24883: LIST
24884: PUSH
24885: LD_INT 2
24887: PUSH
24888: LD_INT 0
24890: PUSH
24891: EMPTY
24892: LIST
24893: LIST
24894: PUSH
24895: LD_INT 2
24897: PUSH
24898: LD_INT 1
24900: PUSH
24901: EMPTY
24902: LIST
24903: LIST
24904: PUSH
24905: LD_INT 2
24907: PUSH
24908: LD_INT 2
24910: PUSH
24911: EMPTY
24912: LIST
24913: LIST
24914: PUSH
24915: LD_INT 1
24917: PUSH
24918: LD_INT 2
24920: PUSH
24921: EMPTY
24922: LIST
24923: LIST
24924: PUSH
24925: LD_INT 1
24927: NEG
24928: PUSH
24929: LD_INT 1
24931: PUSH
24932: EMPTY
24933: LIST
24934: LIST
24935: PUSH
24936: LD_INT 2
24938: NEG
24939: PUSH
24940: LD_INT 0
24942: PUSH
24943: EMPTY
24944: LIST
24945: LIST
24946: PUSH
24947: LD_INT 2
24949: NEG
24950: PUSH
24951: LD_INT 1
24953: NEG
24954: PUSH
24955: EMPTY
24956: LIST
24957: LIST
24958: PUSH
24959: LD_INT 2
24961: NEG
24962: PUSH
24963: LD_INT 2
24965: NEG
24966: PUSH
24967: EMPTY
24968: LIST
24969: LIST
24970: PUSH
24971: LD_INT 2
24973: NEG
24974: PUSH
24975: LD_INT 3
24977: NEG
24978: PUSH
24979: EMPTY
24980: LIST
24981: LIST
24982: PUSH
24983: LD_INT 2
24985: PUSH
24986: LD_INT 1
24988: NEG
24989: PUSH
24990: EMPTY
24991: LIST
24992: LIST
24993: PUSH
24994: LD_INT 3
24996: PUSH
24997: LD_INT 0
24999: PUSH
25000: EMPTY
25001: LIST
25002: LIST
25003: PUSH
25004: LD_INT 3
25006: PUSH
25007: LD_INT 1
25009: PUSH
25010: EMPTY
25011: LIST
25012: LIST
25013: PUSH
25014: LD_INT 3
25016: PUSH
25017: LD_INT 2
25019: PUSH
25020: EMPTY
25021: LIST
25022: LIST
25023: PUSH
25024: LD_INT 3
25026: PUSH
25027: LD_INT 3
25029: PUSH
25030: EMPTY
25031: LIST
25032: LIST
25033: PUSH
25034: LD_INT 2
25036: PUSH
25037: LD_INT 3
25039: PUSH
25040: EMPTY
25041: LIST
25042: LIST
25043: PUSH
25044: LD_INT 2
25046: NEG
25047: PUSH
25048: LD_INT 1
25050: PUSH
25051: EMPTY
25052: LIST
25053: LIST
25054: PUSH
25055: LD_INT 3
25057: NEG
25058: PUSH
25059: LD_INT 0
25061: PUSH
25062: EMPTY
25063: LIST
25064: LIST
25065: PUSH
25066: LD_INT 3
25068: NEG
25069: PUSH
25070: LD_INT 1
25072: NEG
25073: PUSH
25074: EMPTY
25075: LIST
25076: LIST
25077: PUSH
25078: LD_INT 3
25080: NEG
25081: PUSH
25082: LD_INT 2
25084: NEG
25085: PUSH
25086: EMPTY
25087: LIST
25088: LIST
25089: PUSH
25090: LD_INT 3
25092: NEG
25093: PUSH
25094: LD_INT 3
25096: NEG
25097: PUSH
25098: EMPTY
25099: LIST
25100: LIST
25101: PUSH
25102: EMPTY
25103: LIST
25104: LIST
25105: LIST
25106: LIST
25107: LIST
25108: LIST
25109: LIST
25110: LIST
25111: LIST
25112: LIST
25113: LIST
25114: LIST
25115: LIST
25116: LIST
25117: LIST
25118: LIST
25119: LIST
25120: LIST
25121: LIST
25122: LIST
25123: LIST
25124: LIST
25125: LIST
25126: LIST
25127: LIST
25128: LIST
25129: LIST
25130: LIST
25131: LIST
25132: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25133: LD_ADDR_VAR 0 45
25137: PUSH
25138: LD_INT 0
25140: PUSH
25141: LD_INT 0
25143: PUSH
25144: EMPTY
25145: LIST
25146: LIST
25147: PUSH
25148: LD_INT 0
25150: PUSH
25151: LD_INT 1
25153: NEG
25154: PUSH
25155: EMPTY
25156: LIST
25157: LIST
25158: PUSH
25159: LD_INT 1
25161: PUSH
25162: LD_INT 0
25164: PUSH
25165: EMPTY
25166: LIST
25167: LIST
25168: PUSH
25169: LD_INT 1
25171: PUSH
25172: LD_INT 1
25174: PUSH
25175: EMPTY
25176: LIST
25177: LIST
25178: PUSH
25179: LD_INT 0
25181: PUSH
25182: LD_INT 1
25184: PUSH
25185: EMPTY
25186: LIST
25187: LIST
25188: PUSH
25189: LD_INT 1
25191: NEG
25192: PUSH
25193: LD_INT 0
25195: PUSH
25196: EMPTY
25197: LIST
25198: LIST
25199: PUSH
25200: LD_INT 1
25202: NEG
25203: PUSH
25204: LD_INT 1
25206: NEG
25207: PUSH
25208: EMPTY
25209: LIST
25210: LIST
25211: PUSH
25212: LD_INT 1
25214: NEG
25215: PUSH
25216: LD_INT 2
25218: NEG
25219: PUSH
25220: EMPTY
25221: LIST
25222: LIST
25223: PUSH
25224: LD_INT 0
25226: PUSH
25227: LD_INT 2
25229: NEG
25230: PUSH
25231: EMPTY
25232: LIST
25233: LIST
25234: PUSH
25235: LD_INT 1
25237: PUSH
25238: LD_INT 1
25240: NEG
25241: PUSH
25242: EMPTY
25243: LIST
25244: LIST
25245: PUSH
25246: LD_INT 2
25248: PUSH
25249: LD_INT 1
25251: PUSH
25252: EMPTY
25253: LIST
25254: LIST
25255: PUSH
25256: LD_INT 2
25258: PUSH
25259: LD_INT 2
25261: PUSH
25262: EMPTY
25263: LIST
25264: LIST
25265: PUSH
25266: LD_INT 1
25268: PUSH
25269: LD_INT 2
25271: PUSH
25272: EMPTY
25273: LIST
25274: LIST
25275: PUSH
25276: LD_INT 0
25278: PUSH
25279: LD_INT 2
25281: PUSH
25282: EMPTY
25283: LIST
25284: LIST
25285: PUSH
25286: LD_INT 1
25288: NEG
25289: PUSH
25290: LD_INT 1
25292: PUSH
25293: EMPTY
25294: LIST
25295: LIST
25296: PUSH
25297: LD_INT 2
25299: NEG
25300: PUSH
25301: LD_INT 1
25303: NEG
25304: PUSH
25305: EMPTY
25306: LIST
25307: LIST
25308: PUSH
25309: LD_INT 2
25311: NEG
25312: PUSH
25313: LD_INT 2
25315: NEG
25316: PUSH
25317: EMPTY
25318: LIST
25319: LIST
25320: PUSH
25321: LD_INT 2
25323: NEG
25324: PUSH
25325: LD_INT 3
25327: NEG
25328: PUSH
25329: EMPTY
25330: LIST
25331: LIST
25332: PUSH
25333: LD_INT 1
25335: NEG
25336: PUSH
25337: LD_INT 3
25339: NEG
25340: PUSH
25341: EMPTY
25342: LIST
25343: LIST
25344: PUSH
25345: LD_INT 0
25347: PUSH
25348: LD_INT 3
25350: NEG
25351: PUSH
25352: EMPTY
25353: LIST
25354: LIST
25355: PUSH
25356: LD_INT 1
25358: PUSH
25359: LD_INT 2
25361: NEG
25362: PUSH
25363: EMPTY
25364: LIST
25365: LIST
25366: PUSH
25367: LD_INT 3
25369: PUSH
25370: LD_INT 2
25372: PUSH
25373: EMPTY
25374: LIST
25375: LIST
25376: PUSH
25377: LD_INT 3
25379: PUSH
25380: LD_INT 3
25382: PUSH
25383: EMPTY
25384: LIST
25385: LIST
25386: PUSH
25387: LD_INT 2
25389: PUSH
25390: LD_INT 3
25392: PUSH
25393: EMPTY
25394: LIST
25395: LIST
25396: PUSH
25397: LD_INT 1
25399: PUSH
25400: LD_INT 3
25402: PUSH
25403: EMPTY
25404: LIST
25405: LIST
25406: PUSH
25407: LD_INT 0
25409: PUSH
25410: LD_INT 3
25412: PUSH
25413: EMPTY
25414: LIST
25415: LIST
25416: PUSH
25417: LD_INT 1
25419: NEG
25420: PUSH
25421: LD_INT 2
25423: PUSH
25424: EMPTY
25425: LIST
25426: LIST
25427: PUSH
25428: LD_INT 3
25430: NEG
25431: PUSH
25432: LD_INT 2
25434: NEG
25435: PUSH
25436: EMPTY
25437: LIST
25438: LIST
25439: PUSH
25440: LD_INT 3
25442: NEG
25443: PUSH
25444: LD_INT 3
25446: NEG
25447: PUSH
25448: EMPTY
25449: LIST
25450: LIST
25451: PUSH
25452: EMPTY
25453: LIST
25454: LIST
25455: LIST
25456: LIST
25457: LIST
25458: LIST
25459: LIST
25460: LIST
25461: LIST
25462: LIST
25463: LIST
25464: LIST
25465: LIST
25466: LIST
25467: LIST
25468: LIST
25469: LIST
25470: LIST
25471: LIST
25472: LIST
25473: LIST
25474: LIST
25475: LIST
25476: LIST
25477: LIST
25478: LIST
25479: LIST
25480: LIST
25481: LIST
25482: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25483: LD_ADDR_VAR 0 46
25487: PUSH
25488: LD_INT 0
25490: PUSH
25491: LD_INT 0
25493: PUSH
25494: EMPTY
25495: LIST
25496: LIST
25497: PUSH
25498: LD_INT 0
25500: PUSH
25501: LD_INT 1
25503: NEG
25504: PUSH
25505: EMPTY
25506: LIST
25507: LIST
25508: PUSH
25509: LD_INT 1
25511: PUSH
25512: LD_INT 0
25514: PUSH
25515: EMPTY
25516: LIST
25517: LIST
25518: PUSH
25519: LD_INT 1
25521: PUSH
25522: LD_INT 1
25524: PUSH
25525: EMPTY
25526: LIST
25527: LIST
25528: PUSH
25529: LD_INT 0
25531: PUSH
25532: LD_INT 1
25534: PUSH
25535: EMPTY
25536: LIST
25537: LIST
25538: PUSH
25539: LD_INT 1
25541: NEG
25542: PUSH
25543: LD_INT 0
25545: PUSH
25546: EMPTY
25547: LIST
25548: LIST
25549: PUSH
25550: LD_INT 1
25552: NEG
25553: PUSH
25554: LD_INT 1
25556: NEG
25557: PUSH
25558: EMPTY
25559: LIST
25560: LIST
25561: PUSH
25562: LD_INT 1
25564: NEG
25565: PUSH
25566: LD_INT 2
25568: NEG
25569: PUSH
25570: EMPTY
25571: LIST
25572: LIST
25573: PUSH
25574: LD_INT 0
25576: PUSH
25577: LD_INT 2
25579: NEG
25580: PUSH
25581: EMPTY
25582: LIST
25583: LIST
25584: PUSH
25585: LD_INT 1
25587: PUSH
25588: LD_INT 1
25590: NEG
25591: PUSH
25592: EMPTY
25593: LIST
25594: LIST
25595: PUSH
25596: LD_INT 2
25598: PUSH
25599: LD_INT 0
25601: PUSH
25602: EMPTY
25603: LIST
25604: LIST
25605: PUSH
25606: LD_INT 2
25608: PUSH
25609: LD_INT 1
25611: PUSH
25612: EMPTY
25613: LIST
25614: LIST
25615: PUSH
25616: LD_INT 1
25618: PUSH
25619: LD_INT 2
25621: PUSH
25622: EMPTY
25623: LIST
25624: LIST
25625: PUSH
25626: LD_INT 0
25628: PUSH
25629: LD_INT 2
25631: PUSH
25632: EMPTY
25633: LIST
25634: LIST
25635: PUSH
25636: LD_INT 1
25638: NEG
25639: PUSH
25640: LD_INT 1
25642: PUSH
25643: EMPTY
25644: LIST
25645: LIST
25646: PUSH
25647: LD_INT 2
25649: NEG
25650: PUSH
25651: LD_INT 0
25653: PUSH
25654: EMPTY
25655: LIST
25656: LIST
25657: PUSH
25658: LD_INT 2
25660: NEG
25661: PUSH
25662: LD_INT 1
25664: NEG
25665: PUSH
25666: EMPTY
25667: LIST
25668: LIST
25669: PUSH
25670: LD_INT 1
25672: NEG
25673: PUSH
25674: LD_INT 3
25676: NEG
25677: PUSH
25678: EMPTY
25679: LIST
25680: LIST
25681: PUSH
25682: LD_INT 0
25684: PUSH
25685: LD_INT 3
25687: NEG
25688: PUSH
25689: EMPTY
25690: LIST
25691: LIST
25692: PUSH
25693: LD_INT 1
25695: PUSH
25696: LD_INT 2
25698: NEG
25699: PUSH
25700: EMPTY
25701: LIST
25702: LIST
25703: PUSH
25704: LD_INT 2
25706: PUSH
25707: LD_INT 1
25709: NEG
25710: PUSH
25711: EMPTY
25712: LIST
25713: LIST
25714: PUSH
25715: LD_INT 3
25717: PUSH
25718: LD_INT 0
25720: PUSH
25721: EMPTY
25722: LIST
25723: LIST
25724: PUSH
25725: LD_INT 3
25727: PUSH
25728: LD_INT 1
25730: PUSH
25731: EMPTY
25732: LIST
25733: LIST
25734: PUSH
25735: LD_INT 1
25737: PUSH
25738: LD_INT 3
25740: PUSH
25741: EMPTY
25742: LIST
25743: LIST
25744: PUSH
25745: LD_INT 0
25747: PUSH
25748: LD_INT 3
25750: PUSH
25751: EMPTY
25752: LIST
25753: LIST
25754: PUSH
25755: LD_INT 1
25757: NEG
25758: PUSH
25759: LD_INT 2
25761: PUSH
25762: EMPTY
25763: LIST
25764: LIST
25765: PUSH
25766: LD_INT 2
25768: NEG
25769: PUSH
25770: LD_INT 1
25772: PUSH
25773: EMPTY
25774: LIST
25775: LIST
25776: PUSH
25777: LD_INT 3
25779: NEG
25780: PUSH
25781: LD_INT 0
25783: PUSH
25784: EMPTY
25785: LIST
25786: LIST
25787: PUSH
25788: LD_INT 3
25790: NEG
25791: PUSH
25792: LD_INT 1
25794: NEG
25795: PUSH
25796: EMPTY
25797: LIST
25798: LIST
25799: PUSH
25800: EMPTY
25801: LIST
25802: LIST
25803: LIST
25804: LIST
25805: LIST
25806: LIST
25807: LIST
25808: LIST
25809: LIST
25810: LIST
25811: LIST
25812: LIST
25813: LIST
25814: LIST
25815: LIST
25816: LIST
25817: LIST
25818: LIST
25819: LIST
25820: LIST
25821: LIST
25822: LIST
25823: LIST
25824: LIST
25825: LIST
25826: LIST
25827: LIST
25828: LIST
25829: LIST
25830: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25831: LD_ADDR_VAR 0 47
25835: PUSH
25836: LD_INT 0
25838: PUSH
25839: LD_INT 0
25841: PUSH
25842: EMPTY
25843: LIST
25844: LIST
25845: PUSH
25846: LD_INT 0
25848: PUSH
25849: LD_INT 1
25851: NEG
25852: PUSH
25853: EMPTY
25854: LIST
25855: LIST
25856: PUSH
25857: LD_INT 1
25859: PUSH
25860: LD_INT 0
25862: PUSH
25863: EMPTY
25864: LIST
25865: LIST
25866: PUSH
25867: LD_INT 1
25869: PUSH
25870: LD_INT 1
25872: PUSH
25873: EMPTY
25874: LIST
25875: LIST
25876: PUSH
25877: LD_INT 0
25879: PUSH
25880: LD_INT 1
25882: PUSH
25883: EMPTY
25884: LIST
25885: LIST
25886: PUSH
25887: LD_INT 1
25889: NEG
25890: PUSH
25891: LD_INT 0
25893: PUSH
25894: EMPTY
25895: LIST
25896: LIST
25897: PUSH
25898: LD_INT 1
25900: NEG
25901: PUSH
25902: LD_INT 1
25904: NEG
25905: PUSH
25906: EMPTY
25907: LIST
25908: LIST
25909: PUSH
25910: LD_INT 1
25912: NEG
25913: PUSH
25914: LD_INT 2
25916: NEG
25917: PUSH
25918: EMPTY
25919: LIST
25920: LIST
25921: PUSH
25922: LD_INT 0
25924: PUSH
25925: LD_INT 2
25927: NEG
25928: PUSH
25929: EMPTY
25930: LIST
25931: LIST
25932: PUSH
25933: LD_INT 1
25935: PUSH
25936: LD_INT 1
25938: NEG
25939: PUSH
25940: EMPTY
25941: LIST
25942: LIST
25943: PUSH
25944: LD_INT 2
25946: NEG
25947: PUSH
25948: LD_INT 1
25950: NEG
25951: PUSH
25952: EMPTY
25953: LIST
25954: LIST
25955: PUSH
25956: LD_INT 2
25958: NEG
25959: PUSH
25960: LD_INT 2
25962: NEG
25963: PUSH
25964: EMPTY
25965: LIST
25966: LIST
25967: PUSH
25968: EMPTY
25969: LIST
25970: LIST
25971: LIST
25972: LIST
25973: LIST
25974: LIST
25975: LIST
25976: LIST
25977: LIST
25978: LIST
25979: LIST
25980: LIST
25981: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
25982: LD_ADDR_VAR 0 48
25986: PUSH
25987: LD_INT 0
25989: PUSH
25990: LD_INT 0
25992: PUSH
25993: EMPTY
25994: LIST
25995: LIST
25996: PUSH
25997: LD_INT 0
25999: PUSH
26000: LD_INT 1
26002: NEG
26003: PUSH
26004: EMPTY
26005: LIST
26006: LIST
26007: PUSH
26008: LD_INT 1
26010: PUSH
26011: LD_INT 0
26013: PUSH
26014: EMPTY
26015: LIST
26016: LIST
26017: PUSH
26018: LD_INT 1
26020: PUSH
26021: LD_INT 1
26023: PUSH
26024: EMPTY
26025: LIST
26026: LIST
26027: PUSH
26028: LD_INT 0
26030: PUSH
26031: LD_INT 1
26033: PUSH
26034: EMPTY
26035: LIST
26036: LIST
26037: PUSH
26038: LD_INT 1
26040: NEG
26041: PUSH
26042: LD_INT 0
26044: PUSH
26045: EMPTY
26046: LIST
26047: LIST
26048: PUSH
26049: LD_INT 1
26051: NEG
26052: PUSH
26053: LD_INT 1
26055: NEG
26056: PUSH
26057: EMPTY
26058: LIST
26059: LIST
26060: PUSH
26061: LD_INT 1
26063: NEG
26064: PUSH
26065: LD_INT 2
26067: NEG
26068: PUSH
26069: EMPTY
26070: LIST
26071: LIST
26072: PUSH
26073: LD_INT 0
26075: PUSH
26076: LD_INT 2
26078: NEG
26079: PUSH
26080: EMPTY
26081: LIST
26082: LIST
26083: PUSH
26084: LD_INT 1
26086: PUSH
26087: LD_INT 1
26089: NEG
26090: PUSH
26091: EMPTY
26092: LIST
26093: LIST
26094: PUSH
26095: LD_INT 2
26097: PUSH
26098: LD_INT 0
26100: PUSH
26101: EMPTY
26102: LIST
26103: LIST
26104: PUSH
26105: LD_INT 2
26107: PUSH
26108: LD_INT 1
26110: PUSH
26111: EMPTY
26112: LIST
26113: LIST
26114: PUSH
26115: EMPTY
26116: LIST
26117: LIST
26118: LIST
26119: LIST
26120: LIST
26121: LIST
26122: LIST
26123: LIST
26124: LIST
26125: LIST
26126: LIST
26127: LIST
26128: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
26129: LD_ADDR_VAR 0 49
26133: PUSH
26134: LD_INT 0
26136: PUSH
26137: LD_INT 0
26139: PUSH
26140: EMPTY
26141: LIST
26142: LIST
26143: PUSH
26144: LD_INT 0
26146: PUSH
26147: LD_INT 1
26149: NEG
26150: PUSH
26151: EMPTY
26152: LIST
26153: LIST
26154: PUSH
26155: LD_INT 1
26157: PUSH
26158: LD_INT 0
26160: PUSH
26161: EMPTY
26162: LIST
26163: LIST
26164: PUSH
26165: LD_INT 1
26167: PUSH
26168: LD_INT 1
26170: PUSH
26171: EMPTY
26172: LIST
26173: LIST
26174: PUSH
26175: LD_INT 0
26177: PUSH
26178: LD_INT 1
26180: PUSH
26181: EMPTY
26182: LIST
26183: LIST
26184: PUSH
26185: LD_INT 1
26187: NEG
26188: PUSH
26189: LD_INT 0
26191: PUSH
26192: EMPTY
26193: LIST
26194: LIST
26195: PUSH
26196: LD_INT 1
26198: NEG
26199: PUSH
26200: LD_INT 1
26202: NEG
26203: PUSH
26204: EMPTY
26205: LIST
26206: LIST
26207: PUSH
26208: LD_INT 1
26210: PUSH
26211: LD_INT 1
26213: NEG
26214: PUSH
26215: EMPTY
26216: LIST
26217: LIST
26218: PUSH
26219: LD_INT 2
26221: PUSH
26222: LD_INT 0
26224: PUSH
26225: EMPTY
26226: LIST
26227: LIST
26228: PUSH
26229: LD_INT 2
26231: PUSH
26232: LD_INT 1
26234: PUSH
26235: EMPTY
26236: LIST
26237: LIST
26238: PUSH
26239: LD_INT 2
26241: PUSH
26242: LD_INT 2
26244: PUSH
26245: EMPTY
26246: LIST
26247: LIST
26248: PUSH
26249: LD_INT 1
26251: PUSH
26252: LD_INT 2
26254: PUSH
26255: EMPTY
26256: LIST
26257: LIST
26258: PUSH
26259: EMPTY
26260: LIST
26261: LIST
26262: LIST
26263: LIST
26264: LIST
26265: LIST
26266: LIST
26267: LIST
26268: LIST
26269: LIST
26270: LIST
26271: LIST
26272: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
26273: LD_ADDR_VAR 0 50
26277: PUSH
26278: LD_INT 0
26280: PUSH
26281: LD_INT 0
26283: PUSH
26284: EMPTY
26285: LIST
26286: LIST
26287: PUSH
26288: LD_INT 0
26290: PUSH
26291: LD_INT 1
26293: NEG
26294: PUSH
26295: EMPTY
26296: LIST
26297: LIST
26298: PUSH
26299: LD_INT 1
26301: PUSH
26302: LD_INT 0
26304: PUSH
26305: EMPTY
26306: LIST
26307: LIST
26308: PUSH
26309: LD_INT 1
26311: PUSH
26312: LD_INT 1
26314: PUSH
26315: EMPTY
26316: LIST
26317: LIST
26318: PUSH
26319: LD_INT 0
26321: PUSH
26322: LD_INT 1
26324: PUSH
26325: EMPTY
26326: LIST
26327: LIST
26328: PUSH
26329: LD_INT 1
26331: NEG
26332: PUSH
26333: LD_INT 0
26335: PUSH
26336: EMPTY
26337: LIST
26338: LIST
26339: PUSH
26340: LD_INT 1
26342: NEG
26343: PUSH
26344: LD_INT 1
26346: NEG
26347: PUSH
26348: EMPTY
26349: LIST
26350: LIST
26351: PUSH
26352: LD_INT 2
26354: PUSH
26355: LD_INT 1
26357: PUSH
26358: EMPTY
26359: LIST
26360: LIST
26361: PUSH
26362: LD_INT 2
26364: PUSH
26365: LD_INT 2
26367: PUSH
26368: EMPTY
26369: LIST
26370: LIST
26371: PUSH
26372: LD_INT 1
26374: PUSH
26375: LD_INT 2
26377: PUSH
26378: EMPTY
26379: LIST
26380: LIST
26381: PUSH
26382: LD_INT 0
26384: PUSH
26385: LD_INT 2
26387: PUSH
26388: EMPTY
26389: LIST
26390: LIST
26391: PUSH
26392: LD_INT 1
26394: NEG
26395: PUSH
26396: LD_INT 1
26398: PUSH
26399: EMPTY
26400: LIST
26401: LIST
26402: PUSH
26403: EMPTY
26404: LIST
26405: LIST
26406: LIST
26407: LIST
26408: LIST
26409: LIST
26410: LIST
26411: LIST
26412: LIST
26413: LIST
26414: LIST
26415: LIST
26416: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
26417: LD_ADDR_VAR 0 51
26421: PUSH
26422: LD_INT 0
26424: PUSH
26425: LD_INT 0
26427: PUSH
26428: EMPTY
26429: LIST
26430: LIST
26431: PUSH
26432: LD_INT 0
26434: PUSH
26435: LD_INT 1
26437: NEG
26438: PUSH
26439: EMPTY
26440: LIST
26441: LIST
26442: PUSH
26443: LD_INT 1
26445: PUSH
26446: LD_INT 0
26448: PUSH
26449: EMPTY
26450: LIST
26451: LIST
26452: PUSH
26453: LD_INT 1
26455: PUSH
26456: LD_INT 1
26458: PUSH
26459: EMPTY
26460: LIST
26461: LIST
26462: PUSH
26463: LD_INT 0
26465: PUSH
26466: LD_INT 1
26468: PUSH
26469: EMPTY
26470: LIST
26471: LIST
26472: PUSH
26473: LD_INT 1
26475: NEG
26476: PUSH
26477: LD_INT 0
26479: PUSH
26480: EMPTY
26481: LIST
26482: LIST
26483: PUSH
26484: LD_INT 1
26486: NEG
26487: PUSH
26488: LD_INT 1
26490: NEG
26491: PUSH
26492: EMPTY
26493: LIST
26494: LIST
26495: PUSH
26496: LD_INT 1
26498: PUSH
26499: LD_INT 2
26501: PUSH
26502: EMPTY
26503: LIST
26504: LIST
26505: PUSH
26506: LD_INT 0
26508: PUSH
26509: LD_INT 2
26511: PUSH
26512: EMPTY
26513: LIST
26514: LIST
26515: PUSH
26516: LD_INT 1
26518: NEG
26519: PUSH
26520: LD_INT 1
26522: PUSH
26523: EMPTY
26524: LIST
26525: LIST
26526: PUSH
26527: LD_INT 2
26529: NEG
26530: PUSH
26531: LD_INT 0
26533: PUSH
26534: EMPTY
26535: LIST
26536: LIST
26537: PUSH
26538: LD_INT 2
26540: NEG
26541: PUSH
26542: LD_INT 1
26544: NEG
26545: PUSH
26546: EMPTY
26547: LIST
26548: LIST
26549: PUSH
26550: EMPTY
26551: LIST
26552: LIST
26553: LIST
26554: LIST
26555: LIST
26556: LIST
26557: LIST
26558: LIST
26559: LIST
26560: LIST
26561: LIST
26562: LIST
26563: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26564: LD_ADDR_VAR 0 52
26568: PUSH
26569: LD_INT 0
26571: PUSH
26572: LD_INT 0
26574: PUSH
26575: EMPTY
26576: LIST
26577: LIST
26578: PUSH
26579: LD_INT 0
26581: PUSH
26582: LD_INT 1
26584: NEG
26585: PUSH
26586: EMPTY
26587: LIST
26588: LIST
26589: PUSH
26590: LD_INT 1
26592: PUSH
26593: LD_INT 0
26595: PUSH
26596: EMPTY
26597: LIST
26598: LIST
26599: PUSH
26600: LD_INT 1
26602: PUSH
26603: LD_INT 1
26605: PUSH
26606: EMPTY
26607: LIST
26608: LIST
26609: PUSH
26610: LD_INT 0
26612: PUSH
26613: LD_INT 1
26615: PUSH
26616: EMPTY
26617: LIST
26618: LIST
26619: PUSH
26620: LD_INT 1
26622: NEG
26623: PUSH
26624: LD_INT 0
26626: PUSH
26627: EMPTY
26628: LIST
26629: LIST
26630: PUSH
26631: LD_INT 1
26633: NEG
26634: PUSH
26635: LD_INT 1
26637: NEG
26638: PUSH
26639: EMPTY
26640: LIST
26641: LIST
26642: PUSH
26643: LD_INT 1
26645: NEG
26646: PUSH
26647: LD_INT 2
26649: NEG
26650: PUSH
26651: EMPTY
26652: LIST
26653: LIST
26654: PUSH
26655: LD_INT 1
26657: NEG
26658: PUSH
26659: LD_INT 1
26661: PUSH
26662: EMPTY
26663: LIST
26664: LIST
26665: PUSH
26666: LD_INT 2
26668: NEG
26669: PUSH
26670: LD_INT 0
26672: PUSH
26673: EMPTY
26674: LIST
26675: LIST
26676: PUSH
26677: LD_INT 2
26679: NEG
26680: PUSH
26681: LD_INT 1
26683: NEG
26684: PUSH
26685: EMPTY
26686: LIST
26687: LIST
26688: PUSH
26689: LD_INT 2
26691: NEG
26692: PUSH
26693: LD_INT 2
26695: NEG
26696: PUSH
26697: EMPTY
26698: LIST
26699: LIST
26700: PUSH
26701: EMPTY
26702: LIST
26703: LIST
26704: LIST
26705: LIST
26706: LIST
26707: LIST
26708: LIST
26709: LIST
26710: LIST
26711: LIST
26712: LIST
26713: LIST
26714: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26715: LD_ADDR_VAR 0 53
26719: PUSH
26720: LD_INT 0
26722: PUSH
26723: LD_INT 0
26725: PUSH
26726: EMPTY
26727: LIST
26728: LIST
26729: PUSH
26730: LD_INT 0
26732: PUSH
26733: LD_INT 1
26735: NEG
26736: PUSH
26737: EMPTY
26738: LIST
26739: LIST
26740: PUSH
26741: LD_INT 1
26743: PUSH
26744: LD_INT 0
26746: PUSH
26747: EMPTY
26748: LIST
26749: LIST
26750: PUSH
26751: LD_INT 1
26753: PUSH
26754: LD_INT 1
26756: PUSH
26757: EMPTY
26758: LIST
26759: LIST
26760: PUSH
26761: LD_INT 0
26763: PUSH
26764: LD_INT 1
26766: PUSH
26767: EMPTY
26768: LIST
26769: LIST
26770: PUSH
26771: LD_INT 1
26773: NEG
26774: PUSH
26775: LD_INT 0
26777: PUSH
26778: EMPTY
26779: LIST
26780: LIST
26781: PUSH
26782: LD_INT 1
26784: NEG
26785: PUSH
26786: LD_INT 1
26788: NEG
26789: PUSH
26790: EMPTY
26791: LIST
26792: LIST
26793: PUSH
26794: LD_INT 1
26796: NEG
26797: PUSH
26798: LD_INT 2
26800: NEG
26801: PUSH
26802: EMPTY
26803: LIST
26804: LIST
26805: PUSH
26806: LD_INT 0
26808: PUSH
26809: LD_INT 2
26811: NEG
26812: PUSH
26813: EMPTY
26814: LIST
26815: LIST
26816: PUSH
26817: LD_INT 1
26819: PUSH
26820: LD_INT 1
26822: NEG
26823: PUSH
26824: EMPTY
26825: LIST
26826: LIST
26827: PUSH
26828: LD_INT 2
26830: PUSH
26831: LD_INT 0
26833: PUSH
26834: EMPTY
26835: LIST
26836: LIST
26837: PUSH
26838: LD_INT 2
26840: PUSH
26841: LD_INT 1
26843: PUSH
26844: EMPTY
26845: LIST
26846: LIST
26847: PUSH
26848: LD_INT 2
26850: PUSH
26851: LD_INT 2
26853: PUSH
26854: EMPTY
26855: LIST
26856: LIST
26857: PUSH
26858: LD_INT 1
26860: PUSH
26861: LD_INT 2
26863: PUSH
26864: EMPTY
26865: LIST
26866: LIST
26867: PUSH
26868: LD_INT 0
26870: PUSH
26871: LD_INT 2
26873: PUSH
26874: EMPTY
26875: LIST
26876: LIST
26877: PUSH
26878: LD_INT 1
26880: NEG
26881: PUSH
26882: LD_INT 1
26884: PUSH
26885: EMPTY
26886: LIST
26887: LIST
26888: PUSH
26889: LD_INT 2
26891: NEG
26892: PUSH
26893: LD_INT 0
26895: PUSH
26896: EMPTY
26897: LIST
26898: LIST
26899: PUSH
26900: LD_INT 2
26902: NEG
26903: PUSH
26904: LD_INT 1
26906: NEG
26907: PUSH
26908: EMPTY
26909: LIST
26910: LIST
26911: PUSH
26912: LD_INT 2
26914: NEG
26915: PUSH
26916: LD_INT 2
26918: NEG
26919: PUSH
26920: EMPTY
26921: LIST
26922: LIST
26923: PUSH
26924: EMPTY
26925: LIST
26926: LIST
26927: LIST
26928: LIST
26929: LIST
26930: LIST
26931: LIST
26932: LIST
26933: LIST
26934: LIST
26935: LIST
26936: LIST
26937: LIST
26938: LIST
26939: LIST
26940: LIST
26941: LIST
26942: LIST
26943: LIST
26944: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26945: LD_ADDR_VAR 0 54
26949: PUSH
26950: LD_INT 0
26952: PUSH
26953: LD_INT 0
26955: PUSH
26956: EMPTY
26957: LIST
26958: LIST
26959: PUSH
26960: LD_INT 0
26962: PUSH
26963: LD_INT 1
26965: NEG
26966: PUSH
26967: EMPTY
26968: LIST
26969: LIST
26970: PUSH
26971: LD_INT 1
26973: PUSH
26974: LD_INT 0
26976: PUSH
26977: EMPTY
26978: LIST
26979: LIST
26980: PUSH
26981: LD_INT 1
26983: PUSH
26984: LD_INT 1
26986: PUSH
26987: EMPTY
26988: LIST
26989: LIST
26990: PUSH
26991: LD_INT 0
26993: PUSH
26994: LD_INT 1
26996: PUSH
26997: EMPTY
26998: LIST
26999: LIST
27000: PUSH
27001: LD_INT 1
27003: NEG
27004: PUSH
27005: LD_INT 0
27007: PUSH
27008: EMPTY
27009: LIST
27010: LIST
27011: PUSH
27012: LD_INT 1
27014: NEG
27015: PUSH
27016: LD_INT 1
27018: NEG
27019: PUSH
27020: EMPTY
27021: LIST
27022: LIST
27023: PUSH
27024: LD_INT 1
27026: NEG
27027: PUSH
27028: LD_INT 2
27030: NEG
27031: PUSH
27032: EMPTY
27033: LIST
27034: LIST
27035: PUSH
27036: LD_INT 0
27038: PUSH
27039: LD_INT 2
27041: NEG
27042: PUSH
27043: EMPTY
27044: LIST
27045: LIST
27046: PUSH
27047: LD_INT 1
27049: PUSH
27050: LD_INT 1
27052: NEG
27053: PUSH
27054: EMPTY
27055: LIST
27056: LIST
27057: PUSH
27058: LD_INT 2
27060: PUSH
27061: LD_INT 0
27063: PUSH
27064: EMPTY
27065: LIST
27066: LIST
27067: PUSH
27068: LD_INT 2
27070: PUSH
27071: LD_INT 1
27073: PUSH
27074: EMPTY
27075: LIST
27076: LIST
27077: PUSH
27078: LD_INT 2
27080: PUSH
27081: LD_INT 2
27083: PUSH
27084: EMPTY
27085: LIST
27086: LIST
27087: PUSH
27088: LD_INT 1
27090: PUSH
27091: LD_INT 2
27093: PUSH
27094: EMPTY
27095: LIST
27096: LIST
27097: PUSH
27098: LD_INT 0
27100: PUSH
27101: LD_INT 2
27103: PUSH
27104: EMPTY
27105: LIST
27106: LIST
27107: PUSH
27108: LD_INT 1
27110: NEG
27111: PUSH
27112: LD_INT 1
27114: PUSH
27115: EMPTY
27116: LIST
27117: LIST
27118: PUSH
27119: LD_INT 2
27121: NEG
27122: PUSH
27123: LD_INT 0
27125: PUSH
27126: EMPTY
27127: LIST
27128: LIST
27129: PUSH
27130: LD_INT 2
27132: NEG
27133: PUSH
27134: LD_INT 1
27136: NEG
27137: PUSH
27138: EMPTY
27139: LIST
27140: LIST
27141: PUSH
27142: LD_INT 2
27144: NEG
27145: PUSH
27146: LD_INT 2
27148: NEG
27149: PUSH
27150: EMPTY
27151: LIST
27152: LIST
27153: PUSH
27154: EMPTY
27155: LIST
27156: LIST
27157: LIST
27158: LIST
27159: LIST
27160: LIST
27161: LIST
27162: LIST
27163: LIST
27164: LIST
27165: LIST
27166: LIST
27167: LIST
27168: LIST
27169: LIST
27170: LIST
27171: LIST
27172: LIST
27173: LIST
27174: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27175: LD_ADDR_VAR 0 55
27179: PUSH
27180: LD_INT 0
27182: PUSH
27183: LD_INT 0
27185: PUSH
27186: EMPTY
27187: LIST
27188: LIST
27189: PUSH
27190: LD_INT 0
27192: PUSH
27193: LD_INT 1
27195: NEG
27196: PUSH
27197: EMPTY
27198: LIST
27199: LIST
27200: PUSH
27201: LD_INT 1
27203: PUSH
27204: LD_INT 0
27206: PUSH
27207: EMPTY
27208: LIST
27209: LIST
27210: PUSH
27211: LD_INT 1
27213: PUSH
27214: LD_INT 1
27216: PUSH
27217: EMPTY
27218: LIST
27219: LIST
27220: PUSH
27221: LD_INT 0
27223: PUSH
27224: LD_INT 1
27226: PUSH
27227: EMPTY
27228: LIST
27229: LIST
27230: PUSH
27231: LD_INT 1
27233: NEG
27234: PUSH
27235: LD_INT 0
27237: PUSH
27238: EMPTY
27239: LIST
27240: LIST
27241: PUSH
27242: LD_INT 1
27244: NEG
27245: PUSH
27246: LD_INT 1
27248: NEG
27249: PUSH
27250: EMPTY
27251: LIST
27252: LIST
27253: PUSH
27254: LD_INT 1
27256: NEG
27257: PUSH
27258: LD_INT 2
27260: NEG
27261: PUSH
27262: EMPTY
27263: LIST
27264: LIST
27265: PUSH
27266: LD_INT 0
27268: PUSH
27269: LD_INT 2
27271: NEG
27272: PUSH
27273: EMPTY
27274: LIST
27275: LIST
27276: PUSH
27277: LD_INT 1
27279: PUSH
27280: LD_INT 1
27282: NEG
27283: PUSH
27284: EMPTY
27285: LIST
27286: LIST
27287: PUSH
27288: LD_INT 2
27290: PUSH
27291: LD_INT 0
27293: PUSH
27294: EMPTY
27295: LIST
27296: LIST
27297: PUSH
27298: LD_INT 2
27300: PUSH
27301: LD_INT 1
27303: PUSH
27304: EMPTY
27305: LIST
27306: LIST
27307: PUSH
27308: LD_INT 2
27310: PUSH
27311: LD_INT 2
27313: PUSH
27314: EMPTY
27315: LIST
27316: LIST
27317: PUSH
27318: LD_INT 1
27320: PUSH
27321: LD_INT 2
27323: PUSH
27324: EMPTY
27325: LIST
27326: LIST
27327: PUSH
27328: LD_INT 0
27330: PUSH
27331: LD_INT 2
27333: PUSH
27334: EMPTY
27335: LIST
27336: LIST
27337: PUSH
27338: LD_INT 1
27340: NEG
27341: PUSH
27342: LD_INT 1
27344: PUSH
27345: EMPTY
27346: LIST
27347: LIST
27348: PUSH
27349: LD_INT 2
27351: NEG
27352: PUSH
27353: LD_INT 0
27355: PUSH
27356: EMPTY
27357: LIST
27358: LIST
27359: PUSH
27360: LD_INT 2
27362: NEG
27363: PUSH
27364: LD_INT 1
27366: NEG
27367: PUSH
27368: EMPTY
27369: LIST
27370: LIST
27371: PUSH
27372: LD_INT 2
27374: NEG
27375: PUSH
27376: LD_INT 2
27378: NEG
27379: PUSH
27380: EMPTY
27381: LIST
27382: LIST
27383: PUSH
27384: EMPTY
27385: LIST
27386: LIST
27387: LIST
27388: LIST
27389: LIST
27390: LIST
27391: LIST
27392: LIST
27393: LIST
27394: LIST
27395: LIST
27396: LIST
27397: LIST
27398: LIST
27399: LIST
27400: LIST
27401: LIST
27402: LIST
27403: LIST
27404: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27405: LD_ADDR_VAR 0 56
27409: PUSH
27410: LD_INT 0
27412: PUSH
27413: LD_INT 0
27415: PUSH
27416: EMPTY
27417: LIST
27418: LIST
27419: PUSH
27420: LD_INT 0
27422: PUSH
27423: LD_INT 1
27425: NEG
27426: PUSH
27427: EMPTY
27428: LIST
27429: LIST
27430: PUSH
27431: LD_INT 1
27433: PUSH
27434: LD_INT 0
27436: PUSH
27437: EMPTY
27438: LIST
27439: LIST
27440: PUSH
27441: LD_INT 1
27443: PUSH
27444: LD_INT 1
27446: PUSH
27447: EMPTY
27448: LIST
27449: LIST
27450: PUSH
27451: LD_INT 0
27453: PUSH
27454: LD_INT 1
27456: PUSH
27457: EMPTY
27458: LIST
27459: LIST
27460: PUSH
27461: LD_INT 1
27463: NEG
27464: PUSH
27465: LD_INT 0
27467: PUSH
27468: EMPTY
27469: LIST
27470: LIST
27471: PUSH
27472: LD_INT 1
27474: NEG
27475: PUSH
27476: LD_INT 1
27478: NEG
27479: PUSH
27480: EMPTY
27481: LIST
27482: LIST
27483: PUSH
27484: LD_INT 1
27486: NEG
27487: PUSH
27488: LD_INT 2
27490: NEG
27491: PUSH
27492: EMPTY
27493: LIST
27494: LIST
27495: PUSH
27496: LD_INT 0
27498: PUSH
27499: LD_INT 2
27501: NEG
27502: PUSH
27503: EMPTY
27504: LIST
27505: LIST
27506: PUSH
27507: LD_INT 1
27509: PUSH
27510: LD_INT 1
27512: NEG
27513: PUSH
27514: EMPTY
27515: LIST
27516: LIST
27517: PUSH
27518: LD_INT 2
27520: PUSH
27521: LD_INT 0
27523: PUSH
27524: EMPTY
27525: LIST
27526: LIST
27527: PUSH
27528: LD_INT 2
27530: PUSH
27531: LD_INT 1
27533: PUSH
27534: EMPTY
27535: LIST
27536: LIST
27537: PUSH
27538: LD_INT 2
27540: PUSH
27541: LD_INT 2
27543: PUSH
27544: EMPTY
27545: LIST
27546: LIST
27547: PUSH
27548: LD_INT 1
27550: PUSH
27551: LD_INT 2
27553: PUSH
27554: EMPTY
27555: LIST
27556: LIST
27557: PUSH
27558: LD_INT 0
27560: PUSH
27561: LD_INT 2
27563: PUSH
27564: EMPTY
27565: LIST
27566: LIST
27567: PUSH
27568: LD_INT 1
27570: NEG
27571: PUSH
27572: LD_INT 1
27574: PUSH
27575: EMPTY
27576: LIST
27577: LIST
27578: PUSH
27579: LD_INT 2
27581: NEG
27582: PUSH
27583: LD_INT 0
27585: PUSH
27586: EMPTY
27587: LIST
27588: LIST
27589: PUSH
27590: LD_INT 2
27592: NEG
27593: PUSH
27594: LD_INT 1
27596: NEG
27597: PUSH
27598: EMPTY
27599: LIST
27600: LIST
27601: PUSH
27602: LD_INT 2
27604: NEG
27605: PUSH
27606: LD_INT 2
27608: NEG
27609: PUSH
27610: EMPTY
27611: LIST
27612: LIST
27613: PUSH
27614: EMPTY
27615: LIST
27616: LIST
27617: LIST
27618: LIST
27619: LIST
27620: LIST
27621: LIST
27622: LIST
27623: LIST
27624: LIST
27625: LIST
27626: LIST
27627: LIST
27628: LIST
27629: LIST
27630: LIST
27631: LIST
27632: LIST
27633: LIST
27634: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27635: LD_ADDR_VAR 0 57
27639: PUSH
27640: LD_INT 0
27642: PUSH
27643: LD_INT 0
27645: PUSH
27646: EMPTY
27647: LIST
27648: LIST
27649: PUSH
27650: LD_INT 0
27652: PUSH
27653: LD_INT 1
27655: NEG
27656: PUSH
27657: EMPTY
27658: LIST
27659: LIST
27660: PUSH
27661: LD_INT 1
27663: PUSH
27664: LD_INT 0
27666: PUSH
27667: EMPTY
27668: LIST
27669: LIST
27670: PUSH
27671: LD_INT 1
27673: PUSH
27674: LD_INT 1
27676: PUSH
27677: EMPTY
27678: LIST
27679: LIST
27680: PUSH
27681: LD_INT 0
27683: PUSH
27684: LD_INT 1
27686: PUSH
27687: EMPTY
27688: LIST
27689: LIST
27690: PUSH
27691: LD_INT 1
27693: NEG
27694: PUSH
27695: LD_INT 0
27697: PUSH
27698: EMPTY
27699: LIST
27700: LIST
27701: PUSH
27702: LD_INT 1
27704: NEG
27705: PUSH
27706: LD_INT 1
27708: NEG
27709: PUSH
27710: EMPTY
27711: LIST
27712: LIST
27713: PUSH
27714: LD_INT 1
27716: NEG
27717: PUSH
27718: LD_INT 2
27720: NEG
27721: PUSH
27722: EMPTY
27723: LIST
27724: LIST
27725: PUSH
27726: LD_INT 0
27728: PUSH
27729: LD_INT 2
27731: NEG
27732: PUSH
27733: EMPTY
27734: LIST
27735: LIST
27736: PUSH
27737: LD_INT 1
27739: PUSH
27740: LD_INT 1
27742: NEG
27743: PUSH
27744: EMPTY
27745: LIST
27746: LIST
27747: PUSH
27748: LD_INT 2
27750: PUSH
27751: LD_INT 0
27753: PUSH
27754: EMPTY
27755: LIST
27756: LIST
27757: PUSH
27758: LD_INT 2
27760: PUSH
27761: LD_INT 1
27763: PUSH
27764: EMPTY
27765: LIST
27766: LIST
27767: PUSH
27768: LD_INT 2
27770: PUSH
27771: LD_INT 2
27773: PUSH
27774: EMPTY
27775: LIST
27776: LIST
27777: PUSH
27778: LD_INT 1
27780: PUSH
27781: LD_INT 2
27783: PUSH
27784: EMPTY
27785: LIST
27786: LIST
27787: PUSH
27788: LD_INT 0
27790: PUSH
27791: LD_INT 2
27793: PUSH
27794: EMPTY
27795: LIST
27796: LIST
27797: PUSH
27798: LD_INT 1
27800: NEG
27801: PUSH
27802: LD_INT 1
27804: PUSH
27805: EMPTY
27806: LIST
27807: LIST
27808: PUSH
27809: LD_INT 2
27811: NEG
27812: PUSH
27813: LD_INT 0
27815: PUSH
27816: EMPTY
27817: LIST
27818: LIST
27819: PUSH
27820: LD_INT 2
27822: NEG
27823: PUSH
27824: LD_INT 1
27826: NEG
27827: PUSH
27828: EMPTY
27829: LIST
27830: LIST
27831: PUSH
27832: LD_INT 2
27834: NEG
27835: PUSH
27836: LD_INT 2
27838: NEG
27839: PUSH
27840: EMPTY
27841: LIST
27842: LIST
27843: PUSH
27844: EMPTY
27845: LIST
27846: LIST
27847: LIST
27848: LIST
27849: LIST
27850: LIST
27851: LIST
27852: LIST
27853: LIST
27854: LIST
27855: LIST
27856: LIST
27857: LIST
27858: LIST
27859: LIST
27860: LIST
27861: LIST
27862: LIST
27863: LIST
27864: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27865: LD_ADDR_VAR 0 58
27869: PUSH
27870: LD_INT 0
27872: PUSH
27873: LD_INT 0
27875: PUSH
27876: EMPTY
27877: LIST
27878: LIST
27879: PUSH
27880: LD_INT 0
27882: PUSH
27883: LD_INT 1
27885: NEG
27886: PUSH
27887: EMPTY
27888: LIST
27889: LIST
27890: PUSH
27891: LD_INT 1
27893: PUSH
27894: LD_INT 0
27896: PUSH
27897: EMPTY
27898: LIST
27899: LIST
27900: PUSH
27901: LD_INT 1
27903: PUSH
27904: LD_INT 1
27906: PUSH
27907: EMPTY
27908: LIST
27909: LIST
27910: PUSH
27911: LD_INT 0
27913: PUSH
27914: LD_INT 1
27916: PUSH
27917: EMPTY
27918: LIST
27919: LIST
27920: PUSH
27921: LD_INT 1
27923: NEG
27924: PUSH
27925: LD_INT 0
27927: PUSH
27928: EMPTY
27929: LIST
27930: LIST
27931: PUSH
27932: LD_INT 1
27934: NEG
27935: PUSH
27936: LD_INT 1
27938: NEG
27939: PUSH
27940: EMPTY
27941: LIST
27942: LIST
27943: PUSH
27944: LD_INT 1
27946: NEG
27947: PUSH
27948: LD_INT 2
27950: NEG
27951: PUSH
27952: EMPTY
27953: LIST
27954: LIST
27955: PUSH
27956: LD_INT 0
27958: PUSH
27959: LD_INT 2
27961: NEG
27962: PUSH
27963: EMPTY
27964: LIST
27965: LIST
27966: PUSH
27967: LD_INT 1
27969: PUSH
27970: LD_INT 1
27972: NEG
27973: PUSH
27974: EMPTY
27975: LIST
27976: LIST
27977: PUSH
27978: LD_INT 2
27980: PUSH
27981: LD_INT 0
27983: PUSH
27984: EMPTY
27985: LIST
27986: LIST
27987: PUSH
27988: LD_INT 2
27990: PUSH
27991: LD_INT 1
27993: PUSH
27994: EMPTY
27995: LIST
27996: LIST
27997: PUSH
27998: LD_INT 2
28000: PUSH
28001: LD_INT 2
28003: PUSH
28004: EMPTY
28005: LIST
28006: LIST
28007: PUSH
28008: LD_INT 1
28010: PUSH
28011: LD_INT 2
28013: PUSH
28014: EMPTY
28015: LIST
28016: LIST
28017: PUSH
28018: LD_INT 0
28020: PUSH
28021: LD_INT 2
28023: PUSH
28024: EMPTY
28025: LIST
28026: LIST
28027: PUSH
28028: LD_INT 1
28030: NEG
28031: PUSH
28032: LD_INT 1
28034: PUSH
28035: EMPTY
28036: LIST
28037: LIST
28038: PUSH
28039: LD_INT 2
28041: NEG
28042: PUSH
28043: LD_INT 0
28045: PUSH
28046: EMPTY
28047: LIST
28048: LIST
28049: PUSH
28050: LD_INT 2
28052: NEG
28053: PUSH
28054: LD_INT 1
28056: NEG
28057: PUSH
28058: EMPTY
28059: LIST
28060: LIST
28061: PUSH
28062: LD_INT 2
28064: NEG
28065: PUSH
28066: LD_INT 2
28068: NEG
28069: PUSH
28070: EMPTY
28071: LIST
28072: LIST
28073: PUSH
28074: EMPTY
28075: LIST
28076: LIST
28077: LIST
28078: LIST
28079: LIST
28080: LIST
28081: LIST
28082: LIST
28083: LIST
28084: LIST
28085: LIST
28086: LIST
28087: LIST
28088: LIST
28089: LIST
28090: LIST
28091: LIST
28092: LIST
28093: LIST
28094: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28095: LD_ADDR_VAR 0 59
28099: PUSH
28100: LD_INT 0
28102: PUSH
28103: LD_INT 0
28105: PUSH
28106: EMPTY
28107: LIST
28108: LIST
28109: PUSH
28110: LD_INT 0
28112: PUSH
28113: LD_INT 1
28115: NEG
28116: PUSH
28117: EMPTY
28118: LIST
28119: LIST
28120: PUSH
28121: LD_INT 1
28123: PUSH
28124: LD_INT 0
28126: PUSH
28127: EMPTY
28128: LIST
28129: LIST
28130: PUSH
28131: LD_INT 1
28133: PUSH
28134: LD_INT 1
28136: PUSH
28137: EMPTY
28138: LIST
28139: LIST
28140: PUSH
28141: LD_INT 0
28143: PUSH
28144: LD_INT 1
28146: PUSH
28147: EMPTY
28148: LIST
28149: LIST
28150: PUSH
28151: LD_INT 1
28153: NEG
28154: PUSH
28155: LD_INT 0
28157: PUSH
28158: EMPTY
28159: LIST
28160: LIST
28161: PUSH
28162: LD_INT 1
28164: NEG
28165: PUSH
28166: LD_INT 1
28168: NEG
28169: PUSH
28170: EMPTY
28171: LIST
28172: LIST
28173: PUSH
28174: EMPTY
28175: LIST
28176: LIST
28177: LIST
28178: LIST
28179: LIST
28180: LIST
28181: LIST
28182: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28183: LD_ADDR_VAR 0 60
28187: PUSH
28188: LD_INT 0
28190: PUSH
28191: LD_INT 0
28193: PUSH
28194: EMPTY
28195: LIST
28196: LIST
28197: PUSH
28198: LD_INT 0
28200: PUSH
28201: LD_INT 1
28203: NEG
28204: PUSH
28205: EMPTY
28206: LIST
28207: LIST
28208: PUSH
28209: LD_INT 1
28211: PUSH
28212: LD_INT 0
28214: PUSH
28215: EMPTY
28216: LIST
28217: LIST
28218: PUSH
28219: LD_INT 1
28221: PUSH
28222: LD_INT 1
28224: PUSH
28225: EMPTY
28226: LIST
28227: LIST
28228: PUSH
28229: LD_INT 0
28231: PUSH
28232: LD_INT 1
28234: PUSH
28235: EMPTY
28236: LIST
28237: LIST
28238: PUSH
28239: LD_INT 1
28241: NEG
28242: PUSH
28243: LD_INT 0
28245: PUSH
28246: EMPTY
28247: LIST
28248: LIST
28249: PUSH
28250: LD_INT 1
28252: NEG
28253: PUSH
28254: LD_INT 1
28256: NEG
28257: PUSH
28258: EMPTY
28259: LIST
28260: LIST
28261: PUSH
28262: EMPTY
28263: LIST
28264: LIST
28265: LIST
28266: LIST
28267: LIST
28268: LIST
28269: LIST
28270: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28271: LD_ADDR_VAR 0 61
28275: PUSH
28276: LD_INT 0
28278: PUSH
28279: LD_INT 0
28281: PUSH
28282: EMPTY
28283: LIST
28284: LIST
28285: PUSH
28286: LD_INT 0
28288: PUSH
28289: LD_INT 1
28291: NEG
28292: PUSH
28293: EMPTY
28294: LIST
28295: LIST
28296: PUSH
28297: LD_INT 1
28299: PUSH
28300: LD_INT 0
28302: PUSH
28303: EMPTY
28304: LIST
28305: LIST
28306: PUSH
28307: LD_INT 1
28309: PUSH
28310: LD_INT 1
28312: PUSH
28313: EMPTY
28314: LIST
28315: LIST
28316: PUSH
28317: LD_INT 0
28319: PUSH
28320: LD_INT 1
28322: PUSH
28323: EMPTY
28324: LIST
28325: LIST
28326: PUSH
28327: LD_INT 1
28329: NEG
28330: PUSH
28331: LD_INT 0
28333: PUSH
28334: EMPTY
28335: LIST
28336: LIST
28337: PUSH
28338: LD_INT 1
28340: NEG
28341: PUSH
28342: LD_INT 1
28344: NEG
28345: PUSH
28346: EMPTY
28347: LIST
28348: LIST
28349: PUSH
28350: EMPTY
28351: LIST
28352: LIST
28353: LIST
28354: LIST
28355: LIST
28356: LIST
28357: LIST
28358: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28359: LD_ADDR_VAR 0 62
28363: PUSH
28364: LD_INT 0
28366: PUSH
28367: LD_INT 0
28369: PUSH
28370: EMPTY
28371: LIST
28372: LIST
28373: PUSH
28374: LD_INT 0
28376: PUSH
28377: LD_INT 1
28379: NEG
28380: PUSH
28381: EMPTY
28382: LIST
28383: LIST
28384: PUSH
28385: LD_INT 1
28387: PUSH
28388: LD_INT 0
28390: PUSH
28391: EMPTY
28392: LIST
28393: LIST
28394: PUSH
28395: LD_INT 1
28397: PUSH
28398: LD_INT 1
28400: PUSH
28401: EMPTY
28402: LIST
28403: LIST
28404: PUSH
28405: LD_INT 0
28407: PUSH
28408: LD_INT 1
28410: PUSH
28411: EMPTY
28412: LIST
28413: LIST
28414: PUSH
28415: LD_INT 1
28417: NEG
28418: PUSH
28419: LD_INT 0
28421: PUSH
28422: EMPTY
28423: LIST
28424: LIST
28425: PUSH
28426: LD_INT 1
28428: NEG
28429: PUSH
28430: LD_INT 1
28432: NEG
28433: PUSH
28434: EMPTY
28435: LIST
28436: LIST
28437: PUSH
28438: EMPTY
28439: LIST
28440: LIST
28441: LIST
28442: LIST
28443: LIST
28444: LIST
28445: LIST
28446: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28447: LD_ADDR_VAR 0 63
28451: PUSH
28452: LD_INT 0
28454: PUSH
28455: LD_INT 0
28457: PUSH
28458: EMPTY
28459: LIST
28460: LIST
28461: PUSH
28462: LD_INT 0
28464: PUSH
28465: LD_INT 1
28467: NEG
28468: PUSH
28469: EMPTY
28470: LIST
28471: LIST
28472: PUSH
28473: LD_INT 1
28475: PUSH
28476: LD_INT 0
28478: PUSH
28479: EMPTY
28480: LIST
28481: LIST
28482: PUSH
28483: LD_INT 1
28485: PUSH
28486: LD_INT 1
28488: PUSH
28489: EMPTY
28490: LIST
28491: LIST
28492: PUSH
28493: LD_INT 0
28495: PUSH
28496: LD_INT 1
28498: PUSH
28499: EMPTY
28500: LIST
28501: LIST
28502: PUSH
28503: LD_INT 1
28505: NEG
28506: PUSH
28507: LD_INT 0
28509: PUSH
28510: EMPTY
28511: LIST
28512: LIST
28513: PUSH
28514: LD_INT 1
28516: NEG
28517: PUSH
28518: LD_INT 1
28520: NEG
28521: PUSH
28522: EMPTY
28523: LIST
28524: LIST
28525: PUSH
28526: EMPTY
28527: LIST
28528: LIST
28529: LIST
28530: LIST
28531: LIST
28532: LIST
28533: LIST
28534: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28535: LD_ADDR_VAR 0 64
28539: PUSH
28540: LD_INT 0
28542: PUSH
28543: LD_INT 0
28545: PUSH
28546: EMPTY
28547: LIST
28548: LIST
28549: PUSH
28550: LD_INT 0
28552: PUSH
28553: LD_INT 1
28555: NEG
28556: PUSH
28557: EMPTY
28558: LIST
28559: LIST
28560: PUSH
28561: LD_INT 1
28563: PUSH
28564: LD_INT 0
28566: PUSH
28567: EMPTY
28568: LIST
28569: LIST
28570: PUSH
28571: LD_INT 1
28573: PUSH
28574: LD_INT 1
28576: PUSH
28577: EMPTY
28578: LIST
28579: LIST
28580: PUSH
28581: LD_INT 0
28583: PUSH
28584: LD_INT 1
28586: PUSH
28587: EMPTY
28588: LIST
28589: LIST
28590: PUSH
28591: LD_INT 1
28593: NEG
28594: PUSH
28595: LD_INT 0
28597: PUSH
28598: EMPTY
28599: LIST
28600: LIST
28601: PUSH
28602: LD_INT 1
28604: NEG
28605: PUSH
28606: LD_INT 1
28608: NEG
28609: PUSH
28610: EMPTY
28611: LIST
28612: LIST
28613: PUSH
28614: EMPTY
28615: LIST
28616: LIST
28617: LIST
28618: LIST
28619: LIST
28620: LIST
28621: LIST
28622: ST_TO_ADDR
// end ; 1 :
28623: GO 34520
28625: LD_INT 1
28627: DOUBLE
28628: EQUAL
28629: IFTRUE 28633
28631: GO 31256
28633: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28634: LD_ADDR_VAR 0 11
28638: PUSH
28639: LD_INT 1
28641: NEG
28642: PUSH
28643: LD_INT 3
28645: NEG
28646: PUSH
28647: EMPTY
28648: LIST
28649: LIST
28650: PUSH
28651: LD_INT 0
28653: PUSH
28654: LD_INT 3
28656: NEG
28657: PUSH
28658: EMPTY
28659: LIST
28660: LIST
28661: PUSH
28662: LD_INT 1
28664: PUSH
28665: LD_INT 2
28667: NEG
28668: PUSH
28669: EMPTY
28670: LIST
28671: LIST
28672: PUSH
28673: EMPTY
28674: LIST
28675: LIST
28676: LIST
28677: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28678: LD_ADDR_VAR 0 12
28682: PUSH
28683: LD_INT 2
28685: PUSH
28686: LD_INT 1
28688: NEG
28689: PUSH
28690: EMPTY
28691: LIST
28692: LIST
28693: PUSH
28694: LD_INT 3
28696: PUSH
28697: LD_INT 0
28699: PUSH
28700: EMPTY
28701: LIST
28702: LIST
28703: PUSH
28704: LD_INT 3
28706: PUSH
28707: LD_INT 1
28709: PUSH
28710: EMPTY
28711: LIST
28712: LIST
28713: PUSH
28714: EMPTY
28715: LIST
28716: LIST
28717: LIST
28718: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28719: LD_ADDR_VAR 0 13
28723: PUSH
28724: LD_INT 3
28726: PUSH
28727: LD_INT 2
28729: PUSH
28730: EMPTY
28731: LIST
28732: LIST
28733: PUSH
28734: LD_INT 3
28736: PUSH
28737: LD_INT 3
28739: PUSH
28740: EMPTY
28741: LIST
28742: LIST
28743: PUSH
28744: LD_INT 2
28746: PUSH
28747: LD_INT 3
28749: PUSH
28750: EMPTY
28751: LIST
28752: LIST
28753: PUSH
28754: EMPTY
28755: LIST
28756: LIST
28757: LIST
28758: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
28759: LD_ADDR_VAR 0 14
28763: PUSH
28764: LD_INT 1
28766: PUSH
28767: LD_INT 3
28769: PUSH
28770: EMPTY
28771: LIST
28772: LIST
28773: PUSH
28774: LD_INT 0
28776: PUSH
28777: LD_INT 3
28779: PUSH
28780: EMPTY
28781: LIST
28782: LIST
28783: PUSH
28784: LD_INT 1
28786: NEG
28787: PUSH
28788: LD_INT 2
28790: PUSH
28791: EMPTY
28792: LIST
28793: LIST
28794: PUSH
28795: EMPTY
28796: LIST
28797: LIST
28798: LIST
28799: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28800: LD_ADDR_VAR 0 15
28804: PUSH
28805: LD_INT 2
28807: NEG
28808: PUSH
28809: LD_INT 1
28811: PUSH
28812: EMPTY
28813: LIST
28814: LIST
28815: PUSH
28816: LD_INT 3
28818: NEG
28819: PUSH
28820: LD_INT 0
28822: PUSH
28823: EMPTY
28824: LIST
28825: LIST
28826: PUSH
28827: LD_INT 3
28829: NEG
28830: PUSH
28831: LD_INT 1
28833: NEG
28834: PUSH
28835: EMPTY
28836: LIST
28837: LIST
28838: PUSH
28839: EMPTY
28840: LIST
28841: LIST
28842: LIST
28843: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28844: LD_ADDR_VAR 0 16
28848: PUSH
28849: LD_INT 2
28851: NEG
28852: PUSH
28853: LD_INT 3
28855: NEG
28856: PUSH
28857: EMPTY
28858: LIST
28859: LIST
28860: PUSH
28861: LD_INT 3
28863: NEG
28864: PUSH
28865: LD_INT 2
28867: NEG
28868: PUSH
28869: EMPTY
28870: LIST
28871: LIST
28872: PUSH
28873: LD_INT 3
28875: NEG
28876: PUSH
28877: LD_INT 3
28879: NEG
28880: PUSH
28881: EMPTY
28882: LIST
28883: LIST
28884: PUSH
28885: EMPTY
28886: LIST
28887: LIST
28888: LIST
28889: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28890: LD_ADDR_VAR 0 17
28894: PUSH
28895: LD_INT 1
28897: NEG
28898: PUSH
28899: LD_INT 3
28901: NEG
28902: PUSH
28903: EMPTY
28904: LIST
28905: LIST
28906: PUSH
28907: LD_INT 0
28909: PUSH
28910: LD_INT 3
28912: NEG
28913: PUSH
28914: EMPTY
28915: LIST
28916: LIST
28917: PUSH
28918: LD_INT 1
28920: PUSH
28921: LD_INT 2
28923: NEG
28924: PUSH
28925: EMPTY
28926: LIST
28927: LIST
28928: PUSH
28929: EMPTY
28930: LIST
28931: LIST
28932: LIST
28933: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28934: LD_ADDR_VAR 0 18
28938: PUSH
28939: LD_INT 2
28941: PUSH
28942: LD_INT 1
28944: NEG
28945: PUSH
28946: EMPTY
28947: LIST
28948: LIST
28949: PUSH
28950: LD_INT 3
28952: PUSH
28953: LD_INT 0
28955: PUSH
28956: EMPTY
28957: LIST
28958: LIST
28959: PUSH
28960: LD_INT 3
28962: PUSH
28963: LD_INT 1
28965: PUSH
28966: EMPTY
28967: LIST
28968: LIST
28969: PUSH
28970: EMPTY
28971: LIST
28972: LIST
28973: LIST
28974: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28975: LD_ADDR_VAR 0 19
28979: PUSH
28980: LD_INT 3
28982: PUSH
28983: LD_INT 2
28985: PUSH
28986: EMPTY
28987: LIST
28988: LIST
28989: PUSH
28990: LD_INT 3
28992: PUSH
28993: LD_INT 3
28995: PUSH
28996: EMPTY
28997: LIST
28998: LIST
28999: PUSH
29000: LD_INT 2
29002: PUSH
29003: LD_INT 3
29005: PUSH
29006: EMPTY
29007: LIST
29008: LIST
29009: PUSH
29010: EMPTY
29011: LIST
29012: LIST
29013: LIST
29014: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29015: LD_ADDR_VAR 0 20
29019: PUSH
29020: LD_INT 1
29022: PUSH
29023: LD_INT 3
29025: PUSH
29026: EMPTY
29027: LIST
29028: LIST
29029: PUSH
29030: LD_INT 0
29032: PUSH
29033: LD_INT 3
29035: PUSH
29036: EMPTY
29037: LIST
29038: LIST
29039: PUSH
29040: LD_INT 1
29042: NEG
29043: PUSH
29044: LD_INT 2
29046: PUSH
29047: EMPTY
29048: LIST
29049: LIST
29050: PUSH
29051: EMPTY
29052: LIST
29053: LIST
29054: LIST
29055: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29056: LD_ADDR_VAR 0 21
29060: PUSH
29061: LD_INT 2
29063: NEG
29064: PUSH
29065: LD_INT 1
29067: PUSH
29068: EMPTY
29069: LIST
29070: LIST
29071: PUSH
29072: LD_INT 3
29074: NEG
29075: PUSH
29076: LD_INT 0
29078: PUSH
29079: EMPTY
29080: LIST
29081: LIST
29082: PUSH
29083: LD_INT 3
29085: NEG
29086: PUSH
29087: LD_INT 1
29089: NEG
29090: PUSH
29091: EMPTY
29092: LIST
29093: LIST
29094: PUSH
29095: EMPTY
29096: LIST
29097: LIST
29098: LIST
29099: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29100: LD_ADDR_VAR 0 22
29104: PUSH
29105: LD_INT 2
29107: NEG
29108: PUSH
29109: LD_INT 3
29111: NEG
29112: PUSH
29113: EMPTY
29114: LIST
29115: LIST
29116: PUSH
29117: LD_INT 3
29119: NEG
29120: PUSH
29121: LD_INT 2
29123: NEG
29124: PUSH
29125: EMPTY
29126: LIST
29127: LIST
29128: PUSH
29129: LD_INT 3
29131: NEG
29132: PUSH
29133: LD_INT 3
29135: NEG
29136: PUSH
29137: EMPTY
29138: LIST
29139: LIST
29140: PUSH
29141: EMPTY
29142: LIST
29143: LIST
29144: LIST
29145: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
29146: LD_ADDR_VAR 0 23
29150: PUSH
29151: LD_INT 0
29153: PUSH
29154: LD_INT 3
29156: NEG
29157: PUSH
29158: EMPTY
29159: LIST
29160: LIST
29161: PUSH
29162: LD_INT 1
29164: NEG
29165: PUSH
29166: LD_INT 4
29168: NEG
29169: PUSH
29170: EMPTY
29171: LIST
29172: LIST
29173: PUSH
29174: LD_INT 1
29176: PUSH
29177: LD_INT 3
29179: NEG
29180: PUSH
29181: EMPTY
29182: LIST
29183: LIST
29184: PUSH
29185: EMPTY
29186: LIST
29187: LIST
29188: LIST
29189: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
29190: LD_ADDR_VAR 0 24
29194: PUSH
29195: LD_INT 3
29197: PUSH
29198: LD_INT 0
29200: PUSH
29201: EMPTY
29202: LIST
29203: LIST
29204: PUSH
29205: LD_INT 3
29207: PUSH
29208: LD_INT 1
29210: NEG
29211: PUSH
29212: EMPTY
29213: LIST
29214: LIST
29215: PUSH
29216: LD_INT 4
29218: PUSH
29219: LD_INT 1
29221: PUSH
29222: EMPTY
29223: LIST
29224: LIST
29225: PUSH
29226: EMPTY
29227: LIST
29228: LIST
29229: LIST
29230: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
29231: LD_ADDR_VAR 0 25
29235: PUSH
29236: LD_INT 3
29238: PUSH
29239: LD_INT 3
29241: PUSH
29242: EMPTY
29243: LIST
29244: LIST
29245: PUSH
29246: LD_INT 4
29248: PUSH
29249: LD_INT 3
29251: PUSH
29252: EMPTY
29253: LIST
29254: LIST
29255: PUSH
29256: LD_INT 3
29258: PUSH
29259: LD_INT 4
29261: PUSH
29262: EMPTY
29263: LIST
29264: LIST
29265: PUSH
29266: EMPTY
29267: LIST
29268: LIST
29269: LIST
29270: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
29271: LD_ADDR_VAR 0 26
29275: PUSH
29276: LD_INT 0
29278: PUSH
29279: LD_INT 3
29281: PUSH
29282: EMPTY
29283: LIST
29284: LIST
29285: PUSH
29286: LD_INT 1
29288: PUSH
29289: LD_INT 4
29291: PUSH
29292: EMPTY
29293: LIST
29294: LIST
29295: PUSH
29296: LD_INT 1
29298: NEG
29299: PUSH
29300: LD_INT 3
29302: PUSH
29303: EMPTY
29304: LIST
29305: LIST
29306: PUSH
29307: EMPTY
29308: LIST
29309: LIST
29310: LIST
29311: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
29312: LD_ADDR_VAR 0 27
29316: PUSH
29317: LD_INT 3
29319: NEG
29320: PUSH
29321: LD_INT 0
29323: PUSH
29324: EMPTY
29325: LIST
29326: LIST
29327: PUSH
29328: LD_INT 3
29330: NEG
29331: PUSH
29332: LD_INT 1
29334: PUSH
29335: EMPTY
29336: LIST
29337: LIST
29338: PUSH
29339: LD_INT 4
29341: NEG
29342: PUSH
29343: LD_INT 1
29345: NEG
29346: PUSH
29347: EMPTY
29348: LIST
29349: LIST
29350: PUSH
29351: EMPTY
29352: LIST
29353: LIST
29354: LIST
29355: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
29356: LD_ADDR_VAR 0 28
29360: PUSH
29361: LD_INT 3
29363: NEG
29364: PUSH
29365: LD_INT 3
29367: NEG
29368: PUSH
29369: EMPTY
29370: LIST
29371: LIST
29372: PUSH
29373: LD_INT 3
29375: NEG
29376: PUSH
29377: LD_INT 4
29379: NEG
29380: PUSH
29381: EMPTY
29382: LIST
29383: LIST
29384: PUSH
29385: LD_INT 4
29387: NEG
29388: PUSH
29389: LD_INT 3
29391: NEG
29392: PUSH
29393: EMPTY
29394: LIST
29395: LIST
29396: PUSH
29397: EMPTY
29398: LIST
29399: LIST
29400: LIST
29401: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
29402: LD_ADDR_VAR 0 29
29406: PUSH
29407: LD_INT 1
29409: NEG
29410: PUSH
29411: LD_INT 3
29413: NEG
29414: PUSH
29415: EMPTY
29416: LIST
29417: LIST
29418: PUSH
29419: LD_INT 0
29421: PUSH
29422: LD_INT 3
29424: NEG
29425: PUSH
29426: EMPTY
29427: LIST
29428: LIST
29429: PUSH
29430: LD_INT 1
29432: PUSH
29433: LD_INT 2
29435: NEG
29436: PUSH
29437: EMPTY
29438: LIST
29439: LIST
29440: PUSH
29441: LD_INT 1
29443: NEG
29444: PUSH
29445: LD_INT 4
29447: NEG
29448: PUSH
29449: EMPTY
29450: LIST
29451: LIST
29452: PUSH
29453: LD_INT 0
29455: PUSH
29456: LD_INT 4
29458: NEG
29459: PUSH
29460: EMPTY
29461: LIST
29462: LIST
29463: PUSH
29464: LD_INT 1
29466: PUSH
29467: LD_INT 3
29469: NEG
29470: PUSH
29471: EMPTY
29472: LIST
29473: LIST
29474: PUSH
29475: LD_INT 1
29477: NEG
29478: PUSH
29479: LD_INT 5
29481: NEG
29482: PUSH
29483: EMPTY
29484: LIST
29485: LIST
29486: PUSH
29487: LD_INT 0
29489: PUSH
29490: LD_INT 5
29492: NEG
29493: PUSH
29494: EMPTY
29495: LIST
29496: LIST
29497: PUSH
29498: LD_INT 1
29500: PUSH
29501: LD_INT 4
29503: NEG
29504: PUSH
29505: EMPTY
29506: LIST
29507: LIST
29508: PUSH
29509: LD_INT 1
29511: NEG
29512: PUSH
29513: LD_INT 6
29515: NEG
29516: PUSH
29517: EMPTY
29518: LIST
29519: LIST
29520: PUSH
29521: LD_INT 0
29523: PUSH
29524: LD_INT 6
29526: NEG
29527: PUSH
29528: EMPTY
29529: LIST
29530: LIST
29531: PUSH
29532: LD_INT 1
29534: PUSH
29535: LD_INT 5
29537: NEG
29538: PUSH
29539: EMPTY
29540: LIST
29541: LIST
29542: PUSH
29543: EMPTY
29544: LIST
29545: LIST
29546: LIST
29547: LIST
29548: LIST
29549: LIST
29550: LIST
29551: LIST
29552: LIST
29553: LIST
29554: LIST
29555: LIST
29556: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
29557: LD_ADDR_VAR 0 30
29561: PUSH
29562: LD_INT 2
29564: PUSH
29565: LD_INT 1
29567: NEG
29568: PUSH
29569: EMPTY
29570: LIST
29571: LIST
29572: PUSH
29573: LD_INT 3
29575: PUSH
29576: LD_INT 0
29578: PUSH
29579: EMPTY
29580: LIST
29581: LIST
29582: PUSH
29583: LD_INT 3
29585: PUSH
29586: LD_INT 1
29588: PUSH
29589: EMPTY
29590: LIST
29591: LIST
29592: PUSH
29593: LD_INT 3
29595: PUSH
29596: LD_INT 1
29598: NEG
29599: PUSH
29600: EMPTY
29601: LIST
29602: LIST
29603: PUSH
29604: LD_INT 4
29606: PUSH
29607: LD_INT 0
29609: PUSH
29610: EMPTY
29611: LIST
29612: LIST
29613: PUSH
29614: LD_INT 4
29616: PUSH
29617: LD_INT 1
29619: PUSH
29620: EMPTY
29621: LIST
29622: LIST
29623: PUSH
29624: LD_INT 4
29626: PUSH
29627: LD_INT 1
29629: NEG
29630: PUSH
29631: EMPTY
29632: LIST
29633: LIST
29634: PUSH
29635: LD_INT 5
29637: PUSH
29638: LD_INT 0
29640: PUSH
29641: EMPTY
29642: LIST
29643: LIST
29644: PUSH
29645: LD_INT 5
29647: PUSH
29648: LD_INT 1
29650: PUSH
29651: EMPTY
29652: LIST
29653: LIST
29654: PUSH
29655: LD_INT 5
29657: PUSH
29658: LD_INT 1
29660: NEG
29661: PUSH
29662: EMPTY
29663: LIST
29664: LIST
29665: PUSH
29666: LD_INT 6
29668: PUSH
29669: LD_INT 0
29671: PUSH
29672: EMPTY
29673: LIST
29674: LIST
29675: PUSH
29676: LD_INT 6
29678: PUSH
29679: LD_INT 1
29681: PUSH
29682: EMPTY
29683: LIST
29684: LIST
29685: PUSH
29686: EMPTY
29687: LIST
29688: LIST
29689: LIST
29690: LIST
29691: LIST
29692: LIST
29693: LIST
29694: LIST
29695: LIST
29696: LIST
29697: LIST
29698: LIST
29699: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
29700: LD_ADDR_VAR 0 31
29704: PUSH
29705: LD_INT 3
29707: PUSH
29708: LD_INT 2
29710: PUSH
29711: EMPTY
29712: LIST
29713: LIST
29714: PUSH
29715: LD_INT 3
29717: PUSH
29718: LD_INT 3
29720: PUSH
29721: EMPTY
29722: LIST
29723: LIST
29724: PUSH
29725: LD_INT 2
29727: PUSH
29728: LD_INT 3
29730: PUSH
29731: EMPTY
29732: LIST
29733: LIST
29734: PUSH
29735: LD_INT 4
29737: PUSH
29738: LD_INT 3
29740: PUSH
29741: EMPTY
29742: LIST
29743: LIST
29744: PUSH
29745: LD_INT 4
29747: PUSH
29748: LD_INT 4
29750: PUSH
29751: EMPTY
29752: LIST
29753: LIST
29754: PUSH
29755: LD_INT 3
29757: PUSH
29758: LD_INT 4
29760: PUSH
29761: EMPTY
29762: LIST
29763: LIST
29764: PUSH
29765: LD_INT 5
29767: PUSH
29768: LD_INT 4
29770: PUSH
29771: EMPTY
29772: LIST
29773: LIST
29774: PUSH
29775: LD_INT 5
29777: PUSH
29778: LD_INT 5
29780: PUSH
29781: EMPTY
29782: LIST
29783: LIST
29784: PUSH
29785: LD_INT 4
29787: PUSH
29788: LD_INT 5
29790: PUSH
29791: EMPTY
29792: LIST
29793: LIST
29794: PUSH
29795: LD_INT 6
29797: PUSH
29798: LD_INT 5
29800: PUSH
29801: EMPTY
29802: LIST
29803: LIST
29804: PUSH
29805: LD_INT 6
29807: PUSH
29808: LD_INT 6
29810: PUSH
29811: EMPTY
29812: LIST
29813: LIST
29814: PUSH
29815: LD_INT 5
29817: PUSH
29818: LD_INT 6
29820: PUSH
29821: EMPTY
29822: LIST
29823: LIST
29824: PUSH
29825: EMPTY
29826: LIST
29827: LIST
29828: LIST
29829: LIST
29830: LIST
29831: LIST
29832: LIST
29833: LIST
29834: LIST
29835: LIST
29836: LIST
29837: LIST
29838: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
29839: LD_ADDR_VAR 0 32
29843: PUSH
29844: LD_INT 1
29846: PUSH
29847: LD_INT 3
29849: PUSH
29850: EMPTY
29851: LIST
29852: LIST
29853: PUSH
29854: LD_INT 0
29856: PUSH
29857: LD_INT 3
29859: PUSH
29860: EMPTY
29861: LIST
29862: LIST
29863: PUSH
29864: LD_INT 1
29866: NEG
29867: PUSH
29868: LD_INT 2
29870: PUSH
29871: EMPTY
29872: LIST
29873: LIST
29874: PUSH
29875: LD_INT 1
29877: PUSH
29878: LD_INT 4
29880: PUSH
29881: EMPTY
29882: LIST
29883: LIST
29884: PUSH
29885: LD_INT 0
29887: PUSH
29888: LD_INT 4
29890: PUSH
29891: EMPTY
29892: LIST
29893: LIST
29894: PUSH
29895: LD_INT 1
29897: NEG
29898: PUSH
29899: LD_INT 3
29901: PUSH
29902: EMPTY
29903: LIST
29904: LIST
29905: PUSH
29906: LD_INT 1
29908: PUSH
29909: LD_INT 5
29911: PUSH
29912: EMPTY
29913: LIST
29914: LIST
29915: PUSH
29916: LD_INT 0
29918: PUSH
29919: LD_INT 5
29921: PUSH
29922: EMPTY
29923: LIST
29924: LIST
29925: PUSH
29926: LD_INT 1
29928: NEG
29929: PUSH
29930: LD_INT 4
29932: PUSH
29933: EMPTY
29934: LIST
29935: LIST
29936: PUSH
29937: LD_INT 1
29939: PUSH
29940: LD_INT 6
29942: PUSH
29943: EMPTY
29944: LIST
29945: LIST
29946: PUSH
29947: LD_INT 0
29949: PUSH
29950: LD_INT 6
29952: PUSH
29953: EMPTY
29954: LIST
29955: LIST
29956: PUSH
29957: LD_INT 1
29959: NEG
29960: PUSH
29961: LD_INT 5
29963: PUSH
29964: EMPTY
29965: LIST
29966: LIST
29967: PUSH
29968: EMPTY
29969: LIST
29970: LIST
29971: LIST
29972: LIST
29973: LIST
29974: LIST
29975: LIST
29976: LIST
29977: LIST
29978: LIST
29979: LIST
29980: LIST
29981: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
29982: LD_ADDR_VAR 0 33
29986: PUSH
29987: LD_INT 2
29989: NEG
29990: PUSH
29991: LD_INT 1
29993: PUSH
29994: EMPTY
29995: LIST
29996: LIST
29997: PUSH
29998: LD_INT 3
30000: NEG
30001: PUSH
30002: LD_INT 0
30004: PUSH
30005: EMPTY
30006: LIST
30007: LIST
30008: PUSH
30009: LD_INT 3
30011: NEG
30012: PUSH
30013: LD_INT 1
30015: NEG
30016: PUSH
30017: EMPTY
30018: LIST
30019: LIST
30020: PUSH
30021: LD_INT 3
30023: NEG
30024: PUSH
30025: LD_INT 1
30027: PUSH
30028: EMPTY
30029: LIST
30030: LIST
30031: PUSH
30032: LD_INT 4
30034: NEG
30035: PUSH
30036: LD_INT 0
30038: PUSH
30039: EMPTY
30040: LIST
30041: LIST
30042: PUSH
30043: LD_INT 4
30045: NEG
30046: PUSH
30047: LD_INT 1
30049: NEG
30050: PUSH
30051: EMPTY
30052: LIST
30053: LIST
30054: PUSH
30055: LD_INT 4
30057: NEG
30058: PUSH
30059: LD_INT 1
30061: PUSH
30062: EMPTY
30063: LIST
30064: LIST
30065: PUSH
30066: LD_INT 5
30068: NEG
30069: PUSH
30070: LD_INT 0
30072: PUSH
30073: EMPTY
30074: LIST
30075: LIST
30076: PUSH
30077: LD_INT 5
30079: NEG
30080: PUSH
30081: LD_INT 1
30083: NEG
30084: PUSH
30085: EMPTY
30086: LIST
30087: LIST
30088: PUSH
30089: LD_INT 5
30091: NEG
30092: PUSH
30093: LD_INT 1
30095: PUSH
30096: EMPTY
30097: LIST
30098: LIST
30099: PUSH
30100: LD_INT 6
30102: NEG
30103: PUSH
30104: LD_INT 0
30106: PUSH
30107: EMPTY
30108: LIST
30109: LIST
30110: PUSH
30111: LD_INT 6
30113: NEG
30114: PUSH
30115: LD_INT 1
30117: NEG
30118: PUSH
30119: EMPTY
30120: LIST
30121: LIST
30122: PUSH
30123: EMPTY
30124: LIST
30125: LIST
30126: LIST
30127: LIST
30128: LIST
30129: LIST
30130: LIST
30131: LIST
30132: LIST
30133: LIST
30134: LIST
30135: LIST
30136: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
30137: LD_ADDR_VAR 0 34
30141: PUSH
30142: LD_INT 2
30144: NEG
30145: PUSH
30146: LD_INT 3
30148: NEG
30149: PUSH
30150: EMPTY
30151: LIST
30152: LIST
30153: PUSH
30154: LD_INT 3
30156: NEG
30157: PUSH
30158: LD_INT 2
30160: NEG
30161: PUSH
30162: EMPTY
30163: LIST
30164: LIST
30165: PUSH
30166: LD_INT 3
30168: NEG
30169: PUSH
30170: LD_INT 3
30172: NEG
30173: PUSH
30174: EMPTY
30175: LIST
30176: LIST
30177: PUSH
30178: LD_INT 3
30180: NEG
30181: PUSH
30182: LD_INT 4
30184: NEG
30185: PUSH
30186: EMPTY
30187: LIST
30188: LIST
30189: PUSH
30190: LD_INT 4
30192: NEG
30193: PUSH
30194: LD_INT 3
30196: NEG
30197: PUSH
30198: EMPTY
30199: LIST
30200: LIST
30201: PUSH
30202: LD_INT 4
30204: NEG
30205: PUSH
30206: LD_INT 4
30208: NEG
30209: PUSH
30210: EMPTY
30211: LIST
30212: LIST
30213: PUSH
30214: LD_INT 4
30216: NEG
30217: PUSH
30218: LD_INT 5
30220: NEG
30221: PUSH
30222: EMPTY
30223: LIST
30224: LIST
30225: PUSH
30226: LD_INT 5
30228: NEG
30229: PUSH
30230: LD_INT 4
30232: NEG
30233: PUSH
30234: EMPTY
30235: LIST
30236: LIST
30237: PUSH
30238: LD_INT 5
30240: NEG
30241: PUSH
30242: LD_INT 5
30244: NEG
30245: PUSH
30246: EMPTY
30247: LIST
30248: LIST
30249: PUSH
30250: LD_INT 5
30252: NEG
30253: PUSH
30254: LD_INT 6
30256: NEG
30257: PUSH
30258: EMPTY
30259: LIST
30260: LIST
30261: PUSH
30262: LD_INT 6
30264: NEG
30265: PUSH
30266: LD_INT 5
30268: NEG
30269: PUSH
30270: EMPTY
30271: LIST
30272: LIST
30273: PUSH
30274: LD_INT 6
30276: NEG
30277: PUSH
30278: LD_INT 6
30280: NEG
30281: PUSH
30282: EMPTY
30283: LIST
30284: LIST
30285: PUSH
30286: EMPTY
30287: LIST
30288: LIST
30289: LIST
30290: LIST
30291: LIST
30292: LIST
30293: LIST
30294: LIST
30295: LIST
30296: LIST
30297: LIST
30298: LIST
30299: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
30300: LD_ADDR_VAR 0 41
30304: PUSH
30305: LD_INT 0
30307: PUSH
30308: LD_INT 2
30310: NEG
30311: PUSH
30312: EMPTY
30313: LIST
30314: LIST
30315: PUSH
30316: LD_INT 1
30318: NEG
30319: PUSH
30320: LD_INT 3
30322: NEG
30323: PUSH
30324: EMPTY
30325: LIST
30326: LIST
30327: PUSH
30328: LD_INT 1
30330: PUSH
30331: LD_INT 2
30333: NEG
30334: PUSH
30335: EMPTY
30336: LIST
30337: LIST
30338: PUSH
30339: EMPTY
30340: LIST
30341: LIST
30342: LIST
30343: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
30344: LD_ADDR_VAR 0 42
30348: PUSH
30349: LD_INT 2
30351: PUSH
30352: LD_INT 0
30354: PUSH
30355: EMPTY
30356: LIST
30357: LIST
30358: PUSH
30359: LD_INT 2
30361: PUSH
30362: LD_INT 1
30364: NEG
30365: PUSH
30366: EMPTY
30367: LIST
30368: LIST
30369: PUSH
30370: LD_INT 3
30372: PUSH
30373: LD_INT 1
30375: PUSH
30376: EMPTY
30377: LIST
30378: LIST
30379: PUSH
30380: EMPTY
30381: LIST
30382: LIST
30383: LIST
30384: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
30385: LD_ADDR_VAR 0 43
30389: PUSH
30390: LD_INT 2
30392: PUSH
30393: LD_INT 2
30395: PUSH
30396: EMPTY
30397: LIST
30398: LIST
30399: PUSH
30400: LD_INT 3
30402: PUSH
30403: LD_INT 2
30405: PUSH
30406: EMPTY
30407: LIST
30408: LIST
30409: PUSH
30410: LD_INT 2
30412: PUSH
30413: LD_INT 3
30415: PUSH
30416: EMPTY
30417: LIST
30418: LIST
30419: PUSH
30420: EMPTY
30421: LIST
30422: LIST
30423: LIST
30424: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
30425: LD_ADDR_VAR 0 44
30429: PUSH
30430: LD_INT 0
30432: PUSH
30433: LD_INT 2
30435: PUSH
30436: EMPTY
30437: LIST
30438: LIST
30439: PUSH
30440: LD_INT 1
30442: PUSH
30443: LD_INT 3
30445: PUSH
30446: EMPTY
30447: LIST
30448: LIST
30449: PUSH
30450: LD_INT 1
30452: NEG
30453: PUSH
30454: LD_INT 2
30456: PUSH
30457: EMPTY
30458: LIST
30459: LIST
30460: PUSH
30461: EMPTY
30462: LIST
30463: LIST
30464: LIST
30465: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30466: LD_ADDR_VAR 0 45
30470: PUSH
30471: LD_INT 2
30473: NEG
30474: PUSH
30475: LD_INT 0
30477: PUSH
30478: EMPTY
30479: LIST
30480: LIST
30481: PUSH
30482: LD_INT 2
30484: NEG
30485: PUSH
30486: LD_INT 1
30488: PUSH
30489: EMPTY
30490: LIST
30491: LIST
30492: PUSH
30493: LD_INT 3
30495: NEG
30496: PUSH
30497: LD_INT 1
30499: NEG
30500: PUSH
30501: EMPTY
30502: LIST
30503: LIST
30504: PUSH
30505: EMPTY
30506: LIST
30507: LIST
30508: LIST
30509: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
30510: LD_ADDR_VAR 0 46
30514: PUSH
30515: LD_INT 2
30517: NEG
30518: PUSH
30519: LD_INT 2
30521: NEG
30522: PUSH
30523: EMPTY
30524: LIST
30525: LIST
30526: PUSH
30527: LD_INT 2
30529: NEG
30530: PUSH
30531: LD_INT 3
30533: NEG
30534: PUSH
30535: EMPTY
30536: LIST
30537: LIST
30538: PUSH
30539: LD_INT 3
30541: NEG
30542: PUSH
30543: LD_INT 2
30545: NEG
30546: PUSH
30547: EMPTY
30548: LIST
30549: LIST
30550: PUSH
30551: EMPTY
30552: LIST
30553: LIST
30554: LIST
30555: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
30556: LD_ADDR_VAR 0 47
30560: PUSH
30561: LD_INT 2
30563: NEG
30564: PUSH
30565: LD_INT 3
30567: NEG
30568: PUSH
30569: EMPTY
30570: LIST
30571: LIST
30572: PUSH
30573: LD_INT 1
30575: NEG
30576: PUSH
30577: LD_INT 3
30579: NEG
30580: PUSH
30581: EMPTY
30582: LIST
30583: LIST
30584: PUSH
30585: EMPTY
30586: LIST
30587: LIST
30588: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
30589: LD_ADDR_VAR 0 48
30593: PUSH
30594: LD_INT 1
30596: PUSH
30597: LD_INT 2
30599: NEG
30600: PUSH
30601: EMPTY
30602: LIST
30603: LIST
30604: PUSH
30605: LD_INT 2
30607: PUSH
30608: LD_INT 1
30610: NEG
30611: PUSH
30612: EMPTY
30613: LIST
30614: LIST
30615: PUSH
30616: EMPTY
30617: LIST
30618: LIST
30619: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
30620: LD_ADDR_VAR 0 49
30624: PUSH
30625: LD_INT 3
30627: PUSH
30628: LD_INT 1
30630: PUSH
30631: EMPTY
30632: LIST
30633: LIST
30634: PUSH
30635: LD_INT 3
30637: PUSH
30638: LD_INT 2
30640: PUSH
30641: EMPTY
30642: LIST
30643: LIST
30644: PUSH
30645: EMPTY
30646: LIST
30647: LIST
30648: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
30649: LD_ADDR_VAR 0 50
30653: PUSH
30654: LD_INT 2
30656: PUSH
30657: LD_INT 3
30659: PUSH
30660: EMPTY
30661: LIST
30662: LIST
30663: PUSH
30664: LD_INT 1
30666: PUSH
30667: LD_INT 3
30669: PUSH
30670: EMPTY
30671: LIST
30672: LIST
30673: PUSH
30674: EMPTY
30675: LIST
30676: LIST
30677: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
30678: LD_ADDR_VAR 0 51
30682: PUSH
30683: LD_INT 1
30685: NEG
30686: PUSH
30687: LD_INT 2
30689: PUSH
30690: EMPTY
30691: LIST
30692: LIST
30693: PUSH
30694: LD_INT 2
30696: NEG
30697: PUSH
30698: LD_INT 1
30700: PUSH
30701: EMPTY
30702: LIST
30703: LIST
30704: PUSH
30705: EMPTY
30706: LIST
30707: LIST
30708: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
30709: LD_ADDR_VAR 0 52
30713: PUSH
30714: LD_INT 3
30716: NEG
30717: PUSH
30718: LD_INT 1
30720: NEG
30721: PUSH
30722: EMPTY
30723: LIST
30724: LIST
30725: PUSH
30726: LD_INT 3
30728: NEG
30729: PUSH
30730: LD_INT 2
30732: NEG
30733: PUSH
30734: EMPTY
30735: LIST
30736: LIST
30737: PUSH
30738: EMPTY
30739: LIST
30740: LIST
30741: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30742: LD_ADDR_VAR 0 53
30746: PUSH
30747: LD_INT 1
30749: NEG
30750: PUSH
30751: LD_INT 3
30753: NEG
30754: PUSH
30755: EMPTY
30756: LIST
30757: LIST
30758: PUSH
30759: LD_INT 0
30761: PUSH
30762: LD_INT 3
30764: NEG
30765: PUSH
30766: EMPTY
30767: LIST
30768: LIST
30769: PUSH
30770: LD_INT 1
30772: PUSH
30773: LD_INT 2
30775: NEG
30776: PUSH
30777: EMPTY
30778: LIST
30779: LIST
30780: PUSH
30781: EMPTY
30782: LIST
30783: LIST
30784: LIST
30785: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30786: LD_ADDR_VAR 0 54
30790: PUSH
30791: LD_INT 2
30793: PUSH
30794: LD_INT 1
30796: NEG
30797: PUSH
30798: EMPTY
30799: LIST
30800: LIST
30801: PUSH
30802: LD_INT 3
30804: PUSH
30805: LD_INT 0
30807: PUSH
30808: EMPTY
30809: LIST
30810: LIST
30811: PUSH
30812: LD_INT 3
30814: PUSH
30815: LD_INT 1
30817: PUSH
30818: EMPTY
30819: LIST
30820: LIST
30821: PUSH
30822: EMPTY
30823: LIST
30824: LIST
30825: LIST
30826: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30827: LD_ADDR_VAR 0 55
30831: PUSH
30832: LD_INT 3
30834: PUSH
30835: LD_INT 2
30837: PUSH
30838: EMPTY
30839: LIST
30840: LIST
30841: PUSH
30842: LD_INT 3
30844: PUSH
30845: LD_INT 3
30847: PUSH
30848: EMPTY
30849: LIST
30850: LIST
30851: PUSH
30852: LD_INT 2
30854: PUSH
30855: LD_INT 3
30857: PUSH
30858: EMPTY
30859: LIST
30860: LIST
30861: PUSH
30862: EMPTY
30863: LIST
30864: LIST
30865: LIST
30866: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30867: LD_ADDR_VAR 0 56
30871: PUSH
30872: LD_INT 1
30874: PUSH
30875: LD_INT 3
30877: PUSH
30878: EMPTY
30879: LIST
30880: LIST
30881: PUSH
30882: LD_INT 0
30884: PUSH
30885: LD_INT 3
30887: PUSH
30888: EMPTY
30889: LIST
30890: LIST
30891: PUSH
30892: LD_INT 1
30894: NEG
30895: PUSH
30896: LD_INT 2
30898: PUSH
30899: EMPTY
30900: LIST
30901: LIST
30902: PUSH
30903: EMPTY
30904: LIST
30905: LIST
30906: LIST
30907: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30908: LD_ADDR_VAR 0 57
30912: PUSH
30913: LD_INT 2
30915: NEG
30916: PUSH
30917: LD_INT 1
30919: PUSH
30920: EMPTY
30921: LIST
30922: LIST
30923: PUSH
30924: LD_INT 3
30926: NEG
30927: PUSH
30928: LD_INT 0
30930: PUSH
30931: EMPTY
30932: LIST
30933: LIST
30934: PUSH
30935: LD_INT 3
30937: NEG
30938: PUSH
30939: LD_INT 1
30941: NEG
30942: PUSH
30943: EMPTY
30944: LIST
30945: LIST
30946: PUSH
30947: EMPTY
30948: LIST
30949: LIST
30950: LIST
30951: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30952: LD_ADDR_VAR 0 58
30956: PUSH
30957: LD_INT 2
30959: NEG
30960: PUSH
30961: LD_INT 3
30963: NEG
30964: PUSH
30965: EMPTY
30966: LIST
30967: LIST
30968: PUSH
30969: LD_INT 3
30971: NEG
30972: PUSH
30973: LD_INT 2
30975: NEG
30976: PUSH
30977: EMPTY
30978: LIST
30979: LIST
30980: PUSH
30981: LD_INT 3
30983: NEG
30984: PUSH
30985: LD_INT 3
30987: NEG
30988: PUSH
30989: EMPTY
30990: LIST
30991: LIST
30992: PUSH
30993: EMPTY
30994: LIST
30995: LIST
30996: LIST
30997: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
30998: LD_ADDR_VAR 0 59
31002: PUSH
31003: LD_INT 1
31005: NEG
31006: PUSH
31007: LD_INT 2
31009: NEG
31010: PUSH
31011: EMPTY
31012: LIST
31013: LIST
31014: PUSH
31015: LD_INT 0
31017: PUSH
31018: LD_INT 2
31020: NEG
31021: PUSH
31022: EMPTY
31023: LIST
31024: LIST
31025: PUSH
31026: LD_INT 1
31028: PUSH
31029: LD_INT 1
31031: NEG
31032: PUSH
31033: EMPTY
31034: LIST
31035: LIST
31036: PUSH
31037: EMPTY
31038: LIST
31039: LIST
31040: LIST
31041: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
31042: LD_ADDR_VAR 0 60
31046: PUSH
31047: LD_INT 1
31049: PUSH
31050: LD_INT 1
31052: NEG
31053: PUSH
31054: EMPTY
31055: LIST
31056: LIST
31057: PUSH
31058: LD_INT 2
31060: PUSH
31061: LD_INT 0
31063: PUSH
31064: EMPTY
31065: LIST
31066: LIST
31067: PUSH
31068: LD_INT 2
31070: PUSH
31071: LD_INT 1
31073: PUSH
31074: EMPTY
31075: LIST
31076: LIST
31077: PUSH
31078: EMPTY
31079: LIST
31080: LIST
31081: LIST
31082: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
31083: LD_ADDR_VAR 0 61
31087: PUSH
31088: LD_INT 2
31090: PUSH
31091: LD_INT 1
31093: PUSH
31094: EMPTY
31095: LIST
31096: LIST
31097: PUSH
31098: LD_INT 2
31100: PUSH
31101: LD_INT 2
31103: PUSH
31104: EMPTY
31105: LIST
31106: LIST
31107: PUSH
31108: LD_INT 1
31110: PUSH
31111: LD_INT 2
31113: PUSH
31114: EMPTY
31115: LIST
31116: LIST
31117: PUSH
31118: EMPTY
31119: LIST
31120: LIST
31121: LIST
31122: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
31123: LD_ADDR_VAR 0 62
31127: PUSH
31128: LD_INT 1
31130: PUSH
31131: LD_INT 2
31133: PUSH
31134: EMPTY
31135: LIST
31136: LIST
31137: PUSH
31138: LD_INT 0
31140: PUSH
31141: LD_INT 2
31143: PUSH
31144: EMPTY
31145: LIST
31146: LIST
31147: PUSH
31148: LD_INT 1
31150: NEG
31151: PUSH
31152: LD_INT 1
31154: PUSH
31155: EMPTY
31156: LIST
31157: LIST
31158: PUSH
31159: EMPTY
31160: LIST
31161: LIST
31162: LIST
31163: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
31164: LD_ADDR_VAR 0 63
31168: PUSH
31169: LD_INT 1
31171: NEG
31172: PUSH
31173: LD_INT 1
31175: PUSH
31176: EMPTY
31177: LIST
31178: LIST
31179: PUSH
31180: LD_INT 2
31182: NEG
31183: PUSH
31184: LD_INT 0
31186: PUSH
31187: EMPTY
31188: LIST
31189: LIST
31190: PUSH
31191: LD_INT 2
31193: NEG
31194: PUSH
31195: LD_INT 1
31197: NEG
31198: PUSH
31199: EMPTY
31200: LIST
31201: LIST
31202: PUSH
31203: EMPTY
31204: LIST
31205: LIST
31206: LIST
31207: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31208: LD_ADDR_VAR 0 64
31212: PUSH
31213: LD_INT 1
31215: NEG
31216: PUSH
31217: LD_INT 2
31219: NEG
31220: PUSH
31221: EMPTY
31222: LIST
31223: LIST
31224: PUSH
31225: LD_INT 2
31227: NEG
31228: PUSH
31229: LD_INT 1
31231: NEG
31232: PUSH
31233: EMPTY
31234: LIST
31235: LIST
31236: PUSH
31237: LD_INT 2
31239: NEG
31240: PUSH
31241: LD_INT 2
31243: NEG
31244: PUSH
31245: EMPTY
31246: LIST
31247: LIST
31248: PUSH
31249: EMPTY
31250: LIST
31251: LIST
31252: LIST
31253: ST_TO_ADDR
// end ; 2 :
31254: GO 34520
31256: LD_INT 2
31258: DOUBLE
31259: EQUAL
31260: IFTRUE 31264
31262: GO 34519
31264: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
31265: LD_ADDR_VAR 0 29
31269: PUSH
31270: LD_INT 4
31272: PUSH
31273: LD_INT 0
31275: PUSH
31276: EMPTY
31277: LIST
31278: LIST
31279: PUSH
31280: LD_INT 4
31282: PUSH
31283: LD_INT 1
31285: NEG
31286: PUSH
31287: EMPTY
31288: LIST
31289: LIST
31290: PUSH
31291: LD_INT 5
31293: PUSH
31294: LD_INT 0
31296: PUSH
31297: EMPTY
31298: LIST
31299: LIST
31300: PUSH
31301: LD_INT 5
31303: PUSH
31304: LD_INT 1
31306: PUSH
31307: EMPTY
31308: LIST
31309: LIST
31310: PUSH
31311: LD_INT 4
31313: PUSH
31314: LD_INT 1
31316: PUSH
31317: EMPTY
31318: LIST
31319: LIST
31320: PUSH
31321: LD_INT 3
31323: PUSH
31324: LD_INT 0
31326: PUSH
31327: EMPTY
31328: LIST
31329: LIST
31330: PUSH
31331: LD_INT 3
31333: PUSH
31334: LD_INT 1
31336: NEG
31337: PUSH
31338: EMPTY
31339: LIST
31340: LIST
31341: PUSH
31342: LD_INT 3
31344: PUSH
31345: LD_INT 2
31347: NEG
31348: PUSH
31349: EMPTY
31350: LIST
31351: LIST
31352: PUSH
31353: LD_INT 5
31355: PUSH
31356: LD_INT 2
31358: PUSH
31359: EMPTY
31360: LIST
31361: LIST
31362: PUSH
31363: LD_INT 3
31365: PUSH
31366: LD_INT 3
31368: PUSH
31369: EMPTY
31370: LIST
31371: LIST
31372: PUSH
31373: LD_INT 3
31375: PUSH
31376: LD_INT 2
31378: PUSH
31379: EMPTY
31380: LIST
31381: LIST
31382: PUSH
31383: LD_INT 4
31385: PUSH
31386: LD_INT 3
31388: PUSH
31389: EMPTY
31390: LIST
31391: LIST
31392: PUSH
31393: LD_INT 4
31395: PUSH
31396: LD_INT 4
31398: PUSH
31399: EMPTY
31400: LIST
31401: LIST
31402: PUSH
31403: LD_INT 3
31405: PUSH
31406: LD_INT 4
31408: PUSH
31409: EMPTY
31410: LIST
31411: LIST
31412: PUSH
31413: LD_INT 2
31415: PUSH
31416: LD_INT 3
31418: PUSH
31419: EMPTY
31420: LIST
31421: LIST
31422: PUSH
31423: LD_INT 2
31425: PUSH
31426: LD_INT 2
31428: PUSH
31429: EMPTY
31430: LIST
31431: LIST
31432: PUSH
31433: LD_INT 4
31435: PUSH
31436: LD_INT 2
31438: PUSH
31439: EMPTY
31440: LIST
31441: LIST
31442: PUSH
31443: LD_INT 2
31445: PUSH
31446: LD_INT 4
31448: PUSH
31449: EMPTY
31450: LIST
31451: LIST
31452: PUSH
31453: LD_INT 0
31455: PUSH
31456: LD_INT 4
31458: PUSH
31459: EMPTY
31460: LIST
31461: LIST
31462: PUSH
31463: LD_INT 0
31465: PUSH
31466: LD_INT 3
31468: PUSH
31469: EMPTY
31470: LIST
31471: LIST
31472: PUSH
31473: LD_INT 1
31475: PUSH
31476: LD_INT 4
31478: PUSH
31479: EMPTY
31480: LIST
31481: LIST
31482: PUSH
31483: LD_INT 1
31485: PUSH
31486: LD_INT 5
31488: PUSH
31489: EMPTY
31490: LIST
31491: LIST
31492: PUSH
31493: LD_INT 0
31495: PUSH
31496: LD_INT 5
31498: PUSH
31499: EMPTY
31500: LIST
31501: LIST
31502: PUSH
31503: LD_INT 1
31505: NEG
31506: PUSH
31507: LD_INT 4
31509: PUSH
31510: EMPTY
31511: LIST
31512: LIST
31513: PUSH
31514: LD_INT 1
31516: NEG
31517: PUSH
31518: LD_INT 3
31520: PUSH
31521: EMPTY
31522: LIST
31523: LIST
31524: PUSH
31525: LD_INT 2
31527: PUSH
31528: LD_INT 5
31530: PUSH
31531: EMPTY
31532: LIST
31533: LIST
31534: PUSH
31535: LD_INT 2
31537: NEG
31538: PUSH
31539: LD_INT 3
31541: PUSH
31542: EMPTY
31543: LIST
31544: LIST
31545: PUSH
31546: LD_INT 3
31548: NEG
31549: PUSH
31550: LD_INT 0
31552: PUSH
31553: EMPTY
31554: LIST
31555: LIST
31556: PUSH
31557: LD_INT 3
31559: NEG
31560: PUSH
31561: LD_INT 1
31563: NEG
31564: PUSH
31565: EMPTY
31566: LIST
31567: LIST
31568: PUSH
31569: LD_INT 2
31571: NEG
31572: PUSH
31573: LD_INT 0
31575: PUSH
31576: EMPTY
31577: LIST
31578: LIST
31579: PUSH
31580: LD_INT 2
31582: NEG
31583: PUSH
31584: LD_INT 1
31586: PUSH
31587: EMPTY
31588: LIST
31589: LIST
31590: PUSH
31591: LD_INT 3
31593: NEG
31594: PUSH
31595: LD_INT 1
31597: PUSH
31598: EMPTY
31599: LIST
31600: LIST
31601: PUSH
31602: LD_INT 4
31604: NEG
31605: PUSH
31606: LD_INT 0
31608: PUSH
31609: EMPTY
31610: LIST
31611: LIST
31612: PUSH
31613: LD_INT 4
31615: NEG
31616: PUSH
31617: LD_INT 1
31619: NEG
31620: PUSH
31621: EMPTY
31622: LIST
31623: LIST
31624: PUSH
31625: LD_INT 4
31627: NEG
31628: PUSH
31629: LD_INT 2
31631: NEG
31632: PUSH
31633: EMPTY
31634: LIST
31635: LIST
31636: PUSH
31637: LD_INT 2
31639: NEG
31640: PUSH
31641: LD_INT 2
31643: PUSH
31644: EMPTY
31645: LIST
31646: LIST
31647: PUSH
31648: LD_INT 4
31650: NEG
31651: PUSH
31652: LD_INT 4
31654: NEG
31655: PUSH
31656: EMPTY
31657: LIST
31658: LIST
31659: PUSH
31660: LD_INT 4
31662: NEG
31663: PUSH
31664: LD_INT 5
31666: NEG
31667: PUSH
31668: EMPTY
31669: LIST
31670: LIST
31671: PUSH
31672: LD_INT 3
31674: NEG
31675: PUSH
31676: LD_INT 4
31678: NEG
31679: PUSH
31680: EMPTY
31681: LIST
31682: LIST
31683: PUSH
31684: LD_INT 3
31686: NEG
31687: PUSH
31688: LD_INT 3
31690: NEG
31691: PUSH
31692: EMPTY
31693: LIST
31694: LIST
31695: PUSH
31696: LD_INT 4
31698: NEG
31699: PUSH
31700: LD_INT 3
31702: NEG
31703: PUSH
31704: EMPTY
31705: LIST
31706: LIST
31707: PUSH
31708: LD_INT 5
31710: NEG
31711: PUSH
31712: LD_INT 4
31714: NEG
31715: PUSH
31716: EMPTY
31717: LIST
31718: LIST
31719: PUSH
31720: LD_INT 5
31722: NEG
31723: PUSH
31724: LD_INT 5
31726: NEG
31727: PUSH
31728: EMPTY
31729: LIST
31730: LIST
31731: PUSH
31732: LD_INT 3
31734: NEG
31735: PUSH
31736: LD_INT 5
31738: NEG
31739: PUSH
31740: EMPTY
31741: LIST
31742: LIST
31743: PUSH
31744: LD_INT 5
31746: NEG
31747: PUSH
31748: LD_INT 3
31750: NEG
31751: PUSH
31752: EMPTY
31753: LIST
31754: LIST
31755: PUSH
31756: EMPTY
31757: LIST
31758: LIST
31759: LIST
31760: LIST
31761: LIST
31762: LIST
31763: LIST
31764: LIST
31765: LIST
31766: LIST
31767: LIST
31768: LIST
31769: LIST
31770: LIST
31771: LIST
31772: LIST
31773: LIST
31774: LIST
31775: LIST
31776: LIST
31777: LIST
31778: LIST
31779: LIST
31780: LIST
31781: LIST
31782: LIST
31783: LIST
31784: LIST
31785: LIST
31786: LIST
31787: LIST
31788: LIST
31789: LIST
31790: LIST
31791: LIST
31792: LIST
31793: LIST
31794: LIST
31795: LIST
31796: LIST
31797: LIST
31798: LIST
31799: LIST
31800: LIST
31801: LIST
31802: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
31803: LD_ADDR_VAR 0 30
31807: PUSH
31808: LD_INT 4
31810: PUSH
31811: LD_INT 4
31813: PUSH
31814: EMPTY
31815: LIST
31816: LIST
31817: PUSH
31818: LD_INT 4
31820: PUSH
31821: LD_INT 3
31823: PUSH
31824: EMPTY
31825: LIST
31826: LIST
31827: PUSH
31828: LD_INT 5
31830: PUSH
31831: LD_INT 4
31833: PUSH
31834: EMPTY
31835: LIST
31836: LIST
31837: PUSH
31838: LD_INT 5
31840: PUSH
31841: LD_INT 5
31843: PUSH
31844: EMPTY
31845: LIST
31846: LIST
31847: PUSH
31848: LD_INT 4
31850: PUSH
31851: LD_INT 5
31853: PUSH
31854: EMPTY
31855: LIST
31856: LIST
31857: PUSH
31858: LD_INT 3
31860: PUSH
31861: LD_INT 4
31863: PUSH
31864: EMPTY
31865: LIST
31866: LIST
31867: PUSH
31868: LD_INT 3
31870: PUSH
31871: LD_INT 3
31873: PUSH
31874: EMPTY
31875: LIST
31876: LIST
31877: PUSH
31878: LD_INT 5
31880: PUSH
31881: LD_INT 3
31883: PUSH
31884: EMPTY
31885: LIST
31886: LIST
31887: PUSH
31888: LD_INT 3
31890: PUSH
31891: LD_INT 5
31893: PUSH
31894: EMPTY
31895: LIST
31896: LIST
31897: PUSH
31898: LD_INT 0
31900: PUSH
31901: LD_INT 3
31903: PUSH
31904: EMPTY
31905: LIST
31906: LIST
31907: PUSH
31908: LD_INT 0
31910: PUSH
31911: LD_INT 2
31913: PUSH
31914: EMPTY
31915: LIST
31916: LIST
31917: PUSH
31918: LD_INT 1
31920: PUSH
31921: LD_INT 3
31923: PUSH
31924: EMPTY
31925: LIST
31926: LIST
31927: PUSH
31928: LD_INT 1
31930: PUSH
31931: LD_INT 4
31933: PUSH
31934: EMPTY
31935: LIST
31936: LIST
31937: PUSH
31938: LD_INT 0
31940: PUSH
31941: LD_INT 4
31943: PUSH
31944: EMPTY
31945: LIST
31946: LIST
31947: PUSH
31948: LD_INT 1
31950: NEG
31951: PUSH
31952: LD_INT 3
31954: PUSH
31955: EMPTY
31956: LIST
31957: LIST
31958: PUSH
31959: LD_INT 1
31961: NEG
31962: PUSH
31963: LD_INT 2
31965: PUSH
31966: EMPTY
31967: LIST
31968: LIST
31969: PUSH
31970: LD_INT 2
31972: PUSH
31973: LD_INT 4
31975: PUSH
31976: EMPTY
31977: LIST
31978: LIST
31979: PUSH
31980: LD_INT 2
31982: NEG
31983: PUSH
31984: LD_INT 2
31986: PUSH
31987: EMPTY
31988: LIST
31989: LIST
31990: PUSH
31991: LD_INT 4
31993: NEG
31994: PUSH
31995: LD_INT 0
31997: PUSH
31998: EMPTY
31999: LIST
32000: LIST
32001: PUSH
32002: LD_INT 4
32004: NEG
32005: PUSH
32006: LD_INT 1
32008: NEG
32009: PUSH
32010: EMPTY
32011: LIST
32012: LIST
32013: PUSH
32014: LD_INT 3
32016: NEG
32017: PUSH
32018: LD_INT 0
32020: PUSH
32021: EMPTY
32022: LIST
32023: LIST
32024: PUSH
32025: LD_INT 3
32027: NEG
32028: PUSH
32029: LD_INT 1
32031: PUSH
32032: EMPTY
32033: LIST
32034: LIST
32035: PUSH
32036: LD_INT 4
32038: NEG
32039: PUSH
32040: LD_INT 1
32042: PUSH
32043: EMPTY
32044: LIST
32045: LIST
32046: PUSH
32047: LD_INT 5
32049: NEG
32050: PUSH
32051: LD_INT 0
32053: PUSH
32054: EMPTY
32055: LIST
32056: LIST
32057: PUSH
32058: LD_INT 5
32060: NEG
32061: PUSH
32062: LD_INT 1
32064: NEG
32065: PUSH
32066: EMPTY
32067: LIST
32068: LIST
32069: PUSH
32070: LD_INT 5
32072: NEG
32073: PUSH
32074: LD_INT 2
32076: NEG
32077: PUSH
32078: EMPTY
32079: LIST
32080: LIST
32081: PUSH
32082: LD_INT 3
32084: NEG
32085: PUSH
32086: LD_INT 2
32088: PUSH
32089: EMPTY
32090: LIST
32091: LIST
32092: PUSH
32093: LD_INT 3
32095: NEG
32096: PUSH
32097: LD_INT 3
32099: NEG
32100: PUSH
32101: EMPTY
32102: LIST
32103: LIST
32104: PUSH
32105: LD_INT 3
32107: NEG
32108: PUSH
32109: LD_INT 4
32111: NEG
32112: PUSH
32113: EMPTY
32114: LIST
32115: LIST
32116: PUSH
32117: LD_INT 2
32119: NEG
32120: PUSH
32121: LD_INT 3
32123: NEG
32124: PUSH
32125: EMPTY
32126: LIST
32127: LIST
32128: PUSH
32129: LD_INT 2
32131: NEG
32132: PUSH
32133: LD_INT 2
32135: NEG
32136: PUSH
32137: EMPTY
32138: LIST
32139: LIST
32140: PUSH
32141: LD_INT 3
32143: NEG
32144: PUSH
32145: LD_INT 2
32147: NEG
32148: PUSH
32149: EMPTY
32150: LIST
32151: LIST
32152: PUSH
32153: LD_INT 4
32155: NEG
32156: PUSH
32157: LD_INT 3
32159: NEG
32160: PUSH
32161: EMPTY
32162: LIST
32163: LIST
32164: PUSH
32165: LD_INT 4
32167: NEG
32168: PUSH
32169: LD_INT 4
32171: NEG
32172: PUSH
32173: EMPTY
32174: LIST
32175: LIST
32176: PUSH
32177: LD_INT 2
32179: NEG
32180: PUSH
32181: LD_INT 4
32183: NEG
32184: PUSH
32185: EMPTY
32186: LIST
32187: LIST
32188: PUSH
32189: LD_INT 4
32191: NEG
32192: PUSH
32193: LD_INT 2
32195: NEG
32196: PUSH
32197: EMPTY
32198: LIST
32199: LIST
32200: PUSH
32201: LD_INT 0
32203: PUSH
32204: LD_INT 4
32206: NEG
32207: PUSH
32208: EMPTY
32209: LIST
32210: LIST
32211: PUSH
32212: LD_INT 0
32214: PUSH
32215: LD_INT 5
32217: NEG
32218: PUSH
32219: EMPTY
32220: LIST
32221: LIST
32222: PUSH
32223: LD_INT 1
32225: PUSH
32226: LD_INT 4
32228: NEG
32229: PUSH
32230: EMPTY
32231: LIST
32232: LIST
32233: PUSH
32234: LD_INT 1
32236: PUSH
32237: LD_INT 3
32239: NEG
32240: PUSH
32241: EMPTY
32242: LIST
32243: LIST
32244: PUSH
32245: LD_INT 0
32247: PUSH
32248: LD_INT 3
32250: NEG
32251: PUSH
32252: EMPTY
32253: LIST
32254: LIST
32255: PUSH
32256: LD_INT 1
32258: NEG
32259: PUSH
32260: LD_INT 4
32262: NEG
32263: PUSH
32264: EMPTY
32265: LIST
32266: LIST
32267: PUSH
32268: LD_INT 1
32270: NEG
32271: PUSH
32272: LD_INT 5
32274: NEG
32275: PUSH
32276: EMPTY
32277: LIST
32278: LIST
32279: PUSH
32280: LD_INT 2
32282: PUSH
32283: LD_INT 3
32285: NEG
32286: PUSH
32287: EMPTY
32288: LIST
32289: LIST
32290: PUSH
32291: LD_INT 2
32293: NEG
32294: PUSH
32295: LD_INT 5
32297: NEG
32298: PUSH
32299: EMPTY
32300: LIST
32301: LIST
32302: PUSH
32303: EMPTY
32304: LIST
32305: LIST
32306: LIST
32307: LIST
32308: LIST
32309: LIST
32310: LIST
32311: LIST
32312: LIST
32313: LIST
32314: LIST
32315: LIST
32316: LIST
32317: LIST
32318: LIST
32319: LIST
32320: LIST
32321: LIST
32322: LIST
32323: LIST
32324: LIST
32325: LIST
32326: LIST
32327: LIST
32328: LIST
32329: LIST
32330: LIST
32331: LIST
32332: LIST
32333: LIST
32334: LIST
32335: LIST
32336: LIST
32337: LIST
32338: LIST
32339: LIST
32340: LIST
32341: LIST
32342: LIST
32343: LIST
32344: LIST
32345: LIST
32346: LIST
32347: LIST
32348: LIST
32349: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
32350: LD_ADDR_VAR 0 31
32354: PUSH
32355: LD_INT 0
32357: PUSH
32358: LD_INT 4
32360: PUSH
32361: EMPTY
32362: LIST
32363: LIST
32364: PUSH
32365: LD_INT 0
32367: PUSH
32368: LD_INT 3
32370: PUSH
32371: EMPTY
32372: LIST
32373: LIST
32374: PUSH
32375: LD_INT 1
32377: PUSH
32378: LD_INT 4
32380: PUSH
32381: EMPTY
32382: LIST
32383: LIST
32384: PUSH
32385: LD_INT 1
32387: PUSH
32388: LD_INT 5
32390: PUSH
32391: EMPTY
32392: LIST
32393: LIST
32394: PUSH
32395: LD_INT 0
32397: PUSH
32398: LD_INT 5
32400: PUSH
32401: EMPTY
32402: LIST
32403: LIST
32404: PUSH
32405: LD_INT 1
32407: NEG
32408: PUSH
32409: LD_INT 4
32411: PUSH
32412: EMPTY
32413: LIST
32414: LIST
32415: PUSH
32416: LD_INT 1
32418: NEG
32419: PUSH
32420: LD_INT 3
32422: PUSH
32423: EMPTY
32424: LIST
32425: LIST
32426: PUSH
32427: LD_INT 2
32429: PUSH
32430: LD_INT 5
32432: PUSH
32433: EMPTY
32434: LIST
32435: LIST
32436: PUSH
32437: LD_INT 2
32439: NEG
32440: PUSH
32441: LD_INT 3
32443: PUSH
32444: EMPTY
32445: LIST
32446: LIST
32447: PUSH
32448: LD_INT 3
32450: NEG
32451: PUSH
32452: LD_INT 0
32454: PUSH
32455: EMPTY
32456: LIST
32457: LIST
32458: PUSH
32459: LD_INT 3
32461: NEG
32462: PUSH
32463: LD_INT 1
32465: NEG
32466: PUSH
32467: EMPTY
32468: LIST
32469: LIST
32470: PUSH
32471: LD_INT 2
32473: NEG
32474: PUSH
32475: LD_INT 0
32477: PUSH
32478: EMPTY
32479: LIST
32480: LIST
32481: PUSH
32482: LD_INT 2
32484: NEG
32485: PUSH
32486: LD_INT 1
32488: PUSH
32489: EMPTY
32490: LIST
32491: LIST
32492: PUSH
32493: LD_INT 3
32495: NEG
32496: PUSH
32497: LD_INT 1
32499: PUSH
32500: EMPTY
32501: LIST
32502: LIST
32503: PUSH
32504: LD_INT 4
32506: NEG
32507: PUSH
32508: LD_INT 0
32510: PUSH
32511: EMPTY
32512: LIST
32513: LIST
32514: PUSH
32515: LD_INT 4
32517: NEG
32518: PUSH
32519: LD_INT 1
32521: NEG
32522: PUSH
32523: EMPTY
32524: LIST
32525: LIST
32526: PUSH
32527: LD_INT 4
32529: NEG
32530: PUSH
32531: LD_INT 2
32533: NEG
32534: PUSH
32535: EMPTY
32536: LIST
32537: LIST
32538: PUSH
32539: LD_INT 2
32541: NEG
32542: PUSH
32543: LD_INT 2
32545: PUSH
32546: EMPTY
32547: LIST
32548: LIST
32549: PUSH
32550: LD_INT 4
32552: NEG
32553: PUSH
32554: LD_INT 4
32556: NEG
32557: PUSH
32558: EMPTY
32559: LIST
32560: LIST
32561: PUSH
32562: LD_INT 4
32564: NEG
32565: PUSH
32566: LD_INT 5
32568: NEG
32569: PUSH
32570: EMPTY
32571: LIST
32572: LIST
32573: PUSH
32574: LD_INT 3
32576: NEG
32577: PUSH
32578: LD_INT 4
32580: NEG
32581: PUSH
32582: EMPTY
32583: LIST
32584: LIST
32585: PUSH
32586: LD_INT 3
32588: NEG
32589: PUSH
32590: LD_INT 3
32592: NEG
32593: PUSH
32594: EMPTY
32595: LIST
32596: LIST
32597: PUSH
32598: LD_INT 4
32600: NEG
32601: PUSH
32602: LD_INT 3
32604: NEG
32605: PUSH
32606: EMPTY
32607: LIST
32608: LIST
32609: PUSH
32610: LD_INT 5
32612: NEG
32613: PUSH
32614: LD_INT 4
32616: NEG
32617: PUSH
32618: EMPTY
32619: LIST
32620: LIST
32621: PUSH
32622: LD_INT 5
32624: NEG
32625: PUSH
32626: LD_INT 5
32628: NEG
32629: PUSH
32630: EMPTY
32631: LIST
32632: LIST
32633: PUSH
32634: LD_INT 3
32636: NEG
32637: PUSH
32638: LD_INT 5
32640: NEG
32641: PUSH
32642: EMPTY
32643: LIST
32644: LIST
32645: PUSH
32646: LD_INT 5
32648: NEG
32649: PUSH
32650: LD_INT 3
32652: NEG
32653: PUSH
32654: EMPTY
32655: LIST
32656: LIST
32657: PUSH
32658: LD_INT 0
32660: PUSH
32661: LD_INT 3
32663: NEG
32664: PUSH
32665: EMPTY
32666: LIST
32667: LIST
32668: PUSH
32669: LD_INT 0
32671: PUSH
32672: LD_INT 4
32674: NEG
32675: PUSH
32676: EMPTY
32677: LIST
32678: LIST
32679: PUSH
32680: LD_INT 1
32682: PUSH
32683: LD_INT 3
32685: NEG
32686: PUSH
32687: EMPTY
32688: LIST
32689: LIST
32690: PUSH
32691: LD_INT 1
32693: PUSH
32694: LD_INT 2
32696: NEG
32697: PUSH
32698: EMPTY
32699: LIST
32700: LIST
32701: PUSH
32702: LD_INT 0
32704: PUSH
32705: LD_INT 2
32707: NEG
32708: PUSH
32709: EMPTY
32710: LIST
32711: LIST
32712: PUSH
32713: LD_INT 1
32715: NEG
32716: PUSH
32717: LD_INT 3
32719: NEG
32720: PUSH
32721: EMPTY
32722: LIST
32723: LIST
32724: PUSH
32725: LD_INT 1
32727: NEG
32728: PUSH
32729: LD_INT 4
32731: NEG
32732: PUSH
32733: EMPTY
32734: LIST
32735: LIST
32736: PUSH
32737: LD_INT 2
32739: PUSH
32740: LD_INT 2
32742: NEG
32743: PUSH
32744: EMPTY
32745: LIST
32746: LIST
32747: PUSH
32748: LD_INT 2
32750: NEG
32751: PUSH
32752: LD_INT 4
32754: NEG
32755: PUSH
32756: EMPTY
32757: LIST
32758: LIST
32759: PUSH
32760: LD_INT 4
32762: PUSH
32763: LD_INT 0
32765: PUSH
32766: EMPTY
32767: LIST
32768: LIST
32769: PUSH
32770: LD_INT 4
32772: PUSH
32773: LD_INT 1
32775: NEG
32776: PUSH
32777: EMPTY
32778: LIST
32779: LIST
32780: PUSH
32781: LD_INT 5
32783: PUSH
32784: LD_INT 0
32786: PUSH
32787: EMPTY
32788: LIST
32789: LIST
32790: PUSH
32791: LD_INT 5
32793: PUSH
32794: LD_INT 1
32796: PUSH
32797: EMPTY
32798: LIST
32799: LIST
32800: PUSH
32801: LD_INT 4
32803: PUSH
32804: LD_INT 1
32806: PUSH
32807: EMPTY
32808: LIST
32809: LIST
32810: PUSH
32811: LD_INT 3
32813: PUSH
32814: LD_INT 0
32816: PUSH
32817: EMPTY
32818: LIST
32819: LIST
32820: PUSH
32821: LD_INT 3
32823: PUSH
32824: LD_INT 1
32826: NEG
32827: PUSH
32828: EMPTY
32829: LIST
32830: LIST
32831: PUSH
32832: LD_INT 3
32834: PUSH
32835: LD_INT 2
32837: NEG
32838: PUSH
32839: EMPTY
32840: LIST
32841: LIST
32842: PUSH
32843: LD_INT 5
32845: PUSH
32846: LD_INT 2
32848: PUSH
32849: EMPTY
32850: LIST
32851: LIST
32852: PUSH
32853: EMPTY
32854: LIST
32855: LIST
32856: LIST
32857: LIST
32858: LIST
32859: LIST
32860: LIST
32861: LIST
32862: LIST
32863: LIST
32864: LIST
32865: LIST
32866: LIST
32867: LIST
32868: LIST
32869: LIST
32870: LIST
32871: LIST
32872: LIST
32873: LIST
32874: LIST
32875: LIST
32876: LIST
32877: LIST
32878: LIST
32879: LIST
32880: LIST
32881: LIST
32882: LIST
32883: LIST
32884: LIST
32885: LIST
32886: LIST
32887: LIST
32888: LIST
32889: LIST
32890: LIST
32891: LIST
32892: LIST
32893: LIST
32894: LIST
32895: LIST
32896: LIST
32897: LIST
32898: LIST
32899: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
32900: LD_ADDR_VAR 0 32
32904: PUSH
32905: LD_INT 4
32907: NEG
32908: PUSH
32909: LD_INT 0
32911: PUSH
32912: EMPTY
32913: LIST
32914: LIST
32915: PUSH
32916: LD_INT 4
32918: NEG
32919: PUSH
32920: LD_INT 1
32922: NEG
32923: PUSH
32924: EMPTY
32925: LIST
32926: LIST
32927: PUSH
32928: LD_INT 3
32930: NEG
32931: PUSH
32932: LD_INT 0
32934: PUSH
32935: EMPTY
32936: LIST
32937: LIST
32938: PUSH
32939: LD_INT 3
32941: NEG
32942: PUSH
32943: LD_INT 1
32945: PUSH
32946: EMPTY
32947: LIST
32948: LIST
32949: PUSH
32950: LD_INT 4
32952: NEG
32953: PUSH
32954: LD_INT 1
32956: PUSH
32957: EMPTY
32958: LIST
32959: LIST
32960: PUSH
32961: LD_INT 5
32963: NEG
32964: PUSH
32965: LD_INT 0
32967: PUSH
32968: EMPTY
32969: LIST
32970: LIST
32971: PUSH
32972: LD_INT 5
32974: NEG
32975: PUSH
32976: LD_INT 1
32978: NEG
32979: PUSH
32980: EMPTY
32981: LIST
32982: LIST
32983: PUSH
32984: LD_INT 5
32986: NEG
32987: PUSH
32988: LD_INT 2
32990: NEG
32991: PUSH
32992: EMPTY
32993: LIST
32994: LIST
32995: PUSH
32996: LD_INT 3
32998: NEG
32999: PUSH
33000: LD_INT 2
33002: PUSH
33003: EMPTY
33004: LIST
33005: LIST
33006: PUSH
33007: LD_INT 3
33009: NEG
33010: PUSH
33011: LD_INT 3
33013: NEG
33014: PUSH
33015: EMPTY
33016: LIST
33017: LIST
33018: PUSH
33019: LD_INT 3
33021: NEG
33022: PUSH
33023: LD_INT 4
33025: NEG
33026: PUSH
33027: EMPTY
33028: LIST
33029: LIST
33030: PUSH
33031: LD_INT 2
33033: NEG
33034: PUSH
33035: LD_INT 3
33037: NEG
33038: PUSH
33039: EMPTY
33040: LIST
33041: LIST
33042: PUSH
33043: LD_INT 2
33045: NEG
33046: PUSH
33047: LD_INT 2
33049: NEG
33050: PUSH
33051: EMPTY
33052: LIST
33053: LIST
33054: PUSH
33055: LD_INT 3
33057: NEG
33058: PUSH
33059: LD_INT 2
33061: NEG
33062: PUSH
33063: EMPTY
33064: LIST
33065: LIST
33066: PUSH
33067: LD_INT 4
33069: NEG
33070: PUSH
33071: LD_INT 3
33073: NEG
33074: PUSH
33075: EMPTY
33076: LIST
33077: LIST
33078: PUSH
33079: LD_INT 4
33081: NEG
33082: PUSH
33083: LD_INT 4
33085: NEG
33086: PUSH
33087: EMPTY
33088: LIST
33089: LIST
33090: PUSH
33091: LD_INT 2
33093: NEG
33094: PUSH
33095: LD_INT 4
33097: NEG
33098: PUSH
33099: EMPTY
33100: LIST
33101: LIST
33102: PUSH
33103: LD_INT 4
33105: NEG
33106: PUSH
33107: LD_INT 2
33109: NEG
33110: PUSH
33111: EMPTY
33112: LIST
33113: LIST
33114: PUSH
33115: LD_INT 0
33117: PUSH
33118: LD_INT 4
33120: NEG
33121: PUSH
33122: EMPTY
33123: LIST
33124: LIST
33125: PUSH
33126: LD_INT 0
33128: PUSH
33129: LD_INT 5
33131: NEG
33132: PUSH
33133: EMPTY
33134: LIST
33135: LIST
33136: PUSH
33137: LD_INT 1
33139: PUSH
33140: LD_INT 4
33142: NEG
33143: PUSH
33144: EMPTY
33145: LIST
33146: LIST
33147: PUSH
33148: LD_INT 1
33150: PUSH
33151: LD_INT 3
33153: NEG
33154: PUSH
33155: EMPTY
33156: LIST
33157: LIST
33158: PUSH
33159: LD_INT 0
33161: PUSH
33162: LD_INT 3
33164: NEG
33165: PUSH
33166: EMPTY
33167: LIST
33168: LIST
33169: PUSH
33170: LD_INT 1
33172: NEG
33173: PUSH
33174: LD_INT 4
33176: NEG
33177: PUSH
33178: EMPTY
33179: LIST
33180: LIST
33181: PUSH
33182: LD_INT 1
33184: NEG
33185: PUSH
33186: LD_INT 5
33188: NEG
33189: PUSH
33190: EMPTY
33191: LIST
33192: LIST
33193: PUSH
33194: LD_INT 2
33196: PUSH
33197: LD_INT 3
33199: NEG
33200: PUSH
33201: EMPTY
33202: LIST
33203: LIST
33204: PUSH
33205: LD_INT 2
33207: NEG
33208: PUSH
33209: LD_INT 5
33211: NEG
33212: PUSH
33213: EMPTY
33214: LIST
33215: LIST
33216: PUSH
33217: LD_INT 3
33219: PUSH
33220: LD_INT 0
33222: PUSH
33223: EMPTY
33224: LIST
33225: LIST
33226: PUSH
33227: LD_INT 3
33229: PUSH
33230: LD_INT 1
33232: NEG
33233: PUSH
33234: EMPTY
33235: LIST
33236: LIST
33237: PUSH
33238: LD_INT 4
33240: PUSH
33241: LD_INT 0
33243: PUSH
33244: EMPTY
33245: LIST
33246: LIST
33247: PUSH
33248: LD_INT 4
33250: PUSH
33251: LD_INT 1
33253: PUSH
33254: EMPTY
33255: LIST
33256: LIST
33257: PUSH
33258: LD_INT 3
33260: PUSH
33261: LD_INT 1
33263: PUSH
33264: EMPTY
33265: LIST
33266: LIST
33267: PUSH
33268: LD_INT 2
33270: PUSH
33271: LD_INT 0
33273: PUSH
33274: EMPTY
33275: LIST
33276: LIST
33277: PUSH
33278: LD_INT 2
33280: PUSH
33281: LD_INT 1
33283: NEG
33284: PUSH
33285: EMPTY
33286: LIST
33287: LIST
33288: PUSH
33289: LD_INT 2
33291: PUSH
33292: LD_INT 2
33294: NEG
33295: PUSH
33296: EMPTY
33297: LIST
33298: LIST
33299: PUSH
33300: LD_INT 4
33302: PUSH
33303: LD_INT 2
33305: PUSH
33306: EMPTY
33307: LIST
33308: LIST
33309: PUSH
33310: LD_INT 4
33312: PUSH
33313: LD_INT 4
33315: PUSH
33316: EMPTY
33317: LIST
33318: LIST
33319: PUSH
33320: LD_INT 4
33322: PUSH
33323: LD_INT 3
33325: PUSH
33326: EMPTY
33327: LIST
33328: LIST
33329: PUSH
33330: LD_INT 5
33332: PUSH
33333: LD_INT 4
33335: PUSH
33336: EMPTY
33337: LIST
33338: LIST
33339: PUSH
33340: LD_INT 5
33342: PUSH
33343: LD_INT 5
33345: PUSH
33346: EMPTY
33347: LIST
33348: LIST
33349: PUSH
33350: LD_INT 4
33352: PUSH
33353: LD_INT 5
33355: PUSH
33356: EMPTY
33357: LIST
33358: LIST
33359: PUSH
33360: LD_INT 3
33362: PUSH
33363: LD_INT 4
33365: PUSH
33366: EMPTY
33367: LIST
33368: LIST
33369: PUSH
33370: LD_INT 3
33372: PUSH
33373: LD_INT 3
33375: PUSH
33376: EMPTY
33377: LIST
33378: LIST
33379: PUSH
33380: LD_INT 5
33382: PUSH
33383: LD_INT 3
33385: PUSH
33386: EMPTY
33387: LIST
33388: LIST
33389: PUSH
33390: LD_INT 3
33392: PUSH
33393: LD_INT 5
33395: PUSH
33396: EMPTY
33397: LIST
33398: LIST
33399: PUSH
33400: EMPTY
33401: LIST
33402: LIST
33403: LIST
33404: LIST
33405: LIST
33406: LIST
33407: LIST
33408: LIST
33409: LIST
33410: LIST
33411: LIST
33412: LIST
33413: LIST
33414: LIST
33415: LIST
33416: LIST
33417: LIST
33418: LIST
33419: LIST
33420: LIST
33421: LIST
33422: LIST
33423: LIST
33424: LIST
33425: LIST
33426: LIST
33427: LIST
33428: LIST
33429: LIST
33430: LIST
33431: LIST
33432: LIST
33433: LIST
33434: LIST
33435: LIST
33436: LIST
33437: LIST
33438: LIST
33439: LIST
33440: LIST
33441: LIST
33442: LIST
33443: LIST
33444: LIST
33445: LIST
33446: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
33447: LD_ADDR_VAR 0 33
33451: PUSH
33452: LD_INT 4
33454: NEG
33455: PUSH
33456: LD_INT 4
33458: NEG
33459: PUSH
33460: EMPTY
33461: LIST
33462: LIST
33463: PUSH
33464: LD_INT 4
33466: NEG
33467: PUSH
33468: LD_INT 5
33470: NEG
33471: PUSH
33472: EMPTY
33473: LIST
33474: LIST
33475: PUSH
33476: LD_INT 3
33478: NEG
33479: PUSH
33480: LD_INT 4
33482: NEG
33483: PUSH
33484: EMPTY
33485: LIST
33486: LIST
33487: PUSH
33488: LD_INT 3
33490: NEG
33491: PUSH
33492: LD_INT 3
33494: NEG
33495: PUSH
33496: EMPTY
33497: LIST
33498: LIST
33499: PUSH
33500: LD_INT 4
33502: NEG
33503: PUSH
33504: LD_INT 3
33506: NEG
33507: PUSH
33508: EMPTY
33509: LIST
33510: LIST
33511: PUSH
33512: LD_INT 5
33514: NEG
33515: PUSH
33516: LD_INT 4
33518: NEG
33519: PUSH
33520: EMPTY
33521: LIST
33522: LIST
33523: PUSH
33524: LD_INT 5
33526: NEG
33527: PUSH
33528: LD_INT 5
33530: NEG
33531: PUSH
33532: EMPTY
33533: LIST
33534: LIST
33535: PUSH
33536: LD_INT 3
33538: NEG
33539: PUSH
33540: LD_INT 5
33542: NEG
33543: PUSH
33544: EMPTY
33545: LIST
33546: LIST
33547: PUSH
33548: LD_INT 5
33550: NEG
33551: PUSH
33552: LD_INT 3
33554: NEG
33555: PUSH
33556: EMPTY
33557: LIST
33558: LIST
33559: PUSH
33560: LD_INT 0
33562: PUSH
33563: LD_INT 3
33565: NEG
33566: PUSH
33567: EMPTY
33568: LIST
33569: LIST
33570: PUSH
33571: LD_INT 0
33573: PUSH
33574: LD_INT 4
33576: NEG
33577: PUSH
33578: EMPTY
33579: LIST
33580: LIST
33581: PUSH
33582: LD_INT 1
33584: PUSH
33585: LD_INT 3
33587: NEG
33588: PUSH
33589: EMPTY
33590: LIST
33591: LIST
33592: PUSH
33593: LD_INT 1
33595: PUSH
33596: LD_INT 2
33598: NEG
33599: PUSH
33600: EMPTY
33601: LIST
33602: LIST
33603: PUSH
33604: LD_INT 0
33606: PUSH
33607: LD_INT 2
33609: NEG
33610: PUSH
33611: EMPTY
33612: LIST
33613: LIST
33614: PUSH
33615: LD_INT 1
33617: NEG
33618: PUSH
33619: LD_INT 3
33621: NEG
33622: PUSH
33623: EMPTY
33624: LIST
33625: LIST
33626: PUSH
33627: LD_INT 1
33629: NEG
33630: PUSH
33631: LD_INT 4
33633: NEG
33634: PUSH
33635: EMPTY
33636: LIST
33637: LIST
33638: PUSH
33639: LD_INT 2
33641: PUSH
33642: LD_INT 2
33644: NEG
33645: PUSH
33646: EMPTY
33647: LIST
33648: LIST
33649: PUSH
33650: LD_INT 2
33652: NEG
33653: PUSH
33654: LD_INT 4
33656: NEG
33657: PUSH
33658: EMPTY
33659: LIST
33660: LIST
33661: PUSH
33662: LD_INT 4
33664: PUSH
33665: LD_INT 0
33667: PUSH
33668: EMPTY
33669: LIST
33670: LIST
33671: PUSH
33672: LD_INT 4
33674: PUSH
33675: LD_INT 1
33677: NEG
33678: PUSH
33679: EMPTY
33680: LIST
33681: LIST
33682: PUSH
33683: LD_INT 5
33685: PUSH
33686: LD_INT 0
33688: PUSH
33689: EMPTY
33690: LIST
33691: LIST
33692: PUSH
33693: LD_INT 5
33695: PUSH
33696: LD_INT 1
33698: PUSH
33699: EMPTY
33700: LIST
33701: LIST
33702: PUSH
33703: LD_INT 4
33705: PUSH
33706: LD_INT 1
33708: PUSH
33709: EMPTY
33710: LIST
33711: LIST
33712: PUSH
33713: LD_INT 3
33715: PUSH
33716: LD_INT 0
33718: PUSH
33719: EMPTY
33720: LIST
33721: LIST
33722: PUSH
33723: LD_INT 3
33725: PUSH
33726: LD_INT 1
33728: NEG
33729: PUSH
33730: EMPTY
33731: LIST
33732: LIST
33733: PUSH
33734: LD_INT 3
33736: PUSH
33737: LD_INT 2
33739: NEG
33740: PUSH
33741: EMPTY
33742: LIST
33743: LIST
33744: PUSH
33745: LD_INT 5
33747: PUSH
33748: LD_INT 2
33750: PUSH
33751: EMPTY
33752: LIST
33753: LIST
33754: PUSH
33755: LD_INT 3
33757: PUSH
33758: LD_INT 3
33760: PUSH
33761: EMPTY
33762: LIST
33763: LIST
33764: PUSH
33765: LD_INT 3
33767: PUSH
33768: LD_INT 2
33770: PUSH
33771: EMPTY
33772: LIST
33773: LIST
33774: PUSH
33775: LD_INT 4
33777: PUSH
33778: LD_INT 3
33780: PUSH
33781: EMPTY
33782: LIST
33783: LIST
33784: PUSH
33785: LD_INT 4
33787: PUSH
33788: LD_INT 4
33790: PUSH
33791: EMPTY
33792: LIST
33793: LIST
33794: PUSH
33795: LD_INT 3
33797: PUSH
33798: LD_INT 4
33800: PUSH
33801: EMPTY
33802: LIST
33803: LIST
33804: PUSH
33805: LD_INT 2
33807: PUSH
33808: LD_INT 3
33810: PUSH
33811: EMPTY
33812: LIST
33813: LIST
33814: PUSH
33815: LD_INT 2
33817: PUSH
33818: LD_INT 2
33820: PUSH
33821: EMPTY
33822: LIST
33823: LIST
33824: PUSH
33825: LD_INT 4
33827: PUSH
33828: LD_INT 2
33830: PUSH
33831: EMPTY
33832: LIST
33833: LIST
33834: PUSH
33835: LD_INT 2
33837: PUSH
33838: LD_INT 4
33840: PUSH
33841: EMPTY
33842: LIST
33843: LIST
33844: PUSH
33845: LD_INT 0
33847: PUSH
33848: LD_INT 4
33850: PUSH
33851: EMPTY
33852: LIST
33853: LIST
33854: PUSH
33855: LD_INT 0
33857: PUSH
33858: LD_INT 3
33860: PUSH
33861: EMPTY
33862: LIST
33863: LIST
33864: PUSH
33865: LD_INT 1
33867: PUSH
33868: LD_INT 4
33870: PUSH
33871: EMPTY
33872: LIST
33873: LIST
33874: PUSH
33875: LD_INT 1
33877: PUSH
33878: LD_INT 5
33880: PUSH
33881: EMPTY
33882: LIST
33883: LIST
33884: PUSH
33885: LD_INT 0
33887: PUSH
33888: LD_INT 5
33890: PUSH
33891: EMPTY
33892: LIST
33893: LIST
33894: PUSH
33895: LD_INT 1
33897: NEG
33898: PUSH
33899: LD_INT 4
33901: PUSH
33902: EMPTY
33903: LIST
33904: LIST
33905: PUSH
33906: LD_INT 1
33908: NEG
33909: PUSH
33910: LD_INT 3
33912: PUSH
33913: EMPTY
33914: LIST
33915: LIST
33916: PUSH
33917: LD_INT 2
33919: PUSH
33920: LD_INT 5
33922: PUSH
33923: EMPTY
33924: LIST
33925: LIST
33926: PUSH
33927: LD_INT 2
33929: NEG
33930: PUSH
33931: LD_INT 3
33933: PUSH
33934: EMPTY
33935: LIST
33936: LIST
33937: PUSH
33938: EMPTY
33939: LIST
33940: LIST
33941: LIST
33942: LIST
33943: LIST
33944: LIST
33945: LIST
33946: LIST
33947: LIST
33948: LIST
33949: LIST
33950: LIST
33951: LIST
33952: LIST
33953: LIST
33954: LIST
33955: LIST
33956: LIST
33957: LIST
33958: LIST
33959: LIST
33960: LIST
33961: LIST
33962: LIST
33963: LIST
33964: LIST
33965: LIST
33966: LIST
33967: LIST
33968: LIST
33969: LIST
33970: LIST
33971: LIST
33972: LIST
33973: LIST
33974: LIST
33975: LIST
33976: LIST
33977: LIST
33978: LIST
33979: LIST
33980: LIST
33981: LIST
33982: LIST
33983: LIST
33984: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
33985: LD_ADDR_VAR 0 34
33989: PUSH
33990: LD_INT 0
33992: PUSH
33993: LD_INT 4
33995: NEG
33996: PUSH
33997: EMPTY
33998: LIST
33999: LIST
34000: PUSH
34001: LD_INT 0
34003: PUSH
34004: LD_INT 5
34006: NEG
34007: PUSH
34008: EMPTY
34009: LIST
34010: LIST
34011: PUSH
34012: LD_INT 1
34014: PUSH
34015: LD_INT 4
34017: NEG
34018: PUSH
34019: EMPTY
34020: LIST
34021: LIST
34022: PUSH
34023: LD_INT 1
34025: PUSH
34026: LD_INT 3
34028: NEG
34029: PUSH
34030: EMPTY
34031: LIST
34032: LIST
34033: PUSH
34034: LD_INT 0
34036: PUSH
34037: LD_INT 3
34039: NEG
34040: PUSH
34041: EMPTY
34042: LIST
34043: LIST
34044: PUSH
34045: LD_INT 1
34047: NEG
34048: PUSH
34049: LD_INT 4
34051: NEG
34052: PUSH
34053: EMPTY
34054: LIST
34055: LIST
34056: PUSH
34057: LD_INT 1
34059: NEG
34060: PUSH
34061: LD_INT 5
34063: NEG
34064: PUSH
34065: EMPTY
34066: LIST
34067: LIST
34068: PUSH
34069: LD_INT 2
34071: PUSH
34072: LD_INT 3
34074: NEG
34075: PUSH
34076: EMPTY
34077: LIST
34078: LIST
34079: PUSH
34080: LD_INT 2
34082: NEG
34083: PUSH
34084: LD_INT 5
34086: NEG
34087: PUSH
34088: EMPTY
34089: LIST
34090: LIST
34091: PUSH
34092: LD_INT 3
34094: PUSH
34095: LD_INT 0
34097: PUSH
34098: EMPTY
34099: LIST
34100: LIST
34101: PUSH
34102: LD_INT 3
34104: PUSH
34105: LD_INT 1
34107: NEG
34108: PUSH
34109: EMPTY
34110: LIST
34111: LIST
34112: PUSH
34113: LD_INT 4
34115: PUSH
34116: LD_INT 0
34118: PUSH
34119: EMPTY
34120: LIST
34121: LIST
34122: PUSH
34123: LD_INT 4
34125: PUSH
34126: LD_INT 1
34128: PUSH
34129: EMPTY
34130: LIST
34131: LIST
34132: PUSH
34133: LD_INT 3
34135: PUSH
34136: LD_INT 1
34138: PUSH
34139: EMPTY
34140: LIST
34141: LIST
34142: PUSH
34143: LD_INT 2
34145: PUSH
34146: LD_INT 0
34148: PUSH
34149: EMPTY
34150: LIST
34151: LIST
34152: PUSH
34153: LD_INT 2
34155: PUSH
34156: LD_INT 1
34158: NEG
34159: PUSH
34160: EMPTY
34161: LIST
34162: LIST
34163: PUSH
34164: LD_INT 2
34166: PUSH
34167: LD_INT 2
34169: NEG
34170: PUSH
34171: EMPTY
34172: LIST
34173: LIST
34174: PUSH
34175: LD_INT 4
34177: PUSH
34178: LD_INT 2
34180: PUSH
34181: EMPTY
34182: LIST
34183: LIST
34184: PUSH
34185: LD_INT 4
34187: PUSH
34188: LD_INT 4
34190: PUSH
34191: EMPTY
34192: LIST
34193: LIST
34194: PUSH
34195: LD_INT 4
34197: PUSH
34198: LD_INT 3
34200: PUSH
34201: EMPTY
34202: LIST
34203: LIST
34204: PUSH
34205: LD_INT 5
34207: PUSH
34208: LD_INT 4
34210: PUSH
34211: EMPTY
34212: LIST
34213: LIST
34214: PUSH
34215: LD_INT 5
34217: PUSH
34218: LD_INT 5
34220: PUSH
34221: EMPTY
34222: LIST
34223: LIST
34224: PUSH
34225: LD_INT 4
34227: PUSH
34228: LD_INT 5
34230: PUSH
34231: EMPTY
34232: LIST
34233: LIST
34234: PUSH
34235: LD_INT 3
34237: PUSH
34238: LD_INT 4
34240: PUSH
34241: EMPTY
34242: LIST
34243: LIST
34244: PUSH
34245: LD_INT 3
34247: PUSH
34248: LD_INT 3
34250: PUSH
34251: EMPTY
34252: LIST
34253: LIST
34254: PUSH
34255: LD_INT 5
34257: PUSH
34258: LD_INT 3
34260: PUSH
34261: EMPTY
34262: LIST
34263: LIST
34264: PUSH
34265: LD_INT 3
34267: PUSH
34268: LD_INT 5
34270: PUSH
34271: EMPTY
34272: LIST
34273: LIST
34274: PUSH
34275: LD_INT 0
34277: PUSH
34278: LD_INT 3
34280: PUSH
34281: EMPTY
34282: LIST
34283: LIST
34284: PUSH
34285: LD_INT 0
34287: PUSH
34288: LD_INT 2
34290: PUSH
34291: EMPTY
34292: LIST
34293: LIST
34294: PUSH
34295: LD_INT 1
34297: PUSH
34298: LD_INT 3
34300: PUSH
34301: EMPTY
34302: LIST
34303: LIST
34304: PUSH
34305: LD_INT 1
34307: PUSH
34308: LD_INT 4
34310: PUSH
34311: EMPTY
34312: LIST
34313: LIST
34314: PUSH
34315: LD_INT 0
34317: PUSH
34318: LD_INT 4
34320: PUSH
34321: EMPTY
34322: LIST
34323: LIST
34324: PUSH
34325: LD_INT 1
34327: NEG
34328: PUSH
34329: LD_INT 3
34331: PUSH
34332: EMPTY
34333: LIST
34334: LIST
34335: PUSH
34336: LD_INT 1
34338: NEG
34339: PUSH
34340: LD_INT 2
34342: PUSH
34343: EMPTY
34344: LIST
34345: LIST
34346: PUSH
34347: LD_INT 2
34349: PUSH
34350: LD_INT 4
34352: PUSH
34353: EMPTY
34354: LIST
34355: LIST
34356: PUSH
34357: LD_INT 2
34359: NEG
34360: PUSH
34361: LD_INT 2
34363: PUSH
34364: EMPTY
34365: LIST
34366: LIST
34367: PUSH
34368: LD_INT 4
34370: NEG
34371: PUSH
34372: LD_INT 0
34374: PUSH
34375: EMPTY
34376: LIST
34377: LIST
34378: PUSH
34379: LD_INT 4
34381: NEG
34382: PUSH
34383: LD_INT 1
34385: NEG
34386: PUSH
34387: EMPTY
34388: LIST
34389: LIST
34390: PUSH
34391: LD_INT 3
34393: NEG
34394: PUSH
34395: LD_INT 0
34397: PUSH
34398: EMPTY
34399: LIST
34400: LIST
34401: PUSH
34402: LD_INT 3
34404: NEG
34405: PUSH
34406: LD_INT 1
34408: PUSH
34409: EMPTY
34410: LIST
34411: LIST
34412: PUSH
34413: LD_INT 4
34415: NEG
34416: PUSH
34417: LD_INT 1
34419: PUSH
34420: EMPTY
34421: LIST
34422: LIST
34423: PUSH
34424: LD_INT 5
34426: NEG
34427: PUSH
34428: LD_INT 0
34430: PUSH
34431: EMPTY
34432: LIST
34433: LIST
34434: PUSH
34435: LD_INT 5
34437: NEG
34438: PUSH
34439: LD_INT 1
34441: NEG
34442: PUSH
34443: EMPTY
34444: LIST
34445: LIST
34446: PUSH
34447: LD_INT 5
34449: NEG
34450: PUSH
34451: LD_INT 2
34453: NEG
34454: PUSH
34455: EMPTY
34456: LIST
34457: LIST
34458: PUSH
34459: LD_INT 3
34461: NEG
34462: PUSH
34463: LD_INT 2
34465: PUSH
34466: EMPTY
34467: LIST
34468: LIST
34469: PUSH
34470: EMPTY
34471: LIST
34472: LIST
34473: LIST
34474: LIST
34475: LIST
34476: LIST
34477: LIST
34478: LIST
34479: LIST
34480: LIST
34481: LIST
34482: LIST
34483: LIST
34484: LIST
34485: LIST
34486: LIST
34487: LIST
34488: LIST
34489: LIST
34490: LIST
34491: LIST
34492: LIST
34493: LIST
34494: LIST
34495: LIST
34496: LIST
34497: LIST
34498: LIST
34499: LIST
34500: LIST
34501: LIST
34502: LIST
34503: LIST
34504: LIST
34505: LIST
34506: LIST
34507: LIST
34508: LIST
34509: LIST
34510: LIST
34511: LIST
34512: LIST
34513: LIST
34514: LIST
34515: LIST
34516: ST_TO_ADDR
// end ; end ;
34517: GO 34520
34519: POP
// case btype of b_depot , b_warehouse :
34520: LD_VAR 0 1
34524: PUSH
34525: LD_INT 0
34527: DOUBLE
34528: EQUAL
34529: IFTRUE 34539
34531: LD_INT 1
34533: DOUBLE
34534: EQUAL
34535: IFTRUE 34539
34537: GO 34740
34539: POP
// case nation of nation_american :
34540: LD_VAR 0 5
34544: PUSH
34545: LD_INT 1
34547: DOUBLE
34548: EQUAL
34549: IFTRUE 34553
34551: GO 34609
34553: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
34554: LD_ADDR_VAR 0 9
34558: PUSH
34559: LD_VAR 0 11
34563: PUSH
34564: LD_VAR 0 12
34568: PUSH
34569: LD_VAR 0 13
34573: PUSH
34574: LD_VAR 0 14
34578: PUSH
34579: LD_VAR 0 15
34583: PUSH
34584: LD_VAR 0 16
34588: PUSH
34589: EMPTY
34590: LIST
34591: LIST
34592: LIST
34593: LIST
34594: LIST
34595: LIST
34596: PUSH
34597: LD_VAR 0 4
34601: PUSH
34602: LD_INT 1
34604: PLUS
34605: ARRAY
34606: ST_TO_ADDR
34607: GO 34738
34609: LD_INT 2
34611: DOUBLE
34612: EQUAL
34613: IFTRUE 34617
34615: GO 34673
34617: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
34618: LD_ADDR_VAR 0 9
34622: PUSH
34623: LD_VAR 0 17
34627: PUSH
34628: LD_VAR 0 18
34632: PUSH
34633: LD_VAR 0 19
34637: PUSH
34638: LD_VAR 0 20
34642: PUSH
34643: LD_VAR 0 21
34647: PUSH
34648: LD_VAR 0 22
34652: PUSH
34653: EMPTY
34654: LIST
34655: LIST
34656: LIST
34657: LIST
34658: LIST
34659: LIST
34660: PUSH
34661: LD_VAR 0 4
34665: PUSH
34666: LD_INT 1
34668: PLUS
34669: ARRAY
34670: ST_TO_ADDR
34671: GO 34738
34673: LD_INT 3
34675: DOUBLE
34676: EQUAL
34677: IFTRUE 34681
34679: GO 34737
34681: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
34682: LD_ADDR_VAR 0 9
34686: PUSH
34687: LD_VAR 0 23
34691: PUSH
34692: LD_VAR 0 24
34696: PUSH
34697: LD_VAR 0 25
34701: PUSH
34702: LD_VAR 0 26
34706: PUSH
34707: LD_VAR 0 27
34711: PUSH
34712: LD_VAR 0 28
34716: PUSH
34717: EMPTY
34718: LIST
34719: LIST
34720: LIST
34721: LIST
34722: LIST
34723: LIST
34724: PUSH
34725: LD_VAR 0 4
34729: PUSH
34730: LD_INT 1
34732: PLUS
34733: ARRAY
34734: ST_TO_ADDR
34735: GO 34738
34737: POP
34738: GO 35293
34740: LD_INT 2
34742: DOUBLE
34743: EQUAL
34744: IFTRUE 34754
34746: LD_INT 3
34748: DOUBLE
34749: EQUAL
34750: IFTRUE 34754
34752: GO 34810
34754: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
34755: LD_ADDR_VAR 0 9
34759: PUSH
34760: LD_VAR 0 29
34764: PUSH
34765: LD_VAR 0 30
34769: PUSH
34770: LD_VAR 0 31
34774: PUSH
34775: LD_VAR 0 32
34779: PUSH
34780: LD_VAR 0 33
34784: PUSH
34785: LD_VAR 0 34
34789: PUSH
34790: EMPTY
34791: LIST
34792: LIST
34793: LIST
34794: LIST
34795: LIST
34796: LIST
34797: PUSH
34798: LD_VAR 0 4
34802: PUSH
34803: LD_INT 1
34805: PLUS
34806: ARRAY
34807: ST_TO_ADDR
34808: GO 35293
34810: LD_INT 16
34812: DOUBLE
34813: EQUAL
34814: IFTRUE 34872
34816: LD_INT 17
34818: DOUBLE
34819: EQUAL
34820: IFTRUE 34872
34822: LD_INT 18
34824: DOUBLE
34825: EQUAL
34826: IFTRUE 34872
34828: LD_INT 19
34830: DOUBLE
34831: EQUAL
34832: IFTRUE 34872
34834: LD_INT 22
34836: DOUBLE
34837: EQUAL
34838: IFTRUE 34872
34840: LD_INT 20
34842: DOUBLE
34843: EQUAL
34844: IFTRUE 34872
34846: LD_INT 21
34848: DOUBLE
34849: EQUAL
34850: IFTRUE 34872
34852: LD_INT 23
34854: DOUBLE
34855: EQUAL
34856: IFTRUE 34872
34858: LD_INT 24
34860: DOUBLE
34861: EQUAL
34862: IFTRUE 34872
34864: LD_INT 25
34866: DOUBLE
34867: EQUAL
34868: IFTRUE 34872
34870: GO 34928
34872: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
34873: LD_ADDR_VAR 0 9
34877: PUSH
34878: LD_VAR 0 35
34882: PUSH
34883: LD_VAR 0 36
34887: PUSH
34888: LD_VAR 0 37
34892: PUSH
34893: LD_VAR 0 38
34897: PUSH
34898: LD_VAR 0 39
34902: PUSH
34903: LD_VAR 0 40
34907: PUSH
34908: EMPTY
34909: LIST
34910: LIST
34911: LIST
34912: LIST
34913: LIST
34914: LIST
34915: PUSH
34916: LD_VAR 0 4
34920: PUSH
34921: LD_INT 1
34923: PLUS
34924: ARRAY
34925: ST_TO_ADDR
34926: GO 35293
34928: LD_INT 6
34930: DOUBLE
34931: EQUAL
34932: IFTRUE 34984
34934: LD_INT 7
34936: DOUBLE
34937: EQUAL
34938: IFTRUE 34984
34940: LD_INT 8
34942: DOUBLE
34943: EQUAL
34944: IFTRUE 34984
34946: LD_INT 13
34948: DOUBLE
34949: EQUAL
34950: IFTRUE 34984
34952: LD_INT 12
34954: DOUBLE
34955: EQUAL
34956: IFTRUE 34984
34958: LD_INT 15
34960: DOUBLE
34961: EQUAL
34962: IFTRUE 34984
34964: LD_INT 11
34966: DOUBLE
34967: EQUAL
34968: IFTRUE 34984
34970: LD_INT 14
34972: DOUBLE
34973: EQUAL
34974: IFTRUE 34984
34976: LD_INT 10
34978: DOUBLE
34979: EQUAL
34980: IFTRUE 34984
34982: GO 35040
34984: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
34985: LD_ADDR_VAR 0 9
34989: PUSH
34990: LD_VAR 0 41
34994: PUSH
34995: LD_VAR 0 42
34999: PUSH
35000: LD_VAR 0 43
35004: PUSH
35005: LD_VAR 0 44
35009: PUSH
35010: LD_VAR 0 45
35014: PUSH
35015: LD_VAR 0 46
35019: PUSH
35020: EMPTY
35021: LIST
35022: LIST
35023: LIST
35024: LIST
35025: LIST
35026: LIST
35027: PUSH
35028: LD_VAR 0 4
35032: PUSH
35033: LD_INT 1
35035: PLUS
35036: ARRAY
35037: ST_TO_ADDR
35038: GO 35293
35040: LD_INT 36
35042: DOUBLE
35043: EQUAL
35044: IFTRUE 35048
35046: GO 35104
35048: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
35049: LD_ADDR_VAR 0 9
35053: PUSH
35054: LD_VAR 0 47
35058: PUSH
35059: LD_VAR 0 48
35063: PUSH
35064: LD_VAR 0 49
35068: PUSH
35069: LD_VAR 0 50
35073: PUSH
35074: LD_VAR 0 51
35078: PUSH
35079: LD_VAR 0 52
35083: PUSH
35084: EMPTY
35085: LIST
35086: LIST
35087: LIST
35088: LIST
35089: LIST
35090: LIST
35091: PUSH
35092: LD_VAR 0 4
35096: PUSH
35097: LD_INT 1
35099: PLUS
35100: ARRAY
35101: ST_TO_ADDR
35102: GO 35293
35104: LD_INT 4
35106: DOUBLE
35107: EQUAL
35108: IFTRUE 35130
35110: LD_INT 5
35112: DOUBLE
35113: EQUAL
35114: IFTRUE 35130
35116: LD_INT 34
35118: DOUBLE
35119: EQUAL
35120: IFTRUE 35130
35122: LD_INT 37
35124: DOUBLE
35125: EQUAL
35126: IFTRUE 35130
35128: GO 35186
35130: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
35131: LD_ADDR_VAR 0 9
35135: PUSH
35136: LD_VAR 0 53
35140: PUSH
35141: LD_VAR 0 54
35145: PUSH
35146: LD_VAR 0 55
35150: PUSH
35151: LD_VAR 0 56
35155: PUSH
35156: LD_VAR 0 57
35160: PUSH
35161: LD_VAR 0 58
35165: PUSH
35166: EMPTY
35167: LIST
35168: LIST
35169: LIST
35170: LIST
35171: LIST
35172: LIST
35173: PUSH
35174: LD_VAR 0 4
35178: PUSH
35179: LD_INT 1
35181: PLUS
35182: ARRAY
35183: ST_TO_ADDR
35184: GO 35293
35186: LD_INT 31
35188: DOUBLE
35189: EQUAL
35190: IFTRUE 35236
35192: LD_INT 32
35194: DOUBLE
35195: EQUAL
35196: IFTRUE 35236
35198: LD_INT 33
35200: DOUBLE
35201: EQUAL
35202: IFTRUE 35236
35204: LD_INT 27
35206: DOUBLE
35207: EQUAL
35208: IFTRUE 35236
35210: LD_INT 26
35212: DOUBLE
35213: EQUAL
35214: IFTRUE 35236
35216: LD_INT 28
35218: DOUBLE
35219: EQUAL
35220: IFTRUE 35236
35222: LD_INT 29
35224: DOUBLE
35225: EQUAL
35226: IFTRUE 35236
35228: LD_INT 30
35230: DOUBLE
35231: EQUAL
35232: IFTRUE 35236
35234: GO 35292
35236: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
35237: LD_ADDR_VAR 0 9
35241: PUSH
35242: LD_VAR 0 59
35246: PUSH
35247: LD_VAR 0 60
35251: PUSH
35252: LD_VAR 0 61
35256: PUSH
35257: LD_VAR 0 62
35261: PUSH
35262: LD_VAR 0 63
35266: PUSH
35267: LD_VAR 0 64
35271: PUSH
35272: EMPTY
35273: LIST
35274: LIST
35275: LIST
35276: LIST
35277: LIST
35278: LIST
35279: PUSH
35280: LD_VAR 0 4
35284: PUSH
35285: LD_INT 1
35287: PLUS
35288: ARRAY
35289: ST_TO_ADDR
35290: GO 35293
35292: POP
// temp_list2 = [ ] ;
35293: LD_ADDR_VAR 0 10
35297: PUSH
35298: EMPTY
35299: ST_TO_ADDR
// for i in temp_list do
35300: LD_ADDR_VAR 0 8
35304: PUSH
35305: LD_VAR 0 9
35309: PUSH
35310: FOR_IN
35311: IFFALSE 35363
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
35313: LD_ADDR_VAR 0 10
35317: PUSH
35318: LD_VAR 0 10
35322: PUSH
35323: LD_VAR 0 8
35327: PUSH
35328: LD_INT 1
35330: ARRAY
35331: PUSH
35332: LD_VAR 0 2
35336: PLUS
35337: PUSH
35338: LD_VAR 0 8
35342: PUSH
35343: LD_INT 2
35345: ARRAY
35346: PUSH
35347: LD_VAR 0 3
35351: PLUS
35352: PUSH
35353: EMPTY
35354: LIST
35355: LIST
35356: PUSH
35357: EMPTY
35358: LIST
35359: ADD
35360: ST_TO_ADDR
35361: GO 35310
35363: POP
35364: POP
// result = temp_list2 ;
35365: LD_ADDR_VAR 0 7
35369: PUSH
35370: LD_VAR 0 10
35374: ST_TO_ADDR
// end ;
35375: LD_VAR 0 7
35379: RET
// export function EnemyInRange ( unit , dist ) ; begin
35380: LD_INT 0
35382: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
35383: LD_ADDR_VAR 0 3
35387: PUSH
35388: LD_VAR 0 1
35392: PPUSH
35393: CALL_OW 255
35397: PPUSH
35398: LD_VAR 0 1
35402: PPUSH
35403: CALL_OW 250
35407: PPUSH
35408: LD_VAR 0 1
35412: PPUSH
35413: CALL_OW 251
35417: PPUSH
35418: LD_VAR 0 2
35422: PPUSH
35423: CALL 8753 0 4
35427: PUSH
35428: LD_INT 4
35430: ARRAY
35431: ST_TO_ADDR
// end ;
35432: LD_VAR 0 3
35436: RET
// export function PlayerSeeMe ( unit ) ; begin
35437: LD_INT 0
35439: PPUSH
// result := See ( your_side , unit ) ;
35440: LD_ADDR_VAR 0 2
35444: PUSH
35445: LD_OWVAR 2
35449: PPUSH
35450: LD_VAR 0 1
35454: PPUSH
35455: CALL_OW 292
35459: ST_TO_ADDR
// end ;
35460: LD_VAR 0 2
35464: RET
// export function ReverseDir ( unit ) ; begin
35465: LD_INT 0
35467: PPUSH
// if not unit then
35468: LD_VAR 0 1
35472: NOT
35473: IFFALSE 35477
// exit ;
35475: GO 35500
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
35477: LD_ADDR_VAR 0 2
35481: PUSH
35482: LD_VAR 0 1
35486: PPUSH
35487: CALL_OW 254
35491: PUSH
35492: LD_INT 3
35494: PLUS
35495: PUSH
35496: LD_INT 6
35498: MOD
35499: ST_TO_ADDR
// end ;
35500: LD_VAR 0 2
35504: RET
// export function ReverseArray ( array ) ; var i ; begin
35505: LD_INT 0
35507: PPUSH
35508: PPUSH
// if not array then
35509: LD_VAR 0 1
35513: NOT
35514: IFFALSE 35518
// exit ;
35516: GO 35573
// result := [ ] ;
35518: LD_ADDR_VAR 0 2
35522: PUSH
35523: EMPTY
35524: ST_TO_ADDR
// for i := array downto 1 do
35525: LD_ADDR_VAR 0 3
35529: PUSH
35530: DOUBLE
35531: LD_VAR 0 1
35535: INC
35536: ST_TO_ADDR
35537: LD_INT 1
35539: PUSH
35540: FOR_DOWNTO
35541: IFFALSE 35571
// result := Join ( result , array [ i ] ) ;
35543: LD_ADDR_VAR 0 2
35547: PUSH
35548: LD_VAR 0 2
35552: PPUSH
35553: LD_VAR 0 1
35557: PUSH
35558: LD_VAR 0 3
35562: ARRAY
35563: PPUSH
35564: CALL 40218 0 2
35568: ST_TO_ADDR
35569: GO 35540
35571: POP
35572: POP
// end ;
35573: LD_VAR 0 2
35577: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
35578: LD_INT 0
35580: PPUSH
35581: PPUSH
35582: PPUSH
35583: PPUSH
35584: PPUSH
35585: PPUSH
// if not unit or not hexes then
35586: LD_VAR 0 1
35590: NOT
35591: PUSH
35592: LD_VAR 0 2
35596: NOT
35597: OR
35598: IFFALSE 35602
// exit ;
35600: GO 35725
// dist := 9999 ;
35602: LD_ADDR_VAR 0 5
35606: PUSH
35607: LD_INT 9999
35609: ST_TO_ADDR
// for i = 1 to hexes do
35610: LD_ADDR_VAR 0 4
35614: PUSH
35615: DOUBLE
35616: LD_INT 1
35618: DEC
35619: ST_TO_ADDR
35620: LD_VAR 0 2
35624: PUSH
35625: FOR_TO
35626: IFFALSE 35713
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35628: LD_ADDR_VAR 0 6
35632: PUSH
35633: LD_VAR 0 1
35637: PPUSH
35638: LD_VAR 0 2
35642: PUSH
35643: LD_VAR 0 4
35647: ARRAY
35648: PUSH
35649: LD_INT 1
35651: ARRAY
35652: PPUSH
35653: LD_VAR 0 2
35657: PUSH
35658: LD_VAR 0 4
35662: ARRAY
35663: PUSH
35664: LD_INT 2
35666: ARRAY
35667: PPUSH
35668: CALL_OW 297
35672: ST_TO_ADDR
// if tdist < dist then
35673: LD_VAR 0 6
35677: PUSH
35678: LD_VAR 0 5
35682: LESS
35683: IFFALSE 35711
// begin hex := hexes [ i ] ;
35685: LD_ADDR_VAR 0 8
35689: PUSH
35690: LD_VAR 0 2
35694: PUSH
35695: LD_VAR 0 4
35699: ARRAY
35700: ST_TO_ADDR
// dist := tdist ;
35701: LD_ADDR_VAR 0 5
35705: PUSH
35706: LD_VAR 0 6
35710: ST_TO_ADDR
// end ; end ;
35711: GO 35625
35713: POP
35714: POP
// result := hex ;
35715: LD_ADDR_VAR 0 3
35719: PUSH
35720: LD_VAR 0 8
35724: ST_TO_ADDR
// end ;
35725: LD_VAR 0 3
35729: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
35730: LD_INT 0
35732: PPUSH
35733: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
35734: LD_VAR 0 1
35738: NOT
35739: PUSH
35740: LD_VAR 0 1
35744: PUSH
35745: LD_INT 21
35747: PUSH
35748: LD_INT 2
35750: PUSH
35751: EMPTY
35752: LIST
35753: LIST
35754: PUSH
35755: LD_INT 23
35757: PUSH
35758: LD_INT 2
35760: PUSH
35761: EMPTY
35762: LIST
35763: LIST
35764: PUSH
35765: EMPTY
35766: LIST
35767: LIST
35768: PPUSH
35769: CALL_OW 69
35773: IN
35774: NOT
35775: OR
35776: IFFALSE 35780
// exit ;
35778: GO 35827
// for i = 1 to 3 do
35780: LD_ADDR_VAR 0 3
35784: PUSH
35785: DOUBLE
35786: LD_INT 1
35788: DEC
35789: ST_TO_ADDR
35790: LD_INT 3
35792: PUSH
35793: FOR_TO
35794: IFFALSE 35825
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
35796: LD_VAR 0 1
35800: PPUSH
35801: CALL_OW 250
35805: PPUSH
35806: LD_VAR 0 1
35810: PPUSH
35811: CALL_OW 251
35815: PPUSH
35816: LD_INT 1
35818: PPUSH
35819: CALL_OW 453
35823: GO 35793
35825: POP
35826: POP
// end ;
35827: LD_VAR 0 2
35831: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
35832: LD_INT 0
35834: PPUSH
35835: PPUSH
35836: PPUSH
35837: PPUSH
35838: PPUSH
35839: PPUSH
// if not unit or not enemy_unit then
35840: LD_VAR 0 1
35844: NOT
35845: PUSH
35846: LD_VAR 0 2
35850: NOT
35851: OR
35852: IFFALSE 35856
// exit ;
35854: GO 36323
// if GetLives ( i ) < 250 then
35856: LD_VAR 0 4
35860: PPUSH
35861: CALL_OW 256
35865: PUSH
35866: LD_INT 250
35868: LESS
35869: IFFALSE 35882
// begin ComAutodestruct ( i ) ;
35871: LD_VAR 0 4
35875: PPUSH
35876: CALL 35730 0 1
// exit ;
35880: GO 36323
// end ; x := GetX ( enemy_unit ) ;
35882: LD_ADDR_VAR 0 7
35886: PUSH
35887: LD_VAR 0 2
35891: PPUSH
35892: CALL_OW 250
35896: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
35897: LD_ADDR_VAR 0 8
35901: PUSH
35902: LD_VAR 0 2
35906: PPUSH
35907: CALL_OW 251
35911: ST_TO_ADDR
// if not x or not y then
35912: LD_VAR 0 7
35916: NOT
35917: PUSH
35918: LD_VAR 0 8
35922: NOT
35923: OR
35924: IFFALSE 35928
// exit ;
35926: GO 36323
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
35928: LD_ADDR_VAR 0 6
35932: PUSH
35933: LD_VAR 0 7
35937: PPUSH
35938: LD_INT 0
35940: PPUSH
35941: LD_INT 4
35943: PPUSH
35944: CALL_OW 272
35948: PUSH
35949: LD_VAR 0 8
35953: PPUSH
35954: LD_INT 0
35956: PPUSH
35957: LD_INT 4
35959: PPUSH
35960: CALL_OW 273
35964: PUSH
35965: EMPTY
35966: LIST
35967: LIST
35968: PUSH
35969: LD_VAR 0 7
35973: PPUSH
35974: LD_INT 1
35976: PPUSH
35977: LD_INT 4
35979: PPUSH
35980: CALL_OW 272
35984: PUSH
35985: LD_VAR 0 8
35989: PPUSH
35990: LD_INT 1
35992: PPUSH
35993: LD_INT 4
35995: PPUSH
35996: CALL_OW 273
36000: PUSH
36001: EMPTY
36002: LIST
36003: LIST
36004: PUSH
36005: LD_VAR 0 7
36009: PPUSH
36010: LD_INT 2
36012: PPUSH
36013: LD_INT 4
36015: PPUSH
36016: CALL_OW 272
36020: PUSH
36021: LD_VAR 0 8
36025: PPUSH
36026: LD_INT 2
36028: PPUSH
36029: LD_INT 4
36031: PPUSH
36032: CALL_OW 273
36036: PUSH
36037: EMPTY
36038: LIST
36039: LIST
36040: PUSH
36041: LD_VAR 0 7
36045: PPUSH
36046: LD_INT 3
36048: PPUSH
36049: LD_INT 4
36051: PPUSH
36052: CALL_OW 272
36056: PUSH
36057: LD_VAR 0 8
36061: PPUSH
36062: LD_INT 3
36064: PPUSH
36065: LD_INT 4
36067: PPUSH
36068: CALL_OW 273
36072: PUSH
36073: EMPTY
36074: LIST
36075: LIST
36076: PUSH
36077: LD_VAR 0 7
36081: PPUSH
36082: LD_INT 4
36084: PPUSH
36085: LD_INT 4
36087: PPUSH
36088: CALL_OW 272
36092: PUSH
36093: LD_VAR 0 8
36097: PPUSH
36098: LD_INT 4
36100: PPUSH
36101: LD_INT 4
36103: PPUSH
36104: CALL_OW 273
36108: PUSH
36109: EMPTY
36110: LIST
36111: LIST
36112: PUSH
36113: LD_VAR 0 7
36117: PPUSH
36118: LD_INT 5
36120: PPUSH
36121: LD_INT 4
36123: PPUSH
36124: CALL_OW 272
36128: PUSH
36129: LD_VAR 0 8
36133: PPUSH
36134: LD_INT 5
36136: PPUSH
36137: LD_INT 4
36139: PPUSH
36140: CALL_OW 273
36144: PUSH
36145: EMPTY
36146: LIST
36147: LIST
36148: PUSH
36149: EMPTY
36150: LIST
36151: LIST
36152: LIST
36153: LIST
36154: LIST
36155: LIST
36156: ST_TO_ADDR
// for i = tmp downto 1 do
36157: LD_ADDR_VAR 0 4
36161: PUSH
36162: DOUBLE
36163: LD_VAR 0 6
36167: INC
36168: ST_TO_ADDR
36169: LD_INT 1
36171: PUSH
36172: FOR_DOWNTO
36173: IFFALSE 36274
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
36175: LD_VAR 0 6
36179: PUSH
36180: LD_VAR 0 4
36184: ARRAY
36185: PUSH
36186: LD_INT 1
36188: ARRAY
36189: PPUSH
36190: LD_VAR 0 6
36194: PUSH
36195: LD_VAR 0 4
36199: ARRAY
36200: PUSH
36201: LD_INT 2
36203: ARRAY
36204: PPUSH
36205: CALL_OW 488
36209: NOT
36210: PUSH
36211: LD_VAR 0 6
36215: PUSH
36216: LD_VAR 0 4
36220: ARRAY
36221: PUSH
36222: LD_INT 1
36224: ARRAY
36225: PPUSH
36226: LD_VAR 0 6
36230: PUSH
36231: LD_VAR 0 4
36235: ARRAY
36236: PUSH
36237: LD_INT 2
36239: ARRAY
36240: PPUSH
36241: CALL_OW 428
36245: PUSH
36246: LD_INT 0
36248: NONEQUAL
36249: OR
36250: IFFALSE 36272
// tmp := Delete ( tmp , i ) ;
36252: LD_ADDR_VAR 0 6
36256: PUSH
36257: LD_VAR 0 6
36261: PPUSH
36262: LD_VAR 0 4
36266: PPUSH
36267: CALL_OW 3
36271: ST_TO_ADDR
36272: GO 36172
36274: POP
36275: POP
// j := GetClosestHex ( unit , tmp ) ;
36276: LD_ADDR_VAR 0 5
36280: PUSH
36281: LD_VAR 0 1
36285: PPUSH
36286: LD_VAR 0 6
36290: PPUSH
36291: CALL 35578 0 2
36295: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
36296: LD_VAR 0 1
36300: PPUSH
36301: LD_VAR 0 5
36305: PUSH
36306: LD_INT 1
36308: ARRAY
36309: PPUSH
36310: LD_VAR 0 5
36314: PUSH
36315: LD_INT 2
36317: ARRAY
36318: PPUSH
36319: CALL_OW 111
// end ;
36323: LD_VAR 0 3
36327: RET
// export function PrepareApemanSoldier ( ) ; begin
36328: LD_INT 0
36330: PPUSH
// uc_nation := 0 ;
36331: LD_ADDR_OWVAR 21
36335: PUSH
36336: LD_INT 0
36338: ST_TO_ADDR
// hc_sex := sex_male ;
36339: LD_ADDR_OWVAR 27
36343: PUSH
36344: LD_INT 1
36346: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
36347: LD_ADDR_OWVAR 28
36351: PUSH
36352: LD_INT 15
36354: ST_TO_ADDR
// hc_gallery :=  ;
36355: LD_ADDR_OWVAR 33
36359: PUSH
36360: LD_STRING 
36362: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36363: LD_ADDR_OWVAR 31
36367: PUSH
36368: LD_INT 0
36370: PPUSH
36371: LD_INT 3
36373: PPUSH
36374: CALL_OW 12
36378: PUSH
36379: LD_INT 0
36381: PPUSH
36382: LD_INT 3
36384: PPUSH
36385: CALL_OW 12
36389: PUSH
36390: LD_INT 0
36392: PUSH
36393: LD_INT 0
36395: PUSH
36396: EMPTY
36397: LIST
36398: LIST
36399: LIST
36400: LIST
36401: ST_TO_ADDR
// end ;
36402: LD_VAR 0 1
36406: RET
// export function PrepareApemanEngineer ( ) ; begin
36407: LD_INT 0
36409: PPUSH
// uc_nation := 0 ;
36410: LD_ADDR_OWVAR 21
36414: PUSH
36415: LD_INT 0
36417: ST_TO_ADDR
// hc_sex := sex_male ;
36418: LD_ADDR_OWVAR 27
36422: PUSH
36423: LD_INT 1
36425: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
36426: LD_ADDR_OWVAR 28
36430: PUSH
36431: LD_INT 16
36433: ST_TO_ADDR
// hc_gallery :=  ;
36434: LD_ADDR_OWVAR 33
36438: PUSH
36439: LD_STRING 
36441: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36442: LD_ADDR_OWVAR 31
36446: PUSH
36447: LD_INT 0
36449: PPUSH
36450: LD_INT 3
36452: PPUSH
36453: CALL_OW 12
36457: PUSH
36458: LD_INT 0
36460: PPUSH
36461: LD_INT 3
36463: PPUSH
36464: CALL_OW 12
36468: PUSH
36469: LD_INT 0
36471: PUSH
36472: LD_INT 0
36474: PUSH
36475: EMPTY
36476: LIST
36477: LIST
36478: LIST
36479: LIST
36480: ST_TO_ADDR
// end ;
36481: LD_VAR 0 1
36485: RET
// export function PrepareApeman ( agressivity ) ; begin
36486: LD_INT 0
36488: PPUSH
// uc_side := 0 ;
36489: LD_ADDR_OWVAR 20
36493: PUSH
36494: LD_INT 0
36496: ST_TO_ADDR
// uc_nation := 0 ;
36497: LD_ADDR_OWVAR 21
36501: PUSH
36502: LD_INT 0
36504: ST_TO_ADDR
// hc_sex := sex_male ;
36505: LD_ADDR_OWVAR 27
36509: PUSH
36510: LD_INT 1
36512: ST_TO_ADDR
// hc_class := class_apeman ;
36513: LD_ADDR_OWVAR 28
36517: PUSH
36518: LD_INT 12
36520: ST_TO_ADDR
// hc_gallery :=  ;
36521: LD_ADDR_OWVAR 33
36525: PUSH
36526: LD_STRING 
36528: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
36529: LD_ADDR_OWVAR 35
36533: PUSH
36534: LD_VAR 0 1
36538: NEG
36539: PPUSH
36540: LD_VAR 0 1
36544: PPUSH
36545: CALL_OW 12
36549: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36550: LD_ADDR_OWVAR 31
36554: PUSH
36555: LD_INT 0
36557: PPUSH
36558: LD_INT 3
36560: PPUSH
36561: CALL_OW 12
36565: PUSH
36566: LD_INT 0
36568: PPUSH
36569: LD_INT 3
36571: PPUSH
36572: CALL_OW 12
36576: PUSH
36577: LD_INT 0
36579: PUSH
36580: LD_INT 0
36582: PUSH
36583: EMPTY
36584: LIST
36585: LIST
36586: LIST
36587: LIST
36588: ST_TO_ADDR
// end ;
36589: LD_VAR 0 2
36593: RET
// export function PrepareTiger ( agressivity ) ; begin
36594: LD_INT 0
36596: PPUSH
// uc_side := 0 ;
36597: LD_ADDR_OWVAR 20
36601: PUSH
36602: LD_INT 0
36604: ST_TO_ADDR
// uc_nation := 0 ;
36605: LD_ADDR_OWVAR 21
36609: PUSH
36610: LD_INT 0
36612: ST_TO_ADDR
// hc_class := class_tiger ;
36613: LD_ADDR_OWVAR 28
36617: PUSH
36618: LD_INT 14
36620: ST_TO_ADDR
// hc_gallery :=  ;
36621: LD_ADDR_OWVAR 33
36625: PUSH
36626: LD_STRING 
36628: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
36629: LD_ADDR_OWVAR 35
36633: PUSH
36634: LD_VAR 0 1
36638: NEG
36639: PPUSH
36640: LD_VAR 0 1
36644: PPUSH
36645: CALL_OW 12
36649: ST_TO_ADDR
// end ;
36650: LD_VAR 0 2
36654: RET
// export function PrepareEnchidna ( ) ; begin
36655: LD_INT 0
36657: PPUSH
// uc_side := 0 ;
36658: LD_ADDR_OWVAR 20
36662: PUSH
36663: LD_INT 0
36665: ST_TO_ADDR
// uc_nation := 0 ;
36666: LD_ADDR_OWVAR 21
36670: PUSH
36671: LD_INT 0
36673: ST_TO_ADDR
// hc_class := class_baggie ;
36674: LD_ADDR_OWVAR 28
36678: PUSH
36679: LD_INT 13
36681: ST_TO_ADDR
// hc_gallery :=  ;
36682: LD_ADDR_OWVAR 33
36686: PUSH
36687: LD_STRING 
36689: ST_TO_ADDR
// end ;
36690: LD_VAR 0 1
36694: RET
// export function PrepareFrog ( ) ; begin
36695: LD_INT 0
36697: PPUSH
// uc_side := 0 ;
36698: LD_ADDR_OWVAR 20
36702: PUSH
36703: LD_INT 0
36705: ST_TO_ADDR
// uc_nation := 0 ;
36706: LD_ADDR_OWVAR 21
36710: PUSH
36711: LD_INT 0
36713: ST_TO_ADDR
// hc_class := class_frog ;
36714: LD_ADDR_OWVAR 28
36718: PUSH
36719: LD_INT 19
36721: ST_TO_ADDR
// hc_gallery :=  ;
36722: LD_ADDR_OWVAR 33
36726: PUSH
36727: LD_STRING 
36729: ST_TO_ADDR
// end ;
36730: LD_VAR 0 1
36734: RET
// export function PrepareFish ( ) ; begin
36735: LD_INT 0
36737: PPUSH
// uc_side := 0 ;
36738: LD_ADDR_OWVAR 20
36742: PUSH
36743: LD_INT 0
36745: ST_TO_ADDR
// uc_nation := 0 ;
36746: LD_ADDR_OWVAR 21
36750: PUSH
36751: LD_INT 0
36753: ST_TO_ADDR
// hc_class := class_fish ;
36754: LD_ADDR_OWVAR 28
36758: PUSH
36759: LD_INT 20
36761: ST_TO_ADDR
// hc_gallery :=  ;
36762: LD_ADDR_OWVAR 33
36766: PUSH
36767: LD_STRING 
36769: ST_TO_ADDR
// end ;
36770: LD_VAR 0 1
36774: RET
// export function PrepareBird ( ) ; begin
36775: LD_INT 0
36777: PPUSH
// uc_side := 0 ;
36778: LD_ADDR_OWVAR 20
36782: PUSH
36783: LD_INT 0
36785: ST_TO_ADDR
// uc_nation := 0 ;
36786: LD_ADDR_OWVAR 21
36790: PUSH
36791: LD_INT 0
36793: ST_TO_ADDR
// hc_class := class_phororhacos ;
36794: LD_ADDR_OWVAR 28
36798: PUSH
36799: LD_INT 18
36801: ST_TO_ADDR
// hc_gallery :=  ;
36802: LD_ADDR_OWVAR 33
36806: PUSH
36807: LD_STRING 
36809: ST_TO_ADDR
// end ;
36810: LD_VAR 0 1
36814: RET
// export function PrepareHorse ( ) ; begin
36815: LD_INT 0
36817: PPUSH
// uc_side := 0 ;
36818: LD_ADDR_OWVAR 20
36822: PUSH
36823: LD_INT 0
36825: ST_TO_ADDR
// uc_nation := 0 ;
36826: LD_ADDR_OWVAR 21
36830: PUSH
36831: LD_INT 0
36833: ST_TO_ADDR
// hc_class := class_horse ;
36834: LD_ADDR_OWVAR 28
36838: PUSH
36839: LD_INT 21
36841: ST_TO_ADDR
// hc_gallery :=  ;
36842: LD_ADDR_OWVAR 33
36846: PUSH
36847: LD_STRING 
36849: ST_TO_ADDR
// end ;
36850: LD_VAR 0 1
36854: RET
// export function PrepareMastodont ( ) ; begin
36855: LD_INT 0
36857: PPUSH
// uc_side := 0 ;
36858: LD_ADDR_OWVAR 20
36862: PUSH
36863: LD_INT 0
36865: ST_TO_ADDR
// uc_nation := 0 ;
36866: LD_ADDR_OWVAR 21
36870: PUSH
36871: LD_INT 0
36873: ST_TO_ADDR
// vc_chassis := class_mastodont ;
36874: LD_ADDR_OWVAR 37
36878: PUSH
36879: LD_INT 31
36881: ST_TO_ADDR
// vc_control := control_rider ;
36882: LD_ADDR_OWVAR 38
36886: PUSH
36887: LD_INT 4
36889: ST_TO_ADDR
// end ;
36890: LD_VAR 0 1
36894: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
36895: LD_INT 0
36897: PPUSH
36898: PPUSH
36899: PPUSH
// uc_side = 0 ;
36900: LD_ADDR_OWVAR 20
36904: PUSH
36905: LD_INT 0
36907: ST_TO_ADDR
// uc_nation = 0 ;
36908: LD_ADDR_OWVAR 21
36912: PUSH
36913: LD_INT 0
36915: ST_TO_ADDR
// InitHc_All ( ) ;
36916: CALL_OW 584
// InitVc ;
36920: CALL_OW 20
// if mastodonts then
36924: LD_VAR 0 6
36928: IFFALSE 36995
// for i = 1 to mastodonts do
36930: LD_ADDR_VAR 0 11
36934: PUSH
36935: DOUBLE
36936: LD_INT 1
36938: DEC
36939: ST_TO_ADDR
36940: LD_VAR 0 6
36944: PUSH
36945: FOR_TO
36946: IFFALSE 36993
// begin vc_chassis := 31 ;
36948: LD_ADDR_OWVAR 37
36952: PUSH
36953: LD_INT 31
36955: ST_TO_ADDR
// vc_control := control_rider ;
36956: LD_ADDR_OWVAR 38
36960: PUSH
36961: LD_INT 4
36963: ST_TO_ADDR
// animal := CreateVehicle ;
36964: LD_ADDR_VAR 0 12
36968: PUSH
36969: CALL_OW 45
36973: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36974: LD_VAR 0 12
36978: PPUSH
36979: LD_VAR 0 8
36983: PPUSH
36984: LD_INT 0
36986: PPUSH
36987: CALL 39123 0 3
// end ;
36991: GO 36945
36993: POP
36994: POP
// if horses then
36995: LD_VAR 0 5
36999: IFFALSE 37066
// for i = 1 to horses do
37001: LD_ADDR_VAR 0 11
37005: PUSH
37006: DOUBLE
37007: LD_INT 1
37009: DEC
37010: ST_TO_ADDR
37011: LD_VAR 0 5
37015: PUSH
37016: FOR_TO
37017: IFFALSE 37064
// begin hc_class := 21 ;
37019: LD_ADDR_OWVAR 28
37023: PUSH
37024: LD_INT 21
37026: ST_TO_ADDR
// hc_gallery :=  ;
37027: LD_ADDR_OWVAR 33
37031: PUSH
37032: LD_STRING 
37034: ST_TO_ADDR
// animal := CreateHuman ;
37035: LD_ADDR_VAR 0 12
37039: PUSH
37040: CALL_OW 44
37044: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37045: LD_VAR 0 12
37049: PPUSH
37050: LD_VAR 0 8
37054: PPUSH
37055: LD_INT 0
37057: PPUSH
37058: CALL 39123 0 3
// end ;
37062: GO 37016
37064: POP
37065: POP
// if birds then
37066: LD_VAR 0 1
37070: IFFALSE 37137
// for i = 1 to birds do
37072: LD_ADDR_VAR 0 11
37076: PUSH
37077: DOUBLE
37078: LD_INT 1
37080: DEC
37081: ST_TO_ADDR
37082: LD_VAR 0 1
37086: PUSH
37087: FOR_TO
37088: IFFALSE 37135
// begin hc_class := 18 ;
37090: LD_ADDR_OWVAR 28
37094: PUSH
37095: LD_INT 18
37097: ST_TO_ADDR
// hc_gallery =  ;
37098: LD_ADDR_OWVAR 33
37102: PUSH
37103: LD_STRING 
37105: ST_TO_ADDR
// animal := CreateHuman ;
37106: LD_ADDR_VAR 0 12
37110: PUSH
37111: CALL_OW 44
37115: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37116: LD_VAR 0 12
37120: PPUSH
37121: LD_VAR 0 8
37125: PPUSH
37126: LD_INT 0
37128: PPUSH
37129: CALL 39123 0 3
// end ;
37133: GO 37087
37135: POP
37136: POP
// if tigers then
37137: LD_VAR 0 2
37141: IFFALSE 37225
// for i = 1 to tigers do
37143: LD_ADDR_VAR 0 11
37147: PUSH
37148: DOUBLE
37149: LD_INT 1
37151: DEC
37152: ST_TO_ADDR
37153: LD_VAR 0 2
37157: PUSH
37158: FOR_TO
37159: IFFALSE 37223
// begin hc_class = class_tiger ;
37161: LD_ADDR_OWVAR 28
37165: PUSH
37166: LD_INT 14
37168: ST_TO_ADDR
// hc_gallery =  ;
37169: LD_ADDR_OWVAR 33
37173: PUSH
37174: LD_STRING 
37176: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
37177: LD_ADDR_OWVAR 35
37181: PUSH
37182: LD_INT 7
37184: NEG
37185: PPUSH
37186: LD_INT 7
37188: PPUSH
37189: CALL_OW 12
37193: ST_TO_ADDR
// animal := CreateHuman ;
37194: LD_ADDR_VAR 0 12
37198: PUSH
37199: CALL_OW 44
37203: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37204: LD_VAR 0 12
37208: PPUSH
37209: LD_VAR 0 8
37213: PPUSH
37214: LD_INT 0
37216: PPUSH
37217: CALL 39123 0 3
// end ;
37221: GO 37158
37223: POP
37224: POP
// if apemans then
37225: LD_VAR 0 3
37229: IFFALSE 37352
// for i = 1 to apemans do
37231: LD_ADDR_VAR 0 11
37235: PUSH
37236: DOUBLE
37237: LD_INT 1
37239: DEC
37240: ST_TO_ADDR
37241: LD_VAR 0 3
37245: PUSH
37246: FOR_TO
37247: IFFALSE 37350
// begin hc_class = class_apeman ;
37249: LD_ADDR_OWVAR 28
37253: PUSH
37254: LD_INT 12
37256: ST_TO_ADDR
// hc_gallery =  ;
37257: LD_ADDR_OWVAR 33
37261: PUSH
37262: LD_STRING 
37264: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
37265: LD_ADDR_OWVAR 35
37269: PUSH
37270: LD_INT 2
37272: NEG
37273: PPUSH
37274: LD_INT 2
37276: PPUSH
37277: CALL_OW 12
37281: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
37282: LD_ADDR_OWVAR 31
37286: PUSH
37287: LD_INT 1
37289: PPUSH
37290: LD_INT 3
37292: PPUSH
37293: CALL_OW 12
37297: PUSH
37298: LD_INT 1
37300: PPUSH
37301: LD_INT 3
37303: PPUSH
37304: CALL_OW 12
37308: PUSH
37309: LD_INT 0
37311: PUSH
37312: LD_INT 0
37314: PUSH
37315: EMPTY
37316: LIST
37317: LIST
37318: LIST
37319: LIST
37320: ST_TO_ADDR
// animal := CreateHuman ;
37321: LD_ADDR_VAR 0 12
37325: PUSH
37326: CALL_OW 44
37330: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37331: LD_VAR 0 12
37335: PPUSH
37336: LD_VAR 0 8
37340: PPUSH
37341: LD_INT 0
37343: PPUSH
37344: CALL 39123 0 3
// end ;
37348: GO 37246
37350: POP
37351: POP
// if enchidnas then
37352: LD_VAR 0 4
37356: IFFALSE 37423
// for i = 1 to enchidnas do
37358: LD_ADDR_VAR 0 11
37362: PUSH
37363: DOUBLE
37364: LD_INT 1
37366: DEC
37367: ST_TO_ADDR
37368: LD_VAR 0 4
37372: PUSH
37373: FOR_TO
37374: IFFALSE 37421
// begin hc_class = 13 ;
37376: LD_ADDR_OWVAR 28
37380: PUSH
37381: LD_INT 13
37383: ST_TO_ADDR
// hc_gallery =  ;
37384: LD_ADDR_OWVAR 33
37388: PUSH
37389: LD_STRING 
37391: ST_TO_ADDR
// animal := CreateHuman ;
37392: LD_ADDR_VAR 0 12
37396: PUSH
37397: CALL_OW 44
37401: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37402: LD_VAR 0 12
37406: PPUSH
37407: LD_VAR 0 8
37411: PPUSH
37412: LD_INT 0
37414: PPUSH
37415: CALL 39123 0 3
// end ;
37419: GO 37373
37421: POP
37422: POP
// if fishes then
37423: LD_VAR 0 7
37427: IFFALSE 37494
// for i = 1 to fishes do
37429: LD_ADDR_VAR 0 11
37433: PUSH
37434: DOUBLE
37435: LD_INT 1
37437: DEC
37438: ST_TO_ADDR
37439: LD_VAR 0 7
37443: PUSH
37444: FOR_TO
37445: IFFALSE 37492
// begin hc_class = 20 ;
37447: LD_ADDR_OWVAR 28
37451: PUSH
37452: LD_INT 20
37454: ST_TO_ADDR
// hc_gallery =  ;
37455: LD_ADDR_OWVAR 33
37459: PUSH
37460: LD_STRING 
37462: ST_TO_ADDR
// animal := CreateHuman ;
37463: LD_ADDR_VAR 0 12
37467: PUSH
37468: CALL_OW 44
37472: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
37473: LD_VAR 0 12
37477: PPUSH
37478: LD_VAR 0 9
37482: PPUSH
37483: LD_INT 0
37485: PPUSH
37486: CALL 39123 0 3
// end ;
37490: GO 37444
37492: POP
37493: POP
// end ;
37494: LD_VAR 0 10
37498: RET
// export function WantHeal ( sci , unit ) ; begin
37499: LD_INT 0
37501: PPUSH
// if GetTaskList ( sci ) > 0 then
37502: LD_VAR 0 1
37506: PPUSH
37507: CALL_OW 437
37511: PUSH
37512: LD_INT 0
37514: GREATER
37515: IFFALSE 37585
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
37517: LD_VAR 0 1
37521: PPUSH
37522: CALL_OW 437
37526: PUSH
37527: LD_INT 1
37529: ARRAY
37530: PUSH
37531: LD_INT 1
37533: ARRAY
37534: PUSH
37535: LD_STRING l
37537: EQUAL
37538: PUSH
37539: LD_VAR 0 1
37543: PPUSH
37544: CALL_OW 437
37548: PUSH
37549: LD_INT 1
37551: ARRAY
37552: PUSH
37553: LD_INT 4
37555: ARRAY
37556: PUSH
37557: LD_VAR 0 2
37561: EQUAL
37562: AND
37563: IFFALSE 37575
// result := true else
37565: LD_ADDR_VAR 0 3
37569: PUSH
37570: LD_INT 1
37572: ST_TO_ADDR
37573: GO 37583
// result := false ;
37575: LD_ADDR_VAR 0 3
37579: PUSH
37580: LD_INT 0
37582: ST_TO_ADDR
// end else
37583: GO 37593
// result := false ;
37585: LD_ADDR_VAR 0 3
37589: PUSH
37590: LD_INT 0
37592: ST_TO_ADDR
// end ;
37593: LD_VAR 0 3
37597: RET
// export function HealTarget ( sci ) ; begin
37598: LD_INT 0
37600: PPUSH
// if not sci then
37601: LD_VAR 0 1
37605: NOT
37606: IFFALSE 37610
// exit ;
37608: GO 37675
// result := 0 ;
37610: LD_ADDR_VAR 0 2
37614: PUSH
37615: LD_INT 0
37617: ST_TO_ADDR
// if GetTaskList ( sci ) then
37618: LD_VAR 0 1
37622: PPUSH
37623: CALL_OW 437
37627: IFFALSE 37675
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
37629: LD_VAR 0 1
37633: PPUSH
37634: CALL_OW 437
37638: PUSH
37639: LD_INT 1
37641: ARRAY
37642: PUSH
37643: LD_INT 1
37645: ARRAY
37646: PUSH
37647: LD_STRING l
37649: EQUAL
37650: IFFALSE 37675
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
37652: LD_ADDR_VAR 0 2
37656: PUSH
37657: LD_VAR 0 1
37661: PPUSH
37662: CALL_OW 437
37666: PUSH
37667: LD_INT 1
37669: ARRAY
37670: PUSH
37671: LD_INT 4
37673: ARRAY
37674: ST_TO_ADDR
// end ;
37675: LD_VAR 0 2
37679: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
37680: LD_INT 0
37682: PPUSH
37683: PPUSH
37684: PPUSH
37685: PPUSH
// if not base_units then
37686: LD_VAR 0 1
37690: NOT
37691: IFFALSE 37695
// exit ;
37693: GO 37782
// result := false ;
37695: LD_ADDR_VAR 0 2
37699: PUSH
37700: LD_INT 0
37702: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
37703: LD_ADDR_VAR 0 5
37707: PUSH
37708: LD_VAR 0 1
37712: PPUSH
37713: LD_INT 21
37715: PUSH
37716: LD_INT 3
37718: PUSH
37719: EMPTY
37720: LIST
37721: LIST
37722: PPUSH
37723: CALL_OW 72
37727: ST_TO_ADDR
// if not tmp then
37728: LD_VAR 0 5
37732: NOT
37733: IFFALSE 37737
// exit ;
37735: GO 37782
// for i in tmp do
37737: LD_ADDR_VAR 0 3
37741: PUSH
37742: LD_VAR 0 5
37746: PUSH
37747: FOR_IN
37748: IFFALSE 37780
// begin result := EnemyInRange ( i , 22 ) ;
37750: LD_ADDR_VAR 0 2
37754: PUSH
37755: LD_VAR 0 3
37759: PPUSH
37760: LD_INT 22
37762: PPUSH
37763: CALL 35380 0 2
37767: ST_TO_ADDR
// if result then
37768: LD_VAR 0 2
37772: IFFALSE 37778
// exit ;
37774: POP
37775: POP
37776: GO 37782
// end ;
37778: GO 37747
37780: POP
37781: POP
// end ;
37782: LD_VAR 0 2
37786: RET
// export function FilterByTag ( units , tag ) ; begin
37787: LD_INT 0
37789: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
37790: LD_ADDR_VAR 0 3
37794: PUSH
37795: LD_VAR 0 1
37799: PPUSH
37800: LD_INT 120
37802: PUSH
37803: LD_VAR 0 2
37807: PUSH
37808: EMPTY
37809: LIST
37810: LIST
37811: PPUSH
37812: CALL_OW 72
37816: ST_TO_ADDR
// end ;
37817: LD_VAR 0 3
37821: RET
// export function IsDriver ( un ) ; begin
37822: LD_INT 0
37824: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
37825: LD_ADDR_VAR 0 2
37829: PUSH
37830: LD_VAR 0 1
37834: PUSH
37835: LD_INT 55
37837: PUSH
37838: EMPTY
37839: LIST
37840: PPUSH
37841: CALL_OW 69
37845: IN
37846: ST_TO_ADDR
// end ;
37847: LD_VAR 0 2
37851: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
37852: LD_INT 0
37854: PPUSH
37855: PPUSH
// list := [ ] ;
37856: LD_ADDR_VAR 0 5
37860: PUSH
37861: EMPTY
37862: ST_TO_ADDR
// case d of 0 :
37863: LD_VAR 0 3
37867: PUSH
37868: LD_INT 0
37870: DOUBLE
37871: EQUAL
37872: IFTRUE 37876
37874: GO 38009
37876: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
37877: LD_ADDR_VAR 0 5
37881: PUSH
37882: LD_VAR 0 1
37886: PUSH
37887: LD_INT 4
37889: MINUS
37890: PUSH
37891: LD_VAR 0 2
37895: PUSH
37896: LD_INT 4
37898: MINUS
37899: PUSH
37900: LD_INT 2
37902: PUSH
37903: EMPTY
37904: LIST
37905: LIST
37906: LIST
37907: PUSH
37908: LD_VAR 0 1
37912: PUSH
37913: LD_INT 3
37915: MINUS
37916: PUSH
37917: LD_VAR 0 2
37921: PUSH
37922: LD_INT 1
37924: PUSH
37925: EMPTY
37926: LIST
37927: LIST
37928: LIST
37929: PUSH
37930: LD_VAR 0 1
37934: PUSH
37935: LD_INT 4
37937: PLUS
37938: PUSH
37939: LD_VAR 0 2
37943: PUSH
37944: LD_INT 4
37946: PUSH
37947: EMPTY
37948: LIST
37949: LIST
37950: LIST
37951: PUSH
37952: LD_VAR 0 1
37956: PUSH
37957: LD_INT 3
37959: PLUS
37960: PUSH
37961: LD_VAR 0 2
37965: PUSH
37966: LD_INT 3
37968: PLUS
37969: PUSH
37970: LD_INT 5
37972: PUSH
37973: EMPTY
37974: LIST
37975: LIST
37976: LIST
37977: PUSH
37978: LD_VAR 0 1
37982: PUSH
37983: LD_VAR 0 2
37987: PUSH
37988: LD_INT 4
37990: PLUS
37991: PUSH
37992: LD_INT 0
37994: PUSH
37995: EMPTY
37996: LIST
37997: LIST
37998: LIST
37999: PUSH
38000: EMPTY
38001: LIST
38002: LIST
38003: LIST
38004: LIST
38005: LIST
38006: ST_TO_ADDR
// end ; 1 :
38007: GO 38707
38009: LD_INT 1
38011: DOUBLE
38012: EQUAL
38013: IFTRUE 38017
38015: GO 38150
38017: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
38018: LD_ADDR_VAR 0 5
38022: PUSH
38023: LD_VAR 0 1
38027: PUSH
38028: LD_VAR 0 2
38032: PUSH
38033: LD_INT 4
38035: MINUS
38036: PUSH
38037: LD_INT 3
38039: PUSH
38040: EMPTY
38041: LIST
38042: LIST
38043: LIST
38044: PUSH
38045: LD_VAR 0 1
38049: PUSH
38050: LD_INT 3
38052: MINUS
38053: PUSH
38054: LD_VAR 0 2
38058: PUSH
38059: LD_INT 3
38061: MINUS
38062: PUSH
38063: LD_INT 2
38065: PUSH
38066: EMPTY
38067: LIST
38068: LIST
38069: LIST
38070: PUSH
38071: LD_VAR 0 1
38075: PUSH
38076: LD_INT 4
38078: MINUS
38079: PUSH
38080: LD_VAR 0 2
38084: PUSH
38085: LD_INT 1
38087: PUSH
38088: EMPTY
38089: LIST
38090: LIST
38091: LIST
38092: PUSH
38093: LD_VAR 0 1
38097: PUSH
38098: LD_VAR 0 2
38102: PUSH
38103: LD_INT 3
38105: PLUS
38106: PUSH
38107: LD_INT 0
38109: PUSH
38110: EMPTY
38111: LIST
38112: LIST
38113: LIST
38114: PUSH
38115: LD_VAR 0 1
38119: PUSH
38120: LD_INT 4
38122: PLUS
38123: PUSH
38124: LD_VAR 0 2
38128: PUSH
38129: LD_INT 4
38131: PLUS
38132: PUSH
38133: LD_INT 5
38135: PUSH
38136: EMPTY
38137: LIST
38138: LIST
38139: LIST
38140: PUSH
38141: EMPTY
38142: LIST
38143: LIST
38144: LIST
38145: LIST
38146: LIST
38147: ST_TO_ADDR
// end ; 2 :
38148: GO 38707
38150: LD_INT 2
38152: DOUBLE
38153: EQUAL
38154: IFTRUE 38158
38156: GO 38287
38158: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
38159: LD_ADDR_VAR 0 5
38163: PUSH
38164: LD_VAR 0 1
38168: PUSH
38169: LD_VAR 0 2
38173: PUSH
38174: LD_INT 3
38176: MINUS
38177: PUSH
38178: LD_INT 3
38180: PUSH
38181: EMPTY
38182: LIST
38183: LIST
38184: LIST
38185: PUSH
38186: LD_VAR 0 1
38190: PUSH
38191: LD_INT 4
38193: PLUS
38194: PUSH
38195: LD_VAR 0 2
38199: PUSH
38200: LD_INT 4
38202: PUSH
38203: EMPTY
38204: LIST
38205: LIST
38206: LIST
38207: PUSH
38208: LD_VAR 0 1
38212: PUSH
38213: LD_VAR 0 2
38217: PUSH
38218: LD_INT 4
38220: PLUS
38221: PUSH
38222: LD_INT 0
38224: PUSH
38225: EMPTY
38226: LIST
38227: LIST
38228: LIST
38229: PUSH
38230: LD_VAR 0 1
38234: PUSH
38235: LD_INT 3
38237: MINUS
38238: PUSH
38239: LD_VAR 0 2
38243: PUSH
38244: LD_INT 1
38246: PUSH
38247: EMPTY
38248: LIST
38249: LIST
38250: LIST
38251: PUSH
38252: LD_VAR 0 1
38256: PUSH
38257: LD_INT 4
38259: MINUS
38260: PUSH
38261: LD_VAR 0 2
38265: PUSH
38266: LD_INT 4
38268: MINUS
38269: PUSH
38270: LD_INT 2
38272: PUSH
38273: EMPTY
38274: LIST
38275: LIST
38276: LIST
38277: PUSH
38278: EMPTY
38279: LIST
38280: LIST
38281: LIST
38282: LIST
38283: LIST
38284: ST_TO_ADDR
// end ; 3 :
38285: GO 38707
38287: LD_INT 3
38289: DOUBLE
38290: EQUAL
38291: IFTRUE 38295
38293: GO 38428
38295: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
38296: LD_ADDR_VAR 0 5
38300: PUSH
38301: LD_VAR 0 1
38305: PUSH
38306: LD_INT 3
38308: PLUS
38309: PUSH
38310: LD_VAR 0 2
38314: PUSH
38315: LD_INT 4
38317: PUSH
38318: EMPTY
38319: LIST
38320: LIST
38321: LIST
38322: PUSH
38323: LD_VAR 0 1
38327: PUSH
38328: LD_INT 4
38330: PLUS
38331: PUSH
38332: LD_VAR 0 2
38336: PUSH
38337: LD_INT 4
38339: PLUS
38340: PUSH
38341: LD_INT 5
38343: PUSH
38344: EMPTY
38345: LIST
38346: LIST
38347: LIST
38348: PUSH
38349: LD_VAR 0 1
38353: PUSH
38354: LD_INT 4
38356: MINUS
38357: PUSH
38358: LD_VAR 0 2
38362: PUSH
38363: LD_INT 1
38365: PUSH
38366: EMPTY
38367: LIST
38368: LIST
38369: LIST
38370: PUSH
38371: LD_VAR 0 1
38375: PUSH
38376: LD_VAR 0 2
38380: PUSH
38381: LD_INT 4
38383: MINUS
38384: PUSH
38385: LD_INT 3
38387: PUSH
38388: EMPTY
38389: LIST
38390: LIST
38391: LIST
38392: PUSH
38393: LD_VAR 0 1
38397: PUSH
38398: LD_INT 3
38400: MINUS
38401: PUSH
38402: LD_VAR 0 2
38406: PUSH
38407: LD_INT 3
38409: MINUS
38410: PUSH
38411: LD_INT 2
38413: PUSH
38414: EMPTY
38415: LIST
38416: LIST
38417: LIST
38418: PUSH
38419: EMPTY
38420: LIST
38421: LIST
38422: LIST
38423: LIST
38424: LIST
38425: ST_TO_ADDR
// end ; 4 :
38426: GO 38707
38428: LD_INT 4
38430: DOUBLE
38431: EQUAL
38432: IFTRUE 38436
38434: GO 38569
38436: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
38437: LD_ADDR_VAR 0 5
38441: PUSH
38442: LD_VAR 0 1
38446: PUSH
38447: LD_VAR 0 2
38451: PUSH
38452: LD_INT 4
38454: PLUS
38455: PUSH
38456: LD_INT 0
38458: PUSH
38459: EMPTY
38460: LIST
38461: LIST
38462: LIST
38463: PUSH
38464: LD_VAR 0 1
38468: PUSH
38469: LD_INT 3
38471: PLUS
38472: PUSH
38473: LD_VAR 0 2
38477: PUSH
38478: LD_INT 3
38480: PLUS
38481: PUSH
38482: LD_INT 5
38484: PUSH
38485: EMPTY
38486: LIST
38487: LIST
38488: LIST
38489: PUSH
38490: LD_VAR 0 1
38494: PUSH
38495: LD_INT 4
38497: PLUS
38498: PUSH
38499: LD_VAR 0 2
38503: PUSH
38504: LD_INT 4
38506: PUSH
38507: EMPTY
38508: LIST
38509: LIST
38510: LIST
38511: PUSH
38512: LD_VAR 0 1
38516: PUSH
38517: LD_VAR 0 2
38521: PUSH
38522: LD_INT 3
38524: MINUS
38525: PUSH
38526: LD_INT 3
38528: PUSH
38529: EMPTY
38530: LIST
38531: LIST
38532: LIST
38533: PUSH
38534: LD_VAR 0 1
38538: PUSH
38539: LD_INT 4
38541: MINUS
38542: PUSH
38543: LD_VAR 0 2
38547: PUSH
38548: LD_INT 4
38550: MINUS
38551: PUSH
38552: LD_INT 2
38554: PUSH
38555: EMPTY
38556: LIST
38557: LIST
38558: LIST
38559: PUSH
38560: EMPTY
38561: LIST
38562: LIST
38563: LIST
38564: LIST
38565: LIST
38566: ST_TO_ADDR
// end ; 5 :
38567: GO 38707
38569: LD_INT 5
38571: DOUBLE
38572: EQUAL
38573: IFTRUE 38577
38575: GO 38706
38577: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
38578: LD_ADDR_VAR 0 5
38582: PUSH
38583: LD_VAR 0 1
38587: PUSH
38588: LD_INT 4
38590: MINUS
38591: PUSH
38592: LD_VAR 0 2
38596: PUSH
38597: LD_INT 1
38599: PUSH
38600: EMPTY
38601: LIST
38602: LIST
38603: LIST
38604: PUSH
38605: LD_VAR 0 1
38609: PUSH
38610: LD_VAR 0 2
38614: PUSH
38615: LD_INT 4
38617: MINUS
38618: PUSH
38619: LD_INT 3
38621: PUSH
38622: EMPTY
38623: LIST
38624: LIST
38625: LIST
38626: PUSH
38627: LD_VAR 0 1
38631: PUSH
38632: LD_INT 4
38634: PLUS
38635: PUSH
38636: LD_VAR 0 2
38640: PUSH
38641: LD_INT 4
38643: PLUS
38644: PUSH
38645: LD_INT 5
38647: PUSH
38648: EMPTY
38649: LIST
38650: LIST
38651: LIST
38652: PUSH
38653: LD_VAR 0 1
38657: PUSH
38658: LD_INT 3
38660: PLUS
38661: PUSH
38662: LD_VAR 0 2
38666: PUSH
38667: LD_INT 4
38669: PUSH
38670: EMPTY
38671: LIST
38672: LIST
38673: LIST
38674: PUSH
38675: LD_VAR 0 1
38679: PUSH
38680: LD_VAR 0 2
38684: PUSH
38685: LD_INT 3
38687: PLUS
38688: PUSH
38689: LD_INT 0
38691: PUSH
38692: EMPTY
38693: LIST
38694: LIST
38695: LIST
38696: PUSH
38697: EMPTY
38698: LIST
38699: LIST
38700: LIST
38701: LIST
38702: LIST
38703: ST_TO_ADDR
// end ; end ;
38704: GO 38707
38706: POP
// result := list ;
38707: LD_ADDR_VAR 0 4
38711: PUSH
38712: LD_VAR 0 5
38716: ST_TO_ADDR
// end ;
38717: LD_VAR 0 4
38721: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
38722: LD_INT 0
38724: PPUSH
38725: PPUSH
38726: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
38727: LD_VAR 0 1
38731: NOT
38732: PUSH
38733: LD_VAR 0 2
38737: PUSH
38738: LD_INT 1
38740: PUSH
38741: LD_INT 2
38743: PUSH
38744: LD_INT 3
38746: PUSH
38747: LD_INT 4
38749: PUSH
38750: EMPTY
38751: LIST
38752: LIST
38753: LIST
38754: LIST
38755: IN
38756: NOT
38757: OR
38758: IFFALSE 38762
// exit ;
38760: GO 38845
// tmp := [ ] ;
38762: LD_ADDR_VAR 0 5
38766: PUSH
38767: EMPTY
38768: ST_TO_ADDR
// for i in units do
38769: LD_ADDR_VAR 0 4
38773: PUSH
38774: LD_VAR 0 1
38778: PUSH
38779: FOR_IN
38780: IFFALSE 38814
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
38782: LD_ADDR_VAR 0 5
38786: PUSH
38787: LD_VAR 0 5
38791: PPUSH
38792: LD_VAR 0 4
38796: PPUSH
38797: LD_VAR 0 2
38801: PPUSH
38802: CALL_OW 259
38806: PPUSH
38807: CALL 40218 0 2
38811: ST_TO_ADDR
38812: GO 38779
38814: POP
38815: POP
// if not tmp then
38816: LD_VAR 0 5
38820: NOT
38821: IFFALSE 38825
// exit ;
38823: GO 38845
// result := SortListByListDesc ( units , tmp ) ;
38825: LD_ADDR_VAR 0 3
38829: PUSH
38830: LD_VAR 0 1
38834: PPUSH
38835: LD_VAR 0 5
38839: PPUSH
38840: CALL_OW 77
38844: ST_TO_ADDR
// end ;
38845: LD_VAR 0 3
38849: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
38850: LD_INT 0
38852: PPUSH
38853: PPUSH
38854: PPUSH
// result := false ;
38855: LD_ADDR_VAR 0 3
38859: PUSH
38860: LD_INT 0
38862: ST_TO_ADDR
// if not building then
38863: LD_VAR 0 2
38867: NOT
38868: IFFALSE 38872
// exit ;
38870: GO 39010
// x := GetX ( building ) ;
38872: LD_ADDR_VAR 0 4
38876: PUSH
38877: LD_VAR 0 2
38881: PPUSH
38882: CALL_OW 250
38886: ST_TO_ADDR
// y := GetY ( building ) ;
38887: LD_ADDR_VAR 0 5
38891: PUSH
38892: LD_VAR 0 2
38896: PPUSH
38897: CALL_OW 251
38901: ST_TO_ADDR
// if not x or not y then
38902: LD_VAR 0 4
38906: NOT
38907: PUSH
38908: LD_VAR 0 5
38912: NOT
38913: OR
38914: IFFALSE 38918
// exit ;
38916: GO 39010
// if GetTaskList ( unit ) then
38918: LD_VAR 0 1
38922: PPUSH
38923: CALL_OW 437
38927: IFFALSE 39010
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
38929: LD_STRING e
38931: PUSH
38932: LD_VAR 0 1
38936: PPUSH
38937: CALL_OW 437
38941: PUSH
38942: LD_INT 1
38944: ARRAY
38945: PUSH
38946: LD_INT 1
38948: ARRAY
38949: EQUAL
38950: PUSH
38951: LD_VAR 0 4
38955: PUSH
38956: LD_VAR 0 1
38960: PPUSH
38961: CALL_OW 437
38965: PUSH
38966: LD_INT 1
38968: ARRAY
38969: PUSH
38970: LD_INT 2
38972: ARRAY
38973: EQUAL
38974: AND
38975: PUSH
38976: LD_VAR 0 5
38980: PUSH
38981: LD_VAR 0 1
38985: PPUSH
38986: CALL_OW 437
38990: PUSH
38991: LD_INT 1
38993: ARRAY
38994: PUSH
38995: LD_INT 3
38997: ARRAY
38998: EQUAL
38999: AND
39000: IFFALSE 39010
// result := true end ;
39002: LD_ADDR_VAR 0 3
39006: PUSH
39007: LD_INT 1
39009: ST_TO_ADDR
// end ;
39010: LD_VAR 0 3
39014: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
39015: LD_INT 0
39017: PPUSH
// result := false ;
39018: LD_ADDR_VAR 0 4
39022: PUSH
39023: LD_INT 0
39025: ST_TO_ADDR
// if GetTaskList ( unit ) then
39026: LD_VAR 0 1
39030: PPUSH
39031: CALL_OW 437
39035: IFFALSE 39118
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39037: LD_STRING M
39039: PUSH
39040: LD_VAR 0 1
39044: PPUSH
39045: CALL_OW 437
39049: PUSH
39050: LD_INT 1
39052: ARRAY
39053: PUSH
39054: LD_INT 1
39056: ARRAY
39057: EQUAL
39058: PUSH
39059: LD_VAR 0 2
39063: PUSH
39064: LD_VAR 0 1
39068: PPUSH
39069: CALL_OW 437
39073: PUSH
39074: LD_INT 1
39076: ARRAY
39077: PUSH
39078: LD_INT 2
39080: ARRAY
39081: EQUAL
39082: AND
39083: PUSH
39084: LD_VAR 0 3
39088: PUSH
39089: LD_VAR 0 1
39093: PPUSH
39094: CALL_OW 437
39098: PUSH
39099: LD_INT 1
39101: ARRAY
39102: PUSH
39103: LD_INT 3
39105: ARRAY
39106: EQUAL
39107: AND
39108: IFFALSE 39118
// result := true ;
39110: LD_ADDR_VAR 0 4
39114: PUSH
39115: LD_INT 1
39117: ST_TO_ADDR
// end ; end ;
39118: LD_VAR 0 4
39122: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
39123: LD_INT 0
39125: PPUSH
39126: PPUSH
39127: PPUSH
39128: PPUSH
// if not unit or not area then
39129: LD_VAR 0 1
39133: NOT
39134: PUSH
39135: LD_VAR 0 2
39139: NOT
39140: OR
39141: IFFALSE 39145
// exit ;
39143: GO 39321
// tmp := AreaToList ( area , i ) ;
39145: LD_ADDR_VAR 0 6
39149: PUSH
39150: LD_VAR 0 2
39154: PPUSH
39155: LD_VAR 0 5
39159: PPUSH
39160: CALL_OW 517
39164: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
39165: LD_ADDR_VAR 0 5
39169: PUSH
39170: DOUBLE
39171: LD_INT 1
39173: DEC
39174: ST_TO_ADDR
39175: LD_VAR 0 6
39179: PUSH
39180: LD_INT 1
39182: ARRAY
39183: PUSH
39184: FOR_TO
39185: IFFALSE 39319
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
39187: LD_ADDR_VAR 0 7
39191: PUSH
39192: LD_VAR 0 6
39196: PUSH
39197: LD_INT 1
39199: ARRAY
39200: PUSH
39201: LD_VAR 0 5
39205: ARRAY
39206: PUSH
39207: LD_VAR 0 6
39211: PUSH
39212: LD_INT 2
39214: ARRAY
39215: PUSH
39216: LD_VAR 0 5
39220: ARRAY
39221: PUSH
39222: EMPTY
39223: LIST
39224: LIST
39225: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
39226: LD_INT 92
39228: PUSH
39229: LD_VAR 0 7
39233: PUSH
39234: LD_INT 1
39236: ARRAY
39237: PUSH
39238: LD_VAR 0 7
39242: PUSH
39243: LD_INT 2
39245: ARRAY
39246: PUSH
39247: LD_INT 2
39249: PUSH
39250: EMPTY
39251: LIST
39252: LIST
39253: LIST
39254: LIST
39255: PPUSH
39256: CALL_OW 69
39260: PUSH
39261: LD_INT 0
39263: EQUAL
39264: IFFALSE 39317
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
39266: LD_VAR 0 1
39270: PPUSH
39271: LD_VAR 0 7
39275: PUSH
39276: LD_INT 1
39278: ARRAY
39279: PPUSH
39280: LD_VAR 0 7
39284: PUSH
39285: LD_INT 2
39287: ARRAY
39288: PPUSH
39289: LD_VAR 0 3
39293: PPUSH
39294: CALL_OW 48
// result := IsPlaced ( unit ) ;
39298: LD_ADDR_VAR 0 4
39302: PUSH
39303: LD_VAR 0 1
39307: PPUSH
39308: CALL_OW 305
39312: ST_TO_ADDR
// exit ;
39313: POP
39314: POP
39315: GO 39321
// end ; end ;
39317: GO 39184
39319: POP
39320: POP
// end ;
39321: LD_VAR 0 4
39325: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
39326: LD_INT 0
39328: PPUSH
39329: PPUSH
39330: PPUSH
// if not side or side > 8 then
39331: LD_VAR 0 1
39335: NOT
39336: PUSH
39337: LD_VAR 0 1
39341: PUSH
39342: LD_INT 8
39344: GREATER
39345: OR
39346: IFFALSE 39350
// exit ;
39348: GO 39537
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
39350: LD_ADDR_VAR 0 4
39354: PUSH
39355: LD_INT 22
39357: PUSH
39358: LD_VAR 0 1
39362: PUSH
39363: EMPTY
39364: LIST
39365: LIST
39366: PUSH
39367: LD_INT 21
39369: PUSH
39370: LD_INT 3
39372: PUSH
39373: EMPTY
39374: LIST
39375: LIST
39376: PUSH
39377: EMPTY
39378: LIST
39379: LIST
39380: PPUSH
39381: CALL_OW 69
39385: ST_TO_ADDR
// if not tmp then
39386: LD_VAR 0 4
39390: NOT
39391: IFFALSE 39395
// exit ;
39393: GO 39537
// enable_addtolog := true ;
39395: LD_ADDR_OWVAR 81
39399: PUSH
39400: LD_INT 1
39402: ST_TO_ADDR
// AddToLog ( [ ) ;
39403: LD_STRING [
39405: PPUSH
39406: CALL_OW 561
// for i in tmp do
39410: LD_ADDR_VAR 0 3
39414: PUSH
39415: LD_VAR 0 4
39419: PUSH
39420: FOR_IN
39421: IFFALSE 39528
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
39423: LD_STRING [
39425: PUSH
39426: LD_VAR 0 3
39430: PPUSH
39431: CALL_OW 266
39435: STR
39436: PUSH
39437: LD_STRING , 
39439: STR
39440: PUSH
39441: LD_VAR 0 3
39445: PPUSH
39446: CALL_OW 250
39450: STR
39451: PUSH
39452: LD_STRING , 
39454: STR
39455: PUSH
39456: LD_VAR 0 3
39460: PPUSH
39461: CALL_OW 251
39465: STR
39466: PUSH
39467: LD_STRING , 
39469: STR
39470: PUSH
39471: LD_VAR 0 3
39475: PPUSH
39476: CALL_OW 254
39480: STR
39481: PUSH
39482: LD_STRING , 
39484: STR
39485: PUSH
39486: LD_VAR 0 3
39490: PPUSH
39491: LD_INT 1
39493: PPUSH
39494: CALL_OW 268
39498: STR
39499: PUSH
39500: LD_STRING , 
39502: STR
39503: PUSH
39504: LD_VAR 0 3
39508: PPUSH
39509: LD_INT 2
39511: PPUSH
39512: CALL_OW 268
39516: STR
39517: PUSH
39518: LD_STRING ],
39520: STR
39521: PPUSH
39522: CALL_OW 561
// end ;
39526: GO 39420
39528: POP
39529: POP
// AddToLog ( ]; ) ;
39530: LD_STRING ];
39532: PPUSH
39533: CALL_OW 561
// end ;
39537: LD_VAR 0 2
39541: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
39542: LD_INT 0
39544: PPUSH
39545: PPUSH
39546: PPUSH
39547: PPUSH
39548: PPUSH
// if not area or not rate or not max then
39549: LD_VAR 0 1
39553: NOT
39554: PUSH
39555: LD_VAR 0 2
39559: NOT
39560: OR
39561: PUSH
39562: LD_VAR 0 4
39566: NOT
39567: OR
39568: IFFALSE 39572
// exit ;
39570: GO 39761
// while 1 do
39572: LD_INT 1
39574: IFFALSE 39761
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
39576: LD_ADDR_VAR 0 9
39580: PUSH
39581: LD_VAR 0 1
39585: PPUSH
39586: LD_INT 1
39588: PPUSH
39589: CALL_OW 287
39593: PUSH
39594: LD_INT 10
39596: MUL
39597: ST_TO_ADDR
// r := rate / 10 ;
39598: LD_ADDR_VAR 0 7
39602: PUSH
39603: LD_VAR 0 2
39607: PUSH
39608: LD_INT 10
39610: DIVREAL
39611: ST_TO_ADDR
// time := 1 1$00 ;
39612: LD_ADDR_VAR 0 8
39616: PUSH
39617: LD_INT 2100
39619: ST_TO_ADDR
// if amount < min then
39620: LD_VAR 0 9
39624: PUSH
39625: LD_VAR 0 3
39629: LESS
39630: IFFALSE 39648
// r := r * 2 else
39632: LD_ADDR_VAR 0 7
39636: PUSH
39637: LD_VAR 0 7
39641: PUSH
39642: LD_INT 2
39644: MUL
39645: ST_TO_ADDR
39646: GO 39674
// if amount > max then
39648: LD_VAR 0 9
39652: PUSH
39653: LD_VAR 0 4
39657: GREATER
39658: IFFALSE 39674
// r := r / 2 ;
39660: LD_ADDR_VAR 0 7
39664: PUSH
39665: LD_VAR 0 7
39669: PUSH
39670: LD_INT 2
39672: DIVREAL
39673: ST_TO_ADDR
// time := time / r ;
39674: LD_ADDR_VAR 0 8
39678: PUSH
39679: LD_VAR 0 8
39683: PUSH
39684: LD_VAR 0 7
39688: DIVREAL
39689: ST_TO_ADDR
// if time < 0 then
39690: LD_VAR 0 8
39694: PUSH
39695: LD_INT 0
39697: LESS
39698: IFFALSE 39715
// time := time * - 1 ;
39700: LD_ADDR_VAR 0 8
39704: PUSH
39705: LD_VAR 0 8
39709: PUSH
39710: LD_INT 1
39712: NEG
39713: MUL
39714: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
39715: LD_VAR 0 8
39719: PUSH
39720: LD_INT 35
39722: PPUSH
39723: LD_INT 875
39725: PPUSH
39726: CALL_OW 12
39730: PLUS
39731: PPUSH
39732: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
39736: LD_INT 1
39738: PPUSH
39739: LD_INT 5
39741: PPUSH
39742: CALL_OW 12
39746: PPUSH
39747: LD_VAR 0 1
39751: PPUSH
39752: LD_INT 1
39754: PPUSH
39755: CALL_OW 55
// end ;
39759: GO 39572
// end ;
39761: LD_VAR 0 5
39765: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
39766: LD_INT 0
39768: PPUSH
39769: PPUSH
39770: PPUSH
39771: PPUSH
39772: PPUSH
39773: PPUSH
39774: PPUSH
39775: PPUSH
// if not turrets or not factories then
39776: LD_VAR 0 1
39780: NOT
39781: PUSH
39782: LD_VAR 0 2
39786: NOT
39787: OR
39788: IFFALSE 39792
// exit ;
39790: GO 40099
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
39792: LD_ADDR_VAR 0 10
39796: PUSH
39797: LD_INT 5
39799: PUSH
39800: LD_INT 6
39802: PUSH
39803: EMPTY
39804: LIST
39805: LIST
39806: PUSH
39807: LD_INT 2
39809: PUSH
39810: LD_INT 4
39812: PUSH
39813: EMPTY
39814: LIST
39815: LIST
39816: PUSH
39817: LD_INT 3
39819: PUSH
39820: LD_INT 5
39822: PUSH
39823: EMPTY
39824: LIST
39825: LIST
39826: PUSH
39827: EMPTY
39828: LIST
39829: LIST
39830: LIST
39831: PUSH
39832: LD_INT 24
39834: PUSH
39835: LD_INT 25
39837: PUSH
39838: EMPTY
39839: LIST
39840: LIST
39841: PUSH
39842: LD_INT 23
39844: PUSH
39845: LD_INT 27
39847: PUSH
39848: EMPTY
39849: LIST
39850: LIST
39851: PUSH
39852: EMPTY
39853: LIST
39854: LIST
39855: PUSH
39856: LD_INT 42
39858: PUSH
39859: LD_INT 43
39861: PUSH
39862: EMPTY
39863: LIST
39864: LIST
39865: PUSH
39866: LD_INT 44
39868: PUSH
39869: LD_INT 46
39871: PUSH
39872: EMPTY
39873: LIST
39874: LIST
39875: PUSH
39876: LD_INT 45
39878: PUSH
39879: LD_INT 47
39881: PUSH
39882: EMPTY
39883: LIST
39884: LIST
39885: PUSH
39886: EMPTY
39887: LIST
39888: LIST
39889: LIST
39890: PUSH
39891: EMPTY
39892: LIST
39893: LIST
39894: LIST
39895: ST_TO_ADDR
// result := [ ] ;
39896: LD_ADDR_VAR 0 3
39900: PUSH
39901: EMPTY
39902: ST_TO_ADDR
// for i in turrets do
39903: LD_ADDR_VAR 0 4
39907: PUSH
39908: LD_VAR 0 1
39912: PUSH
39913: FOR_IN
39914: IFFALSE 40097
// begin nat := GetNation ( i ) ;
39916: LD_ADDR_VAR 0 7
39920: PUSH
39921: LD_VAR 0 4
39925: PPUSH
39926: CALL_OW 248
39930: ST_TO_ADDR
// weapon := 0 ;
39931: LD_ADDR_VAR 0 8
39935: PUSH
39936: LD_INT 0
39938: ST_TO_ADDR
// if not nat then
39939: LD_VAR 0 7
39943: NOT
39944: IFFALSE 39948
// continue ;
39946: GO 39913
// for j in list [ nat ] do
39948: LD_ADDR_VAR 0 5
39952: PUSH
39953: LD_VAR 0 10
39957: PUSH
39958: LD_VAR 0 7
39962: ARRAY
39963: PUSH
39964: FOR_IN
39965: IFFALSE 40006
// if GetBWeapon ( i ) = j [ 1 ] then
39967: LD_VAR 0 4
39971: PPUSH
39972: CALL_OW 269
39976: PUSH
39977: LD_VAR 0 5
39981: PUSH
39982: LD_INT 1
39984: ARRAY
39985: EQUAL
39986: IFFALSE 40004
// begin weapon := j [ 2 ] ;
39988: LD_ADDR_VAR 0 8
39992: PUSH
39993: LD_VAR 0 5
39997: PUSH
39998: LD_INT 2
40000: ARRAY
40001: ST_TO_ADDR
// break ;
40002: GO 40006
// end ;
40004: GO 39964
40006: POP
40007: POP
// if not weapon then
40008: LD_VAR 0 8
40012: NOT
40013: IFFALSE 40017
// continue ;
40015: GO 39913
// for k in factories do
40017: LD_ADDR_VAR 0 6
40021: PUSH
40022: LD_VAR 0 2
40026: PUSH
40027: FOR_IN
40028: IFFALSE 40093
// begin weapons := AvailableWeaponList ( k ) ;
40030: LD_ADDR_VAR 0 9
40034: PUSH
40035: LD_VAR 0 6
40039: PPUSH
40040: CALL_OW 478
40044: ST_TO_ADDR
// if not weapons then
40045: LD_VAR 0 9
40049: NOT
40050: IFFALSE 40054
// continue ;
40052: GO 40027
// if weapon in weapons then
40054: LD_VAR 0 8
40058: PUSH
40059: LD_VAR 0 9
40063: IN
40064: IFFALSE 40091
// begin result := [ i , weapon ] ;
40066: LD_ADDR_VAR 0 3
40070: PUSH
40071: LD_VAR 0 4
40075: PUSH
40076: LD_VAR 0 8
40080: PUSH
40081: EMPTY
40082: LIST
40083: LIST
40084: ST_TO_ADDR
// exit ;
40085: POP
40086: POP
40087: POP
40088: POP
40089: GO 40099
// end ; end ;
40091: GO 40027
40093: POP
40094: POP
// end ;
40095: GO 39913
40097: POP
40098: POP
// end ;
40099: LD_VAR 0 3
40103: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
40104: LD_INT 0
40106: PPUSH
// if not side or side > 8 then
40107: LD_VAR 0 3
40111: NOT
40112: PUSH
40113: LD_VAR 0 3
40117: PUSH
40118: LD_INT 8
40120: GREATER
40121: OR
40122: IFFALSE 40126
// exit ;
40124: GO 40185
// if not range then
40126: LD_VAR 0 4
40130: NOT
40131: IFFALSE 40142
// range := - 12 ;
40133: LD_ADDR_VAR 0 4
40137: PUSH
40138: LD_INT 12
40140: NEG
40141: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
40142: LD_VAR 0 1
40146: PPUSH
40147: LD_VAR 0 2
40151: PPUSH
40152: LD_VAR 0 3
40156: PPUSH
40157: LD_VAR 0 4
40161: PPUSH
40162: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
40166: LD_VAR 0 1
40170: PPUSH
40171: LD_VAR 0 2
40175: PPUSH
40176: LD_VAR 0 3
40180: PPUSH
40181: CALL_OW 331
// end ;
40185: LD_VAR 0 5
40189: RET
// export function Video ( mode ) ; begin
40190: LD_INT 0
40192: PPUSH
// ingame_video = mode ;
40193: LD_ADDR_OWVAR 52
40197: PUSH
40198: LD_VAR 0 1
40202: ST_TO_ADDR
// interface_hidden = mode ;
40203: LD_ADDR_OWVAR 54
40207: PUSH
40208: LD_VAR 0 1
40212: ST_TO_ADDR
// end ;
40213: LD_VAR 0 2
40217: RET
// export function Join ( array , element ) ; begin
40218: LD_INT 0
40220: PPUSH
// result := Replace ( array , array + 1 , element ) ;
40221: LD_ADDR_VAR 0 3
40225: PUSH
40226: LD_VAR 0 1
40230: PPUSH
40231: LD_VAR 0 1
40235: PUSH
40236: LD_INT 1
40238: PLUS
40239: PPUSH
40240: LD_VAR 0 2
40244: PPUSH
40245: CALL_OW 1
40249: ST_TO_ADDR
// end ;
40250: LD_VAR 0 3
40254: RET
// export function JoinUnion ( array , element ) ; begin
40255: LD_INT 0
40257: PPUSH
// result := array union element ;
40258: LD_ADDR_VAR 0 3
40262: PUSH
40263: LD_VAR 0 1
40267: PUSH
40268: LD_VAR 0 2
40272: UNION
40273: ST_TO_ADDR
// end ;
40274: LD_VAR 0 3
40278: RET
// export function GetBehemoths ( side ) ; begin
40279: LD_INT 0
40281: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
40282: LD_ADDR_VAR 0 2
40286: PUSH
40287: LD_INT 22
40289: PUSH
40290: LD_VAR 0 1
40294: PUSH
40295: EMPTY
40296: LIST
40297: LIST
40298: PUSH
40299: LD_INT 31
40301: PUSH
40302: LD_INT 25
40304: PUSH
40305: EMPTY
40306: LIST
40307: LIST
40308: PUSH
40309: EMPTY
40310: LIST
40311: LIST
40312: PPUSH
40313: CALL_OW 69
40317: ST_TO_ADDR
// end ;
40318: LD_VAR 0 2
40322: RET
// export function Shuffle ( array ) ; var i , index ; begin
40323: LD_INT 0
40325: PPUSH
40326: PPUSH
40327: PPUSH
// result := [ ] ;
40328: LD_ADDR_VAR 0 2
40332: PUSH
40333: EMPTY
40334: ST_TO_ADDR
// if not array then
40335: LD_VAR 0 1
40339: NOT
40340: IFFALSE 40344
// exit ;
40342: GO 40443
// Randomize ;
40344: CALL_OW 10
// for i = array downto 1 do
40348: LD_ADDR_VAR 0 3
40352: PUSH
40353: DOUBLE
40354: LD_VAR 0 1
40358: INC
40359: ST_TO_ADDR
40360: LD_INT 1
40362: PUSH
40363: FOR_DOWNTO
40364: IFFALSE 40441
// begin index := rand ( 1 , array ) ;
40366: LD_ADDR_VAR 0 4
40370: PUSH
40371: LD_INT 1
40373: PPUSH
40374: LD_VAR 0 1
40378: PPUSH
40379: CALL_OW 12
40383: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
40384: LD_ADDR_VAR 0 2
40388: PUSH
40389: LD_VAR 0 2
40393: PPUSH
40394: LD_VAR 0 2
40398: PUSH
40399: LD_INT 1
40401: PLUS
40402: PPUSH
40403: LD_VAR 0 1
40407: PUSH
40408: LD_VAR 0 4
40412: ARRAY
40413: PPUSH
40414: CALL_OW 2
40418: ST_TO_ADDR
// array := Delete ( array , index ) ;
40419: LD_ADDR_VAR 0 1
40423: PUSH
40424: LD_VAR 0 1
40428: PPUSH
40429: LD_VAR 0 4
40433: PPUSH
40434: CALL_OW 3
40438: ST_TO_ADDR
// end ;
40439: GO 40363
40441: POP
40442: POP
// end ;
40443: LD_VAR 0 2
40447: RET
// export function GetBaseMaterials ( base ) ; begin
40448: LD_INT 0
40450: PPUSH
// result := [ 0 , 0 , 0 ] ;
40451: LD_ADDR_VAR 0 2
40455: PUSH
40456: LD_INT 0
40458: PUSH
40459: LD_INT 0
40461: PUSH
40462: LD_INT 0
40464: PUSH
40465: EMPTY
40466: LIST
40467: LIST
40468: LIST
40469: ST_TO_ADDR
// if not base then
40470: LD_VAR 0 1
40474: NOT
40475: IFFALSE 40479
// exit ;
40477: GO 40528
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
40479: LD_ADDR_VAR 0 2
40483: PUSH
40484: LD_VAR 0 1
40488: PPUSH
40489: LD_INT 1
40491: PPUSH
40492: CALL_OW 275
40496: PUSH
40497: LD_VAR 0 1
40501: PPUSH
40502: LD_INT 2
40504: PPUSH
40505: CALL_OW 275
40509: PUSH
40510: LD_VAR 0 1
40514: PPUSH
40515: LD_INT 3
40517: PPUSH
40518: CALL_OW 275
40522: PUSH
40523: EMPTY
40524: LIST
40525: LIST
40526: LIST
40527: ST_TO_ADDR
// end ;
40528: LD_VAR 0 2
40532: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
40533: LD_INT 0
40535: PPUSH
40536: PPUSH
// result := array ;
40537: LD_ADDR_VAR 0 3
40541: PUSH
40542: LD_VAR 0 1
40546: ST_TO_ADDR
// if size >= result then
40547: LD_VAR 0 2
40551: PUSH
40552: LD_VAR 0 3
40556: GREATEREQUAL
40557: IFFALSE 40561
// exit ;
40559: GO 40611
// if size then
40561: LD_VAR 0 2
40565: IFFALSE 40611
// for i := array downto size do
40567: LD_ADDR_VAR 0 4
40571: PUSH
40572: DOUBLE
40573: LD_VAR 0 1
40577: INC
40578: ST_TO_ADDR
40579: LD_VAR 0 2
40583: PUSH
40584: FOR_DOWNTO
40585: IFFALSE 40609
// result := Delete ( result , result ) ;
40587: LD_ADDR_VAR 0 3
40591: PUSH
40592: LD_VAR 0 3
40596: PPUSH
40597: LD_VAR 0 3
40601: PPUSH
40602: CALL_OW 3
40606: ST_TO_ADDR
40607: GO 40584
40609: POP
40610: POP
// end ;
40611: LD_VAR 0 3
40615: RET
// export function ComExit ( unit ) ; var tmp ; begin
40616: LD_INT 0
40618: PPUSH
40619: PPUSH
// if not IsInUnit ( unit ) then
40620: LD_VAR 0 1
40624: PPUSH
40625: CALL_OW 310
40629: NOT
40630: IFFALSE 40634
// exit ;
40632: GO 40694
// tmp := IsInUnit ( unit ) ;
40634: LD_ADDR_VAR 0 3
40638: PUSH
40639: LD_VAR 0 1
40643: PPUSH
40644: CALL_OW 310
40648: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
40649: LD_VAR 0 3
40653: PPUSH
40654: CALL_OW 247
40658: PUSH
40659: LD_INT 2
40661: EQUAL
40662: IFFALSE 40675
// ComExitVehicle ( unit ) else
40664: LD_VAR 0 1
40668: PPUSH
40669: CALL_OW 121
40673: GO 40684
// ComExitBuilding ( unit ) ;
40675: LD_VAR 0 1
40679: PPUSH
40680: CALL_OW 122
// result := tmp ;
40684: LD_ADDR_VAR 0 2
40688: PUSH
40689: LD_VAR 0 3
40693: ST_TO_ADDR
// end ;
40694: LD_VAR 0 2
40698: RET
// export function ComExitAll ( units ) ; var i ; begin
40699: LD_INT 0
40701: PPUSH
40702: PPUSH
// if not units then
40703: LD_VAR 0 1
40707: NOT
40708: IFFALSE 40712
// exit ;
40710: GO 40738
// for i in units do
40712: LD_ADDR_VAR 0 3
40716: PUSH
40717: LD_VAR 0 1
40721: PUSH
40722: FOR_IN
40723: IFFALSE 40736
// ComExit ( i ) ;
40725: LD_VAR 0 3
40729: PPUSH
40730: CALL 40616 0 1
40734: GO 40722
40736: POP
40737: POP
// end ;
40738: LD_VAR 0 2
40742: RET
// export function ResetHc ; begin
40743: LD_INT 0
40745: PPUSH
// InitHc ;
40746: CALL_OW 19
// hc_importance := 0 ;
40750: LD_ADDR_OWVAR 32
40754: PUSH
40755: LD_INT 0
40757: ST_TO_ADDR
// end ;
40758: LD_VAR 0 1
40762: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
40763: LD_INT 0
40765: PPUSH
40766: PPUSH
40767: PPUSH
// _x := ( x1 + x2 ) div 2 ;
40768: LD_ADDR_VAR 0 6
40772: PUSH
40773: LD_VAR 0 1
40777: PUSH
40778: LD_VAR 0 3
40782: PLUS
40783: PUSH
40784: LD_INT 2
40786: DIV
40787: ST_TO_ADDR
// if _x < 0 then
40788: LD_VAR 0 6
40792: PUSH
40793: LD_INT 0
40795: LESS
40796: IFFALSE 40813
// _x := _x * - 1 ;
40798: LD_ADDR_VAR 0 6
40802: PUSH
40803: LD_VAR 0 6
40807: PUSH
40808: LD_INT 1
40810: NEG
40811: MUL
40812: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
40813: LD_ADDR_VAR 0 7
40817: PUSH
40818: LD_VAR 0 2
40822: PUSH
40823: LD_VAR 0 4
40827: PLUS
40828: PUSH
40829: LD_INT 2
40831: DIV
40832: ST_TO_ADDR
// if _y < 0 then
40833: LD_VAR 0 7
40837: PUSH
40838: LD_INT 0
40840: LESS
40841: IFFALSE 40858
// _y := _y * - 1 ;
40843: LD_ADDR_VAR 0 7
40847: PUSH
40848: LD_VAR 0 7
40852: PUSH
40853: LD_INT 1
40855: NEG
40856: MUL
40857: ST_TO_ADDR
// result := [ _x , _y ] ;
40858: LD_ADDR_VAR 0 5
40862: PUSH
40863: LD_VAR 0 6
40867: PUSH
40868: LD_VAR 0 7
40872: PUSH
40873: EMPTY
40874: LIST
40875: LIST
40876: ST_TO_ADDR
// end ;
40877: LD_VAR 0 5
40881: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
40882: LD_INT 0
40884: PPUSH
40885: PPUSH
40886: PPUSH
40887: PPUSH
// task := GetTaskList ( unit ) ;
40888: LD_ADDR_VAR 0 7
40892: PUSH
40893: LD_VAR 0 1
40897: PPUSH
40898: CALL_OW 437
40902: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
40903: LD_VAR 0 7
40907: NOT
40908: PUSH
40909: LD_VAR 0 1
40913: PPUSH
40914: LD_VAR 0 2
40918: PPUSH
40919: CALL_OW 308
40923: NOT
40924: AND
40925: IFFALSE 40929
// exit ;
40927: GO 41047
// if IsInArea ( unit , area ) then
40929: LD_VAR 0 1
40933: PPUSH
40934: LD_VAR 0 2
40938: PPUSH
40939: CALL_OW 308
40943: IFFALSE 40961
// begin ComMoveToArea ( unit , goAway ) ;
40945: LD_VAR 0 1
40949: PPUSH
40950: LD_VAR 0 3
40954: PPUSH
40955: CALL_OW 113
// exit ;
40959: GO 41047
// end ; if task [ 1 ] [ 1 ] <> M then
40961: LD_VAR 0 7
40965: PUSH
40966: LD_INT 1
40968: ARRAY
40969: PUSH
40970: LD_INT 1
40972: ARRAY
40973: PUSH
40974: LD_STRING M
40976: NONEQUAL
40977: IFFALSE 40981
// exit ;
40979: GO 41047
// x := task [ 1 ] [ 2 ] ;
40981: LD_ADDR_VAR 0 5
40985: PUSH
40986: LD_VAR 0 7
40990: PUSH
40991: LD_INT 1
40993: ARRAY
40994: PUSH
40995: LD_INT 2
40997: ARRAY
40998: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
40999: LD_ADDR_VAR 0 6
41003: PUSH
41004: LD_VAR 0 7
41008: PUSH
41009: LD_INT 1
41011: ARRAY
41012: PUSH
41013: LD_INT 3
41015: ARRAY
41016: ST_TO_ADDR
// if InArea ( x , y , area ) then
41017: LD_VAR 0 5
41021: PPUSH
41022: LD_VAR 0 6
41026: PPUSH
41027: LD_VAR 0 2
41031: PPUSH
41032: CALL_OW 309
41036: IFFALSE 41047
// ComStop ( unit ) ;
41038: LD_VAR 0 1
41042: PPUSH
41043: CALL_OW 141
// end ;
41047: LD_VAR 0 4
41051: RET
// export function Abs ( value ) ; begin
41052: LD_INT 0
41054: PPUSH
// result := value ;
41055: LD_ADDR_VAR 0 2
41059: PUSH
41060: LD_VAR 0 1
41064: ST_TO_ADDR
// if value < 0 then
41065: LD_VAR 0 1
41069: PUSH
41070: LD_INT 0
41072: LESS
41073: IFFALSE 41090
// result := value * - 1 ;
41075: LD_ADDR_VAR 0 2
41079: PUSH
41080: LD_VAR 0 1
41084: PUSH
41085: LD_INT 1
41087: NEG
41088: MUL
41089: ST_TO_ADDR
// end ;
41090: LD_VAR 0 2
41094: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
41095: LD_INT 0
41097: PPUSH
41098: PPUSH
41099: PPUSH
41100: PPUSH
41101: PPUSH
41102: PPUSH
41103: PPUSH
41104: PPUSH
// if not unit or not building then
41105: LD_VAR 0 1
41109: NOT
41110: PUSH
41111: LD_VAR 0 2
41115: NOT
41116: OR
41117: IFFALSE 41121
// exit ;
41119: GO 41347
// x := GetX ( building ) ;
41121: LD_ADDR_VAR 0 4
41125: PUSH
41126: LD_VAR 0 2
41130: PPUSH
41131: CALL_OW 250
41135: ST_TO_ADDR
// y := GetY ( building ) ;
41136: LD_ADDR_VAR 0 6
41140: PUSH
41141: LD_VAR 0 2
41145: PPUSH
41146: CALL_OW 251
41150: ST_TO_ADDR
// d := GetDir ( building ) ;
41151: LD_ADDR_VAR 0 8
41155: PUSH
41156: LD_VAR 0 2
41160: PPUSH
41161: CALL_OW 254
41165: ST_TO_ADDR
// r := 4 ;
41166: LD_ADDR_VAR 0 9
41170: PUSH
41171: LD_INT 4
41173: ST_TO_ADDR
// for i := 1 to 5 do
41174: LD_ADDR_VAR 0 10
41178: PUSH
41179: DOUBLE
41180: LD_INT 1
41182: DEC
41183: ST_TO_ADDR
41184: LD_INT 5
41186: PUSH
41187: FOR_TO
41188: IFFALSE 41345
// begin _x := ShiftX ( x , d , r + i ) ;
41190: LD_ADDR_VAR 0 5
41194: PUSH
41195: LD_VAR 0 4
41199: PPUSH
41200: LD_VAR 0 8
41204: PPUSH
41205: LD_VAR 0 9
41209: PUSH
41210: LD_VAR 0 10
41214: PLUS
41215: PPUSH
41216: CALL_OW 272
41220: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
41221: LD_ADDR_VAR 0 7
41225: PUSH
41226: LD_VAR 0 6
41230: PPUSH
41231: LD_VAR 0 8
41235: PPUSH
41236: LD_VAR 0 9
41240: PUSH
41241: LD_VAR 0 10
41245: PLUS
41246: PPUSH
41247: CALL_OW 273
41251: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
41252: LD_VAR 0 5
41256: PPUSH
41257: LD_VAR 0 7
41261: PPUSH
41262: CALL_OW 488
41266: PUSH
41267: LD_VAR 0 5
41271: PPUSH
41272: LD_VAR 0 7
41276: PPUSH
41277: CALL_OW 428
41281: PPUSH
41282: CALL_OW 247
41286: PUSH
41287: LD_INT 3
41289: PUSH
41290: LD_INT 2
41292: PUSH
41293: EMPTY
41294: LIST
41295: LIST
41296: IN
41297: NOT
41298: AND
41299: IFFALSE 41343
// begin ComMoveXY ( unit , _x , _y ) ;
41301: LD_VAR 0 1
41305: PPUSH
41306: LD_VAR 0 5
41310: PPUSH
41311: LD_VAR 0 7
41315: PPUSH
41316: CALL_OW 111
// result := [ _x , _y ] ;
41320: LD_ADDR_VAR 0 3
41324: PUSH
41325: LD_VAR 0 5
41329: PUSH
41330: LD_VAR 0 7
41334: PUSH
41335: EMPTY
41336: LIST
41337: LIST
41338: ST_TO_ADDR
// exit ;
41339: POP
41340: POP
41341: GO 41347
// end ; end ;
41343: GO 41187
41345: POP
41346: POP
// end ;
41347: LD_VAR 0 3
41351: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
41352: LD_INT 0
41354: PPUSH
41355: PPUSH
41356: PPUSH
// result := 0 ;
41357: LD_ADDR_VAR 0 3
41361: PUSH
41362: LD_INT 0
41364: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
41365: LD_VAR 0 1
41369: PUSH
41370: LD_INT 0
41372: LESS
41373: PUSH
41374: LD_VAR 0 1
41378: PUSH
41379: LD_INT 8
41381: GREATER
41382: OR
41383: PUSH
41384: LD_VAR 0 2
41388: PUSH
41389: LD_INT 0
41391: LESS
41392: OR
41393: PUSH
41394: LD_VAR 0 2
41398: PUSH
41399: LD_INT 8
41401: GREATER
41402: OR
41403: IFFALSE 41407
// exit ;
41405: GO 41482
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
41407: LD_ADDR_VAR 0 4
41411: PUSH
41412: LD_INT 22
41414: PUSH
41415: LD_VAR 0 2
41419: PUSH
41420: EMPTY
41421: LIST
41422: LIST
41423: PPUSH
41424: CALL_OW 69
41428: PUSH
41429: FOR_IN
41430: IFFALSE 41480
// begin un := UnitShoot ( i ) ;
41432: LD_ADDR_VAR 0 5
41436: PUSH
41437: LD_VAR 0 4
41441: PPUSH
41442: CALL_OW 504
41446: ST_TO_ADDR
// if GetSide ( un ) = side1 then
41447: LD_VAR 0 5
41451: PPUSH
41452: CALL_OW 255
41456: PUSH
41457: LD_VAR 0 1
41461: EQUAL
41462: IFFALSE 41478
// begin result := un ;
41464: LD_ADDR_VAR 0 3
41468: PUSH
41469: LD_VAR 0 5
41473: ST_TO_ADDR
// exit ;
41474: POP
41475: POP
41476: GO 41482
// end ; end ;
41478: GO 41429
41480: POP
41481: POP
// end ;
41482: LD_VAR 0 3
41486: RET
// export function GetCargoBay ( units ) ; begin
41487: LD_INT 0
41489: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
41490: LD_ADDR_VAR 0 2
41494: PUSH
41495: LD_VAR 0 1
41499: PPUSH
41500: LD_INT 2
41502: PUSH
41503: LD_INT 34
41505: PUSH
41506: LD_INT 12
41508: PUSH
41509: EMPTY
41510: LIST
41511: LIST
41512: PUSH
41513: LD_INT 34
41515: PUSH
41516: LD_INT 51
41518: PUSH
41519: EMPTY
41520: LIST
41521: LIST
41522: PUSH
41523: LD_INT 34
41525: PUSH
41526: LD_INT 32
41528: PUSH
41529: EMPTY
41530: LIST
41531: LIST
41532: PUSH
41533: LD_INT 34
41535: PUSH
41536: LD_INT 89
41538: PUSH
41539: EMPTY
41540: LIST
41541: LIST
41542: PUSH
41543: EMPTY
41544: LIST
41545: LIST
41546: LIST
41547: LIST
41548: LIST
41549: PPUSH
41550: CALL_OW 72
41554: ST_TO_ADDR
// end ;
41555: LD_VAR 0 2
41559: RET
// export function Negate ( value ) ; begin
41560: LD_INT 0
41562: PPUSH
// result := not value ;
41563: LD_ADDR_VAR 0 2
41567: PUSH
41568: LD_VAR 0 1
41572: NOT
41573: ST_TO_ADDR
// end ;
41574: LD_VAR 0 2
41578: RET
// export function Inc ( value ) ; begin
41579: LD_INT 0
41581: PPUSH
// result := value + 1 ;
41582: LD_ADDR_VAR 0 2
41586: PUSH
41587: LD_VAR 0 1
41591: PUSH
41592: LD_INT 1
41594: PLUS
41595: ST_TO_ADDR
// end ;
41596: LD_VAR 0 2
41600: RET
// export function Dec ( value ) ; begin
41601: LD_INT 0
41603: PPUSH
// result := value - 1 ;
41604: LD_ADDR_VAR 0 2
41608: PUSH
41609: LD_VAR 0 1
41613: PUSH
41614: LD_INT 1
41616: MINUS
41617: ST_TO_ADDR
// end ;
41618: LD_VAR 0 2
41622: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
41623: LD_INT 0
41625: PPUSH
41626: PPUSH
41627: PPUSH
41628: PPUSH
41629: PPUSH
41630: PPUSH
41631: PPUSH
41632: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
41633: LD_VAR 0 1
41637: PPUSH
41638: LD_VAR 0 2
41642: PPUSH
41643: CALL_OW 488
41647: NOT
41648: PUSH
41649: LD_VAR 0 3
41653: PPUSH
41654: LD_VAR 0 4
41658: PPUSH
41659: CALL_OW 488
41663: NOT
41664: OR
41665: IFFALSE 41678
// begin result := - 1 ;
41667: LD_ADDR_VAR 0 5
41671: PUSH
41672: LD_INT 1
41674: NEG
41675: ST_TO_ADDR
// exit ;
41676: GO 41913
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
41678: LD_ADDR_VAR 0 12
41682: PUSH
41683: LD_VAR 0 1
41687: PPUSH
41688: LD_VAR 0 2
41692: PPUSH
41693: LD_VAR 0 3
41697: PPUSH
41698: LD_VAR 0 4
41702: PPUSH
41703: CALL 40763 0 4
41707: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
41708: LD_ADDR_VAR 0 11
41712: PUSH
41713: LD_VAR 0 1
41717: PPUSH
41718: LD_VAR 0 2
41722: PPUSH
41723: LD_VAR 0 12
41727: PUSH
41728: LD_INT 1
41730: ARRAY
41731: PPUSH
41732: LD_VAR 0 12
41736: PUSH
41737: LD_INT 2
41739: ARRAY
41740: PPUSH
41741: CALL_OW 298
41745: ST_TO_ADDR
// distance := 9999 ;
41746: LD_ADDR_VAR 0 10
41750: PUSH
41751: LD_INT 9999
41753: ST_TO_ADDR
// for i := 0 to 5 do
41754: LD_ADDR_VAR 0 6
41758: PUSH
41759: DOUBLE
41760: LD_INT 0
41762: DEC
41763: ST_TO_ADDR
41764: LD_INT 5
41766: PUSH
41767: FOR_TO
41768: IFFALSE 41911
// begin _x := ShiftX ( x1 , i , centerDist ) ;
41770: LD_ADDR_VAR 0 7
41774: PUSH
41775: LD_VAR 0 1
41779: PPUSH
41780: LD_VAR 0 6
41784: PPUSH
41785: LD_VAR 0 11
41789: PPUSH
41790: CALL_OW 272
41794: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
41795: LD_ADDR_VAR 0 8
41799: PUSH
41800: LD_VAR 0 2
41804: PPUSH
41805: LD_VAR 0 6
41809: PPUSH
41810: LD_VAR 0 11
41814: PPUSH
41815: CALL_OW 273
41819: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41820: LD_VAR 0 7
41824: PPUSH
41825: LD_VAR 0 8
41829: PPUSH
41830: CALL_OW 488
41834: NOT
41835: IFFALSE 41839
// continue ;
41837: GO 41767
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
41839: LD_ADDR_VAR 0 9
41843: PUSH
41844: LD_VAR 0 12
41848: PUSH
41849: LD_INT 1
41851: ARRAY
41852: PPUSH
41853: LD_VAR 0 12
41857: PUSH
41858: LD_INT 2
41860: ARRAY
41861: PPUSH
41862: LD_VAR 0 7
41866: PPUSH
41867: LD_VAR 0 8
41871: PPUSH
41872: CALL_OW 298
41876: ST_TO_ADDR
// if tmp < distance then
41877: LD_VAR 0 9
41881: PUSH
41882: LD_VAR 0 10
41886: LESS
41887: IFFALSE 41909
// begin result := i ;
41889: LD_ADDR_VAR 0 5
41893: PUSH
41894: LD_VAR 0 6
41898: ST_TO_ADDR
// distance := tmp ;
41899: LD_ADDR_VAR 0 10
41903: PUSH
41904: LD_VAR 0 9
41908: ST_TO_ADDR
// end ; end ;
41909: GO 41767
41911: POP
41912: POP
// end ;
41913: LD_VAR 0 5
41917: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
41918: LD_INT 0
41920: PPUSH
41921: PPUSH
// if not driver or not IsInUnit ( driver ) then
41922: LD_VAR 0 1
41926: NOT
41927: PUSH
41928: LD_VAR 0 1
41932: PPUSH
41933: CALL_OW 310
41937: NOT
41938: OR
41939: IFFALSE 41943
// exit ;
41941: GO 42033
// vehicle := IsInUnit ( driver ) ;
41943: LD_ADDR_VAR 0 3
41947: PUSH
41948: LD_VAR 0 1
41952: PPUSH
41953: CALL_OW 310
41957: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
41958: LD_VAR 0 1
41962: PPUSH
41963: LD_STRING \
41965: PUSH
41966: LD_INT 0
41968: PUSH
41969: LD_INT 0
41971: PUSH
41972: LD_INT 0
41974: PUSH
41975: LD_INT 0
41977: PUSH
41978: LD_INT 0
41980: PUSH
41981: LD_INT 0
41983: PUSH
41984: EMPTY
41985: LIST
41986: LIST
41987: LIST
41988: LIST
41989: LIST
41990: LIST
41991: LIST
41992: PUSH
41993: LD_STRING E
41995: PUSH
41996: LD_INT 0
41998: PUSH
41999: LD_INT 0
42001: PUSH
42002: LD_VAR 0 3
42006: PUSH
42007: LD_INT 0
42009: PUSH
42010: LD_INT 0
42012: PUSH
42013: LD_INT 0
42015: PUSH
42016: EMPTY
42017: LIST
42018: LIST
42019: LIST
42020: LIST
42021: LIST
42022: LIST
42023: LIST
42024: PUSH
42025: EMPTY
42026: LIST
42027: LIST
42028: PPUSH
42029: CALL_OW 446
// end ;
42033: LD_VAR 0 2
42037: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42038: LD_INT 0
42040: PPUSH
42041: PPUSH
// if not driver or not IsInUnit ( driver ) then
42042: LD_VAR 0 1
42046: NOT
42047: PUSH
42048: LD_VAR 0 1
42052: PPUSH
42053: CALL_OW 310
42057: NOT
42058: OR
42059: IFFALSE 42063
// exit ;
42061: GO 42153
// vehicle := IsInUnit ( driver ) ;
42063: LD_ADDR_VAR 0 3
42067: PUSH
42068: LD_VAR 0 1
42072: PPUSH
42073: CALL_OW 310
42077: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42078: LD_VAR 0 1
42082: PPUSH
42083: LD_STRING \
42085: PUSH
42086: LD_INT 0
42088: PUSH
42089: LD_INT 0
42091: PUSH
42092: LD_INT 0
42094: PUSH
42095: LD_INT 0
42097: PUSH
42098: LD_INT 0
42100: PUSH
42101: LD_INT 0
42103: PUSH
42104: EMPTY
42105: LIST
42106: LIST
42107: LIST
42108: LIST
42109: LIST
42110: LIST
42111: LIST
42112: PUSH
42113: LD_STRING E
42115: PUSH
42116: LD_INT 0
42118: PUSH
42119: LD_INT 0
42121: PUSH
42122: LD_VAR 0 3
42126: PUSH
42127: LD_INT 0
42129: PUSH
42130: LD_INT 0
42132: PUSH
42133: LD_INT 0
42135: PUSH
42136: EMPTY
42137: LIST
42138: LIST
42139: LIST
42140: LIST
42141: LIST
42142: LIST
42143: LIST
42144: PUSH
42145: EMPTY
42146: LIST
42147: LIST
42148: PPUSH
42149: CALL_OW 447
// end ;
42153: LD_VAR 0 2
42157: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
42158: LD_INT 0
42160: PPUSH
42161: PPUSH
42162: PPUSH
// tmp := [ ] ;
42163: LD_ADDR_VAR 0 5
42167: PUSH
42168: EMPTY
42169: ST_TO_ADDR
// for i in units do
42170: LD_ADDR_VAR 0 4
42174: PUSH
42175: LD_VAR 0 1
42179: PUSH
42180: FOR_IN
42181: IFFALSE 42219
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
42183: LD_ADDR_VAR 0 5
42187: PUSH
42188: LD_VAR 0 5
42192: PPUSH
42193: LD_VAR 0 5
42197: PUSH
42198: LD_INT 1
42200: PLUS
42201: PPUSH
42202: LD_VAR 0 4
42206: PPUSH
42207: CALL_OW 256
42211: PPUSH
42212: CALL_OW 2
42216: ST_TO_ADDR
42217: GO 42180
42219: POP
42220: POP
// if not tmp then
42221: LD_VAR 0 5
42225: NOT
42226: IFFALSE 42230
// exit ;
42228: GO 42278
// if asc then
42230: LD_VAR 0 2
42234: IFFALSE 42258
// result := SortListByListAsc ( units , tmp ) else
42236: LD_ADDR_VAR 0 3
42240: PUSH
42241: LD_VAR 0 1
42245: PPUSH
42246: LD_VAR 0 5
42250: PPUSH
42251: CALL_OW 76
42255: ST_TO_ADDR
42256: GO 42278
// result := SortListByListDesc ( units , tmp ) ;
42258: LD_ADDR_VAR 0 3
42262: PUSH
42263: LD_VAR 0 1
42267: PPUSH
42268: LD_VAR 0 5
42272: PPUSH
42273: CALL_OW 77
42277: ST_TO_ADDR
// end ;
42278: LD_VAR 0 3
42282: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
42283: LD_INT 0
42285: PPUSH
42286: PPUSH
// task := GetTaskList ( mech ) ;
42287: LD_ADDR_VAR 0 4
42291: PUSH
42292: LD_VAR 0 1
42296: PPUSH
42297: CALL_OW 437
42301: ST_TO_ADDR
// if not task then
42302: LD_VAR 0 4
42306: NOT
42307: IFFALSE 42311
// exit ;
42309: GO 42353
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
42311: LD_ADDR_VAR 0 3
42315: PUSH
42316: LD_VAR 0 4
42320: PUSH
42321: LD_INT 1
42323: ARRAY
42324: PUSH
42325: LD_INT 1
42327: ARRAY
42328: PUSH
42329: LD_STRING r
42331: EQUAL
42332: PUSH
42333: LD_VAR 0 4
42337: PUSH
42338: LD_INT 1
42340: ARRAY
42341: PUSH
42342: LD_INT 4
42344: ARRAY
42345: PUSH
42346: LD_VAR 0 2
42350: EQUAL
42351: AND
42352: ST_TO_ADDR
// end ;
42353: LD_VAR 0 3
42357: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
42358: LD_INT 0
42360: PPUSH
// SetDir ( unit , d ) ;
42361: LD_VAR 0 1
42365: PPUSH
42366: LD_VAR 0 4
42370: PPUSH
42371: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
42375: LD_VAR 0 1
42379: PPUSH
42380: LD_VAR 0 2
42384: PPUSH
42385: LD_VAR 0 3
42389: PPUSH
42390: LD_VAR 0 5
42394: PPUSH
42395: CALL_OW 48
// end ;
42399: LD_VAR 0 6
42403: RET
// export function ToNaturalNumber ( number ) ; begin
42404: LD_INT 0
42406: PPUSH
// result := number div 1 ;
42407: LD_ADDR_VAR 0 2
42411: PUSH
42412: LD_VAR 0 1
42416: PUSH
42417: LD_INT 1
42419: DIV
42420: ST_TO_ADDR
// if number < 0 then
42421: LD_VAR 0 1
42425: PUSH
42426: LD_INT 0
42428: LESS
42429: IFFALSE 42439
// result := 0 ;
42431: LD_ADDR_VAR 0 2
42435: PUSH
42436: LD_INT 0
42438: ST_TO_ADDR
// end ;
42439: LD_VAR 0 2
42443: RET
// export function SortByClass ( units , class ) ; var un ; begin
42444: LD_INT 0
42446: PPUSH
42447: PPUSH
// if not units or not class then
42448: LD_VAR 0 1
42452: NOT
42453: PUSH
42454: LD_VAR 0 2
42458: NOT
42459: OR
42460: IFFALSE 42464
// exit ;
42462: GO 42559
// result := [ ] ;
42464: LD_ADDR_VAR 0 3
42468: PUSH
42469: EMPTY
42470: ST_TO_ADDR
// for un in units do
42471: LD_ADDR_VAR 0 4
42475: PUSH
42476: LD_VAR 0 1
42480: PUSH
42481: FOR_IN
42482: IFFALSE 42557
// if GetClass ( un ) = class then
42484: LD_VAR 0 4
42488: PPUSH
42489: CALL_OW 257
42493: PUSH
42494: LD_VAR 0 2
42498: EQUAL
42499: IFFALSE 42526
// result := Insert ( result , 1 , un ) else
42501: LD_ADDR_VAR 0 3
42505: PUSH
42506: LD_VAR 0 3
42510: PPUSH
42511: LD_INT 1
42513: PPUSH
42514: LD_VAR 0 4
42518: PPUSH
42519: CALL_OW 2
42523: ST_TO_ADDR
42524: GO 42555
// result := Replace ( result , result + 1 , un ) ;
42526: LD_ADDR_VAR 0 3
42530: PUSH
42531: LD_VAR 0 3
42535: PPUSH
42536: LD_VAR 0 3
42540: PUSH
42541: LD_INT 1
42543: PLUS
42544: PPUSH
42545: LD_VAR 0 4
42549: PPUSH
42550: CALL_OW 1
42554: ST_TO_ADDR
42555: GO 42481
42557: POP
42558: POP
// end ;
42559: LD_VAR 0 3
42563: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
42564: LD_INT 0
42566: PPUSH
42567: PPUSH
42568: PPUSH
42569: PPUSH
42570: PPUSH
42571: PPUSH
42572: PPUSH
// result := [ ] ;
42573: LD_ADDR_VAR 0 4
42577: PUSH
42578: EMPTY
42579: ST_TO_ADDR
// if x - r < 0 then
42580: LD_VAR 0 1
42584: PUSH
42585: LD_VAR 0 3
42589: MINUS
42590: PUSH
42591: LD_INT 0
42593: LESS
42594: IFFALSE 42606
// min_x := 0 else
42596: LD_ADDR_VAR 0 8
42600: PUSH
42601: LD_INT 0
42603: ST_TO_ADDR
42604: GO 42622
// min_x := x - r ;
42606: LD_ADDR_VAR 0 8
42610: PUSH
42611: LD_VAR 0 1
42615: PUSH
42616: LD_VAR 0 3
42620: MINUS
42621: ST_TO_ADDR
// if y - r < 0 then
42622: LD_VAR 0 2
42626: PUSH
42627: LD_VAR 0 3
42631: MINUS
42632: PUSH
42633: LD_INT 0
42635: LESS
42636: IFFALSE 42648
// min_y := 0 else
42638: LD_ADDR_VAR 0 7
42642: PUSH
42643: LD_INT 0
42645: ST_TO_ADDR
42646: GO 42664
// min_y := y - r ;
42648: LD_ADDR_VAR 0 7
42652: PUSH
42653: LD_VAR 0 2
42657: PUSH
42658: LD_VAR 0 3
42662: MINUS
42663: ST_TO_ADDR
// max_x := x + r ;
42664: LD_ADDR_VAR 0 9
42668: PUSH
42669: LD_VAR 0 1
42673: PUSH
42674: LD_VAR 0 3
42678: PLUS
42679: ST_TO_ADDR
// max_y := y + r ;
42680: LD_ADDR_VAR 0 10
42684: PUSH
42685: LD_VAR 0 2
42689: PUSH
42690: LD_VAR 0 3
42694: PLUS
42695: ST_TO_ADDR
// for _x = min_x to max_x do
42696: LD_ADDR_VAR 0 5
42700: PUSH
42701: DOUBLE
42702: LD_VAR 0 8
42706: DEC
42707: ST_TO_ADDR
42708: LD_VAR 0 9
42712: PUSH
42713: FOR_TO
42714: IFFALSE 42815
// for _y = min_y to max_y do
42716: LD_ADDR_VAR 0 6
42720: PUSH
42721: DOUBLE
42722: LD_VAR 0 7
42726: DEC
42727: ST_TO_ADDR
42728: LD_VAR 0 10
42732: PUSH
42733: FOR_TO
42734: IFFALSE 42811
// begin if not ValidHex ( _x , _y ) then
42736: LD_VAR 0 5
42740: PPUSH
42741: LD_VAR 0 6
42745: PPUSH
42746: CALL_OW 488
42750: NOT
42751: IFFALSE 42755
// continue ;
42753: GO 42733
// if GetResourceTypeXY ( _x , _y ) then
42755: LD_VAR 0 5
42759: PPUSH
42760: LD_VAR 0 6
42764: PPUSH
42765: CALL_OW 283
42769: IFFALSE 42809
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
42771: LD_ADDR_VAR 0 4
42775: PUSH
42776: LD_VAR 0 4
42780: PPUSH
42781: LD_VAR 0 4
42785: PUSH
42786: LD_INT 1
42788: PLUS
42789: PPUSH
42790: LD_VAR 0 5
42794: PUSH
42795: LD_VAR 0 6
42799: PUSH
42800: EMPTY
42801: LIST
42802: LIST
42803: PPUSH
42804: CALL_OW 1
42808: ST_TO_ADDR
// end ;
42809: GO 42733
42811: POP
42812: POP
42813: GO 42713
42815: POP
42816: POP
// end ;
42817: LD_VAR 0 4
42821: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
42822: LD_INT 0
42824: PPUSH
42825: PPUSH
42826: PPUSH
42827: PPUSH
42828: PPUSH
42829: PPUSH
42830: PPUSH
42831: PPUSH
// if not units then
42832: LD_VAR 0 1
42836: NOT
42837: IFFALSE 42841
// exit ;
42839: GO 43369
// result := UnitFilter ( units , [ f_ok ] ) ;
42841: LD_ADDR_VAR 0 3
42845: PUSH
42846: LD_VAR 0 1
42850: PPUSH
42851: LD_INT 50
42853: PUSH
42854: EMPTY
42855: LIST
42856: PPUSH
42857: CALL_OW 72
42861: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
42862: LD_ADDR_VAR 0 8
42866: PUSH
42867: LD_VAR 0 1
42871: PUSH
42872: LD_INT 1
42874: ARRAY
42875: PPUSH
42876: CALL_OW 255
42880: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
42881: LD_ADDR_VAR 0 10
42885: PUSH
42886: LD_INT 29
42888: PUSH
42889: LD_INT 91
42891: PUSH
42892: LD_INT 49
42894: PUSH
42895: EMPTY
42896: LIST
42897: LIST
42898: LIST
42899: ST_TO_ADDR
// if not result then
42900: LD_VAR 0 3
42904: NOT
42905: IFFALSE 42909
// exit ;
42907: GO 43369
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
42909: LD_ADDR_VAR 0 5
42913: PUSH
42914: LD_INT 81
42916: PUSH
42917: LD_VAR 0 8
42921: PUSH
42922: EMPTY
42923: LIST
42924: LIST
42925: PPUSH
42926: CALL_OW 69
42930: ST_TO_ADDR
// for i in result do
42931: LD_ADDR_VAR 0 4
42935: PUSH
42936: LD_VAR 0 3
42940: PUSH
42941: FOR_IN
42942: IFFALSE 43367
// begin tag := GetTag ( i ) + 1 ;
42944: LD_ADDR_VAR 0 9
42948: PUSH
42949: LD_VAR 0 4
42953: PPUSH
42954: CALL_OW 110
42958: PUSH
42959: LD_INT 1
42961: PLUS
42962: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
42963: LD_ADDR_VAR 0 7
42967: PUSH
42968: LD_VAR 0 4
42972: PPUSH
42973: CALL_OW 250
42977: PPUSH
42978: LD_VAR 0 4
42982: PPUSH
42983: CALL_OW 251
42987: PPUSH
42988: LD_INT 4
42990: PPUSH
42991: CALL 42564 0 3
42995: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
42996: LD_VAR 0 4
43000: PPUSH
43001: CALL_OW 247
43005: PUSH
43006: LD_INT 2
43008: EQUAL
43009: PUSH
43010: LD_VAR 0 7
43014: PUSH
43015: LD_INT 2
43017: GREATER
43018: AND
43019: PUSH
43020: LD_VAR 0 4
43024: PPUSH
43025: CALL_OW 264
43029: PUSH
43030: LD_VAR 0 10
43034: IN
43035: NOT
43036: AND
43037: IFFALSE 43076
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
43039: LD_VAR 0 4
43043: PPUSH
43044: LD_VAR 0 7
43048: PUSH
43049: LD_INT 1
43051: ARRAY
43052: PUSH
43053: LD_INT 1
43055: ARRAY
43056: PPUSH
43057: LD_VAR 0 7
43061: PUSH
43062: LD_INT 1
43064: ARRAY
43065: PUSH
43066: LD_INT 2
43068: ARRAY
43069: PPUSH
43070: CALL_OW 116
43074: GO 43365
// if path > tag then
43076: LD_VAR 0 2
43080: PUSH
43081: LD_VAR 0 9
43085: GREATER
43086: IFFALSE 43294
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
43088: LD_ADDR_VAR 0 6
43092: PUSH
43093: LD_VAR 0 5
43097: PPUSH
43098: LD_INT 91
43100: PUSH
43101: LD_VAR 0 4
43105: PUSH
43106: LD_INT 8
43108: PUSH
43109: EMPTY
43110: LIST
43111: LIST
43112: LIST
43113: PPUSH
43114: CALL_OW 72
43118: ST_TO_ADDR
// if nearEnemy then
43119: LD_VAR 0 6
43123: IFFALSE 43192
// begin if GetWeapon ( i ) = ru_time_lapser then
43125: LD_VAR 0 4
43129: PPUSH
43130: CALL_OW 264
43134: PUSH
43135: LD_INT 49
43137: EQUAL
43138: IFFALSE 43166
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
43140: LD_VAR 0 4
43144: PPUSH
43145: LD_VAR 0 6
43149: PPUSH
43150: LD_VAR 0 4
43154: PPUSH
43155: CALL_OW 74
43159: PPUSH
43160: CALL_OW 112
43164: GO 43190
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
43166: LD_VAR 0 4
43170: PPUSH
43171: LD_VAR 0 6
43175: PPUSH
43176: LD_VAR 0 4
43180: PPUSH
43181: CALL_OW 74
43185: PPUSH
43186: CALL 44440 0 2
// end else
43190: GO 43292
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
43192: LD_VAR 0 4
43196: PPUSH
43197: LD_VAR 0 2
43201: PUSH
43202: LD_VAR 0 9
43206: ARRAY
43207: PUSH
43208: LD_INT 1
43210: ARRAY
43211: PPUSH
43212: LD_VAR 0 2
43216: PUSH
43217: LD_VAR 0 9
43221: ARRAY
43222: PUSH
43223: LD_INT 2
43225: ARRAY
43226: PPUSH
43227: CALL_OW 297
43231: PUSH
43232: LD_INT 6
43234: GREATER
43235: IFFALSE 43278
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
43237: LD_VAR 0 4
43241: PPUSH
43242: LD_VAR 0 2
43246: PUSH
43247: LD_VAR 0 9
43251: ARRAY
43252: PUSH
43253: LD_INT 1
43255: ARRAY
43256: PPUSH
43257: LD_VAR 0 2
43261: PUSH
43262: LD_VAR 0 9
43266: ARRAY
43267: PUSH
43268: LD_INT 2
43270: ARRAY
43271: PPUSH
43272: CALL_OW 114
43276: GO 43292
// SetTag ( i , tag ) ;
43278: LD_VAR 0 4
43282: PPUSH
43283: LD_VAR 0 9
43287: PPUSH
43288: CALL_OW 109
// end else
43292: GO 43365
// if enemy then
43294: LD_VAR 0 5
43298: IFFALSE 43365
// begin if GetWeapon ( i ) = ru_time_lapser then
43300: LD_VAR 0 4
43304: PPUSH
43305: CALL_OW 264
43309: PUSH
43310: LD_INT 49
43312: EQUAL
43313: IFFALSE 43341
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
43315: LD_VAR 0 4
43319: PPUSH
43320: LD_VAR 0 5
43324: PPUSH
43325: LD_VAR 0 4
43329: PPUSH
43330: CALL_OW 74
43334: PPUSH
43335: CALL_OW 112
43339: GO 43365
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
43341: LD_VAR 0 4
43345: PPUSH
43346: LD_VAR 0 5
43350: PPUSH
43351: LD_VAR 0 4
43355: PPUSH
43356: CALL_OW 74
43360: PPUSH
43361: CALL 44440 0 2
// end ; end ;
43365: GO 42941
43367: POP
43368: POP
// end ;
43369: LD_VAR 0 3
43373: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
43374: LD_INT 0
43376: PPUSH
43377: PPUSH
43378: PPUSH
// if not unit or IsInUnit ( unit ) then
43379: LD_VAR 0 1
43383: NOT
43384: PUSH
43385: LD_VAR 0 1
43389: PPUSH
43390: CALL_OW 310
43394: OR
43395: IFFALSE 43399
// exit ;
43397: GO 43490
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
43399: LD_ADDR_VAR 0 4
43403: PUSH
43404: LD_VAR 0 1
43408: PPUSH
43409: CALL_OW 250
43413: PPUSH
43414: LD_VAR 0 2
43418: PPUSH
43419: LD_INT 1
43421: PPUSH
43422: CALL_OW 272
43426: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
43427: LD_ADDR_VAR 0 5
43431: PUSH
43432: LD_VAR 0 1
43436: PPUSH
43437: CALL_OW 251
43441: PPUSH
43442: LD_VAR 0 2
43446: PPUSH
43447: LD_INT 1
43449: PPUSH
43450: CALL_OW 273
43454: ST_TO_ADDR
// if ValidHex ( x , y ) then
43455: LD_VAR 0 4
43459: PPUSH
43460: LD_VAR 0 5
43464: PPUSH
43465: CALL_OW 488
43469: IFFALSE 43490
// ComTurnXY ( unit , x , y ) ;
43471: LD_VAR 0 1
43475: PPUSH
43476: LD_VAR 0 4
43480: PPUSH
43481: LD_VAR 0 5
43485: PPUSH
43486: CALL_OW 118
// end ;
43490: LD_VAR 0 3
43494: RET
// export function SeeUnits ( side , units ) ; var i ; begin
43495: LD_INT 0
43497: PPUSH
43498: PPUSH
// result := false ;
43499: LD_ADDR_VAR 0 3
43503: PUSH
43504: LD_INT 0
43506: ST_TO_ADDR
// if not units then
43507: LD_VAR 0 2
43511: NOT
43512: IFFALSE 43516
// exit ;
43514: GO 43561
// for i in units do
43516: LD_ADDR_VAR 0 4
43520: PUSH
43521: LD_VAR 0 2
43525: PUSH
43526: FOR_IN
43527: IFFALSE 43559
// if See ( side , i ) then
43529: LD_VAR 0 1
43533: PPUSH
43534: LD_VAR 0 4
43538: PPUSH
43539: CALL_OW 292
43543: IFFALSE 43557
// begin result := true ;
43545: LD_ADDR_VAR 0 3
43549: PUSH
43550: LD_INT 1
43552: ST_TO_ADDR
// exit ;
43553: POP
43554: POP
43555: GO 43561
// end ;
43557: GO 43526
43559: POP
43560: POP
// end ;
43561: LD_VAR 0 3
43565: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
43566: LD_INT 0
43568: PPUSH
43569: PPUSH
43570: PPUSH
43571: PPUSH
// if not unit or not points then
43572: LD_VAR 0 1
43576: NOT
43577: PUSH
43578: LD_VAR 0 2
43582: NOT
43583: OR
43584: IFFALSE 43588
// exit ;
43586: GO 43678
// dist := 99999 ;
43588: LD_ADDR_VAR 0 5
43592: PUSH
43593: LD_INT 99999
43595: ST_TO_ADDR
// for i in points do
43596: LD_ADDR_VAR 0 4
43600: PUSH
43601: LD_VAR 0 2
43605: PUSH
43606: FOR_IN
43607: IFFALSE 43676
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
43609: LD_ADDR_VAR 0 6
43613: PUSH
43614: LD_VAR 0 1
43618: PPUSH
43619: LD_VAR 0 4
43623: PUSH
43624: LD_INT 1
43626: ARRAY
43627: PPUSH
43628: LD_VAR 0 4
43632: PUSH
43633: LD_INT 2
43635: ARRAY
43636: PPUSH
43637: CALL_OW 297
43641: ST_TO_ADDR
// if tmpDist < dist then
43642: LD_VAR 0 6
43646: PUSH
43647: LD_VAR 0 5
43651: LESS
43652: IFFALSE 43674
// begin result := i ;
43654: LD_ADDR_VAR 0 3
43658: PUSH
43659: LD_VAR 0 4
43663: ST_TO_ADDR
// dist := tmpDist ;
43664: LD_ADDR_VAR 0 5
43668: PUSH
43669: LD_VAR 0 6
43673: ST_TO_ADDR
// end ; end ;
43674: GO 43606
43676: POP
43677: POP
// end ;
43678: LD_VAR 0 3
43682: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
43683: LD_INT 0
43685: PPUSH
// uc_side := side ;
43686: LD_ADDR_OWVAR 20
43690: PUSH
43691: LD_VAR 0 1
43695: ST_TO_ADDR
// uc_nation := 3 ;
43696: LD_ADDR_OWVAR 21
43700: PUSH
43701: LD_INT 3
43703: ST_TO_ADDR
// vc_chassis := 25 ;
43704: LD_ADDR_OWVAR 37
43708: PUSH
43709: LD_INT 25
43711: ST_TO_ADDR
// vc_engine := engine_siberite ;
43712: LD_ADDR_OWVAR 39
43716: PUSH
43717: LD_INT 3
43719: ST_TO_ADDR
// vc_control := control_computer ;
43720: LD_ADDR_OWVAR 38
43724: PUSH
43725: LD_INT 3
43727: ST_TO_ADDR
// vc_weapon := 59 ;
43728: LD_ADDR_OWVAR 40
43732: PUSH
43733: LD_INT 59
43735: ST_TO_ADDR
// result := CreateVehicle ;
43736: LD_ADDR_VAR 0 5
43740: PUSH
43741: CALL_OW 45
43745: ST_TO_ADDR
// SetDir ( result , d ) ;
43746: LD_VAR 0 5
43750: PPUSH
43751: LD_VAR 0 4
43755: PPUSH
43756: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
43760: LD_VAR 0 5
43764: PPUSH
43765: LD_VAR 0 2
43769: PPUSH
43770: LD_VAR 0 3
43774: PPUSH
43775: LD_INT 0
43777: PPUSH
43778: CALL_OW 48
// end ;
43782: LD_VAR 0 5
43786: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
43787: LD_INT 0
43789: PPUSH
43790: PPUSH
43791: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
43792: LD_ADDR_VAR 0 2
43796: PUSH
43797: LD_INT 0
43799: PUSH
43800: LD_INT 0
43802: PUSH
43803: LD_INT 0
43805: PUSH
43806: LD_INT 0
43808: PUSH
43809: EMPTY
43810: LIST
43811: LIST
43812: LIST
43813: LIST
43814: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
43815: LD_VAR 0 1
43819: NOT
43820: PUSH
43821: LD_VAR 0 1
43825: PPUSH
43826: CALL_OW 264
43830: PUSH
43831: LD_INT 12
43833: PUSH
43834: LD_INT 51
43836: PUSH
43837: LD_INT 32
43839: PUSH
43840: LD_INT 89
43842: PUSH
43843: EMPTY
43844: LIST
43845: LIST
43846: LIST
43847: LIST
43848: IN
43849: NOT
43850: OR
43851: IFFALSE 43855
// exit ;
43853: GO 43953
// for i := 1 to 3 do
43855: LD_ADDR_VAR 0 3
43859: PUSH
43860: DOUBLE
43861: LD_INT 1
43863: DEC
43864: ST_TO_ADDR
43865: LD_INT 3
43867: PUSH
43868: FOR_TO
43869: IFFALSE 43951
// begin tmp := GetCargo ( cargo , i ) ;
43871: LD_ADDR_VAR 0 4
43875: PUSH
43876: LD_VAR 0 1
43880: PPUSH
43881: LD_VAR 0 3
43885: PPUSH
43886: CALL_OW 289
43890: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
43891: LD_ADDR_VAR 0 2
43895: PUSH
43896: LD_VAR 0 2
43900: PPUSH
43901: LD_VAR 0 3
43905: PPUSH
43906: LD_VAR 0 4
43910: PPUSH
43911: CALL_OW 1
43915: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
43916: LD_ADDR_VAR 0 2
43920: PUSH
43921: LD_VAR 0 2
43925: PPUSH
43926: LD_INT 4
43928: PPUSH
43929: LD_VAR 0 2
43933: PUSH
43934: LD_INT 4
43936: ARRAY
43937: PUSH
43938: LD_VAR 0 4
43942: PLUS
43943: PPUSH
43944: CALL_OW 1
43948: ST_TO_ADDR
// end ;
43949: GO 43868
43951: POP
43952: POP
// end ;
43953: LD_VAR 0 2
43957: RET
// export function Length ( array ) ; begin
43958: LD_INT 0
43960: PPUSH
// result := array + 0 ;
43961: LD_ADDR_VAR 0 2
43965: PUSH
43966: LD_VAR 0 1
43970: PUSH
43971: LD_INT 0
43973: PLUS
43974: ST_TO_ADDR
// end ;
43975: LD_VAR 0 2
43979: RET
// export function PrepareArray ( array ) ; begin
43980: LD_INT 0
43982: PPUSH
// result := array diff 0 ;
43983: LD_ADDR_VAR 0 2
43987: PUSH
43988: LD_VAR 0 1
43992: PUSH
43993: LD_INT 0
43995: DIFF
43996: ST_TO_ADDR
// if not result [ 1 ] then
43997: LD_VAR 0 2
44001: PUSH
44002: LD_INT 1
44004: ARRAY
44005: NOT
44006: IFFALSE 44026
// result := Delete ( result , 1 ) ;
44008: LD_ADDR_VAR 0 2
44012: PUSH
44013: LD_VAR 0 2
44017: PPUSH
44018: LD_INT 1
44020: PPUSH
44021: CALL_OW 3
44025: ST_TO_ADDR
// end ;
44026: LD_VAR 0 2
44030: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
44031: LD_INT 0
44033: PPUSH
44034: PPUSH
44035: PPUSH
44036: PPUSH
// sibRocketRange := 25 ;
44037: LD_ADDR_VAR 0 6
44041: PUSH
44042: LD_INT 25
44044: ST_TO_ADDR
// result := false ;
44045: LD_ADDR_VAR 0 4
44049: PUSH
44050: LD_INT 0
44052: ST_TO_ADDR
// for i := 0 to 5 do
44053: LD_ADDR_VAR 0 5
44057: PUSH
44058: DOUBLE
44059: LD_INT 0
44061: DEC
44062: ST_TO_ADDR
44063: LD_INT 5
44065: PUSH
44066: FOR_TO
44067: IFFALSE 44134
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
44069: LD_VAR 0 1
44073: PPUSH
44074: LD_VAR 0 5
44078: PPUSH
44079: LD_VAR 0 6
44083: PPUSH
44084: CALL_OW 272
44088: PPUSH
44089: LD_VAR 0 2
44093: PPUSH
44094: LD_VAR 0 5
44098: PPUSH
44099: LD_VAR 0 6
44103: PPUSH
44104: CALL_OW 273
44108: PPUSH
44109: LD_VAR 0 3
44113: PPUSH
44114: CALL_OW 309
44118: IFFALSE 44132
// begin result := true ;
44120: LD_ADDR_VAR 0 4
44124: PUSH
44125: LD_INT 1
44127: ST_TO_ADDR
// exit ;
44128: POP
44129: POP
44130: GO 44136
// end ;
44132: GO 44066
44134: POP
44135: POP
// end ;
44136: LD_VAR 0 4
44140: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
44141: LD_INT 0
44143: PPUSH
44144: PPUSH
44145: PPUSH
// if btype = b_depot then
44146: LD_VAR 0 2
44150: PUSH
44151: LD_INT 0
44153: EQUAL
44154: IFFALSE 44166
// begin result := true ;
44156: LD_ADDR_VAR 0 3
44160: PUSH
44161: LD_INT 1
44163: ST_TO_ADDR
// exit ;
44164: GO 44282
// end ; pom := GetBase ( depot ) ;
44166: LD_ADDR_VAR 0 4
44170: PUSH
44171: LD_VAR 0 1
44175: PPUSH
44176: CALL_OW 274
44180: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44181: LD_ADDR_VAR 0 5
44185: PUSH
44186: LD_VAR 0 2
44190: PPUSH
44191: LD_VAR 0 1
44195: PPUSH
44196: CALL_OW 248
44200: PPUSH
44201: CALL_OW 450
44205: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
44206: LD_ADDR_VAR 0 3
44210: PUSH
44211: LD_VAR 0 4
44215: PPUSH
44216: LD_INT 1
44218: PPUSH
44219: CALL_OW 275
44223: PUSH
44224: LD_VAR 0 5
44228: PUSH
44229: LD_INT 1
44231: ARRAY
44232: GREATEREQUAL
44233: PUSH
44234: LD_VAR 0 4
44238: PPUSH
44239: LD_INT 2
44241: PPUSH
44242: CALL_OW 275
44246: PUSH
44247: LD_VAR 0 5
44251: PUSH
44252: LD_INT 2
44254: ARRAY
44255: GREATEREQUAL
44256: AND
44257: PUSH
44258: LD_VAR 0 4
44262: PPUSH
44263: LD_INT 3
44265: PPUSH
44266: CALL_OW 275
44270: PUSH
44271: LD_VAR 0 5
44275: PUSH
44276: LD_INT 3
44278: ARRAY
44279: GREATEREQUAL
44280: AND
44281: ST_TO_ADDR
// end ;
44282: LD_VAR 0 3
44286: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
44287: LD_INT 0
44289: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
44290: LD_VAR 0 1
44294: PPUSH
44295: LD_VAR 0 2
44299: PPUSH
44300: LD_INT 0
44302: PPUSH
44303: LD_INT 0
44305: PPUSH
44306: LD_INT 1
44308: PPUSH
44309: LD_INT 0
44311: PPUSH
44312: CALL_OW 587
// end ;
44316: LD_VAR 0 3
44320: RET
// export function CenterOnNow ( unit ) ; begin
44321: LD_INT 0
44323: PPUSH
// result := IsInUnit ( unit ) ;
44324: LD_ADDR_VAR 0 2
44328: PUSH
44329: LD_VAR 0 1
44333: PPUSH
44334: CALL_OW 310
44338: ST_TO_ADDR
// if not result then
44339: LD_VAR 0 2
44343: NOT
44344: IFFALSE 44356
// result := unit ;
44346: LD_ADDR_VAR 0 2
44350: PUSH
44351: LD_VAR 0 1
44355: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
44356: LD_VAR 0 1
44360: PPUSH
44361: CALL_OW 87
// end ;
44365: LD_VAR 0 2
44369: RET
// export function ComMoveHex ( unit , hex ) ; begin
44370: LD_INT 0
44372: PPUSH
// if not hex then
44373: LD_VAR 0 2
44377: NOT
44378: IFFALSE 44382
// exit ;
44380: GO 44435
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
44382: LD_VAR 0 2
44386: PUSH
44387: LD_INT 1
44389: ARRAY
44390: PPUSH
44391: LD_VAR 0 2
44395: PUSH
44396: LD_INT 2
44398: ARRAY
44399: PPUSH
44400: CALL_OW 428
44404: IFFALSE 44408
// exit ;
44406: GO 44435
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
44408: LD_VAR 0 1
44412: PPUSH
44413: LD_VAR 0 2
44417: PUSH
44418: LD_INT 1
44420: ARRAY
44421: PPUSH
44422: LD_VAR 0 2
44426: PUSH
44427: LD_INT 2
44429: ARRAY
44430: PPUSH
44431: CALL_OW 111
// end ;
44435: LD_VAR 0 3
44439: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
44440: LD_INT 0
44442: PPUSH
44443: PPUSH
44444: PPUSH
// if not unit or not enemy then
44445: LD_VAR 0 1
44449: NOT
44450: PUSH
44451: LD_VAR 0 2
44455: NOT
44456: OR
44457: IFFALSE 44461
// exit ;
44459: GO 44585
// x := GetX ( enemy ) ;
44461: LD_ADDR_VAR 0 4
44465: PUSH
44466: LD_VAR 0 2
44470: PPUSH
44471: CALL_OW 250
44475: ST_TO_ADDR
// y := GetY ( enemy ) ;
44476: LD_ADDR_VAR 0 5
44480: PUSH
44481: LD_VAR 0 2
44485: PPUSH
44486: CALL_OW 251
44490: ST_TO_ADDR
// if ValidHex ( x , y ) then
44491: LD_VAR 0 4
44495: PPUSH
44496: LD_VAR 0 5
44500: PPUSH
44501: CALL_OW 488
44505: IFFALSE 44585
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
44507: LD_VAR 0 2
44511: PPUSH
44512: CALL_OW 247
44516: PUSH
44517: LD_INT 3
44519: PUSH
44520: LD_INT 2
44522: PUSH
44523: EMPTY
44524: LIST
44525: LIST
44526: IN
44527: PUSH
44528: LD_VAR 0 1
44532: PPUSH
44533: CALL_OW 255
44537: PPUSH
44538: LD_VAR 0 2
44542: PPUSH
44543: CALL_OW 292
44547: OR
44548: IFFALSE 44566
// ComAttackUnit ( unit , enemy ) else
44550: LD_VAR 0 1
44554: PPUSH
44555: LD_VAR 0 2
44559: PPUSH
44560: CALL_OW 115
44564: GO 44585
// ComAgressiveMove ( unit , x , y ) ;
44566: LD_VAR 0 1
44570: PPUSH
44571: LD_VAR 0 4
44575: PPUSH
44576: LD_VAR 0 5
44580: PPUSH
44581: CALL_OW 114
// end ;
44585: LD_VAR 0 3
44589: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
44590: LD_INT 0
44592: PPUSH
44593: PPUSH
44594: PPUSH
// list := AreaToList ( area , 0 ) ;
44595: LD_ADDR_VAR 0 5
44599: PUSH
44600: LD_VAR 0 1
44604: PPUSH
44605: LD_INT 0
44607: PPUSH
44608: CALL_OW 517
44612: ST_TO_ADDR
// if not list then
44613: LD_VAR 0 5
44617: NOT
44618: IFFALSE 44622
// exit ;
44620: GO 44752
// if all then
44622: LD_VAR 0 2
44626: IFFALSE 44714
// begin for i := 1 to list [ 1 ] do
44628: LD_ADDR_VAR 0 4
44632: PUSH
44633: DOUBLE
44634: LD_INT 1
44636: DEC
44637: ST_TO_ADDR
44638: LD_VAR 0 5
44642: PUSH
44643: LD_INT 1
44645: ARRAY
44646: PUSH
44647: FOR_TO
44648: IFFALSE 44710
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
44650: LD_ADDR_VAR 0 3
44654: PUSH
44655: LD_VAR 0 3
44659: PPUSH
44660: LD_VAR 0 3
44664: PUSH
44665: LD_INT 1
44667: PLUS
44668: PPUSH
44669: LD_VAR 0 5
44673: PUSH
44674: LD_INT 1
44676: ARRAY
44677: PUSH
44678: LD_VAR 0 4
44682: ARRAY
44683: PUSH
44684: LD_VAR 0 5
44688: PUSH
44689: LD_INT 2
44691: ARRAY
44692: PUSH
44693: LD_VAR 0 4
44697: ARRAY
44698: PUSH
44699: EMPTY
44700: LIST
44701: LIST
44702: PPUSH
44703: CALL_OW 1
44707: ST_TO_ADDR
44708: GO 44647
44710: POP
44711: POP
// exit ;
44712: GO 44752
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
44714: LD_ADDR_VAR 0 3
44718: PUSH
44719: LD_VAR 0 5
44723: PUSH
44724: LD_INT 1
44726: ARRAY
44727: PUSH
44728: LD_INT 1
44730: ARRAY
44731: PUSH
44732: LD_VAR 0 5
44736: PUSH
44737: LD_INT 2
44739: ARRAY
44740: PUSH
44741: LD_INT 1
44743: ARRAY
44744: PUSH
44745: EMPTY
44746: LIST
44747: LIST
44748: PUSH
44749: EMPTY
44750: LIST
44751: ST_TO_ADDR
// end ;
44752: LD_VAR 0 3
44756: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
44757: LD_INT 0
44759: PPUSH
44760: PPUSH
// list := AreaToList ( area , 0 ) ;
44761: LD_ADDR_VAR 0 4
44765: PUSH
44766: LD_VAR 0 1
44770: PPUSH
44771: LD_INT 0
44773: PPUSH
44774: CALL_OW 517
44778: ST_TO_ADDR
// if not list then
44779: LD_VAR 0 4
44783: NOT
44784: IFFALSE 44788
// exit ;
44786: GO 44829
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
44788: LD_ADDR_VAR 0 3
44792: PUSH
44793: LD_VAR 0 4
44797: PUSH
44798: LD_INT 1
44800: ARRAY
44801: PUSH
44802: LD_INT 1
44804: ARRAY
44805: PUSH
44806: LD_VAR 0 4
44810: PUSH
44811: LD_INT 2
44813: ARRAY
44814: PUSH
44815: LD_INT 1
44817: ARRAY
44818: PUSH
44819: LD_VAR 0 2
44823: PUSH
44824: EMPTY
44825: LIST
44826: LIST
44827: LIST
44828: ST_TO_ADDR
// end ;
44829: LD_VAR 0 3
44833: RET
// export function First ( array ) ; begin
44834: LD_INT 0
44836: PPUSH
// if not array then
44837: LD_VAR 0 1
44841: NOT
44842: IFFALSE 44846
// exit ;
44844: GO 44860
// result := array [ 1 ] ;
44846: LD_ADDR_VAR 0 2
44850: PUSH
44851: LD_VAR 0 1
44855: PUSH
44856: LD_INT 1
44858: ARRAY
44859: ST_TO_ADDR
// end ;
44860: LD_VAR 0 2
44864: RET
// export function Last ( array ) ; begin
44865: LD_INT 0
44867: PPUSH
// if not array then
44868: LD_VAR 0 1
44872: NOT
44873: IFFALSE 44877
// exit ;
44875: GO 44893
// result := array [ array ] ;
44877: LD_ADDR_VAR 0 2
44881: PUSH
44882: LD_VAR 0 1
44886: PUSH
44887: LD_VAR 0 1
44891: ARRAY
44892: ST_TO_ADDR
// end ;
44893: LD_VAR 0 2
44897: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
44898: LD_INT 0
44900: PPUSH
44901: PPUSH
// result := [ ] ;
44902: LD_ADDR_VAR 0 5
44906: PUSH
44907: EMPTY
44908: ST_TO_ADDR
// if not array then
44909: LD_VAR 0 1
44913: NOT
44914: IFFALSE 44918
// exit ;
44916: GO 45030
// for i := 1 to array do
44918: LD_ADDR_VAR 0 6
44922: PUSH
44923: DOUBLE
44924: LD_INT 1
44926: DEC
44927: ST_TO_ADDR
44928: LD_VAR 0 1
44932: PUSH
44933: FOR_TO
44934: IFFALSE 45028
// if array [ i ] [ index ] = value then
44936: LD_VAR 0 1
44940: PUSH
44941: LD_VAR 0 6
44945: ARRAY
44946: PUSH
44947: LD_VAR 0 2
44951: ARRAY
44952: PUSH
44953: LD_VAR 0 3
44957: EQUAL
44958: IFFALSE 45026
// begin if indexColumn then
44960: LD_VAR 0 4
44964: IFFALSE 45000
// result := Join ( result , array [ i ] [ indexColumn ] ) else
44966: LD_ADDR_VAR 0 5
44970: PUSH
44971: LD_VAR 0 5
44975: PPUSH
44976: LD_VAR 0 1
44980: PUSH
44981: LD_VAR 0 6
44985: ARRAY
44986: PUSH
44987: LD_VAR 0 4
44991: ARRAY
44992: PPUSH
44993: CALL 40218 0 2
44997: ST_TO_ADDR
44998: GO 45026
// result := Join ( result , array [ i ] ) ;
45000: LD_ADDR_VAR 0 5
45004: PUSH
45005: LD_VAR 0 5
45009: PPUSH
45010: LD_VAR 0 1
45014: PUSH
45015: LD_VAR 0 6
45019: ARRAY
45020: PPUSH
45021: CALL 40218 0 2
45025: ST_TO_ADDR
// end ;
45026: GO 44933
45028: POP
45029: POP
// end ;
45030: LD_VAR 0 5
45034: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
45035: LD_INT 0
45037: PPUSH
// if not vehicles or not parkingPoint then
45038: LD_VAR 0 1
45042: NOT
45043: PUSH
45044: LD_VAR 0 2
45048: NOT
45049: OR
45050: IFFALSE 45054
// exit ;
45052: GO 45152
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
45054: LD_ADDR_VAR 0 1
45058: PUSH
45059: LD_VAR 0 1
45063: PPUSH
45064: LD_INT 50
45066: PUSH
45067: EMPTY
45068: LIST
45069: PUSH
45070: LD_INT 3
45072: PUSH
45073: LD_INT 92
45075: PUSH
45076: LD_VAR 0 2
45080: PUSH
45081: LD_INT 1
45083: ARRAY
45084: PUSH
45085: LD_VAR 0 2
45089: PUSH
45090: LD_INT 2
45092: ARRAY
45093: PUSH
45094: LD_INT 8
45096: PUSH
45097: EMPTY
45098: LIST
45099: LIST
45100: LIST
45101: LIST
45102: PUSH
45103: EMPTY
45104: LIST
45105: LIST
45106: PUSH
45107: EMPTY
45108: LIST
45109: LIST
45110: PPUSH
45111: CALL_OW 72
45115: ST_TO_ADDR
// if not vehicles then
45116: LD_VAR 0 1
45120: NOT
45121: IFFALSE 45125
// exit ;
45123: GO 45152
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
45125: LD_VAR 0 1
45129: PPUSH
45130: LD_VAR 0 2
45134: PUSH
45135: LD_INT 1
45137: ARRAY
45138: PPUSH
45139: LD_VAR 0 2
45143: PUSH
45144: LD_INT 2
45146: ARRAY
45147: PPUSH
45148: CALL_OW 111
// end ;
45152: LD_VAR 0 3
45156: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
45157: LD_INT 0
45159: PPUSH
45160: PPUSH
45161: PPUSH
// if not side or not area then
45162: LD_VAR 0 1
45166: NOT
45167: PUSH
45168: LD_VAR 0 2
45172: NOT
45173: OR
45174: IFFALSE 45178
// exit ;
45176: GO 45297
// tmp := AreaToList ( area , 0 ) ;
45178: LD_ADDR_VAR 0 5
45182: PUSH
45183: LD_VAR 0 2
45187: PPUSH
45188: LD_INT 0
45190: PPUSH
45191: CALL_OW 517
45195: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
45196: LD_ADDR_VAR 0 4
45200: PUSH
45201: DOUBLE
45202: LD_INT 1
45204: DEC
45205: ST_TO_ADDR
45206: LD_VAR 0 5
45210: PUSH
45211: LD_INT 1
45213: ARRAY
45214: PUSH
45215: FOR_TO
45216: IFFALSE 45295
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
45218: LD_VAR 0 5
45222: PUSH
45223: LD_INT 1
45225: ARRAY
45226: PUSH
45227: LD_VAR 0 4
45231: ARRAY
45232: PPUSH
45233: LD_VAR 0 5
45237: PUSH
45238: LD_INT 2
45240: ARRAY
45241: PUSH
45242: LD_VAR 0 4
45246: ARRAY
45247: PPUSH
45248: CALL_OW 351
45252: IFFALSE 45293
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
45254: LD_VAR 0 5
45258: PUSH
45259: LD_INT 1
45261: ARRAY
45262: PUSH
45263: LD_VAR 0 4
45267: ARRAY
45268: PPUSH
45269: LD_VAR 0 5
45273: PUSH
45274: LD_INT 2
45276: ARRAY
45277: PUSH
45278: LD_VAR 0 4
45282: ARRAY
45283: PPUSH
45284: LD_VAR 0 1
45288: PPUSH
45289: CALL_OW 244
// end ;
45293: GO 45215
45295: POP
45296: POP
// end ; end_of_file
45297: LD_VAR 0 3
45301: RET
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpRespawn , mpKingArea , mpPoints , mpDisplayStrings , mpGameActive ; export function InitMultiplayer ; var i ; begin
45302: LD_INT 0
45304: PPUSH
45305: PPUSH
// disable ( mpActive ) ;
45306: LD_INT 100
45308: DISABLE_MARKED
// disable ( mpWin ) ;
45309: LD_INT 101
45311: DISABLE_MARKED
// disable ( mpLose ) ;
45312: LD_INT 102
45314: DISABLE_MARKED
// mpGameType := 0 ;
45315: LD_ADDR_EXP 1
45319: PUSH
45320: LD_INT 0
45322: ST_TO_ADDR
// mpGameSettings := [ ] ;
45323: LD_ADDR_EXP 4
45327: PUSH
45328: EMPTY
45329: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
45330: LD_ADDR_EXP 2
45334: PUSH
45335: EMPTY
45336: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
45337: LD_ADDR_EXP 3
45341: PUSH
45342: EMPTY
45343: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
45344: LD_ADDR_EXP 27
45348: PUSH
45349: LD_INT 2
45351: PUSH
45352: LD_INT 2
45354: PUSH
45355: EMPTY
45356: LIST
45357: LIST
45358: ST_TO_ADDR
// mpOilDeposits := [ ] ;
45359: LD_ADDR_EXP 10
45363: PUSH
45364: EMPTY
45365: ST_TO_ADDR
// mpSibDeposits := [ ] ;
45366: LD_ADDR_EXP 11
45370: PUSH
45371: EMPTY
45372: ST_TO_ADDR
// mpDepots := [ ] ;
45373: LD_ADDR_EXP 12
45377: PUSH
45378: EMPTY
45379: ST_TO_ADDR
// mpBuildings := [ ] ;
45380: LD_ADDR_EXP 15
45384: PUSH
45385: EMPTY
45386: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
45387: LD_ADDR_EXP 16
45391: PUSH
45392: EMPTY
45393: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
45394: LD_ADDR_EXP 17
45398: PUSH
45399: EMPTY
45400: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
45401: LD_ADDR_EXP 18
45405: PUSH
45406: EMPTY
45407: ST_TO_ADDR
// mpStartingResources := [ ] ;
45408: LD_ADDR_EXP 13
45412: PUSH
45413: EMPTY
45414: ST_TO_ADDR
// mpStartPos := [ ] ;
45415: LD_ADDR_EXP 19
45419: PUSH
45420: EMPTY
45421: ST_TO_ADDR
// mpBattleFlag := - 1 ;
45422: LD_ADDR_EXP 20
45426: PUSH
45427: LD_INT 1
45429: NEG
45430: ST_TO_ADDR
// mpBattleFlags := [ ] ;
45431: LD_ADDR_EXP 21
45435: PUSH
45436: EMPTY
45437: ST_TO_ADDR
// mpApemans := [ ] ;
45438: LD_ADDR_EXP 28
45442: PUSH
45443: EMPTY
45444: ST_TO_ADDR
// mpApemansArea := [ ] ;
45445: LD_ADDR_EXP 29
45449: PUSH
45450: EMPTY
45451: ST_TO_ADDR
// mpRespawn := [ ] ;
45452: LD_ADDR_EXP 30
45456: PUSH
45457: EMPTY
45458: ST_TO_ADDR
// mpKingArea := 0 ;
45459: LD_ADDR_EXP 31
45463: PUSH
45464: LD_INT 0
45466: ST_TO_ADDR
// mpPoints := [ ] ;
45467: LD_ADDR_EXP 32
45471: PUSH
45472: EMPTY
45473: ST_TO_ADDR
// mpShipments := 0 ;
45474: LD_ADDR_EXP 25
45478: PUSH
45479: LD_INT 0
45481: ST_TO_ADDR
// mpPeopleSkill := 3 ;
45482: LD_ADDR_EXP 23
45486: PUSH
45487: LD_INT 3
45489: ST_TO_ADDR
// mpPeopleAmount := 15 ;
45490: LD_ADDR_EXP 22
45494: PUSH
45495: LD_INT 15
45497: ST_TO_ADDR
// mpDisplayStrings := 0 ;
45498: LD_ADDR_EXP 33
45502: PUSH
45503: LD_INT 0
45505: ST_TO_ADDR
// mpGameActive := false ;
45506: LD_ADDR_EXP 34
45510: PUSH
45511: LD_INT 0
45513: ST_TO_ADDR
// for i := 1 to 32 do
45514: LD_ADDR_VAR 0 2
45518: PUSH
45519: DOUBLE
45520: LD_INT 1
45522: DEC
45523: ST_TO_ADDR
45524: LD_INT 32
45526: PUSH
45527: FOR_TO
45528: IFFALSE 45555
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
45530: LD_ADDR_EXP 4
45534: PUSH
45535: LD_EXP 4
45539: PPUSH
45540: LD_VAR 0 2
45544: PPUSH
45545: LD_INT 0
45547: PPUSH
45548: CALL_OW 1
45552: ST_TO_ADDR
45553: GO 45527
45555: POP
45556: POP
// end ;
45557: LD_VAR 0 1
45561: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
45562: LD_INT 0
45564: PPUSH
45565: PPUSH
45566: PPUSH
45567: PPUSH
45568: PPUSH
45569: PPUSH
45570: PPUSH
45571: PPUSH
45572: PPUSH
45573: PPUSH
45574: PPUSH
45575: PPUSH
45576: PPUSH
45577: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing ] ;
45578: LD_ADDR_VAR 0 14
45582: PUSH
45583: LD_INT 1
45585: PUSH
45586: LD_INT 2
45588: PUSH
45589: LD_INT 3
45591: PUSH
45592: EMPTY
45593: LIST
45594: LIST
45595: LIST
45596: ST_TO_ADDR
// for i in gameTypes do
45597: LD_ADDR_VAR 0 2
45601: PUSH
45602: LD_VAR 0 14
45606: PUSH
45607: FOR_IN
45608: IFFALSE 45617
// disable ( i ) ;
45610: LD_VAR 0 2
45614: DISABLE_MARKED
45615: GO 45607
45617: POP
45618: POP
// if Multiplayer then
45619: LD_OWVAR 4
45623: IFFALSE 45807
// begin mpGameType := mp_game_type ;
45625: LD_ADDR_EXP 1
45629: PUSH
45630: LD_OWVAR 6
45634: ST_TO_ADDR
// your_side := mp_player_side ;
45635: LD_ADDR_OWVAR 2
45639: PUSH
45640: LD_OWVAR 7
45644: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
45645: LD_ADDR_EXP 5
45649: PUSH
45650: LD_OWVAR 17
45654: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
45655: LD_ADDR_EXP 6
45659: PUSH
45660: LD_OWVAR 15
45664: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
45665: LD_ADDR_EXP 7
45669: PUSH
45670: LD_OWVAR 16
45674: ST_TO_ADDR
// mpTeams := mp_teams ;
45675: LD_ADDR_EXP 8
45679: PUSH
45680: LD_OWVAR 12
45684: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
45685: LD_ADDR_VAR 0 2
45689: PUSH
45690: DOUBLE
45691: LD_INT 1
45693: DEC
45694: ST_TO_ADDR
45695: LD_EXP 2
45699: PPUSH
45700: CALL 4629 0 1
45704: PUSH
45705: FOR_TO
45706: IFFALSE 45782
// begin setting := mpGameSettingsKeys [ i ] ;
45708: LD_ADDR_VAR 0 12
45712: PUSH
45713: LD_EXP 2
45717: PUSH
45718: LD_VAR 0 2
45722: ARRAY
45723: ST_TO_ADDR
// if setting then
45724: LD_VAR 0 12
45728: IFFALSE 45780
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
45730: LD_ADDR_EXP 4
45734: PUSH
45735: LD_EXP 4
45739: PPUSH
45740: LD_VAR 0 2
45744: PPUSH
45745: LD_EXP 3
45749: PUSH
45750: LD_VAR 0 2
45754: ARRAY
45755: PUSH
45756: LD_VAR 0 2
45760: PUSH
45761: LD_INT 1
45763: MINUS
45764: PPUSH
45765: CALL_OW 426
45769: PUSH
45770: LD_INT 1
45772: PLUS
45773: ARRAY
45774: PPUSH
45775: CALL_OW 1
45779: ST_TO_ADDR
// end ;
45780: GO 45705
45782: POP
45783: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
45784: LD_ADDR_EXP 9
45788: PUSH
45789: LD_EXP 6
45793: PUSH
45794: LD_INT 0
45796: PUSH
45797: EMPTY
45798: LIST
45799: DIFF
45800: PUSH
45801: LD_INT 1
45803: GREATER
45804: ST_TO_ADDR
// end else
45805: GO 45807
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
45807: LD_EXP 1
45811: PPUSH
45812: CALL 804 0 1
// if Count ( mpMarkedAreas ) then
45816: LD_EXP 16
45820: PPUSH
45821: CALL 4629 0 1
45825: IFFALSE 45856
// begin for i in mpMarkedAreas do
45827: LD_ADDR_VAR 0 2
45831: PUSH
45832: LD_EXP 16
45836: PUSH
45837: FOR_IN
45838: IFFALSE 45854
// SetAreaMapShow ( i , 0 ) ;
45840: LD_VAR 0 2
45844: PPUSH
45845: LD_INT 0
45847: PPUSH
45848: CALL_OW 424
45852: GO 45837
45854: POP
45855: POP
// end ; for i := 1 to 8 do
45856: LD_ADDR_VAR 0 2
45860: PUSH
45861: DOUBLE
45862: LD_INT 1
45864: DEC
45865: ST_TO_ADDR
45866: LD_INT 8
45868: PUSH
45869: FOR_TO
45870: IFFALSE 46969
// begin if not mpSidePositions [ i ] then
45872: LD_EXP 5
45876: PUSH
45877: LD_VAR 0 2
45881: ARRAY
45882: NOT
45883: IFFALSE 45887
// continue ;
45885: GO 45869
// side := i ;
45887: LD_ADDR_VAR 0 7
45891: PUSH
45892: LD_VAR 0 2
45896: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
45897: LD_ADDR_VAR 0 9
45901: PUSH
45902: LD_EXP 7
45906: PUSH
45907: LD_VAR 0 2
45911: ARRAY
45912: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
45913: LD_ADDR_VAR 0 8
45917: PUSH
45918: LD_EXP 5
45922: PUSH
45923: LD_VAR 0 2
45927: ARRAY
45928: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
45929: LD_EXP 10
45933: PPUSH
45934: CALL 4629 0 1
45938: IFFALSE 46015
// begin for j in mpOilDeposits [ pos ] do
45940: LD_ADDR_VAR 0 3
45944: PUSH
45945: LD_EXP 10
45949: PUSH
45950: LD_VAR 0 8
45954: ARRAY
45955: PUSH
45956: FOR_IN
45957: IFFALSE 46013
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
45959: LD_VAR 0 3
45963: PUSH
45964: LD_INT 1
45966: ARRAY
45967: PPUSH
45968: LD_VAR 0 3
45972: PUSH
45973: LD_INT 2
45975: ARRAY
45976: PPUSH
45977: LD_INT 2
45979: PPUSH
45980: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
45984: LD_VAR 0 3
45988: PUSH
45989: LD_INT 1
45991: ARRAY
45992: PPUSH
45993: LD_VAR 0 3
45997: PUSH
45998: LD_INT 2
46000: ARRAY
46001: PPUSH
46002: LD_VAR 0 7
46006: PPUSH
46007: CALL_OW 441
// end ;
46011: GO 45956
46013: POP
46014: POP
// end ; if Count ( mpSibDeposits ) then
46015: LD_EXP 11
46019: PPUSH
46020: CALL 4629 0 1
46024: IFFALSE 46101
// begin for j in mpSibDeposits [ pos ] do
46026: LD_ADDR_VAR 0 3
46030: PUSH
46031: LD_EXP 11
46035: PUSH
46036: LD_VAR 0 8
46040: ARRAY
46041: PUSH
46042: FOR_IN
46043: IFFALSE 46099
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
46045: LD_VAR 0 3
46049: PUSH
46050: LD_INT 1
46052: ARRAY
46053: PPUSH
46054: LD_VAR 0 3
46058: PUSH
46059: LD_INT 2
46061: ARRAY
46062: PPUSH
46063: LD_INT 3
46065: PPUSH
46066: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
46070: LD_VAR 0 3
46074: PUSH
46075: LD_INT 1
46077: ARRAY
46078: PPUSH
46079: LD_VAR 0 3
46083: PUSH
46084: LD_INT 2
46086: ARRAY
46087: PPUSH
46088: LD_VAR 0 7
46092: PPUSH
46093: CALL_OW 441
// end ;
46097: GO 46042
46099: POP
46100: POP
// end ; InitBc ;
46101: CALL_OW 21
// InitUc ;
46105: CALL_OW 18
// uc_side := side ;
46109: LD_ADDR_OWVAR 20
46113: PUSH
46114: LD_VAR 0 7
46118: ST_TO_ADDR
// uc_nation := nation ;
46119: LD_ADDR_OWVAR 21
46123: PUSH
46124: LD_VAR 0 9
46128: ST_TO_ADDR
// if Count ( mpDepots ) then
46129: LD_EXP 12
46133: PPUSH
46134: CALL 4629 0 1
46138: IFFALSE 46294
// begin bc_level := 0 ;
46140: LD_ADDR_OWVAR 43
46144: PUSH
46145: LD_INT 0
46147: ST_TO_ADDR
// bc_type := b_depot ;
46148: LD_ADDR_OWVAR 42
46152: PUSH
46153: LD_INT 0
46155: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
46156: LD_ADDR_VAR 0 4
46160: PUSH
46161: LD_EXP 12
46165: PUSH
46166: LD_VAR 0 8
46170: ARRAY
46171: PUSH
46172: LD_INT 1
46174: ARRAY
46175: PPUSH
46176: LD_EXP 12
46180: PUSH
46181: LD_VAR 0 8
46185: ARRAY
46186: PUSH
46187: LD_INT 2
46189: ARRAY
46190: PPUSH
46191: LD_EXP 12
46195: PUSH
46196: LD_VAR 0 8
46200: ARRAY
46201: PUSH
46202: LD_INT 3
46204: ARRAY
46205: PPUSH
46206: CALL_OW 47
46210: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
46211: LD_VAR 0 4
46215: PPUSH
46216: LD_STRING @
46218: PUSH
46219: LD_VAR 0 7
46223: STR
46224: PPUSH
46225: CALL_OW 500
// if Count ( mpStartingResources ) then
46229: LD_EXP 13
46233: PPUSH
46234: CALL 4629 0 1
46238: IFFALSE 46292
// begin for j := 1 to mpStartingResources do
46240: LD_ADDR_VAR 0 3
46244: PUSH
46245: DOUBLE
46246: LD_INT 1
46248: DEC
46249: ST_TO_ADDR
46250: LD_EXP 13
46254: PUSH
46255: FOR_TO
46256: IFFALSE 46290
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
46258: LD_VAR 0 4
46262: PPUSH
46263: CALL_OW 274
46267: PPUSH
46268: LD_VAR 0 3
46272: PPUSH
46273: LD_EXP 13
46277: PUSH
46278: LD_VAR 0 3
46282: ARRAY
46283: PPUSH
46284: CALL_OW 277
46288: GO 46255
46290: POP
46291: POP
// end ; end else
46292: GO 46441
// if Count ( mpStartingResources ) then
46294: LD_EXP 13
46298: PPUSH
46299: CALL 4629 0 1
46303: IFFALSE 46441
// begin for j := 1 to mpStartingResources do
46305: LD_ADDR_VAR 0 3
46309: PUSH
46310: DOUBLE
46311: LD_INT 1
46313: DEC
46314: ST_TO_ADDR
46315: LD_EXP 13
46319: PUSH
46320: FOR_TO
46321: IFFALSE 46439
// begin resources := mpStartingResources [ j ] ;
46323: LD_ADDR_VAR 0 13
46327: PUSH
46328: LD_EXP 13
46332: PUSH
46333: LD_VAR 0 3
46337: ARRAY
46338: ST_TO_ADDR
// repeat if resources >= 50 then
46339: LD_VAR 0 13
46343: PUSH
46344: LD_INT 50
46346: GREATEREQUAL
46347: IFFALSE 46393
// begin CreateResourcesXYR ( j , 5 , x , y , 4 , false ) ;
46349: LD_VAR 0 3
46353: PPUSH
46354: LD_INT 5
46356: PPUSH
46357: LD_VAR 0 5
46361: PPUSH
46362: LD_VAR 0 6
46366: PPUSH
46367: LD_INT 4
46369: PPUSH
46370: LD_INT 0
46372: PPUSH
46373: CALL_OW 60
// resources := resources - 50 ;
46377: LD_ADDR_VAR 0 13
46381: PUSH
46382: LD_VAR 0 13
46386: PUSH
46387: LD_INT 50
46389: MINUS
46390: ST_TO_ADDR
// end else
46391: GO 46427
// CreateResourcesXYR ( j , resources div 10 , x , y , 4 , false ) ;
46393: LD_VAR 0 3
46397: PPUSH
46398: LD_VAR 0 13
46402: PUSH
46403: LD_INT 10
46405: DIV
46406: PPUSH
46407: LD_VAR 0 5
46411: PPUSH
46412: LD_VAR 0 6
46416: PPUSH
46417: LD_INT 4
46419: PPUSH
46420: LD_INT 0
46422: PPUSH
46423: CALL_OW 60
// until resources <= 0 ;
46427: LD_VAR 0 13
46431: PUSH
46432: LD_INT 0
46434: LESSEQUAL
46435: IFFALSE 46339
// end ;
46437: GO 46320
46439: POP
46440: POP
// end ; if Count ( mpBuildings ) then
46441: LD_EXP 15
46445: PPUSH
46446: CALL 4629 0 1
46450: IFFALSE 46528
// begin for j in mpBuildings [ pos ] do
46452: LD_ADDR_VAR 0 3
46456: PUSH
46457: LD_EXP 15
46461: PUSH
46462: LD_VAR 0 8
46466: ARRAY
46467: PUSH
46468: FOR_IN
46469: IFFALSE 46526
// begin bc_level := 0 ;
46471: LD_ADDR_OWVAR 43
46475: PUSH
46476: LD_INT 0
46478: ST_TO_ADDR
// bc_type := j [ 1 ] ;
46479: LD_ADDR_OWVAR 42
46483: PUSH
46484: LD_VAR 0 3
46488: PUSH
46489: LD_INT 1
46491: ARRAY
46492: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
46493: LD_VAR 0 3
46497: PUSH
46498: LD_INT 2
46500: ARRAY
46501: PPUSH
46502: LD_VAR 0 3
46506: PUSH
46507: LD_INT 3
46509: ARRAY
46510: PPUSH
46511: LD_VAR 0 3
46515: PUSH
46516: LD_INT 4
46518: ARRAY
46519: PPUSH
46520: CALL_OW 47
// end ;
46524: GO 46468
46526: POP
46527: POP
// end ; if mpBattleFlag > - 1 then
46528: LD_EXP 20
46532: PUSH
46533: LD_INT 1
46535: NEG
46536: GREATER
46537: IFFALSE 46696
// begin x := mpStartPos [ pos ] [ 1 ] ;
46539: LD_ADDR_VAR 0 5
46543: PUSH
46544: LD_EXP 19
46548: PUSH
46549: LD_VAR 0 8
46553: ARRAY
46554: PUSH
46555: LD_INT 1
46557: ARRAY
46558: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
46559: LD_ADDR_VAR 0 6
46563: PUSH
46564: LD_EXP 19
46568: PUSH
46569: LD_VAR 0 8
46573: ARRAY
46574: PUSH
46575: LD_INT 2
46577: ARRAY
46578: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
46579: LD_VAR 0 5
46583: PPUSH
46584: LD_VAR 0 6
46588: PPUSH
46589: LD_INT 12
46591: PPUSH
46592: LD_INT 2
46594: PPUSH
46595: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
46599: LD_ADDR_EXP 21
46603: PUSH
46604: LD_EXP 21
46608: PPUSH
46609: LD_VAR 0 7
46613: PPUSH
46614: LD_VAR 0 7
46618: PPUSH
46619: LD_VAR 0 5
46623: PPUSH
46624: LD_VAR 0 6
46628: PPUSH
46629: LD_INT 1
46631: PUSH
46632: LD_INT 100
46634: PUSH
46635: EMPTY
46636: LIST
46637: LIST
46638: PUSH
46639: LD_INT 2
46641: PUSH
46642: LD_INT 70
46644: PUSH
46645: EMPTY
46646: LIST
46647: LIST
46648: PUSH
46649: LD_INT 3
46651: PUSH
46652: LD_INT 40
46654: PUSH
46655: EMPTY
46656: LIST
46657: LIST
46658: PUSH
46659: LD_INT 10
46661: PUSH
46662: LD_INT 25
46664: PUSH
46665: EMPTY
46666: LIST
46667: LIST
46668: PUSH
46669: LD_INT 20
46671: PUSH
46672: LD_INT 100
46674: PUSH
46675: EMPTY
46676: LIST
46677: LIST
46678: PUSH
46679: EMPTY
46680: LIST
46681: LIST
46682: LIST
46683: LIST
46684: LIST
46685: PPUSH
46686: CALL_OW 418
46690: PPUSH
46691: CALL_OW 1
46695: ST_TO_ADDR
// end ; if mpApemans then
46696: LD_EXP 28
46700: IFFALSE 46779
// begin for j := 1 to mpApemans do
46702: LD_ADDR_VAR 0 3
46706: PUSH
46707: DOUBLE
46708: LD_INT 1
46710: DEC
46711: ST_TO_ADDR
46712: LD_EXP 28
46716: PUSH
46717: FOR_TO
46718: IFFALSE 46777
// begin PrepareApeman ( - 5 ) ;
46720: LD_INT 5
46722: NEG
46723: PPUSH
46724: CALL 36486 0 1
// ape := CreateHuman ;
46728: LD_ADDR_VAR 0 10
46732: PUSH
46733: CALL_OW 44
46737: ST_TO_ADDR
// SetTag ( ape , side ) ;
46738: LD_VAR 0 10
46742: PPUSH
46743: LD_VAR 0 7
46747: PPUSH
46748: CALL_OW 109
// PlaceUnitArea ( ape , mpApemansArea [ side ] , false ) ;
46752: LD_VAR 0 10
46756: PPUSH
46757: LD_EXP 29
46761: PUSH
46762: LD_VAR 0 7
46766: ARRAY
46767: PPUSH
46768: LD_INT 0
46770: PPUSH
46771: CALL_OW 49
// end ;
46775: GO 46717
46777: POP
46778: POP
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
46779: LD_EXP 24
46783: PUSH
46784: LD_INT 20
46786: PPUSH
46787: LD_VAR 0 7
46791: PPUSH
46792: CALL_OW 321
46796: PUSH
46797: LD_INT 1
46799: EQUAL
46800: AND
46801: IFFALSE 46818
// SetTech ( tech_SibDet , side , state_researched ) ;
46803: LD_INT 20
46805: PPUSH
46806: LD_VAR 0 7
46810: PPUSH
46811: LD_INT 2
46813: PPUSH
46814: CALL_OW 322
// SetTech ( tech_artifact , side , state_disabled ) ;
46818: LD_INT 24
46820: PPUSH
46821: LD_VAR 0 7
46825: PPUSH
46826: LD_INT 0
46828: PPUSH
46829: CALL_OW 322
// if mpSibBomb = 1 then
46833: LD_EXP 26
46837: PUSH
46838: LD_INT 1
46840: EQUAL
46841: IFFALSE 46860
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
46843: LD_INT 25
46845: PPUSH
46846: LD_VAR 0 7
46850: PPUSH
46851: LD_INT 1
46853: PPUSH
46854: CALL_OW 322
// end else
46858: GO 46875
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
46860: LD_INT 25
46862: PPUSH
46863: LD_VAR 0 7
46867: PPUSH
46868: LD_INT 0
46870: PPUSH
46871: CALL_OW 322
// end ; team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
46875: LD_ADDR_VAR 0 11
46879: PUSH
46880: LD_VAR 0 7
46884: PPUSH
46885: LD_VAR 0 9
46889: PPUSH
46890: LD_EXP 22
46894: PPUSH
46895: LD_EXP 23
46899: PPUSH
46900: CALL 47381 0 4
46904: ST_TO_ADDR
// for j in team do
46905: LD_ADDR_VAR 0 3
46909: PUSH
46910: LD_VAR 0 11
46914: PUSH
46915: FOR_IN
46916: IFFALSE 46965
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 9 , false ) ;
46918: LD_VAR 0 3
46922: PPUSH
46923: LD_EXP 19
46927: PUSH
46928: LD_VAR 0 8
46932: ARRAY
46933: PUSH
46934: LD_INT 1
46936: ARRAY
46937: PPUSH
46938: LD_EXP 19
46942: PUSH
46943: LD_VAR 0 8
46947: ARRAY
46948: PUSH
46949: LD_INT 2
46951: ARRAY
46952: PPUSH
46953: LD_INT 9
46955: PPUSH
46956: LD_INT 0
46958: PPUSH
46959: CALL_OW 50
46963: GO 46915
46965: POP
46966: POP
// end ;
46967: GO 45869
46969: POP
46970: POP
// if not mpTeamGame then
46971: LD_EXP 9
46975: NOT
46976: IFFALSE 47074
// begin for i := 1 to 8 do
46978: LD_ADDR_VAR 0 2
46982: PUSH
46983: DOUBLE
46984: LD_INT 1
46986: DEC
46987: ST_TO_ADDR
46988: LD_INT 8
46990: PUSH
46991: FOR_TO
46992: IFFALSE 47070
// for j := 1 to 8 do
46994: LD_ADDR_VAR 0 3
46998: PUSH
46999: DOUBLE
47000: LD_INT 1
47002: DEC
47003: ST_TO_ADDR
47004: LD_INT 8
47006: PUSH
47007: FOR_TO
47008: IFFALSE 47066
// if i <> j then
47010: LD_VAR 0 2
47014: PUSH
47015: LD_VAR 0 3
47019: NONEQUAL
47020: IFFALSE 47044
// SetAttitude ( i , j , att_neutral , true ) else
47022: LD_VAR 0 2
47026: PPUSH
47027: LD_VAR 0 3
47031: PPUSH
47032: LD_INT 0
47034: PPUSH
47035: LD_INT 1
47037: PPUSH
47038: CALL_OW 80
47042: GO 47064
// SetAttitude ( i , j , att_friend , true ) ;
47044: LD_VAR 0 2
47048: PPUSH
47049: LD_VAR 0 3
47053: PPUSH
47054: LD_INT 1
47056: PPUSH
47057: LD_INT 1
47059: PPUSH
47060: CALL_OW 80
47064: GO 47007
47066: POP
47067: POP
47068: GO 46991
47070: POP
47071: POP
// end else
47072: GO 47143
// begin if mpSharedVision then
47074: LD_EXP 14
47078: IFFALSE 47143
// begin for i in mpTeams do
47080: LD_ADDR_VAR 0 2
47084: PUSH
47085: LD_EXP 8
47089: PUSH
47090: FOR_IN
47091: IFFALSE 47141
// for j := 2 to i do
47093: LD_ADDR_VAR 0 3
47097: PUSH
47098: DOUBLE
47099: LD_INT 2
47101: DEC
47102: ST_TO_ADDR
47103: LD_VAR 0 2
47107: PUSH
47108: FOR_TO
47109: IFFALSE 47137
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
47111: LD_VAR 0 2
47115: PUSH
47116: LD_VAR 0 3
47120: ARRAY
47121: PPUSH
47122: LD_VAR 0 2
47126: PUSH
47127: LD_INT 1
47129: ARRAY
47130: PPUSH
47131: CALL_OW 343
47135: GO 47108
47137: POP
47138: POP
47139: GO 47090
47141: POP
47142: POP
// end ; end ; for i := 1 to 8 do
47143: LD_ADDR_VAR 0 2
47147: PUSH
47148: DOUBLE
47149: LD_INT 1
47151: DEC
47152: ST_TO_ADDR
47153: LD_INT 8
47155: PUSH
47156: FOR_TO
47157: IFFALSE 47247
// for j := 1 to 8 do
47159: LD_ADDR_VAR 0 3
47163: PUSH
47164: DOUBLE
47165: LD_INT 1
47167: DEC
47168: ST_TO_ADDR
47169: LD_INT 8
47171: PUSH
47172: FOR_TO
47173: IFFALSE 47243
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
47175: LD_EXP 6
47179: PUSH
47180: LD_VAR 0 2
47184: ARRAY
47185: PUSH
47186: LD_EXP 6
47190: PUSH
47191: LD_VAR 0 3
47195: ARRAY
47196: EQUAL
47197: IFFALSE 47221
// SetAttitude ( i , j , att_friend , true ) else
47199: LD_VAR 0 2
47203: PPUSH
47204: LD_VAR 0 3
47208: PPUSH
47209: LD_INT 1
47211: PPUSH
47212: LD_INT 1
47214: PPUSH
47215: CALL_OW 80
47219: GO 47241
// SetAttitude ( i , j , att_enemy , true ) ;
47221: LD_VAR 0 2
47225: PPUSH
47226: LD_VAR 0 3
47230: PPUSH
47231: LD_INT 2
47233: PPUSH
47234: LD_INT 1
47236: PPUSH
47237: CALL_OW 80
47241: GO 47172
47243: POP
47244: POP
47245: GO 47156
47247: POP
47248: POP
// music_nat := mpSideNations [ your_side ] ;
47249: LD_ADDR_OWVAR 71
47253: PUSH
47254: LD_EXP 7
47258: PUSH
47259: LD_OWVAR 2
47263: ARRAY
47264: ST_TO_ADDR
// if IAmSpec then
47265: CALL_OW 531
47269: IFFALSE 47310
// begin FogOff ( true ) ;
47271: LD_INT 1
47273: PPUSH
47274: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
47278: LD_EXP 27
47282: PUSH
47283: LD_INT 1
47285: ARRAY
47286: PUSH
47287: LD_INT 2
47289: DIV
47290: PPUSH
47291: LD_EXP 27
47295: PUSH
47296: LD_INT 2
47298: ARRAY
47299: PUSH
47300: LD_INT 2
47302: DIV
47303: PPUSH
47304: CALL_OW 86
// end else
47308: GO 47356
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
47310: LD_EXP 19
47314: PUSH
47315: LD_EXP 5
47319: PUSH
47320: LD_OWVAR 2
47324: ARRAY
47325: ARRAY
47326: PUSH
47327: LD_INT 1
47329: ARRAY
47330: PPUSH
47331: LD_EXP 19
47335: PUSH
47336: LD_EXP 5
47340: PUSH
47341: LD_OWVAR 2
47345: ARRAY
47346: ARRAY
47347: PUSH
47348: LD_INT 2
47350: ARRAY
47351: PPUSH
47352: CALL_OW 86
// end ; BeginBuildUp ;
47356: CALL 47950 0 0
// enable ( mpActive ) ;
47360: LD_INT 100
47362: ENABLE_MARKED
// enable ( mpGameType ) ;
47363: LD_EXP 1
47367: ENABLE_MARKED
// mpGameActive := true ;
47368: LD_ADDR_EXP 34
47372: PUSH
47373: LD_INT 1
47375: ST_TO_ADDR
// end ;
47376: LD_VAR 0 1
47380: RET
// function mpPrepareTeam ( side , nation , amount , skill ) ; var i , d , class ; begin
47381: LD_INT 0
47383: PPUSH
47384: PPUSH
47385: PPUSH
47386: PPUSH
// result := [ ] ;
47387: LD_ADDR_VAR 0 5
47391: PUSH
47392: EMPTY
47393: ST_TO_ADDR
// class := class_soldier ;
47394: LD_ADDR_VAR 0 8
47398: PUSH
47399: LD_INT 1
47401: ST_TO_ADDR
// uc_side := side ;
47402: LD_ADDR_OWVAR 20
47406: PUSH
47407: LD_VAR 0 1
47411: ST_TO_ADDR
// uc_nation := nation ;
47412: LD_ADDR_OWVAR 21
47416: PUSH
47417: LD_VAR 0 2
47421: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
47422: LD_ADDR_OWVAR 26
47426: PUSH
47427: LD_OWVAR 19
47431: PUSH
47432: LD_VAR 0 1
47436: ARRAY
47437: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
47438: LD_INT 1
47440: PPUSH
47441: LD_INT 2
47443: PPUSH
47444: CALL_OW 12
47448: PPUSH
47449: LD_VAR 0 8
47453: PPUSH
47454: LD_VAR 0 4
47458: PUSH
47459: LD_INT 2
47461: PLUS
47462: PPUSH
47463: CALL_OW 380
// hc_importance := 105 ;
47467: LD_ADDR_OWVAR 32
47471: PUSH
47472: LD_INT 105
47474: ST_TO_ADDR
// if Multiplayer then
47475: LD_OWVAR 4
47479: IFFALSE 47519
// begin hc_gallery := MULTIAVATARS ;
47481: LD_ADDR_OWVAR 33
47485: PUSH
47486: LD_STRING MULTIAVATARS
47488: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
47489: LD_ADDR_OWVAR 34
47493: PUSH
47494: LD_VAR 0 1
47498: PPUSH
47499: CALL_OW 525
47503: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
47504: LD_ADDR_OWVAR 27
47508: PUSH
47509: LD_VAR 0 1
47513: PPUSH
47514: CALL_OW 526
47518: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
47519: LD_ADDR_VAR 0 5
47523: PUSH
47524: LD_VAR 0 5
47528: PPUSH
47529: CALL_OW 44
47533: PPUSH
47534: CALL 40218 0 2
47538: ST_TO_ADDR
// InitHc_All ( ) ;
47539: CALL_OW 584
// d := ( amount div 4 ) + 1 ;
47543: LD_ADDR_VAR 0 7
47547: PUSH
47548: LD_VAR 0 3
47552: PUSH
47553: LD_INT 4
47555: DIV
47556: PUSH
47557: LD_INT 1
47559: PLUS
47560: ST_TO_ADDR
// for i := 2 to amount do
47561: LD_ADDR_VAR 0 6
47565: PUSH
47566: DOUBLE
47567: LD_INT 2
47569: DEC
47570: ST_TO_ADDR
47571: LD_VAR 0 3
47575: PUSH
47576: FOR_TO
47577: IFFALSE 47649
// begin if i mod d = 0 then
47579: LD_VAR 0 6
47583: PUSH
47584: LD_VAR 0 7
47588: MOD
47589: PUSH
47590: LD_INT 0
47592: EQUAL
47593: IFFALSE 47610
// class := Inc ( class ) ;
47595: LD_ADDR_VAR 0 8
47599: PUSH
47600: LD_VAR 0 8
47604: PPUSH
47605: CALL 41579 0 1
47609: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
47610: LD_INT 0
47612: PPUSH
47613: LD_VAR 0 8
47617: PPUSH
47618: LD_VAR 0 4
47622: PPUSH
47623: CALL_OW 380
// result := Join ( result , CreateHuman ) ;
47627: LD_ADDR_VAR 0 5
47631: PUSH
47632: LD_VAR 0 5
47636: PPUSH
47637: CALL_OW 44
47641: PPUSH
47642: CALL 40218 0 2
47646: ST_TO_ADDR
// end ;
47647: GO 47576
47649: POP
47650: POP
// end ;
47651: LD_VAR 0 5
47655: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
47656: LD_INT 0
47658: PPUSH
47659: PPUSH
// for i in mpBattleFlags do
47660: LD_ADDR_VAR 0 3
47664: PUSH
47665: LD_EXP 21
47669: PUSH
47670: FOR_IN
47671: IFFALSE 47748
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
47673: LD_VAR 0 3
47677: PPUSH
47678: LD_INT 1
47680: PUSH
47681: LD_VAR 0 1
47685: PUSH
47686: EMPTY
47687: LIST
47688: LIST
47689: PUSH
47690: LD_INT 2
47692: PUSH
47693: LD_VAR 0 1
47697: PUSH
47698: LD_REAL  7.00000000000000E-0001
47701: MUL
47702: PUSH
47703: EMPTY
47704: LIST
47705: LIST
47706: PUSH
47707: LD_INT 3
47709: PUSH
47710: LD_VAR 0 1
47714: PUSH
47715: LD_REAL  4.00000000000000E-0001
47718: MUL
47719: PUSH
47720: EMPTY
47721: LIST
47722: LIST
47723: PUSH
47724: LD_INT 20
47726: PUSH
47727: LD_VAR 0 1
47731: PUSH
47732: EMPTY
47733: LIST
47734: LIST
47735: PUSH
47736: EMPTY
47737: LIST
47738: LIST
47739: LIST
47740: LIST
47741: PPUSH
47742: CALL_OW 423
47746: GO 47670
47748: POP
47749: POP
// end ;
47750: LD_VAR 0 2
47754: RET
// every 0 0$1 trigger mpActive do var i , strength ;
47755: LD_INT 100
47757: IFFALSE 47852
47759: GO 47761
47761: DISABLE
47762: LD_INT 0
47764: PPUSH
47765: PPUSH
// begin if mpBattleFlag <= 0 then
47766: LD_EXP 20
47770: PUSH
47771: LD_INT 0
47773: LESSEQUAL
47774: IFFALSE 47778
// exit ;
47776: GO 47852
// strength := 100 ;
47778: LD_ADDR_VAR 0 2
47782: PUSH
47783: LD_INT 100
47785: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
47786: LD_EXP 20
47790: PPUSH
47791: CALL_OW 67
// strength := Dec ( strength ) ;
47795: LD_ADDR_VAR 0 2
47799: PUSH
47800: LD_VAR 0 2
47804: PPUSH
47805: CALL 41601 0 1
47809: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
47810: LD_VAR 0 2
47814: PPUSH
47815: CALL 47656 0 1
// until not strength ;
47819: LD_VAR 0 2
47823: NOT
47824: IFFALSE 47786
// for i in mpBattleFlags do
47826: LD_ADDR_VAR 0 1
47830: PUSH
47831: LD_EXP 21
47835: PUSH
47836: FOR_IN
47837: IFFALSE 47850
// KillBattleFlag ( i ) ;
47839: LD_VAR 0 1
47843: PPUSH
47844: CALL_OW 419
47848: GO 47836
47850: POP
47851: POP
// end ;
47852: PPOPN 2
47854: END
// every 0 0$1 marked mpActive do var side , tmp ;
47855: GO 47857
47857: DISABLE
47858: LD_INT 0
47860: PPUSH
47861: PPUSH
// begin if mpSibBomb <= 1 then
47862: LD_EXP 26
47866: PUSH
47867: LD_INT 1
47869: LESSEQUAL
47870: IFFALSE 47874
// exit ;
47872: GO 47947
// tmp := mpSibBomb ;
47874: LD_ADDR_VAR 0 2
47878: PUSH
47879: LD_EXP 26
47883: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
47884: LD_INT 35
47886: PPUSH
47887: CALL_OW 67
// tmp := tmp - 0 0$1 ;
47891: LD_ADDR_VAR 0 2
47895: PUSH
47896: LD_VAR 0 2
47900: PUSH
47901: LD_INT 35
47903: MINUS
47904: ST_TO_ADDR
// until not tmp ;
47905: LD_VAR 0 2
47909: NOT
47910: IFFALSE 47884
// for side := 1 to 8 do
47912: LD_ADDR_VAR 0 1
47916: PUSH
47917: DOUBLE
47918: LD_INT 1
47920: DEC
47921: ST_TO_ADDR
47922: LD_INT 8
47924: PUSH
47925: FOR_TO
47926: IFFALSE 47945
// SetTech ( tech_SibFiss , side , state_enabled ) ;
47928: LD_INT 25
47930: PPUSH
47931: LD_VAR 0 1
47935: PPUSH
47936: LD_INT 1
47938: PPUSH
47939: CALL_OW 322
47943: GO 47925
47945: POP
47946: POP
// end ;
47947: PPOPN 2
47949: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
47950: LD_INT 0
47952: PPUSH
47953: PPUSH
47954: PPUSH
// mpBuildUpTimeDelay := 0 ;
47955: LD_ADDR_EXP 35
47959: PUSH
47960: LD_INT 0
47962: ST_TO_ADDR
// if not mpBuildUpTime then
47963: LD_EXP 18
47967: NOT
47968: IFFALSE 47972
// exit ;
47970: GO 48155
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
47972: LD_ADDR_EXP 35
47976: PUSH
47977: LD_INT 8400
47979: PUSH
47980: LD_INT 2100
47982: PUSH
47983: LD_EXP 18
47987: MUL
47988: PLUS
47989: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
47990: LD_ADDR_EXP 36
47994: PUSH
47995: LD_INT 1
47997: ST_TO_ADDR
// for i := 1 to 8 do
47998: LD_ADDR_VAR 0 2
48002: PUSH
48003: DOUBLE
48004: LD_INT 1
48006: DEC
48007: ST_TO_ADDR
48008: LD_INT 8
48010: PUSH
48011: FOR_TO
48012: IFFALSE 48153
// if mpSidePositions [ i ] then
48014: LD_EXP 5
48018: PUSH
48019: LD_VAR 0 2
48023: ARRAY
48024: IFFALSE 48151
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
48026: LD_EXP 17
48030: PUSH
48031: LD_EXP 5
48035: PUSH
48036: LD_VAR 0 2
48040: ARRAY
48041: ARRAY
48042: PPUSH
48043: LD_INT 5
48045: PPUSH
48046: CALL_OW 424
// for j := 1 to 8 do
48050: LD_ADDR_VAR 0 3
48054: PUSH
48055: DOUBLE
48056: LD_INT 1
48058: DEC
48059: ST_TO_ADDR
48060: LD_INT 8
48062: PUSH
48063: FOR_TO
48064: IFFALSE 48149
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
48066: LD_EXP 5
48070: PUSH
48071: LD_VAR 0 3
48075: ARRAY
48076: PUSH
48077: LD_EXP 6
48081: PUSH
48082: LD_VAR 0 2
48086: ARRAY
48087: PUSH
48088: LD_EXP 6
48092: PUSH
48093: LD_VAR 0 3
48097: ARRAY
48098: NONEQUAL
48099: PUSH
48100: LD_EXP 9
48104: NOT
48105: PUSH
48106: LD_VAR 0 2
48110: PUSH
48111: LD_VAR 0 3
48115: NONEQUAL
48116: AND
48117: OR
48118: AND
48119: IFFALSE 48147
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
48121: LD_VAR 0 3
48125: PPUSH
48126: LD_EXP 17
48130: PUSH
48131: LD_EXP 5
48135: PUSH
48136: LD_VAR 0 2
48140: ARRAY
48141: ARRAY
48142: PPUSH
48143: CALL_OW 333
48147: GO 48063
48149: POP
48150: POP
// end ;
48151: GO 48011
48153: POP
48154: POP
// end ;
48155: LD_VAR 0 1
48159: RET
// function EndBuildUp ; var i , j ; begin
48160: LD_INT 0
48162: PPUSH
48163: PPUSH
48164: PPUSH
// mpBuildUpTimeActive := false ;
48165: LD_ADDR_EXP 36
48169: PUSH
48170: LD_INT 0
48172: ST_TO_ADDR
// for i := 1 to 8 do
48173: LD_ADDR_VAR 0 2
48177: PUSH
48178: DOUBLE
48179: LD_INT 1
48181: DEC
48182: ST_TO_ADDR
48183: LD_INT 8
48185: PUSH
48186: FOR_TO
48187: IFFALSE 48328
// if mpSidePositions [ i ] then
48189: LD_EXP 5
48193: PUSH
48194: LD_VAR 0 2
48198: ARRAY
48199: IFFALSE 48326
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
48201: LD_EXP 17
48205: PUSH
48206: LD_EXP 5
48210: PUSH
48211: LD_VAR 0 2
48215: ARRAY
48216: ARRAY
48217: PPUSH
48218: LD_INT 0
48220: PPUSH
48221: CALL_OW 424
// for j := 1 to 8 do
48225: LD_ADDR_VAR 0 3
48229: PUSH
48230: DOUBLE
48231: LD_INT 1
48233: DEC
48234: ST_TO_ADDR
48235: LD_INT 8
48237: PUSH
48238: FOR_TO
48239: IFFALSE 48324
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
48241: LD_EXP 5
48245: PUSH
48246: LD_VAR 0 3
48250: ARRAY
48251: PUSH
48252: LD_EXP 6
48256: PUSH
48257: LD_VAR 0 2
48261: ARRAY
48262: PUSH
48263: LD_EXP 6
48267: PUSH
48268: LD_VAR 0 3
48272: ARRAY
48273: NONEQUAL
48274: PUSH
48275: LD_EXP 9
48279: NOT
48280: PUSH
48281: LD_VAR 0 2
48285: PUSH
48286: LD_VAR 0 3
48290: NONEQUAL
48291: AND
48292: OR
48293: AND
48294: IFFALSE 48322
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
48296: LD_VAR 0 3
48300: PPUSH
48301: LD_EXP 17
48305: PUSH
48306: LD_EXP 5
48310: PUSH
48311: LD_VAR 0 2
48315: ARRAY
48316: ARRAY
48317: PPUSH
48318: CALL_OW 334
48322: GO 48238
48324: POP
48325: POP
// end ;
48326: GO 48186
48328: POP
48329: POP
// end ;
48330: LD_VAR 0 1
48334: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
48335: LD_EXP 36
48339: IFFALSE 48514
48341: GO 48343
48343: DISABLE
48344: LD_INT 0
48346: PPUSH
48347: PPUSH
// begin for i := 1 to 8 do
48348: LD_ADDR_VAR 0 1
48352: PUSH
48353: DOUBLE
48354: LD_INT 1
48356: DEC
48357: ST_TO_ADDR
48358: LD_INT 8
48360: PUSH
48361: FOR_TO
48362: IFFALSE 48511
// if mpSidePositions [ i ] then
48364: LD_EXP 5
48368: PUSH
48369: LD_VAR 0 1
48373: ARRAY
48374: IFFALSE 48509
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
48376: LD_ADDR_VAR 0 2
48380: PUSH
48381: LD_EXP 17
48385: PUSH
48386: LD_EXP 5
48390: PUSH
48391: LD_VAR 0 1
48395: ARRAY
48396: ARRAY
48397: PPUSH
48398: LD_INT 2
48400: PUSH
48401: LD_INT 21
48403: PUSH
48404: LD_INT 1
48406: PUSH
48407: EMPTY
48408: LIST
48409: LIST
48410: PUSH
48411: LD_INT 21
48413: PUSH
48414: LD_INT 2
48416: PUSH
48417: EMPTY
48418: LIST
48419: LIST
48420: PUSH
48421: EMPTY
48422: LIST
48423: LIST
48424: LIST
48425: PUSH
48426: LD_INT 22
48428: PUSH
48429: LD_OWVAR 2
48433: PUSH
48434: EMPTY
48435: LIST
48436: LIST
48437: PUSH
48438: EMPTY
48439: LIST
48440: LIST
48441: PPUSH
48442: CALL_OW 70
48446: PUSH
48447: FOR_IN
48448: IFFALSE 48507
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
48450: LD_EXP 6
48454: PUSH
48455: LD_VAR 0 1
48459: ARRAY
48460: PUSH
48461: LD_EXP 6
48465: PUSH
48466: LD_OWVAR 2
48470: ARRAY
48471: NONEQUAL
48472: PUSH
48473: LD_EXP 9
48477: NOT
48478: PUSH
48479: LD_VAR 0 1
48483: PUSH
48484: LD_OWVAR 2
48488: NONEQUAL
48489: AND
48490: OR
48491: IFFALSE 48505
// ComMoveToArea ( un , BuildUpEscape ) ;
48493: LD_VAR 0 2
48497: PPUSH
48498: LD_INT 17
48500: PPUSH
48501: CALL_OW 113
48505: GO 48447
48507: POP
48508: POP
48509: GO 48361
48511: POP
48512: POP
// enable ;
48513: ENABLE
// end ;
48514: PPOPN 2
48516: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
48517: LD_EXP 18
48521: IFFALSE 48571
48523: GO 48525
48525: DISABLE
48526: LD_INT 0
48528: PPUSH
// begin tmp := mpBuildUpTime ;
48529: LD_ADDR_VAR 0 1
48533: PUSH
48534: LD_EXP 18
48538: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
48539: LD_INT 35
48541: PPUSH
48542: CALL_OW 67
// tmp := tmp - 0 0$1 ;
48546: LD_ADDR_VAR 0 1
48550: PUSH
48551: LD_VAR 0 1
48555: PUSH
48556: LD_INT 35
48558: MINUS
48559: ST_TO_ADDR
// until not tmp ;
48560: LD_VAR 0 1
48564: NOT
48565: IFFALSE 48539
// EndBuildUp ;
48567: CALL 48160 0 0
// end ;
48571: PPOPN 1
48573: END
// every 0 0$1 trigger mpActive marked mpWin do
48574: LD_INT 100
48576: IFFALSE 48597
48578: GO 48580
48580: DISABLE
// begin if Multiplayer then
48581: LD_OWVAR 4
48585: IFFALSE 48593
// YouWinInMultiplayer else
48587: CALL_OW 106
48591: GO 48597
// YouWin ;
48593: CALL_OW 103
// end ;
48597: END
// every 0 0$1 trigger mpActive marked mpLose do
48598: LD_INT 100
48600: IFFALSE 48624
48602: GO 48604
48604: DISABLE
// begin if Multiplayer then
48605: LD_OWVAR 4
48609: IFFALSE 48617
// YouLostInMultiplayer else
48611: CALL_OW 107
48615: GO 48624
// YouLost (  ) ;
48617: LD_STRING 
48619: PPUSH
48620: CALL_OW 104
// end ;
48624: END
// every 0 0$1 marked mpActive do
48625: GO 48627
48627: DISABLE
// begin enable ;
48628: ENABLE
// if not mpDisplayStrings then
48629: LD_EXP 33
48633: NOT
48634: IFFALSE 48645
// begin display_strings := [ ] ;
48636: LD_ADDR_OWVAR 47
48640: PUSH
48641: EMPTY
48642: ST_TO_ADDR
// exit ;
48643: GO 48655
// end ; display_strings := mpDisplayStrings ;
48645: LD_ADDR_OWVAR 47
48649: PUSH
48650: LD_EXP 33
48654: ST_TO_ADDR
// end ; end_of_file
48655: END
// export function Multiplayer_UnitDestroyed ( un ) ; var ape , tag , area , side , tmp ; begin
48656: LD_INT 0
48658: PPUSH
48659: PPUSH
48660: PPUSH
48661: PPUSH
48662: PPUSH
48663: PPUSH
// if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
48664: LD_VAR 0 1
48668: PPUSH
48669: CALL_OW 257
48673: PUSH
48674: LD_INT 12
48676: PUSH
48677: LD_INT 17
48679: PUSH
48680: LD_INT 15
48682: PUSH
48683: LD_INT 16
48685: PUSH
48686: EMPTY
48687: LIST
48688: LIST
48689: LIST
48690: LIST
48691: IN
48692: PUSH
48693: LD_VAR 0 1
48697: PPUSH
48698: CALL_OW 263
48702: PUSH
48703: LD_INT 5
48705: EQUAL
48706: OR
48707: IFFALSE 48796
// begin tag := GetTag ( un ) ;
48709: LD_ADDR_VAR 0 4
48713: PUSH
48714: LD_VAR 0 1
48718: PPUSH
48719: CALL_OW 110
48723: ST_TO_ADDR
// area := mpApemansArea [ tag ] ;
48724: LD_ADDR_VAR 0 5
48728: PUSH
48729: LD_EXP 29
48733: PUSH
48734: LD_VAR 0 4
48738: ARRAY
48739: ST_TO_ADDR
// wait ( 4 4$00 ) ;
48740: LD_INT 8400
48742: PPUSH
48743: CALL_OW 67
// PrepareApeman ( - 5 ) ;
48747: LD_INT 5
48749: NEG
48750: PPUSH
48751: CALL 36486 0 1
// ape := CreateHuman ;
48755: LD_ADDR_VAR 0 3
48759: PUSH
48760: CALL_OW 44
48764: ST_TO_ADDR
// SetTag ( ape , tag ) ;
48765: LD_VAR 0 3
48769: PPUSH
48770: LD_VAR 0 4
48774: PPUSH
48775: CALL_OW 109
// PlaceUnitArea ( ape , area , false ) ;
48779: LD_VAR 0 3
48783: PPUSH
48784: LD_VAR 0 5
48788: PPUSH
48789: LD_INT 0
48791: PPUSH
48792: CALL_OW 49
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
48796: LD_VAR 0 1
48800: PPUSH
48801: CALL_OW 247
48805: PUSH
48806: LD_INT 1
48808: EQUAL
48809: PUSH
48810: LD_VAR 0 1
48814: PPUSH
48815: CALL_OW 248
48819: PUSH
48820: LD_INT 0
48822: GREATER
48823: AND
48824: IFFALSE 49043
// begin if not mpRespawn then
48826: LD_EXP 30
48830: NOT
48831: IFFALSE 48835
// exit ;
48833: GO 49043
// side := GetSide ( un ) ;
48835: LD_ADDR_VAR 0 6
48839: PUSH
48840: LD_VAR 0 1
48844: PPUSH
48845: CALL_OW 255
48849: ST_TO_ADDR
// wait ( mpRespawn ) ;
48850: LD_EXP 30
48854: PPUSH
48855: CALL_OW 67
// if not MultiplayerSideAlive ( side ) then
48859: LD_VAR 0 6
48863: PPUSH
48864: CALL_OW 108
48868: NOT
48869: IFFALSE 48873
// exit ;
48871: GO 49043
// uc_side := side ;
48873: LD_ADDR_OWVAR 20
48877: PUSH
48878: LD_VAR 0 6
48882: ST_TO_ADDR
// uc_nation := GetNation ( un ) ;
48883: LD_ADDR_OWVAR 21
48887: PUSH
48888: LD_VAR 0 1
48892: PPUSH
48893: CALL_OW 248
48897: ST_TO_ADDR
// PrepareHuman ( GetSex ( un ) , GetClass ( un ) , 2 ) ;
48898: LD_VAR 0 1
48902: PPUSH
48903: CALL_OW 258
48907: PPUSH
48908: LD_VAR 0 1
48912: PPUSH
48913: CALL_OW 257
48917: PPUSH
48918: LD_INT 2
48920: PPUSH
48921: CALL_OW 380
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
48925: LD_ADDR_VAR 0 7
48929: PUSH
48930: LD_INT 22
48932: PUSH
48933: LD_VAR 0 6
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: PUSH
48942: LD_INT 2
48944: PUSH
48945: LD_INT 30
48947: PUSH
48948: LD_INT 0
48950: PUSH
48951: EMPTY
48952: LIST
48953: LIST
48954: PUSH
48955: LD_INT 30
48957: PUSH
48958: LD_INT 1
48960: PUSH
48961: EMPTY
48962: LIST
48963: LIST
48964: PUSH
48965: EMPTY
48966: LIST
48967: LIST
48968: LIST
48969: PUSH
48970: EMPTY
48971: LIST
48972: LIST
48973: PPUSH
48974: CALL_OW 69
48978: ST_TO_ADDR
// if not tmp then
48979: LD_VAR 0 7
48983: NOT
48984: IFFALSE 49000
// PlaceUnitAnywhere ( CreateHuman , true ) else
48986: CALL_OW 44
48990: PPUSH
48991: LD_INT 1
48993: PPUSH
48994: CALL_OW 51
48998: GO 49043
// PlaceUnitXYR ( CreateHuman , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 20 , true ) ;
49000: CALL_OW 44
49004: PPUSH
49005: LD_VAR 0 7
49009: PUSH
49010: LD_INT 1
49012: ARRAY
49013: PPUSH
49014: CALL_OW 250
49018: PPUSH
49019: LD_VAR 0 7
49023: PUSH
49024: LD_INT 1
49026: ARRAY
49027: PPUSH
49028: CALL_OW 251
49032: PPUSH
49033: LD_INT 20
49035: PPUSH
49036: LD_INT 1
49038: PPUSH
49039: CALL_OW 50
// end ; end ; end_of_file
49043: LD_VAR 0 2
49047: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
49048: LD_EXP 34
49052: PUSH
49053: CALL 49238 0 0
49057: AND
49058: PUSH
49059: LD_OWVAR 4
49063: AND
49064: IFFALSE 49235
49066: GO 49068
49068: DISABLE
49069: LD_INT 0
49071: PPUSH
49072: PPUSH
// begin canWin := false ;
49073: LD_ADDR_VAR 0 2
49077: PUSH
49078: LD_INT 0
49080: ST_TO_ADDR
// if not HasPower ( your_side ) then
49081: LD_OWVAR 2
49085: PPUSH
49086: CALL 49302 0 1
49090: NOT
49091: IFFALSE 49102
// begin Multiplayer_Loose_Message ;
49093: CALL_OW 521
// enable ( mpLose ) ;
49097: LD_INT 102
49099: ENABLE_MARKED
// end else
49100: GO 49235
// begin canWin := true ;
49102: LD_ADDR_VAR 0 2
49106: PUSH
49107: LD_INT 1
49109: ST_TO_ADDR
// for i := 1 to 8 do
49110: LD_ADDR_VAR 0 1
49114: PUSH
49115: DOUBLE
49116: LD_INT 1
49118: DEC
49119: ST_TO_ADDR
49120: LD_INT 8
49122: PUSH
49123: FOR_TO
49124: IFFALSE 49221
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
49126: LD_EXP 5
49130: PUSH
49131: LD_VAR 0 1
49135: ARRAY
49136: PUSH
49137: LD_VAR 0 1
49141: PPUSH
49142: CALL_OW 108
49146: AND
49147: PUSH
49148: LD_VAR 0 1
49152: PUSH
49153: LD_OWVAR 2
49157: NONEQUAL
49158: AND
49159: IFFALSE 49219
// if not mpSideTeams [ i ] or ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) then
49161: LD_EXP 6
49165: PUSH
49166: LD_VAR 0 1
49170: ARRAY
49171: NOT
49172: PUSH
49173: LD_EXP 6
49177: PUSH
49178: LD_VAR 0 1
49182: ARRAY
49183: PUSH
49184: LD_EXP 6
49188: PUSH
49189: LD_OWVAR 2
49193: ARRAY
49194: NONEQUAL
49195: OR
49196: IFFALSE 49219
// if HasPower ( i ) then
49198: LD_VAR 0 1
49202: PPUSH
49203: CALL 49302 0 1
49207: IFFALSE 49219
// begin canWin := false ;
49209: LD_ADDR_VAR 0 2
49213: PUSH
49214: LD_INT 0
49216: ST_TO_ADDR
// break ;
49217: GO 49221
// end ;
49219: GO 49123
49221: POP
49222: POP
// if canWin then
49223: LD_VAR 0 2
49227: IFFALSE 49234
// enable ( mpWin ) else
49229: LD_INT 101
49231: ENABLE_MARKED
49232: GO 49235
// enable ;
49234: ENABLE
// end ; end ;
49235: PPOPN 2
49237: END
// function CanWinLoose ; begin
49238: LD_INT 0
49240: PPUSH
// result := true ;
49241: LD_ADDR_VAR 0 1
49245: PUSH
49246: LD_INT 1
49248: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
49249: CALL_OW 518
49253: PUSH
49254: CALL_OW 519
49258: PUSH
49259: LD_INT 0
49261: GREATER
49262: AND
49263: IFFALSE 49273
// result := false ;
49265: LD_ADDR_VAR 0 1
49269: PUSH
49270: LD_INT 0
49272: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
49273: CALL_OW 531
49277: PUSH
49278: CALL_OW 519
49282: PUSH
49283: LD_INT 1
49285: GREATER
49286: AND
49287: IFFALSE 49297
// result := false ;
49289: LD_ADDR_VAR 0 1
49293: PUSH
49294: LD_INT 0
49296: ST_TO_ADDR
// end ;
49297: LD_VAR 0 1
49301: RET
// function HasPower ( i ) ; begin
49302: LD_INT 0
49304: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
49305: LD_ADDR_VAR 0 2
49309: PUSH
49310: LD_INT 22
49312: PUSH
49313: LD_VAR 0 1
49317: PUSH
49318: EMPTY
49319: LIST
49320: LIST
49321: PUSH
49322: LD_INT 2
49324: PUSH
49325: LD_INT 21
49327: PUSH
49328: LD_INT 1
49330: PUSH
49331: EMPTY
49332: LIST
49333: LIST
49334: PUSH
49335: LD_INT 33
49337: PUSH
49338: LD_INT 3
49340: PUSH
49341: EMPTY
49342: LIST
49343: LIST
49344: PUSH
49345: LD_INT 33
49347: PUSH
49348: LD_INT 5
49350: PUSH
49351: EMPTY
49352: LIST
49353: LIST
49354: PUSH
49355: EMPTY
49356: LIST
49357: LIST
49358: LIST
49359: LIST
49360: PUSH
49361: EMPTY
49362: LIST
49363: LIST
49364: PPUSH
49365: CALL_OW 69
49369: ST_TO_ADDR
// end ; end_of_file
49370: LD_VAR 0 2
49374: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
49375: LD_EXP 34
49379: IFFALSE 49422
49381: GO 49383
49383: DISABLE
49384: LD_INT 0
49386: PPUSH
// begin for i := 1 to 8 do
49387: LD_ADDR_VAR 0 1
49391: PUSH
49392: DOUBLE
49393: LD_INT 1
49395: DEC
49396: ST_TO_ADDR
49397: LD_INT 8
49399: PUSH
49400: FOR_TO
49401: IFFALSE 49420
// SetRestrict ( b_depot , i , state_disabled ) ;
49403: LD_INT 0
49405: PPUSH
49406: LD_VAR 0 1
49410: PPUSH
49411: LD_INT 0
49413: PPUSH
49414: CALL_OW 324
49418: GO 49400
49420: POP
49421: POP
// end ;
49422: PPOPN 1
49424: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
49425: LD_EXP 34
49429: PUSH
49430: CALL 49615 0 0
49434: AND
49435: PUSH
49436: LD_OWVAR 4
49440: AND
49441: IFFALSE 49612
49443: GO 49445
49445: DISABLE
49446: LD_INT 0
49448: PPUSH
49449: PPUSH
// begin canWin := false ;
49450: LD_ADDR_VAR 0 2
49454: PUSH
49455: LD_INT 0
49457: ST_TO_ADDR
// if not HasPower ( your_side ) then
49458: LD_OWVAR 2
49462: PPUSH
49463: CALL 49679 0 1
49467: NOT
49468: IFFALSE 49479
// begin Multiplayer_Loose_Message ;
49470: CALL_OW 521
// enable ( mpLose ) ;
49474: LD_INT 102
49476: ENABLE_MARKED
// end else
49477: GO 49612
// begin canWin := true ;
49479: LD_ADDR_VAR 0 2
49483: PUSH
49484: LD_INT 1
49486: ST_TO_ADDR
// for i := 1 to 8 do
49487: LD_ADDR_VAR 0 1
49491: PUSH
49492: DOUBLE
49493: LD_INT 1
49495: DEC
49496: ST_TO_ADDR
49497: LD_INT 8
49499: PUSH
49500: FOR_TO
49501: IFFALSE 49598
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
49503: LD_EXP 5
49507: PUSH
49508: LD_VAR 0 1
49512: ARRAY
49513: PUSH
49514: LD_VAR 0 1
49518: PPUSH
49519: CALL_OW 108
49523: AND
49524: PUSH
49525: LD_VAR 0 1
49529: PUSH
49530: LD_OWVAR 2
49534: NONEQUAL
49535: AND
49536: IFFALSE 49596
// if not mpSideTeams [ i ] or ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) then
49538: LD_EXP 6
49542: PUSH
49543: LD_VAR 0 1
49547: ARRAY
49548: NOT
49549: PUSH
49550: LD_EXP 6
49554: PUSH
49555: LD_VAR 0 1
49559: ARRAY
49560: PUSH
49561: LD_EXP 6
49565: PUSH
49566: LD_OWVAR 2
49570: ARRAY
49571: NONEQUAL
49572: OR
49573: IFFALSE 49596
// if HasPower ( i ) then
49575: LD_VAR 0 1
49579: PPUSH
49580: CALL 49679 0 1
49584: IFFALSE 49596
// begin canWin := false ;
49586: LD_ADDR_VAR 0 2
49590: PUSH
49591: LD_INT 0
49593: ST_TO_ADDR
// break ;
49594: GO 49598
// end ;
49596: GO 49500
49598: POP
49599: POP
// if canWin then
49600: LD_VAR 0 2
49604: IFFALSE 49611
// enable ( mpWin ) else
49606: LD_INT 101
49608: ENABLE_MARKED
49609: GO 49612
// enable ;
49611: ENABLE
// end ; end ;
49612: PPOPN 2
49614: END
// function CanWinLoose ; begin
49615: LD_INT 0
49617: PPUSH
// result := true ;
49618: LD_ADDR_VAR 0 1
49622: PUSH
49623: LD_INT 1
49625: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
49626: CALL_OW 518
49630: PUSH
49631: CALL_OW 519
49635: PUSH
49636: LD_INT 0
49638: GREATER
49639: AND
49640: IFFALSE 49650
// result := false ;
49642: LD_ADDR_VAR 0 1
49646: PUSH
49647: LD_INT 0
49649: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
49650: CALL_OW 531
49654: PUSH
49655: CALL_OW 519
49659: PUSH
49660: LD_INT 1
49662: GREATER
49663: AND
49664: IFFALSE 49674
// result := false ;
49666: LD_ADDR_VAR 0 1
49670: PUSH
49671: LD_INT 0
49673: ST_TO_ADDR
// end ;
49674: LD_VAR 0 1
49678: RET
// function HasPower ( i ) ; begin
49679: LD_INT 0
49681: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
49682: LD_INT 22
49684: PUSH
49685: LD_VAR 0 1
49689: PUSH
49690: EMPTY
49691: LIST
49692: LIST
49693: PUSH
49694: LD_INT 2
49696: PUSH
49697: LD_INT 30
49699: PUSH
49700: LD_INT 0
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: PUSH
49707: LD_INT 30
49709: PUSH
49710: LD_INT 1
49712: PUSH
49713: EMPTY
49714: LIST
49715: LIST
49716: PUSH
49717: EMPTY
49718: LIST
49719: LIST
49720: LIST
49721: PUSH
49722: EMPTY
49723: LIST
49724: LIST
49725: PPUSH
49726: CALL_OW 69
49730: NOT
49731: IFFALSE 49735
// exit ;
49733: GO 49800
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
49735: LD_ADDR_VAR 0 2
49739: PUSH
49740: LD_INT 22
49742: PUSH
49743: LD_VAR 0 1
49747: PUSH
49748: EMPTY
49749: LIST
49750: LIST
49751: PUSH
49752: LD_INT 2
49754: PUSH
49755: LD_INT 21
49757: PUSH
49758: LD_INT 1
49760: PUSH
49761: EMPTY
49762: LIST
49763: LIST
49764: PUSH
49765: LD_INT 33
49767: PUSH
49768: LD_INT 3
49770: PUSH
49771: EMPTY
49772: LIST
49773: LIST
49774: PUSH
49775: LD_INT 33
49777: PUSH
49778: LD_INT 5
49780: PUSH
49781: EMPTY
49782: LIST
49783: LIST
49784: PUSH
49785: EMPTY
49786: LIST
49787: LIST
49788: LIST
49789: LIST
49790: PUSH
49791: EMPTY
49792: LIST
49793: LIST
49794: PPUSH
49795: CALL_OW 69
49799: ST_TO_ADDR
// end ; end_of_file
49800: LD_VAR 0 2
49804: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , tmp ;
49805: LD_EXP 34
49809: IFFALSE 50042
49811: GO 49813
49813: DISABLE
49814: LD_INT 0
49816: PPUSH
49817: PPUSH
// begin mpKingPoints := [ ] ;
49818: LD_ADDR_EXP 37
49822: PUSH
49823: EMPTY
49824: ST_TO_ADDR
// if mpTeamGame then
49825: LD_EXP 9
49829: IFFALSE 49883
// begin for i := 1 to Count ( mpTeams ) do
49831: LD_ADDR_VAR 0 1
49835: PUSH
49836: DOUBLE
49837: LD_INT 1
49839: DEC
49840: ST_TO_ADDR
49841: LD_EXP 8
49845: PPUSH
49846: CALL 4629 0 1
49850: PUSH
49851: FOR_TO
49852: IFFALSE 49879
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
49854: LD_ADDR_EXP 37
49858: PUSH
49859: LD_EXP 37
49863: PPUSH
49864: LD_VAR 0 1
49868: PPUSH
49869: LD_INT 0
49871: PPUSH
49872: CALL_OW 1
49876: ST_TO_ADDR
49877: GO 49851
49879: POP
49880: POP
// end else
49881: GO 49926
// begin for i := 1 to 8 do
49883: LD_ADDR_VAR 0 1
49887: PUSH
49888: DOUBLE
49889: LD_INT 1
49891: DEC
49892: ST_TO_ADDR
49893: LD_INT 8
49895: PUSH
49896: FOR_TO
49897: IFFALSE 49924
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
49899: LD_ADDR_EXP 37
49903: PUSH
49904: LD_EXP 37
49908: PPUSH
49909: LD_VAR 0 1
49913: PPUSH
49914: LD_INT 0
49916: PPUSH
49917: CALL_OW 1
49921: ST_TO_ADDR
49922: GO 49896
49924: POP
49925: POP
// end ; SetAreaMapShow ( mpKingArea , 1 ) ;
49926: LD_EXP 31
49930: PPUSH
49931: LD_INT 1
49933: PPUSH
49934: CALL_OW 424
// UpdateCounter ;
49938: CALL 50367 0 0
// repeat wait ( 0 0$1 ) ;
49942: LD_INT 35
49944: PPUSH
49945: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
49949: LD_ADDR_VAR 0 2
49953: PUSH
49954: LD_EXP 31
49958: PPUSH
49959: LD_INT 3
49961: PUSH
49962: LD_INT 57
49964: PUSH
49965: EMPTY
49966: LIST
49967: PUSH
49968: EMPTY
49969: LIST
49970: LIST
49971: PUSH
49972: LD_INT 50
49974: PUSH
49975: EMPTY
49976: LIST
49977: PUSH
49978: LD_INT 2
49980: PUSH
49981: LD_INT 30
49983: PUSH
49984: LD_INT 0
49986: PUSH
49987: EMPTY
49988: LIST
49989: LIST
49990: PUSH
49991: LD_INT 30
49993: PUSH
49994: LD_INT 1
49996: PUSH
49997: EMPTY
49998: LIST
49999: LIST
50000: PUSH
50001: EMPTY
50002: LIST
50003: LIST
50004: LIST
50005: PUSH
50006: EMPTY
50007: LIST
50008: LIST
50009: LIST
50010: PPUSH
50011: CALL_OW 70
50015: ST_TO_ADDR
// if not tmp then
50016: LD_VAR 0 2
50020: NOT
50021: IFFALSE 50025
// continue ;
50023: GO 49942
// AddPoints ( tmp ) ;
50025: LD_VAR 0 2
50029: PPUSH
50030: CALL 50045 0 1
// UpdateCounter ;
50034: CALL 50367 0 0
// until false ;
50038: LD_INT 0
50040: IFFALSE 49942
// end ;
50042: PPOPN 2
50044: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
50045: LD_INT 0
50047: PPUSH
50048: PPUSH
50049: PPUSH
50050: PPUSH
50051: PPUSH
// if mpTeamGame then
50052: LD_EXP 9
50056: IFFALSE 50253
// begin first := depots [ 1 ] ;
50058: LD_ADDR_VAR 0 4
50062: PUSH
50063: LD_VAR 0 1
50067: PUSH
50068: LD_INT 1
50070: ARRAY
50071: ST_TO_ADDR
// side := GetSide ( first ) ;
50072: LD_ADDR_VAR 0 6
50076: PUSH
50077: LD_VAR 0 4
50081: PPUSH
50082: CALL_OW 255
50086: ST_TO_ADDR
// for i := 1 to mpTeams do
50087: LD_ADDR_VAR 0 3
50091: PUSH
50092: DOUBLE
50093: LD_INT 1
50095: DEC
50096: ST_TO_ADDR
50097: LD_EXP 8
50101: PUSH
50102: FOR_TO
50103: IFFALSE 50137
// if side in mpTeams [ i ] then
50105: LD_VAR 0 6
50109: PUSH
50110: LD_EXP 8
50114: PUSH
50115: LD_VAR 0 3
50119: ARRAY
50120: IN
50121: IFFALSE 50135
// begin team := i ;
50123: LD_ADDR_VAR 0 5
50127: PUSH
50128: LD_VAR 0 3
50132: ST_TO_ADDR
// break ;
50133: GO 50137
// end ;
50135: GO 50102
50137: POP
50138: POP
// if not team then
50139: LD_VAR 0 5
50143: NOT
50144: IFFALSE 50148
// exit ;
50146: GO 50362
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
50148: LD_EXP 31
50152: PPUSH
50153: LD_INT 81
50155: PUSH
50156: LD_VAR 0 6
50160: PUSH
50161: EMPTY
50162: LIST
50163: LIST
50164: PPUSH
50165: CALL_OW 70
50169: IFFALSE 50173
// exit ;
50171: GO 50362
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
50173: LD_ADDR_EXP 37
50177: PUSH
50178: LD_EXP 37
50182: PPUSH
50183: LD_VAR 0 5
50187: PPUSH
50188: LD_EXP 37
50192: PUSH
50193: LD_VAR 0 5
50197: ARRAY
50198: PUSH
50199: LD_INT 1
50201: PLUS
50202: PPUSH
50203: CALL_OW 1
50207: ST_TO_ADDR
// for i in mpTeams [ team ] do
50208: LD_ADDR_VAR 0 3
50212: PUSH
50213: LD_EXP 8
50217: PUSH
50218: LD_VAR 0 5
50222: ARRAY
50223: PUSH
50224: FOR_IN
50225: IFFALSE 50249
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
50227: LD_VAR 0 3
50231: PPUSH
50232: LD_EXP 37
50236: PUSH
50237: LD_VAR 0 5
50241: ARRAY
50242: PPUSH
50243: CALL_OW 506
50247: GO 50224
50249: POP
50250: POP
// end else
50251: GO 50362
// begin first := depots [ 1 ] ;
50253: LD_ADDR_VAR 0 4
50257: PUSH
50258: LD_VAR 0 1
50262: PUSH
50263: LD_INT 1
50265: ARRAY
50266: ST_TO_ADDR
// side := GetSide ( first ) ;
50267: LD_ADDR_VAR 0 6
50271: PUSH
50272: LD_VAR 0 4
50276: PPUSH
50277: CALL_OW 255
50281: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
50282: LD_EXP 31
50286: PPUSH
50287: LD_INT 81
50289: PUSH
50290: LD_VAR 0 6
50294: PUSH
50295: EMPTY
50296: LIST
50297: LIST
50298: PPUSH
50299: CALL_OW 70
50303: IFFALSE 50307
// exit ;
50305: GO 50362
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
50307: LD_ADDR_EXP 37
50311: PUSH
50312: LD_EXP 37
50316: PPUSH
50317: LD_VAR 0 6
50321: PPUSH
50322: LD_EXP 37
50326: PUSH
50327: LD_VAR 0 6
50331: ARRAY
50332: PUSH
50333: LD_INT 1
50335: PLUS
50336: PPUSH
50337: CALL_OW 1
50341: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
50342: LD_VAR 0 6
50346: PPUSH
50347: LD_EXP 37
50351: PUSH
50352: LD_VAR 0 6
50356: ARRAY
50357: PPUSH
50358: CALL_OW 506
// end ; end ;
50362: LD_VAR 0 2
50366: RET
// function UpdateCounter ; var i ; begin
50367: LD_INT 0
50369: PPUSH
50370: PPUSH
// result := [ ] ;
50371: LD_ADDR_VAR 0 1
50375: PUSH
50376: EMPTY
50377: ST_TO_ADDR
// if mpTeamGame then
50378: LD_EXP 9
50382: IFFALSE 50449
// begin for i := 1 to mpTeams do
50384: LD_ADDR_VAR 0 2
50388: PUSH
50389: DOUBLE
50390: LD_INT 1
50392: DEC
50393: ST_TO_ADDR
50394: LD_EXP 8
50398: PUSH
50399: FOR_TO
50400: IFFALSE 50445
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
50402: LD_ADDR_VAR 0 1
50406: PUSH
50407: LD_VAR 0 1
50411: PUSH
50412: LD_STRING #KingoftheHill-Team
50414: PUSH
50415: LD_VAR 0 2
50419: PUSH
50420: LD_EXP 37
50424: PUSH
50425: LD_VAR 0 2
50429: ARRAY
50430: PUSH
50431: LD_EXP 32
50435: PUSH
50436: EMPTY
50437: LIST
50438: LIST
50439: LIST
50440: LIST
50441: ADD
50442: ST_TO_ADDR
50443: GO 50399
50445: POP
50446: POP
// end else
50447: GO 50522
// begin for i := 1 to 8 do
50449: LD_ADDR_VAR 0 2
50453: PUSH
50454: DOUBLE
50455: LD_INT 1
50457: DEC
50458: ST_TO_ADDR
50459: LD_INT 8
50461: PUSH
50462: FOR_TO
50463: IFFALSE 50520
// if mpSidePositions [ i ] then
50465: LD_EXP 5
50469: PUSH
50470: LD_VAR 0 2
50474: ARRAY
50475: IFFALSE 50518
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
50477: LD_ADDR_VAR 0 1
50481: PUSH
50482: LD_VAR 0 1
50486: PUSH
50487: LD_STRING #KingoftheHill-Player
50489: PUSH
50490: LD_VAR 0 2
50494: PUSH
50495: LD_EXP 37
50499: PUSH
50500: LD_VAR 0 2
50504: ARRAY
50505: PUSH
50506: LD_EXP 32
50510: PUSH
50511: EMPTY
50512: LIST
50513: LIST
50514: LIST
50515: LIST
50516: ADD
50517: ST_TO_ADDR
50518: GO 50462
50520: POP
50521: POP
// end ; mpDisplayStrings := result ;
50522: LD_ADDR_EXP 33
50526: PUSH
50527: LD_VAR 0 1
50531: ST_TO_ADDR
// end ;
50532: LD_VAR 0 1
50536: RET
// function HowMuchPoints ( side ) ; var i ; begin
50537: LD_INT 0
50539: PPUSH
50540: PPUSH
// if mpTeamGame then
50541: LD_EXP 9
50545: IFFALSE 50614
// begin for i := 1 to Count ( mpTeams ) do
50547: LD_ADDR_VAR 0 3
50551: PUSH
50552: DOUBLE
50553: LD_INT 1
50555: DEC
50556: ST_TO_ADDR
50557: LD_EXP 8
50561: PPUSH
50562: CALL 4629 0 1
50566: PUSH
50567: FOR_TO
50568: IFFALSE 50610
// begin if side in mpTeams [ i ] then
50570: LD_VAR 0 1
50574: PUSH
50575: LD_EXP 8
50579: PUSH
50580: LD_VAR 0 3
50584: ARRAY
50585: IN
50586: IFFALSE 50608
// begin result := mpKingPoints [ i ] ;
50588: LD_ADDR_VAR 0 2
50592: PUSH
50593: LD_EXP 37
50597: PUSH
50598: LD_VAR 0 3
50602: ARRAY
50603: ST_TO_ADDR
// exit ;
50604: POP
50605: POP
50606: GO 50630
// end ; end ;
50608: GO 50567
50610: POP
50611: POP
// end else
50612: GO 50630
// result := mpKingPoints [ side ] ;
50614: LD_ADDR_VAR 0 2
50618: PUSH
50619: LD_EXP 37
50623: PUSH
50624: LD_VAR 0 1
50628: ARRAY
50629: ST_TO_ADDR
// end ;
50630: LD_VAR 0 2
50634: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
50635: LD_EXP 34
50639: PUSH
50640: CALL 50841 0 0
50644: AND
50645: PUSH
50646: LD_OWVAR 4
50650: AND
50651: IFFALSE 50838
50653: GO 50655
50655: DISABLE
50656: LD_INT 0
50658: PPUSH
50659: PPUSH
// begin canWin := false ;
50660: LD_ADDR_VAR 0 2
50664: PUSH
50665: LD_INT 0
50667: ST_TO_ADDR
// if not HasPower ( your_side ) then
50668: LD_OWVAR 2
50672: PPUSH
50673: CALL 50905 0 1
50677: NOT
50678: IFFALSE 50689
// begin Multiplayer_Loose_Message ;
50680: CALL_OW 521
// enable ( mpLose ) ;
50684: LD_INT 102
50686: ENABLE_MARKED
// end else
50687: GO 50838
// begin canWin := HowMuchPoints ( your_side ) >= mpPoints ;
50689: LD_ADDR_VAR 0 2
50693: PUSH
50694: LD_OWVAR 2
50698: PPUSH
50699: CALL 50537 0 1
50703: PUSH
50704: LD_EXP 32
50708: GREATEREQUAL
50709: ST_TO_ADDR
// for i := 1 to 8 do
50710: LD_ADDR_VAR 0 1
50714: PUSH
50715: DOUBLE
50716: LD_INT 1
50718: DEC
50719: ST_TO_ADDR
50720: LD_INT 8
50722: PUSH
50723: FOR_TO
50724: IFFALSE 50824
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
50726: LD_EXP 5
50730: PUSH
50731: LD_VAR 0 1
50735: ARRAY
50736: PUSH
50737: LD_VAR 0 1
50741: PPUSH
50742: CALL_OW 108
50746: AND
50747: PUSH
50748: LD_VAR 0 1
50752: PUSH
50753: LD_OWVAR 2
50757: NONEQUAL
50758: AND
50759: IFFALSE 50822
// if not mpSideTeams [ i ] or ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) then
50761: LD_EXP 6
50765: PUSH
50766: LD_VAR 0 1
50770: ARRAY
50771: NOT
50772: PUSH
50773: LD_EXP 6
50777: PUSH
50778: LD_VAR 0 1
50782: ARRAY
50783: PUSH
50784: LD_EXP 6
50788: PUSH
50789: LD_OWVAR 2
50793: ARRAY
50794: NONEQUAL
50795: OR
50796: IFFALSE 50822
// if HowMuchPoints ( i ) >= mpPoints then
50798: LD_VAR 0 1
50802: PPUSH
50803: CALL 50537 0 1
50807: PUSH
50808: LD_EXP 32
50812: GREATEREQUAL
50813: IFFALSE 50822
// begin enable ( mpLose ) ;
50815: LD_INT 102
50817: ENABLE_MARKED
// exit ;
50818: POP
50819: POP
50820: GO 50838
// end ;
50822: GO 50723
50824: POP
50825: POP
// if canWin then
50826: LD_VAR 0 2
50830: IFFALSE 50837
// enable ( mpWin ) else
50832: LD_INT 101
50834: ENABLE_MARKED
50835: GO 50838
// enable ;
50837: ENABLE
// end ; end ;
50838: PPOPN 2
50840: END
// function CanWinLoose ; begin
50841: LD_INT 0
50843: PPUSH
// result := true ;
50844: LD_ADDR_VAR 0 1
50848: PUSH
50849: LD_INT 1
50851: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
50852: CALL_OW 518
50856: PUSH
50857: CALL_OW 519
50861: PUSH
50862: LD_INT 0
50864: GREATER
50865: AND
50866: IFFALSE 50876
// result := false ;
50868: LD_ADDR_VAR 0 1
50872: PUSH
50873: LD_INT 0
50875: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
50876: CALL_OW 531
50880: PUSH
50881: CALL_OW 519
50885: PUSH
50886: LD_INT 1
50888: GREATER
50889: AND
50890: IFFALSE 50900
// result := false ;
50892: LD_ADDR_VAR 0 1
50896: PUSH
50897: LD_INT 0
50899: ST_TO_ADDR
// end ;
50900: LD_VAR 0 1
50904: RET
// function HasPower ( i ) ; begin
50905: LD_INT 0
50907: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
50908: LD_ADDR_VAR 0 2
50912: PUSH
50913: LD_INT 22
50915: PUSH
50916: LD_VAR 0 1
50920: PUSH
50921: EMPTY
50922: LIST
50923: LIST
50924: PUSH
50925: LD_INT 2
50927: PUSH
50928: LD_INT 21
50930: PUSH
50931: LD_INT 1
50933: PUSH
50934: EMPTY
50935: LIST
50936: LIST
50937: PUSH
50938: LD_INT 33
50940: PUSH
50941: LD_INT 3
50943: PUSH
50944: EMPTY
50945: LIST
50946: LIST
50947: PUSH
50948: LD_INT 33
50950: PUSH
50951: LD_INT 5
50953: PUSH
50954: EMPTY
50955: LIST
50956: LIST
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: LIST
50962: LIST
50963: PUSH
50964: EMPTY
50965: LIST
50966: LIST
50967: PPUSH
50968: CALL_OW 69
50972: ST_TO_ADDR
// end ; end_of_file end_of_file
50973: LD_VAR 0 2
50977: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
50978: LD_VAR 0 1
50982: PPUSH
50983: LD_VAR 0 2
50987: PPUSH
50988: LD_VAR 0 3
50992: PPUSH
50993: LD_VAR 0 4
50997: PPUSH
50998: LD_VAR 0 5
51002: PPUSH
51003: LD_VAR 0 6
51007: PPUSH
51008: CALL 51209 0 6
// end ;
51012: PPOPN 6
51014: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
51015: LD_INT 0
51017: PPUSH
// begin if not units then
51018: LD_VAR 0 1
51022: NOT
51023: IFFALSE 51027
// exit ;
51025: GO 51027
// end ;
51027: PPOPN 7
51029: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
51030: CALL 51096 0 0
// end ; end_of_file
51034: PPOPN 1
51036: END
// export globalGameSaveCounter ; every 0 0$1 do
51037: GO 51039
51039: DISABLE
// begin enable ;
51040: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
51041: LD_STRING updateTimer(
51043: PUSH
51044: LD_OWVAR 1
51048: STR
51049: PUSH
51050: LD_STRING );
51052: STR
51053: PPUSH
51054: CALL_OW 559
// end ;
51058: END
// every 0 0$1 do
51059: GO 51061
51061: DISABLE
// begin globalGameSaveCounter := 0 ;
51062: LD_ADDR_EXP 38
51066: PUSH
51067: LD_INT 0
51069: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
51070: LD_STRING setGameSaveCounter(0)
51072: PPUSH
51073: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
51077: LD_STRING initStreamRollete();
51079: PPUSH
51080: CALL_OW 559
// InitStreamMode ;
51084: CALL 52427 0 0
// DefineStreamItems ( false ) ;
51088: LD_INT 0
51090: PPUSH
51091: CALL 52891 0 1
// end ;
51095: END
// export function SOS_MapStart ( ) ; begin
51096: LD_INT 0
51098: PPUSH
// if streamModeActive then
51099: LD_EXP 39
51103: IFFALSE 51112
// DefineStreamItems ( true ) ;
51105: LD_INT 1
51107: PPUSH
51108: CALL 52891 0 1
// UpdateLuaVariables ( ) ;
51112: CALL 51129 0 0
// UpdateFactoryWaypoints ( ) ;
51116: CALL 65760 0 0
// UpdateWarehouseGatheringPoints ( ) ;
51120: CALL 66017 0 0
// end ;
51124: LD_VAR 0 1
51128: RET
// function UpdateLuaVariables ( ) ; begin
51129: LD_INT 0
51131: PPUSH
// if globalGameSaveCounter then
51132: LD_EXP 38
51136: IFFALSE 51170
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
51138: LD_ADDR_EXP 38
51142: PUSH
51143: LD_EXP 38
51147: PPUSH
51148: CALL 41579 0 1
51152: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
51153: LD_STRING setGameSaveCounter(
51155: PUSH
51156: LD_EXP 38
51160: STR
51161: PUSH
51162: LD_STRING )
51164: STR
51165: PPUSH
51166: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
51170: LD_STRING setGameDifficulty(
51172: PUSH
51173: LD_OWVAR 67
51177: STR
51178: PUSH
51179: LD_STRING )
51181: STR
51182: PPUSH
51183: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
51187: LD_STRING displayDifficulty(
51189: PUSH
51190: LD_OWVAR 67
51194: STR
51195: PUSH
51196: LD_STRING )
51198: STR
51199: PPUSH
51200: CALL_OW 559
// end ;
51204: LD_VAR 0 1
51208: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
51209: LD_INT 0
51211: PPUSH
// if p2 = stream_mode then
51212: LD_VAR 0 2
51216: PUSH
51217: LD_INT 100
51219: EQUAL
51220: IFFALSE 52223
// begin if not StreamModeActive then
51222: LD_EXP 39
51226: NOT
51227: IFFALSE 51237
// StreamModeActive := true ;
51229: LD_ADDR_EXP 39
51233: PUSH
51234: LD_INT 1
51236: ST_TO_ADDR
// if p3 = 0 then
51237: LD_VAR 0 3
51241: PUSH
51242: LD_INT 0
51244: EQUAL
51245: IFFALSE 51251
// InitStreamMode ;
51247: CALL 52427 0 0
// if p3 = 1 then
51251: LD_VAR 0 3
51255: PUSH
51256: LD_INT 1
51258: EQUAL
51259: IFFALSE 51269
// sRocket := true ;
51261: LD_ADDR_EXP 44
51265: PUSH
51266: LD_INT 1
51268: ST_TO_ADDR
// if p3 = 2 then
51269: LD_VAR 0 3
51273: PUSH
51274: LD_INT 2
51276: EQUAL
51277: IFFALSE 51287
// sSpeed := true ;
51279: LD_ADDR_EXP 43
51283: PUSH
51284: LD_INT 1
51286: ST_TO_ADDR
// if p3 = 3 then
51287: LD_VAR 0 3
51291: PUSH
51292: LD_INT 3
51294: EQUAL
51295: IFFALSE 51305
// sEngine := true ;
51297: LD_ADDR_EXP 45
51301: PUSH
51302: LD_INT 1
51304: ST_TO_ADDR
// if p3 = 4 then
51305: LD_VAR 0 3
51309: PUSH
51310: LD_INT 4
51312: EQUAL
51313: IFFALSE 51323
// sSpec := true ;
51315: LD_ADDR_EXP 42
51319: PUSH
51320: LD_INT 1
51322: ST_TO_ADDR
// if p3 = 5 then
51323: LD_VAR 0 3
51327: PUSH
51328: LD_INT 5
51330: EQUAL
51331: IFFALSE 51341
// sLevel := true ;
51333: LD_ADDR_EXP 46
51337: PUSH
51338: LD_INT 1
51340: ST_TO_ADDR
// if p3 = 6 then
51341: LD_VAR 0 3
51345: PUSH
51346: LD_INT 6
51348: EQUAL
51349: IFFALSE 51359
// sArmoury := true ;
51351: LD_ADDR_EXP 47
51355: PUSH
51356: LD_INT 1
51358: ST_TO_ADDR
// if p3 = 7 then
51359: LD_VAR 0 3
51363: PUSH
51364: LD_INT 7
51366: EQUAL
51367: IFFALSE 51377
// sRadar := true ;
51369: LD_ADDR_EXP 48
51373: PUSH
51374: LD_INT 1
51376: ST_TO_ADDR
// if p3 = 8 then
51377: LD_VAR 0 3
51381: PUSH
51382: LD_INT 8
51384: EQUAL
51385: IFFALSE 51395
// sBunker := true ;
51387: LD_ADDR_EXP 49
51391: PUSH
51392: LD_INT 1
51394: ST_TO_ADDR
// if p3 = 9 then
51395: LD_VAR 0 3
51399: PUSH
51400: LD_INT 9
51402: EQUAL
51403: IFFALSE 51413
// sHack := true ;
51405: LD_ADDR_EXP 50
51409: PUSH
51410: LD_INT 1
51412: ST_TO_ADDR
// if p3 = 10 then
51413: LD_VAR 0 3
51417: PUSH
51418: LD_INT 10
51420: EQUAL
51421: IFFALSE 51431
// sFire := true ;
51423: LD_ADDR_EXP 51
51427: PUSH
51428: LD_INT 1
51430: ST_TO_ADDR
// if p3 = 11 then
51431: LD_VAR 0 3
51435: PUSH
51436: LD_INT 11
51438: EQUAL
51439: IFFALSE 51449
// sRefresh := true ;
51441: LD_ADDR_EXP 52
51445: PUSH
51446: LD_INT 1
51448: ST_TO_ADDR
// if p3 = 12 then
51449: LD_VAR 0 3
51453: PUSH
51454: LD_INT 12
51456: EQUAL
51457: IFFALSE 51467
// sExp := true ;
51459: LD_ADDR_EXP 53
51463: PUSH
51464: LD_INT 1
51466: ST_TO_ADDR
// if p3 = 13 then
51467: LD_VAR 0 3
51471: PUSH
51472: LD_INT 13
51474: EQUAL
51475: IFFALSE 51485
// sDepot := true ;
51477: LD_ADDR_EXP 54
51481: PUSH
51482: LD_INT 1
51484: ST_TO_ADDR
// if p3 = 14 then
51485: LD_VAR 0 3
51489: PUSH
51490: LD_INT 14
51492: EQUAL
51493: IFFALSE 51503
// sFlag := true ;
51495: LD_ADDR_EXP 55
51499: PUSH
51500: LD_INT 1
51502: ST_TO_ADDR
// if p3 = 15 then
51503: LD_VAR 0 3
51507: PUSH
51508: LD_INT 15
51510: EQUAL
51511: IFFALSE 51521
// sKamikadze := true ;
51513: LD_ADDR_EXP 63
51517: PUSH
51518: LD_INT 1
51520: ST_TO_ADDR
// if p3 = 16 then
51521: LD_VAR 0 3
51525: PUSH
51526: LD_INT 16
51528: EQUAL
51529: IFFALSE 51539
// sTroll := true ;
51531: LD_ADDR_EXP 64
51535: PUSH
51536: LD_INT 1
51538: ST_TO_ADDR
// if p3 = 17 then
51539: LD_VAR 0 3
51543: PUSH
51544: LD_INT 17
51546: EQUAL
51547: IFFALSE 51557
// sSlow := true ;
51549: LD_ADDR_EXP 65
51553: PUSH
51554: LD_INT 1
51556: ST_TO_ADDR
// if p3 = 18 then
51557: LD_VAR 0 3
51561: PUSH
51562: LD_INT 18
51564: EQUAL
51565: IFFALSE 51575
// sLack := true ;
51567: LD_ADDR_EXP 66
51571: PUSH
51572: LD_INT 1
51574: ST_TO_ADDR
// if p3 = 19 then
51575: LD_VAR 0 3
51579: PUSH
51580: LD_INT 19
51582: EQUAL
51583: IFFALSE 51593
// sTank := true ;
51585: LD_ADDR_EXP 68
51589: PUSH
51590: LD_INT 1
51592: ST_TO_ADDR
// if p3 = 20 then
51593: LD_VAR 0 3
51597: PUSH
51598: LD_INT 20
51600: EQUAL
51601: IFFALSE 51611
// sRemote := true ;
51603: LD_ADDR_EXP 69
51607: PUSH
51608: LD_INT 1
51610: ST_TO_ADDR
// if p3 = 21 then
51611: LD_VAR 0 3
51615: PUSH
51616: LD_INT 21
51618: EQUAL
51619: IFFALSE 51629
// sPowell := true ;
51621: LD_ADDR_EXP 70
51625: PUSH
51626: LD_INT 1
51628: ST_TO_ADDR
// if p3 = 22 then
51629: LD_VAR 0 3
51633: PUSH
51634: LD_INT 22
51636: EQUAL
51637: IFFALSE 51647
// sTeleport := true ;
51639: LD_ADDR_EXP 73
51643: PUSH
51644: LD_INT 1
51646: ST_TO_ADDR
// if p3 = 23 then
51647: LD_VAR 0 3
51651: PUSH
51652: LD_INT 23
51654: EQUAL
51655: IFFALSE 51665
// sOilTower := true ;
51657: LD_ADDR_EXP 75
51661: PUSH
51662: LD_INT 1
51664: ST_TO_ADDR
// if p3 = 24 then
51665: LD_VAR 0 3
51669: PUSH
51670: LD_INT 24
51672: EQUAL
51673: IFFALSE 51683
// sShovel := true ;
51675: LD_ADDR_EXP 76
51679: PUSH
51680: LD_INT 1
51682: ST_TO_ADDR
// if p3 = 25 then
51683: LD_VAR 0 3
51687: PUSH
51688: LD_INT 25
51690: EQUAL
51691: IFFALSE 51701
// sSheik := true ;
51693: LD_ADDR_EXP 77
51697: PUSH
51698: LD_INT 1
51700: ST_TO_ADDR
// if p3 = 26 then
51701: LD_VAR 0 3
51705: PUSH
51706: LD_INT 26
51708: EQUAL
51709: IFFALSE 51719
// sEarthquake := true ;
51711: LD_ADDR_EXP 79
51715: PUSH
51716: LD_INT 1
51718: ST_TO_ADDR
// if p3 = 27 then
51719: LD_VAR 0 3
51723: PUSH
51724: LD_INT 27
51726: EQUAL
51727: IFFALSE 51737
// sAI := true ;
51729: LD_ADDR_EXP 80
51733: PUSH
51734: LD_INT 1
51736: ST_TO_ADDR
// if p3 = 28 then
51737: LD_VAR 0 3
51741: PUSH
51742: LD_INT 28
51744: EQUAL
51745: IFFALSE 51755
// sCargo := true ;
51747: LD_ADDR_EXP 83
51751: PUSH
51752: LD_INT 1
51754: ST_TO_ADDR
// if p3 = 29 then
51755: LD_VAR 0 3
51759: PUSH
51760: LD_INT 29
51762: EQUAL
51763: IFFALSE 51773
// sDLaser := true ;
51765: LD_ADDR_EXP 84
51769: PUSH
51770: LD_INT 1
51772: ST_TO_ADDR
// if p3 = 30 then
51773: LD_VAR 0 3
51777: PUSH
51778: LD_INT 30
51780: EQUAL
51781: IFFALSE 51791
// sExchange := true ;
51783: LD_ADDR_EXP 85
51787: PUSH
51788: LD_INT 1
51790: ST_TO_ADDR
// if p3 = 31 then
51791: LD_VAR 0 3
51795: PUSH
51796: LD_INT 31
51798: EQUAL
51799: IFFALSE 51809
// sFac := true ;
51801: LD_ADDR_EXP 86
51805: PUSH
51806: LD_INT 1
51808: ST_TO_ADDR
// if p3 = 32 then
51809: LD_VAR 0 3
51813: PUSH
51814: LD_INT 32
51816: EQUAL
51817: IFFALSE 51827
// sPower := true ;
51819: LD_ADDR_EXP 87
51823: PUSH
51824: LD_INT 1
51826: ST_TO_ADDR
// if p3 = 33 then
51827: LD_VAR 0 3
51831: PUSH
51832: LD_INT 33
51834: EQUAL
51835: IFFALSE 51845
// sRandom := true ;
51837: LD_ADDR_EXP 88
51841: PUSH
51842: LD_INT 1
51844: ST_TO_ADDR
// if p3 = 34 then
51845: LD_VAR 0 3
51849: PUSH
51850: LD_INT 34
51852: EQUAL
51853: IFFALSE 51863
// sShield := true ;
51855: LD_ADDR_EXP 89
51859: PUSH
51860: LD_INT 1
51862: ST_TO_ADDR
// if p3 = 35 then
51863: LD_VAR 0 3
51867: PUSH
51868: LD_INT 35
51870: EQUAL
51871: IFFALSE 51881
// sTime := true ;
51873: LD_ADDR_EXP 90
51877: PUSH
51878: LD_INT 1
51880: ST_TO_ADDR
// if p3 = 36 then
51881: LD_VAR 0 3
51885: PUSH
51886: LD_INT 36
51888: EQUAL
51889: IFFALSE 51899
// sTools := true ;
51891: LD_ADDR_EXP 91
51895: PUSH
51896: LD_INT 1
51898: ST_TO_ADDR
// if p3 = 101 then
51899: LD_VAR 0 3
51903: PUSH
51904: LD_INT 101
51906: EQUAL
51907: IFFALSE 51917
// sSold := true ;
51909: LD_ADDR_EXP 56
51913: PUSH
51914: LD_INT 1
51916: ST_TO_ADDR
// if p3 = 102 then
51917: LD_VAR 0 3
51921: PUSH
51922: LD_INT 102
51924: EQUAL
51925: IFFALSE 51935
// sDiff := true ;
51927: LD_ADDR_EXP 57
51931: PUSH
51932: LD_INT 1
51934: ST_TO_ADDR
// if p3 = 103 then
51935: LD_VAR 0 3
51939: PUSH
51940: LD_INT 103
51942: EQUAL
51943: IFFALSE 51953
// sFog := true ;
51945: LD_ADDR_EXP 60
51949: PUSH
51950: LD_INT 1
51952: ST_TO_ADDR
// if p3 = 104 then
51953: LD_VAR 0 3
51957: PUSH
51958: LD_INT 104
51960: EQUAL
51961: IFFALSE 51971
// sReset := true ;
51963: LD_ADDR_EXP 61
51967: PUSH
51968: LD_INT 1
51970: ST_TO_ADDR
// if p3 = 105 then
51971: LD_VAR 0 3
51975: PUSH
51976: LD_INT 105
51978: EQUAL
51979: IFFALSE 51989
// sSun := true ;
51981: LD_ADDR_EXP 62
51985: PUSH
51986: LD_INT 1
51988: ST_TO_ADDR
// if p3 = 106 then
51989: LD_VAR 0 3
51993: PUSH
51994: LD_INT 106
51996: EQUAL
51997: IFFALSE 52007
// sTiger := true ;
51999: LD_ADDR_EXP 58
52003: PUSH
52004: LD_INT 1
52006: ST_TO_ADDR
// if p3 = 107 then
52007: LD_VAR 0 3
52011: PUSH
52012: LD_INT 107
52014: EQUAL
52015: IFFALSE 52025
// sBomb := true ;
52017: LD_ADDR_EXP 59
52021: PUSH
52022: LD_INT 1
52024: ST_TO_ADDR
// if p3 = 108 then
52025: LD_VAR 0 3
52029: PUSH
52030: LD_INT 108
52032: EQUAL
52033: IFFALSE 52043
// sWound := true ;
52035: LD_ADDR_EXP 67
52039: PUSH
52040: LD_INT 1
52042: ST_TO_ADDR
// if p3 = 109 then
52043: LD_VAR 0 3
52047: PUSH
52048: LD_INT 109
52050: EQUAL
52051: IFFALSE 52061
// sBetray := true ;
52053: LD_ADDR_EXP 71
52057: PUSH
52058: LD_INT 1
52060: ST_TO_ADDR
// if p3 = 110 then
52061: LD_VAR 0 3
52065: PUSH
52066: LD_INT 110
52068: EQUAL
52069: IFFALSE 52079
// sContamin := true ;
52071: LD_ADDR_EXP 72
52075: PUSH
52076: LD_INT 1
52078: ST_TO_ADDR
// if p3 = 111 then
52079: LD_VAR 0 3
52083: PUSH
52084: LD_INT 111
52086: EQUAL
52087: IFFALSE 52097
// sOil := true ;
52089: LD_ADDR_EXP 74
52093: PUSH
52094: LD_INT 1
52096: ST_TO_ADDR
// if p3 = 112 then
52097: LD_VAR 0 3
52101: PUSH
52102: LD_INT 112
52104: EQUAL
52105: IFFALSE 52115
// sStu := true ;
52107: LD_ADDR_EXP 78
52111: PUSH
52112: LD_INT 1
52114: ST_TO_ADDR
// if p3 = 113 then
52115: LD_VAR 0 3
52119: PUSH
52120: LD_INT 113
52122: EQUAL
52123: IFFALSE 52133
// sBazooka := true ;
52125: LD_ADDR_EXP 81
52129: PUSH
52130: LD_INT 1
52132: ST_TO_ADDR
// if p3 = 114 then
52133: LD_VAR 0 3
52137: PUSH
52138: LD_INT 114
52140: EQUAL
52141: IFFALSE 52151
// sMortar := true ;
52143: LD_ADDR_EXP 82
52147: PUSH
52148: LD_INT 1
52150: ST_TO_ADDR
// if p3 = 115 then
52151: LD_VAR 0 3
52155: PUSH
52156: LD_INT 115
52158: EQUAL
52159: IFFALSE 52169
// sRanger := true ;
52161: LD_ADDR_EXP 92
52165: PUSH
52166: LD_INT 1
52168: ST_TO_ADDR
// if p3 = 116 then
52169: LD_VAR 0 3
52173: PUSH
52174: LD_INT 116
52176: EQUAL
52177: IFFALSE 52187
// sComputer := true ;
52179: LD_ADDR_EXP 93
52183: PUSH
52184: LD_INT 1
52186: ST_TO_ADDR
// if p3 = 117 then
52187: LD_VAR 0 3
52191: PUSH
52192: LD_INT 117
52194: EQUAL
52195: IFFALSE 52205
// s30 := true ;
52197: LD_ADDR_EXP 94
52201: PUSH
52202: LD_INT 1
52204: ST_TO_ADDR
// if p3 = 118 then
52205: LD_VAR 0 3
52209: PUSH
52210: LD_INT 118
52212: EQUAL
52213: IFFALSE 52223
// s60 := true ;
52215: LD_ADDR_EXP 95
52219: PUSH
52220: LD_INT 1
52222: ST_TO_ADDR
// end ; if p2 = hack_mode then
52223: LD_VAR 0 2
52227: PUSH
52228: LD_INT 101
52230: EQUAL
52231: IFFALSE 52359
// begin case p3 of 1 :
52233: LD_VAR 0 3
52237: PUSH
52238: LD_INT 1
52240: DOUBLE
52241: EQUAL
52242: IFTRUE 52246
52244: GO 52253
52246: POP
// hHackUnlimitedResources ; 2 :
52247: CALL 64506 0 0
52251: GO 52359
52253: LD_INT 2
52255: DOUBLE
52256: EQUAL
52257: IFTRUE 52261
52259: GO 52268
52261: POP
// hHackSetLevel10 ; 3 :
52262: CALL 64639 0 0
52266: GO 52359
52268: LD_INT 3
52270: DOUBLE
52271: EQUAL
52272: IFTRUE 52276
52274: GO 52283
52276: POP
// hHackSetLevel10YourUnits ; 4 :
52277: CALL 64724 0 0
52281: GO 52359
52283: LD_INT 4
52285: DOUBLE
52286: EQUAL
52287: IFTRUE 52291
52289: GO 52298
52291: POP
// hHackInvincible ; 5 :
52292: CALL 65172 0 0
52296: GO 52359
52298: LD_INT 5
52300: DOUBLE
52301: EQUAL
52302: IFTRUE 52306
52304: GO 52313
52306: POP
// hHackInvisible ; 6 :
52307: CALL 65283 0 0
52311: GO 52359
52313: LD_INT 6
52315: DOUBLE
52316: EQUAL
52317: IFTRUE 52321
52319: GO 52328
52321: POP
// hHackChangeYourSide ; 7 :
52322: CALL 65340 0 0
52326: GO 52359
52328: LD_INT 7
52330: DOUBLE
52331: EQUAL
52332: IFTRUE 52336
52334: GO 52343
52336: POP
// hHackChangeUnitSide ; 8 :
52337: CALL 65382 0 0
52341: GO 52359
52343: LD_INT 8
52345: DOUBLE
52346: EQUAL
52347: IFTRUE 52351
52349: GO 52358
52351: POP
// hHackFog ; end ;
52352: CALL 65483 0 0
52356: GO 52359
52358: POP
// end ; if p2 = game_save_mode then
52359: LD_VAR 0 2
52363: PUSH
52364: LD_INT 102
52366: EQUAL
52367: IFFALSE 52422
// begin if p3 = 1 then
52369: LD_VAR 0 3
52373: PUSH
52374: LD_INT 1
52376: EQUAL
52377: IFFALSE 52389
// globalGameSaveCounter := p4 ;
52379: LD_ADDR_EXP 38
52383: PUSH
52384: LD_VAR 0 4
52388: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
52389: LD_VAR 0 3
52393: PUSH
52394: LD_INT 2
52396: EQUAL
52397: PUSH
52398: LD_EXP 38
52402: AND
52403: IFFALSE 52422
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
52405: LD_STRING setGameSaveCounter(
52407: PUSH
52408: LD_EXP 38
52412: STR
52413: PUSH
52414: LD_STRING )
52416: STR
52417: PPUSH
52418: CALL_OW 559
// end ; end ;
52422: LD_VAR 0 7
52426: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
52427: LD_INT 0
52429: PPUSH
// streamModeActive := false ;
52430: LD_ADDR_EXP 39
52434: PUSH
52435: LD_INT 0
52437: ST_TO_ADDR
// normalCounter := 36 ;
52438: LD_ADDR_EXP 40
52442: PUSH
52443: LD_INT 36
52445: ST_TO_ADDR
// hardcoreCounter := 18 ;
52446: LD_ADDR_EXP 41
52450: PUSH
52451: LD_INT 18
52453: ST_TO_ADDR
// sRocket := false ;
52454: LD_ADDR_EXP 44
52458: PUSH
52459: LD_INT 0
52461: ST_TO_ADDR
// sSpeed := false ;
52462: LD_ADDR_EXP 43
52466: PUSH
52467: LD_INT 0
52469: ST_TO_ADDR
// sEngine := false ;
52470: LD_ADDR_EXP 45
52474: PUSH
52475: LD_INT 0
52477: ST_TO_ADDR
// sSpec := false ;
52478: LD_ADDR_EXP 42
52482: PUSH
52483: LD_INT 0
52485: ST_TO_ADDR
// sLevel := false ;
52486: LD_ADDR_EXP 46
52490: PUSH
52491: LD_INT 0
52493: ST_TO_ADDR
// sArmoury := false ;
52494: LD_ADDR_EXP 47
52498: PUSH
52499: LD_INT 0
52501: ST_TO_ADDR
// sRadar := false ;
52502: LD_ADDR_EXP 48
52506: PUSH
52507: LD_INT 0
52509: ST_TO_ADDR
// sBunker := false ;
52510: LD_ADDR_EXP 49
52514: PUSH
52515: LD_INT 0
52517: ST_TO_ADDR
// sHack := false ;
52518: LD_ADDR_EXP 50
52522: PUSH
52523: LD_INT 0
52525: ST_TO_ADDR
// sFire := false ;
52526: LD_ADDR_EXP 51
52530: PUSH
52531: LD_INT 0
52533: ST_TO_ADDR
// sRefresh := false ;
52534: LD_ADDR_EXP 52
52538: PUSH
52539: LD_INT 0
52541: ST_TO_ADDR
// sExp := false ;
52542: LD_ADDR_EXP 53
52546: PUSH
52547: LD_INT 0
52549: ST_TO_ADDR
// sDepot := false ;
52550: LD_ADDR_EXP 54
52554: PUSH
52555: LD_INT 0
52557: ST_TO_ADDR
// sFlag := false ;
52558: LD_ADDR_EXP 55
52562: PUSH
52563: LD_INT 0
52565: ST_TO_ADDR
// sKamikadze := false ;
52566: LD_ADDR_EXP 63
52570: PUSH
52571: LD_INT 0
52573: ST_TO_ADDR
// sTroll := false ;
52574: LD_ADDR_EXP 64
52578: PUSH
52579: LD_INT 0
52581: ST_TO_ADDR
// sSlow := false ;
52582: LD_ADDR_EXP 65
52586: PUSH
52587: LD_INT 0
52589: ST_TO_ADDR
// sLack := false ;
52590: LD_ADDR_EXP 66
52594: PUSH
52595: LD_INT 0
52597: ST_TO_ADDR
// sTank := false ;
52598: LD_ADDR_EXP 68
52602: PUSH
52603: LD_INT 0
52605: ST_TO_ADDR
// sRemote := false ;
52606: LD_ADDR_EXP 69
52610: PUSH
52611: LD_INT 0
52613: ST_TO_ADDR
// sPowell := false ;
52614: LD_ADDR_EXP 70
52618: PUSH
52619: LD_INT 0
52621: ST_TO_ADDR
// sTeleport := false ;
52622: LD_ADDR_EXP 73
52626: PUSH
52627: LD_INT 0
52629: ST_TO_ADDR
// sOilTower := false ;
52630: LD_ADDR_EXP 75
52634: PUSH
52635: LD_INT 0
52637: ST_TO_ADDR
// sShovel := false ;
52638: LD_ADDR_EXP 76
52642: PUSH
52643: LD_INT 0
52645: ST_TO_ADDR
// sSheik := false ;
52646: LD_ADDR_EXP 77
52650: PUSH
52651: LD_INT 0
52653: ST_TO_ADDR
// sEarthquake := false ;
52654: LD_ADDR_EXP 79
52658: PUSH
52659: LD_INT 0
52661: ST_TO_ADDR
// sAI := false ;
52662: LD_ADDR_EXP 80
52666: PUSH
52667: LD_INT 0
52669: ST_TO_ADDR
// sCargo := false ;
52670: LD_ADDR_EXP 83
52674: PUSH
52675: LD_INT 0
52677: ST_TO_ADDR
// sDLaser := false ;
52678: LD_ADDR_EXP 84
52682: PUSH
52683: LD_INT 0
52685: ST_TO_ADDR
// sExchange := false ;
52686: LD_ADDR_EXP 85
52690: PUSH
52691: LD_INT 0
52693: ST_TO_ADDR
// sFac := false ;
52694: LD_ADDR_EXP 86
52698: PUSH
52699: LD_INT 0
52701: ST_TO_ADDR
// sPower := false ;
52702: LD_ADDR_EXP 87
52706: PUSH
52707: LD_INT 0
52709: ST_TO_ADDR
// sRandom := false ;
52710: LD_ADDR_EXP 88
52714: PUSH
52715: LD_INT 0
52717: ST_TO_ADDR
// sShield := false ;
52718: LD_ADDR_EXP 89
52722: PUSH
52723: LD_INT 0
52725: ST_TO_ADDR
// sTime := false ;
52726: LD_ADDR_EXP 90
52730: PUSH
52731: LD_INT 0
52733: ST_TO_ADDR
// sTools := false ;
52734: LD_ADDR_EXP 91
52738: PUSH
52739: LD_INT 0
52741: ST_TO_ADDR
// sSold := false ;
52742: LD_ADDR_EXP 56
52746: PUSH
52747: LD_INT 0
52749: ST_TO_ADDR
// sDiff := false ;
52750: LD_ADDR_EXP 57
52754: PUSH
52755: LD_INT 0
52757: ST_TO_ADDR
// sFog := false ;
52758: LD_ADDR_EXP 60
52762: PUSH
52763: LD_INT 0
52765: ST_TO_ADDR
// sReset := false ;
52766: LD_ADDR_EXP 61
52770: PUSH
52771: LD_INT 0
52773: ST_TO_ADDR
// sSun := false ;
52774: LD_ADDR_EXP 62
52778: PUSH
52779: LD_INT 0
52781: ST_TO_ADDR
// sTiger := false ;
52782: LD_ADDR_EXP 58
52786: PUSH
52787: LD_INT 0
52789: ST_TO_ADDR
// sBomb := false ;
52790: LD_ADDR_EXP 59
52794: PUSH
52795: LD_INT 0
52797: ST_TO_ADDR
// sWound := false ;
52798: LD_ADDR_EXP 67
52802: PUSH
52803: LD_INT 0
52805: ST_TO_ADDR
// sBetray := false ;
52806: LD_ADDR_EXP 71
52810: PUSH
52811: LD_INT 0
52813: ST_TO_ADDR
// sContamin := false ;
52814: LD_ADDR_EXP 72
52818: PUSH
52819: LD_INT 0
52821: ST_TO_ADDR
// sOil := false ;
52822: LD_ADDR_EXP 74
52826: PUSH
52827: LD_INT 0
52829: ST_TO_ADDR
// sStu := false ;
52830: LD_ADDR_EXP 78
52834: PUSH
52835: LD_INT 0
52837: ST_TO_ADDR
// sBazooka := false ;
52838: LD_ADDR_EXP 81
52842: PUSH
52843: LD_INT 0
52845: ST_TO_ADDR
// sMortar := false ;
52846: LD_ADDR_EXP 82
52850: PUSH
52851: LD_INT 0
52853: ST_TO_ADDR
// sRanger := false ;
52854: LD_ADDR_EXP 92
52858: PUSH
52859: LD_INT 0
52861: ST_TO_ADDR
// sComputer := false ;
52862: LD_ADDR_EXP 93
52866: PUSH
52867: LD_INT 0
52869: ST_TO_ADDR
// s30 := false ;
52870: LD_ADDR_EXP 94
52874: PUSH
52875: LD_INT 0
52877: ST_TO_ADDR
// s60 := false ;
52878: LD_ADDR_EXP 95
52882: PUSH
52883: LD_INT 0
52885: ST_TO_ADDR
// end ;
52886: LD_VAR 0 1
52890: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
52891: LD_INT 0
52893: PPUSH
52894: PPUSH
52895: PPUSH
52896: PPUSH
52897: PPUSH
52898: PPUSH
52899: PPUSH
// result := [ ] ;
52900: LD_ADDR_VAR 0 2
52904: PUSH
52905: EMPTY
52906: ST_TO_ADDR
// if campaign_id = 1 then
52907: LD_OWVAR 69
52911: PUSH
52912: LD_INT 1
52914: EQUAL
52915: IFFALSE 56081
// begin case mission_number of 1 :
52917: LD_OWVAR 70
52921: PUSH
52922: LD_INT 1
52924: DOUBLE
52925: EQUAL
52926: IFTRUE 52930
52928: GO 53006
52930: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
52931: LD_ADDR_VAR 0 2
52935: PUSH
52936: LD_INT 2
52938: PUSH
52939: LD_INT 4
52941: PUSH
52942: LD_INT 11
52944: PUSH
52945: LD_INT 12
52947: PUSH
52948: LD_INT 15
52950: PUSH
52951: LD_INT 16
52953: PUSH
52954: LD_INT 22
52956: PUSH
52957: LD_INT 23
52959: PUSH
52960: LD_INT 26
52962: PUSH
52963: EMPTY
52964: LIST
52965: LIST
52966: LIST
52967: LIST
52968: LIST
52969: LIST
52970: LIST
52971: LIST
52972: LIST
52973: PUSH
52974: LD_INT 101
52976: PUSH
52977: LD_INT 102
52979: PUSH
52980: LD_INT 106
52982: PUSH
52983: LD_INT 116
52985: PUSH
52986: LD_INT 117
52988: PUSH
52989: LD_INT 118
52991: PUSH
52992: EMPTY
52993: LIST
52994: LIST
52995: LIST
52996: LIST
52997: LIST
52998: LIST
52999: PUSH
53000: EMPTY
53001: LIST
53002: LIST
53003: ST_TO_ADDR
53004: GO 56079
53006: LD_INT 2
53008: DOUBLE
53009: EQUAL
53010: IFTRUE 53014
53012: GO 53098
53014: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
53015: LD_ADDR_VAR 0 2
53019: PUSH
53020: LD_INT 2
53022: PUSH
53023: LD_INT 4
53025: PUSH
53026: LD_INT 11
53028: PUSH
53029: LD_INT 12
53031: PUSH
53032: LD_INT 15
53034: PUSH
53035: LD_INT 16
53037: PUSH
53038: LD_INT 22
53040: PUSH
53041: LD_INT 23
53043: PUSH
53044: LD_INT 26
53046: PUSH
53047: EMPTY
53048: LIST
53049: LIST
53050: LIST
53051: LIST
53052: LIST
53053: LIST
53054: LIST
53055: LIST
53056: LIST
53057: PUSH
53058: LD_INT 101
53060: PUSH
53061: LD_INT 102
53063: PUSH
53064: LD_INT 105
53066: PUSH
53067: LD_INT 106
53069: PUSH
53070: LD_INT 108
53072: PUSH
53073: LD_INT 116
53075: PUSH
53076: LD_INT 117
53078: PUSH
53079: LD_INT 118
53081: PUSH
53082: EMPTY
53083: LIST
53084: LIST
53085: LIST
53086: LIST
53087: LIST
53088: LIST
53089: LIST
53090: LIST
53091: PUSH
53092: EMPTY
53093: LIST
53094: LIST
53095: ST_TO_ADDR
53096: GO 56079
53098: LD_INT 3
53100: DOUBLE
53101: EQUAL
53102: IFTRUE 53106
53104: GO 53194
53106: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
53107: LD_ADDR_VAR 0 2
53111: PUSH
53112: LD_INT 2
53114: PUSH
53115: LD_INT 4
53117: PUSH
53118: LD_INT 5
53120: PUSH
53121: LD_INT 11
53123: PUSH
53124: LD_INT 12
53126: PUSH
53127: LD_INT 15
53129: PUSH
53130: LD_INT 16
53132: PUSH
53133: LD_INT 22
53135: PUSH
53136: LD_INT 26
53138: PUSH
53139: LD_INT 36
53141: PUSH
53142: EMPTY
53143: LIST
53144: LIST
53145: LIST
53146: LIST
53147: LIST
53148: LIST
53149: LIST
53150: LIST
53151: LIST
53152: LIST
53153: PUSH
53154: LD_INT 101
53156: PUSH
53157: LD_INT 102
53159: PUSH
53160: LD_INT 105
53162: PUSH
53163: LD_INT 106
53165: PUSH
53166: LD_INT 108
53168: PUSH
53169: LD_INT 116
53171: PUSH
53172: LD_INT 117
53174: PUSH
53175: LD_INT 118
53177: PUSH
53178: EMPTY
53179: LIST
53180: LIST
53181: LIST
53182: LIST
53183: LIST
53184: LIST
53185: LIST
53186: LIST
53187: PUSH
53188: EMPTY
53189: LIST
53190: LIST
53191: ST_TO_ADDR
53192: GO 56079
53194: LD_INT 4
53196: DOUBLE
53197: EQUAL
53198: IFTRUE 53202
53200: GO 53298
53202: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
53203: LD_ADDR_VAR 0 2
53207: PUSH
53208: LD_INT 2
53210: PUSH
53211: LD_INT 4
53213: PUSH
53214: LD_INT 5
53216: PUSH
53217: LD_INT 8
53219: PUSH
53220: LD_INT 11
53222: PUSH
53223: LD_INT 12
53225: PUSH
53226: LD_INT 15
53228: PUSH
53229: LD_INT 16
53231: PUSH
53232: LD_INT 22
53234: PUSH
53235: LD_INT 23
53237: PUSH
53238: LD_INT 26
53240: PUSH
53241: LD_INT 36
53243: PUSH
53244: EMPTY
53245: LIST
53246: LIST
53247: LIST
53248: LIST
53249: LIST
53250: LIST
53251: LIST
53252: LIST
53253: LIST
53254: LIST
53255: LIST
53256: LIST
53257: PUSH
53258: LD_INT 101
53260: PUSH
53261: LD_INT 102
53263: PUSH
53264: LD_INT 105
53266: PUSH
53267: LD_INT 106
53269: PUSH
53270: LD_INT 108
53272: PUSH
53273: LD_INT 116
53275: PUSH
53276: LD_INT 117
53278: PUSH
53279: LD_INT 118
53281: PUSH
53282: EMPTY
53283: LIST
53284: LIST
53285: LIST
53286: LIST
53287: LIST
53288: LIST
53289: LIST
53290: LIST
53291: PUSH
53292: EMPTY
53293: LIST
53294: LIST
53295: ST_TO_ADDR
53296: GO 56079
53298: LD_INT 5
53300: DOUBLE
53301: EQUAL
53302: IFTRUE 53306
53304: GO 53418
53306: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
53307: LD_ADDR_VAR 0 2
53311: PUSH
53312: LD_INT 2
53314: PUSH
53315: LD_INT 4
53317: PUSH
53318: LD_INT 5
53320: PUSH
53321: LD_INT 6
53323: PUSH
53324: LD_INT 8
53326: PUSH
53327: LD_INT 11
53329: PUSH
53330: LD_INT 12
53332: PUSH
53333: LD_INT 15
53335: PUSH
53336: LD_INT 16
53338: PUSH
53339: LD_INT 22
53341: PUSH
53342: LD_INT 23
53344: PUSH
53345: LD_INT 25
53347: PUSH
53348: LD_INT 26
53350: PUSH
53351: LD_INT 36
53353: PUSH
53354: EMPTY
53355: LIST
53356: LIST
53357: LIST
53358: LIST
53359: LIST
53360: LIST
53361: LIST
53362: LIST
53363: LIST
53364: LIST
53365: LIST
53366: LIST
53367: LIST
53368: LIST
53369: PUSH
53370: LD_INT 101
53372: PUSH
53373: LD_INT 102
53375: PUSH
53376: LD_INT 105
53378: PUSH
53379: LD_INT 106
53381: PUSH
53382: LD_INT 108
53384: PUSH
53385: LD_INT 109
53387: PUSH
53388: LD_INT 112
53390: PUSH
53391: LD_INT 116
53393: PUSH
53394: LD_INT 117
53396: PUSH
53397: LD_INT 118
53399: PUSH
53400: EMPTY
53401: LIST
53402: LIST
53403: LIST
53404: LIST
53405: LIST
53406: LIST
53407: LIST
53408: LIST
53409: LIST
53410: LIST
53411: PUSH
53412: EMPTY
53413: LIST
53414: LIST
53415: ST_TO_ADDR
53416: GO 56079
53418: LD_INT 6
53420: DOUBLE
53421: EQUAL
53422: IFTRUE 53426
53424: GO 53558
53426: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
53427: LD_ADDR_VAR 0 2
53431: PUSH
53432: LD_INT 2
53434: PUSH
53435: LD_INT 4
53437: PUSH
53438: LD_INT 5
53440: PUSH
53441: LD_INT 6
53443: PUSH
53444: LD_INT 8
53446: PUSH
53447: LD_INT 11
53449: PUSH
53450: LD_INT 12
53452: PUSH
53453: LD_INT 15
53455: PUSH
53456: LD_INT 16
53458: PUSH
53459: LD_INT 20
53461: PUSH
53462: LD_INT 21
53464: PUSH
53465: LD_INT 22
53467: PUSH
53468: LD_INT 23
53470: PUSH
53471: LD_INT 25
53473: PUSH
53474: LD_INT 26
53476: PUSH
53477: LD_INT 30
53479: PUSH
53480: LD_INT 31
53482: PUSH
53483: LD_INT 32
53485: PUSH
53486: LD_INT 36
53488: PUSH
53489: EMPTY
53490: LIST
53491: LIST
53492: LIST
53493: LIST
53494: LIST
53495: LIST
53496: LIST
53497: LIST
53498: LIST
53499: LIST
53500: LIST
53501: LIST
53502: LIST
53503: LIST
53504: LIST
53505: LIST
53506: LIST
53507: LIST
53508: LIST
53509: PUSH
53510: LD_INT 101
53512: PUSH
53513: LD_INT 102
53515: PUSH
53516: LD_INT 105
53518: PUSH
53519: LD_INT 106
53521: PUSH
53522: LD_INT 108
53524: PUSH
53525: LD_INT 109
53527: PUSH
53528: LD_INT 112
53530: PUSH
53531: LD_INT 116
53533: PUSH
53534: LD_INT 117
53536: PUSH
53537: LD_INT 118
53539: PUSH
53540: EMPTY
53541: LIST
53542: LIST
53543: LIST
53544: LIST
53545: LIST
53546: LIST
53547: LIST
53548: LIST
53549: LIST
53550: LIST
53551: PUSH
53552: EMPTY
53553: LIST
53554: LIST
53555: ST_TO_ADDR
53556: GO 56079
53558: LD_INT 7
53560: DOUBLE
53561: EQUAL
53562: IFTRUE 53566
53564: GO 53678
53566: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
53567: LD_ADDR_VAR 0 2
53571: PUSH
53572: LD_INT 2
53574: PUSH
53575: LD_INT 4
53577: PUSH
53578: LD_INT 5
53580: PUSH
53581: LD_INT 7
53583: PUSH
53584: LD_INT 11
53586: PUSH
53587: LD_INT 12
53589: PUSH
53590: LD_INT 15
53592: PUSH
53593: LD_INT 16
53595: PUSH
53596: LD_INT 20
53598: PUSH
53599: LD_INT 21
53601: PUSH
53602: LD_INT 22
53604: PUSH
53605: LD_INT 23
53607: PUSH
53608: LD_INT 25
53610: PUSH
53611: LD_INT 26
53613: PUSH
53614: EMPTY
53615: LIST
53616: LIST
53617: LIST
53618: LIST
53619: LIST
53620: LIST
53621: LIST
53622: LIST
53623: LIST
53624: LIST
53625: LIST
53626: LIST
53627: LIST
53628: LIST
53629: PUSH
53630: LD_INT 101
53632: PUSH
53633: LD_INT 102
53635: PUSH
53636: LD_INT 103
53638: PUSH
53639: LD_INT 105
53641: PUSH
53642: LD_INT 106
53644: PUSH
53645: LD_INT 108
53647: PUSH
53648: LD_INT 112
53650: PUSH
53651: LD_INT 116
53653: PUSH
53654: LD_INT 117
53656: PUSH
53657: LD_INT 118
53659: PUSH
53660: EMPTY
53661: LIST
53662: LIST
53663: LIST
53664: LIST
53665: LIST
53666: LIST
53667: LIST
53668: LIST
53669: LIST
53670: LIST
53671: PUSH
53672: EMPTY
53673: LIST
53674: LIST
53675: ST_TO_ADDR
53676: GO 56079
53678: LD_INT 8
53680: DOUBLE
53681: EQUAL
53682: IFTRUE 53686
53684: GO 53826
53686: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
53687: LD_ADDR_VAR 0 2
53691: PUSH
53692: LD_INT 2
53694: PUSH
53695: LD_INT 4
53697: PUSH
53698: LD_INT 5
53700: PUSH
53701: LD_INT 6
53703: PUSH
53704: LD_INT 7
53706: PUSH
53707: LD_INT 8
53709: PUSH
53710: LD_INT 11
53712: PUSH
53713: LD_INT 12
53715: PUSH
53716: LD_INT 15
53718: PUSH
53719: LD_INT 16
53721: PUSH
53722: LD_INT 20
53724: PUSH
53725: LD_INT 21
53727: PUSH
53728: LD_INT 22
53730: PUSH
53731: LD_INT 23
53733: PUSH
53734: LD_INT 25
53736: PUSH
53737: LD_INT 26
53739: PUSH
53740: LD_INT 30
53742: PUSH
53743: LD_INT 31
53745: PUSH
53746: LD_INT 32
53748: PUSH
53749: LD_INT 36
53751: PUSH
53752: EMPTY
53753: LIST
53754: LIST
53755: LIST
53756: LIST
53757: LIST
53758: LIST
53759: LIST
53760: LIST
53761: LIST
53762: LIST
53763: LIST
53764: LIST
53765: LIST
53766: LIST
53767: LIST
53768: LIST
53769: LIST
53770: LIST
53771: LIST
53772: LIST
53773: PUSH
53774: LD_INT 101
53776: PUSH
53777: LD_INT 102
53779: PUSH
53780: LD_INT 103
53782: PUSH
53783: LD_INT 105
53785: PUSH
53786: LD_INT 106
53788: PUSH
53789: LD_INT 108
53791: PUSH
53792: LD_INT 109
53794: PUSH
53795: LD_INT 112
53797: PUSH
53798: LD_INT 116
53800: PUSH
53801: LD_INT 117
53803: PUSH
53804: LD_INT 118
53806: PUSH
53807: EMPTY
53808: LIST
53809: LIST
53810: LIST
53811: LIST
53812: LIST
53813: LIST
53814: LIST
53815: LIST
53816: LIST
53817: LIST
53818: LIST
53819: PUSH
53820: EMPTY
53821: LIST
53822: LIST
53823: ST_TO_ADDR
53824: GO 56079
53826: LD_INT 9
53828: DOUBLE
53829: EQUAL
53830: IFTRUE 53834
53832: GO 53982
53834: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
53835: LD_ADDR_VAR 0 2
53839: PUSH
53840: LD_INT 2
53842: PUSH
53843: LD_INT 4
53845: PUSH
53846: LD_INT 5
53848: PUSH
53849: LD_INT 6
53851: PUSH
53852: LD_INT 7
53854: PUSH
53855: LD_INT 8
53857: PUSH
53858: LD_INT 11
53860: PUSH
53861: LD_INT 12
53863: PUSH
53864: LD_INT 15
53866: PUSH
53867: LD_INT 16
53869: PUSH
53870: LD_INT 20
53872: PUSH
53873: LD_INT 21
53875: PUSH
53876: LD_INT 22
53878: PUSH
53879: LD_INT 23
53881: PUSH
53882: LD_INT 25
53884: PUSH
53885: LD_INT 26
53887: PUSH
53888: LD_INT 28
53890: PUSH
53891: LD_INT 30
53893: PUSH
53894: LD_INT 31
53896: PUSH
53897: LD_INT 32
53899: PUSH
53900: LD_INT 36
53902: PUSH
53903: EMPTY
53904: LIST
53905: LIST
53906: LIST
53907: LIST
53908: LIST
53909: LIST
53910: LIST
53911: LIST
53912: LIST
53913: LIST
53914: LIST
53915: LIST
53916: LIST
53917: LIST
53918: LIST
53919: LIST
53920: LIST
53921: LIST
53922: LIST
53923: LIST
53924: LIST
53925: PUSH
53926: LD_INT 101
53928: PUSH
53929: LD_INT 102
53931: PUSH
53932: LD_INT 103
53934: PUSH
53935: LD_INT 105
53937: PUSH
53938: LD_INT 106
53940: PUSH
53941: LD_INT 108
53943: PUSH
53944: LD_INT 109
53946: PUSH
53947: LD_INT 112
53949: PUSH
53950: LD_INT 114
53952: PUSH
53953: LD_INT 116
53955: PUSH
53956: LD_INT 117
53958: PUSH
53959: LD_INT 118
53961: PUSH
53962: EMPTY
53963: LIST
53964: LIST
53965: LIST
53966: LIST
53967: LIST
53968: LIST
53969: LIST
53970: LIST
53971: LIST
53972: LIST
53973: LIST
53974: LIST
53975: PUSH
53976: EMPTY
53977: LIST
53978: LIST
53979: ST_TO_ADDR
53980: GO 56079
53982: LD_INT 10
53984: DOUBLE
53985: EQUAL
53986: IFTRUE 53990
53988: GO 54186
53990: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
53991: LD_ADDR_VAR 0 2
53995: PUSH
53996: LD_INT 2
53998: PUSH
53999: LD_INT 4
54001: PUSH
54002: LD_INT 5
54004: PUSH
54005: LD_INT 6
54007: PUSH
54008: LD_INT 7
54010: PUSH
54011: LD_INT 8
54013: PUSH
54014: LD_INT 9
54016: PUSH
54017: LD_INT 10
54019: PUSH
54020: LD_INT 11
54022: PUSH
54023: LD_INT 12
54025: PUSH
54026: LD_INT 13
54028: PUSH
54029: LD_INT 14
54031: PUSH
54032: LD_INT 15
54034: PUSH
54035: LD_INT 16
54037: PUSH
54038: LD_INT 17
54040: PUSH
54041: LD_INT 18
54043: PUSH
54044: LD_INT 19
54046: PUSH
54047: LD_INT 20
54049: PUSH
54050: LD_INT 21
54052: PUSH
54053: LD_INT 22
54055: PUSH
54056: LD_INT 23
54058: PUSH
54059: LD_INT 24
54061: PUSH
54062: LD_INT 25
54064: PUSH
54065: LD_INT 26
54067: PUSH
54068: LD_INT 28
54070: PUSH
54071: LD_INT 30
54073: PUSH
54074: LD_INT 31
54076: PUSH
54077: LD_INT 32
54079: PUSH
54080: LD_INT 36
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: LIST
54087: LIST
54088: LIST
54089: LIST
54090: LIST
54091: LIST
54092: LIST
54093: LIST
54094: LIST
54095: LIST
54096: LIST
54097: LIST
54098: LIST
54099: LIST
54100: LIST
54101: LIST
54102: LIST
54103: LIST
54104: LIST
54105: LIST
54106: LIST
54107: LIST
54108: LIST
54109: LIST
54110: LIST
54111: LIST
54112: LIST
54113: PUSH
54114: LD_INT 101
54116: PUSH
54117: LD_INT 102
54119: PUSH
54120: LD_INT 103
54122: PUSH
54123: LD_INT 104
54125: PUSH
54126: LD_INT 105
54128: PUSH
54129: LD_INT 106
54131: PUSH
54132: LD_INT 107
54134: PUSH
54135: LD_INT 108
54137: PUSH
54138: LD_INT 109
54140: PUSH
54141: LD_INT 110
54143: PUSH
54144: LD_INT 111
54146: PUSH
54147: LD_INT 112
54149: PUSH
54150: LD_INT 114
54152: PUSH
54153: LD_INT 116
54155: PUSH
54156: LD_INT 117
54158: PUSH
54159: LD_INT 118
54161: PUSH
54162: EMPTY
54163: LIST
54164: LIST
54165: LIST
54166: LIST
54167: LIST
54168: LIST
54169: LIST
54170: LIST
54171: LIST
54172: LIST
54173: LIST
54174: LIST
54175: LIST
54176: LIST
54177: LIST
54178: LIST
54179: PUSH
54180: EMPTY
54181: LIST
54182: LIST
54183: ST_TO_ADDR
54184: GO 56079
54186: LD_INT 11
54188: DOUBLE
54189: EQUAL
54190: IFTRUE 54194
54192: GO 54398
54194: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
54195: LD_ADDR_VAR 0 2
54199: PUSH
54200: LD_INT 2
54202: PUSH
54203: LD_INT 3
54205: PUSH
54206: LD_INT 4
54208: PUSH
54209: LD_INT 5
54211: PUSH
54212: LD_INT 6
54214: PUSH
54215: LD_INT 7
54217: PUSH
54218: LD_INT 8
54220: PUSH
54221: LD_INT 9
54223: PUSH
54224: LD_INT 10
54226: PUSH
54227: LD_INT 11
54229: PUSH
54230: LD_INT 12
54232: PUSH
54233: LD_INT 13
54235: PUSH
54236: LD_INT 14
54238: PUSH
54239: LD_INT 15
54241: PUSH
54242: LD_INT 16
54244: PUSH
54245: LD_INT 17
54247: PUSH
54248: LD_INT 18
54250: PUSH
54251: LD_INT 19
54253: PUSH
54254: LD_INT 20
54256: PUSH
54257: LD_INT 21
54259: PUSH
54260: LD_INT 22
54262: PUSH
54263: LD_INT 23
54265: PUSH
54266: LD_INT 24
54268: PUSH
54269: LD_INT 25
54271: PUSH
54272: LD_INT 26
54274: PUSH
54275: LD_INT 28
54277: PUSH
54278: LD_INT 30
54280: PUSH
54281: LD_INT 31
54283: PUSH
54284: LD_INT 32
54286: PUSH
54287: LD_INT 34
54289: PUSH
54290: LD_INT 36
54292: PUSH
54293: EMPTY
54294: LIST
54295: LIST
54296: LIST
54297: LIST
54298: LIST
54299: LIST
54300: LIST
54301: LIST
54302: LIST
54303: LIST
54304: LIST
54305: LIST
54306: LIST
54307: LIST
54308: LIST
54309: LIST
54310: LIST
54311: LIST
54312: LIST
54313: LIST
54314: LIST
54315: LIST
54316: LIST
54317: LIST
54318: LIST
54319: LIST
54320: LIST
54321: LIST
54322: LIST
54323: LIST
54324: LIST
54325: PUSH
54326: LD_INT 101
54328: PUSH
54329: LD_INT 102
54331: PUSH
54332: LD_INT 103
54334: PUSH
54335: LD_INT 104
54337: PUSH
54338: LD_INT 105
54340: PUSH
54341: LD_INT 106
54343: PUSH
54344: LD_INT 107
54346: PUSH
54347: LD_INT 108
54349: PUSH
54350: LD_INT 109
54352: PUSH
54353: LD_INT 110
54355: PUSH
54356: LD_INT 111
54358: PUSH
54359: LD_INT 112
54361: PUSH
54362: LD_INT 114
54364: PUSH
54365: LD_INT 116
54367: PUSH
54368: LD_INT 117
54370: PUSH
54371: LD_INT 118
54373: PUSH
54374: EMPTY
54375: LIST
54376: LIST
54377: LIST
54378: LIST
54379: LIST
54380: LIST
54381: LIST
54382: LIST
54383: LIST
54384: LIST
54385: LIST
54386: LIST
54387: LIST
54388: LIST
54389: LIST
54390: LIST
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: ST_TO_ADDR
54396: GO 56079
54398: LD_INT 12
54400: DOUBLE
54401: EQUAL
54402: IFTRUE 54406
54404: GO 54626
54406: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
54407: LD_ADDR_VAR 0 2
54411: PUSH
54412: LD_INT 1
54414: PUSH
54415: LD_INT 2
54417: PUSH
54418: LD_INT 3
54420: PUSH
54421: LD_INT 4
54423: PUSH
54424: LD_INT 5
54426: PUSH
54427: LD_INT 6
54429: PUSH
54430: LD_INT 7
54432: PUSH
54433: LD_INT 8
54435: PUSH
54436: LD_INT 9
54438: PUSH
54439: LD_INT 10
54441: PUSH
54442: LD_INT 11
54444: PUSH
54445: LD_INT 12
54447: PUSH
54448: LD_INT 13
54450: PUSH
54451: LD_INT 14
54453: PUSH
54454: LD_INT 15
54456: PUSH
54457: LD_INT 16
54459: PUSH
54460: LD_INT 17
54462: PUSH
54463: LD_INT 18
54465: PUSH
54466: LD_INT 19
54468: PUSH
54469: LD_INT 20
54471: PUSH
54472: LD_INT 21
54474: PUSH
54475: LD_INT 22
54477: PUSH
54478: LD_INT 23
54480: PUSH
54481: LD_INT 24
54483: PUSH
54484: LD_INT 25
54486: PUSH
54487: LD_INT 26
54489: PUSH
54490: LD_INT 27
54492: PUSH
54493: LD_INT 28
54495: PUSH
54496: LD_INT 30
54498: PUSH
54499: LD_INT 31
54501: PUSH
54502: LD_INT 32
54504: PUSH
54505: LD_INT 33
54507: PUSH
54508: LD_INT 34
54510: PUSH
54511: LD_INT 36
54513: PUSH
54514: EMPTY
54515: LIST
54516: LIST
54517: LIST
54518: LIST
54519: LIST
54520: LIST
54521: LIST
54522: LIST
54523: LIST
54524: LIST
54525: LIST
54526: LIST
54527: LIST
54528: LIST
54529: LIST
54530: LIST
54531: LIST
54532: LIST
54533: LIST
54534: LIST
54535: LIST
54536: LIST
54537: LIST
54538: LIST
54539: LIST
54540: LIST
54541: LIST
54542: LIST
54543: LIST
54544: LIST
54545: LIST
54546: LIST
54547: LIST
54548: LIST
54549: PUSH
54550: LD_INT 101
54552: PUSH
54553: LD_INT 102
54555: PUSH
54556: LD_INT 103
54558: PUSH
54559: LD_INT 104
54561: PUSH
54562: LD_INT 105
54564: PUSH
54565: LD_INT 106
54567: PUSH
54568: LD_INT 107
54570: PUSH
54571: LD_INT 108
54573: PUSH
54574: LD_INT 109
54576: PUSH
54577: LD_INT 110
54579: PUSH
54580: LD_INT 111
54582: PUSH
54583: LD_INT 112
54585: PUSH
54586: LD_INT 113
54588: PUSH
54589: LD_INT 114
54591: PUSH
54592: LD_INT 116
54594: PUSH
54595: LD_INT 117
54597: PUSH
54598: LD_INT 118
54600: PUSH
54601: EMPTY
54602: LIST
54603: LIST
54604: LIST
54605: LIST
54606: LIST
54607: LIST
54608: LIST
54609: LIST
54610: LIST
54611: LIST
54612: LIST
54613: LIST
54614: LIST
54615: LIST
54616: LIST
54617: LIST
54618: LIST
54619: PUSH
54620: EMPTY
54621: LIST
54622: LIST
54623: ST_TO_ADDR
54624: GO 56079
54626: LD_INT 13
54628: DOUBLE
54629: EQUAL
54630: IFTRUE 54634
54632: GO 54842
54634: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
54635: LD_ADDR_VAR 0 2
54639: PUSH
54640: LD_INT 1
54642: PUSH
54643: LD_INT 2
54645: PUSH
54646: LD_INT 3
54648: PUSH
54649: LD_INT 4
54651: PUSH
54652: LD_INT 5
54654: PUSH
54655: LD_INT 8
54657: PUSH
54658: LD_INT 9
54660: PUSH
54661: LD_INT 10
54663: PUSH
54664: LD_INT 11
54666: PUSH
54667: LD_INT 12
54669: PUSH
54670: LD_INT 14
54672: PUSH
54673: LD_INT 15
54675: PUSH
54676: LD_INT 16
54678: PUSH
54679: LD_INT 17
54681: PUSH
54682: LD_INT 18
54684: PUSH
54685: LD_INT 19
54687: PUSH
54688: LD_INT 20
54690: PUSH
54691: LD_INT 21
54693: PUSH
54694: LD_INT 22
54696: PUSH
54697: LD_INT 23
54699: PUSH
54700: LD_INT 24
54702: PUSH
54703: LD_INT 25
54705: PUSH
54706: LD_INT 26
54708: PUSH
54709: LD_INT 27
54711: PUSH
54712: LD_INT 28
54714: PUSH
54715: LD_INT 30
54717: PUSH
54718: LD_INT 31
54720: PUSH
54721: LD_INT 32
54723: PUSH
54724: LD_INT 33
54726: PUSH
54727: LD_INT 34
54729: PUSH
54730: LD_INT 36
54732: PUSH
54733: EMPTY
54734: LIST
54735: LIST
54736: LIST
54737: LIST
54738: LIST
54739: LIST
54740: LIST
54741: LIST
54742: LIST
54743: LIST
54744: LIST
54745: LIST
54746: LIST
54747: LIST
54748: LIST
54749: LIST
54750: LIST
54751: LIST
54752: LIST
54753: LIST
54754: LIST
54755: LIST
54756: LIST
54757: LIST
54758: LIST
54759: LIST
54760: LIST
54761: LIST
54762: LIST
54763: LIST
54764: LIST
54765: PUSH
54766: LD_INT 101
54768: PUSH
54769: LD_INT 102
54771: PUSH
54772: LD_INT 103
54774: PUSH
54775: LD_INT 104
54777: PUSH
54778: LD_INT 105
54780: PUSH
54781: LD_INT 106
54783: PUSH
54784: LD_INT 107
54786: PUSH
54787: LD_INT 108
54789: PUSH
54790: LD_INT 109
54792: PUSH
54793: LD_INT 110
54795: PUSH
54796: LD_INT 111
54798: PUSH
54799: LD_INT 112
54801: PUSH
54802: LD_INT 113
54804: PUSH
54805: LD_INT 114
54807: PUSH
54808: LD_INT 116
54810: PUSH
54811: LD_INT 117
54813: PUSH
54814: LD_INT 118
54816: PUSH
54817: EMPTY
54818: LIST
54819: LIST
54820: LIST
54821: LIST
54822: LIST
54823: LIST
54824: LIST
54825: LIST
54826: LIST
54827: LIST
54828: LIST
54829: LIST
54830: LIST
54831: LIST
54832: LIST
54833: LIST
54834: LIST
54835: PUSH
54836: EMPTY
54837: LIST
54838: LIST
54839: ST_TO_ADDR
54840: GO 56079
54842: LD_INT 14
54844: DOUBLE
54845: EQUAL
54846: IFTRUE 54850
54848: GO 55074
54850: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
54851: LD_ADDR_VAR 0 2
54855: PUSH
54856: LD_INT 1
54858: PUSH
54859: LD_INT 2
54861: PUSH
54862: LD_INT 3
54864: PUSH
54865: LD_INT 4
54867: PUSH
54868: LD_INT 5
54870: PUSH
54871: LD_INT 6
54873: PUSH
54874: LD_INT 7
54876: PUSH
54877: LD_INT 8
54879: PUSH
54880: LD_INT 9
54882: PUSH
54883: LD_INT 10
54885: PUSH
54886: LD_INT 11
54888: PUSH
54889: LD_INT 12
54891: PUSH
54892: LD_INT 13
54894: PUSH
54895: LD_INT 14
54897: PUSH
54898: LD_INT 15
54900: PUSH
54901: LD_INT 16
54903: PUSH
54904: LD_INT 17
54906: PUSH
54907: LD_INT 18
54909: PUSH
54910: LD_INT 19
54912: PUSH
54913: LD_INT 20
54915: PUSH
54916: LD_INT 21
54918: PUSH
54919: LD_INT 22
54921: PUSH
54922: LD_INT 23
54924: PUSH
54925: LD_INT 24
54927: PUSH
54928: LD_INT 25
54930: PUSH
54931: LD_INT 26
54933: PUSH
54934: LD_INT 27
54936: PUSH
54937: LD_INT 28
54939: PUSH
54940: LD_INT 29
54942: PUSH
54943: LD_INT 30
54945: PUSH
54946: LD_INT 31
54948: PUSH
54949: LD_INT 32
54951: PUSH
54952: LD_INT 33
54954: PUSH
54955: LD_INT 34
54957: PUSH
54958: LD_INT 36
54960: PUSH
54961: EMPTY
54962: LIST
54963: LIST
54964: LIST
54965: LIST
54966: LIST
54967: LIST
54968: LIST
54969: LIST
54970: LIST
54971: LIST
54972: LIST
54973: LIST
54974: LIST
54975: LIST
54976: LIST
54977: LIST
54978: LIST
54979: LIST
54980: LIST
54981: LIST
54982: LIST
54983: LIST
54984: LIST
54985: LIST
54986: LIST
54987: LIST
54988: LIST
54989: LIST
54990: LIST
54991: LIST
54992: LIST
54993: LIST
54994: LIST
54995: LIST
54996: LIST
54997: PUSH
54998: LD_INT 101
55000: PUSH
55001: LD_INT 102
55003: PUSH
55004: LD_INT 103
55006: PUSH
55007: LD_INT 104
55009: PUSH
55010: LD_INT 105
55012: PUSH
55013: LD_INT 106
55015: PUSH
55016: LD_INT 107
55018: PUSH
55019: LD_INT 108
55021: PUSH
55022: LD_INT 109
55024: PUSH
55025: LD_INT 110
55027: PUSH
55028: LD_INT 111
55030: PUSH
55031: LD_INT 112
55033: PUSH
55034: LD_INT 113
55036: PUSH
55037: LD_INT 114
55039: PUSH
55040: LD_INT 116
55042: PUSH
55043: LD_INT 117
55045: PUSH
55046: LD_INT 118
55048: PUSH
55049: EMPTY
55050: LIST
55051: LIST
55052: LIST
55053: LIST
55054: LIST
55055: LIST
55056: LIST
55057: LIST
55058: LIST
55059: LIST
55060: LIST
55061: LIST
55062: LIST
55063: LIST
55064: LIST
55065: LIST
55066: LIST
55067: PUSH
55068: EMPTY
55069: LIST
55070: LIST
55071: ST_TO_ADDR
55072: GO 56079
55074: LD_INT 15
55076: DOUBLE
55077: EQUAL
55078: IFTRUE 55082
55080: GO 55306
55082: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
55083: LD_ADDR_VAR 0 2
55087: PUSH
55088: LD_INT 1
55090: PUSH
55091: LD_INT 2
55093: PUSH
55094: LD_INT 3
55096: PUSH
55097: LD_INT 4
55099: PUSH
55100: LD_INT 5
55102: PUSH
55103: LD_INT 6
55105: PUSH
55106: LD_INT 7
55108: PUSH
55109: LD_INT 8
55111: PUSH
55112: LD_INT 9
55114: PUSH
55115: LD_INT 10
55117: PUSH
55118: LD_INT 11
55120: PUSH
55121: LD_INT 12
55123: PUSH
55124: LD_INT 13
55126: PUSH
55127: LD_INT 14
55129: PUSH
55130: LD_INT 15
55132: PUSH
55133: LD_INT 16
55135: PUSH
55136: LD_INT 17
55138: PUSH
55139: LD_INT 18
55141: PUSH
55142: LD_INT 19
55144: PUSH
55145: LD_INT 20
55147: PUSH
55148: LD_INT 21
55150: PUSH
55151: LD_INT 22
55153: PUSH
55154: LD_INT 23
55156: PUSH
55157: LD_INT 24
55159: PUSH
55160: LD_INT 25
55162: PUSH
55163: LD_INT 26
55165: PUSH
55166: LD_INT 27
55168: PUSH
55169: LD_INT 28
55171: PUSH
55172: LD_INT 29
55174: PUSH
55175: LD_INT 30
55177: PUSH
55178: LD_INT 31
55180: PUSH
55181: LD_INT 32
55183: PUSH
55184: LD_INT 33
55186: PUSH
55187: LD_INT 34
55189: PUSH
55190: LD_INT 36
55192: PUSH
55193: EMPTY
55194: LIST
55195: LIST
55196: LIST
55197: LIST
55198: LIST
55199: LIST
55200: LIST
55201: LIST
55202: LIST
55203: LIST
55204: LIST
55205: LIST
55206: LIST
55207: LIST
55208: LIST
55209: LIST
55210: LIST
55211: LIST
55212: LIST
55213: LIST
55214: LIST
55215: LIST
55216: LIST
55217: LIST
55218: LIST
55219: LIST
55220: LIST
55221: LIST
55222: LIST
55223: LIST
55224: LIST
55225: LIST
55226: LIST
55227: LIST
55228: LIST
55229: PUSH
55230: LD_INT 101
55232: PUSH
55233: LD_INT 102
55235: PUSH
55236: LD_INT 103
55238: PUSH
55239: LD_INT 104
55241: PUSH
55242: LD_INT 105
55244: PUSH
55245: LD_INT 106
55247: PUSH
55248: LD_INT 107
55250: PUSH
55251: LD_INT 108
55253: PUSH
55254: LD_INT 109
55256: PUSH
55257: LD_INT 110
55259: PUSH
55260: LD_INT 111
55262: PUSH
55263: LD_INT 112
55265: PUSH
55266: LD_INT 113
55268: PUSH
55269: LD_INT 114
55271: PUSH
55272: LD_INT 116
55274: PUSH
55275: LD_INT 117
55277: PUSH
55278: LD_INT 118
55280: PUSH
55281: EMPTY
55282: LIST
55283: LIST
55284: LIST
55285: LIST
55286: LIST
55287: LIST
55288: LIST
55289: LIST
55290: LIST
55291: LIST
55292: LIST
55293: LIST
55294: LIST
55295: LIST
55296: LIST
55297: LIST
55298: LIST
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: ST_TO_ADDR
55304: GO 56079
55306: LD_INT 16
55308: DOUBLE
55309: EQUAL
55310: IFTRUE 55314
55312: GO 55450
55314: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
55315: LD_ADDR_VAR 0 2
55319: PUSH
55320: LD_INT 2
55322: PUSH
55323: LD_INT 4
55325: PUSH
55326: LD_INT 5
55328: PUSH
55329: LD_INT 7
55331: PUSH
55332: LD_INT 11
55334: PUSH
55335: LD_INT 12
55337: PUSH
55338: LD_INT 15
55340: PUSH
55341: LD_INT 16
55343: PUSH
55344: LD_INT 20
55346: PUSH
55347: LD_INT 21
55349: PUSH
55350: LD_INT 22
55352: PUSH
55353: LD_INT 23
55355: PUSH
55356: LD_INT 25
55358: PUSH
55359: LD_INT 26
55361: PUSH
55362: LD_INT 30
55364: PUSH
55365: LD_INT 31
55367: PUSH
55368: LD_INT 32
55370: PUSH
55371: LD_INT 33
55373: PUSH
55374: LD_INT 34
55376: PUSH
55377: EMPTY
55378: LIST
55379: LIST
55380: LIST
55381: LIST
55382: LIST
55383: LIST
55384: LIST
55385: LIST
55386: LIST
55387: LIST
55388: LIST
55389: LIST
55390: LIST
55391: LIST
55392: LIST
55393: LIST
55394: LIST
55395: LIST
55396: LIST
55397: PUSH
55398: LD_INT 101
55400: PUSH
55401: LD_INT 102
55403: PUSH
55404: LD_INT 103
55406: PUSH
55407: LD_INT 106
55409: PUSH
55410: LD_INT 108
55412: PUSH
55413: LD_INT 112
55415: PUSH
55416: LD_INT 113
55418: PUSH
55419: LD_INT 114
55421: PUSH
55422: LD_INT 116
55424: PUSH
55425: LD_INT 117
55427: PUSH
55428: LD_INT 118
55430: PUSH
55431: EMPTY
55432: LIST
55433: LIST
55434: LIST
55435: LIST
55436: LIST
55437: LIST
55438: LIST
55439: LIST
55440: LIST
55441: LIST
55442: LIST
55443: PUSH
55444: EMPTY
55445: LIST
55446: LIST
55447: ST_TO_ADDR
55448: GO 56079
55450: LD_INT 17
55452: DOUBLE
55453: EQUAL
55454: IFTRUE 55458
55456: GO 55682
55458: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
55459: LD_ADDR_VAR 0 2
55463: PUSH
55464: LD_INT 1
55466: PUSH
55467: LD_INT 2
55469: PUSH
55470: LD_INT 3
55472: PUSH
55473: LD_INT 4
55475: PUSH
55476: LD_INT 5
55478: PUSH
55479: LD_INT 6
55481: PUSH
55482: LD_INT 7
55484: PUSH
55485: LD_INT 8
55487: PUSH
55488: LD_INT 9
55490: PUSH
55491: LD_INT 10
55493: PUSH
55494: LD_INT 11
55496: PUSH
55497: LD_INT 12
55499: PUSH
55500: LD_INT 13
55502: PUSH
55503: LD_INT 14
55505: PUSH
55506: LD_INT 15
55508: PUSH
55509: LD_INT 16
55511: PUSH
55512: LD_INT 17
55514: PUSH
55515: LD_INT 18
55517: PUSH
55518: LD_INT 19
55520: PUSH
55521: LD_INT 20
55523: PUSH
55524: LD_INT 21
55526: PUSH
55527: LD_INT 22
55529: PUSH
55530: LD_INT 23
55532: PUSH
55533: LD_INT 24
55535: PUSH
55536: LD_INT 25
55538: PUSH
55539: LD_INT 26
55541: PUSH
55542: LD_INT 27
55544: PUSH
55545: LD_INT 28
55547: PUSH
55548: LD_INT 29
55550: PUSH
55551: LD_INT 30
55553: PUSH
55554: LD_INT 31
55556: PUSH
55557: LD_INT 32
55559: PUSH
55560: LD_INT 33
55562: PUSH
55563: LD_INT 34
55565: PUSH
55566: LD_INT 36
55568: PUSH
55569: EMPTY
55570: LIST
55571: LIST
55572: LIST
55573: LIST
55574: LIST
55575: LIST
55576: LIST
55577: LIST
55578: LIST
55579: LIST
55580: LIST
55581: LIST
55582: LIST
55583: LIST
55584: LIST
55585: LIST
55586: LIST
55587: LIST
55588: LIST
55589: LIST
55590: LIST
55591: LIST
55592: LIST
55593: LIST
55594: LIST
55595: LIST
55596: LIST
55597: LIST
55598: LIST
55599: LIST
55600: LIST
55601: LIST
55602: LIST
55603: LIST
55604: LIST
55605: PUSH
55606: LD_INT 101
55608: PUSH
55609: LD_INT 102
55611: PUSH
55612: LD_INT 103
55614: PUSH
55615: LD_INT 104
55617: PUSH
55618: LD_INT 105
55620: PUSH
55621: LD_INT 106
55623: PUSH
55624: LD_INT 107
55626: PUSH
55627: LD_INT 108
55629: PUSH
55630: LD_INT 109
55632: PUSH
55633: LD_INT 110
55635: PUSH
55636: LD_INT 111
55638: PUSH
55639: LD_INT 112
55641: PUSH
55642: LD_INT 113
55644: PUSH
55645: LD_INT 114
55647: PUSH
55648: LD_INT 116
55650: PUSH
55651: LD_INT 117
55653: PUSH
55654: LD_INT 118
55656: PUSH
55657: EMPTY
55658: LIST
55659: LIST
55660: LIST
55661: LIST
55662: LIST
55663: LIST
55664: LIST
55665: LIST
55666: LIST
55667: LIST
55668: LIST
55669: LIST
55670: LIST
55671: LIST
55672: LIST
55673: LIST
55674: LIST
55675: PUSH
55676: EMPTY
55677: LIST
55678: LIST
55679: ST_TO_ADDR
55680: GO 56079
55682: LD_INT 18
55684: DOUBLE
55685: EQUAL
55686: IFTRUE 55690
55688: GO 55838
55690: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
55691: LD_ADDR_VAR 0 2
55695: PUSH
55696: LD_INT 2
55698: PUSH
55699: LD_INT 4
55701: PUSH
55702: LD_INT 5
55704: PUSH
55705: LD_INT 7
55707: PUSH
55708: LD_INT 11
55710: PUSH
55711: LD_INT 12
55713: PUSH
55714: LD_INT 15
55716: PUSH
55717: LD_INT 16
55719: PUSH
55720: LD_INT 20
55722: PUSH
55723: LD_INT 21
55725: PUSH
55726: LD_INT 22
55728: PUSH
55729: LD_INT 23
55731: PUSH
55732: LD_INT 25
55734: PUSH
55735: LD_INT 26
55737: PUSH
55738: LD_INT 30
55740: PUSH
55741: LD_INT 31
55743: PUSH
55744: LD_INT 32
55746: PUSH
55747: LD_INT 33
55749: PUSH
55750: LD_INT 34
55752: PUSH
55753: LD_INT 35
55755: PUSH
55756: LD_INT 36
55758: PUSH
55759: EMPTY
55760: LIST
55761: LIST
55762: LIST
55763: LIST
55764: LIST
55765: LIST
55766: LIST
55767: LIST
55768: LIST
55769: LIST
55770: LIST
55771: LIST
55772: LIST
55773: LIST
55774: LIST
55775: LIST
55776: LIST
55777: LIST
55778: LIST
55779: LIST
55780: LIST
55781: PUSH
55782: LD_INT 101
55784: PUSH
55785: LD_INT 102
55787: PUSH
55788: LD_INT 103
55790: PUSH
55791: LD_INT 106
55793: PUSH
55794: LD_INT 108
55796: PUSH
55797: LD_INT 112
55799: PUSH
55800: LD_INT 113
55802: PUSH
55803: LD_INT 114
55805: PUSH
55806: LD_INT 115
55808: PUSH
55809: LD_INT 116
55811: PUSH
55812: LD_INT 117
55814: PUSH
55815: LD_INT 118
55817: PUSH
55818: EMPTY
55819: LIST
55820: LIST
55821: LIST
55822: LIST
55823: LIST
55824: LIST
55825: LIST
55826: LIST
55827: LIST
55828: LIST
55829: LIST
55830: LIST
55831: PUSH
55832: EMPTY
55833: LIST
55834: LIST
55835: ST_TO_ADDR
55836: GO 56079
55838: LD_INT 19
55840: DOUBLE
55841: EQUAL
55842: IFTRUE 55846
55844: GO 56078
55846: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
55847: LD_ADDR_VAR 0 2
55851: PUSH
55852: LD_INT 1
55854: PUSH
55855: LD_INT 2
55857: PUSH
55858: LD_INT 3
55860: PUSH
55861: LD_INT 4
55863: PUSH
55864: LD_INT 5
55866: PUSH
55867: LD_INT 6
55869: PUSH
55870: LD_INT 7
55872: PUSH
55873: LD_INT 8
55875: PUSH
55876: LD_INT 9
55878: PUSH
55879: LD_INT 10
55881: PUSH
55882: LD_INT 11
55884: PUSH
55885: LD_INT 12
55887: PUSH
55888: LD_INT 13
55890: PUSH
55891: LD_INT 14
55893: PUSH
55894: LD_INT 15
55896: PUSH
55897: LD_INT 16
55899: PUSH
55900: LD_INT 17
55902: PUSH
55903: LD_INT 18
55905: PUSH
55906: LD_INT 19
55908: PUSH
55909: LD_INT 20
55911: PUSH
55912: LD_INT 21
55914: PUSH
55915: LD_INT 22
55917: PUSH
55918: LD_INT 23
55920: PUSH
55921: LD_INT 24
55923: PUSH
55924: LD_INT 25
55926: PUSH
55927: LD_INT 26
55929: PUSH
55930: LD_INT 27
55932: PUSH
55933: LD_INT 28
55935: PUSH
55936: LD_INT 29
55938: PUSH
55939: LD_INT 30
55941: PUSH
55942: LD_INT 31
55944: PUSH
55945: LD_INT 32
55947: PUSH
55948: LD_INT 33
55950: PUSH
55951: LD_INT 34
55953: PUSH
55954: LD_INT 35
55956: PUSH
55957: LD_INT 36
55959: PUSH
55960: EMPTY
55961: LIST
55962: LIST
55963: LIST
55964: LIST
55965: LIST
55966: LIST
55967: LIST
55968: LIST
55969: LIST
55970: LIST
55971: LIST
55972: LIST
55973: LIST
55974: LIST
55975: LIST
55976: LIST
55977: LIST
55978: LIST
55979: LIST
55980: LIST
55981: LIST
55982: LIST
55983: LIST
55984: LIST
55985: LIST
55986: LIST
55987: LIST
55988: LIST
55989: LIST
55990: LIST
55991: LIST
55992: LIST
55993: LIST
55994: LIST
55995: LIST
55996: LIST
55997: PUSH
55998: LD_INT 101
56000: PUSH
56001: LD_INT 102
56003: PUSH
56004: LD_INT 103
56006: PUSH
56007: LD_INT 104
56009: PUSH
56010: LD_INT 105
56012: PUSH
56013: LD_INT 106
56015: PUSH
56016: LD_INT 107
56018: PUSH
56019: LD_INT 108
56021: PUSH
56022: LD_INT 109
56024: PUSH
56025: LD_INT 110
56027: PUSH
56028: LD_INT 111
56030: PUSH
56031: LD_INT 112
56033: PUSH
56034: LD_INT 113
56036: PUSH
56037: LD_INT 114
56039: PUSH
56040: LD_INT 115
56042: PUSH
56043: LD_INT 116
56045: PUSH
56046: LD_INT 117
56048: PUSH
56049: LD_INT 118
56051: PUSH
56052: EMPTY
56053: LIST
56054: LIST
56055: LIST
56056: LIST
56057: LIST
56058: LIST
56059: LIST
56060: LIST
56061: LIST
56062: LIST
56063: LIST
56064: LIST
56065: LIST
56066: LIST
56067: LIST
56068: LIST
56069: LIST
56070: LIST
56071: PUSH
56072: EMPTY
56073: LIST
56074: LIST
56075: ST_TO_ADDR
56076: GO 56079
56078: POP
// end else
56079: GO 56310
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
56081: LD_ADDR_VAR 0 2
56085: PUSH
56086: LD_INT 1
56088: PUSH
56089: LD_INT 2
56091: PUSH
56092: LD_INT 3
56094: PUSH
56095: LD_INT 4
56097: PUSH
56098: LD_INT 5
56100: PUSH
56101: LD_INT 6
56103: PUSH
56104: LD_INT 7
56106: PUSH
56107: LD_INT 8
56109: PUSH
56110: LD_INT 9
56112: PUSH
56113: LD_INT 10
56115: PUSH
56116: LD_INT 11
56118: PUSH
56119: LD_INT 12
56121: PUSH
56122: LD_INT 13
56124: PUSH
56125: LD_INT 14
56127: PUSH
56128: LD_INT 15
56130: PUSH
56131: LD_INT 16
56133: PUSH
56134: LD_INT 17
56136: PUSH
56137: LD_INT 18
56139: PUSH
56140: LD_INT 19
56142: PUSH
56143: LD_INT 20
56145: PUSH
56146: LD_INT 21
56148: PUSH
56149: LD_INT 22
56151: PUSH
56152: LD_INT 23
56154: PUSH
56155: LD_INT 24
56157: PUSH
56158: LD_INT 25
56160: PUSH
56161: LD_INT 26
56163: PUSH
56164: LD_INT 27
56166: PUSH
56167: LD_INT 28
56169: PUSH
56170: LD_INT 29
56172: PUSH
56173: LD_INT 30
56175: PUSH
56176: LD_INT 31
56178: PUSH
56179: LD_INT 32
56181: PUSH
56182: LD_INT 33
56184: PUSH
56185: LD_INT 34
56187: PUSH
56188: LD_INT 35
56190: PUSH
56191: LD_INT 36
56193: PUSH
56194: EMPTY
56195: LIST
56196: LIST
56197: LIST
56198: LIST
56199: LIST
56200: LIST
56201: LIST
56202: LIST
56203: LIST
56204: LIST
56205: LIST
56206: LIST
56207: LIST
56208: LIST
56209: LIST
56210: LIST
56211: LIST
56212: LIST
56213: LIST
56214: LIST
56215: LIST
56216: LIST
56217: LIST
56218: LIST
56219: LIST
56220: LIST
56221: LIST
56222: LIST
56223: LIST
56224: LIST
56225: LIST
56226: LIST
56227: LIST
56228: LIST
56229: LIST
56230: LIST
56231: PUSH
56232: LD_INT 101
56234: PUSH
56235: LD_INT 102
56237: PUSH
56238: LD_INT 103
56240: PUSH
56241: LD_INT 104
56243: PUSH
56244: LD_INT 105
56246: PUSH
56247: LD_INT 106
56249: PUSH
56250: LD_INT 107
56252: PUSH
56253: LD_INT 108
56255: PUSH
56256: LD_INT 109
56258: PUSH
56259: LD_INT 110
56261: PUSH
56262: LD_INT 111
56264: PUSH
56265: LD_INT 112
56267: PUSH
56268: LD_INT 113
56270: PUSH
56271: LD_INT 114
56273: PUSH
56274: LD_INT 115
56276: PUSH
56277: LD_INT 116
56279: PUSH
56280: LD_INT 117
56282: PUSH
56283: LD_INT 118
56285: PUSH
56286: EMPTY
56287: LIST
56288: LIST
56289: LIST
56290: LIST
56291: LIST
56292: LIST
56293: LIST
56294: LIST
56295: LIST
56296: LIST
56297: LIST
56298: LIST
56299: LIST
56300: LIST
56301: LIST
56302: LIST
56303: LIST
56304: LIST
56305: PUSH
56306: EMPTY
56307: LIST
56308: LIST
56309: ST_TO_ADDR
// if result then
56310: LD_VAR 0 2
56314: IFFALSE 57100
// begin normal :=  ;
56316: LD_ADDR_VAR 0 5
56320: PUSH
56321: LD_STRING 
56323: ST_TO_ADDR
// hardcore :=  ;
56324: LD_ADDR_VAR 0 6
56328: PUSH
56329: LD_STRING 
56331: ST_TO_ADDR
// active :=  ;
56332: LD_ADDR_VAR 0 7
56336: PUSH
56337: LD_STRING 
56339: ST_TO_ADDR
// for i = 1 to normalCounter do
56340: LD_ADDR_VAR 0 8
56344: PUSH
56345: DOUBLE
56346: LD_INT 1
56348: DEC
56349: ST_TO_ADDR
56350: LD_EXP 40
56354: PUSH
56355: FOR_TO
56356: IFFALSE 56457
// begin tmp := 0 ;
56358: LD_ADDR_VAR 0 3
56362: PUSH
56363: LD_STRING 0
56365: ST_TO_ADDR
// if result [ 1 ] then
56366: LD_VAR 0 2
56370: PUSH
56371: LD_INT 1
56373: ARRAY
56374: IFFALSE 56439
// if result [ 1 ] [ 1 ] = i then
56376: LD_VAR 0 2
56380: PUSH
56381: LD_INT 1
56383: ARRAY
56384: PUSH
56385: LD_INT 1
56387: ARRAY
56388: PUSH
56389: LD_VAR 0 8
56393: EQUAL
56394: IFFALSE 56439
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
56396: LD_ADDR_VAR 0 2
56400: PUSH
56401: LD_VAR 0 2
56405: PPUSH
56406: LD_INT 1
56408: PPUSH
56409: LD_VAR 0 2
56413: PUSH
56414: LD_INT 1
56416: ARRAY
56417: PPUSH
56418: LD_INT 1
56420: PPUSH
56421: CALL_OW 3
56425: PPUSH
56426: CALL_OW 1
56430: ST_TO_ADDR
// tmp := 1 ;
56431: LD_ADDR_VAR 0 3
56435: PUSH
56436: LD_STRING 1
56438: ST_TO_ADDR
// end ; normal := normal & tmp ;
56439: LD_ADDR_VAR 0 5
56443: PUSH
56444: LD_VAR 0 5
56448: PUSH
56449: LD_VAR 0 3
56453: STR
56454: ST_TO_ADDR
// end ;
56455: GO 56355
56457: POP
56458: POP
// for i = 1 to hardcoreCounter do
56459: LD_ADDR_VAR 0 8
56463: PUSH
56464: DOUBLE
56465: LD_INT 1
56467: DEC
56468: ST_TO_ADDR
56469: LD_EXP 41
56473: PUSH
56474: FOR_TO
56475: IFFALSE 56580
// begin tmp := 0 ;
56477: LD_ADDR_VAR 0 3
56481: PUSH
56482: LD_STRING 0
56484: ST_TO_ADDR
// if result [ 2 ] then
56485: LD_VAR 0 2
56489: PUSH
56490: LD_INT 2
56492: ARRAY
56493: IFFALSE 56562
// if result [ 2 ] [ 1 ] = 100 + i then
56495: LD_VAR 0 2
56499: PUSH
56500: LD_INT 2
56502: ARRAY
56503: PUSH
56504: LD_INT 1
56506: ARRAY
56507: PUSH
56508: LD_INT 100
56510: PUSH
56511: LD_VAR 0 8
56515: PLUS
56516: EQUAL
56517: IFFALSE 56562
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
56519: LD_ADDR_VAR 0 2
56523: PUSH
56524: LD_VAR 0 2
56528: PPUSH
56529: LD_INT 2
56531: PPUSH
56532: LD_VAR 0 2
56536: PUSH
56537: LD_INT 2
56539: ARRAY
56540: PPUSH
56541: LD_INT 1
56543: PPUSH
56544: CALL_OW 3
56548: PPUSH
56549: CALL_OW 1
56553: ST_TO_ADDR
// tmp := 1 ;
56554: LD_ADDR_VAR 0 3
56558: PUSH
56559: LD_STRING 1
56561: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
56562: LD_ADDR_VAR 0 6
56566: PUSH
56567: LD_VAR 0 6
56571: PUSH
56572: LD_VAR 0 3
56576: STR
56577: ST_TO_ADDR
// end ;
56578: GO 56474
56580: POP
56581: POP
// if isGameLoad then
56582: LD_VAR 0 1
56586: IFFALSE 57061
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
56588: LD_ADDR_VAR 0 4
56592: PUSH
56593: LD_EXP 44
56597: PUSH
56598: LD_EXP 43
56602: PUSH
56603: LD_EXP 45
56607: PUSH
56608: LD_EXP 42
56612: PUSH
56613: LD_EXP 46
56617: PUSH
56618: LD_EXP 47
56622: PUSH
56623: LD_EXP 48
56627: PUSH
56628: LD_EXP 49
56632: PUSH
56633: LD_EXP 50
56637: PUSH
56638: LD_EXP 51
56642: PUSH
56643: LD_EXP 52
56647: PUSH
56648: LD_EXP 53
56652: PUSH
56653: LD_EXP 54
56657: PUSH
56658: LD_EXP 55
56662: PUSH
56663: LD_EXP 63
56667: PUSH
56668: LD_EXP 64
56672: PUSH
56673: LD_EXP 65
56677: PUSH
56678: LD_EXP 66
56682: PUSH
56683: LD_EXP 68
56687: PUSH
56688: LD_EXP 69
56692: PUSH
56693: LD_EXP 70
56697: PUSH
56698: LD_EXP 73
56702: PUSH
56703: LD_EXP 75
56707: PUSH
56708: LD_EXP 76
56712: PUSH
56713: LD_EXP 77
56717: PUSH
56718: LD_EXP 79
56722: PUSH
56723: LD_EXP 80
56727: PUSH
56728: LD_EXP 83
56732: PUSH
56733: LD_EXP 84
56737: PUSH
56738: LD_EXP 85
56742: PUSH
56743: LD_EXP 86
56747: PUSH
56748: LD_EXP 87
56752: PUSH
56753: LD_EXP 88
56757: PUSH
56758: LD_EXP 89
56762: PUSH
56763: LD_EXP 90
56767: PUSH
56768: LD_EXP 91
56772: PUSH
56773: LD_EXP 56
56777: PUSH
56778: LD_EXP 57
56782: PUSH
56783: LD_EXP 60
56787: PUSH
56788: LD_EXP 61
56792: PUSH
56793: LD_EXP 62
56797: PUSH
56798: LD_EXP 58
56802: PUSH
56803: LD_EXP 59
56807: PUSH
56808: LD_EXP 67
56812: PUSH
56813: LD_EXP 71
56817: PUSH
56818: LD_EXP 72
56822: PUSH
56823: LD_EXP 74
56827: PUSH
56828: LD_EXP 78
56832: PUSH
56833: LD_EXP 81
56837: PUSH
56838: LD_EXP 82
56842: PUSH
56843: LD_EXP 92
56847: PUSH
56848: LD_EXP 93
56852: PUSH
56853: LD_EXP 94
56857: PUSH
56858: LD_EXP 95
56862: PUSH
56863: EMPTY
56864: LIST
56865: LIST
56866: LIST
56867: LIST
56868: LIST
56869: LIST
56870: LIST
56871: LIST
56872: LIST
56873: LIST
56874: LIST
56875: LIST
56876: LIST
56877: LIST
56878: LIST
56879: LIST
56880: LIST
56881: LIST
56882: LIST
56883: LIST
56884: LIST
56885: LIST
56886: LIST
56887: LIST
56888: LIST
56889: LIST
56890: LIST
56891: LIST
56892: LIST
56893: LIST
56894: LIST
56895: LIST
56896: LIST
56897: LIST
56898: LIST
56899: LIST
56900: LIST
56901: LIST
56902: LIST
56903: LIST
56904: LIST
56905: LIST
56906: LIST
56907: LIST
56908: LIST
56909: LIST
56910: LIST
56911: LIST
56912: LIST
56913: LIST
56914: LIST
56915: LIST
56916: LIST
56917: LIST
56918: ST_TO_ADDR
// tmp :=  ;
56919: LD_ADDR_VAR 0 3
56923: PUSH
56924: LD_STRING 
56926: ST_TO_ADDR
// for i = 1 to normalCounter do
56927: LD_ADDR_VAR 0 8
56931: PUSH
56932: DOUBLE
56933: LD_INT 1
56935: DEC
56936: ST_TO_ADDR
56937: LD_EXP 40
56941: PUSH
56942: FOR_TO
56943: IFFALSE 56979
// begin if flags [ i ] then
56945: LD_VAR 0 4
56949: PUSH
56950: LD_VAR 0 8
56954: ARRAY
56955: IFFALSE 56977
// tmp := tmp & i & ; ;
56957: LD_ADDR_VAR 0 3
56961: PUSH
56962: LD_VAR 0 3
56966: PUSH
56967: LD_VAR 0 8
56971: STR
56972: PUSH
56973: LD_STRING ;
56975: STR
56976: ST_TO_ADDR
// end ;
56977: GO 56942
56979: POP
56980: POP
// for i = 1 to hardcoreCounter do
56981: LD_ADDR_VAR 0 8
56985: PUSH
56986: DOUBLE
56987: LD_INT 1
56989: DEC
56990: ST_TO_ADDR
56991: LD_EXP 41
56995: PUSH
56996: FOR_TO
56997: IFFALSE 57043
// begin if flags [ normalCounter + i ] then
56999: LD_VAR 0 4
57003: PUSH
57004: LD_EXP 40
57008: PUSH
57009: LD_VAR 0 8
57013: PLUS
57014: ARRAY
57015: IFFALSE 57041
// tmp := tmp & ( 100 + i ) & ; ;
57017: LD_ADDR_VAR 0 3
57021: PUSH
57022: LD_VAR 0 3
57026: PUSH
57027: LD_INT 100
57029: PUSH
57030: LD_VAR 0 8
57034: PLUS
57035: STR
57036: PUSH
57037: LD_STRING ;
57039: STR
57040: ST_TO_ADDR
// end ;
57041: GO 56996
57043: POP
57044: POP
// if tmp then
57045: LD_VAR 0 3
57049: IFFALSE 57061
// active := tmp ;
57051: LD_ADDR_VAR 0 7
57055: PUSH
57056: LD_VAR 0 3
57060: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
57061: LD_STRING getStreamItemsFromMission("
57063: PUSH
57064: LD_VAR 0 5
57068: STR
57069: PUSH
57070: LD_STRING ","
57072: STR
57073: PUSH
57074: LD_VAR 0 6
57078: STR
57079: PUSH
57080: LD_STRING ","
57082: STR
57083: PUSH
57084: LD_VAR 0 7
57088: STR
57089: PUSH
57090: LD_STRING ")
57092: STR
57093: PPUSH
57094: CALL_OW 559
// end else
57098: GO 57107
// ToLua ( getStreamItemsFromMission("","","") ) ;
57100: LD_STRING getStreamItemsFromMission("","","")
57102: PPUSH
57103: CALL_OW 559
// end ;
57107: LD_VAR 0 2
57111: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
57112: LD_EXP 39
57116: PUSH
57117: LD_EXP 44
57121: AND
57122: IFFALSE 57246
57124: GO 57126
57126: DISABLE
57127: LD_INT 0
57129: PPUSH
57130: PPUSH
// begin enable ;
57131: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
57132: LD_ADDR_VAR 0 2
57136: PUSH
57137: LD_INT 22
57139: PUSH
57140: LD_OWVAR 2
57144: PUSH
57145: EMPTY
57146: LIST
57147: LIST
57148: PUSH
57149: LD_INT 2
57151: PUSH
57152: LD_INT 34
57154: PUSH
57155: LD_INT 7
57157: PUSH
57158: EMPTY
57159: LIST
57160: LIST
57161: PUSH
57162: LD_INT 34
57164: PUSH
57165: LD_INT 45
57167: PUSH
57168: EMPTY
57169: LIST
57170: LIST
57171: PUSH
57172: LD_INT 34
57174: PUSH
57175: LD_INT 28
57177: PUSH
57178: EMPTY
57179: LIST
57180: LIST
57181: PUSH
57182: LD_INT 34
57184: PUSH
57185: LD_INT 47
57187: PUSH
57188: EMPTY
57189: LIST
57190: LIST
57191: PUSH
57192: EMPTY
57193: LIST
57194: LIST
57195: LIST
57196: LIST
57197: LIST
57198: PUSH
57199: EMPTY
57200: LIST
57201: LIST
57202: PPUSH
57203: CALL_OW 69
57207: ST_TO_ADDR
// if not tmp then
57208: LD_VAR 0 2
57212: NOT
57213: IFFALSE 57217
// exit ;
57215: GO 57246
// for i in tmp do
57217: LD_ADDR_VAR 0 1
57221: PUSH
57222: LD_VAR 0 2
57226: PUSH
57227: FOR_IN
57228: IFFALSE 57244
// begin SetLives ( i , 0 ) ;
57230: LD_VAR 0 1
57234: PPUSH
57235: LD_INT 0
57237: PPUSH
57238: CALL_OW 234
// end ;
57242: GO 57227
57244: POP
57245: POP
// end ;
57246: PPOPN 2
57248: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
57249: LD_EXP 39
57253: PUSH
57254: LD_EXP 45
57258: AND
57259: IFFALSE 57343
57261: GO 57263
57263: DISABLE
57264: LD_INT 0
57266: PPUSH
57267: PPUSH
// begin enable ;
57268: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
57269: LD_ADDR_VAR 0 2
57273: PUSH
57274: LD_INT 22
57276: PUSH
57277: LD_OWVAR 2
57281: PUSH
57282: EMPTY
57283: LIST
57284: LIST
57285: PUSH
57286: LD_INT 32
57288: PUSH
57289: LD_INT 3
57291: PUSH
57292: EMPTY
57293: LIST
57294: LIST
57295: PUSH
57296: EMPTY
57297: LIST
57298: LIST
57299: PPUSH
57300: CALL_OW 69
57304: ST_TO_ADDR
// if not tmp then
57305: LD_VAR 0 2
57309: NOT
57310: IFFALSE 57314
// exit ;
57312: GO 57343
// for i in tmp do
57314: LD_ADDR_VAR 0 1
57318: PUSH
57319: LD_VAR 0 2
57323: PUSH
57324: FOR_IN
57325: IFFALSE 57341
// begin SetLives ( i , 0 ) ;
57327: LD_VAR 0 1
57331: PPUSH
57332: LD_INT 0
57334: PPUSH
57335: CALL_OW 234
// end ;
57339: GO 57324
57341: POP
57342: POP
// end ;
57343: PPOPN 2
57345: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
57346: LD_EXP 39
57350: PUSH
57351: LD_EXP 42
57355: AND
57356: IFFALSE 57449
57358: GO 57360
57360: DISABLE
57361: LD_INT 0
57363: PPUSH
// begin enable ;
57364: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
57365: LD_ADDR_VAR 0 1
57369: PUSH
57370: LD_INT 22
57372: PUSH
57373: LD_OWVAR 2
57377: PUSH
57378: EMPTY
57379: LIST
57380: LIST
57381: PUSH
57382: LD_INT 2
57384: PUSH
57385: LD_INT 25
57387: PUSH
57388: LD_INT 5
57390: PUSH
57391: EMPTY
57392: LIST
57393: LIST
57394: PUSH
57395: LD_INT 25
57397: PUSH
57398: LD_INT 9
57400: PUSH
57401: EMPTY
57402: LIST
57403: LIST
57404: PUSH
57405: LD_INT 25
57407: PUSH
57408: LD_INT 8
57410: PUSH
57411: EMPTY
57412: LIST
57413: LIST
57414: PUSH
57415: EMPTY
57416: LIST
57417: LIST
57418: LIST
57419: LIST
57420: PUSH
57421: EMPTY
57422: LIST
57423: LIST
57424: PPUSH
57425: CALL_OW 69
57429: PUSH
57430: FOR_IN
57431: IFFALSE 57447
// begin SetClass ( i , 1 ) ;
57433: LD_VAR 0 1
57437: PPUSH
57438: LD_INT 1
57440: PPUSH
57441: CALL_OW 336
// end ;
57445: GO 57430
57447: POP
57448: POP
// end ;
57449: PPOPN 1
57451: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
57452: LD_EXP 39
57456: PUSH
57457: LD_EXP 43
57461: AND
57462: PUSH
57463: LD_OWVAR 65
57467: PUSH
57468: LD_INT 7
57470: LESS
57471: AND
57472: IFFALSE 57486
57474: GO 57476
57476: DISABLE
// begin enable ;
57477: ENABLE
// game_speed := 7 ;
57478: LD_ADDR_OWVAR 65
57482: PUSH
57483: LD_INT 7
57485: ST_TO_ADDR
// end ;
57486: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
57487: LD_EXP 39
57491: PUSH
57492: LD_EXP 46
57496: AND
57497: IFFALSE 57699
57499: GO 57501
57501: DISABLE
57502: LD_INT 0
57504: PPUSH
57505: PPUSH
57506: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
57507: LD_ADDR_VAR 0 3
57511: PUSH
57512: LD_INT 81
57514: PUSH
57515: LD_OWVAR 2
57519: PUSH
57520: EMPTY
57521: LIST
57522: LIST
57523: PUSH
57524: LD_INT 21
57526: PUSH
57527: LD_INT 1
57529: PUSH
57530: EMPTY
57531: LIST
57532: LIST
57533: PUSH
57534: EMPTY
57535: LIST
57536: LIST
57537: PPUSH
57538: CALL_OW 69
57542: ST_TO_ADDR
// if not tmp then
57543: LD_VAR 0 3
57547: NOT
57548: IFFALSE 57552
// exit ;
57550: GO 57699
// if tmp > 5 then
57552: LD_VAR 0 3
57556: PUSH
57557: LD_INT 5
57559: GREATER
57560: IFFALSE 57572
// k := 5 else
57562: LD_ADDR_VAR 0 2
57566: PUSH
57567: LD_INT 5
57569: ST_TO_ADDR
57570: GO 57582
// k := tmp ;
57572: LD_ADDR_VAR 0 2
57576: PUSH
57577: LD_VAR 0 3
57581: ST_TO_ADDR
// for i := 1 to k do
57582: LD_ADDR_VAR 0 1
57586: PUSH
57587: DOUBLE
57588: LD_INT 1
57590: DEC
57591: ST_TO_ADDR
57592: LD_VAR 0 2
57596: PUSH
57597: FOR_TO
57598: IFFALSE 57697
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
57600: LD_VAR 0 3
57604: PUSH
57605: LD_VAR 0 1
57609: ARRAY
57610: PPUSH
57611: LD_VAR 0 1
57615: PUSH
57616: LD_INT 4
57618: MOD
57619: PUSH
57620: LD_INT 1
57622: PLUS
57623: PPUSH
57624: CALL_OW 259
57628: PUSH
57629: LD_INT 10
57631: LESS
57632: IFFALSE 57695
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
57634: LD_VAR 0 3
57638: PUSH
57639: LD_VAR 0 1
57643: ARRAY
57644: PPUSH
57645: LD_VAR 0 1
57649: PUSH
57650: LD_INT 4
57652: MOD
57653: PUSH
57654: LD_INT 1
57656: PLUS
57657: PPUSH
57658: LD_VAR 0 3
57662: PUSH
57663: LD_VAR 0 1
57667: ARRAY
57668: PPUSH
57669: LD_VAR 0 1
57673: PUSH
57674: LD_INT 4
57676: MOD
57677: PUSH
57678: LD_INT 1
57680: PLUS
57681: PPUSH
57682: CALL_OW 259
57686: PUSH
57687: LD_INT 1
57689: PLUS
57690: PPUSH
57691: CALL_OW 237
57695: GO 57597
57697: POP
57698: POP
// end ;
57699: PPOPN 3
57701: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
57702: LD_EXP 39
57706: PUSH
57707: LD_EXP 47
57711: AND
57712: IFFALSE 57732
57714: GO 57716
57716: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
57717: LD_INT 4
57719: PPUSH
57720: LD_OWVAR 2
57724: PPUSH
57725: LD_INT 0
57727: PPUSH
57728: CALL_OW 324
57732: END
// every 0 0$1 trigger StreamModeActive and sShovel do
57733: LD_EXP 39
57737: PUSH
57738: LD_EXP 76
57742: AND
57743: IFFALSE 57763
57745: GO 57747
57747: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
57748: LD_INT 19
57750: PPUSH
57751: LD_OWVAR 2
57755: PPUSH
57756: LD_INT 0
57758: PPUSH
57759: CALL_OW 324
57763: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
57764: LD_EXP 39
57768: PUSH
57769: LD_EXP 48
57773: AND
57774: IFFALSE 57876
57776: GO 57778
57778: DISABLE
57779: LD_INT 0
57781: PPUSH
57782: PPUSH
// begin enable ;
57783: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
57784: LD_ADDR_VAR 0 2
57788: PUSH
57789: LD_INT 22
57791: PUSH
57792: LD_OWVAR 2
57796: PUSH
57797: EMPTY
57798: LIST
57799: LIST
57800: PUSH
57801: LD_INT 2
57803: PUSH
57804: LD_INT 34
57806: PUSH
57807: LD_INT 11
57809: PUSH
57810: EMPTY
57811: LIST
57812: LIST
57813: PUSH
57814: LD_INT 34
57816: PUSH
57817: LD_INT 30
57819: PUSH
57820: EMPTY
57821: LIST
57822: LIST
57823: PUSH
57824: EMPTY
57825: LIST
57826: LIST
57827: LIST
57828: PUSH
57829: EMPTY
57830: LIST
57831: LIST
57832: PPUSH
57833: CALL_OW 69
57837: ST_TO_ADDR
// if not tmp then
57838: LD_VAR 0 2
57842: NOT
57843: IFFALSE 57847
// exit ;
57845: GO 57876
// for i in tmp do
57847: LD_ADDR_VAR 0 1
57851: PUSH
57852: LD_VAR 0 2
57856: PUSH
57857: FOR_IN
57858: IFFALSE 57874
// begin SetLives ( i , 0 ) ;
57860: LD_VAR 0 1
57864: PPUSH
57865: LD_INT 0
57867: PPUSH
57868: CALL_OW 234
// end ;
57872: GO 57857
57874: POP
57875: POP
// end ;
57876: PPOPN 2
57878: END
// every 0 0$1 trigger StreamModeActive and sBunker do
57879: LD_EXP 39
57883: PUSH
57884: LD_EXP 49
57888: AND
57889: IFFALSE 57909
57891: GO 57893
57893: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
57894: LD_INT 32
57896: PPUSH
57897: LD_OWVAR 2
57901: PPUSH
57902: LD_INT 0
57904: PPUSH
57905: CALL_OW 324
57909: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
57910: LD_EXP 39
57914: PUSH
57915: LD_EXP 50
57919: AND
57920: IFFALSE 58101
57922: GO 57924
57924: DISABLE
57925: LD_INT 0
57927: PPUSH
57928: PPUSH
57929: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
57930: LD_ADDR_VAR 0 2
57934: PUSH
57935: LD_INT 22
57937: PUSH
57938: LD_OWVAR 2
57942: PUSH
57943: EMPTY
57944: LIST
57945: LIST
57946: PUSH
57947: LD_INT 33
57949: PUSH
57950: LD_INT 3
57952: PUSH
57953: EMPTY
57954: LIST
57955: LIST
57956: PUSH
57957: EMPTY
57958: LIST
57959: LIST
57960: PPUSH
57961: CALL_OW 69
57965: ST_TO_ADDR
// if not tmp then
57966: LD_VAR 0 2
57970: NOT
57971: IFFALSE 57975
// exit ;
57973: GO 58101
// side := 0 ;
57975: LD_ADDR_VAR 0 3
57979: PUSH
57980: LD_INT 0
57982: ST_TO_ADDR
// for i := 1 to 8 do
57983: LD_ADDR_VAR 0 1
57987: PUSH
57988: DOUBLE
57989: LD_INT 1
57991: DEC
57992: ST_TO_ADDR
57993: LD_INT 8
57995: PUSH
57996: FOR_TO
57997: IFFALSE 58045
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
57999: LD_OWVAR 2
58003: PUSH
58004: LD_VAR 0 1
58008: NONEQUAL
58009: PUSH
58010: LD_OWVAR 2
58014: PPUSH
58015: LD_VAR 0 1
58019: PPUSH
58020: CALL_OW 81
58024: PUSH
58025: LD_INT 2
58027: EQUAL
58028: AND
58029: IFFALSE 58043
// begin side := i ;
58031: LD_ADDR_VAR 0 3
58035: PUSH
58036: LD_VAR 0 1
58040: ST_TO_ADDR
// break ;
58041: GO 58045
// end ;
58043: GO 57996
58045: POP
58046: POP
// if not side then
58047: LD_VAR 0 3
58051: NOT
58052: IFFALSE 58056
// exit ;
58054: GO 58101
// for i := 1 to tmp do
58056: LD_ADDR_VAR 0 1
58060: PUSH
58061: DOUBLE
58062: LD_INT 1
58064: DEC
58065: ST_TO_ADDR
58066: LD_VAR 0 2
58070: PUSH
58071: FOR_TO
58072: IFFALSE 58099
// if Prob ( 60 ) then
58074: LD_INT 60
58076: PPUSH
58077: CALL_OW 13
58081: IFFALSE 58097
// SetSide ( i , side ) ;
58083: LD_VAR 0 1
58087: PPUSH
58088: LD_VAR 0 3
58092: PPUSH
58093: CALL_OW 235
58097: GO 58071
58099: POP
58100: POP
// end ;
58101: PPOPN 3
58103: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
58104: LD_EXP 39
58108: PUSH
58109: LD_EXP 52
58113: AND
58114: IFFALSE 58233
58116: GO 58118
58118: DISABLE
58119: LD_INT 0
58121: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
58122: LD_ADDR_VAR 0 1
58126: PUSH
58127: LD_INT 22
58129: PUSH
58130: LD_OWVAR 2
58134: PUSH
58135: EMPTY
58136: LIST
58137: LIST
58138: PUSH
58139: LD_INT 21
58141: PUSH
58142: LD_INT 1
58144: PUSH
58145: EMPTY
58146: LIST
58147: LIST
58148: PUSH
58149: LD_INT 3
58151: PUSH
58152: LD_INT 23
58154: PUSH
58155: LD_INT 0
58157: PUSH
58158: EMPTY
58159: LIST
58160: LIST
58161: PUSH
58162: EMPTY
58163: LIST
58164: LIST
58165: PUSH
58166: EMPTY
58167: LIST
58168: LIST
58169: LIST
58170: PPUSH
58171: CALL_OW 69
58175: PUSH
58176: FOR_IN
58177: IFFALSE 58231
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
58179: LD_VAR 0 1
58183: PPUSH
58184: CALL_OW 257
58188: PUSH
58189: LD_INT 1
58191: PUSH
58192: LD_INT 2
58194: PUSH
58195: LD_INT 3
58197: PUSH
58198: LD_INT 4
58200: PUSH
58201: EMPTY
58202: LIST
58203: LIST
58204: LIST
58205: LIST
58206: IN
58207: IFFALSE 58229
// SetClass ( un , rand ( 1 , 4 ) ) ;
58209: LD_VAR 0 1
58213: PPUSH
58214: LD_INT 1
58216: PPUSH
58217: LD_INT 4
58219: PPUSH
58220: CALL_OW 12
58224: PPUSH
58225: CALL_OW 336
58229: GO 58176
58231: POP
58232: POP
// end ;
58233: PPOPN 1
58235: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
58236: LD_EXP 39
58240: PUSH
58241: LD_EXP 51
58245: AND
58246: IFFALSE 58325
58248: GO 58250
58250: DISABLE
58251: LD_INT 0
58253: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
58254: LD_ADDR_VAR 0 1
58258: PUSH
58259: LD_INT 22
58261: PUSH
58262: LD_OWVAR 2
58266: PUSH
58267: EMPTY
58268: LIST
58269: LIST
58270: PUSH
58271: LD_INT 21
58273: PUSH
58274: LD_INT 3
58276: PUSH
58277: EMPTY
58278: LIST
58279: LIST
58280: PUSH
58281: EMPTY
58282: LIST
58283: LIST
58284: PPUSH
58285: CALL_OW 69
58289: ST_TO_ADDR
// if not tmp then
58290: LD_VAR 0 1
58294: NOT
58295: IFFALSE 58299
// exit ;
58297: GO 58325
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
58299: LD_VAR 0 1
58303: PUSH
58304: LD_INT 1
58306: PPUSH
58307: LD_VAR 0 1
58311: PPUSH
58312: CALL_OW 12
58316: ARRAY
58317: PPUSH
58318: LD_INT 100
58320: PPUSH
58321: CALL_OW 234
// end ;
58325: PPOPN 1
58327: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
58328: LD_EXP 39
58332: PUSH
58333: LD_EXP 53
58337: AND
58338: IFFALSE 58436
58340: GO 58342
58342: DISABLE
58343: LD_INT 0
58345: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
58346: LD_ADDR_VAR 0 1
58350: PUSH
58351: LD_INT 22
58353: PUSH
58354: LD_OWVAR 2
58358: PUSH
58359: EMPTY
58360: LIST
58361: LIST
58362: PUSH
58363: LD_INT 21
58365: PUSH
58366: LD_INT 1
58368: PUSH
58369: EMPTY
58370: LIST
58371: LIST
58372: PUSH
58373: EMPTY
58374: LIST
58375: LIST
58376: PPUSH
58377: CALL_OW 69
58381: ST_TO_ADDR
// if not tmp then
58382: LD_VAR 0 1
58386: NOT
58387: IFFALSE 58391
// exit ;
58389: GO 58436
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
58391: LD_VAR 0 1
58395: PUSH
58396: LD_INT 1
58398: PPUSH
58399: LD_VAR 0 1
58403: PPUSH
58404: CALL_OW 12
58408: ARRAY
58409: PPUSH
58410: LD_INT 1
58412: PPUSH
58413: LD_INT 4
58415: PPUSH
58416: CALL_OW 12
58420: PPUSH
58421: LD_INT 3000
58423: PPUSH
58424: LD_INT 9000
58426: PPUSH
58427: CALL_OW 12
58431: PPUSH
58432: CALL_OW 492
// end ;
58436: PPOPN 1
58438: END
// every 0 0$1 trigger StreamModeActive and sDepot do
58439: LD_EXP 39
58443: PUSH
58444: LD_EXP 54
58448: AND
58449: IFFALSE 58469
58451: GO 58453
58453: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
58454: LD_INT 1
58456: PPUSH
58457: LD_OWVAR 2
58461: PPUSH
58462: LD_INT 0
58464: PPUSH
58465: CALL_OW 324
58469: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
58470: LD_EXP 39
58474: PUSH
58475: LD_EXP 55
58479: AND
58480: IFFALSE 58563
58482: GO 58484
58484: DISABLE
58485: LD_INT 0
58487: PPUSH
58488: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
58489: LD_ADDR_VAR 0 2
58493: PUSH
58494: LD_INT 22
58496: PUSH
58497: LD_OWVAR 2
58501: PUSH
58502: EMPTY
58503: LIST
58504: LIST
58505: PUSH
58506: LD_INT 21
58508: PUSH
58509: LD_INT 3
58511: PUSH
58512: EMPTY
58513: LIST
58514: LIST
58515: PUSH
58516: EMPTY
58517: LIST
58518: LIST
58519: PPUSH
58520: CALL_OW 69
58524: ST_TO_ADDR
// if not tmp then
58525: LD_VAR 0 2
58529: NOT
58530: IFFALSE 58534
// exit ;
58532: GO 58563
// for i in tmp do
58534: LD_ADDR_VAR 0 1
58538: PUSH
58539: LD_VAR 0 2
58543: PUSH
58544: FOR_IN
58545: IFFALSE 58561
// SetBLevel ( i , 10 ) ;
58547: LD_VAR 0 1
58551: PPUSH
58552: LD_INT 10
58554: PPUSH
58555: CALL_OW 241
58559: GO 58544
58561: POP
58562: POP
// end ;
58563: PPOPN 2
58565: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
58566: LD_EXP 39
58570: PUSH
58571: LD_EXP 56
58575: AND
58576: IFFALSE 58687
58578: GO 58580
58580: DISABLE
58581: LD_INT 0
58583: PPUSH
58584: PPUSH
58585: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
58586: LD_ADDR_VAR 0 3
58590: PUSH
58591: LD_INT 22
58593: PUSH
58594: LD_OWVAR 2
58598: PUSH
58599: EMPTY
58600: LIST
58601: LIST
58602: PUSH
58603: LD_INT 25
58605: PUSH
58606: LD_INT 1
58608: PUSH
58609: EMPTY
58610: LIST
58611: LIST
58612: PUSH
58613: EMPTY
58614: LIST
58615: LIST
58616: PPUSH
58617: CALL_OW 69
58621: ST_TO_ADDR
// if not tmp then
58622: LD_VAR 0 3
58626: NOT
58627: IFFALSE 58631
// exit ;
58629: GO 58687
// un := tmp [ rand ( 1 , tmp ) ] ;
58631: LD_ADDR_VAR 0 2
58635: PUSH
58636: LD_VAR 0 3
58640: PUSH
58641: LD_INT 1
58643: PPUSH
58644: LD_VAR 0 3
58648: PPUSH
58649: CALL_OW 12
58653: ARRAY
58654: ST_TO_ADDR
// if Crawls ( un ) then
58655: LD_VAR 0 2
58659: PPUSH
58660: CALL_OW 318
58664: IFFALSE 58675
// ComWalk ( un ) ;
58666: LD_VAR 0 2
58670: PPUSH
58671: CALL_OW 138
// SetClass ( un , class_sniper ) ;
58675: LD_VAR 0 2
58679: PPUSH
58680: LD_INT 5
58682: PPUSH
58683: CALL_OW 336
// end ;
58687: PPOPN 3
58689: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
58690: LD_EXP 39
58694: PUSH
58695: LD_EXP 57
58699: AND
58700: PUSH
58701: LD_OWVAR 67
58705: PUSH
58706: LD_INT 4
58708: LESS
58709: AND
58710: IFFALSE 58729
58712: GO 58714
58714: DISABLE
// begin Difficulty := Difficulty + 1 ;
58715: LD_ADDR_OWVAR 67
58719: PUSH
58720: LD_OWVAR 67
58724: PUSH
58725: LD_INT 1
58727: PLUS
58728: ST_TO_ADDR
// end ;
58729: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
58730: LD_EXP 39
58734: PUSH
58735: LD_EXP 58
58739: AND
58740: IFFALSE 58843
58742: GO 58744
58744: DISABLE
58745: LD_INT 0
58747: PPUSH
// begin for i := 1 to 5 do
58748: LD_ADDR_VAR 0 1
58752: PUSH
58753: DOUBLE
58754: LD_INT 1
58756: DEC
58757: ST_TO_ADDR
58758: LD_INT 5
58760: PUSH
58761: FOR_TO
58762: IFFALSE 58841
// begin uc_nation := nation_nature ;
58764: LD_ADDR_OWVAR 21
58768: PUSH
58769: LD_INT 0
58771: ST_TO_ADDR
// uc_side := 0 ;
58772: LD_ADDR_OWVAR 20
58776: PUSH
58777: LD_INT 0
58779: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
58780: LD_ADDR_OWVAR 29
58784: PUSH
58785: LD_INT 12
58787: PUSH
58788: LD_INT 12
58790: PUSH
58791: EMPTY
58792: LIST
58793: LIST
58794: ST_TO_ADDR
// hc_agressivity := 20 ;
58795: LD_ADDR_OWVAR 35
58799: PUSH
58800: LD_INT 20
58802: ST_TO_ADDR
// hc_class := class_tiger ;
58803: LD_ADDR_OWVAR 28
58807: PUSH
58808: LD_INT 14
58810: ST_TO_ADDR
// hc_gallery :=  ;
58811: LD_ADDR_OWVAR 33
58815: PUSH
58816: LD_STRING 
58818: ST_TO_ADDR
// hc_name :=  ;
58819: LD_ADDR_OWVAR 26
58823: PUSH
58824: LD_STRING 
58826: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
58827: CALL_OW 44
58831: PPUSH
58832: LD_INT 0
58834: PPUSH
58835: CALL_OW 51
// end ;
58839: GO 58761
58841: POP
58842: POP
// end ;
58843: PPOPN 1
58845: END
// every 0 0$1 trigger StreamModeActive and sBomb do
58846: LD_EXP 39
58850: PUSH
58851: LD_EXP 59
58855: AND
58856: IFFALSE 58865
58858: GO 58860
58860: DISABLE
// StreamSibBomb ;
58861: CALL 58866 0 0
58865: END
// export function StreamSibBomb ; var i , x , y ; begin
58866: LD_INT 0
58868: PPUSH
58869: PPUSH
58870: PPUSH
58871: PPUSH
// result := false ;
58872: LD_ADDR_VAR 0 1
58876: PUSH
58877: LD_INT 0
58879: ST_TO_ADDR
// for i := 1 to 16 do
58880: LD_ADDR_VAR 0 2
58884: PUSH
58885: DOUBLE
58886: LD_INT 1
58888: DEC
58889: ST_TO_ADDR
58890: LD_INT 16
58892: PUSH
58893: FOR_TO
58894: IFFALSE 59093
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
58896: LD_ADDR_VAR 0 3
58900: PUSH
58901: LD_INT 10
58903: PUSH
58904: LD_INT 20
58906: PUSH
58907: LD_INT 30
58909: PUSH
58910: LD_INT 40
58912: PUSH
58913: LD_INT 50
58915: PUSH
58916: LD_INT 60
58918: PUSH
58919: LD_INT 70
58921: PUSH
58922: LD_INT 80
58924: PUSH
58925: LD_INT 90
58927: PUSH
58928: LD_INT 100
58930: PUSH
58931: LD_INT 110
58933: PUSH
58934: LD_INT 120
58936: PUSH
58937: LD_INT 130
58939: PUSH
58940: LD_INT 140
58942: PUSH
58943: LD_INT 150
58945: PUSH
58946: EMPTY
58947: LIST
58948: LIST
58949: LIST
58950: LIST
58951: LIST
58952: LIST
58953: LIST
58954: LIST
58955: LIST
58956: LIST
58957: LIST
58958: LIST
58959: LIST
58960: LIST
58961: LIST
58962: PUSH
58963: LD_INT 1
58965: PPUSH
58966: LD_INT 15
58968: PPUSH
58969: CALL_OW 12
58973: ARRAY
58974: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
58975: LD_ADDR_VAR 0 4
58979: PUSH
58980: LD_INT 10
58982: PUSH
58983: LD_INT 20
58985: PUSH
58986: LD_INT 30
58988: PUSH
58989: LD_INT 40
58991: PUSH
58992: LD_INT 50
58994: PUSH
58995: LD_INT 60
58997: PUSH
58998: LD_INT 70
59000: PUSH
59001: LD_INT 80
59003: PUSH
59004: LD_INT 90
59006: PUSH
59007: LD_INT 100
59009: PUSH
59010: LD_INT 110
59012: PUSH
59013: LD_INT 120
59015: PUSH
59016: LD_INT 130
59018: PUSH
59019: LD_INT 140
59021: PUSH
59022: LD_INT 150
59024: PUSH
59025: EMPTY
59026: LIST
59027: LIST
59028: LIST
59029: LIST
59030: LIST
59031: LIST
59032: LIST
59033: LIST
59034: LIST
59035: LIST
59036: LIST
59037: LIST
59038: LIST
59039: LIST
59040: LIST
59041: PUSH
59042: LD_INT 1
59044: PPUSH
59045: LD_INT 15
59047: PPUSH
59048: CALL_OW 12
59052: ARRAY
59053: ST_TO_ADDR
// if ValidHex ( x , y ) then
59054: LD_VAR 0 3
59058: PPUSH
59059: LD_VAR 0 4
59063: PPUSH
59064: CALL_OW 488
59068: IFFALSE 59091
// begin result := [ x , y ] ;
59070: LD_ADDR_VAR 0 1
59074: PUSH
59075: LD_VAR 0 3
59079: PUSH
59080: LD_VAR 0 4
59084: PUSH
59085: EMPTY
59086: LIST
59087: LIST
59088: ST_TO_ADDR
// break ;
59089: GO 59093
// end ; end ;
59091: GO 58893
59093: POP
59094: POP
// if result then
59095: LD_VAR 0 1
59099: IFFALSE 59159
// begin ToLua ( playSibBomb() ) ;
59101: LD_STRING playSibBomb()
59103: PPUSH
59104: CALL_OW 559
// wait ( 0 0$14 ) ;
59108: LD_INT 490
59110: PPUSH
59111: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
59115: LD_VAR 0 1
59119: PUSH
59120: LD_INT 1
59122: ARRAY
59123: PPUSH
59124: LD_VAR 0 1
59128: PUSH
59129: LD_INT 2
59131: ARRAY
59132: PPUSH
59133: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
59137: LD_VAR 0 1
59141: PUSH
59142: LD_INT 1
59144: ARRAY
59145: PPUSH
59146: LD_VAR 0 1
59150: PUSH
59151: LD_INT 2
59153: ARRAY
59154: PPUSH
59155: CALL_OW 429
// end ; end ;
59159: LD_VAR 0 1
59163: RET
// every 0 0$1 trigger StreamModeActive and sReset do
59164: LD_EXP 39
59168: PUSH
59169: LD_EXP 61
59173: AND
59174: IFFALSE 59186
59176: GO 59178
59178: DISABLE
// YouLost (  ) ;
59179: LD_STRING 
59181: PPUSH
59182: CALL_OW 104
59186: END
// every 0 0$1 trigger StreamModeActive and sFog do
59187: LD_EXP 39
59191: PUSH
59192: LD_EXP 60
59196: AND
59197: IFFALSE 59211
59199: GO 59201
59201: DISABLE
// FogOff ( your_side ) ;
59202: LD_OWVAR 2
59206: PPUSH
59207: CALL_OW 344
59211: END
// every 0 0$1 trigger StreamModeActive and sSun do
59212: LD_EXP 39
59216: PUSH
59217: LD_EXP 62
59221: AND
59222: IFFALSE 59250
59224: GO 59226
59226: DISABLE
// begin solar_recharge_percent := 0 ;
59227: LD_ADDR_OWVAR 79
59231: PUSH
59232: LD_INT 0
59234: ST_TO_ADDR
// wait ( 5 5$00 ) ;
59235: LD_INT 10500
59237: PPUSH
59238: CALL_OW 67
// solar_recharge_percent := 100 ;
59242: LD_ADDR_OWVAR 79
59246: PUSH
59247: LD_INT 100
59249: ST_TO_ADDR
// end ;
59250: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
59251: LD_EXP 39
59255: PUSH
59256: LD_EXP 63
59260: AND
59261: IFFALSE 59500
59263: GO 59265
59265: DISABLE
59266: LD_INT 0
59268: PPUSH
59269: PPUSH
59270: PPUSH
// begin tmp := [ ] ;
59271: LD_ADDR_VAR 0 3
59275: PUSH
59276: EMPTY
59277: ST_TO_ADDR
// for i := 1 to 6 do
59278: LD_ADDR_VAR 0 1
59282: PUSH
59283: DOUBLE
59284: LD_INT 1
59286: DEC
59287: ST_TO_ADDR
59288: LD_INT 6
59290: PUSH
59291: FOR_TO
59292: IFFALSE 59397
// begin uc_nation := nation_nature ;
59294: LD_ADDR_OWVAR 21
59298: PUSH
59299: LD_INT 0
59301: ST_TO_ADDR
// uc_side := 0 ;
59302: LD_ADDR_OWVAR 20
59306: PUSH
59307: LD_INT 0
59309: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
59310: LD_ADDR_OWVAR 29
59314: PUSH
59315: LD_INT 12
59317: PUSH
59318: LD_INT 12
59320: PUSH
59321: EMPTY
59322: LIST
59323: LIST
59324: ST_TO_ADDR
// hc_agressivity := 20 ;
59325: LD_ADDR_OWVAR 35
59329: PUSH
59330: LD_INT 20
59332: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
59333: LD_ADDR_OWVAR 28
59337: PUSH
59338: LD_INT 17
59340: ST_TO_ADDR
// hc_gallery :=  ;
59341: LD_ADDR_OWVAR 33
59345: PUSH
59346: LD_STRING 
59348: ST_TO_ADDR
// hc_name :=  ;
59349: LD_ADDR_OWVAR 26
59353: PUSH
59354: LD_STRING 
59356: ST_TO_ADDR
// un := CreateHuman ;
59357: LD_ADDR_VAR 0 2
59361: PUSH
59362: CALL_OW 44
59366: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
59367: LD_VAR 0 2
59371: PPUSH
59372: LD_INT 1
59374: PPUSH
59375: CALL_OW 51
// tmp := tmp ^ un ;
59379: LD_ADDR_VAR 0 3
59383: PUSH
59384: LD_VAR 0 3
59388: PUSH
59389: LD_VAR 0 2
59393: ADD
59394: ST_TO_ADDR
// end ;
59395: GO 59291
59397: POP
59398: POP
// repeat wait ( 0 0$1 ) ;
59399: LD_INT 35
59401: PPUSH
59402: CALL_OW 67
// for un in tmp do
59406: LD_ADDR_VAR 0 2
59410: PUSH
59411: LD_VAR 0 3
59415: PUSH
59416: FOR_IN
59417: IFFALSE 59491
// begin if IsDead ( un ) then
59419: LD_VAR 0 2
59423: PPUSH
59424: CALL_OW 301
59428: IFFALSE 59448
// begin tmp := tmp diff un ;
59430: LD_ADDR_VAR 0 3
59434: PUSH
59435: LD_VAR 0 3
59439: PUSH
59440: LD_VAR 0 2
59444: DIFF
59445: ST_TO_ADDR
// continue ;
59446: GO 59416
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
59448: LD_VAR 0 2
59452: PPUSH
59453: LD_INT 3
59455: PUSH
59456: LD_INT 22
59458: PUSH
59459: LD_INT 0
59461: PUSH
59462: EMPTY
59463: LIST
59464: LIST
59465: PUSH
59466: EMPTY
59467: LIST
59468: LIST
59469: PPUSH
59470: CALL_OW 69
59474: PPUSH
59475: LD_VAR 0 2
59479: PPUSH
59480: CALL_OW 74
59484: PPUSH
59485: CALL_OW 115
// end ;
59489: GO 59416
59491: POP
59492: POP
// until not tmp ;
59493: LD_VAR 0 3
59497: NOT
59498: IFFALSE 59399
// end ;
59500: PPOPN 3
59502: END
// every 0 0$1 trigger StreamModeActive and sTroll do
59503: LD_EXP 39
59507: PUSH
59508: LD_EXP 64
59512: AND
59513: IFFALSE 59567
59515: GO 59517
59517: DISABLE
// begin ToLua ( displayTroll(); ) ;
59518: LD_STRING displayTroll();
59520: PPUSH
59521: CALL_OW 559
// wait ( 3 3$00 ) ;
59525: LD_INT 6300
59527: PPUSH
59528: CALL_OW 67
// ToLua ( hideTroll(); ) ;
59532: LD_STRING hideTroll();
59534: PPUSH
59535: CALL_OW 559
// wait ( 1 1$00 ) ;
59539: LD_INT 2100
59541: PPUSH
59542: CALL_OW 67
// ToLua ( displayTroll(); ) ;
59546: LD_STRING displayTroll();
59548: PPUSH
59549: CALL_OW 559
// wait ( 1 1$00 ) ;
59553: LD_INT 2100
59555: PPUSH
59556: CALL_OW 67
// ToLua ( hideTroll(); ) ;
59560: LD_STRING hideTroll();
59562: PPUSH
59563: CALL_OW 559
// end ;
59567: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
59568: LD_EXP 39
59572: PUSH
59573: LD_EXP 65
59577: AND
59578: IFFALSE 59641
59580: GO 59582
59582: DISABLE
59583: LD_INT 0
59585: PPUSH
// begin p := 0 ;
59586: LD_ADDR_VAR 0 1
59590: PUSH
59591: LD_INT 0
59593: ST_TO_ADDR
// repeat game_speed := 1 ;
59594: LD_ADDR_OWVAR 65
59598: PUSH
59599: LD_INT 1
59601: ST_TO_ADDR
// wait ( 0 0$1 ) ;
59602: LD_INT 35
59604: PPUSH
59605: CALL_OW 67
// p := p + 1 ;
59609: LD_ADDR_VAR 0 1
59613: PUSH
59614: LD_VAR 0 1
59618: PUSH
59619: LD_INT 1
59621: PLUS
59622: ST_TO_ADDR
// until p >= 60 ;
59623: LD_VAR 0 1
59627: PUSH
59628: LD_INT 60
59630: GREATEREQUAL
59631: IFFALSE 59594
// game_speed := 4 ;
59633: LD_ADDR_OWVAR 65
59637: PUSH
59638: LD_INT 4
59640: ST_TO_ADDR
// end ;
59641: PPOPN 1
59643: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
59644: LD_EXP 39
59648: PUSH
59649: LD_EXP 66
59653: AND
59654: IFFALSE 59800
59656: GO 59658
59658: DISABLE
59659: LD_INT 0
59661: PPUSH
59662: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
59663: LD_ADDR_VAR 0 1
59667: PUSH
59668: LD_INT 22
59670: PUSH
59671: LD_OWVAR 2
59675: PUSH
59676: EMPTY
59677: LIST
59678: LIST
59679: PUSH
59680: LD_INT 2
59682: PUSH
59683: LD_INT 30
59685: PUSH
59686: LD_INT 0
59688: PUSH
59689: EMPTY
59690: LIST
59691: LIST
59692: PUSH
59693: LD_INT 30
59695: PUSH
59696: LD_INT 1
59698: PUSH
59699: EMPTY
59700: LIST
59701: LIST
59702: PUSH
59703: EMPTY
59704: LIST
59705: LIST
59706: LIST
59707: PUSH
59708: EMPTY
59709: LIST
59710: LIST
59711: PPUSH
59712: CALL_OW 69
59716: ST_TO_ADDR
// if not depot then
59717: LD_VAR 0 1
59721: NOT
59722: IFFALSE 59726
// exit ;
59724: GO 59800
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
59726: LD_ADDR_VAR 0 2
59730: PUSH
59731: LD_VAR 0 1
59735: PUSH
59736: LD_INT 1
59738: PPUSH
59739: LD_VAR 0 1
59743: PPUSH
59744: CALL_OW 12
59748: ARRAY
59749: PPUSH
59750: CALL_OW 274
59754: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
59755: LD_VAR 0 2
59759: PPUSH
59760: LD_INT 1
59762: PPUSH
59763: LD_INT 0
59765: PPUSH
59766: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
59770: LD_VAR 0 2
59774: PPUSH
59775: LD_INT 2
59777: PPUSH
59778: LD_INT 0
59780: PPUSH
59781: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
59785: LD_VAR 0 2
59789: PPUSH
59790: LD_INT 3
59792: PPUSH
59793: LD_INT 0
59795: PPUSH
59796: CALL_OW 277
// end ;
59800: PPOPN 2
59802: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
59803: LD_EXP 39
59807: PUSH
59808: LD_EXP 67
59812: AND
59813: IFFALSE 59910
59815: GO 59817
59817: DISABLE
59818: LD_INT 0
59820: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
59821: LD_ADDR_VAR 0 1
59825: PUSH
59826: LD_INT 22
59828: PUSH
59829: LD_OWVAR 2
59833: PUSH
59834: EMPTY
59835: LIST
59836: LIST
59837: PUSH
59838: LD_INT 21
59840: PUSH
59841: LD_INT 1
59843: PUSH
59844: EMPTY
59845: LIST
59846: LIST
59847: PUSH
59848: LD_INT 3
59850: PUSH
59851: LD_INT 23
59853: PUSH
59854: LD_INT 0
59856: PUSH
59857: EMPTY
59858: LIST
59859: LIST
59860: PUSH
59861: EMPTY
59862: LIST
59863: LIST
59864: PUSH
59865: EMPTY
59866: LIST
59867: LIST
59868: LIST
59869: PPUSH
59870: CALL_OW 69
59874: ST_TO_ADDR
// if not tmp then
59875: LD_VAR 0 1
59879: NOT
59880: IFFALSE 59884
// exit ;
59882: GO 59910
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
59884: LD_VAR 0 1
59888: PUSH
59889: LD_INT 1
59891: PPUSH
59892: LD_VAR 0 1
59896: PPUSH
59897: CALL_OW 12
59901: ARRAY
59902: PPUSH
59903: LD_INT 200
59905: PPUSH
59906: CALL_OW 234
// end ;
59910: PPOPN 1
59912: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
59913: LD_EXP 39
59917: PUSH
59918: LD_EXP 68
59922: AND
59923: IFFALSE 60002
59925: GO 59927
59927: DISABLE
59928: LD_INT 0
59930: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
59931: LD_ADDR_VAR 0 1
59935: PUSH
59936: LD_INT 22
59938: PUSH
59939: LD_OWVAR 2
59943: PUSH
59944: EMPTY
59945: LIST
59946: LIST
59947: PUSH
59948: LD_INT 21
59950: PUSH
59951: LD_INT 2
59953: PUSH
59954: EMPTY
59955: LIST
59956: LIST
59957: PUSH
59958: EMPTY
59959: LIST
59960: LIST
59961: PPUSH
59962: CALL_OW 69
59966: ST_TO_ADDR
// if not tmp then
59967: LD_VAR 0 1
59971: NOT
59972: IFFALSE 59976
// exit ;
59974: GO 60002
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
59976: LD_VAR 0 1
59980: PUSH
59981: LD_INT 1
59983: PPUSH
59984: LD_VAR 0 1
59988: PPUSH
59989: CALL_OW 12
59993: ARRAY
59994: PPUSH
59995: LD_INT 60
59997: PPUSH
59998: CALL_OW 234
// end ;
60002: PPOPN 1
60004: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
60005: LD_EXP 39
60009: PUSH
60010: LD_EXP 69
60014: AND
60015: IFFALSE 60114
60017: GO 60019
60019: DISABLE
60020: LD_INT 0
60022: PPUSH
60023: PPUSH
// begin enable ;
60024: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
60025: LD_ADDR_VAR 0 1
60029: PUSH
60030: LD_INT 22
60032: PUSH
60033: LD_OWVAR 2
60037: PUSH
60038: EMPTY
60039: LIST
60040: LIST
60041: PUSH
60042: LD_INT 61
60044: PUSH
60045: EMPTY
60046: LIST
60047: PUSH
60048: LD_INT 33
60050: PUSH
60051: LD_INT 2
60053: PUSH
60054: EMPTY
60055: LIST
60056: LIST
60057: PUSH
60058: EMPTY
60059: LIST
60060: LIST
60061: LIST
60062: PPUSH
60063: CALL_OW 69
60067: ST_TO_ADDR
// if not tmp then
60068: LD_VAR 0 1
60072: NOT
60073: IFFALSE 60077
// exit ;
60075: GO 60114
// for i in tmp do
60077: LD_ADDR_VAR 0 2
60081: PUSH
60082: LD_VAR 0 1
60086: PUSH
60087: FOR_IN
60088: IFFALSE 60112
// if IsControledBy ( i ) then
60090: LD_VAR 0 2
60094: PPUSH
60095: CALL_OW 312
60099: IFFALSE 60110
// ComUnlink ( i ) ;
60101: LD_VAR 0 2
60105: PPUSH
60106: CALL_OW 136
60110: GO 60087
60112: POP
60113: POP
// end ;
60114: PPOPN 2
60116: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
60117: LD_EXP 39
60121: PUSH
60122: LD_EXP 70
60126: AND
60127: IFFALSE 60267
60129: GO 60131
60131: DISABLE
60132: LD_INT 0
60134: PPUSH
60135: PPUSH
// begin ToLua ( displayPowell(); ) ;
60136: LD_STRING displayPowell();
60138: PPUSH
60139: CALL_OW 559
// uc_side := 0 ;
60143: LD_ADDR_OWVAR 20
60147: PUSH
60148: LD_INT 0
60150: ST_TO_ADDR
// uc_nation := 2 ;
60151: LD_ADDR_OWVAR 21
60155: PUSH
60156: LD_INT 2
60158: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
60159: LD_ADDR_OWVAR 37
60163: PUSH
60164: LD_INT 14
60166: ST_TO_ADDR
// vc_engine := engine_siberite ;
60167: LD_ADDR_OWVAR 39
60171: PUSH
60172: LD_INT 3
60174: ST_TO_ADDR
// vc_control := control_apeman ;
60175: LD_ADDR_OWVAR 38
60179: PUSH
60180: LD_INT 5
60182: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
60183: LD_ADDR_OWVAR 40
60187: PUSH
60188: LD_INT 29
60190: ST_TO_ADDR
// un := CreateVehicle ;
60191: LD_ADDR_VAR 0 2
60195: PUSH
60196: CALL_OW 45
60200: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
60201: LD_VAR 0 2
60205: PPUSH
60206: LD_INT 1
60208: PPUSH
60209: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
60213: LD_INT 35
60215: PPUSH
60216: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
60220: LD_VAR 0 2
60224: PPUSH
60225: LD_INT 22
60227: PUSH
60228: LD_OWVAR 2
60232: PUSH
60233: EMPTY
60234: LIST
60235: LIST
60236: PPUSH
60237: CALL_OW 69
60241: PPUSH
60242: LD_VAR 0 2
60246: PPUSH
60247: CALL_OW 74
60251: PPUSH
60252: CALL_OW 115
// until IsDead ( un ) ;
60256: LD_VAR 0 2
60260: PPUSH
60261: CALL_OW 301
60265: IFFALSE 60213
// end ;
60267: PPOPN 2
60269: END
// every 0 0$1 trigger StreamModeActive and sStu do
60270: LD_EXP 39
60274: PUSH
60275: LD_EXP 78
60279: AND
60280: IFFALSE 60296
60282: GO 60284
60284: DISABLE
// begin ToLua ( displayStucuk(); ) ;
60285: LD_STRING displayStucuk();
60287: PPUSH
60288: CALL_OW 559
// ResetFog ;
60292: CALL_OW 335
// end ;
60296: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
60297: LD_EXP 39
60301: PUSH
60302: LD_EXP 71
60306: AND
60307: IFFALSE 60448
60309: GO 60311
60311: DISABLE
60312: LD_INT 0
60314: PPUSH
60315: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
60316: LD_ADDR_VAR 0 2
60320: PUSH
60321: LD_INT 22
60323: PUSH
60324: LD_OWVAR 2
60328: PUSH
60329: EMPTY
60330: LIST
60331: LIST
60332: PUSH
60333: LD_INT 21
60335: PUSH
60336: LD_INT 1
60338: PUSH
60339: EMPTY
60340: LIST
60341: LIST
60342: PUSH
60343: EMPTY
60344: LIST
60345: LIST
60346: PPUSH
60347: CALL_OW 69
60351: ST_TO_ADDR
// if not tmp then
60352: LD_VAR 0 2
60356: NOT
60357: IFFALSE 60361
// exit ;
60359: GO 60448
// un := tmp [ rand ( 1 , tmp ) ] ;
60361: LD_ADDR_VAR 0 1
60365: PUSH
60366: LD_VAR 0 2
60370: PUSH
60371: LD_INT 1
60373: PPUSH
60374: LD_VAR 0 2
60378: PPUSH
60379: CALL_OW 12
60383: ARRAY
60384: ST_TO_ADDR
// SetSide ( un , 0 ) ;
60385: LD_VAR 0 1
60389: PPUSH
60390: LD_INT 0
60392: PPUSH
60393: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
60397: LD_VAR 0 1
60401: PPUSH
60402: LD_OWVAR 3
60406: PUSH
60407: LD_VAR 0 1
60411: DIFF
60412: PPUSH
60413: LD_VAR 0 1
60417: PPUSH
60418: CALL_OW 74
60422: PPUSH
60423: CALL_OW 115
// wait ( 0 0$20 ) ;
60427: LD_INT 700
60429: PPUSH
60430: CALL_OW 67
// SetSide ( un , your_side ) ;
60434: LD_VAR 0 1
60438: PPUSH
60439: LD_OWVAR 2
60443: PPUSH
60444: CALL_OW 235
// end ;
60448: PPOPN 2
60450: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
60451: LD_EXP 39
60455: PUSH
60456: LD_EXP 72
60460: AND
60461: IFFALSE 60567
60463: GO 60465
60465: DISABLE
60466: LD_INT 0
60468: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
60469: LD_ADDR_VAR 0 1
60473: PUSH
60474: LD_INT 22
60476: PUSH
60477: LD_OWVAR 2
60481: PUSH
60482: EMPTY
60483: LIST
60484: LIST
60485: PUSH
60486: LD_INT 2
60488: PUSH
60489: LD_INT 30
60491: PUSH
60492: LD_INT 0
60494: PUSH
60495: EMPTY
60496: LIST
60497: LIST
60498: PUSH
60499: LD_INT 30
60501: PUSH
60502: LD_INT 1
60504: PUSH
60505: EMPTY
60506: LIST
60507: LIST
60508: PUSH
60509: EMPTY
60510: LIST
60511: LIST
60512: LIST
60513: PUSH
60514: EMPTY
60515: LIST
60516: LIST
60517: PPUSH
60518: CALL_OW 69
60522: ST_TO_ADDR
// if not depot then
60523: LD_VAR 0 1
60527: NOT
60528: IFFALSE 60532
// exit ;
60530: GO 60567
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
60532: LD_VAR 0 1
60536: PUSH
60537: LD_INT 1
60539: ARRAY
60540: PPUSH
60541: CALL_OW 250
60545: PPUSH
60546: LD_VAR 0 1
60550: PUSH
60551: LD_INT 1
60553: ARRAY
60554: PPUSH
60555: CALL_OW 251
60559: PPUSH
60560: LD_INT 70
60562: PPUSH
60563: CALL_OW 495
// end ;
60567: PPOPN 1
60569: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
60570: LD_EXP 39
60574: PUSH
60575: LD_EXP 73
60579: AND
60580: IFFALSE 60791
60582: GO 60584
60584: DISABLE
60585: LD_INT 0
60587: PPUSH
60588: PPUSH
60589: PPUSH
60590: PPUSH
60591: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
60592: LD_ADDR_VAR 0 5
60596: PUSH
60597: LD_INT 22
60599: PUSH
60600: LD_OWVAR 2
60604: PUSH
60605: EMPTY
60606: LIST
60607: LIST
60608: PUSH
60609: LD_INT 21
60611: PUSH
60612: LD_INT 1
60614: PUSH
60615: EMPTY
60616: LIST
60617: LIST
60618: PUSH
60619: EMPTY
60620: LIST
60621: LIST
60622: PPUSH
60623: CALL_OW 69
60627: ST_TO_ADDR
// if not tmp then
60628: LD_VAR 0 5
60632: NOT
60633: IFFALSE 60637
// exit ;
60635: GO 60791
// for i in tmp do
60637: LD_ADDR_VAR 0 1
60641: PUSH
60642: LD_VAR 0 5
60646: PUSH
60647: FOR_IN
60648: IFFALSE 60789
// begin d := rand ( 0 , 5 ) ;
60650: LD_ADDR_VAR 0 4
60654: PUSH
60655: LD_INT 0
60657: PPUSH
60658: LD_INT 5
60660: PPUSH
60661: CALL_OW 12
60665: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
60666: LD_ADDR_VAR 0 2
60670: PUSH
60671: LD_VAR 0 1
60675: PPUSH
60676: CALL_OW 250
60680: PPUSH
60681: LD_VAR 0 4
60685: PPUSH
60686: LD_INT 3
60688: PPUSH
60689: LD_INT 12
60691: PPUSH
60692: CALL_OW 12
60696: PPUSH
60697: CALL_OW 272
60701: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
60702: LD_ADDR_VAR 0 3
60706: PUSH
60707: LD_VAR 0 1
60711: PPUSH
60712: CALL_OW 251
60716: PPUSH
60717: LD_VAR 0 4
60721: PPUSH
60722: LD_INT 3
60724: PPUSH
60725: LD_INT 12
60727: PPUSH
60728: CALL_OW 12
60732: PPUSH
60733: CALL_OW 273
60737: ST_TO_ADDR
// if ValidHex ( x , y ) then
60738: LD_VAR 0 2
60742: PPUSH
60743: LD_VAR 0 3
60747: PPUSH
60748: CALL_OW 488
60752: IFFALSE 60787
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
60754: LD_VAR 0 1
60758: PPUSH
60759: LD_VAR 0 2
60763: PPUSH
60764: LD_VAR 0 3
60768: PPUSH
60769: LD_INT 3
60771: PPUSH
60772: LD_INT 6
60774: PPUSH
60775: CALL_OW 12
60779: PPUSH
60780: LD_INT 1
60782: PPUSH
60783: CALL_OW 483
// end ;
60787: GO 60647
60789: POP
60790: POP
// end ;
60791: PPOPN 5
60793: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
60794: LD_EXP 39
60798: PUSH
60799: LD_EXP 74
60803: AND
60804: IFFALSE 60898
60806: GO 60808
60808: DISABLE
60809: LD_INT 0
60811: PPUSH
60812: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
60813: LD_ADDR_VAR 0 2
60817: PUSH
60818: LD_INT 22
60820: PUSH
60821: LD_OWVAR 2
60825: PUSH
60826: EMPTY
60827: LIST
60828: LIST
60829: PUSH
60830: LD_INT 32
60832: PUSH
60833: LD_INT 1
60835: PUSH
60836: EMPTY
60837: LIST
60838: LIST
60839: PUSH
60840: LD_INT 21
60842: PUSH
60843: LD_INT 2
60845: PUSH
60846: EMPTY
60847: LIST
60848: LIST
60849: PUSH
60850: EMPTY
60851: LIST
60852: LIST
60853: LIST
60854: PPUSH
60855: CALL_OW 69
60859: ST_TO_ADDR
// if not tmp then
60860: LD_VAR 0 2
60864: NOT
60865: IFFALSE 60869
// exit ;
60867: GO 60898
// for i in tmp do
60869: LD_ADDR_VAR 0 1
60873: PUSH
60874: LD_VAR 0 2
60878: PUSH
60879: FOR_IN
60880: IFFALSE 60896
// SetFuel ( i , 0 ) ;
60882: LD_VAR 0 1
60886: PPUSH
60887: LD_INT 0
60889: PPUSH
60890: CALL_OW 240
60894: GO 60879
60896: POP
60897: POP
// end ;
60898: PPOPN 2
60900: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
60901: LD_EXP 39
60905: PUSH
60906: LD_EXP 75
60910: AND
60911: IFFALSE 60977
60913: GO 60915
60915: DISABLE
60916: LD_INT 0
60918: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
60919: LD_ADDR_VAR 0 1
60923: PUSH
60924: LD_INT 22
60926: PUSH
60927: LD_OWVAR 2
60931: PUSH
60932: EMPTY
60933: LIST
60934: LIST
60935: PUSH
60936: LD_INT 30
60938: PUSH
60939: LD_INT 29
60941: PUSH
60942: EMPTY
60943: LIST
60944: LIST
60945: PUSH
60946: EMPTY
60947: LIST
60948: LIST
60949: PPUSH
60950: CALL_OW 69
60954: ST_TO_ADDR
// if not tmp then
60955: LD_VAR 0 1
60959: NOT
60960: IFFALSE 60964
// exit ;
60962: GO 60977
// DestroyUnit ( tmp [ 1 ] ) ;
60964: LD_VAR 0 1
60968: PUSH
60969: LD_INT 1
60971: ARRAY
60972: PPUSH
60973: CALL_OW 65
// end ;
60977: PPOPN 1
60979: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
60980: LD_EXP 39
60984: PUSH
60985: LD_EXP 77
60989: AND
60990: IFFALSE 61119
60992: GO 60994
60994: DISABLE
60995: LD_INT 0
60997: PPUSH
// begin uc_side := 0 ;
60998: LD_ADDR_OWVAR 20
61002: PUSH
61003: LD_INT 0
61005: ST_TO_ADDR
// uc_nation := nation_arabian ;
61006: LD_ADDR_OWVAR 21
61010: PUSH
61011: LD_INT 2
61013: ST_TO_ADDR
// hc_gallery :=  ;
61014: LD_ADDR_OWVAR 33
61018: PUSH
61019: LD_STRING 
61021: ST_TO_ADDR
// hc_name :=  ;
61022: LD_ADDR_OWVAR 26
61026: PUSH
61027: LD_STRING 
61029: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
61030: LD_INT 1
61032: PPUSH
61033: LD_INT 11
61035: PPUSH
61036: LD_INT 10
61038: PPUSH
61039: CALL_OW 380
// un := CreateHuman ;
61043: LD_ADDR_VAR 0 1
61047: PUSH
61048: CALL_OW 44
61052: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
61053: LD_VAR 0 1
61057: PPUSH
61058: LD_INT 1
61060: PPUSH
61061: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
61065: LD_INT 35
61067: PPUSH
61068: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
61072: LD_VAR 0 1
61076: PPUSH
61077: LD_INT 22
61079: PUSH
61080: LD_OWVAR 2
61084: PUSH
61085: EMPTY
61086: LIST
61087: LIST
61088: PPUSH
61089: CALL_OW 69
61093: PPUSH
61094: LD_VAR 0 1
61098: PPUSH
61099: CALL_OW 74
61103: PPUSH
61104: CALL_OW 115
// until IsDead ( un ) ;
61108: LD_VAR 0 1
61112: PPUSH
61113: CALL_OW 301
61117: IFFALSE 61065
// end ;
61119: PPOPN 1
61121: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
61122: LD_EXP 39
61126: PUSH
61127: LD_EXP 79
61131: AND
61132: IFFALSE 61144
61134: GO 61136
61136: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
61137: LD_STRING earthquake(getX(game), 0, 32)
61139: PPUSH
61140: CALL_OW 559
61144: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
61145: LD_EXP 39
61149: PUSH
61150: LD_EXP 80
61154: AND
61155: IFFALSE 61246
61157: GO 61159
61159: DISABLE
61160: LD_INT 0
61162: PPUSH
// begin enable ;
61163: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
61164: LD_ADDR_VAR 0 1
61168: PUSH
61169: LD_INT 22
61171: PUSH
61172: LD_OWVAR 2
61176: PUSH
61177: EMPTY
61178: LIST
61179: LIST
61180: PUSH
61181: LD_INT 21
61183: PUSH
61184: LD_INT 2
61186: PUSH
61187: EMPTY
61188: LIST
61189: LIST
61190: PUSH
61191: LD_INT 33
61193: PUSH
61194: LD_INT 3
61196: PUSH
61197: EMPTY
61198: LIST
61199: LIST
61200: PUSH
61201: EMPTY
61202: LIST
61203: LIST
61204: LIST
61205: PPUSH
61206: CALL_OW 69
61210: ST_TO_ADDR
// if not tmp then
61211: LD_VAR 0 1
61215: NOT
61216: IFFALSE 61220
// exit ;
61218: GO 61246
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
61220: LD_VAR 0 1
61224: PUSH
61225: LD_INT 1
61227: PPUSH
61228: LD_VAR 0 1
61232: PPUSH
61233: CALL_OW 12
61237: ARRAY
61238: PPUSH
61239: LD_INT 1
61241: PPUSH
61242: CALL_OW 234
// end ;
61246: PPOPN 1
61248: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
61249: LD_EXP 39
61253: PUSH
61254: LD_EXP 81
61258: AND
61259: IFFALSE 61400
61261: GO 61263
61263: DISABLE
61264: LD_INT 0
61266: PPUSH
61267: PPUSH
61268: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
61269: LD_ADDR_VAR 0 3
61273: PUSH
61274: LD_INT 22
61276: PUSH
61277: LD_OWVAR 2
61281: PUSH
61282: EMPTY
61283: LIST
61284: LIST
61285: PUSH
61286: LD_INT 25
61288: PUSH
61289: LD_INT 1
61291: PUSH
61292: EMPTY
61293: LIST
61294: LIST
61295: PUSH
61296: EMPTY
61297: LIST
61298: LIST
61299: PPUSH
61300: CALL_OW 69
61304: ST_TO_ADDR
// if not tmp then
61305: LD_VAR 0 3
61309: NOT
61310: IFFALSE 61314
// exit ;
61312: GO 61400
// un := tmp [ rand ( 1 , tmp ) ] ;
61314: LD_ADDR_VAR 0 2
61318: PUSH
61319: LD_VAR 0 3
61323: PUSH
61324: LD_INT 1
61326: PPUSH
61327: LD_VAR 0 3
61331: PPUSH
61332: CALL_OW 12
61336: ARRAY
61337: ST_TO_ADDR
// if Crawls ( un ) then
61338: LD_VAR 0 2
61342: PPUSH
61343: CALL_OW 318
61347: IFFALSE 61358
// ComWalk ( un ) ;
61349: LD_VAR 0 2
61353: PPUSH
61354: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
61358: LD_VAR 0 2
61362: PPUSH
61363: LD_INT 9
61365: PPUSH
61366: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
61370: LD_INT 28
61372: PPUSH
61373: LD_OWVAR 2
61377: PPUSH
61378: LD_INT 2
61380: PPUSH
61381: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
61385: LD_INT 29
61387: PPUSH
61388: LD_OWVAR 2
61392: PPUSH
61393: LD_INT 2
61395: PPUSH
61396: CALL_OW 322
// end ;
61400: PPOPN 3
61402: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
61403: LD_EXP 39
61407: PUSH
61408: LD_EXP 82
61412: AND
61413: IFFALSE 61524
61415: GO 61417
61417: DISABLE
61418: LD_INT 0
61420: PPUSH
61421: PPUSH
61422: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
61423: LD_ADDR_VAR 0 3
61427: PUSH
61428: LD_INT 22
61430: PUSH
61431: LD_OWVAR 2
61435: PUSH
61436: EMPTY
61437: LIST
61438: LIST
61439: PUSH
61440: LD_INT 25
61442: PUSH
61443: LD_INT 1
61445: PUSH
61446: EMPTY
61447: LIST
61448: LIST
61449: PUSH
61450: EMPTY
61451: LIST
61452: LIST
61453: PPUSH
61454: CALL_OW 69
61458: ST_TO_ADDR
// if not tmp then
61459: LD_VAR 0 3
61463: NOT
61464: IFFALSE 61468
// exit ;
61466: GO 61524
// un := tmp [ rand ( 1 , tmp ) ] ;
61468: LD_ADDR_VAR 0 2
61472: PUSH
61473: LD_VAR 0 3
61477: PUSH
61478: LD_INT 1
61480: PPUSH
61481: LD_VAR 0 3
61485: PPUSH
61486: CALL_OW 12
61490: ARRAY
61491: ST_TO_ADDR
// if Crawls ( un ) then
61492: LD_VAR 0 2
61496: PPUSH
61497: CALL_OW 318
61501: IFFALSE 61512
// ComWalk ( un ) ;
61503: LD_VAR 0 2
61507: PPUSH
61508: CALL_OW 138
// SetClass ( un , class_mortar ) ;
61512: LD_VAR 0 2
61516: PPUSH
61517: LD_INT 8
61519: PPUSH
61520: CALL_OW 336
// end ;
61524: PPOPN 3
61526: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
61527: LD_EXP 39
61531: PUSH
61532: LD_EXP 83
61536: AND
61537: IFFALSE 61681
61539: GO 61541
61541: DISABLE
61542: LD_INT 0
61544: PPUSH
61545: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
61546: LD_ADDR_VAR 0 2
61550: PUSH
61551: LD_INT 22
61553: PUSH
61554: LD_OWVAR 2
61558: PUSH
61559: EMPTY
61560: LIST
61561: LIST
61562: PUSH
61563: LD_INT 21
61565: PUSH
61566: LD_INT 2
61568: PUSH
61569: EMPTY
61570: LIST
61571: LIST
61572: PUSH
61573: LD_INT 2
61575: PUSH
61576: LD_INT 34
61578: PUSH
61579: LD_INT 12
61581: PUSH
61582: EMPTY
61583: LIST
61584: LIST
61585: PUSH
61586: LD_INT 34
61588: PUSH
61589: LD_INT 51
61591: PUSH
61592: EMPTY
61593: LIST
61594: LIST
61595: PUSH
61596: LD_INT 34
61598: PUSH
61599: LD_INT 32
61601: PUSH
61602: EMPTY
61603: LIST
61604: LIST
61605: PUSH
61606: EMPTY
61607: LIST
61608: LIST
61609: LIST
61610: LIST
61611: PUSH
61612: EMPTY
61613: LIST
61614: LIST
61615: LIST
61616: PPUSH
61617: CALL_OW 69
61621: ST_TO_ADDR
// if not tmp then
61622: LD_VAR 0 2
61626: NOT
61627: IFFALSE 61631
// exit ;
61629: GO 61681
// for i in tmp do
61631: LD_ADDR_VAR 0 1
61635: PUSH
61636: LD_VAR 0 2
61640: PUSH
61641: FOR_IN
61642: IFFALSE 61679
// if GetCargo ( i , mat_artifact ) = 0 then
61644: LD_VAR 0 1
61648: PPUSH
61649: LD_INT 4
61651: PPUSH
61652: CALL_OW 289
61656: PUSH
61657: LD_INT 0
61659: EQUAL
61660: IFFALSE 61677
// SetCargo ( i , mat_siberit , 100 ) ;
61662: LD_VAR 0 1
61666: PPUSH
61667: LD_INT 3
61669: PPUSH
61670: LD_INT 100
61672: PPUSH
61673: CALL_OW 290
61677: GO 61641
61679: POP
61680: POP
// end ;
61681: PPOPN 2
61683: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
61684: LD_EXP 39
61688: PUSH
61689: LD_EXP 84
61693: AND
61694: IFFALSE 61877
61696: GO 61698
61698: DISABLE
61699: LD_INT 0
61701: PPUSH
61702: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
61703: LD_ADDR_VAR 0 2
61707: PUSH
61708: LD_INT 22
61710: PUSH
61711: LD_OWVAR 2
61715: PUSH
61716: EMPTY
61717: LIST
61718: LIST
61719: PPUSH
61720: CALL_OW 69
61724: ST_TO_ADDR
// if not tmp then
61725: LD_VAR 0 2
61729: NOT
61730: IFFALSE 61734
// exit ;
61732: GO 61877
// for i := 1 to 2 do
61734: LD_ADDR_VAR 0 1
61738: PUSH
61739: DOUBLE
61740: LD_INT 1
61742: DEC
61743: ST_TO_ADDR
61744: LD_INT 2
61746: PUSH
61747: FOR_TO
61748: IFFALSE 61875
// begin uc_side := your_side ;
61750: LD_ADDR_OWVAR 20
61754: PUSH
61755: LD_OWVAR 2
61759: ST_TO_ADDR
// uc_nation := nation_american ;
61760: LD_ADDR_OWVAR 21
61764: PUSH
61765: LD_INT 1
61767: ST_TO_ADDR
// vc_chassis := us_morphling ;
61768: LD_ADDR_OWVAR 37
61772: PUSH
61773: LD_INT 5
61775: ST_TO_ADDR
// vc_engine := engine_siberite ;
61776: LD_ADDR_OWVAR 39
61780: PUSH
61781: LD_INT 3
61783: ST_TO_ADDR
// vc_control := control_computer ;
61784: LD_ADDR_OWVAR 38
61788: PUSH
61789: LD_INT 3
61791: ST_TO_ADDR
// vc_weapon := us_double_laser ;
61792: LD_ADDR_OWVAR 40
61796: PUSH
61797: LD_INT 10
61799: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
61800: LD_VAR 0 2
61804: PUSH
61805: LD_INT 1
61807: ARRAY
61808: PPUSH
61809: CALL_OW 310
61813: NOT
61814: IFFALSE 61861
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
61816: CALL_OW 45
61820: PPUSH
61821: LD_VAR 0 2
61825: PUSH
61826: LD_INT 1
61828: ARRAY
61829: PPUSH
61830: CALL_OW 250
61834: PPUSH
61835: LD_VAR 0 2
61839: PUSH
61840: LD_INT 1
61842: ARRAY
61843: PPUSH
61844: CALL_OW 251
61848: PPUSH
61849: LD_INT 12
61851: PPUSH
61852: LD_INT 1
61854: PPUSH
61855: CALL_OW 50
61859: GO 61873
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
61861: CALL_OW 45
61865: PPUSH
61866: LD_INT 1
61868: PPUSH
61869: CALL_OW 51
// end ;
61873: GO 61747
61875: POP
61876: POP
// end ;
61877: PPOPN 2
61879: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
61880: LD_EXP 39
61884: PUSH
61885: LD_EXP 85
61889: AND
61890: IFFALSE 62112
61892: GO 61894
61894: DISABLE
61895: LD_INT 0
61897: PPUSH
61898: PPUSH
61899: PPUSH
61900: PPUSH
61901: PPUSH
61902: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
61903: LD_ADDR_VAR 0 6
61907: PUSH
61908: LD_INT 22
61910: PUSH
61911: LD_OWVAR 2
61915: PUSH
61916: EMPTY
61917: LIST
61918: LIST
61919: PUSH
61920: LD_INT 21
61922: PUSH
61923: LD_INT 1
61925: PUSH
61926: EMPTY
61927: LIST
61928: LIST
61929: PUSH
61930: LD_INT 3
61932: PUSH
61933: LD_INT 23
61935: PUSH
61936: LD_INT 0
61938: PUSH
61939: EMPTY
61940: LIST
61941: LIST
61942: PUSH
61943: EMPTY
61944: LIST
61945: LIST
61946: PUSH
61947: EMPTY
61948: LIST
61949: LIST
61950: LIST
61951: PPUSH
61952: CALL_OW 69
61956: ST_TO_ADDR
// if not tmp then
61957: LD_VAR 0 6
61961: NOT
61962: IFFALSE 61966
// exit ;
61964: GO 62112
// s1 := rand ( 1 , 4 ) ;
61966: LD_ADDR_VAR 0 2
61970: PUSH
61971: LD_INT 1
61973: PPUSH
61974: LD_INT 4
61976: PPUSH
61977: CALL_OW 12
61981: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
61982: LD_ADDR_VAR 0 4
61986: PUSH
61987: LD_VAR 0 6
61991: PUSH
61992: LD_INT 1
61994: ARRAY
61995: PPUSH
61996: LD_VAR 0 2
62000: PPUSH
62001: CALL_OW 259
62005: ST_TO_ADDR
// if s1 = 1 then
62006: LD_VAR 0 2
62010: PUSH
62011: LD_INT 1
62013: EQUAL
62014: IFFALSE 62034
// s2 := rand ( 2 , 4 ) else
62016: LD_ADDR_VAR 0 3
62020: PUSH
62021: LD_INT 2
62023: PPUSH
62024: LD_INT 4
62026: PPUSH
62027: CALL_OW 12
62031: ST_TO_ADDR
62032: GO 62042
// s2 := 1 ;
62034: LD_ADDR_VAR 0 3
62038: PUSH
62039: LD_INT 1
62041: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
62042: LD_ADDR_VAR 0 5
62046: PUSH
62047: LD_VAR 0 6
62051: PUSH
62052: LD_INT 1
62054: ARRAY
62055: PPUSH
62056: LD_VAR 0 3
62060: PPUSH
62061: CALL_OW 259
62065: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
62066: LD_VAR 0 6
62070: PUSH
62071: LD_INT 1
62073: ARRAY
62074: PPUSH
62075: LD_VAR 0 2
62079: PPUSH
62080: LD_VAR 0 5
62084: PPUSH
62085: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
62089: LD_VAR 0 6
62093: PUSH
62094: LD_INT 1
62096: ARRAY
62097: PPUSH
62098: LD_VAR 0 3
62102: PPUSH
62103: LD_VAR 0 4
62107: PPUSH
62108: CALL_OW 237
// end ;
62112: PPOPN 6
62114: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
62115: LD_EXP 39
62119: PUSH
62120: LD_EXP 86
62124: AND
62125: IFFALSE 62204
62127: GO 62129
62129: DISABLE
62130: LD_INT 0
62132: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
62133: LD_ADDR_VAR 0 1
62137: PUSH
62138: LD_INT 22
62140: PUSH
62141: LD_OWVAR 2
62145: PUSH
62146: EMPTY
62147: LIST
62148: LIST
62149: PUSH
62150: LD_INT 30
62152: PUSH
62153: LD_INT 3
62155: PUSH
62156: EMPTY
62157: LIST
62158: LIST
62159: PUSH
62160: EMPTY
62161: LIST
62162: LIST
62163: PPUSH
62164: CALL_OW 69
62168: ST_TO_ADDR
// if not tmp then
62169: LD_VAR 0 1
62173: NOT
62174: IFFALSE 62178
// exit ;
62176: GO 62204
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
62178: LD_VAR 0 1
62182: PUSH
62183: LD_INT 1
62185: PPUSH
62186: LD_VAR 0 1
62190: PPUSH
62191: CALL_OW 12
62195: ARRAY
62196: PPUSH
62197: LD_INT 1
62199: PPUSH
62200: CALL_OW 234
// end ;
62204: PPOPN 1
62206: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
62207: LD_EXP 39
62211: PUSH
62212: LD_EXP 87
62216: AND
62217: IFFALSE 62329
62219: GO 62221
62221: DISABLE
62222: LD_INT 0
62224: PPUSH
62225: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
62226: LD_ADDR_VAR 0 2
62230: PUSH
62231: LD_INT 22
62233: PUSH
62234: LD_OWVAR 2
62238: PUSH
62239: EMPTY
62240: LIST
62241: LIST
62242: PUSH
62243: LD_INT 2
62245: PUSH
62246: LD_INT 30
62248: PUSH
62249: LD_INT 27
62251: PUSH
62252: EMPTY
62253: LIST
62254: LIST
62255: PUSH
62256: LD_INT 30
62258: PUSH
62259: LD_INT 26
62261: PUSH
62262: EMPTY
62263: LIST
62264: LIST
62265: PUSH
62266: LD_INT 30
62268: PUSH
62269: LD_INT 28
62271: PUSH
62272: EMPTY
62273: LIST
62274: LIST
62275: PUSH
62276: EMPTY
62277: LIST
62278: LIST
62279: LIST
62280: LIST
62281: PUSH
62282: EMPTY
62283: LIST
62284: LIST
62285: PPUSH
62286: CALL_OW 69
62290: ST_TO_ADDR
// if not tmp then
62291: LD_VAR 0 2
62295: NOT
62296: IFFALSE 62300
// exit ;
62298: GO 62329
// for i in tmp do
62300: LD_ADDR_VAR 0 1
62304: PUSH
62305: LD_VAR 0 2
62309: PUSH
62310: FOR_IN
62311: IFFALSE 62327
// SetLives ( i , 1 ) ;
62313: LD_VAR 0 1
62317: PPUSH
62318: LD_INT 1
62320: PPUSH
62321: CALL_OW 234
62325: GO 62310
62327: POP
62328: POP
// end ;
62329: PPOPN 2
62331: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
62332: LD_EXP 39
62336: PUSH
62337: LD_EXP 88
62341: AND
62342: IFFALSE 62629
62344: GO 62346
62346: DISABLE
62347: LD_INT 0
62349: PPUSH
62350: PPUSH
62351: PPUSH
// begin i := rand ( 1 , 7 ) ;
62352: LD_ADDR_VAR 0 1
62356: PUSH
62357: LD_INT 1
62359: PPUSH
62360: LD_INT 7
62362: PPUSH
62363: CALL_OW 12
62367: ST_TO_ADDR
// case i of 1 :
62368: LD_VAR 0 1
62372: PUSH
62373: LD_INT 1
62375: DOUBLE
62376: EQUAL
62377: IFTRUE 62381
62379: GO 62391
62381: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
62382: LD_STRING earthquake(getX(game), 0, 32)
62384: PPUSH
62385: CALL_OW 559
62389: GO 62629
62391: LD_INT 2
62393: DOUBLE
62394: EQUAL
62395: IFTRUE 62399
62397: GO 62413
62399: POP
// begin ToLua ( displayStucuk(); ) ;
62400: LD_STRING displayStucuk();
62402: PPUSH
62403: CALL_OW 559
// ResetFog ;
62407: CALL_OW 335
// end ; 3 :
62411: GO 62629
62413: LD_INT 3
62415: DOUBLE
62416: EQUAL
62417: IFTRUE 62421
62419: GO 62525
62421: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
62422: LD_ADDR_VAR 0 2
62426: PUSH
62427: LD_INT 22
62429: PUSH
62430: LD_OWVAR 2
62434: PUSH
62435: EMPTY
62436: LIST
62437: LIST
62438: PUSH
62439: LD_INT 25
62441: PUSH
62442: LD_INT 1
62444: PUSH
62445: EMPTY
62446: LIST
62447: LIST
62448: PUSH
62449: EMPTY
62450: LIST
62451: LIST
62452: PPUSH
62453: CALL_OW 69
62457: ST_TO_ADDR
// if not tmp then
62458: LD_VAR 0 2
62462: NOT
62463: IFFALSE 62467
// exit ;
62465: GO 62629
// un := tmp [ rand ( 1 , tmp ) ] ;
62467: LD_ADDR_VAR 0 3
62471: PUSH
62472: LD_VAR 0 2
62476: PUSH
62477: LD_INT 1
62479: PPUSH
62480: LD_VAR 0 2
62484: PPUSH
62485: CALL_OW 12
62489: ARRAY
62490: ST_TO_ADDR
// if Crawls ( un ) then
62491: LD_VAR 0 3
62495: PPUSH
62496: CALL_OW 318
62500: IFFALSE 62511
// ComWalk ( un ) ;
62502: LD_VAR 0 3
62506: PPUSH
62507: CALL_OW 138
// SetClass ( un , class_mortar ) ;
62511: LD_VAR 0 3
62515: PPUSH
62516: LD_INT 8
62518: PPUSH
62519: CALL_OW 336
// end ; 4 :
62523: GO 62629
62525: LD_INT 4
62527: DOUBLE
62528: EQUAL
62529: IFTRUE 62533
62531: GO 62607
62533: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
62534: LD_ADDR_VAR 0 2
62538: PUSH
62539: LD_INT 22
62541: PUSH
62542: LD_OWVAR 2
62546: PUSH
62547: EMPTY
62548: LIST
62549: LIST
62550: PUSH
62551: LD_INT 30
62553: PUSH
62554: LD_INT 29
62556: PUSH
62557: EMPTY
62558: LIST
62559: LIST
62560: PUSH
62561: EMPTY
62562: LIST
62563: LIST
62564: PPUSH
62565: CALL_OW 69
62569: ST_TO_ADDR
// if not tmp then
62570: LD_VAR 0 2
62574: NOT
62575: IFFALSE 62579
// exit ;
62577: GO 62629
// CenterNowOnUnits ( tmp [ 1 ] ) ;
62579: LD_VAR 0 2
62583: PUSH
62584: LD_INT 1
62586: ARRAY
62587: PPUSH
62588: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
62592: LD_VAR 0 2
62596: PUSH
62597: LD_INT 1
62599: ARRAY
62600: PPUSH
62601: CALL_OW 65
// end ; 5 .. 7 :
62605: GO 62629
62607: LD_INT 5
62609: DOUBLE
62610: GREATEREQUAL
62611: IFFALSE 62619
62613: LD_INT 7
62615: DOUBLE
62616: LESSEQUAL
62617: IFTRUE 62621
62619: GO 62628
62621: POP
// StreamSibBomb ; end ;
62622: CALL 58866 0 0
62626: GO 62629
62628: POP
// end ;
62629: PPOPN 3
62631: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
62632: LD_EXP 39
62636: PUSH
62637: LD_EXP 89
62641: AND
62642: IFFALSE 62798
62644: GO 62646
62646: DISABLE
62647: LD_INT 0
62649: PPUSH
62650: PPUSH
62651: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
62652: LD_ADDR_VAR 0 2
62656: PUSH
62657: LD_INT 81
62659: PUSH
62660: LD_OWVAR 2
62664: PUSH
62665: EMPTY
62666: LIST
62667: LIST
62668: PUSH
62669: LD_INT 2
62671: PUSH
62672: LD_INT 21
62674: PUSH
62675: LD_INT 1
62677: PUSH
62678: EMPTY
62679: LIST
62680: LIST
62681: PUSH
62682: LD_INT 21
62684: PUSH
62685: LD_INT 2
62687: PUSH
62688: EMPTY
62689: LIST
62690: LIST
62691: PUSH
62692: EMPTY
62693: LIST
62694: LIST
62695: LIST
62696: PUSH
62697: EMPTY
62698: LIST
62699: LIST
62700: PPUSH
62701: CALL_OW 69
62705: ST_TO_ADDR
// if not tmp then
62706: LD_VAR 0 2
62710: NOT
62711: IFFALSE 62715
// exit ;
62713: GO 62798
// p := 0 ;
62715: LD_ADDR_VAR 0 3
62719: PUSH
62720: LD_INT 0
62722: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
62723: LD_INT 35
62725: PPUSH
62726: CALL_OW 67
// p := p + 1 ;
62730: LD_ADDR_VAR 0 3
62734: PUSH
62735: LD_VAR 0 3
62739: PUSH
62740: LD_INT 1
62742: PLUS
62743: ST_TO_ADDR
// for i in tmp do
62744: LD_ADDR_VAR 0 1
62748: PUSH
62749: LD_VAR 0 2
62753: PUSH
62754: FOR_IN
62755: IFFALSE 62786
// if GetLives ( i ) < 1000 then
62757: LD_VAR 0 1
62761: PPUSH
62762: CALL_OW 256
62766: PUSH
62767: LD_INT 1000
62769: LESS
62770: IFFALSE 62784
// SetLives ( i , 1000 ) ;
62772: LD_VAR 0 1
62776: PPUSH
62777: LD_INT 1000
62779: PPUSH
62780: CALL_OW 234
62784: GO 62754
62786: POP
62787: POP
// until p > 20 ;
62788: LD_VAR 0 3
62792: PUSH
62793: LD_INT 20
62795: GREATER
62796: IFFALSE 62723
// end ;
62798: PPOPN 3
62800: END
// every 0 0$1 trigger StreamModeActive and sTime do
62801: LD_EXP 39
62805: PUSH
62806: LD_EXP 90
62810: AND
62811: IFFALSE 62846
62813: GO 62815
62815: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
62816: LD_INT 28
62818: PPUSH
62819: LD_OWVAR 2
62823: PPUSH
62824: LD_INT 2
62826: PPUSH
62827: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
62831: LD_INT 30
62833: PPUSH
62834: LD_OWVAR 2
62838: PPUSH
62839: LD_INT 2
62841: PPUSH
62842: CALL_OW 322
// end ;
62846: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
62847: LD_EXP 39
62851: PUSH
62852: LD_EXP 91
62856: AND
62857: IFFALSE 62978
62859: GO 62861
62861: DISABLE
62862: LD_INT 0
62864: PPUSH
62865: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
62866: LD_ADDR_VAR 0 2
62870: PUSH
62871: LD_INT 22
62873: PUSH
62874: LD_OWVAR 2
62878: PUSH
62879: EMPTY
62880: LIST
62881: LIST
62882: PUSH
62883: LD_INT 21
62885: PUSH
62886: LD_INT 1
62888: PUSH
62889: EMPTY
62890: LIST
62891: LIST
62892: PUSH
62893: LD_INT 3
62895: PUSH
62896: LD_INT 23
62898: PUSH
62899: LD_INT 0
62901: PUSH
62902: EMPTY
62903: LIST
62904: LIST
62905: PUSH
62906: EMPTY
62907: LIST
62908: LIST
62909: PUSH
62910: EMPTY
62911: LIST
62912: LIST
62913: LIST
62914: PPUSH
62915: CALL_OW 69
62919: ST_TO_ADDR
// if not tmp then
62920: LD_VAR 0 2
62924: NOT
62925: IFFALSE 62929
// exit ;
62927: GO 62978
// for i in tmp do
62929: LD_ADDR_VAR 0 1
62933: PUSH
62934: LD_VAR 0 2
62938: PUSH
62939: FOR_IN
62940: IFFALSE 62976
// begin if Crawls ( i ) then
62942: LD_VAR 0 1
62946: PPUSH
62947: CALL_OW 318
62951: IFFALSE 62962
// ComWalk ( i ) ;
62953: LD_VAR 0 1
62957: PPUSH
62958: CALL_OW 138
// SetClass ( i , 2 ) ;
62962: LD_VAR 0 1
62966: PPUSH
62967: LD_INT 2
62969: PPUSH
62970: CALL_OW 336
// end ;
62974: GO 62939
62976: POP
62977: POP
// end ;
62978: PPOPN 2
62980: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
62981: LD_EXP 39
62985: PUSH
62986: LD_EXP 92
62990: AND
62991: IFFALSE 63279
62993: GO 62995
62995: DISABLE
62996: LD_INT 0
62998: PPUSH
62999: PPUSH
63000: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
63001: LD_OWVAR 2
63005: PPUSH
63006: LD_INT 9
63008: PPUSH
63009: LD_INT 1
63011: PPUSH
63012: LD_INT 1
63014: PPUSH
63015: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
63019: LD_INT 9
63021: PPUSH
63022: LD_OWVAR 2
63026: PPUSH
63027: CALL_OW 343
// uc_side := 9 ;
63031: LD_ADDR_OWVAR 20
63035: PUSH
63036: LD_INT 9
63038: ST_TO_ADDR
// uc_nation := 2 ;
63039: LD_ADDR_OWVAR 21
63043: PUSH
63044: LD_INT 2
63046: ST_TO_ADDR
// hc_name := Dark Warrior ;
63047: LD_ADDR_OWVAR 26
63051: PUSH
63052: LD_STRING Dark Warrior
63054: ST_TO_ADDR
// hc_gallery :=  ;
63055: LD_ADDR_OWVAR 33
63059: PUSH
63060: LD_STRING 
63062: ST_TO_ADDR
// hc_noskilllimit := true ;
63063: LD_ADDR_OWVAR 76
63067: PUSH
63068: LD_INT 1
63070: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
63071: LD_ADDR_OWVAR 31
63075: PUSH
63076: LD_INT 30
63078: PUSH
63079: LD_INT 30
63081: PUSH
63082: LD_INT 30
63084: PUSH
63085: LD_INT 30
63087: PUSH
63088: EMPTY
63089: LIST
63090: LIST
63091: LIST
63092: LIST
63093: ST_TO_ADDR
// un := CreateHuman ;
63094: LD_ADDR_VAR 0 3
63098: PUSH
63099: CALL_OW 44
63103: ST_TO_ADDR
// hc_noskilllimit := false ;
63104: LD_ADDR_OWVAR 76
63108: PUSH
63109: LD_INT 0
63111: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
63112: LD_VAR 0 3
63116: PPUSH
63117: LD_INT 1
63119: PPUSH
63120: CALL_OW 51
// ToLua ( playRanger() ) ;
63124: LD_STRING playRanger()
63126: PPUSH
63127: CALL_OW 559
// p := 0 ;
63131: LD_ADDR_VAR 0 2
63135: PUSH
63136: LD_INT 0
63138: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
63139: LD_INT 35
63141: PPUSH
63142: CALL_OW 67
// p := p + 1 ;
63146: LD_ADDR_VAR 0 2
63150: PUSH
63151: LD_VAR 0 2
63155: PUSH
63156: LD_INT 1
63158: PLUS
63159: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
63160: LD_VAR 0 3
63164: PPUSH
63165: CALL_OW 256
63169: PUSH
63170: LD_INT 1000
63172: LESS
63173: IFFALSE 63187
// SetLives ( un , 1000 ) ;
63175: LD_VAR 0 3
63179: PPUSH
63180: LD_INT 1000
63182: PPUSH
63183: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
63187: LD_VAR 0 3
63191: PPUSH
63192: LD_INT 81
63194: PUSH
63195: LD_OWVAR 2
63199: PUSH
63200: EMPTY
63201: LIST
63202: LIST
63203: PUSH
63204: LD_INT 91
63206: PUSH
63207: LD_VAR 0 3
63211: PUSH
63212: LD_INT 30
63214: PUSH
63215: EMPTY
63216: LIST
63217: LIST
63218: LIST
63219: PUSH
63220: EMPTY
63221: LIST
63222: LIST
63223: PPUSH
63224: CALL_OW 69
63228: PPUSH
63229: LD_VAR 0 3
63233: PPUSH
63234: CALL_OW 74
63238: PPUSH
63239: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
63243: LD_VAR 0 2
63247: PUSH
63248: LD_INT 80
63250: GREATER
63251: PUSH
63252: LD_VAR 0 3
63256: PPUSH
63257: CALL_OW 301
63261: OR
63262: IFFALSE 63139
// if un then
63264: LD_VAR 0 3
63268: IFFALSE 63279
// RemoveUnit ( un ) ;
63270: LD_VAR 0 3
63274: PPUSH
63275: CALL_OW 64
// end ;
63279: PPOPN 3
63281: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
63282: LD_EXP 93
63286: IFFALSE 63402
63288: GO 63290
63290: DISABLE
63291: LD_INT 0
63293: PPUSH
63294: PPUSH
63295: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
63296: LD_ADDR_VAR 0 2
63300: PUSH
63301: LD_INT 81
63303: PUSH
63304: LD_OWVAR 2
63308: PUSH
63309: EMPTY
63310: LIST
63311: LIST
63312: PUSH
63313: LD_INT 21
63315: PUSH
63316: LD_INT 1
63318: PUSH
63319: EMPTY
63320: LIST
63321: LIST
63322: PUSH
63323: EMPTY
63324: LIST
63325: LIST
63326: PPUSH
63327: CALL_OW 69
63331: ST_TO_ADDR
// ToLua ( playComputer() ) ;
63332: LD_STRING playComputer()
63334: PPUSH
63335: CALL_OW 559
// if not tmp then
63339: LD_VAR 0 2
63343: NOT
63344: IFFALSE 63348
// exit ;
63346: GO 63402
// for i in tmp do
63348: LD_ADDR_VAR 0 1
63352: PUSH
63353: LD_VAR 0 2
63357: PUSH
63358: FOR_IN
63359: IFFALSE 63400
// for j := 1 to 4 do
63361: LD_ADDR_VAR 0 3
63365: PUSH
63366: DOUBLE
63367: LD_INT 1
63369: DEC
63370: ST_TO_ADDR
63371: LD_INT 4
63373: PUSH
63374: FOR_TO
63375: IFFALSE 63396
// SetSkill ( i , j , 10 ) ;
63377: LD_VAR 0 1
63381: PPUSH
63382: LD_VAR 0 3
63386: PPUSH
63387: LD_INT 10
63389: PPUSH
63390: CALL_OW 237
63394: GO 63374
63396: POP
63397: POP
63398: GO 63358
63400: POP
63401: POP
// end ;
63402: PPOPN 3
63404: END
// every 0 0$1 trigger s30 do var i , tmp ;
63405: LD_EXP 94
63409: IFFALSE 63478
63411: GO 63413
63413: DISABLE
63414: LD_INT 0
63416: PPUSH
63417: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
63418: LD_ADDR_VAR 0 2
63422: PUSH
63423: LD_INT 22
63425: PUSH
63426: LD_OWVAR 2
63430: PUSH
63431: EMPTY
63432: LIST
63433: LIST
63434: PPUSH
63435: CALL_OW 69
63439: ST_TO_ADDR
// if not tmp then
63440: LD_VAR 0 2
63444: NOT
63445: IFFALSE 63449
// exit ;
63447: GO 63478
// for i in tmp do
63449: LD_ADDR_VAR 0 1
63453: PUSH
63454: LD_VAR 0 2
63458: PUSH
63459: FOR_IN
63460: IFFALSE 63476
// SetLives ( i , 300 ) ;
63462: LD_VAR 0 1
63466: PPUSH
63467: LD_INT 300
63469: PPUSH
63470: CALL_OW 234
63474: GO 63459
63476: POP
63477: POP
// end ;
63478: PPOPN 2
63480: END
// every 0 0$1 trigger s60 do var i , tmp ;
63481: LD_EXP 95
63485: IFFALSE 63554
63487: GO 63489
63489: DISABLE
63490: LD_INT 0
63492: PPUSH
63493: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
63494: LD_ADDR_VAR 0 2
63498: PUSH
63499: LD_INT 22
63501: PUSH
63502: LD_OWVAR 2
63506: PUSH
63507: EMPTY
63508: LIST
63509: LIST
63510: PPUSH
63511: CALL_OW 69
63515: ST_TO_ADDR
// if not tmp then
63516: LD_VAR 0 2
63520: NOT
63521: IFFALSE 63525
// exit ;
63523: GO 63554
// for i in tmp do
63525: LD_ADDR_VAR 0 1
63529: PUSH
63530: LD_VAR 0 2
63534: PUSH
63535: FOR_IN
63536: IFFALSE 63552
// SetLives ( i , 600 ) ;
63538: LD_VAR 0 1
63542: PPUSH
63543: LD_INT 600
63545: PPUSH
63546: CALL_OW 234
63550: GO 63535
63552: POP
63553: POP
// end ;
63554: PPOPN 2
63556: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
63557: LD_INT 0
63559: PPUSH
// case cmd of 301 :
63560: LD_VAR 0 1
63564: PUSH
63565: LD_INT 301
63567: DOUBLE
63568: EQUAL
63569: IFTRUE 63573
63571: GO 63605
63573: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
63574: LD_VAR 0 6
63578: PPUSH
63579: LD_VAR 0 7
63583: PPUSH
63584: LD_VAR 0 8
63588: PPUSH
63589: LD_VAR 0 4
63593: PPUSH
63594: LD_VAR 0 5
63598: PPUSH
63599: CALL 64814 0 5
63603: GO 63726
63605: LD_INT 302
63607: DOUBLE
63608: EQUAL
63609: IFTRUE 63613
63611: GO 63650
63613: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
63614: LD_VAR 0 6
63618: PPUSH
63619: LD_VAR 0 7
63623: PPUSH
63624: LD_VAR 0 8
63628: PPUSH
63629: LD_VAR 0 9
63633: PPUSH
63634: LD_VAR 0 4
63638: PPUSH
63639: LD_VAR 0 5
63643: PPUSH
63644: CALL 64905 0 6
63648: GO 63726
63650: LD_INT 303
63652: DOUBLE
63653: EQUAL
63654: IFTRUE 63658
63656: GO 63695
63658: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
63659: LD_VAR 0 6
63663: PPUSH
63664: LD_VAR 0 7
63668: PPUSH
63669: LD_VAR 0 8
63673: PPUSH
63674: LD_VAR 0 9
63678: PPUSH
63679: LD_VAR 0 4
63683: PPUSH
63684: LD_VAR 0 5
63688: PPUSH
63689: CALL 63731 0 6
63693: GO 63726
63695: LD_INT 304
63697: DOUBLE
63698: EQUAL
63699: IFTRUE 63703
63701: GO 63725
63703: POP
// hHackTeleport ( unit , x , y ) ; end ;
63704: LD_VAR 0 2
63708: PPUSH
63709: LD_VAR 0 4
63713: PPUSH
63714: LD_VAR 0 5
63718: PPUSH
63719: CALL 65498 0 3
63723: GO 63726
63725: POP
// end ;
63726: LD_VAR 0 12
63730: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
63731: LD_INT 0
63733: PPUSH
63734: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
63735: LD_VAR 0 1
63739: PUSH
63740: LD_INT 1
63742: LESS
63743: PUSH
63744: LD_VAR 0 1
63748: PUSH
63749: LD_INT 3
63751: GREATER
63752: OR
63753: PUSH
63754: LD_VAR 0 5
63758: PPUSH
63759: LD_VAR 0 6
63763: PPUSH
63764: CALL_OW 428
63768: OR
63769: IFFALSE 63773
// exit ;
63771: GO 64501
// uc_side := your_side ;
63773: LD_ADDR_OWVAR 20
63777: PUSH
63778: LD_OWVAR 2
63782: ST_TO_ADDR
// uc_nation := nation ;
63783: LD_ADDR_OWVAR 21
63787: PUSH
63788: LD_VAR 0 1
63792: ST_TO_ADDR
// bc_level = 1 ;
63793: LD_ADDR_OWVAR 43
63797: PUSH
63798: LD_INT 1
63800: ST_TO_ADDR
// case btype of 1 :
63801: LD_VAR 0 2
63805: PUSH
63806: LD_INT 1
63808: DOUBLE
63809: EQUAL
63810: IFTRUE 63814
63812: GO 63825
63814: POP
// bc_type := b_depot ; 2 :
63815: LD_ADDR_OWVAR 42
63819: PUSH
63820: LD_INT 0
63822: ST_TO_ADDR
63823: GO 64445
63825: LD_INT 2
63827: DOUBLE
63828: EQUAL
63829: IFTRUE 63833
63831: GO 63844
63833: POP
// bc_type := b_warehouse ; 3 :
63834: LD_ADDR_OWVAR 42
63838: PUSH
63839: LD_INT 1
63841: ST_TO_ADDR
63842: GO 64445
63844: LD_INT 3
63846: DOUBLE
63847: EQUAL
63848: IFTRUE 63852
63850: GO 63863
63852: POP
// bc_type := b_lab ; 4 .. 9 :
63853: LD_ADDR_OWVAR 42
63857: PUSH
63858: LD_INT 6
63860: ST_TO_ADDR
63861: GO 64445
63863: LD_INT 4
63865: DOUBLE
63866: GREATEREQUAL
63867: IFFALSE 63875
63869: LD_INT 9
63871: DOUBLE
63872: LESSEQUAL
63873: IFTRUE 63877
63875: GO 63937
63877: POP
// begin bc_type := b_lab_half ;
63878: LD_ADDR_OWVAR 42
63882: PUSH
63883: LD_INT 7
63885: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
63886: LD_ADDR_OWVAR 44
63890: PUSH
63891: LD_INT 10
63893: PUSH
63894: LD_INT 11
63896: PUSH
63897: LD_INT 12
63899: PUSH
63900: LD_INT 15
63902: PUSH
63903: LD_INT 14
63905: PUSH
63906: LD_INT 13
63908: PUSH
63909: EMPTY
63910: LIST
63911: LIST
63912: LIST
63913: LIST
63914: LIST
63915: LIST
63916: PUSH
63917: LD_VAR 0 2
63921: PUSH
63922: LD_INT 3
63924: MINUS
63925: ARRAY
63926: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
63927: LD_ADDR_OWVAR 45
63931: PUSH
63932: LD_INT 9
63934: ST_TO_ADDR
// end ; 10 .. 13 :
63935: GO 64445
63937: LD_INT 10
63939: DOUBLE
63940: GREATEREQUAL
63941: IFFALSE 63949
63943: LD_INT 13
63945: DOUBLE
63946: LESSEQUAL
63947: IFTRUE 63951
63949: GO 64028
63951: POP
// begin bc_type := b_lab_full ;
63952: LD_ADDR_OWVAR 42
63956: PUSH
63957: LD_INT 8
63959: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
63960: LD_ADDR_OWVAR 44
63964: PUSH
63965: LD_INT 10
63967: PUSH
63968: LD_INT 12
63970: PUSH
63971: LD_INT 14
63973: PUSH
63974: LD_INT 13
63976: PUSH
63977: EMPTY
63978: LIST
63979: LIST
63980: LIST
63981: LIST
63982: PUSH
63983: LD_VAR 0 2
63987: PUSH
63988: LD_INT 9
63990: MINUS
63991: ARRAY
63992: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
63993: LD_ADDR_OWVAR 45
63997: PUSH
63998: LD_INT 11
64000: PUSH
64001: LD_INT 15
64003: PUSH
64004: LD_INT 12
64006: PUSH
64007: LD_INT 15
64009: PUSH
64010: EMPTY
64011: LIST
64012: LIST
64013: LIST
64014: LIST
64015: PUSH
64016: LD_VAR 0 2
64020: PUSH
64021: LD_INT 9
64023: MINUS
64024: ARRAY
64025: ST_TO_ADDR
// end ; 14 :
64026: GO 64445
64028: LD_INT 14
64030: DOUBLE
64031: EQUAL
64032: IFTRUE 64036
64034: GO 64047
64036: POP
// bc_type := b_workshop ; 15 :
64037: LD_ADDR_OWVAR 42
64041: PUSH
64042: LD_INT 2
64044: ST_TO_ADDR
64045: GO 64445
64047: LD_INT 15
64049: DOUBLE
64050: EQUAL
64051: IFTRUE 64055
64053: GO 64066
64055: POP
// bc_type := b_factory ; 16 :
64056: LD_ADDR_OWVAR 42
64060: PUSH
64061: LD_INT 3
64063: ST_TO_ADDR
64064: GO 64445
64066: LD_INT 16
64068: DOUBLE
64069: EQUAL
64070: IFTRUE 64074
64072: GO 64085
64074: POP
// bc_type := b_ext_gun ; 17 :
64075: LD_ADDR_OWVAR 42
64079: PUSH
64080: LD_INT 17
64082: ST_TO_ADDR
64083: GO 64445
64085: LD_INT 17
64087: DOUBLE
64088: EQUAL
64089: IFTRUE 64093
64091: GO 64121
64093: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
64094: LD_ADDR_OWVAR 42
64098: PUSH
64099: LD_INT 19
64101: PUSH
64102: LD_INT 23
64104: PUSH
64105: LD_INT 19
64107: PUSH
64108: EMPTY
64109: LIST
64110: LIST
64111: LIST
64112: PUSH
64113: LD_VAR 0 1
64117: ARRAY
64118: ST_TO_ADDR
64119: GO 64445
64121: LD_INT 18
64123: DOUBLE
64124: EQUAL
64125: IFTRUE 64129
64127: GO 64140
64129: POP
// bc_type := b_ext_radar ; 19 :
64130: LD_ADDR_OWVAR 42
64134: PUSH
64135: LD_INT 20
64137: ST_TO_ADDR
64138: GO 64445
64140: LD_INT 19
64142: DOUBLE
64143: EQUAL
64144: IFTRUE 64148
64146: GO 64159
64148: POP
// bc_type := b_ext_radio ; 20 :
64149: LD_ADDR_OWVAR 42
64153: PUSH
64154: LD_INT 22
64156: ST_TO_ADDR
64157: GO 64445
64159: LD_INT 20
64161: DOUBLE
64162: EQUAL
64163: IFTRUE 64167
64165: GO 64178
64167: POP
// bc_type := b_ext_siberium ; 21 :
64168: LD_ADDR_OWVAR 42
64172: PUSH
64173: LD_INT 21
64175: ST_TO_ADDR
64176: GO 64445
64178: LD_INT 21
64180: DOUBLE
64181: EQUAL
64182: IFTRUE 64186
64184: GO 64197
64186: POP
// bc_type := b_ext_computer ; 22 :
64187: LD_ADDR_OWVAR 42
64191: PUSH
64192: LD_INT 24
64194: ST_TO_ADDR
64195: GO 64445
64197: LD_INT 22
64199: DOUBLE
64200: EQUAL
64201: IFTRUE 64205
64203: GO 64216
64205: POP
// bc_type := b_ext_track ; 23 :
64206: LD_ADDR_OWVAR 42
64210: PUSH
64211: LD_INT 16
64213: ST_TO_ADDR
64214: GO 64445
64216: LD_INT 23
64218: DOUBLE
64219: EQUAL
64220: IFTRUE 64224
64222: GO 64235
64224: POP
// bc_type := b_ext_laser ; 24 :
64225: LD_ADDR_OWVAR 42
64229: PUSH
64230: LD_INT 25
64232: ST_TO_ADDR
64233: GO 64445
64235: LD_INT 24
64237: DOUBLE
64238: EQUAL
64239: IFTRUE 64243
64241: GO 64254
64243: POP
// bc_type := b_control_tower ; 25 :
64244: LD_ADDR_OWVAR 42
64248: PUSH
64249: LD_INT 36
64251: ST_TO_ADDR
64252: GO 64445
64254: LD_INT 25
64256: DOUBLE
64257: EQUAL
64258: IFTRUE 64262
64260: GO 64273
64262: POP
// bc_type := b_breastwork ; 26 :
64263: LD_ADDR_OWVAR 42
64267: PUSH
64268: LD_INT 31
64270: ST_TO_ADDR
64271: GO 64445
64273: LD_INT 26
64275: DOUBLE
64276: EQUAL
64277: IFTRUE 64281
64279: GO 64292
64281: POP
// bc_type := b_bunker ; 27 :
64282: LD_ADDR_OWVAR 42
64286: PUSH
64287: LD_INT 32
64289: ST_TO_ADDR
64290: GO 64445
64292: LD_INT 27
64294: DOUBLE
64295: EQUAL
64296: IFTRUE 64300
64298: GO 64311
64300: POP
// bc_type := b_turret ; 28 :
64301: LD_ADDR_OWVAR 42
64305: PUSH
64306: LD_INT 33
64308: ST_TO_ADDR
64309: GO 64445
64311: LD_INT 28
64313: DOUBLE
64314: EQUAL
64315: IFTRUE 64319
64317: GO 64330
64319: POP
// bc_type := b_armoury ; 29 :
64320: LD_ADDR_OWVAR 42
64324: PUSH
64325: LD_INT 4
64327: ST_TO_ADDR
64328: GO 64445
64330: LD_INT 29
64332: DOUBLE
64333: EQUAL
64334: IFTRUE 64338
64336: GO 64349
64338: POP
// bc_type := b_barracks ; 30 :
64339: LD_ADDR_OWVAR 42
64343: PUSH
64344: LD_INT 5
64346: ST_TO_ADDR
64347: GO 64445
64349: LD_INT 30
64351: DOUBLE
64352: EQUAL
64353: IFTRUE 64357
64355: GO 64368
64357: POP
// bc_type := b_solar_power ; 31 :
64358: LD_ADDR_OWVAR 42
64362: PUSH
64363: LD_INT 27
64365: ST_TO_ADDR
64366: GO 64445
64368: LD_INT 31
64370: DOUBLE
64371: EQUAL
64372: IFTRUE 64376
64374: GO 64387
64376: POP
// bc_type := b_oil_power ; 32 :
64377: LD_ADDR_OWVAR 42
64381: PUSH
64382: LD_INT 26
64384: ST_TO_ADDR
64385: GO 64445
64387: LD_INT 32
64389: DOUBLE
64390: EQUAL
64391: IFTRUE 64395
64393: GO 64406
64395: POP
// bc_type := b_siberite_power ; 33 :
64396: LD_ADDR_OWVAR 42
64400: PUSH
64401: LD_INT 28
64403: ST_TO_ADDR
64404: GO 64445
64406: LD_INT 33
64408: DOUBLE
64409: EQUAL
64410: IFTRUE 64414
64412: GO 64425
64414: POP
// bc_type := b_oil_mine ; 34 :
64415: LD_ADDR_OWVAR 42
64419: PUSH
64420: LD_INT 29
64422: ST_TO_ADDR
64423: GO 64445
64425: LD_INT 34
64427: DOUBLE
64428: EQUAL
64429: IFTRUE 64433
64431: GO 64444
64433: POP
// bc_type := b_siberite_mine ; end ;
64434: LD_ADDR_OWVAR 42
64438: PUSH
64439: LD_INT 30
64441: ST_TO_ADDR
64442: GO 64445
64444: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
64445: LD_ADDR_VAR 0 8
64449: PUSH
64450: LD_VAR 0 5
64454: PPUSH
64455: LD_VAR 0 6
64459: PPUSH
64460: LD_VAR 0 3
64464: PPUSH
64465: CALL_OW 47
64469: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
64470: LD_OWVAR 42
64474: PUSH
64475: LD_INT 32
64477: PUSH
64478: LD_INT 33
64480: PUSH
64481: EMPTY
64482: LIST
64483: LIST
64484: IN
64485: IFFALSE 64501
// PlaceWeaponTurret ( b , weapon ) ;
64487: LD_VAR 0 8
64491: PPUSH
64492: LD_VAR 0 4
64496: PPUSH
64497: CALL_OW 431
// end ;
64501: LD_VAR 0 7
64505: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
64506: LD_INT 0
64508: PPUSH
64509: PPUSH
64510: PPUSH
64511: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
64512: LD_ADDR_VAR 0 4
64516: PUSH
64517: LD_INT 22
64519: PUSH
64520: LD_OWVAR 2
64524: PUSH
64525: EMPTY
64526: LIST
64527: LIST
64528: PUSH
64529: LD_INT 2
64531: PUSH
64532: LD_INT 30
64534: PUSH
64535: LD_INT 0
64537: PUSH
64538: EMPTY
64539: LIST
64540: LIST
64541: PUSH
64542: LD_INT 30
64544: PUSH
64545: LD_INT 1
64547: PUSH
64548: EMPTY
64549: LIST
64550: LIST
64551: PUSH
64552: EMPTY
64553: LIST
64554: LIST
64555: LIST
64556: PUSH
64557: EMPTY
64558: LIST
64559: LIST
64560: PPUSH
64561: CALL_OW 69
64565: ST_TO_ADDR
// if not tmp then
64566: LD_VAR 0 4
64570: NOT
64571: IFFALSE 64575
// exit ;
64573: GO 64634
// for i in tmp do
64575: LD_ADDR_VAR 0 2
64579: PUSH
64580: LD_VAR 0 4
64584: PUSH
64585: FOR_IN
64586: IFFALSE 64632
// for j = 1 to 3 do
64588: LD_ADDR_VAR 0 3
64592: PUSH
64593: DOUBLE
64594: LD_INT 1
64596: DEC
64597: ST_TO_ADDR
64598: LD_INT 3
64600: PUSH
64601: FOR_TO
64602: IFFALSE 64628
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
64604: LD_VAR 0 2
64608: PPUSH
64609: CALL_OW 274
64613: PPUSH
64614: LD_VAR 0 3
64618: PPUSH
64619: LD_INT 99999
64621: PPUSH
64622: CALL_OW 277
64626: GO 64601
64628: POP
64629: POP
64630: GO 64585
64632: POP
64633: POP
// end ;
64634: LD_VAR 0 1
64638: RET
// export function hHackSetLevel10 ; var i , j ; begin
64639: LD_INT 0
64641: PPUSH
64642: PPUSH
64643: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
64644: LD_ADDR_VAR 0 2
64648: PUSH
64649: LD_INT 21
64651: PUSH
64652: LD_INT 1
64654: PUSH
64655: EMPTY
64656: LIST
64657: LIST
64658: PPUSH
64659: CALL_OW 69
64663: PUSH
64664: FOR_IN
64665: IFFALSE 64717
// if IsSelected ( i ) then
64667: LD_VAR 0 2
64671: PPUSH
64672: CALL_OW 306
64676: IFFALSE 64715
// begin for j := 1 to 4 do
64678: LD_ADDR_VAR 0 3
64682: PUSH
64683: DOUBLE
64684: LD_INT 1
64686: DEC
64687: ST_TO_ADDR
64688: LD_INT 4
64690: PUSH
64691: FOR_TO
64692: IFFALSE 64713
// SetSkill ( i , j , 10 ) ;
64694: LD_VAR 0 2
64698: PPUSH
64699: LD_VAR 0 3
64703: PPUSH
64704: LD_INT 10
64706: PPUSH
64707: CALL_OW 237
64711: GO 64691
64713: POP
64714: POP
// end ;
64715: GO 64664
64717: POP
64718: POP
// end ;
64719: LD_VAR 0 1
64723: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
64724: LD_INT 0
64726: PPUSH
64727: PPUSH
64728: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
64729: LD_ADDR_VAR 0 2
64733: PUSH
64734: LD_INT 22
64736: PUSH
64737: LD_OWVAR 2
64741: PUSH
64742: EMPTY
64743: LIST
64744: LIST
64745: PUSH
64746: LD_INT 21
64748: PUSH
64749: LD_INT 1
64751: PUSH
64752: EMPTY
64753: LIST
64754: LIST
64755: PUSH
64756: EMPTY
64757: LIST
64758: LIST
64759: PPUSH
64760: CALL_OW 69
64764: PUSH
64765: FOR_IN
64766: IFFALSE 64807
// begin for j := 1 to 4 do
64768: LD_ADDR_VAR 0 3
64772: PUSH
64773: DOUBLE
64774: LD_INT 1
64776: DEC
64777: ST_TO_ADDR
64778: LD_INT 4
64780: PUSH
64781: FOR_TO
64782: IFFALSE 64803
// SetSkill ( i , j , 10 ) ;
64784: LD_VAR 0 2
64788: PPUSH
64789: LD_VAR 0 3
64793: PPUSH
64794: LD_INT 10
64796: PPUSH
64797: CALL_OW 237
64801: GO 64781
64803: POP
64804: POP
// end ;
64805: GO 64765
64807: POP
64808: POP
// end ;
64809: LD_VAR 0 1
64813: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
64814: LD_INT 0
64816: PPUSH
// uc_side := your_side ;
64817: LD_ADDR_OWVAR 20
64821: PUSH
64822: LD_OWVAR 2
64826: ST_TO_ADDR
// uc_nation := nation ;
64827: LD_ADDR_OWVAR 21
64831: PUSH
64832: LD_VAR 0 1
64836: ST_TO_ADDR
// InitHc ;
64837: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
64841: LD_INT 0
64843: PPUSH
64844: LD_VAR 0 2
64848: PPUSH
64849: LD_VAR 0 3
64853: PPUSH
64854: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
64858: LD_VAR 0 4
64862: PPUSH
64863: LD_VAR 0 5
64867: PPUSH
64868: CALL_OW 428
64872: PUSH
64873: LD_INT 0
64875: EQUAL
64876: IFFALSE 64900
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
64878: CALL_OW 44
64882: PPUSH
64883: LD_VAR 0 4
64887: PPUSH
64888: LD_VAR 0 5
64892: PPUSH
64893: LD_INT 1
64895: PPUSH
64896: CALL_OW 48
// end ;
64900: LD_VAR 0 6
64904: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
64905: LD_INT 0
64907: PPUSH
64908: PPUSH
// uc_side := your_side ;
64909: LD_ADDR_OWVAR 20
64913: PUSH
64914: LD_OWVAR 2
64918: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
64919: LD_VAR 0 1
64923: PUSH
64924: LD_INT 1
64926: PUSH
64927: LD_INT 2
64929: PUSH
64930: LD_INT 3
64932: PUSH
64933: LD_INT 4
64935: PUSH
64936: LD_INT 5
64938: PUSH
64939: EMPTY
64940: LIST
64941: LIST
64942: LIST
64943: LIST
64944: LIST
64945: IN
64946: IFFALSE 64958
// uc_nation := nation_american else
64948: LD_ADDR_OWVAR 21
64952: PUSH
64953: LD_INT 1
64955: ST_TO_ADDR
64956: GO 65001
// if chassis in [ 11 , 12 , 13 , 14 ] then
64958: LD_VAR 0 1
64962: PUSH
64963: LD_INT 11
64965: PUSH
64966: LD_INT 12
64968: PUSH
64969: LD_INT 13
64971: PUSH
64972: LD_INT 14
64974: PUSH
64975: EMPTY
64976: LIST
64977: LIST
64978: LIST
64979: LIST
64980: IN
64981: IFFALSE 64993
// uc_nation := nation_arabian else
64983: LD_ADDR_OWVAR 21
64987: PUSH
64988: LD_INT 2
64990: ST_TO_ADDR
64991: GO 65001
// uc_nation := nation_russian ;
64993: LD_ADDR_OWVAR 21
64997: PUSH
64998: LD_INT 3
65000: ST_TO_ADDR
// vc_chassis := chassis ;
65001: LD_ADDR_OWVAR 37
65005: PUSH
65006: LD_VAR 0 1
65010: ST_TO_ADDR
// vc_engine := engine ;
65011: LD_ADDR_OWVAR 39
65015: PUSH
65016: LD_VAR 0 2
65020: ST_TO_ADDR
// vc_control := control ;
65021: LD_ADDR_OWVAR 38
65025: PUSH
65026: LD_VAR 0 3
65030: ST_TO_ADDR
// vc_weapon := weapon ;
65031: LD_ADDR_OWVAR 40
65035: PUSH
65036: LD_VAR 0 4
65040: ST_TO_ADDR
// un := CreateVehicle ;
65041: LD_ADDR_VAR 0 8
65045: PUSH
65046: CALL_OW 45
65050: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
65051: LD_VAR 0 8
65055: PPUSH
65056: LD_INT 0
65058: PPUSH
65059: LD_INT 5
65061: PPUSH
65062: CALL_OW 12
65066: PPUSH
65067: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
65071: LD_VAR 0 8
65075: PPUSH
65076: LD_VAR 0 5
65080: PPUSH
65081: LD_VAR 0 6
65085: PPUSH
65086: LD_INT 1
65088: PPUSH
65089: CALL_OW 48
// end ;
65093: LD_VAR 0 7
65097: RET
// export hInvincible ; every 1 do
65098: GO 65100
65100: DISABLE
// hInvincible := [ ] ;
65101: LD_ADDR_EXP 96
65105: PUSH
65106: EMPTY
65107: ST_TO_ADDR
65108: END
// every 10 do var i ;
65109: GO 65111
65111: DISABLE
65112: LD_INT 0
65114: PPUSH
// begin enable ;
65115: ENABLE
// if not hInvincible then
65116: LD_EXP 96
65120: NOT
65121: IFFALSE 65125
// exit ;
65123: GO 65169
// for i in hInvincible do
65125: LD_ADDR_VAR 0 1
65129: PUSH
65130: LD_EXP 96
65134: PUSH
65135: FOR_IN
65136: IFFALSE 65167
// if GetLives ( i ) < 1000 then
65138: LD_VAR 0 1
65142: PPUSH
65143: CALL_OW 256
65147: PUSH
65148: LD_INT 1000
65150: LESS
65151: IFFALSE 65165
// SetLives ( i , 1000 ) ;
65153: LD_VAR 0 1
65157: PPUSH
65158: LD_INT 1000
65160: PPUSH
65161: CALL_OW 234
65165: GO 65135
65167: POP
65168: POP
// end ;
65169: PPOPN 1
65171: END
// export function hHackInvincible ; var i ; begin
65172: LD_INT 0
65174: PPUSH
65175: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
65176: LD_ADDR_VAR 0 2
65180: PUSH
65181: LD_INT 2
65183: PUSH
65184: LD_INT 21
65186: PUSH
65187: LD_INT 1
65189: PUSH
65190: EMPTY
65191: LIST
65192: LIST
65193: PUSH
65194: LD_INT 21
65196: PUSH
65197: LD_INT 2
65199: PUSH
65200: EMPTY
65201: LIST
65202: LIST
65203: PUSH
65204: EMPTY
65205: LIST
65206: LIST
65207: LIST
65208: PPUSH
65209: CALL_OW 69
65213: PUSH
65214: FOR_IN
65215: IFFALSE 65276
// if IsSelected ( i ) then
65217: LD_VAR 0 2
65221: PPUSH
65222: CALL_OW 306
65226: IFFALSE 65274
// begin if i in hInvincible then
65228: LD_VAR 0 2
65232: PUSH
65233: LD_EXP 96
65237: IN
65238: IFFALSE 65258
// hInvincible := hInvincible diff i else
65240: LD_ADDR_EXP 96
65244: PUSH
65245: LD_EXP 96
65249: PUSH
65250: LD_VAR 0 2
65254: DIFF
65255: ST_TO_ADDR
65256: GO 65274
// hInvincible := hInvincible union i ;
65258: LD_ADDR_EXP 96
65262: PUSH
65263: LD_EXP 96
65267: PUSH
65268: LD_VAR 0 2
65272: UNION
65273: ST_TO_ADDR
// end ;
65274: GO 65214
65276: POP
65277: POP
// end ;
65278: LD_VAR 0 1
65282: RET
// export function hHackInvisible ; var i , j ; begin
65283: LD_INT 0
65285: PPUSH
65286: PPUSH
65287: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
65288: LD_ADDR_VAR 0 2
65292: PUSH
65293: LD_INT 21
65295: PUSH
65296: LD_INT 1
65298: PUSH
65299: EMPTY
65300: LIST
65301: LIST
65302: PPUSH
65303: CALL_OW 69
65307: PUSH
65308: FOR_IN
65309: IFFALSE 65333
// if IsSelected ( i ) then
65311: LD_VAR 0 2
65315: PPUSH
65316: CALL_OW 306
65320: IFFALSE 65331
// ComForceInvisible ( i ) ;
65322: LD_VAR 0 2
65326: PPUSH
65327: CALL_OW 496
65331: GO 65308
65333: POP
65334: POP
// end ;
65335: LD_VAR 0 1
65339: RET
// export function hHackChangeYourSide ; begin
65340: LD_INT 0
65342: PPUSH
// if your_side = 8 then
65343: LD_OWVAR 2
65347: PUSH
65348: LD_INT 8
65350: EQUAL
65351: IFFALSE 65363
// your_side := 0 else
65353: LD_ADDR_OWVAR 2
65357: PUSH
65358: LD_INT 0
65360: ST_TO_ADDR
65361: GO 65377
// your_side := your_side + 1 ;
65363: LD_ADDR_OWVAR 2
65367: PUSH
65368: LD_OWVAR 2
65372: PUSH
65373: LD_INT 1
65375: PLUS
65376: ST_TO_ADDR
// end ;
65377: LD_VAR 0 1
65381: RET
// export function hHackChangeUnitSide ; var i , j ; begin
65382: LD_INT 0
65384: PPUSH
65385: PPUSH
65386: PPUSH
// for i in all_units do
65387: LD_ADDR_VAR 0 2
65391: PUSH
65392: LD_OWVAR 3
65396: PUSH
65397: FOR_IN
65398: IFFALSE 65476
// if IsSelected ( i ) then
65400: LD_VAR 0 2
65404: PPUSH
65405: CALL_OW 306
65409: IFFALSE 65474
// begin j := GetSide ( i ) ;
65411: LD_ADDR_VAR 0 3
65415: PUSH
65416: LD_VAR 0 2
65420: PPUSH
65421: CALL_OW 255
65425: ST_TO_ADDR
// if j = 8 then
65426: LD_VAR 0 3
65430: PUSH
65431: LD_INT 8
65433: EQUAL
65434: IFFALSE 65446
// j := 0 else
65436: LD_ADDR_VAR 0 3
65440: PUSH
65441: LD_INT 0
65443: ST_TO_ADDR
65444: GO 65460
// j := j + 1 ;
65446: LD_ADDR_VAR 0 3
65450: PUSH
65451: LD_VAR 0 3
65455: PUSH
65456: LD_INT 1
65458: PLUS
65459: ST_TO_ADDR
// SetSide ( i , j ) ;
65460: LD_VAR 0 2
65464: PPUSH
65465: LD_VAR 0 3
65469: PPUSH
65470: CALL_OW 235
// end ;
65474: GO 65397
65476: POP
65477: POP
// end ;
65478: LD_VAR 0 1
65482: RET
// export function hHackFog ; begin
65483: LD_INT 0
65485: PPUSH
// FogOff ( true ) ;
65486: LD_INT 1
65488: PPUSH
65489: CALL_OW 344
// end ;
65493: LD_VAR 0 1
65497: RET
// export function hHackTeleport ( unit , x , y ) ; begin
65498: LD_INT 0
65500: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
65501: LD_VAR 0 1
65505: PPUSH
65506: LD_VAR 0 2
65510: PPUSH
65511: LD_VAR 0 3
65515: PPUSH
65516: LD_INT 1
65518: PPUSH
65519: LD_INT 1
65521: PPUSH
65522: CALL_OW 483
// CenterOnXY ( x , y ) ;
65526: LD_VAR 0 2
65530: PPUSH
65531: LD_VAR 0 3
65535: PPUSH
65536: CALL_OW 84
// end ;
65540: LD_VAR 0 4
65544: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
65545: LD_INT 0
65547: PPUSH
65548: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
65549: LD_VAR 0 1
65553: NOT
65554: PUSH
65555: LD_VAR 0 2
65559: PPUSH
65560: LD_VAR 0 3
65564: PPUSH
65565: CALL_OW 488
65569: NOT
65570: OR
65571: PUSH
65572: LD_VAR 0 1
65576: PPUSH
65577: CALL_OW 266
65581: PUSH
65582: LD_INT 3
65584: NONEQUAL
65585: PUSH
65586: LD_VAR 0 1
65590: PPUSH
65591: CALL_OW 247
65595: PUSH
65596: LD_INT 1
65598: EQUAL
65599: NOT
65600: AND
65601: OR
65602: IFFALSE 65606
// exit ;
65604: GO 65755
// if GetType ( factory ) = unit_human then
65606: LD_VAR 0 1
65610: PPUSH
65611: CALL_OW 247
65615: PUSH
65616: LD_INT 1
65618: EQUAL
65619: IFFALSE 65636
// factory := IsInUnit ( factory ) ;
65621: LD_ADDR_VAR 0 1
65625: PUSH
65626: LD_VAR 0 1
65630: PPUSH
65631: CALL_OW 310
65635: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
65636: LD_VAR 0 1
65640: PPUSH
65641: CALL_OW 266
65645: PUSH
65646: LD_INT 3
65648: NONEQUAL
65649: IFFALSE 65653
// exit ;
65651: GO 65755
// if HexInfo ( x , y ) = factory then
65653: LD_VAR 0 2
65657: PPUSH
65658: LD_VAR 0 3
65662: PPUSH
65663: CALL_OW 428
65667: PUSH
65668: LD_VAR 0 1
65672: EQUAL
65673: IFFALSE 65700
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
65675: LD_ADDR_EXP 97
65679: PUSH
65680: LD_EXP 97
65684: PPUSH
65685: LD_VAR 0 1
65689: PPUSH
65690: LD_INT 0
65692: PPUSH
65693: CALL_OW 1
65697: ST_TO_ADDR
65698: GO 65751
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
65700: LD_ADDR_EXP 97
65704: PUSH
65705: LD_EXP 97
65709: PPUSH
65710: LD_VAR 0 1
65714: PPUSH
65715: LD_VAR 0 1
65719: PPUSH
65720: CALL_OW 255
65724: PUSH
65725: LD_VAR 0 1
65729: PUSH
65730: LD_VAR 0 2
65734: PUSH
65735: LD_VAR 0 3
65739: PUSH
65740: EMPTY
65741: LIST
65742: LIST
65743: LIST
65744: LIST
65745: PPUSH
65746: CALL_OW 1
65750: ST_TO_ADDR
// UpdateFactoryWaypoints ;
65751: CALL 65760 0 0
// end ;
65755: LD_VAR 0 4
65759: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
65760: LD_INT 0
65762: PPUSH
65763: PPUSH
65764: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
65765: LD_STRING resetFactoryWaypoint();
65767: PPUSH
65768: CALL_OW 559
// if factoryWaypoints then
65772: LD_EXP 97
65776: IFFALSE 65902
// begin list := PrepareArray ( factoryWaypoints ) ;
65778: LD_ADDR_VAR 0 3
65782: PUSH
65783: LD_EXP 97
65787: PPUSH
65788: CALL 43980 0 1
65792: ST_TO_ADDR
// for i := 1 to list do
65793: LD_ADDR_VAR 0 2
65797: PUSH
65798: DOUBLE
65799: LD_INT 1
65801: DEC
65802: ST_TO_ADDR
65803: LD_VAR 0 3
65807: PUSH
65808: FOR_TO
65809: IFFALSE 65900
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
65811: LD_STRING setFactoryWaypointXY(
65813: PUSH
65814: LD_VAR 0 3
65818: PUSH
65819: LD_VAR 0 2
65823: ARRAY
65824: PUSH
65825: LD_INT 1
65827: ARRAY
65828: STR
65829: PUSH
65830: LD_STRING ,
65832: STR
65833: PUSH
65834: LD_VAR 0 3
65838: PUSH
65839: LD_VAR 0 2
65843: ARRAY
65844: PUSH
65845: LD_INT 2
65847: ARRAY
65848: STR
65849: PUSH
65850: LD_STRING ,
65852: STR
65853: PUSH
65854: LD_VAR 0 3
65858: PUSH
65859: LD_VAR 0 2
65863: ARRAY
65864: PUSH
65865: LD_INT 3
65867: ARRAY
65868: STR
65869: PUSH
65870: LD_STRING ,
65872: STR
65873: PUSH
65874: LD_VAR 0 3
65878: PUSH
65879: LD_VAR 0 2
65883: ARRAY
65884: PUSH
65885: LD_INT 4
65887: ARRAY
65888: STR
65889: PUSH
65890: LD_STRING )
65892: STR
65893: PPUSH
65894: CALL_OW 559
65898: GO 65808
65900: POP
65901: POP
// end ; end ;
65902: LD_VAR 0 1
65906: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
65907: LD_INT 0
65909: PPUSH
// if HexInfo ( x , y ) = warehouse then
65910: LD_VAR 0 2
65914: PPUSH
65915: LD_VAR 0 3
65919: PPUSH
65920: CALL_OW 428
65924: PUSH
65925: LD_VAR 0 1
65929: EQUAL
65930: IFFALSE 65957
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
65932: LD_ADDR_EXP 98
65936: PUSH
65937: LD_EXP 98
65941: PPUSH
65942: LD_VAR 0 1
65946: PPUSH
65947: LD_INT 0
65949: PPUSH
65950: CALL_OW 1
65954: ST_TO_ADDR
65955: GO 66008
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
65957: LD_ADDR_EXP 98
65961: PUSH
65962: LD_EXP 98
65966: PPUSH
65967: LD_VAR 0 1
65971: PPUSH
65972: LD_VAR 0 1
65976: PPUSH
65977: CALL_OW 255
65981: PUSH
65982: LD_VAR 0 1
65986: PUSH
65987: LD_VAR 0 2
65991: PUSH
65992: LD_VAR 0 3
65996: PUSH
65997: EMPTY
65998: LIST
65999: LIST
66000: LIST
66001: LIST
66002: PPUSH
66003: CALL_OW 1
66007: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
66008: CALL 66017 0 0
// end ;
66012: LD_VAR 0 4
66016: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
66017: LD_INT 0
66019: PPUSH
66020: PPUSH
66021: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
66022: LD_STRING resetWarehouseGatheringPoints();
66024: PPUSH
66025: CALL_OW 559
// if warehouseGatheringPoints then
66029: LD_EXP 98
66033: IFFALSE 66159
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
66035: LD_ADDR_VAR 0 3
66039: PUSH
66040: LD_EXP 98
66044: PPUSH
66045: CALL 43980 0 1
66049: ST_TO_ADDR
// for i := 1 to list do
66050: LD_ADDR_VAR 0 2
66054: PUSH
66055: DOUBLE
66056: LD_INT 1
66058: DEC
66059: ST_TO_ADDR
66060: LD_VAR 0 3
66064: PUSH
66065: FOR_TO
66066: IFFALSE 66157
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
66068: LD_STRING setWarehouseGatheringPointXY(
66070: PUSH
66071: LD_VAR 0 3
66075: PUSH
66076: LD_VAR 0 2
66080: ARRAY
66081: PUSH
66082: LD_INT 1
66084: ARRAY
66085: STR
66086: PUSH
66087: LD_STRING ,
66089: STR
66090: PUSH
66091: LD_VAR 0 3
66095: PUSH
66096: LD_VAR 0 2
66100: ARRAY
66101: PUSH
66102: LD_INT 2
66104: ARRAY
66105: STR
66106: PUSH
66107: LD_STRING ,
66109: STR
66110: PUSH
66111: LD_VAR 0 3
66115: PUSH
66116: LD_VAR 0 2
66120: ARRAY
66121: PUSH
66122: LD_INT 3
66124: ARRAY
66125: STR
66126: PUSH
66127: LD_STRING ,
66129: STR
66130: PUSH
66131: LD_VAR 0 3
66135: PUSH
66136: LD_VAR 0 2
66140: ARRAY
66141: PUSH
66142: LD_INT 4
66144: ARRAY
66145: STR
66146: PUSH
66147: LD_STRING )
66149: STR
66150: PPUSH
66151: CALL_OW 559
66155: GO 66065
66157: POP
66158: POP
// end ; end ;
66159: LD_VAR 0 1
66163: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
66164: LD_EXP 98
66168: IFFALSE 66853
66170: GO 66172
66172: DISABLE
66173: LD_INT 0
66175: PPUSH
66176: PPUSH
66177: PPUSH
66178: PPUSH
66179: PPUSH
66180: PPUSH
66181: PPUSH
66182: PPUSH
66183: PPUSH
// begin enable ;
66184: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
66185: LD_ADDR_VAR 0 3
66189: PUSH
66190: LD_EXP 98
66194: PPUSH
66195: CALL 43980 0 1
66199: ST_TO_ADDR
// if not list then
66200: LD_VAR 0 3
66204: NOT
66205: IFFALSE 66209
// exit ;
66207: GO 66853
// for i := 1 to list do
66209: LD_ADDR_VAR 0 1
66213: PUSH
66214: DOUBLE
66215: LD_INT 1
66217: DEC
66218: ST_TO_ADDR
66219: LD_VAR 0 3
66223: PUSH
66224: FOR_TO
66225: IFFALSE 66851
// begin depot := list [ i ] [ 2 ] ;
66227: LD_ADDR_VAR 0 8
66231: PUSH
66232: LD_VAR 0 3
66236: PUSH
66237: LD_VAR 0 1
66241: ARRAY
66242: PUSH
66243: LD_INT 2
66245: ARRAY
66246: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
66247: LD_ADDR_VAR 0 5
66251: PUSH
66252: LD_VAR 0 3
66256: PUSH
66257: LD_VAR 0 1
66261: ARRAY
66262: PUSH
66263: LD_INT 1
66265: ARRAY
66266: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
66267: LD_VAR 0 8
66271: PPUSH
66272: CALL_OW 301
66276: PUSH
66277: LD_VAR 0 5
66281: PUSH
66282: LD_VAR 0 8
66286: PPUSH
66287: CALL_OW 255
66291: NONEQUAL
66292: OR
66293: IFFALSE 66322
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
66295: LD_ADDR_EXP 98
66299: PUSH
66300: LD_EXP 98
66304: PPUSH
66305: LD_VAR 0 8
66309: PPUSH
66310: LD_INT 0
66312: PPUSH
66313: CALL_OW 1
66317: ST_TO_ADDR
// exit ;
66318: POP
66319: POP
66320: GO 66853
// end ; x := list [ i ] [ 3 ] ;
66322: LD_ADDR_VAR 0 6
66326: PUSH
66327: LD_VAR 0 3
66331: PUSH
66332: LD_VAR 0 1
66336: ARRAY
66337: PUSH
66338: LD_INT 3
66340: ARRAY
66341: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
66342: LD_ADDR_VAR 0 7
66346: PUSH
66347: LD_VAR 0 3
66351: PUSH
66352: LD_VAR 0 1
66356: ARRAY
66357: PUSH
66358: LD_INT 4
66360: ARRAY
66361: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
66362: LD_ADDR_VAR 0 9
66366: PUSH
66367: LD_VAR 0 6
66371: PPUSH
66372: LD_VAR 0 7
66376: PPUSH
66377: LD_INT 16
66379: PPUSH
66380: CALL 42564 0 3
66384: ST_TO_ADDR
// if not cratesNearbyPoint then
66385: LD_VAR 0 9
66389: NOT
66390: IFFALSE 66396
// exit ;
66392: POP
66393: POP
66394: GO 66853
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
66396: LD_ADDR_VAR 0 4
66400: PUSH
66401: LD_INT 22
66403: PUSH
66404: LD_VAR 0 5
66408: PUSH
66409: EMPTY
66410: LIST
66411: LIST
66412: PUSH
66413: LD_INT 3
66415: PUSH
66416: LD_INT 60
66418: PUSH
66419: EMPTY
66420: LIST
66421: PUSH
66422: EMPTY
66423: LIST
66424: LIST
66425: PUSH
66426: LD_INT 91
66428: PUSH
66429: LD_VAR 0 8
66433: PUSH
66434: LD_INT 6
66436: PUSH
66437: EMPTY
66438: LIST
66439: LIST
66440: LIST
66441: PUSH
66442: LD_INT 2
66444: PUSH
66445: LD_INT 25
66447: PUSH
66448: LD_INT 2
66450: PUSH
66451: EMPTY
66452: LIST
66453: LIST
66454: PUSH
66455: LD_INT 25
66457: PUSH
66458: LD_INT 16
66460: PUSH
66461: EMPTY
66462: LIST
66463: LIST
66464: PUSH
66465: EMPTY
66466: LIST
66467: LIST
66468: LIST
66469: PUSH
66470: EMPTY
66471: LIST
66472: LIST
66473: LIST
66474: LIST
66475: PPUSH
66476: CALL_OW 69
66480: PUSH
66481: LD_VAR 0 8
66485: PPUSH
66486: CALL_OW 313
66490: PPUSH
66491: LD_INT 3
66493: PUSH
66494: LD_INT 60
66496: PUSH
66497: EMPTY
66498: LIST
66499: PUSH
66500: EMPTY
66501: LIST
66502: LIST
66503: PUSH
66504: LD_INT 2
66506: PUSH
66507: LD_INT 25
66509: PUSH
66510: LD_INT 2
66512: PUSH
66513: EMPTY
66514: LIST
66515: LIST
66516: PUSH
66517: LD_INT 25
66519: PUSH
66520: LD_INT 16
66522: PUSH
66523: EMPTY
66524: LIST
66525: LIST
66526: PUSH
66527: EMPTY
66528: LIST
66529: LIST
66530: LIST
66531: PUSH
66532: EMPTY
66533: LIST
66534: LIST
66535: PPUSH
66536: CALL_OW 72
66540: UNION
66541: ST_TO_ADDR
// if tmp then
66542: LD_VAR 0 4
66546: IFFALSE 66626
// begin tmp := ShrinkArray ( tmp , 3 ) ;
66548: LD_ADDR_VAR 0 4
66552: PUSH
66553: LD_VAR 0 4
66557: PPUSH
66558: LD_INT 3
66560: PPUSH
66561: CALL 40533 0 2
66565: ST_TO_ADDR
// for j in tmp do
66566: LD_ADDR_VAR 0 2
66570: PUSH
66571: LD_VAR 0 4
66575: PUSH
66576: FOR_IN
66577: IFFALSE 66620
// begin if IsInUnit ( j ) then
66579: LD_VAR 0 2
66583: PPUSH
66584: CALL_OW 310
66588: IFFALSE 66599
// ComExit ( j ) ;
66590: LD_VAR 0 2
66594: PPUSH
66595: CALL 40616 0 1
// AddComCollect ( j , x , y ) ;
66599: LD_VAR 0 2
66603: PPUSH
66604: LD_VAR 0 6
66608: PPUSH
66609: LD_VAR 0 7
66613: PPUSH
66614: CALL_OW 177
// end ;
66618: GO 66576
66620: POP
66621: POP
// exit ;
66622: POP
66623: POP
66624: GO 66853
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
66626: LD_ADDR_VAR 0 4
66630: PUSH
66631: LD_INT 22
66633: PUSH
66634: LD_VAR 0 5
66638: PUSH
66639: EMPTY
66640: LIST
66641: LIST
66642: PUSH
66643: LD_INT 91
66645: PUSH
66646: LD_VAR 0 8
66650: PUSH
66651: LD_INT 8
66653: PUSH
66654: EMPTY
66655: LIST
66656: LIST
66657: LIST
66658: PUSH
66659: LD_INT 2
66661: PUSH
66662: LD_INT 34
66664: PUSH
66665: LD_INT 12
66667: PUSH
66668: EMPTY
66669: LIST
66670: LIST
66671: PUSH
66672: LD_INT 34
66674: PUSH
66675: LD_INT 51
66677: PUSH
66678: EMPTY
66679: LIST
66680: LIST
66681: PUSH
66682: LD_INT 34
66684: PUSH
66685: LD_INT 32
66687: PUSH
66688: EMPTY
66689: LIST
66690: LIST
66691: PUSH
66692: LD_INT 34
66694: PUSH
66695: LD_INT 89
66697: PUSH
66698: EMPTY
66699: LIST
66700: LIST
66701: PUSH
66702: EMPTY
66703: LIST
66704: LIST
66705: LIST
66706: LIST
66707: LIST
66708: PUSH
66709: EMPTY
66710: LIST
66711: LIST
66712: LIST
66713: PPUSH
66714: CALL_OW 69
66718: ST_TO_ADDR
// if tmp then
66719: LD_VAR 0 4
66723: IFFALSE 66849
// begin for j in tmp do
66725: LD_ADDR_VAR 0 2
66729: PUSH
66730: LD_VAR 0 4
66734: PUSH
66735: FOR_IN
66736: IFFALSE 66847
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
66738: LD_VAR 0 2
66742: PPUSH
66743: CALL_OW 262
66747: PUSH
66748: LD_INT 3
66750: EQUAL
66751: PUSH
66752: LD_VAR 0 2
66756: PPUSH
66757: CALL_OW 261
66761: PUSH
66762: LD_INT 20
66764: GREATER
66765: OR
66766: PUSH
66767: LD_VAR 0 2
66771: PPUSH
66772: CALL_OW 314
66776: NOT
66777: AND
66778: PUSH
66779: LD_VAR 0 2
66783: PPUSH
66784: CALL_OW 263
66788: PUSH
66789: LD_INT 1
66791: NONEQUAL
66792: PUSH
66793: LD_VAR 0 2
66797: PPUSH
66798: CALL_OW 311
66802: OR
66803: AND
66804: IFFALSE 66845
// begin ComCollect ( j , x , y ) ;
66806: LD_VAR 0 2
66810: PPUSH
66811: LD_VAR 0 6
66815: PPUSH
66816: LD_VAR 0 7
66820: PPUSH
66821: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
66825: LD_VAR 0 2
66829: PPUSH
66830: LD_VAR 0 8
66834: PPUSH
66835: CALL_OW 172
// exit ;
66839: POP
66840: POP
66841: POP
66842: POP
66843: GO 66853
// end ;
66845: GO 66735
66847: POP
66848: POP
// end ; end ;
66849: GO 66224
66851: POP
66852: POP
// end ; end_of_file
66853: PPOPN 9
66855: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
66856: LD_VAR 0 1
66860: PUSH
66861: LD_INT 200
66863: DOUBLE
66864: GREATEREQUAL
66865: IFFALSE 66873
66867: LD_INT 299
66869: DOUBLE
66870: LESSEQUAL
66871: IFTRUE 66875
66873: GO 66907
66875: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
66876: LD_VAR 0 1
66880: PPUSH
66881: LD_VAR 0 2
66885: PPUSH
66886: LD_VAR 0 3
66890: PPUSH
66891: LD_VAR 0 4
66895: PPUSH
66896: LD_VAR 0 5
66900: PPUSH
66901: CALL 67407 0 5
66905: GO 66984
66907: LD_INT 300
66909: DOUBLE
66910: GREATEREQUAL
66911: IFFALSE 66919
66913: LD_INT 399
66915: DOUBLE
66916: LESSEQUAL
66917: IFTRUE 66921
66919: GO 66983
66921: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
66922: LD_VAR 0 1
66926: PPUSH
66927: LD_VAR 0 2
66931: PPUSH
66932: LD_VAR 0 3
66936: PPUSH
66937: LD_VAR 0 4
66941: PPUSH
66942: LD_VAR 0 5
66946: PPUSH
66947: LD_VAR 0 6
66951: PPUSH
66952: LD_VAR 0 7
66956: PPUSH
66957: LD_VAR 0 8
66961: PPUSH
66962: LD_VAR 0 9
66966: PPUSH
66967: LD_VAR 0 10
66971: PPUSH
66972: LD_VAR 0 11
66976: PPUSH
66977: CALL 63557 0 11
66981: GO 66984
66983: POP
// end ;
66984: PPOPN 11
66986: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
66987: LD_VAR 0 1
66991: PPUSH
66992: LD_VAR 0 2
66996: PPUSH
66997: LD_VAR 0 3
67001: PPUSH
67002: LD_VAR 0 4
67006: PPUSH
67007: LD_VAR 0 5
67011: PPUSH
67012: CALL 67131 0 5
// end ; end_of_file
67016: PPOPN 5
67018: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
67019: LD_INT 0
67021: PPUSH
67022: PPUSH
67023: PPUSH
67024: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
67025: LD_VAR 0 1
67029: PPUSH
67030: CALL_OW 264
67034: PUSH
67035: LD_INT 91
67037: EQUAL
67038: IFFALSE 67110
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
67040: LD_INT 68
67042: PPUSH
67043: LD_VAR 0 1
67047: PPUSH
67048: CALL_OW 255
67052: PPUSH
67053: CALL_OW 321
67057: PUSH
67058: LD_INT 2
67060: EQUAL
67061: IFFALSE 67073
// eff := 70 else
67063: LD_ADDR_VAR 0 4
67067: PUSH
67068: LD_INT 70
67070: ST_TO_ADDR
67071: GO 67081
// eff := 30 ;
67073: LD_ADDR_VAR 0 4
67077: PUSH
67078: LD_INT 30
67080: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
67081: LD_VAR 0 1
67085: PPUSH
67086: CALL_OW 250
67090: PPUSH
67091: LD_VAR 0 1
67095: PPUSH
67096: CALL_OW 251
67100: PPUSH
67101: LD_VAR 0 4
67105: PPUSH
67106: CALL_OW 495
// end ; end ;
67110: LD_VAR 0 2
67114: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
67115: LD_INT 0
67117: PPUSH
// end ;
67118: LD_VAR 0 4
67122: RET
// export function SOS_Command ( cmd ) ; begin
67123: LD_INT 0
67125: PPUSH
// end ;
67126: LD_VAR 0 2
67130: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
67131: LD_INT 0
67133: PPUSH
// end ;
67134: LD_VAR 0 6
67138: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
67139: LD_INT 0
67141: PPUSH
67142: PPUSH
// if not vehicle or not factory then
67143: LD_VAR 0 1
67147: NOT
67148: PUSH
67149: LD_VAR 0 2
67153: NOT
67154: OR
67155: IFFALSE 67159
// exit ;
67157: GO 67402
// if factoryWaypoints >= factory then
67159: LD_EXP 97
67163: PUSH
67164: LD_VAR 0 2
67168: GREATEREQUAL
67169: IFFALSE 67402
// if factoryWaypoints [ factory ] then
67171: LD_EXP 97
67175: PUSH
67176: LD_VAR 0 2
67180: ARRAY
67181: IFFALSE 67402
// begin if GetControl ( vehicle ) = control_manual then
67183: LD_VAR 0 1
67187: PPUSH
67188: CALL_OW 263
67192: PUSH
67193: LD_INT 1
67195: EQUAL
67196: IFFALSE 67289
// begin driver := IsDrivenBy ( vehicle ) ;
67198: LD_ADDR_VAR 0 4
67202: PUSH
67203: LD_VAR 0 1
67207: PPUSH
67208: CALL_OW 311
67212: ST_TO_ADDR
// if not HasTask ( driver ) then
67213: LD_VAR 0 4
67217: PPUSH
67218: CALL_OW 314
67222: NOT
67223: IFFALSE 67287
// begin ComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
67225: LD_VAR 0 4
67229: PPUSH
67230: LD_EXP 97
67234: PUSH
67235: LD_VAR 0 2
67239: ARRAY
67240: PUSH
67241: LD_INT 3
67243: ARRAY
67244: PPUSH
67245: LD_EXP 97
67249: PUSH
67250: LD_VAR 0 2
67254: ARRAY
67255: PUSH
67256: LD_INT 4
67258: ARRAY
67259: PPUSH
67260: CALL_OW 111
// AddComExitVehicle ( driver ) ;
67264: LD_VAR 0 4
67268: PPUSH
67269: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
67273: LD_VAR 0 4
67277: PPUSH
67278: LD_VAR 0 2
67282: PPUSH
67283: CALL_OW 180
// end ; end else
67287: GO 67402
// if GetControl ( vehicle ) = control_remote then
67289: LD_VAR 0 1
67293: PPUSH
67294: CALL_OW 263
67298: PUSH
67299: LD_INT 2
67301: EQUAL
67302: IFFALSE 67363
// begin wait ( 0 0$2 ) ;
67304: LD_INT 70
67306: PPUSH
67307: CALL_OW 67
// if Connect ( vehicle ) then
67311: LD_VAR 0 1
67315: PPUSH
67316: CALL 10835 0 1
67320: IFFALSE 67361
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
67322: LD_VAR 0 1
67326: PPUSH
67327: LD_EXP 97
67331: PUSH
67332: LD_VAR 0 2
67336: ARRAY
67337: PUSH
67338: LD_INT 3
67340: ARRAY
67341: PPUSH
67342: LD_EXP 97
67346: PUSH
67347: LD_VAR 0 2
67351: ARRAY
67352: PUSH
67353: LD_INT 4
67355: ARRAY
67356: PPUSH
67357: CALL_OW 171
// end else
67361: GO 67402
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
67363: LD_VAR 0 1
67367: PPUSH
67368: LD_EXP 97
67372: PUSH
67373: LD_VAR 0 2
67377: ARRAY
67378: PUSH
67379: LD_INT 3
67381: ARRAY
67382: PPUSH
67383: LD_EXP 97
67387: PUSH
67388: LD_VAR 0 2
67392: ARRAY
67393: PUSH
67394: LD_INT 4
67396: ARRAY
67397: PPUSH
67398: CALL_OW 171
// end ; end ;
67402: LD_VAR 0 3
67406: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
67407: LD_INT 0
67409: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
67410: LD_VAR 0 1
67414: PUSH
67415: LD_INT 250
67417: EQUAL
67418: PUSH
67419: LD_VAR 0 2
67423: PPUSH
67424: CALL_OW 264
67428: PUSH
67429: LD_INT 81
67431: EQUAL
67432: AND
67433: IFFALSE 67454
// MinerPlaceMine ( unit , x , y ) ;
67435: LD_VAR 0 2
67439: PPUSH
67440: LD_VAR 0 4
67444: PPUSH
67445: LD_VAR 0 5
67449: PPUSH
67450: CALL 70444 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
67454: LD_VAR 0 1
67458: PUSH
67459: LD_INT 251
67461: EQUAL
67462: PUSH
67463: LD_VAR 0 2
67467: PPUSH
67468: CALL_OW 264
67472: PUSH
67473: LD_INT 81
67475: EQUAL
67476: AND
67477: IFFALSE 67498
// MinerDetonateMine ( unit , x , y ) ;
67479: LD_VAR 0 2
67483: PPUSH
67484: LD_VAR 0 4
67488: PPUSH
67489: LD_VAR 0 5
67493: PPUSH
67494: CALL 70719 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
67498: LD_VAR 0 1
67502: PUSH
67503: LD_INT 252
67505: EQUAL
67506: PUSH
67507: LD_VAR 0 2
67511: PPUSH
67512: CALL_OW 264
67516: PUSH
67517: LD_INT 81
67519: EQUAL
67520: AND
67521: IFFALSE 67542
// MinerCreateMinefield ( unit , x , y ) ;
67523: LD_VAR 0 2
67527: PPUSH
67528: LD_VAR 0 4
67532: PPUSH
67533: LD_VAR 0 5
67537: PPUSH
67538: CALL 71136 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
67542: LD_VAR 0 1
67546: PUSH
67547: LD_INT 253
67549: EQUAL
67550: PUSH
67551: LD_VAR 0 2
67555: PPUSH
67556: CALL_OW 257
67560: PUSH
67561: LD_INT 5
67563: EQUAL
67564: AND
67565: IFFALSE 67586
// ComBinocular ( unit , x , y ) ;
67567: LD_VAR 0 2
67571: PPUSH
67572: LD_VAR 0 4
67576: PPUSH
67577: LD_VAR 0 5
67581: PPUSH
67582: CALL 71505 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
67586: LD_VAR 0 1
67590: PUSH
67591: LD_INT 254
67593: EQUAL
67594: PUSH
67595: LD_VAR 0 2
67599: PPUSH
67600: CALL_OW 264
67604: PUSH
67605: LD_INT 99
67607: EQUAL
67608: AND
67609: PUSH
67610: LD_VAR 0 3
67614: PPUSH
67615: CALL_OW 263
67619: PUSH
67620: LD_INT 3
67622: EQUAL
67623: AND
67624: IFFALSE 67640
// HackDestroyVehicle ( unit , selectedUnit ) ;
67626: LD_VAR 0 2
67630: PPUSH
67631: LD_VAR 0 3
67635: PPUSH
67636: CALL 69808 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
67640: LD_VAR 0 1
67644: PUSH
67645: LD_INT 255
67647: EQUAL
67648: PUSH
67649: LD_VAR 0 2
67653: PPUSH
67654: CALL_OW 264
67658: PUSH
67659: LD_INT 14
67661: PUSH
67662: LD_INT 53
67664: PUSH
67665: EMPTY
67666: LIST
67667: LIST
67668: IN
67669: AND
67670: PUSH
67671: LD_VAR 0 4
67675: PPUSH
67676: LD_VAR 0 5
67680: PPUSH
67681: CALL_OW 488
67685: AND
67686: IFFALSE 67710
// CutTreeXYR ( unit , x , y , 12 ) ;
67688: LD_VAR 0 2
67692: PPUSH
67693: LD_VAR 0 4
67697: PPUSH
67698: LD_VAR 0 5
67702: PPUSH
67703: LD_INT 12
67705: PPUSH
67706: CALL 67805 0 4
// if cmd = 256 then
67710: LD_VAR 0 1
67714: PUSH
67715: LD_INT 256
67717: EQUAL
67718: IFFALSE 67739
// SetFactoryWaypoint ( unit , x , y ) ;
67720: LD_VAR 0 2
67724: PPUSH
67725: LD_VAR 0 4
67729: PPUSH
67730: LD_VAR 0 5
67734: PPUSH
67735: CALL 65545 0 3
// if cmd = 257 then
67739: LD_VAR 0 1
67743: PUSH
67744: LD_INT 257
67746: EQUAL
67747: IFFALSE 67768
// SetWarehouseGatheringPoint ( unit , x , y ) ;
67749: LD_VAR 0 2
67753: PPUSH
67754: LD_VAR 0 4
67758: PPUSH
67759: LD_VAR 0 5
67763: PPUSH
67764: CALL 65907 0 3
// if cmd = 258 then
67768: LD_VAR 0 1
67772: PUSH
67773: LD_INT 258
67775: EQUAL
67776: IFFALSE 67800
// BurnTreeXYR ( unit , x , y , 8 ) ;
67778: LD_VAR 0 2
67782: PPUSH
67783: LD_VAR 0 4
67787: PPUSH
67788: LD_VAR 0 5
67792: PPUSH
67793: LD_INT 8
67795: PPUSH
67796: CALL 68199 0 4
// end ;
67800: LD_VAR 0 6
67804: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
67805: LD_INT 0
67807: PPUSH
67808: PPUSH
67809: PPUSH
67810: PPUSH
67811: PPUSH
67812: PPUSH
67813: PPUSH
67814: PPUSH
67815: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
67816: LD_VAR 0 1
67820: PPUSH
67821: CALL_OW 302
67825: NOT
67826: PUSH
67827: LD_VAR 0 2
67831: PPUSH
67832: LD_VAR 0 3
67836: PPUSH
67837: CALL_OW 488
67841: NOT
67842: OR
67843: PUSH
67844: LD_VAR 0 4
67848: NOT
67849: OR
67850: IFFALSE 67854
// exit ;
67852: GO 68194
// list := [ ] ;
67854: LD_ADDR_VAR 0 13
67858: PUSH
67859: EMPTY
67860: ST_TO_ADDR
// if x - r < 0 then
67861: LD_VAR 0 2
67865: PUSH
67866: LD_VAR 0 4
67870: MINUS
67871: PUSH
67872: LD_INT 0
67874: LESS
67875: IFFALSE 67887
// min_x := 0 else
67877: LD_ADDR_VAR 0 7
67881: PUSH
67882: LD_INT 0
67884: ST_TO_ADDR
67885: GO 67903
// min_x := x - r ;
67887: LD_ADDR_VAR 0 7
67891: PUSH
67892: LD_VAR 0 2
67896: PUSH
67897: LD_VAR 0 4
67901: MINUS
67902: ST_TO_ADDR
// if y - r < 0 then
67903: LD_VAR 0 3
67907: PUSH
67908: LD_VAR 0 4
67912: MINUS
67913: PUSH
67914: LD_INT 0
67916: LESS
67917: IFFALSE 67929
// min_y := 0 else
67919: LD_ADDR_VAR 0 8
67923: PUSH
67924: LD_INT 0
67926: ST_TO_ADDR
67927: GO 67945
// min_y := y - r ;
67929: LD_ADDR_VAR 0 8
67933: PUSH
67934: LD_VAR 0 3
67938: PUSH
67939: LD_VAR 0 4
67943: MINUS
67944: ST_TO_ADDR
// max_x := x + r ;
67945: LD_ADDR_VAR 0 9
67949: PUSH
67950: LD_VAR 0 2
67954: PUSH
67955: LD_VAR 0 4
67959: PLUS
67960: ST_TO_ADDR
// max_y := y + r ;
67961: LD_ADDR_VAR 0 10
67965: PUSH
67966: LD_VAR 0 3
67970: PUSH
67971: LD_VAR 0 4
67975: PLUS
67976: ST_TO_ADDR
// for _x = min_x to max_x do
67977: LD_ADDR_VAR 0 11
67981: PUSH
67982: DOUBLE
67983: LD_VAR 0 7
67987: DEC
67988: ST_TO_ADDR
67989: LD_VAR 0 9
67993: PUSH
67994: FOR_TO
67995: IFFALSE 68112
// for _y = min_y to max_y do
67997: LD_ADDR_VAR 0 12
68001: PUSH
68002: DOUBLE
68003: LD_VAR 0 8
68007: DEC
68008: ST_TO_ADDR
68009: LD_VAR 0 10
68013: PUSH
68014: FOR_TO
68015: IFFALSE 68108
// begin if not ValidHex ( _x , _y ) then
68017: LD_VAR 0 11
68021: PPUSH
68022: LD_VAR 0 12
68026: PPUSH
68027: CALL_OW 488
68031: NOT
68032: IFFALSE 68036
// continue ;
68034: GO 68014
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
68036: LD_VAR 0 11
68040: PPUSH
68041: LD_VAR 0 12
68045: PPUSH
68046: CALL_OW 351
68050: PUSH
68051: LD_VAR 0 11
68055: PPUSH
68056: LD_VAR 0 12
68060: PPUSH
68061: CALL_OW 554
68065: AND
68066: IFFALSE 68106
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
68068: LD_ADDR_VAR 0 13
68072: PUSH
68073: LD_VAR 0 13
68077: PPUSH
68078: LD_VAR 0 13
68082: PUSH
68083: LD_INT 1
68085: PLUS
68086: PPUSH
68087: LD_VAR 0 11
68091: PUSH
68092: LD_VAR 0 12
68096: PUSH
68097: EMPTY
68098: LIST
68099: LIST
68100: PPUSH
68101: CALL_OW 2
68105: ST_TO_ADDR
// end ;
68106: GO 68014
68108: POP
68109: POP
68110: GO 67994
68112: POP
68113: POP
// if not list then
68114: LD_VAR 0 13
68118: NOT
68119: IFFALSE 68123
// exit ;
68121: GO 68194
// for i in list do
68123: LD_ADDR_VAR 0 6
68127: PUSH
68128: LD_VAR 0 13
68132: PUSH
68133: FOR_IN
68134: IFFALSE 68192
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
68136: LD_VAR 0 1
68140: PPUSH
68141: LD_STRING M
68143: PUSH
68144: LD_VAR 0 6
68148: PUSH
68149: LD_INT 1
68151: ARRAY
68152: PUSH
68153: LD_VAR 0 6
68157: PUSH
68158: LD_INT 2
68160: ARRAY
68161: PUSH
68162: LD_INT 0
68164: PUSH
68165: LD_INT 0
68167: PUSH
68168: LD_INT 0
68170: PUSH
68171: LD_INT 0
68173: PUSH
68174: EMPTY
68175: LIST
68176: LIST
68177: LIST
68178: LIST
68179: LIST
68180: LIST
68181: LIST
68182: PUSH
68183: EMPTY
68184: LIST
68185: PPUSH
68186: CALL_OW 447
68190: GO 68133
68192: POP
68193: POP
// end ;
68194: LD_VAR 0 5
68198: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
68199: LD_INT 0
68201: PPUSH
68202: PPUSH
68203: PPUSH
68204: PPUSH
68205: PPUSH
68206: PPUSH
68207: PPUSH
68208: PPUSH
68209: PPUSH
68210: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
68211: LD_VAR 0 1
68215: PPUSH
68216: CALL_OW 302
68220: NOT
68221: PUSH
68222: LD_VAR 0 2
68226: PPUSH
68227: LD_VAR 0 3
68231: PPUSH
68232: CALL_OW 488
68236: NOT
68237: OR
68238: PUSH
68239: LD_VAR 0 4
68243: NOT
68244: OR
68245: IFFALSE 68249
// exit ;
68247: GO 68762
// list := [ ] ;
68249: LD_ADDR_VAR 0 13
68253: PUSH
68254: EMPTY
68255: ST_TO_ADDR
// if x - r < 0 then
68256: LD_VAR 0 2
68260: PUSH
68261: LD_VAR 0 4
68265: MINUS
68266: PUSH
68267: LD_INT 0
68269: LESS
68270: IFFALSE 68282
// min_x := 0 else
68272: LD_ADDR_VAR 0 7
68276: PUSH
68277: LD_INT 0
68279: ST_TO_ADDR
68280: GO 68298
// min_x := x - r ;
68282: LD_ADDR_VAR 0 7
68286: PUSH
68287: LD_VAR 0 2
68291: PUSH
68292: LD_VAR 0 4
68296: MINUS
68297: ST_TO_ADDR
// if y - r < 0 then
68298: LD_VAR 0 3
68302: PUSH
68303: LD_VAR 0 4
68307: MINUS
68308: PUSH
68309: LD_INT 0
68311: LESS
68312: IFFALSE 68324
// min_y := 0 else
68314: LD_ADDR_VAR 0 8
68318: PUSH
68319: LD_INT 0
68321: ST_TO_ADDR
68322: GO 68340
// min_y := y - r ;
68324: LD_ADDR_VAR 0 8
68328: PUSH
68329: LD_VAR 0 3
68333: PUSH
68334: LD_VAR 0 4
68338: MINUS
68339: ST_TO_ADDR
// max_x := x + r ;
68340: LD_ADDR_VAR 0 9
68344: PUSH
68345: LD_VAR 0 2
68349: PUSH
68350: LD_VAR 0 4
68354: PLUS
68355: ST_TO_ADDR
// max_y := y + r ;
68356: LD_ADDR_VAR 0 10
68360: PUSH
68361: LD_VAR 0 3
68365: PUSH
68366: LD_VAR 0 4
68370: PLUS
68371: ST_TO_ADDR
// for _x = min_x to max_x do
68372: LD_ADDR_VAR 0 11
68376: PUSH
68377: DOUBLE
68378: LD_VAR 0 7
68382: DEC
68383: ST_TO_ADDR
68384: LD_VAR 0 9
68388: PUSH
68389: FOR_TO
68390: IFFALSE 68507
// for _y = min_y to max_y do
68392: LD_ADDR_VAR 0 12
68396: PUSH
68397: DOUBLE
68398: LD_VAR 0 8
68402: DEC
68403: ST_TO_ADDR
68404: LD_VAR 0 10
68408: PUSH
68409: FOR_TO
68410: IFFALSE 68503
// begin if not ValidHex ( _x , _y ) then
68412: LD_VAR 0 11
68416: PPUSH
68417: LD_VAR 0 12
68421: PPUSH
68422: CALL_OW 488
68426: NOT
68427: IFFALSE 68431
// continue ;
68429: GO 68409
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
68431: LD_VAR 0 11
68435: PPUSH
68436: LD_VAR 0 12
68440: PPUSH
68441: CALL_OW 351
68445: PUSH
68446: LD_VAR 0 11
68450: PPUSH
68451: LD_VAR 0 12
68455: PPUSH
68456: CALL_OW 554
68460: AND
68461: IFFALSE 68501
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
68463: LD_ADDR_VAR 0 13
68467: PUSH
68468: LD_VAR 0 13
68472: PPUSH
68473: LD_VAR 0 13
68477: PUSH
68478: LD_INT 1
68480: PLUS
68481: PPUSH
68482: LD_VAR 0 11
68486: PUSH
68487: LD_VAR 0 12
68491: PUSH
68492: EMPTY
68493: LIST
68494: LIST
68495: PPUSH
68496: CALL_OW 2
68500: ST_TO_ADDR
// end ;
68501: GO 68409
68503: POP
68504: POP
68505: GO 68389
68507: POP
68508: POP
// if not list then
68509: LD_VAR 0 13
68513: NOT
68514: IFFALSE 68518
// exit ;
68516: GO 68762
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
68518: LD_ADDR_VAR 0 13
68522: PUSH
68523: LD_VAR 0 1
68527: PPUSH
68528: LD_VAR 0 13
68532: PPUSH
68533: LD_INT 1
68535: PPUSH
68536: LD_INT 1
68538: PPUSH
68539: CALL 7977 0 4
68543: ST_TO_ADDR
// ComStop ( flame ) ;
68544: LD_VAR 0 1
68548: PPUSH
68549: CALL_OW 141
// for i in list do
68553: LD_ADDR_VAR 0 6
68557: PUSH
68558: LD_VAR 0 13
68562: PUSH
68563: FOR_IN
68564: IFFALSE 68595
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
68566: LD_VAR 0 1
68570: PPUSH
68571: LD_VAR 0 6
68575: PUSH
68576: LD_INT 1
68578: ARRAY
68579: PPUSH
68580: LD_VAR 0 6
68584: PUSH
68585: LD_INT 2
68587: ARRAY
68588: PPUSH
68589: CALL_OW 176
68593: GO 68563
68595: POP
68596: POP
// repeat wait ( 0 0$1 ) ;
68597: LD_INT 35
68599: PPUSH
68600: CALL_OW 67
// task := GetTaskList ( flame ) ;
68604: LD_ADDR_VAR 0 14
68608: PUSH
68609: LD_VAR 0 1
68613: PPUSH
68614: CALL_OW 437
68618: ST_TO_ADDR
// if not task then
68619: LD_VAR 0 14
68623: NOT
68624: IFFALSE 68628
// exit ;
68626: GO 68762
// if task [ 1 ] [ 1 ] <> | then
68628: LD_VAR 0 14
68632: PUSH
68633: LD_INT 1
68635: ARRAY
68636: PUSH
68637: LD_INT 1
68639: ARRAY
68640: PUSH
68641: LD_STRING |
68643: NONEQUAL
68644: IFFALSE 68648
// exit ;
68646: GO 68762
// _x := task [ 1 ] [ 2 ] ;
68648: LD_ADDR_VAR 0 11
68652: PUSH
68653: LD_VAR 0 14
68657: PUSH
68658: LD_INT 1
68660: ARRAY
68661: PUSH
68662: LD_INT 2
68664: ARRAY
68665: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
68666: LD_ADDR_VAR 0 12
68670: PUSH
68671: LD_VAR 0 14
68675: PUSH
68676: LD_INT 1
68678: ARRAY
68679: PUSH
68680: LD_INT 3
68682: ARRAY
68683: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
68684: LD_VAR 0 11
68688: PPUSH
68689: LD_VAR 0 12
68693: PPUSH
68694: CALL_OW 351
68698: NOT
68699: PUSH
68700: LD_VAR 0 11
68704: PPUSH
68705: LD_VAR 0 12
68709: PPUSH
68710: CALL_OW 554
68714: NOT
68715: OR
68716: IFFALSE 68750
// begin task := Delete ( task , 1 ) ;
68718: LD_ADDR_VAR 0 14
68722: PUSH
68723: LD_VAR 0 14
68727: PPUSH
68728: LD_INT 1
68730: PPUSH
68731: CALL_OW 3
68735: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
68736: LD_VAR 0 1
68740: PPUSH
68741: LD_VAR 0 14
68745: PPUSH
68746: CALL_OW 446
// end ; until not HasTask ( flame ) ;
68750: LD_VAR 0 1
68754: PPUSH
68755: CALL_OW 314
68759: NOT
68760: IFFALSE 68597
// end ;
68762: LD_VAR 0 5
68766: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
68767: LD_EXP 100
68771: NOT
68772: IFFALSE 68822
68774: GO 68776
68776: DISABLE
// begin initHack := true ;
68777: LD_ADDR_EXP 100
68781: PUSH
68782: LD_INT 1
68784: ST_TO_ADDR
// hackTanks := [ ] ;
68785: LD_ADDR_EXP 101
68789: PUSH
68790: EMPTY
68791: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
68792: LD_ADDR_EXP 102
68796: PUSH
68797: EMPTY
68798: ST_TO_ADDR
// hackLimit := 3 ;
68799: LD_ADDR_EXP 103
68803: PUSH
68804: LD_INT 3
68806: ST_TO_ADDR
// hackDist := 12 ;
68807: LD_ADDR_EXP 104
68811: PUSH
68812: LD_INT 12
68814: ST_TO_ADDR
// hackCounter := [ ] ;
68815: LD_ADDR_EXP 105
68819: PUSH
68820: EMPTY
68821: ST_TO_ADDR
// end ;
68822: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
68823: LD_EXP 100
68827: PUSH
68828: LD_INT 34
68830: PUSH
68831: LD_INT 99
68833: PUSH
68834: EMPTY
68835: LIST
68836: LIST
68837: PPUSH
68838: CALL_OW 69
68842: AND
68843: IFFALSE 69096
68845: GO 68847
68847: DISABLE
68848: LD_INT 0
68850: PPUSH
68851: PPUSH
// begin enable ;
68852: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
68853: LD_ADDR_VAR 0 1
68857: PUSH
68858: LD_INT 34
68860: PUSH
68861: LD_INT 99
68863: PUSH
68864: EMPTY
68865: LIST
68866: LIST
68867: PPUSH
68868: CALL_OW 69
68872: PUSH
68873: FOR_IN
68874: IFFALSE 69094
// begin if not i in hackTanks then
68876: LD_VAR 0 1
68880: PUSH
68881: LD_EXP 101
68885: IN
68886: NOT
68887: IFFALSE 68970
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
68889: LD_ADDR_EXP 101
68893: PUSH
68894: LD_EXP 101
68898: PPUSH
68899: LD_EXP 101
68903: PUSH
68904: LD_INT 1
68906: PLUS
68907: PPUSH
68908: LD_VAR 0 1
68912: PPUSH
68913: CALL_OW 1
68917: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
68918: LD_ADDR_EXP 102
68922: PUSH
68923: LD_EXP 102
68927: PPUSH
68928: LD_EXP 102
68932: PUSH
68933: LD_INT 1
68935: PLUS
68936: PPUSH
68937: EMPTY
68938: PPUSH
68939: CALL_OW 1
68943: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
68944: LD_ADDR_EXP 105
68948: PUSH
68949: LD_EXP 105
68953: PPUSH
68954: LD_EXP 105
68958: PUSH
68959: LD_INT 1
68961: PLUS
68962: PPUSH
68963: EMPTY
68964: PPUSH
68965: CALL_OW 1
68969: ST_TO_ADDR
// end ; if not IsOk ( i ) then
68970: LD_VAR 0 1
68974: PPUSH
68975: CALL_OW 302
68979: NOT
68980: IFFALSE 68993
// begin HackUnlinkAll ( i ) ;
68982: LD_VAR 0 1
68986: PPUSH
68987: CALL 69099 0 1
// continue ;
68991: GO 68873
// end ; HackCheckCapturedStatus ( i ) ;
68993: LD_VAR 0 1
68997: PPUSH
68998: CALL 69542 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
69002: LD_ADDR_VAR 0 2
69006: PUSH
69007: LD_INT 81
69009: PUSH
69010: LD_VAR 0 1
69014: PPUSH
69015: CALL_OW 255
69019: PUSH
69020: EMPTY
69021: LIST
69022: LIST
69023: PUSH
69024: LD_INT 33
69026: PUSH
69027: LD_INT 3
69029: PUSH
69030: EMPTY
69031: LIST
69032: LIST
69033: PUSH
69034: LD_INT 91
69036: PUSH
69037: LD_VAR 0 1
69041: PUSH
69042: LD_EXP 104
69046: PUSH
69047: EMPTY
69048: LIST
69049: LIST
69050: LIST
69051: PUSH
69052: LD_INT 50
69054: PUSH
69055: EMPTY
69056: LIST
69057: PUSH
69058: EMPTY
69059: LIST
69060: LIST
69061: LIST
69062: LIST
69063: PPUSH
69064: CALL_OW 69
69068: ST_TO_ADDR
// if not tmp then
69069: LD_VAR 0 2
69073: NOT
69074: IFFALSE 69078
// continue ;
69076: GO 68873
// HackLink ( i , tmp ) ;
69078: LD_VAR 0 1
69082: PPUSH
69083: LD_VAR 0 2
69087: PPUSH
69088: CALL 69235 0 2
// end ;
69092: GO 68873
69094: POP
69095: POP
// end ;
69096: PPOPN 2
69098: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
69099: LD_INT 0
69101: PPUSH
69102: PPUSH
69103: PPUSH
// if not hack in hackTanks then
69104: LD_VAR 0 1
69108: PUSH
69109: LD_EXP 101
69113: IN
69114: NOT
69115: IFFALSE 69119
// exit ;
69117: GO 69230
// index := GetElementIndex ( hackTanks , hack ) ;
69119: LD_ADDR_VAR 0 4
69123: PUSH
69124: LD_EXP 101
69128: PPUSH
69129: LD_VAR 0 1
69133: PPUSH
69134: CALL 7274 0 2
69138: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
69139: LD_EXP 102
69143: PUSH
69144: LD_VAR 0 4
69148: ARRAY
69149: IFFALSE 69230
// begin for i in hackTanksCaptured [ index ] do
69151: LD_ADDR_VAR 0 3
69155: PUSH
69156: LD_EXP 102
69160: PUSH
69161: LD_VAR 0 4
69165: ARRAY
69166: PUSH
69167: FOR_IN
69168: IFFALSE 69194
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
69170: LD_VAR 0 3
69174: PUSH
69175: LD_INT 1
69177: ARRAY
69178: PPUSH
69179: LD_VAR 0 3
69183: PUSH
69184: LD_INT 2
69186: ARRAY
69187: PPUSH
69188: CALL_OW 235
69192: GO 69167
69194: POP
69195: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
69196: LD_ADDR_EXP 102
69200: PUSH
69201: LD_EXP 102
69205: PPUSH
69206: LD_VAR 0 4
69210: PPUSH
69211: EMPTY
69212: PPUSH
69213: CALL_OW 1
69217: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
69218: LD_VAR 0 1
69222: PPUSH
69223: LD_INT 0
69225: PPUSH
69226: CALL_OW 505
// end ; end ;
69230: LD_VAR 0 2
69234: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
69235: LD_INT 0
69237: PPUSH
69238: PPUSH
69239: PPUSH
// if not hack in hackTanks or not vehicles then
69240: LD_VAR 0 1
69244: PUSH
69245: LD_EXP 101
69249: IN
69250: NOT
69251: PUSH
69252: LD_VAR 0 2
69256: NOT
69257: OR
69258: IFFALSE 69262
// exit ;
69260: GO 69537
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
69262: LD_ADDR_VAR 0 2
69266: PUSH
69267: LD_VAR 0 1
69271: PPUSH
69272: LD_VAR 0 2
69276: PPUSH
69277: LD_INT 1
69279: PPUSH
69280: LD_INT 1
69282: PPUSH
69283: CALL 7924 0 4
69287: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
69288: LD_ADDR_VAR 0 5
69292: PUSH
69293: LD_EXP 101
69297: PPUSH
69298: LD_VAR 0 1
69302: PPUSH
69303: CALL 7274 0 2
69307: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
69308: LD_EXP 102
69312: PUSH
69313: LD_VAR 0 5
69317: ARRAY
69318: PUSH
69319: LD_EXP 103
69323: LESS
69324: IFFALSE 69513
// begin for i := 1 to vehicles do
69326: LD_ADDR_VAR 0 4
69330: PUSH
69331: DOUBLE
69332: LD_INT 1
69334: DEC
69335: ST_TO_ADDR
69336: LD_VAR 0 2
69340: PUSH
69341: FOR_TO
69342: IFFALSE 69511
// begin if hackTanksCaptured [ index ] = hackLimit then
69344: LD_EXP 102
69348: PUSH
69349: LD_VAR 0 5
69353: ARRAY
69354: PUSH
69355: LD_EXP 103
69359: EQUAL
69360: IFFALSE 69364
// break ;
69362: GO 69511
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
69364: LD_ADDR_EXP 105
69368: PUSH
69369: LD_EXP 105
69373: PPUSH
69374: LD_VAR 0 5
69378: PPUSH
69379: LD_EXP 105
69383: PUSH
69384: LD_VAR 0 5
69388: ARRAY
69389: PUSH
69390: LD_INT 1
69392: PLUS
69393: PPUSH
69394: CALL_OW 1
69398: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
69399: LD_ADDR_EXP 102
69403: PUSH
69404: LD_EXP 102
69408: PPUSH
69409: LD_VAR 0 5
69413: PUSH
69414: LD_EXP 102
69418: PUSH
69419: LD_VAR 0 5
69423: ARRAY
69424: PUSH
69425: LD_INT 1
69427: PLUS
69428: PUSH
69429: EMPTY
69430: LIST
69431: LIST
69432: PPUSH
69433: LD_VAR 0 2
69437: PUSH
69438: LD_VAR 0 4
69442: ARRAY
69443: PUSH
69444: LD_VAR 0 2
69448: PUSH
69449: LD_VAR 0 4
69453: ARRAY
69454: PPUSH
69455: CALL_OW 255
69459: PUSH
69460: EMPTY
69461: LIST
69462: LIST
69463: PPUSH
69464: CALL 7489 0 3
69468: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
69469: LD_VAR 0 2
69473: PUSH
69474: LD_VAR 0 4
69478: ARRAY
69479: PPUSH
69480: LD_VAR 0 1
69484: PPUSH
69485: CALL_OW 255
69489: PPUSH
69490: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
69494: LD_VAR 0 2
69498: PUSH
69499: LD_VAR 0 4
69503: ARRAY
69504: PPUSH
69505: CALL_OW 141
// end ;
69509: GO 69341
69511: POP
69512: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
69513: LD_VAR 0 1
69517: PPUSH
69518: LD_EXP 102
69522: PUSH
69523: LD_VAR 0 5
69527: ARRAY
69528: PUSH
69529: LD_INT 0
69531: PLUS
69532: PPUSH
69533: CALL_OW 505
// end ;
69537: LD_VAR 0 3
69541: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
69542: LD_INT 0
69544: PPUSH
69545: PPUSH
69546: PPUSH
69547: PPUSH
// if not hack in hackTanks then
69548: LD_VAR 0 1
69552: PUSH
69553: LD_EXP 101
69557: IN
69558: NOT
69559: IFFALSE 69563
// exit ;
69561: GO 69803
// index := GetElementIndex ( hackTanks , hack ) ;
69563: LD_ADDR_VAR 0 4
69567: PUSH
69568: LD_EXP 101
69572: PPUSH
69573: LD_VAR 0 1
69577: PPUSH
69578: CALL 7274 0 2
69582: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
69583: LD_ADDR_VAR 0 3
69587: PUSH
69588: DOUBLE
69589: LD_EXP 102
69593: PUSH
69594: LD_VAR 0 4
69598: ARRAY
69599: INC
69600: ST_TO_ADDR
69601: LD_INT 1
69603: PUSH
69604: FOR_DOWNTO
69605: IFFALSE 69777
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
69607: LD_ADDR_VAR 0 5
69611: PUSH
69612: LD_EXP 102
69616: PUSH
69617: LD_VAR 0 4
69621: ARRAY
69622: PUSH
69623: LD_VAR 0 3
69627: ARRAY
69628: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
69629: LD_VAR 0 5
69633: PUSH
69634: LD_INT 1
69636: ARRAY
69637: PPUSH
69638: CALL_OW 302
69642: NOT
69643: PUSH
69644: LD_VAR 0 5
69648: PUSH
69649: LD_INT 1
69651: ARRAY
69652: PPUSH
69653: CALL_OW 255
69657: PUSH
69658: LD_VAR 0 1
69662: PPUSH
69663: CALL_OW 255
69667: NONEQUAL
69668: OR
69669: IFFALSE 69775
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
69671: LD_VAR 0 5
69675: PUSH
69676: LD_INT 1
69678: ARRAY
69679: PPUSH
69680: CALL_OW 305
69684: PUSH
69685: LD_VAR 0 5
69689: PUSH
69690: LD_INT 1
69692: ARRAY
69693: PPUSH
69694: CALL_OW 255
69698: PUSH
69699: LD_VAR 0 1
69703: PPUSH
69704: CALL_OW 255
69708: EQUAL
69709: AND
69710: IFFALSE 69734
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
69712: LD_VAR 0 5
69716: PUSH
69717: LD_INT 1
69719: ARRAY
69720: PPUSH
69721: LD_VAR 0 5
69725: PUSH
69726: LD_INT 2
69728: ARRAY
69729: PPUSH
69730: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
69734: LD_ADDR_EXP 102
69738: PUSH
69739: LD_EXP 102
69743: PPUSH
69744: LD_VAR 0 4
69748: PPUSH
69749: LD_EXP 102
69753: PUSH
69754: LD_VAR 0 4
69758: ARRAY
69759: PPUSH
69760: LD_VAR 0 3
69764: PPUSH
69765: CALL_OW 3
69769: PPUSH
69770: CALL_OW 1
69774: ST_TO_ADDR
// end ; end ;
69775: GO 69604
69777: POP
69778: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
69779: LD_VAR 0 1
69783: PPUSH
69784: LD_EXP 102
69788: PUSH
69789: LD_VAR 0 4
69793: ARRAY
69794: PUSH
69795: LD_INT 0
69797: PLUS
69798: PPUSH
69799: CALL_OW 505
// end ;
69803: LD_VAR 0 2
69807: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
69808: LD_INT 0
69810: PPUSH
69811: PPUSH
69812: PPUSH
69813: PPUSH
// if not hack in hackTanks then
69814: LD_VAR 0 1
69818: PUSH
69819: LD_EXP 101
69823: IN
69824: NOT
69825: IFFALSE 69829
// exit ;
69827: GO 69914
// index := GetElementIndex ( hackTanks , hack ) ;
69829: LD_ADDR_VAR 0 5
69833: PUSH
69834: LD_EXP 101
69838: PPUSH
69839: LD_VAR 0 1
69843: PPUSH
69844: CALL 7274 0 2
69848: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
69849: LD_ADDR_VAR 0 4
69853: PUSH
69854: DOUBLE
69855: LD_INT 1
69857: DEC
69858: ST_TO_ADDR
69859: LD_EXP 102
69863: PUSH
69864: LD_VAR 0 5
69868: ARRAY
69869: PUSH
69870: FOR_TO
69871: IFFALSE 69912
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
69873: LD_EXP 102
69877: PUSH
69878: LD_VAR 0 5
69882: ARRAY
69883: PUSH
69884: LD_VAR 0 4
69888: ARRAY
69889: PUSH
69890: LD_INT 1
69892: ARRAY
69893: PUSH
69894: LD_VAR 0 2
69898: EQUAL
69899: IFFALSE 69910
// KillUnit ( vehicle ) ;
69901: LD_VAR 0 2
69905: PPUSH
69906: CALL_OW 66
69910: GO 69870
69912: POP
69913: POP
// end ;
69914: LD_VAR 0 3
69918: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
69919: LD_EXP 106
69923: NOT
69924: IFFALSE 69959
69926: GO 69928
69928: DISABLE
// begin initMiner := true ;
69929: LD_ADDR_EXP 106
69933: PUSH
69934: LD_INT 1
69936: ST_TO_ADDR
// minersList := [ ] ;
69937: LD_ADDR_EXP 107
69941: PUSH
69942: EMPTY
69943: ST_TO_ADDR
// minerMinesList := [ ] ;
69944: LD_ADDR_EXP 108
69948: PUSH
69949: EMPTY
69950: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
69951: LD_ADDR_EXP 109
69955: PUSH
69956: LD_INT 5
69958: ST_TO_ADDR
// end ;
69959: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
69960: LD_EXP 106
69964: PUSH
69965: LD_INT 34
69967: PUSH
69968: LD_INT 81
69970: PUSH
69971: EMPTY
69972: LIST
69973: LIST
69974: PPUSH
69975: CALL_OW 69
69979: AND
69980: IFFALSE 70441
69982: GO 69984
69984: DISABLE
69985: LD_INT 0
69987: PPUSH
69988: PPUSH
69989: PPUSH
69990: PPUSH
// begin enable ;
69991: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
69992: LD_ADDR_VAR 0 1
69996: PUSH
69997: LD_INT 34
69999: PUSH
70000: LD_INT 81
70002: PUSH
70003: EMPTY
70004: LIST
70005: LIST
70006: PPUSH
70007: CALL_OW 69
70011: PUSH
70012: FOR_IN
70013: IFFALSE 70085
// begin if not i in minersList then
70015: LD_VAR 0 1
70019: PUSH
70020: LD_EXP 107
70024: IN
70025: NOT
70026: IFFALSE 70083
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
70028: LD_ADDR_EXP 107
70032: PUSH
70033: LD_EXP 107
70037: PPUSH
70038: LD_EXP 107
70042: PUSH
70043: LD_INT 1
70045: PLUS
70046: PPUSH
70047: LD_VAR 0 1
70051: PPUSH
70052: CALL_OW 1
70056: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
70057: LD_ADDR_EXP 108
70061: PUSH
70062: LD_EXP 108
70066: PPUSH
70067: LD_EXP 108
70071: PUSH
70072: LD_INT 1
70074: PLUS
70075: PPUSH
70076: EMPTY
70077: PPUSH
70078: CALL_OW 1
70082: ST_TO_ADDR
// end end ;
70083: GO 70012
70085: POP
70086: POP
// for i := minerMinesList downto 1 do
70087: LD_ADDR_VAR 0 1
70091: PUSH
70092: DOUBLE
70093: LD_EXP 108
70097: INC
70098: ST_TO_ADDR
70099: LD_INT 1
70101: PUSH
70102: FOR_DOWNTO
70103: IFFALSE 70439
// begin if IsLive ( minersList [ i ] ) then
70105: LD_EXP 107
70109: PUSH
70110: LD_VAR 0 1
70114: ARRAY
70115: PPUSH
70116: CALL_OW 300
70120: IFFALSE 70148
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
70122: LD_EXP 107
70126: PUSH
70127: LD_VAR 0 1
70131: ARRAY
70132: PPUSH
70133: LD_EXP 108
70137: PUSH
70138: LD_VAR 0 1
70142: ARRAY
70143: PPUSH
70144: CALL_OW 505
// if not minerMinesList [ i ] then
70148: LD_EXP 108
70152: PUSH
70153: LD_VAR 0 1
70157: ARRAY
70158: NOT
70159: IFFALSE 70163
// continue ;
70161: GO 70102
// for j := minerMinesList [ i ] downto 1 do
70163: LD_ADDR_VAR 0 2
70167: PUSH
70168: DOUBLE
70169: LD_EXP 108
70173: PUSH
70174: LD_VAR 0 1
70178: ARRAY
70179: INC
70180: ST_TO_ADDR
70181: LD_INT 1
70183: PUSH
70184: FOR_DOWNTO
70185: IFFALSE 70435
// begin side := GetSide ( minersList [ i ] ) ;
70187: LD_ADDR_VAR 0 3
70191: PUSH
70192: LD_EXP 107
70196: PUSH
70197: LD_VAR 0 1
70201: ARRAY
70202: PPUSH
70203: CALL_OW 255
70207: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
70208: LD_ADDR_VAR 0 4
70212: PUSH
70213: LD_EXP 108
70217: PUSH
70218: LD_VAR 0 1
70222: ARRAY
70223: PUSH
70224: LD_VAR 0 2
70228: ARRAY
70229: PUSH
70230: LD_INT 1
70232: ARRAY
70233: PPUSH
70234: LD_EXP 108
70238: PUSH
70239: LD_VAR 0 1
70243: ARRAY
70244: PUSH
70245: LD_VAR 0 2
70249: ARRAY
70250: PUSH
70251: LD_INT 2
70253: ARRAY
70254: PPUSH
70255: CALL_OW 428
70259: ST_TO_ADDR
// if not tmp then
70260: LD_VAR 0 4
70264: NOT
70265: IFFALSE 70269
// continue ;
70267: GO 70184
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
70269: LD_VAR 0 4
70273: PUSH
70274: LD_INT 81
70276: PUSH
70277: LD_VAR 0 3
70281: PUSH
70282: EMPTY
70283: LIST
70284: LIST
70285: PPUSH
70286: CALL_OW 69
70290: IN
70291: PUSH
70292: LD_EXP 108
70296: PUSH
70297: LD_VAR 0 1
70301: ARRAY
70302: PUSH
70303: LD_VAR 0 2
70307: ARRAY
70308: PUSH
70309: LD_INT 1
70311: ARRAY
70312: PPUSH
70313: LD_EXP 108
70317: PUSH
70318: LD_VAR 0 1
70322: ARRAY
70323: PUSH
70324: LD_VAR 0 2
70328: ARRAY
70329: PUSH
70330: LD_INT 2
70332: ARRAY
70333: PPUSH
70334: CALL_OW 458
70338: AND
70339: IFFALSE 70433
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
70341: LD_EXP 108
70345: PUSH
70346: LD_VAR 0 1
70350: ARRAY
70351: PUSH
70352: LD_VAR 0 2
70356: ARRAY
70357: PUSH
70358: LD_INT 1
70360: ARRAY
70361: PPUSH
70362: LD_EXP 108
70366: PUSH
70367: LD_VAR 0 1
70371: ARRAY
70372: PUSH
70373: LD_VAR 0 2
70377: ARRAY
70378: PUSH
70379: LD_INT 2
70381: ARRAY
70382: PPUSH
70383: LD_VAR 0 3
70387: PPUSH
70388: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
70392: LD_ADDR_EXP 108
70396: PUSH
70397: LD_EXP 108
70401: PPUSH
70402: LD_VAR 0 1
70406: PPUSH
70407: LD_EXP 108
70411: PUSH
70412: LD_VAR 0 1
70416: ARRAY
70417: PPUSH
70418: LD_VAR 0 2
70422: PPUSH
70423: CALL_OW 3
70427: PPUSH
70428: CALL_OW 1
70432: ST_TO_ADDR
// end ; end ;
70433: GO 70184
70435: POP
70436: POP
// end ;
70437: GO 70102
70439: POP
70440: POP
// end ;
70441: PPOPN 4
70443: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
70444: LD_INT 0
70446: PPUSH
70447: PPUSH
// result := false ;
70448: LD_ADDR_VAR 0 4
70452: PUSH
70453: LD_INT 0
70455: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
70456: LD_VAR 0 1
70460: PPUSH
70461: CALL_OW 264
70465: PUSH
70466: LD_INT 81
70468: EQUAL
70469: NOT
70470: IFFALSE 70474
// exit ;
70472: GO 70714
// index := GetElementIndex ( minersList , unit ) ;
70474: LD_ADDR_VAR 0 5
70478: PUSH
70479: LD_EXP 107
70483: PPUSH
70484: LD_VAR 0 1
70488: PPUSH
70489: CALL 7274 0 2
70493: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
70494: LD_EXP 108
70498: PUSH
70499: LD_VAR 0 5
70503: ARRAY
70504: PUSH
70505: LD_EXP 109
70509: GREATEREQUAL
70510: IFFALSE 70514
// exit ;
70512: GO 70714
// ComMoveXY ( unit , x , y ) ;
70514: LD_VAR 0 1
70518: PPUSH
70519: LD_VAR 0 2
70523: PPUSH
70524: LD_VAR 0 3
70528: PPUSH
70529: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
70533: LD_INT 35
70535: PPUSH
70536: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
70540: LD_VAR 0 1
70544: PPUSH
70545: LD_VAR 0 2
70549: PPUSH
70550: LD_VAR 0 3
70554: PPUSH
70555: CALL 39015 0 3
70559: NOT
70560: PUSH
70561: LD_VAR 0 1
70565: PPUSH
70566: CALL_OW 314
70570: AND
70571: IFFALSE 70575
// exit ;
70573: GO 70714
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
70575: LD_VAR 0 2
70579: PPUSH
70580: LD_VAR 0 3
70584: PPUSH
70585: CALL_OW 428
70589: PUSH
70590: LD_VAR 0 1
70594: EQUAL
70595: PUSH
70596: LD_VAR 0 1
70600: PPUSH
70601: CALL_OW 314
70605: NOT
70606: AND
70607: IFFALSE 70533
// PlaySoundXY ( x , y , PlantMine ) ;
70609: LD_VAR 0 2
70613: PPUSH
70614: LD_VAR 0 3
70618: PPUSH
70619: LD_STRING PlantMine
70621: PPUSH
70622: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
70626: LD_VAR 0 2
70630: PPUSH
70631: LD_VAR 0 3
70635: PPUSH
70636: LD_VAR 0 1
70640: PPUSH
70641: CALL_OW 255
70645: PPUSH
70646: LD_INT 0
70648: PPUSH
70649: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
70653: LD_ADDR_EXP 108
70657: PUSH
70658: LD_EXP 108
70662: PPUSH
70663: LD_VAR 0 5
70667: PUSH
70668: LD_EXP 108
70672: PUSH
70673: LD_VAR 0 5
70677: ARRAY
70678: PUSH
70679: LD_INT 1
70681: PLUS
70682: PUSH
70683: EMPTY
70684: LIST
70685: LIST
70686: PPUSH
70687: LD_VAR 0 2
70691: PUSH
70692: LD_VAR 0 3
70696: PUSH
70697: EMPTY
70698: LIST
70699: LIST
70700: PPUSH
70701: CALL 7489 0 3
70705: ST_TO_ADDR
// result := true ;
70706: LD_ADDR_VAR 0 4
70710: PUSH
70711: LD_INT 1
70713: ST_TO_ADDR
// end ;
70714: LD_VAR 0 4
70718: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
70719: LD_INT 0
70721: PPUSH
70722: PPUSH
70723: PPUSH
// if not unit in minersList then
70724: LD_VAR 0 1
70728: PUSH
70729: LD_EXP 107
70733: IN
70734: NOT
70735: IFFALSE 70739
// exit ;
70737: GO 71131
// index := GetElementIndex ( minersList , unit ) ;
70739: LD_ADDR_VAR 0 6
70743: PUSH
70744: LD_EXP 107
70748: PPUSH
70749: LD_VAR 0 1
70753: PPUSH
70754: CALL 7274 0 2
70758: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
70759: LD_ADDR_VAR 0 5
70763: PUSH
70764: DOUBLE
70765: LD_EXP 108
70769: PUSH
70770: LD_VAR 0 6
70774: ARRAY
70775: INC
70776: ST_TO_ADDR
70777: LD_INT 1
70779: PUSH
70780: FOR_DOWNTO
70781: IFFALSE 70942
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
70783: LD_EXP 108
70787: PUSH
70788: LD_VAR 0 6
70792: ARRAY
70793: PUSH
70794: LD_VAR 0 5
70798: ARRAY
70799: PUSH
70800: LD_INT 1
70802: ARRAY
70803: PUSH
70804: LD_VAR 0 2
70808: EQUAL
70809: PUSH
70810: LD_EXP 108
70814: PUSH
70815: LD_VAR 0 6
70819: ARRAY
70820: PUSH
70821: LD_VAR 0 5
70825: ARRAY
70826: PUSH
70827: LD_INT 2
70829: ARRAY
70830: PUSH
70831: LD_VAR 0 3
70835: EQUAL
70836: AND
70837: IFFALSE 70940
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
70839: LD_EXP 108
70843: PUSH
70844: LD_VAR 0 6
70848: ARRAY
70849: PUSH
70850: LD_VAR 0 5
70854: ARRAY
70855: PUSH
70856: LD_INT 1
70858: ARRAY
70859: PPUSH
70860: LD_EXP 108
70864: PUSH
70865: LD_VAR 0 6
70869: ARRAY
70870: PUSH
70871: LD_VAR 0 5
70875: ARRAY
70876: PUSH
70877: LD_INT 2
70879: ARRAY
70880: PPUSH
70881: LD_VAR 0 1
70885: PPUSH
70886: CALL_OW 255
70890: PPUSH
70891: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
70895: LD_ADDR_EXP 108
70899: PUSH
70900: LD_EXP 108
70904: PPUSH
70905: LD_VAR 0 6
70909: PPUSH
70910: LD_EXP 108
70914: PUSH
70915: LD_VAR 0 6
70919: ARRAY
70920: PPUSH
70921: LD_VAR 0 5
70925: PPUSH
70926: CALL_OW 3
70930: PPUSH
70931: CALL_OW 1
70935: ST_TO_ADDR
// exit ;
70936: POP
70937: POP
70938: GO 71131
// end ; end ;
70940: GO 70780
70942: POP
70943: POP
// for i := minerMinesList [ index ] downto 1 do
70944: LD_ADDR_VAR 0 5
70948: PUSH
70949: DOUBLE
70950: LD_EXP 108
70954: PUSH
70955: LD_VAR 0 6
70959: ARRAY
70960: INC
70961: ST_TO_ADDR
70962: LD_INT 1
70964: PUSH
70965: FOR_DOWNTO
70966: IFFALSE 71129
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
70968: LD_EXP 108
70972: PUSH
70973: LD_VAR 0 6
70977: ARRAY
70978: PUSH
70979: LD_VAR 0 5
70983: ARRAY
70984: PUSH
70985: LD_INT 1
70987: ARRAY
70988: PPUSH
70989: LD_EXP 108
70993: PUSH
70994: LD_VAR 0 6
70998: ARRAY
70999: PUSH
71000: LD_VAR 0 5
71004: ARRAY
71005: PUSH
71006: LD_INT 2
71008: ARRAY
71009: PPUSH
71010: LD_VAR 0 2
71014: PPUSH
71015: LD_VAR 0 3
71019: PPUSH
71020: CALL_OW 298
71024: PUSH
71025: LD_INT 6
71027: LESS
71028: IFFALSE 71127
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
71030: LD_EXP 108
71034: PUSH
71035: LD_VAR 0 6
71039: ARRAY
71040: PUSH
71041: LD_VAR 0 5
71045: ARRAY
71046: PUSH
71047: LD_INT 1
71049: ARRAY
71050: PPUSH
71051: LD_EXP 108
71055: PUSH
71056: LD_VAR 0 6
71060: ARRAY
71061: PUSH
71062: LD_VAR 0 5
71066: ARRAY
71067: PUSH
71068: LD_INT 2
71070: ARRAY
71071: PPUSH
71072: LD_VAR 0 1
71076: PPUSH
71077: CALL_OW 255
71081: PPUSH
71082: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
71086: LD_ADDR_EXP 108
71090: PUSH
71091: LD_EXP 108
71095: PPUSH
71096: LD_VAR 0 6
71100: PPUSH
71101: LD_EXP 108
71105: PUSH
71106: LD_VAR 0 6
71110: ARRAY
71111: PPUSH
71112: LD_VAR 0 5
71116: PPUSH
71117: CALL_OW 3
71121: PPUSH
71122: CALL_OW 1
71126: ST_TO_ADDR
// end ; end ;
71127: GO 70965
71129: POP
71130: POP
// end ;
71131: LD_VAR 0 4
71135: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
71136: LD_INT 0
71138: PPUSH
71139: PPUSH
71140: PPUSH
71141: PPUSH
71142: PPUSH
71143: PPUSH
71144: PPUSH
71145: PPUSH
71146: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
71147: LD_VAR 0 1
71151: PPUSH
71152: CALL_OW 264
71156: PUSH
71157: LD_INT 81
71159: EQUAL
71160: NOT
71161: PUSH
71162: LD_VAR 0 1
71166: PUSH
71167: LD_EXP 107
71171: IN
71172: NOT
71173: OR
71174: IFFALSE 71178
// exit ;
71176: GO 71500
// index := GetElementIndex ( minersList , unit ) ;
71178: LD_ADDR_VAR 0 6
71182: PUSH
71183: LD_EXP 107
71187: PPUSH
71188: LD_VAR 0 1
71192: PPUSH
71193: CALL 7274 0 2
71197: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
71198: LD_ADDR_VAR 0 8
71202: PUSH
71203: LD_EXP 109
71207: PUSH
71208: LD_EXP 108
71212: PUSH
71213: LD_VAR 0 6
71217: ARRAY
71218: MINUS
71219: ST_TO_ADDR
// if not minesFreeAmount then
71220: LD_VAR 0 8
71224: NOT
71225: IFFALSE 71229
// exit ;
71227: GO 71500
// tmp := [ ] ;
71229: LD_ADDR_VAR 0 7
71233: PUSH
71234: EMPTY
71235: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
71236: LD_ADDR_VAR 0 5
71240: PUSH
71241: DOUBLE
71242: LD_INT 1
71244: DEC
71245: ST_TO_ADDR
71246: LD_VAR 0 8
71250: PUSH
71251: FOR_TO
71252: IFFALSE 71447
// begin _d := rand ( 0 , 5 ) ;
71254: LD_ADDR_VAR 0 11
71258: PUSH
71259: LD_INT 0
71261: PPUSH
71262: LD_INT 5
71264: PPUSH
71265: CALL_OW 12
71269: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
71270: LD_ADDR_VAR 0 12
71274: PUSH
71275: LD_INT 2
71277: PPUSH
71278: LD_INT 6
71280: PPUSH
71281: CALL_OW 12
71285: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
71286: LD_ADDR_VAR 0 9
71290: PUSH
71291: LD_VAR 0 2
71295: PPUSH
71296: LD_VAR 0 11
71300: PPUSH
71301: LD_VAR 0 12
71305: PPUSH
71306: CALL_OW 272
71310: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
71311: LD_ADDR_VAR 0 10
71315: PUSH
71316: LD_VAR 0 3
71320: PPUSH
71321: LD_VAR 0 11
71325: PPUSH
71326: LD_VAR 0 12
71330: PPUSH
71331: CALL_OW 273
71335: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
71336: LD_VAR 0 9
71340: PPUSH
71341: LD_VAR 0 10
71345: PPUSH
71346: CALL_OW 488
71350: PUSH
71351: LD_VAR 0 9
71355: PUSH
71356: LD_VAR 0 10
71360: PUSH
71361: EMPTY
71362: LIST
71363: LIST
71364: PUSH
71365: LD_VAR 0 7
71369: IN
71370: NOT
71371: AND
71372: PUSH
71373: LD_VAR 0 9
71377: PPUSH
71378: LD_VAR 0 10
71382: PPUSH
71383: CALL_OW 458
71387: NOT
71388: AND
71389: IFFALSE 71431
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
71391: LD_ADDR_VAR 0 7
71395: PUSH
71396: LD_VAR 0 7
71400: PPUSH
71401: LD_VAR 0 7
71405: PUSH
71406: LD_INT 1
71408: PLUS
71409: PPUSH
71410: LD_VAR 0 9
71414: PUSH
71415: LD_VAR 0 10
71419: PUSH
71420: EMPTY
71421: LIST
71422: LIST
71423: PPUSH
71424: CALL_OW 1
71428: ST_TO_ADDR
71429: GO 71445
// i := i - 1 ;
71431: LD_ADDR_VAR 0 5
71435: PUSH
71436: LD_VAR 0 5
71440: PUSH
71441: LD_INT 1
71443: MINUS
71444: ST_TO_ADDR
// end ;
71445: GO 71251
71447: POP
71448: POP
// for i in tmp do
71449: LD_ADDR_VAR 0 5
71453: PUSH
71454: LD_VAR 0 7
71458: PUSH
71459: FOR_IN
71460: IFFALSE 71498
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
71462: LD_VAR 0 1
71466: PPUSH
71467: LD_VAR 0 5
71471: PUSH
71472: LD_INT 1
71474: ARRAY
71475: PPUSH
71476: LD_VAR 0 5
71480: PUSH
71481: LD_INT 2
71483: ARRAY
71484: PPUSH
71485: CALL 70444 0 3
71489: NOT
71490: IFFALSE 71496
// exit ;
71492: POP
71493: POP
71494: GO 71500
71496: GO 71459
71498: POP
71499: POP
// end ;
71500: LD_VAR 0 4
71504: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
71505: LD_INT 0
71507: PPUSH
71508: PPUSH
71509: PPUSH
71510: PPUSH
71511: PPUSH
71512: PPUSH
71513: PPUSH
// if not GetClass ( unit ) = class_sniper then
71514: LD_VAR 0 1
71518: PPUSH
71519: CALL_OW 257
71523: PUSH
71524: LD_INT 5
71526: EQUAL
71527: NOT
71528: IFFALSE 71532
// exit ;
71530: GO 71920
// dist := 8 ;
71532: LD_ADDR_VAR 0 5
71536: PUSH
71537: LD_INT 8
71539: ST_TO_ADDR
// viewRange := 12 ;
71540: LD_ADDR_VAR 0 7
71544: PUSH
71545: LD_INT 12
71547: ST_TO_ADDR
// side := GetSide ( unit ) ;
71548: LD_ADDR_VAR 0 6
71552: PUSH
71553: LD_VAR 0 1
71557: PPUSH
71558: CALL_OW 255
71562: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
71563: LD_INT 61
71565: PPUSH
71566: LD_VAR 0 6
71570: PPUSH
71571: CALL_OW 321
71575: PUSH
71576: LD_INT 2
71578: EQUAL
71579: IFFALSE 71589
// viewRange := 16 ;
71581: LD_ADDR_VAR 0 7
71585: PUSH
71586: LD_INT 16
71588: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
71589: LD_VAR 0 1
71593: PPUSH
71594: LD_VAR 0 2
71598: PPUSH
71599: LD_VAR 0 3
71603: PPUSH
71604: CALL_OW 297
71608: PUSH
71609: LD_VAR 0 5
71613: GREATER
71614: IFFALSE 71693
// begin ComMoveXY ( unit , x , y ) ;
71616: LD_VAR 0 1
71620: PPUSH
71621: LD_VAR 0 2
71625: PPUSH
71626: LD_VAR 0 3
71630: PPUSH
71631: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
71635: LD_INT 35
71637: PPUSH
71638: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
71642: LD_VAR 0 1
71646: PPUSH
71647: LD_VAR 0 2
71651: PPUSH
71652: LD_VAR 0 3
71656: PPUSH
71657: CALL 39015 0 3
71661: NOT
71662: IFFALSE 71666
// exit ;
71664: GO 71920
// until GetDistUnitXY ( unit , x , y ) < dist ;
71666: LD_VAR 0 1
71670: PPUSH
71671: LD_VAR 0 2
71675: PPUSH
71676: LD_VAR 0 3
71680: PPUSH
71681: CALL_OW 297
71685: PUSH
71686: LD_VAR 0 5
71690: LESS
71691: IFFALSE 71635
// end ; ComTurnXY ( unit , x , y ) ;
71693: LD_VAR 0 1
71697: PPUSH
71698: LD_VAR 0 2
71702: PPUSH
71703: LD_VAR 0 3
71707: PPUSH
71708: CALL_OW 118
// wait ( 5 ) ;
71712: LD_INT 5
71714: PPUSH
71715: CALL_OW 67
// _d := GetDir ( unit ) ;
71719: LD_ADDR_VAR 0 10
71723: PUSH
71724: LD_VAR 0 1
71728: PPUSH
71729: CALL_OW 254
71733: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
71734: LD_ADDR_VAR 0 8
71738: PUSH
71739: LD_VAR 0 1
71743: PPUSH
71744: CALL_OW 250
71748: PPUSH
71749: LD_VAR 0 10
71753: PPUSH
71754: LD_VAR 0 5
71758: PPUSH
71759: CALL_OW 272
71763: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
71764: LD_ADDR_VAR 0 9
71768: PUSH
71769: LD_VAR 0 1
71773: PPUSH
71774: CALL_OW 251
71778: PPUSH
71779: LD_VAR 0 10
71783: PPUSH
71784: LD_VAR 0 5
71788: PPUSH
71789: CALL_OW 273
71793: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
71794: LD_VAR 0 8
71798: PPUSH
71799: LD_VAR 0 9
71803: PPUSH
71804: CALL_OW 488
71808: NOT
71809: IFFALSE 71813
// exit ;
71811: GO 71920
// ComAnimCustom ( unit , 1 ) ;
71813: LD_VAR 0 1
71817: PPUSH
71818: LD_INT 1
71820: PPUSH
71821: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
71825: LD_VAR 0 8
71829: PPUSH
71830: LD_VAR 0 9
71834: PPUSH
71835: LD_VAR 0 6
71839: PPUSH
71840: LD_VAR 0 7
71844: PPUSH
71845: CALL_OW 330
// repeat wait ( 1 ) ;
71849: LD_INT 1
71851: PPUSH
71852: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
71856: LD_VAR 0 1
71860: PPUSH
71861: CALL_OW 316
71865: PUSH
71866: LD_VAR 0 1
71870: PPUSH
71871: CALL_OW 314
71875: OR
71876: PUSH
71877: LD_VAR 0 1
71881: PPUSH
71882: CALL_OW 302
71886: NOT
71887: OR
71888: PUSH
71889: LD_VAR 0 1
71893: PPUSH
71894: CALL_OW 301
71898: OR
71899: IFFALSE 71849
// RemoveSeeing ( _x , _y , side ) ;
71901: LD_VAR 0 8
71905: PPUSH
71906: LD_VAR 0 9
71910: PPUSH
71911: LD_VAR 0 6
71915: PPUSH
71916: CALL_OW 331
// end ;
71920: LD_VAR 0 4
71924: RET
