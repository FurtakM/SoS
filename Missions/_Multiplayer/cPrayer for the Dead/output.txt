// starting begin ResetFog ;
   0: CALL_OW 335
// InitHc ;
   4: CALL_OW 19
// InitUc ;
   8: CALL_OW 18
// InitBc ;
  12: CALL_OW 21
// InitVariables ;
  16: CALL 116 0 0
// InitMultiplayer ;
  20: CALL 3779 0 0
// if debug then
  24: LD_EXP 1
  28: IFFALSE 37
// FogOff ( 1 ) ;
  30: LD_INT 1
  32: PPUSH
  33: CALL_OW 344
// PrepareArabian ( Multiplayer_SetBotSide ( 2 ) ) ;
  37: LD_INT 2
  39: PPUSH
  40: CALL 5635 0 1
  44: PPUSH
  45: CALL 937 0 1
// PrepareConvoys ( Multiplayer_SetBotSide ( 6 ) ) ;
  49: LD_INT 6
  51: PPUSH
  52: CALL 5635 0 1
  56: PPUSH
  57: CALL 11987 0 1
// Multiplayer_Start ;
  61: CALL 7355 0 0
// ResetFog ;
  65: CALL_OW 335
// PlaceSeeing ( 1 , 1 , convoySide , - 32973 ) ;
  69: LD_INT 1
  71: PPUSH
  72: LD_INT 1
  74: PPUSH
  75: LD_EXP 40
  79: PPUSH
  80: LD_INT 32973
  82: NEG
  83: PPUSH
  84: CALL_OW 330
// RemoveSeeing ( 1 , 1 , convoySide ) ;
  88: LD_INT 1
  90: PPUSH
  91: LD_INT 1
  93: PPUSH
  94: LD_EXP 40
  98: PPUSH
  99: CALL_OW 331
// game := true ;
 103: LD_ADDR_EXP 2
 107: PUSH
 108: LD_INT 1
 110: ST_TO_ADDR
// Multiplayer_End ;
 111: CALL 7474 0 0
// end ;
 115: END
// export debug , game , winAllowed , botSides , savedConvoyUnits , blockThread , forestIsCleared , goToUnload ; function InitVariables ; begin
 116: LD_INT 0
 118: PPUSH
// debug := false ;
 119: LD_ADDR_EXP 1
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// botSides := [ 2 , 6 ] ;
 127: LD_ADDR_EXP 4
 131: PUSH
 132: LD_INT 2
 134: PUSH
 135: LD_INT 6
 137: PUSH
 138: EMPTY
 139: LIST
 140: LIST
 141: ST_TO_ADDR
// winAllowed := false ;
 142: LD_ADDR_EXP 3
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// savedConvoyUnits := 0 ;
 150: LD_ADDR_EXP 5
 154: PUSH
 155: LD_INT 0
 157: ST_TO_ADDR
// forestIsCleared := false ;
 158: LD_ADDR_EXP 7
 162: PUSH
 163: LD_INT 0
 165: ST_TO_ADDR
// blockThread := false ;
 166: LD_ADDR_EXP 6
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// goToUnload := [ ] ;
 174: LD_ADDR_EXP 8
 178: PUSH
 179: EMPTY
 180: ST_TO_ADDR
// end ;
 181: LD_VAR 0 1
 185: RET
// every 0 0$01 trigger game and not debug_strings do
 186: LD_EXP 2
 190: PUSH
 191: LD_OWVAR 48
 195: NOT
 196: AND
 197: IFFALSE 213
 199: GO 201
 201: DISABLE
// begin enable ;
 202: ENABLE
// display_strings := Multiplayer_DisplayStrings ( ) ;
 203: LD_ADDR_OWVAR 47
 207: PUSH
 208: CALL 7901 0 0
 212: ST_TO_ADDR
// end ; end_of_file
 213: END
// every 0 0$30 trigger convoyWave in [ [ 6 , 8 , 10 ] [ Difficulty ] , [ 16 , 20 , 24 ] [ Difficulty ] ] do var i , j , un , veh , skill ;
 214: LD_EXP 39
 218: PUSH
 219: LD_INT 6
 221: PUSH
 222: LD_INT 8
 224: PUSH
 225: LD_INT 10
 227: PUSH
 228: EMPTY
 229: LIST
 230: LIST
 231: LIST
 232: PUSH
 233: LD_OWVAR 67
 237: ARRAY
 238: PUSH
 239: LD_INT 16
 241: PUSH
 242: LD_INT 20
 244: PUSH
 245: LD_INT 24
 247: PUSH
 248: EMPTY
 249: LIST
 250: LIST
 251: LIST
 252: PUSH
 253: LD_OWVAR 67
 257: ARRAY
 258: PUSH
 259: EMPTY
 260: LIST
 261: LIST
 262: IN
 263: IFFALSE 609
 265: GO 267
 267: DISABLE
 268: LD_INT 0
 270: PPUSH
 271: PPUSH
 272: PPUSH
 273: PPUSH
 274: PPUSH
// begin repeat wait ( 0 0$1 ) ;
 275: LD_INT 35
 277: PPUSH
 278: CALL_OW 67
// until not blockThread ;
 282: LD_EXP 6
 286: NOT
 287: IFFALSE 275
// skill := [ 6 , 4 , 2 ] [ Difficulty ] ;
 289: LD_ADDR_VAR 0 5
 293: PUSH
 294: LD_INT 6
 296: PUSH
 297: LD_INT 4
 299: PUSH
 300: LD_INT 2
 302: PUSH
 303: EMPTY
 304: LIST
 305: LIST
 306: LIST
 307: PUSH
 308: LD_OWVAR 67
 312: ARRAY
 313: ST_TO_ADDR
// for i := 1 to 8 do
 314: LD_ADDR_VAR 0 1
 318: PUSH
 319: DOUBLE
 320: LD_INT 1
 322: DEC
 323: ST_TO_ADDR
 324: LD_INT 8
 326: PUSH
 327: FOR_TO
 328: IFFALSE 607
// if multi_sides [ i ] = 2 and not multi_loosers [ i ] then
 330: LD_EXP 15
 334: PUSH
 335: LD_VAR 0 1
 339: ARRAY
 340: PUSH
 341: LD_INT 2
 343: EQUAL
 344: PUSH
 345: LD_EXP 32
 349: PUSH
 350: LD_VAR 0 1
 354: ARRAY
 355: NOT
 356: AND
 357: IFFALSE 605
// begin if i = your_side then
 359: LD_VAR 0 1
 363: PUSH
 364: LD_OWVAR 2
 368: EQUAL
 369: IFFALSE 381
// CenterNowOnXY ( 112 , 172 ) ;
 371: LD_INT 112
 373: PPUSH
 374: LD_INT 172
 376: PPUSH
 377: CALL_OW 86
// PrepareEngineer ( false , skill ) ;
 381: LD_INT 0
 383: PPUSH
 384: LD_VAR 0 5
 388: PPUSH
 389: CALL_OW 382
// un := CreateHuman ;
 393: LD_ADDR_VAR 0 3
 397: PUSH
 398: CALL_OW 44
 402: ST_TO_ADDR
// PlaceUnitArea ( un , southRefArea , false ) ;
 403: LD_VAR 0 3
 407: PPUSH
 408: LD_INT 25
 410: PPUSH
 411: LD_INT 0
 413: PPUSH
 414: CALL_OW 49
// for j := 1 to 2 do
 418: LD_ADDR_VAR 0 2
 422: PUSH
 423: DOUBLE
 424: LD_INT 1
 426: DEC
 427: ST_TO_ADDR
 428: LD_INT 2
 430: PUSH
 431: FOR_TO
 432: IFFALSE 473
// begin PrepareMechanic ( false , skill ) ;
 434: LD_INT 0
 436: PPUSH
 437: LD_VAR 0 5
 441: PPUSH
 442: CALL_OW 383
// un := CreateHuman ;
 446: LD_ADDR_VAR 0 3
 450: PUSH
 451: CALL_OW 44
 455: ST_TO_ADDR
// PlaceUnitArea ( un , southRefArea , false ) ;
 456: LD_VAR 0 3
 460: PPUSH
 461: LD_INT 25
 463: PPUSH
 464: LD_INT 0
 466: PPUSH
 467: CALL_OW 49
// end ;
 471: GO 431
 473: POP
 474: POP
// for j := 1 to 2 do
 475: LD_ADDR_VAR 0 2
 479: PUSH
 480: DOUBLE
 481: LD_INT 1
 483: DEC
 484: ST_TO_ADDR
 485: LD_INT 2
 487: PUSH
 488: FOR_TO
 489: IFFALSE 603
// begin uc_side := i ;
 491: LD_ADDR_OWVAR 20
 495: PUSH
 496: LD_VAR 0 1
 500: ST_TO_ADDR
// uc_nation := nation_russian ;
 501: LD_ADDR_OWVAR 21
 505: PUSH
 506: LD_INT 3
 508: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_gun , 50 ) ;
 509: LD_INT 22
 511: PPUSH
 512: LD_INT 1
 514: PPUSH
 515: LD_INT 1
 517: PPUSH
 518: LD_INT 44
 520: PPUSH
 521: LD_INT 50
 523: PPUSH
 524: CALL 19962 0 5
// veh := CreateVehicle ;
 528: LD_ADDR_VAR 0 4
 532: PUSH
 533: CALL_OW 45
 537: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
 538: LD_VAR 0 4
 542: PPUSH
 543: LD_INT 5
 545: PPUSH
 546: CALL_OW 233
// PrepareMechanic ( false , skill ) ;
 550: LD_INT 0
 552: PPUSH
 553: LD_VAR 0 5
 557: PPUSH
 558: CALL_OW 383
// un := CreateHuman ;
 562: LD_ADDR_VAR 0 3
 566: PUSH
 567: CALL_OW 44
 571: ST_TO_ADDR
// PlaceUnitArea ( veh , southRefArea , false ) ;
 572: LD_VAR 0 4
 576: PPUSH
 577: LD_INT 25
 579: PPUSH
 580: LD_INT 0
 582: PPUSH
 583: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
 587: LD_VAR 0 3
 591: PPUSH
 592: LD_VAR 0 4
 596: PPUSH
 597: CALL_OW 52
// end ;
 601: GO 488
 603: POP
 604: POP
// end ;
 605: GO 327
 607: POP
 608: POP
// end ;
 609: PPOPN 5
 611: END
// every 0 0$30 trigger convoyWave in [ [ 12 , 14 , 16 ] [ Difficulty ] , [ 32 , 36 , 40 ] [ Difficulty ] ] do var i , j , un , veh , skill ;
 612: LD_EXP 39
 616: PUSH
 617: LD_INT 12
 619: PUSH
 620: LD_INT 14
 622: PUSH
 623: LD_INT 16
 625: PUSH
 626: EMPTY
 627: LIST
 628: LIST
 629: LIST
 630: PUSH
 631: LD_OWVAR 67
 635: ARRAY
 636: PUSH
 637: LD_INT 32
 639: PUSH
 640: LD_INT 36
 642: PUSH
 643: LD_INT 40
 645: PUSH
 646: EMPTY
 647: LIST
 648: LIST
 649: LIST
 650: PUSH
 651: LD_OWVAR 67
 655: ARRAY
 656: PUSH
 657: EMPTY
 658: LIST
 659: LIST
 660: IN
 661: IFFALSE 934
 663: GO 665
 665: DISABLE
 666: LD_INT 0
 668: PPUSH
 669: PPUSH
 670: PPUSH
 671: PPUSH
 672: PPUSH
// begin repeat wait ( 0 0$1 ) ;
 673: LD_INT 35
 675: PPUSH
 676: CALL_OW 67
// until not blockThread ;
 680: LD_EXP 6
 684: NOT
 685: IFFALSE 673
// skill := [ 6 , 4 , 2 ] [ Difficulty ] ;
 687: LD_ADDR_VAR 0 5
 691: PUSH
 692: LD_INT 6
 694: PUSH
 695: LD_INT 4
 697: PUSH
 698: LD_INT 2
 700: PUSH
 701: EMPTY
 702: LIST
 703: LIST
 704: LIST
 705: PUSH
 706: LD_OWVAR 67
 710: ARRAY
 711: ST_TO_ADDR
// for i := 1 to 8 do
 712: LD_ADDR_VAR 0 1
 716: PUSH
 717: DOUBLE
 718: LD_INT 1
 720: DEC
 721: ST_TO_ADDR
 722: LD_INT 8
 724: PUSH
 725: FOR_TO
 726: IFFALSE 932
// if multi_sides [ i ] = 1 and not multi_loosers [ i ] then
 728: LD_EXP 15
 732: PUSH
 733: LD_VAR 0 1
 737: ARRAY
 738: PUSH
 739: LD_INT 1
 741: EQUAL
 742: PUSH
 743: LD_EXP 32
 747: PUSH
 748: LD_VAR 0 1
 752: ARRAY
 753: NOT
 754: AND
 755: IFFALSE 930
// begin if i = your_side then
 757: LD_VAR 0 1
 761: PUSH
 762: LD_OWVAR 2
 766: EQUAL
 767: IFFALSE 779
// CenterNowOnXY ( 112 , 172 ) ;
 769: LD_INT 112
 771: PPUSH
 772: LD_INT 172
 774: PPUSH
 775: CALL_OW 86
// for j := 1 to 3 do
 779: LD_ADDR_VAR 0 2
 783: PUSH
 784: DOUBLE
 785: LD_INT 1
 787: DEC
 788: ST_TO_ADDR
 789: LD_INT 3
 791: PUSH
 792: FOR_TO
 793: IFFALSE 928
// begin uc_side := i ;
 795: LD_ADDR_OWVAR 20
 799: PUSH
 800: LD_VAR 0 1
 804: ST_TO_ADDR
// uc_nation := nation_russian ;
 805: LD_ADDR_OWVAR 21
 809: PUSH
 810: LD_INT 3
 812: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun ] [ i mod 2 + 1 ] , 50 ) ;
 813: LD_INT 22
 815: PPUSH
 816: LD_INT 1
 818: PPUSH
 819: LD_INT 1
 821: PPUSH
 822: LD_INT 44
 824: PUSH
 825: LD_INT 43
 827: PUSH
 828: EMPTY
 829: LIST
 830: LIST
 831: PUSH
 832: LD_VAR 0 1
 836: PUSH
 837: LD_INT 2
 839: MOD
 840: PUSH
 841: LD_INT 1
 843: PLUS
 844: ARRAY
 845: PPUSH
 846: LD_INT 50
 848: PPUSH
 849: CALL 19962 0 5
// veh := CreateVehicle ;
 853: LD_ADDR_VAR 0 4
 857: PUSH
 858: CALL_OW 45
 862: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
 863: LD_VAR 0 4
 867: PPUSH
 868: LD_INT 5
 870: PPUSH
 871: CALL_OW 233
// PrepareMechanic ( false , skill ) ;
 875: LD_INT 0
 877: PPUSH
 878: LD_VAR 0 5
 882: PPUSH
 883: CALL_OW 383
// un := CreateHuman ;
 887: LD_ADDR_VAR 0 3
 891: PUSH
 892: CALL_OW 44
 896: ST_TO_ADDR
// PlaceUnitArea ( veh , southRefArea , false ) ;
 897: LD_VAR 0 4
 901: PPUSH
 902: LD_INT 25
 904: PPUSH
 905: LD_INT 0
 907: PPUSH
 908: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
 912: LD_VAR 0 3
 916: PPUSH
 917: LD_VAR 0 4
 921: PPUSH
 922: CALL_OW 52
// end ;
 926: GO 792
 928: POP
 929: POP
// end ;
 930: GO 725
 932: POP
 933: POP
// end ; end_of_file
 934: PPOPN 5
 936: END
// export enemyUnits , enemyMobile , enemyForestGuard , enemySide , arAttackersInf ; export function PrepareArabian ( side ) ; var i , un , skill , veh ; begin
 937: LD_INT 0
 939: PPUSH
 940: PPUSH
 941: PPUSH
 942: PPUSH
 943: PPUSH
// enemySide := side ;
 944: LD_ADDR_EXP 12
 948: PUSH
 949: LD_VAR 0 1
 953: ST_TO_ADDR
// enemyUnits := [ ] ;
 954: LD_ADDR_EXP 9
 958: PUSH
 959: EMPTY
 960: ST_TO_ADDR
// enemyMobile := [ ] ;
 961: LD_ADDR_EXP 10
 965: PUSH
 966: EMPTY
 967: ST_TO_ADDR
// enemyForestGuard := [ ] ;
 968: LD_ADDR_EXP 11
 972: PUSH
 973: EMPTY
 974: ST_TO_ADDR
// arAttackersInf := [ ] ;
 975: LD_ADDR_EXP 13
 979: PUSH
 980: EMPTY
 981: ST_TO_ADDR
// skill := [ 4 , 6 , 8 ] [ Difficulty ] ;
 982: LD_ADDR_VAR 0 5
 986: PUSH
 987: LD_INT 4
 989: PUSH
 990: LD_INT 6
 992: PUSH
 993: LD_INT 8
 995: PUSH
 996: EMPTY
 997: LIST
 998: LIST
 999: LIST
1000: PUSH
1001: LD_OWVAR 67
1005: ARRAY
1006: ST_TO_ADDR
// uc_side := side ;
1007: LD_ADDR_OWVAR 20
1011: PUSH
1012: LD_VAR 0 1
1016: ST_TO_ADDR
// uc_nation := nation_arabian ;
1017: LD_ADDR_OWVAR 21
1021: PUSH
1022: LD_INT 2
1024: ST_TO_ADDR
// for i := 1 to [ 5 , 6 , 7 ] [ Difficulty ] do
1025: LD_ADDR_VAR 0 3
1029: PUSH
1030: DOUBLE
1031: LD_INT 1
1033: DEC
1034: ST_TO_ADDR
1035: LD_INT 5
1037: PUSH
1038: LD_INT 6
1040: PUSH
1041: LD_INT 7
1043: PUSH
1044: EMPTY
1045: LIST
1046: LIST
1047: LIST
1048: PUSH
1049: LD_OWVAR 67
1053: ARRAY
1054: PUSH
1055: FOR_TO
1056: IFFALSE 1143
// begin PrepareSoldier ( false , skill ) ;
1058: LD_INT 0
1060: PPUSH
1061: LD_VAR 0 5
1065: PPUSH
1066: CALL_OW 381
// un := CreateHuman ;
1070: LD_ADDR_VAR 0 4
1074: PUSH
1075: CALL_OW 44
1079: ST_TO_ADDR
// if i mod 2 = 0 then
1080: LD_VAR 0 3
1084: PUSH
1085: LD_INT 2
1087: MOD
1088: PUSH
1089: LD_INT 0
1091: EQUAL
1092: IFFALSE 1106
// SetClass ( un , class_mortar ) ;
1094: LD_VAR 0 4
1098: PPUSH
1099: LD_INT 8
1101: PPUSH
1102: CALL_OW 336
// enemyForestGuard := Join ( enemyForestGuard , un ) ;
1106: LD_ADDR_EXP 11
1110: PUSH
1111: LD_EXP 11
1115: PPUSH
1116: LD_VAR 0 4
1120: PPUSH
1121: CALL 52833 0 2
1125: ST_TO_ADDR
// PlaceUnitArea ( un , forestGuardHill1Area , false ) ;
1126: LD_VAR 0 4
1130: PPUSH
1131: LD_INT 17
1133: PPUSH
1134: LD_INT 0
1136: PPUSH
1137: CALL_OW 49
// end ;
1141: GO 1055
1143: POP
1144: POP
// for i := 1 to 2 do
1145: LD_ADDR_VAR 0 3
1149: PUSH
1150: DOUBLE
1151: LD_INT 1
1153: DEC
1154: ST_TO_ADDR
1155: LD_INT 2
1157: PUSH
1158: FOR_TO
1159: IFFALSE 1220
// begin PrepareScientist ( false , skill ) ;
1161: LD_INT 0
1163: PPUSH
1164: LD_VAR 0 5
1168: PPUSH
1169: CALL_OW 384
// un := CreateHuman ;
1173: LD_ADDR_VAR 0 4
1177: PUSH
1178: CALL_OW 44
1182: ST_TO_ADDR
// enemyForestGuard := Join ( enemyForestGuard , un ) ;
1183: LD_ADDR_EXP 11
1187: PUSH
1188: LD_EXP 11
1192: PPUSH
1193: LD_VAR 0 4
1197: PPUSH
1198: CALL 52833 0 2
1202: ST_TO_ADDR
// PlaceUnitArea ( un , forestGuardHill1Area , false ) ;
1203: LD_VAR 0 4
1207: PPUSH
1208: LD_INT 17
1210: PPUSH
1211: LD_INT 0
1213: PPUSH
1214: CALL_OW 49
// end ;
1218: GO 1158
1220: POP
1221: POP
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
1222: LD_ADDR_VAR 0 3
1226: PUSH
1227: DOUBLE
1228: LD_INT 1
1230: DEC
1231: ST_TO_ADDR
1232: LD_INT 2
1234: PUSH
1235: LD_INT 3
1237: PUSH
1238: LD_INT 3
1240: PUSH
1241: EMPTY
1242: LIST
1243: LIST
1244: LIST
1245: PUSH
1246: LD_OWVAR 67
1250: ARRAY
1251: PUSH
1252: FOR_TO
1253: IFFALSE 1389
// begin PrepareVehicle ( ar_half_tracked , engine_solar , control_manual , ar_gun , 100 ) ;
1255: LD_INT 14
1257: PPUSH
1258: LD_INT 2
1260: PPUSH
1261: LD_INT 1
1263: PPUSH
1264: LD_INT 27
1266: PPUSH
1267: LD_INT 100
1269: PPUSH
1270: CALL 19962 0 5
// veh := CreateVehicle ;
1274: LD_ADDR_VAR 0 6
1278: PUSH
1279: CALL_OW 45
1283: ST_TO_ADDR
// enemyForestGuard := Join ( enemyForestGuard , veh ) ;
1284: LD_ADDR_EXP 11
1288: PUSH
1289: LD_EXP 11
1293: PPUSH
1294: LD_VAR 0 6
1298: PPUSH
1299: CALL 52833 0 2
1303: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
1304: LD_VAR 0 6
1308: PPUSH
1309: LD_INT 5
1311: PPUSH
1312: CALL_OW 233
// PrepareMechanic ( false , skill ) ;
1316: LD_INT 0
1318: PPUSH
1319: LD_VAR 0 5
1323: PPUSH
1324: CALL_OW 383
// un := CreateHuman ;
1328: LD_ADDR_VAR 0 4
1332: PUSH
1333: CALL_OW 44
1337: ST_TO_ADDR
// enemyForestGuard := Join ( enemyForestGuard , un ) ;
1338: LD_ADDR_EXP 11
1342: PUSH
1343: LD_EXP 11
1347: PPUSH
1348: LD_VAR 0 4
1352: PPUSH
1353: CALL 52833 0 2
1357: ST_TO_ADDR
// PlaceUnitArea ( veh , forestGuardHill2Area , false ) ;
1358: LD_VAR 0 6
1362: PPUSH
1363: LD_INT 18
1365: PPUSH
1366: LD_INT 0
1368: PPUSH
1369: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
1373: LD_VAR 0 4
1377: PPUSH
1378: LD_VAR 0 6
1382: PPUSH
1383: CALL_OW 52
// end ;
1387: GO 1252
1389: POP
1390: POP
// for i := 1 to 2 do
1391: LD_ADDR_VAR 0 3
1395: PUSH
1396: DOUBLE
1397: LD_INT 1
1399: DEC
1400: ST_TO_ADDR
1401: LD_INT 2
1403: PUSH
1404: FOR_TO
1405: IFFALSE 1488
// begin PrepareVehicle ( ar_half_tracked , engine_solar , control_manual , ar_cargo_bay , 100 ) ;
1407: LD_INT 14
1409: PPUSH
1410: LD_INT 2
1412: PPUSH
1413: LD_INT 1
1415: PPUSH
1416: LD_INT 32
1418: PPUSH
1419: LD_INT 100
1421: PPUSH
1422: CALL 19962 0 5
// veh := CreateVehicle ;
1426: LD_ADDR_VAR 0 6
1430: PUSH
1431: CALL_OW 45
1435: ST_TO_ADDR
// SetDir ( veh , rand ( 2 , 3 ) ) ;
1436: LD_VAR 0 6
1440: PPUSH
1441: LD_INT 2
1443: PPUSH
1444: LD_INT 3
1446: PPUSH
1447: CALL_OW 12
1451: PPUSH
1452: CALL_OW 233
// PlaceUnitArea ( veh , arOilArea , false ) ;
1456: LD_VAR 0 6
1460: PPUSH
1461: LD_INT 22
1463: PPUSH
1464: LD_INT 0
1466: PPUSH
1467: CALL_OW 49
// SetCargo ( veh , mat_oil , 100 ) ;
1471: LD_VAR 0 6
1475: PPUSH
1476: LD_INT 2
1478: PPUSH
1479: LD_INT 100
1481: PPUSH
1482: CALL_OW 290
// end ;
1486: GO 1404
1488: POP
1489: POP
// end ;
1490: LD_VAR 0 2
1494: RET
// export function PrepareMobileGroup ; var i , veh , un , skill , v ; begin
1495: LD_INT 0
1497: PPUSH
1498: PPUSH
1499: PPUSH
1500: PPUSH
1501: PPUSH
1502: PPUSH
// blockThread := true ;
1503: LD_ADDR_EXP 6
1507: PUSH
1508: LD_INT 1
1510: ST_TO_ADDR
// v := convoyWave div 12 ;
1511: LD_ADDR_VAR 0 6
1515: PUSH
1516: LD_EXP 39
1520: PUSH
1521: LD_INT 12
1523: DIV
1524: ST_TO_ADDR
// skill := [ 4 , 5 , 6 ] [ Difficulty ] + v ;
1525: LD_ADDR_VAR 0 5
1529: PUSH
1530: LD_INT 4
1532: PUSH
1533: LD_INT 5
1535: PUSH
1536: LD_INT 6
1538: PUSH
1539: EMPTY
1540: LIST
1541: LIST
1542: LIST
1543: PUSH
1544: LD_OWVAR 67
1548: ARRAY
1549: PUSH
1550: LD_VAR 0 6
1554: PLUS
1555: ST_TO_ADDR
// if skill > 10 then
1556: LD_VAR 0 5
1560: PUSH
1561: LD_INT 10
1563: GREATER
1564: IFFALSE 1574
// skill := 10 ;
1566: LD_ADDR_VAR 0 5
1570: PUSH
1571: LD_INT 10
1573: ST_TO_ADDR
// if v > 8 then
1574: LD_VAR 0 6
1578: PUSH
1579: LD_INT 8
1581: GREATER
1582: IFFALSE 1592
// v := 8 ;
1584: LD_ADDR_VAR 0 6
1588: PUSH
1589: LD_INT 8
1591: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] + v do
1592: LD_ADDR_VAR 0 2
1596: PUSH
1597: DOUBLE
1598: LD_INT 1
1600: DEC
1601: ST_TO_ADDR
1602: LD_INT 2
1604: PUSH
1605: LD_INT 3
1607: PUSH
1608: LD_INT 3
1610: PUSH
1611: EMPTY
1612: LIST
1613: LIST
1614: LIST
1615: PUSH
1616: LD_OWVAR 67
1620: ARRAY
1621: PUSH
1622: LD_VAR 0 6
1626: PLUS
1627: PUSH
1628: FOR_TO
1629: IFFALSE 1808
// begin uc_side := enemySide ;
1631: LD_ADDR_OWVAR 20
1635: PUSH
1636: LD_EXP 12
1640: ST_TO_ADDR
// uc_nation := nation_arabian ;
1641: LD_ADDR_OWVAR 21
1645: PUSH
1646: LD_INT 2
1648: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , [ ar_gun , ar_gatling_gun ] [ i mod 2 + 1 ] , 100 ) ;
1649: LD_INT 14
1651: PPUSH
1652: LD_INT 1
1654: PPUSH
1655: LD_INT 1
1657: PPUSH
1658: LD_INT 27
1660: PUSH
1661: LD_INT 25
1663: PUSH
1664: EMPTY
1665: LIST
1666: LIST
1667: PUSH
1668: LD_VAR 0 2
1672: PUSH
1673: LD_INT 2
1675: MOD
1676: PUSH
1677: LD_INT 1
1679: PLUS
1680: ARRAY
1681: PPUSH
1682: LD_INT 100
1684: PPUSH
1685: CALL 19962 0 5
// veh := CreateVehicle ;
1689: LD_ADDR_VAR 0 3
1693: PUSH
1694: CALL_OW 45
1698: ST_TO_ADDR
// enemyMobile := Join ( enemyMobile , veh ) ;
1699: LD_ADDR_EXP 10
1703: PUSH
1704: LD_EXP 10
1708: PPUSH
1709: LD_VAR 0 3
1713: PPUSH
1714: CALL 52833 0 2
1718: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1719: LD_VAR 0 3
1723: PPUSH
1724: LD_INT 2
1726: PPUSH
1727: CALL_OW 233
// PrepareMechanic ( false , skill ) ;
1731: LD_INT 0
1733: PPUSH
1734: LD_VAR 0 5
1738: PPUSH
1739: CALL_OW 383
// un := CreateHuman ;
1743: LD_ADDR_VAR 0 4
1747: PUSH
1748: CALL_OW 44
1752: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
1753: LD_INT 35
1755: PPUSH
1756: CALL_OW 67
// until PlaceUnitArea ( veh , arabNorthSpawnArea , false ) ;
1760: LD_VAR 0 3
1764: PPUSH
1765: LD_INT 23
1767: PPUSH
1768: LD_INT 0
1770: PPUSH
1771: CALL_OW 49
1775: IFFALSE 1753
// PlaceHumanInUnit ( un , veh ) ;
1777: LD_VAR 0 4
1781: PPUSH
1782: LD_VAR 0 3
1786: PPUSH
1787: CALL_OW 52
// ComMoveXY ( veh , 104 , 18 ) ;
1791: LD_VAR 0 3
1795: PPUSH
1796: LD_INT 104
1798: PPUSH
1799: LD_INT 18
1801: PPUSH
1802: CALL_OW 111
// end ;
1806: GO 1628
1808: POP
1809: POP
// blockThread := false ;
1810: LD_ADDR_EXP 6
1814: PUSH
1815: LD_INT 0
1817: ST_TO_ADDR
// end ;
1818: LD_VAR 0 1
1822: RET
// export function PrepareMobileGroup2 ; var i , veh , un , skill , v ; begin
1823: LD_INT 0
1825: PPUSH
1826: PPUSH
1827: PPUSH
1828: PPUSH
1829: PPUSH
1830: PPUSH
// blockThread := true ;
1831: LD_ADDR_EXP 6
1835: PUSH
1836: LD_INT 1
1838: ST_TO_ADDR
// v := convoyWave div 12 ;
1839: LD_ADDR_VAR 0 6
1843: PUSH
1844: LD_EXP 39
1848: PUSH
1849: LD_INT 12
1851: DIV
1852: ST_TO_ADDR
// if v > 8 then
1853: LD_VAR 0 6
1857: PUSH
1858: LD_INT 8
1860: GREATER
1861: IFFALSE 1871
// v := 8 ;
1863: LD_ADDR_VAR 0 6
1867: PUSH
1868: LD_INT 8
1870: ST_TO_ADDR
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] + v do
1871: LD_ADDR_VAR 0 2
1875: PUSH
1876: DOUBLE
1877: LD_INT 1
1879: DEC
1880: ST_TO_ADDR
1881: LD_INT 3
1883: PUSH
1884: LD_INT 4
1886: PUSH
1887: LD_INT 5
1889: PUSH
1890: EMPTY
1891: LIST
1892: LIST
1893: LIST
1894: PUSH
1895: LD_OWVAR 67
1899: ARRAY
1900: PUSH
1901: LD_VAR 0 6
1905: PLUS
1906: PUSH
1907: FOR_TO
1908: IFFALSE 2091
// begin uc_side := enemySide ;
1910: LD_ADDR_OWVAR 20
1914: PUSH
1915: LD_EXP 12
1919: ST_TO_ADDR
// uc_nation := nation_arabian ;
1920: LD_ADDR_OWVAR 21
1924: PUSH
1925: LD_INT 2
1927: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , [ ar_gun , ar_gatling_gun , ar_flame_thrower ] [ i mod 3 + 1 ] , 100 ) ;
1928: LD_INT 14
1930: PPUSH
1931: LD_INT 1
1933: PPUSH
1934: LD_INT 1
1936: PPUSH
1937: LD_INT 27
1939: PUSH
1940: LD_INT 25
1942: PUSH
1943: LD_INT 26
1945: PUSH
1946: EMPTY
1947: LIST
1948: LIST
1949: LIST
1950: PUSH
1951: LD_VAR 0 2
1955: PUSH
1956: LD_INT 3
1958: MOD
1959: PUSH
1960: LD_INT 1
1962: PLUS
1963: ARRAY
1964: PPUSH
1965: LD_INT 100
1967: PPUSH
1968: CALL 19962 0 5
// veh := CreateVehicle ;
1972: LD_ADDR_VAR 0 3
1976: PUSH
1977: CALL_OW 45
1981: ST_TO_ADDR
// enemyMobile := Join ( enemyMobile , veh ) ;
1982: LD_ADDR_EXP 10
1986: PUSH
1987: LD_EXP 10
1991: PPUSH
1992: LD_VAR 0 3
1996: PPUSH
1997: CALL 52833 0 2
2001: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2002: LD_VAR 0 3
2006: PPUSH
2007: LD_INT 4
2009: PPUSH
2010: CALL_OW 233
// PrepareMechanic ( false , skill ) ;
2014: LD_INT 0
2016: PPUSH
2017: LD_VAR 0 5
2021: PPUSH
2022: CALL_OW 383
// un := CreateHuman ;
2026: LD_ADDR_VAR 0 4
2030: PUSH
2031: CALL_OW 44
2035: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2036: LD_INT 35
2038: PPUSH
2039: CALL_OW 67
// until PlaceUnitArea ( veh , arabEastSpawnArea , false ) ;
2043: LD_VAR 0 3
2047: PPUSH
2048: LD_INT 14
2050: PPUSH
2051: LD_INT 0
2053: PPUSH
2054: CALL_OW 49
2058: IFFALSE 2036
// PlaceHumanInUnit ( un , veh ) ;
2060: LD_VAR 0 4
2064: PPUSH
2065: LD_VAR 0 3
2069: PPUSH
2070: CALL_OW 52
// ComMoveXY ( veh , 151 , 28 ) ;
2074: LD_VAR 0 3
2078: PPUSH
2079: LD_INT 151
2081: PPUSH
2082: LD_INT 28
2084: PPUSH
2085: CALL_OW 111
// end ;
2089: GO 1907
2091: POP
2092: POP
// blockThread := false ;
2093: LD_ADDR_EXP 6
2097: PUSH
2098: LD_INT 0
2100: ST_TO_ADDR
// end ;
2101: LD_VAR 0 1
2105: RET
// export function ClearRoadInForest ; var i , un , veh , tmp , skill ; begin
2106: LD_INT 0
2108: PPUSH
2109: PPUSH
2110: PPUSH
2111: PPUSH
2112: PPUSH
2113: PPUSH
// blockThread := true ;
2114: LD_ADDR_EXP 6
2118: PUSH
2119: LD_INT 1
2121: ST_TO_ADDR
// skill := [ 4 , 5 , 7 ] [ Difficulty ] ;
2122: LD_ADDR_VAR 0 6
2126: PUSH
2127: LD_INT 4
2129: PUSH
2130: LD_INT 5
2132: PUSH
2133: LD_INT 7
2135: PUSH
2136: EMPTY
2137: LIST
2138: LIST
2139: LIST
2140: PUSH
2141: LD_OWVAR 67
2145: ARRAY
2146: ST_TO_ADDR
// tmp := AreaToList ( forestRoadArea , 0 ) ;
2147: LD_ADDR_VAR 0 5
2151: PUSH
2152: LD_INT 15
2154: PPUSH
2155: LD_INT 0
2157: PPUSH
2158: CALL_OW 517
2162: ST_TO_ADDR
// uc_side := enemySide ;
2163: LD_ADDR_OWVAR 20
2167: PUSH
2168: LD_EXP 12
2172: ST_TO_ADDR
// uc_nation := nation_arabian ;
2173: LD_ADDR_OWVAR 21
2177: PUSH
2178: LD_INT 2
2180: ST_TO_ADDR
// PrepareMechanic ( false , skill ) ;
2181: LD_INT 0
2183: PPUSH
2184: LD_VAR 0 6
2188: PPUSH
2189: CALL_OW 383
// un := CreateHuman ;
2193: LD_ADDR_VAR 0 3
2197: PUSH
2198: CALL_OW 44
2202: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower , 100 ) ;
2203: LD_INT 14
2205: PPUSH
2206: LD_INT 1
2208: PPUSH
2209: LD_INT 1
2211: PPUSH
2212: LD_INT 26
2214: PPUSH
2215: LD_INT 100
2217: PPUSH
2218: CALL 19962 0 5
// veh := CreateVehicle ;
2222: LD_ADDR_VAR 0 4
2226: PUSH
2227: CALL_OW 45
2231: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2232: LD_VAR 0 4
2236: PPUSH
2237: LD_INT 4
2239: PPUSH
2240: CALL_OW 233
// repeat wait ( 0 0$1 ) ;
2244: LD_INT 35
2246: PPUSH
2247: CALL_OW 67
// until PlaceUnitArea ( veh , arabEastSpawnArea , false ) ;
2251: LD_VAR 0 4
2255: PPUSH
2256: LD_INT 14
2258: PPUSH
2259: LD_INT 0
2261: PPUSH
2262: CALL_OW 49
2266: IFFALSE 2244
// PlaceHumanInUnit ( un , veh ) ;
2268: LD_VAR 0 3
2272: PPUSH
2273: LD_VAR 0 4
2277: PPUSH
2278: CALL_OW 52
// blockThread := false ;
2282: LD_ADDR_EXP 6
2286: PUSH
2287: LD_INT 0
2289: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
2290: LD_ADDR_VAR 0 2
2294: PUSH
2295: DOUBLE
2296: LD_INT 1
2298: DEC
2299: ST_TO_ADDR
2300: LD_VAR 0 5
2304: PUSH
2305: LD_INT 1
2307: ARRAY
2308: PUSH
2309: FOR_TO
2310: IFFALSE 2356
// BurnTreeXYR ( veh , tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 7 ) ;
2312: LD_VAR 0 4
2316: PPUSH
2317: LD_VAR 0 5
2321: PUSH
2322: LD_INT 1
2324: ARRAY
2325: PUSH
2326: LD_VAR 0 2
2330: ARRAY
2331: PPUSH
2332: LD_VAR 0 5
2336: PUSH
2337: LD_INT 2
2339: ARRAY
2340: PUSH
2341: LD_VAR 0 2
2345: ARRAY
2346: PPUSH
2347: LD_INT 7
2349: PPUSH
2350: CALL 59396 0 4
2354: GO 2309
2356: POP
2357: POP
// repeat wait ( 0 0$1 ) ;
2358: LD_INT 35
2360: PPUSH
2361: CALL_OW 67
// if IsDead ( veh ) then
2365: LD_VAR 0 4
2369: PPUSH
2370: CALL_OW 301
2374: IFFALSE 2378
// exit ;
2376: GO 2451
// until FilterUnitsInArea ( endOfTheForestArea , [ f_side , enemySide ] ) or not HasTask ( veh ) or not HasTask ( un ) ;
2378: LD_INT 16
2380: PPUSH
2381: LD_INT 22
2383: PUSH
2384: LD_EXP 12
2388: PUSH
2389: EMPTY
2390: LIST
2391: LIST
2392: PPUSH
2393: CALL_OW 70
2397: PUSH
2398: LD_VAR 0 4
2402: PPUSH
2403: CALL_OW 314
2407: NOT
2408: OR
2409: PUSH
2410: LD_VAR 0 3
2414: PPUSH
2415: CALL_OW 314
2419: NOT
2420: OR
2421: IFFALSE 2358
// forestIsCleared := true ;
2423: LD_ADDR_EXP 7
2427: PUSH
2428: LD_INT 1
2430: ST_TO_ADDR
// enemyMobile := Join ( enemyMobile , veh ) ;
2431: LD_ADDR_EXP 10
2435: PUSH
2436: LD_EXP 10
2440: PPUSH
2441: LD_VAR 0 4
2445: PPUSH
2446: CALL 52833 0 2
2450: ST_TO_ADDR
// end ;
2451: LD_VAR 0 1
2455: RET
// export function SendWestGroup ; var i , un , skill ; begin
2456: LD_INT 0
2458: PPUSH
2459: PPUSH
2460: PPUSH
2461: PPUSH
// blockThread := true ;
2462: LD_ADDR_EXP 6
2466: PUSH
2467: LD_INT 1
2469: ST_TO_ADDR
// skill := [ 3 , 5 , 7 ] [ Difficulty ] ;
2470: LD_ADDR_VAR 0 4
2474: PUSH
2475: LD_INT 3
2477: PUSH
2478: LD_INT 5
2480: PUSH
2481: LD_INT 7
2483: PUSH
2484: EMPTY
2485: LIST
2486: LIST
2487: LIST
2488: PUSH
2489: LD_OWVAR 67
2493: ARRAY
2494: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
2495: LD_ADDR_VAR 0 2
2499: PUSH
2500: DOUBLE
2501: LD_INT 1
2503: DEC
2504: ST_TO_ADDR
2505: LD_INT 2
2507: PUSH
2508: LD_INT 3
2510: PUSH
2511: LD_INT 3
2513: PUSH
2514: EMPTY
2515: LIST
2516: LIST
2517: LIST
2518: PUSH
2519: LD_OWVAR 67
2523: ARRAY
2524: PUSH
2525: FOR_TO
2526: IFFALSE 2651
// begin uc_side := enemySide ;
2528: LD_ADDR_OWVAR 20
2532: PUSH
2533: LD_EXP 12
2537: ST_TO_ADDR
// uc_nation := nation_arabian ;
2538: LD_ADDR_OWVAR 21
2542: PUSH
2543: LD_INT 2
2545: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
2546: LD_INT 0
2548: PPUSH
2549: LD_VAR 0 4
2553: PPUSH
2554: CALL_OW 381
// un := CreateHuman ;
2558: LD_ADDR_VAR 0 3
2562: PUSH
2563: CALL_OW 44
2567: ST_TO_ADDR
// if i mod 3 = 0 then
2568: LD_VAR 0 2
2572: PUSH
2573: LD_INT 3
2575: MOD
2576: PUSH
2577: LD_INT 0
2579: EQUAL
2580: IFFALSE 2594
// SetClass ( un , class_mortar ) ;
2582: LD_VAR 0 3
2586: PPUSH
2587: LD_INT 8
2589: PPUSH
2590: CALL_OW 336
// enemyUnits := Join ( enemyUnits , un ) ;
2594: LD_ADDR_EXP 9
2598: PUSH
2599: LD_EXP 9
2603: PPUSH
2604: LD_VAR 0 3
2608: PPUSH
2609: CALL 52833 0 2
2613: ST_TO_ADDR
// PlaceUnitArea ( un , arabWestSpawnArea , false ) ;
2614: LD_VAR 0 3
2618: PPUSH
2619: LD_INT 24
2621: PPUSH
2622: LD_INT 0
2624: PPUSH
2625: CALL_OW 49
// result := Join ( result , un ) ;
2629: LD_ADDR_VAR 0 1
2633: PUSH
2634: LD_VAR 0 1
2638: PPUSH
2639: LD_VAR 0 3
2643: PPUSH
2644: CALL 52833 0 2
2648: ST_TO_ADDR
// end ;
2649: GO 2525
2651: POP
2652: POP
// PrepareScientist ( false , skill ) ;
2653: LD_INT 0
2655: PPUSH
2656: LD_VAR 0 4
2660: PPUSH
2661: CALL_OW 384
// un := CreateHuman ;
2665: LD_ADDR_VAR 0 3
2669: PUSH
2670: CALL_OW 44
2674: ST_TO_ADDR
// enemyUnits := Join ( enemyUnits , un ) ;
2675: LD_ADDR_EXP 9
2679: PUSH
2680: LD_EXP 9
2684: PPUSH
2685: LD_VAR 0 3
2689: PPUSH
2690: CALL 52833 0 2
2694: ST_TO_ADDR
// PlaceUnitArea ( un , arabWestSpawnArea , false ) ;
2695: LD_VAR 0 3
2699: PPUSH
2700: LD_INT 24
2702: PPUSH
2703: LD_INT 0
2705: PPUSH
2706: CALL_OW 49
// result := Join ( result , un ) ;
2710: LD_ADDR_VAR 0 1
2714: PUSH
2715: LD_VAR 0 1
2719: PPUSH
2720: LD_VAR 0 3
2724: PPUSH
2725: CALL 52833 0 2
2729: ST_TO_ADDR
// ComAgressiveMove ( result , 24 , 37 ) ;
2730: LD_VAR 0 1
2734: PPUSH
2735: LD_INT 24
2737: PPUSH
2738: LD_INT 37
2740: PPUSH
2741: CALL_OW 114
// blockThread := false ;
2745: LD_ADDR_EXP 6
2749: PUSH
2750: LD_INT 0
2752: ST_TO_ADDR
// end ;
2753: LD_VAR 0 1
2757: RET
// export function PrepareForestOnslaught ; var i , veh , un , skill , v ; begin
2758: LD_INT 0
2760: PPUSH
2761: PPUSH
2762: PPUSH
2763: PPUSH
2764: PPUSH
2765: PPUSH
// blockThread := true ;
2766: LD_ADDR_EXP 6
2770: PUSH
2771: LD_INT 1
2773: ST_TO_ADDR
// v := convoyWave div 12 ;
2774: LD_ADDR_VAR 0 6
2778: PUSH
2779: LD_EXP 39
2783: PUSH
2784: LD_INT 12
2786: DIV
2787: ST_TO_ADDR
// skill := [ 4 , 5 , 6 ] [ Difficulty ] + v ;
2788: LD_ADDR_VAR 0 5
2792: PUSH
2793: LD_INT 4
2795: PUSH
2796: LD_INT 5
2798: PUSH
2799: LD_INT 6
2801: PUSH
2802: EMPTY
2803: LIST
2804: LIST
2805: LIST
2806: PUSH
2807: LD_OWVAR 67
2811: ARRAY
2812: PUSH
2813: LD_VAR 0 6
2817: PLUS
2818: ST_TO_ADDR
// if skill > 10 then
2819: LD_VAR 0 5
2823: PUSH
2824: LD_INT 10
2826: GREATER
2827: IFFALSE 2837
// skill := 10 ;
2829: LD_ADDR_VAR 0 5
2833: PUSH
2834: LD_INT 10
2836: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
2837: LD_ADDR_VAR 0 2
2841: PUSH
2842: DOUBLE
2843: LD_INT 1
2845: DEC
2846: ST_TO_ADDR
2847: LD_INT 2
2849: PUSH
2850: LD_INT 3
2852: PUSH
2853: LD_INT 3
2855: PUSH
2856: EMPTY
2857: LIST
2858: LIST
2859: LIST
2860: PUSH
2861: LD_OWVAR 67
2865: ARRAY
2866: PUSH
2867: FOR_TO
2868: IFFALSE 3071
// begin uc_side := enemySide ;
2870: LD_ADDR_OWVAR 20
2874: PUSH
2875: LD_EXP 12
2879: ST_TO_ADDR
// uc_nation := nation_arabian ;
2880: LD_ADDR_OWVAR 21
2884: PUSH
2885: LD_INT 2
2887: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , [ ar_gun , ar_radar , ar_light_gun ] [ i mod 3 + 1 ] , 100 ) ;
2888: LD_INT 14
2890: PPUSH
2891: LD_INT 1
2893: PPUSH
2894: LD_INT 1
2896: PPUSH
2897: LD_INT 27
2899: PUSH
2900: LD_INT 30
2902: PUSH
2903: LD_INT 23
2905: PUSH
2906: EMPTY
2907: LIST
2908: LIST
2909: LIST
2910: PUSH
2911: LD_VAR 0 2
2915: PUSH
2916: LD_INT 3
2918: MOD
2919: PUSH
2920: LD_INT 1
2922: PLUS
2923: ARRAY
2924: PPUSH
2925: LD_INT 100
2927: PPUSH
2928: CALL 19962 0 5
// veh := CreateVehicle ;
2932: LD_ADDR_VAR 0 3
2936: PUSH
2937: CALL_OW 45
2941: ST_TO_ADDR
// result := Join ( result , veh ) ;
2942: LD_ADDR_VAR 0 1
2946: PUSH
2947: LD_VAR 0 1
2951: PPUSH
2952: LD_VAR 0 3
2956: PPUSH
2957: CALL 52833 0 2
2961: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2962: LD_VAR 0 3
2966: PPUSH
2967: LD_INT 4
2969: PPUSH
2970: CALL_OW 233
// PrepareMechanic ( false , skill ) ;
2974: LD_INT 0
2976: PPUSH
2977: LD_VAR 0 5
2981: PPUSH
2982: CALL_OW 383
// un := CreateHuman ;
2986: LD_ADDR_VAR 0 4
2990: PUSH
2991: CALL_OW 44
2995: ST_TO_ADDR
// result := Join ( result , un ) ;
2996: LD_ADDR_VAR 0 1
3000: PUSH
3001: LD_VAR 0 1
3005: PPUSH
3006: LD_VAR 0 4
3010: PPUSH
3011: CALL 52833 0 2
3015: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3016: LD_INT 35
3018: PPUSH
3019: CALL_OW 67
// until PlaceUnitArea ( veh , arabEastSpawnArea , false ) ;
3023: LD_VAR 0 3
3027: PPUSH
3028: LD_INT 14
3030: PPUSH
3031: LD_INT 0
3033: PPUSH
3034: CALL_OW 49
3038: IFFALSE 3016
// PlaceHumanInUnit ( un , veh ) ;
3040: LD_VAR 0 4
3044: PPUSH
3045: LD_VAR 0 3
3049: PPUSH
3050: CALL_OW 52
// ComMoveXY ( veh , 159 , 53 ) ;
3054: LD_VAR 0 3
3058: PPUSH
3059: LD_INT 159
3061: PPUSH
3062: LD_INT 53
3064: PPUSH
3065: CALL_OW 111
// end ;
3069: GO 2867
3071: POP
3072: POP
// blockThread := false ;
3073: LD_ADDR_EXP 6
3077: PUSH
3078: LD_INT 0
3080: ST_TO_ADDR
// end ;
3081: LD_VAR 0 1
3085: RET
// export function SendEastGroup ; var i , un , skill ; begin
3086: LD_INT 0
3088: PPUSH
3089: PPUSH
3090: PPUSH
3091: PPUSH
// blockThread := true ;
3092: LD_ADDR_EXP 6
3096: PUSH
3097: LD_INT 1
3099: ST_TO_ADDR
// skill := [ 3 , 5 , 7 ] [ Difficulty ] ;
3100: LD_ADDR_VAR 0 4
3104: PUSH
3105: LD_INT 3
3107: PUSH
3108: LD_INT 5
3110: PUSH
3111: LD_INT 7
3113: PUSH
3114: EMPTY
3115: LIST
3116: LIST
3117: LIST
3118: PUSH
3119: LD_OWVAR 67
3123: ARRAY
3124: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
3125: LD_ADDR_VAR 0 2
3129: PUSH
3130: DOUBLE
3131: LD_INT 1
3133: DEC
3134: ST_TO_ADDR
3135: LD_INT 4
3137: PUSH
3138: LD_INT 5
3140: PUSH
3141: LD_INT 6
3143: PUSH
3144: EMPTY
3145: LIST
3146: LIST
3147: LIST
3148: PUSH
3149: LD_OWVAR 67
3153: ARRAY
3154: PUSH
3155: FOR_TO
3156: IFFALSE 3261
// begin uc_side := enemySide ;
3158: LD_ADDR_OWVAR 20
3162: PUSH
3163: LD_EXP 12
3167: ST_TO_ADDR
// uc_nation := nation_arabian ;
3168: LD_ADDR_OWVAR 21
3172: PUSH
3173: LD_INT 2
3175: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
3176: LD_INT 0
3178: PPUSH
3179: LD_VAR 0 4
3183: PPUSH
3184: CALL_OW 381
// un := CreateHuman ;
3188: LD_ADDR_VAR 0 3
3192: PUSH
3193: CALL_OW 44
3197: ST_TO_ADDR
// if i mod 3 = 0 then
3198: LD_VAR 0 2
3202: PUSH
3203: LD_INT 3
3205: MOD
3206: PUSH
3207: LD_INT 0
3209: EQUAL
3210: IFFALSE 3224
// SetClass ( un , class_mortar ) ;
3212: LD_VAR 0 3
3216: PPUSH
3217: LD_INT 8
3219: PPUSH
3220: CALL_OW 336
// PlaceUnitArea ( un , arabSouthSpawnArea , false ) ;
3224: LD_VAR 0 3
3228: PPUSH
3229: LD_INT 26
3231: PPUSH
3232: LD_INT 0
3234: PPUSH
3235: CALL_OW 49
// result := Join ( result , un ) ;
3239: LD_ADDR_VAR 0 1
3243: PUSH
3244: LD_VAR 0 1
3248: PPUSH
3249: LD_VAR 0 3
3253: PPUSH
3254: CALL 52833 0 2
3258: ST_TO_ADDR
// end ;
3259: GO 3155
3261: POP
3262: POP
// ComAgressiveMove ( result , 219 , 168 ) ;
3263: LD_VAR 0 1
3267: PPUSH
3268: LD_INT 219
3270: PPUSH
3271: LD_INT 168
3273: PPUSH
3274: CALL_OW 114
// blockThread := false ;
3278: LD_ADDR_EXP 6
3282: PUSH
3283: LD_INT 0
3285: ST_TO_ADDR
// end ;
3286: LD_VAR 0 1
3290: RET
// export function SendNorthGroup ; var i , un , skill , v ; begin
3291: LD_INT 0
3293: PPUSH
3294: PPUSH
3295: PPUSH
3296: PPUSH
3297: PPUSH
// blockThread := true ;
3298: LD_ADDR_EXP 6
3302: PUSH
3303: LD_INT 1
3305: ST_TO_ADDR
// v := convoyWave div 12 ;
3306: LD_ADDR_VAR 0 5
3310: PUSH
3311: LD_EXP 39
3315: PUSH
3316: LD_INT 12
3318: DIV
3319: ST_TO_ADDR
// skill := [ 4 , 5 , 6 ] [ Difficulty ] + v ;
3320: LD_ADDR_VAR 0 4
3324: PUSH
3325: LD_INT 4
3327: PUSH
3328: LD_INT 5
3330: PUSH
3331: LD_INT 6
3333: PUSH
3334: EMPTY
3335: LIST
3336: LIST
3337: LIST
3338: PUSH
3339: LD_OWVAR 67
3343: ARRAY
3344: PUSH
3345: LD_VAR 0 5
3349: PLUS
3350: ST_TO_ADDR
// if skill > 10 then
3351: LD_VAR 0 4
3355: PUSH
3356: LD_INT 10
3358: GREATER
3359: IFFALSE 3369
// skill := 10 ;
3361: LD_ADDR_VAR 0 4
3365: PUSH
3366: LD_INT 10
3368: ST_TO_ADDR
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
3369: LD_ADDR_VAR 0 2
3373: PUSH
3374: DOUBLE
3375: LD_INT 1
3377: DEC
3378: ST_TO_ADDR
3379: LD_INT 3
3381: PUSH
3382: LD_INT 4
3384: PUSH
3385: LD_INT 5
3387: PUSH
3388: EMPTY
3389: LIST
3390: LIST
3391: LIST
3392: PUSH
3393: LD_OWVAR 67
3397: ARRAY
3398: PUSH
3399: FOR_TO
3400: IFFALSE 3505
// begin uc_side := enemySide ;
3402: LD_ADDR_OWVAR 20
3406: PUSH
3407: LD_EXP 12
3411: ST_TO_ADDR
// uc_nation := nation_arabian ;
3412: LD_ADDR_OWVAR 21
3416: PUSH
3417: LD_INT 2
3419: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
3420: LD_INT 0
3422: PPUSH
3423: LD_VAR 0 4
3427: PPUSH
3428: CALL_OW 381
// un := CreateHuman ;
3432: LD_ADDR_VAR 0 3
3436: PUSH
3437: CALL_OW 44
3441: ST_TO_ADDR
// if i mod 3 = 0 then
3442: LD_VAR 0 2
3446: PUSH
3447: LD_INT 3
3449: MOD
3450: PUSH
3451: LD_INT 0
3453: EQUAL
3454: IFFALSE 3468
// SetClass ( un , class_mortar ) ;
3456: LD_VAR 0 3
3460: PPUSH
3461: LD_INT 8
3463: PPUSH
3464: CALL_OW 336
// PlaceUnitArea ( un , arabNorthForestSpawnArea , false ) ;
3468: LD_VAR 0 3
3472: PPUSH
3473: LD_INT 27
3475: PPUSH
3476: LD_INT 0
3478: PPUSH
3479: CALL_OW 49
// result := Join ( result , un ) ;
3483: LD_ADDR_VAR 0 1
3487: PUSH
3488: LD_VAR 0 1
3492: PPUSH
3493: LD_VAR 0 3
3497: PPUSH
3498: CALL 52833 0 2
3502: ST_TO_ADDR
// end ;
3503: GO 3399
3505: POP
3506: POP
// ComAgressiveMove ( result , 77 , 23 ) ;
3507: LD_VAR 0 1
3511: PPUSH
3512: LD_INT 77
3514: PPUSH
3515: LD_INT 23
3517: PPUSH
3518: CALL_OW 114
// blockThread := false ;
3522: LD_ADDR_EXP 6
3526: PUSH
3527: LD_INT 0
3529: ST_TO_ADDR
// end ;
3530: LD_VAR 0 1
3534: RET
// export function SendEastGroup2 ; var i , un , skill , v ; begin
3535: LD_INT 0
3537: PPUSH
3538: PPUSH
3539: PPUSH
3540: PPUSH
3541: PPUSH
// blockThread := true ;
3542: LD_ADDR_EXP 6
3546: PUSH
3547: LD_INT 1
3549: ST_TO_ADDR
// v := convoyWave div 12 ;
3550: LD_ADDR_VAR 0 5
3554: PUSH
3555: LD_EXP 39
3559: PUSH
3560: LD_INT 12
3562: DIV
3563: ST_TO_ADDR
// skill := [ 4 , 5 , 6 ] [ Difficulty ] + v ;
3564: LD_ADDR_VAR 0 4
3568: PUSH
3569: LD_INT 4
3571: PUSH
3572: LD_INT 5
3574: PUSH
3575: LD_INT 6
3577: PUSH
3578: EMPTY
3579: LIST
3580: LIST
3581: LIST
3582: PUSH
3583: LD_OWVAR 67
3587: ARRAY
3588: PUSH
3589: LD_VAR 0 5
3593: PLUS
3594: ST_TO_ADDR
// if skill > 10 then
3595: LD_VAR 0 4
3599: PUSH
3600: LD_INT 10
3602: GREATER
3603: IFFALSE 3613
// skill := 10 ;
3605: LD_ADDR_VAR 0 4
3609: PUSH
3610: LD_INT 10
3612: ST_TO_ADDR
// for i := 1 to [ 3 , 4 , 4 ] [ Difficulty ] do
3613: LD_ADDR_VAR 0 2
3617: PUSH
3618: DOUBLE
3619: LD_INT 1
3621: DEC
3622: ST_TO_ADDR
3623: LD_INT 3
3625: PUSH
3626: LD_INT 4
3628: PUSH
3629: LD_INT 4
3631: PUSH
3632: EMPTY
3633: LIST
3634: LIST
3635: LIST
3636: PUSH
3637: LD_OWVAR 67
3641: ARRAY
3642: PUSH
3643: FOR_TO
3644: IFFALSE 3749
// begin uc_side := enemySide ;
3646: LD_ADDR_OWVAR 20
3650: PUSH
3651: LD_EXP 12
3655: ST_TO_ADDR
// uc_nation := nation_arabian ;
3656: LD_ADDR_OWVAR 21
3660: PUSH
3661: LD_INT 2
3663: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
3664: LD_INT 0
3666: PPUSH
3667: LD_VAR 0 4
3671: PPUSH
3672: CALL_OW 381
// un := CreateHuman ;
3676: LD_ADDR_VAR 0 3
3680: PUSH
3681: CALL_OW 44
3685: ST_TO_ADDR
// if i mod 3 = 0 then
3686: LD_VAR 0 2
3690: PUSH
3691: LD_INT 3
3693: MOD
3694: PUSH
3695: LD_INT 0
3697: EQUAL
3698: IFFALSE 3712
// SetClass ( un , class_mortar ) ;
3700: LD_VAR 0 3
3704: PPUSH
3705: LD_INT 8
3707: PPUSH
3708: CALL_OW 336
// PlaceUnitArea ( un , arabEastForestSpawnArea , false ) ;
3712: LD_VAR 0 3
3716: PPUSH
3717: LD_INT 28
3719: PPUSH
3720: LD_INT 0
3722: PPUSH
3723: CALL_OW 49
// result := Join ( result , un ) ;
3727: LD_ADDR_VAR 0 1
3731: PUSH
3732: LD_VAR 0 1
3736: PPUSH
3737: LD_VAR 0 3
3741: PPUSH
3742: CALL 52833 0 2
3746: ST_TO_ADDR
// end ;
3747: GO 3643
3749: POP
3750: POP
// ComAgressiveMove ( result , 147 , 100 ) ;
3751: LD_VAR 0 1
3755: PPUSH
3756: LD_INT 147
3758: PPUSH
3759: LD_INT 100
3761: PPUSH
3762: CALL_OW 114
// blockThread := false ;
3766: LD_ADDR_EXP 6
3770: PUSH
3771: LD_INT 0
3773: ST_TO_ADDR
// end ; end_of_file
3774: LD_VAR 0 1
3778: RET
// export multi_gametype , multi_sides , multi_side_teams , multi_nations , multi_teams , multi_spec , multi_pos_area , multi_allowed_nations , multi_bots , multi_teamgame , multi_custom_commanders , multi_settings , multi_settings_counter , multi_pep_amount , multi_skill_level , multi_crates_spawn , multi_vehicles , multi_commanders , multi_loosers , multi_players_amount , multi_points_to_victory , multi_buildings ; export function InitMultiplayer ; var i , j , x , tmp ; begin
3779: LD_INT 0
3781: PPUSH
3782: PPUSH
3783: PPUSH
3784: PPUSH
3785: PPUSH
// multi_settings_counter := 5 ;
3786: LD_ADDR_EXP 26
3790: PUSH
3791: LD_INT 5
3793: ST_TO_ADDR
// multi_settings := [ ] ;
3794: LD_ADDR_EXP 25
3798: PUSH
3799: EMPTY
3800: ST_TO_ADDR
// if Multiplayer then
3801: LD_OWVAR 4
3805: IFFALSE 3985
// begin your_side := mp_player_side ;
3807: LD_ADDR_OWVAR 2
3811: PUSH
3812: LD_OWVAR 7
3816: ST_TO_ADDR
// multi_gametype := mp_game_type ;
3817: LD_ADDR_EXP 14
3821: PUSH
3822: LD_OWVAR 6
3826: ST_TO_ADDR
// multi_sides := mp_sides_positions ;
3827: LD_ADDR_EXP 15
3831: PUSH
3832: LD_OWVAR 17
3836: ST_TO_ADDR
// multi_side_teams := mp_sides_teams ;
3837: LD_ADDR_EXP 16
3841: PUSH
3842: LD_OWVAR 15
3846: ST_TO_ADDR
// multi_nations := mp_sides_nations ;
3847: LD_ADDR_EXP 17
3851: PUSH
3852: LD_OWVAR 16
3856: ST_TO_ADDR
// multi_teams := [ [ ] ] ;
3857: LD_ADDR_EXP 18
3861: PUSH
3862: EMPTY
3863: PUSH
3864: EMPTY
3865: LIST
3866: ST_TO_ADDR
// for i in mp_teams do
3867: LD_ADDR_VAR 0 2
3871: PUSH
3872: LD_OWVAR 12
3876: PUSH
3877: FOR_IN
3878: IFFALSE 3921
// if i then
3880: LD_VAR 0 2
3884: IFFALSE 3919
// multi_teams := Replace ( multi_teams , 1 , multi_teams [ 1 ] union i ) ;
3886: LD_ADDR_EXP 18
3890: PUSH
3891: LD_EXP 18
3895: PPUSH
3896: LD_INT 1
3898: PPUSH
3899: LD_EXP 18
3903: PUSH
3904: LD_INT 1
3906: ARRAY
3907: PUSH
3908: LD_VAR 0 2
3912: UNION
3913: PPUSH
3914: CALL_OW 1
3918: ST_TO_ADDR
3919: GO 3877
3921: POP
3922: POP
// for i := 1 to multi_settings_counter do
3923: LD_ADDR_VAR 0 2
3927: PUSH
3928: DOUBLE
3929: LD_INT 1
3931: DEC
3932: ST_TO_ADDR
3933: LD_EXP 26
3937: PUSH
3938: FOR_TO
3939: IFFALSE 3981
// multi_settings := Replace ( multi_settings , multi_settings + 1 , GetMultiplayerSetting ( i ) + 1 ) ;
3941: LD_ADDR_EXP 25
3945: PUSH
3946: LD_EXP 25
3950: PPUSH
3951: LD_EXP 25
3955: PUSH
3956: LD_INT 1
3958: PLUS
3959: PPUSH
3960: LD_VAR 0 2
3964: PPUSH
3965: CALL_OW 426
3969: PUSH
3970: LD_INT 1
3972: PLUS
3973: PPUSH
3974: CALL_OW 1
3978: ST_TO_ADDR
3979: GO 3938
3981: POP
3982: POP
// end else
3983: GO 4167
// begin your_side := 3 ;
3985: LD_ADDR_OWVAR 2
3989: PUSH
3990: LD_INT 3
3992: ST_TO_ADDR
// multi_gametype := 1 ;
3993: LD_ADDR_EXP 14
3997: PUSH
3998: LD_INT 1
4000: ST_TO_ADDR
// multi_sides := [ 0 , 0 , 2 , 0 , 0 , 0 , 1 , 0 ] ;
4001: LD_ADDR_EXP 15
4005: PUSH
4006: LD_INT 0
4008: PUSH
4009: LD_INT 0
4011: PUSH
4012: LD_INT 2
4014: PUSH
4015: LD_INT 0
4017: PUSH
4018: LD_INT 0
4020: PUSH
4021: LD_INT 0
4023: PUSH
4024: LD_INT 1
4026: PUSH
4027: LD_INT 0
4029: PUSH
4030: EMPTY
4031: LIST
4032: LIST
4033: LIST
4034: LIST
4035: LIST
4036: LIST
4037: LIST
4038: LIST
4039: ST_TO_ADDR
// multi_side_teams := [ 0 , 0 , 1 , 0 , 0 , 0 , 1 , 0 ] ;
4040: LD_ADDR_EXP 16
4044: PUSH
4045: LD_INT 0
4047: PUSH
4048: LD_INT 0
4050: PUSH
4051: LD_INT 1
4053: PUSH
4054: LD_INT 0
4056: PUSH
4057: LD_INT 0
4059: PUSH
4060: LD_INT 0
4062: PUSH
4063: LD_INT 1
4065: PUSH
4066: LD_INT 0
4068: PUSH
4069: EMPTY
4070: LIST
4071: LIST
4072: LIST
4073: LIST
4074: LIST
4075: LIST
4076: LIST
4077: LIST
4078: ST_TO_ADDR
// multi_nations := [ 0 , 0 , 3 , 0 , 0 , 0 , 3 , 0 ] ;
4079: LD_ADDR_EXP 17
4083: PUSH
4084: LD_INT 0
4086: PUSH
4087: LD_INT 0
4089: PUSH
4090: LD_INT 3
4092: PUSH
4093: LD_INT 0
4095: PUSH
4096: LD_INT 0
4098: PUSH
4099: LD_INT 0
4101: PUSH
4102: LD_INT 3
4104: PUSH
4105: LD_INT 0
4107: PUSH
4108: EMPTY
4109: LIST
4110: LIST
4111: LIST
4112: LIST
4113: LIST
4114: LIST
4115: LIST
4116: LIST
4117: ST_TO_ADDR
// multi_teams := [ [ 3 , 7 ] ] ;
4118: LD_ADDR_EXP 18
4122: PUSH
4123: LD_INT 3
4125: PUSH
4126: LD_INT 7
4128: PUSH
4129: EMPTY
4130: LIST
4131: LIST
4132: PUSH
4133: EMPTY
4134: LIST
4135: ST_TO_ADDR
// multi_settings := [ 2 , 1 , 4 , 3 , 2 , 4 ] ;
4136: LD_ADDR_EXP 25
4140: PUSH
4141: LD_INT 2
4143: PUSH
4144: LD_INT 1
4146: PUSH
4147: LD_INT 4
4149: PUSH
4150: LD_INT 3
4152: PUSH
4153: LD_INT 2
4155: PUSH
4156: LD_INT 4
4158: PUSH
4159: EMPTY
4160: LIST
4161: LIST
4162: LIST
4163: LIST
4164: LIST
4165: LIST
4166: ST_TO_ADDR
// end ; multi_spec := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4167: LD_ADDR_EXP 19
4171: PUSH
4172: LD_INT 0
4174: PUSH
4175: LD_INT 0
4177: PUSH
4178: LD_INT 0
4180: PUSH
4181: LD_INT 0
4183: PUSH
4184: LD_INT 0
4186: PUSH
4187: LD_INT 0
4189: PUSH
4190: LD_INT 0
4192: PUSH
4193: LD_INT 0
4195: PUSH
4196: EMPTY
4197: LIST
4198: LIST
4199: LIST
4200: LIST
4201: LIST
4202: LIST
4203: LIST
4204: LIST
4205: ST_TO_ADDR
// multi_bots := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4206: LD_ADDR_EXP 22
4210: PUSH
4211: LD_INT 0
4213: PUSH
4214: LD_INT 0
4216: PUSH
4217: LD_INT 0
4219: PUSH
4220: LD_INT 0
4222: PUSH
4223: LD_INT 0
4225: PUSH
4226: LD_INT 0
4228: PUSH
4229: LD_INT 0
4231: PUSH
4232: LD_INT 0
4234: PUSH
4235: EMPTY
4236: LIST
4237: LIST
4238: LIST
4239: LIST
4240: LIST
4241: LIST
4242: LIST
4243: LIST
4244: ST_TO_ADDR
// multi_loosers := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4245: LD_ADDR_EXP 32
4249: PUSH
4250: LD_INT 0
4252: PUSH
4253: LD_INT 0
4255: PUSH
4256: LD_INT 0
4258: PUSH
4259: LD_INT 0
4261: PUSH
4262: LD_INT 0
4264: PUSH
4265: LD_INT 0
4267: PUSH
4268: LD_INT 0
4270: PUSH
4271: LD_INT 0
4273: PUSH
4274: EMPTY
4275: LIST
4276: LIST
4277: LIST
4278: LIST
4279: LIST
4280: LIST
4281: LIST
4282: LIST
4283: ST_TO_ADDR
// multi_teamgame := true ;
4284: LD_ADDR_EXP 23
4288: PUSH
4289: LD_INT 1
4291: ST_TO_ADDR
// multi_allowed_nations := [ 3 ] ;
4292: LD_ADDR_EXP 21
4296: PUSH
4297: LD_INT 3
4299: PUSH
4300: EMPTY
4301: LIST
4302: ST_TO_ADDR
// multi_custom_commanders := true ;
4303: LD_ADDR_EXP 24
4307: PUSH
4308: LD_INT 1
4310: ST_TO_ADDR
// multi_commanders := [ ] ;
4311: LD_ADDR_EXP 31
4315: PUSH
4316: EMPTY
4317: ST_TO_ADDR
// multi_players_amount := 0 ;
4318: LD_ADDR_EXP 33
4322: PUSH
4323: LD_INT 0
4325: ST_TO_ADDR
// multi_pos_area := [ [ player1SpawnArea , player1SpawnArea ] , [ player2SpawnArea , player2VehSpawnArea ] ] ;
4326: LD_ADDR_EXP 20
4330: PUSH
4331: LD_INT 3
4333: PUSH
4334: LD_INT 3
4336: PUSH
4337: EMPTY
4338: LIST
4339: LIST
4340: PUSH
4341: LD_INT 4
4343: PUSH
4344: LD_INT 6
4346: PUSH
4347: EMPTY
4348: LIST
4349: LIST
4350: PUSH
4351: EMPTY
4352: LIST
4353: LIST
4354: ST_TO_ADDR
// multi_buildings := [ [ [ b_depot , [ 108 , 110 , 2 ] ] , [ b_bunker , [ 117 , 101 , 3 ] , ru_gun ] , [ b_bunker , [ 124 , 107 , 3 ] , ru_gatling_gun ] , [ b_bunker , [ 94 , 114 , 1 ] , ru_gun ] , [ b_bunker , [ 110 , 94 , 4 ] , ru_gun ] , [ b_oil_mine , [ 126 , 124 , 5 ] ] , [ b_oil_power , [ 101 , 115 , 0 ] ] , [ b_oil_power , [ 125 , 121 , 3 ] ] , [ b_factory , [ 109 , 126 , 0 ] ] , [ b_ext_gun , [ 112 , 129 , 5 ] ] ] , [ [ b_breastwork , [ 95 , 36 , 4 ] ] , [ b_breastwork , [ 116 , 66 , 3 ] ] , [ b_breastwork , [ 157 , 159 , 4 ] ] , [ b_breastwork , [ 75 , 88 , 3 ] ] , [ b_breastwork , [ 63 , 82 , 3 ] ] , [ b_breastwork , [ 106 , 147 , 4 ] ] , [ b_workshop , [ 124 , 164 , 5 ] ] , [ b_armoury , [ 129 , 159 , 4 ] ] , ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
4355: LD_ADDR_EXP 35
4359: PUSH
4360: LD_INT 0
4362: PUSH
4363: LD_INT 108
4365: PUSH
4366: LD_INT 110
4368: PUSH
4369: LD_INT 2
4371: PUSH
4372: EMPTY
4373: LIST
4374: LIST
4375: LIST
4376: PUSH
4377: EMPTY
4378: LIST
4379: LIST
4380: PUSH
4381: LD_INT 32
4383: PUSH
4384: LD_INT 117
4386: PUSH
4387: LD_INT 101
4389: PUSH
4390: LD_INT 3
4392: PUSH
4393: EMPTY
4394: LIST
4395: LIST
4396: LIST
4397: PUSH
4398: LD_INT 44
4400: PUSH
4401: EMPTY
4402: LIST
4403: LIST
4404: LIST
4405: PUSH
4406: LD_INT 32
4408: PUSH
4409: LD_INT 124
4411: PUSH
4412: LD_INT 107
4414: PUSH
4415: LD_INT 3
4417: PUSH
4418: EMPTY
4419: LIST
4420: LIST
4421: LIST
4422: PUSH
4423: LD_INT 43
4425: PUSH
4426: EMPTY
4427: LIST
4428: LIST
4429: LIST
4430: PUSH
4431: LD_INT 32
4433: PUSH
4434: LD_INT 94
4436: PUSH
4437: LD_INT 114
4439: PUSH
4440: LD_INT 1
4442: PUSH
4443: EMPTY
4444: LIST
4445: LIST
4446: LIST
4447: PUSH
4448: LD_INT 44
4450: PUSH
4451: EMPTY
4452: LIST
4453: LIST
4454: LIST
4455: PUSH
4456: LD_INT 32
4458: PUSH
4459: LD_INT 110
4461: PUSH
4462: LD_INT 94
4464: PUSH
4465: LD_INT 4
4467: PUSH
4468: EMPTY
4469: LIST
4470: LIST
4471: LIST
4472: PUSH
4473: LD_INT 44
4475: PUSH
4476: EMPTY
4477: LIST
4478: LIST
4479: LIST
4480: PUSH
4481: LD_INT 29
4483: PUSH
4484: LD_INT 126
4486: PUSH
4487: LD_INT 124
4489: PUSH
4490: LD_INT 5
4492: PUSH
4493: EMPTY
4494: LIST
4495: LIST
4496: LIST
4497: PUSH
4498: EMPTY
4499: LIST
4500: LIST
4501: PUSH
4502: LD_INT 26
4504: PUSH
4505: LD_INT 101
4507: PUSH
4508: LD_INT 115
4510: PUSH
4511: LD_INT 0
4513: PUSH
4514: EMPTY
4515: LIST
4516: LIST
4517: LIST
4518: PUSH
4519: EMPTY
4520: LIST
4521: LIST
4522: PUSH
4523: LD_INT 26
4525: PUSH
4526: LD_INT 125
4528: PUSH
4529: LD_INT 121
4531: PUSH
4532: LD_INT 3
4534: PUSH
4535: EMPTY
4536: LIST
4537: LIST
4538: LIST
4539: PUSH
4540: EMPTY
4541: LIST
4542: LIST
4543: PUSH
4544: LD_INT 3
4546: PUSH
4547: LD_INT 109
4549: PUSH
4550: LD_INT 126
4552: PUSH
4553: LD_INT 0
4555: PUSH
4556: EMPTY
4557: LIST
4558: LIST
4559: LIST
4560: PUSH
4561: EMPTY
4562: LIST
4563: LIST
4564: PUSH
4565: LD_INT 17
4567: PUSH
4568: LD_INT 112
4570: PUSH
4571: LD_INT 129
4573: PUSH
4574: LD_INT 5
4576: PUSH
4577: EMPTY
4578: LIST
4579: LIST
4580: LIST
4581: PUSH
4582: EMPTY
4583: LIST
4584: LIST
4585: PUSH
4586: EMPTY
4587: LIST
4588: LIST
4589: LIST
4590: LIST
4591: LIST
4592: LIST
4593: LIST
4594: LIST
4595: LIST
4596: LIST
4597: PUSH
4598: LD_INT 31
4600: PUSH
4601: LD_INT 95
4603: PUSH
4604: LD_INT 36
4606: PUSH
4607: LD_INT 4
4609: PUSH
4610: EMPTY
4611: LIST
4612: LIST
4613: LIST
4614: PUSH
4615: EMPTY
4616: LIST
4617: LIST
4618: PUSH
4619: LD_INT 31
4621: PUSH
4622: LD_INT 116
4624: PUSH
4625: LD_INT 66
4627: PUSH
4628: LD_INT 3
4630: PUSH
4631: EMPTY
4632: LIST
4633: LIST
4634: LIST
4635: PUSH
4636: EMPTY
4637: LIST
4638: LIST
4639: PUSH
4640: LD_INT 31
4642: PUSH
4643: LD_INT 157
4645: PUSH
4646: LD_INT 159
4648: PUSH
4649: LD_INT 4
4651: PUSH
4652: EMPTY
4653: LIST
4654: LIST
4655: LIST
4656: PUSH
4657: EMPTY
4658: LIST
4659: LIST
4660: PUSH
4661: LD_INT 31
4663: PUSH
4664: LD_INT 75
4666: PUSH
4667: LD_INT 88
4669: PUSH
4670: LD_INT 3
4672: PUSH
4673: EMPTY
4674: LIST
4675: LIST
4676: LIST
4677: PUSH
4678: EMPTY
4679: LIST
4680: LIST
4681: PUSH
4682: LD_INT 31
4684: PUSH
4685: LD_INT 63
4687: PUSH
4688: LD_INT 82
4690: PUSH
4691: LD_INT 3
4693: PUSH
4694: EMPTY
4695: LIST
4696: LIST
4697: LIST
4698: PUSH
4699: EMPTY
4700: LIST
4701: LIST
4702: PUSH
4703: LD_INT 31
4705: PUSH
4706: LD_INT 106
4708: PUSH
4709: LD_INT 147
4711: PUSH
4712: LD_INT 4
4714: PUSH
4715: EMPTY
4716: LIST
4717: LIST
4718: LIST
4719: PUSH
4720: EMPTY
4721: LIST
4722: LIST
4723: PUSH
4724: LD_INT 2
4726: PUSH
4727: LD_INT 124
4729: PUSH
4730: LD_INT 164
4732: PUSH
4733: LD_INT 5
4735: PUSH
4736: EMPTY
4737: LIST
4738: LIST
4739: LIST
4740: PUSH
4741: EMPTY
4742: LIST
4743: LIST
4744: PUSH
4745: LD_INT 4
4747: PUSH
4748: LD_INT 129
4750: PUSH
4751: LD_INT 159
4753: PUSH
4754: LD_INT 4
4756: PUSH
4757: EMPTY
4758: LIST
4759: LIST
4760: LIST
4761: PUSH
4762: EMPTY
4763: LIST
4764: LIST
4765: PUSH
4766: EMPTY
4767: LIST
4768: LIST
4769: LIST
4770: LIST
4771: LIST
4772: LIST
4773: LIST
4774: LIST
4775: PUSH
4776: EMPTY
4777: PUSH
4778: EMPTY
4779: PUSH
4780: EMPTY
4781: PUSH
4782: EMPTY
4783: PUSH
4784: EMPTY
4785: PUSH
4786: EMPTY
4787: PUSH
4788: EMPTY
4789: LIST
4790: LIST
4791: LIST
4792: LIST
4793: LIST
4794: LIST
4795: LIST
4796: LIST
4797: ST_TO_ADDR
// multi_vehicles := [ [ ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_tracked , engine_combustion , control_manual , ru_cargo_bay ] , [ ru_medium_tracked , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun ] [ Difficulty ] ] , [ ru_medium_tracked , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun ] [ Difficulty ] ] , [ ru_medium_tracked , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun ] [ Difficulty ] ] ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
4798: LD_ADDR_EXP 30
4802: PUSH
4803: EMPTY
4804: PUSH
4805: LD_INT 21
4807: PUSH
4808: LD_INT 1
4810: PUSH
4811: LD_INT 1
4813: PUSH
4814: LD_INT 42
4816: PUSH
4817: EMPTY
4818: LIST
4819: LIST
4820: LIST
4821: LIST
4822: PUSH
4823: LD_INT 22
4825: PUSH
4826: LD_INT 1
4828: PUSH
4829: LD_INT 1
4831: PUSH
4832: LD_INT 51
4834: PUSH
4835: EMPTY
4836: LIST
4837: LIST
4838: LIST
4839: LIST
4840: PUSH
4841: LD_INT 22
4843: PUSH
4844: LD_INT 1
4846: PUSH
4847: LD_INT 1
4849: PUSH
4850: LD_INT 44
4852: PUSH
4853: LD_INT 43
4855: PUSH
4856: LD_INT 42
4858: PUSH
4859: EMPTY
4860: LIST
4861: LIST
4862: LIST
4863: PUSH
4864: LD_OWVAR 67
4868: ARRAY
4869: PUSH
4870: EMPTY
4871: LIST
4872: LIST
4873: LIST
4874: LIST
4875: PUSH
4876: LD_INT 22
4878: PUSH
4879: LD_INT 1
4881: PUSH
4882: LD_INT 1
4884: PUSH
4885: LD_INT 44
4887: PUSH
4888: LD_INT 43
4890: PUSH
4891: LD_INT 42
4893: PUSH
4894: EMPTY
4895: LIST
4896: LIST
4897: LIST
4898: PUSH
4899: LD_OWVAR 67
4903: ARRAY
4904: PUSH
4905: EMPTY
4906: LIST
4907: LIST
4908: LIST
4909: LIST
4910: PUSH
4911: LD_INT 22
4913: PUSH
4914: LD_INT 1
4916: PUSH
4917: LD_INT 1
4919: PUSH
4920: LD_INT 44
4922: PUSH
4923: LD_INT 43
4925: PUSH
4926: LD_INT 42
4928: PUSH
4929: EMPTY
4930: LIST
4931: LIST
4932: LIST
4933: PUSH
4934: LD_OWVAR 67
4938: ARRAY
4939: PUSH
4940: EMPTY
4941: LIST
4942: LIST
4943: LIST
4944: LIST
4945: PUSH
4946: EMPTY
4947: LIST
4948: LIST
4949: LIST
4950: LIST
4951: LIST
4952: PUSH
4953: EMPTY
4954: PUSH
4955: EMPTY
4956: PUSH
4957: EMPTY
4958: PUSH
4959: EMPTY
4960: PUSH
4961: EMPTY
4962: PUSH
4963: EMPTY
4964: PUSH
4965: EMPTY
4966: LIST
4967: LIST
4968: LIST
4969: LIST
4970: LIST
4971: LIST
4972: LIST
4973: LIST
4974: ST_TO_ADDR
// for i := 1 to 8 do
4975: LD_ADDR_VAR 0 2
4979: PUSH
4980: DOUBLE
4981: LD_INT 1
4983: DEC
4984: ST_TO_ADDR
4985: LD_INT 8
4987: PUSH
4988: FOR_TO
4989: IFFALSE 5318
// begin if Multiplayer_GetPlayerIsSpec ( i ) then
4991: LD_VAR 0 2
4995: PPUSH
4996: CALL_OW 530
5000: IFFALSE 5158
// begin multi_spec := Replace ( multi_spec , i , 1 ) ;
5002: LD_ADDR_EXP 19
5006: PUSH
5007: LD_EXP 19
5011: PPUSH
5012: LD_VAR 0 2
5016: PPUSH
5017: LD_INT 1
5019: PPUSH
5020: CALL_OW 1
5024: ST_TO_ADDR
// multi_nations := Replace ( multi_nations , i , 0 ) ;
5025: LD_ADDR_EXP 17
5029: PUSH
5030: LD_EXP 17
5034: PPUSH
5035: LD_VAR 0 2
5039: PPUSH
5040: LD_INT 0
5042: PPUSH
5043: CALL_OW 1
5047: ST_TO_ADDR
// multi_sides := Replace ( multi_sides , i , 0 ) ;
5048: LD_ADDR_EXP 15
5052: PUSH
5053: LD_EXP 15
5057: PPUSH
5058: LD_VAR 0 2
5062: PPUSH
5063: LD_INT 0
5065: PPUSH
5066: CALL_OW 1
5070: ST_TO_ADDR
// for j = 1 to multi_teams do
5071: LD_ADDR_VAR 0 3
5075: PUSH
5076: DOUBLE
5077: LD_INT 1
5079: DEC
5080: ST_TO_ADDR
5081: LD_EXP 18
5085: PUSH
5086: FOR_TO
5087: IFFALSE 5156
// begin if i in multi_teams [ j ] then
5089: LD_VAR 0 2
5093: PUSH
5094: LD_EXP 18
5098: PUSH
5099: LD_VAR 0 3
5103: ARRAY
5104: IN
5105: IFFALSE 5154
// begin tmp := multi_teams [ j ] diff i ;
5107: LD_ADDR_VAR 0 5
5111: PUSH
5112: LD_EXP 18
5116: PUSH
5117: LD_VAR 0 3
5121: ARRAY
5122: PUSH
5123: LD_VAR 0 2
5127: DIFF
5128: ST_TO_ADDR
// multi_teams := Replace ( multi_teams , j , tmp ) ;
5129: LD_ADDR_EXP 18
5133: PUSH
5134: LD_EXP 18
5138: PPUSH
5139: LD_VAR 0 3
5143: PPUSH
5144: LD_VAR 0 5
5148: PPUSH
5149: CALL_OW 1
5153: ST_TO_ADDR
// end ; end ;
5154: GO 5086
5156: POP
5157: POP
// end ; if multi_nations [ i ] and not multi_nations [ i ] in multi_allowed_nations then
5158: LD_EXP 17
5162: PUSH
5163: LD_VAR 0 2
5167: ARRAY
5168: PUSH
5169: LD_EXP 17
5173: PUSH
5174: LD_VAR 0 2
5178: ARRAY
5179: PUSH
5180: LD_EXP 21
5184: IN
5185: NOT
5186: AND
5187: IFFALSE 5228
// multi_nations := Replace ( multi_nations , i , multi_allowed_nations [ rand ( 1 , multi_allowed_nations ) ] ) ;
5189: LD_ADDR_EXP 17
5193: PUSH
5194: LD_EXP 17
5198: PPUSH
5199: LD_VAR 0 2
5203: PPUSH
5204: LD_EXP 21
5208: PUSH
5209: LD_INT 1
5211: PPUSH
5212: LD_EXP 21
5216: PPUSH
5217: CALL_OW 12
5221: ARRAY
5222: PPUSH
5223: CALL_OW 1
5227: ST_TO_ADDR
// if not multi_nations [ i ] and not multi_sides [ i ] and not multi_spec [ i ] then
5228: LD_EXP 17
5232: PUSH
5233: LD_VAR 0 2
5237: ARRAY
5238: NOT
5239: PUSH
5240: LD_EXP 15
5244: PUSH
5245: LD_VAR 0 2
5249: ARRAY
5250: NOT
5251: AND
5252: PUSH
5253: LD_EXP 19
5257: PUSH
5258: LD_VAR 0 2
5262: ARRAY
5263: NOT
5264: AND
5265: IFFALSE 5290
// multi_bots := Replace ( multi_bots , i , 1 ) ;
5267: LD_ADDR_EXP 22
5271: PUSH
5272: LD_EXP 22
5276: PPUSH
5277: LD_VAR 0 2
5281: PPUSH
5282: LD_INT 1
5284: PPUSH
5285: CALL_OW 1
5289: ST_TO_ADDR
// if multi_sides [ i ] then
5290: LD_EXP 15
5294: PUSH
5295: LD_VAR 0 2
5299: ARRAY
5300: IFFALSE 5316
// multi_players_amount := multi_players_amount + 1 ;
5302: LD_ADDR_EXP 33
5306: PUSH
5307: LD_EXP 33
5311: PUSH
5312: LD_INT 1
5314: PLUS
5315: ST_TO_ADDR
// end ;
5316: GO 4988
5318: POP
5319: POP
// for i in multi_teams do
5320: LD_ADDR_VAR 0 2
5324: PUSH
5325: LD_EXP 18
5329: PUSH
5330: FOR_IN
5331: IFFALSE 5439
// begin for j = 2 to i do
5333: LD_ADDR_VAR 0 3
5337: PUSH
5338: DOUBLE
5339: LD_INT 2
5341: DEC
5342: ST_TO_ADDR
5343: LD_VAR 0 2
5347: PUSH
5348: FOR_TO
5349: IFFALSE 5435
// begin ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
5351: LD_VAR 0 2
5355: PUSH
5356: LD_VAR 0 3
5360: ARRAY
5361: PPUSH
5362: LD_VAR 0 2
5366: PUSH
5367: LD_INT 1
5369: ARRAY
5370: PPUSH
5371: CALL_OW 343
// for x = 1 to j - 1 do
5375: LD_ADDR_VAR 0 4
5379: PUSH
5380: DOUBLE
5381: LD_INT 1
5383: DEC
5384: ST_TO_ADDR
5385: LD_VAR 0 3
5389: PUSH
5390: LD_INT 1
5392: MINUS
5393: PUSH
5394: FOR_TO
5395: IFFALSE 5431
// SetAttitude ( i [ j ] , i [ x ] , att_friend , true ) ;
5397: LD_VAR 0 2
5401: PUSH
5402: LD_VAR 0 3
5406: ARRAY
5407: PPUSH
5408: LD_VAR 0 2
5412: PUSH
5413: LD_VAR 0 4
5417: ARRAY
5418: PPUSH
5419: LD_INT 1
5421: PPUSH
5422: LD_INT 1
5424: PPUSH
5425: CALL_OW 80
5429: GO 5394
5431: POP
5432: POP
// end ;
5433: GO 5348
5435: POP
5436: POP
// end ;
5437: GO 5330
5439: POP
5440: POP
// Difficulty := [ 1 , 2 , 3 ] [ multi_settings [ 1 ] ] ;
5441: LD_ADDR_OWVAR 67
5445: PUSH
5446: LD_INT 1
5448: PUSH
5449: LD_INT 2
5451: PUSH
5452: LD_INT 3
5454: PUSH
5455: EMPTY
5456: LIST
5457: LIST
5458: LIST
5459: PUSH
5460: LD_EXP 25
5464: PUSH
5465: LD_INT 1
5467: ARRAY
5468: ARRAY
5469: ST_TO_ADDR
// multi_pep_amount := [ 9 , 12 , 15 ] [ multi_settings [ 2 ] ] ;
5470: LD_ADDR_EXP 27
5474: PUSH
5475: LD_INT 9
5477: PUSH
5478: LD_INT 12
5480: PUSH
5481: LD_INT 15
5483: PUSH
5484: EMPTY
5485: LIST
5486: LIST
5487: LIST
5488: PUSH
5489: LD_EXP 25
5493: PUSH
5494: LD_INT 2
5496: ARRAY
5497: ARRAY
5498: ST_TO_ADDR
// multi_skill_level := [ 1 , 3 , 4 , 6 ] [ multi_settings [ 3 ] ] ;
5499: LD_ADDR_EXP 28
5503: PUSH
5504: LD_INT 1
5506: PUSH
5507: LD_INT 3
5509: PUSH
5510: LD_INT 4
5512: PUSH
5513: LD_INT 6
5515: PUSH
5516: EMPTY
5517: LIST
5518: LIST
5519: LIST
5520: LIST
5521: PUSH
5522: LD_EXP 25
5526: PUSH
5527: LD_INT 3
5529: ARRAY
5530: ARRAY
5531: ST_TO_ADDR
// multi_points_to_victory := [ 3500 , 5000 , 7500 , 10000 , 15000 ] [ multi_settings [ 4 ] ] ;
5532: LD_ADDR_EXP 34
5536: PUSH
5537: LD_INT 3500
5539: PUSH
5540: LD_INT 5000
5542: PUSH
5543: LD_INT 7500
5545: PUSH
5546: LD_INT 10000
5548: PUSH
5549: LD_INT 15000
5551: PUSH
5552: EMPTY
5553: LIST
5554: LIST
5555: LIST
5556: LIST
5557: LIST
5558: PUSH
5559: LD_EXP 25
5563: PUSH
5564: LD_INT 4
5566: ARRAY
5567: ARRAY
5568: ST_TO_ADDR
// multi_crates_spawn := [ [ 1000 , 0 0$36 ] , [ 2000 , 0 0$30 ] , [ 3000 , 0 0$24 ] , [ 4000 , 0 0$18 ] ] [ multi_settings [ 5 ] ] ;
5569: LD_ADDR_EXP 29
5573: PUSH
5574: LD_INT 1000
5576: PUSH
5577: LD_INT 1260
5579: PUSH
5580: EMPTY
5581: LIST
5582: LIST
5583: PUSH
5584: LD_INT 2000
5586: PUSH
5587: LD_INT 1050
5589: PUSH
5590: EMPTY
5591: LIST
5592: LIST
5593: PUSH
5594: LD_INT 3000
5596: PUSH
5597: LD_INT 840
5599: PUSH
5600: EMPTY
5601: LIST
5602: LIST
5603: PUSH
5604: LD_INT 4000
5606: PUSH
5607: LD_INT 630
5609: PUSH
5610: EMPTY
5611: LIST
5612: LIST
5613: PUSH
5614: EMPTY
5615: LIST
5616: LIST
5617: LIST
5618: LIST
5619: PUSH
5620: LD_EXP 25
5624: PUSH
5625: LD_INT 5
5627: ARRAY
5628: ARRAY
5629: ST_TO_ADDR
// end ;
5630: LD_VAR 0 1
5634: RET
// export function Multiplayer_SetBotSide ( preferSide ) ; var i ; begin
5635: LD_INT 0
5637: PPUSH
5638: PPUSH
// if not multi_sides [ preferSide ] then
5639: LD_EXP 15
5643: PUSH
5644: LD_VAR 0 1
5648: ARRAY
5649: NOT
5650: IFFALSE 5664
// begin result := preferSide ;
5652: LD_ADDR_VAR 0 2
5656: PUSH
5657: LD_VAR 0 1
5661: ST_TO_ADDR
// exit ;
5662: GO 5711
// end ; for i := 1 to 8 do
5664: LD_ADDR_VAR 0 3
5668: PUSH
5669: DOUBLE
5670: LD_INT 1
5672: DEC
5673: ST_TO_ADDR
5674: LD_INT 8
5676: PUSH
5677: FOR_TO
5678: IFFALSE 5709
// if not multi_sides [ i ] then
5680: LD_EXP 15
5684: PUSH
5685: LD_VAR 0 3
5689: ARRAY
5690: NOT
5691: IFFALSE 5707
// begin result := i ;
5693: LD_ADDR_VAR 0 2
5697: PUSH
5698: LD_VAR 0 3
5702: ST_TO_ADDR
// exit ;
5703: POP
5704: POP
5705: GO 5711
// end ;
5707: GO 5677
5709: POP
5710: POP
// end ;
5711: LD_VAR 0 2
5715: RET
// export function Multiplayer_PrepareCustomCommanders ( side , num ) ; begin
5716: LD_INT 0
5718: PPUSH
// uc_side := side ;
5719: LD_ADDR_OWVAR 20
5723: PUSH
5724: LD_VAR 0 1
5728: ST_TO_ADDR
// uc_nation := nation_russian ;
5729: LD_ADDR_OWVAR 21
5733: PUSH
5734: LD_INT 3
5736: ST_TO_ADDR
// hc_importance := 100 ;
5737: LD_ADDR_OWVAR 32
5741: PUSH
5742: LD_INT 100
5744: ST_TO_ADDR
// if num = 1 then
5745: LD_VAR 0 2
5749: PUSH
5750: LD_INT 1
5752: EQUAL
5753: IFFALSE 5820
// begin PrepareSoldier ( sex_male , multi_skill_level + 1 ) ;
5755: LD_INT 1
5757: PPUSH
5758: LD_EXP 28
5762: PUSH
5763: LD_INT 1
5765: PLUS
5766: PPUSH
5767: CALL_OW 381
// hc_gallery := ru ;
5771: LD_ADDR_OWVAR 33
5775: PUSH
5776: LD_STRING ru
5778: ST_TO_ADDR
// hc_face_number := 13 ;
5779: LD_ADDR_OWVAR 34
5783: PUSH
5784: LD_INT 13
5786: ST_TO_ADDR
// hc_name := Kuzmov ;
5787: LD_ADDR_OWVAR 26
5791: PUSH
5792: LD_STRING Kuzmov
5794: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
5795: LD_ADDR_OWVAR 29
5799: PUSH
5800: LD_INT 11
5802: PUSH
5803: LD_INT 11
5805: PUSH
5806: EMPTY
5807: LIST
5808: LIST
5809: ST_TO_ADDR
// result := CreateHuman ;
5810: LD_ADDR_VAR 0 3
5814: PUSH
5815: CALL_OW 44
5819: ST_TO_ADDR
// end ; if num = 2 then
5820: LD_VAR 0 2
5824: PUSH
5825: LD_INT 2
5827: EQUAL
5828: IFFALSE 5895
// begin PrepareMechanic ( sex_male , multi_skill_level + 2 ) ;
5830: LD_INT 1
5832: PPUSH
5833: LD_EXP 28
5837: PUSH
5838: LD_INT 2
5840: PLUS
5841: PPUSH
5842: CALL_OW 383
// hc_gallery := ru ;
5846: LD_ADDR_OWVAR 33
5850: PUSH
5851: LD_STRING ru
5853: ST_TO_ADDR
// hc_face_number := 1 ;
5854: LD_ADDR_OWVAR 34
5858: PUSH
5859: LD_INT 1
5861: ST_TO_ADDR
// hc_name := Burlak ;
5862: LD_ADDR_OWVAR 26
5866: PUSH
5867: LD_STRING Burlak
5869: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
5870: LD_ADDR_OWVAR 29
5874: PUSH
5875: LD_INT 10
5877: PUSH
5878: LD_INT 11
5880: PUSH
5881: EMPTY
5882: LIST
5883: LIST
5884: ST_TO_ADDR
// result := CreateHuman ;
5885: LD_ADDR_VAR 0 3
5889: PUSH
5890: CALL_OW 44
5894: ST_TO_ADDR
// end ; end ;
5895: LD_VAR 0 3
5899: RET
// export function Multiplayer_PreparePlayers ( ) ; var i , j , b , cl , un , veh , vehicles , tmp , people_amount ; begin
5900: LD_INT 0
5902: PPUSH
5903: PPUSH
5904: PPUSH
5905: PPUSH
5906: PPUSH
5907: PPUSH
5908: PPUSH
5909: PPUSH
5910: PPUSH
5911: PPUSH
// for i := 1 to 8 do
5912: LD_ADDR_VAR 0 2
5916: PUSH
5917: DOUBLE
5918: LD_INT 1
5920: DEC
5921: ST_TO_ADDR
5922: LD_INT 8
5924: PUSH
5925: FOR_TO
5926: IFFALSE 7348
// begin if not multi_sides [ i ] then
5928: LD_EXP 15
5932: PUSH
5933: LD_VAR 0 2
5937: ARRAY
5938: NOT
5939: IFFALSE 5943
// continue ;
5941: GO 5925
// vehicles := multi_vehicles [ multi_sides [ i ] ] ;
5943: LD_ADDR_VAR 0 8
5947: PUSH
5948: LD_EXP 30
5952: PUSH
5953: LD_EXP 15
5957: PUSH
5958: LD_VAR 0 2
5962: ARRAY
5963: ARRAY
5964: ST_TO_ADDR
// if multi_buildings [ multi_sides [ i ] ] then
5965: LD_EXP 35
5969: PUSH
5970: LD_EXP 15
5974: PUSH
5975: LD_VAR 0 2
5979: ARRAY
5980: ARRAY
5981: IFFALSE 6278
// begin uc_side := i ;
5983: LD_ADDR_OWVAR 20
5987: PUSH
5988: LD_VAR 0 2
5992: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
5993: LD_ADDR_OWVAR 21
5997: PUSH
5998: LD_EXP 17
6002: PUSH
6003: LD_VAR 0 2
6007: ARRAY
6008: ST_TO_ADDR
// for j in multi_buildings [ multi_sides [ i ] ] do
6009: LD_ADDR_VAR 0 3
6013: PUSH
6014: LD_EXP 35
6018: PUSH
6019: LD_EXP 15
6023: PUSH
6024: LD_VAR 0 2
6028: ARRAY
6029: ARRAY
6030: PUSH
6031: FOR_IN
6032: IFFALSE 6276
// begin if j [ 1 ] = b_oil_mine then
6034: LD_VAR 0 3
6038: PUSH
6039: LD_INT 1
6041: ARRAY
6042: PUSH
6043: LD_INT 29
6045: EQUAL
6046: IFFALSE 6083
// SetResourceVisibility ( j [ 2 ] [ 1 ] , j [ 2 ] [ 2 ] , i ) ;
6048: LD_VAR 0 3
6052: PUSH
6053: LD_INT 2
6055: ARRAY
6056: PUSH
6057: LD_INT 1
6059: ARRAY
6060: PPUSH
6061: LD_VAR 0 3
6065: PUSH
6066: LD_INT 2
6068: ARRAY
6069: PUSH
6070: LD_INT 2
6072: ARRAY
6073: PPUSH
6074: LD_VAR 0 2
6078: PPUSH
6079: CALL_OW 441
// bc_type := j [ 1 ] ;
6083: LD_ADDR_OWVAR 42
6087: PUSH
6088: LD_VAR 0 3
6092: PUSH
6093: LD_INT 1
6095: ARRAY
6096: ST_TO_ADDR
// bc_level := 3 ;
6097: LD_ADDR_OWVAR 43
6101: PUSH
6102: LD_INT 3
6104: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( j [ 2 ] [ 1 ] , j [ 2 ] [ 2 ] , j [ 2 ] [ 3 ] ) ;
6105: LD_ADDR_VAR 0 4
6109: PUSH
6110: LD_VAR 0 3
6114: PUSH
6115: LD_INT 2
6117: ARRAY
6118: PUSH
6119: LD_INT 1
6121: ARRAY
6122: PPUSH
6123: LD_VAR 0 3
6127: PUSH
6128: LD_INT 2
6130: ARRAY
6131: PUSH
6132: LD_INT 2
6134: ARRAY
6135: PPUSH
6136: LD_VAR 0 3
6140: PUSH
6141: LD_INT 2
6143: ARRAY
6144: PUSH
6145: LD_INT 3
6147: ARRAY
6148: PPUSH
6149: CALL_OW 47
6153: ST_TO_ADDR
// if j [ 1 ] = b_depot then
6154: LD_VAR 0 3
6158: PUSH
6159: LD_INT 1
6161: ARRAY
6162: PUSH
6163: LD_INT 0
6165: EQUAL
6166: IFFALSE 6242
// begin SetResourceType ( GetBase ( b ) , mat_cans , [ 450 , 350 , 230 ] [ Difficulty ] ) ;
6168: LD_VAR 0 4
6172: PPUSH
6173: CALL_OW 274
6177: PPUSH
6178: LD_INT 1
6180: PPUSH
6181: LD_INT 450
6183: PUSH
6184: LD_INT 350
6186: PUSH
6187: LD_INT 230
6189: PUSH
6190: EMPTY
6191: LIST
6192: LIST
6193: LIST
6194: PUSH
6195: LD_OWVAR 67
6199: ARRAY
6200: PPUSH
6201: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_oil , [ 90 , 60 , 40 ] [ Difficulty ] ) ;
6205: LD_VAR 0 4
6209: PPUSH
6210: CALL_OW 274
6214: PPUSH
6215: LD_INT 2
6217: PPUSH
6218: LD_INT 90
6220: PUSH
6221: LD_INT 60
6223: PUSH
6224: LD_INT 40
6226: PUSH
6227: EMPTY
6228: LIST
6229: LIST
6230: LIST
6231: PUSH
6232: LD_OWVAR 67
6236: ARRAY
6237: PPUSH
6238: CALL_OW 277
// end ; if j [ 1 ] = b_bunker then
6242: LD_VAR 0 3
6246: PUSH
6247: LD_INT 1
6249: ARRAY
6250: PUSH
6251: LD_INT 32
6253: EQUAL
6254: IFFALSE 6274
// PlaceWeaponTurret ( b , j [ 3 ] ) ;
6256: LD_VAR 0 4
6260: PPUSH
6261: LD_VAR 0 3
6265: PUSH
6266: LD_INT 3
6268: ARRAY
6269: PPUSH
6270: CALL_OW 431
// end ;
6274: GO 6031
6276: POP
6277: POP
// end ; if multi_custom_commanders then
6278: LD_EXP 24
6282: IFFALSE 6499
// begin un := Multiplayer_PrepareCustomCommanders ( i , multi_sides [ i ] ) ;
6284: LD_ADDR_VAR 0 6
6288: PUSH
6289: LD_VAR 0 2
6293: PPUSH
6294: LD_EXP 15
6298: PUSH
6299: LD_VAR 0 2
6303: ARRAY
6304: PPUSH
6305: CALL 5716 0 2
6309: ST_TO_ADDR
// multi_commanders := Insert ( multi_commanders , multi_commanders + 1 , un ) ;
6310: LD_ADDR_EXP 31
6314: PUSH
6315: LD_EXP 31
6319: PPUSH
6320: LD_EXP 31
6324: PUSH
6325: LD_INT 1
6327: PLUS
6328: PPUSH
6329: LD_VAR 0 6
6333: PPUSH
6334: CALL_OW 2
6338: ST_TO_ADDR
// if GetClass ( un ) = class_mechanic then
6339: LD_VAR 0 6
6343: PPUSH
6344: CALL_OW 257
6348: PUSH
6349: LD_INT 3
6351: EQUAL
6352: IFFALSE 6464
// begin uc_nation := nation_russian ;
6354: LD_ADDR_OWVAR 21
6358: PUSH
6359: LD_INT 3
6361: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_wheeled , engine_combustion , control_manual , ru_gun , 80 ) ;
6362: LD_INT 23
6364: PPUSH
6365: LD_INT 1
6367: PPUSH
6368: LD_INT 1
6370: PPUSH
6371: LD_INT 44
6373: PPUSH
6374: LD_INT 80
6376: PPUSH
6377: CALL 19962 0 5
// veh := CreateVehicle ;
6381: LD_ADDR_VAR 0 7
6385: PUSH
6386: CALL_OW 45
6390: ST_TO_ADDR
// SetMark ( veh , GetSide ( un ) * - 1 ) ;
6391: LD_VAR 0 7
6395: PPUSH
6396: LD_VAR 0 6
6400: PPUSH
6401: CALL_OW 255
6405: PUSH
6406: LD_INT 1
6408: NEG
6409: MUL
6410: PPUSH
6411: CALL_OW 242
// PlaceUnitArea ( veh , multi_pos_area [ multi_sides [ i ] ] [ 2 ] , false ) ;
6415: LD_VAR 0 7
6419: PPUSH
6420: LD_EXP 20
6424: PUSH
6425: LD_EXP 15
6429: PUSH
6430: LD_VAR 0 2
6434: ARRAY
6435: ARRAY
6436: PUSH
6437: LD_INT 2
6439: ARRAY
6440: PPUSH
6441: LD_INT 0
6443: PPUSH
6444: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
6448: LD_VAR 0 6
6452: PPUSH
6453: LD_VAR 0 7
6457: PPUSH
6458: CALL_OW 52
// end else
6462: GO 6497
// PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
6464: LD_VAR 0 6
6468: PPUSH
6469: LD_EXP 20
6473: PUSH
6474: LD_EXP 15
6478: PUSH
6479: LD_VAR 0 2
6483: ARRAY
6484: ARRAY
6485: PUSH
6486: LD_INT 1
6488: ARRAY
6489: PPUSH
6490: LD_INT 0
6492: PPUSH
6493: CALL_OW 49
// end else
6497: GO 6710
// begin uc_side := i ;
6499: LD_ADDR_OWVAR 20
6503: PUSH
6504: LD_VAR 0 2
6508: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
6509: LD_ADDR_OWVAR 21
6513: PUSH
6514: LD_EXP 17
6518: PUSH
6519: LD_VAR 0 2
6523: ARRAY
6524: ST_TO_ADDR
// hc_importance := 100 ;
6525: LD_ADDR_OWVAR 32
6529: PUSH
6530: LD_INT 100
6532: ST_TO_ADDR
// PrepareHuman ( false , 1 , multi_skill_level ) ;
6533: LD_INT 0
6535: PPUSH
6536: LD_INT 1
6538: PPUSH
6539: LD_EXP 28
6543: PPUSH
6544: CALL_OW 380
// if multiplayer then
6548: LD_OWVAR 4
6552: IFFALSE 6610
// begin hc_name := mp_sides_players_names [ i ] ;
6554: LD_ADDR_OWVAR 26
6558: PUSH
6559: LD_OWVAR 19
6563: PUSH
6564: LD_VAR 0 2
6568: ARRAY
6569: ST_TO_ADDR
// hc_gallery := MULTIAVATARS ;
6570: LD_ADDR_OWVAR 33
6574: PUSH
6575: LD_STRING MULTIAVATARS
6577: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( i ) ;
6578: LD_ADDR_OWVAR 34
6582: PUSH
6583: LD_VAR 0 2
6587: PPUSH
6588: CALL_OW 525
6592: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( i ) ;
6593: LD_ADDR_OWVAR 27
6597: PUSH
6598: LD_VAR 0 2
6602: PPUSH
6603: CALL_OW 526
6607: ST_TO_ADDR
// end else
6608: GO 6642
// begin hc_gallery :=  ;
6610: LD_ADDR_OWVAR 33
6614: PUSH
6615: LD_STRING 
6617: ST_TO_ADDR
// hc_name :=  ;
6618: LD_ADDR_OWVAR 26
6622: PUSH
6623: LD_STRING 
6625: ST_TO_ADDR
// hc_sex := rand ( 1 , 2 ) ;
6626: LD_ADDR_OWVAR 27
6630: PUSH
6631: LD_INT 1
6633: PPUSH
6634: LD_INT 2
6636: PPUSH
6637: CALL_OW 12
6641: ST_TO_ADDR
// end ; un := CreateHuman ;
6642: LD_ADDR_VAR 0 6
6646: PUSH
6647: CALL_OW 44
6651: ST_TO_ADDR
// PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
6652: LD_VAR 0 6
6656: PPUSH
6657: LD_EXP 20
6661: PUSH
6662: LD_EXP 15
6666: PUSH
6667: LD_VAR 0 2
6671: ARRAY
6672: ARRAY
6673: PUSH
6674: LD_INT 1
6676: ARRAY
6677: PPUSH
6678: LD_INT 0
6680: PPUSH
6681: CALL_OW 49
// multi_commanders := Replace ( multi_commanders , i , un ) ;
6685: LD_ADDR_EXP 31
6689: PUSH
6690: LD_EXP 31
6694: PPUSH
6695: LD_VAR 0 2
6699: PPUSH
6700: LD_VAR 0 6
6704: PPUSH
6705: CALL_OW 1
6709: ST_TO_ADDR
// end ; InitHc ;
6710: CALL_OW 19
// InitUc ;
6714: CALL_OW 18
// uc_side := i ;
6718: LD_ADDR_OWVAR 20
6722: PUSH
6723: LD_VAR 0 2
6727: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
6728: LD_ADDR_OWVAR 21
6732: PUSH
6733: LD_EXP 17
6737: PUSH
6738: LD_VAR 0 2
6742: ARRAY
6743: ST_TO_ADDR
// hc_gallery :=  ;
6744: LD_ADDR_OWVAR 33
6748: PUSH
6749: LD_STRING 
6751: ST_TO_ADDR
// hc_name :=  ;
6752: LD_ADDR_OWVAR 26
6756: PUSH
6757: LD_STRING 
6759: ST_TO_ADDR
// hc_importance := 0 ;
6760: LD_ADDR_OWVAR 32
6764: PUSH
6765: LD_INT 0
6767: ST_TO_ADDR
// cl := 1 ;
6768: LD_ADDR_VAR 0 5
6772: PUSH
6773: LD_INT 1
6775: ST_TO_ADDR
// for j := 2 to multi_pep_amount do
6776: LD_ADDR_VAR 0 3
6780: PUSH
6781: DOUBLE
6782: LD_INT 2
6784: DEC
6785: ST_TO_ADDR
6786: LD_EXP 27
6790: PUSH
6791: FOR_TO
6792: IFFALSE 7344
// begin if ( j - 1 ) mod ( ( multi_pep_amount - 1 ) / 4 ) = 0 then
6794: LD_VAR 0 3
6798: PUSH
6799: LD_INT 1
6801: MINUS
6802: PUSH
6803: LD_EXP 27
6807: PUSH
6808: LD_INT 1
6810: MINUS
6811: PUSH
6812: LD_INT 4
6814: DIVREAL
6815: MOD
6816: PUSH
6817: LD_INT 0
6819: EQUAL
6820: IFFALSE 6836
// cl := cl + 1 ;
6822: LD_ADDR_VAR 0 5
6826: PUSH
6827: LD_VAR 0 5
6831: PUSH
6832: LD_INT 1
6834: PLUS
6835: ST_TO_ADDR
// if cl > 4 then
6836: LD_VAR 0 5
6840: PUSH
6841: LD_INT 4
6843: GREATER
6844: IFFALSE 6854
// cl := 1 ;
6846: LD_ADDR_VAR 0 5
6850: PUSH
6851: LD_INT 1
6853: ST_TO_ADDR
// if multi_sides [ i ] = 2 and ( cl = 2 or ( cl = 4 and FilterAllUnits ( [ [ f_side , i ] , [ f_class , 4 ] ] ) > 1 ) ) then
6854: LD_EXP 15
6858: PUSH
6859: LD_VAR 0 2
6863: ARRAY
6864: PUSH
6865: LD_INT 2
6867: EQUAL
6868: PUSH
6869: LD_VAR 0 5
6873: PUSH
6874: LD_INT 2
6876: EQUAL
6877: PUSH
6878: LD_VAR 0 5
6882: PUSH
6883: LD_INT 4
6885: EQUAL
6886: PUSH
6887: LD_INT 22
6889: PUSH
6890: LD_VAR 0 2
6894: PUSH
6895: EMPTY
6896: LIST
6897: LIST
6898: PUSH
6899: LD_INT 25
6901: PUSH
6902: LD_INT 4
6904: PUSH
6905: EMPTY
6906: LIST
6907: LIST
6908: PUSH
6909: EMPTY
6910: LIST
6911: LIST
6912: PPUSH
6913: CALL_OW 69
6917: PUSH
6918: LD_INT 1
6920: GREATER
6921: AND
6922: OR
6923: AND
6924: IFFALSE 6943
// PrepareHuman ( false , 1 , multi_skill_level ) else
6926: LD_INT 0
6928: PPUSH
6929: LD_INT 1
6931: PPUSH
6932: LD_EXP 28
6936: PPUSH
6937: CALL_OW 380
6941: GO 6960
// PrepareHuman ( false , cl , multi_skill_level ) ;
6943: LD_INT 0
6945: PPUSH
6946: LD_VAR 0 5
6950: PPUSH
6951: LD_EXP 28
6955: PPUSH
6956: CALL_OW 380
// un := CreateHuman ;
6960: LD_ADDR_VAR 0 6
6964: PUSH
6965: CALL_OW 44
6969: ST_TO_ADDR
// if multi_pos_area then
6970: LD_EXP 20
6974: IFFALSE 7342
// begin if GetClass ( un ) = 3 and vehicles then
6976: LD_VAR 0 6
6980: PPUSH
6981: CALL_OW 257
6985: PUSH
6986: LD_INT 3
6988: EQUAL
6989: PUSH
6990: LD_VAR 0 8
6994: AND
6995: IFFALSE 7180
// begin PrepareVehicle ( vehicles [ 1 ] [ 1 ] , vehicles [ 1 ] [ 2 ] , vehicles [ 1 ] [ 3 ] , vehicles [ 1 ] [ 4 ] , [ 80 , 60 , 40 ] [ Difficulty ] ) ;
6997: LD_VAR 0 8
7001: PUSH
7002: LD_INT 1
7004: ARRAY
7005: PUSH
7006: LD_INT 1
7008: ARRAY
7009: PPUSH
7010: LD_VAR 0 8
7014: PUSH
7015: LD_INT 1
7017: ARRAY
7018: PUSH
7019: LD_INT 2
7021: ARRAY
7022: PPUSH
7023: LD_VAR 0 8
7027: PUSH
7028: LD_INT 1
7030: ARRAY
7031: PUSH
7032: LD_INT 3
7034: ARRAY
7035: PPUSH
7036: LD_VAR 0 8
7040: PUSH
7041: LD_INT 1
7043: ARRAY
7044: PUSH
7045: LD_INT 4
7047: ARRAY
7048: PPUSH
7049: LD_INT 80
7051: PUSH
7052: LD_INT 60
7054: PUSH
7055: LD_INT 40
7057: PUSH
7058: EMPTY
7059: LIST
7060: LIST
7061: LIST
7062: PUSH
7063: LD_OWVAR 67
7067: ARRAY
7068: PPUSH
7069: CALL 19962 0 5
// veh := CreateVehicle ;
7073: LD_ADDR_VAR 0 7
7077: PUSH
7078: CALL_OW 45
7082: ST_TO_ADDR
// PlaceUnitArea ( veh , multi_pos_area [ multi_sides [ i ] ] [ 2 ] , false ) ;
7083: LD_VAR 0 7
7087: PPUSH
7088: LD_EXP 20
7092: PUSH
7093: LD_EXP 15
7097: PUSH
7098: LD_VAR 0 2
7102: ARRAY
7103: ARRAY
7104: PUSH
7105: LD_INT 2
7107: ARRAY
7108: PPUSH
7109: LD_INT 0
7111: PPUSH
7112: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
7116: LD_VAR 0 6
7120: PPUSH
7121: LD_VAR 0 7
7125: PPUSH
7126: CALL_OW 52
// if GetWeapon ( veh ) = ru_cargo_bay then
7130: LD_VAR 0 7
7134: PPUSH
7135: CALL_OW 264
7139: PUSH
7140: LD_INT 51
7142: EQUAL
7143: IFFALSE 7160
// SetCargo ( veh , mat_oil , 60 ) ;
7145: LD_VAR 0 7
7149: PPUSH
7150: LD_INT 2
7152: PPUSH
7153: LD_INT 60
7155: PPUSH
7156: CALL_OW 290
// vehicles := Delete ( vehicles , 1 ) ;
7160: LD_ADDR_VAR 0 8
7164: PUSH
7165: LD_VAR 0 8
7169: PPUSH
7170: LD_INT 1
7172: PPUSH
7173: CALL_OW 3
7177: ST_TO_ADDR
// continue ;
7178: GO 6791
// end ; tmp := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ;
7180: LD_ADDR_VAR 0 9
7184: PUSH
7185: LD_INT 22
7187: PUSH
7188: LD_VAR 0 2
7192: PUSH
7193: EMPTY
7194: LIST
7195: LIST
7196: PUSH
7197: LD_INT 2
7199: PUSH
7200: LD_INT 30
7202: PUSH
7203: LD_INT 32
7205: PUSH
7206: EMPTY
7207: LIST
7208: LIST
7209: PUSH
7210: LD_INT 30
7212: PUSH
7213: LD_INT 31
7215: PUSH
7216: EMPTY
7217: LIST
7218: LIST
7219: PUSH
7220: EMPTY
7221: LIST
7222: LIST
7223: LIST
7224: PUSH
7225: LD_INT 58
7227: PUSH
7228: EMPTY
7229: LIST
7230: PUSH
7231: EMPTY
7232: LIST
7233: LIST
7234: LIST
7235: PPUSH
7236: CALL_OW 69
7240: ST_TO_ADDR
// if GetClass ( un ) = 1 and tmp then
7241: LD_VAR 0 6
7245: PPUSH
7246: CALL_OW 257
7250: PUSH
7251: LD_INT 1
7253: EQUAL
7254: PUSH
7255: LD_VAR 0 9
7259: AND
7260: IFFALSE 7309
// begin SetDir ( un , GetDir ( tmp [ 1 ] ) - 3 ) ;
7262: LD_VAR 0 6
7266: PPUSH
7267: LD_VAR 0 9
7271: PUSH
7272: LD_INT 1
7274: ARRAY
7275: PPUSH
7276: CALL_OW 254
7280: PUSH
7281: LD_INT 3
7283: MINUS
7284: PPUSH
7285: CALL_OW 233
// PlaceHumanInUnit ( un , tmp [ 1 ] ) ;
7289: LD_VAR 0 6
7293: PPUSH
7294: LD_VAR 0 9
7298: PUSH
7299: LD_INT 1
7301: ARRAY
7302: PPUSH
7303: CALL_OW 52
// continue ;
7307: GO 6791
// end ; PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
7309: LD_VAR 0 6
7313: PPUSH
7314: LD_EXP 20
7318: PUSH
7319: LD_EXP 15
7323: PUSH
7324: LD_VAR 0 2
7328: ARRAY
7329: ARRAY
7330: PUSH
7331: LD_INT 1
7333: ARRAY
7334: PPUSH
7335: LD_INT 0
7337: PPUSH
7338: CALL_OW 49
// end ; end ;
7342: GO 6791
7344: POP
7345: POP
// end ;
7346: GO 5925
7348: POP
7349: POP
// end ;
7350: LD_VAR 0 1
7354: RET
// export function Multiplayer_Start ( ) ; begin
7355: LD_INT 0
7357: PPUSH
// Multiplayer_PreparePlayers ( ) ;
7358: CALL 5900 0 0
// Multiplayer_InitPointSystem ( ) ;
7362: CALL 8073 0 0
// Multiplayer_RegisterCondition ( 20 ) ;
7366: LD_INT 20
7368: PPUSH
7369: CALL 8249 0 1
// Multiplayer_RegisterCondition ( 150 ) ;
7373: LD_INT 150
7375: PPUSH
7376: CALL 8249 0 1
// Multiplayer_RegisterCondition ( 5 ) ;
7380: LD_INT 5
7382: PPUSH
7383: CALL 8249 0 1
// Multiplayer_RegisterCondition ( - 120 ) ;
7387: LD_INT 120
7389: NEG
7390: PPUSH
7391: CALL 8249 0 1
// Multiplayer_RegisterCondition ( - 60 ) ;
7395: LD_INT 60
7397: NEG
7398: PPUSH
7399: CALL 8249 0 1
// Multiplayer_RegisterCondition ( 2 ) ;
7403: LD_INT 2
7405: PPUSH
7406: CALL 8249 0 1
// Multiplayer_RegisterCondition ( 110 ) ;
7410: LD_INT 110
7412: PPUSH
7413: CALL 8249 0 1
// Multiplayer_RegisterCondition ( 55 ) ;
7417: LD_INT 55
7419: PPUSH
7420: CALL 8249 0 1
// Multiplayer_RegisterCondition ( - 1000 ) ;
7424: LD_INT 1000
7426: NEG
7427: PPUSH
7428: CALL 8249 0 1
// if multi_sides [ your_side ] then
7432: LD_EXP 15
7436: PUSH
7437: LD_OWVAR 2
7441: ARRAY
7442: IFFALSE 7469
// CenterNowOnUnits ( FilterAllUnits ( [ f_side , your_side ] ) [ 1 ] ) ;
7444: LD_INT 22
7446: PUSH
7447: LD_OWVAR 2
7451: PUSH
7452: EMPTY
7453: LIST
7454: LIST
7455: PPUSH
7456: CALL_OW 69
7460: PUSH
7461: LD_INT 1
7463: ARRAY
7464: PPUSH
7465: CALL_OW 87
// end ;
7469: LD_VAR 0 1
7473: RET
// export function Multiplayer_End ( ) ; var i , j , points ; begin
7474: LD_INT 0
7476: PPUSH
7477: PPUSH
7478: PPUSH
7479: PPUSH
// repeat wait ( 0 0$1 ) ;
7480: LD_INT 35
7482: PPUSH
7483: CALL_OW 67
// points := 0 ;
7487: LD_ADDR_VAR 0 4
7491: PUSH
7492: LD_INT 0
7494: ST_TO_ADDR
// for i := 1 to 8 do
7495: LD_ADDR_VAR 0 2
7499: PUSH
7500: DOUBLE
7501: LD_INT 1
7503: DEC
7504: ST_TO_ADDR
7505: LD_INT 8
7507: PUSH
7508: FOR_TO
7509: IFFALSE 7535
// points := points + multi_points [ i ] ;
7511: LD_ADDR_VAR 0 4
7515: PUSH
7516: LD_VAR 0 4
7520: PUSH
7521: LD_EXP 36
7525: PUSH
7526: LD_VAR 0 2
7530: ARRAY
7531: PLUS
7532: ST_TO_ADDR
7533: GO 7508
7535: POP
7536: POP
// if not multi_custom_commanders then
7537: LD_EXP 24
7541: NOT
7542: IFFALSE 7655
// begin for i := 1 to 8 do
7544: LD_ADDR_VAR 0 2
7548: PUSH
7549: DOUBLE
7550: LD_INT 1
7552: DEC
7553: ST_TO_ADDR
7554: LD_INT 8
7556: PUSH
7557: FOR_TO
7558: IFFALSE 7629
// begin if FilterAllUnits ( [ f_side , i ] ) = 0 and not multi_loosers [ i ] then
7560: LD_INT 22
7562: PUSH
7563: LD_VAR 0 2
7567: PUSH
7568: EMPTY
7569: LIST
7570: LIST
7571: PPUSH
7572: CALL_OW 69
7576: PUSH
7577: LD_INT 0
7579: EQUAL
7580: PUSH
7581: LD_EXP 32
7585: PUSH
7586: LD_VAR 0 2
7590: ARRAY
7591: NOT
7592: AND
7593: IFFALSE 7627
// begin multi_loosers := Replace ( multi_loosers , i , 1 ) ;
7595: LD_ADDR_EXP 32
7599: PUSH
7600: LD_EXP 32
7604: PPUSH
7605: LD_VAR 0 2
7609: PPUSH
7610: LD_INT 1
7612: PPUSH
7613: CALL_OW 1
7617: ST_TO_ADDR
// Multiplayer_Reside ( i ) ;
7618: LD_VAR 0 2
7622: PPUSH
7623: CALL 8319 0 1
// end ; end ;
7627: GO 7557
7629: POP
7630: POP
// if Count ( multi_loosers ) = Count ( multi_sides ) then
7631: LD_EXP 32
7635: PPUSH
7636: CALL 17224 0 1
7640: PUSH
7641: LD_EXP 15
7645: PPUSH
7646: CALL 17224 0 1
7650: EQUAL
7651: IFFALSE 7655
// break ;
7653: GO 7696
// end ; if points >= multi_points_to_victory then
7655: LD_VAR 0 4
7659: PUSH
7660: LD_EXP 34
7664: GREATEREQUAL
7665: IFFALSE 7677
// begin winAllowed := true ;
7667: LD_ADDR_EXP 3
7671: PUSH
7672: LD_INT 1
7674: ST_TO_ADDR
// break ;
7675: GO 7696
// end ; until ( winAllowed and game ) or not multi_commanders ;
7677: LD_EXP 3
7681: PUSH
7682: LD_EXP 2
7686: AND
7687: PUSH
7688: LD_EXP 31
7692: NOT
7693: OR
7694: IFFALSE 7480
// game := false ;
7696: LD_ADDR_EXP 2
7700: PUSH
7701: LD_INT 0
7703: ST_TO_ADDR
// for i := 1 to 8 do
7704: LD_ADDR_VAR 0 2
7708: PUSH
7709: DOUBLE
7710: LD_INT 1
7712: DEC
7713: ST_TO_ADDR
7714: LD_INT 8
7716: PUSH
7717: FOR_TO
7718: IFFALSE 7754
// begin if multi_sides [ i ] then
7720: LD_EXP 15
7724: PUSH
7725: LD_VAR 0 2
7729: ARRAY
7730: IFFALSE 7752
// SetMultiScore ( i , multi_points [ i ] ) ;
7732: LD_VAR 0 2
7736: PPUSH
7737: LD_EXP 36
7741: PUSH
7742: LD_VAR 0 2
7746: ARRAY
7747: PPUSH
7748: CALL_OW 506
// end ;
7752: GO 7717
7754: POP
7755: POP
// if multi_loosers [ your_side ] then
7756: LD_EXP 32
7760: PUSH
7761: LD_OWVAR 2
7765: ARRAY
7766: IFFALSE 7789
// begin if Multiplayer then
7768: LD_OWVAR 4
7772: IFFALSE 7780
// YouLostInMultiplayer else
7774: CALL_OW 107
7778: GO 7787
// YouLost (  ) ;
7780: LD_STRING 
7782: PPUSH
7783: CALL_OW 104
// end else
7787: GO 7805
// begin if Multiplayer then
7789: LD_OWVAR 4
7793: IFFALSE 7801
// YouWinInMultiplayer else
7795: CALL_OW 106
7799: GO 7805
// YouWin ;
7801: CALL_OW 103
// end ; end ;
7805: LD_VAR 0 1
7809: RET
// export function Multiplayer_EnemyAlive ( ) ; var side ; begin
7810: LD_INT 0
7812: PPUSH
7813: PPUSH
// result := false ;
7814: LD_ADDR_VAR 0 1
7818: PUSH
7819: LD_INT 0
7821: ST_TO_ADDR
// for side in botSides do
7822: LD_ADDR_VAR 0 2
7826: PUSH
7827: LD_EXP 4
7831: PUSH
7832: FOR_IN
7833: IFFALSE 7894
// begin result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] , [ f_ok ] ] ) > 0 ;
7835: LD_ADDR_VAR 0 1
7839: PUSH
7840: LD_INT 22
7842: PUSH
7843: LD_VAR 0 2
7847: PUSH
7848: EMPTY
7849: LIST
7850: LIST
7851: PUSH
7852: LD_INT 21
7854: PUSH
7855: LD_INT 1
7857: PUSH
7858: EMPTY
7859: LIST
7860: LIST
7861: PUSH
7862: LD_INT 50
7864: PUSH
7865: EMPTY
7866: LIST
7867: PUSH
7868: EMPTY
7869: LIST
7870: LIST
7871: LIST
7872: PPUSH
7873: CALL_OW 69
7877: PUSH
7878: LD_INT 0
7880: GREATER
7881: ST_TO_ADDR
// if result then
7882: LD_VAR 0 1
7886: IFFALSE 7892
// exit ;
7888: POP
7889: POP
7890: GO 7896
// end ;
7892: GO 7832
7894: POP
7895: POP
// end ;
7896: LD_VAR 0 1
7900: RET
// export function Multiplayer_DisplayStrings ( ) ; var i , points ; begin
7901: LD_INT 0
7903: PPUSH
7904: PPUSH
7905: PPUSH
// result := [ ] ;
7906: LD_ADDR_VAR 0 1
7910: PUSH
7911: EMPTY
7912: ST_TO_ADDR
// points := 0 ;
7913: LD_ADDR_VAR 0 3
7917: PUSH
7918: LD_INT 0
7920: ST_TO_ADDR
// for i := 1 to 8 do
7921: LD_ADDR_VAR 0 2
7925: PUSH
7926: DOUBLE
7927: LD_INT 1
7929: DEC
7930: ST_TO_ADDR
7931: LD_INT 8
7933: PUSH
7934: FOR_TO
7935: IFFALSE 8014
// begin points := points + multi_points [ i ] ;
7937: LD_ADDR_VAR 0 3
7941: PUSH
7942: LD_VAR 0 3
7946: PUSH
7947: LD_EXP 36
7951: PUSH
7952: LD_VAR 0 2
7956: ARRAY
7957: PLUS
7958: ST_TO_ADDR
// if multi_sides [ i ] then
7959: LD_EXP 15
7963: PUSH
7964: LD_VAR 0 2
7968: ARRAY
7969: IFFALSE 8012
// begin result := result ^ [ #coop-points , i , i , multi_points [ i ] ] ;
7971: LD_ADDR_VAR 0 1
7975: PUSH
7976: LD_VAR 0 1
7980: PUSH
7981: LD_STRING #coop-points
7983: PUSH
7984: LD_VAR 0 2
7988: PUSH
7989: LD_VAR 0 2
7993: PUSH
7994: LD_EXP 36
7998: PUSH
7999: LD_VAR 0 2
8003: ARRAY
8004: PUSH
8005: EMPTY
8006: LIST
8007: LIST
8008: LIST
8009: LIST
8010: ADD
8011: ST_TO_ADDR
// end ; end ;
8012: GO 7934
8014: POP
8015: POP
// result := result ^ [ #saved-convoys , savedConvoyUnits ] ;
8016: LD_ADDR_VAR 0 1
8020: PUSH
8021: LD_VAR 0 1
8025: PUSH
8026: LD_STRING #saved-convoys
8028: PUSH
8029: LD_EXP 5
8033: PUSH
8034: EMPTY
8035: LIST
8036: LIST
8037: ADD
8038: ST_TO_ADDR
// result := result ^ [ #points-to-win , points , multi_points_to_victory ] ;
8039: LD_ADDR_VAR 0 1
8043: PUSH
8044: LD_VAR 0 1
8048: PUSH
8049: LD_STRING #points-to-win
8051: PUSH
8052: LD_VAR 0 3
8056: PUSH
8057: LD_EXP 34
8061: PUSH
8062: EMPTY
8063: LIST
8064: LIST
8065: LIST
8066: ADD
8067: ST_TO_ADDR
// end ;
8068: LD_VAR 0 1
8072: RET
// export multi_points , multi_points_conditions ; export function Multiplayer_InitPointSystem ( ) ; var i ; begin
8073: LD_INT 0
8075: PPUSH
8076: PPUSH
// multi_points := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
8077: LD_ADDR_EXP 36
8081: PUSH
8082: LD_INT 0
8084: PUSH
8085: LD_INT 0
8087: PUSH
8088: LD_INT 0
8090: PUSH
8091: LD_INT 0
8093: PUSH
8094: LD_INT 0
8096: PUSH
8097: LD_INT 0
8099: PUSH
8100: LD_INT 0
8102: PUSH
8103: LD_INT 0
8105: PUSH
8106: EMPTY
8107: LIST
8108: LIST
8109: LIST
8110: LIST
8111: LIST
8112: LIST
8113: LIST
8114: LIST
8115: ST_TO_ADDR
// multi_points_conditions := [ ] ;
8116: LD_ADDR_EXP 37
8120: PUSH
8121: EMPTY
8122: ST_TO_ADDR
// end ;
8123: LD_VAR 0 1
8127: RET
// export function Multiplayer_AddPoints ( side , amount ) ; begin
8128: LD_INT 0
8130: PPUSH
// if not multi_points or not side or side > 8 then
8131: LD_EXP 36
8135: NOT
8136: PUSH
8137: LD_VAR 0 1
8141: NOT
8142: OR
8143: PUSH
8144: LD_VAR 0 1
8148: PUSH
8149: LD_INT 8
8151: GREATER
8152: OR
8153: IFFALSE 8157
// exit ;
8155: GO 8194
// multi_points := Replace ( multi_points , side , multi_points [ side ] + amount ) ;
8157: LD_ADDR_EXP 36
8161: PUSH
8162: LD_EXP 36
8166: PPUSH
8167: LD_VAR 0 1
8171: PPUSH
8172: LD_EXP 36
8176: PUSH
8177: LD_VAR 0 1
8181: ARRAY
8182: PUSH
8183: LD_VAR 0 2
8187: PLUS
8188: PPUSH
8189: CALL_OW 1
8193: ST_TO_ADDR
// end ;
8194: LD_VAR 0 3
8198: RET
// export function Multiplayer_GetPoints ( side ) ; begin
8199: LD_INT 0
8201: PPUSH
// if not multi_points or not side or side > 8 then
8202: LD_EXP 36
8206: NOT
8207: PUSH
8208: LD_VAR 0 1
8212: NOT
8213: OR
8214: PUSH
8215: LD_VAR 0 1
8219: PUSH
8220: LD_INT 8
8222: GREATER
8223: OR
8224: IFFALSE 8228
// exit ;
8226: GO 8244
// result := multi_points [ side ] ;
8228: LD_ADDR_VAR 0 2
8232: PUSH
8233: LD_EXP 36
8237: PUSH
8238: LD_VAR 0 1
8242: ARRAY
8243: ST_TO_ADDR
// end ;
8244: LD_VAR 0 2
8248: RET
// export function Multiplayer_RegisterCondition ( points ) ; begin
8249: LD_INT 0
8251: PPUSH
// multi_points_conditions := Replace ( multi_points_conditions , multi_points_conditions + 1 , points ) ;
8252: LD_ADDR_EXP 37
8256: PUSH
8257: LD_EXP 37
8261: PPUSH
8262: LD_EXP 37
8266: PUSH
8267: LD_INT 1
8269: PLUS
8270: PPUSH
8271: LD_VAR 0 1
8275: PPUSH
8276: CALL_OW 1
8280: ST_TO_ADDR
// end ;
8281: LD_VAR 0 2
8285: RET
// export function Multiplayer_GetCondition ( id ) ; begin
8286: LD_INT 0
8288: PPUSH
// if not id then
8289: LD_VAR 0 1
8293: NOT
8294: IFFALSE 8298
// exit ;
8296: GO 8314
// result := multi_points_conditions [ id ] ;
8298: LD_ADDR_VAR 0 2
8302: PUSH
8303: LD_EXP 37
8307: PUSH
8308: LD_VAR 0 1
8312: ARRAY
8313: ST_TO_ADDR
// end ;
8314: LD_VAR 0 2
8318: RET
// export function Multiplayer_Reside ( side ) ; var players , i , j , tmp ; begin
8319: LD_INT 0
8321: PPUSH
8322: PPUSH
8323: PPUSH
8324: PPUSH
8325: PPUSH
// players := [ ] ;
8326: LD_ADDR_VAR 0 3
8330: PUSH
8331: EMPTY
8332: ST_TO_ADDR
// for i = 1 to 8 do
8333: LD_ADDR_VAR 0 4
8337: PUSH
8338: DOUBLE
8339: LD_INT 1
8341: DEC
8342: ST_TO_ADDR
8343: LD_INT 8
8345: PUSH
8346: FOR_TO
8347: IFFALSE 8406
// begin if i = side then
8349: LD_VAR 0 4
8353: PUSH
8354: LD_VAR 0 1
8358: EQUAL
8359: IFFALSE 8363
// continue ;
8361: GO 8346
// if multi_sides [ i ] and not multi_loosers [ i ] then
8363: LD_EXP 15
8367: PUSH
8368: LD_VAR 0 4
8372: ARRAY
8373: PUSH
8374: LD_EXP 32
8378: PUSH
8379: LD_VAR 0 4
8383: ARRAY
8384: NOT
8385: AND
8386: IFFALSE 8404
// players := players ^ i ;
8388: LD_ADDR_VAR 0 3
8392: PUSH
8393: LD_VAR 0 3
8397: PUSH
8398: LD_VAR 0 4
8402: ADD
8403: ST_TO_ADDR
// end ;
8404: GO 8346
8406: POP
8407: POP
// if not players then
8408: LD_VAR 0 3
8412: NOT
8413: IFFALSE 8417
// exit ;
8415: GO 8684
// if players = 1 then
8417: LD_VAR 0 3
8421: PUSH
8422: LD_INT 1
8424: EQUAL
8425: IFFALSE 8486
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_alive ] ] ) do
8427: LD_ADDR_VAR 0 4
8431: PUSH
8432: LD_INT 22
8434: PUSH
8435: LD_VAR 0 1
8439: PUSH
8440: EMPTY
8441: LIST
8442: LIST
8443: PUSH
8444: LD_INT 51
8446: PUSH
8447: EMPTY
8448: LIST
8449: PUSH
8450: EMPTY
8451: LIST
8452: LIST
8453: PPUSH
8454: CALL_OW 69
8458: PUSH
8459: FOR_IN
8460: IFFALSE 8482
// SetSide ( i , players [ 1 ] ) ;
8462: LD_VAR 0 4
8466: PPUSH
8467: LD_VAR 0 3
8471: PUSH
8472: LD_INT 1
8474: ARRAY
8475: PPUSH
8476: CALL_OW 235
8480: GO 8459
8482: POP
8483: POP
// end else
8484: GO 8684
// begin j := 1 ;
8486: LD_ADDR_VAR 0 5
8490: PUSH
8491: LD_INT 1
8493: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ [ f_type , unit_human ] , [ f_alive ] ] , [ f_type , unit_vehicle ] ] ] ) do
8494: LD_ADDR_VAR 0 4
8498: PUSH
8499: LD_INT 22
8501: PUSH
8502: LD_VAR 0 1
8506: PUSH
8507: EMPTY
8508: LIST
8509: LIST
8510: PUSH
8511: LD_INT 2
8513: PUSH
8514: LD_INT 21
8516: PUSH
8517: LD_INT 1
8519: PUSH
8520: EMPTY
8521: LIST
8522: LIST
8523: PUSH
8524: LD_INT 51
8526: PUSH
8527: EMPTY
8528: LIST
8529: PUSH
8530: EMPTY
8531: LIST
8532: LIST
8533: PUSH
8534: LD_INT 21
8536: PUSH
8537: LD_INT 2
8539: PUSH
8540: EMPTY
8541: LIST
8542: LIST
8543: PUSH
8544: EMPTY
8545: LIST
8546: LIST
8547: LIST
8548: PUSH
8549: EMPTY
8550: LIST
8551: LIST
8552: PPUSH
8553: CALL_OW 69
8557: PUSH
8558: FOR_IN
8559: IFFALSE 8682
// begin SetSide ( i , players [ j ] ) ;
8561: LD_VAR 0 4
8565: PPUSH
8566: LD_VAR 0 3
8570: PUSH
8571: LD_VAR 0 5
8575: ARRAY
8576: PPUSH
8577: CALL_OW 235
// if IsDrivenBy ( i ) then
8581: LD_VAR 0 4
8585: PPUSH
8586: CALL_OW 311
8590: IFFALSE 8617
// SetSide ( IsDrivenBy ( i ) , players [ j ] ) ;
8592: LD_VAR 0 4
8596: PPUSH
8597: CALL_OW 311
8601: PPUSH
8602: LD_VAR 0 3
8606: PUSH
8607: LD_VAR 0 5
8611: ARRAY
8612: PPUSH
8613: CALL_OW 235
// if GetType ( IsInUnit ( i ) ) = unit_building then
8617: LD_VAR 0 4
8621: PPUSH
8622: CALL_OW 310
8626: PPUSH
8627: CALL_OW 247
8631: PUSH
8632: LD_INT 3
8634: EQUAL
8635: IFFALSE 8646
// ComExitBuilding ( i ) ;
8637: LD_VAR 0 4
8641: PPUSH
8642: CALL_OW 122
// j := j + 1 ;
8646: LD_ADDR_VAR 0 5
8650: PUSH
8651: LD_VAR 0 5
8655: PUSH
8656: LD_INT 1
8658: PLUS
8659: ST_TO_ADDR
// if j > players then
8660: LD_VAR 0 5
8664: PUSH
8665: LD_VAR 0 3
8669: GREATER
8670: IFFALSE 8680
// j := 1 ;
8672: LD_ADDR_VAR 0 5
8676: PUSH
8677: LD_INT 1
8679: ST_TO_ADDR
// end ;
8680: GO 8558
8682: POP
8683: POP
// end ; end ;
8684: LD_VAR 0 2
8688: RET
// export function MultiplayerEvent_Produced ( side ) ; begin
8689: LD_INT 0
8691: PPUSH
// if not side or side > 8 then
8692: LD_VAR 0 1
8696: NOT
8697: PUSH
8698: LD_VAR 0 1
8702: PUSH
8703: LD_INT 8
8705: GREATER
8706: OR
8707: IFFALSE 8711
// exit ;
8709: GO 8728
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 6 ) ) ;
8711: LD_VAR 0 1
8715: PPUSH
8716: LD_INT 6
8718: PPUSH
8719: CALL 8286 0 1
8723: PPUSH
8724: CALL 8128 0 2
// end ;
8728: LD_VAR 0 2
8732: RET
// export function MultiplayerEvent_HumanLost ( side ) ; begin
8733: LD_INT 0
8735: PPUSH
// if not side or side > 8 then
8736: LD_VAR 0 1
8740: NOT
8741: PUSH
8742: LD_VAR 0 1
8746: PUSH
8747: LD_INT 8
8749: GREATER
8750: OR
8751: IFFALSE 8755
// exit ;
8753: GO 8772
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 4 ) ) ;
8755: LD_VAR 0 1
8759: PPUSH
8760: LD_INT 4
8762: PPUSH
8763: CALL 8286 0 1
8767: PPUSH
8768: CALL 8128 0 2
// end ;
8772: LD_VAR 0 2
8776: RET
// export function MultiplayerEvent_VehicleLost ( side ) ; begin
8777: LD_INT 0
8779: PPUSH
// if not side or side > 8 then
8780: LD_VAR 0 1
8784: NOT
8785: PUSH
8786: LD_VAR 0 1
8790: PUSH
8791: LD_INT 8
8793: GREATER
8794: OR
8795: IFFALSE 8799
// exit ;
8797: GO 8816
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 5 ) ) ;
8799: LD_VAR 0 1
8803: PPUSH
8804: LD_INT 5
8806: PPUSH
8807: CALL 8286 0 1
8811: PPUSH
8812: CALL 8128 0 2
// end ;
8816: LD_VAR 0 2
8820: RET
// export function MultiplayerEvent_BuildingCompleted ( side , btype ) ; begin
8821: LD_INT 0
8823: PPUSH
// if not side or side > 8 or not btype in [ b_workshop , b_lab , b_control_tower , b_depot ] then
8824: LD_VAR 0 1
8828: NOT
8829: PUSH
8830: LD_VAR 0 1
8834: PUSH
8835: LD_INT 8
8837: GREATER
8838: OR
8839: PUSH
8840: LD_VAR 0 2
8844: PUSH
8845: LD_INT 2
8847: PUSH
8848: LD_INT 6
8850: PUSH
8851: LD_INT 36
8853: PUSH
8854: LD_INT 0
8856: PUSH
8857: EMPTY
8858: LIST
8859: LIST
8860: LIST
8861: LIST
8862: IN
8863: NOT
8864: OR
8865: IFFALSE 8869
// exit ;
8867: GO 8886
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 3 ) ) ;
8869: LD_VAR 0 1
8873: PPUSH
8874: LD_INT 3
8876: PPUSH
8877: CALL 8286 0 1
8881: PPUSH
8882: CALL 8128 0 2
// end ;
8886: LD_VAR 0 3
8890: RET
// export function MultiplayerEvent_UnitKilled ( un , side , points ) ; var gained_points ; begin
8891: LD_INT 0
8893: PPUSH
8894: PPUSH
// if not un then
8895: LD_VAR 0 1
8899: NOT
8900: IFFALSE 8904
// exit ;
8902: GO 8950
// if not points then
8904: LD_VAR 0 3
8908: NOT
8909: IFFALSE 8926
// gained_points := Multiplayer_GetCondition ( 1 ) else
8911: LD_ADDR_VAR 0 5
8915: PUSH
8916: LD_INT 1
8918: PPUSH
8919: CALL 8286 0 1
8923: ST_TO_ADDR
8924: GO 8936
// gained_points := points ;
8926: LD_ADDR_VAR 0 5
8930: PUSH
8931: LD_VAR 0 3
8935: ST_TO_ADDR
// Multiplayer_AddPoints ( side , gained_points ) ;
8936: LD_VAR 0 2
8940: PPUSH
8941: LD_VAR 0 5
8945: PPUSH
8946: CALL 8128 0 2
// end ; end_of_file
8950: LD_VAR 0 4
8954: RET
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do var side ;
8955: LD_INT 0
8957: PPUSH
// begin side := GetSide ( un ) ;
8958: LD_ADDR_VAR 0 4
8962: PUSH
8963: LD_VAR 0 1
8967: PPUSH
8968: CALL_OW 255
8972: ST_TO_ADDR
// if killerSide = enemySide then
8973: LD_VAR 0 2
8977: PUSH
8978: LD_EXP 12
8982: EQUAL
8983: IFFALSE 8987
// exit ;
8985: GO 9047
// if side = convoySide and multi_sides [ killerSide ] then
8987: LD_VAR 0 4
8991: PUSH
8992: LD_EXP 40
8996: EQUAL
8997: PUSH
8998: LD_EXP 15
9002: PUSH
9003: LD_VAR 0 2
9007: ARRAY
9008: AND
9009: IFFALSE 9030
// begin Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 9 ) ) ;
9011: LD_VAR 0 4
9015: PPUSH
9016: LD_INT 9
9018: PPUSH
9019: CALL 8286 0 1
9023: PPUSH
9024: CALL 8128 0 2
// exit ;
9028: GO 9047
// end ; MultiplayerEvent_UnitKilled ( un , killerSide , false ) ;
9030: LD_VAR 0 1
9034: PPUSH
9035: LD_VAR 0 2
9039: PPUSH
9040: LD_INT 0
9042: PPUSH
9043: CALL 8891 0 3
// end ;
9047: PPOPN 4
9049: END
// on UnitDestroyed ( un ) do var i , side , base , chassis , engine , control , weapon , tmp , factory , btype ;
9050: LD_INT 0
9052: PPUSH
9053: PPUSH
9054: PPUSH
9055: PPUSH
9056: PPUSH
9057: PPUSH
9058: PPUSH
9059: PPUSH
9060: PPUSH
9061: PPUSH
// begin SOS_UnitDestroyed ( un ) ;
9062: LD_VAR 0 1
9066: PPUSH
9067: CALL 57917 0 1
// side := GetSide ( un ) ;
9071: LD_ADDR_VAR 0 3
9075: PUSH
9076: LD_VAR 0 1
9080: PPUSH
9081: CALL_OW 255
9085: ST_TO_ADDR
// if multi_sides [ side ] or side = convoySide then
9086: LD_EXP 15
9090: PUSH
9091: LD_VAR 0 3
9095: ARRAY
9096: PUSH
9097: LD_VAR 0 3
9101: PUSH
9102: LD_EXP 40
9106: EQUAL
9107: OR
9108: IFFALSE 9186
// begin if un in convoys then
9110: LD_VAR 0 1
9114: PUSH
9115: LD_EXP 38
9119: IN
9120: IFFALSE 9138
// convoys := convoys diff un ;
9122: LD_ADDR_EXP 38
9126: PUSH
9127: LD_EXP 38
9131: PUSH
9132: LD_VAR 0 1
9136: DIFF
9137: ST_TO_ADDR
// if GetType ( un ) = unit_human then
9138: LD_VAR 0 1
9142: PPUSH
9143: CALL_OW 247
9147: PUSH
9148: LD_INT 1
9150: EQUAL
9151: IFFALSE 9162
// MultiplayerEvent_HumanLost ( side ) ;
9153: LD_VAR 0 3
9157: PPUSH
9158: CALL 8733 0 1
// if GetType ( un ) = unit_vehicle then
9162: LD_VAR 0 1
9166: PPUSH
9167: CALL_OW 247
9171: PUSH
9172: LD_INT 2
9174: EQUAL
9175: IFFALSE 9186
// MultiplayerEvent_VehicleLost ( side ) ;
9177: LD_VAR 0 3
9181: PPUSH
9182: CALL 8777 0 1
// end ; if un in enemyForestGuard then
9186: LD_VAR 0 1
9190: PUSH
9191: LD_EXP 11
9195: IN
9196: IFFALSE 9214
// enemyForestGuard := enemyForestGuard diff un ;
9198: LD_ADDR_EXP 11
9202: PUSH
9203: LD_EXP 11
9207: PUSH
9208: LD_VAR 0 1
9212: DIFF
9213: ST_TO_ADDR
// if un in enemyMobile then
9214: LD_VAR 0 1
9218: PUSH
9219: LD_EXP 10
9223: IN
9224: IFFALSE 9242
// enemyMobile := enemyMobile diff un ;
9226: LD_ADDR_EXP 10
9230: PUSH
9231: LD_EXP 10
9235: PUSH
9236: LD_VAR 0 1
9240: DIFF
9241: ST_TO_ADDR
// if un in enemyUnits then
9242: LD_VAR 0 1
9246: PUSH
9247: LD_EXP 9
9251: IN
9252: IFFALSE 9270
// enemyUnits := enemyUnits diff un ;
9254: LD_ADDR_EXP 9
9258: PUSH
9259: LD_EXP 9
9263: PUSH
9264: LD_VAR 0 1
9268: DIFF
9269: ST_TO_ADDR
// if un in arAttackersInf then
9270: LD_VAR 0 1
9274: PUSH
9275: LD_EXP 13
9279: IN
9280: IFFALSE 9298
// arAttackersInf := arAttackersInf diff un ;
9282: LD_ADDR_EXP 13
9286: PUSH
9287: LD_EXP 13
9291: PUSH
9292: LD_VAR 0 1
9296: DIFF
9297: ST_TO_ADDR
// if multi_commanders and multi_custom_commanders then
9298: LD_EXP 31
9302: PUSH
9303: LD_EXP 24
9307: AND
9308: IFFALSE 9370
// if un in multi_commanders then
9310: LD_VAR 0 1
9314: PUSH
9315: LD_EXP 31
9319: IN
9320: IFFALSE 9370
// begin multi_loosers := Replace ( multi_loosers , side , 1 ) ;
9322: LD_ADDR_EXP 32
9326: PUSH
9327: LD_EXP 32
9331: PPUSH
9332: LD_VAR 0 3
9336: PPUSH
9337: LD_INT 1
9339: PPUSH
9340: CALL_OW 1
9344: ST_TO_ADDR
// multi_commanders := multi_commanders diff un ;
9345: LD_ADDR_EXP 31
9349: PUSH
9350: LD_EXP 31
9354: PUSH
9355: LD_VAR 0 1
9359: DIFF
9360: ST_TO_ADDR
// Multiplayer_Reside ( side ) ;
9361: LD_VAR 0 3
9365: PPUSH
9366: CALL 8319 0 1
// end ; end ;
9370: PPOPN 11
9372: END
// on BuildingComplete ( building ) do var i , j , side , btype ;
9373: LD_INT 0
9375: PPUSH
9376: PPUSH
9377: PPUSH
9378: PPUSH
// begin side := GetSide ( building ) ;
9379: LD_ADDR_VAR 0 4
9383: PUSH
9384: LD_VAR 0 1
9388: PPUSH
9389: CALL_OW 255
9393: ST_TO_ADDR
// if multi_sides [ side ] then
9394: LD_EXP 15
9398: PUSH
9399: LD_VAR 0 4
9403: ARRAY
9404: IFFALSE 9425
// MultiplayerEvent_BuildingCompleted ( side , GetBType ( building ) ) ;
9406: LD_VAR 0 4
9410: PPUSH
9411: LD_VAR 0 1
9415: PPUSH
9416: CALL_OW 266
9420: PPUSH
9421: CALL 8821 0 2
// end ;
9425: PPOPN 5
9427: END
// on VehicleConstructed ( vehicle , factory ) do var i , side , tmp , base , amount , driver ;
9428: LD_INT 0
9430: PPUSH
9431: PPUSH
9432: PPUSH
9433: PPUSH
9434: PPUSH
9435: PPUSH
// begin SOS_VehicleConstructed ( vehicle , factory ) ;
9436: LD_VAR 0 1
9440: PPUSH
9441: LD_VAR 0 2
9445: PPUSH
9446: CALL 57975 0 2
// side := GetSide ( vehicle ) ;
9450: LD_ADDR_VAR 0 4
9454: PUSH
9455: LD_VAR 0 1
9459: PPUSH
9460: CALL_OW 255
9464: ST_TO_ADDR
// if multi_sides [ side ] then
9465: LD_EXP 15
9469: PUSH
9470: LD_VAR 0 4
9474: ARRAY
9475: IFFALSE 9486
// MultiplayerEvent_Produced ( side ) ;
9477: LD_VAR 0 4
9481: PPUSH
9482: CALL 8689 0 1
// end ;
9486: PPOPN 8
9488: END
// on ResearchComplete ( tech , lab ) do var i , side ;
9489: LD_INT 0
9491: PPUSH
9492: PPUSH
// begin side := GetSide ( lab ) ;
9493: LD_ADDR_VAR 0 4
9497: PUSH
9498: LD_VAR 0 2
9502: PPUSH
9503: CALL_OW 255
9507: ST_TO_ADDR
// if multi_sides [ side ] then
9508: LD_EXP 15
9512: PUSH
9513: LD_VAR 0 4
9517: ARRAY
9518: IFFALSE 9581
// for i := 1 to 8 do
9520: LD_ADDR_VAR 0 3
9524: PUSH
9525: DOUBLE
9526: LD_INT 1
9528: DEC
9529: ST_TO_ADDR
9530: LD_INT 8
9532: PUSH
9533: FOR_TO
9534: IFFALSE 9579
// if multi_sides [ i ] and i <> side then
9536: LD_EXP 15
9540: PUSH
9541: LD_VAR 0 3
9545: ARRAY
9546: PUSH
9547: LD_VAR 0 3
9551: PUSH
9552: LD_VAR 0 4
9556: NONEQUAL
9557: AND
9558: IFFALSE 9577
// SetTech ( tech , i , state_researched ) ;
9560: LD_VAR 0 1
9564: PPUSH
9565: LD_VAR 0 3
9569: PPUSH
9570: LD_INT 2
9572: PPUSH
9573: CALL_OW 322
9577: GO 9533
9579: POP
9580: POP
// end ;
9581: PPOPN 4
9583: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if veh in enemyMobile then
9584: LD_VAR 0 2
9588: PUSH
9589: LD_EXP 10
9593: IN
9594: IFFALSE 9657
// begin repeat ComMoveXY ( driver , 163 , 31 ) ;
9596: LD_VAR 0 1
9600: PPUSH
9601: LD_INT 163
9603: PPUSH
9604: LD_INT 31
9606: PPUSH
9607: CALL_OW 111
// wait ( 0 0$1 ) ;
9611: LD_INT 35
9613: PPUSH
9614: CALL_OW 67
// if IsDead ( driver ) then
9618: LD_VAR 0 1
9622: PPUSH
9623: CALL_OW 301
9627: IFFALSE 9631
// exit ;
9629: GO 9657
// until IsAt ( driver , 163 , 31 ) ;
9631: LD_VAR 0 1
9635: PPUSH
9636: LD_INT 163
9638: PPUSH
9639: LD_INT 31
9641: PPUSH
9642: CALL_OW 307
9646: IFFALSE 9596
// RemoveUnit ( driver ) ;
9648: LD_VAR 0 1
9652: PPUSH
9653: CALL_OW 64
// end ; end ; end_of_file
9657: PPOPN 4
9659: END
// every 8 8$00 trigger not forestIsCleared do
9660: LD_EXP 7
9664: NOT
9665: IFFALSE 9674
9667: GO 9669
9669: DISABLE
// ClearRoadInForest ;
9670: CALL 2106 0 0
9674: END
// every 18 18$00 trigger not forestIsCleared do
9675: LD_EXP 7
9679: NOT
9680: IFFALSE 9689
9682: GO 9684
9684: DISABLE
// ClearRoadInForest ;
9685: CALL 2106 0 0
9689: END
// every 0 0$30 trigger convoyWave mod 4 = 0 and convoyWave >= 4 do
9690: LD_EXP 39
9694: PUSH
9695: LD_INT 4
9697: MOD
9698: PUSH
9699: LD_INT 0
9701: EQUAL
9702: PUSH
9703: LD_EXP 39
9707: PUSH
9708: LD_INT 4
9710: GREATEREQUAL
9711: AND
9712: IFFALSE 9741
9714: GO 9716
9716: DISABLE
// begin arAttackersInf := arAttackersInf union SendNorthGroup ;
9717: LD_ADDR_EXP 13
9721: PUSH
9722: LD_EXP 13
9726: PUSH
9727: CALL 3291 0 0
9731: UNION
9732: ST_TO_ADDR
// wait ( 5 5$00 ) ;
9733: LD_INT 10500
9735: PPUSH
9736: CALL_OW 67
// enable ;
9740: ENABLE
// end ;
9741: END
// every 0 0$30 trigger convoyWave mod 7 = 0 and convoyWave >= 7 do
9742: LD_EXP 39
9746: PUSH
9747: LD_INT 7
9749: MOD
9750: PUSH
9751: LD_INT 0
9753: EQUAL
9754: PUSH
9755: LD_EXP 39
9759: PUSH
9760: LD_INT 7
9762: GREATEREQUAL
9763: AND
9764: IFFALSE 9793
9766: GO 9768
9768: DISABLE
// begin arAttackersInf := arAttackersInf union SendEastGroup2 ;
9769: LD_ADDR_EXP 13
9773: PUSH
9774: LD_EXP 13
9778: PUSH
9779: CALL 3535 0 0
9783: UNION
9784: ST_TO_ADDR
// wait ( 5 5$00 ) ;
9785: LD_INT 10500
9787: PPUSH
9788: CALL_OW 67
// enable ;
9792: ENABLE
// end ;
9793: END
// every 0 0$30 trigger convoyWave in [ 8 , 12 , 16 , 20 , 24 , 28 , 32 , 36 ] do
9794: LD_EXP 39
9798: PUSH
9799: LD_INT 8
9801: PUSH
9802: LD_INT 12
9804: PUSH
9805: LD_INT 16
9807: PUSH
9808: LD_INT 20
9810: PUSH
9811: LD_INT 24
9813: PUSH
9814: LD_INT 28
9816: PUSH
9817: LD_INT 32
9819: PUSH
9820: LD_INT 36
9822: PUSH
9823: EMPTY
9824: LIST
9825: LIST
9826: LIST
9827: LIST
9828: LIST
9829: LIST
9830: LIST
9831: LIST
9832: IN
9833: IFFALSE 9862
9835: GO 9837
9837: DISABLE
// begin arAttackersInf := arAttackersInf union SendEastGroup ;
9838: LD_ADDR_EXP 13
9842: PUSH
9843: LD_EXP 13
9847: PUSH
9848: CALL 3086 0 0
9852: UNION
9853: ST_TO_ADDR
// wait ( 5 5$00 ) ;
9854: LD_INT 10500
9856: PPUSH
9857: CALL_OW 67
// enable ;
9861: ENABLE
// end ;
9862: END
// every 0 0$2 trigger convoyWave mod 5 = 4 and not FilterAllUnits ( [ [ f_side , enemySide ] , [ f_distxy , 30 , 48 , 20 ] ] ) do
9863: LD_EXP 39
9867: PUSH
9868: LD_INT 5
9870: MOD
9871: PUSH
9872: LD_INT 4
9874: EQUAL
9875: PUSH
9876: LD_INT 22
9878: PUSH
9879: LD_EXP 12
9883: PUSH
9884: EMPTY
9885: LIST
9886: LIST
9887: PUSH
9888: LD_INT 92
9890: PUSH
9891: LD_INT 30
9893: PUSH
9894: LD_INT 48
9896: PUSH
9897: LD_INT 20
9899: PUSH
9900: EMPTY
9901: LIST
9902: LIST
9903: LIST
9904: LIST
9905: PUSH
9906: EMPTY
9907: LIST
9908: LIST
9909: PPUSH
9910: CALL_OW 69
9914: NOT
9915: AND
9916: IFFALSE 9933
9918: GO 9920
9920: DISABLE
// begin SendWestGroup ;
9921: CALL 2456 0 0
// wait ( 6 6$00 ) ;
9925: LD_INT 12600
9927: PPUSH
9928: CALL_OW 67
// enable ;
9932: ENABLE
// end ;
9933: END
// every 2 2$30 + 2 2$00 trigger UnitFilter ( enemyMobile , [ f_ok ] ) < 5 do
9934: LD_EXP 10
9938: PPUSH
9939: LD_INT 50
9941: PUSH
9942: EMPTY
9943: LIST
9944: PPUSH
9945: CALL_OW 72
9949: PUSH
9950: LD_INT 5
9952: LESS
9953: IFFALSE 9987
9955: GO 9957
9957: DISABLE
// begin PrepareMobileGroup ;
9958: CALL 1495 0 0
// wait ( [ 3 3$30 , 3 3$00 , 2 2$30 ] [ Difficulty ] ) ;
9962: LD_INT 7350
9964: PUSH
9965: LD_INT 6300
9967: PUSH
9968: LD_INT 5250
9970: PUSH
9971: EMPTY
9972: LIST
9973: LIST
9974: LIST
9975: PUSH
9976: LD_OWVAR 67
9980: ARRAY
9981: PPUSH
9982: CALL_OW 67
// enable ;
9986: ENABLE
// end ;
9987: END
// every 0 0$30 trigger convoyWave mod 6 = 0 and convoyWave >= 6 and UnitFilter ( enemyMobile , [ f_ok ] ) < 10 do
9988: LD_EXP 39
9992: PUSH
9993: LD_INT 6
9995: MOD
9996: PUSH
9997: LD_INT 0
9999: EQUAL
10000: PUSH
10001: LD_EXP 39
10005: PUSH
10006: LD_INT 6
10008: GREATEREQUAL
10009: AND
10010: PUSH
10011: LD_EXP 10
10015: PPUSH
10016: LD_INT 50
10018: PUSH
10019: EMPTY
10020: LIST
10021: PPUSH
10022: CALL_OW 72
10026: PUSH
10027: LD_INT 10
10029: LESS
10030: AND
10031: IFFALSE 10065
10033: GO 10035
10035: DISABLE
// begin PrepareMobileGroup2 ;
10036: CALL 1823 0 0
// wait ( [ 4 4$30 , 4 4$00 , 3 3$30 ] [ Difficulty ] ) ;
10040: LD_INT 9450
10042: PUSH
10043: LD_INT 8400
10045: PUSH
10046: LD_INT 7350
10048: PUSH
10049: EMPTY
10050: LIST
10051: LIST
10052: LIST
10053: PUSH
10054: LD_OWVAR 67
10058: ARRAY
10059: PPUSH
10060: CALL_OW 67
// enable ;
10064: ENABLE
// end ;
10065: END
// every 7 7$00 + 4 4$00 trigger forestIsCleared do var i , tmp ;
10066: LD_EXP 7
10070: IFFALSE 10283
10072: GO 10074
10074: DISABLE
10075: LD_INT 0
10077: PPUSH
10078: PPUSH
// begin if tick > 50 50$00 then
10079: LD_OWVAR 1
10083: PUSH
10084: LD_INT 105000
10086: GREATER
10087: IFFALSE 10092
// begin disable ;
10089: DISABLE
// exit ;
10090: GO 10283
// end ; tmp := PrepareForestOnslaught ;
10092: LD_ADDR_VAR 0 2
10096: PUSH
10097: CALL 2758 0 0
10101: ST_TO_ADDR
// for i in tmp do
10102: LD_ADDR_VAR 0 1
10106: PUSH
10107: LD_VAR 0 2
10111: PUSH
10112: FOR_IN
10113: IFFALSE 10177
// begin AddComMoveXY ( i , 197 , 152 ) ;
10115: LD_VAR 0 1
10119: PPUSH
10120: LD_INT 197
10122: PPUSH
10123: LD_INT 152
10125: PPUSH
10126: CALL_OW 171
// AddComMoveXY ( i , 159 , 163 ) ;
10130: LD_VAR 0 1
10134: PPUSH
10135: LD_INT 159
10137: PPUSH
10138: LD_INT 163
10140: PPUSH
10141: CALL_OW 171
// AddComMoveXY ( i , 116 , 154 ) ;
10145: LD_VAR 0 1
10149: PPUSH
10150: LD_INT 116
10152: PPUSH
10153: LD_INT 154
10155: PPUSH
10156: CALL_OW 171
// AddComMoveXY ( i , 93 , 177 ) ;
10160: LD_VAR 0 1
10164: PPUSH
10165: LD_INT 93
10167: PPUSH
10168: LD_INT 177
10170: PPUSH
10171: CALL_OW 171
// end ;
10175: GO 10112
10177: POP
10178: POP
// repeat wait ( 0 0$1 ) ;
10179: LD_INT 35
10181: PPUSH
10182: CALL_OW 67
// for i in tmp do
10186: LD_ADDR_VAR 0 1
10190: PUSH
10191: LD_VAR 0 2
10195: PUSH
10196: FOR_IN
10197: IFFALSE 10258
// if not IsOk ( i ) then
10199: LD_VAR 0 1
10203: PPUSH
10204: CALL_OW 302
10208: NOT
10209: IFFALSE 10229
// tmp := tmp diff i else
10211: LD_ADDR_VAR 0 2
10215: PUSH
10216: LD_VAR 0 2
10220: PUSH
10221: LD_VAR 0 1
10225: DIFF
10226: ST_TO_ADDR
10227: GO 10256
// if not HasTask ( i ) then
10229: LD_VAR 0 1
10233: PPUSH
10234: CALL_OW 314
10238: NOT
10239: IFFALSE 10256
// ComMoveXY ( i , 93 , 177 ) ;
10241: LD_VAR 0 1
10245: PPUSH
10246: LD_INT 93
10248: PPUSH
10249: LD_INT 177
10251: PPUSH
10252: CALL_OW 111
10256: GO 10196
10258: POP
10259: POP
// until not tmp ;
10260: LD_VAR 0 2
10264: NOT
10265: IFFALSE 10179
// wait ( rand ( 0 0$30 , 5 5$30 ) ) ;
10267: LD_INT 1050
10269: PPUSH
10270: LD_INT 11550
10272: PPUSH
10273: CALL_OW 12
10277: PPUSH
10278: CALL_OW 67
// enable ;
10282: ENABLE
// end ;
10283: PPOPN 2
10285: END
// every 0 0$1 trigger enemyForestGuard do var i , tmp , enemyInForest , vehicle ;
10286: LD_EXP 11
10290: IFFALSE 10717
10292: GO 10294
10294: DISABLE
10295: LD_INT 0
10297: PPUSH
10298: PPUSH
10299: PPUSH
10300: PPUSH
// begin enable ;
10301: ENABLE
// tmp := UnitFilter ( enemyForestGuard , [ f_ok ] ) ;
10302: LD_ADDR_VAR 0 2
10306: PUSH
10307: LD_EXP 11
10311: PPUSH
10312: LD_INT 50
10314: PUSH
10315: EMPTY
10316: LIST
10317: PPUSH
10318: CALL_OW 72
10322: ST_TO_ADDR
// enemyInForest := FilterUnitsInArea ( arCampArea , [ f_not , [ f_side , enemySide ] ] ) ;
10323: LD_ADDR_VAR 0 3
10327: PUSH
10328: LD_INT 19
10330: PPUSH
10331: LD_INT 3
10333: PUSH
10334: LD_INT 22
10336: PUSH
10337: LD_EXP 12
10341: PUSH
10342: EMPTY
10343: LIST
10344: LIST
10345: PUSH
10346: EMPTY
10347: LIST
10348: LIST
10349: PPUSH
10350: CALL_OW 70
10354: ST_TO_ADDR
// if not tmp then
10355: LD_VAR 0 2
10359: NOT
10360: IFFALSE 10364
// exit ;
10362: GO 10717
// for i in tmp do
10364: LD_ADDR_VAR 0 1
10368: PUSH
10369: LD_VAR 0 2
10373: PUSH
10374: FOR_IN
10375: IFFALSE 10715
// begin if enemyInForest then
10377: LD_VAR 0 3
10381: IFFALSE 10456
// begin if GetClass ( i ) = 4 then
10383: LD_VAR 0 1
10387: PPUSH
10388: CALL_OW 257
10392: PUSH
10393: LD_INT 4
10395: EQUAL
10396: IFFALSE 10430
// ComMoveUnit ( i , NearestUnitToUnit ( tmp diff i , i ) ) else
10398: LD_VAR 0 1
10402: PPUSH
10403: LD_VAR 0 2
10407: PUSH
10408: LD_VAR 0 1
10412: DIFF
10413: PPUSH
10414: LD_VAR 0 1
10418: PPUSH
10419: CALL_OW 74
10423: PPUSH
10424: CALL_OW 112
10428: GO 10454
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInForest , i ) ) ;
10430: LD_VAR 0 1
10434: PPUSH
10435: LD_VAR 0 3
10439: PPUSH
10440: LD_VAR 0 1
10444: PPUSH
10445: CALL_OW 74
10449: PPUSH
10450: CALL_OW 115
// end else
10454: GO 10713
// if not IsInArea ( i , arForestArea ) then
10456: LD_VAR 0 1
10460: PPUSH
10461: LD_INT 21
10463: PPUSH
10464: CALL_OW 308
10468: NOT
10469: IFFALSE 10485
// ComMoveToArea ( i , arForestArea ) else
10471: LD_VAR 0 1
10475: PPUSH
10476: LD_INT 21
10478: PPUSH
10479: CALL_OW 113
10483: GO 10713
// if GetClass ( i ) = 3 then
10485: LD_VAR 0 1
10489: PPUSH
10490: CALL_OW 257
10494: PUSH
10495: LD_INT 3
10497: EQUAL
10498: IFFALSE 10713
// begin vehicle := IsInUnit ( i ) ;
10500: LD_ADDR_VAR 0 4
10504: PUSH
10505: LD_VAR 0 1
10509: PPUSH
10510: CALL_OW 310
10514: ST_TO_ADDR
// if vehicle then
10515: LD_VAR 0 4
10519: IFFALSE 10686
// begin if GetLives ( vehicle ) < 1000 and not HasTask ( i ) then
10521: LD_VAR 0 4
10525: PPUSH
10526: CALL_OW 256
10530: PUSH
10531: LD_INT 1000
10533: LESS
10534: PUSH
10535: LD_VAR 0 1
10539: PPUSH
10540: CALL_OW 314
10544: NOT
10545: AND
10546: IFFALSE 10684
// begin if not IsInArea ( vehicle , arParkingArea ) then
10548: LD_VAR 0 4
10552: PPUSH
10553: LD_INT 20
10555: PPUSH
10556: CALL_OW 308
10560: NOT
10561: IFFALSE 10577
// ComMoveToArea ( vehicle , arParkingArea ) else
10563: LD_VAR 0 4
10567: PPUSH
10568: LD_INT 20
10570: PPUSH
10571: CALL_OW 113
10575: GO 10684
// if not GetTag ( i ) then
10577: LD_VAR 0 1
10581: PPUSH
10582: CALL_OW 110
10586: NOT
10587: IFFALSE 10684
// begin SetTag ( i , tMech ) ;
10589: LD_VAR 0 1
10593: PPUSH
10594: LD_INT 7
10596: PPUSH
10597: CALL_OW 109
// ComExitVehicle ( i ) ;
10601: LD_VAR 0 1
10605: PPUSH
10606: CALL_OW 121
// AddComRepairVehicle ( i , vehicle ) ;
10610: LD_VAR 0 1
10614: PPUSH
10615: LD_VAR 0 4
10619: PPUSH
10620: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
10624: LD_INT 35
10626: PPUSH
10627: CALL_OW 67
// until GetLives ( vehicle ) = 1000 ;
10631: LD_VAR 0 4
10635: PPUSH
10636: CALL_OW 256
10640: PUSH
10641: LD_INT 1000
10643: EQUAL
10644: IFFALSE 10624
// SetLives ( i , 1000 ) ;
10646: LD_VAR 0 1
10650: PPUSH
10651: LD_INT 1000
10653: PPUSH
10654: CALL_OW 234
// ComEnterUnit ( i , vehicle ) ;
10658: LD_VAR 0 1
10662: PPUSH
10663: LD_VAR 0 4
10667: PPUSH
10668: CALL_OW 120
// SetTag ( i , 0 ) ;
10672: LD_VAR 0 1
10676: PPUSH
10677: LD_INT 0
10679: PPUSH
10680: CALL_OW 109
// end ; end ; end else
10684: GO 10713
// if not IsInArea ( i , arParkingArea ) then
10686: LD_VAR 0 1
10690: PPUSH
10691: LD_INT 20
10693: PPUSH
10694: CALL_OW 308
10698: NOT
10699: IFFALSE 10713
// ComMoveToArea ( i , arParkingArea ) ;
10701: LD_VAR 0 1
10705: PPUSH
10706: LD_INT 20
10708: PPUSH
10709: CALL_OW 113
// end ; end ;
10713: GO 10374
10715: POP
10716: POP
// end ;
10717: PPOPN 4
10719: END
// every 0 0$1 trigger enemyMobile do var i , mech , enemy ;
10720: LD_EXP 10
10724: IFFALSE 11257
10726: GO 10728
10728: DISABLE
10729: LD_INT 0
10731: PPUSH
10732: PPUSH
10733: PPUSH
// begin enable ;
10734: ENABLE
// if not enemyMobile then
10735: LD_EXP 10
10739: NOT
10740: IFFALSE 10744
// exit ;
10742: GO 11257
// for i in enemyMobile do
10744: LD_ADDR_VAR 0 1
10748: PUSH
10749: LD_EXP 10
10753: PUSH
10754: FOR_IN
10755: IFFALSE 11255
// begin if GetSide ( i ) <> enemySide then
10757: LD_VAR 0 1
10761: PPUSH
10762: CALL_OW 255
10766: PUSH
10767: LD_EXP 12
10771: NONEQUAL
10772: IFFALSE 10792
// begin enemyMobile := enemyMobile diff i ;
10774: LD_ADDR_EXP 10
10778: PUSH
10779: LD_EXP 10
10783: PUSH
10784: LD_VAR 0 1
10788: DIFF
10789: ST_TO_ADDR
// continue ;
10790: GO 10754
// end ; if GetTag ( i ) = 300 then
10792: LD_VAR 0 1
10796: PPUSH
10797: CALL_OW 110
10801: PUSH
10802: LD_INT 300
10804: EQUAL
10805: IFFALSE 10920
// begin if GetFuel ( i ) < 50 then
10807: LD_VAR 0 1
10811: PPUSH
10812: CALL_OW 261
10816: PUSH
10817: LD_INT 50
10819: LESS
10820: IFFALSE 10879
// begin ComMoveXY ( i , 170 , 50 ) ;
10822: LD_VAR 0 1
10826: PPUSH
10827: LD_INT 170
10829: PPUSH
10830: LD_INT 50
10832: PPUSH
10833: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
10837: LD_INT 35
10839: PPUSH
10840: CALL_OW 67
// until GetDistUnitXY ( i , 170 , 50 ) < 4 ;
10844: LD_VAR 0 1
10848: PPUSH
10849: LD_INT 170
10851: PPUSH
10852: LD_INT 50
10854: PPUSH
10855: CALL_OW 297
10859: PUSH
10860: LD_INT 4
10862: LESS
10863: IFFALSE 10837
// SetFuel ( i , 100 ) ;
10865: LD_VAR 0 1
10869: PPUSH
10870: LD_INT 100
10872: PPUSH
10873: CALL_OW 240
// end else
10877: GO 10920
// if not IsInArea ( i , arParkingArea ) then
10879: LD_VAR 0 1
10883: PPUSH
10884: LD_INT 20
10886: PPUSH
10887: CALL_OW 308
10891: NOT
10892: IFFALSE 10908
// ComMoveToArea ( i , arParkingArea ) else
10894: LD_VAR 0 1
10898: PPUSH
10899: LD_INT 20
10901: PPUSH
10902: CALL_OW 113
10906: GO 10920
// SetTag ( i , 301 ) ;
10908: LD_VAR 0 1
10912: PPUSH
10913: LD_INT 301
10915: PPUSH
10916: CALL_OW 109
// end ; if GetTag ( i ) = 301 then
10920: LD_VAR 0 1
10924: PPUSH
10925: CALL_OW 110
10929: PUSH
10930: LD_INT 301
10932: EQUAL
10933: IFFALSE 11075
// begin if GetLives ( i ) < 1000 then
10935: LD_VAR 0 1
10939: PPUSH
10940: CALL_OW 256
10944: PUSH
10945: LD_INT 1000
10947: LESS
10948: IFFALSE 11052
// begin if not IsDrivenBy ( i ) then
10950: LD_VAR 0 1
10954: PPUSH
10955: CALL_OW 311
10959: NOT
10960: IFFALSE 10964
// continue ;
10962: GO 10754
// mech := IsDrivenBy ( i ) ;
10964: LD_ADDR_VAR 0 2
10968: PUSH
10969: LD_VAR 0 1
10973: PPUSH
10974: CALL_OW 311
10978: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
10979: LD_VAR 0 2
10983: PPUSH
10984: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
10988: LD_VAR 0 2
10992: PPUSH
10993: LD_VAR 0 1
10997: PPUSH
10998: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
11002: LD_INT 35
11004: PPUSH
11005: CALL_OW 67
// until GetLives ( i ) = 1000 ;
11009: LD_VAR 0 1
11013: PPUSH
11014: CALL_OW 256
11018: PUSH
11019: LD_INT 1000
11021: EQUAL
11022: IFFALSE 11002
// SetLives ( mech , 1000 ) ;
11024: LD_VAR 0 2
11028: PPUSH
11029: LD_INT 1000
11031: PPUSH
11032: CALL_OW 234
// ComEnterUnit ( mech , i ) ;
11036: LD_VAR 0 2
11040: PPUSH
11041: LD_VAR 0 1
11045: PPUSH
11046: CALL_OW 120
// end else
11050: GO 11075
// if IsDrivenBy ( i ) then
11052: LD_VAR 0 1
11056: PPUSH
11057: CALL_OW 311
11061: IFFALSE 11075
// SetTag ( i , 0 ) ;
11063: LD_VAR 0 1
11067: PPUSH
11068: LD_INT 0
11070: PPUSH
11071: CALL_OW 109
// end ; if GetTag ( i ) < 300 then
11075: LD_VAR 0 1
11079: PPUSH
11080: CALL_OW 110
11084: PUSH
11085: LD_INT 300
11087: LESS
11088: IFFALSE 11253
// begin enemy := FilterUnitsInArea ( arCampArea , [ f_enemy , enemySide ] ) ;
11090: LD_ADDR_VAR 0 3
11094: PUSH
11095: LD_INT 19
11097: PPUSH
11098: LD_INT 81
11100: PUSH
11101: LD_EXP 12
11105: PUSH
11106: EMPTY
11107: LIST
11108: LIST
11109: PPUSH
11110: CALL_OW 70
11114: ST_TO_ADDR
// if GetLives ( i ) < 650 then
11115: LD_VAR 0 1
11119: PPUSH
11120: CALL_OW 256
11124: PUSH
11125: LD_INT 650
11127: LESS
11128: IFFALSE 11153
// begin ComStop ( i ) ;
11130: LD_VAR 0 1
11134: PPUSH
11135: CALL_OW 141
// SetTag ( i , 300 ) ;
11139: LD_VAR 0 1
11143: PPUSH
11144: LD_INT 300
11146: PPUSH
11147: CALL_OW 109
// continue ;
11151: GO 10754
// end ; if enemy then
11153: LD_VAR 0 3
11157: IFFALSE 11197
// begin if not HasTask ( i ) then
11159: LD_VAR 0 1
11163: PPUSH
11164: CALL_OW 314
11168: NOT
11169: IFFALSE 11195
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
11171: LD_VAR 0 1
11175: PPUSH
11176: LD_VAR 0 3
11180: PPUSH
11181: LD_VAR 0 1
11185: PPUSH
11186: CALL_OW 74
11190: PPUSH
11191: CALL_OW 115
// end else
11195: GO 11253
// if enemyMobile then
11197: LD_EXP 10
11201: IFFALSE 11253
// begin enemy := FilterAllUnits ( [ f_enemy , enemySide ] ) ;
11203: LD_ADDR_VAR 0 3
11207: PUSH
11208: LD_INT 81
11210: PUSH
11211: LD_EXP 12
11215: PUSH
11216: EMPTY
11217: LIST
11218: LIST
11219: PPUSH
11220: CALL_OW 69
11224: ST_TO_ADDR
// if enemy then
11225: LD_VAR 0 3
11229: IFFALSE 11253
// AgressiveMove ( i , [ [ 130 , 28 ] ] ) ;
11231: LD_VAR 0 1
11235: PPUSH
11236: LD_INT 130
11238: PUSH
11239: LD_INT 28
11241: PUSH
11242: EMPTY
11243: LIST
11244: LIST
11245: PUSH
11246: EMPTY
11247: LIST
11248: PPUSH
11249: CALL 55437 0 2
// end ; end ; end ;
11253: GO 10754
11255: POP
11256: POP
// end ;
11257: PPOPN 3
11259: END
// every 0 0$2 trigger arAttackersInf do var i , tmp , nearest , enemy , path ;
11260: LD_EXP 13
11264: IFFALSE 11787
11266: GO 11268
11268: DISABLE
11269: LD_INT 0
11271: PPUSH
11272: PPUSH
11273: PPUSH
11274: PPUSH
11275: PPUSH
// begin enable ;
11276: ENABLE
// tmp := UnitFilter ( arAttackersInf , [ f_ok ] ) ;
11277: LD_ADDR_VAR 0 2
11281: PUSH
11282: LD_EXP 13
11286: PPUSH
11287: LD_INT 50
11289: PUSH
11290: EMPTY
11291: LIST
11292: PPUSH
11293: CALL_OW 72
11297: ST_TO_ADDR
// arAttackersInf := [ ] ;
11298: LD_ADDR_EXP 13
11302: PUSH
11303: EMPTY
11304: ST_TO_ADDR
// for i in UnitFilter ( tmp , [ f_class , class_soldier ] ) do
11305: LD_ADDR_VAR 0 1
11309: PUSH
11310: LD_VAR 0 2
11314: PPUSH
11315: LD_INT 25
11317: PUSH
11318: LD_INT 1
11320: PUSH
11321: EMPTY
11322: LIST
11323: LIST
11324: PPUSH
11325: CALL_OW 72
11329: PUSH
11330: FOR_IN
11331: IFFALSE 11483
// begin if Prob ( 50 ) then
11333: LD_INT 50
11335: PPUSH
11336: CALL_OW 13
11340: IFFALSE 11356
// SetTag ( i , tMine ) else
11342: LD_VAR 0 1
11346: PPUSH
11347: LD_INT 6
11349: PPUSH
11350: CALL_OW 109
11354: GO 11358
// continue ;
11356: GO 11330
// nearest := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , enemySide ] , [ f_not , [ f_tag , tMined ] ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) , i ) ;
11358: LD_ADDR_VAR 0 3
11362: PUSH
11363: LD_INT 81
11365: PUSH
11366: LD_EXP 12
11370: PUSH
11371: EMPTY
11372: LIST
11373: LIST
11374: PUSH
11375: LD_INT 3
11377: PUSH
11378: LD_INT 120
11380: PUSH
11381: LD_INT 11
11383: PUSH
11384: EMPTY
11385: LIST
11386: LIST
11387: PUSH
11388: EMPTY
11389: LIST
11390: LIST
11391: PUSH
11392: LD_INT 2
11394: PUSH
11395: LD_INT 21
11397: PUSH
11398: LD_INT 2
11400: PUSH
11401: EMPTY
11402: LIST
11403: LIST
11404: PUSH
11405: LD_INT 21
11407: PUSH
11408: LD_INT 3
11410: PUSH
11411: EMPTY
11412: LIST
11413: LIST
11414: PUSH
11415: EMPTY
11416: LIST
11417: LIST
11418: LIST
11419: PUSH
11420: EMPTY
11421: LIST
11422: LIST
11423: LIST
11424: PPUSH
11425: CALL_OW 69
11429: PPUSH
11430: LD_VAR 0 1
11434: PPUSH
11435: CALL_OW 74
11439: ST_TO_ADDR
// if not nearest then
11440: LD_VAR 0 3
11444: NOT
11445: IFFALSE 11449
// break ;
11447: GO 11483
// SetTag ( nearest , tMined ) ;
11449: LD_VAR 0 3
11453: PPUSH
11454: LD_INT 11
11456: PPUSH
11457: CALL_OW 109
// AddComPlaceDelayedCharge ( i , 0 , 0 , nearest ) ;
11461: LD_VAR 0 1
11465: PPUSH
11466: LD_INT 0
11468: PPUSH
11469: LD_INT 0
11471: PPUSH
11472: LD_VAR 0 3
11476: PPUSH
11477: CALL_OW 192
// end ;
11481: GO 11330
11483: POP
11484: POP
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
11485: LD_ADDR_VAR 0 2
11489: PUSH
11490: LD_VAR 0 2
11494: PPUSH
11495: LD_INT 50
11497: PUSH
11498: EMPTY
11499: LIST
11500: PPUSH
11501: CALL_OW 72
11505: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
11506: LD_INT 70
11508: PPUSH
11509: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
11513: LD_ADDR_VAR 0 2
11517: PUSH
11518: LD_VAR 0 2
11522: PPUSH
11523: LD_INT 50
11525: PUSH
11526: EMPTY
11527: LIST
11528: PPUSH
11529: CALL_OW 72
11533: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_enemy , enemySide ] ) ;
11534: LD_ADDR_VAR 0 4
11538: PUSH
11539: LD_INT 81
11541: PUSH
11542: LD_EXP 12
11546: PUSH
11547: EMPTY
11548: LIST
11549: LIST
11550: PPUSH
11551: CALL_OW 69
11555: ST_TO_ADDR
// for i in tmp do
11556: LD_ADDR_VAR 0 1
11560: PUSH
11561: LD_VAR 0 2
11565: PUSH
11566: FOR_IN
11567: IFFALSE 11778
// if GetClass ( i ) <> 1 and GetTag ( i ) <> tMine then
11569: LD_VAR 0 1
11573: PPUSH
11574: CALL_OW 257
11578: PUSH
11579: LD_INT 1
11581: NONEQUAL
11582: PUSH
11583: LD_VAR 0 1
11587: PPUSH
11588: CALL_OW 110
11592: PUSH
11593: LD_INT 6
11595: NONEQUAL
11596: AND
11597: IFFALSE 11625
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
11599: LD_VAR 0 1
11603: PPUSH
11604: LD_VAR 0 4
11608: PPUSH
11609: LD_VAR 0 1
11613: PPUSH
11614: CALL_OW 74
11618: PPUSH
11619: CALL_OW 115
11623: GO 11776
// begin nearest := NearestUnitToUnit ( UnitFilter ( enemy , [ [ f_not , [ f_tag , tMined ] ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) , i ) ;
11625: LD_ADDR_VAR 0 3
11629: PUSH
11630: LD_VAR 0 4
11634: PPUSH
11635: LD_INT 3
11637: PUSH
11638: LD_INT 120
11640: PUSH
11641: LD_INT 11
11643: PUSH
11644: EMPTY
11645: LIST
11646: LIST
11647: PUSH
11648: EMPTY
11649: LIST
11650: LIST
11651: PUSH
11652: LD_INT 2
11654: PUSH
11655: LD_INT 21
11657: PUSH
11658: LD_INT 2
11660: PUSH
11661: EMPTY
11662: LIST
11663: LIST
11664: PUSH
11665: LD_INT 21
11667: PUSH
11668: LD_INT 3
11670: PUSH
11671: EMPTY
11672: LIST
11673: LIST
11674: PUSH
11675: EMPTY
11676: LIST
11677: LIST
11678: LIST
11679: PUSH
11680: EMPTY
11681: LIST
11682: LIST
11683: PPUSH
11684: CALL_OW 72
11688: PPUSH
11689: LD_VAR 0 1
11693: PPUSH
11694: CALL_OW 74
11698: ST_TO_ADDR
// if not nearest then
11699: LD_VAR 0 3
11703: NOT
11704: IFFALSE 11732
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
11706: LD_VAR 0 1
11710: PPUSH
11711: LD_VAR 0 4
11715: PPUSH
11716: LD_VAR 0 1
11720: PPUSH
11721: CALL_OW 74
11725: PPUSH
11726: CALL_OW 115
11730: GO 11776
// if not HasTask ( i ) then
11732: LD_VAR 0 1
11736: PPUSH
11737: CALL_OW 314
11741: NOT
11742: IFFALSE 11776
// begin SetTag ( nearest , tMined ) ;
11744: LD_VAR 0 3
11748: PPUSH
11749: LD_INT 11
11751: PPUSH
11752: CALL_OW 109
// ComPlaceDelayedCharge ( i , 0 , 0 , nearest ) ;
11756: LD_VAR 0 1
11760: PPUSH
11761: LD_INT 0
11763: PPUSH
11764: LD_INT 0
11766: PPUSH
11767: LD_VAR 0 3
11771: PPUSH
11772: CALL_OW 132
// end ; end ;
11776: GO 11566
11778: POP
11779: POP
// until not tmp ;
11780: LD_VAR 0 2
11784: NOT
11785: IFFALSE 11506
// end ;
11787: PPOPN 5
11789: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , enemySide ] , [ f_engine , engine_combustion ] ] ) do var i ;
11790: LD_INT 22
11792: PUSH
11793: LD_EXP 12
11797: PUSH
11798: EMPTY
11799: LIST
11800: LIST
11801: PUSH
11802: LD_INT 32
11804: PUSH
11805: LD_INT 1
11807: PUSH
11808: EMPTY
11809: LIST
11810: LIST
11811: PUSH
11812: EMPTY
11813: LIST
11814: LIST
11815: PPUSH
11816: CALL_OW 69
11820: IFFALSE 11899
11822: GO 11824
11824: DISABLE
11825: LD_INT 0
11827: PPUSH
// begin enable ;
11828: ENABLE
// for i in FilterAllUnits ( [ [ f_side , enemySide ] , [ f_engine , engine_combustion ] ] ) do
11829: LD_ADDR_VAR 0 1
11833: PUSH
11834: LD_INT 22
11836: PUSH
11837: LD_EXP 12
11841: PUSH
11842: EMPTY
11843: LIST
11844: LIST
11845: PUSH
11846: LD_INT 32
11848: PUSH
11849: LD_INT 1
11851: PUSH
11852: EMPTY
11853: LIST
11854: LIST
11855: PUSH
11856: EMPTY
11857: LIST
11858: LIST
11859: PPUSH
11860: CALL_OW 69
11864: PUSH
11865: FOR_IN
11866: IFFALSE 11897
// if GetFuel ( i ) < 3 then
11868: LD_VAR 0 1
11872: PPUSH
11873: CALL_OW 261
11877: PUSH
11878: LD_INT 3
11880: LESS
11881: IFFALSE 11895
// SetFuel ( i , 3 ) ;
11883: LD_VAR 0 1
11887: PPUSH
11888: LD_INT 3
11890: PPUSH
11891: CALL_OW 240
11895: GO 11865
11897: POP
11898: POP
// end ;
11899: PPOPN 1
11901: END
// every 0 0$2 trigger FilterUnitsInArea ( southEndArea , [ f_side , enemySide ] ) do var i ;
11902: LD_INT 9
11904: PPUSH
11905: LD_INT 22
11907: PUSH
11908: LD_EXP 12
11912: PUSH
11913: EMPTY
11914: LIST
11915: LIST
11916: PPUSH
11917: CALL_OW 70
11921: IFFALSE 11984
11923: GO 11925
11925: DISABLE
11926: LD_INT 0
11928: PPUSH
// begin enable ;
11929: ENABLE
// for i in FilterUnitsInArea ( southEndArea , [ f_side , enemySide ] ) do
11930: LD_ADDR_VAR 0 1
11934: PUSH
11935: LD_INT 9
11937: PPUSH
11938: LD_INT 22
11940: PUSH
11941: LD_EXP 12
11945: PUSH
11946: EMPTY
11947: LIST
11948: LIST
11949: PPUSH
11950: CALL_OW 70
11954: PUSH
11955: FOR_IN
11956: IFFALSE 11982
// begin Multiplayer_AddPoints ( convoySide , - 250 ) ;
11958: LD_EXP 40
11962: PPUSH
11963: LD_INT 250
11965: NEG
11966: PPUSH
11967: CALL 8128 0 2
// RemoveUnit ( i ) ;
11971: LD_VAR 0 1
11975: PPUSH
11976: CALL_OW 64
// end ;
11980: GO 11955
11982: POP
11983: POP
// end ; end_of_file
11984: PPOPN 1
11986: END
// export convoys , convoyWave , convoySide ; export function PrepareConvoys ( side ) ; var i ; begin
11987: LD_INT 0
11989: PPUSH
11990: PPUSH
// convoys := [ ] ;
11991: LD_ADDR_EXP 38
11995: PUSH
11996: EMPTY
11997: ST_TO_ADDR
// convoySide := side ;
11998: LD_ADDR_EXP 40
12002: PUSH
12003: LD_VAR 0 1
12007: ST_TO_ADDR
// convoyWave := 1 ;
12008: LD_ADDR_EXP 39
12012: PUSH
12013: LD_INT 1
12015: ST_TO_ADDR
// for i := 1 to 8 do
12016: LD_ADDR_VAR 0 3
12020: PUSH
12021: DOUBLE
12022: LD_INT 1
12024: DEC
12025: ST_TO_ADDR
12026: LD_INT 8
12028: PUSH
12029: FOR_TO
12030: IFFALSE 12060
// if multi_sides [ i ] then
12032: LD_EXP 15
12036: PUSH
12037: LD_VAR 0 3
12041: ARRAY
12042: IFFALSE 12058
// ChangeSideFog ( i , side ) ;
12044: LD_VAR 0 3
12048: PPUSH
12049: LD_VAR 0 1
12053: PPUSH
12054: CALL_OW 343
12058: GO 12029
12060: POP
12061: POP
// end ;
12062: LD_VAR 0 2
12066: RET
// every 2 2$00 + 1 1$00 trigger game do var i , tmp ;
12067: LD_EXP 2
12071: IFFALSE 12106
12073: GO 12075
12075: DISABLE
12076: LD_INT 0
12078: PPUSH
12079: PPUSH
// begin enable ;
12080: ENABLE
// blockThread := true ;
12081: LD_ADDR_EXP 6
12085: PUSH
12086: LD_INT 1
12088: ST_TO_ADDR
// SendConvoy ( convoyWave ) ;
12089: LD_EXP 39
12093: PPUSH
12094: CALL 12109 0 1
// blockThread := false ;
12098: LD_ADDR_EXP 6
12102: PUSH
12103: LD_INT 0
12105: ST_TO_ADDR
// end ;
12106: PPOPN 2
12108: END
// function SendConvoy ( wave ) ; var i , skill , un , veh , tmp , path ; begin
12109: LD_INT 0
12111: PPUSH
12112: PPUSH
12113: PPUSH
12114: PPUSH
12115: PPUSH
12116: PPUSH
12117: PPUSH
// convoyWave := Inc ( wave ) ;
12118: LD_ADDR_EXP 39
12122: PUSH
12123: LD_VAR 0 1
12127: PPUSH
12128: CALL 54194 0 1
12132: ST_TO_ADDR
// skill := [ 5 , 4 , 3 ] [ Difficulty ] ;
12133: LD_ADDR_VAR 0 4
12137: PUSH
12138: LD_INT 5
12140: PUSH
12141: LD_INT 4
12143: PUSH
12144: LD_INT 3
12146: PUSH
12147: EMPTY
12148: LIST
12149: LIST
12150: LIST
12151: PUSH
12152: LD_OWVAR 67
12156: ARRAY
12157: ST_TO_ADDR
// tmp := [ ] ;
12158: LD_ADDR_VAR 0 7
12162: PUSH
12163: EMPTY
12164: ST_TO_ADDR
// if wave mod 5 = 0 then
12165: LD_VAR 0 1
12169: PUSH
12170: LD_INT 5
12172: MOD
12173: PUSH
12174: LD_INT 0
12176: EQUAL
12177: IFFALSE 12423
// begin path := [ [ 16 , 21 ] , [ 36 , 45 ] , [ 48 , 58 ] , [ 59 , 88 ] , [ 76 , 106 ] , [ 93 , 150 ] , [ 92 , 177 ] ] ;
12179: LD_ADDR_VAR 0 8
12183: PUSH
12184: LD_INT 16
12186: PUSH
12187: LD_INT 21
12189: PUSH
12190: EMPTY
12191: LIST
12192: LIST
12193: PUSH
12194: LD_INT 36
12196: PUSH
12197: LD_INT 45
12199: PUSH
12200: EMPTY
12201: LIST
12202: LIST
12203: PUSH
12204: LD_INT 48
12206: PUSH
12207: LD_INT 58
12209: PUSH
12210: EMPTY
12211: LIST
12212: LIST
12213: PUSH
12214: LD_INT 59
12216: PUSH
12217: LD_INT 88
12219: PUSH
12220: EMPTY
12221: LIST
12222: LIST
12223: PUSH
12224: LD_INT 76
12226: PUSH
12227: LD_INT 106
12229: PUSH
12230: EMPTY
12231: LIST
12232: LIST
12233: PUSH
12234: LD_INT 93
12236: PUSH
12237: LD_INT 150
12239: PUSH
12240: EMPTY
12241: LIST
12242: LIST
12243: PUSH
12244: LD_INT 92
12246: PUSH
12247: LD_INT 177
12249: PUSH
12250: EMPTY
12251: LIST
12252: LIST
12253: PUSH
12254: EMPTY
12255: LIST
12256: LIST
12257: LIST
12258: LIST
12259: LIST
12260: LIST
12261: LIST
12262: ST_TO_ADDR
// for i := 1 to 4 do
12263: LD_ADDR_VAR 0 3
12267: PUSH
12268: DOUBLE
12269: LD_INT 1
12271: DEC
12272: ST_TO_ADDR
12273: LD_INT 4
12275: PUSH
12276: FOR_TO
12277: IFFALSE 12419
// begin uc_side := convoySide ;
12279: LD_ADDR_OWVAR 20
12283: PUSH
12284: LD_EXP 40
12288: ST_TO_ADDR
// uc_nation := nation_russian ;
12289: LD_ADDR_OWVAR 21
12293: PUSH
12294: LD_INT 3
12296: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , skill ) ;
12297: LD_INT 0
12299: PPUSH
12300: LD_INT 1
12302: PPUSH
12303: LD_INT 4
12305: PPUSH
12306: CALL_OW 12
12310: PPUSH
12311: LD_VAR 0 4
12315: PPUSH
12316: CALL_OW 380
// un := CreateHuman ;
12320: LD_ADDR_VAR 0 5
12324: PUSH
12325: CALL_OW 44
12329: ST_TO_ADDR
// SetDir ( un , 3 ) ;
12330: LD_VAR 0 5
12334: PPUSH
12335: LD_INT 3
12337: PPUSH
12338: CALL_OW 233
// PlaceUnitArea ( un , northForestSpawnArea , false ) ;
12342: LD_VAR 0 5
12346: PPUSH
12347: LD_INT 10
12349: PPUSH
12350: LD_INT 0
12352: PPUSH
12353: CALL_OW 49
// SetLives ( un , rand ( 300 , 1000 ) ) ;
12357: LD_VAR 0 5
12361: PPUSH
12362: LD_INT 300
12364: PPUSH
12365: LD_INT 1000
12367: PPUSH
12368: CALL_OW 12
12372: PPUSH
12373: CALL_OW 234
// convoys := Join ( convoys , un ) ;
12377: LD_ADDR_EXP 38
12381: PUSH
12382: LD_EXP 38
12386: PPUSH
12387: LD_VAR 0 5
12391: PPUSH
12392: CALL 52833 0 2
12396: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
12397: LD_ADDR_VAR 0 7
12401: PUSH
12402: LD_VAR 0 7
12406: PPUSH
12407: LD_VAR 0 5
12411: PPUSH
12412: CALL 52833 0 2
12416: ST_TO_ADDR
// end ;
12417: GO 12276
12419: POP
12420: POP
// end else
12421: GO 13604
// if wave mod 3 = 0 then
12423: LD_VAR 0 1
12427: PUSH
12428: LD_INT 3
12430: MOD
12431: PUSH
12432: LD_INT 0
12434: EQUAL
12435: IFFALSE 12925
// begin path := [ [ 133 , 15 ] , [ 125 , 34 ] , [ 109 , 55 ] , [ 99 , 64 ] , [ 133 , 102 ] , [ 143 , 136 ] , [ 127 , 154 ] , [ 92 , 152 ] , [ 93 , 177 ] ] ;
12437: LD_ADDR_VAR 0 8
12441: PUSH
12442: LD_INT 133
12444: PUSH
12445: LD_INT 15
12447: PUSH
12448: EMPTY
12449: LIST
12450: LIST
12451: PUSH
12452: LD_INT 125
12454: PUSH
12455: LD_INT 34
12457: PUSH
12458: EMPTY
12459: LIST
12460: LIST
12461: PUSH
12462: LD_INT 109
12464: PUSH
12465: LD_INT 55
12467: PUSH
12468: EMPTY
12469: LIST
12470: LIST
12471: PUSH
12472: LD_INT 99
12474: PUSH
12475: LD_INT 64
12477: PUSH
12478: EMPTY
12479: LIST
12480: LIST
12481: PUSH
12482: LD_INT 133
12484: PUSH
12485: LD_INT 102
12487: PUSH
12488: EMPTY
12489: LIST
12490: LIST
12491: PUSH
12492: LD_INT 143
12494: PUSH
12495: LD_INT 136
12497: PUSH
12498: EMPTY
12499: LIST
12500: LIST
12501: PUSH
12502: LD_INT 127
12504: PUSH
12505: LD_INT 154
12507: PUSH
12508: EMPTY
12509: LIST
12510: LIST
12511: PUSH
12512: LD_INT 92
12514: PUSH
12515: LD_INT 152
12517: PUSH
12518: EMPTY
12519: LIST
12520: LIST
12521: PUSH
12522: LD_INT 93
12524: PUSH
12525: LD_INT 177
12527: PUSH
12528: EMPTY
12529: LIST
12530: LIST
12531: PUSH
12532: EMPTY
12533: LIST
12534: LIST
12535: LIST
12536: LIST
12537: LIST
12538: LIST
12539: LIST
12540: LIST
12541: LIST
12542: ST_TO_ADDR
// for i := 1 to 4 do
12543: LD_ADDR_VAR 0 3
12547: PUSH
12548: DOUBLE
12549: LD_INT 1
12551: DEC
12552: ST_TO_ADDR
12553: LD_INT 4
12555: PUSH
12556: FOR_TO
12557: IFFALSE 12921
// begin uc_side := convoySide ;
12559: LD_ADDR_OWVAR 20
12563: PUSH
12564: LD_EXP 40
12568: ST_TO_ADDR
// uc_nation := nation_russian ;
12569: LD_ADDR_OWVAR 21
12573: PUSH
12574: LD_INT 3
12576: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , skill ) ;
12577: LD_INT 0
12579: PPUSH
12580: LD_INT 1
12582: PPUSH
12583: LD_INT 4
12585: PPUSH
12586: CALL_OW 12
12590: PPUSH
12591: LD_VAR 0 4
12595: PPUSH
12596: CALL_OW 380
// un := CreateHuman ;
12600: LD_ADDR_VAR 0 5
12604: PUSH
12605: CALL_OW 44
12609: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_wheeled , ru_medium_tracked ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_cargo_bay , ru_gun ] [ rand ( 1 , 4 ) ] , rand ( 60 , 90 ) ) ;
12610: LD_INT 21
12612: PUSH
12613: LD_INT 22
12615: PUSH
12616: EMPTY
12617: LIST
12618: LIST
12619: PUSH
12620: LD_INT 1
12622: PPUSH
12623: LD_INT 2
12625: PPUSH
12626: CALL_OW 12
12630: ARRAY
12631: PPUSH
12632: LD_INT 1
12634: PPUSH
12635: LD_INT 1
12637: PPUSH
12638: LD_INT 42
12640: PUSH
12641: LD_INT 43
12643: PUSH
12644: LD_INT 51
12646: PUSH
12647: LD_INT 44
12649: PUSH
12650: EMPTY
12651: LIST
12652: LIST
12653: LIST
12654: LIST
12655: PUSH
12656: LD_INT 1
12658: PPUSH
12659: LD_INT 4
12661: PPUSH
12662: CALL_OW 12
12666: ARRAY
12667: PPUSH
12668: LD_INT 60
12670: PPUSH
12671: LD_INT 90
12673: PPUSH
12674: CALL_OW 12
12678: PPUSH
12679: CALL 19962 0 5
// veh := CreateVehicle ;
12683: LD_ADDR_VAR 0 6
12687: PUSH
12688: CALL_OW 45
12692: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
12693: LD_VAR 0 6
12697: PPUSH
12698: LD_INT 3
12700: PPUSH
12701: CALL_OW 233
// SetLives ( veh , rand ( 300 , 1000 ) ) ;
12705: LD_VAR 0 6
12709: PPUSH
12710: LD_INT 300
12712: PPUSH
12713: LD_INT 1000
12715: PPUSH
12716: CALL_OW 12
12720: PPUSH
12721: CALL_OW 234
// if GetWeapon ( veh ) = ru_cargo_bay then
12725: LD_VAR 0 6
12729: PPUSH
12730: CALL_OW 264
12734: PUSH
12735: LD_INT 51
12737: EQUAL
12738: IFFALSE 12786
// SetCargo ( veh , [ mat_cans , mat_oil ] [ rand ( 1 , 2 ) ] , 10 * rand ( 1 , 10 ) ) ;
12740: LD_VAR 0 6
12744: PPUSH
12745: LD_INT 1
12747: PUSH
12748: LD_INT 2
12750: PUSH
12751: EMPTY
12752: LIST
12753: LIST
12754: PUSH
12755: LD_INT 1
12757: PPUSH
12758: LD_INT 2
12760: PPUSH
12761: CALL_OW 12
12765: ARRAY
12766: PPUSH
12767: LD_INT 10
12769: PUSH
12770: LD_INT 1
12772: PPUSH
12773: LD_INT 10
12775: PPUSH
12776: CALL_OW 12
12780: MUL
12781: PPUSH
12782: CALL_OW 290
// repeat wait ( 0 0$0.3 ) ;
12786: LD_INT 10
12788: PPUSH
12789: CALL_OW 67
// until PlaceUnitArea ( veh , northSpawnArea , false ) ;
12793: LD_VAR 0 6
12797: PPUSH
12798: LD_INT 7
12800: PPUSH
12801: LD_INT 0
12803: PPUSH
12804: CALL_OW 49
12808: IFFALSE 12786
// PlaceHumanInUnit ( un , veh ) ;
12810: LD_VAR 0 5
12814: PPUSH
12815: LD_VAR 0 6
12819: PPUSH
12820: CALL_OW 52
// convoys := Join ( convoys , un ) ;
12824: LD_ADDR_EXP 38
12828: PUSH
12829: LD_EXP 38
12833: PPUSH
12834: LD_VAR 0 5
12838: PPUSH
12839: CALL 52833 0 2
12843: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
12844: LD_ADDR_VAR 0 7
12848: PUSH
12849: LD_VAR 0 7
12853: PPUSH
12854: LD_VAR 0 5
12858: PPUSH
12859: CALL 52833 0 2
12863: ST_TO_ADDR
// convoys := Join ( convoys , veh ) ;
12864: LD_ADDR_EXP 38
12868: PUSH
12869: LD_EXP 38
12873: PPUSH
12874: LD_VAR 0 6
12878: PPUSH
12879: CALL 52833 0 2
12883: ST_TO_ADDR
// tmp := Join ( tmp , veh ) ;
12884: LD_ADDR_VAR 0 7
12888: PUSH
12889: LD_VAR 0 7
12893: PPUSH
12894: LD_VAR 0 6
12898: PPUSH
12899: CALL 52833 0 2
12903: ST_TO_ADDR
// ComMoveXY ( un , 133 , 15 ) ;
12904: LD_VAR 0 5
12908: PPUSH
12909: LD_INT 133
12911: PPUSH
12912: LD_INT 15
12914: PPUSH
12915: CALL_OW 111
// end ;
12919: GO 12556
12921: POP
12922: POP
// end else
12923: GO 13604
// begin path := [ [ 133 , 15 ] , [ 125 , 34 ] , [ 109 , 55 ] , [ 99 , 64 ] , [ 88 , 70 ] , [ 74 , 78 ] , [ 70 , 91 ] , [ 80 , 113 ] , [ 89 , 133 ] , [ 91 , 159 ] , [ 93 , 177 ] ] ;
12925: LD_ADDR_VAR 0 8
12929: PUSH
12930: LD_INT 133
12932: PUSH
12933: LD_INT 15
12935: PUSH
12936: EMPTY
12937: LIST
12938: LIST
12939: PUSH
12940: LD_INT 125
12942: PUSH
12943: LD_INT 34
12945: PUSH
12946: EMPTY
12947: LIST
12948: LIST
12949: PUSH
12950: LD_INT 109
12952: PUSH
12953: LD_INT 55
12955: PUSH
12956: EMPTY
12957: LIST
12958: LIST
12959: PUSH
12960: LD_INT 99
12962: PUSH
12963: LD_INT 64
12965: PUSH
12966: EMPTY
12967: LIST
12968: LIST
12969: PUSH
12970: LD_INT 88
12972: PUSH
12973: LD_INT 70
12975: PUSH
12976: EMPTY
12977: LIST
12978: LIST
12979: PUSH
12980: LD_INT 74
12982: PUSH
12983: LD_INT 78
12985: PUSH
12986: EMPTY
12987: LIST
12988: LIST
12989: PUSH
12990: LD_INT 70
12992: PUSH
12993: LD_INT 91
12995: PUSH
12996: EMPTY
12997: LIST
12998: LIST
12999: PUSH
13000: LD_INT 80
13002: PUSH
13003: LD_INT 113
13005: PUSH
13006: EMPTY
13007: LIST
13008: LIST
13009: PUSH
13010: LD_INT 89
13012: PUSH
13013: LD_INT 133
13015: PUSH
13016: EMPTY
13017: LIST
13018: LIST
13019: PUSH
13020: LD_INT 91
13022: PUSH
13023: LD_INT 159
13025: PUSH
13026: EMPTY
13027: LIST
13028: LIST
13029: PUSH
13030: LD_INT 93
13032: PUSH
13033: LD_INT 177
13035: PUSH
13036: EMPTY
13037: LIST
13038: LIST
13039: PUSH
13040: EMPTY
13041: LIST
13042: LIST
13043: LIST
13044: LIST
13045: LIST
13046: LIST
13047: LIST
13048: LIST
13049: LIST
13050: LIST
13051: LIST
13052: ST_TO_ADDR
// for i := 1 to 2 do
13053: LD_ADDR_VAR 0 3
13057: PUSH
13058: DOUBLE
13059: LD_INT 1
13061: DEC
13062: ST_TO_ADDR
13063: LD_INT 2
13065: PUSH
13066: FOR_TO
13067: IFFALSE 13412
// begin uc_side := convoySide ;
13069: LD_ADDR_OWVAR 20
13073: PUSH
13074: LD_EXP 40
13078: ST_TO_ADDR
// uc_nation := nation_russian ;
13079: LD_ADDR_OWVAR 21
13083: PUSH
13084: LD_INT 3
13086: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , skill ) ;
13087: LD_INT 0
13089: PPUSH
13090: LD_INT 1
13092: PPUSH
13093: LD_INT 4
13095: PPUSH
13096: CALL_OW 12
13100: PPUSH
13101: LD_VAR 0 4
13105: PPUSH
13106: CALL_OW 380
// un := CreateHuman ;
13110: LD_ADDR_VAR 0 5
13114: PUSH
13115: CALL_OW 44
13119: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_wheeled , ru_medium_tracked ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_cargo_bay , ru_gun ] [ rand ( 1 , 4 ) ] , rand ( 70 , 90 ) ) ;
13120: LD_INT 21
13122: PUSH
13123: LD_INT 22
13125: PUSH
13126: EMPTY
13127: LIST
13128: LIST
13129: PUSH
13130: LD_INT 1
13132: PPUSH
13133: LD_INT 2
13135: PPUSH
13136: CALL_OW 12
13140: ARRAY
13141: PPUSH
13142: LD_INT 1
13144: PPUSH
13145: LD_INT 1
13147: PPUSH
13148: LD_INT 42
13150: PUSH
13151: LD_INT 43
13153: PUSH
13154: LD_INT 51
13156: PUSH
13157: LD_INT 44
13159: PUSH
13160: EMPTY
13161: LIST
13162: LIST
13163: LIST
13164: LIST
13165: PUSH
13166: LD_INT 1
13168: PPUSH
13169: LD_INT 4
13171: PPUSH
13172: CALL_OW 12
13176: ARRAY
13177: PPUSH
13178: LD_INT 70
13180: PPUSH
13181: LD_INT 90
13183: PPUSH
13184: CALL_OW 12
13188: PPUSH
13189: CALL 19962 0 5
// veh := CreateVehicle ;
13193: LD_ADDR_VAR 0 6
13197: PUSH
13198: CALL_OW 45
13202: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
13203: LD_VAR 0 6
13207: PPUSH
13208: LD_INT 3
13210: PPUSH
13211: CALL_OW 233
// SetLives ( veh , rand ( 300 , 1000 ) ) ;
13215: LD_VAR 0 6
13219: PPUSH
13220: LD_INT 300
13222: PPUSH
13223: LD_INT 1000
13225: PPUSH
13226: CALL_OW 12
13230: PPUSH
13231: CALL_OW 234
// if GetWeapon ( veh ) = ru_cargo_bay then
13235: LD_VAR 0 6
13239: PPUSH
13240: CALL_OW 264
13244: PUSH
13245: LD_INT 51
13247: EQUAL
13248: IFFALSE 13277
// SetCargo ( veh , mat_cans , 10 * rand ( 1 , 10 ) ) ;
13250: LD_VAR 0 6
13254: PPUSH
13255: LD_INT 1
13257: PPUSH
13258: LD_INT 10
13260: PUSH
13261: LD_INT 1
13263: PPUSH
13264: LD_INT 10
13266: PPUSH
13267: CALL_OW 12
13271: MUL
13272: PPUSH
13273: CALL_OW 290
// repeat wait ( 0 0$0.3 ) ;
13277: LD_INT 10
13279: PPUSH
13280: CALL_OW 67
// until PlaceUnitArea ( veh , northSpawnArea , false ) ;
13284: LD_VAR 0 6
13288: PPUSH
13289: LD_INT 7
13291: PPUSH
13292: LD_INT 0
13294: PPUSH
13295: CALL_OW 49
13299: IFFALSE 13277
// PlaceHumanInUnit ( un , veh ) ;
13301: LD_VAR 0 5
13305: PPUSH
13306: LD_VAR 0 6
13310: PPUSH
13311: CALL_OW 52
// convoys := Join ( convoys , un ) ;
13315: LD_ADDR_EXP 38
13319: PUSH
13320: LD_EXP 38
13324: PPUSH
13325: LD_VAR 0 5
13329: PPUSH
13330: CALL 52833 0 2
13334: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
13335: LD_ADDR_VAR 0 7
13339: PUSH
13340: LD_VAR 0 7
13344: PPUSH
13345: LD_VAR 0 5
13349: PPUSH
13350: CALL 52833 0 2
13354: ST_TO_ADDR
// convoys := Join ( convoys , veh ) ;
13355: LD_ADDR_EXP 38
13359: PUSH
13360: LD_EXP 38
13364: PPUSH
13365: LD_VAR 0 6
13369: PPUSH
13370: CALL 52833 0 2
13374: ST_TO_ADDR
// tmp := Join ( tmp , veh ) ;
13375: LD_ADDR_VAR 0 7
13379: PUSH
13380: LD_VAR 0 7
13384: PPUSH
13385: LD_VAR 0 6
13389: PPUSH
13390: CALL 52833 0 2
13394: ST_TO_ADDR
// ComMoveXY ( un , 133 , 15 ) ;
13395: LD_VAR 0 5
13399: PPUSH
13400: LD_INT 133
13402: PPUSH
13403: LD_INT 15
13405: PPUSH
13406: CALL_OW 111
// end ;
13410: GO 13066
13412: POP
13413: POP
// for i := 1 to rand ( 3 , 5 ) do
13414: LD_ADDR_VAR 0 3
13418: PUSH
13419: DOUBLE
13420: LD_INT 1
13422: DEC
13423: ST_TO_ADDR
13424: LD_INT 3
13426: PPUSH
13427: LD_INT 5
13429: PPUSH
13430: CALL_OW 12
13434: PUSH
13435: FOR_TO
13436: IFFALSE 13602
// begin uc_side := convoySide ;
13438: LD_ADDR_OWVAR 20
13442: PUSH
13443: LD_EXP 40
13447: ST_TO_ADDR
// uc_nation := nation_russian ;
13448: LD_ADDR_OWVAR 21
13452: PUSH
13453: LD_INT 3
13455: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , skill ) ;
13456: LD_INT 0
13458: PPUSH
13459: LD_INT 1
13461: PPUSH
13462: LD_INT 4
13464: PPUSH
13465: CALL_OW 12
13469: PPUSH
13470: LD_VAR 0 4
13474: PPUSH
13475: CALL_OW 380
// un := CreateHuman ;
13479: LD_ADDR_VAR 0 5
13483: PUSH
13484: CALL_OW 44
13488: ST_TO_ADDR
// SetDir ( un , 3 ) ;
13489: LD_VAR 0 5
13493: PPUSH
13494: LD_INT 3
13496: PPUSH
13497: CALL_OW 233
// repeat wait ( 0 0$1 ) ;
13501: LD_INT 35
13503: PPUSH
13504: CALL_OW 67
// until PlaceUnitArea ( un , northSpawnArea , false ) ;
13508: LD_VAR 0 5
13512: PPUSH
13513: LD_INT 7
13515: PPUSH
13516: LD_INT 0
13518: PPUSH
13519: CALL_OW 49
13523: IFFALSE 13501
// SetLives ( un , rand ( 300 , 1000 ) ) ;
13525: LD_VAR 0 5
13529: PPUSH
13530: LD_INT 300
13532: PPUSH
13533: LD_INT 1000
13535: PPUSH
13536: CALL_OW 12
13540: PPUSH
13541: CALL_OW 234
// convoys := Join ( convoys , un ) ;
13545: LD_ADDR_EXP 38
13549: PUSH
13550: LD_EXP 38
13554: PPUSH
13555: LD_VAR 0 5
13559: PPUSH
13560: CALL 52833 0 2
13564: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
13565: LD_ADDR_VAR 0 7
13569: PUSH
13570: LD_VAR 0 7
13574: PPUSH
13575: LD_VAR 0 5
13579: PPUSH
13580: CALL 52833 0 2
13584: ST_TO_ADDR
// ComMoveXY ( un , 133 , 15 ) ;
13585: LD_VAR 0 5
13589: PPUSH
13590: LD_INT 133
13592: PPUSH
13593: LD_INT 15
13595: PPUSH
13596: CALL_OW 111
// end ;
13600: GO 13435
13602: POP
13603: POP
// end ; if not tmp then
13604: LD_VAR 0 7
13608: NOT
13609: IFFALSE 13613
// exit ;
13611: GO 13919
// repeat wait ( 0 0$1 ) ;
13613: LD_INT 35
13615: PPUSH
13616: CALL_OW 67
// for i in tmp do
13620: LD_ADDR_VAR 0 3
13624: PUSH
13625: LD_VAR 0 7
13629: PUSH
13630: FOR_IN
13631: IFFALSE 13910
// begin if IsDead ( i ) then
13633: LD_VAR 0 3
13637: PPUSH
13638: CALL_OW 301
13642: IFFALSE 13662
// tmp := tmp diff i else
13644: LD_ADDR_VAR 0 7
13648: PUSH
13649: LD_VAR 0 7
13653: PUSH
13654: LD_VAR 0 3
13658: DIFF
13659: ST_TO_ADDR
13660: GO 13908
// if IsInArea ( i , southEndArea ) then
13662: LD_VAR 0 3
13666: PPUSH
13667: LD_INT 9
13669: PPUSH
13670: CALL_OW 308
13674: IFFALSE 13827
// begin tmp := tmp diff i ;
13676: LD_ADDR_VAR 0 7
13680: PUSH
13681: LD_VAR 0 7
13685: PUSH
13686: LD_VAR 0 3
13690: DIFF
13691: ST_TO_ADDR
// convoys := convoys diff i ;
13692: LD_ADDR_EXP 38
13696: PUSH
13697: LD_EXP 38
13701: PUSH
13702: LD_VAR 0 3
13706: DIFF
13707: ST_TO_ADDR
// if GetType ( i ) = unit_human then
13708: LD_VAR 0 3
13712: PPUSH
13713: CALL_OW 247
13717: PUSH
13718: LD_INT 1
13720: EQUAL
13721: IFFALSE 13742
// Multiplayer_AddPoints ( convoySide , Multiplayer_GetCondition ( 7 ) ) else
13723: LD_EXP 40
13727: PPUSH
13728: LD_INT 7
13730: PPUSH
13731: CALL 8286 0 1
13735: PPUSH
13736: CALL 8128 0 2
13740: GO 13801
// begin tmp := tmp diff IsInUnit ( i ) ;
13742: LD_ADDR_VAR 0 7
13746: PUSH
13747: LD_VAR 0 7
13751: PUSH
13752: LD_VAR 0 3
13756: PPUSH
13757: CALL_OW 310
13761: DIFF
13762: ST_TO_ADDR
// convoys := convoys diff IsInUnit ( i ) ;
13763: LD_ADDR_EXP 38
13767: PUSH
13768: LD_EXP 38
13772: PUSH
13773: LD_VAR 0 3
13777: PPUSH
13778: CALL_OW 310
13782: DIFF
13783: ST_TO_ADDR
// Multiplayer_AddPoints ( convoySide , Multiplayer_GetCondition ( 8 ) ) ;
13784: LD_EXP 40
13788: PPUSH
13789: LD_INT 8
13791: PPUSH
13792: CALL 8286 0 1
13796: PPUSH
13797: CALL 8128 0 2
// end ; RemoveUnit ( i ) ;
13801: LD_VAR 0 3
13805: PPUSH
13806: CALL_OW 64
// savedConvoyUnits := Inc ( savedConvoyUnits ) ;
13810: LD_ADDR_EXP 5
13814: PUSH
13815: LD_EXP 5
13819: PPUSH
13820: CALL 54194 0 1
13824: ST_TO_ADDR
// end else
13825: GO 13908
// if GetType ( i ) = unit_vehicle and GetFuel ( i ) = 0 then
13827: LD_VAR 0 3
13831: PPUSH
13832: CALL_OW 247
13836: PUSH
13837: LD_INT 2
13839: EQUAL
13840: PUSH
13841: LD_VAR 0 3
13845: PPUSH
13846: CALL_OW 261
13850: PUSH
13851: LD_INT 0
13853: EQUAL
13854: AND
13855: IFFALSE 13891
// begin tmp := tmp diff i ;
13857: LD_ADDR_VAR 0 7
13861: PUSH
13862: LD_VAR 0 7
13866: PUSH
13867: LD_VAR 0 3
13871: DIFF
13872: ST_TO_ADDR
// convoys := convoys diff i ;
13873: LD_ADDR_EXP 38
13877: PUSH
13878: LD_EXP 38
13882: PUSH
13883: LD_VAR 0 3
13887: DIFF
13888: ST_TO_ADDR
// end else
13889: GO 13908
// MoveTo ( i , path , southEndArea ) ;
13891: LD_VAR 0 3
13895: PPUSH
13896: LD_VAR 0 8
13900: PPUSH
13901: LD_INT 9
13903: PPUSH
13904: CALL 13924 0 3
// end ;
13908: GO 13630
13910: POP
13911: POP
// until not tmp ;
13912: LD_VAR 0 7
13916: NOT
13917: IFFALSE 13613
// end ;
13919: LD_VAR 0 2
13923: RET
// function MoveTo ( unit , path , area ) ; var cr , tag , type , vehicle , ignoreCratesWeapon ; begin
13924: LD_INT 0
13926: PPUSH
13927: PPUSH
13928: PPUSH
13929: PPUSH
13930: PPUSH
13931: PPUSH
// if not unit then
13932: LD_VAR 0 1
13936: NOT
13937: IFFALSE 13941
// exit ;
13939: GO 14683
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser , ru_cargo_bay ] ;
13941: LD_ADDR_VAR 0 9
13945: PUSH
13946: LD_INT 29
13948: PUSH
13949: LD_INT 91
13951: PUSH
13952: LD_INT 49
13954: PUSH
13955: LD_INT 51
13957: PUSH
13958: EMPTY
13959: LIST
13960: LIST
13961: LIST
13962: LIST
13963: ST_TO_ADDR
// if IsOk ( unit ) then
13964: LD_VAR 0 1
13968: PPUSH
13969: CALL_OW 302
13973: IFFALSE 14683
// begin tag := GetTag ( unit ) + 1 ;
13975: LD_ADDR_VAR 0 6
13979: PUSH
13980: LD_VAR 0 1
13984: PPUSH
13985: CALL_OW 110
13989: PUSH
13990: LD_INT 1
13992: PLUS
13993: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( unit ) , GetY ( unit ) , 3 ) ;
13994: LD_ADDR_VAR 0 5
13998: PUSH
13999: LD_VAR 0 1
14003: PPUSH
14004: CALL_OW 250
14008: PPUSH
14009: LD_VAR 0 1
14013: PPUSH
14014: CALL_OW 251
14018: PPUSH
14019: LD_INT 3
14021: PPUSH
14022: CALL 55179 0 3
14026: ST_TO_ADDR
// type := GetType ( unit ) ;
14027: LD_ADDR_VAR 0 7
14031: PUSH
14032: LD_VAR 0 1
14036: PPUSH
14037: CALL_OW 247
14041: ST_TO_ADDR
// if type = unit_human then
14042: LD_VAR 0 7
14046: PUSH
14047: LD_INT 1
14049: EQUAL
14050: IFFALSE 14140
// begin vehicle := IsInUnit ( unit ) ;
14052: LD_ADDR_VAR 0 8
14056: PUSH
14057: LD_VAR 0 1
14061: PPUSH
14062: CALL_OW 310
14066: ST_TO_ADDR
// if vehicle and GetFuel ( vehicle ) = 0 then
14067: LD_VAR 0 8
14071: PUSH
14072: LD_VAR 0 8
14076: PPUSH
14077: CALL_OW 261
14081: PUSH
14082: LD_INT 0
14084: EQUAL
14085: AND
14086: IFFALSE 14138
// begin ComExitVehicle ( unit ) ;
14088: LD_VAR 0 1
14092: PPUSH
14093: CALL_OW 121
// AddComMoveXY ( unit , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) ;
14097: LD_VAR 0 1
14101: PPUSH
14102: LD_VAR 0 2
14106: PUSH
14107: LD_VAR 0 6
14111: ARRAY
14112: PUSH
14113: LD_INT 1
14115: ARRAY
14116: PPUSH
14117: LD_VAR 0 2
14121: PUSH
14122: LD_VAR 0 6
14126: ARRAY
14127: PUSH
14128: LD_INT 2
14130: ARRAY
14131: PPUSH
14132: CALL_OW 171
// exit ;
14136: GO 14683
// end ; end else
14138: GO 14215
// begin if GetFuel ( unit ) = 0 then
14140: LD_VAR 0 1
14144: PPUSH
14145: CALL_OW 261
14149: PUSH
14150: LD_INT 0
14152: EQUAL
14153: IFFALSE 14215
// begin ComExitVehicle ( IsDrivenBy ( unit ) ) ;
14155: LD_VAR 0 1
14159: PPUSH
14160: CALL_OW 311
14164: PPUSH
14165: CALL_OW 121
// AddComMoveXY ( IsDrivenBy ( unit ) , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) ;
14169: LD_VAR 0 1
14173: PPUSH
14174: CALL_OW 311
14178: PPUSH
14179: LD_VAR 0 2
14183: PUSH
14184: LD_VAR 0 6
14188: ARRAY
14189: PUSH
14190: LD_INT 1
14192: ARRAY
14193: PPUSH
14194: LD_VAR 0 2
14198: PUSH
14199: LD_VAR 0 6
14203: ARRAY
14204: PUSH
14205: LD_INT 2
14207: ARRAY
14208: PPUSH
14209: CALL_OW 171
// exit ;
14213: GO 14683
// end ; end ; if type = unit_vehicle and GetWeapon ( unit ) = ru_cargo_bay and IsInArea ( unit , cargoCheckpointArea ) and ( GetCargo ( unit , mat_cans ) or GetCargo ( unit , mat_oil ) ) then
14215: LD_VAR 0 7
14219: PUSH
14220: LD_INT 2
14222: EQUAL
14223: PUSH
14224: LD_VAR 0 1
14228: PPUSH
14229: CALL_OW 264
14233: PUSH
14234: LD_INT 51
14236: EQUAL
14237: AND
14238: PUSH
14239: LD_VAR 0 1
14243: PPUSH
14244: LD_INT 29
14246: PPUSH
14247: CALL_OW 308
14251: AND
14252: PUSH
14253: LD_VAR 0 1
14257: PPUSH
14258: LD_INT 1
14260: PPUSH
14261: CALL_OW 289
14265: PUSH
14266: LD_VAR 0 1
14270: PPUSH
14271: LD_INT 2
14273: PPUSH
14274: CALL_OW 289
14278: OR
14279: AND
14280: IFFALSE 14328
// begin goToUnload := Join ( goToUnload , unit ) ;
14282: LD_ADDR_EXP 8
14286: PUSH
14287: LD_EXP 8
14291: PPUSH
14292: LD_VAR 0 1
14296: PPUSH
14297: CALL 52833 0 2
14301: ST_TO_ADDR
// ComMoveXY ( unit , 113 , 117 ) ;
14302: LD_VAR 0 1
14306: PPUSH
14307: LD_INT 113
14309: PPUSH
14310: LD_INT 117
14312: PPUSH
14313: CALL_OW 111
// AddComUnload ( unit ) ;
14317: LD_VAR 0 1
14321: PPUSH
14322: CALL_OW 219
// exit ;
14326: GO 14683
// end ; if unit in goToUnload then
14328: LD_VAR 0 1
14332: PUSH
14333: LD_EXP 8
14337: IN
14338: IFFALSE 14396
// begin if GetCargo ( unit , mat_cans ) = 0 then
14340: LD_VAR 0 1
14344: PPUSH
14345: LD_INT 1
14347: PPUSH
14348: CALL_OW 289
14352: PUSH
14353: LD_INT 0
14355: EQUAL
14356: IFFALSE 14394
// begin SetTag ( unit , tag + 2 ) ;
14358: LD_VAR 0 1
14362: PPUSH
14363: LD_VAR 0 6
14367: PUSH
14368: LD_INT 2
14370: PLUS
14371: PPUSH
14372: CALL_OW 109
// goToUnload := goToUnload diff unit ;
14376: LD_ADDR_EXP 8
14380: PUSH
14381: LD_EXP 8
14385: PUSH
14386: LD_VAR 0 1
14390: DIFF
14391: ST_TO_ADDR
// end else
14392: GO 14396
// exit ;
14394: GO 14683
// end ; if type = unit_vehicle and cr > 3 and not GetWeapon ( unit ) in ignoreCratesWeapon then
14396: LD_VAR 0 7
14400: PUSH
14401: LD_INT 2
14403: EQUAL
14404: PUSH
14405: LD_VAR 0 5
14409: PUSH
14410: LD_INT 3
14412: GREATER
14413: AND
14414: PUSH
14415: LD_VAR 0 1
14419: PPUSH
14420: CALL_OW 264
14424: PUSH
14425: LD_VAR 0 9
14429: IN
14430: NOT
14431: AND
14432: IFFALSE 14471
// ComAttackPlace ( unit , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
14434: LD_VAR 0 1
14438: PPUSH
14439: LD_VAR 0 5
14443: PUSH
14444: LD_INT 1
14446: ARRAY
14447: PUSH
14448: LD_INT 1
14450: ARRAY
14451: PPUSH
14452: LD_VAR 0 5
14456: PUSH
14457: LD_INT 1
14459: ARRAY
14460: PUSH
14461: LD_INT 2
14463: ARRAY
14464: PPUSH
14465: CALL_OW 116
14469: GO 14683
// if path > tag then
14471: LD_VAR 0 2
14475: PUSH
14476: LD_VAR 0 6
14480: GREATER
14481: IFFALSE 14652
// begin if GetDistUnitXY ( unit , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
14483: LD_VAR 0 1
14487: PPUSH
14488: LD_VAR 0 2
14492: PUSH
14493: LD_VAR 0 6
14497: ARRAY
14498: PUSH
14499: LD_INT 1
14501: ARRAY
14502: PPUSH
14503: LD_VAR 0 2
14507: PUSH
14508: LD_VAR 0 6
14512: ARRAY
14513: PUSH
14514: LD_INT 2
14516: ARRAY
14517: PPUSH
14518: CALL_OW 297
14522: PUSH
14523: LD_INT 6
14525: GREATER
14526: IFFALSE 14636
// if GetClass ( unit ) in [ 2 , 3 , 4 ] then
14528: LD_VAR 0 1
14532: PPUSH
14533: CALL_OW 257
14537: PUSH
14538: LD_INT 2
14540: PUSH
14541: LD_INT 3
14543: PUSH
14544: LD_INT 4
14546: PUSH
14547: EMPTY
14548: LIST
14549: LIST
14550: LIST
14551: IN
14552: IFFALSE 14595
// ComMoveXY ( unit , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
14554: LD_VAR 0 1
14558: PPUSH
14559: LD_VAR 0 2
14563: PUSH
14564: LD_VAR 0 6
14568: ARRAY
14569: PUSH
14570: LD_INT 1
14572: ARRAY
14573: PPUSH
14574: LD_VAR 0 2
14578: PUSH
14579: LD_VAR 0 6
14583: ARRAY
14584: PUSH
14585: LD_INT 2
14587: ARRAY
14588: PPUSH
14589: CALL_OW 111
14593: GO 14634
// ComAgressiveMove ( unit , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
14595: LD_VAR 0 1
14599: PPUSH
14600: LD_VAR 0 2
14604: PUSH
14605: LD_VAR 0 6
14609: ARRAY
14610: PUSH
14611: LD_INT 1
14613: ARRAY
14614: PPUSH
14615: LD_VAR 0 2
14619: PUSH
14620: LD_VAR 0 6
14624: ARRAY
14625: PUSH
14626: LD_INT 2
14628: ARRAY
14629: PPUSH
14630: CALL_OW 114
14634: GO 14650
// SetTag ( unit , tag ) ;
14636: LD_VAR 0 1
14640: PPUSH
14641: LD_VAR 0 6
14645: PPUSH
14646: CALL_OW 109
// end else
14650: GO 14683
// if not IsInArea ( unit , area ) then
14652: LD_VAR 0 1
14656: PPUSH
14657: LD_VAR 0 3
14661: PPUSH
14662: CALL_OW 308
14666: NOT
14667: IFFALSE 14683
// ComMoveToArea ( unit , area ) ;
14669: LD_VAR 0 1
14673: PPUSH
14674: LD_VAR 0 3
14678: PPUSH
14679: CALL_OW 113
// end ; end ; end_of_file
14683: LD_VAR 0 4
14687: RET
// every 0 0$20 trigger game do
14688: LD_EXP 2
14692: IFFALSE 14733
14694: GO 14696
14696: DISABLE
// SpawnCrates ( [ cratesWestArea , cratesEastArea , cratesMiddleArea ] , multi_crates_spawn [ 2 ] , multi_crates_spawn [ 1 ] ) ;
14697: LD_INT 11
14699: PUSH
14700: LD_INT 12
14702: PUSH
14703: LD_INT 13
14705: PUSH
14706: EMPTY
14707: LIST
14708: LIST
14709: LIST
14710: PPUSH
14711: LD_EXP 29
14715: PUSH
14716: LD_INT 2
14718: ARRAY
14719: PPUSH
14720: LD_EXP 29
14724: PUSH
14725: LD_INT 1
14727: ARRAY
14728: PPUSH
14729: CALL 14734 0 3
14733: END
// export function SpawnCrates ( areas , time , amount ) ; var i , x ; begin
14734: LD_INT 0
14736: PPUSH
14737: PPUSH
14738: PPUSH
// if not areas then
14739: LD_VAR 0 1
14743: NOT
14744: IFFALSE 14748
// exit ;
14746: GO 14954
// x := 5 ;
14748: LD_ADDR_VAR 0 6
14752: PUSH
14753: LD_INT 5
14755: ST_TO_ADDR
// repeat wait ( time ) ;
14756: LD_VAR 0 2
14760: PPUSH
14761: CALL_OW 67
// for i in areas do
14765: LD_ADDR_VAR 0 5
14769: PUSH
14770: LD_VAR 0 1
14774: PUSH
14775: FOR_IN
14776: IFFALSE 14865
// begin if GetResourceArea ( i , mat_cans ) < [ 15 , 12 , 10 ] [ Difficulty ] then
14778: LD_VAR 0 5
14782: PPUSH
14783: LD_INT 1
14785: PPUSH
14786: CALL_OW 287
14790: PUSH
14791: LD_INT 15
14793: PUSH
14794: LD_INT 12
14796: PUSH
14797: LD_INT 10
14799: PUSH
14800: EMPTY
14801: LIST
14802: LIST
14803: LIST
14804: PUSH
14805: LD_OWVAR 67
14809: ARRAY
14810: LESS
14811: IFFALSE 14863
// begin wait ( 0 0$10 * Difficulty ) ;
14813: LD_INT 350
14815: PUSH
14816: LD_OWVAR 67
14820: MUL
14821: PPUSH
14822: CALL_OW 67
// CreateCratesArea ( x , i , true ) ;
14826: LD_VAR 0 6
14830: PPUSH
14831: LD_VAR 0 5
14835: PPUSH
14836: LD_INT 1
14838: PPUSH
14839: CALL_OW 55
// amount := amount - ( x * 10 ) ;
14843: LD_ADDR_VAR 0 3
14847: PUSH
14848: LD_VAR 0 3
14852: PUSH
14853: LD_VAR 0 6
14857: PUSH
14858: LD_INT 10
14860: MUL
14861: MINUS
14862: ST_TO_ADDR
// end ; end ;
14863: GO 14775
14865: POP
14866: POP
// time := time + ( 0 0$5 * Difficulty ) ;
14867: LD_ADDR_VAR 0 2
14871: PUSH
14872: LD_VAR 0 2
14876: PUSH
14877: LD_INT 175
14879: PUSH
14880: LD_OWVAR 67
14884: MUL
14885: PLUS
14886: ST_TO_ADDR
// x := x - 1 ;
14887: LD_ADDR_VAR 0 6
14891: PUSH
14892: LD_VAR 0 6
14896: PUSH
14897: LD_INT 1
14899: MINUS
14900: ST_TO_ADDR
// if x = 0 then
14901: LD_VAR 0 6
14905: PUSH
14906: LD_INT 0
14908: EQUAL
14909: IFFALSE 14919
// x := 5 ;
14911: LD_ADDR_VAR 0 6
14915: PUSH
14916: LD_INT 5
14918: ST_TO_ADDR
// if time > 2 2$00 then
14919: LD_VAR 0 2
14923: PUSH
14924: LD_INT 4200
14926: GREATER
14927: IFFALSE 14937
// time := 0 0$40 ;
14929: LD_ADDR_VAR 0 2
14933: PUSH
14934: LD_INT 1400
14936: ST_TO_ADDR
// until not game or amount <= 0 ;
14937: LD_EXP 2
14941: NOT
14942: PUSH
14943: LD_VAR 0 3
14947: PUSH
14948: LD_INT 0
14950: LESSEQUAL
14951: OR
14952: IFFALSE 14756
// end ; end_of_file
14954: LD_VAR 0 4
14958: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
14959: LD_VAR 0 1
14963: PUSH
14964: LD_INT 200
14966: DOUBLE
14967: GREATEREQUAL
14968: IFFALSE 14976
14970: LD_INT 299
14972: DOUBLE
14973: LESSEQUAL
14974: IFTRUE 14978
14976: GO 15010
14978: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
14979: LD_VAR 0 1
14983: PPUSH
14984: LD_VAR 0 2
14988: PPUSH
14989: LD_VAR 0 3
14993: PPUSH
14994: LD_VAR 0 4
14998: PPUSH
14999: LD_VAR 0 5
15003: PPUSH
15004: CALL 58502 0 5
15008: GO 15087
15010: LD_INT 300
15012: DOUBLE
15013: GREATEREQUAL
15014: IFFALSE 15022
15016: LD_INT 399
15018: DOUBLE
15019: LESSEQUAL
15020: IFTRUE 15024
15022: GO 15086
15024: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
15025: LD_VAR 0 1
15029: PPUSH
15030: LD_VAR 0 2
15034: PPUSH
15035: LD_VAR 0 3
15039: PPUSH
15040: LD_VAR 0 4
15044: PPUSH
15045: LD_VAR 0 5
15049: PPUSH
15050: LD_VAR 0 6
15054: PPUSH
15055: LD_VAR 0 7
15059: PPUSH
15060: LD_VAR 0 8
15064: PPUSH
15065: LD_VAR 0 9
15069: PPUSH
15070: LD_VAR 0 10
15074: PPUSH
15075: LD_VAR 0 11
15079: PPUSH
15080: CALL 63249 0 11
15084: GO 15087
15086: POP
// end ;
15087: PPOPN 11
15089: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
15090: LD_VAR 0 1
15094: PPUSH
15095: LD_VAR 0 2
15099: PPUSH
15100: LD_VAR 0 3
15104: PPUSH
15105: LD_VAR 0 4
15109: PPUSH
15110: LD_VAR 0 5
15114: PPUSH
15115: CALL 57967 0 5
// end ; end_of_file
15119: PPOPN 5
15121: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
15122: LD_INT 0
15124: PPUSH
15125: PPUSH
// if exist_mode then
15126: LD_VAR 0 2
15130: IFFALSE 15155
// unit := CreateCharacter ( prefix & ident ) else
15132: LD_ADDR_VAR 0 5
15136: PUSH
15137: LD_VAR 0 3
15141: PUSH
15142: LD_VAR 0 1
15146: STR
15147: PPUSH
15148: CALL_OW 34
15152: ST_TO_ADDR
15153: GO 15170
// unit := NewCharacter ( ident ) ;
15155: LD_ADDR_VAR 0 5
15159: PUSH
15160: LD_VAR 0 1
15164: PPUSH
15165: CALL_OW 25
15169: ST_TO_ADDR
// result := unit ;
15170: LD_ADDR_VAR 0 4
15174: PUSH
15175: LD_VAR 0 5
15179: ST_TO_ADDR
// end ;
15180: LD_VAR 0 4
15184: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
15185: LD_INT 0
15187: PPUSH
15188: PPUSH
// if not side or not nation then
15189: LD_VAR 0 1
15193: NOT
15194: PUSH
15195: LD_VAR 0 2
15199: NOT
15200: OR
15201: IFFALSE 15205
// exit ;
15203: GO 15973
// case nation of nation_american :
15205: LD_VAR 0 2
15209: PUSH
15210: LD_INT 1
15212: DOUBLE
15213: EQUAL
15214: IFTRUE 15218
15216: GO 15432
15218: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
15219: LD_ADDR_VAR 0 4
15223: PUSH
15224: LD_INT 35
15226: PUSH
15227: LD_INT 45
15229: PUSH
15230: LD_INT 46
15232: PUSH
15233: LD_INT 47
15235: PUSH
15236: LD_INT 82
15238: PUSH
15239: LD_INT 83
15241: PUSH
15242: LD_INT 84
15244: PUSH
15245: LD_INT 85
15247: PUSH
15248: LD_INT 86
15250: PUSH
15251: LD_INT 1
15253: PUSH
15254: LD_INT 2
15256: PUSH
15257: LD_INT 6
15259: PUSH
15260: LD_INT 15
15262: PUSH
15263: LD_INT 16
15265: PUSH
15266: LD_INT 7
15268: PUSH
15269: LD_INT 12
15271: PUSH
15272: LD_INT 13
15274: PUSH
15275: LD_INT 10
15277: PUSH
15278: LD_INT 14
15280: PUSH
15281: LD_INT 20
15283: PUSH
15284: LD_INT 21
15286: PUSH
15287: LD_INT 22
15289: PUSH
15290: LD_INT 25
15292: PUSH
15293: LD_INT 32
15295: PUSH
15296: LD_INT 27
15298: PUSH
15299: LD_INT 36
15301: PUSH
15302: LD_INT 69
15304: PUSH
15305: LD_INT 39
15307: PUSH
15308: LD_INT 34
15310: PUSH
15311: LD_INT 40
15313: PUSH
15314: LD_INT 48
15316: PUSH
15317: LD_INT 49
15319: PUSH
15320: LD_INT 50
15322: PUSH
15323: LD_INT 51
15325: PUSH
15326: LD_INT 52
15328: PUSH
15329: LD_INT 53
15331: PUSH
15332: LD_INT 54
15334: PUSH
15335: LD_INT 55
15337: PUSH
15338: LD_INT 56
15340: PUSH
15341: LD_INT 57
15343: PUSH
15344: LD_INT 58
15346: PUSH
15347: LD_INT 59
15349: PUSH
15350: LD_INT 60
15352: PUSH
15353: LD_INT 61
15355: PUSH
15356: LD_INT 62
15358: PUSH
15359: LD_INT 80
15361: PUSH
15362: LD_INT 82
15364: PUSH
15365: LD_INT 83
15367: PUSH
15368: LD_INT 84
15370: PUSH
15371: LD_INT 85
15373: PUSH
15374: LD_INT 86
15376: PUSH
15377: EMPTY
15378: LIST
15379: LIST
15380: LIST
15381: LIST
15382: LIST
15383: LIST
15384: LIST
15385: LIST
15386: LIST
15387: LIST
15388: LIST
15389: LIST
15390: LIST
15391: LIST
15392: LIST
15393: LIST
15394: LIST
15395: LIST
15396: LIST
15397: LIST
15398: LIST
15399: LIST
15400: LIST
15401: LIST
15402: LIST
15403: LIST
15404: LIST
15405: LIST
15406: LIST
15407: LIST
15408: LIST
15409: LIST
15410: LIST
15411: LIST
15412: LIST
15413: LIST
15414: LIST
15415: LIST
15416: LIST
15417: LIST
15418: LIST
15419: LIST
15420: LIST
15421: LIST
15422: LIST
15423: LIST
15424: LIST
15425: LIST
15426: LIST
15427: LIST
15428: LIST
15429: ST_TO_ADDR
15430: GO 15897
15432: LD_INT 2
15434: DOUBLE
15435: EQUAL
15436: IFTRUE 15440
15438: GO 15666
15440: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
15441: LD_ADDR_VAR 0 4
15445: PUSH
15446: LD_INT 35
15448: PUSH
15449: LD_INT 45
15451: PUSH
15452: LD_INT 46
15454: PUSH
15455: LD_INT 47
15457: PUSH
15458: LD_INT 82
15460: PUSH
15461: LD_INT 83
15463: PUSH
15464: LD_INT 84
15466: PUSH
15467: LD_INT 85
15469: PUSH
15470: LD_INT 87
15472: PUSH
15473: LD_INT 70
15475: PUSH
15476: LD_INT 1
15478: PUSH
15479: LD_INT 11
15481: PUSH
15482: LD_INT 3
15484: PUSH
15485: LD_INT 4
15487: PUSH
15488: LD_INT 5
15490: PUSH
15491: LD_INT 6
15493: PUSH
15494: LD_INT 15
15496: PUSH
15497: LD_INT 18
15499: PUSH
15500: LD_INT 7
15502: PUSH
15503: LD_INT 17
15505: PUSH
15506: LD_INT 8
15508: PUSH
15509: LD_INT 20
15511: PUSH
15512: LD_INT 21
15514: PUSH
15515: LD_INT 22
15517: PUSH
15518: LD_INT 72
15520: PUSH
15521: LD_INT 26
15523: PUSH
15524: LD_INT 69
15526: PUSH
15527: LD_INT 39
15529: PUSH
15530: LD_INT 40
15532: PUSH
15533: LD_INT 41
15535: PUSH
15536: LD_INT 42
15538: PUSH
15539: LD_INT 43
15541: PUSH
15542: LD_INT 48
15544: PUSH
15545: LD_INT 49
15547: PUSH
15548: LD_INT 50
15550: PUSH
15551: LD_INT 51
15553: PUSH
15554: LD_INT 52
15556: PUSH
15557: LD_INT 53
15559: PUSH
15560: LD_INT 54
15562: PUSH
15563: LD_INT 55
15565: PUSH
15566: LD_INT 56
15568: PUSH
15569: LD_INT 60
15571: PUSH
15572: LD_INT 61
15574: PUSH
15575: LD_INT 62
15577: PUSH
15578: LD_INT 66
15580: PUSH
15581: LD_INT 67
15583: PUSH
15584: LD_INT 68
15586: PUSH
15587: LD_INT 81
15589: PUSH
15590: LD_INT 82
15592: PUSH
15593: LD_INT 83
15595: PUSH
15596: LD_INT 84
15598: PUSH
15599: LD_INT 85
15601: PUSH
15602: LD_INT 87
15604: PUSH
15605: LD_INT 88
15607: PUSH
15608: EMPTY
15609: LIST
15610: LIST
15611: LIST
15612: LIST
15613: LIST
15614: LIST
15615: LIST
15616: LIST
15617: LIST
15618: LIST
15619: LIST
15620: LIST
15621: LIST
15622: LIST
15623: LIST
15624: LIST
15625: LIST
15626: LIST
15627: LIST
15628: LIST
15629: LIST
15630: LIST
15631: LIST
15632: LIST
15633: LIST
15634: LIST
15635: LIST
15636: LIST
15637: LIST
15638: LIST
15639: LIST
15640: LIST
15641: LIST
15642: LIST
15643: LIST
15644: LIST
15645: LIST
15646: LIST
15647: LIST
15648: LIST
15649: LIST
15650: LIST
15651: LIST
15652: LIST
15653: LIST
15654: LIST
15655: LIST
15656: LIST
15657: LIST
15658: LIST
15659: LIST
15660: LIST
15661: LIST
15662: LIST
15663: ST_TO_ADDR
15664: GO 15897
15666: LD_INT 3
15668: DOUBLE
15669: EQUAL
15670: IFTRUE 15674
15672: GO 15896
15674: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
15675: LD_ADDR_VAR 0 4
15679: PUSH
15680: LD_INT 46
15682: PUSH
15683: LD_INT 47
15685: PUSH
15686: LD_INT 1
15688: PUSH
15689: LD_INT 2
15691: PUSH
15692: LD_INT 82
15694: PUSH
15695: LD_INT 83
15697: PUSH
15698: LD_INT 84
15700: PUSH
15701: LD_INT 85
15703: PUSH
15704: LD_INT 86
15706: PUSH
15707: LD_INT 11
15709: PUSH
15710: LD_INT 9
15712: PUSH
15713: LD_INT 20
15715: PUSH
15716: LD_INT 19
15718: PUSH
15719: LD_INT 21
15721: PUSH
15722: LD_INT 24
15724: PUSH
15725: LD_INT 22
15727: PUSH
15728: LD_INT 25
15730: PUSH
15731: LD_INT 28
15733: PUSH
15734: LD_INT 29
15736: PUSH
15737: LD_INT 30
15739: PUSH
15740: LD_INT 31
15742: PUSH
15743: LD_INT 37
15745: PUSH
15746: LD_INT 38
15748: PUSH
15749: LD_INT 32
15751: PUSH
15752: LD_INT 27
15754: PUSH
15755: LD_INT 33
15757: PUSH
15758: LD_INT 69
15760: PUSH
15761: LD_INT 39
15763: PUSH
15764: LD_INT 34
15766: PUSH
15767: LD_INT 40
15769: PUSH
15770: LD_INT 71
15772: PUSH
15773: LD_INT 23
15775: PUSH
15776: LD_INT 44
15778: PUSH
15779: LD_INT 48
15781: PUSH
15782: LD_INT 49
15784: PUSH
15785: LD_INT 50
15787: PUSH
15788: LD_INT 51
15790: PUSH
15791: LD_INT 52
15793: PUSH
15794: LD_INT 53
15796: PUSH
15797: LD_INT 54
15799: PUSH
15800: LD_INT 55
15802: PUSH
15803: LD_INT 56
15805: PUSH
15806: LD_INT 57
15808: PUSH
15809: LD_INT 58
15811: PUSH
15812: LD_INT 59
15814: PUSH
15815: LD_INT 63
15817: PUSH
15818: LD_INT 64
15820: PUSH
15821: LD_INT 65
15823: PUSH
15824: LD_INT 82
15826: PUSH
15827: LD_INT 83
15829: PUSH
15830: LD_INT 84
15832: PUSH
15833: LD_INT 85
15835: PUSH
15836: LD_INT 86
15838: PUSH
15839: EMPTY
15840: LIST
15841: LIST
15842: LIST
15843: LIST
15844: LIST
15845: LIST
15846: LIST
15847: LIST
15848: LIST
15849: LIST
15850: LIST
15851: LIST
15852: LIST
15853: LIST
15854: LIST
15855: LIST
15856: LIST
15857: LIST
15858: LIST
15859: LIST
15860: LIST
15861: LIST
15862: LIST
15863: LIST
15864: LIST
15865: LIST
15866: LIST
15867: LIST
15868: LIST
15869: LIST
15870: LIST
15871: LIST
15872: LIST
15873: LIST
15874: LIST
15875: LIST
15876: LIST
15877: LIST
15878: LIST
15879: LIST
15880: LIST
15881: LIST
15882: LIST
15883: LIST
15884: LIST
15885: LIST
15886: LIST
15887: LIST
15888: LIST
15889: LIST
15890: LIST
15891: LIST
15892: LIST
15893: ST_TO_ADDR
15894: GO 15897
15896: POP
// if state > - 1 and state < 3 then
15897: LD_VAR 0 3
15901: PUSH
15902: LD_INT 1
15904: NEG
15905: GREATER
15906: PUSH
15907: LD_VAR 0 3
15911: PUSH
15912: LD_INT 3
15914: LESS
15915: AND
15916: IFFALSE 15973
// for i in result do
15918: LD_ADDR_VAR 0 5
15922: PUSH
15923: LD_VAR 0 4
15927: PUSH
15928: FOR_IN
15929: IFFALSE 15971
// if GetTech ( i , side ) <> state then
15931: LD_VAR 0 5
15935: PPUSH
15936: LD_VAR 0 1
15940: PPUSH
15941: CALL_OW 321
15945: PUSH
15946: LD_VAR 0 3
15950: NONEQUAL
15951: IFFALSE 15969
// result := result diff i ;
15953: LD_ADDR_VAR 0 4
15957: PUSH
15958: LD_VAR 0 4
15962: PUSH
15963: LD_VAR 0 5
15967: DIFF
15968: ST_TO_ADDR
15969: GO 15928
15971: POP
15972: POP
// end ;
15973: LD_VAR 0 4
15977: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
15978: LD_INT 0
15980: PPUSH
15981: PPUSH
15982: PPUSH
// result := true ;
15983: LD_ADDR_VAR 0 3
15987: PUSH
15988: LD_INT 1
15990: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
15991: LD_ADDR_VAR 0 5
15995: PUSH
15996: LD_VAR 0 2
16000: PPUSH
16001: CALL_OW 480
16005: ST_TO_ADDR
// if not tmp then
16006: LD_VAR 0 5
16010: NOT
16011: IFFALSE 16015
// exit ;
16013: GO 16064
// for i in tmp do
16015: LD_ADDR_VAR 0 4
16019: PUSH
16020: LD_VAR 0 5
16024: PUSH
16025: FOR_IN
16026: IFFALSE 16062
// if GetTech ( i , side ) <> state_researched then
16028: LD_VAR 0 4
16032: PPUSH
16033: LD_VAR 0 1
16037: PPUSH
16038: CALL_OW 321
16042: PUSH
16043: LD_INT 2
16045: NONEQUAL
16046: IFFALSE 16060
// begin result := false ;
16048: LD_ADDR_VAR 0 3
16052: PUSH
16053: LD_INT 0
16055: ST_TO_ADDR
// exit ;
16056: POP
16057: POP
16058: GO 16064
// end ;
16060: GO 16025
16062: POP
16063: POP
// end ;
16064: LD_VAR 0 3
16068: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
16069: LD_INT 0
16071: PPUSH
16072: PPUSH
16073: PPUSH
16074: PPUSH
16075: PPUSH
16076: PPUSH
16077: PPUSH
16078: PPUSH
16079: PPUSH
16080: PPUSH
16081: PPUSH
16082: PPUSH
16083: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
16084: LD_VAR 0 1
16088: NOT
16089: PUSH
16090: LD_VAR 0 1
16094: PPUSH
16095: CALL_OW 257
16099: PUSH
16100: LD_INT 9
16102: NONEQUAL
16103: OR
16104: IFFALSE 16108
// exit ;
16106: GO 16681
// side := GetSide ( unit ) ;
16108: LD_ADDR_VAR 0 9
16112: PUSH
16113: LD_VAR 0 1
16117: PPUSH
16118: CALL_OW 255
16122: ST_TO_ADDR
// tech_space := tech_spacanom ;
16123: LD_ADDR_VAR 0 12
16127: PUSH
16128: LD_INT 29
16130: ST_TO_ADDR
// tech_time := tech_taurad ;
16131: LD_ADDR_VAR 0 13
16135: PUSH
16136: LD_INT 28
16138: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
16139: LD_ADDR_VAR 0 11
16143: PUSH
16144: LD_VAR 0 1
16148: PPUSH
16149: CALL_OW 310
16153: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
16154: LD_VAR 0 11
16158: PPUSH
16159: CALL_OW 247
16163: PUSH
16164: LD_INT 2
16166: EQUAL
16167: IFFALSE 16171
// exit ;
16169: GO 16681
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16171: LD_ADDR_VAR 0 8
16175: PUSH
16176: LD_INT 81
16178: PUSH
16179: LD_VAR 0 9
16183: PUSH
16184: EMPTY
16185: LIST
16186: LIST
16187: PUSH
16188: LD_INT 3
16190: PUSH
16191: LD_INT 21
16193: PUSH
16194: LD_INT 3
16196: PUSH
16197: EMPTY
16198: LIST
16199: LIST
16200: PUSH
16201: EMPTY
16202: LIST
16203: LIST
16204: PUSH
16205: EMPTY
16206: LIST
16207: LIST
16208: PPUSH
16209: CALL_OW 69
16213: ST_TO_ADDR
// if not tmp then
16214: LD_VAR 0 8
16218: NOT
16219: IFFALSE 16223
// exit ;
16221: GO 16681
// if in_unit then
16223: LD_VAR 0 11
16227: IFFALSE 16251
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
16229: LD_ADDR_VAR 0 10
16233: PUSH
16234: LD_VAR 0 8
16238: PPUSH
16239: LD_VAR 0 11
16243: PPUSH
16244: CALL_OW 74
16248: ST_TO_ADDR
16249: GO 16271
// enemy := NearestUnitToUnit ( tmp , unit ) ;
16251: LD_ADDR_VAR 0 10
16255: PUSH
16256: LD_VAR 0 8
16260: PPUSH
16261: LD_VAR 0 1
16265: PPUSH
16266: CALL_OW 74
16270: ST_TO_ADDR
// if not enemy then
16271: LD_VAR 0 10
16275: NOT
16276: IFFALSE 16280
// exit ;
16278: GO 16681
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
16280: LD_VAR 0 11
16284: PUSH
16285: LD_VAR 0 11
16289: PPUSH
16290: LD_VAR 0 10
16294: PPUSH
16295: CALL_OW 296
16299: PUSH
16300: LD_INT 13
16302: GREATER
16303: AND
16304: PUSH
16305: LD_VAR 0 1
16309: PPUSH
16310: LD_VAR 0 10
16314: PPUSH
16315: CALL_OW 296
16319: PUSH
16320: LD_INT 12
16322: GREATER
16323: OR
16324: IFFALSE 16328
// exit ;
16326: GO 16681
// missile := [ 1 ] ;
16328: LD_ADDR_VAR 0 14
16332: PUSH
16333: LD_INT 1
16335: PUSH
16336: EMPTY
16337: LIST
16338: ST_TO_ADDR
// if Researched ( side , tech_space ) then
16339: LD_VAR 0 9
16343: PPUSH
16344: LD_VAR 0 12
16348: PPUSH
16349: CALL_OW 325
16353: IFFALSE 16382
// missile := Replace ( missile , missile + 1 , 2 ) ;
16355: LD_ADDR_VAR 0 14
16359: PUSH
16360: LD_VAR 0 14
16364: PPUSH
16365: LD_VAR 0 14
16369: PUSH
16370: LD_INT 1
16372: PLUS
16373: PPUSH
16374: LD_INT 2
16376: PPUSH
16377: CALL_OW 1
16381: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
16382: LD_VAR 0 9
16386: PPUSH
16387: LD_VAR 0 13
16391: PPUSH
16392: CALL_OW 325
16396: PUSH
16397: LD_VAR 0 10
16401: PPUSH
16402: CALL_OW 255
16406: PPUSH
16407: LD_VAR 0 13
16411: PPUSH
16412: CALL_OW 325
16416: NOT
16417: AND
16418: IFFALSE 16447
// missile := Replace ( missile , missile + 1 , 3 ) ;
16420: LD_ADDR_VAR 0 14
16424: PUSH
16425: LD_VAR 0 14
16429: PPUSH
16430: LD_VAR 0 14
16434: PUSH
16435: LD_INT 1
16437: PLUS
16438: PPUSH
16439: LD_INT 3
16441: PPUSH
16442: CALL_OW 1
16446: ST_TO_ADDR
// if missile < 2 then
16447: LD_VAR 0 14
16451: PUSH
16452: LD_INT 2
16454: LESS
16455: IFFALSE 16459
// exit ;
16457: GO 16681
// x := GetX ( enemy ) ;
16459: LD_ADDR_VAR 0 4
16463: PUSH
16464: LD_VAR 0 10
16468: PPUSH
16469: CALL_OW 250
16473: ST_TO_ADDR
// y := GetY ( enemy ) ;
16474: LD_ADDR_VAR 0 5
16478: PUSH
16479: LD_VAR 0 10
16483: PPUSH
16484: CALL_OW 251
16488: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
16489: LD_ADDR_VAR 0 6
16493: PUSH
16494: LD_VAR 0 4
16498: PUSH
16499: LD_INT 1
16501: NEG
16502: PPUSH
16503: LD_INT 1
16505: PPUSH
16506: CALL_OW 12
16510: PLUS
16511: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
16512: LD_ADDR_VAR 0 7
16516: PUSH
16517: LD_VAR 0 5
16521: PUSH
16522: LD_INT 1
16524: NEG
16525: PPUSH
16526: LD_INT 1
16528: PPUSH
16529: CALL_OW 12
16533: PLUS
16534: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
16535: LD_VAR 0 6
16539: PPUSH
16540: LD_VAR 0 7
16544: PPUSH
16545: CALL_OW 488
16549: NOT
16550: IFFALSE 16572
// begin _x := x ;
16552: LD_ADDR_VAR 0 6
16556: PUSH
16557: LD_VAR 0 4
16561: ST_TO_ADDR
// _y := y ;
16562: LD_ADDR_VAR 0 7
16566: PUSH
16567: LD_VAR 0 5
16571: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
16572: LD_ADDR_VAR 0 3
16576: PUSH
16577: LD_INT 1
16579: PPUSH
16580: LD_VAR 0 14
16584: PPUSH
16585: CALL_OW 12
16589: ST_TO_ADDR
// case i of 1 :
16590: LD_VAR 0 3
16594: PUSH
16595: LD_INT 1
16597: DOUBLE
16598: EQUAL
16599: IFTRUE 16603
16601: GO 16620
16603: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
16604: LD_VAR 0 1
16608: PPUSH
16609: LD_VAR 0 10
16613: PPUSH
16614: CALL_OW 115
16618: GO 16681
16620: LD_INT 2
16622: DOUBLE
16623: EQUAL
16624: IFTRUE 16628
16626: GO 16650
16628: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
16629: LD_VAR 0 1
16633: PPUSH
16634: LD_VAR 0 6
16638: PPUSH
16639: LD_VAR 0 7
16643: PPUSH
16644: CALL_OW 153
16648: GO 16681
16650: LD_INT 3
16652: DOUBLE
16653: EQUAL
16654: IFTRUE 16658
16656: GO 16680
16658: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
16659: LD_VAR 0 1
16663: PPUSH
16664: LD_VAR 0 6
16668: PPUSH
16669: LD_VAR 0 7
16673: PPUSH
16674: CALL_OW 154
16678: GO 16681
16680: POP
// end ;
16681: LD_VAR 0 2
16685: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
16686: LD_INT 0
16688: PPUSH
16689: PPUSH
16690: PPUSH
16691: PPUSH
16692: PPUSH
16693: PPUSH
// if not unit or not building then
16694: LD_VAR 0 1
16698: NOT
16699: PUSH
16700: LD_VAR 0 2
16704: NOT
16705: OR
16706: IFFALSE 16710
// exit ;
16708: GO 16868
// x := GetX ( building ) ;
16710: LD_ADDR_VAR 0 5
16714: PUSH
16715: LD_VAR 0 2
16719: PPUSH
16720: CALL_OW 250
16724: ST_TO_ADDR
// y := GetY ( building ) ;
16725: LD_ADDR_VAR 0 6
16729: PUSH
16730: LD_VAR 0 2
16734: PPUSH
16735: CALL_OW 251
16739: ST_TO_ADDR
// for i = 0 to 5 do
16740: LD_ADDR_VAR 0 4
16744: PUSH
16745: DOUBLE
16746: LD_INT 0
16748: DEC
16749: ST_TO_ADDR
16750: LD_INT 5
16752: PUSH
16753: FOR_TO
16754: IFFALSE 16866
// begin _x := ShiftX ( x , i , 3 ) ;
16756: LD_ADDR_VAR 0 7
16760: PUSH
16761: LD_VAR 0 5
16765: PPUSH
16766: LD_VAR 0 4
16770: PPUSH
16771: LD_INT 3
16773: PPUSH
16774: CALL_OW 272
16778: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
16779: LD_ADDR_VAR 0 8
16783: PUSH
16784: LD_VAR 0 6
16788: PPUSH
16789: LD_VAR 0 4
16793: PPUSH
16794: LD_INT 3
16796: PPUSH
16797: CALL_OW 273
16801: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
16802: LD_VAR 0 7
16806: PPUSH
16807: LD_VAR 0 8
16811: PPUSH
16812: CALL_OW 488
16816: NOT
16817: IFFALSE 16821
// continue ;
16819: GO 16753
// if HexInfo ( _x , _y ) = 0 then
16821: LD_VAR 0 7
16825: PPUSH
16826: LD_VAR 0 8
16830: PPUSH
16831: CALL_OW 428
16835: PUSH
16836: LD_INT 0
16838: EQUAL
16839: IFFALSE 16864
// begin ComMoveXY ( unit , _x , _y ) ;
16841: LD_VAR 0 1
16845: PPUSH
16846: LD_VAR 0 7
16850: PPUSH
16851: LD_VAR 0 8
16855: PPUSH
16856: CALL_OW 111
// exit ;
16860: POP
16861: POP
16862: GO 16868
// end ; end ;
16864: GO 16753
16866: POP
16867: POP
// end ;
16868: LD_VAR 0 3
16872: RET
// export function ScanBase ( side , base_area ) ; begin
16873: LD_INT 0
16875: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
16876: LD_ADDR_VAR 0 3
16880: PUSH
16881: LD_VAR 0 2
16885: PPUSH
16886: LD_INT 81
16888: PUSH
16889: LD_VAR 0 1
16893: PUSH
16894: EMPTY
16895: LIST
16896: LIST
16897: PPUSH
16898: CALL_OW 70
16902: ST_TO_ADDR
// end ;
16903: LD_VAR 0 3
16907: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
16908: LD_INT 0
16910: PPUSH
16911: PPUSH
16912: PPUSH
16913: PPUSH
// result := false ;
16914: LD_ADDR_VAR 0 2
16918: PUSH
16919: LD_INT 0
16921: ST_TO_ADDR
// side := GetSide ( unit ) ;
16922: LD_ADDR_VAR 0 3
16926: PUSH
16927: LD_VAR 0 1
16931: PPUSH
16932: CALL_OW 255
16936: ST_TO_ADDR
// nat := GetNation ( unit ) ;
16937: LD_ADDR_VAR 0 4
16941: PUSH
16942: LD_VAR 0 1
16946: PPUSH
16947: CALL_OW 248
16951: ST_TO_ADDR
// case nat of 1 :
16952: LD_VAR 0 4
16956: PUSH
16957: LD_INT 1
16959: DOUBLE
16960: EQUAL
16961: IFTRUE 16965
16963: GO 16976
16965: POP
// tech := tech_lassight ; 2 :
16966: LD_ADDR_VAR 0 5
16970: PUSH
16971: LD_INT 12
16973: ST_TO_ADDR
16974: GO 17015
16976: LD_INT 2
16978: DOUBLE
16979: EQUAL
16980: IFTRUE 16984
16982: GO 16995
16984: POP
// tech := tech_mortar ; 3 :
16985: LD_ADDR_VAR 0 5
16989: PUSH
16990: LD_INT 41
16992: ST_TO_ADDR
16993: GO 17015
16995: LD_INT 3
16997: DOUBLE
16998: EQUAL
16999: IFTRUE 17003
17001: GO 17014
17003: POP
// tech := tech_bazooka ; end ;
17004: LD_ADDR_VAR 0 5
17008: PUSH
17009: LD_INT 44
17011: ST_TO_ADDR
17012: GO 17015
17014: POP
// if Researched ( side , tech ) then
17015: LD_VAR 0 3
17019: PPUSH
17020: LD_VAR 0 5
17024: PPUSH
17025: CALL_OW 325
17029: IFFALSE 17056
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
17031: LD_ADDR_VAR 0 2
17035: PUSH
17036: LD_INT 5
17038: PUSH
17039: LD_INT 8
17041: PUSH
17042: LD_INT 9
17044: PUSH
17045: EMPTY
17046: LIST
17047: LIST
17048: LIST
17049: PUSH
17050: LD_VAR 0 4
17054: ARRAY
17055: ST_TO_ADDR
// end ;
17056: LD_VAR 0 2
17060: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
17061: LD_INT 0
17063: PPUSH
17064: PPUSH
17065: PPUSH
// if not mines then
17066: LD_VAR 0 2
17070: NOT
17071: IFFALSE 17075
// exit ;
17073: GO 17219
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17075: LD_ADDR_VAR 0 5
17079: PUSH
17080: LD_INT 81
17082: PUSH
17083: LD_VAR 0 1
17087: PUSH
17088: EMPTY
17089: LIST
17090: LIST
17091: PUSH
17092: LD_INT 3
17094: PUSH
17095: LD_INT 21
17097: PUSH
17098: LD_INT 3
17100: PUSH
17101: EMPTY
17102: LIST
17103: LIST
17104: PUSH
17105: EMPTY
17106: LIST
17107: LIST
17108: PUSH
17109: EMPTY
17110: LIST
17111: LIST
17112: PPUSH
17113: CALL_OW 69
17117: ST_TO_ADDR
// for i in mines do
17118: LD_ADDR_VAR 0 4
17122: PUSH
17123: LD_VAR 0 2
17127: PUSH
17128: FOR_IN
17129: IFFALSE 17217
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
17131: LD_VAR 0 4
17135: PUSH
17136: LD_INT 1
17138: ARRAY
17139: PPUSH
17140: LD_VAR 0 4
17144: PUSH
17145: LD_INT 2
17147: ARRAY
17148: PPUSH
17149: CALL_OW 458
17153: NOT
17154: IFFALSE 17158
// continue ;
17156: GO 17128
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
17158: LD_VAR 0 4
17162: PUSH
17163: LD_INT 1
17165: ARRAY
17166: PPUSH
17167: LD_VAR 0 4
17171: PUSH
17172: LD_INT 2
17174: ARRAY
17175: PPUSH
17176: CALL_OW 428
17180: PUSH
17181: LD_VAR 0 5
17185: IN
17186: IFFALSE 17215
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
17188: LD_VAR 0 4
17192: PUSH
17193: LD_INT 1
17195: ARRAY
17196: PPUSH
17197: LD_VAR 0 4
17201: PUSH
17202: LD_INT 2
17204: ARRAY
17205: PPUSH
17206: LD_VAR 0 1
17210: PPUSH
17211: CALL_OW 456
// end ;
17215: GO 17128
17217: POP
17218: POP
// end ;
17219: LD_VAR 0 3
17223: RET
// export function Count ( array ) ; begin
17224: LD_INT 0
17226: PPUSH
// result := array + 0 ;
17227: LD_ADDR_VAR 0 2
17231: PUSH
17232: LD_VAR 0 1
17236: PUSH
17237: LD_INT 0
17239: PLUS
17240: ST_TO_ADDR
// end ;
17241: LD_VAR 0 2
17245: RET
// export function IsEmpty ( building ) ; begin
17246: LD_INT 0
17248: PPUSH
// if not building then
17249: LD_VAR 0 1
17253: NOT
17254: IFFALSE 17258
// exit ;
17256: GO 17301
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
17258: LD_ADDR_VAR 0 2
17262: PUSH
17263: LD_VAR 0 1
17267: PUSH
17268: LD_INT 22
17270: PUSH
17271: LD_VAR 0 1
17275: PPUSH
17276: CALL_OW 255
17280: PUSH
17281: EMPTY
17282: LIST
17283: LIST
17284: PUSH
17285: LD_INT 58
17287: PUSH
17288: EMPTY
17289: LIST
17290: PUSH
17291: EMPTY
17292: LIST
17293: LIST
17294: PPUSH
17295: CALL_OW 69
17299: IN
17300: ST_TO_ADDR
// end ;
17301: LD_VAR 0 2
17305: RET
// export function IsNotFull ( building ) ; var places ; begin
17306: LD_INT 0
17308: PPUSH
17309: PPUSH
// if not building then
17310: LD_VAR 0 1
17314: NOT
17315: IFFALSE 17319
// exit ;
17317: GO 17347
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
17319: LD_ADDR_VAR 0 2
17323: PUSH
17324: LD_VAR 0 1
17328: PPUSH
17329: LD_INT 3
17331: PUSH
17332: LD_INT 62
17334: PUSH
17335: EMPTY
17336: LIST
17337: PUSH
17338: EMPTY
17339: LIST
17340: LIST
17341: PPUSH
17342: CALL_OW 72
17346: ST_TO_ADDR
// end ;
17347: LD_VAR 0 2
17351: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
17352: LD_INT 0
17354: PPUSH
17355: PPUSH
17356: PPUSH
17357: PPUSH
// tmp := [ ] ;
17358: LD_ADDR_VAR 0 3
17362: PUSH
17363: EMPTY
17364: ST_TO_ADDR
// list := [ ] ;
17365: LD_ADDR_VAR 0 5
17369: PUSH
17370: EMPTY
17371: ST_TO_ADDR
// for i = 16 to 25 do
17372: LD_ADDR_VAR 0 4
17376: PUSH
17377: DOUBLE
17378: LD_INT 16
17380: DEC
17381: ST_TO_ADDR
17382: LD_INT 25
17384: PUSH
17385: FOR_TO
17386: IFFALSE 17459
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
17388: LD_ADDR_VAR 0 3
17392: PUSH
17393: LD_VAR 0 3
17397: PUSH
17398: LD_INT 22
17400: PUSH
17401: LD_VAR 0 1
17405: PPUSH
17406: CALL_OW 255
17410: PUSH
17411: EMPTY
17412: LIST
17413: LIST
17414: PUSH
17415: LD_INT 91
17417: PUSH
17418: LD_VAR 0 1
17422: PUSH
17423: LD_INT 6
17425: PUSH
17426: EMPTY
17427: LIST
17428: LIST
17429: LIST
17430: PUSH
17431: LD_INT 30
17433: PUSH
17434: LD_VAR 0 4
17438: PUSH
17439: EMPTY
17440: LIST
17441: LIST
17442: PUSH
17443: EMPTY
17444: LIST
17445: LIST
17446: LIST
17447: PUSH
17448: EMPTY
17449: LIST
17450: PPUSH
17451: CALL_OW 69
17455: ADD
17456: ST_TO_ADDR
17457: GO 17385
17459: POP
17460: POP
// for i = 1 to tmp do
17461: LD_ADDR_VAR 0 4
17465: PUSH
17466: DOUBLE
17467: LD_INT 1
17469: DEC
17470: ST_TO_ADDR
17471: LD_VAR 0 3
17475: PUSH
17476: FOR_TO
17477: IFFALSE 17565
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
17479: LD_ADDR_VAR 0 5
17483: PUSH
17484: LD_VAR 0 5
17488: PUSH
17489: LD_VAR 0 3
17493: PUSH
17494: LD_VAR 0 4
17498: ARRAY
17499: PPUSH
17500: CALL_OW 266
17504: PUSH
17505: LD_VAR 0 3
17509: PUSH
17510: LD_VAR 0 4
17514: ARRAY
17515: PPUSH
17516: CALL_OW 250
17520: PUSH
17521: LD_VAR 0 3
17525: PUSH
17526: LD_VAR 0 4
17530: ARRAY
17531: PPUSH
17532: CALL_OW 251
17536: PUSH
17537: LD_VAR 0 3
17541: PUSH
17542: LD_VAR 0 4
17546: ARRAY
17547: PPUSH
17548: CALL_OW 254
17552: PUSH
17553: EMPTY
17554: LIST
17555: LIST
17556: LIST
17557: LIST
17558: PUSH
17559: EMPTY
17560: LIST
17561: ADD
17562: ST_TO_ADDR
17563: GO 17476
17565: POP
17566: POP
// result := list ;
17567: LD_ADDR_VAR 0 2
17571: PUSH
17572: LD_VAR 0 5
17576: ST_TO_ADDR
// end ;
17577: LD_VAR 0 2
17581: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
17582: LD_INT 0
17584: PPUSH
17585: PPUSH
17586: PPUSH
17587: PPUSH
17588: PPUSH
17589: PPUSH
17590: PPUSH
// if not factory then
17591: LD_VAR 0 1
17595: NOT
17596: IFFALSE 17600
// exit ;
17598: GO 18193
// if control = control_apeman then
17600: LD_VAR 0 4
17604: PUSH
17605: LD_INT 5
17607: EQUAL
17608: IFFALSE 17717
// begin tmp := UnitsInside ( factory ) ;
17610: LD_ADDR_VAR 0 8
17614: PUSH
17615: LD_VAR 0 1
17619: PPUSH
17620: CALL_OW 313
17624: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
17625: LD_VAR 0 8
17629: PPUSH
17630: LD_INT 25
17632: PUSH
17633: LD_INT 12
17635: PUSH
17636: EMPTY
17637: LIST
17638: LIST
17639: PPUSH
17640: CALL_OW 72
17644: NOT
17645: IFFALSE 17655
// control := control_manual ;
17647: LD_ADDR_VAR 0 4
17651: PUSH
17652: LD_INT 1
17654: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
17655: LD_ADDR_VAR 0 8
17659: PUSH
17660: LD_VAR 0 1
17664: PPUSH
17665: CALL 17352 0 1
17669: ST_TO_ADDR
// if tmp then
17670: LD_VAR 0 8
17674: IFFALSE 17717
// begin for i in tmp do
17676: LD_ADDR_VAR 0 7
17680: PUSH
17681: LD_VAR 0 8
17685: PUSH
17686: FOR_IN
17687: IFFALSE 17715
// if i [ 1 ] = b_ext_radio then
17689: LD_VAR 0 7
17693: PUSH
17694: LD_INT 1
17696: ARRAY
17697: PUSH
17698: LD_INT 22
17700: EQUAL
17701: IFFALSE 17713
// begin control := control_remote ;
17703: LD_ADDR_VAR 0 4
17707: PUSH
17708: LD_INT 2
17710: ST_TO_ADDR
// break ;
17711: GO 17715
// end ;
17713: GO 17686
17715: POP
17716: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
17717: LD_VAR 0 1
17721: PPUSH
17722: LD_VAR 0 2
17726: PPUSH
17727: LD_VAR 0 3
17731: PPUSH
17732: LD_VAR 0 4
17736: PPUSH
17737: LD_VAR 0 5
17741: PPUSH
17742: CALL_OW 448
17746: IFFALSE 17781
// begin result := [ chassis , engine , control , weapon ] ;
17748: LD_ADDR_VAR 0 6
17752: PUSH
17753: LD_VAR 0 2
17757: PUSH
17758: LD_VAR 0 3
17762: PUSH
17763: LD_VAR 0 4
17767: PUSH
17768: LD_VAR 0 5
17772: PUSH
17773: EMPTY
17774: LIST
17775: LIST
17776: LIST
17777: LIST
17778: ST_TO_ADDR
// exit ;
17779: GO 18193
// end ; _chassis := AvailableChassisList ( factory ) ;
17781: LD_ADDR_VAR 0 9
17785: PUSH
17786: LD_VAR 0 1
17790: PPUSH
17791: CALL_OW 475
17795: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
17796: LD_ADDR_VAR 0 11
17800: PUSH
17801: LD_VAR 0 1
17805: PPUSH
17806: CALL_OW 476
17810: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
17811: LD_ADDR_VAR 0 12
17815: PUSH
17816: LD_VAR 0 1
17820: PPUSH
17821: CALL_OW 477
17825: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
17826: LD_ADDR_VAR 0 10
17830: PUSH
17831: LD_VAR 0 1
17835: PPUSH
17836: CALL_OW 478
17840: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
17841: LD_VAR 0 9
17845: NOT
17846: PUSH
17847: LD_VAR 0 11
17851: NOT
17852: OR
17853: PUSH
17854: LD_VAR 0 12
17858: NOT
17859: OR
17860: PUSH
17861: LD_VAR 0 10
17865: NOT
17866: OR
17867: IFFALSE 17902
// begin result := [ chassis , engine , control , weapon ] ;
17869: LD_ADDR_VAR 0 6
17873: PUSH
17874: LD_VAR 0 2
17878: PUSH
17879: LD_VAR 0 3
17883: PUSH
17884: LD_VAR 0 4
17888: PUSH
17889: LD_VAR 0 5
17893: PUSH
17894: EMPTY
17895: LIST
17896: LIST
17897: LIST
17898: LIST
17899: ST_TO_ADDR
// exit ;
17900: GO 18193
// end ; if not chassis in _chassis then
17902: LD_VAR 0 2
17906: PUSH
17907: LD_VAR 0 9
17911: IN
17912: NOT
17913: IFFALSE 17939
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
17915: LD_ADDR_VAR 0 2
17919: PUSH
17920: LD_VAR 0 9
17924: PUSH
17925: LD_INT 1
17927: PPUSH
17928: LD_VAR 0 9
17932: PPUSH
17933: CALL_OW 12
17937: ARRAY
17938: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
17939: LD_VAR 0 2
17943: PPUSH
17944: LD_VAR 0 3
17948: PPUSH
17949: CALL 18198 0 2
17953: NOT
17954: IFFALSE 18013
// repeat engine := _engine [ 1 ] ;
17956: LD_ADDR_VAR 0 3
17960: PUSH
17961: LD_VAR 0 11
17965: PUSH
17966: LD_INT 1
17968: ARRAY
17969: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
17970: LD_ADDR_VAR 0 11
17974: PUSH
17975: LD_VAR 0 11
17979: PPUSH
17980: LD_INT 1
17982: PPUSH
17983: CALL_OW 3
17987: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
17988: LD_VAR 0 2
17992: PPUSH
17993: LD_VAR 0 3
17997: PPUSH
17998: CALL 18198 0 2
18002: PUSH
18003: LD_VAR 0 11
18007: PUSH
18008: EMPTY
18009: EQUAL
18010: OR
18011: IFFALSE 17956
// if not control in _control then
18013: LD_VAR 0 4
18017: PUSH
18018: LD_VAR 0 12
18022: IN
18023: NOT
18024: IFFALSE 18050
// control := _control [ rand ( 1 , _control ) ] ;
18026: LD_ADDR_VAR 0 4
18030: PUSH
18031: LD_VAR 0 12
18035: PUSH
18036: LD_INT 1
18038: PPUSH
18039: LD_VAR 0 12
18043: PPUSH
18044: CALL_OW 12
18048: ARRAY
18049: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
18050: LD_VAR 0 2
18054: PPUSH
18055: LD_VAR 0 5
18059: PPUSH
18060: CALL 18418 0 2
18064: NOT
18065: IFFALSE 18124
// repeat weapon := _weapon [ 1 ] ;
18067: LD_ADDR_VAR 0 5
18071: PUSH
18072: LD_VAR 0 10
18076: PUSH
18077: LD_INT 1
18079: ARRAY
18080: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
18081: LD_ADDR_VAR 0 10
18085: PUSH
18086: LD_VAR 0 10
18090: PPUSH
18091: LD_INT 1
18093: PPUSH
18094: CALL_OW 3
18098: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
18099: LD_VAR 0 2
18103: PPUSH
18104: LD_VAR 0 5
18108: PPUSH
18109: CALL 18418 0 2
18113: PUSH
18114: LD_VAR 0 10
18118: PUSH
18119: EMPTY
18120: EQUAL
18121: OR
18122: IFFALSE 18067
// result := [ ] ;
18124: LD_ADDR_VAR 0 6
18128: PUSH
18129: EMPTY
18130: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
18131: LD_VAR 0 1
18135: PPUSH
18136: LD_VAR 0 2
18140: PPUSH
18141: LD_VAR 0 3
18145: PPUSH
18146: LD_VAR 0 4
18150: PPUSH
18151: LD_VAR 0 5
18155: PPUSH
18156: CALL_OW 448
18160: IFFALSE 18193
// result := [ chassis , engine , control , weapon ] ;
18162: LD_ADDR_VAR 0 6
18166: PUSH
18167: LD_VAR 0 2
18171: PUSH
18172: LD_VAR 0 3
18176: PUSH
18177: LD_VAR 0 4
18181: PUSH
18182: LD_VAR 0 5
18186: PUSH
18187: EMPTY
18188: LIST
18189: LIST
18190: LIST
18191: LIST
18192: ST_TO_ADDR
// end ;
18193: LD_VAR 0 6
18197: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
18198: LD_INT 0
18200: PPUSH
// if not chassis or not engine then
18201: LD_VAR 0 1
18205: NOT
18206: PUSH
18207: LD_VAR 0 2
18211: NOT
18212: OR
18213: IFFALSE 18217
// exit ;
18215: GO 18413
// case engine of engine_solar :
18217: LD_VAR 0 2
18221: PUSH
18222: LD_INT 2
18224: DOUBLE
18225: EQUAL
18226: IFTRUE 18230
18228: GO 18268
18230: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
18231: LD_ADDR_VAR 0 3
18235: PUSH
18236: LD_INT 11
18238: PUSH
18239: LD_INT 12
18241: PUSH
18242: LD_INT 13
18244: PUSH
18245: LD_INT 14
18247: PUSH
18248: LD_INT 1
18250: PUSH
18251: LD_INT 2
18253: PUSH
18254: LD_INT 3
18256: PUSH
18257: EMPTY
18258: LIST
18259: LIST
18260: LIST
18261: LIST
18262: LIST
18263: LIST
18264: LIST
18265: ST_TO_ADDR
18266: GO 18397
18268: LD_INT 1
18270: DOUBLE
18271: EQUAL
18272: IFTRUE 18276
18274: GO 18338
18276: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
18277: LD_ADDR_VAR 0 3
18281: PUSH
18282: LD_INT 11
18284: PUSH
18285: LD_INT 12
18287: PUSH
18288: LD_INT 13
18290: PUSH
18291: LD_INT 14
18293: PUSH
18294: LD_INT 1
18296: PUSH
18297: LD_INT 2
18299: PUSH
18300: LD_INT 3
18302: PUSH
18303: LD_INT 4
18305: PUSH
18306: LD_INT 5
18308: PUSH
18309: LD_INT 21
18311: PUSH
18312: LD_INT 23
18314: PUSH
18315: LD_INT 22
18317: PUSH
18318: LD_INT 24
18320: PUSH
18321: EMPTY
18322: LIST
18323: LIST
18324: LIST
18325: LIST
18326: LIST
18327: LIST
18328: LIST
18329: LIST
18330: LIST
18331: LIST
18332: LIST
18333: LIST
18334: LIST
18335: ST_TO_ADDR
18336: GO 18397
18338: LD_INT 3
18340: DOUBLE
18341: EQUAL
18342: IFTRUE 18346
18344: GO 18396
18346: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
18347: LD_ADDR_VAR 0 3
18351: PUSH
18352: LD_INT 13
18354: PUSH
18355: LD_INT 14
18357: PUSH
18358: LD_INT 2
18360: PUSH
18361: LD_INT 3
18363: PUSH
18364: LD_INT 4
18366: PUSH
18367: LD_INT 5
18369: PUSH
18370: LD_INT 21
18372: PUSH
18373: LD_INT 22
18375: PUSH
18376: LD_INT 23
18378: PUSH
18379: LD_INT 24
18381: PUSH
18382: EMPTY
18383: LIST
18384: LIST
18385: LIST
18386: LIST
18387: LIST
18388: LIST
18389: LIST
18390: LIST
18391: LIST
18392: LIST
18393: ST_TO_ADDR
18394: GO 18397
18396: POP
// result := ( chassis in result ) ;
18397: LD_ADDR_VAR 0 3
18401: PUSH
18402: LD_VAR 0 1
18406: PUSH
18407: LD_VAR 0 3
18411: IN
18412: ST_TO_ADDR
// end ;
18413: LD_VAR 0 3
18417: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
18418: LD_INT 0
18420: PPUSH
// if not chassis or not weapon then
18421: LD_VAR 0 1
18425: NOT
18426: PUSH
18427: LD_VAR 0 2
18431: NOT
18432: OR
18433: IFFALSE 18437
// exit ;
18435: GO 19497
// case weapon of us_machine_gun :
18437: LD_VAR 0 2
18441: PUSH
18442: LD_INT 2
18444: DOUBLE
18445: EQUAL
18446: IFTRUE 18450
18448: GO 18480
18450: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
18451: LD_ADDR_VAR 0 3
18455: PUSH
18456: LD_INT 1
18458: PUSH
18459: LD_INT 2
18461: PUSH
18462: LD_INT 3
18464: PUSH
18465: LD_INT 4
18467: PUSH
18468: LD_INT 5
18470: PUSH
18471: EMPTY
18472: LIST
18473: LIST
18474: LIST
18475: LIST
18476: LIST
18477: ST_TO_ADDR
18478: GO 19481
18480: LD_INT 3
18482: DOUBLE
18483: EQUAL
18484: IFTRUE 18488
18486: GO 18518
18488: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
18489: LD_ADDR_VAR 0 3
18493: PUSH
18494: LD_INT 1
18496: PUSH
18497: LD_INT 2
18499: PUSH
18500: LD_INT 3
18502: PUSH
18503: LD_INT 4
18505: PUSH
18506: LD_INT 5
18508: PUSH
18509: EMPTY
18510: LIST
18511: LIST
18512: LIST
18513: LIST
18514: LIST
18515: ST_TO_ADDR
18516: GO 19481
18518: LD_INT 11
18520: DOUBLE
18521: EQUAL
18522: IFTRUE 18526
18524: GO 18556
18526: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
18527: LD_ADDR_VAR 0 3
18531: PUSH
18532: LD_INT 1
18534: PUSH
18535: LD_INT 2
18537: PUSH
18538: LD_INT 3
18540: PUSH
18541: LD_INT 4
18543: PUSH
18544: LD_INT 5
18546: PUSH
18547: EMPTY
18548: LIST
18549: LIST
18550: LIST
18551: LIST
18552: LIST
18553: ST_TO_ADDR
18554: GO 19481
18556: LD_INT 4
18558: DOUBLE
18559: EQUAL
18560: IFTRUE 18564
18562: GO 18590
18564: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
18565: LD_ADDR_VAR 0 3
18569: PUSH
18570: LD_INT 2
18572: PUSH
18573: LD_INT 3
18575: PUSH
18576: LD_INT 4
18578: PUSH
18579: LD_INT 5
18581: PUSH
18582: EMPTY
18583: LIST
18584: LIST
18585: LIST
18586: LIST
18587: ST_TO_ADDR
18588: GO 19481
18590: LD_INT 5
18592: DOUBLE
18593: EQUAL
18594: IFTRUE 18598
18596: GO 18624
18598: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
18599: LD_ADDR_VAR 0 3
18603: PUSH
18604: LD_INT 2
18606: PUSH
18607: LD_INT 3
18609: PUSH
18610: LD_INT 4
18612: PUSH
18613: LD_INT 5
18615: PUSH
18616: EMPTY
18617: LIST
18618: LIST
18619: LIST
18620: LIST
18621: ST_TO_ADDR
18622: GO 19481
18624: LD_INT 9
18626: DOUBLE
18627: EQUAL
18628: IFTRUE 18632
18630: GO 18658
18632: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
18633: LD_ADDR_VAR 0 3
18637: PUSH
18638: LD_INT 2
18640: PUSH
18641: LD_INT 3
18643: PUSH
18644: LD_INT 4
18646: PUSH
18647: LD_INT 5
18649: PUSH
18650: EMPTY
18651: LIST
18652: LIST
18653: LIST
18654: LIST
18655: ST_TO_ADDR
18656: GO 19481
18658: LD_INT 7
18660: DOUBLE
18661: EQUAL
18662: IFTRUE 18666
18664: GO 18692
18666: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
18667: LD_ADDR_VAR 0 3
18671: PUSH
18672: LD_INT 2
18674: PUSH
18675: LD_INT 3
18677: PUSH
18678: LD_INT 4
18680: PUSH
18681: LD_INT 5
18683: PUSH
18684: EMPTY
18685: LIST
18686: LIST
18687: LIST
18688: LIST
18689: ST_TO_ADDR
18690: GO 19481
18692: LD_INT 12
18694: DOUBLE
18695: EQUAL
18696: IFTRUE 18700
18698: GO 18726
18700: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
18701: LD_ADDR_VAR 0 3
18705: PUSH
18706: LD_INT 2
18708: PUSH
18709: LD_INT 3
18711: PUSH
18712: LD_INT 4
18714: PUSH
18715: LD_INT 5
18717: PUSH
18718: EMPTY
18719: LIST
18720: LIST
18721: LIST
18722: LIST
18723: ST_TO_ADDR
18724: GO 19481
18726: LD_INT 13
18728: DOUBLE
18729: EQUAL
18730: IFTRUE 18734
18732: GO 18760
18734: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
18735: LD_ADDR_VAR 0 3
18739: PUSH
18740: LD_INT 2
18742: PUSH
18743: LD_INT 3
18745: PUSH
18746: LD_INT 4
18748: PUSH
18749: LD_INT 5
18751: PUSH
18752: EMPTY
18753: LIST
18754: LIST
18755: LIST
18756: LIST
18757: ST_TO_ADDR
18758: GO 19481
18760: LD_INT 14
18762: DOUBLE
18763: EQUAL
18764: IFTRUE 18768
18766: GO 18786
18768: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
18769: LD_ADDR_VAR 0 3
18773: PUSH
18774: LD_INT 4
18776: PUSH
18777: LD_INT 5
18779: PUSH
18780: EMPTY
18781: LIST
18782: LIST
18783: ST_TO_ADDR
18784: GO 19481
18786: LD_INT 6
18788: DOUBLE
18789: EQUAL
18790: IFTRUE 18794
18792: GO 18812
18794: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
18795: LD_ADDR_VAR 0 3
18799: PUSH
18800: LD_INT 4
18802: PUSH
18803: LD_INT 5
18805: PUSH
18806: EMPTY
18807: LIST
18808: LIST
18809: ST_TO_ADDR
18810: GO 19481
18812: LD_INT 10
18814: DOUBLE
18815: EQUAL
18816: IFTRUE 18820
18818: GO 18838
18820: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
18821: LD_ADDR_VAR 0 3
18825: PUSH
18826: LD_INT 4
18828: PUSH
18829: LD_INT 5
18831: PUSH
18832: EMPTY
18833: LIST
18834: LIST
18835: ST_TO_ADDR
18836: GO 19481
18838: LD_INT 22
18840: DOUBLE
18841: EQUAL
18842: IFTRUE 18846
18844: GO 18872
18846: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
18847: LD_ADDR_VAR 0 3
18851: PUSH
18852: LD_INT 11
18854: PUSH
18855: LD_INT 12
18857: PUSH
18858: LD_INT 13
18860: PUSH
18861: LD_INT 14
18863: PUSH
18864: EMPTY
18865: LIST
18866: LIST
18867: LIST
18868: LIST
18869: ST_TO_ADDR
18870: GO 19481
18872: LD_INT 23
18874: DOUBLE
18875: EQUAL
18876: IFTRUE 18880
18878: GO 18906
18880: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
18881: LD_ADDR_VAR 0 3
18885: PUSH
18886: LD_INT 11
18888: PUSH
18889: LD_INT 12
18891: PUSH
18892: LD_INT 13
18894: PUSH
18895: LD_INT 14
18897: PUSH
18898: EMPTY
18899: LIST
18900: LIST
18901: LIST
18902: LIST
18903: ST_TO_ADDR
18904: GO 19481
18906: LD_INT 24
18908: DOUBLE
18909: EQUAL
18910: IFTRUE 18914
18912: GO 18940
18914: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
18915: LD_ADDR_VAR 0 3
18919: PUSH
18920: LD_INT 11
18922: PUSH
18923: LD_INT 12
18925: PUSH
18926: LD_INT 13
18928: PUSH
18929: LD_INT 14
18931: PUSH
18932: EMPTY
18933: LIST
18934: LIST
18935: LIST
18936: LIST
18937: ST_TO_ADDR
18938: GO 19481
18940: LD_INT 30
18942: DOUBLE
18943: EQUAL
18944: IFTRUE 18948
18946: GO 18974
18948: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
18949: LD_ADDR_VAR 0 3
18953: PUSH
18954: LD_INT 11
18956: PUSH
18957: LD_INT 12
18959: PUSH
18960: LD_INT 13
18962: PUSH
18963: LD_INT 14
18965: PUSH
18966: EMPTY
18967: LIST
18968: LIST
18969: LIST
18970: LIST
18971: ST_TO_ADDR
18972: GO 19481
18974: LD_INT 25
18976: DOUBLE
18977: EQUAL
18978: IFTRUE 18982
18980: GO 19000
18982: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
18983: LD_ADDR_VAR 0 3
18987: PUSH
18988: LD_INT 13
18990: PUSH
18991: LD_INT 14
18993: PUSH
18994: EMPTY
18995: LIST
18996: LIST
18997: ST_TO_ADDR
18998: GO 19481
19000: LD_INT 27
19002: DOUBLE
19003: EQUAL
19004: IFTRUE 19008
19006: GO 19026
19008: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
19009: LD_ADDR_VAR 0 3
19013: PUSH
19014: LD_INT 13
19016: PUSH
19017: LD_INT 14
19019: PUSH
19020: EMPTY
19021: LIST
19022: LIST
19023: ST_TO_ADDR
19024: GO 19481
19026: LD_INT 92
19028: DOUBLE
19029: EQUAL
19030: IFTRUE 19034
19032: GO 19060
19034: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
19035: LD_ADDR_VAR 0 3
19039: PUSH
19040: LD_INT 11
19042: PUSH
19043: LD_INT 12
19045: PUSH
19046: LD_INT 13
19048: PUSH
19049: LD_INT 14
19051: PUSH
19052: EMPTY
19053: LIST
19054: LIST
19055: LIST
19056: LIST
19057: ST_TO_ADDR
19058: GO 19481
19060: LD_INT 28
19062: DOUBLE
19063: EQUAL
19064: IFTRUE 19068
19066: GO 19086
19068: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
19069: LD_ADDR_VAR 0 3
19073: PUSH
19074: LD_INT 13
19076: PUSH
19077: LD_INT 14
19079: PUSH
19080: EMPTY
19081: LIST
19082: LIST
19083: ST_TO_ADDR
19084: GO 19481
19086: LD_INT 29
19088: DOUBLE
19089: EQUAL
19090: IFTRUE 19094
19092: GO 19112
19094: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
19095: LD_ADDR_VAR 0 3
19099: PUSH
19100: LD_INT 13
19102: PUSH
19103: LD_INT 14
19105: PUSH
19106: EMPTY
19107: LIST
19108: LIST
19109: ST_TO_ADDR
19110: GO 19481
19112: LD_INT 31
19114: DOUBLE
19115: EQUAL
19116: IFTRUE 19120
19118: GO 19138
19120: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
19121: LD_ADDR_VAR 0 3
19125: PUSH
19126: LD_INT 13
19128: PUSH
19129: LD_INT 14
19131: PUSH
19132: EMPTY
19133: LIST
19134: LIST
19135: ST_TO_ADDR
19136: GO 19481
19138: LD_INT 26
19140: DOUBLE
19141: EQUAL
19142: IFTRUE 19146
19144: GO 19164
19146: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
19147: LD_ADDR_VAR 0 3
19151: PUSH
19152: LD_INT 13
19154: PUSH
19155: LD_INT 14
19157: PUSH
19158: EMPTY
19159: LIST
19160: LIST
19161: ST_TO_ADDR
19162: GO 19481
19164: LD_INT 42
19166: DOUBLE
19167: EQUAL
19168: IFTRUE 19172
19170: GO 19198
19172: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
19173: LD_ADDR_VAR 0 3
19177: PUSH
19178: LD_INT 21
19180: PUSH
19181: LD_INT 22
19183: PUSH
19184: LD_INT 23
19186: PUSH
19187: LD_INT 24
19189: PUSH
19190: EMPTY
19191: LIST
19192: LIST
19193: LIST
19194: LIST
19195: ST_TO_ADDR
19196: GO 19481
19198: LD_INT 43
19200: DOUBLE
19201: EQUAL
19202: IFTRUE 19206
19204: GO 19232
19206: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
19207: LD_ADDR_VAR 0 3
19211: PUSH
19212: LD_INT 21
19214: PUSH
19215: LD_INT 22
19217: PUSH
19218: LD_INT 23
19220: PUSH
19221: LD_INT 24
19223: PUSH
19224: EMPTY
19225: LIST
19226: LIST
19227: LIST
19228: LIST
19229: ST_TO_ADDR
19230: GO 19481
19232: LD_INT 44
19234: DOUBLE
19235: EQUAL
19236: IFTRUE 19240
19238: GO 19266
19240: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
19241: LD_ADDR_VAR 0 3
19245: PUSH
19246: LD_INT 21
19248: PUSH
19249: LD_INT 22
19251: PUSH
19252: LD_INT 23
19254: PUSH
19255: LD_INT 24
19257: PUSH
19258: EMPTY
19259: LIST
19260: LIST
19261: LIST
19262: LIST
19263: ST_TO_ADDR
19264: GO 19481
19266: LD_INT 45
19268: DOUBLE
19269: EQUAL
19270: IFTRUE 19274
19272: GO 19300
19274: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
19275: LD_ADDR_VAR 0 3
19279: PUSH
19280: LD_INT 21
19282: PUSH
19283: LD_INT 22
19285: PUSH
19286: LD_INT 23
19288: PUSH
19289: LD_INT 24
19291: PUSH
19292: EMPTY
19293: LIST
19294: LIST
19295: LIST
19296: LIST
19297: ST_TO_ADDR
19298: GO 19481
19300: LD_INT 49
19302: DOUBLE
19303: EQUAL
19304: IFTRUE 19308
19306: GO 19334
19308: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
19309: LD_ADDR_VAR 0 3
19313: PUSH
19314: LD_INT 21
19316: PUSH
19317: LD_INT 22
19319: PUSH
19320: LD_INT 23
19322: PUSH
19323: LD_INT 24
19325: PUSH
19326: EMPTY
19327: LIST
19328: LIST
19329: LIST
19330: LIST
19331: ST_TO_ADDR
19332: GO 19481
19334: LD_INT 51
19336: DOUBLE
19337: EQUAL
19338: IFTRUE 19342
19340: GO 19368
19342: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
19343: LD_ADDR_VAR 0 3
19347: PUSH
19348: LD_INT 21
19350: PUSH
19351: LD_INT 22
19353: PUSH
19354: LD_INT 23
19356: PUSH
19357: LD_INT 24
19359: PUSH
19360: EMPTY
19361: LIST
19362: LIST
19363: LIST
19364: LIST
19365: ST_TO_ADDR
19366: GO 19481
19368: LD_INT 52
19370: DOUBLE
19371: EQUAL
19372: IFTRUE 19376
19374: GO 19402
19376: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
19377: LD_ADDR_VAR 0 3
19381: PUSH
19382: LD_INT 21
19384: PUSH
19385: LD_INT 22
19387: PUSH
19388: LD_INT 23
19390: PUSH
19391: LD_INT 24
19393: PUSH
19394: EMPTY
19395: LIST
19396: LIST
19397: LIST
19398: LIST
19399: ST_TO_ADDR
19400: GO 19481
19402: LD_INT 53
19404: DOUBLE
19405: EQUAL
19406: IFTRUE 19410
19408: GO 19428
19410: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
19411: LD_ADDR_VAR 0 3
19415: PUSH
19416: LD_INT 23
19418: PUSH
19419: LD_INT 24
19421: PUSH
19422: EMPTY
19423: LIST
19424: LIST
19425: ST_TO_ADDR
19426: GO 19481
19428: LD_INT 46
19430: DOUBLE
19431: EQUAL
19432: IFTRUE 19436
19434: GO 19454
19436: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
19437: LD_ADDR_VAR 0 3
19441: PUSH
19442: LD_INT 23
19444: PUSH
19445: LD_INT 24
19447: PUSH
19448: EMPTY
19449: LIST
19450: LIST
19451: ST_TO_ADDR
19452: GO 19481
19454: LD_INT 47
19456: DOUBLE
19457: EQUAL
19458: IFTRUE 19462
19460: GO 19480
19462: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
19463: LD_ADDR_VAR 0 3
19467: PUSH
19468: LD_INT 23
19470: PUSH
19471: LD_INT 24
19473: PUSH
19474: EMPTY
19475: LIST
19476: LIST
19477: ST_TO_ADDR
19478: GO 19481
19480: POP
// result := ( chassis in result ) ;
19481: LD_ADDR_VAR 0 3
19485: PUSH
19486: LD_VAR 0 1
19490: PUSH
19491: LD_VAR 0 3
19495: IN
19496: ST_TO_ADDR
// end ;
19497: LD_VAR 0 3
19501: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
19502: LD_INT 0
19504: PPUSH
19505: PPUSH
19506: PPUSH
19507: PPUSH
19508: PPUSH
19509: PPUSH
19510: PPUSH
// result := array ;
19511: LD_ADDR_VAR 0 5
19515: PUSH
19516: LD_VAR 0 1
19520: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
19521: LD_VAR 0 1
19525: NOT
19526: PUSH
19527: LD_VAR 0 2
19531: NOT
19532: OR
19533: PUSH
19534: LD_VAR 0 3
19538: NOT
19539: OR
19540: PUSH
19541: LD_VAR 0 2
19545: PUSH
19546: LD_VAR 0 1
19550: GREATER
19551: OR
19552: PUSH
19553: LD_VAR 0 3
19557: PUSH
19558: LD_VAR 0 1
19562: GREATER
19563: OR
19564: IFFALSE 19568
// exit ;
19566: GO 19864
// if direction then
19568: LD_VAR 0 4
19572: IFFALSE 19636
// begin d := 1 ;
19574: LD_ADDR_VAR 0 9
19578: PUSH
19579: LD_INT 1
19581: ST_TO_ADDR
// if i_from > i_to then
19582: LD_VAR 0 2
19586: PUSH
19587: LD_VAR 0 3
19591: GREATER
19592: IFFALSE 19618
// length := ( array - i_from ) + i_to else
19594: LD_ADDR_VAR 0 11
19598: PUSH
19599: LD_VAR 0 1
19603: PUSH
19604: LD_VAR 0 2
19608: MINUS
19609: PUSH
19610: LD_VAR 0 3
19614: PLUS
19615: ST_TO_ADDR
19616: GO 19634
// length := i_to - i_from ;
19618: LD_ADDR_VAR 0 11
19622: PUSH
19623: LD_VAR 0 3
19627: PUSH
19628: LD_VAR 0 2
19632: MINUS
19633: ST_TO_ADDR
// end else
19634: GO 19697
// begin d := - 1 ;
19636: LD_ADDR_VAR 0 9
19640: PUSH
19641: LD_INT 1
19643: NEG
19644: ST_TO_ADDR
// if i_from > i_to then
19645: LD_VAR 0 2
19649: PUSH
19650: LD_VAR 0 3
19654: GREATER
19655: IFFALSE 19675
// length := i_from - i_to else
19657: LD_ADDR_VAR 0 11
19661: PUSH
19662: LD_VAR 0 2
19666: PUSH
19667: LD_VAR 0 3
19671: MINUS
19672: ST_TO_ADDR
19673: GO 19697
// length := ( array - i_to ) + i_from ;
19675: LD_ADDR_VAR 0 11
19679: PUSH
19680: LD_VAR 0 1
19684: PUSH
19685: LD_VAR 0 3
19689: MINUS
19690: PUSH
19691: LD_VAR 0 2
19695: PLUS
19696: ST_TO_ADDR
// end ; if not length then
19697: LD_VAR 0 11
19701: NOT
19702: IFFALSE 19706
// exit ;
19704: GO 19864
// tmp := array ;
19706: LD_ADDR_VAR 0 10
19710: PUSH
19711: LD_VAR 0 1
19715: ST_TO_ADDR
// for i = 1 to length do
19716: LD_ADDR_VAR 0 6
19720: PUSH
19721: DOUBLE
19722: LD_INT 1
19724: DEC
19725: ST_TO_ADDR
19726: LD_VAR 0 11
19730: PUSH
19731: FOR_TO
19732: IFFALSE 19852
// begin for j = 1 to array do
19734: LD_ADDR_VAR 0 7
19738: PUSH
19739: DOUBLE
19740: LD_INT 1
19742: DEC
19743: ST_TO_ADDR
19744: LD_VAR 0 1
19748: PUSH
19749: FOR_TO
19750: IFFALSE 19838
// begin k := j + d ;
19752: LD_ADDR_VAR 0 8
19756: PUSH
19757: LD_VAR 0 7
19761: PUSH
19762: LD_VAR 0 9
19766: PLUS
19767: ST_TO_ADDR
// if k > array then
19768: LD_VAR 0 8
19772: PUSH
19773: LD_VAR 0 1
19777: GREATER
19778: IFFALSE 19788
// k := 1 ;
19780: LD_ADDR_VAR 0 8
19784: PUSH
19785: LD_INT 1
19787: ST_TO_ADDR
// if not k then
19788: LD_VAR 0 8
19792: NOT
19793: IFFALSE 19805
// k := array ;
19795: LD_ADDR_VAR 0 8
19799: PUSH
19800: LD_VAR 0 1
19804: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
19805: LD_ADDR_VAR 0 10
19809: PUSH
19810: LD_VAR 0 10
19814: PPUSH
19815: LD_VAR 0 8
19819: PPUSH
19820: LD_VAR 0 1
19824: PUSH
19825: LD_VAR 0 7
19829: ARRAY
19830: PPUSH
19831: CALL_OW 1
19835: ST_TO_ADDR
// end ;
19836: GO 19749
19838: POP
19839: POP
// array := tmp ;
19840: LD_ADDR_VAR 0 1
19844: PUSH
19845: LD_VAR 0 10
19849: ST_TO_ADDR
// end ;
19850: GO 19731
19852: POP
19853: POP
// result := array ;
19854: LD_ADDR_VAR 0 5
19858: PUSH
19859: LD_VAR 0 1
19863: ST_TO_ADDR
// end ;
19864: LD_VAR 0 5
19868: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
19869: LD_INT 0
19871: PPUSH
19872: PPUSH
// result := 0 ;
19873: LD_ADDR_VAR 0 3
19877: PUSH
19878: LD_INT 0
19880: ST_TO_ADDR
// if not array or not value in array then
19881: LD_VAR 0 1
19885: NOT
19886: PUSH
19887: LD_VAR 0 2
19891: PUSH
19892: LD_VAR 0 1
19896: IN
19897: NOT
19898: OR
19899: IFFALSE 19903
// exit ;
19901: GO 19957
// for i = 1 to array do
19903: LD_ADDR_VAR 0 4
19907: PUSH
19908: DOUBLE
19909: LD_INT 1
19911: DEC
19912: ST_TO_ADDR
19913: LD_VAR 0 1
19917: PUSH
19918: FOR_TO
19919: IFFALSE 19955
// if value = array [ i ] then
19921: LD_VAR 0 2
19925: PUSH
19926: LD_VAR 0 1
19930: PUSH
19931: LD_VAR 0 4
19935: ARRAY
19936: EQUAL
19937: IFFALSE 19953
// begin result := i ;
19939: LD_ADDR_VAR 0 3
19943: PUSH
19944: LD_VAR 0 4
19948: ST_TO_ADDR
// exit ;
19949: POP
19950: POP
19951: GO 19957
// end ;
19953: GO 19918
19955: POP
19956: POP
// end ;
19957: LD_VAR 0 3
19961: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
19962: LD_INT 0
19964: PPUSH
// vc_chassis := chassis ;
19965: LD_ADDR_OWVAR 37
19969: PUSH
19970: LD_VAR 0 1
19974: ST_TO_ADDR
// vc_engine := engine ;
19975: LD_ADDR_OWVAR 39
19979: PUSH
19980: LD_VAR 0 2
19984: ST_TO_ADDR
// vc_control := control ;
19985: LD_ADDR_OWVAR 38
19989: PUSH
19990: LD_VAR 0 3
19994: ST_TO_ADDR
// vc_weapon := weapon ;
19995: LD_ADDR_OWVAR 40
19999: PUSH
20000: LD_VAR 0 4
20004: ST_TO_ADDR
// vc_fuel_battery := fuel ;
20005: LD_ADDR_OWVAR 41
20009: PUSH
20010: LD_VAR 0 5
20014: ST_TO_ADDR
// end ;
20015: LD_VAR 0 6
20019: RET
// export function WantPlant ( unit ) ; var task ; begin
20020: LD_INT 0
20022: PPUSH
20023: PPUSH
// result := false ;
20024: LD_ADDR_VAR 0 2
20028: PUSH
20029: LD_INT 0
20031: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
20032: LD_ADDR_VAR 0 3
20036: PUSH
20037: LD_VAR 0 1
20041: PPUSH
20042: CALL_OW 437
20046: ST_TO_ADDR
// if task then
20047: LD_VAR 0 3
20051: IFFALSE 20079
// if task [ 1 ] [ 1 ] = p then
20053: LD_VAR 0 3
20057: PUSH
20058: LD_INT 1
20060: ARRAY
20061: PUSH
20062: LD_INT 1
20064: ARRAY
20065: PUSH
20066: LD_STRING p
20068: EQUAL
20069: IFFALSE 20079
// result := true ;
20071: LD_ADDR_VAR 0 2
20075: PUSH
20076: LD_INT 1
20078: ST_TO_ADDR
// end ;
20079: LD_VAR 0 2
20083: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
20084: LD_INT 0
20086: PPUSH
20087: PPUSH
20088: PPUSH
20089: PPUSH
// if pos < 1 then
20090: LD_VAR 0 2
20094: PUSH
20095: LD_INT 1
20097: LESS
20098: IFFALSE 20102
// exit ;
20100: GO 20405
// if pos = 1 then
20102: LD_VAR 0 2
20106: PUSH
20107: LD_INT 1
20109: EQUAL
20110: IFFALSE 20143
// result := Replace ( arr , pos [ 1 ] , value ) else
20112: LD_ADDR_VAR 0 4
20116: PUSH
20117: LD_VAR 0 1
20121: PPUSH
20122: LD_VAR 0 2
20126: PUSH
20127: LD_INT 1
20129: ARRAY
20130: PPUSH
20131: LD_VAR 0 3
20135: PPUSH
20136: CALL_OW 1
20140: ST_TO_ADDR
20141: GO 20405
// begin tmp := arr ;
20143: LD_ADDR_VAR 0 6
20147: PUSH
20148: LD_VAR 0 1
20152: ST_TO_ADDR
// s_arr := [ tmp ] ;
20153: LD_ADDR_VAR 0 7
20157: PUSH
20158: LD_VAR 0 6
20162: PUSH
20163: EMPTY
20164: LIST
20165: ST_TO_ADDR
// for i = 1 to pos - 1 do
20166: LD_ADDR_VAR 0 5
20170: PUSH
20171: DOUBLE
20172: LD_INT 1
20174: DEC
20175: ST_TO_ADDR
20176: LD_VAR 0 2
20180: PUSH
20181: LD_INT 1
20183: MINUS
20184: PUSH
20185: FOR_TO
20186: IFFALSE 20231
// begin tmp := tmp [ pos [ i ] ] ;
20188: LD_ADDR_VAR 0 6
20192: PUSH
20193: LD_VAR 0 6
20197: PUSH
20198: LD_VAR 0 2
20202: PUSH
20203: LD_VAR 0 5
20207: ARRAY
20208: ARRAY
20209: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
20210: LD_ADDR_VAR 0 7
20214: PUSH
20215: LD_VAR 0 7
20219: PUSH
20220: LD_VAR 0 6
20224: PUSH
20225: EMPTY
20226: LIST
20227: ADD
20228: ST_TO_ADDR
// end ;
20229: GO 20185
20231: POP
20232: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
20233: LD_ADDR_VAR 0 6
20237: PUSH
20238: LD_VAR 0 6
20242: PPUSH
20243: LD_VAR 0 2
20247: PUSH
20248: LD_VAR 0 2
20252: ARRAY
20253: PPUSH
20254: LD_VAR 0 3
20258: PPUSH
20259: CALL_OW 1
20263: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
20264: LD_ADDR_VAR 0 7
20268: PUSH
20269: LD_VAR 0 7
20273: PPUSH
20274: LD_VAR 0 7
20278: PPUSH
20279: LD_VAR 0 6
20283: PPUSH
20284: CALL_OW 1
20288: ST_TO_ADDR
// for i = s_arr downto 2 do
20289: LD_ADDR_VAR 0 5
20293: PUSH
20294: DOUBLE
20295: LD_VAR 0 7
20299: INC
20300: ST_TO_ADDR
20301: LD_INT 2
20303: PUSH
20304: FOR_DOWNTO
20305: IFFALSE 20389
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
20307: LD_ADDR_VAR 0 6
20311: PUSH
20312: LD_VAR 0 7
20316: PUSH
20317: LD_VAR 0 5
20321: PUSH
20322: LD_INT 1
20324: MINUS
20325: ARRAY
20326: PPUSH
20327: LD_VAR 0 2
20331: PUSH
20332: LD_VAR 0 5
20336: PUSH
20337: LD_INT 1
20339: MINUS
20340: ARRAY
20341: PPUSH
20342: LD_VAR 0 7
20346: PUSH
20347: LD_VAR 0 5
20351: ARRAY
20352: PPUSH
20353: CALL_OW 1
20357: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
20358: LD_ADDR_VAR 0 7
20362: PUSH
20363: LD_VAR 0 7
20367: PPUSH
20368: LD_VAR 0 5
20372: PUSH
20373: LD_INT 1
20375: MINUS
20376: PPUSH
20377: LD_VAR 0 6
20381: PPUSH
20382: CALL_OW 1
20386: ST_TO_ADDR
// end ;
20387: GO 20304
20389: POP
20390: POP
// result := s_arr [ 1 ] ;
20391: LD_ADDR_VAR 0 4
20395: PUSH
20396: LD_VAR 0 7
20400: PUSH
20401: LD_INT 1
20403: ARRAY
20404: ST_TO_ADDR
// end ; end ;
20405: LD_VAR 0 4
20409: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
20410: LD_INT 0
20412: PPUSH
20413: PPUSH
// if not list then
20414: LD_VAR 0 1
20418: NOT
20419: IFFALSE 20423
// exit ;
20421: GO 20514
// i := list [ pos1 ] ;
20423: LD_ADDR_VAR 0 5
20427: PUSH
20428: LD_VAR 0 1
20432: PUSH
20433: LD_VAR 0 2
20437: ARRAY
20438: ST_TO_ADDR
// if not i then
20439: LD_VAR 0 5
20443: NOT
20444: IFFALSE 20448
// exit ;
20446: GO 20514
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
20448: LD_ADDR_VAR 0 1
20452: PUSH
20453: LD_VAR 0 1
20457: PPUSH
20458: LD_VAR 0 2
20462: PPUSH
20463: LD_VAR 0 1
20467: PUSH
20468: LD_VAR 0 3
20472: ARRAY
20473: PPUSH
20474: CALL_OW 1
20478: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
20479: LD_ADDR_VAR 0 1
20483: PUSH
20484: LD_VAR 0 1
20488: PPUSH
20489: LD_VAR 0 3
20493: PPUSH
20494: LD_VAR 0 5
20498: PPUSH
20499: CALL_OW 1
20503: ST_TO_ADDR
// result := list ;
20504: LD_ADDR_VAR 0 4
20508: PUSH
20509: LD_VAR 0 1
20513: ST_TO_ADDR
// end ;
20514: LD_VAR 0 4
20518: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
20519: LD_INT 0
20521: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
20522: LD_ADDR_VAR 0 5
20526: PUSH
20527: LD_VAR 0 1
20531: PPUSH
20532: CALL_OW 250
20536: PPUSH
20537: LD_VAR 0 1
20541: PPUSH
20542: CALL_OW 251
20546: PPUSH
20547: LD_VAR 0 2
20551: PPUSH
20552: LD_VAR 0 3
20556: PPUSH
20557: LD_VAR 0 4
20561: PPUSH
20562: CALL 20940 0 5
20566: ST_TO_ADDR
// end ;
20567: LD_VAR 0 5
20571: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
20572: LD_INT 0
20574: PPUSH
20575: PPUSH
20576: PPUSH
20577: PPUSH
// if not list or not unit then
20578: LD_VAR 0 2
20582: NOT
20583: PUSH
20584: LD_VAR 0 1
20588: NOT
20589: OR
20590: IFFALSE 20594
// exit ;
20592: GO 20935
// result := [ ] ;
20594: LD_ADDR_VAR 0 5
20598: PUSH
20599: EMPTY
20600: ST_TO_ADDR
// for i in list do
20601: LD_ADDR_VAR 0 6
20605: PUSH
20606: LD_VAR 0 2
20610: PUSH
20611: FOR_IN
20612: IFFALSE 20830
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
20614: LD_ADDR_VAR 0 8
20618: PUSH
20619: LD_VAR 0 1
20623: PPUSH
20624: LD_VAR 0 6
20628: PUSH
20629: LD_INT 1
20631: ARRAY
20632: PPUSH
20633: LD_VAR 0 6
20637: PUSH
20638: LD_INT 2
20640: ARRAY
20641: PPUSH
20642: CALL_OW 297
20646: ST_TO_ADDR
// if not Count ( result ) then
20647: LD_VAR 0 5
20651: PPUSH
20652: CALL 17224 0 1
20656: NOT
20657: IFFALSE 20690
// begin result := Join ( result , [ i , tmp ] ) ;
20659: LD_ADDR_VAR 0 5
20663: PUSH
20664: LD_VAR 0 5
20668: PPUSH
20669: LD_VAR 0 6
20673: PUSH
20674: LD_VAR 0 8
20678: PUSH
20679: EMPTY
20680: LIST
20681: LIST
20682: PPUSH
20683: CALL 52833 0 2
20687: ST_TO_ADDR
// continue ;
20688: GO 20611
// end ; if result [ result ] [ 2 ] <= tmp then
20690: LD_VAR 0 5
20694: PUSH
20695: LD_VAR 0 5
20699: ARRAY
20700: PUSH
20701: LD_INT 2
20703: ARRAY
20704: PUSH
20705: LD_VAR 0 8
20709: LESSEQUAL
20710: IFFALSE 20743
// result := Join ( result , [ i , tmp ] ) else
20712: LD_ADDR_VAR 0 5
20716: PUSH
20717: LD_VAR 0 5
20721: PPUSH
20722: LD_VAR 0 6
20726: PUSH
20727: LD_VAR 0 8
20731: PUSH
20732: EMPTY
20733: LIST
20734: LIST
20735: PPUSH
20736: CALL 52833 0 2
20740: ST_TO_ADDR
20741: GO 20828
// begin for j := 1 to Count ( result ) do
20743: LD_ADDR_VAR 0 7
20747: PUSH
20748: DOUBLE
20749: LD_INT 1
20751: DEC
20752: ST_TO_ADDR
20753: LD_VAR 0 5
20757: PPUSH
20758: CALL 17224 0 1
20762: PUSH
20763: FOR_TO
20764: IFFALSE 20826
// begin if tmp < result [ j ] [ 2 ] then
20766: LD_VAR 0 8
20770: PUSH
20771: LD_VAR 0 5
20775: PUSH
20776: LD_VAR 0 7
20780: ARRAY
20781: PUSH
20782: LD_INT 2
20784: ARRAY
20785: LESS
20786: IFFALSE 20824
// begin result := Insert ( result , j , [ i , tmp ] ) ;
20788: LD_ADDR_VAR 0 5
20792: PUSH
20793: LD_VAR 0 5
20797: PPUSH
20798: LD_VAR 0 7
20802: PPUSH
20803: LD_VAR 0 6
20807: PUSH
20808: LD_VAR 0 8
20812: PUSH
20813: EMPTY
20814: LIST
20815: LIST
20816: PPUSH
20817: CALL_OW 2
20821: ST_TO_ADDR
// break ;
20822: GO 20826
// end ; end ;
20824: GO 20763
20826: POP
20827: POP
// end ; end ;
20828: GO 20611
20830: POP
20831: POP
// if result and not asc then
20832: LD_VAR 0 5
20836: PUSH
20837: LD_VAR 0 3
20841: NOT
20842: AND
20843: IFFALSE 20860
// result := ReverseArray ( result ) ;
20845: LD_ADDR_VAR 0 5
20849: PUSH
20850: LD_VAR 0 5
20854: PPUSH
20855: CALL 48100 0 1
20859: ST_TO_ADDR
// tmp := [ ] ;
20860: LD_ADDR_VAR 0 8
20864: PUSH
20865: EMPTY
20866: ST_TO_ADDR
// if mode then
20867: LD_VAR 0 4
20871: IFFALSE 20935
// begin for i := 1 to result do
20873: LD_ADDR_VAR 0 6
20877: PUSH
20878: DOUBLE
20879: LD_INT 1
20881: DEC
20882: ST_TO_ADDR
20883: LD_VAR 0 5
20887: PUSH
20888: FOR_TO
20889: IFFALSE 20923
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
20891: LD_ADDR_VAR 0 8
20895: PUSH
20896: LD_VAR 0 8
20900: PPUSH
20901: LD_VAR 0 5
20905: PUSH
20906: LD_VAR 0 6
20910: ARRAY
20911: PUSH
20912: LD_INT 1
20914: ARRAY
20915: PPUSH
20916: CALL 52833 0 2
20920: ST_TO_ADDR
20921: GO 20888
20923: POP
20924: POP
// result := tmp ;
20925: LD_ADDR_VAR 0 5
20929: PUSH
20930: LD_VAR 0 8
20934: ST_TO_ADDR
// end ; end ;
20935: LD_VAR 0 5
20939: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
20940: LD_INT 0
20942: PPUSH
20943: PPUSH
20944: PPUSH
20945: PPUSH
// if not list then
20946: LD_VAR 0 3
20950: NOT
20951: IFFALSE 20955
// exit ;
20953: GO 21343
// result := [ ] ;
20955: LD_ADDR_VAR 0 6
20959: PUSH
20960: EMPTY
20961: ST_TO_ADDR
// for i in list do
20962: LD_ADDR_VAR 0 7
20966: PUSH
20967: LD_VAR 0 3
20971: PUSH
20972: FOR_IN
20973: IFFALSE 21175
// begin tmp := GetDistUnitXY ( i , x , y ) ;
20975: LD_ADDR_VAR 0 9
20979: PUSH
20980: LD_VAR 0 7
20984: PPUSH
20985: LD_VAR 0 1
20989: PPUSH
20990: LD_VAR 0 2
20994: PPUSH
20995: CALL_OW 297
20999: ST_TO_ADDR
// if not result then
21000: LD_VAR 0 6
21004: NOT
21005: IFFALSE 21031
// result := [ [ i , tmp ] ] else
21007: LD_ADDR_VAR 0 6
21011: PUSH
21012: LD_VAR 0 7
21016: PUSH
21017: LD_VAR 0 9
21021: PUSH
21022: EMPTY
21023: LIST
21024: LIST
21025: PUSH
21026: EMPTY
21027: LIST
21028: ST_TO_ADDR
21029: GO 21173
// begin if result [ result ] [ 2 ] < tmp then
21031: LD_VAR 0 6
21035: PUSH
21036: LD_VAR 0 6
21040: ARRAY
21041: PUSH
21042: LD_INT 2
21044: ARRAY
21045: PUSH
21046: LD_VAR 0 9
21050: LESS
21051: IFFALSE 21093
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
21053: LD_ADDR_VAR 0 6
21057: PUSH
21058: LD_VAR 0 6
21062: PPUSH
21063: LD_VAR 0 6
21067: PUSH
21068: LD_INT 1
21070: PLUS
21071: PPUSH
21072: LD_VAR 0 7
21076: PUSH
21077: LD_VAR 0 9
21081: PUSH
21082: EMPTY
21083: LIST
21084: LIST
21085: PPUSH
21086: CALL_OW 2
21090: ST_TO_ADDR
21091: GO 21173
// for j = 1 to result do
21093: LD_ADDR_VAR 0 8
21097: PUSH
21098: DOUBLE
21099: LD_INT 1
21101: DEC
21102: ST_TO_ADDR
21103: LD_VAR 0 6
21107: PUSH
21108: FOR_TO
21109: IFFALSE 21171
// begin if tmp < result [ j ] [ 2 ] then
21111: LD_VAR 0 9
21115: PUSH
21116: LD_VAR 0 6
21120: PUSH
21121: LD_VAR 0 8
21125: ARRAY
21126: PUSH
21127: LD_INT 2
21129: ARRAY
21130: LESS
21131: IFFALSE 21169
// begin result := Insert ( result , j , [ i , tmp ] ) ;
21133: LD_ADDR_VAR 0 6
21137: PUSH
21138: LD_VAR 0 6
21142: PPUSH
21143: LD_VAR 0 8
21147: PPUSH
21148: LD_VAR 0 7
21152: PUSH
21153: LD_VAR 0 9
21157: PUSH
21158: EMPTY
21159: LIST
21160: LIST
21161: PPUSH
21162: CALL_OW 2
21166: ST_TO_ADDR
// break ;
21167: GO 21171
// end ; end ;
21169: GO 21108
21171: POP
21172: POP
// end ; end ;
21173: GO 20972
21175: POP
21176: POP
// if result and not asc then
21177: LD_VAR 0 6
21181: PUSH
21182: LD_VAR 0 4
21186: NOT
21187: AND
21188: IFFALSE 21263
// begin tmp := result ;
21190: LD_ADDR_VAR 0 9
21194: PUSH
21195: LD_VAR 0 6
21199: ST_TO_ADDR
// for i = tmp downto 1 do
21200: LD_ADDR_VAR 0 7
21204: PUSH
21205: DOUBLE
21206: LD_VAR 0 9
21210: INC
21211: ST_TO_ADDR
21212: LD_INT 1
21214: PUSH
21215: FOR_DOWNTO
21216: IFFALSE 21261
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
21218: LD_ADDR_VAR 0 6
21222: PUSH
21223: LD_VAR 0 6
21227: PPUSH
21228: LD_VAR 0 9
21232: PUSH
21233: LD_VAR 0 7
21237: MINUS
21238: PUSH
21239: LD_INT 1
21241: PLUS
21242: PPUSH
21243: LD_VAR 0 9
21247: PUSH
21248: LD_VAR 0 7
21252: ARRAY
21253: PPUSH
21254: CALL_OW 1
21258: ST_TO_ADDR
21259: GO 21215
21261: POP
21262: POP
// end ; tmp := [ ] ;
21263: LD_ADDR_VAR 0 9
21267: PUSH
21268: EMPTY
21269: ST_TO_ADDR
// if mode then
21270: LD_VAR 0 5
21274: IFFALSE 21343
// begin for i = 1 to result do
21276: LD_ADDR_VAR 0 7
21280: PUSH
21281: DOUBLE
21282: LD_INT 1
21284: DEC
21285: ST_TO_ADDR
21286: LD_VAR 0 6
21290: PUSH
21291: FOR_TO
21292: IFFALSE 21331
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
21294: LD_ADDR_VAR 0 9
21298: PUSH
21299: LD_VAR 0 9
21303: PPUSH
21304: LD_VAR 0 7
21308: PPUSH
21309: LD_VAR 0 6
21313: PUSH
21314: LD_VAR 0 7
21318: ARRAY
21319: PUSH
21320: LD_INT 1
21322: ARRAY
21323: PPUSH
21324: CALL_OW 1
21328: ST_TO_ADDR
21329: GO 21291
21331: POP
21332: POP
// result := tmp ;
21333: LD_ADDR_VAR 0 6
21337: PUSH
21338: LD_VAR 0 9
21342: ST_TO_ADDR
// end ; end ;
21343: LD_VAR 0 6
21347: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
21348: LD_INT 0
21350: PPUSH
21351: PPUSH
21352: PPUSH
21353: PPUSH
21354: PPUSH
21355: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
21356: LD_ADDR_VAR 0 5
21360: PUSH
21361: LD_INT 0
21363: PUSH
21364: LD_INT 0
21366: PUSH
21367: LD_INT 0
21369: PUSH
21370: EMPTY
21371: PUSH
21372: EMPTY
21373: LIST
21374: LIST
21375: LIST
21376: LIST
21377: ST_TO_ADDR
// if not x or not y then
21378: LD_VAR 0 2
21382: NOT
21383: PUSH
21384: LD_VAR 0 3
21388: NOT
21389: OR
21390: IFFALSE 21394
// exit ;
21392: GO 23044
// if not range then
21394: LD_VAR 0 4
21398: NOT
21399: IFFALSE 21409
// range := 10 ;
21401: LD_ADDR_VAR 0 4
21405: PUSH
21406: LD_INT 10
21408: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21409: LD_ADDR_VAR 0 8
21413: PUSH
21414: LD_INT 81
21416: PUSH
21417: LD_VAR 0 1
21421: PUSH
21422: EMPTY
21423: LIST
21424: LIST
21425: PUSH
21426: LD_INT 92
21428: PUSH
21429: LD_VAR 0 2
21433: PUSH
21434: LD_VAR 0 3
21438: PUSH
21439: LD_VAR 0 4
21443: PUSH
21444: EMPTY
21445: LIST
21446: LIST
21447: LIST
21448: LIST
21449: PUSH
21450: LD_INT 3
21452: PUSH
21453: LD_INT 21
21455: PUSH
21456: LD_INT 3
21458: PUSH
21459: EMPTY
21460: LIST
21461: LIST
21462: PUSH
21463: EMPTY
21464: LIST
21465: LIST
21466: PUSH
21467: EMPTY
21468: LIST
21469: LIST
21470: LIST
21471: PPUSH
21472: CALL_OW 69
21476: ST_TO_ADDR
// if not tmp then
21477: LD_VAR 0 8
21481: NOT
21482: IFFALSE 21486
// exit ;
21484: GO 23044
// for i in tmp do
21486: LD_ADDR_VAR 0 6
21490: PUSH
21491: LD_VAR 0 8
21495: PUSH
21496: FOR_IN
21497: IFFALSE 23019
// begin points := [ 0 , 0 , 0 ] ;
21499: LD_ADDR_VAR 0 9
21503: PUSH
21504: LD_INT 0
21506: PUSH
21507: LD_INT 0
21509: PUSH
21510: LD_INT 0
21512: PUSH
21513: EMPTY
21514: LIST
21515: LIST
21516: LIST
21517: ST_TO_ADDR
// bpoints := 1 ;
21518: LD_ADDR_VAR 0 10
21522: PUSH
21523: LD_INT 1
21525: ST_TO_ADDR
// case GetType ( i ) of unit_human :
21526: LD_VAR 0 6
21530: PPUSH
21531: CALL_OW 247
21535: PUSH
21536: LD_INT 1
21538: DOUBLE
21539: EQUAL
21540: IFTRUE 21544
21542: GO 22122
21544: POP
// begin if GetClass ( i ) = 1 then
21545: LD_VAR 0 6
21549: PPUSH
21550: CALL_OW 257
21554: PUSH
21555: LD_INT 1
21557: EQUAL
21558: IFFALSE 21579
// points := [ 10 , 5 , 3 ] ;
21560: LD_ADDR_VAR 0 9
21564: PUSH
21565: LD_INT 10
21567: PUSH
21568: LD_INT 5
21570: PUSH
21571: LD_INT 3
21573: PUSH
21574: EMPTY
21575: LIST
21576: LIST
21577: LIST
21578: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
21579: LD_VAR 0 6
21583: PPUSH
21584: CALL_OW 257
21588: PUSH
21589: LD_INT 2
21591: PUSH
21592: LD_INT 3
21594: PUSH
21595: LD_INT 4
21597: PUSH
21598: EMPTY
21599: LIST
21600: LIST
21601: LIST
21602: IN
21603: IFFALSE 21624
// points := [ 3 , 2 , 1 ] ;
21605: LD_ADDR_VAR 0 9
21609: PUSH
21610: LD_INT 3
21612: PUSH
21613: LD_INT 2
21615: PUSH
21616: LD_INT 1
21618: PUSH
21619: EMPTY
21620: LIST
21621: LIST
21622: LIST
21623: ST_TO_ADDR
// if GetClass ( i ) = 5 then
21624: LD_VAR 0 6
21628: PPUSH
21629: CALL_OW 257
21633: PUSH
21634: LD_INT 5
21636: EQUAL
21637: IFFALSE 21658
// points := [ 130 , 5 , 2 ] ;
21639: LD_ADDR_VAR 0 9
21643: PUSH
21644: LD_INT 130
21646: PUSH
21647: LD_INT 5
21649: PUSH
21650: LD_INT 2
21652: PUSH
21653: EMPTY
21654: LIST
21655: LIST
21656: LIST
21657: ST_TO_ADDR
// if GetClass ( i ) = 8 then
21658: LD_VAR 0 6
21662: PPUSH
21663: CALL_OW 257
21667: PUSH
21668: LD_INT 8
21670: EQUAL
21671: IFFALSE 21692
// points := [ 35 , 35 , 30 ] ;
21673: LD_ADDR_VAR 0 9
21677: PUSH
21678: LD_INT 35
21680: PUSH
21681: LD_INT 35
21683: PUSH
21684: LD_INT 30
21686: PUSH
21687: EMPTY
21688: LIST
21689: LIST
21690: LIST
21691: ST_TO_ADDR
// if GetClass ( i ) = 9 then
21692: LD_VAR 0 6
21696: PPUSH
21697: CALL_OW 257
21701: PUSH
21702: LD_INT 9
21704: EQUAL
21705: IFFALSE 21726
// points := [ 20 , 55 , 40 ] ;
21707: LD_ADDR_VAR 0 9
21711: PUSH
21712: LD_INT 20
21714: PUSH
21715: LD_INT 55
21717: PUSH
21718: LD_INT 40
21720: PUSH
21721: EMPTY
21722: LIST
21723: LIST
21724: LIST
21725: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
21726: LD_VAR 0 6
21730: PPUSH
21731: CALL_OW 257
21735: PUSH
21736: LD_INT 12
21738: PUSH
21739: LD_INT 16
21741: PUSH
21742: EMPTY
21743: LIST
21744: LIST
21745: IN
21746: IFFALSE 21767
// points := [ 5 , 3 , 2 ] ;
21748: LD_ADDR_VAR 0 9
21752: PUSH
21753: LD_INT 5
21755: PUSH
21756: LD_INT 3
21758: PUSH
21759: LD_INT 2
21761: PUSH
21762: EMPTY
21763: LIST
21764: LIST
21765: LIST
21766: ST_TO_ADDR
// if GetClass ( i ) = 17 then
21767: LD_VAR 0 6
21771: PPUSH
21772: CALL_OW 257
21776: PUSH
21777: LD_INT 17
21779: EQUAL
21780: IFFALSE 21801
// points := [ 100 , 50 , 75 ] ;
21782: LD_ADDR_VAR 0 9
21786: PUSH
21787: LD_INT 100
21789: PUSH
21790: LD_INT 50
21792: PUSH
21793: LD_INT 75
21795: PUSH
21796: EMPTY
21797: LIST
21798: LIST
21799: LIST
21800: ST_TO_ADDR
// if GetClass ( i ) = 15 then
21801: LD_VAR 0 6
21805: PPUSH
21806: CALL_OW 257
21810: PUSH
21811: LD_INT 15
21813: EQUAL
21814: IFFALSE 21835
// points := [ 10 , 5 , 3 ] ;
21816: LD_ADDR_VAR 0 9
21820: PUSH
21821: LD_INT 10
21823: PUSH
21824: LD_INT 5
21826: PUSH
21827: LD_INT 3
21829: PUSH
21830: EMPTY
21831: LIST
21832: LIST
21833: LIST
21834: ST_TO_ADDR
// if GetClass ( i ) = 14 then
21835: LD_VAR 0 6
21839: PPUSH
21840: CALL_OW 257
21844: PUSH
21845: LD_INT 14
21847: EQUAL
21848: IFFALSE 21869
// points := [ 10 , 0 , 0 ] ;
21850: LD_ADDR_VAR 0 9
21854: PUSH
21855: LD_INT 10
21857: PUSH
21858: LD_INT 0
21860: PUSH
21861: LD_INT 0
21863: PUSH
21864: EMPTY
21865: LIST
21866: LIST
21867: LIST
21868: ST_TO_ADDR
// if GetClass ( i ) = 11 then
21869: LD_VAR 0 6
21873: PPUSH
21874: CALL_OW 257
21878: PUSH
21879: LD_INT 11
21881: EQUAL
21882: IFFALSE 21903
// points := [ 30 , 10 , 5 ] ;
21884: LD_ADDR_VAR 0 9
21888: PUSH
21889: LD_INT 30
21891: PUSH
21892: LD_INT 10
21894: PUSH
21895: LD_INT 5
21897: PUSH
21898: EMPTY
21899: LIST
21900: LIST
21901: LIST
21902: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
21903: LD_VAR 0 1
21907: PPUSH
21908: LD_INT 5
21910: PPUSH
21911: CALL_OW 321
21915: PUSH
21916: LD_INT 2
21918: EQUAL
21919: IFFALSE 21936
// bpoints := bpoints * 1.8 ;
21921: LD_ADDR_VAR 0 10
21925: PUSH
21926: LD_VAR 0 10
21930: PUSH
21931: LD_REAL  1.80000000000000E+0000
21934: MUL
21935: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
21936: LD_VAR 0 6
21940: PPUSH
21941: CALL_OW 257
21945: PUSH
21946: LD_INT 1
21948: PUSH
21949: LD_INT 2
21951: PUSH
21952: LD_INT 3
21954: PUSH
21955: LD_INT 4
21957: PUSH
21958: EMPTY
21959: LIST
21960: LIST
21961: LIST
21962: LIST
21963: IN
21964: PUSH
21965: LD_VAR 0 1
21969: PPUSH
21970: LD_INT 51
21972: PPUSH
21973: CALL_OW 321
21977: PUSH
21978: LD_INT 2
21980: EQUAL
21981: AND
21982: IFFALSE 21999
// bpoints := bpoints * 1.2 ;
21984: LD_ADDR_VAR 0 10
21988: PUSH
21989: LD_VAR 0 10
21993: PUSH
21994: LD_REAL  1.20000000000000E+0000
21997: MUL
21998: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
21999: LD_VAR 0 6
22003: PPUSH
22004: CALL_OW 257
22008: PUSH
22009: LD_INT 5
22011: PUSH
22012: LD_INT 7
22014: PUSH
22015: LD_INT 9
22017: PUSH
22018: EMPTY
22019: LIST
22020: LIST
22021: LIST
22022: IN
22023: PUSH
22024: LD_VAR 0 1
22028: PPUSH
22029: LD_INT 52
22031: PPUSH
22032: CALL_OW 321
22036: PUSH
22037: LD_INT 2
22039: EQUAL
22040: AND
22041: IFFALSE 22058
// bpoints := bpoints * 1.5 ;
22043: LD_ADDR_VAR 0 10
22047: PUSH
22048: LD_VAR 0 10
22052: PUSH
22053: LD_REAL  1.50000000000000E+0000
22056: MUL
22057: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
22058: LD_VAR 0 1
22062: PPUSH
22063: LD_INT 66
22065: PPUSH
22066: CALL_OW 321
22070: PUSH
22071: LD_INT 2
22073: EQUAL
22074: IFFALSE 22091
// bpoints := bpoints * 1.1 ;
22076: LD_ADDR_VAR 0 10
22080: PUSH
22081: LD_VAR 0 10
22085: PUSH
22086: LD_REAL  1.10000000000000E+0000
22089: MUL
22090: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
22091: LD_ADDR_VAR 0 10
22095: PUSH
22096: LD_VAR 0 10
22100: PUSH
22101: LD_VAR 0 6
22105: PPUSH
22106: LD_INT 1
22108: PPUSH
22109: CALL_OW 259
22113: PUSH
22114: LD_REAL  1.15000000000000E+0000
22117: MUL
22118: MUL
22119: ST_TO_ADDR
// end ; unit_vehicle :
22120: GO 22948
22122: LD_INT 2
22124: DOUBLE
22125: EQUAL
22126: IFTRUE 22130
22128: GO 22936
22130: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
22131: LD_VAR 0 6
22135: PPUSH
22136: CALL_OW 264
22140: PUSH
22141: LD_INT 2
22143: PUSH
22144: LD_INT 42
22146: PUSH
22147: LD_INT 24
22149: PUSH
22150: EMPTY
22151: LIST
22152: LIST
22153: LIST
22154: IN
22155: IFFALSE 22176
// points := [ 25 , 5 , 3 ] ;
22157: LD_ADDR_VAR 0 9
22161: PUSH
22162: LD_INT 25
22164: PUSH
22165: LD_INT 5
22167: PUSH
22168: LD_INT 3
22170: PUSH
22171: EMPTY
22172: LIST
22173: LIST
22174: LIST
22175: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
22176: LD_VAR 0 6
22180: PPUSH
22181: CALL_OW 264
22185: PUSH
22186: LD_INT 4
22188: PUSH
22189: LD_INT 43
22191: PUSH
22192: LD_INT 25
22194: PUSH
22195: EMPTY
22196: LIST
22197: LIST
22198: LIST
22199: IN
22200: IFFALSE 22221
// points := [ 40 , 15 , 5 ] ;
22202: LD_ADDR_VAR 0 9
22206: PUSH
22207: LD_INT 40
22209: PUSH
22210: LD_INT 15
22212: PUSH
22213: LD_INT 5
22215: PUSH
22216: EMPTY
22217: LIST
22218: LIST
22219: LIST
22220: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
22221: LD_VAR 0 6
22225: PPUSH
22226: CALL_OW 264
22230: PUSH
22231: LD_INT 3
22233: PUSH
22234: LD_INT 23
22236: PUSH
22237: EMPTY
22238: LIST
22239: LIST
22240: IN
22241: IFFALSE 22262
// points := [ 7 , 25 , 8 ] ;
22243: LD_ADDR_VAR 0 9
22247: PUSH
22248: LD_INT 7
22250: PUSH
22251: LD_INT 25
22253: PUSH
22254: LD_INT 8
22256: PUSH
22257: EMPTY
22258: LIST
22259: LIST
22260: LIST
22261: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
22262: LD_VAR 0 6
22266: PPUSH
22267: CALL_OW 264
22271: PUSH
22272: LD_INT 5
22274: PUSH
22275: LD_INT 27
22277: PUSH
22278: LD_INT 44
22280: PUSH
22281: EMPTY
22282: LIST
22283: LIST
22284: LIST
22285: IN
22286: IFFALSE 22307
// points := [ 14 , 50 , 16 ] ;
22288: LD_ADDR_VAR 0 9
22292: PUSH
22293: LD_INT 14
22295: PUSH
22296: LD_INT 50
22298: PUSH
22299: LD_INT 16
22301: PUSH
22302: EMPTY
22303: LIST
22304: LIST
22305: LIST
22306: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
22307: LD_VAR 0 6
22311: PPUSH
22312: CALL_OW 264
22316: PUSH
22317: LD_INT 6
22319: PUSH
22320: LD_INT 46
22322: PUSH
22323: EMPTY
22324: LIST
22325: LIST
22326: IN
22327: IFFALSE 22348
// points := [ 32 , 120 , 70 ] ;
22329: LD_ADDR_VAR 0 9
22333: PUSH
22334: LD_INT 32
22336: PUSH
22337: LD_INT 120
22339: PUSH
22340: LD_INT 70
22342: PUSH
22343: EMPTY
22344: LIST
22345: LIST
22346: LIST
22347: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
22348: LD_VAR 0 6
22352: PPUSH
22353: CALL_OW 264
22357: PUSH
22358: LD_INT 7
22360: PUSH
22361: LD_INT 28
22363: PUSH
22364: LD_INT 45
22366: PUSH
22367: LD_INT 92
22369: PUSH
22370: EMPTY
22371: LIST
22372: LIST
22373: LIST
22374: LIST
22375: IN
22376: IFFALSE 22397
// points := [ 35 , 20 , 45 ] ;
22378: LD_ADDR_VAR 0 9
22382: PUSH
22383: LD_INT 35
22385: PUSH
22386: LD_INT 20
22388: PUSH
22389: LD_INT 45
22391: PUSH
22392: EMPTY
22393: LIST
22394: LIST
22395: LIST
22396: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
22397: LD_VAR 0 6
22401: PPUSH
22402: CALL_OW 264
22406: PUSH
22407: LD_INT 47
22409: PUSH
22410: EMPTY
22411: LIST
22412: IN
22413: IFFALSE 22434
// points := [ 67 , 45 , 75 ] ;
22415: LD_ADDR_VAR 0 9
22419: PUSH
22420: LD_INT 67
22422: PUSH
22423: LD_INT 45
22425: PUSH
22426: LD_INT 75
22428: PUSH
22429: EMPTY
22430: LIST
22431: LIST
22432: LIST
22433: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
22434: LD_VAR 0 6
22438: PPUSH
22439: CALL_OW 264
22443: PUSH
22444: LD_INT 26
22446: PUSH
22447: EMPTY
22448: LIST
22449: IN
22450: IFFALSE 22471
// points := [ 120 , 30 , 80 ] ;
22452: LD_ADDR_VAR 0 9
22456: PUSH
22457: LD_INT 120
22459: PUSH
22460: LD_INT 30
22462: PUSH
22463: LD_INT 80
22465: PUSH
22466: EMPTY
22467: LIST
22468: LIST
22469: LIST
22470: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
22471: LD_VAR 0 6
22475: PPUSH
22476: CALL_OW 264
22480: PUSH
22481: LD_INT 22
22483: PUSH
22484: EMPTY
22485: LIST
22486: IN
22487: IFFALSE 22508
// points := [ 40 , 1 , 1 ] ;
22489: LD_ADDR_VAR 0 9
22493: PUSH
22494: LD_INT 40
22496: PUSH
22497: LD_INT 1
22499: PUSH
22500: LD_INT 1
22502: PUSH
22503: EMPTY
22504: LIST
22505: LIST
22506: LIST
22507: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
22508: LD_VAR 0 6
22512: PPUSH
22513: CALL_OW 264
22517: PUSH
22518: LD_INT 29
22520: PUSH
22521: EMPTY
22522: LIST
22523: IN
22524: IFFALSE 22545
// points := [ 70 , 200 , 400 ] ;
22526: LD_ADDR_VAR 0 9
22530: PUSH
22531: LD_INT 70
22533: PUSH
22534: LD_INT 200
22536: PUSH
22537: LD_INT 400
22539: PUSH
22540: EMPTY
22541: LIST
22542: LIST
22543: LIST
22544: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
22545: LD_VAR 0 6
22549: PPUSH
22550: CALL_OW 264
22554: PUSH
22555: LD_INT 14
22557: PUSH
22558: LD_INT 53
22560: PUSH
22561: EMPTY
22562: LIST
22563: LIST
22564: IN
22565: IFFALSE 22586
// points := [ 40 , 10 , 20 ] ;
22567: LD_ADDR_VAR 0 9
22571: PUSH
22572: LD_INT 40
22574: PUSH
22575: LD_INT 10
22577: PUSH
22578: LD_INT 20
22580: PUSH
22581: EMPTY
22582: LIST
22583: LIST
22584: LIST
22585: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
22586: LD_VAR 0 6
22590: PPUSH
22591: CALL_OW 264
22595: PUSH
22596: LD_INT 9
22598: PUSH
22599: EMPTY
22600: LIST
22601: IN
22602: IFFALSE 22623
// points := [ 5 , 70 , 20 ] ;
22604: LD_ADDR_VAR 0 9
22608: PUSH
22609: LD_INT 5
22611: PUSH
22612: LD_INT 70
22614: PUSH
22615: LD_INT 20
22617: PUSH
22618: EMPTY
22619: LIST
22620: LIST
22621: LIST
22622: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
22623: LD_VAR 0 6
22627: PPUSH
22628: CALL_OW 264
22632: PUSH
22633: LD_INT 10
22635: PUSH
22636: EMPTY
22637: LIST
22638: IN
22639: IFFALSE 22660
// points := [ 35 , 110 , 70 ] ;
22641: LD_ADDR_VAR 0 9
22645: PUSH
22646: LD_INT 35
22648: PUSH
22649: LD_INT 110
22651: PUSH
22652: LD_INT 70
22654: PUSH
22655: EMPTY
22656: LIST
22657: LIST
22658: LIST
22659: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
22660: LD_VAR 0 6
22664: PPUSH
22665: CALL_OW 265
22669: PUSH
22670: LD_INT 25
22672: EQUAL
22673: IFFALSE 22694
// points := [ 80 , 65 , 100 ] ;
22675: LD_ADDR_VAR 0 9
22679: PUSH
22680: LD_INT 80
22682: PUSH
22683: LD_INT 65
22685: PUSH
22686: LD_INT 100
22688: PUSH
22689: EMPTY
22690: LIST
22691: LIST
22692: LIST
22693: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
22694: LD_VAR 0 6
22698: PPUSH
22699: CALL_OW 263
22703: PUSH
22704: LD_INT 1
22706: EQUAL
22707: IFFALSE 22742
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
22709: LD_ADDR_VAR 0 10
22713: PUSH
22714: LD_VAR 0 10
22718: PUSH
22719: LD_VAR 0 6
22723: PPUSH
22724: CALL_OW 311
22728: PPUSH
22729: LD_INT 3
22731: PPUSH
22732: CALL_OW 259
22736: PUSH
22737: LD_INT 4
22739: MUL
22740: MUL
22741: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
22742: LD_VAR 0 6
22746: PPUSH
22747: CALL_OW 263
22751: PUSH
22752: LD_INT 2
22754: EQUAL
22755: IFFALSE 22806
// begin j := IsControledBy ( i ) ;
22757: LD_ADDR_VAR 0 7
22761: PUSH
22762: LD_VAR 0 6
22766: PPUSH
22767: CALL_OW 312
22771: ST_TO_ADDR
// if j then
22772: LD_VAR 0 7
22776: IFFALSE 22806
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
22778: LD_ADDR_VAR 0 10
22782: PUSH
22783: LD_VAR 0 10
22787: PUSH
22788: LD_VAR 0 7
22792: PPUSH
22793: LD_INT 3
22795: PPUSH
22796: CALL_OW 259
22800: PUSH
22801: LD_INT 3
22803: MUL
22804: MUL
22805: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
22806: LD_VAR 0 6
22810: PPUSH
22811: CALL_OW 264
22815: PUSH
22816: LD_INT 5
22818: PUSH
22819: LD_INT 6
22821: PUSH
22822: LD_INT 46
22824: PUSH
22825: LD_INT 44
22827: PUSH
22828: LD_INT 47
22830: PUSH
22831: LD_INT 45
22833: PUSH
22834: LD_INT 28
22836: PUSH
22837: LD_INT 7
22839: PUSH
22840: LD_INT 27
22842: PUSH
22843: LD_INT 29
22845: PUSH
22846: EMPTY
22847: LIST
22848: LIST
22849: LIST
22850: LIST
22851: LIST
22852: LIST
22853: LIST
22854: LIST
22855: LIST
22856: LIST
22857: IN
22858: PUSH
22859: LD_VAR 0 1
22863: PPUSH
22864: LD_INT 52
22866: PPUSH
22867: CALL_OW 321
22871: PUSH
22872: LD_INT 2
22874: EQUAL
22875: AND
22876: IFFALSE 22893
// bpoints := bpoints * 1.2 ;
22878: LD_ADDR_VAR 0 10
22882: PUSH
22883: LD_VAR 0 10
22887: PUSH
22888: LD_REAL  1.20000000000000E+0000
22891: MUL
22892: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
22893: LD_VAR 0 6
22897: PPUSH
22898: CALL_OW 264
22902: PUSH
22903: LD_INT 6
22905: PUSH
22906: LD_INT 46
22908: PUSH
22909: LD_INT 47
22911: PUSH
22912: EMPTY
22913: LIST
22914: LIST
22915: LIST
22916: IN
22917: IFFALSE 22934
// bpoints := bpoints * 1.2 ;
22919: LD_ADDR_VAR 0 10
22923: PUSH
22924: LD_VAR 0 10
22928: PUSH
22929: LD_REAL  1.20000000000000E+0000
22932: MUL
22933: ST_TO_ADDR
// end ; unit_building :
22934: GO 22948
22936: LD_INT 3
22938: DOUBLE
22939: EQUAL
22940: IFTRUE 22944
22942: GO 22947
22944: POP
// ; end ;
22945: GO 22948
22947: POP
// for j = 1 to 3 do
22948: LD_ADDR_VAR 0 7
22952: PUSH
22953: DOUBLE
22954: LD_INT 1
22956: DEC
22957: ST_TO_ADDR
22958: LD_INT 3
22960: PUSH
22961: FOR_TO
22962: IFFALSE 23015
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
22964: LD_ADDR_VAR 0 5
22968: PUSH
22969: LD_VAR 0 5
22973: PPUSH
22974: LD_VAR 0 7
22978: PPUSH
22979: LD_VAR 0 5
22983: PUSH
22984: LD_VAR 0 7
22988: ARRAY
22989: PUSH
22990: LD_VAR 0 9
22994: PUSH
22995: LD_VAR 0 7
22999: ARRAY
23000: PUSH
23001: LD_VAR 0 10
23005: MUL
23006: PLUS
23007: PPUSH
23008: CALL_OW 1
23012: ST_TO_ADDR
23013: GO 22961
23015: POP
23016: POP
// end ;
23017: GO 21496
23019: POP
23020: POP
// result := Replace ( result , 4 , tmp ) ;
23021: LD_ADDR_VAR 0 5
23025: PUSH
23026: LD_VAR 0 5
23030: PPUSH
23031: LD_INT 4
23033: PPUSH
23034: LD_VAR 0 8
23038: PPUSH
23039: CALL_OW 1
23043: ST_TO_ADDR
// end ;
23044: LD_VAR 0 5
23048: RET
// export function DangerAtRange ( unit , range ) ; begin
23049: LD_INT 0
23051: PPUSH
// if not unit then
23052: LD_VAR 0 1
23056: NOT
23057: IFFALSE 23061
// exit ;
23059: GO 23106
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
23061: LD_ADDR_VAR 0 3
23065: PUSH
23066: LD_VAR 0 1
23070: PPUSH
23071: CALL_OW 255
23075: PPUSH
23076: LD_VAR 0 1
23080: PPUSH
23081: CALL_OW 250
23085: PPUSH
23086: LD_VAR 0 1
23090: PPUSH
23091: CALL_OW 251
23095: PPUSH
23096: LD_VAR 0 2
23100: PPUSH
23101: CALL 21348 0 4
23105: ST_TO_ADDR
// end ;
23106: LD_VAR 0 3
23110: RET
// export function DangerInArea ( side , area ) ; begin
23111: LD_INT 0
23113: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
23114: LD_ADDR_VAR 0 3
23118: PUSH
23119: LD_VAR 0 2
23123: PPUSH
23124: LD_INT 81
23126: PUSH
23127: LD_VAR 0 1
23131: PUSH
23132: EMPTY
23133: LIST
23134: LIST
23135: PPUSH
23136: CALL_OW 70
23140: ST_TO_ADDR
// end ;
23141: LD_VAR 0 3
23145: RET
// export function IsExtension ( b ) ; begin
23146: LD_INT 0
23148: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
23149: LD_ADDR_VAR 0 2
23153: PUSH
23154: LD_VAR 0 1
23158: PUSH
23159: LD_INT 23
23161: PUSH
23162: LD_INT 20
23164: PUSH
23165: LD_INT 22
23167: PUSH
23168: LD_INT 17
23170: PUSH
23171: LD_INT 24
23173: PUSH
23174: LD_INT 21
23176: PUSH
23177: LD_INT 19
23179: PUSH
23180: LD_INT 16
23182: PUSH
23183: LD_INT 25
23185: PUSH
23186: LD_INT 18
23188: PUSH
23189: EMPTY
23190: LIST
23191: LIST
23192: LIST
23193: LIST
23194: LIST
23195: LIST
23196: LIST
23197: LIST
23198: LIST
23199: LIST
23200: IN
23201: ST_TO_ADDR
// end ;
23202: LD_VAR 0 2
23206: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
23207: LD_INT 0
23209: PPUSH
23210: PPUSH
23211: PPUSH
// result := [ ] ;
23212: LD_ADDR_VAR 0 4
23216: PUSH
23217: EMPTY
23218: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
23219: LD_ADDR_VAR 0 5
23223: PUSH
23224: LD_VAR 0 2
23228: PPUSH
23229: LD_INT 21
23231: PUSH
23232: LD_INT 3
23234: PUSH
23235: EMPTY
23236: LIST
23237: LIST
23238: PPUSH
23239: CALL_OW 70
23243: ST_TO_ADDR
// if not tmp then
23244: LD_VAR 0 5
23248: NOT
23249: IFFALSE 23253
// exit ;
23251: GO 23317
// if checkLink then
23253: LD_VAR 0 3
23257: IFFALSE 23307
// begin for i in tmp do
23259: LD_ADDR_VAR 0 6
23263: PUSH
23264: LD_VAR 0 5
23268: PUSH
23269: FOR_IN
23270: IFFALSE 23305
// if GetBase ( i ) <> base then
23272: LD_VAR 0 6
23276: PPUSH
23277: CALL_OW 274
23281: PUSH
23282: LD_VAR 0 1
23286: NONEQUAL
23287: IFFALSE 23303
// ComLinkToBase ( base , i ) ;
23289: LD_VAR 0 1
23293: PPUSH
23294: LD_VAR 0 6
23298: PPUSH
23299: CALL_OW 169
23303: GO 23269
23305: POP
23306: POP
// end ; result := tmp ;
23307: LD_ADDR_VAR 0 4
23311: PUSH
23312: LD_VAR 0 5
23316: ST_TO_ADDR
// end ;
23317: LD_VAR 0 4
23321: RET
// export function ComComplete ( units , b ) ; var i ; begin
23322: LD_INT 0
23324: PPUSH
23325: PPUSH
// if not units then
23326: LD_VAR 0 1
23330: NOT
23331: IFFALSE 23335
// exit ;
23333: GO 23425
// for i in units do
23335: LD_ADDR_VAR 0 4
23339: PUSH
23340: LD_VAR 0 1
23344: PUSH
23345: FOR_IN
23346: IFFALSE 23423
// if BuildingStatus ( b ) = bs_build then
23348: LD_VAR 0 2
23352: PPUSH
23353: CALL_OW 461
23357: PUSH
23358: LD_INT 1
23360: EQUAL
23361: IFFALSE 23421
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
23363: LD_VAR 0 4
23367: PPUSH
23368: LD_STRING h
23370: PUSH
23371: LD_VAR 0 2
23375: PPUSH
23376: CALL_OW 250
23380: PUSH
23381: LD_VAR 0 2
23385: PPUSH
23386: CALL_OW 251
23390: PUSH
23391: LD_VAR 0 2
23395: PUSH
23396: LD_INT 0
23398: PUSH
23399: LD_INT 0
23401: PUSH
23402: LD_INT 0
23404: PUSH
23405: EMPTY
23406: LIST
23407: LIST
23408: LIST
23409: LIST
23410: LIST
23411: LIST
23412: LIST
23413: PUSH
23414: EMPTY
23415: LIST
23416: PPUSH
23417: CALL_OW 446
23421: GO 23345
23423: POP
23424: POP
// end ;
23425: LD_VAR 0 3
23429: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
23430: LD_INT 0
23432: PPUSH
23433: PPUSH
23434: PPUSH
23435: PPUSH
23436: PPUSH
23437: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
23438: LD_VAR 0 1
23442: NOT
23443: PUSH
23444: LD_VAR 0 1
23448: PPUSH
23449: CALL_OW 263
23453: PUSH
23454: LD_INT 2
23456: NONEQUAL
23457: OR
23458: IFFALSE 23462
// exit ;
23460: GO 23778
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
23462: LD_ADDR_VAR 0 6
23466: PUSH
23467: LD_INT 22
23469: PUSH
23470: LD_VAR 0 1
23474: PPUSH
23475: CALL_OW 255
23479: PUSH
23480: EMPTY
23481: LIST
23482: LIST
23483: PUSH
23484: LD_INT 2
23486: PUSH
23487: LD_INT 30
23489: PUSH
23490: LD_INT 36
23492: PUSH
23493: EMPTY
23494: LIST
23495: LIST
23496: PUSH
23497: LD_INT 34
23499: PUSH
23500: LD_INT 31
23502: PUSH
23503: EMPTY
23504: LIST
23505: LIST
23506: PUSH
23507: EMPTY
23508: LIST
23509: LIST
23510: LIST
23511: PUSH
23512: EMPTY
23513: LIST
23514: LIST
23515: PPUSH
23516: CALL_OW 69
23520: ST_TO_ADDR
// if not tmp then
23521: LD_VAR 0 6
23525: NOT
23526: IFFALSE 23530
// exit ;
23528: GO 23778
// result := [ ] ;
23530: LD_ADDR_VAR 0 2
23534: PUSH
23535: EMPTY
23536: ST_TO_ADDR
// for i in tmp do
23537: LD_ADDR_VAR 0 3
23541: PUSH
23542: LD_VAR 0 6
23546: PUSH
23547: FOR_IN
23548: IFFALSE 23619
// begin t := UnitsInside ( i ) ;
23550: LD_ADDR_VAR 0 4
23554: PUSH
23555: LD_VAR 0 3
23559: PPUSH
23560: CALL_OW 313
23564: ST_TO_ADDR
// if t then
23565: LD_VAR 0 4
23569: IFFALSE 23617
// for j in t do
23571: LD_ADDR_VAR 0 7
23575: PUSH
23576: LD_VAR 0 4
23580: PUSH
23581: FOR_IN
23582: IFFALSE 23615
// result := Replace ( result , result + 1 , j ) ;
23584: LD_ADDR_VAR 0 2
23588: PUSH
23589: LD_VAR 0 2
23593: PPUSH
23594: LD_VAR 0 2
23598: PUSH
23599: LD_INT 1
23601: PLUS
23602: PPUSH
23603: LD_VAR 0 7
23607: PPUSH
23608: CALL_OW 1
23612: ST_TO_ADDR
23613: GO 23581
23615: POP
23616: POP
// end ;
23617: GO 23547
23619: POP
23620: POP
// if not result then
23621: LD_VAR 0 2
23625: NOT
23626: IFFALSE 23630
// exit ;
23628: GO 23778
// mech := result [ 1 ] ;
23630: LD_ADDR_VAR 0 5
23634: PUSH
23635: LD_VAR 0 2
23639: PUSH
23640: LD_INT 1
23642: ARRAY
23643: ST_TO_ADDR
// if result > 1 then
23644: LD_VAR 0 2
23648: PUSH
23649: LD_INT 1
23651: GREATER
23652: IFFALSE 23764
// begin for i = 2 to result do
23654: LD_ADDR_VAR 0 3
23658: PUSH
23659: DOUBLE
23660: LD_INT 2
23662: DEC
23663: ST_TO_ADDR
23664: LD_VAR 0 2
23668: PUSH
23669: FOR_TO
23670: IFFALSE 23762
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
23672: LD_ADDR_VAR 0 4
23676: PUSH
23677: LD_VAR 0 2
23681: PUSH
23682: LD_VAR 0 3
23686: ARRAY
23687: PPUSH
23688: LD_INT 3
23690: PPUSH
23691: CALL_OW 259
23695: PUSH
23696: LD_VAR 0 2
23700: PUSH
23701: LD_VAR 0 3
23705: ARRAY
23706: PPUSH
23707: CALL_OW 432
23711: MINUS
23712: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
23713: LD_VAR 0 4
23717: PUSH
23718: LD_VAR 0 5
23722: PPUSH
23723: LD_INT 3
23725: PPUSH
23726: CALL_OW 259
23730: PUSH
23731: LD_VAR 0 5
23735: PPUSH
23736: CALL_OW 432
23740: MINUS
23741: GREATEREQUAL
23742: IFFALSE 23760
// mech := result [ i ] ;
23744: LD_ADDR_VAR 0 5
23748: PUSH
23749: LD_VAR 0 2
23753: PUSH
23754: LD_VAR 0 3
23758: ARRAY
23759: ST_TO_ADDR
// end ;
23760: GO 23669
23762: POP
23763: POP
// end ; ComLinkTo ( vehicle , mech ) ;
23764: LD_VAR 0 1
23768: PPUSH
23769: LD_VAR 0 5
23773: PPUSH
23774: CALL_OW 135
// end ;
23778: LD_VAR 0 2
23782: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
23783: LD_INT 0
23785: PPUSH
23786: PPUSH
23787: PPUSH
23788: PPUSH
23789: PPUSH
23790: PPUSH
23791: PPUSH
23792: PPUSH
23793: PPUSH
23794: PPUSH
23795: PPUSH
23796: PPUSH
23797: PPUSH
// result := [ ] ;
23798: LD_ADDR_VAR 0 7
23802: PUSH
23803: EMPTY
23804: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
23805: LD_VAR 0 1
23809: PPUSH
23810: CALL_OW 266
23814: PUSH
23815: LD_INT 0
23817: PUSH
23818: LD_INT 1
23820: PUSH
23821: EMPTY
23822: LIST
23823: LIST
23824: IN
23825: NOT
23826: IFFALSE 23830
// exit ;
23828: GO 25464
// if name then
23830: LD_VAR 0 3
23834: IFFALSE 23850
// SetBName ( base_dep , name ) ;
23836: LD_VAR 0 1
23840: PPUSH
23841: LD_VAR 0 3
23845: PPUSH
23846: CALL_OW 500
// base := GetBase ( base_dep ) ;
23850: LD_ADDR_VAR 0 15
23854: PUSH
23855: LD_VAR 0 1
23859: PPUSH
23860: CALL_OW 274
23864: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
23865: LD_ADDR_VAR 0 16
23869: PUSH
23870: LD_VAR 0 1
23874: PPUSH
23875: CALL_OW 255
23879: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
23880: LD_ADDR_VAR 0 17
23884: PUSH
23885: LD_VAR 0 1
23889: PPUSH
23890: CALL_OW 248
23894: ST_TO_ADDR
// if sources then
23895: LD_VAR 0 5
23899: IFFALSE 23946
// for i = 1 to 3 do
23901: LD_ADDR_VAR 0 8
23905: PUSH
23906: DOUBLE
23907: LD_INT 1
23909: DEC
23910: ST_TO_ADDR
23911: LD_INT 3
23913: PUSH
23914: FOR_TO
23915: IFFALSE 23944
// AddResourceType ( base , i , sources [ i ] ) ;
23917: LD_VAR 0 15
23921: PPUSH
23922: LD_VAR 0 8
23926: PPUSH
23927: LD_VAR 0 5
23931: PUSH
23932: LD_VAR 0 8
23936: ARRAY
23937: PPUSH
23938: CALL_OW 276
23942: GO 23914
23944: POP
23945: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
23946: LD_ADDR_VAR 0 18
23950: PUSH
23951: LD_VAR 0 15
23955: PPUSH
23956: LD_VAR 0 2
23960: PPUSH
23961: LD_INT 1
23963: PPUSH
23964: CALL 23207 0 3
23968: ST_TO_ADDR
// InitHc ;
23969: CALL_OW 19
// InitUc ;
23973: CALL_OW 18
// uc_side := side ;
23977: LD_ADDR_OWVAR 20
23981: PUSH
23982: LD_VAR 0 16
23986: ST_TO_ADDR
// uc_nation := nation ;
23987: LD_ADDR_OWVAR 21
23991: PUSH
23992: LD_VAR 0 17
23996: ST_TO_ADDR
// if buildings then
23997: LD_VAR 0 18
24001: IFFALSE 25323
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
24003: LD_ADDR_VAR 0 19
24007: PUSH
24008: LD_VAR 0 18
24012: PPUSH
24013: LD_INT 2
24015: PUSH
24016: LD_INT 30
24018: PUSH
24019: LD_INT 29
24021: PUSH
24022: EMPTY
24023: LIST
24024: LIST
24025: PUSH
24026: LD_INT 30
24028: PUSH
24029: LD_INT 30
24031: PUSH
24032: EMPTY
24033: LIST
24034: LIST
24035: PUSH
24036: EMPTY
24037: LIST
24038: LIST
24039: LIST
24040: PPUSH
24041: CALL_OW 72
24045: ST_TO_ADDR
// if tmp then
24046: LD_VAR 0 19
24050: IFFALSE 24098
// for i in tmp do
24052: LD_ADDR_VAR 0 8
24056: PUSH
24057: LD_VAR 0 19
24061: PUSH
24062: FOR_IN
24063: IFFALSE 24096
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
24065: LD_VAR 0 8
24069: PPUSH
24070: CALL_OW 250
24074: PPUSH
24075: LD_VAR 0 8
24079: PPUSH
24080: CALL_OW 251
24084: PPUSH
24085: LD_VAR 0 16
24089: PPUSH
24090: CALL_OW 441
24094: GO 24062
24096: POP
24097: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
24098: LD_VAR 0 18
24102: PPUSH
24103: LD_INT 2
24105: PUSH
24106: LD_INT 30
24108: PUSH
24109: LD_INT 32
24111: PUSH
24112: EMPTY
24113: LIST
24114: LIST
24115: PUSH
24116: LD_INT 30
24118: PUSH
24119: LD_INT 33
24121: PUSH
24122: EMPTY
24123: LIST
24124: LIST
24125: PUSH
24126: EMPTY
24127: LIST
24128: LIST
24129: LIST
24130: PPUSH
24131: CALL_OW 72
24135: IFFALSE 24223
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
24137: LD_ADDR_VAR 0 8
24141: PUSH
24142: LD_VAR 0 18
24146: PPUSH
24147: LD_INT 2
24149: PUSH
24150: LD_INT 30
24152: PUSH
24153: LD_INT 32
24155: PUSH
24156: EMPTY
24157: LIST
24158: LIST
24159: PUSH
24160: LD_INT 30
24162: PUSH
24163: LD_INT 33
24165: PUSH
24166: EMPTY
24167: LIST
24168: LIST
24169: PUSH
24170: EMPTY
24171: LIST
24172: LIST
24173: LIST
24174: PPUSH
24175: CALL_OW 72
24179: PUSH
24180: FOR_IN
24181: IFFALSE 24221
// begin if not GetBWeapon ( i ) then
24183: LD_VAR 0 8
24187: PPUSH
24188: CALL_OW 269
24192: NOT
24193: IFFALSE 24219
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
24195: LD_VAR 0 8
24199: PPUSH
24200: LD_VAR 0 8
24204: PPUSH
24205: LD_VAR 0 2
24209: PPUSH
24210: CALL 25469 0 2
24214: PPUSH
24215: CALL_OW 431
// end ;
24219: GO 24180
24221: POP
24222: POP
// end ; for i = 1 to personel do
24223: LD_ADDR_VAR 0 8
24227: PUSH
24228: DOUBLE
24229: LD_INT 1
24231: DEC
24232: ST_TO_ADDR
24233: LD_VAR 0 6
24237: PUSH
24238: FOR_TO
24239: IFFALSE 25303
// begin if i > 4 then
24241: LD_VAR 0 8
24245: PUSH
24246: LD_INT 4
24248: GREATER
24249: IFFALSE 24253
// break ;
24251: GO 25303
// case i of 1 :
24253: LD_VAR 0 8
24257: PUSH
24258: LD_INT 1
24260: DOUBLE
24261: EQUAL
24262: IFTRUE 24266
24264: GO 24346
24266: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
24267: LD_ADDR_VAR 0 12
24271: PUSH
24272: LD_VAR 0 18
24276: PPUSH
24277: LD_INT 22
24279: PUSH
24280: LD_VAR 0 16
24284: PUSH
24285: EMPTY
24286: LIST
24287: LIST
24288: PUSH
24289: LD_INT 58
24291: PUSH
24292: EMPTY
24293: LIST
24294: PUSH
24295: LD_INT 2
24297: PUSH
24298: LD_INT 30
24300: PUSH
24301: LD_INT 32
24303: PUSH
24304: EMPTY
24305: LIST
24306: LIST
24307: PUSH
24308: LD_INT 30
24310: PUSH
24311: LD_INT 4
24313: PUSH
24314: EMPTY
24315: LIST
24316: LIST
24317: PUSH
24318: LD_INT 30
24320: PUSH
24321: LD_INT 5
24323: PUSH
24324: EMPTY
24325: LIST
24326: LIST
24327: PUSH
24328: EMPTY
24329: LIST
24330: LIST
24331: LIST
24332: LIST
24333: PUSH
24334: EMPTY
24335: LIST
24336: LIST
24337: LIST
24338: PPUSH
24339: CALL_OW 72
24343: ST_TO_ADDR
24344: GO 24568
24346: LD_INT 2
24348: DOUBLE
24349: EQUAL
24350: IFTRUE 24354
24352: GO 24416
24354: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
24355: LD_ADDR_VAR 0 12
24359: PUSH
24360: LD_VAR 0 18
24364: PPUSH
24365: LD_INT 22
24367: PUSH
24368: LD_VAR 0 16
24372: PUSH
24373: EMPTY
24374: LIST
24375: LIST
24376: PUSH
24377: LD_INT 2
24379: PUSH
24380: LD_INT 30
24382: PUSH
24383: LD_INT 0
24385: PUSH
24386: EMPTY
24387: LIST
24388: LIST
24389: PUSH
24390: LD_INT 30
24392: PUSH
24393: LD_INT 1
24395: PUSH
24396: EMPTY
24397: LIST
24398: LIST
24399: PUSH
24400: EMPTY
24401: LIST
24402: LIST
24403: LIST
24404: PUSH
24405: EMPTY
24406: LIST
24407: LIST
24408: PPUSH
24409: CALL_OW 72
24413: ST_TO_ADDR
24414: GO 24568
24416: LD_INT 3
24418: DOUBLE
24419: EQUAL
24420: IFTRUE 24424
24422: GO 24486
24424: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
24425: LD_ADDR_VAR 0 12
24429: PUSH
24430: LD_VAR 0 18
24434: PPUSH
24435: LD_INT 22
24437: PUSH
24438: LD_VAR 0 16
24442: PUSH
24443: EMPTY
24444: LIST
24445: LIST
24446: PUSH
24447: LD_INT 2
24449: PUSH
24450: LD_INT 30
24452: PUSH
24453: LD_INT 2
24455: PUSH
24456: EMPTY
24457: LIST
24458: LIST
24459: PUSH
24460: LD_INT 30
24462: PUSH
24463: LD_INT 3
24465: PUSH
24466: EMPTY
24467: LIST
24468: LIST
24469: PUSH
24470: EMPTY
24471: LIST
24472: LIST
24473: LIST
24474: PUSH
24475: EMPTY
24476: LIST
24477: LIST
24478: PPUSH
24479: CALL_OW 72
24483: ST_TO_ADDR
24484: GO 24568
24486: LD_INT 4
24488: DOUBLE
24489: EQUAL
24490: IFTRUE 24494
24492: GO 24567
24494: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
24495: LD_ADDR_VAR 0 12
24499: PUSH
24500: LD_VAR 0 18
24504: PPUSH
24505: LD_INT 22
24507: PUSH
24508: LD_VAR 0 16
24512: PUSH
24513: EMPTY
24514: LIST
24515: LIST
24516: PUSH
24517: LD_INT 2
24519: PUSH
24520: LD_INT 30
24522: PUSH
24523: LD_INT 6
24525: PUSH
24526: EMPTY
24527: LIST
24528: LIST
24529: PUSH
24530: LD_INT 30
24532: PUSH
24533: LD_INT 7
24535: PUSH
24536: EMPTY
24537: LIST
24538: LIST
24539: PUSH
24540: LD_INT 30
24542: PUSH
24543: LD_INT 8
24545: PUSH
24546: EMPTY
24547: LIST
24548: LIST
24549: PUSH
24550: EMPTY
24551: LIST
24552: LIST
24553: LIST
24554: LIST
24555: PUSH
24556: EMPTY
24557: LIST
24558: LIST
24559: PPUSH
24560: CALL_OW 72
24564: ST_TO_ADDR
24565: GO 24568
24567: POP
// if i = 1 then
24568: LD_VAR 0 8
24572: PUSH
24573: LD_INT 1
24575: EQUAL
24576: IFFALSE 24687
// begin tmp := [ ] ;
24578: LD_ADDR_VAR 0 19
24582: PUSH
24583: EMPTY
24584: ST_TO_ADDR
// for j in f do
24585: LD_ADDR_VAR 0 9
24589: PUSH
24590: LD_VAR 0 12
24594: PUSH
24595: FOR_IN
24596: IFFALSE 24669
// if GetBType ( j ) = b_bunker then
24598: LD_VAR 0 9
24602: PPUSH
24603: CALL_OW 266
24607: PUSH
24608: LD_INT 32
24610: EQUAL
24611: IFFALSE 24638
// tmp := Insert ( tmp , 1 , j ) else
24613: LD_ADDR_VAR 0 19
24617: PUSH
24618: LD_VAR 0 19
24622: PPUSH
24623: LD_INT 1
24625: PPUSH
24626: LD_VAR 0 9
24630: PPUSH
24631: CALL_OW 2
24635: ST_TO_ADDR
24636: GO 24667
// tmp := Insert ( tmp , tmp + 1 , j ) ;
24638: LD_ADDR_VAR 0 19
24642: PUSH
24643: LD_VAR 0 19
24647: PPUSH
24648: LD_VAR 0 19
24652: PUSH
24653: LD_INT 1
24655: PLUS
24656: PPUSH
24657: LD_VAR 0 9
24661: PPUSH
24662: CALL_OW 2
24666: ST_TO_ADDR
24667: GO 24595
24669: POP
24670: POP
// if tmp then
24671: LD_VAR 0 19
24675: IFFALSE 24687
// f := tmp ;
24677: LD_ADDR_VAR 0 12
24681: PUSH
24682: LD_VAR 0 19
24686: ST_TO_ADDR
// end ; x := personel [ i ] ;
24687: LD_ADDR_VAR 0 13
24691: PUSH
24692: LD_VAR 0 6
24696: PUSH
24697: LD_VAR 0 8
24701: ARRAY
24702: ST_TO_ADDR
// if x = - 1 then
24703: LD_VAR 0 13
24707: PUSH
24708: LD_INT 1
24710: NEG
24711: EQUAL
24712: IFFALSE 24921
// begin for j in f do
24714: LD_ADDR_VAR 0 9
24718: PUSH
24719: LD_VAR 0 12
24723: PUSH
24724: FOR_IN
24725: IFFALSE 24917
// repeat InitHc ;
24727: CALL_OW 19
// if GetBType ( j ) = b_barracks then
24731: LD_VAR 0 9
24735: PPUSH
24736: CALL_OW 266
24740: PUSH
24741: LD_INT 5
24743: EQUAL
24744: IFFALSE 24814
// begin if UnitsInside ( j ) < 3 then
24746: LD_VAR 0 9
24750: PPUSH
24751: CALL_OW 313
24755: PUSH
24756: LD_INT 3
24758: LESS
24759: IFFALSE 24795
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
24761: LD_INT 0
24763: PPUSH
24764: LD_INT 5
24766: PUSH
24767: LD_INT 8
24769: PUSH
24770: LD_INT 9
24772: PUSH
24773: EMPTY
24774: LIST
24775: LIST
24776: LIST
24777: PUSH
24778: LD_VAR 0 17
24782: ARRAY
24783: PPUSH
24784: LD_VAR 0 4
24788: PPUSH
24789: CALL_OW 380
24793: GO 24812
// PrepareHuman ( false , i , skill ) ;
24795: LD_INT 0
24797: PPUSH
24798: LD_VAR 0 8
24802: PPUSH
24803: LD_VAR 0 4
24807: PPUSH
24808: CALL_OW 380
// end else
24812: GO 24831
// PrepareHuman ( false , i , skill ) ;
24814: LD_INT 0
24816: PPUSH
24817: LD_VAR 0 8
24821: PPUSH
24822: LD_VAR 0 4
24826: PPUSH
24827: CALL_OW 380
// un := CreateHuman ;
24831: LD_ADDR_VAR 0 14
24835: PUSH
24836: CALL_OW 44
24840: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
24841: LD_ADDR_VAR 0 7
24845: PUSH
24846: LD_VAR 0 7
24850: PPUSH
24851: LD_INT 1
24853: PPUSH
24854: LD_VAR 0 14
24858: PPUSH
24859: CALL_OW 2
24863: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
24864: LD_VAR 0 14
24868: PPUSH
24869: LD_VAR 0 9
24873: PPUSH
24874: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
24878: LD_VAR 0 9
24882: PPUSH
24883: CALL_OW 313
24887: PUSH
24888: LD_INT 6
24890: EQUAL
24891: PUSH
24892: LD_VAR 0 9
24896: PPUSH
24897: CALL_OW 266
24901: PUSH
24902: LD_INT 32
24904: PUSH
24905: LD_INT 31
24907: PUSH
24908: EMPTY
24909: LIST
24910: LIST
24911: IN
24912: OR
24913: IFFALSE 24727
24915: GO 24724
24917: POP
24918: POP
// end else
24919: GO 25301
// for j = 1 to x do
24921: LD_ADDR_VAR 0 9
24925: PUSH
24926: DOUBLE
24927: LD_INT 1
24929: DEC
24930: ST_TO_ADDR
24931: LD_VAR 0 13
24935: PUSH
24936: FOR_TO
24937: IFFALSE 25299
// begin InitHc ;
24939: CALL_OW 19
// if not f then
24943: LD_VAR 0 12
24947: NOT
24948: IFFALSE 25037
// begin PrepareHuman ( false , i , skill ) ;
24950: LD_INT 0
24952: PPUSH
24953: LD_VAR 0 8
24957: PPUSH
24958: LD_VAR 0 4
24962: PPUSH
24963: CALL_OW 380
// un := CreateHuman ;
24967: LD_ADDR_VAR 0 14
24971: PUSH
24972: CALL_OW 44
24976: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
24977: LD_ADDR_VAR 0 7
24981: PUSH
24982: LD_VAR 0 7
24986: PPUSH
24987: LD_INT 1
24989: PPUSH
24990: LD_VAR 0 14
24994: PPUSH
24995: CALL_OW 2
24999: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
25000: LD_VAR 0 14
25004: PPUSH
25005: LD_VAR 0 1
25009: PPUSH
25010: CALL_OW 250
25014: PPUSH
25015: LD_VAR 0 1
25019: PPUSH
25020: CALL_OW 251
25024: PPUSH
25025: LD_INT 10
25027: PPUSH
25028: LD_INT 0
25030: PPUSH
25031: CALL_OW 50
// continue ;
25035: GO 24936
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
25037: LD_VAR 0 12
25041: PUSH
25042: LD_INT 1
25044: ARRAY
25045: PPUSH
25046: CALL_OW 313
25050: PUSH
25051: LD_VAR 0 12
25055: PUSH
25056: LD_INT 1
25058: ARRAY
25059: PPUSH
25060: CALL_OW 266
25064: PUSH
25065: LD_INT 32
25067: PUSH
25068: LD_INT 31
25070: PUSH
25071: EMPTY
25072: LIST
25073: LIST
25074: IN
25075: AND
25076: PUSH
25077: LD_VAR 0 12
25081: PUSH
25082: LD_INT 1
25084: ARRAY
25085: PPUSH
25086: CALL_OW 313
25090: PUSH
25091: LD_INT 6
25093: EQUAL
25094: OR
25095: IFFALSE 25115
// f := Delete ( f , 1 ) ;
25097: LD_ADDR_VAR 0 12
25101: PUSH
25102: LD_VAR 0 12
25106: PPUSH
25107: LD_INT 1
25109: PPUSH
25110: CALL_OW 3
25114: ST_TO_ADDR
// if not f then
25115: LD_VAR 0 12
25119: NOT
25120: IFFALSE 25138
// begin x := x + 2 ;
25122: LD_ADDR_VAR 0 13
25126: PUSH
25127: LD_VAR 0 13
25131: PUSH
25132: LD_INT 2
25134: PLUS
25135: ST_TO_ADDR
// continue ;
25136: GO 24936
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
25138: LD_VAR 0 12
25142: PUSH
25143: LD_INT 1
25145: ARRAY
25146: PPUSH
25147: CALL_OW 266
25151: PUSH
25152: LD_INT 5
25154: EQUAL
25155: IFFALSE 25229
// begin if UnitsInside ( f [ 1 ] ) < 3 then
25157: LD_VAR 0 12
25161: PUSH
25162: LD_INT 1
25164: ARRAY
25165: PPUSH
25166: CALL_OW 313
25170: PUSH
25171: LD_INT 3
25173: LESS
25174: IFFALSE 25210
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
25176: LD_INT 0
25178: PPUSH
25179: LD_INT 5
25181: PUSH
25182: LD_INT 8
25184: PUSH
25185: LD_INT 9
25187: PUSH
25188: EMPTY
25189: LIST
25190: LIST
25191: LIST
25192: PUSH
25193: LD_VAR 0 17
25197: ARRAY
25198: PPUSH
25199: LD_VAR 0 4
25203: PPUSH
25204: CALL_OW 380
25208: GO 25227
// PrepareHuman ( false , i , skill ) ;
25210: LD_INT 0
25212: PPUSH
25213: LD_VAR 0 8
25217: PPUSH
25218: LD_VAR 0 4
25222: PPUSH
25223: CALL_OW 380
// end else
25227: GO 25246
// PrepareHuman ( false , i , skill ) ;
25229: LD_INT 0
25231: PPUSH
25232: LD_VAR 0 8
25236: PPUSH
25237: LD_VAR 0 4
25241: PPUSH
25242: CALL_OW 380
// un := CreateHuman ;
25246: LD_ADDR_VAR 0 14
25250: PUSH
25251: CALL_OW 44
25255: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25256: LD_ADDR_VAR 0 7
25260: PUSH
25261: LD_VAR 0 7
25265: PPUSH
25266: LD_INT 1
25268: PPUSH
25269: LD_VAR 0 14
25273: PPUSH
25274: CALL_OW 2
25278: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
25279: LD_VAR 0 14
25283: PPUSH
25284: LD_VAR 0 12
25288: PUSH
25289: LD_INT 1
25291: ARRAY
25292: PPUSH
25293: CALL_OW 52
// end ;
25297: GO 24936
25299: POP
25300: POP
// end ;
25301: GO 24238
25303: POP
25304: POP
// result := result ^ buildings ;
25305: LD_ADDR_VAR 0 7
25309: PUSH
25310: LD_VAR 0 7
25314: PUSH
25315: LD_VAR 0 18
25319: ADD
25320: ST_TO_ADDR
// end else
25321: GO 25464
// begin for i = 1 to personel do
25323: LD_ADDR_VAR 0 8
25327: PUSH
25328: DOUBLE
25329: LD_INT 1
25331: DEC
25332: ST_TO_ADDR
25333: LD_VAR 0 6
25337: PUSH
25338: FOR_TO
25339: IFFALSE 25462
// begin if i > 4 then
25341: LD_VAR 0 8
25345: PUSH
25346: LD_INT 4
25348: GREATER
25349: IFFALSE 25353
// break ;
25351: GO 25462
// x := personel [ i ] ;
25353: LD_ADDR_VAR 0 13
25357: PUSH
25358: LD_VAR 0 6
25362: PUSH
25363: LD_VAR 0 8
25367: ARRAY
25368: ST_TO_ADDR
// if x = - 1 then
25369: LD_VAR 0 13
25373: PUSH
25374: LD_INT 1
25376: NEG
25377: EQUAL
25378: IFFALSE 25382
// continue ;
25380: GO 25338
// PrepareHuman ( false , i , skill ) ;
25382: LD_INT 0
25384: PPUSH
25385: LD_VAR 0 8
25389: PPUSH
25390: LD_VAR 0 4
25394: PPUSH
25395: CALL_OW 380
// un := CreateHuman ;
25399: LD_ADDR_VAR 0 14
25403: PUSH
25404: CALL_OW 44
25408: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
25409: LD_VAR 0 14
25413: PPUSH
25414: LD_VAR 0 1
25418: PPUSH
25419: CALL_OW 250
25423: PPUSH
25424: LD_VAR 0 1
25428: PPUSH
25429: CALL_OW 251
25433: PPUSH
25434: LD_INT 10
25436: PPUSH
25437: LD_INT 0
25439: PPUSH
25440: CALL_OW 50
// result := result ^ un ;
25444: LD_ADDR_VAR 0 7
25448: PUSH
25449: LD_VAR 0 7
25453: PUSH
25454: LD_VAR 0 14
25458: ADD
25459: ST_TO_ADDR
// end ;
25460: GO 25338
25462: POP
25463: POP
// end ; end ;
25464: LD_VAR 0 7
25468: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
25469: LD_INT 0
25471: PPUSH
25472: PPUSH
25473: PPUSH
25474: PPUSH
25475: PPUSH
25476: PPUSH
25477: PPUSH
25478: PPUSH
25479: PPUSH
25480: PPUSH
25481: PPUSH
25482: PPUSH
25483: PPUSH
25484: PPUSH
25485: PPUSH
25486: PPUSH
// result := false ;
25487: LD_ADDR_VAR 0 3
25491: PUSH
25492: LD_INT 0
25494: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
25495: LD_VAR 0 1
25499: NOT
25500: PUSH
25501: LD_VAR 0 1
25505: PPUSH
25506: CALL_OW 266
25510: PUSH
25511: LD_INT 32
25513: PUSH
25514: LD_INT 33
25516: PUSH
25517: EMPTY
25518: LIST
25519: LIST
25520: IN
25521: NOT
25522: OR
25523: IFFALSE 25527
// exit ;
25525: GO 26636
// nat := GetNation ( tower ) ;
25527: LD_ADDR_VAR 0 12
25531: PUSH
25532: LD_VAR 0 1
25536: PPUSH
25537: CALL_OW 248
25541: ST_TO_ADDR
// side := GetSide ( tower ) ;
25542: LD_ADDR_VAR 0 16
25546: PUSH
25547: LD_VAR 0 1
25551: PPUSH
25552: CALL_OW 255
25556: ST_TO_ADDR
// x := GetX ( tower ) ;
25557: LD_ADDR_VAR 0 10
25561: PUSH
25562: LD_VAR 0 1
25566: PPUSH
25567: CALL_OW 250
25571: ST_TO_ADDR
// y := GetY ( tower ) ;
25572: LD_ADDR_VAR 0 11
25576: PUSH
25577: LD_VAR 0 1
25581: PPUSH
25582: CALL_OW 251
25586: ST_TO_ADDR
// if not x or not y then
25587: LD_VAR 0 10
25591: NOT
25592: PUSH
25593: LD_VAR 0 11
25597: NOT
25598: OR
25599: IFFALSE 25603
// exit ;
25601: GO 26636
// weapon := 0 ;
25603: LD_ADDR_VAR 0 18
25607: PUSH
25608: LD_INT 0
25610: ST_TO_ADDR
// fac_list := [ ] ;
25611: LD_ADDR_VAR 0 17
25615: PUSH
25616: EMPTY
25617: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
25618: LD_ADDR_VAR 0 6
25622: PUSH
25623: LD_VAR 0 1
25627: PPUSH
25628: CALL_OW 274
25632: PPUSH
25633: LD_VAR 0 2
25637: PPUSH
25638: LD_INT 0
25640: PPUSH
25641: CALL 23207 0 3
25645: PPUSH
25646: LD_INT 30
25648: PUSH
25649: LD_INT 3
25651: PUSH
25652: EMPTY
25653: LIST
25654: LIST
25655: PPUSH
25656: CALL_OW 72
25660: ST_TO_ADDR
// if not factories then
25661: LD_VAR 0 6
25665: NOT
25666: IFFALSE 25670
// exit ;
25668: GO 26636
// for i in factories do
25670: LD_ADDR_VAR 0 8
25674: PUSH
25675: LD_VAR 0 6
25679: PUSH
25680: FOR_IN
25681: IFFALSE 25706
// fac_list := fac_list union AvailableWeaponList ( i ) ;
25683: LD_ADDR_VAR 0 17
25687: PUSH
25688: LD_VAR 0 17
25692: PUSH
25693: LD_VAR 0 8
25697: PPUSH
25698: CALL_OW 478
25702: UNION
25703: ST_TO_ADDR
25704: GO 25680
25706: POP
25707: POP
// if not fac_list then
25708: LD_VAR 0 17
25712: NOT
25713: IFFALSE 25717
// exit ;
25715: GO 26636
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
25717: LD_ADDR_VAR 0 5
25721: PUSH
25722: LD_INT 4
25724: PUSH
25725: LD_INT 5
25727: PUSH
25728: LD_INT 9
25730: PUSH
25731: LD_INT 10
25733: PUSH
25734: LD_INT 6
25736: PUSH
25737: LD_INT 7
25739: PUSH
25740: LD_INT 11
25742: PUSH
25743: EMPTY
25744: LIST
25745: LIST
25746: LIST
25747: LIST
25748: LIST
25749: LIST
25750: LIST
25751: PUSH
25752: LD_INT 27
25754: PUSH
25755: LD_INT 28
25757: PUSH
25758: LD_INT 26
25760: PUSH
25761: LD_INT 30
25763: PUSH
25764: EMPTY
25765: LIST
25766: LIST
25767: LIST
25768: LIST
25769: PUSH
25770: LD_INT 43
25772: PUSH
25773: LD_INT 44
25775: PUSH
25776: LD_INT 46
25778: PUSH
25779: LD_INT 45
25781: PUSH
25782: LD_INT 47
25784: PUSH
25785: LD_INT 49
25787: PUSH
25788: EMPTY
25789: LIST
25790: LIST
25791: LIST
25792: LIST
25793: LIST
25794: LIST
25795: PUSH
25796: EMPTY
25797: LIST
25798: LIST
25799: LIST
25800: PUSH
25801: LD_VAR 0 12
25805: ARRAY
25806: ST_TO_ADDR
// list := list isect fac_list ;
25807: LD_ADDR_VAR 0 5
25811: PUSH
25812: LD_VAR 0 5
25816: PUSH
25817: LD_VAR 0 17
25821: ISECT
25822: ST_TO_ADDR
// if not list then
25823: LD_VAR 0 5
25827: NOT
25828: IFFALSE 25832
// exit ;
25830: GO 26636
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
25832: LD_VAR 0 12
25836: PUSH
25837: LD_INT 3
25839: EQUAL
25840: PUSH
25841: LD_INT 49
25843: PUSH
25844: LD_VAR 0 5
25848: IN
25849: AND
25850: PUSH
25851: LD_INT 31
25853: PPUSH
25854: LD_VAR 0 16
25858: PPUSH
25859: CALL_OW 321
25863: PUSH
25864: LD_INT 2
25866: EQUAL
25867: AND
25868: IFFALSE 25928
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
25870: LD_INT 22
25872: PUSH
25873: LD_VAR 0 16
25877: PUSH
25878: EMPTY
25879: LIST
25880: LIST
25881: PUSH
25882: LD_INT 35
25884: PUSH
25885: LD_INT 49
25887: PUSH
25888: EMPTY
25889: LIST
25890: LIST
25891: PUSH
25892: LD_INT 91
25894: PUSH
25895: LD_VAR 0 1
25899: PUSH
25900: LD_INT 10
25902: PUSH
25903: EMPTY
25904: LIST
25905: LIST
25906: LIST
25907: PUSH
25908: EMPTY
25909: LIST
25910: LIST
25911: LIST
25912: PPUSH
25913: CALL_OW 69
25917: NOT
25918: IFFALSE 25928
// weapon := ru_time_lapser ;
25920: LD_ADDR_VAR 0 18
25924: PUSH
25925: LD_INT 49
25927: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
25928: LD_VAR 0 12
25932: PUSH
25933: LD_INT 1
25935: PUSH
25936: LD_INT 2
25938: PUSH
25939: EMPTY
25940: LIST
25941: LIST
25942: IN
25943: PUSH
25944: LD_INT 11
25946: PUSH
25947: LD_VAR 0 5
25951: IN
25952: PUSH
25953: LD_INT 30
25955: PUSH
25956: LD_VAR 0 5
25960: IN
25961: OR
25962: AND
25963: PUSH
25964: LD_INT 6
25966: PPUSH
25967: LD_VAR 0 16
25971: PPUSH
25972: CALL_OW 321
25976: PUSH
25977: LD_INT 2
25979: EQUAL
25980: AND
25981: IFFALSE 26146
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
25983: LD_INT 22
25985: PUSH
25986: LD_VAR 0 16
25990: PUSH
25991: EMPTY
25992: LIST
25993: LIST
25994: PUSH
25995: LD_INT 2
25997: PUSH
25998: LD_INT 35
26000: PUSH
26001: LD_INT 11
26003: PUSH
26004: EMPTY
26005: LIST
26006: LIST
26007: PUSH
26008: LD_INT 35
26010: PUSH
26011: LD_INT 30
26013: PUSH
26014: EMPTY
26015: LIST
26016: LIST
26017: PUSH
26018: EMPTY
26019: LIST
26020: LIST
26021: LIST
26022: PUSH
26023: LD_INT 91
26025: PUSH
26026: LD_VAR 0 1
26030: PUSH
26031: LD_INT 18
26033: PUSH
26034: EMPTY
26035: LIST
26036: LIST
26037: LIST
26038: PUSH
26039: EMPTY
26040: LIST
26041: LIST
26042: LIST
26043: PPUSH
26044: CALL_OW 69
26048: NOT
26049: PUSH
26050: LD_INT 22
26052: PUSH
26053: LD_VAR 0 16
26057: PUSH
26058: EMPTY
26059: LIST
26060: LIST
26061: PUSH
26062: LD_INT 2
26064: PUSH
26065: LD_INT 30
26067: PUSH
26068: LD_INT 32
26070: PUSH
26071: EMPTY
26072: LIST
26073: LIST
26074: PUSH
26075: LD_INT 30
26077: PUSH
26078: LD_INT 33
26080: PUSH
26081: EMPTY
26082: LIST
26083: LIST
26084: PUSH
26085: EMPTY
26086: LIST
26087: LIST
26088: LIST
26089: PUSH
26090: LD_INT 91
26092: PUSH
26093: LD_VAR 0 1
26097: PUSH
26098: LD_INT 12
26100: PUSH
26101: EMPTY
26102: LIST
26103: LIST
26104: LIST
26105: PUSH
26106: EMPTY
26107: LIST
26108: LIST
26109: LIST
26110: PUSH
26111: EMPTY
26112: LIST
26113: PPUSH
26114: CALL_OW 69
26118: PUSH
26119: LD_INT 2
26121: GREATER
26122: AND
26123: IFFALSE 26146
// weapon := [ us_radar , ar_radar ] [ nat ] ;
26125: LD_ADDR_VAR 0 18
26129: PUSH
26130: LD_INT 11
26132: PUSH
26133: LD_INT 30
26135: PUSH
26136: EMPTY
26137: LIST
26138: LIST
26139: PUSH
26140: LD_VAR 0 12
26144: ARRAY
26145: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
26146: LD_VAR 0 18
26150: NOT
26151: PUSH
26152: LD_INT 40
26154: PPUSH
26155: LD_VAR 0 16
26159: PPUSH
26160: CALL_OW 321
26164: PUSH
26165: LD_INT 2
26167: EQUAL
26168: AND
26169: PUSH
26170: LD_INT 7
26172: PUSH
26173: LD_VAR 0 5
26177: IN
26178: PUSH
26179: LD_INT 28
26181: PUSH
26182: LD_VAR 0 5
26186: IN
26187: OR
26188: PUSH
26189: LD_INT 45
26191: PUSH
26192: LD_VAR 0 5
26196: IN
26197: OR
26198: AND
26199: IFFALSE 26453
// begin hex := GetHexInfo ( x , y ) ;
26201: LD_ADDR_VAR 0 4
26205: PUSH
26206: LD_VAR 0 10
26210: PPUSH
26211: LD_VAR 0 11
26215: PPUSH
26216: CALL_OW 546
26220: ST_TO_ADDR
// if hex [ 1 ] then
26221: LD_VAR 0 4
26225: PUSH
26226: LD_INT 1
26228: ARRAY
26229: IFFALSE 26233
// exit ;
26231: GO 26636
// height := hex [ 2 ] ;
26233: LD_ADDR_VAR 0 15
26237: PUSH
26238: LD_VAR 0 4
26242: PUSH
26243: LD_INT 2
26245: ARRAY
26246: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
26247: LD_ADDR_VAR 0 14
26251: PUSH
26252: LD_INT 0
26254: PUSH
26255: LD_INT 2
26257: PUSH
26258: LD_INT 3
26260: PUSH
26261: LD_INT 5
26263: PUSH
26264: EMPTY
26265: LIST
26266: LIST
26267: LIST
26268: LIST
26269: ST_TO_ADDR
// for i in tmp do
26270: LD_ADDR_VAR 0 8
26274: PUSH
26275: LD_VAR 0 14
26279: PUSH
26280: FOR_IN
26281: IFFALSE 26451
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
26283: LD_ADDR_VAR 0 9
26287: PUSH
26288: LD_VAR 0 10
26292: PPUSH
26293: LD_VAR 0 8
26297: PPUSH
26298: LD_INT 5
26300: PPUSH
26301: CALL_OW 272
26305: PUSH
26306: LD_VAR 0 11
26310: PPUSH
26311: LD_VAR 0 8
26315: PPUSH
26316: LD_INT 5
26318: PPUSH
26319: CALL_OW 273
26323: PUSH
26324: EMPTY
26325: LIST
26326: LIST
26327: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
26328: LD_VAR 0 9
26332: PUSH
26333: LD_INT 1
26335: ARRAY
26336: PPUSH
26337: LD_VAR 0 9
26341: PUSH
26342: LD_INT 2
26344: ARRAY
26345: PPUSH
26346: CALL_OW 488
26350: IFFALSE 26449
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
26352: LD_ADDR_VAR 0 4
26356: PUSH
26357: LD_VAR 0 9
26361: PUSH
26362: LD_INT 1
26364: ARRAY
26365: PPUSH
26366: LD_VAR 0 9
26370: PUSH
26371: LD_INT 2
26373: ARRAY
26374: PPUSH
26375: CALL_OW 546
26379: ST_TO_ADDR
// if hex [ 1 ] then
26380: LD_VAR 0 4
26384: PUSH
26385: LD_INT 1
26387: ARRAY
26388: IFFALSE 26392
// continue ;
26390: GO 26280
// h := hex [ 2 ] ;
26392: LD_ADDR_VAR 0 13
26396: PUSH
26397: LD_VAR 0 4
26401: PUSH
26402: LD_INT 2
26404: ARRAY
26405: ST_TO_ADDR
// if h + 7 < height then
26406: LD_VAR 0 13
26410: PUSH
26411: LD_INT 7
26413: PLUS
26414: PUSH
26415: LD_VAR 0 15
26419: LESS
26420: IFFALSE 26449
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
26422: LD_ADDR_VAR 0 18
26426: PUSH
26427: LD_INT 7
26429: PUSH
26430: LD_INT 28
26432: PUSH
26433: LD_INT 45
26435: PUSH
26436: EMPTY
26437: LIST
26438: LIST
26439: LIST
26440: PUSH
26441: LD_VAR 0 12
26445: ARRAY
26446: ST_TO_ADDR
// break ;
26447: GO 26451
// end ; end ; end ;
26449: GO 26280
26451: POP
26452: POP
// end ; if not weapon then
26453: LD_VAR 0 18
26457: NOT
26458: IFFALSE 26518
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
26460: LD_ADDR_VAR 0 5
26464: PUSH
26465: LD_VAR 0 5
26469: PUSH
26470: LD_INT 11
26472: PUSH
26473: LD_INT 30
26475: PUSH
26476: LD_INT 49
26478: PUSH
26479: EMPTY
26480: LIST
26481: LIST
26482: LIST
26483: DIFF
26484: ST_TO_ADDR
// if not list then
26485: LD_VAR 0 5
26489: NOT
26490: IFFALSE 26494
// exit ;
26492: GO 26636
// weapon := list [ rand ( 1 , list ) ] ;
26494: LD_ADDR_VAR 0 18
26498: PUSH
26499: LD_VAR 0 5
26503: PUSH
26504: LD_INT 1
26506: PPUSH
26507: LD_VAR 0 5
26511: PPUSH
26512: CALL_OW 12
26516: ARRAY
26517: ST_TO_ADDR
// end ; if weapon then
26518: LD_VAR 0 18
26522: IFFALSE 26636
// begin tmp := CostOfWeapon ( weapon ) ;
26524: LD_ADDR_VAR 0 14
26528: PUSH
26529: LD_VAR 0 18
26533: PPUSH
26534: CALL_OW 451
26538: ST_TO_ADDR
// j := GetBase ( tower ) ;
26539: LD_ADDR_VAR 0 9
26543: PUSH
26544: LD_VAR 0 1
26548: PPUSH
26549: CALL_OW 274
26553: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
26554: LD_VAR 0 9
26558: PPUSH
26559: LD_INT 1
26561: PPUSH
26562: CALL_OW 275
26566: PUSH
26567: LD_VAR 0 14
26571: PUSH
26572: LD_INT 1
26574: ARRAY
26575: GREATEREQUAL
26576: PUSH
26577: LD_VAR 0 9
26581: PPUSH
26582: LD_INT 2
26584: PPUSH
26585: CALL_OW 275
26589: PUSH
26590: LD_VAR 0 14
26594: PUSH
26595: LD_INT 2
26597: ARRAY
26598: GREATEREQUAL
26599: AND
26600: PUSH
26601: LD_VAR 0 9
26605: PPUSH
26606: LD_INT 3
26608: PPUSH
26609: CALL_OW 275
26613: PUSH
26614: LD_VAR 0 14
26618: PUSH
26619: LD_INT 3
26621: ARRAY
26622: GREATEREQUAL
26623: AND
26624: IFFALSE 26636
// result := weapon ;
26626: LD_ADDR_VAR 0 3
26630: PUSH
26631: LD_VAR 0 18
26635: ST_TO_ADDR
// end ; end ;
26636: LD_VAR 0 3
26640: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
26641: LD_INT 0
26643: PPUSH
26644: PPUSH
// result := true ;
26645: LD_ADDR_VAR 0 3
26649: PUSH
26650: LD_INT 1
26652: ST_TO_ADDR
// if array1 = array2 then
26653: LD_VAR 0 1
26657: PUSH
26658: LD_VAR 0 2
26662: EQUAL
26663: IFFALSE 26723
// begin for i = 1 to array1 do
26665: LD_ADDR_VAR 0 4
26669: PUSH
26670: DOUBLE
26671: LD_INT 1
26673: DEC
26674: ST_TO_ADDR
26675: LD_VAR 0 1
26679: PUSH
26680: FOR_TO
26681: IFFALSE 26719
// if array1 [ i ] <> array2 [ i ] then
26683: LD_VAR 0 1
26687: PUSH
26688: LD_VAR 0 4
26692: ARRAY
26693: PUSH
26694: LD_VAR 0 2
26698: PUSH
26699: LD_VAR 0 4
26703: ARRAY
26704: NONEQUAL
26705: IFFALSE 26717
// begin result := false ;
26707: LD_ADDR_VAR 0 3
26711: PUSH
26712: LD_INT 0
26714: ST_TO_ADDR
// break ;
26715: GO 26719
// end ;
26717: GO 26680
26719: POP
26720: POP
// end else
26721: GO 26731
// result := false ;
26723: LD_ADDR_VAR 0 3
26727: PUSH
26728: LD_INT 0
26730: ST_TO_ADDR
// end ;
26731: LD_VAR 0 3
26735: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
26736: LD_INT 0
26738: PPUSH
26739: PPUSH
// if not array1 or not array2 then
26740: LD_VAR 0 1
26744: NOT
26745: PUSH
26746: LD_VAR 0 2
26750: NOT
26751: OR
26752: IFFALSE 26756
// exit ;
26754: GO 26820
// result := true ;
26756: LD_ADDR_VAR 0 3
26760: PUSH
26761: LD_INT 1
26763: ST_TO_ADDR
// for i = 1 to array1 do
26764: LD_ADDR_VAR 0 4
26768: PUSH
26769: DOUBLE
26770: LD_INT 1
26772: DEC
26773: ST_TO_ADDR
26774: LD_VAR 0 1
26778: PUSH
26779: FOR_TO
26780: IFFALSE 26818
// if array1 [ i ] <> array2 [ i ] then
26782: LD_VAR 0 1
26786: PUSH
26787: LD_VAR 0 4
26791: ARRAY
26792: PUSH
26793: LD_VAR 0 2
26797: PUSH
26798: LD_VAR 0 4
26802: ARRAY
26803: NONEQUAL
26804: IFFALSE 26816
// begin result := false ;
26806: LD_ADDR_VAR 0 3
26810: PUSH
26811: LD_INT 0
26813: ST_TO_ADDR
// break ;
26814: GO 26818
// end ;
26816: GO 26779
26818: POP
26819: POP
// end ;
26820: LD_VAR 0 3
26824: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
26825: LD_INT 0
26827: PPUSH
26828: PPUSH
26829: PPUSH
// pom := GetBase ( fac ) ;
26830: LD_ADDR_VAR 0 5
26834: PUSH
26835: LD_VAR 0 1
26839: PPUSH
26840: CALL_OW 274
26844: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
26845: LD_ADDR_VAR 0 4
26849: PUSH
26850: LD_VAR 0 2
26854: PUSH
26855: LD_INT 1
26857: ARRAY
26858: PPUSH
26859: LD_VAR 0 2
26863: PUSH
26864: LD_INT 2
26866: ARRAY
26867: PPUSH
26868: LD_VAR 0 2
26872: PUSH
26873: LD_INT 3
26875: ARRAY
26876: PPUSH
26877: LD_VAR 0 2
26881: PUSH
26882: LD_INT 4
26884: ARRAY
26885: PPUSH
26886: CALL_OW 449
26890: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
26891: LD_ADDR_VAR 0 3
26895: PUSH
26896: LD_VAR 0 5
26900: PPUSH
26901: LD_INT 1
26903: PPUSH
26904: CALL_OW 275
26908: PUSH
26909: LD_VAR 0 4
26913: PUSH
26914: LD_INT 1
26916: ARRAY
26917: GREATEREQUAL
26918: PUSH
26919: LD_VAR 0 5
26923: PPUSH
26924: LD_INT 2
26926: PPUSH
26927: CALL_OW 275
26931: PUSH
26932: LD_VAR 0 4
26936: PUSH
26937: LD_INT 2
26939: ARRAY
26940: GREATEREQUAL
26941: AND
26942: PUSH
26943: LD_VAR 0 5
26947: PPUSH
26948: LD_INT 3
26950: PPUSH
26951: CALL_OW 275
26955: PUSH
26956: LD_VAR 0 4
26960: PUSH
26961: LD_INT 3
26963: ARRAY
26964: GREATEREQUAL
26965: AND
26966: ST_TO_ADDR
// end ;
26967: LD_VAR 0 3
26971: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
26972: LD_INT 0
26974: PPUSH
26975: PPUSH
26976: PPUSH
26977: PPUSH
// pom := GetBase ( building ) ;
26978: LD_ADDR_VAR 0 3
26982: PUSH
26983: LD_VAR 0 1
26987: PPUSH
26988: CALL_OW 274
26992: ST_TO_ADDR
// if not pom then
26993: LD_VAR 0 3
26997: NOT
26998: IFFALSE 27002
// exit ;
27000: GO 27172
// btype := GetBType ( building ) ;
27002: LD_ADDR_VAR 0 5
27006: PUSH
27007: LD_VAR 0 1
27011: PPUSH
27012: CALL_OW 266
27016: ST_TO_ADDR
// if btype = b_armoury then
27017: LD_VAR 0 5
27021: PUSH
27022: LD_INT 4
27024: EQUAL
27025: IFFALSE 27035
// btype := b_barracks ;
27027: LD_ADDR_VAR 0 5
27031: PUSH
27032: LD_INT 5
27034: ST_TO_ADDR
// if btype = b_depot then
27035: LD_VAR 0 5
27039: PUSH
27040: LD_INT 0
27042: EQUAL
27043: IFFALSE 27053
// btype := b_warehouse ;
27045: LD_ADDR_VAR 0 5
27049: PUSH
27050: LD_INT 1
27052: ST_TO_ADDR
// if btype = b_workshop then
27053: LD_VAR 0 5
27057: PUSH
27058: LD_INT 2
27060: EQUAL
27061: IFFALSE 27071
// btype := b_factory ;
27063: LD_ADDR_VAR 0 5
27067: PUSH
27068: LD_INT 3
27070: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
27071: LD_ADDR_VAR 0 4
27075: PUSH
27076: LD_VAR 0 5
27080: PPUSH
27081: LD_VAR 0 1
27085: PPUSH
27086: CALL_OW 248
27090: PPUSH
27091: CALL_OW 450
27095: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27096: LD_ADDR_VAR 0 2
27100: PUSH
27101: LD_VAR 0 3
27105: PPUSH
27106: LD_INT 1
27108: PPUSH
27109: CALL_OW 275
27113: PUSH
27114: LD_VAR 0 4
27118: PUSH
27119: LD_INT 1
27121: ARRAY
27122: GREATEREQUAL
27123: PUSH
27124: LD_VAR 0 3
27128: PPUSH
27129: LD_INT 2
27131: PPUSH
27132: CALL_OW 275
27136: PUSH
27137: LD_VAR 0 4
27141: PUSH
27142: LD_INT 2
27144: ARRAY
27145: GREATEREQUAL
27146: AND
27147: PUSH
27148: LD_VAR 0 3
27152: PPUSH
27153: LD_INT 3
27155: PPUSH
27156: CALL_OW 275
27160: PUSH
27161: LD_VAR 0 4
27165: PUSH
27166: LD_INT 3
27168: ARRAY
27169: GREATEREQUAL
27170: AND
27171: ST_TO_ADDR
// end ;
27172: LD_VAR 0 2
27176: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
27177: LD_INT 0
27179: PPUSH
27180: PPUSH
27181: PPUSH
// pom := GetBase ( building ) ;
27182: LD_ADDR_VAR 0 4
27186: PUSH
27187: LD_VAR 0 1
27191: PPUSH
27192: CALL_OW 274
27196: ST_TO_ADDR
// if not pom then
27197: LD_VAR 0 4
27201: NOT
27202: IFFALSE 27206
// exit ;
27204: GO 27307
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
27206: LD_ADDR_VAR 0 5
27210: PUSH
27211: LD_VAR 0 2
27215: PPUSH
27216: LD_VAR 0 1
27220: PPUSH
27221: CALL_OW 248
27225: PPUSH
27226: CALL_OW 450
27230: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27231: LD_ADDR_VAR 0 3
27235: PUSH
27236: LD_VAR 0 4
27240: PPUSH
27241: LD_INT 1
27243: PPUSH
27244: CALL_OW 275
27248: PUSH
27249: LD_VAR 0 5
27253: PUSH
27254: LD_INT 1
27256: ARRAY
27257: GREATEREQUAL
27258: PUSH
27259: LD_VAR 0 4
27263: PPUSH
27264: LD_INT 2
27266: PPUSH
27267: CALL_OW 275
27271: PUSH
27272: LD_VAR 0 5
27276: PUSH
27277: LD_INT 2
27279: ARRAY
27280: GREATEREQUAL
27281: AND
27282: PUSH
27283: LD_VAR 0 4
27287: PPUSH
27288: LD_INT 3
27290: PPUSH
27291: CALL_OW 275
27295: PUSH
27296: LD_VAR 0 5
27300: PUSH
27301: LD_INT 3
27303: ARRAY
27304: GREATEREQUAL
27305: AND
27306: ST_TO_ADDR
// end ;
27307: LD_VAR 0 3
27311: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
27312: LD_INT 0
27314: PPUSH
27315: PPUSH
27316: PPUSH
27317: PPUSH
27318: PPUSH
27319: PPUSH
27320: PPUSH
27321: PPUSH
27322: PPUSH
27323: PPUSH
27324: PPUSH
// result := false ;
27325: LD_ADDR_VAR 0 8
27329: PUSH
27330: LD_INT 0
27332: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
27333: LD_VAR 0 5
27337: NOT
27338: PUSH
27339: LD_VAR 0 1
27343: NOT
27344: OR
27345: PUSH
27346: LD_VAR 0 2
27350: NOT
27351: OR
27352: PUSH
27353: LD_VAR 0 3
27357: NOT
27358: OR
27359: IFFALSE 27363
// exit ;
27361: GO 28177
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
27363: LD_ADDR_VAR 0 14
27367: PUSH
27368: LD_VAR 0 1
27372: PPUSH
27373: LD_VAR 0 2
27377: PPUSH
27378: LD_VAR 0 3
27382: PPUSH
27383: LD_VAR 0 4
27387: PPUSH
27388: LD_VAR 0 5
27392: PUSH
27393: LD_INT 1
27395: ARRAY
27396: PPUSH
27397: CALL_OW 248
27401: PPUSH
27402: LD_INT 0
27404: PPUSH
27405: CALL 29430 0 6
27409: ST_TO_ADDR
// if not hexes then
27410: LD_VAR 0 14
27414: NOT
27415: IFFALSE 27419
// exit ;
27417: GO 28177
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27419: LD_ADDR_VAR 0 17
27423: PUSH
27424: LD_VAR 0 5
27428: PPUSH
27429: LD_INT 22
27431: PUSH
27432: LD_VAR 0 13
27436: PPUSH
27437: CALL_OW 255
27441: PUSH
27442: EMPTY
27443: LIST
27444: LIST
27445: PUSH
27446: LD_INT 2
27448: PUSH
27449: LD_INT 30
27451: PUSH
27452: LD_INT 0
27454: PUSH
27455: EMPTY
27456: LIST
27457: LIST
27458: PUSH
27459: LD_INT 30
27461: PUSH
27462: LD_INT 1
27464: PUSH
27465: EMPTY
27466: LIST
27467: LIST
27468: PUSH
27469: EMPTY
27470: LIST
27471: LIST
27472: LIST
27473: PUSH
27474: EMPTY
27475: LIST
27476: LIST
27477: PPUSH
27478: CALL_OW 72
27482: ST_TO_ADDR
// for i = 1 to hexes do
27483: LD_ADDR_VAR 0 9
27487: PUSH
27488: DOUBLE
27489: LD_INT 1
27491: DEC
27492: ST_TO_ADDR
27493: LD_VAR 0 14
27497: PUSH
27498: FOR_TO
27499: IFFALSE 28175
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
27501: LD_ADDR_VAR 0 13
27505: PUSH
27506: LD_VAR 0 14
27510: PUSH
27511: LD_VAR 0 9
27515: ARRAY
27516: PUSH
27517: LD_INT 1
27519: ARRAY
27520: PPUSH
27521: LD_VAR 0 14
27525: PUSH
27526: LD_VAR 0 9
27530: ARRAY
27531: PUSH
27532: LD_INT 2
27534: ARRAY
27535: PPUSH
27536: CALL_OW 428
27540: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
27541: LD_VAR 0 14
27545: PUSH
27546: LD_VAR 0 9
27550: ARRAY
27551: PUSH
27552: LD_INT 1
27554: ARRAY
27555: PPUSH
27556: LD_VAR 0 14
27560: PUSH
27561: LD_VAR 0 9
27565: ARRAY
27566: PUSH
27567: LD_INT 2
27569: ARRAY
27570: PPUSH
27571: CALL_OW 351
27575: PUSH
27576: LD_VAR 0 14
27580: PUSH
27581: LD_VAR 0 9
27585: ARRAY
27586: PUSH
27587: LD_INT 1
27589: ARRAY
27590: PPUSH
27591: LD_VAR 0 14
27595: PUSH
27596: LD_VAR 0 9
27600: ARRAY
27601: PUSH
27602: LD_INT 2
27604: ARRAY
27605: PPUSH
27606: CALL_OW 488
27610: NOT
27611: OR
27612: PUSH
27613: LD_VAR 0 13
27617: PPUSH
27618: CALL_OW 247
27622: PUSH
27623: LD_INT 3
27625: EQUAL
27626: OR
27627: IFFALSE 27633
// exit ;
27629: POP
27630: POP
27631: GO 28177
// if not tmp then
27633: LD_VAR 0 13
27637: NOT
27638: IFFALSE 27642
// continue ;
27640: GO 27498
// result := true ;
27642: LD_ADDR_VAR 0 8
27646: PUSH
27647: LD_INT 1
27649: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
27650: LD_VAR 0 6
27654: PUSH
27655: LD_VAR 0 13
27659: PPUSH
27660: CALL_OW 247
27664: PUSH
27665: LD_INT 2
27667: EQUAL
27668: AND
27669: PUSH
27670: LD_VAR 0 13
27674: PPUSH
27675: CALL_OW 263
27679: PUSH
27680: LD_INT 1
27682: EQUAL
27683: AND
27684: IFFALSE 27848
// begin if IsDrivenBy ( tmp ) then
27686: LD_VAR 0 13
27690: PPUSH
27691: CALL_OW 311
27695: IFFALSE 27699
// continue ;
27697: GO 27498
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
27699: LD_VAR 0 6
27703: PPUSH
27704: LD_INT 3
27706: PUSH
27707: LD_INT 60
27709: PUSH
27710: EMPTY
27711: LIST
27712: PUSH
27713: EMPTY
27714: LIST
27715: LIST
27716: PUSH
27717: LD_INT 3
27719: PUSH
27720: LD_INT 55
27722: PUSH
27723: EMPTY
27724: LIST
27725: PUSH
27726: EMPTY
27727: LIST
27728: LIST
27729: PUSH
27730: EMPTY
27731: LIST
27732: LIST
27733: PPUSH
27734: CALL_OW 72
27738: IFFALSE 27846
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
27740: LD_ADDR_VAR 0 18
27744: PUSH
27745: LD_VAR 0 6
27749: PPUSH
27750: LD_INT 3
27752: PUSH
27753: LD_INT 60
27755: PUSH
27756: EMPTY
27757: LIST
27758: PUSH
27759: EMPTY
27760: LIST
27761: LIST
27762: PUSH
27763: LD_INT 3
27765: PUSH
27766: LD_INT 55
27768: PUSH
27769: EMPTY
27770: LIST
27771: PUSH
27772: EMPTY
27773: LIST
27774: LIST
27775: PUSH
27776: EMPTY
27777: LIST
27778: LIST
27779: PPUSH
27780: CALL_OW 72
27784: PUSH
27785: LD_INT 1
27787: ARRAY
27788: ST_TO_ADDR
// if IsInUnit ( driver ) then
27789: LD_VAR 0 18
27793: PPUSH
27794: CALL_OW 310
27798: IFFALSE 27809
// ComExit ( driver ) ;
27800: LD_VAR 0 18
27804: PPUSH
27805: CALL 53231 0 1
// AddComEnterUnit ( driver , tmp ) ;
27809: LD_VAR 0 18
27813: PPUSH
27814: LD_VAR 0 13
27818: PPUSH
27819: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
27823: LD_VAR 0 18
27827: PPUSH
27828: LD_VAR 0 7
27832: PPUSH
27833: CALL_OW 173
// AddComExitVehicle ( driver ) ;
27837: LD_VAR 0 18
27841: PPUSH
27842: CALL_OW 181
// end ; continue ;
27846: GO 27498
// end ; if not cleaners or not tmp in cleaners then
27848: LD_VAR 0 6
27852: NOT
27853: PUSH
27854: LD_VAR 0 13
27858: PUSH
27859: LD_VAR 0 6
27863: IN
27864: NOT
27865: OR
27866: IFFALSE 28173
// begin if dep then
27868: LD_VAR 0 17
27872: IFFALSE 28008
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
27874: LD_ADDR_VAR 0 16
27878: PUSH
27879: LD_VAR 0 17
27883: PUSH
27884: LD_INT 1
27886: ARRAY
27887: PPUSH
27888: CALL_OW 250
27892: PPUSH
27893: LD_VAR 0 17
27897: PUSH
27898: LD_INT 1
27900: ARRAY
27901: PPUSH
27902: CALL_OW 254
27906: PPUSH
27907: LD_INT 5
27909: PPUSH
27910: CALL_OW 272
27914: PUSH
27915: LD_VAR 0 17
27919: PUSH
27920: LD_INT 1
27922: ARRAY
27923: PPUSH
27924: CALL_OW 251
27928: PPUSH
27929: LD_VAR 0 17
27933: PUSH
27934: LD_INT 1
27936: ARRAY
27937: PPUSH
27938: CALL_OW 254
27942: PPUSH
27943: LD_INT 5
27945: PPUSH
27946: CALL_OW 273
27950: PUSH
27951: EMPTY
27952: LIST
27953: LIST
27954: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
27955: LD_VAR 0 16
27959: PUSH
27960: LD_INT 1
27962: ARRAY
27963: PPUSH
27964: LD_VAR 0 16
27968: PUSH
27969: LD_INT 2
27971: ARRAY
27972: PPUSH
27973: CALL_OW 488
27977: IFFALSE 28008
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
27979: LD_VAR 0 13
27983: PPUSH
27984: LD_VAR 0 16
27988: PUSH
27989: LD_INT 1
27991: ARRAY
27992: PPUSH
27993: LD_VAR 0 16
27997: PUSH
27998: LD_INT 2
28000: ARRAY
28001: PPUSH
28002: CALL_OW 111
// continue ;
28006: GO 27498
// end ; end ; r := GetDir ( tmp ) ;
28008: LD_ADDR_VAR 0 15
28012: PUSH
28013: LD_VAR 0 13
28017: PPUSH
28018: CALL_OW 254
28022: ST_TO_ADDR
// if r = 5 then
28023: LD_VAR 0 15
28027: PUSH
28028: LD_INT 5
28030: EQUAL
28031: IFFALSE 28041
// r := 0 ;
28033: LD_ADDR_VAR 0 15
28037: PUSH
28038: LD_INT 0
28040: ST_TO_ADDR
// for j = r to 5 do
28041: LD_ADDR_VAR 0 10
28045: PUSH
28046: DOUBLE
28047: LD_VAR 0 15
28051: DEC
28052: ST_TO_ADDR
28053: LD_INT 5
28055: PUSH
28056: FOR_TO
28057: IFFALSE 28171
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
28059: LD_ADDR_VAR 0 11
28063: PUSH
28064: LD_VAR 0 13
28068: PPUSH
28069: CALL_OW 250
28073: PPUSH
28074: LD_VAR 0 10
28078: PPUSH
28079: LD_INT 2
28081: PPUSH
28082: CALL_OW 272
28086: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
28087: LD_ADDR_VAR 0 12
28091: PUSH
28092: LD_VAR 0 13
28096: PPUSH
28097: CALL_OW 251
28101: PPUSH
28102: LD_VAR 0 10
28106: PPUSH
28107: LD_INT 2
28109: PPUSH
28110: CALL_OW 273
28114: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
28115: LD_VAR 0 11
28119: PPUSH
28120: LD_VAR 0 12
28124: PPUSH
28125: CALL_OW 488
28129: PUSH
28130: LD_VAR 0 11
28134: PPUSH
28135: LD_VAR 0 12
28139: PPUSH
28140: CALL_OW 428
28144: NOT
28145: AND
28146: IFFALSE 28169
// begin ComMoveXY ( tmp , _x , _y ) ;
28148: LD_VAR 0 13
28152: PPUSH
28153: LD_VAR 0 11
28157: PPUSH
28158: LD_VAR 0 12
28162: PPUSH
28163: CALL_OW 111
// break ;
28167: GO 28171
// end ; end ;
28169: GO 28056
28171: POP
28172: POP
// end ; end ;
28173: GO 27498
28175: POP
28176: POP
// end ;
28177: LD_VAR 0 8
28181: RET
// export function BuildingTechInvented ( side , btype ) ; begin
28182: LD_INT 0
28184: PPUSH
// result := true ;
28185: LD_ADDR_VAR 0 3
28189: PUSH
28190: LD_INT 1
28192: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
28193: LD_VAR 0 2
28197: PUSH
28198: LD_INT 24
28200: DOUBLE
28201: EQUAL
28202: IFTRUE 28212
28204: LD_INT 33
28206: DOUBLE
28207: EQUAL
28208: IFTRUE 28212
28210: GO 28237
28212: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
28213: LD_ADDR_VAR 0 3
28217: PUSH
28218: LD_INT 32
28220: PPUSH
28221: LD_VAR 0 1
28225: PPUSH
28226: CALL_OW 321
28230: PUSH
28231: LD_INT 2
28233: EQUAL
28234: ST_TO_ADDR
28235: GO 28553
28237: LD_INT 20
28239: DOUBLE
28240: EQUAL
28241: IFTRUE 28245
28243: GO 28270
28245: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
28246: LD_ADDR_VAR 0 3
28250: PUSH
28251: LD_INT 6
28253: PPUSH
28254: LD_VAR 0 1
28258: PPUSH
28259: CALL_OW 321
28263: PUSH
28264: LD_INT 2
28266: EQUAL
28267: ST_TO_ADDR
28268: GO 28553
28270: LD_INT 22
28272: DOUBLE
28273: EQUAL
28274: IFTRUE 28284
28276: LD_INT 36
28278: DOUBLE
28279: EQUAL
28280: IFTRUE 28284
28282: GO 28309
28284: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
28285: LD_ADDR_VAR 0 3
28289: PUSH
28290: LD_INT 15
28292: PPUSH
28293: LD_VAR 0 1
28297: PPUSH
28298: CALL_OW 321
28302: PUSH
28303: LD_INT 2
28305: EQUAL
28306: ST_TO_ADDR
28307: GO 28553
28309: LD_INT 30
28311: DOUBLE
28312: EQUAL
28313: IFTRUE 28317
28315: GO 28342
28317: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
28318: LD_ADDR_VAR 0 3
28322: PUSH
28323: LD_INT 20
28325: PPUSH
28326: LD_VAR 0 1
28330: PPUSH
28331: CALL_OW 321
28335: PUSH
28336: LD_INT 2
28338: EQUAL
28339: ST_TO_ADDR
28340: GO 28553
28342: LD_INT 28
28344: DOUBLE
28345: EQUAL
28346: IFTRUE 28356
28348: LD_INT 21
28350: DOUBLE
28351: EQUAL
28352: IFTRUE 28356
28354: GO 28381
28356: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
28357: LD_ADDR_VAR 0 3
28361: PUSH
28362: LD_INT 21
28364: PPUSH
28365: LD_VAR 0 1
28369: PPUSH
28370: CALL_OW 321
28374: PUSH
28375: LD_INT 2
28377: EQUAL
28378: ST_TO_ADDR
28379: GO 28553
28381: LD_INT 16
28383: DOUBLE
28384: EQUAL
28385: IFTRUE 28389
28387: GO 28414
28389: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
28390: LD_ADDR_VAR 0 3
28394: PUSH
28395: LD_INT 84
28397: PPUSH
28398: LD_VAR 0 1
28402: PPUSH
28403: CALL_OW 321
28407: PUSH
28408: LD_INT 2
28410: EQUAL
28411: ST_TO_ADDR
28412: GO 28553
28414: LD_INT 19
28416: DOUBLE
28417: EQUAL
28418: IFTRUE 28428
28420: LD_INT 23
28422: DOUBLE
28423: EQUAL
28424: IFTRUE 28428
28426: GO 28453
28428: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
28429: LD_ADDR_VAR 0 3
28433: PUSH
28434: LD_INT 83
28436: PPUSH
28437: LD_VAR 0 1
28441: PPUSH
28442: CALL_OW 321
28446: PUSH
28447: LD_INT 2
28449: EQUAL
28450: ST_TO_ADDR
28451: GO 28553
28453: LD_INT 17
28455: DOUBLE
28456: EQUAL
28457: IFTRUE 28461
28459: GO 28486
28461: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
28462: LD_ADDR_VAR 0 3
28466: PUSH
28467: LD_INT 39
28469: PPUSH
28470: LD_VAR 0 1
28474: PPUSH
28475: CALL_OW 321
28479: PUSH
28480: LD_INT 2
28482: EQUAL
28483: ST_TO_ADDR
28484: GO 28553
28486: LD_INT 18
28488: DOUBLE
28489: EQUAL
28490: IFTRUE 28494
28492: GO 28519
28494: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
28495: LD_ADDR_VAR 0 3
28499: PUSH
28500: LD_INT 40
28502: PPUSH
28503: LD_VAR 0 1
28507: PPUSH
28508: CALL_OW 321
28512: PUSH
28513: LD_INT 2
28515: EQUAL
28516: ST_TO_ADDR
28517: GO 28553
28519: LD_INT 27
28521: DOUBLE
28522: EQUAL
28523: IFTRUE 28527
28525: GO 28552
28527: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
28528: LD_ADDR_VAR 0 3
28532: PUSH
28533: LD_INT 35
28535: PPUSH
28536: LD_VAR 0 1
28540: PPUSH
28541: CALL_OW 321
28545: PUSH
28546: LD_INT 2
28548: EQUAL
28549: ST_TO_ADDR
28550: GO 28553
28552: POP
// end ;
28553: LD_VAR 0 3
28557: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
28558: LD_INT 0
28560: PPUSH
28561: PPUSH
28562: PPUSH
28563: PPUSH
28564: PPUSH
28565: PPUSH
28566: PPUSH
28567: PPUSH
28568: PPUSH
28569: PPUSH
28570: PPUSH
// result := false ;
28571: LD_ADDR_VAR 0 6
28575: PUSH
28576: LD_INT 0
28578: ST_TO_ADDR
// if btype = b_depot then
28579: LD_VAR 0 2
28583: PUSH
28584: LD_INT 0
28586: EQUAL
28587: IFFALSE 28599
// begin result := true ;
28589: LD_ADDR_VAR 0 6
28593: PUSH
28594: LD_INT 1
28596: ST_TO_ADDR
// exit ;
28597: GO 29425
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
28599: LD_VAR 0 1
28603: NOT
28604: PUSH
28605: LD_VAR 0 1
28609: PPUSH
28610: CALL_OW 266
28614: PUSH
28615: LD_INT 0
28617: PUSH
28618: LD_INT 1
28620: PUSH
28621: EMPTY
28622: LIST
28623: LIST
28624: IN
28625: NOT
28626: OR
28627: PUSH
28628: LD_VAR 0 2
28632: NOT
28633: OR
28634: PUSH
28635: LD_VAR 0 5
28639: PUSH
28640: LD_INT 0
28642: PUSH
28643: LD_INT 1
28645: PUSH
28646: LD_INT 2
28648: PUSH
28649: LD_INT 3
28651: PUSH
28652: LD_INT 4
28654: PUSH
28655: LD_INT 5
28657: PUSH
28658: EMPTY
28659: LIST
28660: LIST
28661: LIST
28662: LIST
28663: LIST
28664: LIST
28665: IN
28666: NOT
28667: OR
28668: PUSH
28669: LD_VAR 0 3
28673: PPUSH
28674: LD_VAR 0 4
28678: PPUSH
28679: CALL_OW 488
28683: NOT
28684: OR
28685: IFFALSE 28689
// exit ;
28687: GO 29425
// side := GetSide ( depot ) ;
28689: LD_ADDR_VAR 0 9
28693: PUSH
28694: LD_VAR 0 1
28698: PPUSH
28699: CALL_OW 255
28703: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
28704: LD_VAR 0 9
28708: PPUSH
28709: LD_VAR 0 2
28713: PPUSH
28714: CALL 28182 0 2
28718: NOT
28719: IFFALSE 28723
// exit ;
28721: GO 29425
// pom := GetBase ( depot ) ;
28723: LD_ADDR_VAR 0 10
28727: PUSH
28728: LD_VAR 0 1
28732: PPUSH
28733: CALL_OW 274
28737: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
28738: LD_ADDR_VAR 0 11
28742: PUSH
28743: LD_VAR 0 2
28747: PPUSH
28748: LD_VAR 0 1
28752: PPUSH
28753: CALL_OW 248
28757: PPUSH
28758: CALL_OW 450
28762: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
28763: LD_VAR 0 10
28767: PPUSH
28768: LD_INT 1
28770: PPUSH
28771: CALL_OW 275
28775: PUSH
28776: LD_VAR 0 11
28780: PUSH
28781: LD_INT 1
28783: ARRAY
28784: GREATEREQUAL
28785: PUSH
28786: LD_VAR 0 10
28790: PPUSH
28791: LD_INT 2
28793: PPUSH
28794: CALL_OW 275
28798: PUSH
28799: LD_VAR 0 11
28803: PUSH
28804: LD_INT 2
28806: ARRAY
28807: GREATEREQUAL
28808: AND
28809: PUSH
28810: LD_VAR 0 10
28814: PPUSH
28815: LD_INT 3
28817: PPUSH
28818: CALL_OW 275
28822: PUSH
28823: LD_VAR 0 11
28827: PUSH
28828: LD_INT 3
28830: ARRAY
28831: GREATEREQUAL
28832: AND
28833: NOT
28834: IFFALSE 28838
// exit ;
28836: GO 29425
// if GetBType ( depot ) = b_depot then
28838: LD_VAR 0 1
28842: PPUSH
28843: CALL_OW 266
28847: PUSH
28848: LD_INT 0
28850: EQUAL
28851: IFFALSE 28863
// dist := 28 else
28853: LD_ADDR_VAR 0 14
28857: PUSH
28858: LD_INT 28
28860: ST_TO_ADDR
28861: GO 28871
// dist := 36 ;
28863: LD_ADDR_VAR 0 14
28867: PUSH
28868: LD_INT 36
28870: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
28871: LD_VAR 0 1
28875: PPUSH
28876: LD_VAR 0 3
28880: PPUSH
28881: LD_VAR 0 4
28885: PPUSH
28886: CALL_OW 297
28890: PUSH
28891: LD_VAR 0 14
28895: GREATER
28896: IFFALSE 28900
// exit ;
28898: GO 29425
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
28900: LD_ADDR_VAR 0 12
28904: PUSH
28905: LD_VAR 0 2
28909: PPUSH
28910: LD_VAR 0 3
28914: PPUSH
28915: LD_VAR 0 4
28919: PPUSH
28920: LD_VAR 0 5
28924: PPUSH
28925: LD_VAR 0 1
28929: PPUSH
28930: CALL_OW 248
28934: PPUSH
28935: LD_INT 0
28937: PPUSH
28938: CALL 29430 0 6
28942: ST_TO_ADDR
// if not hexes then
28943: LD_VAR 0 12
28947: NOT
28948: IFFALSE 28952
// exit ;
28950: GO 29425
// hex := GetHexInfo ( x , y ) ;
28952: LD_ADDR_VAR 0 15
28956: PUSH
28957: LD_VAR 0 3
28961: PPUSH
28962: LD_VAR 0 4
28966: PPUSH
28967: CALL_OW 546
28971: ST_TO_ADDR
// if hex [ 1 ] then
28972: LD_VAR 0 15
28976: PUSH
28977: LD_INT 1
28979: ARRAY
28980: IFFALSE 28984
// exit ;
28982: GO 29425
// height := hex [ 2 ] ;
28984: LD_ADDR_VAR 0 13
28988: PUSH
28989: LD_VAR 0 15
28993: PUSH
28994: LD_INT 2
28996: ARRAY
28997: ST_TO_ADDR
// for i = 1 to hexes do
28998: LD_ADDR_VAR 0 7
29002: PUSH
29003: DOUBLE
29004: LD_INT 1
29006: DEC
29007: ST_TO_ADDR
29008: LD_VAR 0 12
29012: PUSH
29013: FOR_TO
29014: IFFALSE 29344
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
29016: LD_VAR 0 12
29020: PUSH
29021: LD_VAR 0 7
29025: ARRAY
29026: PUSH
29027: LD_INT 1
29029: ARRAY
29030: PPUSH
29031: LD_VAR 0 12
29035: PUSH
29036: LD_VAR 0 7
29040: ARRAY
29041: PUSH
29042: LD_INT 2
29044: ARRAY
29045: PPUSH
29046: CALL_OW 488
29050: NOT
29051: PUSH
29052: LD_VAR 0 12
29056: PUSH
29057: LD_VAR 0 7
29061: ARRAY
29062: PUSH
29063: LD_INT 1
29065: ARRAY
29066: PPUSH
29067: LD_VAR 0 12
29071: PUSH
29072: LD_VAR 0 7
29076: ARRAY
29077: PUSH
29078: LD_INT 2
29080: ARRAY
29081: PPUSH
29082: CALL_OW 428
29086: PUSH
29087: LD_INT 0
29089: GREATER
29090: OR
29091: PUSH
29092: LD_VAR 0 12
29096: PUSH
29097: LD_VAR 0 7
29101: ARRAY
29102: PUSH
29103: LD_INT 1
29105: ARRAY
29106: PPUSH
29107: LD_VAR 0 12
29111: PUSH
29112: LD_VAR 0 7
29116: ARRAY
29117: PUSH
29118: LD_INT 2
29120: ARRAY
29121: PPUSH
29122: CALL_OW 351
29126: OR
29127: IFFALSE 29133
// exit ;
29129: POP
29130: POP
29131: GO 29425
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
29133: LD_ADDR_VAR 0 8
29137: PUSH
29138: LD_VAR 0 12
29142: PUSH
29143: LD_VAR 0 7
29147: ARRAY
29148: PUSH
29149: LD_INT 1
29151: ARRAY
29152: PPUSH
29153: LD_VAR 0 12
29157: PUSH
29158: LD_VAR 0 7
29162: ARRAY
29163: PUSH
29164: LD_INT 2
29166: ARRAY
29167: PPUSH
29168: CALL_OW 546
29172: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
29173: LD_VAR 0 8
29177: PUSH
29178: LD_INT 1
29180: ARRAY
29181: PUSH
29182: LD_VAR 0 8
29186: PUSH
29187: LD_INT 2
29189: ARRAY
29190: PUSH
29191: LD_VAR 0 13
29195: PUSH
29196: LD_INT 2
29198: PLUS
29199: GREATER
29200: OR
29201: PUSH
29202: LD_VAR 0 8
29206: PUSH
29207: LD_INT 2
29209: ARRAY
29210: PUSH
29211: LD_VAR 0 13
29215: PUSH
29216: LD_INT 2
29218: MINUS
29219: LESS
29220: OR
29221: PUSH
29222: LD_VAR 0 8
29226: PUSH
29227: LD_INT 3
29229: ARRAY
29230: PUSH
29231: LD_INT 0
29233: PUSH
29234: LD_INT 8
29236: PUSH
29237: LD_INT 9
29239: PUSH
29240: LD_INT 10
29242: PUSH
29243: LD_INT 11
29245: PUSH
29246: LD_INT 12
29248: PUSH
29249: LD_INT 13
29251: PUSH
29252: LD_INT 16
29254: PUSH
29255: LD_INT 17
29257: PUSH
29258: LD_INT 18
29260: PUSH
29261: LD_INT 19
29263: PUSH
29264: LD_INT 20
29266: PUSH
29267: LD_INT 21
29269: PUSH
29270: EMPTY
29271: LIST
29272: LIST
29273: LIST
29274: LIST
29275: LIST
29276: LIST
29277: LIST
29278: LIST
29279: LIST
29280: LIST
29281: LIST
29282: LIST
29283: LIST
29284: IN
29285: NOT
29286: OR
29287: PUSH
29288: LD_VAR 0 8
29292: PUSH
29293: LD_INT 5
29295: ARRAY
29296: NOT
29297: OR
29298: PUSH
29299: LD_VAR 0 8
29303: PUSH
29304: LD_INT 6
29306: ARRAY
29307: PUSH
29308: LD_INT 1
29310: PUSH
29311: LD_INT 2
29313: PUSH
29314: LD_INT 7
29316: PUSH
29317: LD_INT 9
29319: PUSH
29320: LD_INT 10
29322: PUSH
29323: LD_INT 11
29325: PUSH
29326: EMPTY
29327: LIST
29328: LIST
29329: LIST
29330: LIST
29331: LIST
29332: LIST
29333: IN
29334: NOT
29335: OR
29336: IFFALSE 29342
// exit ;
29338: POP
29339: POP
29340: GO 29425
// end ;
29342: GO 29013
29344: POP
29345: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
29346: LD_VAR 0 9
29350: PPUSH
29351: LD_VAR 0 3
29355: PPUSH
29356: LD_VAR 0 4
29360: PPUSH
29361: LD_INT 20
29363: PPUSH
29364: CALL 21348 0 4
29368: PUSH
29369: LD_INT 4
29371: ARRAY
29372: IFFALSE 29376
// exit ;
29374: GO 29425
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
29376: LD_VAR 0 2
29380: PUSH
29381: LD_INT 29
29383: PUSH
29384: LD_INT 30
29386: PUSH
29387: EMPTY
29388: LIST
29389: LIST
29390: IN
29391: PUSH
29392: LD_VAR 0 3
29396: PPUSH
29397: LD_VAR 0 4
29401: PPUSH
29402: LD_VAR 0 9
29406: PPUSH
29407: CALL_OW 440
29411: NOT
29412: AND
29413: IFFALSE 29417
// exit ;
29415: GO 29425
// result := true ;
29417: LD_ADDR_VAR 0 6
29421: PUSH
29422: LD_INT 1
29424: ST_TO_ADDR
// end ;
29425: LD_VAR 0 6
29429: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
29430: LD_INT 0
29432: PPUSH
29433: PPUSH
29434: PPUSH
29435: PPUSH
29436: PPUSH
29437: PPUSH
29438: PPUSH
29439: PPUSH
29440: PPUSH
29441: PPUSH
29442: PPUSH
29443: PPUSH
29444: PPUSH
29445: PPUSH
29446: PPUSH
29447: PPUSH
29448: PPUSH
29449: PPUSH
29450: PPUSH
29451: PPUSH
29452: PPUSH
29453: PPUSH
29454: PPUSH
29455: PPUSH
29456: PPUSH
29457: PPUSH
29458: PPUSH
29459: PPUSH
29460: PPUSH
29461: PPUSH
29462: PPUSH
29463: PPUSH
29464: PPUSH
29465: PPUSH
29466: PPUSH
29467: PPUSH
29468: PPUSH
29469: PPUSH
29470: PPUSH
29471: PPUSH
29472: PPUSH
29473: PPUSH
29474: PPUSH
29475: PPUSH
29476: PPUSH
29477: PPUSH
29478: PPUSH
29479: PPUSH
29480: PPUSH
29481: PPUSH
29482: PPUSH
29483: PPUSH
29484: PPUSH
29485: PPUSH
29486: PPUSH
29487: PPUSH
29488: PPUSH
29489: PPUSH
// result = [ ] ;
29490: LD_ADDR_VAR 0 7
29494: PUSH
29495: EMPTY
29496: ST_TO_ADDR
// temp_list = [ ] ;
29497: LD_ADDR_VAR 0 9
29501: PUSH
29502: EMPTY
29503: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
29504: LD_VAR 0 4
29508: PUSH
29509: LD_INT 0
29511: PUSH
29512: LD_INT 1
29514: PUSH
29515: LD_INT 2
29517: PUSH
29518: LD_INT 3
29520: PUSH
29521: LD_INT 4
29523: PUSH
29524: LD_INT 5
29526: PUSH
29527: EMPTY
29528: LIST
29529: LIST
29530: LIST
29531: LIST
29532: LIST
29533: LIST
29534: IN
29535: NOT
29536: PUSH
29537: LD_VAR 0 1
29541: PUSH
29542: LD_INT 0
29544: PUSH
29545: LD_INT 1
29547: PUSH
29548: EMPTY
29549: LIST
29550: LIST
29551: IN
29552: PUSH
29553: LD_VAR 0 5
29557: PUSH
29558: LD_INT 1
29560: PUSH
29561: LD_INT 2
29563: PUSH
29564: LD_INT 3
29566: PUSH
29567: EMPTY
29568: LIST
29569: LIST
29570: LIST
29571: IN
29572: NOT
29573: AND
29574: OR
29575: IFFALSE 29579
// exit ;
29577: GO 47970
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
29579: LD_VAR 0 1
29583: PUSH
29584: LD_INT 6
29586: PUSH
29587: LD_INT 7
29589: PUSH
29590: LD_INT 8
29592: PUSH
29593: LD_INT 13
29595: PUSH
29596: LD_INT 12
29598: PUSH
29599: LD_INT 15
29601: PUSH
29602: LD_INT 11
29604: PUSH
29605: LD_INT 14
29607: PUSH
29608: LD_INT 10
29610: PUSH
29611: EMPTY
29612: LIST
29613: LIST
29614: LIST
29615: LIST
29616: LIST
29617: LIST
29618: LIST
29619: LIST
29620: LIST
29621: IN
29622: IFFALSE 29632
// btype = b_lab ;
29624: LD_ADDR_VAR 0 1
29628: PUSH
29629: LD_INT 6
29631: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
29632: LD_VAR 0 6
29636: PUSH
29637: LD_INT 0
29639: PUSH
29640: LD_INT 1
29642: PUSH
29643: LD_INT 2
29645: PUSH
29646: EMPTY
29647: LIST
29648: LIST
29649: LIST
29650: IN
29651: NOT
29652: PUSH
29653: LD_VAR 0 1
29657: PUSH
29658: LD_INT 0
29660: PUSH
29661: LD_INT 1
29663: PUSH
29664: LD_INT 2
29666: PUSH
29667: LD_INT 3
29669: PUSH
29670: LD_INT 6
29672: PUSH
29673: LD_INT 36
29675: PUSH
29676: LD_INT 4
29678: PUSH
29679: LD_INT 5
29681: PUSH
29682: LD_INT 31
29684: PUSH
29685: LD_INT 32
29687: PUSH
29688: LD_INT 33
29690: PUSH
29691: EMPTY
29692: LIST
29693: LIST
29694: LIST
29695: LIST
29696: LIST
29697: LIST
29698: LIST
29699: LIST
29700: LIST
29701: LIST
29702: LIST
29703: IN
29704: NOT
29705: PUSH
29706: LD_VAR 0 6
29710: PUSH
29711: LD_INT 1
29713: EQUAL
29714: AND
29715: OR
29716: PUSH
29717: LD_VAR 0 1
29721: PUSH
29722: LD_INT 2
29724: PUSH
29725: LD_INT 3
29727: PUSH
29728: EMPTY
29729: LIST
29730: LIST
29731: IN
29732: NOT
29733: PUSH
29734: LD_VAR 0 6
29738: PUSH
29739: LD_INT 2
29741: EQUAL
29742: AND
29743: OR
29744: IFFALSE 29754
// mode = 0 ;
29746: LD_ADDR_VAR 0 6
29750: PUSH
29751: LD_INT 0
29753: ST_TO_ADDR
// case mode of 0 :
29754: LD_VAR 0 6
29758: PUSH
29759: LD_INT 0
29761: DOUBLE
29762: EQUAL
29763: IFTRUE 29767
29765: GO 41220
29767: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29768: LD_ADDR_VAR 0 11
29772: PUSH
29773: LD_INT 0
29775: PUSH
29776: LD_INT 0
29778: PUSH
29779: EMPTY
29780: LIST
29781: LIST
29782: PUSH
29783: LD_INT 0
29785: PUSH
29786: LD_INT 1
29788: NEG
29789: PUSH
29790: EMPTY
29791: LIST
29792: LIST
29793: PUSH
29794: LD_INT 1
29796: PUSH
29797: LD_INT 0
29799: PUSH
29800: EMPTY
29801: LIST
29802: LIST
29803: PUSH
29804: LD_INT 1
29806: PUSH
29807: LD_INT 1
29809: PUSH
29810: EMPTY
29811: LIST
29812: LIST
29813: PUSH
29814: LD_INT 0
29816: PUSH
29817: LD_INT 1
29819: PUSH
29820: EMPTY
29821: LIST
29822: LIST
29823: PUSH
29824: LD_INT 1
29826: NEG
29827: PUSH
29828: LD_INT 0
29830: PUSH
29831: EMPTY
29832: LIST
29833: LIST
29834: PUSH
29835: LD_INT 1
29837: NEG
29838: PUSH
29839: LD_INT 1
29841: NEG
29842: PUSH
29843: EMPTY
29844: LIST
29845: LIST
29846: PUSH
29847: LD_INT 1
29849: NEG
29850: PUSH
29851: LD_INT 2
29853: NEG
29854: PUSH
29855: EMPTY
29856: LIST
29857: LIST
29858: PUSH
29859: LD_INT 0
29861: PUSH
29862: LD_INT 2
29864: NEG
29865: PUSH
29866: EMPTY
29867: LIST
29868: LIST
29869: PUSH
29870: LD_INT 1
29872: PUSH
29873: LD_INT 1
29875: NEG
29876: PUSH
29877: EMPTY
29878: LIST
29879: LIST
29880: PUSH
29881: LD_INT 1
29883: PUSH
29884: LD_INT 2
29886: PUSH
29887: EMPTY
29888: LIST
29889: LIST
29890: PUSH
29891: LD_INT 0
29893: PUSH
29894: LD_INT 2
29896: PUSH
29897: EMPTY
29898: LIST
29899: LIST
29900: PUSH
29901: LD_INT 1
29903: NEG
29904: PUSH
29905: LD_INT 1
29907: PUSH
29908: EMPTY
29909: LIST
29910: LIST
29911: PUSH
29912: LD_INT 1
29914: PUSH
29915: LD_INT 3
29917: PUSH
29918: EMPTY
29919: LIST
29920: LIST
29921: PUSH
29922: LD_INT 0
29924: PUSH
29925: LD_INT 3
29927: PUSH
29928: EMPTY
29929: LIST
29930: LIST
29931: PUSH
29932: LD_INT 1
29934: NEG
29935: PUSH
29936: LD_INT 2
29938: PUSH
29939: EMPTY
29940: LIST
29941: LIST
29942: PUSH
29943: EMPTY
29944: LIST
29945: LIST
29946: LIST
29947: LIST
29948: LIST
29949: LIST
29950: LIST
29951: LIST
29952: LIST
29953: LIST
29954: LIST
29955: LIST
29956: LIST
29957: LIST
29958: LIST
29959: LIST
29960: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29961: LD_ADDR_VAR 0 12
29965: PUSH
29966: LD_INT 0
29968: PUSH
29969: LD_INT 0
29971: PUSH
29972: EMPTY
29973: LIST
29974: LIST
29975: PUSH
29976: LD_INT 0
29978: PUSH
29979: LD_INT 1
29981: NEG
29982: PUSH
29983: EMPTY
29984: LIST
29985: LIST
29986: PUSH
29987: LD_INT 1
29989: PUSH
29990: LD_INT 0
29992: PUSH
29993: EMPTY
29994: LIST
29995: LIST
29996: PUSH
29997: LD_INT 1
29999: PUSH
30000: LD_INT 1
30002: PUSH
30003: EMPTY
30004: LIST
30005: LIST
30006: PUSH
30007: LD_INT 0
30009: PUSH
30010: LD_INT 1
30012: PUSH
30013: EMPTY
30014: LIST
30015: LIST
30016: PUSH
30017: LD_INT 1
30019: NEG
30020: PUSH
30021: LD_INT 0
30023: PUSH
30024: EMPTY
30025: LIST
30026: LIST
30027: PUSH
30028: LD_INT 1
30030: NEG
30031: PUSH
30032: LD_INT 1
30034: NEG
30035: PUSH
30036: EMPTY
30037: LIST
30038: LIST
30039: PUSH
30040: LD_INT 1
30042: PUSH
30043: LD_INT 1
30045: NEG
30046: PUSH
30047: EMPTY
30048: LIST
30049: LIST
30050: PUSH
30051: LD_INT 2
30053: PUSH
30054: LD_INT 0
30056: PUSH
30057: EMPTY
30058: LIST
30059: LIST
30060: PUSH
30061: LD_INT 2
30063: PUSH
30064: LD_INT 1
30066: PUSH
30067: EMPTY
30068: LIST
30069: LIST
30070: PUSH
30071: LD_INT 1
30073: NEG
30074: PUSH
30075: LD_INT 1
30077: PUSH
30078: EMPTY
30079: LIST
30080: LIST
30081: PUSH
30082: LD_INT 2
30084: NEG
30085: PUSH
30086: LD_INT 0
30088: PUSH
30089: EMPTY
30090: LIST
30091: LIST
30092: PUSH
30093: LD_INT 2
30095: NEG
30096: PUSH
30097: LD_INT 1
30099: NEG
30100: PUSH
30101: EMPTY
30102: LIST
30103: LIST
30104: PUSH
30105: LD_INT 2
30107: NEG
30108: PUSH
30109: LD_INT 1
30111: PUSH
30112: EMPTY
30113: LIST
30114: LIST
30115: PUSH
30116: LD_INT 3
30118: NEG
30119: PUSH
30120: LD_INT 0
30122: PUSH
30123: EMPTY
30124: LIST
30125: LIST
30126: PUSH
30127: LD_INT 3
30129: NEG
30130: PUSH
30131: LD_INT 1
30133: NEG
30134: PUSH
30135: EMPTY
30136: LIST
30137: LIST
30138: PUSH
30139: EMPTY
30140: LIST
30141: LIST
30142: LIST
30143: LIST
30144: LIST
30145: LIST
30146: LIST
30147: LIST
30148: LIST
30149: LIST
30150: LIST
30151: LIST
30152: LIST
30153: LIST
30154: LIST
30155: LIST
30156: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30157: LD_ADDR_VAR 0 13
30161: PUSH
30162: LD_INT 0
30164: PUSH
30165: LD_INT 0
30167: PUSH
30168: EMPTY
30169: LIST
30170: LIST
30171: PUSH
30172: LD_INT 0
30174: PUSH
30175: LD_INT 1
30177: NEG
30178: PUSH
30179: EMPTY
30180: LIST
30181: LIST
30182: PUSH
30183: LD_INT 1
30185: PUSH
30186: LD_INT 0
30188: PUSH
30189: EMPTY
30190: LIST
30191: LIST
30192: PUSH
30193: LD_INT 1
30195: PUSH
30196: LD_INT 1
30198: PUSH
30199: EMPTY
30200: LIST
30201: LIST
30202: PUSH
30203: LD_INT 0
30205: PUSH
30206: LD_INT 1
30208: PUSH
30209: EMPTY
30210: LIST
30211: LIST
30212: PUSH
30213: LD_INT 1
30215: NEG
30216: PUSH
30217: LD_INT 0
30219: PUSH
30220: EMPTY
30221: LIST
30222: LIST
30223: PUSH
30224: LD_INT 1
30226: NEG
30227: PUSH
30228: LD_INT 1
30230: NEG
30231: PUSH
30232: EMPTY
30233: LIST
30234: LIST
30235: PUSH
30236: LD_INT 1
30238: NEG
30239: PUSH
30240: LD_INT 2
30242: NEG
30243: PUSH
30244: EMPTY
30245: LIST
30246: LIST
30247: PUSH
30248: LD_INT 2
30250: PUSH
30251: LD_INT 1
30253: PUSH
30254: EMPTY
30255: LIST
30256: LIST
30257: PUSH
30258: LD_INT 2
30260: PUSH
30261: LD_INT 2
30263: PUSH
30264: EMPTY
30265: LIST
30266: LIST
30267: PUSH
30268: LD_INT 1
30270: PUSH
30271: LD_INT 2
30273: PUSH
30274: EMPTY
30275: LIST
30276: LIST
30277: PUSH
30278: LD_INT 2
30280: NEG
30281: PUSH
30282: LD_INT 1
30284: NEG
30285: PUSH
30286: EMPTY
30287: LIST
30288: LIST
30289: PUSH
30290: LD_INT 2
30292: NEG
30293: PUSH
30294: LD_INT 2
30296: NEG
30297: PUSH
30298: EMPTY
30299: LIST
30300: LIST
30301: PUSH
30302: LD_INT 2
30304: NEG
30305: PUSH
30306: LD_INT 3
30308: NEG
30309: PUSH
30310: EMPTY
30311: LIST
30312: LIST
30313: PUSH
30314: LD_INT 3
30316: NEG
30317: PUSH
30318: LD_INT 2
30320: NEG
30321: PUSH
30322: EMPTY
30323: LIST
30324: LIST
30325: PUSH
30326: LD_INT 3
30328: NEG
30329: PUSH
30330: LD_INT 3
30332: NEG
30333: PUSH
30334: EMPTY
30335: LIST
30336: LIST
30337: PUSH
30338: EMPTY
30339: LIST
30340: LIST
30341: LIST
30342: LIST
30343: LIST
30344: LIST
30345: LIST
30346: LIST
30347: LIST
30348: LIST
30349: LIST
30350: LIST
30351: LIST
30352: LIST
30353: LIST
30354: LIST
30355: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30356: LD_ADDR_VAR 0 14
30360: PUSH
30361: LD_INT 0
30363: PUSH
30364: LD_INT 0
30366: PUSH
30367: EMPTY
30368: LIST
30369: LIST
30370: PUSH
30371: LD_INT 0
30373: PUSH
30374: LD_INT 1
30376: NEG
30377: PUSH
30378: EMPTY
30379: LIST
30380: LIST
30381: PUSH
30382: LD_INT 1
30384: PUSH
30385: LD_INT 0
30387: PUSH
30388: EMPTY
30389: LIST
30390: LIST
30391: PUSH
30392: LD_INT 1
30394: PUSH
30395: LD_INT 1
30397: PUSH
30398: EMPTY
30399: LIST
30400: LIST
30401: PUSH
30402: LD_INT 0
30404: PUSH
30405: LD_INT 1
30407: PUSH
30408: EMPTY
30409: LIST
30410: LIST
30411: PUSH
30412: LD_INT 1
30414: NEG
30415: PUSH
30416: LD_INT 0
30418: PUSH
30419: EMPTY
30420: LIST
30421: LIST
30422: PUSH
30423: LD_INT 1
30425: NEG
30426: PUSH
30427: LD_INT 1
30429: NEG
30430: PUSH
30431: EMPTY
30432: LIST
30433: LIST
30434: PUSH
30435: LD_INT 1
30437: NEG
30438: PUSH
30439: LD_INT 2
30441: NEG
30442: PUSH
30443: EMPTY
30444: LIST
30445: LIST
30446: PUSH
30447: LD_INT 0
30449: PUSH
30450: LD_INT 2
30452: NEG
30453: PUSH
30454: EMPTY
30455: LIST
30456: LIST
30457: PUSH
30458: LD_INT 1
30460: PUSH
30461: LD_INT 1
30463: NEG
30464: PUSH
30465: EMPTY
30466: LIST
30467: LIST
30468: PUSH
30469: LD_INT 1
30471: PUSH
30472: LD_INT 2
30474: PUSH
30475: EMPTY
30476: LIST
30477: LIST
30478: PUSH
30479: LD_INT 0
30481: PUSH
30482: LD_INT 2
30484: PUSH
30485: EMPTY
30486: LIST
30487: LIST
30488: PUSH
30489: LD_INT 1
30491: NEG
30492: PUSH
30493: LD_INT 1
30495: PUSH
30496: EMPTY
30497: LIST
30498: LIST
30499: PUSH
30500: LD_INT 1
30502: NEG
30503: PUSH
30504: LD_INT 3
30506: NEG
30507: PUSH
30508: EMPTY
30509: LIST
30510: LIST
30511: PUSH
30512: LD_INT 0
30514: PUSH
30515: LD_INT 3
30517: NEG
30518: PUSH
30519: EMPTY
30520: LIST
30521: LIST
30522: PUSH
30523: LD_INT 1
30525: PUSH
30526: LD_INT 2
30528: NEG
30529: PUSH
30530: EMPTY
30531: LIST
30532: LIST
30533: PUSH
30534: EMPTY
30535: LIST
30536: LIST
30537: LIST
30538: LIST
30539: LIST
30540: LIST
30541: LIST
30542: LIST
30543: LIST
30544: LIST
30545: LIST
30546: LIST
30547: LIST
30548: LIST
30549: LIST
30550: LIST
30551: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30552: LD_ADDR_VAR 0 15
30556: PUSH
30557: LD_INT 0
30559: PUSH
30560: LD_INT 0
30562: PUSH
30563: EMPTY
30564: LIST
30565: LIST
30566: PUSH
30567: LD_INT 0
30569: PUSH
30570: LD_INT 1
30572: NEG
30573: PUSH
30574: EMPTY
30575: LIST
30576: LIST
30577: PUSH
30578: LD_INT 1
30580: PUSH
30581: LD_INT 0
30583: PUSH
30584: EMPTY
30585: LIST
30586: LIST
30587: PUSH
30588: LD_INT 1
30590: PUSH
30591: LD_INT 1
30593: PUSH
30594: EMPTY
30595: LIST
30596: LIST
30597: PUSH
30598: LD_INT 0
30600: PUSH
30601: LD_INT 1
30603: PUSH
30604: EMPTY
30605: LIST
30606: LIST
30607: PUSH
30608: LD_INT 1
30610: NEG
30611: PUSH
30612: LD_INT 0
30614: PUSH
30615: EMPTY
30616: LIST
30617: LIST
30618: PUSH
30619: LD_INT 1
30621: NEG
30622: PUSH
30623: LD_INT 1
30625: NEG
30626: PUSH
30627: EMPTY
30628: LIST
30629: LIST
30630: PUSH
30631: LD_INT 1
30633: PUSH
30634: LD_INT 1
30636: NEG
30637: PUSH
30638: EMPTY
30639: LIST
30640: LIST
30641: PUSH
30642: LD_INT 2
30644: PUSH
30645: LD_INT 0
30647: PUSH
30648: EMPTY
30649: LIST
30650: LIST
30651: PUSH
30652: LD_INT 2
30654: PUSH
30655: LD_INT 1
30657: PUSH
30658: EMPTY
30659: LIST
30660: LIST
30661: PUSH
30662: LD_INT 1
30664: NEG
30665: PUSH
30666: LD_INT 1
30668: PUSH
30669: EMPTY
30670: LIST
30671: LIST
30672: PUSH
30673: LD_INT 2
30675: NEG
30676: PUSH
30677: LD_INT 0
30679: PUSH
30680: EMPTY
30681: LIST
30682: LIST
30683: PUSH
30684: LD_INT 2
30686: NEG
30687: PUSH
30688: LD_INT 1
30690: NEG
30691: PUSH
30692: EMPTY
30693: LIST
30694: LIST
30695: PUSH
30696: LD_INT 2
30698: PUSH
30699: LD_INT 1
30701: NEG
30702: PUSH
30703: EMPTY
30704: LIST
30705: LIST
30706: PUSH
30707: LD_INT 3
30709: PUSH
30710: LD_INT 0
30712: PUSH
30713: EMPTY
30714: LIST
30715: LIST
30716: PUSH
30717: LD_INT 3
30719: PUSH
30720: LD_INT 1
30722: PUSH
30723: EMPTY
30724: LIST
30725: LIST
30726: PUSH
30727: EMPTY
30728: LIST
30729: LIST
30730: LIST
30731: LIST
30732: LIST
30733: LIST
30734: LIST
30735: LIST
30736: LIST
30737: LIST
30738: LIST
30739: LIST
30740: LIST
30741: LIST
30742: LIST
30743: LIST
30744: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30745: LD_ADDR_VAR 0 16
30749: PUSH
30750: LD_INT 0
30752: PUSH
30753: LD_INT 0
30755: PUSH
30756: EMPTY
30757: LIST
30758: LIST
30759: PUSH
30760: LD_INT 0
30762: PUSH
30763: LD_INT 1
30765: NEG
30766: PUSH
30767: EMPTY
30768: LIST
30769: LIST
30770: PUSH
30771: LD_INT 1
30773: PUSH
30774: LD_INT 0
30776: PUSH
30777: EMPTY
30778: LIST
30779: LIST
30780: PUSH
30781: LD_INT 1
30783: PUSH
30784: LD_INT 1
30786: PUSH
30787: EMPTY
30788: LIST
30789: LIST
30790: PUSH
30791: LD_INT 0
30793: PUSH
30794: LD_INT 1
30796: PUSH
30797: EMPTY
30798: LIST
30799: LIST
30800: PUSH
30801: LD_INT 1
30803: NEG
30804: PUSH
30805: LD_INT 0
30807: PUSH
30808: EMPTY
30809: LIST
30810: LIST
30811: PUSH
30812: LD_INT 1
30814: NEG
30815: PUSH
30816: LD_INT 1
30818: NEG
30819: PUSH
30820: EMPTY
30821: LIST
30822: LIST
30823: PUSH
30824: LD_INT 1
30826: NEG
30827: PUSH
30828: LD_INT 2
30830: NEG
30831: PUSH
30832: EMPTY
30833: LIST
30834: LIST
30835: PUSH
30836: LD_INT 2
30838: PUSH
30839: LD_INT 1
30841: PUSH
30842: EMPTY
30843: LIST
30844: LIST
30845: PUSH
30846: LD_INT 2
30848: PUSH
30849: LD_INT 2
30851: PUSH
30852: EMPTY
30853: LIST
30854: LIST
30855: PUSH
30856: LD_INT 1
30858: PUSH
30859: LD_INT 2
30861: PUSH
30862: EMPTY
30863: LIST
30864: LIST
30865: PUSH
30866: LD_INT 2
30868: NEG
30869: PUSH
30870: LD_INT 1
30872: NEG
30873: PUSH
30874: EMPTY
30875: LIST
30876: LIST
30877: PUSH
30878: LD_INT 2
30880: NEG
30881: PUSH
30882: LD_INT 2
30884: NEG
30885: PUSH
30886: EMPTY
30887: LIST
30888: LIST
30889: PUSH
30890: LD_INT 3
30892: PUSH
30893: LD_INT 2
30895: PUSH
30896: EMPTY
30897: LIST
30898: LIST
30899: PUSH
30900: LD_INT 3
30902: PUSH
30903: LD_INT 3
30905: PUSH
30906: EMPTY
30907: LIST
30908: LIST
30909: PUSH
30910: LD_INT 2
30912: PUSH
30913: LD_INT 3
30915: PUSH
30916: EMPTY
30917: LIST
30918: LIST
30919: PUSH
30920: EMPTY
30921: LIST
30922: LIST
30923: LIST
30924: LIST
30925: LIST
30926: LIST
30927: LIST
30928: LIST
30929: LIST
30930: LIST
30931: LIST
30932: LIST
30933: LIST
30934: LIST
30935: LIST
30936: LIST
30937: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30938: LD_ADDR_VAR 0 17
30942: PUSH
30943: LD_INT 0
30945: PUSH
30946: LD_INT 0
30948: PUSH
30949: EMPTY
30950: LIST
30951: LIST
30952: PUSH
30953: LD_INT 0
30955: PUSH
30956: LD_INT 1
30958: NEG
30959: PUSH
30960: EMPTY
30961: LIST
30962: LIST
30963: PUSH
30964: LD_INT 1
30966: PUSH
30967: LD_INT 0
30969: PUSH
30970: EMPTY
30971: LIST
30972: LIST
30973: PUSH
30974: LD_INT 1
30976: PUSH
30977: LD_INT 1
30979: PUSH
30980: EMPTY
30981: LIST
30982: LIST
30983: PUSH
30984: LD_INT 0
30986: PUSH
30987: LD_INT 1
30989: PUSH
30990: EMPTY
30991: LIST
30992: LIST
30993: PUSH
30994: LD_INT 1
30996: NEG
30997: PUSH
30998: LD_INT 0
31000: PUSH
31001: EMPTY
31002: LIST
31003: LIST
31004: PUSH
31005: LD_INT 1
31007: NEG
31008: PUSH
31009: LD_INT 1
31011: NEG
31012: PUSH
31013: EMPTY
31014: LIST
31015: LIST
31016: PUSH
31017: LD_INT 1
31019: NEG
31020: PUSH
31021: LD_INT 2
31023: NEG
31024: PUSH
31025: EMPTY
31026: LIST
31027: LIST
31028: PUSH
31029: LD_INT 0
31031: PUSH
31032: LD_INT 2
31034: NEG
31035: PUSH
31036: EMPTY
31037: LIST
31038: LIST
31039: PUSH
31040: LD_INT 1
31042: PUSH
31043: LD_INT 1
31045: NEG
31046: PUSH
31047: EMPTY
31048: LIST
31049: LIST
31050: PUSH
31051: LD_INT 2
31053: PUSH
31054: LD_INT 0
31056: PUSH
31057: EMPTY
31058: LIST
31059: LIST
31060: PUSH
31061: LD_INT 2
31063: PUSH
31064: LD_INT 1
31066: PUSH
31067: EMPTY
31068: LIST
31069: LIST
31070: PUSH
31071: LD_INT 2
31073: PUSH
31074: LD_INT 2
31076: PUSH
31077: EMPTY
31078: LIST
31079: LIST
31080: PUSH
31081: LD_INT 1
31083: PUSH
31084: LD_INT 2
31086: PUSH
31087: EMPTY
31088: LIST
31089: LIST
31090: PUSH
31091: LD_INT 0
31093: PUSH
31094: LD_INT 2
31096: PUSH
31097: EMPTY
31098: LIST
31099: LIST
31100: PUSH
31101: LD_INT 1
31103: NEG
31104: PUSH
31105: LD_INT 1
31107: PUSH
31108: EMPTY
31109: LIST
31110: LIST
31111: PUSH
31112: LD_INT 2
31114: NEG
31115: PUSH
31116: LD_INT 0
31118: PUSH
31119: EMPTY
31120: LIST
31121: LIST
31122: PUSH
31123: LD_INT 2
31125: NEG
31126: PUSH
31127: LD_INT 1
31129: NEG
31130: PUSH
31131: EMPTY
31132: LIST
31133: LIST
31134: PUSH
31135: LD_INT 2
31137: NEG
31138: PUSH
31139: LD_INT 2
31141: NEG
31142: PUSH
31143: EMPTY
31144: LIST
31145: LIST
31146: PUSH
31147: EMPTY
31148: LIST
31149: LIST
31150: LIST
31151: LIST
31152: LIST
31153: LIST
31154: LIST
31155: LIST
31156: LIST
31157: LIST
31158: LIST
31159: LIST
31160: LIST
31161: LIST
31162: LIST
31163: LIST
31164: LIST
31165: LIST
31166: LIST
31167: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31168: LD_ADDR_VAR 0 18
31172: PUSH
31173: LD_INT 0
31175: PUSH
31176: LD_INT 0
31178: PUSH
31179: EMPTY
31180: LIST
31181: LIST
31182: PUSH
31183: LD_INT 0
31185: PUSH
31186: LD_INT 1
31188: NEG
31189: PUSH
31190: EMPTY
31191: LIST
31192: LIST
31193: PUSH
31194: LD_INT 1
31196: PUSH
31197: LD_INT 0
31199: PUSH
31200: EMPTY
31201: LIST
31202: LIST
31203: PUSH
31204: LD_INT 1
31206: PUSH
31207: LD_INT 1
31209: PUSH
31210: EMPTY
31211: LIST
31212: LIST
31213: PUSH
31214: LD_INT 0
31216: PUSH
31217: LD_INT 1
31219: PUSH
31220: EMPTY
31221: LIST
31222: LIST
31223: PUSH
31224: LD_INT 1
31226: NEG
31227: PUSH
31228: LD_INT 0
31230: PUSH
31231: EMPTY
31232: LIST
31233: LIST
31234: PUSH
31235: LD_INT 1
31237: NEG
31238: PUSH
31239: LD_INT 1
31241: NEG
31242: PUSH
31243: EMPTY
31244: LIST
31245: LIST
31246: PUSH
31247: LD_INT 1
31249: NEG
31250: PUSH
31251: LD_INT 2
31253: NEG
31254: PUSH
31255: EMPTY
31256: LIST
31257: LIST
31258: PUSH
31259: LD_INT 0
31261: PUSH
31262: LD_INT 2
31264: NEG
31265: PUSH
31266: EMPTY
31267: LIST
31268: LIST
31269: PUSH
31270: LD_INT 1
31272: PUSH
31273: LD_INT 1
31275: NEG
31276: PUSH
31277: EMPTY
31278: LIST
31279: LIST
31280: PUSH
31281: LD_INT 2
31283: PUSH
31284: LD_INT 0
31286: PUSH
31287: EMPTY
31288: LIST
31289: LIST
31290: PUSH
31291: LD_INT 2
31293: PUSH
31294: LD_INT 1
31296: PUSH
31297: EMPTY
31298: LIST
31299: LIST
31300: PUSH
31301: LD_INT 2
31303: PUSH
31304: LD_INT 2
31306: PUSH
31307: EMPTY
31308: LIST
31309: LIST
31310: PUSH
31311: LD_INT 1
31313: PUSH
31314: LD_INT 2
31316: PUSH
31317: EMPTY
31318: LIST
31319: LIST
31320: PUSH
31321: LD_INT 0
31323: PUSH
31324: LD_INT 2
31326: PUSH
31327: EMPTY
31328: LIST
31329: LIST
31330: PUSH
31331: LD_INT 1
31333: NEG
31334: PUSH
31335: LD_INT 1
31337: PUSH
31338: EMPTY
31339: LIST
31340: LIST
31341: PUSH
31342: LD_INT 2
31344: NEG
31345: PUSH
31346: LD_INT 0
31348: PUSH
31349: EMPTY
31350: LIST
31351: LIST
31352: PUSH
31353: LD_INT 2
31355: NEG
31356: PUSH
31357: LD_INT 1
31359: NEG
31360: PUSH
31361: EMPTY
31362: LIST
31363: LIST
31364: PUSH
31365: LD_INT 2
31367: NEG
31368: PUSH
31369: LD_INT 2
31371: NEG
31372: PUSH
31373: EMPTY
31374: LIST
31375: LIST
31376: PUSH
31377: EMPTY
31378: LIST
31379: LIST
31380: LIST
31381: LIST
31382: LIST
31383: LIST
31384: LIST
31385: LIST
31386: LIST
31387: LIST
31388: LIST
31389: LIST
31390: LIST
31391: LIST
31392: LIST
31393: LIST
31394: LIST
31395: LIST
31396: LIST
31397: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31398: LD_ADDR_VAR 0 19
31402: PUSH
31403: LD_INT 0
31405: PUSH
31406: LD_INT 0
31408: PUSH
31409: EMPTY
31410: LIST
31411: LIST
31412: PUSH
31413: LD_INT 0
31415: PUSH
31416: LD_INT 1
31418: NEG
31419: PUSH
31420: EMPTY
31421: LIST
31422: LIST
31423: PUSH
31424: LD_INT 1
31426: PUSH
31427: LD_INT 0
31429: PUSH
31430: EMPTY
31431: LIST
31432: LIST
31433: PUSH
31434: LD_INT 1
31436: PUSH
31437: LD_INT 1
31439: PUSH
31440: EMPTY
31441: LIST
31442: LIST
31443: PUSH
31444: LD_INT 0
31446: PUSH
31447: LD_INT 1
31449: PUSH
31450: EMPTY
31451: LIST
31452: LIST
31453: PUSH
31454: LD_INT 1
31456: NEG
31457: PUSH
31458: LD_INT 0
31460: PUSH
31461: EMPTY
31462: LIST
31463: LIST
31464: PUSH
31465: LD_INT 1
31467: NEG
31468: PUSH
31469: LD_INT 1
31471: NEG
31472: PUSH
31473: EMPTY
31474: LIST
31475: LIST
31476: PUSH
31477: LD_INT 1
31479: NEG
31480: PUSH
31481: LD_INT 2
31483: NEG
31484: PUSH
31485: EMPTY
31486: LIST
31487: LIST
31488: PUSH
31489: LD_INT 0
31491: PUSH
31492: LD_INT 2
31494: NEG
31495: PUSH
31496: EMPTY
31497: LIST
31498: LIST
31499: PUSH
31500: LD_INT 1
31502: PUSH
31503: LD_INT 1
31505: NEG
31506: PUSH
31507: EMPTY
31508: LIST
31509: LIST
31510: PUSH
31511: LD_INT 2
31513: PUSH
31514: LD_INT 0
31516: PUSH
31517: EMPTY
31518: LIST
31519: LIST
31520: PUSH
31521: LD_INT 2
31523: PUSH
31524: LD_INT 1
31526: PUSH
31527: EMPTY
31528: LIST
31529: LIST
31530: PUSH
31531: LD_INT 2
31533: PUSH
31534: LD_INT 2
31536: PUSH
31537: EMPTY
31538: LIST
31539: LIST
31540: PUSH
31541: LD_INT 1
31543: PUSH
31544: LD_INT 2
31546: PUSH
31547: EMPTY
31548: LIST
31549: LIST
31550: PUSH
31551: LD_INT 0
31553: PUSH
31554: LD_INT 2
31556: PUSH
31557: EMPTY
31558: LIST
31559: LIST
31560: PUSH
31561: LD_INT 1
31563: NEG
31564: PUSH
31565: LD_INT 1
31567: PUSH
31568: EMPTY
31569: LIST
31570: LIST
31571: PUSH
31572: LD_INT 2
31574: NEG
31575: PUSH
31576: LD_INT 0
31578: PUSH
31579: EMPTY
31580: LIST
31581: LIST
31582: PUSH
31583: LD_INT 2
31585: NEG
31586: PUSH
31587: LD_INT 1
31589: NEG
31590: PUSH
31591: EMPTY
31592: LIST
31593: LIST
31594: PUSH
31595: LD_INT 2
31597: NEG
31598: PUSH
31599: LD_INT 2
31601: NEG
31602: PUSH
31603: EMPTY
31604: LIST
31605: LIST
31606: PUSH
31607: EMPTY
31608: LIST
31609: LIST
31610: LIST
31611: LIST
31612: LIST
31613: LIST
31614: LIST
31615: LIST
31616: LIST
31617: LIST
31618: LIST
31619: LIST
31620: LIST
31621: LIST
31622: LIST
31623: LIST
31624: LIST
31625: LIST
31626: LIST
31627: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31628: LD_ADDR_VAR 0 20
31632: PUSH
31633: LD_INT 0
31635: PUSH
31636: LD_INT 0
31638: PUSH
31639: EMPTY
31640: LIST
31641: LIST
31642: PUSH
31643: LD_INT 0
31645: PUSH
31646: LD_INT 1
31648: NEG
31649: PUSH
31650: EMPTY
31651: LIST
31652: LIST
31653: PUSH
31654: LD_INT 1
31656: PUSH
31657: LD_INT 0
31659: PUSH
31660: EMPTY
31661: LIST
31662: LIST
31663: PUSH
31664: LD_INT 1
31666: PUSH
31667: LD_INT 1
31669: PUSH
31670: EMPTY
31671: LIST
31672: LIST
31673: PUSH
31674: LD_INT 0
31676: PUSH
31677: LD_INT 1
31679: PUSH
31680: EMPTY
31681: LIST
31682: LIST
31683: PUSH
31684: LD_INT 1
31686: NEG
31687: PUSH
31688: LD_INT 0
31690: PUSH
31691: EMPTY
31692: LIST
31693: LIST
31694: PUSH
31695: LD_INT 1
31697: NEG
31698: PUSH
31699: LD_INT 1
31701: NEG
31702: PUSH
31703: EMPTY
31704: LIST
31705: LIST
31706: PUSH
31707: LD_INT 1
31709: NEG
31710: PUSH
31711: LD_INT 2
31713: NEG
31714: PUSH
31715: EMPTY
31716: LIST
31717: LIST
31718: PUSH
31719: LD_INT 0
31721: PUSH
31722: LD_INT 2
31724: NEG
31725: PUSH
31726: EMPTY
31727: LIST
31728: LIST
31729: PUSH
31730: LD_INT 1
31732: PUSH
31733: LD_INT 1
31735: NEG
31736: PUSH
31737: EMPTY
31738: LIST
31739: LIST
31740: PUSH
31741: LD_INT 2
31743: PUSH
31744: LD_INT 0
31746: PUSH
31747: EMPTY
31748: LIST
31749: LIST
31750: PUSH
31751: LD_INT 2
31753: PUSH
31754: LD_INT 1
31756: PUSH
31757: EMPTY
31758: LIST
31759: LIST
31760: PUSH
31761: LD_INT 2
31763: PUSH
31764: LD_INT 2
31766: PUSH
31767: EMPTY
31768: LIST
31769: LIST
31770: PUSH
31771: LD_INT 1
31773: PUSH
31774: LD_INT 2
31776: PUSH
31777: EMPTY
31778: LIST
31779: LIST
31780: PUSH
31781: LD_INT 0
31783: PUSH
31784: LD_INT 2
31786: PUSH
31787: EMPTY
31788: LIST
31789: LIST
31790: PUSH
31791: LD_INT 1
31793: NEG
31794: PUSH
31795: LD_INT 1
31797: PUSH
31798: EMPTY
31799: LIST
31800: LIST
31801: PUSH
31802: LD_INT 2
31804: NEG
31805: PUSH
31806: LD_INT 0
31808: PUSH
31809: EMPTY
31810: LIST
31811: LIST
31812: PUSH
31813: LD_INT 2
31815: NEG
31816: PUSH
31817: LD_INT 1
31819: NEG
31820: PUSH
31821: EMPTY
31822: LIST
31823: LIST
31824: PUSH
31825: LD_INT 2
31827: NEG
31828: PUSH
31829: LD_INT 2
31831: NEG
31832: PUSH
31833: EMPTY
31834: LIST
31835: LIST
31836: PUSH
31837: EMPTY
31838: LIST
31839: LIST
31840: LIST
31841: LIST
31842: LIST
31843: LIST
31844: LIST
31845: LIST
31846: LIST
31847: LIST
31848: LIST
31849: LIST
31850: LIST
31851: LIST
31852: LIST
31853: LIST
31854: LIST
31855: LIST
31856: LIST
31857: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31858: LD_ADDR_VAR 0 21
31862: PUSH
31863: LD_INT 0
31865: PUSH
31866: LD_INT 0
31868: PUSH
31869: EMPTY
31870: LIST
31871: LIST
31872: PUSH
31873: LD_INT 0
31875: PUSH
31876: LD_INT 1
31878: NEG
31879: PUSH
31880: EMPTY
31881: LIST
31882: LIST
31883: PUSH
31884: LD_INT 1
31886: PUSH
31887: LD_INT 0
31889: PUSH
31890: EMPTY
31891: LIST
31892: LIST
31893: PUSH
31894: LD_INT 1
31896: PUSH
31897: LD_INT 1
31899: PUSH
31900: EMPTY
31901: LIST
31902: LIST
31903: PUSH
31904: LD_INT 0
31906: PUSH
31907: LD_INT 1
31909: PUSH
31910: EMPTY
31911: LIST
31912: LIST
31913: PUSH
31914: LD_INT 1
31916: NEG
31917: PUSH
31918: LD_INT 0
31920: PUSH
31921: EMPTY
31922: LIST
31923: LIST
31924: PUSH
31925: LD_INT 1
31927: NEG
31928: PUSH
31929: LD_INT 1
31931: NEG
31932: PUSH
31933: EMPTY
31934: LIST
31935: LIST
31936: PUSH
31937: LD_INT 1
31939: NEG
31940: PUSH
31941: LD_INT 2
31943: NEG
31944: PUSH
31945: EMPTY
31946: LIST
31947: LIST
31948: PUSH
31949: LD_INT 0
31951: PUSH
31952: LD_INT 2
31954: NEG
31955: PUSH
31956: EMPTY
31957: LIST
31958: LIST
31959: PUSH
31960: LD_INT 1
31962: PUSH
31963: LD_INT 1
31965: NEG
31966: PUSH
31967: EMPTY
31968: LIST
31969: LIST
31970: PUSH
31971: LD_INT 2
31973: PUSH
31974: LD_INT 0
31976: PUSH
31977: EMPTY
31978: LIST
31979: LIST
31980: PUSH
31981: LD_INT 2
31983: PUSH
31984: LD_INT 1
31986: PUSH
31987: EMPTY
31988: LIST
31989: LIST
31990: PUSH
31991: LD_INT 2
31993: PUSH
31994: LD_INT 2
31996: PUSH
31997: EMPTY
31998: LIST
31999: LIST
32000: PUSH
32001: LD_INT 1
32003: PUSH
32004: LD_INT 2
32006: PUSH
32007: EMPTY
32008: LIST
32009: LIST
32010: PUSH
32011: LD_INT 0
32013: PUSH
32014: LD_INT 2
32016: PUSH
32017: EMPTY
32018: LIST
32019: LIST
32020: PUSH
32021: LD_INT 1
32023: NEG
32024: PUSH
32025: LD_INT 1
32027: PUSH
32028: EMPTY
32029: LIST
32030: LIST
32031: PUSH
32032: LD_INT 2
32034: NEG
32035: PUSH
32036: LD_INT 0
32038: PUSH
32039: EMPTY
32040: LIST
32041: LIST
32042: PUSH
32043: LD_INT 2
32045: NEG
32046: PUSH
32047: LD_INT 1
32049: NEG
32050: PUSH
32051: EMPTY
32052: LIST
32053: LIST
32054: PUSH
32055: LD_INT 2
32057: NEG
32058: PUSH
32059: LD_INT 2
32061: NEG
32062: PUSH
32063: EMPTY
32064: LIST
32065: LIST
32066: PUSH
32067: EMPTY
32068: LIST
32069: LIST
32070: LIST
32071: LIST
32072: LIST
32073: LIST
32074: LIST
32075: LIST
32076: LIST
32077: LIST
32078: LIST
32079: LIST
32080: LIST
32081: LIST
32082: LIST
32083: LIST
32084: LIST
32085: LIST
32086: LIST
32087: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32088: LD_ADDR_VAR 0 22
32092: PUSH
32093: LD_INT 0
32095: PUSH
32096: LD_INT 0
32098: PUSH
32099: EMPTY
32100: LIST
32101: LIST
32102: PUSH
32103: LD_INT 0
32105: PUSH
32106: LD_INT 1
32108: NEG
32109: PUSH
32110: EMPTY
32111: LIST
32112: LIST
32113: PUSH
32114: LD_INT 1
32116: PUSH
32117: LD_INT 0
32119: PUSH
32120: EMPTY
32121: LIST
32122: LIST
32123: PUSH
32124: LD_INT 1
32126: PUSH
32127: LD_INT 1
32129: PUSH
32130: EMPTY
32131: LIST
32132: LIST
32133: PUSH
32134: LD_INT 0
32136: PUSH
32137: LD_INT 1
32139: PUSH
32140: EMPTY
32141: LIST
32142: LIST
32143: PUSH
32144: LD_INT 1
32146: NEG
32147: PUSH
32148: LD_INT 0
32150: PUSH
32151: EMPTY
32152: LIST
32153: LIST
32154: PUSH
32155: LD_INT 1
32157: NEG
32158: PUSH
32159: LD_INT 1
32161: NEG
32162: PUSH
32163: EMPTY
32164: LIST
32165: LIST
32166: PUSH
32167: LD_INT 1
32169: NEG
32170: PUSH
32171: LD_INT 2
32173: NEG
32174: PUSH
32175: EMPTY
32176: LIST
32177: LIST
32178: PUSH
32179: LD_INT 0
32181: PUSH
32182: LD_INT 2
32184: NEG
32185: PUSH
32186: EMPTY
32187: LIST
32188: LIST
32189: PUSH
32190: LD_INT 1
32192: PUSH
32193: LD_INT 1
32195: NEG
32196: PUSH
32197: EMPTY
32198: LIST
32199: LIST
32200: PUSH
32201: LD_INT 2
32203: PUSH
32204: LD_INT 0
32206: PUSH
32207: EMPTY
32208: LIST
32209: LIST
32210: PUSH
32211: LD_INT 2
32213: PUSH
32214: LD_INT 1
32216: PUSH
32217: EMPTY
32218: LIST
32219: LIST
32220: PUSH
32221: LD_INT 2
32223: PUSH
32224: LD_INT 2
32226: PUSH
32227: EMPTY
32228: LIST
32229: LIST
32230: PUSH
32231: LD_INT 1
32233: PUSH
32234: LD_INT 2
32236: PUSH
32237: EMPTY
32238: LIST
32239: LIST
32240: PUSH
32241: LD_INT 0
32243: PUSH
32244: LD_INT 2
32246: PUSH
32247: EMPTY
32248: LIST
32249: LIST
32250: PUSH
32251: LD_INT 1
32253: NEG
32254: PUSH
32255: LD_INT 1
32257: PUSH
32258: EMPTY
32259: LIST
32260: LIST
32261: PUSH
32262: LD_INT 2
32264: NEG
32265: PUSH
32266: LD_INT 0
32268: PUSH
32269: EMPTY
32270: LIST
32271: LIST
32272: PUSH
32273: LD_INT 2
32275: NEG
32276: PUSH
32277: LD_INT 1
32279: NEG
32280: PUSH
32281: EMPTY
32282: LIST
32283: LIST
32284: PUSH
32285: LD_INT 2
32287: NEG
32288: PUSH
32289: LD_INT 2
32291: NEG
32292: PUSH
32293: EMPTY
32294: LIST
32295: LIST
32296: PUSH
32297: EMPTY
32298: LIST
32299: LIST
32300: LIST
32301: LIST
32302: LIST
32303: LIST
32304: LIST
32305: LIST
32306: LIST
32307: LIST
32308: LIST
32309: LIST
32310: LIST
32311: LIST
32312: LIST
32313: LIST
32314: LIST
32315: LIST
32316: LIST
32317: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
32318: LD_ADDR_VAR 0 23
32322: PUSH
32323: LD_INT 0
32325: PUSH
32326: LD_INT 0
32328: PUSH
32329: EMPTY
32330: LIST
32331: LIST
32332: PUSH
32333: LD_INT 0
32335: PUSH
32336: LD_INT 1
32338: NEG
32339: PUSH
32340: EMPTY
32341: LIST
32342: LIST
32343: PUSH
32344: LD_INT 1
32346: PUSH
32347: LD_INT 0
32349: PUSH
32350: EMPTY
32351: LIST
32352: LIST
32353: PUSH
32354: LD_INT 1
32356: PUSH
32357: LD_INT 1
32359: PUSH
32360: EMPTY
32361: LIST
32362: LIST
32363: PUSH
32364: LD_INT 0
32366: PUSH
32367: LD_INT 1
32369: PUSH
32370: EMPTY
32371: LIST
32372: LIST
32373: PUSH
32374: LD_INT 1
32376: NEG
32377: PUSH
32378: LD_INT 0
32380: PUSH
32381: EMPTY
32382: LIST
32383: LIST
32384: PUSH
32385: LD_INT 1
32387: NEG
32388: PUSH
32389: LD_INT 1
32391: NEG
32392: PUSH
32393: EMPTY
32394: LIST
32395: LIST
32396: PUSH
32397: LD_INT 1
32399: NEG
32400: PUSH
32401: LD_INT 2
32403: NEG
32404: PUSH
32405: EMPTY
32406: LIST
32407: LIST
32408: PUSH
32409: LD_INT 0
32411: PUSH
32412: LD_INT 2
32414: NEG
32415: PUSH
32416: EMPTY
32417: LIST
32418: LIST
32419: PUSH
32420: LD_INT 1
32422: PUSH
32423: LD_INT 1
32425: NEG
32426: PUSH
32427: EMPTY
32428: LIST
32429: LIST
32430: PUSH
32431: LD_INT 2
32433: PUSH
32434: LD_INT 0
32436: PUSH
32437: EMPTY
32438: LIST
32439: LIST
32440: PUSH
32441: LD_INT 2
32443: PUSH
32444: LD_INT 1
32446: PUSH
32447: EMPTY
32448: LIST
32449: LIST
32450: PUSH
32451: LD_INT 2
32453: PUSH
32454: LD_INT 2
32456: PUSH
32457: EMPTY
32458: LIST
32459: LIST
32460: PUSH
32461: LD_INT 1
32463: PUSH
32464: LD_INT 2
32466: PUSH
32467: EMPTY
32468: LIST
32469: LIST
32470: PUSH
32471: LD_INT 0
32473: PUSH
32474: LD_INT 2
32476: PUSH
32477: EMPTY
32478: LIST
32479: LIST
32480: PUSH
32481: LD_INT 1
32483: NEG
32484: PUSH
32485: LD_INT 1
32487: PUSH
32488: EMPTY
32489: LIST
32490: LIST
32491: PUSH
32492: LD_INT 2
32494: NEG
32495: PUSH
32496: LD_INT 0
32498: PUSH
32499: EMPTY
32500: LIST
32501: LIST
32502: PUSH
32503: LD_INT 2
32505: NEG
32506: PUSH
32507: LD_INT 1
32509: NEG
32510: PUSH
32511: EMPTY
32512: LIST
32513: LIST
32514: PUSH
32515: LD_INT 2
32517: NEG
32518: PUSH
32519: LD_INT 2
32521: NEG
32522: PUSH
32523: EMPTY
32524: LIST
32525: LIST
32526: PUSH
32527: LD_INT 2
32529: NEG
32530: PUSH
32531: LD_INT 3
32533: NEG
32534: PUSH
32535: EMPTY
32536: LIST
32537: LIST
32538: PUSH
32539: LD_INT 1
32541: NEG
32542: PUSH
32543: LD_INT 3
32545: NEG
32546: PUSH
32547: EMPTY
32548: LIST
32549: LIST
32550: PUSH
32551: LD_INT 1
32553: PUSH
32554: LD_INT 2
32556: NEG
32557: PUSH
32558: EMPTY
32559: LIST
32560: LIST
32561: PUSH
32562: LD_INT 2
32564: PUSH
32565: LD_INT 1
32567: NEG
32568: PUSH
32569: EMPTY
32570: LIST
32571: LIST
32572: PUSH
32573: EMPTY
32574: LIST
32575: LIST
32576: LIST
32577: LIST
32578: LIST
32579: LIST
32580: LIST
32581: LIST
32582: LIST
32583: LIST
32584: LIST
32585: LIST
32586: LIST
32587: LIST
32588: LIST
32589: LIST
32590: LIST
32591: LIST
32592: LIST
32593: LIST
32594: LIST
32595: LIST
32596: LIST
32597: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
32598: LD_ADDR_VAR 0 24
32602: PUSH
32603: LD_INT 0
32605: PUSH
32606: LD_INT 0
32608: PUSH
32609: EMPTY
32610: LIST
32611: LIST
32612: PUSH
32613: LD_INT 0
32615: PUSH
32616: LD_INT 1
32618: NEG
32619: PUSH
32620: EMPTY
32621: LIST
32622: LIST
32623: PUSH
32624: LD_INT 1
32626: PUSH
32627: LD_INT 0
32629: PUSH
32630: EMPTY
32631: LIST
32632: LIST
32633: PUSH
32634: LD_INT 1
32636: PUSH
32637: LD_INT 1
32639: PUSH
32640: EMPTY
32641: LIST
32642: LIST
32643: PUSH
32644: LD_INT 0
32646: PUSH
32647: LD_INT 1
32649: PUSH
32650: EMPTY
32651: LIST
32652: LIST
32653: PUSH
32654: LD_INT 1
32656: NEG
32657: PUSH
32658: LD_INT 0
32660: PUSH
32661: EMPTY
32662: LIST
32663: LIST
32664: PUSH
32665: LD_INT 1
32667: NEG
32668: PUSH
32669: LD_INT 1
32671: NEG
32672: PUSH
32673: EMPTY
32674: LIST
32675: LIST
32676: PUSH
32677: LD_INT 1
32679: NEG
32680: PUSH
32681: LD_INT 2
32683: NEG
32684: PUSH
32685: EMPTY
32686: LIST
32687: LIST
32688: PUSH
32689: LD_INT 0
32691: PUSH
32692: LD_INT 2
32694: NEG
32695: PUSH
32696: EMPTY
32697: LIST
32698: LIST
32699: PUSH
32700: LD_INT 1
32702: PUSH
32703: LD_INT 1
32705: NEG
32706: PUSH
32707: EMPTY
32708: LIST
32709: LIST
32710: PUSH
32711: LD_INT 2
32713: PUSH
32714: LD_INT 0
32716: PUSH
32717: EMPTY
32718: LIST
32719: LIST
32720: PUSH
32721: LD_INT 2
32723: PUSH
32724: LD_INT 1
32726: PUSH
32727: EMPTY
32728: LIST
32729: LIST
32730: PUSH
32731: LD_INT 2
32733: PUSH
32734: LD_INT 2
32736: PUSH
32737: EMPTY
32738: LIST
32739: LIST
32740: PUSH
32741: LD_INT 1
32743: PUSH
32744: LD_INT 2
32746: PUSH
32747: EMPTY
32748: LIST
32749: LIST
32750: PUSH
32751: LD_INT 0
32753: PUSH
32754: LD_INT 2
32756: PUSH
32757: EMPTY
32758: LIST
32759: LIST
32760: PUSH
32761: LD_INT 1
32763: NEG
32764: PUSH
32765: LD_INT 1
32767: PUSH
32768: EMPTY
32769: LIST
32770: LIST
32771: PUSH
32772: LD_INT 2
32774: NEG
32775: PUSH
32776: LD_INT 0
32778: PUSH
32779: EMPTY
32780: LIST
32781: LIST
32782: PUSH
32783: LD_INT 2
32785: NEG
32786: PUSH
32787: LD_INT 1
32789: NEG
32790: PUSH
32791: EMPTY
32792: LIST
32793: LIST
32794: PUSH
32795: LD_INT 2
32797: NEG
32798: PUSH
32799: LD_INT 2
32801: NEG
32802: PUSH
32803: EMPTY
32804: LIST
32805: LIST
32806: PUSH
32807: LD_INT 1
32809: PUSH
32810: LD_INT 2
32812: NEG
32813: PUSH
32814: EMPTY
32815: LIST
32816: LIST
32817: PUSH
32818: LD_INT 2
32820: PUSH
32821: LD_INT 1
32823: NEG
32824: PUSH
32825: EMPTY
32826: LIST
32827: LIST
32828: PUSH
32829: LD_INT 3
32831: PUSH
32832: LD_INT 1
32834: PUSH
32835: EMPTY
32836: LIST
32837: LIST
32838: PUSH
32839: LD_INT 3
32841: PUSH
32842: LD_INT 2
32844: PUSH
32845: EMPTY
32846: LIST
32847: LIST
32848: PUSH
32849: EMPTY
32850: LIST
32851: LIST
32852: LIST
32853: LIST
32854: LIST
32855: LIST
32856: LIST
32857: LIST
32858: LIST
32859: LIST
32860: LIST
32861: LIST
32862: LIST
32863: LIST
32864: LIST
32865: LIST
32866: LIST
32867: LIST
32868: LIST
32869: LIST
32870: LIST
32871: LIST
32872: LIST
32873: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
32874: LD_ADDR_VAR 0 25
32878: PUSH
32879: LD_INT 0
32881: PUSH
32882: LD_INT 0
32884: PUSH
32885: EMPTY
32886: LIST
32887: LIST
32888: PUSH
32889: LD_INT 0
32891: PUSH
32892: LD_INT 1
32894: NEG
32895: PUSH
32896: EMPTY
32897: LIST
32898: LIST
32899: PUSH
32900: LD_INT 1
32902: PUSH
32903: LD_INT 0
32905: PUSH
32906: EMPTY
32907: LIST
32908: LIST
32909: PUSH
32910: LD_INT 1
32912: PUSH
32913: LD_INT 1
32915: PUSH
32916: EMPTY
32917: LIST
32918: LIST
32919: PUSH
32920: LD_INT 0
32922: PUSH
32923: LD_INT 1
32925: PUSH
32926: EMPTY
32927: LIST
32928: LIST
32929: PUSH
32930: LD_INT 1
32932: NEG
32933: PUSH
32934: LD_INT 0
32936: PUSH
32937: EMPTY
32938: LIST
32939: LIST
32940: PUSH
32941: LD_INT 1
32943: NEG
32944: PUSH
32945: LD_INT 1
32947: NEG
32948: PUSH
32949: EMPTY
32950: LIST
32951: LIST
32952: PUSH
32953: LD_INT 1
32955: NEG
32956: PUSH
32957: LD_INT 2
32959: NEG
32960: PUSH
32961: EMPTY
32962: LIST
32963: LIST
32964: PUSH
32965: LD_INT 0
32967: PUSH
32968: LD_INT 2
32970: NEG
32971: PUSH
32972: EMPTY
32973: LIST
32974: LIST
32975: PUSH
32976: LD_INT 1
32978: PUSH
32979: LD_INT 1
32981: NEG
32982: PUSH
32983: EMPTY
32984: LIST
32985: LIST
32986: PUSH
32987: LD_INT 2
32989: PUSH
32990: LD_INT 0
32992: PUSH
32993: EMPTY
32994: LIST
32995: LIST
32996: PUSH
32997: LD_INT 2
32999: PUSH
33000: LD_INT 1
33002: PUSH
33003: EMPTY
33004: LIST
33005: LIST
33006: PUSH
33007: LD_INT 2
33009: PUSH
33010: LD_INT 2
33012: PUSH
33013: EMPTY
33014: LIST
33015: LIST
33016: PUSH
33017: LD_INT 1
33019: PUSH
33020: LD_INT 2
33022: PUSH
33023: EMPTY
33024: LIST
33025: LIST
33026: PUSH
33027: LD_INT 0
33029: PUSH
33030: LD_INT 2
33032: PUSH
33033: EMPTY
33034: LIST
33035: LIST
33036: PUSH
33037: LD_INT 1
33039: NEG
33040: PUSH
33041: LD_INT 1
33043: PUSH
33044: EMPTY
33045: LIST
33046: LIST
33047: PUSH
33048: LD_INT 2
33050: NEG
33051: PUSH
33052: LD_INT 0
33054: PUSH
33055: EMPTY
33056: LIST
33057: LIST
33058: PUSH
33059: LD_INT 2
33061: NEG
33062: PUSH
33063: LD_INT 1
33065: NEG
33066: PUSH
33067: EMPTY
33068: LIST
33069: LIST
33070: PUSH
33071: LD_INT 2
33073: NEG
33074: PUSH
33075: LD_INT 2
33077: NEG
33078: PUSH
33079: EMPTY
33080: LIST
33081: LIST
33082: PUSH
33083: LD_INT 3
33085: PUSH
33086: LD_INT 1
33088: PUSH
33089: EMPTY
33090: LIST
33091: LIST
33092: PUSH
33093: LD_INT 3
33095: PUSH
33096: LD_INT 2
33098: PUSH
33099: EMPTY
33100: LIST
33101: LIST
33102: PUSH
33103: LD_INT 2
33105: PUSH
33106: LD_INT 3
33108: PUSH
33109: EMPTY
33110: LIST
33111: LIST
33112: PUSH
33113: LD_INT 1
33115: PUSH
33116: LD_INT 3
33118: PUSH
33119: EMPTY
33120: LIST
33121: LIST
33122: PUSH
33123: EMPTY
33124: LIST
33125: LIST
33126: LIST
33127: LIST
33128: LIST
33129: LIST
33130: LIST
33131: LIST
33132: LIST
33133: LIST
33134: LIST
33135: LIST
33136: LIST
33137: LIST
33138: LIST
33139: LIST
33140: LIST
33141: LIST
33142: LIST
33143: LIST
33144: LIST
33145: LIST
33146: LIST
33147: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
33148: LD_ADDR_VAR 0 26
33152: PUSH
33153: LD_INT 0
33155: PUSH
33156: LD_INT 0
33158: PUSH
33159: EMPTY
33160: LIST
33161: LIST
33162: PUSH
33163: LD_INT 0
33165: PUSH
33166: LD_INT 1
33168: NEG
33169: PUSH
33170: EMPTY
33171: LIST
33172: LIST
33173: PUSH
33174: LD_INT 1
33176: PUSH
33177: LD_INT 0
33179: PUSH
33180: EMPTY
33181: LIST
33182: LIST
33183: PUSH
33184: LD_INT 1
33186: PUSH
33187: LD_INT 1
33189: PUSH
33190: EMPTY
33191: LIST
33192: LIST
33193: PUSH
33194: LD_INT 0
33196: PUSH
33197: LD_INT 1
33199: PUSH
33200: EMPTY
33201: LIST
33202: LIST
33203: PUSH
33204: LD_INT 1
33206: NEG
33207: PUSH
33208: LD_INT 0
33210: PUSH
33211: EMPTY
33212: LIST
33213: LIST
33214: PUSH
33215: LD_INT 1
33217: NEG
33218: PUSH
33219: LD_INT 1
33221: NEG
33222: PUSH
33223: EMPTY
33224: LIST
33225: LIST
33226: PUSH
33227: LD_INT 1
33229: NEG
33230: PUSH
33231: LD_INT 2
33233: NEG
33234: PUSH
33235: EMPTY
33236: LIST
33237: LIST
33238: PUSH
33239: LD_INT 0
33241: PUSH
33242: LD_INT 2
33244: NEG
33245: PUSH
33246: EMPTY
33247: LIST
33248: LIST
33249: PUSH
33250: LD_INT 1
33252: PUSH
33253: LD_INT 1
33255: NEG
33256: PUSH
33257: EMPTY
33258: LIST
33259: LIST
33260: PUSH
33261: LD_INT 2
33263: PUSH
33264: LD_INT 0
33266: PUSH
33267: EMPTY
33268: LIST
33269: LIST
33270: PUSH
33271: LD_INT 2
33273: PUSH
33274: LD_INT 1
33276: PUSH
33277: EMPTY
33278: LIST
33279: LIST
33280: PUSH
33281: LD_INT 2
33283: PUSH
33284: LD_INT 2
33286: PUSH
33287: EMPTY
33288: LIST
33289: LIST
33290: PUSH
33291: LD_INT 1
33293: PUSH
33294: LD_INT 2
33296: PUSH
33297: EMPTY
33298: LIST
33299: LIST
33300: PUSH
33301: LD_INT 0
33303: PUSH
33304: LD_INT 2
33306: PUSH
33307: EMPTY
33308: LIST
33309: LIST
33310: PUSH
33311: LD_INT 1
33313: NEG
33314: PUSH
33315: LD_INT 1
33317: PUSH
33318: EMPTY
33319: LIST
33320: LIST
33321: PUSH
33322: LD_INT 2
33324: NEG
33325: PUSH
33326: LD_INT 0
33328: PUSH
33329: EMPTY
33330: LIST
33331: LIST
33332: PUSH
33333: LD_INT 2
33335: NEG
33336: PUSH
33337: LD_INT 1
33339: NEG
33340: PUSH
33341: EMPTY
33342: LIST
33343: LIST
33344: PUSH
33345: LD_INT 2
33347: NEG
33348: PUSH
33349: LD_INT 2
33351: NEG
33352: PUSH
33353: EMPTY
33354: LIST
33355: LIST
33356: PUSH
33357: LD_INT 2
33359: PUSH
33360: LD_INT 3
33362: PUSH
33363: EMPTY
33364: LIST
33365: LIST
33366: PUSH
33367: LD_INT 1
33369: PUSH
33370: LD_INT 3
33372: PUSH
33373: EMPTY
33374: LIST
33375: LIST
33376: PUSH
33377: LD_INT 1
33379: NEG
33380: PUSH
33381: LD_INT 2
33383: PUSH
33384: EMPTY
33385: LIST
33386: LIST
33387: PUSH
33388: LD_INT 2
33390: NEG
33391: PUSH
33392: LD_INT 1
33394: PUSH
33395: EMPTY
33396: LIST
33397: LIST
33398: PUSH
33399: EMPTY
33400: LIST
33401: LIST
33402: LIST
33403: LIST
33404: LIST
33405: LIST
33406: LIST
33407: LIST
33408: LIST
33409: LIST
33410: LIST
33411: LIST
33412: LIST
33413: LIST
33414: LIST
33415: LIST
33416: LIST
33417: LIST
33418: LIST
33419: LIST
33420: LIST
33421: LIST
33422: LIST
33423: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
33424: LD_ADDR_VAR 0 27
33428: PUSH
33429: LD_INT 0
33431: PUSH
33432: LD_INT 0
33434: PUSH
33435: EMPTY
33436: LIST
33437: LIST
33438: PUSH
33439: LD_INT 0
33441: PUSH
33442: LD_INT 1
33444: NEG
33445: PUSH
33446: EMPTY
33447: LIST
33448: LIST
33449: PUSH
33450: LD_INT 1
33452: PUSH
33453: LD_INT 0
33455: PUSH
33456: EMPTY
33457: LIST
33458: LIST
33459: PUSH
33460: LD_INT 1
33462: PUSH
33463: LD_INT 1
33465: PUSH
33466: EMPTY
33467: LIST
33468: LIST
33469: PUSH
33470: LD_INT 0
33472: PUSH
33473: LD_INT 1
33475: PUSH
33476: EMPTY
33477: LIST
33478: LIST
33479: PUSH
33480: LD_INT 1
33482: NEG
33483: PUSH
33484: LD_INT 0
33486: PUSH
33487: EMPTY
33488: LIST
33489: LIST
33490: PUSH
33491: LD_INT 1
33493: NEG
33494: PUSH
33495: LD_INT 1
33497: NEG
33498: PUSH
33499: EMPTY
33500: LIST
33501: LIST
33502: PUSH
33503: LD_INT 1
33505: NEG
33506: PUSH
33507: LD_INT 2
33509: NEG
33510: PUSH
33511: EMPTY
33512: LIST
33513: LIST
33514: PUSH
33515: LD_INT 0
33517: PUSH
33518: LD_INT 2
33520: NEG
33521: PUSH
33522: EMPTY
33523: LIST
33524: LIST
33525: PUSH
33526: LD_INT 1
33528: PUSH
33529: LD_INT 1
33531: NEG
33532: PUSH
33533: EMPTY
33534: LIST
33535: LIST
33536: PUSH
33537: LD_INT 2
33539: PUSH
33540: LD_INT 0
33542: PUSH
33543: EMPTY
33544: LIST
33545: LIST
33546: PUSH
33547: LD_INT 2
33549: PUSH
33550: LD_INT 1
33552: PUSH
33553: EMPTY
33554: LIST
33555: LIST
33556: PUSH
33557: LD_INT 2
33559: PUSH
33560: LD_INT 2
33562: PUSH
33563: EMPTY
33564: LIST
33565: LIST
33566: PUSH
33567: LD_INT 1
33569: PUSH
33570: LD_INT 2
33572: PUSH
33573: EMPTY
33574: LIST
33575: LIST
33576: PUSH
33577: LD_INT 0
33579: PUSH
33580: LD_INT 2
33582: PUSH
33583: EMPTY
33584: LIST
33585: LIST
33586: PUSH
33587: LD_INT 1
33589: NEG
33590: PUSH
33591: LD_INT 1
33593: PUSH
33594: EMPTY
33595: LIST
33596: LIST
33597: PUSH
33598: LD_INT 2
33600: NEG
33601: PUSH
33602: LD_INT 0
33604: PUSH
33605: EMPTY
33606: LIST
33607: LIST
33608: PUSH
33609: LD_INT 2
33611: NEG
33612: PUSH
33613: LD_INT 1
33615: NEG
33616: PUSH
33617: EMPTY
33618: LIST
33619: LIST
33620: PUSH
33621: LD_INT 2
33623: NEG
33624: PUSH
33625: LD_INT 2
33627: NEG
33628: PUSH
33629: EMPTY
33630: LIST
33631: LIST
33632: PUSH
33633: LD_INT 1
33635: NEG
33636: PUSH
33637: LD_INT 2
33639: PUSH
33640: EMPTY
33641: LIST
33642: LIST
33643: PUSH
33644: LD_INT 2
33646: NEG
33647: PUSH
33648: LD_INT 1
33650: PUSH
33651: EMPTY
33652: LIST
33653: LIST
33654: PUSH
33655: LD_INT 3
33657: NEG
33658: PUSH
33659: LD_INT 1
33661: NEG
33662: PUSH
33663: EMPTY
33664: LIST
33665: LIST
33666: PUSH
33667: LD_INT 3
33669: NEG
33670: PUSH
33671: LD_INT 2
33673: NEG
33674: PUSH
33675: EMPTY
33676: LIST
33677: LIST
33678: PUSH
33679: EMPTY
33680: LIST
33681: LIST
33682: LIST
33683: LIST
33684: LIST
33685: LIST
33686: LIST
33687: LIST
33688: LIST
33689: LIST
33690: LIST
33691: LIST
33692: LIST
33693: LIST
33694: LIST
33695: LIST
33696: LIST
33697: LIST
33698: LIST
33699: LIST
33700: LIST
33701: LIST
33702: LIST
33703: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
33704: LD_ADDR_VAR 0 28
33708: PUSH
33709: LD_INT 0
33711: PUSH
33712: LD_INT 0
33714: PUSH
33715: EMPTY
33716: LIST
33717: LIST
33718: PUSH
33719: LD_INT 0
33721: PUSH
33722: LD_INT 1
33724: NEG
33725: PUSH
33726: EMPTY
33727: LIST
33728: LIST
33729: PUSH
33730: LD_INT 1
33732: PUSH
33733: LD_INT 0
33735: PUSH
33736: EMPTY
33737: LIST
33738: LIST
33739: PUSH
33740: LD_INT 1
33742: PUSH
33743: LD_INT 1
33745: PUSH
33746: EMPTY
33747: LIST
33748: LIST
33749: PUSH
33750: LD_INT 0
33752: PUSH
33753: LD_INT 1
33755: PUSH
33756: EMPTY
33757: LIST
33758: LIST
33759: PUSH
33760: LD_INT 1
33762: NEG
33763: PUSH
33764: LD_INT 0
33766: PUSH
33767: EMPTY
33768: LIST
33769: LIST
33770: PUSH
33771: LD_INT 1
33773: NEG
33774: PUSH
33775: LD_INT 1
33777: NEG
33778: PUSH
33779: EMPTY
33780: LIST
33781: LIST
33782: PUSH
33783: LD_INT 1
33785: NEG
33786: PUSH
33787: LD_INT 2
33789: NEG
33790: PUSH
33791: EMPTY
33792: LIST
33793: LIST
33794: PUSH
33795: LD_INT 0
33797: PUSH
33798: LD_INT 2
33800: NEG
33801: PUSH
33802: EMPTY
33803: LIST
33804: LIST
33805: PUSH
33806: LD_INT 1
33808: PUSH
33809: LD_INT 1
33811: NEG
33812: PUSH
33813: EMPTY
33814: LIST
33815: LIST
33816: PUSH
33817: LD_INT 2
33819: PUSH
33820: LD_INT 0
33822: PUSH
33823: EMPTY
33824: LIST
33825: LIST
33826: PUSH
33827: LD_INT 2
33829: PUSH
33830: LD_INT 1
33832: PUSH
33833: EMPTY
33834: LIST
33835: LIST
33836: PUSH
33837: LD_INT 2
33839: PUSH
33840: LD_INT 2
33842: PUSH
33843: EMPTY
33844: LIST
33845: LIST
33846: PUSH
33847: LD_INT 1
33849: PUSH
33850: LD_INT 2
33852: PUSH
33853: EMPTY
33854: LIST
33855: LIST
33856: PUSH
33857: LD_INT 0
33859: PUSH
33860: LD_INT 2
33862: PUSH
33863: EMPTY
33864: LIST
33865: LIST
33866: PUSH
33867: LD_INT 1
33869: NEG
33870: PUSH
33871: LD_INT 1
33873: PUSH
33874: EMPTY
33875: LIST
33876: LIST
33877: PUSH
33878: LD_INT 2
33880: NEG
33881: PUSH
33882: LD_INT 0
33884: PUSH
33885: EMPTY
33886: LIST
33887: LIST
33888: PUSH
33889: LD_INT 2
33891: NEG
33892: PUSH
33893: LD_INT 1
33895: NEG
33896: PUSH
33897: EMPTY
33898: LIST
33899: LIST
33900: PUSH
33901: LD_INT 2
33903: NEG
33904: PUSH
33905: LD_INT 2
33907: NEG
33908: PUSH
33909: EMPTY
33910: LIST
33911: LIST
33912: PUSH
33913: LD_INT 2
33915: NEG
33916: PUSH
33917: LD_INT 3
33919: NEG
33920: PUSH
33921: EMPTY
33922: LIST
33923: LIST
33924: PUSH
33925: LD_INT 1
33927: NEG
33928: PUSH
33929: LD_INT 3
33931: NEG
33932: PUSH
33933: EMPTY
33934: LIST
33935: LIST
33936: PUSH
33937: LD_INT 3
33939: NEG
33940: PUSH
33941: LD_INT 1
33943: NEG
33944: PUSH
33945: EMPTY
33946: LIST
33947: LIST
33948: PUSH
33949: LD_INT 3
33951: NEG
33952: PUSH
33953: LD_INT 2
33955: NEG
33956: PUSH
33957: EMPTY
33958: LIST
33959: LIST
33960: PUSH
33961: EMPTY
33962: LIST
33963: LIST
33964: LIST
33965: LIST
33966: LIST
33967: LIST
33968: LIST
33969: LIST
33970: LIST
33971: LIST
33972: LIST
33973: LIST
33974: LIST
33975: LIST
33976: LIST
33977: LIST
33978: LIST
33979: LIST
33980: LIST
33981: LIST
33982: LIST
33983: LIST
33984: LIST
33985: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
33986: LD_ADDR_VAR 0 29
33990: PUSH
33991: LD_INT 0
33993: PUSH
33994: LD_INT 0
33996: PUSH
33997: EMPTY
33998: LIST
33999: LIST
34000: PUSH
34001: LD_INT 0
34003: PUSH
34004: LD_INT 1
34006: NEG
34007: PUSH
34008: EMPTY
34009: LIST
34010: LIST
34011: PUSH
34012: LD_INT 1
34014: PUSH
34015: LD_INT 0
34017: PUSH
34018: EMPTY
34019: LIST
34020: LIST
34021: PUSH
34022: LD_INT 1
34024: PUSH
34025: LD_INT 1
34027: PUSH
34028: EMPTY
34029: LIST
34030: LIST
34031: PUSH
34032: LD_INT 0
34034: PUSH
34035: LD_INT 1
34037: PUSH
34038: EMPTY
34039: LIST
34040: LIST
34041: PUSH
34042: LD_INT 1
34044: NEG
34045: PUSH
34046: LD_INT 0
34048: PUSH
34049: EMPTY
34050: LIST
34051: LIST
34052: PUSH
34053: LD_INT 1
34055: NEG
34056: PUSH
34057: LD_INT 1
34059: NEG
34060: PUSH
34061: EMPTY
34062: LIST
34063: LIST
34064: PUSH
34065: LD_INT 1
34067: NEG
34068: PUSH
34069: LD_INT 2
34071: NEG
34072: PUSH
34073: EMPTY
34074: LIST
34075: LIST
34076: PUSH
34077: LD_INT 0
34079: PUSH
34080: LD_INT 2
34082: NEG
34083: PUSH
34084: EMPTY
34085: LIST
34086: LIST
34087: PUSH
34088: LD_INT 1
34090: PUSH
34091: LD_INT 1
34093: NEG
34094: PUSH
34095: EMPTY
34096: LIST
34097: LIST
34098: PUSH
34099: LD_INT 2
34101: PUSH
34102: LD_INT 0
34104: PUSH
34105: EMPTY
34106: LIST
34107: LIST
34108: PUSH
34109: LD_INT 2
34111: PUSH
34112: LD_INT 1
34114: PUSH
34115: EMPTY
34116: LIST
34117: LIST
34118: PUSH
34119: LD_INT 1
34121: PUSH
34122: LD_INT 2
34124: PUSH
34125: EMPTY
34126: LIST
34127: LIST
34128: PUSH
34129: LD_INT 0
34131: PUSH
34132: LD_INT 2
34134: PUSH
34135: EMPTY
34136: LIST
34137: LIST
34138: PUSH
34139: LD_INT 1
34141: NEG
34142: PUSH
34143: LD_INT 1
34145: PUSH
34146: EMPTY
34147: LIST
34148: LIST
34149: PUSH
34150: LD_INT 2
34152: NEG
34153: PUSH
34154: LD_INT 1
34156: NEG
34157: PUSH
34158: EMPTY
34159: LIST
34160: LIST
34161: PUSH
34162: LD_INT 2
34164: NEG
34165: PUSH
34166: LD_INT 2
34168: NEG
34169: PUSH
34170: EMPTY
34171: LIST
34172: LIST
34173: PUSH
34174: LD_INT 2
34176: NEG
34177: PUSH
34178: LD_INT 3
34180: NEG
34181: PUSH
34182: EMPTY
34183: LIST
34184: LIST
34185: PUSH
34186: LD_INT 2
34188: PUSH
34189: LD_INT 1
34191: NEG
34192: PUSH
34193: EMPTY
34194: LIST
34195: LIST
34196: PUSH
34197: LD_INT 3
34199: PUSH
34200: LD_INT 1
34202: PUSH
34203: EMPTY
34204: LIST
34205: LIST
34206: PUSH
34207: LD_INT 1
34209: PUSH
34210: LD_INT 3
34212: PUSH
34213: EMPTY
34214: LIST
34215: LIST
34216: PUSH
34217: LD_INT 1
34219: NEG
34220: PUSH
34221: LD_INT 2
34223: PUSH
34224: EMPTY
34225: LIST
34226: LIST
34227: PUSH
34228: LD_INT 3
34230: NEG
34231: PUSH
34232: LD_INT 2
34234: NEG
34235: PUSH
34236: EMPTY
34237: LIST
34238: LIST
34239: PUSH
34240: EMPTY
34241: LIST
34242: LIST
34243: LIST
34244: LIST
34245: LIST
34246: LIST
34247: LIST
34248: LIST
34249: LIST
34250: LIST
34251: LIST
34252: LIST
34253: LIST
34254: LIST
34255: LIST
34256: LIST
34257: LIST
34258: LIST
34259: LIST
34260: LIST
34261: LIST
34262: LIST
34263: LIST
34264: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
34265: LD_ADDR_VAR 0 30
34269: PUSH
34270: LD_INT 0
34272: PUSH
34273: LD_INT 0
34275: PUSH
34276: EMPTY
34277: LIST
34278: LIST
34279: PUSH
34280: LD_INT 0
34282: PUSH
34283: LD_INT 1
34285: NEG
34286: PUSH
34287: EMPTY
34288: LIST
34289: LIST
34290: PUSH
34291: LD_INT 1
34293: PUSH
34294: LD_INT 0
34296: PUSH
34297: EMPTY
34298: LIST
34299: LIST
34300: PUSH
34301: LD_INT 1
34303: PUSH
34304: LD_INT 1
34306: PUSH
34307: EMPTY
34308: LIST
34309: LIST
34310: PUSH
34311: LD_INT 0
34313: PUSH
34314: LD_INT 1
34316: PUSH
34317: EMPTY
34318: LIST
34319: LIST
34320: PUSH
34321: LD_INT 1
34323: NEG
34324: PUSH
34325: LD_INT 0
34327: PUSH
34328: EMPTY
34329: LIST
34330: LIST
34331: PUSH
34332: LD_INT 1
34334: NEG
34335: PUSH
34336: LD_INT 1
34338: NEG
34339: PUSH
34340: EMPTY
34341: LIST
34342: LIST
34343: PUSH
34344: LD_INT 1
34346: NEG
34347: PUSH
34348: LD_INT 2
34350: NEG
34351: PUSH
34352: EMPTY
34353: LIST
34354: LIST
34355: PUSH
34356: LD_INT 0
34358: PUSH
34359: LD_INT 2
34361: NEG
34362: PUSH
34363: EMPTY
34364: LIST
34365: LIST
34366: PUSH
34367: LD_INT 1
34369: PUSH
34370: LD_INT 1
34372: NEG
34373: PUSH
34374: EMPTY
34375: LIST
34376: LIST
34377: PUSH
34378: LD_INT 2
34380: PUSH
34381: LD_INT 0
34383: PUSH
34384: EMPTY
34385: LIST
34386: LIST
34387: PUSH
34388: LD_INT 2
34390: PUSH
34391: LD_INT 1
34393: PUSH
34394: EMPTY
34395: LIST
34396: LIST
34397: PUSH
34398: LD_INT 2
34400: PUSH
34401: LD_INT 2
34403: PUSH
34404: EMPTY
34405: LIST
34406: LIST
34407: PUSH
34408: LD_INT 1
34410: PUSH
34411: LD_INT 2
34413: PUSH
34414: EMPTY
34415: LIST
34416: LIST
34417: PUSH
34418: LD_INT 1
34420: NEG
34421: PUSH
34422: LD_INT 1
34424: PUSH
34425: EMPTY
34426: LIST
34427: LIST
34428: PUSH
34429: LD_INT 2
34431: NEG
34432: PUSH
34433: LD_INT 0
34435: PUSH
34436: EMPTY
34437: LIST
34438: LIST
34439: PUSH
34440: LD_INT 2
34442: NEG
34443: PUSH
34444: LD_INT 1
34446: NEG
34447: PUSH
34448: EMPTY
34449: LIST
34450: LIST
34451: PUSH
34452: LD_INT 1
34454: NEG
34455: PUSH
34456: LD_INT 3
34458: NEG
34459: PUSH
34460: EMPTY
34461: LIST
34462: LIST
34463: PUSH
34464: LD_INT 1
34466: PUSH
34467: LD_INT 2
34469: NEG
34470: PUSH
34471: EMPTY
34472: LIST
34473: LIST
34474: PUSH
34475: LD_INT 3
34477: PUSH
34478: LD_INT 2
34480: PUSH
34481: EMPTY
34482: LIST
34483: LIST
34484: PUSH
34485: LD_INT 2
34487: PUSH
34488: LD_INT 3
34490: PUSH
34491: EMPTY
34492: LIST
34493: LIST
34494: PUSH
34495: LD_INT 2
34497: NEG
34498: PUSH
34499: LD_INT 1
34501: PUSH
34502: EMPTY
34503: LIST
34504: LIST
34505: PUSH
34506: LD_INT 3
34508: NEG
34509: PUSH
34510: LD_INT 1
34512: NEG
34513: PUSH
34514: EMPTY
34515: LIST
34516: LIST
34517: PUSH
34518: EMPTY
34519: LIST
34520: LIST
34521: LIST
34522: LIST
34523: LIST
34524: LIST
34525: LIST
34526: LIST
34527: LIST
34528: LIST
34529: LIST
34530: LIST
34531: LIST
34532: LIST
34533: LIST
34534: LIST
34535: LIST
34536: LIST
34537: LIST
34538: LIST
34539: LIST
34540: LIST
34541: LIST
34542: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
34543: LD_ADDR_VAR 0 31
34547: PUSH
34548: LD_INT 0
34550: PUSH
34551: LD_INT 0
34553: PUSH
34554: EMPTY
34555: LIST
34556: LIST
34557: PUSH
34558: LD_INT 0
34560: PUSH
34561: LD_INT 1
34563: NEG
34564: PUSH
34565: EMPTY
34566: LIST
34567: LIST
34568: PUSH
34569: LD_INT 1
34571: PUSH
34572: LD_INT 0
34574: PUSH
34575: EMPTY
34576: LIST
34577: LIST
34578: PUSH
34579: LD_INT 1
34581: PUSH
34582: LD_INT 1
34584: PUSH
34585: EMPTY
34586: LIST
34587: LIST
34588: PUSH
34589: LD_INT 0
34591: PUSH
34592: LD_INT 1
34594: PUSH
34595: EMPTY
34596: LIST
34597: LIST
34598: PUSH
34599: LD_INT 1
34601: NEG
34602: PUSH
34603: LD_INT 0
34605: PUSH
34606: EMPTY
34607: LIST
34608: LIST
34609: PUSH
34610: LD_INT 1
34612: NEG
34613: PUSH
34614: LD_INT 1
34616: NEG
34617: PUSH
34618: EMPTY
34619: LIST
34620: LIST
34621: PUSH
34622: LD_INT 1
34624: NEG
34625: PUSH
34626: LD_INT 2
34628: NEG
34629: PUSH
34630: EMPTY
34631: LIST
34632: LIST
34633: PUSH
34634: LD_INT 1
34636: PUSH
34637: LD_INT 1
34639: NEG
34640: PUSH
34641: EMPTY
34642: LIST
34643: LIST
34644: PUSH
34645: LD_INT 2
34647: PUSH
34648: LD_INT 0
34650: PUSH
34651: EMPTY
34652: LIST
34653: LIST
34654: PUSH
34655: LD_INT 2
34657: PUSH
34658: LD_INT 1
34660: PUSH
34661: EMPTY
34662: LIST
34663: LIST
34664: PUSH
34665: LD_INT 2
34667: PUSH
34668: LD_INT 2
34670: PUSH
34671: EMPTY
34672: LIST
34673: LIST
34674: PUSH
34675: LD_INT 1
34677: PUSH
34678: LD_INT 2
34680: PUSH
34681: EMPTY
34682: LIST
34683: LIST
34684: PUSH
34685: LD_INT 0
34687: PUSH
34688: LD_INT 2
34690: PUSH
34691: EMPTY
34692: LIST
34693: LIST
34694: PUSH
34695: LD_INT 1
34697: NEG
34698: PUSH
34699: LD_INT 1
34701: PUSH
34702: EMPTY
34703: LIST
34704: LIST
34705: PUSH
34706: LD_INT 2
34708: NEG
34709: PUSH
34710: LD_INT 1
34712: NEG
34713: PUSH
34714: EMPTY
34715: LIST
34716: LIST
34717: PUSH
34718: LD_INT 2
34720: NEG
34721: PUSH
34722: LD_INT 2
34724: NEG
34725: PUSH
34726: EMPTY
34727: LIST
34728: LIST
34729: PUSH
34730: LD_INT 2
34732: NEG
34733: PUSH
34734: LD_INT 3
34736: NEG
34737: PUSH
34738: EMPTY
34739: LIST
34740: LIST
34741: PUSH
34742: LD_INT 2
34744: PUSH
34745: LD_INT 1
34747: NEG
34748: PUSH
34749: EMPTY
34750: LIST
34751: LIST
34752: PUSH
34753: LD_INT 3
34755: PUSH
34756: LD_INT 1
34758: PUSH
34759: EMPTY
34760: LIST
34761: LIST
34762: PUSH
34763: LD_INT 1
34765: PUSH
34766: LD_INT 3
34768: PUSH
34769: EMPTY
34770: LIST
34771: LIST
34772: PUSH
34773: LD_INT 1
34775: NEG
34776: PUSH
34777: LD_INT 2
34779: PUSH
34780: EMPTY
34781: LIST
34782: LIST
34783: PUSH
34784: LD_INT 3
34786: NEG
34787: PUSH
34788: LD_INT 2
34790: NEG
34791: PUSH
34792: EMPTY
34793: LIST
34794: LIST
34795: PUSH
34796: EMPTY
34797: LIST
34798: LIST
34799: LIST
34800: LIST
34801: LIST
34802: LIST
34803: LIST
34804: LIST
34805: LIST
34806: LIST
34807: LIST
34808: LIST
34809: LIST
34810: LIST
34811: LIST
34812: LIST
34813: LIST
34814: LIST
34815: LIST
34816: LIST
34817: LIST
34818: LIST
34819: LIST
34820: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
34821: LD_ADDR_VAR 0 32
34825: PUSH
34826: LD_INT 0
34828: PUSH
34829: LD_INT 0
34831: PUSH
34832: EMPTY
34833: LIST
34834: LIST
34835: PUSH
34836: LD_INT 0
34838: PUSH
34839: LD_INT 1
34841: NEG
34842: PUSH
34843: EMPTY
34844: LIST
34845: LIST
34846: PUSH
34847: LD_INT 1
34849: PUSH
34850: LD_INT 0
34852: PUSH
34853: EMPTY
34854: LIST
34855: LIST
34856: PUSH
34857: LD_INT 1
34859: PUSH
34860: LD_INT 1
34862: PUSH
34863: EMPTY
34864: LIST
34865: LIST
34866: PUSH
34867: LD_INT 0
34869: PUSH
34870: LD_INT 1
34872: PUSH
34873: EMPTY
34874: LIST
34875: LIST
34876: PUSH
34877: LD_INT 1
34879: NEG
34880: PUSH
34881: LD_INT 0
34883: PUSH
34884: EMPTY
34885: LIST
34886: LIST
34887: PUSH
34888: LD_INT 1
34890: NEG
34891: PUSH
34892: LD_INT 1
34894: NEG
34895: PUSH
34896: EMPTY
34897: LIST
34898: LIST
34899: PUSH
34900: LD_INT 1
34902: NEG
34903: PUSH
34904: LD_INT 2
34906: NEG
34907: PUSH
34908: EMPTY
34909: LIST
34910: LIST
34911: PUSH
34912: LD_INT 0
34914: PUSH
34915: LD_INT 2
34917: NEG
34918: PUSH
34919: EMPTY
34920: LIST
34921: LIST
34922: PUSH
34923: LD_INT 1
34925: PUSH
34926: LD_INT 1
34928: NEG
34929: PUSH
34930: EMPTY
34931: LIST
34932: LIST
34933: PUSH
34934: LD_INT 2
34936: PUSH
34937: LD_INT 1
34939: PUSH
34940: EMPTY
34941: LIST
34942: LIST
34943: PUSH
34944: LD_INT 2
34946: PUSH
34947: LD_INT 2
34949: PUSH
34950: EMPTY
34951: LIST
34952: LIST
34953: PUSH
34954: LD_INT 1
34956: PUSH
34957: LD_INT 2
34959: PUSH
34960: EMPTY
34961: LIST
34962: LIST
34963: PUSH
34964: LD_INT 0
34966: PUSH
34967: LD_INT 2
34969: PUSH
34970: EMPTY
34971: LIST
34972: LIST
34973: PUSH
34974: LD_INT 1
34976: NEG
34977: PUSH
34978: LD_INT 1
34980: PUSH
34981: EMPTY
34982: LIST
34983: LIST
34984: PUSH
34985: LD_INT 2
34987: NEG
34988: PUSH
34989: LD_INT 0
34991: PUSH
34992: EMPTY
34993: LIST
34994: LIST
34995: PUSH
34996: LD_INT 2
34998: NEG
34999: PUSH
35000: LD_INT 1
35002: NEG
35003: PUSH
35004: EMPTY
35005: LIST
35006: LIST
35007: PUSH
35008: LD_INT 1
35010: NEG
35011: PUSH
35012: LD_INT 3
35014: NEG
35015: PUSH
35016: EMPTY
35017: LIST
35018: LIST
35019: PUSH
35020: LD_INT 1
35022: PUSH
35023: LD_INT 2
35025: NEG
35026: PUSH
35027: EMPTY
35028: LIST
35029: LIST
35030: PUSH
35031: LD_INT 3
35033: PUSH
35034: LD_INT 2
35036: PUSH
35037: EMPTY
35038: LIST
35039: LIST
35040: PUSH
35041: LD_INT 2
35043: PUSH
35044: LD_INT 3
35046: PUSH
35047: EMPTY
35048: LIST
35049: LIST
35050: PUSH
35051: LD_INT 2
35053: NEG
35054: PUSH
35055: LD_INT 1
35057: PUSH
35058: EMPTY
35059: LIST
35060: LIST
35061: PUSH
35062: LD_INT 3
35064: NEG
35065: PUSH
35066: LD_INT 1
35068: NEG
35069: PUSH
35070: EMPTY
35071: LIST
35072: LIST
35073: PUSH
35074: EMPTY
35075: LIST
35076: LIST
35077: LIST
35078: LIST
35079: LIST
35080: LIST
35081: LIST
35082: LIST
35083: LIST
35084: LIST
35085: LIST
35086: LIST
35087: LIST
35088: LIST
35089: LIST
35090: LIST
35091: LIST
35092: LIST
35093: LIST
35094: LIST
35095: LIST
35096: LIST
35097: LIST
35098: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35099: LD_ADDR_VAR 0 33
35103: PUSH
35104: LD_INT 0
35106: PUSH
35107: LD_INT 0
35109: PUSH
35110: EMPTY
35111: LIST
35112: LIST
35113: PUSH
35114: LD_INT 0
35116: PUSH
35117: LD_INT 1
35119: NEG
35120: PUSH
35121: EMPTY
35122: LIST
35123: LIST
35124: PUSH
35125: LD_INT 1
35127: PUSH
35128: LD_INT 0
35130: PUSH
35131: EMPTY
35132: LIST
35133: LIST
35134: PUSH
35135: LD_INT 1
35137: PUSH
35138: LD_INT 1
35140: PUSH
35141: EMPTY
35142: LIST
35143: LIST
35144: PUSH
35145: LD_INT 0
35147: PUSH
35148: LD_INT 1
35150: PUSH
35151: EMPTY
35152: LIST
35153: LIST
35154: PUSH
35155: LD_INT 1
35157: NEG
35158: PUSH
35159: LD_INT 0
35161: PUSH
35162: EMPTY
35163: LIST
35164: LIST
35165: PUSH
35166: LD_INT 1
35168: NEG
35169: PUSH
35170: LD_INT 1
35172: NEG
35173: PUSH
35174: EMPTY
35175: LIST
35176: LIST
35177: PUSH
35178: LD_INT 1
35180: NEG
35181: PUSH
35182: LD_INT 2
35184: NEG
35185: PUSH
35186: EMPTY
35187: LIST
35188: LIST
35189: PUSH
35190: LD_INT 1
35192: PUSH
35193: LD_INT 1
35195: NEG
35196: PUSH
35197: EMPTY
35198: LIST
35199: LIST
35200: PUSH
35201: LD_INT 2
35203: PUSH
35204: LD_INT 0
35206: PUSH
35207: EMPTY
35208: LIST
35209: LIST
35210: PUSH
35211: LD_INT 2
35213: PUSH
35214: LD_INT 1
35216: PUSH
35217: EMPTY
35218: LIST
35219: LIST
35220: PUSH
35221: LD_INT 1
35223: PUSH
35224: LD_INT 2
35226: PUSH
35227: EMPTY
35228: LIST
35229: LIST
35230: PUSH
35231: LD_INT 0
35233: PUSH
35234: LD_INT 2
35236: PUSH
35237: EMPTY
35238: LIST
35239: LIST
35240: PUSH
35241: LD_INT 1
35243: NEG
35244: PUSH
35245: LD_INT 1
35247: PUSH
35248: EMPTY
35249: LIST
35250: LIST
35251: PUSH
35252: LD_INT 2
35254: NEG
35255: PUSH
35256: LD_INT 0
35258: PUSH
35259: EMPTY
35260: LIST
35261: LIST
35262: PUSH
35263: LD_INT 2
35265: NEG
35266: PUSH
35267: LD_INT 1
35269: NEG
35270: PUSH
35271: EMPTY
35272: LIST
35273: LIST
35274: PUSH
35275: LD_INT 2
35277: NEG
35278: PUSH
35279: LD_INT 2
35281: NEG
35282: PUSH
35283: EMPTY
35284: LIST
35285: LIST
35286: PUSH
35287: LD_INT 2
35289: NEG
35290: PUSH
35291: LD_INT 3
35293: NEG
35294: PUSH
35295: EMPTY
35296: LIST
35297: LIST
35298: PUSH
35299: LD_INT 2
35301: PUSH
35302: LD_INT 1
35304: NEG
35305: PUSH
35306: EMPTY
35307: LIST
35308: LIST
35309: PUSH
35310: LD_INT 3
35312: PUSH
35313: LD_INT 1
35315: PUSH
35316: EMPTY
35317: LIST
35318: LIST
35319: PUSH
35320: LD_INT 1
35322: PUSH
35323: LD_INT 3
35325: PUSH
35326: EMPTY
35327: LIST
35328: LIST
35329: PUSH
35330: LD_INT 1
35332: NEG
35333: PUSH
35334: LD_INT 2
35336: PUSH
35337: EMPTY
35338: LIST
35339: LIST
35340: PUSH
35341: LD_INT 3
35343: NEG
35344: PUSH
35345: LD_INT 2
35347: NEG
35348: PUSH
35349: EMPTY
35350: LIST
35351: LIST
35352: PUSH
35353: EMPTY
35354: LIST
35355: LIST
35356: LIST
35357: LIST
35358: LIST
35359: LIST
35360: LIST
35361: LIST
35362: LIST
35363: LIST
35364: LIST
35365: LIST
35366: LIST
35367: LIST
35368: LIST
35369: LIST
35370: LIST
35371: LIST
35372: LIST
35373: LIST
35374: LIST
35375: LIST
35376: LIST
35377: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35378: LD_ADDR_VAR 0 34
35382: PUSH
35383: LD_INT 0
35385: PUSH
35386: LD_INT 0
35388: PUSH
35389: EMPTY
35390: LIST
35391: LIST
35392: PUSH
35393: LD_INT 0
35395: PUSH
35396: LD_INT 1
35398: NEG
35399: PUSH
35400: EMPTY
35401: LIST
35402: LIST
35403: PUSH
35404: LD_INT 1
35406: PUSH
35407: LD_INT 0
35409: PUSH
35410: EMPTY
35411: LIST
35412: LIST
35413: PUSH
35414: LD_INT 1
35416: PUSH
35417: LD_INT 1
35419: PUSH
35420: EMPTY
35421: LIST
35422: LIST
35423: PUSH
35424: LD_INT 0
35426: PUSH
35427: LD_INT 1
35429: PUSH
35430: EMPTY
35431: LIST
35432: LIST
35433: PUSH
35434: LD_INT 1
35436: NEG
35437: PUSH
35438: LD_INT 0
35440: PUSH
35441: EMPTY
35442: LIST
35443: LIST
35444: PUSH
35445: LD_INT 1
35447: NEG
35448: PUSH
35449: LD_INT 1
35451: NEG
35452: PUSH
35453: EMPTY
35454: LIST
35455: LIST
35456: PUSH
35457: LD_INT 1
35459: NEG
35460: PUSH
35461: LD_INT 2
35463: NEG
35464: PUSH
35465: EMPTY
35466: LIST
35467: LIST
35468: PUSH
35469: LD_INT 0
35471: PUSH
35472: LD_INT 2
35474: NEG
35475: PUSH
35476: EMPTY
35477: LIST
35478: LIST
35479: PUSH
35480: LD_INT 1
35482: PUSH
35483: LD_INT 1
35485: NEG
35486: PUSH
35487: EMPTY
35488: LIST
35489: LIST
35490: PUSH
35491: LD_INT 2
35493: PUSH
35494: LD_INT 1
35496: PUSH
35497: EMPTY
35498: LIST
35499: LIST
35500: PUSH
35501: LD_INT 2
35503: PUSH
35504: LD_INT 2
35506: PUSH
35507: EMPTY
35508: LIST
35509: LIST
35510: PUSH
35511: LD_INT 1
35513: PUSH
35514: LD_INT 2
35516: PUSH
35517: EMPTY
35518: LIST
35519: LIST
35520: PUSH
35521: LD_INT 1
35523: NEG
35524: PUSH
35525: LD_INT 1
35527: PUSH
35528: EMPTY
35529: LIST
35530: LIST
35531: PUSH
35532: LD_INT 2
35534: NEG
35535: PUSH
35536: LD_INT 0
35538: PUSH
35539: EMPTY
35540: LIST
35541: LIST
35542: PUSH
35543: LD_INT 2
35545: NEG
35546: PUSH
35547: LD_INT 1
35549: NEG
35550: PUSH
35551: EMPTY
35552: LIST
35553: LIST
35554: PUSH
35555: LD_INT 2
35557: NEG
35558: PUSH
35559: LD_INT 2
35561: NEG
35562: PUSH
35563: EMPTY
35564: LIST
35565: LIST
35566: PUSH
35567: LD_INT 1
35569: NEG
35570: PUSH
35571: LD_INT 3
35573: NEG
35574: PUSH
35575: EMPTY
35576: LIST
35577: LIST
35578: PUSH
35579: LD_INT 1
35581: PUSH
35582: LD_INT 2
35584: NEG
35585: PUSH
35586: EMPTY
35587: LIST
35588: LIST
35589: PUSH
35590: LD_INT 3
35592: PUSH
35593: LD_INT 2
35595: PUSH
35596: EMPTY
35597: LIST
35598: LIST
35599: PUSH
35600: LD_INT 2
35602: PUSH
35603: LD_INT 3
35605: PUSH
35606: EMPTY
35607: LIST
35608: LIST
35609: PUSH
35610: LD_INT 2
35612: NEG
35613: PUSH
35614: LD_INT 1
35616: PUSH
35617: EMPTY
35618: LIST
35619: LIST
35620: PUSH
35621: LD_INT 3
35623: NEG
35624: PUSH
35625: LD_INT 1
35627: NEG
35628: PUSH
35629: EMPTY
35630: LIST
35631: LIST
35632: PUSH
35633: EMPTY
35634: LIST
35635: LIST
35636: LIST
35637: LIST
35638: LIST
35639: LIST
35640: LIST
35641: LIST
35642: LIST
35643: LIST
35644: LIST
35645: LIST
35646: LIST
35647: LIST
35648: LIST
35649: LIST
35650: LIST
35651: LIST
35652: LIST
35653: LIST
35654: LIST
35655: LIST
35656: LIST
35657: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
35658: LD_ADDR_VAR 0 35
35662: PUSH
35663: LD_INT 0
35665: PUSH
35666: LD_INT 0
35668: PUSH
35669: EMPTY
35670: LIST
35671: LIST
35672: PUSH
35673: LD_INT 0
35675: PUSH
35676: LD_INT 1
35678: NEG
35679: PUSH
35680: EMPTY
35681: LIST
35682: LIST
35683: PUSH
35684: LD_INT 1
35686: PUSH
35687: LD_INT 0
35689: PUSH
35690: EMPTY
35691: LIST
35692: LIST
35693: PUSH
35694: LD_INT 1
35696: PUSH
35697: LD_INT 1
35699: PUSH
35700: EMPTY
35701: LIST
35702: LIST
35703: PUSH
35704: LD_INT 0
35706: PUSH
35707: LD_INT 1
35709: PUSH
35710: EMPTY
35711: LIST
35712: LIST
35713: PUSH
35714: LD_INT 1
35716: NEG
35717: PUSH
35718: LD_INT 0
35720: PUSH
35721: EMPTY
35722: LIST
35723: LIST
35724: PUSH
35725: LD_INT 1
35727: NEG
35728: PUSH
35729: LD_INT 1
35731: NEG
35732: PUSH
35733: EMPTY
35734: LIST
35735: LIST
35736: PUSH
35737: LD_INT 2
35739: PUSH
35740: LD_INT 1
35742: PUSH
35743: EMPTY
35744: LIST
35745: LIST
35746: PUSH
35747: LD_INT 2
35749: NEG
35750: PUSH
35751: LD_INT 1
35753: NEG
35754: PUSH
35755: EMPTY
35756: LIST
35757: LIST
35758: PUSH
35759: EMPTY
35760: LIST
35761: LIST
35762: LIST
35763: LIST
35764: LIST
35765: LIST
35766: LIST
35767: LIST
35768: LIST
35769: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
35770: LD_ADDR_VAR 0 36
35774: PUSH
35775: LD_INT 0
35777: PUSH
35778: LD_INT 0
35780: PUSH
35781: EMPTY
35782: LIST
35783: LIST
35784: PUSH
35785: LD_INT 0
35787: PUSH
35788: LD_INT 1
35790: NEG
35791: PUSH
35792: EMPTY
35793: LIST
35794: LIST
35795: PUSH
35796: LD_INT 1
35798: PUSH
35799: LD_INT 0
35801: PUSH
35802: EMPTY
35803: LIST
35804: LIST
35805: PUSH
35806: LD_INT 1
35808: PUSH
35809: LD_INT 1
35811: PUSH
35812: EMPTY
35813: LIST
35814: LIST
35815: PUSH
35816: LD_INT 0
35818: PUSH
35819: LD_INT 1
35821: PUSH
35822: EMPTY
35823: LIST
35824: LIST
35825: PUSH
35826: LD_INT 1
35828: NEG
35829: PUSH
35830: LD_INT 0
35832: PUSH
35833: EMPTY
35834: LIST
35835: LIST
35836: PUSH
35837: LD_INT 1
35839: NEG
35840: PUSH
35841: LD_INT 1
35843: NEG
35844: PUSH
35845: EMPTY
35846: LIST
35847: LIST
35848: PUSH
35849: LD_INT 1
35851: NEG
35852: PUSH
35853: LD_INT 2
35855: NEG
35856: PUSH
35857: EMPTY
35858: LIST
35859: LIST
35860: PUSH
35861: LD_INT 1
35863: PUSH
35864: LD_INT 2
35866: PUSH
35867: EMPTY
35868: LIST
35869: LIST
35870: PUSH
35871: EMPTY
35872: LIST
35873: LIST
35874: LIST
35875: LIST
35876: LIST
35877: LIST
35878: LIST
35879: LIST
35880: LIST
35881: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
35882: LD_ADDR_VAR 0 37
35886: PUSH
35887: LD_INT 0
35889: PUSH
35890: LD_INT 0
35892: PUSH
35893: EMPTY
35894: LIST
35895: LIST
35896: PUSH
35897: LD_INT 0
35899: PUSH
35900: LD_INT 1
35902: NEG
35903: PUSH
35904: EMPTY
35905: LIST
35906: LIST
35907: PUSH
35908: LD_INT 1
35910: PUSH
35911: LD_INT 0
35913: PUSH
35914: EMPTY
35915: LIST
35916: LIST
35917: PUSH
35918: LD_INT 1
35920: PUSH
35921: LD_INT 1
35923: PUSH
35924: EMPTY
35925: LIST
35926: LIST
35927: PUSH
35928: LD_INT 0
35930: PUSH
35931: LD_INT 1
35933: PUSH
35934: EMPTY
35935: LIST
35936: LIST
35937: PUSH
35938: LD_INT 1
35940: NEG
35941: PUSH
35942: LD_INT 0
35944: PUSH
35945: EMPTY
35946: LIST
35947: LIST
35948: PUSH
35949: LD_INT 1
35951: NEG
35952: PUSH
35953: LD_INT 1
35955: NEG
35956: PUSH
35957: EMPTY
35958: LIST
35959: LIST
35960: PUSH
35961: LD_INT 1
35963: PUSH
35964: LD_INT 1
35966: NEG
35967: PUSH
35968: EMPTY
35969: LIST
35970: LIST
35971: PUSH
35972: LD_INT 1
35974: NEG
35975: PUSH
35976: LD_INT 1
35978: PUSH
35979: EMPTY
35980: LIST
35981: LIST
35982: PUSH
35983: EMPTY
35984: LIST
35985: LIST
35986: LIST
35987: LIST
35988: LIST
35989: LIST
35990: LIST
35991: LIST
35992: LIST
35993: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
35994: LD_ADDR_VAR 0 38
35998: PUSH
35999: LD_INT 0
36001: PUSH
36002: LD_INT 0
36004: PUSH
36005: EMPTY
36006: LIST
36007: LIST
36008: PUSH
36009: LD_INT 0
36011: PUSH
36012: LD_INT 1
36014: NEG
36015: PUSH
36016: EMPTY
36017: LIST
36018: LIST
36019: PUSH
36020: LD_INT 1
36022: PUSH
36023: LD_INT 0
36025: PUSH
36026: EMPTY
36027: LIST
36028: LIST
36029: PUSH
36030: LD_INT 1
36032: PUSH
36033: LD_INT 1
36035: PUSH
36036: EMPTY
36037: LIST
36038: LIST
36039: PUSH
36040: LD_INT 0
36042: PUSH
36043: LD_INT 1
36045: PUSH
36046: EMPTY
36047: LIST
36048: LIST
36049: PUSH
36050: LD_INT 1
36052: NEG
36053: PUSH
36054: LD_INT 0
36056: PUSH
36057: EMPTY
36058: LIST
36059: LIST
36060: PUSH
36061: LD_INT 1
36063: NEG
36064: PUSH
36065: LD_INT 1
36067: NEG
36068: PUSH
36069: EMPTY
36070: LIST
36071: LIST
36072: PUSH
36073: LD_INT 2
36075: PUSH
36076: LD_INT 1
36078: PUSH
36079: EMPTY
36080: LIST
36081: LIST
36082: PUSH
36083: LD_INT 2
36085: NEG
36086: PUSH
36087: LD_INT 1
36089: NEG
36090: PUSH
36091: EMPTY
36092: LIST
36093: LIST
36094: PUSH
36095: EMPTY
36096: LIST
36097: LIST
36098: LIST
36099: LIST
36100: LIST
36101: LIST
36102: LIST
36103: LIST
36104: LIST
36105: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
36106: LD_ADDR_VAR 0 39
36110: PUSH
36111: LD_INT 0
36113: PUSH
36114: LD_INT 0
36116: PUSH
36117: EMPTY
36118: LIST
36119: LIST
36120: PUSH
36121: LD_INT 0
36123: PUSH
36124: LD_INT 1
36126: NEG
36127: PUSH
36128: EMPTY
36129: LIST
36130: LIST
36131: PUSH
36132: LD_INT 1
36134: PUSH
36135: LD_INT 0
36137: PUSH
36138: EMPTY
36139: LIST
36140: LIST
36141: PUSH
36142: LD_INT 1
36144: PUSH
36145: LD_INT 1
36147: PUSH
36148: EMPTY
36149: LIST
36150: LIST
36151: PUSH
36152: LD_INT 0
36154: PUSH
36155: LD_INT 1
36157: PUSH
36158: EMPTY
36159: LIST
36160: LIST
36161: PUSH
36162: LD_INT 1
36164: NEG
36165: PUSH
36166: LD_INT 0
36168: PUSH
36169: EMPTY
36170: LIST
36171: LIST
36172: PUSH
36173: LD_INT 1
36175: NEG
36176: PUSH
36177: LD_INT 1
36179: NEG
36180: PUSH
36181: EMPTY
36182: LIST
36183: LIST
36184: PUSH
36185: LD_INT 1
36187: NEG
36188: PUSH
36189: LD_INT 2
36191: NEG
36192: PUSH
36193: EMPTY
36194: LIST
36195: LIST
36196: PUSH
36197: LD_INT 1
36199: PUSH
36200: LD_INT 2
36202: PUSH
36203: EMPTY
36204: LIST
36205: LIST
36206: PUSH
36207: EMPTY
36208: LIST
36209: LIST
36210: LIST
36211: LIST
36212: LIST
36213: LIST
36214: LIST
36215: LIST
36216: LIST
36217: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
36218: LD_ADDR_VAR 0 40
36222: PUSH
36223: LD_INT 0
36225: PUSH
36226: LD_INT 0
36228: PUSH
36229: EMPTY
36230: LIST
36231: LIST
36232: PUSH
36233: LD_INT 0
36235: PUSH
36236: LD_INT 1
36238: NEG
36239: PUSH
36240: EMPTY
36241: LIST
36242: LIST
36243: PUSH
36244: LD_INT 1
36246: PUSH
36247: LD_INT 0
36249: PUSH
36250: EMPTY
36251: LIST
36252: LIST
36253: PUSH
36254: LD_INT 1
36256: PUSH
36257: LD_INT 1
36259: PUSH
36260: EMPTY
36261: LIST
36262: LIST
36263: PUSH
36264: LD_INT 0
36266: PUSH
36267: LD_INT 1
36269: PUSH
36270: EMPTY
36271: LIST
36272: LIST
36273: PUSH
36274: LD_INT 1
36276: NEG
36277: PUSH
36278: LD_INT 0
36280: PUSH
36281: EMPTY
36282: LIST
36283: LIST
36284: PUSH
36285: LD_INT 1
36287: NEG
36288: PUSH
36289: LD_INT 1
36291: NEG
36292: PUSH
36293: EMPTY
36294: LIST
36295: LIST
36296: PUSH
36297: LD_INT 1
36299: PUSH
36300: LD_INT 1
36302: NEG
36303: PUSH
36304: EMPTY
36305: LIST
36306: LIST
36307: PUSH
36308: LD_INT 1
36310: NEG
36311: PUSH
36312: LD_INT 1
36314: PUSH
36315: EMPTY
36316: LIST
36317: LIST
36318: PUSH
36319: EMPTY
36320: LIST
36321: LIST
36322: LIST
36323: LIST
36324: LIST
36325: LIST
36326: LIST
36327: LIST
36328: LIST
36329: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36330: LD_ADDR_VAR 0 41
36334: PUSH
36335: LD_INT 0
36337: PUSH
36338: LD_INT 0
36340: PUSH
36341: EMPTY
36342: LIST
36343: LIST
36344: PUSH
36345: LD_INT 0
36347: PUSH
36348: LD_INT 1
36350: NEG
36351: PUSH
36352: EMPTY
36353: LIST
36354: LIST
36355: PUSH
36356: LD_INT 1
36358: PUSH
36359: LD_INT 0
36361: PUSH
36362: EMPTY
36363: LIST
36364: LIST
36365: PUSH
36366: LD_INT 1
36368: PUSH
36369: LD_INT 1
36371: PUSH
36372: EMPTY
36373: LIST
36374: LIST
36375: PUSH
36376: LD_INT 0
36378: PUSH
36379: LD_INT 1
36381: PUSH
36382: EMPTY
36383: LIST
36384: LIST
36385: PUSH
36386: LD_INT 1
36388: NEG
36389: PUSH
36390: LD_INT 0
36392: PUSH
36393: EMPTY
36394: LIST
36395: LIST
36396: PUSH
36397: LD_INT 1
36399: NEG
36400: PUSH
36401: LD_INT 1
36403: NEG
36404: PUSH
36405: EMPTY
36406: LIST
36407: LIST
36408: PUSH
36409: LD_INT 1
36411: NEG
36412: PUSH
36413: LD_INT 2
36415: NEG
36416: PUSH
36417: EMPTY
36418: LIST
36419: LIST
36420: PUSH
36421: LD_INT 1
36423: PUSH
36424: LD_INT 1
36426: NEG
36427: PUSH
36428: EMPTY
36429: LIST
36430: LIST
36431: PUSH
36432: LD_INT 2
36434: PUSH
36435: LD_INT 0
36437: PUSH
36438: EMPTY
36439: LIST
36440: LIST
36441: PUSH
36442: LD_INT 2
36444: PUSH
36445: LD_INT 1
36447: PUSH
36448: EMPTY
36449: LIST
36450: LIST
36451: PUSH
36452: LD_INT 2
36454: PUSH
36455: LD_INT 2
36457: PUSH
36458: EMPTY
36459: LIST
36460: LIST
36461: PUSH
36462: LD_INT 1
36464: PUSH
36465: LD_INT 2
36467: PUSH
36468: EMPTY
36469: LIST
36470: LIST
36471: PUSH
36472: LD_INT 1
36474: NEG
36475: PUSH
36476: LD_INT 1
36478: PUSH
36479: EMPTY
36480: LIST
36481: LIST
36482: PUSH
36483: LD_INT 2
36485: NEG
36486: PUSH
36487: LD_INT 0
36489: PUSH
36490: EMPTY
36491: LIST
36492: LIST
36493: PUSH
36494: LD_INT 2
36496: NEG
36497: PUSH
36498: LD_INT 1
36500: NEG
36501: PUSH
36502: EMPTY
36503: LIST
36504: LIST
36505: PUSH
36506: LD_INT 2
36508: NEG
36509: PUSH
36510: LD_INT 2
36512: NEG
36513: PUSH
36514: EMPTY
36515: LIST
36516: LIST
36517: PUSH
36518: LD_INT 2
36520: NEG
36521: PUSH
36522: LD_INT 3
36524: NEG
36525: PUSH
36526: EMPTY
36527: LIST
36528: LIST
36529: PUSH
36530: LD_INT 2
36532: PUSH
36533: LD_INT 1
36535: NEG
36536: PUSH
36537: EMPTY
36538: LIST
36539: LIST
36540: PUSH
36541: LD_INT 3
36543: PUSH
36544: LD_INT 0
36546: PUSH
36547: EMPTY
36548: LIST
36549: LIST
36550: PUSH
36551: LD_INT 3
36553: PUSH
36554: LD_INT 1
36556: PUSH
36557: EMPTY
36558: LIST
36559: LIST
36560: PUSH
36561: LD_INT 3
36563: PUSH
36564: LD_INT 2
36566: PUSH
36567: EMPTY
36568: LIST
36569: LIST
36570: PUSH
36571: LD_INT 3
36573: PUSH
36574: LD_INT 3
36576: PUSH
36577: EMPTY
36578: LIST
36579: LIST
36580: PUSH
36581: LD_INT 2
36583: PUSH
36584: LD_INT 3
36586: PUSH
36587: EMPTY
36588: LIST
36589: LIST
36590: PUSH
36591: LD_INT 2
36593: NEG
36594: PUSH
36595: LD_INT 1
36597: PUSH
36598: EMPTY
36599: LIST
36600: LIST
36601: PUSH
36602: LD_INT 3
36604: NEG
36605: PUSH
36606: LD_INT 0
36608: PUSH
36609: EMPTY
36610: LIST
36611: LIST
36612: PUSH
36613: LD_INT 3
36615: NEG
36616: PUSH
36617: LD_INT 1
36619: NEG
36620: PUSH
36621: EMPTY
36622: LIST
36623: LIST
36624: PUSH
36625: LD_INT 3
36627: NEG
36628: PUSH
36629: LD_INT 2
36631: NEG
36632: PUSH
36633: EMPTY
36634: LIST
36635: LIST
36636: PUSH
36637: LD_INT 3
36639: NEG
36640: PUSH
36641: LD_INT 3
36643: NEG
36644: PUSH
36645: EMPTY
36646: LIST
36647: LIST
36648: PUSH
36649: EMPTY
36650: LIST
36651: LIST
36652: LIST
36653: LIST
36654: LIST
36655: LIST
36656: LIST
36657: LIST
36658: LIST
36659: LIST
36660: LIST
36661: LIST
36662: LIST
36663: LIST
36664: LIST
36665: LIST
36666: LIST
36667: LIST
36668: LIST
36669: LIST
36670: LIST
36671: LIST
36672: LIST
36673: LIST
36674: LIST
36675: LIST
36676: LIST
36677: LIST
36678: LIST
36679: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36680: LD_ADDR_VAR 0 42
36684: PUSH
36685: LD_INT 0
36687: PUSH
36688: LD_INT 0
36690: PUSH
36691: EMPTY
36692: LIST
36693: LIST
36694: PUSH
36695: LD_INT 0
36697: PUSH
36698: LD_INT 1
36700: NEG
36701: PUSH
36702: EMPTY
36703: LIST
36704: LIST
36705: PUSH
36706: LD_INT 1
36708: PUSH
36709: LD_INT 0
36711: PUSH
36712: EMPTY
36713: LIST
36714: LIST
36715: PUSH
36716: LD_INT 1
36718: PUSH
36719: LD_INT 1
36721: PUSH
36722: EMPTY
36723: LIST
36724: LIST
36725: PUSH
36726: LD_INT 0
36728: PUSH
36729: LD_INT 1
36731: PUSH
36732: EMPTY
36733: LIST
36734: LIST
36735: PUSH
36736: LD_INT 1
36738: NEG
36739: PUSH
36740: LD_INT 0
36742: PUSH
36743: EMPTY
36744: LIST
36745: LIST
36746: PUSH
36747: LD_INT 1
36749: NEG
36750: PUSH
36751: LD_INT 1
36753: NEG
36754: PUSH
36755: EMPTY
36756: LIST
36757: LIST
36758: PUSH
36759: LD_INT 1
36761: NEG
36762: PUSH
36763: LD_INT 2
36765: NEG
36766: PUSH
36767: EMPTY
36768: LIST
36769: LIST
36770: PUSH
36771: LD_INT 0
36773: PUSH
36774: LD_INT 2
36776: NEG
36777: PUSH
36778: EMPTY
36779: LIST
36780: LIST
36781: PUSH
36782: LD_INT 1
36784: PUSH
36785: LD_INT 1
36787: NEG
36788: PUSH
36789: EMPTY
36790: LIST
36791: LIST
36792: PUSH
36793: LD_INT 2
36795: PUSH
36796: LD_INT 1
36798: PUSH
36799: EMPTY
36800: LIST
36801: LIST
36802: PUSH
36803: LD_INT 2
36805: PUSH
36806: LD_INT 2
36808: PUSH
36809: EMPTY
36810: LIST
36811: LIST
36812: PUSH
36813: LD_INT 1
36815: PUSH
36816: LD_INT 2
36818: PUSH
36819: EMPTY
36820: LIST
36821: LIST
36822: PUSH
36823: LD_INT 0
36825: PUSH
36826: LD_INT 2
36828: PUSH
36829: EMPTY
36830: LIST
36831: LIST
36832: PUSH
36833: LD_INT 1
36835: NEG
36836: PUSH
36837: LD_INT 1
36839: PUSH
36840: EMPTY
36841: LIST
36842: LIST
36843: PUSH
36844: LD_INT 2
36846: NEG
36847: PUSH
36848: LD_INT 1
36850: NEG
36851: PUSH
36852: EMPTY
36853: LIST
36854: LIST
36855: PUSH
36856: LD_INT 2
36858: NEG
36859: PUSH
36860: LD_INT 2
36862: NEG
36863: PUSH
36864: EMPTY
36865: LIST
36866: LIST
36867: PUSH
36868: LD_INT 2
36870: NEG
36871: PUSH
36872: LD_INT 3
36874: NEG
36875: PUSH
36876: EMPTY
36877: LIST
36878: LIST
36879: PUSH
36880: LD_INT 1
36882: NEG
36883: PUSH
36884: LD_INT 3
36886: NEG
36887: PUSH
36888: EMPTY
36889: LIST
36890: LIST
36891: PUSH
36892: LD_INT 0
36894: PUSH
36895: LD_INT 3
36897: NEG
36898: PUSH
36899: EMPTY
36900: LIST
36901: LIST
36902: PUSH
36903: LD_INT 1
36905: PUSH
36906: LD_INT 2
36908: NEG
36909: PUSH
36910: EMPTY
36911: LIST
36912: LIST
36913: PUSH
36914: LD_INT 3
36916: PUSH
36917: LD_INT 2
36919: PUSH
36920: EMPTY
36921: LIST
36922: LIST
36923: PUSH
36924: LD_INT 3
36926: PUSH
36927: LD_INT 3
36929: PUSH
36930: EMPTY
36931: LIST
36932: LIST
36933: PUSH
36934: LD_INT 2
36936: PUSH
36937: LD_INT 3
36939: PUSH
36940: EMPTY
36941: LIST
36942: LIST
36943: PUSH
36944: LD_INT 1
36946: PUSH
36947: LD_INT 3
36949: PUSH
36950: EMPTY
36951: LIST
36952: LIST
36953: PUSH
36954: LD_INT 0
36956: PUSH
36957: LD_INT 3
36959: PUSH
36960: EMPTY
36961: LIST
36962: LIST
36963: PUSH
36964: LD_INT 1
36966: NEG
36967: PUSH
36968: LD_INT 2
36970: PUSH
36971: EMPTY
36972: LIST
36973: LIST
36974: PUSH
36975: LD_INT 3
36977: NEG
36978: PUSH
36979: LD_INT 2
36981: NEG
36982: PUSH
36983: EMPTY
36984: LIST
36985: LIST
36986: PUSH
36987: LD_INT 3
36989: NEG
36990: PUSH
36991: LD_INT 3
36993: NEG
36994: PUSH
36995: EMPTY
36996: LIST
36997: LIST
36998: PUSH
36999: EMPTY
37000: LIST
37001: LIST
37002: LIST
37003: LIST
37004: LIST
37005: LIST
37006: LIST
37007: LIST
37008: LIST
37009: LIST
37010: LIST
37011: LIST
37012: LIST
37013: LIST
37014: LIST
37015: LIST
37016: LIST
37017: LIST
37018: LIST
37019: LIST
37020: LIST
37021: LIST
37022: LIST
37023: LIST
37024: LIST
37025: LIST
37026: LIST
37027: LIST
37028: LIST
37029: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37030: LD_ADDR_VAR 0 43
37034: PUSH
37035: LD_INT 0
37037: PUSH
37038: LD_INT 0
37040: PUSH
37041: EMPTY
37042: LIST
37043: LIST
37044: PUSH
37045: LD_INT 0
37047: PUSH
37048: LD_INT 1
37050: NEG
37051: PUSH
37052: EMPTY
37053: LIST
37054: LIST
37055: PUSH
37056: LD_INT 1
37058: PUSH
37059: LD_INT 0
37061: PUSH
37062: EMPTY
37063: LIST
37064: LIST
37065: PUSH
37066: LD_INT 1
37068: PUSH
37069: LD_INT 1
37071: PUSH
37072: EMPTY
37073: LIST
37074: LIST
37075: PUSH
37076: LD_INT 0
37078: PUSH
37079: LD_INT 1
37081: PUSH
37082: EMPTY
37083: LIST
37084: LIST
37085: PUSH
37086: LD_INT 1
37088: NEG
37089: PUSH
37090: LD_INT 0
37092: PUSH
37093: EMPTY
37094: LIST
37095: LIST
37096: PUSH
37097: LD_INT 1
37099: NEG
37100: PUSH
37101: LD_INT 1
37103: NEG
37104: PUSH
37105: EMPTY
37106: LIST
37107: LIST
37108: PUSH
37109: LD_INT 1
37111: NEG
37112: PUSH
37113: LD_INT 2
37115: NEG
37116: PUSH
37117: EMPTY
37118: LIST
37119: LIST
37120: PUSH
37121: LD_INT 0
37123: PUSH
37124: LD_INT 2
37126: NEG
37127: PUSH
37128: EMPTY
37129: LIST
37130: LIST
37131: PUSH
37132: LD_INT 1
37134: PUSH
37135: LD_INT 1
37137: NEG
37138: PUSH
37139: EMPTY
37140: LIST
37141: LIST
37142: PUSH
37143: LD_INT 2
37145: PUSH
37146: LD_INT 0
37148: PUSH
37149: EMPTY
37150: LIST
37151: LIST
37152: PUSH
37153: LD_INT 2
37155: PUSH
37156: LD_INT 1
37158: PUSH
37159: EMPTY
37160: LIST
37161: LIST
37162: PUSH
37163: LD_INT 1
37165: PUSH
37166: LD_INT 2
37168: PUSH
37169: EMPTY
37170: LIST
37171: LIST
37172: PUSH
37173: LD_INT 0
37175: PUSH
37176: LD_INT 2
37178: PUSH
37179: EMPTY
37180: LIST
37181: LIST
37182: PUSH
37183: LD_INT 1
37185: NEG
37186: PUSH
37187: LD_INT 1
37189: PUSH
37190: EMPTY
37191: LIST
37192: LIST
37193: PUSH
37194: LD_INT 2
37196: NEG
37197: PUSH
37198: LD_INT 0
37200: PUSH
37201: EMPTY
37202: LIST
37203: LIST
37204: PUSH
37205: LD_INT 2
37207: NEG
37208: PUSH
37209: LD_INT 1
37211: NEG
37212: PUSH
37213: EMPTY
37214: LIST
37215: LIST
37216: PUSH
37217: LD_INT 1
37219: NEG
37220: PUSH
37221: LD_INT 3
37223: NEG
37224: PUSH
37225: EMPTY
37226: LIST
37227: LIST
37228: PUSH
37229: LD_INT 0
37231: PUSH
37232: LD_INT 3
37234: NEG
37235: PUSH
37236: EMPTY
37237: LIST
37238: LIST
37239: PUSH
37240: LD_INT 1
37242: PUSH
37243: LD_INT 2
37245: NEG
37246: PUSH
37247: EMPTY
37248: LIST
37249: LIST
37250: PUSH
37251: LD_INT 2
37253: PUSH
37254: LD_INT 1
37256: NEG
37257: PUSH
37258: EMPTY
37259: LIST
37260: LIST
37261: PUSH
37262: LD_INT 3
37264: PUSH
37265: LD_INT 0
37267: PUSH
37268: EMPTY
37269: LIST
37270: LIST
37271: PUSH
37272: LD_INT 3
37274: PUSH
37275: LD_INT 1
37277: PUSH
37278: EMPTY
37279: LIST
37280: LIST
37281: PUSH
37282: LD_INT 1
37284: PUSH
37285: LD_INT 3
37287: PUSH
37288: EMPTY
37289: LIST
37290: LIST
37291: PUSH
37292: LD_INT 0
37294: PUSH
37295: LD_INT 3
37297: PUSH
37298: EMPTY
37299: LIST
37300: LIST
37301: PUSH
37302: LD_INT 1
37304: NEG
37305: PUSH
37306: LD_INT 2
37308: PUSH
37309: EMPTY
37310: LIST
37311: LIST
37312: PUSH
37313: LD_INT 2
37315: NEG
37316: PUSH
37317: LD_INT 1
37319: PUSH
37320: EMPTY
37321: LIST
37322: LIST
37323: PUSH
37324: LD_INT 3
37326: NEG
37327: PUSH
37328: LD_INT 0
37330: PUSH
37331: EMPTY
37332: LIST
37333: LIST
37334: PUSH
37335: LD_INT 3
37337: NEG
37338: PUSH
37339: LD_INT 1
37341: NEG
37342: PUSH
37343: EMPTY
37344: LIST
37345: LIST
37346: PUSH
37347: EMPTY
37348: LIST
37349: LIST
37350: LIST
37351: LIST
37352: LIST
37353: LIST
37354: LIST
37355: LIST
37356: LIST
37357: LIST
37358: LIST
37359: LIST
37360: LIST
37361: LIST
37362: LIST
37363: LIST
37364: LIST
37365: LIST
37366: LIST
37367: LIST
37368: LIST
37369: LIST
37370: LIST
37371: LIST
37372: LIST
37373: LIST
37374: LIST
37375: LIST
37376: LIST
37377: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37378: LD_ADDR_VAR 0 44
37382: PUSH
37383: LD_INT 0
37385: PUSH
37386: LD_INT 0
37388: PUSH
37389: EMPTY
37390: LIST
37391: LIST
37392: PUSH
37393: LD_INT 0
37395: PUSH
37396: LD_INT 1
37398: NEG
37399: PUSH
37400: EMPTY
37401: LIST
37402: LIST
37403: PUSH
37404: LD_INT 1
37406: PUSH
37407: LD_INT 0
37409: PUSH
37410: EMPTY
37411: LIST
37412: LIST
37413: PUSH
37414: LD_INT 1
37416: PUSH
37417: LD_INT 1
37419: PUSH
37420: EMPTY
37421: LIST
37422: LIST
37423: PUSH
37424: LD_INT 0
37426: PUSH
37427: LD_INT 1
37429: PUSH
37430: EMPTY
37431: LIST
37432: LIST
37433: PUSH
37434: LD_INT 1
37436: NEG
37437: PUSH
37438: LD_INT 0
37440: PUSH
37441: EMPTY
37442: LIST
37443: LIST
37444: PUSH
37445: LD_INT 1
37447: NEG
37448: PUSH
37449: LD_INT 1
37451: NEG
37452: PUSH
37453: EMPTY
37454: LIST
37455: LIST
37456: PUSH
37457: LD_INT 1
37459: NEG
37460: PUSH
37461: LD_INT 2
37463: NEG
37464: PUSH
37465: EMPTY
37466: LIST
37467: LIST
37468: PUSH
37469: LD_INT 1
37471: PUSH
37472: LD_INT 1
37474: NEG
37475: PUSH
37476: EMPTY
37477: LIST
37478: LIST
37479: PUSH
37480: LD_INT 2
37482: PUSH
37483: LD_INT 0
37485: PUSH
37486: EMPTY
37487: LIST
37488: LIST
37489: PUSH
37490: LD_INT 2
37492: PUSH
37493: LD_INT 1
37495: PUSH
37496: EMPTY
37497: LIST
37498: LIST
37499: PUSH
37500: LD_INT 2
37502: PUSH
37503: LD_INT 2
37505: PUSH
37506: EMPTY
37507: LIST
37508: LIST
37509: PUSH
37510: LD_INT 1
37512: PUSH
37513: LD_INT 2
37515: PUSH
37516: EMPTY
37517: LIST
37518: LIST
37519: PUSH
37520: LD_INT 1
37522: NEG
37523: PUSH
37524: LD_INT 1
37526: PUSH
37527: EMPTY
37528: LIST
37529: LIST
37530: PUSH
37531: LD_INT 2
37533: NEG
37534: PUSH
37535: LD_INT 0
37537: PUSH
37538: EMPTY
37539: LIST
37540: LIST
37541: PUSH
37542: LD_INT 2
37544: NEG
37545: PUSH
37546: LD_INT 1
37548: NEG
37549: PUSH
37550: EMPTY
37551: LIST
37552: LIST
37553: PUSH
37554: LD_INT 2
37556: NEG
37557: PUSH
37558: LD_INT 2
37560: NEG
37561: PUSH
37562: EMPTY
37563: LIST
37564: LIST
37565: PUSH
37566: LD_INT 2
37568: NEG
37569: PUSH
37570: LD_INT 3
37572: NEG
37573: PUSH
37574: EMPTY
37575: LIST
37576: LIST
37577: PUSH
37578: LD_INT 2
37580: PUSH
37581: LD_INT 1
37583: NEG
37584: PUSH
37585: EMPTY
37586: LIST
37587: LIST
37588: PUSH
37589: LD_INT 3
37591: PUSH
37592: LD_INT 0
37594: PUSH
37595: EMPTY
37596: LIST
37597: LIST
37598: PUSH
37599: LD_INT 3
37601: PUSH
37602: LD_INT 1
37604: PUSH
37605: EMPTY
37606: LIST
37607: LIST
37608: PUSH
37609: LD_INT 3
37611: PUSH
37612: LD_INT 2
37614: PUSH
37615: EMPTY
37616: LIST
37617: LIST
37618: PUSH
37619: LD_INT 3
37621: PUSH
37622: LD_INT 3
37624: PUSH
37625: EMPTY
37626: LIST
37627: LIST
37628: PUSH
37629: LD_INT 2
37631: PUSH
37632: LD_INT 3
37634: PUSH
37635: EMPTY
37636: LIST
37637: LIST
37638: PUSH
37639: LD_INT 2
37641: NEG
37642: PUSH
37643: LD_INT 1
37645: PUSH
37646: EMPTY
37647: LIST
37648: LIST
37649: PUSH
37650: LD_INT 3
37652: NEG
37653: PUSH
37654: LD_INT 0
37656: PUSH
37657: EMPTY
37658: LIST
37659: LIST
37660: PUSH
37661: LD_INT 3
37663: NEG
37664: PUSH
37665: LD_INT 1
37667: NEG
37668: PUSH
37669: EMPTY
37670: LIST
37671: LIST
37672: PUSH
37673: LD_INT 3
37675: NEG
37676: PUSH
37677: LD_INT 2
37679: NEG
37680: PUSH
37681: EMPTY
37682: LIST
37683: LIST
37684: PUSH
37685: LD_INT 3
37687: NEG
37688: PUSH
37689: LD_INT 3
37691: NEG
37692: PUSH
37693: EMPTY
37694: LIST
37695: LIST
37696: PUSH
37697: EMPTY
37698: LIST
37699: LIST
37700: LIST
37701: LIST
37702: LIST
37703: LIST
37704: LIST
37705: LIST
37706: LIST
37707: LIST
37708: LIST
37709: LIST
37710: LIST
37711: LIST
37712: LIST
37713: LIST
37714: LIST
37715: LIST
37716: LIST
37717: LIST
37718: LIST
37719: LIST
37720: LIST
37721: LIST
37722: LIST
37723: LIST
37724: LIST
37725: LIST
37726: LIST
37727: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37728: LD_ADDR_VAR 0 45
37732: PUSH
37733: LD_INT 0
37735: PUSH
37736: LD_INT 0
37738: PUSH
37739: EMPTY
37740: LIST
37741: LIST
37742: PUSH
37743: LD_INT 0
37745: PUSH
37746: LD_INT 1
37748: NEG
37749: PUSH
37750: EMPTY
37751: LIST
37752: LIST
37753: PUSH
37754: LD_INT 1
37756: PUSH
37757: LD_INT 0
37759: PUSH
37760: EMPTY
37761: LIST
37762: LIST
37763: PUSH
37764: LD_INT 1
37766: PUSH
37767: LD_INT 1
37769: PUSH
37770: EMPTY
37771: LIST
37772: LIST
37773: PUSH
37774: LD_INT 0
37776: PUSH
37777: LD_INT 1
37779: PUSH
37780: EMPTY
37781: LIST
37782: LIST
37783: PUSH
37784: LD_INT 1
37786: NEG
37787: PUSH
37788: LD_INT 0
37790: PUSH
37791: EMPTY
37792: LIST
37793: LIST
37794: PUSH
37795: LD_INT 1
37797: NEG
37798: PUSH
37799: LD_INT 1
37801: NEG
37802: PUSH
37803: EMPTY
37804: LIST
37805: LIST
37806: PUSH
37807: LD_INT 1
37809: NEG
37810: PUSH
37811: LD_INT 2
37813: NEG
37814: PUSH
37815: EMPTY
37816: LIST
37817: LIST
37818: PUSH
37819: LD_INT 0
37821: PUSH
37822: LD_INT 2
37824: NEG
37825: PUSH
37826: EMPTY
37827: LIST
37828: LIST
37829: PUSH
37830: LD_INT 1
37832: PUSH
37833: LD_INT 1
37835: NEG
37836: PUSH
37837: EMPTY
37838: LIST
37839: LIST
37840: PUSH
37841: LD_INT 2
37843: PUSH
37844: LD_INT 1
37846: PUSH
37847: EMPTY
37848: LIST
37849: LIST
37850: PUSH
37851: LD_INT 2
37853: PUSH
37854: LD_INT 2
37856: PUSH
37857: EMPTY
37858: LIST
37859: LIST
37860: PUSH
37861: LD_INT 1
37863: PUSH
37864: LD_INT 2
37866: PUSH
37867: EMPTY
37868: LIST
37869: LIST
37870: PUSH
37871: LD_INT 0
37873: PUSH
37874: LD_INT 2
37876: PUSH
37877: EMPTY
37878: LIST
37879: LIST
37880: PUSH
37881: LD_INT 1
37883: NEG
37884: PUSH
37885: LD_INT 1
37887: PUSH
37888: EMPTY
37889: LIST
37890: LIST
37891: PUSH
37892: LD_INT 2
37894: NEG
37895: PUSH
37896: LD_INT 1
37898: NEG
37899: PUSH
37900: EMPTY
37901: LIST
37902: LIST
37903: PUSH
37904: LD_INT 2
37906: NEG
37907: PUSH
37908: LD_INT 2
37910: NEG
37911: PUSH
37912: EMPTY
37913: LIST
37914: LIST
37915: PUSH
37916: LD_INT 2
37918: NEG
37919: PUSH
37920: LD_INT 3
37922: NEG
37923: PUSH
37924: EMPTY
37925: LIST
37926: LIST
37927: PUSH
37928: LD_INT 1
37930: NEG
37931: PUSH
37932: LD_INT 3
37934: NEG
37935: PUSH
37936: EMPTY
37937: LIST
37938: LIST
37939: PUSH
37940: LD_INT 0
37942: PUSH
37943: LD_INT 3
37945: NEG
37946: PUSH
37947: EMPTY
37948: LIST
37949: LIST
37950: PUSH
37951: LD_INT 1
37953: PUSH
37954: LD_INT 2
37956: NEG
37957: PUSH
37958: EMPTY
37959: LIST
37960: LIST
37961: PUSH
37962: LD_INT 3
37964: PUSH
37965: LD_INT 2
37967: PUSH
37968: EMPTY
37969: LIST
37970: LIST
37971: PUSH
37972: LD_INT 3
37974: PUSH
37975: LD_INT 3
37977: PUSH
37978: EMPTY
37979: LIST
37980: LIST
37981: PUSH
37982: LD_INT 2
37984: PUSH
37985: LD_INT 3
37987: PUSH
37988: EMPTY
37989: LIST
37990: LIST
37991: PUSH
37992: LD_INT 1
37994: PUSH
37995: LD_INT 3
37997: PUSH
37998: EMPTY
37999: LIST
38000: LIST
38001: PUSH
38002: LD_INT 0
38004: PUSH
38005: LD_INT 3
38007: PUSH
38008: EMPTY
38009: LIST
38010: LIST
38011: PUSH
38012: LD_INT 1
38014: NEG
38015: PUSH
38016: LD_INT 2
38018: PUSH
38019: EMPTY
38020: LIST
38021: LIST
38022: PUSH
38023: LD_INT 3
38025: NEG
38026: PUSH
38027: LD_INT 2
38029: NEG
38030: PUSH
38031: EMPTY
38032: LIST
38033: LIST
38034: PUSH
38035: LD_INT 3
38037: NEG
38038: PUSH
38039: LD_INT 3
38041: NEG
38042: PUSH
38043: EMPTY
38044: LIST
38045: LIST
38046: PUSH
38047: EMPTY
38048: LIST
38049: LIST
38050: LIST
38051: LIST
38052: LIST
38053: LIST
38054: LIST
38055: LIST
38056: LIST
38057: LIST
38058: LIST
38059: LIST
38060: LIST
38061: LIST
38062: LIST
38063: LIST
38064: LIST
38065: LIST
38066: LIST
38067: LIST
38068: LIST
38069: LIST
38070: LIST
38071: LIST
38072: LIST
38073: LIST
38074: LIST
38075: LIST
38076: LIST
38077: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38078: LD_ADDR_VAR 0 46
38082: PUSH
38083: LD_INT 0
38085: PUSH
38086: LD_INT 0
38088: PUSH
38089: EMPTY
38090: LIST
38091: LIST
38092: PUSH
38093: LD_INT 0
38095: PUSH
38096: LD_INT 1
38098: NEG
38099: PUSH
38100: EMPTY
38101: LIST
38102: LIST
38103: PUSH
38104: LD_INT 1
38106: PUSH
38107: LD_INT 0
38109: PUSH
38110: EMPTY
38111: LIST
38112: LIST
38113: PUSH
38114: LD_INT 1
38116: PUSH
38117: LD_INT 1
38119: PUSH
38120: EMPTY
38121: LIST
38122: LIST
38123: PUSH
38124: LD_INT 0
38126: PUSH
38127: LD_INT 1
38129: PUSH
38130: EMPTY
38131: LIST
38132: LIST
38133: PUSH
38134: LD_INT 1
38136: NEG
38137: PUSH
38138: LD_INT 0
38140: PUSH
38141: EMPTY
38142: LIST
38143: LIST
38144: PUSH
38145: LD_INT 1
38147: NEG
38148: PUSH
38149: LD_INT 1
38151: NEG
38152: PUSH
38153: EMPTY
38154: LIST
38155: LIST
38156: PUSH
38157: LD_INT 1
38159: NEG
38160: PUSH
38161: LD_INT 2
38163: NEG
38164: PUSH
38165: EMPTY
38166: LIST
38167: LIST
38168: PUSH
38169: LD_INT 0
38171: PUSH
38172: LD_INT 2
38174: NEG
38175: PUSH
38176: EMPTY
38177: LIST
38178: LIST
38179: PUSH
38180: LD_INT 1
38182: PUSH
38183: LD_INT 1
38185: NEG
38186: PUSH
38187: EMPTY
38188: LIST
38189: LIST
38190: PUSH
38191: LD_INT 2
38193: PUSH
38194: LD_INT 0
38196: PUSH
38197: EMPTY
38198: LIST
38199: LIST
38200: PUSH
38201: LD_INT 2
38203: PUSH
38204: LD_INT 1
38206: PUSH
38207: EMPTY
38208: LIST
38209: LIST
38210: PUSH
38211: LD_INT 1
38213: PUSH
38214: LD_INT 2
38216: PUSH
38217: EMPTY
38218: LIST
38219: LIST
38220: PUSH
38221: LD_INT 0
38223: PUSH
38224: LD_INT 2
38226: PUSH
38227: EMPTY
38228: LIST
38229: LIST
38230: PUSH
38231: LD_INT 1
38233: NEG
38234: PUSH
38235: LD_INT 1
38237: PUSH
38238: EMPTY
38239: LIST
38240: LIST
38241: PUSH
38242: LD_INT 2
38244: NEG
38245: PUSH
38246: LD_INT 0
38248: PUSH
38249: EMPTY
38250: LIST
38251: LIST
38252: PUSH
38253: LD_INT 2
38255: NEG
38256: PUSH
38257: LD_INT 1
38259: NEG
38260: PUSH
38261: EMPTY
38262: LIST
38263: LIST
38264: PUSH
38265: LD_INT 1
38267: NEG
38268: PUSH
38269: LD_INT 3
38271: NEG
38272: PUSH
38273: EMPTY
38274: LIST
38275: LIST
38276: PUSH
38277: LD_INT 0
38279: PUSH
38280: LD_INT 3
38282: NEG
38283: PUSH
38284: EMPTY
38285: LIST
38286: LIST
38287: PUSH
38288: LD_INT 1
38290: PUSH
38291: LD_INT 2
38293: NEG
38294: PUSH
38295: EMPTY
38296: LIST
38297: LIST
38298: PUSH
38299: LD_INT 2
38301: PUSH
38302: LD_INT 1
38304: NEG
38305: PUSH
38306: EMPTY
38307: LIST
38308: LIST
38309: PUSH
38310: LD_INT 3
38312: PUSH
38313: LD_INT 0
38315: PUSH
38316: EMPTY
38317: LIST
38318: LIST
38319: PUSH
38320: LD_INT 3
38322: PUSH
38323: LD_INT 1
38325: PUSH
38326: EMPTY
38327: LIST
38328: LIST
38329: PUSH
38330: LD_INT 1
38332: PUSH
38333: LD_INT 3
38335: PUSH
38336: EMPTY
38337: LIST
38338: LIST
38339: PUSH
38340: LD_INT 0
38342: PUSH
38343: LD_INT 3
38345: PUSH
38346: EMPTY
38347: LIST
38348: LIST
38349: PUSH
38350: LD_INT 1
38352: NEG
38353: PUSH
38354: LD_INT 2
38356: PUSH
38357: EMPTY
38358: LIST
38359: LIST
38360: PUSH
38361: LD_INT 2
38363: NEG
38364: PUSH
38365: LD_INT 1
38367: PUSH
38368: EMPTY
38369: LIST
38370: LIST
38371: PUSH
38372: LD_INT 3
38374: NEG
38375: PUSH
38376: LD_INT 0
38378: PUSH
38379: EMPTY
38380: LIST
38381: LIST
38382: PUSH
38383: LD_INT 3
38385: NEG
38386: PUSH
38387: LD_INT 1
38389: NEG
38390: PUSH
38391: EMPTY
38392: LIST
38393: LIST
38394: PUSH
38395: EMPTY
38396: LIST
38397: LIST
38398: LIST
38399: LIST
38400: LIST
38401: LIST
38402: LIST
38403: LIST
38404: LIST
38405: LIST
38406: LIST
38407: LIST
38408: LIST
38409: LIST
38410: LIST
38411: LIST
38412: LIST
38413: LIST
38414: LIST
38415: LIST
38416: LIST
38417: LIST
38418: LIST
38419: LIST
38420: LIST
38421: LIST
38422: LIST
38423: LIST
38424: LIST
38425: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38426: LD_ADDR_VAR 0 47
38430: PUSH
38431: LD_INT 0
38433: PUSH
38434: LD_INT 0
38436: PUSH
38437: EMPTY
38438: LIST
38439: LIST
38440: PUSH
38441: LD_INT 0
38443: PUSH
38444: LD_INT 1
38446: NEG
38447: PUSH
38448: EMPTY
38449: LIST
38450: LIST
38451: PUSH
38452: LD_INT 1
38454: PUSH
38455: LD_INT 0
38457: PUSH
38458: EMPTY
38459: LIST
38460: LIST
38461: PUSH
38462: LD_INT 1
38464: PUSH
38465: LD_INT 1
38467: PUSH
38468: EMPTY
38469: LIST
38470: LIST
38471: PUSH
38472: LD_INT 0
38474: PUSH
38475: LD_INT 1
38477: PUSH
38478: EMPTY
38479: LIST
38480: LIST
38481: PUSH
38482: LD_INT 1
38484: NEG
38485: PUSH
38486: LD_INT 0
38488: PUSH
38489: EMPTY
38490: LIST
38491: LIST
38492: PUSH
38493: LD_INT 1
38495: NEG
38496: PUSH
38497: LD_INT 1
38499: NEG
38500: PUSH
38501: EMPTY
38502: LIST
38503: LIST
38504: PUSH
38505: LD_INT 1
38507: NEG
38508: PUSH
38509: LD_INT 2
38511: NEG
38512: PUSH
38513: EMPTY
38514: LIST
38515: LIST
38516: PUSH
38517: LD_INT 0
38519: PUSH
38520: LD_INT 2
38522: NEG
38523: PUSH
38524: EMPTY
38525: LIST
38526: LIST
38527: PUSH
38528: LD_INT 1
38530: PUSH
38531: LD_INT 1
38533: NEG
38534: PUSH
38535: EMPTY
38536: LIST
38537: LIST
38538: PUSH
38539: LD_INT 2
38541: NEG
38542: PUSH
38543: LD_INT 1
38545: NEG
38546: PUSH
38547: EMPTY
38548: LIST
38549: LIST
38550: PUSH
38551: LD_INT 2
38553: NEG
38554: PUSH
38555: LD_INT 2
38557: NEG
38558: PUSH
38559: EMPTY
38560: LIST
38561: LIST
38562: PUSH
38563: EMPTY
38564: LIST
38565: LIST
38566: LIST
38567: LIST
38568: LIST
38569: LIST
38570: LIST
38571: LIST
38572: LIST
38573: LIST
38574: LIST
38575: LIST
38576: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
38577: LD_ADDR_VAR 0 48
38581: PUSH
38582: LD_INT 0
38584: PUSH
38585: LD_INT 0
38587: PUSH
38588: EMPTY
38589: LIST
38590: LIST
38591: PUSH
38592: LD_INT 0
38594: PUSH
38595: LD_INT 1
38597: NEG
38598: PUSH
38599: EMPTY
38600: LIST
38601: LIST
38602: PUSH
38603: LD_INT 1
38605: PUSH
38606: LD_INT 0
38608: PUSH
38609: EMPTY
38610: LIST
38611: LIST
38612: PUSH
38613: LD_INT 1
38615: PUSH
38616: LD_INT 1
38618: PUSH
38619: EMPTY
38620: LIST
38621: LIST
38622: PUSH
38623: LD_INT 0
38625: PUSH
38626: LD_INT 1
38628: PUSH
38629: EMPTY
38630: LIST
38631: LIST
38632: PUSH
38633: LD_INT 1
38635: NEG
38636: PUSH
38637: LD_INT 0
38639: PUSH
38640: EMPTY
38641: LIST
38642: LIST
38643: PUSH
38644: LD_INT 1
38646: NEG
38647: PUSH
38648: LD_INT 1
38650: NEG
38651: PUSH
38652: EMPTY
38653: LIST
38654: LIST
38655: PUSH
38656: LD_INT 1
38658: NEG
38659: PUSH
38660: LD_INT 2
38662: NEG
38663: PUSH
38664: EMPTY
38665: LIST
38666: LIST
38667: PUSH
38668: LD_INT 0
38670: PUSH
38671: LD_INT 2
38673: NEG
38674: PUSH
38675: EMPTY
38676: LIST
38677: LIST
38678: PUSH
38679: LD_INT 1
38681: PUSH
38682: LD_INT 1
38684: NEG
38685: PUSH
38686: EMPTY
38687: LIST
38688: LIST
38689: PUSH
38690: LD_INT 2
38692: PUSH
38693: LD_INT 0
38695: PUSH
38696: EMPTY
38697: LIST
38698: LIST
38699: PUSH
38700: LD_INT 2
38702: PUSH
38703: LD_INT 1
38705: PUSH
38706: EMPTY
38707: LIST
38708: LIST
38709: PUSH
38710: EMPTY
38711: LIST
38712: LIST
38713: LIST
38714: LIST
38715: LIST
38716: LIST
38717: LIST
38718: LIST
38719: LIST
38720: LIST
38721: LIST
38722: LIST
38723: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
38724: LD_ADDR_VAR 0 49
38728: PUSH
38729: LD_INT 0
38731: PUSH
38732: LD_INT 0
38734: PUSH
38735: EMPTY
38736: LIST
38737: LIST
38738: PUSH
38739: LD_INT 0
38741: PUSH
38742: LD_INT 1
38744: NEG
38745: PUSH
38746: EMPTY
38747: LIST
38748: LIST
38749: PUSH
38750: LD_INT 1
38752: PUSH
38753: LD_INT 0
38755: PUSH
38756: EMPTY
38757: LIST
38758: LIST
38759: PUSH
38760: LD_INT 1
38762: PUSH
38763: LD_INT 1
38765: PUSH
38766: EMPTY
38767: LIST
38768: LIST
38769: PUSH
38770: LD_INT 0
38772: PUSH
38773: LD_INT 1
38775: PUSH
38776: EMPTY
38777: LIST
38778: LIST
38779: PUSH
38780: LD_INT 1
38782: NEG
38783: PUSH
38784: LD_INT 0
38786: PUSH
38787: EMPTY
38788: LIST
38789: LIST
38790: PUSH
38791: LD_INT 1
38793: NEG
38794: PUSH
38795: LD_INT 1
38797: NEG
38798: PUSH
38799: EMPTY
38800: LIST
38801: LIST
38802: PUSH
38803: LD_INT 1
38805: PUSH
38806: LD_INT 1
38808: NEG
38809: PUSH
38810: EMPTY
38811: LIST
38812: LIST
38813: PUSH
38814: LD_INT 2
38816: PUSH
38817: LD_INT 0
38819: PUSH
38820: EMPTY
38821: LIST
38822: LIST
38823: PUSH
38824: LD_INT 2
38826: PUSH
38827: LD_INT 1
38829: PUSH
38830: EMPTY
38831: LIST
38832: LIST
38833: PUSH
38834: LD_INT 2
38836: PUSH
38837: LD_INT 2
38839: PUSH
38840: EMPTY
38841: LIST
38842: LIST
38843: PUSH
38844: LD_INT 1
38846: PUSH
38847: LD_INT 2
38849: PUSH
38850: EMPTY
38851: LIST
38852: LIST
38853: PUSH
38854: EMPTY
38855: LIST
38856: LIST
38857: LIST
38858: LIST
38859: LIST
38860: LIST
38861: LIST
38862: LIST
38863: LIST
38864: LIST
38865: LIST
38866: LIST
38867: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
38868: LD_ADDR_VAR 0 50
38872: PUSH
38873: LD_INT 0
38875: PUSH
38876: LD_INT 0
38878: PUSH
38879: EMPTY
38880: LIST
38881: LIST
38882: PUSH
38883: LD_INT 0
38885: PUSH
38886: LD_INT 1
38888: NEG
38889: PUSH
38890: EMPTY
38891: LIST
38892: LIST
38893: PUSH
38894: LD_INT 1
38896: PUSH
38897: LD_INT 0
38899: PUSH
38900: EMPTY
38901: LIST
38902: LIST
38903: PUSH
38904: LD_INT 1
38906: PUSH
38907: LD_INT 1
38909: PUSH
38910: EMPTY
38911: LIST
38912: LIST
38913: PUSH
38914: LD_INT 0
38916: PUSH
38917: LD_INT 1
38919: PUSH
38920: EMPTY
38921: LIST
38922: LIST
38923: PUSH
38924: LD_INT 1
38926: NEG
38927: PUSH
38928: LD_INT 0
38930: PUSH
38931: EMPTY
38932: LIST
38933: LIST
38934: PUSH
38935: LD_INT 1
38937: NEG
38938: PUSH
38939: LD_INT 1
38941: NEG
38942: PUSH
38943: EMPTY
38944: LIST
38945: LIST
38946: PUSH
38947: LD_INT 2
38949: PUSH
38950: LD_INT 1
38952: PUSH
38953: EMPTY
38954: LIST
38955: LIST
38956: PUSH
38957: LD_INT 2
38959: PUSH
38960: LD_INT 2
38962: PUSH
38963: EMPTY
38964: LIST
38965: LIST
38966: PUSH
38967: LD_INT 1
38969: PUSH
38970: LD_INT 2
38972: PUSH
38973: EMPTY
38974: LIST
38975: LIST
38976: PUSH
38977: LD_INT 0
38979: PUSH
38980: LD_INT 2
38982: PUSH
38983: EMPTY
38984: LIST
38985: LIST
38986: PUSH
38987: LD_INT 1
38989: NEG
38990: PUSH
38991: LD_INT 1
38993: PUSH
38994: EMPTY
38995: LIST
38996: LIST
38997: PUSH
38998: EMPTY
38999: LIST
39000: LIST
39001: LIST
39002: LIST
39003: LIST
39004: LIST
39005: LIST
39006: LIST
39007: LIST
39008: LIST
39009: LIST
39010: LIST
39011: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
39012: LD_ADDR_VAR 0 51
39016: PUSH
39017: LD_INT 0
39019: PUSH
39020: LD_INT 0
39022: PUSH
39023: EMPTY
39024: LIST
39025: LIST
39026: PUSH
39027: LD_INT 0
39029: PUSH
39030: LD_INT 1
39032: NEG
39033: PUSH
39034: EMPTY
39035: LIST
39036: LIST
39037: PUSH
39038: LD_INT 1
39040: PUSH
39041: LD_INT 0
39043: PUSH
39044: EMPTY
39045: LIST
39046: LIST
39047: PUSH
39048: LD_INT 1
39050: PUSH
39051: LD_INT 1
39053: PUSH
39054: EMPTY
39055: LIST
39056: LIST
39057: PUSH
39058: LD_INT 0
39060: PUSH
39061: LD_INT 1
39063: PUSH
39064: EMPTY
39065: LIST
39066: LIST
39067: PUSH
39068: LD_INT 1
39070: NEG
39071: PUSH
39072: LD_INT 0
39074: PUSH
39075: EMPTY
39076: LIST
39077: LIST
39078: PUSH
39079: LD_INT 1
39081: NEG
39082: PUSH
39083: LD_INT 1
39085: NEG
39086: PUSH
39087: EMPTY
39088: LIST
39089: LIST
39090: PUSH
39091: LD_INT 1
39093: PUSH
39094: LD_INT 2
39096: PUSH
39097: EMPTY
39098: LIST
39099: LIST
39100: PUSH
39101: LD_INT 0
39103: PUSH
39104: LD_INT 2
39106: PUSH
39107: EMPTY
39108: LIST
39109: LIST
39110: PUSH
39111: LD_INT 1
39113: NEG
39114: PUSH
39115: LD_INT 1
39117: PUSH
39118: EMPTY
39119: LIST
39120: LIST
39121: PUSH
39122: LD_INT 2
39124: NEG
39125: PUSH
39126: LD_INT 0
39128: PUSH
39129: EMPTY
39130: LIST
39131: LIST
39132: PUSH
39133: LD_INT 2
39135: NEG
39136: PUSH
39137: LD_INT 1
39139: NEG
39140: PUSH
39141: EMPTY
39142: LIST
39143: LIST
39144: PUSH
39145: EMPTY
39146: LIST
39147: LIST
39148: LIST
39149: LIST
39150: LIST
39151: LIST
39152: LIST
39153: LIST
39154: LIST
39155: LIST
39156: LIST
39157: LIST
39158: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39159: LD_ADDR_VAR 0 52
39163: PUSH
39164: LD_INT 0
39166: PUSH
39167: LD_INT 0
39169: PUSH
39170: EMPTY
39171: LIST
39172: LIST
39173: PUSH
39174: LD_INT 0
39176: PUSH
39177: LD_INT 1
39179: NEG
39180: PUSH
39181: EMPTY
39182: LIST
39183: LIST
39184: PUSH
39185: LD_INT 1
39187: PUSH
39188: LD_INT 0
39190: PUSH
39191: EMPTY
39192: LIST
39193: LIST
39194: PUSH
39195: LD_INT 1
39197: PUSH
39198: LD_INT 1
39200: PUSH
39201: EMPTY
39202: LIST
39203: LIST
39204: PUSH
39205: LD_INT 0
39207: PUSH
39208: LD_INT 1
39210: PUSH
39211: EMPTY
39212: LIST
39213: LIST
39214: PUSH
39215: LD_INT 1
39217: NEG
39218: PUSH
39219: LD_INT 0
39221: PUSH
39222: EMPTY
39223: LIST
39224: LIST
39225: PUSH
39226: LD_INT 1
39228: NEG
39229: PUSH
39230: LD_INT 1
39232: NEG
39233: PUSH
39234: EMPTY
39235: LIST
39236: LIST
39237: PUSH
39238: LD_INT 1
39240: NEG
39241: PUSH
39242: LD_INT 2
39244: NEG
39245: PUSH
39246: EMPTY
39247: LIST
39248: LIST
39249: PUSH
39250: LD_INT 1
39252: NEG
39253: PUSH
39254: LD_INT 1
39256: PUSH
39257: EMPTY
39258: LIST
39259: LIST
39260: PUSH
39261: LD_INT 2
39263: NEG
39264: PUSH
39265: LD_INT 0
39267: PUSH
39268: EMPTY
39269: LIST
39270: LIST
39271: PUSH
39272: LD_INT 2
39274: NEG
39275: PUSH
39276: LD_INT 1
39278: NEG
39279: PUSH
39280: EMPTY
39281: LIST
39282: LIST
39283: PUSH
39284: LD_INT 2
39286: NEG
39287: PUSH
39288: LD_INT 2
39290: NEG
39291: PUSH
39292: EMPTY
39293: LIST
39294: LIST
39295: PUSH
39296: EMPTY
39297: LIST
39298: LIST
39299: LIST
39300: LIST
39301: LIST
39302: LIST
39303: LIST
39304: LIST
39305: LIST
39306: LIST
39307: LIST
39308: LIST
39309: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39310: LD_ADDR_VAR 0 53
39314: PUSH
39315: LD_INT 0
39317: PUSH
39318: LD_INT 0
39320: PUSH
39321: EMPTY
39322: LIST
39323: LIST
39324: PUSH
39325: LD_INT 0
39327: PUSH
39328: LD_INT 1
39330: NEG
39331: PUSH
39332: EMPTY
39333: LIST
39334: LIST
39335: PUSH
39336: LD_INT 1
39338: PUSH
39339: LD_INT 0
39341: PUSH
39342: EMPTY
39343: LIST
39344: LIST
39345: PUSH
39346: LD_INT 1
39348: PUSH
39349: LD_INT 1
39351: PUSH
39352: EMPTY
39353: LIST
39354: LIST
39355: PUSH
39356: LD_INT 0
39358: PUSH
39359: LD_INT 1
39361: PUSH
39362: EMPTY
39363: LIST
39364: LIST
39365: PUSH
39366: LD_INT 1
39368: NEG
39369: PUSH
39370: LD_INT 0
39372: PUSH
39373: EMPTY
39374: LIST
39375: LIST
39376: PUSH
39377: LD_INT 1
39379: NEG
39380: PUSH
39381: LD_INT 1
39383: NEG
39384: PUSH
39385: EMPTY
39386: LIST
39387: LIST
39388: PUSH
39389: LD_INT 1
39391: NEG
39392: PUSH
39393: LD_INT 2
39395: NEG
39396: PUSH
39397: EMPTY
39398: LIST
39399: LIST
39400: PUSH
39401: LD_INT 0
39403: PUSH
39404: LD_INT 2
39406: NEG
39407: PUSH
39408: EMPTY
39409: LIST
39410: LIST
39411: PUSH
39412: LD_INT 1
39414: PUSH
39415: LD_INT 1
39417: NEG
39418: PUSH
39419: EMPTY
39420: LIST
39421: LIST
39422: PUSH
39423: LD_INT 2
39425: PUSH
39426: LD_INT 0
39428: PUSH
39429: EMPTY
39430: LIST
39431: LIST
39432: PUSH
39433: LD_INT 2
39435: PUSH
39436: LD_INT 1
39438: PUSH
39439: EMPTY
39440: LIST
39441: LIST
39442: PUSH
39443: LD_INT 2
39445: PUSH
39446: LD_INT 2
39448: PUSH
39449: EMPTY
39450: LIST
39451: LIST
39452: PUSH
39453: LD_INT 1
39455: PUSH
39456: LD_INT 2
39458: PUSH
39459: EMPTY
39460: LIST
39461: LIST
39462: PUSH
39463: LD_INT 0
39465: PUSH
39466: LD_INT 2
39468: PUSH
39469: EMPTY
39470: LIST
39471: LIST
39472: PUSH
39473: LD_INT 1
39475: NEG
39476: PUSH
39477: LD_INT 1
39479: PUSH
39480: EMPTY
39481: LIST
39482: LIST
39483: PUSH
39484: LD_INT 2
39486: NEG
39487: PUSH
39488: LD_INT 0
39490: PUSH
39491: EMPTY
39492: LIST
39493: LIST
39494: PUSH
39495: LD_INT 2
39497: NEG
39498: PUSH
39499: LD_INT 1
39501: NEG
39502: PUSH
39503: EMPTY
39504: LIST
39505: LIST
39506: PUSH
39507: LD_INT 2
39509: NEG
39510: PUSH
39511: LD_INT 2
39513: NEG
39514: PUSH
39515: EMPTY
39516: LIST
39517: LIST
39518: PUSH
39519: EMPTY
39520: LIST
39521: LIST
39522: LIST
39523: LIST
39524: LIST
39525: LIST
39526: LIST
39527: LIST
39528: LIST
39529: LIST
39530: LIST
39531: LIST
39532: LIST
39533: LIST
39534: LIST
39535: LIST
39536: LIST
39537: LIST
39538: LIST
39539: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39540: LD_ADDR_VAR 0 54
39544: PUSH
39545: LD_INT 0
39547: PUSH
39548: LD_INT 0
39550: PUSH
39551: EMPTY
39552: LIST
39553: LIST
39554: PUSH
39555: LD_INT 0
39557: PUSH
39558: LD_INT 1
39560: NEG
39561: PUSH
39562: EMPTY
39563: LIST
39564: LIST
39565: PUSH
39566: LD_INT 1
39568: PUSH
39569: LD_INT 0
39571: PUSH
39572: EMPTY
39573: LIST
39574: LIST
39575: PUSH
39576: LD_INT 1
39578: PUSH
39579: LD_INT 1
39581: PUSH
39582: EMPTY
39583: LIST
39584: LIST
39585: PUSH
39586: LD_INT 0
39588: PUSH
39589: LD_INT 1
39591: PUSH
39592: EMPTY
39593: LIST
39594: LIST
39595: PUSH
39596: LD_INT 1
39598: NEG
39599: PUSH
39600: LD_INT 0
39602: PUSH
39603: EMPTY
39604: LIST
39605: LIST
39606: PUSH
39607: LD_INT 1
39609: NEG
39610: PUSH
39611: LD_INT 1
39613: NEG
39614: PUSH
39615: EMPTY
39616: LIST
39617: LIST
39618: PUSH
39619: LD_INT 1
39621: NEG
39622: PUSH
39623: LD_INT 2
39625: NEG
39626: PUSH
39627: EMPTY
39628: LIST
39629: LIST
39630: PUSH
39631: LD_INT 0
39633: PUSH
39634: LD_INT 2
39636: NEG
39637: PUSH
39638: EMPTY
39639: LIST
39640: LIST
39641: PUSH
39642: LD_INT 1
39644: PUSH
39645: LD_INT 1
39647: NEG
39648: PUSH
39649: EMPTY
39650: LIST
39651: LIST
39652: PUSH
39653: LD_INT 2
39655: PUSH
39656: LD_INT 0
39658: PUSH
39659: EMPTY
39660: LIST
39661: LIST
39662: PUSH
39663: LD_INT 2
39665: PUSH
39666: LD_INT 1
39668: PUSH
39669: EMPTY
39670: LIST
39671: LIST
39672: PUSH
39673: LD_INT 2
39675: PUSH
39676: LD_INT 2
39678: PUSH
39679: EMPTY
39680: LIST
39681: LIST
39682: PUSH
39683: LD_INT 1
39685: PUSH
39686: LD_INT 2
39688: PUSH
39689: EMPTY
39690: LIST
39691: LIST
39692: PUSH
39693: LD_INT 0
39695: PUSH
39696: LD_INT 2
39698: PUSH
39699: EMPTY
39700: LIST
39701: LIST
39702: PUSH
39703: LD_INT 1
39705: NEG
39706: PUSH
39707: LD_INT 1
39709: PUSH
39710: EMPTY
39711: LIST
39712: LIST
39713: PUSH
39714: LD_INT 2
39716: NEG
39717: PUSH
39718: LD_INT 0
39720: PUSH
39721: EMPTY
39722: LIST
39723: LIST
39724: PUSH
39725: LD_INT 2
39727: NEG
39728: PUSH
39729: LD_INT 1
39731: NEG
39732: PUSH
39733: EMPTY
39734: LIST
39735: LIST
39736: PUSH
39737: LD_INT 2
39739: NEG
39740: PUSH
39741: LD_INT 2
39743: NEG
39744: PUSH
39745: EMPTY
39746: LIST
39747: LIST
39748: PUSH
39749: EMPTY
39750: LIST
39751: LIST
39752: LIST
39753: LIST
39754: LIST
39755: LIST
39756: LIST
39757: LIST
39758: LIST
39759: LIST
39760: LIST
39761: LIST
39762: LIST
39763: LIST
39764: LIST
39765: LIST
39766: LIST
39767: LIST
39768: LIST
39769: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39770: LD_ADDR_VAR 0 55
39774: PUSH
39775: LD_INT 0
39777: PUSH
39778: LD_INT 0
39780: PUSH
39781: EMPTY
39782: LIST
39783: LIST
39784: PUSH
39785: LD_INT 0
39787: PUSH
39788: LD_INT 1
39790: NEG
39791: PUSH
39792: EMPTY
39793: LIST
39794: LIST
39795: PUSH
39796: LD_INT 1
39798: PUSH
39799: LD_INT 0
39801: PUSH
39802: EMPTY
39803: LIST
39804: LIST
39805: PUSH
39806: LD_INT 1
39808: PUSH
39809: LD_INT 1
39811: PUSH
39812: EMPTY
39813: LIST
39814: LIST
39815: PUSH
39816: LD_INT 0
39818: PUSH
39819: LD_INT 1
39821: PUSH
39822: EMPTY
39823: LIST
39824: LIST
39825: PUSH
39826: LD_INT 1
39828: NEG
39829: PUSH
39830: LD_INT 0
39832: PUSH
39833: EMPTY
39834: LIST
39835: LIST
39836: PUSH
39837: LD_INT 1
39839: NEG
39840: PUSH
39841: LD_INT 1
39843: NEG
39844: PUSH
39845: EMPTY
39846: LIST
39847: LIST
39848: PUSH
39849: LD_INT 1
39851: NEG
39852: PUSH
39853: LD_INT 2
39855: NEG
39856: PUSH
39857: EMPTY
39858: LIST
39859: LIST
39860: PUSH
39861: LD_INT 0
39863: PUSH
39864: LD_INT 2
39866: NEG
39867: PUSH
39868: EMPTY
39869: LIST
39870: LIST
39871: PUSH
39872: LD_INT 1
39874: PUSH
39875: LD_INT 1
39877: NEG
39878: PUSH
39879: EMPTY
39880: LIST
39881: LIST
39882: PUSH
39883: LD_INT 2
39885: PUSH
39886: LD_INT 0
39888: PUSH
39889: EMPTY
39890: LIST
39891: LIST
39892: PUSH
39893: LD_INT 2
39895: PUSH
39896: LD_INT 1
39898: PUSH
39899: EMPTY
39900: LIST
39901: LIST
39902: PUSH
39903: LD_INT 2
39905: PUSH
39906: LD_INT 2
39908: PUSH
39909: EMPTY
39910: LIST
39911: LIST
39912: PUSH
39913: LD_INT 1
39915: PUSH
39916: LD_INT 2
39918: PUSH
39919: EMPTY
39920: LIST
39921: LIST
39922: PUSH
39923: LD_INT 0
39925: PUSH
39926: LD_INT 2
39928: PUSH
39929: EMPTY
39930: LIST
39931: LIST
39932: PUSH
39933: LD_INT 1
39935: NEG
39936: PUSH
39937: LD_INT 1
39939: PUSH
39940: EMPTY
39941: LIST
39942: LIST
39943: PUSH
39944: LD_INT 2
39946: NEG
39947: PUSH
39948: LD_INT 0
39950: PUSH
39951: EMPTY
39952: LIST
39953: LIST
39954: PUSH
39955: LD_INT 2
39957: NEG
39958: PUSH
39959: LD_INT 1
39961: NEG
39962: PUSH
39963: EMPTY
39964: LIST
39965: LIST
39966: PUSH
39967: LD_INT 2
39969: NEG
39970: PUSH
39971: LD_INT 2
39973: NEG
39974: PUSH
39975: EMPTY
39976: LIST
39977: LIST
39978: PUSH
39979: EMPTY
39980: LIST
39981: LIST
39982: LIST
39983: LIST
39984: LIST
39985: LIST
39986: LIST
39987: LIST
39988: LIST
39989: LIST
39990: LIST
39991: LIST
39992: LIST
39993: LIST
39994: LIST
39995: LIST
39996: LIST
39997: LIST
39998: LIST
39999: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40000: LD_ADDR_VAR 0 56
40004: PUSH
40005: LD_INT 0
40007: PUSH
40008: LD_INT 0
40010: PUSH
40011: EMPTY
40012: LIST
40013: LIST
40014: PUSH
40015: LD_INT 0
40017: PUSH
40018: LD_INT 1
40020: NEG
40021: PUSH
40022: EMPTY
40023: LIST
40024: LIST
40025: PUSH
40026: LD_INT 1
40028: PUSH
40029: LD_INT 0
40031: PUSH
40032: EMPTY
40033: LIST
40034: LIST
40035: PUSH
40036: LD_INT 1
40038: PUSH
40039: LD_INT 1
40041: PUSH
40042: EMPTY
40043: LIST
40044: LIST
40045: PUSH
40046: LD_INT 0
40048: PUSH
40049: LD_INT 1
40051: PUSH
40052: EMPTY
40053: LIST
40054: LIST
40055: PUSH
40056: LD_INT 1
40058: NEG
40059: PUSH
40060: LD_INT 0
40062: PUSH
40063: EMPTY
40064: LIST
40065: LIST
40066: PUSH
40067: LD_INT 1
40069: NEG
40070: PUSH
40071: LD_INT 1
40073: NEG
40074: PUSH
40075: EMPTY
40076: LIST
40077: LIST
40078: PUSH
40079: LD_INT 1
40081: NEG
40082: PUSH
40083: LD_INT 2
40085: NEG
40086: PUSH
40087: EMPTY
40088: LIST
40089: LIST
40090: PUSH
40091: LD_INT 0
40093: PUSH
40094: LD_INT 2
40096: NEG
40097: PUSH
40098: EMPTY
40099: LIST
40100: LIST
40101: PUSH
40102: LD_INT 1
40104: PUSH
40105: LD_INT 1
40107: NEG
40108: PUSH
40109: EMPTY
40110: LIST
40111: LIST
40112: PUSH
40113: LD_INT 2
40115: PUSH
40116: LD_INT 0
40118: PUSH
40119: EMPTY
40120: LIST
40121: LIST
40122: PUSH
40123: LD_INT 2
40125: PUSH
40126: LD_INT 1
40128: PUSH
40129: EMPTY
40130: LIST
40131: LIST
40132: PUSH
40133: LD_INT 2
40135: PUSH
40136: LD_INT 2
40138: PUSH
40139: EMPTY
40140: LIST
40141: LIST
40142: PUSH
40143: LD_INT 1
40145: PUSH
40146: LD_INT 2
40148: PUSH
40149: EMPTY
40150: LIST
40151: LIST
40152: PUSH
40153: LD_INT 0
40155: PUSH
40156: LD_INT 2
40158: PUSH
40159: EMPTY
40160: LIST
40161: LIST
40162: PUSH
40163: LD_INT 1
40165: NEG
40166: PUSH
40167: LD_INT 1
40169: PUSH
40170: EMPTY
40171: LIST
40172: LIST
40173: PUSH
40174: LD_INT 2
40176: NEG
40177: PUSH
40178: LD_INT 0
40180: PUSH
40181: EMPTY
40182: LIST
40183: LIST
40184: PUSH
40185: LD_INT 2
40187: NEG
40188: PUSH
40189: LD_INT 1
40191: NEG
40192: PUSH
40193: EMPTY
40194: LIST
40195: LIST
40196: PUSH
40197: LD_INT 2
40199: NEG
40200: PUSH
40201: LD_INT 2
40203: NEG
40204: PUSH
40205: EMPTY
40206: LIST
40207: LIST
40208: PUSH
40209: EMPTY
40210: LIST
40211: LIST
40212: LIST
40213: LIST
40214: LIST
40215: LIST
40216: LIST
40217: LIST
40218: LIST
40219: LIST
40220: LIST
40221: LIST
40222: LIST
40223: LIST
40224: LIST
40225: LIST
40226: LIST
40227: LIST
40228: LIST
40229: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40230: LD_ADDR_VAR 0 57
40234: PUSH
40235: LD_INT 0
40237: PUSH
40238: LD_INT 0
40240: PUSH
40241: EMPTY
40242: LIST
40243: LIST
40244: PUSH
40245: LD_INT 0
40247: PUSH
40248: LD_INT 1
40250: NEG
40251: PUSH
40252: EMPTY
40253: LIST
40254: LIST
40255: PUSH
40256: LD_INT 1
40258: PUSH
40259: LD_INT 0
40261: PUSH
40262: EMPTY
40263: LIST
40264: LIST
40265: PUSH
40266: LD_INT 1
40268: PUSH
40269: LD_INT 1
40271: PUSH
40272: EMPTY
40273: LIST
40274: LIST
40275: PUSH
40276: LD_INT 0
40278: PUSH
40279: LD_INT 1
40281: PUSH
40282: EMPTY
40283: LIST
40284: LIST
40285: PUSH
40286: LD_INT 1
40288: NEG
40289: PUSH
40290: LD_INT 0
40292: PUSH
40293: EMPTY
40294: LIST
40295: LIST
40296: PUSH
40297: LD_INT 1
40299: NEG
40300: PUSH
40301: LD_INT 1
40303: NEG
40304: PUSH
40305: EMPTY
40306: LIST
40307: LIST
40308: PUSH
40309: LD_INT 1
40311: NEG
40312: PUSH
40313: LD_INT 2
40315: NEG
40316: PUSH
40317: EMPTY
40318: LIST
40319: LIST
40320: PUSH
40321: LD_INT 0
40323: PUSH
40324: LD_INT 2
40326: NEG
40327: PUSH
40328: EMPTY
40329: LIST
40330: LIST
40331: PUSH
40332: LD_INT 1
40334: PUSH
40335: LD_INT 1
40337: NEG
40338: PUSH
40339: EMPTY
40340: LIST
40341: LIST
40342: PUSH
40343: LD_INT 2
40345: PUSH
40346: LD_INT 0
40348: PUSH
40349: EMPTY
40350: LIST
40351: LIST
40352: PUSH
40353: LD_INT 2
40355: PUSH
40356: LD_INT 1
40358: PUSH
40359: EMPTY
40360: LIST
40361: LIST
40362: PUSH
40363: LD_INT 2
40365: PUSH
40366: LD_INT 2
40368: PUSH
40369: EMPTY
40370: LIST
40371: LIST
40372: PUSH
40373: LD_INT 1
40375: PUSH
40376: LD_INT 2
40378: PUSH
40379: EMPTY
40380: LIST
40381: LIST
40382: PUSH
40383: LD_INT 0
40385: PUSH
40386: LD_INT 2
40388: PUSH
40389: EMPTY
40390: LIST
40391: LIST
40392: PUSH
40393: LD_INT 1
40395: NEG
40396: PUSH
40397: LD_INT 1
40399: PUSH
40400: EMPTY
40401: LIST
40402: LIST
40403: PUSH
40404: LD_INT 2
40406: NEG
40407: PUSH
40408: LD_INT 0
40410: PUSH
40411: EMPTY
40412: LIST
40413: LIST
40414: PUSH
40415: LD_INT 2
40417: NEG
40418: PUSH
40419: LD_INT 1
40421: NEG
40422: PUSH
40423: EMPTY
40424: LIST
40425: LIST
40426: PUSH
40427: LD_INT 2
40429: NEG
40430: PUSH
40431: LD_INT 2
40433: NEG
40434: PUSH
40435: EMPTY
40436: LIST
40437: LIST
40438: PUSH
40439: EMPTY
40440: LIST
40441: LIST
40442: LIST
40443: LIST
40444: LIST
40445: LIST
40446: LIST
40447: LIST
40448: LIST
40449: LIST
40450: LIST
40451: LIST
40452: LIST
40453: LIST
40454: LIST
40455: LIST
40456: LIST
40457: LIST
40458: LIST
40459: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40460: LD_ADDR_VAR 0 58
40464: PUSH
40465: LD_INT 0
40467: PUSH
40468: LD_INT 0
40470: PUSH
40471: EMPTY
40472: LIST
40473: LIST
40474: PUSH
40475: LD_INT 0
40477: PUSH
40478: LD_INT 1
40480: NEG
40481: PUSH
40482: EMPTY
40483: LIST
40484: LIST
40485: PUSH
40486: LD_INT 1
40488: PUSH
40489: LD_INT 0
40491: PUSH
40492: EMPTY
40493: LIST
40494: LIST
40495: PUSH
40496: LD_INT 1
40498: PUSH
40499: LD_INT 1
40501: PUSH
40502: EMPTY
40503: LIST
40504: LIST
40505: PUSH
40506: LD_INT 0
40508: PUSH
40509: LD_INT 1
40511: PUSH
40512: EMPTY
40513: LIST
40514: LIST
40515: PUSH
40516: LD_INT 1
40518: NEG
40519: PUSH
40520: LD_INT 0
40522: PUSH
40523: EMPTY
40524: LIST
40525: LIST
40526: PUSH
40527: LD_INT 1
40529: NEG
40530: PUSH
40531: LD_INT 1
40533: NEG
40534: PUSH
40535: EMPTY
40536: LIST
40537: LIST
40538: PUSH
40539: LD_INT 1
40541: NEG
40542: PUSH
40543: LD_INT 2
40545: NEG
40546: PUSH
40547: EMPTY
40548: LIST
40549: LIST
40550: PUSH
40551: LD_INT 0
40553: PUSH
40554: LD_INT 2
40556: NEG
40557: PUSH
40558: EMPTY
40559: LIST
40560: LIST
40561: PUSH
40562: LD_INT 1
40564: PUSH
40565: LD_INT 1
40567: NEG
40568: PUSH
40569: EMPTY
40570: LIST
40571: LIST
40572: PUSH
40573: LD_INT 2
40575: PUSH
40576: LD_INT 0
40578: PUSH
40579: EMPTY
40580: LIST
40581: LIST
40582: PUSH
40583: LD_INT 2
40585: PUSH
40586: LD_INT 1
40588: PUSH
40589: EMPTY
40590: LIST
40591: LIST
40592: PUSH
40593: LD_INT 2
40595: PUSH
40596: LD_INT 2
40598: PUSH
40599: EMPTY
40600: LIST
40601: LIST
40602: PUSH
40603: LD_INT 1
40605: PUSH
40606: LD_INT 2
40608: PUSH
40609: EMPTY
40610: LIST
40611: LIST
40612: PUSH
40613: LD_INT 0
40615: PUSH
40616: LD_INT 2
40618: PUSH
40619: EMPTY
40620: LIST
40621: LIST
40622: PUSH
40623: LD_INT 1
40625: NEG
40626: PUSH
40627: LD_INT 1
40629: PUSH
40630: EMPTY
40631: LIST
40632: LIST
40633: PUSH
40634: LD_INT 2
40636: NEG
40637: PUSH
40638: LD_INT 0
40640: PUSH
40641: EMPTY
40642: LIST
40643: LIST
40644: PUSH
40645: LD_INT 2
40647: NEG
40648: PUSH
40649: LD_INT 1
40651: NEG
40652: PUSH
40653: EMPTY
40654: LIST
40655: LIST
40656: PUSH
40657: LD_INT 2
40659: NEG
40660: PUSH
40661: LD_INT 2
40663: NEG
40664: PUSH
40665: EMPTY
40666: LIST
40667: LIST
40668: PUSH
40669: EMPTY
40670: LIST
40671: LIST
40672: LIST
40673: LIST
40674: LIST
40675: LIST
40676: LIST
40677: LIST
40678: LIST
40679: LIST
40680: LIST
40681: LIST
40682: LIST
40683: LIST
40684: LIST
40685: LIST
40686: LIST
40687: LIST
40688: LIST
40689: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40690: LD_ADDR_VAR 0 59
40694: PUSH
40695: LD_INT 0
40697: PUSH
40698: LD_INT 0
40700: PUSH
40701: EMPTY
40702: LIST
40703: LIST
40704: PUSH
40705: LD_INT 0
40707: PUSH
40708: LD_INT 1
40710: NEG
40711: PUSH
40712: EMPTY
40713: LIST
40714: LIST
40715: PUSH
40716: LD_INT 1
40718: PUSH
40719: LD_INT 0
40721: PUSH
40722: EMPTY
40723: LIST
40724: LIST
40725: PUSH
40726: LD_INT 1
40728: PUSH
40729: LD_INT 1
40731: PUSH
40732: EMPTY
40733: LIST
40734: LIST
40735: PUSH
40736: LD_INT 0
40738: PUSH
40739: LD_INT 1
40741: PUSH
40742: EMPTY
40743: LIST
40744: LIST
40745: PUSH
40746: LD_INT 1
40748: NEG
40749: PUSH
40750: LD_INT 0
40752: PUSH
40753: EMPTY
40754: LIST
40755: LIST
40756: PUSH
40757: LD_INT 1
40759: NEG
40760: PUSH
40761: LD_INT 1
40763: NEG
40764: PUSH
40765: EMPTY
40766: LIST
40767: LIST
40768: PUSH
40769: EMPTY
40770: LIST
40771: LIST
40772: LIST
40773: LIST
40774: LIST
40775: LIST
40776: LIST
40777: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40778: LD_ADDR_VAR 0 60
40782: PUSH
40783: LD_INT 0
40785: PUSH
40786: LD_INT 0
40788: PUSH
40789: EMPTY
40790: LIST
40791: LIST
40792: PUSH
40793: LD_INT 0
40795: PUSH
40796: LD_INT 1
40798: NEG
40799: PUSH
40800: EMPTY
40801: LIST
40802: LIST
40803: PUSH
40804: LD_INT 1
40806: PUSH
40807: LD_INT 0
40809: PUSH
40810: EMPTY
40811: LIST
40812: LIST
40813: PUSH
40814: LD_INT 1
40816: PUSH
40817: LD_INT 1
40819: PUSH
40820: EMPTY
40821: LIST
40822: LIST
40823: PUSH
40824: LD_INT 0
40826: PUSH
40827: LD_INT 1
40829: PUSH
40830: EMPTY
40831: LIST
40832: LIST
40833: PUSH
40834: LD_INT 1
40836: NEG
40837: PUSH
40838: LD_INT 0
40840: PUSH
40841: EMPTY
40842: LIST
40843: LIST
40844: PUSH
40845: LD_INT 1
40847: NEG
40848: PUSH
40849: LD_INT 1
40851: NEG
40852: PUSH
40853: EMPTY
40854: LIST
40855: LIST
40856: PUSH
40857: EMPTY
40858: LIST
40859: LIST
40860: LIST
40861: LIST
40862: LIST
40863: LIST
40864: LIST
40865: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40866: LD_ADDR_VAR 0 61
40870: PUSH
40871: LD_INT 0
40873: PUSH
40874: LD_INT 0
40876: PUSH
40877: EMPTY
40878: LIST
40879: LIST
40880: PUSH
40881: LD_INT 0
40883: PUSH
40884: LD_INT 1
40886: NEG
40887: PUSH
40888: EMPTY
40889: LIST
40890: LIST
40891: PUSH
40892: LD_INT 1
40894: PUSH
40895: LD_INT 0
40897: PUSH
40898: EMPTY
40899: LIST
40900: LIST
40901: PUSH
40902: LD_INT 1
40904: PUSH
40905: LD_INT 1
40907: PUSH
40908: EMPTY
40909: LIST
40910: LIST
40911: PUSH
40912: LD_INT 0
40914: PUSH
40915: LD_INT 1
40917: PUSH
40918: EMPTY
40919: LIST
40920: LIST
40921: PUSH
40922: LD_INT 1
40924: NEG
40925: PUSH
40926: LD_INT 0
40928: PUSH
40929: EMPTY
40930: LIST
40931: LIST
40932: PUSH
40933: LD_INT 1
40935: NEG
40936: PUSH
40937: LD_INT 1
40939: NEG
40940: PUSH
40941: EMPTY
40942: LIST
40943: LIST
40944: PUSH
40945: EMPTY
40946: LIST
40947: LIST
40948: LIST
40949: LIST
40950: LIST
40951: LIST
40952: LIST
40953: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40954: LD_ADDR_VAR 0 62
40958: PUSH
40959: LD_INT 0
40961: PUSH
40962: LD_INT 0
40964: PUSH
40965: EMPTY
40966: LIST
40967: LIST
40968: PUSH
40969: LD_INT 0
40971: PUSH
40972: LD_INT 1
40974: NEG
40975: PUSH
40976: EMPTY
40977: LIST
40978: LIST
40979: PUSH
40980: LD_INT 1
40982: PUSH
40983: LD_INT 0
40985: PUSH
40986: EMPTY
40987: LIST
40988: LIST
40989: PUSH
40990: LD_INT 1
40992: PUSH
40993: LD_INT 1
40995: PUSH
40996: EMPTY
40997: LIST
40998: LIST
40999: PUSH
41000: LD_INT 0
41002: PUSH
41003: LD_INT 1
41005: PUSH
41006: EMPTY
41007: LIST
41008: LIST
41009: PUSH
41010: LD_INT 1
41012: NEG
41013: PUSH
41014: LD_INT 0
41016: PUSH
41017: EMPTY
41018: LIST
41019: LIST
41020: PUSH
41021: LD_INT 1
41023: NEG
41024: PUSH
41025: LD_INT 1
41027: NEG
41028: PUSH
41029: EMPTY
41030: LIST
41031: LIST
41032: PUSH
41033: EMPTY
41034: LIST
41035: LIST
41036: LIST
41037: LIST
41038: LIST
41039: LIST
41040: LIST
41041: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41042: LD_ADDR_VAR 0 63
41046: PUSH
41047: LD_INT 0
41049: PUSH
41050: LD_INT 0
41052: PUSH
41053: EMPTY
41054: LIST
41055: LIST
41056: PUSH
41057: LD_INT 0
41059: PUSH
41060: LD_INT 1
41062: NEG
41063: PUSH
41064: EMPTY
41065: LIST
41066: LIST
41067: PUSH
41068: LD_INT 1
41070: PUSH
41071: LD_INT 0
41073: PUSH
41074: EMPTY
41075: LIST
41076: LIST
41077: PUSH
41078: LD_INT 1
41080: PUSH
41081: LD_INT 1
41083: PUSH
41084: EMPTY
41085: LIST
41086: LIST
41087: PUSH
41088: LD_INT 0
41090: PUSH
41091: LD_INT 1
41093: PUSH
41094: EMPTY
41095: LIST
41096: LIST
41097: PUSH
41098: LD_INT 1
41100: NEG
41101: PUSH
41102: LD_INT 0
41104: PUSH
41105: EMPTY
41106: LIST
41107: LIST
41108: PUSH
41109: LD_INT 1
41111: NEG
41112: PUSH
41113: LD_INT 1
41115: NEG
41116: PUSH
41117: EMPTY
41118: LIST
41119: LIST
41120: PUSH
41121: EMPTY
41122: LIST
41123: LIST
41124: LIST
41125: LIST
41126: LIST
41127: LIST
41128: LIST
41129: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41130: LD_ADDR_VAR 0 64
41134: PUSH
41135: LD_INT 0
41137: PUSH
41138: LD_INT 0
41140: PUSH
41141: EMPTY
41142: LIST
41143: LIST
41144: PUSH
41145: LD_INT 0
41147: PUSH
41148: LD_INT 1
41150: NEG
41151: PUSH
41152: EMPTY
41153: LIST
41154: LIST
41155: PUSH
41156: LD_INT 1
41158: PUSH
41159: LD_INT 0
41161: PUSH
41162: EMPTY
41163: LIST
41164: LIST
41165: PUSH
41166: LD_INT 1
41168: PUSH
41169: LD_INT 1
41171: PUSH
41172: EMPTY
41173: LIST
41174: LIST
41175: PUSH
41176: LD_INT 0
41178: PUSH
41179: LD_INT 1
41181: PUSH
41182: EMPTY
41183: LIST
41184: LIST
41185: PUSH
41186: LD_INT 1
41188: NEG
41189: PUSH
41190: LD_INT 0
41192: PUSH
41193: EMPTY
41194: LIST
41195: LIST
41196: PUSH
41197: LD_INT 1
41199: NEG
41200: PUSH
41201: LD_INT 1
41203: NEG
41204: PUSH
41205: EMPTY
41206: LIST
41207: LIST
41208: PUSH
41209: EMPTY
41210: LIST
41211: LIST
41212: LIST
41213: LIST
41214: LIST
41215: LIST
41216: LIST
41217: ST_TO_ADDR
// end ; 1 :
41218: GO 47115
41220: LD_INT 1
41222: DOUBLE
41223: EQUAL
41224: IFTRUE 41228
41226: GO 43851
41228: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41229: LD_ADDR_VAR 0 11
41233: PUSH
41234: LD_INT 1
41236: NEG
41237: PUSH
41238: LD_INT 3
41240: NEG
41241: PUSH
41242: EMPTY
41243: LIST
41244: LIST
41245: PUSH
41246: LD_INT 0
41248: PUSH
41249: LD_INT 3
41251: NEG
41252: PUSH
41253: EMPTY
41254: LIST
41255: LIST
41256: PUSH
41257: LD_INT 1
41259: PUSH
41260: LD_INT 2
41262: NEG
41263: PUSH
41264: EMPTY
41265: LIST
41266: LIST
41267: PUSH
41268: EMPTY
41269: LIST
41270: LIST
41271: LIST
41272: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41273: LD_ADDR_VAR 0 12
41277: PUSH
41278: LD_INT 2
41280: PUSH
41281: LD_INT 1
41283: NEG
41284: PUSH
41285: EMPTY
41286: LIST
41287: LIST
41288: PUSH
41289: LD_INT 3
41291: PUSH
41292: LD_INT 0
41294: PUSH
41295: EMPTY
41296: LIST
41297: LIST
41298: PUSH
41299: LD_INT 3
41301: PUSH
41302: LD_INT 1
41304: PUSH
41305: EMPTY
41306: LIST
41307: LIST
41308: PUSH
41309: EMPTY
41310: LIST
41311: LIST
41312: LIST
41313: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41314: LD_ADDR_VAR 0 13
41318: PUSH
41319: LD_INT 3
41321: PUSH
41322: LD_INT 2
41324: PUSH
41325: EMPTY
41326: LIST
41327: LIST
41328: PUSH
41329: LD_INT 3
41331: PUSH
41332: LD_INT 3
41334: PUSH
41335: EMPTY
41336: LIST
41337: LIST
41338: PUSH
41339: LD_INT 2
41341: PUSH
41342: LD_INT 3
41344: PUSH
41345: EMPTY
41346: LIST
41347: LIST
41348: PUSH
41349: EMPTY
41350: LIST
41351: LIST
41352: LIST
41353: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41354: LD_ADDR_VAR 0 14
41358: PUSH
41359: LD_INT 1
41361: PUSH
41362: LD_INT 3
41364: PUSH
41365: EMPTY
41366: LIST
41367: LIST
41368: PUSH
41369: LD_INT 0
41371: PUSH
41372: LD_INT 3
41374: PUSH
41375: EMPTY
41376: LIST
41377: LIST
41378: PUSH
41379: LD_INT 1
41381: NEG
41382: PUSH
41383: LD_INT 2
41385: PUSH
41386: EMPTY
41387: LIST
41388: LIST
41389: PUSH
41390: EMPTY
41391: LIST
41392: LIST
41393: LIST
41394: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41395: LD_ADDR_VAR 0 15
41399: PUSH
41400: LD_INT 2
41402: NEG
41403: PUSH
41404: LD_INT 1
41406: PUSH
41407: EMPTY
41408: LIST
41409: LIST
41410: PUSH
41411: LD_INT 3
41413: NEG
41414: PUSH
41415: LD_INT 0
41417: PUSH
41418: EMPTY
41419: LIST
41420: LIST
41421: PUSH
41422: LD_INT 3
41424: NEG
41425: PUSH
41426: LD_INT 1
41428: NEG
41429: PUSH
41430: EMPTY
41431: LIST
41432: LIST
41433: PUSH
41434: EMPTY
41435: LIST
41436: LIST
41437: LIST
41438: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41439: LD_ADDR_VAR 0 16
41443: PUSH
41444: LD_INT 2
41446: NEG
41447: PUSH
41448: LD_INT 3
41450: NEG
41451: PUSH
41452: EMPTY
41453: LIST
41454: LIST
41455: PUSH
41456: LD_INT 3
41458: NEG
41459: PUSH
41460: LD_INT 2
41462: NEG
41463: PUSH
41464: EMPTY
41465: LIST
41466: LIST
41467: PUSH
41468: LD_INT 3
41470: NEG
41471: PUSH
41472: LD_INT 3
41474: NEG
41475: PUSH
41476: EMPTY
41477: LIST
41478: LIST
41479: PUSH
41480: EMPTY
41481: LIST
41482: LIST
41483: LIST
41484: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41485: LD_ADDR_VAR 0 17
41489: PUSH
41490: LD_INT 1
41492: NEG
41493: PUSH
41494: LD_INT 3
41496: NEG
41497: PUSH
41498: EMPTY
41499: LIST
41500: LIST
41501: PUSH
41502: LD_INT 0
41504: PUSH
41505: LD_INT 3
41507: NEG
41508: PUSH
41509: EMPTY
41510: LIST
41511: LIST
41512: PUSH
41513: LD_INT 1
41515: PUSH
41516: LD_INT 2
41518: NEG
41519: PUSH
41520: EMPTY
41521: LIST
41522: LIST
41523: PUSH
41524: EMPTY
41525: LIST
41526: LIST
41527: LIST
41528: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41529: LD_ADDR_VAR 0 18
41533: PUSH
41534: LD_INT 2
41536: PUSH
41537: LD_INT 1
41539: NEG
41540: PUSH
41541: EMPTY
41542: LIST
41543: LIST
41544: PUSH
41545: LD_INT 3
41547: PUSH
41548: LD_INT 0
41550: PUSH
41551: EMPTY
41552: LIST
41553: LIST
41554: PUSH
41555: LD_INT 3
41557: PUSH
41558: LD_INT 1
41560: PUSH
41561: EMPTY
41562: LIST
41563: LIST
41564: PUSH
41565: EMPTY
41566: LIST
41567: LIST
41568: LIST
41569: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41570: LD_ADDR_VAR 0 19
41574: PUSH
41575: LD_INT 3
41577: PUSH
41578: LD_INT 2
41580: PUSH
41581: EMPTY
41582: LIST
41583: LIST
41584: PUSH
41585: LD_INT 3
41587: PUSH
41588: LD_INT 3
41590: PUSH
41591: EMPTY
41592: LIST
41593: LIST
41594: PUSH
41595: LD_INT 2
41597: PUSH
41598: LD_INT 3
41600: PUSH
41601: EMPTY
41602: LIST
41603: LIST
41604: PUSH
41605: EMPTY
41606: LIST
41607: LIST
41608: LIST
41609: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41610: LD_ADDR_VAR 0 20
41614: PUSH
41615: LD_INT 1
41617: PUSH
41618: LD_INT 3
41620: PUSH
41621: EMPTY
41622: LIST
41623: LIST
41624: PUSH
41625: LD_INT 0
41627: PUSH
41628: LD_INT 3
41630: PUSH
41631: EMPTY
41632: LIST
41633: LIST
41634: PUSH
41635: LD_INT 1
41637: NEG
41638: PUSH
41639: LD_INT 2
41641: PUSH
41642: EMPTY
41643: LIST
41644: LIST
41645: PUSH
41646: EMPTY
41647: LIST
41648: LIST
41649: LIST
41650: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41651: LD_ADDR_VAR 0 21
41655: PUSH
41656: LD_INT 2
41658: NEG
41659: PUSH
41660: LD_INT 1
41662: PUSH
41663: EMPTY
41664: LIST
41665: LIST
41666: PUSH
41667: LD_INT 3
41669: NEG
41670: PUSH
41671: LD_INT 0
41673: PUSH
41674: EMPTY
41675: LIST
41676: LIST
41677: PUSH
41678: LD_INT 3
41680: NEG
41681: PUSH
41682: LD_INT 1
41684: NEG
41685: PUSH
41686: EMPTY
41687: LIST
41688: LIST
41689: PUSH
41690: EMPTY
41691: LIST
41692: LIST
41693: LIST
41694: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41695: LD_ADDR_VAR 0 22
41699: PUSH
41700: LD_INT 2
41702: NEG
41703: PUSH
41704: LD_INT 3
41706: NEG
41707: PUSH
41708: EMPTY
41709: LIST
41710: LIST
41711: PUSH
41712: LD_INT 3
41714: NEG
41715: PUSH
41716: LD_INT 2
41718: NEG
41719: PUSH
41720: EMPTY
41721: LIST
41722: LIST
41723: PUSH
41724: LD_INT 3
41726: NEG
41727: PUSH
41728: LD_INT 3
41730: NEG
41731: PUSH
41732: EMPTY
41733: LIST
41734: LIST
41735: PUSH
41736: EMPTY
41737: LIST
41738: LIST
41739: LIST
41740: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
41741: LD_ADDR_VAR 0 23
41745: PUSH
41746: LD_INT 0
41748: PUSH
41749: LD_INT 3
41751: NEG
41752: PUSH
41753: EMPTY
41754: LIST
41755: LIST
41756: PUSH
41757: LD_INT 1
41759: NEG
41760: PUSH
41761: LD_INT 4
41763: NEG
41764: PUSH
41765: EMPTY
41766: LIST
41767: LIST
41768: PUSH
41769: LD_INT 1
41771: PUSH
41772: LD_INT 3
41774: NEG
41775: PUSH
41776: EMPTY
41777: LIST
41778: LIST
41779: PUSH
41780: EMPTY
41781: LIST
41782: LIST
41783: LIST
41784: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
41785: LD_ADDR_VAR 0 24
41789: PUSH
41790: LD_INT 3
41792: PUSH
41793: LD_INT 0
41795: PUSH
41796: EMPTY
41797: LIST
41798: LIST
41799: PUSH
41800: LD_INT 3
41802: PUSH
41803: LD_INT 1
41805: NEG
41806: PUSH
41807: EMPTY
41808: LIST
41809: LIST
41810: PUSH
41811: LD_INT 4
41813: PUSH
41814: LD_INT 1
41816: PUSH
41817: EMPTY
41818: LIST
41819: LIST
41820: PUSH
41821: EMPTY
41822: LIST
41823: LIST
41824: LIST
41825: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
41826: LD_ADDR_VAR 0 25
41830: PUSH
41831: LD_INT 3
41833: PUSH
41834: LD_INT 3
41836: PUSH
41837: EMPTY
41838: LIST
41839: LIST
41840: PUSH
41841: LD_INT 4
41843: PUSH
41844: LD_INT 3
41846: PUSH
41847: EMPTY
41848: LIST
41849: LIST
41850: PUSH
41851: LD_INT 3
41853: PUSH
41854: LD_INT 4
41856: PUSH
41857: EMPTY
41858: LIST
41859: LIST
41860: PUSH
41861: EMPTY
41862: LIST
41863: LIST
41864: LIST
41865: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
41866: LD_ADDR_VAR 0 26
41870: PUSH
41871: LD_INT 0
41873: PUSH
41874: LD_INT 3
41876: PUSH
41877: EMPTY
41878: LIST
41879: LIST
41880: PUSH
41881: LD_INT 1
41883: PUSH
41884: LD_INT 4
41886: PUSH
41887: EMPTY
41888: LIST
41889: LIST
41890: PUSH
41891: LD_INT 1
41893: NEG
41894: PUSH
41895: LD_INT 3
41897: PUSH
41898: EMPTY
41899: LIST
41900: LIST
41901: PUSH
41902: EMPTY
41903: LIST
41904: LIST
41905: LIST
41906: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
41907: LD_ADDR_VAR 0 27
41911: PUSH
41912: LD_INT 3
41914: NEG
41915: PUSH
41916: LD_INT 0
41918: PUSH
41919: EMPTY
41920: LIST
41921: LIST
41922: PUSH
41923: LD_INT 3
41925: NEG
41926: PUSH
41927: LD_INT 1
41929: PUSH
41930: EMPTY
41931: LIST
41932: LIST
41933: PUSH
41934: LD_INT 4
41936: NEG
41937: PUSH
41938: LD_INT 1
41940: NEG
41941: PUSH
41942: EMPTY
41943: LIST
41944: LIST
41945: PUSH
41946: EMPTY
41947: LIST
41948: LIST
41949: LIST
41950: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
41951: LD_ADDR_VAR 0 28
41955: PUSH
41956: LD_INT 3
41958: NEG
41959: PUSH
41960: LD_INT 3
41962: NEG
41963: PUSH
41964: EMPTY
41965: LIST
41966: LIST
41967: PUSH
41968: LD_INT 3
41970: NEG
41971: PUSH
41972: LD_INT 4
41974: NEG
41975: PUSH
41976: EMPTY
41977: LIST
41978: LIST
41979: PUSH
41980: LD_INT 4
41982: NEG
41983: PUSH
41984: LD_INT 3
41986: NEG
41987: PUSH
41988: EMPTY
41989: LIST
41990: LIST
41991: PUSH
41992: EMPTY
41993: LIST
41994: LIST
41995: LIST
41996: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
41997: LD_ADDR_VAR 0 29
42001: PUSH
42002: LD_INT 1
42004: NEG
42005: PUSH
42006: LD_INT 3
42008: NEG
42009: PUSH
42010: EMPTY
42011: LIST
42012: LIST
42013: PUSH
42014: LD_INT 0
42016: PUSH
42017: LD_INT 3
42019: NEG
42020: PUSH
42021: EMPTY
42022: LIST
42023: LIST
42024: PUSH
42025: LD_INT 1
42027: PUSH
42028: LD_INT 2
42030: NEG
42031: PUSH
42032: EMPTY
42033: LIST
42034: LIST
42035: PUSH
42036: LD_INT 1
42038: NEG
42039: PUSH
42040: LD_INT 4
42042: NEG
42043: PUSH
42044: EMPTY
42045: LIST
42046: LIST
42047: PUSH
42048: LD_INT 0
42050: PUSH
42051: LD_INT 4
42053: NEG
42054: PUSH
42055: EMPTY
42056: LIST
42057: LIST
42058: PUSH
42059: LD_INT 1
42061: PUSH
42062: LD_INT 3
42064: NEG
42065: PUSH
42066: EMPTY
42067: LIST
42068: LIST
42069: PUSH
42070: LD_INT 1
42072: NEG
42073: PUSH
42074: LD_INT 5
42076: NEG
42077: PUSH
42078: EMPTY
42079: LIST
42080: LIST
42081: PUSH
42082: LD_INT 0
42084: PUSH
42085: LD_INT 5
42087: NEG
42088: PUSH
42089: EMPTY
42090: LIST
42091: LIST
42092: PUSH
42093: LD_INT 1
42095: PUSH
42096: LD_INT 4
42098: NEG
42099: PUSH
42100: EMPTY
42101: LIST
42102: LIST
42103: PUSH
42104: LD_INT 1
42106: NEG
42107: PUSH
42108: LD_INT 6
42110: NEG
42111: PUSH
42112: EMPTY
42113: LIST
42114: LIST
42115: PUSH
42116: LD_INT 0
42118: PUSH
42119: LD_INT 6
42121: NEG
42122: PUSH
42123: EMPTY
42124: LIST
42125: LIST
42126: PUSH
42127: LD_INT 1
42129: PUSH
42130: LD_INT 5
42132: NEG
42133: PUSH
42134: EMPTY
42135: LIST
42136: LIST
42137: PUSH
42138: EMPTY
42139: LIST
42140: LIST
42141: LIST
42142: LIST
42143: LIST
42144: LIST
42145: LIST
42146: LIST
42147: LIST
42148: LIST
42149: LIST
42150: LIST
42151: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
42152: LD_ADDR_VAR 0 30
42156: PUSH
42157: LD_INT 2
42159: PUSH
42160: LD_INT 1
42162: NEG
42163: PUSH
42164: EMPTY
42165: LIST
42166: LIST
42167: PUSH
42168: LD_INT 3
42170: PUSH
42171: LD_INT 0
42173: PUSH
42174: EMPTY
42175: LIST
42176: LIST
42177: PUSH
42178: LD_INT 3
42180: PUSH
42181: LD_INT 1
42183: PUSH
42184: EMPTY
42185: LIST
42186: LIST
42187: PUSH
42188: LD_INT 3
42190: PUSH
42191: LD_INT 1
42193: NEG
42194: PUSH
42195: EMPTY
42196: LIST
42197: LIST
42198: PUSH
42199: LD_INT 4
42201: PUSH
42202: LD_INT 0
42204: PUSH
42205: EMPTY
42206: LIST
42207: LIST
42208: PUSH
42209: LD_INT 4
42211: PUSH
42212: LD_INT 1
42214: PUSH
42215: EMPTY
42216: LIST
42217: LIST
42218: PUSH
42219: LD_INT 4
42221: PUSH
42222: LD_INT 1
42224: NEG
42225: PUSH
42226: EMPTY
42227: LIST
42228: LIST
42229: PUSH
42230: LD_INT 5
42232: PUSH
42233: LD_INT 0
42235: PUSH
42236: EMPTY
42237: LIST
42238: LIST
42239: PUSH
42240: LD_INT 5
42242: PUSH
42243: LD_INT 1
42245: PUSH
42246: EMPTY
42247: LIST
42248: LIST
42249: PUSH
42250: LD_INT 5
42252: PUSH
42253: LD_INT 1
42255: NEG
42256: PUSH
42257: EMPTY
42258: LIST
42259: LIST
42260: PUSH
42261: LD_INT 6
42263: PUSH
42264: LD_INT 0
42266: PUSH
42267: EMPTY
42268: LIST
42269: LIST
42270: PUSH
42271: LD_INT 6
42273: PUSH
42274: LD_INT 1
42276: PUSH
42277: EMPTY
42278: LIST
42279: LIST
42280: PUSH
42281: EMPTY
42282: LIST
42283: LIST
42284: LIST
42285: LIST
42286: LIST
42287: LIST
42288: LIST
42289: LIST
42290: LIST
42291: LIST
42292: LIST
42293: LIST
42294: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
42295: LD_ADDR_VAR 0 31
42299: PUSH
42300: LD_INT 3
42302: PUSH
42303: LD_INT 2
42305: PUSH
42306: EMPTY
42307: LIST
42308: LIST
42309: PUSH
42310: LD_INT 3
42312: PUSH
42313: LD_INT 3
42315: PUSH
42316: EMPTY
42317: LIST
42318: LIST
42319: PUSH
42320: LD_INT 2
42322: PUSH
42323: LD_INT 3
42325: PUSH
42326: EMPTY
42327: LIST
42328: LIST
42329: PUSH
42330: LD_INT 4
42332: PUSH
42333: LD_INT 3
42335: PUSH
42336: EMPTY
42337: LIST
42338: LIST
42339: PUSH
42340: LD_INT 4
42342: PUSH
42343: LD_INT 4
42345: PUSH
42346: EMPTY
42347: LIST
42348: LIST
42349: PUSH
42350: LD_INT 3
42352: PUSH
42353: LD_INT 4
42355: PUSH
42356: EMPTY
42357: LIST
42358: LIST
42359: PUSH
42360: LD_INT 5
42362: PUSH
42363: LD_INT 4
42365: PUSH
42366: EMPTY
42367: LIST
42368: LIST
42369: PUSH
42370: LD_INT 5
42372: PUSH
42373: LD_INT 5
42375: PUSH
42376: EMPTY
42377: LIST
42378: LIST
42379: PUSH
42380: LD_INT 4
42382: PUSH
42383: LD_INT 5
42385: PUSH
42386: EMPTY
42387: LIST
42388: LIST
42389: PUSH
42390: LD_INT 6
42392: PUSH
42393: LD_INT 5
42395: PUSH
42396: EMPTY
42397: LIST
42398: LIST
42399: PUSH
42400: LD_INT 6
42402: PUSH
42403: LD_INT 6
42405: PUSH
42406: EMPTY
42407: LIST
42408: LIST
42409: PUSH
42410: LD_INT 5
42412: PUSH
42413: LD_INT 6
42415: PUSH
42416: EMPTY
42417: LIST
42418: LIST
42419: PUSH
42420: EMPTY
42421: LIST
42422: LIST
42423: LIST
42424: LIST
42425: LIST
42426: LIST
42427: LIST
42428: LIST
42429: LIST
42430: LIST
42431: LIST
42432: LIST
42433: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
42434: LD_ADDR_VAR 0 32
42438: PUSH
42439: LD_INT 1
42441: PUSH
42442: LD_INT 3
42444: PUSH
42445: EMPTY
42446: LIST
42447: LIST
42448: PUSH
42449: LD_INT 0
42451: PUSH
42452: LD_INT 3
42454: PUSH
42455: EMPTY
42456: LIST
42457: LIST
42458: PUSH
42459: LD_INT 1
42461: NEG
42462: PUSH
42463: LD_INT 2
42465: PUSH
42466: EMPTY
42467: LIST
42468: LIST
42469: PUSH
42470: LD_INT 1
42472: PUSH
42473: LD_INT 4
42475: PUSH
42476: EMPTY
42477: LIST
42478: LIST
42479: PUSH
42480: LD_INT 0
42482: PUSH
42483: LD_INT 4
42485: PUSH
42486: EMPTY
42487: LIST
42488: LIST
42489: PUSH
42490: LD_INT 1
42492: NEG
42493: PUSH
42494: LD_INT 3
42496: PUSH
42497: EMPTY
42498: LIST
42499: LIST
42500: PUSH
42501: LD_INT 1
42503: PUSH
42504: LD_INT 5
42506: PUSH
42507: EMPTY
42508: LIST
42509: LIST
42510: PUSH
42511: LD_INT 0
42513: PUSH
42514: LD_INT 5
42516: PUSH
42517: EMPTY
42518: LIST
42519: LIST
42520: PUSH
42521: LD_INT 1
42523: NEG
42524: PUSH
42525: LD_INT 4
42527: PUSH
42528: EMPTY
42529: LIST
42530: LIST
42531: PUSH
42532: LD_INT 1
42534: PUSH
42535: LD_INT 6
42537: PUSH
42538: EMPTY
42539: LIST
42540: LIST
42541: PUSH
42542: LD_INT 0
42544: PUSH
42545: LD_INT 6
42547: PUSH
42548: EMPTY
42549: LIST
42550: LIST
42551: PUSH
42552: LD_INT 1
42554: NEG
42555: PUSH
42556: LD_INT 5
42558: PUSH
42559: EMPTY
42560: LIST
42561: LIST
42562: PUSH
42563: EMPTY
42564: LIST
42565: LIST
42566: LIST
42567: LIST
42568: LIST
42569: LIST
42570: LIST
42571: LIST
42572: LIST
42573: LIST
42574: LIST
42575: LIST
42576: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
42577: LD_ADDR_VAR 0 33
42581: PUSH
42582: LD_INT 2
42584: NEG
42585: PUSH
42586: LD_INT 1
42588: PUSH
42589: EMPTY
42590: LIST
42591: LIST
42592: PUSH
42593: LD_INT 3
42595: NEG
42596: PUSH
42597: LD_INT 0
42599: PUSH
42600: EMPTY
42601: LIST
42602: LIST
42603: PUSH
42604: LD_INT 3
42606: NEG
42607: PUSH
42608: LD_INT 1
42610: NEG
42611: PUSH
42612: EMPTY
42613: LIST
42614: LIST
42615: PUSH
42616: LD_INT 3
42618: NEG
42619: PUSH
42620: LD_INT 1
42622: PUSH
42623: EMPTY
42624: LIST
42625: LIST
42626: PUSH
42627: LD_INT 4
42629: NEG
42630: PUSH
42631: LD_INT 0
42633: PUSH
42634: EMPTY
42635: LIST
42636: LIST
42637: PUSH
42638: LD_INT 4
42640: NEG
42641: PUSH
42642: LD_INT 1
42644: NEG
42645: PUSH
42646: EMPTY
42647: LIST
42648: LIST
42649: PUSH
42650: LD_INT 4
42652: NEG
42653: PUSH
42654: LD_INT 1
42656: PUSH
42657: EMPTY
42658: LIST
42659: LIST
42660: PUSH
42661: LD_INT 5
42663: NEG
42664: PUSH
42665: LD_INT 0
42667: PUSH
42668: EMPTY
42669: LIST
42670: LIST
42671: PUSH
42672: LD_INT 5
42674: NEG
42675: PUSH
42676: LD_INT 1
42678: NEG
42679: PUSH
42680: EMPTY
42681: LIST
42682: LIST
42683: PUSH
42684: LD_INT 5
42686: NEG
42687: PUSH
42688: LD_INT 1
42690: PUSH
42691: EMPTY
42692: LIST
42693: LIST
42694: PUSH
42695: LD_INT 6
42697: NEG
42698: PUSH
42699: LD_INT 0
42701: PUSH
42702: EMPTY
42703: LIST
42704: LIST
42705: PUSH
42706: LD_INT 6
42708: NEG
42709: PUSH
42710: LD_INT 1
42712: NEG
42713: PUSH
42714: EMPTY
42715: LIST
42716: LIST
42717: PUSH
42718: EMPTY
42719: LIST
42720: LIST
42721: LIST
42722: LIST
42723: LIST
42724: LIST
42725: LIST
42726: LIST
42727: LIST
42728: LIST
42729: LIST
42730: LIST
42731: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
42732: LD_ADDR_VAR 0 34
42736: PUSH
42737: LD_INT 2
42739: NEG
42740: PUSH
42741: LD_INT 3
42743: NEG
42744: PUSH
42745: EMPTY
42746: LIST
42747: LIST
42748: PUSH
42749: LD_INT 3
42751: NEG
42752: PUSH
42753: LD_INT 2
42755: NEG
42756: PUSH
42757: EMPTY
42758: LIST
42759: LIST
42760: PUSH
42761: LD_INT 3
42763: NEG
42764: PUSH
42765: LD_INT 3
42767: NEG
42768: PUSH
42769: EMPTY
42770: LIST
42771: LIST
42772: PUSH
42773: LD_INT 3
42775: NEG
42776: PUSH
42777: LD_INT 4
42779: NEG
42780: PUSH
42781: EMPTY
42782: LIST
42783: LIST
42784: PUSH
42785: LD_INT 4
42787: NEG
42788: PUSH
42789: LD_INT 3
42791: NEG
42792: PUSH
42793: EMPTY
42794: LIST
42795: LIST
42796: PUSH
42797: LD_INT 4
42799: NEG
42800: PUSH
42801: LD_INT 4
42803: NEG
42804: PUSH
42805: EMPTY
42806: LIST
42807: LIST
42808: PUSH
42809: LD_INT 4
42811: NEG
42812: PUSH
42813: LD_INT 5
42815: NEG
42816: PUSH
42817: EMPTY
42818: LIST
42819: LIST
42820: PUSH
42821: LD_INT 5
42823: NEG
42824: PUSH
42825: LD_INT 4
42827: NEG
42828: PUSH
42829: EMPTY
42830: LIST
42831: LIST
42832: PUSH
42833: LD_INT 5
42835: NEG
42836: PUSH
42837: LD_INT 5
42839: NEG
42840: PUSH
42841: EMPTY
42842: LIST
42843: LIST
42844: PUSH
42845: LD_INT 5
42847: NEG
42848: PUSH
42849: LD_INT 6
42851: NEG
42852: PUSH
42853: EMPTY
42854: LIST
42855: LIST
42856: PUSH
42857: LD_INT 6
42859: NEG
42860: PUSH
42861: LD_INT 5
42863: NEG
42864: PUSH
42865: EMPTY
42866: LIST
42867: LIST
42868: PUSH
42869: LD_INT 6
42871: NEG
42872: PUSH
42873: LD_INT 6
42875: NEG
42876: PUSH
42877: EMPTY
42878: LIST
42879: LIST
42880: PUSH
42881: EMPTY
42882: LIST
42883: LIST
42884: LIST
42885: LIST
42886: LIST
42887: LIST
42888: LIST
42889: LIST
42890: LIST
42891: LIST
42892: LIST
42893: LIST
42894: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
42895: LD_ADDR_VAR 0 41
42899: PUSH
42900: LD_INT 0
42902: PUSH
42903: LD_INT 2
42905: NEG
42906: PUSH
42907: EMPTY
42908: LIST
42909: LIST
42910: PUSH
42911: LD_INT 1
42913: NEG
42914: PUSH
42915: LD_INT 3
42917: NEG
42918: PUSH
42919: EMPTY
42920: LIST
42921: LIST
42922: PUSH
42923: LD_INT 1
42925: PUSH
42926: LD_INT 2
42928: NEG
42929: PUSH
42930: EMPTY
42931: LIST
42932: LIST
42933: PUSH
42934: EMPTY
42935: LIST
42936: LIST
42937: LIST
42938: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
42939: LD_ADDR_VAR 0 42
42943: PUSH
42944: LD_INT 2
42946: PUSH
42947: LD_INT 0
42949: PUSH
42950: EMPTY
42951: LIST
42952: LIST
42953: PUSH
42954: LD_INT 2
42956: PUSH
42957: LD_INT 1
42959: NEG
42960: PUSH
42961: EMPTY
42962: LIST
42963: LIST
42964: PUSH
42965: LD_INT 3
42967: PUSH
42968: LD_INT 1
42970: PUSH
42971: EMPTY
42972: LIST
42973: LIST
42974: PUSH
42975: EMPTY
42976: LIST
42977: LIST
42978: LIST
42979: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
42980: LD_ADDR_VAR 0 43
42984: PUSH
42985: LD_INT 2
42987: PUSH
42988: LD_INT 2
42990: PUSH
42991: EMPTY
42992: LIST
42993: LIST
42994: PUSH
42995: LD_INT 3
42997: PUSH
42998: LD_INT 2
43000: PUSH
43001: EMPTY
43002: LIST
43003: LIST
43004: PUSH
43005: LD_INT 2
43007: PUSH
43008: LD_INT 3
43010: PUSH
43011: EMPTY
43012: LIST
43013: LIST
43014: PUSH
43015: EMPTY
43016: LIST
43017: LIST
43018: LIST
43019: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
43020: LD_ADDR_VAR 0 44
43024: PUSH
43025: LD_INT 0
43027: PUSH
43028: LD_INT 2
43030: PUSH
43031: EMPTY
43032: LIST
43033: LIST
43034: PUSH
43035: LD_INT 1
43037: PUSH
43038: LD_INT 3
43040: PUSH
43041: EMPTY
43042: LIST
43043: LIST
43044: PUSH
43045: LD_INT 1
43047: NEG
43048: PUSH
43049: LD_INT 2
43051: PUSH
43052: EMPTY
43053: LIST
43054: LIST
43055: PUSH
43056: EMPTY
43057: LIST
43058: LIST
43059: LIST
43060: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43061: LD_ADDR_VAR 0 45
43065: PUSH
43066: LD_INT 2
43068: NEG
43069: PUSH
43070: LD_INT 0
43072: PUSH
43073: EMPTY
43074: LIST
43075: LIST
43076: PUSH
43077: LD_INT 2
43079: NEG
43080: PUSH
43081: LD_INT 1
43083: PUSH
43084: EMPTY
43085: LIST
43086: LIST
43087: PUSH
43088: LD_INT 3
43090: NEG
43091: PUSH
43092: LD_INT 1
43094: NEG
43095: PUSH
43096: EMPTY
43097: LIST
43098: LIST
43099: PUSH
43100: EMPTY
43101: LIST
43102: LIST
43103: LIST
43104: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
43105: LD_ADDR_VAR 0 46
43109: PUSH
43110: LD_INT 2
43112: NEG
43113: PUSH
43114: LD_INT 2
43116: NEG
43117: PUSH
43118: EMPTY
43119: LIST
43120: LIST
43121: PUSH
43122: LD_INT 2
43124: NEG
43125: PUSH
43126: LD_INT 3
43128: NEG
43129: PUSH
43130: EMPTY
43131: LIST
43132: LIST
43133: PUSH
43134: LD_INT 3
43136: NEG
43137: PUSH
43138: LD_INT 2
43140: NEG
43141: PUSH
43142: EMPTY
43143: LIST
43144: LIST
43145: PUSH
43146: EMPTY
43147: LIST
43148: LIST
43149: LIST
43150: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
43151: LD_ADDR_VAR 0 47
43155: PUSH
43156: LD_INT 2
43158: NEG
43159: PUSH
43160: LD_INT 3
43162: NEG
43163: PUSH
43164: EMPTY
43165: LIST
43166: LIST
43167: PUSH
43168: LD_INT 1
43170: NEG
43171: PUSH
43172: LD_INT 3
43174: NEG
43175: PUSH
43176: EMPTY
43177: LIST
43178: LIST
43179: PUSH
43180: EMPTY
43181: LIST
43182: LIST
43183: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
43184: LD_ADDR_VAR 0 48
43188: PUSH
43189: LD_INT 1
43191: PUSH
43192: LD_INT 2
43194: NEG
43195: PUSH
43196: EMPTY
43197: LIST
43198: LIST
43199: PUSH
43200: LD_INT 2
43202: PUSH
43203: LD_INT 1
43205: NEG
43206: PUSH
43207: EMPTY
43208: LIST
43209: LIST
43210: PUSH
43211: EMPTY
43212: LIST
43213: LIST
43214: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
43215: LD_ADDR_VAR 0 49
43219: PUSH
43220: LD_INT 3
43222: PUSH
43223: LD_INT 1
43225: PUSH
43226: EMPTY
43227: LIST
43228: LIST
43229: PUSH
43230: LD_INT 3
43232: PUSH
43233: LD_INT 2
43235: PUSH
43236: EMPTY
43237: LIST
43238: LIST
43239: PUSH
43240: EMPTY
43241: LIST
43242: LIST
43243: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
43244: LD_ADDR_VAR 0 50
43248: PUSH
43249: LD_INT 2
43251: PUSH
43252: LD_INT 3
43254: PUSH
43255: EMPTY
43256: LIST
43257: LIST
43258: PUSH
43259: LD_INT 1
43261: PUSH
43262: LD_INT 3
43264: PUSH
43265: EMPTY
43266: LIST
43267: LIST
43268: PUSH
43269: EMPTY
43270: LIST
43271: LIST
43272: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
43273: LD_ADDR_VAR 0 51
43277: PUSH
43278: LD_INT 1
43280: NEG
43281: PUSH
43282: LD_INT 2
43284: PUSH
43285: EMPTY
43286: LIST
43287: LIST
43288: PUSH
43289: LD_INT 2
43291: NEG
43292: PUSH
43293: LD_INT 1
43295: PUSH
43296: EMPTY
43297: LIST
43298: LIST
43299: PUSH
43300: EMPTY
43301: LIST
43302: LIST
43303: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43304: LD_ADDR_VAR 0 52
43308: PUSH
43309: LD_INT 3
43311: NEG
43312: PUSH
43313: LD_INT 1
43315: NEG
43316: PUSH
43317: EMPTY
43318: LIST
43319: LIST
43320: PUSH
43321: LD_INT 3
43323: NEG
43324: PUSH
43325: LD_INT 2
43327: NEG
43328: PUSH
43329: EMPTY
43330: LIST
43331: LIST
43332: PUSH
43333: EMPTY
43334: LIST
43335: LIST
43336: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43337: LD_ADDR_VAR 0 53
43341: PUSH
43342: LD_INT 1
43344: NEG
43345: PUSH
43346: LD_INT 3
43348: NEG
43349: PUSH
43350: EMPTY
43351: LIST
43352: LIST
43353: PUSH
43354: LD_INT 0
43356: PUSH
43357: LD_INT 3
43359: NEG
43360: PUSH
43361: EMPTY
43362: LIST
43363: LIST
43364: PUSH
43365: LD_INT 1
43367: PUSH
43368: LD_INT 2
43370: NEG
43371: PUSH
43372: EMPTY
43373: LIST
43374: LIST
43375: PUSH
43376: EMPTY
43377: LIST
43378: LIST
43379: LIST
43380: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43381: LD_ADDR_VAR 0 54
43385: PUSH
43386: LD_INT 2
43388: PUSH
43389: LD_INT 1
43391: NEG
43392: PUSH
43393: EMPTY
43394: LIST
43395: LIST
43396: PUSH
43397: LD_INT 3
43399: PUSH
43400: LD_INT 0
43402: PUSH
43403: EMPTY
43404: LIST
43405: LIST
43406: PUSH
43407: LD_INT 3
43409: PUSH
43410: LD_INT 1
43412: PUSH
43413: EMPTY
43414: LIST
43415: LIST
43416: PUSH
43417: EMPTY
43418: LIST
43419: LIST
43420: LIST
43421: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43422: LD_ADDR_VAR 0 55
43426: PUSH
43427: LD_INT 3
43429: PUSH
43430: LD_INT 2
43432: PUSH
43433: EMPTY
43434: LIST
43435: LIST
43436: PUSH
43437: LD_INT 3
43439: PUSH
43440: LD_INT 3
43442: PUSH
43443: EMPTY
43444: LIST
43445: LIST
43446: PUSH
43447: LD_INT 2
43449: PUSH
43450: LD_INT 3
43452: PUSH
43453: EMPTY
43454: LIST
43455: LIST
43456: PUSH
43457: EMPTY
43458: LIST
43459: LIST
43460: LIST
43461: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43462: LD_ADDR_VAR 0 56
43466: PUSH
43467: LD_INT 1
43469: PUSH
43470: LD_INT 3
43472: PUSH
43473: EMPTY
43474: LIST
43475: LIST
43476: PUSH
43477: LD_INT 0
43479: PUSH
43480: LD_INT 3
43482: PUSH
43483: EMPTY
43484: LIST
43485: LIST
43486: PUSH
43487: LD_INT 1
43489: NEG
43490: PUSH
43491: LD_INT 2
43493: PUSH
43494: EMPTY
43495: LIST
43496: LIST
43497: PUSH
43498: EMPTY
43499: LIST
43500: LIST
43501: LIST
43502: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43503: LD_ADDR_VAR 0 57
43507: PUSH
43508: LD_INT 2
43510: NEG
43511: PUSH
43512: LD_INT 1
43514: PUSH
43515: EMPTY
43516: LIST
43517: LIST
43518: PUSH
43519: LD_INT 3
43521: NEG
43522: PUSH
43523: LD_INT 0
43525: PUSH
43526: EMPTY
43527: LIST
43528: LIST
43529: PUSH
43530: LD_INT 3
43532: NEG
43533: PUSH
43534: LD_INT 1
43536: NEG
43537: PUSH
43538: EMPTY
43539: LIST
43540: LIST
43541: PUSH
43542: EMPTY
43543: LIST
43544: LIST
43545: LIST
43546: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43547: LD_ADDR_VAR 0 58
43551: PUSH
43552: LD_INT 2
43554: NEG
43555: PUSH
43556: LD_INT 3
43558: NEG
43559: PUSH
43560: EMPTY
43561: LIST
43562: LIST
43563: PUSH
43564: LD_INT 3
43566: NEG
43567: PUSH
43568: LD_INT 2
43570: NEG
43571: PUSH
43572: EMPTY
43573: LIST
43574: LIST
43575: PUSH
43576: LD_INT 3
43578: NEG
43579: PUSH
43580: LD_INT 3
43582: NEG
43583: PUSH
43584: EMPTY
43585: LIST
43586: LIST
43587: PUSH
43588: EMPTY
43589: LIST
43590: LIST
43591: LIST
43592: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
43593: LD_ADDR_VAR 0 59
43597: PUSH
43598: LD_INT 1
43600: NEG
43601: PUSH
43602: LD_INT 2
43604: NEG
43605: PUSH
43606: EMPTY
43607: LIST
43608: LIST
43609: PUSH
43610: LD_INT 0
43612: PUSH
43613: LD_INT 2
43615: NEG
43616: PUSH
43617: EMPTY
43618: LIST
43619: LIST
43620: PUSH
43621: LD_INT 1
43623: PUSH
43624: LD_INT 1
43626: NEG
43627: PUSH
43628: EMPTY
43629: LIST
43630: LIST
43631: PUSH
43632: EMPTY
43633: LIST
43634: LIST
43635: LIST
43636: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
43637: LD_ADDR_VAR 0 60
43641: PUSH
43642: LD_INT 1
43644: PUSH
43645: LD_INT 1
43647: NEG
43648: PUSH
43649: EMPTY
43650: LIST
43651: LIST
43652: PUSH
43653: LD_INT 2
43655: PUSH
43656: LD_INT 0
43658: PUSH
43659: EMPTY
43660: LIST
43661: LIST
43662: PUSH
43663: LD_INT 2
43665: PUSH
43666: LD_INT 1
43668: PUSH
43669: EMPTY
43670: LIST
43671: LIST
43672: PUSH
43673: EMPTY
43674: LIST
43675: LIST
43676: LIST
43677: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
43678: LD_ADDR_VAR 0 61
43682: PUSH
43683: LD_INT 2
43685: PUSH
43686: LD_INT 1
43688: PUSH
43689: EMPTY
43690: LIST
43691: LIST
43692: PUSH
43693: LD_INT 2
43695: PUSH
43696: LD_INT 2
43698: PUSH
43699: EMPTY
43700: LIST
43701: LIST
43702: PUSH
43703: LD_INT 1
43705: PUSH
43706: LD_INT 2
43708: PUSH
43709: EMPTY
43710: LIST
43711: LIST
43712: PUSH
43713: EMPTY
43714: LIST
43715: LIST
43716: LIST
43717: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
43718: LD_ADDR_VAR 0 62
43722: PUSH
43723: LD_INT 1
43725: PUSH
43726: LD_INT 2
43728: PUSH
43729: EMPTY
43730: LIST
43731: LIST
43732: PUSH
43733: LD_INT 0
43735: PUSH
43736: LD_INT 2
43738: PUSH
43739: EMPTY
43740: LIST
43741: LIST
43742: PUSH
43743: LD_INT 1
43745: NEG
43746: PUSH
43747: LD_INT 1
43749: PUSH
43750: EMPTY
43751: LIST
43752: LIST
43753: PUSH
43754: EMPTY
43755: LIST
43756: LIST
43757: LIST
43758: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
43759: LD_ADDR_VAR 0 63
43763: PUSH
43764: LD_INT 1
43766: NEG
43767: PUSH
43768: LD_INT 1
43770: PUSH
43771: EMPTY
43772: LIST
43773: LIST
43774: PUSH
43775: LD_INT 2
43777: NEG
43778: PUSH
43779: LD_INT 0
43781: PUSH
43782: EMPTY
43783: LIST
43784: LIST
43785: PUSH
43786: LD_INT 2
43788: NEG
43789: PUSH
43790: LD_INT 1
43792: NEG
43793: PUSH
43794: EMPTY
43795: LIST
43796: LIST
43797: PUSH
43798: EMPTY
43799: LIST
43800: LIST
43801: LIST
43802: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43803: LD_ADDR_VAR 0 64
43807: PUSH
43808: LD_INT 1
43810: NEG
43811: PUSH
43812: LD_INT 2
43814: NEG
43815: PUSH
43816: EMPTY
43817: LIST
43818: LIST
43819: PUSH
43820: LD_INT 2
43822: NEG
43823: PUSH
43824: LD_INT 1
43826: NEG
43827: PUSH
43828: EMPTY
43829: LIST
43830: LIST
43831: PUSH
43832: LD_INT 2
43834: NEG
43835: PUSH
43836: LD_INT 2
43838: NEG
43839: PUSH
43840: EMPTY
43841: LIST
43842: LIST
43843: PUSH
43844: EMPTY
43845: LIST
43846: LIST
43847: LIST
43848: ST_TO_ADDR
// end ; 2 :
43849: GO 47115
43851: LD_INT 2
43853: DOUBLE
43854: EQUAL
43855: IFTRUE 43859
43857: GO 47114
43859: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
43860: LD_ADDR_VAR 0 29
43864: PUSH
43865: LD_INT 4
43867: PUSH
43868: LD_INT 0
43870: PUSH
43871: EMPTY
43872: LIST
43873: LIST
43874: PUSH
43875: LD_INT 4
43877: PUSH
43878: LD_INT 1
43880: NEG
43881: PUSH
43882: EMPTY
43883: LIST
43884: LIST
43885: PUSH
43886: LD_INT 5
43888: PUSH
43889: LD_INT 0
43891: PUSH
43892: EMPTY
43893: LIST
43894: LIST
43895: PUSH
43896: LD_INT 5
43898: PUSH
43899: LD_INT 1
43901: PUSH
43902: EMPTY
43903: LIST
43904: LIST
43905: PUSH
43906: LD_INT 4
43908: PUSH
43909: LD_INT 1
43911: PUSH
43912: EMPTY
43913: LIST
43914: LIST
43915: PUSH
43916: LD_INT 3
43918: PUSH
43919: LD_INT 0
43921: PUSH
43922: EMPTY
43923: LIST
43924: LIST
43925: PUSH
43926: LD_INT 3
43928: PUSH
43929: LD_INT 1
43931: NEG
43932: PUSH
43933: EMPTY
43934: LIST
43935: LIST
43936: PUSH
43937: LD_INT 3
43939: PUSH
43940: LD_INT 2
43942: NEG
43943: PUSH
43944: EMPTY
43945: LIST
43946: LIST
43947: PUSH
43948: LD_INT 5
43950: PUSH
43951: LD_INT 2
43953: PUSH
43954: EMPTY
43955: LIST
43956: LIST
43957: PUSH
43958: LD_INT 3
43960: PUSH
43961: LD_INT 3
43963: PUSH
43964: EMPTY
43965: LIST
43966: LIST
43967: PUSH
43968: LD_INT 3
43970: PUSH
43971: LD_INT 2
43973: PUSH
43974: EMPTY
43975: LIST
43976: LIST
43977: PUSH
43978: LD_INT 4
43980: PUSH
43981: LD_INT 3
43983: PUSH
43984: EMPTY
43985: LIST
43986: LIST
43987: PUSH
43988: LD_INT 4
43990: PUSH
43991: LD_INT 4
43993: PUSH
43994: EMPTY
43995: LIST
43996: LIST
43997: PUSH
43998: LD_INT 3
44000: PUSH
44001: LD_INT 4
44003: PUSH
44004: EMPTY
44005: LIST
44006: LIST
44007: PUSH
44008: LD_INT 2
44010: PUSH
44011: LD_INT 3
44013: PUSH
44014: EMPTY
44015: LIST
44016: LIST
44017: PUSH
44018: LD_INT 2
44020: PUSH
44021: LD_INT 2
44023: PUSH
44024: EMPTY
44025: LIST
44026: LIST
44027: PUSH
44028: LD_INT 4
44030: PUSH
44031: LD_INT 2
44033: PUSH
44034: EMPTY
44035: LIST
44036: LIST
44037: PUSH
44038: LD_INT 2
44040: PUSH
44041: LD_INT 4
44043: PUSH
44044: EMPTY
44045: LIST
44046: LIST
44047: PUSH
44048: LD_INT 0
44050: PUSH
44051: LD_INT 4
44053: PUSH
44054: EMPTY
44055: LIST
44056: LIST
44057: PUSH
44058: LD_INT 0
44060: PUSH
44061: LD_INT 3
44063: PUSH
44064: EMPTY
44065: LIST
44066: LIST
44067: PUSH
44068: LD_INT 1
44070: PUSH
44071: LD_INT 4
44073: PUSH
44074: EMPTY
44075: LIST
44076: LIST
44077: PUSH
44078: LD_INT 1
44080: PUSH
44081: LD_INT 5
44083: PUSH
44084: EMPTY
44085: LIST
44086: LIST
44087: PUSH
44088: LD_INT 0
44090: PUSH
44091: LD_INT 5
44093: PUSH
44094: EMPTY
44095: LIST
44096: LIST
44097: PUSH
44098: LD_INT 1
44100: NEG
44101: PUSH
44102: LD_INT 4
44104: PUSH
44105: EMPTY
44106: LIST
44107: LIST
44108: PUSH
44109: LD_INT 1
44111: NEG
44112: PUSH
44113: LD_INT 3
44115: PUSH
44116: EMPTY
44117: LIST
44118: LIST
44119: PUSH
44120: LD_INT 2
44122: PUSH
44123: LD_INT 5
44125: PUSH
44126: EMPTY
44127: LIST
44128: LIST
44129: PUSH
44130: LD_INT 2
44132: NEG
44133: PUSH
44134: LD_INT 3
44136: PUSH
44137: EMPTY
44138: LIST
44139: LIST
44140: PUSH
44141: LD_INT 3
44143: NEG
44144: PUSH
44145: LD_INT 0
44147: PUSH
44148: EMPTY
44149: LIST
44150: LIST
44151: PUSH
44152: LD_INT 3
44154: NEG
44155: PUSH
44156: LD_INT 1
44158: NEG
44159: PUSH
44160: EMPTY
44161: LIST
44162: LIST
44163: PUSH
44164: LD_INT 2
44166: NEG
44167: PUSH
44168: LD_INT 0
44170: PUSH
44171: EMPTY
44172: LIST
44173: LIST
44174: PUSH
44175: LD_INT 2
44177: NEG
44178: PUSH
44179: LD_INT 1
44181: PUSH
44182: EMPTY
44183: LIST
44184: LIST
44185: PUSH
44186: LD_INT 3
44188: NEG
44189: PUSH
44190: LD_INT 1
44192: PUSH
44193: EMPTY
44194: LIST
44195: LIST
44196: PUSH
44197: LD_INT 4
44199: NEG
44200: PUSH
44201: LD_INT 0
44203: PUSH
44204: EMPTY
44205: LIST
44206: LIST
44207: PUSH
44208: LD_INT 4
44210: NEG
44211: PUSH
44212: LD_INT 1
44214: NEG
44215: PUSH
44216: EMPTY
44217: LIST
44218: LIST
44219: PUSH
44220: LD_INT 4
44222: NEG
44223: PUSH
44224: LD_INT 2
44226: NEG
44227: PUSH
44228: EMPTY
44229: LIST
44230: LIST
44231: PUSH
44232: LD_INT 2
44234: NEG
44235: PUSH
44236: LD_INT 2
44238: PUSH
44239: EMPTY
44240: LIST
44241: LIST
44242: PUSH
44243: LD_INT 4
44245: NEG
44246: PUSH
44247: LD_INT 4
44249: NEG
44250: PUSH
44251: EMPTY
44252: LIST
44253: LIST
44254: PUSH
44255: LD_INT 4
44257: NEG
44258: PUSH
44259: LD_INT 5
44261: NEG
44262: PUSH
44263: EMPTY
44264: LIST
44265: LIST
44266: PUSH
44267: LD_INT 3
44269: NEG
44270: PUSH
44271: LD_INT 4
44273: NEG
44274: PUSH
44275: EMPTY
44276: LIST
44277: LIST
44278: PUSH
44279: LD_INT 3
44281: NEG
44282: PUSH
44283: LD_INT 3
44285: NEG
44286: PUSH
44287: EMPTY
44288: LIST
44289: LIST
44290: PUSH
44291: LD_INT 4
44293: NEG
44294: PUSH
44295: LD_INT 3
44297: NEG
44298: PUSH
44299: EMPTY
44300: LIST
44301: LIST
44302: PUSH
44303: LD_INT 5
44305: NEG
44306: PUSH
44307: LD_INT 4
44309: NEG
44310: PUSH
44311: EMPTY
44312: LIST
44313: LIST
44314: PUSH
44315: LD_INT 5
44317: NEG
44318: PUSH
44319: LD_INT 5
44321: NEG
44322: PUSH
44323: EMPTY
44324: LIST
44325: LIST
44326: PUSH
44327: LD_INT 3
44329: NEG
44330: PUSH
44331: LD_INT 5
44333: NEG
44334: PUSH
44335: EMPTY
44336: LIST
44337: LIST
44338: PUSH
44339: LD_INT 5
44341: NEG
44342: PUSH
44343: LD_INT 3
44345: NEG
44346: PUSH
44347: EMPTY
44348: LIST
44349: LIST
44350: PUSH
44351: EMPTY
44352: LIST
44353: LIST
44354: LIST
44355: LIST
44356: LIST
44357: LIST
44358: LIST
44359: LIST
44360: LIST
44361: LIST
44362: LIST
44363: LIST
44364: LIST
44365: LIST
44366: LIST
44367: LIST
44368: LIST
44369: LIST
44370: LIST
44371: LIST
44372: LIST
44373: LIST
44374: LIST
44375: LIST
44376: LIST
44377: LIST
44378: LIST
44379: LIST
44380: LIST
44381: LIST
44382: LIST
44383: LIST
44384: LIST
44385: LIST
44386: LIST
44387: LIST
44388: LIST
44389: LIST
44390: LIST
44391: LIST
44392: LIST
44393: LIST
44394: LIST
44395: LIST
44396: LIST
44397: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
44398: LD_ADDR_VAR 0 30
44402: PUSH
44403: LD_INT 4
44405: PUSH
44406: LD_INT 4
44408: PUSH
44409: EMPTY
44410: LIST
44411: LIST
44412: PUSH
44413: LD_INT 4
44415: PUSH
44416: LD_INT 3
44418: PUSH
44419: EMPTY
44420: LIST
44421: LIST
44422: PUSH
44423: LD_INT 5
44425: PUSH
44426: LD_INT 4
44428: PUSH
44429: EMPTY
44430: LIST
44431: LIST
44432: PUSH
44433: LD_INT 5
44435: PUSH
44436: LD_INT 5
44438: PUSH
44439: EMPTY
44440: LIST
44441: LIST
44442: PUSH
44443: LD_INT 4
44445: PUSH
44446: LD_INT 5
44448: PUSH
44449: EMPTY
44450: LIST
44451: LIST
44452: PUSH
44453: LD_INT 3
44455: PUSH
44456: LD_INT 4
44458: PUSH
44459: EMPTY
44460: LIST
44461: LIST
44462: PUSH
44463: LD_INT 3
44465: PUSH
44466: LD_INT 3
44468: PUSH
44469: EMPTY
44470: LIST
44471: LIST
44472: PUSH
44473: LD_INT 5
44475: PUSH
44476: LD_INT 3
44478: PUSH
44479: EMPTY
44480: LIST
44481: LIST
44482: PUSH
44483: LD_INT 3
44485: PUSH
44486: LD_INT 5
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: PUSH
44493: LD_INT 0
44495: PUSH
44496: LD_INT 3
44498: PUSH
44499: EMPTY
44500: LIST
44501: LIST
44502: PUSH
44503: LD_INT 0
44505: PUSH
44506: LD_INT 2
44508: PUSH
44509: EMPTY
44510: LIST
44511: LIST
44512: PUSH
44513: LD_INT 1
44515: PUSH
44516: LD_INT 3
44518: PUSH
44519: EMPTY
44520: LIST
44521: LIST
44522: PUSH
44523: LD_INT 1
44525: PUSH
44526: LD_INT 4
44528: PUSH
44529: EMPTY
44530: LIST
44531: LIST
44532: PUSH
44533: LD_INT 0
44535: PUSH
44536: LD_INT 4
44538: PUSH
44539: EMPTY
44540: LIST
44541: LIST
44542: PUSH
44543: LD_INT 1
44545: NEG
44546: PUSH
44547: LD_INT 3
44549: PUSH
44550: EMPTY
44551: LIST
44552: LIST
44553: PUSH
44554: LD_INT 1
44556: NEG
44557: PUSH
44558: LD_INT 2
44560: PUSH
44561: EMPTY
44562: LIST
44563: LIST
44564: PUSH
44565: LD_INT 2
44567: PUSH
44568: LD_INT 4
44570: PUSH
44571: EMPTY
44572: LIST
44573: LIST
44574: PUSH
44575: LD_INT 2
44577: NEG
44578: PUSH
44579: LD_INT 2
44581: PUSH
44582: EMPTY
44583: LIST
44584: LIST
44585: PUSH
44586: LD_INT 4
44588: NEG
44589: PUSH
44590: LD_INT 0
44592: PUSH
44593: EMPTY
44594: LIST
44595: LIST
44596: PUSH
44597: LD_INT 4
44599: NEG
44600: PUSH
44601: LD_INT 1
44603: NEG
44604: PUSH
44605: EMPTY
44606: LIST
44607: LIST
44608: PUSH
44609: LD_INT 3
44611: NEG
44612: PUSH
44613: LD_INT 0
44615: PUSH
44616: EMPTY
44617: LIST
44618: LIST
44619: PUSH
44620: LD_INT 3
44622: NEG
44623: PUSH
44624: LD_INT 1
44626: PUSH
44627: EMPTY
44628: LIST
44629: LIST
44630: PUSH
44631: LD_INT 4
44633: NEG
44634: PUSH
44635: LD_INT 1
44637: PUSH
44638: EMPTY
44639: LIST
44640: LIST
44641: PUSH
44642: LD_INT 5
44644: NEG
44645: PUSH
44646: LD_INT 0
44648: PUSH
44649: EMPTY
44650: LIST
44651: LIST
44652: PUSH
44653: LD_INT 5
44655: NEG
44656: PUSH
44657: LD_INT 1
44659: NEG
44660: PUSH
44661: EMPTY
44662: LIST
44663: LIST
44664: PUSH
44665: LD_INT 5
44667: NEG
44668: PUSH
44669: LD_INT 2
44671: NEG
44672: PUSH
44673: EMPTY
44674: LIST
44675: LIST
44676: PUSH
44677: LD_INT 3
44679: NEG
44680: PUSH
44681: LD_INT 2
44683: PUSH
44684: EMPTY
44685: LIST
44686: LIST
44687: PUSH
44688: LD_INT 3
44690: NEG
44691: PUSH
44692: LD_INT 3
44694: NEG
44695: PUSH
44696: EMPTY
44697: LIST
44698: LIST
44699: PUSH
44700: LD_INT 3
44702: NEG
44703: PUSH
44704: LD_INT 4
44706: NEG
44707: PUSH
44708: EMPTY
44709: LIST
44710: LIST
44711: PUSH
44712: LD_INT 2
44714: NEG
44715: PUSH
44716: LD_INT 3
44718: NEG
44719: PUSH
44720: EMPTY
44721: LIST
44722: LIST
44723: PUSH
44724: LD_INT 2
44726: NEG
44727: PUSH
44728: LD_INT 2
44730: NEG
44731: PUSH
44732: EMPTY
44733: LIST
44734: LIST
44735: PUSH
44736: LD_INT 3
44738: NEG
44739: PUSH
44740: LD_INT 2
44742: NEG
44743: PUSH
44744: EMPTY
44745: LIST
44746: LIST
44747: PUSH
44748: LD_INT 4
44750: NEG
44751: PUSH
44752: LD_INT 3
44754: NEG
44755: PUSH
44756: EMPTY
44757: LIST
44758: LIST
44759: PUSH
44760: LD_INT 4
44762: NEG
44763: PUSH
44764: LD_INT 4
44766: NEG
44767: PUSH
44768: EMPTY
44769: LIST
44770: LIST
44771: PUSH
44772: LD_INT 2
44774: NEG
44775: PUSH
44776: LD_INT 4
44778: NEG
44779: PUSH
44780: EMPTY
44781: LIST
44782: LIST
44783: PUSH
44784: LD_INT 4
44786: NEG
44787: PUSH
44788: LD_INT 2
44790: NEG
44791: PUSH
44792: EMPTY
44793: LIST
44794: LIST
44795: PUSH
44796: LD_INT 0
44798: PUSH
44799: LD_INT 4
44801: NEG
44802: PUSH
44803: EMPTY
44804: LIST
44805: LIST
44806: PUSH
44807: LD_INT 0
44809: PUSH
44810: LD_INT 5
44812: NEG
44813: PUSH
44814: EMPTY
44815: LIST
44816: LIST
44817: PUSH
44818: LD_INT 1
44820: PUSH
44821: LD_INT 4
44823: NEG
44824: PUSH
44825: EMPTY
44826: LIST
44827: LIST
44828: PUSH
44829: LD_INT 1
44831: PUSH
44832: LD_INT 3
44834: NEG
44835: PUSH
44836: EMPTY
44837: LIST
44838: LIST
44839: PUSH
44840: LD_INT 0
44842: PUSH
44843: LD_INT 3
44845: NEG
44846: PUSH
44847: EMPTY
44848: LIST
44849: LIST
44850: PUSH
44851: LD_INT 1
44853: NEG
44854: PUSH
44855: LD_INT 4
44857: NEG
44858: PUSH
44859: EMPTY
44860: LIST
44861: LIST
44862: PUSH
44863: LD_INT 1
44865: NEG
44866: PUSH
44867: LD_INT 5
44869: NEG
44870: PUSH
44871: EMPTY
44872: LIST
44873: LIST
44874: PUSH
44875: LD_INT 2
44877: PUSH
44878: LD_INT 3
44880: NEG
44881: PUSH
44882: EMPTY
44883: LIST
44884: LIST
44885: PUSH
44886: LD_INT 2
44888: NEG
44889: PUSH
44890: LD_INT 5
44892: NEG
44893: PUSH
44894: EMPTY
44895: LIST
44896: LIST
44897: PUSH
44898: EMPTY
44899: LIST
44900: LIST
44901: LIST
44902: LIST
44903: LIST
44904: LIST
44905: LIST
44906: LIST
44907: LIST
44908: LIST
44909: LIST
44910: LIST
44911: LIST
44912: LIST
44913: LIST
44914: LIST
44915: LIST
44916: LIST
44917: LIST
44918: LIST
44919: LIST
44920: LIST
44921: LIST
44922: LIST
44923: LIST
44924: LIST
44925: LIST
44926: LIST
44927: LIST
44928: LIST
44929: LIST
44930: LIST
44931: LIST
44932: LIST
44933: LIST
44934: LIST
44935: LIST
44936: LIST
44937: LIST
44938: LIST
44939: LIST
44940: LIST
44941: LIST
44942: LIST
44943: LIST
44944: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
44945: LD_ADDR_VAR 0 31
44949: PUSH
44950: LD_INT 0
44952: PUSH
44953: LD_INT 4
44955: PUSH
44956: EMPTY
44957: LIST
44958: LIST
44959: PUSH
44960: LD_INT 0
44962: PUSH
44963: LD_INT 3
44965: PUSH
44966: EMPTY
44967: LIST
44968: LIST
44969: PUSH
44970: LD_INT 1
44972: PUSH
44973: LD_INT 4
44975: PUSH
44976: EMPTY
44977: LIST
44978: LIST
44979: PUSH
44980: LD_INT 1
44982: PUSH
44983: LD_INT 5
44985: PUSH
44986: EMPTY
44987: LIST
44988: LIST
44989: PUSH
44990: LD_INT 0
44992: PUSH
44993: LD_INT 5
44995: PUSH
44996: EMPTY
44997: LIST
44998: LIST
44999: PUSH
45000: LD_INT 1
45002: NEG
45003: PUSH
45004: LD_INT 4
45006: PUSH
45007: EMPTY
45008: LIST
45009: LIST
45010: PUSH
45011: LD_INT 1
45013: NEG
45014: PUSH
45015: LD_INT 3
45017: PUSH
45018: EMPTY
45019: LIST
45020: LIST
45021: PUSH
45022: LD_INT 2
45024: PUSH
45025: LD_INT 5
45027: PUSH
45028: EMPTY
45029: LIST
45030: LIST
45031: PUSH
45032: LD_INT 2
45034: NEG
45035: PUSH
45036: LD_INT 3
45038: PUSH
45039: EMPTY
45040: LIST
45041: LIST
45042: PUSH
45043: LD_INT 3
45045: NEG
45046: PUSH
45047: LD_INT 0
45049: PUSH
45050: EMPTY
45051: LIST
45052: LIST
45053: PUSH
45054: LD_INT 3
45056: NEG
45057: PUSH
45058: LD_INT 1
45060: NEG
45061: PUSH
45062: EMPTY
45063: LIST
45064: LIST
45065: PUSH
45066: LD_INT 2
45068: NEG
45069: PUSH
45070: LD_INT 0
45072: PUSH
45073: EMPTY
45074: LIST
45075: LIST
45076: PUSH
45077: LD_INT 2
45079: NEG
45080: PUSH
45081: LD_INT 1
45083: PUSH
45084: EMPTY
45085: LIST
45086: LIST
45087: PUSH
45088: LD_INT 3
45090: NEG
45091: PUSH
45092: LD_INT 1
45094: PUSH
45095: EMPTY
45096: LIST
45097: LIST
45098: PUSH
45099: LD_INT 4
45101: NEG
45102: PUSH
45103: LD_INT 0
45105: PUSH
45106: EMPTY
45107: LIST
45108: LIST
45109: PUSH
45110: LD_INT 4
45112: NEG
45113: PUSH
45114: LD_INT 1
45116: NEG
45117: PUSH
45118: EMPTY
45119: LIST
45120: LIST
45121: PUSH
45122: LD_INT 4
45124: NEG
45125: PUSH
45126: LD_INT 2
45128: NEG
45129: PUSH
45130: EMPTY
45131: LIST
45132: LIST
45133: PUSH
45134: LD_INT 2
45136: NEG
45137: PUSH
45138: LD_INT 2
45140: PUSH
45141: EMPTY
45142: LIST
45143: LIST
45144: PUSH
45145: LD_INT 4
45147: NEG
45148: PUSH
45149: LD_INT 4
45151: NEG
45152: PUSH
45153: EMPTY
45154: LIST
45155: LIST
45156: PUSH
45157: LD_INT 4
45159: NEG
45160: PUSH
45161: LD_INT 5
45163: NEG
45164: PUSH
45165: EMPTY
45166: LIST
45167: LIST
45168: PUSH
45169: LD_INT 3
45171: NEG
45172: PUSH
45173: LD_INT 4
45175: NEG
45176: PUSH
45177: EMPTY
45178: LIST
45179: LIST
45180: PUSH
45181: LD_INT 3
45183: NEG
45184: PUSH
45185: LD_INT 3
45187: NEG
45188: PUSH
45189: EMPTY
45190: LIST
45191: LIST
45192: PUSH
45193: LD_INT 4
45195: NEG
45196: PUSH
45197: LD_INT 3
45199: NEG
45200: PUSH
45201: EMPTY
45202: LIST
45203: LIST
45204: PUSH
45205: LD_INT 5
45207: NEG
45208: PUSH
45209: LD_INT 4
45211: NEG
45212: PUSH
45213: EMPTY
45214: LIST
45215: LIST
45216: PUSH
45217: LD_INT 5
45219: NEG
45220: PUSH
45221: LD_INT 5
45223: NEG
45224: PUSH
45225: EMPTY
45226: LIST
45227: LIST
45228: PUSH
45229: LD_INT 3
45231: NEG
45232: PUSH
45233: LD_INT 5
45235: NEG
45236: PUSH
45237: EMPTY
45238: LIST
45239: LIST
45240: PUSH
45241: LD_INT 5
45243: NEG
45244: PUSH
45245: LD_INT 3
45247: NEG
45248: PUSH
45249: EMPTY
45250: LIST
45251: LIST
45252: PUSH
45253: LD_INT 0
45255: PUSH
45256: LD_INT 3
45258: NEG
45259: PUSH
45260: EMPTY
45261: LIST
45262: LIST
45263: PUSH
45264: LD_INT 0
45266: PUSH
45267: LD_INT 4
45269: NEG
45270: PUSH
45271: EMPTY
45272: LIST
45273: LIST
45274: PUSH
45275: LD_INT 1
45277: PUSH
45278: LD_INT 3
45280: NEG
45281: PUSH
45282: EMPTY
45283: LIST
45284: LIST
45285: PUSH
45286: LD_INT 1
45288: PUSH
45289: LD_INT 2
45291: NEG
45292: PUSH
45293: EMPTY
45294: LIST
45295: LIST
45296: PUSH
45297: LD_INT 0
45299: PUSH
45300: LD_INT 2
45302: NEG
45303: PUSH
45304: EMPTY
45305: LIST
45306: LIST
45307: PUSH
45308: LD_INT 1
45310: NEG
45311: PUSH
45312: LD_INT 3
45314: NEG
45315: PUSH
45316: EMPTY
45317: LIST
45318: LIST
45319: PUSH
45320: LD_INT 1
45322: NEG
45323: PUSH
45324: LD_INT 4
45326: NEG
45327: PUSH
45328: EMPTY
45329: LIST
45330: LIST
45331: PUSH
45332: LD_INT 2
45334: PUSH
45335: LD_INT 2
45337: NEG
45338: PUSH
45339: EMPTY
45340: LIST
45341: LIST
45342: PUSH
45343: LD_INT 2
45345: NEG
45346: PUSH
45347: LD_INT 4
45349: NEG
45350: PUSH
45351: EMPTY
45352: LIST
45353: LIST
45354: PUSH
45355: LD_INT 4
45357: PUSH
45358: LD_INT 0
45360: PUSH
45361: EMPTY
45362: LIST
45363: LIST
45364: PUSH
45365: LD_INT 4
45367: PUSH
45368: LD_INT 1
45370: NEG
45371: PUSH
45372: EMPTY
45373: LIST
45374: LIST
45375: PUSH
45376: LD_INT 5
45378: PUSH
45379: LD_INT 0
45381: PUSH
45382: EMPTY
45383: LIST
45384: LIST
45385: PUSH
45386: LD_INT 5
45388: PUSH
45389: LD_INT 1
45391: PUSH
45392: EMPTY
45393: LIST
45394: LIST
45395: PUSH
45396: LD_INT 4
45398: PUSH
45399: LD_INT 1
45401: PUSH
45402: EMPTY
45403: LIST
45404: LIST
45405: PUSH
45406: LD_INT 3
45408: PUSH
45409: LD_INT 0
45411: PUSH
45412: EMPTY
45413: LIST
45414: LIST
45415: PUSH
45416: LD_INT 3
45418: PUSH
45419: LD_INT 1
45421: NEG
45422: PUSH
45423: EMPTY
45424: LIST
45425: LIST
45426: PUSH
45427: LD_INT 3
45429: PUSH
45430: LD_INT 2
45432: NEG
45433: PUSH
45434: EMPTY
45435: LIST
45436: LIST
45437: PUSH
45438: LD_INT 5
45440: PUSH
45441: LD_INT 2
45443: PUSH
45444: EMPTY
45445: LIST
45446: LIST
45447: PUSH
45448: EMPTY
45449: LIST
45450: LIST
45451: LIST
45452: LIST
45453: LIST
45454: LIST
45455: LIST
45456: LIST
45457: LIST
45458: LIST
45459: LIST
45460: LIST
45461: LIST
45462: LIST
45463: LIST
45464: LIST
45465: LIST
45466: LIST
45467: LIST
45468: LIST
45469: LIST
45470: LIST
45471: LIST
45472: LIST
45473: LIST
45474: LIST
45475: LIST
45476: LIST
45477: LIST
45478: LIST
45479: LIST
45480: LIST
45481: LIST
45482: LIST
45483: LIST
45484: LIST
45485: LIST
45486: LIST
45487: LIST
45488: LIST
45489: LIST
45490: LIST
45491: LIST
45492: LIST
45493: LIST
45494: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
45495: LD_ADDR_VAR 0 32
45499: PUSH
45500: LD_INT 4
45502: NEG
45503: PUSH
45504: LD_INT 0
45506: PUSH
45507: EMPTY
45508: LIST
45509: LIST
45510: PUSH
45511: LD_INT 4
45513: NEG
45514: PUSH
45515: LD_INT 1
45517: NEG
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: PUSH
45523: LD_INT 3
45525: NEG
45526: PUSH
45527: LD_INT 0
45529: PUSH
45530: EMPTY
45531: LIST
45532: LIST
45533: PUSH
45534: LD_INT 3
45536: NEG
45537: PUSH
45538: LD_INT 1
45540: PUSH
45541: EMPTY
45542: LIST
45543: LIST
45544: PUSH
45545: LD_INT 4
45547: NEG
45548: PUSH
45549: LD_INT 1
45551: PUSH
45552: EMPTY
45553: LIST
45554: LIST
45555: PUSH
45556: LD_INT 5
45558: NEG
45559: PUSH
45560: LD_INT 0
45562: PUSH
45563: EMPTY
45564: LIST
45565: LIST
45566: PUSH
45567: LD_INT 5
45569: NEG
45570: PUSH
45571: LD_INT 1
45573: NEG
45574: PUSH
45575: EMPTY
45576: LIST
45577: LIST
45578: PUSH
45579: LD_INT 5
45581: NEG
45582: PUSH
45583: LD_INT 2
45585: NEG
45586: PUSH
45587: EMPTY
45588: LIST
45589: LIST
45590: PUSH
45591: LD_INT 3
45593: NEG
45594: PUSH
45595: LD_INT 2
45597: PUSH
45598: EMPTY
45599: LIST
45600: LIST
45601: PUSH
45602: LD_INT 3
45604: NEG
45605: PUSH
45606: LD_INT 3
45608: NEG
45609: PUSH
45610: EMPTY
45611: LIST
45612: LIST
45613: PUSH
45614: LD_INT 3
45616: NEG
45617: PUSH
45618: LD_INT 4
45620: NEG
45621: PUSH
45622: EMPTY
45623: LIST
45624: LIST
45625: PUSH
45626: LD_INT 2
45628: NEG
45629: PUSH
45630: LD_INT 3
45632: NEG
45633: PUSH
45634: EMPTY
45635: LIST
45636: LIST
45637: PUSH
45638: LD_INT 2
45640: NEG
45641: PUSH
45642: LD_INT 2
45644: NEG
45645: PUSH
45646: EMPTY
45647: LIST
45648: LIST
45649: PUSH
45650: LD_INT 3
45652: NEG
45653: PUSH
45654: LD_INT 2
45656: NEG
45657: PUSH
45658: EMPTY
45659: LIST
45660: LIST
45661: PUSH
45662: LD_INT 4
45664: NEG
45665: PUSH
45666: LD_INT 3
45668: NEG
45669: PUSH
45670: EMPTY
45671: LIST
45672: LIST
45673: PUSH
45674: LD_INT 4
45676: NEG
45677: PUSH
45678: LD_INT 4
45680: NEG
45681: PUSH
45682: EMPTY
45683: LIST
45684: LIST
45685: PUSH
45686: LD_INT 2
45688: NEG
45689: PUSH
45690: LD_INT 4
45692: NEG
45693: PUSH
45694: EMPTY
45695: LIST
45696: LIST
45697: PUSH
45698: LD_INT 4
45700: NEG
45701: PUSH
45702: LD_INT 2
45704: NEG
45705: PUSH
45706: EMPTY
45707: LIST
45708: LIST
45709: PUSH
45710: LD_INT 0
45712: PUSH
45713: LD_INT 4
45715: NEG
45716: PUSH
45717: EMPTY
45718: LIST
45719: LIST
45720: PUSH
45721: LD_INT 0
45723: PUSH
45724: LD_INT 5
45726: NEG
45727: PUSH
45728: EMPTY
45729: LIST
45730: LIST
45731: PUSH
45732: LD_INT 1
45734: PUSH
45735: LD_INT 4
45737: NEG
45738: PUSH
45739: EMPTY
45740: LIST
45741: LIST
45742: PUSH
45743: LD_INT 1
45745: PUSH
45746: LD_INT 3
45748: NEG
45749: PUSH
45750: EMPTY
45751: LIST
45752: LIST
45753: PUSH
45754: LD_INT 0
45756: PUSH
45757: LD_INT 3
45759: NEG
45760: PUSH
45761: EMPTY
45762: LIST
45763: LIST
45764: PUSH
45765: LD_INT 1
45767: NEG
45768: PUSH
45769: LD_INT 4
45771: NEG
45772: PUSH
45773: EMPTY
45774: LIST
45775: LIST
45776: PUSH
45777: LD_INT 1
45779: NEG
45780: PUSH
45781: LD_INT 5
45783: NEG
45784: PUSH
45785: EMPTY
45786: LIST
45787: LIST
45788: PUSH
45789: LD_INT 2
45791: PUSH
45792: LD_INT 3
45794: NEG
45795: PUSH
45796: EMPTY
45797: LIST
45798: LIST
45799: PUSH
45800: LD_INT 2
45802: NEG
45803: PUSH
45804: LD_INT 5
45806: NEG
45807: PUSH
45808: EMPTY
45809: LIST
45810: LIST
45811: PUSH
45812: LD_INT 3
45814: PUSH
45815: LD_INT 0
45817: PUSH
45818: EMPTY
45819: LIST
45820: LIST
45821: PUSH
45822: LD_INT 3
45824: PUSH
45825: LD_INT 1
45827: NEG
45828: PUSH
45829: EMPTY
45830: LIST
45831: LIST
45832: PUSH
45833: LD_INT 4
45835: PUSH
45836: LD_INT 0
45838: PUSH
45839: EMPTY
45840: LIST
45841: LIST
45842: PUSH
45843: LD_INT 4
45845: PUSH
45846: LD_INT 1
45848: PUSH
45849: EMPTY
45850: LIST
45851: LIST
45852: PUSH
45853: LD_INT 3
45855: PUSH
45856: LD_INT 1
45858: PUSH
45859: EMPTY
45860: LIST
45861: LIST
45862: PUSH
45863: LD_INT 2
45865: PUSH
45866: LD_INT 0
45868: PUSH
45869: EMPTY
45870: LIST
45871: LIST
45872: PUSH
45873: LD_INT 2
45875: PUSH
45876: LD_INT 1
45878: NEG
45879: PUSH
45880: EMPTY
45881: LIST
45882: LIST
45883: PUSH
45884: LD_INT 2
45886: PUSH
45887: LD_INT 2
45889: NEG
45890: PUSH
45891: EMPTY
45892: LIST
45893: LIST
45894: PUSH
45895: LD_INT 4
45897: PUSH
45898: LD_INT 2
45900: PUSH
45901: EMPTY
45902: LIST
45903: LIST
45904: PUSH
45905: LD_INT 4
45907: PUSH
45908: LD_INT 4
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: PUSH
45915: LD_INT 4
45917: PUSH
45918: LD_INT 3
45920: PUSH
45921: EMPTY
45922: LIST
45923: LIST
45924: PUSH
45925: LD_INT 5
45927: PUSH
45928: LD_INT 4
45930: PUSH
45931: EMPTY
45932: LIST
45933: LIST
45934: PUSH
45935: LD_INT 5
45937: PUSH
45938: LD_INT 5
45940: PUSH
45941: EMPTY
45942: LIST
45943: LIST
45944: PUSH
45945: LD_INT 4
45947: PUSH
45948: LD_INT 5
45950: PUSH
45951: EMPTY
45952: LIST
45953: LIST
45954: PUSH
45955: LD_INT 3
45957: PUSH
45958: LD_INT 4
45960: PUSH
45961: EMPTY
45962: LIST
45963: LIST
45964: PUSH
45965: LD_INT 3
45967: PUSH
45968: LD_INT 3
45970: PUSH
45971: EMPTY
45972: LIST
45973: LIST
45974: PUSH
45975: LD_INT 5
45977: PUSH
45978: LD_INT 3
45980: PUSH
45981: EMPTY
45982: LIST
45983: LIST
45984: PUSH
45985: LD_INT 3
45987: PUSH
45988: LD_INT 5
45990: PUSH
45991: EMPTY
45992: LIST
45993: LIST
45994: PUSH
45995: EMPTY
45996: LIST
45997: LIST
45998: LIST
45999: LIST
46000: LIST
46001: LIST
46002: LIST
46003: LIST
46004: LIST
46005: LIST
46006: LIST
46007: LIST
46008: LIST
46009: LIST
46010: LIST
46011: LIST
46012: LIST
46013: LIST
46014: LIST
46015: LIST
46016: LIST
46017: LIST
46018: LIST
46019: LIST
46020: LIST
46021: LIST
46022: LIST
46023: LIST
46024: LIST
46025: LIST
46026: LIST
46027: LIST
46028: LIST
46029: LIST
46030: LIST
46031: LIST
46032: LIST
46033: LIST
46034: LIST
46035: LIST
46036: LIST
46037: LIST
46038: LIST
46039: LIST
46040: LIST
46041: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
46042: LD_ADDR_VAR 0 33
46046: PUSH
46047: LD_INT 4
46049: NEG
46050: PUSH
46051: LD_INT 4
46053: NEG
46054: PUSH
46055: EMPTY
46056: LIST
46057: LIST
46058: PUSH
46059: LD_INT 4
46061: NEG
46062: PUSH
46063: LD_INT 5
46065: NEG
46066: PUSH
46067: EMPTY
46068: LIST
46069: LIST
46070: PUSH
46071: LD_INT 3
46073: NEG
46074: PUSH
46075: LD_INT 4
46077: NEG
46078: PUSH
46079: EMPTY
46080: LIST
46081: LIST
46082: PUSH
46083: LD_INT 3
46085: NEG
46086: PUSH
46087: LD_INT 3
46089: NEG
46090: PUSH
46091: EMPTY
46092: LIST
46093: LIST
46094: PUSH
46095: LD_INT 4
46097: NEG
46098: PUSH
46099: LD_INT 3
46101: NEG
46102: PUSH
46103: EMPTY
46104: LIST
46105: LIST
46106: PUSH
46107: LD_INT 5
46109: NEG
46110: PUSH
46111: LD_INT 4
46113: NEG
46114: PUSH
46115: EMPTY
46116: LIST
46117: LIST
46118: PUSH
46119: LD_INT 5
46121: NEG
46122: PUSH
46123: LD_INT 5
46125: NEG
46126: PUSH
46127: EMPTY
46128: LIST
46129: LIST
46130: PUSH
46131: LD_INT 3
46133: NEG
46134: PUSH
46135: LD_INT 5
46137: NEG
46138: PUSH
46139: EMPTY
46140: LIST
46141: LIST
46142: PUSH
46143: LD_INT 5
46145: NEG
46146: PUSH
46147: LD_INT 3
46149: NEG
46150: PUSH
46151: EMPTY
46152: LIST
46153: LIST
46154: PUSH
46155: LD_INT 0
46157: PUSH
46158: LD_INT 3
46160: NEG
46161: PUSH
46162: EMPTY
46163: LIST
46164: LIST
46165: PUSH
46166: LD_INT 0
46168: PUSH
46169: LD_INT 4
46171: NEG
46172: PUSH
46173: EMPTY
46174: LIST
46175: LIST
46176: PUSH
46177: LD_INT 1
46179: PUSH
46180: LD_INT 3
46182: NEG
46183: PUSH
46184: EMPTY
46185: LIST
46186: LIST
46187: PUSH
46188: LD_INT 1
46190: PUSH
46191: LD_INT 2
46193: NEG
46194: PUSH
46195: EMPTY
46196: LIST
46197: LIST
46198: PUSH
46199: LD_INT 0
46201: PUSH
46202: LD_INT 2
46204: NEG
46205: PUSH
46206: EMPTY
46207: LIST
46208: LIST
46209: PUSH
46210: LD_INT 1
46212: NEG
46213: PUSH
46214: LD_INT 3
46216: NEG
46217: PUSH
46218: EMPTY
46219: LIST
46220: LIST
46221: PUSH
46222: LD_INT 1
46224: NEG
46225: PUSH
46226: LD_INT 4
46228: NEG
46229: PUSH
46230: EMPTY
46231: LIST
46232: LIST
46233: PUSH
46234: LD_INT 2
46236: PUSH
46237: LD_INT 2
46239: NEG
46240: PUSH
46241: EMPTY
46242: LIST
46243: LIST
46244: PUSH
46245: LD_INT 2
46247: NEG
46248: PUSH
46249: LD_INT 4
46251: NEG
46252: PUSH
46253: EMPTY
46254: LIST
46255: LIST
46256: PUSH
46257: LD_INT 4
46259: PUSH
46260: LD_INT 0
46262: PUSH
46263: EMPTY
46264: LIST
46265: LIST
46266: PUSH
46267: LD_INT 4
46269: PUSH
46270: LD_INT 1
46272: NEG
46273: PUSH
46274: EMPTY
46275: LIST
46276: LIST
46277: PUSH
46278: LD_INT 5
46280: PUSH
46281: LD_INT 0
46283: PUSH
46284: EMPTY
46285: LIST
46286: LIST
46287: PUSH
46288: LD_INT 5
46290: PUSH
46291: LD_INT 1
46293: PUSH
46294: EMPTY
46295: LIST
46296: LIST
46297: PUSH
46298: LD_INT 4
46300: PUSH
46301: LD_INT 1
46303: PUSH
46304: EMPTY
46305: LIST
46306: LIST
46307: PUSH
46308: LD_INT 3
46310: PUSH
46311: LD_INT 0
46313: PUSH
46314: EMPTY
46315: LIST
46316: LIST
46317: PUSH
46318: LD_INT 3
46320: PUSH
46321: LD_INT 1
46323: NEG
46324: PUSH
46325: EMPTY
46326: LIST
46327: LIST
46328: PUSH
46329: LD_INT 3
46331: PUSH
46332: LD_INT 2
46334: NEG
46335: PUSH
46336: EMPTY
46337: LIST
46338: LIST
46339: PUSH
46340: LD_INT 5
46342: PUSH
46343: LD_INT 2
46345: PUSH
46346: EMPTY
46347: LIST
46348: LIST
46349: PUSH
46350: LD_INT 3
46352: PUSH
46353: LD_INT 3
46355: PUSH
46356: EMPTY
46357: LIST
46358: LIST
46359: PUSH
46360: LD_INT 3
46362: PUSH
46363: LD_INT 2
46365: PUSH
46366: EMPTY
46367: LIST
46368: LIST
46369: PUSH
46370: LD_INT 4
46372: PUSH
46373: LD_INT 3
46375: PUSH
46376: EMPTY
46377: LIST
46378: LIST
46379: PUSH
46380: LD_INT 4
46382: PUSH
46383: LD_INT 4
46385: PUSH
46386: EMPTY
46387: LIST
46388: LIST
46389: PUSH
46390: LD_INT 3
46392: PUSH
46393: LD_INT 4
46395: PUSH
46396: EMPTY
46397: LIST
46398: LIST
46399: PUSH
46400: LD_INT 2
46402: PUSH
46403: LD_INT 3
46405: PUSH
46406: EMPTY
46407: LIST
46408: LIST
46409: PUSH
46410: LD_INT 2
46412: PUSH
46413: LD_INT 2
46415: PUSH
46416: EMPTY
46417: LIST
46418: LIST
46419: PUSH
46420: LD_INT 4
46422: PUSH
46423: LD_INT 2
46425: PUSH
46426: EMPTY
46427: LIST
46428: LIST
46429: PUSH
46430: LD_INT 2
46432: PUSH
46433: LD_INT 4
46435: PUSH
46436: EMPTY
46437: LIST
46438: LIST
46439: PUSH
46440: LD_INT 0
46442: PUSH
46443: LD_INT 4
46445: PUSH
46446: EMPTY
46447: LIST
46448: LIST
46449: PUSH
46450: LD_INT 0
46452: PUSH
46453: LD_INT 3
46455: PUSH
46456: EMPTY
46457: LIST
46458: LIST
46459: PUSH
46460: LD_INT 1
46462: PUSH
46463: LD_INT 4
46465: PUSH
46466: EMPTY
46467: LIST
46468: LIST
46469: PUSH
46470: LD_INT 1
46472: PUSH
46473: LD_INT 5
46475: PUSH
46476: EMPTY
46477: LIST
46478: LIST
46479: PUSH
46480: LD_INT 0
46482: PUSH
46483: LD_INT 5
46485: PUSH
46486: EMPTY
46487: LIST
46488: LIST
46489: PUSH
46490: LD_INT 1
46492: NEG
46493: PUSH
46494: LD_INT 4
46496: PUSH
46497: EMPTY
46498: LIST
46499: LIST
46500: PUSH
46501: LD_INT 1
46503: NEG
46504: PUSH
46505: LD_INT 3
46507: PUSH
46508: EMPTY
46509: LIST
46510: LIST
46511: PUSH
46512: LD_INT 2
46514: PUSH
46515: LD_INT 5
46517: PUSH
46518: EMPTY
46519: LIST
46520: LIST
46521: PUSH
46522: LD_INT 2
46524: NEG
46525: PUSH
46526: LD_INT 3
46528: PUSH
46529: EMPTY
46530: LIST
46531: LIST
46532: PUSH
46533: EMPTY
46534: LIST
46535: LIST
46536: LIST
46537: LIST
46538: LIST
46539: LIST
46540: LIST
46541: LIST
46542: LIST
46543: LIST
46544: LIST
46545: LIST
46546: LIST
46547: LIST
46548: LIST
46549: LIST
46550: LIST
46551: LIST
46552: LIST
46553: LIST
46554: LIST
46555: LIST
46556: LIST
46557: LIST
46558: LIST
46559: LIST
46560: LIST
46561: LIST
46562: LIST
46563: LIST
46564: LIST
46565: LIST
46566: LIST
46567: LIST
46568: LIST
46569: LIST
46570: LIST
46571: LIST
46572: LIST
46573: LIST
46574: LIST
46575: LIST
46576: LIST
46577: LIST
46578: LIST
46579: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
46580: LD_ADDR_VAR 0 34
46584: PUSH
46585: LD_INT 0
46587: PUSH
46588: LD_INT 4
46590: NEG
46591: PUSH
46592: EMPTY
46593: LIST
46594: LIST
46595: PUSH
46596: LD_INT 0
46598: PUSH
46599: LD_INT 5
46601: NEG
46602: PUSH
46603: EMPTY
46604: LIST
46605: LIST
46606: PUSH
46607: LD_INT 1
46609: PUSH
46610: LD_INT 4
46612: NEG
46613: PUSH
46614: EMPTY
46615: LIST
46616: LIST
46617: PUSH
46618: LD_INT 1
46620: PUSH
46621: LD_INT 3
46623: NEG
46624: PUSH
46625: EMPTY
46626: LIST
46627: LIST
46628: PUSH
46629: LD_INT 0
46631: PUSH
46632: LD_INT 3
46634: NEG
46635: PUSH
46636: EMPTY
46637: LIST
46638: LIST
46639: PUSH
46640: LD_INT 1
46642: NEG
46643: PUSH
46644: LD_INT 4
46646: NEG
46647: PUSH
46648: EMPTY
46649: LIST
46650: LIST
46651: PUSH
46652: LD_INT 1
46654: NEG
46655: PUSH
46656: LD_INT 5
46658: NEG
46659: PUSH
46660: EMPTY
46661: LIST
46662: LIST
46663: PUSH
46664: LD_INT 2
46666: PUSH
46667: LD_INT 3
46669: NEG
46670: PUSH
46671: EMPTY
46672: LIST
46673: LIST
46674: PUSH
46675: LD_INT 2
46677: NEG
46678: PUSH
46679: LD_INT 5
46681: NEG
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: PUSH
46687: LD_INT 3
46689: PUSH
46690: LD_INT 0
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: PUSH
46697: LD_INT 3
46699: PUSH
46700: LD_INT 1
46702: NEG
46703: PUSH
46704: EMPTY
46705: LIST
46706: LIST
46707: PUSH
46708: LD_INT 4
46710: PUSH
46711: LD_INT 0
46713: PUSH
46714: EMPTY
46715: LIST
46716: LIST
46717: PUSH
46718: LD_INT 4
46720: PUSH
46721: LD_INT 1
46723: PUSH
46724: EMPTY
46725: LIST
46726: LIST
46727: PUSH
46728: LD_INT 3
46730: PUSH
46731: LD_INT 1
46733: PUSH
46734: EMPTY
46735: LIST
46736: LIST
46737: PUSH
46738: LD_INT 2
46740: PUSH
46741: LD_INT 0
46743: PUSH
46744: EMPTY
46745: LIST
46746: LIST
46747: PUSH
46748: LD_INT 2
46750: PUSH
46751: LD_INT 1
46753: NEG
46754: PUSH
46755: EMPTY
46756: LIST
46757: LIST
46758: PUSH
46759: LD_INT 2
46761: PUSH
46762: LD_INT 2
46764: NEG
46765: PUSH
46766: EMPTY
46767: LIST
46768: LIST
46769: PUSH
46770: LD_INT 4
46772: PUSH
46773: LD_INT 2
46775: PUSH
46776: EMPTY
46777: LIST
46778: LIST
46779: PUSH
46780: LD_INT 4
46782: PUSH
46783: LD_INT 4
46785: PUSH
46786: EMPTY
46787: LIST
46788: LIST
46789: PUSH
46790: LD_INT 4
46792: PUSH
46793: LD_INT 3
46795: PUSH
46796: EMPTY
46797: LIST
46798: LIST
46799: PUSH
46800: LD_INT 5
46802: PUSH
46803: LD_INT 4
46805: PUSH
46806: EMPTY
46807: LIST
46808: LIST
46809: PUSH
46810: LD_INT 5
46812: PUSH
46813: LD_INT 5
46815: PUSH
46816: EMPTY
46817: LIST
46818: LIST
46819: PUSH
46820: LD_INT 4
46822: PUSH
46823: LD_INT 5
46825: PUSH
46826: EMPTY
46827: LIST
46828: LIST
46829: PUSH
46830: LD_INT 3
46832: PUSH
46833: LD_INT 4
46835: PUSH
46836: EMPTY
46837: LIST
46838: LIST
46839: PUSH
46840: LD_INT 3
46842: PUSH
46843: LD_INT 3
46845: PUSH
46846: EMPTY
46847: LIST
46848: LIST
46849: PUSH
46850: LD_INT 5
46852: PUSH
46853: LD_INT 3
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: PUSH
46860: LD_INT 3
46862: PUSH
46863: LD_INT 5
46865: PUSH
46866: EMPTY
46867: LIST
46868: LIST
46869: PUSH
46870: LD_INT 0
46872: PUSH
46873: LD_INT 3
46875: PUSH
46876: EMPTY
46877: LIST
46878: LIST
46879: PUSH
46880: LD_INT 0
46882: PUSH
46883: LD_INT 2
46885: PUSH
46886: EMPTY
46887: LIST
46888: LIST
46889: PUSH
46890: LD_INT 1
46892: PUSH
46893: LD_INT 3
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: PUSH
46900: LD_INT 1
46902: PUSH
46903: LD_INT 4
46905: PUSH
46906: EMPTY
46907: LIST
46908: LIST
46909: PUSH
46910: LD_INT 0
46912: PUSH
46913: LD_INT 4
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: PUSH
46920: LD_INT 1
46922: NEG
46923: PUSH
46924: LD_INT 3
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: PUSH
46931: LD_INT 1
46933: NEG
46934: PUSH
46935: LD_INT 2
46937: PUSH
46938: EMPTY
46939: LIST
46940: LIST
46941: PUSH
46942: LD_INT 2
46944: PUSH
46945: LD_INT 4
46947: PUSH
46948: EMPTY
46949: LIST
46950: LIST
46951: PUSH
46952: LD_INT 2
46954: NEG
46955: PUSH
46956: LD_INT 2
46958: PUSH
46959: EMPTY
46960: LIST
46961: LIST
46962: PUSH
46963: LD_INT 4
46965: NEG
46966: PUSH
46967: LD_INT 0
46969: PUSH
46970: EMPTY
46971: LIST
46972: LIST
46973: PUSH
46974: LD_INT 4
46976: NEG
46977: PUSH
46978: LD_INT 1
46980: NEG
46981: PUSH
46982: EMPTY
46983: LIST
46984: LIST
46985: PUSH
46986: LD_INT 3
46988: NEG
46989: PUSH
46990: LD_INT 0
46992: PUSH
46993: EMPTY
46994: LIST
46995: LIST
46996: PUSH
46997: LD_INT 3
46999: NEG
47000: PUSH
47001: LD_INT 1
47003: PUSH
47004: EMPTY
47005: LIST
47006: LIST
47007: PUSH
47008: LD_INT 4
47010: NEG
47011: PUSH
47012: LD_INT 1
47014: PUSH
47015: EMPTY
47016: LIST
47017: LIST
47018: PUSH
47019: LD_INT 5
47021: NEG
47022: PUSH
47023: LD_INT 0
47025: PUSH
47026: EMPTY
47027: LIST
47028: LIST
47029: PUSH
47030: LD_INT 5
47032: NEG
47033: PUSH
47034: LD_INT 1
47036: NEG
47037: PUSH
47038: EMPTY
47039: LIST
47040: LIST
47041: PUSH
47042: LD_INT 5
47044: NEG
47045: PUSH
47046: LD_INT 2
47048: NEG
47049: PUSH
47050: EMPTY
47051: LIST
47052: LIST
47053: PUSH
47054: LD_INT 3
47056: NEG
47057: PUSH
47058: LD_INT 2
47060: PUSH
47061: EMPTY
47062: LIST
47063: LIST
47064: PUSH
47065: EMPTY
47066: LIST
47067: LIST
47068: LIST
47069: LIST
47070: LIST
47071: LIST
47072: LIST
47073: LIST
47074: LIST
47075: LIST
47076: LIST
47077: LIST
47078: LIST
47079: LIST
47080: LIST
47081: LIST
47082: LIST
47083: LIST
47084: LIST
47085: LIST
47086: LIST
47087: LIST
47088: LIST
47089: LIST
47090: LIST
47091: LIST
47092: LIST
47093: LIST
47094: LIST
47095: LIST
47096: LIST
47097: LIST
47098: LIST
47099: LIST
47100: LIST
47101: LIST
47102: LIST
47103: LIST
47104: LIST
47105: LIST
47106: LIST
47107: LIST
47108: LIST
47109: LIST
47110: LIST
47111: ST_TO_ADDR
// end ; end ;
47112: GO 47115
47114: POP
// case btype of b_depot , b_warehouse :
47115: LD_VAR 0 1
47119: PUSH
47120: LD_INT 0
47122: DOUBLE
47123: EQUAL
47124: IFTRUE 47134
47126: LD_INT 1
47128: DOUBLE
47129: EQUAL
47130: IFTRUE 47134
47132: GO 47335
47134: POP
// case nation of nation_american :
47135: LD_VAR 0 5
47139: PUSH
47140: LD_INT 1
47142: DOUBLE
47143: EQUAL
47144: IFTRUE 47148
47146: GO 47204
47148: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
47149: LD_ADDR_VAR 0 9
47153: PUSH
47154: LD_VAR 0 11
47158: PUSH
47159: LD_VAR 0 12
47163: PUSH
47164: LD_VAR 0 13
47168: PUSH
47169: LD_VAR 0 14
47173: PUSH
47174: LD_VAR 0 15
47178: PUSH
47179: LD_VAR 0 16
47183: PUSH
47184: EMPTY
47185: LIST
47186: LIST
47187: LIST
47188: LIST
47189: LIST
47190: LIST
47191: PUSH
47192: LD_VAR 0 4
47196: PUSH
47197: LD_INT 1
47199: PLUS
47200: ARRAY
47201: ST_TO_ADDR
47202: GO 47333
47204: LD_INT 2
47206: DOUBLE
47207: EQUAL
47208: IFTRUE 47212
47210: GO 47268
47212: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
47213: LD_ADDR_VAR 0 9
47217: PUSH
47218: LD_VAR 0 17
47222: PUSH
47223: LD_VAR 0 18
47227: PUSH
47228: LD_VAR 0 19
47232: PUSH
47233: LD_VAR 0 20
47237: PUSH
47238: LD_VAR 0 21
47242: PUSH
47243: LD_VAR 0 22
47247: PUSH
47248: EMPTY
47249: LIST
47250: LIST
47251: LIST
47252: LIST
47253: LIST
47254: LIST
47255: PUSH
47256: LD_VAR 0 4
47260: PUSH
47261: LD_INT 1
47263: PLUS
47264: ARRAY
47265: ST_TO_ADDR
47266: GO 47333
47268: LD_INT 3
47270: DOUBLE
47271: EQUAL
47272: IFTRUE 47276
47274: GO 47332
47276: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
47277: LD_ADDR_VAR 0 9
47281: PUSH
47282: LD_VAR 0 23
47286: PUSH
47287: LD_VAR 0 24
47291: PUSH
47292: LD_VAR 0 25
47296: PUSH
47297: LD_VAR 0 26
47301: PUSH
47302: LD_VAR 0 27
47306: PUSH
47307: LD_VAR 0 28
47311: PUSH
47312: EMPTY
47313: LIST
47314: LIST
47315: LIST
47316: LIST
47317: LIST
47318: LIST
47319: PUSH
47320: LD_VAR 0 4
47324: PUSH
47325: LD_INT 1
47327: PLUS
47328: ARRAY
47329: ST_TO_ADDR
47330: GO 47333
47332: POP
47333: GO 47888
47335: LD_INT 2
47337: DOUBLE
47338: EQUAL
47339: IFTRUE 47349
47341: LD_INT 3
47343: DOUBLE
47344: EQUAL
47345: IFTRUE 47349
47347: GO 47405
47349: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
47350: LD_ADDR_VAR 0 9
47354: PUSH
47355: LD_VAR 0 29
47359: PUSH
47360: LD_VAR 0 30
47364: PUSH
47365: LD_VAR 0 31
47369: PUSH
47370: LD_VAR 0 32
47374: PUSH
47375: LD_VAR 0 33
47379: PUSH
47380: LD_VAR 0 34
47384: PUSH
47385: EMPTY
47386: LIST
47387: LIST
47388: LIST
47389: LIST
47390: LIST
47391: LIST
47392: PUSH
47393: LD_VAR 0 4
47397: PUSH
47398: LD_INT 1
47400: PLUS
47401: ARRAY
47402: ST_TO_ADDR
47403: GO 47888
47405: LD_INT 16
47407: DOUBLE
47408: EQUAL
47409: IFTRUE 47467
47411: LD_INT 17
47413: DOUBLE
47414: EQUAL
47415: IFTRUE 47467
47417: LD_INT 18
47419: DOUBLE
47420: EQUAL
47421: IFTRUE 47467
47423: LD_INT 19
47425: DOUBLE
47426: EQUAL
47427: IFTRUE 47467
47429: LD_INT 22
47431: DOUBLE
47432: EQUAL
47433: IFTRUE 47467
47435: LD_INT 20
47437: DOUBLE
47438: EQUAL
47439: IFTRUE 47467
47441: LD_INT 21
47443: DOUBLE
47444: EQUAL
47445: IFTRUE 47467
47447: LD_INT 23
47449: DOUBLE
47450: EQUAL
47451: IFTRUE 47467
47453: LD_INT 24
47455: DOUBLE
47456: EQUAL
47457: IFTRUE 47467
47459: LD_INT 25
47461: DOUBLE
47462: EQUAL
47463: IFTRUE 47467
47465: GO 47523
47467: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
47468: LD_ADDR_VAR 0 9
47472: PUSH
47473: LD_VAR 0 35
47477: PUSH
47478: LD_VAR 0 36
47482: PUSH
47483: LD_VAR 0 37
47487: PUSH
47488: LD_VAR 0 38
47492: PUSH
47493: LD_VAR 0 39
47497: PUSH
47498: LD_VAR 0 40
47502: PUSH
47503: EMPTY
47504: LIST
47505: LIST
47506: LIST
47507: LIST
47508: LIST
47509: LIST
47510: PUSH
47511: LD_VAR 0 4
47515: PUSH
47516: LD_INT 1
47518: PLUS
47519: ARRAY
47520: ST_TO_ADDR
47521: GO 47888
47523: LD_INT 6
47525: DOUBLE
47526: EQUAL
47527: IFTRUE 47579
47529: LD_INT 7
47531: DOUBLE
47532: EQUAL
47533: IFTRUE 47579
47535: LD_INT 8
47537: DOUBLE
47538: EQUAL
47539: IFTRUE 47579
47541: LD_INT 13
47543: DOUBLE
47544: EQUAL
47545: IFTRUE 47579
47547: LD_INT 12
47549: DOUBLE
47550: EQUAL
47551: IFTRUE 47579
47553: LD_INT 15
47555: DOUBLE
47556: EQUAL
47557: IFTRUE 47579
47559: LD_INT 11
47561: DOUBLE
47562: EQUAL
47563: IFTRUE 47579
47565: LD_INT 14
47567: DOUBLE
47568: EQUAL
47569: IFTRUE 47579
47571: LD_INT 10
47573: DOUBLE
47574: EQUAL
47575: IFTRUE 47579
47577: GO 47635
47579: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
47580: LD_ADDR_VAR 0 9
47584: PUSH
47585: LD_VAR 0 41
47589: PUSH
47590: LD_VAR 0 42
47594: PUSH
47595: LD_VAR 0 43
47599: PUSH
47600: LD_VAR 0 44
47604: PUSH
47605: LD_VAR 0 45
47609: PUSH
47610: LD_VAR 0 46
47614: PUSH
47615: EMPTY
47616: LIST
47617: LIST
47618: LIST
47619: LIST
47620: LIST
47621: LIST
47622: PUSH
47623: LD_VAR 0 4
47627: PUSH
47628: LD_INT 1
47630: PLUS
47631: ARRAY
47632: ST_TO_ADDR
47633: GO 47888
47635: LD_INT 36
47637: DOUBLE
47638: EQUAL
47639: IFTRUE 47643
47641: GO 47699
47643: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
47644: LD_ADDR_VAR 0 9
47648: PUSH
47649: LD_VAR 0 47
47653: PUSH
47654: LD_VAR 0 48
47658: PUSH
47659: LD_VAR 0 49
47663: PUSH
47664: LD_VAR 0 50
47668: PUSH
47669: LD_VAR 0 51
47673: PUSH
47674: LD_VAR 0 52
47678: PUSH
47679: EMPTY
47680: LIST
47681: LIST
47682: LIST
47683: LIST
47684: LIST
47685: LIST
47686: PUSH
47687: LD_VAR 0 4
47691: PUSH
47692: LD_INT 1
47694: PLUS
47695: ARRAY
47696: ST_TO_ADDR
47697: GO 47888
47699: LD_INT 4
47701: DOUBLE
47702: EQUAL
47703: IFTRUE 47725
47705: LD_INT 5
47707: DOUBLE
47708: EQUAL
47709: IFTRUE 47725
47711: LD_INT 34
47713: DOUBLE
47714: EQUAL
47715: IFTRUE 47725
47717: LD_INT 37
47719: DOUBLE
47720: EQUAL
47721: IFTRUE 47725
47723: GO 47781
47725: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
47726: LD_ADDR_VAR 0 9
47730: PUSH
47731: LD_VAR 0 53
47735: PUSH
47736: LD_VAR 0 54
47740: PUSH
47741: LD_VAR 0 55
47745: PUSH
47746: LD_VAR 0 56
47750: PUSH
47751: LD_VAR 0 57
47755: PUSH
47756: LD_VAR 0 58
47760: PUSH
47761: EMPTY
47762: LIST
47763: LIST
47764: LIST
47765: LIST
47766: LIST
47767: LIST
47768: PUSH
47769: LD_VAR 0 4
47773: PUSH
47774: LD_INT 1
47776: PLUS
47777: ARRAY
47778: ST_TO_ADDR
47779: GO 47888
47781: LD_INT 31
47783: DOUBLE
47784: EQUAL
47785: IFTRUE 47831
47787: LD_INT 32
47789: DOUBLE
47790: EQUAL
47791: IFTRUE 47831
47793: LD_INT 33
47795: DOUBLE
47796: EQUAL
47797: IFTRUE 47831
47799: LD_INT 27
47801: DOUBLE
47802: EQUAL
47803: IFTRUE 47831
47805: LD_INT 26
47807: DOUBLE
47808: EQUAL
47809: IFTRUE 47831
47811: LD_INT 28
47813: DOUBLE
47814: EQUAL
47815: IFTRUE 47831
47817: LD_INT 29
47819: DOUBLE
47820: EQUAL
47821: IFTRUE 47831
47823: LD_INT 30
47825: DOUBLE
47826: EQUAL
47827: IFTRUE 47831
47829: GO 47887
47831: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
47832: LD_ADDR_VAR 0 9
47836: PUSH
47837: LD_VAR 0 59
47841: PUSH
47842: LD_VAR 0 60
47846: PUSH
47847: LD_VAR 0 61
47851: PUSH
47852: LD_VAR 0 62
47856: PUSH
47857: LD_VAR 0 63
47861: PUSH
47862: LD_VAR 0 64
47866: PUSH
47867: EMPTY
47868: LIST
47869: LIST
47870: LIST
47871: LIST
47872: LIST
47873: LIST
47874: PUSH
47875: LD_VAR 0 4
47879: PUSH
47880: LD_INT 1
47882: PLUS
47883: ARRAY
47884: ST_TO_ADDR
47885: GO 47888
47887: POP
// temp_list2 = [ ] ;
47888: LD_ADDR_VAR 0 10
47892: PUSH
47893: EMPTY
47894: ST_TO_ADDR
// for i in temp_list do
47895: LD_ADDR_VAR 0 8
47899: PUSH
47900: LD_VAR 0 9
47904: PUSH
47905: FOR_IN
47906: IFFALSE 47958
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
47908: LD_ADDR_VAR 0 10
47912: PUSH
47913: LD_VAR 0 10
47917: PUSH
47918: LD_VAR 0 8
47922: PUSH
47923: LD_INT 1
47925: ARRAY
47926: PUSH
47927: LD_VAR 0 2
47931: PLUS
47932: PUSH
47933: LD_VAR 0 8
47937: PUSH
47938: LD_INT 2
47940: ARRAY
47941: PUSH
47942: LD_VAR 0 3
47946: PLUS
47947: PUSH
47948: EMPTY
47949: LIST
47950: LIST
47951: PUSH
47952: EMPTY
47953: LIST
47954: ADD
47955: ST_TO_ADDR
47956: GO 47905
47958: POP
47959: POP
// result = temp_list2 ;
47960: LD_ADDR_VAR 0 7
47964: PUSH
47965: LD_VAR 0 10
47969: ST_TO_ADDR
// end ;
47970: LD_VAR 0 7
47974: RET
// export function EnemyInRange ( unit , dist ) ; begin
47975: LD_INT 0
47977: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
47978: LD_ADDR_VAR 0 3
47982: PUSH
47983: LD_VAR 0 1
47987: PPUSH
47988: CALL_OW 255
47992: PPUSH
47993: LD_VAR 0 1
47997: PPUSH
47998: CALL_OW 250
48002: PPUSH
48003: LD_VAR 0 1
48007: PPUSH
48008: CALL_OW 251
48012: PPUSH
48013: LD_VAR 0 2
48017: PPUSH
48018: CALL 21348 0 4
48022: PUSH
48023: LD_INT 4
48025: ARRAY
48026: ST_TO_ADDR
// end ;
48027: LD_VAR 0 3
48031: RET
// export function PlayerSeeMe ( unit ) ; begin
48032: LD_INT 0
48034: PPUSH
// result := See ( your_side , unit ) ;
48035: LD_ADDR_VAR 0 2
48039: PUSH
48040: LD_OWVAR 2
48044: PPUSH
48045: LD_VAR 0 1
48049: PPUSH
48050: CALL_OW 292
48054: ST_TO_ADDR
// end ;
48055: LD_VAR 0 2
48059: RET
// export function ReverseDir ( unit ) ; begin
48060: LD_INT 0
48062: PPUSH
// if not unit then
48063: LD_VAR 0 1
48067: NOT
48068: IFFALSE 48072
// exit ;
48070: GO 48095
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
48072: LD_ADDR_VAR 0 2
48076: PUSH
48077: LD_VAR 0 1
48081: PPUSH
48082: CALL_OW 254
48086: PUSH
48087: LD_INT 3
48089: PLUS
48090: PUSH
48091: LD_INT 6
48093: MOD
48094: ST_TO_ADDR
// end ;
48095: LD_VAR 0 2
48099: RET
// export function ReverseArray ( array ) ; var i ; begin
48100: LD_INT 0
48102: PPUSH
48103: PPUSH
// if not array then
48104: LD_VAR 0 1
48108: NOT
48109: IFFALSE 48113
// exit ;
48111: GO 48168
// result := [ ] ;
48113: LD_ADDR_VAR 0 2
48117: PUSH
48118: EMPTY
48119: ST_TO_ADDR
// for i := array downto 1 do
48120: LD_ADDR_VAR 0 3
48124: PUSH
48125: DOUBLE
48126: LD_VAR 0 1
48130: INC
48131: ST_TO_ADDR
48132: LD_INT 1
48134: PUSH
48135: FOR_DOWNTO
48136: IFFALSE 48166
// result := Join ( result , array [ i ] ) ;
48138: LD_ADDR_VAR 0 2
48142: PUSH
48143: LD_VAR 0 2
48147: PPUSH
48148: LD_VAR 0 1
48152: PUSH
48153: LD_VAR 0 3
48157: ARRAY
48158: PPUSH
48159: CALL 52833 0 2
48163: ST_TO_ADDR
48164: GO 48135
48166: POP
48167: POP
// end ;
48168: LD_VAR 0 2
48172: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
48173: LD_INT 0
48175: PPUSH
48176: PPUSH
48177: PPUSH
48178: PPUSH
48179: PPUSH
48180: PPUSH
// if not unit or not hexes then
48181: LD_VAR 0 1
48185: NOT
48186: PUSH
48187: LD_VAR 0 2
48191: NOT
48192: OR
48193: IFFALSE 48197
// exit ;
48195: GO 48320
// dist := 9999 ;
48197: LD_ADDR_VAR 0 5
48201: PUSH
48202: LD_INT 9999
48204: ST_TO_ADDR
// for i = 1 to hexes do
48205: LD_ADDR_VAR 0 4
48209: PUSH
48210: DOUBLE
48211: LD_INT 1
48213: DEC
48214: ST_TO_ADDR
48215: LD_VAR 0 2
48219: PUSH
48220: FOR_TO
48221: IFFALSE 48308
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48223: LD_ADDR_VAR 0 6
48227: PUSH
48228: LD_VAR 0 1
48232: PPUSH
48233: LD_VAR 0 2
48237: PUSH
48238: LD_VAR 0 4
48242: ARRAY
48243: PUSH
48244: LD_INT 1
48246: ARRAY
48247: PPUSH
48248: LD_VAR 0 2
48252: PUSH
48253: LD_VAR 0 4
48257: ARRAY
48258: PUSH
48259: LD_INT 2
48261: ARRAY
48262: PPUSH
48263: CALL_OW 297
48267: ST_TO_ADDR
// if tdist < dist then
48268: LD_VAR 0 6
48272: PUSH
48273: LD_VAR 0 5
48277: LESS
48278: IFFALSE 48306
// begin hex := hexes [ i ] ;
48280: LD_ADDR_VAR 0 8
48284: PUSH
48285: LD_VAR 0 2
48289: PUSH
48290: LD_VAR 0 4
48294: ARRAY
48295: ST_TO_ADDR
// dist := tdist ;
48296: LD_ADDR_VAR 0 5
48300: PUSH
48301: LD_VAR 0 6
48305: ST_TO_ADDR
// end ; end ;
48306: GO 48220
48308: POP
48309: POP
// result := hex ;
48310: LD_ADDR_VAR 0 3
48314: PUSH
48315: LD_VAR 0 8
48319: ST_TO_ADDR
// end ;
48320: LD_VAR 0 3
48324: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
48325: LD_INT 0
48327: PPUSH
48328: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
48329: LD_VAR 0 1
48333: NOT
48334: PUSH
48335: LD_VAR 0 1
48339: PUSH
48340: LD_INT 21
48342: PUSH
48343: LD_INT 2
48345: PUSH
48346: EMPTY
48347: LIST
48348: LIST
48349: PUSH
48350: LD_INT 23
48352: PUSH
48353: LD_INT 2
48355: PUSH
48356: EMPTY
48357: LIST
48358: LIST
48359: PUSH
48360: EMPTY
48361: LIST
48362: LIST
48363: PPUSH
48364: CALL_OW 69
48368: IN
48369: NOT
48370: OR
48371: IFFALSE 48375
// exit ;
48373: GO 48422
// for i = 1 to 3 do
48375: LD_ADDR_VAR 0 3
48379: PUSH
48380: DOUBLE
48381: LD_INT 1
48383: DEC
48384: ST_TO_ADDR
48385: LD_INT 3
48387: PUSH
48388: FOR_TO
48389: IFFALSE 48420
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
48391: LD_VAR 0 1
48395: PPUSH
48396: CALL_OW 250
48400: PPUSH
48401: LD_VAR 0 1
48405: PPUSH
48406: CALL_OW 251
48410: PPUSH
48411: LD_INT 1
48413: PPUSH
48414: CALL_OW 453
48418: GO 48388
48420: POP
48421: POP
// end ;
48422: LD_VAR 0 2
48426: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
48427: LD_INT 0
48429: PPUSH
48430: PPUSH
48431: PPUSH
48432: PPUSH
48433: PPUSH
48434: PPUSH
// if not unit or not enemy_unit then
48435: LD_VAR 0 1
48439: NOT
48440: PUSH
48441: LD_VAR 0 2
48445: NOT
48446: OR
48447: IFFALSE 48451
// exit ;
48449: GO 48918
// if GetLives ( i ) < 250 then
48451: LD_VAR 0 4
48455: PPUSH
48456: CALL_OW 256
48460: PUSH
48461: LD_INT 250
48463: LESS
48464: IFFALSE 48477
// begin ComAutodestruct ( i ) ;
48466: LD_VAR 0 4
48470: PPUSH
48471: CALL 48325 0 1
// exit ;
48475: GO 48918
// end ; x := GetX ( enemy_unit ) ;
48477: LD_ADDR_VAR 0 7
48481: PUSH
48482: LD_VAR 0 2
48486: PPUSH
48487: CALL_OW 250
48491: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
48492: LD_ADDR_VAR 0 8
48496: PUSH
48497: LD_VAR 0 2
48501: PPUSH
48502: CALL_OW 251
48506: ST_TO_ADDR
// if not x or not y then
48507: LD_VAR 0 7
48511: NOT
48512: PUSH
48513: LD_VAR 0 8
48517: NOT
48518: OR
48519: IFFALSE 48523
// exit ;
48521: GO 48918
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
48523: LD_ADDR_VAR 0 6
48527: PUSH
48528: LD_VAR 0 7
48532: PPUSH
48533: LD_INT 0
48535: PPUSH
48536: LD_INT 4
48538: PPUSH
48539: CALL_OW 272
48543: PUSH
48544: LD_VAR 0 8
48548: PPUSH
48549: LD_INT 0
48551: PPUSH
48552: LD_INT 4
48554: PPUSH
48555: CALL_OW 273
48559: PUSH
48560: EMPTY
48561: LIST
48562: LIST
48563: PUSH
48564: LD_VAR 0 7
48568: PPUSH
48569: LD_INT 1
48571: PPUSH
48572: LD_INT 4
48574: PPUSH
48575: CALL_OW 272
48579: PUSH
48580: LD_VAR 0 8
48584: PPUSH
48585: LD_INT 1
48587: PPUSH
48588: LD_INT 4
48590: PPUSH
48591: CALL_OW 273
48595: PUSH
48596: EMPTY
48597: LIST
48598: LIST
48599: PUSH
48600: LD_VAR 0 7
48604: PPUSH
48605: LD_INT 2
48607: PPUSH
48608: LD_INT 4
48610: PPUSH
48611: CALL_OW 272
48615: PUSH
48616: LD_VAR 0 8
48620: PPUSH
48621: LD_INT 2
48623: PPUSH
48624: LD_INT 4
48626: PPUSH
48627: CALL_OW 273
48631: PUSH
48632: EMPTY
48633: LIST
48634: LIST
48635: PUSH
48636: LD_VAR 0 7
48640: PPUSH
48641: LD_INT 3
48643: PPUSH
48644: LD_INT 4
48646: PPUSH
48647: CALL_OW 272
48651: PUSH
48652: LD_VAR 0 8
48656: PPUSH
48657: LD_INT 3
48659: PPUSH
48660: LD_INT 4
48662: PPUSH
48663: CALL_OW 273
48667: PUSH
48668: EMPTY
48669: LIST
48670: LIST
48671: PUSH
48672: LD_VAR 0 7
48676: PPUSH
48677: LD_INT 4
48679: PPUSH
48680: LD_INT 4
48682: PPUSH
48683: CALL_OW 272
48687: PUSH
48688: LD_VAR 0 8
48692: PPUSH
48693: LD_INT 4
48695: PPUSH
48696: LD_INT 4
48698: PPUSH
48699: CALL_OW 273
48703: PUSH
48704: EMPTY
48705: LIST
48706: LIST
48707: PUSH
48708: LD_VAR 0 7
48712: PPUSH
48713: LD_INT 5
48715: PPUSH
48716: LD_INT 4
48718: PPUSH
48719: CALL_OW 272
48723: PUSH
48724: LD_VAR 0 8
48728: PPUSH
48729: LD_INT 5
48731: PPUSH
48732: LD_INT 4
48734: PPUSH
48735: CALL_OW 273
48739: PUSH
48740: EMPTY
48741: LIST
48742: LIST
48743: PUSH
48744: EMPTY
48745: LIST
48746: LIST
48747: LIST
48748: LIST
48749: LIST
48750: LIST
48751: ST_TO_ADDR
// for i = tmp downto 1 do
48752: LD_ADDR_VAR 0 4
48756: PUSH
48757: DOUBLE
48758: LD_VAR 0 6
48762: INC
48763: ST_TO_ADDR
48764: LD_INT 1
48766: PUSH
48767: FOR_DOWNTO
48768: IFFALSE 48869
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
48770: LD_VAR 0 6
48774: PUSH
48775: LD_VAR 0 4
48779: ARRAY
48780: PUSH
48781: LD_INT 1
48783: ARRAY
48784: PPUSH
48785: LD_VAR 0 6
48789: PUSH
48790: LD_VAR 0 4
48794: ARRAY
48795: PUSH
48796: LD_INT 2
48798: ARRAY
48799: PPUSH
48800: CALL_OW 488
48804: NOT
48805: PUSH
48806: LD_VAR 0 6
48810: PUSH
48811: LD_VAR 0 4
48815: ARRAY
48816: PUSH
48817: LD_INT 1
48819: ARRAY
48820: PPUSH
48821: LD_VAR 0 6
48825: PUSH
48826: LD_VAR 0 4
48830: ARRAY
48831: PUSH
48832: LD_INT 2
48834: ARRAY
48835: PPUSH
48836: CALL_OW 428
48840: PUSH
48841: LD_INT 0
48843: NONEQUAL
48844: OR
48845: IFFALSE 48867
// tmp := Delete ( tmp , i ) ;
48847: LD_ADDR_VAR 0 6
48851: PUSH
48852: LD_VAR 0 6
48856: PPUSH
48857: LD_VAR 0 4
48861: PPUSH
48862: CALL_OW 3
48866: ST_TO_ADDR
48867: GO 48767
48869: POP
48870: POP
// j := GetClosestHex ( unit , tmp ) ;
48871: LD_ADDR_VAR 0 5
48875: PUSH
48876: LD_VAR 0 1
48880: PPUSH
48881: LD_VAR 0 6
48885: PPUSH
48886: CALL 48173 0 2
48890: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
48891: LD_VAR 0 1
48895: PPUSH
48896: LD_VAR 0 5
48900: PUSH
48901: LD_INT 1
48903: ARRAY
48904: PPUSH
48905: LD_VAR 0 5
48909: PUSH
48910: LD_INT 2
48912: ARRAY
48913: PPUSH
48914: CALL_OW 111
// end ;
48918: LD_VAR 0 3
48922: RET
// export function PrepareApemanSoldier ( ) ; begin
48923: LD_INT 0
48925: PPUSH
// uc_nation := 0 ;
48926: LD_ADDR_OWVAR 21
48930: PUSH
48931: LD_INT 0
48933: ST_TO_ADDR
// hc_sex := sex_male ;
48934: LD_ADDR_OWVAR 27
48938: PUSH
48939: LD_INT 1
48941: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
48942: LD_ADDR_OWVAR 28
48946: PUSH
48947: LD_INT 15
48949: ST_TO_ADDR
// hc_gallery :=  ;
48950: LD_ADDR_OWVAR 33
48954: PUSH
48955: LD_STRING 
48957: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
48958: LD_ADDR_OWVAR 31
48962: PUSH
48963: LD_INT 0
48965: PPUSH
48966: LD_INT 3
48968: PPUSH
48969: CALL_OW 12
48973: PUSH
48974: LD_INT 0
48976: PPUSH
48977: LD_INT 3
48979: PPUSH
48980: CALL_OW 12
48984: PUSH
48985: LD_INT 0
48987: PUSH
48988: LD_INT 0
48990: PUSH
48991: EMPTY
48992: LIST
48993: LIST
48994: LIST
48995: LIST
48996: ST_TO_ADDR
// end ;
48997: LD_VAR 0 1
49001: RET
// export function PrepareApemanEngineer ( ) ; begin
49002: LD_INT 0
49004: PPUSH
// uc_nation := 0 ;
49005: LD_ADDR_OWVAR 21
49009: PUSH
49010: LD_INT 0
49012: ST_TO_ADDR
// hc_sex := sex_male ;
49013: LD_ADDR_OWVAR 27
49017: PUSH
49018: LD_INT 1
49020: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
49021: LD_ADDR_OWVAR 28
49025: PUSH
49026: LD_INT 16
49028: ST_TO_ADDR
// hc_gallery :=  ;
49029: LD_ADDR_OWVAR 33
49033: PUSH
49034: LD_STRING 
49036: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
49037: LD_ADDR_OWVAR 31
49041: PUSH
49042: LD_INT 0
49044: PPUSH
49045: LD_INT 3
49047: PPUSH
49048: CALL_OW 12
49052: PUSH
49053: LD_INT 0
49055: PPUSH
49056: LD_INT 3
49058: PPUSH
49059: CALL_OW 12
49063: PUSH
49064: LD_INT 0
49066: PUSH
49067: LD_INT 0
49069: PUSH
49070: EMPTY
49071: LIST
49072: LIST
49073: LIST
49074: LIST
49075: ST_TO_ADDR
// end ;
49076: LD_VAR 0 1
49080: RET
// export function PrepareApeman ( agressivity ) ; begin
49081: LD_INT 0
49083: PPUSH
// uc_side := 0 ;
49084: LD_ADDR_OWVAR 20
49088: PUSH
49089: LD_INT 0
49091: ST_TO_ADDR
// uc_nation := 0 ;
49092: LD_ADDR_OWVAR 21
49096: PUSH
49097: LD_INT 0
49099: ST_TO_ADDR
// hc_sex := sex_male ;
49100: LD_ADDR_OWVAR 27
49104: PUSH
49105: LD_INT 1
49107: ST_TO_ADDR
// hc_class := class_apeman ;
49108: LD_ADDR_OWVAR 28
49112: PUSH
49113: LD_INT 12
49115: ST_TO_ADDR
// hc_gallery :=  ;
49116: LD_ADDR_OWVAR 33
49120: PUSH
49121: LD_STRING 
49123: ST_TO_ADDR
// if agressivity = 0 then
49124: LD_VAR 0 1
49128: PUSH
49129: LD_INT 0
49131: EQUAL
49132: IFFALSE 49144
// hc_agressivity := 0 else
49134: LD_ADDR_OWVAR 35
49138: PUSH
49139: LD_INT 0
49141: ST_TO_ADDR
49142: GO 49165
// hc_agressivity := rand ( - agressivity , agressivity ) ;
49144: LD_ADDR_OWVAR 35
49148: PUSH
49149: LD_VAR 0 1
49153: NEG
49154: PPUSH
49155: LD_VAR 0 1
49159: PPUSH
49160: CALL_OW 12
49164: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
49165: LD_ADDR_OWVAR 31
49169: PUSH
49170: LD_INT 0
49172: PPUSH
49173: LD_INT 3
49175: PPUSH
49176: CALL_OW 12
49180: PUSH
49181: LD_INT 0
49183: PPUSH
49184: LD_INT 3
49186: PPUSH
49187: CALL_OW 12
49191: PUSH
49192: LD_INT 0
49194: PUSH
49195: LD_INT 0
49197: PUSH
49198: EMPTY
49199: LIST
49200: LIST
49201: LIST
49202: LIST
49203: ST_TO_ADDR
// end ;
49204: LD_VAR 0 2
49208: RET
// export function PrepareTiger ( agressivity ) ; begin
49209: LD_INT 0
49211: PPUSH
// uc_side := 0 ;
49212: LD_ADDR_OWVAR 20
49216: PUSH
49217: LD_INT 0
49219: ST_TO_ADDR
// uc_nation := 0 ;
49220: LD_ADDR_OWVAR 21
49224: PUSH
49225: LD_INT 0
49227: ST_TO_ADDR
// hc_class := class_tiger ;
49228: LD_ADDR_OWVAR 28
49232: PUSH
49233: LD_INT 14
49235: ST_TO_ADDR
// hc_gallery :=  ;
49236: LD_ADDR_OWVAR 33
49240: PUSH
49241: LD_STRING 
49243: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
49244: LD_ADDR_OWVAR 35
49248: PUSH
49249: LD_VAR 0 1
49253: NEG
49254: PPUSH
49255: LD_VAR 0 1
49259: PPUSH
49260: CALL_OW 12
49264: ST_TO_ADDR
// end ;
49265: LD_VAR 0 2
49269: RET
// export function PrepareEnchidna ( ) ; begin
49270: LD_INT 0
49272: PPUSH
// uc_side := 0 ;
49273: LD_ADDR_OWVAR 20
49277: PUSH
49278: LD_INT 0
49280: ST_TO_ADDR
// uc_nation := 0 ;
49281: LD_ADDR_OWVAR 21
49285: PUSH
49286: LD_INT 0
49288: ST_TO_ADDR
// hc_class := class_baggie ;
49289: LD_ADDR_OWVAR 28
49293: PUSH
49294: LD_INT 13
49296: ST_TO_ADDR
// hc_gallery :=  ;
49297: LD_ADDR_OWVAR 33
49301: PUSH
49302: LD_STRING 
49304: ST_TO_ADDR
// end ;
49305: LD_VAR 0 1
49309: RET
// export function PrepareFrog ( ) ; begin
49310: LD_INT 0
49312: PPUSH
// uc_side := 0 ;
49313: LD_ADDR_OWVAR 20
49317: PUSH
49318: LD_INT 0
49320: ST_TO_ADDR
// uc_nation := 0 ;
49321: LD_ADDR_OWVAR 21
49325: PUSH
49326: LD_INT 0
49328: ST_TO_ADDR
// hc_class := class_frog ;
49329: LD_ADDR_OWVAR 28
49333: PUSH
49334: LD_INT 19
49336: ST_TO_ADDR
// hc_gallery :=  ;
49337: LD_ADDR_OWVAR 33
49341: PUSH
49342: LD_STRING 
49344: ST_TO_ADDR
// end ;
49345: LD_VAR 0 1
49349: RET
// export function PrepareFish ( ) ; begin
49350: LD_INT 0
49352: PPUSH
// uc_side := 0 ;
49353: LD_ADDR_OWVAR 20
49357: PUSH
49358: LD_INT 0
49360: ST_TO_ADDR
// uc_nation := 0 ;
49361: LD_ADDR_OWVAR 21
49365: PUSH
49366: LD_INT 0
49368: ST_TO_ADDR
// hc_class := class_fish ;
49369: LD_ADDR_OWVAR 28
49373: PUSH
49374: LD_INT 20
49376: ST_TO_ADDR
// hc_gallery :=  ;
49377: LD_ADDR_OWVAR 33
49381: PUSH
49382: LD_STRING 
49384: ST_TO_ADDR
// end ;
49385: LD_VAR 0 1
49389: RET
// export function PrepareBird ( ) ; begin
49390: LD_INT 0
49392: PPUSH
// uc_side := 0 ;
49393: LD_ADDR_OWVAR 20
49397: PUSH
49398: LD_INT 0
49400: ST_TO_ADDR
// uc_nation := 0 ;
49401: LD_ADDR_OWVAR 21
49405: PUSH
49406: LD_INT 0
49408: ST_TO_ADDR
// hc_class := class_phororhacos ;
49409: LD_ADDR_OWVAR 28
49413: PUSH
49414: LD_INT 18
49416: ST_TO_ADDR
// hc_gallery :=  ;
49417: LD_ADDR_OWVAR 33
49421: PUSH
49422: LD_STRING 
49424: ST_TO_ADDR
// end ;
49425: LD_VAR 0 1
49429: RET
// export function PrepareHorse ( ) ; begin
49430: LD_INT 0
49432: PPUSH
// uc_side := 0 ;
49433: LD_ADDR_OWVAR 20
49437: PUSH
49438: LD_INT 0
49440: ST_TO_ADDR
// uc_nation := 0 ;
49441: LD_ADDR_OWVAR 21
49445: PUSH
49446: LD_INT 0
49448: ST_TO_ADDR
// hc_class := class_horse ;
49449: LD_ADDR_OWVAR 28
49453: PUSH
49454: LD_INT 21
49456: ST_TO_ADDR
// hc_gallery :=  ;
49457: LD_ADDR_OWVAR 33
49461: PUSH
49462: LD_STRING 
49464: ST_TO_ADDR
// end ;
49465: LD_VAR 0 1
49469: RET
// export function PrepareMastodont ( ) ; begin
49470: LD_INT 0
49472: PPUSH
// uc_side := 0 ;
49473: LD_ADDR_OWVAR 20
49477: PUSH
49478: LD_INT 0
49480: ST_TO_ADDR
// uc_nation := 0 ;
49481: LD_ADDR_OWVAR 21
49485: PUSH
49486: LD_INT 0
49488: ST_TO_ADDR
// vc_chassis := class_mastodont ;
49489: LD_ADDR_OWVAR 37
49493: PUSH
49494: LD_INT 31
49496: ST_TO_ADDR
// vc_control := control_rider ;
49497: LD_ADDR_OWVAR 38
49501: PUSH
49502: LD_INT 4
49504: ST_TO_ADDR
// end ;
49505: LD_VAR 0 1
49509: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
49510: LD_INT 0
49512: PPUSH
49513: PPUSH
49514: PPUSH
// uc_side = 0 ;
49515: LD_ADDR_OWVAR 20
49519: PUSH
49520: LD_INT 0
49522: ST_TO_ADDR
// uc_nation = 0 ;
49523: LD_ADDR_OWVAR 21
49527: PUSH
49528: LD_INT 0
49530: ST_TO_ADDR
// InitHc_All ( ) ;
49531: CALL_OW 584
// InitVc ;
49535: CALL_OW 20
// if mastodonts then
49539: LD_VAR 0 6
49543: IFFALSE 49610
// for i = 1 to mastodonts do
49545: LD_ADDR_VAR 0 11
49549: PUSH
49550: DOUBLE
49551: LD_INT 1
49553: DEC
49554: ST_TO_ADDR
49555: LD_VAR 0 6
49559: PUSH
49560: FOR_TO
49561: IFFALSE 49608
// begin vc_chassis := 31 ;
49563: LD_ADDR_OWVAR 37
49567: PUSH
49568: LD_INT 31
49570: ST_TO_ADDR
// vc_control := control_rider ;
49571: LD_ADDR_OWVAR 38
49575: PUSH
49576: LD_INT 4
49578: ST_TO_ADDR
// animal := CreateVehicle ;
49579: LD_ADDR_VAR 0 12
49583: PUSH
49584: CALL_OW 45
49588: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49589: LD_VAR 0 12
49593: PPUSH
49594: LD_VAR 0 8
49598: PPUSH
49599: LD_INT 0
49601: PPUSH
49602: CALL 51738 0 3
// end ;
49606: GO 49560
49608: POP
49609: POP
// if horses then
49610: LD_VAR 0 5
49614: IFFALSE 49681
// for i = 1 to horses do
49616: LD_ADDR_VAR 0 11
49620: PUSH
49621: DOUBLE
49622: LD_INT 1
49624: DEC
49625: ST_TO_ADDR
49626: LD_VAR 0 5
49630: PUSH
49631: FOR_TO
49632: IFFALSE 49679
// begin hc_class := 21 ;
49634: LD_ADDR_OWVAR 28
49638: PUSH
49639: LD_INT 21
49641: ST_TO_ADDR
// hc_gallery :=  ;
49642: LD_ADDR_OWVAR 33
49646: PUSH
49647: LD_STRING 
49649: ST_TO_ADDR
// animal := CreateHuman ;
49650: LD_ADDR_VAR 0 12
49654: PUSH
49655: CALL_OW 44
49659: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49660: LD_VAR 0 12
49664: PPUSH
49665: LD_VAR 0 8
49669: PPUSH
49670: LD_INT 0
49672: PPUSH
49673: CALL 51738 0 3
// end ;
49677: GO 49631
49679: POP
49680: POP
// if birds then
49681: LD_VAR 0 1
49685: IFFALSE 49752
// for i = 1 to birds do
49687: LD_ADDR_VAR 0 11
49691: PUSH
49692: DOUBLE
49693: LD_INT 1
49695: DEC
49696: ST_TO_ADDR
49697: LD_VAR 0 1
49701: PUSH
49702: FOR_TO
49703: IFFALSE 49750
// begin hc_class := 18 ;
49705: LD_ADDR_OWVAR 28
49709: PUSH
49710: LD_INT 18
49712: ST_TO_ADDR
// hc_gallery =  ;
49713: LD_ADDR_OWVAR 33
49717: PUSH
49718: LD_STRING 
49720: ST_TO_ADDR
// animal := CreateHuman ;
49721: LD_ADDR_VAR 0 12
49725: PUSH
49726: CALL_OW 44
49730: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49731: LD_VAR 0 12
49735: PPUSH
49736: LD_VAR 0 8
49740: PPUSH
49741: LD_INT 0
49743: PPUSH
49744: CALL 51738 0 3
// end ;
49748: GO 49702
49750: POP
49751: POP
// if tigers then
49752: LD_VAR 0 2
49756: IFFALSE 49840
// for i = 1 to tigers do
49758: LD_ADDR_VAR 0 11
49762: PUSH
49763: DOUBLE
49764: LD_INT 1
49766: DEC
49767: ST_TO_ADDR
49768: LD_VAR 0 2
49772: PUSH
49773: FOR_TO
49774: IFFALSE 49838
// begin hc_class = class_tiger ;
49776: LD_ADDR_OWVAR 28
49780: PUSH
49781: LD_INT 14
49783: ST_TO_ADDR
// hc_gallery =  ;
49784: LD_ADDR_OWVAR 33
49788: PUSH
49789: LD_STRING 
49791: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
49792: LD_ADDR_OWVAR 35
49796: PUSH
49797: LD_INT 7
49799: NEG
49800: PPUSH
49801: LD_INT 7
49803: PPUSH
49804: CALL_OW 12
49808: ST_TO_ADDR
// animal := CreateHuman ;
49809: LD_ADDR_VAR 0 12
49813: PUSH
49814: CALL_OW 44
49818: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49819: LD_VAR 0 12
49823: PPUSH
49824: LD_VAR 0 8
49828: PPUSH
49829: LD_INT 0
49831: PPUSH
49832: CALL 51738 0 3
// end ;
49836: GO 49773
49838: POP
49839: POP
// if apemans then
49840: LD_VAR 0 3
49844: IFFALSE 49967
// for i = 1 to apemans do
49846: LD_ADDR_VAR 0 11
49850: PUSH
49851: DOUBLE
49852: LD_INT 1
49854: DEC
49855: ST_TO_ADDR
49856: LD_VAR 0 3
49860: PUSH
49861: FOR_TO
49862: IFFALSE 49965
// begin hc_class = class_apeman ;
49864: LD_ADDR_OWVAR 28
49868: PUSH
49869: LD_INT 12
49871: ST_TO_ADDR
// hc_gallery =  ;
49872: LD_ADDR_OWVAR 33
49876: PUSH
49877: LD_STRING 
49879: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
49880: LD_ADDR_OWVAR 35
49884: PUSH
49885: LD_INT 2
49887: NEG
49888: PPUSH
49889: LD_INT 2
49891: PPUSH
49892: CALL_OW 12
49896: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
49897: LD_ADDR_OWVAR 31
49901: PUSH
49902: LD_INT 1
49904: PPUSH
49905: LD_INT 3
49907: PPUSH
49908: CALL_OW 12
49912: PUSH
49913: LD_INT 1
49915: PPUSH
49916: LD_INT 3
49918: PPUSH
49919: CALL_OW 12
49923: PUSH
49924: LD_INT 0
49926: PUSH
49927: LD_INT 0
49929: PUSH
49930: EMPTY
49931: LIST
49932: LIST
49933: LIST
49934: LIST
49935: ST_TO_ADDR
// animal := CreateHuman ;
49936: LD_ADDR_VAR 0 12
49940: PUSH
49941: CALL_OW 44
49945: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49946: LD_VAR 0 12
49950: PPUSH
49951: LD_VAR 0 8
49955: PPUSH
49956: LD_INT 0
49958: PPUSH
49959: CALL 51738 0 3
// end ;
49963: GO 49861
49965: POP
49966: POP
// if enchidnas then
49967: LD_VAR 0 4
49971: IFFALSE 50038
// for i = 1 to enchidnas do
49973: LD_ADDR_VAR 0 11
49977: PUSH
49978: DOUBLE
49979: LD_INT 1
49981: DEC
49982: ST_TO_ADDR
49983: LD_VAR 0 4
49987: PUSH
49988: FOR_TO
49989: IFFALSE 50036
// begin hc_class = 13 ;
49991: LD_ADDR_OWVAR 28
49995: PUSH
49996: LD_INT 13
49998: ST_TO_ADDR
// hc_gallery =  ;
49999: LD_ADDR_OWVAR 33
50003: PUSH
50004: LD_STRING 
50006: ST_TO_ADDR
// animal := CreateHuman ;
50007: LD_ADDR_VAR 0 12
50011: PUSH
50012: CALL_OW 44
50016: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50017: LD_VAR 0 12
50021: PPUSH
50022: LD_VAR 0 8
50026: PPUSH
50027: LD_INT 0
50029: PPUSH
50030: CALL 51738 0 3
// end ;
50034: GO 49988
50036: POP
50037: POP
// if fishes then
50038: LD_VAR 0 7
50042: IFFALSE 50109
// for i = 1 to fishes do
50044: LD_ADDR_VAR 0 11
50048: PUSH
50049: DOUBLE
50050: LD_INT 1
50052: DEC
50053: ST_TO_ADDR
50054: LD_VAR 0 7
50058: PUSH
50059: FOR_TO
50060: IFFALSE 50107
// begin hc_class = 20 ;
50062: LD_ADDR_OWVAR 28
50066: PUSH
50067: LD_INT 20
50069: ST_TO_ADDR
// hc_gallery =  ;
50070: LD_ADDR_OWVAR 33
50074: PUSH
50075: LD_STRING 
50077: ST_TO_ADDR
// animal := CreateHuman ;
50078: LD_ADDR_VAR 0 12
50082: PUSH
50083: CALL_OW 44
50087: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
50088: LD_VAR 0 12
50092: PPUSH
50093: LD_VAR 0 9
50097: PPUSH
50098: LD_INT 0
50100: PPUSH
50101: CALL 51738 0 3
// end ;
50105: GO 50059
50107: POP
50108: POP
// end ;
50109: LD_VAR 0 10
50113: RET
// export function WantHeal ( sci , unit ) ; begin
50114: LD_INT 0
50116: PPUSH
// if GetTaskList ( sci ) > 0 then
50117: LD_VAR 0 1
50121: PPUSH
50122: CALL_OW 437
50126: PUSH
50127: LD_INT 0
50129: GREATER
50130: IFFALSE 50200
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
50132: LD_VAR 0 1
50136: PPUSH
50137: CALL_OW 437
50141: PUSH
50142: LD_INT 1
50144: ARRAY
50145: PUSH
50146: LD_INT 1
50148: ARRAY
50149: PUSH
50150: LD_STRING l
50152: EQUAL
50153: PUSH
50154: LD_VAR 0 1
50158: PPUSH
50159: CALL_OW 437
50163: PUSH
50164: LD_INT 1
50166: ARRAY
50167: PUSH
50168: LD_INT 4
50170: ARRAY
50171: PUSH
50172: LD_VAR 0 2
50176: EQUAL
50177: AND
50178: IFFALSE 50190
// result := true else
50180: LD_ADDR_VAR 0 3
50184: PUSH
50185: LD_INT 1
50187: ST_TO_ADDR
50188: GO 50198
// result := false ;
50190: LD_ADDR_VAR 0 3
50194: PUSH
50195: LD_INT 0
50197: ST_TO_ADDR
// end else
50198: GO 50208
// result := false ;
50200: LD_ADDR_VAR 0 3
50204: PUSH
50205: LD_INT 0
50207: ST_TO_ADDR
// end ;
50208: LD_VAR 0 3
50212: RET
// export function HealTarget ( sci ) ; begin
50213: LD_INT 0
50215: PPUSH
// if not sci then
50216: LD_VAR 0 1
50220: NOT
50221: IFFALSE 50225
// exit ;
50223: GO 50290
// result := 0 ;
50225: LD_ADDR_VAR 0 2
50229: PUSH
50230: LD_INT 0
50232: ST_TO_ADDR
// if GetTaskList ( sci ) then
50233: LD_VAR 0 1
50237: PPUSH
50238: CALL_OW 437
50242: IFFALSE 50290
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
50244: LD_VAR 0 1
50248: PPUSH
50249: CALL_OW 437
50253: PUSH
50254: LD_INT 1
50256: ARRAY
50257: PUSH
50258: LD_INT 1
50260: ARRAY
50261: PUSH
50262: LD_STRING l
50264: EQUAL
50265: IFFALSE 50290
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
50267: LD_ADDR_VAR 0 2
50271: PUSH
50272: LD_VAR 0 1
50276: PPUSH
50277: CALL_OW 437
50281: PUSH
50282: LD_INT 1
50284: ARRAY
50285: PUSH
50286: LD_INT 4
50288: ARRAY
50289: ST_TO_ADDR
// end ;
50290: LD_VAR 0 2
50294: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
50295: LD_INT 0
50297: PPUSH
50298: PPUSH
50299: PPUSH
50300: PPUSH
// if not base_units then
50301: LD_VAR 0 1
50305: NOT
50306: IFFALSE 50310
// exit ;
50308: GO 50397
// result := false ;
50310: LD_ADDR_VAR 0 2
50314: PUSH
50315: LD_INT 0
50317: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
50318: LD_ADDR_VAR 0 5
50322: PUSH
50323: LD_VAR 0 1
50327: PPUSH
50328: LD_INT 21
50330: PUSH
50331: LD_INT 3
50333: PUSH
50334: EMPTY
50335: LIST
50336: LIST
50337: PPUSH
50338: CALL_OW 72
50342: ST_TO_ADDR
// if not tmp then
50343: LD_VAR 0 5
50347: NOT
50348: IFFALSE 50352
// exit ;
50350: GO 50397
// for i in tmp do
50352: LD_ADDR_VAR 0 3
50356: PUSH
50357: LD_VAR 0 5
50361: PUSH
50362: FOR_IN
50363: IFFALSE 50395
// begin result := EnemyInRange ( i , 22 ) ;
50365: LD_ADDR_VAR 0 2
50369: PUSH
50370: LD_VAR 0 3
50374: PPUSH
50375: LD_INT 22
50377: PPUSH
50378: CALL 47975 0 2
50382: ST_TO_ADDR
// if result then
50383: LD_VAR 0 2
50387: IFFALSE 50393
// exit ;
50389: POP
50390: POP
50391: GO 50397
// end ;
50393: GO 50362
50395: POP
50396: POP
// end ;
50397: LD_VAR 0 2
50401: RET
// export function FilterByTag ( units , tag ) ; begin
50402: LD_INT 0
50404: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
50405: LD_ADDR_VAR 0 3
50409: PUSH
50410: LD_VAR 0 1
50414: PPUSH
50415: LD_INT 120
50417: PUSH
50418: LD_VAR 0 2
50422: PUSH
50423: EMPTY
50424: LIST
50425: LIST
50426: PPUSH
50427: CALL_OW 72
50431: ST_TO_ADDR
// end ;
50432: LD_VAR 0 3
50436: RET
// export function IsDriver ( un ) ; begin
50437: LD_INT 0
50439: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
50440: LD_ADDR_VAR 0 2
50444: PUSH
50445: LD_VAR 0 1
50449: PUSH
50450: LD_INT 55
50452: PUSH
50453: EMPTY
50454: LIST
50455: PPUSH
50456: CALL_OW 69
50460: IN
50461: ST_TO_ADDR
// end ;
50462: LD_VAR 0 2
50466: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
50467: LD_INT 0
50469: PPUSH
50470: PPUSH
// list := [ ] ;
50471: LD_ADDR_VAR 0 5
50475: PUSH
50476: EMPTY
50477: ST_TO_ADDR
// case d of 0 :
50478: LD_VAR 0 3
50482: PUSH
50483: LD_INT 0
50485: DOUBLE
50486: EQUAL
50487: IFTRUE 50491
50489: GO 50624
50491: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
50492: LD_ADDR_VAR 0 5
50496: PUSH
50497: LD_VAR 0 1
50501: PUSH
50502: LD_INT 4
50504: MINUS
50505: PUSH
50506: LD_VAR 0 2
50510: PUSH
50511: LD_INT 4
50513: MINUS
50514: PUSH
50515: LD_INT 2
50517: PUSH
50518: EMPTY
50519: LIST
50520: LIST
50521: LIST
50522: PUSH
50523: LD_VAR 0 1
50527: PUSH
50528: LD_INT 3
50530: MINUS
50531: PUSH
50532: LD_VAR 0 2
50536: PUSH
50537: LD_INT 1
50539: PUSH
50540: EMPTY
50541: LIST
50542: LIST
50543: LIST
50544: PUSH
50545: LD_VAR 0 1
50549: PUSH
50550: LD_INT 4
50552: PLUS
50553: PUSH
50554: LD_VAR 0 2
50558: PUSH
50559: LD_INT 4
50561: PUSH
50562: EMPTY
50563: LIST
50564: LIST
50565: LIST
50566: PUSH
50567: LD_VAR 0 1
50571: PUSH
50572: LD_INT 3
50574: PLUS
50575: PUSH
50576: LD_VAR 0 2
50580: PUSH
50581: LD_INT 3
50583: PLUS
50584: PUSH
50585: LD_INT 5
50587: PUSH
50588: EMPTY
50589: LIST
50590: LIST
50591: LIST
50592: PUSH
50593: LD_VAR 0 1
50597: PUSH
50598: LD_VAR 0 2
50602: PUSH
50603: LD_INT 4
50605: PLUS
50606: PUSH
50607: LD_INT 0
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: LIST
50614: PUSH
50615: EMPTY
50616: LIST
50617: LIST
50618: LIST
50619: LIST
50620: LIST
50621: ST_TO_ADDR
// end ; 1 :
50622: GO 51322
50624: LD_INT 1
50626: DOUBLE
50627: EQUAL
50628: IFTRUE 50632
50630: GO 50765
50632: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
50633: LD_ADDR_VAR 0 5
50637: PUSH
50638: LD_VAR 0 1
50642: PUSH
50643: LD_VAR 0 2
50647: PUSH
50648: LD_INT 4
50650: MINUS
50651: PUSH
50652: LD_INT 3
50654: PUSH
50655: EMPTY
50656: LIST
50657: LIST
50658: LIST
50659: PUSH
50660: LD_VAR 0 1
50664: PUSH
50665: LD_INT 3
50667: MINUS
50668: PUSH
50669: LD_VAR 0 2
50673: PUSH
50674: LD_INT 3
50676: MINUS
50677: PUSH
50678: LD_INT 2
50680: PUSH
50681: EMPTY
50682: LIST
50683: LIST
50684: LIST
50685: PUSH
50686: LD_VAR 0 1
50690: PUSH
50691: LD_INT 4
50693: MINUS
50694: PUSH
50695: LD_VAR 0 2
50699: PUSH
50700: LD_INT 1
50702: PUSH
50703: EMPTY
50704: LIST
50705: LIST
50706: LIST
50707: PUSH
50708: LD_VAR 0 1
50712: PUSH
50713: LD_VAR 0 2
50717: PUSH
50718: LD_INT 3
50720: PLUS
50721: PUSH
50722: LD_INT 0
50724: PUSH
50725: EMPTY
50726: LIST
50727: LIST
50728: LIST
50729: PUSH
50730: LD_VAR 0 1
50734: PUSH
50735: LD_INT 4
50737: PLUS
50738: PUSH
50739: LD_VAR 0 2
50743: PUSH
50744: LD_INT 4
50746: PLUS
50747: PUSH
50748: LD_INT 5
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: LIST
50755: PUSH
50756: EMPTY
50757: LIST
50758: LIST
50759: LIST
50760: LIST
50761: LIST
50762: ST_TO_ADDR
// end ; 2 :
50763: GO 51322
50765: LD_INT 2
50767: DOUBLE
50768: EQUAL
50769: IFTRUE 50773
50771: GO 50902
50773: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
50774: LD_ADDR_VAR 0 5
50778: PUSH
50779: LD_VAR 0 1
50783: PUSH
50784: LD_VAR 0 2
50788: PUSH
50789: LD_INT 3
50791: MINUS
50792: PUSH
50793: LD_INT 3
50795: PUSH
50796: EMPTY
50797: LIST
50798: LIST
50799: LIST
50800: PUSH
50801: LD_VAR 0 1
50805: PUSH
50806: LD_INT 4
50808: PLUS
50809: PUSH
50810: LD_VAR 0 2
50814: PUSH
50815: LD_INT 4
50817: PUSH
50818: EMPTY
50819: LIST
50820: LIST
50821: LIST
50822: PUSH
50823: LD_VAR 0 1
50827: PUSH
50828: LD_VAR 0 2
50832: PUSH
50833: LD_INT 4
50835: PLUS
50836: PUSH
50837: LD_INT 0
50839: PUSH
50840: EMPTY
50841: LIST
50842: LIST
50843: LIST
50844: PUSH
50845: LD_VAR 0 1
50849: PUSH
50850: LD_INT 3
50852: MINUS
50853: PUSH
50854: LD_VAR 0 2
50858: PUSH
50859: LD_INT 1
50861: PUSH
50862: EMPTY
50863: LIST
50864: LIST
50865: LIST
50866: PUSH
50867: LD_VAR 0 1
50871: PUSH
50872: LD_INT 4
50874: MINUS
50875: PUSH
50876: LD_VAR 0 2
50880: PUSH
50881: LD_INT 4
50883: MINUS
50884: PUSH
50885: LD_INT 2
50887: PUSH
50888: EMPTY
50889: LIST
50890: LIST
50891: LIST
50892: PUSH
50893: EMPTY
50894: LIST
50895: LIST
50896: LIST
50897: LIST
50898: LIST
50899: ST_TO_ADDR
// end ; 3 :
50900: GO 51322
50902: LD_INT 3
50904: DOUBLE
50905: EQUAL
50906: IFTRUE 50910
50908: GO 51043
50910: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
50911: LD_ADDR_VAR 0 5
50915: PUSH
50916: LD_VAR 0 1
50920: PUSH
50921: LD_INT 3
50923: PLUS
50924: PUSH
50925: LD_VAR 0 2
50929: PUSH
50930: LD_INT 4
50932: PUSH
50933: EMPTY
50934: LIST
50935: LIST
50936: LIST
50937: PUSH
50938: LD_VAR 0 1
50942: PUSH
50943: LD_INT 4
50945: PLUS
50946: PUSH
50947: LD_VAR 0 2
50951: PUSH
50952: LD_INT 4
50954: PLUS
50955: PUSH
50956: LD_INT 5
50958: PUSH
50959: EMPTY
50960: LIST
50961: LIST
50962: LIST
50963: PUSH
50964: LD_VAR 0 1
50968: PUSH
50969: LD_INT 4
50971: MINUS
50972: PUSH
50973: LD_VAR 0 2
50977: PUSH
50978: LD_INT 1
50980: PUSH
50981: EMPTY
50982: LIST
50983: LIST
50984: LIST
50985: PUSH
50986: LD_VAR 0 1
50990: PUSH
50991: LD_VAR 0 2
50995: PUSH
50996: LD_INT 4
50998: MINUS
50999: PUSH
51000: LD_INT 3
51002: PUSH
51003: EMPTY
51004: LIST
51005: LIST
51006: LIST
51007: PUSH
51008: LD_VAR 0 1
51012: PUSH
51013: LD_INT 3
51015: MINUS
51016: PUSH
51017: LD_VAR 0 2
51021: PUSH
51022: LD_INT 3
51024: MINUS
51025: PUSH
51026: LD_INT 2
51028: PUSH
51029: EMPTY
51030: LIST
51031: LIST
51032: LIST
51033: PUSH
51034: EMPTY
51035: LIST
51036: LIST
51037: LIST
51038: LIST
51039: LIST
51040: ST_TO_ADDR
// end ; 4 :
51041: GO 51322
51043: LD_INT 4
51045: DOUBLE
51046: EQUAL
51047: IFTRUE 51051
51049: GO 51184
51051: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
51052: LD_ADDR_VAR 0 5
51056: PUSH
51057: LD_VAR 0 1
51061: PUSH
51062: LD_VAR 0 2
51066: PUSH
51067: LD_INT 4
51069: PLUS
51070: PUSH
51071: LD_INT 0
51073: PUSH
51074: EMPTY
51075: LIST
51076: LIST
51077: LIST
51078: PUSH
51079: LD_VAR 0 1
51083: PUSH
51084: LD_INT 3
51086: PLUS
51087: PUSH
51088: LD_VAR 0 2
51092: PUSH
51093: LD_INT 3
51095: PLUS
51096: PUSH
51097: LD_INT 5
51099: PUSH
51100: EMPTY
51101: LIST
51102: LIST
51103: LIST
51104: PUSH
51105: LD_VAR 0 1
51109: PUSH
51110: LD_INT 4
51112: PLUS
51113: PUSH
51114: LD_VAR 0 2
51118: PUSH
51119: LD_INT 4
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: LIST
51126: PUSH
51127: LD_VAR 0 1
51131: PUSH
51132: LD_VAR 0 2
51136: PUSH
51137: LD_INT 3
51139: MINUS
51140: PUSH
51141: LD_INT 3
51143: PUSH
51144: EMPTY
51145: LIST
51146: LIST
51147: LIST
51148: PUSH
51149: LD_VAR 0 1
51153: PUSH
51154: LD_INT 4
51156: MINUS
51157: PUSH
51158: LD_VAR 0 2
51162: PUSH
51163: LD_INT 4
51165: MINUS
51166: PUSH
51167: LD_INT 2
51169: PUSH
51170: EMPTY
51171: LIST
51172: LIST
51173: LIST
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: LIST
51179: LIST
51180: LIST
51181: ST_TO_ADDR
// end ; 5 :
51182: GO 51322
51184: LD_INT 5
51186: DOUBLE
51187: EQUAL
51188: IFTRUE 51192
51190: GO 51321
51192: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
51193: LD_ADDR_VAR 0 5
51197: PUSH
51198: LD_VAR 0 1
51202: PUSH
51203: LD_INT 4
51205: MINUS
51206: PUSH
51207: LD_VAR 0 2
51211: PUSH
51212: LD_INT 1
51214: PUSH
51215: EMPTY
51216: LIST
51217: LIST
51218: LIST
51219: PUSH
51220: LD_VAR 0 1
51224: PUSH
51225: LD_VAR 0 2
51229: PUSH
51230: LD_INT 4
51232: MINUS
51233: PUSH
51234: LD_INT 3
51236: PUSH
51237: EMPTY
51238: LIST
51239: LIST
51240: LIST
51241: PUSH
51242: LD_VAR 0 1
51246: PUSH
51247: LD_INT 4
51249: PLUS
51250: PUSH
51251: LD_VAR 0 2
51255: PUSH
51256: LD_INT 4
51258: PLUS
51259: PUSH
51260: LD_INT 5
51262: PUSH
51263: EMPTY
51264: LIST
51265: LIST
51266: LIST
51267: PUSH
51268: LD_VAR 0 1
51272: PUSH
51273: LD_INT 3
51275: PLUS
51276: PUSH
51277: LD_VAR 0 2
51281: PUSH
51282: LD_INT 4
51284: PUSH
51285: EMPTY
51286: LIST
51287: LIST
51288: LIST
51289: PUSH
51290: LD_VAR 0 1
51294: PUSH
51295: LD_VAR 0 2
51299: PUSH
51300: LD_INT 3
51302: PLUS
51303: PUSH
51304: LD_INT 0
51306: PUSH
51307: EMPTY
51308: LIST
51309: LIST
51310: LIST
51311: PUSH
51312: EMPTY
51313: LIST
51314: LIST
51315: LIST
51316: LIST
51317: LIST
51318: ST_TO_ADDR
// end ; end ;
51319: GO 51322
51321: POP
// result := list ;
51322: LD_ADDR_VAR 0 4
51326: PUSH
51327: LD_VAR 0 5
51331: ST_TO_ADDR
// end ;
51332: LD_VAR 0 4
51336: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
51337: LD_INT 0
51339: PPUSH
51340: PPUSH
51341: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
51342: LD_VAR 0 1
51346: NOT
51347: PUSH
51348: LD_VAR 0 2
51352: PUSH
51353: LD_INT 1
51355: PUSH
51356: LD_INT 2
51358: PUSH
51359: LD_INT 3
51361: PUSH
51362: LD_INT 4
51364: PUSH
51365: EMPTY
51366: LIST
51367: LIST
51368: LIST
51369: LIST
51370: IN
51371: NOT
51372: OR
51373: IFFALSE 51377
// exit ;
51375: GO 51460
// tmp := [ ] ;
51377: LD_ADDR_VAR 0 5
51381: PUSH
51382: EMPTY
51383: ST_TO_ADDR
// for i in units do
51384: LD_ADDR_VAR 0 4
51388: PUSH
51389: LD_VAR 0 1
51393: PUSH
51394: FOR_IN
51395: IFFALSE 51429
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
51397: LD_ADDR_VAR 0 5
51401: PUSH
51402: LD_VAR 0 5
51406: PPUSH
51407: LD_VAR 0 4
51411: PPUSH
51412: LD_VAR 0 2
51416: PPUSH
51417: CALL_OW 259
51421: PPUSH
51422: CALL 52833 0 2
51426: ST_TO_ADDR
51427: GO 51394
51429: POP
51430: POP
// if not tmp then
51431: LD_VAR 0 5
51435: NOT
51436: IFFALSE 51440
// exit ;
51438: GO 51460
// result := SortListByListDesc ( units , tmp ) ;
51440: LD_ADDR_VAR 0 3
51444: PUSH
51445: LD_VAR 0 1
51449: PPUSH
51450: LD_VAR 0 5
51454: PPUSH
51455: CALL_OW 77
51459: ST_TO_ADDR
// end ;
51460: LD_VAR 0 3
51464: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
51465: LD_INT 0
51467: PPUSH
51468: PPUSH
51469: PPUSH
// result := false ;
51470: LD_ADDR_VAR 0 3
51474: PUSH
51475: LD_INT 0
51477: ST_TO_ADDR
// if not building then
51478: LD_VAR 0 2
51482: NOT
51483: IFFALSE 51487
// exit ;
51485: GO 51625
// x := GetX ( building ) ;
51487: LD_ADDR_VAR 0 4
51491: PUSH
51492: LD_VAR 0 2
51496: PPUSH
51497: CALL_OW 250
51501: ST_TO_ADDR
// y := GetY ( building ) ;
51502: LD_ADDR_VAR 0 5
51506: PUSH
51507: LD_VAR 0 2
51511: PPUSH
51512: CALL_OW 251
51516: ST_TO_ADDR
// if not x or not y then
51517: LD_VAR 0 4
51521: NOT
51522: PUSH
51523: LD_VAR 0 5
51527: NOT
51528: OR
51529: IFFALSE 51533
// exit ;
51531: GO 51625
// if GetTaskList ( unit ) then
51533: LD_VAR 0 1
51537: PPUSH
51538: CALL_OW 437
51542: IFFALSE 51625
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
51544: LD_STRING e
51546: PUSH
51547: LD_VAR 0 1
51551: PPUSH
51552: CALL_OW 437
51556: PUSH
51557: LD_INT 1
51559: ARRAY
51560: PUSH
51561: LD_INT 1
51563: ARRAY
51564: EQUAL
51565: PUSH
51566: LD_VAR 0 4
51570: PUSH
51571: LD_VAR 0 1
51575: PPUSH
51576: CALL_OW 437
51580: PUSH
51581: LD_INT 1
51583: ARRAY
51584: PUSH
51585: LD_INT 2
51587: ARRAY
51588: EQUAL
51589: AND
51590: PUSH
51591: LD_VAR 0 5
51595: PUSH
51596: LD_VAR 0 1
51600: PPUSH
51601: CALL_OW 437
51605: PUSH
51606: LD_INT 1
51608: ARRAY
51609: PUSH
51610: LD_INT 3
51612: ARRAY
51613: EQUAL
51614: AND
51615: IFFALSE 51625
// result := true end ;
51617: LD_ADDR_VAR 0 3
51621: PUSH
51622: LD_INT 1
51624: ST_TO_ADDR
// end ;
51625: LD_VAR 0 3
51629: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
51630: LD_INT 0
51632: PPUSH
// result := false ;
51633: LD_ADDR_VAR 0 4
51637: PUSH
51638: LD_INT 0
51640: ST_TO_ADDR
// if GetTaskList ( unit ) then
51641: LD_VAR 0 1
51645: PPUSH
51646: CALL_OW 437
51650: IFFALSE 51733
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
51652: LD_STRING M
51654: PUSH
51655: LD_VAR 0 1
51659: PPUSH
51660: CALL_OW 437
51664: PUSH
51665: LD_INT 1
51667: ARRAY
51668: PUSH
51669: LD_INT 1
51671: ARRAY
51672: EQUAL
51673: PUSH
51674: LD_VAR 0 2
51678: PUSH
51679: LD_VAR 0 1
51683: PPUSH
51684: CALL_OW 437
51688: PUSH
51689: LD_INT 1
51691: ARRAY
51692: PUSH
51693: LD_INT 2
51695: ARRAY
51696: EQUAL
51697: AND
51698: PUSH
51699: LD_VAR 0 3
51703: PUSH
51704: LD_VAR 0 1
51708: PPUSH
51709: CALL_OW 437
51713: PUSH
51714: LD_INT 1
51716: ARRAY
51717: PUSH
51718: LD_INT 3
51720: ARRAY
51721: EQUAL
51722: AND
51723: IFFALSE 51733
// result := true ;
51725: LD_ADDR_VAR 0 4
51729: PUSH
51730: LD_INT 1
51732: ST_TO_ADDR
// end ; end ;
51733: LD_VAR 0 4
51737: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
51738: LD_INT 0
51740: PPUSH
51741: PPUSH
51742: PPUSH
51743: PPUSH
// if not unit or not area then
51744: LD_VAR 0 1
51748: NOT
51749: PUSH
51750: LD_VAR 0 2
51754: NOT
51755: OR
51756: IFFALSE 51760
// exit ;
51758: GO 51936
// tmp := AreaToList ( area , i ) ;
51760: LD_ADDR_VAR 0 6
51764: PUSH
51765: LD_VAR 0 2
51769: PPUSH
51770: LD_VAR 0 5
51774: PPUSH
51775: CALL_OW 517
51779: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
51780: LD_ADDR_VAR 0 5
51784: PUSH
51785: DOUBLE
51786: LD_INT 1
51788: DEC
51789: ST_TO_ADDR
51790: LD_VAR 0 6
51794: PUSH
51795: LD_INT 1
51797: ARRAY
51798: PUSH
51799: FOR_TO
51800: IFFALSE 51934
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
51802: LD_ADDR_VAR 0 7
51806: PUSH
51807: LD_VAR 0 6
51811: PUSH
51812: LD_INT 1
51814: ARRAY
51815: PUSH
51816: LD_VAR 0 5
51820: ARRAY
51821: PUSH
51822: LD_VAR 0 6
51826: PUSH
51827: LD_INT 2
51829: ARRAY
51830: PUSH
51831: LD_VAR 0 5
51835: ARRAY
51836: PUSH
51837: EMPTY
51838: LIST
51839: LIST
51840: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
51841: LD_INT 92
51843: PUSH
51844: LD_VAR 0 7
51848: PUSH
51849: LD_INT 1
51851: ARRAY
51852: PUSH
51853: LD_VAR 0 7
51857: PUSH
51858: LD_INT 2
51860: ARRAY
51861: PUSH
51862: LD_INT 2
51864: PUSH
51865: EMPTY
51866: LIST
51867: LIST
51868: LIST
51869: LIST
51870: PPUSH
51871: CALL_OW 69
51875: PUSH
51876: LD_INT 0
51878: EQUAL
51879: IFFALSE 51932
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
51881: LD_VAR 0 1
51885: PPUSH
51886: LD_VAR 0 7
51890: PUSH
51891: LD_INT 1
51893: ARRAY
51894: PPUSH
51895: LD_VAR 0 7
51899: PUSH
51900: LD_INT 2
51902: ARRAY
51903: PPUSH
51904: LD_VAR 0 3
51908: PPUSH
51909: CALL_OW 48
// result := IsPlaced ( unit ) ;
51913: LD_ADDR_VAR 0 4
51917: PUSH
51918: LD_VAR 0 1
51922: PPUSH
51923: CALL_OW 305
51927: ST_TO_ADDR
// exit ;
51928: POP
51929: POP
51930: GO 51936
// end ; end ;
51932: GO 51799
51934: POP
51935: POP
// end ;
51936: LD_VAR 0 4
51940: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
51941: LD_INT 0
51943: PPUSH
51944: PPUSH
51945: PPUSH
// if not side or side > 8 then
51946: LD_VAR 0 1
51950: NOT
51951: PUSH
51952: LD_VAR 0 1
51956: PUSH
51957: LD_INT 8
51959: GREATER
51960: OR
51961: IFFALSE 51965
// exit ;
51963: GO 52152
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
51965: LD_ADDR_VAR 0 4
51969: PUSH
51970: LD_INT 22
51972: PUSH
51973: LD_VAR 0 1
51977: PUSH
51978: EMPTY
51979: LIST
51980: LIST
51981: PUSH
51982: LD_INT 21
51984: PUSH
51985: LD_INT 3
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: PUSH
51992: EMPTY
51993: LIST
51994: LIST
51995: PPUSH
51996: CALL_OW 69
52000: ST_TO_ADDR
// if not tmp then
52001: LD_VAR 0 4
52005: NOT
52006: IFFALSE 52010
// exit ;
52008: GO 52152
// enable_addtolog := true ;
52010: LD_ADDR_OWVAR 81
52014: PUSH
52015: LD_INT 1
52017: ST_TO_ADDR
// AddToLog ( [ ) ;
52018: LD_STRING [
52020: PPUSH
52021: CALL_OW 561
// for i in tmp do
52025: LD_ADDR_VAR 0 3
52029: PUSH
52030: LD_VAR 0 4
52034: PUSH
52035: FOR_IN
52036: IFFALSE 52143
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
52038: LD_STRING [
52040: PUSH
52041: LD_VAR 0 3
52045: PPUSH
52046: CALL_OW 266
52050: STR
52051: PUSH
52052: LD_STRING , 
52054: STR
52055: PUSH
52056: LD_VAR 0 3
52060: PPUSH
52061: CALL_OW 250
52065: STR
52066: PUSH
52067: LD_STRING , 
52069: STR
52070: PUSH
52071: LD_VAR 0 3
52075: PPUSH
52076: CALL_OW 251
52080: STR
52081: PUSH
52082: LD_STRING , 
52084: STR
52085: PUSH
52086: LD_VAR 0 3
52090: PPUSH
52091: CALL_OW 254
52095: STR
52096: PUSH
52097: LD_STRING , 
52099: STR
52100: PUSH
52101: LD_VAR 0 3
52105: PPUSH
52106: LD_INT 1
52108: PPUSH
52109: CALL_OW 268
52113: STR
52114: PUSH
52115: LD_STRING , 
52117: STR
52118: PUSH
52119: LD_VAR 0 3
52123: PPUSH
52124: LD_INT 2
52126: PPUSH
52127: CALL_OW 268
52131: STR
52132: PUSH
52133: LD_STRING ],
52135: STR
52136: PPUSH
52137: CALL_OW 561
// end ;
52141: GO 52035
52143: POP
52144: POP
// AddToLog ( ]; ) ;
52145: LD_STRING ];
52147: PPUSH
52148: CALL_OW 561
// end ;
52152: LD_VAR 0 2
52156: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
52157: LD_INT 0
52159: PPUSH
52160: PPUSH
52161: PPUSH
52162: PPUSH
52163: PPUSH
// if not area or not rate or not max then
52164: LD_VAR 0 1
52168: NOT
52169: PUSH
52170: LD_VAR 0 2
52174: NOT
52175: OR
52176: PUSH
52177: LD_VAR 0 4
52181: NOT
52182: OR
52183: IFFALSE 52187
// exit ;
52185: GO 52376
// while 1 do
52187: LD_INT 1
52189: IFFALSE 52376
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
52191: LD_ADDR_VAR 0 9
52195: PUSH
52196: LD_VAR 0 1
52200: PPUSH
52201: LD_INT 1
52203: PPUSH
52204: CALL_OW 287
52208: PUSH
52209: LD_INT 10
52211: MUL
52212: ST_TO_ADDR
// r := rate / 10 ;
52213: LD_ADDR_VAR 0 7
52217: PUSH
52218: LD_VAR 0 2
52222: PUSH
52223: LD_INT 10
52225: DIVREAL
52226: ST_TO_ADDR
// time := 1 1$00 ;
52227: LD_ADDR_VAR 0 8
52231: PUSH
52232: LD_INT 2100
52234: ST_TO_ADDR
// if amount < min then
52235: LD_VAR 0 9
52239: PUSH
52240: LD_VAR 0 3
52244: LESS
52245: IFFALSE 52263
// r := r * 2 else
52247: LD_ADDR_VAR 0 7
52251: PUSH
52252: LD_VAR 0 7
52256: PUSH
52257: LD_INT 2
52259: MUL
52260: ST_TO_ADDR
52261: GO 52289
// if amount > max then
52263: LD_VAR 0 9
52267: PUSH
52268: LD_VAR 0 4
52272: GREATER
52273: IFFALSE 52289
// r := r / 2 ;
52275: LD_ADDR_VAR 0 7
52279: PUSH
52280: LD_VAR 0 7
52284: PUSH
52285: LD_INT 2
52287: DIVREAL
52288: ST_TO_ADDR
// time := time / r ;
52289: LD_ADDR_VAR 0 8
52293: PUSH
52294: LD_VAR 0 8
52298: PUSH
52299: LD_VAR 0 7
52303: DIVREAL
52304: ST_TO_ADDR
// if time < 0 then
52305: LD_VAR 0 8
52309: PUSH
52310: LD_INT 0
52312: LESS
52313: IFFALSE 52330
// time := time * - 1 ;
52315: LD_ADDR_VAR 0 8
52319: PUSH
52320: LD_VAR 0 8
52324: PUSH
52325: LD_INT 1
52327: NEG
52328: MUL
52329: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
52330: LD_VAR 0 8
52334: PUSH
52335: LD_INT 35
52337: PPUSH
52338: LD_INT 875
52340: PPUSH
52341: CALL_OW 12
52345: PLUS
52346: PPUSH
52347: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
52351: LD_INT 1
52353: PPUSH
52354: LD_INT 5
52356: PPUSH
52357: CALL_OW 12
52361: PPUSH
52362: LD_VAR 0 1
52366: PPUSH
52367: LD_INT 1
52369: PPUSH
52370: CALL_OW 55
// end ;
52374: GO 52187
// end ;
52376: LD_VAR 0 5
52380: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
52381: LD_INT 0
52383: PPUSH
52384: PPUSH
52385: PPUSH
52386: PPUSH
52387: PPUSH
52388: PPUSH
52389: PPUSH
52390: PPUSH
// if not turrets or not factories then
52391: LD_VAR 0 1
52395: NOT
52396: PUSH
52397: LD_VAR 0 2
52401: NOT
52402: OR
52403: IFFALSE 52407
// exit ;
52405: GO 52714
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
52407: LD_ADDR_VAR 0 10
52411: PUSH
52412: LD_INT 5
52414: PUSH
52415: LD_INT 6
52417: PUSH
52418: EMPTY
52419: LIST
52420: LIST
52421: PUSH
52422: LD_INT 2
52424: PUSH
52425: LD_INT 4
52427: PUSH
52428: EMPTY
52429: LIST
52430: LIST
52431: PUSH
52432: LD_INT 3
52434: PUSH
52435: LD_INT 5
52437: PUSH
52438: EMPTY
52439: LIST
52440: LIST
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: LIST
52446: PUSH
52447: LD_INT 24
52449: PUSH
52450: LD_INT 25
52452: PUSH
52453: EMPTY
52454: LIST
52455: LIST
52456: PUSH
52457: LD_INT 23
52459: PUSH
52460: LD_INT 27
52462: PUSH
52463: EMPTY
52464: LIST
52465: LIST
52466: PUSH
52467: EMPTY
52468: LIST
52469: LIST
52470: PUSH
52471: LD_INT 42
52473: PUSH
52474: LD_INT 43
52476: PUSH
52477: EMPTY
52478: LIST
52479: LIST
52480: PUSH
52481: LD_INT 44
52483: PUSH
52484: LD_INT 46
52486: PUSH
52487: EMPTY
52488: LIST
52489: LIST
52490: PUSH
52491: LD_INT 45
52493: PUSH
52494: LD_INT 47
52496: PUSH
52497: EMPTY
52498: LIST
52499: LIST
52500: PUSH
52501: EMPTY
52502: LIST
52503: LIST
52504: LIST
52505: PUSH
52506: EMPTY
52507: LIST
52508: LIST
52509: LIST
52510: ST_TO_ADDR
// result := [ ] ;
52511: LD_ADDR_VAR 0 3
52515: PUSH
52516: EMPTY
52517: ST_TO_ADDR
// for i in turrets do
52518: LD_ADDR_VAR 0 4
52522: PUSH
52523: LD_VAR 0 1
52527: PUSH
52528: FOR_IN
52529: IFFALSE 52712
// begin nat := GetNation ( i ) ;
52531: LD_ADDR_VAR 0 7
52535: PUSH
52536: LD_VAR 0 4
52540: PPUSH
52541: CALL_OW 248
52545: ST_TO_ADDR
// weapon := 0 ;
52546: LD_ADDR_VAR 0 8
52550: PUSH
52551: LD_INT 0
52553: ST_TO_ADDR
// if not nat then
52554: LD_VAR 0 7
52558: NOT
52559: IFFALSE 52563
// continue ;
52561: GO 52528
// for j in list [ nat ] do
52563: LD_ADDR_VAR 0 5
52567: PUSH
52568: LD_VAR 0 10
52572: PUSH
52573: LD_VAR 0 7
52577: ARRAY
52578: PUSH
52579: FOR_IN
52580: IFFALSE 52621
// if GetBWeapon ( i ) = j [ 1 ] then
52582: LD_VAR 0 4
52586: PPUSH
52587: CALL_OW 269
52591: PUSH
52592: LD_VAR 0 5
52596: PUSH
52597: LD_INT 1
52599: ARRAY
52600: EQUAL
52601: IFFALSE 52619
// begin weapon := j [ 2 ] ;
52603: LD_ADDR_VAR 0 8
52607: PUSH
52608: LD_VAR 0 5
52612: PUSH
52613: LD_INT 2
52615: ARRAY
52616: ST_TO_ADDR
// break ;
52617: GO 52621
// end ;
52619: GO 52579
52621: POP
52622: POP
// if not weapon then
52623: LD_VAR 0 8
52627: NOT
52628: IFFALSE 52632
// continue ;
52630: GO 52528
// for k in factories do
52632: LD_ADDR_VAR 0 6
52636: PUSH
52637: LD_VAR 0 2
52641: PUSH
52642: FOR_IN
52643: IFFALSE 52708
// begin weapons := AvailableWeaponList ( k ) ;
52645: LD_ADDR_VAR 0 9
52649: PUSH
52650: LD_VAR 0 6
52654: PPUSH
52655: CALL_OW 478
52659: ST_TO_ADDR
// if not weapons then
52660: LD_VAR 0 9
52664: NOT
52665: IFFALSE 52669
// continue ;
52667: GO 52642
// if weapon in weapons then
52669: LD_VAR 0 8
52673: PUSH
52674: LD_VAR 0 9
52678: IN
52679: IFFALSE 52706
// begin result := [ i , weapon ] ;
52681: LD_ADDR_VAR 0 3
52685: PUSH
52686: LD_VAR 0 4
52690: PUSH
52691: LD_VAR 0 8
52695: PUSH
52696: EMPTY
52697: LIST
52698: LIST
52699: ST_TO_ADDR
// exit ;
52700: POP
52701: POP
52702: POP
52703: POP
52704: GO 52714
// end ; end ;
52706: GO 52642
52708: POP
52709: POP
// end ;
52710: GO 52528
52712: POP
52713: POP
// end ;
52714: LD_VAR 0 3
52718: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
52719: LD_INT 0
52721: PPUSH
// if not side or side > 8 then
52722: LD_VAR 0 3
52726: NOT
52727: PUSH
52728: LD_VAR 0 3
52732: PUSH
52733: LD_INT 8
52735: GREATER
52736: OR
52737: IFFALSE 52741
// exit ;
52739: GO 52800
// if not range then
52741: LD_VAR 0 4
52745: NOT
52746: IFFALSE 52757
// range := - 12 ;
52748: LD_ADDR_VAR 0 4
52752: PUSH
52753: LD_INT 12
52755: NEG
52756: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
52757: LD_VAR 0 1
52761: PPUSH
52762: LD_VAR 0 2
52766: PPUSH
52767: LD_VAR 0 3
52771: PPUSH
52772: LD_VAR 0 4
52776: PPUSH
52777: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
52781: LD_VAR 0 1
52785: PPUSH
52786: LD_VAR 0 2
52790: PPUSH
52791: LD_VAR 0 3
52795: PPUSH
52796: CALL_OW 331
// end ;
52800: LD_VAR 0 5
52804: RET
// export function Video ( mode ) ; begin
52805: LD_INT 0
52807: PPUSH
// ingame_video = mode ;
52808: LD_ADDR_OWVAR 52
52812: PUSH
52813: LD_VAR 0 1
52817: ST_TO_ADDR
// interface_hidden = mode ;
52818: LD_ADDR_OWVAR 54
52822: PUSH
52823: LD_VAR 0 1
52827: ST_TO_ADDR
// end ;
52828: LD_VAR 0 2
52832: RET
// export function Join ( array , element ) ; begin
52833: LD_INT 0
52835: PPUSH
// result := Replace ( array , array + 1 , element ) ;
52836: LD_ADDR_VAR 0 3
52840: PUSH
52841: LD_VAR 0 1
52845: PPUSH
52846: LD_VAR 0 1
52850: PUSH
52851: LD_INT 1
52853: PLUS
52854: PPUSH
52855: LD_VAR 0 2
52859: PPUSH
52860: CALL_OW 1
52864: ST_TO_ADDR
// end ;
52865: LD_VAR 0 3
52869: RET
// export function JoinUnion ( array , element ) ; begin
52870: LD_INT 0
52872: PPUSH
// result := array union element ;
52873: LD_ADDR_VAR 0 3
52877: PUSH
52878: LD_VAR 0 1
52882: PUSH
52883: LD_VAR 0 2
52887: UNION
52888: ST_TO_ADDR
// end ;
52889: LD_VAR 0 3
52893: RET
// export function GetBehemoths ( side ) ; begin
52894: LD_INT 0
52896: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
52897: LD_ADDR_VAR 0 2
52901: PUSH
52902: LD_INT 22
52904: PUSH
52905: LD_VAR 0 1
52909: PUSH
52910: EMPTY
52911: LIST
52912: LIST
52913: PUSH
52914: LD_INT 31
52916: PUSH
52917: LD_INT 25
52919: PUSH
52920: EMPTY
52921: LIST
52922: LIST
52923: PUSH
52924: EMPTY
52925: LIST
52926: LIST
52927: PPUSH
52928: CALL_OW 69
52932: ST_TO_ADDR
// end ;
52933: LD_VAR 0 2
52937: RET
// export function Shuffle ( array ) ; var i , index ; begin
52938: LD_INT 0
52940: PPUSH
52941: PPUSH
52942: PPUSH
// result := [ ] ;
52943: LD_ADDR_VAR 0 2
52947: PUSH
52948: EMPTY
52949: ST_TO_ADDR
// if not array then
52950: LD_VAR 0 1
52954: NOT
52955: IFFALSE 52959
// exit ;
52957: GO 53058
// Randomize ;
52959: CALL_OW 10
// for i = array downto 1 do
52963: LD_ADDR_VAR 0 3
52967: PUSH
52968: DOUBLE
52969: LD_VAR 0 1
52973: INC
52974: ST_TO_ADDR
52975: LD_INT 1
52977: PUSH
52978: FOR_DOWNTO
52979: IFFALSE 53056
// begin index := rand ( 1 , array ) ;
52981: LD_ADDR_VAR 0 4
52985: PUSH
52986: LD_INT 1
52988: PPUSH
52989: LD_VAR 0 1
52993: PPUSH
52994: CALL_OW 12
52998: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
52999: LD_ADDR_VAR 0 2
53003: PUSH
53004: LD_VAR 0 2
53008: PPUSH
53009: LD_VAR 0 2
53013: PUSH
53014: LD_INT 1
53016: PLUS
53017: PPUSH
53018: LD_VAR 0 1
53022: PUSH
53023: LD_VAR 0 4
53027: ARRAY
53028: PPUSH
53029: CALL_OW 2
53033: ST_TO_ADDR
// array := Delete ( array , index ) ;
53034: LD_ADDR_VAR 0 1
53038: PUSH
53039: LD_VAR 0 1
53043: PPUSH
53044: LD_VAR 0 4
53048: PPUSH
53049: CALL_OW 3
53053: ST_TO_ADDR
// end ;
53054: GO 52978
53056: POP
53057: POP
// end ;
53058: LD_VAR 0 2
53062: RET
// export function GetBaseMaterials ( base ) ; begin
53063: LD_INT 0
53065: PPUSH
// result := [ 0 , 0 , 0 ] ;
53066: LD_ADDR_VAR 0 2
53070: PUSH
53071: LD_INT 0
53073: PUSH
53074: LD_INT 0
53076: PUSH
53077: LD_INT 0
53079: PUSH
53080: EMPTY
53081: LIST
53082: LIST
53083: LIST
53084: ST_TO_ADDR
// if not base then
53085: LD_VAR 0 1
53089: NOT
53090: IFFALSE 53094
// exit ;
53092: GO 53143
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
53094: LD_ADDR_VAR 0 2
53098: PUSH
53099: LD_VAR 0 1
53103: PPUSH
53104: LD_INT 1
53106: PPUSH
53107: CALL_OW 275
53111: PUSH
53112: LD_VAR 0 1
53116: PPUSH
53117: LD_INT 2
53119: PPUSH
53120: CALL_OW 275
53124: PUSH
53125: LD_VAR 0 1
53129: PPUSH
53130: LD_INT 3
53132: PPUSH
53133: CALL_OW 275
53137: PUSH
53138: EMPTY
53139: LIST
53140: LIST
53141: LIST
53142: ST_TO_ADDR
// end ;
53143: LD_VAR 0 2
53147: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
53148: LD_INT 0
53150: PPUSH
53151: PPUSH
// result := array ;
53152: LD_ADDR_VAR 0 3
53156: PUSH
53157: LD_VAR 0 1
53161: ST_TO_ADDR
// if size >= result then
53162: LD_VAR 0 2
53166: PUSH
53167: LD_VAR 0 3
53171: GREATEREQUAL
53172: IFFALSE 53176
// exit ;
53174: GO 53226
// if size then
53176: LD_VAR 0 2
53180: IFFALSE 53226
// for i := array downto size do
53182: LD_ADDR_VAR 0 4
53186: PUSH
53187: DOUBLE
53188: LD_VAR 0 1
53192: INC
53193: ST_TO_ADDR
53194: LD_VAR 0 2
53198: PUSH
53199: FOR_DOWNTO
53200: IFFALSE 53224
// result := Delete ( result , result ) ;
53202: LD_ADDR_VAR 0 3
53206: PUSH
53207: LD_VAR 0 3
53211: PPUSH
53212: LD_VAR 0 3
53216: PPUSH
53217: CALL_OW 3
53221: ST_TO_ADDR
53222: GO 53199
53224: POP
53225: POP
// end ;
53226: LD_VAR 0 3
53230: RET
// export function ComExit ( unit ) ; var tmp ; begin
53231: LD_INT 0
53233: PPUSH
53234: PPUSH
// if not IsInUnit ( unit ) then
53235: LD_VAR 0 1
53239: PPUSH
53240: CALL_OW 310
53244: NOT
53245: IFFALSE 53249
// exit ;
53247: GO 53309
// tmp := IsInUnit ( unit ) ;
53249: LD_ADDR_VAR 0 3
53253: PUSH
53254: LD_VAR 0 1
53258: PPUSH
53259: CALL_OW 310
53263: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
53264: LD_VAR 0 3
53268: PPUSH
53269: CALL_OW 247
53273: PUSH
53274: LD_INT 2
53276: EQUAL
53277: IFFALSE 53290
// ComExitVehicle ( unit ) else
53279: LD_VAR 0 1
53283: PPUSH
53284: CALL_OW 121
53288: GO 53299
// ComExitBuilding ( unit ) ;
53290: LD_VAR 0 1
53294: PPUSH
53295: CALL_OW 122
// result := tmp ;
53299: LD_ADDR_VAR 0 2
53303: PUSH
53304: LD_VAR 0 3
53308: ST_TO_ADDR
// end ;
53309: LD_VAR 0 2
53313: RET
// export function ComExitAll ( units ) ; var i ; begin
53314: LD_INT 0
53316: PPUSH
53317: PPUSH
// if not units then
53318: LD_VAR 0 1
53322: NOT
53323: IFFALSE 53327
// exit ;
53325: GO 53353
// for i in units do
53327: LD_ADDR_VAR 0 3
53331: PUSH
53332: LD_VAR 0 1
53336: PUSH
53337: FOR_IN
53338: IFFALSE 53351
// ComExit ( i ) ;
53340: LD_VAR 0 3
53344: PPUSH
53345: CALL 53231 0 1
53349: GO 53337
53351: POP
53352: POP
// end ;
53353: LD_VAR 0 2
53357: RET
// export function ResetHc ; begin
53358: LD_INT 0
53360: PPUSH
// InitHc ;
53361: CALL_OW 19
// hc_importance := 0 ;
53365: LD_ADDR_OWVAR 32
53369: PUSH
53370: LD_INT 0
53372: ST_TO_ADDR
// end ;
53373: LD_VAR 0 1
53377: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
53378: LD_INT 0
53380: PPUSH
53381: PPUSH
53382: PPUSH
// _x := ( x1 + x2 ) div 2 ;
53383: LD_ADDR_VAR 0 6
53387: PUSH
53388: LD_VAR 0 1
53392: PUSH
53393: LD_VAR 0 3
53397: PLUS
53398: PUSH
53399: LD_INT 2
53401: DIV
53402: ST_TO_ADDR
// if _x < 0 then
53403: LD_VAR 0 6
53407: PUSH
53408: LD_INT 0
53410: LESS
53411: IFFALSE 53428
// _x := _x * - 1 ;
53413: LD_ADDR_VAR 0 6
53417: PUSH
53418: LD_VAR 0 6
53422: PUSH
53423: LD_INT 1
53425: NEG
53426: MUL
53427: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
53428: LD_ADDR_VAR 0 7
53432: PUSH
53433: LD_VAR 0 2
53437: PUSH
53438: LD_VAR 0 4
53442: PLUS
53443: PUSH
53444: LD_INT 2
53446: DIV
53447: ST_TO_ADDR
// if _y < 0 then
53448: LD_VAR 0 7
53452: PUSH
53453: LD_INT 0
53455: LESS
53456: IFFALSE 53473
// _y := _y * - 1 ;
53458: LD_ADDR_VAR 0 7
53462: PUSH
53463: LD_VAR 0 7
53467: PUSH
53468: LD_INT 1
53470: NEG
53471: MUL
53472: ST_TO_ADDR
// result := [ _x , _y ] ;
53473: LD_ADDR_VAR 0 5
53477: PUSH
53478: LD_VAR 0 6
53482: PUSH
53483: LD_VAR 0 7
53487: PUSH
53488: EMPTY
53489: LIST
53490: LIST
53491: ST_TO_ADDR
// end ;
53492: LD_VAR 0 5
53496: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
53497: LD_INT 0
53499: PPUSH
53500: PPUSH
53501: PPUSH
53502: PPUSH
// task := GetTaskList ( unit ) ;
53503: LD_ADDR_VAR 0 7
53507: PUSH
53508: LD_VAR 0 1
53512: PPUSH
53513: CALL_OW 437
53517: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
53518: LD_VAR 0 7
53522: NOT
53523: PUSH
53524: LD_VAR 0 1
53528: PPUSH
53529: LD_VAR 0 2
53533: PPUSH
53534: CALL_OW 308
53538: NOT
53539: AND
53540: IFFALSE 53544
// exit ;
53542: GO 53662
// if IsInArea ( unit , area ) then
53544: LD_VAR 0 1
53548: PPUSH
53549: LD_VAR 0 2
53553: PPUSH
53554: CALL_OW 308
53558: IFFALSE 53576
// begin ComMoveToArea ( unit , goAway ) ;
53560: LD_VAR 0 1
53564: PPUSH
53565: LD_VAR 0 3
53569: PPUSH
53570: CALL_OW 113
// exit ;
53574: GO 53662
// end ; if task [ 1 ] [ 1 ] <> M then
53576: LD_VAR 0 7
53580: PUSH
53581: LD_INT 1
53583: ARRAY
53584: PUSH
53585: LD_INT 1
53587: ARRAY
53588: PUSH
53589: LD_STRING M
53591: NONEQUAL
53592: IFFALSE 53596
// exit ;
53594: GO 53662
// x := task [ 1 ] [ 2 ] ;
53596: LD_ADDR_VAR 0 5
53600: PUSH
53601: LD_VAR 0 7
53605: PUSH
53606: LD_INT 1
53608: ARRAY
53609: PUSH
53610: LD_INT 2
53612: ARRAY
53613: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
53614: LD_ADDR_VAR 0 6
53618: PUSH
53619: LD_VAR 0 7
53623: PUSH
53624: LD_INT 1
53626: ARRAY
53627: PUSH
53628: LD_INT 3
53630: ARRAY
53631: ST_TO_ADDR
// if InArea ( x , y , area ) then
53632: LD_VAR 0 5
53636: PPUSH
53637: LD_VAR 0 6
53641: PPUSH
53642: LD_VAR 0 2
53646: PPUSH
53647: CALL_OW 309
53651: IFFALSE 53662
// ComStop ( unit ) ;
53653: LD_VAR 0 1
53657: PPUSH
53658: CALL_OW 141
// end ;
53662: LD_VAR 0 4
53666: RET
// export function Abs ( value ) ; begin
53667: LD_INT 0
53669: PPUSH
// result := value ;
53670: LD_ADDR_VAR 0 2
53674: PUSH
53675: LD_VAR 0 1
53679: ST_TO_ADDR
// if value < 0 then
53680: LD_VAR 0 1
53684: PUSH
53685: LD_INT 0
53687: LESS
53688: IFFALSE 53705
// result := value * - 1 ;
53690: LD_ADDR_VAR 0 2
53694: PUSH
53695: LD_VAR 0 1
53699: PUSH
53700: LD_INT 1
53702: NEG
53703: MUL
53704: ST_TO_ADDR
// end ;
53705: LD_VAR 0 2
53709: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
53710: LD_INT 0
53712: PPUSH
53713: PPUSH
53714: PPUSH
53715: PPUSH
53716: PPUSH
53717: PPUSH
53718: PPUSH
53719: PPUSH
// if not unit or not building then
53720: LD_VAR 0 1
53724: NOT
53725: PUSH
53726: LD_VAR 0 2
53730: NOT
53731: OR
53732: IFFALSE 53736
// exit ;
53734: GO 53962
// x := GetX ( building ) ;
53736: LD_ADDR_VAR 0 4
53740: PUSH
53741: LD_VAR 0 2
53745: PPUSH
53746: CALL_OW 250
53750: ST_TO_ADDR
// y := GetY ( building ) ;
53751: LD_ADDR_VAR 0 6
53755: PUSH
53756: LD_VAR 0 2
53760: PPUSH
53761: CALL_OW 251
53765: ST_TO_ADDR
// d := GetDir ( building ) ;
53766: LD_ADDR_VAR 0 8
53770: PUSH
53771: LD_VAR 0 2
53775: PPUSH
53776: CALL_OW 254
53780: ST_TO_ADDR
// r := 4 ;
53781: LD_ADDR_VAR 0 9
53785: PUSH
53786: LD_INT 4
53788: ST_TO_ADDR
// for i := 1 to 5 do
53789: LD_ADDR_VAR 0 10
53793: PUSH
53794: DOUBLE
53795: LD_INT 1
53797: DEC
53798: ST_TO_ADDR
53799: LD_INT 5
53801: PUSH
53802: FOR_TO
53803: IFFALSE 53960
// begin _x := ShiftX ( x , d , r + i ) ;
53805: LD_ADDR_VAR 0 5
53809: PUSH
53810: LD_VAR 0 4
53814: PPUSH
53815: LD_VAR 0 8
53819: PPUSH
53820: LD_VAR 0 9
53824: PUSH
53825: LD_VAR 0 10
53829: PLUS
53830: PPUSH
53831: CALL_OW 272
53835: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
53836: LD_ADDR_VAR 0 7
53840: PUSH
53841: LD_VAR 0 6
53845: PPUSH
53846: LD_VAR 0 8
53850: PPUSH
53851: LD_VAR 0 9
53855: PUSH
53856: LD_VAR 0 10
53860: PLUS
53861: PPUSH
53862: CALL_OW 273
53866: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
53867: LD_VAR 0 5
53871: PPUSH
53872: LD_VAR 0 7
53876: PPUSH
53877: CALL_OW 488
53881: PUSH
53882: LD_VAR 0 5
53886: PPUSH
53887: LD_VAR 0 7
53891: PPUSH
53892: CALL_OW 428
53896: PPUSH
53897: CALL_OW 247
53901: PUSH
53902: LD_INT 3
53904: PUSH
53905: LD_INT 2
53907: PUSH
53908: EMPTY
53909: LIST
53910: LIST
53911: IN
53912: NOT
53913: AND
53914: IFFALSE 53958
// begin ComMoveXY ( unit , _x , _y ) ;
53916: LD_VAR 0 1
53920: PPUSH
53921: LD_VAR 0 5
53925: PPUSH
53926: LD_VAR 0 7
53930: PPUSH
53931: CALL_OW 111
// result := [ _x , _y ] ;
53935: LD_ADDR_VAR 0 3
53939: PUSH
53940: LD_VAR 0 5
53944: PUSH
53945: LD_VAR 0 7
53949: PUSH
53950: EMPTY
53951: LIST
53952: LIST
53953: ST_TO_ADDR
// exit ;
53954: POP
53955: POP
53956: GO 53962
// end ; end ;
53958: GO 53802
53960: POP
53961: POP
// end ;
53962: LD_VAR 0 3
53966: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
53967: LD_INT 0
53969: PPUSH
53970: PPUSH
53971: PPUSH
// result := 0 ;
53972: LD_ADDR_VAR 0 3
53976: PUSH
53977: LD_INT 0
53979: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
53980: LD_VAR 0 1
53984: PUSH
53985: LD_INT 0
53987: LESS
53988: PUSH
53989: LD_VAR 0 1
53993: PUSH
53994: LD_INT 8
53996: GREATER
53997: OR
53998: PUSH
53999: LD_VAR 0 2
54003: PUSH
54004: LD_INT 0
54006: LESS
54007: OR
54008: PUSH
54009: LD_VAR 0 2
54013: PUSH
54014: LD_INT 8
54016: GREATER
54017: OR
54018: IFFALSE 54022
// exit ;
54020: GO 54097
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
54022: LD_ADDR_VAR 0 4
54026: PUSH
54027: LD_INT 22
54029: PUSH
54030: LD_VAR 0 2
54034: PUSH
54035: EMPTY
54036: LIST
54037: LIST
54038: PPUSH
54039: CALL_OW 69
54043: PUSH
54044: FOR_IN
54045: IFFALSE 54095
// begin un := UnitShoot ( i ) ;
54047: LD_ADDR_VAR 0 5
54051: PUSH
54052: LD_VAR 0 4
54056: PPUSH
54057: CALL_OW 504
54061: ST_TO_ADDR
// if GetSide ( un ) = side1 then
54062: LD_VAR 0 5
54066: PPUSH
54067: CALL_OW 255
54071: PUSH
54072: LD_VAR 0 1
54076: EQUAL
54077: IFFALSE 54093
// begin result := un ;
54079: LD_ADDR_VAR 0 3
54083: PUSH
54084: LD_VAR 0 5
54088: ST_TO_ADDR
// exit ;
54089: POP
54090: POP
54091: GO 54097
// end ; end ;
54093: GO 54044
54095: POP
54096: POP
// end ;
54097: LD_VAR 0 3
54101: RET
// export function GetCargoBay ( units ) ; begin
54102: LD_INT 0
54104: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
54105: LD_ADDR_VAR 0 2
54109: PUSH
54110: LD_VAR 0 1
54114: PPUSH
54115: LD_INT 2
54117: PUSH
54118: LD_INT 34
54120: PUSH
54121: LD_INT 12
54123: PUSH
54124: EMPTY
54125: LIST
54126: LIST
54127: PUSH
54128: LD_INT 34
54130: PUSH
54131: LD_INT 51
54133: PUSH
54134: EMPTY
54135: LIST
54136: LIST
54137: PUSH
54138: LD_INT 34
54140: PUSH
54141: LD_INT 32
54143: PUSH
54144: EMPTY
54145: LIST
54146: LIST
54147: PUSH
54148: LD_INT 34
54150: PUSH
54151: LD_INT 89
54153: PUSH
54154: EMPTY
54155: LIST
54156: LIST
54157: PUSH
54158: EMPTY
54159: LIST
54160: LIST
54161: LIST
54162: LIST
54163: LIST
54164: PPUSH
54165: CALL_OW 72
54169: ST_TO_ADDR
// end ;
54170: LD_VAR 0 2
54174: RET
// export function Negate ( value ) ; begin
54175: LD_INT 0
54177: PPUSH
// result := not value ;
54178: LD_ADDR_VAR 0 2
54182: PUSH
54183: LD_VAR 0 1
54187: NOT
54188: ST_TO_ADDR
// end ;
54189: LD_VAR 0 2
54193: RET
// export function Inc ( value ) ; begin
54194: LD_INT 0
54196: PPUSH
// result := value + 1 ;
54197: LD_ADDR_VAR 0 2
54201: PUSH
54202: LD_VAR 0 1
54206: PUSH
54207: LD_INT 1
54209: PLUS
54210: ST_TO_ADDR
// end ;
54211: LD_VAR 0 2
54215: RET
// export function Dec ( value ) ; begin
54216: LD_INT 0
54218: PPUSH
// result := value - 1 ;
54219: LD_ADDR_VAR 0 2
54223: PUSH
54224: LD_VAR 0 1
54228: PUSH
54229: LD_INT 1
54231: MINUS
54232: ST_TO_ADDR
// end ;
54233: LD_VAR 0 2
54237: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
54238: LD_INT 0
54240: PPUSH
54241: PPUSH
54242: PPUSH
54243: PPUSH
54244: PPUSH
54245: PPUSH
54246: PPUSH
54247: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
54248: LD_VAR 0 1
54252: PPUSH
54253: LD_VAR 0 2
54257: PPUSH
54258: CALL_OW 488
54262: NOT
54263: PUSH
54264: LD_VAR 0 3
54268: PPUSH
54269: LD_VAR 0 4
54273: PPUSH
54274: CALL_OW 488
54278: NOT
54279: OR
54280: IFFALSE 54293
// begin result := - 1 ;
54282: LD_ADDR_VAR 0 5
54286: PUSH
54287: LD_INT 1
54289: NEG
54290: ST_TO_ADDR
// exit ;
54291: GO 54528
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
54293: LD_ADDR_VAR 0 12
54297: PUSH
54298: LD_VAR 0 1
54302: PPUSH
54303: LD_VAR 0 2
54307: PPUSH
54308: LD_VAR 0 3
54312: PPUSH
54313: LD_VAR 0 4
54317: PPUSH
54318: CALL 53378 0 4
54322: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
54323: LD_ADDR_VAR 0 11
54327: PUSH
54328: LD_VAR 0 1
54332: PPUSH
54333: LD_VAR 0 2
54337: PPUSH
54338: LD_VAR 0 12
54342: PUSH
54343: LD_INT 1
54345: ARRAY
54346: PPUSH
54347: LD_VAR 0 12
54351: PUSH
54352: LD_INT 2
54354: ARRAY
54355: PPUSH
54356: CALL_OW 298
54360: ST_TO_ADDR
// distance := 9999 ;
54361: LD_ADDR_VAR 0 10
54365: PUSH
54366: LD_INT 9999
54368: ST_TO_ADDR
// for i := 0 to 5 do
54369: LD_ADDR_VAR 0 6
54373: PUSH
54374: DOUBLE
54375: LD_INT 0
54377: DEC
54378: ST_TO_ADDR
54379: LD_INT 5
54381: PUSH
54382: FOR_TO
54383: IFFALSE 54526
// begin _x := ShiftX ( x1 , i , centerDist ) ;
54385: LD_ADDR_VAR 0 7
54389: PUSH
54390: LD_VAR 0 1
54394: PPUSH
54395: LD_VAR 0 6
54399: PPUSH
54400: LD_VAR 0 11
54404: PPUSH
54405: CALL_OW 272
54409: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
54410: LD_ADDR_VAR 0 8
54414: PUSH
54415: LD_VAR 0 2
54419: PPUSH
54420: LD_VAR 0 6
54424: PPUSH
54425: LD_VAR 0 11
54429: PPUSH
54430: CALL_OW 273
54434: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
54435: LD_VAR 0 7
54439: PPUSH
54440: LD_VAR 0 8
54444: PPUSH
54445: CALL_OW 488
54449: NOT
54450: IFFALSE 54454
// continue ;
54452: GO 54382
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
54454: LD_ADDR_VAR 0 9
54458: PUSH
54459: LD_VAR 0 12
54463: PUSH
54464: LD_INT 1
54466: ARRAY
54467: PPUSH
54468: LD_VAR 0 12
54472: PUSH
54473: LD_INT 2
54475: ARRAY
54476: PPUSH
54477: LD_VAR 0 7
54481: PPUSH
54482: LD_VAR 0 8
54486: PPUSH
54487: CALL_OW 298
54491: ST_TO_ADDR
// if tmp < distance then
54492: LD_VAR 0 9
54496: PUSH
54497: LD_VAR 0 10
54501: LESS
54502: IFFALSE 54524
// begin result := i ;
54504: LD_ADDR_VAR 0 5
54508: PUSH
54509: LD_VAR 0 6
54513: ST_TO_ADDR
// distance := tmp ;
54514: LD_ADDR_VAR 0 10
54518: PUSH
54519: LD_VAR 0 9
54523: ST_TO_ADDR
// end ; end ;
54524: GO 54382
54526: POP
54527: POP
// end ;
54528: LD_VAR 0 5
54532: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
54533: LD_INT 0
54535: PPUSH
54536: PPUSH
// if not driver or not IsInUnit ( driver ) then
54537: LD_VAR 0 1
54541: NOT
54542: PUSH
54543: LD_VAR 0 1
54547: PPUSH
54548: CALL_OW 310
54552: NOT
54553: OR
54554: IFFALSE 54558
// exit ;
54556: GO 54648
// vehicle := IsInUnit ( driver ) ;
54558: LD_ADDR_VAR 0 3
54562: PUSH
54563: LD_VAR 0 1
54567: PPUSH
54568: CALL_OW 310
54572: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
54573: LD_VAR 0 1
54577: PPUSH
54578: LD_STRING \
54580: PUSH
54581: LD_INT 0
54583: PUSH
54584: LD_INT 0
54586: PUSH
54587: LD_INT 0
54589: PUSH
54590: LD_INT 0
54592: PUSH
54593: LD_INT 0
54595: PUSH
54596: LD_INT 0
54598: PUSH
54599: EMPTY
54600: LIST
54601: LIST
54602: LIST
54603: LIST
54604: LIST
54605: LIST
54606: LIST
54607: PUSH
54608: LD_STRING E
54610: PUSH
54611: LD_INT 0
54613: PUSH
54614: LD_INT 0
54616: PUSH
54617: LD_VAR 0 3
54621: PUSH
54622: LD_INT 0
54624: PUSH
54625: LD_INT 0
54627: PUSH
54628: LD_INT 0
54630: PUSH
54631: EMPTY
54632: LIST
54633: LIST
54634: LIST
54635: LIST
54636: LIST
54637: LIST
54638: LIST
54639: PUSH
54640: EMPTY
54641: LIST
54642: LIST
54643: PPUSH
54644: CALL_OW 446
// end ;
54648: LD_VAR 0 2
54652: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
54653: LD_INT 0
54655: PPUSH
54656: PPUSH
// if not driver or not IsInUnit ( driver ) then
54657: LD_VAR 0 1
54661: NOT
54662: PUSH
54663: LD_VAR 0 1
54667: PPUSH
54668: CALL_OW 310
54672: NOT
54673: OR
54674: IFFALSE 54678
// exit ;
54676: GO 54768
// vehicle := IsInUnit ( driver ) ;
54678: LD_ADDR_VAR 0 3
54682: PUSH
54683: LD_VAR 0 1
54687: PPUSH
54688: CALL_OW 310
54692: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
54693: LD_VAR 0 1
54697: PPUSH
54698: LD_STRING \
54700: PUSH
54701: LD_INT 0
54703: PUSH
54704: LD_INT 0
54706: PUSH
54707: LD_INT 0
54709: PUSH
54710: LD_INT 0
54712: PUSH
54713: LD_INT 0
54715: PUSH
54716: LD_INT 0
54718: PUSH
54719: EMPTY
54720: LIST
54721: LIST
54722: LIST
54723: LIST
54724: LIST
54725: LIST
54726: LIST
54727: PUSH
54728: LD_STRING E
54730: PUSH
54731: LD_INT 0
54733: PUSH
54734: LD_INT 0
54736: PUSH
54737: LD_VAR 0 3
54741: PUSH
54742: LD_INT 0
54744: PUSH
54745: LD_INT 0
54747: PUSH
54748: LD_INT 0
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: LIST
54755: LIST
54756: LIST
54757: LIST
54758: LIST
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: PPUSH
54764: CALL_OW 447
// end ;
54768: LD_VAR 0 2
54772: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
54773: LD_INT 0
54775: PPUSH
54776: PPUSH
54777: PPUSH
// tmp := [ ] ;
54778: LD_ADDR_VAR 0 5
54782: PUSH
54783: EMPTY
54784: ST_TO_ADDR
// for i in units do
54785: LD_ADDR_VAR 0 4
54789: PUSH
54790: LD_VAR 0 1
54794: PUSH
54795: FOR_IN
54796: IFFALSE 54834
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
54798: LD_ADDR_VAR 0 5
54802: PUSH
54803: LD_VAR 0 5
54807: PPUSH
54808: LD_VAR 0 5
54812: PUSH
54813: LD_INT 1
54815: PLUS
54816: PPUSH
54817: LD_VAR 0 4
54821: PPUSH
54822: CALL_OW 256
54826: PPUSH
54827: CALL_OW 2
54831: ST_TO_ADDR
54832: GO 54795
54834: POP
54835: POP
// if not tmp then
54836: LD_VAR 0 5
54840: NOT
54841: IFFALSE 54845
// exit ;
54843: GO 54893
// if asc then
54845: LD_VAR 0 2
54849: IFFALSE 54873
// result := SortListByListAsc ( units , tmp ) else
54851: LD_ADDR_VAR 0 3
54855: PUSH
54856: LD_VAR 0 1
54860: PPUSH
54861: LD_VAR 0 5
54865: PPUSH
54866: CALL_OW 76
54870: ST_TO_ADDR
54871: GO 54893
// result := SortListByListDesc ( units , tmp ) ;
54873: LD_ADDR_VAR 0 3
54877: PUSH
54878: LD_VAR 0 1
54882: PPUSH
54883: LD_VAR 0 5
54887: PPUSH
54888: CALL_OW 77
54892: ST_TO_ADDR
// end ;
54893: LD_VAR 0 3
54897: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
54898: LD_INT 0
54900: PPUSH
54901: PPUSH
// task := GetTaskList ( mech ) ;
54902: LD_ADDR_VAR 0 4
54906: PUSH
54907: LD_VAR 0 1
54911: PPUSH
54912: CALL_OW 437
54916: ST_TO_ADDR
// if not task then
54917: LD_VAR 0 4
54921: NOT
54922: IFFALSE 54926
// exit ;
54924: GO 54968
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
54926: LD_ADDR_VAR 0 3
54930: PUSH
54931: LD_VAR 0 4
54935: PUSH
54936: LD_INT 1
54938: ARRAY
54939: PUSH
54940: LD_INT 1
54942: ARRAY
54943: PUSH
54944: LD_STRING r
54946: EQUAL
54947: PUSH
54948: LD_VAR 0 4
54952: PUSH
54953: LD_INT 1
54955: ARRAY
54956: PUSH
54957: LD_INT 4
54959: ARRAY
54960: PUSH
54961: LD_VAR 0 2
54965: EQUAL
54966: AND
54967: ST_TO_ADDR
// end ;
54968: LD_VAR 0 3
54972: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
54973: LD_INT 0
54975: PPUSH
// SetDir ( unit , d ) ;
54976: LD_VAR 0 1
54980: PPUSH
54981: LD_VAR 0 4
54985: PPUSH
54986: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
54990: LD_VAR 0 1
54994: PPUSH
54995: LD_VAR 0 2
54999: PPUSH
55000: LD_VAR 0 3
55004: PPUSH
55005: LD_VAR 0 5
55009: PPUSH
55010: CALL_OW 48
// end ;
55014: LD_VAR 0 6
55018: RET
// export function ToNaturalNumber ( number ) ; begin
55019: LD_INT 0
55021: PPUSH
// result := number div 1 ;
55022: LD_ADDR_VAR 0 2
55026: PUSH
55027: LD_VAR 0 1
55031: PUSH
55032: LD_INT 1
55034: DIV
55035: ST_TO_ADDR
// if number < 0 then
55036: LD_VAR 0 1
55040: PUSH
55041: LD_INT 0
55043: LESS
55044: IFFALSE 55054
// result := 0 ;
55046: LD_ADDR_VAR 0 2
55050: PUSH
55051: LD_INT 0
55053: ST_TO_ADDR
// end ;
55054: LD_VAR 0 2
55058: RET
// export function SortByClass ( units , class ) ; var un ; begin
55059: LD_INT 0
55061: PPUSH
55062: PPUSH
// if not units or not class then
55063: LD_VAR 0 1
55067: NOT
55068: PUSH
55069: LD_VAR 0 2
55073: NOT
55074: OR
55075: IFFALSE 55079
// exit ;
55077: GO 55174
// result := [ ] ;
55079: LD_ADDR_VAR 0 3
55083: PUSH
55084: EMPTY
55085: ST_TO_ADDR
// for un in units do
55086: LD_ADDR_VAR 0 4
55090: PUSH
55091: LD_VAR 0 1
55095: PUSH
55096: FOR_IN
55097: IFFALSE 55172
// if GetClass ( un ) = class then
55099: LD_VAR 0 4
55103: PPUSH
55104: CALL_OW 257
55108: PUSH
55109: LD_VAR 0 2
55113: EQUAL
55114: IFFALSE 55141
// result := Insert ( result , 1 , un ) else
55116: LD_ADDR_VAR 0 3
55120: PUSH
55121: LD_VAR 0 3
55125: PPUSH
55126: LD_INT 1
55128: PPUSH
55129: LD_VAR 0 4
55133: PPUSH
55134: CALL_OW 2
55138: ST_TO_ADDR
55139: GO 55170
// result := Replace ( result , result + 1 , un ) ;
55141: LD_ADDR_VAR 0 3
55145: PUSH
55146: LD_VAR 0 3
55150: PPUSH
55151: LD_VAR 0 3
55155: PUSH
55156: LD_INT 1
55158: PLUS
55159: PPUSH
55160: LD_VAR 0 4
55164: PPUSH
55165: CALL_OW 1
55169: ST_TO_ADDR
55170: GO 55096
55172: POP
55173: POP
// end ;
55174: LD_VAR 0 3
55178: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
55179: LD_INT 0
55181: PPUSH
55182: PPUSH
55183: PPUSH
55184: PPUSH
55185: PPUSH
55186: PPUSH
55187: PPUSH
// result := [ ] ;
55188: LD_ADDR_VAR 0 4
55192: PUSH
55193: EMPTY
55194: ST_TO_ADDR
// if x - r < 0 then
55195: LD_VAR 0 1
55199: PUSH
55200: LD_VAR 0 3
55204: MINUS
55205: PUSH
55206: LD_INT 0
55208: LESS
55209: IFFALSE 55221
// min_x := 0 else
55211: LD_ADDR_VAR 0 8
55215: PUSH
55216: LD_INT 0
55218: ST_TO_ADDR
55219: GO 55237
// min_x := x - r ;
55221: LD_ADDR_VAR 0 8
55225: PUSH
55226: LD_VAR 0 1
55230: PUSH
55231: LD_VAR 0 3
55235: MINUS
55236: ST_TO_ADDR
// if y - r < 0 then
55237: LD_VAR 0 2
55241: PUSH
55242: LD_VAR 0 3
55246: MINUS
55247: PUSH
55248: LD_INT 0
55250: LESS
55251: IFFALSE 55263
// min_y := 0 else
55253: LD_ADDR_VAR 0 7
55257: PUSH
55258: LD_INT 0
55260: ST_TO_ADDR
55261: GO 55279
// min_y := y - r ;
55263: LD_ADDR_VAR 0 7
55267: PUSH
55268: LD_VAR 0 2
55272: PUSH
55273: LD_VAR 0 3
55277: MINUS
55278: ST_TO_ADDR
// max_x := x + r ;
55279: LD_ADDR_VAR 0 9
55283: PUSH
55284: LD_VAR 0 1
55288: PUSH
55289: LD_VAR 0 3
55293: PLUS
55294: ST_TO_ADDR
// max_y := y + r ;
55295: LD_ADDR_VAR 0 10
55299: PUSH
55300: LD_VAR 0 2
55304: PUSH
55305: LD_VAR 0 3
55309: PLUS
55310: ST_TO_ADDR
// for _x = min_x to max_x do
55311: LD_ADDR_VAR 0 5
55315: PUSH
55316: DOUBLE
55317: LD_VAR 0 8
55321: DEC
55322: ST_TO_ADDR
55323: LD_VAR 0 9
55327: PUSH
55328: FOR_TO
55329: IFFALSE 55430
// for _y = min_y to max_y do
55331: LD_ADDR_VAR 0 6
55335: PUSH
55336: DOUBLE
55337: LD_VAR 0 7
55341: DEC
55342: ST_TO_ADDR
55343: LD_VAR 0 10
55347: PUSH
55348: FOR_TO
55349: IFFALSE 55426
// begin if not ValidHex ( _x , _y ) then
55351: LD_VAR 0 5
55355: PPUSH
55356: LD_VAR 0 6
55360: PPUSH
55361: CALL_OW 488
55365: NOT
55366: IFFALSE 55370
// continue ;
55368: GO 55348
// if GetResourceTypeXY ( _x , _y ) then
55370: LD_VAR 0 5
55374: PPUSH
55375: LD_VAR 0 6
55379: PPUSH
55380: CALL_OW 283
55384: IFFALSE 55424
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
55386: LD_ADDR_VAR 0 4
55390: PUSH
55391: LD_VAR 0 4
55395: PPUSH
55396: LD_VAR 0 4
55400: PUSH
55401: LD_INT 1
55403: PLUS
55404: PPUSH
55405: LD_VAR 0 5
55409: PUSH
55410: LD_VAR 0 6
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: PPUSH
55419: CALL_OW 1
55423: ST_TO_ADDR
// end ;
55424: GO 55348
55426: POP
55427: POP
55428: GO 55328
55430: POP
55431: POP
// end ;
55432: LD_VAR 0 4
55436: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
55437: LD_INT 0
55439: PPUSH
55440: PPUSH
55441: PPUSH
55442: PPUSH
55443: PPUSH
55444: PPUSH
55445: PPUSH
55446: PPUSH
// if not units then
55447: LD_VAR 0 1
55451: NOT
55452: IFFALSE 55456
// exit ;
55454: GO 55984
// result := UnitFilter ( units , [ f_ok ] ) ;
55456: LD_ADDR_VAR 0 3
55460: PUSH
55461: LD_VAR 0 1
55465: PPUSH
55466: LD_INT 50
55468: PUSH
55469: EMPTY
55470: LIST
55471: PPUSH
55472: CALL_OW 72
55476: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
55477: LD_ADDR_VAR 0 8
55481: PUSH
55482: LD_VAR 0 1
55486: PUSH
55487: LD_INT 1
55489: ARRAY
55490: PPUSH
55491: CALL_OW 255
55495: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
55496: LD_ADDR_VAR 0 10
55500: PUSH
55501: LD_INT 29
55503: PUSH
55504: LD_INT 91
55506: PUSH
55507: LD_INT 49
55509: PUSH
55510: EMPTY
55511: LIST
55512: LIST
55513: LIST
55514: ST_TO_ADDR
// if not result then
55515: LD_VAR 0 3
55519: NOT
55520: IFFALSE 55524
// exit ;
55522: GO 55984
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
55524: LD_ADDR_VAR 0 5
55528: PUSH
55529: LD_INT 81
55531: PUSH
55532: LD_VAR 0 8
55536: PUSH
55537: EMPTY
55538: LIST
55539: LIST
55540: PPUSH
55541: CALL_OW 69
55545: ST_TO_ADDR
// for i in result do
55546: LD_ADDR_VAR 0 4
55550: PUSH
55551: LD_VAR 0 3
55555: PUSH
55556: FOR_IN
55557: IFFALSE 55982
// begin tag := GetTag ( i ) + 1 ;
55559: LD_ADDR_VAR 0 9
55563: PUSH
55564: LD_VAR 0 4
55568: PPUSH
55569: CALL_OW 110
55573: PUSH
55574: LD_INT 1
55576: PLUS
55577: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
55578: LD_ADDR_VAR 0 7
55582: PUSH
55583: LD_VAR 0 4
55587: PPUSH
55588: CALL_OW 250
55592: PPUSH
55593: LD_VAR 0 4
55597: PPUSH
55598: CALL_OW 251
55602: PPUSH
55603: LD_INT 4
55605: PPUSH
55606: CALL 55179 0 3
55610: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
55611: LD_VAR 0 4
55615: PPUSH
55616: CALL_OW 247
55620: PUSH
55621: LD_INT 2
55623: EQUAL
55624: PUSH
55625: LD_VAR 0 7
55629: PUSH
55630: LD_INT 2
55632: GREATER
55633: AND
55634: PUSH
55635: LD_VAR 0 4
55639: PPUSH
55640: CALL_OW 264
55644: PUSH
55645: LD_VAR 0 10
55649: IN
55650: NOT
55651: AND
55652: IFFALSE 55691
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
55654: LD_VAR 0 4
55658: PPUSH
55659: LD_VAR 0 7
55663: PUSH
55664: LD_INT 1
55666: ARRAY
55667: PUSH
55668: LD_INT 1
55670: ARRAY
55671: PPUSH
55672: LD_VAR 0 7
55676: PUSH
55677: LD_INT 1
55679: ARRAY
55680: PUSH
55681: LD_INT 2
55683: ARRAY
55684: PPUSH
55685: CALL_OW 116
55689: GO 55980
// if path > tag then
55691: LD_VAR 0 2
55695: PUSH
55696: LD_VAR 0 9
55700: GREATER
55701: IFFALSE 55909
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
55703: LD_ADDR_VAR 0 6
55707: PUSH
55708: LD_VAR 0 5
55712: PPUSH
55713: LD_INT 91
55715: PUSH
55716: LD_VAR 0 4
55720: PUSH
55721: LD_INT 8
55723: PUSH
55724: EMPTY
55725: LIST
55726: LIST
55727: LIST
55728: PPUSH
55729: CALL_OW 72
55733: ST_TO_ADDR
// if nearEnemy then
55734: LD_VAR 0 6
55738: IFFALSE 55807
// begin if GetWeapon ( i ) = ru_time_lapser then
55740: LD_VAR 0 4
55744: PPUSH
55745: CALL_OW 264
55749: PUSH
55750: LD_INT 49
55752: EQUAL
55753: IFFALSE 55781
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
55755: LD_VAR 0 4
55759: PPUSH
55760: LD_VAR 0 6
55764: PPUSH
55765: LD_VAR 0 4
55769: PPUSH
55770: CALL_OW 74
55774: PPUSH
55775: CALL_OW 112
55779: GO 55805
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
55781: LD_VAR 0 4
55785: PPUSH
55786: LD_VAR 0 6
55790: PPUSH
55791: LD_VAR 0 4
55795: PPUSH
55796: CALL_OW 74
55800: PPUSH
55801: CALL 57055 0 2
// end else
55805: GO 55907
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
55807: LD_VAR 0 4
55811: PPUSH
55812: LD_VAR 0 2
55816: PUSH
55817: LD_VAR 0 9
55821: ARRAY
55822: PUSH
55823: LD_INT 1
55825: ARRAY
55826: PPUSH
55827: LD_VAR 0 2
55831: PUSH
55832: LD_VAR 0 9
55836: ARRAY
55837: PUSH
55838: LD_INT 2
55840: ARRAY
55841: PPUSH
55842: CALL_OW 297
55846: PUSH
55847: LD_INT 6
55849: GREATER
55850: IFFALSE 55893
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
55852: LD_VAR 0 4
55856: PPUSH
55857: LD_VAR 0 2
55861: PUSH
55862: LD_VAR 0 9
55866: ARRAY
55867: PUSH
55868: LD_INT 1
55870: ARRAY
55871: PPUSH
55872: LD_VAR 0 2
55876: PUSH
55877: LD_VAR 0 9
55881: ARRAY
55882: PUSH
55883: LD_INT 2
55885: ARRAY
55886: PPUSH
55887: CALL_OW 114
55891: GO 55907
// SetTag ( i , tag ) ;
55893: LD_VAR 0 4
55897: PPUSH
55898: LD_VAR 0 9
55902: PPUSH
55903: CALL_OW 109
// end else
55907: GO 55980
// if enemy then
55909: LD_VAR 0 5
55913: IFFALSE 55980
// begin if GetWeapon ( i ) = ru_time_lapser then
55915: LD_VAR 0 4
55919: PPUSH
55920: CALL_OW 264
55924: PUSH
55925: LD_INT 49
55927: EQUAL
55928: IFFALSE 55956
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
55930: LD_VAR 0 4
55934: PPUSH
55935: LD_VAR 0 5
55939: PPUSH
55940: LD_VAR 0 4
55944: PPUSH
55945: CALL_OW 74
55949: PPUSH
55950: CALL_OW 112
55954: GO 55980
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
55956: LD_VAR 0 4
55960: PPUSH
55961: LD_VAR 0 5
55965: PPUSH
55966: LD_VAR 0 4
55970: PPUSH
55971: CALL_OW 74
55975: PPUSH
55976: CALL 57055 0 2
// end ; end ;
55980: GO 55556
55982: POP
55983: POP
// end ;
55984: LD_VAR 0 3
55988: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
55989: LD_INT 0
55991: PPUSH
55992: PPUSH
55993: PPUSH
// if not unit or IsInUnit ( unit ) then
55994: LD_VAR 0 1
55998: NOT
55999: PUSH
56000: LD_VAR 0 1
56004: PPUSH
56005: CALL_OW 310
56009: OR
56010: IFFALSE 56014
// exit ;
56012: GO 56105
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
56014: LD_ADDR_VAR 0 4
56018: PUSH
56019: LD_VAR 0 1
56023: PPUSH
56024: CALL_OW 250
56028: PPUSH
56029: LD_VAR 0 2
56033: PPUSH
56034: LD_INT 1
56036: PPUSH
56037: CALL_OW 272
56041: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
56042: LD_ADDR_VAR 0 5
56046: PUSH
56047: LD_VAR 0 1
56051: PPUSH
56052: CALL_OW 251
56056: PPUSH
56057: LD_VAR 0 2
56061: PPUSH
56062: LD_INT 1
56064: PPUSH
56065: CALL_OW 273
56069: ST_TO_ADDR
// if ValidHex ( x , y ) then
56070: LD_VAR 0 4
56074: PPUSH
56075: LD_VAR 0 5
56079: PPUSH
56080: CALL_OW 488
56084: IFFALSE 56105
// ComTurnXY ( unit , x , y ) ;
56086: LD_VAR 0 1
56090: PPUSH
56091: LD_VAR 0 4
56095: PPUSH
56096: LD_VAR 0 5
56100: PPUSH
56101: CALL_OW 118
// end ;
56105: LD_VAR 0 3
56109: RET
// export function SeeUnits ( side , units ) ; var i ; begin
56110: LD_INT 0
56112: PPUSH
56113: PPUSH
// result := false ;
56114: LD_ADDR_VAR 0 3
56118: PUSH
56119: LD_INT 0
56121: ST_TO_ADDR
// if not units then
56122: LD_VAR 0 2
56126: NOT
56127: IFFALSE 56131
// exit ;
56129: GO 56176
// for i in units do
56131: LD_ADDR_VAR 0 4
56135: PUSH
56136: LD_VAR 0 2
56140: PUSH
56141: FOR_IN
56142: IFFALSE 56174
// if See ( side , i ) then
56144: LD_VAR 0 1
56148: PPUSH
56149: LD_VAR 0 4
56153: PPUSH
56154: CALL_OW 292
56158: IFFALSE 56172
// begin result := true ;
56160: LD_ADDR_VAR 0 3
56164: PUSH
56165: LD_INT 1
56167: ST_TO_ADDR
// exit ;
56168: POP
56169: POP
56170: GO 56176
// end ;
56172: GO 56141
56174: POP
56175: POP
// end ;
56176: LD_VAR 0 3
56180: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
56181: LD_INT 0
56183: PPUSH
56184: PPUSH
56185: PPUSH
56186: PPUSH
// if not unit or not points then
56187: LD_VAR 0 1
56191: NOT
56192: PUSH
56193: LD_VAR 0 2
56197: NOT
56198: OR
56199: IFFALSE 56203
// exit ;
56201: GO 56293
// dist := 99999 ;
56203: LD_ADDR_VAR 0 5
56207: PUSH
56208: LD_INT 99999
56210: ST_TO_ADDR
// for i in points do
56211: LD_ADDR_VAR 0 4
56215: PUSH
56216: LD_VAR 0 2
56220: PUSH
56221: FOR_IN
56222: IFFALSE 56291
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
56224: LD_ADDR_VAR 0 6
56228: PUSH
56229: LD_VAR 0 1
56233: PPUSH
56234: LD_VAR 0 4
56238: PUSH
56239: LD_INT 1
56241: ARRAY
56242: PPUSH
56243: LD_VAR 0 4
56247: PUSH
56248: LD_INT 2
56250: ARRAY
56251: PPUSH
56252: CALL_OW 297
56256: ST_TO_ADDR
// if tmpDist < dist then
56257: LD_VAR 0 6
56261: PUSH
56262: LD_VAR 0 5
56266: LESS
56267: IFFALSE 56289
// begin result := i ;
56269: LD_ADDR_VAR 0 3
56273: PUSH
56274: LD_VAR 0 4
56278: ST_TO_ADDR
// dist := tmpDist ;
56279: LD_ADDR_VAR 0 5
56283: PUSH
56284: LD_VAR 0 6
56288: ST_TO_ADDR
// end ; end ;
56289: GO 56221
56291: POP
56292: POP
// end ;
56293: LD_VAR 0 3
56297: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
56298: LD_INT 0
56300: PPUSH
// uc_side := side ;
56301: LD_ADDR_OWVAR 20
56305: PUSH
56306: LD_VAR 0 1
56310: ST_TO_ADDR
// uc_nation := 3 ;
56311: LD_ADDR_OWVAR 21
56315: PUSH
56316: LD_INT 3
56318: ST_TO_ADDR
// vc_chassis := 25 ;
56319: LD_ADDR_OWVAR 37
56323: PUSH
56324: LD_INT 25
56326: ST_TO_ADDR
// vc_engine := engine_siberite ;
56327: LD_ADDR_OWVAR 39
56331: PUSH
56332: LD_INT 3
56334: ST_TO_ADDR
// vc_control := control_computer ;
56335: LD_ADDR_OWVAR 38
56339: PUSH
56340: LD_INT 3
56342: ST_TO_ADDR
// vc_weapon := 59 ;
56343: LD_ADDR_OWVAR 40
56347: PUSH
56348: LD_INT 59
56350: ST_TO_ADDR
// result := CreateVehicle ;
56351: LD_ADDR_VAR 0 5
56355: PUSH
56356: CALL_OW 45
56360: ST_TO_ADDR
// SetDir ( result , d ) ;
56361: LD_VAR 0 5
56365: PPUSH
56366: LD_VAR 0 4
56370: PPUSH
56371: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
56375: LD_VAR 0 5
56379: PPUSH
56380: LD_VAR 0 2
56384: PPUSH
56385: LD_VAR 0 3
56389: PPUSH
56390: LD_INT 0
56392: PPUSH
56393: CALL_OW 48
// end ;
56397: LD_VAR 0 5
56401: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
56402: LD_INT 0
56404: PPUSH
56405: PPUSH
56406: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
56407: LD_ADDR_VAR 0 2
56411: PUSH
56412: LD_INT 0
56414: PUSH
56415: LD_INT 0
56417: PUSH
56418: LD_INT 0
56420: PUSH
56421: LD_INT 0
56423: PUSH
56424: EMPTY
56425: LIST
56426: LIST
56427: LIST
56428: LIST
56429: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
56430: LD_VAR 0 1
56434: NOT
56435: PUSH
56436: LD_VAR 0 1
56440: PPUSH
56441: CALL_OW 264
56445: PUSH
56446: LD_INT 12
56448: PUSH
56449: LD_INT 51
56451: PUSH
56452: LD_INT 32
56454: PUSH
56455: LD_INT 89
56457: PUSH
56458: EMPTY
56459: LIST
56460: LIST
56461: LIST
56462: LIST
56463: IN
56464: NOT
56465: OR
56466: IFFALSE 56470
// exit ;
56468: GO 56568
// for i := 1 to 3 do
56470: LD_ADDR_VAR 0 3
56474: PUSH
56475: DOUBLE
56476: LD_INT 1
56478: DEC
56479: ST_TO_ADDR
56480: LD_INT 3
56482: PUSH
56483: FOR_TO
56484: IFFALSE 56566
// begin tmp := GetCargo ( cargo , i ) ;
56486: LD_ADDR_VAR 0 4
56490: PUSH
56491: LD_VAR 0 1
56495: PPUSH
56496: LD_VAR 0 3
56500: PPUSH
56501: CALL_OW 289
56505: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
56506: LD_ADDR_VAR 0 2
56510: PUSH
56511: LD_VAR 0 2
56515: PPUSH
56516: LD_VAR 0 3
56520: PPUSH
56521: LD_VAR 0 4
56525: PPUSH
56526: CALL_OW 1
56530: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
56531: LD_ADDR_VAR 0 2
56535: PUSH
56536: LD_VAR 0 2
56540: PPUSH
56541: LD_INT 4
56543: PPUSH
56544: LD_VAR 0 2
56548: PUSH
56549: LD_INT 4
56551: ARRAY
56552: PUSH
56553: LD_VAR 0 4
56557: PLUS
56558: PPUSH
56559: CALL_OW 1
56563: ST_TO_ADDR
// end ;
56564: GO 56483
56566: POP
56567: POP
// end ;
56568: LD_VAR 0 2
56572: RET
// export function Length ( array ) ; begin
56573: LD_INT 0
56575: PPUSH
// result := array + 0 ;
56576: LD_ADDR_VAR 0 2
56580: PUSH
56581: LD_VAR 0 1
56585: PUSH
56586: LD_INT 0
56588: PLUS
56589: ST_TO_ADDR
// end ;
56590: LD_VAR 0 2
56594: RET
// export function PrepareArray ( array ) ; begin
56595: LD_INT 0
56597: PPUSH
// result := array diff 0 ;
56598: LD_ADDR_VAR 0 2
56602: PUSH
56603: LD_VAR 0 1
56607: PUSH
56608: LD_INT 0
56610: DIFF
56611: ST_TO_ADDR
// if not result [ 1 ] then
56612: LD_VAR 0 2
56616: PUSH
56617: LD_INT 1
56619: ARRAY
56620: NOT
56621: IFFALSE 56641
// result := Delete ( result , 1 ) ;
56623: LD_ADDR_VAR 0 2
56627: PUSH
56628: LD_VAR 0 2
56632: PPUSH
56633: LD_INT 1
56635: PPUSH
56636: CALL_OW 3
56640: ST_TO_ADDR
// end ;
56641: LD_VAR 0 2
56645: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
56646: LD_INT 0
56648: PPUSH
56649: PPUSH
56650: PPUSH
56651: PPUSH
// sibRocketRange := 25 ;
56652: LD_ADDR_VAR 0 6
56656: PUSH
56657: LD_INT 25
56659: ST_TO_ADDR
// result := false ;
56660: LD_ADDR_VAR 0 4
56664: PUSH
56665: LD_INT 0
56667: ST_TO_ADDR
// for i := 0 to 5 do
56668: LD_ADDR_VAR 0 5
56672: PUSH
56673: DOUBLE
56674: LD_INT 0
56676: DEC
56677: ST_TO_ADDR
56678: LD_INT 5
56680: PUSH
56681: FOR_TO
56682: IFFALSE 56749
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
56684: LD_VAR 0 1
56688: PPUSH
56689: LD_VAR 0 5
56693: PPUSH
56694: LD_VAR 0 6
56698: PPUSH
56699: CALL_OW 272
56703: PPUSH
56704: LD_VAR 0 2
56708: PPUSH
56709: LD_VAR 0 5
56713: PPUSH
56714: LD_VAR 0 6
56718: PPUSH
56719: CALL_OW 273
56723: PPUSH
56724: LD_VAR 0 3
56728: PPUSH
56729: CALL_OW 309
56733: IFFALSE 56747
// begin result := true ;
56735: LD_ADDR_VAR 0 4
56739: PUSH
56740: LD_INT 1
56742: ST_TO_ADDR
// exit ;
56743: POP
56744: POP
56745: GO 56751
// end ;
56747: GO 56681
56749: POP
56750: POP
// end ;
56751: LD_VAR 0 4
56755: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
56756: LD_INT 0
56758: PPUSH
56759: PPUSH
56760: PPUSH
// if btype = b_depot then
56761: LD_VAR 0 2
56765: PUSH
56766: LD_INT 0
56768: EQUAL
56769: IFFALSE 56781
// begin result := true ;
56771: LD_ADDR_VAR 0 3
56775: PUSH
56776: LD_INT 1
56778: ST_TO_ADDR
// exit ;
56779: GO 56897
// end ; pom := GetBase ( depot ) ;
56781: LD_ADDR_VAR 0 4
56785: PUSH
56786: LD_VAR 0 1
56790: PPUSH
56791: CALL_OW 274
56795: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
56796: LD_ADDR_VAR 0 5
56800: PUSH
56801: LD_VAR 0 2
56805: PPUSH
56806: LD_VAR 0 1
56810: PPUSH
56811: CALL_OW 248
56815: PPUSH
56816: CALL_OW 450
56820: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
56821: LD_ADDR_VAR 0 3
56825: PUSH
56826: LD_VAR 0 4
56830: PPUSH
56831: LD_INT 1
56833: PPUSH
56834: CALL_OW 275
56838: PUSH
56839: LD_VAR 0 5
56843: PUSH
56844: LD_INT 1
56846: ARRAY
56847: GREATEREQUAL
56848: PUSH
56849: LD_VAR 0 4
56853: PPUSH
56854: LD_INT 2
56856: PPUSH
56857: CALL_OW 275
56861: PUSH
56862: LD_VAR 0 5
56866: PUSH
56867: LD_INT 2
56869: ARRAY
56870: GREATEREQUAL
56871: AND
56872: PUSH
56873: LD_VAR 0 4
56877: PPUSH
56878: LD_INT 3
56880: PPUSH
56881: CALL_OW 275
56885: PUSH
56886: LD_VAR 0 5
56890: PUSH
56891: LD_INT 3
56893: ARRAY
56894: GREATEREQUAL
56895: AND
56896: ST_TO_ADDR
// end ;
56897: LD_VAR 0 3
56901: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
56902: LD_INT 0
56904: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
56905: LD_VAR 0 1
56909: PPUSH
56910: LD_VAR 0 2
56914: PPUSH
56915: LD_INT 0
56917: PPUSH
56918: LD_INT 0
56920: PPUSH
56921: LD_INT 1
56923: PPUSH
56924: LD_INT 0
56926: PPUSH
56927: CALL_OW 587
// end ;
56931: LD_VAR 0 3
56935: RET
// export function CenterOnNow ( unit ) ; begin
56936: LD_INT 0
56938: PPUSH
// result := IsInUnit ( unit ) ;
56939: LD_ADDR_VAR 0 2
56943: PUSH
56944: LD_VAR 0 1
56948: PPUSH
56949: CALL_OW 310
56953: ST_TO_ADDR
// if not result then
56954: LD_VAR 0 2
56958: NOT
56959: IFFALSE 56971
// result := unit ;
56961: LD_ADDR_VAR 0 2
56965: PUSH
56966: LD_VAR 0 1
56970: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
56971: LD_VAR 0 1
56975: PPUSH
56976: CALL_OW 87
// end ;
56980: LD_VAR 0 2
56984: RET
// export function ComMoveHex ( unit , hex ) ; begin
56985: LD_INT 0
56987: PPUSH
// if not hex then
56988: LD_VAR 0 2
56992: NOT
56993: IFFALSE 56997
// exit ;
56995: GO 57050
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
56997: LD_VAR 0 2
57001: PUSH
57002: LD_INT 1
57004: ARRAY
57005: PPUSH
57006: LD_VAR 0 2
57010: PUSH
57011: LD_INT 2
57013: ARRAY
57014: PPUSH
57015: CALL_OW 428
57019: IFFALSE 57023
// exit ;
57021: GO 57050
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
57023: LD_VAR 0 1
57027: PPUSH
57028: LD_VAR 0 2
57032: PUSH
57033: LD_INT 1
57035: ARRAY
57036: PPUSH
57037: LD_VAR 0 2
57041: PUSH
57042: LD_INT 2
57044: ARRAY
57045: PPUSH
57046: CALL_OW 111
// end ;
57050: LD_VAR 0 3
57054: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
57055: LD_INT 0
57057: PPUSH
57058: PPUSH
57059: PPUSH
// if not unit or not enemy then
57060: LD_VAR 0 1
57064: NOT
57065: PUSH
57066: LD_VAR 0 2
57070: NOT
57071: OR
57072: IFFALSE 57076
// exit ;
57074: GO 57200
// x := GetX ( enemy ) ;
57076: LD_ADDR_VAR 0 4
57080: PUSH
57081: LD_VAR 0 2
57085: PPUSH
57086: CALL_OW 250
57090: ST_TO_ADDR
// y := GetY ( enemy ) ;
57091: LD_ADDR_VAR 0 5
57095: PUSH
57096: LD_VAR 0 2
57100: PPUSH
57101: CALL_OW 251
57105: ST_TO_ADDR
// if ValidHex ( x , y ) then
57106: LD_VAR 0 4
57110: PPUSH
57111: LD_VAR 0 5
57115: PPUSH
57116: CALL_OW 488
57120: IFFALSE 57200
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
57122: LD_VAR 0 2
57126: PPUSH
57127: CALL_OW 247
57131: PUSH
57132: LD_INT 3
57134: PUSH
57135: LD_INT 2
57137: PUSH
57138: EMPTY
57139: LIST
57140: LIST
57141: IN
57142: PUSH
57143: LD_VAR 0 1
57147: PPUSH
57148: CALL_OW 255
57152: PPUSH
57153: LD_VAR 0 2
57157: PPUSH
57158: CALL_OW 292
57162: OR
57163: IFFALSE 57181
// ComAttackUnit ( unit , enemy ) else
57165: LD_VAR 0 1
57169: PPUSH
57170: LD_VAR 0 2
57174: PPUSH
57175: CALL_OW 115
57179: GO 57200
// ComAgressiveMove ( unit , x , y ) ;
57181: LD_VAR 0 1
57185: PPUSH
57186: LD_VAR 0 4
57190: PPUSH
57191: LD_VAR 0 5
57195: PPUSH
57196: CALL_OW 114
// end ;
57200: LD_VAR 0 3
57204: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
57205: LD_INT 0
57207: PPUSH
57208: PPUSH
57209: PPUSH
// list := AreaToList ( area , 0 ) ;
57210: LD_ADDR_VAR 0 5
57214: PUSH
57215: LD_VAR 0 1
57219: PPUSH
57220: LD_INT 0
57222: PPUSH
57223: CALL_OW 517
57227: ST_TO_ADDR
// if not list then
57228: LD_VAR 0 5
57232: NOT
57233: IFFALSE 57237
// exit ;
57235: GO 57367
// if all then
57237: LD_VAR 0 2
57241: IFFALSE 57329
// begin for i := 1 to list [ 1 ] do
57243: LD_ADDR_VAR 0 4
57247: PUSH
57248: DOUBLE
57249: LD_INT 1
57251: DEC
57252: ST_TO_ADDR
57253: LD_VAR 0 5
57257: PUSH
57258: LD_INT 1
57260: ARRAY
57261: PUSH
57262: FOR_TO
57263: IFFALSE 57325
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
57265: LD_ADDR_VAR 0 3
57269: PUSH
57270: LD_VAR 0 3
57274: PPUSH
57275: LD_VAR 0 3
57279: PUSH
57280: LD_INT 1
57282: PLUS
57283: PPUSH
57284: LD_VAR 0 5
57288: PUSH
57289: LD_INT 1
57291: ARRAY
57292: PUSH
57293: LD_VAR 0 4
57297: ARRAY
57298: PUSH
57299: LD_VAR 0 5
57303: PUSH
57304: LD_INT 2
57306: ARRAY
57307: PUSH
57308: LD_VAR 0 4
57312: ARRAY
57313: PUSH
57314: EMPTY
57315: LIST
57316: LIST
57317: PPUSH
57318: CALL_OW 1
57322: ST_TO_ADDR
57323: GO 57262
57325: POP
57326: POP
// exit ;
57327: GO 57367
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
57329: LD_ADDR_VAR 0 3
57333: PUSH
57334: LD_VAR 0 5
57338: PUSH
57339: LD_INT 1
57341: ARRAY
57342: PUSH
57343: LD_INT 1
57345: ARRAY
57346: PUSH
57347: LD_VAR 0 5
57351: PUSH
57352: LD_INT 2
57354: ARRAY
57355: PUSH
57356: LD_INT 1
57358: ARRAY
57359: PUSH
57360: EMPTY
57361: LIST
57362: LIST
57363: PUSH
57364: EMPTY
57365: LIST
57366: ST_TO_ADDR
// end ;
57367: LD_VAR 0 3
57371: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
57372: LD_INT 0
57374: PPUSH
57375: PPUSH
// list := AreaToList ( area , 0 ) ;
57376: LD_ADDR_VAR 0 4
57380: PUSH
57381: LD_VAR 0 1
57385: PPUSH
57386: LD_INT 0
57388: PPUSH
57389: CALL_OW 517
57393: ST_TO_ADDR
// if not list then
57394: LD_VAR 0 4
57398: NOT
57399: IFFALSE 57403
// exit ;
57401: GO 57444
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
57403: LD_ADDR_VAR 0 3
57407: PUSH
57408: LD_VAR 0 4
57412: PUSH
57413: LD_INT 1
57415: ARRAY
57416: PUSH
57417: LD_INT 1
57419: ARRAY
57420: PUSH
57421: LD_VAR 0 4
57425: PUSH
57426: LD_INT 2
57428: ARRAY
57429: PUSH
57430: LD_INT 1
57432: ARRAY
57433: PUSH
57434: LD_VAR 0 2
57438: PUSH
57439: EMPTY
57440: LIST
57441: LIST
57442: LIST
57443: ST_TO_ADDR
// end ;
57444: LD_VAR 0 3
57448: RET
// export function First ( array ) ; begin
57449: LD_INT 0
57451: PPUSH
// if not array then
57452: LD_VAR 0 1
57456: NOT
57457: IFFALSE 57461
// exit ;
57459: GO 57475
// result := array [ 1 ] ;
57461: LD_ADDR_VAR 0 2
57465: PUSH
57466: LD_VAR 0 1
57470: PUSH
57471: LD_INT 1
57473: ARRAY
57474: ST_TO_ADDR
// end ;
57475: LD_VAR 0 2
57479: RET
// export function Last ( array ) ; begin
57480: LD_INT 0
57482: PPUSH
// if not array then
57483: LD_VAR 0 1
57487: NOT
57488: IFFALSE 57492
// exit ;
57490: GO 57508
// result := array [ array ] ;
57492: LD_ADDR_VAR 0 2
57496: PUSH
57497: LD_VAR 0 1
57501: PUSH
57502: LD_VAR 0 1
57506: ARRAY
57507: ST_TO_ADDR
// end ;
57508: LD_VAR 0 2
57512: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
57513: LD_INT 0
57515: PPUSH
57516: PPUSH
// result := [ ] ;
57517: LD_ADDR_VAR 0 5
57521: PUSH
57522: EMPTY
57523: ST_TO_ADDR
// if not array then
57524: LD_VAR 0 1
57528: NOT
57529: IFFALSE 57533
// exit ;
57531: GO 57645
// for i := 1 to array do
57533: LD_ADDR_VAR 0 6
57537: PUSH
57538: DOUBLE
57539: LD_INT 1
57541: DEC
57542: ST_TO_ADDR
57543: LD_VAR 0 1
57547: PUSH
57548: FOR_TO
57549: IFFALSE 57643
// if array [ i ] [ index ] = value then
57551: LD_VAR 0 1
57555: PUSH
57556: LD_VAR 0 6
57560: ARRAY
57561: PUSH
57562: LD_VAR 0 2
57566: ARRAY
57567: PUSH
57568: LD_VAR 0 3
57572: EQUAL
57573: IFFALSE 57641
// begin if indexColumn then
57575: LD_VAR 0 4
57579: IFFALSE 57615
// result := Join ( result , array [ i ] [ indexColumn ] ) else
57581: LD_ADDR_VAR 0 5
57585: PUSH
57586: LD_VAR 0 5
57590: PPUSH
57591: LD_VAR 0 1
57595: PUSH
57596: LD_VAR 0 6
57600: ARRAY
57601: PUSH
57602: LD_VAR 0 4
57606: ARRAY
57607: PPUSH
57608: CALL 52833 0 2
57612: ST_TO_ADDR
57613: GO 57641
// result := Join ( result , array [ i ] ) ;
57615: LD_ADDR_VAR 0 5
57619: PUSH
57620: LD_VAR 0 5
57624: PPUSH
57625: LD_VAR 0 1
57629: PUSH
57630: LD_VAR 0 6
57634: ARRAY
57635: PPUSH
57636: CALL 52833 0 2
57640: ST_TO_ADDR
// end ;
57641: GO 57548
57643: POP
57644: POP
// end ;
57645: LD_VAR 0 5
57649: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
57650: LD_INT 0
57652: PPUSH
// if not vehicles or not parkingPoint then
57653: LD_VAR 0 1
57657: NOT
57658: PUSH
57659: LD_VAR 0 2
57663: NOT
57664: OR
57665: IFFALSE 57669
// exit ;
57667: GO 57767
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
57669: LD_ADDR_VAR 0 1
57673: PUSH
57674: LD_VAR 0 1
57678: PPUSH
57679: LD_INT 50
57681: PUSH
57682: EMPTY
57683: LIST
57684: PUSH
57685: LD_INT 3
57687: PUSH
57688: LD_INT 92
57690: PUSH
57691: LD_VAR 0 2
57695: PUSH
57696: LD_INT 1
57698: ARRAY
57699: PUSH
57700: LD_VAR 0 2
57704: PUSH
57705: LD_INT 2
57707: ARRAY
57708: PUSH
57709: LD_INT 8
57711: PUSH
57712: EMPTY
57713: LIST
57714: LIST
57715: LIST
57716: LIST
57717: PUSH
57718: EMPTY
57719: LIST
57720: LIST
57721: PUSH
57722: EMPTY
57723: LIST
57724: LIST
57725: PPUSH
57726: CALL_OW 72
57730: ST_TO_ADDR
// if not vehicles then
57731: LD_VAR 0 1
57735: NOT
57736: IFFALSE 57740
// exit ;
57738: GO 57767
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
57740: LD_VAR 0 1
57744: PPUSH
57745: LD_VAR 0 2
57749: PUSH
57750: LD_INT 1
57752: ARRAY
57753: PPUSH
57754: LD_VAR 0 2
57758: PUSH
57759: LD_INT 2
57761: ARRAY
57762: PPUSH
57763: CALL_OW 111
// end ;
57767: LD_VAR 0 3
57771: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
57772: LD_INT 0
57774: PPUSH
57775: PPUSH
57776: PPUSH
// if not side or not area then
57777: LD_VAR 0 1
57781: NOT
57782: PUSH
57783: LD_VAR 0 2
57787: NOT
57788: OR
57789: IFFALSE 57793
// exit ;
57791: GO 57912
// tmp := AreaToList ( area , 0 ) ;
57793: LD_ADDR_VAR 0 5
57797: PUSH
57798: LD_VAR 0 2
57802: PPUSH
57803: LD_INT 0
57805: PPUSH
57806: CALL_OW 517
57810: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
57811: LD_ADDR_VAR 0 4
57815: PUSH
57816: DOUBLE
57817: LD_INT 1
57819: DEC
57820: ST_TO_ADDR
57821: LD_VAR 0 5
57825: PUSH
57826: LD_INT 1
57828: ARRAY
57829: PUSH
57830: FOR_TO
57831: IFFALSE 57910
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
57833: LD_VAR 0 5
57837: PUSH
57838: LD_INT 1
57840: ARRAY
57841: PUSH
57842: LD_VAR 0 4
57846: ARRAY
57847: PPUSH
57848: LD_VAR 0 5
57852: PUSH
57853: LD_INT 2
57855: ARRAY
57856: PUSH
57857: LD_VAR 0 4
57861: ARRAY
57862: PPUSH
57863: CALL_OW 351
57867: IFFALSE 57908
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
57869: LD_VAR 0 5
57873: PUSH
57874: LD_INT 1
57876: ARRAY
57877: PUSH
57878: LD_VAR 0 4
57882: ARRAY
57883: PPUSH
57884: LD_VAR 0 5
57888: PUSH
57889: LD_INT 2
57891: ARRAY
57892: PUSH
57893: LD_VAR 0 4
57897: ARRAY
57898: PPUSH
57899: LD_VAR 0 1
57903: PPUSH
57904: CALL_OW 244
// end ;
57908: GO 57830
57910: POP
57911: POP
// end ; end_of_file
57912: LD_VAR 0 3
57916: RET
// export function SOS_UnitDestroyed ( un ) ; begin
57917: LD_INT 0
57919: PPUSH
// ComRadiation ( un ) ;
57920: LD_VAR 0 1
57924: PPUSH
57925: CALL 58906 0 1
// end ;
57929: LD_VAR 0 2
57933: RET
// export function SOS_UnitKamikazed ( un ) ; begin
57934: LD_INT 0
57936: PPUSH
// ComRadiation ( un ) ;
57937: LD_VAR 0 1
57941: PPUSH
57942: CALL 58906 0 1
// end ;
57946: LD_VAR 0 2
57950: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
57951: LD_INT 0
57953: PPUSH
// end ;
57954: LD_VAR 0 4
57958: RET
// export function SOS_Command ( cmd ) ; begin
57959: LD_INT 0
57961: PPUSH
// end ;
57962: LD_VAR 0 2
57966: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
57967: LD_INT 0
57969: PPUSH
// end ;
57970: LD_VAR 0 6
57974: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , tag , driver , hex ; begin
57975: LD_INT 0
57977: PPUSH
57978: PPUSH
57979: PPUSH
57980: PPUSH
57981: PPUSH
// if not vehicle or not factory then
57982: LD_VAR 0 1
57986: NOT
57987: PUSH
57988: LD_VAR 0 2
57992: NOT
57993: OR
57994: IFFALSE 57998
// exit ;
57996: GO 58497
// if not factoryWaypoints then
57998: LD_EXP 51
58002: NOT
58003: IFFALSE 58007
// exit ;
58005: GO 58497
// for i := 1 to Count ( factoryWaypoints ) do
58007: LD_ADDR_VAR 0 4
58011: PUSH
58012: DOUBLE
58013: LD_INT 1
58015: DEC
58016: ST_TO_ADDR
58017: LD_EXP 51
58021: PPUSH
58022: CALL 17224 0 1
58026: PUSH
58027: FOR_TO
58028: IFFALSE 58495
// if factoryWaypoints [ i ] [ 2 ] = factory then
58030: LD_EXP 51
58034: PUSH
58035: LD_VAR 0 4
58039: ARRAY
58040: PUSH
58041: LD_INT 2
58043: ARRAY
58044: PUSH
58045: LD_VAR 0 2
58049: EQUAL
58050: IFFALSE 58493
// begin if GetControl ( vehicle ) = control_manual then
58052: LD_VAR 0 1
58056: PPUSH
58057: CALL_OW 263
58061: PUSH
58062: LD_INT 1
58064: EQUAL
58065: IFFALSE 58376
// begin driver := IsDrivenBy ( vehicle ) ;
58067: LD_ADDR_VAR 0 6
58071: PUSH
58072: LD_VAR 0 1
58076: PPUSH
58077: CALL_OW 311
58081: ST_TO_ADDR
// tag := GetTag ( driver ) ;
58082: LD_ADDR_VAR 0 5
58086: PUSH
58087: LD_VAR 0 6
58091: PPUSH
58092: CALL_OW 110
58096: ST_TO_ADDR
// if tag = tDriver or GetTag ( vehicle ) = tDriver then
58097: LD_VAR 0 5
58101: PUSH
58102: LD_INT 501
58104: EQUAL
58105: PUSH
58106: LD_VAR 0 1
58110: PPUSH
58111: CALL_OW 110
58115: PUSH
58116: LD_INT 501
58118: EQUAL
58119: OR
58120: IFFALSE 58126
// exit ;
58122: POP
58123: POP
58124: GO 58497
// if not HasTask ( driver ) then
58126: LD_VAR 0 6
58130: PPUSH
58131: CALL_OW 314
58135: NOT
58136: IFFALSE 58374
// begin SetTag ( driver , tDriver ) ;
58138: LD_VAR 0 6
58142: PPUSH
58143: LD_INT 501
58145: PPUSH
58146: CALL_OW 109
// SetTag ( vehicle , tDriver ) ;
58150: LD_VAR 0 1
58154: PPUSH
58155: LD_INT 501
58157: PPUSH
58158: CALL_OW 109
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
58162: LD_ADDR_VAR 0 7
58166: PUSH
58167: LD_EXP 51
58171: PUSH
58172: LD_VAR 0 4
58176: ARRAY
58177: PUSH
58178: LD_INT 3
58180: ARRAY
58181: PPUSH
58182: LD_EXP 51
58186: PUSH
58187: LD_VAR 0 4
58191: ARRAY
58192: PUSH
58193: LD_INT 4
58195: ARRAY
58196: PPUSH
58197: CALL_OW 428
58201: ST_TO_ADDR
// if hex then
58202: LD_VAR 0 7
58206: IFFALSE 58224
// ComMoveUnit ( driver , hex ) else
58208: LD_VAR 0 6
58212: PPUSH
58213: LD_VAR 0 7
58217: PPUSH
58218: CALL_OW 112
58222: GO 58263
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
58224: LD_VAR 0 6
58228: PPUSH
58229: LD_EXP 51
58233: PUSH
58234: LD_VAR 0 4
58238: ARRAY
58239: PUSH
58240: LD_INT 3
58242: ARRAY
58243: PPUSH
58244: LD_EXP 51
58248: PUSH
58249: LD_VAR 0 4
58253: ARRAY
58254: PUSH
58255: LD_INT 4
58257: ARRAY
58258: PPUSH
58259: CALL_OW 111
// AddComExitVehicle ( driver ) ;
58263: LD_VAR 0 6
58267: PPUSH
58268: CALL_OW 181
// if Multiplayer then
58272: LD_OWVAR 4
58276: IFFALSE 58325
// begin repeat wait ( 10 ) ;
58278: LD_INT 10
58280: PPUSH
58281: CALL_OW 67
// until not IsInUnit ( driver ) ;
58285: LD_VAR 0 6
58289: PPUSH
58290: CALL_OW 310
58294: NOT
58295: IFFALSE 58278
// if not HasTask ( driver ) then
58297: LD_VAR 0 6
58301: PPUSH
58302: CALL_OW 314
58306: NOT
58307: IFFALSE 58323
// ComEnterUnit ( driver , factory ) ;
58309: LD_VAR 0 6
58313: PPUSH
58314: LD_VAR 0 2
58318: PPUSH
58319: CALL_OW 120
// end else
58323: GO 58339
// AddComEnterUnit ( driver , factory ) ;
58325: LD_VAR 0 6
58329: PPUSH
58330: LD_VAR 0 2
58334: PPUSH
58335: CALL_OW 180
// wait ( 0 0$1 ) ;
58339: LD_INT 35
58341: PPUSH
58342: CALL_OW 67
// SetTag ( driver , tag ) ;
58346: LD_VAR 0 6
58350: PPUSH
58351: LD_VAR 0 5
58355: PPUSH
58356: CALL_OW 109
// SetTag ( vehicle , 0 ) ;
58360: LD_VAR 0 1
58364: PPUSH
58365: LD_INT 0
58367: PPUSH
58368: CALL_OW 109
// break ;
58372: GO 58495
// end ; end else
58374: GO 58493
// if GetControl ( vehicle ) = control_remote then
58376: LD_VAR 0 1
58380: PPUSH
58381: CALL_OW 263
58385: PUSH
58386: LD_INT 2
58388: EQUAL
58389: IFFALSE 58452
// begin wait ( 0 0$2 ) ;
58391: LD_INT 70
58393: PPUSH
58394: CALL_OW 67
// if Connect ( vehicle ) then
58398: LD_VAR 0 1
58402: PPUSH
58403: CALL 23430 0 1
58407: IFFALSE 58448
// AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
58409: LD_VAR 0 1
58413: PPUSH
58414: LD_EXP 51
58418: PUSH
58419: LD_VAR 0 4
58423: ARRAY
58424: PUSH
58425: LD_INT 3
58427: ARRAY
58428: PPUSH
58429: LD_EXP 51
58433: PUSH
58434: LD_VAR 0 4
58438: ARRAY
58439: PUSH
58440: LD_INT 4
58442: ARRAY
58443: PPUSH
58444: CALL_OW 171
// break ;
58448: GO 58495
// end else
58450: GO 58493
// begin AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
58452: LD_VAR 0 1
58456: PPUSH
58457: LD_EXP 51
58461: PUSH
58462: LD_VAR 0 4
58466: ARRAY
58467: PUSH
58468: LD_INT 3
58470: ARRAY
58471: PPUSH
58472: LD_EXP 51
58476: PUSH
58477: LD_VAR 0 4
58481: ARRAY
58482: PUSH
58483: LD_INT 4
58485: ARRAY
58486: PPUSH
58487: CALL_OW 171
// break ;
58491: GO 58495
// end ; end ;
58493: GO 58027
58495: POP
58496: POP
// end ;
58497: LD_VAR 0 3
58501: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
58502: LD_INT 0
58504: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
58505: LD_VAR 0 1
58509: PUSH
58510: LD_INT 250
58512: EQUAL
58513: PUSH
58514: LD_VAR 0 2
58518: PPUSH
58519: CALL_OW 264
58523: PUSH
58524: LD_INT 81
58526: EQUAL
58527: AND
58528: IFFALSE 58549
// MinerPlaceMine ( unit , x , y ) ;
58530: LD_VAR 0 2
58534: PPUSH
58535: LD_VAR 0 4
58539: PPUSH
58540: LD_VAR 0 5
58544: PPUSH
58545: CALL 61641 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
58549: LD_VAR 0 1
58553: PUSH
58554: LD_INT 251
58556: EQUAL
58557: PUSH
58558: LD_VAR 0 2
58562: PPUSH
58563: CALL_OW 264
58567: PUSH
58568: LD_INT 81
58570: EQUAL
58571: AND
58572: IFFALSE 58593
// MinerDetonateMine ( unit , x , y ) ;
58574: LD_VAR 0 2
58578: PPUSH
58579: LD_VAR 0 4
58583: PPUSH
58584: LD_VAR 0 5
58588: PPUSH
58589: CALL 61916 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
58593: LD_VAR 0 1
58597: PUSH
58598: LD_INT 252
58600: EQUAL
58601: PUSH
58602: LD_VAR 0 2
58606: PPUSH
58607: CALL_OW 264
58611: PUSH
58612: LD_INT 81
58614: EQUAL
58615: AND
58616: IFFALSE 58637
// MinerCreateMinefield ( unit , x , y ) ;
58618: LD_VAR 0 2
58622: PPUSH
58623: LD_VAR 0 4
58627: PPUSH
58628: LD_VAR 0 5
58632: PPUSH
58633: CALL 62333 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
58637: LD_VAR 0 1
58641: PUSH
58642: LD_INT 253
58644: EQUAL
58645: PUSH
58646: LD_VAR 0 2
58650: PPUSH
58651: CALL_OW 257
58655: PUSH
58656: LD_INT 5
58658: EQUAL
58659: AND
58660: IFFALSE 58681
// ComBinocular ( unit , x , y ) ;
58662: LD_VAR 0 2
58666: PPUSH
58667: LD_VAR 0 4
58671: PPUSH
58672: LD_VAR 0 5
58676: PPUSH
58677: CALL 62702 0 3
// if selectedUnit then
58681: LD_VAR 0 3
58685: IFFALSE 58741
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
58687: LD_VAR 0 1
58691: PUSH
58692: LD_INT 254
58694: EQUAL
58695: PUSH
58696: LD_VAR 0 2
58700: PPUSH
58701: CALL_OW 264
58705: PUSH
58706: LD_INT 99
58708: EQUAL
58709: AND
58710: PUSH
58711: LD_VAR 0 3
58715: PPUSH
58716: CALL_OW 263
58720: PUSH
58721: LD_INT 3
58723: EQUAL
58724: AND
58725: IFFALSE 58741
// HackDestroyVehicle ( unit , selectedUnit ) ;
58727: LD_VAR 0 2
58731: PPUSH
58732: LD_VAR 0 3
58736: PPUSH
58737: CALL 61005 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
58741: LD_VAR 0 1
58745: PUSH
58746: LD_INT 255
58748: EQUAL
58749: PUSH
58750: LD_VAR 0 2
58754: PPUSH
58755: CALL_OW 264
58759: PUSH
58760: LD_INT 14
58762: PUSH
58763: LD_INT 53
58765: PUSH
58766: EMPTY
58767: LIST
58768: LIST
58769: IN
58770: AND
58771: PUSH
58772: LD_VAR 0 4
58776: PPUSH
58777: LD_VAR 0 5
58781: PPUSH
58782: CALL_OW 488
58786: AND
58787: IFFALSE 58811
// CutTreeXYR ( unit , x , y , 12 ) ;
58789: LD_VAR 0 2
58793: PPUSH
58794: LD_VAR 0 4
58798: PPUSH
58799: LD_VAR 0 5
58803: PPUSH
58804: LD_INT 12
58806: PPUSH
58807: CALL 59002 0 4
// if cmd = 256 then
58811: LD_VAR 0 1
58815: PUSH
58816: LD_INT 256
58818: EQUAL
58819: IFFALSE 58840
// SetFactoryWaypoint ( unit , x , y ) ;
58821: LD_VAR 0 2
58825: PPUSH
58826: LD_VAR 0 4
58830: PPUSH
58831: LD_VAR 0 5
58835: PPUSH
58836: CALL 63257 0 3
// if cmd = 257 then
58840: LD_VAR 0 1
58844: PUSH
58845: LD_INT 257
58847: EQUAL
58848: IFFALSE 58869
// SetWarehouseGatheringPoint ( unit , x , y ) ;
58850: LD_VAR 0 2
58854: PPUSH
58855: LD_VAR 0 4
58859: PPUSH
58860: LD_VAR 0 5
58864: PPUSH
58865: CALL 63747 0 3
// if cmd = 258 then
58869: LD_VAR 0 1
58873: PUSH
58874: LD_INT 258
58876: EQUAL
58877: IFFALSE 58901
// BurnTreeXYR ( unit , x , y , 8 ) ;
58879: LD_VAR 0 2
58883: PPUSH
58884: LD_VAR 0 4
58888: PPUSH
58889: LD_VAR 0 5
58893: PPUSH
58894: LD_INT 8
58896: PPUSH
58897: CALL 59396 0 4
// end ;
58901: LD_VAR 0 6
58905: RET
// export function ComRadiation ( un ) ; var eff ; begin
58906: LD_INT 0
58908: PPUSH
58909: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
58910: LD_VAR 0 1
58914: PPUSH
58915: CALL_OW 264
58919: PUSH
58920: LD_INT 91
58922: NONEQUAL
58923: IFFALSE 58927
// exit ;
58925: GO 58997
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
58927: LD_INT 68
58929: PPUSH
58930: LD_VAR 0 1
58934: PPUSH
58935: CALL_OW 255
58939: PPUSH
58940: CALL_OW 321
58944: PUSH
58945: LD_INT 2
58947: EQUAL
58948: IFFALSE 58960
// eff := 70 else
58950: LD_ADDR_VAR 0 3
58954: PUSH
58955: LD_INT 70
58957: ST_TO_ADDR
58958: GO 58968
// eff := 30 ;
58960: LD_ADDR_VAR 0 3
58964: PUSH
58965: LD_INT 30
58967: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
58968: LD_VAR 0 1
58972: PPUSH
58973: CALL_OW 250
58977: PPUSH
58978: LD_VAR 0 1
58982: PPUSH
58983: CALL_OW 251
58987: PPUSH
58988: LD_VAR 0 3
58992: PPUSH
58993: CALL_OW 495
// end ;
58997: LD_VAR 0 2
59001: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
59002: LD_INT 0
59004: PPUSH
59005: PPUSH
59006: PPUSH
59007: PPUSH
59008: PPUSH
59009: PPUSH
59010: PPUSH
59011: PPUSH
59012: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
59013: LD_VAR 0 1
59017: PPUSH
59018: CALL_OW 302
59022: NOT
59023: PUSH
59024: LD_VAR 0 2
59028: PPUSH
59029: LD_VAR 0 3
59033: PPUSH
59034: CALL_OW 488
59038: NOT
59039: OR
59040: PUSH
59041: LD_VAR 0 4
59045: NOT
59046: OR
59047: IFFALSE 59051
// exit ;
59049: GO 59391
// list := [ ] ;
59051: LD_ADDR_VAR 0 13
59055: PUSH
59056: EMPTY
59057: ST_TO_ADDR
// if x - r < 0 then
59058: LD_VAR 0 2
59062: PUSH
59063: LD_VAR 0 4
59067: MINUS
59068: PUSH
59069: LD_INT 0
59071: LESS
59072: IFFALSE 59084
// min_x := 0 else
59074: LD_ADDR_VAR 0 7
59078: PUSH
59079: LD_INT 0
59081: ST_TO_ADDR
59082: GO 59100
// min_x := x - r ;
59084: LD_ADDR_VAR 0 7
59088: PUSH
59089: LD_VAR 0 2
59093: PUSH
59094: LD_VAR 0 4
59098: MINUS
59099: ST_TO_ADDR
// if y - r < 0 then
59100: LD_VAR 0 3
59104: PUSH
59105: LD_VAR 0 4
59109: MINUS
59110: PUSH
59111: LD_INT 0
59113: LESS
59114: IFFALSE 59126
// min_y := 0 else
59116: LD_ADDR_VAR 0 8
59120: PUSH
59121: LD_INT 0
59123: ST_TO_ADDR
59124: GO 59142
// min_y := y - r ;
59126: LD_ADDR_VAR 0 8
59130: PUSH
59131: LD_VAR 0 3
59135: PUSH
59136: LD_VAR 0 4
59140: MINUS
59141: ST_TO_ADDR
// max_x := x + r ;
59142: LD_ADDR_VAR 0 9
59146: PUSH
59147: LD_VAR 0 2
59151: PUSH
59152: LD_VAR 0 4
59156: PLUS
59157: ST_TO_ADDR
// max_y := y + r ;
59158: LD_ADDR_VAR 0 10
59162: PUSH
59163: LD_VAR 0 3
59167: PUSH
59168: LD_VAR 0 4
59172: PLUS
59173: ST_TO_ADDR
// for _x = min_x to max_x do
59174: LD_ADDR_VAR 0 11
59178: PUSH
59179: DOUBLE
59180: LD_VAR 0 7
59184: DEC
59185: ST_TO_ADDR
59186: LD_VAR 0 9
59190: PUSH
59191: FOR_TO
59192: IFFALSE 59309
// for _y = min_y to max_y do
59194: LD_ADDR_VAR 0 12
59198: PUSH
59199: DOUBLE
59200: LD_VAR 0 8
59204: DEC
59205: ST_TO_ADDR
59206: LD_VAR 0 10
59210: PUSH
59211: FOR_TO
59212: IFFALSE 59305
// begin if not ValidHex ( _x , _y ) then
59214: LD_VAR 0 11
59218: PPUSH
59219: LD_VAR 0 12
59223: PPUSH
59224: CALL_OW 488
59228: NOT
59229: IFFALSE 59233
// continue ;
59231: GO 59211
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
59233: LD_VAR 0 11
59237: PPUSH
59238: LD_VAR 0 12
59242: PPUSH
59243: CALL_OW 351
59247: PUSH
59248: LD_VAR 0 11
59252: PPUSH
59253: LD_VAR 0 12
59257: PPUSH
59258: CALL_OW 554
59262: AND
59263: IFFALSE 59303
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
59265: LD_ADDR_VAR 0 13
59269: PUSH
59270: LD_VAR 0 13
59274: PPUSH
59275: LD_VAR 0 13
59279: PUSH
59280: LD_INT 1
59282: PLUS
59283: PPUSH
59284: LD_VAR 0 11
59288: PUSH
59289: LD_VAR 0 12
59293: PUSH
59294: EMPTY
59295: LIST
59296: LIST
59297: PPUSH
59298: CALL_OW 2
59302: ST_TO_ADDR
// end ;
59303: GO 59211
59305: POP
59306: POP
59307: GO 59191
59309: POP
59310: POP
// if not list then
59311: LD_VAR 0 13
59315: NOT
59316: IFFALSE 59320
// exit ;
59318: GO 59391
// for i in list do
59320: LD_ADDR_VAR 0 6
59324: PUSH
59325: LD_VAR 0 13
59329: PUSH
59330: FOR_IN
59331: IFFALSE 59389
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
59333: LD_VAR 0 1
59337: PPUSH
59338: LD_STRING M
59340: PUSH
59341: LD_VAR 0 6
59345: PUSH
59346: LD_INT 1
59348: ARRAY
59349: PUSH
59350: LD_VAR 0 6
59354: PUSH
59355: LD_INT 2
59357: ARRAY
59358: PUSH
59359: LD_INT 0
59361: PUSH
59362: LD_INT 0
59364: PUSH
59365: LD_INT 0
59367: PUSH
59368: LD_INT 0
59370: PUSH
59371: EMPTY
59372: LIST
59373: LIST
59374: LIST
59375: LIST
59376: LIST
59377: LIST
59378: LIST
59379: PUSH
59380: EMPTY
59381: LIST
59382: PPUSH
59383: CALL_OW 447
59387: GO 59330
59389: POP
59390: POP
// end ;
59391: LD_VAR 0 5
59395: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
59396: LD_INT 0
59398: PPUSH
59399: PPUSH
59400: PPUSH
59401: PPUSH
59402: PPUSH
59403: PPUSH
59404: PPUSH
59405: PPUSH
59406: PPUSH
59407: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
59408: LD_VAR 0 1
59412: PPUSH
59413: CALL_OW 302
59417: NOT
59418: PUSH
59419: LD_VAR 0 2
59423: PPUSH
59424: LD_VAR 0 3
59428: PPUSH
59429: CALL_OW 488
59433: NOT
59434: OR
59435: PUSH
59436: LD_VAR 0 4
59440: NOT
59441: OR
59442: IFFALSE 59446
// exit ;
59444: GO 59959
// list := [ ] ;
59446: LD_ADDR_VAR 0 13
59450: PUSH
59451: EMPTY
59452: ST_TO_ADDR
// if x - r < 0 then
59453: LD_VAR 0 2
59457: PUSH
59458: LD_VAR 0 4
59462: MINUS
59463: PUSH
59464: LD_INT 0
59466: LESS
59467: IFFALSE 59479
// min_x := 0 else
59469: LD_ADDR_VAR 0 7
59473: PUSH
59474: LD_INT 0
59476: ST_TO_ADDR
59477: GO 59495
// min_x := x - r ;
59479: LD_ADDR_VAR 0 7
59483: PUSH
59484: LD_VAR 0 2
59488: PUSH
59489: LD_VAR 0 4
59493: MINUS
59494: ST_TO_ADDR
// if y - r < 0 then
59495: LD_VAR 0 3
59499: PUSH
59500: LD_VAR 0 4
59504: MINUS
59505: PUSH
59506: LD_INT 0
59508: LESS
59509: IFFALSE 59521
// min_y := 0 else
59511: LD_ADDR_VAR 0 8
59515: PUSH
59516: LD_INT 0
59518: ST_TO_ADDR
59519: GO 59537
// min_y := y - r ;
59521: LD_ADDR_VAR 0 8
59525: PUSH
59526: LD_VAR 0 3
59530: PUSH
59531: LD_VAR 0 4
59535: MINUS
59536: ST_TO_ADDR
// max_x := x + r ;
59537: LD_ADDR_VAR 0 9
59541: PUSH
59542: LD_VAR 0 2
59546: PUSH
59547: LD_VAR 0 4
59551: PLUS
59552: ST_TO_ADDR
// max_y := y + r ;
59553: LD_ADDR_VAR 0 10
59557: PUSH
59558: LD_VAR 0 3
59562: PUSH
59563: LD_VAR 0 4
59567: PLUS
59568: ST_TO_ADDR
// for _x = min_x to max_x do
59569: LD_ADDR_VAR 0 11
59573: PUSH
59574: DOUBLE
59575: LD_VAR 0 7
59579: DEC
59580: ST_TO_ADDR
59581: LD_VAR 0 9
59585: PUSH
59586: FOR_TO
59587: IFFALSE 59704
// for _y = min_y to max_y do
59589: LD_ADDR_VAR 0 12
59593: PUSH
59594: DOUBLE
59595: LD_VAR 0 8
59599: DEC
59600: ST_TO_ADDR
59601: LD_VAR 0 10
59605: PUSH
59606: FOR_TO
59607: IFFALSE 59700
// begin if not ValidHex ( _x , _y ) then
59609: LD_VAR 0 11
59613: PPUSH
59614: LD_VAR 0 12
59618: PPUSH
59619: CALL_OW 488
59623: NOT
59624: IFFALSE 59628
// continue ;
59626: GO 59606
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
59628: LD_VAR 0 11
59632: PPUSH
59633: LD_VAR 0 12
59637: PPUSH
59638: CALL_OW 351
59642: PUSH
59643: LD_VAR 0 11
59647: PPUSH
59648: LD_VAR 0 12
59652: PPUSH
59653: CALL_OW 554
59657: AND
59658: IFFALSE 59698
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
59660: LD_ADDR_VAR 0 13
59664: PUSH
59665: LD_VAR 0 13
59669: PPUSH
59670: LD_VAR 0 13
59674: PUSH
59675: LD_INT 1
59677: PLUS
59678: PPUSH
59679: LD_VAR 0 11
59683: PUSH
59684: LD_VAR 0 12
59688: PUSH
59689: EMPTY
59690: LIST
59691: LIST
59692: PPUSH
59693: CALL_OW 2
59697: ST_TO_ADDR
// end ;
59698: GO 59606
59700: POP
59701: POP
59702: GO 59586
59704: POP
59705: POP
// if not list then
59706: LD_VAR 0 13
59710: NOT
59711: IFFALSE 59715
// exit ;
59713: GO 59959
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
59715: LD_ADDR_VAR 0 13
59719: PUSH
59720: LD_VAR 0 1
59724: PPUSH
59725: LD_VAR 0 13
59729: PPUSH
59730: LD_INT 1
59732: PPUSH
59733: LD_INT 1
59735: PPUSH
59736: CALL 20572 0 4
59740: ST_TO_ADDR
// ComStop ( flame ) ;
59741: LD_VAR 0 1
59745: PPUSH
59746: CALL_OW 141
// for i in list do
59750: LD_ADDR_VAR 0 6
59754: PUSH
59755: LD_VAR 0 13
59759: PUSH
59760: FOR_IN
59761: IFFALSE 59792
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
59763: LD_VAR 0 1
59767: PPUSH
59768: LD_VAR 0 6
59772: PUSH
59773: LD_INT 1
59775: ARRAY
59776: PPUSH
59777: LD_VAR 0 6
59781: PUSH
59782: LD_INT 2
59784: ARRAY
59785: PPUSH
59786: CALL_OW 176
59790: GO 59760
59792: POP
59793: POP
// repeat wait ( 0 0$1 ) ;
59794: LD_INT 35
59796: PPUSH
59797: CALL_OW 67
// task := GetTaskList ( flame ) ;
59801: LD_ADDR_VAR 0 14
59805: PUSH
59806: LD_VAR 0 1
59810: PPUSH
59811: CALL_OW 437
59815: ST_TO_ADDR
// if not task then
59816: LD_VAR 0 14
59820: NOT
59821: IFFALSE 59825
// exit ;
59823: GO 59959
// if task [ 1 ] [ 1 ] <> | then
59825: LD_VAR 0 14
59829: PUSH
59830: LD_INT 1
59832: ARRAY
59833: PUSH
59834: LD_INT 1
59836: ARRAY
59837: PUSH
59838: LD_STRING |
59840: NONEQUAL
59841: IFFALSE 59845
// exit ;
59843: GO 59959
// _x := task [ 1 ] [ 2 ] ;
59845: LD_ADDR_VAR 0 11
59849: PUSH
59850: LD_VAR 0 14
59854: PUSH
59855: LD_INT 1
59857: ARRAY
59858: PUSH
59859: LD_INT 2
59861: ARRAY
59862: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
59863: LD_ADDR_VAR 0 12
59867: PUSH
59868: LD_VAR 0 14
59872: PUSH
59873: LD_INT 1
59875: ARRAY
59876: PUSH
59877: LD_INT 3
59879: ARRAY
59880: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
59881: LD_VAR 0 11
59885: PPUSH
59886: LD_VAR 0 12
59890: PPUSH
59891: CALL_OW 351
59895: NOT
59896: PUSH
59897: LD_VAR 0 11
59901: PPUSH
59902: LD_VAR 0 12
59906: PPUSH
59907: CALL_OW 554
59911: NOT
59912: OR
59913: IFFALSE 59947
// begin task := Delete ( task , 1 ) ;
59915: LD_ADDR_VAR 0 14
59919: PUSH
59920: LD_VAR 0 14
59924: PPUSH
59925: LD_INT 1
59927: PPUSH
59928: CALL_OW 3
59932: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
59933: LD_VAR 0 1
59937: PPUSH
59938: LD_VAR 0 14
59942: PPUSH
59943: CALL_OW 446
// end ; until not HasTask ( flame ) ;
59947: LD_VAR 0 1
59951: PPUSH
59952: CALL_OW 314
59956: NOT
59957: IFFALSE 59794
// end ;
59959: LD_VAR 0 5
59963: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
59964: LD_EXP 41
59968: NOT
59969: IFFALSE 60019
59971: GO 59973
59973: DISABLE
// begin initHack := true ;
59974: LD_ADDR_EXP 41
59978: PUSH
59979: LD_INT 1
59981: ST_TO_ADDR
// hackTanks := [ ] ;
59982: LD_ADDR_EXP 42
59986: PUSH
59987: EMPTY
59988: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
59989: LD_ADDR_EXP 43
59993: PUSH
59994: EMPTY
59995: ST_TO_ADDR
// hackLimit := 3 ;
59996: LD_ADDR_EXP 44
60000: PUSH
60001: LD_INT 3
60003: ST_TO_ADDR
// hackDist := 12 ;
60004: LD_ADDR_EXP 45
60008: PUSH
60009: LD_INT 12
60011: ST_TO_ADDR
// hackCounter := [ ] ;
60012: LD_ADDR_EXP 46
60016: PUSH
60017: EMPTY
60018: ST_TO_ADDR
// end ;
60019: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
60020: LD_EXP 41
60024: PUSH
60025: LD_INT 34
60027: PUSH
60028: LD_INT 99
60030: PUSH
60031: EMPTY
60032: LIST
60033: LIST
60034: PPUSH
60035: CALL_OW 69
60039: AND
60040: IFFALSE 60293
60042: GO 60044
60044: DISABLE
60045: LD_INT 0
60047: PPUSH
60048: PPUSH
// begin enable ;
60049: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
60050: LD_ADDR_VAR 0 1
60054: PUSH
60055: LD_INT 34
60057: PUSH
60058: LD_INT 99
60060: PUSH
60061: EMPTY
60062: LIST
60063: LIST
60064: PPUSH
60065: CALL_OW 69
60069: PUSH
60070: FOR_IN
60071: IFFALSE 60291
// begin if not i in hackTanks then
60073: LD_VAR 0 1
60077: PUSH
60078: LD_EXP 42
60082: IN
60083: NOT
60084: IFFALSE 60167
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
60086: LD_ADDR_EXP 42
60090: PUSH
60091: LD_EXP 42
60095: PPUSH
60096: LD_EXP 42
60100: PUSH
60101: LD_INT 1
60103: PLUS
60104: PPUSH
60105: LD_VAR 0 1
60109: PPUSH
60110: CALL_OW 1
60114: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
60115: LD_ADDR_EXP 43
60119: PUSH
60120: LD_EXP 43
60124: PPUSH
60125: LD_EXP 43
60129: PUSH
60130: LD_INT 1
60132: PLUS
60133: PPUSH
60134: EMPTY
60135: PPUSH
60136: CALL_OW 1
60140: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
60141: LD_ADDR_EXP 46
60145: PUSH
60146: LD_EXP 46
60150: PPUSH
60151: LD_EXP 46
60155: PUSH
60156: LD_INT 1
60158: PLUS
60159: PPUSH
60160: EMPTY
60161: PPUSH
60162: CALL_OW 1
60166: ST_TO_ADDR
// end ; if not IsOk ( i ) then
60167: LD_VAR 0 1
60171: PPUSH
60172: CALL_OW 302
60176: NOT
60177: IFFALSE 60190
// begin HackUnlinkAll ( i ) ;
60179: LD_VAR 0 1
60183: PPUSH
60184: CALL 60296 0 1
// continue ;
60188: GO 60070
// end ; HackCheckCapturedStatus ( i ) ;
60190: LD_VAR 0 1
60194: PPUSH
60195: CALL 60739 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
60199: LD_ADDR_VAR 0 2
60203: PUSH
60204: LD_INT 81
60206: PUSH
60207: LD_VAR 0 1
60211: PPUSH
60212: CALL_OW 255
60216: PUSH
60217: EMPTY
60218: LIST
60219: LIST
60220: PUSH
60221: LD_INT 33
60223: PUSH
60224: LD_INT 3
60226: PUSH
60227: EMPTY
60228: LIST
60229: LIST
60230: PUSH
60231: LD_INT 91
60233: PUSH
60234: LD_VAR 0 1
60238: PUSH
60239: LD_EXP 45
60243: PUSH
60244: EMPTY
60245: LIST
60246: LIST
60247: LIST
60248: PUSH
60249: LD_INT 50
60251: PUSH
60252: EMPTY
60253: LIST
60254: PUSH
60255: EMPTY
60256: LIST
60257: LIST
60258: LIST
60259: LIST
60260: PPUSH
60261: CALL_OW 69
60265: ST_TO_ADDR
// if not tmp then
60266: LD_VAR 0 2
60270: NOT
60271: IFFALSE 60275
// continue ;
60273: GO 60070
// HackLink ( i , tmp ) ;
60275: LD_VAR 0 1
60279: PPUSH
60280: LD_VAR 0 2
60284: PPUSH
60285: CALL 60432 0 2
// end ;
60289: GO 60070
60291: POP
60292: POP
// end ;
60293: PPOPN 2
60295: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
60296: LD_INT 0
60298: PPUSH
60299: PPUSH
60300: PPUSH
// if not hack in hackTanks then
60301: LD_VAR 0 1
60305: PUSH
60306: LD_EXP 42
60310: IN
60311: NOT
60312: IFFALSE 60316
// exit ;
60314: GO 60427
// index := GetElementIndex ( hackTanks , hack ) ;
60316: LD_ADDR_VAR 0 4
60320: PUSH
60321: LD_EXP 42
60325: PPUSH
60326: LD_VAR 0 1
60330: PPUSH
60331: CALL 19869 0 2
60335: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
60336: LD_EXP 43
60340: PUSH
60341: LD_VAR 0 4
60345: ARRAY
60346: IFFALSE 60427
// begin for i in hackTanksCaptured [ index ] do
60348: LD_ADDR_VAR 0 3
60352: PUSH
60353: LD_EXP 43
60357: PUSH
60358: LD_VAR 0 4
60362: ARRAY
60363: PUSH
60364: FOR_IN
60365: IFFALSE 60391
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
60367: LD_VAR 0 3
60371: PUSH
60372: LD_INT 1
60374: ARRAY
60375: PPUSH
60376: LD_VAR 0 3
60380: PUSH
60381: LD_INT 2
60383: ARRAY
60384: PPUSH
60385: CALL_OW 235
60389: GO 60364
60391: POP
60392: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
60393: LD_ADDR_EXP 43
60397: PUSH
60398: LD_EXP 43
60402: PPUSH
60403: LD_VAR 0 4
60407: PPUSH
60408: EMPTY
60409: PPUSH
60410: CALL_OW 1
60414: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
60415: LD_VAR 0 1
60419: PPUSH
60420: LD_INT 0
60422: PPUSH
60423: CALL_OW 505
// end ; end ;
60427: LD_VAR 0 2
60431: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
60432: LD_INT 0
60434: PPUSH
60435: PPUSH
60436: PPUSH
// if not hack in hackTanks or not vehicles then
60437: LD_VAR 0 1
60441: PUSH
60442: LD_EXP 42
60446: IN
60447: NOT
60448: PUSH
60449: LD_VAR 0 2
60453: NOT
60454: OR
60455: IFFALSE 60459
// exit ;
60457: GO 60734
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
60459: LD_ADDR_VAR 0 2
60463: PUSH
60464: LD_VAR 0 1
60468: PPUSH
60469: LD_VAR 0 2
60473: PPUSH
60474: LD_INT 1
60476: PPUSH
60477: LD_INT 1
60479: PPUSH
60480: CALL 20519 0 4
60484: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
60485: LD_ADDR_VAR 0 5
60489: PUSH
60490: LD_EXP 42
60494: PPUSH
60495: LD_VAR 0 1
60499: PPUSH
60500: CALL 19869 0 2
60504: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
60505: LD_EXP 43
60509: PUSH
60510: LD_VAR 0 5
60514: ARRAY
60515: PUSH
60516: LD_EXP 44
60520: LESS
60521: IFFALSE 60710
// begin for i := 1 to vehicles do
60523: LD_ADDR_VAR 0 4
60527: PUSH
60528: DOUBLE
60529: LD_INT 1
60531: DEC
60532: ST_TO_ADDR
60533: LD_VAR 0 2
60537: PUSH
60538: FOR_TO
60539: IFFALSE 60708
// begin if hackTanksCaptured [ index ] = hackLimit then
60541: LD_EXP 43
60545: PUSH
60546: LD_VAR 0 5
60550: ARRAY
60551: PUSH
60552: LD_EXP 44
60556: EQUAL
60557: IFFALSE 60561
// break ;
60559: GO 60708
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
60561: LD_ADDR_EXP 46
60565: PUSH
60566: LD_EXP 46
60570: PPUSH
60571: LD_VAR 0 5
60575: PPUSH
60576: LD_EXP 46
60580: PUSH
60581: LD_VAR 0 5
60585: ARRAY
60586: PUSH
60587: LD_INT 1
60589: PLUS
60590: PPUSH
60591: CALL_OW 1
60595: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
60596: LD_ADDR_EXP 43
60600: PUSH
60601: LD_EXP 43
60605: PPUSH
60606: LD_VAR 0 5
60610: PUSH
60611: LD_EXP 43
60615: PUSH
60616: LD_VAR 0 5
60620: ARRAY
60621: PUSH
60622: LD_INT 1
60624: PLUS
60625: PUSH
60626: EMPTY
60627: LIST
60628: LIST
60629: PPUSH
60630: LD_VAR 0 2
60634: PUSH
60635: LD_VAR 0 4
60639: ARRAY
60640: PUSH
60641: LD_VAR 0 2
60645: PUSH
60646: LD_VAR 0 4
60650: ARRAY
60651: PPUSH
60652: CALL_OW 255
60656: PUSH
60657: EMPTY
60658: LIST
60659: LIST
60660: PPUSH
60661: CALL 20084 0 3
60665: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
60666: LD_VAR 0 2
60670: PUSH
60671: LD_VAR 0 4
60675: ARRAY
60676: PPUSH
60677: LD_VAR 0 1
60681: PPUSH
60682: CALL_OW 255
60686: PPUSH
60687: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
60691: LD_VAR 0 2
60695: PUSH
60696: LD_VAR 0 4
60700: ARRAY
60701: PPUSH
60702: CALL_OW 141
// end ;
60706: GO 60538
60708: POP
60709: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
60710: LD_VAR 0 1
60714: PPUSH
60715: LD_EXP 43
60719: PUSH
60720: LD_VAR 0 5
60724: ARRAY
60725: PUSH
60726: LD_INT 0
60728: PLUS
60729: PPUSH
60730: CALL_OW 505
// end ;
60734: LD_VAR 0 3
60738: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
60739: LD_INT 0
60741: PPUSH
60742: PPUSH
60743: PPUSH
60744: PPUSH
// if not hack in hackTanks then
60745: LD_VAR 0 1
60749: PUSH
60750: LD_EXP 42
60754: IN
60755: NOT
60756: IFFALSE 60760
// exit ;
60758: GO 61000
// index := GetElementIndex ( hackTanks , hack ) ;
60760: LD_ADDR_VAR 0 4
60764: PUSH
60765: LD_EXP 42
60769: PPUSH
60770: LD_VAR 0 1
60774: PPUSH
60775: CALL 19869 0 2
60779: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
60780: LD_ADDR_VAR 0 3
60784: PUSH
60785: DOUBLE
60786: LD_EXP 43
60790: PUSH
60791: LD_VAR 0 4
60795: ARRAY
60796: INC
60797: ST_TO_ADDR
60798: LD_INT 1
60800: PUSH
60801: FOR_DOWNTO
60802: IFFALSE 60974
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
60804: LD_ADDR_VAR 0 5
60808: PUSH
60809: LD_EXP 43
60813: PUSH
60814: LD_VAR 0 4
60818: ARRAY
60819: PUSH
60820: LD_VAR 0 3
60824: ARRAY
60825: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
60826: LD_VAR 0 5
60830: PUSH
60831: LD_INT 1
60833: ARRAY
60834: PPUSH
60835: CALL_OW 302
60839: NOT
60840: PUSH
60841: LD_VAR 0 5
60845: PUSH
60846: LD_INT 1
60848: ARRAY
60849: PPUSH
60850: CALL_OW 255
60854: PUSH
60855: LD_VAR 0 1
60859: PPUSH
60860: CALL_OW 255
60864: NONEQUAL
60865: OR
60866: IFFALSE 60972
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
60868: LD_VAR 0 5
60872: PUSH
60873: LD_INT 1
60875: ARRAY
60876: PPUSH
60877: CALL_OW 305
60881: PUSH
60882: LD_VAR 0 5
60886: PUSH
60887: LD_INT 1
60889: ARRAY
60890: PPUSH
60891: CALL_OW 255
60895: PUSH
60896: LD_VAR 0 1
60900: PPUSH
60901: CALL_OW 255
60905: EQUAL
60906: AND
60907: IFFALSE 60931
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
60909: LD_VAR 0 5
60913: PUSH
60914: LD_INT 1
60916: ARRAY
60917: PPUSH
60918: LD_VAR 0 5
60922: PUSH
60923: LD_INT 2
60925: ARRAY
60926: PPUSH
60927: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
60931: LD_ADDR_EXP 43
60935: PUSH
60936: LD_EXP 43
60940: PPUSH
60941: LD_VAR 0 4
60945: PPUSH
60946: LD_EXP 43
60950: PUSH
60951: LD_VAR 0 4
60955: ARRAY
60956: PPUSH
60957: LD_VAR 0 3
60961: PPUSH
60962: CALL_OW 3
60966: PPUSH
60967: CALL_OW 1
60971: ST_TO_ADDR
// end ; end ;
60972: GO 60801
60974: POP
60975: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
60976: LD_VAR 0 1
60980: PPUSH
60981: LD_EXP 43
60985: PUSH
60986: LD_VAR 0 4
60990: ARRAY
60991: PUSH
60992: LD_INT 0
60994: PLUS
60995: PPUSH
60996: CALL_OW 505
// end ;
61000: LD_VAR 0 2
61004: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
61005: LD_INT 0
61007: PPUSH
61008: PPUSH
61009: PPUSH
61010: PPUSH
// if not hack in hackTanks then
61011: LD_VAR 0 1
61015: PUSH
61016: LD_EXP 42
61020: IN
61021: NOT
61022: IFFALSE 61026
// exit ;
61024: GO 61111
// index := GetElementIndex ( hackTanks , hack ) ;
61026: LD_ADDR_VAR 0 5
61030: PUSH
61031: LD_EXP 42
61035: PPUSH
61036: LD_VAR 0 1
61040: PPUSH
61041: CALL 19869 0 2
61045: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
61046: LD_ADDR_VAR 0 4
61050: PUSH
61051: DOUBLE
61052: LD_INT 1
61054: DEC
61055: ST_TO_ADDR
61056: LD_EXP 43
61060: PUSH
61061: LD_VAR 0 5
61065: ARRAY
61066: PUSH
61067: FOR_TO
61068: IFFALSE 61109
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
61070: LD_EXP 43
61074: PUSH
61075: LD_VAR 0 5
61079: ARRAY
61080: PUSH
61081: LD_VAR 0 4
61085: ARRAY
61086: PUSH
61087: LD_INT 1
61089: ARRAY
61090: PUSH
61091: LD_VAR 0 2
61095: EQUAL
61096: IFFALSE 61107
// KillUnit ( vehicle ) ;
61098: LD_VAR 0 2
61102: PPUSH
61103: CALL_OW 66
61107: GO 61067
61109: POP
61110: POP
// end ;
61111: LD_VAR 0 3
61115: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
61116: LD_EXP 47
61120: NOT
61121: IFFALSE 61156
61123: GO 61125
61125: DISABLE
// begin initMiner := true ;
61126: LD_ADDR_EXP 47
61130: PUSH
61131: LD_INT 1
61133: ST_TO_ADDR
// minersList := [ ] ;
61134: LD_ADDR_EXP 48
61138: PUSH
61139: EMPTY
61140: ST_TO_ADDR
// minerMinesList := [ ] ;
61141: LD_ADDR_EXP 49
61145: PUSH
61146: EMPTY
61147: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
61148: LD_ADDR_EXP 50
61152: PUSH
61153: LD_INT 5
61155: ST_TO_ADDR
// end ;
61156: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
61157: LD_EXP 47
61161: PUSH
61162: LD_INT 34
61164: PUSH
61165: LD_INT 81
61167: PUSH
61168: EMPTY
61169: LIST
61170: LIST
61171: PPUSH
61172: CALL_OW 69
61176: AND
61177: IFFALSE 61638
61179: GO 61181
61181: DISABLE
61182: LD_INT 0
61184: PPUSH
61185: PPUSH
61186: PPUSH
61187: PPUSH
// begin enable ;
61188: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
61189: LD_ADDR_VAR 0 1
61193: PUSH
61194: LD_INT 34
61196: PUSH
61197: LD_INT 81
61199: PUSH
61200: EMPTY
61201: LIST
61202: LIST
61203: PPUSH
61204: CALL_OW 69
61208: PUSH
61209: FOR_IN
61210: IFFALSE 61282
// begin if not i in minersList then
61212: LD_VAR 0 1
61216: PUSH
61217: LD_EXP 48
61221: IN
61222: NOT
61223: IFFALSE 61280
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
61225: LD_ADDR_EXP 48
61229: PUSH
61230: LD_EXP 48
61234: PPUSH
61235: LD_EXP 48
61239: PUSH
61240: LD_INT 1
61242: PLUS
61243: PPUSH
61244: LD_VAR 0 1
61248: PPUSH
61249: CALL_OW 1
61253: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
61254: LD_ADDR_EXP 49
61258: PUSH
61259: LD_EXP 49
61263: PPUSH
61264: LD_EXP 49
61268: PUSH
61269: LD_INT 1
61271: PLUS
61272: PPUSH
61273: EMPTY
61274: PPUSH
61275: CALL_OW 1
61279: ST_TO_ADDR
// end end ;
61280: GO 61209
61282: POP
61283: POP
// for i := minerMinesList downto 1 do
61284: LD_ADDR_VAR 0 1
61288: PUSH
61289: DOUBLE
61290: LD_EXP 49
61294: INC
61295: ST_TO_ADDR
61296: LD_INT 1
61298: PUSH
61299: FOR_DOWNTO
61300: IFFALSE 61636
// begin if IsLive ( minersList [ i ] ) then
61302: LD_EXP 48
61306: PUSH
61307: LD_VAR 0 1
61311: ARRAY
61312: PPUSH
61313: CALL_OW 300
61317: IFFALSE 61345
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
61319: LD_EXP 48
61323: PUSH
61324: LD_VAR 0 1
61328: ARRAY
61329: PPUSH
61330: LD_EXP 49
61334: PUSH
61335: LD_VAR 0 1
61339: ARRAY
61340: PPUSH
61341: CALL_OW 505
// if not minerMinesList [ i ] then
61345: LD_EXP 49
61349: PUSH
61350: LD_VAR 0 1
61354: ARRAY
61355: NOT
61356: IFFALSE 61360
// continue ;
61358: GO 61299
// for j := minerMinesList [ i ] downto 1 do
61360: LD_ADDR_VAR 0 2
61364: PUSH
61365: DOUBLE
61366: LD_EXP 49
61370: PUSH
61371: LD_VAR 0 1
61375: ARRAY
61376: INC
61377: ST_TO_ADDR
61378: LD_INT 1
61380: PUSH
61381: FOR_DOWNTO
61382: IFFALSE 61632
// begin side := GetSide ( minersList [ i ] ) ;
61384: LD_ADDR_VAR 0 3
61388: PUSH
61389: LD_EXP 48
61393: PUSH
61394: LD_VAR 0 1
61398: ARRAY
61399: PPUSH
61400: CALL_OW 255
61404: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
61405: LD_ADDR_VAR 0 4
61409: PUSH
61410: LD_EXP 49
61414: PUSH
61415: LD_VAR 0 1
61419: ARRAY
61420: PUSH
61421: LD_VAR 0 2
61425: ARRAY
61426: PUSH
61427: LD_INT 1
61429: ARRAY
61430: PPUSH
61431: LD_EXP 49
61435: PUSH
61436: LD_VAR 0 1
61440: ARRAY
61441: PUSH
61442: LD_VAR 0 2
61446: ARRAY
61447: PUSH
61448: LD_INT 2
61450: ARRAY
61451: PPUSH
61452: CALL_OW 428
61456: ST_TO_ADDR
// if not tmp then
61457: LD_VAR 0 4
61461: NOT
61462: IFFALSE 61466
// continue ;
61464: GO 61381
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
61466: LD_VAR 0 4
61470: PUSH
61471: LD_INT 81
61473: PUSH
61474: LD_VAR 0 3
61478: PUSH
61479: EMPTY
61480: LIST
61481: LIST
61482: PPUSH
61483: CALL_OW 69
61487: IN
61488: PUSH
61489: LD_EXP 49
61493: PUSH
61494: LD_VAR 0 1
61498: ARRAY
61499: PUSH
61500: LD_VAR 0 2
61504: ARRAY
61505: PUSH
61506: LD_INT 1
61508: ARRAY
61509: PPUSH
61510: LD_EXP 49
61514: PUSH
61515: LD_VAR 0 1
61519: ARRAY
61520: PUSH
61521: LD_VAR 0 2
61525: ARRAY
61526: PUSH
61527: LD_INT 2
61529: ARRAY
61530: PPUSH
61531: CALL_OW 458
61535: AND
61536: IFFALSE 61630
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
61538: LD_EXP 49
61542: PUSH
61543: LD_VAR 0 1
61547: ARRAY
61548: PUSH
61549: LD_VAR 0 2
61553: ARRAY
61554: PUSH
61555: LD_INT 1
61557: ARRAY
61558: PPUSH
61559: LD_EXP 49
61563: PUSH
61564: LD_VAR 0 1
61568: ARRAY
61569: PUSH
61570: LD_VAR 0 2
61574: ARRAY
61575: PUSH
61576: LD_INT 2
61578: ARRAY
61579: PPUSH
61580: LD_VAR 0 3
61584: PPUSH
61585: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
61589: LD_ADDR_EXP 49
61593: PUSH
61594: LD_EXP 49
61598: PPUSH
61599: LD_VAR 0 1
61603: PPUSH
61604: LD_EXP 49
61608: PUSH
61609: LD_VAR 0 1
61613: ARRAY
61614: PPUSH
61615: LD_VAR 0 2
61619: PPUSH
61620: CALL_OW 3
61624: PPUSH
61625: CALL_OW 1
61629: ST_TO_ADDR
// end ; end ;
61630: GO 61381
61632: POP
61633: POP
// end ;
61634: GO 61299
61636: POP
61637: POP
// end ;
61638: PPOPN 4
61640: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
61641: LD_INT 0
61643: PPUSH
61644: PPUSH
// result := false ;
61645: LD_ADDR_VAR 0 4
61649: PUSH
61650: LD_INT 0
61652: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
61653: LD_VAR 0 1
61657: PPUSH
61658: CALL_OW 264
61662: PUSH
61663: LD_INT 81
61665: EQUAL
61666: NOT
61667: IFFALSE 61671
// exit ;
61669: GO 61911
// index := GetElementIndex ( minersList , unit ) ;
61671: LD_ADDR_VAR 0 5
61675: PUSH
61676: LD_EXP 48
61680: PPUSH
61681: LD_VAR 0 1
61685: PPUSH
61686: CALL 19869 0 2
61690: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
61691: LD_EXP 49
61695: PUSH
61696: LD_VAR 0 5
61700: ARRAY
61701: PUSH
61702: LD_EXP 50
61706: GREATEREQUAL
61707: IFFALSE 61711
// exit ;
61709: GO 61911
// ComMoveXY ( unit , x , y ) ;
61711: LD_VAR 0 1
61715: PPUSH
61716: LD_VAR 0 2
61720: PPUSH
61721: LD_VAR 0 3
61725: PPUSH
61726: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
61730: LD_INT 35
61732: PPUSH
61733: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
61737: LD_VAR 0 1
61741: PPUSH
61742: LD_VAR 0 2
61746: PPUSH
61747: LD_VAR 0 3
61751: PPUSH
61752: CALL 51630 0 3
61756: NOT
61757: PUSH
61758: LD_VAR 0 1
61762: PPUSH
61763: CALL_OW 314
61767: AND
61768: IFFALSE 61772
// exit ;
61770: GO 61911
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
61772: LD_VAR 0 2
61776: PPUSH
61777: LD_VAR 0 3
61781: PPUSH
61782: CALL_OW 428
61786: PUSH
61787: LD_VAR 0 1
61791: EQUAL
61792: PUSH
61793: LD_VAR 0 1
61797: PPUSH
61798: CALL_OW 314
61802: NOT
61803: AND
61804: IFFALSE 61730
// PlaySoundXY ( x , y , PlantMine ) ;
61806: LD_VAR 0 2
61810: PPUSH
61811: LD_VAR 0 3
61815: PPUSH
61816: LD_STRING PlantMine
61818: PPUSH
61819: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
61823: LD_VAR 0 2
61827: PPUSH
61828: LD_VAR 0 3
61832: PPUSH
61833: LD_VAR 0 1
61837: PPUSH
61838: CALL_OW 255
61842: PPUSH
61843: LD_INT 0
61845: PPUSH
61846: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
61850: LD_ADDR_EXP 49
61854: PUSH
61855: LD_EXP 49
61859: PPUSH
61860: LD_VAR 0 5
61864: PUSH
61865: LD_EXP 49
61869: PUSH
61870: LD_VAR 0 5
61874: ARRAY
61875: PUSH
61876: LD_INT 1
61878: PLUS
61879: PUSH
61880: EMPTY
61881: LIST
61882: LIST
61883: PPUSH
61884: LD_VAR 0 2
61888: PUSH
61889: LD_VAR 0 3
61893: PUSH
61894: EMPTY
61895: LIST
61896: LIST
61897: PPUSH
61898: CALL 20084 0 3
61902: ST_TO_ADDR
// result := true ;
61903: LD_ADDR_VAR 0 4
61907: PUSH
61908: LD_INT 1
61910: ST_TO_ADDR
// end ;
61911: LD_VAR 0 4
61915: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
61916: LD_INT 0
61918: PPUSH
61919: PPUSH
61920: PPUSH
// if not unit in minersList then
61921: LD_VAR 0 1
61925: PUSH
61926: LD_EXP 48
61930: IN
61931: NOT
61932: IFFALSE 61936
// exit ;
61934: GO 62328
// index := GetElementIndex ( minersList , unit ) ;
61936: LD_ADDR_VAR 0 6
61940: PUSH
61941: LD_EXP 48
61945: PPUSH
61946: LD_VAR 0 1
61950: PPUSH
61951: CALL 19869 0 2
61955: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
61956: LD_ADDR_VAR 0 5
61960: PUSH
61961: DOUBLE
61962: LD_EXP 49
61966: PUSH
61967: LD_VAR 0 6
61971: ARRAY
61972: INC
61973: ST_TO_ADDR
61974: LD_INT 1
61976: PUSH
61977: FOR_DOWNTO
61978: IFFALSE 62139
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
61980: LD_EXP 49
61984: PUSH
61985: LD_VAR 0 6
61989: ARRAY
61990: PUSH
61991: LD_VAR 0 5
61995: ARRAY
61996: PUSH
61997: LD_INT 1
61999: ARRAY
62000: PUSH
62001: LD_VAR 0 2
62005: EQUAL
62006: PUSH
62007: LD_EXP 49
62011: PUSH
62012: LD_VAR 0 6
62016: ARRAY
62017: PUSH
62018: LD_VAR 0 5
62022: ARRAY
62023: PUSH
62024: LD_INT 2
62026: ARRAY
62027: PUSH
62028: LD_VAR 0 3
62032: EQUAL
62033: AND
62034: IFFALSE 62137
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
62036: LD_EXP 49
62040: PUSH
62041: LD_VAR 0 6
62045: ARRAY
62046: PUSH
62047: LD_VAR 0 5
62051: ARRAY
62052: PUSH
62053: LD_INT 1
62055: ARRAY
62056: PPUSH
62057: LD_EXP 49
62061: PUSH
62062: LD_VAR 0 6
62066: ARRAY
62067: PUSH
62068: LD_VAR 0 5
62072: ARRAY
62073: PUSH
62074: LD_INT 2
62076: ARRAY
62077: PPUSH
62078: LD_VAR 0 1
62082: PPUSH
62083: CALL_OW 255
62087: PPUSH
62088: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
62092: LD_ADDR_EXP 49
62096: PUSH
62097: LD_EXP 49
62101: PPUSH
62102: LD_VAR 0 6
62106: PPUSH
62107: LD_EXP 49
62111: PUSH
62112: LD_VAR 0 6
62116: ARRAY
62117: PPUSH
62118: LD_VAR 0 5
62122: PPUSH
62123: CALL_OW 3
62127: PPUSH
62128: CALL_OW 1
62132: ST_TO_ADDR
// exit ;
62133: POP
62134: POP
62135: GO 62328
// end ; end ;
62137: GO 61977
62139: POP
62140: POP
// for i := minerMinesList [ index ] downto 1 do
62141: LD_ADDR_VAR 0 5
62145: PUSH
62146: DOUBLE
62147: LD_EXP 49
62151: PUSH
62152: LD_VAR 0 6
62156: ARRAY
62157: INC
62158: ST_TO_ADDR
62159: LD_INT 1
62161: PUSH
62162: FOR_DOWNTO
62163: IFFALSE 62326
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
62165: LD_EXP 49
62169: PUSH
62170: LD_VAR 0 6
62174: ARRAY
62175: PUSH
62176: LD_VAR 0 5
62180: ARRAY
62181: PUSH
62182: LD_INT 1
62184: ARRAY
62185: PPUSH
62186: LD_EXP 49
62190: PUSH
62191: LD_VAR 0 6
62195: ARRAY
62196: PUSH
62197: LD_VAR 0 5
62201: ARRAY
62202: PUSH
62203: LD_INT 2
62205: ARRAY
62206: PPUSH
62207: LD_VAR 0 2
62211: PPUSH
62212: LD_VAR 0 3
62216: PPUSH
62217: CALL_OW 298
62221: PUSH
62222: LD_INT 6
62224: LESS
62225: IFFALSE 62324
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
62227: LD_EXP 49
62231: PUSH
62232: LD_VAR 0 6
62236: ARRAY
62237: PUSH
62238: LD_VAR 0 5
62242: ARRAY
62243: PUSH
62244: LD_INT 1
62246: ARRAY
62247: PPUSH
62248: LD_EXP 49
62252: PUSH
62253: LD_VAR 0 6
62257: ARRAY
62258: PUSH
62259: LD_VAR 0 5
62263: ARRAY
62264: PUSH
62265: LD_INT 2
62267: ARRAY
62268: PPUSH
62269: LD_VAR 0 1
62273: PPUSH
62274: CALL_OW 255
62278: PPUSH
62279: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
62283: LD_ADDR_EXP 49
62287: PUSH
62288: LD_EXP 49
62292: PPUSH
62293: LD_VAR 0 6
62297: PPUSH
62298: LD_EXP 49
62302: PUSH
62303: LD_VAR 0 6
62307: ARRAY
62308: PPUSH
62309: LD_VAR 0 5
62313: PPUSH
62314: CALL_OW 3
62318: PPUSH
62319: CALL_OW 1
62323: ST_TO_ADDR
// end ; end ;
62324: GO 62162
62326: POP
62327: POP
// end ;
62328: LD_VAR 0 4
62332: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
62333: LD_INT 0
62335: PPUSH
62336: PPUSH
62337: PPUSH
62338: PPUSH
62339: PPUSH
62340: PPUSH
62341: PPUSH
62342: PPUSH
62343: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
62344: LD_VAR 0 1
62348: PPUSH
62349: CALL_OW 264
62353: PUSH
62354: LD_INT 81
62356: EQUAL
62357: NOT
62358: PUSH
62359: LD_VAR 0 1
62363: PUSH
62364: LD_EXP 48
62368: IN
62369: NOT
62370: OR
62371: IFFALSE 62375
// exit ;
62373: GO 62697
// index := GetElementIndex ( minersList , unit ) ;
62375: LD_ADDR_VAR 0 6
62379: PUSH
62380: LD_EXP 48
62384: PPUSH
62385: LD_VAR 0 1
62389: PPUSH
62390: CALL 19869 0 2
62394: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
62395: LD_ADDR_VAR 0 8
62399: PUSH
62400: LD_EXP 50
62404: PUSH
62405: LD_EXP 49
62409: PUSH
62410: LD_VAR 0 6
62414: ARRAY
62415: MINUS
62416: ST_TO_ADDR
// if not minesFreeAmount then
62417: LD_VAR 0 8
62421: NOT
62422: IFFALSE 62426
// exit ;
62424: GO 62697
// tmp := [ ] ;
62426: LD_ADDR_VAR 0 7
62430: PUSH
62431: EMPTY
62432: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
62433: LD_ADDR_VAR 0 5
62437: PUSH
62438: DOUBLE
62439: LD_INT 1
62441: DEC
62442: ST_TO_ADDR
62443: LD_VAR 0 8
62447: PUSH
62448: FOR_TO
62449: IFFALSE 62644
// begin _d := rand ( 0 , 5 ) ;
62451: LD_ADDR_VAR 0 11
62455: PUSH
62456: LD_INT 0
62458: PPUSH
62459: LD_INT 5
62461: PPUSH
62462: CALL_OW 12
62466: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
62467: LD_ADDR_VAR 0 12
62471: PUSH
62472: LD_INT 2
62474: PPUSH
62475: LD_INT 6
62477: PPUSH
62478: CALL_OW 12
62482: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
62483: LD_ADDR_VAR 0 9
62487: PUSH
62488: LD_VAR 0 2
62492: PPUSH
62493: LD_VAR 0 11
62497: PPUSH
62498: LD_VAR 0 12
62502: PPUSH
62503: CALL_OW 272
62507: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
62508: LD_ADDR_VAR 0 10
62512: PUSH
62513: LD_VAR 0 3
62517: PPUSH
62518: LD_VAR 0 11
62522: PPUSH
62523: LD_VAR 0 12
62527: PPUSH
62528: CALL_OW 273
62532: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
62533: LD_VAR 0 9
62537: PPUSH
62538: LD_VAR 0 10
62542: PPUSH
62543: CALL_OW 488
62547: PUSH
62548: LD_VAR 0 9
62552: PUSH
62553: LD_VAR 0 10
62557: PUSH
62558: EMPTY
62559: LIST
62560: LIST
62561: PUSH
62562: LD_VAR 0 7
62566: IN
62567: NOT
62568: AND
62569: PUSH
62570: LD_VAR 0 9
62574: PPUSH
62575: LD_VAR 0 10
62579: PPUSH
62580: CALL_OW 458
62584: NOT
62585: AND
62586: IFFALSE 62628
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
62588: LD_ADDR_VAR 0 7
62592: PUSH
62593: LD_VAR 0 7
62597: PPUSH
62598: LD_VAR 0 7
62602: PUSH
62603: LD_INT 1
62605: PLUS
62606: PPUSH
62607: LD_VAR 0 9
62611: PUSH
62612: LD_VAR 0 10
62616: PUSH
62617: EMPTY
62618: LIST
62619: LIST
62620: PPUSH
62621: CALL_OW 1
62625: ST_TO_ADDR
62626: GO 62642
// i := i - 1 ;
62628: LD_ADDR_VAR 0 5
62632: PUSH
62633: LD_VAR 0 5
62637: PUSH
62638: LD_INT 1
62640: MINUS
62641: ST_TO_ADDR
// end ;
62642: GO 62448
62644: POP
62645: POP
// for i in tmp do
62646: LD_ADDR_VAR 0 5
62650: PUSH
62651: LD_VAR 0 7
62655: PUSH
62656: FOR_IN
62657: IFFALSE 62695
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
62659: LD_VAR 0 1
62663: PPUSH
62664: LD_VAR 0 5
62668: PUSH
62669: LD_INT 1
62671: ARRAY
62672: PPUSH
62673: LD_VAR 0 5
62677: PUSH
62678: LD_INT 2
62680: ARRAY
62681: PPUSH
62682: CALL 61641 0 3
62686: NOT
62687: IFFALSE 62693
// exit ;
62689: POP
62690: POP
62691: GO 62697
62693: GO 62656
62695: POP
62696: POP
// end ;
62697: LD_VAR 0 4
62701: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
62702: LD_INT 0
62704: PPUSH
62705: PPUSH
62706: PPUSH
62707: PPUSH
62708: PPUSH
62709: PPUSH
62710: PPUSH
62711: PPUSH
62712: PPUSH
// if GetClass ( unit ) <> class_sniper then
62713: LD_VAR 0 1
62717: PPUSH
62718: CALL_OW 257
62722: PUSH
62723: LD_INT 5
62725: NONEQUAL
62726: IFFALSE 62730
// exit ;
62728: GO 63196
// dist := 8 ;
62730: LD_ADDR_VAR 0 5
62734: PUSH
62735: LD_INT 8
62737: ST_TO_ADDR
// viewRange := 12 ;
62738: LD_ADDR_VAR 0 8
62742: PUSH
62743: LD_INT 12
62745: ST_TO_ADDR
// side := GetSide ( unit ) ;
62746: LD_ADDR_VAR 0 6
62750: PUSH
62751: LD_VAR 0 1
62755: PPUSH
62756: CALL_OW 255
62760: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
62761: LD_INT 61
62763: PPUSH
62764: LD_VAR 0 6
62768: PPUSH
62769: CALL_OW 321
62773: PUSH
62774: LD_INT 2
62776: EQUAL
62777: IFFALSE 62787
// viewRange := 16 ;
62779: LD_ADDR_VAR 0 8
62783: PUSH
62784: LD_INT 16
62786: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
62787: LD_VAR 0 1
62791: PPUSH
62792: LD_VAR 0 2
62796: PPUSH
62797: LD_VAR 0 3
62801: PPUSH
62802: CALL_OW 297
62806: PUSH
62807: LD_VAR 0 5
62811: GREATER
62812: IFFALSE 62891
// begin ComMoveXY ( unit , x , y ) ;
62814: LD_VAR 0 1
62818: PPUSH
62819: LD_VAR 0 2
62823: PPUSH
62824: LD_VAR 0 3
62828: PPUSH
62829: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
62833: LD_INT 35
62835: PPUSH
62836: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
62840: LD_VAR 0 1
62844: PPUSH
62845: LD_VAR 0 2
62849: PPUSH
62850: LD_VAR 0 3
62854: PPUSH
62855: CALL 51630 0 3
62859: NOT
62860: IFFALSE 62864
// exit ;
62862: GO 63196
// until GetDistUnitXY ( unit , x , y ) < dist ;
62864: LD_VAR 0 1
62868: PPUSH
62869: LD_VAR 0 2
62873: PPUSH
62874: LD_VAR 0 3
62878: PPUSH
62879: CALL_OW 297
62883: PUSH
62884: LD_VAR 0 5
62888: LESS
62889: IFFALSE 62833
// end ; ComTurnXY ( unit , x , y ) ;
62891: LD_VAR 0 1
62895: PPUSH
62896: LD_VAR 0 2
62900: PPUSH
62901: LD_VAR 0 3
62905: PPUSH
62906: CALL_OW 118
// repeat if Multiplayer then
62910: LD_OWVAR 4
62914: IFFALSE 62925
// wait ( 35 ) else
62916: LD_INT 35
62918: PPUSH
62919: CALL_OW 67
62923: GO 62932
// wait ( 5 ) ;
62925: LD_INT 5
62927: PPUSH
62928: CALL_OW 67
// _d := GetDir ( unit ) ;
62932: LD_ADDR_VAR 0 11
62936: PUSH
62937: LD_VAR 0 1
62941: PPUSH
62942: CALL_OW 254
62946: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
62947: LD_ADDR_VAR 0 7
62951: PUSH
62952: LD_VAR 0 1
62956: PPUSH
62957: CALL_OW 250
62961: PPUSH
62962: LD_VAR 0 1
62966: PPUSH
62967: CALL_OW 251
62971: PPUSH
62972: LD_VAR 0 2
62976: PPUSH
62977: LD_VAR 0 3
62981: PPUSH
62982: CALL 54238 0 4
62986: ST_TO_ADDR
// until dir = _d ;
62987: LD_VAR 0 7
62991: PUSH
62992: LD_VAR 0 11
62996: EQUAL
62997: IFFALSE 62910
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
62999: LD_ADDR_VAR 0 9
63003: PUSH
63004: LD_VAR 0 1
63008: PPUSH
63009: CALL_OW 250
63013: PPUSH
63014: LD_VAR 0 7
63018: PPUSH
63019: LD_VAR 0 5
63023: PPUSH
63024: CALL_OW 272
63028: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
63029: LD_ADDR_VAR 0 10
63033: PUSH
63034: LD_VAR 0 1
63038: PPUSH
63039: CALL_OW 251
63043: PPUSH
63044: LD_VAR 0 7
63048: PPUSH
63049: LD_VAR 0 5
63053: PPUSH
63054: CALL_OW 273
63058: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
63059: LD_VAR 0 9
63063: PPUSH
63064: LD_VAR 0 10
63068: PPUSH
63069: CALL_OW 488
63073: NOT
63074: IFFALSE 63078
// exit ;
63076: GO 63196
// ComAnimCustom ( unit , 1 ) ;
63078: LD_VAR 0 1
63082: PPUSH
63083: LD_INT 1
63085: PPUSH
63086: CALL_OW 592
// p := 0 ;
63090: LD_ADDR_VAR 0 12
63094: PUSH
63095: LD_INT 0
63097: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
63098: LD_VAR 0 9
63102: PPUSH
63103: LD_VAR 0 10
63107: PPUSH
63108: LD_VAR 0 6
63112: PPUSH
63113: LD_VAR 0 8
63117: PPUSH
63118: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
63122: LD_INT 35
63124: PPUSH
63125: CALL_OW 67
// p := Inc ( p ) ;
63129: LD_ADDR_VAR 0 12
63133: PUSH
63134: LD_VAR 0 12
63138: PPUSH
63139: CALL 54194 0 1
63143: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
63144: LD_VAR 0 12
63148: PUSH
63149: LD_INT 3
63151: EQUAL
63152: PUSH
63153: LD_VAR 0 1
63157: PPUSH
63158: CALL_OW 302
63162: NOT
63163: OR
63164: PUSH
63165: LD_VAR 0 1
63169: PPUSH
63170: CALL_OW 301
63174: OR
63175: IFFALSE 63122
// RemoveSeeing ( _x , _y , side ) ;
63177: LD_VAR 0 9
63181: PPUSH
63182: LD_VAR 0 10
63186: PPUSH
63187: LD_VAR 0 6
63191: PPUSH
63192: CALL_OW 331
// end ; end_of_file end_of_file
63196: LD_VAR 0 4
63200: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
63201: PPOPN 6
63203: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
63204: CALL 63233 0 0
// end ; end_of_file
63208: PPOPN 1
63210: END
// every 0 0$1 do
63211: GO 63213
63213: DISABLE
// begin enable ;
63214: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
63215: LD_STRING updateTimer(
63217: PUSH
63218: LD_OWVAR 1
63222: STR
63223: PUSH
63224: LD_STRING );
63226: STR
63227: PPUSH
63228: CALL_OW 559
// end ;
63232: END
// export function SOS_MapStart ( ) ; begin
63233: LD_INT 0
63235: PPUSH
// UpdateFactoryWaypoints ( ) ;
63236: CALL 63605 0 0
// UpdateWarehouseGatheringPoints ( ) ;
63240: CALL 63857 0 0
// end ;
63244: LD_VAR 0 1
63248: RET
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
63249: LD_INT 0
63251: PPUSH
// end ;
63252: LD_VAR 0 12
63256: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
63257: LD_INT 0
63259: PPUSH
63260: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
63261: LD_VAR 0 1
63265: NOT
63266: PUSH
63267: LD_VAR 0 2
63271: PPUSH
63272: LD_VAR 0 3
63276: PPUSH
63277: CALL_OW 488
63281: NOT
63282: OR
63283: PUSH
63284: LD_VAR 0 1
63288: PPUSH
63289: CALL_OW 266
63293: PUSH
63294: LD_INT 3
63296: NONEQUAL
63297: PUSH
63298: LD_VAR 0 1
63302: PPUSH
63303: CALL_OW 247
63307: PUSH
63308: LD_INT 1
63310: EQUAL
63311: NOT
63312: AND
63313: OR
63314: IFFALSE 63318
// exit ;
63316: GO 63600
// if GetType ( factory ) = unit_human then
63318: LD_VAR 0 1
63322: PPUSH
63323: CALL_OW 247
63327: PUSH
63328: LD_INT 1
63330: EQUAL
63331: IFFALSE 63348
// factory := IsInUnit ( factory ) ;
63333: LD_ADDR_VAR 0 1
63337: PUSH
63338: LD_VAR 0 1
63342: PPUSH
63343: CALL_OW 310
63347: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
63348: LD_VAR 0 1
63352: PPUSH
63353: CALL_OW 266
63357: PUSH
63358: LD_INT 3
63360: NONEQUAL
63361: IFFALSE 63365
// exit ;
63363: GO 63600
// for i := 1 to Count ( factoryWaypoints ) do
63365: LD_ADDR_VAR 0 5
63369: PUSH
63370: DOUBLE
63371: LD_INT 1
63373: DEC
63374: ST_TO_ADDR
63375: LD_EXP 51
63379: PPUSH
63380: CALL 17224 0 1
63384: PUSH
63385: FOR_TO
63386: IFFALSE 63548
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
63388: LD_VAR 0 2
63392: PPUSH
63393: LD_VAR 0 3
63397: PPUSH
63398: CALL_OW 428
63402: PUSH
63403: LD_EXP 51
63407: PUSH
63408: LD_VAR 0 5
63412: ARRAY
63413: PUSH
63414: LD_INT 2
63416: ARRAY
63417: EQUAL
63418: IFFALSE 63450
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
63420: LD_ADDR_EXP 51
63424: PUSH
63425: LD_EXP 51
63429: PPUSH
63430: LD_VAR 0 5
63434: PPUSH
63435: CALL_OW 3
63439: ST_TO_ADDR
// UpdateFactoryWaypoints ;
63440: CALL 63605 0 0
// exit ;
63444: POP
63445: POP
63446: GO 63600
// end else
63448: GO 63546
// if factory = factoryWaypoints [ i ] [ 2 ] then
63450: LD_VAR 0 1
63454: PUSH
63455: LD_EXP 51
63459: PUSH
63460: LD_VAR 0 5
63464: ARRAY
63465: PUSH
63466: LD_INT 2
63468: ARRAY
63469: EQUAL
63470: IFFALSE 63546
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
63472: LD_ADDR_EXP 51
63476: PUSH
63477: LD_EXP 51
63481: PPUSH
63482: LD_VAR 0 5
63486: PPUSH
63487: CALL_OW 3
63491: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
63492: LD_ADDR_EXP 51
63496: PUSH
63497: LD_EXP 51
63501: PPUSH
63502: LD_VAR 0 1
63506: PPUSH
63507: CALL_OW 255
63511: PUSH
63512: LD_VAR 0 1
63516: PUSH
63517: LD_VAR 0 2
63521: PUSH
63522: LD_VAR 0 3
63526: PUSH
63527: EMPTY
63528: LIST
63529: LIST
63530: LIST
63531: LIST
63532: PPUSH
63533: CALL 52833 0 2
63537: ST_TO_ADDR
// UpdateFactoryWaypoints ;
63538: CALL 63605 0 0
// exit ;
63542: POP
63543: POP
63544: GO 63600
// end ; end ;
63546: GO 63385
63548: POP
63549: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
63550: LD_ADDR_EXP 51
63554: PUSH
63555: LD_EXP 51
63559: PPUSH
63560: LD_VAR 0 1
63564: PPUSH
63565: CALL_OW 255
63569: PUSH
63570: LD_VAR 0 1
63574: PUSH
63575: LD_VAR 0 2
63579: PUSH
63580: LD_VAR 0 3
63584: PUSH
63585: EMPTY
63586: LIST
63587: LIST
63588: LIST
63589: LIST
63590: PPUSH
63591: CALL 52833 0 2
63595: ST_TO_ADDR
// UpdateFactoryWaypoints ;
63596: CALL 63605 0 0
// end ;
63600: LD_VAR 0 4
63604: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
63605: LD_INT 0
63607: PPUSH
63608: PPUSH
63609: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
63610: LD_STRING resetFactoryWaypoint();
63612: PPUSH
63613: CALL_OW 559
// if factoryWaypoints then
63617: LD_EXP 51
63621: IFFALSE 63742
// begin list := factoryWaypoints ;
63623: LD_ADDR_VAR 0 3
63627: PUSH
63628: LD_EXP 51
63632: ST_TO_ADDR
// for i := 1 to list do
63633: LD_ADDR_VAR 0 2
63637: PUSH
63638: DOUBLE
63639: LD_INT 1
63641: DEC
63642: ST_TO_ADDR
63643: LD_VAR 0 3
63647: PUSH
63648: FOR_TO
63649: IFFALSE 63740
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
63651: LD_STRING setFactoryWaypointXY(
63653: PUSH
63654: LD_VAR 0 3
63658: PUSH
63659: LD_VAR 0 2
63663: ARRAY
63664: PUSH
63665: LD_INT 1
63667: ARRAY
63668: STR
63669: PUSH
63670: LD_STRING ,
63672: STR
63673: PUSH
63674: LD_VAR 0 3
63678: PUSH
63679: LD_VAR 0 2
63683: ARRAY
63684: PUSH
63685: LD_INT 2
63687: ARRAY
63688: STR
63689: PUSH
63690: LD_STRING ,
63692: STR
63693: PUSH
63694: LD_VAR 0 3
63698: PUSH
63699: LD_VAR 0 2
63703: ARRAY
63704: PUSH
63705: LD_INT 3
63707: ARRAY
63708: STR
63709: PUSH
63710: LD_STRING ,
63712: STR
63713: PUSH
63714: LD_VAR 0 3
63718: PUSH
63719: LD_VAR 0 2
63723: ARRAY
63724: PUSH
63725: LD_INT 4
63727: ARRAY
63728: STR
63729: PUSH
63730: LD_STRING )
63732: STR
63733: PPUSH
63734: CALL_OW 559
63738: GO 63648
63740: POP
63741: POP
// end ; end ;
63742: LD_VAR 0 1
63746: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
63747: LD_INT 0
63749: PPUSH
// if HexInfo ( x , y ) = warehouse then
63750: LD_VAR 0 2
63754: PPUSH
63755: LD_VAR 0 3
63759: PPUSH
63760: CALL_OW 428
63764: PUSH
63765: LD_VAR 0 1
63769: EQUAL
63770: IFFALSE 63797
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
63772: LD_ADDR_EXP 52
63776: PUSH
63777: LD_EXP 52
63781: PPUSH
63782: LD_VAR 0 1
63786: PPUSH
63787: LD_INT 0
63789: PPUSH
63790: CALL_OW 1
63794: ST_TO_ADDR
63795: GO 63848
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
63797: LD_ADDR_EXP 52
63801: PUSH
63802: LD_EXP 52
63806: PPUSH
63807: LD_VAR 0 1
63811: PPUSH
63812: LD_VAR 0 1
63816: PPUSH
63817: CALL_OW 255
63821: PUSH
63822: LD_VAR 0 1
63826: PUSH
63827: LD_VAR 0 2
63831: PUSH
63832: LD_VAR 0 3
63836: PUSH
63837: EMPTY
63838: LIST
63839: LIST
63840: LIST
63841: LIST
63842: PPUSH
63843: CALL_OW 1
63847: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
63848: CALL 63857 0 0
// end ;
63852: LD_VAR 0 4
63856: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
63857: LD_INT 0
63859: PPUSH
63860: PPUSH
63861: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
63862: LD_STRING resetWarehouseGatheringPoints();
63864: PPUSH
63865: CALL_OW 559
// if warehouseGatheringPoints then
63869: LD_EXP 52
63873: IFFALSE 63999
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
63875: LD_ADDR_VAR 0 3
63879: PUSH
63880: LD_EXP 52
63884: PPUSH
63885: CALL 56595 0 1
63889: ST_TO_ADDR
// for i := 1 to list do
63890: LD_ADDR_VAR 0 2
63894: PUSH
63895: DOUBLE
63896: LD_INT 1
63898: DEC
63899: ST_TO_ADDR
63900: LD_VAR 0 3
63904: PUSH
63905: FOR_TO
63906: IFFALSE 63997
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
63908: LD_STRING setWarehouseGatheringPointXY(
63910: PUSH
63911: LD_VAR 0 3
63915: PUSH
63916: LD_VAR 0 2
63920: ARRAY
63921: PUSH
63922: LD_INT 1
63924: ARRAY
63925: STR
63926: PUSH
63927: LD_STRING ,
63929: STR
63930: PUSH
63931: LD_VAR 0 3
63935: PUSH
63936: LD_VAR 0 2
63940: ARRAY
63941: PUSH
63942: LD_INT 2
63944: ARRAY
63945: STR
63946: PUSH
63947: LD_STRING ,
63949: STR
63950: PUSH
63951: LD_VAR 0 3
63955: PUSH
63956: LD_VAR 0 2
63960: ARRAY
63961: PUSH
63962: LD_INT 3
63964: ARRAY
63965: STR
63966: PUSH
63967: LD_STRING ,
63969: STR
63970: PUSH
63971: LD_VAR 0 3
63975: PUSH
63976: LD_VAR 0 2
63980: ARRAY
63981: PUSH
63982: LD_INT 4
63984: ARRAY
63985: STR
63986: PUSH
63987: LD_STRING )
63989: STR
63990: PPUSH
63991: CALL_OW 559
63995: GO 63905
63997: POP
63998: POP
// end ; end ;
63999: LD_VAR 0 1
64003: RET
