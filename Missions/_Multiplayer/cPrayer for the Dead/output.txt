// starting begin ResetFog ;
   0: CALL_OW 335
// InitHc ;
   4: CALL_OW 19
// InitUc ;
   8: CALL_OW 18
// InitBc ;
  12: CALL_OW 21
// InitVariables ;
  16: CALL 116 0 0
// InitMultiplayer ;
  20: CALL 3864 0 0
// if debug then
  24: LD_EXP 1
  28: IFFALSE 37
// FogOff ( 1 ) ;
  30: LD_INT 1
  32: PPUSH
  33: CALL_OW 344
// PrepareArabian ( Multiplayer_SetBotSide ( 2 ) ) ;
  37: LD_INT 2
  39: PPUSH
  40: CALL 5720 0 1
  44: PPUSH
  45: CALL 1022 0 1
// PrepareConvoys ( Multiplayer_SetBotSide ( 6 ) ) ;
  49: LD_INT 6
  51: PPUSH
  52: CALL 5720 0 1
  56: PPUSH
  57: CALL 12205 0 1
// Multiplayer_Start ;
  61: CALL 7440 0 0
// ResetFog ;
  65: CALL_OW 335
// PlaceSeeing ( 1 , 1 , convoySide , - 32973 ) ;
  69: LD_INT 1
  71: PPUSH
  72: LD_INT 1
  74: PPUSH
  75: LD_EXP 40
  79: PPUSH
  80: LD_INT 32973
  82: NEG
  83: PPUSH
  84: CALL_OW 330
// RemoveSeeing ( 1 , 1 , convoySide ) ;
  88: LD_INT 1
  90: PPUSH
  91: LD_INT 1
  93: PPUSH
  94: LD_EXP 40
  98: PPUSH
  99: CALL_OW 331
// game := true ;
 103: LD_ADDR_EXP 2
 107: PUSH
 108: LD_INT 1
 110: ST_TO_ADDR
// Multiplayer_End ;
 111: CALL 7559 0 0
// end ;
 115: END
// export debug , game , winAllowed , botSides , savedConvoyUnits , blockThread , forestIsCleared , goToUnload ; function InitVariables ; begin
 116: LD_INT 0
 118: PPUSH
// debug := false ;
 119: LD_ADDR_EXP 1
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// botSides := [ 2 , 6 ] ;
 127: LD_ADDR_EXP 4
 131: PUSH
 132: LD_INT 2
 134: PUSH
 135: LD_INT 6
 137: PUSH
 138: EMPTY
 139: LIST
 140: LIST
 141: ST_TO_ADDR
// winAllowed := false ;
 142: LD_ADDR_EXP 3
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// savedConvoyUnits := 0 ;
 150: LD_ADDR_EXP 5
 154: PUSH
 155: LD_INT 0
 157: ST_TO_ADDR
// forestIsCleared := false ;
 158: LD_ADDR_EXP 7
 162: PUSH
 163: LD_INT 0
 165: ST_TO_ADDR
// blockThread := false ;
 166: LD_ADDR_EXP 6
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// goToUnload := [ ] ;
 174: LD_ADDR_EXP 8
 178: PUSH
 179: EMPTY
 180: ST_TO_ADDR
// end ;
 181: LD_VAR 0 1
 185: RET
// every 0 0$01 trigger game and not debug_strings do
 186: LD_EXP 2
 190: PUSH
 191: LD_OWVAR 48
 195: NOT
 196: AND
 197: IFFALSE 213
 199: GO 201
 201: DISABLE
// begin enable ;
 202: ENABLE
// display_strings := Multiplayer_DisplayStrings ( ) ;
 203: LD_ADDR_OWVAR 47
 207: PUSH
 208: CALL 7986 0 0
 212: ST_TO_ADDR
// end ; end_of_file
 213: END
// every 0 0$30 trigger convoyWave in [ [ 6 , 8 , 10 ] [ Difficulty ] , [ 16 , 20 , 24 ] [ Difficulty ] , [ 26 , 30 , 34 ] [ Difficulty ] ] do var i , j , un , veh , skill ;
 214: LD_EXP 39
 218: PUSH
 219: LD_INT 6
 221: PUSH
 222: LD_INT 8
 224: PUSH
 225: LD_INT 10
 227: PUSH
 228: EMPTY
 229: LIST
 230: LIST
 231: LIST
 232: PUSH
 233: LD_OWVAR 67
 237: ARRAY
 238: PUSH
 239: LD_INT 16
 241: PUSH
 242: LD_INT 20
 244: PUSH
 245: LD_INT 24
 247: PUSH
 248: EMPTY
 249: LIST
 250: LIST
 251: LIST
 252: PUSH
 253: LD_OWVAR 67
 257: ARRAY
 258: PUSH
 259: LD_INT 26
 261: PUSH
 262: LD_INT 30
 264: PUSH
 265: LD_INT 34
 267: PUSH
 268: EMPTY
 269: LIST
 270: LIST
 271: LIST
 272: PUSH
 273: LD_OWVAR 67
 277: ARRAY
 278: PUSH
 279: EMPTY
 280: LIST
 281: LIST
 282: LIST
 283: IN
 284: IFFALSE 656
 286: GO 288
 288: DISABLE
 289: LD_INT 0
 291: PPUSH
 292: PPUSH
 293: PPUSH
 294: PPUSH
 295: PPUSH
// begin repeat wait ( 10 ) ;
 296: LD_INT 10
 298: PPUSH
 299: CALL_OW 67
// until not blockThread ;
 303: LD_EXP 6
 307: NOT
 308: IFFALSE 296
// skill := [ 6 , 5 , 4 ] [ Difficulty ] ;
 310: LD_ADDR_VAR 0 5
 314: PUSH
 315: LD_INT 6
 317: PUSH
 318: LD_INT 5
 320: PUSH
 321: LD_INT 4
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: PUSH
 329: LD_OWVAR 67
 333: ARRAY
 334: ST_TO_ADDR
// for i := 1 to 8 do
 335: LD_ADDR_VAR 0 1
 339: PUSH
 340: DOUBLE
 341: LD_INT 1
 343: DEC
 344: ST_TO_ADDR
 345: LD_INT 8
 347: PUSH
 348: FOR_TO
 349: IFFALSE 646
// if multi_sides [ i ] = 2 and not multi_loosers [ i ] then
 351: LD_EXP 15
 355: PUSH
 356: LD_VAR 0 1
 360: ARRAY
 361: PUSH
 362: LD_INT 2
 364: EQUAL
 365: PUSH
 366: LD_EXP 32
 370: PUSH
 371: LD_VAR 0 1
 375: ARRAY
 376: NOT
 377: AND
 378: IFFALSE 644
// begin uc_side := i ;
 380: LD_ADDR_OWVAR 20
 384: PUSH
 385: LD_VAR 0 1
 389: ST_TO_ADDR
// uc_nation := nation_russian ;
 390: LD_ADDR_OWVAR 21
 394: PUSH
 395: LD_INT 3
 397: ST_TO_ADDR
// if i = your_side then
 398: LD_VAR 0 1
 402: PUSH
 403: LD_OWVAR 2
 407: EQUAL
 408: IFFALSE 420
// CenterNowOnXY ( 112 , 172 ) ;
 410: LD_INT 112
 412: PPUSH
 413: LD_INT 172
 415: PPUSH
 416: CALL_OW 86
// PrepareEngineer ( false , skill ) ;
 420: LD_INT 0
 422: PPUSH
 423: LD_VAR 0 5
 427: PPUSH
 428: CALL_OW 382
// un := CreateHuman ;
 432: LD_ADDR_VAR 0 3
 436: PUSH
 437: CALL_OW 44
 441: ST_TO_ADDR
// PlaceUnitArea ( un , southRefArea , false ) ;
 442: LD_VAR 0 3
 446: PPUSH
 447: LD_INT 25
 449: PPUSH
 450: LD_INT 0
 452: PPUSH
 453: CALL_OW 49
// for j := 1 to 2 do
 457: LD_ADDR_VAR 0 2
 461: PUSH
 462: DOUBLE
 463: LD_INT 1
 465: DEC
 466: ST_TO_ADDR
 467: LD_INT 2
 469: PUSH
 470: FOR_TO
 471: IFFALSE 512
// begin PrepareMechanic ( false , skill ) ;
 473: LD_INT 0
 475: PPUSH
 476: LD_VAR 0 5
 480: PPUSH
 481: CALL_OW 383
// un := CreateHuman ;
 485: LD_ADDR_VAR 0 3
 489: PUSH
 490: CALL_OW 44
 494: ST_TO_ADDR
// PlaceUnitArea ( un , southRefArea , false ) ;
 495: LD_VAR 0 3
 499: PPUSH
 500: LD_INT 25
 502: PPUSH
 503: LD_INT 0
 505: PPUSH
 506: CALL_OW 49
// end ;
 510: GO 470
 512: POP
 513: POP
// for j := 1 to 2 do
 514: LD_ADDR_VAR 0 2
 518: PUSH
 519: DOUBLE
 520: LD_INT 1
 522: DEC
 523: ST_TO_ADDR
 524: LD_INT 2
 526: PUSH
 527: FOR_TO
 528: IFFALSE 642
// begin uc_side := i ;
 530: LD_ADDR_OWVAR 20
 534: PUSH
 535: LD_VAR 0 1
 539: ST_TO_ADDR
// uc_nation := nation_russian ;
 540: LD_ADDR_OWVAR 21
 544: PUSH
 545: LD_INT 3
 547: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_gun , 50 ) ;
 548: LD_INT 22
 550: PPUSH
 551: LD_INT 1
 553: PPUSH
 554: LD_INT 1
 556: PPUSH
 557: LD_INT 44
 559: PPUSH
 560: LD_INT 50
 562: PPUSH
 563: CALL 20219 0 5
// veh := CreateVehicle ;
 567: LD_ADDR_VAR 0 4
 571: PUSH
 572: CALL_OW 45
 576: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
 577: LD_VAR 0 4
 581: PPUSH
 582: LD_INT 5
 584: PPUSH
 585: CALL_OW 233
// PrepareMechanic ( false , skill ) ;
 589: LD_INT 0
 591: PPUSH
 592: LD_VAR 0 5
 596: PPUSH
 597: CALL_OW 383
// un := CreateHuman ;
 601: LD_ADDR_VAR 0 3
 605: PUSH
 606: CALL_OW 44
 610: ST_TO_ADDR
// PlaceUnitArea ( veh , southRefArea , false ) ;
 611: LD_VAR 0 4
 615: PPUSH
 616: LD_INT 25
 618: PPUSH
 619: LD_INT 0
 621: PPUSH
 622: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
 626: LD_VAR 0 3
 630: PPUSH
 631: LD_VAR 0 4
 635: PPUSH
 636: CALL_OW 52
// end ;
 640: GO 527
 642: POP
 643: POP
// end ;
 644: GO 348
 646: POP
 647: POP
// wait ( 10 10$0 ) ;
 648: LD_INT 21000
 650: PPUSH
 651: CALL_OW 67
// enable ;
 655: ENABLE
// end ;
 656: PPOPN 5
 658: END
// every 0 0$30 trigger convoyWave in [ [ 12 , 14 , 16 ] [ Difficulty ] , [ 22 , 26 , 30 ] [ Difficulty ] , [ 32 , 36 , 40 ] [ Difficulty ] ] do var i , j , un , veh , skill ;
 659: LD_EXP 39
 663: PUSH
 664: LD_INT 12
 666: PUSH
 667: LD_INT 14
 669: PUSH
 670: LD_INT 16
 672: PUSH
 673: EMPTY
 674: LIST
 675: LIST
 676: LIST
 677: PUSH
 678: LD_OWVAR 67
 682: ARRAY
 683: PUSH
 684: LD_INT 22
 686: PUSH
 687: LD_INT 26
 689: PUSH
 690: LD_INT 30
 692: PUSH
 693: EMPTY
 694: LIST
 695: LIST
 696: LIST
 697: PUSH
 698: LD_OWVAR 67
 702: ARRAY
 703: PUSH
 704: LD_INT 32
 706: PUSH
 707: LD_INT 36
 709: PUSH
 710: LD_INT 40
 712: PUSH
 713: EMPTY
 714: LIST
 715: LIST
 716: LIST
 717: PUSH
 718: LD_OWVAR 67
 722: ARRAY
 723: PUSH
 724: EMPTY
 725: LIST
 726: LIST
 727: LIST
 728: IN
 729: IFFALSE 1019
 731: GO 733
 733: DISABLE
 734: LD_INT 0
 736: PPUSH
 737: PPUSH
 738: PPUSH
 739: PPUSH
 740: PPUSH
// begin repeat wait ( 10 ) ;
 741: LD_INT 10
 743: PPUSH
 744: CALL_OW 67
// until not blockThread ;
 748: LD_EXP 6
 752: NOT
 753: IFFALSE 741
// skill := [ 6 , 5 , 4 ] [ Difficulty ] ;
 755: LD_ADDR_VAR 0 5
 759: PUSH
 760: LD_INT 6
 762: PUSH
 763: LD_INT 5
 765: PUSH
 766: LD_INT 4
 768: PUSH
 769: EMPTY
 770: LIST
 771: LIST
 772: LIST
 773: PUSH
 774: LD_OWVAR 67
 778: ARRAY
 779: ST_TO_ADDR
// for i := 1 to 8 do
 780: LD_ADDR_VAR 0 1
 784: PUSH
 785: DOUBLE
 786: LD_INT 1
 788: DEC
 789: ST_TO_ADDR
 790: LD_INT 8
 792: PUSH
 793: FOR_TO
 794: IFFALSE 1009
// if multi_sides [ i ] = 1 and not multi_loosers [ i ] then
 796: LD_EXP 15
 800: PUSH
 801: LD_VAR 0 1
 805: ARRAY
 806: PUSH
 807: LD_INT 1
 809: EQUAL
 810: PUSH
 811: LD_EXP 32
 815: PUSH
 816: LD_VAR 0 1
 820: ARRAY
 821: NOT
 822: AND
 823: IFFALSE 1007
// begin if i = your_side then
 825: LD_VAR 0 1
 829: PUSH
 830: LD_OWVAR 2
 834: EQUAL
 835: IFFALSE 847
// CenterNowOnXY ( 112 , 172 ) ;
 837: LD_INT 112
 839: PPUSH
 840: LD_INT 172
 842: PPUSH
 843: CALL_OW 86
// for j := 1 to 3 do
 847: LD_ADDR_VAR 0 2
 851: PUSH
 852: DOUBLE
 853: LD_INT 1
 855: DEC
 856: ST_TO_ADDR
 857: LD_INT 3
 859: PUSH
 860: FOR_TO
 861: IFFALSE 1005
// begin uc_side := i ;
 863: LD_ADDR_OWVAR 20
 867: PUSH
 868: LD_VAR 0 1
 872: ST_TO_ADDR
// uc_nation := nation_russian ;
 873: LD_ADDR_OWVAR 21
 877: PUSH
 878: LD_INT 3
 880: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun ] [ i mod 2 + 1 ] , 50 ) ;
 881: LD_INT 22
 883: PPUSH
 884: LD_INT 1
 886: PPUSH
 887: LD_INT 1
 889: PPUSH
 890: LD_INT 44
 892: PUSH
 893: LD_INT 43
 895: PUSH
 896: EMPTY
 897: LIST
 898: LIST
 899: PUSH
 900: LD_VAR 0 1
 904: PUSH
 905: LD_INT 2
 907: MOD
 908: PUSH
 909: LD_INT 1
 911: PLUS
 912: ARRAY
 913: PPUSH
 914: LD_INT 50
 916: PPUSH
 917: CALL 20219 0 5
// veh := CreateVehicle ;
 921: LD_ADDR_VAR 0 4
 925: PUSH
 926: CALL_OW 45
 930: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
 931: LD_VAR 0 4
 935: PPUSH
 936: LD_INT 5
 938: PPUSH
 939: CALL_OW 233
// PrepareMechanic ( false , skill ) ;
 943: LD_INT 0
 945: PPUSH
 946: LD_VAR 0 5
 950: PPUSH
 951: CALL_OW 383
// un := CreateHuman ;
 955: LD_ADDR_VAR 0 3
 959: PUSH
 960: CALL_OW 44
 964: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
 965: LD_INT 35
 967: PPUSH
 968: CALL_OW 67
// until PlaceUnitArea ( veh , southRefArea , false ) ;
 972: LD_VAR 0 4
 976: PPUSH
 977: LD_INT 25
 979: PPUSH
 980: LD_INT 0
 982: PPUSH
 983: CALL_OW 49
 987: IFFALSE 965
// PlaceHumanInUnit ( un , veh ) ;
 989: LD_VAR 0 3
 993: PPUSH
 994: LD_VAR 0 4
 998: PPUSH
 999: CALL_OW 52
// end ;
1003: GO 860
1005: POP
1006: POP
// end ;
1007: GO 793
1009: POP
1010: POP
// wait ( 10 10$0 ) ;
1011: LD_INT 21000
1013: PPUSH
1014: CALL_OW 67
// enable ;
1018: ENABLE
// end ; end_of_file
1019: PPOPN 5
1021: END
// export enemyUnits , enemyMobile , enemyForestGuard , enemySide , arAttackersInf ; export function PrepareArabian ( side ) ; var i , un , skill , veh ; begin
1022: LD_INT 0
1024: PPUSH
1025: PPUSH
1026: PPUSH
1027: PPUSH
1028: PPUSH
// enemySide := side ;
1029: LD_ADDR_EXP 12
1033: PUSH
1034: LD_VAR 0 1
1038: ST_TO_ADDR
// enemyUnits := [ ] ;
1039: LD_ADDR_EXP 9
1043: PUSH
1044: EMPTY
1045: ST_TO_ADDR
// enemyMobile := [ ] ;
1046: LD_ADDR_EXP 10
1050: PUSH
1051: EMPTY
1052: ST_TO_ADDR
// enemyForestGuard := [ ] ;
1053: LD_ADDR_EXP 11
1057: PUSH
1058: EMPTY
1059: ST_TO_ADDR
// arAttackersInf := [ ] ;
1060: LD_ADDR_EXP 13
1064: PUSH
1065: EMPTY
1066: ST_TO_ADDR
// skill := [ 4 , 6 , 8 ] [ Difficulty ] ;
1067: LD_ADDR_VAR 0 5
1071: PUSH
1072: LD_INT 4
1074: PUSH
1075: LD_INT 6
1077: PUSH
1078: LD_INT 8
1080: PUSH
1081: EMPTY
1082: LIST
1083: LIST
1084: LIST
1085: PUSH
1086: LD_OWVAR 67
1090: ARRAY
1091: ST_TO_ADDR
// uc_side := side ;
1092: LD_ADDR_OWVAR 20
1096: PUSH
1097: LD_VAR 0 1
1101: ST_TO_ADDR
// uc_nation := nation_arabian ;
1102: LD_ADDR_OWVAR 21
1106: PUSH
1107: LD_INT 2
1109: ST_TO_ADDR
// for i := 1 to [ 5 , 6 , 7 ] [ Difficulty ] do
1110: LD_ADDR_VAR 0 3
1114: PUSH
1115: DOUBLE
1116: LD_INT 1
1118: DEC
1119: ST_TO_ADDR
1120: LD_INT 5
1122: PUSH
1123: LD_INT 6
1125: PUSH
1126: LD_INT 7
1128: PUSH
1129: EMPTY
1130: LIST
1131: LIST
1132: LIST
1133: PUSH
1134: LD_OWVAR 67
1138: ARRAY
1139: PUSH
1140: FOR_TO
1141: IFFALSE 1228
// begin PrepareSoldier ( false , skill ) ;
1143: LD_INT 0
1145: PPUSH
1146: LD_VAR 0 5
1150: PPUSH
1151: CALL_OW 381
// un := CreateHuman ;
1155: LD_ADDR_VAR 0 4
1159: PUSH
1160: CALL_OW 44
1164: ST_TO_ADDR
// if i mod 2 = 0 then
1165: LD_VAR 0 3
1169: PUSH
1170: LD_INT 2
1172: MOD
1173: PUSH
1174: LD_INT 0
1176: EQUAL
1177: IFFALSE 1191
// SetClass ( un , class_mortar ) ;
1179: LD_VAR 0 4
1183: PPUSH
1184: LD_INT 8
1186: PPUSH
1187: CALL_OW 336
// enemyForestGuard := Join ( enemyForestGuard , un ) ;
1191: LD_ADDR_EXP 11
1195: PUSH
1196: LD_EXP 11
1200: PPUSH
1201: LD_VAR 0 4
1205: PPUSH
1206: CALL 53090 0 2
1210: ST_TO_ADDR
// PlaceUnitArea ( un , forestGuardHill1Area , false ) ;
1211: LD_VAR 0 4
1215: PPUSH
1216: LD_INT 17
1218: PPUSH
1219: LD_INT 0
1221: PPUSH
1222: CALL_OW 49
// end ;
1226: GO 1140
1228: POP
1229: POP
// for i := 1 to 2 do
1230: LD_ADDR_VAR 0 3
1234: PUSH
1235: DOUBLE
1236: LD_INT 1
1238: DEC
1239: ST_TO_ADDR
1240: LD_INT 2
1242: PUSH
1243: FOR_TO
1244: IFFALSE 1305
// begin PrepareScientist ( false , skill ) ;
1246: LD_INT 0
1248: PPUSH
1249: LD_VAR 0 5
1253: PPUSH
1254: CALL_OW 384
// un := CreateHuman ;
1258: LD_ADDR_VAR 0 4
1262: PUSH
1263: CALL_OW 44
1267: ST_TO_ADDR
// enemyForestGuard := Join ( enemyForestGuard , un ) ;
1268: LD_ADDR_EXP 11
1272: PUSH
1273: LD_EXP 11
1277: PPUSH
1278: LD_VAR 0 4
1282: PPUSH
1283: CALL 53090 0 2
1287: ST_TO_ADDR
// PlaceUnitArea ( un , forestGuardHill1Area , false ) ;
1288: LD_VAR 0 4
1292: PPUSH
1293: LD_INT 17
1295: PPUSH
1296: LD_INT 0
1298: PPUSH
1299: CALL_OW 49
// end ;
1303: GO 1243
1305: POP
1306: POP
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
1307: LD_ADDR_VAR 0 3
1311: PUSH
1312: DOUBLE
1313: LD_INT 1
1315: DEC
1316: ST_TO_ADDR
1317: LD_INT 2
1319: PUSH
1320: LD_INT 3
1322: PUSH
1323: LD_INT 3
1325: PUSH
1326: EMPTY
1327: LIST
1328: LIST
1329: LIST
1330: PUSH
1331: LD_OWVAR 67
1335: ARRAY
1336: PUSH
1337: FOR_TO
1338: IFFALSE 1474
// begin PrepareVehicle ( ar_half_tracked , engine_solar , control_manual , ar_gun , 100 ) ;
1340: LD_INT 14
1342: PPUSH
1343: LD_INT 2
1345: PPUSH
1346: LD_INT 1
1348: PPUSH
1349: LD_INT 27
1351: PPUSH
1352: LD_INT 100
1354: PPUSH
1355: CALL 20219 0 5
// veh := CreateVehicle ;
1359: LD_ADDR_VAR 0 6
1363: PUSH
1364: CALL_OW 45
1368: ST_TO_ADDR
// enemyForestGuard := Join ( enemyForestGuard , veh ) ;
1369: LD_ADDR_EXP 11
1373: PUSH
1374: LD_EXP 11
1378: PPUSH
1379: LD_VAR 0 6
1383: PPUSH
1384: CALL 53090 0 2
1388: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
1389: LD_VAR 0 6
1393: PPUSH
1394: LD_INT 5
1396: PPUSH
1397: CALL_OW 233
// PrepareMechanic ( false , skill ) ;
1401: LD_INT 0
1403: PPUSH
1404: LD_VAR 0 5
1408: PPUSH
1409: CALL_OW 383
// un := CreateHuman ;
1413: LD_ADDR_VAR 0 4
1417: PUSH
1418: CALL_OW 44
1422: ST_TO_ADDR
// enemyForestGuard := Join ( enemyForestGuard , un ) ;
1423: LD_ADDR_EXP 11
1427: PUSH
1428: LD_EXP 11
1432: PPUSH
1433: LD_VAR 0 4
1437: PPUSH
1438: CALL 53090 0 2
1442: ST_TO_ADDR
// PlaceUnitArea ( veh , forestGuardHill2Area , false ) ;
1443: LD_VAR 0 6
1447: PPUSH
1448: LD_INT 18
1450: PPUSH
1451: LD_INT 0
1453: PPUSH
1454: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
1458: LD_VAR 0 4
1462: PPUSH
1463: LD_VAR 0 6
1467: PPUSH
1468: CALL_OW 52
// end ;
1472: GO 1337
1474: POP
1475: POP
// for i := 1 to 2 do
1476: LD_ADDR_VAR 0 3
1480: PUSH
1481: DOUBLE
1482: LD_INT 1
1484: DEC
1485: ST_TO_ADDR
1486: LD_INT 2
1488: PUSH
1489: FOR_TO
1490: IFFALSE 1573
// begin PrepareVehicle ( ar_half_tracked , engine_solar , control_manual , ar_cargo_bay , 100 ) ;
1492: LD_INT 14
1494: PPUSH
1495: LD_INT 2
1497: PPUSH
1498: LD_INT 1
1500: PPUSH
1501: LD_INT 32
1503: PPUSH
1504: LD_INT 100
1506: PPUSH
1507: CALL 20219 0 5
// veh := CreateVehicle ;
1511: LD_ADDR_VAR 0 6
1515: PUSH
1516: CALL_OW 45
1520: ST_TO_ADDR
// SetDir ( veh , rand ( 2 , 3 ) ) ;
1521: LD_VAR 0 6
1525: PPUSH
1526: LD_INT 2
1528: PPUSH
1529: LD_INT 3
1531: PPUSH
1532: CALL_OW 12
1536: PPUSH
1537: CALL_OW 233
// PlaceUnitArea ( veh , arOilArea , false ) ;
1541: LD_VAR 0 6
1545: PPUSH
1546: LD_INT 22
1548: PPUSH
1549: LD_INT 0
1551: PPUSH
1552: CALL_OW 49
// SetCargo ( veh , mat_oil , 100 ) ;
1556: LD_VAR 0 6
1560: PPUSH
1561: LD_INT 2
1563: PPUSH
1564: LD_INT 100
1566: PPUSH
1567: CALL_OW 290
// end ;
1571: GO 1489
1573: POP
1574: POP
// end ;
1575: LD_VAR 0 2
1579: RET
// export function PrepareMobileGroup ; var i , veh , un , skill , v ; begin
1580: LD_INT 0
1582: PPUSH
1583: PPUSH
1584: PPUSH
1585: PPUSH
1586: PPUSH
1587: PPUSH
// blockThread := true ;
1588: LD_ADDR_EXP 6
1592: PUSH
1593: LD_INT 1
1595: ST_TO_ADDR
// v := convoyWave div 12 ;
1596: LD_ADDR_VAR 0 6
1600: PUSH
1601: LD_EXP 39
1605: PUSH
1606: LD_INT 12
1608: DIV
1609: ST_TO_ADDR
// skill := [ 4 , 5 , 6 ] [ Difficulty ] + v ;
1610: LD_ADDR_VAR 0 5
1614: PUSH
1615: LD_INT 4
1617: PUSH
1618: LD_INT 5
1620: PUSH
1621: LD_INT 6
1623: PUSH
1624: EMPTY
1625: LIST
1626: LIST
1627: LIST
1628: PUSH
1629: LD_OWVAR 67
1633: ARRAY
1634: PUSH
1635: LD_VAR 0 6
1639: PLUS
1640: ST_TO_ADDR
// if skill > 10 then
1641: LD_VAR 0 5
1645: PUSH
1646: LD_INT 10
1648: GREATER
1649: IFFALSE 1659
// skill := 10 ;
1651: LD_ADDR_VAR 0 5
1655: PUSH
1656: LD_INT 10
1658: ST_TO_ADDR
// if v > 8 then
1659: LD_VAR 0 6
1663: PUSH
1664: LD_INT 8
1666: GREATER
1667: IFFALSE 1677
// v := 8 ;
1669: LD_ADDR_VAR 0 6
1673: PUSH
1674: LD_INT 8
1676: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] + v do
1677: LD_ADDR_VAR 0 2
1681: PUSH
1682: DOUBLE
1683: LD_INT 1
1685: DEC
1686: ST_TO_ADDR
1687: LD_INT 2
1689: PUSH
1690: LD_INT 3
1692: PUSH
1693: LD_INT 3
1695: PUSH
1696: EMPTY
1697: LIST
1698: LIST
1699: LIST
1700: PUSH
1701: LD_OWVAR 67
1705: ARRAY
1706: PUSH
1707: LD_VAR 0 6
1711: PLUS
1712: PUSH
1713: FOR_TO
1714: IFFALSE 1893
// begin uc_side := enemySide ;
1716: LD_ADDR_OWVAR 20
1720: PUSH
1721: LD_EXP 12
1725: ST_TO_ADDR
// uc_nation := nation_arabian ;
1726: LD_ADDR_OWVAR 21
1730: PUSH
1731: LD_INT 2
1733: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , [ ar_gun , ar_gatling_gun ] [ i mod 2 + 1 ] , 100 ) ;
1734: LD_INT 14
1736: PPUSH
1737: LD_INT 1
1739: PPUSH
1740: LD_INT 1
1742: PPUSH
1743: LD_INT 27
1745: PUSH
1746: LD_INT 25
1748: PUSH
1749: EMPTY
1750: LIST
1751: LIST
1752: PUSH
1753: LD_VAR 0 2
1757: PUSH
1758: LD_INT 2
1760: MOD
1761: PUSH
1762: LD_INT 1
1764: PLUS
1765: ARRAY
1766: PPUSH
1767: LD_INT 100
1769: PPUSH
1770: CALL 20219 0 5
// veh := CreateVehicle ;
1774: LD_ADDR_VAR 0 3
1778: PUSH
1779: CALL_OW 45
1783: ST_TO_ADDR
// enemyMobile := Join ( enemyMobile , veh ) ;
1784: LD_ADDR_EXP 10
1788: PUSH
1789: LD_EXP 10
1793: PPUSH
1794: LD_VAR 0 3
1798: PPUSH
1799: CALL 53090 0 2
1803: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1804: LD_VAR 0 3
1808: PPUSH
1809: LD_INT 2
1811: PPUSH
1812: CALL_OW 233
// PrepareMechanic ( false , skill ) ;
1816: LD_INT 0
1818: PPUSH
1819: LD_VAR 0 5
1823: PPUSH
1824: CALL_OW 383
// un := CreateHuman ;
1828: LD_ADDR_VAR 0 4
1832: PUSH
1833: CALL_OW 44
1837: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
1838: LD_INT 35
1840: PPUSH
1841: CALL_OW 67
// until PlaceUnitArea ( veh , arabNorthSpawnArea , false ) ;
1845: LD_VAR 0 3
1849: PPUSH
1850: LD_INT 23
1852: PPUSH
1853: LD_INT 0
1855: PPUSH
1856: CALL_OW 49
1860: IFFALSE 1838
// PlaceHumanInUnit ( un , veh ) ;
1862: LD_VAR 0 4
1866: PPUSH
1867: LD_VAR 0 3
1871: PPUSH
1872: CALL_OW 52
// ComMoveXY ( veh , 104 , 18 ) ;
1876: LD_VAR 0 3
1880: PPUSH
1881: LD_INT 104
1883: PPUSH
1884: LD_INT 18
1886: PPUSH
1887: CALL_OW 111
// end ;
1891: GO 1713
1893: POP
1894: POP
// blockThread := false ;
1895: LD_ADDR_EXP 6
1899: PUSH
1900: LD_INT 0
1902: ST_TO_ADDR
// end ;
1903: LD_VAR 0 1
1907: RET
// export function PrepareMobileGroup2 ; var i , veh , un , skill , v ; begin
1908: LD_INT 0
1910: PPUSH
1911: PPUSH
1912: PPUSH
1913: PPUSH
1914: PPUSH
1915: PPUSH
// blockThread := true ;
1916: LD_ADDR_EXP 6
1920: PUSH
1921: LD_INT 1
1923: ST_TO_ADDR
// v := convoyWave div 12 ;
1924: LD_ADDR_VAR 0 6
1928: PUSH
1929: LD_EXP 39
1933: PUSH
1934: LD_INT 12
1936: DIV
1937: ST_TO_ADDR
// if v > 8 then
1938: LD_VAR 0 6
1942: PUSH
1943: LD_INT 8
1945: GREATER
1946: IFFALSE 1956
// v := 8 ;
1948: LD_ADDR_VAR 0 6
1952: PUSH
1953: LD_INT 8
1955: ST_TO_ADDR
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] + v do
1956: LD_ADDR_VAR 0 2
1960: PUSH
1961: DOUBLE
1962: LD_INT 1
1964: DEC
1965: ST_TO_ADDR
1966: LD_INT 3
1968: PUSH
1969: LD_INT 4
1971: PUSH
1972: LD_INT 5
1974: PUSH
1975: EMPTY
1976: LIST
1977: LIST
1978: LIST
1979: PUSH
1980: LD_OWVAR 67
1984: ARRAY
1985: PUSH
1986: LD_VAR 0 6
1990: PLUS
1991: PUSH
1992: FOR_TO
1993: IFFALSE 2176
// begin uc_side := enemySide ;
1995: LD_ADDR_OWVAR 20
1999: PUSH
2000: LD_EXP 12
2004: ST_TO_ADDR
// uc_nation := nation_arabian ;
2005: LD_ADDR_OWVAR 21
2009: PUSH
2010: LD_INT 2
2012: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , [ ar_gun , ar_gatling_gun , ar_flame_thrower ] [ i mod 3 + 1 ] , 100 ) ;
2013: LD_INT 14
2015: PPUSH
2016: LD_INT 1
2018: PPUSH
2019: LD_INT 1
2021: PPUSH
2022: LD_INT 27
2024: PUSH
2025: LD_INT 25
2027: PUSH
2028: LD_INT 26
2030: PUSH
2031: EMPTY
2032: LIST
2033: LIST
2034: LIST
2035: PUSH
2036: LD_VAR 0 2
2040: PUSH
2041: LD_INT 3
2043: MOD
2044: PUSH
2045: LD_INT 1
2047: PLUS
2048: ARRAY
2049: PPUSH
2050: LD_INT 100
2052: PPUSH
2053: CALL 20219 0 5
// veh := CreateVehicle ;
2057: LD_ADDR_VAR 0 3
2061: PUSH
2062: CALL_OW 45
2066: ST_TO_ADDR
// enemyMobile := Join ( enemyMobile , veh ) ;
2067: LD_ADDR_EXP 10
2071: PUSH
2072: LD_EXP 10
2076: PPUSH
2077: LD_VAR 0 3
2081: PPUSH
2082: CALL 53090 0 2
2086: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2087: LD_VAR 0 3
2091: PPUSH
2092: LD_INT 4
2094: PPUSH
2095: CALL_OW 233
// PrepareMechanic ( false , skill ) ;
2099: LD_INT 0
2101: PPUSH
2102: LD_VAR 0 5
2106: PPUSH
2107: CALL_OW 383
// un := CreateHuman ;
2111: LD_ADDR_VAR 0 4
2115: PUSH
2116: CALL_OW 44
2120: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2121: LD_INT 35
2123: PPUSH
2124: CALL_OW 67
// until PlaceUnitArea ( veh , arabEastSpawnArea , false ) ;
2128: LD_VAR 0 3
2132: PPUSH
2133: LD_INT 14
2135: PPUSH
2136: LD_INT 0
2138: PPUSH
2139: CALL_OW 49
2143: IFFALSE 2121
// PlaceHumanInUnit ( un , veh ) ;
2145: LD_VAR 0 4
2149: PPUSH
2150: LD_VAR 0 3
2154: PPUSH
2155: CALL_OW 52
// ComMoveXY ( veh , 151 , 28 ) ;
2159: LD_VAR 0 3
2163: PPUSH
2164: LD_INT 151
2166: PPUSH
2167: LD_INT 28
2169: PPUSH
2170: CALL_OW 111
// end ;
2174: GO 1992
2176: POP
2177: POP
// blockThread := false ;
2178: LD_ADDR_EXP 6
2182: PUSH
2183: LD_INT 0
2185: ST_TO_ADDR
// end ;
2186: LD_VAR 0 1
2190: RET
// export function ClearRoadInForest ; var i , un , veh , tmp , skill ; begin
2191: LD_INT 0
2193: PPUSH
2194: PPUSH
2195: PPUSH
2196: PPUSH
2197: PPUSH
2198: PPUSH
// blockThread := true ;
2199: LD_ADDR_EXP 6
2203: PUSH
2204: LD_INT 1
2206: ST_TO_ADDR
// skill := [ 4 , 5 , 7 ] [ Difficulty ] ;
2207: LD_ADDR_VAR 0 6
2211: PUSH
2212: LD_INT 4
2214: PUSH
2215: LD_INT 5
2217: PUSH
2218: LD_INT 7
2220: PUSH
2221: EMPTY
2222: LIST
2223: LIST
2224: LIST
2225: PUSH
2226: LD_OWVAR 67
2230: ARRAY
2231: ST_TO_ADDR
// tmp := AreaToList ( forestRoadArea , 0 ) ;
2232: LD_ADDR_VAR 0 5
2236: PUSH
2237: LD_INT 15
2239: PPUSH
2240: LD_INT 0
2242: PPUSH
2243: CALL_OW 517
2247: ST_TO_ADDR
// uc_side := enemySide ;
2248: LD_ADDR_OWVAR 20
2252: PUSH
2253: LD_EXP 12
2257: ST_TO_ADDR
// uc_nation := nation_arabian ;
2258: LD_ADDR_OWVAR 21
2262: PUSH
2263: LD_INT 2
2265: ST_TO_ADDR
// PrepareMechanic ( false , skill ) ;
2266: LD_INT 0
2268: PPUSH
2269: LD_VAR 0 6
2273: PPUSH
2274: CALL_OW 383
// un := CreateHuman ;
2278: LD_ADDR_VAR 0 3
2282: PUSH
2283: CALL_OW 44
2287: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower , 100 ) ;
2288: LD_INT 14
2290: PPUSH
2291: LD_INT 1
2293: PPUSH
2294: LD_INT 1
2296: PPUSH
2297: LD_INT 26
2299: PPUSH
2300: LD_INT 100
2302: PPUSH
2303: CALL 20219 0 5
// veh := CreateVehicle ;
2307: LD_ADDR_VAR 0 4
2311: PUSH
2312: CALL_OW 45
2316: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2317: LD_VAR 0 4
2321: PPUSH
2322: LD_INT 4
2324: PPUSH
2325: CALL_OW 233
// repeat wait ( 0 0$1 ) ;
2329: LD_INT 35
2331: PPUSH
2332: CALL_OW 67
// until PlaceUnitArea ( veh , arabEastSpawnArea , false ) ;
2336: LD_VAR 0 4
2340: PPUSH
2341: LD_INT 14
2343: PPUSH
2344: LD_INT 0
2346: PPUSH
2347: CALL_OW 49
2351: IFFALSE 2329
// PlaceHumanInUnit ( un , veh ) ;
2353: LD_VAR 0 3
2357: PPUSH
2358: LD_VAR 0 4
2362: PPUSH
2363: CALL_OW 52
// blockThread := false ;
2367: LD_ADDR_EXP 6
2371: PUSH
2372: LD_INT 0
2374: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
2375: LD_ADDR_VAR 0 2
2379: PUSH
2380: DOUBLE
2381: LD_INT 1
2383: DEC
2384: ST_TO_ADDR
2385: LD_VAR 0 5
2389: PUSH
2390: LD_INT 1
2392: ARRAY
2393: PUSH
2394: FOR_TO
2395: IFFALSE 2441
// BurnTreeXYR ( veh , tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 7 ) ;
2397: LD_VAR 0 4
2401: PPUSH
2402: LD_VAR 0 5
2406: PUSH
2407: LD_INT 1
2409: ARRAY
2410: PUSH
2411: LD_VAR 0 2
2415: ARRAY
2416: PPUSH
2417: LD_VAR 0 5
2421: PUSH
2422: LD_INT 2
2424: ARRAY
2425: PUSH
2426: LD_VAR 0 2
2430: ARRAY
2431: PPUSH
2432: LD_INT 7
2434: PPUSH
2435: CALL 59653 0 4
2439: GO 2394
2441: POP
2442: POP
// repeat wait ( 0 0$1 ) ;
2443: LD_INT 35
2445: PPUSH
2446: CALL_OW 67
// if IsDead ( veh ) then
2450: LD_VAR 0 4
2454: PPUSH
2455: CALL_OW 301
2459: IFFALSE 2463
// exit ;
2461: GO 2536
// until FilterUnitsInArea ( endOfTheForestArea , [ f_side , enemySide ] ) or not HasTask ( veh ) or not HasTask ( un ) ;
2463: LD_INT 16
2465: PPUSH
2466: LD_INT 22
2468: PUSH
2469: LD_EXP 12
2473: PUSH
2474: EMPTY
2475: LIST
2476: LIST
2477: PPUSH
2478: CALL_OW 70
2482: PUSH
2483: LD_VAR 0 4
2487: PPUSH
2488: CALL_OW 314
2492: NOT
2493: OR
2494: PUSH
2495: LD_VAR 0 3
2499: PPUSH
2500: CALL_OW 314
2504: NOT
2505: OR
2506: IFFALSE 2443
// forestIsCleared := true ;
2508: LD_ADDR_EXP 7
2512: PUSH
2513: LD_INT 1
2515: ST_TO_ADDR
// enemyMobile := Join ( enemyMobile , veh ) ;
2516: LD_ADDR_EXP 10
2520: PUSH
2521: LD_EXP 10
2525: PPUSH
2526: LD_VAR 0 4
2530: PPUSH
2531: CALL 53090 0 2
2535: ST_TO_ADDR
// end ;
2536: LD_VAR 0 1
2540: RET
// export function SendWestGroup ; var i , un , skill ; begin
2541: LD_INT 0
2543: PPUSH
2544: PPUSH
2545: PPUSH
2546: PPUSH
// blockThread := true ;
2547: LD_ADDR_EXP 6
2551: PUSH
2552: LD_INT 1
2554: ST_TO_ADDR
// skill := [ 3 , 5 , 7 ] [ Difficulty ] ;
2555: LD_ADDR_VAR 0 4
2559: PUSH
2560: LD_INT 3
2562: PUSH
2563: LD_INT 5
2565: PUSH
2566: LD_INT 7
2568: PUSH
2569: EMPTY
2570: LIST
2571: LIST
2572: LIST
2573: PUSH
2574: LD_OWVAR 67
2578: ARRAY
2579: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
2580: LD_ADDR_VAR 0 2
2584: PUSH
2585: DOUBLE
2586: LD_INT 1
2588: DEC
2589: ST_TO_ADDR
2590: LD_INT 2
2592: PUSH
2593: LD_INT 3
2595: PUSH
2596: LD_INT 3
2598: PUSH
2599: EMPTY
2600: LIST
2601: LIST
2602: LIST
2603: PUSH
2604: LD_OWVAR 67
2608: ARRAY
2609: PUSH
2610: FOR_TO
2611: IFFALSE 2736
// begin uc_side := enemySide ;
2613: LD_ADDR_OWVAR 20
2617: PUSH
2618: LD_EXP 12
2622: ST_TO_ADDR
// uc_nation := nation_arabian ;
2623: LD_ADDR_OWVAR 21
2627: PUSH
2628: LD_INT 2
2630: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
2631: LD_INT 0
2633: PPUSH
2634: LD_VAR 0 4
2638: PPUSH
2639: CALL_OW 381
// un := CreateHuman ;
2643: LD_ADDR_VAR 0 3
2647: PUSH
2648: CALL_OW 44
2652: ST_TO_ADDR
// if i mod 3 = 0 then
2653: LD_VAR 0 2
2657: PUSH
2658: LD_INT 3
2660: MOD
2661: PUSH
2662: LD_INT 0
2664: EQUAL
2665: IFFALSE 2679
// SetClass ( un , class_mortar ) ;
2667: LD_VAR 0 3
2671: PPUSH
2672: LD_INT 8
2674: PPUSH
2675: CALL_OW 336
// enemyUnits := Join ( enemyUnits , un ) ;
2679: LD_ADDR_EXP 9
2683: PUSH
2684: LD_EXP 9
2688: PPUSH
2689: LD_VAR 0 3
2693: PPUSH
2694: CALL 53090 0 2
2698: ST_TO_ADDR
// PlaceUnitArea ( un , arabWestSpawnArea , false ) ;
2699: LD_VAR 0 3
2703: PPUSH
2704: LD_INT 24
2706: PPUSH
2707: LD_INT 0
2709: PPUSH
2710: CALL_OW 49
// result := Join ( result , un ) ;
2714: LD_ADDR_VAR 0 1
2718: PUSH
2719: LD_VAR 0 1
2723: PPUSH
2724: LD_VAR 0 3
2728: PPUSH
2729: CALL 53090 0 2
2733: ST_TO_ADDR
// end ;
2734: GO 2610
2736: POP
2737: POP
// PrepareScientist ( false , skill ) ;
2738: LD_INT 0
2740: PPUSH
2741: LD_VAR 0 4
2745: PPUSH
2746: CALL_OW 384
// un := CreateHuman ;
2750: LD_ADDR_VAR 0 3
2754: PUSH
2755: CALL_OW 44
2759: ST_TO_ADDR
// enemyUnits := Join ( enemyUnits , un ) ;
2760: LD_ADDR_EXP 9
2764: PUSH
2765: LD_EXP 9
2769: PPUSH
2770: LD_VAR 0 3
2774: PPUSH
2775: CALL 53090 0 2
2779: ST_TO_ADDR
// PlaceUnitArea ( un , arabWestSpawnArea , false ) ;
2780: LD_VAR 0 3
2784: PPUSH
2785: LD_INT 24
2787: PPUSH
2788: LD_INT 0
2790: PPUSH
2791: CALL_OW 49
// result := Join ( result , un ) ;
2795: LD_ADDR_VAR 0 1
2799: PUSH
2800: LD_VAR 0 1
2804: PPUSH
2805: LD_VAR 0 3
2809: PPUSH
2810: CALL 53090 0 2
2814: ST_TO_ADDR
// ComAgressiveMove ( result , 24 , 37 ) ;
2815: LD_VAR 0 1
2819: PPUSH
2820: LD_INT 24
2822: PPUSH
2823: LD_INT 37
2825: PPUSH
2826: CALL_OW 114
// blockThread := false ;
2830: LD_ADDR_EXP 6
2834: PUSH
2835: LD_INT 0
2837: ST_TO_ADDR
// end ;
2838: LD_VAR 0 1
2842: RET
// export function PrepareForestOnslaught ; var i , veh , un , skill , v ; begin
2843: LD_INT 0
2845: PPUSH
2846: PPUSH
2847: PPUSH
2848: PPUSH
2849: PPUSH
2850: PPUSH
// blockThread := true ;
2851: LD_ADDR_EXP 6
2855: PUSH
2856: LD_INT 1
2858: ST_TO_ADDR
// v := convoyWave div 12 ;
2859: LD_ADDR_VAR 0 6
2863: PUSH
2864: LD_EXP 39
2868: PUSH
2869: LD_INT 12
2871: DIV
2872: ST_TO_ADDR
// skill := [ 4 , 5 , 6 ] [ Difficulty ] + v ;
2873: LD_ADDR_VAR 0 5
2877: PUSH
2878: LD_INT 4
2880: PUSH
2881: LD_INT 5
2883: PUSH
2884: LD_INT 6
2886: PUSH
2887: EMPTY
2888: LIST
2889: LIST
2890: LIST
2891: PUSH
2892: LD_OWVAR 67
2896: ARRAY
2897: PUSH
2898: LD_VAR 0 6
2902: PLUS
2903: ST_TO_ADDR
// if skill > 10 then
2904: LD_VAR 0 5
2908: PUSH
2909: LD_INT 10
2911: GREATER
2912: IFFALSE 2922
// skill := 10 ;
2914: LD_ADDR_VAR 0 5
2918: PUSH
2919: LD_INT 10
2921: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
2922: LD_ADDR_VAR 0 2
2926: PUSH
2927: DOUBLE
2928: LD_INT 1
2930: DEC
2931: ST_TO_ADDR
2932: LD_INT 2
2934: PUSH
2935: LD_INT 3
2937: PUSH
2938: LD_INT 3
2940: PUSH
2941: EMPTY
2942: LIST
2943: LIST
2944: LIST
2945: PUSH
2946: LD_OWVAR 67
2950: ARRAY
2951: PUSH
2952: FOR_TO
2953: IFFALSE 3156
// begin uc_side := enemySide ;
2955: LD_ADDR_OWVAR 20
2959: PUSH
2960: LD_EXP 12
2964: ST_TO_ADDR
// uc_nation := nation_arabian ;
2965: LD_ADDR_OWVAR 21
2969: PUSH
2970: LD_INT 2
2972: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , [ ar_gun , ar_radar , ar_light_gun ] [ i mod 3 + 1 ] , 100 ) ;
2973: LD_INT 14
2975: PPUSH
2976: LD_INT 1
2978: PPUSH
2979: LD_INT 1
2981: PPUSH
2982: LD_INT 27
2984: PUSH
2985: LD_INT 30
2987: PUSH
2988: LD_INT 23
2990: PUSH
2991: EMPTY
2992: LIST
2993: LIST
2994: LIST
2995: PUSH
2996: LD_VAR 0 2
3000: PUSH
3001: LD_INT 3
3003: MOD
3004: PUSH
3005: LD_INT 1
3007: PLUS
3008: ARRAY
3009: PPUSH
3010: LD_INT 100
3012: PPUSH
3013: CALL 20219 0 5
// veh := CreateVehicle ;
3017: LD_ADDR_VAR 0 3
3021: PUSH
3022: CALL_OW 45
3026: ST_TO_ADDR
// result := Join ( result , veh ) ;
3027: LD_ADDR_VAR 0 1
3031: PUSH
3032: LD_VAR 0 1
3036: PPUSH
3037: LD_VAR 0 3
3041: PPUSH
3042: CALL 53090 0 2
3046: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
3047: LD_VAR 0 3
3051: PPUSH
3052: LD_INT 4
3054: PPUSH
3055: CALL_OW 233
// PrepareMechanic ( false , skill ) ;
3059: LD_INT 0
3061: PPUSH
3062: LD_VAR 0 5
3066: PPUSH
3067: CALL_OW 383
// un := CreateHuman ;
3071: LD_ADDR_VAR 0 4
3075: PUSH
3076: CALL_OW 44
3080: ST_TO_ADDR
// result := Join ( result , un ) ;
3081: LD_ADDR_VAR 0 1
3085: PUSH
3086: LD_VAR 0 1
3090: PPUSH
3091: LD_VAR 0 4
3095: PPUSH
3096: CALL 53090 0 2
3100: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3101: LD_INT 35
3103: PPUSH
3104: CALL_OW 67
// until PlaceUnitArea ( veh , arabEastSpawnArea , false ) ;
3108: LD_VAR 0 3
3112: PPUSH
3113: LD_INT 14
3115: PPUSH
3116: LD_INT 0
3118: PPUSH
3119: CALL_OW 49
3123: IFFALSE 3101
// PlaceHumanInUnit ( un , veh ) ;
3125: LD_VAR 0 4
3129: PPUSH
3130: LD_VAR 0 3
3134: PPUSH
3135: CALL_OW 52
// ComMoveXY ( veh , 159 , 53 ) ;
3139: LD_VAR 0 3
3143: PPUSH
3144: LD_INT 159
3146: PPUSH
3147: LD_INT 53
3149: PPUSH
3150: CALL_OW 111
// end ;
3154: GO 2952
3156: POP
3157: POP
// blockThread := false ;
3158: LD_ADDR_EXP 6
3162: PUSH
3163: LD_INT 0
3165: ST_TO_ADDR
// end ;
3166: LD_VAR 0 1
3170: RET
// export function SendEastGroup ; var i , un , skill ; begin
3171: LD_INT 0
3173: PPUSH
3174: PPUSH
3175: PPUSH
3176: PPUSH
// blockThread := true ;
3177: LD_ADDR_EXP 6
3181: PUSH
3182: LD_INT 1
3184: ST_TO_ADDR
// skill := [ 3 , 5 , 7 ] [ Difficulty ] ;
3185: LD_ADDR_VAR 0 4
3189: PUSH
3190: LD_INT 3
3192: PUSH
3193: LD_INT 5
3195: PUSH
3196: LD_INT 7
3198: PUSH
3199: EMPTY
3200: LIST
3201: LIST
3202: LIST
3203: PUSH
3204: LD_OWVAR 67
3208: ARRAY
3209: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
3210: LD_ADDR_VAR 0 2
3214: PUSH
3215: DOUBLE
3216: LD_INT 1
3218: DEC
3219: ST_TO_ADDR
3220: LD_INT 4
3222: PUSH
3223: LD_INT 5
3225: PUSH
3226: LD_INT 6
3228: PUSH
3229: EMPTY
3230: LIST
3231: LIST
3232: LIST
3233: PUSH
3234: LD_OWVAR 67
3238: ARRAY
3239: PUSH
3240: FOR_TO
3241: IFFALSE 3346
// begin uc_side := enemySide ;
3243: LD_ADDR_OWVAR 20
3247: PUSH
3248: LD_EXP 12
3252: ST_TO_ADDR
// uc_nation := nation_arabian ;
3253: LD_ADDR_OWVAR 21
3257: PUSH
3258: LD_INT 2
3260: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
3261: LD_INT 0
3263: PPUSH
3264: LD_VAR 0 4
3268: PPUSH
3269: CALL_OW 381
// un := CreateHuman ;
3273: LD_ADDR_VAR 0 3
3277: PUSH
3278: CALL_OW 44
3282: ST_TO_ADDR
// if i mod 3 = 0 then
3283: LD_VAR 0 2
3287: PUSH
3288: LD_INT 3
3290: MOD
3291: PUSH
3292: LD_INT 0
3294: EQUAL
3295: IFFALSE 3309
// SetClass ( un , class_mortar ) ;
3297: LD_VAR 0 3
3301: PPUSH
3302: LD_INT 8
3304: PPUSH
3305: CALL_OW 336
// PlaceUnitArea ( un , arabSouthSpawnArea , false ) ;
3309: LD_VAR 0 3
3313: PPUSH
3314: LD_INT 26
3316: PPUSH
3317: LD_INT 0
3319: PPUSH
3320: CALL_OW 49
// result := Join ( result , un ) ;
3324: LD_ADDR_VAR 0 1
3328: PUSH
3329: LD_VAR 0 1
3333: PPUSH
3334: LD_VAR 0 3
3338: PPUSH
3339: CALL 53090 0 2
3343: ST_TO_ADDR
// end ;
3344: GO 3240
3346: POP
3347: POP
// ComAgressiveMove ( result , 219 , 168 ) ;
3348: LD_VAR 0 1
3352: PPUSH
3353: LD_INT 219
3355: PPUSH
3356: LD_INT 168
3358: PPUSH
3359: CALL_OW 114
// blockThread := false ;
3363: LD_ADDR_EXP 6
3367: PUSH
3368: LD_INT 0
3370: ST_TO_ADDR
// end ;
3371: LD_VAR 0 1
3375: RET
// export function SendNorthGroup ; var i , un , skill , v ; begin
3376: LD_INT 0
3378: PPUSH
3379: PPUSH
3380: PPUSH
3381: PPUSH
3382: PPUSH
// blockThread := true ;
3383: LD_ADDR_EXP 6
3387: PUSH
3388: LD_INT 1
3390: ST_TO_ADDR
// v := convoyWave div 12 ;
3391: LD_ADDR_VAR 0 5
3395: PUSH
3396: LD_EXP 39
3400: PUSH
3401: LD_INT 12
3403: DIV
3404: ST_TO_ADDR
// skill := [ 4 , 5 , 6 ] [ Difficulty ] + v ;
3405: LD_ADDR_VAR 0 4
3409: PUSH
3410: LD_INT 4
3412: PUSH
3413: LD_INT 5
3415: PUSH
3416: LD_INT 6
3418: PUSH
3419: EMPTY
3420: LIST
3421: LIST
3422: LIST
3423: PUSH
3424: LD_OWVAR 67
3428: ARRAY
3429: PUSH
3430: LD_VAR 0 5
3434: PLUS
3435: ST_TO_ADDR
// if skill > 10 then
3436: LD_VAR 0 4
3440: PUSH
3441: LD_INT 10
3443: GREATER
3444: IFFALSE 3454
// skill := 10 ;
3446: LD_ADDR_VAR 0 4
3450: PUSH
3451: LD_INT 10
3453: ST_TO_ADDR
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
3454: LD_ADDR_VAR 0 2
3458: PUSH
3459: DOUBLE
3460: LD_INT 1
3462: DEC
3463: ST_TO_ADDR
3464: LD_INT 3
3466: PUSH
3467: LD_INT 4
3469: PUSH
3470: LD_INT 5
3472: PUSH
3473: EMPTY
3474: LIST
3475: LIST
3476: LIST
3477: PUSH
3478: LD_OWVAR 67
3482: ARRAY
3483: PUSH
3484: FOR_TO
3485: IFFALSE 3590
// begin uc_side := enemySide ;
3487: LD_ADDR_OWVAR 20
3491: PUSH
3492: LD_EXP 12
3496: ST_TO_ADDR
// uc_nation := nation_arabian ;
3497: LD_ADDR_OWVAR 21
3501: PUSH
3502: LD_INT 2
3504: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
3505: LD_INT 0
3507: PPUSH
3508: LD_VAR 0 4
3512: PPUSH
3513: CALL_OW 381
// un := CreateHuman ;
3517: LD_ADDR_VAR 0 3
3521: PUSH
3522: CALL_OW 44
3526: ST_TO_ADDR
// if i mod 3 = 0 then
3527: LD_VAR 0 2
3531: PUSH
3532: LD_INT 3
3534: MOD
3535: PUSH
3536: LD_INT 0
3538: EQUAL
3539: IFFALSE 3553
// SetClass ( un , class_mortar ) ;
3541: LD_VAR 0 3
3545: PPUSH
3546: LD_INT 8
3548: PPUSH
3549: CALL_OW 336
// PlaceUnitArea ( un , arabNorthForestSpawnArea , false ) ;
3553: LD_VAR 0 3
3557: PPUSH
3558: LD_INT 27
3560: PPUSH
3561: LD_INT 0
3563: PPUSH
3564: CALL_OW 49
// result := Join ( result , un ) ;
3568: LD_ADDR_VAR 0 1
3572: PUSH
3573: LD_VAR 0 1
3577: PPUSH
3578: LD_VAR 0 3
3582: PPUSH
3583: CALL 53090 0 2
3587: ST_TO_ADDR
// end ;
3588: GO 3484
3590: POP
3591: POP
// ComAgressiveMove ( result , 77 , 23 ) ;
3592: LD_VAR 0 1
3596: PPUSH
3597: LD_INT 77
3599: PPUSH
3600: LD_INT 23
3602: PPUSH
3603: CALL_OW 114
// blockThread := false ;
3607: LD_ADDR_EXP 6
3611: PUSH
3612: LD_INT 0
3614: ST_TO_ADDR
// end ;
3615: LD_VAR 0 1
3619: RET
// export function SendEastGroup2 ; var i , un , skill , v ; begin
3620: LD_INT 0
3622: PPUSH
3623: PPUSH
3624: PPUSH
3625: PPUSH
3626: PPUSH
// blockThread := true ;
3627: LD_ADDR_EXP 6
3631: PUSH
3632: LD_INT 1
3634: ST_TO_ADDR
// v := convoyWave div 12 ;
3635: LD_ADDR_VAR 0 5
3639: PUSH
3640: LD_EXP 39
3644: PUSH
3645: LD_INT 12
3647: DIV
3648: ST_TO_ADDR
// skill := [ 4 , 5 , 6 ] [ Difficulty ] + v ;
3649: LD_ADDR_VAR 0 4
3653: PUSH
3654: LD_INT 4
3656: PUSH
3657: LD_INT 5
3659: PUSH
3660: LD_INT 6
3662: PUSH
3663: EMPTY
3664: LIST
3665: LIST
3666: LIST
3667: PUSH
3668: LD_OWVAR 67
3672: ARRAY
3673: PUSH
3674: LD_VAR 0 5
3678: PLUS
3679: ST_TO_ADDR
// if skill > 10 then
3680: LD_VAR 0 4
3684: PUSH
3685: LD_INT 10
3687: GREATER
3688: IFFALSE 3698
// skill := 10 ;
3690: LD_ADDR_VAR 0 4
3694: PUSH
3695: LD_INT 10
3697: ST_TO_ADDR
// for i := 1 to [ 3 , 4 , 4 ] [ Difficulty ] do
3698: LD_ADDR_VAR 0 2
3702: PUSH
3703: DOUBLE
3704: LD_INT 1
3706: DEC
3707: ST_TO_ADDR
3708: LD_INT 3
3710: PUSH
3711: LD_INT 4
3713: PUSH
3714: LD_INT 4
3716: PUSH
3717: EMPTY
3718: LIST
3719: LIST
3720: LIST
3721: PUSH
3722: LD_OWVAR 67
3726: ARRAY
3727: PUSH
3728: FOR_TO
3729: IFFALSE 3834
// begin uc_side := enemySide ;
3731: LD_ADDR_OWVAR 20
3735: PUSH
3736: LD_EXP 12
3740: ST_TO_ADDR
// uc_nation := nation_arabian ;
3741: LD_ADDR_OWVAR 21
3745: PUSH
3746: LD_INT 2
3748: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
3749: LD_INT 0
3751: PPUSH
3752: LD_VAR 0 4
3756: PPUSH
3757: CALL_OW 381
// un := CreateHuman ;
3761: LD_ADDR_VAR 0 3
3765: PUSH
3766: CALL_OW 44
3770: ST_TO_ADDR
// if i mod 3 = 0 then
3771: LD_VAR 0 2
3775: PUSH
3776: LD_INT 3
3778: MOD
3779: PUSH
3780: LD_INT 0
3782: EQUAL
3783: IFFALSE 3797
// SetClass ( un , class_mortar ) ;
3785: LD_VAR 0 3
3789: PPUSH
3790: LD_INT 8
3792: PPUSH
3793: CALL_OW 336
// PlaceUnitArea ( un , arabEastForestSpawnArea , false ) ;
3797: LD_VAR 0 3
3801: PPUSH
3802: LD_INT 28
3804: PPUSH
3805: LD_INT 0
3807: PPUSH
3808: CALL_OW 49
// result := Join ( result , un ) ;
3812: LD_ADDR_VAR 0 1
3816: PUSH
3817: LD_VAR 0 1
3821: PPUSH
3822: LD_VAR 0 3
3826: PPUSH
3827: CALL 53090 0 2
3831: ST_TO_ADDR
// end ;
3832: GO 3728
3834: POP
3835: POP
// ComAgressiveMove ( result , 147 , 100 ) ;
3836: LD_VAR 0 1
3840: PPUSH
3841: LD_INT 147
3843: PPUSH
3844: LD_INT 100
3846: PPUSH
3847: CALL_OW 114
// blockThread := false ;
3851: LD_ADDR_EXP 6
3855: PUSH
3856: LD_INT 0
3858: ST_TO_ADDR
// end ; end_of_file
3859: LD_VAR 0 1
3863: RET
// export multi_gametype , multi_sides , multi_side_teams , multi_nations , multi_teams , multi_spec , multi_pos_area , multi_allowed_nations , multi_bots , multi_teamgame , multi_custom_commanders , multi_settings , multi_settings_counter , multi_pep_amount , multi_skill_level , multi_crates_spawn , multi_vehicles , multi_commanders , multi_loosers , multi_players_amount , multi_points_to_victory , multi_buildings ; export function InitMultiplayer ; var i , j , x , tmp ; begin
3864: LD_INT 0
3866: PPUSH
3867: PPUSH
3868: PPUSH
3869: PPUSH
3870: PPUSH
// multi_settings_counter := 5 ;
3871: LD_ADDR_EXP 26
3875: PUSH
3876: LD_INT 5
3878: ST_TO_ADDR
// multi_settings := [ ] ;
3879: LD_ADDR_EXP 25
3883: PUSH
3884: EMPTY
3885: ST_TO_ADDR
// if Multiplayer then
3886: LD_OWVAR 4
3890: IFFALSE 4070
// begin your_side := mp_player_side ;
3892: LD_ADDR_OWVAR 2
3896: PUSH
3897: LD_OWVAR 7
3901: ST_TO_ADDR
// multi_gametype := mp_game_type ;
3902: LD_ADDR_EXP 14
3906: PUSH
3907: LD_OWVAR 6
3911: ST_TO_ADDR
// multi_sides := mp_sides_positions ;
3912: LD_ADDR_EXP 15
3916: PUSH
3917: LD_OWVAR 17
3921: ST_TO_ADDR
// multi_side_teams := mp_sides_teams ;
3922: LD_ADDR_EXP 16
3926: PUSH
3927: LD_OWVAR 15
3931: ST_TO_ADDR
// multi_nations := mp_sides_nations ;
3932: LD_ADDR_EXP 17
3936: PUSH
3937: LD_OWVAR 16
3941: ST_TO_ADDR
// multi_teams := [ [ ] ] ;
3942: LD_ADDR_EXP 18
3946: PUSH
3947: EMPTY
3948: PUSH
3949: EMPTY
3950: LIST
3951: ST_TO_ADDR
// for i in mp_teams do
3952: LD_ADDR_VAR 0 2
3956: PUSH
3957: LD_OWVAR 12
3961: PUSH
3962: FOR_IN
3963: IFFALSE 4006
// if i then
3965: LD_VAR 0 2
3969: IFFALSE 4004
// multi_teams := Replace ( multi_teams , 1 , multi_teams [ 1 ] union i ) ;
3971: LD_ADDR_EXP 18
3975: PUSH
3976: LD_EXP 18
3980: PPUSH
3981: LD_INT 1
3983: PPUSH
3984: LD_EXP 18
3988: PUSH
3989: LD_INT 1
3991: ARRAY
3992: PUSH
3993: LD_VAR 0 2
3997: UNION
3998: PPUSH
3999: CALL_OW 1
4003: ST_TO_ADDR
4004: GO 3962
4006: POP
4007: POP
// for i := 1 to multi_settings_counter do
4008: LD_ADDR_VAR 0 2
4012: PUSH
4013: DOUBLE
4014: LD_INT 1
4016: DEC
4017: ST_TO_ADDR
4018: LD_EXP 26
4022: PUSH
4023: FOR_TO
4024: IFFALSE 4066
// multi_settings := Replace ( multi_settings , multi_settings + 1 , GetMultiplayerSetting ( i ) + 1 ) ;
4026: LD_ADDR_EXP 25
4030: PUSH
4031: LD_EXP 25
4035: PPUSH
4036: LD_EXP 25
4040: PUSH
4041: LD_INT 1
4043: PLUS
4044: PPUSH
4045: LD_VAR 0 2
4049: PPUSH
4050: CALL_OW 426
4054: PUSH
4055: LD_INT 1
4057: PLUS
4058: PPUSH
4059: CALL_OW 1
4063: ST_TO_ADDR
4064: GO 4023
4066: POP
4067: POP
// end else
4068: GO 4252
// begin your_side := 3 ;
4070: LD_ADDR_OWVAR 2
4074: PUSH
4075: LD_INT 3
4077: ST_TO_ADDR
// multi_gametype := 1 ;
4078: LD_ADDR_EXP 14
4082: PUSH
4083: LD_INT 1
4085: ST_TO_ADDR
// multi_sides := [ 0 , 0 , 2 , 0 , 0 , 0 , 1 , 0 ] ;
4086: LD_ADDR_EXP 15
4090: PUSH
4091: LD_INT 0
4093: PUSH
4094: LD_INT 0
4096: PUSH
4097: LD_INT 2
4099: PUSH
4100: LD_INT 0
4102: PUSH
4103: LD_INT 0
4105: PUSH
4106: LD_INT 0
4108: PUSH
4109: LD_INT 1
4111: PUSH
4112: LD_INT 0
4114: PUSH
4115: EMPTY
4116: LIST
4117: LIST
4118: LIST
4119: LIST
4120: LIST
4121: LIST
4122: LIST
4123: LIST
4124: ST_TO_ADDR
// multi_side_teams := [ 0 , 0 , 1 , 0 , 0 , 0 , 1 , 0 ] ;
4125: LD_ADDR_EXP 16
4129: PUSH
4130: LD_INT 0
4132: PUSH
4133: LD_INT 0
4135: PUSH
4136: LD_INT 1
4138: PUSH
4139: LD_INT 0
4141: PUSH
4142: LD_INT 0
4144: PUSH
4145: LD_INT 0
4147: PUSH
4148: LD_INT 1
4150: PUSH
4151: LD_INT 0
4153: PUSH
4154: EMPTY
4155: LIST
4156: LIST
4157: LIST
4158: LIST
4159: LIST
4160: LIST
4161: LIST
4162: LIST
4163: ST_TO_ADDR
// multi_nations := [ 0 , 0 , 3 , 0 , 0 , 0 , 3 , 0 ] ;
4164: LD_ADDR_EXP 17
4168: PUSH
4169: LD_INT 0
4171: PUSH
4172: LD_INT 0
4174: PUSH
4175: LD_INT 3
4177: PUSH
4178: LD_INT 0
4180: PUSH
4181: LD_INT 0
4183: PUSH
4184: LD_INT 0
4186: PUSH
4187: LD_INT 3
4189: PUSH
4190: LD_INT 0
4192: PUSH
4193: EMPTY
4194: LIST
4195: LIST
4196: LIST
4197: LIST
4198: LIST
4199: LIST
4200: LIST
4201: LIST
4202: ST_TO_ADDR
// multi_teams := [ [ 3 , 7 ] ] ;
4203: LD_ADDR_EXP 18
4207: PUSH
4208: LD_INT 3
4210: PUSH
4211: LD_INT 7
4213: PUSH
4214: EMPTY
4215: LIST
4216: LIST
4217: PUSH
4218: EMPTY
4219: LIST
4220: ST_TO_ADDR
// multi_settings := [ 2 , 1 , 4 , 3 , 2 , 4 ] ;
4221: LD_ADDR_EXP 25
4225: PUSH
4226: LD_INT 2
4228: PUSH
4229: LD_INT 1
4231: PUSH
4232: LD_INT 4
4234: PUSH
4235: LD_INT 3
4237: PUSH
4238: LD_INT 2
4240: PUSH
4241: LD_INT 4
4243: PUSH
4244: EMPTY
4245: LIST
4246: LIST
4247: LIST
4248: LIST
4249: LIST
4250: LIST
4251: ST_TO_ADDR
// end ; multi_spec := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4252: LD_ADDR_EXP 19
4256: PUSH
4257: LD_INT 0
4259: PUSH
4260: LD_INT 0
4262: PUSH
4263: LD_INT 0
4265: PUSH
4266: LD_INT 0
4268: PUSH
4269: LD_INT 0
4271: PUSH
4272: LD_INT 0
4274: PUSH
4275: LD_INT 0
4277: PUSH
4278: LD_INT 0
4280: PUSH
4281: EMPTY
4282: LIST
4283: LIST
4284: LIST
4285: LIST
4286: LIST
4287: LIST
4288: LIST
4289: LIST
4290: ST_TO_ADDR
// multi_bots := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4291: LD_ADDR_EXP 22
4295: PUSH
4296: LD_INT 0
4298: PUSH
4299: LD_INT 0
4301: PUSH
4302: LD_INT 0
4304: PUSH
4305: LD_INT 0
4307: PUSH
4308: LD_INT 0
4310: PUSH
4311: LD_INT 0
4313: PUSH
4314: LD_INT 0
4316: PUSH
4317: LD_INT 0
4319: PUSH
4320: EMPTY
4321: LIST
4322: LIST
4323: LIST
4324: LIST
4325: LIST
4326: LIST
4327: LIST
4328: LIST
4329: ST_TO_ADDR
// multi_loosers := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4330: LD_ADDR_EXP 32
4334: PUSH
4335: LD_INT 0
4337: PUSH
4338: LD_INT 0
4340: PUSH
4341: LD_INT 0
4343: PUSH
4344: LD_INT 0
4346: PUSH
4347: LD_INT 0
4349: PUSH
4350: LD_INT 0
4352: PUSH
4353: LD_INT 0
4355: PUSH
4356: LD_INT 0
4358: PUSH
4359: EMPTY
4360: LIST
4361: LIST
4362: LIST
4363: LIST
4364: LIST
4365: LIST
4366: LIST
4367: LIST
4368: ST_TO_ADDR
// multi_teamgame := true ;
4369: LD_ADDR_EXP 23
4373: PUSH
4374: LD_INT 1
4376: ST_TO_ADDR
// multi_allowed_nations := [ 3 ] ;
4377: LD_ADDR_EXP 21
4381: PUSH
4382: LD_INT 3
4384: PUSH
4385: EMPTY
4386: LIST
4387: ST_TO_ADDR
// multi_custom_commanders := true ;
4388: LD_ADDR_EXP 24
4392: PUSH
4393: LD_INT 1
4395: ST_TO_ADDR
// multi_commanders := [ ] ;
4396: LD_ADDR_EXP 31
4400: PUSH
4401: EMPTY
4402: ST_TO_ADDR
// multi_players_amount := 0 ;
4403: LD_ADDR_EXP 33
4407: PUSH
4408: LD_INT 0
4410: ST_TO_ADDR
// multi_pos_area := [ [ player1SpawnArea , player1SpawnArea ] , [ player2SpawnArea , player2VehSpawnArea ] ] ;
4411: LD_ADDR_EXP 20
4415: PUSH
4416: LD_INT 3
4418: PUSH
4419: LD_INT 3
4421: PUSH
4422: EMPTY
4423: LIST
4424: LIST
4425: PUSH
4426: LD_INT 4
4428: PUSH
4429: LD_INT 6
4431: PUSH
4432: EMPTY
4433: LIST
4434: LIST
4435: PUSH
4436: EMPTY
4437: LIST
4438: LIST
4439: ST_TO_ADDR
// multi_buildings := [ [ [ b_depot , [ 108 , 110 , 2 ] ] , [ b_bunker , [ 117 , 101 , 3 ] , ru_gun ] , [ b_bunker , [ 124 , 107 , 3 ] , ru_gatling_gun ] , [ b_bunker , [ 94 , 114 , 1 ] , ru_gun ] , [ b_bunker , [ 110 , 94 , 4 ] , ru_gun ] , [ b_oil_mine , [ 126 , 124 , 5 ] ] , [ b_oil_power , [ 101 , 115 , 0 ] ] , [ b_oil_power , [ 125 , 121 , 3 ] ] , [ b_factory , [ 109 , 126 , 0 ] ] , [ b_ext_gun , [ 112 , 129 , 5 ] ] ] , [ [ b_breastwork , [ 95 , 36 , 4 ] ] , [ b_breastwork , [ 116 , 66 , 3 ] ] , [ b_breastwork , [ 157 , 159 , 4 ] ] , [ b_breastwork , [ 75 , 88 , 3 ] ] , [ b_breastwork , [ 63 , 82 , 3 ] ] , [ b_breastwork , [ 106 , 147 , 4 ] ] , [ b_workshop , [ 124 , 164 , 5 ] ] , [ b_armoury , [ 129 , 159 , 4 ] ] , ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
4440: LD_ADDR_EXP 35
4444: PUSH
4445: LD_INT 0
4447: PUSH
4448: LD_INT 108
4450: PUSH
4451: LD_INT 110
4453: PUSH
4454: LD_INT 2
4456: PUSH
4457: EMPTY
4458: LIST
4459: LIST
4460: LIST
4461: PUSH
4462: EMPTY
4463: LIST
4464: LIST
4465: PUSH
4466: LD_INT 32
4468: PUSH
4469: LD_INT 117
4471: PUSH
4472: LD_INT 101
4474: PUSH
4475: LD_INT 3
4477: PUSH
4478: EMPTY
4479: LIST
4480: LIST
4481: LIST
4482: PUSH
4483: LD_INT 44
4485: PUSH
4486: EMPTY
4487: LIST
4488: LIST
4489: LIST
4490: PUSH
4491: LD_INT 32
4493: PUSH
4494: LD_INT 124
4496: PUSH
4497: LD_INT 107
4499: PUSH
4500: LD_INT 3
4502: PUSH
4503: EMPTY
4504: LIST
4505: LIST
4506: LIST
4507: PUSH
4508: LD_INT 43
4510: PUSH
4511: EMPTY
4512: LIST
4513: LIST
4514: LIST
4515: PUSH
4516: LD_INT 32
4518: PUSH
4519: LD_INT 94
4521: PUSH
4522: LD_INT 114
4524: PUSH
4525: LD_INT 1
4527: PUSH
4528: EMPTY
4529: LIST
4530: LIST
4531: LIST
4532: PUSH
4533: LD_INT 44
4535: PUSH
4536: EMPTY
4537: LIST
4538: LIST
4539: LIST
4540: PUSH
4541: LD_INT 32
4543: PUSH
4544: LD_INT 110
4546: PUSH
4547: LD_INT 94
4549: PUSH
4550: LD_INT 4
4552: PUSH
4553: EMPTY
4554: LIST
4555: LIST
4556: LIST
4557: PUSH
4558: LD_INT 44
4560: PUSH
4561: EMPTY
4562: LIST
4563: LIST
4564: LIST
4565: PUSH
4566: LD_INT 29
4568: PUSH
4569: LD_INT 126
4571: PUSH
4572: LD_INT 124
4574: PUSH
4575: LD_INT 5
4577: PUSH
4578: EMPTY
4579: LIST
4580: LIST
4581: LIST
4582: PUSH
4583: EMPTY
4584: LIST
4585: LIST
4586: PUSH
4587: LD_INT 26
4589: PUSH
4590: LD_INT 101
4592: PUSH
4593: LD_INT 115
4595: PUSH
4596: LD_INT 0
4598: PUSH
4599: EMPTY
4600: LIST
4601: LIST
4602: LIST
4603: PUSH
4604: EMPTY
4605: LIST
4606: LIST
4607: PUSH
4608: LD_INT 26
4610: PUSH
4611: LD_INT 125
4613: PUSH
4614: LD_INT 121
4616: PUSH
4617: LD_INT 3
4619: PUSH
4620: EMPTY
4621: LIST
4622: LIST
4623: LIST
4624: PUSH
4625: EMPTY
4626: LIST
4627: LIST
4628: PUSH
4629: LD_INT 3
4631: PUSH
4632: LD_INT 109
4634: PUSH
4635: LD_INT 126
4637: PUSH
4638: LD_INT 0
4640: PUSH
4641: EMPTY
4642: LIST
4643: LIST
4644: LIST
4645: PUSH
4646: EMPTY
4647: LIST
4648: LIST
4649: PUSH
4650: LD_INT 17
4652: PUSH
4653: LD_INT 112
4655: PUSH
4656: LD_INT 129
4658: PUSH
4659: LD_INT 5
4661: PUSH
4662: EMPTY
4663: LIST
4664: LIST
4665: LIST
4666: PUSH
4667: EMPTY
4668: LIST
4669: LIST
4670: PUSH
4671: EMPTY
4672: LIST
4673: LIST
4674: LIST
4675: LIST
4676: LIST
4677: LIST
4678: LIST
4679: LIST
4680: LIST
4681: LIST
4682: PUSH
4683: LD_INT 31
4685: PUSH
4686: LD_INT 95
4688: PUSH
4689: LD_INT 36
4691: PUSH
4692: LD_INT 4
4694: PUSH
4695: EMPTY
4696: LIST
4697: LIST
4698: LIST
4699: PUSH
4700: EMPTY
4701: LIST
4702: LIST
4703: PUSH
4704: LD_INT 31
4706: PUSH
4707: LD_INT 116
4709: PUSH
4710: LD_INT 66
4712: PUSH
4713: LD_INT 3
4715: PUSH
4716: EMPTY
4717: LIST
4718: LIST
4719: LIST
4720: PUSH
4721: EMPTY
4722: LIST
4723: LIST
4724: PUSH
4725: LD_INT 31
4727: PUSH
4728: LD_INT 157
4730: PUSH
4731: LD_INT 159
4733: PUSH
4734: LD_INT 4
4736: PUSH
4737: EMPTY
4738: LIST
4739: LIST
4740: LIST
4741: PUSH
4742: EMPTY
4743: LIST
4744: LIST
4745: PUSH
4746: LD_INT 31
4748: PUSH
4749: LD_INT 75
4751: PUSH
4752: LD_INT 88
4754: PUSH
4755: LD_INT 3
4757: PUSH
4758: EMPTY
4759: LIST
4760: LIST
4761: LIST
4762: PUSH
4763: EMPTY
4764: LIST
4765: LIST
4766: PUSH
4767: LD_INT 31
4769: PUSH
4770: LD_INT 63
4772: PUSH
4773: LD_INT 82
4775: PUSH
4776: LD_INT 3
4778: PUSH
4779: EMPTY
4780: LIST
4781: LIST
4782: LIST
4783: PUSH
4784: EMPTY
4785: LIST
4786: LIST
4787: PUSH
4788: LD_INT 31
4790: PUSH
4791: LD_INT 106
4793: PUSH
4794: LD_INT 147
4796: PUSH
4797: LD_INT 4
4799: PUSH
4800: EMPTY
4801: LIST
4802: LIST
4803: LIST
4804: PUSH
4805: EMPTY
4806: LIST
4807: LIST
4808: PUSH
4809: LD_INT 2
4811: PUSH
4812: LD_INT 124
4814: PUSH
4815: LD_INT 164
4817: PUSH
4818: LD_INT 5
4820: PUSH
4821: EMPTY
4822: LIST
4823: LIST
4824: LIST
4825: PUSH
4826: EMPTY
4827: LIST
4828: LIST
4829: PUSH
4830: LD_INT 4
4832: PUSH
4833: LD_INT 129
4835: PUSH
4836: LD_INT 159
4838: PUSH
4839: LD_INT 4
4841: PUSH
4842: EMPTY
4843: LIST
4844: LIST
4845: LIST
4846: PUSH
4847: EMPTY
4848: LIST
4849: LIST
4850: PUSH
4851: EMPTY
4852: LIST
4853: LIST
4854: LIST
4855: LIST
4856: LIST
4857: LIST
4858: LIST
4859: LIST
4860: PUSH
4861: EMPTY
4862: PUSH
4863: EMPTY
4864: PUSH
4865: EMPTY
4866: PUSH
4867: EMPTY
4868: PUSH
4869: EMPTY
4870: PUSH
4871: EMPTY
4872: PUSH
4873: EMPTY
4874: LIST
4875: LIST
4876: LIST
4877: LIST
4878: LIST
4879: LIST
4880: LIST
4881: LIST
4882: ST_TO_ADDR
// multi_vehicles := [ [ ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_tracked , engine_combustion , control_manual , ru_cargo_bay ] , [ ru_medium_tracked , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun ] [ Difficulty ] ] , [ ru_medium_tracked , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun ] [ Difficulty ] ] , [ ru_medium_tracked , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun ] [ Difficulty ] ] ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
4883: LD_ADDR_EXP 30
4887: PUSH
4888: EMPTY
4889: PUSH
4890: LD_INT 21
4892: PUSH
4893: LD_INT 1
4895: PUSH
4896: LD_INT 1
4898: PUSH
4899: LD_INT 42
4901: PUSH
4902: EMPTY
4903: LIST
4904: LIST
4905: LIST
4906: LIST
4907: PUSH
4908: LD_INT 22
4910: PUSH
4911: LD_INT 1
4913: PUSH
4914: LD_INT 1
4916: PUSH
4917: LD_INT 51
4919: PUSH
4920: EMPTY
4921: LIST
4922: LIST
4923: LIST
4924: LIST
4925: PUSH
4926: LD_INT 22
4928: PUSH
4929: LD_INT 1
4931: PUSH
4932: LD_INT 1
4934: PUSH
4935: LD_INT 44
4937: PUSH
4938: LD_INT 43
4940: PUSH
4941: LD_INT 42
4943: PUSH
4944: EMPTY
4945: LIST
4946: LIST
4947: LIST
4948: PUSH
4949: LD_OWVAR 67
4953: ARRAY
4954: PUSH
4955: EMPTY
4956: LIST
4957: LIST
4958: LIST
4959: LIST
4960: PUSH
4961: LD_INT 22
4963: PUSH
4964: LD_INT 1
4966: PUSH
4967: LD_INT 1
4969: PUSH
4970: LD_INT 44
4972: PUSH
4973: LD_INT 43
4975: PUSH
4976: LD_INT 42
4978: PUSH
4979: EMPTY
4980: LIST
4981: LIST
4982: LIST
4983: PUSH
4984: LD_OWVAR 67
4988: ARRAY
4989: PUSH
4990: EMPTY
4991: LIST
4992: LIST
4993: LIST
4994: LIST
4995: PUSH
4996: LD_INT 22
4998: PUSH
4999: LD_INT 1
5001: PUSH
5002: LD_INT 1
5004: PUSH
5005: LD_INT 44
5007: PUSH
5008: LD_INT 43
5010: PUSH
5011: LD_INT 42
5013: PUSH
5014: EMPTY
5015: LIST
5016: LIST
5017: LIST
5018: PUSH
5019: LD_OWVAR 67
5023: ARRAY
5024: PUSH
5025: EMPTY
5026: LIST
5027: LIST
5028: LIST
5029: LIST
5030: PUSH
5031: EMPTY
5032: LIST
5033: LIST
5034: LIST
5035: LIST
5036: LIST
5037: PUSH
5038: EMPTY
5039: PUSH
5040: EMPTY
5041: PUSH
5042: EMPTY
5043: PUSH
5044: EMPTY
5045: PUSH
5046: EMPTY
5047: PUSH
5048: EMPTY
5049: PUSH
5050: EMPTY
5051: LIST
5052: LIST
5053: LIST
5054: LIST
5055: LIST
5056: LIST
5057: LIST
5058: LIST
5059: ST_TO_ADDR
// for i := 1 to 8 do
5060: LD_ADDR_VAR 0 2
5064: PUSH
5065: DOUBLE
5066: LD_INT 1
5068: DEC
5069: ST_TO_ADDR
5070: LD_INT 8
5072: PUSH
5073: FOR_TO
5074: IFFALSE 5403
// begin if Multiplayer_GetPlayerIsSpec ( i ) then
5076: LD_VAR 0 2
5080: PPUSH
5081: CALL_OW 530
5085: IFFALSE 5243
// begin multi_spec := Replace ( multi_spec , i , 1 ) ;
5087: LD_ADDR_EXP 19
5091: PUSH
5092: LD_EXP 19
5096: PPUSH
5097: LD_VAR 0 2
5101: PPUSH
5102: LD_INT 1
5104: PPUSH
5105: CALL_OW 1
5109: ST_TO_ADDR
// multi_nations := Replace ( multi_nations , i , 0 ) ;
5110: LD_ADDR_EXP 17
5114: PUSH
5115: LD_EXP 17
5119: PPUSH
5120: LD_VAR 0 2
5124: PPUSH
5125: LD_INT 0
5127: PPUSH
5128: CALL_OW 1
5132: ST_TO_ADDR
// multi_sides := Replace ( multi_sides , i , 0 ) ;
5133: LD_ADDR_EXP 15
5137: PUSH
5138: LD_EXP 15
5142: PPUSH
5143: LD_VAR 0 2
5147: PPUSH
5148: LD_INT 0
5150: PPUSH
5151: CALL_OW 1
5155: ST_TO_ADDR
// for j = 1 to multi_teams do
5156: LD_ADDR_VAR 0 3
5160: PUSH
5161: DOUBLE
5162: LD_INT 1
5164: DEC
5165: ST_TO_ADDR
5166: LD_EXP 18
5170: PUSH
5171: FOR_TO
5172: IFFALSE 5241
// begin if i in multi_teams [ j ] then
5174: LD_VAR 0 2
5178: PUSH
5179: LD_EXP 18
5183: PUSH
5184: LD_VAR 0 3
5188: ARRAY
5189: IN
5190: IFFALSE 5239
// begin tmp := multi_teams [ j ] diff i ;
5192: LD_ADDR_VAR 0 5
5196: PUSH
5197: LD_EXP 18
5201: PUSH
5202: LD_VAR 0 3
5206: ARRAY
5207: PUSH
5208: LD_VAR 0 2
5212: DIFF
5213: ST_TO_ADDR
// multi_teams := Replace ( multi_teams , j , tmp ) ;
5214: LD_ADDR_EXP 18
5218: PUSH
5219: LD_EXP 18
5223: PPUSH
5224: LD_VAR 0 3
5228: PPUSH
5229: LD_VAR 0 5
5233: PPUSH
5234: CALL_OW 1
5238: ST_TO_ADDR
// end ; end ;
5239: GO 5171
5241: POP
5242: POP
// end ; if multi_nations [ i ] and not multi_nations [ i ] in multi_allowed_nations then
5243: LD_EXP 17
5247: PUSH
5248: LD_VAR 0 2
5252: ARRAY
5253: PUSH
5254: LD_EXP 17
5258: PUSH
5259: LD_VAR 0 2
5263: ARRAY
5264: PUSH
5265: LD_EXP 21
5269: IN
5270: NOT
5271: AND
5272: IFFALSE 5313
// multi_nations := Replace ( multi_nations , i , multi_allowed_nations [ rand ( 1 , multi_allowed_nations ) ] ) ;
5274: LD_ADDR_EXP 17
5278: PUSH
5279: LD_EXP 17
5283: PPUSH
5284: LD_VAR 0 2
5288: PPUSH
5289: LD_EXP 21
5293: PUSH
5294: LD_INT 1
5296: PPUSH
5297: LD_EXP 21
5301: PPUSH
5302: CALL_OW 12
5306: ARRAY
5307: PPUSH
5308: CALL_OW 1
5312: ST_TO_ADDR
// if not multi_nations [ i ] and not multi_sides [ i ] and not multi_spec [ i ] then
5313: LD_EXP 17
5317: PUSH
5318: LD_VAR 0 2
5322: ARRAY
5323: NOT
5324: PUSH
5325: LD_EXP 15
5329: PUSH
5330: LD_VAR 0 2
5334: ARRAY
5335: NOT
5336: AND
5337: PUSH
5338: LD_EXP 19
5342: PUSH
5343: LD_VAR 0 2
5347: ARRAY
5348: NOT
5349: AND
5350: IFFALSE 5375
// multi_bots := Replace ( multi_bots , i , 1 ) ;
5352: LD_ADDR_EXP 22
5356: PUSH
5357: LD_EXP 22
5361: PPUSH
5362: LD_VAR 0 2
5366: PPUSH
5367: LD_INT 1
5369: PPUSH
5370: CALL_OW 1
5374: ST_TO_ADDR
// if multi_sides [ i ] then
5375: LD_EXP 15
5379: PUSH
5380: LD_VAR 0 2
5384: ARRAY
5385: IFFALSE 5401
// multi_players_amount := multi_players_amount + 1 ;
5387: LD_ADDR_EXP 33
5391: PUSH
5392: LD_EXP 33
5396: PUSH
5397: LD_INT 1
5399: PLUS
5400: ST_TO_ADDR
// end ;
5401: GO 5073
5403: POP
5404: POP
// for i in multi_teams do
5405: LD_ADDR_VAR 0 2
5409: PUSH
5410: LD_EXP 18
5414: PUSH
5415: FOR_IN
5416: IFFALSE 5524
// begin for j = 2 to i do
5418: LD_ADDR_VAR 0 3
5422: PUSH
5423: DOUBLE
5424: LD_INT 2
5426: DEC
5427: ST_TO_ADDR
5428: LD_VAR 0 2
5432: PUSH
5433: FOR_TO
5434: IFFALSE 5520
// begin ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
5436: LD_VAR 0 2
5440: PUSH
5441: LD_VAR 0 3
5445: ARRAY
5446: PPUSH
5447: LD_VAR 0 2
5451: PUSH
5452: LD_INT 1
5454: ARRAY
5455: PPUSH
5456: CALL_OW 343
// for x = 1 to j - 1 do
5460: LD_ADDR_VAR 0 4
5464: PUSH
5465: DOUBLE
5466: LD_INT 1
5468: DEC
5469: ST_TO_ADDR
5470: LD_VAR 0 3
5474: PUSH
5475: LD_INT 1
5477: MINUS
5478: PUSH
5479: FOR_TO
5480: IFFALSE 5516
// SetAttitude ( i [ j ] , i [ x ] , att_friend , true ) ;
5482: LD_VAR 0 2
5486: PUSH
5487: LD_VAR 0 3
5491: ARRAY
5492: PPUSH
5493: LD_VAR 0 2
5497: PUSH
5498: LD_VAR 0 4
5502: ARRAY
5503: PPUSH
5504: LD_INT 1
5506: PPUSH
5507: LD_INT 1
5509: PPUSH
5510: CALL_OW 80
5514: GO 5479
5516: POP
5517: POP
// end ;
5518: GO 5433
5520: POP
5521: POP
// end ;
5522: GO 5415
5524: POP
5525: POP
// Difficulty := [ 1 , 2 , 3 ] [ multi_settings [ 1 ] ] ;
5526: LD_ADDR_OWVAR 67
5530: PUSH
5531: LD_INT 1
5533: PUSH
5534: LD_INT 2
5536: PUSH
5537: LD_INT 3
5539: PUSH
5540: EMPTY
5541: LIST
5542: LIST
5543: LIST
5544: PUSH
5545: LD_EXP 25
5549: PUSH
5550: LD_INT 1
5552: ARRAY
5553: ARRAY
5554: ST_TO_ADDR
// multi_pep_amount := [ 9 , 12 , 15 ] [ multi_settings [ 2 ] ] ;
5555: LD_ADDR_EXP 27
5559: PUSH
5560: LD_INT 9
5562: PUSH
5563: LD_INT 12
5565: PUSH
5566: LD_INT 15
5568: PUSH
5569: EMPTY
5570: LIST
5571: LIST
5572: LIST
5573: PUSH
5574: LD_EXP 25
5578: PUSH
5579: LD_INT 2
5581: ARRAY
5582: ARRAY
5583: ST_TO_ADDR
// multi_skill_level := [ 1 , 3 , 4 , 6 ] [ multi_settings [ 3 ] ] ;
5584: LD_ADDR_EXP 28
5588: PUSH
5589: LD_INT 1
5591: PUSH
5592: LD_INT 3
5594: PUSH
5595: LD_INT 4
5597: PUSH
5598: LD_INT 6
5600: PUSH
5601: EMPTY
5602: LIST
5603: LIST
5604: LIST
5605: LIST
5606: PUSH
5607: LD_EXP 25
5611: PUSH
5612: LD_INT 3
5614: ARRAY
5615: ARRAY
5616: ST_TO_ADDR
// multi_points_to_victory := [ 3500 , 5000 , 7500 , 10000 , 15000 ] [ multi_settings [ 4 ] ] ;
5617: LD_ADDR_EXP 34
5621: PUSH
5622: LD_INT 3500
5624: PUSH
5625: LD_INT 5000
5627: PUSH
5628: LD_INT 7500
5630: PUSH
5631: LD_INT 10000
5633: PUSH
5634: LD_INT 15000
5636: PUSH
5637: EMPTY
5638: LIST
5639: LIST
5640: LIST
5641: LIST
5642: LIST
5643: PUSH
5644: LD_EXP 25
5648: PUSH
5649: LD_INT 4
5651: ARRAY
5652: ARRAY
5653: ST_TO_ADDR
// multi_crates_spawn := [ [ 1000 , 0 0$36 ] , [ 2000 , 0 0$30 ] , [ 3000 , 0 0$24 ] , [ 4000 , 0 0$18 ] ] [ multi_settings [ 5 ] ] ;
5654: LD_ADDR_EXP 29
5658: PUSH
5659: LD_INT 1000
5661: PUSH
5662: LD_INT 1260
5664: PUSH
5665: EMPTY
5666: LIST
5667: LIST
5668: PUSH
5669: LD_INT 2000
5671: PUSH
5672: LD_INT 1050
5674: PUSH
5675: EMPTY
5676: LIST
5677: LIST
5678: PUSH
5679: LD_INT 3000
5681: PUSH
5682: LD_INT 840
5684: PUSH
5685: EMPTY
5686: LIST
5687: LIST
5688: PUSH
5689: LD_INT 4000
5691: PUSH
5692: LD_INT 630
5694: PUSH
5695: EMPTY
5696: LIST
5697: LIST
5698: PUSH
5699: EMPTY
5700: LIST
5701: LIST
5702: LIST
5703: LIST
5704: PUSH
5705: LD_EXP 25
5709: PUSH
5710: LD_INT 5
5712: ARRAY
5713: ARRAY
5714: ST_TO_ADDR
// end ;
5715: LD_VAR 0 1
5719: RET
// export function Multiplayer_SetBotSide ( preferSide ) ; var i ; begin
5720: LD_INT 0
5722: PPUSH
5723: PPUSH
// if not multi_sides [ preferSide ] then
5724: LD_EXP 15
5728: PUSH
5729: LD_VAR 0 1
5733: ARRAY
5734: NOT
5735: IFFALSE 5749
// begin result := preferSide ;
5737: LD_ADDR_VAR 0 2
5741: PUSH
5742: LD_VAR 0 1
5746: ST_TO_ADDR
// exit ;
5747: GO 5796
// end ; for i := 1 to 8 do
5749: LD_ADDR_VAR 0 3
5753: PUSH
5754: DOUBLE
5755: LD_INT 1
5757: DEC
5758: ST_TO_ADDR
5759: LD_INT 8
5761: PUSH
5762: FOR_TO
5763: IFFALSE 5794
// if not multi_sides [ i ] then
5765: LD_EXP 15
5769: PUSH
5770: LD_VAR 0 3
5774: ARRAY
5775: NOT
5776: IFFALSE 5792
// begin result := i ;
5778: LD_ADDR_VAR 0 2
5782: PUSH
5783: LD_VAR 0 3
5787: ST_TO_ADDR
// exit ;
5788: POP
5789: POP
5790: GO 5796
// end ;
5792: GO 5762
5794: POP
5795: POP
// end ;
5796: LD_VAR 0 2
5800: RET
// export function Multiplayer_PrepareCustomCommanders ( side , num ) ; begin
5801: LD_INT 0
5803: PPUSH
// uc_side := side ;
5804: LD_ADDR_OWVAR 20
5808: PUSH
5809: LD_VAR 0 1
5813: ST_TO_ADDR
// uc_nation := nation_russian ;
5814: LD_ADDR_OWVAR 21
5818: PUSH
5819: LD_INT 3
5821: ST_TO_ADDR
// hc_importance := 100 ;
5822: LD_ADDR_OWVAR 32
5826: PUSH
5827: LD_INT 100
5829: ST_TO_ADDR
// if num = 1 then
5830: LD_VAR 0 2
5834: PUSH
5835: LD_INT 1
5837: EQUAL
5838: IFFALSE 5905
// begin PrepareSoldier ( sex_male , multi_skill_level + 1 ) ;
5840: LD_INT 1
5842: PPUSH
5843: LD_EXP 28
5847: PUSH
5848: LD_INT 1
5850: PLUS
5851: PPUSH
5852: CALL_OW 381
// hc_gallery := ru ;
5856: LD_ADDR_OWVAR 33
5860: PUSH
5861: LD_STRING ru
5863: ST_TO_ADDR
// hc_face_number := 13 ;
5864: LD_ADDR_OWVAR 34
5868: PUSH
5869: LD_INT 13
5871: ST_TO_ADDR
// hc_name := Kuzmov ;
5872: LD_ADDR_OWVAR 26
5876: PUSH
5877: LD_STRING Kuzmov
5879: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
5880: LD_ADDR_OWVAR 29
5884: PUSH
5885: LD_INT 11
5887: PUSH
5888: LD_INT 11
5890: PUSH
5891: EMPTY
5892: LIST
5893: LIST
5894: ST_TO_ADDR
// result := CreateHuman ;
5895: LD_ADDR_VAR 0 3
5899: PUSH
5900: CALL_OW 44
5904: ST_TO_ADDR
// end ; if num = 2 then
5905: LD_VAR 0 2
5909: PUSH
5910: LD_INT 2
5912: EQUAL
5913: IFFALSE 5980
// begin PrepareMechanic ( sex_male , multi_skill_level + 2 ) ;
5915: LD_INT 1
5917: PPUSH
5918: LD_EXP 28
5922: PUSH
5923: LD_INT 2
5925: PLUS
5926: PPUSH
5927: CALL_OW 383
// hc_gallery := ru ;
5931: LD_ADDR_OWVAR 33
5935: PUSH
5936: LD_STRING ru
5938: ST_TO_ADDR
// hc_face_number := 1 ;
5939: LD_ADDR_OWVAR 34
5943: PUSH
5944: LD_INT 1
5946: ST_TO_ADDR
// hc_name := Burlak ;
5947: LD_ADDR_OWVAR 26
5951: PUSH
5952: LD_STRING Burlak
5954: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
5955: LD_ADDR_OWVAR 29
5959: PUSH
5960: LD_INT 10
5962: PUSH
5963: LD_INT 11
5965: PUSH
5966: EMPTY
5967: LIST
5968: LIST
5969: ST_TO_ADDR
// result := CreateHuman ;
5970: LD_ADDR_VAR 0 3
5974: PUSH
5975: CALL_OW 44
5979: ST_TO_ADDR
// end ; end ;
5980: LD_VAR 0 3
5984: RET
// export function Multiplayer_PreparePlayers ( ) ; var i , j , b , cl , un , veh , vehicles , tmp , people_amount ; begin
5985: LD_INT 0
5987: PPUSH
5988: PPUSH
5989: PPUSH
5990: PPUSH
5991: PPUSH
5992: PPUSH
5993: PPUSH
5994: PPUSH
5995: PPUSH
5996: PPUSH
// for i := 1 to 8 do
5997: LD_ADDR_VAR 0 2
6001: PUSH
6002: DOUBLE
6003: LD_INT 1
6005: DEC
6006: ST_TO_ADDR
6007: LD_INT 8
6009: PUSH
6010: FOR_TO
6011: IFFALSE 7433
// begin if not multi_sides [ i ] then
6013: LD_EXP 15
6017: PUSH
6018: LD_VAR 0 2
6022: ARRAY
6023: NOT
6024: IFFALSE 6028
// continue ;
6026: GO 6010
// vehicles := multi_vehicles [ multi_sides [ i ] ] ;
6028: LD_ADDR_VAR 0 8
6032: PUSH
6033: LD_EXP 30
6037: PUSH
6038: LD_EXP 15
6042: PUSH
6043: LD_VAR 0 2
6047: ARRAY
6048: ARRAY
6049: ST_TO_ADDR
// if multi_buildings [ multi_sides [ i ] ] then
6050: LD_EXP 35
6054: PUSH
6055: LD_EXP 15
6059: PUSH
6060: LD_VAR 0 2
6064: ARRAY
6065: ARRAY
6066: IFFALSE 6363
// begin uc_side := i ;
6068: LD_ADDR_OWVAR 20
6072: PUSH
6073: LD_VAR 0 2
6077: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
6078: LD_ADDR_OWVAR 21
6082: PUSH
6083: LD_EXP 17
6087: PUSH
6088: LD_VAR 0 2
6092: ARRAY
6093: ST_TO_ADDR
// for j in multi_buildings [ multi_sides [ i ] ] do
6094: LD_ADDR_VAR 0 3
6098: PUSH
6099: LD_EXP 35
6103: PUSH
6104: LD_EXP 15
6108: PUSH
6109: LD_VAR 0 2
6113: ARRAY
6114: ARRAY
6115: PUSH
6116: FOR_IN
6117: IFFALSE 6361
// begin if j [ 1 ] = b_oil_mine then
6119: LD_VAR 0 3
6123: PUSH
6124: LD_INT 1
6126: ARRAY
6127: PUSH
6128: LD_INT 29
6130: EQUAL
6131: IFFALSE 6168
// SetResourceVisibility ( j [ 2 ] [ 1 ] , j [ 2 ] [ 2 ] , i ) ;
6133: LD_VAR 0 3
6137: PUSH
6138: LD_INT 2
6140: ARRAY
6141: PUSH
6142: LD_INT 1
6144: ARRAY
6145: PPUSH
6146: LD_VAR 0 3
6150: PUSH
6151: LD_INT 2
6153: ARRAY
6154: PUSH
6155: LD_INT 2
6157: ARRAY
6158: PPUSH
6159: LD_VAR 0 2
6163: PPUSH
6164: CALL_OW 441
// bc_type := j [ 1 ] ;
6168: LD_ADDR_OWVAR 42
6172: PUSH
6173: LD_VAR 0 3
6177: PUSH
6178: LD_INT 1
6180: ARRAY
6181: ST_TO_ADDR
// bc_level := 3 ;
6182: LD_ADDR_OWVAR 43
6186: PUSH
6187: LD_INT 3
6189: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( j [ 2 ] [ 1 ] , j [ 2 ] [ 2 ] , j [ 2 ] [ 3 ] ) ;
6190: LD_ADDR_VAR 0 4
6194: PUSH
6195: LD_VAR 0 3
6199: PUSH
6200: LD_INT 2
6202: ARRAY
6203: PUSH
6204: LD_INT 1
6206: ARRAY
6207: PPUSH
6208: LD_VAR 0 3
6212: PUSH
6213: LD_INT 2
6215: ARRAY
6216: PUSH
6217: LD_INT 2
6219: ARRAY
6220: PPUSH
6221: LD_VAR 0 3
6225: PUSH
6226: LD_INT 2
6228: ARRAY
6229: PUSH
6230: LD_INT 3
6232: ARRAY
6233: PPUSH
6234: CALL_OW 47
6238: ST_TO_ADDR
// if j [ 1 ] = b_depot then
6239: LD_VAR 0 3
6243: PUSH
6244: LD_INT 1
6246: ARRAY
6247: PUSH
6248: LD_INT 0
6250: EQUAL
6251: IFFALSE 6327
// begin SetResourceType ( GetBase ( b ) , mat_cans , [ 450 , 350 , 230 ] [ Difficulty ] ) ;
6253: LD_VAR 0 4
6257: PPUSH
6258: CALL_OW 274
6262: PPUSH
6263: LD_INT 1
6265: PPUSH
6266: LD_INT 450
6268: PUSH
6269: LD_INT 350
6271: PUSH
6272: LD_INT 230
6274: PUSH
6275: EMPTY
6276: LIST
6277: LIST
6278: LIST
6279: PUSH
6280: LD_OWVAR 67
6284: ARRAY
6285: PPUSH
6286: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_oil , [ 90 , 60 , 40 ] [ Difficulty ] ) ;
6290: LD_VAR 0 4
6294: PPUSH
6295: CALL_OW 274
6299: PPUSH
6300: LD_INT 2
6302: PPUSH
6303: LD_INT 90
6305: PUSH
6306: LD_INT 60
6308: PUSH
6309: LD_INT 40
6311: PUSH
6312: EMPTY
6313: LIST
6314: LIST
6315: LIST
6316: PUSH
6317: LD_OWVAR 67
6321: ARRAY
6322: PPUSH
6323: CALL_OW 277
// end ; if j [ 1 ] = b_bunker then
6327: LD_VAR 0 3
6331: PUSH
6332: LD_INT 1
6334: ARRAY
6335: PUSH
6336: LD_INT 32
6338: EQUAL
6339: IFFALSE 6359
// PlaceWeaponTurret ( b , j [ 3 ] ) ;
6341: LD_VAR 0 4
6345: PPUSH
6346: LD_VAR 0 3
6350: PUSH
6351: LD_INT 3
6353: ARRAY
6354: PPUSH
6355: CALL_OW 431
// end ;
6359: GO 6116
6361: POP
6362: POP
// end ; if multi_custom_commanders then
6363: LD_EXP 24
6367: IFFALSE 6584
// begin un := Multiplayer_PrepareCustomCommanders ( i , multi_sides [ i ] ) ;
6369: LD_ADDR_VAR 0 6
6373: PUSH
6374: LD_VAR 0 2
6378: PPUSH
6379: LD_EXP 15
6383: PUSH
6384: LD_VAR 0 2
6388: ARRAY
6389: PPUSH
6390: CALL 5801 0 2
6394: ST_TO_ADDR
// multi_commanders := Insert ( multi_commanders , multi_commanders + 1 , un ) ;
6395: LD_ADDR_EXP 31
6399: PUSH
6400: LD_EXP 31
6404: PPUSH
6405: LD_EXP 31
6409: PUSH
6410: LD_INT 1
6412: PLUS
6413: PPUSH
6414: LD_VAR 0 6
6418: PPUSH
6419: CALL_OW 2
6423: ST_TO_ADDR
// if GetClass ( un ) = class_mechanic then
6424: LD_VAR 0 6
6428: PPUSH
6429: CALL_OW 257
6433: PUSH
6434: LD_INT 3
6436: EQUAL
6437: IFFALSE 6549
// begin uc_nation := nation_russian ;
6439: LD_ADDR_OWVAR 21
6443: PUSH
6444: LD_INT 3
6446: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_wheeled , engine_combustion , control_manual , ru_gun , 80 ) ;
6447: LD_INT 23
6449: PPUSH
6450: LD_INT 1
6452: PPUSH
6453: LD_INT 1
6455: PPUSH
6456: LD_INT 44
6458: PPUSH
6459: LD_INT 80
6461: PPUSH
6462: CALL 20219 0 5
// veh := CreateVehicle ;
6466: LD_ADDR_VAR 0 7
6470: PUSH
6471: CALL_OW 45
6475: ST_TO_ADDR
// SetMark ( veh , GetSide ( un ) * - 1 ) ;
6476: LD_VAR 0 7
6480: PPUSH
6481: LD_VAR 0 6
6485: PPUSH
6486: CALL_OW 255
6490: PUSH
6491: LD_INT 1
6493: NEG
6494: MUL
6495: PPUSH
6496: CALL_OW 242
// PlaceUnitArea ( veh , multi_pos_area [ multi_sides [ i ] ] [ 2 ] , false ) ;
6500: LD_VAR 0 7
6504: PPUSH
6505: LD_EXP 20
6509: PUSH
6510: LD_EXP 15
6514: PUSH
6515: LD_VAR 0 2
6519: ARRAY
6520: ARRAY
6521: PUSH
6522: LD_INT 2
6524: ARRAY
6525: PPUSH
6526: LD_INT 0
6528: PPUSH
6529: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
6533: LD_VAR 0 6
6537: PPUSH
6538: LD_VAR 0 7
6542: PPUSH
6543: CALL_OW 52
// end else
6547: GO 6582
// PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
6549: LD_VAR 0 6
6553: PPUSH
6554: LD_EXP 20
6558: PUSH
6559: LD_EXP 15
6563: PUSH
6564: LD_VAR 0 2
6568: ARRAY
6569: ARRAY
6570: PUSH
6571: LD_INT 1
6573: ARRAY
6574: PPUSH
6575: LD_INT 0
6577: PPUSH
6578: CALL_OW 49
// end else
6582: GO 6795
// begin uc_side := i ;
6584: LD_ADDR_OWVAR 20
6588: PUSH
6589: LD_VAR 0 2
6593: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
6594: LD_ADDR_OWVAR 21
6598: PUSH
6599: LD_EXP 17
6603: PUSH
6604: LD_VAR 0 2
6608: ARRAY
6609: ST_TO_ADDR
// hc_importance := 100 ;
6610: LD_ADDR_OWVAR 32
6614: PUSH
6615: LD_INT 100
6617: ST_TO_ADDR
// PrepareHuman ( false , 1 , multi_skill_level ) ;
6618: LD_INT 0
6620: PPUSH
6621: LD_INT 1
6623: PPUSH
6624: LD_EXP 28
6628: PPUSH
6629: CALL_OW 380
// if multiplayer then
6633: LD_OWVAR 4
6637: IFFALSE 6695
// begin hc_name := mp_sides_players_names [ i ] ;
6639: LD_ADDR_OWVAR 26
6643: PUSH
6644: LD_OWVAR 19
6648: PUSH
6649: LD_VAR 0 2
6653: ARRAY
6654: ST_TO_ADDR
// hc_gallery := MULTIAVATARS ;
6655: LD_ADDR_OWVAR 33
6659: PUSH
6660: LD_STRING MULTIAVATARS
6662: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( i ) ;
6663: LD_ADDR_OWVAR 34
6667: PUSH
6668: LD_VAR 0 2
6672: PPUSH
6673: CALL_OW 525
6677: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( i ) ;
6678: LD_ADDR_OWVAR 27
6682: PUSH
6683: LD_VAR 0 2
6687: PPUSH
6688: CALL_OW 526
6692: ST_TO_ADDR
// end else
6693: GO 6727
// begin hc_gallery :=  ;
6695: LD_ADDR_OWVAR 33
6699: PUSH
6700: LD_STRING 
6702: ST_TO_ADDR
// hc_name :=  ;
6703: LD_ADDR_OWVAR 26
6707: PUSH
6708: LD_STRING 
6710: ST_TO_ADDR
// hc_sex := rand ( 1 , 2 ) ;
6711: LD_ADDR_OWVAR 27
6715: PUSH
6716: LD_INT 1
6718: PPUSH
6719: LD_INT 2
6721: PPUSH
6722: CALL_OW 12
6726: ST_TO_ADDR
// end ; un := CreateHuman ;
6727: LD_ADDR_VAR 0 6
6731: PUSH
6732: CALL_OW 44
6736: ST_TO_ADDR
// PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
6737: LD_VAR 0 6
6741: PPUSH
6742: LD_EXP 20
6746: PUSH
6747: LD_EXP 15
6751: PUSH
6752: LD_VAR 0 2
6756: ARRAY
6757: ARRAY
6758: PUSH
6759: LD_INT 1
6761: ARRAY
6762: PPUSH
6763: LD_INT 0
6765: PPUSH
6766: CALL_OW 49
// multi_commanders := Replace ( multi_commanders , i , un ) ;
6770: LD_ADDR_EXP 31
6774: PUSH
6775: LD_EXP 31
6779: PPUSH
6780: LD_VAR 0 2
6784: PPUSH
6785: LD_VAR 0 6
6789: PPUSH
6790: CALL_OW 1
6794: ST_TO_ADDR
// end ; InitHc ;
6795: CALL_OW 19
// InitUc ;
6799: CALL_OW 18
// uc_side := i ;
6803: LD_ADDR_OWVAR 20
6807: PUSH
6808: LD_VAR 0 2
6812: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
6813: LD_ADDR_OWVAR 21
6817: PUSH
6818: LD_EXP 17
6822: PUSH
6823: LD_VAR 0 2
6827: ARRAY
6828: ST_TO_ADDR
// hc_gallery :=  ;
6829: LD_ADDR_OWVAR 33
6833: PUSH
6834: LD_STRING 
6836: ST_TO_ADDR
// hc_name :=  ;
6837: LD_ADDR_OWVAR 26
6841: PUSH
6842: LD_STRING 
6844: ST_TO_ADDR
// hc_importance := 0 ;
6845: LD_ADDR_OWVAR 32
6849: PUSH
6850: LD_INT 0
6852: ST_TO_ADDR
// cl := 1 ;
6853: LD_ADDR_VAR 0 5
6857: PUSH
6858: LD_INT 1
6860: ST_TO_ADDR
// for j := 2 to multi_pep_amount do
6861: LD_ADDR_VAR 0 3
6865: PUSH
6866: DOUBLE
6867: LD_INT 2
6869: DEC
6870: ST_TO_ADDR
6871: LD_EXP 27
6875: PUSH
6876: FOR_TO
6877: IFFALSE 7429
// begin if ( j - 1 ) mod ( ( multi_pep_amount - 1 ) / 4 ) = 0 then
6879: LD_VAR 0 3
6883: PUSH
6884: LD_INT 1
6886: MINUS
6887: PUSH
6888: LD_EXP 27
6892: PUSH
6893: LD_INT 1
6895: MINUS
6896: PUSH
6897: LD_INT 4
6899: DIVREAL
6900: MOD
6901: PUSH
6902: LD_INT 0
6904: EQUAL
6905: IFFALSE 6921
// cl := cl + 1 ;
6907: LD_ADDR_VAR 0 5
6911: PUSH
6912: LD_VAR 0 5
6916: PUSH
6917: LD_INT 1
6919: PLUS
6920: ST_TO_ADDR
// if cl > 4 then
6921: LD_VAR 0 5
6925: PUSH
6926: LD_INT 4
6928: GREATER
6929: IFFALSE 6939
// cl := 1 ;
6931: LD_ADDR_VAR 0 5
6935: PUSH
6936: LD_INT 1
6938: ST_TO_ADDR
// if multi_sides [ i ] = 2 and ( cl = 2 or ( cl = 4 and FilterAllUnits ( [ [ f_side , i ] , [ f_class , 4 ] ] ) > 1 ) ) then
6939: LD_EXP 15
6943: PUSH
6944: LD_VAR 0 2
6948: ARRAY
6949: PUSH
6950: LD_INT 2
6952: EQUAL
6953: PUSH
6954: LD_VAR 0 5
6958: PUSH
6959: LD_INT 2
6961: EQUAL
6962: PUSH
6963: LD_VAR 0 5
6967: PUSH
6968: LD_INT 4
6970: EQUAL
6971: PUSH
6972: LD_INT 22
6974: PUSH
6975: LD_VAR 0 2
6979: PUSH
6980: EMPTY
6981: LIST
6982: LIST
6983: PUSH
6984: LD_INT 25
6986: PUSH
6987: LD_INT 4
6989: PUSH
6990: EMPTY
6991: LIST
6992: LIST
6993: PUSH
6994: EMPTY
6995: LIST
6996: LIST
6997: PPUSH
6998: CALL_OW 69
7002: PUSH
7003: LD_INT 1
7005: GREATER
7006: AND
7007: OR
7008: AND
7009: IFFALSE 7028
// PrepareHuman ( false , 1 , multi_skill_level ) else
7011: LD_INT 0
7013: PPUSH
7014: LD_INT 1
7016: PPUSH
7017: LD_EXP 28
7021: PPUSH
7022: CALL_OW 380
7026: GO 7045
// PrepareHuman ( false , cl , multi_skill_level ) ;
7028: LD_INT 0
7030: PPUSH
7031: LD_VAR 0 5
7035: PPUSH
7036: LD_EXP 28
7040: PPUSH
7041: CALL_OW 380
// un := CreateHuman ;
7045: LD_ADDR_VAR 0 6
7049: PUSH
7050: CALL_OW 44
7054: ST_TO_ADDR
// if multi_pos_area then
7055: LD_EXP 20
7059: IFFALSE 7427
// begin if GetClass ( un ) = 3 and vehicles then
7061: LD_VAR 0 6
7065: PPUSH
7066: CALL_OW 257
7070: PUSH
7071: LD_INT 3
7073: EQUAL
7074: PUSH
7075: LD_VAR 0 8
7079: AND
7080: IFFALSE 7265
// begin PrepareVehicle ( vehicles [ 1 ] [ 1 ] , vehicles [ 1 ] [ 2 ] , vehicles [ 1 ] [ 3 ] , vehicles [ 1 ] [ 4 ] , [ 80 , 60 , 40 ] [ Difficulty ] ) ;
7082: LD_VAR 0 8
7086: PUSH
7087: LD_INT 1
7089: ARRAY
7090: PUSH
7091: LD_INT 1
7093: ARRAY
7094: PPUSH
7095: LD_VAR 0 8
7099: PUSH
7100: LD_INT 1
7102: ARRAY
7103: PUSH
7104: LD_INT 2
7106: ARRAY
7107: PPUSH
7108: LD_VAR 0 8
7112: PUSH
7113: LD_INT 1
7115: ARRAY
7116: PUSH
7117: LD_INT 3
7119: ARRAY
7120: PPUSH
7121: LD_VAR 0 8
7125: PUSH
7126: LD_INT 1
7128: ARRAY
7129: PUSH
7130: LD_INT 4
7132: ARRAY
7133: PPUSH
7134: LD_INT 80
7136: PUSH
7137: LD_INT 60
7139: PUSH
7140: LD_INT 40
7142: PUSH
7143: EMPTY
7144: LIST
7145: LIST
7146: LIST
7147: PUSH
7148: LD_OWVAR 67
7152: ARRAY
7153: PPUSH
7154: CALL 20219 0 5
// veh := CreateVehicle ;
7158: LD_ADDR_VAR 0 7
7162: PUSH
7163: CALL_OW 45
7167: ST_TO_ADDR
// PlaceUnitArea ( veh , multi_pos_area [ multi_sides [ i ] ] [ 2 ] , false ) ;
7168: LD_VAR 0 7
7172: PPUSH
7173: LD_EXP 20
7177: PUSH
7178: LD_EXP 15
7182: PUSH
7183: LD_VAR 0 2
7187: ARRAY
7188: ARRAY
7189: PUSH
7190: LD_INT 2
7192: ARRAY
7193: PPUSH
7194: LD_INT 0
7196: PPUSH
7197: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
7201: LD_VAR 0 6
7205: PPUSH
7206: LD_VAR 0 7
7210: PPUSH
7211: CALL_OW 52
// if GetWeapon ( veh ) = ru_cargo_bay then
7215: LD_VAR 0 7
7219: PPUSH
7220: CALL_OW 264
7224: PUSH
7225: LD_INT 51
7227: EQUAL
7228: IFFALSE 7245
// SetCargo ( veh , mat_oil , 60 ) ;
7230: LD_VAR 0 7
7234: PPUSH
7235: LD_INT 2
7237: PPUSH
7238: LD_INT 60
7240: PPUSH
7241: CALL_OW 290
// vehicles := Delete ( vehicles , 1 ) ;
7245: LD_ADDR_VAR 0 8
7249: PUSH
7250: LD_VAR 0 8
7254: PPUSH
7255: LD_INT 1
7257: PPUSH
7258: CALL_OW 3
7262: ST_TO_ADDR
// continue ;
7263: GO 6876
// end ; tmp := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ;
7265: LD_ADDR_VAR 0 9
7269: PUSH
7270: LD_INT 22
7272: PUSH
7273: LD_VAR 0 2
7277: PUSH
7278: EMPTY
7279: LIST
7280: LIST
7281: PUSH
7282: LD_INT 2
7284: PUSH
7285: LD_INT 30
7287: PUSH
7288: LD_INT 32
7290: PUSH
7291: EMPTY
7292: LIST
7293: LIST
7294: PUSH
7295: LD_INT 30
7297: PUSH
7298: LD_INT 31
7300: PUSH
7301: EMPTY
7302: LIST
7303: LIST
7304: PUSH
7305: EMPTY
7306: LIST
7307: LIST
7308: LIST
7309: PUSH
7310: LD_INT 58
7312: PUSH
7313: EMPTY
7314: LIST
7315: PUSH
7316: EMPTY
7317: LIST
7318: LIST
7319: LIST
7320: PPUSH
7321: CALL_OW 69
7325: ST_TO_ADDR
// if GetClass ( un ) = 1 and tmp then
7326: LD_VAR 0 6
7330: PPUSH
7331: CALL_OW 257
7335: PUSH
7336: LD_INT 1
7338: EQUAL
7339: PUSH
7340: LD_VAR 0 9
7344: AND
7345: IFFALSE 7394
// begin SetDir ( un , GetDir ( tmp [ 1 ] ) - 3 ) ;
7347: LD_VAR 0 6
7351: PPUSH
7352: LD_VAR 0 9
7356: PUSH
7357: LD_INT 1
7359: ARRAY
7360: PPUSH
7361: CALL_OW 254
7365: PUSH
7366: LD_INT 3
7368: MINUS
7369: PPUSH
7370: CALL_OW 233
// PlaceHumanInUnit ( un , tmp [ 1 ] ) ;
7374: LD_VAR 0 6
7378: PPUSH
7379: LD_VAR 0 9
7383: PUSH
7384: LD_INT 1
7386: ARRAY
7387: PPUSH
7388: CALL_OW 52
// continue ;
7392: GO 6876
// end ; PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
7394: LD_VAR 0 6
7398: PPUSH
7399: LD_EXP 20
7403: PUSH
7404: LD_EXP 15
7408: PUSH
7409: LD_VAR 0 2
7413: ARRAY
7414: ARRAY
7415: PUSH
7416: LD_INT 1
7418: ARRAY
7419: PPUSH
7420: LD_INT 0
7422: PPUSH
7423: CALL_OW 49
// end ; end ;
7427: GO 6876
7429: POP
7430: POP
// end ;
7431: GO 6010
7433: POP
7434: POP
// end ;
7435: LD_VAR 0 1
7439: RET
// export function Multiplayer_Start ( ) ; begin
7440: LD_INT 0
7442: PPUSH
// Multiplayer_PreparePlayers ( ) ;
7443: CALL 5985 0 0
// Multiplayer_InitPointSystem ( ) ;
7447: CALL 8158 0 0
// Multiplayer_RegisterCondition ( 20 ) ;
7451: LD_INT 20
7453: PPUSH
7454: CALL 8334 0 1
// Multiplayer_RegisterCondition ( 150 ) ;
7458: LD_INT 150
7460: PPUSH
7461: CALL 8334 0 1
// Multiplayer_RegisterCondition ( 5 ) ;
7465: LD_INT 5
7467: PPUSH
7468: CALL 8334 0 1
// Multiplayer_RegisterCondition ( - 60 ) ;
7472: LD_INT 60
7474: NEG
7475: PPUSH
7476: CALL 8334 0 1
// Multiplayer_RegisterCondition ( - 40 ) ;
7480: LD_INT 40
7482: NEG
7483: PPUSH
7484: CALL 8334 0 1
// Multiplayer_RegisterCondition ( 2 ) ;
7488: LD_INT 2
7490: PPUSH
7491: CALL 8334 0 1
// Multiplayer_RegisterCondition ( 110 ) ;
7495: LD_INT 110
7497: PPUSH
7498: CALL 8334 0 1
// Multiplayer_RegisterCondition ( 55 ) ;
7502: LD_INT 55
7504: PPUSH
7505: CALL 8334 0 1
// Multiplayer_RegisterCondition ( - 1000 ) ;
7509: LD_INT 1000
7511: NEG
7512: PPUSH
7513: CALL 8334 0 1
// if multi_sides [ your_side ] then
7517: LD_EXP 15
7521: PUSH
7522: LD_OWVAR 2
7526: ARRAY
7527: IFFALSE 7554
// CenterNowOnUnits ( FilterAllUnits ( [ f_side , your_side ] ) [ 1 ] ) ;
7529: LD_INT 22
7531: PUSH
7532: LD_OWVAR 2
7536: PUSH
7537: EMPTY
7538: LIST
7539: LIST
7540: PPUSH
7541: CALL_OW 69
7545: PUSH
7546: LD_INT 1
7548: ARRAY
7549: PPUSH
7550: CALL_OW 87
// end ;
7554: LD_VAR 0 1
7558: RET
// export function Multiplayer_End ( ) ; var i , j , points ; begin
7559: LD_INT 0
7561: PPUSH
7562: PPUSH
7563: PPUSH
7564: PPUSH
// repeat wait ( 0 0$1 ) ;
7565: LD_INT 35
7567: PPUSH
7568: CALL_OW 67
// points := 0 ;
7572: LD_ADDR_VAR 0 4
7576: PUSH
7577: LD_INT 0
7579: ST_TO_ADDR
// for i := 1 to 8 do
7580: LD_ADDR_VAR 0 2
7584: PUSH
7585: DOUBLE
7586: LD_INT 1
7588: DEC
7589: ST_TO_ADDR
7590: LD_INT 8
7592: PUSH
7593: FOR_TO
7594: IFFALSE 7620
// points := points + multi_points [ i ] ;
7596: LD_ADDR_VAR 0 4
7600: PUSH
7601: LD_VAR 0 4
7605: PUSH
7606: LD_EXP 36
7610: PUSH
7611: LD_VAR 0 2
7615: ARRAY
7616: PLUS
7617: ST_TO_ADDR
7618: GO 7593
7620: POP
7621: POP
// if not multi_custom_commanders then
7622: LD_EXP 24
7626: NOT
7627: IFFALSE 7740
// begin for i := 1 to 8 do
7629: LD_ADDR_VAR 0 2
7633: PUSH
7634: DOUBLE
7635: LD_INT 1
7637: DEC
7638: ST_TO_ADDR
7639: LD_INT 8
7641: PUSH
7642: FOR_TO
7643: IFFALSE 7714
// begin if FilterAllUnits ( [ f_side , i ] ) = 0 and not multi_loosers [ i ] then
7645: LD_INT 22
7647: PUSH
7648: LD_VAR 0 2
7652: PUSH
7653: EMPTY
7654: LIST
7655: LIST
7656: PPUSH
7657: CALL_OW 69
7661: PUSH
7662: LD_INT 0
7664: EQUAL
7665: PUSH
7666: LD_EXP 32
7670: PUSH
7671: LD_VAR 0 2
7675: ARRAY
7676: NOT
7677: AND
7678: IFFALSE 7712
// begin multi_loosers := Replace ( multi_loosers , i , 1 ) ;
7680: LD_ADDR_EXP 32
7684: PUSH
7685: LD_EXP 32
7689: PPUSH
7690: LD_VAR 0 2
7694: PPUSH
7695: LD_INT 1
7697: PPUSH
7698: CALL_OW 1
7702: ST_TO_ADDR
// Multiplayer_Reside ( i ) ;
7703: LD_VAR 0 2
7707: PPUSH
7708: CALL 8404 0 1
// end ; end ;
7712: GO 7642
7714: POP
7715: POP
// if Count ( multi_loosers ) = Count ( multi_sides ) then
7716: LD_EXP 32
7720: PPUSH
7721: CALL 17481 0 1
7725: PUSH
7726: LD_EXP 15
7730: PPUSH
7731: CALL 17481 0 1
7735: EQUAL
7736: IFFALSE 7740
// break ;
7738: GO 7781
// end ; if points >= multi_points_to_victory then
7740: LD_VAR 0 4
7744: PUSH
7745: LD_EXP 34
7749: GREATEREQUAL
7750: IFFALSE 7762
// begin winAllowed := true ;
7752: LD_ADDR_EXP 3
7756: PUSH
7757: LD_INT 1
7759: ST_TO_ADDR
// break ;
7760: GO 7781
// end ; until ( winAllowed and game ) or not multi_commanders ;
7762: LD_EXP 3
7766: PUSH
7767: LD_EXP 2
7771: AND
7772: PUSH
7773: LD_EXP 31
7777: NOT
7778: OR
7779: IFFALSE 7565
// game := false ;
7781: LD_ADDR_EXP 2
7785: PUSH
7786: LD_INT 0
7788: ST_TO_ADDR
// for i := 1 to 8 do
7789: LD_ADDR_VAR 0 2
7793: PUSH
7794: DOUBLE
7795: LD_INT 1
7797: DEC
7798: ST_TO_ADDR
7799: LD_INT 8
7801: PUSH
7802: FOR_TO
7803: IFFALSE 7839
// begin if multi_sides [ i ] then
7805: LD_EXP 15
7809: PUSH
7810: LD_VAR 0 2
7814: ARRAY
7815: IFFALSE 7837
// SetMultiScore ( i , multi_points [ i ] ) ;
7817: LD_VAR 0 2
7821: PPUSH
7822: LD_EXP 36
7826: PUSH
7827: LD_VAR 0 2
7831: ARRAY
7832: PPUSH
7833: CALL_OW 506
// end ;
7837: GO 7802
7839: POP
7840: POP
// if multi_loosers [ your_side ] then
7841: LD_EXP 32
7845: PUSH
7846: LD_OWVAR 2
7850: ARRAY
7851: IFFALSE 7874
// begin if Multiplayer then
7853: LD_OWVAR 4
7857: IFFALSE 7865
// YouLostInMultiplayer else
7859: CALL_OW 107
7863: GO 7872
// YouLost (  ) ;
7865: LD_STRING 
7867: PPUSH
7868: CALL_OW 104
// end else
7872: GO 7890
// begin if Multiplayer then
7874: LD_OWVAR 4
7878: IFFALSE 7886
// YouWinInMultiplayer else
7880: CALL_OW 106
7884: GO 7890
// YouWin ;
7886: CALL_OW 103
// end ; end ;
7890: LD_VAR 0 1
7894: RET
// export function Multiplayer_EnemyAlive ( ) ; var side ; begin
7895: LD_INT 0
7897: PPUSH
7898: PPUSH
// result := false ;
7899: LD_ADDR_VAR 0 1
7903: PUSH
7904: LD_INT 0
7906: ST_TO_ADDR
// for side in botSides do
7907: LD_ADDR_VAR 0 2
7911: PUSH
7912: LD_EXP 4
7916: PUSH
7917: FOR_IN
7918: IFFALSE 7979
// begin result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] , [ f_ok ] ] ) > 0 ;
7920: LD_ADDR_VAR 0 1
7924: PUSH
7925: LD_INT 22
7927: PUSH
7928: LD_VAR 0 2
7932: PUSH
7933: EMPTY
7934: LIST
7935: LIST
7936: PUSH
7937: LD_INT 21
7939: PUSH
7940: LD_INT 1
7942: PUSH
7943: EMPTY
7944: LIST
7945: LIST
7946: PUSH
7947: LD_INT 50
7949: PUSH
7950: EMPTY
7951: LIST
7952: PUSH
7953: EMPTY
7954: LIST
7955: LIST
7956: LIST
7957: PPUSH
7958: CALL_OW 69
7962: PUSH
7963: LD_INT 0
7965: GREATER
7966: ST_TO_ADDR
// if result then
7967: LD_VAR 0 1
7971: IFFALSE 7977
// exit ;
7973: POP
7974: POP
7975: GO 7981
// end ;
7977: GO 7917
7979: POP
7980: POP
// end ;
7981: LD_VAR 0 1
7985: RET
// export function Multiplayer_DisplayStrings ( ) ; var i , points ; begin
7986: LD_INT 0
7988: PPUSH
7989: PPUSH
7990: PPUSH
// result := [ ] ;
7991: LD_ADDR_VAR 0 1
7995: PUSH
7996: EMPTY
7997: ST_TO_ADDR
// points := 0 ;
7998: LD_ADDR_VAR 0 3
8002: PUSH
8003: LD_INT 0
8005: ST_TO_ADDR
// for i := 1 to 8 do
8006: LD_ADDR_VAR 0 2
8010: PUSH
8011: DOUBLE
8012: LD_INT 1
8014: DEC
8015: ST_TO_ADDR
8016: LD_INT 8
8018: PUSH
8019: FOR_TO
8020: IFFALSE 8099
// begin points := points + multi_points [ i ] ;
8022: LD_ADDR_VAR 0 3
8026: PUSH
8027: LD_VAR 0 3
8031: PUSH
8032: LD_EXP 36
8036: PUSH
8037: LD_VAR 0 2
8041: ARRAY
8042: PLUS
8043: ST_TO_ADDR
// if multi_sides [ i ] then
8044: LD_EXP 15
8048: PUSH
8049: LD_VAR 0 2
8053: ARRAY
8054: IFFALSE 8097
// begin result := result ^ [ #coop-points , i , i , multi_points [ i ] ] ;
8056: LD_ADDR_VAR 0 1
8060: PUSH
8061: LD_VAR 0 1
8065: PUSH
8066: LD_STRING #coop-points
8068: PUSH
8069: LD_VAR 0 2
8073: PUSH
8074: LD_VAR 0 2
8078: PUSH
8079: LD_EXP 36
8083: PUSH
8084: LD_VAR 0 2
8088: ARRAY
8089: PUSH
8090: EMPTY
8091: LIST
8092: LIST
8093: LIST
8094: LIST
8095: ADD
8096: ST_TO_ADDR
// end ; end ;
8097: GO 8019
8099: POP
8100: POP
// result := result ^ [ #saved-convoys , savedConvoyUnits ] ;
8101: LD_ADDR_VAR 0 1
8105: PUSH
8106: LD_VAR 0 1
8110: PUSH
8111: LD_STRING #saved-convoys
8113: PUSH
8114: LD_EXP 5
8118: PUSH
8119: EMPTY
8120: LIST
8121: LIST
8122: ADD
8123: ST_TO_ADDR
// result := result ^ [ #points-to-win , points , multi_points_to_victory ] ;
8124: LD_ADDR_VAR 0 1
8128: PUSH
8129: LD_VAR 0 1
8133: PUSH
8134: LD_STRING #points-to-win
8136: PUSH
8137: LD_VAR 0 3
8141: PUSH
8142: LD_EXP 34
8146: PUSH
8147: EMPTY
8148: LIST
8149: LIST
8150: LIST
8151: ADD
8152: ST_TO_ADDR
// end ;
8153: LD_VAR 0 1
8157: RET
// export multi_points , multi_points_conditions ; export function Multiplayer_InitPointSystem ( ) ; var i ; begin
8158: LD_INT 0
8160: PPUSH
8161: PPUSH
// multi_points := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
8162: LD_ADDR_EXP 36
8166: PUSH
8167: LD_INT 0
8169: PUSH
8170: LD_INT 0
8172: PUSH
8173: LD_INT 0
8175: PUSH
8176: LD_INT 0
8178: PUSH
8179: LD_INT 0
8181: PUSH
8182: LD_INT 0
8184: PUSH
8185: LD_INT 0
8187: PUSH
8188: LD_INT 0
8190: PUSH
8191: EMPTY
8192: LIST
8193: LIST
8194: LIST
8195: LIST
8196: LIST
8197: LIST
8198: LIST
8199: LIST
8200: ST_TO_ADDR
// multi_points_conditions := [ ] ;
8201: LD_ADDR_EXP 37
8205: PUSH
8206: EMPTY
8207: ST_TO_ADDR
// end ;
8208: LD_VAR 0 1
8212: RET
// export function Multiplayer_AddPoints ( side , amount ) ; begin
8213: LD_INT 0
8215: PPUSH
// if not multi_points or not side or side > 8 then
8216: LD_EXP 36
8220: NOT
8221: PUSH
8222: LD_VAR 0 1
8226: NOT
8227: OR
8228: PUSH
8229: LD_VAR 0 1
8233: PUSH
8234: LD_INT 8
8236: GREATER
8237: OR
8238: IFFALSE 8242
// exit ;
8240: GO 8279
// multi_points := Replace ( multi_points , side , multi_points [ side ] + amount ) ;
8242: LD_ADDR_EXP 36
8246: PUSH
8247: LD_EXP 36
8251: PPUSH
8252: LD_VAR 0 1
8256: PPUSH
8257: LD_EXP 36
8261: PUSH
8262: LD_VAR 0 1
8266: ARRAY
8267: PUSH
8268: LD_VAR 0 2
8272: PLUS
8273: PPUSH
8274: CALL_OW 1
8278: ST_TO_ADDR
// end ;
8279: LD_VAR 0 3
8283: RET
// export function Multiplayer_GetPoints ( side ) ; begin
8284: LD_INT 0
8286: PPUSH
// if not multi_points or not side or side > 8 then
8287: LD_EXP 36
8291: NOT
8292: PUSH
8293: LD_VAR 0 1
8297: NOT
8298: OR
8299: PUSH
8300: LD_VAR 0 1
8304: PUSH
8305: LD_INT 8
8307: GREATER
8308: OR
8309: IFFALSE 8313
// exit ;
8311: GO 8329
// result := multi_points [ side ] ;
8313: LD_ADDR_VAR 0 2
8317: PUSH
8318: LD_EXP 36
8322: PUSH
8323: LD_VAR 0 1
8327: ARRAY
8328: ST_TO_ADDR
// end ;
8329: LD_VAR 0 2
8333: RET
// export function Multiplayer_RegisterCondition ( points ) ; begin
8334: LD_INT 0
8336: PPUSH
// multi_points_conditions := Replace ( multi_points_conditions , multi_points_conditions + 1 , points ) ;
8337: LD_ADDR_EXP 37
8341: PUSH
8342: LD_EXP 37
8346: PPUSH
8347: LD_EXP 37
8351: PUSH
8352: LD_INT 1
8354: PLUS
8355: PPUSH
8356: LD_VAR 0 1
8360: PPUSH
8361: CALL_OW 1
8365: ST_TO_ADDR
// end ;
8366: LD_VAR 0 2
8370: RET
// export function Multiplayer_GetCondition ( id ) ; begin
8371: LD_INT 0
8373: PPUSH
// if not id then
8374: LD_VAR 0 1
8378: NOT
8379: IFFALSE 8383
// exit ;
8381: GO 8399
// result := multi_points_conditions [ id ] ;
8383: LD_ADDR_VAR 0 2
8387: PUSH
8388: LD_EXP 37
8392: PUSH
8393: LD_VAR 0 1
8397: ARRAY
8398: ST_TO_ADDR
// end ;
8399: LD_VAR 0 2
8403: RET
// export function Multiplayer_Reside ( side ) ; var players , i , j , tmp ; begin
8404: LD_INT 0
8406: PPUSH
8407: PPUSH
8408: PPUSH
8409: PPUSH
8410: PPUSH
// players := [ ] ;
8411: LD_ADDR_VAR 0 3
8415: PUSH
8416: EMPTY
8417: ST_TO_ADDR
// for i = 1 to 8 do
8418: LD_ADDR_VAR 0 4
8422: PUSH
8423: DOUBLE
8424: LD_INT 1
8426: DEC
8427: ST_TO_ADDR
8428: LD_INT 8
8430: PUSH
8431: FOR_TO
8432: IFFALSE 8491
// begin if i = side then
8434: LD_VAR 0 4
8438: PUSH
8439: LD_VAR 0 1
8443: EQUAL
8444: IFFALSE 8448
// continue ;
8446: GO 8431
// if multi_sides [ i ] and not multi_loosers [ i ] then
8448: LD_EXP 15
8452: PUSH
8453: LD_VAR 0 4
8457: ARRAY
8458: PUSH
8459: LD_EXP 32
8463: PUSH
8464: LD_VAR 0 4
8468: ARRAY
8469: NOT
8470: AND
8471: IFFALSE 8489
// players := players ^ i ;
8473: LD_ADDR_VAR 0 3
8477: PUSH
8478: LD_VAR 0 3
8482: PUSH
8483: LD_VAR 0 4
8487: ADD
8488: ST_TO_ADDR
// end ;
8489: GO 8431
8491: POP
8492: POP
// if not players then
8493: LD_VAR 0 3
8497: NOT
8498: IFFALSE 8502
// exit ;
8500: GO 8769
// if players = 1 then
8502: LD_VAR 0 3
8506: PUSH
8507: LD_INT 1
8509: EQUAL
8510: IFFALSE 8571
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_alive ] ] ) do
8512: LD_ADDR_VAR 0 4
8516: PUSH
8517: LD_INT 22
8519: PUSH
8520: LD_VAR 0 1
8524: PUSH
8525: EMPTY
8526: LIST
8527: LIST
8528: PUSH
8529: LD_INT 51
8531: PUSH
8532: EMPTY
8533: LIST
8534: PUSH
8535: EMPTY
8536: LIST
8537: LIST
8538: PPUSH
8539: CALL_OW 69
8543: PUSH
8544: FOR_IN
8545: IFFALSE 8567
// SetSide ( i , players [ 1 ] ) ;
8547: LD_VAR 0 4
8551: PPUSH
8552: LD_VAR 0 3
8556: PUSH
8557: LD_INT 1
8559: ARRAY
8560: PPUSH
8561: CALL_OW 235
8565: GO 8544
8567: POP
8568: POP
// end else
8569: GO 8769
// begin j := 1 ;
8571: LD_ADDR_VAR 0 5
8575: PUSH
8576: LD_INT 1
8578: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ [ f_type , unit_human ] , [ f_alive ] ] , [ f_type , unit_vehicle ] ] ] ) do
8579: LD_ADDR_VAR 0 4
8583: PUSH
8584: LD_INT 22
8586: PUSH
8587: LD_VAR 0 1
8591: PUSH
8592: EMPTY
8593: LIST
8594: LIST
8595: PUSH
8596: LD_INT 2
8598: PUSH
8599: LD_INT 21
8601: PUSH
8602: LD_INT 1
8604: PUSH
8605: EMPTY
8606: LIST
8607: LIST
8608: PUSH
8609: LD_INT 51
8611: PUSH
8612: EMPTY
8613: LIST
8614: PUSH
8615: EMPTY
8616: LIST
8617: LIST
8618: PUSH
8619: LD_INT 21
8621: PUSH
8622: LD_INT 2
8624: PUSH
8625: EMPTY
8626: LIST
8627: LIST
8628: PUSH
8629: EMPTY
8630: LIST
8631: LIST
8632: LIST
8633: PUSH
8634: EMPTY
8635: LIST
8636: LIST
8637: PPUSH
8638: CALL_OW 69
8642: PUSH
8643: FOR_IN
8644: IFFALSE 8767
// begin SetSide ( i , players [ j ] ) ;
8646: LD_VAR 0 4
8650: PPUSH
8651: LD_VAR 0 3
8655: PUSH
8656: LD_VAR 0 5
8660: ARRAY
8661: PPUSH
8662: CALL_OW 235
// if IsDrivenBy ( i ) then
8666: LD_VAR 0 4
8670: PPUSH
8671: CALL_OW 311
8675: IFFALSE 8702
// SetSide ( IsDrivenBy ( i ) , players [ j ] ) ;
8677: LD_VAR 0 4
8681: PPUSH
8682: CALL_OW 311
8686: PPUSH
8687: LD_VAR 0 3
8691: PUSH
8692: LD_VAR 0 5
8696: ARRAY
8697: PPUSH
8698: CALL_OW 235
// if GetType ( IsInUnit ( i ) ) = unit_building then
8702: LD_VAR 0 4
8706: PPUSH
8707: CALL_OW 310
8711: PPUSH
8712: CALL_OW 247
8716: PUSH
8717: LD_INT 3
8719: EQUAL
8720: IFFALSE 8731
// ComExitBuilding ( i ) ;
8722: LD_VAR 0 4
8726: PPUSH
8727: CALL_OW 122
// j := j + 1 ;
8731: LD_ADDR_VAR 0 5
8735: PUSH
8736: LD_VAR 0 5
8740: PUSH
8741: LD_INT 1
8743: PLUS
8744: ST_TO_ADDR
// if j > players then
8745: LD_VAR 0 5
8749: PUSH
8750: LD_VAR 0 3
8754: GREATER
8755: IFFALSE 8765
// j := 1 ;
8757: LD_ADDR_VAR 0 5
8761: PUSH
8762: LD_INT 1
8764: ST_TO_ADDR
// end ;
8765: GO 8643
8767: POP
8768: POP
// end ; end ;
8769: LD_VAR 0 2
8773: RET
// export function MultiplayerEvent_Produced ( side ) ; begin
8774: LD_INT 0
8776: PPUSH
// if not side or side > 8 then
8777: LD_VAR 0 1
8781: NOT
8782: PUSH
8783: LD_VAR 0 1
8787: PUSH
8788: LD_INT 8
8790: GREATER
8791: OR
8792: IFFALSE 8796
// exit ;
8794: GO 8813
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 6 ) ) ;
8796: LD_VAR 0 1
8800: PPUSH
8801: LD_INT 6
8803: PPUSH
8804: CALL 8371 0 1
8808: PPUSH
8809: CALL 8213 0 2
// end ;
8813: LD_VAR 0 2
8817: RET
// export function MultiplayerEvent_HumanLost ( side ) ; begin
8818: LD_INT 0
8820: PPUSH
// if not side or side > 8 then
8821: LD_VAR 0 1
8825: NOT
8826: PUSH
8827: LD_VAR 0 1
8831: PUSH
8832: LD_INT 8
8834: GREATER
8835: OR
8836: IFFALSE 8840
// exit ;
8838: GO 8857
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 4 ) ) ;
8840: LD_VAR 0 1
8844: PPUSH
8845: LD_INT 4
8847: PPUSH
8848: CALL 8371 0 1
8852: PPUSH
8853: CALL 8213 0 2
// end ;
8857: LD_VAR 0 2
8861: RET
// export function MultiplayerEvent_VehicleLost ( side ) ; begin
8862: LD_INT 0
8864: PPUSH
// if not side or side > 8 then
8865: LD_VAR 0 1
8869: NOT
8870: PUSH
8871: LD_VAR 0 1
8875: PUSH
8876: LD_INT 8
8878: GREATER
8879: OR
8880: IFFALSE 8884
// exit ;
8882: GO 8901
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 5 ) ) ;
8884: LD_VAR 0 1
8888: PPUSH
8889: LD_INT 5
8891: PPUSH
8892: CALL 8371 0 1
8896: PPUSH
8897: CALL 8213 0 2
// end ;
8901: LD_VAR 0 2
8905: RET
// export function MultiplayerEvent_BuildingCompleted ( side , btype ) ; begin
8906: LD_INT 0
8908: PPUSH
// if not side or side > 8 or not btype in [ b_workshop , b_lab , b_control_tower , b_depot ] then
8909: LD_VAR 0 1
8913: NOT
8914: PUSH
8915: LD_VAR 0 1
8919: PUSH
8920: LD_INT 8
8922: GREATER
8923: OR
8924: PUSH
8925: LD_VAR 0 2
8929: PUSH
8930: LD_INT 2
8932: PUSH
8933: LD_INT 6
8935: PUSH
8936: LD_INT 36
8938: PUSH
8939: LD_INT 0
8941: PUSH
8942: EMPTY
8943: LIST
8944: LIST
8945: LIST
8946: LIST
8947: IN
8948: NOT
8949: OR
8950: IFFALSE 8954
// exit ;
8952: GO 8971
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 3 ) ) ;
8954: LD_VAR 0 1
8958: PPUSH
8959: LD_INT 3
8961: PPUSH
8962: CALL 8371 0 1
8966: PPUSH
8967: CALL 8213 0 2
// end ;
8971: LD_VAR 0 3
8975: RET
// export function MultiplayerEvent_UnitKilled ( un , side , points ) ; var gained_points ; begin
8976: LD_INT 0
8978: PPUSH
8979: PPUSH
// if not un then
8980: LD_VAR 0 1
8984: NOT
8985: IFFALSE 8989
// exit ;
8987: GO 9035
// if not points then
8989: LD_VAR 0 3
8993: NOT
8994: IFFALSE 9011
// gained_points := Multiplayer_GetCondition ( 1 ) else
8996: LD_ADDR_VAR 0 5
9000: PUSH
9001: LD_INT 1
9003: PPUSH
9004: CALL 8371 0 1
9008: ST_TO_ADDR
9009: GO 9021
// gained_points := points ;
9011: LD_ADDR_VAR 0 5
9015: PUSH
9016: LD_VAR 0 3
9020: ST_TO_ADDR
// Multiplayer_AddPoints ( side , gained_points ) ;
9021: LD_VAR 0 2
9025: PPUSH
9026: LD_VAR 0 5
9030: PPUSH
9031: CALL 8213 0 2
// end ; end_of_file
9035: LD_VAR 0 4
9039: RET
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do var side ;
9040: LD_INT 0
9042: PPUSH
// begin side := GetSide ( un ) ;
9043: LD_ADDR_VAR 0 4
9047: PUSH
9048: LD_VAR 0 1
9052: PPUSH
9053: CALL_OW 255
9057: ST_TO_ADDR
// if killerSide = enemySide then
9058: LD_VAR 0 2
9062: PUSH
9063: LD_EXP 12
9067: EQUAL
9068: IFFALSE 9072
// exit ;
9070: GO 9132
// if side = convoySide and multi_sides [ killerSide ] then
9072: LD_VAR 0 4
9076: PUSH
9077: LD_EXP 40
9081: EQUAL
9082: PUSH
9083: LD_EXP 15
9087: PUSH
9088: LD_VAR 0 2
9092: ARRAY
9093: AND
9094: IFFALSE 9115
// begin Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 9 ) ) ;
9096: LD_VAR 0 4
9100: PPUSH
9101: LD_INT 9
9103: PPUSH
9104: CALL 8371 0 1
9108: PPUSH
9109: CALL 8213 0 2
// exit ;
9113: GO 9132
// end ; MultiplayerEvent_UnitKilled ( un , killerSide , false ) ;
9115: LD_VAR 0 1
9119: PPUSH
9120: LD_VAR 0 2
9124: PPUSH
9125: LD_INT 0
9127: PPUSH
9128: CALL 8976 0 3
// end ;
9132: PPOPN 4
9134: END
// on UnitDestroyed ( un ) do var i , side , base , chassis , engine , control , weapon , tmp , factory , btype ;
9135: LD_INT 0
9137: PPUSH
9138: PPUSH
9139: PPUSH
9140: PPUSH
9141: PPUSH
9142: PPUSH
9143: PPUSH
9144: PPUSH
9145: PPUSH
9146: PPUSH
// begin SOS_UnitDestroyed ( un ) ;
9147: LD_VAR 0 1
9151: PPUSH
9152: CALL 58174 0 1
// side := GetSide ( un ) ;
9156: LD_ADDR_VAR 0 3
9160: PUSH
9161: LD_VAR 0 1
9165: PPUSH
9166: CALL_OW 255
9170: ST_TO_ADDR
// if multi_sides [ side ] or side = convoySide then
9171: LD_EXP 15
9175: PUSH
9176: LD_VAR 0 3
9180: ARRAY
9181: PUSH
9182: LD_VAR 0 3
9186: PUSH
9187: LD_EXP 40
9191: EQUAL
9192: OR
9193: IFFALSE 9271
// begin if un in convoys then
9195: LD_VAR 0 1
9199: PUSH
9200: LD_EXP 38
9204: IN
9205: IFFALSE 9223
// convoys := convoys diff un ;
9207: LD_ADDR_EXP 38
9211: PUSH
9212: LD_EXP 38
9216: PUSH
9217: LD_VAR 0 1
9221: DIFF
9222: ST_TO_ADDR
// if GetType ( un ) = unit_human then
9223: LD_VAR 0 1
9227: PPUSH
9228: CALL_OW 247
9232: PUSH
9233: LD_INT 1
9235: EQUAL
9236: IFFALSE 9247
// MultiplayerEvent_HumanLost ( side ) ;
9238: LD_VAR 0 3
9242: PPUSH
9243: CALL 8818 0 1
// if GetType ( un ) = unit_vehicle then
9247: LD_VAR 0 1
9251: PPUSH
9252: CALL_OW 247
9256: PUSH
9257: LD_INT 2
9259: EQUAL
9260: IFFALSE 9271
// MultiplayerEvent_VehicleLost ( side ) ;
9262: LD_VAR 0 3
9266: PPUSH
9267: CALL 8862 0 1
// end ; if un in enemyForestGuard then
9271: LD_VAR 0 1
9275: PUSH
9276: LD_EXP 11
9280: IN
9281: IFFALSE 9299
// enemyForestGuard := enemyForestGuard diff un ;
9283: LD_ADDR_EXP 11
9287: PUSH
9288: LD_EXP 11
9292: PUSH
9293: LD_VAR 0 1
9297: DIFF
9298: ST_TO_ADDR
// if un in enemyMobile then
9299: LD_VAR 0 1
9303: PUSH
9304: LD_EXP 10
9308: IN
9309: IFFALSE 9327
// enemyMobile := enemyMobile diff un ;
9311: LD_ADDR_EXP 10
9315: PUSH
9316: LD_EXP 10
9320: PUSH
9321: LD_VAR 0 1
9325: DIFF
9326: ST_TO_ADDR
// if un in enemyUnits then
9327: LD_VAR 0 1
9331: PUSH
9332: LD_EXP 9
9336: IN
9337: IFFALSE 9355
// enemyUnits := enemyUnits diff un ;
9339: LD_ADDR_EXP 9
9343: PUSH
9344: LD_EXP 9
9348: PUSH
9349: LD_VAR 0 1
9353: DIFF
9354: ST_TO_ADDR
// if un in arAttackersInf then
9355: LD_VAR 0 1
9359: PUSH
9360: LD_EXP 13
9364: IN
9365: IFFALSE 9383
// arAttackersInf := arAttackersInf diff un ;
9367: LD_ADDR_EXP 13
9371: PUSH
9372: LD_EXP 13
9376: PUSH
9377: LD_VAR 0 1
9381: DIFF
9382: ST_TO_ADDR
// if multi_commanders and multi_custom_commanders and not multi_loosers [ side ] then
9383: LD_EXP 31
9387: PUSH
9388: LD_EXP 24
9392: AND
9393: PUSH
9394: LD_EXP 32
9398: PUSH
9399: LD_VAR 0 3
9403: ARRAY
9404: NOT
9405: AND
9406: IFFALSE 9484
// if un in multi_commanders then
9408: LD_VAR 0 1
9412: PUSH
9413: LD_EXP 31
9417: IN
9418: IFFALSE 9484
// begin if side = your_side then
9420: LD_VAR 0 3
9424: PUSH
9425: LD_OWVAR 2
9429: EQUAL
9430: IFFALSE 9436
// Multiplayer_Loose_Message ;
9432: CALL_OW 521
// multi_loosers := Replace ( multi_loosers , side , 1 ) ;
9436: LD_ADDR_EXP 32
9440: PUSH
9441: LD_EXP 32
9445: PPUSH
9446: LD_VAR 0 3
9450: PPUSH
9451: LD_INT 1
9453: PPUSH
9454: CALL_OW 1
9458: ST_TO_ADDR
// multi_commanders := multi_commanders diff un ;
9459: LD_ADDR_EXP 31
9463: PUSH
9464: LD_EXP 31
9468: PUSH
9469: LD_VAR 0 1
9473: DIFF
9474: ST_TO_ADDR
// Multiplayer_Reside ( side ) ;
9475: LD_VAR 0 3
9479: PPUSH
9480: CALL 8404 0 1
// end ; end ;
9484: PPOPN 11
9486: END
// on BuildingComplete ( building ) do var i , j , side , btype ;
9487: LD_INT 0
9489: PPUSH
9490: PPUSH
9491: PPUSH
9492: PPUSH
// begin side := GetSide ( building ) ;
9493: LD_ADDR_VAR 0 4
9497: PUSH
9498: LD_VAR 0 1
9502: PPUSH
9503: CALL_OW 255
9507: ST_TO_ADDR
// if multi_sides [ side ] then
9508: LD_EXP 15
9512: PUSH
9513: LD_VAR 0 4
9517: ARRAY
9518: IFFALSE 9539
// MultiplayerEvent_BuildingCompleted ( side , GetBType ( building ) ) ;
9520: LD_VAR 0 4
9524: PPUSH
9525: LD_VAR 0 1
9529: PPUSH
9530: CALL_OW 266
9534: PPUSH
9535: CALL 8906 0 2
// end ;
9539: PPOPN 5
9541: END
// on VehicleConstructed ( vehicle , factory ) do var i , side , tmp , base , amount , driver ;
9542: LD_INT 0
9544: PPUSH
9545: PPUSH
9546: PPUSH
9547: PPUSH
9548: PPUSH
9549: PPUSH
// begin SOS_VehicleConstructed ( vehicle , factory ) ;
9550: LD_VAR 0 1
9554: PPUSH
9555: LD_VAR 0 2
9559: PPUSH
9560: CALL 58232 0 2
// side := GetSide ( vehicle ) ;
9564: LD_ADDR_VAR 0 4
9568: PUSH
9569: LD_VAR 0 1
9573: PPUSH
9574: CALL_OW 255
9578: ST_TO_ADDR
// if multi_sides [ side ] then
9579: LD_EXP 15
9583: PUSH
9584: LD_VAR 0 4
9588: ARRAY
9589: IFFALSE 9600
// MultiplayerEvent_Produced ( side ) ;
9591: LD_VAR 0 4
9595: PPUSH
9596: CALL 8774 0 1
// end ;
9600: PPOPN 8
9602: END
// on ResearchComplete ( tech , lab ) do var i , side ;
9603: LD_INT 0
9605: PPUSH
9606: PPUSH
// begin side := GetSide ( lab ) ;
9607: LD_ADDR_VAR 0 4
9611: PUSH
9612: LD_VAR 0 2
9616: PPUSH
9617: CALL_OW 255
9621: ST_TO_ADDR
// if multi_sides [ side ] then
9622: LD_EXP 15
9626: PUSH
9627: LD_VAR 0 4
9631: ARRAY
9632: IFFALSE 9695
// for i := 1 to 8 do
9634: LD_ADDR_VAR 0 3
9638: PUSH
9639: DOUBLE
9640: LD_INT 1
9642: DEC
9643: ST_TO_ADDR
9644: LD_INT 8
9646: PUSH
9647: FOR_TO
9648: IFFALSE 9693
// if multi_sides [ i ] and i <> side then
9650: LD_EXP 15
9654: PUSH
9655: LD_VAR 0 3
9659: ARRAY
9660: PUSH
9661: LD_VAR 0 3
9665: PUSH
9666: LD_VAR 0 4
9670: NONEQUAL
9671: AND
9672: IFFALSE 9691
// SetTech ( tech , i , state_researched ) ;
9674: LD_VAR 0 1
9678: PPUSH
9679: LD_VAR 0 3
9683: PPUSH
9684: LD_INT 2
9686: PPUSH
9687: CALL_OW 322
9691: GO 9647
9693: POP
9694: POP
// end ;
9695: PPOPN 4
9697: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if veh in enemyMobile then
9698: LD_VAR 0 2
9702: PUSH
9703: LD_EXP 10
9707: IN
9708: IFFALSE 9771
// begin repeat ComMoveXY ( driver , 163 , 31 ) ;
9710: LD_VAR 0 1
9714: PPUSH
9715: LD_INT 163
9717: PPUSH
9718: LD_INT 31
9720: PPUSH
9721: CALL_OW 111
// wait ( 0 0$1 ) ;
9725: LD_INT 35
9727: PPUSH
9728: CALL_OW 67
// if IsDead ( driver ) then
9732: LD_VAR 0 1
9736: PPUSH
9737: CALL_OW 301
9741: IFFALSE 9745
// exit ;
9743: GO 9771
// until IsAt ( driver , 163 , 31 ) ;
9745: LD_VAR 0 1
9749: PPUSH
9750: LD_INT 163
9752: PPUSH
9753: LD_INT 31
9755: PPUSH
9756: CALL_OW 307
9760: IFFALSE 9710
// RemoveUnit ( driver ) ;
9762: LD_VAR 0 1
9766: PPUSH
9767: CALL_OW 64
// end ; end ; end_of_file
9771: PPOPN 4
9773: END
// every 8 8$00 trigger not forestIsCleared do
9774: LD_EXP 7
9778: NOT
9779: IFFALSE 9788
9781: GO 9783
9783: DISABLE
// ClearRoadInForest ;
9784: CALL 2191 0 0
9788: END
// every 18 18$00 trigger not forestIsCleared do
9789: LD_EXP 7
9793: NOT
9794: IFFALSE 9803
9796: GO 9798
9798: DISABLE
// ClearRoadInForest ;
9799: CALL 2191 0 0
9803: END
// every 0 0$30 trigger convoyWave mod 4 = 0 and convoyWave >= 4 do
9804: LD_EXP 39
9808: PUSH
9809: LD_INT 4
9811: MOD
9812: PUSH
9813: LD_INT 0
9815: EQUAL
9816: PUSH
9817: LD_EXP 39
9821: PUSH
9822: LD_INT 4
9824: GREATEREQUAL
9825: AND
9826: IFFALSE 9855
9828: GO 9830
9830: DISABLE
// begin arAttackersInf := arAttackersInf union SendNorthGroup ;
9831: LD_ADDR_EXP 13
9835: PUSH
9836: LD_EXP 13
9840: PUSH
9841: CALL 3376 0 0
9845: UNION
9846: ST_TO_ADDR
// wait ( 5 5$00 ) ;
9847: LD_INT 10500
9849: PPUSH
9850: CALL_OW 67
// enable ;
9854: ENABLE
// end ;
9855: END
// every 0 0$30 trigger convoyWave mod 7 = 0 and convoyWave >= 7 do
9856: LD_EXP 39
9860: PUSH
9861: LD_INT 7
9863: MOD
9864: PUSH
9865: LD_INT 0
9867: EQUAL
9868: PUSH
9869: LD_EXP 39
9873: PUSH
9874: LD_INT 7
9876: GREATEREQUAL
9877: AND
9878: IFFALSE 9907
9880: GO 9882
9882: DISABLE
// begin arAttackersInf := arAttackersInf union SendEastGroup2 ;
9883: LD_ADDR_EXP 13
9887: PUSH
9888: LD_EXP 13
9892: PUSH
9893: CALL 3620 0 0
9897: UNION
9898: ST_TO_ADDR
// wait ( 5 5$00 ) ;
9899: LD_INT 10500
9901: PPUSH
9902: CALL_OW 67
// enable ;
9906: ENABLE
// end ;
9907: END
// every 0 0$30 trigger convoyWave in [ 8 , 12 , 16 , 20 , 22 , 24 , 26 , 28 , 30 , 32 , 36 , 38 ] do
9908: LD_EXP 39
9912: PUSH
9913: LD_INT 8
9915: PUSH
9916: LD_INT 12
9918: PUSH
9919: LD_INT 16
9921: PUSH
9922: LD_INT 20
9924: PUSH
9925: LD_INT 22
9927: PUSH
9928: LD_INT 24
9930: PUSH
9931: LD_INT 26
9933: PUSH
9934: LD_INT 28
9936: PUSH
9937: LD_INT 30
9939: PUSH
9940: LD_INT 32
9942: PUSH
9943: LD_INT 36
9945: PUSH
9946: LD_INT 38
9948: PUSH
9949: EMPTY
9950: LIST
9951: LIST
9952: LIST
9953: LIST
9954: LIST
9955: LIST
9956: LIST
9957: LIST
9958: LIST
9959: LIST
9960: LIST
9961: LIST
9962: IN
9963: IFFALSE 9992
9965: GO 9967
9967: DISABLE
// begin arAttackersInf := arAttackersInf union SendEastGroup ;
9968: LD_ADDR_EXP 13
9972: PUSH
9973: LD_EXP 13
9977: PUSH
9978: CALL 3171 0 0
9982: UNION
9983: ST_TO_ADDR
// wait ( 5 5$00 ) ;
9984: LD_INT 10500
9986: PPUSH
9987: CALL_OW 67
// enable ;
9991: ENABLE
// end ;
9992: END
// every 0 0$2 trigger convoyWave mod 5 = 4 and not FilterAllUnits ( [ [ f_side , enemySide ] , [ f_distxy , 30 , 48 , 20 ] ] ) do
9993: LD_EXP 39
9997: PUSH
9998: LD_INT 5
10000: MOD
10001: PUSH
10002: LD_INT 4
10004: EQUAL
10005: PUSH
10006: LD_INT 22
10008: PUSH
10009: LD_EXP 12
10013: PUSH
10014: EMPTY
10015: LIST
10016: LIST
10017: PUSH
10018: LD_INT 92
10020: PUSH
10021: LD_INT 30
10023: PUSH
10024: LD_INT 48
10026: PUSH
10027: LD_INT 20
10029: PUSH
10030: EMPTY
10031: LIST
10032: LIST
10033: LIST
10034: LIST
10035: PUSH
10036: EMPTY
10037: LIST
10038: LIST
10039: PPUSH
10040: CALL_OW 69
10044: NOT
10045: AND
10046: IFFALSE 10063
10048: GO 10050
10050: DISABLE
// begin SendWestGroup ;
10051: CALL 2541 0 0
// wait ( 6 6$00 ) ;
10055: LD_INT 12600
10057: PPUSH
10058: CALL_OW 67
// enable ;
10062: ENABLE
// end ;
10063: END
// every 2 2$30 + 2 2$00 trigger UnitFilter ( enemyMobile , [ f_ok ] ) < 5 do
10064: LD_EXP 10
10068: PPUSH
10069: LD_INT 50
10071: PUSH
10072: EMPTY
10073: LIST
10074: PPUSH
10075: CALL_OW 72
10079: PUSH
10080: LD_INT 5
10082: LESS
10083: IFFALSE 10117
10085: GO 10087
10087: DISABLE
// begin PrepareMobileGroup ;
10088: CALL 1580 0 0
// wait ( [ 3 3$30 , 3 3$00 , 2 2$30 ] [ Difficulty ] ) ;
10092: LD_INT 7350
10094: PUSH
10095: LD_INT 6300
10097: PUSH
10098: LD_INT 5250
10100: PUSH
10101: EMPTY
10102: LIST
10103: LIST
10104: LIST
10105: PUSH
10106: LD_OWVAR 67
10110: ARRAY
10111: PPUSH
10112: CALL_OW 67
// enable ;
10116: ENABLE
// end ;
10117: END
// every 0 0$30 trigger convoyWave mod 6 = 0 and convoyWave >= 6 and UnitFilter ( enemyMobile , [ f_ok ] ) < 10 do
10118: LD_EXP 39
10122: PUSH
10123: LD_INT 6
10125: MOD
10126: PUSH
10127: LD_INT 0
10129: EQUAL
10130: PUSH
10131: LD_EXP 39
10135: PUSH
10136: LD_INT 6
10138: GREATEREQUAL
10139: AND
10140: PUSH
10141: LD_EXP 10
10145: PPUSH
10146: LD_INT 50
10148: PUSH
10149: EMPTY
10150: LIST
10151: PPUSH
10152: CALL_OW 72
10156: PUSH
10157: LD_INT 10
10159: LESS
10160: AND
10161: IFFALSE 10195
10163: GO 10165
10165: DISABLE
// begin PrepareMobileGroup2 ;
10166: CALL 1908 0 0
// wait ( [ 4 4$30 , 4 4$00 , 3 3$30 ] [ Difficulty ] ) ;
10170: LD_INT 9450
10172: PUSH
10173: LD_INT 8400
10175: PUSH
10176: LD_INT 7350
10178: PUSH
10179: EMPTY
10180: LIST
10181: LIST
10182: LIST
10183: PUSH
10184: LD_OWVAR 67
10188: ARRAY
10189: PPUSH
10190: CALL_OW 67
// enable ;
10194: ENABLE
// end ;
10195: END
// every 7 7$00 + 4 4$00 trigger forestIsCleared do var i , tmp ;
10196: LD_EXP 7
10200: IFFALSE 10413
10202: GO 10204
10204: DISABLE
10205: LD_INT 0
10207: PPUSH
10208: PPUSH
// begin if tick > 50 50$00 then
10209: LD_OWVAR 1
10213: PUSH
10214: LD_INT 105000
10216: GREATER
10217: IFFALSE 10222
// begin disable ;
10219: DISABLE
// exit ;
10220: GO 10413
// end ; tmp := PrepareForestOnslaught ;
10222: LD_ADDR_VAR 0 2
10226: PUSH
10227: CALL 2843 0 0
10231: ST_TO_ADDR
// for i in tmp do
10232: LD_ADDR_VAR 0 1
10236: PUSH
10237: LD_VAR 0 2
10241: PUSH
10242: FOR_IN
10243: IFFALSE 10307
// begin AddComMoveXY ( i , 197 , 152 ) ;
10245: LD_VAR 0 1
10249: PPUSH
10250: LD_INT 197
10252: PPUSH
10253: LD_INT 152
10255: PPUSH
10256: CALL_OW 171
// AddComMoveXY ( i , 159 , 163 ) ;
10260: LD_VAR 0 1
10264: PPUSH
10265: LD_INT 159
10267: PPUSH
10268: LD_INT 163
10270: PPUSH
10271: CALL_OW 171
// AddComMoveXY ( i , 116 , 154 ) ;
10275: LD_VAR 0 1
10279: PPUSH
10280: LD_INT 116
10282: PPUSH
10283: LD_INT 154
10285: PPUSH
10286: CALL_OW 171
// AddComMoveXY ( i , 93 , 177 ) ;
10290: LD_VAR 0 1
10294: PPUSH
10295: LD_INT 93
10297: PPUSH
10298: LD_INT 177
10300: PPUSH
10301: CALL_OW 171
// end ;
10305: GO 10242
10307: POP
10308: POP
// repeat wait ( 0 0$1 ) ;
10309: LD_INT 35
10311: PPUSH
10312: CALL_OW 67
// for i in tmp do
10316: LD_ADDR_VAR 0 1
10320: PUSH
10321: LD_VAR 0 2
10325: PUSH
10326: FOR_IN
10327: IFFALSE 10388
// if not IsOk ( i ) then
10329: LD_VAR 0 1
10333: PPUSH
10334: CALL_OW 302
10338: NOT
10339: IFFALSE 10359
// tmp := tmp diff i else
10341: LD_ADDR_VAR 0 2
10345: PUSH
10346: LD_VAR 0 2
10350: PUSH
10351: LD_VAR 0 1
10355: DIFF
10356: ST_TO_ADDR
10357: GO 10386
// if not HasTask ( i ) then
10359: LD_VAR 0 1
10363: PPUSH
10364: CALL_OW 314
10368: NOT
10369: IFFALSE 10386
// ComMoveXY ( i , 93 , 177 ) ;
10371: LD_VAR 0 1
10375: PPUSH
10376: LD_INT 93
10378: PPUSH
10379: LD_INT 177
10381: PPUSH
10382: CALL_OW 111
10386: GO 10326
10388: POP
10389: POP
// until not tmp ;
10390: LD_VAR 0 2
10394: NOT
10395: IFFALSE 10309
// wait ( rand ( 0 0$30 , 5 5$30 ) ) ;
10397: LD_INT 1050
10399: PPUSH
10400: LD_INT 11550
10402: PPUSH
10403: CALL_OW 12
10407: PPUSH
10408: CALL_OW 67
// enable ;
10412: ENABLE
// end ;
10413: PPOPN 2
10415: END
// every 0 0$1 trigger enemyForestGuard do var i , tmp , enemyInForest , vehicle ;
10416: LD_EXP 11
10420: IFFALSE 10935
10422: GO 10424
10424: DISABLE
10425: LD_INT 0
10427: PPUSH
10428: PPUSH
10429: PPUSH
10430: PPUSH
// begin enable ;
10431: ENABLE
// tmp := UnitFilter ( enemyForestGuard , [ f_ok ] ) ;
10432: LD_ADDR_VAR 0 2
10436: PUSH
10437: LD_EXP 11
10441: PPUSH
10442: LD_INT 50
10444: PUSH
10445: EMPTY
10446: LIST
10447: PPUSH
10448: CALL_OW 72
10452: ST_TO_ADDR
// enemyInForest := FilterUnitsInArea ( arCampArea , [ f_not , [ f_side , enemySide ] ] ) ;
10453: LD_ADDR_VAR 0 3
10457: PUSH
10458: LD_INT 19
10460: PPUSH
10461: LD_INT 3
10463: PUSH
10464: LD_INT 22
10466: PUSH
10467: LD_EXP 12
10471: PUSH
10472: EMPTY
10473: LIST
10474: LIST
10475: PUSH
10476: EMPTY
10477: LIST
10478: LIST
10479: PPUSH
10480: CALL_OW 70
10484: ST_TO_ADDR
// if not tmp then
10485: LD_VAR 0 2
10489: NOT
10490: IFFALSE 10494
// exit ;
10492: GO 10935
// for i in tmp do
10494: LD_ADDR_VAR 0 1
10498: PUSH
10499: LD_VAR 0 2
10503: PUSH
10504: FOR_IN
10505: IFFALSE 10933
// begin if enemyInForest then
10507: LD_VAR 0 3
10511: IFFALSE 10601
// begin if GetClass ( i ) = 4 then
10513: LD_VAR 0 1
10517: PPUSH
10518: CALL_OW 257
10522: PUSH
10523: LD_INT 4
10525: EQUAL
10526: IFFALSE 10560
// ComMoveUnit ( i , NearestUnitToUnit ( tmp diff i , i ) ) else
10528: LD_VAR 0 1
10532: PPUSH
10533: LD_VAR 0 2
10537: PUSH
10538: LD_VAR 0 1
10542: DIFF
10543: PPUSH
10544: LD_VAR 0 1
10548: PPUSH
10549: CALL_OW 74
10553: PPUSH
10554: CALL_OW 112
10558: GO 10599
// if GetClass ( i ) <> 3 then
10560: LD_VAR 0 1
10564: PPUSH
10565: CALL_OW 257
10569: PUSH
10570: LD_INT 3
10572: NONEQUAL
10573: IFFALSE 10599
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInForest , i ) ) ;
10575: LD_VAR 0 1
10579: PPUSH
10580: LD_VAR 0 3
10584: PPUSH
10585: LD_VAR 0 1
10589: PPUSH
10590: CALL_OW 74
10594: PPUSH
10595: CALL_OW 115
// end else
10599: GO 10931
// if not IsInArea ( i , arForestArea ) then
10601: LD_VAR 0 1
10605: PPUSH
10606: LD_INT 21
10608: PPUSH
10609: CALL_OW 308
10613: NOT
10614: IFFALSE 10630
// ComMoveToArea ( i , arForestArea ) else
10616: LD_VAR 0 1
10620: PPUSH
10621: LD_INT 21
10623: PPUSH
10624: CALL_OW 113
10628: GO 10931
// if GetClass ( i ) = 3 then
10630: LD_VAR 0 1
10634: PPUSH
10635: CALL_OW 257
10639: PUSH
10640: LD_INT 3
10642: EQUAL
10643: IFFALSE 10931
// begin vehicle := IsInUnit ( i ) ;
10645: LD_ADDR_VAR 0 4
10649: PUSH
10650: LD_VAR 0 1
10654: PPUSH
10655: CALL_OW 310
10659: ST_TO_ADDR
// if vehicle then
10660: LD_VAR 0 4
10664: IFFALSE 10889
// begin if GetLives ( vehicle ) < 1000 and not HasTask ( i ) then
10666: LD_VAR 0 4
10670: PPUSH
10671: CALL_OW 256
10675: PUSH
10676: LD_INT 1000
10678: LESS
10679: PUSH
10680: LD_VAR 0 1
10684: PPUSH
10685: CALL_OW 314
10689: NOT
10690: AND
10691: IFFALSE 10887
// begin if not IsInArea ( vehicle , arParkingArea ) then
10693: LD_VAR 0 4
10697: PPUSH
10698: LD_INT 20
10700: PPUSH
10701: CALL_OW 308
10705: NOT
10706: IFFALSE 10722
// ComMoveToArea ( vehicle , arParkingArea ) else
10708: LD_VAR 0 4
10712: PPUSH
10713: LD_INT 20
10715: PPUSH
10716: CALL_OW 113
10720: GO 10887
// if not GetTag ( i ) then
10722: LD_VAR 0 1
10726: PPUSH
10727: CALL_OW 110
10731: NOT
10732: IFFALSE 10887
// begin SetTag ( i , tMech ) ;
10734: LD_VAR 0 1
10738: PPUSH
10739: LD_INT 7
10741: PPUSH
10742: CALL_OW 109
// ComExitVehicle ( i ) ;
10746: LD_VAR 0 1
10750: PPUSH
10751: CALL_OW 121
// AddComRepairVehicle ( i , vehicle ) ;
10755: LD_VAR 0 1
10759: PPUSH
10760: LD_VAR 0 4
10764: PPUSH
10765: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
10769: LD_INT 35
10771: PPUSH
10772: CALL_OW 67
// if FilterUnitsInArea ( arCampArea , [ f_not , [ f_side , enemySide ] ] ) then
10776: LD_INT 19
10778: PPUSH
10779: LD_INT 3
10781: PUSH
10782: LD_INT 22
10784: PUSH
10785: LD_EXP 12
10789: PUSH
10790: EMPTY
10791: LIST
10792: LIST
10793: PUSH
10794: EMPTY
10795: LIST
10796: LIST
10797: PPUSH
10798: CALL_OW 70
10802: IFFALSE 10834
// begin ComEnterUnit ( i , vehicle ) ;
10804: LD_VAR 0 1
10808: PPUSH
10809: LD_VAR 0 4
10813: PPUSH
10814: CALL_OW 120
// SetTag ( i , 0 ) ;
10818: LD_VAR 0 1
10822: PPUSH
10823: LD_INT 0
10825: PPUSH
10826: CALL_OW 109
// exit ;
10830: POP
10831: POP
10832: GO 10935
// end ; until GetLives ( vehicle ) = 1000 ;
10834: LD_VAR 0 4
10838: PPUSH
10839: CALL_OW 256
10843: PUSH
10844: LD_INT 1000
10846: EQUAL
10847: IFFALSE 10769
// SetLives ( i , 1000 ) ;
10849: LD_VAR 0 1
10853: PPUSH
10854: LD_INT 1000
10856: PPUSH
10857: CALL_OW 234
// ComEnterUnit ( i , vehicle ) ;
10861: LD_VAR 0 1
10865: PPUSH
10866: LD_VAR 0 4
10870: PPUSH
10871: CALL_OW 120
// SetTag ( i , 0 ) ;
10875: LD_VAR 0 1
10879: PPUSH
10880: LD_INT 0
10882: PPUSH
10883: CALL_OW 109
// end ; end ; end else
10887: GO 10931
// if not IsInArea ( i , arParkingArea ) and GetClass ( i ) <> 3 then
10889: LD_VAR 0 1
10893: PPUSH
10894: LD_INT 20
10896: PPUSH
10897: CALL_OW 308
10901: NOT
10902: PUSH
10903: LD_VAR 0 1
10907: PPUSH
10908: CALL_OW 257
10912: PUSH
10913: LD_INT 3
10915: NONEQUAL
10916: AND
10917: IFFALSE 10931
// ComMoveToArea ( i , arParkingArea ) ;
10919: LD_VAR 0 1
10923: PPUSH
10924: LD_INT 20
10926: PPUSH
10927: CALL_OW 113
// end ; end ;
10931: GO 10504
10933: POP
10934: POP
// end ;
10935: PPOPN 4
10937: END
// every 0 0$1 trigger enemyMobile do var i , mech , enemy ;
10938: LD_EXP 10
10942: IFFALSE 11475
10944: GO 10946
10946: DISABLE
10947: LD_INT 0
10949: PPUSH
10950: PPUSH
10951: PPUSH
// begin enable ;
10952: ENABLE
// if not enemyMobile then
10953: LD_EXP 10
10957: NOT
10958: IFFALSE 10962
// exit ;
10960: GO 11475
// for i in enemyMobile do
10962: LD_ADDR_VAR 0 1
10966: PUSH
10967: LD_EXP 10
10971: PUSH
10972: FOR_IN
10973: IFFALSE 11473
// begin if GetSide ( i ) <> enemySide then
10975: LD_VAR 0 1
10979: PPUSH
10980: CALL_OW 255
10984: PUSH
10985: LD_EXP 12
10989: NONEQUAL
10990: IFFALSE 11010
// begin enemyMobile := enemyMobile diff i ;
10992: LD_ADDR_EXP 10
10996: PUSH
10997: LD_EXP 10
11001: PUSH
11002: LD_VAR 0 1
11006: DIFF
11007: ST_TO_ADDR
// continue ;
11008: GO 10972
// end ; if GetTag ( i ) = 300 then
11010: LD_VAR 0 1
11014: PPUSH
11015: CALL_OW 110
11019: PUSH
11020: LD_INT 300
11022: EQUAL
11023: IFFALSE 11138
// begin if GetFuel ( i ) < 50 then
11025: LD_VAR 0 1
11029: PPUSH
11030: CALL_OW 261
11034: PUSH
11035: LD_INT 50
11037: LESS
11038: IFFALSE 11097
// begin ComMoveXY ( i , 170 , 50 ) ;
11040: LD_VAR 0 1
11044: PPUSH
11045: LD_INT 170
11047: PPUSH
11048: LD_INT 50
11050: PPUSH
11051: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
11055: LD_INT 35
11057: PPUSH
11058: CALL_OW 67
// until GetDistUnitXY ( i , 170 , 50 ) < 4 ;
11062: LD_VAR 0 1
11066: PPUSH
11067: LD_INT 170
11069: PPUSH
11070: LD_INT 50
11072: PPUSH
11073: CALL_OW 297
11077: PUSH
11078: LD_INT 4
11080: LESS
11081: IFFALSE 11055
// SetFuel ( i , 100 ) ;
11083: LD_VAR 0 1
11087: PPUSH
11088: LD_INT 100
11090: PPUSH
11091: CALL_OW 240
// end else
11095: GO 11138
// if not IsInArea ( i , arParkingArea ) then
11097: LD_VAR 0 1
11101: PPUSH
11102: LD_INT 20
11104: PPUSH
11105: CALL_OW 308
11109: NOT
11110: IFFALSE 11126
// ComMoveToArea ( i , arParkingArea ) else
11112: LD_VAR 0 1
11116: PPUSH
11117: LD_INT 20
11119: PPUSH
11120: CALL_OW 113
11124: GO 11138
// SetTag ( i , 301 ) ;
11126: LD_VAR 0 1
11130: PPUSH
11131: LD_INT 301
11133: PPUSH
11134: CALL_OW 109
// end ; if GetTag ( i ) = 301 then
11138: LD_VAR 0 1
11142: PPUSH
11143: CALL_OW 110
11147: PUSH
11148: LD_INT 301
11150: EQUAL
11151: IFFALSE 11293
// begin if GetLives ( i ) < 1000 then
11153: LD_VAR 0 1
11157: PPUSH
11158: CALL_OW 256
11162: PUSH
11163: LD_INT 1000
11165: LESS
11166: IFFALSE 11270
// begin if not IsDrivenBy ( i ) then
11168: LD_VAR 0 1
11172: PPUSH
11173: CALL_OW 311
11177: NOT
11178: IFFALSE 11182
// continue ;
11180: GO 10972
// mech := IsDrivenBy ( i ) ;
11182: LD_ADDR_VAR 0 2
11186: PUSH
11187: LD_VAR 0 1
11191: PPUSH
11192: CALL_OW 311
11196: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
11197: LD_VAR 0 2
11201: PPUSH
11202: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
11206: LD_VAR 0 2
11210: PPUSH
11211: LD_VAR 0 1
11215: PPUSH
11216: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
11220: LD_INT 35
11222: PPUSH
11223: CALL_OW 67
// until GetLives ( i ) = 1000 ;
11227: LD_VAR 0 1
11231: PPUSH
11232: CALL_OW 256
11236: PUSH
11237: LD_INT 1000
11239: EQUAL
11240: IFFALSE 11220
// SetLives ( mech , 1000 ) ;
11242: LD_VAR 0 2
11246: PPUSH
11247: LD_INT 1000
11249: PPUSH
11250: CALL_OW 234
// ComEnterUnit ( mech , i ) ;
11254: LD_VAR 0 2
11258: PPUSH
11259: LD_VAR 0 1
11263: PPUSH
11264: CALL_OW 120
// end else
11268: GO 11293
// if IsDrivenBy ( i ) then
11270: LD_VAR 0 1
11274: PPUSH
11275: CALL_OW 311
11279: IFFALSE 11293
// SetTag ( i , 0 ) ;
11281: LD_VAR 0 1
11285: PPUSH
11286: LD_INT 0
11288: PPUSH
11289: CALL_OW 109
// end ; if GetTag ( i ) < 300 then
11293: LD_VAR 0 1
11297: PPUSH
11298: CALL_OW 110
11302: PUSH
11303: LD_INT 300
11305: LESS
11306: IFFALSE 11471
// begin enemy := FilterUnitsInArea ( arCampArea , [ f_enemy , enemySide ] ) ;
11308: LD_ADDR_VAR 0 3
11312: PUSH
11313: LD_INT 19
11315: PPUSH
11316: LD_INT 81
11318: PUSH
11319: LD_EXP 12
11323: PUSH
11324: EMPTY
11325: LIST
11326: LIST
11327: PPUSH
11328: CALL_OW 70
11332: ST_TO_ADDR
// if GetLives ( i ) < 650 then
11333: LD_VAR 0 1
11337: PPUSH
11338: CALL_OW 256
11342: PUSH
11343: LD_INT 650
11345: LESS
11346: IFFALSE 11371
// begin ComStop ( i ) ;
11348: LD_VAR 0 1
11352: PPUSH
11353: CALL_OW 141
// SetTag ( i , 300 ) ;
11357: LD_VAR 0 1
11361: PPUSH
11362: LD_INT 300
11364: PPUSH
11365: CALL_OW 109
// continue ;
11369: GO 10972
// end ; if enemy then
11371: LD_VAR 0 3
11375: IFFALSE 11415
// begin if not HasTask ( i ) then
11377: LD_VAR 0 1
11381: PPUSH
11382: CALL_OW 314
11386: NOT
11387: IFFALSE 11413
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
11389: LD_VAR 0 1
11393: PPUSH
11394: LD_VAR 0 3
11398: PPUSH
11399: LD_VAR 0 1
11403: PPUSH
11404: CALL_OW 74
11408: PPUSH
11409: CALL_OW 115
// end else
11413: GO 11471
// if enemyMobile then
11415: LD_EXP 10
11419: IFFALSE 11471
// begin enemy := FilterAllUnits ( [ f_enemy , enemySide ] ) ;
11421: LD_ADDR_VAR 0 3
11425: PUSH
11426: LD_INT 81
11428: PUSH
11429: LD_EXP 12
11433: PUSH
11434: EMPTY
11435: LIST
11436: LIST
11437: PPUSH
11438: CALL_OW 69
11442: ST_TO_ADDR
// if enemy then
11443: LD_VAR 0 3
11447: IFFALSE 11471
// AgressiveMove ( i , [ [ 130 , 28 ] ] ) ;
11449: LD_VAR 0 1
11453: PPUSH
11454: LD_INT 130
11456: PUSH
11457: LD_INT 28
11459: PUSH
11460: EMPTY
11461: LIST
11462: LIST
11463: PUSH
11464: EMPTY
11465: LIST
11466: PPUSH
11467: CALL 55694 0 2
// end ; end ; end ;
11471: GO 10972
11473: POP
11474: POP
// end ;
11475: PPOPN 3
11477: END
// every 0 0$2 trigger arAttackersInf do var i , tmp , nearest , enemy , path ;
11478: LD_EXP 13
11482: IFFALSE 12005
11484: GO 11486
11486: DISABLE
11487: LD_INT 0
11489: PPUSH
11490: PPUSH
11491: PPUSH
11492: PPUSH
11493: PPUSH
// begin enable ;
11494: ENABLE
// tmp := UnitFilter ( arAttackersInf , [ f_ok ] ) ;
11495: LD_ADDR_VAR 0 2
11499: PUSH
11500: LD_EXP 13
11504: PPUSH
11505: LD_INT 50
11507: PUSH
11508: EMPTY
11509: LIST
11510: PPUSH
11511: CALL_OW 72
11515: ST_TO_ADDR
// arAttackersInf := [ ] ;
11516: LD_ADDR_EXP 13
11520: PUSH
11521: EMPTY
11522: ST_TO_ADDR
// for i in UnitFilter ( tmp , [ f_class , class_soldier ] ) do
11523: LD_ADDR_VAR 0 1
11527: PUSH
11528: LD_VAR 0 2
11532: PPUSH
11533: LD_INT 25
11535: PUSH
11536: LD_INT 1
11538: PUSH
11539: EMPTY
11540: LIST
11541: LIST
11542: PPUSH
11543: CALL_OW 72
11547: PUSH
11548: FOR_IN
11549: IFFALSE 11701
// begin if Prob ( 50 ) then
11551: LD_INT 50
11553: PPUSH
11554: CALL_OW 13
11558: IFFALSE 11574
// SetTag ( i , tMine ) else
11560: LD_VAR 0 1
11564: PPUSH
11565: LD_INT 6
11567: PPUSH
11568: CALL_OW 109
11572: GO 11576
// continue ;
11574: GO 11548
// nearest := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , enemySide ] , [ f_not , [ f_tag , tMined ] ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) , i ) ;
11576: LD_ADDR_VAR 0 3
11580: PUSH
11581: LD_INT 81
11583: PUSH
11584: LD_EXP 12
11588: PUSH
11589: EMPTY
11590: LIST
11591: LIST
11592: PUSH
11593: LD_INT 3
11595: PUSH
11596: LD_INT 120
11598: PUSH
11599: LD_INT 11
11601: PUSH
11602: EMPTY
11603: LIST
11604: LIST
11605: PUSH
11606: EMPTY
11607: LIST
11608: LIST
11609: PUSH
11610: LD_INT 2
11612: PUSH
11613: LD_INT 21
11615: PUSH
11616: LD_INT 2
11618: PUSH
11619: EMPTY
11620: LIST
11621: LIST
11622: PUSH
11623: LD_INT 21
11625: PUSH
11626: LD_INT 3
11628: PUSH
11629: EMPTY
11630: LIST
11631: LIST
11632: PUSH
11633: EMPTY
11634: LIST
11635: LIST
11636: LIST
11637: PUSH
11638: EMPTY
11639: LIST
11640: LIST
11641: LIST
11642: PPUSH
11643: CALL_OW 69
11647: PPUSH
11648: LD_VAR 0 1
11652: PPUSH
11653: CALL_OW 74
11657: ST_TO_ADDR
// if not nearest then
11658: LD_VAR 0 3
11662: NOT
11663: IFFALSE 11667
// break ;
11665: GO 11701
// SetTag ( nearest , tMined ) ;
11667: LD_VAR 0 3
11671: PPUSH
11672: LD_INT 11
11674: PPUSH
11675: CALL_OW 109
// AddComPlaceDelayedCharge ( i , 0 , 0 , nearest ) ;
11679: LD_VAR 0 1
11683: PPUSH
11684: LD_INT 0
11686: PPUSH
11687: LD_INT 0
11689: PPUSH
11690: LD_VAR 0 3
11694: PPUSH
11695: CALL_OW 192
// end ;
11699: GO 11548
11701: POP
11702: POP
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
11703: LD_ADDR_VAR 0 2
11707: PUSH
11708: LD_VAR 0 2
11712: PPUSH
11713: LD_INT 50
11715: PUSH
11716: EMPTY
11717: LIST
11718: PPUSH
11719: CALL_OW 72
11723: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
11724: LD_INT 70
11726: PPUSH
11727: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
11731: LD_ADDR_VAR 0 2
11735: PUSH
11736: LD_VAR 0 2
11740: PPUSH
11741: LD_INT 50
11743: PUSH
11744: EMPTY
11745: LIST
11746: PPUSH
11747: CALL_OW 72
11751: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_enemy , enemySide ] ) ;
11752: LD_ADDR_VAR 0 4
11756: PUSH
11757: LD_INT 81
11759: PUSH
11760: LD_EXP 12
11764: PUSH
11765: EMPTY
11766: LIST
11767: LIST
11768: PPUSH
11769: CALL_OW 69
11773: ST_TO_ADDR
// for i in tmp do
11774: LD_ADDR_VAR 0 1
11778: PUSH
11779: LD_VAR 0 2
11783: PUSH
11784: FOR_IN
11785: IFFALSE 11996
// if GetClass ( i ) <> 1 and GetTag ( i ) <> tMine then
11787: LD_VAR 0 1
11791: PPUSH
11792: CALL_OW 257
11796: PUSH
11797: LD_INT 1
11799: NONEQUAL
11800: PUSH
11801: LD_VAR 0 1
11805: PPUSH
11806: CALL_OW 110
11810: PUSH
11811: LD_INT 6
11813: NONEQUAL
11814: AND
11815: IFFALSE 11843
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
11817: LD_VAR 0 1
11821: PPUSH
11822: LD_VAR 0 4
11826: PPUSH
11827: LD_VAR 0 1
11831: PPUSH
11832: CALL_OW 74
11836: PPUSH
11837: CALL_OW 115
11841: GO 11994
// begin nearest := NearestUnitToUnit ( UnitFilter ( enemy , [ [ f_not , [ f_tag , tMined ] ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) , i ) ;
11843: LD_ADDR_VAR 0 3
11847: PUSH
11848: LD_VAR 0 4
11852: PPUSH
11853: LD_INT 3
11855: PUSH
11856: LD_INT 120
11858: PUSH
11859: LD_INT 11
11861: PUSH
11862: EMPTY
11863: LIST
11864: LIST
11865: PUSH
11866: EMPTY
11867: LIST
11868: LIST
11869: PUSH
11870: LD_INT 2
11872: PUSH
11873: LD_INT 21
11875: PUSH
11876: LD_INT 2
11878: PUSH
11879: EMPTY
11880: LIST
11881: LIST
11882: PUSH
11883: LD_INT 21
11885: PUSH
11886: LD_INT 3
11888: PUSH
11889: EMPTY
11890: LIST
11891: LIST
11892: PUSH
11893: EMPTY
11894: LIST
11895: LIST
11896: LIST
11897: PUSH
11898: EMPTY
11899: LIST
11900: LIST
11901: PPUSH
11902: CALL_OW 72
11906: PPUSH
11907: LD_VAR 0 1
11911: PPUSH
11912: CALL_OW 74
11916: ST_TO_ADDR
// if not nearest then
11917: LD_VAR 0 3
11921: NOT
11922: IFFALSE 11950
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
11924: LD_VAR 0 1
11928: PPUSH
11929: LD_VAR 0 4
11933: PPUSH
11934: LD_VAR 0 1
11938: PPUSH
11939: CALL_OW 74
11943: PPUSH
11944: CALL_OW 115
11948: GO 11994
// if not HasTask ( i ) then
11950: LD_VAR 0 1
11954: PPUSH
11955: CALL_OW 314
11959: NOT
11960: IFFALSE 11994
// begin SetTag ( nearest , tMined ) ;
11962: LD_VAR 0 3
11966: PPUSH
11967: LD_INT 11
11969: PPUSH
11970: CALL_OW 109
// ComPlaceDelayedCharge ( i , 0 , 0 , nearest ) ;
11974: LD_VAR 0 1
11978: PPUSH
11979: LD_INT 0
11981: PPUSH
11982: LD_INT 0
11984: PPUSH
11985: LD_VAR 0 3
11989: PPUSH
11990: CALL_OW 132
// end ; end ;
11994: GO 11784
11996: POP
11997: POP
// until not tmp ;
11998: LD_VAR 0 2
12002: NOT
12003: IFFALSE 11724
// end ;
12005: PPOPN 5
12007: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , enemySide ] , [ f_engine , engine_combustion ] ] ) do var i ;
12008: LD_INT 22
12010: PUSH
12011: LD_EXP 12
12015: PUSH
12016: EMPTY
12017: LIST
12018: LIST
12019: PUSH
12020: LD_INT 32
12022: PUSH
12023: LD_INT 1
12025: PUSH
12026: EMPTY
12027: LIST
12028: LIST
12029: PUSH
12030: EMPTY
12031: LIST
12032: LIST
12033: PPUSH
12034: CALL_OW 69
12038: IFFALSE 12117
12040: GO 12042
12042: DISABLE
12043: LD_INT 0
12045: PPUSH
// begin enable ;
12046: ENABLE
// for i in FilterAllUnits ( [ [ f_side , enemySide ] , [ f_engine , engine_combustion ] ] ) do
12047: LD_ADDR_VAR 0 1
12051: PUSH
12052: LD_INT 22
12054: PUSH
12055: LD_EXP 12
12059: PUSH
12060: EMPTY
12061: LIST
12062: LIST
12063: PUSH
12064: LD_INT 32
12066: PUSH
12067: LD_INT 1
12069: PUSH
12070: EMPTY
12071: LIST
12072: LIST
12073: PUSH
12074: EMPTY
12075: LIST
12076: LIST
12077: PPUSH
12078: CALL_OW 69
12082: PUSH
12083: FOR_IN
12084: IFFALSE 12115
// if GetFuel ( i ) < 3 then
12086: LD_VAR 0 1
12090: PPUSH
12091: CALL_OW 261
12095: PUSH
12096: LD_INT 3
12098: LESS
12099: IFFALSE 12113
// SetFuel ( i , 3 ) ;
12101: LD_VAR 0 1
12105: PPUSH
12106: LD_INT 3
12108: PPUSH
12109: CALL_OW 240
12113: GO 12083
12115: POP
12116: POP
// end ;
12117: PPOPN 1
12119: END
// every 0 0$2 trigger FilterUnitsInArea ( southEndArea , [ f_side , enemySide ] ) do var i ;
12120: LD_INT 9
12122: PPUSH
12123: LD_INT 22
12125: PUSH
12126: LD_EXP 12
12130: PUSH
12131: EMPTY
12132: LIST
12133: LIST
12134: PPUSH
12135: CALL_OW 70
12139: IFFALSE 12202
12141: GO 12143
12143: DISABLE
12144: LD_INT 0
12146: PPUSH
// begin enable ;
12147: ENABLE
// for i in FilterUnitsInArea ( southEndArea , [ f_side , enemySide ] ) do
12148: LD_ADDR_VAR 0 1
12152: PUSH
12153: LD_INT 9
12155: PPUSH
12156: LD_INT 22
12158: PUSH
12159: LD_EXP 12
12163: PUSH
12164: EMPTY
12165: LIST
12166: LIST
12167: PPUSH
12168: CALL_OW 70
12172: PUSH
12173: FOR_IN
12174: IFFALSE 12200
// begin Multiplayer_AddPoints ( convoySide , - 250 ) ;
12176: LD_EXP 40
12180: PPUSH
12181: LD_INT 250
12183: NEG
12184: PPUSH
12185: CALL 8213 0 2
// RemoveUnit ( i ) ;
12189: LD_VAR 0 1
12193: PPUSH
12194: CALL_OW 64
// end ;
12198: GO 12173
12200: POP
12201: POP
// end ; end_of_file
12202: PPOPN 1
12204: END
// export convoys , convoyWave , convoySide ; export function PrepareConvoys ( side ) ; var i ; begin
12205: LD_INT 0
12207: PPUSH
12208: PPUSH
// convoys := [ ] ;
12209: LD_ADDR_EXP 38
12213: PUSH
12214: EMPTY
12215: ST_TO_ADDR
// convoySide := side ;
12216: LD_ADDR_EXP 40
12220: PUSH
12221: LD_VAR 0 1
12225: ST_TO_ADDR
// convoyWave := 1 ;
12226: LD_ADDR_EXP 39
12230: PUSH
12231: LD_INT 1
12233: ST_TO_ADDR
// for i := 1 to 8 do
12234: LD_ADDR_VAR 0 3
12238: PUSH
12239: DOUBLE
12240: LD_INT 1
12242: DEC
12243: ST_TO_ADDR
12244: LD_INT 8
12246: PUSH
12247: FOR_TO
12248: IFFALSE 12278
// if multi_sides [ i ] then
12250: LD_EXP 15
12254: PUSH
12255: LD_VAR 0 3
12259: ARRAY
12260: IFFALSE 12276
// ChangeSideFog ( i , side ) ;
12262: LD_VAR 0 3
12266: PPUSH
12267: LD_VAR 0 1
12271: PPUSH
12272: CALL_OW 343
12276: GO 12247
12278: POP
12279: POP
// end ;
12280: LD_VAR 0 2
12284: RET
// every 2 2$00 + 1 1$00 trigger game do var i , tmp ;
12285: LD_EXP 2
12289: IFFALSE 12324
12291: GO 12293
12293: DISABLE
12294: LD_INT 0
12296: PPUSH
12297: PPUSH
// begin enable ;
12298: ENABLE
// blockThread := true ;
12299: LD_ADDR_EXP 6
12303: PUSH
12304: LD_INT 1
12306: ST_TO_ADDR
// SendConvoy ( convoyWave ) ;
12307: LD_EXP 39
12311: PPUSH
12312: CALL 12327 0 1
// blockThread := false ;
12316: LD_ADDR_EXP 6
12320: PUSH
12321: LD_INT 0
12323: ST_TO_ADDR
// end ;
12324: PPOPN 2
12326: END
// function SendConvoy ( wave ) ; var i , skill , un , veh , tmp , path ; begin
12327: LD_INT 0
12329: PPUSH
12330: PPUSH
12331: PPUSH
12332: PPUSH
12333: PPUSH
12334: PPUSH
12335: PPUSH
// convoyWave := Inc ( wave ) ;
12336: LD_ADDR_EXP 39
12340: PUSH
12341: LD_VAR 0 1
12345: PPUSH
12346: CALL 54451 0 1
12350: ST_TO_ADDR
// skill := [ 5 , 4 , 3 ] [ Difficulty ] ;
12351: LD_ADDR_VAR 0 4
12355: PUSH
12356: LD_INT 5
12358: PUSH
12359: LD_INT 4
12361: PUSH
12362: LD_INT 3
12364: PUSH
12365: EMPTY
12366: LIST
12367: LIST
12368: LIST
12369: PUSH
12370: LD_OWVAR 67
12374: ARRAY
12375: ST_TO_ADDR
// tmp := [ ] ;
12376: LD_ADDR_VAR 0 7
12380: PUSH
12381: EMPTY
12382: ST_TO_ADDR
// if wave mod 5 = 0 then
12383: LD_VAR 0 1
12387: PUSH
12388: LD_INT 5
12390: MOD
12391: PUSH
12392: LD_INT 0
12394: EQUAL
12395: IFFALSE 12641
// begin path := [ [ 16 , 21 ] , [ 36 , 45 ] , [ 48 , 58 ] , [ 59 , 88 ] , [ 76 , 106 ] , [ 93 , 150 ] , [ 92 , 177 ] ] ;
12397: LD_ADDR_VAR 0 8
12401: PUSH
12402: LD_INT 16
12404: PUSH
12405: LD_INT 21
12407: PUSH
12408: EMPTY
12409: LIST
12410: LIST
12411: PUSH
12412: LD_INT 36
12414: PUSH
12415: LD_INT 45
12417: PUSH
12418: EMPTY
12419: LIST
12420: LIST
12421: PUSH
12422: LD_INT 48
12424: PUSH
12425: LD_INT 58
12427: PUSH
12428: EMPTY
12429: LIST
12430: LIST
12431: PUSH
12432: LD_INT 59
12434: PUSH
12435: LD_INT 88
12437: PUSH
12438: EMPTY
12439: LIST
12440: LIST
12441: PUSH
12442: LD_INT 76
12444: PUSH
12445: LD_INT 106
12447: PUSH
12448: EMPTY
12449: LIST
12450: LIST
12451: PUSH
12452: LD_INT 93
12454: PUSH
12455: LD_INT 150
12457: PUSH
12458: EMPTY
12459: LIST
12460: LIST
12461: PUSH
12462: LD_INT 92
12464: PUSH
12465: LD_INT 177
12467: PUSH
12468: EMPTY
12469: LIST
12470: LIST
12471: PUSH
12472: EMPTY
12473: LIST
12474: LIST
12475: LIST
12476: LIST
12477: LIST
12478: LIST
12479: LIST
12480: ST_TO_ADDR
// for i := 1 to 4 do
12481: LD_ADDR_VAR 0 3
12485: PUSH
12486: DOUBLE
12487: LD_INT 1
12489: DEC
12490: ST_TO_ADDR
12491: LD_INT 4
12493: PUSH
12494: FOR_TO
12495: IFFALSE 12637
// begin uc_side := convoySide ;
12497: LD_ADDR_OWVAR 20
12501: PUSH
12502: LD_EXP 40
12506: ST_TO_ADDR
// uc_nation := nation_russian ;
12507: LD_ADDR_OWVAR 21
12511: PUSH
12512: LD_INT 3
12514: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , skill ) ;
12515: LD_INT 0
12517: PPUSH
12518: LD_INT 1
12520: PPUSH
12521: LD_INT 4
12523: PPUSH
12524: CALL_OW 12
12528: PPUSH
12529: LD_VAR 0 4
12533: PPUSH
12534: CALL_OW 380
// un := CreateHuman ;
12538: LD_ADDR_VAR 0 5
12542: PUSH
12543: CALL_OW 44
12547: ST_TO_ADDR
// SetDir ( un , 3 ) ;
12548: LD_VAR 0 5
12552: PPUSH
12553: LD_INT 3
12555: PPUSH
12556: CALL_OW 233
// PlaceUnitArea ( un , northForestSpawnArea , false ) ;
12560: LD_VAR 0 5
12564: PPUSH
12565: LD_INT 10
12567: PPUSH
12568: LD_INT 0
12570: PPUSH
12571: CALL_OW 49
// SetLives ( un , rand ( 400 , 1000 ) ) ;
12575: LD_VAR 0 5
12579: PPUSH
12580: LD_INT 400
12582: PPUSH
12583: LD_INT 1000
12585: PPUSH
12586: CALL_OW 12
12590: PPUSH
12591: CALL_OW 234
// convoys := Join ( convoys , un ) ;
12595: LD_ADDR_EXP 38
12599: PUSH
12600: LD_EXP 38
12604: PPUSH
12605: LD_VAR 0 5
12609: PPUSH
12610: CALL 53090 0 2
12614: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
12615: LD_ADDR_VAR 0 7
12619: PUSH
12620: LD_VAR 0 7
12624: PPUSH
12625: LD_VAR 0 5
12629: PPUSH
12630: CALL 53090 0 2
12634: ST_TO_ADDR
// end ;
12635: GO 12494
12637: POP
12638: POP
// end else
12639: GO 13822
// if wave mod 3 = 0 then
12641: LD_VAR 0 1
12645: PUSH
12646: LD_INT 3
12648: MOD
12649: PUSH
12650: LD_INT 0
12652: EQUAL
12653: IFFALSE 13143
// begin path := [ [ 133 , 15 ] , [ 125 , 34 ] , [ 109 , 55 ] , [ 99 , 64 ] , [ 133 , 102 ] , [ 143 , 136 ] , [ 127 , 154 ] , [ 92 , 152 ] , [ 93 , 177 ] ] ;
12655: LD_ADDR_VAR 0 8
12659: PUSH
12660: LD_INT 133
12662: PUSH
12663: LD_INT 15
12665: PUSH
12666: EMPTY
12667: LIST
12668: LIST
12669: PUSH
12670: LD_INT 125
12672: PUSH
12673: LD_INT 34
12675: PUSH
12676: EMPTY
12677: LIST
12678: LIST
12679: PUSH
12680: LD_INT 109
12682: PUSH
12683: LD_INT 55
12685: PUSH
12686: EMPTY
12687: LIST
12688: LIST
12689: PUSH
12690: LD_INT 99
12692: PUSH
12693: LD_INT 64
12695: PUSH
12696: EMPTY
12697: LIST
12698: LIST
12699: PUSH
12700: LD_INT 133
12702: PUSH
12703: LD_INT 102
12705: PUSH
12706: EMPTY
12707: LIST
12708: LIST
12709: PUSH
12710: LD_INT 143
12712: PUSH
12713: LD_INT 136
12715: PUSH
12716: EMPTY
12717: LIST
12718: LIST
12719: PUSH
12720: LD_INT 127
12722: PUSH
12723: LD_INT 154
12725: PUSH
12726: EMPTY
12727: LIST
12728: LIST
12729: PUSH
12730: LD_INT 92
12732: PUSH
12733: LD_INT 152
12735: PUSH
12736: EMPTY
12737: LIST
12738: LIST
12739: PUSH
12740: LD_INT 93
12742: PUSH
12743: LD_INT 177
12745: PUSH
12746: EMPTY
12747: LIST
12748: LIST
12749: PUSH
12750: EMPTY
12751: LIST
12752: LIST
12753: LIST
12754: LIST
12755: LIST
12756: LIST
12757: LIST
12758: LIST
12759: LIST
12760: ST_TO_ADDR
// for i := 1 to 4 do
12761: LD_ADDR_VAR 0 3
12765: PUSH
12766: DOUBLE
12767: LD_INT 1
12769: DEC
12770: ST_TO_ADDR
12771: LD_INT 4
12773: PUSH
12774: FOR_TO
12775: IFFALSE 13139
// begin uc_side := convoySide ;
12777: LD_ADDR_OWVAR 20
12781: PUSH
12782: LD_EXP 40
12786: ST_TO_ADDR
// uc_nation := nation_russian ;
12787: LD_ADDR_OWVAR 21
12791: PUSH
12792: LD_INT 3
12794: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , skill ) ;
12795: LD_INT 0
12797: PPUSH
12798: LD_INT 1
12800: PPUSH
12801: LD_INT 4
12803: PPUSH
12804: CALL_OW 12
12808: PPUSH
12809: LD_VAR 0 4
12813: PPUSH
12814: CALL_OW 380
// un := CreateHuman ;
12818: LD_ADDR_VAR 0 5
12822: PUSH
12823: CALL_OW 44
12827: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_wheeled , ru_medium_tracked ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_cargo_bay , ru_gun ] [ rand ( 1 , 4 ) ] , rand ( 60 , 90 ) ) ;
12828: LD_INT 21
12830: PUSH
12831: LD_INT 22
12833: PUSH
12834: EMPTY
12835: LIST
12836: LIST
12837: PUSH
12838: LD_INT 1
12840: PPUSH
12841: LD_INT 2
12843: PPUSH
12844: CALL_OW 12
12848: ARRAY
12849: PPUSH
12850: LD_INT 1
12852: PPUSH
12853: LD_INT 1
12855: PPUSH
12856: LD_INT 42
12858: PUSH
12859: LD_INT 43
12861: PUSH
12862: LD_INT 51
12864: PUSH
12865: LD_INT 44
12867: PUSH
12868: EMPTY
12869: LIST
12870: LIST
12871: LIST
12872: LIST
12873: PUSH
12874: LD_INT 1
12876: PPUSH
12877: LD_INT 4
12879: PPUSH
12880: CALL_OW 12
12884: ARRAY
12885: PPUSH
12886: LD_INT 60
12888: PPUSH
12889: LD_INT 90
12891: PPUSH
12892: CALL_OW 12
12896: PPUSH
12897: CALL 20219 0 5
// veh := CreateVehicle ;
12901: LD_ADDR_VAR 0 6
12905: PUSH
12906: CALL_OW 45
12910: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
12911: LD_VAR 0 6
12915: PPUSH
12916: LD_INT 3
12918: PPUSH
12919: CALL_OW 233
// SetLives ( veh , rand ( 400 , 1000 ) ) ;
12923: LD_VAR 0 6
12927: PPUSH
12928: LD_INT 400
12930: PPUSH
12931: LD_INT 1000
12933: PPUSH
12934: CALL_OW 12
12938: PPUSH
12939: CALL_OW 234
// if GetWeapon ( veh ) = ru_cargo_bay then
12943: LD_VAR 0 6
12947: PPUSH
12948: CALL_OW 264
12952: PUSH
12953: LD_INT 51
12955: EQUAL
12956: IFFALSE 13004
// SetCargo ( veh , [ mat_cans , mat_oil ] [ rand ( 1 , 2 ) ] , 10 * rand ( 1 , 10 ) ) ;
12958: LD_VAR 0 6
12962: PPUSH
12963: LD_INT 1
12965: PUSH
12966: LD_INT 2
12968: PUSH
12969: EMPTY
12970: LIST
12971: LIST
12972: PUSH
12973: LD_INT 1
12975: PPUSH
12976: LD_INT 2
12978: PPUSH
12979: CALL_OW 12
12983: ARRAY
12984: PPUSH
12985: LD_INT 10
12987: PUSH
12988: LD_INT 1
12990: PPUSH
12991: LD_INT 10
12993: PPUSH
12994: CALL_OW 12
12998: MUL
12999: PPUSH
13000: CALL_OW 290
// repeat wait ( 0 0$0.3 ) ;
13004: LD_INT 10
13006: PPUSH
13007: CALL_OW 67
// until PlaceUnitArea ( veh , northSpawnArea , false ) ;
13011: LD_VAR 0 6
13015: PPUSH
13016: LD_INT 7
13018: PPUSH
13019: LD_INT 0
13021: PPUSH
13022: CALL_OW 49
13026: IFFALSE 13004
// PlaceHumanInUnit ( un , veh ) ;
13028: LD_VAR 0 5
13032: PPUSH
13033: LD_VAR 0 6
13037: PPUSH
13038: CALL_OW 52
// convoys := Join ( convoys , un ) ;
13042: LD_ADDR_EXP 38
13046: PUSH
13047: LD_EXP 38
13051: PPUSH
13052: LD_VAR 0 5
13056: PPUSH
13057: CALL 53090 0 2
13061: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
13062: LD_ADDR_VAR 0 7
13066: PUSH
13067: LD_VAR 0 7
13071: PPUSH
13072: LD_VAR 0 5
13076: PPUSH
13077: CALL 53090 0 2
13081: ST_TO_ADDR
// convoys := Join ( convoys , veh ) ;
13082: LD_ADDR_EXP 38
13086: PUSH
13087: LD_EXP 38
13091: PPUSH
13092: LD_VAR 0 6
13096: PPUSH
13097: CALL 53090 0 2
13101: ST_TO_ADDR
// tmp := Join ( tmp , veh ) ;
13102: LD_ADDR_VAR 0 7
13106: PUSH
13107: LD_VAR 0 7
13111: PPUSH
13112: LD_VAR 0 6
13116: PPUSH
13117: CALL 53090 0 2
13121: ST_TO_ADDR
// ComMoveXY ( un , 133 , 15 ) ;
13122: LD_VAR 0 5
13126: PPUSH
13127: LD_INT 133
13129: PPUSH
13130: LD_INT 15
13132: PPUSH
13133: CALL_OW 111
// end ;
13137: GO 12774
13139: POP
13140: POP
// end else
13141: GO 13822
// begin path := [ [ 133 , 15 ] , [ 125 , 34 ] , [ 109 , 55 ] , [ 99 , 64 ] , [ 88 , 70 ] , [ 74 , 78 ] , [ 70 , 91 ] , [ 80 , 113 ] , [ 89 , 133 ] , [ 91 , 159 ] , [ 93 , 177 ] ] ;
13143: LD_ADDR_VAR 0 8
13147: PUSH
13148: LD_INT 133
13150: PUSH
13151: LD_INT 15
13153: PUSH
13154: EMPTY
13155: LIST
13156: LIST
13157: PUSH
13158: LD_INT 125
13160: PUSH
13161: LD_INT 34
13163: PUSH
13164: EMPTY
13165: LIST
13166: LIST
13167: PUSH
13168: LD_INT 109
13170: PUSH
13171: LD_INT 55
13173: PUSH
13174: EMPTY
13175: LIST
13176: LIST
13177: PUSH
13178: LD_INT 99
13180: PUSH
13181: LD_INT 64
13183: PUSH
13184: EMPTY
13185: LIST
13186: LIST
13187: PUSH
13188: LD_INT 88
13190: PUSH
13191: LD_INT 70
13193: PUSH
13194: EMPTY
13195: LIST
13196: LIST
13197: PUSH
13198: LD_INT 74
13200: PUSH
13201: LD_INT 78
13203: PUSH
13204: EMPTY
13205: LIST
13206: LIST
13207: PUSH
13208: LD_INT 70
13210: PUSH
13211: LD_INT 91
13213: PUSH
13214: EMPTY
13215: LIST
13216: LIST
13217: PUSH
13218: LD_INT 80
13220: PUSH
13221: LD_INT 113
13223: PUSH
13224: EMPTY
13225: LIST
13226: LIST
13227: PUSH
13228: LD_INT 89
13230: PUSH
13231: LD_INT 133
13233: PUSH
13234: EMPTY
13235: LIST
13236: LIST
13237: PUSH
13238: LD_INT 91
13240: PUSH
13241: LD_INT 159
13243: PUSH
13244: EMPTY
13245: LIST
13246: LIST
13247: PUSH
13248: LD_INT 93
13250: PUSH
13251: LD_INT 177
13253: PUSH
13254: EMPTY
13255: LIST
13256: LIST
13257: PUSH
13258: EMPTY
13259: LIST
13260: LIST
13261: LIST
13262: LIST
13263: LIST
13264: LIST
13265: LIST
13266: LIST
13267: LIST
13268: LIST
13269: LIST
13270: ST_TO_ADDR
// for i := 1 to 2 do
13271: LD_ADDR_VAR 0 3
13275: PUSH
13276: DOUBLE
13277: LD_INT 1
13279: DEC
13280: ST_TO_ADDR
13281: LD_INT 2
13283: PUSH
13284: FOR_TO
13285: IFFALSE 13630
// begin uc_side := convoySide ;
13287: LD_ADDR_OWVAR 20
13291: PUSH
13292: LD_EXP 40
13296: ST_TO_ADDR
// uc_nation := nation_russian ;
13297: LD_ADDR_OWVAR 21
13301: PUSH
13302: LD_INT 3
13304: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , skill ) ;
13305: LD_INT 0
13307: PPUSH
13308: LD_INT 1
13310: PPUSH
13311: LD_INT 4
13313: PPUSH
13314: CALL_OW 12
13318: PPUSH
13319: LD_VAR 0 4
13323: PPUSH
13324: CALL_OW 380
// un := CreateHuman ;
13328: LD_ADDR_VAR 0 5
13332: PUSH
13333: CALL_OW 44
13337: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_wheeled , ru_medium_tracked ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_cargo_bay , ru_gun ] [ rand ( 1 , 4 ) ] , rand ( 70 , 90 ) ) ;
13338: LD_INT 21
13340: PUSH
13341: LD_INT 22
13343: PUSH
13344: EMPTY
13345: LIST
13346: LIST
13347: PUSH
13348: LD_INT 1
13350: PPUSH
13351: LD_INT 2
13353: PPUSH
13354: CALL_OW 12
13358: ARRAY
13359: PPUSH
13360: LD_INT 1
13362: PPUSH
13363: LD_INT 1
13365: PPUSH
13366: LD_INT 42
13368: PUSH
13369: LD_INT 43
13371: PUSH
13372: LD_INT 51
13374: PUSH
13375: LD_INT 44
13377: PUSH
13378: EMPTY
13379: LIST
13380: LIST
13381: LIST
13382: LIST
13383: PUSH
13384: LD_INT 1
13386: PPUSH
13387: LD_INT 4
13389: PPUSH
13390: CALL_OW 12
13394: ARRAY
13395: PPUSH
13396: LD_INT 70
13398: PPUSH
13399: LD_INT 90
13401: PPUSH
13402: CALL_OW 12
13406: PPUSH
13407: CALL 20219 0 5
// veh := CreateVehicle ;
13411: LD_ADDR_VAR 0 6
13415: PUSH
13416: CALL_OW 45
13420: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
13421: LD_VAR 0 6
13425: PPUSH
13426: LD_INT 3
13428: PPUSH
13429: CALL_OW 233
// SetLives ( veh , rand ( 400 , 1000 ) ) ;
13433: LD_VAR 0 6
13437: PPUSH
13438: LD_INT 400
13440: PPUSH
13441: LD_INT 1000
13443: PPUSH
13444: CALL_OW 12
13448: PPUSH
13449: CALL_OW 234
// if GetWeapon ( veh ) = ru_cargo_bay then
13453: LD_VAR 0 6
13457: PPUSH
13458: CALL_OW 264
13462: PUSH
13463: LD_INT 51
13465: EQUAL
13466: IFFALSE 13495
// SetCargo ( veh , mat_cans , 10 * rand ( 1 , 10 ) ) ;
13468: LD_VAR 0 6
13472: PPUSH
13473: LD_INT 1
13475: PPUSH
13476: LD_INT 10
13478: PUSH
13479: LD_INT 1
13481: PPUSH
13482: LD_INT 10
13484: PPUSH
13485: CALL_OW 12
13489: MUL
13490: PPUSH
13491: CALL_OW 290
// repeat wait ( 0 0$0.3 ) ;
13495: LD_INT 10
13497: PPUSH
13498: CALL_OW 67
// until PlaceUnitArea ( veh , northSpawnArea , false ) ;
13502: LD_VAR 0 6
13506: PPUSH
13507: LD_INT 7
13509: PPUSH
13510: LD_INT 0
13512: PPUSH
13513: CALL_OW 49
13517: IFFALSE 13495
// PlaceHumanInUnit ( un , veh ) ;
13519: LD_VAR 0 5
13523: PPUSH
13524: LD_VAR 0 6
13528: PPUSH
13529: CALL_OW 52
// convoys := Join ( convoys , un ) ;
13533: LD_ADDR_EXP 38
13537: PUSH
13538: LD_EXP 38
13542: PPUSH
13543: LD_VAR 0 5
13547: PPUSH
13548: CALL 53090 0 2
13552: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
13553: LD_ADDR_VAR 0 7
13557: PUSH
13558: LD_VAR 0 7
13562: PPUSH
13563: LD_VAR 0 5
13567: PPUSH
13568: CALL 53090 0 2
13572: ST_TO_ADDR
// convoys := Join ( convoys , veh ) ;
13573: LD_ADDR_EXP 38
13577: PUSH
13578: LD_EXP 38
13582: PPUSH
13583: LD_VAR 0 6
13587: PPUSH
13588: CALL 53090 0 2
13592: ST_TO_ADDR
// tmp := Join ( tmp , veh ) ;
13593: LD_ADDR_VAR 0 7
13597: PUSH
13598: LD_VAR 0 7
13602: PPUSH
13603: LD_VAR 0 6
13607: PPUSH
13608: CALL 53090 0 2
13612: ST_TO_ADDR
// ComMoveXY ( un , 133 , 15 ) ;
13613: LD_VAR 0 5
13617: PPUSH
13618: LD_INT 133
13620: PPUSH
13621: LD_INT 15
13623: PPUSH
13624: CALL_OW 111
// end ;
13628: GO 13284
13630: POP
13631: POP
// for i := 1 to rand ( 3 , 5 ) do
13632: LD_ADDR_VAR 0 3
13636: PUSH
13637: DOUBLE
13638: LD_INT 1
13640: DEC
13641: ST_TO_ADDR
13642: LD_INT 3
13644: PPUSH
13645: LD_INT 5
13647: PPUSH
13648: CALL_OW 12
13652: PUSH
13653: FOR_TO
13654: IFFALSE 13820
// begin uc_side := convoySide ;
13656: LD_ADDR_OWVAR 20
13660: PUSH
13661: LD_EXP 40
13665: ST_TO_ADDR
// uc_nation := nation_russian ;
13666: LD_ADDR_OWVAR 21
13670: PUSH
13671: LD_INT 3
13673: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , skill ) ;
13674: LD_INT 0
13676: PPUSH
13677: LD_INT 1
13679: PPUSH
13680: LD_INT 4
13682: PPUSH
13683: CALL_OW 12
13687: PPUSH
13688: LD_VAR 0 4
13692: PPUSH
13693: CALL_OW 380
// un := CreateHuman ;
13697: LD_ADDR_VAR 0 5
13701: PUSH
13702: CALL_OW 44
13706: ST_TO_ADDR
// SetDir ( un , 3 ) ;
13707: LD_VAR 0 5
13711: PPUSH
13712: LD_INT 3
13714: PPUSH
13715: CALL_OW 233
// repeat wait ( 0 0$1 ) ;
13719: LD_INT 35
13721: PPUSH
13722: CALL_OW 67
// until PlaceUnitArea ( un , northSpawnArea , false ) ;
13726: LD_VAR 0 5
13730: PPUSH
13731: LD_INT 7
13733: PPUSH
13734: LD_INT 0
13736: PPUSH
13737: CALL_OW 49
13741: IFFALSE 13719
// SetLives ( un , rand ( 400 , 1000 ) ) ;
13743: LD_VAR 0 5
13747: PPUSH
13748: LD_INT 400
13750: PPUSH
13751: LD_INT 1000
13753: PPUSH
13754: CALL_OW 12
13758: PPUSH
13759: CALL_OW 234
// convoys := Join ( convoys , un ) ;
13763: LD_ADDR_EXP 38
13767: PUSH
13768: LD_EXP 38
13772: PPUSH
13773: LD_VAR 0 5
13777: PPUSH
13778: CALL 53090 0 2
13782: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
13783: LD_ADDR_VAR 0 7
13787: PUSH
13788: LD_VAR 0 7
13792: PPUSH
13793: LD_VAR 0 5
13797: PPUSH
13798: CALL 53090 0 2
13802: ST_TO_ADDR
// ComMoveXY ( un , 133 , 15 ) ;
13803: LD_VAR 0 5
13807: PPUSH
13808: LD_INT 133
13810: PPUSH
13811: LD_INT 15
13813: PPUSH
13814: CALL_OW 111
// end ;
13818: GO 13653
13820: POP
13821: POP
// end ; if not tmp then
13822: LD_VAR 0 7
13826: NOT
13827: IFFALSE 13831
// exit ;
13829: GO 14137
// repeat wait ( 0 0$1 ) ;
13831: LD_INT 35
13833: PPUSH
13834: CALL_OW 67
// for i in tmp do
13838: LD_ADDR_VAR 0 3
13842: PUSH
13843: LD_VAR 0 7
13847: PUSH
13848: FOR_IN
13849: IFFALSE 14128
// begin if IsDead ( i ) then
13851: LD_VAR 0 3
13855: PPUSH
13856: CALL_OW 301
13860: IFFALSE 13880
// tmp := tmp diff i else
13862: LD_ADDR_VAR 0 7
13866: PUSH
13867: LD_VAR 0 7
13871: PUSH
13872: LD_VAR 0 3
13876: DIFF
13877: ST_TO_ADDR
13878: GO 14126
// if IsInArea ( i , southEndArea ) then
13880: LD_VAR 0 3
13884: PPUSH
13885: LD_INT 9
13887: PPUSH
13888: CALL_OW 308
13892: IFFALSE 14045
// begin tmp := tmp diff i ;
13894: LD_ADDR_VAR 0 7
13898: PUSH
13899: LD_VAR 0 7
13903: PUSH
13904: LD_VAR 0 3
13908: DIFF
13909: ST_TO_ADDR
// convoys := convoys diff i ;
13910: LD_ADDR_EXP 38
13914: PUSH
13915: LD_EXP 38
13919: PUSH
13920: LD_VAR 0 3
13924: DIFF
13925: ST_TO_ADDR
// if GetType ( i ) = unit_human then
13926: LD_VAR 0 3
13930: PPUSH
13931: CALL_OW 247
13935: PUSH
13936: LD_INT 1
13938: EQUAL
13939: IFFALSE 13960
// Multiplayer_AddPoints ( convoySide , Multiplayer_GetCondition ( 7 ) ) else
13941: LD_EXP 40
13945: PPUSH
13946: LD_INT 7
13948: PPUSH
13949: CALL 8371 0 1
13953: PPUSH
13954: CALL 8213 0 2
13958: GO 14019
// begin tmp := tmp diff IsInUnit ( i ) ;
13960: LD_ADDR_VAR 0 7
13964: PUSH
13965: LD_VAR 0 7
13969: PUSH
13970: LD_VAR 0 3
13974: PPUSH
13975: CALL_OW 310
13979: DIFF
13980: ST_TO_ADDR
// convoys := convoys diff IsInUnit ( i ) ;
13981: LD_ADDR_EXP 38
13985: PUSH
13986: LD_EXP 38
13990: PUSH
13991: LD_VAR 0 3
13995: PPUSH
13996: CALL_OW 310
14000: DIFF
14001: ST_TO_ADDR
// Multiplayer_AddPoints ( convoySide , Multiplayer_GetCondition ( 8 ) ) ;
14002: LD_EXP 40
14006: PPUSH
14007: LD_INT 8
14009: PPUSH
14010: CALL 8371 0 1
14014: PPUSH
14015: CALL 8213 0 2
// end ; RemoveUnit ( i ) ;
14019: LD_VAR 0 3
14023: PPUSH
14024: CALL_OW 64
// savedConvoyUnits := Inc ( savedConvoyUnits ) ;
14028: LD_ADDR_EXP 5
14032: PUSH
14033: LD_EXP 5
14037: PPUSH
14038: CALL 54451 0 1
14042: ST_TO_ADDR
// end else
14043: GO 14126
// if GetType ( i ) = unit_vehicle and GetFuel ( i ) = 0 then
14045: LD_VAR 0 3
14049: PPUSH
14050: CALL_OW 247
14054: PUSH
14055: LD_INT 2
14057: EQUAL
14058: PUSH
14059: LD_VAR 0 3
14063: PPUSH
14064: CALL_OW 261
14068: PUSH
14069: LD_INT 0
14071: EQUAL
14072: AND
14073: IFFALSE 14109
// begin tmp := tmp diff i ;
14075: LD_ADDR_VAR 0 7
14079: PUSH
14080: LD_VAR 0 7
14084: PUSH
14085: LD_VAR 0 3
14089: DIFF
14090: ST_TO_ADDR
// convoys := convoys diff i ;
14091: LD_ADDR_EXP 38
14095: PUSH
14096: LD_EXP 38
14100: PUSH
14101: LD_VAR 0 3
14105: DIFF
14106: ST_TO_ADDR
// end else
14107: GO 14126
// MoveTo ( i , path , southEndArea ) ;
14109: LD_VAR 0 3
14113: PPUSH
14114: LD_VAR 0 8
14118: PPUSH
14119: LD_INT 9
14121: PPUSH
14122: CALL 14142 0 3
// end ;
14126: GO 13848
14128: POP
14129: POP
// until not tmp ;
14130: LD_VAR 0 7
14134: NOT
14135: IFFALSE 13831
// end ;
14137: LD_VAR 0 2
14141: RET
// function MoveTo ( unit , path , area ) ; var cr , tag , type , vehicle , ignoreCratesWeapon ; begin
14142: LD_INT 0
14144: PPUSH
14145: PPUSH
14146: PPUSH
14147: PPUSH
14148: PPUSH
14149: PPUSH
// if not unit then
14150: LD_VAR 0 1
14154: NOT
14155: IFFALSE 14159
// exit ;
14157: GO 14919
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser , ru_cargo_bay ] ;
14159: LD_ADDR_VAR 0 9
14163: PUSH
14164: LD_INT 29
14166: PUSH
14167: LD_INT 91
14169: PUSH
14170: LD_INT 49
14172: PUSH
14173: LD_INT 51
14175: PUSH
14176: EMPTY
14177: LIST
14178: LIST
14179: LIST
14180: LIST
14181: ST_TO_ADDR
// if IsOk ( unit ) then
14182: LD_VAR 0 1
14186: PPUSH
14187: CALL_OW 302
14191: IFFALSE 14919
// begin tag := GetTag ( unit ) + 1 ;
14193: LD_ADDR_VAR 0 6
14197: PUSH
14198: LD_VAR 0 1
14202: PPUSH
14203: CALL_OW 110
14207: PUSH
14208: LD_INT 1
14210: PLUS
14211: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( unit ) , GetY ( unit ) , 3 ) ;
14212: LD_ADDR_VAR 0 5
14216: PUSH
14217: LD_VAR 0 1
14221: PPUSH
14222: CALL_OW 250
14226: PPUSH
14227: LD_VAR 0 1
14231: PPUSH
14232: CALL_OW 251
14236: PPUSH
14237: LD_INT 3
14239: PPUSH
14240: CALL 55436 0 3
14244: ST_TO_ADDR
// type := GetType ( unit ) ;
14245: LD_ADDR_VAR 0 7
14249: PUSH
14250: LD_VAR 0 1
14254: PPUSH
14255: CALL_OW 247
14259: ST_TO_ADDR
// if type = unit_human then
14260: LD_VAR 0 7
14264: PUSH
14265: LD_INT 1
14267: EQUAL
14268: IFFALSE 14358
// begin vehicle := IsInUnit ( unit ) ;
14270: LD_ADDR_VAR 0 8
14274: PUSH
14275: LD_VAR 0 1
14279: PPUSH
14280: CALL_OW 310
14284: ST_TO_ADDR
// if vehicle and GetFuel ( vehicle ) = 0 then
14285: LD_VAR 0 8
14289: PUSH
14290: LD_VAR 0 8
14294: PPUSH
14295: CALL_OW 261
14299: PUSH
14300: LD_INT 0
14302: EQUAL
14303: AND
14304: IFFALSE 14356
// begin ComExitVehicle ( unit ) ;
14306: LD_VAR 0 1
14310: PPUSH
14311: CALL_OW 121
// AddComMoveXY ( unit , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) ;
14315: LD_VAR 0 1
14319: PPUSH
14320: LD_VAR 0 2
14324: PUSH
14325: LD_VAR 0 6
14329: ARRAY
14330: PUSH
14331: LD_INT 1
14333: ARRAY
14334: PPUSH
14335: LD_VAR 0 2
14339: PUSH
14340: LD_VAR 0 6
14344: ARRAY
14345: PUSH
14346: LD_INT 2
14348: ARRAY
14349: PPUSH
14350: CALL_OW 171
// exit ;
14354: GO 14919
// end ; end else
14356: GO 14433
// begin if GetFuel ( unit ) = 0 then
14358: LD_VAR 0 1
14362: PPUSH
14363: CALL_OW 261
14367: PUSH
14368: LD_INT 0
14370: EQUAL
14371: IFFALSE 14433
// begin ComExitVehicle ( IsDrivenBy ( unit ) ) ;
14373: LD_VAR 0 1
14377: PPUSH
14378: CALL_OW 311
14382: PPUSH
14383: CALL_OW 121
// AddComMoveXY ( IsDrivenBy ( unit ) , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) ;
14387: LD_VAR 0 1
14391: PPUSH
14392: CALL_OW 311
14396: PPUSH
14397: LD_VAR 0 2
14401: PUSH
14402: LD_VAR 0 6
14406: ARRAY
14407: PUSH
14408: LD_INT 1
14410: ARRAY
14411: PPUSH
14412: LD_VAR 0 2
14416: PUSH
14417: LD_VAR 0 6
14421: ARRAY
14422: PUSH
14423: LD_INT 2
14425: ARRAY
14426: PPUSH
14427: CALL_OW 171
// exit ;
14431: GO 14919
// end ; end ; if type = unit_vehicle and GetWeapon ( unit ) = ru_cargo_bay and IsInArea ( unit , cargoCheckpointArea ) and ( GetCargo ( unit , mat_cans ) or GetCargo ( unit , mat_oil ) ) then
14433: LD_VAR 0 7
14437: PUSH
14438: LD_INT 2
14440: EQUAL
14441: PUSH
14442: LD_VAR 0 1
14446: PPUSH
14447: CALL_OW 264
14451: PUSH
14452: LD_INT 51
14454: EQUAL
14455: AND
14456: PUSH
14457: LD_VAR 0 1
14461: PPUSH
14462: LD_INT 29
14464: PPUSH
14465: CALL_OW 308
14469: AND
14470: PUSH
14471: LD_VAR 0 1
14475: PPUSH
14476: LD_INT 1
14478: PPUSH
14479: CALL_OW 289
14483: PUSH
14484: LD_VAR 0 1
14488: PPUSH
14489: LD_INT 2
14491: PPUSH
14492: CALL_OW 289
14496: OR
14497: AND
14498: IFFALSE 14546
// begin goToUnload := Join ( goToUnload , unit ) ;
14500: LD_ADDR_EXP 8
14504: PUSH
14505: LD_EXP 8
14509: PPUSH
14510: LD_VAR 0 1
14514: PPUSH
14515: CALL 53090 0 2
14519: ST_TO_ADDR
// ComMoveXY ( unit , 113 , 117 ) ;
14520: LD_VAR 0 1
14524: PPUSH
14525: LD_INT 113
14527: PPUSH
14528: LD_INT 117
14530: PPUSH
14531: CALL_OW 111
// AddComUnload ( unit ) ;
14535: LD_VAR 0 1
14539: PPUSH
14540: CALL_OW 219
// exit ;
14544: GO 14919
// end ; if unit in goToUnload then
14546: LD_VAR 0 1
14550: PUSH
14551: LD_EXP 8
14555: IN
14556: IFFALSE 14632
// begin if GetCargo ( unit , mat_cans ) = 0 and GetCargo ( unit , mat_oil ) = 0 then
14558: LD_VAR 0 1
14562: PPUSH
14563: LD_INT 1
14565: PPUSH
14566: CALL_OW 289
14570: PUSH
14571: LD_INT 0
14573: EQUAL
14574: PUSH
14575: LD_VAR 0 1
14579: PPUSH
14580: LD_INT 2
14582: PPUSH
14583: CALL_OW 289
14587: PUSH
14588: LD_INT 0
14590: EQUAL
14591: AND
14592: IFFALSE 14630
// begin SetTag ( unit , tag + 2 ) ;
14594: LD_VAR 0 1
14598: PPUSH
14599: LD_VAR 0 6
14603: PUSH
14604: LD_INT 2
14606: PLUS
14607: PPUSH
14608: CALL_OW 109
// goToUnload := goToUnload diff unit ;
14612: LD_ADDR_EXP 8
14616: PUSH
14617: LD_EXP 8
14621: PUSH
14622: LD_VAR 0 1
14626: DIFF
14627: ST_TO_ADDR
// end else
14628: GO 14632
// exit ;
14630: GO 14919
// end ; if type = unit_vehicle and cr > 3 and not GetWeapon ( unit ) in ignoreCratesWeapon then
14632: LD_VAR 0 7
14636: PUSH
14637: LD_INT 2
14639: EQUAL
14640: PUSH
14641: LD_VAR 0 5
14645: PUSH
14646: LD_INT 3
14648: GREATER
14649: AND
14650: PUSH
14651: LD_VAR 0 1
14655: PPUSH
14656: CALL_OW 264
14660: PUSH
14661: LD_VAR 0 9
14665: IN
14666: NOT
14667: AND
14668: IFFALSE 14707
// ComAttackPlace ( unit , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
14670: LD_VAR 0 1
14674: PPUSH
14675: LD_VAR 0 5
14679: PUSH
14680: LD_INT 1
14682: ARRAY
14683: PUSH
14684: LD_INT 1
14686: ARRAY
14687: PPUSH
14688: LD_VAR 0 5
14692: PUSH
14693: LD_INT 1
14695: ARRAY
14696: PUSH
14697: LD_INT 2
14699: ARRAY
14700: PPUSH
14701: CALL_OW 116
14705: GO 14919
// if path > tag then
14707: LD_VAR 0 2
14711: PUSH
14712: LD_VAR 0 6
14716: GREATER
14717: IFFALSE 14888
// begin if GetDistUnitXY ( unit , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
14719: LD_VAR 0 1
14723: PPUSH
14724: LD_VAR 0 2
14728: PUSH
14729: LD_VAR 0 6
14733: ARRAY
14734: PUSH
14735: LD_INT 1
14737: ARRAY
14738: PPUSH
14739: LD_VAR 0 2
14743: PUSH
14744: LD_VAR 0 6
14748: ARRAY
14749: PUSH
14750: LD_INT 2
14752: ARRAY
14753: PPUSH
14754: CALL_OW 297
14758: PUSH
14759: LD_INT 6
14761: GREATER
14762: IFFALSE 14872
// if GetClass ( unit ) in [ 2 , 3 , 4 ] then
14764: LD_VAR 0 1
14768: PPUSH
14769: CALL_OW 257
14773: PUSH
14774: LD_INT 2
14776: PUSH
14777: LD_INT 3
14779: PUSH
14780: LD_INT 4
14782: PUSH
14783: EMPTY
14784: LIST
14785: LIST
14786: LIST
14787: IN
14788: IFFALSE 14831
// ComMoveXY ( unit , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
14790: LD_VAR 0 1
14794: PPUSH
14795: LD_VAR 0 2
14799: PUSH
14800: LD_VAR 0 6
14804: ARRAY
14805: PUSH
14806: LD_INT 1
14808: ARRAY
14809: PPUSH
14810: LD_VAR 0 2
14814: PUSH
14815: LD_VAR 0 6
14819: ARRAY
14820: PUSH
14821: LD_INT 2
14823: ARRAY
14824: PPUSH
14825: CALL_OW 111
14829: GO 14870
// ComAgressiveMove ( unit , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
14831: LD_VAR 0 1
14835: PPUSH
14836: LD_VAR 0 2
14840: PUSH
14841: LD_VAR 0 6
14845: ARRAY
14846: PUSH
14847: LD_INT 1
14849: ARRAY
14850: PPUSH
14851: LD_VAR 0 2
14855: PUSH
14856: LD_VAR 0 6
14860: ARRAY
14861: PUSH
14862: LD_INT 2
14864: ARRAY
14865: PPUSH
14866: CALL_OW 114
14870: GO 14886
// SetTag ( unit , tag ) ;
14872: LD_VAR 0 1
14876: PPUSH
14877: LD_VAR 0 6
14881: PPUSH
14882: CALL_OW 109
// end else
14886: GO 14919
// if not IsInArea ( unit , area ) then
14888: LD_VAR 0 1
14892: PPUSH
14893: LD_VAR 0 3
14897: PPUSH
14898: CALL_OW 308
14902: NOT
14903: IFFALSE 14919
// ComMoveToArea ( unit , area ) ;
14905: LD_VAR 0 1
14909: PPUSH
14910: LD_VAR 0 3
14914: PPUSH
14915: CALL_OW 113
// end ; end ; end_of_file
14919: LD_VAR 0 4
14923: RET
// every 0 0$20 trigger game do
14924: LD_EXP 2
14928: IFFALSE 14969
14930: GO 14932
14932: DISABLE
// SpawnCrates ( [ cratesWestArea , cratesEastArea , cratesMiddleArea ] , multi_crates_spawn [ 2 ] , multi_crates_spawn [ 1 ] ) ;
14933: LD_INT 11
14935: PUSH
14936: LD_INT 12
14938: PUSH
14939: LD_INT 13
14941: PUSH
14942: EMPTY
14943: LIST
14944: LIST
14945: LIST
14946: PPUSH
14947: LD_EXP 29
14951: PUSH
14952: LD_INT 2
14954: ARRAY
14955: PPUSH
14956: LD_EXP 29
14960: PUSH
14961: LD_INT 1
14963: ARRAY
14964: PPUSH
14965: CALL 14970 0 3
14969: END
// export function SpawnCrates ( areas , time , amount ) ; var i , x ; begin
14970: LD_INT 0
14972: PPUSH
14973: PPUSH
14974: PPUSH
// if not areas then
14975: LD_VAR 0 1
14979: NOT
14980: IFFALSE 14984
// exit ;
14982: GO 15190
// x := 5 ;
14984: LD_ADDR_VAR 0 6
14988: PUSH
14989: LD_INT 5
14991: ST_TO_ADDR
// repeat wait ( time ) ;
14992: LD_VAR 0 2
14996: PPUSH
14997: CALL_OW 67
// for i in areas do
15001: LD_ADDR_VAR 0 5
15005: PUSH
15006: LD_VAR 0 1
15010: PUSH
15011: FOR_IN
15012: IFFALSE 15101
// begin if GetResourceArea ( i , mat_cans ) < [ 15 , 12 , 10 ] [ Difficulty ] then
15014: LD_VAR 0 5
15018: PPUSH
15019: LD_INT 1
15021: PPUSH
15022: CALL_OW 287
15026: PUSH
15027: LD_INT 15
15029: PUSH
15030: LD_INT 12
15032: PUSH
15033: LD_INT 10
15035: PUSH
15036: EMPTY
15037: LIST
15038: LIST
15039: LIST
15040: PUSH
15041: LD_OWVAR 67
15045: ARRAY
15046: LESS
15047: IFFALSE 15099
// begin wait ( 0 0$10 * Difficulty ) ;
15049: LD_INT 350
15051: PUSH
15052: LD_OWVAR 67
15056: MUL
15057: PPUSH
15058: CALL_OW 67
// CreateCratesArea ( x , i , true ) ;
15062: LD_VAR 0 6
15066: PPUSH
15067: LD_VAR 0 5
15071: PPUSH
15072: LD_INT 1
15074: PPUSH
15075: CALL_OW 55
// amount := amount - ( x * 10 ) ;
15079: LD_ADDR_VAR 0 3
15083: PUSH
15084: LD_VAR 0 3
15088: PUSH
15089: LD_VAR 0 6
15093: PUSH
15094: LD_INT 10
15096: MUL
15097: MINUS
15098: ST_TO_ADDR
// end ; end ;
15099: GO 15011
15101: POP
15102: POP
// time := time + ( 0 0$5 * Difficulty ) ;
15103: LD_ADDR_VAR 0 2
15107: PUSH
15108: LD_VAR 0 2
15112: PUSH
15113: LD_INT 175
15115: PUSH
15116: LD_OWVAR 67
15120: MUL
15121: PLUS
15122: ST_TO_ADDR
// x := x - 1 ;
15123: LD_ADDR_VAR 0 6
15127: PUSH
15128: LD_VAR 0 6
15132: PUSH
15133: LD_INT 1
15135: MINUS
15136: ST_TO_ADDR
// if x = 0 then
15137: LD_VAR 0 6
15141: PUSH
15142: LD_INT 0
15144: EQUAL
15145: IFFALSE 15155
// x := 5 ;
15147: LD_ADDR_VAR 0 6
15151: PUSH
15152: LD_INT 5
15154: ST_TO_ADDR
// if time > 2 2$00 then
15155: LD_VAR 0 2
15159: PUSH
15160: LD_INT 4200
15162: GREATER
15163: IFFALSE 15173
// time := 0 0$40 ;
15165: LD_ADDR_VAR 0 2
15169: PUSH
15170: LD_INT 1400
15172: ST_TO_ADDR
// until not game or amount <= 0 ;
15173: LD_EXP 2
15177: NOT
15178: PUSH
15179: LD_VAR 0 3
15183: PUSH
15184: LD_INT 0
15186: LESSEQUAL
15187: OR
15188: IFFALSE 14992
// end ; end_of_file
15190: LD_VAR 0 4
15194: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
15195: LD_VAR 0 1
15199: PUSH
15200: LD_INT 200
15202: DOUBLE
15203: GREATEREQUAL
15204: IFFALSE 15212
15206: LD_INT 299
15208: DOUBLE
15209: LESSEQUAL
15210: IFTRUE 15214
15212: GO 15246
15214: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
15215: LD_VAR 0 1
15219: PPUSH
15220: LD_VAR 0 2
15224: PPUSH
15225: LD_VAR 0 3
15229: PPUSH
15230: LD_VAR 0 4
15234: PPUSH
15235: LD_VAR 0 5
15239: PPUSH
15240: CALL 58759 0 5
15244: GO 15323
15246: LD_INT 300
15248: DOUBLE
15249: GREATEREQUAL
15250: IFFALSE 15258
15252: LD_INT 399
15254: DOUBLE
15255: LESSEQUAL
15256: IFTRUE 15260
15258: GO 15322
15260: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
15261: LD_VAR 0 1
15265: PPUSH
15266: LD_VAR 0 2
15270: PPUSH
15271: LD_VAR 0 3
15275: PPUSH
15276: LD_VAR 0 4
15280: PPUSH
15281: LD_VAR 0 5
15285: PPUSH
15286: LD_VAR 0 6
15290: PPUSH
15291: LD_VAR 0 7
15295: PPUSH
15296: LD_VAR 0 8
15300: PPUSH
15301: LD_VAR 0 9
15305: PPUSH
15306: LD_VAR 0 10
15310: PPUSH
15311: LD_VAR 0 11
15315: PPUSH
15316: CALL 63506 0 11
15320: GO 15323
15322: POP
// end ;
15323: PPOPN 11
15325: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
15326: LD_VAR 0 1
15330: PPUSH
15331: LD_VAR 0 2
15335: PPUSH
15336: LD_VAR 0 3
15340: PPUSH
15341: LD_VAR 0 4
15345: PPUSH
15346: LD_VAR 0 5
15350: PPUSH
15351: CALL 58224 0 5
// end ; end_of_file
15355: PPOPN 5
15357: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
15358: LD_INT 0
15360: PPUSH
15361: PPUSH
// if exist_mode then
15362: LD_VAR 0 2
15366: IFFALSE 15412
// begin unit := CreateCharacter ( prefix & ident ) ;
15368: LD_ADDR_VAR 0 5
15372: PUSH
15373: LD_VAR 0 3
15377: PUSH
15378: LD_VAR 0 1
15382: STR
15383: PPUSH
15384: CALL_OW 34
15388: ST_TO_ADDR
// if unit then
15389: LD_VAR 0 5
15393: IFFALSE 15410
// DeleteCharacters ( prefix & ident ) ;
15395: LD_VAR 0 3
15399: PUSH
15400: LD_VAR 0 1
15404: STR
15405: PPUSH
15406: CALL_OW 40
// end else
15410: GO 15427
// unit := NewCharacter ( ident ) ;
15412: LD_ADDR_VAR 0 5
15416: PUSH
15417: LD_VAR 0 1
15421: PPUSH
15422: CALL_OW 25
15426: ST_TO_ADDR
// result := unit ;
15427: LD_ADDR_VAR 0 4
15431: PUSH
15432: LD_VAR 0 5
15436: ST_TO_ADDR
// end ;
15437: LD_VAR 0 4
15441: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
15442: LD_INT 0
15444: PPUSH
15445: PPUSH
// if not side or not nation then
15446: LD_VAR 0 1
15450: NOT
15451: PUSH
15452: LD_VAR 0 2
15456: NOT
15457: OR
15458: IFFALSE 15462
// exit ;
15460: GO 16230
// case nation of nation_american :
15462: LD_VAR 0 2
15466: PUSH
15467: LD_INT 1
15469: DOUBLE
15470: EQUAL
15471: IFTRUE 15475
15473: GO 15689
15475: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
15476: LD_ADDR_VAR 0 4
15480: PUSH
15481: LD_INT 35
15483: PUSH
15484: LD_INT 45
15486: PUSH
15487: LD_INT 46
15489: PUSH
15490: LD_INT 47
15492: PUSH
15493: LD_INT 82
15495: PUSH
15496: LD_INT 83
15498: PUSH
15499: LD_INT 84
15501: PUSH
15502: LD_INT 85
15504: PUSH
15505: LD_INT 86
15507: PUSH
15508: LD_INT 1
15510: PUSH
15511: LD_INT 2
15513: PUSH
15514: LD_INT 6
15516: PUSH
15517: LD_INT 15
15519: PUSH
15520: LD_INT 16
15522: PUSH
15523: LD_INT 7
15525: PUSH
15526: LD_INT 12
15528: PUSH
15529: LD_INT 13
15531: PUSH
15532: LD_INT 10
15534: PUSH
15535: LD_INT 14
15537: PUSH
15538: LD_INT 20
15540: PUSH
15541: LD_INT 21
15543: PUSH
15544: LD_INT 22
15546: PUSH
15547: LD_INT 25
15549: PUSH
15550: LD_INT 32
15552: PUSH
15553: LD_INT 27
15555: PUSH
15556: LD_INT 36
15558: PUSH
15559: LD_INT 69
15561: PUSH
15562: LD_INT 39
15564: PUSH
15565: LD_INT 34
15567: PUSH
15568: LD_INT 40
15570: PUSH
15571: LD_INT 48
15573: PUSH
15574: LD_INT 49
15576: PUSH
15577: LD_INT 50
15579: PUSH
15580: LD_INT 51
15582: PUSH
15583: LD_INT 52
15585: PUSH
15586: LD_INT 53
15588: PUSH
15589: LD_INT 54
15591: PUSH
15592: LD_INT 55
15594: PUSH
15595: LD_INT 56
15597: PUSH
15598: LD_INT 57
15600: PUSH
15601: LD_INT 58
15603: PUSH
15604: LD_INT 59
15606: PUSH
15607: LD_INT 60
15609: PUSH
15610: LD_INT 61
15612: PUSH
15613: LD_INT 62
15615: PUSH
15616: LD_INT 80
15618: PUSH
15619: LD_INT 82
15621: PUSH
15622: LD_INT 83
15624: PUSH
15625: LD_INT 84
15627: PUSH
15628: LD_INT 85
15630: PUSH
15631: LD_INT 86
15633: PUSH
15634: EMPTY
15635: LIST
15636: LIST
15637: LIST
15638: LIST
15639: LIST
15640: LIST
15641: LIST
15642: LIST
15643: LIST
15644: LIST
15645: LIST
15646: LIST
15647: LIST
15648: LIST
15649: LIST
15650: LIST
15651: LIST
15652: LIST
15653: LIST
15654: LIST
15655: LIST
15656: LIST
15657: LIST
15658: LIST
15659: LIST
15660: LIST
15661: LIST
15662: LIST
15663: LIST
15664: LIST
15665: LIST
15666: LIST
15667: LIST
15668: LIST
15669: LIST
15670: LIST
15671: LIST
15672: LIST
15673: LIST
15674: LIST
15675: LIST
15676: LIST
15677: LIST
15678: LIST
15679: LIST
15680: LIST
15681: LIST
15682: LIST
15683: LIST
15684: LIST
15685: LIST
15686: ST_TO_ADDR
15687: GO 16154
15689: LD_INT 2
15691: DOUBLE
15692: EQUAL
15693: IFTRUE 15697
15695: GO 15923
15697: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
15698: LD_ADDR_VAR 0 4
15702: PUSH
15703: LD_INT 35
15705: PUSH
15706: LD_INT 45
15708: PUSH
15709: LD_INT 46
15711: PUSH
15712: LD_INT 47
15714: PUSH
15715: LD_INT 82
15717: PUSH
15718: LD_INT 83
15720: PUSH
15721: LD_INT 84
15723: PUSH
15724: LD_INT 85
15726: PUSH
15727: LD_INT 87
15729: PUSH
15730: LD_INT 70
15732: PUSH
15733: LD_INT 1
15735: PUSH
15736: LD_INT 11
15738: PUSH
15739: LD_INT 3
15741: PUSH
15742: LD_INT 4
15744: PUSH
15745: LD_INT 5
15747: PUSH
15748: LD_INT 6
15750: PUSH
15751: LD_INT 15
15753: PUSH
15754: LD_INT 18
15756: PUSH
15757: LD_INT 7
15759: PUSH
15760: LD_INT 17
15762: PUSH
15763: LD_INT 8
15765: PUSH
15766: LD_INT 20
15768: PUSH
15769: LD_INT 21
15771: PUSH
15772: LD_INT 22
15774: PUSH
15775: LD_INT 72
15777: PUSH
15778: LD_INT 26
15780: PUSH
15781: LD_INT 69
15783: PUSH
15784: LD_INT 39
15786: PUSH
15787: LD_INT 40
15789: PUSH
15790: LD_INT 41
15792: PUSH
15793: LD_INT 42
15795: PUSH
15796: LD_INT 43
15798: PUSH
15799: LD_INT 48
15801: PUSH
15802: LD_INT 49
15804: PUSH
15805: LD_INT 50
15807: PUSH
15808: LD_INT 51
15810: PUSH
15811: LD_INT 52
15813: PUSH
15814: LD_INT 53
15816: PUSH
15817: LD_INT 54
15819: PUSH
15820: LD_INT 55
15822: PUSH
15823: LD_INT 56
15825: PUSH
15826: LD_INT 60
15828: PUSH
15829: LD_INT 61
15831: PUSH
15832: LD_INT 62
15834: PUSH
15835: LD_INT 66
15837: PUSH
15838: LD_INT 67
15840: PUSH
15841: LD_INT 68
15843: PUSH
15844: LD_INT 81
15846: PUSH
15847: LD_INT 82
15849: PUSH
15850: LD_INT 83
15852: PUSH
15853: LD_INT 84
15855: PUSH
15856: LD_INT 85
15858: PUSH
15859: LD_INT 87
15861: PUSH
15862: LD_INT 88
15864: PUSH
15865: EMPTY
15866: LIST
15867: LIST
15868: LIST
15869: LIST
15870: LIST
15871: LIST
15872: LIST
15873: LIST
15874: LIST
15875: LIST
15876: LIST
15877: LIST
15878: LIST
15879: LIST
15880: LIST
15881: LIST
15882: LIST
15883: LIST
15884: LIST
15885: LIST
15886: LIST
15887: LIST
15888: LIST
15889: LIST
15890: LIST
15891: LIST
15892: LIST
15893: LIST
15894: LIST
15895: LIST
15896: LIST
15897: LIST
15898: LIST
15899: LIST
15900: LIST
15901: LIST
15902: LIST
15903: LIST
15904: LIST
15905: LIST
15906: LIST
15907: LIST
15908: LIST
15909: LIST
15910: LIST
15911: LIST
15912: LIST
15913: LIST
15914: LIST
15915: LIST
15916: LIST
15917: LIST
15918: LIST
15919: LIST
15920: ST_TO_ADDR
15921: GO 16154
15923: LD_INT 3
15925: DOUBLE
15926: EQUAL
15927: IFTRUE 15931
15929: GO 16153
15931: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
15932: LD_ADDR_VAR 0 4
15936: PUSH
15937: LD_INT 46
15939: PUSH
15940: LD_INT 47
15942: PUSH
15943: LD_INT 1
15945: PUSH
15946: LD_INT 2
15948: PUSH
15949: LD_INT 82
15951: PUSH
15952: LD_INT 83
15954: PUSH
15955: LD_INT 84
15957: PUSH
15958: LD_INT 85
15960: PUSH
15961: LD_INT 86
15963: PUSH
15964: LD_INT 11
15966: PUSH
15967: LD_INT 9
15969: PUSH
15970: LD_INT 20
15972: PUSH
15973: LD_INT 19
15975: PUSH
15976: LD_INT 21
15978: PUSH
15979: LD_INT 24
15981: PUSH
15982: LD_INT 22
15984: PUSH
15985: LD_INT 25
15987: PUSH
15988: LD_INT 28
15990: PUSH
15991: LD_INT 29
15993: PUSH
15994: LD_INT 30
15996: PUSH
15997: LD_INT 31
15999: PUSH
16000: LD_INT 37
16002: PUSH
16003: LD_INT 38
16005: PUSH
16006: LD_INT 32
16008: PUSH
16009: LD_INT 27
16011: PUSH
16012: LD_INT 33
16014: PUSH
16015: LD_INT 69
16017: PUSH
16018: LD_INT 39
16020: PUSH
16021: LD_INT 34
16023: PUSH
16024: LD_INT 40
16026: PUSH
16027: LD_INT 71
16029: PUSH
16030: LD_INT 23
16032: PUSH
16033: LD_INT 44
16035: PUSH
16036: LD_INT 48
16038: PUSH
16039: LD_INT 49
16041: PUSH
16042: LD_INT 50
16044: PUSH
16045: LD_INT 51
16047: PUSH
16048: LD_INT 52
16050: PUSH
16051: LD_INT 53
16053: PUSH
16054: LD_INT 54
16056: PUSH
16057: LD_INT 55
16059: PUSH
16060: LD_INT 56
16062: PUSH
16063: LD_INT 57
16065: PUSH
16066: LD_INT 58
16068: PUSH
16069: LD_INT 59
16071: PUSH
16072: LD_INT 63
16074: PUSH
16075: LD_INT 64
16077: PUSH
16078: LD_INT 65
16080: PUSH
16081: LD_INT 82
16083: PUSH
16084: LD_INT 83
16086: PUSH
16087: LD_INT 84
16089: PUSH
16090: LD_INT 85
16092: PUSH
16093: LD_INT 86
16095: PUSH
16096: EMPTY
16097: LIST
16098: LIST
16099: LIST
16100: LIST
16101: LIST
16102: LIST
16103: LIST
16104: LIST
16105: LIST
16106: LIST
16107: LIST
16108: LIST
16109: LIST
16110: LIST
16111: LIST
16112: LIST
16113: LIST
16114: LIST
16115: LIST
16116: LIST
16117: LIST
16118: LIST
16119: LIST
16120: LIST
16121: LIST
16122: LIST
16123: LIST
16124: LIST
16125: LIST
16126: LIST
16127: LIST
16128: LIST
16129: LIST
16130: LIST
16131: LIST
16132: LIST
16133: LIST
16134: LIST
16135: LIST
16136: LIST
16137: LIST
16138: LIST
16139: LIST
16140: LIST
16141: LIST
16142: LIST
16143: LIST
16144: LIST
16145: LIST
16146: LIST
16147: LIST
16148: LIST
16149: LIST
16150: ST_TO_ADDR
16151: GO 16154
16153: POP
// if state > - 1 and state < 3 then
16154: LD_VAR 0 3
16158: PUSH
16159: LD_INT 1
16161: NEG
16162: GREATER
16163: PUSH
16164: LD_VAR 0 3
16168: PUSH
16169: LD_INT 3
16171: LESS
16172: AND
16173: IFFALSE 16230
// for i in result do
16175: LD_ADDR_VAR 0 5
16179: PUSH
16180: LD_VAR 0 4
16184: PUSH
16185: FOR_IN
16186: IFFALSE 16228
// if GetTech ( i , side ) <> state then
16188: LD_VAR 0 5
16192: PPUSH
16193: LD_VAR 0 1
16197: PPUSH
16198: CALL_OW 321
16202: PUSH
16203: LD_VAR 0 3
16207: NONEQUAL
16208: IFFALSE 16226
// result := result diff i ;
16210: LD_ADDR_VAR 0 4
16214: PUSH
16215: LD_VAR 0 4
16219: PUSH
16220: LD_VAR 0 5
16224: DIFF
16225: ST_TO_ADDR
16226: GO 16185
16228: POP
16229: POP
// end ;
16230: LD_VAR 0 4
16234: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
16235: LD_INT 0
16237: PPUSH
16238: PPUSH
16239: PPUSH
// result := true ;
16240: LD_ADDR_VAR 0 3
16244: PUSH
16245: LD_INT 1
16247: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
16248: LD_ADDR_VAR 0 5
16252: PUSH
16253: LD_VAR 0 2
16257: PPUSH
16258: CALL_OW 480
16262: ST_TO_ADDR
// if not tmp then
16263: LD_VAR 0 5
16267: NOT
16268: IFFALSE 16272
// exit ;
16270: GO 16321
// for i in tmp do
16272: LD_ADDR_VAR 0 4
16276: PUSH
16277: LD_VAR 0 5
16281: PUSH
16282: FOR_IN
16283: IFFALSE 16319
// if GetTech ( i , side ) <> state_researched then
16285: LD_VAR 0 4
16289: PPUSH
16290: LD_VAR 0 1
16294: PPUSH
16295: CALL_OW 321
16299: PUSH
16300: LD_INT 2
16302: NONEQUAL
16303: IFFALSE 16317
// begin result := false ;
16305: LD_ADDR_VAR 0 3
16309: PUSH
16310: LD_INT 0
16312: ST_TO_ADDR
// exit ;
16313: POP
16314: POP
16315: GO 16321
// end ;
16317: GO 16282
16319: POP
16320: POP
// end ;
16321: LD_VAR 0 3
16325: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
16326: LD_INT 0
16328: PPUSH
16329: PPUSH
16330: PPUSH
16331: PPUSH
16332: PPUSH
16333: PPUSH
16334: PPUSH
16335: PPUSH
16336: PPUSH
16337: PPUSH
16338: PPUSH
16339: PPUSH
16340: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
16341: LD_VAR 0 1
16345: NOT
16346: PUSH
16347: LD_VAR 0 1
16351: PPUSH
16352: CALL_OW 257
16356: PUSH
16357: LD_INT 9
16359: NONEQUAL
16360: OR
16361: IFFALSE 16365
// exit ;
16363: GO 16938
// side := GetSide ( unit ) ;
16365: LD_ADDR_VAR 0 9
16369: PUSH
16370: LD_VAR 0 1
16374: PPUSH
16375: CALL_OW 255
16379: ST_TO_ADDR
// tech_space := tech_spacanom ;
16380: LD_ADDR_VAR 0 12
16384: PUSH
16385: LD_INT 29
16387: ST_TO_ADDR
// tech_time := tech_taurad ;
16388: LD_ADDR_VAR 0 13
16392: PUSH
16393: LD_INT 28
16395: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
16396: LD_ADDR_VAR 0 11
16400: PUSH
16401: LD_VAR 0 1
16405: PPUSH
16406: CALL_OW 310
16410: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
16411: LD_VAR 0 11
16415: PPUSH
16416: CALL_OW 247
16420: PUSH
16421: LD_INT 2
16423: EQUAL
16424: IFFALSE 16428
// exit ;
16426: GO 16938
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16428: LD_ADDR_VAR 0 8
16432: PUSH
16433: LD_INT 81
16435: PUSH
16436: LD_VAR 0 9
16440: PUSH
16441: EMPTY
16442: LIST
16443: LIST
16444: PUSH
16445: LD_INT 3
16447: PUSH
16448: LD_INT 21
16450: PUSH
16451: LD_INT 3
16453: PUSH
16454: EMPTY
16455: LIST
16456: LIST
16457: PUSH
16458: EMPTY
16459: LIST
16460: LIST
16461: PUSH
16462: EMPTY
16463: LIST
16464: LIST
16465: PPUSH
16466: CALL_OW 69
16470: ST_TO_ADDR
// if not tmp then
16471: LD_VAR 0 8
16475: NOT
16476: IFFALSE 16480
// exit ;
16478: GO 16938
// if in_unit then
16480: LD_VAR 0 11
16484: IFFALSE 16508
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
16486: LD_ADDR_VAR 0 10
16490: PUSH
16491: LD_VAR 0 8
16495: PPUSH
16496: LD_VAR 0 11
16500: PPUSH
16501: CALL_OW 74
16505: ST_TO_ADDR
16506: GO 16528
// enemy := NearestUnitToUnit ( tmp , unit ) ;
16508: LD_ADDR_VAR 0 10
16512: PUSH
16513: LD_VAR 0 8
16517: PPUSH
16518: LD_VAR 0 1
16522: PPUSH
16523: CALL_OW 74
16527: ST_TO_ADDR
// if not enemy then
16528: LD_VAR 0 10
16532: NOT
16533: IFFALSE 16537
// exit ;
16535: GO 16938
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
16537: LD_VAR 0 11
16541: PUSH
16542: LD_VAR 0 11
16546: PPUSH
16547: LD_VAR 0 10
16551: PPUSH
16552: CALL_OW 296
16556: PUSH
16557: LD_INT 13
16559: GREATER
16560: AND
16561: PUSH
16562: LD_VAR 0 1
16566: PPUSH
16567: LD_VAR 0 10
16571: PPUSH
16572: CALL_OW 296
16576: PUSH
16577: LD_INT 12
16579: GREATER
16580: OR
16581: IFFALSE 16585
// exit ;
16583: GO 16938
// missile := [ 1 ] ;
16585: LD_ADDR_VAR 0 14
16589: PUSH
16590: LD_INT 1
16592: PUSH
16593: EMPTY
16594: LIST
16595: ST_TO_ADDR
// if Researched ( side , tech_space ) then
16596: LD_VAR 0 9
16600: PPUSH
16601: LD_VAR 0 12
16605: PPUSH
16606: CALL_OW 325
16610: IFFALSE 16639
// missile := Replace ( missile , missile + 1 , 2 ) ;
16612: LD_ADDR_VAR 0 14
16616: PUSH
16617: LD_VAR 0 14
16621: PPUSH
16622: LD_VAR 0 14
16626: PUSH
16627: LD_INT 1
16629: PLUS
16630: PPUSH
16631: LD_INT 2
16633: PPUSH
16634: CALL_OW 1
16638: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
16639: LD_VAR 0 9
16643: PPUSH
16644: LD_VAR 0 13
16648: PPUSH
16649: CALL_OW 325
16653: PUSH
16654: LD_VAR 0 10
16658: PPUSH
16659: CALL_OW 255
16663: PPUSH
16664: LD_VAR 0 13
16668: PPUSH
16669: CALL_OW 325
16673: NOT
16674: AND
16675: IFFALSE 16704
// missile := Replace ( missile , missile + 1 , 3 ) ;
16677: LD_ADDR_VAR 0 14
16681: PUSH
16682: LD_VAR 0 14
16686: PPUSH
16687: LD_VAR 0 14
16691: PUSH
16692: LD_INT 1
16694: PLUS
16695: PPUSH
16696: LD_INT 3
16698: PPUSH
16699: CALL_OW 1
16703: ST_TO_ADDR
// if missile < 2 then
16704: LD_VAR 0 14
16708: PUSH
16709: LD_INT 2
16711: LESS
16712: IFFALSE 16716
// exit ;
16714: GO 16938
// x := GetX ( enemy ) ;
16716: LD_ADDR_VAR 0 4
16720: PUSH
16721: LD_VAR 0 10
16725: PPUSH
16726: CALL_OW 250
16730: ST_TO_ADDR
// y := GetY ( enemy ) ;
16731: LD_ADDR_VAR 0 5
16735: PUSH
16736: LD_VAR 0 10
16740: PPUSH
16741: CALL_OW 251
16745: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
16746: LD_ADDR_VAR 0 6
16750: PUSH
16751: LD_VAR 0 4
16755: PUSH
16756: LD_INT 1
16758: NEG
16759: PPUSH
16760: LD_INT 1
16762: PPUSH
16763: CALL_OW 12
16767: PLUS
16768: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
16769: LD_ADDR_VAR 0 7
16773: PUSH
16774: LD_VAR 0 5
16778: PUSH
16779: LD_INT 1
16781: NEG
16782: PPUSH
16783: LD_INT 1
16785: PPUSH
16786: CALL_OW 12
16790: PLUS
16791: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
16792: LD_VAR 0 6
16796: PPUSH
16797: LD_VAR 0 7
16801: PPUSH
16802: CALL_OW 488
16806: NOT
16807: IFFALSE 16829
// begin _x := x ;
16809: LD_ADDR_VAR 0 6
16813: PUSH
16814: LD_VAR 0 4
16818: ST_TO_ADDR
// _y := y ;
16819: LD_ADDR_VAR 0 7
16823: PUSH
16824: LD_VAR 0 5
16828: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
16829: LD_ADDR_VAR 0 3
16833: PUSH
16834: LD_INT 1
16836: PPUSH
16837: LD_VAR 0 14
16841: PPUSH
16842: CALL_OW 12
16846: ST_TO_ADDR
// case i of 1 :
16847: LD_VAR 0 3
16851: PUSH
16852: LD_INT 1
16854: DOUBLE
16855: EQUAL
16856: IFTRUE 16860
16858: GO 16877
16860: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
16861: LD_VAR 0 1
16865: PPUSH
16866: LD_VAR 0 10
16870: PPUSH
16871: CALL_OW 115
16875: GO 16938
16877: LD_INT 2
16879: DOUBLE
16880: EQUAL
16881: IFTRUE 16885
16883: GO 16907
16885: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
16886: LD_VAR 0 1
16890: PPUSH
16891: LD_VAR 0 6
16895: PPUSH
16896: LD_VAR 0 7
16900: PPUSH
16901: CALL_OW 153
16905: GO 16938
16907: LD_INT 3
16909: DOUBLE
16910: EQUAL
16911: IFTRUE 16915
16913: GO 16937
16915: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
16916: LD_VAR 0 1
16920: PPUSH
16921: LD_VAR 0 6
16925: PPUSH
16926: LD_VAR 0 7
16930: PPUSH
16931: CALL_OW 154
16935: GO 16938
16937: POP
// end ;
16938: LD_VAR 0 2
16942: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
16943: LD_INT 0
16945: PPUSH
16946: PPUSH
16947: PPUSH
16948: PPUSH
16949: PPUSH
16950: PPUSH
// if not unit or not building then
16951: LD_VAR 0 1
16955: NOT
16956: PUSH
16957: LD_VAR 0 2
16961: NOT
16962: OR
16963: IFFALSE 16967
// exit ;
16965: GO 17125
// x := GetX ( building ) ;
16967: LD_ADDR_VAR 0 5
16971: PUSH
16972: LD_VAR 0 2
16976: PPUSH
16977: CALL_OW 250
16981: ST_TO_ADDR
// y := GetY ( building ) ;
16982: LD_ADDR_VAR 0 6
16986: PUSH
16987: LD_VAR 0 2
16991: PPUSH
16992: CALL_OW 251
16996: ST_TO_ADDR
// for i = 0 to 5 do
16997: LD_ADDR_VAR 0 4
17001: PUSH
17002: DOUBLE
17003: LD_INT 0
17005: DEC
17006: ST_TO_ADDR
17007: LD_INT 5
17009: PUSH
17010: FOR_TO
17011: IFFALSE 17123
// begin _x := ShiftX ( x , i , 3 ) ;
17013: LD_ADDR_VAR 0 7
17017: PUSH
17018: LD_VAR 0 5
17022: PPUSH
17023: LD_VAR 0 4
17027: PPUSH
17028: LD_INT 3
17030: PPUSH
17031: CALL_OW 272
17035: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
17036: LD_ADDR_VAR 0 8
17040: PUSH
17041: LD_VAR 0 6
17045: PPUSH
17046: LD_VAR 0 4
17050: PPUSH
17051: LD_INT 3
17053: PPUSH
17054: CALL_OW 273
17058: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
17059: LD_VAR 0 7
17063: PPUSH
17064: LD_VAR 0 8
17068: PPUSH
17069: CALL_OW 488
17073: NOT
17074: IFFALSE 17078
// continue ;
17076: GO 17010
// if HexInfo ( _x , _y ) = 0 then
17078: LD_VAR 0 7
17082: PPUSH
17083: LD_VAR 0 8
17087: PPUSH
17088: CALL_OW 428
17092: PUSH
17093: LD_INT 0
17095: EQUAL
17096: IFFALSE 17121
// begin ComMoveXY ( unit , _x , _y ) ;
17098: LD_VAR 0 1
17102: PPUSH
17103: LD_VAR 0 7
17107: PPUSH
17108: LD_VAR 0 8
17112: PPUSH
17113: CALL_OW 111
// exit ;
17117: POP
17118: POP
17119: GO 17125
// end ; end ;
17121: GO 17010
17123: POP
17124: POP
// end ;
17125: LD_VAR 0 3
17129: RET
// export function ScanBase ( side , base_area ) ; begin
17130: LD_INT 0
17132: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
17133: LD_ADDR_VAR 0 3
17137: PUSH
17138: LD_VAR 0 2
17142: PPUSH
17143: LD_INT 81
17145: PUSH
17146: LD_VAR 0 1
17150: PUSH
17151: EMPTY
17152: LIST
17153: LIST
17154: PPUSH
17155: CALL_OW 70
17159: ST_TO_ADDR
// end ;
17160: LD_VAR 0 3
17164: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
17165: LD_INT 0
17167: PPUSH
17168: PPUSH
17169: PPUSH
17170: PPUSH
// result := false ;
17171: LD_ADDR_VAR 0 2
17175: PUSH
17176: LD_INT 0
17178: ST_TO_ADDR
// side := GetSide ( unit ) ;
17179: LD_ADDR_VAR 0 3
17183: PUSH
17184: LD_VAR 0 1
17188: PPUSH
17189: CALL_OW 255
17193: ST_TO_ADDR
// nat := GetNation ( unit ) ;
17194: LD_ADDR_VAR 0 4
17198: PUSH
17199: LD_VAR 0 1
17203: PPUSH
17204: CALL_OW 248
17208: ST_TO_ADDR
// case nat of 1 :
17209: LD_VAR 0 4
17213: PUSH
17214: LD_INT 1
17216: DOUBLE
17217: EQUAL
17218: IFTRUE 17222
17220: GO 17233
17222: POP
// tech := tech_lassight ; 2 :
17223: LD_ADDR_VAR 0 5
17227: PUSH
17228: LD_INT 12
17230: ST_TO_ADDR
17231: GO 17272
17233: LD_INT 2
17235: DOUBLE
17236: EQUAL
17237: IFTRUE 17241
17239: GO 17252
17241: POP
// tech := tech_mortar ; 3 :
17242: LD_ADDR_VAR 0 5
17246: PUSH
17247: LD_INT 41
17249: ST_TO_ADDR
17250: GO 17272
17252: LD_INT 3
17254: DOUBLE
17255: EQUAL
17256: IFTRUE 17260
17258: GO 17271
17260: POP
// tech := tech_bazooka ; end ;
17261: LD_ADDR_VAR 0 5
17265: PUSH
17266: LD_INT 44
17268: ST_TO_ADDR
17269: GO 17272
17271: POP
// if Researched ( side , tech ) then
17272: LD_VAR 0 3
17276: PPUSH
17277: LD_VAR 0 5
17281: PPUSH
17282: CALL_OW 325
17286: IFFALSE 17313
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
17288: LD_ADDR_VAR 0 2
17292: PUSH
17293: LD_INT 5
17295: PUSH
17296: LD_INT 8
17298: PUSH
17299: LD_INT 9
17301: PUSH
17302: EMPTY
17303: LIST
17304: LIST
17305: LIST
17306: PUSH
17307: LD_VAR 0 4
17311: ARRAY
17312: ST_TO_ADDR
// end ;
17313: LD_VAR 0 2
17317: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
17318: LD_INT 0
17320: PPUSH
17321: PPUSH
17322: PPUSH
// if not mines then
17323: LD_VAR 0 2
17327: NOT
17328: IFFALSE 17332
// exit ;
17330: GO 17476
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17332: LD_ADDR_VAR 0 5
17336: PUSH
17337: LD_INT 81
17339: PUSH
17340: LD_VAR 0 1
17344: PUSH
17345: EMPTY
17346: LIST
17347: LIST
17348: PUSH
17349: LD_INT 3
17351: PUSH
17352: LD_INT 21
17354: PUSH
17355: LD_INT 3
17357: PUSH
17358: EMPTY
17359: LIST
17360: LIST
17361: PUSH
17362: EMPTY
17363: LIST
17364: LIST
17365: PUSH
17366: EMPTY
17367: LIST
17368: LIST
17369: PPUSH
17370: CALL_OW 69
17374: ST_TO_ADDR
// for i in mines do
17375: LD_ADDR_VAR 0 4
17379: PUSH
17380: LD_VAR 0 2
17384: PUSH
17385: FOR_IN
17386: IFFALSE 17474
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
17388: LD_VAR 0 4
17392: PUSH
17393: LD_INT 1
17395: ARRAY
17396: PPUSH
17397: LD_VAR 0 4
17401: PUSH
17402: LD_INT 2
17404: ARRAY
17405: PPUSH
17406: CALL_OW 458
17410: NOT
17411: IFFALSE 17415
// continue ;
17413: GO 17385
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
17415: LD_VAR 0 4
17419: PUSH
17420: LD_INT 1
17422: ARRAY
17423: PPUSH
17424: LD_VAR 0 4
17428: PUSH
17429: LD_INT 2
17431: ARRAY
17432: PPUSH
17433: CALL_OW 428
17437: PUSH
17438: LD_VAR 0 5
17442: IN
17443: IFFALSE 17472
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
17445: LD_VAR 0 4
17449: PUSH
17450: LD_INT 1
17452: ARRAY
17453: PPUSH
17454: LD_VAR 0 4
17458: PUSH
17459: LD_INT 2
17461: ARRAY
17462: PPUSH
17463: LD_VAR 0 1
17467: PPUSH
17468: CALL_OW 456
// end ;
17472: GO 17385
17474: POP
17475: POP
// end ;
17476: LD_VAR 0 3
17480: RET
// export function Count ( array ) ; begin
17481: LD_INT 0
17483: PPUSH
// result := array + 0 ;
17484: LD_ADDR_VAR 0 2
17488: PUSH
17489: LD_VAR 0 1
17493: PUSH
17494: LD_INT 0
17496: PLUS
17497: ST_TO_ADDR
// end ;
17498: LD_VAR 0 2
17502: RET
// export function IsEmpty ( building ) ; begin
17503: LD_INT 0
17505: PPUSH
// if not building then
17506: LD_VAR 0 1
17510: NOT
17511: IFFALSE 17515
// exit ;
17513: GO 17558
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
17515: LD_ADDR_VAR 0 2
17519: PUSH
17520: LD_VAR 0 1
17524: PUSH
17525: LD_INT 22
17527: PUSH
17528: LD_VAR 0 1
17532: PPUSH
17533: CALL_OW 255
17537: PUSH
17538: EMPTY
17539: LIST
17540: LIST
17541: PUSH
17542: LD_INT 58
17544: PUSH
17545: EMPTY
17546: LIST
17547: PUSH
17548: EMPTY
17549: LIST
17550: LIST
17551: PPUSH
17552: CALL_OW 69
17556: IN
17557: ST_TO_ADDR
// end ;
17558: LD_VAR 0 2
17562: RET
// export function IsNotFull ( building ) ; var places ; begin
17563: LD_INT 0
17565: PPUSH
17566: PPUSH
// if not building then
17567: LD_VAR 0 1
17571: NOT
17572: IFFALSE 17576
// exit ;
17574: GO 17604
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
17576: LD_ADDR_VAR 0 2
17580: PUSH
17581: LD_VAR 0 1
17585: PPUSH
17586: LD_INT 3
17588: PUSH
17589: LD_INT 62
17591: PUSH
17592: EMPTY
17593: LIST
17594: PUSH
17595: EMPTY
17596: LIST
17597: LIST
17598: PPUSH
17599: CALL_OW 72
17603: ST_TO_ADDR
// end ;
17604: LD_VAR 0 2
17608: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
17609: LD_INT 0
17611: PPUSH
17612: PPUSH
17613: PPUSH
17614: PPUSH
// tmp := [ ] ;
17615: LD_ADDR_VAR 0 3
17619: PUSH
17620: EMPTY
17621: ST_TO_ADDR
// list := [ ] ;
17622: LD_ADDR_VAR 0 5
17626: PUSH
17627: EMPTY
17628: ST_TO_ADDR
// for i = 16 to 25 do
17629: LD_ADDR_VAR 0 4
17633: PUSH
17634: DOUBLE
17635: LD_INT 16
17637: DEC
17638: ST_TO_ADDR
17639: LD_INT 25
17641: PUSH
17642: FOR_TO
17643: IFFALSE 17716
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
17645: LD_ADDR_VAR 0 3
17649: PUSH
17650: LD_VAR 0 3
17654: PUSH
17655: LD_INT 22
17657: PUSH
17658: LD_VAR 0 1
17662: PPUSH
17663: CALL_OW 255
17667: PUSH
17668: EMPTY
17669: LIST
17670: LIST
17671: PUSH
17672: LD_INT 91
17674: PUSH
17675: LD_VAR 0 1
17679: PUSH
17680: LD_INT 6
17682: PUSH
17683: EMPTY
17684: LIST
17685: LIST
17686: LIST
17687: PUSH
17688: LD_INT 30
17690: PUSH
17691: LD_VAR 0 4
17695: PUSH
17696: EMPTY
17697: LIST
17698: LIST
17699: PUSH
17700: EMPTY
17701: LIST
17702: LIST
17703: LIST
17704: PUSH
17705: EMPTY
17706: LIST
17707: PPUSH
17708: CALL_OW 69
17712: ADD
17713: ST_TO_ADDR
17714: GO 17642
17716: POP
17717: POP
// for i = 1 to tmp do
17718: LD_ADDR_VAR 0 4
17722: PUSH
17723: DOUBLE
17724: LD_INT 1
17726: DEC
17727: ST_TO_ADDR
17728: LD_VAR 0 3
17732: PUSH
17733: FOR_TO
17734: IFFALSE 17822
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
17736: LD_ADDR_VAR 0 5
17740: PUSH
17741: LD_VAR 0 5
17745: PUSH
17746: LD_VAR 0 3
17750: PUSH
17751: LD_VAR 0 4
17755: ARRAY
17756: PPUSH
17757: CALL_OW 266
17761: PUSH
17762: LD_VAR 0 3
17766: PUSH
17767: LD_VAR 0 4
17771: ARRAY
17772: PPUSH
17773: CALL_OW 250
17777: PUSH
17778: LD_VAR 0 3
17782: PUSH
17783: LD_VAR 0 4
17787: ARRAY
17788: PPUSH
17789: CALL_OW 251
17793: PUSH
17794: LD_VAR 0 3
17798: PUSH
17799: LD_VAR 0 4
17803: ARRAY
17804: PPUSH
17805: CALL_OW 254
17809: PUSH
17810: EMPTY
17811: LIST
17812: LIST
17813: LIST
17814: LIST
17815: PUSH
17816: EMPTY
17817: LIST
17818: ADD
17819: ST_TO_ADDR
17820: GO 17733
17822: POP
17823: POP
// result := list ;
17824: LD_ADDR_VAR 0 2
17828: PUSH
17829: LD_VAR 0 5
17833: ST_TO_ADDR
// end ;
17834: LD_VAR 0 2
17838: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
17839: LD_INT 0
17841: PPUSH
17842: PPUSH
17843: PPUSH
17844: PPUSH
17845: PPUSH
17846: PPUSH
17847: PPUSH
// if not factory then
17848: LD_VAR 0 1
17852: NOT
17853: IFFALSE 17857
// exit ;
17855: GO 18450
// if control = control_apeman then
17857: LD_VAR 0 4
17861: PUSH
17862: LD_INT 5
17864: EQUAL
17865: IFFALSE 17974
// begin tmp := UnitsInside ( factory ) ;
17867: LD_ADDR_VAR 0 8
17871: PUSH
17872: LD_VAR 0 1
17876: PPUSH
17877: CALL_OW 313
17881: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
17882: LD_VAR 0 8
17886: PPUSH
17887: LD_INT 25
17889: PUSH
17890: LD_INT 12
17892: PUSH
17893: EMPTY
17894: LIST
17895: LIST
17896: PPUSH
17897: CALL_OW 72
17901: NOT
17902: IFFALSE 17912
// control := control_manual ;
17904: LD_ADDR_VAR 0 4
17908: PUSH
17909: LD_INT 1
17911: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
17912: LD_ADDR_VAR 0 8
17916: PUSH
17917: LD_VAR 0 1
17921: PPUSH
17922: CALL 17609 0 1
17926: ST_TO_ADDR
// if tmp then
17927: LD_VAR 0 8
17931: IFFALSE 17974
// begin for i in tmp do
17933: LD_ADDR_VAR 0 7
17937: PUSH
17938: LD_VAR 0 8
17942: PUSH
17943: FOR_IN
17944: IFFALSE 17972
// if i [ 1 ] = b_ext_radio then
17946: LD_VAR 0 7
17950: PUSH
17951: LD_INT 1
17953: ARRAY
17954: PUSH
17955: LD_INT 22
17957: EQUAL
17958: IFFALSE 17970
// begin control := control_remote ;
17960: LD_ADDR_VAR 0 4
17964: PUSH
17965: LD_INT 2
17967: ST_TO_ADDR
// break ;
17968: GO 17972
// end ;
17970: GO 17943
17972: POP
17973: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
17974: LD_VAR 0 1
17978: PPUSH
17979: LD_VAR 0 2
17983: PPUSH
17984: LD_VAR 0 3
17988: PPUSH
17989: LD_VAR 0 4
17993: PPUSH
17994: LD_VAR 0 5
17998: PPUSH
17999: CALL_OW 448
18003: IFFALSE 18038
// begin result := [ chassis , engine , control , weapon ] ;
18005: LD_ADDR_VAR 0 6
18009: PUSH
18010: LD_VAR 0 2
18014: PUSH
18015: LD_VAR 0 3
18019: PUSH
18020: LD_VAR 0 4
18024: PUSH
18025: LD_VAR 0 5
18029: PUSH
18030: EMPTY
18031: LIST
18032: LIST
18033: LIST
18034: LIST
18035: ST_TO_ADDR
// exit ;
18036: GO 18450
// end ; _chassis := AvailableChassisList ( factory ) ;
18038: LD_ADDR_VAR 0 9
18042: PUSH
18043: LD_VAR 0 1
18047: PPUSH
18048: CALL_OW 475
18052: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
18053: LD_ADDR_VAR 0 11
18057: PUSH
18058: LD_VAR 0 1
18062: PPUSH
18063: CALL_OW 476
18067: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
18068: LD_ADDR_VAR 0 12
18072: PUSH
18073: LD_VAR 0 1
18077: PPUSH
18078: CALL_OW 477
18082: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
18083: LD_ADDR_VAR 0 10
18087: PUSH
18088: LD_VAR 0 1
18092: PPUSH
18093: CALL_OW 478
18097: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
18098: LD_VAR 0 9
18102: NOT
18103: PUSH
18104: LD_VAR 0 11
18108: NOT
18109: OR
18110: PUSH
18111: LD_VAR 0 12
18115: NOT
18116: OR
18117: PUSH
18118: LD_VAR 0 10
18122: NOT
18123: OR
18124: IFFALSE 18159
// begin result := [ chassis , engine , control , weapon ] ;
18126: LD_ADDR_VAR 0 6
18130: PUSH
18131: LD_VAR 0 2
18135: PUSH
18136: LD_VAR 0 3
18140: PUSH
18141: LD_VAR 0 4
18145: PUSH
18146: LD_VAR 0 5
18150: PUSH
18151: EMPTY
18152: LIST
18153: LIST
18154: LIST
18155: LIST
18156: ST_TO_ADDR
// exit ;
18157: GO 18450
// end ; if not chassis in _chassis then
18159: LD_VAR 0 2
18163: PUSH
18164: LD_VAR 0 9
18168: IN
18169: NOT
18170: IFFALSE 18196
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
18172: LD_ADDR_VAR 0 2
18176: PUSH
18177: LD_VAR 0 9
18181: PUSH
18182: LD_INT 1
18184: PPUSH
18185: LD_VAR 0 9
18189: PPUSH
18190: CALL_OW 12
18194: ARRAY
18195: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
18196: LD_VAR 0 2
18200: PPUSH
18201: LD_VAR 0 3
18205: PPUSH
18206: CALL 18455 0 2
18210: NOT
18211: IFFALSE 18270
// repeat engine := _engine [ 1 ] ;
18213: LD_ADDR_VAR 0 3
18217: PUSH
18218: LD_VAR 0 11
18222: PUSH
18223: LD_INT 1
18225: ARRAY
18226: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
18227: LD_ADDR_VAR 0 11
18231: PUSH
18232: LD_VAR 0 11
18236: PPUSH
18237: LD_INT 1
18239: PPUSH
18240: CALL_OW 3
18244: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
18245: LD_VAR 0 2
18249: PPUSH
18250: LD_VAR 0 3
18254: PPUSH
18255: CALL 18455 0 2
18259: PUSH
18260: LD_VAR 0 11
18264: PUSH
18265: EMPTY
18266: EQUAL
18267: OR
18268: IFFALSE 18213
// if not control in _control then
18270: LD_VAR 0 4
18274: PUSH
18275: LD_VAR 0 12
18279: IN
18280: NOT
18281: IFFALSE 18307
// control := _control [ rand ( 1 , _control ) ] ;
18283: LD_ADDR_VAR 0 4
18287: PUSH
18288: LD_VAR 0 12
18292: PUSH
18293: LD_INT 1
18295: PPUSH
18296: LD_VAR 0 12
18300: PPUSH
18301: CALL_OW 12
18305: ARRAY
18306: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
18307: LD_VAR 0 2
18311: PPUSH
18312: LD_VAR 0 5
18316: PPUSH
18317: CALL 18675 0 2
18321: NOT
18322: IFFALSE 18381
// repeat weapon := _weapon [ 1 ] ;
18324: LD_ADDR_VAR 0 5
18328: PUSH
18329: LD_VAR 0 10
18333: PUSH
18334: LD_INT 1
18336: ARRAY
18337: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
18338: LD_ADDR_VAR 0 10
18342: PUSH
18343: LD_VAR 0 10
18347: PPUSH
18348: LD_INT 1
18350: PPUSH
18351: CALL_OW 3
18355: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
18356: LD_VAR 0 2
18360: PPUSH
18361: LD_VAR 0 5
18365: PPUSH
18366: CALL 18675 0 2
18370: PUSH
18371: LD_VAR 0 10
18375: PUSH
18376: EMPTY
18377: EQUAL
18378: OR
18379: IFFALSE 18324
// result := [ ] ;
18381: LD_ADDR_VAR 0 6
18385: PUSH
18386: EMPTY
18387: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
18388: LD_VAR 0 1
18392: PPUSH
18393: LD_VAR 0 2
18397: PPUSH
18398: LD_VAR 0 3
18402: PPUSH
18403: LD_VAR 0 4
18407: PPUSH
18408: LD_VAR 0 5
18412: PPUSH
18413: CALL_OW 448
18417: IFFALSE 18450
// result := [ chassis , engine , control , weapon ] ;
18419: LD_ADDR_VAR 0 6
18423: PUSH
18424: LD_VAR 0 2
18428: PUSH
18429: LD_VAR 0 3
18433: PUSH
18434: LD_VAR 0 4
18438: PUSH
18439: LD_VAR 0 5
18443: PUSH
18444: EMPTY
18445: LIST
18446: LIST
18447: LIST
18448: LIST
18449: ST_TO_ADDR
// end ;
18450: LD_VAR 0 6
18454: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
18455: LD_INT 0
18457: PPUSH
// if not chassis or not engine then
18458: LD_VAR 0 1
18462: NOT
18463: PUSH
18464: LD_VAR 0 2
18468: NOT
18469: OR
18470: IFFALSE 18474
// exit ;
18472: GO 18670
// case engine of engine_solar :
18474: LD_VAR 0 2
18478: PUSH
18479: LD_INT 2
18481: DOUBLE
18482: EQUAL
18483: IFTRUE 18487
18485: GO 18525
18487: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
18488: LD_ADDR_VAR 0 3
18492: PUSH
18493: LD_INT 11
18495: PUSH
18496: LD_INT 12
18498: PUSH
18499: LD_INT 13
18501: PUSH
18502: LD_INT 14
18504: PUSH
18505: LD_INT 1
18507: PUSH
18508: LD_INT 2
18510: PUSH
18511: LD_INT 3
18513: PUSH
18514: EMPTY
18515: LIST
18516: LIST
18517: LIST
18518: LIST
18519: LIST
18520: LIST
18521: LIST
18522: ST_TO_ADDR
18523: GO 18654
18525: LD_INT 1
18527: DOUBLE
18528: EQUAL
18529: IFTRUE 18533
18531: GO 18595
18533: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
18534: LD_ADDR_VAR 0 3
18538: PUSH
18539: LD_INT 11
18541: PUSH
18542: LD_INT 12
18544: PUSH
18545: LD_INT 13
18547: PUSH
18548: LD_INT 14
18550: PUSH
18551: LD_INT 1
18553: PUSH
18554: LD_INT 2
18556: PUSH
18557: LD_INT 3
18559: PUSH
18560: LD_INT 4
18562: PUSH
18563: LD_INT 5
18565: PUSH
18566: LD_INT 21
18568: PUSH
18569: LD_INT 23
18571: PUSH
18572: LD_INT 22
18574: PUSH
18575: LD_INT 24
18577: PUSH
18578: EMPTY
18579: LIST
18580: LIST
18581: LIST
18582: LIST
18583: LIST
18584: LIST
18585: LIST
18586: LIST
18587: LIST
18588: LIST
18589: LIST
18590: LIST
18591: LIST
18592: ST_TO_ADDR
18593: GO 18654
18595: LD_INT 3
18597: DOUBLE
18598: EQUAL
18599: IFTRUE 18603
18601: GO 18653
18603: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
18604: LD_ADDR_VAR 0 3
18608: PUSH
18609: LD_INT 13
18611: PUSH
18612: LD_INT 14
18614: PUSH
18615: LD_INT 2
18617: PUSH
18618: LD_INT 3
18620: PUSH
18621: LD_INT 4
18623: PUSH
18624: LD_INT 5
18626: PUSH
18627: LD_INT 21
18629: PUSH
18630: LD_INT 22
18632: PUSH
18633: LD_INT 23
18635: PUSH
18636: LD_INT 24
18638: PUSH
18639: EMPTY
18640: LIST
18641: LIST
18642: LIST
18643: LIST
18644: LIST
18645: LIST
18646: LIST
18647: LIST
18648: LIST
18649: LIST
18650: ST_TO_ADDR
18651: GO 18654
18653: POP
// result := ( chassis in result ) ;
18654: LD_ADDR_VAR 0 3
18658: PUSH
18659: LD_VAR 0 1
18663: PUSH
18664: LD_VAR 0 3
18668: IN
18669: ST_TO_ADDR
// end ;
18670: LD_VAR 0 3
18674: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
18675: LD_INT 0
18677: PPUSH
// if not chassis or not weapon then
18678: LD_VAR 0 1
18682: NOT
18683: PUSH
18684: LD_VAR 0 2
18688: NOT
18689: OR
18690: IFFALSE 18694
// exit ;
18692: GO 19754
// case weapon of us_machine_gun :
18694: LD_VAR 0 2
18698: PUSH
18699: LD_INT 2
18701: DOUBLE
18702: EQUAL
18703: IFTRUE 18707
18705: GO 18737
18707: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
18708: LD_ADDR_VAR 0 3
18712: PUSH
18713: LD_INT 1
18715: PUSH
18716: LD_INT 2
18718: PUSH
18719: LD_INT 3
18721: PUSH
18722: LD_INT 4
18724: PUSH
18725: LD_INT 5
18727: PUSH
18728: EMPTY
18729: LIST
18730: LIST
18731: LIST
18732: LIST
18733: LIST
18734: ST_TO_ADDR
18735: GO 19738
18737: LD_INT 3
18739: DOUBLE
18740: EQUAL
18741: IFTRUE 18745
18743: GO 18775
18745: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
18746: LD_ADDR_VAR 0 3
18750: PUSH
18751: LD_INT 1
18753: PUSH
18754: LD_INT 2
18756: PUSH
18757: LD_INT 3
18759: PUSH
18760: LD_INT 4
18762: PUSH
18763: LD_INT 5
18765: PUSH
18766: EMPTY
18767: LIST
18768: LIST
18769: LIST
18770: LIST
18771: LIST
18772: ST_TO_ADDR
18773: GO 19738
18775: LD_INT 11
18777: DOUBLE
18778: EQUAL
18779: IFTRUE 18783
18781: GO 18813
18783: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
18784: LD_ADDR_VAR 0 3
18788: PUSH
18789: LD_INT 1
18791: PUSH
18792: LD_INT 2
18794: PUSH
18795: LD_INT 3
18797: PUSH
18798: LD_INT 4
18800: PUSH
18801: LD_INT 5
18803: PUSH
18804: EMPTY
18805: LIST
18806: LIST
18807: LIST
18808: LIST
18809: LIST
18810: ST_TO_ADDR
18811: GO 19738
18813: LD_INT 4
18815: DOUBLE
18816: EQUAL
18817: IFTRUE 18821
18819: GO 18847
18821: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
18822: LD_ADDR_VAR 0 3
18826: PUSH
18827: LD_INT 2
18829: PUSH
18830: LD_INT 3
18832: PUSH
18833: LD_INT 4
18835: PUSH
18836: LD_INT 5
18838: PUSH
18839: EMPTY
18840: LIST
18841: LIST
18842: LIST
18843: LIST
18844: ST_TO_ADDR
18845: GO 19738
18847: LD_INT 5
18849: DOUBLE
18850: EQUAL
18851: IFTRUE 18855
18853: GO 18881
18855: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
18856: LD_ADDR_VAR 0 3
18860: PUSH
18861: LD_INT 2
18863: PUSH
18864: LD_INT 3
18866: PUSH
18867: LD_INT 4
18869: PUSH
18870: LD_INT 5
18872: PUSH
18873: EMPTY
18874: LIST
18875: LIST
18876: LIST
18877: LIST
18878: ST_TO_ADDR
18879: GO 19738
18881: LD_INT 9
18883: DOUBLE
18884: EQUAL
18885: IFTRUE 18889
18887: GO 18915
18889: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
18890: LD_ADDR_VAR 0 3
18894: PUSH
18895: LD_INT 2
18897: PUSH
18898: LD_INT 3
18900: PUSH
18901: LD_INT 4
18903: PUSH
18904: LD_INT 5
18906: PUSH
18907: EMPTY
18908: LIST
18909: LIST
18910: LIST
18911: LIST
18912: ST_TO_ADDR
18913: GO 19738
18915: LD_INT 7
18917: DOUBLE
18918: EQUAL
18919: IFTRUE 18923
18921: GO 18949
18923: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
18924: LD_ADDR_VAR 0 3
18928: PUSH
18929: LD_INT 2
18931: PUSH
18932: LD_INT 3
18934: PUSH
18935: LD_INT 4
18937: PUSH
18938: LD_INT 5
18940: PUSH
18941: EMPTY
18942: LIST
18943: LIST
18944: LIST
18945: LIST
18946: ST_TO_ADDR
18947: GO 19738
18949: LD_INT 12
18951: DOUBLE
18952: EQUAL
18953: IFTRUE 18957
18955: GO 18983
18957: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
18958: LD_ADDR_VAR 0 3
18962: PUSH
18963: LD_INT 2
18965: PUSH
18966: LD_INT 3
18968: PUSH
18969: LD_INT 4
18971: PUSH
18972: LD_INT 5
18974: PUSH
18975: EMPTY
18976: LIST
18977: LIST
18978: LIST
18979: LIST
18980: ST_TO_ADDR
18981: GO 19738
18983: LD_INT 13
18985: DOUBLE
18986: EQUAL
18987: IFTRUE 18991
18989: GO 19017
18991: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
18992: LD_ADDR_VAR 0 3
18996: PUSH
18997: LD_INT 2
18999: PUSH
19000: LD_INT 3
19002: PUSH
19003: LD_INT 4
19005: PUSH
19006: LD_INT 5
19008: PUSH
19009: EMPTY
19010: LIST
19011: LIST
19012: LIST
19013: LIST
19014: ST_TO_ADDR
19015: GO 19738
19017: LD_INT 14
19019: DOUBLE
19020: EQUAL
19021: IFTRUE 19025
19023: GO 19043
19025: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
19026: LD_ADDR_VAR 0 3
19030: PUSH
19031: LD_INT 4
19033: PUSH
19034: LD_INT 5
19036: PUSH
19037: EMPTY
19038: LIST
19039: LIST
19040: ST_TO_ADDR
19041: GO 19738
19043: LD_INT 6
19045: DOUBLE
19046: EQUAL
19047: IFTRUE 19051
19049: GO 19069
19051: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
19052: LD_ADDR_VAR 0 3
19056: PUSH
19057: LD_INT 4
19059: PUSH
19060: LD_INT 5
19062: PUSH
19063: EMPTY
19064: LIST
19065: LIST
19066: ST_TO_ADDR
19067: GO 19738
19069: LD_INT 10
19071: DOUBLE
19072: EQUAL
19073: IFTRUE 19077
19075: GO 19095
19077: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
19078: LD_ADDR_VAR 0 3
19082: PUSH
19083: LD_INT 4
19085: PUSH
19086: LD_INT 5
19088: PUSH
19089: EMPTY
19090: LIST
19091: LIST
19092: ST_TO_ADDR
19093: GO 19738
19095: LD_INT 22
19097: DOUBLE
19098: EQUAL
19099: IFTRUE 19103
19101: GO 19129
19103: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
19104: LD_ADDR_VAR 0 3
19108: PUSH
19109: LD_INT 11
19111: PUSH
19112: LD_INT 12
19114: PUSH
19115: LD_INT 13
19117: PUSH
19118: LD_INT 14
19120: PUSH
19121: EMPTY
19122: LIST
19123: LIST
19124: LIST
19125: LIST
19126: ST_TO_ADDR
19127: GO 19738
19129: LD_INT 23
19131: DOUBLE
19132: EQUAL
19133: IFTRUE 19137
19135: GO 19163
19137: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
19138: LD_ADDR_VAR 0 3
19142: PUSH
19143: LD_INT 11
19145: PUSH
19146: LD_INT 12
19148: PUSH
19149: LD_INT 13
19151: PUSH
19152: LD_INT 14
19154: PUSH
19155: EMPTY
19156: LIST
19157: LIST
19158: LIST
19159: LIST
19160: ST_TO_ADDR
19161: GO 19738
19163: LD_INT 24
19165: DOUBLE
19166: EQUAL
19167: IFTRUE 19171
19169: GO 19197
19171: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
19172: LD_ADDR_VAR 0 3
19176: PUSH
19177: LD_INT 11
19179: PUSH
19180: LD_INT 12
19182: PUSH
19183: LD_INT 13
19185: PUSH
19186: LD_INT 14
19188: PUSH
19189: EMPTY
19190: LIST
19191: LIST
19192: LIST
19193: LIST
19194: ST_TO_ADDR
19195: GO 19738
19197: LD_INT 30
19199: DOUBLE
19200: EQUAL
19201: IFTRUE 19205
19203: GO 19231
19205: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
19206: LD_ADDR_VAR 0 3
19210: PUSH
19211: LD_INT 11
19213: PUSH
19214: LD_INT 12
19216: PUSH
19217: LD_INT 13
19219: PUSH
19220: LD_INT 14
19222: PUSH
19223: EMPTY
19224: LIST
19225: LIST
19226: LIST
19227: LIST
19228: ST_TO_ADDR
19229: GO 19738
19231: LD_INT 25
19233: DOUBLE
19234: EQUAL
19235: IFTRUE 19239
19237: GO 19257
19239: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
19240: LD_ADDR_VAR 0 3
19244: PUSH
19245: LD_INT 13
19247: PUSH
19248: LD_INT 14
19250: PUSH
19251: EMPTY
19252: LIST
19253: LIST
19254: ST_TO_ADDR
19255: GO 19738
19257: LD_INT 27
19259: DOUBLE
19260: EQUAL
19261: IFTRUE 19265
19263: GO 19283
19265: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
19266: LD_ADDR_VAR 0 3
19270: PUSH
19271: LD_INT 13
19273: PUSH
19274: LD_INT 14
19276: PUSH
19277: EMPTY
19278: LIST
19279: LIST
19280: ST_TO_ADDR
19281: GO 19738
19283: LD_INT 92
19285: DOUBLE
19286: EQUAL
19287: IFTRUE 19291
19289: GO 19317
19291: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
19292: LD_ADDR_VAR 0 3
19296: PUSH
19297: LD_INT 11
19299: PUSH
19300: LD_INT 12
19302: PUSH
19303: LD_INT 13
19305: PUSH
19306: LD_INT 14
19308: PUSH
19309: EMPTY
19310: LIST
19311: LIST
19312: LIST
19313: LIST
19314: ST_TO_ADDR
19315: GO 19738
19317: LD_INT 28
19319: DOUBLE
19320: EQUAL
19321: IFTRUE 19325
19323: GO 19343
19325: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
19326: LD_ADDR_VAR 0 3
19330: PUSH
19331: LD_INT 13
19333: PUSH
19334: LD_INT 14
19336: PUSH
19337: EMPTY
19338: LIST
19339: LIST
19340: ST_TO_ADDR
19341: GO 19738
19343: LD_INT 29
19345: DOUBLE
19346: EQUAL
19347: IFTRUE 19351
19349: GO 19369
19351: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
19352: LD_ADDR_VAR 0 3
19356: PUSH
19357: LD_INT 13
19359: PUSH
19360: LD_INT 14
19362: PUSH
19363: EMPTY
19364: LIST
19365: LIST
19366: ST_TO_ADDR
19367: GO 19738
19369: LD_INT 31
19371: DOUBLE
19372: EQUAL
19373: IFTRUE 19377
19375: GO 19395
19377: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
19378: LD_ADDR_VAR 0 3
19382: PUSH
19383: LD_INT 13
19385: PUSH
19386: LD_INT 14
19388: PUSH
19389: EMPTY
19390: LIST
19391: LIST
19392: ST_TO_ADDR
19393: GO 19738
19395: LD_INT 26
19397: DOUBLE
19398: EQUAL
19399: IFTRUE 19403
19401: GO 19421
19403: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
19404: LD_ADDR_VAR 0 3
19408: PUSH
19409: LD_INT 13
19411: PUSH
19412: LD_INT 14
19414: PUSH
19415: EMPTY
19416: LIST
19417: LIST
19418: ST_TO_ADDR
19419: GO 19738
19421: LD_INT 42
19423: DOUBLE
19424: EQUAL
19425: IFTRUE 19429
19427: GO 19455
19429: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
19430: LD_ADDR_VAR 0 3
19434: PUSH
19435: LD_INT 21
19437: PUSH
19438: LD_INT 22
19440: PUSH
19441: LD_INT 23
19443: PUSH
19444: LD_INT 24
19446: PUSH
19447: EMPTY
19448: LIST
19449: LIST
19450: LIST
19451: LIST
19452: ST_TO_ADDR
19453: GO 19738
19455: LD_INT 43
19457: DOUBLE
19458: EQUAL
19459: IFTRUE 19463
19461: GO 19489
19463: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
19464: LD_ADDR_VAR 0 3
19468: PUSH
19469: LD_INT 21
19471: PUSH
19472: LD_INT 22
19474: PUSH
19475: LD_INT 23
19477: PUSH
19478: LD_INT 24
19480: PUSH
19481: EMPTY
19482: LIST
19483: LIST
19484: LIST
19485: LIST
19486: ST_TO_ADDR
19487: GO 19738
19489: LD_INT 44
19491: DOUBLE
19492: EQUAL
19493: IFTRUE 19497
19495: GO 19523
19497: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
19498: LD_ADDR_VAR 0 3
19502: PUSH
19503: LD_INT 21
19505: PUSH
19506: LD_INT 22
19508: PUSH
19509: LD_INT 23
19511: PUSH
19512: LD_INT 24
19514: PUSH
19515: EMPTY
19516: LIST
19517: LIST
19518: LIST
19519: LIST
19520: ST_TO_ADDR
19521: GO 19738
19523: LD_INT 45
19525: DOUBLE
19526: EQUAL
19527: IFTRUE 19531
19529: GO 19557
19531: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
19532: LD_ADDR_VAR 0 3
19536: PUSH
19537: LD_INT 21
19539: PUSH
19540: LD_INT 22
19542: PUSH
19543: LD_INT 23
19545: PUSH
19546: LD_INT 24
19548: PUSH
19549: EMPTY
19550: LIST
19551: LIST
19552: LIST
19553: LIST
19554: ST_TO_ADDR
19555: GO 19738
19557: LD_INT 49
19559: DOUBLE
19560: EQUAL
19561: IFTRUE 19565
19563: GO 19591
19565: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
19566: LD_ADDR_VAR 0 3
19570: PUSH
19571: LD_INT 21
19573: PUSH
19574: LD_INT 22
19576: PUSH
19577: LD_INT 23
19579: PUSH
19580: LD_INT 24
19582: PUSH
19583: EMPTY
19584: LIST
19585: LIST
19586: LIST
19587: LIST
19588: ST_TO_ADDR
19589: GO 19738
19591: LD_INT 51
19593: DOUBLE
19594: EQUAL
19595: IFTRUE 19599
19597: GO 19625
19599: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
19600: LD_ADDR_VAR 0 3
19604: PUSH
19605: LD_INT 21
19607: PUSH
19608: LD_INT 22
19610: PUSH
19611: LD_INT 23
19613: PUSH
19614: LD_INT 24
19616: PUSH
19617: EMPTY
19618: LIST
19619: LIST
19620: LIST
19621: LIST
19622: ST_TO_ADDR
19623: GO 19738
19625: LD_INT 52
19627: DOUBLE
19628: EQUAL
19629: IFTRUE 19633
19631: GO 19659
19633: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
19634: LD_ADDR_VAR 0 3
19638: PUSH
19639: LD_INT 21
19641: PUSH
19642: LD_INT 22
19644: PUSH
19645: LD_INT 23
19647: PUSH
19648: LD_INT 24
19650: PUSH
19651: EMPTY
19652: LIST
19653: LIST
19654: LIST
19655: LIST
19656: ST_TO_ADDR
19657: GO 19738
19659: LD_INT 53
19661: DOUBLE
19662: EQUAL
19663: IFTRUE 19667
19665: GO 19685
19667: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
19668: LD_ADDR_VAR 0 3
19672: PUSH
19673: LD_INT 23
19675: PUSH
19676: LD_INT 24
19678: PUSH
19679: EMPTY
19680: LIST
19681: LIST
19682: ST_TO_ADDR
19683: GO 19738
19685: LD_INT 46
19687: DOUBLE
19688: EQUAL
19689: IFTRUE 19693
19691: GO 19711
19693: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
19694: LD_ADDR_VAR 0 3
19698: PUSH
19699: LD_INT 23
19701: PUSH
19702: LD_INT 24
19704: PUSH
19705: EMPTY
19706: LIST
19707: LIST
19708: ST_TO_ADDR
19709: GO 19738
19711: LD_INT 47
19713: DOUBLE
19714: EQUAL
19715: IFTRUE 19719
19717: GO 19737
19719: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
19720: LD_ADDR_VAR 0 3
19724: PUSH
19725: LD_INT 23
19727: PUSH
19728: LD_INT 24
19730: PUSH
19731: EMPTY
19732: LIST
19733: LIST
19734: ST_TO_ADDR
19735: GO 19738
19737: POP
// result := ( chassis in result ) ;
19738: LD_ADDR_VAR 0 3
19742: PUSH
19743: LD_VAR 0 1
19747: PUSH
19748: LD_VAR 0 3
19752: IN
19753: ST_TO_ADDR
// end ;
19754: LD_VAR 0 3
19758: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
19759: LD_INT 0
19761: PPUSH
19762: PPUSH
19763: PPUSH
19764: PPUSH
19765: PPUSH
19766: PPUSH
19767: PPUSH
// result := array ;
19768: LD_ADDR_VAR 0 5
19772: PUSH
19773: LD_VAR 0 1
19777: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
19778: LD_VAR 0 1
19782: NOT
19783: PUSH
19784: LD_VAR 0 2
19788: NOT
19789: OR
19790: PUSH
19791: LD_VAR 0 3
19795: NOT
19796: OR
19797: PUSH
19798: LD_VAR 0 2
19802: PUSH
19803: LD_VAR 0 1
19807: GREATER
19808: OR
19809: PUSH
19810: LD_VAR 0 3
19814: PUSH
19815: LD_VAR 0 1
19819: GREATER
19820: OR
19821: IFFALSE 19825
// exit ;
19823: GO 20121
// if direction then
19825: LD_VAR 0 4
19829: IFFALSE 19893
// begin d := 1 ;
19831: LD_ADDR_VAR 0 9
19835: PUSH
19836: LD_INT 1
19838: ST_TO_ADDR
// if i_from > i_to then
19839: LD_VAR 0 2
19843: PUSH
19844: LD_VAR 0 3
19848: GREATER
19849: IFFALSE 19875
// length := ( array - i_from ) + i_to else
19851: LD_ADDR_VAR 0 11
19855: PUSH
19856: LD_VAR 0 1
19860: PUSH
19861: LD_VAR 0 2
19865: MINUS
19866: PUSH
19867: LD_VAR 0 3
19871: PLUS
19872: ST_TO_ADDR
19873: GO 19891
// length := i_to - i_from ;
19875: LD_ADDR_VAR 0 11
19879: PUSH
19880: LD_VAR 0 3
19884: PUSH
19885: LD_VAR 0 2
19889: MINUS
19890: ST_TO_ADDR
// end else
19891: GO 19954
// begin d := - 1 ;
19893: LD_ADDR_VAR 0 9
19897: PUSH
19898: LD_INT 1
19900: NEG
19901: ST_TO_ADDR
// if i_from > i_to then
19902: LD_VAR 0 2
19906: PUSH
19907: LD_VAR 0 3
19911: GREATER
19912: IFFALSE 19932
// length := i_from - i_to else
19914: LD_ADDR_VAR 0 11
19918: PUSH
19919: LD_VAR 0 2
19923: PUSH
19924: LD_VAR 0 3
19928: MINUS
19929: ST_TO_ADDR
19930: GO 19954
// length := ( array - i_to ) + i_from ;
19932: LD_ADDR_VAR 0 11
19936: PUSH
19937: LD_VAR 0 1
19941: PUSH
19942: LD_VAR 0 3
19946: MINUS
19947: PUSH
19948: LD_VAR 0 2
19952: PLUS
19953: ST_TO_ADDR
// end ; if not length then
19954: LD_VAR 0 11
19958: NOT
19959: IFFALSE 19963
// exit ;
19961: GO 20121
// tmp := array ;
19963: LD_ADDR_VAR 0 10
19967: PUSH
19968: LD_VAR 0 1
19972: ST_TO_ADDR
// for i = 1 to length do
19973: LD_ADDR_VAR 0 6
19977: PUSH
19978: DOUBLE
19979: LD_INT 1
19981: DEC
19982: ST_TO_ADDR
19983: LD_VAR 0 11
19987: PUSH
19988: FOR_TO
19989: IFFALSE 20109
// begin for j = 1 to array do
19991: LD_ADDR_VAR 0 7
19995: PUSH
19996: DOUBLE
19997: LD_INT 1
19999: DEC
20000: ST_TO_ADDR
20001: LD_VAR 0 1
20005: PUSH
20006: FOR_TO
20007: IFFALSE 20095
// begin k := j + d ;
20009: LD_ADDR_VAR 0 8
20013: PUSH
20014: LD_VAR 0 7
20018: PUSH
20019: LD_VAR 0 9
20023: PLUS
20024: ST_TO_ADDR
// if k > array then
20025: LD_VAR 0 8
20029: PUSH
20030: LD_VAR 0 1
20034: GREATER
20035: IFFALSE 20045
// k := 1 ;
20037: LD_ADDR_VAR 0 8
20041: PUSH
20042: LD_INT 1
20044: ST_TO_ADDR
// if not k then
20045: LD_VAR 0 8
20049: NOT
20050: IFFALSE 20062
// k := array ;
20052: LD_ADDR_VAR 0 8
20056: PUSH
20057: LD_VAR 0 1
20061: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
20062: LD_ADDR_VAR 0 10
20066: PUSH
20067: LD_VAR 0 10
20071: PPUSH
20072: LD_VAR 0 8
20076: PPUSH
20077: LD_VAR 0 1
20081: PUSH
20082: LD_VAR 0 7
20086: ARRAY
20087: PPUSH
20088: CALL_OW 1
20092: ST_TO_ADDR
// end ;
20093: GO 20006
20095: POP
20096: POP
// array := tmp ;
20097: LD_ADDR_VAR 0 1
20101: PUSH
20102: LD_VAR 0 10
20106: ST_TO_ADDR
// end ;
20107: GO 19988
20109: POP
20110: POP
// result := array ;
20111: LD_ADDR_VAR 0 5
20115: PUSH
20116: LD_VAR 0 1
20120: ST_TO_ADDR
// end ;
20121: LD_VAR 0 5
20125: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
20126: LD_INT 0
20128: PPUSH
20129: PPUSH
// result := 0 ;
20130: LD_ADDR_VAR 0 3
20134: PUSH
20135: LD_INT 0
20137: ST_TO_ADDR
// if not array or not value in array then
20138: LD_VAR 0 1
20142: NOT
20143: PUSH
20144: LD_VAR 0 2
20148: PUSH
20149: LD_VAR 0 1
20153: IN
20154: NOT
20155: OR
20156: IFFALSE 20160
// exit ;
20158: GO 20214
// for i = 1 to array do
20160: LD_ADDR_VAR 0 4
20164: PUSH
20165: DOUBLE
20166: LD_INT 1
20168: DEC
20169: ST_TO_ADDR
20170: LD_VAR 0 1
20174: PUSH
20175: FOR_TO
20176: IFFALSE 20212
// if value = array [ i ] then
20178: LD_VAR 0 2
20182: PUSH
20183: LD_VAR 0 1
20187: PUSH
20188: LD_VAR 0 4
20192: ARRAY
20193: EQUAL
20194: IFFALSE 20210
// begin result := i ;
20196: LD_ADDR_VAR 0 3
20200: PUSH
20201: LD_VAR 0 4
20205: ST_TO_ADDR
// exit ;
20206: POP
20207: POP
20208: GO 20214
// end ;
20210: GO 20175
20212: POP
20213: POP
// end ;
20214: LD_VAR 0 3
20218: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
20219: LD_INT 0
20221: PPUSH
// vc_chassis := chassis ;
20222: LD_ADDR_OWVAR 37
20226: PUSH
20227: LD_VAR 0 1
20231: ST_TO_ADDR
// vc_engine := engine ;
20232: LD_ADDR_OWVAR 39
20236: PUSH
20237: LD_VAR 0 2
20241: ST_TO_ADDR
// vc_control := control ;
20242: LD_ADDR_OWVAR 38
20246: PUSH
20247: LD_VAR 0 3
20251: ST_TO_ADDR
// vc_weapon := weapon ;
20252: LD_ADDR_OWVAR 40
20256: PUSH
20257: LD_VAR 0 4
20261: ST_TO_ADDR
// vc_fuel_battery := fuel ;
20262: LD_ADDR_OWVAR 41
20266: PUSH
20267: LD_VAR 0 5
20271: ST_TO_ADDR
// end ;
20272: LD_VAR 0 6
20276: RET
// export function WantPlant ( unit ) ; var task ; begin
20277: LD_INT 0
20279: PPUSH
20280: PPUSH
// result := false ;
20281: LD_ADDR_VAR 0 2
20285: PUSH
20286: LD_INT 0
20288: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
20289: LD_ADDR_VAR 0 3
20293: PUSH
20294: LD_VAR 0 1
20298: PPUSH
20299: CALL_OW 437
20303: ST_TO_ADDR
// if task then
20304: LD_VAR 0 3
20308: IFFALSE 20336
// if task [ 1 ] [ 1 ] = p then
20310: LD_VAR 0 3
20314: PUSH
20315: LD_INT 1
20317: ARRAY
20318: PUSH
20319: LD_INT 1
20321: ARRAY
20322: PUSH
20323: LD_STRING p
20325: EQUAL
20326: IFFALSE 20336
// result := true ;
20328: LD_ADDR_VAR 0 2
20332: PUSH
20333: LD_INT 1
20335: ST_TO_ADDR
// end ;
20336: LD_VAR 0 2
20340: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
20341: LD_INT 0
20343: PPUSH
20344: PPUSH
20345: PPUSH
20346: PPUSH
// if pos < 1 then
20347: LD_VAR 0 2
20351: PUSH
20352: LD_INT 1
20354: LESS
20355: IFFALSE 20359
// exit ;
20357: GO 20662
// if pos = 1 then
20359: LD_VAR 0 2
20363: PUSH
20364: LD_INT 1
20366: EQUAL
20367: IFFALSE 20400
// result := Replace ( arr , pos [ 1 ] , value ) else
20369: LD_ADDR_VAR 0 4
20373: PUSH
20374: LD_VAR 0 1
20378: PPUSH
20379: LD_VAR 0 2
20383: PUSH
20384: LD_INT 1
20386: ARRAY
20387: PPUSH
20388: LD_VAR 0 3
20392: PPUSH
20393: CALL_OW 1
20397: ST_TO_ADDR
20398: GO 20662
// begin tmp := arr ;
20400: LD_ADDR_VAR 0 6
20404: PUSH
20405: LD_VAR 0 1
20409: ST_TO_ADDR
// s_arr := [ tmp ] ;
20410: LD_ADDR_VAR 0 7
20414: PUSH
20415: LD_VAR 0 6
20419: PUSH
20420: EMPTY
20421: LIST
20422: ST_TO_ADDR
// for i = 1 to pos - 1 do
20423: LD_ADDR_VAR 0 5
20427: PUSH
20428: DOUBLE
20429: LD_INT 1
20431: DEC
20432: ST_TO_ADDR
20433: LD_VAR 0 2
20437: PUSH
20438: LD_INT 1
20440: MINUS
20441: PUSH
20442: FOR_TO
20443: IFFALSE 20488
// begin tmp := tmp [ pos [ i ] ] ;
20445: LD_ADDR_VAR 0 6
20449: PUSH
20450: LD_VAR 0 6
20454: PUSH
20455: LD_VAR 0 2
20459: PUSH
20460: LD_VAR 0 5
20464: ARRAY
20465: ARRAY
20466: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
20467: LD_ADDR_VAR 0 7
20471: PUSH
20472: LD_VAR 0 7
20476: PUSH
20477: LD_VAR 0 6
20481: PUSH
20482: EMPTY
20483: LIST
20484: ADD
20485: ST_TO_ADDR
// end ;
20486: GO 20442
20488: POP
20489: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
20490: LD_ADDR_VAR 0 6
20494: PUSH
20495: LD_VAR 0 6
20499: PPUSH
20500: LD_VAR 0 2
20504: PUSH
20505: LD_VAR 0 2
20509: ARRAY
20510: PPUSH
20511: LD_VAR 0 3
20515: PPUSH
20516: CALL_OW 1
20520: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
20521: LD_ADDR_VAR 0 7
20525: PUSH
20526: LD_VAR 0 7
20530: PPUSH
20531: LD_VAR 0 7
20535: PPUSH
20536: LD_VAR 0 6
20540: PPUSH
20541: CALL_OW 1
20545: ST_TO_ADDR
// for i = s_arr downto 2 do
20546: LD_ADDR_VAR 0 5
20550: PUSH
20551: DOUBLE
20552: LD_VAR 0 7
20556: INC
20557: ST_TO_ADDR
20558: LD_INT 2
20560: PUSH
20561: FOR_DOWNTO
20562: IFFALSE 20646
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
20564: LD_ADDR_VAR 0 6
20568: PUSH
20569: LD_VAR 0 7
20573: PUSH
20574: LD_VAR 0 5
20578: PUSH
20579: LD_INT 1
20581: MINUS
20582: ARRAY
20583: PPUSH
20584: LD_VAR 0 2
20588: PUSH
20589: LD_VAR 0 5
20593: PUSH
20594: LD_INT 1
20596: MINUS
20597: ARRAY
20598: PPUSH
20599: LD_VAR 0 7
20603: PUSH
20604: LD_VAR 0 5
20608: ARRAY
20609: PPUSH
20610: CALL_OW 1
20614: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
20615: LD_ADDR_VAR 0 7
20619: PUSH
20620: LD_VAR 0 7
20624: PPUSH
20625: LD_VAR 0 5
20629: PUSH
20630: LD_INT 1
20632: MINUS
20633: PPUSH
20634: LD_VAR 0 6
20638: PPUSH
20639: CALL_OW 1
20643: ST_TO_ADDR
// end ;
20644: GO 20561
20646: POP
20647: POP
// result := s_arr [ 1 ] ;
20648: LD_ADDR_VAR 0 4
20652: PUSH
20653: LD_VAR 0 7
20657: PUSH
20658: LD_INT 1
20660: ARRAY
20661: ST_TO_ADDR
// end ; end ;
20662: LD_VAR 0 4
20666: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
20667: LD_INT 0
20669: PPUSH
20670: PPUSH
// if not list then
20671: LD_VAR 0 1
20675: NOT
20676: IFFALSE 20680
// exit ;
20678: GO 20771
// i := list [ pos1 ] ;
20680: LD_ADDR_VAR 0 5
20684: PUSH
20685: LD_VAR 0 1
20689: PUSH
20690: LD_VAR 0 2
20694: ARRAY
20695: ST_TO_ADDR
// if not i then
20696: LD_VAR 0 5
20700: NOT
20701: IFFALSE 20705
// exit ;
20703: GO 20771
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
20705: LD_ADDR_VAR 0 1
20709: PUSH
20710: LD_VAR 0 1
20714: PPUSH
20715: LD_VAR 0 2
20719: PPUSH
20720: LD_VAR 0 1
20724: PUSH
20725: LD_VAR 0 3
20729: ARRAY
20730: PPUSH
20731: CALL_OW 1
20735: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
20736: LD_ADDR_VAR 0 1
20740: PUSH
20741: LD_VAR 0 1
20745: PPUSH
20746: LD_VAR 0 3
20750: PPUSH
20751: LD_VAR 0 5
20755: PPUSH
20756: CALL_OW 1
20760: ST_TO_ADDR
// result := list ;
20761: LD_ADDR_VAR 0 4
20765: PUSH
20766: LD_VAR 0 1
20770: ST_TO_ADDR
// end ;
20771: LD_VAR 0 4
20775: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
20776: LD_INT 0
20778: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
20779: LD_ADDR_VAR 0 5
20783: PUSH
20784: LD_VAR 0 1
20788: PPUSH
20789: CALL_OW 250
20793: PPUSH
20794: LD_VAR 0 1
20798: PPUSH
20799: CALL_OW 251
20803: PPUSH
20804: LD_VAR 0 2
20808: PPUSH
20809: LD_VAR 0 3
20813: PPUSH
20814: LD_VAR 0 4
20818: PPUSH
20819: CALL 21197 0 5
20823: ST_TO_ADDR
// end ;
20824: LD_VAR 0 5
20828: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
20829: LD_INT 0
20831: PPUSH
20832: PPUSH
20833: PPUSH
20834: PPUSH
// if not list or not unit then
20835: LD_VAR 0 2
20839: NOT
20840: PUSH
20841: LD_VAR 0 1
20845: NOT
20846: OR
20847: IFFALSE 20851
// exit ;
20849: GO 21192
// result := [ ] ;
20851: LD_ADDR_VAR 0 5
20855: PUSH
20856: EMPTY
20857: ST_TO_ADDR
// for i in list do
20858: LD_ADDR_VAR 0 6
20862: PUSH
20863: LD_VAR 0 2
20867: PUSH
20868: FOR_IN
20869: IFFALSE 21087
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
20871: LD_ADDR_VAR 0 8
20875: PUSH
20876: LD_VAR 0 1
20880: PPUSH
20881: LD_VAR 0 6
20885: PUSH
20886: LD_INT 1
20888: ARRAY
20889: PPUSH
20890: LD_VAR 0 6
20894: PUSH
20895: LD_INT 2
20897: ARRAY
20898: PPUSH
20899: CALL_OW 297
20903: ST_TO_ADDR
// if not Count ( result ) then
20904: LD_VAR 0 5
20908: PPUSH
20909: CALL 17481 0 1
20913: NOT
20914: IFFALSE 20947
// begin result := Join ( result , [ i , tmp ] ) ;
20916: LD_ADDR_VAR 0 5
20920: PUSH
20921: LD_VAR 0 5
20925: PPUSH
20926: LD_VAR 0 6
20930: PUSH
20931: LD_VAR 0 8
20935: PUSH
20936: EMPTY
20937: LIST
20938: LIST
20939: PPUSH
20940: CALL 53090 0 2
20944: ST_TO_ADDR
// continue ;
20945: GO 20868
// end ; if result [ result ] [ 2 ] <= tmp then
20947: LD_VAR 0 5
20951: PUSH
20952: LD_VAR 0 5
20956: ARRAY
20957: PUSH
20958: LD_INT 2
20960: ARRAY
20961: PUSH
20962: LD_VAR 0 8
20966: LESSEQUAL
20967: IFFALSE 21000
// result := Join ( result , [ i , tmp ] ) else
20969: LD_ADDR_VAR 0 5
20973: PUSH
20974: LD_VAR 0 5
20978: PPUSH
20979: LD_VAR 0 6
20983: PUSH
20984: LD_VAR 0 8
20988: PUSH
20989: EMPTY
20990: LIST
20991: LIST
20992: PPUSH
20993: CALL 53090 0 2
20997: ST_TO_ADDR
20998: GO 21085
// begin for j := 1 to Count ( result ) do
21000: LD_ADDR_VAR 0 7
21004: PUSH
21005: DOUBLE
21006: LD_INT 1
21008: DEC
21009: ST_TO_ADDR
21010: LD_VAR 0 5
21014: PPUSH
21015: CALL 17481 0 1
21019: PUSH
21020: FOR_TO
21021: IFFALSE 21083
// begin if tmp < result [ j ] [ 2 ] then
21023: LD_VAR 0 8
21027: PUSH
21028: LD_VAR 0 5
21032: PUSH
21033: LD_VAR 0 7
21037: ARRAY
21038: PUSH
21039: LD_INT 2
21041: ARRAY
21042: LESS
21043: IFFALSE 21081
// begin result := Insert ( result , j , [ i , tmp ] ) ;
21045: LD_ADDR_VAR 0 5
21049: PUSH
21050: LD_VAR 0 5
21054: PPUSH
21055: LD_VAR 0 7
21059: PPUSH
21060: LD_VAR 0 6
21064: PUSH
21065: LD_VAR 0 8
21069: PUSH
21070: EMPTY
21071: LIST
21072: LIST
21073: PPUSH
21074: CALL_OW 2
21078: ST_TO_ADDR
// break ;
21079: GO 21083
// end ; end ;
21081: GO 21020
21083: POP
21084: POP
// end ; end ;
21085: GO 20868
21087: POP
21088: POP
// if result and not asc then
21089: LD_VAR 0 5
21093: PUSH
21094: LD_VAR 0 3
21098: NOT
21099: AND
21100: IFFALSE 21117
// result := ReverseArray ( result ) ;
21102: LD_ADDR_VAR 0 5
21106: PUSH
21107: LD_VAR 0 5
21111: PPUSH
21112: CALL 48357 0 1
21116: ST_TO_ADDR
// tmp := [ ] ;
21117: LD_ADDR_VAR 0 8
21121: PUSH
21122: EMPTY
21123: ST_TO_ADDR
// if mode then
21124: LD_VAR 0 4
21128: IFFALSE 21192
// begin for i := 1 to result do
21130: LD_ADDR_VAR 0 6
21134: PUSH
21135: DOUBLE
21136: LD_INT 1
21138: DEC
21139: ST_TO_ADDR
21140: LD_VAR 0 5
21144: PUSH
21145: FOR_TO
21146: IFFALSE 21180
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
21148: LD_ADDR_VAR 0 8
21152: PUSH
21153: LD_VAR 0 8
21157: PPUSH
21158: LD_VAR 0 5
21162: PUSH
21163: LD_VAR 0 6
21167: ARRAY
21168: PUSH
21169: LD_INT 1
21171: ARRAY
21172: PPUSH
21173: CALL 53090 0 2
21177: ST_TO_ADDR
21178: GO 21145
21180: POP
21181: POP
// result := tmp ;
21182: LD_ADDR_VAR 0 5
21186: PUSH
21187: LD_VAR 0 8
21191: ST_TO_ADDR
// end ; end ;
21192: LD_VAR 0 5
21196: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
21197: LD_INT 0
21199: PPUSH
21200: PPUSH
21201: PPUSH
21202: PPUSH
// if not list then
21203: LD_VAR 0 3
21207: NOT
21208: IFFALSE 21212
// exit ;
21210: GO 21600
// result := [ ] ;
21212: LD_ADDR_VAR 0 6
21216: PUSH
21217: EMPTY
21218: ST_TO_ADDR
// for i in list do
21219: LD_ADDR_VAR 0 7
21223: PUSH
21224: LD_VAR 0 3
21228: PUSH
21229: FOR_IN
21230: IFFALSE 21432
// begin tmp := GetDistUnitXY ( i , x , y ) ;
21232: LD_ADDR_VAR 0 9
21236: PUSH
21237: LD_VAR 0 7
21241: PPUSH
21242: LD_VAR 0 1
21246: PPUSH
21247: LD_VAR 0 2
21251: PPUSH
21252: CALL_OW 297
21256: ST_TO_ADDR
// if not result then
21257: LD_VAR 0 6
21261: NOT
21262: IFFALSE 21288
// result := [ [ i , tmp ] ] else
21264: LD_ADDR_VAR 0 6
21268: PUSH
21269: LD_VAR 0 7
21273: PUSH
21274: LD_VAR 0 9
21278: PUSH
21279: EMPTY
21280: LIST
21281: LIST
21282: PUSH
21283: EMPTY
21284: LIST
21285: ST_TO_ADDR
21286: GO 21430
// begin if result [ result ] [ 2 ] <= tmp then
21288: LD_VAR 0 6
21292: PUSH
21293: LD_VAR 0 6
21297: ARRAY
21298: PUSH
21299: LD_INT 2
21301: ARRAY
21302: PUSH
21303: LD_VAR 0 9
21307: LESSEQUAL
21308: IFFALSE 21350
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
21310: LD_ADDR_VAR 0 6
21314: PUSH
21315: LD_VAR 0 6
21319: PPUSH
21320: LD_VAR 0 6
21324: PUSH
21325: LD_INT 1
21327: PLUS
21328: PPUSH
21329: LD_VAR 0 7
21333: PUSH
21334: LD_VAR 0 9
21338: PUSH
21339: EMPTY
21340: LIST
21341: LIST
21342: PPUSH
21343: CALL_OW 2
21347: ST_TO_ADDR
21348: GO 21430
// for j := 1 to result do
21350: LD_ADDR_VAR 0 8
21354: PUSH
21355: DOUBLE
21356: LD_INT 1
21358: DEC
21359: ST_TO_ADDR
21360: LD_VAR 0 6
21364: PUSH
21365: FOR_TO
21366: IFFALSE 21428
// begin if tmp < result [ j ] [ 2 ] then
21368: LD_VAR 0 9
21372: PUSH
21373: LD_VAR 0 6
21377: PUSH
21378: LD_VAR 0 8
21382: ARRAY
21383: PUSH
21384: LD_INT 2
21386: ARRAY
21387: LESS
21388: IFFALSE 21426
// begin result := Insert ( result , j , [ i , tmp ] ) ;
21390: LD_ADDR_VAR 0 6
21394: PUSH
21395: LD_VAR 0 6
21399: PPUSH
21400: LD_VAR 0 8
21404: PPUSH
21405: LD_VAR 0 7
21409: PUSH
21410: LD_VAR 0 9
21414: PUSH
21415: EMPTY
21416: LIST
21417: LIST
21418: PPUSH
21419: CALL_OW 2
21423: ST_TO_ADDR
// break ;
21424: GO 21428
// end ; end ;
21426: GO 21365
21428: POP
21429: POP
// end ; end ;
21430: GO 21229
21432: POP
21433: POP
// if result and not asc then
21434: LD_VAR 0 6
21438: PUSH
21439: LD_VAR 0 4
21443: NOT
21444: AND
21445: IFFALSE 21520
// begin tmp := result ;
21447: LD_ADDR_VAR 0 9
21451: PUSH
21452: LD_VAR 0 6
21456: ST_TO_ADDR
// for i = tmp downto 1 do
21457: LD_ADDR_VAR 0 7
21461: PUSH
21462: DOUBLE
21463: LD_VAR 0 9
21467: INC
21468: ST_TO_ADDR
21469: LD_INT 1
21471: PUSH
21472: FOR_DOWNTO
21473: IFFALSE 21518
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
21475: LD_ADDR_VAR 0 6
21479: PUSH
21480: LD_VAR 0 6
21484: PPUSH
21485: LD_VAR 0 9
21489: PUSH
21490: LD_VAR 0 7
21494: MINUS
21495: PUSH
21496: LD_INT 1
21498: PLUS
21499: PPUSH
21500: LD_VAR 0 9
21504: PUSH
21505: LD_VAR 0 7
21509: ARRAY
21510: PPUSH
21511: CALL_OW 1
21515: ST_TO_ADDR
21516: GO 21472
21518: POP
21519: POP
// end ; tmp := [ ] ;
21520: LD_ADDR_VAR 0 9
21524: PUSH
21525: EMPTY
21526: ST_TO_ADDR
// if mode then
21527: LD_VAR 0 5
21531: IFFALSE 21600
// begin for i = 1 to result do
21533: LD_ADDR_VAR 0 7
21537: PUSH
21538: DOUBLE
21539: LD_INT 1
21541: DEC
21542: ST_TO_ADDR
21543: LD_VAR 0 6
21547: PUSH
21548: FOR_TO
21549: IFFALSE 21588
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
21551: LD_ADDR_VAR 0 9
21555: PUSH
21556: LD_VAR 0 9
21560: PPUSH
21561: LD_VAR 0 7
21565: PPUSH
21566: LD_VAR 0 6
21570: PUSH
21571: LD_VAR 0 7
21575: ARRAY
21576: PUSH
21577: LD_INT 1
21579: ARRAY
21580: PPUSH
21581: CALL_OW 1
21585: ST_TO_ADDR
21586: GO 21548
21588: POP
21589: POP
// result := tmp ;
21590: LD_ADDR_VAR 0 6
21594: PUSH
21595: LD_VAR 0 9
21599: ST_TO_ADDR
// end ; end ;
21600: LD_VAR 0 6
21604: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
21605: LD_INT 0
21607: PPUSH
21608: PPUSH
21609: PPUSH
21610: PPUSH
21611: PPUSH
21612: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
21613: LD_ADDR_VAR 0 5
21617: PUSH
21618: LD_INT 0
21620: PUSH
21621: LD_INT 0
21623: PUSH
21624: LD_INT 0
21626: PUSH
21627: EMPTY
21628: PUSH
21629: EMPTY
21630: LIST
21631: LIST
21632: LIST
21633: LIST
21634: ST_TO_ADDR
// if not x or not y then
21635: LD_VAR 0 2
21639: NOT
21640: PUSH
21641: LD_VAR 0 3
21645: NOT
21646: OR
21647: IFFALSE 21651
// exit ;
21649: GO 23301
// if not range then
21651: LD_VAR 0 4
21655: NOT
21656: IFFALSE 21666
// range := 10 ;
21658: LD_ADDR_VAR 0 4
21662: PUSH
21663: LD_INT 10
21665: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21666: LD_ADDR_VAR 0 8
21670: PUSH
21671: LD_INT 81
21673: PUSH
21674: LD_VAR 0 1
21678: PUSH
21679: EMPTY
21680: LIST
21681: LIST
21682: PUSH
21683: LD_INT 92
21685: PUSH
21686: LD_VAR 0 2
21690: PUSH
21691: LD_VAR 0 3
21695: PUSH
21696: LD_VAR 0 4
21700: PUSH
21701: EMPTY
21702: LIST
21703: LIST
21704: LIST
21705: LIST
21706: PUSH
21707: LD_INT 3
21709: PUSH
21710: LD_INT 21
21712: PUSH
21713: LD_INT 3
21715: PUSH
21716: EMPTY
21717: LIST
21718: LIST
21719: PUSH
21720: EMPTY
21721: LIST
21722: LIST
21723: PUSH
21724: EMPTY
21725: LIST
21726: LIST
21727: LIST
21728: PPUSH
21729: CALL_OW 69
21733: ST_TO_ADDR
// if not tmp then
21734: LD_VAR 0 8
21738: NOT
21739: IFFALSE 21743
// exit ;
21741: GO 23301
// for i in tmp do
21743: LD_ADDR_VAR 0 6
21747: PUSH
21748: LD_VAR 0 8
21752: PUSH
21753: FOR_IN
21754: IFFALSE 23276
// begin points := [ 0 , 0 , 0 ] ;
21756: LD_ADDR_VAR 0 9
21760: PUSH
21761: LD_INT 0
21763: PUSH
21764: LD_INT 0
21766: PUSH
21767: LD_INT 0
21769: PUSH
21770: EMPTY
21771: LIST
21772: LIST
21773: LIST
21774: ST_TO_ADDR
// bpoints := 1 ;
21775: LD_ADDR_VAR 0 10
21779: PUSH
21780: LD_INT 1
21782: ST_TO_ADDR
// case GetType ( i ) of unit_human :
21783: LD_VAR 0 6
21787: PPUSH
21788: CALL_OW 247
21792: PUSH
21793: LD_INT 1
21795: DOUBLE
21796: EQUAL
21797: IFTRUE 21801
21799: GO 22379
21801: POP
// begin if GetClass ( i ) = 1 then
21802: LD_VAR 0 6
21806: PPUSH
21807: CALL_OW 257
21811: PUSH
21812: LD_INT 1
21814: EQUAL
21815: IFFALSE 21836
// points := [ 10 , 5 , 3 ] ;
21817: LD_ADDR_VAR 0 9
21821: PUSH
21822: LD_INT 10
21824: PUSH
21825: LD_INT 5
21827: PUSH
21828: LD_INT 3
21830: PUSH
21831: EMPTY
21832: LIST
21833: LIST
21834: LIST
21835: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
21836: LD_VAR 0 6
21840: PPUSH
21841: CALL_OW 257
21845: PUSH
21846: LD_INT 2
21848: PUSH
21849: LD_INT 3
21851: PUSH
21852: LD_INT 4
21854: PUSH
21855: EMPTY
21856: LIST
21857: LIST
21858: LIST
21859: IN
21860: IFFALSE 21881
// points := [ 3 , 2 , 1 ] ;
21862: LD_ADDR_VAR 0 9
21866: PUSH
21867: LD_INT 3
21869: PUSH
21870: LD_INT 2
21872: PUSH
21873: LD_INT 1
21875: PUSH
21876: EMPTY
21877: LIST
21878: LIST
21879: LIST
21880: ST_TO_ADDR
// if GetClass ( i ) = 5 then
21881: LD_VAR 0 6
21885: PPUSH
21886: CALL_OW 257
21890: PUSH
21891: LD_INT 5
21893: EQUAL
21894: IFFALSE 21915
// points := [ 130 , 5 , 2 ] ;
21896: LD_ADDR_VAR 0 9
21900: PUSH
21901: LD_INT 130
21903: PUSH
21904: LD_INT 5
21906: PUSH
21907: LD_INT 2
21909: PUSH
21910: EMPTY
21911: LIST
21912: LIST
21913: LIST
21914: ST_TO_ADDR
// if GetClass ( i ) = 8 then
21915: LD_VAR 0 6
21919: PPUSH
21920: CALL_OW 257
21924: PUSH
21925: LD_INT 8
21927: EQUAL
21928: IFFALSE 21949
// points := [ 35 , 35 , 30 ] ;
21930: LD_ADDR_VAR 0 9
21934: PUSH
21935: LD_INT 35
21937: PUSH
21938: LD_INT 35
21940: PUSH
21941: LD_INT 30
21943: PUSH
21944: EMPTY
21945: LIST
21946: LIST
21947: LIST
21948: ST_TO_ADDR
// if GetClass ( i ) = 9 then
21949: LD_VAR 0 6
21953: PPUSH
21954: CALL_OW 257
21958: PUSH
21959: LD_INT 9
21961: EQUAL
21962: IFFALSE 21983
// points := [ 20 , 55 , 40 ] ;
21964: LD_ADDR_VAR 0 9
21968: PUSH
21969: LD_INT 20
21971: PUSH
21972: LD_INT 55
21974: PUSH
21975: LD_INT 40
21977: PUSH
21978: EMPTY
21979: LIST
21980: LIST
21981: LIST
21982: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
21983: LD_VAR 0 6
21987: PPUSH
21988: CALL_OW 257
21992: PUSH
21993: LD_INT 12
21995: PUSH
21996: LD_INT 16
21998: PUSH
21999: EMPTY
22000: LIST
22001: LIST
22002: IN
22003: IFFALSE 22024
// points := [ 5 , 3 , 2 ] ;
22005: LD_ADDR_VAR 0 9
22009: PUSH
22010: LD_INT 5
22012: PUSH
22013: LD_INT 3
22015: PUSH
22016: LD_INT 2
22018: PUSH
22019: EMPTY
22020: LIST
22021: LIST
22022: LIST
22023: ST_TO_ADDR
// if GetClass ( i ) = 17 then
22024: LD_VAR 0 6
22028: PPUSH
22029: CALL_OW 257
22033: PUSH
22034: LD_INT 17
22036: EQUAL
22037: IFFALSE 22058
// points := [ 100 , 50 , 75 ] ;
22039: LD_ADDR_VAR 0 9
22043: PUSH
22044: LD_INT 100
22046: PUSH
22047: LD_INT 50
22049: PUSH
22050: LD_INT 75
22052: PUSH
22053: EMPTY
22054: LIST
22055: LIST
22056: LIST
22057: ST_TO_ADDR
// if GetClass ( i ) = 15 then
22058: LD_VAR 0 6
22062: PPUSH
22063: CALL_OW 257
22067: PUSH
22068: LD_INT 15
22070: EQUAL
22071: IFFALSE 22092
// points := [ 10 , 5 , 3 ] ;
22073: LD_ADDR_VAR 0 9
22077: PUSH
22078: LD_INT 10
22080: PUSH
22081: LD_INT 5
22083: PUSH
22084: LD_INT 3
22086: PUSH
22087: EMPTY
22088: LIST
22089: LIST
22090: LIST
22091: ST_TO_ADDR
// if GetClass ( i ) = 14 then
22092: LD_VAR 0 6
22096: PPUSH
22097: CALL_OW 257
22101: PUSH
22102: LD_INT 14
22104: EQUAL
22105: IFFALSE 22126
// points := [ 10 , 0 , 0 ] ;
22107: LD_ADDR_VAR 0 9
22111: PUSH
22112: LD_INT 10
22114: PUSH
22115: LD_INT 0
22117: PUSH
22118: LD_INT 0
22120: PUSH
22121: EMPTY
22122: LIST
22123: LIST
22124: LIST
22125: ST_TO_ADDR
// if GetClass ( i ) = 11 then
22126: LD_VAR 0 6
22130: PPUSH
22131: CALL_OW 257
22135: PUSH
22136: LD_INT 11
22138: EQUAL
22139: IFFALSE 22160
// points := [ 30 , 10 , 5 ] ;
22141: LD_ADDR_VAR 0 9
22145: PUSH
22146: LD_INT 30
22148: PUSH
22149: LD_INT 10
22151: PUSH
22152: LD_INT 5
22154: PUSH
22155: EMPTY
22156: LIST
22157: LIST
22158: LIST
22159: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
22160: LD_VAR 0 1
22164: PPUSH
22165: LD_INT 5
22167: PPUSH
22168: CALL_OW 321
22172: PUSH
22173: LD_INT 2
22175: EQUAL
22176: IFFALSE 22193
// bpoints := bpoints * 1.8 ;
22178: LD_ADDR_VAR 0 10
22182: PUSH
22183: LD_VAR 0 10
22187: PUSH
22188: LD_REAL  1.80000000000000E+0000
22191: MUL
22192: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
22193: LD_VAR 0 6
22197: PPUSH
22198: CALL_OW 257
22202: PUSH
22203: LD_INT 1
22205: PUSH
22206: LD_INT 2
22208: PUSH
22209: LD_INT 3
22211: PUSH
22212: LD_INT 4
22214: PUSH
22215: EMPTY
22216: LIST
22217: LIST
22218: LIST
22219: LIST
22220: IN
22221: PUSH
22222: LD_VAR 0 1
22226: PPUSH
22227: LD_INT 51
22229: PPUSH
22230: CALL_OW 321
22234: PUSH
22235: LD_INT 2
22237: EQUAL
22238: AND
22239: IFFALSE 22256
// bpoints := bpoints * 1.2 ;
22241: LD_ADDR_VAR 0 10
22245: PUSH
22246: LD_VAR 0 10
22250: PUSH
22251: LD_REAL  1.20000000000000E+0000
22254: MUL
22255: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
22256: LD_VAR 0 6
22260: PPUSH
22261: CALL_OW 257
22265: PUSH
22266: LD_INT 5
22268: PUSH
22269: LD_INT 7
22271: PUSH
22272: LD_INT 9
22274: PUSH
22275: EMPTY
22276: LIST
22277: LIST
22278: LIST
22279: IN
22280: PUSH
22281: LD_VAR 0 1
22285: PPUSH
22286: LD_INT 52
22288: PPUSH
22289: CALL_OW 321
22293: PUSH
22294: LD_INT 2
22296: EQUAL
22297: AND
22298: IFFALSE 22315
// bpoints := bpoints * 1.5 ;
22300: LD_ADDR_VAR 0 10
22304: PUSH
22305: LD_VAR 0 10
22309: PUSH
22310: LD_REAL  1.50000000000000E+0000
22313: MUL
22314: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
22315: LD_VAR 0 1
22319: PPUSH
22320: LD_INT 66
22322: PPUSH
22323: CALL_OW 321
22327: PUSH
22328: LD_INT 2
22330: EQUAL
22331: IFFALSE 22348
// bpoints := bpoints * 1.1 ;
22333: LD_ADDR_VAR 0 10
22337: PUSH
22338: LD_VAR 0 10
22342: PUSH
22343: LD_REAL  1.10000000000000E+0000
22346: MUL
22347: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
22348: LD_ADDR_VAR 0 10
22352: PUSH
22353: LD_VAR 0 10
22357: PUSH
22358: LD_VAR 0 6
22362: PPUSH
22363: LD_INT 1
22365: PPUSH
22366: CALL_OW 259
22370: PUSH
22371: LD_REAL  1.15000000000000E+0000
22374: MUL
22375: MUL
22376: ST_TO_ADDR
// end ; unit_vehicle :
22377: GO 23205
22379: LD_INT 2
22381: DOUBLE
22382: EQUAL
22383: IFTRUE 22387
22385: GO 23193
22387: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
22388: LD_VAR 0 6
22392: PPUSH
22393: CALL_OW 264
22397: PUSH
22398: LD_INT 2
22400: PUSH
22401: LD_INT 42
22403: PUSH
22404: LD_INT 24
22406: PUSH
22407: EMPTY
22408: LIST
22409: LIST
22410: LIST
22411: IN
22412: IFFALSE 22433
// points := [ 25 , 5 , 3 ] ;
22414: LD_ADDR_VAR 0 9
22418: PUSH
22419: LD_INT 25
22421: PUSH
22422: LD_INT 5
22424: PUSH
22425: LD_INT 3
22427: PUSH
22428: EMPTY
22429: LIST
22430: LIST
22431: LIST
22432: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
22433: LD_VAR 0 6
22437: PPUSH
22438: CALL_OW 264
22442: PUSH
22443: LD_INT 4
22445: PUSH
22446: LD_INT 43
22448: PUSH
22449: LD_INT 25
22451: PUSH
22452: EMPTY
22453: LIST
22454: LIST
22455: LIST
22456: IN
22457: IFFALSE 22478
// points := [ 40 , 15 , 5 ] ;
22459: LD_ADDR_VAR 0 9
22463: PUSH
22464: LD_INT 40
22466: PUSH
22467: LD_INT 15
22469: PUSH
22470: LD_INT 5
22472: PUSH
22473: EMPTY
22474: LIST
22475: LIST
22476: LIST
22477: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
22478: LD_VAR 0 6
22482: PPUSH
22483: CALL_OW 264
22487: PUSH
22488: LD_INT 3
22490: PUSH
22491: LD_INT 23
22493: PUSH
22494: EMPTY
22495: LIST
22496: LIST
22497: IN
22498: IFFALSE 22519
// points := [ 7 , 25 , 8 ] ;
22500: LD_ADDR_VAR 0 9
22504: PUSH
22505: LD_INT 7
22507: PUSH
22508: LD_INT 25
22510: PUSH
22511: LD_INT 8
22513: PUSH
22514: EMPTY
22515: LIST
22516: LIST
22517: LIST
22518: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
22519: LD_VAR 0 6
22523: PPUSH
22524: CALL_OW 264
22528: PUSH
22529: LD_INT 5
22531: PUSH
22532: LD_INT 27
22534: PUSH
22535: LD_INT 44
22537: PUSH
22538: EMPTY
22539: LIST
22540: LIST
22541: LIST
22542: IN
22543: IFFALSE 22564
// points := [ 14 , 50 , 16 ] ;
22545: LD_ADDR_VAR 0 9
22549: PUSH
22550: LD_INT 14
22552: PUSH
22553: LD_INT 50
22555: PUSH
22556: LD_INT 16
22558: PUSH
22559: EMPTY
22560: LIST
22561: LIST
22562: LIST
22563: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
22564: LD_VAR 0 6
22568: PPUSH
22569: CALL_OW 264
22573: PUSH
22574: LD_INT 6
22576: PUSH
22577: LD_INT 46
22579: PUSH
22580: EMPTY
22581: LIST
22582: LIST
22583: IN
22584: IFFALSE 22605
// points := [ 32 , 120 , 70 ] ;
22586: LD_ADDR_VAR 0 9
22590: PUSH
22591: LD_INT 32
22593: PUSH
22594: LD_INT 120
22596: PUSH
22597: LD_INT 70
22599: PUSH
22600: EMPTY
22601: LIST
22602: LIST
22603: LIST
22604: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
22605: LD_VAR 0 6
22609: PPUSH
22610: CALL_OW 264
22614: PUSH
22615: LD_INT 7
22617: PUSH
22618: LD_INT 28
22620: PUSH
22621: LD_INT 45
22623: PUSH
22624: LD_INT 92
22626: PUSH
22627: EMPTY
22628: LIST
22629: LIST
22630: LIST
22631: LIST
22632: IN
22633: IFFALSE 22654
// points := [ 35 , 20 , 45 ] ;
22635: LD_ADDR_VAR 0 9
22639: PUSH
22640: LD_INT 35
22642: PUSH
22643: LD_INT 20
22645: PUSH
22646: LD_INT 45
22648: PUSH
22649: EMPTY
22650: LIST
22651: LIST
22652: LIST
22653: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
22654: LD_VAR 0 6
22658: PPUSH
22659: CALL_OW 264
22663: PUSH
22664: LD_INT 47
22666: PUSH
22667: EMPTY
22668: LIST
22669: IN
22670: IFFALSE 22691
// points := [ 67 , 45 , 75 ] ;
22672: LD_ADDR_VAR 0 9
22676: PUSH
22677: LD_INT 67
22679: PUSH
22680: LD_INT 45
22682: PUSH
22683: LD_INT 75
22685: PUSH
22686: EMPTY
22687: LIST
22688: LIST
22689: LIST
22690: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
22691: LD_VAR 0 6
22695: PPUSH
22696: CALL_OW 264
22700: PUSH
22701: LD_INT 26
22703: PUSH
22704: EMPTY
22705: LIST
22706: IN
22707: IFFALSE 22728
// points := [ 120 , 30 , 80 ] ;
22709: LD_ADDR_VAR 0 9
22713: PUSH
22714: LD_INT 120
22716: PUSH
22717: LD_INT 30
22719: PUSH
22720: LD_INT 80
22722: PUSH
22723: EMPTY
22724: LIST
22725: LIST
22726: LIST
22727: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
22728: LD_VAR 0 6
22732: PPUSH
22733: CALL_OW 264
22737: PUSH
22738: LD_INT 22
22740: PUSH
22741: EMPTY
22742: LIST
22743: IN
22744: IFFALSE 22765
// points := [ 40 , 1 , 1 ] ;
22746: LD_ADDR_VAR 0 9
22750: PUSH
22751: LD_INT 40
22753: PUSH
22754: LD_INT 1
22756: PUSH
22757: LD_INT 1
22759: PUSH
22760: EMPTY
22761: LIST
22762: LIST
22763: LIST
22764: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
22765: LD_VAR 0 6
22769: PPUSH
22770: CALL_OW 264
22774: PUSH
22775: LD_INT 29
22777: PUSH
22778: EMPTY
22779: LIST
22780: IN
22781: IFFALSE 22802
// points := [ 70 , 200 , 400 ] ;
22783: LD_ADDR_VAR 0 9
22787: PUSH
22788: LD_INT 70
22790: PUSH
22791: LD_INT 200
22793: PUSH
22794: LD_INT 400
22796: PUSH
22797: EMPTY
22798: LIST
22799: LIST
22800: LIST
22801: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
22802: LD_VAR 0 6
22806: PPUSH
22807: CALL_OW 264
22811: PUSH
22812: LD_INT 14
22814: PUSH
22815: LD_INT 53
22817: PUSH
22818: EMPTY
22819: LIST
22820: LIST
22821: IN
22822: IFFALSE 22843
// points := [ 40 , 10 , 20 ] ;
22824: LD_ADDR_VAR 0 9
22828: PUSH
22829: LD_INT 40
22831: PUSH
22832: LD_INT 10
22834: PUSH
22835: LD_INT 20
22837: PUSH
22838: EMPTY
22839: LIST
22840: LIST
22841: LIST
22842: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
22843: LD_VAR 0 6
22847: PPUSH
22848: CALL_OW 264
22852: PUSH
22853: LD_INT 9
22855: PUSH
22856: EMPTY
22857: LIST
22858: IN
22859: IFFALSE 22880
// points := [ 5 , 70 , 20 ] ;
22861: LD_ADDR_VAR 0 9
22865: PUSH
22866: LD_INT 5
22868: PUSH
22869: LD_INT 70
22871: PUSH
22872: LD_INT 20
22874: PUSH
22875: EMPTY
22876: LIST
22877: LIST
22878: LIST
22879: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
22880: LD_VAR 0 6
22884: PPUSH
22885: CALL_OW 264
22889: PUSH
22890: LD_INT 10
22892: PUSH
22893: EMPTY
22894: LIST
22895: IN
22896: IFFALSE 22917
// points := [ 35 , 110 , 70 ] ;
22898: LD_ADDR_VAR 0 9
22902: PUSH
22903: LD_INT 35
22905: PUSH
22906: LD_INT 110
22908: PUSH
22909: LD_INT 70
22911: PUSH
22912: EMPTY
22913: LIST
22914: LIST
22915: LIST
22916: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
22917: LD_VAR 0 6
22921: PPUSH
22922: CALL_OW 265
22926: PUSH
22927: LD_INT 25
22929: EQUAL
22930: IFFALSE 22951
// points := [ 80 , 65 , 100 ] ;
22932: LD_ADDR_VAR 0 9
22936: PUSH
22937: LD_INT 80
22939: PUSH
22940: LD_INT 65
22942: PUSH
22943: LD_INT 100
22945: PUSH
22946: EMPTY
22947: LIST
22948: LIST
22949: LIST
22950: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
22951: LD_VAR 0 6
22955: PPUSH
22956: CALL_OW 263
22960: PUSH
22961: LD_INT 1
22963: EQUAL
22964: IFFALSE 22999
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
22966: LD_ADDR_VAR 0 10
22970: PUSH
22971: LD_VAR 0 10
22975: PUSH
22976: LD_VAR 0 6
22980: PPUSH
22981: CALL_OW 311
22985: PPUSH
22986: LD_INT 3
22988: PPUSH
22989: CALL_OW 259
22993: PUSH
22994: LD_INT 4
22996: MUL
22997: MUL
22998: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
22999: LD_VAR 0 6
23003: PPUSH
23004: CALL_OW 263
23008: PUSH
23009: LD_INT 2
23011: EQUAL
23012: IFFALSE 23063
// begin j := IsControledBy ( i ) ;
23014: LD_ADDR_VAR 0 7
23018: PUSH
23019: LD_VAR 0 6
23023: PPUSH
23024: CALL_OW 312
23028: ST_TO_ADDR
// if j then
23029: LD_VAR 0 7
23033: IFFALSE 23063
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
23035: LD_ADDR_VAR 0 10
23039: PUSH
23040: LD_VAR 0 10
23044: PUSH
23045: LD_VAR 0 7
23049: PPUSH
23050: LD_INT 3
23052: PPUSH
23053: CALL_OW 259
23057: PUSH
23058: LD_INT 3
23060: MUL
23061: MUL
23062: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
23063: LD_VAR 0 6
23067: PPUSH
23068: CALL_OW 264
23072: PUSH
23073: LD_INT 5
23075: PUSH
23076: LD_INT 6
23078: PUSH
23079: LD_INT 46
23081: PUSH
23082: LD_INT 44
23084: PUSH
23085: LD_INT 47
23087: PUSH
23088: LD_INT 45
23090: PUSH
23091: LD_INT 28
23093: PUSH
23094: LD_INT 7
23096: PUSH
23097: LD_INT 27
23099: PUSH
23100: LD_INT 29
23102: PUSH
23103: EMPTY
23104: LIST
23105: LIST
23106: LIST
23107: LIST
23108: LIST
23109: LIST
23110: LIST
23111: LIST
23112: LIST
23113: LIST
23114: IN
23115: PUSH
23116: LD_VAR 0 1
23120: PPUSH
23121: LD_INT 52
23123: PPUSH
23124: CALL_OW 321
23128: PUSH
23129: LD_INT 2
23131: EQUAL
23132: AND
23133: IFFALSE 23150
// bpoints := bpoints * 1.2 ;
23135: LD_ADDR_VAR 0 10
23139: PUSH
23140: LD_VAR 0 10
23144: PUSH
23145: LD_REAL  1.20000000000000E+0000
23148: MUL
23149: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
23150: LD_VAR 0 6
23154: PPUSH
23155: CALL_OW 264
23159: PUSH
23160: LD_INT 6
23162: PUSH
23163: LD_INT 46
23165: PUSH
23166: LD_INT 47
23168: PUSH
23169: EMPTY
23170: LIST
23171: LIST
23172: LIST
23173: IN
23174: IFFALSE 23191
// bpoints := bpoints * 1.2 ;
23176: LD_ADDR_VAR 0 10
23180: PUSH
23181: LD_VAR 0 10
23185: PUSH
23186: LD_REAL  1.20000000000000E+0000
23189: MUL
23190: ST_TO_ADDR
// end ; unit_building :
23191: GO 23205
23193: LD_INT 3
23195: DOUBLE
23196: EQUAL
23197: IFTRUE 23201
23199: GO 23204
23201: POP
// ; end ;
23202: GO 23205
23204: POP
// for j = 1 to 3 do
23205: LD_ADDR_VAR 0 7
23209: PUSH
23210: DOUBLE
23211: LD_INT 1
23213: DEC
23214: ST_TO_ADDR
23215: LD_INT 3
23217: PUSH
23218: FOR_TO
23219: IFFALSE 23272
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
23221: LD_ADDR_VAR 0 5
23225: PUSH
23226: LD_VAR 0 5
23230: PPUSH
23231: LD_VAR 0 7
23235: PPUSH
23236: LD_VAR 0 5
23240: PUSH
23241: LD_VAR 0 7
23245: ARRAY
23246: PUSH
23247: LD_VAR 0 9
23251: PUSH
23252: LD_VAR 0 7
23256: ARRAY
23257: PUSH
23258: LD_VAR 0 10
23262: MUL
23263: PLUS
23264: PPUSH
23265: CALL_OW 1
23269: ST_TO_ADDR
23270: GO 23218
23272: POP
23273: POP
// end ;
23274: GO 21753
23276: POP
23277: POP
// result := Replace ( result , 4 , tmp ) ;
23278: LD_ADDR_VAR 0 5
23282: PUSH
23283: LD_VAR 0 5
23287: PPUSH
23288: LD_INT 4
23290: PPUSH
23291: LD_VAR 0 8
23295: PPUSH
23296: CALL_OW 1
23300: ST_TO_ADDR
// end ;
23301: LD_VAR 0 5
23305: RET
// export function DangerAtRange ( unit , range ) ; begin
23306: LD_INT 0
23308: PPUSH
// if not unit then
23309: LD_VAR 0 1
23313: NOT
23314: IFFALSE 23318
// exit ;
23316: GO 23363
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
23318: LD_ADDR_VAR 0 3
23322: PUSH
23323: LD_VAR 0 1
23327: PPUSH
23328: CALL_OW 255
23332: PPUSH
23333: LD_VAR 0 1
23337: PPUSH
23338: CALL_OW 250
23342: PPUSH
23343: LD_VAR 0 1
23347: PPUSH
23348: CALL_OW 251
23352: PPUSH
23353: LD_VAR 0 2
23357: PPUSH
23358: CALL 21605 0 4
23362: ST_TO_ADDR
// end ;
23363: LD_VAR 0 3
23367: RET
// export function DangerInArea ( side , area ) ; begin
23368: LD_INT 0
23370: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
23371: LD_ADDR_VAR 0 3
23375: PUSH
23376: LD_VAR 0 2
23380: PPUSH
23381: LD_INT 81
23383: PUSH
23384: LD_VAR 0 1
23388: PUSH
23389: EMPTY
23390: LIST
23391: LIST
23392: PPUSH
23393: CALL_OW 70
23397: ST_TO_ADDR
// end ;
23398: LD_VAR 0 3
23402: RET
// export function IsExtension ( b ) ; begin
23403: LD_INT 0
23405: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
23406: LD_ADDR_VAR 0 2
23410: PUSH
23411: LD_VAR 0 1
23415: PUSH
23416: LD_INT 23
23418: PUSH
23419: LD_INT 20
23421: PUSH
23422: LD_INT 22
23424: PUSH
23425: LD_INT 17
23427: PUSH
23428: LD_INT 24
23430: PUSH
23431: LD_INT 21
23433: PUSH
23434: LD_INT 19
23436: PUSH
23437: LD_INT 16
23439: PUSH
23440: LD_INT 25
23442: PUSH
23443: LD_INT 18
23445: PUSH
23446: EMPTY
23447: LIST
23448: LIST
23449: LIST
23450: LIST
23451: LIST
23452: LIST
23453: LIST
23454: LIST
23455: LIST
23456: LIST
23457: IN
23458: ST_TO_ADDR
// end ;
23459: LD_VAR 0 2
23463: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
23464: LD_INT 0
23466: PPUSH
23467: PPUSH
23468: PPUSH
// result := [ ] ;
23469: LD_ADDR_VAR 0 4
23473: PUSH
23474: EMPTY
23475: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
23476: LD_ADDR_VAR 0 5
23480: PUSH
23481: LD_VAR 0 2
23485: PPUSH
23486: LD_INT 21
23488: PUSH
23489: LD_INT 3
23491: PUSH
23492: EMPTY
23493: LIST
23494: LIST
23495: PPUSH
23496: CALL_OW 70
23500: ST_TO_ADDR
// if not tmp then
23501: LD_VAR 0 5
23505: NOT
23506: IFFALSE 23510
// exit ;
23508: GO 23574
// if checkLink then
23510: LD_VAR 0 3
23514: IFFALSE 23564
// begin for i in tmp do
23516: LD_ADDR_VAR 0 6
23520: PUSH
23521: LD_VAR 0 5
23525: PUSH
23526: FOR_IN
23527: IFFALSE 23562
// if GetBase ( i ) <> base then
23529: LD_VAR 0 6
23533: PPUSH
23534: CALL_OW 274
23538: PUSH
23539: LD_VAR 0 1
23543: NONEQUAL
23544: IFFALSE 23560
// ComLinkToBase ( base , i ) ;
23546: LD_VAR 0 1
23550: PPUSH
23551: LD_VAR 0 6
23555: PPUSH
23556: CALL_OW 169
23560: GO 23526
23562: POP
23563: POP
// end ; result := tmp ;
23564: LD_ADDR_VAR 0 4
23568: PUSH
23569: LD_VAR 0 5
23573: ST_TO_ADDR
// end ;
23574: LD_VAR 0 4
23578: RET
// export function ComComplete ( units , b ) ; var i ; begin
23579: LD_INT 0
23581: PPUSH
23582: PPUSH
// if not units then
23583: LD_VAR 0 1
23587: NOT
23588: IFFALSE 23592
// exit ;
23590: GO 23682
// for i in units do
23592: LD_ADDR_VAR 0 4
23596: PUSH
23597: LD_VAR 0 1
23601: PUSH
23602: FOR_IN
23603: IFFALSE 23680
// if BuildingStatus ( b ) = bs_build then
23605: LD_VAR 0 2
23609: PPUSH
23610: CALL_OW 461
23614: PUSH
23615: LD_INT 1
23617: EQUAL
23618: IFFALSE 23678
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
23620: LD_VAR 0 4
23624: PPUSH
23625: LD_STRING h
23627: PUSH
23628: LD_VAR 0 2
23632: PPUSH
23633: CALL_OW 250
23637: PUSH
23638: LD_VAR 0 2
23642: PPUSH
23643: CALL_OW 251
23647: PUSH
23648: LD_VAR 0 2
23652: PUSH
23653: LD_INT 0
23655: PUSH
23656: LD_INT 0
23658: PUSH
23659: LD_INT 0
23661: PUSH
23662: EMPTY
23663: LIST
23664: LIST
23665: LIST
23666: LIST
23667: LIST
23668: LIST
23669: LIST
23670: PUSH
23671: EMPTY
23672: LIST
23673: PPUSH
23674: CALL_OW 446
23678: GO 23602
23680: POP
23681: POP
// end ;
23682: LD_VAR 0 3
23686: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
23687: LD_INT 0
23689: PPUSH
23690: PPUSH
23691: PPUSH
23692: PPUSH
23693: PPUSH
23694: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
23695: LD_VAR 0 1
23699: NOT
23700: PUSH
23701: LD_VAR 0 1
23705: PPUSH
23706: CALL_OW 263
23710: PUSH
23711: LD_INT 2
23713: NONEQUAL
23714: OR
23715: IFFALSE 23719
// exit ;
23717: GO 24035
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
23719: LD_ADDR_VAR 0 6
23723: PUSH
23724: LD_INT 22
23726: PUSH
23727: LD_VAR 0 1
23731: PPUSH
23732: CALL_OW 255
23736: PUSH
23737: EMPTY
23738: LIST
23739: LIST
23740: PUSH
23741: LD_INT 2
23743: PUSH
23744: LD_INT 30
23746: PUSH
23747: LD_INT 36
23749: PUSH
23750: EMPTY
23751: LIST
23752: LIST
23753: PUSH
23754: LD_INT 34
23756: PUSH
23757: LD_INT 31
23759: PUSH
23760: EMPTY
23761: LIST
23762: LIST
23763: PUSH
23764: EMPTY
23765: LIST
23766: LIST
23767: LIST
23768: PUSH
23769: EMPTY
23770: LIST
23771: LIST
23772: PPUSH
23773: CALL_OW 69
23777: ST_TO_ADDR
// if not tmp then
23778: LD_VAR 0 6
23782: NOT
23783: IFFALSE 23787
// exit ;
23785: GO 24035
// result := [ ] ;
23787: LD_ADDR_VAR 0 2
23791: PUSH
23792: EMPTY
23793: ST_TO_ADDR
// for i in tmp do
23794: LD_ADDR_VAR 0 3
23798: PUSH
23799: LD_VAR 0 6
23803: PUSH
23804: FOR_IN
23805: IFFALSE 23876
// begin t := UnitsInside ( i ) ;
23807: LD_ADDR_VAR 0 4
23811: PUSH
23812: LD_VAR 0 3
23816: PPUSH
23817: CALL_OW 313
23821: ST_TO_ADDR
// if t then
23822: LD_VAR 0 4
23826: IFFALSE 23874
// for j in t do
23828: LD_ADDR_VAR 0 7
23832: PUSH
23833: LD_VAR 0 4
23837: PUSH
23838: FOR_IN
23839: IFFALSE 23872
// result := Replace ( result , result + 1 , j ) ;
23841: LD_ADDR_VAR 0 2
23845: PUSH
23846: LD_VAR 0 2
23850: PPUSH
23851: LD_VAR 0 2
23855: PUSH
23856: LD_INT 1
23858: PLUS
23859: PPUSH
23860: LD_VAR 0 7
23864: PPUSH
23865: CALL_OW 1
23869: ST_TO_ADDR
23870: GO 23838
23872: POP
23873: POP
// end ;
23874: GO 23804
23876: POP
23877: POP
// if not result then
23878: LD_VAR 0 2
23882: NOT
23883: IFFALSE 23887
// exit ;
23885: GO 24035
// mech := result [ 1 ] ;
23887: LD_ADDR_VAR 0 5
23891: PUSH
23892: LD_VAR 0 2
23896: PUSH
23897: LD_INT 1
23899: ARRAY
23900: ST_TO_ADDR
// if result > 1 then
23901: LD_VAR 0 2
23905: PUSH
23906: LD_INT 1
23908: GREATER
23909: IFFALSE 24021
// begin for i = 2 to result do
23911: LD_ADDR_VAR 0 3
23915: PUSH
23916: DOUBLE
23917: LD_INT 2
23919: DEC
23920: ST_TO_ADDR
23921: LD_VAR 0 2
23925: PUSH
23926: FOR_TO
23927: IFFALSE 24019
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
23929: LD_ADDR_VAR 0 4
23933: PUSH
23934: LD_VAR 0 2
23938: PUSH
23939: LD_VAR 0 3
23943: ARRAY
23944: PPUSH
23945: LD_INT 3
23947: PPUSH
23948: CALL_OW 259
23952: PUSH
23953: LD_VAR 0 2
23957: PUSH
23958: LD_VAR 0 3
23962: ARRAY
23963: PPUSH
23964: CALL_OW 432
23968: MINUS
23969: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
23970: LD_VAR 0 4
23974: PUSH
23975: LD_VAR 0 5
23979: PPUSH
23980: LD_INT 3
23982: PPUSH
23983: CALL_OW 259
23987: PUSH
23988: LD_VAR 0 5
23992: PPUSH
23993: CALL_OW 432
23997: MINUS
23998: GREATEREQUAL
23999: IFFALSE 24017
// mech := result [ i ] ;
24001: LD_ADDR_VAR 0 5
24005: PUSH
24006: LD_VAR 0 2
24010: PUSH
24011: LD_VAR 0 3
24015: ARRAY
24016: ST_TO_ADDR
// end ;
24017: GO 23926
24019: POP
24020: POP
// end ; ComLinkTo ( vehicle , mech ) ;
24021: LD_VAR 0 1
24025: PPUSH
24026: LD_VAR 0 5
24030: PPUSH
24031: CALL_OW 135
// end ;
24035: LD_VAR 0 2
24039: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
24040: LD_INT 0
24042: PPUSH
24043: PPUSH
24044: PPUSH
24045: PPUSH
24046: PPUSH
24047: PPUSH
24048: PPUSH
24049: PPUSH
24050: PPUSH
24051: PPUSH
24052: PPUSH
24053: PPUSH
24054: PPUSH
// result := [ ] ;
24055: LD_ADDR_VAR 0 7
24059: PUSH
24060: EMPTY
24061: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
24062: LD_VAR 0 1
24066: PPUSH
24067: CALL_OW 266
24071: PUSH
24072: LD_INT 0
24074: PUSH
24075: LD_INT 1
24077: PUSH
24078: EMPTY
24079: LIST
24080: LIST
24081: IN
24082: NOT
24083: IFFALSE 24087
// exit ;
24085: GO 25721
// if name then
24087: LD_VAR 0 3
24091: IFFALSE 24107
// SetBName ( base_dep , name ) ;
24093: LD_VAR 0 1
24097: PPUSH
24098: LD_VAR 0 3
24102: PPUSH
24103: CALL_OW 500
// base := GetBase ( base_dep ) ;
24107: LD_ADDR_VAR 0 15
24111: PUSH
24112: LD_VAR 0 1
24116: PPUSH
24117: CALL_OW 274
24121: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
24122: LD_ADDR_VAR 0 16
24126: PUSH
24127: LD_VAR 0 1
24131: PPUSH
24132: CALL_OW 255
24136: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
24137: LD_ADDR_VAR 0 17
24141: PUSH
24142: LD_VAR 0 1
24146: PPUSH
24147: CALL_OW 248
24151: ST_TO_ADDR
// if sources then
24152: LD_VAR 0 5
24156: IFFALSE 24203
// for i = 1 to 3 do
24158: LD_ADDR_VAR 0 8
24162: PUSH
24163: DOUBLE
24164: LD_INT 1
24166: DEC
24167: ST_TO_ADDR
24168: LD_INT 3
24170: PUSH
24171: FOR_TO
24172: IFFALSE 24201
// AddResourceType ( base , i , sources [ i ] ) ;
24174: LD_VAR 0 15
24178: PPUSH
24179: LD_VAR 0 8
24183: PPUSH
24184: LD_VAR 0 5
24188: PUSH
24189: LD_VAR 0 8
24193: ARRAY
24194: PPUSH
24195: CALL_OW 276
24199: GO 24171
24201: POP
24202: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
24203: LD_ADDR_VAR 0 18
24207: PUSH
24208: LD_VAR 0 15
24212: PPUSH
24213: LD_VAR 0 2
24217: PPUSH
24218: LD_INT 1
24220: PPUSH
24221: CALL 23464 0 3
24225: ST_TO_ADDR
// InitHc ;
24226: CALL_OW 19
// InitUc ;
24230: CALL_OW 18
// uc_side := side ;
24234: LD_ADDR_OWVAR 20
24238: PUSH
24239: LD_VAR 0 16
24243: ST_TO_ADDR
// uc_nation := nation ;
24244: LD_ADDR_OWVAR 21
24248: PUSH
24249: LD_VAR 0 17
24253: ST_TO_ADDR
// if buildings then
24254: LD_VAR 0 18
24258: IFFALSE 25580
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
24260: LD_ADDR_VAR 0 19
24264: PUSH
24265: LD_VAR 0 18
24269: PPUSH
24270: LD_INT 2
24272: PUSH
24273: LD_INT 30
24275: PUSH
24276: LD_INT 29
24278: PUSH
24279: EMPTY
24280: LIST
24281: LIST
24282: PUSH
24283: LD_INT 30
24285: PUSH
24286: LD_INT 30
24288: PUSH
24289: EMPTY
24290: LIST
24291: LIST
24292: PUSH
24293: EMPTY
24294: LIST
24295: LIST
24296: LIST
24297: PPUSH
24298: CALL_OW 72
24302: ST_TO_ADDR
// if tmp then
24303: LD_VAR 0 19
24307: IFFALSE 24355
// for i in tmp do
24309: LD_ADDR_VAR 0 8
24313: PUSH
24314: LD_VAR 0 19
24318: PUSH
24319: FOR_IN
24320: IFFALSE 24353
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
24322: LD_VAR 0 8
24326: PPUSH
24327: CALL_OW 250
24331: PPUSH
24332: LD_VAR 0 8
24336: PPUSH
24337: CALL_OW 251
24341: PPUSH
24342: LD_VAR 0 16
24346: PPUSH
24347: CALL_OW 441
24351: GO 24319
24353: POP
24354: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
24355: LD_VAR 0 18
24359: PPUSH
24360: LD_INT 2
24362: PUSH
24363: LD_INT 30
24365: PUSH
24366: LD_INT 32
24368: PUSH
24369: EMPTY
24370: LIST
24371: LIST
24372: PUSH
24373: LD_INT 30
24375: PUSH
24376: LD_INT 33
24378: PUSH
24379: EMPTY
24380: LIST
24381: LIST
24382: PUSH
24383: EMPTY
24384: LIST
24385: LIST
24386: LIST
24387: PPUSH
24388: CALL_OW 72
24392: IFFALSE 24480
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
24394: LD_ADDR_VAR 0 8
24398: PUSH
24399: LD_VAR 0 18
24403: PPUSH
24404: LD_INT 2
24406: PUSH
24407: LD_INT 30
24409: PUSH
24410: LD_INT 32
24412: PUSH
24413: EMPTY
24414: LIST
24415: LIST
24416: PUSH
24417: LD_INT 30
24419: PUSH
24420: LD_INT 33
24422: PUSH
24423: EMPTY
24424: LIST
24425: LIST
24426: PUSH
24427: EMPTY
24428: LIST
24429: LIST
24430: LIST
24431: PPUSH
24432: CALL_OW 72
24436: PUSH
24437: FOR_IN
24438: IFFALSE 24478
// begin if not GetBWeapon ( i ) then
24440: LD_VAR 0 8
24444: PPUSH
24445: CALL_OW 269
24449: NOT
24450: IFFALSE 24476
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
24452: LD_VAR 0 8
24456: PPUSH
24457: LD_VAR 0 8
24461: PPUSH
24462: LD_VAR 0 2
24466: PPUSH
24467: CALL 25726 0 2
24471: PPUSH
24472: CALL_OW 431
// end ;
24476: GO 24437
24478: POP
24479: POP
// end ; for i = 1 to personel do
24480: LD_ADDR_VAR 0 8
24484: PUSH
24485: DOUBLE
24486: LD_INT 1
24488: DEC
24489: ST_TO_ADDR
24490: LD_VAR 0 6
24494: PUSH
24495: FOR_TO
24496: IFFALSE 25560
// begin if i > 4 then
24498: LD_VAR 0 8
24502: PUSH
24503: LD_INT 4
24505: GREATER
24506: IFFALSE 24510
// break ;
24508: GO 25560
// case i of 1 :
24510: LD_VAR 0 8
24514: PUSH
24515: LD_INT 1
24517: DOUBLE
24518: EQUAL
24519: IFTRUE 24523
24521: GO 24603
24523: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
24524: LD_ADDR_VAR 0 12
24528: PUSH
24529: LD_VAR 0 18
24533: PPUSH
24534: LD_INT 22
24536: PUSH
24537: LD_VAR 0 16
24541: PUSH
24542: EMPTY
24543: LIST
24544: LIST
24545: PUSH
24546: LD_INT 58
24548: PUSH
24549: EMPTY
24550: LIST
24551: PUSH
24552: LD_INT 2
24554: PUSH
24555: LD_INT 30
24557: PUSH
24558: LD_INT 32
24560: PUSH
24561: EMPTY
24562: LIST
24563: LIST
24564: PUSH
24565: LD_INT 30
24567: PUSH
24568: LD_INT 4
24570: PUSH
24571: EMPTY
24572: LIST
24573: LIST
24574: PUSH
24575: LD_INT 30
24577: PUSH
24578: LD_INT 5
24580: PUSH
24581: EMPTY
24582: LIST
24583: LIST
24584: PUSH
24585: EMPTY
24586: LIST
24587: LIST
24588: LIST
24589: LIST
24590: PUSH
24591: EMPTY
24592: LIST
24593: LIST
24594: LIST
24595: PPUSH
24596: CALL_OW 72
24600: ST_TO_ADDR
24601: GO 24825
24603: LD_INT 2
24605: DOUBLE
24606: EQUAL
24607: IFTRUE 24611
24609: GO 24673
24611: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
24612: LD_ADDR_VAR 0 12
24616: PUSH
24617: LD_VAR 0 18
24621: PPUSH
24622: LD_INT 22
24624: PUSH
24625: LD_VAR 0 16
24629: PUSH
24630: EMPTY
24631: LIST
24632: LIST
24633: PUSH
24634: LD_INT 2
24636: PUSH
24637: LD_INT 30
24639: PUSH
24640: LD_INT 0
24642: PUSH
24643: EMPTY
24644: LIST
24645: LIST
24646: PUSH
24647: LD_INT 30
24649: PUSH
24650: LD_INT 1
24652: PUSH
24653: EMPTY
24654: LIST
24655: LIST
24656: PUSH
24657: EMPTY
24658: LIST
24659: LIST
24660: LIST
24661: PUSH
24662: EMPTY
24663: LIST
24664: LIST
24665: PPUSH
24666: CALL_OW 72
24670: ST_TO_ADDR
24671: GO 24825
24673: LD_INT 3
24675: DOUBLE
24676: EQUAL
24677: IFTRUE 24681
24679: GO 24743
24681: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
24682: LD_ADDR_VAR 0 12
24686: PUSH
24687: LD_VAR 0 18
24691: PPUSH
24692: LD_INT 22
24694: PUSH
24695: LD_VAR 0 16
24699: PUSH
24700: EMPTY
24701: LIST
24702: LIST
24703: PUSH
24704: LD_INT 2
24706: PUSH
24707: LD_INT 30
24709: PUSH
24710: LD_INT 2
24712: PUSH
24713: EMPTY
24714: LIST
24715: LIST
24716: PUSH
24717: LD_INT 30
24719: PUSH
24720: LD_INT 3
24722: PUSH
24723: EMPTY
24724: LIST
24725: LIST
24726: PUSH
24727: EMPTY
24728: LIST
24729: LIST
24730: LIST
24731: PUSH
24732: EMPTY
24733: LIST
24734: LIST
24735: PPUSH
24736: CALL_OW 72
24740: ST_TO_ADDR
24741: GO 24825
24743: LD_INT 4
24745: DOUBLE
24746: EQUAL
24747: IFTRUE 24751
24749: GO 24824
24751: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
24752: LD_ADDR_VAR 0 12
24756: PUSH
24757: LD_VAR 0 18
24761: PPUSH
24762: LD_INT 22
24764: PUSH
24765: LD_VAR 0 16
24769: PUSH
24770: EMPTY
24771: LIST
24772: LIST
24773: PUSH
24774: LD_INT 2
24776: PUSH
24777: LD_INT 30
24779: PUSH
24780: LD_INT 6
24782: PUSH
24783: EMPTY
24784: LIST
24785: LIST
24786: PUSH
24787: LD_INT 30
24789: PUSH
24790: LD_INT 7
24792: PUSH
24793: EMPTY
24794: LIST
24795: LIST
24796: PUSH
24797: LD_INT 30
24799: PUSH
24800: LD_INT 8
24802: PUSH
24803: EMPTY
24804: LIST
24805: LIST
24806: PUSH
24807: EMPTY
24808: LIST
24809: LIST
24810: LIST
24811: LIST
24812: PUSH
24813: EMPTY
24814: LIST
24815: LIST
24816: PPUSH
24817: CALL_OW 72
24821: ST_TO_ADDR
24822: GO 24825
24824: POP
// if i = 1 then
24825: LD_VAR 0 8
24829: PUSH
24830: LD_INT 1
24832: EQUAL
24833: IFFALSE 24944
// begin tmp := [ ] ;
24835: LD_ADDR_VAR 0 19
24839: PUSH
24840: EMPTY
24841: ST_TO_ADDR
// for j in f do
24842: LD_ADDR_VAR 0 9
24846: PUSH
24847: LD_VAR 0 12
24851: PUSH
24852: FOR_IN
24853: IFFALSE 24926
// if GetBType ( j ) = b_bunker then
24855: LD_VAR 0 9
24859: PPUSH
24860: CALL_OW 266
24864: PUSH
24865: LD_INT 32
24867: EQUAL
24868: IFFALSE 24895
// tmp := Insert ( tmp , 1 , j ) else
24870: LD_ADDR_VAR 0 19
24874: PUSH
24875: LD_VAR 0 19
24879: PPUSH
24880: LD_INT 1
24882: PPUSH
24883: LD_VAR 0 9
24887: PPUSH
24888: CALL_OW 2
24892: ST_TO_ADDR
24893: GO 24924
// tmp := Insert ( tmp , tmp + 1 , j ) ;
24895: LD_ADDR_VAR 0 19
24899: PUSH
24900: LD_VAR 0 19
24904: PPUSH
24905: LD_VAR 0 19
24909: PUSH
24910: LD_INT 1
24912: PLUS
24913: PPUSH
24914: LD_VAR 0 9
24918: PPUSH
24919: CALL_OW 2
24923: ST_TO_ADDR
24924: GO 24852
24926: POP
24927: POP
// if tmp then
24928: LD_VAR 0 19
24932: IFFALSE 24944
// f := tmp ;
24934: LD_ADDR_VAR 0 12
24938: PUSH
24939: LD_VAR 0 19
24943: ST_TO_ADDR
// end ; x := personel [ i ] ;
24944: LD_ADDR_VAR 0 13
24948: PUSH
24949: LD_VAR 0 6
24953: PUSH
24954: LD_VAR 0 8
24958: ARRAY
24959: ST_TO_ADDR
// if x = - 1 then
24960: LD_VAR 0 13
24964: PUSH
24965: LD_INT 1
24967: NEG
24968: EQUAL
24969: IFFALSE 25178
// begin for j in f do
24971: LD_ADDR_VAR 0 9
24975: PUSH
24976: LD_VAR 0 12
24980: PUSH
24981: FOR_IN
24982: IFFALSE 25174
// repeat InitHc ;
24984: CALL_OW 19
// if GetBType ( j ) = b_barracks then
24988: LD_VAR 0 9
24992: PPUSH
24993: CALL_OW 266
24997: PUSH
24998: LD_INT 5
25000: EQUAL
25001: IFFALSE 25071
// begin if UnitsInside ( j ) < 3 then
25003: LD_VAR 0 9
25007: PPUSH
25008: CALL_OW 313
25012: PUSH
25013: LD_INT 3
25015: LESS
25016: IFFALSE 25052
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
25018: LD_INT 0
25020: PPUSH
25021: LD_INT 5
25023: PUSH
25024: LD_INT 8
25026: PUSH
25027: LD_INT 9
25029: PUSH
25030: EMPTY
25031: LIST
25032: LIST
25033: LIST
25034: PUSH
25035: LD_VAR 0 17
25039: ARRAY
25040: PPUSH
25041: LD_VAR 0 4
25045: PPUSH
25046: CALL_OW 380
25050: GO 25069
// PrepareHuman ( false , i , skill ) ;
25052: LD_INT 0
25054: PPUSH
25055: LD_VAR 0 8
25059: PPUSH
25060: LD_VAR 0 4
25064: PPUSH
25065: CALL_OW 380
// end else
25069: GO 25088
// PrepareHuman ( false , i , skill ) ;
25071: LD_INT 0
25073: PPUSH
25074: LD_VAR 0 8
25078: PPUSH
25079: LD_VAR 0 4
25083: PPUSH
25084: CALL_OW 380
// un := CreateHuman ;
25088: LD_ADDR_VAR 0 14
25092: PUSH
25093: CALL_OW 44
25097: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25098: LD_ADDR_VAR 0 7
25102: PUSH
25103: LD_VAR 0 7
25107: PPUSH
25108: LD_INT 1
25110: PPUSH
25111: LD_VAR 0 14
25115: PPUSH
25116: CALL_OW 2
25120: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
25121: LD_VAR 0 14
25125: PPUSH
25126: LD_VAR 0 9
25130: PPUSH
25131: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
25135: LD_VAR 0 9
25139: PPUSH
25140: CALL_OW 313
25144: PUSH
25145: LD_INT 6
25147: EQUAL
25148: PUSH
25149: LD_VAR 0 9
25153: PPUSH
25154: CALL_OW 266
25158: PUSH
25159: LD_INT 32
25161: PUSH
25162: LD_INT 31
25164: PUSH
25165: EMPTY
25166: LIST
25167: LIST
25168: IN
25169: OR
25170: IFFALSE 24984
25172: GO 24981
25174: POP
25175: POP
// end else
25176: GO 25558
// for j = 1 to x do
25178: LD_ADDR_VAR 0 9
25182: PUSH
25183: DOUBLE
25184: LD_INT 1
25186: DEC
25187: ST_TO_ADDR
25188: LD_VAR 0 13
25192: PUSH
25193: FOR_TO
25194: IFFALSE 25556
// begin InitHc ;
25196: CALL_OW 19
// if not f then
25200: LD_VAR 0 12
25204: NOT
25205: IFFALSE 25294
// begin PrepareHuman ( false , i , skill ) ;
25207: LD_INT 0
25209: PPUSH
25210: LD_VAR 0 8
25214: PPUSH
25215: LD_VAR 0 4
25219: PPUSH
25220: CALL_OW 380
// un := CreateHuman ;
25224: LD_ADDR_VAR 0 14
25228: PUSH
25229: CALL_OW 44
25233: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25234: LD_ADDR_VAR 0 7
25238: PUSH
25239: LD_VAR 0 7
25243: PPUSH
25244: LD_INT 1
25246: PPUSH
25247: LD_VAR 0 14
25251: PPUSH
25252: CALL_OW 2
25256: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
25257: LD_VAR 0 14
25261: PPUSH
25262: LD_VAR 0 1
25266: PPUSH
25267: CALL_OW 250
25271: PPUSH
25272: LD_VAR 0 1
25276: PPUSH
25277: CALL_OW 251
25281: PPUSH
25282: LD_INT 10
25284: PPUSH
25285: LD_INT 0
25287: PPUSH
25288: CALL_OW 50
// continue ;
25292: GO 25193
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
25294: LD_VAR 0 12
25298: PUSH
25299: LD_INT 1
25301: ARRAY
25302: PPUSH
25303: CALL_OW 313
25307: PUSH
25308: LD_VAR 0 12
25312: PUSH
25313: LD_INT 1
25315: ARRAY
25316: PPUSH
25317: CALL_OW 266
25321: PUSH
25322: LD_INT 32
25324: PUSH
25325: LD_INT 31
25327: PUSH
25328: EMPTY
25329: LIST
25330: LIST
25331: IN
25332: AND
25333: PUSH
25334: LD_VAR 0 12
25338: PUSH
25339: LD_INT 1
25341: ARRAY
25342: PPUSH
25343: CALL_OW 313
25347: PUSH
25348: LD_INT 6
25350: EQUAL
25351: OR
25352: IFFALSE 25372
// f := Delete ( f , 1 ) ;
25354: LD_ADDR_VAR 0 12
25358: PUSH
25359: LD_VAR 0 12
25363: PPUSH
25364: LD_INT 1
25366: PPUSH
25367: CALL_OW 3
25371: ST_TO_ADDR
// if not f then
25372: LD_VAR 0 12
25376: NOT
25377: IFFALSE 25395
// begin x := x + 2 ;
25379: LD_ADDR_VAR 0 13
25383: PUSH
25384: LD_VAR 0 13
25388: PUSH
25389: LD_INT 2
25391: PLUS
25392: ST_TO_ADDR
// continue ;
25393: GO 25193
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
25395: LD_VAR 0 12
25399: PUSH
25400: LD_INT 1
25402: ARRAY
25403: PPUSH
25404: CALL_OW 266
25408: PUSH
25409: LD_INT 5
25411: EQUAL
25412: IFFALSE 25486
// begin if UnitsInside ( f [ 1 ] ) < 3 then
25414: LD_VAR 0 12
25418: PUSH
25419: LD_INT 1
25421: ARRAY
25422: PPUSH
25423: CALL_OW 313
25427: PUSH
25428: LD_INT 3
25430: LESS
25431: IFFALSE 25467
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
25433: LD_INT 0
25435: PPUSH
25436: LD_INT 5
25438: PUSH
25439: LD_INT 8
25441: PUSH
25442: LD_INT 9
25444: PUSH
25445: EMPTY
25446: LIST
25447: LIST
25448: LIST
25449: PUSH
25450: LD_VAR 0 17
25454: ARRAY
25455: PPUSH
25456: LD_VAR 0 4
25460: PPUSH
25461: CALL_OW 380
25465: GO 25484
// PrepareHuman ( false , i , skill ) ;
25467: LD_INT 0
25469: PPUSH
25470: LD_VAR 0 8
25474: PPUSH
25475: LD_VAR 0 4
25479: PPUSH
25480: CALL_OW 380
// end else
25484: GO 25503
// PrepareHuman ( false , i , skill ) ;
25486: LD_INT 0
25488: PPUSH
25489: LD_VAR 0 8
25493: PPUSH
25494: LD_VAR 0 4
25498: PPUSH
25499: CALL_OW 380
// un := CreateHuman ;
25503: LD_ADDR_VAR 0 14
25507: PUSH
25508: CALL_OW 44
25512: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25513: LD_ADDR_VAR 0 7
25517: PUSH
25518: LD_VAR 0 7
25522: PPUSH
25523: LD_INT 1
25525: PPUSH
25526: LD_VAR 0 14
25530: PPUSH
25531: CALL_OW 2
25535: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
25536: LD_VAR 0 14
25540: PPUSH
25541: LD_VAR 0 12
25545: PUSH
25546: LD_INT 1
25548: ARRAY
25549: PPUSH
25550: CALL_OW 52
// end ;
25554: GO 25193
25556: POP
25557: POP
// end ;
25558: GO 24495
25560: POP
25561: POP
// result := result ^ buildings ;
25562: LD_ADDR_VAR 0 7
25566: PUSH
25567: LD_VAR 0 7
25571: PUSH
25572: LD_VAR 0 18
25576: ADD
25577: ST_TO_ADDR
// end else
25578: GO 25721
// begin for i = 1 to personel do
25580: LD_ADDR_VAR 0 8
25584: PUSH
25585: DOUBLE
25586: LD_INT 1
25588: DEC
25589: ST_TO_ADDR
25590: LD_VAR 0 6
25594: PUSH
25595: FOR_TO
25596: IFFALSE 25719
// begin if i > 4 then
25598: LD_VAR 0 8
25602: PUSH
25603: LD_INT 4
25605: GREATER
25606: IFFALSE 25610
// break ;
25608: GO 25719
// x := personel [ i ] ;
25610: LD_ADDR_VAR 0 13
25614: PUSH
25615: LD_VAR 0 6
25619: PUSH
25620: LD_VAR 0 8
25624: ARRAY
25625: ST_TO_ADDR
// if x = - 1 then
25626: LD_VAR 0 13
25630: PUSH
25631: LD_INT 1
25633: NEG
25634: EQUAL
25635: IFFALSE 25639
// continue ;
25637: GO 25595
// PrepareHuman ( false , i , skill ) ;
25639: LD_INT 0
25641: PPUSH
25642: LD_VAR 0 8
25646: PPUSH
25647: LD_VAR 0 4
25651: PPUSH
25652: CALL_OW 380
// un := CreateHuman ;
25656: LD_ADDR_VAR 0 14
25660: PUSH
25661: CALL_OW 44
25665: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
25666: LD_VAR 0 14
25670: PPUSH
25671: LD_VAR 0 1
25675: PPUSH
25676: CALL_OW 250
25680: PPUSH
25681: LD_VAR 0 1
25685: PPUSH
25686: CALL_OW 251
25690: PPUSH
25691: LD_INT 10
25693: PPUSH
25694: LD_INT 0
25696: PPUSH
25697: CALL_OW 50
// result := result ^ un ;
25701: LD_ADDR_VAR 0 7
25705: PUSH
25706: LD_VAR 0 7
25710: PUSH
25711: LD_VAR 0 14
25715: ADD
25716: ST_TO_ADDR
// end ;
25717: GO 25595
25719: POP
25720: POP
// end ; end ;
25721: LD_VAR 0 7
25725: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
25726: LD_INT 0
25728: PPUSH
25729: PPUSH
25730: PPUSH
25731: PPUSH
25732: PPUSH
25733: PPUSH
25734: PPUSH
25735: PPUSH
25736: PPUSH
25737: PPUSH
25738: PPUSH
25739: PPUSH
25740: PPUSH
25741: PPUSH
25742: PPUSH
25743: PPUSH
// result := false ;
25744: LD_ADDR_VAR 0 3
25748: PUSH
25749: LD_INT 0
25751: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
25752: LD_VAR 0 1
25756: NOT
25757: PUSH
25758: LD_VAR 0 1
25762: PPUSH
25763: CALL_OW 266
25767: PUSH
25768: LD_INT 32
25770: PUSH
25771: LD_INT 33
25773: PUSH
25774: EMPTY
25775: LIST
25776: LIST
25777: IN
25778: NOT
25779: OR
25780: IFFALSE 25784
// exit ;
25782: GO 26893
// nat := GetNation ( tower ) ;
25784: LD_ADDR_VAR 0 12
25788: PUSH
25789: LD_VAR 0 1
25793: PPUSH
25794: CALL_OW 248
25798: ST_TO_ADDR
// side := GetSide ( tower ) ;
25799: LD_ADDR_VAR 0 16
25803: PUSH
25804: LD_VAR 0 1
25808: PPUSH
25809: CALL_OW 255
25813: ST_TO_ADDR
// x := GetX ( tower ) ;
25814: LD_ADDR_VAR 0 10
25818: PUSH
25819: LD_VAR 0 1
25823: PPUSH
25824: CALL_OW 250
25828: ST_TO_ADDR
// y := GetY ( tower ) ;
25829: LD_ADDR_VAR 0 11
25833: PUSH
25834: LD_VAR 0 1
25838: PPUSH
25839: CALL_OW 251
25843: ST_TO_ADDR
// if not x or not y then
25844: LD_VAR 0 10
25848: NOT
25849: PUSH
25850: LD_VAR 0 11
25854: NOT
25855: OR
25856: IFFALSE 25860
// exit ;
25858: GO 26893
// weapon := 0 ;
25860: LD_ADDR_VAR 0 18
25864: PUSH
25865: LD_INT 0
25867: ST_TO_ADDR
// fac_list := [ ] ;
25868: LD_ADDR_VAR 0 17
25872: PUSH
25873: EMPTY
25874: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
25875: LD_ADDR_VAR 0 6
25879: PUSH
25880: LD_VAR 0 1
25884: PPUSH
25885: CALL_OW 274
25889: PPUSH
25890: LD_VAR 0 2
25894: PPUSH
25895: LD_INT 0
25897: PPUSH
25898: CALL 23464 0 3
25902: PPUSH
25903: LD_INT 30
25905: PUSH
25906: LD_INT 3
25908: PUSH
25909: EMPTY
25910: LIST
25911: LIST
25912: PPUSH
25913: CALL_OW 72
25917: ST_TO_ADDR
// if not factories then
25918: LD_VAR 0 6
25922: NOT
25923: IFFALSE 25927
// exit ;
25925: GO 26893
// for i in factories do
25927: LD_ADDR_VAR 0 8
25931: PUSH
25932: LD_VAR 0 6
25936: PUSH
25937: FOR_IN
25938: IFFALSE 25963
// fac_list := fac_list union AvailableWeaponList ( i ) ;
25940: LD_ADDR_VAR 0 17
25944: PUSH
25945: LD_VAR 0 17
25949: PUSH
25950: LD_VAR 0 8
25954: PPUSH
25955: CALL_OW 478
25959: UNION
25960: ST_TO_ADDR
25961: GO 25937
25963: POP
25964: POP
// if not fac_list then
25965: LD_VAR 0 17
25969: NOT
25970: IFFALSE 25974
// exit ;
25972: GO 26893
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
25974: LD_ADDR_VAR 0 5
25978: PUSH
25979: LD_INT 4
25981: PUSH
25982: LD_INT 5
25984: PUSH
25985: LD_INT 9
25987: PUSH
25988: LD_INT 10
25990: PUSH
25991: LD_INT 6
25993: PUSH
25994: LD_INT 7
25996: PUSH
25997: LD_INT 11
25999: PUSH
26000: EMPTY
26001: LIST
26002: LIST
26003: LIST
26004: LIST
26005: LIST
26006: LIST
26007: LIST
26008: PUSH
26009: LD_INT 27
26011: PUSH
26012: LD_INT 28
26014: PUSH
26015: LD_INT 26
26017: PUSH
26018: LD_INT 30
26020: PUSH
26021: EMPTY
26022: LIST
26023: LIST
26024: LIST
26025: LIST
26026: PUSH
26027: LD_INT 43
26029: PUSH
26030: LD_INT 44
26032: PUSH
26033: LD_INT 46
26035: PUSH
26036: LD_INT 45
26038: PUSH
26039: LD_INT 47
26041: PUSH
26042: LD_INT 49
26044: PUSH
26045: EMPTY
26046: LIST
26047: LIST
26048: LIST
26049: LIST
26050: LIST
26051: LIST
26052: PUSH
26053: EMPTY
26054: LIST
26055: LIST
26056: LIST
26057: PUSH
26058: LD_VAR 0 12
26062: ARRAY
26063: ST_TO_ADDR
// list := list isect fac_list ;
26064: LD_ADDR_VAR 0 5
26068: PUSH
26069: LD_VAR 0 5
26073: PUSH
26074: LD_VAR 0 17
26078: ISECT
26079: ST_TO_ADDR
// if not list then
26080: LD_VAR 0 5
26084: NOT
26085: IFFALSE 26089
// exit ;
26087: GO 26893
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
26089: LD_VAR 0 12
26093: PUSH
26094: LD_INT 3
26096: EQUAL
26097: PUSH
26098: LD_INT 49
26100: PUSH
26101: LD_VAR 0 5
26105: IN
26106: AND
26107: PUSH
26108: LD_INT 31
26110: PPUSH
26111: LD_VAR 0 16
26115: PPUSH
26116: CALL_OW 321
26120: PUSH
26121: LD_INT 2
26123: EQUAL
26124: AND
26125: IFFALSE 26185
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
26127: LD_INT 22
26129: PUSH
26130: LD_VAR 0 16
26134: PUSH
26135: EMPTY
26136: LIST
26137: LIST
26138: PUSH
26139: LD_INT 35
26141: PUSH
26142: LD_INT 49
26144: PUSH
26145: EMPTY
26146: LIST
26147: LIST
26148: PUSH
26149: LD_INT 91
26151: PUSH
26152: LD_VAR 0 1
26156: PUSH
26157: LD_INT 10
26159: PUSH
26160: EMPTY
26161: LIST
26162: LIST
26163: LIST
26164: PUSH
26165: EMPTY
26166: LIST
26167: LIST
26168: LIST
26169: PPUSH
26170: CALL_OW 69
26174: NOT
26175: IFFALSE 26185
// weapon := ru_time_lapser ;
26177: LD_ADDR_VAR 0 18
26181: PUSH
26182: LD_INT 49
26184: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
26185: LD_VAR 0 12
26189: PUSH
26190: LD_INT 1
26192: PUSH
26193: LD_INT 2
26195: PUSH
26196: EMPTY
26197: LIST
26198: LIST
26199: IN
26200: PUSH
26201: LD_INT 11
26203: PUSH
26204: LD_VAR 0 5
26208: IN
26209: PUSH
26210: LD_INT 30
26212: PUSH
26213: LD_VAR 0 5
26217: IN
26218: OR
26219: AND
26220: PUSH
26221: LD_INT 6
26223: PPUSH
26224: LD_VAR 0 16
26228: PPUSH
26229: CALL_OW 321
26233: PUSH
26234: LD_INT 2
26236: EQUAL
26237: AND
26238: IFFALSE 26403
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
26240: LD_INT 22
26242: PUSH
26243: LD_VAR 0 16
26247: PUSH
26248: EMPTY
26249: LIST
26250: LIST
26251: PUSH
26252: LD_INT 2
26254: PUSH
26255: LD_INT 35
26257: PUSH
26258: LD_INT 11
26260: PUSH
26261: EMPTY
26262: LIST
26263: LIST
26264: PUSH
26265: LD_INT 35
26267: PUSH
26268: LD_INT 30
26270: PUSH
26271: EMPTY
26272: LIST
26273: LIST
26274: PUSH
26275: EMPTY
26276: LIST
26277: LIST
26278: LIST
26279: PUSH
26280: LD_INT 91
26282: PUSH
26283: LD_VAR 0 1
26287: PUSH
26288: LD_INT 18
26290: PUSH
26291: EMPTY
26292: LIST
26293: LIST
26294: LIST
26295: PUSH
26296: EMPTY
26297: LIST
26298: LIST
26299: LIST
26300: PPUSH
26301: CALL_OW 69
26305: NOT
26306: PUSH
26307: LD_INT 22
26309: PUSH
26310: LD_VAR 0 16
26314: PUSH
26315: EMPTY
26316: LIST
26317: LIST
26318: PUSH
26319: LD_INT 2
26321: PUSH
26322: LD_INT 30
26324: PUSH
26325: LD_INT 32
26327: PUSH
26328: EMPTY
26329: LIST
26330: LIST
26331: PUSH
26332: LD_INT 30
26334: PUSH
26335: LD_INT 33
26337: PUSH
26338: EMPTY
26339: LIST
26340: LIST
26341: PUSH
26342: EMPTY
26343: LIST
26344: LIST
26345: LIST
26346: PUSH
26347: LD_INT 91
26349: PUSH
26350: LD_VAR 0 1
26354: PUSH
26355: LD_INT 12
26357: PUSH
26358: EMPTY
26359: LIST
26360: LIST
26361: LIST
26362: PUSH
26363: EMPTY
26364: LIST
26365: LIST
26366: LIST
26367: PUSH
26368: EMPTY
26369: LIST
26370: PPUSH
26371: CALL_OW 69
26375: PUSH
26376: LD_INT 2
26378: GREATER
26379: AND
26380: IFFALSE 26403
// weapon := [ us_radar , ar_radar ] [ nat ] ;
26382: LD_ADDR_VAR 0 18
26386: PUSH
26387: LD_INT 11
26389: PUSH
26390: LD_INT 30
26392: PUSH
26393: EMPTY
26394: LIST
26395: LIST
26396: PUSH
26397: LD_VAR 0 12
26401: ARRAY
26402: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
26403: LD_VAR 0 18
26407: NOT
26408: PUSH
26409: LD_INT 40
26411: PPUSH
26412: LD_VAR 0 16
26416: PPUSH
26417: CALL_OW 321
26421: PUSH
26422: LD_INT 2
26424: EQUAL
26425: AND
26426: PUSH
26427: LD_INT 7
26429: PUSH
26430: LD_VAR 0 5
26434: IN
26435: PUSH
26436: LD_INT 28
26438: PUSH
26439: LD_VAR 0 5
26443: IN
26444: OR
26445: PUSH
26446: LD_INT 45
26448: PUSH
26449: LD_VAR 0 5
26453: IN
26454: OR
26455: AND
26456: IFFALSE 26710
// begin hex := GetHexInfo ( x , y ) ;
26458: LD_ADDR_VAR 0 4
26462: PUSH
26463: LD_VAR 0 10
26467: PPUSH
26468: LD_VAR 0 11
26472: PPUSH
26473: CALL_OW 546
26477: ST_TO_ADDR
// if hex [ 1 ] then
26478: LD_VAR 0 4
26482: PUSH
26483: LD_INT 1
26485: ARRAY
26486: IFFALSE 26490
// exit ;
26488: GO 26893
// height := hex [ 2 ] ;
26490: LD_ADDR_VAR 0 15
26494: PUSH
26495: LD_VAR 0 4
26499: PUSH
26500: LD_INT 2
26502: ARRAY
26503: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
26504: LD_ADDR_VAR 0 14
26508: PUSH
26509: LD_INT 0
26511: PUSH
26512: LD_INT 2
26514: PUSH
26515: LD_INT 3
26517: PUSH
26518: LD_INT 5
26520: PUSH
26521: EMPTY
26522: LIST
26523: LIST
26524: LIST
26525: LIST
26526: ST_TO_ADDR
// for i in tmp do
26527: LD_ADDR_VAR 0 8
26531: PUSH
26532: LD_VAR 0 14
26536: PUSH
26537: FOR_IN
26538: IFFALSE 26708
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
26540: LD_ADDR_VAR 0 9
26544: PUSH
26545: LD_VAR 0 10
26549: PPUSH
26550: LD_VAR 0 8
26554: PPUSH
26555: LD_INT 5
26557: PPUSH
26558: CALL_OW 272
26562: PUSH
26563: LD_VAR 0 11
26567: PPUSH
26568: LD_VAR 0 8
26572: PPUSH
26573: LD_INT 5
26575: PPUSH
26576: CALL_OW 273
26580: PUSH
26581: EMPTY
26582: LIST
26583: LIST
26584: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
26585: LD_VAR 0 9
26589: PUSH
26590: LD_INT 1
26592: ARRAY
26593: PPUSH
26594: LD_VAR 0 9
26598: PUSH
26599: LD_INT 2
26601: ARRAY
26602: PPUSH
26603: CALL_OW 488
26607: IFFALSE 26706
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
26609: LD_ADDR_VAR 0 4
26613: PUSH
26614: LD_VAR 0 9
26618: PUSH
26619: LD_INT 1
26621: ARRAY
26622: PPUSH
26623: LD_VAR 0 9
26627: PUSH
26628: LD_INT 2
26630: ARRAY
26631: PPUSH
26632: CALL_OW 546
26636: ST_TO_ADDR
// if hex [ 1 ] then
26637: LD_VAR 0 4
26641: PUSH
26642: LD_INT 1
26644: ARRAY
26645: IFFALSE 26649
// continue ;
26647: GO 26537
// h := hex [ 2 ] ;
26649: LD_ADDR_VAR 0 13
26653: PUSH
26654: LD_VAR 0 4
26658: PUSH
26659: LD_INT 2
26661: ARRAY
26662: ST_TO_ADDR
// if h + 7 < height then
26663: LD_VAR 0 13
26667: PUSH
26668: LD_INT 7
26670: PLUS
26671: PUSH
26672: LD_VAR 0 15
26676: LESS
26677: IFFALSE 26706
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
26679: LD_ADDR_VAR 0 18
26683: PUSH
26684: LD_INT 7
26686: PUSH
26687: LD_INT 28
26689: PUSH
26690: LD_INT 45
26692: PUSH
26693: EMPTY
26694: LIST
26695: LIST
26696: LIST
26697: PUSH
26698: LD_VAR 0 12
26702: ARRAY
26703: ST_TO_ADDR
// break ;
26704: GO 26708
// end ; end ; end ;
26706: GO 26537
26708: POP
26709: POP
// end ; if not weapon then
26710: LD_VAR 0 18
26714: NOT
26715: IFFALSE 26775
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
26717: LD_ADDR_VAR 0 5
26721: PUSH
26722: LD_VAR 0 5
26726: PUSH
26727: LD_INT 11
26729: PUSH
26730: LD_INT 30
26732: PUSH
26733: LD_INT 49
26735: PUSH
26736: EMPTY
26737: LIST
26738: LIST
26739: LIST
26740: DIFF
26741: ST_TO_ADDR
// if not list then
26742: LD_VAR 0 5
26746: NOT
26747: IFFALSE 26751
// exit ;
26749: GO 26893
// weapon := list [ rand ( 1 , list ) ] ;
26751: LD_ADDR_VAR 0 18
26755: PUSH
26756: LD_VAR 0 5
26760: PUSH
26761: LD_INT 1
26763: PPUSH
26764: LD_VAR 0 5
26768: PPUSH
26769: CALL_OW 12
26773: ARRAY
26774: ST_TO_ADDR
// end ; if weapon then
26775: LD_VAR 0 18
26779: IFFALSE 26893
// begin tmp := CostOfWeapon ( weapon ) ;
26781: LD_ADDR_VAR 0 14
26785: PUSH
26786: LD_VAR 0 18
26790: PPUSH
26791: CALL_OW 451
26795: ST_TO_ADDR
// j := GetBase ( tower ) ;
26796: LD_ADDR_VAR 0 9
26800: PUSH
26801: LD_VAR 0 1
26805: PPUSH
26806: CALL_OW 274
26810: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
26811: LD_VAR 0 9
26815: PPUSH
26816: LD_INT 1
26818: PPUSH
26819: CALL_OW 275
26823: PUSH
26824: LD_VAR 0 14
26828: PUSH
26829: LD_INT 1
26831: ARRAY
26832: GREATEREQUAL
26833: PUSH
26834: LD_VAR 0 9
26838: PPUSH
26839: LD_INT 2
26841: PPUSH
26842: CALL_OW 275
26846: PUSH
26847: LD_VAR 0 14
26851: PUSH
26852: LD_INT 2
26854: ARRAY
26855: GREATEREQUAL
26856: AND
26857: PUSH
26858: LD_VAR 0 9
26862: PPUSH
26863: LD_INT 3
26865: PPUSH
26866: CALL_OW 275
26870: PUSH
26871: LD_VAR 0 14
26875: PUSH
26876: LD_INT 3
26878: ARRAY
26879: GREATEREQUAL
26880: AND
26881: IFFALSE 26893
// result := weapon ;
26883: LD_ADDR_VAR 0 3
26887: PUSH
26888: LD_VAR 0 18
26892: ST_TO_ADDR
// end ; end ;
26893: LD_VAR 0 3
26897: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
26898: LD_INT 0
26900: PPUSH
26901: PPUSH
// result := true ;
26902: LD_ADDR_VAR 0 3
26906: PUSH
26907: LD_INT 1
26909: ST_TO_ADDR
// if array1 = array2 then
26910: LD_VAR 0 1
26914: PUSH
26915: LD_VAR 0 2
26919: EQUAL
26920: IFFALSE 26980
// begin for i = 1 to array1 do
26922: LD_ADDR_VAR 0 4
26926: PUSH
26927: DOUBLE
26928: LD_INT 1
26930: DEC
26931: ST_TO_ADDR
26932: LD_VAR 0 1
26936: PUSH
26937: FOR_TO
26938: IFFALSE 26976
// if array1 [ i ] <> array2 [ i ] then
26940: LD_VAR 0 1
26944: PUSH
26945: LD_VAR 0 4
26949: ARRAY
26950: PUSH
26951: LD_VAR 0 2
26955: PUSH
26956: LD_VAR 0 4
26960: ARRAY
26961: NONEQUAL
26962: IFFALSE 26974
// begin result := false ;
26964: LD_ADDR_VAR 0 3
26968: PUSH
26969: LD_INT 0
26971: ST_TO_ADDR
// break ;
26972: GO 26976
// end ;
26974: GO 26937
26976: POP
26977: POP
// end else
26978: GO 26988
// result := false ;
26980: LD_ADDR_VAR 0 3
26984: PUSH
26985: LD_INT 0
26987: ST_TO_ADDR
// end ;
26988: LD_VAR 0 3
26992: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
26993: LD_INT 0
26995: PPUSH
26996: PPUSH
// if not array1 or not array2 then
26997: LD_VAR 0 1
27001: NOT
27002: PUSH
27003: LD_VAR 0 2
27007: NOT
27008: OR
27009: IFFALSE 27013
// exit ;
27011: GO 27077
// result := true ;
27013: LD_ADDR_VAR 0 3
27017: PUSH
27018: LD_INT 1
27020: ST_TO_ADDR
// for i = 1 to array1 do
27021: LD_ADDR_VAR 0 4
27025: PUSH
27026: DOUBLE
27027: LD_INT 1
27029: DEC
27030: ST_TO_ADDR
27031: LD_VAR 0 1
27035: PUSH
27036: FOR_TO
27037: IFFALSE 27075
// if array1 [ i ] <> array2 [ i ] then
27039: LD_VAR 0 1
27043: PUSH
27044: LD_VAR 0 4
27048: ARRAY
27049: PUSH
27050: LD_VAR 0 2
27054: PUSH
27055: LD_VAR 0 4
27059: ARRAY
27060: NONEQUAL
27061: IFFALSE 27073
// begin result := false ;
27063: LD_ADDR_VAR 0 3
27067: PUSH
27068: LD_INT 0
27070: ST_TO_ADDR
// break ;
27071: GO 27075
// end ;
27073: GO 27036
27075: POP
27076: POP
// end ;
27077: LD_VAR 0 3
27081: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
27082: LD_INT 0
27084: PPUSH
27085: PPUSH
27086: PPUSH
// pom := GetBase ( fac ) ;
27087: LD_ADDR_VAR 0 5
27091: PUSH
27092: LD_VAR 0 1
27096: PPUSH
27097: CALL_OW 274
27101: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
27102: LD_ADDR_VAR 0 4
27106: PUSH
27107: LD_VAR 0 2
27111: PUSH
27112: LD_INT 1
27114: ARRAY
27115: PPUSH
27116: LD_VAR 0 2
27120: PUSH
27121: LD_INT 2
27123: ARRAY
27124: PPUSH
27125: LD_VAR 0 2
27129: PUSH
27130: LD_INT 3
27132: ARRAY
27133: PPUSH
27134: LD_VAR 0 2
27138: PUSH
27139: LD_INT 4
27141: ARRAY
27142: PPUSH
27143: CALL_OW 449
27147: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27148: LD_ADDR_VAR 0 3
27152: PUSH
27153: LD_VAR 0 5
27157: PPUSH
27158: LD_INT 1
27160: PPUSH
27161: CALL_OW 275
27165: PUSH
27166: LD_VAR 0 4
27170: PUSH
27171: LD_INT 1
27173: ARRAY
27174: GREATEREQUAL
27175: PUSH
27176: LD_VAR 0 5
27180: PPUSH
27181: LD_INT 2
27183: PPUSH
27184: CALL_OW 275
27188: PUSH
27189: LD_VAR 0 4
27193: PUSH
27194: LD_INT 2
27196: ARRAY
27197: GREATEREQUAL
27198: AND
27199: PUSH
27200: LD_VAR 0 5
27204: PPUSH
27205: LD_INT 3
27207: PPUSH
27208: CALL_OW 275
27212: PUSH
27213: LD_VAR 0 4
27217: PUSH
27218: LD_INT 3
27220: ARRAY
27221: GREATEREQUAL
27222: AND
27223: ST_TO_ADDR
// end ;
27224: LD_VAR 0 3
27228: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
27229: LD_INT 0
27231: PPUSH
27232: PPUSH
27233: PPUSH
27234: PPUSH
// pom := GetBase ( building ) ;
27235: LD_ADDR_VAR 0 3
27239: PUSH
27240: LD_VAR 0 1
27244: PPUSH
27245: CALL_OW 274
27249: ST_TO_ADDR
// if not pom then
27250: LD_VAR 0 3
27254: NOT
27255: IFFALSE 27259
// exit ;
27257: GO 27429
// btype := GetBType ( building ) ;
27259: LD_ADDR_VAR 0 5
27263: PUSH
27264: LD_VAR 0 1
27268: PPUSH
27269: CALL_OW 266
27273: ST_TO_ADDR
// if btype = b_armoury then
27274: LD_VAR 0 5
27278: PUSH
27279: LD_INT 4
27281: EQUAL
27282: IFFALSE 27292
// btype := b_barracks ;
27284: LD_ADDR_VAR 0 5
27288: PUSH
27289: LD_INT 5
27291: ST_TO_ADDR
// if btype = b_depot then
27292: LD_VAR 0 5
27296: PUSH
27297: LD_INT 0
27299: EQUAL
27300: IFFALSE 27310
// btype := b_warehouse ;
27302: LD_ADDR_VAR 0 5
27306: PUSH
27307: LD_INT 1
27309: ST_TO_ADDR
// if btype = b_workshop then
27310: LD_VAR 0 5
27314: PUSH
27315: LD_INT 2
27317: EQUAL
27318: IFFALSE 27328
// btype := b_factory ;
27320: LD_ADDR_VAR 0 5
27324: PUSH
27325: LD_INT 3
27327: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
27328: LD_ADDR_VAR 0 4
27332: PUSH
27333: LD_VAR 0 5
27337: PPUSH
27338: LD_VAR 0 1
27342: PPUSH
27343: CALL_OW 248
27347: PPUSH
27348: CALL_OW 450
27352: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27353: LD_ADDR_VAR 0 2
27357: PUSH
27358: LD_VAR 0 3
27362: PPUSH
27363: LD_INT 1
27365: PPUSH
27366: CALL_OW 275
27370: PUSH
27371: LD_VAR 0 4
27375: PUSH
27376: LD_INT 1
27378: ARRAY
27379: GREATEREQUAL
27380: PUSH
27381: LD_VAR 0 3
27385: PPUSH
27386: LD_INT 2
27388: PPUSH
27389: CALL_OW 275
27393: PUSH
27394: LD_VAR 0 4
27398: PUSH
27399: LD_INT 2
27401: ARRAY
27402: GREATEREQUAL
27403: AND
27404: PUSH
27405: LD_VAR 0 3
27409: PPUSH
27410: LD_INT 3
27412: PPUSH
27413: CALL_OW 275
27417: PUSH
27418: LD_VAR 0 4
27422: PUSH
27423: LD_INT 3
27425: ARRAY
27426: GREATEREQUAL
27427: AND
27428: ST_TO_ADDR
// end ;
27429: LD_VAR 0 2
27433: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
27434: LD_INT 0
27436: PPUSH
27437: PPUSH
27438: PPUSH
// pom := GetBase ( building ) ;
27439: LD_ADDR_VAR 0 4
27443: PUSH
27444: LD_VAR 0 1
27448: PPUSH
27449: CALL_OW 274
27453: ST_TO_ADDR
// if not pom then
27454: LD_VAR 0 4
27458: NOT
27459: IFFALSE 27463
// exit ;
27461: GO 27564
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
27463: LD_ADDR_VAR 0 5
27467: PUSH
27468: LD_VAR 0 2
27472: PPUSH
27473: LD_VAR 0 1
27477: PPUSH
27478: CALL_OW 248
27482: PPUSH
27483: CALL_OW 450
27487: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27488: LD_ADDR_VAR 0 3
27492: PUSH
27493: LD_VAR 0 4
27497: PPUSH
27498: LD_INT 1
27500: PPUSH
27501: CALL_OW 275
27505: PUSH
27506: LD_VAR 0 5
27510: PUSH
27511: LD_INT 1
27513: ARRAY
27514: GREATEREQUAL
27515: PUSH
27516: LD_VAR 0 4
27520: PPUSH
27521: LD_INT 2
27523: PPUSH
27524: CALL_OW 275
27528: PUSH
27529: LD_VAR 0 5
27533: PUSH
27534: LD_INT 2
27536: ARRAY
27537: GREATEREQUAL
27538: AND
27539: PUSH
27540: LD_VAR 0 4
27544: PPUSH
27545: LD_INT 3
27547: PPUSH
27548: CALL_OW 275
27552: PUSH
27553: LD_VAR 0 5
27557: PUSH
27558: LD_INT 3
27560: ARRAY
27561: GREATEREQUAL
27562: AND
27563: ST_TO_ADDR
// end ;
27564: LD_VAR 0 3
27568: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
27569: LD_INT 0
27571: PPUSH
27572: PPUSH
27573: PPUSH
27574: PPUSH
27575: PPUSH
27576: PPUSH
27577: PPUSH
27578: PPUSH
27579: PPUSH
27580: PPUSH
27581: PPUSH
// result := false ;
27582: LD_ADDR_VAR 0 8
27586: PUSH
27587: LD_INT 0
27589: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
27590: LD_VAR 0 5
27594: NOT
27595: PUSH
27596: LD_VAR 0 1
27600: NOT
27601: OR
27602: PUSH
27603: LD_VAR 0 2
27607: NOT
27608: OR
27609: PUSH
27610: LD_VAR 0 3
27614: NOT
27615: OR
27616: IFFALSE 27620
// exit ;
27618: GO 28434
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
27620: LD_ADDR_VAR 0 14
27624: PUSH
27625: LD_VAR 0 1
27629: PPUSH
27630: LD_VAR 0 2
27634: PPUSH
27635: LD_VAR 0 3
27639: PPUSH
27640: LD_VAR 0 4
27644: PPUSH
27645: LD_VAR 0 5
27649: PUSH
27650: LD_INT 1
27652: ARRAY
27653: PPUSH
27654: CALL_OW 248
27658: PPUSH
27659: LD_INT 0
27661: PPUSH
27662: CALL 29687 0 6
27666: ST_TO_ADDR
// if not hexes then
27667: LD_VAR 0 14
27671: NOT
27672: IFFALSE 27676
// exit ;
27674: GO 28434
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27676: LD_ADDR_VAR 0 17
27680: PUSH
27681: LD_VAR 0 5
27685: PPUSH
27686: LD_INT 22
27688: PUSH
27689: LD_VAR 0 13
27693: PPUSH
27694: CALL_OW 255
27698: PUSH
27699: EMPTY
27700: LIST
27701: LIST
27702: PUSH
27703: LD_INT 2
27705: PUSH
27706: LD_INT 30
27708: PUSH
27709: LD_INT 0
27711: PUSH
27712: EMPTY
27713: LIST
27714: LIST
27715: PUSH
27716: LD_INT 30
27718: PUSH
27719: LD_INT 1
27721: PUSH
27722: EMPTY
27723: LIST
27724: LIST
27725: PUSH
27726: EMPTY
27727: LIST
27728: LIST
27729: LIST
27730: PUSH
27731: EMPTY
27732: LIST
27733: LIST
27734: PPUSH
27735: CALL_OW 72
27739: ST_TO_ADDR
// for i = 1 to hexes do
27740: LD_ADDR_VAR 0 9
27744: PUSH
27745: DOUBLE
27746: LD_INT 1
27748: DEC
27749: ST_TO_ADDR
27750: LD_VAR 0 14
27754: PUSH
27755: FOR_TO
27756: IFFALSE 28432
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
27758: LD_ADDR_VAR 0 13
27762: PUSH
27763: LD_VAR 0 14
27767: PUSH
27768: LD_VAR 0 9
27772: ARRAY
27773: PUSH
27774: LD_INT 1
27776: ARRAY
27777: PPUSH
27778: LD_VAR 0 14
27782: PUSH
27783: LD_VAR 0 9
27787: ARRAY
27788: PUSH
27789: LD_INT 2
27791: ARRAY
27792: PPUSH
27793: CALL_OW 428
27797: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
27798: LD_VAR 0 14
27802: PUSH
27803: LD_VAR 0 9
27807: ARRAY
27808: PUSH
27809: LD_INT 1
27811: ARRAY
27812: PPUSH
27813: LD_VAR 0 14
27817: PUSH
27818: LD_VAR 0 9
27822: ARRAY
27823: PUSH
27824: LD_INT 2
27826: ARRAY
27827: PPUSH
27828: CALL_OW 351
27832: PUSH
27833: LD_VAR 0 14
27837: PUSH
27838: LD_VAR 0 9
27842: ARRAY
27843: PUSH
27844: LD_INT 1
27846: ARRAY
27847: PPUSH
27848: LD_VAR 0 14
27852: PUSH
27853: LD_VAR 0 9
27857: ARRAY
27858: PUSH
27859: LD_INT 2
27861: ARRAY
27862: PPUSH
27863: CALL_OW 488
27867: NOT
27868: OR
27869: PUSH
27870: LD_VAR 0 13
27874: PPUSH
27875: CALL_OW 247
27879: PUSH
27880: LD_INT 3
27882: EQUAL
27883: OR
27884: IFFALSE 27890
// exit ;
27886: POP
27887: POP
27888: GO 28434
// if not tmp then
27890: LD_VAR 0 13
27894: NOT
27895: IFFALSE 27899
// continue ;
27897: GO 27755
// result := true ;
27899: LD_ADDR_VAR 0 8
27903: PUSH
27904: LD_INT 1
27906: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
27907: LD_VAR 0 6
27911: PUSH
27912: LD_VAR 0 13
27916: PPUSH
27917: CALL_OW 247
27921: PUSH
27922: LD_INT 2
27924: EQUAL
27925: AND
27926: PUSH
27927: LD_VAR 0 13
27931: PPUSH
27932: CALL_OW 263
27936: PUSH
27937: LD_INT 1
27939: EQUAL
27940: AND
27941: IFFALSE 28105
// begin if IsDrivenBy ( tmp ) then
27943: LD_VAR 0 13
27947: PPUSH
27948: CALL_OW 311
27952: IFFALSE 27956
// continue ;
27954: GO 27755
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
27956: LD_VAR 0 6
27960: PPUSH
27961: LD_INT 3
27963: PUSH
27964: LD_INT 60
27966: PUSH
27967: EMPTY
27968: LIST
27969: PUSH
27970: EMPTY
27971: LIST
27972: LIST
27973: PUSH
27974: LD_INT 3
27976: PUSH
27977: LD_INT 55
27979: PUSH
27980: EMPTY
27981: LIST
27982: PUSH
27983: EMPTY
27984: LIST
27985: LIST
27986: PUSH
27987: EMPTY
27988: LIST
27989: LIST
27990: PPUSH
27991: CALL_OW 72
27995: IFFALSE 28103
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
27997: LD_ADDR_VAR 0 18
28001: PUSH
28002: LD_VAR 0 6
28006: PPUSH
28007: LD_INT 3
28009: PUSH
28010: LD_INT 60
28012: PUSH
28013: EMPTY
28014: LIST
28015: PUSH
28016: EMPTY
28017: LIST
28018: LIST
28019: PUSH
28020: LD_INT 3
28022: PUSH
28023: LD_INT 55
28025: PUSH
28026: EMPTY
28027: LIST
28028: PUSH
28029: EMPTY
28030: LIST
28031: LIST
28032: PUSH
28033: EMPTY
28034: LIST
28035: LIST
28036: PPUSH
28037: CALL_OW 72
28041: PUSH
28042: LD_INT 1
28044: ARRAY
28045: ST_TO_ADDR
// if IsInUnit ( driver ) then
28046: LD_VAR 0 18
28050: PPUSH
28051: CALL_OW 310
28055: IFFALSE 28066
// ComExit ( driver ) ;
28057: LD_VAR 0 18
28061: PPUSH
28062: CALL 53488 0 1
// AddComEnterUnit ( driver , tmp ) ;
28066: LD_VAR 0 18
28070: PPUSH
28071: LD_VAR 0 13
28075: PPUSH
28076: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
28080: LD_VAR 0 18
28084: PPUSH
28085: LD_VAR 0 7
28089: PPUSH
28090: CALL_OW 173
// AddComExitVehicle ( driver ) ;
28094: LD_VAR 0 18
28098: PPUSH
28099: CALL_OW 181
// end ; continue ;
28103: GO 27755
// end ; if not cleaners or not tmp in cleaners then
28105: LD_VAR 0 6
28109: NOT
28110: PUSH
28111: LD_VAR 0 13
28115: PUSH
28116: LD_VAR 0 6
28120: IN
28121: NOT
28122: OR
28123: IFFALSE 28430
// begin if dep then
28125: LD_VAR 0 17
28129: IFFALSE 28265
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
28131: LD_ADDR_VAR 0 16
28135: PUSH
28136: LD_VAR 0 17
28140: PUSH
28141: LD_INT 1
28143: ARRAY
28144: PPUSH
28145: CALL_OW 250
28149: PPUSH
28150: LD_VAR 0 17
28154: PUSH
28155: LD_INT 1
28157: ARRAY
28158: PPUSH
28159: CALL_OW 254
28163: PPUSH
28164: LD_INT 5
28166: PPUSH
28167: CALL_OW 272
28171: PUSH
28172: LD_VAR 0 17
28176: PUSH
28177: LD_INT 1
28179: ARRAY
28180: PPUSH
28181: CALL_OW 251
28185: PPUSH
28186: LD_VAR 0 17
28190: PUSH
28191: LD_INT 1
28193: ARRAY
28194: PPUSH
28195: CALL_OW 254
28199: PPUSH
28200: LD_INT 5
28202: PPUSH
28203: CALL_OW 273
28207: PUSH
28208: EMPTY
28209: LIST
28210: LIST
28211: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
28212: LD_VAR 0 16
28216: PUSH
28217: LD_INT 1
28219: ARRAY
28220: PPUSH
28221: LD_VAR 0 16
28225: PUSH
28226: LD_INT 2
28228: ARRAY
28229: PPUSH
28230: CALL_OW 488
28234: IFFALSE 28265
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
28236: LD_VAR 0 13
28240: PPUSH
28241: LD_VAR 0 16
28245: PUSH
28246: LD_INT 1
28248: ARRAY
28249: PPUSH
28250: LD_VAR 0 16
28254: PUSH
28255: LD_INT 2
28257: ARRAY
28258: PPUSH
28259: CALL_OW 111
// continue ;
28263: GO 27755
// end ; end ; r := GetDir ( tmp ) ;
28265: LD_ADDR_VAR 0 15
28269: PUSH
28270: LD_VAR 0 13
28274: PPUSH
28275: CALL_OW 254
28279: ST_TO_ADDR
// if r = 5 then
28280: LD_VAR 0 15
28284: PUSH
28285: LD_INT 5
28287: EQUAL
28288: IFFALSE 28298
// r := 0 ;
28290: LD_ADDR_VAR 0 15
28294: PUSH
28295: LD_INT 0
28297: ST_TO_ADDR
// for j = r to 5 do
28298: LD_ADDR_VAR 0 10
28302: PUSH
28303: DOUBLE
28304: LD_VAR 0 15
28308: DEC
28309: ST_TO_ADDR
28310: LD_INT 5
28312: PUSH
28313: FOR_TO
28314: IFFALSE 28428
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
28316: LD_ADDR_VAR 0 11
28320: PUSH
28321: LD_VAR 0 13
28325: PPUSH
28326: CALL_OW 250
28330: PPUSH
28331: LD_VAR 0 10
28335: PPUSH
28336: LD_INT 2
28338: PPUSH
28339: CALL_OW 272
28343: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
28344: LD_ADDR_VAR 0 12
28348: PUSH
28349: LD_VAR 0 13
28353: PPUSH
28354: CALL_OW 251
28358: PPUSH
28359: LD_VAR 0 10
28363: PPUSH
28364: LD_INT 2
28366: PPUSH
28367: CALL_OW 273
28371: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
28372: LD_VAR 0 11
28376: PPUSH
28377: LD_VAR 0 12
28381: PPUSH
28382: CALL_OW 488
28386: PUSH
28387: LD_VAR 0 11
28391: PPUSH
28392: LD_VAR 0 12
28396: PPUSH
28397: CALL_OW 428
28401: NOT
28402: AND
28403: IFFALSE 28426
// begin ComMoveXY ( tmp , _x , _y ) ;
28405: LD_VAR 0 13
28409: PPUSH
28410: LD_VAR 0 11
28414: PPUSH
28415: LD_VAR 0 12
28419: PPUSH
28420: CALL_OW 111
// break ;
28424: GO 28428
// end ; end ;
28426: GO 28313
28428: POP
28429: POP
// end ; end ;
28430: GO 27755
28432: POP
28433: POP
// end ;
28434: LD_VAR 0 8
28438: RET
// export function BuildingTechInvented ( side , btype ) ; begin
28439: LD_INT 0
28441: PPUSH
// result := true ;
28442: LD_ADDR_VAR 0 3
28446: PUSH
28447: LD_INT 1
28449: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
28450: LD_VAR 0 2
28454: PUSH
28455: LD_INT 24
28457: DOUBLE
28458: EQUAL
28459: IFTRUE 28469
28461: LD_INT 33
28463: DOUBLE
28464: EQUAL
28465: IFTRUE 28469
28467: GO 28494
28469: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
28470: LD_ADDR_VAR 0 3
28474: PUSH
28475: LD_INT 32
28477: PPUSH
28478: LD_VAR 0 1
28482: PPUSH
28483: CALL_OW 321
28487: PUSH
28488: LD_INT 2
28490: EQUAL
28491: ST_TO_ADDR
28492: GO 28810
28494: LD_INT 20
28496: DOUBLE
28497: EQUAL
28498: IFTRUE 28502
28500: GO 28527
28502: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
28503: LD_ADDR_VAR 0 3
28507: PUSH
28508: LD_INT 6
28510: PPUSH
28511: LD_VAR 0 1
28515: PPUSH
28516: CALL_OW 321
28520: PUSH
28521: LD_INT 2
28523: EQUAL
28524: ST_TO_ADDR
28525: GO 28810
28527: LD_INT 22
28529: DOUBLE
28530: EQUAL
28531: IFTRUE 28541
28533: LD_INT 36
28535: DOUBLE
28536: EQUAL
28537: IFTRUE 28541
28539: GO 28566
28541: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
28542: LD_ADDR_VAR 0 3
28546: PUSH
28547: LD_INT 15
28549: PPUSH
28550: LD_VAR 0 1
28554: PPUSH
28555: CALL_OW 321
28559: PUSH
28560: LD_INT 2
28562: EQUAL
28563: ST_TO_ADDR
28564: GO 28810
28566: LD_INT 30
28568: DOUBLE
28569: EQUAL
28570: IFTRUE 28574
28572: GO 28599
28574: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
28575: LD_ADDR_VAR 0 3
28579: PUSH
28580: LD_INT 20
28582: PPUSH
28583: LD_VAR 0 1
28587: PPUSH
28588: CALL_OW 321
28592: PUSH
28593: LD_INT 2
28595: EQUAL
28596: ST_TO_ADDR
28597: GO 28810
28599: LD_INT 28
28601: DOUBLE
28602: EQUAL
28603: IFTRUE 28613
28605: LD_INT 21
28607: DOUBLE
28608: EQUAL
28609: IFTRUE 28613
28611: GO 28638
28613: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
28614: LD_ADDR_VAR 0 3
28618: PUSH
28619: LD_INT 21
28621: PPUSH
28622: LD_VAR 0 1
28626: PPUSH
28627: CALL_OW 321
28631: PUSH
28632: LD_INT 2
28634: EQUAL
28635: ST_TO_ADDR
28636: GO 28810
28638: LD_INT 16
28640: DOUBLE
28641: EQUAL
28642: IFTRUE 28646
28644: GO 28671
28646: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
28647: LD_ADDR_VAR 0 3
28651: PUSH
28652: LD_INT 84
28654: PPUSH
28655: LD_VAR 0 1
28659: PPUSH
28660: CALL_OW 321
28664: PUSH
28665: LD_INT 2
28667: EQUAL
28668: ST_TO_ADDR
28669: GO 28810
28671: LD_INT 19
28673: DOUBLE
28674: EQUAL
28675: IFTRUE 28685
28677: LD_INT 23
28679: DOUBLE
28680: EQUAL
28681: IFTRUE 28685
28683: GO 28710
28685: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
28686: LD_ADDR_VAR 0 3
28690: PUSH
28691: LD_INT 83
28693: PPUSH
28694: LD_VAR 0 1
28698: PPUSH
28699: CALL_OW 321
28703: PUSH
28704: LD_INT 2
28706: EQUAL
28707: ST_TO_ADDR
28708: GO 28810
28710: LD_INT 17
28712: DOUBLE
28713: EQUAL
28714: IFTRUE 28718
28716: GO 28743
28718: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
28719: LD_ADDR_VAR 0 3
28723: PUSH
28724: LD_INT 39
28726: PPUSH
28727: LD_VAR 0 1
28731: PPUSH
28732: CALL_OW 321
28736: PUSH
28737: LD_INT 2
28739: EQUAL
28740: ST_TO_ADDR
28741: GO 28810
28743: LD_INT 18
28745: DOUBLE
28746: EQUAL
28747: IFTRUE 28751
28749: GO 28776
28751: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
28752: LD_ADDR_VAR 0 3
28756: PUSH
28757: LD_INT 40
28759: PPUSH
28760: LD_VAR 0 1
28764: PPUSH
28765: CALL_OW 321
28769: PUSH
28770: LD_INT 2
28772: EQUAL
28773: ST_TO_ADDR
28774: GO 28810
28776: LD_INT 27
28778: DOUBLE
28779: EQUAL
28780: IFTRUE 28784
28782: GO 28809
28784: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
28785: LD_ADDR_VAR 0 3
28789: PUSH
28790: LD_INT 35
28792: PPUSH
28793: LD_VAR 0 1
28797: PPUSH
28798: CALL_OW 321
28802: PUSH
28803: LD_INT 2
28805: EQUAL
28806: ST_TO_ADDR
28807: GO 28810
28809: POP
// end ;
28810: LD_VAR 0 3
28814: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
28815: LD_INT 0
28817: PPUSH
28818: PPUSH
28819: PPUSH
28820: PPUSH
28821: PPUSH
28822: PPUSH
28823: PPUSH
28824: PPUSH
28825: PPUSH
28826: PPUSH
28827: PPUSH
// result := false ;
28828: LD_ADDR_VAR 0 6
28832: PUSH
28833: LD_INT 0
28835: ST_TO_ADDR
// if btype = b_depot then
28836: LD_VAR 0 2
28840: PUSH
28841: LD_INT 0
28843: EQUAL
28844: IFFALSE 28856
// begin result := true ;
28846: LD_ADDR_VAR 0 6
28850: PUSH
28851: LD_INT 1
28853: ST_TO_ADDR
// exit ;
28854: GO 29682
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
28856: LD_VAR 0 1
28860: NOT
28861: PUSH
28862: LD_VAR 0 1
28866: PPUSH
28867: CALL_OW 266
28871: PUSH
28872: LD_INT 0
28874: PUSH
28875: LD_INT 1
28877: PUSH
28878: EMPTY
28879: LIST
28880: LIST
28881: IN
28882: NOT
28883: OR
28884: PUSH
28885: LD_VAR 0 2
28889: NOT
28890: OR
28891: PUSH
28892: LD_VAR 0 5
28896: PUSH
28897: LD_INT 0
28899: PUSH
28900: LD_INT 1
28902: PUSH
28903: LD_INT 2
28905: PUSH
28906: LD_INT 3
28908: PUSH
28909: LD_INT 4
28911: PUSH
28912: LD_INT 5
28914: PUSH
28915: EMPTY
28916: LIST
28917: LIST
28918: LIST
28919: LIST
28920: LIST
28921: LIST
28922: IN
28923: NOT
28924: OR
28925: PUSH
28926: LD_VAR 0 3
28930: PPUSH
28931: LD_VAR 0 4
28935: PPUSH
28936: CALL_OW 488
28940: NOT
28941: OR
28942: IFFALSE 28946
// exit ;
28944: GO 29682
// side := GetSide ( depot ) ;
28946: LD_ADDR_VAR 0 9
28950: PUSH
28951: LD_VAR 0 1
28955: PPUSH
28956: CALL_OW 255
28960: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
28961: LD_VAR 0 9
28965: PPUSH
28966: LD_VAR 0 2
28970: PPUSH
28971: CALL 28439 0 2
28975: NOT
28976: IFFALSE 28980
// exit ;
28978: GO 29682
// pom := GetBase ( depot ) ;
28980: LD_ADDR_VAR 0 10
28984: PUSH
28985: LD_VAR 0 1
28989: PPUSH
28990: CALL_OW 274
28994: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
28995: LD_ADDR_VAR 0 11
28999: PUSH
29000: LD_VAR 0 2
29004: PPUSH
29005: LD_VAR 0 1
29009: PPUSH
29010: CALL_OW 248
29014: PPUSH
29015: CALL_OW 450
29019: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
29020: LD_VAR 0 10
29024: PPUSH
29025: LD_INT 1
29027: PPUSH
29028: CALL_OW 275
29032: PUSH
29033: LD_VAR 0 11
29037: PUSH
29038: LD_INT 1
29040: ARRAY
29041: GREATEREQUAL
29042: PUSH
29043: LD_VAR 0 10
29047: PPUSH
29048: LD_INT 2
29050: PPUSH
29051: CALL_OW 275
29055: PUSH
29056: LD_VAR 0 11
29060: PUSH
29061: LD_INT 2
29063: ARRAY
29064: GREATEREQUAL
29065: AND
29066: PUSH
29067: LD_VAR 0 10
29071: PPUSH
29072: LD_INT 3
29074: PPUSH
29075: CALL_OW 275
29079: PUSH
29080: LD_VAR 0 11
29084: PUSH
29085: LD_INT 3
29087: ARRAY
29088: GREATEREQUAL
29089: AND
29090: NOT
29091: IFFALSE 29095
// exit ;
29093: GO 29682
// if GetBType ( depot ) = b_depot then
29095: LD_VAR 0 1
29099: PPUSH
29100: CALL_OW 266
29104: PUSH
29105: LD_INT 0
29107: EQUAL
29108: IFFALSE 29120
// dist := 28 else
29110: LD_ADDR_VAR 0 14
29114: PUSH
29115: LD_INT 28
29117: ST_TO_ADDR
29118: GO 29128
// dist := 36 ;
29120: LD_ADDR_VAR 0 14
29124: PUSH
29125: LD_INT 36
29127: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
29128: LD_VAR 0 1
29132: PPUSH
29133: LD_VAR 0 3
29137: PPUSH
29138: LD_VAR 0 4
29142: PPUSH
29143: CALL_OW 297
29147: PUSH
29148: LD_VAR 0 14
29152: GREATER
29153: IFFALSE 29157
// exit ;
29155: GO 29682
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
29157: LD_ADDR_VAR 0 12
29161: PUSH
29162: LD_VAR 0 2
29166: PPUSH
29167: LD_VAR 0 3
29171: PPUSH
29172: LD_VAR 0 4
29176: PPUSH
29177: LD_VAR 0 5
29181: PPUSH
29182: LD_VAR 0 1
29186: PPUSH
29187: CALL_OW 248
29191: PPUSH
29192: LD_INT 0
29194: PPUSH
29195: CALL 29687 0 6
29199: ST_TO_ADDR
// if not hexes then
29200: LD_VAR 0 12
29204: NOT
29205: IFFALSE 29209
// exit ;
29207: GO 29682
// hex := GetHexInfo ( x , y ) ;
29209: LD_ADDR_VAR 0 15
29213: PUSH
29214: LD_VAR 0 3
29218: PPUSH
29219: LD_VAR 0 4
29223: PPUSH
29224: CALL_OW 546
29228: ST_TO_ADDR
// if hex [ 1 ] then
29229: LD_VAR 0 15
29233: PUSH
29234: LD_INT 1
29236: ARRAY
29237: IFFALSE 29241
// exit ;
29239: GO 29682
// height := hex [ 2 ] ;
29241: LD_ADDR_VAR 0 13
29245: PUSH
29246: LD_VAR 0 15
29250: PUSH
29251: LD_INT 2
29253: ARRAY
29254: ST_TO_ADDR
// for i = 1 to hexes do
29255: LD_ADDR_VAR 0 7
29259: PUSH
29260: DOUBLE
29261: LD_INT 1
29263: DEC
29264: ST_TO_ADDR
29265: LD_VAR 0 12
29269: PUSH
29270: FOR_TO
29271: IFFALSE 29601
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
29273: LD_VAR 0 12
29277: PUSH
29278: LD_VAR 0 7
29282: ARRAY
29283: PUSH
29284: LD_INT 1
29286: ARRAY
29287: PPUSH
29288: LD_VAR 0 12
29292: PUSH
29293: LD_VAR 0 7
29297: ARRAY
29298: PUSH
29299: LD_INT 2
29301: ARRAY
29302: PPUSH
29303: CALL_OW 488
29307: NOT
29308: PUSH
29309: LD_VAR 0 12
29313: PUSH
29314: LD_VAR 0 7
29318: ARRAY
29319: PUSH
29320: LD_INT 1
29322: ARRAY
29323: PPUSH
29324: LD_VAR 0 12
29328: PUSH
29329: LD_VAR 0 7
29333: ARRAY
29334: PUSH
29335: LD_INT 2
29337: ARRAY
29338: PPUSH
29339: CALL_OW 428
29343: PUSH
29344: LD_INT 0
29346: GREATER
29347: OR
29348: PUSH
29349: LD_VAR 0 12
29353: PUSH
29354: LD_VAR 0 7
29358: ARRAY
29359: PUSH
29360: LD_INT 1
29362: ARRAY
29363: PPUSH
29364: LD_VAR 0 12
29368: PUSH
29369: LD_VAR 0 7
29373: ARRAY
29374: PUSH
29375: LD_INT 2
29377: ARRAY
29378: PPUSH
29379: CALL_OW 351
29383: OR
29384: IFFALSE 29390
// exit ;
29386: POP
29387: POP
29388: GO 29682
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
29390: LD_ADDR_VAR 0 8
29394: PUSH
29395: LD_VAR 0 12
29399: PUSH
29400: LD_VAR 0 7
29404: ARRAY
29405: PUSH
29406: LD_INT 1
29408: ARRAY
29409: PPUSH
29410: LD_VAR 0 12
29414: PUSH
29415: LD_VAR 0 7
29419: ARRAY
29420: PUSH
29421: LD_INT 2
29423: ARRAY
29424: PPUSH
29425: CALL_OW 546
29429: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
29430: LD_VAR 0 8
29434: PUSH
29435: LD_INT 1
29437: ARRAY
29438: PUSH
29439: LD_VAR 0 8
29443: PUSH
29444: LD_INT 2
29446: ARRAY
29447: PUSH
29448: LD_VAR 0 13
29452: PUSH
29453: LD_INT 2
29455: PLUS
29456: GREATER
29457: OR
29458: PUSH
29459: LD_VAR 0 8
29463: PUSH
29464: LD_INT 2
29466: ARRAY
29467: PUSH
29468: LD_VAR 0 13
29472: PUSH
29473: LD_INT 2
29475: MINUS
29476: LESS
29477: OR
29478: PUSH
29479: LD_VAR 0 8
29483: PUSH
29484: LD_INT 3
29486: ARRAY
29487: PUSH
29488: LD_INT 0
29490: PUSH
29491: LD_INT 8
29493: PUSH
29494: LD_INT 9
29496: PUSH
29497: LD_INT 10
29499: PUSH
29500: LD_INT 11
29502: PUSH
29503: LD_INT 12
29505: PUSH
29506: LD_INT 13
29508: PUSH
29509: LD_INT 16
29511: PUSH
29512: LD_INT 17
29514: PUSH
29515: LD_INT 18
29517: PUSH
29518: LD_INT 19
29520: PUSH
29521: LD_INT 20
29523: PUSH
29524: LD_INT 21
29526: PUSH
29527: EMPTY
29528: LIST
29529: LIST
29530: LIST
29531: LIST
29532: LIST
29533: LIST
29534: LIST
29535: LIST
29536: LIST
29537: LIST
29538: LIST
29539: LIST
29540: LIST
29541: IN
29542: NOT
29543: OR
29544: PUSH
29545: LD_VAR 0 8
29549: PUSH
29550: LD_INT 5
29552: ARRAY
29553: NOT
29554: OR
29555: PUSH
29556: LD_VAR 0 8
29560: PUSH
29561: LD_INT 6
29563: ARRAY
29564: PUSH
29565: LD_INT 1
29567: PUSH
29568: LD_INT 2
29570: PUSH
29571: LD_INT 7
29573: PUSH
29574: LD_INT 9
29576: PUSH
29577: LD_INT 10
29579: PUSH
29580: LD_INT 11
29582: PUSH
29583: EMPTY
29584: LIST
29585: LIST
29586: LIST
29587: LIST
29588: LIST
29589: LIST
29590: IN
29591: NOT
29592: OR
29593: IFFALSE 29599
// exit ;
29595: POP
29596: POP
29597: GO 29682
// end ;
29599: GO 29270
29601: POP
29602: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
29603: LD_VAR 0 9
29607: PPUSH
29608: LD_VAR 0 3
29612: PPUSH
29613: LD_VAR 0 4
29617: PPUSH
29618: LD_INT 20
29620: PPUSH
29621: CALL 21605 0 4
29625: PUSH
29626: LD_INT 4
29628: ARRAY
29629: IFFALSE 29633
// exit ;
29631: GO 29682
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
29633: LD_VAR 0 2
29637: PUSH
29638: LD_INT 29
29640: PUSH
29641: LD_INT 30
29643: PUSH
29644: EMPTY
29645: LIST
29646: LIST
29647: IN
29648: PUSH
29649: LD_VAR 0 3
29653: PPUSH
29654: LD_VAR 0 4
29658: PPUSH
29659: LD_VAR 0 9
29663: PPUSH
29664: CALL_OW 440
29668: NOT
29669: AND
29670: IFFALSE 29674
// exit ;
29672: GO 29682
// result := true ;
29674: LD_ADDR_VAR 0 6
29678: PUSH
29679: LD_INT 1
29681: ST_TO_ADDR
// end ;
29682: LD_VAR 0 6
29686: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
29687: LD_INT 0
29689: PPUSH
29690: PPUSH
29691: PPUSH
29692: PPUSH
29693: PPUSH
29694: PPUSH
29695: PPUSH
29696: PPUSH
29697: PPUSH
29698: PPUSH
29699: PPUSH
29700: PPUSH
29701: PPUSH
29702: PPUSH
29703: PPUSH
29704: PPUSH
29705: PPUSH
29706: PPUSH
29707: PPUSH
29708: PPUSH
29709: PPUSH
29710: PPUSH
29711: PPUSH
29712: PPUSH
29713: PPUSH
29714: PPUSH
29715: PPUSH
29716: PPUSH
29717: PPUSH
29718: PPUSH
29719: PPUSH
29720: PPUSH
29721: PPUSH
29722: PPUSH
29723: PPUSH
29724: PPUSH
29725: PPUSH
29726: PPUSH
29727: PPUSH
29728: PPUSH
29729: PPUSH
29730: PPUSH
29731: PPUSH
29732: PPUSH
29733: PPUSH
29734: PPUSH
29735: PPUSH
29736: PPUSH
29737: PPUSH
29738: PPUSH
29739: PPUSH
29740: PPUSH
29741: PPUSH
29742: PPUSH
29743: PPUSH
29744: PPUSH
29745: PPUSH
29746: PPUSH
// result = [ ] ;
29747: LD_ADDR_VAR 0 7
29751: PUSH
29752: EMPTY
29753: ST_TO_ADDR
// temp_list = [ ] ;
29754: LD_ADDR_VAR 0 9
29758: PUSH
29759: EMPTY
29760: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
29761: LD_VAR 0 4
29765: PUSH
29766: LD_INT 0
29768: PUSH
29769: LD_INT 1
29771: PUSH
29772: LD_INT 2
29774: PUSH
29775: LD_INT 3
29777: PUSH
29778: LD_INT 4
29780: PUSH
29781: LD_INT 5
29783: PUSH
29784: EMPTY
29785: LIST
29786: LIST
29787: LIST
29788: LIST
29789: LIST
29790: LIST
29791: IN
29792: NOT
29793: PUSH
29794: LD_VAR 0 1
29798: PUSH
29799: LD_INT 0
29801: PUSH
29802: LD_INT 1
29804: PUSH
29805: EMPTY
29806: LIST
29807: LIST
29808: IN
29809: PUSH
29810: LD_VAR 0 5
29814: PUSH
29815: LD_INT 1
29817: PUSH
29818: LD_INT 2
29820: PUSH
29821: LD_INT 3
29823: PUSH
29824: EMPTY
29825: LIST
29826: LIST
29827: LIST
29828: IN
29829: NOT
29830: AND
29831: OR
29832: IFFALSE 29836
// exit ;
29834: GO 48227
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
29836: LD_VAR 0 1
29840: PUSH
29841: LD_INT 6
29843: PUSH
29844: LD_INT 7
29846: PUSH
29847: LD_INT 8
29849: PUSH
29850: LD_INT 13
29852: PUSH
29853: LD_INT 12
29855: PUSH
29856: LD_INT 15
29858: PUSH
29859: LD_INT 11
29861: PUSH
29862: LD_INT 14
29864: PUSH
29865: LD_INT 10
29867: PUSH
29868: EMPTY
29869: LIST
29870: LIST
29871: LIST
29872: LIST
29873: LIST
29874: LIST
29875: LIST
29876: LIST
29877: LIST
29878: IN
29879: IFFALSE 29889
// btype = b_lab ;
29881: LD_ADDR_VAR 0 1
29885: PUSH
29886: LD_INT 6
29888: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
29889: LD_VAR 0 6
29893: PUSH
29894: LD_INT 0
29896: PUSH
29897: LD_INT 1
29899: PUSH
29900: LD_INT 2
29902: PUSH
29903: EMPTY
29904: LIST
29905: LIST
29906: LIST
29907: IN
29908: NOT
29909: PUSH
29910: LD_VAR 0 1
29914: PUSH
29915: LD_INT 0
29917: PUSH
29918: LD_INT 1
29920: PUSH
29921: LD_INT 2
29923: PUSH
29924: LD_INT 3
29926: PUSH
29927: LD_INT 6
29929: PUSH
29930: LD_INT 36
29932: PUSH
29933: LD_INT 4
29935: PUSH
29936: LD_INT 5
29938: PUSH
29939: LD_INT 31
29941: PUSH
29942: LD_INT 32
29944: PUSH
29945: LD_INT 33
29947: PUSH
29948: EMPTY
29949: LIST
29950: LIST
29951: LIST
29952: LIST
29953: LIST
29954: LIST
29955: LIST
29956: LIST
29957: LIST
29958: LIST
29959: LIST
29960: IN
29961: NOT
29962: PUSH
29963: LD_VAR 0 6
29967: PUSH
29968: LD_INT 1
29970: EQUAL
29971: AND
29972: OR
29973: PUSH
29974: LD_VAR 0 1
29978: PUSH
29979: LD_INT 2
29981: PUSH
29982: LD_INT 3
29984: PUSH
29985: EMPTY
29986: LIST
29987: LIST
29988: IN
29989: NOT
29990: PUSH
29991: LD_VAR 0 6
29995: PUSH
29996: LD_INT 2
29998: EQUAL
29999: AND
30000: OR
30001: IFFALSE 30011
// mode = 0 ;
30003: LD_ADDR_VAR 0 6
30007: PUSH
30008: LD_INT 0
30010: ST_TO_ADDR
// case mode of 0 :
30011: LD_VAR 0 6
30015: PUSH
30016: LD_INT 0
30018: DOUBLE
30019: EQUAL
30020: IFTRUE 30024
30022: GO 41477
30024: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30025: LD_ADDR_VAR 0 11
30029: PUSH
30030: LD_INT 0
30032: PUSH
30033: LD_INT 0
30035: PUSH
30036: EMPTY
30037: LIST
30038: LIST
30039: PUSH
30040: LD_INT 0
30042: PUSH
30043: LD_INT 1
30045: NEG
30046: PUSH
30047: EMPTY
30048: LIST
30049: LIST
30050: PUSH
30051: LD_INT 1
30053: PUSH
30054: LD_INT 0
30056: PUSH
30057: EMPTY
30058: LIST
30059: LIST
30060: PUSH
30061: LD_INT 1
30063: PUSH
30064: LD_INT 1
30066: PUSH
30067: EMPTY
30068: LIST
30069: LIST
30070: PUSH
30071: LD_INT 0
30073: PUSH
30074: LD_INT 1
30076: PUSH
30077: EMPTY
30078: LIST
30079: LIST
30080: PUSH
30081: LD_INT 1
30083: NEG
30084: PUSH
30085: LD_INT 0
30087: PUSH
30088: EMPTY
30089: LIST
30090: LIST
30091: PUSH
30092: LD_INT 1
30094: NEG
30095: PUSH
30096: LD_INT 1
30098: NEG
30099: PUSH
30100: EMPTY
30101: LIST
30102: LIST
30103: PUSH
30104: LD_INT 1
30106: NEG
30107: PUSH
30108: LD_INT 2
30110: NEG
30111: PUSH
30112: EMPTY
30113: LIST
30114: LIST
30115: PUSH
30116: LD_INT 0
30118: PUSH
30119: LD_INT 2
30121: NEG
30122: PUSH
30123: EMPTY
30124: LIST
30125: LIST
30126: PUSH
30127: LD_INT 1
30129: PUSH
30130: LD_INT 1
30132: NEG
30133: PUSH
30134: EMPTY
30135: LIST
30136: LIST
30137: PUSH
30138: LD_INT 1
30140: PUSH
30141: LD_INT 2
30143: PUSH
30144: EMPTY
30145: LIST
30146: LIST
30147: PUSH
30148: LD_INT 0
30150: PUSH
30151: LD_INT 2
30153: PUSH
30154: EMPTY
30155: LIST
30156: LIST
30157: PUSH
30158: LD_INT 1
30160: NEG
30161: PUSH
30162: LD_INT 1
30164: PUSH
30165: EMPTY
30166: LIST
30167: LIST
30168: PUSH
30169: LD_INT 1
30171: PUSH
30172: LD_INT 3
30174: PUSH
30175: EMPTY
30176: LIST
30177: LIST
30178: PUSH
30179: LD_INT 0
30181: PUSH
30182: LD_INT 3
30184: PUSH
30185: EMPTY
30186: LIST
30187: LIST
30188: PUSH
30189: LD_INT 1
30191: NEG
30192: PUSH
30193: LD_INT 2
30195: PUSH
30196: EMPTY
30197: LIST
30198: LIST
30199: PUSH
30200: EMPTY
30201: LIST
30202: LIST
30203: LIST
30204: LIST
30205: LIST
30206: LIST
30207: LIST
30208: LIST
30209: LIST
30210: LIST
30211: LIST
30212: LIST
30213: LIST
30214: LIST
30215: LIST
30216: LIST
30217: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30218: LD_ADDR_VAR 0 12
30222: PUSH
30223: LD_INT 0
30225: PUSH
30226: LD_INT 0
30228: PUSH
30229: EMPTY
30230: LIST
30231: LIST
30232: PUSH
30233: LD_INT 0
30235: PUSH
30236: LD_INT 1
30238: NEG
30239: PUSH
30240: EMPTY
30241: LIST
30242: LIST
30243: PUSH
30244: LD_INT 1
30246: PUSH
30247: LD_INT 0
30249: PUSH
30250: EMPTY
30251: LIST
30252: LIST
30253: PUSH
30254: LD_INT 1
30256: PUSH
30257: LD_INT 1
30259: PUSH
30260: EMPTY
30261: LIST
30262: LIST
30263: PUSH
30264: LD_INT 0
30266: PUSH
30267: LD_INT 1
30269: PUSH
30270: EMPTY
30271: LIST
30272: LIST
30273: PUSH
30274: LD_INT 1
30276: NEG
30277: PUSH
30278: LD_INT 0
30280: PUSH
30281: EMPTY
30282: LIST
30283: LIST
30284: PUSH
30285: LD_INT 1
30287: NEG
30288: PUSH
30289: LD_INT 1
30291: NEG
30292: PUSH
30293: EMPTY
30294: LIST
30295: LIST
30296: PUSH
30297: LD_INT 1
30299: PUSH
30300: LD_INT 1
30302: NEG
30303: PUSH
30304: EMPTY
30305: LIST
30306: LIST
30307: PUSH
30308: LD_INT 2
30310: PUSH
30311: LD_INT 0
30313: PUSH
30314: EMPTY
30315: LIST
30316: LIST
30317: PUSH
30318: LD_INT 2
30320: PUSH
30321: LD_INT 1
30323: PUSH
30324: EMPTY
30325: LIST
30326: LIST
30327: PUSH
30328: LD_INT 1
30330: NEG
30331: PUSH
30332: LD_INT 1
30334: PUSH
30335: EMPTY
30336: LIST
30337: LIST
30338: PUSH
30339: LD_INT 2
30341: NEG
30342: PUSH
30343: LD_INT 0
30345: PUSH
30346: EMPTY
30347: LIST
30348: LIST
30349: PUSH
30350: LD_INT 2
30352: NEG
30353: PUSH
30354: LD_INT 1
30356: NEG
30357: PUSH
30358: EMPTY
30359: LIST
30360: LIST
30361: PUSH
30362: LD_INT 2
30364: NEG
30365: PUSH
30366: LD_INT 1
30368: PUSH
30369: EMPTY
30370: LIST
30371: LIST
30372: PUSH
30373: LD_INT 3
30375: NEG
30376: PUSH
30377: LD_INT 0
30379: PUSH
30380: EMPTY
30381: LIST
30382: LIST
30383: PUSH
30384: LD_INT 3
30386: NEG
30387: PUSH
30388: LD_INT 1
30390: NEG
30391: PUSH
30392: EMPTY
30393: LIST
30394: LIST
30395: PUSH
30396: EMPTY
30397: LIST
30398: LIST
30399: LIST
30400: LIST
30401: LIST
30402: LIST
30403: LIST
30404: LIST
30405: LIST
30406: LIST
30407: LIST
30408: LIST
30409: LIST
30410: LIST
30411: LIST
30412: LIST
30413: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30414: LD_ADDR_VAR 0 13
30418: PUSH
30419: LD_INT 0
30421: PUSH
30422: LD_INT 0
30424: PUSH
30425: EMPTY
30426: LIST
30427: LIST
30428: PUSH
30429: LD_INT 0
30431: PUSH
30432: LD_INT 1
30434: NEG
30435: PUSH
30436: EMPTY
30437: LIST
30438: LIST
30439: PUSH
30440: LD_INT 1
30442: PUSH
30443: LD_INT 0
30445: PUSH
30446: EMPTY
30447: LIST
30448: LIST
30449: PUSH
30450: LD_INT 1
30452: PUSH
30453: LD_INT 1
30455: PUSH
30456: EMPTY
30457: LIST
30458: LIST
30459: PUSH
30460: LD_INT 0
30462: PUSH
30463: LD_INT 1
30465: PUSH
30466: EMPTY
30467: LIST
30468: LIST
30469: PUSH
30470: LD_INT 1
30472: NEG
30473: PUSH
30474: LD_INT 0
30476: PUSH
30477: EMPTY
30478: LIST
30479: LIST
30480: PUSH
30481: LD_INT 1
30483: NEG
30484: PUSH
30485: LD_INT 1
30487: NEG
30488: PUSH
30489: EMPTY
30490: LIST
30491: LIST
30492: PUSH
30493: LD_INT 1
30495: NEG
30496: PUSH
30497: LD_INT 2
30499: NEG
30500: PUSH
30501: EMPTY
30502: LIST
30503: LIST
30504: PUSH
30505: LD_INT 2
30507: PUSH
30508: LD_INT 1
30510: PUSH
30511: EMPTY
30512: LIST
30513: LIST
30514: PUSH
30515: LD_INT 2
30517: PUSH
30518: LD_INT 2
30520: PUSH
30521: EMPTY
30522: LIST
30523: LIST
30524: PUSH
30525: LD_INT 1
30527: PUSH
30528: LD_INT 2
30530: PUSH
30531: EMPTY
30532: LIST
30533: LIST
30534: PUSH
30535: LD_INT 2
30537: NEG
30538: PUSH
30539: LD_INT 1
30541: NEG
30542: PUSH
30543: EMPTY
30544: LIST
30545: LIST
30546: PUSH
30547: LD_INT 2
30549: NEG
30550: PUSH
30551: LD_INT 2
30553: NEG
30554: PUSH
30555: EMPTY
30556: LIST
30557: LIST
30558: PUSH
30559: LD_INT 2
30561: NEG
30562: PUSH
30563: LD_INT 3
30565: NEG
30566: PUSH
30567: EMPTY
30568: LIST
30569: LIST
30570: PUSH
30571: LD_INT 3
30573: NEG
30574: PUSH
30575: LD_INT 2
30577: NEG
30578: PUSH
30579: EMPTY
30580: LIST
30581: LIST
30582: PUSH
30583: LD_INT 3
30585: NEG
30586: PUSH
30587: LD_INT 3
30589: NEG
30590: PUSH
30591: EMPTY
30592: LIST
30593: LIST
30594: PUSH
30595: EMPTY
30596: LIST
30597: LIST
30598: LIST
30599: LIST
30600: LIST
30601: LIST
30602: LIST
30603: LIST
30604: LIST
30605: LIST
30606: LIST
30607: LIST
30608: LIST
30609: LIST
30610: LIST
30611: LIST
30612: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30613: LD_ADDR_VAR 0 14
30617: PUSH
30618: LD_INT 0
30620: PUSH
30621: LD_INT 0
30623: PUSH
30624: EMPTY
30625: LIST
30626: LIST
30627: PUSH
30628: LD_INT 0
30630: PUSH
30631: LD_INT 1
30633: NEG
30634: PUSH
30635: EMPTY
30636: LIST
30637: LIST
30638: PUSH
30639: LD_INT 1
30641: PUSH
30642: LD_INT 0
30644: PUSH
30645: EMPTY
30646: LIST
30647: LIST
30648: PUSH
30649: LD_INT 1
30651: PUSH
30652: LD_INT 1
30654: PUSH
30655: EMPTY
30656: LIST
30657: LIST
30658: PUSH
30659: LD_INT 0
30661: PUSH
30662: LD_INT 1
30664: PUSH
30665: EMPTY
30666: LIST
30667: LIST
30668: PUSH
30669: LD_INT 1
30671: NEG
30672: PUSH
30673: LD_INT 0
30675: PUSH
30676: EMPTY
30677: LIST
30678: LIST
30679: PUSH
30680: LD_INT 1
30682: NEG
30683: PUSH
30684: LD_INT 1
30686: NEG
30687: PUSH
30688: EMPTY
30689: LIST
30690: LIST
30691: PUSH
30692: LD_INT 1
30694: NEG
30695: PUSH
30696: LD_INT 2
30698: NEG
30699: PUSH
30700: EMPTY
30701: LIST
30702: LIST
30703: PUSH
30704: LD_INT 0
30706: PUSH
30707: LD_INT 2
30709: NEG
30710: PUSH
30711: EMPTY
30712: LIST
30713: LIST
30714: PUSH
30715: LD_INT 1
30717: PUSH
30718: LD_INT 1
30720: NEG
30721: PUSH
30722: EMPTY
30723: LIST
30724: LIST
30725: PUSH
30726: LD_INT 1
30728: PUSH
30729: LD_INT 2
30731: PUSH
30732: EMPTY
30733: LIST
30734: LIST
30735: PUSH
30736: LD_INT 0
30738: PUSH
30739: LD_INT 2
30741: PUSH
30742: EMPTY
30743: LIST
30744: LIST
30745: PUSH
30746: LD_INT 1
30748: NEG
30749: PUSH
30750: LD_INT 1
30752: PUSH
30753: EMPTY
30754: LIST
30755: LIST
30756: PUSH
30757: LD_INT 1
30759: NEG
30760: PUSH
30761: LD_INT 3
30763: NEG
30764: PUSH
30765: EMPTY
30766: LIST
30767: LIST
30768: PUSH
30769: LD_INT 0
30771: PUSH
30772: LD_INT 3
30774: NEG
30775: PUSH
30776: EMPTY
30777: LIST
30778: LIST
30779: PUSH
30780: LD_INT 1
30782: PUSH
30783: LD_INT 2
30785: NEG
30786: PUSH
30787: EMPTY
30788: LIST
30789: LIST
30790: PUSH
30791: EMPTY
30792: LIST
30793: LIST
30794: LIST
30795: LIST
30796: LIST
30797: LIST
30798: LIST
30799: LIST
30800: LIST
30801: LIST
30802: LIST
30803: LIST
30804: LIST
30805: LIST
30806: LIST
30807: LIST
30808: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30809: LD_ADDR_VAR 0 15
30813: PUSH
30814: LD_INT 0
30816: PUSH
30817: LD_INT 0
30819: PUSH
30820: EMPTY
30821: LIST
30822: LIST
30823: PUSH
30824: LD_INT 0
30826: PUSH
30827: LD_INT 1
30829: NEG
30830: PUSH
30831: EMPTY
30832: LIST
30833: LIST
30834: PUSH
30835: LD_INT 1
30837: PUSH
30838: LD_INT 0
30840: PUSH
30841: EMPTY
30842: LIST
30843: LIST
30844: PUSH
30845: LD_INT 1
30847: PUSH
30848: LD_INT 1
30850: PUSH
30851: EMPTY
30852: LIST
30853: LIST
30854: PUSH
30855: LD_INT 0
30857: PUSH
30858: LD_INT 1
30860: PUSH
30861: EMPTY
30862: LIST
30863: LIST
30864: PUSH
30865: LD_INT 1
30867: NEG
30868: PUSH
30869: LD_INT 0
30871: PUSH
30872: EMPTY
30873: LIST
30874: LIST
30875: PUSH
30876: LD_INT 1
30878: NEG
30879: PUSH
30880: LD_INT 1
30882: NEG
30883: PUSH
30884: EMPTY
30885: LIST
30886: LIST
30887: PUSH
30888: LD_INT 1
30890: PUSH
30891: LD_INT 1
30893: NEG
30894: PUSH
30895: EMPTY
30896: LIST
30897: LIST
30898: PUSH
30899: LD_INT 2
30901: PUSH
30902: LD_INT 0
30904: PUSH
30905: EMPTY
30906: LIST
30907: LIST
30908: PUSH
30909: LD_INT 2
30911: PUSH
30912: LD_INT 1
30914: PUSH
30915: EMPTY
30916: LIST
30917: LIST
30918: PUSH
30919: LD_INT 1
30921: NEG
30922: PUSH
30923: LD_INT 1
30925: PUSH
30926: EMPTY
30927: LIST
30928: LIST
30929: PUSH
30930: LD_INT 2
30932: NEG
30933: PUSH
30934: LD_INT 0
30936: PUSH
30937: EMPTY
30938: LIST
30939: LIST
30940: PUSH
30941: LD_INT 2
30943: NEG
30944: PUSH
30945: LD_INT 1
30947: NEG
30948: PUSH
30949: EMPTY
30950: LIST
30951: LIST
30952: PUSH
30953: LD_INT 2
30955: PUSH
30956: LD_INT 1
30958: NEG
30959: PUSH
30960: EMPTY
30961: LIST
30962: LIST
30963: PUSH
30964: LD_INT 3
30966: PUSH
30967: LD_INT 0
30969: PUSH
30970: EMPTY
30971: LIST
30972: LIST
30973: PUSH
30974: LD_INT 3
30976: PUSH
30977: LD_INT 1
30979: PUSH
30980: EMPTY
30981: LIST
30982: LIST
30983: PUSH
30984: EMPTY
30985: LIST
30986: LIST
30987: LIST
30988: LIST
30989: LIST
30990: LIST
30991: LIST
30992: LIST
30993: LIST
30994: LIST
30995: LIST
30996: LIST
30997: LIST
30998: LIST
30999: LIST
31000: LIST
31001: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31002: LD_ADDR_VAR 0 16
31006: PUSH
31007: LD_INT 0
31009: PUSH
31010: LD_INT 0
31012: PUSH
31013: EMPTY
31014: LIST
31015: LIST
31016: PUSH
31017: LD_INT 0
31019: PUSH
31020: LD_INT 1
31022: NEG
31023: PUSH
31024: EMPTY
31025: LIST
31026: LIST
31027: PUSH
31028: LD_INT 1
31030: PUSH
31031: LD_INT 0
31033: PUSH
31034: EMPTY
31035: LIST
31036: LIST
31037: PUSH
31038: LD_INT 1
31040: PUSH
31041: LD_INT 1
31043: PUSH
31044: EMPTY
31045: LIST
31046: LIST
31047: PUSH
31048: LD_INT 0
31050: PUSH
31051: LD_INT 1
31053: PUSH
31054: EMPTY
31055: LIST
31056: LIST
31057: PUSH
31058: LD_INT 1
31060: NEG
31061: PUSH
31062: LD_INT 0
31064: PUSH
31065: EMPTY
31066: LIST
31067: LIST
31068: PUSH
31069: LD_INT 1
31071: NEG
31072: PUSH
31073: LD_INT 1
31075: NEG
31076: PUSH
31077: EMPTY
31078: LIST
31079: LIST
31080: PUSH
31081: LD_INT 1
31083: NEG
31084: PUSH
31085: LD_INT 2
31087: NEG
31088: PUSH
31089: EMPTY
31090: LIST
31091: LIST
31092: PUSH
31093: LD_INT 2
31095: PUSH
31096: LD_INT 1
31098: PUSH
31099: EMPTY
31100: LIST
31101: LIST
31102: PUSH
31103: LD_INT 2
31105: PUSH
31106: LD_INT 2
31108: PUSH
31109: EMPTY
31110: LIST
31111: LIST
31112: PUSH
31113: LD_INT 1
31115: PUSH
31116: LD_INT 2
31118: PUSH
31119: EMPTY
31120: LIST
31121: LIST
31122: PUSH
31123: LD_INT 2
31125: NEG
31126: PUSH
31127: LD_INT 1
31129: NEG
31130: PUSH
31131: EMPTY
31132: LIST
31133: LIST
31134: PUSH
31135: LD_INT 2
31137: NEG
31138: PUSH
31139: LD_INT 2
31141: NEG
31142: PUSH
31143: EMPTY
31144: LIST
31145: LIST
31146: PUSH
31147: LD_INT 3
31149: PUSH
31150: LD_INT 2
31152: PUSH
31153: EMPTY
31154: LIST
31155: LIST
31156: PUSH
31157: LD_INT 3
31159: PUSH
31160: LD_INT 3
31162: PUSH
31163: EMPTY
31164: LIST
31165: LIST
31166: PUSH
31167: LD_INT 2
31169: PUSH
31170: LD_INT 3
31172: PUSH
31173: EMPTY
31174: LIST
31175: LIST
31176: PUSH
31177: EMPTY
31178: LIST
31179: LIST
31180: LIST
31181: LIST
31182: LIST
31183: LIST
31184: LIST
31185: LIST
31186: LIST
31187: LIST
31188: LIST
31189: LIST
31190: LIST
31191: LIST
31192: LIST
31193: LIST
31194: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31195: LD_ADDR_VAR 0 17
31199: PUSH
31200: LD_INT 0
31202: PUSH
31203: LD_INT 0
31205: PUSH
31206: EMPTY
31207: LIST
31208: LIST
31209: PUSH
31210: LD_INT 0
31212: PUSH
31213: LD_INT 1
31215: NEG
31216: PUSH
31217: EMPTY
31218: LIST
31219: LIST
31220: PUSH
31221: LD_INT 1
31223: PUSH
31224: LD_INT 0
31226: PUSH
31227: EMPTY
31228: LIST
31229: LIST
31230: PUSH
31231: LD_INT 1
31233: PUSH
31234: LD_INT 1
31236: PUSH
31237: EMPTY
31238: LIST
31239: LIST
31240: PUSH
31241: LD_INT 0
31243: PUSH
31244: LD_INT 1
31246: PUSH
31247: EMPTY
31248: LIST
31249: LIST
31250: PUSH
31251: LD_INT 1
31253: NEG
31254: PUSH
31255: LD_INT 0
31257: PUSH
31258: EMPTY
31259: LIST
31260: LIST
31261: PUSH
31262: LD_INT 1
31264: NEG
31265: PUSH
31266: LD_INT 1
31268: NEG
31269: PUSH
31270: EMPTY
31271: LIST
31272: LIST
31273: PUSH
31274: LD_INT 1
31276: NEG
31277: PUSH
31278: LD_INT 2
31280: NEG
31281: PUSH
31282: EMPTY
31283: LIST
31284: LIST
31285: PUSH
31286: LD_INT 0
31288: PUSH
31289: LD_INT 2
31291: NEG
31292: PUSH
31293: EMPTY
31294: LIST
31295: LIST
31296: PUSH
31297: LD_INT 1
31299: PUSH
31300: LD_INT 1
31302: NEG
31303: PUSH
31304: EMPTY
31305: LIST
31306: LIST
31307: PUSH
31308: LD_INT 2
31310: PUSH
31311: LD_INT 0
31313: PUSH
31314: EMPTY
31315: LIST
31316: LIST
31317: PUSH
31318: LD_INT 2
31320: PUSH
31321: LD_INT 1
31323: PUSH
31324: EMPTY
31325: LIST
31326: LIST
31327: PUSH
31328: LD_INT 2
31330: PUSH
31331: LD_INT 2
31333: PUSH
31334: EMPTY
31335: LIST
31336: LIST
31337: PUSH
31338: LD_INT 1
31340: PUSH
31341: LD_INT 2
31343: PUSH
31344: EMPTY
31345: LIST
31346: LIST
31347: PUSH
31348: LD_INT 0
31350: PUSH
31351: LD_INT 2
31353: PUSH
31354: EMPTY
31355: LIST
31356: LIST
31357: PUSH
31358: LD_INT 1
31360: NEG
31361: PUSH
31362: LD_INT 1
31364: PUSH
31365: EMPTY
31366: LIST
31367: LIST
31368: PUSH
31369: LD_INT 2
31371: NEG
31372: PUSH
31373: LD_INT 0
31375: PUSH
31376: EMPTY
31377: LIST
31378: LIST
31379: PUSH
31380: LD_INT 2
31382: NEG
31383: PUSH
31384: LD_INT 1
31386: NEG
31387: PUSH
31388: EMPTY
31389: LIST
31390: LIST
31391: PUSH
31392: LD_INT 2
31394: NEG
31395: PUSH
31396: LD_INT 2
31398: NEG
31399: PUSH
31400: EMPTY
31401: LIST
31402: LIST
31403: PUSH
31404: EMPTY
31405: LIST
31406: LIST
31407: LIST
31408: LIST
31409: LIST
31410: LIST
31411: LIST
31412: LIST
31413: LIST
31414: LIST
31415: LIST
31416: LIST
31417: LIST
31418: LIST
31419: LIST
31420: LIST
31421: LIST
31422: LIST
31423: LIST
31424: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31425: LD_ADDR_VAR 0 18
31429: PUSH
31430: LD_INT 0
31432: PUSH
31433: LD_INT 0
31435: PUSH
31436: EMPTY
31437: LIST
31438: LIST
31439: PUSH
31440: LD_INT 0
31442: PUSH
31443: LD_INT 1
31445: NEG
31446: PUSH
31447: EMPTY
31448: LIST
31449: LIST
31450: PUSH
31451: LD_INT 1
31453: PUSH
31454: LD_INT 0
31456: PUSH
31457: EMPTY
31458: LIST
31459: LIST
31460: PUSH
31461: LD_INT 1
31463: PUSH
31464: LD_INT 1
31466: PUSH
31467: EMPTY
31468: LIST
31469: LIST
31470: PUSH
31471: LD_INT 0
31473: PUSH
31474: LD_INT 1
31476: PUSH
31477: EMPTY
31478: LIST
31479: LIST
31480: PUSH
31481: LD_INT 1
31483: NEG
31484: PUSH
31485: LD_INT 0
31487: PUSH
31488: EMPTY
31489: LIST
31490: LIST
31491: PUSH
31492: LD_INT 1
31494: NEG
31495: PUSH
31496: LD_INT 1
31498: NEG
31499: PUSH
31500: EMPTY
31501: LIST
31502: LIST
31503: PUSH
31504: LD_INT 1
31506: NEG
31507: PUSH
31508: LD_INT 2
31510: NEG
31511: PUSH
31512: EMPTY
31513: LIST
31514: LIST
31515: PUSH
31516: LD_INT 0
31518: PUSH
31519: LD_INT 2
31521: NEG
31522: PUSH
31523: EMPTY
31524: LIST
31525: LIST
31526: PUSH
31527: LD_INT 1
31529: PUSH
31530: LD_INT 1
31532: NEG
31533: PUSH
31534: EMPTY
31535: LIST
31536: LIST
31537: PUSH
31538: LD_INT 2
31540: PUSH
31541: LD_INT 0
31543: PUSH
31544: EMPTY
31545: LIST
31546: LIST
31547: PUSH
31548: LD_INT 2
31550: PUSH
31551: LD_INT 1
31553: PUSH
31554: EMPTY
31555: LIST
31556: LIST
31557: PUSH
31558: LD_INT 2
31560: PUSH
31561: LD_INT 2
31563: PUSH
31564: EMPTY
31565: LIST
31566: LIST
31567: PUSH
31568: LD_INT 1
31570: PUSH
31571: LD_INT 2
31573: PUSH
31574: EMPTY
31575: LIST
31576: LIST
31577: PUSH
31578: LD_INT 0
31580: PUSH
31581: LD_INT 2
31583: PUSH
31584: EMPTY
31585: LIST
31586: LIST
31587: PUSH
31588: LD_INT 1
31590: NEG
31591: PUSH
31592: LD_INT 1
31594: PUSH
31595: EMPTY
31596: LIST
31597: LIST
31598: PUSH
31599: LD_INT 2
31601: NEG
31602: PUSH
31603: LD_INT 0
31605: PUSH
31606: EMPTY
31607: LIST
31608: LIST
31609: PUSH
31610: LD_INT 2
31612: NEG
31613: PUSH
31614: LD_INT 1
31616: NEG
31617: PUSH
31618: EMPTY
31619: LIST
31620: LIST
31621: PUSH
31622: LD_INT 2
31624: NEG
31625: PUSH
31626: LD_INT 2
31628: NEG
31629: PUSH
31630: EMPTY
31631: LIST
31632: LIST
31633: PUSH
31634: EMPTY
31635: LIST
31636: LIST
31637: LIST
31638: LIST
31639: LIST
31640: LIST
31641: LIST
31642: LIST
31643: LIST
31644: LIST
31645: LIST
31646: LIST
31647: LIST
31648: LIST
31649: LIST
31650: LIST
31651: LIST
31652: LIST
31653: LIST
31654: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31655: LD_ADDR_VAR 0 19
31659: PUSH
31660: LD_INT 0
31662: PUSH
31663: LD_INT 0
31665: PUSH
31666: EMPTY
31667: LIST
31668: LIST
31669: PUSH
31670: LD_INT 0
31672: PUSH
31673: LD_INT 1
31675: NEG
31676: PUSH
31677: EMPTY
31678: LIST
31679: LIST
31680: PUSH
31681: LD_INT 1
31683: PUSH
31684: LD_INT 0
31686: PUSH
31687: EMPTY
31688: LIST
31689: LIST
31690: PUSH
31691: LD_INT 1
31693: PUSH
31694: LD_INT 1
31696: PUSH
31697: EMPTY
31698: LIST
31699: LIST
31700: PUSH
31701: LD_INT 0
31703: PUSH
31704: LD_INT 1
31706: PUSH
31707: EMPTY
31708: LIST
31709: LIST
31710: PUSH
31711: LD_INT 1
31713: NEG
31714: PUSH
31715: LD_INT 0
31717: PUSH
31718: EMPTY
31719: LIST
31720: LIST
31721: PUSH
31722: LD_INT 1
31724: NEG
31725: PUSH
31726: LD_INT 1
31728: NEG
31729: PUSH
31730: EMPTY
31731: LIST
31732: LIST
31733: PUSH
31734: LD_INT 1
31736: NEG
31737: PUSH
31738: LD_INT 2
31740: NEG
31741: PUSH
31742: EMPTY
31743: LIST
31744: LIST
31745: PUSH
31746: LD_INT 0
31748: PUSH
31749: LD_INT 2
31751: NEG
31752: PUSH
31753: EMPTY
31754: LIST
31755: LIST
31756: PUSH
31757: LD_INT 1
31759: PUSH
31760: LD_INT 1
31762: NEG
31763: PUSH
31764: EMPTY
31765: LIST
31766: LIST
31767: PUSH
31768: LD_INT 2
31770: PUSH
31771: LD_INT 0
31773: PUSH
31774: EMPTY
31775: LIST
31776: LIST
31777: PUSH
31778: LD_INT 2
31780: PUSH
31781: LD_INT 1
31783: PUSH
31784: EMPTY
31785: LIST
31786: LIST
31787: PUSH
31788: LD_INT 2
31790: PUSH
31791: LD_INT 2
31793: PUSH
31794: EMPTY
31795: LIST
31796: LIST
31797: PUSH
31798: LD_INT 1
31800: PUSH
31801: LD_INT 2
31803: PUSH
31804: EMPTY
31805: LIST
31806: LIST
31807: PUSH
31808: LD_INT 0
31810: PUSH
31811: LD_INT 2
31813: PUSH
31814: EMPTY
31815: LIST
31816: LIST
31817: PUSH
31818: LD_INT 1
31820: NEG
31821: PUSH
31822: LD_INT 1
31824: PUSH
31825: EMPTY
31826: LIST
31827: LIST
31828: PUSH
31829: LD_INT 2
31831: NEG
31832: PUSH
31833: LD_INT 0
31835: PUSH
31836: EMPTY
31837: LIST
31838: LIST
31839: PUSH
31840: LD_INT 2
31842: NEG
31843: PUSH
31844: LD_INT 1
31846: NEG
31847: PUSH
31848: EMPTY
31849: LIST
31850: LIST
31851: PUSH
31852: LD_INT 2
31854: NEG
31855: PUSH
31856: LD_INT 2
31858: NEG
31859: PUSH
31860: EMPTY
31861: LIST
31862: LIST
31863: PUSH
31864: EMPTY
31865: LIST
31866: LIST
31867: LIST
31868: LIST
31869: LIST
31870: LIST
31871: LIST
31872: LIST
31873: LIST
31874: LIST
31875: LIST
31876: LIST
31877: LIST
31878: LIST
31879: LIST
31880: LIST
31881: LIST
31882: LIST
31883: LIST
31884: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31885: LD_ADDR_VAR 0 20
31889: PUSH
31890: LD_INT 0
31892: PUSH
31893: LD_INT 0
31895: PUSH
31896: EMPTY
31897: LIST
31898: LIST
31899: PUSH
31900: LD_INT 0
31902: PUSH
31903: LD_INT 1
31905: NEG
31906: PUSH
31907: EMPTY
31908: LIST
31909: LIST
31910: PUSH
31911: LD_INT 1
31913: PUSH
31914: LD_INT 0
31916: PUSH
31917: EMPTY
31918: LIST
31919: LIST
31920: PUSH
31921: LD_INT 1
31923: PUSH
31924: LD_INT 1
31926: PUSH
31927: EMPTY
31928: LIST
31929: LIST
31930: PUSH
31931: LD_INT 0
31933: PUSH
31934: LD_INT 1
31936: PUSH
31937: EMPTY
31938: LIST
31939: LIST
31940: PUSH
31941: LD_INT 1
31943: NEG
31944: PUSH
31945: LD_INT 0
31947: PUSH
31948: EMPTY
31949: LIST
31950: LIST
31951: PUSH
31952: LD_INT 1
31954: NEG
31955: PUSH
31956: LD_INT 1
31958: NEG
31959: PUSH
31960: EMPTY
31961: LIST
31962: LIST
31963: PUSH
31964: LD_INT 1
31966: NEG
31967: PUSH
31968: LD_INT 2
31970: NEG
31971: PUSH
31972: EMPTY
31973: LIST
31974: LIST
31975: PUSH
31976: LD_INT 0
31978: PUSH
31979: LD_INT 2
31981: NEG
31982: PUSH
31983: EMPTY
31984: LIST
31985: LIST
31986: PUSH
31987: LD_INT 1
31989: PUSH
31990: LD_INT 1
31992: NEG
31993: PUSH
31994: EMPTY
31995: LIST
31996: LIST
31997: PUSH
31998: LD_INT 2
32000: PUSH
32001: LD_INT 0
32003: PUSH
32004: EMPTY
32005: LIST
32006: LIST
32007: PUSH
32008: LD_INT 2
32010: PUSH
32011: LD_INT 1
32013: PUSH
32014: EMPTY
32015: LIST
32016: LIST
32017: PUSH
32018: LD_INT 2
32020: PUSH
32021: LD_INT 2
32023: PUSH
32024: EMPTY
32025: LIST
32026: LIST
32027: PUSH
32028: LD_INT 1
32030: PUSH
32031: LD_INT 2
32033: PUSH
32034: EMPTY
32035: LIST
32036: LIST
32037: PUSH
32038: LD_INT 0
32040: PUSH
32041: LD_INT 2
32043: PUSH
32044: EMPTY
32045: LIST
32046: LIST
32047: PUSH
32048: LD_INT 1
32050: NEG
32051: PUSH
32052: LD_INT 1
32054: PUSH
32055: EMPTY
32056: LIST
32057: LIST
32058: PUSH
32059: LD_INT 2
32061: NEG
32062: PUSH
32063: LD_INT 0
32065: PUSH
32066: EMPTY
32067: LIST
32068: LIST
32069: PUSH
32070: LD_INT 2
32072: NEG
32073: PUSH
32074: LD_INT 1
32076: NEG
32077: PUSH
32078: EMPTY
32079: LIST
32080: LIST
32081: PUSH
32082: LD_INT 2
32084: NEG
32085: PUSH
32086: LD_INT 2
32088: NEG
32089: PUSH
32090: EMPTY
32091: LIST
32092: LIST
32093: PUSH
32094: EMPTY
32095: LIST
32096: LIST
32097: LIST
32098: LIST
32099: LIST
32100: LIST
32101: LIST
32102: LIST
32103: LIST
32104: LIST
32105: LIST
32106: LIST
32107: LIST
32108: LIST
32109: LIST
32110: LIST
32111: LIST
32112: LIST
32113: LIST
32114: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32115: LD_ADDR_VAR 0 21
32119: PUSH
32120: LD_INT 0
32122: PUSH
32123: LD_INT 0
32125: PUSH
32126: EMPTY
32127: LIST
32128: LIST
32129: PUSH
32130: LD_INT 0
32132: PUSH
32133: LD_INT 1
32135: NEG
32136: PUSH
32137: EMPTY
32138: LIST
32139: LIST
32140: PUSH
32141: LD_INT 1
32143: PUSH
32144: LD_INT 0
32146: PUSH
32147: EMPTY
32148: LIST
32149: LIST
32150: PUSH
32151: LD_INT 1
32153: PUSH
32154: LD_INT 1
32156: PUSH
32157: EMPTY
32158: LIST
32159: LIST
32160: PUSH
32161: LD_INT 0
32163: PUSH
32164: LD_INT 1
32166: PUSH
32167: EMPTY
32168: LIST
32169: LIST
32170: PUSH
32171: LD_INT 1
32173: NEG
32174: PUSH
32175: LD_INT 0
32177: PUSH
32178: EMPTY
32179: LIST
32180: LIST
32181: PUSH
32182: LD_INT 1
32184: NEG
32185: PUSH
32186: LD_INT 1
32188: NEG
32189: PUSH
32190: EMPTY
32191: LIST
32192: LIST
32193: PUSH
32194: LD_INT 1
32196: NEG
32197: PUSH
32198: LD_INT 2
32200: NEG
32201: PUSH
32202: EMPTY
32203: LIST
32204: LIST
32205: PUSH
32206: LD_INT 0
32208: PUSH
32209: LD_INT 2
32211: NEG
32212: PUSH
32213: EMPTY
32214: LIST
32215: LIST
32216: PUSH
32217: LD_INT 1
32219: PUSH
32220: LD_INT 1
32222: NEG
32223: PUSH
32224: EMPTY
32225: LIST
32226: LIST
32227: PUSH
32228: LD_INT 2
32230: PUSH
32231: LD_INT 0
32233: PUSH
32234: EMPTY
32235: LIST
32236: LIST
32237: PUSH
32238: LD_INT 2
32240: PUSH
32241: LD_INT 1
32243: PUSH
32244: EMPTY
32245: LIST
32246: LIST
32247: PUSH
32248: LD_INT 2
32250: PUSH
32251: LD_INT 2
32253: PUSH
32254: EMPTY
32255: LIST
32256: LIST
32257: PUSH
32258: LD_INT 1
32260: PUSH
32261: LD_INT 2
32263: PUSH
32264: EMPTY
32265: LIST
32266: LIST
32267: PUSH
32268: LD_INT 0
32270: PUSH
32271: LD_INT 2
32273: PUSH
32274: EMPTY
32275: LIST
32276: LIST
32277: PUSH
32278: LD_INT 1
32280: NEG
32281: PUSH
32282: LD_INT 1
32284: PUSH
32285: EMPTY
32286: LIST
32287: LIST
32288: PUSH
32289: LD_INT 2
32291: NEG
32292: PUSH
32293: LD_INT 0
32295: PUSH
32296: EMPTY
32297: LIST
32298: LIST
32299: PUSH
32300: LD_INT 2
32302: NEG
32303: PUSH
32304: LD_INT 1
32306: NEG
32307: PUSH
32308: EMPTY
32309: LIST
32310: LIST
32311: PUSH
32312: LD_INT 2
32314: NEG
32315: PUSH
32316: LD_INT 2
32318: NEG
32319: PUSH
32320: EMPTY
32321: LIST
32322: LIST
32323: PUSH
32324: EMPTY
32325: LIST
32326: LIST
32327: LIST
32328: LIST
32329: LIST
32330: LIST
32331: LIST
32332: LIST
32333: LIST
32334: LIST
32335: LIST
32336: LIST
32337: LIST
32338: LIST
32339: LIST
32340: LIST
32341: LIST
32342: LIST
32343: LIST
32344: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32345: LD_ADDR_VAR 0 22
32349: PUSH
32350: LD_INT 0
32352: PUSH
32353: LD_INT 0
32355: PUSH
32356: EMPTY
32357: LIST
32358: LIST
32359: PUSH
32360: LD_INT 0
32362: PUSH
32363: LD_INT 1
32365: NEG
32366: PUSH
32367: EMPTY
32368: LIST
32369: LIST
32370: PUSH
32371: LD_INT 1
32373: PUSH
32374: LD_INT 0
32376: PUSH
32377: EMPTY
32378: LIST
32379: LIST
32380: PUSH
32381: LD_INT 1
32383: PUSH
32384: LD_INT 1
32386: PUSH
32387: EMPTY
32388: LIST
32389: LIST
32390: PUSH
32391: LD_INT 0
32393: PUSH
32394: LD_INT 1
32396: PUSH
32397: EMPTY
32398: LIST
32399: LIST
32400: PUSH
32401: LD_INT 1
32403: NEG
32404: PUSH
32405: LD_INT 0
32407: PUSH
32408: EMPTY
32409: LIST
32410: LIST
32411: PUSH
32412: LD_INT 1
32414: NEG
32415: PUSH
32416: LD_INT 1
32418: NEG
32419: PUSH
32420: EMPTY
32421: LIST
32422: LIST
32423: PUSH
32424: LD_INT 1
32426: NEG
32427: PUSH
32428: LD_INT 2
32430: NEG
32431: PUSH
32432: EMPTY
32433: LIST
32434: LIST
32435: PUSH
32436: LD_INT 0
32438: PUSH
32439: LD_INT 2
32441: NEG
32442: PUSH
32443: EMPTY
32444: LIST
32445: LIST
32446: PUSH
32447: LD_INT 1
32449: PUSH
32450: LD_INT 1
32452: NEG
32453: PUSH
32454: EMPTY
32455: LIST
32456: LIST
32457: PUSH
32458: LD_INT 2
32460: PUSH
32461: LD_INT 0
32463: PUSH
32464: EMPTY
32465: LIST
32466: LIST
32467: PUSH
32468: LD_INT 2
32470: PUSH
32471: LD_INT 1
32473: PUSH
32474: EMPTY
32475: LIST
32476: LIST
32477: PUSH
32478: LD_INT 2
32480: PUSH
32481: LD_INT 2
32483: PUSH
32484: EMPTY
32485: LIST
32486: LIST
32487: PUSH
32488: LD_INT 1
32490: PUSH
32491: LD_INT 2
32493: PUSH
32494: EMPTY
32495: LIST
32496: LIST
32497: PUSH
32498: LD_INT 0
32500: PUSH
32501: LD_INT 2
32503: PUSH
32504: EMPTY
32505: LIST
32506: LIST
32507: PUSH
32508: LD_INT 1
32510: NEG
32511: PUSH
32512: LD_INT 1
32514: PUSH
32515: EMPTY
32516: LIST
32517: LIST
32518: PUSH
32519: LD_INT 2
32521: NEG
32522: PUSH
32523: LD_INT 0
32525: PUSH
32526: EMPTY
32527: LIST
32528: LIST
32529: PUSH
32530: LD_INT 2
32532: NEG
32533: PUSH
32534: LD_INT 1
32536: NEG
32537: PUSH
32538: EMPTY
32539: LIST
32540: LIST
32541: PUSH
32542: LD_INT 2
32544: NEG
32545: PUSH
32546: LD_INT 2
32548: NEG
32549: PUSH
32550: EMPTY
32551: LIST
32552: LIST
32553: PUSH
32554: EMPTY
32555: LIST
32556: LIST
32557: LIST
32558: LIST
32559: LIST
32560: LIST
32561: LIST
32562: LIST
32563: LIST
32564: LIST
32565: LIST
32566: LIST
32567: LIST
32568: LIST
32569: LIST
32570: LIST
32571: LIST
32572: LIST
32573: LIST
32574: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
32575: LD_ADDR_VAR 0 23
32579: PUSH
32580: LD_INT 0
32582: PUSH
32583: LD_INT 0
32585: PUSH
32586: EMPTY
32587: LIST
32588: LIST
32589: PUSH
32590: LD_INT 0
32592: PUSH
32593: LD_INT 1
32595: NEG
32596: PUSH
32597: EMPTY
32598: LIST
32599: LIST
32600: PUSH
32601: LD_INT 1
32603: PUSH
32604: LD_INT 0
32606: PUSH
32607: EMPTY
32608: LIST
32609: LIST
32610: PUSH
32611: LD_INT 1
32613: PUSH
32614: LD_INT 1
32616: PUSH
32617: EMPTY
32618: LIST
32619: LIST
32620: PUSH
32621: LD_INT 0
32623: PUSH
32624: LD_INT 1
32626: PUSH
32627: EMPTY
32628: LIST
32629: LIST
32630: PUSH
32631: LD_INT 1
32633: NEG
32634: PUSH
32635: LD_INT 0
32637: PUSH
32638: EMPTY
32639: LIST
32640: LIST
32641: PUSH
32642: LD_INT 1
32644: NEG
32645: PUSH
32646: LD_INT 1
32648: NEG
32649: PUSH
32650: EMPTY
32651: LIST
32652: LIST
32653: PUSH
32654: LD_INT 1
32656: NEG
32657: PUSH
32658: LD_INT 2
32660: NEG
32661: PUSH
32662: EMPTY
32663: LIST
32664: LIST
32665: PUSH
32666: LD_INT 0
32668: PUSH
32669: LD_INT 2
32671: NEG
32672: PUSH
32673: EMPTY
32674: LIST
32675: LIST
32676: PUSH
32677: LD_INT 1
32679: PUSH
32680: LD_INT 1
32682: NEG
32683: PUSH
32684: EMPTY
32685: LIST
32686: LIST
32687: PUSH
32688: LD_INT 2
32690: PUSH
32691: LD_INT 0
32693: PUSH
32694: EMPTY
32695: LIST
32696: LIST
32697: PUSH
32698: LD_INT 2
32700: PUSH
32701: LD_INT 1
32703: PUSH
32704: EMPTY
32705: LIST
32706: LIST
32707: PUSH
32708: LD_INT 2
32710: PUSH
32711: LD_INT 2
32713: PUSH
32714: EMPTY
32715: LIST
32716: LIST
32717: PUSH
32718: LD_INT 1
32720: PUSH
32721: LD_INT 2
32723: PUSH
32724: EMPTY
32725: LIST
32726: LIST
32727: PUSH
32728: LD_INT 0
32730: PUSH
32731: LD_INT 2
32733: PUSH
32734: EMPTY
32735: LIST
32736: LIST
32737: PUSH
32738: LD_INT 1
32740: NEG
32741: PUSH
32742: LD_INT 1
32744: PUSH
32745: EMPTY
32746: LIST
32747: LIST
32748: PUSH
32749: LD_INT 2
32751: NEG
32752: PUSH
32753: LD_INT 0
32755: PUSH
32756: EMPTY
32757: LIST
32758: LIST
32759: PUSH
32760: LD_INT 2
32762: NEG
32763: PUSH
32764: LD_INT 1
32766: NEG
32767: PUSH
32768: EMPTY
32769: LIST
32770: LIST
32771: PUSH
32772: LD_INT 2
32774: NEG
32775: PUSH
32776: LD_INT 2
32778: NEG
32779: PUSH
32780: EMPTY
32781: LIST
32782: LIST
32783: PUSH
32784: LD_INT 2
32786: NEG
32787: PUSH
32788: LD_INT 3
32790: NEG
32791: PUSH
32792: EMPTY
32793: LIST
32794: LIST
32795: PUSH
32796: LD_INT 1
32798: NEG
32799: PUSH
32800: LD_INT 3
32802: NEG
32803: PUSH
32804: EMPTY
32805: LIST
32806: LIST
32807: PUSH
32808: LD_INT 1
32810: PUSH
32811: LD_INT 2
32813: NEG
32814: PUSH
32815: EMPTY
32816: LIST
32817: LIST
32818: PUSH
32819: LD_INT 2
32821: PUSH
32822: LD_INT 1
32824: NEG
32825: PUSH
32826: EMPTY
32827: LIST
32828: LIST
32829: PUSH
32830: EMPTY
32831: LIST
32832: LIST
32833: LIST
32834: LIST
32835: LIST
32836: LIST
32837: LIST
32838: LIST
32839: LIST
32840: LIST
32841: LIST
32842: LIST
32843: LIST
32844: LIST
32845: LIST
32846: LIST
32847: LIST
32848: LIST
32849: LIST
32850: LIST
32851: LIST
32852: LIST
32853: LIST
32854: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
32855: LD_ADDR_VAR 0 24
32859: PUSH
32860: LD_INT 0
32862: PUSH
32863: LD_INT 0
32865: PUSH
32866: EMPTY
32867: LIST
32868: LIST
32869: PUSH
32870: LD_INT 0
32872: PUSH
32873: LD_INT 1
32875: NEG
32876: PUSH
32877: EMPTY
32878: LIST
32879: LIST
32880: PUSH
32881: LD_INT 1
32883: PUSH
32884: LD_INT 0
32886: PUSH
32887: EMPTY
32888: LIST
32889: LIST
32890: PUSH
32891: LD_INT 1
32893: PUSH
32894: LD_INT 1
32896: PUSH
32897: EMPTY
32898: LIST
32899: LIST
32900: PUSH
32901: LD_INT 0
32903: PUSH
32904: LD_INT 1
32906: PUSH
32907: EMPTY
32908: LIST
32909: LIST
32910: PUSH
32911: LD_INT 1
32913: NEG
32914: PUSH
32915: LD_INT 0
32917: PUSH
32918: EMPTY
32919: LIST
32920: LIST
32921: PUSH
32922: LD_INT 1
32924: NEG
32925: PUSH
32926: LD_INT 1
32928: NEG
32929: PUSH
32930: EMPTY
32931: LIST
32932: LIST
32933: PUSH
32934: LD_INT 1
32936: NEG
32937: PUSH
32938: LD_INT 2
32940: NEG
32941: PUSH
32942: EMPTY
32943: LIST
32944: LIST
32945: PUSH
32946: LD_INT 0
32948: PUSH
32949: LD_INT 2
32951: NEG
32952: PUSH
32953: EMPTY
32954: LIST
32955: LIST
32956: PUSH
32957: LD_INT 1
32959: PUSH
32960: LD_INT 1
32962: NEG
32963: PUSH
32964: EMPTY
32965: LIST
32966: LIST
32967: PUSH
32968: LD_INT 2
32970: PUSH
32971: LD_INT 0
32973: PUSH
32974: EMPTY
32975: LIST
32976: LIST
32977: PUSH
32978: LD_INT 2
32980: PUSH
32981: LD_INT 1
32983: PUSH
32984: EMPTY
32985: LIST
32986: LIST
32987: PUSH
32988: LD_INT 2
32990: PUSH
32991: LD_INT 2
32993: PUSH
32994: EMPTY
32995: LIST
32996: LIST
32997: PUSH
32998: LD_INT 1
33000: PUSH
33001: LD_INT 2
33003: PUSH
33004: EMPTY
33005: LIST
33006: LIST
33007: PUSH
33008: LD_INT 0
33010: PUSH
33011: LD_INT 2
33013: PUSH
33014: EMPTY
33015: LIST
33016: LIST
33017: PUSH
33018: LD_INT 1
33020: NEG
33021: PUSH
33022: LD_INT 1
33024: PUSH
33025: EMPTY
33026: LIST
33027: LIST
33028: PUSH
33029: LD_INT 2
33031: NEG
33032: PUSH
33033: LD_INT 0
33035: PUSH
33036: EMPTY
33037: LIST
33038: LIST
33039: PUSH
33040: LD_INT 2
33042: NEG
33043: PUSH
33044: LD_INT 1
33046: NEG
33047: PUSH
33048: EMPTY
33049: LIST
33050: LIST
33051: PUSH
33052: LD_INT 2
33054: NEG
33055: PUSH
33056: LD_INT 2
33058: NEG
33059: PUSH
33060: EMPTY
33061: LIST
33062: LIST
33063: PUSH
33064: LD_INT 1
33066: PUSH
33067: LD_INT 2
33069: NEG
33070: PUSH
33071: EMPTY
33072: LIST
33073: LIST
33074: PUSH
33075: LD_INT 2
33077: PUSH
33078: LD_INT 1
33080: NEG
33081: PUSH
33082: EMPTY
33083: LIST
33084: LIST
33085: PUSH
33086: LD_INT 3
33088: PUSH
33089: LD_INT 1
33091: PUSH
33092: EMPTY
33093: LIST
33094: LIST
33095: PUSH
33096: LD_INT 3
33098: PUSH
33099: LD_INT 2
33101: PUSH
33102: EMPTY
33103: LIST
33104: LIST
33105: PUSH
33106: EMPTY
33107: LIST
33108: LIST
33109: LIST
33110: LIST
33111: LIST
33112: LIST
33113: LIST
33114: LIST
33115: LIST
33116: LIST
33117: LIST
33118: LIST
33119: LIST
33120: LIST
33121: LIST
33122: LIST
33123: LIST
33124: LIST
33125: LIST
33126: LIST
33127: LIST
33128: LIST
33129: LIST
33130: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
33131: LD_ADDR_VAR 0 25
33135: PUSH
33136: LD_INT 0
33138: PUSH
33139: LD_INT 0
33141: PUSH
33142: EMPTY
33143: LIST
33144: LIST
33145: PUSH
33146: LD_INT 0
33148: PUSH
33149: LD_INT 1
33151: NEG
33152: PUSH
33153: EMPTY
33154: LIST
33155: LIST
33156: PUSH
33157: LD_INT 1
33159: PUSH
33160: LD_INT 0
33162: PUSH
33163: EMPTY
33164: LIST
33165: LIST
33166: PUSH
33167: LD_INT 1
33169: PUSH
33170: LD_INT 1
33172: PUSH
33173: EMPTY
33174: LIST
33175: LIST
33176: PUSH
33177: LD_INT 0
33179: PUSH
33180: LD_INT 1
33182: PUSH
33183: EMPTY
33184: LIST
33185: LIST
33186: PUSH
33187: LD_INT 1
33189: NEG
33190: PUSH
33191: LD_INT 0
33193: PUSH
33194: EMPTY
33195: LIST
33196: LIST
33197: PUSH
33198: LD_INT 1
33200: NEG
33201: PUSH
33202: LD_INT 1
33204: NEG
33205: PUSH
33206: EMPTY
33207: LIST
33208: LIST
33209: PUSH
33210: LD_INT 1
33212: NEG
33213: PUSH
33214: LD_INT 2
33216: NEG
33217: PUSH
33218: EMPTY
33219: LIST
33220: LIST
33221: PUSH
33222: LD_INT 0
33224: PUSH
33225: LD_INT 2
33227: NEG
33228: PUSH
33229: EMPTY
33230: LIST
33231: LIST
33232: PUSH
33233: LD_INT 1
33235: PUSH
33236: LD_INT 1
33238: NEG
33239: PUSH
33240: EMPTY
33241: LIST
33242: LIST
33243: PUSH
33244: LD_INT 2
33246: PUSH
33247: LD_INT 0
33249: PUSH
33250: EMPTY
33251: LIST
33252: LIST
33253: PUSH
33254: LD_INT 2
33256: PUSH
33257: LD_INT 1
33259: PUSH
33260: EMPTY
33261: LIST
33262: LIST
33263: PUSH
33264: LD_INT 2
33266: PUSH
33267: LD_INT 2
33269: PUSH
33270: EMPTY
33271: LIST
33272: LIST
33273: PUSH
33274: LD_INT 1
33276: PUSH
33277: LD_INT 2
33279: PUSH
33280: EMPTY
33281: LIST
33282: LIST
33283: PUSH
33284: LD_INT 0
33286: PUSH
33287: LD_INT 2
33289: PUSH
33290: EMPTY
33291: LIST
33292: LIST
33293: PUSH
33294: LD_INT 1
33296: NEG
33297: PUSH
33298: LD_INT 1
33300: PUSH
33301: EMPTY
33302: LIST
33303: LIST
33304: PUSH
33305: LD_INT 2
33307: NEG
33308: PUSH
33309: LD_INT 0
33311: PUSH
33312: EMPTY
33313: LIST
33314: LIST
33315: PUSH
33316: LD_INT 2
33318: NEG
33319: PUSH
33320: LD_INT 1
33322: NEG
33323: PUSH
33324: EMPTY
33325: LIST
33326: LIST
33327: PUSH
33328: LD_INT 2
33330: NEG
33331: PUSH
33332: LD_INT 2
33334: NEG
33335: PUSH
33336: EMPTY
33337: LIST
33338: LIST
33339: PUSH
33340: LD_INT 3
33342: PUSH
33343: LD_INT 1
33345: PUSH
33346: EMPTY
33347: LIST
33348: LIST
33349: PUSH
33350: LD_INT 3
33352: PUSH
33353: LD_INT 2
33355: PUSH
33356: EMPTY
33357: LIST
33358: LIST
33359: PUSH
33360: LD_INT 2
33362: PUSH
33363: LD_INT 3
33365: PUSH
33366: EMPTY
33367: LIST
33368: LIST
33369: PUSH
33370: LD_INT 1
33372: PUSH
33373: LD_INT 3
33375: PUSH
33376: EMPTY
33377: LIST
33378: LIST
33379: PUSH
33380: EMPTY
33381: LIST
33382: LIST
33383: LIST
33384: LIST
33385: LIST
33386: LIST
33387: LIST
33388: LIST
33389: LIST
33390: LIST
33391: LIST
33392: LIST
33393: LIST
33394: LIST
33395: LIST
33396: LIST
33397: LIST
33398: LIST
33399: LIST
33400: LIST
33401: LIST
33402: LIST
33403: LIST
33404: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
33405: LD_ADDR_VAR 0 26
33409: PUSH
33410: LD_INT 0
33412: PUSH
33413: LD_INT 0
33415: PUSH
33416: EMPTY
33417: LIST
33418: LIST
33419: PUSH
33420: LD_INT 0
33422: PUSH
33423: LD_INT 1
33425: NEG
33426: PUSH
33427: EMPTY
33428: LIST
33429: LIST
33430: PUSH
33431: LD_INT 1
33433: PUSH
33434: LD_INT 0
33436: PUSH
33437: EMPTY
33438: LIST
33439: LIST
33440: PUSH
33441: LD_INT 1
33443: PUSH
33444: LD_INT 1
33446: PUSH
33447: EMPTY
33448: LIST
33449: LIST
33450: PUSH
33451: LD_INT 0
33453: PUSH
33454: LD_INT 1
33456: PUSH
33457: EMPTY
33458: LIST
33459: LIST
33460: PUSH
33461: LD_INT 1
33463: NEG
33464: PUSH
33465: LD_INT 0
33467: PUSH
33468: EMPTY
33469: LIST
33470: LIST
33471: PUSH
33472: LD_INT 1
33474: NEG
33475: PUSH
33476: LD_INT 1
33478: NEG
33479: PUSH
33480: EMPTY
33481: LIST
33482: LIST
33483: PUSH
33484: LD_INT 1
33486: NEG
33487: PUSH
33488: LD_INT 2
33490: NEG
33491: PUSH
33492: EMPTY
33493: LIST
33494: LIST
33495: PUSH
33496: LD_INT 0
33498: PUSH
33499: LD_INT 2
33501: NEG
33502: PUSH
33503: EMPTY
33504: LIST
33505: LIST
33506: PUSH
33507: LD_INT 1
33509: PUSH
33510: LD_INT 1
33512: NEG
33513: PUSH
33514: EMPTY
33515: LIST
33516: LIST
33517: PUSH
33518: LD_INT 2
33520: PUSH
33521: LD_INT 0
33523: PUSH
33524: EMPTY
33525: LIST
33526: LIST
33527: PUSH
33528: LD_INT 2
33530: PUSH
33531: LD_INT 1
33533: PUSH
33534: EMPTY
33535: LIST
33536: LIST
33537: PUSH
33538: LD_INT 2
33540: PUSH
33541: LD_INT 2
33543: PUSH
33544: EMPTY
33545: LIST
33546: LIST
33547: PUSH
33548: LD_INT 1
33550: PUSH
33551: LD_INT 2
33553: PUSH
33554: EMPTY
33555: LIST
33556: LIST
33557: PUSH
33558: LD_INT 0
33560: PUSH
33561: LD_INT 2
33563: PUSH
33564: EMPTY
33565: LIST
33566: LIST
33567: PUSH
33568: LD_INT 1
33570: NEG
33571: PUSH
33572: LD_INT 1
33574: PUSH
33575: EMPTY
33576: LIST
33577: LIST
33578: PUSH
33579: LD_INT 2
33581: NEG
33582: PUSH
33583: LD_INT 0
33585: PUSH
33586: EMPTY
33587: LIST
33588: LIST
33589: PUSH
33590: LD_INT 2
33592: NEG
33593: PUSH
33594: LD_INT 1
33596: NEG
33597: PUSH
33598: EMPTY
33599: LIST
33600: LIST
33601: PUSH
33602: LD_INT 2
33604: NEG
33605: PUSH
33606: LD_INT 2
33608: NEG
33609: PUSH
33610: EMPTY
33611: LIST
33612: LIST
33613: PUSH
33614: LD_INT 2
33616: PUSH
33617: LD_INT 3
33619: PUSH
33620: EMPTY
33621: LIST
33622: LIST
33623: PUSH
33624: LD_INT 1
33626: PUSH
33627: LD_INT 3
33629: PUSH
33630: EMPTY
33631: LIST
33632: LIST
33633: PUSH
33634: LD_INT 1
33636: NEG
33637: PUSH
33638: LD_INT 2
33640: PUSH
33641: EMPTY
33642: LIST
33643: LIST
33644: PUSH
33645: LD_INT 2
33647: NEG
33648: PUSH
33649: LD_INT 1
33651: PUSH
33652: EMPTY
33653: LIST
33654: LIST
33655: PUSH
33656: EMPTY
33657: LIST
33658: LIST
33659: LIST
33660: LIST
33661: LIST
33662: LIST
33663: LIST
33664: LIST
33665: LIST
33666: LIST
33667: LIST
33668: LIST
33669: LIST
33670: LIST
33671: LIST
33672: LIST
33673: LIST
33674: LIST
33675: LIST
33676: LIST
33677: LIST
33678: LIST
33679: LIST
33680: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
33681: LD_ADDR_VAR 0 27
33685: PUSH
33686: LD_INT 0
33688: PUSH
33689: LD_INT 0
33691: PUSH
33692: EMPTY
33693: LIST
33694: LIST
33695: PUSH
33696: LD_INT 0
33698: PUSH
33699: LD_INT 1
33701: NEG
33702: PUSH
33703: EMPTY
33704: LIST
33705: LIST
33706: PUSH
33707: LD_INT 1
33709: PUSH
33710: LD_INT 0
33712: PUSH
33713: EMPTY
33714: LIST
33715: LIST
33716: PUSH
33717: LD_INT 1
33719: PUSH
33720: LD_INT 1
33722: PUSH
33723: EMPTY
33724: LIST
33725: LIST
33726: PUSH
33727: LD_INT 0
33729: PUSH
33730: LD_INT 1
33732: PUSH
33733: EMPTY
33734: LIST
33735: LIST
33736: PUSH
33737: LD_INT 1
33739: NEG
33740: PUSH
33741: LD_INT 0
33743: PUSH
33744: EMPTY
33745: LIST
33746: LIST
33747: PUSH
33748: LD_INT 1
33750: NEG
33751: PUSH
33752: LD_INT 1
33754: NEG
33755: PUSH
33756: EMPTY
33757: LIST
33758: LIST
33759: PUSH
33760: LD_INT 1
33762: NEG
33763: PUSH
33764: LD_INT 2
33766: NEG
33767: PUSH
33768: EMPTY
33769: LIST
33770: LIST
33771: PUSH
33772: LD_INT 0
33774: PUSH
33775: LD_INT 2
33777: NEG
33778: PUSH
33779: EMPTY
33780: LIST
33781: LIST
33782: PUSH
33783: LD_INT 1
33785: PUSH
33786: LD_INT 1
33788: NEG
33789: PUSH
33790: EMPTY
33791: LIST
33792: LIST
33793: PUSH
33794: LD_INT 2
33796: PUSH
33797: LD_INT 0
33799: PUSH
33800: EMPTY
33801: LIST
33802: LIST
33803: PUSH
33804: LD_INT 2
33806: PUSH
33807: LD_INT 1
33809: PUSH
33810: EMPTY
33811: LIST
33812: LIST
33813: PUSH
33814: LD_INT 2
33816: PUSH
33817: LD_INT 2
33819: PUSH
33820: EMPTY
33821: LIST
33822: LIST
33823: PUSH
33824: LD_INT 1
33826: PUSH
33827: LD_INT 2
33829: PUSH
33830: EMPTY
33831: LIST
33832: LIST
33833: PUSH
33834: LD_INT 0
33836: PUSH
33837: LD_INT 2
33839: PUSH
33840: EMPTY
33841: LIST
33842: LIST
33843: PUSH
33844: LD_INT 1
33846: NEG
33847: PUSH
33848: LD_INT 1
33850: PUSH
33851: EMPTY
33852: LIST
33853: LIST
33854: PUSH
33855: LD_INT 2
33857: NEG
33858: PUSH
33859: LD_INT 0
33861: PUSH
33862: EMPTY
33863: LIST
33864: LIST
33865: PUSH
33866: LD_INT 2
33868: NEG
33869: PUSH
33870: LD_INT 1
33872: NEG
33873: PUSH
33874: EMPTY
33875: LIST
33876: LIST
33877: PUSH
33878: LD_INT 2
33880: NEG
33881: PUSH
33882: LD_INT 2
33884: NEG
33885: PUSH
33886: EMPTY
33887: LIST
33888: LIST
33889: PUSH
33890: LD_INT 1
33892: NEG
33893: PUSH
33894: LD_INT 2
33896: PUSH
33897: EMPTY
33898: LIST
33899: LIST
33900: PUSH
33901: LD_INT 2
33903: NEG
33904: PUSH
33905: LD_INT 1
33907: PUSH
33908: EMPTY
33909: LIST
33910: LIST
33911: PUSH
33912: LD_INT 3
33914: NEG
33915: PUSH
33916: LD_INT 1
33918: NEG
33919: PUSH
33920: EMPTY
33921: LIST
33922: LIST
33923: PUSH
33924: LD_INT 3
33926: NEG
33927: PUSH
33928: LD_INT 2
33930: NEG
33931: PUSH
33932: EMPTY
33933: LIST
33934: LIST
33935: PUSH
33936: EMPTY
33937: LIST
33938: LIST
33939: LIST
33940: LIST
33941: LIST
33942: LIST
33943: LIST
33944: LIST
33945: LIST
33946: LIST
33947: LIST
33948: LIST
33949: LIST
33950: LIST
33951: LIST
33952: LIST
33953: LIST
33954: LIST
33955: LIST
33956: LIST
33957: LIST
33958: LIST
33959: LIST
33960: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
33961: LD_ADDR_VAR 0 28
33965: PUSH
33966: LD_INT 0
33968: PUSH
33969: LD_INT 0
33971: PUSH
33972: EMPTY
33973: LIST
33974: LIST
33975: PUSH
33976: LD_INT 0
33978: PUSH
33979: LD_INT 1
33981: NEG
33982: PUSH
33983: EMPTY
33984: LIST
33985: LIST
33986: PUSH
33987: LD_INT 1
33989: PUSH
33990: LD_INT 0
33992: PUSH
33993: EMPTY
33994: LIST
33995: LIST
33996: PUSH
33997: LD_INT 1
33999: PUSH
34000: LD_INT 1
34002: PUSH
34003: EMPTY
34004: LIST
34005: LIST
34006: PUSH
34007: LD_INT 0
34009: PUSH
34010: LD_INT 1
34012: PUSH
34013: EMPTY
34014: LIST
34015: LIST
34016: PUSH
34017: LD_INT 1
34019: NEG
34020: PUSH
34021: LD_INT 0
34023: PUSH
34024: EMPTY
34025: LIST
34026: LIST
34027: PUSH
34028: LD_INT 1
34030: NEG
34031: PUSH
34032: LD_INT 1
34034: NEG
34035: PUSH
34036: EMPTY
34037: LIST
34038: LIST
34039: PUSH
34040: LD_INT 1
34042: NEG
34043: PUSH
34044: LD_INT 2
34046: NEG
34047: PUSH
34048: EMPTY
34049: LIST
34050: LIST
34051: PUSH
34052: LD_INT 0
34054: PUSH
34055: LD_INT 2
34057: NEG
34058: PUSH
34059: EMPTY
34060: LIST
34061: LIST
34062: PUSH
34063: LD_INT 1
34065: PUSH
34066: LD_INT 1
34068: NEG
34069: PUSH
34070: EMPTY
34071: LIST
34072: LIST
34073: PUSH
34074: LD_INT 2
34076: PUSH
34077: LD_INT 0
34079: PUSH
34080: EMPTY
34081: LIST
34082: LIST
34083: PUSH
34084: LD_INT 2
34086: PUSH
34087: LD_INT 1
34089: PUSH
34090: EMPTY
34091: LIST
34092: LIST
34093: PUSH
34094: LD_INT 2
34096: PUSH
34097: LD_INT 2
34099: PUSH
34100: EMPTY
34101: LIST
34102: LIST
34103: PUSH
34104: LD_INT 1
34106: PUSH
34107: LD_INT 2
34109: PUSH
34110: EMPTY
34111: LIST
34112: LIST
34113: PUSH
34114: LD_INT 0
34116: PUSH
34117: LD_INT 2
34119: PUSH
34120: EMPTY
34121: LIST
34122: LIST
34123: PUSH
34124: LD_INT 1
34126: NEG
34127: PUSH
34128: LD_INT 1
34130: PUSH
34131: EMPTY
34132: LIST
34133: LIST
34134: PUSH
34135: LD_INT 2
34137: NEG
34138: PUSH
34139: LD_INT 0
34141: PUSH
34142: EMPTY
34143: LIST
34144: LIST
34145: PUSH
34146: LD_INT 2
34148: NEG
34149: PUSH
34150: LD_INT 1
34152: NEG
34153: PUSH
34154: EMPTY
34155: LIST
34156: LIST
34157: PUSH
34158: LD_INT 2
34160: NEG
34161: PUSH
34162: LD_INT 2
34164: NEG
34165: PUSH
34166: EMPTY
34167: LIST
34168: LIST
34169: PUSH
34170: LD_INT 2
34172: NEG
34173: PUSH
34174: LD_INT 3
34176: NEG
34177: PUSH
34178: EMPTY
34179: LIST
34180: LIST
34181: PUSH
34182: LD_INT 1
34184: NEG
34185: PUSH
34186: LD_INT 3
34188: NEG
34189: PUSH
34190: EMPTY
34191: LIST
34192: LIST
34193: PUSH
34194: LD_INT 3
34196: NEG
34197: PUSH
34198: LD_INT 1
34200: NEG
34201: PUSH
34202: EMPTY
34203: LIST
34204: LIST
34205: PUSH
34206: LD_INT 3
34208: NEG
34209: PUSH
34210: LD_INT 2
34212: NEG
34213: PUSH
34214: EMPTY
34215: LIST
34216: LIST
34217: PUSH
34218: EMPTY
34219: LIST
34220: LIST
34221: LIST
34222: LIST
34223: LIST
34224: LIST
34225: LIST
34226: LIST
34227: LIST
34228: LIST
34229: LIST
34230: LIST
34231: LIST
34232: LIST
34233: LIST
34234: LIST
34235: LIST
34236: LIST
34237: LIST
34238: LIST
34239: LIST
34240: LIST
34241: LIST
34242: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
34243: LD_ADDR_VAR 0 29
34247: PUSH
34248: LD_INT 0
34250: PUSH
34251: LD_INT 0
34253: PUSH
34254: EMPTY
34255: LIST
34256: LIST
34257: PUSH
34258: LD_INT 0
34260: PUSH
34261: LD_INT 1
34263: NEG
34264: PUSH
34265: EMPTY
34266: LIST
34267: LIST
34268: PUSH
34269: LD_INT 1
34271: PUSH
34272: LD_INT 0
34274: PUSH
34275: EMPTY
34276: LIST
34277: LIST
34278: PUSH
34279: LD_INT 1
34281: PUSH
34282: LD_INT 1
34284: PUSH
34285: EMPTY
34286: LIST
34287: LIST
34288: PUSH
34289: LD_INT 0
34291: PUSH
34292: LD_INT 1
34294: PUSH
34295: EMPTY
34296: LIST
34297: LIST
34298: PUSH
34299: LD_INT 1
34301: NEG
34302: PUSH
34303: LD_INT 0
34305: PUSH
34306: EMPTY
34307: LIST
34308: LIST
34309: PUSH
34310: LD_INT 1
34312: NEG
34313: PUSH
34314: LD_INT 1
34316: NEG
34317: PUSH
34318: EMPTY
34319: LIST
34320: LIST
34321: PUSH
34322: LD_INT 1
34324: NEG
34325: PUSH
34326: LD_INT 2
34328: NEG
34329: PUSH
34330: EMPTY
34331: LIST
34332: LIST
34333: PUSH
34334: LD_INT 0
34336: PUSH
34337: LD_INT 2
34339: NEG
34340: PUSH
34341: EMPTY
34342: LIST
34343: LIST
34344: PUSH
34345: LD_INT 1
34347: PUSH
34348: LD_INT 1
34350: NEG
34351: PUSH
34352: EMPTY
34353: LIST
34354: LIST
34355: PUSH
34356: LD_INT 2
34358: PUSH
34359: LD_INT 0
34361: PUSH
34362: EMPTY
34363: LIST
34364: LIST
34365: PUSH
34366: LD_INT 2
34368: PUSH
34369: LD_INT 1
34371: PUSH
34372: EMPTY
34373: LIST
34374: LIST
34375: PUSH
34376: LD_INT 1
34378: PUSH
34379: LD_INT 2
34381: PUSH
34382: EMPTY
34383: LIST
34384: LIST
34385: PUSH
34386: LD_INT 0
34388: PUSH
34389: LD_INT 2
34391: PUSH
34392: EMPTY
34393: LIST
34394: LIST
34395: PUSH
34396: LD_INT 1
34398: NEG
34399: PUSH
34400: LD_INT 1
34402: PUSH
34403: EMPTY
34404: LIST
34405: LIST
34406: PUSH
34407: LD_INT 2
34409: NEG
34410: PUSH
34411: LD_INT 1
34413: NEG
34414: PUSH
34415: EMPTY
34416: LIST
34417: LIST
34418: PUSH
34419: LD_INT 2
34421: NEG
34422: PUSH
34423: LD_INT 2
34425: NEG
34426: PUSH
34427: EMPTY
34428: LIST
34429: LIST
34430: PUSH
34431: LD_INT 2
34433: NEG
34434: PUSH
34435: LD_INT 3
34437: NEG
34438: PUSH
34439: EMPTY
34440: LIST
34441: LIST
34442: PUSH
34443: LD_INT 2
34445: PUSH
34446: LD_INT 1
34448: NEG
34449: PUSH
34450: EMPTY
34451: LIST
34452: LIST
34453: PUSH
34454: LD_INT 3
34456: PUSH
34457: LD_INT 1
34459: PUSH
34460: EMPTY
34461: LIST
34462: LIST
34463: PUSH
34464: LD_INT 1
34466: PUSH
34467: LD_INT 3
34469: PUSH
34470: EMPTY
34471: LIST
34472: LIST
34473: PUSH
34474: LD_INT 1
34476: NEG
34477: PUSH
34478: LD_INT 2
34480: PUSH
34481: EMPTY
34482: LIST
34483: LIST
34484: PUSH
34485: LD_INT 3
34487: NEG
34488: PUSH
34489: LD_INT 2
34491: NEG
34492: PUSH
34493: EMPTY
34494: LIST
34495: LIST
34496: PUSH
34497: EMPTY
34498: LIST
34499: LIST
34500: LIST
34501: LIST
34502: LIST
34503: LIST
34504: LIST
34505: LIST
34506: LIST
34507: LIST
34508: LIST
34509: LIST
34510: LIST
34511: LIST
34512: LIST
34513: LIST
34514: LIST
34515: LIST
34516: LIST
34517: LIST
34518: LIST
34519: LIST
34520: LIST
34521: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
34522: LD_ADDR_VAR 0 30
34526: PUSH
34527: LD_INT 0
34529: PUSH
34530: LD_INT 0
34532: PUSH
34533: EMPTY
34534: LIST
34535: LIST
34536: PUSH
34537: LD_INT 0
34539: PUSH
34540: LD_INT 1
34542: NEG
34543: PUSH
34544: EMPTY
34545: LIST
34546: LIST
34547: PUSH
34548: LD_INT 1
34550: PUSH
34551: LD_INT 0
34553: PUSH
34554: EMPTY
34555: LIST
34556: LIST
34557: PUSH
34558: LD_INT 1
34560: PUSH
34561: LD_INT 1
34563: PUSH
34564: EMPTY
34565: LIST
34566: LIST
34567: PUSH
34568: LD_INT 0
34570: PUSH
34571: LD_INT 1
34573: PUSH
34574: EMPTY
34575: LIST
34576: LIST
34577: PUSH
34578: LD_INT 1
34580: NEG
34581: PUSH
34582: LD_INT 0
34584: PUSH
34585: EMPTY
34586: LIST
34587: LIST
34588: PUSH
34589: LD_INT 1
34591: NEG
34592: PUSH
34593: LD_INT 1
34595: NEG
34596: PUSH
34597: EMPTY
34598: LIST
34599: LIST
34600: PUSH
34601: LD_INT 1
34603: NEG
34604: PUSH
34605: LD_INT 2
34607: NEG
34608: PUSH
34609: EMPTY
34610: LIST
34611: LIST
34612: PUSH
34613: LD_INT 0
34615: PUSH
34616: LD_INT 2
34618: NEG
34619: PUSH
34620: EMPTY
34621: LIST
34622: LIST
34623: PUSH
34624: LD_INT 1
34626: PUSH
34627: LD_INT 1
34629: NEG
34630: PUSH
34631: EMPTY
34632: LIST
34633: LIST
34634: PUSH
34635: LD_INT 2
34637: PUSH
34638: LD_INT 0
34640: PUSH
34641: EMPTY
34642: LIST
34643: LIST
34644: PUSH
34645: LD_INT 2
34647: PUSH
34648: LD_INT 1
34650: PUSH
34651: EMPTY
34652: LIST
34653: LIST
34654: PUSH
34655: LD_INT 2
34657: PUSH
34658: LD_INT 2
34660: PUSH
34661: EMPTY
34662: LIST
34663: LIST
34664: PUSH
34665: LD_INT 1
34667: PUSH
34668: LD_INT 2
34670: PUSH
34671: EMPTY
34672: LIST
34673: LIST
34674: PUSH
34675: LD_INT 1
34677: NEG
34678: PUSH
34679: LD_INT 1
34681: PUSH
34682: EMPTY
34683: LIST
34684: LIST
34685: PUSH
34686: LD_INT 2
34688: NEG
34689: PUSH
34690: LD_INT 0
34692: PUSH
34693: EMPTY
34694: LIST
34695: LIST
34696: PUSH
34697: LD_INT 2
34699: NEG
34700: PUSH
34701: LD_INT 1
34703: NEG
34704: PUSH
34705: EMPTY
34706: LIST
34707: LIST
34708: PUSH
34709: LD_INT 1
34711: NEG
34712: PUSH
34713: LD_INT 3
34715: NEG
34716: PUSH
34717: EMPTY
34718: LIST
34719: LIST
34720: PUSH
34721: LD_INT 1
34723: PUSH
34724: LD_INT 2
34726: NEG
34727: PUSH
34728: EMPTY
34729: LIST
34730: LIST
34731: PUSH
34732: LD_INT 3
34734: PUSH
34735: LD_INT 2
34737: PUSH
34738: EMPTY
34739: LIST
34740: LIST
34741: PUSH
34742: LD_INT 2
34744: PUSH
34745: LD_INT 3
34747: PUSH
34748: EMPTY
34749: LIST
34750: LIST
34751: PUSH
34752: LD_INT 2
34754: NEG
34755: PUSH
34756: LD_INT 1
34758: PUSH
34759: EMPTY
34760: LIST
34761: LIST
34762: PUSH
34763: LD_INT 3
34765: NEG
34766: PUSH
34767: LD_INT 1
34769: NEG
34770: PUSH
34771: EMPTY
34772: LIST
34773: LIST
34774: PUSH
34775: EMPTY
34776: LIST
34777: LIST
34778: LIST
34779: LIST
34780: LIST
34781: LIST
34782: LIST
34783: LIST
34784: LIST
34785: LIST
34786: LIST
34787: LIST
34788: LIST
34789: LIST
34790: LIST
34791: LIST
34792: LIST
34793: LIST
34794: LIST
34795: LIST
34796: LIST
34797: LIST
34798: LIST
34799: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
34800: LD_ADDR_VAR 0 31
34804: PUSH
34805: LD_INT 0
34807: PUSH
34808: LD_INT 0
34810: PUSH
34811: EMPTY
34812: LIST
34813: LIST
34814: PUSH
34815: LD_INT 0
34817: PUSH
34818: LD_INT 1
34820: NEG
34821: PUSH
34822: EMPTY
34823: LIST
34824: LIST
34825: PUSH
34826: LD_INT 1
34828: PUSH
34829: LD_INT 0
34831: PUSH
34832: EMPTY
34833: LIST
34834: LIST
34835: PUSH
34836: LD_INT 1
34838: PUSH
34839: LD_INT 1
34841: PUSH
34842: EMPTY
34843: LIST
34844: LIST
34845: PUSH
34846: LD_INT 0
34848: PUSH
34849: LD_INT 1
34851: PUSH
34852: EMPTY
34853: LIST
34854: LIST
34855: PUSH
34856: LD_INT 1
34858: NEG
34859: PUSH
34860: LD_INT 0
34862: PUSH
34863: EMPTY
34864: LIST
34865: LIST
34866: PUSH
34867: LD_INT 1
34869: NEG
34870: PUSH
34871: LD_INT 1
34873: NEG
34874: PUSH
34875: EMPTY
34876: LIST
34877: LIST
34878: PUSH
34879: LD_INT 1
34881: NEG
34882: PUSH
34883: LD_INT 2
34885: NEG
34886: PUSH
34887: EMPTY
34888: LIST
34889: LIST
34890: PUSH
34891: LD_INT 1
34893: PUSH
34894: LD_INT 1
34896: NEG
34897: PUSH
34898: EMPTY
34899: LIST
34900: LIST
34901: PUSH
34902: LD_INT 2
34904: PUSH
34905: LD_INT 0
34907: PUSH
34908: EMPTY
34909: LIST
34910: LIST
34911: PUSH
34912: LD_INT 2
34914: PUSH
34915: LD_INT 1
34917: PUSH
34918: EMPTY
34919: LIST
34920: LIST
34921: PUSH
34922: LD_INT 2
34924: PUSH
34925: LD_INT 2
34927: PUSH
34928: EMPTY
34929: LIST
34930: LIST
34931: PUSH
34932: LD_INT 1
34934: PUSH
34935: LD_INT 2
34937: PUSH
34938: EMPTY
34939: LIST
34940: LIST
34941: PUSH
34942: LD_INT 0
34944: PUSH
34945: LD_INT 2
34947: PUSH
34948: EMPTY
34949: LIST
34950: LIST
34951: PUSH
34952: LD_INT 1
34954: NEG
34955: PUSH
34956: LD_INT 1
34958: PUSH
34959: EMPTY
34960: LIST
34961: LIST
34962: PUSH
34963: LD_INT 2
34965: NEG
34966: PUSH
34967: LD_INT 1
34969: NEG
34970: PUSH
34971: EMPTY
34972: LIST
34973: LIST
34974: PUSH
34975: LD_INT 2
34977: NEG
34978: PUSH
34979: LD_INT 2
34981: NEG
34982: PUSH
34983: EMPTY
34984: LIST
34985: LIST
34986: PUSH
34987: LD_INT 2
34989: NEG
34990: PUSH
34991: LD_INT 3
34993: NEG
34994: PUSH
34995: EMPTY
34996: LIST
34997: LIST
34998: PUSH
34999: LD_INT 2
35001: PUSH
35002: LD_INT 1
35004: NEG
35005: PUSH
35006: EMPTY
35007: LIST
35008: LIST
35009: PUSH
35010: LD_INT 3
35012: PUSH
35013: LD_INT 1
35015: PUSH
35016: EMPTY
35017: LIST
35018: LIST
35019: PUSH
35020: LD_INT 1
35022: PUSH
35023: LD_INT 3
35025: PUSH
35026: EMPTY
35027: LIST
35028: LIST
35029: PUSH
35030: LD_INT 1
35032: NEG
35033: PUSH
35034: LD_INT 2
35036: PUSH
35037: EMPTY
35038: LIST
35039: LIST
35040: PUSH
35041: LD_INT 3
35043: NEG
35044: PUSH
35045: LD_INT 2
35047: NEG
35048: PUSH
35049: EMPTY
35050: LIST
35051: LIST
35052: PUSH
35053: EMPTY
35054: LIST
35055: LIST
35056: LIST
35057: LIST
35058: LIST
35059: LIST
35060: LIST
35061: LIST
35062: LIST
35063: LIST
35064: LIST
35065: LIST
35066: LIST
35067: LIST
35068: LIST
35069: LIST
35070: LIST
35071: LIST
35072: LIST
35073: LIST
35074: LIST
35075: LIST
35076: LIST
35077: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35078: LD_ADDR_VAR 0 32
35082: PUSH
35083: LD_INT 0
35085: PUSH
35086: LD_INT 0
35088: PUSH
35089: EMPTY
35090: LIST
35091: LIST
35092: PUSH
35093: LD_INT 0
35095: PUSH
35096: LD_INT 1
35098: NEG
35099: PUSH
35100: EMPTY
35101: LIST
35102: LIST
35103: PUSH
35104: LD_INT 1
35106: PUSH
35107: LD_INT 0
35109: PUSH
35110: EMPTY
35111: LIST
35112: LIST
35113: PUSH
35114: LD_INT 1
35116: PUSH
35117: LD_INT 1
35119: PUSH
35120: EMPTY
35121: LIST
35122: LIST
35123: PUSH
35124: LD_INT 0
35126: PUSH
35127: LD_INT 1
35129: PUSH
35130: EMPTY
35131: LIST
35132: LIST
35133: PUSH
35134: LD_INT 1
35136: NEG
35137: PUSH
35138: LD_INT 0
35140: PUSH
35141: EMPTY
35142: LIST
35143: LIST
35144: PUSH
35145: LD_INT 1
35147: NEG
35148: PUSH
35149: LD_INT 1
35151: NEG
35152: PUSH
35153: EMPTY
35154: LIST
35155: LIST
35156: PUSH
35157: LD_INT 1
35159: NEG
35160: PUSH
35161: LD_INT 2
35163: NEG
35164: PUSH
35165: EMPTY
35166: LIST
35167: LIST
35168: PUSH
35169: LD_INT 0
35171: PUSH
35172: LD_INT 2
35174: NEG
35175: PUSH
35176: EMPTY
35177: LIST
35178: LIST
35179: PUSH
35180: LD_INT 1
35182: PUSH
35183: LD_INT 1
35185: NEG
35186: PUSH
35187: EMPTY
35188: LIST
35189: LIST
35190: PUSH
35191: LD_INT 2
35193: PUSH
35194: LD_INT 1
35196: PUSH
35197: EMPTY
35198: LIST
35199: LIST
35200: PUSH
35201: LD_INT 2
35203: PUSH
35204: LD_INT 2
35206: PUSH
35207: EMPTY
35208: LIST
35209: LIST
35210: PUSH
35211: LD_INT 1
35213: PUSH
35214: LD_INT 2
35216: PUSH
35217: EMPTY
35218: LIST
35219: LIST
35220: PUSH
35221: LD_INT 0
35223: PUSH
35224: LD_INT 2
35226: PUSH
35227: EMPTY
35228: LIST
35229: LIST
35230: PUSH
35231: LD_INT 1
35233: NEG
35234: PUSH
35235: LD_INT 1
35237: PUSH
35238: EMPTY
35239: LIST
35240: LIST
35241: PUSH
35242: LD_INT 2
35244: NEG
35245: PUSH
35246: LD_INT 0
35248: PUSH
35249: EMPTY
35250: LIST
35251: LIST
35252: PUSH
35253: LD_INT 2
35255: NEG
35256: PUSH
35257: LD_INT 1
35259: NEG
35260: PUSH
35261: EMPTY
35262: LIST
35263: LIST
35264: PUSH
35265: LD_INT 1
35267: NEG
35268: PUSH
35269: LD_INT 3
35271: NEG
35272: PUSH
35273: EMPTY
35274: LIST
35275: LIST
35276: PUSH
35277: LD_INT 1
35279: PUSH
35280: LD_INT 2
35282: NEG
35283: PUSH
35284: EMPTY
35285: LIST
35286: LIST
35287: PUSH
35288: LD_INT 3
35290: PUSH
35291: LD_INT 2
35293: PUSH
35294: EMPTY
35295: LIST
35296: LIST
35297: PUSH
35298: LD_INT 2
35300: PUSH
35301: LD_INT 3
35303: PUSH
35304: EMPTY
35305: LIST
35306: LIST
35307: PUSH
35308: LD_INT 2
35310: NEG
35311: PUSH
35312: LD_INT 1
35314: PUSH
35315: EMPTY
35316: LIST
35317: LIST
35318: PUSH
35319: LD_INT 3
35321: NEG
35322: PUSH
35323: LD_INT 1
35325: NEG
35326: PUSH
35327: EMPTY
35328: LIST
35329: LIST
35330: PUSH
35331: EMPTY
35332: LIST
35333: LIST
35334: LIST
35335: LIST
35336: LIST
35337: LIST
35338: LIST
35339: LIST
35340: LIST
35341: LIST
35342: LIST
35343: LIST
35344: LIST
35345: LIST
35346: LIST
35347: LIST
35348: LIST
35349: LIST
35350: LIST
35351: LIST
35352: LIST
35353: LIST
35354: LIST
35355: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35356: LD_ADDR_VAR 0 33
35360: PUSH
35361: LD_INT 0
35363: PUSH
35364: LD_INT 0
35366: PUSH
35367: EMPTY
35368: LIST
35369: LIST
35370: PUSH
35371: LD_INT 0
35373: PUSH
35374: LD_INT 1
35376: NEG
35377: PUSH
35378: EMPTY
35379: LIST
35380: LIST
35381: PUSH
35382: LD_INT 1
35384: PUSH
35385: LD_INT 0
35387: PUSH
35388: EMPTY
35389: LIST
35390: LIST
35391: PUSH
35392: LD_INT 1
35394: PUSH
35395: LD_INT 1
35397: PUSH
35398: EMPTY
35399: LIST
35400: LIST
35401: PUSH
35402: LD_INT 0
35404: PUSH
35405: LD_INT 1
35407: PUSH
35408: EMPTY
35409: LIST
35410: LIST
35411: PUSH
35412: LD_INT 1
35414: NEG
35415: PUSH
35416: LD_INT 0
35418: PUSH
35419: EMPTY
35420: LIST
35421: LIST
35422: PUSH
35423: LD_INT 1
35425: NEG
35426: PUSH
35427: LD_INT 1
35429: NEG
35430: PUSH
35431: EMPTY
35432: LIST
35433: LIST
35434: PUSH
35435: LD_INT 1
35437: NEG
35438: PUSH
35439: LD_INT 2
35441: NEG
35442: PUSH
35443: EMPTY
35444: LIST
35445: LIST
35446: PUSH
35447: LD_INT 1
35449: PUSH
35450: LD_INT 1
35452: NEG
35453: PUSH
35454: EMPTY
35455: LIST
35456: LIST
35457: PUSH
35458: LD_INT 2
35460: PUSH
35461: LD_INT 0
35463: PUSH
35464: EMPTY
35465: LIST
35466: LIST
35467: PUSH
35468: LD_INT 2
35470: PUSH
35471: LD_INT 1
35473: PUSH
35474: EMPTY
35475: LIST
35476: LIST
35477: PUSH
35478: LD_INT 1
35480: PUSH
35481: LD_INT 2
35483: PUSH
35484: EMPTY
35485: LIST
35486: LIST
35487: PUSH
35488: LD_INT 0
35490: PUSH
35491: LD_INT 2
35493: PUSH
35494: EMPTY
35495: LIST
35496: LIST
35497: PUSH
35498: LD_INT 1
35500: NEG
35501: PUSH
35502: LD_INT 1
35504: PUSH
35505: EMPTY
35506: LIST
35507: LIST
35508: PUSH
35509: LD_INT 2
35511: NEG
35512: PUSH
35513: LD_INT 0
35515: PUSH
35516: EMPTY
35517: LIST
35518: LIST
35519: PUSH
35520: LD_INT 2
35522: NEG
35523: PUSH
35524: LD_INT 1
35526: NEG
35527: PUSH
35528: EMPTY
35529: LIST
35530: LIST
35531: PUSH
35532: LD_INT 2
35534: NEG
35535: PUSH
35536: LD_INT 2
35538: NEG
35539: PUSH
35540: EMPTY
35541: LIST
35542: LIST
35543: PUSH
35544: LD_INT 2
35546: NEG
35547: PUSH
35548: LD_INT 3
35550: NEG
35551: PUSH
35552: EMPTY
35553: LIST
35554: LIST
35555: PUSH
35556: LD_INT 2
35558: PUSH
35559: LD_INT 1
35561: NEG
35562: PUSH
35563: EMPTY
35564: LIST
35565: LIST
35566: PUSH
35567: LD_INT 3
35569: PUSH
35570: LD_INT 1
35572: PUSH
35573: EMPTY
35574: LIST
35575: LIST
35576: PUSH
35577: LD_INT 1
35579: PUSH
35580: LD_INT 3
35582: PUSH
35583: EMPTY
35584: LIST
35585: LIST
35586: PUSH
35587: LD_INT 1
35589: NEG
35590: PUSH
35591: LD_INT 2
35593: PUSH
35594: EMPTY
35595: LIST
35596: LIST
35597: PUSH
35598: LD_INT 3
35600: NEG
35601: PUSH
35602: LD_INT 2
35604: NEG
35605: PUSH
35606: EMPTY
35607: LIST
35608: LIST
35609: PUSH
35610: EMPTY
35611: LIST
35612: LIST
35613: LIST
35614: LIST
35615: LIST
35616: LIST
35617: LIST
35618: LIST
35619: LIST
35620: LIST
35621: LIST
35622: LIST
35623: LIST
35624: LIST
35625: LIST
35626: LIST
35627: LIST
35628: LIST
35629: LIST
35630: LIST
35631: LIST
35632: LIST
35633: LIST
35634: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35635: LD_ADDR_VAR 0 34
35639: PUSH
35640: LD_INT 0
35642: PUSH
35643: LD_INT 0
35645: PUSH
35646: EMPTY
35647: LIST
35648: LIST
35649: PUSH
35650: LD_INT 0
35652: PUSH
35653: LD_INT 1
35655: NEG
35656: PUSH
35657: EMPTY
35658: LIST
35659: LIST
35660: PUSH
35661: LD_INT 1
35663: PUSH
35664: LD_INT 0
35666: PUSH
35667: EMPTY
35668: LIST
35669: LIST
35670: PUSH
35671: LD_INT 1
35673: PUSH
35674: LD_INT 1
35676: PUSH
35677: EMPTY
35678: LIST
35679: LIST
35680: PUSH
35681: LD_INT 0
35683: PUSH
35684: LD_INT 1
35686: PUSH
35687: EMPTY
35688: LIST
35689: LIST
35690: PUSH
35691: LD_INT 1
35693: NEG
35694: PUSH
35695: LD_INT 0
35697: PUSH
35698: EMPTY
35699: LIST
35700: LIST
35701: PUSH
35702: LD_INT 1
35704: NEG
35705: PUSH
35706: LD_INT 1
35708: NEG
35709: PUSH
35710: EMPTY
35711: LIST
35712: LIST
35713: PUSH
35714: LD_INT 1
35716: NEG
35717: PUSH
35718: LD_INT 2
35720: NEG
35721: PUSH
35722: EMPTY
35723: LIST
35724: LIST
35725: PUSH
35726: LD_INT 0
35728: PUSH
35729: LD_INT 2
35731: NEG
35732: PUSH
35733: EMPTY
35734: LIST
35735: LIST
35736: PUSH
35737: LD_INT 1
35739: PUSH
35740: LD_INT 1
35742: NEG
35743: PUSH
35744: EMPTY
35745: LIST
35746: LIST
35747: PUSH
35748: LD_INT 2
35750: PUSH
35751: LD_INT 1
35753: PUSH
35754: EMPTY
35755: LIST
35756: LIST
35757: PUSH
35758: LD_INT 2
35760: PUSH
35761: LD_INT 2
35763: PUSH
35764: EMPTY
35765: LIST
35766: LIST
35767: PUSH
35768: LD_INT 1
35770: PUSH
35771: LD_INT 2
35773: PUSH
35774: EMPTY
35775: LIST
35776: LIST
35777: PUSH
35778: LD_INT 1
35780: NEG
35781: PUSH
35782: LD_INT 1
35784: PUSH
35785: EMPTY
35786: LIST
35787: LIST
35788: PUSH
35789: LD_INT 2
35791: NEG
35792: PUSH
35793: LD_INT 0
35795: PUSH
35796: EMPTY
35797: LIST
35798: LIST
35799: PUSH
35800: LD_INT 2
35802: NEG
35803: PUSH
35804: LD_INT 1
35806: NEG
35807: PUSH
35808: EMPTY
35809: LIST
35810: LIST
35811: PUSH
35812: LD_INT 2
35814: NEG
35815: PUSH
35816: LD_INT 2
35818: NEG
35819: PUSH
35820: EMPTY
35821: LIST
35822: LIST
35823: PUSH
35824: LD_INT 1
35826: NEG
35827: PUSH
35828: LD_INT 3
35830: NEG
35831: PUSH
35832: EMPTY
35833: LIST
35834: LIST
35835: PUSH
35836: LD_INT 1
35838: PUSH
35839: LD_INT 2
35841: NEG
35842: PUSH
35843: EMPTY
35844: LIST
35845: LIST
35846: PUSH
35847: LD_INT 3
35849: PUSH
35850: LD_INT 2
35852: PUSH
35853: EMPTY
35854: LIST
35855: LIST
35856: PUSH
35857: LD_INT 2
35859: PUSH
35860: LD_INT 3
35862: PUSH
35863: EMPTY
35864: LIST
35865: LIST
35866: PUSH
35867: LD_INT 2
35869: NEG
35870: PUSH
35871: LD_INT 1
35873: PUSH
35874: EMPTY
35875: LIST
35876: LIST
35877: PUSH
35878: LD_INT 3
35880: NEG
35881: PUSH
35882: LD_INT 1
35884: NEG
35885: PUSH
35886: EMPTY
35887: LIST
35888: LIST
35889: PUSH
35890: EMPTY
35891: LIST
35892: LIST
35893: LIST
35894: LIST
35895: LIST
35896: LIST
35897: LIST
35898: LIST
35899: LIST
35900: LIST
35901: LIST
35902: LIST
35903: LIST
35904: LIST
35905: LIST
35906: LIST
35907: LIST
35908: LIST
35909: LIST
35910: LIST
35911: LIST
35912: LIST
35913: LIST
35914: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
35915: LD_ADDR_VAR 0 35
35919: PUSH
35920: LD_INT 0
35922: PUSH
35923: LD_INT 0
35925: PUSH
35926: EMPTY
35927: LIST
35928: LIST
35929: PUSH
35930: LD_INT 0
35932: PUSH
35933: LD_INT 1
35935: NEG
35936: PUSH
35937: EMPTY
35938: LIST
35939: LIST
35940: PUSH
35941: LD_INT 1
35943: PUSH
35944: LD_INT 0
35946: PUSH
35947: EMPTY
35948: LIST
35949: LIST
35950: PUSH
35951: LD_INT 1
35953: PUSH
35954: LD_INT 1
35956: PUSH
35957: EMPTY
35958: LIST
35959: LIST
35960: PUSH
35961: LD_INT 0
35963: PUSH
35964: LD_INT 1
35966: PUSH
35967: EMPTY
35968: LIST
35969: LIST
35970: PUSH
35971: LD_INT 1
35973: NEG
35974: PUSH
35975: LD_INT 0
35977: PUSH
35978: EMPTY
35979: LIST
35980: LIST
35981: PUSH
35982: LD_INT 1
35984: NEG
35985: PUSH
35986: LD_INT 1
35988: NEG
35989: PUSH
35990: EMPTY
35991: LIST
35992: LIST
35993: PUSH
35994: LD_INT 2
35996: PUSH
35997: LD_INT 1
35999: PUSH
36000: EMPTY
36001: LIST
36002: LIST
36003: PUSH
36004: LD_INT 2
36006: NEG
36007: PUSH
36008: LD_INT 1
36010: NEG
36011: PUSH
36012: EMPTY
36013: LIST
36014: LIST
36015: PUSH
36016: EMPTY
36017: LIST
36018: LIST
36019: LIST
36020: LIST
36021: LIST
36022: LIST
36023: LIST
36024: LIST
36025: LIST
36026: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
36027: LD_ADDR_VAR 0 36
36031: PUSH
36032: LD_INT 0
36034: PUSH
36035: LD_INT 0
36037: PUSH
36038: EMPTY
36039: LIST
36040: LIST
36041: PUSH
36042: LD_INT 0
36044: PUSH
36045: LD_INT 1
36047: NEG
36048: PUSH
36049: EMPTY
36050: LIST
36051: LIST
36052: PUSH
36053: LD_INT 1
36055: PUSH
36056: LD_INT 0
36058: PUSH
36059: EMPTY
36060: LIST
36061: LIST
36062: PUSH
36063: LD_INT 1
36065: PUSH
36066: LD_INT 1
36068: PUSH
36069: EMPTY
36070: LIST
36071: LIST
36072: PUSH
36073: LD_INT 0
36075: PUSH
36076: LD_INT 1
36078: PUSH
36079: EMPTY
36080: LIST
36081: LIST
36082: PUSH
36083: LD_INT 1
36085: NEG
36086: PUSH
36087: LD_INT 0
36089: PUSH
36090: EMPTY
36091: LIST
36092: LIST
36093: PUSH
36094: LD_INT 1
36096: NEG
36097: PUSH
36098: LD_INT 1
36100: NEG
36101: PUSH
36102: EMPTY
36103: LIST
36104: LIST
36105: PUSH
36106: LD_INT 1
36108: NEG
36109: PUSH
36110: LD_INT 2
36112: NEG
36113: PUSH
36114: EMPTY
36115: LIST
36116: LIST
36117: PUSH
36118: LD_INT 1
36120: PUSH
36121: LD_INT 2
36123: PUSH
36124: EMPTY
36125: LIST
36126: LIST
36127: PUSH
36128: EMPTY
36129: LIST
36130: LIST
36131: LIST
36132: LIST
36133: LIST
36134: LIST
36135: LIST
36136: LIST
36137: LIST
36138: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
36139: LD_ADDR_VAR 0 37
36143: PUSH
36144: LD_INT 0
36146: PUSH
36147: LD_INT 0
36149: PUSH
36150: EMPTY
36151: LIST
36152: LIST
36153: PUSH
36154: LD_INT 0
36156: PUSH
36157: LD_INT 1
36159: NEG
36160: PUSH
36161: EMPTY
36162: LIST
36163: LIST
36164: PUSH
36165: LD_INT 1
36167: PUSH
36168: LD_INT 0
36170: PUSH
36171: EMPTY
36172: LIST
36173: LIST
36174: PUSH
36175: LD_INT 1
36177: PUSH
36178: LD_INT 1
36180: PUSH
36181: EMPTY
36182: LIST
36183: LIST
36184: PUSH
36185: LD_INT 0
36187: PUSH
36188: LD_INT 1
36190: PUSH
36191: EMPTY
36192: LIST
36193: LIST
36194: PUSH
36195: LD_INT 1
36197: NEG
36198: PUSH
36199: LD_INT 0
36201: PUSH
36202: EMPTY
36203: LIST
36204: LIST
36205: PUSH
36206: LD_INT 1
36208: NEG
36209: PUSH
36210: LD_INT 1
36212: NEG
36213: PUSH
36214: EMPTY
36215: LIST
36216: LIST
36217: PUSH
36218: LD_INT 1
36220: PUSH
36221: LD_INT 1
36223: NEG
36224: PUSH
36225: EMPTY
36226: LIST
36227: LIST
36228: PUSH
36229: LD_INT 1
36231: NEG
36232: PUSH
36233: LD_INT 1
36235: PUSH
36236: EMPTY
36237: LIST
36238: LIST
36239: PUSH
36240: EMPTY
36241: LIST
36242: LIST
36243: LIST
36244: LIST
36245: LIST
36246: LIST
36247: LIST
36248: LIST
36249: LIST
36250: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
36251: LD_ADDR_VAR 0 38
36255: PUSH
36256: LD_INT 0
36258: PUSH
36259: LD_INT 0
36261: PUSH
36262: EMPTY
36263: LIST
36264: LIST
36265: PUSH
36266: LD_INT 0
36268: PUSH
36269: LD_INT 1
36271: NEG
36272: PUSH
36273: EMPTY
36274: LIST
36275: LIST
36276: PUSH
36277: LD_INT 1
36279: PUSH
36280: LD_INT 0
36282: PUSH
36283: EMPTY
36284: LIST
36285: LIST
36286: PUSH
36287: LD_INT 1
36289: PUSH
36290: LD_INT 1
36292: PUSH
36293: EMPTY
36294: LIST
36295: LIST
36296: PUSH
36297: LD_INT 0
36299: PUSH
36300: LD_INT 1
36302: PUSH
36303: EMPTY
36304: LIST
36305: LIST
36306: PUSH
36307: LD_INT 1
36309: NEG
36310: PUSH
36311: LD_INT 0
36313: PUSH
36314: EMPTY
36315: LIST
36316: LIST
36317: PUSH
36318: LD_INT 1
36320: NEG
36321: PUSH
36322: LD_INT 1
36324: NEG
36325: PUSH
36326: EMPTY
36327: LIST
36328: LIST
36329: PUSH
36330: LD_INT 2
36332: PUSH
36333: LD_INT 1
36335: PUSH
36336: EMPTY
36337: LIST
36338: LIST
36339: PUSH
36340: LD_INT 2
36342: NEG
36343: PUSH
36344: LD_INT 1
36346: NEG
36347: PUSH
36348: EMPTY
36349: LIST
36350: LIST
36351: PUSH
36352: EMPTY
36353: LIST
36354: LIST
36355: LIST
36356: LIST
36357: LIST
36358: LIST
36359: LIST
36360: LIST
36361: LIST
36362: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
36363: LD_ADDR_VAR 0 39
36367: PUSH
36368: LD_INT 0
36370: PUSH
36371: LD_INT 0
36373: PUSH
36374: EMPTY
36375: LIST
36376: LIST
36377: PUSH
36378: LD_INT 0
36380: PUSH
36381: LD_INT 1
36383: NEG
36384: PUSH
36385: EMPTY
36386: LIST
36387: LIST
36388: PUSH
36389: LD_INT 1
36391: PUSH
36392: LD_INT 0
36394: PUSH
36395: EMPTY
36396: LIST
36397: LIST
36398: PUSH
36399: LD_INT 1
36401: PUSH
36402: LD_INT 1
36404: PUSH
36405: EMPTY
36406: LIST
36407: LIST
36408: PUSH
36409: LD_INT 0
36411: PUSH
36412: LD_INT 1
36414: PUSH
36415: EMPTY
36416: LIST
36417: LIST
36418: PUSH
36419: LD_INT 1
36421: NEG
36422: PUSH
36423: LD_INT 0
36425: PUSH
36426: EMPTY
36427: LIST
36428: LIST
36429: PUSH
36430: LD_INT 1
36432: NEG
36433: PUSH
36434: LD_INT 1
36436: NEG
36437: PUSH
36438: EMPTY
36439: LIST
36440: LIST
36441: PUSH
36442: LD_INT 1
36444: NEG
36445: PUSH
36446: LD_INT 2
36448: NEG
36449: PUSH
36450: EMPTY
36451: LIST
36452: LIST
36453: PUSH
36454: LD_INT 1
36456: PUSH
36457: LD_INT 2
36459: PUSH
36460: EMPTY
36461: LIST
36462: LIST
36463: PUSH
36464: EMPTY
36465: LIST
36466: LIST
36467: LIST
36468: LIST
36469: LIST
36470: LIST
36471: LIST
36472: LIST
36473: LIST
36474: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
36475: LD_ADDR_VAR 0 40
36479: PUSH
36480: LD_INT 0
36482: PUSH
36483: LD_INT 0
36485: PUSH
36486: EMPTY
36487: LIST
36488: LIST
36489: PUSH
36490: LD_INT 0
36492: PUSH
36493: LD_INT 1
36495: NEG
36496: PUSH
36497: EMPTY
36498: LIST
36499: LIST
36500: PUSH
36501: LD_INT 1
36503: PUSH
36504: LD_INT 0
36506: PUSH
36507: EMPTY
36508: LIST
36509: LIST
36510: PUSH
36511: LD_INT 1
36513: PUSH
36514: LD_INT 1
36516: PUSH
36517: EMPTY
36518: LIST
36519: LIST
36520: PUSH
36521: LD_INT 0
36523: PUSH
36524: LD_INT 1
36526: PUSH
36527: EMPTY
36528: LIST
36529: LIST
36530: PUSH
36531: LD_INT 1
36533: NEG
36534: PUSH
36535: LD_INT 0
36537: PUSH
36538: EMPTY
36539: LIST
36540: LIST
36541: PUSH
36542: LD_INT 1
36544: NEG
36545: PUSH
36546: LD_INT 1
36548: NEG
36549: PUSH
36550: EMPTY
36551: LIST
36552: LIST
36553: PUSH
36554: LD_INT 1
36556: PUSH
36557: LD_INT 1
36559: NEG
36560: PUSH
36561: EMPTY
36562: LIST
36563: LIST
36564: PUSH
36565: LD_INT 1
36567: NEG
36568: PUSH
36569: LD_INT 1
36571: PUSH
36572: EMPTY
36573: LIST
36574: LIST
36575: PUSH
36576: EMPTY
36577: LIST
36578: LIST
36579: LIST
36580: LIST
36581: LIST
36582: LIST
36583: LIST
36584: LIST
36585: LIST
36586: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36587: LD_ADDR_VAR 0 41
36591: PUSH
36592: LD_INT 0
36594: PUSH
36595: LD_INT 0
36597: PUSH
36598: EMPTY
36599: LIST
36600: LIST
36601: PUSH
36602: LD_INT 0
36604: PUSH
36605: LD_INT 1
36607: NEG
36608: PUSH
36609: EMPTY
36610: LIST
36611: LIST
36612: PUSH
36613: LD_INT 1
36615: PUSH
36616: LD_INT 0
36618: PUSH
36619: EMPTY
36620: LIST
36621: LIST
36622: PUSH
36623: LD_INT 1
36625: PUSH
36626: LD_INT 1
36628: PUSH
36629: EMPTY
36630: LIST
36631: LIST
36632: PUSH
36633: LD_INT 0
36635: PUSH
36636: LD_INT 1
36638: PUSH
36639: EMPTY
36640: LIST
36641: LIST
36642: PUSH
36643: LD_INT 1
36645: NEG
36646: PUSH
36647: LD_INT 0
36649: PUSH
36650: EMPTY
36651: LIST
36652: LIST
36653: PUSH
36654: LD_INT 1
36656: NEG
36657: PUSH
36658: LD_INT 1
36660: NEG
36661: PUSH
36662: EMPTY
36663: LIST
36664: LIST
36665: PUSH
36666: LD_INT 1
36668: NEG
36669: PUSH
36670: LD_INT 2
36672: NEG
36673: PUSH
36674: EMPTY
36675: LIST
36676: LIST
36677: PUSH
36678: LD_INT 1
36680: PUSH
36681: LD_INT 1
36683: NEG
36684: PUSH
36685: EMPTY
36686: LIST
36687: LIST
36688: PUSH
36689: LD_INT 2
36691: PUSH
36692: LD_INT 0
36694: PUSH
36695: EMPTY
36696: LIST
36697: LIST
36698: PUSH
36699: LD_INT 2
36701: PUSH
36702: LD_INT 1
36704: PUSH
36705: EMPTY
36706: LIST
36707: LIST
36708: PUSH
36709: LD_INT 2
36711: PUSH
36712: LD_INT 2
36714: PUSH
36715: EMPTY
36716: LIST
36717: LIST
36718: PUSH
36719: LD_INT 1
36721: PUSH
36722: LD_INT 2
36724: PUSH
36725: EMPTY
36726: LIST
36727: LIST
36728: PUSH
36729: LD_INT 1
36731: NEG
36732: PUSH
36733: LD_INT 1
36735: PUSH
36736: EMPTY
36737: LIST
36738: LIST
36739: PUSH
36740: LD_INT 2
36742: NEG
36743: PUSH
36744: LD_INT 0
36746: PUSH
36747: EMPTY
36748: LIST
36749: LIST
36750: PUSH
36751: LD_INT 2
36753: NEG
36754: PUSH
36755: LD_INT 1
36757: NEG
36758: PUSH
36759: EMPTY
36760: LIST
36761: LIST
36762: PUSH
36763: LD_INT 2
36765: NEG
36766: PUSH
36767: LD_INT 2
36769: NEG
36770: PUSH
36771: EMPTY
36772: LIST
36773: LIST
36774: PUSH
36775: LD_INT 2
36777: NEG
36778: PUSH
36779: LD_INT 3
36781: NEG
36782: PUSH
36783: EMPTY
36784: LIST
36785: LIST
36786: PUSH
36787: LD_INT 2
36789: PUSH
36790: LD_INT 1
36792: NEG
36793: PUSH
36794: EMPTY
36795: LIST
36796: LIST
36797: PUSH
36798: LD_INT 3
36800: PUSH
36801: LD_INT 0
36803: PUSH
36804: EMPTY
36805: LIST
36806: LIST
36807: PUSH
36808: LD_INT 3
36810: PUSH
36811: LD_INT 1
36813: PUSH
36814: EMPTY
36815: LIST
36816: LIST
36817: PUSH
36818: LD_INT 3
36820: PUSH
36821: LD_INT 2
36823: PUSH
36824: EMPTY
36825: LIST
36826: LIST
36827: PUSH
36828: LD_INT 3
36830: PUSH
36831: LD_INT 3
36833: PUSH
36834: EMPTY
36835: LIST
36836: LIST
36837: PUSH
36838: LD_INT 2
36840: PUSH
36841: LD_INT 3
36843: PUSH
36844: EMPTY
36845: LIST
36846: LIST
36847: PUSH
36848: LD_INT 2
36850: NEG
36851: PUSH
36852: LD_INT 1
36854: PUSH
36855: EMPTY
36856: LIST
36857: LIST
36858: PUSH
36859: LD_INT 3
36861: NEG
36862: PUSH
36863: LD_INT 0
36865: PUSH
36866: EMPTY
36867: LIST
36868: LIST
36869: PUSH
36870: LD_INT 3
36872: NEG
36873: PUSH
36874: LD_INT 1
36876: NEG
36877: PUSH
36878: EMPTY
36879: LIST
36880: LIST
36881: PUSH
36882: LD_INT 3
36884: NEG
36885: PUSH
36886: LD_INT 2
36888: NEG
36889: PUSH
36890: EMPTY
36891: LIST
36892: LIST
36893: PUSH
36894: LD_INT 3
36896: NEG
36897: PUSH
36898: LD_INT 3
36900: NEG
36901: PUSH
36902: EMPTY
36903: LIST
36904: LIST
36905: PUSH
36906: EMPTY
36907: LIST
36908: LIST
36909: LIST
36910: LIST
36911: LIST
36912: LIST
36913: LIST
36914: LIST
36915: LIST
36916: LIST
36917: LIST
36918: LIST
36919: LIST
36920: LIST
36921: LIST
36922: LIST
36923: LIST
36924: LIST
36925: LIST
36926: LIST
36927: LIST
36928: LIST
36929: LIST
36930: LIST
36931: LIST
36932: LIST
36933: LIST
36934: LIST
36935: LIST
36936: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36937: LD_ADDR_VAR 0 42
36941: PUSH
36942: LD_INT 0
36944: PUSH
36945: LD_INT 0
36947: PUSH
36948: EMPTY
36949: LIST
36950: LIST
36951: PUSH
36952: LD_INT 0
36954: PUSH
36955: LD_INT 1
36957: NEG
36958: PUSH
36959: EMPTY
36960: LIST
36961: LIST
36962: PUSH
36963: LD_INT 1
36965: PUSH
36966: LD_INT 0
36968: PUSH
36969: EMPTY
36970: LIST
36971: LIST
36972: PUSH
36973: LD_INT 1
36975: PUSH
36976: LD_INT 1
36978: PUSH
36979: EMPTY
36980: LIST
36981: LIST
36982: PUSH
36983: LD_INT 0
36985: PUSH
36986: LD_INT 1
36988: PUSH
36989: EMPTY
36990: LIST
36991: LIST
36992: PUSH
36993: LD_INT 1
36995: NEG
36996: PUSH
36997: LD_INT 0
36999: PUSH
37000: EMPTY
37001: LIST
37002: LIST
37003: PUSH
37004: LD_INT 1
37006: NEG
37007: PUSH
37008: LD_INT 1
37010: NEG
37011: PUSH
37012: EMPTY
37013: LIST
37014: LIST
37015: PUSH
37016: LD_INT 1
37018: NEG
37019: PUSH
37020: LD_INT 2
37022: NEG
37023: PUSH
37024: EMPTY
37025: LIST
37026: LIST
37027: PUSH
37028: LD_INT 0
37030: PUSH
37031: LD_INT 2
37033: NEG
37034: PUSH
37035: EMPTY
37036: LIST
37037: LIST
37038: PUSH
37039: LD_INT 1
37041: PUSH
37042: LD_INT 1
37044: NEG
37045: PUSH
37046: EMPTY
37047: LIST
37048: LIST
37049: PUSH
37050: LD_INT 2
37052: PUSH
37053: LD_INT 1
37055: PUSH
37056: EMPTY
37057: LIST
37058: LIST
37059: PUSH
37060: LD_INT 2
37062: PUSH
37063: LD_INT 2
37065: PUSH
37066: EMPTY
37067: LIST
37068: LIST
37069: PUSH
37070: LD_INT 1
37072: PUSH
37073: LD_INT 2
37075: PUSH
37076: EMPTY
37077: LIST
37078: LIST
37079: PUSH
37080: LD_INT 0
37082: PUSH
37083: LD_INT 2
37085: PUSH
37086: EMPTY
37087: LIST
37088: LIST
37089: PUSH
37090: LD_INT 1
37092: NEG
37093: PUSH
37094: LD_INT 1
37096: PUSH
37097: EMPTY
37098: LIST
37099: LIST
37100: PUSH
37101: LD_INT 2
37103: NEG
37104: PUSH
37105: LD_INT 1
37107: NEG
37108: PUSH
37109: EMPTY
37110: LIST
37111: LIST
37112: PUSH
37113: LD_INT 2
37115: NEG
37116: PUSH
37117: LD_INT 2
37119: NEG
37120: PUSH
37121: EMPTY
37122: LIST
37123: LIST
37124: PUSH
37125: LD_INT 2
37127: NEG
37128: PUSH
37129: LD_INT 3
37131: NEG
37132: PUSH
37133: EMPTY
37134: LIST
37135: LIST
37136: PUSH
37137: LD_INT 1
37139: NEG
37140: PUSH
37141: LD_INT 3
37143: NEG
37144: PUSH
37145: EMPTY
37146: LIST
37147: LIST
37148: PUSH
37149: LD_INT 0
37151: PUSH
37152: LD_INT 3
37154: NEG
37155: PUSH
37156: EMPTY
37157: LIST
37158: LIST
37159: PUSH
37160: LD_INT 1
37162: PUSH
37163: LD_INT 2
37165: NEG
37166: PUSH
37167: EMPTY
37168: LIST
37169: LIST
37170: PUSH
37171: LD_INT 3
37173: PUSH
37174: LD_INT 2
37176: PUSH
37177: EMPTY
37178: LIST
37179: LIST
37180: PUSH
37181: LD_INT 3
37183: PUSH
37184: LD_INT 3
37186: PUSH
37187: EMPTY
37188: LIST
37189: LIST
37190: PUSH
37191: LD_INT 2
37193: PUSH
37194: LD_INT 3
37196: PUSH
37197: EMPTY
37198: LIST
37199: LIST
37200: PUSH
37201: LD_INT 1
37203: PUSH
37204: LD_INT 3
37206: PUSH
37207: EMPTY
37208: LIST
37209: LIST
37210: PUSH
37211: LD_INT 0
37213: PUSH
37214: LD_INT 3
37216: PUSH
37217: EMPTY
37218: LIST
37219: LIST
37220: PUSH
37221: LD_INT 1
37223: NEG
37224: PUSH
37225: LD_INT 2
37227: PUSH
37228: EMPTY
37229: LIST
37230: LIST
37231: PUSH
37232: LD_INT 3
37234: NEG
37235: PUSH
37236: LD_INT 2
37238: NEG
37239: PUSH
37240: EMPTY
37241: LIST
37242: LIST
37243: PUSH
37244: LD_INT 3
37246: NEG
37247: PUSH
37248: LD_INT 3
37250: NEG
37251: PUSH
37252: EMPTY
37253: LIST
37254: LIST
37255: PUSH
37256: EMPTY
37257: LIST
37258: LIST
37259: LIST
37260: LIST
37261: LIST
37262: LIST
37263: LIST
37264: LIST
37265: LIST
37266: LIST
37267: LIST
37268: LIST
37269: LIST
37270: LIST
37271: LIST
37272: LIST
37273: LIST
37274: LIST
37275: LIST
37276: LIST
37277: LIST
37278: LIST
37279: LIST
37280: LIST
37281: LIST
37282: LIST
37283: LIST
37284: LIST
37285: LIST
37286: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37287: LD_ADDR_VAR 0 43
37291: PUSH
37292: LD_INT 0
37294: PUSH
37295: LD_INT 0
37297: PUSH
37298: EMPTY
37299: LIST
37300: LIST
37301: PUSH
37302: LD_INT 0
37304: PUSH
37305: LD_INT 1
37307: NEG
37308: PUSH
37309: EMPTY
37310: LIST
37311: LIST
37312: PUSH
37313: LD_INT 1
37315: PUSH
37316: LD_INT 0
37318: PUSH
37319: EMPTY
37320: LIST
37321: LIST
37322: PUSH
37323: LD_INT 1
37325: PUSH
37326: LD_INT 1
37328: PUSH
37329: EMPTY
37330: LIST
37331: LIST
37332: PUSH
37333: LD_INT 0
37335: PUSH
37336: LD_INT 1
37338: PUSH
37339: EMPTY
37340: LIST
37341: LIST
37342: PUSH
37343: LD_INT 1
37345: NEG
37346: PUSH
37347: LD_INT 0
37349: PUSH
37350: EMPTY
37351: LIST
37352: LIST
37353: PUSH
37354: LD_INT 1
37356: NEG
37357: PUSH
37358: LD_INT 1
37360: NEG
37361: PUSH
37362: EMPTY
37363: LIST
37364: LIST
37365: PUSH
37366: LD_INT 1
37368: NEG
37369: PUSH
37370: LD_INT 2
37372: NEG
37373: PUSH
37374: EMPTY
37375: LIST
37376: LIST
37377: PUSH
37378: LD_INT 0
37380: PUSH
37381: LD_INT 2
37383: NEG
37384: PUSH
37385: EMPTY
37386: LIST
37387: LIST
37388: PUSH
37389: LD_INT 1
37391: PUSH
37392: LD_INT 1
37394: NEG
37395: PUSH
37396: EMPTY
37397: LIST
37398: LIST
37399: PUSH
37400: LD_INT 2
37402: PUSH
37403: LD_INT 0
37405: PUSH
37406: EMPTY
37407: LIST
37408: LIST
37409: PUSH
37410: LD_INT 2
37412: PUSH
37413: LD_INT 1
37415: PUSH
37416: EMPTY
37417: LIST
37418: LIST
37419: PUSH
37420: LD_INT 1
37422: PUSH
37423: LD_INT 2
37425: PUSH
37426: EMPTY
37427: LIST
37428: LIST
37429: PUSH
37430: LD_INT 0
37432: PUSH
37433: LD_INT 2
37435: PUSH
37436: EMPTY
37437: LIST
37438: LIST
37439: PUSH
37440: LD_INT 1
37442: NEG
37443: PUSH
37444: LD_INT 1
37446: PUSH
37447: EMPTY
37448: LIST
37449: LIST
37450: PUSH
37451: LD_INT 2
37453: NEG
37454: PUSH
37455: LD_INT 0
37457: PUSH
37458: EMPTY
37459: LIST
37460: LIST
37461: PUSH
37462: LD_INT 2
37464: NEG
37465: PUSH
37466: LD_INT 1
37468: NEG
37469: PUSH
37470: EMPTY
37471: LIST
37472: LIST
37473: PUSH
37474: LD_INT 1
37476: NEG
37477: PUSH
37478: LD_INT 3
37480: NEG
37481: PUSH
37482: EMPTY
37483: LIST
37484: LIST
37485: PUSH
37486: LD_INT 0
37488: PUSH
37489: LD_INT 3
37491: NEG
37492: PUSH
37493: EMPTY
37494: LIST
37495: LIST
37496: PUSH
37497: LD_INT 1
37499: PUSH
37500: LD_INT 2
37502: NEG
37503: PUSH
37504: EMPTY
37505: LIST
37506: LIST
37507: PUSH
37508: LD_INT 2
37510: PUSH
37511: LD_INT 1
37513: NEG
37514: PUSH
37515: EMPTY
37516: LIST
37517: LIST
37518: PUSH
37519: LD_INT 3
37521: PUSH
37522: LD_INT 0
37524: PUSH
37525: EMPTY
37526: LIST
37527: LIST
37528: PUSH
37529: LD_INT 3
37531: PUSH
37532: LD_INT 1
37534: PUSH
37535: EMPTY
37536: LIST
37537: LIST
37538: PUSH
37539: LD_INT 1
37541: PUSH
37542: LD_INT 3
37544: PUSH
37545: EMPTY
37546: LIST
37547: LIST
37548: PUSH
37549: LD_INT 0
37551: PUSH
37552: LD_INT 3
37554: PUSH
37555: EMPTY
37556: LIST
37557: LIST
37558: PUSH
37559: LD_INT 1
37561: NEG
37562: PUSH
37563: LD_INT 2
37565: PUSH
37566: EMPTY
37567: LIST
37568: LIST
37569: PUSH
37570: LD_INT 2
37572: NEG
37573: PUSH
37574: LD_INT 1
37576: PUSH
37577: EMPTY
37578: LIST
37579: LIST
37580: PUSH
37581: LD_INT 3
37583: NEG
37584: PUSH
37585: LD_INT 0
37587: PUSH
37588: EMPTY
37589: LIST
37590: LIST
37591: PUSH
37592: LD_INT 3
37594: NEG
37595: PUSH
37596: LD_INT 1
37598: NEG
37599: PUSH
37600: EMPTY
37601: LIST
37602: LIST
37603: PUSH
37604: EMPTY
37605: LIST
37606: LIST
37607: LIST
37608: LIST
37609: LIST
37610: LIST
37611: LIST
37612: LIST
37613: LIST
37614: LIST
37615: LIST
37616: LIST
37617: LIST
37618: LIST
37619: LIST
37620: LIST
37621: LIST
37622: LIST
37623: LIST
37624: LIST
37625: LIST
37626: LIST
37627: LIST
37628: LIST
37629: LIST
37630: LIST
37631: LIST
37632: LIST
37633: LIST
37634: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37635: LD_ADDR_VAR 0 44
37639: PUSH
37640: LD_INT 0
37642: PUSH
37643: LD_INT 0
37645: PUSH
37646: EMPTY
37647: LIST
37648: LIST
37649: PUSH
37650: LD_INT 0
37652: PUSH
37653: LD_INT 1
37655: NEG
37656: PUSH
37657: EMPTY
37658: LIST
37659: LIST
37660: PUSH
37661: LD_INT 1
37663: PUSH
37664: LD_INT 0
37666: PUSH
37667: EMPTY
37668: LIST
37669: LIST
37670: PUSH
37671: LD_INT 1
37673: PUSH
37674: LD_INT 1
37676: PUSH
37677: EMPTY
37678: LIST
37679: LIST
37680: PUSH
37681: LD_INT 0
37683: PUSH
37684: LD_INT 1
37686: PUSH
37687: EMPTY
37688: LIST
37689: LIST
37690: PUSH
37691: LD_INT 1
37693: NEG
37694: PUSH
37695: LD_INT 0
37697: PUSH
37698: EMPTY
37699: LIST
37700: LIST
37701: PUSH
37702: LD_INT 1
37704: NEG
37705: PUSH
37706: LD_INT 1
37708: NEG
37709: PUSH
37710: EMPTY
37711: LIST
37712: LIST
37713: PUSH
37714: LD_INT 1
37716: NEG
37717: PUSH
37718: LD_INT 2
37720: NEG
37721: PUSH
37722: EMPTY
37723: LIST
37724: LIST
37725: PUSH
37726: LD_INT 1
37728: PUSH
37729: LD_INT 1
37731: NEG
37732: PUSH
37733: EMPTY
37734: LIST
37735: LIST
37736: PUSH
37737: LD_INT 2
37739: PUSH
37740: LD_INT 0
37742: PUSH
37743: EMPTY
37744: LIST
37745: LIST
37746: PUSH
37747: LD_INT 2
37749: PUSH
37750: LD_INT 1
37752: PUSH
37753: EMPTY
37754: LIST
37755: LIST
37756: PUSH
37757: LD_INT 2
37759: PUSH
37760: LD_INT 2
37762: PUSH
37763: EMPTY
37764: LIST
37765: LIST
37766: PUSH
37767: LD_INT 1
37769: PUSH
37770: LD_INT 2
37772: PUSH
37773: EMPTY
37774: LIST
37775: LIST
37776: PUSH
37777: LD_INT 1
37779: NEG
37780: PUSH
37781: LD_INT 1
37783: PUSH
37784: EMPTY
37785: LIST
37786: LIST
37787: PUSH
37788: LD_INT 2
37790: NEG
37791: PUSH
37792: LD_INT 0
37794: PUSH
37795: EMPTY
37796: LIST
37797: LIST
37798: PUSH
37799: LD_INT 2
37801: NEG
37802: PUSH
37803: LD_INT 1
37805: NEG
37806: PUSH
37807: EMPTY
37808: LIST
37809: LIST
37810: PUSH
37811: LD_INT 2
37813: NEG
37814: PUSH
37815: LD_INT 2
37817: NEG
37818: PUSH
37819: EMPTY
37820: LIST
37821: LIST
37822: PUSH
37823: LD_INT 2
37825: NEG
37826: PUSH
37827: LD_INT 3
37829: NEG
37830: PUSH
37831: EMPTY
37832: LIST
37833: LIST
37834: PUSH
37835: LD_INT 2
37837: PUSH
37838: LD_INT 1
37840: NEG
37841: PUSH
37842: EMPTY
37843: LIST
37844: LIST
37845: PUSH
37846: LD_INT 3
37848: PUSH
37849: LD_INT 0
37851: PUSH
37852: EMPTY
37853: LIST
37854: LIST
37855: PUSH
37856: LD_INT 3
37858: PUSH
37859: LD_INT 1
37861: PUSH
37862: EMPTY
37863: LIST
37864: LIST
37865: PUSH
37866: LD_INT 3
37868: PUSH
37869: LD_INT 2
37871: PUSH
37872: EMPTY
37873: LIST
37874: LIST
37875: PUSH
37876: LD_INT 3
37878: PUSH
37879: LD_INT 3
37881: PUSH
37882: EMPTY
37883: LIST
37884: LIST
37885: PUSH
37886: LD_INT 2
37888: PUSH
37889: LD_INT 3
37891: PUSH
37892: EMPTY
37893: LIST
37894: LIST
37895: PUSH
37896: LD_INT 2
37898: NEG
37899: PUSH
37900: LD_INT 1
37902: PUSH
37903: EMPTY
37904: LIST
37905: LIST
37906: PUSH
37907: LD_INT 3
37909: NEG
37910: PUSH
37911: LD_INT 0
37913: PUSH
37914: EMPTY
37915: LIST
37916: LIST
37917: PUSH
37918: LD_INT 3
37920: NEG
37921: PUSH
37922: LD_INT 1
37924: NEG
37925: PUSH
37926: EMPTY
37927: LIST
37928: LIST
37929: PUSH
37930: LD_INT 3
37932: NEG
37933: PUSH
37934: LD_INT 2
37936: NEG
37937: PUSH
37938: EMPTY
37939: LIST
37940: LIST
37941: PUSH
37942: LD_INT 3
37944: NEG
37945: PUSH
37946: LD_INT 3
37948: NEG
37949: PUSH
37950: EMPTY
37951: LIST
37952: LIST
37953: PUSH
37954: EMPTY
37955: LIST
37956: LIST
37957: LIST
37958: LIST
37959: LIST
37960: LIST
37961: LIST
37962: LIST
37963: LIST
37964: LIST
37965: LIST
37966: LIST
37967: LIST
37968: LIST
37969: LIST
37970: LIST
37971: LIST
37972: LIST
37973: LIST
37974: LIST
37975: LIST
37976: LIST
37977: LIST
37978: LIST
37979: LIST
37980: LIST
37981: LIST
37982: LIST
37983: LIST
37984: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37985: LD_ADDR_VAR 0 45
37989: PUSH
37990: LD_INT 0
37992: PUSH
37993: LD_INT 0
37995: PUSH
37996: EMPTY
37997: LIST
37998: LIST
37999: PUSH
38000: LD_INT 0
38002: PUSH
38003: LD_INT 1
38005: NEG
38006: PUSH
38007: EMPTY
38008: LIST
38009: LIST
38010: PUSH
38011: LD_INT 1
38013: PUSH
38014: LD_INT 0
38016: PUSH
38017: EMPTY
38018: LIST
38019: LIST
38020: PUSH
38021: LD_INT 1
38023: PUSH
38024: LD_INT 1
38026: PUSH
38027: EMPTY
38028: LIST
38029: LIST
38030: PUSH
38031: LD_INT 0
38033: PUSH
38034: LD_INT 1
38036: PUSH
38037: EMPTY
38038: LIST
38039: LIST
38040: PUSH
38041: LD_INT 1
38043: NEG
38044: PUSH
38045: LD_INT 0
38047: PUSH
38048: EMPTY
38049: LIST
38050: LIST
38051: PUSH
38052: LD_INT 1
38054: NEG
38055: PUSH
38056: LD_INT 1
38058: NEG
38059: PUSH
38060: EMPTY
38061: LIST
38062: LIST
38063: PUSH
38064: LD_INT 1
38066: NEG
38067: PUSH
38068: LD_INT 2
38070: NEG
38071: PUSH
38072: EMPTY
38073: LIST
38074: LIST
38075: PUSH
38076: LD_INT 0
38078: PUSH
38079: LD_INT 2
38081: NEG
38082: PUSH
38083: EMPTY
38084: LIST
38085: LIST
38086: PUSH
38087: LD_INT 1
38089: PUSH
38090: LD_INT 1
38092: NEG
38093: PUSH
38094: EMPTY
38095: LIST
38096: LIST
38097: PUSH
38098: LD_INT 2
38100: PUSH
38101: LD_INT 1
38103: PUSH
38104: EMPTY
38105: LIST
38106: LIST
38107: PUSH
38108: LD_INT 2
38110: PUSH
38111: LD_INT 2
38113: PUSH
38114: EMPTY
38115: LIST
38116: LIST
38117: PUSH
38118: LD_INT 1
38120: PUSH
38121: LD_INT 2
38123: PUSH
38124: EMPTY
38125: LIST
38126: LIST
38127: PUSH
38128: LD_INT 0
38130: PUSH
38131: LD_INT 2
38133: PUSH
38134: EMPTY
38135: LIST
38136: LIST
38137: PUSH
38138: LD_INT 1
38140: NEG
38141: PUSH
38142: LD_INT 1
38144: PUSH
38145: EMPTY
38146: LIST
38147: LIST
38148: PUSH
38149: LD_INT 2
38151: NEG
38152: PUSH
38153: LD_INT 1
38155: NEG
38156: PUSH
38157: EMPTY
38158: LIST
38159: LIST
38160: PUSH
38161: LD_INT 2
38163: NEG
38164: PUSH
38165: LD_INT 2
38167: NEG
38168: PUSH
38169: EMPTY
38170: LIST
38171: LIST
38172: PUSH
38173: LD_INT 2
38175: NEG
38176: PUSH
38177: LD_INT 3
38179: NEG
38180: PUSH
38181: EMPTY
38182: LIST
38183: LIST
38184: PUSH
38185: LD_INT 1
38187: NEG
38188: PUSH
38189: LD_INT 3
38191: NEG
38192: PUSH
38193: EMPTY
38194: LIST
38195: LIST
38196: PUSH
38197: LD_INT 0
38199: PUSH
38200: LD_INT 3
38202: NEG
38203: PUSH
38204: EMPTY
38205: LIST
38206: LIST
38207: PUSH
38208: LD_INT 1
38210: PUSH
38211: LD_INT 2
38213: NEG
38214: PUSH
38215: EMPTY
38216: LIST
38217: LIST
38218: PUSH
38219: LD_INT 3
38221: PUSH
38222: LD_INT 2
38224: PUSH
38225: EMPTY
38226: LIST
38227: LIST
38228: PUSH
38229: LD_INT 3
38231: PUSH
38232: LD_INT 3
38234: PUSH
38235: EMPTY
38236: LIST
38237: LIST
38238: PUSH
38239: LD_INT 2
38241: PUSH
38242: LD_INT 3
38244: PUSH
38245: EMPTY
38246: LIST
38247: LIST
38248: PUSH
38249: LD_INT 1
38251: PUSH
38252: LD_INT 3
38254: PUSH
38255: EMPTY
38256: LIST
38257: LIST
38258: PUSH
38259: LD_INT 0
38261: PUSH
38262: LD_INT 3
38264: PUSH
38265: EMPTY
38266: LIST
38267: LIST
38268: PUSH
38269: LD_INT 1
38271: NEG
38272: PUSH
38273: LD_INT 2
38275: PUSH
38276: EMPTY
38277: LIST
38278: LIST
38279: PUSH
38280: LD_INT 3
38282: NEG
38283: PUSH
38284: LD_INT 2
38286: NEG
38287: PUSH
38288: EMPTY
38289: LIST
38290: LIST
38291: PUSH
38292: LD_INT 3
38294: NEG
38295: PUSH
38296: LD_INT 3
38298: NEG
38299: PUSH
38300: EMPTY
38301: LIST
38302: LIST
38303: PUSH
38304: EMPTY
38305: LIST
38306: LIST
38307: LIST
38308: LIST
38309: LIST
38310: LIST
38311: LIST
38312: LIST
38313: LIST
38314: LIST
38315: LIST
38316: LIST
38317: LIST
38318: LIST
38319: LIST
38320: LIST
38321: LIST
38322: LIST
38323: LIST
38324: LIST
38325: LIST
38326: LIST
38327: LIST
38328: LIST
38329: LIST
38330: LIST
38331: LIST
38332: LIST
38333: LIST
38334: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38335: LD_ADDR_VAR 0 46
38339: PUSH
38340: LD_INT 0
38342: PUSH
38343: LD_INT 0
38345: PUSH
38346: EMPTY
38347: LIST
38348: LIST
38349: PUSH
38350: LD_INT 0
38352: PUSH
38353: LD_INT 1
38355: NEG
38356: PUSH
38357: EMPTY
38358: LIST
38359: LIST
38360: PUSH
38361: LD_INT 1
38363: PUSH
38364: LD_INT 0
38366: PUSH
38367: EMPTY
38368: LIST
38369: LIST
38370: PUSH
38371: LD_INT 1
38373: PUSH
38374: LD_INT 1
38376: PUSH
38377: EMPTY
38378: LIST
38379: LIST
38380: PUSH
38381: LD_INT 0
38383: PUSH
38384: LD_INT 1
38386: PUSH
38387: EMPTY
38388: LIST
38389: LIST
38390: PUSH
38391: LD_INT 1
38393: NEG
38394: PUSH
38395: LD_INT 0
38397: PUSH
38398: EMPTY
38399: LIST
38400: LIST
38401: PUSH
38402: LD_INT 1
38404: NEG
38405: PUSH
38406: LD_INT 1
38408: NEG
38409: PUSH
38410: EMPTY
38411: LIST
38412: LIST
38413: PUSH
38414: LD_INT 1
38416: NEG
38417: PUSH
38418: LD_INT 2
38420: NEG
38421: PUSH
38422: EMPTY
38423: LIST
38424: LIST
38425: PUSH
38426: LD_INT 0
38428: PUSH
38429: LD_INT 2
38431: NEG
38432: PUSH
38433: EMPTY
38434: LIST
38435: LIST
38436: PUSH
38437: LD_INT 1
38439: PUSH
38440: LD_INT 1
38442: NEG
38443: PUSH
38444: EMPTY
38445: LIST
38446: LIST
38447: PUSH
38448: LD_INT 2
38450: PUSH
38451: LD_INT 0
38453: PUSH
38454: EMPTY
38455: LIST
38456: LIST
38457: PUSH
38458: LD_INT 2
38460: PUSH
38461: LD_INT 1
38463: PUSH
38464: EMPTY
38465: LIST
38466: LIST
38467: PUSH
38468: LD_INT 1
38470: PUSH
38471: LD_INT 2
38473: PUSH
38474: EMPTY
38475: LIST
38476: LIST
38477: PUSH
38478: LD_INT 0
38480: PUSH
38481: LD_INT 2
38483: PUSH
38484: EMPTY
38485: LIST
38486: LIST
38487: PUSH
38488: LD_INT 1
38490: NEG
38491: PUSH
38492: LD_INT 1
38494: PUSH
38495: EMPTY
38496: LIST
38497: LIST
38498: PUSH
38499: LD_INT 2
38501: NEG
38502: PUSH
38503: LD_INT 0
38505: PUSH
38506: EMPTY
38507: LIST
38508: LIST
38509: PUSH
38510: LD_INT 2
38512: NEG
38513: PUSH
38514: LD_INT 1
38516: NEG
38517: PUSH
38518: EMPTY
38519: LIST
38520: LIST
38521: PUSH
38522: LD_INT 1
38524: NEG
38525: PUSH
38526: LD_INT 3
38528: NEG
38529: PUSH
38530: EMPTY
38531: LIST
38532: LIST
38533: PUSH
38534: LD_INT 0
38536: PUSH
38537: LD_INT 3
38539: NEG
38540: PUSH
38541: EMPTY
38542: LIST
38543: LIST
38544: PUSH
38545: LD_INT 1
38547: PUSH
38548: LD_INT 2
38550: NEG
38551: PUSH
38552: EMPTY
38553: LIST
38554: LIST
38555: PUSH
38556: LD_INT 2
38558: PUSH
38559: LD_INT 1
38561: NEG
38562: PUSH
38563: EMPTY
38564: LIST
38565: LIST
38566: PUSH
38567: LD_INT 3
38569: PUSH
38570: LD_INT 0
38572: PUSH
38573: EMPTY
38574: LIST
38575: LIST
38576: PUSH
38577: LD_INT 3
38579: PUSH
38580: LD_INT 1
38582: PUSH
38583: EMPTY
38584: LIST
38585: LIST
38586: PUSH
38587: LD_INT 1
38589: PUSH
38590: LD_INT 3
38592: PUSH
38593: EMPTY
38594: LIST
38595: LIST
38596: PUSH
38597: LD_INT 0
38599: PUSH
38600: LD_INT 3
38602: PUSH
38603: EMPTY
38604: LIST
38605: LIST
38606: PUSH
38607: LD_INT 1
38609: NEG
38610: PUSH
38611: LD_INT 2
38613: PUSH
38614: EMPTY
38615: LIST
38616: LIST
38617: PUSH
38618: LD_INT 2
38620: NEG
38621: PUSH
38622: LD_INT 1
38624: PUSH
38625: EMPTY
38626: LIST
38627: LIST
38628: PUSH
38629: LD_INT 3
38631: NEG
38632: PUSH
38633: LD_INT 0
38635: PUSH
38636: EMPTY
38637: LIST
38638: LIST
38639: PUSH
38640: LD_INT 3
38642: NEG
38643: PUSH
38644: LD_INT 1
38646: NEG
38647: PUSH
38648: EMPTY
38649: LIST
38650: LIST
38651: PUSH
38652: EMPTY
38653: LIST
38654: LIST
38655: LIST
38656: LIST
38657: LIST
38658: LIST
38659: LIST
38660: LIST
38661: LIST
38662: LIST
38663: LIST
38664: LIST
38665: LIST
38666: LIST
38667: LIST
38668: LIST
38669: LIST
38670: LIST
38671: LIST
38672: LIST
38673: LIST
38674: LIST
38675: LIST
38676: LIST
38677: LIST
38678: LIST
38679: LIST
38680: LIST
38681: LIST
38682: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38683: LD_ADDR_VAR 0 47
38687: PUSH
38688: LD_INT 0
38690: PUSH
38691: LD_INT 0
38693: PUSH
38694: EMPTY
38695: LIST
38696: LIST
38697: PUSH
38698: LD_INT 0
38700: PUSH
38701: LD_INT 1
38703: NEG
38704: PUSH
38705: EMPTY
38706: LIST
38707: LIST
38708: PUSH
38709: LD_INT 1
38711: PUSH
38712: LD_INT 0
38714: PUSH
38715: EMPTY
38716: LIST
38717: LIST
38718: PUSH
38719: LD_INT 1
38721: PUSH
38722: LD_INT 1
38724: PUSH
38725: EMPTY
38726: LIST
38727: LIST
38728: PUSH
38729: LD_INT 0
38731: PUSH
38732: LD_INT 1
38734: PUSH
38735: EMPTY
38736: LIST
38737: LIST
38738: PUSH
38739: LD_INT 1
38741: NEG
38742: PUSH
38743: LD_INT 0
38745: PUSH
38746: EMPTY
38747: LIST
38748: LIST
38749: PUSH
38750: LD_INT 1
38752: NEG
38753: PUSH
38754: LD_INT 1
38756: NEG
38757: PUSH
38758: EMPTY
38759: LIST
38760: LIST
38761: PUSH
38762: LD_INT 1
38764: NEG
38765: PUSH
38766: LD_INT 2
38768: NEG
38769: PUSH
38770: EMPTY
38771: LIST
38772: LIST
38773: PUSH
38774: LD_INT 0
38776: PUSH
38777: LD_INT 2
38779: NEG
38780: PUSH
38781: EMPTY
38782: LIST
38783: LIST
38784: PUSH
38785: LD_INT 1
38787: PUSH
38788: LD_INT 1
38790: NEG
38791: PUSH
38792: EMPTY
38793: LIST
38794: LIST
38795: PUSH
38796: LD_INT 2
38798: NEG
38799: PUSH
38800: LD_INT 1
38802: NEG
38803: PUSH
38804: EMPTY
38805: LIST
38806: LIST
38807: PUSH
38808: LD_INT 2
38810: NEG
38811: PUSH
38812: LD_INT 2
38814: NEG
38815: PUSH
38816: EMPTY
38817: LIST
38818: LIST
38819: PUSH
38820: EMPTY
38821: LIST
38822: LIST
38823: LIST
38824: LIST
38825: LIST
38826: LIST
38827: LIST
38828: LIST
38829: LIST
38830: LIST
38831: LIST
38832: LIST
38833: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
38834: LD_ADDR_VAR 0 48
38838: PUSH
38839: LD_INT 0
38841: PUSH
38842: LD_INT 0
38844: PUSH
38845: EMPTY
38846: LIST
38847: LIST
38848: PUSH
38849: LD_INT 0
38851: PUSH
38852: LD_INT 1
38854: NEG
38855: PUSH
38856: EMPTY
38857: LIST
38858: LIST
38859: PUSH
38860: LD_INT 1
38862: PUSH
38863: LD_INT 0
38865: PUSH
38866: EMPTY
38867: LIST
38868: LIST
38869: PUSH
38870: LD_INT 1
38872: PUSH
38873: LD_INT 1
38875: PUSH
38876: EMPTY
38877: LIST
38878: LIST
38879: PUSH
38880: LD_INT 0
38882: PUSH
38883: LD_INT 1
38885: PUSH
38886: EMPTY
38887: LIST
38888: LIST
38889: PUSH
38890: LD_INT 1
38892: NEG
38893: PUSH
38894: LD_INT 0
38896: PUSH
38897: EMPTY
38898: LIST
38899: LIST
38900: PUSH
38901: LD_INT 1
38903: NEG
38904: PUSH
38905: LD_INT 1
38907: NEG
38908: PUSH
38909: EMPTY
38910: LIST
38911: LIST
38912: PUSH
38913: LD_INT 1
38915: NEG
38916: PUSH
38917: LD_INT 2
38919: NEG
38920: PUSH
38921: EMPTY
38922: LIST
38923: LIST
38924: PUSH
38925: LD_INT 0
38927: PUSH
38928: LD_INT 2
38930: NEG
38931: PUSH
38932: EMPTY
38933: LIST
38934: LIST
38935: PUSH
38936: LD_INT 1
38938: PUSH
38939: LD_INT 1
38941: NEG
38942: PUSH
38943: EMPTY
38944: LIST
38945: LIST
38946: PUSH
38947: LD_INT 2
38949: PUSH
38950: LD_INT 0
38952: PUSH
38953: EMPTY
38954: LIST
38955: LIST
38956: PUSH
38957: LD_INT 2
38959: PUSH
38960: LD_INT 1
38962: PUSH
38963: EMPTY
38964: LIST
38965: LIST
38966: PUSH
38967: EMPTY
38968: LIST
38969: LIST
38970: LIST
38971: LIST
38972: LIST
38973: LIST
38974: LIST
38975: LIST
38976: LIST
38977: LIST
38978: LIST
38979: LIST
38980: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
38981: LD_ADDR_VAR 0 49
38985: PUSH
38986: LD_INT 0
38988: PUSH
38989: LD_INT 0
38991: PUSH
38992: EMPTY
38993: LIST
38994: LIST
38995: PUSH
38996: LD_INT 0
38998: PUSH
38999: LD_INT 1
39001: NEG
39002: PUSH
39003: EMPTY
39004: LIST
39005: LIST
39006: PUSH
39007: LD_INT 1
39009: PUSH
39010: LD_INT 0
39012: PUSH
39013: EMPTY
39014: LIST
39015: LIST
39016: PUSH
39017: LD_INT 1
39019: PUSH
39020: LD_INT 1
39022: PUSH
39023: EMPTY
39024: LIST
39025: LIST
39026: PUSH
39027: LD_INT 0
39029: PUSH
39030: LD_INT 1
39032: PUSH
39033: EMPTY
39034: LIST
39035: LIST
39036: PUSH
39037: LD_INT 1
39039: NEG
39040: PUSH
39041: LD_INT 0
39043: PUSH
39044: EMPTY
39045: LIST
39046: LIST
39047: PUSH
39048: LD_INT 1
39050: NEG
39051: PUSH
39052: LD_INT 1
39054: NEG
39055: PUSH
39056: EMPTY
39057: LIST
39058: LIST
39059: PUSH
39060: LD_INT 1
39062: PUSH
39063: LD_INT 1
39065: NEG
39066: PUSH
39067: EMPTY
39068: LIST
39069: LIST
39070: PUSH
39071: LD_INT 2
39073: PUSH
39074: LD_INT 0
39076: PUSH
39077: EMPTY
39078: LIST
39079: LIST
39080: PUSH
39081: LD_INT 2
39083: PUSH
39084: LD_INT 1
39086: PUSH
39087: EMPTY
39088: LIST
39089: LIST
39090: PUSH
39091: LD_INT 2
39093: PUSH
39094: LD_INT 2
39096: PUSH
39097: EMPTY
39098: LIST
39099: LIST
39100: PUSH
39101: LD_INT 1
39103: PUSH
39104: LD_INT 2
39106: PUSH
39107: EMPTY
39108: LIST
39109: LIST
39110: PUSH
39111: EMPTY
39112: LIST
39113: LIST
39114: LIST
39115: LIST
39116: LIST
39117: LIST
39118: LIST
39119: LIST
39120: LIST
39121: LIST
39122: LIST
39123: LIST
39124: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
39125: LD_ADDR_VAR 0 50
39129: PUSH
39130: LD_INT 0
39132: PUSH
39133: LD_INT 0
39135: PUSH
39136: EMPTY
39137: LIST
39138: LIST
39139: PUSH
39140: LD_INT 0
39142: PUSH
39143: LD_INT 1
39145: NEG
39146: PUSH
39147: EMPTY
39148: LIST
39149: LIST
39150: PUSH
39151: LD_INT 1
39153: PUSH
39154: LD_INT 0
39156: PUSH
39157: EMPTY
39158: LIST
39159: LIST
39160: PUSH
39161: LD_INT 1
39163: PUSH
39164: LD_INT 1
39166: PUSH
39167: EMPTY
39168: LIST
39169: LIST
39170: PUSH
39171: LD_INT 0
39173: PUSH
39174: LD_INT 1
39176: PUSH
39177: EMPTY
39178: LIST
39179: LIST
39180: PUSH
39181: LD_INT 1
39183: NEG
39184: PUSH
39185: LD_INT 0
39187: PUSH
39188: EMPTY
39189: LIST
39190: LIST
39191: PUSH
39192: LD_INT 1
39194: NEG
39195: PUSH
39196: LD_INT 1
39198: NEG
39199: PUSH
39200: EMPTY
39201: LIST
39202: LIST
39203: PUSH
39204: LD_INT 2
39206: PUSH
39207: LD_INT 1
39209: PUSH
39210: EMPTY
39211: LIST
39212: LIST
39213: PUSH
39214: LD_INT 2
39216: PUSH
39217: LD_INT 2
39219: PUSH
39220: EMPTY
39221: LIST
39222: LIST
39223: PUSH
39224: LD_INT 1
39226: PUSH
39227: LD_INT 2
39229: PUSH
39230: EMPTY
39231: LIST
39232: LIST
39233: PUSH
39234: LD_INT 0
39236: PUSH
39237: LD_INT 2
39239: PUSH
39240: EMPTY
39241: LIST
39242: LIST
39243: PUSH
39244: LD_INT 1
39246: NEG
39247: PUSH
39248: LD_INT 1
39250: PUSH
39251: EMPTY
39252: LIST
39253: LIST
39254: PUSH
39255: EMPTY
39256: LIST
39257: LIST
39258: LIST
39259: LIST
39260: LIST
39261: LIST
39262: LIST
39263: LIST
39264: LIST
39265: LIST
39266: LIST
39267: LIST
39268: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
39269: LD_ADDR_VAR 0 51
39273: PUSH
39274: LD_INT 0
39276: PUSH
39277: LD_INT 0
39279: PUSH
39280: EMPTY
39281: LIST
39282: LIST
39283: PUSH
39284: LD_INT 0
39286: PUSH
39287: LD_INT 1
39289: NEG
39290: PUSH
39291: EMPTY
39292: LIST
39293: LIST
39294: PUSH
39295: LD_INT 1
39297: PUSH
39298: LD_INT 0
39300: PUSH
39301: EMPTY
39302: LIST
39303: LIST
39304: PUSH
39305: LD_INT 1
39307: PUSH
39308: LD_INT 1
39310: PUSH
39311: EMPTY
39312: LIST
39313: LIST
39314: PUSH
39315: LD_INT 0
39317: PUSH
39318: LD_INT 1
39320: PUSH
39321: EMPTY
39322: LIST
39323: LIST
39324: PUSH
39325: LD_INT 1
39327: NEG
39328: PUSH
39329: LD_INT 0
39331: PUSH
39332: EMPTY
39333: LIST
39334: LIST
39335: PUSH
39336: LD_INT 1
39338: NEG
39339: PUSH
39340: LD_INT 1
39342: NEG
39343: PUSH
39344: EMPTY
39345: LIST
39346: LIST
39347: PUSH
39348: LD_INT 1
39350: PUSH
39351: LD_INT 2
39353: PUSH
39354: EMPTY
39355: LIST
39356: LIST
39357: PUSH
39358: LD_INT 0
39360: PUSH
39361: LD_INT 2
39363: PUSH
39364: EMPTY
39365: LIST
39366: LIST
39367: PUSH
39368: LD_INT 1
39370: NEG
39371: PUSH
39372: LD_INT 1
39374: PUSH
39375: EMPTY
39376: LIST
39377: LIST
39378: PUSH
39379: LD_INT 2
39381: NEG
39382: PUSH
39383: LD_INT 0
39385: PUSH
39386: EMPTY
39387: LIST
39388: LIST
39389: PUSH
39390: LD_INT 2
39392: NEG
39393: PUSH
39394: LD_INT 1
39396: NEG
39397: PUSH
39398: EMPTY
39399: LIST
39400: LIST
39401: PUSH
39402: EMPTY
39403: LIST
39404: LIST
39405: LIST
39406: LIST
39407: LIST
39408: LIST
39409: LIST
39410: LIST
39411: LIST
39412: LIST
39413: LIST
39414: LIST
39415: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39416: LD_ADDR_VAR 0 52
39420: PUSH
39421: LD_INT 0
39423: PUSH
39424: LD_INT 0
39426: PUSH
39427: EMPTY
39428: LIST
39429: LIST
39430: PUSH
39431: LD_INT 0
39433: PUSH
39434: LD_INT 1
39436: NEG
39437: PUSH
39438: EMPTY
39439: LIST
39440: LIST
39441: PUSH
39442: LD_INT 1
39444: PUSH
39445: LD_INT 0
39447: PUSH
39448: EMPTY
39449: LIST
39450: LIST
39451: PUSH
39452: LD_INT 1
39454: PUSH
39455: LD_INT 1
39457: PUSH
39458: EMPTY
39459: LIST
39460: LIST
39461: PUSH
39462: LD_INT 0
39464: PUSH
39465: LD_INT 1
39467: PUSH
39468: EMPTY
39469: LIST
39470: LIST
39471: PUSH
39472: LD_INT 1
39474: NEG
39475: PUSH
39476: LD_INT 0
39478: PUSH
39479: EMPTY
39480: LIST
39481: LIST
39482: PUSH
39483: LD_INT 1
39485: NEG
39486: PUSH
39487: LD_INT 1
39489: NEG
39490: PUSH
39491: EMPTY
39492: LIST
39493: LIST
39494: PUSH
39495: LD_INT 1
39497: NEG
39498: PUSH
39499: LD_INT 2
39501: NEG
39502: PUSH
39503: EMPTY
39504: LIST
39505: LIST
39506: PUSH
39507: LD_INT 1
39509: NEG
39510: PUSH
39511: LD_INT 1
39513: PUSH
39514: EMPTY
39515: LIST
39516: LIST
39517: PUSH
39518: LD_INT 2
39520: NEG
39521: PUSH
39522: LD_INT 0
39524: PUSH
39525: EMPTY
39526: LIST
39527: LIST
39528: PUSH
39529: LD_INT 2
39531: NEG
39532: PUSH
39533: LD_INT 1
39535: NEG
39536: PUSH
39537: EMPTY
39538: LIST
39539: LIST
39540: PUSH
39541: LD_INT 2
39543: NEG
39544: PUSH
39545: LD_INT 2
39547: NEG
39548: PUSH
39549: EMPTY
39550: LIST
39551: LIST
39552: PUSH
39553: EMPTY
39554: LIST
39555: LIST
39556: LIST
39557: LIST
39558: LIST
39559: LIST
39560: LIST
39561: LIST
39562: LIST
39563: LIST
39564: LIST
39565: LIST
39566: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39567: LD_ADDR_VAR 0 53
39571: PUSH
39572: LD_INT 0
39574: PUSH
39575: LD_INT 0
39577: PUSH
39578: EMPTY
39579: LIST
39580: LIST
39581: PUSH
39582: LD_INT 0
39584: PUSH
39585: LD_INT 1
39587: NEG
39588: PUSH
39589: EMPTY
39590: LIST
39591: LIST
39592: PUSH
39593: LD_INT 1
39595: PUSH
39596: LD_INT 0
39598: PUSH
39599: EMPTY
39600: LIST
39601: LIST
39602: PUSH
39603: LD_INT 1
39605: PUSH
39606: LD_INT 1
39608: PUSH
39609: EMPTY
39610: LIST
39611: LIST
39612: PUSH
39613: LD_INT 0
39615: PUSH
39616: LD_INT 1
39618: PUSH
39619: EMPTY
39620: LIST
39621: LIST
39622: PUSH
39623: LD_INT 1
39625: NEG
39626: PUSH
39627: LD_INT 0
39629: PUSH
39630: EMPTY
39631: LIST
39632: LIST
39633: PUSH
39634: LD_INT 1
39636: NEG
39637: PUSH
39638: LD_INT 1
39640: NEG
39641: PUSH
39642: EMPTY
39643: LIST
39644: LIST
39645: PUSH
39646: LD_INT 1
39648: NEG
39649: PUSH
39650: LD_INT 2
39652: NEG
39653: PUSH
39654: EMPTY
39655: LIST
39656: LIST
39657: PUSH
39658: LD_INT 0
39660: PUSH
39661: LD_INT 2
39663: NEG
39664: PUSH
39665: EMPTY
39666: LIST
39667: LIST
39668: PUSH
39669: LD_INT 1
39671: PUSH
39672: LD_INT 1
39674: NEG
39675: PUSH
39676: EMPTY
39677: LIST
39678: LIST
39679: PUSH
39680: LD_INT 2
39682: PUSH
39683: LD_INT 0
39685: PUSH
39686: EMPTY
39687: LIST
39688: LIST
39689: PUSH
39690: LD_INT 2
39692: PUSH
39693: LD_INT 1
39695: PUSH
39696: EMPTY
39697: LIST
39698: LIST
39699: PUSH
39700: LD_INT 2
39702: PUSH
39703: LD_INT 2
39705: PUSH
39706: EMPTY
39707: LIST
39708: LIST
39709: PUSH
39710: LD_INT 1
39712: PUSH
39713: LD_INT 2
39715: PUSH
39716: EMPTY
39717: LIST
39718: LIST
39719: PUSH
39720: LD_INT 0
39722: PUSH
39723: LD_INT 2
39725: PUSH
39726: EMPTY
39727: LIST
39728: LIST
39729: PUSH
39730: LD_INT 1
39732: NEG
39733: PUSH
39734: LD_INT 1
39736: PUSH
39737: EMPTY
39738: LIST
39739: LIST
39740: PUSH
39741: LD_INT 2
39743: NEG
39744: PUSH
39745: LD_INT 0
39747: PUSH
39748: EMPTY
39749: LIST
39750: LIST
39751: PUSH
39752: LD_INT 2
39754: NEG
39755: PUSH
39756: LD_INT 1
39758: NEG
39759: PUSH
39760: EMPTY
39761: LIST
39762: LIST
39763: PUSH
39764: LD_INT 2
39766: NEG
39767: PUSH
39768: LD_INT 2
39770: NEG
39771: PUSH
39772: EMPTY
39773: LIST
39774: LIST
39775: PUSH
39776: EMPTY
39777: LIST
39778: LIST
39779: LIST
39780: LIST
39781: LIST
39782: LIST
39783: LIST
39784: LIST
39785: LIST
39786: LIST
39787: LIST
39788: LIST
39789: LIST
39790: LIST
39791: LIST
39792: LIST
39793: LIST
39794: LIST
39795: LIST
39796: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39797: LD_ADDR_VAR 0 54
39801: PUSH
39802: LD_INT 0
39804: PUSH
39805: LD_INT 0
39807: PUSH
39808: EMPTY
39809: LIST
39810: LIST
39811: PUSH
39812: LD_INT 0
39814: PUSH
39815: LD_INT 1
39817: NEG
39818: PUSH
39819: EMPTY
39820: LIST
39821: LIST
39822: PUSH
39823: LD_INT 1
39825: PUSH
39826: LD_INT 0
39828: PUSH
39829: EMPTY
39830: LIST
39831: LIST
39832: PUSH
39833: LD_INT 1
39835: PUSH
39836: LD_INT 1
39838: PUSH
39839: EMPTY
39840: LIST
39841: LIST
39842: PUSH
39843: LD_INT 0
39845: PUSH
39846: LD_INT 1
39848: PUSH
39849: EMPTY
39850: LIST
39851: LIST
39852: PUSH
39853: LD_INT 1
39855: NEG
39856: PUSH
39857: LD_INT 0
39859: PUSH
39860: EMPTY
39861: LIST
39862: LIST
39863: PUSH
39864: LD_INT 1
39866: NEG
39867: PUSH
39868: LD_INT 1
39870: NEG
39871: PUSH
39872: EMPTY
39873: LIST
39874: LIST
39875: PUSH
39876: LD_INT 1
39878: NEG
39879: PUSH
39880: LD_INT 2
39882: NEG
39883: PUSH
39884: EMPTY
39885: LIST
39886: LIST
39887: PUSH
39888: LD_INT 0
39890: PUSH
39891: LD_INT 2
39893: NEG
39894: PUSH
39895: EMPTY
39896: LIST
39897: LIST
39898: PUSH
39899: LD_INT 1
39901: PUSH
39902: LD_INT 1
39904: NEG
39905: PUSH
39906: EMPTY
39907: LIST
39908: LIST
39909: PUSH
39910: LD_INT 2
39912: PUSH
39913: LD_INT 0
39915: PUSH
39916: EMPTY
39917: LIST
39918: LIST
39919: PUSH
39920: LD_INT 2
39922: PUSH
39923: LD_INT 1
39925: PUSH
39926: EMPTY
39927: LIST
39928: LIST
39929: PUSH
39930: LD_INT 2
39932: PUSH
39933: LD_INT 2
39935: PUSH
39936: EMPTY
39937: LIST
39938: LIST
39939: PUSH
39940: LD_INT 1
39942: PUSH
39943: LD_INT 2
39945: PUSH
39946: EMPTY
39947: LIST
39948: LIST
39949: PUSH
39950: LD_INT 0
39952: PUSH
39953: LD_INT 2
39955: PUSH
39956: EMPTY
39957: LIST
39958: LIST
39959: PUSH
39960: LD_INT 1
39962: NEG
39963: PUSH
39964: LD_INT 1
39966: PUSH
39967: EMPTY
39968: LIST
39969: LIST
39970: PUSH
39971: LD_INT 2
39973: NEG
39974: PUSH
39975: LD_INT 0
39977: PUSH
39978: EMPTY
39979: LIST
39980: LIST
39981: PUSH
39982: LD_INT 2
39984: NEG
39985: PUSH
39986: LD_INT 1
39988: NEG
39989: PUSH
39990: EMPTY
39991: LIST
39992: LIST
39993: PUSH
39994: LD_INT 2
39996: NEG
39997: PUSH
39998: LD_INT 2
40000: NEG
40001: PUSH
40002: EMPTY
40003: LIST
40004: LIST
40005: PUSH
40006: EMPTY
40007: LIST
40008: LIST
40009: LIST
40010: LIST
40011: LIST
40012: LIST
40013: LIST
40014: LIST
40015: LIST
40016: LIST
40017: LIST
40018: LIST
40019: LIST
40020: LIST
40021: LIST
40022: LIST
40023: LIST
40024: LIST
40025: LIST
40026: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40027: LD_ADDR_VAR 0 55
40031: PUSH
40032: LD_INT 0
40034: PUSH
40035: LD_INT 0
40037: PUSH
40038: EMPTY
40039: LIST
40040: LIST
40041: PUSH
40042: LD_INT 0
40044: PUSH
40045: LD_INT 1
40047: NEG
40048: PUSH
40049: EMPTY
40050: LIST
40051: LIST
40052: PUSH
40053: LD_INT 1
40055: PUSH
40056: LD_INT 0
40058: PUSH
40059: EMPTY
40060: LIST
40061: LIST
40062: PUSH
40063: LD_INT 1
40065: PUSH
40066: LD_INT 1
40068: PUSH
40069: EMPTY
40070: LIST
40071: LIST
40072: PUSH
40073: LD_INT 0
40075: PUSH
40076: LD_INT 1
40078: PUSH
40079: EMPTY
40080: LIST
40081: LIST
40082: PUSH
40083: LD_INT 1
40085: NEG
40086: PUSH
40087: LD_INT 0
40089: PUSH
40090: EMPTY
40091: LIST
40092: LIST
40093: PUSH
40094: LD_INT 1
40096: NEG
40097: PUSH
40098: LD_INT 1
40100: NEG
40101: PUSH
40102: EMPTY
40103: LIST
40104: LIST
40105: PUSH
40106: LD_INT 1
40108: NEG
40109: PUSH
40110: LD_INT 2
40112: NEG
40113: PUSH
40114: EMPTY
40115: LIST
40116: LIST
40117: PUSH
40118: LD_INT 0
40120: PUSH
40121: LD_INT 2
40123: NEG
40124: PUSH
40125: EMPTY
40126: LIST
40127: LIST
40128: PUSH
40129: LD_INT 1
40131: PUSH
40132: LD_INT 1
40134: NEG
40135: PUSH
40136: EMPTY
40137: LIST
40138: LIST
40139: PUSH
40140: LD_INT 2
40142: PUSH
40143: LD_INT 0
40145: PUSH
40146: EMPTY
40147: LIST
40148: LIST
40149: PUSH
40150: LD_INT 2
40152: PUSH
40153: LD_INT 1
40155: PUSH
40156: EMPTY
40157: LIST
40158: LIST
40159: PUSH
40160: LD_INT 2
40162: PUSH
40163: LD_INT 2
40165: PUSH
40166: EMPTY
40167: LIST
40168: LIST
40169: PUSH
40170: LD_INT 1
40172: PUSH
40173: LD_INT 2
40175: PUSH
40176: EMPTY
40177: LIST
40178: LIST
40179: PUSH
40180: LD_INT 0
40182: PUSH
40183: LD_INT 2
40185: PUSH
40186: EMPTY
40187: LIST
40188: LIST
40189: PUSH
40190: LD_INT 1
40192: NEG
40193: PUSH
40194: LD_INT 1
40196: PUSH
40197: EMPTY
40198: LIST
40199: LIST
40200: PUSH
40201: LD_INT 2
40203: NEG
40204: PUSH
40205: LD_INT 0
40207: PUSH
40208: EMPTY
40209: LIST
40210: LIST
40211: PUSH
40212: LD_INT 2
40214: NEG
40215: PUSH
40216: LD_INT 1
40218: NEG
40219: PUSH
40220: EMPTY
40221: LIST
40222: LIST
40223: PUSH
40224: LD_INT 2
40226: NEG
40227: PUSH
40228: LD_INT 2
40230: NEG
40231: PUSH
40232: EMPTY
40233: LIST
40234: LIST
40235: PUSH
40236: EMPTY
40237: LIST
40238: LIST
40239: LIST
40240: LIST
40241: LIST
40242: LIST
40243: LIST
40244: LIST
40245: LIST
40246: LIST
40247: LIST
40248: LIST
40249: LIST
40250: LIST
40251: LIST
40252: LIST
40253: LIST
40254: LIST
40255: LIST
40256: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40257: LD_ADDR_VAR 0 56
40261: PUSH
40262: LD_INT 0
40264: PUSH
40265: LD_INT 0
40267: PUSH
40268: EMPTY
40269: LIST
40270: LIST
40271: PUSH
40272: LD_INT 0
40274: PUSH
40275: LD_INT 1
40277: NEG
40278: PUSH
40279: EMPTY
40280: LIST
40281: LIST
40282: PUSH
40283: LD_INT 1
40285: PUSH
40286: LD_INT 0
40288: PUSH
40289: EMPTY
40290: LIST
40291: LIST
40292: PUSH
40293: LD_INT 1
40295: PUSH
40296: LD_INT 1
40298: PUSH
40299: EMPTY
40300: LIST
40301: LIST
40302: PUSH
40303: LD_INT 0
40305: PUSH
40306: LD_INT 1
40308: PUSH
40309: EMPTY
40310: LIST
40311: LIST
40312: PUSH
40313: LD_INT 1
40315: NEG
40316: PUSH
40317: LD_INT 0
40319: PUSH
40320: EMPTY
40321: LIST
40322: LIST
40323: PUSH
40324: LD_INT 1
40326: NEG
40327: PUSH
40328: LD_INT 1
40330: NEG
40331: PUSH
40332: EMPTY
40333: LIST
40334: LIST
40335: PUSH
40336: LD_INT 1
40338: NEG
40339: PUSH
40340: LD_INT 2
40342: NEG
40343: PUSH
40344: EMPTY
40345: LIST
40346: LIST
40347: PUSH
40348: LD_INT 0
40350: PUSH
40351: LD_INT 2
40353: NEG
40354: PUSH
40355: EMPTY
40356: LIST
40357: LIST
40358: PUSH
40359: LD_INT 1
40361: PUSH
40362: LD_INT 1
40364: NEG
40365: PUSH
40366: EMPTY
40367: LIST
40368: LIST
40369: PUSH
40370: LD_INT 2
40372: PUSH
40373: LD_INT 0
40375: PUSH
40376: EMPTY
40377: LIST
40378: LIST
40379: PUSH
40380: LD_INT 2
40382: PUSH
40383: LD_INT 1
40385: PUSH
40386: EMPTY
40387: LIST
40388: LIST
40389: PUSH
40390: LD_INT 2
40392: PUSH
40393: LD_INT 2
40395: PUSH
40396: EMPTY
40397: LIST
40398: LIST
40399: PUSH
40400: LD_INT 1
40402: PUSH
40403: LD_INT 2
40405: PUSH
40406: EMPTY
40407: LIST
40408: LIST
40409: PUSH
40410: LD_INT 0
40412: PUSH
40413: LD_INT 2
40415: PUSH
40416: EMPTY
40417: LIST
40418: LIST
40419: PUSH
40420: LD_INT 1
40422: NEG
40423: PUSH
40424: LD_INT 1
40426: PUSH
40427: EMPTY
40428: LIST
40429: LIST
40430: PUSH
40431: LD_INT 2
40433: NEG
40434: PUSH
40435: LD_INT 0
40437: PUSH
40438: EMPTY
40439: LIST
40440: LIST
40441: PUSH
40442: LD_INT 2
40444: NEG
40445: PUSH
40446: LD_INT 1
40448: NEG
40449: PUSH
40450: EMPTY
40451: LIST
40452: LIST
40453: PUSH
40454: LD_INT 2
40456: NEG
40457: PUSH
40458: LD_INT 2
40460: NEG
40461: PUSH
40462: EMPTY
40463: LIST
40464: LIST
40465: PUSH
40466: EMPTY
40467: LIST
40468: LIST
40469: LIST
40470: LIST
40471: LIST
40472: LIST
40473: LIST
40474: LIST
40475: LIST
40476: LIST
40477: LIST
40478: LIST
40479: LIST
40480: LIST
40481: LIST
40482: LIST
40483: LIST
40484: LIST
40485: LIST
40486: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40487: LD_ADDR_VAR 0 57
40491: PUSH
40492: LD_INT 0
40494: PUSH
40495: LD_INT 0
40497: PUSH
40498: EMPTY
40499: LIST
40500: LIST
40501: PUSH
40502: LD_INT 0
40504: PUSH
40505: LD_INT 1
40507: NEG
40508: PUSH
40509: EMPTY
40510: LIST
40511: LIST
40512: PUSH
40513: LD_INT 1
40515: PUSH
40516: LD_INT 0
40518: PUSH
40519: EMPTY
40520: LIST
40521: LIST
40522: PUSH
40523: LD_INT 1
40525: PUSH
40526: LD_INT 1
40528: PUSH
40529: EMPTY
40530: LIST
40531: LIST
40532: PUSH
40533: LD_INT 0
40535: PUSH
40536: LD_INT 1
40538: PUSH
40539: EMPTY
40540: LIST
40541: LIST
40542: PUSH
40543: LD_INT 1
40545: NEG
40546: PUSH
40547: LD_INT 0
40549: PUSH
40550: EMPTY
40551: LIST
40552: LIST
40553: PUSH
40554: LD_INT 1
40556: NEG
40557: PUSH
40558: LD_INT 1
40560: NEG
40561: PUSH
40562: EMPTY
40563: LIST
40564: LIST
40565: PUSH
40566: LD_INT 1
40568: NEG
40569: PUSH
40570: LD_INT 2
40572: NEG
40573: PUSH
40574: EMPTY
40575: LIST
40576: LIST
40577: PUSH
40578: LD_INT 0
40580: PUSH
40581: LD_INT 2
40583: NEG
40584: PUSH
40585: EMPTY
40586: LIST
40587: LIST
40588: PUSH
40589: LD_INT 1
40591: PUSH
40592: LD_INT 1
40594: NEG
40595: PUSH
40596: EMPTY
40597: LIST
40598: LIST
40599: PUSH
40600: LD_INT 2
40602: PUSH
40603: LD_INT 0
40605: PUSH
40606: EMPTY
40607: LIST
40608: LIST
40609: PUSH
40610: LD_INT 2
40612: PUSH
40613: LD_INT 1
40615: PUSH
40616: EMPTY
40617: LIST
40618: LIST
40619: PUSH
40620: LD_INT 2
40622: PUSH
40623: LD_INT 2
40625: PUSH
40626: EMPTY
40627: LIST
40628: LIST
40629: PUSH
40630: LD_INT 1
40632: PUSH
40633: LD_INT 2
40635: PUSH
40636: EMPTY
40637: LIST
40638: LIST
40639: PUSH
40640: LD_INT 0
40642: PUSH
40643: LD_INT 2
40645: PUSH
40646: EMPTY
40647: LIST
40648: LIST
40649: PUSH
40650: LD_INT 1
40652: NEG
40653: PUSH
40654: LD_INT 1
40656: PUSH
40657: EMPTY
40658: LIST
40659: LIST
40660: PUSH
40661: LD_INT 2
40663: NEG
40664: PUSH
40665: LD_INT 0
40667: PUSH
40668: EMPTY
40669: LIST
40670: LIST
40671: PUSH
40672: LD_INT 2
40674: NEG
40675: PUSH
40676: LD_INT 1
40678: NEG
40679: PUSH
40680: EMPTY
40681: LIST
40682: LIST
40683: PUSH
40684: LD_INT 2
40686: NEG
40687: PUSH
40688: LD_INT 2
40690: NEG
40691: PUSH
40692: EMPTY
40693: LIST
40694: LIST
40695: PUSH
40696: EMPTY
40697: LIST
40698: LIST
40699: LIST
40700: LIST
40701: LIST
40702: LIST
40703: LIST
40704: LIST
40705: LIST
40706: LIST
40707: LIST
40708: LIST
40709: LIST
40710: LIST
40711: LIST
40712: LIST
40713: LIST
40714: LIST
40715: LIST
40716: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40717: LD_ADDR_VAR 0 58
40721: PUSH
40722: LD_INT 0
40724: PUSH
40725: LD_INT 0
40727: PUSH
40728: EMPTY
40729: LIST
40730: LIST
40731: PUSH
40732: LD_INT 0
40734: PUSH
40735: LD_INT 1
40737: NEG
40738: PUSH
40739: EMPTY
40740: LIST
40741: LIST
40742: PUSH
40743: LD_INT 1
40745: PUSH
40746: LD_INT 0
40748: PUSH
40749: EMPTY
40750: LIST
40751: LIST
40752: PUSH
40753: LD_INT 1
40755: PUSH
40756: LD_INT 1
40758: PUSH
40759: EMPTY
40760: LIST
40761: LIST
40762: PUSH
40763: LD_INT 0
40765: PUSH
40766: LD_INT 1
40768: PUSH
40769: EMPTY
40770: LIST
40771: LIST
40772: PUSH
40773: LD_INT 1
40775: NEG
40776: PUSH
40777: LD_INT 0
40779: PUSH
40780: EMPTY
40781: LIST
40782: LIST
40783: PUSH
40784: LD_INT 1
40786: NEG
40787: PUSH
40788: LD_INT 1
40790: NEG
40791: PUSH
40792: EMPTY
40793: LIST
40794: LIST
40795: PUSH
40796: LD_INT 1
40798: NEG
40799: PUSH
40800: LD_INT 2
40802: NEG
40803: PUSH
40804: EMPTY
40805: LIST
40806: LIST
40807: PUSH
40808: LD_INT 0
40810: PUSH
40811: LD_INT 2
40813: NEG
40814: PUSH
40815: EMPTY
40816: LIST
40817: LIST
40818: PUSH
40819: LD_INT 1
40821: PUSH
40822: LD_INT 1
40824: NEG
40825: PUSH
40826: EMPTY
40827: LIST
40828: LIST
40829: PUSH
40830: LD_INT 2
40832: PUSH
40833: LD_INT 0
40835: PUSH
40836: EMPTY
40837: LIST
40838: LIST
40839: PUSH
40840: LD_INT 2
40842: PUSH
40843: LD_INT 1
40845: PUSH
40846: EMPTY
40847: LIST
40848: LIST
40849: PUSH
40850: LD_INT 2
40852: PUSH
40853: LD_INT 2
40855: PUSH
40856: EMPTY
40857: LIST
40858: LIST
40859: PUSH
40860: LD_INT 1
40862: PUSH
40863: LD_INT 2
40865: PUSH
40866: EMPTY
40867: LIST
40868: LIST
40869: PUSH
40870: LD_INT 0
40872: PUSH
40873: LD_INT 2
40875: PUSH
40876: EMPTY
40877: LIST
40878: LIST
40879: PUSH
40880: LD_INT 1
40882: NEG
40883: PUSH
40884: LD_INT 1
40886: PUSH
40887: EMPTY
40888: LIST
40889: LIST
40890: PUSH
40891: LD_INT 2
40893: NEG
40894: PUSH
40895: LD_INT 0
40897: PUSH
40898: EMPTY
40899: LIST
40900: LIST
40901: PUSH
40902: LD_INT 2
40904: NEG
40905: PUSH
40906: LD_INT 1
40908: NEG
40909: PUSH
40910: EMPTY
40911: LIST
40912: LIST
40913: PUSH
40914: LD_INT 2
40916: NEG
40917: PUSH
40918: LD_INT 2
40920: NEG
40921: PUSH
40922: EMPTY
40923: LIST
40924: LIST
40925: PUSH
40926: EMPTY
40927: LIST
40928: LIST
40929: LIST
40930: LIST
40931: LIST
40932: LIST
40933: LIST
40934: LIST
40935: LIST
40936: LIST
40937: LIST
40938: LIST
40939: LIST
40940: LIST
40941: LIST
40942: LIST
40943: LIST
40944: LIST
40945: LIST
40946: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40947: LD_ADDR_VAR 0 59
40951: PUSH
40952: LD_INT 0
40954: PUSH
40955: LD_INT 0
40957: PUSH
40958: EMPTY
40959: LIST
40960: LIST
40961: PUSH
40962: LD_INT 0
40964: PUSH
40965: LD_INT 1
40967: NEG
40968: PUSH
40969: EMPTY
40970: LIST
40971: LIST
40972: PUSH
40973: LD_INT 1
40975: PUSH
40976: LD_INT 0
40978: PUSH
40979: EMPTY
40980: LIST
40981: LIST
40982: PUSH
40983: LD_INT 1
40985: PUSH
40986: LD_INT 1
40988: PUSH
40989: EMPTY
40990: LIST
40991: LIST
40992: PUSH
40993: LD_INT 0
40995: PUSH
40996: LD_INT 1
40998: PUSH
40999: EMPTY
41000: LIST
41001: LIST
41002: PUSH
41003: LD_INT 1
41005: NEG
41006: PUSH
41007: LD_INT 0
41009: PUSH
41010: EMPTY
41011: LIST
41012: LIST
41013: PUSH
41014: LD_INT 1
41016: NEG
41017: PUSH
41018: LD_INT 1
41020: NEG
41021: PUSH
41022: EMPTY
41023: LIST
41024: LIST
41025: PUSH
41026: EMPTY
41027: LIST
41028: LIST
41029: LIST
41030: LIST
41031: LIST
41032: LIST
41033: LIST
41034: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41035: LD_ADDR_VAR 0 60
41039: PUSH
41040: LD_INT 0
41042: PUSH
41043: LD_INT 0
41045: PUSH
41046: EMPTY
41047: LIST
41048: LIST
41049: PUSH
41050: LD_INT 0
41052: PUSH
41053: LD_INT 1
41055: NEG
41056: PUSH
41057: EMPTY
41058: LIST
41059: LIST
41060: PUSH
41061: LD_INT 1
41063: PUSH
41064: LD_INT 0
41066: PUSH
41067: EMPTY
41068: LIST
41069: LIST
41070: PUSH
41071: LD_INT 1
41073: PUSH
41074: LD_INT 1
41076: PUSH
41077: EMPTY
41078: LIST
41079: LIST
41080: PUSH
41081: LD_INT 0
41083: PUSH
41084: LD_INT 1
41086: PUSH
41087: EMPTY
41088: LIST
41089: LIST
41090: PUSH
41091: LD_INT 1
41093: NEG
41094: PUSH
41095: LD_INT 0
41097: PUSH
41098: EMPTY
41099: LIST
41100: LIST
41101: PUSH
41102: LD_INT 1
41104: NEG
41105: PUSH
41106: LD_INT 1
41108: NEG
41109: PUSH
41110: EMPTY
41111: LIST
41112: LIST
41113: PUSH
41114: EMPTY
41115: LIST
41116: LIST
41117: LIST
41118: LIST
41119: LIST
41120: LIST
41121: LIST
41122: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41123: LD_ADDR_VAR 0 61
41127: PUSH
41128: LD_INT 0
41130: PUSH
41131: LD_INT 0
41133: PUSH
41134: EMPTY
41135: LIST
41136: LIST
41137: PUSH
41138: LD_INT 0
41140: PUSH
41141: LD_INT 1
41143: NEG
41144: PUSH
41145: EMPTY
41146: LIST
41147: LIST
41148: PUSH
41149: LD_INT 1
41151: PUSH
41152: LD_INT 0
41154: PUSH
41155: EMPTY
41156: LIST
41157: LIST
41158: PUSH
41159: LD_INT 1
41161: PUSH
41162: LD_INT 1
41164: PUSH
41165: EMPTY
41166: LIST
41167: LIST
41168: PUSH
41169: LD_INT 0
41171: PUSH
41172: LD_INT 1
41174: PUSH
41175: EMPTY
41176: LIST
41177: LIST
41178: PUSH
41179: LD_INT 1
41181: NEG
41182: PUSH
41183: LD_INT 0
41185: PUSH
41186: EMPTY
41187: LIST
41188: LIST
41189: PUSH
41190: LD_INT 1
41192: NEG
41193: PUSH
41194: LD_INT 1
41196: NEG
41197: PUSH
41198: EMPTY
41199: LIST
41200: LIST
41201: PUSH
41202: EMPTY
41203: LIST
41204: LIST
41205: LIST
41206: LIST
41207: LIST
41208: LIST
41209: LIST
41210: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41211: LD_ADDR_VAR 0 62
41215: PUSH
41216: LD_INT 0
41218: PUSH
41219: LD_INT 0
41221: PUSH
41222: EMPTY
41223: LIST
41224: LIST
41225: PUSH
41226: LD_INT 0
41228: PUSH
41229: LD_INT 1
41231: NEG
41232: PUSH
41233: EMPTY
41234: LIST
41235: LIST
41236: PUSH
41237: LD_INT 1
41239: PUSH
41240: LD_INT 0
41242: PUSH
41243: EMPTY
41244: LIST
41245: LIST
41246: PUSH
41247: LD_INT 1
41249: PUSH
41250: LD_INT 1
41252: PUSH
41253: EMPTY
41254: LIST
41255: LIST
41256: PUSH
41257: LD_INT 0
41259: PUSH
41260: LD_INT 1
41262: PUSH
41263: EMPTY
41264: LIST
41265: LIST
41266: PUSH
41267: LD_INT 1
41269: NEG
41270: PUSH
41271: LD_INT 0
41273: PUSH
41274: EMPTY
41275: LIST
41276: LIST
41277: PUSH
41278: LD_INT 1
41280: NEG
41281: PUSH
41282: LD_INT 1
41284: NEG
41285: PUSH
41286: EMPTY
41287: LIST
41288: LIST
41289: PUSH
41290: EMPTY
41291: LIST
41292: LIST
41293: LIST
41294: LIST
41295: LIST
41296: LIST
41297: LIST
41298: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41299: LD_ADDR_VAR 0 63
41303: PUSH
41304: LD_INT 0
41306: PUSH
41307: LD_INT 0
41309: PUSH
41310: EMPTY
41311: LIST
41312: LIST
41313: PUSH
41314: LD_INT 0
41316: PUSH
41317: LD_INT 1
41319: NEG
41320: PUSH
41321: EMPTY
41322: LIST
41323: LIST
41324: PUSH
41325: LD_INT 1
41327: PUSH
41328: LD_INT 0
41330: PUSH
41331: EMPTY
41332: LIST
41333: LIST
41334: PUSH
41335: LD_INT 1
41337: PUSH
41338: LD_INT 1
41340: PUSH
41341: EMPTY
41342: LIST
41343: LIST
41344: PUSH
41345: LD_INT 0
41347: PUSH
41348: LD_INT 1
41350: PUSH
41351: EMPTY
41352: LIST
41353: LIST
41354: PUSH
41355: LD_INT 1
41357: NEG
41358: PUSH
41359: LD_INT 0
41361: PUSH
41362: EMPTY
41363: LIST
41364: LIST
41365: PUSH
41366: LD_INT 1
41368: NEG
41369: PUSH
41370: LD_INT 1
41372: NEG
41373: PUSH
41374: EMPTY
41375: LIST
41376: LIST
41377: PUSH
41378: EMPTY
41379: LIST
41380: LIST
41381: LIST
41382: LIST
41383: LIST
41384: LIST
41385: LIST
41386: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41387: LD_ADDR_VAR 0 64
41391: PUSH
41392: LD_INT 0
41394: PUSH
41395: LD_INT 0
41397: PUSH
41398: EMPTY
41399: LIST
41400: LIST
41401: PUSH
41402: LD_INT 0
41404: PUSH
41405: LD_INT 1
41407: NEG
41408: PUSH
41409: EMPTY
41410: LIST
41411: LIST
41412: PUSH
41413: LD_INT 1
41415: PUSH
41416: LD_INT 0
41418: PUSH
41419: EMPTY
41420: LIST
41421: LIST
41422: PUSH
41423: LD_INT 1
41425: PUSH
41426: LD_INT 1
41428: PUSH
41429: EMPTY
41430: LIST
41431: LIST
41432: PUSH
41433: LD_INT 0
41435: PUSH
41436: LD_INT 1
41438: PUSH
41439: EMPTY
41440: LIST
41441: LIST
41442: PUSH
41443: LD_INT 1
41445: NEG
41446: PUSH
41447: LD_INT 0
41449: PUSH
41450: EMPTY
41451: LIST
41452: LIST
41453: PUSH
41454: LD_INT 1
41456: NEG
41457: PUSH
41458: LD_INT 1
41460: NEG
41461: PUSH
41462: EMPTY
41463: LIST
41464: LIST
41465: PUSH
41466: EMPTY
41467: LIST
41468: LIST
41469: LIST
41470: LIST
41471: LIST
41472: LIST
41473: LIST
41474: ST_TO_ADDR
// end ; 1 :
41475: GO 47372
41477: LD_INT 1
41479: DOUBLE
41480: EQUAL
41481: IFTRUE 41485
41483: GO 44108
41485: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41486: LD_ADDR_VAR 0 11
41490: PUSH
41491: LD_INT 1
41493: NEG
41494: PUSH
41495: LD_INT 3
41497: NEG
41498: PUSH
41499: EMPTY
41500: LIST
41501: LIST
41502: PUSH
41503: LD_INT 0
41505: PUSH
41506: LD_INT 3
41508: NEG
41509: PUSH
41510: EMPTY
41511: LIST
41512: LIST
41513: PUSH
41514: LD_INT 1
41516: PUSH
41517: LD_INT 2
41519: NEG
41520: PUSH
41521: EMPTY
41522: LIST
41523: LIST
41524: PUSH
41525: EMPTY
41526: LIST
41527: LIST
41528: LIST
41529: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41530: LD_ADDR_VAR 0 12
41534: PUSH
41535: LD_INT 2
41537: PUSH
41538: LD_INT 1
41540: NEG
41541: PUSH
41542: EMPTY
41543: LIST
41544: LIST
41545: PUSH
41546: LD_INT 3
41548: PUSH
41549: LD_INT 0
41551: PUSH
41552: EMPTY
41553: LIST
41554: LIST
41555: PUSH
41556: LD_INT 3
41558: PUSH
41559: LD_INT 1
41561: PUSH
41562: EMPTY
41563: LIST
41564: LIST
41565: PUSH
41566: EMPTY
41567: LIST
41568: LIST
41569: LIST
41570: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41571: LD_ADDR_VAR 0 13
41575: PUSH
41576: LD_INT 3
41578: PUSH
41579: LD_INT 2
41581: PUSH
41582: EMPTY
41583: LIST
41584: LIST
41585: PUSH
41586: LD_INT 3
41588: PUSH
41589: LD_INT 3
41591: PUSH
41592: EMPTY
41593: LIST
41594: LIST
41595: PUSH
41596: LD_INT 2
41598: PUSH
41599: LD_INT 3
41601: PUSH
41602: EMPTY
41603: LIST
41604: LIST
41605: PUSH
41606: EMPTY
41607: LIST
41608: LIST
41609: LIST
41610: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41611: LD_ADDR_VAR 0 14
41615: PUSH
41616: LD_INT 1
41618: PUSH
41619: LD_INT 3
41621: PUSH
41622: EMPTY
41623: LIST
41624: LIST
41625: PUSH
41626: LD_INT 0
41628: PUSH
41629: LD_INT 3
41631: PUSH
41632: EMPTY
41633: LIST
41634: LIST
41635: PUSH
41636: LD_INT 1
41638: NEG
41639: PUSH
41640: LD_INT 2
41642: PUSH
41643: EMPTY
41644: LIST
41645: LIST
41646: PUSH
41647: EMPTY
41648: LIST
41649: LIST
41650: LIST
41651: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41652: LD_ADDR_VAR 0 15
41656: PUSH
41657: LD_INT 2
41659: NEG
41660: PUSH
41661: LD_INT 1
41663: PUSH
41664: EMPTY
41665: LIST
41666: LIST
41667: PUSH
41668: LD_INT 3
41670: NEG
41671: PUSH
41672: LD_INT 0
41674: PUSH
41675: EMPTY
41676: LIST
41677: LIST
41678: PUSH
41679: LD_INT 3
41681: NEG
41682: PUSH
41683: LD_INT 1
41685: NEG
41686: PUSH
41687: EMPTY
41688: LIST
41689: LIST
41690: PUSH
41691: EMPTY
41692: LIST
41693: LIST
41694: LIST
41695: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41696: LD_ADDR_VAR 0 16
41700: PUSH
41701: LD_INT 2
41703: NEG
41704: PUSH
41705: LD_INT 3
41707: NEG
41708: PUSH
41709: EMPTY
41710: LIST
41711: LIST
41712: PUSH
41713: LD_INT 3
41715: NEG
41716: PUSH
41717: LD_INT 2
41719: NEG
41720: PUSH
41721: EMPTY
41722: LIST
41723: LIST
41724: PUSH
41725: LD_INT 3
41727: NEG
41728: PUSH
41729: LD_INT 3
41731: NEG
41732: PUSH
41733: EMPTY
41734: LIST
41735: LIST
41736: PUSH
41737: EMPTY
41738: LIST
41739: LIST
41740: LIST
41741: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41742: LD_ADDR_VAR 0 17
41746: PUSH
41747: LD_INT 1
41749: NEG
41750: PUSH
41751: LD_INT 3
41753: NEG
41754: PUSH
41755: EMPTY
41756: LIST
41757: LIST
41758: PUSH
41759: LD_INT 0
41761: PUSH
41762: LD_INT 3
41764: NEG
41765: PUSH
41766: EMPTY
41767: LIST
41768: LIST
41769: PUSH
41770: LD_INT 1
41772: PUSH
41773: LD_INT 2
41775: NEG
41776: PUSH
41777: EMPTY
41778: LIST
41779: LIST
41780: PUSH
41781: EMPTY
41782: LIST
41783: LIST
41784: LIST
41785: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41786: LD_ADDR_VAR 0 18
41790: PUSH
41791: LD_INT 2
41793: PUSH
41794: LD_INT 1
41796: NEG
41797: PUSH
41798: EMPTY
41799: LIST
41800: LIST
41801: PUSH
41802: LD_INT 3
41804: PUSH
41805: LD_INT 0
41807: PUSH
41808: EMPTY
41809: LIST
41810: LIST
41811: PUSH
41812: LD_INT 3
41814: PUSH
41815: LD_INT 1
41817: PUSH
41818: EMPTY
41819: LIST
41820: LIST
41821: PUSH
41822: EMPTY
41823: LIST
41824: LIST
41825: LIST
41826: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41827: LD_ADDR_VAR 0 19
41831: PUSH
41832: LD_INT 3
41834: PUSH
41835: LD_INT 2
41837: PUSH
41838: EMPTY
41839: LIST
41840: LIST
41841: PUSH
41842: LD_INT 3
41844: PUSH
41845: LD_INT 3
41847: PUSH
41848: EMPTY
41849: LIST
41850: LIST
41851: PUSH
41852: LD_INT 2
41854: PUSH
41855: LD_INT 3
41857: PUSH
41858: EMPTY
41859: LIST
41860: LIST
41861: PUSH
41862: EMPTY
41863: LIST
41864: LIST
41865: LIST
41866: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41867: LD_ADDR_VAR 0 20
41871: PUSH
41872: LD_INT 1
41874: PUSH
41875: LD_INT 3
41877: PUSH
41878: EMPTY
41879: LIST
41880: LIST
41881: PUSH
41882: LD_INT 0
41884: PUSH
41885: LD_INT 3
41887: PUSH
41888: EMPTY
41889: LIST
41890: LIST
41891: PUSH
41892: LD_INT 1
41894: NEG
41895: PUSH
41896: LD_INT 2
41898: PUSH
41899: EMPTY
41900: LIST
41901: LIST
41902: PUSH
41903: EMPTY
41904: LIST
41905: LIST
41906: LIST
41907: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41908: LD_ADDR_VAR 0 21
41912: PUSH
41913: LD_INT 2
41915: NEG
41916: PUSH
41917: LD_INT 1
41919: PUSH
41920: EMPTY
41921: LIST
41922: LIST
41923: PUSH
41924: LD_INT 3
41926: NEG
41927: PUSH
41928: LD_INT 0
41930: PUSH
41931: EMPTY
41932: LIST
41933: LIST
41934: PUSH
41935: LD_INT 3
41937: NEG
41938: PUSH
41939: LD_INT 1
41941: NEG
41942: PUSH
41943: EMPTY
41944: LIST
41945: LIST
41946: PUSH
41947: EMPTY
41948: LIST
41949: LIST
41950: LIST
41951: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41952: LD_ADDR_VAR 0 22
41956: PUSH
41957: LD_INT 2
41959: NEG
41960: PUSH
41961: LD_INT 3
41963: NEG
41964: PUSH
41965: EMPTY
41966: LIST
41967: LIST
41968: PUSH
41969: LD_INT 3
41971: NEG
41972: PUSH
41973: LD_INT 2
41975: NEG
41976: PUSH
41977: EMPTY
41978: LIST
41979: LIST
41980: PUSH
41981: LD_INT 3
41983: NEG
41984: PUSH
41985: LD_INT 3
41987: NEG
41988: PUSH
41989: EMPTY
41990: LIST
41991: LIST
41992: PUSH
41993: EMPTY
41994: LIST
41995: LIST
41996: LIST
41997: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
41998: LD_ADDR_VAR 0 23
42002: PUSH
42003: LD_INT 0
42005: PUSH
42006: LD_INT 3
42008: NEG
42009: PUSH
42010: EMPTY
42011: LIST
42012: LIST
42013: PUSH
42014: LD_INT 1
42016: NEG
42017: PUSH
42018: LD_INT 4
42020: NEG
42021: PUSH
42022: EMPTY
42023: LIST
42024: LIST
42025: PUSH
42026: LD_INT 1
42028: PUSH
42029: LD_INT 3
42031: NEG
42032: PUSH
42033: EMPTY
42034: LIST
42035: LIST
42036: PUSH
42037: EMPTY
42038: LIST
42039: LIST
42040: LIST
42041: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
42042: LD_ADDR_VAR 0 24
42046: PUSH
42047: LD_INT 3
42049: PUSH
42050: LD_INT 0
42052: PUSH
42053: EMPTY
42054: LIST
42055: LIST
42056: PUSH
42057: LD_INT 3
42059: PUSH
42060: LD_INT 1
42062: NEG
42063: PUSH
42064: EMPTY
42065: LIST
42066: LIST
42067: PUSH
42068: LD_INT 4
42070: PUSH
42071: LD_INT 1
42073: PUSH
42074: EMPTY
42075: LIST
42076: LIST
42077: PUSH
42078: EMPTY
42079: LIST
42080: LIST
42081: LIST
42082: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
42083: LD_ADDR_VAR 0 25
42087: PUSH
42088: LD_INT 3
42090: PUSH
42091: LD_INT 3
42093: PUSH
42094: EMPTY
42095: LIST
42096: LIST
42097: PUSH
42098: LD_INT 4
42100: PUSH
42101: LD_INT 3
42103: PUSH
42104: EMPTY
42105: LIST
42106: LIST
42107: PUSH
42108: LD_INT 3
42110: PUSH
42111: LD_INT 4
42113: PUSH
42114: EMPTY
42115: LIST
42116: LIST
42117: PUSH
42118: EMPTY
42119: LIST
42120: LIST
42121: LIST
42122: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
42123: LD_ADDR_VAR 0 26
42127: PUSH
42128: LD_INT 0
42130: PUSH
42131: LD_INT 3
42133: PUSH
42134: EMPTY
42135: LIST
42136: LIST
42137: PUSH
42138: LD_INT 1
42140: PUSH
42141: LD_INT 4
42143: PUSH
42144: EMPTY
42145: LIST
42146: LIST
42147: PUSH
42148: LD_INT 1
42150: NEG
42151: PUSH
42152: LD_INT 3
42154: PUSH
42155: EMPTY
42156: LIST
42157: LIST
42158: PUSH
42159: EMPTY
42160: LIST
42161: LIST
42162: LIST
42163: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
42164: LD_ADDR_VAR 0 27
42168: PUSH
42169: LD_INT 3
42171: NEG
42172: PUSH
42173: LD_INT 0
42175: PUSH
42176: EMPTY
42177: LIST
42178: LIST
42179: PUSH
42180: LD_INT 3
42182: NEG
42183: PUSH
42184: LD_INT 1
42186: PUSH
42187: EMPTY
42188: LIST
42189: LIST
42190: PUSH
42191: LD_INT 4
42193: NEG
42194: PUSH
42195: LD_INT 1
42197: NEG
42198: PUSH
42199: EMPTY
42200: LIST
42201: LIST
42202: PUSH
42203: EMPTY
42204: LIST
42205: LIST
42206: LIST
42207: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
42208: LD_ADDR_VAR 0 28
42212: PUSH
42213: LD_INT 3
42215: NEG
42216: PUSH
42217: LD_INT 3
42219: NEG
42220: PUSH
42221: EMPTY
42222: LIST
42223: LIST
42224: PUSH
42225: LD_INT 3
42227: NEG
42228: PUSH
42229: LD_INT 4
42231: NEG
42232: PUSH
42233: EMPTY
42234: LIST
42235: LIST
42236: PUSH
42237: LD_INT 4
42239: NEG
42240: PUSH
42241: LD_INT 3
42243: NEG
42244: PUSH
42245: EMPTY
42246: LIST
42247: LIST
42248: PUSH
42249: EMPTY
42250: LIST
42251: LIST
42252: LIST
42253: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
42254: LD_ADDR_VAR 0 29
42258: PUSH
42259: LD_INT 1
42261: NEG
42262: PUSH
42263: LD_INT 3
42265: NEG
42266: PUSH
42267: EMPTY
42268: LIST
42269: LIST
42270: PUSH
42271: LD_INT 0
42273: PUSH
42274: LD_INT 3
42276: NEG
42277: PUSH
42278: EMPTY
42279: LIST
42280: LIST
42281: PUSH
42282: LD_INT 1
42284: PUSH
42285: LD_INT 2
42287: NEG
42288: PUSH
42289: EMPTY
42290: LIST
42291: LIST
42292: PUSH
42293: LD_INT 1
42295: NEG
42296: PUSH
42297: LD_INT 4
42299: NEG
42300: PUSH
42301: EMPTY
42302: LIST
42303: LIST
42304: PUSH
42305: LD_INT 0
42307: PUSH
42308: LD_INT 4
42310: NEG
42311: PUSH
42312: EMPTY
42313: LIST
42314: LIST
42315: PUSH
42316: LD_INT 1
42318: PUSH
42319: LD_INT 3
42321: NEG
42322: PUSH
42323: EMPTY
42324: LIST
42325: LIST
42326: PUSH
42327: LD_INT 1
42329: NEG
42330: PUSH
42331: LD_INT 5
42333: NEG
42334: PUSH
42335: EMPTY
42336: LIST
42337: LIST
42338: PUSH
42339: LD_INT 0
42341: PUSH
42342: LD_INT 5
42344: NEG
42345: PUSH
42346: EMPTY
42347: LIST
42348: LIST
42349: PUSH
42350: LD_INT 1
42352: PUSH
42353: LD_INT 4
42355: NEG
42356: PUSH
42357: EMPTY
42358: LIST
42359: LIST
42360: PUSH
42361: LD_INT 1
42363: NEG
42364: PUSH
42365: LD_INT 6
42367: NEG
42368: PUSH
42369: EMPTY
42370: LIST
42371: LIST
42372: PUSH
42373: LD_INT 0
42375: PUSH
42376: LD_INT 6
42378: NEG
42379: PUSH
42380: EMPTY
42381: LIST
42382: LIST
42383: PUSH
42384: LD_INT 1
42386: PUSH
42387: LD_INT 5
42389: NEG
42390: PUSH
42391: EMPTY
42392: LIST
42393: LIST
42394: PUSH
42395: EMPTY
42396: LIST
42397: LIST
42398: LIST
42399: LIST
42400: LIST
42401: LIST
42402: LIST
42403: LIST
42404: LIST
42405: LIST
42406: LIST
42407: LIST
42408: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
42409: LD_ADDR_VAR 0 30
42413: PUSH
42414: LD_INT 2
42416: PUSH
42417: LD_INT 1
42419: NEG
42420: PUSH
42421: EMPTY
42422: LIST
42423: LIST
42424: PUSH
42425: LD_INT 3
42427: PUSH
42428: LD_INT 0
42430: PUSH
42431: EMPTY
42432: LIST
42433: LIST
42434: PUSH
42435: LD_INT 3
42437: PUSH
42438: LD_INT 1
42440: PUSH
42441: EMPTY
42442: LIST
42443: LIST
42444: PUSH
42445: LD_INT 3
42447: PUSH
42448: LD_INT 1
42450: NEG
42451: PUSH
42452: EMPTY
42453: LIST
42454: LIST
42455: PUSH
42456: LD_INT 4
42458: PUSH
42459: LD_INT 0
42461: PUSH
42462: EMPTY
42463: LIST
42464: LIST
42465: PUSH
42466: LD_INT 4
42468: PUSH
42469: LD_INT 1
42471: PUSH
42472: EMPTY
42473: LIST
42474: LIST
42475: PUSH
42476: LD_INT 4
42478: PUSH
42479: LD_INT 1
42481: NEG
42482: PUSH
42483: EMPTY
42484: LIST
42485: LIST
42486: PUSH
42487: LD_INT 5
42489: PUSH
42490: LD_INT 0
42492: PUSH
42493: EMPTY
42494: LIST
42495: LIST
42496: PUSH
42497: LD_INT 5
42499: PUSH
42500: LD_INT 1
42502: PUSH
42503: EMPTY
42504: LIST
42505: LIST
42506: PUSH
42507: LD_INT 5
42509: PUSH
42510: LD_INT 1
42512: NEG
42513: PUSH
42514: EMPTY
42515: LIST
42516: LIST
42517: PUSH
42518: LD_INT 6
42520: PUSH
42521: LD_INT 0
42523: PUSH
42524: EMPTY
42525: LIST
42526: LIST
42527: PUSH
42528: LD_INT 6
42530: PUSH
42531: LD_INT 1
42533: PUSH
42534: EMPTY
42535: LIST
42536: LIST
42537: PUSH
42538: EMPTY
42539: LIST
42540: LIST
42541: LIST
42542: LIST
42543: LIST
42544: LIST
42545: LIST
42546: LIST
42547: LIST
42548: LIST
42549: LIST
42550: LIST
42551: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
42552: LD_ADDR_VAR 0 31
42556: PUSH
42557: LD_INT 3
42559: PUSH
42560: LD_INT 2
42562: PUSH
42563: EMPTY
42564: LIST
42565: LIST
42566: PUSH
42567: LD_INT 3
42569: PUSH
42570: LD_INT 3
42572: PUSH
42573: EMPTY
42574: LIST
42575: LIST
42576: PUSH
42577: LD_INT 2
42579: PUSH
42580: LD_INT 3
42582: PUSH
42583: EMPTY
42584: LIST
42585: LIST
42586: PUSH
42587: LD_INT 4
42589: PUSH
42590: LD_INT 3
42592: PUSH
42593: EMPTY
42594: LIST
42595: LIST
42596: PUSH
42597: LD_INT 4
42599: PUSH
42600: LD_INT 4
42602: PUSH
42603: EMPTY
42604: LIST
42605: LIST
42606: PUSH
42607: LD_INT 3
42609: PUSH
42610: LD_INT 4
42612: PUSH
42613: EMPTY
42614: LIST
42615: LIST
42616: PUSH
42617: LD_INT 5
42619: PUSH
42620: LD_INT 4
42622: PUSH
42623: EMPTY
42624: LIST
42625: LIST
42626: PUSH
42627: LD_INT 5
42629: PUSH
42630: LD_INT 5
42632: PUSH
42633: EMPTY
42634: LIST
42635: LIST
42636: PUSH
42637: LD_INT 4
42639: PUSH
42640: LD_INT 5
42642: PUSH
42643: EMPTY
42644: LIST
42645: LIST
42646: PUSH
42647: LD_INT 6
42649: PUSH
42650: LD_INT 5
42652: PUSH
42653: EMPTY
42654: LIST
42655: LIST
42656: PUSH
42657: LD_INT 6
42659: PUSH
42660: LD_INT 6
42662: PUSH
42663: EMPTY
42664: LIST
42665: LIST
42666: PUSH
42667: LD_INT 5
42669: PUSH
42670: LD_INT 6
42672: PUSH
42673: EMPTY
42674: LIST
42675: LIST
42676: PUSH
42677: EMPTY
42678: LIST
42679: LIST
42680: LIST
42681: LIST
42682: LIST
42683: LIST
42684: LIST
42685: LIST
42686: LIST
42687: LIST
42688: LIST
42689: LIST
42690: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
42691: LD_ADDR_VAR 0 32
42695: PUSH
42696: LD_INT 1
42698: PUSH
42699: LD_INT 3
42701: PUSH
42702: EMPTY
42703: LIST
42704: LIST
42705: PUSH
42706: LD_INT 0
42708: PUSH
42709: LD_INT 3
42711: PUSH
42712: EMPTY
42713: LIST
42714: LIST
42715: PUSH
42716: LD_INT 1
42718: NEG
42719: PUSH
42720: LD_INT 2
42722: PUSH
42723: EMPTY
42724: LIST
42725: LIST
42726: PUSH
42727: LD_INT 1
42729: PUSH
42730: LD_INT 4
42732: PUSH
42733: EMPTY
42734: LIST
42735: LIST
42736: PUSH
42737: LD_INT 0
42739: PUSH
42740: LD_INT 4
42742: PUSH
42743: EMPTY
42744: LIST
42745: LIST
42746: PUSH
42747: LD_INT 1
42749: NEG
42750: PUSH
42751: LD_INT 3
42753: PUSH
42754: EMPTY
42755: LIST
42756: LIST
42757: PUSH
42758: LD_INT 1
42760: PUSH
42761: LD_INT 5
42763: PUSH
42764: EMPTY
42765: LIST
42766: LIST
42767: PUSH
42768: LD_INT 0
42770: PUSH
42771: LD_INT 5
42773: PUSH
42774: EMPTY
42775: LIST
42776: LIST
42777: PUSH
42778: LD_INT 1
42780: NEG
42781: PUSH
42782: LD_INT 4
42784: PUSH
42785: EMPTY
42786: LIST
42787: LIST
42788: PUSH
42789: LD_INT 1
42791: PUSH
42792: LD_INT 6
42794: PUSH
42795: EMPTY
42796: LIST
42797: LIST
42798: PUSH
42799: LD_INT 0
42801: PUSH
42802: LD_INT 6
42804: PUSH
42805: EMPTY
42806: LIST
42807: LIST
42808: PUSH
42809: LD_INT 1
42811: NEG
42812: PUSH
42813: LD_INT 5
42815: PUSH
42816: EMPTY
42817: LIST
42818: LIST
42819: PUSH
42820: EMPTY
42821: LIST
42822: LIST
42823: LIST
42824: LIST
42825: LIST
42826: LIST
42827: LIST
42828: LIST
42829: LIST
42830: LIST
42831: LIST
42832: LIST
42833: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
42834: LD_ADDR_VAR 0 33
42838: PUSH
42839: LD_INT 2
42841: NEG
42842: PUSH
42843: LD_INT 1
42845: PUSH
42846: EMPTY
42847: LIST
42848: LIST
42849: PUSH
42850: LD_INT 3
42852: NEG
42853: PUSH
42854: LD_INT 0
42856: PUSH
42857: EMPTY
42858: LIST
42859: LIST
42860: PUSH
42861: LD_INT 3
42863: NEG
42864: PUSH
42865: LD_INT 1
42867: NEG
42868: PUSH
42869: EMPTY
42870: LIST
42871: LIST
42872: PUSH
42873: LD_INT 3
42875: NEG
42876: PUSH
42877: LD_INT 1
42879: PUSH
42880: EMPTY
42881: LIST
42882: LIST
42883: PUSH
42884: LD_INT 4
42886: NEG
42887: PUSH
42888: LD_INT 0
42890: PUSH
42891: EMPTY
42892: LIST
42893: LIST
42894: PUSH
42895: LD_INT 4
42897: NEG
42898: PUSH
42899: LD_INT 1
42901: NEG
42902: PUSH
42903: EMPTY
42904: LIST
42905: LIST
42906: PUSH
42907: LD_INT 4
42909: NEG
42910: PUSH
42911: LD_INT 1
42913: PUSH
42914: EMPTY
42915: LIST
42916: LIST
42917: PUSH
42918: LD_INT 5
42920: NEG
42921: PUSH
42922: LD_INT 0
42924: PUSH
42925: EMPTY
42926: LIST
42927: LIST
42928: PUSH
42929: LD_INT 5
42931: NEG
42932: PUSH
42933: LD_INT 1
42935: NEG
42936: PUSH
42937: EMPTY
42938: LIST
42939: LIST
42940: PUSH
42941: LD_INT 5
42943: NEG
42944: PUSH
42945: LD_INT 1
42947: PUSH
42948: EMPTY
42949: LIST
42950: LIST
42951: PUSH
42952: LD_INT 6
42954: NEG
42955: PUSH
42956: LD_INT 0
42958: PUSH
42959: EMPTY
42960: LIST
42961: LIST
42962: PUSH
42963: LD_INT 6
42965: NEG
42966: PUSH
42967: LD_INT 1
42969: NEG
42970: PUSH
42971: EMPTY
42972: LIST
42973: LIST
42974: PUSH
42975: EMPTY
42976: LIST
42977: LIST
42978: LIST
42979: LIST
42980: LIST
42981: LIST
42982: LIST
42983: LIST
42984: LIST
42985: LIST
42986: LIST
42987: LIST
42988: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
42989: LD_ADDR_VAR 0 34
42993: PUSH
42994: LD_INT 2
42996: NEG
42997: PUSH
42998: LD_INT 3
43000: NEG
43001: PUSH
43002: EMPTY
43003: LIST
43004: LIST
43005: PUSH
43006: LD_INT 3
43008: NEG
43009: PUSH
43010: LD_INT 2
43012: NEG
43013: PUSH
43014: EMPTY
43015: LIST
43016: LIST
43017: PUSH
43018: LD_INT 3
43020: NEG
43021: PUSH
43022: LD_INT 3
43024: NEG
43025: PUSH
43026: EMPTY
43027: LIST
43028: LIST
43029: PUSH
43030: LD_INT 3
43032: NEG
43033: PUSH
43034: LD_INT 4
43036: NEG
43037: PUSH
43038: EMPTY
43039: LIST
43040: LIST
43041: PUSH
43042: LD_INT 4
43044: NEG
43045: PUSH
43046: LD_INT 3
43048: NEG
43049: PUSH
43050: EMPTY
43051: LIST
43052: LIST
43053: PUSH
43054: LD_INT 4
43056: NEG
43057: PUSH
43058: LD_INT 4
43060: NEG
43061: PUSH
43062: EMPTY
43063: LIST
43064: LIST
43065: PUSH
43066: LD_INT 4
43068: NEG
43069: PUSH
43070: LD_INT 5
43072: NEG
43073: PUSH
43074: EMPTY
43075: LIST
43076: LIST
43077: PUSH
43078: LD_INT 5
43080: NEG
43081: PUSH
43082: LD_INT 4
43084: NEG
43085: PUSH
43086: EMPTY
43087: LIST
43088: LIST
43089: PUSH
43090: LD_INT 5
43092: NEG
43093: PUSH
43094: LD_INT 5
43096: NEG
43097: PUSH
43098: EMPTY
43099: LIST
43100: LIST
43101: PUSH
43102: LD_INT 5
43104: NEG
43105: PUSH
43106: LD_INT 6
43108: NEG
43109: PUSH
43110: EMPTY
43111: LIST
43112: LIST
43113: PUSH
43114: LD_INT 6
43116: NEG
43117: PUSH
43118: LD_INT 5
43120: NEG
43121: PUSH
43122: EMPTY
43123: LIST
43124: LIST
43125: PUSH
43126: LD_INT 6
43128: NEG
43129: PUSH
43130: LD_INT 6
43132: NEG
43133: PUSH
43134: EMPTY
43135: LIST
43136: LIST
43137: PUSH
43138: EMPTY
43139: LIST
43140: LIST
43141: LIST
43142: LIST
43143: LIST
43144: LIST
43145: LIST
43146: LIST
43147: LIST
43148: LIST
43149: LIST
43150: LIST
43151: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
43152: LD_ADDR_VAR 0 41
43156: PUSH
43157: LD_INT 0
43159: PUSH
43160: LD_INT 2
43162: NEG
43163: PUSH
43164: EMPTY
43165: LIST
43166: LIST
43167: PUSH
43168: LD_INT 1
43170: NEG
43171: PUSH
43172: LD_INT 3
43174: NEG
43175: PUSH
43176: EMPTY
43177: LIST
43178: LIST
43179: PUSH
43180: LD_INT 1
43182: PUSH
43183: LD_INT 2
43185: NEG
43186: PUSH
43187: EMPTY
43188: LIST
43189: LIST
43190: PUSH
43191: EMPTY
43192: LIST
43193: LIST
43194: LIST
43195: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
43196: LD_ADDR_VAR 0 42
43200: PUSH
43201: LD_INT 2
43203: PUSH
43204: LD_INT 0
43206: PUSH
43207: EMPTY
43208: LIST
43209: LIST
43210: PUSH
43211: LD_INT 2
43213: PUSH
43214: LD_INT 1
43216: NEG
43217: PUSH
43218: EMPTY
43219: LIST
43220: LIST
43221: PUSH
43222: LD_INT 3
43224: PUSH
43225: LD_INT 1
43227: PUSH
43228: EMPTY
43229: LIST
43230: LIST
43231: PUSH
43232: EMPTY
43233: LIST
43234: LIST
43235: LIST
43236: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
43237: LD_ADDR_VAR 0 43
43241: PUSH
43242: LD_INT 2
43244: PUSH
43245: LD_INT 2
43247: PUSH
43248: EMPTY
43249: LIST
43250: LIST
43251: PUSH
43252: LD_INT 3
43254: PUSH
43255: LD_INT 2
43257: PUSH
43258: EMPTY
43259: LIST
43260: LIST
43261: PUSH
43262: LD_INT 2
43264: PUSH
43265: LD_INT 3
43267: PUSH
43268: EMPTY
43269: LIST
43270: LIST
43271: PUSH
43272: EMPTY
43273: LIST
43274: LIST
43275: LIST
43276: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
43277: LD_ADDR_VAR 0 44
43281: PUSH
43282: LD_INT 0
43284: PUSH
43285: LD_INT 2
43287: PUSH
43288: EMPTY
43289: LIST
43290: LIST
43291: PUSH
43292: LD_INT 1
43294: PUSH
43295: LD_INT 3
43297: PUSH
43298: EMPTY
43299: LIST
43300: LIST
43301: PUSH
43302: LD_INT 1
43304: NEG
43305: PUSH
43306: LD_INT 2
43308: PUSH
43309: EMPTY
43310: LIST
43311: LIST
43312: PUSH
43313: EMPTY
43314: LIST
43315: LIST
43316: LIST
43317: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43318: LD_ADDR_VAR 0 45
43322: PUSH
43323: LD_INT 2
43325: NEG
43326: PUSH
43327: LD_INT 0
43329: PUSH
43330: EMPTY
43331: LIST
43332: LIST
43333: PUSH
43334: LD_INT 2
43336: NEG
43337: PUSH
43338: LD_INT 1
43340: PUSH
43341: EMPTY
43342: LIST
43343: LIST
43344: PUSH
43345: LD_INT 3
43347: NEG
43348: PUSH
43349: LD_INT 1
43351: NEG
43352: PUSH
43353: EMPTY
43354: LIST
43355: LIST
43356: PUSH
43357: EMPTY
43358: LIST
43359: LIST
43360: LIST
43361: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
43362: LD_ADDR_VAR 0 46
43366: PUSH
43367: LD_INT 2
43369: NEG
43370: PUSH
43371: LD_INT 2
43373: NEG
43374: PUSH
43375: EMPTY
43376: LIST
43377: LIST
43378: PUSH
43379: LD_INT 2
43381: NEG
43382: PUSH
43383: LD_INT 3
43385: NEG
43386: PUSH
43387: EMPTY
43388: LIST
43389: LIST
43390: PUSH
43391: LD_INT 3
43393: NEG
43394: PUSH
43395: LD_INT 2
43397: NEG
43398: PUSH
43399: EMPTY
43400: LIST
43401: LIST
43402: PUSH
43403: EMPTY
43404: LIST
43405: LIST
43406: LIST
43407: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
43408: LD_ADDR_VAR 0 47
43412: PUSH
43413: LD_INT 2
43415: NEG
43416: PUSH
43417: LD_INT 3
43419: NEG
43420: PUSH
43421: EMPTY
43422: LIST
43423: LIST
43424: PUSH
43425: LD_INT 1
43427: NEG
43428: PUSH
43429: LD_INT 3
43431: NEG
43432: PUSH
43433: EMPTY
43434: LIST
43435: LIST
43436: PUSH
43437: EMPTY
43438: LIST
43439: LIST
43440: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
43441: LD_ADDR_VAR 0 48
43445: PUSH
43446: LD_INT 1
43448: PUSH
43449: LD_INT 2
43451: NEG
43452: PUSH
43453: EMPTY
43454: LIST
43455: LIST
43456: PUSH
43457: LD_INT 2
43459: PUSH
43460: LD_INT 1
43462: NEG
43463: PUSH
43464: EMPTY
43465: LIST
43466: LIST
43467: PUSH
43468: EMPTY
43469: LIST
43470: LIST
43471: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
43472: LD_ADDR_VAR 0 49
43476: PUSH
43477: LD_INT 3
43479: PUSH
43480: LD_INT 1
43482: PUSH
43483: EMPTY
43484: LIST
43485: LIST
43486: PUSH
43487: LD_INT 3
43489: PUSH
43490: LD_INT 2
43492: PUSH
43493: EMPTY
43494: LIST
43495: LIST
43496: PUSH
43497: EMPTY
43498: LIST
43499: LIST
43500: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
43501: LD_ADDR_VAR 0 50
43505: PUSH
43506: LD_INT 2
43508: PUSH
43509: LD_INT 3
43511: PUSH
43512: EMPTY
43513: LIST
43514: LIST
43515: PUSH
43516: LD_INT 1
43518: PUSH
43519: LD_INT 3
43521: PUSH
43522: EMPTY
43523: LIST
43524: LIST
43525: PUSH
43526: EMPTY
43527: LIST
43528: LIST
43529: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
43530: LD_ADDR_VAR 0 51
43534: PUSH
43535: LD_INT 1
43537: NEG
43538: PUSH
43539: LD_INT 2
43541: PUSH
43542: EMPTY
43543: LIST
43544: LIST
43545: PUSH
43546: LD_INT 2
43548: NEG
43549: PUSH
43550: LD_INT 1
43552: PUSH
43553: EMPTY
43554: LIST
43555: LIST
43556: PUSH
43557: EMPTY
43558: LIST
43559: LIST
43560: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43561: LD_ADDR_VAR 0 52
43565: PUSH
43566: LD_INT 3
43568: NEG
43569: PUSH
43570: LD_INT 1
43572: NEG
43573: PUSH
43574: EMPTY
43575: LIST
43576: LIST
43577: PUSH
43578: LD_INT 3
43580: NEG
43581: PUSH
43582: LD_INT 2
43584: NEG
43585: PUSH
43586: EMPTY
43587: LIST
43588: LIST
43589: PUSH
43590: EMPTY
43591: LIST
43592: LIST
43593: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43594: LD_ADDR_VAR 0 53
43598: PUSH
43599: LD_INT 1
43601: NEG
43602: PUSH
43603: LD_INT 3
43605: NEG
43606: PUSH
43607: EMPTY
43608: LIST
43609: LIST
43610: PUSH
43611: LD_INT 0
43613: PUSH
43614: LD_INT 3
43616: NEG
43617: PUSH
43618: EMPTY
43619: LIST
43620: LIST
43621: PUSH
43622: LD_INT 1
43624: PUSH
43625: LD_INT 2
43627: NEG
43628: PUSH
43629: EMPTY
43630: LIST
43631: LIST
43632: PUSH
43633: EMPTY
43634: LIST
43635: LIST
43636: LIST
43637: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43638: LD_ADDR_VAR 0 54
43642: PUSH
43643: LD_INT 2
43645: PUSH
43646: LD_INT 1
43648: NEG
43649: PUSH
43650: EMPTY
43651: LIST
43652: LIST
43653: PUSH
43654: LD_INT 3
43656: PUSH
43657: LD_INT 0
43659: PUSH
43660: EMPTY
43661: LIST
43662: LIST
43663: PUSH
43664: LD_INT 3
43666: PUSH
43667: LD_INT 1
43669: PUSH
43670: EMPTY
43671: LIST
43672: LIST
43673: PUSH
43674: EMPTY
43675: LIST
43676: LIST
43677: LIST
43678: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43679: LD_ADDR_VAR 0 55
43683: PUSH
43684: LD_INT 3
43686: PUSH
43687: LD_INT 2
43689: PUSH
43690: EMPTY
43691: LIST
43692: LIST
43693: PUSH
43694: LD_INT 3
43696: PUSH
43697: LD_INT 3
43699: PUSH
43700: EMPTY
43701: LIST
43702: LIST
43703: PUSH
43704: LD_INT 2
43706: PUSH
43707: LD_INT 3
43709: PUSH
43710: EMPTY
43711: LIST
43712: LIST
43713: PUSH
43714: EMPTY
43715: LIST
43716: LIST
43717: LIST
43718: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43719: LD_ADDR_VAR 0 56
43723: PUSH
43724: LD_INT 1
43726: PUSH
43727: LD_INT 3
43729: PUSH
43730: EMPTY
43731: LIST
43732: LIST
43733: PUSH
43734: LD_INT 0
43736: PUSH
43737: LD_INT 3
43739: PUSH
43740: EMPTY
43741: LIST
43742: LIST
43743: PUSH
43744: LD_INT 1
43746: NEG
43747: PUSH
43748: LD_INT 2
43750: PUSH
43751: EMPTY
43752: LIST
43753: LIST
43754: PUSH
43755: EMPTY
43756: LIST
43757: LIST
43758: LIST
43759: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43760: LD_ADDR_VAR 0 57
43764: PUSH
43765: LD_INT 2
43767: NEG
43768: PUSH
43769: LD_INT 1
43771: PUSH
43772: EMPTY
43773: LIST
43774: LIST
43775: PUSH
43776: LD_INT 3
43778: NEG
43779: PUSH
43780: LD_INT 0
43782: PUSH
43783: EMPTY
43784: LIST
43785: LIST
43786: PUSH
43787: LD_INT 3
43789: NEG
43790: PUSH
43791: LD_INT 1
43793: NEG
43794: PUSH
43795: EMPTY
43796: LIST
43797: LIST
43798: PUSH
43799: EMPTY
43800: LIST
43801: LIST
43802: LIST
43803: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43804: LD_ADDR_VAR 0 58
43808: PUSH
43809: LD_INT 2
43811: NEG
43812: PUSH
43813: LD_INT 3
43815: NEG
43816: PUSH
43817: EMPTY
43818: LIST
43819: LIST
43820: PUSH
43821: LD_INT 3
43823: NEG
43824: PUSH
43825: LD_INT 2
43827: NEG
43828: PUSH
43829: EMPTY
43830: LIST
43831: LIST
43832: PUSH
43833: LD_INT 3
43835: NEG
43836: PUSH
43837: LD_INT 3
43839: NEG
43840: PUSH
43841: EMPTY
43842: LIST
43843: LIST
43844: PUSH
43845: EMPTY
43846: LIST
43847: LIST
43848: LIST
43849: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
43850: LD_ADDR_VAR 0 59
43854: PUSH
43855: LD_INT 1
43857: NEG
43858: PUSH
43859: LD_INT 2
43861: NEG
43862: PUSH
43863: EMPTY
43864: LIST
43865: LIST
43866: PUSH
43867: LD_INT 0
43869: PUSH
43870: LD_INT 2
43872: NEG
43873: PUSH
43874: EMPTY
43875: LIST
43876: LIST
43877: PUSH
43878: LD_INT 1
43880: PUSH
43881: LD_INT 1
43883: NEG
43884: PUSH
43885: EMPTY
43886: LIST
43887: LIST
43888: PUSH
43889: EMPTY
43890: LIST
43891: LIST
43892: LIST
43893: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
43894: LD_ADDR_VAR 0 60
43898: PUSH
43899: LD_INT 1
43901: PUSH
43902: LD_INT 1
43904: NEG
43905: PUSH
43906: EMPTY
43907: LIST
43908: LIST
43909: PUSH
43910: LD_INT 2
43912: PUSH
43913: LD_INT 0
43915: PUSH
43916: EMPTY
43917: LIST
43918: LIST
43919: PUSH
43920: LD_INT 2
43922: PUSH
43923: LD_INT 1
43925: PUSH
43926: EMPTY
43927: LIST
43928: LIST
43929: PUSH
43930: EMPTY
43931: LIST
43932: LIST
43933: LIST
43934: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
43935: LD_ADDR_VAR 0 61
43939: PUSH
43940: LD_INT 2
43942: PUSH
43943: LD_INT 1
43945: PUSH
43946: EMPTY
43947: LIST
43948: LIST
43949: PUSH
43950: LD_INT 2
43952: PUSH
43953: LD_INT 2
43955: PUSH
43956: EMPTY
43957: LIST
43958: LIST
43959: PUSH
43960: LD_INT 1
43962: PUSH
43963: LD_INT 2
43965: PUSH
43966: EMPTY
43967: LIST
43968: LIST
43969: PUSH
43970: EMPTY
43971: LIST
43972: LIST
43973: LIST
43974: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
43975: LD_ADDR_VAR 0 62
43979: PUSH
43980: LD_INT 1
43982: PUSH
43983: LD_INT 2
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: PUSH
43990: LD_INT 0
43992: PUSH
43993: LD_INT 2
43995: PUSH
43996: EMPTY
43997: LIST
43998: LIST
43999: PUSH
44000: LD_INT 1
44002: NEG
44003: PUSH
44004: LD_INT 1
44006: PUSH
44007: EMPTY
44008: LIST
44009: LIST
44010: PUSH
44011: EMPTY
44012: LIST
44013: LIST
44014: LIST
44015: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
44016: LD_ADDR_VAR 0 63
44020: PUSH
44021: LD_INT 1
44023: NEG
44024: PUSH
44025: LD_INT 1
44027: PUSH
44028: EMPTY
44029: LIST
44030: LIST
44031: PUSH
44032: LD_INT 2
44034: NEG
44035: PUSH
44036: LD_INT 0
44038: PUSH
44039: EMPTY
44040: LIST
44041: LIST
44042: PUSH
44043: LD_INT 2
44045: NEG
44046: PUSH
44047: LD_INT 1
44049: NEG
44050: PUSH
44051: EMPTY
44052: LIST
44053: LIST
44054: PUSH
44055: EMPTY
44056: LIST
44057: LIST
44058: LIST
44059: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44060: LD_ADDR_VAR 0 64
44064: PUSH
44065: LD_INT 1
44067: NEG
44068: PUSH
44069: LD_INT 2
44071: NEG
44072: PUSH
44073: EMPTY
44074: LIST
44075: LIST
44076: PUSH
44077: LD_INT 2
44079: NEG
44080: PUSH
44081: LD_INT 1
44083: NEG
44084: PUSH
44085: EMPTY
44086: LIST
44087: LIST
44088: PUSH
44089: LD_INT 2
44091: NEG
44092: PUSH
44093: LD_INT 2
44095: NEG
44096: PUSH
44097: EMPTY
44098: LIST
44099: LIST
44100: PUSH
44101: EMPTY
44102: LIST
44103: LIST
44104: LIST
44105: ST_TO_ADDR
// end ; 2 :
44106: GO 47372
44108: LD_INT 2
44110: DOUBLE
44111: EQUAL
44112: IFTRUE 44116
44114: GO 47371
44116: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
44117: LD_ADDR_VAR 0 29
44121: PUSH
44122: LD_INT 4
44124: PUSH
44125: LD_INT 0
44127: PUSH
44128: EMPTY
44129: LIST
44130: LIST
44131: PUSH
44132: LD_INT 4
44134: PUSH
44135: LD_INT 1
44137: NEG
44138: PUSH
44139: EMPTY
44140: LIST
44141: LIST
44142: PUSH
44143: LD_INT 5
44145: PUSH
44146: LD_INT 0
44148: PUSH
44149: EMPTY
44150: LIST
44151: LIST
44152: PUSH
44153: LD_INT 5
44155: PUSH
44156: LD_INT 1
44158: PUSH
44159: EMPTY
44160: LIST
44161: LIST
44162: PUSH
44163: LD_INT 4
44165: PUSH
44166: LD_INT 1
44168: PUSH
44169: EMPTY
44170: LIST
44171: LIST
44172: PUSH
44173: LD_INT 3
44175: PUSH
44176: LD_INT 0
44178: PUSH
44179: EMPTY
44180: LIST
44181: LIST
44182: PUSH
44183: LD_INT 3
44185: PUSH
44186: LD_INT 1
44188: NEG
44189: PUSH
44190: EMPTY
44191: LIST
44192: LIST
44193: PUSH
44194: LD_INT 3
44196: PUSH
44197: LD_INT 2
44199: NEG
44200: PUSH
44201: EMPTY
44202: LIST
44203: LIST
44204: PUSH
44205: LD_INT 5
44207: PUSH
44208: LD_INT 2
44210: PUSH
44211: EMPTY
44212: LIST
44213: LIST
44214: PUSH
44215: LD_INT 3
44217: PUSH
44218: LD_INT 3
44220: PUSH
44221: EMPTY
44222: LIST
44223: LIST
44224: PUSH
44225: LD_INT 3
44227: PUSH
44228: LD_INT 2
44230: PUSH
44231: EMPTY
44232: LIST
44233: LIST
44234: PUSH
44235: LD_INT 4
44237: PUSH
44238: LD_INT 3
44240: PUSH
44241: EMPTY
44242: LIST
44243: LIST
44244: PUSH
44245: LD_INT 4
44247: PUSH
44248: LD_INT 4
44250: PUSH
44251: EMPTY
44252: LIST
44253: LIST
44254: PUSH
44255: LD_INT 3
44257: PUSH
44258: LD_INT 4
44260: PUSH
44261: EMPTY
44262: LIST
44263: LIST
44264: PUSH
44265: LD_INT 2
44267: PUSH
44268: LD_INT 3
44270: PUSH
44271: EMPTY
44272: LIST
44273: LIST
44274: PUSH
44275: LD_INT 2
44277: PUSH
44278: LD_INT 2
44280: PUSH
44281: EMPTY
44282: LIST
44283: LIST
44284: PUSH
44285: LD_INT 4
44287: PUSH
44288: LD_INT 2
44290: PUSH
44291: EMPTY
44292: LIST
44293: LIST
44294: PUSH
44295: LD_INT 2
44297: PUSH
44298: LD_INT 4
44300: PUSH
44301: EMPTY
44302: LIST
44303: LIST
44304: PUSH
44305: LD_INT 0
44307: PUSH
44308: LD_INT 4
44310: PUSH
44311: EMPTY
44312: LIST
44313: LIST
44314: PUSH
44315: LD_INT 0
44317: PUSH
44318: LD_INT 3
44320: PUSH
44321: EMPTY
44322: LIST
44323: LIST
44324: PUSH
44325: LD_INT 1
44327: PUSH
44328: LD_INT 4
44330: PUSH
44331: EMPTY
44332: LIST
44333: LIST
44334: PUSH
44335: LD_INT 1
44337: PUSH
44338: LD_INT 5
44340: PUSH
44341: EMPTY
44342: LIST
44343: LIST
44344: PUSH
44345: LD_INT 0
44347: PUSH
44348: LD_INT 5
44350: PUSH
44351: EMPTY
44352: LIST
44353: LIST
44354: PUSH
44355: LD_INT 1
44357: NEG
44358: PUSH
44359: LD_INT 4
44361: PUSH
44362: EMPTY
44363: LIST
44364: LIST
44365: PUSH
44366: LD_INT 1
44368: NEG
44369: PUSH
44370: LD_INT 3
44372: PUSH
44373: EMPTY
44374: LIST
44375: LIST
44376: PUSH
44377: LD_INT 2
44379: PUSH
44380: LD_INT 5
44382: PUSH
44383: EMPTY
44384: LIST
44385: LIST
44386: PUSH
44387: LD_INT 2
44389: NEG
44390: PUSH
44391: LD_INT 3
44393: PUSH
44394: EMPTY
44395: LIST
44396: LIST
44397: PUSH
44398: LD_INT 3
44400: NEG
44401: PUSH
44402: LD_INT 0
44404: PUSH
44405: EMPTY
44406: LIST
44407: LIST
44408: PUSH
44409: LD_INT 3
44411: NEG
44412: PUSH
44413: LD_INT 1
44415: NEG
44416: PUSH
44417: EMPTY
44418: LIST
44419: LIST
44420: PUSH
44421: LD_INT 2
44423: NEG
44424: PUSH
44425: LD_INT 0
44427: PUSH
44428: EMPTY
44429: LIST
44430: LIST
44431: PUSH
44432: LD_INT 2
44434: NEG
44435: PUSH
44436: LD_INT 1
44438: PUSH
44439: EMPTY
44440: LIST
44441: LIST
44442: PUSH
44443: LD_INT 3
44445: NEG
44446: PUSH
44447: LD_INT 1
44449: PUSH
44450: EMPTY
44451: LIST
44452: LIST
44453: PUSH
44454: LD_INT 4
44456: NEG
44457: PUSH
44458: LD_INT 0
44460: PUSH
44461: EMPTY
44462: LIST
44463: LIST
44464: PUSH
44465: LD_INT 4
44467: NEG
44468: PUSH
44469: LD_INT 1
44471: NEG
44472: PUSH
44473: EMPTY
44474: LIST
44475: LIST
44476: PUSH
44477: LD_INT 4
44479: NEG
44480: PUSH
44481: LD_INT 2
44483: NEG
44484: PUSH
44485: EMPTY
44486: LIST
44487: LIST
44488: PUSH
44489: LD_INT 2
44491: NEG
44492: PUSH
44493: LD_INT 2
44495: PUSH
44496: EMPTY
44497: LIST
44498: LIST
44499: PUSH
44500: LD_INT 4
44502: NEG
44503: PUSH
44504: LD_INT 4
44506: NEG
44507: PUSH
44508: EMPTY
44509: LIST
44510: LIST
44511: PUSH
44512: LD_INT 4
44514: NEG
44515: PUSH
44516: LD_INT 5
44518: NEG
44519: PUSH
44520: EMPTY
44521: LIST
44522: LIST
44523: PUSH
44524: LD_INT 3
44526: NEG
44527: PUSH
44528: LD_INT 4
44530: NEG
44531: PUSH
44532: EMPTY
44533: LIST
44534: LIST
44535: PUSH
44536: LD_INT 3
44538: NEG
44539: PUSH
44540: LD_INT 3
44542: NEG
44543: PUSH
44544: EMPTY
44545: LIST
44546: LIST
44547: PUSH
44548: LD_INT 4
44550: NEG
44551: PUSH
44552: LD_INT 3
44554: NEG
44555: PUSH
44556: EMPTY
44557: LIST
44558: LIST
44559: PUSH
44560: LD_INT 5
44562: NEG
44563: PUSH
44564: LD_INT 4
44566: NEG
44567: PUSH
44568: EMPTY
44569: LIST
44570: LIST
44571: PUSH
44572: LD_INT 5
44574: NEG
44575: PUSH
44576: LD_INT 5
44578: NEG
44579: PUSH
44580: EMPTY
44581: LIST
44582: LIST
44583: PUSH
44584: LD_INT 3
44586: NEG
44587: PUSH
44588: LD_INT 5
44590: NEG
44591: PUSH
44592: EMPTY
44593: LIST
44594: LIST
44595: PUSH
44596: LD_INT 5
44598: NEG
44599: PUSH
44600: LD_INT 3
44602: NEG
44603: PUSH
44604: EMPTY
44605: LIST
44606: LIST
44607: PUSH
44608: EMPTY
44609: LIST
44610: LIST
44611: LIST
44612: LIST
44613: LIST
44614: LIST
44615: LIST
44616: LIST
44617: LIST
44618: LIST
44619: LIST
44620: LIST
44621: LIST
44622: LIST
44623: LIST
44624: LIST
44625: LIST
44626: LIST
44627: LIST
44628: LIST
44629: LIST
44630: LIST
44631: LIST
44632: LIST
44633: LIST
44634: LIST
44635: LIST
44636: LIST
44637: LIST
44638: LIST
44639: LIST
44640: LIST
44641: LIST
44642: LIST
44643: LIST
44644: LIST
44645: LIST
44646: LIST
44647: LIST
44648: LIST
44649: LIST
44650: LIST
44651: LIST
44652: LIST
44653: LIST
44654: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
44655: LD_ADDR_VAR 0 30
44659: PUSH
44660: LD_INT 4
44662: PUSH
44663: LD_INT 4
44665: PUSH
44666: EMPTY
44667: LIST
44668: LIST
44669: PUSH
44670: LD_INT 4
44672: PUSH
44673: LD_INT 3
44675: PUSH
44676: EMPTY
44677: LIST
44678: LIST
44679: PUSH
44680: LD_INT 5
44682: PUSH
44683: LD_INT 4
44685: PUSH
44686: EMPTY
44687: LIST
44688: LIST
44689: PUSH
44690: LD_INT 5
44692: PUSH
44693: LD_INT 5
44695: PUSH
44696: EMPTY
44697: LIST
44698: LIST
44699: PUSH
44700: LD_INT 4
44702: PUSH
44703: LD_INT 5
44705: PUSH
44706: EMPTY
44707: LIST
44708: LIST
44709: PUSH
44710: LD_INT 3
44712: PUSH
44713: LD_INT 4
44715: PUSH
44716: EMPTY
44717: LIST
44718: LIST
44719: PUSH
44720: LD_INT 3
44722: PUSH
44723: LD_INT 3
44725: PUSH
44726: EMPTY
44727: LIST
44728: LIST
44729: PUSH
44730: LD_INT 5
44732: PUSH
44733: LD_INT 3
44735: PUSH
44736: EMPTY
44737: LIST
44738: LIST
44739: PUSH
44740: LD_INT 3
44742: PUSH
44743: LD_INT 5
44745: PUSH
44746: EMPTY
44747: LIST
44748: LIST
44749: PUSH
44750: LD_INT 0
44752: PUSH
44753: LD_INT 3
44755: PUSH
44756: EMPTY
44757: LIST
44758: LIST
44759: PUSH
44760: LD_INT 0
44762: PUSH
44763: LD_INT 2
44765: PUSH
44766: EMPTY
44767: LIST
44768: LIST
44769: PUSH
44770: LD_INT 1
44772: PUSH
44773: LD_INT 3
44775: PUSH
44776: EMPTY
44777: LIST
44778: LIST
44779: PUSH
44780: LD_INT 1
44782: PUSH
44783: LD_INT 4
44785: PUSH
44786: EMPTY
44787: LIST
44788: LIST
44789: PUSH
44790: LD_INT 0
44792: PUSH
44793: LD_INT 4
44795: PUSH
44796: EMPTY
44797: LIST
44798: LIST
44799: PUSH
44800: LD_INT 1
44802: NEG
44803: PUSH
44804: LD_INT 3
44806: PUSH
44807: EMPTY
44808: LIST
44809: LIST
44810: PUSH
44811: LD_INT 1
44813: NEG
44814: PUSH
44815: LD_INT 2
44817: PUSH
44818: EMPTY
44819: LIST
44820: LIST
44821: PUSH
44822: LD_INT 2
44824: PUSH
44825: LD_INT 4
44827: PUSH
44828: EMPTY
44829: LIST
44830: LIST
44831: PUSH
44832: LD_INT 2
44834: NEG
44835: PUSH
44836: LD_INT 2
44838: PUSH
44839: EMPTY
44840: LIST
44841: LIST
44842: PUSH
44843: LD_INT 4
44845: NEG
44846: PUSH
44847: LD_INT 0
44849: PUSH
44850: EMPTY
44851: LIST
44852: LIST
44853: PUSH
44854: LD_INT 4
44856: NEG
44857: PUSH
44858: LD_INT 1
44860: NEG
44861: PUSH
44862: EMPTY
44863: LIST
44864: LIST
44865: PUSH
44866: LD_INT 3
44868: NEG
44869: PUSH
44870: LD_INT 0
44872: PUSH
44873: EMPTY
44874: LIST
44875: LIST
44876: PUSH
44877: LD_INT 3
44879: NEG
44880: PUSH
44881: LD_INT 1
44883: PUSH
44884: EMPTY
44885: LIST
44886: LIST
44887: PUSH
44888: LD_INT 4
44890: NEG
44891: PUSH
44892: LD_INT 1
44894: PUSH
44895: EMPTY
44896: LIST
44897: LIST
44898: PUSH
44899: LD_INT 5
44901: NEG
44902: PUSH
44903: LD_INT 0
44905: PUSH
44906: EMPTY
44907: LIST
44908: LIST
44909: PUSH
44910: LD_INT 5
44912: NEG
44913: PUSH
44914: LD_INT 1
44916: NEG
44917: PUSH
44918: EMPTY
44919: LIST
44920: LIST
44921: PUSH
44922: LD_INT 5
44924: NEG
44925: PUSH
44926: LD_INT 2
44928: NEG
44929: PUSH
44930: EMPTY
44931: LIST
44932: LIST
44933: PUSH
44934: LD_INT 3
44936: NEG
44937: PUSH
44938: LD_INT 2
44940: PUSH
44941: EMPTY
44942: LIST
44943: LIST
44944: PUSH
44945: LD_INT 3
44947: NEG
44948: PUSH
44949: LD_INT 3
44951: NEG
44952: PUSH
44953: EMPTY
44954: LIST
44955: LIST
44956: PUSH
44957: LD_INT 3
44959: NEG
44960: PUSH
44961: LD_INT 4
44963: NEG
44964: PUSH
44965: EMPTY
44966: LIST
44967: LIST
44968: PUSH
44969: LD_INT 2
44971: NEG
44972: PUSH
44973: LD_INT 3
44975: NEG
44976: PUSH
44977: EMPTY
44978: LIST
44979: LIST
44980: PUSH
44981: LD_INT 2
44983: NEG
44984: PUSH
44985: LD_INT 2
44987: NEG
44988: PUSH
44989: EMPTY
44990: LIST
44991: LIST
44992: PUSH
44993: LD_INT 3
44995: NEG
44996: PUSH
44997: LD_INT 2
44999: NEG
45000: PUSH
45001: EMPTY
45002: LIST
45003: LIST
45004: PUSH
45005: LD_INT 4
45007: NEG
45008: PUSH
45009: LD_INT 3
45011: NEG
45012: PUSH
45013: EMPTY
45014: LIST
45015: LIST
45016: PUSH
45017: LD_INT 4
45019: NEG
45020: PUSH
45021: LD_INT 4
45023: NEG
45024: PUSH
45025: EMPTY
45026: LIST
45027: LIST
45028: PUSH
45029: LD_INT 2
45031: NEG
45032: PUSH
45033: LD_INT 4
45035: NEG
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: PUSH
45041: LD_INT 4
45043: NEG
45044: PUSH
45045: LD_INT 2
45047: NEG
45048: PUSH
45049: EMPTY
45050: LIST
45051: LIST
45052: PUSH
45053: LD_INT 0
45055: PUSH
45056: LD_INT 4
45058: NEG
45059: PUSH
45060: EMPTY
45061: LIST
45062: LIST
45063: PUSH
45064: LD_INT 0
45066: PUSH
45067: LD_INT 5
45069: NEG
45070: PUSH
45071: EMPTY
45072: LIST
45073: LIST
45074: PUSH
45075: LD_INT 1
45077: PUSH
45078: LD_INT 4
45080: NEG
45081: PUSH
45082: EMPTY
45083: LIST
45084: LIST
45085: PUSH
45086: LD_INT 1
45088: PUSH
45089: LD_INT 3
45091: NEG
45092: PUSH
45093: EMPTY
45094: LIST
45095: LIST
45096: PUSH
45097: LD_INT 0
45099: PUSH
45100: LD_INT 3
45102: NEG
45103: PUSH
45104: EMPTY
45105: LIST
45106: LIST
45107: PUSH
45108: LD_INT 1
45110: NEG
45111: PUSH
45112: LD_INT 4
45114: NEG
45115: PUSH
45116: EMPTY
45117: LIST
45118: LIST
45119: PUSH
45120: LD_INT 1
45122: NEG
45123: PUSH
45124: LD_INT 5
45126: NEG
45127: PUSH
45128: EMPTY
45129: LIST
45130: LIST
45131: PUSH
45132: LD_INT 2
45134: PUSH
45135: LD_INT 3
45137: NEG
45138: PUSH
45139: EMPTY
45140: LIST
45141: LIST
45142: PUSH
45143: LD_INT 2
45145: NEG
45146: PUSH
45147: LD_INT 5
45149: NEG
45150: PUSH
45151: EMPTY
45152: LIST
45153: LIST
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: LIST
45159: LIST
45160: LIST
45161: LIST
45162: LIST
45163: LIST
45164: LIST
45165: LIST
45166: LIST
45167: LIST
45168: LIST
45169: LIST
45170: LIST
45171: LIST
45172: LIST
45173: LIST
45174: LIST
45175: LIST
45176: LIST
45177: LIST
45178: LIST
45179: LIST
45180: LIST
45181: LIST
45182: LIST
45183: LIST
45184: LIST
45185: LIST
45186: LIST
45187: LIST
45188: LIST
45189: LIST
45190: LIST
45191: LIST
45192: LIST
45193: LIST
45194: LIST
45195: LIST
45196: LIST
45197: LIST
45198: LIST
45199: LIST
45200: LIST
45201: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
45202: LD_ADDR_VAR 0 31
45206: PUSH
45207: LD_INT 0
45209: PUSH
45210: LD_INT 4
45212: PUSH
45213: EMPTY
45214: LIST
45215: LIST
45216: PUSH
45217: LD_INT 0
45219: PUSH
45220: LD_INT 3
45222: PUSH
45223: EMPTY
45224: LIST
45225: LIST
45226: PUSH
45227: LD_INT 1
45229: PUSH
45230: LD_INT 4
45232: PUSH
45233: EMPTY
45234: LIST
45235: LIST
45236: PUSH
45237: LD_INT 1
45239: PUSH
45240: LD_INT 5
45242: PUSH
45243: EMPTY
45244: LIST
45245: LIST
45246: PUSH
45247: LD_INT 0
45249: PUSH
45250: LD_INT 5
45252: PUSH
45253: EMPTY
45254: LIST
45255: LIST
45256: PUSH
45257: LD_INT 1
45259: NEG
45260: PUSH
45261: LD_INT 4
45263: PUSH
45264: EMPTY
45265: LIST
45266: LIST
45267: PUSH
45268: LD_INT 1
45270: NEG
45271: PUSH
45272: LD_INT 3
45274: PUSH
45275: EMPTY
45276: LIST
45277: LIST
45278: PUSH
45279: LD_INT 2
45281: PUSH
45282: LD_INT 5
45284: PUSH
45285: EMPTY
45286: LIST
45287: LIST
45288: PUSH
45289: LD_INT 2
45291: NEG
45292: PUSH
45293: LD_INT 3
45295: PUSH
45296: EMPTY
45297: LIST
45298: LIST
45299: PUSH
45300: LD_INT 3
45302: NEG
45303: PUSH
45304: LD_INT 0
45306: PUSH
45307: EMPTY
45308: LIST
45309: LIST
45310: PUSH
45311: LD_INT 3
45313: NEG
45314: PUSH
45315: LD_INT 1
45317: NEG
45318: PUSH
45319: EMPTY
45320: LIST
45321: LIST
45322: PUSH
45323: LD_INT 2
45325: NEG
45326: PUSH
45327: LD_INT 0
45329: PUSH
45330: EMPTY
45331: LIST
45332: LIST
45333: PUSH
45334: LD_INT 2
45336: NEG
45337: PUSH
45338: LD_INT 1
45340: PUSH
45341: EMPTY
45342: LIST
45343: LIST
45344: PUSH
45345: LD_INT 3
45347: NEG
45348: PUSH
45349: LD_INT 1
45351: PUSH
45352: EMPTY
45353: LIST
45354: LIST
45355: PUSH
45356: LD_INT 4
45358: NEG
45359: PUSH
45360: LD_INT 0
45362: PUSH
45363: EMPTY
45364: LIST
45365: LIST
45366: PUSH
45367: LD_INT 4
45369: NEG
45370: PUSH
45371: LD_INT 1
45373: NEG
45374: PUSH
45375: EMPTY
45376: LIST
45377: LIST
45378: PUSH
45379: LD_INT 4
45381: NEG
45382: PUSH
45383: LD_INT 2
45385: NEG
45386: PUSH
45387: EMPTY
45388: LIST
45389: LIST
45390: PUSH
45391: LD_INT 2
45393: NEG
45394: PUSH
45395: LD_INT 2
45397: PUSH
45398: EMPTY
45399: LIST
45400: LIST
45401: PUSH
45402: LD_INT 4
45404: NEG
45405: PUSH
45406: LD_INT 4
45408: NEG
45409: PUSH
45410: EMPTY
45411: LIST
45412: LIST
45413: PUSH
45414: LD_INT 4
45416: NEG
45417: PUSH
45418: LD_INT 5
45420: NEG
45421: PUSH
45422: EMPTY
45423: LIST
45424: LIST
45425: PUSH
45426: LD_INT 3
45428: NEG
45429: PUSH
45430: LD_INT 4
45432: NEG
45433: PUSH
45434: EMPTY
45435: LIST
45436: LIST
45437: PUSH
45438: LD_INT 3
45440: NEG
45441: PUSH
45442: LD_INT 3
45444: NEG
45445: PUSH
45446: EMPTY
45447: LIST
45448: LIST
45449: PUSH
45450: LD_INT 4
45452: NEG
45453: PUSH
45454: LD_INT 3
45456: NEG
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: PUSH
45462: LD_INT 5
45464: NEG
45465: PUSH
45466: LD_INT 4
45468: NEG
45469: PUSH
45470: EMPTY
45471: LIST
45472: LIST
45473: PUSH
45474: LD_INT 5
45476: NEG
45477: PUSH
45478: LD_INT 5
45480: NEG
45481: PUSH
45482: EMPTY
45483: LIST
45484: LIST
45485: PUSH
45486: LD_INT 3
45488: NEG
45489: PUSH
45490: LD_INT 5
45492: NEG
45493: PUSH
45494: EMPTY
45495: LIST
45496: LIST
45497: PUSH
45498: LD_INT 5
45500: NEG
45501: PUSH
45502: LD_INT 3
45504: NEG
45505: PUSH
45506: EMPTY
45507: LIST
45508: LIST
45509: PUSH
45510: LD_INT 0
45512: PUSH
45513: LD_INT 3
45515: NEG
45516: PUSH
45517: EMPTY
45518: LIST
45519: LIST
45520: PUSH
45521: LD_INT 0
45523: PUSH
45524: LD_INT 4
45526: NEG
45527: PUSH
45528: EMPTY
45529: LIST
45530: LIST
45531: PUSH
45532: LD_INT 1
45534: PUSH
45535: LD_INT 3
45537: NEG
45538: PUSH
45539: EMPTY
45540: LIST
45541: LIST
45542: PUSH
45543: LD_INT 1
45545: PUSH
45546: LD_INT 2
45548: NEG
45549: PUSH
45550: EMPTY
45551: LIST
45552: LIST
45553: PUSH
45554: LD_INT 0
45556: PUSH
45557: LD_INT 2
45559: NEG
45560: PUSH
45561: EMPTY
45562: LIST
45563: LIST
45564: PUSH
45565: LD_INT 1
45567: NEG
45568: PUSH
45569: LD_INT 3
45571: NEG
45572: PUSH
45573: EMPTY
45574: LIST
45575: LIST
45576: PUSH
45577: LD_INT 1
45579: NEG
45580: PUSH
45581: LD_INT 4
45583: NEG
45584: PUSH
45585: EMPTY
45586: LIST
45587: LIST
45588: PUSH
45589: LD_INT 2
45591: PUSH
45592: LD_INT 2
45594: NEG
45595: PUSH
45596: EMPTY
45597: LIST
45598: LIST
45599: PUSH
45600: LD_INT 2
45602: NEG
45603: PUSH
45604: LD_INT 4
45606: NEG
45607: PUSH
45608: EMPTY
45609: LIST
45610: LIST
45611: PUSH
45612: LD_INT 4
45614: PUSH
45615: LD_INT 0
45617: PUSH
45618: EMPTY
45619: LIST
45620: LIST
45621: PUSH
45622: LD_INT 4
45624: PUSH
45625: LD_INT 1
45627: NEG
45628: PUSH
45629: EMPTY
45630: LIST
45631: LIST
45632: PUSH
45633: LD_INT 5
45635: PUSH
45636: LD_INT 0
45638: PUSH
45639: EMPTY
45640: LIST
45641: LIST
45642: PUSH
45643: LD_INT 5
45645: PUSH
45646: LD_INT 1
45648: PUSH
45649: EMPTY
45650: LIST
45651: LIST
45652: PUSH
45653: LD_INT 4
45655: PUSH
45656: LD_INT 1
45658: PUSH
45659: EMPTY
45660: LIST
45661: LIST
45662: PUSH
45663: LD_INT 3
45665: PUSH
45666: LD_INT 0
45668: PUSH
45669: EMPTY
45670: LIST
45671: LIST
45672: PUSH
45673: LD_INT 3
45675: PUSH
45676: LD_INT 1
45678: NEG
45679: PUSH
45680: EMPTY
45681: LIST
45682: LIST
45683: PUSH
45684: LD_INT 3
45686: PUSH
45687: LD_INT 2
45689: NEG
45690: PUSH
45691: EMPTY
45692: LIST
45693: LIST
45694: PUSH
45695: LD_INT 5
45697: PUSH
45698: LD_INT 2
45700: PUSH
45701: EMPTY
45702: LIST
45703: LIST
45704: PUSH
45705: EMPTY
45706: LIST
45707: LIST
45708: LIST
45709: LIST
45710: LIST
45711: LIST
45712: LIST
45713: LIST
45714: LIST
45715: LIST
45716: LIST
45717: LIST
45718: LIST
45719: LIST
45720: LIST
45721: LIST
45722: LIST
45723: LIST
45724: LIST
45725: LIST
45726: LIST
45727: LIST
45728: LIST
45729: LIST
45730: LIST
45731: LIST
45732: LIST
45733: LIST
45734: LIST
45735: LIST
45736: LIST
45737: LIST
45738: LIST
45739: LIST
45740: LIST
45741: LIST
45742: LIST
45743: LIST
45744: LIST
45745: LIST
45746: LIST
45747: LIST
45748: LIST
45749: LIST
45750: LIST
45751: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
45752: LD_ADDR_VAR 0 32
45756: PUSH
45757: LD_INT 4
45759: NEG
45760: PUSH
45761: LD_INT 0
45763: PUSH
45764: EMPTY
45765: LIST
45766: LIST
45767: PUSH
45768: LD_INT 4
45770: NEG
45771: PUSH
45772: LD_INT 1
45774: NEG
45775: PUSH
45776: EMPTY
45777: LIST
45778: LIST
45779: PUSH
45780: LD_INT 3
45782: NEG
45783: PUSH
45784: LD_INT 0
45786: PUSH
45787: EMPTY
45788: LIST
45789: LIST
45790: PUSH
45791: LD_INT 3
45793: NEG
45794: PUSH
45795: LD_INT 1
45797: PUSH
45798: EMPTY
45799: LIST
45800: LIST
45801: PUSH
45802: LD_INT 4
45804: NEG
45805: PUSH
45806: LD_INT 1
45808: PUSH
45809: EMPTY
45810: LIST
45811: LIST
45812: PUSH
45813: LD_INT 5
45815: NEG
45816: PUSH
45817: LD_INT 0
45819: PUSH
45820: EMPTY
45821: LIST
45822: LIST
45823: PUSH
45824: LD_INT 5
45826: NEG
45827: PUSH
45828: LD_INT 1
45830: NEG
45831: PUSH
45832: EMPTY
45833: LIST
45834: LIST
45835: PUSH
45836: LD_INT 5
45838: NEG
45839: PUSH
45840: LD_INT 2
45842: NEG
45843: PUSH
45844: EMPTY
45845: LIST
45846: LIST
45847: PUSH
45848: LD_INT 3
45850: NEG
45851: PUSH
45852: LD_INT 2
45854: PUSH
45855: EMPTY
45856: LIST
45857: LIST
45858: PUSH
45859: LD_INT 3
45861: NEG
45862: PUSH
45863: LD_INT 3
45865: NEG
45866: PUSH
45867: EMPTY
45868: LIST
45869: LIST
45870: PUSH
45871: LD_INT 3
45873: NEG
45874: PUSH
45875: LD_INT 4
45877: NEG
45878: PUSH
45879: EMPTY
45880: LIST
45881: LIST
45882: PUSH
45883: LD_INT 2
45885: NEG
45886: PUSH
45887: LD_INT 3
45889: NEG
45890: PUSH
45891: EMPTY
45892: LIST
45893: LIST
45894: PUSH
45895: LD_INT 2
45897: NEG
45898: PUSH
45899: LD_INT 2
45901: NEG
45902: PUSH
45903: EMPTY
45904: LIST
45905: LIST
45906: PUSH
45907: LD_INT 3
45909: NEG
45910: PUSH
45911: LD_INT 2
45913: NEG
45914: PUSH
45915: EMPTY
45916: LIST
45917: LIST
45918: PUSH
45919: LD_INT 4
45921: NEG
45922: PUSH
45923: LD_INT 3
45925: NEG
45926: PUSH
45927: EMPTY
45928: LIST
45929: LIST
45930: PUSH
45931: LD_INT 4
45933: NEG
45934: PUSH
45935: LD_INT 4
45937: NEG
45938: PUSH
45939: EMPTY
45940: LIST
45941: LIST
45942: PUSH
45943: LD_INT 2
45945: NEG
45946: PUSH
45947: LD_INT 4
45949: NEG
45950: PUSH
45951: EMPTY
45952: LIST
45953: LIST
45954: PUSH
45955: LD_INT 4
45957: NEG
45958: PUSH
45959: LD_INT 2
45961: NEG
45962: PUSH
45963: EMPTY
45964: LIST
45965: LIST
45966: PUSH
45967: LD_INT 0
45969: PUSH
45970: LD_INT 4
45972: NEG
45973: PUSH
45974: EMPTY
45975: LIST
45976: LIST
45977: PUSH
45978: LD_INT 0
45980: PUSH
45981: LD_INT 5
45983: NEG
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: PUSH
45989: LD_INT 1
45991: PUSH
45992: LD_INT 4
45994: NEG
45995: PUSH
45996: EMPTY
45997: LIST
45998: LIST
45999: PUSH
46000: LD_INT 1
46002: PUSH
46003: LD_INT 3
46005: NEG
46006: PUSH
46007: EMPTY
46008: LIST
46009: LIST
46010: PUSH
46011: LD_INT 0
46013: PUSH
46014: LD_INT 3
46016: NEG
46017: PUSH
46018: EMPTY
46019: LIST
46020: LIST
46021: PUSH
46022: LD_INT 1
46024: NEG
46025: PUSH
46026: LD_INT 4
46028: NEG
46029: PUSH
46030: EMPTY
46031: LIST
46032: LIST
46033: PUSH
46034: LD_INT 1
46036: NEG
46037: PUSH
46038: LD_INT 5
46040: NEG
46041: PUSH
46042: EMPTY
46043: LIST
46044: LIST
46045: PUSH
46046: LD_INT 2
46048: PUSH
46049: LD_INT 3
46051: NEG
46052: PUSH
46053: EMPTY
46054: LIST
46055: LIST
46056: PUSH
46057: LD_INT 2
46059: NEG
46060: PUSH
46061: LD_INT 5
46063: NEG
46064: PUSH
46065: EMPTY
46066: LIST
46067: LIST
46068: PUSH
46069: LD_INT 3
46071: PUSH
46072: LD_INT 0
46074: PUSH
46075: EMPTY
46076: LIST
46077: LIST
46078: PUSH
46079: LD_INT 3
46081: PUSH
46082: LD_INT 1
46084: NEG
46085: PUSH
46086: EMPTY
46087: LIST
46088: LIST
46089: PUSH
46090: LD_INT 4
46092: PUSH
46093: LD_INT 0
46095: PUSH
46096: EMPTY
46097: LIST
46098: LIST
46099: PUSH
46100: LD_INT 4
46102: PUSH
46103: LD_INT 1
46105: PUSH
46106: EMPTY
46107: LIST
46108: LIST
46109: PUSH
46110: LD_INT 3
46112: PUSH
46113: LD_INT 1
46115: PUSH
46116: EMPTY
46117: LIST
46118: LIST
46119: PUSH
46120: LD_INT 2
46122: PUSH
46123: LD_INT 0
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: PUSH
46130: LD_INT 2
46132: PUSH
46133: LD_INT 1
46135: NEG
46136: PUSH
46137: EMPTY
46138: LIST
46139: LIST
46140: PUSH
46141: LD_INT 2
46143: PUSH
46144: LD_INT 2
46146: NEG
46147: PUSH
46148: EMPTY
46149: LIST
46150: LIST
46151: PUSH
46152: LD_INT 4
46154: PUSH
46155: LD_INT 2
46157: PUSH
46158: EMPTY
46159: LIST
46160: LIST
46161: PUSH
46162: LD_INT 4
46164: PUSH
46165: LD_INT 4
46167: PUSH
46168: EMPTY
46169: LIST
46170: LIST
46171: PUSH
46172: LD_INT 4
46174: PUSH
46175: LD_INT 3
46177: PUSH
46178: EMPTY
46179: LIST
46180: LIST
46181: PUSH
46182: LD_INT 5
46184: PUSH
46185: LD_INT 4
46187: PUSH
46188: EMPTY
46189: LIST
46190: LIST
46191: PUSH
46192: LD_INT 5
46194: PUSH
46195: LD_INT 5
46197: PUSH
46198: EMPTY
46199: LIST
46200: LIST
46201: PUSH
46202: LD_INT 4
46204: PUSH
46205: LD_INT 5
46207: PUSH
46208: EMPTY
46209: LIST
46210: LIST
46211: PUSH
46212: LD_INT 3
46214: PUSH
46215: LD_INT 4
46217: PUSH
46218: EMPTY
46219: LIST
46220: LIST
46221: PUSH
46222: LD_INT 3
46224: PUSH
46225: LD_INT 3
46227: PUSH
46228: EMPTY
46229: LIST
46230: LIST
46231: PUSH
46232: LD_INT 5
46234: PUSH
46235: LD_INT 3
46237: PUSH
46238: EMPTY
46239: LIST
46240: LIST
46241: PUSH
46242: LD_INT 3
46244: PUSH
46245: LD_INT 5
46247: PUSH
46248: EMPTY
46249: LIST
46250: LIST
46251: PUSH
46252: EMPTY
46253: LIST
46254: LIST
46255: LIST
46256: LIST
46257: LIST
46258: LIST
46259: LIST
46260: LIST
46261: LIST
46262: LIST
46263: LIST
46264: LIST
46265: LIST
46266: LIST
46267: LIST
46268: LIST
46269: LIST
46270: LIST
46271: LIST
46272: LIST
46273: LIST
46274: LIST
46275: LIST
46276: LIST
46277: LIST
46278: LIST
46279: LIST
46280: LIST
46281: LIST
46282: LIST
46283: LIST
46284: LIST
46285: LIST
46286: LIST
46287: LIST
46288: LIST
46289: LIST
46290: LIST
46291: LIST
46292: LIST
46293: LIST
46294: LIST
46295: LIST
46296: LIST
46297: LIST
46298: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
46299: LD_ADDR_VAR 0 33
46303: PUSH
46304: LD_INT 4
46306: NEG
46307: PUSH
46308: LD_INT 4
46310: NEG
46311: PUSH
46312: EMPTY
46313: LIST
46314: LIST
46315: PUSH
46316: LD_INT 4
46318: NEG
46319: PUSH
46320: LD_INT 5
46322: NEG
46323: PUSH
46324: EMPTY
46325: LIST
46326: LIST
46327: PUSH
46328: LD_INT 3
46330: NEG
46331: PUSH
46332: LD_INT 4
46334: NEG
46335: PUSH
46336: EMPTY
46337: LIST
46338: LIST
46339: PUSH
46340: LD_INT 3
46342: NEG
46343: PUSH
46344: LD_INT 3
46346: NEG
46347: PUSH
46348: EMPTY
46349: LIST
46350: LIST
46351: PUSH
46352: LD_INT 4
46354: NEG
46355: PUSH
46356: LD_INT 3
46358: NEG
46359: PUSH
46360: EMPTY
46361: LIST
46362: LIST
46363: PUSH
46364: LD_INT 5
46366: NEG
46367: PUSH
46368: LD_INT 4
46370: NEG
46371: PUSH
46372: EMPTY
46373: LIST
46374: LIST
46375: PUSH
46376: LD_INT 5
46378: NEG
46379: PUSH
46380: LD_INT 5
46382: NEG
46383: PUSH
46384: EMPTY
46385: LIST
46386: LIST
46387: PUSH
46388: LD_INT 3
46390: NEG
46391: PUSH
46392: LD_INT 5
46394: NEG
46395: PUSH
46396: EMPTY
46397: LIST
46398: LIST
46399: PUSH
46400: LD_INT 5
46402: NEG
46403: PUSH
46404: LD_INT 3
46406: NEG
46407: PUSH
46408: EMPTY
46409: LIST
46410: LIST
46411: PUSH
46412: LD_INT 0
46414: PUSH
46415: LD_INT 3
46417: NEG
46418: PUSH
46419: EMPTY
46420: LIST
46421: LIST
46422: PUSH
46423: LD_INT 0
46425: PUSH
46426: LD_INT 4
46428: NEG
46429: PUSH
46430: EMPTY
46431: LIST
46432: LIST
46433: PUSH
46434: LD_INT 1
46436: PUSH
46437: LD_INT 3
46439: NEG
46440: PUSH
46441: EMPTY
46442: LIST
46443: LIST
46444: PUSH
46445: LD_INT 1
46447: PUSH
46448: LD_INT 2
46450: NEG
46451: PUSH
46452: EMPTY
46453: LIST
46454: LIST
46455: PUSH
46456: LD_INT 0
46458: PUSH
46459: LD_INT 2
46461: NEG
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: PUSH
46467: LD_INT 1
46469: NEG
46470: PUSH
46471: LD_INT 3
46473: NEG
46474: PUSH
46475: EMPTY
46476: LIST
46477: LIST
46478: PUSH
46479: LD_INT 1
46481: NEG
46482: PUSH
46483: LD_INT 4
46485: NEG
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: PUSH
46491: LD_INT 2
46493: PUSH
46494: LD_INT 2
46496: NEG
46497: PUSH
46498: EMPTY
46499: LIST
46500: LIST
46501: PUSH
46502: LD_INT 2
46504: NEG
46505: PUSH
46506: LD_INT 4
46508: NEG
46509: PUSH
46510: EMPTY
46511: LIST
46512: LIST
46513: PUSH
46514: LD_INT 4
46516: PUSH
46517: LD_INT 0
46519: PUSH
46520: EMPTY
46521: LIST
46522: LIST
46523: PUSH
46524: LD_INT 4
46526: PUSH
46527: LD_INT 1
46529: NEG
46530: PUSH
46531: EMPTY
46532: LIST
46533: LIST
46534: PUSH
46535: LD_INT 5
46537: PUSH
46538: LD_INT 0
46540: PUSH
46541: EMPTY
46542: LIST
46543: LIST
46544: PUSH
46545: LD_INT 5
46547: PUSH
46548: LD_INT 1
46550: PUSH
46551: EMPTY
46552: LIST
46553: LIST
46554: PUSH
46555: LD_INT 4
46557: PUSH
46558: LD_INT 1
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: PUSH
46565: LD_INT 3
46567: PUSH
46568: LD_INT 0
46570: PUSH
46571: EMPTY
46572: LIST
46573: LIST
46574: PUSH
46575: LD_INT 3
46577: PUSH
46578: LD_INT 1
46580: NEG
46581: PUSH
46582: EMPTY
46583: LIST
46584: LIST
46585: PUSH
46586: LD_INT 3
46588: PUSH
46589: LD_INT 2
46591: NEG
46592: PUSH
46593: EMPTY
46594: LIST
46595: LIST
46596: PUSH
46597: LD_INT 5
46599: PUSH
46600: LD_INT 2
46602: PUSH
46603: EMPTY
46604: LIST
46605: LIST
46606: PUSH
46607: LD_INT 3
46609: PUSH
46610: LD_INT 3
46612: PUSH
46613: EMPTY
46614: LIST
46615: LIST
46616: PUSH
46617: LD_INT 3
46619: PUSH
46620: LD_INT 2
46622: PUSH
46623: EMPTY
46624: LIST
46625: LIST
46626: PUSH
46627: LD_INT 4
46629: PUSH
46630: LD_INT 3
46632: PUSH
46633: EMPTY
46634: LIST
46635: LIST
46636: PUSH
46637: LD_INT 4
46639: PUSH
46640: LD_INT 4
46642: PUSH
46643: EMPTY
46644: LIST
46645: LIST
46646: PUSH
46647: LD_INT 3
46649: PUSH
46650: LD_INT 4
46652: PUSH
46653: EMPTY
46654: LIST
46655: LIST
46656: PUSH
46657: LD_INT 2
46659: PUSH
46660: LD_INT 3
46662: PUSH
46663: EMPTY
46664: LIST
46665: LIST
46666: PUSH
46667: LD_INT 2
46669: PUSH
46670: LD_INT 2
46672: PUSH
46673: EMPTY
46674: LIST
46675: LIST
46676: PUSH
46677: LD_INT 4
46679: PUSH
46680: LD_INT 2
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: PUSH
46687: LD_INT 2
46689: PUSH
46690: LD_INT 4
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: PUSH
46697: LD_INT 0
46699: PUSH
46700: LD_INT 4
46702: PUSH
46703: EMPTY
46704: LIST
46705: LIST
46706: PUSH
46707: LD_INT 0
46709: PUSH
46710: LD_INT 3
46712: PUSH
46713: EMPTY
46714: LIST
46715: LIST
46716: PUSH
46717: LD_INT 1
46719: PUSH
46720: LD_INT 4
46722: PUSH
46723: EMPTY
46724: LIST
46725: LIST
46726: PUSH
46727: LD_INT 1
46729: PUSH
46730: LD_INT 5
46732: PUSH
46733: EMPTY
46734: LIST
46735: LIST
46736: PUSH
46737: LD_INT 0
46739: PUSH
46740: LD_INT 5
46742: PUSH
46743: EMPTY
46744: LIST
46745: LIST
46746: PUSH
46747: LD_INT 1
46749: NEG
46750: PUSH
46751: LD_INT 4
46753: PUSH
46754: EMPTY
46755: LIST
46756: LIST
46757: PUSH
46758: LD_INT 1
46760: NEG
46761: PUSH
46762: LD_INT 3
46764: PUSH
46765: EMPTY
46766: LIST
46767: LIST
46768: PUSH
46769: LD_INT 2
46771: PUSH
46772: LD_INT 5
46774: PUSH
46775: EMPTY
46776: LIST
46777: LIST
46778: PUSH
46779: LD_INT 2
46781: NEG
46782: PUSH
46783: LD_INT 3
46785: PUSH
46786: EMPTY
46787: LIST
46788: LIST
46789: PUSH
46790: EMPTY
46791: LIST
46792: LIST
46793: LIST
46794: LIST
46795: LIST
46796: LIST
46797: LIST
46798: LIST
46799: LIST
46800: LIST
46801: LIST
46802: LIST
46803: LIST
46804: LIST
46805: LIST
46806: LIST
46807: LIST
46808: LIST
46809: LIST
46810: LIST
46811: LIST
46812: LIST
46813: LIST
46814: LIST
46815: LIST
46816: LIST
46817: LIST
46818: LIST
46819: LIST
46820: LIST
46821: LIST
46822: LIST
46823: LIST
46824: LIST
46825: LIST
46826: LIST
46827: LIST
46828: LIST
46829: LIST
46830: LIST
46831: LIST
46832: LIST
46833: LIST
46834: LIST
46835: LIST
46836: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
46837: LD_ADDR_VAR 0 34
46841: PUSH
46842: LD_INT 0
46844: PUSH
46845: LD_INT 4
46847: NEG
46848: PUSH
46849: EMPTY
46850: LIST
46851: LIST
46852: PUSH
46853: LD_INT 0
46855: PUSH
46856: LD_INT 5
46858: NEG
46859: PUSH
46860: EMPTY
46861: LIST
46862: LIST
46863: PUSH
46864: LD_INT 1
46866: PUSH
46867: LD_INT 4
46869: NEG
46870: PUSH
46871: EMPTY
46872: LIST
46873: LIST
46874: PUSH
46875: LD_INT 1
46877: PUSH
46878: LD_INT 3
46880: NEG
46881: PUSH
46882: EMPTY
46883: LIST
46884: LIST
46885: PUSH
46886: LD_INT 0
46888: PUSH
46889: LD_INT 3
46891: NEG
46892: PUSH
46893: EMPTY
46894: LIST
46895: LIST
46896: PUSH
46897: LD_INT 1
46899: NEG
46900: PUSH
46901: LD_INT 4
46903: NEG
46904: PUSH
46905: EMPTY
46906: LIST
46907: LIST
46908: PUSH
46909: LD_INT 1
46911: NEG
46912: PUSH
46913: LD_INT 5
46915: NEG
46916: PUSH
46917: EMPTY
46918: LIST
46919: LIST
46920: PUSH
46921: LD_INT 2
46923: PUSH
46924: LD_INT 3
46926: NEG
46927: PUSH
46928: EMPTY
46929: LIST
46930: LIST
46931: PUSH
46932: LD_INT 2
46934: NEG
46935: PUSH
46936: LD_INT 5
46938: NEG
46939: PUSH
46940: EMPTY
46941: LIST
46942: LIST
46943: PUSH
46944: LD_INT 3
46946: PUSH
46947: LD_INT 0
46949: PUSH
46950: EMPTY
46951: LIST
46952: LIST
46953: PUSH
46954: LD_INT 3
46956: PUSH
46957: LD_INT 1
46959: NEG
46960: PUSH
46961: EMPTY
46962: LIST
46963: LIST
46964: PUSH
46965: LD_INT 4
46967: PUSH
46968: LD_INT 0
46970: PUSH
46971: EMPTY
46972: LIST
46973: LIST
46974: PUSH
46975: LD_INT 4
46977: PUSH
46978: LD_INT 1
46980: PUSH
46981: EMPTY
46982: LIST
46983: LIST
46984: PUSH
46985: LD_INT 3
46987: PUSH
46988: LD_INT 1
46990: PUSH
46991: EMPTY
46992: LIST
46993: LIST
46994: PUSH
46995: LD_INT 2
46997: PUSH
46998: LD_INT 0
47000: PUSH
47001: EMPTY
47002: LIST
47003: LIST
47004: PUSH
47005: LD_INT 2
47007: PUSH
47008: LD_INT 1
47010: NEG
47011: PUSH
47012: EMPTY
47013: LIST
47014: LIST
47015: PUSH
47016: LD_INT 2
47018: PUSH
47019: LD_INT 2
47021: NEG
47022: PUSH
47023: EMPTY
47024: LIST
47025: LIST
47026: PUSH
47027: LD_INT 4
47029: PUSH
47030: LD_INT 2
47032: PUSH
47033: EMPTY
47034: LIST
47035: LIST
47036: PUSH
47037: LD_INT 4
47039: PUSH
47040: LD_INT 4
47042: PUSH
47043: EMPTY
47044: LIST
47045: LIST
47046: PUSH
47047: LD_INT 4
47049: PUSH
47050: LD_INT 3
47052: PUSH
47053: EMPTY
47054: LIST
47055: LIST
47056: PUSH
47057: LD_INT 5
47059: PUSH
47060: LD_INT 4
47062: PUSH
47063: EMPTY
47064: LIST
47065: LIST
47066: PUSH
47067: LD_INT 5
47069: PUSH
47070: LD_INT 5
47072: PUSH
47073: EMPTY
47074: LIST
47075: LIST
47076: PUSH
47077: LD_INT 4
47079: PUSH
47080: LD_INT 5
47082: PUSH
47083: EMPTY
47084: LIST
47085: LIST
47086: PUSH
47087: LD_INT 3
47089: PUSH
47090: LD_INT 4
47092: PUSH
47093: EMPTY
47094: LIST
47095: LIST
47096: PUSH
47097: LD_INT 3
47099: PUSH
47100: LD_INT 3
47102: PUSH
47103: EMPTY
47104: LIST
47105: LIST
47106: PUSH
47107: LD_INT 5
47109: PUSH
47110: LD_INT 3
47112: PUSH
47113: EMPTY
47114: LIST
47115: LIST
47116: PUSH
47117: LD_INT 3
47119: PUSH
47120: LD_INT 5
47122: PUSH
47123: EMPTY
47124: LIST
47125: LIST
47126: PUSH
47127: LD_INT 0
47129: PUSH
47130: LD_INT 3
47132: PUSH
47133: EMPTY
47134: LIST
47135: LIST
47136: PUSH
47137: LD_INT 0
47139: PUSH
47140: LD_INT 2
47142: PUSH
47143: EMPTY
47144: LIST
47145: LIST
47146: PUSH
47147: LD_INT 1
47149: PUSH
47150: LD_INT 3
47152: PUSH
47153: EMPTY
47154: LIST
47155: LIST
47156: PUSH
47157: LD_INT 1
47159: PUSH
47160: LD_INT 4
47162: PUSH
47163: EMPTY
47164: LIST
47165: LIST
47166: PUSH
47167: LD_INT 0
47169: PUSH
47170: LD_INT 4
47172: PUSH
47173: EMPTY
47174: LIST
47175: LIST
47176: PUSH
47177: LD_INT 1
47179: NEG
47180: PUSH
47181: LD_INT 3
47183: PUSH
47184: EMPTY
47185: LIST
47186: LIST
47187: PUSH
47188: LD_INT 1
47190: NEG
47191: PUSH
47192: LD_INT 2
47194: PUSH
47195: EMPTY
47196: LIST
47197: LIST
47198: PUSH
47199: LD_INT 2
47201: PUSH
47202: LD_INT 4
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: PUSH
47209: LD_INT 2
47211: NEG
47212: PUSH
47213: LD_INT 2
47215: PUSH
47216: EMPTY
47217: LIST
47218: LIST
47219: PUSH
47220: LD_INT 4
47222: NEG
47223: PUSH
47224: LD_INT 0
47226: PUSH
47227: EMPTY
47228: LIST
47229: LIST
47230: PUSH
47231: LD_INT 4
47233: NEG
47234: PUSH
47235: LD_INT 1
47237: NEG
47238: PUSH
47239: EMPTY
47240: LIST
47241: LIST
47242: PUSH
47243: LD_INT 3
47245: NEG
47246: PUSH
47247: LD_INT 0
47249: PUSH
47250: EMPTY
47251: LIST
47252: LIST
47253: PUSH
47254: LD_INT 3
47256: NEG
47257: PUSH
47258: LD_INT 1
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: PUSH
47265: LD_INT 4
47267: NEG
47268: PUSH
47269: LD_INT 1
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: PUSH
47276: LD_INT 5
47278: NEG
47279: PUSH
47280: LD_INT 0
47282: PUSH
47283: EMPTY
47284: LIST
47285: LIST
47286: PUSH
47287: LD_INT 5
47289: NEG
47290: PUSH
47291: LD_INT 1
47293: NEG
47294: PUSH
47295: EMPTY
47296: LIST
47297: LIST
47298: PUSH
47299: LD_INT 5
47301: NEG
47302: PUSH
47303: LD_INT 2
47305: NEG
47306: PUSH
47307: EMPTY
47308: LIST
47309: LIST
47310: PUSH
47311: LD_INT 3
47313: NEG
47314: PUSH
47315: LD_INT 2
47317: PUSH
47318: EMPTY
47319: LIST
47320: LIST
47321: PUSH
47322: EMPTY
47323: LIST
47324: LIST
47325: LIST
47326: LIST
47327: LIST
47328: LIST
47329: LIST
47330: LIST
47331: LIST
47332: LIST
47333: LIST
47334: LIST
47335: LIST
47336: LIST
47337: LIST
47338: LIST
47339: LIST
47340: LIST
47341: LIST
47342: LIST
47343: LIST
47344: LIST
47345: LIST
47346: LIST
47347: LIST
47348: LIST
47349: LIST
47350: LIST
47351: LIST
47352: LIST
47353: LIST
47354: LIST
47355: LIST
47356: LIST
47357: LIST
47358: LIST
47359: LIST
47360: LIST
47361: LIST
47362: LIST
47363: LIST
47364: LIST
47365: LIST
47366: LIST
47367: LIST
47368: ST_TO_ADDR
// end ; end ;
47369: GO 47372
47371: POP
// case btype of b_depot , b_warehouse :
47372: LD_VAR 0 1
47376: PUSH
47377: LD_INT 0
47379: DOUBLE
47380: EQUAL
47381: IFTRUE 47391
47383: LD_INT 1
47385: DOUBLE
47386: EQUAL
47387: IFTRUE 47391
47389: GO 47592
47391: POP
// case nation of nation_american :
47392: LD_VAR 0 5
47396: PUSH
47397: LD_INT 1
47399: DOUBLE
47400: EQUAL
47401: IFTRUE 47405
47403: GO 47461
47405: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
47406: LD_ADDR_VAR 0 9
47410: PUSH
47411: LD_VAR 0 11
47415: PUSH
47416: LD_VAR 0 12
47420: PUSH
47421: LD_VAR 0 13
47425: PUSH
47426: LD_VAR 0 14
47430: PUSH
47431: LD_VAR 0 15
47435: PUSH
47436: LD_VAR 0 16
47440: PUSH
47441: EMPTY
47442: LIST
47443: LIST
47444: LIST
47445: LIST
47446: LIST
47447: LIST
47448: PUSH
47449: LD_VAR 0 4
47453: PUSH
47454: LD_INT 1
47456: PLUS
47457: ARRAY
47458: ST_TO_ADDR
47459: GO 47590
47461: LD_INT 2
47463: DOUBLE
47464: EQUAL
47465: IFTRUE 47469
47467: GO 47525
47469: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
47470: LD_ADDR_VAR 0 9
47474: PUSH
47475: LD_VAR 0 17
47479: PUSH
47480: LD_VAR 0 18
47484: PUSH
47485: LD_VAR 0 19
47489: PUSH
47490: LD_VAR 0 20
47494: PUSH
47495: LD_VAR 0 21
47499: PUSH
47500: LD_VAR 0 22
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: LIST
47509: LIST
47510: LIST
47511: LIST
47512: PUSH
47513: LD_VAR 0 4
47517: PUSH
47518: LD_INT 1
47520: PLUS
47521: ARRAY
47522: ST_TO_ADDR
47523: GO 47590
47525: LD_INT 3
47527: DOUBLE
47528: EQUAL
47529: IFTRUE 47533
47531: GO 47589
47533: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
47534: LD_ADDR_VAR 0 9
47538: PUSH
47539: LD_VAR 0 23
47543: PUSH
47544: LD_VAR 0 24
47548: PUSH
47549: LD_VAR 0 25
47553: PUSH
47554: LD_VAR 0 26
47558: PUSH
47559: LD_VAR 0 27
47563: PUSH
47564: LD_VAR 0 28
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: LIST
47573: LIST
47574: LIST
47575: LIST
47576: PUSH
47577: LD_VAR 0 4
47581: PUSH
47582: LD_INT 1
47584: PLUS
47585: ARRAY
47586: ST_TO_ADDR
47587: GO 47590
47589: POP
47590: GO 48145
47592: LD_INT 2
47594: DOUBLE
47595: EQUAL
47596: IFTRUE 47606
47598: LD_INT 3
47600: DOUBLE
47601: EQUAL
47602: IFTRUE 47606
47604: GO 47662
47606: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
47607: LD_ADDR_VAR 0 9
47611: PUSH
47612: LD_VAR 0 29
47616: PUSH
47617: LD_VAR 0 30
47621: PUSH
47622: LD_VAR 0 31
47626: PUSH
47627: LD_VAR 0 32
47631: PUSH
47632: LD_VAR 0 33
47636: PUSH
47637: LD_VAR 0 34
47641: PUSH
47642: EMPTY
47643: LIST
47644: LIST
47645: LIST
47646: LIST
47647: LIST
47648: LIST
47649: PUSH
47650: LD_VAR 0 4
47654: PUSH
47655: LD_INT 1
47657: PLUS
47658: ARRAY
47659: ST_TO_ADDR
47660: GO 48145
47662: LD_INT 16
47664: DOUBLE
47665: EQUAL
47666: IFTRUE 47724
47668: LD_INT 17
47670: DOUBLE
47671: EQUAL
47672: IFTRUE 47724
47674: LD_INT 18
47676: DOUBLE
47677: EQUAL
47678: IFTRUE 47724
47680: LD_INT 19
47682: DOUBLE
47683: EQUAL
47684: IFTRUE 47724
47686: LD_INT 22
47688: DOUBLE
47689: EQUAL
47690: IFTRUE 47724
47692: LD_INT 20
47694: DOUBLE
47695: EQUAL
47696: IFTRUE 47724
47698: LD_INT 21
47700: DOUBLE
47701: EQUAL
47702: IFTRUE 47724
47704: LD_INT 23
47706: DOUBLE
47707: EQUAL
47708: IFTRUE 47724
47710: LD_INT 24
47712: DOUBLE
47713: EQUAL
47714: IFTRUE 47724
47716: LD_INT 25
47718: DOUBLE
47719: EQUAL
47720: IFTRUE 47724
47722: GO 47780
47724: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
47725: LD_ADDR_VAR 0 9
47729: PUSH
47730: LD_VAR 0 35
47734: PUSH
47735: LD_VAR 0 36
47739: PUSH
47740: LD_VAR 0 37
47744: PUSH
47745: LD_VAR 0 38
47749: PUSH
47750: LD_VAR 0 39
47754: PUSH
47755: LD_VAR 0 40
47759: PUSH
47760: EMPTY
47761: LIST
47762: LIST
47763: LIST
47764: LIST
47765: LIST
47766: LIST
47767: PUSH
47768: LD_VAR 0 4
47772: PUSH
47773: LD_INT 1
47775: PLUS
47776: ARRAY
47777: ST_TO_ADDR
47778: GO 48145
47780: LD_INT 6
47782: DOUBLE
47783: EQUAL
47784: IFTRUE 47836
47786: LD_INT 7
47788: DOUBLE
47789: EQUAL
47790: IFTRUE 47836
47792: LD_INT 8
47794: DOUBLE
47795: EQUAL
47796: IFTRUE 47836
47798: LD_INT 13
47800: DOUBLE
47801: EQUAL
47802: IFTRUE 47836
47804: LD_INT 12
47806: DOUBLE
47807: EQUAL
47808: IFTRUE 47836
47810: LD_INT 15
47812: DOUBLE
47813: EQUAL
47814: IFTRUE 47836
47816: LD_INT 11
47818: DOUBLE
47819: EQUAL
47820: IFTRUE 47836
47822: LD_INT 14
47824: DOUBLE
47825: EQUAL
47826: IFTRUE 47836
47828: LD_INT 10
47830: DOUBLE
47831: EQUAL
47832: IFTRUE 47836
47834: GO 47892
47836: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
47837: LD_ADDR_VAR 0 9
47841: PUSH
47842: LD_VAR 0 41
47846: PUSH
47847: LD_VAR 0 42
47851: PUSH
47852: LD_VAR 0 43
47856: PUSH
47857: LD_VAR 0 44
47861: PUSH
47862: LD_VAR 0 45
47866: PUSH
47867: LD_VAR 0 46
47871: PUSH
47872: EMPTY
47873: LIST
47874: LIST
47875: LIST
47876: LIST
47877: LIST
47878: LIST
47879: PUSH
47880: LD_VAR 0 4
47884: PUSH
47885: LD_INT 1
47887: PLUS
47888: ARRAY
47889: ST_TO_ADDR
47890: GO 48145
47892: LD_INT 36
47894: DOUBLE
47895: EQUAL
47896: IFTRUE 47900
47898: GO 47956
47900: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
47901: LD_ADDR_VAR 0 9
47905: PUSH
47906: LD_VAR 0 47
47910: PUSH
47911: LD_VAR 0 48
47915: PUSH
47916: LD_VAR 0 49
47920: PUSH
47921: LD_VAR 0 50
47925: PUSH
47926: LD_VAR 0 51
47930: PUSH
47931: LD_VAR 0 52
47935: PUSH
47936: EMPTY
47937: LIST
47938: LIST
47939: LIST
47940: LIST
47941: LIST
47942: LIST
47943: PUSH
47944: LD_VAR 0 4
47948: PUSH
47949: LD_INT 1
47951: PLUS
47952: ARRAY
47953: ST_TO_ADDR
47954: GO 48145
47956: LD_INT 4
47958: DOUBLE
47959: EQUAL
47960: IFTRUE 47982
47962: LD_INT 5
47964: DOUBLE
47965: EQUAL
47966: IFTRUE 47982
47968: LD_INT 34
47970: DOUBLE
47971: EQUAL
47972: IFTRUE 47982
47974: LD_INT 37
47976: DOUBLE
47977: EQUAL
47978: IFTRUE 47982
47980: GO 48038
47982: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
47983: LD_ADDR_VAR 0 9
47987: PUSH
47988: LD_VAR 0 53
47992: PUSH
47993: LD_VAR 0 54
47997: PUSH
47998: LD_VAR 0 55
48002: PUSH
48003: LD_VAR 0 56
48007: PUSH
48008: LD_VAR 0 57
48012: PUSH
48013: LD_VAR 0 58
48017: PUSH
48018: EMPTY
48019: LIST
48020: LIST
48021: LIST
48022: LIST
48023: LIST
48024: LIST
48025: PUSH
48026: LD_VAR 0 4
48030: PUSH
48031: LD_INT 1
48033: PLUS
48034: ARRAY
48035: ST_TO_ADDR
48036: GO 48145
48038: LD_INT 31
48040: DOUBLE
48041: EQUAL
48042: IFTRUE 48088
48044: LD_INT 32
48046: DOUBLE
48047: EQUAL
48048: IFTRUE 48088
48050: LD_INT 33
48052: DOUBLE
48053: EQUAL
48054: IFTRUE 48088
48056: LD_INT 27
48058: DOUBLE
48059: EQUAL
48060: IFTRUE 48088
48062: LD_INT 26
48064: DOUBLE
48065: EQUAL
48066: IFTRUE 48088
48068: LD_INT 28
48070: DOUBLE
48071: EQUAL
48072: IFTRUE 48088
48074: LD_INT 29
48076: DOUBLE
48077: EQUAL
48078: IFTRUE 48088
48080: LD_INT 30
48082: DOUBLE
48083: EQUAL
48084: IFTRUE 48088
48086: GO 48144
48088: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
48089: LD_ADDR_VAR 0 9
48093: PUSH
48094: LD_VAR 0 59
48098: PUSH
48099: LD_VAR 0 60
48103: PUSH
48104: LD_VAR 0 61
48108: PUSH
48109: LD_VAR 0 62
48113: PUSH
48114: LD_VAR 0 63
48118: PUSH
48119: LD_VAR 0 64
48123: PUSH
48124: EMPTY
48125: LIST
48126: LIST
48127: LIST
48128: LIST
48129: LIST
48130: LIST
48131: PUSH
48132: LD_VAR 0 4
48136: PUSH
48137: LD_INT 1
48139: PLUS
48140: ARRAY
48141: ST_TO_ADDR
48142: GO 48145
48144: POP
// temp_list2 = [ ] ;
48145: LD_ADDR_VAR 0 10
48149: PUSH
48150: EMPTY
48151: ST_TO_ADDR
// for i in temp_list do
48152: LD_ADDR_VAR 0 8
48156: PUSH
48157: LD_VAR 0 9
48161: PUSH
48162: FOR_IN
48163: IFFALSE 48215
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
48165: LD_ADDR_VAR 0 10
48169: PUSH
48170: LD_VAR 0 10
48174: PUSH
48175: LD_VAR 0 8
48179: PUSH
48180: LD_INT 1
48182: ARRAY
48183: PUSH
48184: LD_VAR 0 2
48188: PLUS
48189: PUSH
48190: LD_VAR 0 8
48194: PUSH
48195: LD_INT 2
48197: ARRAY
48198: PUSH
48199: LD_VAR 0 3
48203: PLUS
48204: PUSH
48205: EMPTY
48206: LIST
48207: LIST
48208: PUSH
48209: EMPTY
48210: LIST
48211: ADD
48212: ST_TO_ADDR
48213: GO 48162
48215: POP
48216: POP
// result = temp_list2 ;
48217: LD_ADDR_VAR 0 7
48221: PUSH
48222: LD_VAR 0 10
48226: ST_TO_ADDR
// end ;
48227: LD_VAR 0 7
48231: RET
// export function EnemyInRange ( unit , dist ) ; begin
48232: LD_INT 0
48234: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
48235: LD_ADDR_VAR 0 3
48239: PUSH
48240: LD_VAR 0 1
48244: PPUSH
48245: CALL_OW 255
48249: PPUSH
48250: LD_VAR 0 1
48254: PPUSH
48255: CALL_OW 250
48259: PPUSH
48260: LD_VAR 0 1
48264: PPUSH
48265: CALL_OW 251
48269: PPUSH
48270: LD_VAR 0 2
48274: PPUSH
48275: CALL 21605 0 4
48279: PUSH
48280: LD_INT 4
48282: ARRAY
48283: ST_TO_ADDR
// end ;
48284: LD_VAR 0 3
48288: RET
// export function PlayerSeeMe ( unit ) ; begin
48289: LD_INT 0
48291: PPUSH
// result := See ( your_side , unit ) ;
48292: LD_ADDR_VAR 0 2
48296: PUSH
48297: LD_OWVAR 2
48301: PPUSH
48302: LD_VAR 0 1
48306: PPUSH
48307: CALL_OW 292
48311: ST_TO_ADDR
// end ;
48312: LD_VAR 0 2
48316: RET
// export function ReverseDir ( unit ) ; begin
48317: LD_INT 0
48319: PPUSH
// if not unit then
48320: LD_VAR 0 1
48324: NOT
48325: IFFALSE 48329
// exit ;
48327: GO 48352
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
48329: LD_ADDR_VAR 0 2
48333: PUSH
48334: LD_VAR 0 1
48338: PPUSH
48339: CALL_OW 254
48343: PUSH
48344: LD_INT 3
48346: PLUS
48347: PUSH
48348: LD_INT 6
48350: MOD
48351: ST_TO_ADDR
// end ;
48352: LD_VAR 0 2
48356: RET
// export function ReverseArray ( array ) ; var i ; begin
48357: LD_INT 0
48359: PPUSH
48360: PPUSH
// if not array then
48361: LD_VAR 0 1
48365: NOT
48366: IFFALSE 48370
// exit ;
48368: GO 48425
// result := [ ] ;
48370: LD_ADDR_VAR 0 2
48374: PUSH
48375: EMPTY
48376: ST_TO_ADDR
// for i := array downto 1 do
48377: LD_ADDR_VAR 0 3
48381: PUSH
48382: DOUBLE
48383: LD_VAR 0 1
48387: INC
48388: ST_TO_ADDR
48389: LD_INT 1
48391: PUSH
48392: FOR_DOWNTO
48393: IFFALSE 48423
// result := Join ( result , array [ i ] ) ;
48395: LD_ADDR_VAR 0 2
48399: PUSH
48400: LD_VAR 0 2
48404: PPUSH
48405: LD_VAR 0 1
48409: PUSH
48410: LD_VAR 0 3
48414: ARRAY
48415: PPUSH
48416: CALL 53090 0 2
48420: ST_TO_ADDR
48421: GO 48392
48423: POP
48424: POP
// end ;
48425: LD_VAR 0 2
48429: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
48430: LD_INT 0
48432: PPUSH
48433: PPUSH
48434: PPUSH
48435: PPUSH
48436: PPUSH
48437: PPUSH
// if not unit or not hexes then
48438: LD_VAR 0 1
48442: NOT
48443: PUSH
48444: LD_VAR 0 2
48448: NOT
48449: OR
48450: IFFALSE 48454
// exit ;
48452: GO 48577
// dist := 9999 ;
48454: LD_ADDR_VAR 0 5
48458: PUSH
48459: LD_INT 9999
48461: ST_TO_ADDR
// for i = 1 to hexes do
48462: LD_ADDR_VAR 0 4
48466: PUSH
48467: DOUBLE
48468: LD_INT 1
48470: DEC
48471: ST_TO_ADDR
48472: LD_VAR 0 2
48476: PUSH
48477: FOR_TO
48478: IFFALSE 48565
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48480: LD_ADDR_VAR 0 6
48484: PUSH
48485: LD_VAR 0 1
48489: PPUSH
48490: LD_VAR 0 2
48494: PUSH
48495: LD_VAR 0 4
48499: ARRAY
48500: PUSH
48501: LD_INT 1
48503: ARRAY
48504: PPUSH
48505: LD_VAR 0 2
48509: PUSH
48510: LD_VAR 0 4
48514: ARRAY
48515: PUSH
48516: LD_INT 2
48518: ARRAY
48519: PPUSH
48520: CALL_OW 297
48524: ST_TO_ADDR
// if tdist < dist then
48525: LD_VAR 0 6
48529: PUSH
48530: LD_VAR 0 5
48534: LESS
48535: IFFALSE 48563
// begin hex := hexes [ i ] ;
48537: LD_ADDR_VAR 0 8
48541: PUSH
48542: LD_VAR 0 2
48546: PUSH
48547: LD_VAR 0 4
48551: ARRAY
48552: ST_TO_ADDR
// dist := tdist ;
48553: LD_ADDR_VAR 0 5
48557: PUSH
48558: LD_VAR 0 6
48562: ST_TO_ADDR
// end ; end ;
48563: GO 48477
48565: POP
48566: POP
// result := hex ;
48567: LD_ADDR_VAR 0 3
48571: PUSH
48572: LD_VAR 0 8
48576: ST_TO_ADDR
// end ;
48577: LD_VAR 0 3
48581: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
48582: LD_INT 0
48584: PPUSH
48585: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
48586: LD_VAR 0 1
48590: NOT
48591: PUSH
48592: LD_VAR 0 1
48596: PUSH
48597: LD_INT 21
48599: PUSH
48600: LD_INT 2
48602: PUSH
48603: EMPTY
48604: LIST
48605: LIST
48606: PUSH
48607: LD_INT 23
48609: PUSH
48610: LD_INT 2
48612: PUSH
48613: EMPTY
48614: LIST
48615: LIST
48616: PUSH
48617: EMPTY
48618: LIST
48619: LIST
48620: PPUSH
48621: CALL_OW 69
48625: IN
48626: NOT
48627: OR
48628: IFFALSE 48632
// exit ;
48630: GO 48679
// for i = 1 to 3 do
48632: LD_ADDR_VAR 0 3
48636: PUSH
48637: DOUBLE
48638: LD_INT 1
48640: DEC
48641: ST_TO_ADDR
48642: LD_INT 3
48644: PUSH
48645: FOR_TO
48646: IFFALSE 48677
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
48648: LD_VAR 0 1
48652: PPUSH
48653: CALL_OW 250
48657: PPUSH
48658: LD_VAR 0 1
48662: PPUSH
48663: CALL_OW 251
48667: PPUSH
48668: LD_INT 1
48670: PPUSH
48671: CALL_OW 453
48675: GO 48645
48677: POP
48678: POP
// end ;
48679: LD_VAR 0 2
48683: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
48684: LD_INT 0
48686: PPUSH
48687: PPUSH
48688: PPUSH
48689: PPUSH
48690: PPUSH
48691: PPUSH
// if not unit or not enemy_unit then
48692: LD_VAR 0 1
48696: NOT
48697: PUSH
48698: LD_VAR 0 2
48702: NOT
48703: OR
48704: IFFALSE 48708
// exit ;
48706: GO 49175
// if GetLives ( i ) < 250 then
48708: LD_VAR 0 4
48712: PPUSH
48713: CALL_OW 256
48717: PUSH
48718: LD_INT 250
48720: LESS
48721: IFFALSE 48734
// begin ComAutodestruct ( i ) ;
48723: LD_VAR 0 4
48727: PPUSH
48728: CALL 48582 0 1
// exit ;
48732: GO 49175
// end ; x := GetX ( enemy_unit ) ;
48734: LD_ADDR_VAR 0 7
48738: PUSH
48739: LD_VAR 0 2
48743: PPUSH
48744: CALL_OW 250
48748: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
48749: LD_ADDR_VAR 0 8
48753: PUSH
48754: LD_VAR 0 2
48758: PPUSH
48759: CALL_OW 251
48763: ST_TO_ADDR
// if not x or not y then
48764: LD_VAR 0 7
48768: NOT
48769: PUSH
48770: LD_VAR 0 8
48774: NOT
48775: OR
48776: IFFALSE 48780
// exit ;
48778: GO 49175
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
48780: LD_ADDR_VAR 0 6
48784: PUSH
48785: LD_VAR 0 7
48789: PPUSH
48790: LD_INT 0
48792: PPUSH
48793: LD_INT 4
48795: PPUSH
48796: CALL_OW 272
48800: PUSH
48801: LD_VAR 0 8
48805: PPUSH
48806: LD_INT 0
48808: PPUSH
48809: LD_INT 4
48811: PPUSH
48812: CALL_OW 273
48816: PUSH
48817: EMPTY
48818: LIST
48819: LIST
48820: PUSH
48821: LD_VAR 0 7
48825: PPUSH
48826: LD_INT 1
48828: PPUSH
48829: LD_INT 4
48831: PPUSH
48832: CALL_OW 272
48836: PUSH
48837: LD_VAR 0 8
48841: PPUSH
48842: LD_INT 1
48844: PPUSH
48845: LD_INT 4
48847: PPUSH
48848: CALL_OW 273
48852: PUSH
48853: EMPTY
48854: LIST
48855: LIST
48856: PUSH
48857: LD_VAR 0 7
48861: PPUSH
48862: LD_INT 2
48864: PPUSH
48865: LD_INT 4
48867: PPUSH
48868: CALL_OW 272
48872: PUSH
48873: LD_VAR 0 8
48877: PPUSH
48878: LD_INT 2
48880: PPUSH
48881: LD_INT 4
48883: PPUSH
48884: CALL_OW 273
48888: PUSH
48889: EMPTY
48890: LIST
48891: LIST
48892: PUSH
48893: LD_VAR 0 7
48897: PPUSH
48898: LD_INT 3
48900: PPUSH
48901: LD_INT 4
48903: PPUSH
48904: CALL_OW 272
48908: PUSH
48909: LD_VAR 0 8
48913: PPUSH
48914: LD_INT 3
48916: PPUSH
48917: LD_INT 4
48919: PPUSH
48920: CALL_OW 273
48924: PUSH
48925: EMPTY
48926: LIST
48927: LIST
48928: PUSH
48929: LD_VAR 0 7
48933: PPUSH
48934: LD_INT 4
48936: PPUSH
48937: LD_INT 4
48939: PPUSH
48940: CALL_OW 272
48944: PUSH
48945: LD_VAR 0 8
48949: PPUSH
48950: LD_INT 4
48952: PPUSH
48953: LD_INT 4
48955: PPUSH
48956: CALL_OW 273
48960: PUSH
48961: EMPTY
48962: LIST
48963: LIST
48964: PUSH
48965: LD_VAR 0 7
48969: PPUSH
48970: LD_INT 5
48972: PPUSH
48973: LD_INT 4
48975: PPUSH
48976: CALL_OW 272
48980: PUSH
48981: LD_VAR 0 8
48985: PPUSH
48986: LD_INT 5
48988: PPUSH
48989: LD_INT 4
48991: PPUSH
48992: CALL_OW 273
48996: PUSH
48997: EMPTY
48998: LIST
48999: LIST
49000: PUSH
49001: EMPTY
49002: LIST
49003: LIST
49004: LIST
49005: LIST
49006: LIST
49007: LIST
49008: ST_TO_ADDR
// for i = tmp downto 1 do
49009: LD_ADDR_VAR 0 4
49013: PUSH
49014: DOUBLE
49015: LD_VAR 0 6
49019: INC
49020: ST_TO_ADDR
49021: LD_INT 1
49023: PUSH
49024: FOR_DOWNTO
49025: IFFALSE 49126
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
49027: LD_VAR 0 6
49031: PUSH
49032: LD_VAR 0 4
49036: ARRAY
49037: PUSH
49038: LD_INT 1
49040: ARRAY
49041: PPUSH
49042: LD_VAR 0 6
49046: PUSH
49047: LD_VAR 0 4
49051: ARRAY
49052: PUSH
49053: LD_INT 2
49055: ARRAY
49056: PPUSH
49057: CALL_OW 488
49061: NOT
49062: PUSH
49063: LD_VAR 0 6
49067: PUSH
49068: LD_VAR 0 4
49072: ARRAY
49073: PUSH
49074: LD_INT 1
49076: ARRAY
49077: PPUSH
49078: LD_VAR 0 6
49082: PUSH
49083: LD_VAR 0 4
49087: ARRAY
49088: PUSH
49089: LD_INT 2
49091: ARRAY
49092: PPUSH
49093: CALL_OW 428
49097: PUSH
49098: LD_INT 0
49100: NONEQUAL
49101: OR
49102: IFFALSE 49124
// tmp := Delete ( tmp , i ) ;
49104: LD_ADDR_VAR 0 6
49108: PUSH
49109: LD_VAR 0 6
49113: PPUSH
49114: LD_VAR 0 4
49118: PPUSH
49119: CALL_OW 3
49123: ST_TO_ADDR
49124: GO 49024
49126: POP
49127: POP
// j := GetClosestHex ( unit , tmp ) ;
49128: LD_ADDR_VAR 0 5
49132: PUSH
49133: LD_VAR 0 1
49137: PPUSH
49138: LD_VAR 0 6
49142: PPUSH
49143: CALL 48430 0 2
49147: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
49148: LD_VAR 0 1
49152: PPUSH
49153: LD_VAR 0 5
49157: PUSH
49158: LD_INT 1
49160: ARRAY
49161: PPUSH
49162: LD_VAR 0 5
49166: PUSH
49167: LD_INT 2
49169: ARRAY
49170: PPUSH
49171: CALL_OW 111
// end ;
49175: LD_VAR 0 3
49179: RET
// export function PrepareApemanSoldier ( ) ; begin
49180: LD_INT 0
49182: PPUSH
// uc_nation := 0 ;
49183: LD_ADDR_OWVAR 21
49187: PUSH
49188: LD_INT 0
49190: ST_TO_ADDR
// hc_sex := sex_male ;
49191: LD_ADDR_OWVAR 27
49195: PUSH
49196: LD_INT 1
49198: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
49199: LD_ADDR_OWVAR 28
49203: PUSH
49204: LD_INT 15
49206: ST_TO_ADDR
// hc_gallery :=  ;
49207: LD_ADDR_OWVAR 33
49211: PUSH
49212: LD_STRING 
49214: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
49215: LD_ADDR_OWVAR 31
49219: PUSH
49220: LD_INT 0
49222: PPUSH
49223: LD_INT 3
49225: PPUSH
49226: CALL_OW 12
49230: PUSH
49231: LD_INT 0
49233: PPUSH
49234: LD_INT 3
49236: PPUSH
49237: CALL_OW 12
49241: PUSH
49242: LD_INT 0
49244: PUSH
49245: LD_INT 0
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: LIST
49252: LIST
49253: ST_TO_ADDR
// end ;
49254: LD_VAR 0 1
49258: RET
// export function PrepareApemanEngineer ( ) ; begin
49259: LD_INT 0
49261: PPUSH
// uc_nation := 0 ;
49262: LD_ADDR_OWVAR 21
49266: PUSH
49267: LD_INT 0
49269: ST_TO_ADDR
// hc_sex := sex_male ;
49270: LD_ADDR_OWVAR 27
49274: PUSH
49275: LD_INT 1
49277: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
49278: LD_ADDR_OWVAR 28
49282: PUSH
49283: LD_INT 16
49285: ST_TO_ADDR
// hc_gallery :=  ;
49286: LD_ADDR_OWVAR 33
49290: PUSH
49291: LD_STRING 
49293: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
49294: LD_ADDR_OWVAR 31
49298: PUSH
49299: LD_INT 0
49301: PPUSH
49302: LD_INT 3
49304: PPUSH
49305: CALL_OW 12
49309: PUSH
49310: LD_INT 0
49312: PPUSH
49313: LD_INT 3
49315: PPUSH
49316: CALL_OW 12
49320: PUSH
49321: LD_INT 0
49323: PUSH
49324: LD_INT 0
49326: PUSH
49327: EMPTY
49328: LIST
49329: LIST
49330: LIST
49331: LIST
49332: ST_TO_ADDR
// end ;
49333: LD_VAR 0 1
49337: RET
// export function PrepareApeman ( agressivity ) ; begin
49338: LD_INT 0
49340: PPUSH
// uc_side := 0 ;
49341: LD_ADDR_OWVAR 20
49345: PUSH
49346: LD_INT 0
49348: ST_TO_ADDR
// uc_nation := 0 ;
49349: LD_ADDR_OWVAR 21
49353: PUSH
49354: LD_INT 0
49356: ST_TO_ADDR
// hc_sex := sex_male ;
49357: LD_ADDR_OWVAR 27
49361: PUSH
49362: LD_INT 1
49364: ST_TO_ADDR
// hc_class := class_apeman ;
49365: LD_ADDR_OWVAR 28
49369: PUSH
49370: LD_INT 12
49372: ST_TO_ADDR
// hc_gallery :=  ;
49373: LD_ADDR_OWVAR 33
49377: PUSH
49378: LD_STRING 
49380: ST_TO_ADDR
// if agressivity = 0 then
49381: LD_VAR 0 1
49385: PUSH
49386: LD_INT 0
49388: EQUAL
49389: IFFALSE 49401
// hc_agressivity := 0 else
49391: LD_ADDR_OWVAR 35
49395: PUSH
49396: LD_INT 0
49398: ST_TO_ADDR
49399: GO 49422
// hc_agressivity := rand ( - agressivity , agressivity ) ;
49401: LD_ADDR_OWVAR 35
49405: PUSH
49406: LD_VAR 0 1
49410: NEG
49411: PPUSH
49412: LD_VAR 0 1
49416: PPUSH
49417: CALL_OW 12
49421: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
49422: LD_ADDR_OWVAR 31
49426: PUSH
49427: LD_INT 0
49429: PPUSH
49430: LD_INT 3
49432: PPUSH
49433: CALL_OW 12
49437: PUSH
49438: LD_INT 0
49440: PPUSH
49441: LD_INT 3
49443: PPUSH
49444: CALL_OW 12
49448: PUSH
49449: LD_INT 0
49451: PUSH
49452: LD_INT 0
49454: PUSH
49455: EMPTY
49456: LIST
49457: LIST
49458: LIST
49459: LIST
49460: ST_TO_ADDR
// end ;
49461: LD_VAR 0 2
49465: RET
// export function PrepareTiger ( agressivity ) ; begin
49466: LD_INT 0
49468: PPUSH
// uc_side := 0 ;
49469: LD_ADDR_OWVAR 20
49473: PUSH
49474: LD_INT 0
49476: ST_TO_ADDR
// uc_nation := 0 ;
49477: LD_ADDR_OWVAR 21
49481: PUSH
49482: LD_INT 0
49484: ST_TO_ADDR
// hc_class := class_tiger ;
49485: LD_ADDR_OWVAR 28
49489: PUSH
49490: LD_INT 14
49492: ST_TO_ADDR
// hc_gallery :=  ;
49493: LD_ADDR_OWVAR 33
49497: PUSH
49498: LD_STRING 
49500: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
49501: LD_ADDR_OWVAR 35
49505: PUSH
49506: LD_VAR 0 1
49510: NEG
49511: PPUSH
49512: LD_VAR 0 1
49516: PPUSH
49517: CALL_OW 12
49521: ST_TO_ADDR
// end ;
49522: LD_VAR 0 2
49526: RET
// export function PrepareEnchidna ( ) ; begin
49527: LD_INT 0
49529: PPUSH
// uc_side := 0 ;
49530: LD_ADDR_OWVAR 20
49534: PUSH
49535: LD_INT 0
49537: ST_TO_ADDR
// uc_nation := 0 ;
49538: LD_ADDR_OWVAR 21
49542: PUSH
49543: LD_INT 0
49545: ST_TO_ADDR
// hc_class := class_baggie ;
49546: LD_ADDR_OWVAR 28
49550: PUSH
49551: LD_INT 13
49553: ST_TO_ADDR
// hc_gallery :=  ;
49554: LD_ADDR_OWVAR 33
49558: PUSH
49559: LD_STRING 
49561: ST_TO_ADDR
// end ;
49562: LD_VAR 0 1
49566: RET
// export function PrepareFrog ( ) ; begin
49567: LD_INT 0
49569: PPUSH
// uc_side := 0 ;
49570: LD_ADDR_OWVAR 20
49574: PUSH
49575: LD_INT 0
49577: ST_TO_ADDR
// uc_nation := 0 ;
49578: LD_ADDR_OWVAR 21
49582: PUSH
49583: LD_INT 0
49585: ST_TO_ADDR
// hc_class := class_frog ;
49586: LD_ADDR_OWVAR 28
49590: PUSH
49591: LD_INT 19
49593: ST_TO_ADDR
// hc_gallery :=  ;
49594: LD_ADDR_OWVAR 33
49598: PUSH
49599: LD_STRING 
49601: ST_TO_ADDR
// end ;
49602: LD_VAR 0 1
49606: RET
// export function PrepareFish ( ) ; begin
49607: LD_INT 0
49609: PPUSH
// uc_side := 0 ;
49610: LD_ADDR_OWVAR 20
49614: PUSH
49615: LD_INT 0
49617: ST_TO_ADDR
// uc_nation := 0 ;
49618: LD_ADDR_OWVAR 21
49622: PUSH
49623: LD_INT 0
49625: ST_TO_ADDR
// hc_class := class_fish ;
49626: LD_ADDR_OWVAR 28
49630: PUSH
49631: LD_INT 20
49633: ST_TO_ADDR
// hc_gallery :=  ;
49634: LD_ADDR_OWVAR 33
49638: PUSH
49639: LD_STRING 
49641: ST_TO_ADDR
// end ;
49642: LD_VAR 0 1
49646: RET
// export function PrepareBird ( ) ; begin
49647: LD_INT 0
49649: PPUSH
// uc_side := 0 ;
49650: LD_ADDR_OWVAR 20
49654: PUSH
49655: LD_INT 0
49657: ST_TO_ADDR
// uc_nation := 0 ;
49658: LD_ADDR_OWVAR 21
49662: PUSH
49663: LD_INT 0
49665: ST_TO_ADDR
// hc_class := class_phororhacos ;
49666: LD_ADDR_OWVAR 28
49670: PUSH
49671: LD_INT 18
49673: ST_TO_ADDR
// hc_gallery :=  ;
49674: LD_ADDR_OWVAR 33
49678: PUSH
49679: LD_STRING 
49681: ST_TO_ADDR
// end ;
49682: LD_VAR 0 1
49686: RET
// export function PrepareHorse ( ) ; begin
49687: LD_INT 0
49689: PPUSH
// uc_side := 0 ;
49690: LD_ADDR_OWVAR 20
49694: PUSH
49695: LD_INT 0
49697: ST_TO_ADDR
// uc_nation := 0 ;
49698: LD_ADDR_OWVAR 21
49702: PUSH
49703: LD_INT 0
49705: ST_TO_ADDR
// hc_class := class_horse ;
49706: LD_ADDR_OWVAR 28
49710: PUSH
49711: LD_INT 21
49713: ST_TO_ADDR
// hc_gallery :=  ;
49714: LD_ADDR_OWVAR 33
49718: PUSH
49719: LD_STRING 
49721: ST_TO_ADDR
// end ;
49722: LD_VAR 0 1
49726: RET
// export function PrepareMastodont ( ) ; begin
49727: LD_INT 0
49729: PPUSH
// uc_side := 0 ;
49730: LD_ADDR_OWVAR 20
49734: PUSH
49735: LD_INT 0
49737: ST_TO_ADDR
// uc_nation := 0 ;
49738: LD_ADDR_OWVAR 21
49742: PUSH
49743: LD_INT 0
49745: ST_TO_ADDR
// vc_chassis := class_mastodont ;
49746: LD_ADDR_OWVAR 37
49750: PUSH
49751: LD_INT 31
49753: ST_TO_ADDR
// vc_control := control_rider ;
49754: LD_ADDR_OWVAR 38
49758: PUSH
49759: LD_INT 4
49761: ST_TO_ADDR
// end ;
49762: LD_VAR 0 1
49766: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
49767: LD_INT 0
49769: PPUSH
49770: PPUSH
49771: PPUSH
// uc_side = 0 ;
49772: LD_ADDR_OWVAR 20
49776: PUSH
49777: LD_INT 0
49779: ST_TO_ADDR
// uc_nation = 0 ;
49780: LD_ADDR_OWVAR 21
49784: PUSH
49785: LD_INT 0
49787: ST_TO_ADDR
// InitHc_All ( ) ;
49788: CALL_OW 584
// InitVc ;
49792: CALL_OW 20
// if mastodonts then
49796: LD_VAR 0 6
49800: IFFALSE 49867
// for i = 1 to mastodonts do
49802: LD_ADDR_VAR 0 11
49806: PUSH
49807: DOUBLE
49808: LD_INT 1
49810: DEC
49811: ST_TO_ADDR
49812: LD_VAR 0 6
49816: PUSH
49817: FOR_TO
49818: IFFALSE 49865
// begin vc_chassis := 31 ;
49820: LD_ADDR_OWVAR 37
49824: PUSH
49825: LD_INT 31
49827: ST_TO_ADDR
// vc_control := control_rider ;
49828: LD_ADDR_OWVAR 38
49832: PUSH
49833: LD_INT 4
49835: ST_TO_ADDR
// animal := CreateVehicle ;
49836: LD_ADDR_VAR 0 12
49840: PUSH
49841: CALL_OW 45
49845: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49846: LD_VAR 0 12
49850: PPUSH
49851: LD_VAR 0 8
49855: PPUSH
49856: LD_INT 0
49858: PPUSH
49859: CALL 51995 0 3
// end ;
49863: GO 49817
49865: POP
49866: POP
// if horses then
49867: LD_VAR 0 5
49871: IFFALSE 49938
// for i = 1 to horses do
49873: LD_ADDR_VAR 0 11
49877: PUSH
49878: DOUBLE
49879: LD_INT 1
49881: DEC
49882: ST_TO_ADDR
49883: LD_VAR 0 5
49887: PUSH
49888: FOR_TO
49889: IFFALSE 49936
// begin hc_class := 21 ;
49891: LD_ADDR_OWVAR 28
49895: PUSH
49896: LD_INT 21
49898: ST_TO_ADDR
// hc_gallery :=  ;
49899: LD_ADDR_OWVAR 33
49903: PUSH
49904: LD_STRING 
49906: ST_TO_ADDR
// animal := CreateHuman ;
49907: LD_ADDR_VAR 0 12
49911: PUSH
49912: CALL_OW 44
49916: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49917: LD_VAR 0 12
49921: PPUSH
49922: LD_VAR 0 8
49926: PPUSH
49927: LD_INT 0
49929: PPUSH
49930: CALL 51995 0 3
// end ;
49934: GO 49888
49936: POP
49937: POP
// if birds then
49938: LD_VAR 0 1
49942: IFFALSE 50009
// for i = 1 to birds do
49944: LD_ADDR_VAR 0 11
49948: PUSH
49949: DOUBLE
49950: LD_INT 1
49952: DEC
49953: ST_TO_ADDR
49954: LD_VAR 0 1
49958: PUSH
49959: FOR_TO
49960: IFFALSE 50007
// begin hc_class := 18 ;
49962: LD_ADDR_OWVAR 28
49966: PUSH
49967: LD_INT 18
49969: ST_TO_ADDR
// hc_gallery =  ;
49970: LD_ADDR_OWVAR 33
49974: PUSH
49975: LD_STRING 
49977: ST_TO_ADDR
// animal := CreateHuman ;
49978: LD_ADDR_VAR 0 12
49982: PUSH
49983: CALL_OW 44
49987: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49988: LD_VAR 0 12
49992: PPUSH
49993: LD_VAR 0 8
49997: PPUSH
49998: LD_INT 0
50000: PPUSH
50001: CALL 51995 0 3
// end ;
50005: GO 49959
50007: POP
50008: POP
// if tigers then
50009: LD_VAR 0 2
50013: IFFALSE 50097
// for i = 1 to tigers do
50015: LD_ADDR_VAR 0 11
50019: PUSH
50020: DOUBLE
50021: LD_INT 1
50023: DEC
50024: ST_TO_ADDR
50025: LD_VAR 0 2
50029: PUSH
50030: FOR_TO
50031: IFFALSE 50095
// begin hc_class = class_tiger ;
50033: LD_ADDR_OWVAR 28
50037: PUSH
50038: LD_INT 14
50040: ST_TO_ADDR
// hc_gallery =  ;
50041: LD_ADDR_OWVAR 33
50045: PUSH
50046: LD_STRING 
50048: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
50049: LD_ADDR_OWVAR 35
50053: PUSH
50054: LD_INT 7
50056: NEG
50057: PPUSH
50058: LD_INT 7
50060: PPUSH
50061: CALL_OW 12
50065: ST_TO_ADDR
// animal := CreateHuman ;
50066: LD_ADDR_VAR 0 12
50070: PUSH
50071: CALL_OW 44
50075: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50076: LD_VAR 0 12
50080: PPUSH
50081: LD_VAR 0 8
50085: PPUSH
50086: LD_INT 0
50088: PPUSH
50089: CALL 51995 0 3
// end ;
50093: GO 50030
50095: POP
50096: POP
// if apemans then
50097: LD_VAR 0 3
50101: IFFALSE 50224
// for i = 1 to apemans do
50103: LD_ADDR_VAR 0 11
50107: PUSH
50108: DOUBLE
50109: LD_INT 1
50111: DEC
50112: ST_TO_ADDR
50113: LD_VAR 0 3
50117: PUSH
50118: FOR_TO
50119: IFFALSE 50222
// begin hc_class = class_apeman ;
50121: LD_ADDR_OWVAR 28
50125: PUSH
50126: LD_INT 12
50128: ST_TO_ADDR
// hc_gallery =  ;
50129: LD_ADDR_OWVAR 33
50133: PUSH
50134: LD_STRING 
50136: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
50137: LD_ADDR_OWVAR 35
50141: PUSH
50142: LD_INT 2
50144: NEG
50145: PPUSH
50146: LD_INT 2
50148: PPUSH
50149: CALL_OW 12
50153: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
50154: LD_ADDR_OWVAR 31
50158: PUSH
50159: LD_INT 1
50161: PPUSH
50162: LD_INT 3
50164: PPUSH
50165: CALL_OW 12
50169: PUSH
50170: LD_INT 1
50172: PPUSH
50173: LD_INT 3
50175: PPUSH
50176: CALL_OW 12
50180: PUSH
50181: LD_INT 0
50183: PUSH
50184: LD_INT 0
50186: PUSH
50187: EMPTY
50188: LIST
50189: LIST
50190: LIST
50191: LIST
50192: ST_TO_ADDR
// animal := CreateHuman ;
50193: LD_ADDR_VAR 0 12
50197: PUSH
50198: CALL_OW 44
50202: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50203: LD_VAR 0 12
50207: PPUSH
50208: LD_VAR 0 8
50212: PPUSH
50213: LD_INT 0
50215: PPUSH
50216: CALL 51995 0 3
// end ;
50220: GO 50118
50222: POP
50223: POP
// if enchidnas then
50224: LD_VAR 0 4
50228: IFFALSE 50295
// for i = 1 to enchidnas do
50230: LD_ADDR_VAR 0 11
50234: PUSH
50235: DOUBLE
50236: LD_INT 1
50238: DEC
50239: ST_TO_ADDR
50240: LD_VAR 0 4
50244: PUSH
50245: FOR_TO
50246: IFFALSE 50293
// begin hc_class = 13 ;
50248: LD_ADDR_OWVAR 28
50252: PUSH
50253: LD_INT 13
50255: ST_TO_ADDR
// hc_gallery =  ;
50256: LD_ADDR_OWVAR 33
50260: PUSH
50261: LD_STRING 
50263: ST_TO_ADDR
// animal := CreateHuman ;
50264: LD_ADDR_VAR 0 12
50268: PUSH
50269: CALL_OW 44
50273: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50274: LD_VAR 0 12
50278: PPUSH
50279: LD_VAR 0 8
50283: PPUSH
50284: LD_INT 0
50286: PPUSH
50287: CALL 51995 0 3
// end ;
50291: GO 50245
50293: POP
50294: POP
// if fishes then
50295: LD_VAR 0 7
50299: IFFALSE 50366
// for i = 1 to fishes do
50301: LD_ADDR_VAR 0 11
50305: PUSH
50306: DOUBLE
50307: LD_INT 1
50309: DEC
50310: ST_TO_ADDR
50311: LD_VAR 0 7
50315: PUSH
50316: FOR_TO
50317: IFFALSE 50364
// begin hc_class = 20 ;
50319: LD_ADDR_OWVAR 28
50323: PUSH
50324: LD_INT 20
50326: ST_TO_ADDR
// hc_gallery =  ;
50327: LD_ADDR_OWVAR 33
50331: PUSH
50332: LD_STRING 
50334: ST_TO_ADDR
// animal := CreateHuman ;
50335: LD_ADDR_VAR 0 12
50339: PUSH
50340: CALL_OW 44
50344: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
50345: LD_VAR 0 12
50349: PPUSH
50350: LD_VAR 0 9
50354: PPUSH
50355: LD_INT 0
50357: PPUSH
50358: CALL 51995 0 3
// end ;
50362: GO 50316
50364: POP
50365: POP
// end ;
50366: LD_VAR 0 10
50370: RET
// export function WantHeal ( sci , unit ) ; begin
50371: LD_INT 0
50373: PPUSH
// if GetTaskList ( sci ) > 0 then
50374: LD_VAR 0 1
50378: PPUSH
50379: CALL_OW 437
50383: PUSH
50384: LD_INT 0
50386: GREATER
50387: IFFALSE 50457
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
50389: LD_VAR 0 1
50393: PPUSH
50394: CALL_OW 437
50398: PUSH
50399: LD_INT 1
50401: ARRAY
50402: PUSH
50403: LD_INT 1
50405: ARRAY
50406: PUSH
50407: LD_STRING l
50409: EQUAL
50410: PUSH
50411: LD_VAR 0 1
50415: PPUSH
50416: CALL_OW 437
50420: PUSH
50421: LD_INT 1
50423: ARRAY
50424: PUSH
50425: LD_INT 4
50427: ARRAY
50428: PUSH
50429: LD_VAR 0 2
50433: EQUAL
50434: AND
50435: IFFALSE 50447
// result := true else
50437: LD_ADDR_VAR 0 3
50441: PUSH
50442: LD_INT 1
50444: ST_TO_ADDR
50445: GO 50455
// result := false ;
50447: LD_ADDR_VAR 0 3
50451: PUSH
50452: LD_INT 0
50454: ST_TO_ADDR
// end else
50455: GO 50465
// result := false ;
50457: LD_ADDR_VAR 0 3
50461: PUSH
50462: LD_INT 0
50464: ST_TO_ADDR
// end ;
50465: LD_VAR 0 3
50469: RET
// export function HealTarget ( sci ) ; begin
50470: LD_INT 0
50472: PPUSH
// if not sci then
50473: LD_VAR 0 1
50477: NOT
50478: IFFALSE 50482
// exit ;
50480: GO 50547
// result := 0 ;
50482: LD_ADDR_VAR 0 2
50486: PUSH
50487: LD_INT 0
50489: ST_TO_ADDR
// if GetTaskList ( sci ) then
50490: LD_VAR 0 1
50494: PPUSH
50495: CALL_OW 437
50499: IFFALSE 50547
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
50501: LD_VAR 0 1
50505: PPUSH
50506: CALL_OW 437
50510: PUSH
50511: LD_INT 1
50513: ARRAY
50514: PUSH
50515: LD_INT 1
50517: ARRAY
50518: PUSH
50519: LD_STRING l
50521: EQUAL
50522: IFFALSE 50547
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
50524: LD_ADDR_VAR 0 2
50528: PUSH
50529: LD_VAR 0 1
50533: PPUSH
50534: CALL_OW 437
50538: PUSH
50539: LD_INT 1
50541: ARRAY
50542: PUSH
50543: LD_INT 4
50545: ARRAY
50546: ST_TO_ADDR
// end ;
50547: LD_VAR 0 2
50551: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
50552: LD_INT 0
50554: PPUSH
50555: PPUSH
50556: PPUSH
50557: PPUSH
// if not base_units then
50558: LD_VAR 0 1
50562: NOT
50563: IFFALSE 50567
// exit ;
50565: GO 50654
// result := false ;
50567: LD_ADDR_VAR 0 2
50571: PUSH
50572: LD_INT 0
50574: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
50575: LD_ADDR_VAR 0 5
50579: PUSH
50580: LD_VAR 0 1
50584: PPUSH
50585: LD_INT 21
50587: PUSH
50588: LD_INT 3
50590: PUSH
50591: EMPTY
50592: LIST
50593: LIST
50594: PPUSH
50595: CALL_OW 72
50599: ST_TO_ADDR
// if not tmp then
50600: LD_VAR 0 5
50604: NOT
50605: IFFALSE 50609
// exit ;
50607: GO 50654
// for i in tmp do
50609: LD_ADDR_VAR 0 3
50613: PUSH
50614: LD_VAR 0 5
50618: PUSH
50619: FOR_IN
50620: IFFALSE 50652
// begin result := EnemyInRange ( i , 22 ) ;
50622: LD_ADDR_VAR 0 2
50626: PUSH
50627: LD_VAR 0 3
50631: PPUSH
50632: LD_INT 22
50634: PPUSH
50635: CALL 48232 0 2
50639: ST_TO_ADDR
// if result then
50640: LD_VAR 0 2
50644: IFFALSE 50650
// exit ;
50646: POP
50647: POP
50648: GO 50654
// end ;
50650: GO 50619
50652: POP
50653: POP
// end ;
50654: LD_VAR 0 2
50658: RET
// export function FilterByTag ( units , tag ) ; begin
50659: LD_INT 0
50661: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
50662: LD_ADDR_VAR 0 3
50666: PUSH
50667: LD_VAR 0 1
50671: PPUSH
50672: LD_INT 120
50674: PUSH
50675: LD_VAR 0 2
50679: PUSH
50680: EMPTY
50681: LIST
50682: LIST
50683: PPUSH
50684: CALL_OW 72
50688: ST_TO_ADDR
// end ;
50689: LD_VAR 0 3
50693: RET
// export function IsDriver ( un ) ; begin
50694: LD_INT 0
50696: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
50697: LD_ADDR_VAR 0 2
50701: PUSH
50702: LD_VAR 0 1
50706: PUSH
50707: LD_INT 55
50709: PUSH
50710: EMPTY
50711: LIST
50712: PPUSH
50713: CALL_OW 69
50717: IN
50718: ST_TO_ADDR
// end ;
50719: LD_VAR 0 2
50723: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
50724: LD_INT 0
50726: PPUSH
50727: PPUSH
// list := [ ] ;
50728: LD_ADDR_VAR 0 5
50732: PUSH
50733: EMPTY
50734: ST_TO_ADDR
// case d of 0 :
50735: LD_VAR 0 3
50739: PUSH
50740: LD_INT 0
50742: DOUBLE
50743: EQUAL
50744: IFTRUE 50748
50746: GO 50881
50748: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
50749: LD_ADDR_VAR 0 5
50753: PUSH
50754: LD_VAR 0 1
50758: PUSH
50759: LD_INT 4
50761: MINUS
50762: PUSH
50763: LD_VAR 0 2
50767: PUSH
50768: LD_INT 4
50770: MINUS
50771: PUSH
50772: LD_INT 2
50774: PUSH
50775: EMPTY
50776: LIST
50777: LIST
50778: LIST
50779: PUSH
50780: LD_VAR 0 1
50784: PUSH
50785: LD_INT 3
50787: MINUS
50788: PUSH
50789: LD_VAR 0 2
50793: PUSH
50794: LD_INT 1
50796: PUSH
50797: EMPTY
50798: LIST
50799: LIST
50800: LIST
50801: PUSH
50802: LD_VAR 0 1
50806: PUSH
50807: LD_INT 4
50809: PLUS
50810: PUSH
50811: LD_VAR 0 2
50815: PUSH
50816: LD_INT 4
50818: PUSH
50819: EMPTY
50820: LIST
50821: LIST
50822: LIST
50823: PUSH
50824: LD_VAR 0 1
50828: PUSH
50829: LD_INT 3
50831: PLUS
50832: PUSH
50833: LD_VAR 0 2
50837: PUSH
50838: LD_INT 3
50840: PLUS
50841: PUSH
50842: LD_INT 5
50844: PUSH
50845: EMPTY
50846: LIST
50847: LIST
50848: LIST
50849: PUSH
50850: LD_VAR 0 1
50854: PUSH
50855: LD_VAR 0 2
50859: PUSH
50860: LD_INT 4
50862: PLUS
50863: PUSH
50864: LD_INT 0
50866: PUSH
50867: EMPTY
50868: LIST
50869: LIST
50870: LIST
50871: PUSH
50872: EMPTY
50873: LIST
50874: LIST
50875: LIST
50876: LIST
50877: LIST
50878: ST_TO_ADDR
// end ; 1 :
50879: GO 51579
50881: LD_INT 1
50883: DOUBLE
50884: EQUAL
50885: IFTRUE 50889
50887: GO 51022
50889: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
50890: LD_ADDR_VAR 0 5
50894: PUSH
50895: LD_VAR 0 1
50899: PUSH
50900: LD_VAR 0 2
50904: PUSH
50905: LD_INT 4
50907: MINUS
50908: PUSH
50909: LD_INT 3
50911: PUSH
50912: EMPTY
50913: LIST
50914: LIST
50915: LIST
50916: PUSH
50917: LD_VAR 0 1
50921: PUSH
50922: LD_INT 3
50924: MINUS
50925: PUSH
50926: LD_VAR 0 2
50930: PUSH
50931: LD_INT 3
50933: MINUS
50934: PUSH
50935: LD_INT 2
50937: PUSH
50938: EMPTY
50939: LIST
50940: LIST
50941: LIST
50942: PUSH
50943: LD_VAR 0 1
50947: PUSH
50948: LD_INT 4
50950: MINUS
50951: PUSH
50952: LD_VAR 0 2
50956: PUSH
50957: LD_INT 1
50959: PUSH
50960: EMPTY
50961: LIST
50962: LIST
50963: LIST
50964: PUSH
50965: LD_VAR 0 1
50969: PUSH
50970: LD_VAR 0 2
50974: PUSH
50975: LD_INT 3
50977: PLUS
50978: PUSH
50979: LD_INT 0
50981: PUSH
50982: EMPTY
50983: LIST
50984: LIST
50985: LIST
50986: PUSH
50987: LD_VAR 0 1
50991: PUSH
50992: LD_INT 4
50994: PLUS
50995: PUSH
50996: LD_VAR 0 2
51000: PUSH
51001: LD_INT 4
51003: PLUS
51004: PUSH
51005: LD_INT 5
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: LIST
51012: PUSH
51013: EMPTY
51014: LIST
51015: LIST
51016: LIST
51017: LIST
51018: LIST
51019: ST_TO_ADDR
// end ; 2 :
51020: GO 51579
51022: LD_INT 2
51024: DOUBLE
51025: EQUAL
51026: IFTRUE 51030
51028: GO 51159
51030: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
51031: LD_ADDR_VAR 0 5
51035: PUSH
51036: LD_VAR 0 1
51040: PUSH
51041: LD_VAR 0 2
51045: PUSH
51046: LD_INT 3
51048: MINUS
51049: PUSH
51050: LD_INT 3
51052: PUSH
51053: EMPTY
51054: LIST
51055: LIST
51056: LIST
51057: PUSH
51058: LD_VAR 0 1
51062: PUSH
51063: LD_INT 4
51065: PLUS
51066: PUSH
51067: LD_VAR 0 2
51071: PUSH
51072: LD_INT 4
51074: PUSH
51075: EMPTY
51076: LIST
51077: LIST
51078: LIST
51079: PUSH
51080: LD_VAR 0 1
51084: PUSH
51085: LD_VAR 0 2
51089: PUSH
51090: LD_INT 4
51092: PLUS
51093: PUSH
51094: LD_INT 0
51096: PUSH
51097: EMPTY
51098: LIST
51099: LIST
51100: LIST
51101: PUSH
51102: LD_VAR 0 1
51106: PUSH
51107: LD_INT 3
51109: MINUS
51110: PUSH
51111: LD_VAR 0 2
51115: PUSH
51116: LD_INT 1
51118: PUSH
51119: EMPTY
51120: LIST
51121: LIST
51122: LIST
51123: PUSH
51124: LD_VAR 0 1
51128: PUSH
51129: LD_INT 4
51131: MINUS
51132: PUSH
51133: LD_VAR 0 2
51137: PUSH
51138: LD_INT 4
51140: MINUS
51141: PUSH
51142: LD_INT 2
51144: PUSH
51145: EMPTY
51146: LIST
51147: LIST
51148: LIST
51149: PUSH
51150: EMPTY
51151: LIST
51152: LIST
51153: LIST
51154: LIST
51155: LIST
51156: ST_TO_ADDR
// end ; 3 :
51157: GO 51579
51159: LD_INT 3
51161: DOUBLE
51162: EQUAL
51163: IFTRUE 51167
51165: GO 51300
51167: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
51168: LD_ADDR_VAR 0 5
51172: PUSH
51173: LD_VAR 0 1
51177: PUSH
51178: LD_INT 3
51180: PLUS
51181: PUSH
51182: LD_VAR 0 2
51186: PUSH
51187: LD_INT 4
51189: PUSH
51190: EMPTY
51191: LIST
51192: LIST
51193: LIST
51194: PUSH
51195: LD_VAR 0 1
51199: PUSH
51200: LD_INT 4
51202: PLUS
51203: PUSH
51204: LD_VAR 0 2
51208: PUSH
51209: LD_INT 4
51211: PLUS
51212: PUSH
51213: LD_INT 5
51215: PUSH
51216: EMPTY
51217: LIST
51218: LIST
51219: LIST
51220: PUSH
51221: LD_VAR 0 1
51225: PUSH
51226: LD_INT 4
51228: MINUS
51229: PUSH
51230: LD_VAR 0 2
51234: PUSH
51235: LD_INT 1
51237: PUSH
51238: EMPTY
51239: LIST
51240: LIST
51241: LIST
51242: PUSH
51243: LD_VAR 0 1
51247: PUSH
51248: LD_VAR 0 2
51252: PUSH
51253: LD_INT 4
51255: MINUS
51256: PUSH
51257: LD_INT 3
51259: PUSH
51260: EMPTY
51261: LIST
51262: LIST
51263: LIST
51264: PUSH
51265: LD_VAR 0 1
51269: PUSH
51270: LD_INT 3
51272: MINUS
51273: PUSH
51274: LD_VAR 0 2
51278: PUSH
51279: LD_INT 3
51281: MINUS
51282: PUSH
51283: LD_INT 2
51285: PUSH
51286: EMPTY
51287: LIST
51288: LIST
51289: LIST
51290: PUSH
51291: EMPTY
51292: LIST
51293: LIST
51294: LIST
51295: LIST
51296: LIST
51297: ST_TO_ADDR
// end ; 4 :
51298: GO 51579
51300: LD_INT 4
51302: DOUBLE
51303: EQUAL
51304: IFTRUE 51308
51306: GO 51441
51308: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
51309: LD_ADDR_VAR 0 5
51313: PUSH
51314: LD_VAR 0 1
51318: PUSH
51319: LD_VAR 0 2
51323: PUSH
51324: LD_INT 4
51326: PLUS
51327: PUSH
51328: LD_INT 0
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: LIST
51335: PUSH
51336: LD_VAR 0 1
51340: PUSH
51341: LD_INT 3
51343: PLUS
51344: PUSH
51345: LD_VAR 0 2
51349: PUSH
51350: LD_INT 3
51352: PLUS
51353: PUSH
51354: LD_INT 5
51356: PUSH
51357: EMPTY
51358: LIST
51359: LIST
51360: LIST
51361: PUSH
51362: LD_VAR 0 1
51366: PUSH
51367: LD_INT 4
51369: PLUS
51370: PUSH
51371: LD_VAR 0 2
51375: PUSH
51376: LD_INT 4
51378: PUSH
51379: EMPTY
51380: LIST
51381: LIST
51382: LIST
51383: PUSH
51384: LD_VAR 0 1
51388: PUSH
51389: LD_VAR 0 2
51393: PUSH
51394: LD_INT 3
51396: MINUS
51397: PUSH
51398: LD_INT 3
51400: PUSH
51401: EMPTY
51402: LIST
51403: LIST
51404: LIST
51405: PUSH
51406: LD_VAR 0 1
51410: PUSH
51411: LD_INT 4
51413: MINUS
51414: PUSH
51415: LD_VAR 0 2
51419: PUSH
51420: LD_INT 4
51422: MINUS
51423: PUSH
51424: LD_INT 2
51426: PUSH
51427: EMPTY
51428: LIST
51429: LIST
51430: LIST
51431: PUSH
51432: EMPTY
51433: LIST
51434: LIST
51435: LIST
51436: LIST
51437: LIST
51438: ST_TO_ADDR
// end ; 5 :
51439: GO 51579
51441: LD_INT 5
51443: DOUBLE
51444: EQUAL
51445: IFTRUE 51449
51447: GO 51578
51449: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
51450: LD_ADDR_VAR 0 5
51454: PUSH
51455: LD_VAR 0 1
51459: PUSH
51460: LD_INT 4
51462: MINUS
51463: PUSH
51464: LD_VAR 0 2
51468: PUSH
51469: LD_INT 1
51471: PUSH
51472: EMPTY
51473: LIST
51474: LIST
51475: LIST
51476: PUSH
51477: LD_VAR 0 1
51481: PUSH
51482: LD_VAR 0 2
51486: PUSH
51487: LD_INT 4
51489: MINUS
51490: PUSH
51491: LD_INT 3
51493: PUSH
51494: EMPTY
51495: LIST
51496: LIST
51497: LIST
51498: PUSH
51499: LD_VAR 0 1
51503: PUSH
51504: LD_INT 4
51506: PLUS
51507: PUSH
51508: LD_VAR 0 2
51512: PUSH
51513: LD_INT 4
51515: PLUS
51516: PUSH
51517: LD_INT 5
51519: PUSH
51520: EMPTY
51521: LIST
51522: LIST
51523: LIST
51524: PUSH
51525: LD_VAR 0 1
51529: PUSH
51530: LD_INT 3
51532: PLUS
51533: PUSH
51534: LD_VAR 0 2
51538: PUSH
51539: LD_INT 4
51541: PUSH
51542: EMPTY
51543: LIST
51544: LIST
51545: LIST
51546: PUSH
51547: LD_VAR 0 1
51551: PUSH
51552: LD_VAR 0 2
51556: PUSH
51557: LD_INT 3
51559: PLUS
51560: PUSH
51561: LD_INT 0
51563: PUSH
51564: EMPTY
51565: LIST
51566: LIST
51567: LIST
51568: PUSH
51569: EMPTY
51570: LIST
51571: LIST
51572: LIST
51573: LIST
51574: LIST
51575: ST_TO_ADDR
// end ; end ;
51576: GO 51579
51578: POP
// result := list ;
51579: LD_ADDR_VAR 0 4
51583: PUSH
51584: LD_VAR 0 5
51588: ST_TO_ADDR
// end ;
51589: LD_VAR 0 4
51593: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
51594: LD_INT 0
51596: PPUSH
51597: PPUSH
51598: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
51599: LD_VAR 0 1
51603: NOT
51604: PUSH
51605: LD_VAR 0 2
51609: PUSH
51610: LD_INT 1
51612: PUSH
51613: LD_INT 2
51615: PUSH
51616: LD_INT 3
51618: PUSH
51619: LD_INT 4
51621: PUSH
51622: EMPTY
51623: LIST
51624: LIST
51625: LIST
51626: LIST
51627: IN
51628: NOT
51629: OR
51630: IFFALSE 51634
// exit ;
51632: GO 51717
// tmp := [ ] ;
51634: LD_ADDR_VAR 0 5
51638: PUSH
51639: EMPTY
51640: ST_TO_ADDR
// for i in units do
51641: LD_ADDR_VAR 0 4
51645: PUSH
51646: LD_VAR 0 1
51650: PUSH
51651: FOR_IN
51652: IFFALSE 51686
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
51654: LD_ADDR_VAR 0 5
51658: PUSH
51659: LD_VAR 0 5
51663: PPUSH
51664: LD_VAR 0 4
51668: PPUSH
51669: LD_VAR 0 2
51673: PPUSH
51674: CALL_OW 259
51678: PPUSH
51679: CALL 53090 0 2
51683: ST_TO_ADDR
51684: GO 51651
51686: POP
51687: POP
// if not tmp then
51688: LD_VAR 0 5
51692: NOT
51693: IFFALSE 51697
// exit ;
51695: GO 51717
// result := SortListByListDesc ( units , tmp ) ;
51697: LD_ADDR_VAR 0 3
51701: PUSH
51702: LD_VAR 0 1
51706: PPUSH
51707: LD_VAR 0 5
51711: PPUSH
51712: CALL_OW 77
51716: ST_TO_ADDR
// end ;
51717: LD_VAR 0 3
51721: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
51722: LD_INT 0
51724: PPUSH
51725: PPUSH
51726: PPUSH
// result := false ;
51727: LD_ADDR_VAR 0 3
51731: PUSH
51732: LD_INT 0
51734: ST_TO_ADDR
// if not building then
51735: LD_VAR 0 2
51739: NOT
51740: IFFALSE 51744
// exit ;
51742: GO 51882
// x := GetX ( building ) ;
51744: LD_ADDR_VAR 0 4
51748: PUSH
51749: LD_VAR 0 2
51753: PPUSH
51754: CALL_OW 250
51758: ST_TO_ADDR
// y := GetY ( building ) ;
51759: LD_ADDR_VAR 0 5
51763: PUSH
51764: LD_VAR 0 2
51768: PPUSH
51769: CALL_OW 251
51773: ST_TO_ADDR
// if not x or not y then
51774: LD_VAR 0 4
51778: NOT
51779: PUSH
51780: LD_VAR 0 5
51784: NOT
51785: OR
51786: IFFALSE 51790
// exit ;
51788: GO 51882
// if GetTaskList ( unit ) then
51790: LD_VAR 0 1
51794: PPUSH
51795: CALL_OW 437
51799: IFFALSE 51882
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
51801: LD_STRING e
51803: PUSH
51804: LD_VAR 0 1
51808: PPUSH
51809: CALL_OW 437
51813: PUSH
51814: LD_INT 1
51816: ARRAY
51817: PUSH
51818: LD_INT 1
51820: ARRAY
51821: EQUAL
51822: PUSH
51823: LD_VAR 0 4
51827: PUSH
51828: LD_VAR 0 1
51832: PPUSH
51833: CALL_OW 437
51837: PUSH
51838: LD_INT 1
51840: ARRAY
51841: PUSH
51842: LD_INT 2
51844: ARRAY
51845: EQUAL
51846: AND
51847: PUSH
51848: LD_VAR 0 5
51852: PUSH
51853: LD_VAR 0 1
51857: PPUSH
51858: CALL_OW 437
51862: PUSH
51863: LD_INT 1
51865: ARRAY
51866: PUSH
51867: LD_INT 3
51869: ARRAY
51870: EQUAL
51871: AND
51872: IFFALSE 51882
// result := true end ;
51874: LD_ADDR_VAR 0 3
51878: PUSH
51879: LD_INT 1
51881: ST_TO_ADDR
// end ;
51882: LD_VAR 0 3
51886: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
51887: LD_INT 0
51889: PPUSH
// result := false ;
51890: LD_ADDR_VAR 0 4
51894: PUSH
51895: LD_INT 0
51897: ST_TO_ADDR
// if GetTaskList ( unit ) then
51898: LD_VAR 0 1
51902: PPUSH
51903: CALL_OW 437
51907: IFFALSE 51990
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
51909: LD_STRING M
51911: PUSH
51912: LD_VAR 0 1
51916: PPUSH
51917: CALL_OW 437
51921: PUSH
51922: LD_INT 1
51924: ARRAY
51925: PUSH
51926: LD_INT 1
51928: ARRAY
51929: EQUAL
51930: PUSH
51931: LD_VAR 0 2
51935: PUSH
51936: LD_VAR 0 1
51940: PPUSH
51941: CALL_OW 437
51945: PUSH
51946: LD_INT 1
51948: ARRAY
51949: PUSH
51950: LD_INT 2
51952: ARRAY
51953: EQUAL
51954: AND
51955: PUSH
51956: LD_VAR 0 3
51960: PUSH
51961: LD_VAR 0 1
51965: PPUSH
51966: CALL_OW 437
51970: PUSH
51971: LD_INT 1
51973: ARRAY
51974: PUSH
51975: LD_INT 3
51977: ARRAY
51978: EQUAL
51979: AND
51980: IFFALSE 51990
// result := true ;
51982: LD_ADDR_VAR 0 4
51986: PUSH
51987: LD_INT 1
51989: ST_TO_ADDR
// end ; end ;
51990: LD_VAR 0 4
51994: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
51995: LD_INT 0
51997: PPUSH
51998: PPUSH
51999: PPUSH
52000: PPUSH
// if not unit or not area then
52001: LD_VAR 0 1
52005: NOT
52006: PUSH
52007: LD_VAR 0 2
52011: NOT
52012: OR
52013: IFFALSE 52017
// exit ;
52015: GO 52193
// tmp := AreaToList ( area , i ) ;
52017: LD_ADDR_VAR 0 6
52021: PUSH
52022: LD_VAR 0 2
52026: PPUSH
52027: LD_VAR 0 5
52031: PPUSH
52032: CALL_OW 517
52036: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
52037: LD_ADDR_VAR 0 5
52041: PUSH
52042: DOUBLE
52043: LD_INT 1
52045: DEC
52046: ST_TO_ADDR
52047: LD_VAR 0 6
52051: PUSH
52052: LD_INT 1
52054: ARRAY
52055: PUSH
52056: FOR_TO
52057: IFFALSE 52191
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
52059: LD_ADDR_VAR 0 7
52063: PUSH
52064: LD_VAR 0 6
52068: PUSH
52069: LD_INT 1
52071: ARRAY
52072: PUSH
52073: LD_VAR 0 5
52077: ARRAY
52078: PUSH
52079: LD_VAR 0 6
52083: PUSH
52084: LD_INT 2
52086: ARRAY
52087: PUSH
52088: LD_VAR 0 5
52092: ARRAY
52093: PUSH
52094: EMPTY
52095: LIST
52096: LIST
52097: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
52098: LD_INT 92
52100: PUSH
52101: LD_VAR 0 7
52105: PUSH
52106: LD_INT 1
52108: ARRAY
52109: PUSH
52110: LD_VAR 0 7
52114: PUSH
52115: LD_INT 2
52117: ARRAY
52118: PUSH
52119: LD_INT 2
52121: PUSH
52122: EMPTY
52123: LIST
52124: LIST
52125: LIST
52126: LIST
52127: PPUSH
52128: CALL_OW 69
52132: PUSH
52133: LD_INT 0
52135: EQUAL
52136: IFFALSE 52189
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
52138: LD_VAR 0 1
52142: PPUSH
52143: LD_VAR 0 7
52147: PUSH
52148: LD_INT 1
52150: ARRAY
52151: PPUSH
52152: LD_VAR 0 7
52156: PUSH
52157: LD_INT 2
52159: ARRAY
52160: PPUSH
52161: LD_VAR 0 3
52165: PPUSH
52166: CALL_OW 48
// result := IsPlaced ( unit ) ;
52170: LD_ADDR_VAR 0 4
52174: PUSH
52175: LD_VAR 0 1
52179: PPUSH
52180: CALL_OW 305
52184: ST_TO_ADDR
// exit ;
52185: POP
52186: POP
52187: GO 52193
// end ; end ;
52189: GO 52056
52191: POP
52192: POP
// end ;
52193: LD_VAR 0 4
52197: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
52198: LD_INT 0
52200: PPUSH
52201: PPUSH
52202: PPUSH
// if not side or side > 8 then
52203: LD_VAR 0 1
52207: NOT
52208: PUSH
52209: LD_VAR 0 1
52213: PUSH
52214: LD_INT 8
52216: GREATER
52217: OR
52218: IFFALSE 52222
// exit ;
52220: GO 52409
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
52222: LD_ADDR_VAR 0 4
52226: PUSH
52227: LD_INT 22
52229: PUSH
52230: LD_VAR 0 1
52234: PUSH
52235: EMPTY
52236: LIST
52237: LIST
52238: PUSH
52239: LD_INT 21
52241: PUSH
52242: LD_INT 3
52244: PUSH
52245: EMPTY
52246: LIST
52247: LIST
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: PPUSH
52253: CALL_OW 69
52257: ST_TO_ADDR
// if not tmp then
52258: LD_VAR 0 4
52262: NOT
52263: IFFALSE 52267
// exit ;
52265: GO 52409
// enable_addtolog := true ;
52267: LD_ADDR_OWVAR 81
52271: PUSH
52272: LD_INT 1
52274: ST_TO_ADDR
// AddToLog ( [ ) ;
52275: LD_STRING [
52277: PPUSH
52278: CALL_OW 561
// for i in tmp do
52282: LD_ADDR_VAR 0 3
52286: PUSH
52287: LD_VAR 0 4
52291: PUSH
52292: FOR_IN
52293: IFFALSE 52400
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
52295: LD_STRING [
52297: PUSH
52298: LD_VAR 0 3
52302: PPUSH
52303: CALL_OW 266
52307: STR
52308: PUSH
52309: LD_STRING , 
52311: STR
52312: PUSH
52313: LD_VAR 0 3
52317: PPUSH
52318: CALL_OW 250
52322: STR
52323: PUSH
52324: LD_STRING , 
52326: STR
52327: PUSH
52328: LD_VAR 0 3
52332: PPUSH
52333: CALL_OW 251
52337: STR
52338: PUSH
52339: LD_STRING , 
52341: STR
52342: PUSH
52343: LD_VAR 0 3
52347: PPUSH
52348: CALL_OW 254
52352: STR
52353: PUSH
52354: LD_STRING , 
52356: STR
52357: PUSH
52358: LD_VAR 0 3
52362: PPUSH
52363: LD_INT 1
52365: PPUSH
52366: CALL_OW 268
52370: STR
52371: PUSH
52372: LD_STRING , 
52374: STR
52375: PUSH
52376: LD_VAR 0 3
52380: PPUSH
52381: LD_INT 2
52383: PPUSH
52384: CALL_OW 268
52388: STR
52389: PUSH
52390: LD_STRING ],
52392: STR
52393: PPUSH
52394: CALL_OW 561
// end ;
52398: GO 52292
52400: POP
52401: POP
// AddToLog ( ]; ) ;
52402: LD_STRING ];
52404: PPUSH
52405: CALL_OW 561
// end ;
52409: LD_VAR 0 2
52413: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
52414: LD_INT 0
52416: PPUSH
52417: PPUSH
52418: PPUSH
52419: PPUSH
52420: PPUSH
// if not area or not rate or not max then
52421: LD_VAR 0 1
52425: NOT
52426: PUSH
52427: LD_VAR 0 2
52431: NOT
52432: OR
52433: PUSH
52434: LD_VAR 0 4
52438: NOT
52439: OR
52440: IFFALSE 52444
// exit ;
52442: GO 52633
// while 1 do
52444: LD_INT 1
52446: IFFALSE 52633
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
52448: LD_ADDR_VAR 0 9
52452: PUSH
52453: LD_VAR 0 1
52457: PPUSH
52458: LD_INT 1
52460: PPUSH
52461: CALL_OW 287
52465: PUSH
52466: LD_INT 10
52468: MUL
52469: ST_TO_ADDR
// r := rate / 10 ;
52470: LD_ADDR_VAR 0 7
52474: PUSH
52475: LD_VAR 0 2
52479: PUSH
52480: LD_INT 10
52482: DIVREAL
52483: ST_TO_ADDR
// time := 1 1$00 ;
52484: LD_ADDR_VAR 0 8
52488: PUSH
52489: LD_INT 2100
52491: ST_TO_ADDR
// if amount < min then
52492: LD_VAR 0 9
52496: PUSH
52497: LD_VAR 0 3
52501: LESS
52502: IFFALSE 52520
// r := r * 2 else
52504: LD_ADDR_VAR 0 7
52508: PUSH
52509: LD_VAR 0 7
52513: PUSH
52514: LD_INT 2
52516: MUL
52517: ST_TO_ADDR
52518: GO 52546
// if amount > max then
52520: LD_VAR 0 9
52524: PUSH
52525: LD_VAR 0 4
52529: GREATER
52530: IFFALSE 52546
// r := r / 2 ;
52532: LD_ADDR_VAR 0 7
52536: PUSH
52537: LD_VAR 0 7
52541: PUSH
52542: LD_INT 2
52544: DIVREAL
52545: ST_TO_ADDR
// time := time / r ;
52546: LD_ADDR_VAR 0 8
52550: PUSH
52551: LD_VAR 0 8
52555: PUSH
52556: LD_VAR 0 7
52560: DIVREAL
52561: ST_TO_ADDR
// if time < 0 then
52562: LD_VAR 0 8
52566: PUSH
52567: LD_INT 0
52569: LESS
52570: IFFALSE 52587
// time := time * - 1 ;
52572: LD_ADDR_VAR 0 8
52576: PUSH
52577: LD_VAR 0 8
52581: PUSH
52582: LD_INT 1
52584: NEG
52585: MUL
52586: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
52587: LD_VAR 0 8
52591: PUSH
52592: LD_INT 35
52594: PPUSH
52595: LD_INT 875
52597: PPUSH
52598: CALL_OW 12
52602: PLUS
52603: PPUSH
52604: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
52608: LD_INT 1
52610: PPUSH
52611: LD_INT 5
52613: PPUSH
52614: CALL_OW 12
52618: PPUSH
52619: LD_VAR 0 1
52623: PPUSH
52624: LD_INT 1
52626: PPUSH
52627: CALL_OW 55
// end ;
52631: GO 52444
// end ;
52633: LD_VAR 0 5
52637: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
52638: LD_INT 0
52640: PPUSH
52641: PPUSH
52642: PPUSH
52643: PPUSH
52644: PPUSH
52645: PPUSH
52646: PPUSH
52647: PPUSH
// if not turrets or not factories then
52648: LD_VAR 0 1
52652: NOT
52653: PUSH
52654: LD_VAR 0 2
52658: NOT
52659: OR
52660: IFFALSE 52664
// exit ;
52662: GO 52971
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
52664: LD_ADDR_VAR 0 10
52668: PUSH
52669: LD_INT 5
52671: PUSH
52672: LD_INT 6
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: PUSH
52679: LD_INT 2
52681: PUSH
52682: LD_INT 4
52684: PUSH
52685: EMPTY
52686: LIST
52687: LIST
52688: PUSH
52689: LD_INT 3
52691: PUSH
52692: LD_INT 5
52694: PUSH
52695: EMPTY
52696: LIST
52697: LIST
52698: PUSH
52699: EMPTY
52700: LIST
52701: LIST
52702: LIST
52703: PUSH
52704: LD_INT 24
52706: PUSH
52707: LD_INT 25
52709: PUSH
52710: EMPTY
52711: LIST
52712: LIST
52713: PUSH
52714: LD_INT 23
52716: PUSH
52717: LD_INT 27
52719: PUSH
52720: EMPTY
52721: LIST
52722: LIST
52723: PUSH
52724: EMPTY
52725: LIST
52726: LIST
52727: PUSH
52728: LD_INT 42
52730: PUSH
52731: LD_INT 43
52733: PUSH
52734: EMPTY
52735: LIST
52736: LIST
52737: PUSH
52738: LD_INT 44
52740: PUSH
52741: LD_INT 46
52743: PUSH
52744: EMPTY
52745: LIST
52746: LIST
52747: PUSH
52748: LD_INT 45
52750: PUSH
52751: LD_INT 47
52753: PUSH
52754: EMPTY
52755: LIST
52756: LIST
52757: PUSH
52758: EMPTY
52759: LIST
52760: LIST
52761: LIST
52762: PUSH
52763: EMPTY
52764: LIST
52765: LIST
52766: LIST
52767: ST_TO_ADDR
// result := [ ] ;
52768: LD_ADDR_VAR 0 3
52772: PUSH
52773: EMPTY
52774: ST_TO_ADDR
// for i in turrets do
52775: LD_ADDR_VAR 0 4
52779: PUSH
52780: LD_VAR 0 1
52784: PUSH
52785: FOR_IN
52786: IFFALSE 52969
// begin nat := GetNation ( i ) ;
52788: LD_ADDR_VAR 0 7
52792: PUSH
52793: LD_VAR 0 4
52797: PPUSH
52798: CALL_OW 248
52802: ST_TO_ADDR
// weapon := 0 ;
52803: LD_ADDR_VAR 0 8
52807: PUSH
52808: LD_INT 0
52810: ST_TO_ADDR
// if not nat then
52811: LD_VAR 0 7
52815: NOT
52816: IFFALSE 52820
// continue ;
52818: GO 52785
// for j in list [ nat ] do
52820: LD_ADDR_VAR 0 5
52824: PUSH
52825: LD_VAR 0 10
52829: PUSH
52830: LD_VAR 0 7
52834: ARRAY
52835: PUSH
52836: FOR_IN
52837: IFFALSE 52878
// if GetBWeapon ( i ) = j [ 1 ] then
52839: LD_VAR 0 4
52843: PPUSH
52844: CALL_OW 269
52848: PUSH
52849: LD_VAR 0 5
52853: PUSH
52854: LD_INT 1
52856: ARRAY
52857: EQUAL
52858: IFFALSE 52876
// begin weapon := j [ 2 ] ;
52860: LD_ADDR_VAR 0 8
52864: PUSH
52865: LD_VAR 0 5
52869: PUSH
52870: LD_INT 2
52872: ARRAY
52873: ST_TO_ADDR
// break ;
52874: GO 52878
// end ;
52876: GO 52836
52878: POP
52879: POP
// if not weapon then
52880: LD_VAR 0 8
52884: NOT
52885: IFFALSE 52889
// continue ;
52887: GO 52785
// for k in factories do
52889: LD_ADDR_VAR 0 6
52893: PUSH
52894: LD_VAR 0 2
52898: PUSH
52899: FOR_IN
52900: IFFALSE 52965
// begin weapons := AvailableWeaponList ( k ) ;
52902: LD_ADDR_VAR 0 9
52906: PUSH
52907: LD_VAR 0 6
52911: PPUSH
52912: CALL_OW 478
52916: ST_TO_ADDR
// if not weapons then
52917: LD_VAR 0 9
52921: NOT
52922: IFFALSE 52926
// continue ;
52924: GO 52899
// if weapon in weapons then
52926: LD_VAR 0 8
52930: PUSH
52931: LD_VAR 0 9
52935: IN
52936: IFFALSE 52963
// begin result := [ i , weapon ] ;
52938: LD_ADDR_VAR 0 3
52942: PUSH
52943: LD_VAR 0 4
52947: PUSH
52948: LD_VAR 0 8
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: ST_TO_ADDR
// exit ;
52957: POP
52958: POP
52959: POP
52960: POP
52961: GO 52971
// end ; end ;
52963: GO 52899
52965: POP
52966: POP
// end ;
52967: GO 52785
52969: POP
52970: POP
// end ;
52971: LD_VAR 0 3
52975: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
52976: LD_INT 0
52978: PPUSH
// if not side or side > 8 then
52979: LD_VAR 0 3
52983: NOT
52984: PUSH
52985: LD_VAR 0 3
52989: PUSH
52990: LD_INT 8
52992: GREATER
52993: OR
52994: IFFALSE 52998
// exit ;
52996: GO 53057
// if not range then
52998: LD_VAR 0 4
53002: NOT
53003: IFFALSE 53014
// range := - 12 ;
53005: LD_ADDR_VAR 0 4
53009: PUSH
53010: LD_INT 12
53012: NEG
53013: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
53014: LD_VAR 0 1
53018: PPUSH
53019: LD_VAR 0 2
53023: PPUSH
53024: LD_VAR 0 3
53028: PPUSH
53029: LD_VAR 0 4
53033: PPUSH
53034: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
53038: LD_VAR 0 1
53042: PPUSH
53043: LD_VAR 0 2
53047: PPUSH
53048: LD_VAR 0 3
53052: PPUSH
53053: CALL_OW 331
// end ;
53057: LD_VAR 0 5
53061: RET
// export function Video ( mode ) ; begin
53062: LD_INT 0
53064: PPUSH
// ingame_video = mode ;
53065: LD_ADDR_OWVAR 52
53069: PUSH
53070: LD_VAR 0 1
53074: ST_TO_ADDR
// interface_hidden = mode ;
53075: LD_ADDR_OWVAR 54
53079: PUSH
53080: LD_VAR 0 1
53084: ST_TO_ADDR
// end ;
53085: LD_VAR 0 2
53089: RET
// export function Join ( array , element ) ; begin
53090: LD_INT 0
53092: PPUSH
// result := Replace ( array , array + 1 , element ) ;
53093: LD_ADDR_VAR 0 3
53097: PUSH
53098: LD_VAR 0 1
53102: PPUSH
53103: LD_VAR 0 1
53107: PUSH
53108: LD_INT 1
53110: PLUS
53111: PPUSH
53112: LD_VAR 0 2
53116: PPUSH
53117: CALL_OW 1
53121: ST_TO_ADDR
// end ;
53122: LD_VAR 0 3
53126: RET
// export function JoinUnion ( array , element ) ; begin
53127: LD_INT 0
53129: PPUSH
// result := array union element ;
53130: LD_ADDR_VAR 0 3
53134: PUSH
53135: LD_VAR 0 1
53139: PUSH
53140: LD_VAR 0 2
53144: UNION
53145: ST_TO_ADDR
// end ;
53146: LD_VAR 0 3
53150: RET
// export function GetBehemoths ( side ) ; begin
53151: LD_INT 0
53153: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
53154: LD_ADDR_VAR 0 2
53158: PUSH
53159: LD_INT 22
53161: PUSH
53162: LD_VAR 0 1
53166: PUSH
53167: EMPTY
53168: LIST
53169: LIST
53170: PUSH
53171: LD_INT 31
53173: PUSH
53174: LD_INT 25
53176: PUSH
53177: EMPTY
53178: LIST
53179: LIST
53180: PUSH
53181: EMPTY
53182: LIST
53183: LIST
53184: PPUSH
53185: CALL_OW 69
53189: ST_TO_ADDR
// end ;
53190: LD_VAR 0 2
53194: RET
// export function Shuffle ( array ) ; var i , index ; begin
53195: LD_INT 0
53197: PPUSH
53198: PPUSH
53199: PPUSH
// result := [ ] ;
53200: LD_ADDR_VAR 0 2
53204: PUSH
53205: EMPTY
53206: ST_TO_ADDR
// if not array then
53207: LD_VAR 0 1
53211: NOT
53212: IFFALSE 53216
// exit ;
53214: GO 53315
// Randomize ;
53216: CALL_OW 10
// for i = array downto 1 do
53220: LD_ADDR_VAR 0 3
53224: PUSH
53225: DOUBLE
53226: LD_VAR 0 1
53230: INC
53231: ST_TO_ADDR
53232: LD_INT 1
53234: PUSH
53235: FOR_DOWNTO
53236: IFFALSE 53313
// begin index := rand ( 1 , array ) ;
53238: LD_ADDR_VAR 0 4
53242: PUSH
53243: LD_INT 1
53245: PPUSH
53246: LD_VAR 0 1
53250: PPUSH
53251: CALL_OW 12
53255: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
53256: LD_ADDR_VAR 0 2
53260: PUSH
53261: LD_VAR 0 2
53265: PPUSH
53266: LD_VAR 0 2
53270: PUSH
53271: LD_INT 1
53273: PLUS
53274: PPUSH
53275: LD_VAR 0 1
53279: PUSH
53280: LD_VAR 0 4
53284: ARRAY
53285: PPUSH
53286: CALL_OW 2
53290: ST_TO_ADDR
// array := Delete ( array , index ) ;
53291: LD_ADDR_VAR 0 1
53295: PUSH
53296: LD_VAR 0 1
53300: PPUSH
53301: LD_VAR 0 4
53305: PPUSH
53306: CALL_OW 3
53310: ST_TO_ADDR
// end ;
53311: GO 53235
53313: POP
53314: POP
// end ;
53315: LD_VAR 0 2
53319: RET
// export function GetBaseMaterials ( base ) ; begin
53320: LD_INT 0
53322: PPUSH
// result := [ 0 , 0 , 0 ] ;
53323: LD_ADDR_VAR 0 2
53327: PUSH
53328: LD_INT 0
53330: PUSH
53331: LD_INT 0
53333: PUSH
53334: LD_INT 0
53336: PUSH
53337: EMPTY
53338: LIST
53339: LIST
53340: LIST
53341: ST_TO_ADDR
// if not base then
53342: LD_VAR 0 1
53346: NOT
53347: IFFALSE 53351
// exit ;
53349: GO 53400
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
53351: LD_ADDR_VAR 0 2
53355: PUSH
53356: LD_VAR 0 1
53360: PPUSH
53361: LD_INT 1
53363: PPUSH
53364: CALL_OW 275
53368: PUSH
53369: LD_VAR 0 1
53373: PPUSH
53374: LD_INT 2
53376: PPUSH
53377: CALL_OW 275
53381: PUSH
53382: LD_VAR 0 1
53386: PPUSH
53387: LD_INT 3
53389: PPUSH
53390: CALL_OW 275
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: LIST
53399: ST_TO_ADDR
// end ;
53400: LD_VAR 0 2
53404: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
53405: LD_INT 0
53407: PPUSH
53408: PPUSH
// result := array ;
53409: LD_ADDR_VAR 0 3
53413: PUSH
53414: LD_VAR 0 1
53418: ST_TO_ADDR
// if size >= result then
53419: LD_VAR 0 2
53423: PUSH
53424: LD_VAR 0 3
53428: GREATEREQUAL
53429: IFFALSE 53433
// exit ;
53431: GO 53483
// if size then
53433: LD_VAR 0 2
53437: IFFALSE 53483
// for i := array downto size do
53439: LD_ADDR_VAR 0 4
53443: PUSH
53444: DOUBLE
53445: LD_VAR 0 1
53449: INC
53450: ST_TO_ADDR
53451: LD_VAR 0 2
53455: PUSH
53456: FOR_DOWNTO
53457: IFFALSE 53481
// result := Delete ( result , result ) ;
53459: LD_ADDR_VAR 0 3
53463: PUSH
53464: LD_VAR 0 3
53468: PPUSH
53469: LD_VAR 0 3
53473: PPUSH
53474: CALL_OW 3
53478: ST_TO_ADDR
53479: GO 53456
53481: POP
53482: POP
// end ;
53483: LD_VAR 0 3
53487: RET
// export function ComExit ( unit ) ; var tmp ; begin
53488: LD_INT 0
53490: PPUSH
53491: PPUSH
// if not IsInUnit ( unit ) then
53492: LD_VAR 0 1
53496: PPUSH
53497: CALL_OW 310
53501: NOT
53502: IFFALSE 53506
// exit ;
53504: GO 53566
// tmp := IsInUnit ( unit ) ;
53506: LD_ADDR_VAR 0 3
53510: PUSH
53511: LD_VAR 0 1
53515: PPUSH
53516: CALL_OW 310
53520: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
53521: LD_VAR 0 3
53525: PPUSH
53526: CALL_OW 247
53530: PUSH
53531: LD_INT 2
53533: EQUAL
53534: IFFALSE 53547
// ComExitVehicle ( unit ) else
53536: LD_VAR 0 1
53540: PPUSH
53541: CALL_OW 121
53545: GO 53556
// ComExitBuilding ( unit ) ;
53547: LD_VAR 0 1
53551: PPUSH
53552: CALL_OW 122
// result := tmp ;
53556: LD_ADDR_VAR 0 2
53560: PUSH
53561: LD_VAR 0 3
53565: ST_TO_ADDR
// end ;
53566: LD_VAR 0 2
53570: RET
// export function ComExitAll ( units ) ; var i ; begin
53571: LD_INT 0
53573: PPUSH
53574: PPUSH
// if not units then
53575: LD_VAR 0 1
53579: NOT
53580: IFFALSE 53584
// exit ;
53582: GO 53610
// for i in units do
53584: LD_ADDR_VAR 0 3
53588: PUSH
53589: LD_VAR 0 1
53593: PUSH
53594: FOR_IN
53595: IFFALSE 53608
// ComExit ( i ) ;
53597: LD_VAR 0 3
53601: PPUSH
53602: CALL 53488 0 1
53606: GO 53594
53608: POP
53609: POP
// end ;
53610: LD_VAR 0 2
53614: RET
// export function ResetHc ; begin
53615: LD_INT 0
53617: PPUSH
// InitHc ;
53618: CALL_OW 19
// hc_importance := 0 ;
53622: LD_ADDR_OWVAR 32
53626: PUSH
53627: LD_INT 0
53629: ST_TO_ADDR
// end ;
53630: LD_VAR 0 1
53634: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
53635: LD_INT 0
53637: PPUSH
53638: PPUSH
53639: PPUSH
// _x := ( x1 + x2 ) div 2 ;
53640: LD_ADDR_VAR 0 6
53644: PUSH
53645: LD_VAR 0 1
53649: PUSH
53650: LD_VAR 0 3
53654: PLUS
53655: PUSH
53656: LD_INT 2
53658: DIV
53659: ST_TO_ADDR
// if _x < 0 then
53660: LD_VAR 0 6
53664: PUSH
53665: LD_INT 0
53667: LESS
53668: IFFALSE 53685
// _x := _x * - 1 ;
53670: LD_ADDR_VAR 0 6
53674: PUSH
53675: LD_VAR 0 6
53679: PUSH
53680: LD_INT 1
53682: NEG
53683: MUL
53684: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
53685: LD_ADDR_VAR 0 7
53689: PUSH
53690: LD_VAR 0 2
53694: PUSH
53695: LD_VAR 0 4
53699: PLUS
53700: PUSH
53701: LD_INT 2
53703: DIV
53704: ST_TO_ADDR
// if _y < 0 then
53705: LD_VAR 0 7
53709: PUSH
53710: LD_INT 0
53712: LESS
53713: IFFALSE 53730
// _y := _y * - 1 ;
53715: LD_ADDR_VAR 0 7
53719: PUSH
53720: LD_VAR 0 7
53724: PUSH
53725: LD_INT 1
53727: NEG
53728: MUL
53729: ST_TO_ADDR
// result := [ _x , _y ] ;
53730: LD_ADDR_VAR 0 5
53734: PUSH
53735: LD_VAR 0 6
53739: PUSH
53740: LD_VAR 0 7
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: ST_TO_ADDR
// end ;
53749: LD_VAR 0 5
53753: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
53754: LD_INT 0
53756: PPUSH
53757: PPUSH
53758: PPUSH
53759: PPUSH
// task := GetTaskList ( unit ) ;
53760: LD_ADDR_VAR 0 7
53764: PUSH
53765: LD_VAR 0 1
53769: PPUSH
53770: CALL_OW 437
53774: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
53775: LD_VAR 0 7
53779: NOT
53780: PUSH
53781: LD_VAR 0 1
53785: PPUSH
53786: LD_VAR 0 2
53790: PPUSH
53791: CALL_OW 308
53795: NOT
53796: AND
53797: IFFALSE 53801
// exit ;
53799: GO 53919
// if IsInArea ( unit , area ) then
53801: LD_VAR 0 1
53805: PPUSH
53806: LD_VAR 0 2
53810: PPUSH
53811: CALL_OW 308
53815: IFFALSE 53833
// begin ComMoveToArea ( unit , goAway ) ;
53817: LD_VAR 0 1
53821: PPUSH
53822: LD_VAR 0 3
53826: PPUSH
53827: CALL_OW 113
// exit ;
53831: GO 53919
// end ; if task [ 1 ] [ 1 ] <> M then
53833: LD_VAR 0 7
53837: PUSH
53838: LD_INT 1
53840: ARRAY
53841: PUSH
53842: LD_INT 1
53844: ARRAY
53845: PUSH
53846: LD_STRING M
53848: NONEQUAL
53849: IFFALSE 53853
// exit ;
53851: GO 53919
// x := task [ 1 ] [ 2 ] ;
53853: LD_ADDR_VAR 0 5
53857: PUSH
53858: LD_VAR 0 7
53862: PUSH
53863: LD_INT 1
53865: ARRAY
53866: PUSH
53867: LD_INT 2
53869: ARRAY
53870: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
53871: LD_ADDR_VAR 0 6
53875: PUSH
53876: LD_VAR 0 7
53880: PUSH
53881: LD_INT 1
53883: ARRAY
53884: PUSH
53885: LD_INT 3
53887: ARRAY
53888: ST_TO_ADDR
// if InArea ( x , y , area ) then
53889: LD_VAR 0 5
53893: PPUSH
53894: LD_VAR 0 6
53898: PPUSH
53899: LD_VAR 0 2
53903: PPUSH
53904: CALL_OW 309
53908: IFFALSE 53919
// ComStop ( unit ) ;
53910: LD_VAR 0 1
53914: PPUSH
53915: CALL_OW 141
// end ;
53919: LD_VAR 0 4
53923: RET
// export function Abs ( value ) ; begin
53924: LD_INT 0
53926: PPUSH
// result := value ;
53927: LD_ADDR_VAR 0 2
53931: PUSH
53932: LD_VAR 0 1
53936: ST_TO_ADDR
// if value < 0 then
53937: LD_VAR 0 1
53941: PUSH
53942: LD_INT 0
53944: LESS
53945: IFFALSE 53962
// result := value * - 1 ;
53947: LD_ADDR_VAR 0 2
53951: PUSH
53952: LD_VAR 0 1
53956: PUSH
53957: LD_INT 1
53959: NEG
53960: MUL
53961: ST_TO_ADDR
// end ;
53962: LD_VAR 0 2
53966: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
53967: LD_INT 0
53969: PPUSH
53970: PPUSH
53971: PPUSH
53972: PPUSH
53973: PPUSH
53974: PPUSH
53975: PPUSH
53976: PPUSH
// if not unit or not building then
53977: LD_VAR 0 1
53981: NOT
53982: PUSH
53983: LD_VAR 0 2
53987: NOT
53988: OR
53989: IFFALSE 53993
// exit ;
53991: GO 54219
// x := GetX ( building ) ;
53993: LD_ADDR_VAR 0 4
53997: PUSH
53998: LD_VAR 0 2
54002: PPUSH
54003: CALL_OW 250
54007: ST_TO_ADDR
// y := GetY ( building ) ;
54008: LD_ADDR_VAR 0 6
54012: PUSH
54013: LD_VAR 0 2
54017: PPUSH
54018: CALL_OW 251
54022: ST_TO_ADDR
// d := GetDir ( building ) ;
54023: LD_ADDR_VAR 0 8
54027: PUSH
54028: LD_VAR 0 2
54032: PPUSH
54033: CALL_OW 254
54037: ST_TO_ADDR
// r := 4 ;
54038: LD_ADDR_VAR 0 9
54042: PUSH
54043: LD_INT 4
54045: ST_TO_ADDR
// for i := 1 to 5 do
54046: LD_ADDR_VAR 0 10
54050: PUSH
54051: DOUBLE
54052: LD_INT 1
54054: DEC
54055: ST_TO_ADDR
54056: LD_INT 5
54058: PUSH
54059: FOR_TO
54060: IFFALSE 54217
// begin _x := ShiftX ( x , d , r + i ) ;
54062: LD_ADDR_VAR 0 5
54066: PUSH
54067: LD_VAR 0 4
54071: PPUSH
54072: LD_VAR 0 8
54076: PPUSH
54077: LD_VAR 0 9
54081: PUSH
54082: LD_VAR 0 10
54086: PLUS
54087: PPUSH
54088: CALL_OW 272
54092: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
54093: LD_ADDR_VAR 0 7
54097: PUSH
54098: LD_VAR 0 6
54102: PPUSH
54103: LD_VAR 0 8
54107: PPUSH
54108: LD_VAR 0 9
54112: PUSH
54113: LD_VAR 0 10
54117: PLUS
54118: PPUSH
54119: CALL_OW 273
54123: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
54124: LD_VAR 0 5
54128: PPUSH
54129: LD_VAR 0 7
54133: PPUSH
54134: CALL_OW 488
54138: PUSH
54139: LD_VAR 0 5
54143: PPUSH
54144: LD_VAR 0 7
54148: PPUSH
54149: CALL_OW 428
54153: PPUSH
54154: CALL_OW 247
54158: PUSH
54159: LD_INT 3
54161: PUSH
54162: LD_INT 2
54164: PUSH
54165: EMPTY
54166: LIST
54167: LIST
54168: IN
54169: NOT
54170: AND
54171: IFFALSE 54215
// begin ComMoveXY ( unit , _x , _y ) ;
54173: LD_VAR 0 1
54177: PPUSH
54178: LD_VAR 0 5
54182: PPUSH
54183: LD_VAR 0 7
54187: PPUSH
54188: CALL_OW 111
// result := [ _x , _y ] ;
54192: LD_ADDR_VAR 0 3
54196: PUSH
54197: LD_VAR 0 5
54201: PUSH
54202: LD_VAR 0 7
54206: PUSH
54207: EMPTY
54208: LIST
54209: LIST
54210: ST_TO_ADDR
// exit ;
54211: POP
54212: POP
54213: GO 54219
// end ; end ;
54215: GO 54059
54217: POP
54218: POP
// end ;
54219: LD_VAR 0 3
54223: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
54224: LD_INT 0
54226: PPUSH
54227: PPUSH
54228: PPUSH
// result := 0 ;
54229: LD_ADDR_VAR 0 3
54233: PUSH
54234: LD_INT 0
54236: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
54237: LD_VAR 0 1
54241: PUSH
54242: LD_INT 0
54244: LESS
54245: PUSH
54246: LD_VAR 0 1
54250: PUSH
54251: LD_INT 8
54253: GREATER
54254: OR
54255: PUSH
54256: LD_VAR 0 2
54260: PUSH
54261: LD_INT 0
54263: LESS
54264: OR
54265: PUSH
54266: LD_VAR 0 2
54270: PUSH
54271: LD_INT 8
54273: GREATER
54274: OR
54275: IFFALSE 54279
// exit ;
54277: GO 54354
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
54279: LD_ADDR_VAR 0 4
54283: PUSH
54284: LD_INT 22
54286: PUSH
54287: LD_VAR 0 2
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: PPUSH
54296: CALL_OW 69
54300: PUSH
54301: FOR_IN
54302: IFFALSE 54352
// begin un := UnitShoot ( i ) ;
54304: LD_ADDR_VAR 0 5
54308: PUSH
54309: LD_VAR 0 4
54313: PPUSH
54314: CALL_OW 504
54318: ST_TO_ADDR
// if GetSide ( un ) = side1 then
54319: LD_VAR 0 5
54323: PPUSH
54324: CALL_OW 255
54328: PUSH
54329: LD_VAR 0 1
54333: EQUAL
54334: IFFALSE 54350
// begin result := un ;
54336: LD_ADDR_VAR 0 3
54340: PUSH
54341: LD_VAR 0 5
54345: ST_TO_ADDR
// exit ;
54346: POP
54347: POP
54348: GO 54354
// end ; end ;
54350: GO 54301
54352: POP
54353: POP
// end ;
54354: LD_VAR 0 3
54358: RET
// export function GetCargoBay ( units ) ; begin
54359: LD_INT 0
54361: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
54362: LD_ADDR_VAR 0 2
54366: PUSH
54367: LD_VAR 0 1
54371: PPUSH
54372: LD_INT 2
54374: PUSH
54375: LD_INT 34
54377: PUSH
54378: LD_INT 12
54380: PUSH
54381: EMPTY
54382: LIST
54383: LIST
54384: PUSH
54385: LD_INT 34
54387: PUSH
54388: LD_INT 51
54390: PUSH
54391: EMPTY
54392: LIST
54393: LIST
54394: PUSH
54395: LD_INT 34
54397: PUSH
54398: LD_INT 32
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: PUSH
54405: LD_INT 34
54407: PUSH
54408: LD_INT 89
54410: PUSH
54411: EMPTY
54412: LIST
54413: LIST
54414: PUSH
54415: EMPTY
54416: LIST
54417: LIST
54418: LIST
54419: LIST
54420: LIST
54421: PPUSH
54422: CALL_OW 72
54426: ST_TO_ADDR
// end ;
54427: LD_VAR 0 2
54431: RET
// export function Negate ( value ) ; begin
54432: LD_INT 0
54434: PPUSH
// result := not value ;
54435: LD_ADDR_VAR 0 2
54439: PUSH
54440: LD_VAR 0 1
54444: NOT
54445: ST_TO_ADDR
// end ;
54446: LD_VAR 0 2
54450: RET
// export function Inc ( value ) ; begin
54451: LD_INT 0
54453: PPUSH
// result := value + 1 ;
54454: LD_ADDR_VAR 0 2
54458: PUSH
54459: LD_VAR 0 1
54463: PUSH
54464: LD_INT 1
54466: PLUS
54467: ST_TO_ADDR
// end ;
54468: LD_VAR 0 2
54472: RET
// export function Dec ( value ) ; begin
54473: LD_INT 0
54475: PPUSH
// result := value - 1 ;
54476: LD_ADDR_VAR 0 2
54480: PUSH
54481: LD_VAR 0 1
54485: PUSH
54486: LD_INT 1
54488: MINUS
54489: ST_TO_ADDR
// end ;
54490: LD_VAR 0 2
54494: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
54495: LD_INT 0
54497: PPUSH
54498: PPUSH
54499: PPUSH
54500: PPUSH
54501: PPUSH
54502: PPUSH
54503: PPUSH
54504: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
54505: LD_VAR 0 1
54509: PPUSH
54510: LD_VAR 0 2
54514: PPUSH
54515: CALL_OW 488
54519: NOT
54520: PUSH
54521: LD_VAR 0 3
54525: PPUSH
54526: LD_VAR 0 4
54530: PPUSH
54531: CALL_OW 488
54535: NOT
54536: OR
54537: IFFALSE 54550
// begin result := - 1 ;
54539: LD_ADDR_VAR 0 5
54543: PUSH
54544: LD_INT 1
54546: NEG
54547: ST_TO_ADDR
// exit ;
54548: GO 54785
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
54550: LD_ADDR_VAR 0 12
54554: PUSH
54555: LD_VAR 0 1
54559: PPUSH
54560: LD_VAR 0 2
54564: PPUSH
54565: LD_VAR 0 3
54569: PPUSH
54570: LD_VAR 0 4
54574: PPUSH
54575: CALL 53635 0 4
54579: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
54580: LD_ADDR_VAR 0 11
54584: PUSH
54585: LD_VAR 0 1
54589: PPUSH
54590: LD_VAR 0 2
54594: PPUSH
54595: LD_VAR 0 12
54599: PUSH
54600: LD_INT 1
54602: ARRAY
54603: PPUSH
54604: LD_VAR 0 12
54608: PUSH
54609: LD_INT 2
54611: ARRAY
54612: PPUSH
54613: CALL_OW 298
54617: ST_TO_ADDR
// distance := 9999 ;
54618: LD_ADDR_VAR 0 10
54622: PUSH
54623: LD_INT 9999
54625: ST_TO_ADDR
// for i := 0 to 5 do
54626: LD_ADDR_VAR 0 6
54630: PUSH
54631: DOUBLE
54632: LD_INT 0
54634: DEC
54635: ST_TO_ADDR
54636: LD_INT 5
54638: PUSH
54639: FOR_TO
54640: IFFALSE 54783
// begin _x := ShiftX ( x1 , i , centerDist ) ;
54642: LD_ADDR_VAR 0 7
54646: PUSH
54647: LD_VAR 0 1
54651: PPUSH
54652: LD_VAR 0 6
54656: PPUSH
54657: LD_VAR 0 11
54661: PPUSH
54662: CALL_OW 272
54666: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
54667: LD_ADDR_VAR 0 8
54671: PUSH
54672: LD_VAR 0 2
54676: PPUSH
54677: LD_VAR 0 6
54681: PPUSH
54682: LD_VAR 0 11
54686: PPUSH
54687: CALL_OW 273
54691: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
54692: LD_VAR 0 7
54696: PPUSH
54697: LD_VAR 0 8
54701: PPUSH
54702: CALL_OW 488
54706: NOT
54707: IFFALSE 54711
// continue ;
54709: GO 54639
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
54711: LD_ADDR_VAR 0 9
54715: PUSH
54716: LD_VAR 0 12
54720: PUSH
54721: LD_INT 1
54723: ARRAY
54724: PPUSH
54725: LD_VAR 0 12
54729: PUSH
54730: LD_INT 2
54732: ARRAY
54733: PPUSH
54734: LD_VAR 0 7
54738: PPUSH
54739: LD_VAR 0 8
54743: PPUSH
54744: CALL_OW 298
54748: ST_TO_ADDR
// if tmp < distance then
54749: LD_VAR 0 9
54753: PUSH
54754: LD_VAR 0 10
54758: LESS
54759: IFFALSE 54781
// begin result := i ;
54761: LD_ADDR_VAR 0 5
54765: PUSH
54766: LD_VAR 0 6
54770: ST_TO_ADDR
// distance := tmp ;
54771: LD_ADDR_VAR 0 10
54775: PUSH
54776: LD_VAR 0 9
54780: ST_TO_ADDR
// end ; end ;
54781: GO 54639
54783: POP
54784: POP
// end ;
54785: LD_VAR 0 5
54789: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
54790: LD_INT 0
54792: PPUSH
54793: PPUSH
// if not driver or not IsInUnit ( driver ) then
54794: LD_VAR 0 1
54798: NOT
54799: PUSH
54800: LD_VAR 0 1
54804: PPUSH
54805: CALL_OW 310
54809: NOT
54810: OR
54811: IFFALSE 54815
// exit ;
54813: GO 54905
// vehicle := IsInUnit ( driver ) ;
54815: LD_ADDR_VAR 0 3
54819: PUSH
54820: LD_VAR 0 1
54824: PPUSH
54825: CALL_OW 310
54829: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
54830: LD_VAR 0 1
54834: PPUSH
54835: LD_STRING \
54837: PUSH
54838: LD_INT 0
54840: PUSH
54841: LD_INT 0
54843: PUSH
54844: LD_INT 0
54846: PUSH
54847: LD_INT 0
54849: PUSH
54850: LD_INT 0
54852: PUSH
54853: LD_INT 0
54855: PUSH
54856: EMPTY
54857: LIST
54858: LIST
54859: LIST
54860: LIST
54861: LIST
54862: LIST
54863: LIST
54864: PUSH
54865: LD_STRING E
54867: PUSH
54868: LD_INT 0
54870: PUSH
54871: LD_INT 0
54873: PUSH
54874: LD_VAR 0 3
54878: PUSH
54879: LD_INT 0
54881: PUSH
54882: LD_INT 0
54884: PUSH
54885: LD_INT 0
54887: PUSH
54888: EMPTY
54889: LIST
54890: LIST
54891: LIST
54892: LIST
54893: LIST
54894: LIST
54895: LIST
54896: PUSH
54897: EMPTY
54898: LIST
54899: LIST
54900: PPUSH
54901: CALL_OW 446
// end ;
54905: LD_VAR 0 2
54909: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
54910: LD_INT 0
54912: PPUSH
54913: PPUSH
// if not driver or not IsInUnit ( driver ) then
54914: LD_VAR 0 1
54918: NOT
54919: PUSH
54920: LD_VAR 0 1
54924: PPUSH
54925: CALL_OW 310
54929: NOT
54930: OR
54931: IFFALSE 54935
// exit ;
54933: GO 55025
// vehicle := IsInUnit ( driver ) ;
54935: LD_ADDR_VAR 0 3
54939: PUSH
54940: LD_VAR 0 1
54944: PPUSH
54945: CALL_OW 310
54949: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
54950: LD_VAR 0 1
54954: PPUSH
54955: LD_STRING \
54957: PUSH
54958: LD_INT 0
54960: PUSH
54961: LD_INT 0
54963: PUSH
54964: LD_INT 0
54966: PUSH
54967: LD_INT 0
54969: PUSH
54970: LD_INT 0
54972: PUSH
54973: LD_INT 0
54975: PUSH
54976: EMPTY
54977: LIST
54978: LIST
54979: LIST
54980: LIST
54981: LIST
54982: LIST
54983: LIST
54984: PUSH
54985: LD_STRING E
54987: PUSH
54988: LD_INT 0
54990: PUSH
54991: LD_INT 0
54993: PUSH
54994: LD_VAR 0 3
54998: PUSH
54999: LD_INT 0
55001: PUSH
55002: LD_INT 0
55004: PUSH
55005: LD_INT 0
55007: PUSH
55008: EMPTY
55009: LIST
55010: LIST
55011: LIST
55012: LIST
55013: LIST
55014: LIST
55015: LIST
55016: PUSH
55017: EMPTY
55018: LIST
55019: LIST
55020: PPUSH
55021: CALL_OW 447
// end ;
55025: LD_VAR 0 2
55029: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
55030: LD_INT 0
55032: PPUSH
55033: PPUSH
55034: PPUSH
// tmp := [ ] ;
55035: LD_ADDR_VAR 0 5
55039: PUSH
55040: EMPTY
55041: ST_TO_ADDR
// for i in units do
55042: LD_ADDR_VAR 0 4
55046: PUSH
55047: LD_VAR 0 1
55051: PUSH
55052: FOR_IN
55053: IFFALSE 55091
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
55055: LD_ADDR_VAR 0 5
55059: PUSH
55060: LD_VAR 0 5
55064: PPUSH
55065: LD_VAR 0 5
55069: PUSH
55070: LD_INT 1
55072: PLUS
55073: PPUSH
55074: LD_VAR 0 4
55078: PPUSH
55079: CALL_OW 256
55083: PPUSH
55084: CALL_OW 2
55088: ST_TO_ADDR
55089: GO 55052
55091: POP
55092: POP
// if not tmp then
55093: LD_VAR 0 5
55097: NOT
55098: IFFALSE 55102
// exit ;
55100: GO 55150
// if asc then
55102: LD_VAR 0 2
55106: IFFALSE 55130
// result := SortListByListAsc ( units , tmp ) else
55108: LD_ADDR_VAR 0 3
55112: PUSH
55113: LD_VAR 0 1
55117: PPUSH
55118: LD_VAR 0 5
55122: PPUSH
55123: CALL_OW 76
55127: ST_TO_ADDR
55128: GO 55150
// result := SortListByListDesc ( units , tmp ) ;
55130: LD_ADDR_VAR 0 3
55134: PUSH
55135: LD_VAR 0 1
55139: PPUSH
55140: LD_VAR 0 5
55144: PPUSH
55145: CALL_OW 77
55149: ST_TO_ADDR
// end ;
55150: LD_VAR 0 3
55154: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
55155: LD_INT 0
55157: PPUSH
55158: PPUSH
// task := GetTaskList ( mech ) ;
55159: LD_ADDR_VAR 0 4
55163: PUSH
55164: LD_VAR 0 1
55168: PPUSH
55169: CALL_OW 437
55173: ST_TO_ADDR
// if not task then
55174: LD_VAR 0 4
55178: NOT
55179: IFFALSE 55183
// exit ;
55181: GO 55225
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
55183: LD_ADDR_VAR 0 3
55187: PUSH
55188: LD_VAR 0 4
55192: PUSH
55193: LD_INT 1
55195: ARRAY
55196: PUSH
55197: LD_INT 1
55199: ARRAY
55200: PUSH
55201: LD_STRING r
55203: EQUAL
55204: PUSH
55205: LD_VAR 0 4
55209: PUSH
55210: LD_INT 1
55212: ARRAY
55213: PUSH
55214: LD_INT 4
55216: ARRAY
55217: PUSH
55218: LD_VAR 0 2
55222: EQUAL
55223: AND
55224: ST_TO_ADDR
// end ;
55225: LD_VAR 0 3
55229: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
55230: LD_INT 0
55232: PPUSH
// SetDir ( unit , d ) ;
55233: LD_VAR 0 1
55237: PPUSH
55238: LD_VAR 0 4
55242: PPUSH
55243: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
55247: LD_VAR 0 1
55251: PPUSH
55252: LD_VAR 0 2
55256: PPUSH
55257: LD_VAR 0 3
55261: PPUSH
55262: LD_VAR 0 5
55266: PPUSH
55267: CALL_OW 48
// end ;
55271: LD_VAR 0 6
55275: RET
// export function ToNaturalNumber ( number ) ; begin
55276: LD_INT 0
55278: PPUSH
// result := number div 1 ;
55279: LD_ADDR_VAR 0 2
55283: PUSH
55284: LD_VAR 0 1
55288: PUSH
55289: LD_INT 1
55291: DIV
55292: ST_TO_ADDR
// if number < 0 then
55293: LD_VAR 0 1
55297: PUSH
55298: LD_INT 0
55300: LESS
55301: IFFALSE 55311
// result := 0 ;
55303: LD_ADDR_VAR 0 2
55307: PUSH
55308: LD_INT 0
55310: ST_TO_ADDR
// end ;
55311: LD_VAR 0 2
55315: RET
// export function SortByClass ( units , class ) ; var un ; begin
55316: LD_INT 0
55318: PPUSH
55319: PPUSH
// if not units or not class then
55320: LD_VAR 0 1
55324: NOT
55325: PUSH
55326: LD_VAR 0 2
55330: NOT
55331: OR
55332: IFFALSE 55336
// exit ;
55334: GO 55431
// result := [ ] ;
55336: LD_ADDR_VAR 0 3
55340: PUSH
55341: EMPTY
55342: ST_TO_ADDR
// for un in units do
55343: LD_ADDR_VAR 0 4
55347: PUSH
55348: LD_VAR 0 1
55352: PUSH
55353: FOR_IN
55354: IFFALSE 55429
// if GetClass ( un ) = class then
55356: LD_VAR 0 4
55360: PPUSH
55361: CALL_OW 257
55365: PUSH
55366: LD_VAR 0 2
55370: EQUAL
55371: IFFALSE 55398
// result := Insert ( result , 1 , un ) else
55373: LD_ADDR_VAR 0 3
55377: PUSH
55378: LD_VAR 0 3
55382: PPUSH
55383: LD_INT 1
55385: PPUSH
55386: LD_VAR 0 4
55390: PPUSH
55391: CALL_OW 2
55395: ST_TO_ADDR
55396: GO 55427
// result := Replace ( result , result + 1 , un ) ;
55398: LD_ADDR_VAR 0 3
55402: PUSH
55403: LD_VAR 0 3
55407: PPUSH
55408: LD_VAR 0 3
55412: PUSH
55413: LD_INT 1
55415: PLUS
55416: PPUSH
55417: LD_VAR 0 4
55421: PPUSH
55422: CALL_OW 1
55426: ST_TO_ADDR
55427: GO 55353
55429: POP
55430: POP
// end ;
55431: LD_VAR 0 3
55435: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
55436: LD_INT 0
55438: PPUSH
55439: PPUSH
55440: PPUSH
55441: PPUSH
55442: PPUSH
55443: PPUSH
55444: PPUSH
// result := [ ] ;
55445: LD_ADDR_VAR 0 4
55449: PUSH
55450: EMPTY
55451: ST_TO_ADDR
// if x - r < 0 then
55452: LD_VAR 0 1
55456: PUSH
55457: LD_VAR 0 3
55461: MINUS
55462: PUSH
55463: LD_INT 0
55465: LESS
55466: IFFALSE 55478
// min_x := 0 else
55468: LD_ADDR_VAR 0 8
55472: PUSH
55473: LD_INT 0
55475: ST_TO_ADDR
55476: GO 55494
// min_x := x - r ;
55478: LD_ADDR_VAR 0 8
55482: PUSH
55483: LD_VAR 0 1
55487: PUSH
55488: LD_VAR 0 3
55492: MINUS
55493: ST_TO_ADDR
// if y - r < 0 then
55494: LD_VAR 0 2
55498: PUSH
55499: LD_VAR 0 3
55503: MINUS
55504: PUSH
55505: LD_INT 0
55507: LESS
55508: IFFALSE 55520
// min_y := 0 else
55510: LD_ADDR_VAR 0 7
55514: PUSH
55515: LD_INT 0
55517: ST_TO_ADDR
55518: GO 55536
// min_y := y - r ;
55520: LD_ADDR_VAR 0 7
55524: PUSH
55525: LD_VAR 0 2
55529: PUSH
55530: LD_VAR 0 3
55534: MINUS
55535: ST_TO_ADDR
// max_x := x + r ;
55536: LD_ADDR_VAR 0 9
55540: PUSH
55541: LD_VAR 0 1
55545: PUSH
55546: LD_VAR 0 3
55550: PLUS
55551: ST_TO_ADDR
// max_y := y + r ;
55552: LD_ADDR_VAR 0 10
55556: PUSH
55557: LD_VAR 0 2
55561: PUSH
55562: LD_VAR 0 3
55566: PLUS
55567: ST_TO_ADDR
// for _x = min_x to max_x do
55568: LD_ADDR_VAR 0 5
55572: PUSH
55573: DOUBLE
55574: LD_VAR 0 8
55578: DEC
55579: ST_TO_ADDR
55580: LD_VAR 0 9
55584: PUSH
55585: FOR_TO
55586: IFFALSE 55687
// for _y = min_y to max_y do
55588: LD_ADDR_VAR 0 6
55592: PUSH
55593: DOUBLE
55594: LD_VAR 0 7
55598: DEC
55599: ST_TO_ADDR
55600: LD_VAR 0 10
55604: PUSH
55605: FOR_TO
55606: IFFALSE 55683
// begin if not ValidHex ( _x , _y ) then
55608: LD_VAR 0 5
55612: PPUSH
55613: LD_VAR 0 6
55617: PPUSH
55618: CALL_OW 488
55622: NOT
55623: IFFALSE 55627
// continue ;
55625: GO 55605
// if GetResourceTypeXY ( _x , _y ) then
55627: LD_VAR 0 5
55631: PPUSH
55632: LD_VAR 0 6
55636: PPUSH
55637: CALL_OW 283
55641: IFFALSE 55681
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
55643: LD_ADDR_VAR 0 4
55647: PUSH
55648: LD_VAR 0 4
55652: PPUSH
55653: LD_VAR 0 4
55657: PUSH
55658: LD_INT 1
55660: PLUS
55661: PPUSH
55662: LD_VAR 0 5
55666: PUSH
55667: LD_VAR 0 6
55671: PUSH
55672: EMPTY
55673: LIST
55674: LIST
55675: PPUSH
55676: CALL_OW 1
55680: ST_TO_ADDR
// end ;
55681: GO 55605
55683: POP
55684: POP
55685: GO 55585
55687: POP
55688: POP
// end ;
55689: LD_VAR 0 4
55693: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
55694: LD_INT 0
55696: PPUSH
55697: PPUSH
55698: PPUSH
55699: PPUSH
55700: PPUSH
55701: PPUSH
55702: PPUSH
55703: PPUSH
// if not units then
55704: LD_VAR 0 1
55708: NOT
55709: IFFALSE 55713
// exit ;
55711: GO 56241
// result := UnitFilter ( units , [ f_ok ] ) ;
55713: LD_ADDR_VAR 0 3
55717: PUSH
55718: LD_VAR 0 1
55722: PPUSH
55723: LD_INT 50
55725: PUSH
55726: EMPTY
55727: LIST
55728: PPUSH
55729: CALL_OW 72
55733: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
55734: LD_ADDR_VAR 0 8
55738: PUSH
55739: LD_VAR 0 1
55743: PUSH
55744: LD_INT 1
55746: ARRAY
55747: PPUSH
55748: CALL_OW 255
55752: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
55753: LD_ADDR_VAR 0 10
55757: PUSH
55758: LD_INT 29
55760: PUSH
55761: LD_INT 91
55763: PUSH
55764: LD_INT 49
55766: PUSH
55767: EMPTY
55768: LIST
55769: LIST
55770: LIST
55771: ST_TO_ADDR
// if not result then
55772: LD_VAR 0 3
55776: NOT
55777: IFFALSE 55781
// exit ;
55779: GO 56241
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
55781: LD_ADDR_VAR 0 5
55785: PUSH
55786: LD_INT 81
55788: PUSH
55789: LD_VAR 0 8
55793: PUSH
55794: EMPTY
55795: LIST
55796: LIST
55797: PPUSH
55798: CALL_OW 69
55802: ST_TO_ADDR
// for i in result do
55803: LD_ADDR_VAR 0 4
55807: PUSH
55808: LD_VAR 0 3
55812: PUSH
55813: FOR_IN
55814: IFFALSE 56239
// begin tag := GetTag ( i ) + 1 ;
55816: LD_ADDR_VAR 0 9
55820: PUSH
55821: LD_VAR 0 4
55825: PPUSH
55826: CALL_OW 110
55830: PUSH
55831: LD_INT 1
55833: PLUS
55834: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
55835: LD_ADDR_VAR 0 7
55839: PUSH
55840: LD_VAR 0 4
55844: PPUSH
55845: CALL_OW 250
55849: PPUSH
55850: LD_VAR 0 4
55854: PPUSH
55855: CALL_OW 251
55859: PPUSH
55860: LD_INT 4
55862: PPUSH
55863: CALL 55436 0 3
55867: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
55868: LD_VAR 0 4
55872: PPUSH
55873: CALL_OW 247
55877: PUSH
55878: LD_INT 2
55880: EQUAL
55881: PUSH
55882: LD_VAR 0 7
55886: PUSH
55887: LD_INT 2
55889: GREATER
55890: AND
55891: PUSH
55892: LD_VAR 0 4
55896: PPUSH
55897: CALL_OW 264
55901: PUSH
55902: LD_VAR 0 10
55906: IN
55907: NOT
55908: AND
55909: IFFALSE 55948
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
55911: LD_VAR 0 4
55915: PPUSH
55916: LD_VAR 0 7
55920: PUSH
55921: LD_INT 1
55923: ARRAY
55924: PUSH
55925: LD_INT 1
55927: ARRAY
55928: PPUSH
55929: LD_VAR 0 7
55933: PUSH
55934: LD_INT 1
55936: ARRAY
55937: PUSH
55938: LD_INT 2
55940: ARRAY
55941: PPUSH
55942: CALL_OW 116
55946: GO 56237
// if path > tag then
55948: LD_VAR 0 2
55952: PUSH
55953: LD_VAR 0 9
55957: GREATER
55958: IFFALSE 56166
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
55960: LD_ADDR_VAR 0 6
55964: PUSH
55965: LD_VAR 0 5
55969: PPUSH
55970: LD_INT 91
55972: PUSH
55973: LD_VAR 0 4
55977: PUSH
55978: LD_INT 8
55980: PUSH
55981: EMPTY
55982: LIST
55983: LIST
55984: LIST
55985: PPUSH
55986: CALL_OW 72
55990: ST_TO_ADDR
// if nearEnemy then
55991: LD_VAR 0 6
55995: IFFALSE 56064
// begin if GetWeapon ( i ) = ru_time_lapser then
55997: LD_VAR 0 4
56001: PPUSH
56002: CALL_OW 264
56006: PUSH
56007: LD_INT 49
56009: EQUAL
56010: IFFALSE 56038
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
56012: LD_VAR 0 4
56016: PPUSH
56017: LD_VAR 0 6
56021: PPUSH
56022: LD_VAR 0 4
56026: PPUSH
56027: CALL_OW 74
56031: PPUSH
56032: CALL_OW 112
56036: GO 56062
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
56038: LD_VAR 0 4
56042: PPUSH
56043: LD_VAR 0 6
56047: PPUSH
56048: LD_VAR 0 4
56052: PPUSH
56053: CALL_OW 74
56057: PPUSH
56058: CALL 57312 0 2
// end else
56062: GO 56164
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
56064: LD_VAR 0 4
56068: PPUSH
56069: LD_VAR 0 2
56073: PUSH
56074: LD_VAR 0 9
56078: ARRAY
56079: PUSH
56080: LD_INT 1
56082: ARRAY
56083: PPUSH
56084: LD_VAR 0 2
56088: PUSH
56089: LD_VAR 0 9
56093: ARRAY
56094: PUSH
56095: LD_INT 2
56097: ARRAY
56098: PPUSH
56099: CALL_OW 297
56103: PUSH
56104: LD_INT 6
56106: GREATER
56107: IFFALSE 56150
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
56109: LD_VAR 0 4
56113: PPUSH
56114: LD_VAR 0 2
56118: PUSH
56119: LD_VAR 0 9
56123: ARRAY
56124: PUSH
56125: LD_INT 1
56127: ARRAY
56128: PPUSH
56129: LD_VAR 0 2
56133: PUSH
56134: LD_VAR 0 9
56138: ARRAY
56139: PUSH
56140: LD_INT 2
56142: ARRAY
56143: PPUSH
56144: CALL_OW 114
56148: GO 56164
// SetTag ( i , tag ) ;
56150: LD_VAR 0 4
56154: PPUSH
56155: LD_VAR 0 9
56159: PPUSH
56160: CALL_OW 109
// end else
56164: GO 56237
// if enemy then
56166: LD_VAR 0 5
56170: IFFALSE 56237
// begin if GetWeapon ( i ) = ru_time_lapser then
56172: LD_VAR 0 4
56176: PPUSH
56177: CALL_OW 264
56181: PUSH
56182: LD_INT 49
56184: EQUAL
56185: IFFALSE 56213
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
56187: LD_VAR 0 4
56191: PPUSH
56192: LD_VAR 0 5
56196: PPUSH
56197: LD_VAR 0 4
56201: PPUSH
56202: CALL_OW 74
56206: PPUSH
56207: CALL_OW 112
56211: GO 56237
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
56213: LD_VAR 0 4
56217: PPUSH
56218: LD_VAR 0 5
56222: PPUSH
56223: LD_VAR 0 4
56227: PPUSH
56228: CALL_OW 74
56232: PPUSH
56233: CALL 57312 0 2
// end ; end ;
56237: GO 55813
56239: POP
56240: POP
// end ;
56241: LD_VAR 0 3
56245: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
56246: LD_INT 0
56248: PPUSH
56249: PPUSH
56250: PPUSH
// if not unit or IsInUnit ( unit ) then
56251: LD_VAR 0 1
56255: NOT
56256: PUSH
56257: LD_VAR 0 1
56261: PPUSH
56262: CALL_OW 310
56266: OR
56267: IFFALSE 56271
// exit ;
56269: GO 56362
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
56271: LD_ADDR_VAR 0 4
56275: PUSH
56276: LD_VAR 0 1
56280: PPUSH
56281: CALL_OW 250
56285: PPUSH
56286: LD_VAR 0 2
56290: PPUSH
56291: LD_INT 1
56293: PPUSH
56294: CALL_OW 272
56298: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
56299: LD_ADDR_VAR 0 5
56303: PUSH
56304: LD_VAR 0 1
56308: PPUSH
56309: CALL_OW 251
56313: PPUSH
56314: LD_VAR 0 2
56318: PPUSH
56319: LD_INT 1
56321: PPUSH
56322: CALL_OW 273
56326: ST_TO_ADDR
// if ValidHex ( x , y ) then
56327: LD_VAR 0 4
56331: PPUSH
56332: LD_VAR 0 5
56336: PPUSH
56337: CALL_OW 488
56341: IFFALSE 56362
// ComTurnXY ( unit , x , y ) ;
56343: LD_VAR 0 1
56347: PPUSH
56348: LD_VAR 0 4
56352: PPUSH
56353: LD_VAR 0 5
56357: PPUSH
56358: CALL_OW 118
// end ;
56362: LD_VAR 0 3
56366: RET
// export function SeeUnits ( side , units ) ; var i ; begin
56367: LD_INT 0
56369: PPUSH
56370: PPUSH
// result := false ;
56371: LD_ADDR_VAR 0 3
56375: PUSH
56376: LD_INT 0
56378: ST_TO_ADDR
// if not units then
56379: LD_VAR 0 2
56383: NOT
56384: IFFALSE 56388
// exit ;
56386: GO 56433
// for i in units do
56388: LD_ADDR_VAR 0 4
56392: PUSH
56393: LD_VAR 0 2
56397: PUSH
56398: FOR_IN
56399: IFFALSE 56431
// if See ( side , i ) then
56401: LD_VAR 0 1
56405: PPUSH
56406: LD_VAR 0 4
56410: PPUSH
56411: CALL_OW 292
56415: IFFALSE 56429
// begin result := true ;
56417: LD_ADDR_VAR 0 3
56421: PUSH
56422: LD_INT 1
56424: ST_TO_ADDR
// exit ;
56425: POP
56426: POP
56427: GO 56433
// end ;
56429: GO 56398
56431: POP
56432: POP
// end ;
56433: LD_VAR 0 3
56437: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
56438: LD_INT 0
56440: PPUSH
56441: PPUSH
56442: PPUSH
56443: PPUSH
// if not unit or not points then
56444: LD_VAR 0 1
56448: NOT
56449: PUSH
56450: LD_VAR 0 2
56454: NOT
56455: OR
56456: IFFALSE 56460
// exit ;
56458: GO 56550
// dist := 99999 ;
56460: LD_ADDR_VAR 0 5
56464: PUSH
56465: LD_INT 99999
56467: ST_TO_ADDR
// for i in points do
56468: LD_ADDR_VAR 0 4
56472: PUSH
56473: LD_VAR 0 2
56477: PUSH
56478: FOR_IN
56479: IFFALSE 56548
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
56481: LD_ADDR_VAR 0 6
56485: PUSH
56486: LD_VAR 0 1
56490: PPUSH
56491: LD_VAR 0 4
56495: PUSH
56496: LD_INT 1
56498: ARRAY
56499: PPUSH
56500: LD_VAR 0 4
56504: PUSH
56505: LD_INT 2
56507: ARRAY
56508: PPUSH
56509: CALL_OW 297
56513: ST_TO_ADDR
// if tmpDist < dist then
56514: LD_VAR 0 6
56518: PUSH
56519: LD_VAR 0 5
56523: LESS
56524: IFFALSE 56546
// begin result := i ;
56526: LD_ADDR_VAR 0 3
56530: PUSH
56531: LD_VAR 0 4
56535: ST_TO_ADDR
// dist := tmpDist ;
56536: LD_ADDR_VAR 0 5
56540: PUSH
56541: LD_VAR 0 6
56545: ST_TO_ADDR
// end ; end ;
56546: GO 56478
56548: POP
56549: POP
// end ;
56550: LD_VAR 0 3
56554: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
56555: LD_INT 0
56557: PPUSH
// uc_side := side ;
56558: LD_ADDR_OWVAR 20
56562: PUSH
56563: LD_VAR 0 1
56567: ST_TO_ADDR
// uc_nation := 3 ;
56568: LD_ADDR_OWVAR 21
56572: PUSH
56573: LD_INT 3
56575: ST_TO_ADDR
// vc_chassis := 25 ;
56576: LD_ADDR_OWVAR 37
56580: PUSH
56581: LD_INT 25
56583: ST_TO_ADDR
// vc_engine := engine_siberite ;
56584: LD_ADDR_OWVAR 39
56588: PUSH
56589: LD_INT 3
56591: ST_TO_ADDR
// vc_control := control_computer ;
56592: LD_ADDR_OWVAR 38
56596: PUSH
56597: LD_INT 3
56599: ST_TO_ADDR
// vc_weapon := 59 ;
56600: LD_ADDR_OWVAR 40
56604: PUSH
56605: LD_INT 59
56607: ST_TO_ADDR
// result := CreateVehicle ;
56608: LD_ADDR_VAR 0 5
56612: PUSH
56613: CALL_OW 45
56617: ST_TO_ADDR
// SetDir ( result , d ) ;
56618: LD_VAR 0 5
56622: PPUSH
56623: LD_VAR 0 4
56627: PPUSH
56628: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
56632: LD_VAR 0 5
56636: PPUSH
56637: LD_VAR 0 2
56641: PPUSH
56642: LD_VAR 0 3
56646: PPUSH
56647: LD_INT 0
56649: PPUSH
56650: CALL_OW 48
// end ;
56654: LD_VAR 0 5
56658: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
56659: LD_INT 0
56661: PPUSH
56662: PPUSH
56663: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
56664: LD_ADDR_VAR 0 2
56668: PUSH
56669: LD_INT 0
56671: PUSH
56672: LD_INT 0
56674: PUSH
56675: LD_INT 0
56677: PUSH
56678: LD_INT 0
56680: PUSH
56681: EMPTY
56682: LIST
56683: LIST
56684: LIST
56685: LIST
56686: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
56687: LD_VAR 0 1
56691: NOT
56692: PUSH
56693: LD_VAR 0 1
56697: PPUSH
56698: CALL_OW 264
56702: PUSH
56703: LD_INT 12
56705: PUSH
56706: LD_INT 51
56708: PUSH
56709: LD_INT 32
56711: PUSH
56712: LD_INT 89
56714: PUSH
56715: EMPTY
56716: LIST
56717: LIST
56718: LIST
56719: LIST
56720: IN
56721: NOT
56722: OR
56723: IFFALSE 56727
// exit ;
56725: GO 56825
// for i := 1 to 3 do
56727: LD_ADDR_VAR 0 3
56731: PUSH
56732: DOUBLE
56733: LD_INT 1
56735: DEC
56736: ST_TO_ADDR
56737: LD_INT 3
56739: PUSH
56740: FOR_TO
56741: IFFALSE 56823
// begin tmp := GetCargo ( cargo , i ) ;
56743: LD_ADDR_VAR 0 4
56747: PUSH
56748: LD_VAR 0 1
56752: PPUSH
56753: LD_VAR 0 3
56757: PPUSH
56758: CALL_OW 289
56762: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
56763: LD_ADDR_VAR 0 2
56767: PUSH
56768: LD_VAR 0 2
56772: PPUSH
56773: LD_VAR 0 3
56777: PPUSH
56778: LD_VAR 0 4
56782: PPUSH
56783: CALL_OW 1
56787: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
56788: LD_ADDR_VAR 0 2
56792: PUSH
56793: LD_VAR 0 2
56797: PPUSH
56798: LD_INT 4
56800: PPUSH
56801: LD_VAR 0 2
56805: PUSH
56806: LD_INT 4
56808: ARRAY
56809: PUSH
56810: LD_VAR 0 4
56814: PLUS
56815: PPUSH
56816: CALL_OW 1
56820: ST_TO_ADDR
// end ;
56821: GO 56740
56823: POP
56824: POP
// end ;
56825: LD_VAR 0 2
56829: RET
// export function Length ( array ) ; begin
56830: LD_INT 0
56832: PPUSH
// result := array + 0 ;
56833: LD_ADDR_VAR 0 2
56837: PUSH
56838: LD_VAR 0 1
56842: PUSH
56843: LD_INT 0
56845: PLUS
56846: ST_TO_ADDR
// end ;
56847: LD_VAR 0 2
56851: RET
// export function PrepareArray ( array ) ; begin
56852: LD_INT 0
56854: PPUSH
// result := array diff 0 ;
56855: LD_ADDR_VAR 0 2
56859: PUSH
56860: LD_VAR 0 1
56864: PUSH
56865: LD_INT 0
56867: DIFF
56868: ST_TO_ADDR
// if not result [ 1 ] then
56869: LD_VAR 0 2
56873: PUSH
56874: LD_INT 1
56876: ARRAY
56877: NOT
56878: IFFALSE 56898
// result := Delete ( result , 1 ) ;
56880: LD_ADDR_VAR 0 2
56884: PUSH
56885: LD_VAR 0 2
56889: PPUSH
56890: LD_INT 1
56892: PPUSH
56893: CALL_OW 3
56897: ST_TO_ADDR
// end ;
56898: LD_VAR 0 2
56902: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
56903: LD_INT 0
56905: PPUSH
56906: PPUSH
56907: PPUSH
56908: PPUSH
// sibRocketRange := 25 ;
56909: LD_ADDR_VAR 0 6
56913: PUSH
56914: LD_INT 25
56916: ST_TO_ADDR
// result := false ;
56917: LD_ADDR_VAR 0 4
56921: PUSH
56922: LD_INT 0
56924: ST_TO_ADDR
// for i := 0 to 5 do
56925: LD_ADDR_VAR 0 5
56929: PUSH
56930: DOUBLE
56931: LD_INT 0
56933: DEC
56934: ST_TO_ADDR
56935: LD_INT 5
56937: PUSH
56938: FOR_TO
56939: IFFALSE 57006
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
56941: LD_VAR 0 1
56945: PPUSH
56946: LD_VAR 0 5
56950: PPUSH
56951: LD_VAR 0 6
56955: PPUSH
56956: CALL_OW 272
56960: PPUSH
56961: LD_VAR 0 2
56965: PPUSH
56966: LD_VAR 0 5
56970: PPUSH
56971: LD_VAR 0 6
56975: PPUSH
56976: CALL_OW 273
56980: PPUSH
56981: LD_VAR 0 3
56985: PPUSH
56986: CALL_OW 309
56990: IFFALSE 57004
// begin result := true ;
56992: LD_ADDR_VAR 0 4
56996: PUSH
56997: LD_INT 1
56999: ST_TO_ADDR
// exit ;
57000: POP
57001: POP
57002: GO 57008
// end ;
57004: GO 56938
57006: POP
57007: POP
// end ;
57008: LD_VAR 0 4
57012: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
57013: LD_INT 0
57015: PPUSH
57016: PPUSH
57017: PPUSH
// if btype = b_depot then
57018: LD_VAR 0 2
57022: PUSH
57023: LD_INT 0
57025: EQUAL
57026: IFFALSE 57038
// begin result := true ;
57028: LD_ADDR_VAR 0 3
57032: PUSH
57033: LD_INT 1
57035: ST_TO_ADDR
// exit ;
57036: GO 57154
// end ; pom := GetBase ( depot ) ;
57038: LD_ADDR_VAR 0 4
57042: PUSH
57043: LD_VAR 0 1
57047: PPUSH
57048: CALL_OW 274
57052: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
57053: LD_ADDR_VAR 0 5
57057: PUSH
57058: LD_VAR 0 2
57062: PPUSH
57063: LD_VAR 0 1
57067: PPUSH
57068: CALL_OW 248
57072: PPUSH
57073: CALL_OW 450
57077: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
57078: LD_ADDR_VAR 0 3
57082: PUSH
57083: LD_VAR 0 4
57087: PPUSH
57088: LD_INT 1
57090: PPUSH
57091: CALL_OW 275
57095: PUSH
57096: LD_VAR 0 5
57100: PUSH
57101: LD_INT 1
57103: ARRAY
57104: GREATEREQUAL
57105: PUSH
57106: LD_VAR 0 4
57110: PPUSH
57111: LD_INT 2
57113: PPUSH
57114: CALL_OW 275
57118: PUSH
57119: LD_VAR 0 5
57123: PUSH
57124: LD_INT 2
57126: ARRAY
57127: GREATEREQUAL
57128: AND
57129: PUSH
57130: LD_VAR 0 4
57134: PPUSH
57135: LD_INT 3
57137: PPUSH
57138: CALL_OW 275
57142: PUSH
57143: LD_VAR 0 5
57147: PUSH
57148: LD_INT 3
57150: ARRAY
57151: GREATEREQUAL
57152: AND
57153: ST_TO_ADDR
// end ;
57154: LD_VAR 0 3
57158: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
57159: LD_INT 0
57161: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
57162: LD_VAR 0 1
57166: PPUSH
57167: LD_VAR 0 2
57171: PPUSH
57172: LD_INT 0
57174: PPUSH
57175: LD_INT 0
57177: PPUSH
57178: LD_INT 1
57180: PPUSH
57181: LD_INT 0
57183: PPUSH
57184: CALL_OW 587
// end ;
57188: LD_VAR 0 3
57192: RET
// export function CenterOnNow ( unit ) ; begin
57193: LD_INT 0
57195: PPUSH
// result := IsInUnit ( unit ) ;
57196: LD_ADDR_VAR 0 2
57200: PUSH
57201: LD_VAR 0 1
57205: PPUSH
57206: CALL_OW 310
57210: ST_TO_ADDR
// if not result then
57211: LD_VAR 0 2
57215: NOT
57216: IFFALSE 57228
// result := unit ;
57218: LD_ADDR_VAR 0 2
57222: PUSH
57223: LD_VAR 0 1
57227: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
57228: LD_VAR 0 1
57232: PPUSH
57233: CALL_OW 87
// end ;
57237: LD_VAR 0 2
57241: RET
// export function ComMoveHex ( unit , hex ) ; begin
57242: LD_INT 0
57244: PPUSH
// if not hex then
57245: LD_VAR 0 2
57249: NOT
57250: IFFALSE 57254
// exit ;
57252: GO 57307
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
57254: LD_VAR 0 2
57258: PUSH
57259: LD_INT 1
57261: ARRAY
57262: PPUSH
57263: LD_VAR 0 2
57267: PUSH
57268: LD_INT 2
57270: ARRAY
57271: PPUSH
57272: CALL_OW 428
57276: IFFALSE 57280
// exit ;
57278: GO 57307
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
57280: LD_VAR 0 1
57284: PPUSH
57285: LD_VAR 0 2
57289: PUSH
57290: LD_INT 1
57292: ARRAY
57293: PPUSH
57294: LD_VAR 0 2
57298: PUSH
57299: LD_INT 2
57301: ARRAY
57302: PPUSH
57303: CALL_OW 111
// end ;
57307: LD_VAR 0 3
57311: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
57312: LD_INT 0
57314: PPUSH
57315: PPUSH
57316: PPUSH
// if not unit or not enemy then
57317: LD_VAR 0 1
57321: NOT
57322: PUSH
57323: LD_VAR 0 2
57327: NOT
57328: OR
57329: IFFALSE 57333
// exit ;
57331: GO 57457
// x := GetX ( enemy ) ;
57333: LD_ADDR_VAR 0 4
57337: PUSH
57338: LD_VAR 0 2
57342: PPUSH
57343: CALL_OW 250
57347: ST_TO_ADDR
// y := GetY ( enemy ) ;
57348: LD_ADDR_VAR 0 5
57352: PUSH
57353: LD_VAR 0 2
57357: PPUSH
57358: CALL_OW 251
57362: ST_TO_ADDR
// if ValidHex ( x , y ) then
57363: LD_VAR 0 4
57367: PPUSH
57368: LD_VAR 0 5
57372: PPUSH
57373: CALL_OW 488
57377: IFFALSE 57457
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
57379: LD_VAR 0 2
57383: PPUSH
57384: CALL_OW 247
57388: PUSH
57389: LD_INT 3
57391: PUSH
57392: LD_INT 2
57394: PUSH
57395: EMPTY
57396: LIST
57397: LIST
57398: IN
57399: PUSH
57400: LD_VAR 0 1
57404: PPUSH
57405: CALL_OW 255
57409: PPUSH
57410: LD_VAR 0 2
57414: PPUSH
57415: CALL_OW 292
57419: OR
57420: IFFALSE 57438
// ComAttackUnit ( unit , enemy ) else
57422: LD_VAR 0 1
57426: PPUSH
57427: LD_VAR 0 2
57431: PPUSH
57432: CALL_OW 115
57436: GO 57457
// ComAgressiveMove ( unit , x , y ) ;
57438: LD_VAR 0 1
57442: PPUSH
57443: LD_VAR 0 4
57447: PPUSH
57448: LD_VAR 0 5
57452: PPUSH
57453: CALL_OW 114
// end ;
57457: LD_VAR 0 3
57461: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
57462: LD_INT 0
57464: PPUSH
57465: PPUSH
57466: PPUSH
// list := AreaToList ( area , 0 ) ;
57467: LD_ADDR_VAR 0 5
57471: PUSH
57472: LD_VAR 0 1
57476: PPUSH
57477: LD_INT 0
57479: PPUSH
57480: CALL_OW 517
57484: ST_TO_ADDR
// if not list then
57485: LD_VAR 0 5
57489: NOT
57490: IFFALSE 57494
// exit ;
57492: GO 57624
// if all then
57494: LD_VAR 0 2
57498: IFFALSE 57586
// begin for i := 1 to list [ 1 ] do
57500: LD_ADDR_VAR 0 4
57504: PUSH
57505: DOUBLE
57506: LD_INT 1
57508: DEC
57509: ST_TO_ADDR
57510: LD_VAR 0 5
57514: PUSH
57515: LD_INT 1
57517: ARRAY
57518: PUSH
57519: FOR_TO
57520: IFFALSE 57582
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
57522: LD_ADDR_VAR 0 3
57526: PUSH
57527: LD_VAR 0 3
57531: PPUSH
57532: LD_VAR 0 3
57536: PUSH
57537: LD_INT 1
57539: PLUS
57540: PPUSH
57541: LD_VAR 0 5
57545: PUSH
57546: LD_INT 1
57548: ARRAY
57549: PUSH
57550: LD_VAR 0 4
57554: ARRAY
57555: PUSH
57556: LD_VAR 0 5
57560: PUSH
57561: LD_INT 2
57563: ARRAY
57564: PUSH
57565: LD_VAR 0 4
57569: ARRAY
57570: PUSH
57571: EMPTY
57572: LIST
57573: LIST
57574: PPUSH
57575: CALL_OW 1
57579: ST_TO_ADDR
57580: GO 57519
57582: POP
57583: POP
// exit ;
57584: GO 57624
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
57586: LD_ADDR_VAR 0 3
57590: PUSH
57591: LD_VAR 0 5
57595: PUSH
57596: LD_INT 1
57598: ARRAY
57599: PUSH
57600: LD_INT 1
57602: ARRAY
57603: PUSH
57604: LD_VAR 0 5
57608: PUSH
57609: LD_INT 2
57611: ARRAY
57612: PUSH
57613: LD_INT 1
57615: ARRAY
57616: PUSH
57617: EMPTY
57618: LIST
57619: LIST
57620: PUSH
57621: EMPTY
57622: LIST
57623: ST_TO_ADDR
// end ;
57624: LD_VAR 0 3
57628: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
57629: LD_INT 0
57631: PPUSH
57632: PPUSH
// list := AreaToList ( area , 0 ) ;
57633: LD_ADDR_VAR 0 4
57637: PUSH
57638: LD_VAR 0 1
57642: PPUSH
57643: LD_INT 0
57645: PPUSH
57646: CALL_OW 517
57650: ST_TO_ADDR
// if not list then
57651: LD_VAR 0 4
57655: NOT
57656: IFFALSE 57660
// exit ;
57658: GO 57701
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
57660: LD_ADDR_VAR 0 3
57664: PUSH
57665: LD_VAR 0 4
57669: PUSH
57670: LD_INT 1
57672: ARRAY
57673: PUSH
57674: LD_INT 1
57676: ARRAY
57677: PUSH
57678: LD_VAR 0 4
57682: PUSH
57683: LD_INT 2
57685: ARRAY
57686: PUSH
57687: LD_INT 1
57689: ARRAY
57690: PUSH
57691: LD_VAR 0 2
57695: PUSH
57696: EMPTY
57697: LIST
57698: LIST
57699: LIST
57700: ST_TO_ADDR
// end ;
57701: LD_VAR 0 3
57705: RET
// export function First ( array ) ; begin
57706: LD_INT 0
57708: PPUSH
// if not array then
57709: LD_VAR 0 1
57713: NOT
57714: IFFALSE 57718
// exit ;
57716: GO 57732
// result := array [ 1 ] ;
57718: LD_ADDR_VAR 0 2
57722: PUSH
57723: LD_VAR 0 1
57727: PUSH
57728: LD_INT 1
57730: ARRAY
57731: ST_TO_ADDR
// end ;
57732: LD_VAR 0 2
57736: RET
// export function Last ( array ) ; begin
57737: LD_INT 0
57739: PPUSH
// if not array then
57740: LD_VAR 0 1
57744: NOT
57745: IFFALSE 57749
// exit ;
57747: GO 57765
// result := array [ array ] ;
57749: LD_ADDR_VAR 0 2
57753: PUSH
57754: LD_VAR 0 1
57758: PUSH
57759: LD_VAR 0 1
57763: ARRAY
57764: ST_TO_ADDR
// end ;
57765: LD_VAR 0 2
57769: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
57770: LD_INT 0
57772: PPUSH
57773: PPUSH
// result := [ ] ;
57774: LD_ADDR_VAR 0 5
57778: PUSH
57779: EMPTY
57780: ST_TO_ADDR
// if not array then
57781: LD_VAR 0 1
57785: NOT
57786: IFFALSE 57790
// exit ;
57788: GO 57902
// for i := 1 to array do
57790: LD_ADDR_VAR 0 6
57794: PUSH
57795: DOUBLE
57796: LD_INT 1
57798: DEC
57799: ST_TO_ADDR
57800: LD_VAR 0 1
57804: PUSH
57805: FOR_TO
57806: IFFALSE 57900
// if array [ i ] [ index ] = value then
57808: LD_VAR 0 1
57812: PUSH
57813: LD_VAR 0 6
57817: ARRAY
57818: PUSH
57819: LD_VAR 0 2
57823: ARRAY
57824: PUSH
57825: LD_VAR 0 3
57829: EQUAL
57830: IFFALSE 57898
// begin if indexColumn then
57832: LD_VAR 0 4
57836: IFFALSE 57872
// result := Join ( result , array [ i ] [ indexColumn ] ) else
57838: LD_ADDR_VAR 0 5
57842: PUSH
57843: LD_VAR 0 5
57847: PPUSH
57848: LD_VAR 0 1
57852: PUSH
57853: LD_VAR 0 6
57857: ARRAY
57858: PUSH
57859: LD_VAR 0 4
57863: ARRAY
57864: PPUSH
57865: CALL 53090 0 2
57869: ST_TO_ADDR
57870: GO 57898
// result := Join ( result , array [ i ] ) ;
57872: LD_ADDR_VAR 0 5
57876: PUSH
57877: LD_VAR 0 5
57881: PPUSH
57882: LD_VAR 0 1
57886: PUSH
57887: LD_VAR 0 6
57891: ARRAY
57892: PPUSH
57893: CALL 53090 0 2
57897: ST_TO_ADDR
// end ;
57898: GO 57805
57900: POP
57901: POP
// end ;
57902: LD_VAR 0 5
57906: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
57907: LD_INT 0
57909: PPUSH
// if not vehicles or not parkingPoint then
57910: LD_VAR 0 1
57914: NOT
57915: PUSH
57916: LD_VAR 0 2
57920: NOT
57921: OR
57922: IFFALSE 57926
// exit ;
57924: GO 58024
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
57926: LD_ADDR_VAR 0 1
57930: PUSH
57931: LD_VAR 0 1
57935: PPUSH
57936: LD_INT 50
57938: PUSH
57939: EMPTY
57940: LIST
57941: PUSH
57942: LD_INT 3
57944: PUSH
57945: LD_INT 92
57947: PUSH
57948: LD_VAR 0 2
57952: PUSH
57953: LD_INT 1
57955: ARRAY
57956: PUSH
57957: LD_VAR 0 2
57961: PUSH
57962: LD_INT 2
57964: ARRAY
57965: PUSH
57966: LD_INT 8
57968: PUSH
57969: EMPTY
57970: LIST
57971: LIST
57972: LIST
57973: LIST
57974: PUSH
57975: EMPTY
57976: LIST
57977: LIST
57978: PUSH
57979: EMPTY
57980: LIST
57981: LIST
57982: PPUSH
57983: CALL_OW 72
57987: ST_TO_ADDR
// if not vehicles then
57988: LD_VAR 0 1
57992: NOT
57993: IFFALSE 57997
// exit ;
57995: GO 58024
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
57997: LD_VAR 0 1
58001: PPUSH
58002: LD_VAR 0 2
58006: PUSH
58007: LD_INT 1
58009: ARRAY
58010: PPUSH
58011: LD_VAR 0 2
58015: PUSH
58016: LD_INT 2
58018: ARRAY
58019: PPUSH
58020: CALL_OW 111
// end ;
58024: LD_VAR 0 3
58028: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
58029: LD_INT 0
58031: PPUSH
58032: PPUSH
58033: PPUSH
// if not side or not area then
58034: LD_VAR 0 1
58038: NOT
58039: PUSH
58040: LD_VAR 0 2
58044: NOT
58045: OR
58046: IFFALSE 58050
// exit ;
58048: GO 58169
// tmp := AreaToList ( area , 0 ) ;
58050: LD_ADDR_VAR 0 5
58054: PUSH
58055: LD_VAR 0 2
58059: PPUSH
58060: LD_INT 0
58062: PPUSH
58063: CALL_OW 517
58067: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
58068: LD_ADDR_VAR 0 4
58072: PUSH
58073: DOUBLE
58074: LD_INT 1
58076: DEC
58077: ST_TO_ADDR
58078: LD_VAR 0 5
58082: PUSH
58083: LD_INT 1
58085: ARRAY
58086: PUSH
58087: FOR_TO
58088: IFFALSE 58167
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
58090: LD_VAR 0 5
58094: PUSH
58095: LD_INT 1
58097: ARRAY
58098: PUSH
58099: LD_VAR 0 4
58103: ARRAY
58104: PPUSH
58105: LD_VAR 0 5
58109: PUSH
58110: LD_INT 2
58112: ARRAY
58113: PUSH
58114: LD_VAR 0 4
58118: ARRAY
58119: PPUSH
58120: CALL_OW 351
58124: IFFALSE 58165
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
58126: LD_VAR 0 5
58130: PUSH
58131: LD_INT 1
58133: ARRAY
58134: PUSH
58135: LD_VAR 0 4
58139: ARRAY
58140: PPUSH
58141: LD_VAR 0 5
58145: PUSH
58146: LD_INT 2
58148: ARRAY
58149: PUSH
58150: LD_VAR 0 4
58154: ARRAY
58155: PPUSH
58156: LD_VAR 0 1
58160: PPUSH
58161: CALL_OW 244
// end ;
58165: GO 58087
58167: POP
58168: POP
// end ; end_of_file
58169: LD_VAR 0 3
58173: RET
// export function SOS_UnitDestroyed ( un ) ; begin
58174: LD_INT 0
58176: PPUSH
// ComRadiation ( un ) ;
58177: LD_VAR 0 1
58181: PPUSH
58182: CALL 59163 0 1
// end ;
58186: LD_VAR 0 2
58190: RET
// export function SOS_UnitKamikazed ( un ) ; begin
58191: LD_INT 0
58193: PPUSH
// ComRadiation ( un ) ;
58194: LD_VAR 0 1
58198: PPUSH
58199: CALL 59163 0 1
// end ;
58203: LD_VAR 0 2
58207: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
58208: LD_INT 0
58210: PPUSH
// end ;
58211: LD_VAR 0 4
58215: RET
// export function SOS_Command ( cmd ) ; begin
58216: LD_INT 0
58218: PPUSH
// end ;
58219: LD_VAR 0 2
58223: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
58224: LD_INT 0
58226: PPUSH
// end ;
58227: LD_VAR 0 6
58231: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , tag , driver , hex ; begin
58232: LD_INT 0
58234: PPUSH
58235: PPUSH
58236: PPUSH
58237: PPUSH
58238: PPUSH
// if not vehicle or not factory then
58239: LD_VAR 0 1
58243: NOT
58244: PUSH
58245: LD_VAR 0 2
58249: NOT
58250: OR
58251: IFFALSE 58255
// exit ;
58253: GO 58754
// if not factoryWaypoints then
58255: LD_EXP 51
58259: NOT
58260: IFFALSE 58264
// exit ;
58262: GO 58754
// for i := 1 to Count ( factoryWaypoints ) do
58264: LD_ADDR_VAR 0 4
58268: PUSH
58269: DOUBLE
58270: LD_INT 1
58272: DEC
58273: ST_TO_ADDR
58274: LD_EXP 51
58278: PPUSH
58279: CALL 17481 0 1
58283: PUSH
58284: FOR_TO
58285: IFFALSE 58752
// if factoryWaypoints [ i ] [ 2 ] = factory then
58287: LD_EXP 51
58291: PUSH
58292: LD_VAR 0 4
58296: ARRAY
58297: PUSH
58298: LD_INT 2
58300: ARRAY
58301: PUSH
58302: LD_VAR 0 2
58306: EQUAL
58307: IFFALSE 58750
// begin if GetControl ( vehicle ) = control_manual then
58309: LD_VAR 0 1
58313: PPUSH
58314: CALL_OW 263
58318: PUSH
58319: LD_INT 1
58321: EQUAL
58322: IFFALSE 58633
// begin driver := IsDrivenBy ( vehicle ) ;
58324: LD_ADDR_VAR 0 6
58328: PUSH
58329: LD_VAR 0 1
58333: PPUSH
58334: CALL_OW 311
58338: ST_TO_ADDR
// tag := GetTag ( driver ) ;
58339: LD_ADDR_VAR 0 5
58343: PUSH
58344: LD_VAR 0 6
58348: PPUSH
58349: CALL_OW 110
58353: ST_TO_ADDR
// if tag = tDriver or GetTag ( vehicle ) = tDriver then
58354: LD_VAR 0 5
58358: PUSH
58359: LD_INT 501
58361: EQUAL
58362: PUSH
58363: LD_VAR 0 1
58367: PPUSH
58368: CALL_OW 110
58372: PUSH
58373: LD_INT 501
58375: EQUAL
58376: OR
58377: IFFALSE 58383
// exit ;
58379: POP
58380: POP
58381: GO 58754
// if not HasTask ( driver ) then
58383: LD_VAR 0 6
58387: PPUSH
58388: CALL_OW 314
58392: NOT
58393: IFFALSE 58631
// begin SetTag ( driver , tDriver ) ;
58395: LD_VAR 0 6
58399: PPUSH
58400: LD_INT 501
58402: PPUSH
58403: CALL_OW 109
// SetTag ( vehicle , tDriver ) ;
58407: LD_VAR 0 1
58411: PPUSH
58412: LD_INT 501
58414: PPUSH
58415: CALL_OW 109
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
58419: LD_ADDR_VAR 0 7
58423: PUSH
58424: LD_EXP 51
58428: PUSH
58429: LD_VAR 0 4
58433: ARRAY
58434: PUSH
58435: LD_INT 3
58437: ARRAY
58438: PPUSH
58439: LD_EXP 51
58443: PUSH
58444: LD_VAR 0 4
58448: ARRAY
58449: PUSH
58450: LD_INT 4
58452: ARRAY
58453: PPUSH
58454: CALL_OW 428
58458: ST_TO_ADDR
// if hex then
58459: LD_VAR 0 7
58463: IFFALSE 58481
// ComMoveUnit ( driver , hex ) else
58465: LD_VAR 0 6
58469: PPUSH
58470: LD_VAR 0 7
58474: PPUSH
58475: CALL_OW 112
58479: GO 58520
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
58481: LD_VAR 0 6
58485: PPUSH
58486: LD_EXP 51
58490: PUSH
58491: LD_VAR 0 4
58495: ARRAY
58496: PUSH
58497: LD_INT 3
58499: ARRAY
58500: PPUSH
58501: LD_EXP 51
58505: PUSH
58506: LD_VAR 0 4
58510: ARRAY
58511: PUSH
58512: LD_INT 4
58514: ARRAY
58515: PPUSH
58516: CALL_OW 111
// AddComExitVehicle ( driver ) ;
58520: LD_VAR 0 6
58524: PPUSH
58525: CALL_OW 181
// if Multiplayer then
58529: LD_OWVAR 4
58533: IFFALSE 58582
// begin repeat wait ( 10 ) ;
58535: LD_INT 10
58537: PPUSH
58538: CALL_OW 67
// until not IsInUnit ( driver ) ;
58542: LD_VAR 0 6
58546: PPUSH
58547: CALL_OW 310
58551: NOT
58552: IFFALSE 58535
// if not HasTask ( driver ) then
58554: LD_VAR 0 6
58558: PPUSH
58559: CALL_OW 314
58563: NOT
58564: IFFALSE 58580
// ComEnterUnit ( driver , factory ) ;
58566: LD_VAR 0 6
58570: PPUSH
58571: LD_VAR 0 2
58575: PPUSH
58576: CALL_OW 120
// end else
58580: GO 58596
// AddComEnterUnit ( driver , factory ) ;
58582: LD_VAR 0 6
58586: PPUSH
58587: LD_VAR 0 2
58591: PPUSH
58592: CALL_OW 180
// wait ( 0 0$1 ) ;
58596: LD_INT 35
58598: PPUSH
58599: CALL_OW 67
// SetTag ( driver , tag ) ;
58603: LD_VAR 0 6
58607: PPUSH
58608: LD_VAR 0 5
58612: PPUSH
58613: CALL_OW 109
// SetTag ( vehicle , 0 ) ;
58617: LD_VAR 0 1
58621: PPUSH
58622: LD_INT 0
58624: PPUSH
58625: CALL_OW 109
// break ;
58629: GO 58752
// end ; end else
58631: GO 58750
// if GetControl ( vehicle ) = control_remote then
58633: LD_VAR 0 1
58637: PPUSH
58638: CALL_OW 263
58642: PUSH
58643: LD_INT 2
58645: EQUAL
58646: IFFALSE 58709
// begin wait ( 0 0$2 ) ;
58648: LD_INT 70
58650: PPUSH
58651: CALL_OW 67
// if Connect ( vehicle ) then
58655: LD_VAR 0 1
58659: PPUSH
58660: CALL 23687 0 1
58664: IFFALSE 58705
// AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
58666: LD_VAR 0 1
58670: PPUSH
58671: LD_EXP 51
58675: PUSH
58676: LD_VAR 0 4
58680: ARRAY
58681: PUSH
58682: LD_INT 3
58684: ARRAY
58685: PPUSH
58686: LD_EXP 51
58690: PUSH
58691: LD_VAR 0 4
58695: ARRAY
58696: PUSH
58697: LD_INT 4
58699: ARRAY
58700: PPUSH
58701: CALL_OW 171
// break ;
58705: GO 58752
// end else
58707: GO 58750
// begin AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
58709: LD_VAR 0 1
58713: PPUSH
58714: LD_EXP 51
58718: PUSH
58719: LD_VAR 0 4
58723: ARRAY
58724: PUSH
58725: LD_INT 3
58727: ARRAY
58728: PPUSH
58729: LD_EXP 51
58733: PUSH
58734: LD_VAR 0 4
58738: ARRAY
58739: PUSH
58740: LD_INT 4
58742: ARRAY
58743: PPUSH
58744: CALL_OW 171
// break ;
58748: GO 58752
// end ; end ;
58750: GO 58284
58752: POP
58753: POP
// end ;
58754: LD_VAR 0 3
58758: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
58759: LD_INT 0
58761: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
58762: LD_VAR 0 1
58766: PUSH
58767: LD_INT 250
58769: EQUAL
58770: PUSH
58771: LD_VAR 0 2
58775: PPUSH
58776: CALL_OW 264
58780: PUSH
58781: LD_INT 81
58783: EQUAL
58784: AND
58785: IFFALSE 58806
// MinerPlaceMine ( unit , x , y ) ;
58787: LD_VAR 0 2
58791: PPUSH
58792: LD_VAR 0 4
58796: PPUSH
58797: LD_VAR 0 5
58801: PPUSH
58802: CALL 61898 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
58806: LD_VAR 0 1
58810: PUSH
58811: LD_INT 251
58813: EQUAL
58814: PUSH
58815: LD_VAR 0 2
58819: PPUSH
58820: CALL_OW 264
58824: PUSH
58825: LD_INT 81
58827: EQUAL
58828: AND
58829: IFFALSE 58850
// MinerDetonateMine ( unit , x , y ) ;
58831: LD_VAR 0 2
58835: PPUSH
58836: LD_VAR 0 4
58840: PPUSH
58841: LD_VAR 0 5
58845: PPUSH
58846: CALL 62173 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
58850: LD_VAR 0 1
58854: PUSH
58855: LD_INT 252
58857: EQUAL
58858: PUSH
58859: LD_VAR 0 2
58863: PPUSH
58864: CALL_OW 264
58868: PUSH
58869: LD_INT 81
58871: EQUAL
58872: AND
58873: IFFALSE 58894
// MinerCreateMinefield ( unit , x , y ) ;
58875: LD_VAR 0 2
58879: PPUSH
58880: LD_VAR 0 4
58884: PPUSH
58885: LD_VAR 0 5
58889: PPUSH
58890: CALL 62590 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
58894: LD_VAR 0 1
58898: PUSH
58899: LD_INT 253
58901: EQUAL
58902: PUSH
58903: LD_VAR 0 2
58907: PPUSH
58908: CALL_OW 257
58912: PUSH
58913: LD_INT 5
58915: EQUAL
58916: AND
58917: IFFALSE 58938
// ComBinocular ( unit , x , y ) ;
58919: LD_VAR 0 2
58923: PPUSH
58924: LD_VAR 0 4
58928: PPUSH
58929: LD_VAR 0 5
58933: PPUSH
58934: CALL 62959 0 3
// if selectedUnit then
58938: LD_VAR 0 3
58942: IFFALSE 58998
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
58944: LD_VAR 0 1
58948: PUSH
58949: LD_INT 254
58951: EQUAL
58952: PUSH
58953: LD_VAR 0 2
58957: PPUSH
58958: CALL_OW 264
58962: PUSH
58963: LD_INT 99
58965: EQUAL
58966: AND
58967: PUSH
58968: LD_VAR 0 3
58972: PPUSH
58973: CALL_OW 263
58977: PUSH
58978: LD_INT 3
58980: EQUAL
58981: AND
58982: IFFALSE 58998
// HackDestroyVehicle ( unit , selectedUnit ) ;
58984: LD_VAR 0 2
58988: PPUSH
58989: LD_VAR 0 3
58993: PPUSH
58994: CALL 61262 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
58998: LD_VAR 0 1
59002: PUSH
59003: LD_INT 255
59005: EQUAL
59006: PUSH
59007: LD_VAR 0 2
59011: PPUSH
59012: CALL_OW 264
59016: PUSH
59017: LD_INT 14
59019: PUSH
59020: LD_INT 53
59022: PUSH
59023: EMPTY
59024: LIST
59025: LIST
59026: IN
59027: AND
59028: PUSH
59029: LD_VAR 0 4
59033: PPUSH
59034: LD_VAR 0 5
59038: PPUSH
59039: CALL_OW 488
59043: AND
59044: IFFALSE 59068
// CutTreeXYR ( unit , x , y , 12 ) ;
59046: LD_VAR 0 2
59050: PPUSH
59051: LD_VAR 0 4
59055: PPUSH
59056: LD_VAR 0 5
59060: PPUSH
59061: LD_INT 12
59063: PPUSH
59064: CALL 59259 0 4
// if cmd = 256 then
59068: LD_VAR 0 1
59072: PUSH
59073: LD_INT 256
59075: EQUAL
59076: IFFALSE 59097
// SetFactoryWaypoint ( unit , x , y ) ;
59078: LD_VAR 0 2
59082: PPUSH
59083: LD_VAR 0 4
59087: PPUSH
59088: LD_VAR 0 5
59092: PPUSH
59093: CALL 63514 0 3
// if cmd = 257 then
59097: LD_VAR 0 1
59101: PUSH
59102: LD_INT 257
59104: EQUAL
59105: IFFALSE 59126
// SetWarehouseGatheringPoint ( unit , x , y ) ;
59107: LD_VAR 0 2
59111: PPUSH
59112: LD_VAR 0 4
59116: PPUSH
59117: LD_VAR 0 5
59121: PPUSH
59122: CALL 64004 0 3
// if cmd = 258 then
59126: LD_VAR 0 1
59130: PUSH
59131: LD_INT 258
59133: EQUAL
59134: IFFALSE 59158
// BurnTreeXYR ( unit , x , y , 8 ) ;
59136: LD_VAR 0 2
59140: PPUSH
59141: LD_VAR 0 4
59145: PPUSH
59146: LD_VAR 0 5
59150: PPUSH
59151: LD_INT 8
59153: PPUSH
59154: CALL 59653 0 4
// end ;
59158: LD_VAR 0 6
59162: RET
// export function ComRadiation ( un ) ; var eff ; begin
59163: LD_INT 0
59165: PPUSH
59166: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
59167: LD_VAR 0 1
59171: PPUSH
59172: CALL_OW 264
59176: PUSH
59177: LD_INT 91
59179: NONEQUAL
59180: IFFALSE 59184
// exit ;
59182: GO 59254
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
59184: LD_INT 68
59186: PPUSH
59187: LD_VAR 0 1
59191: PPUSH
59192: CALL_OW 255
59196: PPUSH
59197: CALL_OW 321
59201: PUSH
59202: LD_INT 2
59204: EQUAL
59205: IFFALSE 59217
// eff := 70 else
59207: LD_ADDR_VAR 0 3
59211: PUSH
59212: LD_INT 70
59214: ST_TO_ADDR
59215: GO 59225
// eff := 30 ;
59217: LD_ADDR_VAR 0 3
59221: PUSH
59222: LD_INT 30
59224: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
59225: LD_VAR 0 1
59229: PPUSH
59230: CALL_OW 250
59234: PPUSH
59235: LD_VAR 0 1
59239: PPUSH
59240: CALL_OW 251
59244: PPUSH
59245: LD_VAR 0 3
59249: PPUSH
59250: CALL_OW 495
// end ;
59254: LD_VAR 0 2
59258: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
59259: LD_INT 0
59261: PPUSH
59262: PPUSH
59263: PPUSH
59264: PPUSH
59265: PPUSH
59266: PPUSH
59267: PPUSH
59268: PPUSH
59269: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
59270: LD_VAR 0 1
59274: PPUSH
59275: CALL_OW 302
59279: NOT
59280: PUSH
59281: LD_VAR 0 2
59285: PPUSH
59286: LD_VAR 0 3
59290: PPUSH
59291: CALL_OW 488
59295: NOT
59296: OR
59297: PUSH
59298: LD_VAR 0 4
59302: NOT
59303: OR
59304: IFFALSE 59308
// exit ;
59306: GO 59648
// list := [ ] ;
59308: LD_ADDR_VAR 0 13
59312: PUSH
59313: EMPTY
59314: ST_TO_ADDR
// if x - r < 0 then
59315: LD_VAR 0 2
59319: PUSH
59320: LD_VAR 0 4
59324: MINUS
59325: PUSH
59326: LD_INT 0
59328: LESS
59329: IFFALSE 59341
// min_x := 0 else
59331: LD_ADDR_VAR 0 7
59335: PUSH
59336: LD_INT 0
59338: ST_TO_ADDR
59339: GO 59357
// min_x := x - r ;
59341: LD_ADDR_VAR 0 7
59345: PUSH
59346: LD_VAR 0 2
59350: PUSH
59351: LD_VAR 0 4
59355: MINUS
59356: ST_TO_ADDR
// if y - r < 0 then
59357: LD_VAR 0 3
59361: PUSH
59362: LD_VAR 0 4
59366: MINUS
59367: PUSH
59368: LD_INT 0
59370: LESS
59371: IFFALSE 59383
// min_y := 0 else
59373: LD_ADDR_VAR 0 8
59377: PUSH
59378: LD_INT 0
59380: ST_TO_ADDR
59381: GO 59399
// min_y := y - r ;
59383: LD_ADDR_VAR 0 8
59387: PUSH
59388: LD_VAR 0 3
59392: PUSH
59393: LD_VAR 0 4
59397: MINUS
59398: ST_TO_ADDR
// max_x := x + r ;
59399: LD_ADDR_VAR 0 9
59403: PUSH
59404: LD_VAR 0 2
59408: PUSH
59409: LD_VAR 0 4
59413: PLUS
59414: ST_TO_ADDR
// max_y := y + r ;
59415: LD_ADDR_VAR 0 10
59419: PUSH
59420: LD_VAR 0 3
59424: PUSH
59425: LD_VAR 0 4
59429: PLUS
59430: ST_TO_ADDR
// for _x = min_x to max_x do
59431: LD_ADDR_VAR 0 11
59435: PUSH
59436: DOUBLE
59437: LD_VAR 0 7
59441: DEC
59442: ST_TO_ADDR
59443: LD_VAR 0 9
59447: PUSH
59448: FOR_TO
59449: IFFALSE 59566
// for _y = min_y to max_y do
59451: LD_ADDR_VAR 0 12
59455: PUSH
59456: DOUBLE
59457: LD_VAR 0 8
59461: DEC
59462: ST_TO_ADDR
59463: LD_VAR 0 10
59467: PUSH
59468: FOR_TO
59469: IFFALSE 59562
// begin if not ValidHex ( _x , _y ) then
59471: LD_VAR 0 11
59475: PPUSH
59476: LD_VAR 0 12
59480: PPUSH
59481: CALL_OW 488
59485: NOT
59486: IFFALSE 59490
// continue ;
59488: GO 59468
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
59490: LD_VAR 0 11
59494: PPUSH
59495: LD_VAR 0 12
59499: PPUSH
59500: CALL_OW 351
59504: PUSH
59505: LD_VAR 0 11
59509: PPUSH
59510: LD_VAR 0 12
59514: PPUSH
59515: CALL_OW 554
59519: AND
59520: IFFALSE 59560
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
59522: LD_ADDR_VAR 0 13
59526: PUSH
59527: LD_VAR 0 13
59531: PPUSH
59532: LD_VAR 0 13
59536: PUSH
59537: LD_INT 1
59539: PLUS
59540: PPUSH
59541: LD_VAR 0 11
59545: PUSH
59546: LD_VAR 0 12
59550: PUSH
59551: EMPTY
59552: LIST
59553: LIST
59554: PPUSH
59555: CALL_OW 2
59559: ST_TO_ADDR
// end ;
59560: GO 59468
59562: POP
59563: POP
59564: GO 59448
59566: POP
59567: POP
// if not list then
59568: LD_VAR 0 13
59572: NOT
59573: IFFALSE 59577
// exit ;
59575: GO 59648
// for i in list do
59577: LD_ADDR_VAR 0 6
59581: PUSH
59582: LD_VAR 0 13
59586: PUSH
59587: FOR_IN
59588: IFFALSE 59646
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
59590: LD_VAR 0 1
59594: PPUSH
59595: LD_STRING M
59597: PUSH
59598: LD_VAR 0 6
59602: PUSH
59603: LD_INT 1
59605: ARRAY
59606: PUSH
59607: LD_VAR 0 6
59611: PUSH
59612: LD_INT 2
59614: ARRAY
59615: PUSH
59616: LD_INT 0
59618: PUSH
59619: LD_INT 0
59621: PUSH
59622: LD_INT 0
59624: PUSH
59625: LD_INT 0
59627: PUSH
59628: EMPTY
59629: LIST
59630: LIST
59631: LIST
59632: LIST
59633: LIST
59634: LIST
59635: LIST
59636: PUSH
59637: EMPTY
59638: LIST
59639: PPUSH
59640: CALL_OW 447
59644: GO 59587
59646: POP
59647: POP
// end ;
59648: LD_VAR 0 5
59652: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
59653: LD_INT 0
59655: PPUSH
59656: PPUSH
59657: PPUSH
59658: PPUSH
59659: PPUSH
59660: PPUSH
59661: PPUSH
59662: PPUSH
59663: PPUSH
59664: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
59665: LD_VAR 0 1
59669: PPUSH
59670: CALL_OW 302
59674: NOT
59675: PUSH
59676: LD_VAR 0 2
59680: PPUSH
59681: LD_VAR 0 3
59685: PPUSH
59686: CALL_OW 488
59690: NOT
59691: OR
59692: PUSH
59693: LD_VAR 0 4
59697: NOT
59698: OR
59699: IFFALSE 59703
// exit ;
59701: GO 60216
// list := [ ] ;
59703: LD_ADDR_VAR 0 13
59707: PUSH
59708: EMPTY
59709: ST_TO_ADDR
// if x - r < 0 then
59710: LD_VAR 0 2
59714: PUSH
59715: LD_VAR 0 4
59719: MINUS
59720: PUSH
59721: LD_INT 0
59723: LESS
59724: IFFALSE 59736
// min_x := 0 else
59726: LD_ADDR_VAR 0 7
59730: PUSH
59731: LD_INT 0
59733: ST_TO_ADDR
59734: GO 59752
// min_x := x - r ;
59736: LD_ADDR_VAR 0 7
59740: PUSH
59741: LD_VAR 0 2
59745: PUSH
59746: LD_VAR 0 4
59750: MINUS
59751: ST_TO_ADDR
// if y - r < 0 then
59752: LD_VAR 0 3
59756: PUSH
59757: LD_VAR 0 4
59761: MINUS
59762: PUSH
59763: LD_INT 0
59765: LESS
59766: IFFALSE 59778
// min_y := 0 else
59768: LD_ADDR_VAR 0 8
59772: PUSH
59773: LD_INT 0
59775: ST_TO_ADDR
59776: GO 59794
// min_y := y - r ;
59778: LD_ADDR_VAR 0 8
59782: PUSH
59783: LD_VAR 0 3
59787: PUSH
59788: LD_VAR 0 4
59792: MINUS
59793: ST_TO_ADDR
// max_x := x + r ;
59794: LD_ADDR_VAR 0 9
59798: PUSH
59799: LD_VAR 0 2
59803: PUSH
59804: LD_VAR 0 4
59808: PLUS
59809: ST_TO_ADDR
// max_y := y + r ;
59810: LD_ADDR_VAR 0 10
59814: PUSH
59815: LD_VAR 0 3
59819: PUSH
59820: LD_VAR 0 4
59824: PLUS
59825: ST_TO_ADDR
// for _x = min_x to max_x do
59826: LD_ADDR_VAR 0 11
59830: PUSH
59831: DOUBLE
59832: LD_VAR 0 7
59836: DEC
59837: ST_TO_ADDR
59838: LD_VAR 0 9
59842: PUSH
59843: FOR_TO
59844: IFFALSE 59961
// for _y = min_y to max_y do
59846: LD_ADDR_VAR 0 12
59850: PUSH
59851: DOUBLE
59852: LD_VAR 0 8
59856: DEC
59857: ST_TO_ADDR
59858: LD_VAR 0 10
59862: PUSH
59863: FOR_TO
59864: IFFALSE 59957
// begin if not ValidHex ( _x , _y ) then
59866: LD_VAR 0 11
59870: PPUSH
59871: LD_VAR 0 12
59875: PPUSH
59876: CALL_OW 488
59880: NOT
59881: IFFALSE 59885
// continue ;
59883: GO 59863
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
59885: LD_VAR 0 11
59889: PPUSH
59890: LD_VAR 0 12
59894: PPUSH
59895: CALL_OW 351
59899: PUSH
59900: LD_VAR 0 11
59904: PPUSH
59905: LD_VAR 0 12
59909: PPUSH
59910: CALL_OW 554
59914: AND
59915: IFFALSE 59955
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
59917: LD_ADDR_VAR 0 13
59921: PUSH
59922: LD_VAR 0 13
59926: PPUSH
59927: LD_VAR 0 13
59931: PUSH
59932: LD_INT 1
59934: PLUS
59935: PPUSH
59936: LD_VAR 0 11
59940: PUSH
59941: LD_VAR 0 12
59945: PUSH
59946: EMPTY
59947: LIST
59948: LIST
59949: PPUSH
59950: CALL_OW 2
59954: ST_TO_ADDR
// end ;
59955: GO 59863
59957: POP
59958: POP
59959: GO 59843
59961: POP
59962: POP
// if not list then
59963: LD_VAR 0 13
59967: NOT
59968: IFFALSE 59972
// exit ;
59970: GO 60216
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
59972: LD_ADDR_VAR 0 13
59976: PUSH
59977: LD_VAR 0 1
59981: PPUSH
59982: LD_VAR 0 13
59986: PPUSH
59987: LD_INT 1
59989: PPUSH
59990: LD_INT 1
59992: PPUSH
59993: CALL 20829 0 4
59997: ST_TO_ADDR
// ComStop ( flame ) ;
59998: LD_VAR 0 1
60002: PPUSH
60003: CALL_OW 141
// for i in list do
60007: LD_ADDR_VAR 0 6
60011: PUSH
60012: LD_VAR 0 13
60016: PUSH
60017: FOR_IN
60018: IFFALSE 60049
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
60020: LD_VAR 0 1
60024: PPUSH
60025: LD_VAR 0 6
60029: PUSH
60030: LD_INT 1
60032: ARRAY
60033: PPUSH
60034: LD_VAR 0 6
60038: PUSH
60039: LD_INT 2
60041: ARRAY
60042: PPUSH
60043: CALL_OW 176
60047: GO 60017
60049: POP
60050: POP
// repeat wait ( 0 0$1 ) ;
60051: LD_INT 35
60053: PPUSH
60054: CALL_OW 67
// task := GetTaskList ( flame ) ;
60058: LD_ADDR_VAR 0 14
60062: PUSH
60063: LD_VAR 0 1
60067: PPUSH
60068: CALL_OW 437
60072: ST_TO_ADDR
// if not task then
60073: LD_VAR 0 14
60077: NOT
60078: IFFALSE 60082
// exit ;
60080: GO 60216
// if task [ 1 ] [ 1 ] <> | then
60082: LD_VAR 0 14
60086: PUSH
60087: LD_INT 1
60089: ARRAY
60090: PUSH
60091: LD_INT 1
60093: ARRAY
60094: PUSH
60095: LD_STRING |
60097: NONEQUAL
60098: IFFALSE 60102
// exit ;
60100: GO 60216
// _x := task [ 1 ] [ 2 ] ;
60102: LD_ADDR_VAR 0 11
60106: PUSH
60107: LD_VAR 0 14
60111: PUSH
60112: LD_INT 1
60114: ARRAY
60115: PUSH
60116: LD_INT 2
60118: ARRAY
60119: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
60120: LD_ADDR_VAR 0 12
60124: PUSH
60125: LD_VAR 0 14
60129: PUSH
60130: LD_INT 1
60132: ARRAY
60133: PUSH
60134: LD_INT 3
60136: ARRAY
60137: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
60138: LD_VAR 0 11
60142: PPUSH
60143: LD_VAR 0 12
60147: PPUSH
60148: CALL_OW 351
60152: NOT
60153: PUSH
60154: LD_VAR 0 11
60158: PPUSH
60159: LD_VAR 0 12
60163: PPUSH
60164: CALL_OW 554
60168: NOT
60169: OR
60170: IFFALSE 60204
// begin task := Delete ( task , 1 ) ;
60172: LD_ADDR_VAR 0 14
60176: PUSH
60177: LD_VAR 0 14
60181: PPUSH
60182: LD_INT 1
60184: PPUSH
60185: CALL_OW 3
60189: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
60190: LD_VAR 0 1
60194: PPUSH
60195: LD_VAR 0 14
60199: PPUSH
60200: CALL_OW 446
// end ; until not HasTask ( flame ) ;
60204: LD_VAR 0 1
60208: PPUSH
60209: CALL_OW 314
60213: NOT
60214: IFFALSE 60051
// end ;
60216: LD_VAR 0 5
60220: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
60221: LD_EXP 41
60225: NOT
60226: IFFALSE 60276
60228: GO 60230
60230: DISABLE
// begin initHack := true ;
60231: LD_ADDR_EXP 41
60235: PUSH
60236: LD_INT 1
60238: ST_TO_ADDR
// hackTanks := [ ] ;
60239: LD_ADDR_EXP 42
60243: PUSH
60244: EMPTY
60245: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
60246: LD_ADDR_EXP 43
60250: PUSH
60251: EMPTY
60252: ST_TO_ADDR
// hackLimit := 3 ;
60253: LD_ADDR_EXP 44
60257: PUSH
60258: LD_INT 3
60260: ST_TO_ADDR
// hackDist := 12 ;
60261: LD_ADDR_EXP 45
60265: PUSH
60266: LD_INT 12
60268: ST_TO_ADDR
// hackCounter := [ ] ;
60269: LD_ADDR_EXP 46
60273: PUSH
60274: EMPTY
60275: ST_TO_ADDR
// end ;
60276: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
60277: LD_EXP 41
60281: PUSH
60282: LD_INT 34
60284: PUSH
60285: LD_INT 99
60287: PUSH
60288: EMPTY
60289: LIST
60290: LIST
60291: PPUSH
60292: CALL_OW 69
60296: AND
60297: IFFALSE 60550
60299: GO 60301
60301: DISABLE
60302: LD_INT 0
60304: PPUSH
60305: PPUSH
// begin enable ;
60306: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
60307: LD_ADDR_VAR 0 1
60311: PUSH
60312: LD_INT 34
60314: PUSH
60315: LD_INT 99
60317: PUSH
60318: EMPTY
60319: LIST
60320: LIST
60321: PPUSH
60322: CALL_OW 69
60326: PUSH
60327: FOR_IN
60328: IFFALSE 60548
// begin if not i in hackTanks then
60330: LD_VAR 0 1
60334: PUSH
60335: LD_EXP 42
60339: IN
60340: NOT
60341: IFFALSE 60424
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
60343: LD_ADDR_EXP 42
60347: PUSH
60348: LD_EXP 42
60352: PPUSH
60353: LD_EXP 42
60357: PUSH
60358: LD_INT 1
60360: PLUS
60361: PPUSH
60362: LD_VAR 0 1
60366: PPUSH
60367: CALL_OW 1
60371: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
60372: LD_ADDR_EXP 43
60376: PUSH
60377: LD_EXP 43
60381: PPUSH
60382: LD_EXP 43
60386: PUSH
60387: LD_INT 1
60389: PLUS
60390: PPUSH
60391: EMPTY
60392: PPUSH
60393: CALL_OW 1
60397: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
60398: LD_ADDR_EXP 46
60402: PUSH
60403: LD_EXP 46
60407: PPUSH
60408: LD_EXP 46
60412: PUSH
60413: LD_INT 1
60415: PLUS
60416: PPUSH
60417: EMPTY
60418: PPUSH
60419: CALL_OW 1
60423: ST_TO_ADDR
// end ; if not IsOk ( i ) then
60424: LD_VAR 0 1
60428: PPUSH
60429: CALL_OW 302
60433: NOT
60434: IFFALSE 60447
// begin HackUnlinkAll ( i ) ;
60436: LD_VAR 0 1
60440: PPUSH
60441: CALL 60553 0 1
// continue ;
60445: GO 60327
// end ; HackCheckCapturedStatus ( i ) ;
60447: LD_VAR 0 1
60451: PPUSH
60452: CALL 60996 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
60456: LD_ADDR_VAR 0 2
60460: PUSH
60461: LD_INT 81
60463: PUSH
60464: LD_VAR 0 1
60468: PPUSH
60469: CALL_OW 255
60473: PUSH
60474: EMPTY
60475: LIST
60476: LIST
60477: PUSH
60478: LD_INT 33
60480: PUSH
60481: LD_INT 3
60483: PUSH
60484: EMPTY
60485: LIST
60486: LIST
60487: PUSH
60488: LD_INT 91
60490: PUSH
60491: LD_VAR 0 1
60495: PUSH
60496: LD_EXP 45
60500: PUSH
60501: EMPTY
60502: LIST
60503: LIST
60504: LIST
60505: PUSH
60506: LD_INT 50
60508: PUSH
60509: EMPTY
60510: LIST
60511: PUSH
60512: EMPTY
60513: LIST
60514: LIST
60515: LIST
60516: LIST
60517: PPUSH
60518: CALL_OW 69
60522: ST_TO_ADDR
// if not tmp then
60523: LD_VAR 0 2
60527: NOT
60528: IFFALSE 60532
// continue ;
60530: GO 60327
// HackLink ( i , tmp ) ;
60532: LD_VAR 0 1
60536: PPUSH
60537: LD_VAR 0 2
60541: PPUSH
60542: CALL 60689 0 2
// end ;
60546: GO 60327
60548: POP
60549: POP
// end ;
60550: PPOPN 2
60552: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
60553: LD_INT 0
60555: PPUSH
60556: PPUSH
60557: PPUSH
// if not hack in hackTanks then
60558: LD_VAR 0 1
60562: PUSH
60563: LD_EXP 42
60567: IN
60568: NOT
60569: IFFALSE 60573
// exit ;
60571: GO 60684
// index := GetElementIndex ( hackTanks , hack ) ;
60573: LD_ADDR_VAR 0 4
60577: PUSH
60578: LD_EXP 42
60582: PPUSH
60583: LD_VAR 0 1
60587: PPUSH
60588: CALL 20126 0 2
60592: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
60593: LD_EXP 43
60597: PUSH
60598: LD_VAR 0 4
60602: ARRAY
60603: IFFALSE 60684
// begin for i in hackTanksCaptured [ index ] do
60605: LD_ADDR_VAR 0 3
60609: PUSH
60610: LD_EXP 43
60614: PUSH
60615: LD_VAR 0 4
60619: ARRAY
60620: PUSH
60621: FOR_IN
60622: IFFALSE 60648
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
60624: LD_VAR 0 3
60628: PUSH
60629: LD_INT 1
60631: ARRAY
60632: PPUSH
60633: LD_VAR 0 3
60637: PUSH
60638: LD_INT 2
60640: ARRAY
60641: PPUSH
60642: CALL_OW 235
60646: GO 60621
60648: POP
60649: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
60650: LD_ADDR_EXP 43
60654: PUSH
60655: LD_EXP 43
60659: PPUSH
60660: LD_VAR 0 4
60664: PPUSH
60665: EMPTY
60666: PPUSH
60667: CALL_OW 1
60671: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
60672: LD_VAR 0 1
60676: PPUSH
60677: LD_INT 0
60679: PPUSH
60680: CALL_OW 505
// end ; end ;
60684: LD_VAR 0 2
60688: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
60689: LD_INT 0
60691: PPUSH
60692: PPUSH
60693: PPUSH
// if not hack in hackTanks or not vehicles then
60694: LD_VAR 0 1
60698: PUSH
60699: LD_EXP 42
60703: IN
60704: NOT
60705: PUSH
60706: LD_VAR 0 2
60710: NOT
60711: OR
60712: IFFALSE 60716
// exit ;
60714: GO 60991
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
60716: LD_ADDR_VAR 0 2
60720: PUSH
60721: LD_VAR 0 1
60725: PPUSH
60726: LD_VAR 0 2
60730: PPUSH
60731: LD_INT 1
60733: PPUSH
60734: LD_INT 1
60736: PPUSH
60737: CALL 20776 0 4
60741: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
60742: LD_ADDR_VAR 0 5
60746: PUSH
60747: LD_EXP 42
60751: PPUSH
60752: LD_VAR 0 1
60756: PPUSH
60757: CALL 20126 0 2
60761: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
60762: LD_EXP 43
60766: PUSH
60767: LD_VAR 0 5
60771: ARRAY
60772: PUSH
60773: LD_EXP 44
60777: LESS
60778: IFFALSE 60967
// begin for i := 1 to vehicles do
60780: LD_ADDR_VAR 0 4
60784: PUSH
60785: DOUBLE
60786: LD_INT 1
60788: DEC
60789: ST_TO_ADDR
60790: LD_VAR 0 2
60794: PUSH
60795: FOR_TO
60796: IFFALSE 60965
// begin if hackTanksCaptured [ index ] = hackLimit then
60798: LD_EXP 43
60802: PUSH
60803: LD_VAR 0 5
60807: ARRAY
60808: PUSH
60809: LD_EXP 44
60813: EQUAL
60814: IFFALSE 60818
// break ;
60816: GO 60965
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
60818: LD_ADDR_EXP 46
60822: PUSH
60823: LD_EXP 46
60827: PPUSH
60828: LD_VAR 0 5
60832: PPUSH
60833: LD_EXP 46
60837: PUSH
60838: LD_VAR 0 5
60842: ARRAY
60843: PUSH
60844: LD_INT 1
60846: PLUS
60847: PPUSH
60848: CALL_OW 1
60852: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
60853: LD_ADDR_EXP 43
60857: PUSH
60858: LD_EXP 43
60862: PPUSH
60863: LD_VAR 0 5
60867: PUSH
60868: LD_EXP 43
60872: PUSH
60873: LD_VAR 0 5
60877: ARRAY
60878: PUSH
60879: LD_INT 1
60881: PLUS
60882: PUSH
60883: EMPTY
60884: LIST
60885: LIST
60886: PPUSH
60887: LD_VAR 0 2
60891: PUSH
60892: LD_VAR 0 4
60896: ARRAY
60897: PUSH
60898: LD_VAR 0 2
60902: PUSH
60903: LD_VAR 0 4
60907: ARRAY
60908: PPUSH
60909: CALL_OW 255
60913: PUSH
60914: EMPTY
60915: LIST
60916: LIST
60917: PPUSH
60918: CALL 20341 0 3
60922: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
60923: LD_VAR 0 2
60927: PUSH
60928: LD_VAR 0 4
60932: ARRAY
60933: PPUSH
60934: LD_VAR 0 1
60938: PPUSH
60939: CALL_OW 255
60943: PPUSH
60944: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
60948: LD_VAR 0 2
60952: PUSH
60953: LD_VAR 0 4
60957: ARRAY
60958: PPUSH
60959: CALL_OW 141
// end ;
60963: GO 60795
60965: POP
60966: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
60967: LD_VAR 0 1
60971: PPUSH
60972: LD_EXP 43
60976: PUSH
60977: LD_VAR 0 5
60981: ARRAY
60982: PUSH
60983: LD_INT 0
60985: PLUS
60986: PPUSH
60987: CALL_OW 505
// end ;
60991: LD_VAR 0 3
60995: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
60996: LD_INT 0
60998: PPUSH
60999: PPUSH
61000: PPUSH
61001: PPUSH
// if not hack in hackTanks then
61002: LD_VAR 0 1
61006: PUSH
61007: LD_EXP 42
61011: IN
61012: NOT
61013: IFFALSE 61017
// exit ;
61015: GO 61257
// index := GetElementIndex ( hackTanks , hack ) ;
61017: LD_ADDR_VAR 0 4
61021: PUSH
61022: LD_EXP 42
61026: PPUSH
61027: LD_VAR 0 1
61031: PPUSH
61032: CALL 20126 0 2
61036: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
61037: LD_ADDR_VAR 0 3
61041: PUSH
61042: DOUBLE
61043: LD_EXP 43
61047: PUSH
61048: LD_VAR 0 4
61052: ARRAY
61053: INC
61054: ST_TO_ADDR
61055: LD_INT 1
61057: PUSH
61058: FOR_DOWNTO
61059: IFFALSE 61231
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
61061: LD_ADDR_VAR 0 5
61065: PUSH
61066: LD_EXP 43
61070: PUSH
61071: LD_VAR 0 4
61075: ARRAY
61076: PUSH
61077: LD_VAR 0 3
61081: ARRAY
61082: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
61083: LD_VAR 0 5
61087: PUSH
61088: LD_INT 1
61090: ARRAY
61091: PPUSH
61092: CALL_OW 302
61096: NOT
61097: PUSH
61098: LD_VAR 0 5
61102: PUSH
61103: LD_INT 1
61105: ARRAY
61106: PPUSH
61107: CALL_OW 255
61111: PUSH
61112: LD_VAR 0 1
61116: PPUSH
61117: CALL_OW 255
61121: NONEQUAL
61122: OR
61123: IFFALSE 61229
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
61125: LD_VAR 0 5
61129: PUSH
61130: LD_INT 1
61132: ARRAY
61133: PPUSH
61134: CALL_OW 305
61138: PUSH
61139: LD_VAR 0 5
61143: PUSH
61144: LD_INT 1
61146: ARRAY
61147: PPUSH
61148: CALL_OW 255
61152: PUSH
61153: LD_VAR 0 1
61157: PPUSH
61158: CALL_OW 255
61162: EQUAL
61163: AND
61164: IFFALSE 61188
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
61166: LD_VAR 0 5
61170: PUSH
61171: LD_INT 1
61173: ARRAY
61174: PPUSH
61175: LD_VAR 0 5
61179: PUSH
61180: LD_INT 2
61182: ARRAY
61183: PPUSH
61184: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
61188: LD_ADDR_EXP 43
61192: PUSH
61193: LD_EXP 43
61197: PPUSH
61198: LD_VAR 0 4
61202: PPUSH
61203: LD_EXP 43
61207: PUSH
61208: LD_VAR 0 4
61212: ARRAY
61213: PPUSH
61214: LD_VAR 0 3
61218: PPUSH
61219: CALL_OW 3
61223: PPUSH
61224: CALL_OW 1
61228: ST_TO_ADDR
// end ; end ;
61229: GO 61058
61231: POP
61232: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
61233: LD_VAR 0 1
61237: PPUSH
61238: LD_EXP 43
61242: PUSH
61243: LD_VAR 0 4
61247: ARRAY
61248: PUSH
61249: LD_INT 0
61251: PLUS
61252: PPUSH
61253: CALL_OW 505
// end ;
61257: LD_VAR 0 2
61261: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
61262: LD_INT 0
61264: PPUSH
61265: PPUSH
61266: PPUSH
61267: PPUSH
// if not hack in hackTanks then
61268: LD_VAR 0 1
61272: PUSH
61273: LD_EXP 42
61277: IN
61278: NOT
61279: IFFALSE 61283
// exit ;
61281: GO 61368
// index := GetElementIndex ( hackTanks , hack ) ;
61283: LD_ADDR_VAR 0 5
61287: PUSH
61288: LD_EXP 42
61292: PPUSH
61293: LD_VAR 0 1
61297: PPUSH
61298: CALL 20126 0 2
61302: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
61303: LD_ADDR_VAR 0 4
61307: PUSH
61308: DOUBLE
61309: LD_INT 1
61311: DEC
61312: ST_TO_ADDR
61313: LD_EXP 43
61317: PUSH
61318: LD_VAR 0 5
61322: ARRAY
61323: PUSH
61324: FOR_TO
61325: IFFALSE 61366
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
61327: LD_EXP 43
61331: PUSH
61332: LD_VAR 0 5
61336: ARRAY
61337: PUSH
61338: LD_VAR 0 4
61342: ARRAY
61343: PUSH
61344: LD_INT 1
61346: ARRAY
61347: PUSH
61348: LD_VAR 0 2
61352: EQUAL
61353: IFFALSE 61364
// KillUnit ( vehicle ) ;
61355: LD_VAR 0 2
61359: PPUSH
61360: CALL_OW 66
61364: GO 61324
61366: POP
61367: POP
// end ;
61368: LD_VAR 0 3
61372: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
61373: LD_EXP 47
61377: NOT
61378: IFFALSE 61413
61380: GO 61382
61382: DISABLE
// begin initMiner := true ;
61383: LD_ADDR_EXP 47
61387: PUSH
61388: LD_INT 1
61390: ST_TO_ADDR
// minersList := [ ] ;
61391: LD_ADDR_EXP 48
61395: PUSH
61396: EMPTY
61397: ST_TO_ADDR
// minerMinesList := [ ] ;
61398: LD_ADDR_EXP 49
61402: PUSH
61403: EMPTY
61404: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
61405: LD_ADDR_EXP 50
61409: PUSH
61410: LD_INT 5
61412: ST_TO_ADDR
// end ;
61413: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
61414: LD_EXP 47
61418: PUSH
61419: LD_INT 34
61421: PUSH
61422: LD_INT 81
61424: PUSH
61425: EMPTY
61426: LIST
61427: LIST
61428: PPUSH
61429: CALL_OW 69
61433: AND
61434: IFFALSE 61895
61436: GO 61438
61438: DISABLE
61439: LD_INT 0
61441: PPUSH
61442: PPUSH
61443: PPUSH
61444: PPUSH
// begin enable ;
61445: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
61446: LD_ADDR_VAR 0 1
61450: PUSH
61451: LD_INT 34
61453: PUSH
61454: LD_INT 81
61456: PUSH
61457: EMPTY
61458: LIST
61459: LIST
61460: PPUSH
61461: CALL_OW 69
61465: PUSH
61466: FOR_IN
61467: IFFALSE 61539
// begin if not i in minersList then
61469: LD_VAR 0 1
61473: PUSH
61474: LD_EXP 48
61478: IN
61479: NOT
61480: IFFALSE 61537
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
61482: LD_ADDR_EXP 48
61486: PUSH
61487: LD_EXP 48
61491: PPUSH
61492: LD_EXP 48
61496: PUSH
61497: LD_INT 1
61499: PLUS
61500: PPUSH
61501: LD_VAR 0 1
61505: PPUSH
61506: CALL_OW 1
61510: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
61511: LD_ADDR_EXP 49
61515: PUSH
61516: LD_EXP 49
61520: PPUSH
61521: LD_EXP 49
61525: PUSH
61526: LD_INT 1
61528: PLUS
61529: PPUSH
61530: EMPTY
61531: PPUSH
61532: CALL_OW 1
61536: ST_TO_ADDR
// end end ;
61537: GO 61466
61539: POP
61540: POP
// for i := minerMinesList downto 1 do
61541: LD_ADDR_VAR 0 1
61545: PUSH
61546: DOUBLE
61547: LD_EXP 49
61551: INC
61552: ST_TO_ADDR
61553: LD_INT 1
61555: PUSH
61556: FOR_DOWNTO
61557: IFFALSE 61893
// begin if IsLive ( minersList [ i ] ) then
61559: LD_EXP 48
61563: PUSH
61564: LD_VAR 0 1
61568: ARRAY
61569: PPUSH
61570: CALL_OW 300
61574: IFFALSE 61602
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
61576: LD_EXP 48
61580: PUSH
61581: LD_VAR 0 1
61585: ARRAY
61586: PPUSH
61587: LD_EXP 49
61591: PUSH
61592: LD_VAR 0 1
61596: ARRAY
61597: PPUSH
61598: CALL_OW 505
// if not minerMinesList [ i ] then
61602: LD_EXP 49
61606: PUSH
61607: LD_VAR 0 1
61611: ARRAY
61612: NOT
61613: IFFALSE 61617
// continue ;
61615: GO 61556
// for j := minerMinesList [ i ] downto 1 do
61617: LD_ADDR_VAR 0 2
61621: PUSH
61622: DOUBLE
61623: LD_EXP 49
61627: PUSH
61628: LD_VAR 0 1
61632: ARRAY
61633: INC
61634: ST_TO_ADDR
61635: LD_INT 1
61637: PUSH
61638: FOR_DOWNTO
61639: IFFALSE 61889
// begin side := GetSide ( minersList [ i ] ) ;
61641: LD_ADDR_VAR 0 3
61645: PUSH
61646: LD_EXP 48
61650: PUSH
61651: LD_VAR 0 1
61655: ARRAY
61656: PPUSH
61657: CALL_OW 255
61661: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
61662: LD_ADDR_VAR 0 4
61666: PUSH
61667: LD_EXP 49
61671: PUSH
61672: LD_VAR 0 1
61676: ARRAY
61677: PUSH
61678: LD_VAR 0 2
61682: ARRAY
61683: PUSH
61684: LD_INT 1
61686: ARRAY
61687: PPUSH
61688: LD_EXP 49
61692: PUSH
61693: LD_VAR 0 1
61697: ARRAY
61698: PUSH
61699: LD_VAR 0 2
61703: ARRAY
61704: PUSH
61705: LD_INT 2
61707: ARRAY
61708: PPUSH
61709: CALL_OW 428
61713: ST_TO_ADDR
// if not tmp then
61714: LD_VAR 0 4
61718: NOT
61719: IFFALSE 61723
// continue ;
61721: GO 61638
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
61723: LD_VAR 0 4
61727: PUSH
61728: LD_INT 81
61730: PUSH
61731: LD_VAR 0 3
61735: PUSH
61736: EMPTY
61737: LIST
61738: LIST
61739: PPUSH
61740: CALL_OW 69
61744: IN
61745: PUSH
61746: LD_EXP 49
61750: PUSH
61751: LD_VAR 0 1
61755: ARRAY
61756: PUSH
61757: LD_VAR 0 2
61761: ARRAY
61762: PUSH
61763: LD_INT 1
61765: ARRAY
61766: PPUSH
61767: LD_EXP 49
61771: PUSH
61772: LD_VAR 0 1
61776: ARRAY
61777: PUSH
61778: LD_VAR 0 2
61782: ARRAY
61783: PUSH
61784: LD_INT 2
61786: ARRAY
61787: PPUSH
61788: CALL_OW 458
61792: AND
61793: IFFALSE 61887
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
61795: LD_EXP 49
61799: PUSH
61800: LD_VAR 0 1
61804: ARRAY
61805: PUSH
61806: LD_VAR 0 2
61810: ARRAY
61811: PUSH
61812: LD_INT 1
61814: ARRAY
61815: PPUSH
61816: LD_EXP 49
61820: PUSH
61821: LD_VAR 0 1
61825: ARRAY
61826: PUSH
61827: LD_VAR 0 2
61831: ARRAY
61832: PUSH
61833: LD_INT 2
61835: ARRAY
61836: PPUSH
61837: LD_VAR 0 3
61841: PPUSH
61842: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
61846: LD_ADDR_EXP 49
61850: PUSH
61851: LD_EXP 49
61855: PPUSH
61856: LD_VAR 0 1
61860: PPUSH
61861: LD_EXP 49
61865: PUSH
61866: LD_VAR 0 1
61870: ARRAY
61871: PPUSH
61872: LD_VAR 0 2
61876: PPUSH
61877: CALL_OW 3
61881: PPUSH
61882: CALL_OW 1
61886: ST_TO_ADDR
// end ; end ;
61887: GO 61638
61889: POP
61890: POP
// end ;
61891: GO 61556
61893: POP
61894: POP
// end ;
61895: PPOPN 4
61897: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
61898: LD_INT 0
61900: PPUSH
61901: PPUSH
// result := false ;
61902: LD_ADDR_VAR 0 4
61906: PUSH
61907: LD_INT 0
61909: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
61910: LD_VAR 0 1
61914: PPUSH
61915: CALL_OW 264
61919: PUSH
61920: LD_INT 81
61922: EQUAL
61923: NOT
61924: IFFALSE 61928
// exit ;
61926: GO 62168
// index := GetElementIndex ( minersList , unit ) ;
61928: LD_ADDR_VAR 0 5
61932: PUSH
61933: LD_EXP 48
61937: PPUSH
61938: LD_VAR 0 1
61942: PPUSH
61943: CALL 20126 0 2
61947: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
61948: LD_EXP 49
61952: PUSH
61953: LD_VAR 0 5
61957: ARRAY
61958: PUSH
61959: LD_EXP 50
61963: GREATEREQUAL
61964: IFFALSE 61968
// exit ;
61966: GO 62168
// ComMoveXY ( unit , x , y ) ;
61968: LD_VAR 0 1
61972: PPUSH
61973: LD_VAR 0 2
61977: PPUSH
61978: LD_VAR 0 3
61982: PPUSH
61983: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
61987: LD_INT 35
61989: PPUSH
61990: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
61994: LD_VAR 0 1
61998: PPUSH
61999: LD_VAR 0 2
62003: PPUSH
62004: LD_VAR 0 3
62008: PPUSH
62009: CALL 51887 0 3
62013: NOT
62014: PUSH
62015: LD_VAR 0 1
62019: PPUSH
62020: CALL_OW 314
62024: AND
62025: IFFALSE 62029
// exit ;
62027: GO 62168
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
62029: LD_VAR 0 2
62033: PPUSH
62034: LD_VAR 0 3
62038: PPUSH
62039: CALL_OW 428
62043: PUSH
62044: LD_VAR 0 1
62048: EQUAL
62049: PUSH
62050: LD_VAR 0 1
62054: PPUSH
62055: CALL_OW 314
62059: NOT
62060: AND
62061: IFFALSE 61987
// PlaySoundXY ( x , y , PlantMine ) ;
62063: LD_VAR 0 2
62067: PPUSH
62068: LD_VAR 0 3
62072: PPUSH
62073: LD_STRING PlantMine
62075: PPUSH
62076: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
62080: LD_VAR 0 2
62084: PPUSH
62085: LD_VAR 0 3
62089: PPUSH
62090: LD_VAR 0 1
62094: PPUSH
62095: CALL_OW 255
62099: PPUSH
62100: LD_INT 0
62102: PPUSH
62103: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
62107: LD_ADDR_EXP 49
62111: PUSH
62112: LD_EXP 49
62116: PPUSH
62117: LD_VAR 0 5
62121: PUSH
62122: LD_EXP 49
62126: PUSH
62127: LD_VAR 0 5
62131: ARRAY
62132: PUSH
62133: LD_INT 1
62135: PLUS
62136: PUSH
62137: EMPTY
62138: LIST
62139: LIST
62140: PPUSH
62141: LD_VAR 0 2
62145: PUSH
62146: LD_VAR 0 3
62150: PUSH
62151: EMPTY
62152: LIST
62153: LIST
62154: PPUSH
62155: CALL 20341 0 3
62159: ST_TO_ADDR
// result := true ;
62160: LD_ADDR_VAR 0 4
62164: PUSH
62165: LD_INT 1
62167: ST_TO_ADDR
// end ;
62168: LD_VAR 0 4
62172: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
62173: LD_INT 0
62175: PPUSH
62176: PPUSH
62177: PPUSH
// if not unit in minersList then
62178: LD_VAR 0 1
62182: PUSH
62183: LD_EXP 48
62187: IN
62188: NOT
62189: IFFALSE 62193
// exit ;
62191: GO 62585
// index := GetElementIndex ( minersList , unit ) ;
62193: LD_ADDR_VAR 0 6
62197: PUSH
62198: LD_EXP 48
62202: PPUSH
62203: LD_VAR 0 1
62207: PPUSH
62208: CALL 20126 0 2
62212: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
62213: LD_ADDR_VAR 0 5
62217: PUSH
62218: DOUBLE
62219: LD_EXP 49
62223: PUSH
62224: LD_VAR 0 6
62228: ARRAY
62229: INC
62230: ST_TO_ADDR
62231: LD_INT 1
62233: PUSH
62234: FOR_DOWNTO
62235: IFFALSE 62396
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
62237: LD_EXP 49
62241: PUSH
62242: LD_VAR 0 6
62246: ARRAY
62247: PUSH
62248: LD_VAR 0 5
62252: ARRAY
62253: PUSH
62254: LD_INT 1
62256: ARRAY
62257: PUSH
62258: LD_VAR 0 2
62262: EQUAL
62263: PUSH
62264: LD_EXP 49
62268: PUSH
62269: LD_VAR 0 6
62273: ARRAY
62274: PUSH
62275: LD_VAR 0 5
62279: ARRAY
62280: PUSH
62281: LD_INT 2
62283: ARRAY
62284: PUSH
62285: LD_VAR 0 3
62289: EQUAL
62290: AND
62291: IFFALSE 62394
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
62293: LD_EXP 49
62297: PUSH
62298: LD_VAR 0 6
62302: ARRAY
62303: PUSH
62304: LD_VAR 0 5
62308: ARRAY
62309: PUSH
62310: LD_INT 1
62312: ARRAY
62313: PPUSH
62314: LD_EXP 49
62318: PUSH
62319: LD_VAR 0 6
62323: ARRAY
62324: PUSH
62325: LD_VAR 0 5
62329: ARRAY
62330: PUSH
62331: LD_INT 2
62333: ARRAY
62334: PPUSH
62335: LD_VAR 0 1
62339: PPUSH
62340: CALL_OW 255
62344: PPUSH
62345: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
62349: LD_ADDR_EXP 49
62353: PUSH
62354: LD_EXP 49
62358: PPUSH
62359: LD_VAR 0 6
62363: PPUSH
62364: LD_EXP 49
62368: PUSH
62369: LD_VAR 0 6
62373: ARRAY
62374: PPUSH
62375: LD_VAR 0 5
62379: PPUSH
62380: CALL_OW 3
62384: PPUSH
62385: CALL_OW 1
62389: ST_TO_ADDR
// exit ;
62390: POP
62391: POP
62392: GO 62585
// end ; end ;
62394: GO 62234
62396: POP
62397: POP
// for i := minerMinesList [ index ] downto 1 do
62398: LD_ADDR_VAR 0 5
62402: PUSH
62403: DOUBLE
62404: LD_EXP 49
62408: PUSH
62409: LD_VAR 0 6
62413: ARRAY
62414: INC
62415: ST_TO_ADDR
62416: LD_INT 1
62418: PUSH
62419: FOR_DOWNTO
62420: IFFALSE 62583
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
62422: LD_EXP 49
62426: PUSH
62427: LD_VAR 0 6
62431: ARRAY
62432: PUSH
62433: LD_VAR 0 5
62437: ARRAY
62438: PUSH
62439: LD_INT 1
62441: ARRAY
62442: PPUSH
62443: LD_EXP 49
62447: PUSH
62448: LD_VAR 0 6
62452: ARRAY
62453: PUSH
62454: LD_VAR 0 5
62458: ARRAY
62459: PUSH
62460: LD_INT 2
62462: ARRAY
62463: PPUSH
62464: LD_VAR 0 2
62468: PPUSH
62469: LD_VAR 0 3
62473: PPUSH
62474: CALL_OW 298
62478: PUSH
62479: LD_INT 6
62481: LESS
62482: IFFALSE 62581
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
62484: LD_EXP 49
62488: PUSH
62489: LD_VAR 0 6
62493: ARRAY
62494: PUSH
62495: LD_VAR 0 5
62499: ARRAY
62500: PUSH
62501: LD_INT 1
62503: ARRAY
62504: PPUSH
62505: LD_EXP 49
62509: PUSH
62510: LD_VAR 0 6
62514: ARRAY
62515: PUSH
62516: LD_VAR 0 5
62520: ARRAY
62521: PUSH
62522: LD_INT 2
62524: ARRAY
62525: PPUSH
62526: LD_VAR 0 1
62530: PPUSH
62531: CALL_OW 255
62535: PPUSH
62536: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
62540: LD_ADDR_EXP 49
62544: PUSH
62545: LD_EXP 49
62549: PPUSH
62550: LD_VAR 0 6
62554: PPUSH
62555: LD_EXP 49
62559: PUSH
62560: LD_VAR 0 6
62564: ARRAY
62565: PPUSH
62566: LD_VAR 0 5
62570: PPUSH
62571: CALL_OW 3
62575: PPUSH
62576: CALL_OW 1
62580: ST_TO_ADDR
// end ; end ;
62581: GO 62419
62583: POP
62584: POP
// end ;
62585: LD_VAR 0 4
62589: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
62590: LD_INT 0
62592: PPUSH
62593: PPUSH
62594: PPUSH
62595: PPUSH
62596: PPUSH
62597: PPUSH
62598: PPUSH
62599: PPUSH
62600: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
62601: LD_VAR 0 1
62605: PPUSH
62606: CALL_OW 264
62610: PUSH
62611: LD_INT 81
62613: EQUAL
62614: NOT
62615: PUSH
62616: LD_VAR 0 1
62620: PUSH
62621: LD_EXP 48
62625: IN
62626: NOT
62627: OR
62628: IFFALSE 62632
// exit ;
62630: GO 62954
// index := GetElementIndex ( minersList , unit ) ;
62632: LD_ADDR_VAR 0 6
62636: PUSH
62637: LD_EXP 48
62641: PPUSH
62642: LD_VAR 0 1
62646: PPUSH
62647: CALL 20126 0 2
62651: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
62652: LD_ADDR_VAR 0 8
62656: PUSH
62657: LD_EXP 50
62661: PUSH
62662: LD_EXP 49
62666: PUSH
62667: LD_VAR 0 6
62671: ARRAY
62672: MINUS
62673: ST_TO_ADDR
// if not minesFreeAmount then
62674: LD_VAR 0 8
62678: NOT
62679: IFFALSE 62683
// exit ;
62681: GO 62954
// tmp := [ ] ;
62683: LD_ADDR_VAR 0 7
62687: PUSH
62688: EMPTY
62689: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
62690: LD_ADDR_VAR 0 5
62694: PUSH
62695: DOUBLE
62696: LD_INT 1
62698: DEC
62699: ST_TO_ADDR
62700: LD_VAR 0 8
62704: PUSH
62705: FOR_TO
62706: IFFALSE 62901
// begin _d := rand ( 0 , 5 ) ;
62708: LD_ADDR_VAR 0 11
62712: PUSH
62713: LD_INT 0
62715: PPUSH
62716: LD_INT 5
62718: PPUSH
62719: CALL_OW 12
62723: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
62724: LD_ADDR_VAR 0 12
62728: PUSH
62729: LD_INT 2
62731: PPUSH
62732: LD_INT 6
62734: PPUSH
62735: CALL_OW 12
62739: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
62740: LD_ADDR_VAR 0 9
62744: PUSH
62745: LD_VAR 0 2
62749: PPUSH
62750: LD_VAR 0 11
62754: PPUSH
62755: LD_VAR 0 12
62759: PPUSH
62760: CALL_OW 272
62764: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
62765: LD_ADDR_VAR 0 10
62769: PUSH
62770: LD_VAR 0 3
62774: PPUSH
62775: LD_VAR 0 11
62779: PPUSH
62780: LD_VAR 0 12
62784: PPUSH
62785: CALL_OW 273
62789: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
62790: LD_VAR 0 9
62794: PPUSH
62795: LD_VAR 0 10
62799: PPUSH
62800: CALL_OW 488
62804: PUSH
62805: LD_VAR 0 9
62809: PUSH
62810: LD_VAR 0 10
62814: PUSH
62815: EMPTY
62816: LIST
62817: LIST
62818: PUSH
62819: LD_VAR 0 7
62823: IN
62824: NOT
62825: AND
62826: PUSH
62827: LD_VAR 0 9
62831: PPUSH
62832: LD_VAR 0 10
62836: PPUSH
62837: CALL_OW 458
62841: NOT
62842: AND
62843: IFFALSE 62885
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
62845: LD_ADDR_VAR 0 7
62849: PUSH
62850: LD_VAR 0 7
62854: PPUSH
62855: LD_VAR 0 7
62859: PUSH
62860: LD_INT 1
62862: PLUS
62863: PPUSH
62864: LD_VAR 0 9
62868: PUSH
62869: LD_VAR 0 10
62873: PUSH
62874: EMPTY
62875: LIST
62876: LIST
62877: PPUSH
62878: CALL_OW 1
62882: ST_TO_ADDR
62883: GO 62899
// i := i - 1 ;
62885: LD_ADDR_VAR 0 5
62889: PUSH
62890: LD_VAR 0 5
62894: PUSH
62895: LD_INT 1
62897: MINUS
62898: ST_TO_ADDR
// end ;
62899: GO 62705
62901: POP
62902: POP
// for i in tmp do
62903: LD_ADDR_VAR 0 5
62907: PUSH
62908: LD_VAR 0 7
62912: PUSH
62913: FOR_IN
62914: IFFALSE 62952
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
62916: LD_VAR 0 1
62920: PPUSH
62921: LD_VAR 0 5
62925: PUSH
62926: LD_INT 1
62928: ARRAY
62929: PPUSH
62930: LD_VAR 0 5
62934: PUSH
62935: LD_INT 2
62937: ARRAY
62938: PPUSH
62939: CALL 61898 0 3
62943: NOT
62944: IFFALSE 62950
// exit ;
62946: POP
62947: POP
62948: GO 62954
62950: GO 62913
62952: POP
62953: POP
// end ;
62954: LD_VAR 0 4
62958: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
62959: LD_INT 0
62961: PPUSH
62962: PPUSH
62963: PPUSH
62964: PPUSH
62965: PPUSH
62966: PPUSH
62967: PPUSH
62968: PPUSH
62969: PPUSH
// if GetClass ( unit ) <> class_sniper then
62970: LD_VAR 0 1
62974: PPUSH
62975: CALL_OW 257
62979: PUSH
62980: LD_INT 5
62982: NONEQUAL
62983: IFFALSE 62987
// exit ;
62985: GO 63453
// dist := 8 ;
62987: LD_ADDR_VAR 0 5
62991: PUSH
62992: LD_INT 8
62994: ST_TO_ADDR
// viewRange := 12 ;
62995: LD_ADDR_VAR 0 8
62999: PUSH
63000: LD_INT 12
63002: ST_TO_ADDR
// side := GetSide ( unit ) ;
63003: LD_ADDR_VAR 0 6
63007: PUSH
63008: LD_VAR 0 1
63012: PPUSH
63013: CALL_OW 255
63017: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
63018: LD_INT 61
63020: PPUSH
63021: LD_VAR 0 6
63025: PPUSH
63026: CALL_OW 321
63030: PUSH
63031: LD_INT 2
63033: EQUAL
63034: IFFALSE 63044
// viewRange := 16 ;
63036: LD_ADDR_VAR 0 8
63040: PUSH
63041: LD_INT 16
63043: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
63044: LD_VAR 0 1
63048: PPUSH
63049: LD_VAR 0 2
63053: PPUSH
63054: LD_VAR 0 3
63058: PPUSH
63059: CALL_OW 297
63063: PUSH
63064: LD_VAR 0 5
63068: GREATER
63069: IFFALSE 63148
// begin ComMoveXY ( unit , x , y ) ;
63071: LD_VAR 0 1
63075: PPUSH
63076: LD_VAR 0 2
63080: PPUSH
63081: LD_VAR 0 3
63085: PPUSH
63086: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
63090: LD_INT 35
63092: PPUSH
63093: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
63097: LD_VAR 0 1
63101: PPUSH
63102: LD_VAR 0 2
63106: PPUSH
63107: LD_VAR 0 3
63111: PPUSH
63112: CALL 51887 0 3
63116: NOT
63117: IFFALSE 63121
// exit ;
63119: GO 63453
// until GetDistUnitXY ( unit , x , y ) < dist ;
63121: LD_VAR 0 1
63125: PPUSH
63126: LD_VAR 0 2
63130: PPUSH
63131: LD_VAR 0 3
63135: PPUSH
63136: CALL_OW 297
63140: PUSH
63141: LD_VAR 0 5
63145: LESS
63146: IFFALSE 63090
// end ; ComTurnXY ( unit , x , y ) ;
63148: LD_VAR 0 1
63152: PPUSH
63153: LD_VAR 0 2
63157: PPUSH
63158: LD_VAR 0 3
63162: PPUSH
63163: CALL_OW 118
// repeat if Multiplayer then
63167: LD_OWVAR 4
63171: IFFALSE 63182
// wait ( 35 ) else
63173: LD_INT 35
63175: PPUSH
63176: CALL_OW 67
63180: GO 63189
// wait ( 5 ) ;
63182: LD_INT 5
63184: PPUSH
63185: CALL_OW 67
// _d := GetDir ( unit ) ;
63189: LD_ADDR_VAR 0 11
63193: PUSH
63194: LD_VAR 0 1
63198: PPUSH
63199: CALL_OW 254
63203: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
63204: LD_ADDR_VAR 0 7
63208: PUSH
63209: LD_VAR 0 1
63213: PPUSH
63214: CALL_OW 250
63218: PPUSH
63219: LD_VAR 0 1
63223: PPUSH
63224: CALL_OW 251
63228: PPUSH
63229: LD_VAR 0 2
63233: PPUSH
63234: LD_VAR 0 3
63238: PPUSH
63239: CALL 54495 0 4
63243: ST_TO_ADDR
// until dir = _d ;
63244: LD_VAR 0 7
63248: PUSH
63249: LD_VAR 0 11
63253: EQUAL
63254: IFFALSE 63167
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
63256: LD_ADDR_VAR 0 9
63260: PUSH
63261: LD_VAR 0 1
63265: PPUSH
63266: CALL_OW 250
63270: PPUSH
63271: LD_VAR 0 7
63275: PPUSH
63276: LD_VAR 0 5
63280: PPUSH
63281: CALL_OW 272
63285: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
63286: LD_ADDR_VAR 0 10
63290: PUSH
63291: LD_VAR 0 1
63295: PPUSH
63296: CALL_OW 251
63300: PPUSH
63301: LD_VAR 0 7
63305: PPUSH
63306: LD_VAR 0 5
63310: PPUSH
63311: CALL_OW 273
63315: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
63316: LD_VAR 0 9
63320: PPUSH
63321: LD_VAR 0 10
63325: PPUSH
63326: CALL_OW 488
63330: NOT
63331: IFFALSE 63335
// exit ;
63333: GO 63453
// ComAnimCustom ( unit , 1 ) ;
63335: LD_VAR 0 1
63339: PPUSH
63340: LD_INT 1
63342: PPUSH
63343: CALL_OW 592
// p := 0 ;
63347: LD_ADDR_VAR 0 12
63351: PUSH
63352: LD_INT 0
63354: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
63355: LD_VAR 0 9
63359: PPUSH
63360: LD_VAR 0 10
63364: PPUSH
63365: LD_VAR 0 6
63369: PPUSH
63370: LD_VAR 0 8
63374: PPUSH
63375: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
63379: LD_INT 35
63381: PPUSH
63382: CALL_OW 67
// p := Inc ( p ) ;
63386: LD_ADDR_VAR 0 12
63390: PUSH
63391: LD_VAR 0 12
63395: PPUSH
63396: CALL 54451 0 1
63400: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
63401: LD_VAR 0 12
63405: PUSH
63406: LD_INT 3
63408: EQUAL
63409: PUSH
63410: LD_VAR 0 1
63414: PPUSH
63415: CALL_OW 302
63419: NOT
63420: OR
63421: PUSH
63422: LD_VAR 0 1
63426: PPUSH
63427: CALL_OW 301
63431: OR
63432: IFFALSE 63379
// RemoveSeeing ( _x , _y , side ) ;
63434: LD_VAR 0 9
63438: PPUSH
63439: LD_VAR 0 10
63443: PPUSH
63444: LD_VAR 0 6
63448: PPUSH
63449: CALL_OW 331
// end ; end_of_file end_of_file
63453: LD_VAR 0 4
63457: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
63458: PPOPN 6
63460: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
63461: CALL 63490 0 0
// end ; end_of_file
63465: PPOPN 1
63467: END
// every 0 0$1 do
63468: GO 63470
63470: DISABLE
// begin enable ;
63471: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
63472: LD_STRING updateTimer(
63474: PUSH
63475: LD_OWVAR 1
63479: STR
63480: PUSH
63481: LD_STRING );
63483: STR
63484: PPUSH
63485: CALL_OW 559
// end ;
63489: END
// export function SOS_MapStart ( ) ; begin
63490: LD_INT 0
63492: PPUSH
// UpdateFactoryWaypoints ( ) ;
63493: CALL 63862 0 0
// UpdateWarehouseGatheringPoints ( ) ;
63497: CALL 64114 0 0
// end ;
63501: LD_VAR 0 1
63505: RET
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
63506: LD_INT 0
63508: PPUSH
// end ;
63509: LD_VAR 0 12
63513: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
63514: LD_INT 0
63516: PPUSH
63517: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
63518: LD_VAR 0 1
63522: NOT
63523: PUSH
63524: LD_VAR 0 2
63528: PPUSH
63529: LD_VAR 0 3
63533: PPUSH
63534: CALL_OW 488
63538: NOT
63539: OR
63540: PUSH
63541: LD_VAR 0 1
63545: PPUSH
63546: CALL_OW 266
63550: PUSH
63551: LD_INT 3
63553: NONEQUAL
63554: PUSH
63555: LD_VAR 0 1
63559: PPUSH
63560: CALL_OW 247
63564: PUSH
63565: LD_INT 1
63567: EQUAL
63568: NOT
63569: AND
63570: OR
63571: IFFALSE 63575
// exit ;
63573: GO 63857
// if GetType ( factory ) = unit_human then
63575: LD_VAR 0 1
63579: PPUSH
63580: CALL_OW 247
63584: PUSH
63585: LD_INT 1
63587: EQUAL
63588: IFFALSE 63605
// factory := IsInUnit ( factory ) ;
63590: LD_ADDR_VAR 0 1
63594: PUSH
63595: LD_VAR 0 1
63599: PPUSH
63600: CALL_OW 310
63604: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
63605: LD_VAR 0 1
63609: PPUSH
63610: CALL_OW 266
63614: PUSH
63615: LD_INT 3
63617: NONEQUAL
63618: IFFALSE 63622
// exit ;
63620: GO 63857
// for i := 1 to Count ( factoryWaypoints ) do
63622: LD_ADDR_VAR 0 5
63626: PUSH
63627: DOUBLE
63628: LD_INT 1
63630: DEC
63631: ST_TO_ADDR
63632: LD_EXP 51
63636: PPUSH
63637: CALL 17481 0 1
63641: PUSH
63642: FOR_TO
63643: IFFALSE 63805
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
63645: LD_VAR 0 2
63649: PPUSH
63650: LD_VAR 0 3
63654: PPUSH
63655: CALL_OW 428
63659: PUSH
63660: LD_EXP 51
63664: PUSH
63665: LD_VAR 0 5
63669: ARRAY
63670: PUSH
63671: LD_INT 2
63673: ARRAY
63674: EQUAL
63675: IFFALSE 63707
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
63677: LD_ADDR_EXP 51
63681: PUSH
63682: LD_EXP 51
63686: PPUSH
63687: LD_VAR 0 5
63691: PPUSH
63692: CALL_OW 3
63696: ST_TO_ADDR
// UpdateFactoryWaypoints ;
63697: CALL 63862 0 0
// exit ;
63701: POP
63702: POP
63703: GO 63857
// end else
63705: GO 63803
// if factory = factoryWaypoints [ i ] [ 2 ] then
63707: LD_VAR 0 1
63711: PUSH
63712: LD_EXP 51
63716: PUSH
63717: LD_VAR 0 5
63721: ARRAY
63722: PUSH
63723: LD_INT 2
63725: ARRAY
63726: EQUAL
63727: IFFALSE 63803
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
63729: LD_ADDR_EXP 51
63733: PUSH
63734: LD_EXP 51
63738: PPUSH
63739: LD_VAR 0 5
63743: PPUSH
63744: CALL_OW 3
63748: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
63749: LD_ADDR_EXP 51
63753: PUSH
63754: LD_EXP 51
63758: PPUSH
63759: LD_VAR 0 1
63763: PPUSH
63764: CALL_OW 255
63768: PUSH
63769: LD_VAR 0 1
63773: PUSH
63774: LD_VAR 0 2
63778: PUSH
63779: LD_VAR 0 3
63783: PUSH
63784: EMPTY
63785: LIST
63786: LIST
63787: LIST
63788: LIST
63789: PPUSH
63790: CALL 53090 0 2
63794: ST_TO_ADDR
// UpdateFactoryWaypoints ;
63795: CALL 63862 0 0
// exit ;
63799: POP
63800: POP
63801: GO 63857
// end ; end ;
63803: GO 63642
63805: POP
63806: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
63807: LD_ADDR_EXP 51
63811: PUSH
63812: LD_EXP 51
63816: PPUSH
63817: LD_VAR 0 1
63821: PPUSH
63822: CALL_OW 255
63826: PUSH
63827: LD_VAR 0 1
63831: PUSH
63832: LD_VAR 0 2
63836: PUSH
63837: LD_VAR 0 3
63841: PUSH
63842: EMPTY
63843: LIST
63844: LIST
63845: LIST
63846: LIST
63847: PPUSH
63848: CALL 53090 0 2
63852: ST_TO_ADDR
// UpdateFactoryWaypoints ;
63853: CALL 63862 0 0
// end ;
63857: LD_VAR 0 4
63861: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
63862: LD_INT 0
63864: PPUSH
63865: PPUSH
63866: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
63867: LD_STRING resetFactoryWaypoint();
63869: PPUSH
63870: CALL_OW 559
// if factoryWaypoints then
63874: LD_EXP 51
63878: IFFALSE 63999
// begin list := factoryWaypoints ;
63880: LD_ADDR_VAR 0 3
63884: PUSH
63885: LD_EXP 51
63889: ST_TO_ADDR
// for i := 1 to list do
63890: LD_ADDR_VAR 0 2
63894: PUSH
63895: DOUBLE
63896: LD_INT 1
63898: DEC
63899: ST_TO_ADDR
63900: LD_VAR 0 3
63904: PUSH
63905: FOR_TO
63906: IFFALSE 63997
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
63908: LD_STRING setFactoryWaypointXY(
63910: PUSH
63911: LD_VAR 0 3
63915: PUSH
63916: LD_VAR 0 2
63920: ARRAY
63921: PUSH
63922: LD_INT 1
63924: ARRAY
63925: STR
63926: PUSH
63927: LD_STRING ,
63929: STR
63930: PUSH
63931: LD_VAR 0 3
63935: PUSH
63936: LD_VAR 0 2
63940: ARRAY
63941: PUSH
63942: LD_INT 2
63944: ARRAY
63945: STR
63946: PUSH
63947: LD_STRING ,
63949: STR
63950: PUSH
63951: LD_VAR 0 3
63955: PUSH
63956: LD_VAR 0 2
63960: ARRAY
63961: PUSH
63962: LD_INT 3
63964: ARRAY
63965: STR
63966: PUSH
63967: LD_STRING ,
63969: STR
63970: PUSH
63971: LD_VAR 0 3
63975: PUSH
63976: LD_VAR 0 2
63980: ARRAY
63981: PUSH
63982: LD_INT 4
63984: ARRAY
63985: STR
63986: PUSH
63987: LD_STRING )
63989: STR
63990: PPUSH
63991: CALL_OW 559
63995: GO 63905
63997: POP
63998: POP
// end ; end ;
63999: LD_VAR 0 1
64003: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
64004: LD_INT 0
64006: PPUSH
// if HexInfo ( x , y ) = warehouse then
64007: LD_VAR 0 2
64011: PPUSH
64012: LD_VAR 0 3
64016: PPUSH
64017: CALL_OW 428
64021: PUSH
64022: LD_VAR 0 1
64026: EQUAL
64027: IFFALSE 64054
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
64029: LD_ADDR_EXP 52
64033: PUSH
64034: LD_EXP 52
64038: PPUSH
64039: LD_VAR 0 1
64043: PPUSH
64044: LD_INT 0
64046: PPUSH
64047: CALL_OW 1
64051: ST_TO_ADDR
64052: GO 64105
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
64054: LD_ADDR_EXP 52
64058: PUSH
64059: LD_EXP 52
64063: PPUSH
64064: LD_VAR 0 1
64068: PPUSH
64069: LD_VAR 0 1
64073: PPUSH
64074: CALL_OW 255
64078: PUSH
64079: LD_VAR 0 1
64083: PUSH
64084: LD_VAR 0 2
64088: PUSH
64089: LD_VAR 0 3
64093: PUSH
64094: EMPTY
64095: LIST
64096: LIST
64097: LIST
64098: LIST
64099: PPUSH
64100: CALL_OW 1
64104: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
64105: CALL 64114 0 0
// end ;
64109: LD_VAR 0 4
64113: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
64114: LD_INT 0
64116: PPUSH
64117: PPUSH
64118: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
64119: LD_STRING resetWarehouseGatheringPoints();
64121: PPUSH
64122: CALL_OW 559
// if warehouseGatheringPoints then
64126: LD_EXP 52
64130: IFFALSE 64256
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
64132: LD_ADDR_VAR 0 3
64136: PUSH
64137: LD_EXP 52
64141: PPUSH
64142: CALL 56852 0 1
64146: ST_TO_ADDR
// for i := 1 to list do
64147: LD_ADDR_VAR 0 2
64151: PUSH
64152: DOUBLE
64153: LD_INT 1
64155: DEC
64156: ST_TO_ADDR
64157: LD_VAR 0 3
64161: PUSH
64162: FOR_TO
64163: IFFALSE 64254
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
64165: LD_STRING setWarehouseGatheringPointXY(
64167: PUSH
64168: LD_VAR 0 3
64172: PUSH
64173: LD_VAR 0 2
64177: ARRAY
64178: PUSH
64179: LD_INT 1
64181: ARRAY
64182: STR
64183: PUSH
64184: LD_STRING ,
64186: STR
64187: PUSH
64188: LD_VAR 0 3
64192: PUSH
64193: LD_VAR 0 2
64197: ARRAY
64198: PUSH
64199: LD_INT 2
64201: ARRAY
64202: STR
64203: PUSH
64204: LD_STRING ,
64206: STR
64207: PUSH
64208: LD_VAR 0 3
64212: PUSH
64213: LD_VAR 0 2
64217: ARRAY
64218: PUSH
64219: LD_INT 3
64221: ARRAY
64222: STR
64223: PUSH
64224: LD_STRING ,
64226: STR
64227: PUSH
64228: LD_VAR 0 3
64232: PUSH
64233: LD_VAR 0 2
64237: ARRAY
64238: PUSH
64239: LD_INT 4
64241: ARRAY
64242: STR
64243: PUSH
64244: LD_STRING )
64246: STR
64247: PPUSH
64248: CALL_OW 559
64252: GO 64162
64254: POP
64255: POP
// end ; end ;
64256: LD_VAR 0 1
64260: RET
