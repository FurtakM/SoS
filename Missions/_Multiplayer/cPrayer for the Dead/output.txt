// starting begin ResetFog ;
   0: CALL_OW 335
// InitHc ;
   4: CALL_OW 19
// InitUc ;
   8: CALL_OW 18
// InitBc ;
  12: CALL_OW 21
// InitVariables ;
  16: CALL 116 0 0
// InitMultiplayer ;
  20: CALL 3864 0 0
// if debug then
  24: LD_EXP 1
  28: IFFALSE 37
// FogOff ( 1 ) ;
  30: LD_INT 1
  32: PPUSH
  33: CALL_OW 344
// PrepareArabian ( Multiplayer_SetBotSide ( 2 ) ) ;
  37: LD_INT 2
  39: PPUSH
  40: CALL 5738 0 1
  44: PPUSH
  45: CALL 1022 0 1
// PrepareConvoys ( Multiplayer_SetBotSide ( 6 ) ) ;
  49: LD_INT 6
  51: PPUSH
  52: CALL 5738 0 1
  56: PPUSH
  57: CALL 12223 0 1
// Multiplayer_Start ;
  61: CALL 7458 0 0
// ResetFog ;
  65: CALL_OW 335
// PlaceSeeing ( 1 , 1 , convoySide , - 32973 ) ;
  69: LD_INT 1
  71: PPUSH
  72: LD_INT 1
  74: PPUSH
  75: LD_EXP 42
  79: PPUSH
  80: LD_INT 32973
  82: NEG
  83: PPUSH
  84: CALL_OW 330
// RemoveSeeing ( 1 , 1 , convoySide ) ;
  88: LD_INT 1
  90: PPUSH
  91: LD_INT 1
  93: PPUSH
  94: LD_EXP 42
  98: PPUSH
  99: CALL_OW 331
// game := true ;
 103: LD_ADDR_EXP 2
 107: PUSH
 108: LD_INT 1
 110: ST_TO_ADDR
// Multiplayer_End ;
 111: CALL 7577 0 0
// end ;
 115: END
// export debug , game , winAllowed , botSides , savedConvoyUnits , blockThread , forestIsCleared , goToUnload ; function InitVariables ; begin
 116: LD_INT 0
 118: PPUSH
// debug := false ;
 119: LD_ADDR_EXP 1
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// botSides := [ 2 , 6 ] ;
 127: LD_ADDR_EXP 4
 131: PUSH
 132: LD_INT 2
 134: PUSH
 135: LD_INT 6
 137: PUSH
 138: EMPTY
 139: LIST
 140: LIST
 141: ST_TO_ADDR
// winAllowed := false ;
 142: LD_ADDR_EXP 3
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// savedConvoyUnits := 0 ;
 150: LD_ADDR_EXP 5
 154: PUSH
 155: LD_INT 0
 157: ST_TO_ADDR
// forestIsCleared := false ;
 158: LD_ADDR_EXP 7
 162: PUSH
 163: LD_INT 0
 165: ST_TO_ADDR
// blockThread := false ;
 166: LD_ADDR_EXP 6
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// goToUnload := [ ] ;
 174: LD_ADDR_EXP 8
 178: PUSH
 179: EMPTY
 180: ST_TO_ADDR
// end ;
 181: LD_VAR 0 1
 185: RET
// every 0 0$01 trigger game and not debug_strings do
 186: LD_EXP 2
 190: PUSH
 191: LD_OWVAR 48
 195: NOT
 196: AND
 197: IFFALSE 213
 199: GO 201
 201: DISABLE
// begin enable ;
 202: ENABLE
// display_strings := Multiplayer_DisplayStrings ( ) ;
 203: LD_ADDR_OWVAR 47
 207: PUSH
 208: CALL 8004 0 0
 212: ST_TO_ADDR
// end ; end_of_file
 213: END
// every 0 0$30 trigger convoyWave in [ [ 6 , 8 , 10 ] [ Difficulty ] , [ 16 , 20 , 24 ] [ Difficulty ] , [ 26 , 30 , 34 ] [ Difficulty ] ] do var i , j , un , veh , skill ;
 214: LD_EXP 41
 218: PUSH
 219: LD_INT 6
 221: PUSH
 222: LD_INT 8
 224: PUSH
 225: LD_INT 10
 227: PUSH
 228: EMPTY
 229: LIST
 230: LIST
 231: LIST
 232: PUSH
 233: LD_OWVAR 67
 237: ARRAY
 238: PUSH
 239: LD_INT 16
 241: PUSH
 242: LD_INT 20
 244: PUSH
 245: LD_INT 24
 247: PUSH
 248: EMPTY
 249: LIST
 250: LIST
 251: LIST
 252: PUSH
 253: LD_OWVAR 67
 257: ARRAY
 258: PUSH
 259: LD_INT 26
 261: PUSH
 262: LD_INT 30
 264: PUSH
 265: LD_INT 34
 267: PUSH
 268: EMPTY
 269: LIST
 270: LIST
 271: LIST
 272: PUSH
 273: LD_OWVAR 67
 277: ARRAY
 278: PUSH
 279: EMPTY
 280: LIST
 281: LIST
 282: LIST
 283: IN
 284: IFFALSE 656
 286: GO 288
 288: DISABLE
 289: LD_INT 0
 291: PPUSH
 292: PPUSH
 293: PPUSH
 294: PPUSH
 295: PPUSH
// begin repeat wait ( 10 ) ;
 296: LD_INT 10
 298: PPUSH
 299: CALL_OW 67
// until not blockThread ;
 303: LD_EXP 6
 307: NOT
 308: IFFALSE 296
// skill := [ 6 , 5 , 4 ] [ Difficulty ] ;
 310: LD_ADDR_VAR 0 5
 314: PUSH
 315: LD_INT 6
 317: PUSH
 318: LD_INT 5
 320: PUSH
 321: LD_INT 4
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: PUSH
 329: LD_OWVAR 67
 333: ARRAY
 334: ST_TO_ADDR
// for i := 1 to 8 do
 335: LD_ADDR_VAR 0 1
 339: PUSH
 340: DOUBLE
 341: LD_INT 1
 343: DEC
 344: ST_TO_ADDR
 345: LD_INT 8
 347: PUSH
 348: FOR_TO
 349: IFFALSE 646
// if multi_sides [ i ] = 2 and not multi_loosers [ i ] then
 351: LD_EXP 15
 355: PUSH
 356: LD_VAR 0 1
 360: ARRAY
 361: PUSH
 362: LD_INT 2
 364: EQUAL
 365: PUSH
 366: LD_EXP 32
 370: PUSH
 371: LD_VAR 0 1
 375: ARRAY
 376: NOT
 377: AND
 378: IFFALSE 644
// begin uc_side := i ;
 380: LD_ADDR_OWVAR 20
 384: PUSH
 385: LD_VAR 0 1
 389: ST_TO_ADDR
// uc_nation := nation_russian ;
 390: LD_ADDR_OWVAR 21
 394: PUSH
 395: LD_INT 3
 397: ST_TO_ADDR
// if i = your_side then
 398: LD_VAR 0 1
 402: PUSH
 403: LD_OWVAR 2
 407: EQUAL
 408: IFFALSE 420
// CenterNowOnXY ( 112 , 172 ) ;
 410: LD_INT 112
 412: PPUSH
 413: LD_INT 172
 415: PPUSH
 416: CALL_OW 86
// PrepareEngineer ( false , skill ) ;
 420: LD_INT 0
 422: PPUSH
 423: LD_VAR 0 5
 427: PPUSH
 428: CALL_OW 382
// un := CreateHuman ;
 432: LD_ADDR_VAR 0 3
 436: PUSH
 437: CALL_OW 44
 441: ST_TO_ADDR
// PlaceUnitArea ( un , southRefArea , false ) ;
 442: LD_VAR 0 3
 446: PPUSH
 447: LD_INT 25
 449: PPUSH
 450: LD_INT 0
 452: PPUSH
 453: CALL_OW 49
// for j := 1 to 2 do
 457: LD_ADDR_VAR 0 2
 461: PUSH
 462: DOUBLE
 463: LD_INT 1
 465: DEC
 466: ST_TO_ADDR
 467: LD_INT 2
 469: PUSH
 470: FOR_TO
 471: IFFALSE 512
// begin PrepareMechanic ( false , skill ) ;
 473: LD_INT 0
 475: PPUSH
 476: LD_VAR 0 5
 480: PPUSH
 481: CALL_OW 383
// un := CreateHuman ;
 485: LD_ADDR_VAR 0 3
 489: PUSH
 490: CALL_OW 44
 494: ST_TO_ADDR
// PlaceUnitArea ( un , southRefArea , false ) ;
 495: LD_VAR 0 3
 499: PPUSH
 500: LD_INT 25
 502: PPUSH
 503: LD_INT 0
 505: PPUSH
 506: CALL_OW 49
// end ;
 510: GO 470
 512: POP
 513: POP
// for j := 1 to 2 do
 514: LD_ADDR_VAR 0 2
 518: PUSH
 519: DOUBLE
 520: LD_INT 1
 522: DEC
 523: ST_TO_ADDR
 524: LD_INT 2
 526: PUSH
 527: FOR_TO
 528: IFFALSE 642
// begin uc_side := i ;
 530: LD_ADDR_OWVAR 20
 534: PUSH
 535: LD_VAR 0 1
 539: ST_TO_ADDR
// uc_nation := nation_russian ;
 540: LD_ADDR_OWVAR 21
 544: PUSH
 545: LD_INT 3
 547: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_gun , 50 ) ;
 548: LD_INT 22
 550: PPUSH
 551: LD_INT 1
 553: PPUSH
 554: LD_INT 1
 556: PPUSH
 557: LD_INT 44
 559: PPUSH
 560: LD_INT 50
 562: PPUSH
 563: CALL 20300 0 5
// veh := CreateVehicle ;
 567: LD_ADDR_VAR 0 4
 571: PUSH
 572: CALL_OW 45
 576: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
 577: LD_VAR 0 4
 581: PPUSH
 582: LD_INT 5
 584: PPUSH
 585: CALL_OW 233
// PrepareMechanic ( false , skill ) ;
 589: LD_INT 0
 591: PPUSH
 592: LD_VAR 0 5
 596: PPUSH
 597: CALL_OW 383
// un := CreateHuman ;
 601: LD_ADDR_VAR 0 3
 605: PUSH
 606: CALL_OW 44
 610: ST_TO_ADDR
// PlaceUnitArea ( veh , southRefArea , false ) ;
 611: LD_VAR 0 4
 615: PPUSH
 616: LD_INT 25
 618: PPUSH
 619: LD_INT 0
 621: PPUSH
 622: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
 626: LD_VAR 0 3
 630: PPUSH
 631: LD_VAR 0 4
 635: PPUSH
 636: CALL_OW 52
// end ;
 640: GO 527
 642: POP
 643: POP
// end ;
 644: GO 348
 646: POP
 647: POP
// wait ( 10 10$0 ) ;
 648: LD_INT 21000
 650: PPUSH
 651: CALL_OW 67
// enable ;
 655: ENABLE
// end ;
 656: PPOPN 5
 658: END
// every 0 0$30 trigger convoyWave in [ [ 12 , 14 , 16 ] [ Difficulty ] , [ 22 , 26 , 30 ] [ Difficulty ] , [ 32 , 36 , 40 ] [ Difficulty ] ] do var i , j , un , veh , skill ;
 659: LD_EXP 41
 663: PUSH
 664: LD_INT 12
 666: PUSH
 667: LD_INT 14
 669: PUSH
 670: LD_INT 16
 672: PUSH
 673: EMPTY
 674: LIST
 675: LIST
 676: LIST
 677: PUSH
 678: LD_OWVAR 67
 682: ARRAY
 683: PUSH
 684: LD_INT 22
 686: PUSH
 687: LD_INT 26
 689: PUSH
 690: LD_INT 30
 692: PUSH
 693: EMPTY
 694: LIST
 695: LIST
 696: LIST
 697: PUSH
 698: LD_OWVAR 67
 702: ARRAY
 703: PUSH
 704: LD_INT 32
 706: PUSH
 707: LD_INT 36
 709: PUSH
 710: LD_INT 40
 712: PUSH
 713: EMPTY
 714: LIST
 715: LIST
 716: LIST
 717: PUSH
 718: LD_OWVAR 67
 722: ARRAY
 723: PUSH
 724: EMPTY
 725: LIST
 726: LIST
 727: LIST
 728: IN
 729: IFFALSE 1019
 731: GO 733
 733: DISABLE
 734: LD_INT 0
 736: PPUSH
 737: PPUSH
 738: PPUSH
 739: PPUSH
 740: PPUSH
// begin repeat wait ( 10 ) ;
 741: LD_INT 10
 743: PPUSH
 744: CALL_OW 67
// until not blockThread ;
 748: LD_EXP 6
 752: NOT
 753: IFFALSE 741
// skill := [ 6 , 5 , 4 ] [ Difficulty ] ;
 755: LD_ADDR_VAR 0 5
 759: PUSH
 760: LD_INT 6
 762: PUSH
 763: LD_INT 5
 765: PUSH
 766: LD_INT 4
 768: PUSH
 769: EMPTY
 770: LIST
 771: LIST
 772: LIST
 773: PUSH
 774: LD_OWVAR 67
 778: ARRAY
 779: ST_TO_ADDR
// for i := 1 to 8 do
 780: LD_ADDR_VAR 0 1
 784: PUSH
 785: DOUBLE
 786: LD_INT 1
 788: DEC
 789: ST_TO_ADDR
 790: LD_INT 8
 792: PUSH
 793: FOR_TO
 794: IFFALSE 1009
// if multi_sides [ i ] = 1 and not multi_loosers [ i ] then
 796: LD_EXP 15
 800: PUSH
 801: LD_VAR 0 1
 805: ARRAY
 806: PUSH
 807: LD_INT 1
 809: EQUAL
 810: PUSH
 811: LD_EXP 32
 815: PUSH
 816: LD_VAR 0 1
 820: ARRAY
 821: NOT
 822: AND
 823: IFFALSE 1007
// begin if i = your_side then
 825: LD_VAR 0 1
 829: PUSH
 830: LD_OWVAR 2
 834: EQUAL
 835: IFFALSE 847
// CenterNowOnXY ( 112 , 172 ) ;
 837: LD_INT 112
 839: PPUSH
 840: LD_INT 172
 842: PPUSH
 843: CALL_OW 86
// for j := 1 to 3 do
 847: LD_ADDR_VAR 0 2
 851: PUSH
 852: DOUBLE
 853: LD_INT 1
 855: DEC
 856: ST_TO_ADDR
 857: LD_INT 3
 859: PUSH
 860: FOR_TO
 861: IFFALSE 1005
// begin uc_side := i ;
 863: LD_ADDR_OWVAR 20
 867: PUSH
 868: LD_VAR 0 1
 872: ST_TO_ADDR
// uc_nation := nation_russian ;
 873: LD_ADDR_OWVAR 21
 877: PUSH
 878: LD_INT 3
 880: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun ] [ i mod 2 + 1 ] , 50 ) ;
 881: LD_INT 22
 883: PPUSH
 884: LD_INT 1
 886: PPUSH
 887: LD_INT 1
 889: PPUSH
 890: LD_INT 44
 892: PUSH
 893: LD_INT 43
 895: PUSH
 896: EMPTY
 897: LIST
 898: LIST
 899: PUSH
 900: LD_VAR 0 1
 904: PUSH
 905: LD_INT 2
 907: MOD
 908: PUSH
 909: LD_INT 1
 911: PLUS
 912: ARRAY
 913: PPUSH
 914: LD_INT 50
 916: PPUSH
 917: CALL 20300 0 5
// veh := CreateVehicle ;
 921: LD_ADDR_VAR 0 4
 925: PUSH
 926: CALL_OW 45
 930: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
 931: LD_VAR 0 4
 935: PPUSH
 936: LD_INT 5
 938: PPUSH
 939: CALL_OW 233
// PrepareMechanic ( false , skill ) ;
 943: LD_INT 0
 945: PPUSH
 946: LD_VAR 0 5
 950: PPUSH
 951: CALL_OW 383
// un := CreateHuman ;
 955: LD_ADDR_VAR 0 3
 959: PUSH
 960: CALL_OW 44
 964: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
 965: LD_INT 35
 967: PPUSH
 968: CALL_OW 67
// until PlaceUnitArea ( veh , southRefArea , false ) ;
 972: LD_VAR 0 4
 976: PPUSH
 977: LD_INT 25
 979: PPUSH
 980: LD_INT 0
 982: PPUSH
 983: CALL_OW 49
 987: IFFALSE 965
// PlaceHumanInUnit ( un , veh ) ;
 989: LD_VAR 0 3
 993: PPUSH
 994: LD_VAR 0 4
 998: PPUSH
 999: CALL_OW 52
// end ;
1003: GO 860
1005: POP
1006: POP
// end ;
1007: GO 793
1009: POP
1010: POP
// wait ( 10 10$0 ) ;
1011: LD_INT 21000
1013: PPUSH
1014: CALL_OW 67
// enable ;
1018: ENABLE
// end ; end_of_file
1019: PPOPN 5
1021: END
// export enemyUnits , enemyMobile , enemyForestGuard , enemySide , arAttackersInf ; export function PrepareArabian ( side ) ; var i , un , skill , veh ; begin
1022: LD_INT 0
1024: PPUSH
1025: PPUSH
1026: PPUSH
1027: PPUSH
1028: PPUSH
// enemySide := side ;
1029: LD_ADDR_EXP 12
1033: PUSH
1034: LD_VAR 0 1
1038: ST_TO_ADDR
// enemyUnits := [ ] ;
1039: LD_ADDR_EXP 9
1043: PUSH
1044: EMPTY
1045: ST_TO_ADDR
// enemyMobile := [ ] ;
1046: LD_ADDR_EXP 10
1050: PUSH
1051: EMPTY
1052: ST_TO_ADDR
// enemyForestGuard := [ ] ;
1053: LD_ADDR_EXP 11
1057: PUSH
1058: EMPTY
1059: ST_TO_ADDR
// arAttackersInf := [ ] ;
1060: LD_ADDR_EXP 13
1064: PUSH
1065: EMPTY
1066: ST_TO_ADDR
// skill := [ 4 , 6 , 8 ] [ Difficulty ] ;
1067: LD_ADDR_VAR 0 5
1071: PUSH
1072: LD_INT 4
1074: PUSH
1075: LD_INT 6
1077: PUSH
1078: LD_INT 8
1080: PUSH
1081: EMPTY
1082: LIST
1083: LIST
1084: LIST
1085: PUSH
1086: LD_OWVAR 67
1090: ARRAY
1091: ST_TO_ADDR
// uc_side := side ;
1092: LD_ADDR_OWVAR 20
1096: PUSH
1097: LD_VAR 0 1
1101: ST_TO_ADDR
// uc_nation := nation_arabian ;
1102: LD_ADDR_OWVAR 21
1106: PUSH
1107: LD_INT 2
1109: ST_TO_ADDR
// for i := 1 to [ 5 , 6 , 7 ] [ Difficulty ] do
1110: LD_ADDR_VAR 0 3
1114: PUSH
1115: DOUBLE
1116: LD_INT 1
1118: DEC
1119: ST_TO_ADDR
1120: LD_INT 5
1122: PUSH
1123: LD_INT 6
1125: PUSH
1126: LD_INT 7
1128: PUSH
1129: EMPTY
1130: LIST
1131: LIST
1132: LIST
1133: PUSH
1134: LD_OWVAR 67
1138: ARRAY
1139: PUSH
1140: FOR_TO
1141: IFFALSE 1228
// begin PrepareSoldier ( false , skill ) ;
1143: LD_INT 0
1145: PPUSH
1146: LD_VAR 0 5
1150: PPUSH
1151: CALL_OW 381
// un := CreateHuman ;
1155: LD_ADDR_VAR 0 4
1159: PUSH
1160: CALL_OW 44
1164: ST_TO_ADDR
// if i mod 2 = 0 then
1165: LD_VAR 0 3
1169: PUSH
1170: LD_INT 2
1172: MOD
1173: PUSH
1174: LD_INT 0
1176: EQUAL
1177: IFFALSE 1191
// SetClass ( un , class_mortar ) ;
1179: LD_VAR 0 4
1183: PPUSH
1184: LD_INT 8
1186: PPUSH
1187: CALL_OW 336
// enemyForestGuard := Join ( enemyForestGuard , un ) ;
1191: LD_ADDR_EXP 11
1195: PUSH
1196: LD_EXP 11
1200: PPUSH
1201: LD_VAR 0 4
1205: PPUSH
1206: CALL 53171 0 2
1210: ST_TO_ADDR
// PlaceUnitArea ( un , forestGuardHill1Area , false ) ;
1211: LD_VAR 0 4
1215: PPUSH
1216: LD_INT 17
1218: PPUSH
1219: LD_INT 0
1221: PPUSH
1222: CALL_OW 49
// end ;
1226: GO 1140
1228: POP
1229: POP
// for i := 1 to 2 do
1230: LD_ADDR_VAR 0 3
1234: PUSH
1235: DOUBLE
1236: LD_INT 1
1238: DEC
1239: ST_TO_ADDR
1240: LD_INT 2
1242: PUSH
1243: FOR_TO
1244: IFFALSE 1305
// begin PrepareScientist ( false , skill ) ;
1246: LD_INT 0
1248: PPUSH
1249: LD_VAR 0 5
1253: PPUSH
1254: CALL_OW 384
// un := CreateHuman ;
1258: LD_ADDR_VAR 0 4
1262: PUSH
1263: CALL_OW 44
1267: ST_TO_ADDR
// enemyForestGuard := Join ( enemyForestGuard , un ) ;
1268: LD_ADDR_EXP 11
1272: PUSH
1273: LD_EXP 11
1277: PPUSH
1278: LD_VAR 0 4
1282: PPUSH
1283: CALL 53171 0 2
1287: ST_TO_ADDR
// PlaceUnitArea ( un , forestGuardHill1Area , false ) ;
1288: LD_VAR 0 4
1292: PPUSH
1293: LD_INT 17
1295: PPUSH
1296: LD_INT 0
1298: PPUSH
1299: CALL_OW 49
// end ;
1303: GO 1243
1305: POP
1306: POP
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
1307: LD_ADDR_VAR 0 3
1311: PUSH
1312: DOUBLE
1313: LD_INT 1
1315: DEC
1316: ST_TO_ADDR
1317: LD_INT 2
1319: PUSH
1320: LD_INT 3
1322: PUSH
1323: LD_INT 3
1325: PUSH
1326: EMPTY
1327: LIST
1328: LIST
1329: LIST
1330: PUSH
1331: LD_OWVAR 67
1335: ARRAY
1336: PUSH
1337: FOR_TO
1338: IFFALSE 1474
// begin PrepareVehicle ( ar_half_tracked , engine_solar , control_manual , ar_gun , 100 ) ;
1340: LD_INT 14
1342: PPUSH
1343: LD_INT 2
1345: PPUSH
1346: LD_INT 1
1348: PPUSH
1349: LD_INT 27
1351: PPUSH
1352: LD_INT 100
1354: PPUSH
1355: CALL 20300 0 5
// veh := CreateVehicle ;
1359: LD_ADDR_VAR 0 6
1363: PUSH
1364: CALL_OW 45
1368: ST_TO_ADDR
// enemyForestGuard := Join ( enemyForestGuard , veh ) ;
1369: LD_ADDR_EXP 11
1373: PUSH
1374: LD_EXP 11
1378: PPUSH
1379: LD_VAR 0 6
1383: PPUSH
1384: CALL 53171 0 2
1388: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
1389: LD_VAR 0 6
1393: PPUSH
1394: LD_INT 5
1396: PPUSH
1397: CALL_OW 233
// PrepareMechanic ( false , skill ) ;
1401: LD_INT 0
1403: PPUSH
1404: LD_VAR 0 5
1408: PPUSH
1409: CALL_OW 383
// un := CreateHuman ;
1413: LD_ADDR_VAR 0 4
1417: PUSH
1418: CALL_OW 44
1422: ST_TO_ADDR
// enemyForestGuard := Join ( enemyForestGuard , un ) ;
1423: LD_ADDR_EXP 11
1427: PUSH
1428: LD_EXP 11
1432: PPUSH
1433: LD_VAR 0 4
1437: PPUSH
1438: CALL 53171 0 2
1442: ST_TO_ADDR
// PlaceUnitArea ( veh , forestGuardHill2Area , false ) ;
1443: LD_VAR 0 6
1447: PPUSH
1448: LD_INT 18
1450: PPUSH
1451: LD_INT 0
1453: PPUSH
1454: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
1458: LD_VAR 0 4
1462: PPUSH
1463: LD_VAR 0 6
1467: PPUSH
1468: CALL_OW 52
// end ;
1472: GO 1337
1474: POP
1475: POP
// for i := 1 to 2 do
1476: LD_ADDR_VAR 0 3
1480: PUSH
1481: DOUBLE
1482: LD_INT 1
1484: DEC
1485: ST_TO_ADDR
1486: LD_INT 2
1488: PUSH
1489: FOR_TO
1490: IFFALSE 1573
// begin PrepareVehicle ( ar_half_tracked , engine_solar , control_manual , ar_cargo_bay , 100 ) ;
1492: LD_INT 14
1494: PPUSH
1495: LD_INT 2
1497: PPUSH
1498: LD_INT 1
1500: PPUSH
1501: LD_INT 32
1503: PPUSH
1504: LD_INT 100
1506: PPUSH
1507: CALL 20300 0 5
// veh := CreateVehicle ;
1511: LD_ADDR_VAR 0 6
1515: PUSH
1516: CALL_OW 45
1520: ST_TO_ADDR
// SetDir ( veh , rand ( 2 , 3 ) ) ;
1521: LD_VAR 0 6
1525: PPUSH
1526: LD_INT 2
1528: PPUSH
1529: LD_INT 3
1531: PPUSH
1532: CALL_OW 12
1536: PPUSH
1537: CALL_OW 233
// PlaceUnitArea ( veh , arOilArea , false ) ;
1541: LD_VAR 0 6
1545: PPUSH
1546: LD_INT 22
1548: PPUSH
1549: LD_INT 0
1551: PPUSH
1552: CALL_OW 49
// SetCargo ( veh , mat_oil , 100 ) ;
1556: LD_VAR 0 6
1560: PPUSH
1561: LD_INT 2
1563: PPUSH
1564: LD_INT 100
1566: PPUSH
1567: CALL_OW 290
// end ;
1571: GO 1489
1573: POP
1574: POP
// end ;
1575: LD_VAR 0 2
1579: RET
// export function PrepareMobileGroup ; var i , veh , un , skill , v ; begin
1580: LD_INT 0
1582: PPUSH
1583: PPUSH
1584: PPUSH
1585: PPUSH
1586: PPUSH
1587: PPUSH
// blockThread := true ;
1588: LD_ADDR_EXP 6
1592: PUSH
1593: LD_INT 1
1595: ST_TO_ADDR
// v := convoyWave div 12 ;
1596: LD_ADDR_VAR 0 6
1600: PUSH
1601: LD_EXP 41
1605: PUSH
1606: LD_INT 12
1608: DIV
1609: ST_TO_ADDR
// skill := [ 4 , 5 , 6 ] [ Difficulty ] + v ;
1610: LD_ADDR_VAR 0 5
1614: PUSH
1615: LD_INT 4
1617: PUSH
1618: LD_INT 5
1620: PUSH
1621: LD_INT 6
1623: PUSH
1624: EMPTY
1625: LIST
1626: LIST
1627: LIST
1628: PUSH
1629: LD_OWVAR 67
1633: ARRAY
1634: PUSH
1635: LD_VAR 0 6
1639: PLUS
1640: ST_TO_ADDR
// if skill > 10 then
1641: LD_VAR 0 5
1645: PUSH
1646: LD_INT 10
1648: GREATER
1649: IFFALSE 1659
// skill := 10 ;
1651: LD_ADDR_VAR 0 5
1655: PUSH
1656: LD_INT 10
1658: ST_TO_ADDR
// if v > 8 then
1659: LD_VAR 0 6
1663: PUSH
1664: LD_INT 8
1666: GREATER
1667: IFFALSE 1677
// v := 8 ;
1669: LD_ADDR_VAR 0 6
1673: PUSH
1674: LD_INT 8
1676: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] + v do
1677: LD_ADDR_VAR 0 2
1681: PUSH
1682: DOUBLE
1683: LD_INT 1
1685: DEC
1686: ST_TO_ADDR
1687: LD_INT 2
1689: PUSH
1690: LD_INT 3
1692: PUSH
1693: LD_INT 3
1695: PUSH
1696: EMPTY
1697: LIST
1698: LIST
1699: LIST
1700: PUSH
1701: LD_OWVAR 67
1705: ARRAY
1706: PUSH
1707: LD_VAR 0 6
1711: PLUS
1712: PUSH
1713: FOR_TO
1714: IFFALSE 1893
// begin uc_side := enemySide ;
1716: LD_ADDR_OWVAR 20
1720: PUSH
1721: LD_EXP 12
1725: ST_TO_ADDR
// uc_nation := nation_arabian ;
1726: LD_ADDR_OWVAR 21
1730: PUSH
1731: LD_INT 2
1733: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , [ ar_gun , ar_gatling_gun ] [ i mod 2 + 1 ] , 100 ) ;
1734: LD_INT 14
1736: PPUSH
1737: LD_INT 1
1739: PPUSH
1740: LD_INT 1
1742: PPUSH
1743: LD_INT 27
1745: PUSH
1746: LD_INT 25
1748: PUSH
1749: EMPTY
1750: LIST
1751: LIST
1752: PUSH
1753: LD_VAR 0 2
1757: PUSH
1758: LD_INT 2
1760: MOD
1761: PUSH
1762: LD_INT 1
1764: PLUS
1765: ARRAY
1766: PPUSH
1767: LD_INT 100
1769: PPUSH
1770: CALL 20300 0 5
// veh := CreateVehicle ;
1774: LD_ADDR_VAR 0 3
1778: PUSH
1779: CALL_OW 45
1783: ST_TO_ADDR
// enemyMobile := Join ( enemyMobile , veh ) ;
1784: LD_ADDR_EXP 10
1788: PUSH
1789: LD_EXP 10
1793: PPUSH
1794: LD_VAR 0 3
1798: PPUSH
1799: CALL 53171 0 2
1803: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1804: LD_VAR 0 3
1808: PPUSH
1809: LD_INT 2
1811: PPUSH
1812: CALL_OW 233
// PrepareMechanic ( false , skill ) ;
1816: LD_INT 0
1818: PPUSH
1819: LD_VAR 0 5
1823: PPUSH
1824: CALL_OW 383
// un := CreateHuman ;
1828: LD_ADDR_VAR 0 4
1832: PUSH
1833: CALL_OW 44
1837: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
1838: LD_INT 35
1840: PPUSH
1841: CALL_OW 67
// until PlaceUnitArea ( veh , arabNorthSpawnArea , false ) ;
1845: LD_VAR 0 3
1849: PPUSH
1850: LD_INT 23
1852: PPUSH
1853: LD_INT 0
1855: PPUSH
1856: CALL_OW 49
1860: IFFALSE 1838
// PlaceHumanInUnit ( un , veh ) ;
1862: LD_VAR 0 4
1866: PPUSH
1867: LD_VAR 0 3
1871: PPUSH
1872: CALL_OW 52
// ComMoveXY ( veh , 104 , 18 ) ;
1876: LD_VAR 0 3
1880: PPUSH
1881: LD_INT 104
1883: PPUSH
1884: LD_INT 18
1886: PPUSH
1887: CALL_OW 111
// end ;
1891: GO 1713
1893: POP
1894: POP
// blockThread := false ;
1895: LD_ADDR_EXP 6
1899: PUSH
1900: LD_INT 0
1902: ST_TO_ADDR
// end ;
1903: LD_VAR 0 1
1907: RET
// export function PrepareMobileGroup2 ; var i , veh , un , skill , v ; begin
1908: LD_INT 0
1910: PPUSH
1911: PPUSH
1912: PPUSH
1913: PPUSH
1914: PPUSH
1915: PPUSH
// blockThread := true ;
1916: LD_ADDR_EXP 6
1920: PUSH
1921: LD_INT 1
1923: ST_TO_ADDR
// v := convoyWave div 12 ;
1924: LD_ADDR_VAR 0 6
1928: PUSH
1929: LD_EXP 41
1933: PUSH
1934: LD_INT 12
1936: DIV
1937: ST_TO_ADDR
// if v > 8 then
1938: LD_VAR 0 6
1942: PUSH
1943: LD_INT 8
1945: GREATER
1946: IFFALSE 1956
// v := 8 ;
1948: LD_ADDR_VAR 0 6
1952: PUSH
1953: LD_INT 8
1955: ST_TO_ADDR
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] + v do
1956: LD_ADDR_VAR 0 2
1960: PUSH
1961: DOUBLE
1962: LD_INT 1
1964: DEC
1965: ST_TO_ADDR
1966: LD_INT 3
1968: PUSH
1969: LD_INT 4
1971: PUSH
1972: LD_INT 5
1974: PUSH
1975: EMPTY
1976: LIST
1977: LIST
1978: LIST
1979: PUSH
1980: LD_OWVAR 67
1984: ARRAY
1985: PUSH
1986: LD_VAR 0 6
1990: PLUS
1991: PUSH
1992: FOR_TO
1993: IFFALSE 2176
// begin uc_side := enemySide ;
1995: LD_ADDR_OWVAR 20
1999: PUSH
2000: LD_EXP 12
2004: ST_TO_ADDR
// uc_nation := nation_arabian ;
2005: LD_ADDR_OWVAR 21
2009: PUSH
2010: LD_INT 2
2012: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , [ ar_gun , ar_gatling_gun , ar_flame_thrower ] [ i mod 3 + 1 ] , 100 ) ;
2013: LD_INT 14
2015: PPUSH
2016: LD_INT 1
2018: PPUSH
2019: LD_INT 1
2021: PPUSH
2022: LD_INT 27
2024: PUSH
2025: LD_INT 25
2027: PUSH
2028: LD_INT 26
2030: PUSH
2031: EMPTY
2032: LIST
2033: LIST
2034: LIST
2035: PUSH
2036: LD_VAR 0 2
2040: PUSH
2041: LD_INT 3
2043: MOD
2044: PUSH
2045: LD_INT 1
2047: PLUS
2048: ARRAY
2049: PPUSH
2050: LD_INT 100
2052: PPUSH
2053: CALL 20300 0 5
// veh := CreateVehicle ;
2057: LD_ADDR_VAR 0 3
2061: PUSH
2062: CALL_OW 45
2066: ST_TO_ADDR
// enemyMobile := Join ( enemyMobile , veh ) ;
2067: LD_ADDR_EXP 10
2071: PUSH
2072: LD_EXP 10
2076: PPUSH
2077: LD_VAR 0 3
2081: PPUSH
2082: CALL 53171 0 2
2086: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2087: LD_VAR 0 3
2091: PPUSH
2092: LD_INT 4
2094: PPUSH
2095: CALL_OW 233
// PrepareMechanic ( false , skill ) ;
2099: LD_INT 0
2101: PPUSH
2102: LD_VAR 0 5
2106: PPUSH
2107: CALL_OW 383
// un := CreateHuman ;
2111: LD_ADDR_VAR 0 4
2115: PUSH
2116: CALL_OW 44
2120: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2121: LD_INT 35
2123: PPUSH
2124: CALL_OW 67
// until PlaceUnitArea ( veh , arabEastSpawnArea , false ) ;
2128: LD_VAR 0 3
2132: PPUSH
2133: LD_INT 14
2135: PPUSH
2136: LD_INT 0
2138: PPUSH
2139: CALL_OW 49
2143: IFFALSE 2121
// PlaceHumanInUnit ( un , veh ) ;
2145: LD_VAR 0 4
2149: PPUSH
2150: LD_VAR 0 3
2154: PPUSH
2155: CALL_OW 52
// ComMoveXY ( veh , 151 , 28 ) ;
2159: LD_VAR 0 3
2163: PPUSH
2164: LD_INT 151
2166: PPUSH
2167: LD_INT 28
2169: PPUSH
2170: CALL_OW 111
// end ;
2174: GO 1992
2176: POP
2177: POP
// blockThread := false ;
2178: LD_ADDR_EXP 6
2182: PUSH
2183: LD_INT 0
2185: ST_TO_ADDR
// end ;
2186: LD_VAR 0 1
2190: RET
// export function ClearRoadInForest ; var i , un , veh , tmp , skill ; begin
2191: LD_INT 0
2193: PPUSH
2194: PPUSH
2195: PPUSH
2196: PPUSH
2197: PPUSH
2198: PPUSH
// blockThread := true ;
2199: LD_ADDR_EXP 6
2203: PUSH
2204: LD_INT 1
2206: ST_TO_ADDR
// skill := [ 4 , 5 , 7 ] [ Difficulty ] ;
2207: LD_ADDR_VAR 0 6
2211: PUSH
2212: LD_INT 4
2214: PUSH
2215: LD_INT 5
2217: PUSH
2218: LD_INT 7
2220: PUSH
2221: EMPTY
2222: LIST
2223: LIST
2224: LIST
2225: PUSH
2226: LD_OWVAR 67
2230: ARRAY
2231: ST_TO_ADDR
// tmp := AreaToList ( forestRoadArea , 0 ) ;
2232: LD_ADDR_VAR 0 5
2236: PUSH
2237: LD_INT 15
2239: PPUSH
2240: LD_INT 0
2242: PPUSH
2243: CALL_OW 517
2247: ST_TO_ADDR
// uc_side := enemySide ;
2248: LD_ADDR_OWVAR 20
2252: PUSH
2253: LD_EXP 12
2257: ST_TO_ADDR
// uc_nation := nation_arabian ;
2258: LD_ADDR_OWVAR 21
2262: PUSH
2263: LD_INT 2
2265: ST_TO_ADDR
// PrepareMechanic ( false , skill ) ;
2266: LD_INT 0
2268: PPUSH
2269: LD_VAR 0 6
2273: PPUSH
2274: CALL_OW 383
// un := CreateHuman ;
2278: LD_ADDR_VAR 0 3
2282: PUSH
2283: CALL_OW 44
2287: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower , 100 ) ;
2288: LD_INT 14
2290: PPUSH
2291: LD_INT 1
2293: PPUSH
2294: LD_INT 1
2296: PPUSH
2297: LD_INT 26
2299: PPUSH
2300: LD_INT 100
2302: PPUSH
2303: CALL 20300 0 5
// veh := CreateVehicle ;
2307: LD_ADDR_VAR 0 4
2311: PUSH
2312: CALL_OW 45
2316: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2317: LD_VAR 0 4
2321: PPUSH
2322: LD_INT 4
2324: PPUSH
2325: CALL_OW 233
// repeat wait ( 0 0$1 ) ;
2329: LD_INT 35
2331: PPUSH
2332: CALL_OW 67
// until PlaceUnitArea ( veh , arabEastSpawnArea , false ) ;
2336: LD_VAR 0 4
2340: PPUSH
2341: LD_INT 14
2343: PPUSH
2344: LD_INT 0
2346: PPUSH
2347: CALL_OW 49
2351: IFFALSE 2329
// PlaceHumanInUnit ( un , veh ) ;
2353: LD_VAR 0 3
2357: PPUSH
2358: LD_VAR 0 4
2362: PPUSH
2363: CALL_OW 52
// blockThread := false ;
2367: LD_ADDR_EXP 6
2371: PUSH
2372: LD_INT 0
2374: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
2375: LD_ADDR_VAR 0 2
2379: PUSH
2380: DOUBLE
2381: LD_INT 1
2383: DEC
2384: ST_TO_ADDR
2385: LD_VAR 0 5
2389: PUSH
2390: LD_INT 1
2392: ARRAY
2393: PUSH
2394: FOR_TO
2395: IFFALSE 2441
// BurnTreeXYR ( veh , tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 7 ) ;
2397: LD_VAR 0 4
2401: PPUSH
2402: LD_VAR 0 5
2406: PUSH
2407: LD_INT 1
2409: ARRAY
2410: PUSH
2411: LD_VAR 0 2
2415: ARRAY
2416: PPUSH
2417: LD_VAR 0 5
2421: PUSH
2422: LD_INT 2
2424: ARRAY
2425: PUSH
2426: LD_VAR 0 2
2430: ARRAY
2431: PPUSH
2432: LD_INT 7
2434: PPUSH
2435: CALL 59820 0 4
2439: GO 2394
2441: POP
2442: POP
// repeat wait ( 0 0$1 ) ;
2443: LD_INT 35
2445: PPUSH
2446: CALL_OW 67
// if IsDead ( veh ) then
2450: LD_VAR 0 4
2454: PPUSH
2455: CALL_OW 301
2459: IFFALSE 2463
// exit ;
2461: GO 2536
// until FilterUnitsInArea ( endOfTheForestArea , [ f_side , enemySide ] ) or not HasTask ( veh ) or not HasTask ( un ) ;
2463: LD_INT 16
2465: PPUSH
2466: LD_INT 22
2468: PUSH
2469: LD_EXP 12
2473: PUSH
2474: EMPTY
2475: LIST
2476: LIST
2477: PPUSH
2478: CALL_OW 70
2482: PUSH
2483: LD_VAR 0 4
2487: PPUSH
2488: CALL_OW 314
2492: NOT
2493: OR
2494: PUSH
2495: LD_VAR 0 3
2499: PPUSH
2500: CALL_OW 314
2504: NOT
2505: OR
2506: IFFALSE 2443
// forestIsCleared := true ;
2508: LD_ADDR_EXP 7
2512: PUSH
2513: LD_INT 1
2515: ST_TO_ADDR
// enemyMobile := Join ( enemyMobile , veh ) ;
2516: LD_ADDR_EXP 10
2520: PUSH
2521: LD_EXP 10
2525: PPUSH
2526: LD_VAR 0 4
2530: PPUSH
2531: CALL 53171 0 2
2535: ST_TO_ADDR
// end ;
2536: LD_VAR 0 1
2540: RET
// export function SendWestGroup ; var i , un , skill ; begin
2541: LD_INT 0
2543: PPUSH
2544: PPUSH
2545: PPUSH
2546: PPUSH
// blockThread := true ;
2547: LD_ADDR_EXP 6
2551: PUSH
2552: LD_INT 1
2554: ST_TO_ADDR
// skill := [ 3 , 5 , 7 ] [ Difficulty ] ;
2555: LD_ADDR_VAR 0 4
2559: PUSH
2560: LD_INT 3
2562: PUSH
2563: LD_INT 5
2565: PUSH
2566: LD_INT 7
2568: PUSH
2569: EMPTY
2570: LIST
2571: LIST
2572: LIST
2573: PUSH
2574: LD_OWVAR 67
2578: ARRAY
2579: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
2580: LD_ADDR_VAR 0 2
2584: PUSH
2585: DOUBLE
2586: LD_INT 1
2588: DEC
2589: ST_TO_ADDR
2590: LD_INT 2
2592: PUSH
2593: LD_INT 3
2595: PUSH
2596: LD_INT 3
2598: PUSH
2599: EMPTY
2600: LIST
2601: LIST
2602: LIST
2603: PUSH
2604: LD_OWVAR 67
2608: ARRAY
2609: PUSH
2610: FOR_TO
2611: IFFALSE 2736
// begin uc_side := enemySide ;
2613: LD_ADDR_OWVAR 20
2617: PUSH
2618: LD_EXP 12
2622: ST_TO_ADDR
// uc_nation := nation_arabian ;
2623: LD_ADDR_OWVAR 21
2627: PUSH
2628: LD_INT 2
2630: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
2631: LD_INT 0
2633: PPUSH
2634: LD_VAR 0 4
2638: PPUSH
2639: CALL_OW 381
// un := CreateHuman ;
2643: LD_ADDR_VAR 0 3
2647: PUSH
2648: CALL_OW 44
2652: ST_TO_ADDR
// if i mod 3 = 0 then
2653: LD_VAR 0 2
2657: PUSH
2658: LD_INT 3
2660: MOD
2661: PUSH
2662: LD_INT 0
2664: EQUAL
2665: IFFALSE 2679
// SetClass ( un , class_mortar ) ;
2667: LD_VAR 0 3
2671: PPUSH
2672: LD_INT 8
2674: PPUSH
2675: CALL_OW 336
// enemyUnits := Join ( enemyUnits , un ) ;
2679: LD_ADDR_EXP 9
2683: PUSH
2684: LD_EXP 9
2688: PPUSH
2689: LD_VAR 0 3
2693: PPUSH
2694: CALL 53171 0 2
2698: ST_TO_ADDR
// PlaceUnitArea ( un , arabWestSpawnArea , false ) ;
2699: LD_VAR 0 3
2703: PPUSH
2704: LD_INT 24
2706: PPUSH
2707: LD_INT 0
2709: PPUSH
2710: CALL_OW 49
// result := Join ( result , un ) ;
2714: LD_ADDR_VAR 0 1
2718: PUSH
2719: LD_VAR 0 1
2723: PPUSH
2724: LD_VAR 0 3
2728: PPUSH
2729: CALL 53171 0 2
2733: ST_TO_ADDR
// end ;
2734: GO 2610
2736: POP
2737: POP
// PrepareScientist ( false , skill ) ;
2738: LD_INT 0
2740: PPUSH
2741: LD_VAR 0 4
2745: PPUSH
2746: CALL_OW 384
// un := CreateHuman ;
2750: LD_ADDR_VAR 0 3
2754: PUSH
2755: CALL_OW 44
2759: ST_TO_ADDR
// enemyUnits := Join ( enemyUnits , un ) ;
2760: LD_ADDR_EXP 9
2764: PUSH
2765: LD_EXP 9
2769: PPUSH
2770: LD_VAR 0 3
2774: PPUSH
2775: CALL 53171 0 2
2779: ST_TO_ADDR
// PlaceUnitArea ( un , arabWestSpawnArea , false ) ;
2780: LD_VAR 0 3
2784: PPUSH
2785: LD_INT 24
2787: PPUSH
2788: LD_INT 0
2790: PPUSH
2791: CALL_OW 49
// result := Join ( result , un ) ;
2795: LD_ADDR_VAR 0 1
2799: PUSH
2800: LD_VAR 0 1
2804: PPUSH
2805: LD_VAR 0 3
2809: PPUSH
2810: CALL 53171 0 2
2814: ST_TO_ADDR
// ComAgressiveMove ( result , 24 , 37 ) ;
2815: LD_VAR 0 1
2819: PPUSH
2820: LD_INT 24
2822: PPUSH
2823: LD_INT 37
2825: PPUSH
2826: CALL_OW 114
// blockThread := false ;
2830: LD_ADDR_EXP 6
2834: PUSH
2835: LD_INT 0
2837: ST_TO_ADDR
// end ;
2838: LD_VAR 0 1
2842: RET
// export function PrepareForestOnslaught ; var i , veh , un , skill , v ; begin
2843: LD_INT 0
2845: PPUSH
2846: PPUSH
2847: PPUSH
2848: PPUSH
2849: PPUSH
2850: PPUSH
// blockThread := true ;
2851: LD_ADDR_EXP 6
2855: PUSH
2856: LD_INT 1
2858: ST_TO_ADDR
// v := convoyWave div 12 ;
2859: LD_ADDR_VAR 0 6
2863: PUSH
2864: LD_EXP 41
2868: PUSH
2869: LD_INT 12
2871: DIV
2872: ST_TO_ADDR
// skill := [ 4 , 5 , 6 ] [ Difficulty ] + v ;
2873: LD_ADDR_VAR 0 5
2877: PUSH
2878: LD_INT 4
2880: PUSH
2881: LD_INT 5
2883: PUSH
2884: LD_INT 6
2886: PUSH
2887: EMPTY
2888: LIST
2889: LIST
2890: LIST
2891: PUSH
2892: LD_OWVAR 67
2896: ARRAY
2897: PUSH
2898: LD_VAR 0 6
2902: PLUS
2903: ST_TO_ADDR
// if skill > 10 then
2904: LD_VAR 0 5
2908: PUSH
2909: LD_INT 10
2911: GREATER
2912: IFFALSE 2922
// skill := 10 ;
2914: LD_ADDR_VAR 0 5
2918: PUSH
2919: LD_INT 10
2921: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
2922: LD_ADDR_VAR 0 2
2926: PUSH
2927: DOUBLE
2928: LD_INT 1
2930: DEC
2931: ST_TO_ADDR
2932: LD_INT 2
2934: PUSH
2935: LD_INT 3
2937: PUSH
2938: LD_INT 3
2940: PUSH
2941: EMPTY
2942: LIST
2943: LIST
2944: LIST
2945: PUSH
2946: LD_OWVAR 67
2950: ARRAY
2951: PUSH
2952: FOR_TO
2953: IFFALSE 3156
// begin uc_side := enemySide ;
2955: LD_ADDR_OWVAR 20
2959: PUSH
2960: LD_EXP 12
2964: ST_TO_ADDR
// uc_nation := nation_arabian ;
2965: LD_ADDR_OWVAR 21
2969: PUSH
2970: LD_INT 2
2972: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , [ ar_gun , ar_radar , ar_light_gun ] [ i mod 3 + 1 ] , 100 ) ;
2973: LD_INT 14
2975: PPUSH
2976: LD_INT 1
2978: PPUSH
2979: LD_INT 1
2981: PPUSH
2982: LD_INT 27
2984: PUSH
2985: LD_INT 30
2987: PUSH
2988: LD_INT 23
2990: PUSH
2991: EMPTY
2992: LIST
2993: LIST
2994: LIST
2995: PUSH
2996: LD_VAR 0 2
3000: PUSH
3001: LD_INT 3
3003: MOD
3004: PUSH
3005: LD_INT 1
3007: PLUS
3008: ARRAY
3009: PPUSH
3010: LD_INT 100
3012: PPUSH
3013: CALL 20300 0 5
// veh := CreateVehicle ;
3017: LD_ADDR_VAR 0 3
3021: PUSH
3022: CALL_OW 45
3026: ST_TO_ADDR
// result := Join ( result , veh ) ;
3027: LD_ADDR_VAR 0 1
3031: PUSH
3032: LD_VAR 0 1
3036: PPUSH
3037: LD_VAR 0 3
3041: PPUSH
3042: CALL 53171 0 2
3046: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
3047: LD_VAR 0 3
3051: PPUSH
3052: LD_INT 4
3054: PPUSH
3055: CALL_OW 233
// PrepareMechanic ( false , skill ) ;
3059: LD_INT 0
3061: PPUSH
3062: LD_VAR 0 5
3066: PPUSH
3067: CALL_OW 383
// un := CreateHuman ;
3071: LD_ADDR_VAR 0 4
3075: PUSH
3076: CALL_OW 44
3080: ST_TO_ADDR
// result := Join ( result , un ) ;
3081: LD_ADDR_VAR 0 1
3085: PUSH
3086: LD_VAR 0 1
3090: PPUSH
3091: LD_VAR 0 4
3095: PPUSH
3096: CALL 53171 0 2
3100: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3101: LD_INT 35
3103: PPUSH
3104: CALL_OW 67
// until PlaceUnitArea ( veh , arabEastSpawnArea , false ) ;
3108: LD_VAR 0 3
3112: PPUSH
3113: LD_INT 14
3115: PPUSH
3116: LD_INT 0
3118: PPUSH
3119: CALL_OW 49
3123: IFFALSE 3101
// PlaceHumanInUnit ( un , veh ) ;
3125: LD_VAR 0 4
3129: PPUSH
3130: LD_VAR 0 3
3134: PPUSH
3135: CALL_OW 52
// ComMoveXY ( veh , 159 , 53 ) ;
3139: LD_VAR 0 3
3143: PPUSH
3144: LD_INT 159
3146: PPUSH
3147: LD_INT 53
3149: PPUSH
3150: CALL_OW 111
// end ;
3154: GO 2952
3156: POP
3157: POP
// blockThread := false ;
3158: LD_ADDR_EXP 6
3162: PUSH
3163: LD_INT 0
3165: ST_TO_ADDR
// end ;
3166: LD_VAR 0 1
3170: RET
// export function SendEastGroup ; var i , un , skill ; begin
3171: LD_INT 0
3173: PPUSH
3174: PPUSH
3175: PPUSH
3176: PPUSH
// blockThread := true ;
3177: LD_ADDR_EXP 6
3181: PUSH
3182: LD_INT 1
3184: ST_TO_ADDR
// skill := [ 3 , 5 , 7 ] [ Difficulty ] ;
3185: LD_ADDR_VAR 0 4
3189: PUSH
3190: LD_INT 3
3192: PUSH
3193: LD_INT 5
3195: PUSH
3196: LD_INT 7
3198: PUSH
3199: EMPTY
3200: LIST
3201: LIST
3202: LIST
3203: PUSH
3204: LD_OWVAR 67
3208: ARRAY
3209: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
3210: LD_ADDR_VAR 0 2
3214: PUSH
3215: DOUBLE
3216: LD_INT 1
3218: DEC
3219: ST_TO_ADDR
3220: LD_INT 4
3222: PUSH
3223: LD_INT 5
3225: PUSH
3226: LD_INT 6
3228: PUSH
3229: EMPTY
3230: LIST
3231: LIST
3232: LIST
3233: PUSH
3234: LD_OWVAR 67
3238: ARRAY
3239: PUSH
3240: FOR_TO
3241: IFFALSE 3346
// begin uc_side := enemySide ;
3243: LD_ADDR_OWVAR 20
3247: PUSH
3248: LD_EXP 12
3252: ST_TO_ADDR
// uc_nation := nation_arabian ;
3253: LD_ADDR_OWVAR 21
3257: PUSH
3258: LD_INT 2
3260: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
3261: LD_INT 0
3263: PPUSH
3264: LD_VAR 0 4
3268: PPUSH
3269: CALL_OW 381
// un := CreateHuman ;
3273: LD_ADDR_VAR 0 3
3277: PUSH
3278: CALL_OW 44
3282: ST_TO_ADDR
// if i mod 3 = 0 then
3283: LD_VAR 0 2
3287: PUSH
3288: LD_INT 3
3290: MOD
3291: PUSH
3292: LD_INT 0
3294: EQUAL
3295: IFFALSE 3309
// SetClass ( un , class_mortar ) ;
3297: LD_VAR 0 3
3301: PPUSH
3302: LD_INT 8
3304: PPUSH
3305: CALL_OW 336
// PlaceUnitArea ( un , arabSouthSpawnArea , false ) ;
3309: LD_VAR 0 3
3313: PPUSH
3314: LD_INT 26
3316: PPUSH
3317: LD_INT 0
3319: PPUSH
3320: CALL_OW 49
// result := Join ( result , un ) ;
3324: LD_ADDR_VAR 0 1
3328: PUSH
3329: LD_VAR 0 1
3333: PPUSH
3334: LD_VAR 0 3
3338: PPUSH
3339: CALL 53171 0 2
3343: ST_TO_ADDR
// end ;
3344: GO 3240
3346: POP
3347: POP
// ComAgressiveMove ( result , 219 , 168 ) ;
3348: LD_VAR 0 1
3352: PPUSH
3353: LD_INT 219
3355: PPUSH
3356: LD_INT 168
3358: PPUSH
3359: CALL_OW 114
// blockThread := false ;
3363: LD_ADDR_EXP 6
3367: PUSH
3368: LD_INT 0
3370: ST_TO_ADDR
// end ;
3371: LD_VAR 0 1
3375: RET
// export function SendNorthGroup ; var i , un , skill , v ; begin
3376: LD_INT 0
3378: PPUSH
3379: PPUSH
3380: PPUSH
3381: PPUSH
3382: PPUSH
// blockThread := true ;
3383: LD_ADDR_EXP 6
3387: PUSH
3388: LD_INT 1
3390: ST_TO_ADDR
// v := convoyWave div 12 ;
3391: LD_ADDR_VAR 0 5
3395: PUSH
3396: LD_EXP 41
3400: PUSH
3401: LD_INT 12
3403: DIV
3404: ST_TO_ADDR
// skill := [ 4 , 5 , 6 ] [ Difficulty ] + v ;
3405: LD_ADDR_VAR 0 4
3409: PUSH
3410: LD_INT 4
3412: PUSH
3413: LD_INT 5
3415: PUSH
3416: LD_INT 6
3418: PUSH
3419: EMPTY
3420: LIST
3421: LIST
3422: LIST
3423: PUSH
3424: LD_OWVAR 67
3428: ARRAY
3429: PUSH
3430: LD_VAR 0 5
3434: PLUS
3435: ST_TO_ADDR
// if skill > 10 then
3436: LD_VAR 0 4
3440: PUSH
3441: LD_INT 10
3443: GREATER
3444: IFFALSE 3454
// skill := 10 ;
3446: LD_ADDR_VAR 0 4
3450: PUSH
3451: LD_INT 10
3453: ST_TO_ADDR
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
3454: LD_ADDR_VAR 0 2
3458: PUSH
3459: DOUBLE
3460: LD_INT 1
3462: DEC
3463: ST_TO_ADDR
3464: LD_INT 3
3466: PUSH
3467: LD_INT 4
3469: PUSH
3470: LD_INT 5
3472: PUSH
3473: EMPTY
3474: LIST
3475: LIST
3476: LIST
3477: PUSH
3478: LD_OWVAR 67
3482: ARRAY
3483: PUSH
3484: FOR_TO
3485: IFFALSE 3590
// begin uc_side := enemySide ;
3487: LD_ADDR_OWVAR 20
3491: PUSH
3492: LD_EXP 12
3496: ST_TO_ADDR
// uc_nation := nation_arabian ;
3497: LD_ADDR_OWVAR 21
3501: PUSH
3502: LD_INT 2
3504: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
3505: LD_INT 0
3507: PPUSH
3508: LD_VAR 0 4
3512: PPUSH
3513: CALL_OW 381
// un := CreateHuman ;
3517: LD_ADDR_VAR 0 3
3521: PUSH
3522: CALL_OW 44
3526: ST_TO_ADDR
// if i mod 3 = 0 then
3527: LD_VAR 0 2
3531: PUSH
3532: LD_INT 3
3534: MOD
3535: PUSH
3536: LD_INT 0
3538: EQUAL
3539: IFFALSE 3553
// SetClass ( un , class_mortar ) ;
3541: LD_VAR 0 3
3545: PPUSH
3546: LD_INT 8
3548: PPUSH
3549: CALL_OW 336
// PlaceUnitArea ( un , arabNorthForestSpawnArea , false ) ;
3553: LD_VAR 0 3
3557: PPUSH
3558: LD_INT 27
3560: PPUSH
3561: LD_INT 0
3563: PPUSH
3564: CALL_OW 49
// result := Join ( result , un ) ;
3568: LD_ADDR_VAR 0 1
3572: PUSH
3573: LD_VAR 0 1
3577: PPUSH
3578: LD_VAR 0 3
3582: PPUSH
3583: CALL 53171 0 2
3587: ST_TO_ADDR
// end ;
3588: GO 3484
3590: POP
3591: POP
// ComAgressiveMove ( result , 77 , 23 ) ;
3592: LD_VAR 0 1
3596: PPUSH
3597: LD_INT 77
3599: PPUSH
3600: LD_INT 23
3602: PPUSH
3603: CALL_OW 114
// blockThread := false ;
3607: LD_ADDR_EXP 6
3611: PUSH
3612: LD_INT 0
3614: ST_TO_ADDR
// end ;
3615: LD_VAR 0 1
3619: RET
// export function SendEastGroup2 ; var i , un , skill , v ; begin
3620: LD_INT 0
3622: PPUSH
3623: PPUSH
3624: PPUSH
3625: PPUSH
3626: PPUSH
// blockThread := true ;
3627: LD_ADDR_EXP 6
3631: PUSH
3632: LD_INT 1
3634: ST_TO_ADDR
// v := convoyWave div 12 ;
3635: LD_ADDR_VAR 0 5
3639: PUSH
3640: LD_EXP 41
3644: PUSH
3645: LD_INT 12
3647: DIV
3648: ST_TO_ADDR
// skill := [ 4 , 5 , 6 ] [ Difficulty ] + v ;
3649: LD_ADDR_VAR 0 4
3653: PUSH
3654: LD_INT 4
3656: PUSH
3657: LD_INT 5
3659: PUSH
3660: LD_INT 6
3662: PUSH
3663: EMPTY
3664: LIST
3665: LIST
3666: LIST
3667: PUSH
3668: LD_OWVAR 67
3672: ARRAY
3673: PUSH
3674: LD_VAR 0 5
3678: PLUS
3679: ST_TO_ADDR
// if skill > 10 then
3680: LD_VAR 0 4
3684: PUSH
3685: LD_INT 10
3687: GREATER
3688: IFFALSE 3698
// skill := 10 ;
3690: LD_ADDR_VAR 0 4
3694: PUSH
3695: LD_INT 10
3697: ST_TO_ADDR
// for i := 1 to [ 3 , 4 , 4 ] [ Difficulty ] do
3698: LD_ADDR_VAR 0 2
3702: PUSH
3703: DOUBLE
3704: LD_INT 1
3706: DEC
3707: ST_TO_ADDR
3708: LD_INT 3
3710: PUSH
3711: LD_INT 4
3713: PUSH
3714: LD_INT 4
3716: PUSH
3717: EMPTY
3718: LIST
3719: LIST
3720: LIST
3721: PUSH
3722: LD_OWVAR 67
3726: ARRAY
3727: PUSH
3728: FOR_TO
3729: IFFALSE 3834
// begin uc_side := enemySide ;
3731: LD_ADDR_OWVAR 20
3735: PUSH
3736: LD_EXP 12
3740: ST_TO_ADDR
// uc_nation := nation_arabian ;
3741: LD_ADDR_OWVAR 21
3745: PUSH
3746: LD_INT 2
3748: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
3749: LD_INT 0
3751: PPUSH
3752: LD_VAR 0 4
3756: PPUSH
3757: CALL_OW 381
// un := CreateHuman ;
3761: LD_ADDR_VAR 0 3
3765: PUSH
3766: CALL_OW 44
3770: ST_TO_ADDR
// if i mod 3 = 0 then
3771: LD_VAR 0 2
3775: PUSH
3776: LD_INT 3
3778: MOD
3779: PUSH
3780: LD_INT 0
3782: EQUAL
3783: IFFALSE 3797
// SetClass ( un , class_mortar ) ;
3785: LD_VAR 0 3
3789: PPUSH
3790: LD_INT 8
3792: PPUSH
3793: CALL_OW 336
// PlaceUnitArea ( un , arabEastForestSpawnArea , false ) ;
3797: LD_VAR 0 3
3801: PPUSH
3802: LD_INT 28
3804: PPUSH
3805: LD_INT 0
3807: PPUSH
3808: CALL_OW 49
// result := Join ( result , un ) ;
3812: LD_ADDR_VAR 0 1
3816: PUSH
3817: LD_VAR 0 1
3821: PPUSH
3822: LD_VAR 0 3
3826: PPUSH
3827: CALL 53171 0 2
3831: ST_TO_ADDR
// end ;
3832: GO 3728
3834: POP
3835: POP
// ComAgressiveMove ( result , 147 , 100 ) ;
3836: LD_VAR 0 1
3840: PPUSH
3841: LD_INT 147
3843: PPUSH
3844: LD_INT 100
3846: PPUSH
3847: CALL_OW 114
// blockThread := false ;
3851: LD_ADDR_EXP 6
3855: PUSH
3856: LD_INT 0
3858: ST_TO_ADDR
// end ; end_of_file
3859: LD_VAR 0 1
3863: RET
// export multi_gametype , multi_sides , multi_side_teams , multi_nations , multi_teams , multi_spec , multi_pos_area , multi_allowed_nations , multi_bots , multi_teamgame , multi_custom_commanders , multi_settings , multi_settings_counter , multi_pep_amount , multi_skill_level , multi_crates_spawn , multi_vehicles , multi_commanders , multi_loosers , multi_players_amount , multi_points_to_victory , multi_buildings ; export mpGameType , mpSidePositions ; export function InitMultiplayer ; var i , j , x , tmp ; begin
3864: LD_INT 0
3866: PPUSH
3867: PPUSH
3868: PPUSH
3869: PPUSH
3870: PPUSH
// mpGameType := GameTypeCoop ;
3871: LD_ADDR_EXP 36
3875: PUSH
3876: LD_INT 4
3878: ST_TO_ADDR
// multi_settings_counter := 5 ;
3879: LD_ADDR_EXP 26
3883: PUSH
3884: LD_INT 5
3886: ST_TO_ADDR
// multi_settings := [ ] ;
3887: LD_ADDR_EXP 25
3891: PUSH
3892: EMPTY
3893: ST_TO_ADDR
// if Multiplayer then
3894: LD_OWVAR 4
3898: IFFALSE 4078
// begin your_side := mp_player_side ;
3900: LD_ADDR_OWVAR 2
3904: PUSH
3905: LD_OWVAR 7
3909: ST_TO_ADDR
// multi_gametype := mp_game_type ;
3910: LD_ADDR_EXP 14
3914: PUSH
3915: LD_OWVAR 6
3919: ST_TO_ADDR
// multi_sides := mp_sides_positions ;
3920: LD_ADDR_EXP 15
3924: PUSH
3925: LD_OWVAR 17
3929: ST_TO_ADDR
// multi_side_teams := mp_sides_teams ;
3930: LD_ADDR_EXP 16
3934: PUSH
3935: LD_OWVAR 15
3939: ST_TO_ADDR
// multi_nations := mp_sides_nations ;
3940: LD_ADDR_EXP 17
3944: PUSH
3945: LD_OWVAR 16
3949: ST_TO_ADDR
// multi_teams := [ [ ] ] ;
3950: LD_ADDR_EXP 18
3954: PUSH
3955: EMPTY
3956: PUSH
3957: EMPTY
3958: LIST
3959: ST_TO_ADDR
// for i in mp_teams do
3960: LD_ADDR_VAR 0 2
3964: PUSH
3965: LD_OWVAR 12
3969: PUSH
3970: FOR_IN
3971: IFFALSE 4014
// if i then
3973: LD_VAR 0 2
3977: IFFALSE 4012
// multi_teams := Replace ( multi_teams , 1 , multi_teams [ 1 ] union i ) ;
3979: LD_ADDR_EXP 18
3983: PUSH
3984: LD_EXP 18
3988: PPUSH
3989: LD_INT 1
3991: PPUSH
3992: LD_EXP 18
3996: PUSH
3997: LD_INT 1
3999: ARRAY
4000: PUSH
4001: LD_VAR 0 2
4005: UNION
4006: PPUSH
4007: CALL_OW 1
4011: ST_TO_ADDR
4012: GO 3970
4014: POP
4015: POP
// for i := 1 to multi_settings_counter do
4016: LD_ADDR_VAR 0 2
4020: PUSH
4021: DOUBLE
4022: LD_INT 1
4024: DEC
4025: ST_TO_ADDR
4026: LD_EXP 26
4030: PUSH
4031: FOR_TO
4032: IFFALSE 4074
// multi_settings := Replace ( multi_settings , multi_settings + 1 , GetMultiplayerSetting ( i ) + 1 ) ;
4034: LD_ADDR_EXP 25
4038: PUSH
4039: LD_EXP 25
4043: PPUSH
4044: LD_EXP 25
4048: PUSH
4049: LD_INT 1
4051: PLUS
4052: PPUSH
4053: LD_VAR 0 2
4057: PPUSH
4058: CALL_OW 426
4062: PUSH
4063: LD_INT 1
4065: PLUS
4066: PPUSH
4067: CALL_OW 1
4071: ST_TO_ADDR
4072: GO 4031
4074: POP
4075: POP
// end else
4076: GO 4260
// begin your_side := 3 ;
4078: LD_ADDR_OWVAR 2
4082: PUSH
4083: LD_INT 3
4085: ST_TO_ADDR
// multi_gametype := 1 ;
4086: LD_ADDR_EXP 14
4090: PUSH
4091: LD_INT 1
4093: ST_TO_ADDR
// multi_sides := [ 0 , 0 , 2 , 0 , 0 , 0 , 1 , 0 ] ;
4094: LD_ADDR_EXP 15
4098: PUSH
4099: LD_INT 0
4101: PUSH
4102: LD_INT 0
4104: PUSH
4105: LD_INT 2
4107: PUSH
4108: LD_INT 0
4110: PUSH
4111: LD_INT 0
4113: PUSH
4114: LD_INT 0
4116: PUSH
4117: LD_INT 1
4119: PUSH
4120: LD_INT 0
4122: PUSH
4123: EMPTY
4124: LIST
4125: LIST
4126: LIST
4127: LIST
4128: LIST
4129: LIST
4130: LIST
4131: LIST
4132: ST_TO_ADDR
// multi_side_teams := [ 0 , 0 , 1 , 0 , 0 , 0 , 1 , 0 ] ;
4133: LD_ADDR_EXP 16
4137: PUSH
4138: LD_INT 0
4140: PUSH
4141: LD_INT 0
4143: PUSH
4144: LD_INT 1
4146: PUSH
4147: LD_INT 0
4149: PUSH
4150: LD_INT 0
4152: PUSH
4153: LD_INT 0
4155: PUSH
4156: LD_INT 1
4158: PUSH
4159: LD_INT 0
4161: PUSH
4162: EMPTY
4163: LIST
4164: LIST
4165: LIST
4166: LIST
4167: LIST
4168: LIST
4169: LIST
4170: LIST
4171: ST_TO_ADDR
// multi_nations := [ 0 , 0 , 3 , 0 , 0 , 0 , 3 , 0 ] ;
4172: LD_ADDR_EXP 17
4176: PUSH
4177: LD_INT 0
4179: PUSH
4180: LD_INT 0
4182: PUSH
4183: LD_INT 3
4185: PUSH
4186: LD_INT 0
4188: PUSH
4189: LD_INT 0
4191: PUSH
4192: LD_INT 0
4194: PUSH
4195: LD_INT 3
4197: PUSH
4198: LD_INT 0
4200: PUSH
4201: EMPTY
4202: LIST
4203: LIST
4204: LIST
4205: LIST
4206: LIST
4207: LIST
4208: LIST
4209: LIST
4210: ST_TO_ADDR
// multi_teams := [ [ 3 , 7 ] ] ;
4211: LD_ADDR_EXP 18
4215: PUSH
4216: LD_INT 3
4218: PUSH
4219: LD_INT 7
4221: PUSH
4222: EMPTY
4223: LIST
4224: LIST
4225: PUSH
4226: EMPTY
4227: LIST
4228: ST_TO_ADDR
// multi_settings := [ 2 , 1 , 4 , 3 , 2 , 4 ] ;
4229: LD_ADDR_EXP 25
4233: PUSH
4234: LD_INT 2
4236: PUSH
4237: LD_INT 1
4239: PUSH
4240: LD_INT 4
4242: PUSH
4243: LD_INT 3
4245: PUSH
4246: LD_INT 2
4248: PUSH
4249: LD_INT 4
4251: PUSH
4252: EMPTY
4253: LIST
4254: LIST
4255: LIST
4256: LIST
4257: LIST
4258: LIST
4259: ST_TO_ADDR
// end ; mpSidePositions := multi_sides ;
4260: LD_ADDR_EXP 37
4264: PUSH
4265: LD_EXP 15
4269: ST_TO_ADDR
// multi_spec := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4270: LD_ADDR_EXP 19
4274: PUSH
4275: LD_INT 0
4277: PUSH
4278: LD_INT 0
4280: PUSH
4281: LD_INT 0
4283: PUSH
4284: LD_INT 0
4286: PUSH
4287: LD_INT 0
4289: PUSH
4290: LD_INT 0
4292: PUSH
4293: LD_INT 0
4295: PUSH
4296: LD_INT 0
4298: PUSH
4299: EMPTY
4300: LIST
4301: LIST
4302: LIST
4303: LIST
4304: LIST
4305: LIST
4306: LIST
4307: LIST
4308: ST_TO_ADDR
// multi_bots := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4309: LD_ADDR_EXP 22
4313: PUSH
4314: LD_INT 0
4316: PUSH
4317: LD_INT 0
4319: PUSH
4320: LD_INT 0
4322: PUSH
4323: LD_INT 0
4325: PUSH
4326: LD_INT 0
4328: PUSH
4329: LD_INT 0
4331: PUSH
4332: LD_INT 0
4334: PUSH
4335: LD_INT 0
4337: PUSH
4338: EMPTY
4339: LIST
4340: LIST
4341: LIST
4342: LIST
4343: LIST
4344: LIST
4345: LIST
4346: LIST
4347: ST_TO_ADDR
// multi_loosers := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4348: LD_ADDR_EXP 32
4352: PUSH
4353: LD_INT 0
4355: PUSH
4356: LD_INT 0
4358: PUSH
4359: LD_INT 0
4361: PUSH
4362: LD_INT 0
4364: PUSH
4365: LD_INT 0
4367: PUSH
4368: LD_INT 0
4370: PUSH
4371: LD_INT 0
4373: PUSH
4374: LD_INT 0
4376: PUSH
4377: EMPTY
4378: LIST
4379: LIST
4380: LIST
4381: LIST
4382: LIST
4383: LIST
4384: LIST
4385: LIST
4386: ST_TO_ADDR
// multi_teamgame := true ;
4387: LD_ADDR_EXP 23
4391: PUSH
4392: LD_INT 1
4394: ST_TO_ADDR
// multi_allowed_nations := [ 3 ] ;
4395: LD_ADDR_EXP 21
4399: PUSH
4400: LD_INT 3
4402: PUSH
4403: EMPTY
4404: LIST
4405: ST_TO_ADDR
// multi_custom_commanders := true ;
4406: LD_ADDR_EXP 24
4410: PUSH
4411: LD_INT 1
4413: ST_TO_ADDR
// multi_commanders := [ ] ;
4414: LD_ADDR_EXP 31
4418: PUSH
4419: EMPTY
4420: ST_TO_ADDR
// multi_players_amount := 0 ;
4421: LD_ADDR_EXP 33
4425: PUSH
4426: LD_INT 0
4428: ST_TO_ADDR
// multi_pos_area := [ [ player1SpawnArea , player1SpawnArea ] , [ player2SpawnArea , player2VehSpawnArea ] ] ;
4429: LD_ADDR_EXP 20
4433: PUSH
4434: LD_INT 3
4436: PUSH
4437: LD_INT 3
4439: PUSH
4440: EMPTY
4441: LIST
4442: LIST
4443: PUSH
4444: LD_INT 4
4446: PUSH
4447: LD_INT 6
4449: PUSH
4450: EMPTY
4451: LIST
4452: LIST
4453: PUSH
4454: EMPTY
4455: LIST
4456: LIST
4457: ST_TO_ADDR
// multi_buildings := [ [ [ b_depot , [ 108 , 110 , 2 ] ] , [ b_bunker , [ 117 , 101 , 3 ] , ru_gun ] , [ b_bunker , [ 124 , 107 , 3 ] , ru_gatling_gun ] , [ b_bunker , [ 94 , 114 , 1 ] , ru_gun ] , [ b_bunker , [ 110 , 94 , 4 ] , ru_gun ] , [ b_oil_mine , [ 126 , 124 , 5 ] ] , [ b_oil_power , [ 101 , 115 , 0 ] ] , [ b_oil_power , [ 125 , 121 , 3 ] ] , [ b_factory , [ 109 , 126 , 0 ] ] , [ b_ext_gun , [ 112 , 129 , 5 ] ] ] , [ [ b_breastwork , [ 95 , 36 , 4 ] ] , [ b_breastwork , [ 116 , 66 , 3 ] ] , [ b_breastwork , [ 157 , 159 , 4 ] ] , [ b_breastwork , [ 75 , 88 , 3 ] ] , [ b_breastwork , [ 63 , 82 , 3 ] ] , [ b_breastwork , [ 106 , 147 , 4 ] ] , [ b_workshop , [ 124 , 164 , 5 ] ] , [ b_armoury , [ 129 , 159 , 4 ] ] , ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
4458: LD_ADDR_EXP 35
4462: PUSH
4463: LD_INT 0
4465: PUSH
4466: LD_INT 108
4468: PUSH
4469: LD_INT 110
4471: PUSH
4472: LD_INT 2
4474: PUSH
4475: EMPTY
4476: LIST
4477: LIST
4478: LIST
4479: PUSH
4480: EMPTY
4481: LIST
4482: LIST
4483: PUSH
4484: LD_INT 32
4486: PUSH
4487: LD_INT 117
4489: PUSH
4490: LD_INT 101
4492: PUSH
4493: LD_INT 3
4495: PUSH
4496: EMPTY
4497: LIST
4498: LIST
4499: LIST
4500: PUSH
4501: LD_INT 44
4503: PUSH
4504: EMPTY
4505: LIST
4506: LIST
4507: LIST
4508: PUSH
4509: LD_INT 32
4511: PUSH
4512: LD_INT 124
4514: PUSH
4515: LD_INT 107
4517: PUSH
4518: LD_INT 3
4520: PUSH
4521: EMPTY
4522: LIST
4523: LIST
4524: LIST
4525: PUSH
4526: LD_INT 43
4528: PUSH
4529: EMPTY
4530: LIST
4531: LIST
4532: LIST
4533: PUSH
4534: LD_INT 32
4536: PUSH
4537: LD_INT 94
4539: PUSH
4540: LD_INT 114
4542: PUSH
4543: LD_INT 1
4545: PUSH
4546: EMPTY
4547: LIST
4548: LIST
4549: LIST
4550: PUSH
4551: LD_INT 44
4553: PUSH
4554: EMPTY
4555: LIST
4556: LIST
4557: LIST
4558: PUSH
4559: LD_INT 32
4561: PUSH
4562: LD_INT 110
4564: PUSH
4565: LD_INT 94
4567: PUSH
4568: LD_INT 4
4570: PUSH
4571: EMPTY
4572: LIST
4573: LIST
4574: LIST
4575: PUSH
4576: LD_INT 44
4578: PUSH
4579: EMPTY
4580: LIST
4581: LIST
4582: LIST
4583: PUSH
4584: LD_INT 29
4586: PUSH
4587: LD_INT 126
4589: PUSH
4590: LD_INT 124
4592: PUSH
4593: LD_INT 5
4595: PUSH
4596: EMPTY
4597: LIST
4598: LIST
4599: LIST
4600: PUSH
4601: EMPTY
4602: LIST
4603: LIST
4604: PUSH
4605: LD_INT 26
4607: PUSH
4608: LD_INT 101
4610: PUSH
4611: LD_INT 115
4613: PUSH
4614: LD_INT 0
4616: PUSH
4617: EMPTY
4618: LIST
4619: LIST
4620: LIST
4621: PUSH
4622: EMPTY
4623: LIST
4624: LIST
4625: PUSH
4626: LD_INT 26
4628: PUSH
4629: LD_INT 125
4631: PUSH
4632: LD_INT 121
4634: PUSH
4635: LD_INT 3
4637: PUSH
4638: EMPTY
4639: LIST
4640: LIST
4641: LIST
4642: PUSH
4643: EMPTY
4644: LIST
4645: LIST
4646: PUSH
4647: LD_INT 3
4649: PUSH
4650: LD_INT 109
4652: PUSH
4653: LD_INT 126
4655: PUSH
4656: LD_INT 0
4658: PUSH
4659: EMPTY
4660: LIST
4661: LIST
4662: LIST
4663: PUSH
4664: EMPTY
4665: LIST
4666: LIST
4667: PUSH
4668: LD_INT 17
4670: PUSH
4671: LD_INT 112
4673: PUSH
4674: LD_INT 129
4676: PUSH
4677: LD_INT 5
4679: PUSH
4680: EMPTY
4681: LIST
4682: LIST
4683: LIST
4684: PUSH
4685: EMPTY
4686: LIST
4687: LIST
4688: PUSH
4689: EMPTY
4690: LIST
4691: LIST
4692: LIST
4693: LIST
4694: LIST
4695: LIST
4696: LIST
4697: LIST
4698: LIST
4699: LIST
4700: PUSH
4701: LD_INT 31
4703: PUSH
4704: LD_INT 95
4706: PUSH
4707: LD_INT 36
4709: PUSH
4710: LD_INT 4
4712: PUSH
4713: EMPTY
4714: LIST
4715: LIST
4716: LIST
4717: PUSH
4718: EMPTY
4719: LIST
4720: LIST
4721: PUSH
4722: LD_INT 31
4724: PUSH
4725: LD_INT 116
4727: PUSH
4728: LD_INT 66
4730: PUSH
4731: LD_INT 3
4733: PUSH
4734: EMPTY
4735: LIST
4736: LIST
4737: LIST
4738: PUSH
4739: EMPTY
4740: LIST
4741: LIST
4742: PUSH
4743: LD_INT 31
4745: PUSH
4746: LD_INT 157
4748: PUSH
4749: LD_INT 159
4751: PUSH
4752: LD_INT 4
4754: PUSH
4755: EMPTY
4756: LIST
4757: LIST
4758: LIST
4759: PUSH
4760: EMPTY
4761: LIST
4762: LIST
4763: PUSH
4764: LD_INT 31
4766: PUSH
4767: LD_INT 75
4769: PUSH
4770: LD_INT 88
4772: PUSH
4773: LD_INT 3
4775: PUSH
4776: EMPTY
4777: LIST
4778: LIST
4779: LIST
4780: PUSH
4781: EMPTY
4782: LIST
4783: LIST
4784: PUSH
4785: LD_INT 31
4787: PUSH
4788: LD_INT 63
4790: PUSH
4791: LD_INT 82
4793: PUSH
4794: LD_INT 3
4796: PUSH
4797: EMPTY
4798: LIST
4799: LIST
4800: LIST
4801: PUSH
4802: EMPTY
4803: LIST
4804: LIST
4805: PUSH
4806: LD_INT 31
4808: PUSH
4809: LD_INT 106
4811: PUSH
4812: LD_INT 147
4814: PUSH
4815: LD_INT 4
4817: PUSH
4818: EMPTY
4819: LIST
4820: LIST
4821: LIST
4822: PUSH
4823: EMPTY
4824: LIST
4825: LIST
4826: PUSH
4827: LD_INT 2
4829: PUSH
4830: LD_INT 124
4832: PUSH
4833: LD_INT 164
4835: PUSH
4836: LD_INT 5
4838: PUSH
4839: EMPTY
4840: LIST
4841: LIST
4842: LIST
4843: PUSH
4844: EMPTY
4845: LIST
4846: LIST
4847: PUSH
4848: LD_INT 4
4850: PUSH
4851: LD_INT 129
4853: PUSH
4854: LD_INT 159
4856: PUSH
4857: LD_INT 4
4859: PUSH
4860: EMPTY
4861: LIST
4862: LIST
4863: LIST
4864: PUSH
4865: EMPTY
4866: LIST
4867: LIST
4868: PUSH
4869: EMPTY
4870: LIST
4871: LIST
4872: LIST
4873: LIST
4874: LIST
4875: LIST
4876: LIST
4877: LIST
4878: PUSH
4879: EMPTY
4880: PUSH
4881: EMPTY
4882: PUSH
4883: EMPTY
4884: PUSH
4885: EMPTY
4886: PUSH
4887: EMPTY
4888: PUSH
4889: EMPTY
4890: PUSH
4891: EMPTY
4892: LIST
4893: LIST
4894: LIST
4895: LIST
4896: LIST
4897: LIST
4898: LIST
4899: LIST
4900: ST_TO_ADDR
// multi_vehicles := [ [ ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_tracked , engine_combustion , control_manual , ru_cargo_bay ] , [ ru_medium_tracked , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun ] [ Difficulty ] ] , [ ru_medium_tracked , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun ] [ Difficulty ] ] , [ ru_medium_tracked , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun ] [ Difficulty ] ] ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
4901: LD_ADDR_EXP 30
4905: PUSH
4906: EMPTY
4907: PUSH
4908: LD_INT 21
4910: PUSH
4911: LD_INT 1
4913: PUSH
4914: LD_INT 1
4916: PUSH
4917: LD_INT 42
4919: PUSH
4920: EMPTY
4921: LIST
4922: LIST
4923: LIST
4924: LIST
4925: PUSH
4926: LD_INT 22
4928: PUSH
4929: LD_INT 1
4931: PUSH
4932: LD_INT 1
4934: PUSH
4935: LD_INT 51
4937: PUSH
4938: EMPTY
4939: LIST
4940: LIST
4941: LIST
4942: LIST
4943: PUSH
4944: LD_INT 22
4946: PUSH
4947: LD_INT 1
4949: PUSH
4950: LD_INT 1
4952: PUSH
4953: LD_INT 44
4955: PUSH
4956: LD_INT 43
4958: PUSH
4959: LD_INT 42
4961: PUSH
4962: EMPTY
4963: LIST
4964: LIST
4965: LIST
4966: PUSH
4967: LD_OWVAR 67
4971: ARRAY
4972: PUSH
4973: EMPTY
4974: LIST
4975: LIST
4976: LIST
4977: LIST
4978: PUSH
4979: LD_INT 22
4981: PUSH
4982: LD_INT 1
4984: PUSH
4985: LD_INT 1
4987: PUSH
4988: LD_INT 44
4990: PUSH
4991: LD_INT 43
4993: PUSH
4994: LD_INT 42
4996: PUSH
4997: EMPTY
4998: LIST
4999: LIST
5000: LIST
5001: PUSH
5002: LD_OWVAR 67
5006: ARRAY
5007: PUSH
5008: EMPTY
5009: LIST
5010: LIST
5011: LIST
5012: LIST
5013: PUSH
5014: LD_INT 22
5016: PUSH
5017: LD_INT 1
5019: PUSH
5020: LD_INT 1
5022: PUSH
5023: LD_INT 44
5025: PUSH
5026: LD_INT 43
5028: PUSH
5029: LD_INT 42
5031: PUSH
5032: EMPTY
5033: LIST
5034: LIST
5035: LIST
5036: PUSH
5037: LD_OWVAR 67
5041: ARRAY
5042: PUSH
5043: EMPTY
5044: LIST
5045: LIST
5046: LIST
5047: LIST
5048: PUSH
5049: EMPTY
5050: LIST
5051: LIST
5052: LIST
5053: LIST
5054: LIST
5055: PUSH
5056: EMPTY
5057: PUSH
5058: EMPTY
5059: PUSH
5060: EMPTY
5061: PUSH
5062: EMPTY
5063: PUSH
5064: EMPTY
5065: PUSH
5066: EMPTY
5067: PUSH
5068: EMPTY
5069: LIST
5070: LIST
5071: LIST
5072: LIST
5073: LIST
5074: LIST
5075: LIST
5076: LIST
5077: ST_TO_ADDR
// for i := 1 to 8 do
5078: LD_ADDR_VAR 0 2
5082: PUSH
5083: DOUBLE
5084: LD_INT 1
5086: DEC
5087: ST_TO_ADDR
5088: LD_INT 8
5090: PUSH
5091: FOR_TO
5092: IFFALSE 5421
// begin if Multiplayer_GetPlayerIsSpec ( i ) then
5094: LD_VAR 0 2
5098: PPUSH
5099: CALL_OW 530
5103: IFFALSE 5261
// begin multi_spec := Replace ( multi_spec , i , 1 ) ;
5105: LD_ADDR_EXP 19
5109: PUSH
5110: LD_EXP 19
5114: PPUSH
5115: LD_VAR 0 2
5119: PPUSH
5120: LD_INT 1
5122: PPUSH
5123: CALL_OW 1
5127: ST_TO_ADDR
// multi_nations := Replace ( multi_nations , i , 0 ) ;
5128: LD_ADDR_EXP 17
5132: PUSH
5133: LD_EXP 17
5137: PPUSH
5138: LD_VAR 0 2
5142: PPUSH
5143: LD_INT 0
5145: PPUSH
5146: CALL_OW 1
5150: ST_TO_ADDR
// multi_sides := Replace ( multi_sides , i , 0 ) ;
5151: LD_ADDR_EXP 15
5155: PUSH
5156: LD_EXP 15
5160: PPUSH
5161: LD_VAR 0 2
5165: PPUSH
5166: LD_INT 0
5168: PPUSH
5169: CALL_OW 1
5173: ST_TO_ADDR
// for j = 1 to multi_teams do
5174: LD_ADDR_VAR 0 3
5178: PUSH
5179: DOUBLE
5180: LD_INT 1
5182: DEC
5183: ST_TO_ADDR
5184: LD_EXP 18
5188: PUSH
5189: FOR_TO
5190: IFFALSE 5259
// begin if i in multi_teams [ j ] then
5192: LD_VAR 0 2
5196: PUSH
5197: LD_EXP 18
5201: PUSH
5202: LD_VAR 0 3
5206: ARRAY
5207: IN
5208: IFFALSE 5257
// begin tmp := multi_teams [ j ] diff i ;
5210: LD_ADDR_VAR 0 5
5214: PUSH
5215: LD_EXP 18
5219: PUSH
5220: LD_VAR 0 3
5224: ARRAY
5225: PUSH
5226: LD_VAR 0 2
5230: DIFF
5231: ST_TO_ADDR
// multi_teams := Replace ( multi_teams , j , tmp ) ;
5232: LD_ADDR_EXP 18
5236: PUSH
5237: LD_EXP 18
5241: PPUSH
5242: LD_VAR 0 3
5246: PPUSH
5247: LD_VAR 0 5
5251: PPUSH
5252: CALL_OW 1
5256: ST_TO_ADDR
// end ; end ;
5257: GO 5189
5259: POP
5260: POP
// end ; if multi_nations [ i ] and not multi_nations [ i ] in multi_allowed_nations then
5261: LD_EXP 17
5265: PUSH
5266: LD_VAR 0 2
5270: ARRAY
5271: PUSH
5272: LD_EXP 17
5276: PUSH
5277: LD_VAR 0 2
5281: ARRAY
5282: PUSH
5283: LD_EXP 21
5287: IN
5288: NOT
5289: AND
5290: IFFALSE 5331
// multi_nations := Replace ( multi_nations , i , multi_allowed_nations [ rand ( 1 , multi_allowed_nations ) ] ) ;
5292: LD_ADDR_EXP 17
5296: PUSH
5297: LD_EXP 17
5301: PPUSH
5302: LD_VAR 0 2
5306: PPUSH
5307: LD_EXP 21
5311: PUSH
5312: LD_INT 1
5314: PPUSH
5315: LD_EXP 21
5319: PPUSH
5320: CALL_OW 12
5324: ARRAY
5325: PPUSH
5326: CALL_OW 1
5330: ST_TO_ADDR
// if not multi_nations [ i ] and not multi_sides [ i ] and not multi_spec [ i ] then
5331: LD_EXP 17
5335: PUSH
5336: LD_VAR 0 2
5340: ARRAY
5341: NOT
5342: PUSH
5343: LD_EXP 15
5347: PUSH
5348: LD_VAR 0 2
5352: ARRAY
5353: NOT
5354: AND
5355: PUSH
5356: LD_EXP 19
5360: PUSH
5361: LD_VAR 0 2
5365: ARRAY
5366: NOT
5367: AND
5368: IFFALSE 5393
// multi_bots := Replace ( multi_bots , i , 1 ) ;
5370: LD_ADDR_EXP 22
5374: PUSH
5375: LD_EXP 22
5379: PPUSH
5380: LD_VAR 0 2
5384: PPUSH
5385: LD_INT 1
5387: PPUSH
5388: CALL_OW 1
5392: ST_TO_ADDR
// if multi_sides [ i ] then
5393: LD_EXP 15
5397: PUSH
5398: LD_VAR 0 2
5402: ARRAY
5403: IFFALSE 5419
// multi_players_amount := multi_players_amount + 1 ;
5405: LD_ADDR_EXP 33
5409: PUSH
5410: LD_EXP 33
5414: PUSH
5415: LD_INT 1
5417: PLUS
5418: ST_TO_ADDR
// end ;
5419: GO 5091
5421: POP
5422: POP
// for i in multi_teams do
5423: LD_ADDR_VAR 0 2
5427: PUSH
5428: LD_EXP 18
5432: PUSH
5433: FOR_IN
5434: IFFALSE 5542
// begin for j = 2 to i do
5436: LD_ADDR_VAR 0 3
5440: PUSH
5441: DOUBLE
5442: LD_INT 2
5444: DEC
5445: ST_TO_ADDR
5446: LD_VAR 0 2
5450: PUSH
5451: FOR_TO
5452: IFFALSE 5538
// begin ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
5454: LD_VAR 0 2
5458: PUSH
5459: LD_VAR 0 3
5463: ARRAY
5464: PPUSH
5465: LD_VAR 0 2
5469: PUSH
5470: LD_INT 1
5472: ARRAY
5473: PPUSH
5474: CALL_OW 343
// for x = 1 to j - 1 do
5478: LD_ADDR_VAR 0 4
5482: PUSH
5483: DOUBLE
5484: LD_INT 1
5486: DEC
5487: ST_TO_ADDR
5488: LD_VAR 0 3
5492: PUSH
5493: LD_INT 1
5495: MINUS
5496: PUSH
5497: FOR_TO
5498: IFFALSE 5534
// SetAttitude ( i [ j ] , i [ x ] , att_friend , true ) ;
5500: LD_VAR 0 2
5504: PUSH
5505: LD_VAR 0 3
5509: ARRAY
5510: PPUSH
5511: LD_VAR 0 2
5515: PUSH
5516: LD_VAR 0 4
5520: ARRAY
5521: PPUSH
5522: LD_INT 1
5524: PPUSH
5525: LD_INT 1
5527: PPUSH
5528: CALL_OW 80
5532: GO 5497
5534: POP
5535: POP
// end ;
5536: GO 5451
5538: POP
5539: POP
// end ;
5540: GO 5433
5542: POP
5543: POP
// Difficulty := [ 1 , 2 , 3 ] [ multi_settings [ 1 ] ] ;
5544: LD_ADDR_OWVAR 67
5548: PUSH
5549: LD_INT 1
5551: PUSH
5552: LD_INT 2
5554: PUSH
5555: LD_INT 3
5557: PUSH
5558: EMPTY
5559: LIST
5560: LIST
5561: LIST
5562: PUSH
5563: LD_EXP 25
5567: PUSH
5568: LD_INT 1
5570: ARRAY
5571: ARRAY
5572: ST_TO_ADDR
// multi_pep_amount := [ 9 , 12 , 15 ] [ multi_settings [ 2 ] ] ;
5573: LD_ADDR_EXP 27
5577: PUSH
5578: LD_INT 9
5580: PUSH
5581: LD_INT 12
5583: PUSH
5584: LD_INT 15
5586: PUSH
5587: EMPTY
5588: LIST
5589: LIST
5590: LIST
5591: PUSH
5592: LD_EXP 25
5596: PUSH
5597: LD_INT 2
5599: ARRAY
5600: ARRAY
5601: ST_TO_ADDR
// multi_skill_level := [ 1 , 3 , 4 , 6 ] [ multi_settings [ 3 ] ] ;
5602: LD_ADDR_EXP 28
5606: PUSH
5607: LD_INT 1
5609: PUSH
5610: LD_INT 3
5612: PUSH
5613: LD_INT 4
5615: PUSH
5616: LD_INT 6
5618: PUSH
5619: EMPTY
5620: LIST
5621: LIST
5622: LIST
5623: LIST
5624: PUSH
5625: LD_EXP 25
5629: PUSH
5630: LD_INT 3
5632: ARRAY
5633: ARRAY
5634: ST_TO_ADDR
// multi_points_to_victory := [ 3500 , 5000 , 7500 , 10000 , 15000 ] [ multi_settings [ 4 ] ] ;
5635: LD_ADDR_EXP 34
5639: PUSH
5640: LD_INT 3500
5642: PUSH
5643: LD_INT 5000
5645: PUSH
5646: LD_INT 7500
5648: PUSH
5649: LD_INT 10000
5651: PUSH
5652: LD_INT 15000
5654: PUSH
5655: EMPTY
5656: LIST
5657: LIST
5658: LIST
5659: LIST
5660: LIST
5661: PUSH
5662: LD_EXP 25
5666: PUSH
5667: LD_INT 4
5669: ARRAY
5670: ARRAY
5671: ST_TO_ADDR
// multi_crates_spawn := [ [ 1000 , 0 0$36 ] , [ 2000 , 0 0$30 ] , [ 3000 , 0 0$24 ] , [ 4000 , 0 0$18 ] ] [ multi_settings [ 5 ] ] ;
5672: LD_ADDR_EXP 29
5676: PUSH
5677: LD_INT 1000
5679: PUSH
5680: LD_INT 1260
5682: PUSH
5683: EMPTY
5684: LIST
5685: LIST
5686: PUSH
5687: LD_INT 2000
5689: PUSH
5690: LD_INT 1050
5692: PUSH
5693: EMPTY
5694: LIST
5695: LIST
5696: PUSH
5697: LD_INT 3000
5699: PUSH
5700: LD_INT 840
5702: PUSH
5703: EMPTY
5704: LIST
5705: LIST
5706: PUSH
5707: LD_INT 4000
5709: PUSH
5710: LD_INT 630
5712: PUSH
5713: EMPTY
5714: LIST
5715: LIST
5716: PUSH
5717: EMPTY
5718: LIST
5719: LIST
5720: LIST
5721: LIST
5722: PUSH
5723: LD_EXP 25
5727: PUSH
5728: LD_INT 5
5730: ARRAY
5731: ARRAY
5732: ST_TO_ADDR
// end ;
5733: LD_VAR 0 1
5737: RET
// export function Multiplayer_SetBotSide ( preferSide ) ; var i ; begin
5738: LD_INT 0
5740: PPUSH
5741: PPUSH
// if not multi_sides [ preferSide ] then
5742: LD_EXP 15
5746: PUSH
5747: LD_VAR 0 1
5751: ARRAY
5752: NOT
5753: IFFALSE 5767
// begin result := preferSide ;
5755: LD_ADDR_VAR 0 2
5759: PUSH
5760: LD_VAR 0 1
5764: ST_TO_ADDR
// exit ;
5765: GO 5814
// end ; for i := 1 to 8 do
5767: LD_ADDR_VAR 0 3
5771: PUSH
5772: DOUBLE
5773: LD_INT 1
5775: DEC
5776: ST_TO_ADDR
5777: LD_INT 8
5779: PUSH
5780: FOR_TO
5781: IFFALSE 5812
// if not multi_sides [ i ] then
5783: LD_EXP 15
5787: PUSH
5788: LD_VAR 0 3
5792: ARRAY
5793: NOT
5794: IFFALSE 5810
// begin result := i ;
5796: LD_ADDR_VAR 0 2
5800: PUSH
5801: LD_VAR 0 3
5805: ST_TO_ADDR
// exit ;
5806: POP
5807: POP
5808: GO 5814
// end ;
5810: GO 5780
5812: POP
5813: POP
// end ;
5814: LD_VAR 0 2
5818: RET
// export function Multiplayer_PrepareCustomCommanders ( side , num ) ; begin
5819: LD_INT 0
5821: PPUSH
// uc_side := side ;
5822: LD_ADDR_OWVAR 20
5826: PUSH
5827: LD_VAR 0 1
5831: ST_TO_ADDR
// uc_nation := nation_russian ;
5832: LD_ADDR_OWVAR 21
5836: PUSH
5837: LD_INT 3
5839: ST_TO_ADDR
// hc_importance := 100 ;
5840: LD_ADDR_OWVAR 32
5844: PUSH
5845: LD_INT 100
5847: ST_TO_ADDR
// if num = 1 then
5848: LD_VAR 0 2
5852: PUSH
5853: LD_INT 1
5855: EQUAL
5856: IFFALSE 5923
// begin PrepareSoldier ( sex_male , multi_skill_level + 1 ) ;
5858: LD_INT 1
5860: PPUSH
5861: LD_EXP 28
5865: PUSH
5866: LD_INT 1
5868: PLUS
5869: PPUSH
5870: CALL_OW 381
// hc_gallery := ru ;
5874: LD_ADDR_OWVAR 33
5878: PUSH
5879: LD_STRING ru
5881: ST_TO_ADDR
// hc_face_number := 13 ;
5882: LD_ADDR_OWVAR 34
5886: PUSH
5887: LD_INT 13
5889: ST_TO_ADDR
// hc_name := Kuzmov ;
5890: LD_ADDR_OWVAR 26
5894: PUSH
5895: LD_STRING Kuzmov
5897: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
5898: LD_ADDR_OWVAR 29
5902: PUSH
5903: LD_INT 11
5905: PUSH
5906: LD_INT 11
5908: PUSH
5909: EMPTY
5910: LIST
5911: LIST
5912: ST_TO_ADDR
// result := CreateHuman ;
5913: LD_ADDR_VAR 0 3
5917: PUSH
5918: CALL_OW 44
5922: ST_TO_ADDR
// end ; if num = 2 then
5923: LD_VAR 0 2
5927: PUSH
5928: LD_INT 2
5930: EQUAL
5931: IFFALSE 5998
// begin PrepareMechanic ( sex_male , multi_skill_level + 2 ) ;
5933: LD_INT 1
5935: PPUSH
5936: LD_EXP 28
5940: PUSH
5941: LD_INT 2
5943: PLUS
5944: PPUSH
5945: CALL_OW 383
// hc_gallery := ru ;
5949: LD_ADDR_OWVAR 33
5953: PUSH
5954: LD_STRING ru
5956: ST_TO_ADDR
// hc_face_number := 1 ;
5957: LD_ADDR_OWVAR 34
5961: PUSH
5962: LD_INT 1
5964: ST_TO_ADDR
// hc_name := Burlak ;
5965: LD_ADDR_OWVAR 26
5969: PUSH
5970: LD_STRING Burlak
5972: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
5973: LD_ADDR_OWVAR 29
5977: PUSH
5978: LD_INT 10
5980: PUSH
5981: LD_INT 11
5983: PUSH
5984: EMPTY
5985: LIST
5986: LIST
5987: ST_TO_ADDR
// result := CreateHuman ;
5988: LD_ADDR_VAR 0 3
5992: PUSH
5993: CALL_OW 44
5997: ST_TO_ADDR
// end ; end ;
5998: LD_VAR 0 3
6002: RET
// export function Multiplayer_PreparePlayers ( ) ; var i , j , b , cl , un , veh , vehicles , tmp , people_amount ; begin
6003: LD_INT 0
6005: PPUSH
6006: PPUSH
6007: PPUSH
6008: PPUSH
6009: PPUSH
6010: PPUSH
6011: PPUSH
6012: PPUSH
6013: PPUSH
6014: PPUSH
// for i := 1 to 8 do
6015: LD_ADDR_VAR 0 2
6019: PUSH
6020: DOUBLE
6021: LD_INT 1
6023: DEC
6024: ST_TO_ADDR
6025: LD_INT 8
6027: PUSH
6028: FOR_TO
6029: IFFALSE 7451
// begin if not multi_sides [ i ] then
6031: LD_EXP 15
6035: PUSH
6036: LD_VAR 0 2
6040: ARRAY
6041: NOT
6042: IFFALSE 6046
// continue ;
6044: GO 6028
// vehicles := multi_vehicles [ multi_sides [ i ] ] ;
6046: LD_ADDR_VAR 0 8
6050: PUSH
6051: LD_EXP 30
6055: PUSH
6056: LD_EXP 15
6060: PUSH
6061: LD_VAR 0 2
6065: ARRAY
6066: ARRAY
6067: ST_TO_ADDR
// if multi_buildings [ multi_sides [ i ] ] then
6068: LD_EXP 35
6072: PUSH
6073: LD_EXP 15
6077: PUSH
6078: LD_VAR 0 2
6082: ARRAY
6083: ARRAY
6084: IFFALSE 6381
// begin uc_side := i ;
6086: LD_ADDR_OWVAR 20
6090: PUSH
6091: LD_VAR 0 2
6095: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
6096: LD_ADDR_OWVAR 21
6100: PUSH
6101: LD_EXP 17
6105: PUSH
6106: LD_VAR 0 2
6110: ARRAY
6111: ST_TO_ADDR
// for j in multi_buildings [ multi_sides [ i ] ] do
6112: LD_ADDR_VAR 0 3
6116: PUSH
6117: LD_EXP 35
6121: PUSH
6122: LD_EXP 15
6126: PUSH
6127: LD_VAR 0 2
6131: ARRAY
6132: ARRAY
6133: PUSH
6134: FOR_IN
6135: IFFALSE 6379
// begin if j [ 1 ] = b_oil_mine then
6137: LD_VAR 0 3
6141: PUSH
6142: LD_INT 1
6144: ARRAY
6145: PUSH
6146: LD_INT 29
6148: EQUAL
6149: IFFALSE 6186
// SetResourceVisibility ( j [ 2 ] [ 1 ] , j [ 2 ] [ 2 ] , i ) ;
6151: LD_VAR 0 3
6155: PUSH
6156: LD_INT 2
6158: ARRAY
6159: PUSH
6160: LD_INT 1
6162: ARRAY
6163: PPUSH
6164: LD_VAR 0 3
6168: PUSH
6169: LD_INT 2
6171: ARRAY
6172: PUSH
6173: LD_INT 2
6175: ARRAY
6176: PPUSH
6177: LD_VAR 0 2
6181: PPUSH
6182: CALL_OW 441
// bc_type := j [ 1 ] ;
6186: LD_ADDR_OWVAR 42
6190: PUSH
6191: LD_VAR 0 3
6195: PUSH
6196: LD_INT 1
6198: ARRAY
6199: ST_TO_ADDR
// bc_level := 3 ;
6200: LD_ADDR_OWVAR 43
6204: PUSH
6205: LD_INT 3
6207: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( j [ 2 ] [ 1 ] , j [ 2 ] [ 2 ] , j [ 2 ] [ 3 ] ) ;
6208: LD_ADDR_VAR 0 4
6212: PUSH
6213: LD_VAR 0 3
6217: PUSH
6218: LD_INT 2
6220: ARRAY
6221: PUSH
6222: LD_INT 1
6224: ARRAY
6225: PPUSH
6226: LD_VAR 0 3
6230: PUSH
6231: LD_INT 2
6233: ARRAY
6234: PUSH
6235: LD_INT 2
6237: ARRAY
6238: PPUSH
6239: LD_VAR 0 3
6243: PUSH
6244: LD_INT 2
6246: ARRAY
6247: PUSH
6248: LD_INT 3
6250: ARRAY
6251: PPUSH
6252: CALL_OW 47
6256: ST_TO_ADDR
// if j [ 1 ] = b_depot then
6257: LD_VAR 0 3
6261: PUSH
6262: LD_INT 1
6264: ARRAY
6265: PUSH
6266: LD_INT 0
6268: EQUAL
6269: IFFALSE 6345
// begin SetResourceType ( GetBase ( b ) , mat_cans , [ 450 , 350 , 230 ] [ Difficulty ] ) ;
6271: LD_VAR 0 4
6275: PPUSH
6276: CALL_OW 274
6280: PPUSH
6281: LD_INT 1
6283: PPUSH
6284: LD_INT 450
6286: PUSH
6287: LD_INT 350
6289: PUSH
6290: LD_INT 230
6292: PUSH
6293: EMPTY
6294: LIST
6295: LIST
6296: LIST
6297: PUSH
6298: LD_OWVAR 67
6302: ARRAY
6303: PPUSH
6304: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_oil , [ 90 , 60 , 40 ] [ Difficulty ] ) ;
6308: LD_VAR 0 4
6312: PPUSH
6313: CALL_OW 274
6317: PPUSH
6318: LD_INT 2
6320: PPUSH
6321: LD_INT 90
6323: PUSH
6324: LD_INT 60
6326: PUSH
6327: LD_INT 40
6329: PUSH
6330: EMPTY
6331: LIST
6332: LIST
6333: LIST
6334: PUSH
6335: LD_OWVAR 67
6339: ARRAY
6340: PPUSH
6341: CALL_OW 277
// end ; if j [ 1 ] = b_bunker then
6345: LD_VAR 0 3
6349: PUSH
6350: LD_INT 1
6352: ARRAY
6353: PUSH
6354: LD_INT 32
6356: EQUAL
6357: IFFALSE 6377
// PlaceWeaponTurret ( b , j [ 3 ] ) ;
6359: LD_VAR 0 4
6363: PPUSH
6364: LD_VAR 0 3
6368: PUSH
6369: LD_INT 3
6371: ARRAY
6372: PPUSH
6373: CALL_OW 431
// end ;
6377: GO 6134
6379: POP
6380: POP
// end ; if multi_custom_commanders then
6381: LD_EXP 24
6385: IFFALSE 6602
// begin un := Multiplayer_PrepareCustomCommanders ( i , multi_sides [ i ] ) ;
6387: LD_ADDR_VAR 0 6
6391: PUSH
6392: LD_VAR 0 2
6396: PPUSH
6397: LD_EXP 15
6401: PUSH
6402: LD_VAR 0 2
6406: ARRAY
6407: PPUSH
6408: CALL 5819 0 2
6412: ST_TO_ADDR
// multi_commanders := Insert ( multi_commanders , multi_commanders + 1 , un ) ;
6413: LD_ADDR_EXP 31
6417: PUSH
6418: LD_EXP 31
6422: PPUSH
6423: LD_EXP 31
6427: PUSH
6428: LD_INT 1
6430: PLUS
6431: PPUSH
6432: LD_VAR 0 6
6436: PPUSH
6437: CALL_OW 2
6441: ST_TO_ADDR
// if GetClass ( un ) = class_mechanic then
6442: LD_VAR 0 6
6446: PPUSH
6447: CALL_OW 257
6451: PUSH
6452: LD_INT 3
6454: EQUAL
6455: IFFALSE 6567
// begin uc_nation := nation_russian ;
6457: LD_ADDR_OWVAR 21
6461: PUSH
6462: LD_INT 3
6464: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_wheeled , engine_combustion , control_manual , ru_gun , 80 ) ;
6465: LD_INT 23
6467: PPUSH
6468: LD_INT 1
6470: PPUSH
6471: LD_INT 1
6473: PPUSH
6474: LD_INT 44
6476: PPUSH
6477: LD_INT 80
6479: PPUSH
6480: CALL 20300 0 5
// veh := CreateVehicle ;
6484: LD_ADDR_VAR 0 7
6488: PUSH
6489: CALL_OW 45
6493: ST_TO_ADDR
// SetMark ( veh , GetSide ( un ) * - 1 ) ;
6494: LD_VAR 0 7
6498: PPUSH
6499: LD_VAR 0 6
6503: PPUSH
6504: CALL_OW 255
6508: PUSH
6509: LD_INT 1
6511: NEG
6512: MUL
6513: PPUSH
6514: CALL_OW 242
// PlaceUnitArea ( veh , multi_pos_area [ multi_sides [ i ] ] [ 2 ] , false ) ;
6518: LD_VAR 0 7
6522: PPUSH
6523: LD_EXP 20
6527: PUSH
6528: LD_EXP 15
6532: PUSH
6533: LD_VAR 0 2
6537: ARRAY
6538: ARRAY
6539: PUSH
6540: LD_INT 2
6542: ARRAY
6543: PPUSH
6544: LD_INT 0
6546: PPUSH
6547: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
6551: LD_VAR 0 6
6555: PPUSH
6556: LD_VAR 0 7
6560: PPUSH
6561: CALL_OW 52
// end else
6565: GO 6600
// PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
6567: LD_VAR 0 6
6571: PPUSH
6572: LD_EXP 20
6576: PUSH
6577: LD_EXP 15
6581: PUSH
6582: LD_VAR 0 2
6586: ARRAY
6587: ARRAY
6588: PUSH
6589: LD_INT 1
6591: ARRAY
6592: PPUSH
6593: LD_INT 0
6595: PPUSH
6596: CALL_OW 49
// end else
6600: GO 6813
// begin uc_side := i ;
6602: LD_ADDR_OWVAR 20
6606: PUSH
6607: LD_VAR 0 2
6611: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
6612: LD_ADDR_OWVAR 21
6616: PUSH
6617: LD_EXP 17
6621: PUSH
6622: LD_VAR 0 2
6626: ARRAY
6627: ST_TO_ADDR
// hc_importance := 100 ;
6628: LD_ADDR_OWVAR 32
6632: PUSH
6633: LD_INT 100
6635: ST_TO_ADDR
// PrepareHuman ( false , 1 , multi_skill_level ) ;
6636: LD_INT 0
6638: PPUSH
6639: LD_INT 1
6641: PPUSH
6642: LD_EXP 28
6646: PPUSH
6647: CALL_OW 380
// if multiplayer then
6651: LD_OWVAR 4
6655: IFFALSE 6713
// begin hc_name := mp_sides_players_names [ i ] ;
6657: LD_ADDR_OWVAR 26
6661: PUSH
6662: LD_OWVAR 19
6666: PUSH
6667: LD_VAR 0 2
6671: ARRAY
6672: ST_TO_ADDR
// hc_gallery := MULTIAVATARS ;
6673: LD_ADDR_OWVAR 33
6677: PUSH
6678: LD_STRING MULTIAVATARS
6680: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( i ) ;
6681: LD_ADDR_OWVAR 34
6685: PUSH
6686: LD_VAR 0 2
6690: PPUSH
6691: CALL_OW 525
6695: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( i ) ;
6696: LD_ADDR_OWVAR 27
6700: PUSH
6701: LD_VAR 0 2
6705: PPUSH
6706: CALL_OW 526
6710: ST_TO_ADDR
// end else
6711: GO 6745
// begin hc_gallery :=  ;
6713: LD_ADDR_OWVAR 33
6717: PUSH
6718: LD_STRING 
6720: ST_TO_ADDR
// hc_name :=  ;
6721: LD_ADDR_OWVAR 26
6725: PUSH
6726: LD_STRING 
6728: ST_TO_ADDR
// hc_sex := rand ( 1 , 2 ) ;
6729: LD_ADDR_OWVAR 27
6733: PUSH
6734: LD_INT 1
6736: PPUSH
6737: LD_INT 2
6739: PPUSH
6740: CALL_OW 12
6744: ST_TO_ADDR
// end ; un := CreateHuman ;
6745: LD_ADDR_VAR 0 6
6749: PUSH
6750: CALL_OW 44
6754: ST_TO_ADDR
// PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
6755: LD_VAR 0 6
6759: PPUSH
6760: LD_EXP 20
6764: PUSH
6765: LD_EXP 15
6769: PUSH
6770: LD_VAR 0 2
6774: ARRAY
6775: ARRAY
6776: PUSH
6777: LD_INT 1
6779: ARRAY
6780: PPUSH
6781: LD_INT 0
6783: PPUSH
6784: CALL_OW 49
// multi_commanders := Replace ( multi_commanders , i , un ) ;
6788: LD_ADDR_EXP 31
6792: PUSH
6793: LD_EXP 31
6797: PPUSH
6798: LD_VAR 0 2
6802: PPUSH
6803: LD_VAR 0 6
6807: PPUSH
6808: CALL_OW 1
6812: ST_TO_ADDR
// end ; InitHc ;
6813: CALL_OW 19
// InitUc ;
6817: CALL_OW 18
// uc_side := i ;
6821: LD_ADDR_OWVAR 20
6825: PUSH
6826: LD_VAR 0 2
6830: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
6831: LD_ADDR_OWVAR 21
6835: PUSH
6836: LD_EXP 17
6840: PUSH
6841: LD_VAR 0 2
6845: ARRAY
6846: ST_TO_ADDR
// hc_gallery :=  ;
6847: LD_ADDR_OWVAR 33
6851: PUSH
6852: LD_STRING 
6854: ST_TO_ADDR
// hc_name :=  ;
6855: LD_ADDR_OWVAR 26
6859: PUSH
6860: LD_STRING 
6862: ST_TO_ADDR
// hc_importance := 0 ;
6863: LD_ADDR_OWVAR 32
6867: PUSH
6868: LD_INT 0
6870: ST_TO_ADDR
// cl := 1 ;
6871: LD_ADDR_VAR 0 5
6875: PUSH
6876: LD_INT 1
6878: ST_TO_ADDR
// for j := 2 to multi_pep_amount do
6879: LD_ADDR_VAR 0 3
6883: PUSH
6884: DOUBLE
6885: LD_INT 2
6887: DEC
6888: ST_TO_ADDR
6889: LD_EXP 27
6893: PUSH
6894: FOR_TO
6895: IFFALSE 7447
// begin if ( j - 1 ) mod ( ( multi_pep_amount - 1 ) / 4 ) = 0 then
6897: LD_VAR 0 3
6901: PUSH
6902: LD_INT 1
6904: MINUS
6905: PUSH
6906: LD_EXP 27
6910: PUSH
6911: LD_INT 1
6913: MINUS
6914: PUSH
6915: LD_INT 4
6917: DIVREAL
6918: MOD
6919: PUSH
6920: LD_INT 0
6922: EQUAL
6923: IFFALSE 6939
// cl := cl + 1 ;
6925: LD_ADDR_VAR 0 5
6929: PUSH
6930: LD_VAR 0 5
6934: PUSH
6935: LD_INT 1
6937: PLUS
6938: ST_TO_ADDR
// if cl > 4 then
6939: LD_VAR 0 5
6943: PUSH
6944: LD_INT 4
6946: GREATER
6947: IFFALSE 6957
// cl := 1 ;
6949: LD_ADDR_VAR 0 5
6953: PUSH
6954: LD_INT 1
6956: ST_TO_ADDR
// if multi_sides [ i ] = 2 and ( cl = 2 or ( cl = 4 and FilterAllUnits ( [ [ f_side , i ] , [ f_class , 4 ] ] ) > 1 ) ) then
6957: LD_EXP 15
6961: PUSH
6962: LD_VAR 0 2
6966: ARRAY
6967: PUSH
6968: LD_INT 2
6970: EQUAL
6971: PUSH
6972: LD_VAR 0 5
6976: PUSH
6977: LD_INT 2
6979: EQUAL
6980: PUSH
6981: LD_VAR 0 5
6985: PUSH
6986: LD_INT 4
6988: EQUAL
6989: PUSH
6990: LD_INT 22
6992: PUSH
6993: LD_VAR 0 2
6997: PUSH
6998: EMPTY
6999: LIST
7000: LIST
7001: PUSH
7002: LD_INT 25
7004: PUSH
7005: LD_INT 4
7007: PUSH
7008: EMPTY
7009: LIST
7010: LIST
7011: PUSH
7012: EMPTY
7013: LIST
7014: LIST
7015: PPUSH
7016: CALL_OW 69
7020: PUSH
7021: LD_INT 1
7023: GREATER
7024: AND
7025: OR
7026: AND
7027: IFFALSE 7046
// PrepareHuman ( false , 1 , multi_skill_level ) else
7029: LD_INT 0
7031: PPUSH
7032: LD_INT 1
7034: PPUSH
7035: LD_EXP 28
7039: PPUSH
7040: CALL_OW 380
7044: GO 7063
// PrepareHuman ( false , cl , multi_skill_level ) ;
7046: LD_INT 0
7048: PPUSH
7049: LD_VAR 0 5
7053: PPUSH
7054: LD_EXP 28
7058: PPUSH
7059: CALL_OW 380
// un := CreateHuman ;
7063: LD_ADDR_VAR 0 6
7067: PUSH
7068: CALL_OW 44
7072: ST_TO_ADDR
// if multi_pos_area then
7073: LD_EXP 20
7077: IFFALSE 7445
// begin if GetClass ( un ) = 3 and vehicles then
7079: LD_VAR 0 6
7083: PPUSH
7084: CALL_OW 257
7088: PUSH
7089: LD_INT 3
7091: EQUAL
7092: PUSH
7093: LD_VAR 0 8
7097: AND
7098: IFFALSE 7283
// begin PrepareVehicle ( vehicles [ 1 ] [ 1 ] , vehicles [ 1 ] [ 2 ] , vehicles [ 1 ] [ 3 ] , vehicles [ 1 ] [ 4 ] , [ 80 , 60 , 40 ] [ Difficulty ] ) ;
7100: LD_VAR 0 8
7104: PUSH
7105: LD_INT 1
7107: ARRAY
7108: PUSH
7109: LD_INT 1
7111: ARRAY
7112: PPUSH
7113: LD_VAR 0 8
7117: PUSH
7118: LD_INT 1
7120: ARRAY
7121: PUSH
7122: LD_INT 2
7124: ARRAY
7125: PPUSH
7126: LD_VAR 0 8
7130: PUSH
7131: LD_INT 1
7133: ARRAY
7134: PUSH
7135: LD_INT 3
7137: ARRAY
7138: PPUSH
7139: LD_VAR 0 8
7143: PUSH
7144: LD_INT 1
7146: ARRAY
7147: PUSH
7148: LD_INT 4
7150: ARRAY
7151: PPUSH
7152: LD_INT 80
7154: PUSH
7155: LD_INT 60
7157: PUSH
7158: LD_INT 40
7160: PUSH
7161: EMPTY
7162: LIST
7163: LIST
7164: LIST
7165: PUSH
7166: LD_OWVAR 67
7170: ARRAY
7171: PPUSH
7172: CALL 20300 0 5
// veh := CreateVehicle ;
7176: LD_ADDR_VAR 0 7
7180: PUSH
7181: CALL_OW 45
7185: ST_TO_ADDR
// PlaceUnitArea ( veh , multi_pos_area [ multi_sides [ i ] ] [ 2 ] , false ) ;
7186: LD_VAR 0 7
7190: PPUSH
7191: LD_EXP 20
7195: PUSH
7196: LD_EXP 15
7200: PUSH
7201: LD_VAR 0 2
7205: ARRAY
7206: ARRAY
7207: PUSH
7208: LD_INT 2
7210: ARRAY
7211: PPUSH
7212: LD_INT 0
7214: PPUSH
7215: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
7219: LD_VAR 0 6
7223: PPUSH
7224: LD_VAR 0 7
7228: PPUSH
7229: CALL_OW 52
// if GetWeapon ( veh ) = ru_cargo_bay then
7233: LD_VAR 0 7
7237: PPUSH
7238: CALL_OW 264
7242: PUSH
7243: LD_INT 51
7245: EQUAL
7246: IFFALSE 7263
// SetCargo ( veh , mat_oil , 60 ) ;
7248: LD_VAR 0 7
7252: PPUSH
7253: LD_INT 2
7255: PPUSH
7256: LD_INT 60
7258: PPUSH
7259: CALL_OW 290
// vehicles := Delete ( vehicles , 1 ) ;
7263: LD_ADDR_VAR 0 8
7267: PUSH
7268: LD_VAR 0 8
7272: PPUSH
7273: LD_INT 1
7275: PPUSH
7276: CALL_OW 3
7280: ST_TO_ADDR
// continue ;
7281: GO 6894
// end ; tmp := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ;
7283: LD_ADDR_VAR 0 9
7287: PUSH
7288: LD_INT 22
7290: PUSH
7291: LD_VAR 0 2
7295: PUSH
7296: EMPTY
7297: LIST
7298: LIST
7299: PUSH
7300: LD_INT 2
7302: PUSH
7303: LD_INT 30
7305: PUSH
7306: LD_INT 32
7308: PUSH
7309: EMPTY
7310: LIST
7311: LIST
7312: PUSH
7313: LD_INT 30
7315: PUSH
7316: LD_INT 31
7318: PUSH
7319: EMPTY
7320: LIST
7321: LIST
7322: PUSH
7323: EMPTY
7324: LIST
7325: LIST
7326: LIST
7327: PUSH
7328: LD_INT 58
7330: PUSH
7331: EMPTY
7332: LIST
7333: PUSH
7334: EMPTY
7335: LIST
7336: LIST
7337: LIST
7338: PPUSH
7339: CALL_OW 69
7343: ST_TO_ADDR
// if GetClass ( un ) = 1 and tmp then
7344: LD_VAR 0 6
7348: PPUSH
7349: CALL_OW 257
7353: PUSH
7354: LD_INT 1
7356: EQUAL
7357: PUSH
7358: LD_VAR 0 9
7362: AND
7363: IFFALSE 7412
// begin SetDir ( un , GetDir ( tmp [ 1 ] ) - 3 ) ;
7365: LD_VAR 0 6
7369: PPUSH
7370: LD_VAR 0 9
7374: PUSH
7375: LD_INT 1
7377: ARRAY
7378: PPUSH
7379: CALL_OW 254
7383: PUSH
7384: LD_INT 3
7386: MINUS
7387: PPUSH
7388: CALL_OW 233
// PlaceHumanInUnit ( un , tmp [ 1 ] ) ;
7392: LD_VAR 0 6
7396: PPUSH
7397: LD_VAR 0 9
7401: PUSH
7402: LD_INT 1
7404: ARRAY
7405: PPUSH
7406: CALL_OW 52
// continue ;
7410: GO 6894
// end ; PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
7412: LD_VAR 0 6
7416: PPUSH
7417: LD_EXP 20
7421: PUSH
7422: LD_EXP 15
7426: PUSH
7427: LD_VAR 0 2
7431: ARRAY
7432: ARRAY
7433: PUSH
7434: LD_INT 1
7436: ARRAY
7437: PPUSH
7438: LD_INT 0
7440: PPUSH
7441: CALL_OW 49
// end ; end ;
7445: GO 6894
7447: POP
7448: POP
// end ;
7449: GO 6028
7451: POP
7452: POP
// end ;
7453: LD_VAR 0 1
7457: RET
// export function Multiplayer_Start ( ) ; begin
7458: LD_INT 0
7460: PPUSH
// Multiplayer_PreparePlayers ( ) ;
7461: CALL 6003 0 0
// Multiplayer_InitPointSystem ( ) ;
7465: CALL 8176 0 0
// Multiplayer_RegisterCondition ( 20 ) ;
7469: LD_INT 20
7471: PPUSH
7472: CALL 8352 0 1
// Multiplayer_RegisterCondition ( 150 ) ;
7476: LD_INT 150
7478: PPUSH
7479: CALL 8352 0 1
// Multiplayer_RegisterCondition ( 5 ) ;
7483: LD_INT 5
7485: PPUSH
7486: CALL 8352 0 1
// Multiplayer_RegisterCondition ( - 60 ) ;
7490: LD_INT 60
7492: NEG
7493: PPUSH
7494: CALL 8352 0 1
// Multiplayer_RegisterCondition ( - 40 ) ;
7498: LD_INT 40
7500: NEG
7501: PPUSH
7502: CALL 8352 0 1
// Multiplayer_RegisterCondition ( 2 ) ;
7506: LD_INT 2
7508: PPUSH
7509: CALL 8352 0 1
// Multiplayer_RegisterCondition ( 110 ) ;
7513: LD_INT 110
7515: PPUSH
7516: CALL 8352 0 1
// Multiplayer_RegisterCondition ( 55 ) ;
7520: LD_INT 55
7522: PPUSH
7523: CALL 8352 0 1
// Multiplayer_RegisterCondition ( - 1000 ) ;
7527: LD_INT 1000
7529: NEG
7530: PPUSH
7531: CALL 8352 0 1
// if multi_sides [ your_side ] then
7535: LD_EXP 15
7539: PUSH
7540: LD_OWVAR 2
7544: ARRAY
7545: IFFALSE 7572
// CenterNowOnUnits ( FilterAllUnits ( [ f_side , your_side ] ) [ 1 ] ) ;
7547: LD_INT 22
7549: PUSH
7550: LD_OWVAR 2
7554: PUSH
7555: EMPTY
7556: LIST
7557: LIST
7558: PPUSH
7559: CALL_OW 69
7563: PUSH
7564: LD_INT 1
7566: ARRAY
7567: PPUSH
7568: CALL_OW 87
// end ;
7572: LD_VAR 0 1
7576: RET
// export function Multiplayer_End ( ) ; var i , j , points ; begin
7577: LD_INT 0
7579: PPUSH
7580: PPUSH
7581: PPUSH
7582: PPUSH
// repeat wait ( 0 0$1 ) ;
7583: LD_INT 35
7585: PPUSH
7586: CALL_OW 67
// points := 0 ;
7590: LD_ADDR_VAR 0 4
7594: PUSH
7595: LD_INT 0
7597: ST_TO_ADDR
// for i := 1 to 8 do
7598: LD_ADDR_VAR 0 2
7602: PUSH
7603: DOUBLE
7604: LD_INT 1
7606: DEC
7607: ST_TO_ADDR
7608: LD_INT 8
7610: PUSH
7611: FOR_TO
7612: IFFALSE 7638
// points := points + multi_points [ i ] ;
7614: LD_ADDR_VAR 0 4
7618: PUSH
7619: LD_VAR 0 4
7623: PUSH
7624: LD_EXP 38
7628: PUSH
7629: LD_VAR 0 2
7633: ARRAY
7634: PLUS
7635: ST_TO_ADDR
7636: GO 7611
7638: POP
7639: POP
// if not multi_custom_commanders then
7640: LD_EXP 24
7644: NOT
7645: IFFALSE 7758
// begin for i := 1 to 8 do
7647: LD_ADDR_VAR 0 2
7651: PUSH
7652: DOUBLE
7653: LD_INT 1
7655: DEC
7656: ST_TO_ADDR
7657: LD_INT 8
7659: PUSH
7660: FOR_TO
7661: IFFALSE 7732
// begin if FilterAllUnits ( [ f_side , i ] ) = 0 and not multi_loosers [ i ] then
7663: LD_INT 22
7665: PUSH
7666: LD_VAR 0 2
7670: PUSH
7671: EMPTY
7672: LIST
7673: LIST
7674: PPUSH
7675: CALL_OW 69
7679: PUSH
7680: LD_INT 0
7682: EQUAL
7683: PUSH
7684: LD_EXP 32
7688: PUSH
7689: LD_VAR 0 2
7693: ARRAY
7694: NOT
7695: AND
7696: IFFALSE 7730
// begin multi_loosers := Replace ( multi_loosers , i , 1 ) ;
7698: LD_ADDR_EXP 32
7702: PUSH
7703: LD_EXP 32
7707: PPUSH
7708: LD_VAR 0 2
7712: PPUSH
7713: LD_INT 1
7715: PPUSH
7716: CALL_OW 1
7720: ST_TO_ADDR
// Multiplayer_Reside ( i ) ;
7721: LD_VAR 0 2
7725: PPUSH
7726: CALL 8422 0 1
// end ; end ;
7730: GO 7660
7732: POP
7733: POP
// if Count ( multi_loosers ) = Count ( multi_sides ) then
7734: LD_EXP 32
7738: PPUSH
7739: CALL 17562 0 1
7743: PUSH
7744: LD_EXP 15
7748: PPUSH
7749: CALL 17562 0 1
7753: EQUAL
7754: IFFALSE 7758
// break ;
7756: GO 7799
// end ; if points >= multi_points_to_victory then
7758: LD_VAR 0 4
7762: PUSH
7763: LD_EXP 34
7767: GREATEREQUAL
7768: IFFALSE 7780
// begin winAllowed := true ;
7770: LD_ADDR_EXP 3
7774: PUSH
7775: LD_INT 1
7777: ST_TO_ADDR
// break ;
7778: GO 7799
// end ; until ( winAllowed and game ) or not multi_commanders ;
7780: LD_EXP 3
7784: PUSH
7785: LD_EXP 2
7789: AND
7790: PUSH
7791: LD_EXP 31
7795: NOT
7796: OR
7797: IFFALSE 7583
// game := false ;
7799: LD_ADDR_EXP 2
7803: PUSH
7804: LD_INT 0
7806: ST_TO_ADDR
// for i := 1 to 8 do
7807: LD_ADDR_VAR 0 2
7811: PUSH
7812: DOUBLE
7813: LD_INT 1
7815: DEC
7816: ST_TO_ADDR
7817: LD_INT 8
7819: PUSH
7820: FOR_TO
7821: IFFALSE 7857
// begin if multi_sides [ i ] then
7823: LD_EXP 15
7827: PUSH
7828: LD_VAR 0 2
7832: ARRAY
7833: IFFALSE 7855
// SetMultiScore ( i , multi_points [ i ] ) ;
7835: LD_VAR 0 2
7839: PPUSH
7840: LD_EXP 38
7844: PUSH
7845: LD_VAR 0 2
7849: ARRAY
7850: PPUSH
7851: CALL_OW 506
// end ;
7855: GO 7820
7857: POP
7858: POP
// if multi_loosers [ your_side ] then
7859: LD_EXP 32
7863: PUSH
7864: LD_OWVAR 2
7868: ARRAY
7869: IFFALSE 7892
// begin if Multiplayer then
7871: LD_OWVAR 4
7875: IFFALSE 7883
// YouLostInMultiplayer else
7877: CALL_OW 107
7881: GO 7890
// YouLost (  ) ;
7883: LD_STRING 
7885: PPUSH
7886: CALL_OW 104
// end else
7890: GO 7908
// begin if Multiplayer then
7892: LD_OWVAR 4
7896: IFFALSE 7904
// YouWinInMultiplayer else
7898: CALL_OW 106
7902: GO 7908
// YouWin ;
7904: CALL_OW 103
// end ; end ;
7908: LD_VAR 0 1
7912: RET
// export function Multiplayer_EnemyAlive ( ) ; var side ; begin
7913: LD_INT 0
7915: PPUSH
7916: PPUSH
// result := false ;
7917: LD_ADDR_VAR 0 1
7921: PUSH
7922: LD_INT 0
7924: ST_TO_ADDR
// for side in botSides do
7925: LD_ADDR_VAR 0 2
7929: PUSH
7930: LD_EXP 4
7934: PUSH
7935: FOR_IN
7936: IFFALSE 7997
// begin result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] , [ f_ok ] ] ) > 0 ;
7938: LD_ADDR_VAR 0 1
7942: PUSH
7943: LD_INT 22
7945: PUSH
7946: LD_VAR 0 2
7950: PUSH
7951: EMPTY
7952: LIST
7953: LIST
7954: PUSH
7955: LD_INT 21
7957: PUSH
7958: LD_INT 1
7960: PUSH
7961: EMPTY
7962: LIST
7963: LIST
7964: PUSH
7965: LD_INT 50
7967: PUSH
7968: EMPTY
7969: LIST
7970: PUSH
7971: EMPTY
7972: LIST
7973: LIST
7974: LIST
7975: PPUSH
7976: CALL_OW 69
7980: PUSH
7981: LD_INT 0
7983: GREATER
7984: ST_TO_ADDR
// if result then
7985: LD_VAR 0 1
7989: IFFALSE 7995
// exit ;
7991: POP
7992: POP
7993: GO 7999
// end ;
7995: GO 7935
7997: POP
7998: POP
// end ;
7999: LD_VAR 0 1
8003: RET
// export function Multiplayer_DisplayStrings ( ) ; var i , points ; begin
8004: LD_INT 0
8006: PPUSH
8007: PPUSH
8008: PPUSH
// result := [ ] ;
8009: LD_ADDR_VAR 0 1
8013: PUSH
8014: EMPTY
8015: ST_TO_ADDR
// points := 0 ;
8016: LD_ADDR_VAR 0 3
8020: PUSH
8021: LD_INT 0
8023: ST_TO_ADDR
// for i := 1 to 8 do
8024: LD_ADDR_VAR 0 2
8028: PUSH
8029: DOUBLE
8030: LD_INT 1
8032: DEC
8033: ST_TO_ADDR
8034: LD_INT 8
8036: PUSH
8037: FOR_TO
8038: IFFALSE 8117
// begin points := points + multi_points [ i ] ;
8040: LD_ADDR_VAR 0 3
8044: PUSH
8045: LD_VAR 0 3
8049: PUSH
8050: LD_EXP 38
8054: PUSH
8055: LD_VAR 0 2
8059: ARRAY
8060: PLUS
8061: ST_TO_ADDR
// if multi_sides [ i ] then
8062: LD_EXP 15
8066: PUSH
8067: LD_VAR 0 2
8071: ARRAY
8072: IFFALSE 8115
// begin result := result ^ [ #coop-points , i , i , multi_points [ i ] ] ;
8074: LD_ADDR_VAR 0 1
8078: PUSH
8079: LD_VAR 0 1
8083: PUSH
8084: LD_STRING #coop-points
8086: PUSH
8087: LD_VAR 0 2
8091: PUSH
8092: LD_VAR 0 2
8096: PUSH
8097: LD_EXP 38
8101: PUSH
8102: LD_VAR 0 2
8106: ARRAY
8107: PUSH
8108: EMPTY
8109: LIST
8110: LIST
8111: LIST
8112: LIST
8113: ADD
8114: ST_TO_ADDR
// end ; end ;
8115: GO 8037
8117: POP
8118: POP
// result := result ^ [ #saved-convoys , savedConvoyUnits ] ;
8119: LD_ADDR_VAR 0 1
8123: PUSH
8124: LD_VAR 0 1
8128: PUSH
8129: LD_STRING #saved-convoys
8131: PUSH
8132: LD_EXP 5
8136: PUSH
8137: EMPTY
8138: LIST
8139: LIST
8140: ADD
8141: ST_TO_ADDR
// result := result ^ [ #points-to-win , points , multi_points_to_victory ] ;
8142: LD_ADDR_VAR 0 1
8146: PUSH
8147: LD_VAR 0 1
8151: PUSH
8152: LD_STRING #points-to-win
8154: PUSH
8155: LD_VAR 0 3
8159: PUSH
8160: LD_EXP 34
8164: PUSH
8165: EMPTY
8166: LIST
8167: LIST
8168: LIST
8169: ADD
8170: ST_TO_ADDR
// end ;
8171: LD_VAR 0 1
8175: RET
// export multi_points , multi_points_conditions ; export function Multiplayer_InitPointSystem ( ) ; var i ; begin
8176: LD_INT 0
8178: PPUSH
8179: PPUSH
// multi_points := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
8180: LD_ADDR_EXP 38
8184: PUSH
8185: LD_INT 0
8187: PUSH
8188: LD_INT 0
8190: PUSH
8191: LD_INT 0
8193: PUSH
8194: LD_INT 0
8196: PUSH
8197: LD_INT 0
8199: PUSH
8200: LD_INT 0
8202: PUSH
8203: LD_INT 0
8205: PUSH
8206: LD_INT 0
8208: PUSH
8209: EMPTY
8210: LIST
8211: LIST
8212: LIST
8213: LIST
8214: LIST
8215: LIST
8216: LIST
8217: LIST
8218: ST_TO_ADDR
// multi_points_conditions := [ ] ;
8219: LD_ADDR_EXP 39
8223: PUSH
8224: EMPTY
8225: ST_TO_ADDR
// end ;
8226: LD_VAR 0 1
8230: RET
// export function Multiplayer_AddPoints ( side , amount ) ; begin
8231: LD_INT 0
8233: PPUSH
// if not multi_points or not side or side > 8 then
8234: LD_EXP 38
8238: NOT
8239: PUSH
8240: LD_VAR 0 1
8244: NOT
8245: OR
8246: PUSH
8247: LD_VAR 0 1
8251: PUSH
8252: LD_INT 8
8254: GREATER
8255: OR
8256: IFFALSE 8260
// exit ;
8258: GO 8297
// multi_points := Replace ( multi_points , side , multi_points [ side ] + amount ) ;
8260: LD_ADDR_EXP 38
8264: PUSH
8265: LD_EXP 38
8269: PPUSH
8270: LD_VAR 0 1
8274: PPUSH
8275: LD_EXP 38
8279: PUSH
8280: LD_VAR 0 1
8284: ARRAY
8285: PUSH
8286: LD_VAR 0 2
8290: PLUS
8291: PPUSH
8292: CALL_OW 1
8296: ST_TO_ADDR
// end ;
8297: LD_VAR 0 3
8301: RET
// export function Multiplayer_GetPoints ( side ) ; begin
8302: LD_INT 0
8304: PPUSH
// if not multi_points or not side or side > 8 then
8305: LD_EXP 38
8309: NOT
8310: PUSH
8311: LD_VAR 0 1
8315: NOT
8316: OR
8317: PUSH
8318: LD_VAR 0 1
8322: PUSH
8323: LD_INT 8
8325: GREATER
8326: OR
8327: IFFALSE 8331
// exit ;
8329: GO 8347
// result := multi_points [ side ] ;
8331: LD_ADDR_VAR 0 2
8335: PUSH
8336: LD_EXP 38
8340: PUSH
8341: LD_VAR 0 1
8345: ARRAY
8346: ST_TO_ADDR
// end ;
8347: LD_VAR 0 2
8351: RET
// export function Multiplayer_RegisterCondition ( points ) ; begin
8352: LD_INT 0
8354: PPUSH
// multi_points_conditions := Replace ( multi_points_conditions , multi_points_conditions + 1 , points ) ;
8355: LD_ADDR_EXP 39
8359: PUSH
8360: LD_EXP 39
8364: PPUSH
8365: LD_EXP 39
8369: PUSH
8370: LD_INT 1
8372: PLUS
8373: PPUSH
8374: LD_VAR 0 1
8378: PPUSH
8379: CALL_OW 1
8383: ST_TO_ADDR
// end ;
8384: LD_VAR 0 2
8388: RET
// export function Multiplayer_GetCondition ( id ) ; begin
8389: LD_INT 0
8391: PPUSH
// if not id then
8392: LD_VAR 0 1
8396: NOT
8397: IFFALSE 8401
// exit ;
8399: GO 8417
// result := multi_points_conditions [ id ] ;
8401: LD_ADDR_VAR 0 2
8405: PUSH
8406: LD_EXP 39
8410: PUSH
8411: LD_VAR 0 1
8415: ARRAY
8416: ST_TO_ADDR
// end ;
8417: LD_VAR 0 2
8421: RET
// export function Multiplayer_Reside ( side ) ; var players , i , j , tmp ; begin
8422: LD_INT 0
8424: PPUSH
8425: PPUSH
8426: PPUSH
8427: PPUSH
8428: PPUSH
// players := [ ] ;
8429: LD_ADDR_VAR 0 3
8433: PUSH
8434: EMPTY
8435: ST_TO_ADDR
// for i = 1 to 8 do
8436: LD_ADDR_VAR 0 4
8440: PUSH
8441: DOUBLE
8442: LD_INT 1
8444: DEC
8445: ST_TO_ADDR
8446: LD_INT 8
8448: PUSH
8449: FOR_TO
8450: IFFALSE 8509
// begin if i = side then
8452: LD_VAR 0 4
8456: PUSH
8457: LD_VAR 0 1
8461: EQUAL
8462: IFFALSE 8466
// continue ;
8464: GO 8449
// if multi_sides [ i ] and not multi_loosers [ i ] then
8466: LD_EXP 15
8470: PUSH
8471: LD_VAR 0 4
8475: ARRAY
8476: PUSH
8477: LD_EXP 32
8481: PUSH
8482: LD_VAR 0 4
8486: ARRAY
8487: NOT
8488: AND
8489: IFFALSE 8507
// players := players ^ i ;
8491: LD_ADDR_VAR 0 3
8495: PUSH
8496: LD_VAR 0 3
8500: PUSH
8501: LD_VAR 0 4
8505: ADD
8506: ST_TO_ADDR
// end ;
8507: GO 8449
8509: POP
8510: POP
// if not players then
8511: LD_VAR 0 3
8515: NOT
8516: IFFALSE 8520
// exit ;
8518: GO 8787
// if players = 1 then
8520: LD_VAR 0 3
8524: PUSH
8525: LD_INT 1
8527: EQUAL
8528: IFFALSE 8589
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_alive ] ] ) do
8530: LD_ADDR_VAR 0 4
8534: PUSH
8535: LD_INT 22
8537: PUSH
8538: LD_VAR 0 1
8542: PUSH
8543: EMPTY
8544: LIST
8545: LIST
8546: PUSH
8547: LD_INT 51
8549: PUSH
8550: EMPTY
8551: LIST
8552: PUSH
8553: EMPTY
8554: LIST
8555: LIST
8556: PPUSH
8557: CALL_OW 69
8561: PUSH
8562: FOR_IN
8563: IFFALSE 8585
// SetSide ( i , players [ 1 ] ) ;
8565: LD_VAR 0 4
8569: PPUSH
8570: LD_VAR 0 3
8574: PUSH
8575: LD_INT 1
8577: ARRAY
8578: PPUSH
8579: CALL_OW 235
8583: GO 8562
8585: POP
8586: POP
// end else
8587: GO 8787
// begin j := 1 ;
8589: LD_ADDR_VAR 0 5
8593: PUSH
8594: LD_INT 1
8596: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ [ f_type , unit_human ] , [ f_alive ] ] , [ f_type , unit_vehicle ] ] ] ) do
8597: LD_ADDR_VAR 0 4
8601: PUSH
8602: LD_INT 22
8604: PUSH
8605: LD_VAR 0 1
8609: PUSH
8610: EMPTY
8611: LIST
8612: LIST
8613: PUSH
8614: LD_INT 2
8616: PUSH
8617: LD_INT 21
8619: PUSH
8620: LD_INT 1
8622: PUSH
8623: EMPTY
8624: LIST
8625: LIST
8626: PUSH
8627: LD_INT 51
8629: PUSH
8630: EMPTY
8631: LIST
8632: PUSH
8633: EMPTY
8634: LIST
8635: LIST
8636: PUSH
8637: LD_INT 21
8639: PUSH
8640: LD_INT 2
8642: PUSH
8643: EMPTY
8644: LIST
8645: LIST
8646: PUSH
8647: EMPTY
8648: LIST
8649: LIST
8650: LIST
8651: PUSH
8652: EMPTY
8653: LIST
8654: LIST
8655: PPUSH
8656: CALL_OW 69
8660: PUSH
8661: FOR_IN
8662: IFFALSE 8785
// begin SetSide ( i , players [ j ] ) ;
8664: LD_VAR 0 4
8668: PPUSH
8669: LD_VAR 0 3
8673: PUSH
8674: LD_VAR 0 5
8678: ARRAY
8679: PPUSH
8680: CALL_OW 235
// if IsDrivenBy ( i ) then
8684: LD_VAR 0 4
8688: PPUSH
8689: CALL_OW 311
8693: IFFALSE 8720
// SetSide ( IsDrivenBy ( i ) , players [ j ] ) ;
8695: LD_VAR 0 4
8699: PPUSH
8700: CALL_OW 311
8704: PPUSH
8705: LD_VAR 0 3
8709: PUSH
8710: LD_VAR 0 5
8714: ARRAY
8715: PPUSH
8716: CALL_OW 235
// if GetType ( IsInUnit ( i ) ) = unit_building then
8720: LD_VAR 0 4
8724: PPUSH
8725: CALL_OW 310
8729: PPUSH
8730: CALL_OW 247
8734: PUSH
8735: LD_INT 3
8737: EQUAL
8738: IFFALSE 8749
// ComExitBuilding ( i ) ;
8740: LD_VAR 0 4
8744: PPUSH
8745: CALL_OW 122
// j := j + 1 ;
8749: LD_ADDR_VAR 0 5
8753: PUSH
8754: LD_VAR 0 5
8758: PUSH
8759: LD_INT 1
8761: PLUS
8762: ST_TO_ADDR
// if j > players then
8763: LD_VAR 0 5
8767: PUSH
8768: LD_VAR 0 3
8772: GREATER
8773: IFFALSE 8783
// j := 1 ;
8775: LD_ADDR_VAR 0 5
8779: PUSH
8780: LD_INT 1
8782: ST_TO_ADDR
// end ;
8783: GO 8661
8785: POP
8786: POP
// end ; end ;
8787: LD_VAR 0 2
8791: RET
// export function MultiplayerEvent_Produced ( side ) ; begin
8792: LD_INT 0
8794: PPUSH
// if not side or side > 8 then
8795: LD_VAR 0 1
8799: NOT
8800: PUSH
8801: LD_VAR 0 1
8805: PUSH
8806: LD_INT 8
8808: GREATER
8809: OR
8810: IFFALSE 8814
// exit ;
8812: GO 8831
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 6 ) ) ;
8814: LD_VAR 0 1
8818: PPUSH
8819: LD_INT 6
8821: PPUSH
8822: CALL 8389 0 1
8826: PPUSH
8827: CALL 8231 0 2
// end ;
8831: LD_VAR 0 2
8835: RET
// export function MultiplayerEvent_HumanLost ( side ) ; begin
8836: LD_INT 0
8838: PPUSH
// if not side or side > 8 then
8839: LD_VAR 0 1
8843: NOT
8844: PUSH
8845: LD_VAR 0 1
8849: PUSH
8850: LD_INT 8
8852: GREATER
8853: OR
8854: IFFALSE 8858
// exit ;
8856: GO 8875
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 4 ) ) ;
8858: LD_VAR 0 1
8862: PPUSH
8863: LD_INT 4
8865: PPUSH
8866: CALL 8389 0 1
8870: PPUSH
8871: CALL 8231 0 2
// end ;
8875: LD_VAR 0 2
8879: RET
// export function MultiplayerEvent_VehicleLost ( side ) ; begin
8880: LD_INT 0
8882: PPUSH
// if not side or side > 8 then
8883: LD_VAR 0 1
8887: NOT
8888: PUSH
8889: LD_VAR 0 1
8893: PUSH
8894: LD_INT 8
8896: GREATER
8897: OR
8898: IFFALSE 8902
// exit ;
8900: GO 8919
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 5 ) ) ;
8902: LD_VAR 0 1
8906: PPUSH
8907: LD_INT 5
8909: PPUSH
8910: CALL 8389 0 1
8914: PPUSH
8915: CALL 8231 0 2
// end ;
8919: LD_VAR 0 2
8923: RET
// export function MultiplayerEvent_BuildingCompleted ( side , btype ) ; begin
8924: LD_INT 0
8926: PPUSH
// if not side or side > 8 or not btype in [ b_workshop , b_lab , b_control_tower , b_depot ] then
8927: LD_VAR 0 1
8931: NOT
8932: PUSH
8933: LD_VAR 0 1
8937: PUSH
8938: LD_INT 8
8940: GREATER
8941: OR
8942: PUSH
8943: LD_VAR 0 2
8947: PUSH
8948: LD_INT 2
8950: PUSH
8951: LD_INT 6
8953: PUSH
8954: LD_INT 36
8956: PUSH
8957: LD_INT 0
8959: PUSH
8960: EMPTY
8961: LIST
8962: LIST
8963: LIST
8964: LIST
8965: IN
8966: NOT
8967: OR
8968: IFFALSE 8972
// exit ;
8970: GO 8989
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 3 ) ) ;
8972: LD_VAR 0 1
8976: PPUSH
8977: LD_INT 3
8979: PPUSH
8980: CALL 8389 0 1
8984: PPUSH
8985: CALL 8231 0 2
// end ;
8989: LD_VAR 0 3
8993: RET
// export function MultiplayerEvent_UnitKilled ( un , side , points ) ; var gained_points ; begin
8994: LD_INT 0
8996: PPUSH
8997: PPUSH
// if not un then
8998: LD_VAR 0 1
9002: NOT
9003: IFFALSE 9007
// exit ;
9005: GO 9053
// if not points then
9007: LD_VAR 0 3
9011: NOT
9012: IFFALSE 9029
// gained_points := Multiplayer_GetCondition ( 1 ) else
9014: LD_ADDR_VAR 0 5
9018: PUSH
9019: LD_INT 1
9021: PPUSH
9022: CALL 8389 0 1
9026: ST_TO_ADDR
9027: GO 9039
// gained_points := points ;
9029: LD_ADDR_VAR 0 5
9033: PUSH
9034: LD_VAR 0 3
9038: ST_TO_ADDR
// Multiplayer_AddPoints ( side , gained_points ) ;
9039: LD_VAR 0 2
9043: PPUSH
9044: LD_VAR 0 5
9048: PPUSH
9049: CALL 8231 0 2
// end ; end_of_file
9053: LD_VAR 0 4
9057: RET
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do var side ;
9058: LD_INT 0
9060: PPUSH
// begin side := GetSide ( un ) ;
9061: LD_ADDR_VAR 0 4
9065: PUSH
9066: LD_VAR 0 1
9070: PPUSH
9071: CALL_OW 255
9075: ST_TO_ADDR
// if killerSide = enemySide then
9076: LD_VAR 0 2
9080: PUSH
9081: LD_EXP 12
9085: EQUAL
9086: IFFALSE 9090
// exit ;
9088: GO 9150
// if side = convoySide and multi_sides [ killerSide ] then
9090: LD_VAR 0 4
9094: PUSH
9095: LD_EXP 42
9099: EQUAL
9100: PUSH
9101: LD_EXP 15
9105: PUSH
9106: LD_VAR 0 2
9110: ARRAY
9111: AND
9112: IFFALSE 9133
// begin Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 9 ) ) ;
9114: LD_VAR 0 4
9118: PPUSH
9119: LD_INT 9
9121: PPUSH
9122: CALL 8389 0 1
9126: PPUSH
9127: CALL 8231 0 2
// exit ;
9131: GO 9150
// end ; MultiplayerEvent_UnitKilled ( un , killerSide , false ) ;
9133: LD_VAR 0 1
9137: PPUSH
9138: LD_VAR 0 2
9142: PPUSH
9143: LD_INT 0
9145: PPUSH
9146: CALL 8994 0 3
// end ;
9150: PPOPN 4
9152: END
// on UnitDestroyed ( un ) do var i , side , base , chassis , engine , control , weapon , tmp , factory , btype ;
9153: LD_INT 0
9155: PPUSH
9156: PPUSH
9157: PPUSH
9158: PPUSH
9159: PPUSH
9160: PPUSH
9161: PPUSH
9162: PPUSH
9163: PPUSH
9164: PPUSH
// begin SOS_UnitDestroyed ( un ) ;
9165: LD_VAR 0 1
9169: PPUSH
9170: CALL 58261 0 1
// side := GetSide ( un ) ;
9174: LD_ADDR_VAR 0 3
9178: PUSH
9179: LD_VAR 0 1
9183: PPUSH
9184: CALL_OW 255
9188: ST_TO_ADDR
// if multi_sides [ side ] or side = convoySide then
9189: LD_EXP 15
9193: PUSH
9194: LD_VAR 0 3
9198: ARRAY
9199: PUSH
9200: LD_VAR 0 3
9204: PUSH
9205: LD_EXP 42
9209: EQUAL
9210: OR
9211: IFFALSE 9289
// begin if un in convoys then
9213: LD_VAR 0 1
9217: PUSH
9218: LD_EXP 40
9222: IN
9223: IFFALSE 9241
// convoys := convoys diff un ;
9225: LD_ADDR_EXP 40
9229: PUSH
9230: LD_EXP 40
9234: PUSH
9235: LD_VAR 0 1
9239: DIFF
9240: ST_TO_ADDR
// if GetType ( un ) = unit_human then
9241: LD_VAR 0 1
9245: PPUSH
9246: CALL_OW 247
9250: PUSH
9251: LD_INT 1
9253: EQUAL
9254: IFFALSE 9265
// MultiplayerEvent_HumanLost ( side ) ;
9256: LD_VAR 0 3
9260: PPUSH
9261: CALL 8836 0 1
// if GetType ( un ) = unit_vehicle then
9265: LD_VAR 0 1
9269: PPUSH
9270: CALL_OW 247
9274: PUSH
9275: LD_INT 2
9277: EQUAL
9278: IFFALSE 9289
// MultiplayerEvent_VehicleLost ( side ) ;
9280: LD_VAR 0 3
9284: PPUSH
9285: CALL 8880 0 1
// end ; if un in enemyForestGuard then
9289: LD_VAR 0 1
9293: PUSH
9294: LD_EXP 11
9298: IN
9299: IFFALSE 9317
// enemyForestGuard := enemyForestGuard diff un ;
9301: LD_ADDR_EXP 11
9305: PUSH
9306: LD_EXP 11
9310: PUSH
9311: LD_VAR 0 1
9315: DIFF
9316: ST_TO_ADDR
// if un in enemyMobile then
9317: LD_VAR 0 1
9321: PUSH
9322: LD_EXP 10
9326: IN
9327: IFFALSE 9345
// enemyMobile := enemyMobile diff un ;
9329: LD_ADDR_EXP 10
9333: PUSH
9334: LD_EXP 10
9338: PUSH
9339: LD_VAR 0 1
9343: DIFF
9344: ST_TO_ADDR
// if un in enemyUnits then
9345: LD_VAR 0 1
9349: PUSH
9350: LD_EXP 9
9354: IN
9355: IFFALSE 9373
// enemyUnits := enemyUnits diff un ;
9357: LD_ADDR_EXP 9
9361: PUSH
9362: LD_EXP 9
9366: PUSH
9367: LD_VAR 0 1
9371: DIFF
9372: ST_TO_ADDR
// if un in arAttackersInf then
9373: LD_VAR 0 1
9377: PUSH
9378: LD_EXP 13
9382: IN
9383: IFFALSE 9401
// arAttackersInf := arAttackersInf diff un ;
9385: LD_ADDR_EXP 13
9389: PUSH
9390: LD_EXP 13
9394: PUSH
9395: LD_VAR 0 1
9399: DIFF
9400: ST_TO_ADDR
// if multi_commanders and multi_custom_commanders and not multi_loosers [ side ] then
9401: LD_EXP 31
9405: PUSH
9406: LD_EXP 24
9410: AND
9411: PUSH
9412: LD_EXP 32
9416: PUSH
9417: LD_VAR 0 3
9421: ARRAY
9422: NOT
9423: AND
9424: IFFALSE 9502
// if un in multi_commanders then
9426: LD_VAR 0 1
9430: PUSH
9431: LD_EXP 31
9435: IN
9436: IFFALSE 9502
// begin if side = your_side then
9438: LD_VAR 0 3
9442: PUSH
9443: LD_OWVAR 2
9447: EQUAL
9448: IFFALSE 9454
// Multiplayer_Loose_Message ;
9450: CALL_OW 521
// multi_loosers := Replace ( multi_loosers , side , 1 ) ;
9454: LD_ADDR_EXP 32
9458: PUSH
9459: LD_EXP 32
9463: PPUSH
9464: LD_VAR 0 3
9468: PPUSH
9469: LD_INT 1
9471: PPUSH
9472: CALL_OW 1
9476: ST_TO_ADDR
// multi_commanders := multi_commanders diff un ;
9477: LD_ADDR_EXP 31
9481: PUSH
9482: LD_EXP 31
9486: PUSH
9487: LD_VAR 0 1
9491: DIFF
9492: ST_TO_ADDR
// Multiplayer_Reside ( side ) ;
9493: LD_VAR 0 3
9497: PPUSH
9498: CALL 8422 0 1
// end ; end ;
9502: PPOPN 11
9504: END
// on BuildingComplete ( building ) do var i , j , side , btype ;
9505: LD_INT 0
9507: PPUSH
9508: PPUSH
9509: PPUSH
9510: PPUSH
// begin side := GetSide ( building ) ;
9511: LD_ADDR_VAR 0 4
9515: PUSH
9516: LD_VAR 0 1
9520: PPUSH
9521: CALL_OW 255
9525: ST_TO_ADDR
// if multi_sides [ side ] then
9526: LD_EXP 15
9530: PUSH
9531: LD_VAR 0 4
9535: ARRAY
9536: IFFALSE 9557
// MultiplayerEvent_BuildingCompleted ( side , GetBType ( building ) ) ;
9538: LD_VAR 0 4
9542: PPUSH
9543: LD_VAR 0 1
9547: PPUSH
9548: CALL_OW 266
9552: PPUSH
9553: CALL 8924 0 2
// end ;
9557: PPOPN 5
9559: END
// on VehicleConstructed ( vehicle , factory ) do var i , side , tmp , base , amount , driver ;
9560: LD_INT 0
9562: PPUSH
9563: PPUSH
9564: PPUSH
9565: PPUSH
9566: PPUSH
9567: PPUSH
// begin SOS_VehicleConstructed ( vehicle , factory ) ;
9568: LD_VAR 0 1
9572: PPUSH
9573: LD_VAR 0 2
9577: PPUSH
9578: CALL 58319 0 2
// side := GetSide ( vehicle ) ;
9582: LD_ADDR_VAR 0 4
9586: PUSH
9587: LD_VAR 0 1
9591: PPUSH
9592: CALL_OW 255
9596: ST_TO_ADDR
// if multi_sides [ side ] then
9597: LD_EXP 15
9601: PUSH
9602: LD_VAR 0 4
9606: ARRAY
9607: IFFALSE 9618
// MultiplayerEvent_Produced ( side ) ;
9609: LD_VAR 0 4
9613: PPUSH
9614: CALL 8792 0 1
// end ;
9618: PPOPN 8
9620: END
// on ResearchComplete ( tech , lab ) do var i , side ;
9621: LD_INT 0
9623: PPUSH
9624: PPUSH
// begin side := GetSide ( lab ) ;
9625: LD_ADDR_VAR 0 4
9629: PUSH
9630: LD_VAR 0 2
9634: PPUSH
9635: CALL_OW 255
9639: ST_TO_ADDR
// if multi_sides [ side ] then
9640: LD_EXP 15
9644: PUSH
9645: LD_VAR 0 4
9649: ARRAY
9650: IFFALSE 9713
// for i := 1 to 8 do
9652: LD_ADDR_VAR 0 3
9656: PUSH
9657: DOUBLE
9658: LD_INT 1
9660: DEC
9661: ST_TO_ADDR
9662: LD_INT 8
9664: PUSH
9665: FOR_TO
9666: IFFALSE 9711
// if multi_sides [ i ] and i <> side then
9668: LD_EXP 15
9672: PUSH
9673: LD_VAR 0 3
9677: ARRAY
9678: PUSH
9679: LD_VAR 0 3
9683: PUSH
9684: LD_VAR 0 4
9688: NONEQUAL
9689: AND
9690: IFFALSE 9709
// SetTech ( tech , i , state_researched ) ;
9692: LD_VAR 0 1
9696: PPUSH
9697: LD_VAR 0 3
9701: PPUSH
9702: LD_INT 2
9704: PPUSH
9705: CALL_OW 322
9709: GO 9665
9711: POP
9712: POP
// end ;
9713: PPOPN 4
9715: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if veh in enemyMobile then
9716: LD_VAR 0 2
9720: PUSH
9721: LD_EXP 10
9725: IN
9726: IFFALSE 9789
// begin repeat ComMoveXY ( driver , 163 , 31 ) ;
9728: LD_VAR 0 1
9732: PPUSH
9733: LD_INT 163
9735: PPUSH
9736: LD_INT 31
9738: PPUSH
9739: CALL_OW 111
// wait ( 0 0$1 ) ;
9743: LD_INT 35
9745: PPUSH
9746: CALL_OW 67
// if IsDead ( driver ) then
9750: LD_VAR 0 1
9754: PPUSH
9755: CALL_OW 301
9759: IFFALSE 9763
// exit ;
9761: GO 9789
// until IsAt ( driver , 163 , 31 ) ;
9763: LD_VAR 0 1
9767: PPUSH
9768: LD_INT 163
9770: PPUSH
9771: LD_INT 31
9773: PPUSH
9774: CALL_OW 307
9778: IFFALSE 9728
// RemoveUnit ( driver ) ;
9780: LD_VAR 0 1
9784: PPUSH
9785: CALL_OW 64
// end ; end ; end_of_file
9789: PPOPN 4
9791: END
// every 8 8$00 trigger not forestIsCleared do
9792: LD_EXP 7
9796: NOT
9797: IFFALSE 9806
9799: GO 9801
9801: DISABLE
// ClearRoadInForest ;
9802: CALL 2191 0 0
9806: END
// every 18 18$00 trigger not forestIsCleared do
9807: LD_EXP 7
9811: NOT
9812: IFFALSE 9821
9814: GO 9816
9816: DISABLE
// ClearRoadInForest ;
9817: CALL 2191 0 0
9821: END
// every 0 0$30 trigger convoyWave mod 4 = 0 and convoyWave >= 4 do
9822: LD_EXP 41
9826: PUSH
9827: LD_INT 4
9829: MOD
9830: PUSH
9831: LD_INT 0
9833: EQUAL
9834: PUSH
9835: LD_EXP 41
9839: PUSH
9840: LD_INT 4
9842: GREATEREQUAL
9843: AND
9844: IFFALSE 9873
9846: GO 9848
9848: DISABLE
// begin arAttackersInf := arAttackersInf union SendNorthGroup ;
9849: LD_ADDR_EXP 13
9853: PUSH
9854: LD_EXP 13
9858: PUSH
9859: CALL 3376 0 0
9863: UNION
9864: ST_TO_ADDR
// wait ( 5 5$00 ) ;
9865: LD_INT 10500
9867: PPUSH
9868: CALL_OW 67
// enable ;
9872: ENABLE
// end ;
9873: END
// every 0 0$30 trigger convoyWave mod 7 = 0 and convoyWave >= 7 do
9874: LD_EXP 41
9878: PUSH
9879: LD_INT 7
9881: MOD
9882: PUSH
9883: LD_INT 0
9885: EQUAL
9886: PUSH
9887: LD_EXP 41
9891: PUSH
9892: LD_INT 7
9894: GREATEREQUAL
9895: AND
9896: IFFALSE 9925
9898: GO 9900
9900: DISABLE
// begin arAttackersInf := arAttackersInf union SendEastGroup2 ;
9901: LD_ADDR_EXP 13
9905: PUSH
9906: LD_EXP 13
9910: PUSH
9911: CALL 3620 0 0
9915: UNION
9916: ST_TO_ADDR
// wait ( 5 5$00 ) ;
9917: LD_INT 10500
9919: PPUSH
9920: CALL_OW 67
// enable ;
9924: ENABLE
// end ;
9925: END
// every 0 0$30 trigger convoyWave in [ 8 , 12 , 16 , 20 , 22 , 24 , 26 , 28 , 30 , 32 , 36 , 38 ] do
9926: LD_EXP 41
9930: PUSH
9931: LD_INT 8
9933: PUSH
9934: LD_INT 12
9936: PUSH
9937: LD_INT 16
9939: PUSH
9940: LD_INT 20
9942: PUSH
9943: LD_INT 22
9945: PUSH
9946: LD_INT 24
9948: PUSH
9949: LD_INT 26
9951: PUSH
9952: LD_INT 28
9954: PUSH
9955: LD_INT 30
9957: PUSH
9958: LD_INT 32
9960: PUSH
9961: LD_INT 36
9963: PUSH
9964: LD_INT 38
9966: PUSH
9967: EMPTY
9968: LIST
9969: LIST
9970: LIST
9971: LIST
9972: LIST
9973: LIST
9974: LIST
9975: LIST
9976: LIST
9977: LIST
9978: LIST
9979: LIST
9980: IN
9981: IFFALSE 10010
9983: GO 9985
9985: DISABLE
// begin arAttackersInf := arAttackersInf union SendEastGroup ;
9986: LD_ADDR_EXP 13
9990: PUSH
9991: LD_EXP 13
9995: PUSH
9996: CALL 3171 0 0
10000: UNION
10001: ST_TO_ADDR
// wait ( 5 5$00 ) ;
10002: LD_INT 10500
10004: PPUSH
10005: CALL_OW 67
// enable ;
10009: ENABLE
// end ;
10010: END
// every 0 0$2 trigger convoyWave mod 5 = 4 and not FilterAllUnits ( [ [ f_side , enemySide ] , [ f_distxy , 30 , 48 , 20 ] ] ) do
10011: LD_EXP 41
10015: PUSH
10016: LD_INT 5
10018: MOD
10019: PUSH
10020: LD_INT 4
10022: EQUAL
10023: PUSH
10024: LD_INT 22
10026: PUSH
10027: LD_EXP 12
10031: PUSH
10032: EMPTY
10033: LIST
10034: LIST
10035: PUSH
10036: LD_INT 92
10038: PUSH
10039: LD_INT 30
10041: PUSH
10042: LD_INT 48
10044: PUSH
10045: LD_INT 20
10047: PUSH
10048: EMPTY
10049: LIST
10050: LIST
10051: LIST
10052: LIST
10053: PUSH
10054: EMPTY
10055: LIST
10056: LIST
10057: PPUSH
10058: CALL_OW 69
10062: NOT
10063: AND
10064: IFFALSE 10081
10066: GO 10068
10068: DISABLE
// begin SendWestGroup ;
10069: CALL 2541 0 0
// wait ( 6 6$00 ) ;
10073: LD_INT 12600
10075: PPUSH
10076: CALL_OW 67
// enable ;
10080: ENABLE
// end ;
10081: END
// every 2 2$30 + 2 2$00 trigger UnitFilter ( enemyMobile , [ f_ok ] ) < 5 do
10082: LD_EXP 10
10086: PPUSH
10087: LD_INT 50
10089: PUSH
10090: EMPTY
10091: LIST
10092: PPUSH
10093: CALL_OW 72
10097: PUSH
10098: LD_INT 5
10100: LESS
10101: IFFALSE 10135
10103: GO 10105
10105: DISABLE
// begin PrepareMobileGroup ;
10106: CALL 1580 0 0
// wait ( [ 3 3$30 , 3 3$00 , 2 2$30 ] [ Difficulty ] ) ;
10110: LD_INT 7350
10112: PUSH
10113: LD_INT 6300
10115: PUSH
10116: LD_INT 5250
10118: PUSH
10119: EMPTY
10120: LIST
10121: LIST
10122: LIST
10123: PUSH
10124: LD_OWVAR 67
10128: ARRAY
10129: PPUSH
10130: CALL_OW 67
// enable ;
10134: ENABLE
// end ;
10135: END
// every 0 0$30 trigger convoyWave mod 6 = 0 and convoyWave >= 6 and UnitFilter ( enemyMobile , [ f_ok ] ) < 10 do
10136: LD_EXP 41
10140: PUSH
10141: LD_INT 6
10143: MOD
10144: PUSH
10145: LD_INT 0
10147: EQUAL
10148: PUSH
10149: LD_EXP 41
10153: PUSH
10154: LD_INT 6
10156: GREATEREQUAL
10157: AND
10158: PUSH
10159: LD_EXP 10
10163: PPUSH
10164: LD_INT 50
10166: PUSH
10167: EMPTY
10168: LIST
10169: PPUSH
10170: CALL_OW 72
10174: PUSH
10175: LD_INT 10
10177: LESS
10178: AND
10179: IFFALSE 10213
10181: GO 10183
10183: DISABLE
// begin PrepareMobileGroup2 ;
10184: CALL 1908 0 0
// wait ( [ 4 4$30 , 4 4$00 , 3 3$30 ] [ Difficulty ] ) ;
10188: LD_INT 9450
10190: PUSH
10191: LD_INT 8400
10193: PUSH
10194: LD_INT 7350
10196: PUSH
10197: EMPTY
10198: LIST
10199: LIST
10200: LIST
10201: PUSH
10202: LD_OWVAR 67
10206: ARRAY
10207: PPUSH
10208: CALL_OW 67
// enable ;
10212: ENABLE
// end ;
10213: END
// every 7 7$00 + 4 4$00 trigger forestIsCleared do var i , tmp ;
10214: LD_EXP 7
10218: IFFALSE 10431
10220: GO 10222
10222: DISABLE
10223: LD_INT 0
10225: PPUSH
10226: PPUSH
// begin if tick > 50 50$00 then
10227: LD_OWVAR 1
10231: PUSH
10232: LD_INT 105000
10234: GREATER
10235: IFFALSE 10240
// begin disable ;
10237: DISABLE
// exit ;
10238: GO 10431
// end ; tmp := PrepareForestOnslaught ;
10240: LD_ADDR_VAR 0 2
10244: PUSH
10245: CALL 2843 0 0
10249: ST_TO_ADDR
// for i in tmp do
10250: LD_ADDR_VAR 0 1
10254: PUSH
10255: LD_VAR 0 2
10259: PUSH
10260: FOR_IN
10261: IFFALSE 10325
// begin AddComMoveXY ( i , 197 , 152 ) ;
10263: LD_VAR 0 1
10267: PPUSH
10268: LD_INT 197
10270: PPUSH
10271: LD_INT 152
10273: PPUSH
10274: CALL_OW 171
// AddComMoveXY ( i , 159 , 163 ) ;
10278: LD_VAR 0 1
10282: PPUSH
10283: LD_INT 159
10285: PPUSH
10286: LD_INT 163
10288: PPUSH
10289: CALL_OW 171
// AddComMoveXY ( i , 116 , 154 ) ;
10293: LD_VAR 0 1
10297: PPUSH
10298: LD_INT 116
10300: PPUSH
10301: LD_INT 154
10303: PPUSH
10304: CALL_OW 171
// AddComMoveXY ( i , 93 , 177 ) ;
10308: LD_VAR 0 1
10312: PPUSH
10313: LD_INT 93
10315: PPUSH
10316: LD_INT 177
10318: PPUSH
10319: CALL_OW 171
// end ;
10323: GO 10260
10325: POP
10326: POP
// repeat wait ( 0 0$1 ) ;
10327: LD_INT 35
10329: PPUSH
10330: CALL_OW 67
// for i in tmp do
10334: LD_ADDR_VAR 0 1
10338: PUSH
10339: LD_VAR 0 2
10343: PUSH
10344: FOR_IN
10345: IFFALSE 10406
// if not IsOk ( i ) then
10347: LD_VAR 0 1
10351: PPUSH
10352: CALL_OW 302
10356: NOT
10357: IFFALSE 10377
// tmp := tmp diff i else
10359: LD_ADDR_VAR 0 2
10363: PUSH
10364: LD_VAR 0 2
10368: PUSH
10369: LD_VAR 0 1
10373: DIFF
10374: ST_TO_ADDR
10375: GO 10404
// if not HasTask ( i ) then
10377: LD_VAR 0 1
10381: PPUSH
10382: CALL_OW 314
10386: NOT
10387: IFFALSE 10404
// ComMoveXY ( i , 93 , 177 ) ;
10389: LD_VAR 0 1
10393: PPUSH
10394: LD_INT 93
10396: PPUSH
10397: LD_INT 177
10399: PPUSH
10400: CALL_OW 111
10404: GO 10344
10406: POP
10407: POP
// until not tmp ;
10408: LD_VAR 0 2
10412: NOT
10413: IFFALSE 10327
// wait ( rand ( 0 0$30 , 5 5$30 ) ) ;
10415: LD_INT 1050
10417: PPUSH
10418: LD_INT 11550
10420: PPUSH
10421: CALL_OW 12
10425: PPUSH
10426: CALL_OW 67
// enable ;
10430: ENABLE
// end ;
10431: PPOPN 2
10433: END
// every 0 0$1 trigger enemyForestGuard do var i , tmp , enemyInForest , vehicle ;
10434: LD_EXP 11
10438: IFFALSE 10953
10440: GO 10442
10442: DISABLE
10443: LD_INT 0
10445: PPUSH
10446: PPUSH
10447: PPUSH
10448: PPUSH
// begin enable ;
10449: ENABLE
// tmp := UnitFilter ( enemyForestGuard , [ f_ok ] ) ;
10450: LD_ADDR_VAR 0 2
10454: PUSH
10455: LD_EXP 11
10459: PPUSH
10460: LD_INT 50
10462: PUSH
10463: EMPTY
10464: LIST
10465: PPUSH
10466: CALL_OW 72
10470: ST_TO_ADDR
// enemyInForest := FilterUnitsInArea ( arCampArea , [ f_not , [ f_side , enemySide ] ] ) ;
10471: LD_ADDR_VAR 0 3
10475: PUSH
10476: LD_INT 19
10478: PPUSH
10479: LD_INT 3
10481: PUSH
10482: LD_INT 22
10484: PUSH
10485: LD_EXP 12
10489: PUSH
10490: EMPTY
10491: LIST
10492: LIST
10493: PUSH
10494: EMPTY
10495: LIST
10496: LIST
10497: PPUSH
10498: CALL_OW 70
10502: ST_TO_ADDR
// if not tmp then
10503: LD_VAR 0 2
10507: NOT
10508: IFFALSE 10512
// exit ;
10510: GO 10953
// for i in tmp do
10512: LD_ADDR_VAR 0 1
10516: PUSH
10517: LD_VAR 0 2
10521: PUSH
10522: FOR_IN
10523: IFFALSE 10951
// begin if enemyInForest then
10525: LD_VAR 0 3
10529: IFFALSE 10619
// begin if GetClass ( i ) = 4 then
10531: LD_VAR 0 1
10535: PPUSH
10536: CALL_OW 257
10540: PUSH
10541: LD_INT 4
10543: EQUAL
10544: IFFALSE 10578
// ComMoveUnit ( i , NearestUnitToUnit ( tmp diff i , i ) ) else
10546: LD_VAR 0 1
10550: PPUSH
10551: LD_VAR 0 2
10555: PUSH
10556: LD_VAR 0 1
10560: DIFF
10561: PPUSH
10562: LD_VAR 0 1
10566: PPUSH
10567: CALL_OW 74
10571: PPUSH
10572: CALL_OW 112
10576: GO 10617
// if GetClass ( i ) <> 3 then
10578: LD_VAR 0 1
10582: PPUSH
10583: CALL_OW 257
10587: PUSH
10588: LD_INT 3
10590: NONEQUAL
10591: IFFALSE 10617
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInForest , i ) ) ;
10593: LD_VAR 0 1
10597: PPUSH
10598: LD_VAR 0 3
10602: PPUSH
10603: LD_VAR 0 1
10607: PPUSH
10608: CALL_OW 74
10612: PPUSH
10613: CALL_OW 115
// end else
10617: GO 10949
// if not IsInArea ( i , arForestArea ) then
10619: LD_VAR 0 1
10623: PPUSH
10624: LD_INT 21
10626: PPUSH
10627: CALL_OW 308
10631: NOT
10632: IFFALSE 10648
// ComMoveToArea ( i , arForestArea ) else
10634: LD_VAR 0 1
10638: PPUSH
10639: LD_INT 21
10641: PPUSH
10642: CALL_OW 113
10646: GO 10949
// if GetClass ( i ) = 3 then
10648: LD_VAR 0 1
10652: PPUSH
10653: CALL_OW 257
10657: PUSH
10658: LD_INT 3
10660: EQUAL
10661: IFFALSE 10949
// begin vehicle := IsInUnit ( i ) ;
10663: LD_ADDR_VAR 0 4
10667: PUSH
10668: LD_VAR 0 1
10672: PPUSH
10673: CALL_OW 310
10677: ST_TO_ADDR
// if vehicle then
10678: LD_VAR 0 4
10682: IFFALSE 10907
// begin if GetLives ( vehicle ) < 1000 and not HasTask ( i ) then
10684: LD_VAR 0 4
10688: PPUSH
10689: CALL_OW 256
10693: PUSH
10694: LD_INT 1000
10696: LESS
10697: PUSH
10698: LD_VAR 0 1
10702: PPUSH
10703: CALL_OW 314
10707: NOT
10708: AND
10709: IFFALSE 10905
// begin if not IsInArea ( vehicle , arParkingArea ) then
10711: LD_VAR 0 4
10715: PPUSH
10716: LD_INT 20
10718: PPUSH
10719: CALL_OW 308
10723: NOT
10724: IFFALSE 10740
// ComMoveToArea ( vehicle , arParkingArea ) else
10726: LD_VAR 0 4
10730: PPUSH
10731: LD_INT 20
10733: PPUSH
10734: CALL_OW 113
10738: GO 10905
// if not GetTag ( i ) then
10740: LD_VAR 0 1
10744: PPUSH
10745: CALL_OW 110
10749: NOT
10750: IFFALSE 10905
// begin SetTag ( i , tMech ) ;
10752: LD_VAR 0 1
10756: PPUSH
10757: LD_INT 7
10759: PPUSH
10760: CALL_OW 109
// ComExitVehicle ( i ) ;
10764: LD_VAR 0 1
10768: PPUSH
10769: CALL_OW 121
// AddComRepairVehicle ( i , vehicle ) ;
10773: LD_VAR 0 1
10777: PPUSH
10778: LD_VAR 0 4
10782: PPUSH
10783: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
10787: LD_INT 35
10789: PPUSH
10790: CALL_OW 67
// if FilterUnitsInArea ( arCampArea , [ f_not , [ f_side , enemySide ] ] ) then
10794: LD_INT 19
10796: PPUSH
10797: LD_INT 3
10799: PUSH
10800: LD_INT 22
10802: PUSH
10803: LD_EXP 12
10807: PUSH
10808: EMPTY
10809: LIST
10810: LIST
10811: PUSH
10812: EMPTY
10813: LIST
10814: LIST
10815: PPUSH
10816: CALL_OW 70
10820: IFFALSE 10852
// begin ComEnterUnit ( i , vehicle ) ;
10822: LD_VAR 0 1
10826: PPUSH
10827: LD_VAR 0 4
10831: PPUSH
10832: CALL_OW 120
// SetTag ( i , 0 ) ;
10836: LD_VAR 0 1
10840: PPUSH
10841: LD_INT 0
10843: PPUSH
10844: CALL_OW 109
// exit ;
10848: POP
10849: POP
10850: GO 10953
// end ; until GetLives ( vehicle ) = 1000 ;
10852: LD_VAR 0 4
10856: PPUSH
10857: CALL_OW 256
10861: PUSH
10862: LD_INT 1000
10864: EQUAL
10865: IFFALSE 10787
// SetLives ( i , 1000 ) ;
10867: LD_VAR 0 1
10871: PPUSH
10872: LD_INT 1000
10874: PPUSH
10875: CALL_OW 234
// ComEnterUnit ( i , vehicle ) ;
10879: LD_VAR 0 1
10883: PPUSH
10884: LD_VAR 0 4
10888: PPUSH
10889: CALL_OW 120
// SetTag ( i , 0 ) ;
10893: LD_VAR 0 1
10897: PPUSH
10898: LD_INT 0
10900: PPUSH
10901: CALL_OW 109
// end ; end ; end else
10905: GO 10949
// if not IsInArea ( i , arParkingArea ) and GetClass ( i ) <> 3 then
10907: LD_VAR 0 1
10911: PPUSH
10912: LD_INT 20
10914: PPUSH
10915: CALL_OW 308
10919: NOT
10920: PUSH
10921: LD_VAR 0 1
10925: PPUSH
10926: CALL_OW 257
10930: PUSH
10931: LD_INT 3
10933: NONEQUAL
10934: AND
10935: IFFALSE 10949
// ComMoveToArea ( i , arParkingArea ) ;
10937: LD_VAR 0 1
10941: PPUSH
10942: LD_INT 20
10944: PPUSH
10945: CALL_OW 113
// end ; end ;
10949: GO 10522
10951: POP
10952: POP
// end ;
10953: PPOPN 4
10955: END
// every 0 0$1 trigger enemyMobile do var i , mech , enemy ;
10956: LD_EXP 10
10960: IFFALSE 11493
10962: GO 10964
10964: DISABLE
10965: LD_INT 0
10967: PPUSH
10968: PPUSH
10969: PPUSH
// begin enable ;
10970: ENABLE
// if not enemyMobile then
10971: LD_EXP 10
10975: NOT
10976: IFFALSE 10980
// exit ;
10978: GO 11493
// for i in enemyMobile do
10980: LD_ADDR_VAR 0 1
10984: PUSH
10985: LD_EXP 10
10989: PUSH
10990: FOR_IN
10991: IFFALSE 11491
// begin if GetSide ( i ) <> enemySide then
10993: LD_VAR 0 1
10997: PPUSH
10998: CALL_OW 255
11002: PUSH
11003: LD_EXP 12
11007: NONEQUAL
11008: IFFALSE 11028
// begin enemyMobile := enemyMobile diff i ;
11010: LD_ADDR_EXP 10
11014: PUSH
11015: LD_EXP 10
11019: PUSH
11020: LD_VAR 0 1
11024: DIFF
11025: ST_TO_ADDR
// continue ;
11026: GO 10990
// end ; if GetTag ( i ) = 300 then
11028: LD_VAR 0 1
11032: PPUSH
11033: CALL_OW 110
11037: PUSH
11038: LD_INT 300
11040: EQUAL
11041: IFFALSE 11156
// begin if GetFuel ( i ) < 50 then
11043: LD_VAR 0 1
11047: PPUSH
11048: CALL_OW 261
11052: PUSH
11053: LD_INT 50
11055: LESS
11056: IFFALSE 11115
// begin ComMoveXY ( i , 170 , 50 ) ;
11058: LD_VAR 0 1
11062: PPUSH
11063: LD_INT 170
11065: PPUSH
11066: LD_INT 50
11068: PPUSH
11069: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
11073: LD_INT 35
11075: PPUSH
11076: CALL_OW 67
// until GetDistUnitXY ( i , 170 , 50 ) < 4 ;
11080: LD_VAR 0 1
11084: PPUSH
11085: LD_INT 170
11087: PPUSH
11088: LD_INT 50
11090: PPUSH
11091: CALL_OW 297
11095: PUSH
11096: LD_INT 4
11098: LESS
11099: IFFALSE 11073
// SetFuel ( i , 100 ) ;
11101: LD_VAR 0 1
11105: PPUSH
11106: LD_INT 100
11108: PPUSH
11109: CALL_OW 240
// end else
11113: GO 11156
// if not IsInArea ( i , arParkingArea ) then
11115: LD_VAR 0 1
11119: PPUSH
11120: LD_INT 20
11122: PPUSH
11123: CALL_OW 308
11127: NOT
11128: IFFALSE 11144
// ComMoveToArea ( i , arParkingArea ) else
11130: LD_VAR 0 1
11134: PPUSH
11135: LD_INT 20
11137: PPUSH
11138: CALL_OW 113
11142: GO 11156
// SetTag ( i , 301 ) ;
11144: LD_VAR 0 1
11148: PPUSH
11149: LD_INT 301
11151: PPUSH
11152: CALL_OW 109
// end ; if GetTag ( i ) = 301 then
11156: LD_VAR 0 1
11160: PPUSH
11161: CALL_OW 110
11165: PUSH
11166: LD_INT 301
11168: EQUAL
11169: IFFALSE 11311
// begin if GetLives ( i ) < 1000 then
11171: LD_VAR 0 1
11175: PPUSH
11176: CALL_OW 256
11180: PUSH
11181: LD_INT 1000
11183: LESS
11184: IFFALSE 11288
// begin if not IsDrivenBy ( i ) then
11186: LD_VAR 0 1
11190: PPUSH
11191: CALL_OW 311
11195: NOT
11196: IFFALSE 11200
// continue ;
11198: GO 10990
// mech := IsDrivenBy ( i ) ;
11200: LD_ADDR_VAR 0 2
11204: PUSH
11205: LD_VAR 0 1
11209: PPUSH
11210: CALL_OW 311
11214: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
11215: LD_VAR 0 2
11219: PPUSH
11220: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
11224: LD_VAR 0 2
11228: PPUSH
11229: LD_VAR 0 1
11233: PPUSH
11234: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
11238: LD_INT 35
11240: PPUSH
11241: CALL_OW 67
// until GetLives ( i ) = 1000 ;
11245: LD_VAR 0 1
11249: PPUSH
11250: CALL_OW 256
11254: PUSH
11255: LD_INT 1000
11257: EQUAL
11258: IFFALSE 11238
// SetLives ( mech , 1000 ) ;
11260: LD_VAR 0 2
11264: PPUSH
11265: LD_INT 1000
11267: PPUSH
11268: CALL_OW 234
// ComEnterUnit ( mech , i ) ;
11272: LD_VAR 0 2
11276: PPUSH
11277: LD_VAR 0 1
11281: PPUSH
11282: CALL_OW 120
// end else
11286: GO 11311
// if IsDrivenBy ( i ) then
11288: LD_VAR 0 1
11292: PPUSH
11293: CALL_OW 311
11297: IFFALSE 11311
// SetTag ( i , 0 ) ;
11299: LD_VAR 0 1
11303: PPUSH
11304: LD_INT 0
11306: PPUSH
11307: CALL_OW 109
// end ; if GetTag ( i ) < 300 then
11311: LD_VAR 0 1
11315: PPUSH
11316: CALL_OW 110
11320: PUSH
11321: LD_INT 300
11323: LESS
11324: IFFALSE 11489
// begin enemy := FilterUnitsInArea ( arCampArea , [ f_enemy , enemySide ] ) ;
11326: LD_ADDR_VAR 0 3
11330: PUSH
11331: LD_INT 19
11333: PPUSH
11334: LD_INT 81
11336: PUSH
11337: LD_EXP 12
11341: PUSH
11342: EMPTY
11343: LIST
11344: LIST
11345: PPUSH
11346: CALL_OW 70
11350: ST_TO_ADDR
// if GetLives ( i ) < 650 then
11351: LD_VAR 0 1
11355: PPUSH
11356: CALL_OW 256
11360: PUSH
11361: LD_INT 650
11363: LESS
11364: IFFALSE 11389
// begin ComStop ( i ) ;
11366: LD_VAR 0 1
11370: PPUSH
11371: CALL_OW 141
// SetTag ( i , 300 ) ;
11375: LD_VAR 0 1
11379: PPUSH
11380: LD_INT 300
11382: PPUSH
11383: CALL_OW 109
// continue ;
11387: GO 10990
// end ; if enemy then
11389: LD_VAR 0 3
11393: IFFALSE 11433
// begin if not HasTask ( i ) then
11395: LD_VAR 0 1
11399: PPUSH
11400: CALL_OW 314
11404: NOT
11405: IFFALSE 11431
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
11407: LD_VAR 0 1
11411: PPUSH
11412: LD_VAR 0 3
11416: PPUSH
11417: LD_VAR 0 1
11421: PPUSH
11422: CALL_OW 74
11426: PPUSH
11427: CALL_OW 115
// end else
11431: GO 11489
// if enemyMobile then
11433: LD_EXP 10
11437: IFFALSE 11489
// begin enemy := FilterAllUnits ( [ f_enemy , enemySide ] ) ;
11439: LD_ADDR_VAR 0 3
11443: PUSH
11444: LD_INT 81
11446: PUSH
11447: LD_EXP 12
11451: PUSH
11452: EMPTY
11453: LIST
11454: LIST
11455: PPUSH
11456: CALL_OW 69
11460: ST_TO_ADDR
// if enemy then
11461: LD_VAR 0 3
11465: IFFALSE 11489
// AgressiveMove ( i , [ [ 130 , 28 ] ] ) ;
11467: LD_VAR 0 1
11471: PPUSH
11472: LD_INT 130
11474: PUSH
11475: LD_INT 28
11477: PUSH
11478: EMPTY
11479: LIST
11480: LIST
11481: PUSH
11482: EMPTY
11483: LIST
11484: PPUSH
11485: CALL 55781 0 2
// end ; end ; end ;
11489: GO 10990
11491: POP
11492: POP
// end ;
11493: PPOPN 3
11495: END
// every 0 0$2 trigger arAttackersInf do var i , tmp , nearest , enemy , path ;
11496: LD_EXP 13
11500: IFFALSE 12023
11502: GO 11504
11504: DISABLE
11505: LD_INT 0
11507: PPUSH
11508: PPUSH
11509: PPUSH
11510: PPUSH
11511: PPUSH
// begin enable ;
11512: ENABLE
// tmp := UnitFilter ( arAttackersInf , [ f_ok ] ) ;
11513: LD_ADDR_VAR 0 2
11517: PUSH
11518: LD_EXP 13
11522: PPUSH
11523: LD_INT 50
11525: PUSH
11526: EMPTY
11527: LIST
11528: PPUSH
11529: CALL_OW 72
11533: ST_TO_ADDR
// arAttackersInf := [ ] ;
11534: LD_ADDR_EXP 13
11538: PUSH
11539: EMPTY
11540: ST_TO_ADDR
// for i in UnitFilter ( tmp , [ f_class , class_soldier ] ) do
11541: LD_ADDR_VAR 0 1
11545: PUSH
11546: LD_VAR 0 2
11550: PPUSH
11551: LD_INT 25
11553: PUSH
11554: LD_INT 1
11556: PUSH
11557: EMPTY
11558: LIST
11559: LIST
11560: PPUSH
11561: CALL_OW 72
11565: PUSH
11566: FOR_IN
11567: IFFALSE 11719
// begin if Prob ( 50 ) then
11569: LD_INT 50
11571: PPUSH
11572: CALL_OW 13
11576: IFFALSE 11592
// SetTag ( i , tMine ) else
11578: LD_VAR 0 1
11582: PPUSH
11583: LD_INT 6
11585: PPUSH
11586: CALL_OW 109
11590: GO 11594
// continue ;
11592: GO 11566
// nearest := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , enemySide ] , [ f_not , [ f_tag , tMined ] ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) , i ) ;
11594: LD_ADDR_VAR 0 3
11598: PUSH
11599: LD_INT 81
11601: PUSH
11602: LD_EXP 12
11606: PUSH
11607: EMPTY
11608: LIST
11609: LIST
11610: PUSH
11611: LD_INT 3
11613: PUSH
11614: LD_INT 120
11616: PUSH
11617: LD_INT 11
11619: PUSH
11620: EMPTY
11621: LIST
11622: LIST
11623: PUSH
11624: EMPTY
11625: LIST
11626: LIST
11627: PUSH
11628: LD_INT 2
11630: PUSH
11631: LD_INT 21
11633: PUSH
11634: LD_INT 2
11636: PUSH
11637: EMPTY
11638: LIST
11639: LIST
11640: PUSH
11641: LD_INT 21
11643: PUSH
11644: LD_INT 3
11646: PUSH
11647: EMPTY
11648: LIST
11649: LIST
11650: PUSH
11651: EMPTY
11652: LIST
11653: LIST
11654: LIST
11655: PUSH
11656: EMPTY
11657: LIST
11658: LIST
11659: LIST
11660: PPUSH
11661: CALL_OW 69
11665: PPUSH
11666: LD_VAR 0 1
11670: PPUSH
11671: CALL_OW 74
11675: ST_TO_ADDR
// if not nearest then
11676: LD_VAR 0 3
11680: NOT
11681: IFFALSE 11685
// break ;
11683: GO 11719
// SetTag ( nearest , tMined ) ;
11685: LD_VAR 0 3
11689: PPUSH
11690: LD_INT 11
11692: PPUSH
11693: CALL_OW 109
// AddComPlaceDelayedCharge ( i , 0 , 0 , nearest ) ;
11697: LD_VAR 0 1
11701: PPUSH
11702: LD_INT 0
11704: PPUSH
11705: LD_INT 0
11707: PPUSH
11708: LD_VAR 0 3
11712: PPUSH
11713: CALL_OW 192
// end ;
11717: GO 11566
11719: POP
11720: POP
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
11721: LD_ADDR_VAR 0 2
11725: PUSH
11726: LD_VAR 0 2
11730: PPUSH
11731: LD_INT 50
11733: PUSH
11734: EMPTY
11735: LIST
11736: PPUSH
11737: CALL_OW 72
11741: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
11742: LD_INT 70
11744: PPUSH
11745: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
11749: LD_ADDR_VAR 0 2
11753: PUSH
11754: LD_VAR 0 2
11758: PPUSH
11759: LD_INT 50
11761: PUSH
11762: EMPTY
11763: LIST
11764: PPUSH
11765: CALL_OW 72
11769: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_enemy , enemySide ] ) ;
11770: LD_ADDR_VAR 0 4
11774: PUSH
11775: LD_INT 81
11777: PUSH
11778: LD_EXP 12
11782: PUSH
11783: EMPTY
11784: LIST
11785: LIST
11786: PPUSH
11787: CALL_OW 69
11791: ST_TO_ADDR
// for i in tmp do
11792: LD_ADDR_VAR 0 1
11796: PUSH
11797: LD_VAR 0 2
11801: PUSH
11802: FOR_IN
11803: IFFALSE 12014
// if GetClass ( i ) <> 1 and GetTag ( i ) <> tMine then
11805: LD_VAR 0 1
11809: PPUSH
11810: CALL_OW 257
11814: PUSH
11815: LD_INT 1
11817: NONEQUAL
11818: PUSH
11819: LD_VAR 0 1
11823: PPUSH
11824: CALL_OW 110
11828: PUSH
11829: LD_INT 6
11831: NONEQUAL
11832: AND
11833: IFFALSE 11861
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
11835: LD_VAR 0 1
11839: PPUSH
11840: LD_VAR 0 4
11844: PPUSH
11845: LD_VAR 0 1
11849: PPUSH
11850: CALL_OW 74
11854: PPUSH
11855: CALL_OW 115
11859: GO 12012
// begin nearest := NearestUnitToUnit ( UnitFilter ( enemy , [ [ f_not , [ f_tag , tMined ] ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) , i ) ;
11861: LD_ADDR_VAR 0 3
11865: PUSH
11866: LD_VAR 0 4
11870: PPUSH
11871: LD_INT 3
11873: PUSH
11874: LD_INT 120
11876: PUSH
11877: LD_INT 11
11879: PUSH
11880: EMPTY
11881: LIST
11882: LIST
11883: PUSH
11884: EMPTY
11885: LIST
11886: LIST
11887: PUSH
11888: LD_INT 2
11890: PUSH
11891: LD_INT 21
11893: PUSH
11894: LD_INT 2
11896: PUSH
11897: EMPTY
11898: LIST
11899: LIST
11900: PUSH
11901: LD_INT 21
11903: PUSH
11904: LD_INT 3
11906: PUSH
11907: EMPTY
11908: LIST
11909: LIST
11910: PUSH
11911: EMPTY
11912: LIST
11913: LIST
11914: LIST
11915: PUSH
11916: EMPTY
11917: LIST
11918: LIST
11919: PPUSH
11920: CALL_OW 72
11924: PPUSH
11925: LD_VAR 0 1
11929: PPUSH
11930: CALL_OW 74
11934: ST_TO_ADDR
// if not nearest then
11935: LD_VAR 0 3
11939: NOT
11940: IFFALSE 11968
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
11942: LD_VAR 0 1
11946: PPUSH
11947: LD_VAR 0 4
11951: PPUSH
11952: LD_VAR 0 1
11956: PPUSH
11957: CALL_OW 74
11961: PPUSH
11962: CALL_OW 115
11966: GO 12012
// if not HasTask ( i ) then
11968: LD_VAR 0 1
11972: PPUSH
11973: CALL_OW 314
11977: NOT
11978: IFFALSE 12012
// begin SetTag ( nearest , tMined ) ;
11980: LD_VAR 0 3
11984: PPUSH
11985: LD_INT 11
11987: PPUSH
11988: CALL_OW 109
// ComPlaceDelayedCharge ( i , 0 , 0 , nearest ) ;
11992: LD_VAR 0 1
11996: PPUSH
11997: LD_INT 0
11999: PPUSH
12000: LD_INT 0
12002: PPUSH
12003: LD_VAR 0 3
12007: PPUSH
12008: CALL_OW 132
// end ; end ;
12012: GO 11802
12014: POP
12015: POP
// until not tmp ;
12016: LD_VAR 0 2
12020: NOT
12021: IFFALSE 11742
// end ;
12023: PPOPN 5
12025: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , enemySide ] , [ f_engine , engine_combustion ] ] ) do var i ;
12026: LD_INT 22
12028: PUSH
12029: LD_EXP 12
12033: PUSH
12034: EMPTY
12035: LIST
12036: LIST
12037: PUSH
12038: LD_INT 32
12040: PUSH
12041: LD_INT 1
12043: PUSH
12044: EMPTY
12045: LIST
12046: LIST
12047: PUSH
12048: EMPTY
12049: LIST
12050: LIST
12051: PPUSH
12052: CALL_OW 69
12056: IFFALSE 12135
12058: GO 12060
12060: DISABLE
12061: LD_INT 0
12063: PPUSH
// begin enable ;
12064: ENABLE
// for i in FilterAllUnits ( [ [ f_side , enemySide ] , [ f_engine , engine_combustion ] ] ) do
12065: LD_ADDR_VAR 0 1
12069: PUSH
12070: LD_INT 22
12072: PUSH
12073: LD_EXP 12
12077: PUSH
12078: EMPTY
12079: LIST
12080: LIST
12081: PUSH
12082: LD_INT 32
12084: PUSH
12085: LD_INT 1
12087: PUSH
12088: EMPTY
12089: LIST
12090: LIST
12091: PUSH
12092: EMPTY
12093: LIST
12094: LIST
12095: PPUSH
12096: CALL_OW 69
12100: PUSH
12101: FOR_IN
12102: IFFALSE 12133
// if GetFuel ( i ) < 3 then
12104: LD_VAR 0 1
12108: PPUSH
12109: CALL_OW 261
12113: PUSH
12114: LD_INT 3
12116: LESS
12117: IFFALSE 12131
// SetFuel ( i , 3 ) ;
12119: LD_VAR 0 1
12123: PPUSH
12124: LD_INT 3
12126: PPUSH
12127: CALL_OW 240
12131: GO 12101
12133: POP
12134: POP
// end ;
12135: PPOPN 1
12137: END
// every 0 0$2 trigger FilterUnitsInArea ( southEndArea , [ f_side , enemySide ] ) do var i ;
12138: LD_INT 9
12140: PPUSH
12141: LD_INT 22
12143: PUSH
12144: LD_EXP 12
12148: PUSH
12149: EMPTY
12150: LIST
12151: LIST
12152: PPUSH
12153: CALL_OW 70
12157: IFFALSE 12220
12159: GO 12161
12161: DISABLE
12162: LD_INT 0
12164: PPUSH
// begin enable ;
12165: ENABLE
// for i in FilterUnitsInArea ( southEndArea , [ f_side , enemySide ] ) do
12166: LD_ADDR_VAR 0 1
12170: PUSH
12171: LD_INT 9
12173: PPUSH
12174: LD_INT 22
12176: PUSH
12177: LD_EXP 12
12181: PUSH
12182: EMPTY
12183: LIST
12184: LIST
12185: PPUSH
12186: CALL_OW 70
12190: PUSH
12191: FOR_IN
12192: IFFALSE 12218
// begin Multiplayer_AddPoints ( convoySide , - 250 ) ;
12194: LD_EXP 42
12198: PPUSH
12199: LD_INT 250
12201: NEG
12202: PPUSH
12203: CALL 8231 0 2
// RemoveUnit ( i ) ;
12207: LD_VAR 0 1
12211: PPUSH
12212: CALL_OW 64
// end ;
12216: GO 12191
12218: POP
12219: POP
// end ; end_of_file
12220: PPOPN 1
12222: END
// export convoys , convoyWave , convoySide ; export function PrepareConvoys ( side ) ; var i ; begin
12223: LD_INT 0
12225: PPUSH
12226: PPUSH
// convoys := [ ] ;
12227: LD_ADDR_EXP 40
12231: PUSH
12232: EMPTY
12233: ST_TO_ADDR
// convoySide := side ;
12234: LD_ADDR_EXP 42
12238: PUSH
12239: LD_VAR 0 1
12243: ST_TO_ADDR
// convoyWave := 1 ;
12244: LD_ADDR_EXP 41
12248: PUSH
12249: LD_INT 1
12251: ST_TO_ADDR
// for i := 1 to 8 do
12252: LD_ADDR_VAR 0 3
12256: PUSH
12257: DOUBLE
12258: LD_INT 1
12260: DEC
12261: ST_TO_ADDR
12262: LD_INT 8
12264: PUSH
12265: FOR_TO
12266: IFFALSE 12296
// if multi_sides [ i ] then
12268: LD_EXP 15
12272: PUSH
12273: LD_VAR 0 3
12277: ARRAY
12278: IFFALSE 12294
// ChangeSideFog ( i , side ) ;
12280: LD_VAR 0 3
12284: PPUSH
12285: LD_VAR 0 1
12289: PPUSH
12290: CALL_OW 343
12294: GO 12265
12296: POP
12297: POP
// end ;
12298: LD_VAR 0 2
12302: RET
// every 2 2$00 + 1 1$00 trigger game do var i , tmp ;
12303: LD_EXP 2
12307: IFFALSE 12342
12309: GO 12311
12311: DISABLE
12312: LD_INT 0
12314: PPUSH
12315: PPUSH
// begin enable ;
12316: ENABLE
// blockThread := true ;
12317: LD_ADDR_EXP 6
12321: PUSH
12322: LD_INT 1
12324: ST_TO_ADDR
// SendConvoy ( convoyWave ) ;
12325: LD_EXP 41
12329: PPUSH
12330: CALL 12345 0 1
// blockThread := false ;
12334: LD_ADDR_EXP 6
12338: PUSH
12339: LD_INT 0
12341: ST_TO_ADDR
// end ;
12342: PPOPN 2
12344: END
// function SendConvoy ( wave ) ; var i , skill , un , veh , tmp , path ; begin
12345: LD_INT 0
12347: PPUSH
12348: PPUSH
12349: PPUSH
12350: PPUSH
12351: PPUSH
12352: PPUSH
12353: PPUSH
// convoyWave := Inc ( wave ) ;
12354: LD_ADDR_EXP 41
12358: PUSH
12359: LD_VAR 0 1
12363: PPUSH
12364: CALL 54532 0 1
12368: ST_TO_ADDR
// skill := [ 5 , 4 , 3 ] [ Difficulty ] ;
12369: LD_ADDR_VAR 0 4
12373: PUSH
12374: LD_INT 5
12376: PUSH
12377: LD_INT 4
12379: PUSH
12380: LD_INT 3
12382: PUSH
12383: EMPTY
12384: LIST
12385: LIST
12386: LIST
12387: PUSH
12388: LD_OWVAR 67
12392: ARRAY
12393: ST_TO_ADDR
// tmp := [ ] ;
12394: LD_ADDR_VAR 0 7
12398: PUSH
12399: EMPTY
12400: ST_TO_ADDR
// if wave mod 5 = 0 then
12401: LD_VAR 0 1
12405: PUSH
12406: LD_INT 5
12408: MOD
12409: PUSH
12410: LD_INT 0
12412: EQUAL
12413: IFFALSE 12659
// begin path := [ [ 16 , 21 ] , [ 36 , 45 ] , [ 48 , 58 ] , [ 59 , 88 ] , [ 76 , 106 ] , [ 93 , 150 ] , [ 92 , 177 ] ] ;
12415: LD_ADDR_VAR 0 8
12419: PUSH
12420: LD_INT 16
12422: PUSH
12423: LD_INT 21
12425: PUSH
12426: EMPTY
12427: LIST
12428: LIST
12429: PUSH
12430: LD_INT 36
12432: PUSH
12433: LD_INT 45
12435: PUSH
12436: EMPTY
12437: LIST
12438: LIST
12439: PUSH
12440: LD_INT 48
12442: PUSH
12443: LD_INT 58
12445: PUSH
12446: EMPTY
12447: LIST
12448: LIST
12449: PUSH
12450: LD_INT 59
12452: PUSH
12453: LD_INT 88
12455: PUSH
12456: EMPTY
12457: LIST
12458: LIST
12459: PUSH
12460: LD_INT 76
12462: PUSH
12463: LD_INT 106
12465: PUSH
12466: EMPTY
12467: LIST
12468: LIST
12469: PUSH
12470: LD_INT 93
12472: PUSH
12473: LD_INT 150
12475: PUSH
12476: EMPTY
12477: LIST
12478: LIST
12479: PUSH
12480: LD_INT 92
12482: PUSH
12483: LD_INT 177
12485: PUSH
12486: EMPTY
12487: LIST
12488: LIST
12489: PUSH
12490: EMPTY
12491: LIST
12492: LIST
12493: LIST
12494: LIST
12495: LIST
12496: LIST
12497: LIST
12498: ST_TO_ADDR
// for i := 1 to 4 do
12499: LD_ADDR_VAR 0 3
12503: PUSH
12504: DOUBLE
12505: LD_INT 1
12507: DEC
12508: ST_TO_ADDR
12509: LD_INT 4
12511: PUSH
12512: FOR_TO
12513: IFFALSE 12655
// begin uc_side := convoySide ;
12515: LD_ADDR_OWVAR 20
12519: PUSH
12520: LD_EXP 42
12524: ST_TO_ADDR
// uc_nation := nation_russian ;
12525: LD_ADDR_OWVAR 21
12529: PUSH
12530: LD_INT 3
12532: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , skill ) ;
12533: LD_INT 0
12535: PPUSH
12536: LD_INT 1
12538: PPUSH
12539: LD_INT 4
12541: PPUSH
12542: CALL_OW 12
12546: PPUSH
12547: LD_VAR 0 4
12551: PPUSH
12552: CALL_OW 380
// un := CreateHuman ;
12556: LD_ADDR_VAR 0 5
12560: PUSH
12561: CALL_OW 44
12565: ST_TO_ADDR
// SetDir ( un , 3 ) ;
12566: LD_VAR 0 5
12570: PPUSH
12571: LD_INT 3
12573: PPUSH
12574: CALL_OW 233
// PlaceUnitArea ( un , northForestSpawnArea , false ) ;
12578: LD_VAR 0 5
12582: PPUSH
12583: LD_INT 10
12585: PPUSH
12586: LD_INT 0
12588: PPUSH
12589: CALL_OW 49
// SetLives ( un , rand ( 400 , 1000 ) ) ;
12593: LD_VAR 0 5
12597: PPUSH
12598: LD_INT 400
12600: PPUSH
12601: LD_INT 1000
12603: PPUSH
12604: CALL_OW 12
12608: PPUSH
12609: CALL_OW 234
// convoys := Join ( convoys , un ) ;
12613: LD_ADDR_EXP 40
12617: PUSH
12618: LD_EXP 40
12622: PPUSH
12623: LD_VAR 0 5
12627: PPUSH
12628: CALL 53171 0 2
12632: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
12633: LD_ADDR_VAR 0 7
12637: PUSH
12638: LD_VAR 0 7
12642: PPUSH
12643: LD_VAR 0 5
12647: PPUSH
12648: CALL 53171 0 2
12652: ST_TO_ADDR
// end ;
12653: GO 12512
12655: POP
12656: POP
// end else
12657: GO 13840
// if wave mod 3 = 0 then
12659: LD_VAR 0 1
12663: PUSH
12664: LD_INT 3
12666: MOD
12667: PUSH
12668: LD_INT 0
12670: EQUAL
12671: IFFALSE 13161
// begin path := [ [ 133 , 15 ] , [ 125 , 34 ] , [ 109 , 55 ] , [ 99 , 64 ] , [ 133 , 102 ] , [ 143 , 136 ] , [ 127 , 154 ] , [ 92 , 152 ] , [ 93 , 177 ] ] ;
12673: LD_ADDR_VAR 0 8
12677: PUSH
12678: LD_INT 133
12680: PUSH
12681: LD_INT 15
12683: PUSH
12684: EMPTY
12685: LIST
12686: LIST
12687: PUSH
12688: LD_INT 125
12690: PUSH
12691: LD_INT 34
12693: PUSH
12694: EMPTY
12695: LIST
12696: LIST
12697: PUSH
12698: LD_INT 109
12700: PUSH
12701: LD_INT 55
12703: PUSH
12704: EMPTY
12705: LIST
12706: LIST
12707: PUSH
12708: LD_INT 99
12710: PUSH
12711: LD_INT 64
12713: PUSH
12714: EMPTY
12715: LIST
12716: LIST
12717: PUSH
12718: LD_INT 133
12720: PUSH
12721: LD_INT 102
12723: PUSH
12724: EMPTY
12725: LIST
12726: LIST
12727: PUSH
12728: LD_INT 143
12730: PUSH
12731: LD_INT 136
12733: PUSH
12734: EMPTY
12735: LIST
12736: LIST
12737: PUSH
12738: LD_INT 127
12740: PUSH
12741: LD_INT 154
12743: PUSH
12744: EMPTY
12745: LIST
12746: LIST
12747: PUSH
12748: LD_INT 92
12750: PUSH
12751: LD_INT 152
12753: PUSH
12754: EMPTY
12755: LIST
12756: LIST
12757: PUSH
12758: LD_INT 93
12760: PUSH
12761: LD_INT 177
12763: PUSH
12764: EMPTY
12765: LIST
12766: LIST
12767: PUSH
12768: EMPTY
12769: LIST
12770: LIST
12771: LIST
12772: LIST
12773: LIST
12774: LIST
12775: LIST
12776: LIST
12777: LIST
12778: ST_TO_ADDR
// for i := 1 to 4 do
12779: LD_ADDR_VAR 0 3
12783: PUSH
12784: DOUBLE
12785: LD_INT 1
12787: DEC
12788: ST_TO_ADDR
12789: LD_INT 4
12791: PUSH
12792: FOR_TO
12793: IFFALSE 13157
// begin uc_side := convoySide ;
12795: LD_ADDR_OWVAR 20
12799: PUSH
12800: LD_EXP 42
12804: ST_TO_ADDR
// uc_nation := nation_russian ;
12805: LD_ADDR_OWVAR 21
12809: PUSH
12810: LD_INT 3
12812: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , skill ) ;
12813: LD_INT 0
12815: PPUSH
12816: LD_INT 1
12818: PPUSH
12819: LD_INT 4
12821: PPUSH
12822: CALL_OW 12
12826: PPUSH
12827: LD_VAR 0 4
12831: PPUSH
12832: CALL_OW 380
// un := CreateHuman ;
12836: LD_ADDR_VAR 0 5
12840: PUSH
12841: CALL_OW 44
12845: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_wheeled , ru_medium_tracked ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_cargo_bay , ru_gun ] [ rand ( 1 , 4 ) ] , rand ( 60 , 90 ) ) ;
12846: LD_INT 21
12848: PUSH
12849: LD_INT 22
12851: PUSH
12852: EMPTY
12853: LIST
12854: LIST
12855: PUSH
12856: LD_INT 1
12858: PPUSH
12859: LD_INT 2
12861: PPUSH
12862: CALL_OW 12
12866: ARRAY
12867: PPUSH
12868: LD_INT 1
12870: PPUSH
12871: LD_INT 1
12873: PPUSH
12874: LD_INT 42
12876: PUSH
12877: LD_INT 43
12879: PUSH
12880: LD_INT 51
12882: PUSH
12883: LD_INT 44
12885: PUSH
12886: EMPTY
12887: LIST
12888: LIST
12889: LIST
12890: LIST
12891: PUSH
12892: LD_INT 1
12894: PPUSH
12895: LD_INT 4
12897: PPUSH
12898: CALL_OW 12
12902: ARRAY
12903: PPUSH
12904: LD_INT 60
12906: PPUSH
12907: LD_INT 90
12909: PPUSH
12910: CALL_OW 12
12914: PPUSH
12915: CALL 20300 0 5
// veh := CreateVehicle ;
12919: LD_ADDR_VAR 0 6
12923: PUSH
12924: CALL_OW 45
12928: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
12929: LD_VAR 0 6
12933: PPUSH
12934: LD_INT 3
12936: PPUSH
12937: CALL_OW 233
// SetLives ( veh , rand ( 400 , 1000 ) ) ;
12941: LD_VAR 0 6
12945: PPUSH
12946: LD_INT 400
12948: PPUSH
12949: LD_INT 1000
12951: PPUSH
12952: CALL_OW 12
12956: PPUSH
12957: CALL_OW 234
// if GetWeapon ( veh ) = ru_cargo_bay then
12961: LD_VAR 0 6
12965: PPUSH
12966: CALL_OW 264
12970: PUSH
12971: LD_INT 51
12973: EQUAL
12974: IFFALSE 13022
// SetCargo ( veh , [ mat_cans , mat_oil ] [ rand ( 1 , 2 ) ] , 10 * rand ( 1 , 10 ) ) ;
12976: LD_VAR 0 6
12980: PPUSH
12981: LD_INT 1
12983: PUSH
12984: LD_INT 2
12986: PUSH
12987: EMPTY
12988: LIST
12989: LIST
12990: PUSH
12991: LD_INT 1
12993: PPUSH
12994: LD_INT 2
12996: PPUSH
12997: CALL_OW 12
13001: ARRAY
13002: PPUSH
13003: LD_INT 10
13005: PUSH
13006: LD_INT 1
13008: PPUSH
13009: LD_INT 10
13011: PPUSH
13012: CALL_OW 12
13016: MUL
13017: PPUSH
13018: CALL_OW 290
// repeat wait ( 0 0$0.3 ) ;
13022: LD_INT 10
13024: PPUSH
13025: CALL_OW 67
// until PlaceUnitArea ( veh , northSpawnArea , false ) ;
13029: LD_VAR 0 6
13033: PPUSH
13034: LD_INT 7
13036: PPUSH
13037: LD_INT 0
13039: PPUSH
13040: CALL_OW 49
13044: IFFALSE 13022
// PlaceHumanInUnit ( un , veh ) ;
13046: LD_VAR 0 5
13050: PPUSH
13051: LD_VAR 0 6
13055: PPUSH
13056: CALL_OW 52
// convoys := Join ( convoys , un ) ;
13060: LD_ADDR_EXP 40
13064: PUSH
13065: LD_EXP 40
13069: PPUSH
13070: LD_VAR 0 5
13074: PPUSH
13075: CALL 53171 0 2
13079: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
13080: LD_ADDR_VAR 0 7
13084: PUSH
13085: LD_VAR 0 7
13089: PPUSH
13090: LD_VAR 0 5
13094: PPUSH
13095: CALL 53171 0 2
13099: ST_TO_ADDR
// convoys := Join ( convoys , veh ) ;
13100: LD_ADDR_EXP 40
13104: PUSH
13105: LD_EXP 40
13109: PPUSH
13110: LD_VAR 0 6
13114: PPUSH
13115: CALL 53171 0 2
13119: ST_TO_ADDR
// tmp := Join ( tmp , veh ) ;
13120: LD_ADDR_VAR 0 7
13124: PUSH
13125: LD_VAR 0 7
13129: PPUSH
13130: LD_VAR 0 6
13134: PPUSH
13135: CALL 53171 0 2
13139: ST_TO_ADDR
// ComMoveXY ( un , 133 , 15 ) ;
13140: LD_VAR 0 5
13144: PPUSH
13145: LD_INT 133
13147: PPUSH
13148: LD_INT 15
13150: PPUSH
13151: CALL_OW 111
// end ;
13155: GO 12792
13157: POP
13158: POP
// end else
13159: GO 13840
// begin path := [ [ 133 , 15 ] , [ 125 , 34 ] , [ 109 , 55 ] , [ 99 , 64 ] , [ 88 , 70 ] , [ 74 , 78 ] , [ 70 , 91 ] , [ 80 , 113 ] , [ 89 , 133 ] , [ 91 , 159 ] , [ 93 , 177 ] ] ;
13161: LD_ADDR_VAR 0 8
13165: PUSH
13166: LD_INT 133
13168: PUSH
13169: LD_INT 15
13171: PUSH
13172: EMPTY
13173: LIST
13174: LIST
13175: PUSH
13176: LD_INT 125
13178: PUSH
13179: LD_INT 34
13181: PUSH
13182: EMPTY
13183: LIST
13184: LIST
13185: PUSH
13186: LD_INT 109
13188: PUSH
13189: LD_INT 55
13191: PUSH
13192: EMPTY
13193: LIST
13194: LIST
13195: PUSH
13196: LD_INT 99
13198: PUSH
13199: LD_INT 64
13201: PUSH
13202: EMPTY
13203: LIST
13204: LIST
13205: PUSH
13206: LD_INT 88
13208: PUSH
13209: LD_INT 70
13211: PUSH
13212: EMPTY
13213: LIST
13214: LIST
13215: PUSH
13216: LD_INT 74
13218: PUSH
13219: LD_INT 78
13221: PUSH
13222: EMPTY
13223: LIST
13224: LIST
13225: PUSH
13226: LD_INT 70
13228: PUSH
13229: LD_INT 91
13231: PUSH
13232: EMPTY
13233: LIST
13234: LIST
13235: PUSH
13236: LD_INT 80
13238: PUSH
13239: LD_INT 113
13241: PUSH
13242: EMPTY
13243: LIST
13244: LIST
13245: PUSH
13246: LD_INT 89
13248: PUSH
13249: LD_INT 133
13251: PUSH
13252: EMPTY
13253: LIST
13254: LIST
13255: PUSH
13256: LD_INT 91
13258: PUSH
13259: LD_INT 159
13261: PUSH
13262: EMPTY
13263: LIST
13264: LIST
13265: PUSH
13266: LD_INT 93
13268: PUSH
13269: LD_INT 177
13271: PUSH
13272: EMPTY
13273: LIST
13274: LIST
13275: PUSH
13276: EMPTY
13277: LIST
13278: LIST
13279: LIST
13280: LIST
13281: LIST
13282: LIST
13283: LIST
13284: LIST
13285: LIST
13286: LIST
13287: LIST
13288: ST_TO_ADDR
// for i := 1 to 2 do
13289: LD_ADDR_VAR 0 3
13293: PUSH
13294: DOUBLE
13295: LD_INT 1
13297: DEC
13298: ST_TO_ADDR
13299: LD_INT 2
13301: PUSH
13302: FOR_TO
13303: IFFALSE 13648
// begin uc_side := convoySide ;
13305: LD_ADDR_OWVAR 20
13309: PUSH
13310: LD_EXP 42
13314: ST_TO_ADDR
// uc_nation := nation_russian ;
13315: LD_ADDR_OWVAR 21
13319: PUSH
13320: LD_INT 3
13322: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , skill ) ;
13323: LD_INT 0
13325: PPUSH
13326: LD_INT 1
13328: PPUSH
13329: LD_INT 4
13331: PPUSH
13332: CALL_OW 12
13336: PPUSH
13337: LD_VAR 0 4
13341: PPUSH
13342: CALL_OW 380
// un := CreateHuman ;
13346: LD_ADDR_VAR 0 5
13350: PUSH
13351: CALL_OW 44
13355: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_wheeled , ru_medium_tracked ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_cargo_bay , ru_gun ] [ rand ( 1 , 4 ) ] , rand ( 70 , 90 ) ) ;
13356: LD_INT 21
13358: PUSH
13359: LD_INT 22
13361: PUSH
13362: EMPTY
13363: LIST
13364: LIST
13365: PUSH
13366: LD_INT 1
13368: PPUSH
13369: LD_INT 2
13371: PPUSH
13372: CALL_OW 12
13376: ARRAY
13377: PPUSH
13378: LD_INT 1
13380: PPUSH
13381: LD_INT 1
13383: PPUSH
13384: LD_INT 42
13386: PUSH
13387: LD_INT 43
13389: PUSH
13390: LD_INT 51
13392: PUSH
13393: LD_INT 44
13395: PUSH
13396: EMPTY
13397: LIST
13398: LIST
13399: LIST
13400: LIST
13401: PUSH
13402: LD_INT 1
13404: PPUSH
13405: LD_INT 4
13407: PPUSH
13408: CALL_OW 12
13412: ARRAY
13413: PPUSH
13414: LD_INT 70
13416: PPUSH
13417: LD_INT 90
13419: PPUSH
13420: CALL_OW 12
13424: PPUSH
13425: CALL 20300 0 5
// veh := CreateVehicle ;
13429: LD_ADDR_VAR 0 6
13433: PUSH
13434: CALL_OW 45
13438: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
13439: LD_VAR 0 6
13443: PPUSH
13444: LD_INT 3
13446: PPUSH
13447: CALL_OW 233
// SetLives ( veh , rand ( 400 , 1000 ) ) ;
13451: LD_VAR 0 6
13455: PPUSH
13456: LD_INT 400
13458: PPUSH
13459: LD_INT 1000
13461: PPUSH
13462: CALL_OW 12
13466: PPUSH
13467: CALL_OW 234
// if GetWeapon ( veh ) = ru_cargo_bay then
13471: LD_VAR 0 6
13475: PPUSH
13476: CALL_OW 264
13480: PUSH
13481: LD_INT 51
13483: EQUAL
13484: IFFALSE 13513
// SetCargo ( veh , mat_cans , 10 * rand ( 1 , 10 ) ) ;
13486: LD_VAR 0 6
13490: PPUSH
13491: LD_INT 1
13493: PPUSH
13494: LD_INT 10
13496: PUSH
13497: LD_INT 1
13499: PPUSH
13500: LD_INT 10
13502: PPUSH
13503: CALL_OW 12
13507: MUL
13508: PPUSH
13509: CALL_OW 290
// repeat wait ( 0 0$0.3 ) ;
13513: LD_INT 10
13515: PPUSH
13516: CALL_OW 67
// until PlaceUnitArea ( veh , northSpawnArea , false ) ;
13520: LD_VAR 0 6
13524: PPUSH
13525: LD_INT 7
13527: PPUSH
13528: LD_INT 0
13530: PPUSH
13531: CALL_OW 49
13535: IFFALSE 13513
// PlaceHumanInUnit ( un , veh ) ;
13537: LD_VAR 0 5
13541: PPUSH
13542: LD_VAR 0 6
13546: PPUSH
13547: CALL_OW 52
// convoys := Join ( convoys , un ) ;
13551: LD_ADDR_EXP 40
13555: PUSH
13556: LD_EXP 40
13560: PPUSH
13561: LD_VAR 0 5
13565: PPUSH
13566: CALL 53171 0 2
13570: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
13571: LD_ADDR_VAR 0 7
13575: PUSH
13576: LD_VAR 0 7
13580: PPUSH
13581: LD_VAR 0 5
13585: PPUSH
13586: CALL 53171 0 2
13590: ST_TO_ADDR
// convoys := Join ( convoys , veh ) ;
13591: LD_ADDR_EXP 40
13595: PUSH
13596: LD_EXP 40
13600: PPUSH
13601: LD_VAR 0 6
13605: PPUSH
13606: CALL 53171 0 2
13610: ST_TO_ADDR
// tmp := Join ( tmp , veh ) ;
13611: LD_ADDR_VAR 0 7
13615: PUSH
13616: LD_VAR 0 7
13620: PPUSH
13621: LD_VAR 0 6
13625: PPUSH
13626: CALL 53171 0 2
13630: ST_TO_ADDR
// ComMoveXY ( un , 133 , 15 ) ;
13631: LD_VAR 0 5
13635: PPUSH
13636: LD_INT 133
13638: PPUSH
13639: LD_INT 15
13641: PPUSH
13642: CALL_OW 111
// end ;
13646: GO 13302
13648: POP
13649: POP
// for i := 1 to rand ( 3 , 5 ) do
13650: LD_ADDR_VAR 0 3
13654: PUSH
13655: DOUBLE
13656: LD_INT 1
13658: DEC
13659: ST_TO_ADDR
13660: LD_INT 3
13662: PPUSH
13663: LD_INT 5
13665: PPUSH
13666: CALL_OW 12
13670: PUSH
13671: FOR_TO
13672: IFFALSE 13838
// begin uc_side := convoySide ;
13674: LD_ADDR_OWVAR 20
13678: PUSH
13679: LD_EXP 42
13683: ST_TO_ADDR
// uc_nation := nation_russian ;
13684: LD_ADDR_OWVAR 21
13688: PUSH
13689: LD_INT 3
13691: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , skill ) ;
13692: LD_INT 0
13694: PPUSH
13695: LD_INT 1
13697: PPUSH
13698: LD_INT 4
13700: PPUSH
13701: CALL_OW 12
13705: PPUSH
13706: LD_VAR 0 4
13710: PPUSH
13711: CALL_OW 380
// un := CreateHuman ;
13715: LD_ADDR_VAR 0 5
13719: PUSH
13720: CALL_OW 44
13724: ST_TO_ADDR
// SetDir ( un , 3 ) ;
13725: LD_VAR 0 5
13729: PPUSH
13730: LD_INT 3
13732: PPUSH
13733: CALL_OW 233
// repeat wait ( 0 0$1 ) ;
13737: LD_INT 35
13739: PPUSH
13740: CALL_OW 67
// until PlaceUnitArea ( un , northSpawnArea , false ) ;
13744: LD_VAR 0 5
13748: PPUSH
13749: LD_INT 7
13751: PPUSH
13752: LD_INT 0
13754: PPUSH
13755: CALL_OW 49
13759: IFFALSE 13737
// SetLives ( un , rand ( 400 , 1000 ) ) ;
13761: LD_VAR 0 5
13765: PPUSH
13766: LD_INT 400
13768: PPUSH
13769: LD_INT 1000
13771: PPUSH
13772: CALL_OW 12
13776: PPUSH
13777: CALL_OW 234
// convoys := Join ( convoys , un ) ;
13781: LD_ADDR_EXP 40
13785: PUSH
13786: LD_EXP 40
13790: PPUSH
13791: LD_VAR 0 5
13795: PPUSH
13796: CALL 53171 0 2
13800: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
13801: LD_ADDR_VAR 0 7
13805: PUSH
13806: LD_VAR 0 7
13810: PPUSH
13811: LD_VAR 0 5
13815: PPUSH
13816: CALL 53171 0 2
13820: ST_TO_ADDR
// ComMoveXY ( un , 133 , 15 ) ;
13821: LD_VAR 0 5
13825: PPUSH
13826: LD_INT 133
13828: PPUSH
13829: LD_INT 15
13831: PPUSH
13832: CALL_OW 111
// end ;
13836: GO 13671
13838: POP
13839: POP
// end ; if not tmp then
13840: LD_VAR 0 7
13844: NOT
13845: IFFALSE 13849
// exit ;
13847: GO 14155
// repeat wait ( 0 0$1 ) ;
13849: LD_INT 35
13851: PPUSH
13852: CALL_OW 67
// for i in tmp do
13856: LD_ADDR_VAR 0 3
13860: PUSH
13861: LD_VAR 0 7
13865: PUSH
13866: FOR_IN
13867: IFFALSE 14146
// begin if IsDead ( i ) then
13869: LD_VAR 0 3
13873: PPUSH
13874: CALL_OW 301
13878: IFFALSE 13898
// tmp := tmp diff i else
13880: LD_ADDR_VAR 0 7
13884: PUSH
13885: LD_VAR 0 7
13889: PUSH
13890: LD_VAR 0 3
13894: DIFF
13895: ST_TO_ADDR
13896: GO 14144
// if IsInArea ( i , southEndArea ) then
13898: LD_VAR 0 3
13902: PPUSH
13903: LD_INT 9
13905: PPUSH
13906: CALL_OW 308
13910: IFFALSE 14063
// begin tmp := tmp diff i ;
13912: LD_ADDR_VAR 0 7
13916: PUSH
13917: LD_VAR 0 7
13921: PUSH
13922: LD_VAR 0 3
13926: DIFF
13927: ST_TO_ADDR
// convoys := convoys diff i ;
13928: LD_ADDR_EXP 40
13932: PUSH
13933: LD_EXP 40
13937: PUSH
13938: LD_VAR 0 3
13942: DIFF
13943: ST_TO_ADDR
// if GetType ( i ) = unit_human then
13944: LD_VAR 0 3
13948: PPUSH
13949: CALL_OW 247
13953: PUSH
13954: LD_INT 1
13956: EQUAL
13957: IFFALSE 13978
// Multiplayer_AddPoints ( convoySide , Multiplayer_GetCondition ( 7 ) ) else
13959: LD_EXP 42
13963: PPUSH
13964: LD_INT 7
13966: PPUSH
13967: CALL 8389 0 1
13971: PPUSH
13972: CALL 8231 0 2
13976: GO 14037
// begin tmp := tmp diff IsInUnit ( i ) ;
13978: LD_ADDR_VAR 0 7
13982: PUSH
13983: LD_VAR 0 7
13987: PUSH
13988: LD_VAR 0 3
13992: PPUSH
13993: CALL_OW 310
13997: DIFF
13998: ST_TO_ADDR
// convoys := convoys diff IsInUnit ( i ) ;
13999: LD_ADDR_EXP 40
14003: PUSH
14004: LD_EXP 40
14008: PUSH
14009: LD_VAR 0 3
14013: PPUSH
14014: CALL_OW 310
14018: DIFF
14019: ST_TO_ADDR
// Multiplayer_AddPoints ( convoySide , Multiplayer_GetCondition ( 8 ) ) ;
14020: LD_EXP 42
14024: PPUSH
14025: LD_INT 8
14027: PPUSH
14028: CALL 8389 0 1
14032: PPUSH
14033: CALL 8231 0 2
// end ; RemoveUnit ( i ) ;
14037: LD_VAR 0 3
14041: PPUSH
14042: CALL_OW 64
// savedConvoyUnits := Inc ( savedConvoyUnits ) ;
14046: LD_ADDR_EXP 5
14050: PUSH
14051: LD_EXP 5
14055: PPUSH
14056: CALL 54532 0 1
14060: ST_TO_ADDR
// end else
14061: GO 14144
// if GetType ( i ) = unit_vehicle and GetFuel ( i ) = 0 then
14063: LD_VAR 0 3
14067: PPUSH
14068: CALL_OW 247
14072: PUSH
14073: LD_INT 2
14075: EQUAL
14076: PUSH
14077: LD_VAR 0 3
14081: PPUSH
14082: CALL_OW 261
14086: PUSH
14087: LD_INT 0
14089: EQUAL
14090: AND
14091: IFFALSE 14127
// begin tmp := tmp diff i ;
14093: LD_ADDR_VAR 0 7
14097: PUSH
14098: LD_VAR 0 7
14102: PUSH
14103: LD_VAR 0 3
14107: DIFF
14108: ST_TO_ADDR
// convoys := convoys diff i ;
14109: LD_ADDR_EXP 40
14113: PUSH
14114: LD_EXP 40
14118: PUSH
14119: LD_VAR 0 3
14123: DIFF
14124: ST_TO_ADDR
// end else
14125: GO 14144
// MoveTo ( i , path , southEndArea ) ;
14127: LD_VAR 0 3
14131: PPUSH
14132: LD_VAR 0 8
14136: PPUSH
14137: LD_INT 9
14139: PPUSH
14140: CALL 14160 0 3
// end ;
14144: GO 13866
14146: POP
14147: POP
// until not tmp ;
14148: LD_VAR 0 7
14152: NOT
14153: IFFALSE 13849
// end ;
14155: LD_VAR 0 2
14159: RET
// function MoveTo ( unit , path , area ) ; var cr , tag , type , vehicle , ignoreCratesWeapon ; begin
14160: LD_INT 0
14162: PPUSH
14163: PPUSH
14164: PPUSH
14165: PPUSH
14166: PPUSH
14167: PPUSH
// if not unit then
14168: LD_VAR 0 1
14172: NOT
14173: IFFALSE 14177
// exit ;
14175: GO 14937
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser , ru_cargo_bay ] ;
14177: LD_ADDR_VAR 0 9
14181: PUSH
14182: LD_INT 29
14184: PUSH
14185: LD_INT 91
14187: PUSH
14188: LD_INT 49
14190: PUSH
14191: LD_INT 51
14193: PUSH
14194: EMPTY
14195: LIST
14196: LIST
14197: LIST
14198: LIST
14199: ST_TO_ADDR
// if IsOk ( unit ) then
14200: LD_VAR 0 1
14204: PPUSH
14205: CALL_OW 302
14209: IFFALSE 14937
// begin tag := GetTag ( unit ) + 1 ;
14211: LD_ADDR_VAR 0 6
14215: PUSH
14216: LD_VAR 0 1
14220: PPUSH
14221: CALL_OW 110
14225: PUSH
14226: LD_INT 1
14228: PLUS
14229: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( unit ) , GetY ( unit ) , 3 ) ;
14230: LD_ADDR_VAR 0 5
14234: PUSH
14235: LD_VAR 0 1
14239: PPUSH
14240: CALL_OW 250
14244: PPUSH
14245: LD_VAR 0 1
14249: PPUSH
14250: CALL_OW 251
14254: PPUSH
14255: LD_INT 3
14257: PPUSH
14258: CALL 55523 0 3
14262: ST_TO_ADDR
// type := GetType ( unit ) ;
14263: LD_ADDR_VAR 0 7
14267: PUSH
14268: LD_VAR 0 1
14272: PPUSH
14273: CALL_OW 247
14277: ST_TO_ADDR
// if type = unit_human then
14278: LD_VAR 0 7
14282: PUSH
14283: LD_INT 1
14285: EQUAL
14286: IFFALSE 14376
// begin vehicle := IsInUnit ( unit ) ;
14288: LD_ADDR_VAR 0 8
14292: PUSH
14293: LD_VAR 0 1
14297: PPUSH
14298: CALL_OW 310
14302: ST_TO_ADDR
// if vehicle and GetFuel ( vehicle ) = 0 then
14303: LD_VAR 0 8
14307: PUSH
14308: LD_VAR 0 8
14312: PPUSH
14313: CALL_OW 261
14317: PUSH
14318: LD_INT 0
14320: EQUAL
14321: AND
14322: IFFALSE 14374
// begin ComExitVehicle ( unit ) ;
14324: LD_VAR 0 1
14328: PPUSH
14329: CALL_OW 121
// AddComMoveXY ( unit , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) ;
14333: LD_VAR 0 1
14337: PPUSH
14338: LD_VAR 0 2
14342: PUSH
14343: LD_VAR 0 6
14347: ARRAY
14348: PUSH
14349: LD_INT 1
14351: ARRAY
14352: PPUSH
14353: LD_VAR 0 2
14357: PUSH
14358: LD_VAR 0 6
14362: ARRAY
14363: PUSH
14364: LD_INT 2
14366: ARRAY
14367: PPUSH
14368: CALL_OW 171
// exit ;
14372: GO 14937
// end ; end else
14374: GO 14451
// begin if GetFuel ( unit ) = 0 then
14376: LD_VAR 0 1
14380: PPUSH
14381: CALL_OW 261
14385: PUSH
14386: LD_INT 0
14388: EQUAL
14389: IFFALSE 14451
// begin ComExitVehicle ( IsDrivenBy ( unit ) ) ;
14391: LD_VAR 0 1
14395: PPUSH
14396: CALL_OW 311
14400: PPUSH
14401: CALL_OW 121
// AddComMoveXY ( IsDrivenBy ( unit ) , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) ;
14405: LD_VAR 0 1
14409: PPUSH
14410: CALL_OW 311
14414: PPUSH
14415: LD_VAR 0 2
14419: PUSH
14420: LD_VAR 0 6
14424: ARRAY
14425: PUSH
14426: LD_INT 1
14428: ARRAY
14429: PPUSH
14430: LD_VAR 0 2
14434: PUSH
14435: LD_VAR 0 6
14439: ARRAY
14440: PUSH
14441: LD_INT 2
14443: ARRAY
14444: PPUSH
14445: CALL_OW 171
// exit ;
14449: GO 14937
// end ; end ; if type = unit_vehicle and GetWeapon ( unit ) = ru_cargo_bay and IsInArea ( unit , cargoCheckpointArea ) and ( GetCargo ( unit , mat_cans ) or GetCargo ( unit , mat_oil ) ) then
14451: LD_VAR 0 7
14455: PUSH
14456: LD_INT 2
14458: EQUAL
14459: PUSH
14460: LD_VAR 0 1
14464: PPUSH
14465: CALL_OW 264
14469: PUSH
14470: LD_INT 51
14472: EQUAL
14473: AND
14474: PUSH
14475: LD_VAR 0 1
14479: PPUSH
14480: LD_INT 29
14482: PPUSH
14483: CALL_OW 308
14487: AND
14488: PUSH
14489: LD_VAR 0 1
14493: PPUSH
14494: LD_INT 1
14496: PPUSH
14497: CALL_OW 289
14501: PUSH
14502: LD_VAR 0 1
14506: PPUSH
14507: LD_INT 2
14509: PPUSH
14510: CALL_OW 289
14514: OR
14515: AND
14516: IFFALSE 14564
// begin goToUnload := Join ( goToUnload , unit ) ;
14518: LD_ADDR_EXP 8
14522: PUSH
14523: LD_EXP 8
14527: PPUSH
14528: LD_VAR 0 1
14532: PPUSH
14533: CALL 53171 0 2
14537: ST_TO_ADDR
// ComMoveXY ( unit , 113 , 117 ) ;
14538: LD_VAR 0 1
14542: PPUSH
14543: LD_INT 113
14545: PPUSH
14546: LD_INT 117
14548: PPUSH
14549: CALL_OW 111
// AddComUnload ( unit ) ;
14553: LD_VAR 0 1
14557: PPUSH
14558: CALL_OW 219
// exit ;
14562: GO 14937
// end ; if unit in goToUnload then
14564: LD_VAR 0 1
14568: PUSH
14569: LD_EXP 8
14573: IN
14574: IFFALSE 14650
// begin if GetCargo ( unit , mat_cans ) = 0 and GetCargo ( unit , mat_oil ) = 0 then
14576: LD_VAR 0 1
14580: PPUSH
14581: LD_INT 1
14583: PPUSH
14584: CALL_OW 289
14588: PUSH
14589: LD_INT 0
14591: EQUAL
14592: PUSH
14593: LD_VAR 0 1
14597: PPUSH
14598: LD_INT 2
14600: PPUSH
14601: CALL_OW 289
14605: PUSH
14606: LD_INT 0
14608: EQUAL
14609: AND
14610: IFFALSE 14648
// begin SetTag ( unit , tag + 2 ) ;
14612: LD_VAR 0 1
14616: PPUSH
14617: LD_VAR 0 6
14621: PUSH
14622: LD_INT 2
14624: PLUS
14625: PPUSH
14626: CALL_OW 109
// goToUnload := goToUnload diff unit ;
14630: LD_ADDR_EXP 8
14634: PUSH
14635: LD_EXP 8
14639: PUSH
14640: LD_VAR 0 1
14644: DIFF
14645: ST_TO_ADDR
// end else
14646: GO 14650
// exit ;
14648: GO 14937
// end ; if type = unit_vehicle and cr > 3 and not GetWeapon ( unit ) in ignoreCratesWeapon then
14650: LD_VAR 0 7
14654: PUSH
14655: LD_INT 2
14657: EQUAL
14658: PUSH
14659: LD_VAR 0 5
14663: PUSH
14664: LD_INT 3
14666: GREATER
14667: AND
14668: PUSH
14669: LD_VAR 0 1
14673: PPUSH
14674: CALL_OW 264
14678: PUSH
14679: LD_VAR 0 9
14683: IN
14684: NOT
14685: AND
14686: IFFALSE 14725
// ComAttackPlace ( unit , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
14688: LD_VAR 0 1
14692: PPUSH
14693: LD_VAR 0 5
14697: PUSH
14698: LD_INT 1
14700: ARRAY
14701: PUSH
14702: LD_INT 1
14704: ARRAY
14705: PPUSH
14706: LD_VAR 0 5
14710: PUSH
14711: LD_INT 1
14713: ARRAY
14714: PUSH
14715: LD_INT 2
14717: ARRAY
14718: PPUSH
14719: CALL_OW 116
14723: GO 14937
// if path > tag then
14725: LD_VAR 0 2
14729: PUSH
14730: LD_VAR 0 6
14734: GREATER
14735: IFFALSE 14906
// begin if GetDistUnitXY ( unit , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
14737: LD_VAR 0 1
14741: PPUSH
14742: LD_VAR 0 2
14746: PUSH
14747: LD_VAR 0 6
14751: ARRAY
14752: PUSH
14753: LD_INT 1
14755: ARRAY
14756: PPUSH
14757: LD_VAR 0 2
14761: PUSH
14762: LD_VAR 0 6
14766: ARRAY
14767: PUSH
14768: LD_INT 2
14770: ARRAY
14771: PPUSH
14772: CALL_OW 297
14776: PUSH
14777: LD_INT 6
14779: GREATER
14780: IFFALSE 14890
// if GetClass ( unit ) in [ 2 , 3 , 4 ] then
14782: LD_VAR 0 1
14786: PPUSH
14787: CALL_OW 257
14791: PUSH
14792: LD_INT 2
14794: PUSH
14795: LD_INT 3
14797: PUSH
14798: LD_INT 4
14800: PUSH
14801: EMPTY
14802: LIST
14803: LIST
14804: LIST
14805: IN
14806: IFFALSE 14849
// ComMoveXY ( unit , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
14808: LD_VAR 0 1
14812: PPUSH
14813: LD_VAR 0 2
14817: PUSH
14818: LD_VAR 0 6
14822: ARRAY
14823: PUSH
14824: LD_INT 1
14826: ARRAY
14827: PPUSH
14828: LD_VAR 0 2
14832: PUSH
14833: LD_VAR 0 6
14837: ARRAY
14838: PUSH
14839: LD_INT 2
14841: ARRAY
14842: PPUSH
14843: CALL_OW 111
14847: GO 14888
// ComAgressiveMove ( unit , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
14849: LD_VAR 0 1
14853: PPUSH
14854: LD_VAR 0 2
14858: PUSH
14859: LD_VAR 0 6
14863: ARRAY
14864: PUSH
14865: LD_INT 1
14867: ARRAY
14868: PPUSH
14869: LD_VAR 0 2
14873: PUSH
14874: LD_VAR 0 6
14878: ARRAY
14879: PUSH
14880: LD_INT 2
14882: ARRAY
14883: PPUSH
14884: CALL_OW 114
14888: GO 14904
// SetTag ( unit , tag ) ;
14890: LD_VAR 0 1
14894: PPUSH
14895: LD_VAR 0 6
14899: PPUSH
14900: CALL_OW 109
// end else
14904: GO 14937
// if not IsInArea ( unit , area ) then
14906: LD_VAR 0 1
14910: PPUSH
14911: LD_VAR 0 3
14915: PPUSH
14916: CALL_OW 308
14920: NOT
14921: IFFALSE 14937
// ComMoveToArea ( unit , area ) ;
14923: LD_VAR 0 1
14927: PPUSH
14928: LD_VAR 0 3
14932: PPUSH
14933: CALL_OW 113
// end ; end ; end_of_file
14937: LD_VAR 0 4
14941: RET
// every 0 0$20 trigger game do
14942: LD_EXP 2
14946: IFFALSE 14987
14948: GO 14950
14950: DISABLE
// SpawnCrates ( [ cratesWestArea , cratesEastArea , cratesMiddleArea ] , multi_crates_spawn [ 2 ] , multi_crates_spawn [ 1 ] ) ;
14951: LD_INT 11
14953: PUSH
14954: LD_INT 12
14956: PUSH
14957: LD_INT 13
14959: PUSH
14960: EMPTY
14961: LIST
14962: LIST
14963: LIST
14964: PPUSH
14965: LD_EXP 29
14969: PUSH
14970: LD_INT 2
14972: ARRAY
14973: PPUSH
14974: LD_EXP 29
14978: PUSH
14979: LD_INT 1
14981: ARRAY
14982: PPUSH
14983: CALL 14988 0 3
14987: END
// export function SpawnCrates ( areas , time , amount ) ; var i , x ; begin
14988: LD_INT 0
14990: PPUSH
14991: PPUSH
14992: PPUSH
// if not areas then
14993: LD_VAR 0 1
14997: NOT
14998: IFFALSE 15002
// exit ;
15000: GO 15208
// x := 5 ;
15002: LD_ADDR_VAR 0 6
15006: PUSH
15007: LD_INT 5
15009: ST_TO_ADDR
// repeat wait ( time ) ;
15010: LD_VAR 0 2
15014: PPUSH
15015: CALL_OW 67
// for i in areas do
15019: LD_ADDR_VAR 0 5
15023: PUSH
15024: LD_VAR 0 1
15028: PUSH
15029: FOR_IN
15030: IFFALSE 15119
// begin if GetResourceArea ( i , mat_cans ) < [ 15 , 12 , 10 ] [ Difficulty ] then
15032: LD_VAR 0 5
15036: PPUSH
15037: LD_INT 1
15039: PPUSH
15040: CALL_OW 287
15044: PUSH
15045: LD_INT 15
15047: PUSH
15048: LD_INT 12
15050: PUSH
15051: LD_INT 10
15053: PUSH
15054: EMPTY
15055: LIST
15056: LIST
15057: LIST
15058: PUSH
15059: LD_OWVAR 67
15063: ARRAY
15064: LESS
15065: IFFALSE 15117
// begin wait ( 0 0$10 * Difficulty ) ;
15067: LD_INT 350
15069: PUSH
15070: LD_OWVAR 67
15074: MUL
15075: PPUSH
15076: CALL_OW 67
// CreateCratesArea ( x , i , true ) ;
15080: LD_VAR 0 6
15084: PPUSH
15085: LD_VAR 0 5
15089: PPUSH
15090: LD_INT 1
15092: PPUSH
15093: CALL_OW 55
// amount := amount - ( x * 10 ) ;
15097: LD_ADDR_VAR 0 3
15101: PUSH
15102: LD_VAR 0 3
15106: PUSH
15107: LD_VAR 0 6
15111: PUSH
15112: LD_INT 10
15114: MUL
15115: MINUS
15116: ST_TO_ADDR
// end ; end ;
15117: GO 15029
15119: POP
15120: POP
// time := time + ( 0 0$5 * Difficulty ) ;
15121: LD_ADDR_VAR 0 2
15125: PUSH
15126: LD_VAR 0 2
15130: PUSH
15131: LD_INT 175
15133: PUSH
15134: LD_OWVAR 67
15138: MUL
15139: PLUS
15140: ST_TO_ADDR
// x := x - 1 ;
15141: LD_ADDR_VAR 0 6
15145: PUSH
15146: LD_VAR 0 6
15150: PUSH
15151: LD_INT 1
15153: MINUS
15154: ST_TO_ADDR
// if x = 0 then
15155: LD_VAR 0 6
15159: PUSH
15160: LD_INT 0
15162: EQUAL
15163: IFFALSE 15173
// x := 5 ;
15165: LD_ADDR_VAR 0 6
15169: PUSH
15170: LD_INT 5
15172: ST_TO_ADDR
// if time > 2 2$00 then
15173: LD_VAR 0 2
15177: PUSH
15178: LD_INT 4200
15180: GREATER
15181: IFFALSE 15191
// time := 0 0$40 ;
15183: LD_ADDR_VAR 0 2
15187: PUSH
15188: LD_INT 1400
15190: ST_TO_ADDR
// until not game or amount <= 0 ;
15191: LD_EXP 2
15195: NOT
15196: PUSH
15197: LD_VAR 0 3
15201: PUSH
15202: LD_INT 0
15204: LESSEQUAL
15205: OR
15206: IFFALSE 15010
// end ; end_of_file
15208: LD_VAR 0 4
15212: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
15213: LD_VAR 0 1
15217: PUSH
15218: LD_INT 200
15220: DOUBLE
15221: GREATEREQUAL
15222: IFFALSE 15230
15224: LD_INT 299
15226: DOUBLE
15227: LESSEQUAL
15228: IFTRUE 15232
15230: GO 15264
15232: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
15233: LD_VAR 0 1
15237: PPUSH
15238: LD_VAR 0 2
15242: PPUSH
15243: LD_VAR 0 3
15247: PPUSH
15248: LD_VAR 0 4
15252: PPUSH
15253: LD_VAR 0 5
15257: PPUSH
15258: CALL 58926 0 5
15262: GO 15341
15264: LD_INT 300
15266: DOUBLE
15267: GREATEREQUAL
15268: IFFALSE 15276
15270: LD_INT 399
15272: DOUBLE
15273: LESSEQUAL
15274: IFTRUE 15278
15276: GO 15340
15278: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
15279: LD_VAR 0 1
15283: PPUSH
15284: LD_VAR 0 2
15288: PPUSH
15289: LD_VAR 0 3
15293: PPUSH
15294: LD_VAR 0 4
15298: PPUSH
15299: LD_VAR 0 5
15303: PPUSH
15304: LD_VAR 0 6
15308: PPUSH
15309: LD_VAR 0 7
15313: PPUSH
15314: LD_VAR 0 8
15318: PPUSH
15319: LD_VAR 0 9
15323: PPUSH
15324: LD_VAR 0 10
15328: PPUSH
15329: LD_VAR 0 11
15333: PPUSH
15334: CALL 64273 0 11
15338: GO 15341
15340: POP
// end ;
15341: PPOPN 11
15343: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
15344: LD_VAR 0 1
15348: PPUSH
15349: LD_VAR 0 2
15353: PPUSH
15354: LD_VAR 0 3
15358: PPUSH
15359: LD_VAR 0 4
15363: PPUSH
15364: LD_VAR 0 5
15368: PPUSH
15369: CALL 58311 0 5
// end ; end_of_file
15373: PPOPN 5
15375: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
15376: LD_INT 0
15378: PPUSH
15379: PPUSH
// if exist_mode then
15380: LD_VAR 0 2
15384: IFFALSE 15430
// begin unit := CreateCharacter ( prefix & ident ) ;
15386: LD_ADDR_VAR 0 5
15390: PUSH
15391: LD_VAR 0 3
15395: PUSH
15396: LD_VAR 0 1
15400: STR
15401: PPUSH
15402: CALL_OW 34
15406: ST_TO_ADDR
// if unit then
15407: LD_VAR 0 5
15411: IFFALSE 15428
// DeleteCharacters ( prefix & ident ) ;
15413: LD_VAR 0 3
15417: PUSH
15418: LD_VAR 0 1
15422: STR
15423: PPUSH
15424: CALL_OW 40
// end else
15428: GO 15445
// unit := NewCharacter ( ident ) ;
15430: LD_ADDR_VAR 0 5
15434: PUSH
15435: LD_VAR 0 1
15439: PPUSH
15440: CALL_OW 25
15444: ST_TO_ADDR
// result := unit ;
15445: LD_ADDR_VAR 0 4
15449: PUSH
15450: LD_VAR 0 5
15454: ST_TO_ADDR
// end ;
15455: LD_VAR 0 4
15459: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
15460: LD_INT 0
15462: PPUSH
15463: PPUSH
// if exist_mode then
15464: LD_VAR 0 2
15468: IFFALSE 15493
// unit := CreateCharacter ( prefix & ident ) else
15470: LD_ADDR_VAR 0 5
15474: PUSH
15475: LD_VAR 0 3
15479: PUSH
15480: LD_VAR 0 1
15484: STR
15485: PPUSH
15486: CALL_OW 34
15490: ST_TO_ADDR
15491: GO 15508
// unit := NewCharacter ( ident ) ;
15493: LD_ADDR_VAR 0 5
15497: PUSH
15498: LD_VAR 0 1
15502: PPUSH
15503: CALL_OW 25
15507: ST_TO_ADDR
// result := unit ;
15508: LD_ADDR_VAR 0 4
15512: PUSH
15513: LD_VAR 0 5
15517: ST_TO_ADDR
// end ;
15518: LD_VAR 0 4
15522: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
15523: LD_INT 0
15525: PPUSH
15526: PPUSH
// if not side or not nation then
15527: LD_VAR 0 1
15531: NOT
15532: PUSH
15533: LD_VAR 0 2
15537: NOT
15538: OR
15539: IFFALSE 15543
// exit ;
15541: GO 16311
// case nation of nation_american :
15543: LD_VAR 0 2
15547: PUSH
15548: LD_INT 1
15550: DOUBLE
15551: EQUAL
15552: IFTRUE 15556
15554: GO 15770
15556: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
15557: LD_ADDR_VAR 0 4
15561: PUSH
15562: LD_INT 35
15564: PUSH
15565: LD_INT 45
15567: PUSH
15568: LD_INT 46
15570: PUSH
15571: LD_INT 47
15573: PUSH
15574: LD_INT 82
15576: PUSH
15577: LD_INT 83
15579: PUSH
15580: LD_INT 84
15582: PUSH
15583: LD_INT 85
15585: PUSH
15586: LD_INT 86
15588: PUSH
15589: LD_INT 1
15591: PUSH
15592: LD_INT 2
15594: PUSH
15595: LD_INT 6
15597: PUSH
15598: LD_INT 15
15600: PUSH
15601: LD_INT 16
15603: PUSH
15604: LD_INT 7
15606: PUSH
15607: LD_INT 12
15609: PUSH
15610: LD_INT 13
15612: PUSH
15613: LD_INT 10
15615: PUSH
15616: LD_INT 14
15618: PUSH
15619: LD_INT 20
15621: PUSH
15622: LD_INT 21
15624: PUSH
15625: LD_INT 22
15627: PUSH
15628: LD_INT 25
15630: PUSH
15631: LD_INT 32
15633: PUSH
15634: LD_INT 27
15636: PUSH
15637: LD_INT 36
15639: PUSH
15640: LD_INT 69
15642: PUSH
15643: LD_INT 39
15645: PUSH
15646: LD_INT 34
15648: PUSH
15649: LD_INT 40
15651: PUSH
15652: LD_INT 48
15654: PUSH
15655: LD_INT 49
15657: PUSH
15658: LD_INT 50
15660: PUSH
15661: LD_INT 51
15663: PUSH
15664: LD_INT 52
15666: PUSH
15667: LD_INT 53
15669: PUSH
15670: LD_INT 54
15672: PUSH
15673: LD_INT 55
15675: PUSH
15676: LD_INT 56
15678: PUSH
15679: LD_INT 57
15681: PUSH
15682: LD_INT 58
15684: PUSH
15685: LD_INT 59
15687: PUSH
15688: LD_INT 60
15690: PUSH
15691: LD_INT 61
15693: PUSH
15694: LD_INT 62
15696: PUSH
15697: LD_INT 80
15699: PUSH
15700: LD_INT 82
15702: PUSH
15703: LD_INT 83
15705: PUSH
15706: LD_INT 84
15708: PUSH
15709: LD_INT 85
15711: PUSH
15712: LD_INT 86
15714: PUSH
15715: EMPTY
15716: LIST
15717: LIST
15718: LIST
15719: LIST
15720: LIST
15721: LIST
15722: LIST
15723: LIST
15724: LIST
15725: LIST
15726: LIST
15727: LIST
15728: LIST
15729: LIST
15730: LIST
15731: LIST
15732: LIST
15733: LIST
15734: LIST
15735: LIST
15736: LIST
15737: LIST
15738: LIST
15739: LIST
15740: LIST
15741: LIST
15742: LIST
15743: LIST
15744: LIST
15745: LIST
15746: LIST
15747: LIST
15748: LIST
15749: LIST
15750: LIST
15751: LIST
15752: LIST
15753: LIST
15754: LIST
15755: LIST
15756: LIST
15757: LIST
15758: LIST
15759: LIST
15760: LIST
15761: LIST
15762: LIST
15763: LIST
15764: LIST
15765: LIST
15766: LIST
15767: ST_TO_ADDR
15768: GO 16235
15770: LD_INT 2
15772: DOUBLE
15773: EQUAL
15774: IFTRUE 15778
15776: GO 16004
15778: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
15779: LD_ADDR_VAR 0 4
15783: PUSH
15784: LD_INT 35
15786: PUSH
15787: LD_INT 45
15789: PUSH
15790: LD_INT 46
15792: PUSH
15793: LD_INT 47
15795: PUSH
15796: LD_INT 82
15798: PUSH
15799: LD_INT 83
15801: PUSH
15802: LD_INT 84
15804: PUSH
15805: LD_INT 85
15807: PUSH
15808: LD_INT 87
15810: PUSH
15811: LD_INT 70
15813: PUSH
15814: LD_INT 1
15816: PUSH
15817: LD_INT 11
15819: PUSH
15820: LD_INT 3
15822: PUSH
15823: LD_INT 4
15825: PUSH
15826: LD_INT 5
15828: PUSH
15829: LD_INT 6
15831: PUSH
15832: LD_INT 15
15834: PUSH
15835: LD_INT 18
15837: PUSH
15838: LD_INT 7
15840: PUSH
15841: LD_INT 17
15843: PUSH
15844: LD_INT 8
15846: PUSH
15847: LD_INT 20
15849: PUSH
15850: LD_INT 21
15852: PUSH
15853: LD_INT 22
15855: PUSH
15856: LD_INT 72
15858: PUSH
15859: LD_INT 26
15861: PUSH
15862: LD_INT 69
15864: PUSH
15865: LD_INT 39
15867: PUSH
15868: LD_INT 40
15870: PUSH
15871: LD_INT 41
15873: PUSH
15874: LD_INT 42
15876: PUSH
15877: LD_INT 43
15879: PUSH
15880: LD_INT 48
15882: PUSH
15883: LD_INT 49
15885: PUSH
15886: LD_INT 50
15888: PUSH
15889: LD_INT 51
15891: PUSH
15892: LD_INT 52
15894: PUSH
15895: LD_INT 53
15897: PUSH
15898: LD_INT 54
15900: PUSH
15901: LD_INT 55
15903: PUSH
15904: LD_INT 56
15906: PUSH
15907: LD_INT 60
15909: PUSH
15910: LD_INT 61
15912: PUSH
15913: LD_INT 62
15915: PUSH
15916: LD_INT 66
15918: PUSH
15919: LD_INT 67
15921: PUSH
15922: LD_INT 68
15924: PUSH
15925: LD_INT 81
15927: PUSH
15928: LD_INT 82
15930: PUSH
15931: LD_INT 83
15933: PUSH
15934: LD_INT 84
15936: PUSH
15937: LD_INT 85
15939: PUSH
15940: LD_INT 87
15942: PUSH
15943: LD_INT 88
15945: PUSH
15946: EMPTY
15947: LIST
15948: LIST
15949: LIST
15950: LIST
15951: LIST
15952: LIST
15953: LIST
15954: LIST
15955: LIST
15956: LIST
15957: LIST
15958: LIST
15959: LIST
15960: LIST
15961: LIST
15962: LIST
15963: LIST
15964: LIST
15965: LIST
15966: LIST
15967: LIST
15968: LIST
15969: LIST
15970: LIST
15971: LIST
15972: LIST
15973: LIST
15974: LIST
15975: LIST
15976: LIST
15977: LIST
15978: LIST
15979: LIST
15980: LIST
15981: LIST
15982: LIST
15983: LIST
15984: LIST
15985: LIST
15986: LIST
15987: LIST
15988: LIST
15989: LIST
15990: LIST
15991: LIST
15992: LIST
15993: LIST
15994: LIST
15995: LIST
15996: LIST
15997: LIST
15998: LIST
15999: LIST
16000: LIST
16001: ST_TO_ADDR
16002: GO 16235
16004: LD_INT 3
16006: DOUBLE
16007: EQUAL
16008: IFTRUE 16012
16010: GO 16234
16012: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
16013: LD_ADDR_VAR 0 4
16017: PUSH
16018: LD_INT 46
16020: PUSH
16021: LD_INT 47
16023: PUSH
16024: LD_INT 1
16026: PUSH
16027: LD_INT 2
16029: PUSH
16030: LD_INT 82
16032: PUSH
16033: LD_INT 83
16035: PUSH
16036: LD_INT 84
16038: PUSH
16039: LD_INT 85
16041: PUSH
16042: LD_INT 86
16044: PUSH
16045: LD_INT 11
16047: PUSH
16048: LD_INT 9
16050: PUSH
16051: LD_INT 20
16053: PUSH
16054: LD_INT 19
16056: PUSH
16057: LD_INT 21
16059: PUSH
16060: LD_INT 24
16062: PUSH
16063: LD_INT 22
16065: PUSH
16066: LD_INT 25
16068: PUSH
16069: LD_INT 28
16071: PUSH
16072: LD_INT 29
16074: PUSH
16075: LD_INT 30
16077: PUSH
16078: LD_INT 31
16080: PUSH
16081: LD_INT 37
16083: PUSH
16084: LD_INT 38
16086: PUSH
16087: LD_INT 32
16089: PUSH
16090: LD_INT 27
16092: PUSH
16093: LD_INT 33
16095: PUSH
16096: LD_INT 69
16098: PUSH
16099: LD_INT 39
16101: PUSH
16102: LD_INT 34
16104: PUSH
16105: LD_INT 40
16107: PUSH
16108: LD_INT 71
16110: PUSH
16111: LD_INT 23
16113: PUSH
16114: LD_INT 44
16116: PUSH
16117: LD_INT 48
16119: PUSH
16120: LD_INT 49
16122: PUSH
16123: LD_INT 50
16125: PUSH
16126: LD_INT 51
16128: PUSH
16129: LD_INT 52
16131: PUSH
16132: LD_INT 53
16134: PUSH
16135: LD_INT 54
16137: PUSH
16138: LD_INT 55
16140: PUSH
16141: LD_INT 56
16143: PUSH
16144: LD_INT 57
16146: PUSH
16147: LD_INT 58
16149: PUSH
16150: LD_INT 59
16152: PUSH
16153: LD_INT 63
16155: PUSH
16156: LD_INT 64
16158: PUSH
16159: LD_INT 65
16161: PUSH
16162: LD_INT 82
16164: PUSH
16165: LD_INT 83
16167: PUSH
16168: LD_INT 84
16170: PUSH
16171: LD_INT 85
16173: PUSH
16174: LD_INT 86
16176: PUSH
16177: EMPTY
16178: LIST
16179: LIST
16180: LIST
16181: LIST
16182: LIST
16183: LIST
16184: LIST
16185: LIST
16186: LIST
16187: LIST
16188: LIST
16189: LIST
16190: LIST
16191: LIST
16192: LIST
16193: LIST
16194: LIST
16195: LIST
16196: LIST
16197: LIST
16198: LIST
16199: LIST
16200: LIST
16201: LIST
16202: LIST
16203: LIST
16204: LIST
16205: LIST
16206: LIST
16207: LIST
16208: LIST
16209: LIST
16210: LIST
16211: LIST
16212: LIST
16213: LIST
16214: LIST
16215: LIST
16216: LIST
16217: LIST
16218: LIST
16219: LIST
16220: LIST
16221: LIST
16222: LIST
16223: LIST
16224: LIST
16225: LIST
16226: LIST
16227: LIST
16228: LIST
16229: LIST
16230: LIST
16231: ST_TO_ADDR
16232: GO 16235
16234: POP
// if state > - 1 and state < 3 then
16235: LD_VAR 0 3
16239: PUSH
16240: LD_INT 1
16242: NEG
16243: GREATER
16244: PUSH
16245: LD_VAR 0 3
16249: PUSH
16250: LD_INT 3
16252: LESS
16253: AND
16254: IFFALSE 16311
// for i in result do
16256: LD_ADDR_VAR 0 5
16260: PUSH
16261: LD_VAR 0 4
16265: PUSH
16266: FOR_IN
16267: IFFALSE 16309
// if GetTech ( i , side ) <> state then
16269: LD_VAR 0 5
16273: PPUSH
16274: LD_VAR 0 1
16278: PPUSH
16279: CALL_OW 321
16283: PUSH
16284: LD_VAR 0 3
16288: NONEQUAL
16289: IFFALSE 16307
// result := result diff i ;
16291: LD_ADDR_VAR 0 4
16295: PUSH
16296: LD_VAR 0 4
16300: PUSH
16301: LD_VAR 0 5
16305: DIFF
16306: ST_TO_ADDR
16307: GO 16266
16309: POP
16310: POP
// end ;
16311: LD_VAR 0 4
16315: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
16316: LD_INT 0
16318: PPUSH
16319: PPUSH
16320: PPUSH
// result := true ;
16321: LD_ADDR_VAR 0 3
16325: PUSH
16326: LD_INT 1
16328: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
16329: LD_ADDR_VAR 0 5
16333: PUSH
16334: LD_VAR 0 2
16338: PPUSH
16339: CALL_OW 480
16343: ST_TO_ADDR
// if not tmp then
16344: LD_VAR 0 5
16348: NOT
16349: IFFALSE 16353
// exit ;
16351: GO 16402
// for i in tmp do
16353: LD_ADDR_VAR 0 4
16357: PUSH
16358: LD_VAR 0 5
16362: PUSH
16363: FOR_IN
16364: IFFALSE 16400
// if GetTech ( i , side ) <> state_researched then
16366: LD_VAR 0 4
16370: PPUSH
16371: LD_VAR 0 1
16375: PPUSH
16376: CALL_OW 321
16380: PUSH
16381: LD_INT 2
16383: NONEQUAL
16384: IFFALSE 16398
// begin result := false ;
16386: LD_ADDR_VAR 0 3
16390: PUSH
16391: LD_INT 0
16393: ST_TO_ADDR
// exit ;
16394: POP
16395: POP
16396: GO 16402
// end ;
16398: GO 16363
16400: POP
16401: POP
// end ;
16402: LD_VAR 0 3
16406: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
16407: LD_INT 0
16409: PPUSH
16410: PPUSH
16411: PPUSH
16412: PPUSH
16413: PPUSH
16414: PPUSH
16415: PPUSH
16416: PPUSH
16417: PPUSH
16418: PPUSH
16419: PPUSH
16420: PPUSH
16421: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
16422: LD_VAR 0 1
16426: NOT
16427: PUSH
16428: LD_VAR 0 1
16432: PPUSH
16433: CALL_OW 257
16437: PUSH
16438: LD_INT 9
16440: NONEQUAL
16441: OR
16442: IFFALSE 16446
// exit ;
16444: GO 17019
// side := GetSide ( unit ) ;
16446: LD_ADDR_VAR 0 9
16450: PUSH
16451: LD_VAR 0 1
16455: PPUSH
16456: CALL_OW 255
16460: ST_TO_ADDR
// tech_space := tech_spacanom ;
16461: LD_ADDR_VAR 0 12
16465: PUSH
16466: LD_INT 29
16468: ST_TO_ADDR
// tech_time := tech_taurad ;
16469: LD_ADDR_VAR 0 13
16473: PUSH
16474: LD_INT 28
16476: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
16477: LD_ADDR_VAR 0 11
16481: PUSH
16482: LD_VAR 0 1
16486: PPUSH
16487: CALL_OW 310
16491: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
16492: LD_VAR 0 11
16496: PPUSH
16497: CALL_OW 247
16501: PUSH
16502: LD_INT 2
16504: EQUAL
16505: IFFALSE 16509
// exit ;
16507: GO 17019
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16509: LD_ADDR_VAR 0 8
16513: PUSH
16514: LD_INT 81
16516: PUSH
16517: LD_VAR 0 9
16521: PUSH
16522: EMPTY
16523: LIST
16524: LIST
16525: PUSH
16526: LD_INT 3
16528: PUSH
16529: LD_INT 21
16531: PUSH
16532: LD_INT 3
16534: PUSH
16535: EMPTY
16536: LIST
16537: LIST
16538: PUSH
16539: EMPTY
16540: LIST
16541: LIST
16542: PUSH
16543: EMPTY
16544: LIST
16545: LIST
16546: PPUSH
16547: CALL_OW 69
16551: ST_TO_ADDR
// if not tmp then
16552: LD_VAR 0 8
16556: NOT
16557: IFFALSE 16561
// exit ;
16559: GO 17019
// if in_unit then
16561: LD_VAR 0 11
16565: IFFALSE 16589
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
16567: LD_ADDR_VAR 0 10
16571: PUSH
16572: LD_VAR 0 8
16576: PPUSH
16577: LD_VAR 0 11
16581: PPUSH
16582: CALL_OW 74
16586: ST_TO_ADDR
16587: GO 16609
// enemy := NearestUnitToUnit ( tmp , unit ) ;
16589: LD_ADDR_VAR 0 10
16593: PUSH
16594: LD_VAR 0 8
16598: PPUSH
16599: LD_VAR 0 1
16603: PPUSH
16604: CALL_OW 74
16608: ST_TO_ADDR
// if not enemy then
16609: LD_VAR 0 10
16613: NOT
16614: IFFALSE 16618
// exit ;
16616: GO 17019
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
16618: LD_VAR 0 11
16622: PUSH
16623: LD_VAR 0 11
16627: PPUSH
16628: LD_VAR 0 10
16632: PPUSH
16633: CALL_OW 296
16637: PUSH
16638: LD_INT 13
16640: GREATER
16641: AND
16642: PUSH
16643: LD_VAR 0 1
16647: PPUSH
16648: LD_VAR 0 10
16652: PPUSH
16653: CALL_OW 296
16657: PUSH
16658: LD_INT 12
16660: GREATER
16661: OR
16662: IFFALSE 16666
// exit ;
16664: GO 17019
// missile := [ 1 ] ;
16666: LD_ADDR_VAR 0 14
16670: PUSH
16671: LD_INT 1
16673: PUSH
16674: EMPTY
16675: LIST
16676: ST_TO_ADDR
// if Researched ( side , tech_space ) then
16677: LD_VAR 0 9
16681: PPUSH
16682: LD_VAR 0 12
16686: PPUSH
16687: CALL_OW 325
16691: IFFALSE 16720
// missile := Replace ( missile , missile + 1 , 2 ) ;
16693: LD_ADDR_VAR 0 14
16697: PUSH
16698: LD_VAR 0 14
16702: PPUSH
16703: LD_VAR 0 14
16707: PUSH
16708: LD_INT 1
16710: PLUS
16711: PPUSH
16712: LD_INT 2
16714: PPUSH
16715: CALL_OW 1
16719: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
16720: LD_VAR 0 9
16724: PPUSH
16725: LD_VAR 0 13
16729: PPUSH
16730: CALL_OW 325
16734: PUSH
16735: LD_VAR 0 10
16739: PPUSH
16740: CALL_OW 255
16744: PPUSH
16745: LD_VAR 0 13
16749: PPUSH
16750: CALL_OW 325
16754: NOT
16755: AND
16756: IFFALSE 16785
// missile := Replace ( missile , missile + 1 , 3 ) ;
16758: LD_ADDR_VAR 0 14
16762: PUSH
16763: LD_VAR 0 14
16767: PPUSH
16768: LD_VAR 0 14
16772: PUSH
16773: LD_INT 1
16775: PLUS
16776: PPUSH
16777: LD_INT 3
16779: PPUSH
16780: CALL_OW 1
16784: ST_TO_ADDR
// if missile < 2 then
16785: LD_VAR 0 14
16789: PUSH
16790: LD_INT 2
16792: LESS
16793: IFFALSE 16797
// exit ;
16795: GO 17019
// x := GetX ( enemy ) ;
16797: LD_ADDR_VAR 0 4
16801: PUSH
16802: LD_VAR 0 10
16806: PPUSH
16807: CALL_OW 250
16811: ST_TO_ADDR
// y := GetY ( enemy ) ;
16812: LD_ADDR_VAR 0 5
16816: PUSH
16817: LD_VAR 0 10
16821: PPUSH
16822: CALL_OW 251
16826: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
16827: LD_ADDR_VAR 0 6
16831: PUSH
16832: LD_VAR 0 4
16836: PUSH
16837: LD_INT 1
16839: NEG
16840: PPUSH
16841: LD_INT 1
16843: PPUSH
16844: CALL_OW 12
16848: PLUS
16849: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
16850: LD_ADDR_VAR 0 7
16854: PUSH
16855: LD_VAR 0 5
16859: PUSH
16860: LD_INT 1
16862: NEG
16863: PPUSH
16864: LD_INT 1
16866: PPUSH
16867: CALL_OW 12
16871: PLUS
16872: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
16873: LD_VAR 0 6
16877: PPUSH
16878: LD_VAR 0 7
16882: PPUSH
16883: CALL_OW 488
16887: NOT
16888: IFFALSE 16910
// begin _x := x ;
16890: LD_ADDR_VAR 0 6
16894: PUSH
16895: LD_VAR 0 4
16899: ST_TO_ADDR
// _y := y ;
16900: LD_ADDR_VAR 0 7
16904: PUSH
16905: LD_VAR 0 5
16909: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
16910: LD_ADDR_VAR 0 3
16914: PUSH
16915: LD_INT 1
16917: PPUSH
16918: LD_VAR 0 14
16922: PPUSH
16923: CALL_OW 12
16927: ST_TO_ADDR
// case i of 1 :
16928: LD_VAR 0 3
16932: PUSH
16933: LD_INT 1
16935: DOUBLE
16936: EQUAL
16937: IFTRUE 16941
16939: GO 16958
16941: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
16942: LD_VAR 0 1
16946: PPUSH
16947: LD_VAR 0 10
16951: PPUSH
16952: CALL_OW 115
16956: GO 17019
16958: LD_INT 2
16960: DOUBLE
16961: EQUAL
16962: IFTRUE 16966
16964: GO 16988
16966: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
16967: LD_VAR 0 1
16971: PPUSH
16972: LD_VAR 0 6
16976: PPUSH
16977: LD_VAR 0 7
16981: PPUSH
16982: CALL_OW 153
16986: GO 17019
16988: LD_INT 3
16990: DOUBLE
16991: EQUAL
16992: IFTRUE 16996
16994: GO 17018
16996: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
16997: LD_VAR 0 1
17001: PPUSH
17002: LD_VAR 0 6
17006: PPUSH
17007: LD_VAR 0 7
17011: PPUSH
17012: CALL_OW 154
17016: GO 17019
17018: POP
// end ;
17019: LD_VAR 0 2
17023: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
17024: LD_INT 0
17026: PPUSH
17027: PPUSH
17028: PPUSH
17029: PPUSH
17030: PPUSH
17031: PPUSH
// if not unit or not building then
17032: LD_VAR 0 1
17036: NOT
17037: PUSH
17038: LD_VAR 0 2
17042: NOT
17043: OR
17044: IFFALSE 17048
// exit ;
17046: GO 17206
// x := GetX ( building ) ;
17048: LD_ADDR_VAR 0 5
17052: PUSH
17053: LD_VAR 0 2
17057: PPUSH
17058: CALL_OW 250
17062: ST_TO_ADDR
// y := GetY ( building ) ;
17063: LD_ADDR_VAR 0 6
17067: PUSH
17068: LD_VAR 0 2
17072: PPUSH
17073: CALL_OW 251
17077: ST_TO_ADDR
// for i = 0 to 5 do
17078: LD_ADDR_VAR 0 4
17082: PUSH
17083: DOUBLE
17084: LD_INT 0
17086: DEC
17087: ST_TO_ADDR
17088: LD_INT 5
17090: PUSH
17091: FOR_TO
17092: IFFALSE 17204
// begin _x := ShiftX ( x , i , 3 ) ;
17094: LD_ADDR_VAR 0 7
17098: PUSH
17099: LD_VAR 0 5
17103: PPUSH
17104: LD_VAR 0 4
17108: PPUSH
17109: LD_INT 3
17111: PPUSH
17112: CALL_OW 272
17116: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
17117: LD_ADDR_VAR 0 8
17121: PUSH
17122: LD_VAR 0 6
17126: PPUSH
17127: LD_VAR 0 4
17131: PPUSH
17132: LD_INT 3
17134: PPUSH
17135: CALL_OW 273
17139: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
17140: LD_VAR 0 7
17144: PPUSH
17145: LD_VAR 0 8
17149: PPUSH
17150: CALL_OW 488
17154: NOT
17155: IFFALSE 17159
// continue ;
17157: GO 17091
// if HexInfo ( _x , _y ) = 0 then
17159: LD_VAR 0 7
17163: PPUSH
17164: LD_VAR 0 8
17168: PPUSH
17169: CALL_OW 428
17173: PUSH
17174: LD_INT 0
17176: EQUAL
17177: IFFALSE 17202
// begin ComMoveXY ( unit , _x , _y ) ;
17179: LD_VAR 0 1
17183: PPUSH
17184: LD_VAR 0 7
17188: PPUSH
17189: LD_VAR 0 8
17193: PPUSH
17194: CALL_OW 111
// exit ;
17198: POP
17199: POP
17200: GO 17206
// end ; end ;
17202: GO 17091
17204: POP
17205: POP
// end ;
17206: LD_VAR 0 3
17210: RET
// export function ScanBase ( side , base_area ) ; begin
17211: LD_INT 0
17213: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
17214: LD_ADDR_VAR 0 3
17218: PUSH
17219: LD_VAR 0 2
17223: PPUSH
17224: LD_INT 81
17226: PUSH
17227: LD_VAR 0 1
17231: PUSH
17232: EMPTY
17233: LIST
17234: LIST
17235: PPUSH
17236: CALL_OW 70
17240: ST_TO_ADDR
// end ;
17241: LD_VAR 0 3
17245: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
17246: LD_INT 0
17248: PPUSH
17249: PPUSH
17250: PPUSH
17251: PPUSH
// result := false ;
17252: LD_ADDR_VAR 0 2
17256: PUSH
17257: LD_INT 0
17259: ST_TO_ADDR
// side := GetSide ( unit ) ;
17260: LD_ADDR_VAR 0 3
17264: PUSH
17265: LD_VAR 0 1
17269: PPUSH
17270: CALL_OW 255
17274: ST_TO_ADDR
// nat := GetNation ( unit ) ;
17275: LD_ADDR_VAR 0 4
17279: PUSH
17280: LD_VAR 0 1
17284: PPUSH
17285: CALL_OW 248
17289: ST_TO_ADDR
// case nat of 1 :
17290: LD_VAR 0 4
17294: PUSH
17295: LD_INT 1
17297: DOUBLE
17298: EQUAL
17299: IFTRUE 17303
17301: GO 17314
17303: POP
// tech := tech_lassight ; 2 :
17304: LD_ADDR_VAR 0 5
17308: PUSH
17309: LD_INT 12
17311: ST_TO_ADDR
17312: GO 17353
17314: LD_INT 2
17316: DOUBLE
17317: EQUAL
17318: IFTRUE 17322
17320: GO 17333
17322: POP
// tech := tech_mortar ; 3 :
17323: LD_ADDR_VAR 0 5
17327: PUSH
17328: LD_INT 41
17330: ST_TO_ADDR
17331: GO 17353
17333: LD_INT 3
17335: DOUBLE
17336: EQUAL
17337: IFTRUE 17341
17339: GO 17352
17341: POP
// tech := tech_bazooka ; end ;
17342: LD_ADDR_VAR 0 5
17346: PUSH
17347: LD_INT 44
17349: ST_TO_ADDR
17350: GO 17353
17352: POP
// if Researched ( side , tech ) then
17353: LD_VAR 0 3
17357: PPUSH
17358: LD_VAR 0 5
17362: PPUSH
17363: CALL_OW 325
17367: IFFALSE 17394
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
17369: LD_ADDR_VAR 0 2
17373: PUSH
17374: LD_INT 5
17376: PUSH
17377: LD_INT 8
17379: PUSH
17380: LD_INT 9
17382: PUSH
17383: EMPTY
17384: LIST
17385: LIST
17386: LIST
17387: PUSH
17388: LD_VAR 0 4
17392: ARRAY
17393: ST_TO_ADDR
// end ;
17394: LD_VAR 0 2
17398: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
17399: LD_INT 0
17401: PPUSH
17402: PPUSH
17403: PPUSH
// if not mines then
17404: LD_VAR 0 2
17408: NOT
17409: IFFALSE 17413
// exit ;
17411: GO 17557
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17413: LD_ADDR_VAR 0 5
17417: PUSH
17418: LD_INT 81
17420: PUSH
17421: LD_VAR 0 1
17425: PUSH
17426: EMPTY
17427: LIST
17428: LIST
17429: PUSH
17430: LD_INT 3
17432: PUSH
17433: LD_INT 21
17435: PUSH
17436: LD_INT 3
17438: PUSH
17439: EMPTY
17440: LIST
17441: LIST
17442: PUSH
17443: EMPTY
17444: LIST
17445: LIST
17446: PUSH
17447: EMPTY
17448: LIST
17449: LIST
17450: PPUSH
17451: CALL_OW 69
17455: ST_TO_ADDR
// for i in mines do
17456: LD_ADDR_VAR 0 4
17460: PUSH
17461: LD_VAR 0 2
17465: PUSH
17466: FOR_IN
17467: IFFALSE 17555
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
17469: LD_VAR 0 4
17473: PUSH
17474: LD_INT 1
17476: ARRAY
17477: PPUSH
17478: LD_VAR 0 4
17482: PUSH
17483: LD_INT 2
17485: ARRAY
17486: PPUSH
17487: CALL_OW 458
17491: NOT
17492: IFFALSE 17496
// continue ;
17494: GO 17466
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
17496: LD_VAR 0 4
17500: PUSH
17501: LD_INT 1
17503: ARRAY
17504: PPUSH
17505: LD_VAR 0 4
17509: PUSH
17510: LD_INT 2
17512: ARRAY
17513: PPUSH
17514: CALL_OW 428
17518: PUSH
17519: LD_VAR 0 5
17523: IN
17524: IFFALSE 17553
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
17526: LD_VAR 0 4
17530: PUSH
17531: LD_INT 1
17533: ARRAY
17534: PPUSH
17535: LD_VAR 0 4
17539: PUSH
17540: LD_INT 2
17542: ARRAY
17543: PPUSH
17544: LD_VAR 0 1
17548: PPUSH
17549: CALL_OW 456
// end ;
17553: GO 17466
17555: POP
17556: POP
// end ;
17557: LD_VAR 0 3
17561: RET
// export function Count ( array ) ; begin
17562: LD_INT 0
17564: PPUSH
// result := array + 0 ;
17565: LD_ADDR_VAR 0 2
17569: PUSH
17570: LD_VAR 0 1
17574: PUSH
17575: LD_INT 0
17577: PLUS
17578: ST_TO_ADDR
// end ;
17579: LD_VAR 0 2
17583: RET
// export function IsEmpty ( building ) ; begin
17584: LD_INT 0
17586: PPUSH
// if not building then
17587: LD_VAR 0 1
17591: NOT
17592: IFFALSE 17596
// exit ;
17594: GO 17639
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
17596: LD_ADDR_VAR 0 2
17600: PUSH
17601: LD_VAR 0 1
17605: PUSH
17606: LD_INT 22
17608: PUSH
17609: LD_VAR 0 1
17613: PPUSH
17614: CALL_OW 255
17618: PUSH
17619: EMPTY
17620: LIST
17621: LIST
17622: PUSH
17623: LD_INT 58
17625: PUSH
17626: EMPTY
17627: LIST
17628: PUSH
17629: EMPTY
17630: LIST
17631: LIST
17632: PPUSH
17633: CALL_OW 69
17637: IN
17638: ST_TO_ADDR
// end ;
17639: LD_VAR 0 2
17643: RET
// export function IsNotFull ( building ) ; var places ; begin
17644: LD_INT 0
17646: PPUSH
17647: PPUSH
// if not building then
17648: LD_VAR 0 1
17652: NOT
17653: IFFALSE 17657
// exit ;
17655: GO 17685
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
17657: LD_ADDR_VAR 0 2
17661: PUSH
17662: LD_VAR 0 1
17666: PPUSH
17667: LD_INT 3
17669: PUSH
17670: LD_INT 62
17672: PUSH
17673: EMPTY
17674: LIST
17675: PUSH
17676: EMPTY
17677: LIST
17678: LIST
17679: PPUSH
17680: CALL_OW 72
17684: ST_TO_ADDR
// end ;
17685: LD_VAR 0 2
17689: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
17690: LD_INT 0
17692: PPUSH
17693: PPUSH
17694: PPUSH
17695: PPUSH
// tmp := [ ] ;
17696: LD_ADDR_VAR 0 3
17700: PUSH
17701: EMPTY
17702: ST_TO_ADDR
// list := [ ] ;
17703: LD_ADDR_VAR 0 5
17707: PUSH
17708: EMPTY
17709: ST_TO_ADDR
// for i = 16 to 25 do
17710: LD_ADDR_VAR 0 4
17714: PUSH
17715: DOUBLE
17716: LD_INT 16
17718: DEC
17719: ST_TO_ADDR
17720: LD_INT 25
17722: PUSH
17723: FOR_TO
17724: IFFALSE 17797
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
17726: LD_ADDR_VAR 0 3
17730: PUSH
17731: LD_VAR 0 3
17735: PUSH
17736: LD_INT 22
17738: PUSH
17739: LD_VAR 0 1
17743: PPUSH
17744: CALL_OW 255
17748: PUSH
17749: EMPTY
17750: LIST
17751: LIST
17752: PUSH
17753: LD_INT 91
17755: PUSH
17756: LD_VAR 0 1
17760: PUSH
17761: LD_INT 6
17763: PUSH
17764: EMPTY
17765: LIST
17766: LIST
17767: LIST
17768: PUSH
17769: LD_INT 30
17771: PUSH
17772: LD_VAR 0 4
17776: PUSH
17777: EMPTY
17778: LIST
17779: LIST
17780: PUSH
17781: EMPTY
17782: LIST
17783: LIST
17784: LIST
17785: PUSH
17786: EMPTY
17787: LIST
17788: PPUSH
17789: CALL_OW 69
17793: ADD
17794: ST_TO_ADDR
17795: GO 17723
17797: POP
17798: POP
// for i = 1 to tmp do
17799: LD_ADDR_VAR 0 4
17803: PUSH
17804: DOUBLE
17805: LD_INT 1
17807: DEC
17808: ST_TO_ADDR
17809: LD_VAR 0 3
17813: PUSH
17814: FOR_TO
17815: IFFALSE 17903
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
17817: LD_ADDR_VAR 0 5
17821: PUSH
17822: LD_VAR 0 5
17826: PUSH
17827: LD_VAR 0 3
17831: PUSH
17832: LD_VAR 0 4
17836: ARRAY
17837: PPUSH
17838: CALL_OW 266
17842: PUSH
17843: LD_VAR 0 3
17847: PUSH
17848: LD_VAR 0 4
17852: ARRAY
17853: PPUSH
17854: CALL_OW 250
17858: PUSH
17859: LD_VAR 0 3
17863: PUSH
17864: LD_VAR 0 4
17868: ARRAY
17869: PPUSH
17870: CALL_OW 251
17874: PUSH
17875: LD_VAR 0 3
17879: PUSH
17880: LD_VAR 0 4
17884: ARRAY
17885: PPUSH
17886: CALL_OW 254
17890: PUSH
17891: EMPTY
17892: LIST
17893: LIST
17894: LIST
17895: LIST
17896: PUSH
17897: EMPTY
17898: LIST
17899: ADD
17900: ST_TO_ADDR
17901: GO 17814
17903: POP
17904: POP
// result := list ;
17905: LD_ADDR_VAR 0 2
17909: PUSH
17910: LD_VAR 0 5
17914: ST_TO_ADDR
// end ;
17915: LD_VAR 0 2
17919: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
17920: LD_INT 0
17922: PPUSH
17923: PPUSH
17924: PPUSH
17925: PPUSH
17926: PPUSH
17927: PPUSH
17928: PPUSH
// if not factory then
17929: LD_VAR 0 1
17933: NOT
17934: IFFALSE 17938
// exit ;
17936: GO 18531
// if control = control_apeman then
17938: LD_VAR 0 4
17942: PUSH
17943: LD_INT 5
17945: EQUAL
17946: IFFALSE 18055
// begin tmp := UnitsInside ( factory ) ;
17948: LD_ADDR_VAR 0 8
17952: PUSH
17953: LD_VAR 0 1
17957: PPUSH
17958: CALL_OW 313
17962: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
17963: LD_VAR 0 8
17967: PPUSH
17968: LD_INT 25
17970: PUSH
17971: LD_INT 12
17973: PUSH
17974: EMPTY
17975: LIST
17976: LIST
17977: PPUSH
17978: CALL_OW 72
17982: NOT
17983: IFFALSE 17993
// control := control_manual ;
17985: LD_ADDR_VAR 0 4
17989: PUSH
17990: LD_INT 1
17992: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
17993: LD_ADDR_VAR 0 8
17997: PUSH
17998: LD_VAR 0 1
18002: PPUSH
18003: CALL 17690 0 1
18007: ST_TO_ADDR
// if tmp then
18008: LD_VAR 0 8
18012: IFFALSE 18055
// begin for i in tmp do
18014: LD_ADDR_VAR 0 7
18018: PUSH
18019: LD_VAR 0 8
18023: PUSH
18024: FOR_IN
18025: IFFALSE 18053
// if i [ 1 ] = b_ext_radio then
18027: LD_VAR 0 7
18031: PUSH
18032: LD_INT 1
18034: ARRAY
18035: PUSH
18036: LD_INT 22
18038: EQUAL
18039: IFFALSE 18051
// begin control := control_remote ;
18041: LD_ADDR_VAR 0 4
18045: PUSH
18046: LD_INT 2
18048: ST_TO_ADDR
// break ;
18049: GO 18053
// end ;
18051: GO 18024
18053: POP
18054: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
18055: LD_VAR 0 1
18059: PPUSH
18060: LD_VAR 0 2
18064: PPUSH
18065: LD_VAR 0 3
18069: PPUSH
18070: LD_VAR 0 4
18074: PPUSH
18075: LD_VAR 0 5
18079: PPUSH
18080: CALL_OW 448
18084: IFFALSE 18119
// begin result := [ chassis , engine , control , weapon ] ;
18086: LD_ADDR_VAR 0 6
18090: PUSH
18091: LD_VAR 0 2
18095: PUSH
18096: LD_VAR 0 3
18100: PUSH
18101: LD_VAR 0 4
18105: PUSH
18106: LD_VAR 0 5
18110: PUSH
18111: EMPTY
18112: LIST
18113: LIST
18114: LIST
18115: LIST
18116: ST_TO_ADDR
// exit ;
18117: GO 18531
// end ; _chassis := AvailableChassisList ( factory ) ;
18119: LD_ADDR_VAR 0 9
18123: PUSH
18124: LD_VAR 0 1
18128: PPUSH
18129: CALL_OW 475
18133: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
18134: LD_ADDR_VAR 0 11
18138: PUSH
18139: LD_VAR 0 1
18143: PPUSH
18144: CALL_OW 476
18148: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
18149: LD_ADDR_VAR 0 12
18153: PUSH
18154: LD_VAR 0 1
18158: PPUSH
18159: CALL_OW 477
18163: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
18164: LD_ADDR_VAR 0 10
18168: PUSH
18169: LD_VAR 0 1
18173: PPUSH
18174: CALL_OW 478
18178: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
18179: LD_VAR 0 9
18183: NOT
18184: PUSH
18185: LD_VAR 0 11
18189: NOT
18190: OR
18191: PUSH
18192: LD_VAR 0 12
18196: NOT
18197: OR
18198: PUSH
18199: LD_VAR 0 10
18203: NOT
18204: OR
18205: IFFALSE 18240
// begin result := [ chassis , engine , control , weapon ] ;
18207: LD_ADDR_VAR 0 6
18211: PUSH
18212: LD_VAR 0 2
18216: PUSH
18217: LD_VAR 0 3
18221: PUSH
18222: LD_VAR 0 4
18226: PUSH
18227: LD_VAR 0 5
18231: PUSH
18232: EMPTY
18233: LIST
18234: LIST
18235: LIST
18236: LIST
18237: ST_TO_ADDR
// exit ;
18238: GO 18531
// end ; if not chassis in _chassis then
18240: LD_VAR 0 2
18244: PUSH
18245: LD_VAR 0 9
18249: IN
18250: NOT
18251: IFFALSE 18277
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
18253: LD_ADDR_VAR 0 2
18257: PUSH
18258: LD_VAR 0 9
18262: PUSH
18263: LD_INT 1
18265: PPUSH
18266: LD_VAR 0 9
18270: PPUSH
18271: CALL_OW 12
18275: ARRAY
18276: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
18277: LD_VAR 0 2
18281: PPUSH
18282: LD_VAR 0 3
18286: PPUSH
18287: CALL 18536 0 2
18291: NOT
18292: IFFALSE 18351
// repeat engine := _engine [ 1 ] ;
18294: LD_ADDR_VAR 0 3
18298: PUSH
18299: LD_VAR 0 11
18303: PUSH
18304: LD_INT 1
18306: ARRAY
18307: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
18308: LD_ADDR_VAR 0 11
18312: PUSH
18313: LD_VAR 0 11
18317: PPUSH
18318: LD_INT 1
18320: PPUSH
18321: CALL_OW 3
18325: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
18326: LD_VAR 0 2
18330: PPUSH
18331: LD_VAR 0 3
18335: PPUSH
18336: CALL 18536 0 2
18340: PUSH
18341: LD_VAR 0 11
18345: PUSH
18346: EMPTY
18347: EQUAL
18348: OR
18349: IFFALSE 18294
// if not control in _control then
18351: LD_VAR 0 4
18355: PUSH
18356: LD_VAR 0 12
18360: IN
18361: NOT
18362: IFFALSE 18388
// control := _control [ rand ( 1 , _control ) ] ;
18364: LD_ADDR_VAR 0 4
18368: PUSH
18369: LD_VAR 0 12
18373: PUSH
18374: LD_INT 1
18376: PPUSH
18377: LD_VAR 0 12
18381: PPUSH
18382: CALL_OW 12
18386: ARRAY
18387: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
18388: LD_VAR 0 2
18392: PPUSH
18393: LD_VAR 0 5
18397: PPUSH
18398: CALL 18756 0 2
18402: NOT
18403: IFFALSE 18462
// repeat weapon := _weapon [ 1 ] ;
18405: LD_ADDR_VAR 0 5
18409: PUSH
18410: LD_VAR 0 10
18414: PUSH
18415: LD_INT 1
18417: ARRAY
18418: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
18419: LD_ADDR_VAR 0 10
18423: PUSH
18424: LD_VAR 0 10
18428: PPUSH
18429: LD_INT 1
18431: PPUSH
18432: CALL_OW 3
18436: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
18437: LD_VAR 0 2
18441: PPUSH
18442: LD_VAR 0 5
18446: PPUSH
18447: CALL 18756 0 2
18451: PUSH
18452: LD_VAR 0 10
18456: PUSH
18457: EMPTY
18458: EQUAL
18459: OR
18460: IFFALSE 18405
// result := [ ] ;
18462: LD_ADDR_VAR 0 6
18466: PUSH
18467: EMPTY
18468: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
18469: LD_VAR 0 1
18473: PPUSH
18474: LD_VAR 0 2
18478: PPUSH
18479: LD_VAR 0 3
18483: PPUSH
18484: LD_VAR 0 4
18488: PPUSH
18489: LD_VAR 0 5
18493: PPUSH
18494: CALL_OW 448
18498: IFFALSE 18531
// result := [ chassis , engine , control , weapon ] ;
18500: LD_ADDR_VAR 0 6
18504: PUSH
18505: LD_VAR 0 2
18509: PUSH
18510: LD_VAR 0 3
18514: PUSH
18515: LD_VAR 0 4
18519: PUSH
18520: LD_VAR 0 5
18524: PUSH
18525: EMPTY
18526: LIST
18527: LIST
18528: LIST
18529: LIST
18530: ST_TO_ADDR
// end ;
18531: LD_VAR 0 6
18535: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
18536: LD_INT 0
18538: PPUSH
// if not chassis or not engine then
18539: LD_VAR 0 1
18543: NOT
18544: PUSH
18545: LD_VAR 0 2
18549: NOT
18550: OR
18551: IFFALSE 18555
// exit ;
18553: GO 18751
// case engine of engine_solar :
18555: LD_VAR 0 2
18559: PUSH
18560: LD_INT 2
18562: DOUBLE
18563: EQUAL
18564: IFTRUE 18568
18566: GO 18606
18568: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
18569: LD_ADDR_VAR 0 3
18573: PUSH
18574: LD_INT 11
18576: PUSH
18577: LD_INT 12
18579: PUSH
18580: LD_INT 13
18582: PUSH
18583: LD_INT 14
18585: PUSH
18586: LD_INT 1
18588: PUSH
18589: LD_INT 2
18591: PUSH
18592: LD_INT 3
18594: PUSH
18595: EMPTY
18596: LIST
18597: LIST
18598: LIST
18599: LIST
18600: LIST
18601: LIST
18602: LIST
18603: ST_TO_ADDR
18604: GO 18735
18606: LD_INT 1
18608: DOUBLE
18609: EQUAL
18610: IFTRUE 18614
18612: GO 18676
18614: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
18615: LD_ADDR_VAR 0 3
18619: PUSH
18620: LD_INT 11
18622: PUSH
18623: LD_INT 12
18625: PUSH
18626: LD_INT 13
18628: PUSH
18629: LD_INT 14
18631: PUSH
18632: LD_INT 1
18634: PUSH
18635: LD_INT 2
18637: PUSH
18638: LD_INT 3
18640: PUSH
18641: LD_INT 4
18643: PUSH
18644: LD_INT 5
18646: PUSH
18647: LD_INT 21
18649: PUSH
18650: LD_INT 23
18652: PUSH
18653: LD_INT 22
18655: PUSH
18656: LD_INT 24
18658: PUSH
18659: EMPTY
18660: LIST
18661: LIST
18662: LIST
18663: LIST
18664: LIST
18665: LIST
18666: LIST
18667: LIST
18668: LIST
18669: LIST
18670: LIST
18671: LIST
18672: LIST
18673: ST_TO_ADDR
18674: GO 18735
18676: LD_INT 3
18678: DOUBLE
18679: EQUAL
18680: IFTRUE 18684
18682: GO 18734
18684: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
18685: LD_ADDR_VAR 0 3
18689: PUSH
18690: LD_INT 13
18692: PUSH
18693: LD_INT 14
18695: PUSH
18696: LD_INT 2
18698: PUSH
18699: LD_INT 3
18701: PUSH
18702: LD_INT 4
18704: PUSH
18705: LD_INT 5
18707: PUSH
18708: LD_INT 21
18710: PUSH
18711: LD_INT 22
18713: PUSH
18714: LD_INT 23
18716: PUSH
18717: LD_INT 24
18719: PUSH
18720: EMPTY
18721: LIST
18722: LIST
18723: LIST
18724: LIST
18725: LIST
18726: LIST
18727: LIST
18728: LIST
18729: LIST
18730: LIST
18731: ST_TO_ADDR
18732: GO 18735
18734: POP
// result := ( chassis in result ) ;
18735: LD_ADDR_VAR 0 3
18739: PUSH
18740: LD_VAR 0 1
18744: PUSH
18745: LD_VAR 0 3
18749: IN
18750: ST_TO_ADDR
// end ;
18751: LD_VAR 0 3
18755: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
18756: LD_INT 0
18758: PPUSH
// if not chassis or not weapon then
18759: LD_VAR 0 1
18763: NOT
18764: PUSH
18765: LD_VAR 0 2
18769: NOT
18770: OR
18771: IFFALSE 18775
// exit ;
18773: GO 19835
// case weapon of us_machine_gun :
18775: LD_VAR 0 2
18779: PUSH
18780: LD_INT 2
18782: DOUBLE
18783: EQUAL
18784: IFTRUE 18788
18786: GO 18818
18788: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
18789: LD_ADDR_VAR 0 3
18793: PUSH
18794: LD_INT 1
18796: PUSH
18797: LD_INT 2
18799: PUSH
18800: LD_INT 3
18802: PUSH
18803: LD_INT 4
18805: PUSH
18806: LD_INT 5
18808: PUSH
18809: EMPTY
18810: LIST
18811: LIST
18812: LIST
18813: LIST
18814: LIST
18815: ST_TO_ADDR
18816: GO 19819
18818: LD_INT 3
18820: DOUBLE
18821: EQUAL
18822: IFTRUE 18826
18824: GO 18856
18826: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
18827: LD_ADDR_VAR 0 3
18831: PUSH
18832: LD_INT 1
18834: PUSH
18835: LD_INT 2
18837: PUSH
18838: LD_INT 3
18840: PUSH
18841: LD_INT 4
18843: PUSH
18844: LD_INT 5
18846: PUSH
18847: EMPTY
18848: LIST
18849: LIST
18850: LIST
18851: LIST
18852: LIST
18853: ST_TO_ADDR
18854: GO 19819
18856: LD_INT 11
18858: DOUBLE
18859: EQUAL
18860: IFTRUE 18864
18862: GO 18894
18864: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
18865: LD_ADDR_VAR 0 3
18869: PUSH
18870: LD_INT 1
18872: PUSH
18873: LD_INT 2
18875: PUSH
18876: LD_INT 3
18878: PUSH
18879: LD_INT 4
18881: PUSH
18882: LD_INT 5
18884: PUSH
18885: EMPTY
18886: LIST
18887: LIST
18888: LIST
18889: LIST
18890: LIST
18891: ST_TO_ADDR
18892: GO 19819
18894: LD_INT 4
18896: DOUBLE
18897: EQUAL
18898: IFTRUE 18902
18900: GO 18928
18902: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
18903: LD_ADDR_VAR 0 3
18907: PUSH
18908: LD_INT 2
18910: PUSH
18911: LD_INT 3
18913: PUSH
18914: LD_INT 4
18916: PUSH
18917: LD_INT 5
18919: PUSH
18920: EMPTY
18921: LIST
18922: LIST
18923: LIST
18924: LIST
18925: ST_TO_ADDR
18926: GO 19819
18928: LD_INT 5
18930: DOUBLE
18931: EQUAL
18932: IFTRUE 18936
18934: GO 18962
18936: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
18937: LD_ADDR_VAR 0 3
18941: PUSH
18942: LD_INT 2
18944: PUSH
18945: LD_INT 3
18947: PUSH
18948: LD_INT 4
18950: PUSH
18951: LD_INT 5
18953: PUSH
18954: EMPTY
18955: LIST
18956: LIST
18957: LIST
18958: LIST
18959: ST_TO_ADDR
18960: GO 19819
18962: LD_INT 9
18964: DOUBLE
18965: EQUAL
18966: IFTRUE 18970
18968: GO 18996
18970: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
18971: LD_ADDR_VAR 0 3
18975: PUSH
18976: LD_INT 2
18978: PUSH
18979: LD_INT 3
18981: PUSH
18982: LD_INT 4
18984: PUSH
18985: LD_INT 5
18987: PUSH
18988: EMPTY
18989: LIST
18990: LIST
18991: LIST
18992: LIST
18993: ST_TO_ADDR
18994: GO 19819
18996: LD_INT 7
18998: DOUBLE
18999: EQUAL
19000: IFTRUE 19004
19002: GO 19030
19004: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
19005: LD_ADDR_VAR 0 3
19009: PUSH
19010: LD_INT 2
19012: PUSH
19013: LD_INT 3
19015: PUSH
19016: LD_INT 4
19018: PUSH
19019: LD_INT 5
19021: PUSH
19022: EMPTY
19023: LIST
19024: LIST
19025: LIST
19026: LIST
19027: ST_TO_ADDR
19028: GO 19819
19030: LD_INT 12
19032: DOUBLE
19033: EQUAL
19034: IFTRUE 19038
19036: GO 19064
19038: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
19039: LD_ADDR_VAR 0 3
19043: PUSH
19044: LD_INT 2
19046: PUSH
19047: LD_INT 3
19049: PUSH
19050: LD_INT 4
19052: PUSH
19053: LD_INT 5
19055: PUSH
19056: EMPTY
19057: LIST
19058: LIST
19059: LIST
19060: LIST
19061: ST_TO_ADDR
19062: GO 19819
19064: LD_INT 13
19066: DOUBLE
19067: EQUAL
19068: IFTRUE 19072
19070: GO 19098
19072: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
19073: LD_ADDR_VAR 0 3
19077: PUSH
19078: LD_INT 2
19080: PUSH
19081: LD_INT 3
19083: PUSH
19084: LD_INT 4
19086: PUSH
19087: LD_INT 5
19089: PUSH
19090: EMPTY
19091: LIST
19092: LIST
19093: LIST
19094: LIST
19095: ST_TO_ADDR
19096: GO 19819
19098: LD_INT 14
19100: DOUBLE
19101: EQUAL
19102: IFTRUE 19106
19104: GO 19124
19106: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
19107: LD_ADDR_VAR 0 3
19111: PUSH
19112: LD_INT 4
19114: PUSH
19115: LD_INT 5
19117: PUSH
19118: EMPTY
19119: LIST
19120: LIST
19121: ST_TO_ADDR
19122: GO 19819
19124: LD_INT 6
19126: DOUBLE
19127: EQUAL
19128: IFTRUE 19132
19130: GO 19150
19132: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
19133: LD_ADDR_VAR 0 3
19137: PUSH
19138: LD_INT 4
19140: PUSH
19141: LD_INT 5
19143: PUSH
19144: EMPTY
19145: LIST
19146: LIST
19147: ST_TO_ADDR
19148: GO 19819
19150: LD_INT 10
19152: DOUBLE
19153: EQUAL
19154: IFTRUE 19158
19156: GO 19176
19158: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
19159: LD_ADDR_VAR 0 3
19163: PUSH
19164: LD_INT 4
19166: PUSH
19167: LD_INT 5
19169: PUSH
19170: EMPTY
19171: LIST
19172: LIST
19173: ST_TO_ADDR
19174: GO 19819
19176: LD_INT 22
19178: DOUBLE
19179: EQUAL
19180: IFTRUE 19184
19182: GO 19210
19184: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
19185: LD_ADDR_VAR 0 3
19189: PUSH
19190: LD_INT 11
19192: PUSH
19193: LD_INT 12
19195: PUSH
19196: LD_INT 13
19198: PUSH
19199: LD_INT 14
19201: PUSH
19202: EMPTY
19203: LIST
19204: LIST
19205: LIST
19206: LIST
19207: ST_TO_ADDR
19208: GO 19819
19210: LD_INT 23
19212: DOUBLE
19213: EQUAL
19214: IFTRUE 19218
19216: GO 19244
19218: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
19219: LD_ADDR_VAR 0 3
19223: PUSH
19224: LD_INT 11
19226: PUSH
19227: LD_INT 12
19229: PUSH
19230: LD_INT 13
19232: PUSH
19233: LD_INT 14
19235: PUSH
19236: EMPTY
19237: LIST
19238: LIST
19239: LIST
19240: LIST
19241: ST_TO_ADDR
19242: GO 19819
19244: LD_INT 24
19246: DOUBLE
19247: EQUAL
19248: IFTRUE 19252
19250: GO 19278
19252: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
19253: LD_ADDR_VAR 0 3
19257: PUSH
19258: LD_INT 11
19260: PUSH
19261: LD_INT 12
19263: PUSH
19264: LD_INT 13
19266: PUSH
19267: LD_INT 14
19269: PUSH
19270: EMPTY
19271: LIST
19272: LIST
19273: LIST
19274: LIST
19275: ST_TO_ADDR
19276: GO 19819
19278: LD_INT 30
19280: DOUBLE
19281: EQUAL
19282: IFTRUE 19286
19284: GO 19312
19286: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
19287: LD_ADDR_VAR 0 3
19291: PUSH
19292: LD_INT 11
19294: PUSH
19295: LD_INT 12
19297: PUSH
19298: LD_INT 13
19300: PUSH
19301: LD_INT 14
19303: PUSH
19304: EMPTY
19305: LIST
19306: LIST
19307: LIST
19308: LIST
19309: ST_TO_ADDR
19310: GO 19819
19312: LD_INT 25
19314: DOUBLE
19315: EQUAL
19316: IFTRUE 19320
19318: GO 19338
19320: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
19321: LD_ADDR_VAR 0 3
19325: PUSH
19326: LD_INT 13
19328: PUSH
19329: LD_INT 14
19331: PUSH
19332: EMPTY
19333: LIST
19334: LIST
19335: ST_TO_ADDR
19336: GO 19819
19338: LD_INT 27
19340: DOUBLE
19341: EQUAL
19342: IFTRUE 19346
19344: GO 19364
19346: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
19347: LD_ADDR_VAR 0 3
19351: PUSH
19352: LD_INT 13
19354: PUSH
19355: LD_INT 14
19357: PUSH
19358: EMPTY
19359: LIST
19360: LIST
19361: ST_TO_ADDR
19362: GO 19819
19364: LD_INT 92
19366: DOUBLE
19367: EQUAL
19368: IFTRUE 19372
19370: GO 19398
19372: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
19373: LD_ADDR_VAR 0 3
19377: PUSH
19378: LD_INT 11
19380: PUSH
19381: LD_INT 12
19383: PUSH
19384: LD_INT 13
19386: PUSH
19387: LD_INT 14
19389: PUSH
19390: EMPTY
19391: LIST
19392: LIST
19393: LIST
19394: LIST
19395: ST_TO_ADDR
19396: GO 19819
19398: LD_INT 28
19400: DOUBLE
19401: EQUAL
19402: IFTRUE 19406
19404: GO 19424
19406: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
19407: LD_ADDR_VAR 0 3
19411: PUSH
19412: LD_INT 13
19414: PUSH
19415: LD_INT 14
19417: PUSH
19418: EMPTY
19419: LIST
19420: LIST
19421: ST_TO_ADDR
19422: GO 19819
19424: LD_INT 29
19426: DOUBLE
19427: EQUAL
19428: IFTRUE 19432
19430: GO 19450
19432: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
19433: LD_ADDR_VAR 0 3
19437: PUSH
19438: LD_INT 13
19440: PUSH
19441: LD_INT 14
19443: PUSH
19444: EMPTY
19445: LIST
19446: LIST
19447: ST_TO_ADDR
19448: GO 19819
19450: LD_INT 31
19452: DOUBLE
19453: EQUAL
19454: IFTRUE 19458
19456: GO 19476
19458: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
19459: LD_ADDR_VAR 0 3
19463: PUSH
19464: LD_INT 13
19466: PUSH
19467: LD_INT 14
19469: PUSH
19470: EMPTY
19471: LIST
19472: LIST
19473: ST_TO_ADDR
19474: GO 19819
19476: LD_INT 26
19478: DOUBLE
19479: EQUAL
19480: IFTRUE 19484
19482: GO 19502
19484: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
19485: LD_ADDR_VAR 0 3
19489: PUSH
19490: LD_INT 13
19492: PUSH
19493: LD_INT 14
19495: PUSH
19496: EMPTY
19497: LIST
19498: LIST
19499: ST_TO_ADDR
19500: GO 19819
19502: LD_INT 42
19504: DOUBLE
19505: EQUAL
19506: IFTRUE 19510
19508: GO 19536
19510: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
19511: LD_ADDR_VAR 0 3
19515: PUSH
19516: LD_INT 21
19518: PUSH
19519: LD_INT 22
19521: PUSH
19522: LD_INT 23
19524: PUSH
19525: LD_INT 24
19527: PUSH
19528: EMPTY
19529: LIST
19530: LIST
19531: LIST
19532: LIST
19533: ST_TO_ADDR
19534: GO 19819
19536: LD_INT 43
19538: DOUBLE
19539: EQUAL
19540: IFTRUE 19544
19542: GO 19570
19544: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
19545: LD_ADDR_VAR 0 3
19549: PUSH
19550: LD_INT 21
19552: PUSH
19553: LD_INT 22
19555: PUSH
19556: LD_INT 23
19558: PUSH
19559: LD_INT 24
19561: PUSH
19562: EMPTY
19563: LIST
19564: LIST
19565: LIST
19566: LIST
19567: ST_TO_ADDR
19568: GO 19819
19570: LD_INT 44
19572: DOUBLE
19573: EQUAL
19574: IFTRUE 19578
19576: GO 19604
19578: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
19579: LD_ADDR_VAR 0 3
19583: PUSH
19584: LD_INT 21
19586: PUSH
19587: LD_INT 22
19589: PUSH
19590: LD_INT 23
19592: PUSH
19593: LD_INT 24
19595: PUSH
19596: EMPTY
19597: LIST
19598: LIST
19599: LIST
19600: LIST
19601: ST_TO_ADDR
19602: GO 19819
19604: LD_INT 45
19606: DOUBLE
19607: EQUAL
19608: IFTRUE 19612
19610: GO 19638
19612: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
19613: LD_ADDR_VAR 0 3
19617: PUSH
19618: LD_INT 21
19620: PUSH
19621: LD_INT 22
19623: PUSH
19624: LD_INT 23
19626: PUSH
19627: LD_INT 24
19629: PUSH
19630: EMPTY
19631: LIST
19632: LIST
19633: LIST
19634: LIST
19635: ST_TO_ADDR
19636: GO 19819
19638: LD_INT 49
19640: DOUBLE
19641: EQUAL
19642: IFTRUE 19646
19644: GO 19672
19646: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
19647: LD_ADDR_VAR 0 3
19651: PUSH
19652: LD_INT 21
19654: PUSH
19655: LD_INT 22
19657: PUSH
19658: LD_INT 23
19660: PUSH
19661: LD_INT 24
19663: PUSH
19664: EMPTY
19665: LIST
19666: LIST
19667: LIST
19668: LIST
19669: ST_TO_ADDR
19670: GO 19819
19672: LD_INT 51
19674: DOUBLE
19675: EQUAL
19676: IFTRUE 19680
19678: GO 19706
19680: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
19681: LD_ADDR_VAR 0 3
19685: PUSH
19686: LD_INT 21
19688: PUSH
19689: LD_INT 22
19691: PUSH
19692: LD_INT 23
19694: PUSH
19695: LD_INT 24
19697: PUSH
19698: EMPTY
19699: LIST
19700: LIST
19701: LIST
19702: LIST
19703: ST_TO_ADDR
19704: GO 19819
19706: LD_INT 52
19708: DOUBLE
19709: EQUAL
19710: IFTRUE 19714
19712: GO 19740
19714: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
19715: LD_ADDR_VAR 0 3
19719: PUSH
19720: LD_INT 21
19722: PUSH
19723: LD_INT 22
19725: PUSH
19726: LD_INT 23
19728: PUSH
19729: LD_INT 24
19731: PUSH
19732: EMPTY
19733: LIST
19734: LIST
19735: LIST
19736: LIST
19737: ST_TO_ADDR
19738: GO 19819
19740: LD_INT 53
19742: DOUBLE
19743: EQUAL
19744: IFTRUE 19748
19746: GO 19766
19748: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
19749: LD_ADDR_VAR 0 3
19753: PUSH
19754: LD_INT 23
19756: PUSH
19757: LD_INT 24
19759: PUSH
19760: EMPTY
19761: LIST
19762: LIST
19763: ST_TO_ADDR
19764: GO 19819
19766: LD_INT 46
19768: DOUBLE
19769: EQUAL
19770: IFTRUE 19774
19772: GO 19792
19774: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
19775: LD_ADDR_VAR 0 3
19779: PUSH
19780: LD_INT 23
19782: PUSH
19783: LD_INT 24
19785: PUSH
19786: EMPTY
19787: LIST
19788: LIST
19789: ST_TO_ADDR
19790: GO 19819
19792: LD_INT 47
19794: DOUBLE
19795: EQUAL
19796: IFTRUE 19800
19798: GO 19818
19800: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
19801: LD_ADDR_VAR 0 3
19805: PUSH
19806: LD_INT 23
19808: PUSH
19809: LD_INT 24
19811: PUSH
19812: EMPTY
19813: LIST
19814: LIST
19815: ST_TO_ADDR
19816: GO 19819
19818: POP
// result := ( chassis in result ) ;
19819: LD_ADDR_VAR 0 3
19823: PUSH
19824: LD_VAR 0 1
19828: PUSH
19829: LD_VAR 0 3
19833: IN
19834: ST_TO_ADDR
// end ;
19835: LD_VAR 0 3
19839: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
19840: LD_INT 0
19842: PPUSH
19843: PPUSH
19844: PPUSH
19845: PPUSH
19846: PPUSH
19847: PPUSH
19848: PPUSH
// result := array ;
19849: LD_ADDR_VAR 0 5
19853: PUSH
19854: LD_VAR 0 1
19858: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
19859: LD_VAR 0 1
19863: NOT
19864: PUSH
19865: LD_VAR 0 2
19869: NOT
19870: OR
19871: PUSH
19872: LD_VAR 0 3
19876: NOT
19877: OR
19878: PUSH
19879: LD_VAR 0 2
19883: PUSH
19884: LD_VAR 0 1
19888: GREATER
19889: OR
19890: PUSH
19891: LD_VAR 0 3
19895: PUSH
19896: LD_VAR 0 1
19900: GREATER
19901: OR
19902: IFFALSE 19906
// exit ;
19904: GO 20202
// if direction then
19906: LD_VAR 0 4
19910: IFFALSE 19974
// begin d := 1 ;
19912: LD_ADDR_VAR 0 9
19916: PUSH
19917: LD_INT 1
19919: ST_TO_ADDR
// if i_from > i_to then
19920: LD_VAR 0 2
19924: PUSH
19925: LD_VAR 0 3
19929: GREATER
19930: IFFALSE 19956
// length := ( array - i_from ) + i_to else
19932: LD_ADDR_VAR 0 11
19936: PUSH
19937: LD_VAR 0 1
19941: PUSH
19942: LD_VAR 0 2
19946: MINUS
19947: PUSH
19948: LD_VAR 0 3
19952: PLUS
19953: ST_TO_ADDR
19954: GO 19972
// length := i_to - i_from ;
19956: LD_ADDR_VAR 0 11
19960: PUSH
19961: LD_VAR 0 3
19965: PUSH
19966: LD_VAR 0 2
19970: MINUS
19971: ST_TO_ADDR
// end else
19972: GO 20035
// begin d := - 1 ;
19974: LD_ADDR_VAR 0 9
19978: PUSH
19979: LD_INT 1
19981: NEG
19982: ST_TO_ADDR
// if i_from > i_to then
19983: LD_VAR 0 2
19987: PUSH
19988: LD_VAR 0 3
19992: GREATER
19993: IFFALSE 20013
// length := i_from - i_to else
19995: LD_ADDR_VAR 0 11
19999: PUSH
20000: LD_VAR 0 2
20004: PUSH
20005: LD_VAR 0 3
20009: MINUS
20010: ST_TO_ADDR
20011: GO 20035
// length := ( array - i_to ) + i_from ;
20013: LD_ADDR_VAR 0 11
20017: PUSH
20018: LD_VAR 0 1
20022: PUSH
20023: LD_VAR 0 3
20027: MINUS
20028: PUSH
20029: LD_VAR 0 2
20033: PLUS
20034: ST_TO_ADDR
// end ; if not length then
20035: LD_VAR 0 11
20039: NOT
20040: IFFALSE 20044
// exit ;
20042: GO 20202
// tmp := array ;
20044: LD_ADDR_VAR 0 10
20048: PUSH
20049: LD_VAR 0 1
20053: ST_TO_ADDR
// for i = 1 to length do
20054: LD_ADDR_VAR 0 6
20058: PUSH
20059: DOUBLE
20060: LD_INT 1
20062: DEC
20063: ST_TO_ADDR
20064: LD_VAR 0 11
20068: PUSH
20069: FOR_TO
20070: IFFALSE 20190
// begin for j = 1 to array do
20072: LD_ADDR_VAR 0 7
20076: PUSH
20077: DOUBLE
20078: LD_INT 1
20080: DEC
20081: ST_TO_ADDR
20082: LD_VAR 0 1
20086: PUSH
20087: FOR_TO
20088: IFFALSE 20176
// begin k := j + d ;
20090: LD_ADDR_VAR 0 8
20094: PUSH
20095: LD_VAR 0 7
20099: PUSH
20100: LD_VAR 0 9
20104: PLUS
20105: ST_TO_ADDR
// if k > array then
20106: LD_VAR 0 8
20110: PUSH
20111: LD_VAR 0 1
20115: GREATER
20116: IFFALSE 20126
// k := 1 ;
20118: LD_ADDR_VAR 0 8
20122: PUSH
20123: LD_INT 1
20125: ST_TO_ADDR
// if not k then
20126: LD_VAR 0 8
20130: NOT
20131: IFFALSE 20143
// k := array ;
20133: LD_ADDR_VAR 0 8
20137: PUSH
20138: LD_VAR 0 1
20142: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
20143: LD_ADDR_VAR 0 10
20147: PUSH
20148: LD_VAR 0 10
20152: PPUSH
20153: LD_VAR 0 8
20157: PPUSH
20158: LD_VAR 0 1
20162: PUSH
20163: LD_VAR 0 7
20167: ARRAY
20168: PPUSH
20169: CALL_OW 1
20173: ST_TO_ADDR
// end ;
20174: GO 20087
20176: POP
20177: POP
// array := tmp ;
20178: LD_ADDR_VAR 0 1
20182: PUSH
20183: LD_VAR 0 10
20187: ST_TO_ADDR
// end ;
20188: GO 20069
20190: POP
20191: POP
// result := array ;
20192: LD_ADDR_VAR 0 5
20196: PUSH
20197: LD_VAR 0 1
20201: ST_TO_ADDR
// end ;
20202: LD_VAR 0 5
20206: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
20207: LD_INT 0
20209: PPUSH
20210: PPUSH
// result := 0 ;
20211: LD_ADDR_VAR 0 3
20215: PUSH
20216: LD_INT 0
20218: ST_TO_ADDR
// if not array or not value in array then
20219: LD_VAR 0 1
20223: NOT
20224: PUSH
20225: LD_VAR 0 2
20229: PUSH
20230: LD_VAR 0 1
20234: IN
20235: NOT
20236: OR
20237: IFFALSE 20241
// exit ;
20239: GO 20295
// for i = 1 to array do
20241: LD_ADDR_VAR 0 4
20245: PUSH
20246: DOUBLE
20247: LD_INT 1
20249: DEC
20250: ST_TO_ADDR
20251: LD_VAR 0 1
20255: PUSH
20256: FOR_TO
20257: IFFALSE 20293
// if value = array [ i ] then
20259: LD_VAR 0 2
20263: PUSH
20264: LD_VAR 0 1
20268: PUSH
20269: LD_VAR 0 4
20273: ARRAY
20274: EQUAL
20275: IFFALSE 20291
// begin result := i ;
20277: LD_ADDR_VAR 0 3
20281: PUSH
20282: LD_VAR 0 4
20286: ST_TO_ADDR
// exit ;
20287: POP
20288: POP
20289: GO 20295
// end ;
20291: GO 20256
20293: POP
20294: POP
// end ;
20295: LD_VAR 0 3
20299: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
20300: LD_INT 0
20302: PPUSH
// vc_chassis := chassis ;
20303: LD_ADDR_OWVAR 37
20307: PUSH
20308: LD_VAR 0 1
20312: ST_TO_ADDR
// vc_engine := engine ;
20313: LD_ADDR_OWVAR 39
20317: PUSH
20318: LD_VAR 0 2
20322: ST_TO_ADDR
// vc_control := control ;
20323: LD_ADDR_OWVAR 38
20327: PUSH
20328: LD_VAR 0 3
20332: ST_TO_ADDR
// vc_weapon := weapon ;
20333: LD_ADDR_OWVAR 40
20337: PUSH
20338: LD_VAR 0 4
20342: ST_TO_ADDR
// vc_fuel_battery := fuel ;
20343: LD_ADDR_OWVAR 41
20347: PUSH
20348: LD_VAR 0 5
20352: ST_TO_ADDR
// end ;
20353: LD_VAR 0 6
20357: RET
// export function WantPlant ( unit ) ; var task ; begin
20358: LD_INT 0
20360: PPUSH
20361: PPUSH
// result := false ;
20362: LD_ADDR_VAR 0 2
20366: PUSH
20367: LD_INT 0
20369: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
20370: LD_ADDR_VAR 0 3
20374: PUSH
20375: LD_VAR 0 1
20379: PPUSH
20380: CALL_OW 437
20384: ST_TO_ADDR
// if task then
20385: LD_VAR 0 3
20389: IFFALSE 20417
// if task [ 1 ] [ 1 ] = p then
20391: LD_VAR 0 3
20395: PUSH
20396: LD_INT 1
20398: ARRAY
20399: PUSH
20400: LD_INT 1
20402: ARRAY
20403: PUSH
20404: LD_STRING p
20406: EQUAL
20407: IFFALSE 20417
// result := true ;
20409: LD_ADDR_VAR 0 2
20413: PUSH
20414: LD_INT 1
20416: ST_TO_ADDR
// end ;
20417: LD_VAR 0 2
20421: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
20422: LD_INT 0
20424: PPUSH
20425: PPUSH
20426: PPUSH
20427: PPUSH
// if pos < 1 then
20428: LD_VAR 0 2
20432: PUSH
20433: LD_INT 1
20435: LESS
20436: IFFALSE 20440
// exit ;
20438: GO 20743
// if pos = 1 then
20440: LD_VAR 0 2
20444: PUSH
20445: LD_INT 1
20447: EQUAL
20448: IFFALSE 20481
// result := Replace ( arr , pos [ 1 ] , value ) else
20450: LD_ADDR_VAR 0 4
20454: PUSH
20455: LD_VAR 0 1
20459: PPUSH
20460: LD_VAR 0 2
20464: PUSH
20465: LD_INT 1
20467: ARRAY
20468: PPUSH
20469: LD_VAR 0 3
20473: PPUSH
20474: CALL_OW 1
20478: ST_TO_ADDR
20479: GO 20743
// begin tmp := arr ;
20481: LD_ADDR_VAR 0 6
20485: PUSH
20486: LD_VAR 0 1
20490: ST_TO_ADDR
// s_arr := [ tmp ] ;
20491: LD_ADDR_VAR 0 7
20495: PUSH
20496: LD_VAR 0 6
20500: PUSH
20501: EMPTY
20502: LIST
20503: ST_TO_ADDR
// for i = 1 to pos - 1 do
20504: LD_ADDR_VAR 0 5
20508: PUSH
20509: DOUBLE
20510: LD_INT 1
20512: DEC
20513: ST_TO_ADDR
20514: LD_VAR 0 2
20518: PUSH
20519: LD_INT 1
20521: MINUS
20522: PUSH
20523: FOR_TO
20524: IFFALSE 20569
// begin tmp := tmp [ pos [ i ] ] ;
20526: LD_ADDR_VAR 0 6
20530: PUSH
20531: LD_VAR 0 6
20535: PUSH
20536: LD_VAR 0 2
20540: PUSH
20541: LD_VAR 0 5
20545: ARRAY
20546: ARRAY
20547: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
20548: LD_ADDR_VAR 0 7
20552: PUSH
20553: LD_VAR 0 7
20557: PUSH
20558: LD_VAR 0 6
20562: PUSH
20563: EMPTY
20564: LIST
20565: ADD
20566: ST_TO_ADDR
// end ;
20567: GO 20523
20569: POP
20570: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
20571: LD_ADDR_VAR 0 6
20575: PUSH
20576: LD_VAR 0 6
20580: PPUSH
20581: LD_VAR 0 2
20585: PUSH
20586: LD_VAR 0 2
20590: ARRAY
20591: PPUSH
20592: LD_VAR 0 3
20596: PPUSH
20597: CALL_OW 1
20601: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
20602: LD_ADDR_VAR 0 7
20606: PUSH
20607: LD_VAR 0 7
20611: PPUSH
20612: LD_VAR 0 7
20616: PPUSH
20617: LD_VAR 0 6
20621: PPUSH
20622: CALL_OW 1
20626: ST_TO_ADDR
// for i = s_arr downto 2 do
20627: LD_ADDR_VAR 0 5
20631: PUSH
20632: DOUBLE
20633: LD_VAR 0 7
20637: INC
20638: ST_TO_ADDR
20639: LD_INT 2
20641: PUSH
20642: FOR_DOWNTO
20643: IFFALSE 20727
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
20645: LD_ADDR_VAR 0 6
20649: PUSH
20650: LD_VAR 0 7
20654: PUSH
20655: LD_VAR 0 5
20659: PUSH
20660: LD_INT 1
20662: MINUS
20663: ARRAY
20664: PPUSH
20665: LD_VAR 0 2
20669: PUSH
20670: LD_VAR 0 5
20674: PUSH
20675: LD_INT 1
20677: MINUS
20678: ARRAY
20679: PPUSH
20680: LD_VAR 0 7
20684: PUSH
20685: LD_VAR 0 5
20689: ARRAY
20690: PPUSH
20691: CALL_OW 1
20695: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
20696: LD_ADDR_VAR 0 7
20700: PUSH
20701: LD_VAR 0 7
20705: PPUSH
20706: LD_VAR 0 5
20710: PUSH
20711: LD_INT 1
20713: MINUS
20714: PPUSH
20715: LD_VAR 0 6
20719: PPUSH
20720: CALL_OW 1
20724: ST_TO_ADDR
// end ;
20725: GO 20642
20727: POP
20728: POP
// result := s_arr [ 1 ] ;
20729: LD_ADDR_VAR 0 4
20733: PUSH
20734: LD_VAR 0 7
20738: PUSH
20739: LD_INT 1
20741: ARRAY
20742: ST_TO_ADDR
// end ; end ;
20743: LD_VAR 0 4
20747: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
20748: LD_INT 0
20750: PPUSH
20751: PPUSH
// if not list then
20752: LD_VAR 0 1
20756: NOT
20757: IFFALSE 20761
// exit ;
20759: GO 20852
// i := list [ pos1 ] ;
20761: LD_ADDR_VAR 0 5
20765: PUSH
20766: LD_VAR 0 1
20770: PUSH
20771: LD_VAR 0 2
20775: ARRAY
20776: ST_TO_ADDR
// if not i then
20777: LD_VAR 0 5
20781: NOT
20782: IFFALSE 20786
// exit ;
20784: GO 20852
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
20786: LD_ADDR_VAR 0 1
20790: PUSH
20791: LD_VAR 0 1
20795: PPUSH
20796: LD_VAR 0 2
20800: PPUSH
20801: LD_VAR 0 1
20805: PUSH
20806: LD_VAR 0 3
20810: ARRAY
20811: PPUSH
20812: CALL_OW 1
20816: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
20817: LD_ADDR_VAR 0 1
20821: PUSH
20822: LD_VAR 0 1
20826: PPUSH
20827: LD_VAR 0 3
20831: PPUSH
20832: LD_VAR 0 5
20836: PPUSH
20837: CALL_OW 1
20841: ST_TO_ADDR
// result := list ;
20842: LD_ADDR_VAR 0 4
20846: PUSH
20847: LD_VAR 0 1
20851: ST_TO_ADDR
// end ;
20852: LD_VAR 0 4
20856: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
20857: LD_INT 0
20859: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
20860: LD_ADDR_VAR 0 5
20864: PUSH
20865: LD_VAR 0 1
20869: PPUSH
20870: CALL_OW 250
20874: PPUSH
20875: LD_VAR 0 1
20879: PPUSH
20880: CALL_OW 251
20884: PPUSH
20885: LD_VAR 0 2
20889: PPUSH
20890: LD_VAR 0 3
20894: PPUSH
20895: LD_VAR 0 4
20899: PPUSH
20900: CALL 21278 0 5
20904: ST_TO_ADDR
// end ;
20905: LD_VAR 0 5
20909: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
20910: LD_INT 0
20912: PPUSH
20913: PPUSH
20914: PPUSH
20915: PPUSH
// if not list or not unit then
20916: LD_VAR 0 2
20920: NOT
20921: PUSH
20922: LD_VAR 0 1
20926: NOT
20927: OR
20928: IFFALSE 20932
// exit ;
20930: GO 21273
// result := [ ] ;
20932: LD_ADDR_VAR 0 5
20936: PUSH
20937: EMPTY
20938: ST_TO_ADDR
// for i in list do
20939: LD_ADDR_VAR 0 6
20943: PUSH
20944: LD_VAR 0 2
20948: PUSH
20949: FOR_IN
20950: IFFALSE 21168
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
20952: LD_ADDR_VAR 0 8
20956: PUSH
20957: LD_VAR 0 1
20961: PPUSH
20962: LD_VAR 0 6
20966: PUSH
20967: LD_INT 1
20969: ARRAY
20970: PPUSH
20971: LD_VAR 0 6
20975: PUSH
20976: LD_INT 2
20978: ARRAY
20979: PPUSH
20980: CALL_OW 297
20984: ST_TO_ADDR
// if not Count ( result ) then
20985: LD_VAR 0 5
20989: PPUSH
20990: CALL 17562 0 1
20994: NOT
20995: IFFALSE 21028
// begin result := Join ( result , [ i , tmp ] ) ;
20997: LD_ADDR_VAR 0 5
21001: PUSH
21002: LD_VAR 0 5
21006: PPUSH
21007: LD_VAR 0 6
21011: PUSH
21012: LD_VAR 0 8
21016: PUSH
21017: EMPTY
21018: LIST
21019: LIST
21020: PPUSH
21021: CALL 53171 0 2
21025: ST_TO_ADDR
// continue ;
21026: GO 20949
// end ; if result [ result ] [ 2 ] <= tmp then
21028: LD_VAR 0 5
21032: PUSH
21033: LD_VAR 0 5
21037: ARRAY
21038: PUSH
21039: LD_INT 2
21041: ARRAY
21042: PUSH
21043: LD_VAR 0 8
21047: LESSEQUAL
21048: IFFALSE 21081
// result := Join ( result , [ i , tmp ] ) else
21050: LD_ADDR_VAR 0 5
21054: PUSH
21055: LD_VAR 0 5
21059: PPUSH
21060: LD_VAR 0 6
21064: PUSH
21065: LD_VAR 0 8
21069: PUSH
21070: EMPTY
21071: LIST
21072: LIST
21073: PPUSH
21074: CALL 53171 0 2
21078: ST_TO_ADDR
21079: GO 21166
// begin for j := 1 to Count ( result ) do
21081: LD_ADDR_VAR 0 7
21085: PUSH
21086: DOUBLE
21087: LD_INT 1
21089: DEC
21090: ST_TO_ADDR
21091: LD_VAR 0 5
21095: PPUSH
21096: CALL 17562 0 1
21100: PUSH
21101: FOR_TO
21102: IFFALSE 21164
// begin if tmp < result [ j ] [ 2 ] then
21104: LD_VAR 0 8
21108: PUSH
21109: LD_VAR 0 5
21113: PUSH
21114: LD_VAR 0 7
21118: ARRAY
21119: PUSH
21120: LD_INT 2
21122: ARRAY
21123: LESS
21124: IFFALSE 21162
// begin result := Insert ( result , j , [ i , tmp ] ) ;
21126: LD_ADDR_VAR 0 5
21130: PUSH
21131: LD_VAR 0 5
21135: PPUSH
21136: LD_VAR 0 7
21140: PPUSH
21141: LD_VAR 0 6
21145: PUSH
21146: LD_VAR 0 8
21150: PUSH
21151: EMPTY
21152: LIST
21153: LIST
21154: PPUSH
21155: CALL_OW 2
21159: ST_TO_ADDR
// break ;
21160: GO 21164
// end ; end ;
21162: GO 21101
21164: POP
21165: POP
// end ; end ;
21166: GO 20949
21168: POP
21169: POP
// if result and not asc then
21170: LD_VAR 0 5
21174: PUSH
21175: LD_VAR 0 3
21179: NOT
21180: AND
21181: IFFALSE 21198
// result := ReverseArray ( result ) ;
21183: LD_ADDR_VAR 0 5
21187: PUSH
21188: LD_VAR 0 5
21192: PPUSH
21193: CALL 48438 0 1
21197: ST_TO_ADDR
// tmp := [ ] ;
21198: LD_ADDR_VAR 0 8
21202: PUSH
21203: EMPTY
21204: ST_TO_ADDR
// if mode then
21205: LD_VAR 0 4
21209: IFFALSE 21273
// begin for i := 1 to result do
21211: LD_ADDR_VAR 0 6
21215: PUSH
21216: DOUBLE
21217: LD_INT 1
21219: DEC
21220: ST_TO_ADDR
21221: LD_VAR 0 5
21225: PUSH
21226: FOR_TO
21227: IFFALSE 21261
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
21229: LD_ADDR_VAR 0 8
21233: PUSH
21234: LD_VAR 0 8
21238: PPUSH
21239: LD_VAR 0 5
21243: PUSH
21244: LD_VAR 0 6
21248: ARRAY
21249: PUSH
21250: LD_INT 1
21252: ARRAY
21253: PPUSH
21254: CALL 53171 0 2
21258: ST_TO_ADDR
21259: GO 21226
21261: POP
21262: POP
// result := tmp ;
21263: LD_ADDR_VAR 0 5
21267: PUSH
21268: LD_VAR 0 8
21272: ST_TO_ADDR
// end ; end ;
21273: LD_VAR 0 5
21277: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
21278: LD_INT 0
21280: PPUSH
21281: PPUSH
21282: PPUSH
21283: PPUSH
// if not list then
21284: LD_VAR 0 3
21288: NOT
21289: IFFALSE 21293
// exit ;
21291: GO 21681
// result := [ ] ;
21293: LD_ADDR_VAR 0 6
21297: PUSH
21298: EMPTY
21299: ST_TO_ADDR
// for i in list do
21300: LD_ADDR_VAR 0 7
21304: PUSH
21305: LD_VAR 0 3
21309: PUSH
21310: FOR_IN
21311: IFFALSE 21513
// begin tmp := GetDistUnitXY ( i , x , y ) ;
21313: LD_ADDR_VAR 0 9
21317: PUSH
21318: LD_VAR 0 7
21322: PPUSH
21323: LD_VAR 0 1
21327: PPUSH
21328: LD_VAR 0 2
21332: PPUSH
21333: CALL_OW 297
21337: ST_TO_ADDR
// if not result then
21338: LD_VAR 0 6
21342: NOT
21343: IFFALSE 21369
// result := [ [ i , tmp ] ] else
21345: LD_ADDR_VAR 0 6
21349: PUSH
21350: LD_VAR 0 7
21354: PUSH
21355: LD_VAR 0 9
21359: PUSH
21360: EMPTY
21361: LIST
21362: LIST
21363: PUSH
21364: EMPTY
21365: LIST
21366: ST_TO_ADDR
21367: GO 21511
// begin if result [ result ] [ 2 ] <= tmp then
21369: LD_VAR 0 6
21373: PUSH
21374: LD_VAR 0 6
21378: ARRAY
21379: PUSH
21380: LD_INT 2
21382: ARRAY
21383: PUSH
21384: LD_VAR 0 9
21388: LESSEQUAL
21389: IFFALSE 21431
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
21391: LD_ADDR_VAR 0 6
21395: PUSH
21396: LD_VAR 0 6
21400: PPUSH
21401: LD_VAR 0 6
21405: PUSH
21406: LD_INT 1
21408: PLUS
21409: PPUSH
21410: LD_VAR 0 7
21414: PUSH
21415: LD_VAR 0 9
21419: PUSH
21420: EMPTY
21421: LIST
21422: LIST
21423: PPUSH
21424: CALL_OW 2
21428: ST_TO_ADDR
21429: GO 21511
// for j := 1 to result do
21431: LD_ADDR_VAR 0 8
21435: PUSH
21436: DOUBLE
21437: LD_INT 1
21439: DEC
21440: ST_TO_ADDR
21441: LD_VAR 0 6
21445: PUSH
21446: FOR_TO
21447: IFFALSE 21509
// begin if tmp < result [ j ] [ 2 ] then
21449: LD_VAR 0 9
21453: PUSH
21454: LD_VAR 0 6
21458: PUSH
21459: LD_VAR 0 8
21463: ARRAY
21464: PUSH
21465: LD_INT 2
21467: ARRAY
21468: LESS
21469: IFFALSE 21507
// begin result := Insert ( result , j , [ i , tmp ] ) ;
21471: LD_ADDR_VAR 0 6
21475: PUSH
21476: LD_VAR 0 6
21480: PPUSH
21481: LD_VAR 0 8
21485: PPUSH
21486: LD_VAR 0 7
21490: PUSH
21491: LD_VAR 0 9
21495: PUSH
21496: EMPTY
21497: LIST
21498: LIST
21499: PPUSH
21500: CALL_OW 2
21504: ST_TO_ADDR
// break ;
21505: GO 21509
// end ; end ;
21507: GO 21446
21509: POP
21510: POP
// end ; end ;
21511: GO 21310
21513: POP
21514: POP
// if result and not asc then
21515: LD_VAR 0 6
21519: PUSH
21520: LD_VAR 0 4
21524: NOT
21525: AND
21526: IFFALSE 21601
// begin tmp := result ;
21528: LD_ADDR_VAR 0 9
21532: PUSH
21533: LD_VAR 0 6
21537: ST_TO_ADDR
// for i = tmp downto 1 do
21538: LD_ADDR_VAR 0 7
21542: PUSH
21543: DOUBLE
21544: LD_VAR 0 9
21548: INC
21549: ST_TO_ADDR
21550: LD_INT 1
21552: PUSH
21553: FOR_DOWNTO
21554: IFFALSE 21599
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
21556: LD_ADDR_VAR 0 6
21560: PUSH
21561: LD_VAR 0 6
21565: PPUSH
21566: LD_VAR 0 9
21570: PUSH
21571: LD_VAR 0 7
21575: MINUS
21576: PUSH
21577: LD_INT 1
21579: PLUS
21580: PPUSH
21581: LD_VAR 0 9
21585: PUSH
21586: LD_VAR 0 7
21590: ARRAY
21591: PPUSH
21592: CALL_OW 1
21596: ST_TO_ADDR
21597: GO 21553
21599: POP
21600: POP
// end ; tmp := [ ] ;
21601: LD_ADDR_VAR 0 9
21605: PUSH
21606: EMPTY
21607: ST_TO_ADDR
// if mode then
21608: LD_VAR 0 5
21612: IFFALSE 21681
// begin for i = 1 to result do
21614: LD_ADDR_VAR 0 7
21618: PUSH
21619: DOUBLE
21620: LD_INT 1
21622: DEC
21623: ST_TO_ADDR
21624: LD_VAR 0 6
21628: PUSH
21629: FOR_TO
21630: IFFALSE 21669
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
21632: LD_ADDR_VAR 0 9
21636: PUSH
21637: LD_VAR 0 9
21641: PPUSH
21642: LD_VAR 0 7
21646: PPUSH
21647: LD_VAR 0 6
21651: PUSH
21652: LD_VAR 0 7
21656: ARRAY
21657: PUSH
21658: LD_INT 1
21660: ARRAY
21661: PPUSH
21662: CALL_OW 1
21666: ST_TO_ADDR
21667: GO 21629
21669: POP
21670: POP
// result := tmp ;
21671: LD_ADDR_VAR 0 6
21675: PUSH
21676: LD_VAR 0 9
21680: ST_TO_ADDR
// end ; end ;
21681: LD_VAR 0 6
21685: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
21686: LD_INT 0
21688: PPUSH
21689: PPUSH
21690: PPUSH
21691: PPUSH
21692: PPUSH
21693: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
21694: LD_ADDR_VAR 0 5
21698: PUSH
21699: LD_INT 0
21701: PUSH
21702: LD_INT 0
21704: PUSH
21705: LD_INT 0
21707: PUSH
21708: EMPTY
21709: PUSH
21710: EMPTY
21711: LIST
21712: LIST
21713: LIST
21714: LIST
21715: ST_TO_ADDR
// if not x or not y then
21716: LD_VAR 0 2
21720: NOT
21721: PUSH
21722: LD_VAR 0 3
21726: NOT
21727: OR
21728: IFFALSE 21732
// exit ;
21730: GO 23382
// if not range then
21732: LD_VAR 0 4
21736: NOT
21737: IFFALSE 21747
// range := 10 ;
21739: LD_ADDR_VAR 0 4
21743: PUSH
21744: LD_INT 10
21746: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21747: LD_ADDR_VAR 0 8
21751: PUSH
21752: LD_INT 81
21754: PUSH
21755: LD_VAR 0 1
21759: PUSH
21760: EMPTY
21761: LIST
21762: LIST
21763: PUSH
21764: LD_INT 92
21766: PUSH
21767: LD_VAR 0 2
21771: PUSH
21772: LD_VAR 0 3
21776: PUSH
21777: LD_VAR 0 4
21781: PUSH
21782: EMPTY
21783: LIST
21784: LIST
21785: LIST
21786: LIST
21787: PUSH
21788: LD_INT 3
21790: PUSH
21791: LD_INT 21
21793: PUSH
21794: LD_INT 3
21796: PUSH
21797: EMPTY
21798: LIST
21799: LIST
21800: PUSH
21801: EMPTY
21802: LIST
21803: LIST
21804: PUSH
21805: EMPTY
21806: LIST
21807: LIST
21808: LIST
21809: PPUSH
21810: CALL_OW 69
21814: ST_TO_ADDR
// if not tmp then
21815: LD_VAR 0 8
21819: NOT
21820: IFFALSE 21824
// exit ;
21822: GO 23382
// for i in tmp do
21824: LD_ADDR_VAR 0 6
21828: PUSH
21829: LD_VAR 0 8
21833: PUSH
21834: FOR_IN
21835: IFFALSE 23357
// begin points := [ 0 , 0 , 0 ] ;
21837: LD_ADDR_VAR 0 9
21841: PUSH
21842: LD_INT 0
21844: PUSH
21845: LD_INT 0
21847: PUSH
21848: LD_INT 0
21850: PUSH
21851: EMPTY
21852: LIST
21853: LIST
21854: LIST
21855: ST_TO_ADDR
// bpoints := 1 ;
21856: LD_ADDR_VAR 0 10
21860: PUSH
21861: LD_INT 1
21863: ST_TO_ADDR
// case GetType ( i ) of unit_human :
21864: LD_VAR 0 6
21868: PPUSH
21869: CALL_OW 247
21873: PUSH
21874: LD_INT 1
21876: DOUBLE
21877: EQUAL
21878: IFTRUE 21882
21880: GO 22460
21882: POP
// begin if GetClass ( i ) = 1 then
21883: LD_VAR 0 6
21887: PPUSH
21888: CALL_OW 257
21892: PUSH
21893: LD_INT 1
21895: EQUAL
21896: IFFALSE 21917
// points := [ 10 , 5 , 3 ] ;
21898: LD_ADDR_VAR 0 9
21902: PUSH
21903: LD_INT 10
21905: PUSH
21906: LD_INT 5
21908: PUSH
21909: LD_INT 3
21911: PUSH
21912: EMPTY
21913: LIST
21914: LIST
21915: LIST
21916: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
21917: LD_VAR 0 6
21921: PPUSH
21922: CALL_OW 257
21926: PUSH
21927: LD_INT 2
21929: PUSH
21930: LD_INT 3
21932: PUSH
21933: LD_INT 4
21935: PUSH
21936: EMPTY
21937: LIST
21938: LIST
21939: LIST
21940: IN
21941: IFFALSE 21962
// points := [ 3 , 2 , 1 ] ;
21943: LD_ADDR_VAR 0 9
21947: PUSH
21948: LD_INT 3
21950: PUSH
21951: LD_INT 2
21953: PUSH
21954: LD_INT 1
21956: PUSH
21957: EMPTY
21958: LIST
21959: LIST
21960: LIST
21961: ST_TO_ADDR
// if GetClass ( i ) = 5 then
21962: LD_VAR 0 6
21966: PPUSH
21967: CALL_OW 257
21971: PUSH
21972: LD_INT 5
21974: EQUAL
21975: IFFALSE 21996
// points := [ 130 , 5 , 2 ] ;
21977: LD_ADDR_VAR 0 9
21981: PUSH
21982: LD_INT 130
21984: PUSH
21985: LD_INT 5
21987: PUSH
21988: LD_INT 2
21990: PUSH
21991: EMPTY
21992: LIST
21993: LIST
21994: LIST
21995: ST_TO_ADDR
// if GetClass ( i ) = 8 then
21996: LD_VAR 0 6
22000: PPUSH
22001: CALL_OW 257
22005: PUSH
22006: LD_INT 8
22008: EQUAL
22009: IFFALSE 22030
// points := [ 35 , 35 , 30 ] ;
22011: LD_ADDR_VAR 0 9
22015: PUSH
22016: LD_INT 35
22018: PUSH
22019: LD_INT 35
22021: PUSH
22022: LD_INT 30
22024: PUSH
22025: EMPTY
22026: LIST
22027: LIST
22028: LIST
22029: ST_TO_ADDR
// if GetClass ( i ) = 9 then
22030: LD_VAR 0 6
22034: PPUSH
22035: CALL_OW 257
22039: PUSH
22040: LD_INT 9
22042: EQUAL
22043: IFFALSE 22064
// points := [ 20 , 55 , 40 ] ;
22045: LD_ADDR_VAR 0 9
22049: PUSH
22050: LD_INT 20
22052: PUSH
22053: LD_INT 55
22055: PUSH
22056: LD_INT 40
22058: PUSH
22059: EMPTY
22060: LIST
22061: LIST
22062: LIST
22063: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
22064: LD_VAR 0 6
22068: PPUSH
22069: CALL_OW 257
22073: PUSH
22074: LD_INT 12
22076: PUSH
22077: LD_INT 16
22079: PUSH
22080: EMPTY
22081: LIST
22082: LIST
22083: IN
22084: IFFALSE 22105
// points := [ 5 , 3 , 2 ] ;
22086: LD_ADDR_VAR 0 9
22090: PUSH
22091: LD_INT 5
22093: PUSH
22094: LD_INT 3
22096: PUSH
22097: LD_INT 2
22099: PUSH
22100: EMPTY
22101: LIST
22102: LIST
22103: LIST
22104: ST_TO_ADDR
// if GetClass ( i ) = 17 then
22105: LD_VAR 0 6
22109: PPUSH
22110: CALL_OW 257
22114: PUSH
22115: LD_INT 17
22117: EQUAL
22118: IFFALSE 22139
// points := [ 100 , 50 , 75 ] ;
22120: LD_ADDR_VAR 0 9
22124: PUSH
22125: LD_INT 100
22127: PUSH
22128: LD_INT 50
22130: PUSH
22131: LD_INT 75
22133: PUSH
22134: EMPTY
22135: LIST
22136: LIST
22137: LIST
22138: ST_TO_ADDR
// if GetClass ( i ) = 15 then
22139: LD_VAR 0 6
22143: PPUSH
22144: CALL_OW 257
22148: PUSH
22149: LD_INT 15
22151: EQUAL
22152: IFFALSE 22173
// points := [ 10 , 5 , 3 ] ;
22154: LD_ADDR_VAR 0 9
22158: PUSH
22159: LD_INT 10
22161: PUSH
22162: LD_INT 5
22164: PUSH
22165: LD_INT 3
22167: PUSH
22168: EMPTY
22169: LIST
22170: LIST
22171: LIST
22172: ST_TO_ADDR
// if GetClass ( i ) = 14 then
22173: LD_VAR 0 6
22177: PPUSH
22178: CALL_OW 257
22182: PUSH
22183: LD_INT 14
22185: EQUAL
22186: IFFALSE 22207
// points := [ 10 , 0 , 0 ] ;
22188: LD_ADDR_VAR 0 9
22192: PUSH
22193: LD_INT 10
22195: PUSH
22196: LD_INT 0
22198: PUSH
22199: LD_INT 0
22201: PUSH
22202: EMPTY
22203: LIST
22204: LIST
22205: LIST
22206: ST_TO_ADDR
// if GetClass ( i ) = 11 then
22207: LD_VAR 0 6
22211: PPUSH
22212: CALL_OW 257
22216: PUSH
22217: LD_INT 11
22219: EQUAL
22220: IFFALSE 22241
// points := [ 30 , 10 , 5 ] ;
22222: LD_ADDR_VAR 0 9
22226: PUSH
22227: LD_INT 30
22229: PUSH
22230: LD_INT 10
22232: PUSH
22233: LD_INT 5
22235: PUSH
22236: EMPTY
22237: LIST
22238: LIST
22239: LIST
22240: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
22241: LD_VAR 0 1
22245: PPUSH
22246: LD_INT 5
22248: PPUSH
22249: CALL_OW 321
22253: PUSH
22254: LD_INT 2
22256: EQUAL
22257: IFFALSE 22274
// bpoints := bpoints * 1.8 ;
22259: LD_ADDR_VAR 0 10
22263: PUSH
22264: LD_VAR 0 10
22268: PUSH
22269: LD_REAL  1.80000000000000E+0000
22272: MUL
22273: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
22274: LD_VAR 0 6
22278: PPUSH
22279: CALL_OW 257
22283: PUSH
22284: LD_INT 1
22286: PUSH
22287: LD_INT 2
22289: PUSH
22290: LD_INT 3
22292: PUSH
22293: LD_INT 4
22295: PUSH
22296: EMPTY
22297: LIST
22298: LIST
22299: LIST
22300: LIST
22301: IN
22302: PUSH
22303: LD_VAR 0 1
22307: PPUSH
22308: LD_INT 51
22310: PPUSH
22311: CALL_OW 321
22315: PUSH
22316: LD_INT 2
22318: EQUAL
22319: AND
22320: IFFALSE 22337
// bpoints := bpoints * 1.2 ;
22322: LD_ADDR_VAR 0 10
22326: PUSH
22327: LD_VAR 0 10
22331: PUSH
22332: LD_REAL  1.20000000000000E+0000
22335: MUL
22336: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
22337: LD_VAR 0 6
22341: PPUSH
22342: CALL_OW 257
22346: PUSH
22347: LD_INT 5
22349: PUSH
22350: LD_INT 7
22352: PUSH
22353: LD_INT 9
22355: PUSH
22356: EMPTY
22357: LIST
22358: LIST
22359: LIST
22360: IN
22361: PUSH
22362: LD_VAR 0 1
22366: PPUSH
22367: LD_INT 52
22369: PPUSH
22370: CALL_OW 321
22374: PUSH
22375: LD_INT 2
22377: EQUAL
22378: AND
22379: IFFALSE 22396
// bpoints := bpoints * 1.5 ;
22381: LD_ADDR_VAR 0 10
22385: PUSH
22386: LD_VAR 0 10
22390: PUSH
22391: LD_REAL  1.50000000000000E+0000
22394: MUL
22395: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
22396: LD_VAR 0 1
22400: PPUSH
22401: LD_INT 66
22403: PPUSH
22404: CALL_OW 321
22408: PUSH
22409: LD_INT 2
22411: EQUAL
22412: IFFALSE 22429
// bpoints := bpoints * 1.1 ;
22414: LD_ADDR_VAR 0 10
22418: PUSH
22419: LD_VAR 0 10
22423: PUSH
22424: LD_REAL  1.10000000000000E+0000
22427: MUL
22428: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
22429: LD_ADDR_VAR 0 10
22433: PUSH
22434: LD_VAR 0 10
22438: PUSH
22439: LD_VAR 0 6
22443: PPUSH
22444: LD_INT 1
22446: PPUSH
22447: CALL_OW 259
22451: PUSH
22452: LD_REAL  1.15000000000000E+0000
22455: MUL
22456: MUL
22457: ST_TO_ADDR
// end ; unit_vehicle :
22458: GO 23286
22460: LD_INT 2
22462: DOUBLE
22463: EQUAL
22464: IFTRUE 22468
22466: GO 23274
22468: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
22469: LD_VAR 0 6
22473: PPUSH
22474: CALL_OW 264
22478: PUSH
22479: LD_INT 2
22481: PUSH
22482: LD_INT 42
22484: PUSH
22485: LD_INT 24
22487: PUSH
22488: EMPTY
22489: LIST
22490: LIST
22491: LIST
22492: IN
22493: IFFALSE 22514
// points := [ 25 , 5 , 3 ] ;
22495: LD_ADDR_VAR 0 9
22499: PUSH
22500: LD_INT 25
22502: PUSH
22503: LD_INT 5
22505: PUSH
22506: LD_INT 3
22508: PUSH
22509: EMPTY
22510: LIST
22511: LIST
22512: LIST
22513: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
22514: LD_VAR 0 6
22518: PPUSH
22519: CALL_OW 264
22523: PUSH
22524: LD_INT 4
22526: PUSH
22527: LD_INT 43
22529: PUSH
22530: LD_INT 25
22532: PUSH
22533: EMPTY
22534: LIST
22535: LIST
22536: LIST
22537: IN
22538: IFFALSE 22559
// points := [ 40 , 15 , 5 ] ;
22540: LD_ADDR_VAR 0 9
22544: PUSH
22545: LD_INT 40
22547: PUSH
22548: LD_INT 15
22550: PUSH
22551: LD_INT 5
22553: PUSH
22554: EMPTY
22555: LIST
22556: LIST
22557: LIST
22558: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
22559: LD_VAR 0 6
22563: PPUSH
22564: CALL_OW 264
22568: PUSH
22569: LD_INT 3
22571: PUSH
22572: LD_INT 23
22574: PUSH
22575: EMPTY
22576: LIST
22577: LIST
22578: IN
22579: IFFALSE 22600
// points := [ 7 , 25 , 8 ] ;
22581: LD_ADDR_VAR 0 9
22585: PUSH
22586: LD_INT 7
22588: PUSH
22589: LD_INT 25
22591: PUSH
22592: LD_INT 8
22594: PUSH
22595: EMPTY
22596: LIST
22597: LIST
22598: LIST
22599: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
22600: LD_VAR 0 6
22604: PPUSH
22605: CALL_OW 264
22609: PUSH
22610: LD_INT 5
22612: PUSH
22613: LD_INT 27
22615: PUSH
22616: LD_INT 44
22618: PUSH
22619: EMPTY
22620: LIST
22621: LIST
22622: LIST
22623: IN
22624: IFFALSE 22645
// points := [ 14 , 50 , 16 ] ;
22626: LD_ADDR_VAR 0 9
22630: PUSH
22631: LD_INT 14
22633: PUSH
22634: LD_INT 50
22636: PUSH
22637: LD_INT 16
22639: PUSH
22640: EMPTY
22641: LIST
22642: LIST
22643: LIST
22644: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
22645: LD_VAR 0 6
22649: PPUSH
22650: CALL_OW 264
22654: PUSH
22655: LD_INT 6
22657: PUSH
22658: LD_INT 46
22660: PUSH
22661: EMPTY
22662: LIST
22663: LIST
22664: IN
22665: IFFALSE 22686
// points := [ 32 , 120 , 70 ] ;
22667: LD_ADDR_VAR 0 9
22671: PUSH
22672: LD_INT 32
22674: PUSH
22675: LD_INT 120
22677: PUSH
22678: LD_INT 70
22680: PUSH
22681: EMPTY
22682: LIST
22683: LIST
22684: LIST
22685: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
22686: LD_VAR 0 6
22690: PPUSH
22691: CALL_OW 264
22695: PUSH
22696: LD_INT 7
22698: PUSH
22699: LD_INT 28
22701: PUSH
22702: LD_INT 45
22704: PUSH
22705: LD_INT 92
22707: PUSH
22708: EMPTY
22709: LIST
22710: LIST
22711: LIST
22712: LIST
22713: IN
22714: IFFALSE 22735
// points := [ 35 , 20 , 45 ] ;
22716: LD_ADDR_VAR 0 9
22720: PUSH
22721: LD_INT 35
22723: PUSH
22724: LD_INT 20
22726: PUSH
22727: LD_INT 45
22729: PUSH
22730: EMPTY
22731: LIST
22732: LIST
22733: LIST
22734: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
22735: LD_VAR 0 6
22739: PPUSH
22740: CALL_OW 264
22744: PUSH
22745: LD_INT 47
22747: PUSH
22748: EMPTY
22749: LIST
22750: IN
22751: IFFALSE 22772
// points := [ 67 , 45 , 75 ] ;
22753: LD_ADDR_VAR 0 9
22757: PUSH
22758: LD_INT 67
22760: PUSH
22761: LD_INT 45
22763: PUSH
22764: LD_INT 75
22766: PUSH
22767: EMPTY
22768: LIST
22769: LIST
22770: LIST
22771: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
22772: LD_VAR 0 6
22776: PPUSH
22777: CALL_OW 264
22781: PUSH
22782: LD_INT 26
22784: PUSH
22785: EMPTY
22786: LIST
22787: IN
22788: IFFALSE 22809
// points := [ 120 , 30 , 80 ] ;
22790: LD_ADDR_VAR 0 9
22794: PUSH
22795: LD_INT 120
22797: PUSH
22798: LD_INT 30
22800: PUSH
22801: LD_INT 80
22803: PUSH
22804: EMPTY
22805: LIST
22806: LIST
22807: LIST
22808: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
22809: LD_VAR 0 6
22813: PPUSH
22814: CALL_OW 264
22818: PUSH
22819: LD_INT 22
22821: PUSH
22822: EMPTY
22823: LIST
22824: IN
22825: IFFALSE 22846
// points := [ 40 , 1 , 1 ] ;
22827: LD_ADDR_VAR 0 9
22831: PUSH
22832: LD_INT 40
22834: PUSH
22835: LD_INT 1
22837: PUSH
22838: LD_INT 1
22840: PUSH
22841: EMPTY
22842: LIST
22843: LIST
22844: LIST
22845: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
22846: LD_VAR 0 6
22850: PPUSH
22851: CALL_OW 264
22855: PUSH
22856: LD_INT 29
22858: PUSH
22859: EMPTY
22860: LIST
22861: IN
22862: IFFALSE 22883
// points := [ 70 , 200 , 400 ] ;
22864: LD_ADDR_VAR 0 9
22868: PUSH
22869: LD_INT 70
22871: PUSH
22872: LD_INT 200
22874: PUSH
22875: LD_INT 400
22877: PUSH
22878: EMPTY
22879: LIST
22880: LIST
22881: LIST
22882: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
22883: LD_VAR 0 6
22887: PPUSH
22888: CALL_OW 264
22892: PUSH
22893: LD_INT 14
22895: PUSH
22896: LD_INT 53
22898: PUSH
22899: EMPTY
22900: LIST
22901: LIST
22902: IN
22903: IFFALSE 22924
// points := [ 40 , 10 , 20 ] ;
22905: LD_ADDR_VAR 0 9
22909: PUSH
22910: LD_INT 40
22912: PUSH
22913: LD_INT 10
22915: PUSH
22916: LD_INT 20
22918: PUSH
22919: EMPTY
22920: LIST
22921: LIST
22922: LIST
22923: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
22924: LD_VAR 0 6
22928: PPUSH
22929: CALL_OW 264
22933: PUSH
22934: LD_INT 9
22936: PUSH
22937: EMPTY
22938: LIST
22939: IN
22940: IFFALSE 22961
// points := [ 5 , 70 , 20 ] ;
22942: LD_ADDR_VAR 0 9
22946: PUSH
22947: LD_INT 5
22949: PUSH
22950: LD_INT 70
22952: PUSH
22953: LD_INT 20
22955: PUSH
22956: EMPTY
22957: LIST
22958: LIST
22959: LIST
22960: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
22961: LD_VAR 0 6
22965: PPUSH
22966: CALL_OW 264
22970: PUSH
22971: LD_INT 10
22973: PUSH
22974: EMPTY
22975: LIST
22976: IN
22977: IFFALSE 22998
// points := [ 35 , 110 , 70 ] ;
22979: LD_ADDR_VAR 0 9
22983: PUSH
22984: LD_INT 35
22986: PUSH
22987: LD_INT 110
22989: PUSH
22990: LD_INT 70
22992: PUSH
22993: EMPTY
22994: LIST
22995: LIST
22996: LIST
22997: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
22998: LD_VAR 0 6
23002: PPUSH
23003: CALL_OW 265
23007: PUSH
23008: LD_INT 25
23010: EQUAL
23011: IFFALSE 23032
// points := [ 80 , 65 , 100 ] ;
23013: LD_ADDR_VAR 0 9
23017: PUSH
23018: LD_INT 80
23020: PUSH
23021: LD_INT 65
23023: PUSH
23024: LD_INT 100
23026: PUSH
23027: EMPTY
23028: LIST
23029: LIST
23030: LIST
23031: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
23032: LD_VAR 0 6
23036: PPUSH
23037: CALL_OW 263
23041: PUSH
23042: LD_INT 1
23044: EQUAL
23045: IFFALSE 23080
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
23047: LD_ADDR_VAR 0 10
23051: PUSH
23052: LD_VAR 0 10
23056: PUSH
23057: LD_VAR 0 6
23061: PPUSH
23062: CALL_OW 311
23066: PPUSH
23067: LD_INT 3
23069: PPUSH
23070: CALL_OW 259
23074: PUSH
23075: LD_INT 4
23077: MUL
23078: MUL
23079: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
23080: LD_VAR 0 6
23084: PPUSH
23085: CALL_OW 263
23089: PUSH
23090: LD_INT 2
23092: EQUAL
23093: IFFALSE 23144
// begin j := IsControledBy ( i ) ;
23095: LD_ADDR_VAR 0 7
23099: PUSH
23100: LD_VAR 0 6
23104: PPUSH
23105: CALL_OW 312
23109: ST_TO_ADDR
// if j then
23110: LD_VAR 0 7
23114: IFFALSE 23144
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
23116: LD_ADDR_VAR 0 10
23120: PUSH
23121: LD_VAR 0 10
23125: PUSH
23126: LD_VAR 0 7
23130: PPUSH
23131: LD_INT 3
23133: PPUSH
23134: CALL_OW 259
23138: PUSH
23139: LD_INT 3
23141: MUL
23142: MUL
23143: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
23144: LD_VAR 0 6
23148: PPUSH
23149: CALL_OW 264
23153: PUSH
23154: LD_INT 5
23156: PUSH
23157: LD_INT 6
23159: PUSH
23160: LD_INT 46
23162: PUSH
23163: LD_INT 44
23165: PUSH
23166: LD_INT 47
23168: PUSH
23169: LD_INT 45
23171: PUSH
23172: LD_INT 28
23174: PUSH
23175: LD_INT 7
23177: PUSH
23178: LD_INT 27
23180: PUSH
23181: LD_INT 29
23183: PUSH
23184: EMPTY
23185: LIST
23186: LIST
23187: LIST
23188: LIST
23189: LIST
23190: LIST
23191: LIST
23192: LIST
23193: LIST
23194: LIST
23195: IN
23196: PUSH
23197: LD_VAR 0 1
23201: PPUSH
23202: LD_INT 52
23204: PPUSH
23205: CALL_OW 321
23209: PUSH
23210: LD_INT 2
23212: EQUAL
23213: AND
23214: IFFALSE 23231
// bpoints := bpoints * 1.2 ;
23216: LD_ADDR_VAR 0 10
23220: PUSH
23221: LD_VAR 0 10
23225: PUSH
23226: LD_REAL  1.20000000000000E+0000
23229: MUL
23230: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
23231: LD_VAR 0 6
23235: PPUSH
23236: CALL_OW 264
23240: PUSH
23241: LD_INT 6
23243: PUSH
23244: LD_INT 46
23246: PUSH
23247: LD_INT 47
23249: PUSH
23250: EMPTY
23251: LIST
23252: LIST
23253: LIST
23254: IN
23255: IFFALSE 23272
// bpoints := bpoints * 1.2 ;
23257: LD_ADDR_VAR 0 10
23261: PUSH
23262: LD_VAR 0 10
23266: PUSH
23267: LD_REAL  1.20000000000000E+0000
23270: MUL
23271: ST_TO_ADDR
// end ; unit_building :
23272: GO 23286
23274: LD_INT 3
23276: DOUBLE
23277: EQUAL
23278: IFTRUE 23282
23280: GO 23285
23282: POP
// ; end ;
23283: GO 23286
23285: POP
// for j = 1 to 3 do
23286: LD_ADDR_VAR 0 7
23290: PUSH
23291: DOUBLE
23292: LD_INT 1
23294: DEC
23295: ST_TO_ADDR
23296: LD_INT 3
23298: PUSH
23299: FOR_TO
23300: IFFALSE 23353
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
23302: LD_ADDR_VAR 0 5
23306: PUSH
23307: LD_VAR 0 5
23311: PPUSH
23312: LD_VAR 0 7
23316: PPUSH
23317: LD_VAR 0 5
23321: PUSH
23322: LD_VAR 0 7
23326: ARRAY
23327: PUSH
23328: LD_VAR 0 9
23332: PUSH
23333: LD_VAR 0 7
23337: ARRAY
23338: PUSH
23339: LD_VAR 0 10
23343: MUL
23344: PLUS
23345: PPUSH
23346: CALL_OW 1
23350: ST_TO_ADDR
23351: GO 23299
23353: POP
23354: POP
// end ;
23355: GO 21834
23357: POP
23358: POP
// result := Replace ( result , 4 , tmp ) ;
23359: LD_ADDR_VAR 0 5
23363: PUSH
23364: LD_VAR 0 5
23368: PPUSH
23369: LD_INT 4
23371: PPUSH
23372: LD_VAR 0 8
23376: PPUSH
23377: CALL_OW 1
23381: ST_TO_ADDR
// end ;
23382: LD_VAR 0 5
23386: RET
// export function DangerAtRange ( unit , range ) ; begin
23387: LD_INT 0
23389: PPUSH
// if not unit then
23390: LD_VAR 0 1
23394: NOT
23395: IFFALSE 23399
// exit ;
23397: GO 23444
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
23399: LD_ADDR_VAR 0 3
23403: PUSH
23404: LD_VAR 0 1
23408: PPUSH
23409: CALL_OW 255
23413: PPUSH
23414: LD_VAR 0 1
23418: PPUSH
23419: CALL_OW 250
23423: PPUSH
23424: LD_VAR 0 1
23428: PPUSH
23429: CALL_OW 251
23433: PPUSH
23434: LD_VAR 0 2
23438: PPUSH
23439: CALL 21686 0 4
23443: ST_TO_ADDR
// end ;
23444: LD_VAR 0 3
23448: RET
// export function DangerInArea ( side , area ) ; begin
23449: LD_INT 0
23451: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
23452: LD_ADDR_VAR 0 3
23456: PUSH
23457: LD_VAR 0 2
23461: PPUSH
23462: LD_INT 81
23464: PUSH
23465: LD_VAR 0 1
23469: PUSH
23470: EMPTY
23471: LIST
23472: LIST
23473: PPUSH
23474: CALL_OW 70
23478: ST_TO_ADDR
// end ;
23479: LD_VAR 0 3
23483: RET
// export function IsExtension ( b ) ; begin
23484: LD_INT 0
23486: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
23487: LD_ADDR_VAR 0 2
23491: PUSH
23492: LD_VAR 0 1
23496: PUSH
23497: LD_INT 23
23499: PUSH
23500: LD_INT 20
23502: PUSH
23503: LD_INT 22
23505: PUSH
23506: LD_INT 17
23508: PUSH
23509: LD_INT 24
23511: PUSH
23512: LD_INT 21
23514: PUSH
23515: LD_INT 19
23517: PUSH
23518: LD_INT 16
23520: PUSH
23521: LD_INT 25
23523: PUSH
23524: LD_INT 18
23526: PUSH
23527: EMPTY
23528: LIST
23529: LIST
23530: LIST
23531: LIST
23532: LIST
23533: LIST
23534: LIST
23535: LIST
23536: LIST
23537: LIST
23538: IN
23539: ST_TO_ADDR
// end ;
23540: LD_VAR 0 2
23544: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
23545: LD_INT 0
23547: PPUSH
23548: PPUSH
23549: PPUSH
// result := [ ] ;
23550: LD_ADDR_VAR 0 4
23554: PUSH
23555: EMPTY
23556: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
23557: LD_ADDR_VAR 0 5
23561: PUSH
23562: LD_VAR 0 2
23566: PPUSH
23567: LD_INT 21
23569: PUSH
23570: LD_INT 3
23572: PUSH
23573: EMPTY
23574: LIST
23575: LIST
23576: PPUSH
23577: CALL_OW 70
23581: ST_TO_ADDR
// if not tmp then
23582: LD_VAR 0 5
23586: NOT
23587: IFFALSE 23591
// exit ;
23589: GO 23655
// if checkLink then
23591: LD_VAR 0 3
23595: IFFALSE 23645
// begin for i in tmp do
23597: LD_ADDR_VAR 0 6
23601: PUSH
23602: LD_VAR 0 5
23606: PUSH
23607: FOR_IN
23608: IFFALSE 23643
// if GetBase ( i ) <> base then
23610: LD_VAR 0 6
23614: PPUSH
23615: CALL_OW 274
23619: PUSH
23620: LD_VAR 0 1
23624: NONEQUAL
23625: IFFALSE 23641
// ComLinkToBase ( base , i ) ;
23627: LD_VAR 0 1
23631: PPUSH
23632: LD_VAR 0 6
23636: PPUSH
23637: CALL_OW 169
23641: GO 23607
23643: POP
23644: POP
// end ; result := tmp ;
23645: LD_ADDR_VAR 0 4
23649: PUSH
23650: LD_VAR 0 5
23654: ST_TO_ADDR
// end ;
23655: LD_VAR 0 4
23659: RET
// export function ComComplete ( units , b ) ; var i ; begin
23660: LD_INT 0
23662: PPUSH
23663: PPUSH
// if not units then
23664: LD_VAR 0 1
23668: NOT
23669: IFFALSE 23673
// exit ;
23671: GO 23763
// for i in units do
23673: LD_ADDR_VAR 0 4
23677: PUSH
23678: LD_VAR 0 1
23682: PUSH
23683: FOR_IN
23684: IFFALSE 23761
// if BuildingStatus ( b ) = bs_build then
23686: LD_VAR 0 2
23690: PPUSH
23691: CALL_OW 461
23695: PUSH
23696: LD_INT 1
23698: EQUAL
23699: IFFALSE 23759
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
23701: LD_VAR 0 4
23705: PPUSH
23706: LD_STRING h
23708: PUSH
23709: LD_VAR 0 2
23713: PPUSH
23714: CALL_OW 250
23718: PUSH
23719: LD_VAR 0 2
23723: PPUSH
23724: CALL_OW 251
23728: PUSH
23729: LD_VAR 0 2
23733: PUSH
23734: LD_INT 0
23736: PUSH
23737: LD_INT 0
23739: PUSH
23740: LD_INT 0
23742: PUSH
23743: EMPTY
23744: LIST
23745: LIST
23746: LIST
23747: LIST
23748: LIST
23749: LIST
23750: LIST
23751: PUSH
23752: EMPTY
23753: LIST
23754: PPUSH
23755: CALL_OW 446
23759: GO 23683
23761: POP
23762: POP
// end ;
23763: LD_VAR 0 3
23767: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
23768: LD_INT 0
23770: PPUSH
23771: PPUSH
23772: PPUSH
23773: PPUSH
23774: PPUSH
23775: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
23776: LD_VAR 0 1
23780: NOT
23781: PUSH
23782: LD_VAR 0 1
23786: PPUSH
23787: CALL_OW 263
23791: PUSH
23792: LD_INT 2
23794: NONEQUAL
23795: OR
23796: IFFALSE 23800
// exit ;
23798: GO 24116
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
23800: LD_ADDR_VAR 0 6
23804: PUSH
23805: LD_INT 22
23807: PUSH
23808: LD_VAR 0 1
23812: PPUSH
23813: CALL_OW 255
23817: PUSH
23818: EMPTY
23819: LIST
23820: LIST
23821: PUSH
23822: LD_INT 2
23824: PUSH
23825: LD_INT 30
23827: PUSH
23828: LD_INT 36
23830: PUSH
23831: EMPTY
23832: LIST
23833: LIST
23834: PUSH
23835: LD_INT 34
23837: PUSH
23838: LD_INT 31
23840: PUSH
23841: EMPTY
23842: LIST
23843: LIST
23844: PUSH
23845: EMPTY
23846: LIST
23847: LIST
23848: LIST
23849: PUSH
23850: EMPTY
23851: LIST
23852: LIST
23853: PPUSH
23854: CALL_OW 69
23858: ST_TO_ADDR
// if not tmp then
23859: LD_VAR 0 6
23863: NOT
23864: IFFALSE 23868
// exit ;
23866: GO 24116
// result := [ ] ;
23868: LD_ADDR_VAR 0 2
23872: PUSH
23873: EMPTY
23874: ST_TO_ADDR
// for i in tmp do
23875: LD_ADDR_VAR 0 3
23879: PUSH
23880: LD_VAR 0 6
23884: PUSH
23885: FOR_IN
23886: IFFALSE 23957
// begin t := UnitsInside ( i ) ;
23888: LD_ADDR_VAR 0 4
23892: PUSH
23893: LD_VAR 0 3
23897: PPUSH
23898: CALL_OW 313
23902: ST_TO_ADDR
// if t then
23903: LD_VAR 0 4
23907: IFFALSE 23955
// for j in t do
23909: LD_ADDR_VAR 0 7
23913: PUSH
23914: LD_VAR 0 4
23918: PUSH
23919: FOR_IN
23920: IFFALSE 23953
// result := Replace ( result , result + 1 , j ) ;
23922: LD_ADDR_VAR 0 2
23926: PUSH
23927: LD_VAR 0 2
23931: PPUSH
23932: LD_VAR 0 2
23936: PUSH
23937: LD_INT 1
23939: PLUS
23940: PPUSH
23941: LD_VAR 0 7
23945: PPUSH
23946: CALL_OW 1
23950: ST_TO_ADDR
23951: GO 23919
23953: POP
23954: POP
// end ;
23955: GO 23885
23957: POP
23958: POP
// if not result then
23959: LD_VAR 0 2
23963: NOT
23964: IFFALSE 23968
// exit ;
23966: GO 24116
// mech := result [ 1 ] ;
23968: LD_ADDR_VAR 0 5
23972: PUSH
23973: LD_VAR 0 2
23977: PUSH
23978: LD_INT 1
23980: ARRAY
23981: ST_TO_ADDR
// if result > 1 then
23982: LD_VAR 0 2
23986: PUSH
23987: LD_INT 1
23989: GREATER
23990: IFFALSE 24102
// begin for i = 2 to result do
23992: LD_ADDR_VAR 0 3
23996: PUSH
23997: DOUBLE
23998: LD_INT 2
24000: DEC
24001: ST_TO_ADDR
24002: LD_VAR 0 2
24006: PUSH
24007: FOR_TO
24008: IFFALSE 24100
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
24010: LD_ADDR_VAR 0 4
24014: PUSH
24015: LD_VAR 0 2
24019: PUSH
24020: LD_VAR 0 3
24024: ARRAY
24025: PPUSH
24026: LD_INT 3
24028: PPUSH
24029: CALL_OW 259
24033: PUSH
24034: LD_VAR 0 2
24038: PUSH
24039: LD_VAR 0 3
24043: ARRAY
24044: PPUSH
24045: CALL_OW 432
24049: MINUS
24050: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
24051: LD_VAR 0 4
24055: PUSH
24056: LD_VAR 0 5
24060: PPUSH
24061: LD_INT 3
24063: PPUSH
24064: CALL_OW 259
24068: PUSH
24069: LD_VAR 0 5
24073: PPUSH
24074: CALL_OW 432
24078: MINUS
24079: GREATEREQUAL
24080: IFFALSE 24098
// mech := result [ i ] ;
24082: LD_ADDR_VAR 0 5
24086: PUSH
24087: LD_VAR 0 2
24091: PUSH
24092: LD_VAR 0 3
24096: ARRAY
24097: ST_TO_ADDR
// end ;
24098: GO 24007
24100: POP
24101: POP
// end ; ComLinkTo ( vehicle , mech ) ;
24102: LD_VAR 0 1
24106: PPUSH
24107: LD_VAR 0 5
24111: PPUSH
24112: CALL_OW 135
// end ;
24116: LD_VAR 0 2
24120: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
24121: LD_INT 0
24123: PPUSH
24124: PPUSH
24125: PPUSH
24126: PPUSH
24127: PPUSH
24128: PPUSH
24129: PPUSH
24130: PPUSH
24131: PPUSH
24132: PPUSH
24133: PPUSH
24134: PPUSH
24135: PPUSH
// result := [ ] ;
24136: LD_ADDR_VAR 0 7
24140: PUSH
24141: EMPTY
24142: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
24143: LD_VAR 0 1
24147: PPUSH
24148: CALL_OW 266
24152: PUSH
24153: LD_INT 0
24155: PUSH
24156: LD_INT 1
24158: PUSH
24159: EMPTY
24160: LIST
24161: LIST
24162: IN
24163: NOT
24164: IFFALSE 24168
// exit ;
24166: GO 25802
// if name then
24168: LD_VAR 0 3
24172: IFFALSE 24188
// SetBName ( base_dep , name ) ;
24174: LD_VAR 0 1
24178: PPUSH
24179: LD_VAR 0 3
24183: PPUSH
24184: CALL_OW 500
// base := GetBase ( base_dep ) ;
24188: LD_ADDR_VAR 0 15
24192: PUSH
24193: LD_VAR 0 1
24197: PPUSH
24198: CALL_OW 274
24202: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
24203: LD_ADDR_VAR 0 16
24207: PUSH
24208: LD_VAR 0 1
24212: PPUSH
24213: CALL_OW 255
24217: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
24218: LD_ADDR_VAR 0 17
24222: PUSH
24223: LD_VAR 0 1
24227: PPUSH
24228: CALL_OW 248
24232: ST_TO_ADDR
// if sources then
24233: LD_VAR 0 5
24237: IFFALSE 24284
// for i = 1 to 3 do
24239: LD_ADDR_VAR 0 8
24243: PUSH
24244: DOUBLE
24245: LD_INT 1
24247: DEC
24248: ST_TO_ADDR
24249: LD_INT 3
24251: PUSH
24252: FOR_TO
24253: IFFALSE 24282
// AddResourceType ( base , i , sources [ i ] ) ;
24255: LD_VAR 0 15
24259: PPUSH
24260: LD_VAR 0 8
24264: PPUSH
24265: LD_VAR 0 5
24269: PUSH
24270: LD_VAR 0 8
24274: ARRAY
24275: PPUSH
24276: CALL_OW 276
24280: GO 24252
24282: POP
24283: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
24284: LD_ADDR_VAR 0 18
24288: PUSH
24289: LD_VAR 0 15
24293: PPUSH
24294: LD_VAR 0 2
24298: PPUSH
24299: LD_INT 1
24301: PPUSH
24302: CALL 23545 0 3
24306: ST_TO_ADDR
// InitHc ;
24307: CALL_OW 19
// InitUc ;
24311: CALL_OW 18
// uc_side := side ;
24315: LD_ADDR_OWVAR 20
24319: PUSH
24320: LD_VAR 0 16
24324: ST_TO_ADDR
// uc_nation := nation ;
24325: LD_ADDR_OWVAR 21
24329: PUSH
24330: LD_VAR 0 17
24334: ST_TO_ADDR
// if buildings then
24335: LD_VAR 0 18
24339: IFFALSE 25661
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
24341: LD_ADDR_VAR 0 19
24345: PUSH
24346: LD_VAR 0 18
24350: PPUSH
24351: LD_INT 2
24353: PUSH
24354: LD_INT 30
24356: PUSH
24357: LD_INT 29
24359: PUSH
24360: EMPTY
24361: LIST
24362: LIST
24363: PUSH
24364: LD_INT 30
24366: PUSH
24367: LD_INT 30
24369: PUSH
24370: EMPTY
24371: LIST
24372: LIST
24373: PUSH
24374: EMPTY
24375: LIST
24376: LIST
24377: LIST
24378: PPUSH
24379: CALL_OW 72
24383: ST_TO_ADDR
// if tmp then
24384: LD_VAR 0 19
24388: IFFALSE 24436
// for i in tmp do
24390: LD_ADDR_VAR 0 8
24394: PUSH
24395: LD_VAR 0 19
24399: PUSH
24400: FOR_IN
24401: IFFALSE 24434
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
24403: LD_VAR 0 8
24407: PPUSH
24408: CALL_OW 250
24412: PPUSH
24413: LD_VAR 0 8
24417: PPUSH
24418: CALL_OW 251
24422: PPUSH
24423: LD_VAR 0 16
24427: PPUSH
24428: CALL_OW 441
24432: GO 24400
24434: POP
24435: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
24436: LD_VAR 0 18
24440: PPUSH
24441: LD_INT 2
24443: PUSH
24444: LD_INT 30
24446: PUSH
24447: LD_INT 32
24449: PUSH
24450: EMPTY
24451: LIST
24452: LIST
24453: PUSH
24454: LD_INT 30
24456: PUSH
24457: LD_INT 33
24459: PUSH
24460: EMPTY
24461: LIST
24462: LIST
24463: PUSH
24464: EMPTY
24465: LIST
24466: LIST
24467: LIST
24468: PPUSH
24469: CALL_OW 72
24473: IFFALSE 24561
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
24475: LD_ADDR_VAR 0 8
24479: PUSH
24480: LD_VAR 0 18
24484: PPUSH
24485: LD_INT 2
24487: PUSH
24488: LD_INT 30
24490: PUSH
24491: LD_INT 32
24493: PUSH
24494: EMPTY
24495: LIST
24496: LIST
24497: PUSH
24498: LD_INT 30
24500: PUSH
24501: LD_INT 33
24503: PUSH
24504: EMPTY
24505: LIST
24506: LIST
24507: PUSH
24508: EMPTY
24509: LIST
24510: LIST
24511: LIST
24512: PPUSH
24513: CALL_OW 72
24517: PUSH
24518: FOR_IN
24519: IFFALSE 24559
// begin if not GetBWeapon ( i ) then
24521: LD_VAR 0 8
24525: PPUSH
24526: CALL_OW 269
24530: NOT
24531: IFFALSE 24557
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
24533: LD_VAR 0 8
24537: PPUSH
24538: LD_VAR 0 8
24542: PPUSH
24543: LD_VAR 0 2
24547: PPUSH
24548: CALL 25807 0 2
24552: PPUSH
24553: CALL_OW 431
// end ;
24557: GO 24518
24559: POP
24560: POP
// end ; for i = 1 to personel do
24561: LD_ADDR_VAR 0 8
24565: PUSH
24566: DOUBLE
24567: LD_INT 1
24569: DEC
24570: ST_TO_ADDR
24571: LD_VAR 0 6
24575: PUSH
24576: FOR_TO
24577: IFFALSE 25641
// begin if i > 4 then
24579: LD_VAR 0 8
24583: PUSH
24584: LD_INT 4
24586: GREATER
24587: IFFALSE 24591
// break ;
24589: GO 25641
// case i of 1 :
24591: LD_VAR 0 8
24595: PUSH
24596: LD_INT 1
24598: DOUBLE
24599: EQUAL
24600: IFTRUE 24604
24602: GO 24684
24604: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
24605: LD_ADDR_VAR 0 12
24609: PUSH
24610: LD_VAR 0 18
24614: PPUSH
24615: LD_INT 22
24617: PUSH
24618: LD_VAR 0 16
24622: PUSH
24623: EMPTY
24624: LIST
24625: LIST
24626: PUSH
24627: LD_INT 58
24629: PUSH
24630: EMPTY
24631: LIST
24632: PUSH
24633: LD_INT 2
24635: PUSH
24636: LD_INT 30
24638: PUSH
24639: LD_INT 32
24641: PUSH
24642: EMPTY
24643: LIST
24644: LIST
24645: PUSH
24646: LD_INT 30
24648: PUSH
24649: LD_INT 4
24651: PUSH
24652: EMPTY
24653: LIST
24654: LIST
24655: PUSH
24656: LD_INT 30
24658: PUSH
24659: LD_INT 5
24661: PUSH
24662: EMPTY
24663: LIST
24664: LIST
24665: PUSH
24666: EMPTY
24667: LIST
24668: LIST
24669: LIST
24670: LIST
24671: PUSH
24672: EMPTY
24673: LIST
24674: LIST
24675: LIST
24676: PPUSH
24677: CALL_OW 72
24681: ST_TO_ADDR
24682: GO 24906
24684: LD_INT 2
24686: DOUBLE
24687: EQUAL
24688: IFTRUE 24692
24690: GO 24754
24692: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
24693: LD_ADDR_VAR 0 12
24697: PUSH
24698: LD_VAR 0 18
24702: PPUSH
24703: LD_INT 22
24705: PUSH
24706: LD_VAR 0 16
24710: PUSH
24711: EMPTY
24712: LIST
24713: LIST
24714: PUSH
24715: LD_INT 2
24717: PUSH
24718: LD_INT 30
24720: PUSH
24721: LD_INT 0
24723: PUSH
24724: EMPTY
24725: LIST
24726: LIST
24727: PUSH
24728: LD_INT 30
24730: PUSH
24731: LD_INT 1
24733: PUSH
24734: EMPTY
24735: LIST
24736: LIST
24737: PUSH
24738: EMPTY
24739: LIST
24740: LIST
24741: LIST
24742: PUSH
24743: EMPTY
24744: LIST
24745: LIST
24746: PPUSH
24747: CALL_OW 72
24751: ST_TO_ADDR
24752: GO 24906
24754: LD_INT 3
24756: DOUBLE
24757: EQUAL
24758: IFTRUE 24762
24760: GO 24824
24762: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
24763: LD_ADDR_VAR 0 12
24767: PUSH
24768: LD_VAR 0 18
24772: PPUSH
24773: LD_INT 22
24775: PUSH
24776: LD_VAR 0 16
24780: PUSH
24781: EMPTY
24782: LIST
24783: LIST
24784: PUSH
24785: LD_INT 2
24787: PUSH
24788: LD_INT 30
24790: PUSH
24791: LD_INT 2
24793: PUSH
24794: EMPTY
24795: LIST
24796: LIST
24797: PUSH
24798: LD_INT 30
24800: PUSH
24801: LD_INT 3
24803: PUSH
24804: EMPTY
24805: LIST
24806: LIST
24807: PUSH
24808: EMPTY
24809: LIST
24810: LIST
24811: LIST
24812: PUSH
24813: EMPTY
24814: LIST
24815: LIST
24816: PPUSH
24817: CALL_OW 72
24821: ST_TO_ADDR
24822: GO 24906
24824: LD_INT 4
24826: DOUBLE
24827: EQUAL
24828: IFTRUE 24832
24830: GO 24905
24832: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
24833: LD_ADDR_VAR 0 12
24837: PUSH
24838: LD_VAR 0 18
24842: PPUSH
24843: LD_INT 22
24845: PUSH
24846: LD_VAR 0 16
24850: PUSH
24851: EMPTY
24852: LIST
24853: LIST
24854: PUSH
24855: LD_INT 2
24857: PUSH
24858: LD_INT 30
24860: PUSH
24861: LD_INT 6
24863: PUSH
24864: EMPTY
24865: LIST
24866: LIST
24867: PUSH
24868: LD_INT 30
24870: PUSH
24871: LD_INT 7
24873: PUSH
24874: EMPTY
24875: LIST
24876: LIST
24877: PUSH
24878: LD_INT 30
24880: PUSH
24881: LD_INT 8
24883: PUSH
24884: EMPTY
24885: LIST
24886: LIST
24887: PUSH
24888: EMPTY
24889: LIST
24890: LIST
24891: LIST
24892: LIST
24893: PUSH
24894: EMPTY
24895: LIST
24896: LIST
24897: PPUSH
24898: CALL_OW 72
24902: ST_TO_ADDR
24903: GO 24906
24905: POP
// if i = 1 then
24906: LD_VAR 0 8
24910: PUSH
24911: LD_INT 1
24913: EQUAL
24914: IFFALSE 25025
// begin tmp := [ ] ;
24916: LD_ADDR_VAR 0 19
24920: PUSH
24921: EMPTY
24922: ST_TO_ADDR
// for j in f do
24923: LD_ADDR_VAR 0 9
24927: PUSH
24928: LD_VAR 0 12
24932: PUSH
24933: FOR_IN
24934: IFFALSE 25007
// if GetBType ( j ) = b_bunker then
24936: LD_VAR 0 9
24940: PPUSH
24941: CALL_OW 266
24945: PUSH
24946: LD_INT 32
24948: EQUAL
24949: IFFALSE 24976
// tmp := Insert ( tmp , 1 , j ) else
24951: LD_ADDR_VAR 0 19
24955: PUSH
24956: LD_VAR 0 19
24960: PPUSH
24961: LD_INT 1
24963: PPUSH
24964: LD_VAR 0 9
24968: PPUSH
24969: CALL_OW 2
24973: ST_TO_ADDR
24974: GO 25005
// tmp := Insert ( tmp , tmp + 1 , j ) ;
24976: LD_ADDR_VAR 0 19
24980: PUSH
24981: LD_VAR 0 19
24985: PPUSH
24986: LD_VAR 0 19
24990: PUSH
24991: LD_INT 1
24993: PLUS
24994: PPUSH
24995: LD_VAR 0 9
24999: PPUSH
25000: CALL_OW 2
25004: ST_TO_ADDR
25005: GO 24933
25007: POP
25008: POP
// if tmp then
25009: LD_VAR 0 19
25013: IFFALSE 25025
// f := tmp ;
25015: LD_ADDR_VAR 0 12
25019: PUSH
25020: LD_VAR 0 19
25024: ST_TO_ADDR
// end ; x := personel [ i ] ;
25025: LD_ADDR_VAR 0 13
25029: PUSH
25030: LD_VAR 0 6
25034: PUSH
25035: LD_VAR 0 8
25039: ARRAY
25040: ST_TO_ADDR
// if x = - 1 then
25041: LD_VAR 0 13
25045: PUSH
25046: LD_INT 1
25048: NEG
25049: EQUAL
25050: IFFALSE 25259
// begin for j in f do
25052: LD_ADDR_VAR 0 9
25056: PUSH
25057: LD_VAR 0 12
25061: PUSH
25062: FOR_IN
25063: IFFALSE 25255
// repeat InitHc ;
25065: CALL_OW 19
// if GetBType ( j ) = b_barracks then
25069: LD_VAR 0 9
25073: PPUSH
25074: CALL_OW 266
25078: PUSH
25079: LD_INT 5
25081: EQUAL
25082: IFFALSE 25152
// begin if UnitsInside ( j ) < 3 then
25084: LD_VAR 0 9
25088: PPUSH
25089: CALL_OW 313
25093: PUSH
25094: LD_INT 3
25096: LESS
25097: IFFALSE 25133
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
25099: LD_INT 0
25101: PPUSH
25102: LD_INT 5
25104: PUSH
25105: LD_INT 8
25107: PUSH
25108: LD_INT 9
25110: PUSH
25111: EMPTY
25112: LIST
25113: LIST
25114: LIST
25115: PUSH
25116: LD_VAR 0 17
25120: ARRAY
25121: PPUSH
25122: LD_VAR 0 4
25126: PPUSH
25127: CALL_OW 380
25131: GO 25150
// PrepareHuman ( false , i , skill ) ;
25133: LD_INT 0
25135: PPUSH
25136: LD_VAR 0 8
25140: PPUSH
25141: LD_VAR 0 4
25145: PPUSH
25146: CALL_OW 380
// end else
25150: GO 25169
// PrepareHuman ( false , i , skill ) ;
25152: LD_INT 0
25154: PPUSH
25155: LD_VAR 0 8
25159: PPUSH
25160: LD_VAR 0 4
25164: PPUSH
25165: CALL_OW 380
// un := CreateHuman ;
25169: LD_ADDR_VAR 0 14
25173: PUSH
25174: CALL_OW 44
25178: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25179: LD_ADDR_VAR 0 7
25183: PUSH
25184: LD_VAR 0 7
25188: PPUSH
25189: LD_INT 1
25191: PPUSH
25192: LD_VAR 0 14
25196: PPUSH
25197: CALL_OW 2
25201: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
25202: LD_VAR 0 14
25206: PPUSH
25207: LD_VAR 0 9
25211: PPUSH
25212: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
25216: LD_VAR 0 9
25220: PPUSH
25221: CALL_OW 313
25225: PUSH
25226: LD_INT 6
25228: EQUAL
25229: PUSH
25230: LD_VAR 0 9
25234: PPUSH
25235: CALL_OW 266
25239: PUSH
25240: LD_INT 32
25242: PUSH
25243: LD_INT 31
25245: PUSH
25246: EMPTY
25247: LIST
25248: LIST
25249: IN
25250: OR
25251: IFFALSE 25065
25253: GO 25062
25255: POP
25256: POP
// end else
25257: GO 25639
// for j = 1 to x do
25259: LD_ADDR_VAR 0 9
25263: PUSH
25264: DOUBLE
25265: LD_INT 1
25267: DEC
25268: ST_TO_ADDR
25269: LD_VAR 0 13
25273: PUSH
25274: FOR_TO
25275: IFFALSE 25637
// begin InitHc ;
25277: CALL_OW 19
// if not f then
25281: LD_VAR 0 12
25285: NOT
25286: IFFALSE 25375
// begin PrepareHuman ( false , i , skill ) ;
25288: LD_INT 0
25290: PPUSH
25291: LD_VAR 0 8
25295: PPUSH
25296: LD_VAR 0 4
25300: PPUSH
25301: CALL_OW 380
// un := CreateHuman ;
25305: LD_ADDR_VAR 0 14
25309: PUSH
25310: CALL_OW 44
25314: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25315: LD_ADDR_VAR 0 7
25319: PUSH
25320: LD_VAR 0 7
25324: PPUSH
25325: LD_INT 1
25327: PPUSH
25328: LD_VAR 0 14
25332: PPUSH
25333: CALL_OW 2
25337: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
25338: LD_VAR 0 14
25342: PPUSH
25343: LD_VAR 0 1
25347: PPUSH
25348: CALL_OW 250
25352: PPUSH
25353: LD_VAR 0 1
25357: PPUSH
25358: CALL_OW 251
25362: PPUSH
25363: LD_INT 10
25365: PPUSH
25366: LD_INT 0
25368: PPUSH
25369: CALL_OW 50
// continue ;
25373: GO 25274
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
25375: LD_VAR 0 12
25379: PUSH
25380: LD_INT 1
25382: ARRAY
25383: PPUSH
25384: CALL_OW 313
25388: PUSH
25389: LD_VAR 0 12
25393: PUSH
25394: LD_INT 1
25396: ARRAY
25397: PPUSH
25398: CALL_OW 266
25402: PUSH
25403: LD_INT 32
25405: PUSH
25406: LD_INT 31
25408: PUSH
25409: EMPTY
25410: LIST
25411: LIST
25412: IN
25413: AND
25414: PUSH
25415: LD_VAR 0 12
25419: PUSH
25420: LD_INT 1
25422: ARRAY
25423: PPUSH
25424: CALL_OW 313
25428: PUSH
25429: LD_INT 6
25431: EQUAL
25432: OR
25433: IFFALSE 25453
// f := Delete ( f , 1 ) ;
25435: LD_ADDR_VAR 0 12
25439: PUSH
25440: LD_VAR 0 12
25444: PPUSH
25445: LD_INT 1
25447: PPUSH
25448: CALL_OW 3
25452: ST_TO_ADDR
// if not f then
25453: LD_VAR 0 12
25457: NOT
25458: IFFALSE 25476
// begin x := x + 2 ;
25460: LD_ADDR_VAR 0 13
25464: PUSH
25465: LD_VAR 0 13
25469: PUSH
25470: LD_INT 2
25472: PLUS
25473: ST_TO_ADDR
// continue ;
25474: GO 25274
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
25476: LD_VAR 0 12
25480: PUSH
25481: LD_INT 1
25483: ARRAY
25484: PPUSH
25485: CALL_OW 266
25489: PUSH
25490: LD_INT 5
25492: EQUAL
25493: IFFALSE 25567
// begin if UnitsInside ( f [ 1 ] ) < 3 then
25495: LD_VAR 0 12
25499: PUSH
25500: LD_INT 1
25502: ARRAY
25503: PPUSH
25504: CALL_OW 313
25508: PUSH
25509: LD_INT 3
25511: LESS
25512: IFFALSE 25548
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
25514: LD_INT 0
25516: PPUSH
25517: LD_INT 5
25519: PUSH
25520: LD_INT 8
25522: PUSH
25523: LD_INT 9
25525: PUSH
25526: EMPTY
25527: LIST
25528: LIST
25529: LIST
25530: PUSH
25531: LD_VAR 0 17
25535: ARRAY
25536: PPUSH
25537: LD_VAR 0 4
25541: PPUSH
25542: CALL_OW 380
25546: GO 25565
// PrepareHuman ( false , i , skill ) ;
25548: LD_INT 0
25550: PPUSH
25551: LD_VAR 0 8
25555: PPUSH
25556: LD_VAR 0 4
25560: PPUSH
25561: CALL_OW 380
// end else
25565: GO 25584
// PrepareHuman ( false , i , skill ) ;
25567: LD_INT 0
25569: PPUSH
25570: LD_VAR 0 8
25574: PPUSH
25575: LD_VAR 0 4
25579: PPUSH
25580: CALL_OW 380
// un := CreateHuman ;
25584: LD_ADDR_VAR 0 14
25588: PUSH
25589: CALL_OW 44
25593: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25594: LD_ADDR_VAR 0 7
25598: PUSH
25599: LD_VAR 0 7
25603: PPUSH
25604: LD_INT 1
25606: PPUSH
25607: LD_VAR 0 14
25611: PPUSH
25612: CALL_OW 2
25616: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
25617: LD_VAR 0 14
25621: PPUSH
25622: LD_VAR 0 12
25626: PUSH
25627: LD_INT 1
25629: ARRAY
25630: PPUSH
25631: CALL_OW 52
// end ;
25635: GO 25274
25637: POP
25638: POP
// end ;
25639: GO 24576
25641: POP
25642: POP
// result := result ^ buildings ;
25643: LD_ADDR_VAR 0 7
25647: PUSH
25648: LD_VAR 0 7
25652: PUSH
25653: LD_VAR 0 18
25657: ADD
25658: ST_TO_ADDR
// end else
25659: GO 25802
// begin for i = 1 to personel do
25661: LD_ADDR_VAR 0 8
25665: PUSH
25666: DOUBLE
25667: LD_INT 1
25669: DEC
25670: ST_TO_ADDR
25671: LD_VAR 0 6
25675: PUSH
25676: FOR_TO
25677: IFFALSE 25800
// begin if i > 4 then
25679: LD_VAR 0 8
25683: PUSH
25684: LD_INT 4
25686: GREATER
25687: IFFALSE 25691
// break ;
25689: GO 25800
// x := personel [ i ] ;
25691: LD_ADDR_VAR 0 13
25695: PUSH
25696: LD_VAR 0 6
25700: PUSH
25701: LD_VAR 0 8
25705: ARRAY
25706: ST_TO_ADDR
// if x = - 1 then
25707: LD_VAR 0 13
25711: PUSH
25712: LD_INT 1
25714: NEG
25715: EQUAL
25716: IFFALSE 25720
// continue ;
25718: GO 25676
// PrepareHuman ( false , i , skill ) ;
25720: LD_INT 0
25722: PPUSH
25723: LD_VAR 0 8
25727: PPUSH
25728: LD_VAR 0 4
25732: PPUSH
25733: CALL_OW 380
// un := CreateHuman ;
25737: LD_ADDR_VAR 0 14
25741: PUSH
25742: CALL_OW 44
25746: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
25747: LD_VAR 0 14
25751: PPUSH
25752: LD_VAR 0 1
25756: PPUSH
25757: CALL_OW 250
25761: PPUSH
25762: LD_VAR 0 1
25766: PPUSH
25767: CALL_OW 251
25771: PPUSH
25772: LD_INT 10
25774: PPUSH
25775: LD_INT 0
25777: PPUSH
25778: CALL_OW 50
// result := result ^ un ;
25782: LD_ADDR_VAR 0 7
25786: PUSH
25787: LD_VAR 0 7
25791: PUSH
25792: LD_VAR 0 14
25796: ADD
25797: ST_TO_ADDR
// end ;
25798: GO 25676
25800: POP
25801: POP
// end ; end ;
25802: LD_VAR 0 7
25806: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
25807: LD_INT 0
25809: PPUSH
25810: PPUSH
25811: PPUSH
25812: PPUSH
25813: PPUSH
25814: PPUSH
25815: PPUSH
25816: PPUSH
25817: PPUSH
25818: PPUSH
25819: PPUSH
25820: PPUSH
25821: PPUSH
25822: PPUSH
25823: PPUSH
25824: PPUSH
// result := false ;
25825: LD_ADDR_VAR 0 3
25829: PUSH
25830: LD_INT 0
25832: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
25833: LD_VAR 0 1
25837: NOT
25838: PUSH
25839: LD_VAR 0 1
25843: PPUSH
25844: CALL_OW 266
25848: PUSH
25849: LD_INT 32
25851: PUSH
25852: LD_INT 33
25854: PUSH
25855: EMPTY
25856: LIST
25857: LIST
25858: IN
25859: NOT
25860: OR
25861: IFFALSE 25865
// exit ;
25863: GO 26974
// nat := GetNation ( tower ) ;
25865: LD_ADDR_VAR 0 12
25869: PUSH
25870: LD_VAR 0 1
25874: PPUSH
25875: CALL_OW 248
25879: ST_TO_ADDR
// side := GetSide ( tower ) ;
25880: LD_ADDR_VAR 0 16
25884: PUSH
25885: LD_VAR 0 1
25889: PPUSH
25890: CALL_OW 255
25894: ST_TO_ADDR
// x := GetX ( tower ) ;
25895: LD_ADDR_VAR 0 10
25899: PUSH
25900: LD_VAR 0 1
25904: PPUSH
25905: CALL_OW 250
25909: ST_TO_ADDR
// y := GetY ( tower ) ;
25910: LD_ADDR_VAR 0 11
25914: PUSH
25915: LD_VAR 0 1
25919: PPUSH
25920: CALL_OW 251
25924: ST_TO_ADDR
// if not x or not y then
25925: LD_VAR 0 10
25929: NOT
25930: PUSH
25931: LD_VAR 0 11
25935: NOT
25936: OR
25937: IFFALSE 25941
// exit ;
25939: GO 26974
// weapon := 0 ;
25941: LD_ADDR_VAR 0 18
25945: PUSH
25946: LD_INT 0
25948: ST_TO_ADDR
// fac_list := [ ] ;
25949: LD_ADDR_VAR 0 17
25953: PUSH
25954: EMPTY
25955: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
25956: LD_ADDR_VAR 0 6
25960: PUSH
25961: LD_VAR 0 1
25965: PPUSH
25966: CALL_OW 274
25970: PPUSH
25971: LD_VAR 0 2
25975: PPUSH
25976: LD_INT 0
25978: PPUSH
25979: CALL 23545 0 3
25983: PPUSH
25984: LD_INT 30
25986: PUSH
25987: LD_INT 3
25989: PUSH
25990: EMPTY
25991: LIST
25992: LIST
25993: PPUSH
25994: CALL_OW 72
25998: ST_TO_ADDR
// if not factories then
25999: LD_VAR 0 6
26003: NOT
26004: IFFALSE 26008
// exit ;
26006: GO 26974
// for i in factories do
26008: LD_ADDR_VAR 0 8
26012: PUSH
26013: LD_VAR 0 6
26017: PUSH
26018: FOR_IN
26019: IFFALSE 26044
// fac_list := fac_list union AvailableWeaponList ( i ) ;
26021: LD_ADDR_VAR 0 17
26025: PUSH
26026: LD_VAR 0 17
26030: PUSH
26031: LD_VAR 0 8
26035: PPUSH
26036: CALL_OW 478
26040: UNION
26041: ST_TO_ADDR
26042: GO 26018
26044: POP
26045: POP
// if not fac_list then
26046: LD_VAR 0 17
26050: NOT
26051: IFFALSE 26055
// exit ;
26053: GO 26974
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
26055: LD_ADDR_VAR 0 5
26059: PUSH
26060: LD_INT 4
26062: PUSH
26063: LD_INT 5
26065: PUSH
26066: LD_INT 9
26068: PUSH
26069: LD_INT 10
26071: PUSH
26072: LD_INT 6
26074: PUSH
26075: LD_INT 7
26077: PUSH
26078: LD_INT 11
26080: PUSH
26081: EMPTY
26082: LIST
26083: LIST
26084: LIST
26085: LIST
26086: LIST
26087: LIST
26088: LIST
26089: PUSH
26090: LD_INT 27
26092: PUSH
26093: LD_INT 28
26095: PUSH
26096: LD_INT 26
26098: PUSH
26099: LD_INT 30
26101: PUSH
26102: EMPTY
26103: LIST
26104: LIST
26105: LIST
26106: LIST
26107: PUSH
26108: LD_INT 43
26110: PUSH
26111: LD_INT 44
26113: PUSH
26114: LD_INT 46
26116: PUSH
26117: LD_INT 45
26119: PUSH
26120: LD_INT 47
26122: PUSH
26123: LD_INT 49
26125: PUSH
26126: EMPTY
26127: LIST
26128: LIST
26129: LIST
26130: LIST
26131: LIST
26132: LIST
26133: PUSH
26134: EMPTY
26135: LIST
26136: LIST
26137: LIST
26138: PUSH
26139: LD_VAR 0 12
26143: ARRAY
26144: ST_TO_ADDR
// list := list isect fac_list ;
26145: LD_ADDR_VAR 0 5
26149: PUSH
26150: LD_VAR 0 5
26154: PUSH
26155: LD_VAR 0 17
26159: ISECT
26160: ST_TO_ADDR
// if not list then
26161: LD_VAR 0 5
26165: NOT
26166: IFFALSE 26170
// exit ;
26168: GO 26974
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
26170: LD_VAR 0 12
26174: PUSH
26175: LD_INT 3
26177: EQUAL
26178: PUSH
26179: LD_INT 49
26181: PUSH
26182: LD_VAR 0 5
26186: IN
26187: AND
26188: PUSH
26189: LD_INT 31
26191: PPUSH
26192: LD_VAR 0 16
26196: PPUSH
26197: CALL_OW 321
26201: PUSH
26202: LD_INT 2
26204: EQUAL
26205: AND
26206: IFFALSE 26266
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
26208: LD_INT 22
26210: PUSH
26211: LD_VAR 0 16
26215: PUSH
26216: EMPTY
26217: LIST
26218: LIST
26219: PUSH
26220: LD_INT 35
26222: PUSH
26223: LD_INT 49
26225: PUSH
26226: EMPTY
26227: LIST
26228: LIST
26229: PUSH
26230: LD_INT 91
26232: PUSH
26233: LD_VAR 0 1
26237: PUSH
26238: LD_INT 10
26240: PUSH
26241: EMPTY
26242: LIST
26243: LIST
26244: LIST
26245: PUSH
26246: EMPTY
26247: LIST
26248: LIST
26249: LIST
26250: PPUSH
26251: CALL_OW 69
26255: NOT
26256: IFFALSE 26266
// weapon := ru_time_lapser ;
26258: LD_ADDR_VAR 0 18
26262: PUSH
26263: LD_INT 49
26265: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
26266: LD_VAR 0 12
26270: PUSH
26271: LD_INT 1
26273: PUSH
26274: LD_INT 2
26276: PUSH
26277: EMPTY
26278: LIST
26279: LIST
26280: IN
26281: PUSH
26282: LD_INT 11
26284: PUSH
26285: LD_VAR 0 5
26289: IN
26290: PUSH
26291: LD_INT 30
26293: PUSH
26294: LD_VAR 0 5
26298: IN
26299: OR
26300: AND
26301: PUSH
26302: LD_INT 6
26304: PPUSH
26305: LD_VAR 0 16
26309: PPUSH
26310: CALL_OW 321
26314: PUSH
26315: LD_INT 2
26317: EQUAL
26318: AND
26319: IFFALSE 26484
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
26321: LD_INT 22
26323: PUSH
26324: LD_VAR 0 16
26328: PUSH
26329: EMPTY
26330: LIST
26331: LIST
26332: PUSH
26333: LD_INT 2
26335: PUSH
26336: LD_INT 35
26338: PUSH
26339: LD_INT 11
26341: PUSH
26342: EMPTY
26343: LIST
26344: LIST
26345: PUSH
26346: LD_INT 35
26348: PUSH
26349: LD_INT 30
26351: PUSH
26352: EMPTY
26353: LIST
26354: LIST
26355: PUSH
26356: EMPTY
26357: LIST
26358: LIST
26359: LIST
26360: PUSH
26361: LD_INT 91
26363: PUSH
26364: LD_VAR 0 1
26368: PUSH
26369: LD_INT 18
26371: PUSH
26372: EMPTY
26373: LIST
26374: LIST
26375: LIST
26376: PUSH
26377: EMPTY
26378: LIST
26379: LIST
26380: LIST
26381: PPUSH
26382: CALL_OW 69
26386: NOT
26387: PUSH
26388: LD_INT 22
26390: PUSH
26391: LD_VAR 0 16
26395: PUSH
26396: EMPTY
26397: LIST
26398: LIST
26399: PUSH
26400: LD_INT 2
26402: PUSH
26403: LD_INT 30
26405: PUSH
26406: LD_INT 32
26408: PUSH
26409: EMPTY
26410: LIST
26411: LIST
26412: PUSH
26413: LD_INT 30
26415: PUSH
26416: LD_INT 33
26418: PUSH
26419: EMPTY
26420: LIST
26421: LIST
26422: PUSH
26423: EMPTY
26424: LIST
26425: LIST
26426: LIST
26427: PUSH
26428: LD_INT 91
26430: PUSH
26431: LD_VAR 0 1
26435: PUSH
26436: LD_INT 12
26438: PUSH
26439: EMPTY
26440: LIST
26441: LIST
26442: LIST
26443: PUSH
26444: EMPTY
26445: LIST
26446: LIST
26447: LIST
26448: PUSH
26449: EMPTY
26450: LIST
26451: PPUSH
26452: CALL_OW 69
26456: PUSH
26457: LD_INT 2
26459: GREATER
26460: AND
26461: IFFALSE 26484
// weapon := [ us_radar , ar_radar ] [ nat ] ;
26463: LD_ADDR_VAR 0 18
26467: PUSH
26468: LD_INT 11
26470: PUSH
26471: LD_INT 30
26473: PUSH
26474: EMPTY
26475: LIST
26476: LIST
26477: PUSH
26478: LD_VAR 0 12
26482: ARRAY
26483: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
26484: LD_VAR 0 18
26488: NOT
26489: PUSH
26490: LD_INT 40
26492: PPUSH
26493: LD_VAR 0 16
26497: PPUSH
26498: CALL_OW 321
26502: PUSH
26503: LD_INT 2
26505: EQUAL
26506: AND
26507: PUSH
26508: LD_INT 7
26510: PUSH
26511: LD_VAR 0 5
26515: IN
26516: PUSH
26517: LD_INT 28
26519: PUSH
26520: LD_VAR 0 5
26524: IN
26525: OR
26526: PUSH
26527: LD_INT 45
26529: PUSH
26530: LD_VAR 0 5
26534: IN
26535: OR
26536: AND
26537: IFFALSE 26791
// begin hex := GetHexInfo ( x , y ) ;
26539: LD_ADDR_VAR 0 4
26543: PUSH
26544: LD_VAR 0 10
26548: PPUSH
26549: LD_VAR 0 11
26553: PPUSH
26554: CALL_OW 546
26558: ST_TO_ADDR
// if hex [ 1 ] then
26559: LD_VAR 0 4
26563: PUSH
26564: LD_INT 1
26566: ARRAY
26567: IFFALSE 26571
// exit ;
26569: GO 26974
// height := hex [ 2 ] ;
26571: LD_ADDR_VAR 0 15
26575: PUSH
26576: LD_VAR 0 4
26580: PUSH
26581: LD_INT 2
26583: ARRAY
26584: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
26585: LD_ADDR_VAR 0 14
26589: PUSH
26590: LD_INT 0
26592: PUSH
26593: LD_INT 2
26595: PUSH
26596: LD_INT 3
26598: PUSH
26599: LD_INT 5
26601: PUSH
26602: EMPTY
26603: LIST
26604: LIST
26605: LIST
26606: LIST
26607: ST_TO_ADDR
// for i in tmp do
26608: LD_ADDR_VAR 0 8
26612: PUSH
26613: LD_VAR 0 14
26617: PUSH
26618: FOR_IN
26619: IFFALSE 26789
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
26621: LD_ADDR_VAR 0 9
26625: PUSH
26626: LD_VAR 0 10
26630: PPUSH
26631: LD_VAR 0 8
26635: PPUSH
26636: LD_INT 5
26638: PPUSH
26639: CALL_OW 272
26643: PUSH
26644: LD_VAR 0 11
26648: PPUSH
26649: LD_VAR 0 8
26653: PPUSH
26654: LD_INT 5
26656: PPUSH
26657: CALL_OW 273
26661: PUSH
26662: EMPTY
26663: LIST
26664: LIST
26665: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
26666: LD_VAR 0 9
26670: PUSH
26671: LD_INT 1
26673: ARRAY
26674: PPUSH
26675: LD_VAR 0 9
26679: PUSH
26680: LD_INT 2
26682: ARRAY
26683: PPUSH
26684: CALL_OW 488
26688: IFFALSE 26787
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
26690: LD_ADDR_VAR 0 4
26694: PUSH
26695: LD_VAR 0 9
26699: PUSH
26700: LD_INT 1
26702: ARRAY
26703: PPUSH
26704: LD_VAR 0 9
26708: PUSH
26709: LD_INT 2
26711: ARRAY
26712: PPUSH
26713: CALL_OW 546
26717: ST_TO_ADDR
// if hex [ 1 ] then
26718: LD_VAR 0 4
26722: PUSH
26723: LD_INT 1
26725: ARRAY
26726: IFFALSE 26730
// continue ;
26728: GO 26618
// h := hex [ 2 ] ;
26730: LD_ADDR_VAR 0 13
26734: PUSH
26735: LD_VAR 0 4
26739: PUSH
26740: LD_INT 2
26742: ARRAY
26743: ST_TO_ADDR
// if h + 7 < height then
26744: LD_VAR 0 13
26748: PUSH
26749: LD_INT 7
26751: PLUS
26752: PUSH
26753: LD_VAR 0 15
26757: LESS
26758: IFFALSE 26787
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
26760: LD_ADDR_VAR 0 18
26764: PUSH
26765: LD_INT 7
26767: PUSH
26768: LD_INT 28
26770: PUSH
26771: LD_INT 45
26773: PUSH
26774: EMPTY
26775: LIST
26776: LIST
26777: LIST
26778: PUSH
26779: LD_VAR 0 12
26783: ARRAY
26784: ST_TO_ADDR
// break ;
26785: GO 26789
// end ; end ; end ;
26787: GO 26618
26789: POP
26790: POP
// end ; if not weapon then
26791: LD_VAR 0 18
26795: NOT
26796: IFFALSE 26856
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
26798: LD_ADDR_VAR 0 5
26802: PUSH
26803: LD_VAR 0 5
26807: PUSH
26808: LD_INT 11
26810: PUSH
26811: LD_INT 30
26813: PUSH
26814: LD_INT 49
26816: PUSH
26817: EMPTY
26818: LIST
26819: LIST
26820: LIST
26821: DIFF
26822: ST_TO_ADDR
// if not list then
26823: LD_VAR 0 5
26827: NOT
26828: IFFALSE 26832
// exit ;
26830: GO 26974
// weapon := list [ rand ( 1 , list ) ] ;
26832: LD_ADDR_VAR 0 18
26836: PUSH
26837: LD_VAR 0 5
26841: PUSH
26842: LD_INT 1
26844: PPUSH
26845: LD_VAR 0 5
26849: PPUSH
26850: CALL_OW 12
26854: ARRAY
26855: ST_TO_ADDR
// end ; if weapon then
26856: LD_VAR 0 18
26860: IFFALSE 26974
// begin tmp := CostOfWeapon ( weapon ) ;
26862: LD_ADDR_VAR 0 14
26866: PUSH
26867: LD_VAR 0 18
26871: PPUSH
26872: CALL_OW 451
26876: ST_TO_ADDR
// j := GetBase ( tower ) ;
26877: LD_ADDR_VAR 0 9
26881: PUSH
26882: LD_VAR 0 1
26886: PPUSH
26887: CALL_OW 274
26891: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
26892: LD_VAR 0 9
26896: PPUSH
26897: LD_INT 1
26899: PPUSH
26900: CALL_OW 275
26904: PUSH
26905: LD_VAR 0 14
26909: PUSH
26910: LD_INT 1
26912: ARRAY
26913: GREATEREQUAL
26914: PUSH
26915: LD_VAR 0 9
26919: PPUSH
26920: LD_INT 2
26922: PPUSH
26923: CALL_OW 275
26927: PUSH
26928: LD_VAR 0 14
26932: PUSH
26933: LD_INT 2
26935: ARRAY
26936: GREATEREQUAL
26937: AND
26938: PUSH
26939: LD_VAR 0 9
26943: PPUSH
26944: LD_INT 3
26946: PPUSH
26947: CALL_OW 275
26951: PUSH
26952: LD_VAR 0 14
26956: PUSH
26957: LD_INT 3
26959: ARRAY
26960: GREATEREQUAL
26961: AND
26962: IFFALSE 26974
// result := weapon ;
26964: LD_ADDR_VAR 0 3
26968: PUSH
26969: LD_VAR 0 18
26973: ST_TO_ADDR
// end ; end ;
26974: LD_VAR 0 3
26978: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
26979: LD_INT 0
26981: PPUSH
26982: PPUSH
// result := true ;
26983: LD_ADDR_VAR 0 3
26987: PUSH
26988: LD_INT 1
26990: ST_TO_ADDR
// if array1 = array2 then
26991: LD_VAR 0 1
26995: PUSH
26996: LD_VAR 0 2
27000: EQUAL
27001: IFFALSE 27061
// begin for i = 1 to array1 do
27003: LD_ADDR_VAR 0 4
27007: PUSH
27008: DOUBLE
27009: LD_INT 1
27011: DEC
27012: ST_TO_ADDR
27013: LD_VAR 0 1
27017: PUSH
27018: FOR_TO
27019: IFFALSE 27057
// if array1 [ i ] <> array2 [ i ] then
27021: LD_VAR 0 1
27025: PUSH
27026: LD_VAR 0 4
27030: ARRAY
27031: PUSH
27032: LD_VAR 0 2
27036: PUSH
27037: LD_VAR 0 4
27041: ARRAY
27042: NONEQUAL
27043: IFFALSE 27055
// begin result := false ;
27045: LD_ADDR_VAR 0 3
27049: PUSH
27050: LD_INT 0
27052: ST_TO_ADDR
// break ;
27053: GO 27057
// end ;
27055: GO 27018
27057: POP
27058: POP
// end else
27059: GO 27069
// result := false ;
27061: LD_ADDR_VAR 0 3
27065: PUSH
27066: LD_INT 0
27068: ST_TO_ADDR
// end ;
27069: LD_VAR 0 3
27073: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
27074: LD_INT 0
27076: PPUSH
27077: PPUSH
// if not array1 or not array2 then
27078: LD_VAR 0 1
27082: NOT
27083: PUSH
27084: LD_VAR 0 2
27088: NOT
27089: OR
27090: IFFALSE 27094
// exit ;
27092: GO 27158
// result := true ;
27094: LD_ADDR_VAR 0 3
27098: PUSH
27099: LD_INT 1
27101: ST_TO_ADDR
// for i = 1 to array1 do
27102: LD_ADDR_VAR 0 4
27106: PUSH
27107: DOUBLE
27108: LD_INT 1
27110: DEC
27111: ST_TO_ADDR
27112: LD_VAR 0 1
27116: PUSH
27117: FOR_TO
27118: IFFALSE 27156
// if array1 [ i ] <> array2 [ i ] then
27120: LD_VAR 0 1
27124: PUSH
27125: LD_VAR 0 4
27129: ARRAY
27130: PUSH
27131: LD_VAR 0 2
27135: PUSH
27136: LD_VAR 0 4
27140: ARRAY
27141: NONEQUAL
27142: IFFALSE 27154
// begin result := false ;
27144: LD_ADDR_VAR 0 3
27148: PUSH
27149: LD_INT 0
27151: ST_TO_ADDR
// break ;
27152: GO 27156
// end ;
27154: GO 27117
27156: POP
27157: POP
// end ;
27158: LD_VAR 0 3
27162: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
27163: LD_INT 0
27165: PPUSH
27166: PPUSH
27167: PPUSH
// pom := GetBase ( fac ) ;
27168: LD_ADDR_VAR 0 5
27172: PUSH
27173: LD_VAR 0 1
27177: PPUSH
27178: CALL_OW 274
27182: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
27183: LD_ADDR_VAR 0 4
27187: PUSH
27188: LD_VAR 0 2
27192: PUSH
27193: LD_INT 1
27195: ARRAY
27196: PPUSH
27197: LD_VAR 0 2
27201: PUSH
27202: LD_INT 2
27204: ARRAY
27205: PPUSH
27206: LD_VAR 0 2
27210: PUSH
27211: LD_INT 3
27213: ARRAY
27214: PPUSH
27215: LD_VAR 0 2
27219: PUSH
27220: LD_INT 4
27222: ARRAY
27223: PPUSH
27224: CALL_OW 449
27228: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27229: LD_ADDR_VAR 0 3
27233: PUSH
27234: LD_VAR 0 5
27238: PPUSH
27239: LD_INT 1
27241: PPUSH
27242: CALL_OW 275
27246: PUSH
27247: LD_VAR 0 4
27251: PUSH
27252: LD_INT 1
27254: ARRAY
27255: GREATEREQUAL
27256: PUSH
27257: LD_VAR 0 5
27261: PPUSH
27262: LD_INT 2
27264: PPUSH
27265: CALL_OW 275
27269: PUSH
27270: LD_VAR 0 4
27274: PUSH
27275: LD_INT 2
27277: ARRAY
27278: GREATEREQUAL
27279: AND
27280: PUSH
27281: LD_VAR 0 5
27285: PPUSH
27286: LD_INT 3
27288: PPUSH
27289: CALL_OW 275
27293: PUSH
27294: LD_VAR 0 4
27298: PUSH
27299: LD_INT 3
27301: ARRAY
27302: GREATEREQUAL
27303: AND
27304: ST_TO_ADDR
// end ;
27305: LD_VAR 0 3
27309: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
27310: LD_INT 0
27312: PPUSH
27313: PPUSH
27314: PPUSH
27315: PPUSH
// pom := GetBase ( building ) ;
27316: LD_ADDR_VAR 0 3
27320: PUSH
27321: LD_VAR 0 1
27325: PPUSH
27326: CALL_OW 274
27330: ST_TO_ADDR
// if not pom then
27331: LD_VAR 0 3
27335: NOT
27336: IFFALSE 27340
// exit ;
27338: GO 27510
// btype := GetBType ( building ) ;
27340: LD_ADDR_VAR 0 5
27344: PUSH
27345: LD_VAR 0 1
27349: PPUSH
27350: CALL_OW 266
27354: ST_TO_ADDR
// if btype = b_armoury then
27355: LD_VAR 0 5
27359: PUSH
27360: LD_INT 4
27362: EQUAL
27363: IFFALSE 27373
// btype := b_barracks ;
27365: LD_ADDR_VAR 0 5
27369: PUSH
27370: LD_INT 5
27372: ST_TO_ADDR
// if btype = b_depot then
27373: LD_VAR 0 5
27377: PUSH
27378: LD_INT 0
27380: EQUAL
27381: IFFALSE 27391
// btype := b_warehouse ;
27383: LD_ADDR_VAR 0 5
27387: PUSH
27388: LD_INT 1
27390: ST_TO_ADDR
// if btype = b_workshop then
27391: LD_VAR 0 5
27395: PUSH
27396: LD_INT 2
27398: EQUAL
27399: IFFALSE 27409
// btype := b_factory ;
27401: LD_ADDR_VAR 0 5
27405: PUSH
27406: LD_INT 3
27408: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
27409: LD_ADDR_VAR 0 4
27413: PUSH
27414: LD_VAR 0 5
27418: PPUSH
27419: LD_VAR 0 1
27423: PPUSH
27424: CALL_OW 248
27428: PPUSH
27429: CALL_OW 450
27433: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27434: LD_ADDR_VAR 0 2
27438: PUSH
27439: LD_VAR 0 3
27443: PPUSH
27444: LD_INT 1
27446: PPUSH
27447: CALL_OW 275
27451: PUSH
27452: LD_VAR 0 4
27456: PUSH
27457: LD_INT 1
27459: ARRAY
27460: GREATEREQUAL
27461: PUSH
27462: LD_VAR 0 3
27466: PPUSH
27467: LD_INT 2
27469: PPUSH
27470: CALL_OW 275
27474: PUSH
27475: LD_VAR 0 4
27479: PUSH
27480: LD_INT 2
27482: ARRAY
27483: GREATEREQUAL
27484: AND
27485: PUSH
27486: LD_VAR 0 3
27490: PPUSH
27491: LD_INT 3
27493: PPUSH
27494: CALL_OW 275
27498: PUSH
27499: LD_VAR 0 4
27503: PUSH
27504: LD_INT 3
27506: ARRAY
27507: GREATEREQUAL
27508: AND
27509: ST_TO_ADDR
// end ;
27510: LD_VAR 0 2
27514: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
27515: LD_INT 0
27517: PPUSH
27518: PPUSH
27519: PPUSH
// pom := GetBase ( building ) ;
27520: LD_ADDR_VAR 0 4
27524: PUSH
27525: LD_VAR 0 1
27529: PPUSH
27530: CALL_OW 274
27534: ST_TO_ADDR
// if not pom then
27535: LD_VAR 0 4
27539: NOT
27540: IFFALSE 27544
// exit ;
27542: GO 27645
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
27544: LD_ADDR_VAR 0 5
27548: PUSH
27549: LD_VAR 0 2
27553: PPUSH
27554: LD_VAR 0 1
27558: PPUSH
27559: CALL_OW 248
27563: PPUSH
27564: CALL_OW 450
27568: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27569: LD_ADDR_VAR 0 3
27573: PUSH
27574: LD_VAR 0 4
27578: PPUSH
27579: LD_INT 1
27581: PPUSH
27582: CALL_OW 275
27586: PUSH
27587: LD_VAR 0 5
27591: PUSH
27592: LD_INT 1
27594: ARRAY
27595: GREATEREQUAL
27596: PUSH
27597: LD_VAR 0 4
27601: PPUSH
27602: LD_INT 2
27604: PPUSH
27605: CALL_OW 275
27609: PUSH
27610: LD_VAR 0 5
27614: PUSH
27615: LD_INT 2
27617: ARRAY
27618: GREATEREQUAL
27619: AND
27620: PUSH
27621: LD_VAR 0 4
27625: PPUSH
27626: LD_INT 3
27628: PPUSH
27629: CALL_OW 275
27633: PUSH
27634: LD_VAR 0 5
27638: PUSH
27639: LD_INT 3
27641: ARRAY
27642: GREATEREQUAL
27643: AND
27644: ST_TO_ADDR
// end ;
27645: LD_VAR 0 3
27649: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
27650: LD_INT 0
27652: PPUSH
27653: PPUSH
27654: PPUSH
27655: PPUSH
27656: PPUSH
27657: PPUSH
27658: PPUSH
27659: PPUSH
27660: PPUSH
27661: PPUSH
27662: PPUSH
// result := false ;
27663: LD_ADDR_VAR 0 8
27667: PUSH
27668: LD_INT 0
27670: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
27671: LD_VAR 0 5
27675: NOT
27676: PUSH
27677: LD_VAR 0 1
27681: NOT
27682: OR
27683: PUSH
27684: LD_VAR 0 2
27688: NOT
27689: OR
27690: PUSH
27691: LD_VAR 0 3
27695: NOT
27696: OR
27697: IFFALSE 27701
// exit ;
27699: GO 28515
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
27701: LD_ADDR_VAR 0 14
27705: PUSH
27706: LD_VAR 0 1
27710: PPUSH
27711: LD_VAR 0 2
27715: PPUSH
27716: LD_VAR 0 3
27720: PPUSH
27721: LD_VAR 0 4
27725: PPUSH
27726: LD_VAR 0 5
27730: PUSH
27731: LD_INT 1
27733: ARRAY
27734: PPUSH
27735: CALL_OW 248
27739: PPUSH
27740: LD_INT 0
27742: PPUSH
27743: CALL 29768 0 6
27747: ST_TO_ADDR
// if not hexes then
27748: LD_VAR 0 14
27752: NOT
27753: IFFALSE 27757
// exit ;
27755: GO 28515
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27757: LD_ADDR_VAR 0 17
27761: PUSH
27762: LD_VAR 0 5
27766: PPUSH
27767: LD_INT 22
27769: PUSH
27770: LD_VAR 0 13
27774: PPUSH
27775: CALL_OW 255
27779: PUSH
27780: EMPTY
27781: LIST
27782: LIST
27783: PUSH
27784: LD_INT 2
27786: PUSH
27787: LD_INT 30
27789: PUSH
27790: LD_INT 0
27792: PUSH
27793: EMPTY
27794: LIST
27795: LIST
27796: PUSH
27797: LD_INT 30
27799: PUSH
27800: LD_INT 1
27802: PUSH
27803: EMPTY
27804: LIST
27805: LIST
27806: PUSH
27807: EMPTY
27808: LIST
27809: LIST
27810: LIST
27811: PUSH
27812: EMPTY
27813: LIST
27814: LIST
27815: PPUSH
27816: CALL_OW 72
27820: ST_TO_ADDR
// for i = 1 to hexes do
27821: LD_ADDR_VAR 0 9
27825: PUSH
27826: DOUBLE
27827: LD_INT 1
27829: DEC
27830: ST_TO_ADDR
27831: LD_VAR 0 14
27835: PUSH
27836: FOR_TO
27837: IFFALSE 28513
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
27839: LD_ADDR_VAR 0 13
27843: PUSH
27844: LD_VAR 0 14
27848: PUSH
27849: LD_VAR 0 9
27853: ARRAY
27854: PUSH
27855: LD_INT 1
27857: ARRAY
27858: PPUSH
27859: LD_VAR 0 14
27863: PUSH
27864: LD_VAR 0 9
27868: ARRAY
27869: PUSH
27870: LD_INT 2
27872: ARRAY
27873: PPUSH
27874: CALL_OW 428
27878: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
27879: LD_VAR 0 14
27883: PUSH
27884: LD_VAR 0 9
27888: ARRAY
27889: PUSH
27890: LD_INT 1
27892: ARRAY
27893: PPUSH
27894: LD_VAR 0 14
27898: PUSH
27899: LD_VAR 0 9
27903: ARRAY
27904: PUSH
27905: LD_INT 2
27907: ARRAY
27908: PPUSH
27909: CALL_OW 351
27913: PUSH
27914: LD_VAR 0 14
27918: PUSH
27919: LD_VAR 0 9
27923: ARRAY
27924: PUSH
27925: LD_INT 1
27927: ARRAY
27928: PPUSH
27929: LD_VAR 0 14
27933: PUSH
27934: LD_VAR 0 9
27938: ARRAY
27939: PUSH
27940: LD_INT 2
27942: ARRAY
27943: PPUSH
27944: CALL_OW 488
27948: NOT
27949: OR
27950: PUSH
27951: LD_VAR 0 13
27955: PPUSH
27956: CALL_OW 247
27960: PUSH
27961: LD_INT 3
27963: EQUAL
27964: OR
27965: IFFALSE 27971
// exit ;
27967: POP
27968: POP
27969: GO 28515
// if not tmp then
27971: LD_VAR 0 13
27975: NOT
27976: IFFALSE 27980
// continue ;
27978: GO 27836
// result := true ;
27980: LD_ADDR_VAR 0 8
27984: PUSH
27985: LD_INT 1
27987: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
27988: LD_VAR 0 6
27992: PUSH
27993: LD_VAR 0 13
27997: PPUSH
27998: CALL_OW 247
28002: PUSH
28003: LD_INT 2
28005: EQUAL
28006: AND
28007: PUSH
28008: LD_VAR 0 13
28012: PPUSH
28013: CALL_OW 263
28017: PUSH
28018: LD_INT 1
28020: EQUAL
28021: AND
28022: IFFALSE 28186
// begin if IsDrivenBy ( tmp ) then
28024: LD_VAR 0 13
28028: PPUSH
28029: CALL_OW 311
28033: IFFALSE 28037
// continue ;
28035: GO 27836
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
28037: LD_VAR 0 6
28041: PPUSH
28042: LD_INT 3
28044: PUSH
28045: LD_INT 60
28047: PUSH
28048: EMPTY
28049: LIST
28050: PUSH
28051: EMPTY
28052: LIST
28053: LIST
28054: PUSH
28055: LD_INT 3
28057: PUSH
28058: LD_INT 55
28060: PUSH
28061: EMPTY
28062: LIST
28063: PUSH
28064: EMPTY
28065: LIST
28066: LIST
28067: PUSH
28068: EMPTY
28069: LIST
28070: LIST
28071: PPUSH
28072: CALL_OW 72
28076: IFFALSE 28184
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
28078: LD_ADDR_VAR 0 18
28082: PUSH
28083: LD_VAR 0 6
28087: PPUSH
28088: LD_INT 3
28090: PUSH
28091: LD_INT 60
28093: PUSH
28094: EMPTY
28095: LIST
28096: PUSH
28097: EMPTY
28098: LIST
28099: LIST
28100: PUSH
28101: LD_INT 3
28103: PUSH
28104: LD_INT 55
28106: PUSH
28107: EMPTY
28108: LIST
28109: PUSH
28110: EMPTY
28111: LIST
28112: LIST
28113: PUSH
28114: EMPTY
28115: LIST
28116: LIST
28117: PPUSH
28118: CALL_OW 72
28122: PUSH
28123: LD_INT 1
28125: ARRAY
28126: ST_TO_ADDR
// if IsInUnit ( driver ) then
28127: LD_VAR 0 18
28131: PPUSH
28132: CALL_OW 310
28136: IFFALSE 28147
// ComExit ( driver ) ;
28138: LD_VAR 0 18
28142: PPUSH
28143: CALL 53569 0 1
// AddComEnterUnit ( driver , tmp ) ;
28147: LD_VAR 0 18
28151: PPUSH
28152: LD_VAR 0 13
28156: PPUSH
28157: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
28161: LD_VAR 0 18
28165: PPUSH
28166: LD_VAR 0 7
28170: PPUSH
28171: CALL_OW 173
// AddComExitVehicle ( driver ) ;
28175: LD_VAR 0 18
28179: PPUSH
28180: CALL_OW 181
// end ; continue ;
28184: GO 27836
// end ; if not cleaners or not tmp in cleaners then
28186: LD_VAR 0 6
28190: NOT
28191: PUSH
28192: LD_VAR 0 13
28196: PUSH
28197: LD_VAR 0 6
28201: IN
28202: NOT
28203: OR
28204: IFFALSE 28511
// begin if dep then
28206: LD_VAR 0 17
28210: IFFALSE 28346
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
28212: LD_ADDR_VAR 0 16
28216: PUSH
28217: LD_VAR 0 17
28221: PUSH
28222: LD_INT 1
28224: ARRAY
28225: PPUSH
28226: CALL_OW 250
28230: PPUSH
28231: LD_VAR 0 17
28235: PUSH
28236: LD_INT 1
28238: ARRAY
28239: PPUSH
28240: CALL_OW 254
28244: PPUSH
28245: LD_INT 5
28247: PPUSH
28248: CALL_OW 272
28252: PUSH
28253: LD_VAR 0 17
28257: PUSH
28258: LD_INT 1
28260: ARRAY
28261: PPUSH
28262: CALL_OW 251
28266: PPUSH
28267: LD_VAR 0 17
28271: PUSH
28272: LD_INT 1
28274: ARRAY
28275: PPUSH
28276: CALL_OW 254
28280: PPUSH
28281: LD_INT 5
28283: PPUSH
28284: CALL_OW 273
28288: PUSH
28289: EMPTY
28290: LIST
28291: LIST
28292: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
28293: LD_VAR 0 16
28297: PUSH
28298: LD_INT 1
28300: ARRAY
28301: PPUSH
28302: LD_VAR 0 16
28306: PUSH
28307: LD_INT 2
28309: ARRAY
28310: PPUSH
28311: CALL_OW 488
28315: IFFALSE 28346
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
28317: LD_VAR 0 13
28321: PPUSH
28322: LD_VAR 0 16
28326: PUSH
28327: LD_INT 1
28329: ARRAY
28330: PPUSH
28331: LD_VAR 0 16
28335: PUSH
28336: LD_INT 2
28338: ARRAY
28339: PPUSH
28340: CALL_OW 111
// continue ;
28344: GO 27836
// end ; end ; r := GetDir ( tmp ) ;
28346: LD_ADDR_VAR 0 15
28350: PUSH
28351: LD_VAR 0 13
28355: PPUSH
28356: CALL_OW 254
28360: ST_TO_ADDR
// if r = 5 then
28361: LD_VAR 0 15
28365: PUSH
28366: LD_INT 5
28368: EQUAL
28369: IFFALSE 28379
// r := 0 ;
28371: LD_ADDR_VAR 0 15
28375: PUSH
28376: LD_INT 0
28378: ST_TO_ADDR
// for j = r to 5 do
28379: LD_ADDR_VAR 0 10
28383: PUSH
28384: DOUBLE
28385: LD_VAR 0 15
28389: DEC
28390: ST_TO_ADDR
28391: LD_INT 5
28393: PUSH
28394: FOR_TO
28395: IFFALSE 28509
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
28397: LD_ADDR_VAR 0 11
28401: PUSH
28402: LD_VAR 0 13
28406: PPUSH
28407: CALL_OW 250
28411: PPUSH
28412: LD_VAR 0 10
28416: PPUSH
28417: LD_INT 2
28419: PPUSH
28420: CALL_OW 272
28424: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
28425: LD_ADDR_VAR 0 12
28429: PUSH
28430: LD_VAR 0 13
28434: PPUSH
28435: CALL_OW 251
28439: PPUSH
28440: LD_VAR 0 10
28444: PPUSH
28445: LD_INT 2
28447: PPUSH
28448: CALL_OW 273
28452: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
28453: LD_VAR 0 11
28457: PPUSH
28458: LD_VAR 0 12
28462: PPUSH
28463: CALL_OW 488
28467: PUSH
28468: LD_VAR 0 11
28472: PPUSH
28473: LD_VAR 0 12
28477: PPUSH
28478: CALL_OW 428
28482: NOT
28483: AND
28484: IFFALSE 28507
// begin ComMoveXY ( tmp , _x , _y ) ;
28486: LD_VAR 0 13
28490: PPUSH
28491: LD_VAR 0 11
28495: PPUSH
28496: LD_VAR 0 12
28500: PPUSH
28501: CALL_OW 111
// break ;
28505: GO 28509
// end ; end ;
28507: GO 28394
28509: POP
28510: POP
// end ; end ;
28511: GO 27836
28513: POP
28514: POP
// end ;
28515: LD_VAR 0 8
28519: RET
// export function BuildingTechInvented ( side , btype ) ; begin
28520: LD_INT 0
28522: PPUSH
// result := true ;
28523: LD_ADDR_VAR 0 3
28527: PUSH
28528: LD_INT 1
28530: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
28531: LD_VAR 0 2
28535: PUSH
28536: LD_INT 24
28538: DOUBLE
28539: EQUAL
28540: IFTRUE 28550
28542: LD_INT 33
28544: DOUBLE
28545: EQUAL
28546: IFTRUE 28550
28548: GO 28575
28550: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
28551: LD_ADDR_VAR 0 3
28555: PUSH
28556: LD_INT 32
28558: PPUSH
28559: LD_VAR 0 1
28563: PPUSH
28564: CALL_OW 321
28568: PUSH
28569: LD_INT 2
28571: EQUAL
28572: ST_TO_ADDR
28573: GO 28891
28575: LD_INT 20
28577: DOUBLE
28578: EQUAL
28579: IFTRUE 28583
28581: GO 28608
28583: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
28584: LD_ADDR_VAR 0 3
28588: PUSH
28589: LD_INT 6
28591: PPUSH
28592: LD_VAR 0 1
28596: PPUSH
28597: CALL_OW 321
28601: PUSH
28602: LD_INT 2
28604: EQUAL
28605: ST_TO_ADDR
28606: GO 28891
28608: LD_INT 22
28610: DOUBLE
28611: EQUAL
28612: IFTRUE 28622
28614: LD_INT 36
28616: DOUBLE
28617: EQUAL
28618: IFTRUE 28622
28620: GO 28647
28622: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
28623: LD_ADDR_VAR 0 3
28627: PUSH
28628: LD_INT 15
28630: PPUSH
28631: LD_VAR 0 1
28635: PPUSH
28636: CALL_OW 321
28640: PUSH
28641: LD_INT 2
28643: EQUAL
28644: ST_TO_ADDR
28645: GO 28891
28647: LD_INT 30
28649: DOUBLE
28650: EQUAL
28651: IFTRUE 28655
28653: GO 28680
28655: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
28656: LD_ADDR_VAR 0 3
28660: PUSH
28661: LD_INT 20
28663: PPUSH
28664: LD_VAR 0 1
28668: PPUSH
28669: CALL_OW 321
28673: PUSH
28674: LD_INT 2
28676: EQUAL
28677: ST_TO_ADDR
28678: GO 28891
28680: LD_INT 28
28682: DOUBLE
28683: EQUAL
28684: IFTRUE 28694
28686: LD_INT 21
28688: DOUBLE
28689: EQUAL
28690: IFTRUE 28694
28692: GO 28719
28694: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
28695: LD_ADDR_VAR 0 3
28699: PUSH
28700: LD_INT 21
28702: PPUSH
28703: LD_VAR 0 1
28707: PPUSH
28708: CALL_OW 321
28712: PUSH
28713: LD_INT 2
28715: EQUAL
28716: ST_TO_ADDR
28717: GO 28891
28719: LD_INT 16
28721: DOUBLE
28722: EQUAL
28723: IFTRUE 28727
28725: GO 28752
28727: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
28728: LD_ADDR_VAR 0 3
28732: PUSH
28733: LD_INT 84
28735: PPUSH
28736: LD_VAR 0 1
28740: PPUSH
28741: CALL_OW 321
28745: PUSH
28746: LD_INT 2
28748: EQUAL
28749: ST_TO_ADDR
28750: GO 28891
28752: LD_INT 19
28754: DOUBLE
28755: EQUAL
28756: IFTRUE 28766
28758: LD_INT 23
28760: DOUBLE
28761: EQUAL
28762: IFTRUE 28766
28764: GO 28791
28766: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
28767: LD_ADDR_VAR 0 3
28771: PUSH
28772: LD_INT 83
28774: PPUSH
28775: LD_VAR 0 1
28779: PPUSH
28780: CALL_OW 321
28784: PUSH
28785: LD_INT 2
28787: EQUAL
28788: ST_TO_ADDR
28789: GO 28891
28791: LD_INT 17
28793: DOUBLE
28794: EQUAL
28795: IFTRUE 28799
28797: GO 28824
28799: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
28800: LD_ADDR_VAR 0 3
28804: PUSH
28805: LD_INT 39
28807: PPUSH
28808: LD_VAR 0 1
28812: PPUSH
28813: CALL_OW 321
28817: PUSH
28818: LD_INT 2
28820: EQUAL
28821: ST_TO_ADDR
28822: GO 28891
28824: LD_INT 18
28826: DOUBLE
28827: EQUAL
28828: IFTRUE 28832
28830: GO 28857
28832: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
28833: LD_ADDR_VAR 0 3
28837: PUSH
28838: LD_INT 40
28840: PPUSH
28841: LD_VAR 0 1
28845: PPUSH
28846: CALL_OW 321
28850: PUSH
28851: LD_INT 2
28853: EQUAL
28854: ST_TO_ADDR
28855: GO 28891
28857: LD_INT 27
28859: DOUBLE
28860: EQUAL
28861: IFTRUE 28865
28863: GO 28890
28865: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
28866: LD_ADDR_VAR 0 3
28870: PUSH
28871: LD_INT 35
28873: PPUSH
28874: LD_VAR 0 1
28878: PPUSH
28879: CALL_OW 321
28883: PUSH
28884: LD_INT 2
28886: EQUAL
28887: ST_TO_ADDR
28888: GO 28891
28890: POP
// end ;
28891: LD_VAR 0 3
28895: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
28896: LD_INT 0
28898: PPUSH
28899: PPUSH
28900: PPUSH
28901: PPUSH
28902: PPUSH
28903: PPUSH
28904: PPUSH
28905: PPUSH
28906: PPUSH
28907: PPUSH
28908: PPUSH
// result := false ;
28909: LD_ADDR_VAR 0 6
28913: PUSH
28914: LD_INT 0
28916: ST_TO_ADDR
// if btype = b_depot then
28917: LD_VAR 0 2
28921: PUSH
28922: LD_INT 0
28924: EQUAL
28925: IFFALSE 28937
// begin result := true ;
28927: LD_ADDR_VAR 0 6
28931: PUSH
28932: LD_INT 1
28934: ST_TO_ADDR
// exit ;
28935: GO 29763
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
28937: LD_VAR 0 1
28941: NOT
28942: PUSH
28943: LD_VAR 0 1
28947: PPUSH
28948: CALL_OW 266
28952: PUSH
28953: LD_INT 0
28955: PUSH
28956: LD_INT 1
28958: PUSH
28959: EMPTY
28960: LIST
28961: LIST
28962: IN
28963: NOT
28964: OR
28965: PUSH
28966: LD_VAR 0 2
28970: NOT
28971: OR
28972: PUSH
28973: LD_VAR 0 5
28977: PUSH
28978: LD_INT 0
28980: PUSH
28981: LD_INT 1
28983: PUSH
28984: LD_INT 2
28986: PUSH
28987: LD_INT 3
28989: PUSH
28990: LD_INT 4
28992: PUSH
28993: LD_INT 5
28995: PUSH
28996: EMPTY
28997: LIST
28998: LIST
28999: LIST
29000: LIST
29001: LIST
29002: LIST
29003: IN
29004: NOT
29005: OR
29006: PUSH
29007: LD_VAR 0 3
29011: PPUSH
29012: LD_VAR 0 4
29016: PPUSH
29017: CALL_OW 488
29021: NOT
29022: OR
29023: IFFALSE 29027
// exit ;
29025: GO 29763
// side := GetSide ( depot ) ;
29027: LD_ADDR_VAR 0 9
29031: PUSH
29032: LD_VAR 0 1
29036: PPUSH
29037: CALL_OW 255
29041: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
29042: LD_VAR 0 9
29046: PPUSH
29047: LD_VAR 0 2
29051: PPUSH
29052: CALL 28520 0 2
29056: NOT
29057: IFFALSE 29061
// exit ;
29059: GO 29763
// pom := GetBase ( depot ) ;
29061: LD_ADDR_VAR 0 10
29065: PUSH
29066: LD_VAR 0 1
29070: PPUSH
29071: CALL_OW 274
29075: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
29076: LD_ADDR_VAR 0 11
29080: PUSH
29081: LD_VAR 0 2
29085: PPUSH
29086: LD_VAR 0 1
29090: PPUSH
29091: CALL_OW 248
29095: PPUSH
29096: CALL_OW 450
29100: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
29101: LD_VAR 0 10
29105: PPUSH
29106: LD_INT 1
29108: PPUSH
29109: CALL_OW 275
29113: PUSH
29114: LD_VAR 0 11
29118: PUSH
29119: LD_INT 1
29121: ARRAY
29122: GREATEREQUAL
29123: PUSH
29124: LD_VAR 0 10
29128: PPUSH
29129: LD_INT 2
29131: PPUSH
29132: CALL_OW 275
29136: PUSH
29137: LD_VAR 0 11
29141: PUSH
29142: LD_INT 2
29144: ARRAY
29145: GREATEREQUAL
29146: AND
29147: PUSH
29148: LD_VAR 0 10
29152: PPUSH
29153: LD_INT 3
29155: PPUSH
29156: CALL_OW 275
29160: PUSH
29161: LD_VAR 0 11
29165: PUSH
29166: LD_INT 3
29168: ARRAY
29169: GREATEREQUAL
29170: AND
29171: NOT
29172: IFFALSE 29176
// exit ;
29174: GO 29763
// if GetBType ( depot ) = b_depot then
29176: LD_VAR 0 1
29180: PPUSH
29181: CALL_OW 266
29185: PUSH
29186: LD_INT 0
29188: EQUAL
29189: IFFALSE 29201
// dist := 28 else
29191: LD_ADDR_VAR 0 14
29195: PUSH
29196: LD_INT 28
29198: ST_TO_ADDR
29199: GO 29209
// dist := 36 ;
29201: LD_ADDR_VAR 0 14
29205: PUSH
29206: LD_INT 36
29208: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
29209: LD_VAR 0 1
29213: PPUSH
29214: LD_VAR 0 3
29218: PPUSH
29219: LD_VAR 0 4
29223: PPUSH
29224: CALL_OW 297
29228: PUSH
29229: LD_VAR 0 14
29233: GREATER
29234: IFFALSE 29238
// exit ;
29236: GO 29763
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
29238: LD_ADDR_VAR 0 12
29242: PUSH
29243: LD_VAR 0 2
29247: PPUSH
29248: LD_VAR 0 3
29252: PPUSH
29253: LD_VAR 0 4
29257: PPUSH
29258: LD_VAR 0 5
29262: PPUSH
29263: LD_VAR 0 1
29267: PPUSH
29268: CALL_OW 248
29272: PPUSH
29273: LD_INT 0
29275: PPUSH
29276: CALL 29768 0 6
29280: ST_TO_ADDR
// if not hexes then
29281: LD_VAR 0 12
29285: NOT
29286: IFFALSE 29290
// exit ;
29288: GO 29763
// hex := GetHexInfo ( x , y ) ;
29290: LD_ADDR_VAR 0 15
29294: PUSH
29295: LD_VAR 0 3
29299: PPUSH
29300: LD_VAR 0 4
29304: PPUSH
29305: CALL_OW 546
29309: ST_TO_ADDR
// if hex [ 1 ] then
29310: LD_VAR 0 15
29314: PUSH
29315: LD_INT 1
29317: ARRAY
29318: IFFALSE 29322
// exit ;
29320: GO 29763
// height := hex [ 2 ] ;
29322: LD_ADDR_VAR 0 13
29326: PUSH
29327: LD_VAR 0 15
29331: PUSH
29332: LD_INT 2
29334: ARRAY
29335: ST_TO_ADDR
// for i = 1 to hexes do
29336: LD_ADDR_VAR 0 7
29340: PUSH
29341: DOUBLE
29342: LD_INT 1
29344: DEC
29345: ST_TO_ADDR
29346: LD_VAR 0 12
29350: PUSH
29351: FOR_TO
29352: IFFALSE 29682
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
29354: LD_VAR 0 12
29358: PUSH
29359: LD_VAR 0 7
29363: ARRAY
29364: PUSH
29365: LD_INT 1
29367: ARRAY
29368: PPUSH
29369: LD_VAR 0 12
29373: PUSH
29374: LD_VAR 0 7
29378: ARRAY
29379: PUSH
29380: LD_INT 2
29382: ARRAY
29383: PPUSH
29384: CALL_OW 488
29388: NOT
29389: PUSH
29390: LD_VAR 0 12
29394: PUSH
29395: LD_VAR 0 7
29399: ARRAY
29400: PUSH
29401: LD_INT 1
29403: ARRAY
29404: PPUSH
29405: LD_VAR 0 12
29409: PUSH
29410: LD_VAR 0 7
29414: ARRAY
29415: PUSH
29416: LD_INT 2
29418: ARRAY
29419: PPUSH
29420: CALL_OW 428
29424: PUSH
29425: LD_INT 0
29427: GREATER
29428: OR
29429: PUSH
29430: LD_VAR 0 12
29434: PUSH
29435: LD_VAR 0 7
29439: ARRAY
29440: PUSH
29441: LD_INT 1
29443: ARRAY
29444: PPUSH
29445: LD_VAR 0 12
29449: PUSH
29450: LD_VAR 0 7
29454: ARRAY
29455: PUSH
29456: LD_INT 2
29458: ARRAY
29459: PPUSH
29460: CALL_OW 351
29464: OR
29465: IFFALSE 29471
// exit ;
29467: POP
29468: POP
29469: GO 29763
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
29471: LD_ADDR_VAR 0 8
29475: PUSH
29476: LD_VAR 0 12
29480: PUSH
29481: LD_VAR 0 7
29485: ARRAY
29486: PUSH
29487: LD_INT 1
29489: ARRAY
29490: PPUSH
29491: LD_VAR 0 12
29495: PUSH
29496: LD_VAR 0 7
29500: ARRAY
29501: PUSH
29502: LD_INT 2
29504: ARRAY
29505: PPUSH
29506: CALL_OW 546
29510: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
29511: LD_VAR 0 8
29515: PUSH
29516: LD_INT 1
29518: ARRAY
29519: PUSH
29520: LD_VAR 0 8
29524: PUSH
29525: LD_INT 2
29527: ARRAY
29528: PUSH
29529: LD_VAR 0 13
29533: PUSH
29534: LD_INT 2
29536: PLUS
29537: GREATER
29538: OR
29539: PUSH
29540: LD_VAR 0 8
29544: PUSH
29545: LD_INT 2
29547: ARRAY
29548: PUSH
29549: LD_VAR 0 13
29553: PUSH
29554: LD_INT 2
29556: MINUS
29557: LESS
29558: OR
29559: PUSH
29560: LD_VAR 0 8
29564: PUSH
29565: LD_INT 3
29567: ARRAY
29568: PUSH
29569: LD_INT 0
29571: PUSH
29572: LD_INT 8
29574: PUSH
29575: LD_INT 9
29577: PUSH
29578: LD_INT 10
29580: PUSH
29581: LD_INT 11
29583: PUSH
29584: LD_INT 12
29586: PUSH
29587: LD_INT 13
29589: PUSH
29590: LD_INT 16
29592: PUSH
29593: LD_INT 17
29595: PUSH
29596: LD_INT 18
29598: PUSH
29599: LD_INT 19
29601: PUSH
29602: LD_INT 20
29604: PUSH
29605: LD_INT 21
29607: PUSH
29608: EMPTY
29609: LIST
29610: LIST
29611: LIST
29612: LIST
29613: LIST
29614: LIST
29615: LIST
29616: LIST
29617: LIST
29618: LIST
29619: LIST
29620: LIST
29621: LIST
29622: IN
29623: NOT
29624: OR
29625: PUSH
29626: LD_VAR 0 8
29630: PUSH
29631: LD_INT 5
29633: ARRAY
29634: NOT
29635: OR
29636: PUSH
29637: LD_VAR 0 8
29641: PUSH
29642: LD_INT 6
29644: ARRAY
29645: PUSH
29646: LD_INT 1
29648: PUSH
29649: LD_INT 2
29651: PUSH
29652: LD_INT 7
29654: PUSH
29655: LD_INT 9
29657: PUSH
29658: LD_INT 10
29660: PUSH
29661: LD_INT 11
29663: PUSH
29664: EMPTY
29665: LIST
29666: LIST
29667: LIST
29668: LIST
29669: LIST
29670: LIST
29671: IN
29672: NOT
29673: OR
29674: IFFALSE 29680
// exit ;
29676: POP
29677: POP
29678: GO 29763
// end ;
29680: GO 29351
29682: POP
29683: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
29684: LD_VAR 0 9
29688: PPUSH
29689: LD_VAR 0 3
29693: PPUSH
29694: LD_VAR 0 4
29698: PPUSH
29699: LD_INT 20
29701: PPUSH
29702: CALL 21686 0 4
29706: PUSH
29707: LD_INT 4
29709: ARRAY
29710: IFFALSE 29714
// exit ;
29712: GO 29763
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
29714: LD_VAR 0 2
29718: PUSH
29719: LD_INT 29
29721: PUSH
29722: LD_INT 30
29724: PUSH
29725: EMPTY
29726: LIST
29727: LIST
29728: IN
29729: PUSH
29730: LD_VAR 0 3
29734: PPUSH
29735: LD_VAR 0 4
29739: PPUSH
29740: LD_VAR 0 9
29744: PPUSH
29745: CALL_OW 440
29749: NOT
29750: AND
29751: IFFALSE 29755
// exit ;
29753: GO 29763
// result := true ;
29755: LD_ADDR_VAR 0 6
29759: PUSH
29760: LD_INT 1
29762: ST_TO_ADDR
// end ;
29763: LD_VAR 0 6
29767: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
29768: LD_INT 0
29770: PPUSH
29771: PPUSH
29772: PPUSH
29773: PPUSH
29774: PPUSH
29775: PPUSH
29776: PPUSH
29777: PPUSH
29778: PPUSH
29779: PPUSH
29780: PPUSH
29781: PPUSH
29782: PPUSH
29783: PPUSH
29784: PPUSH
29785: PPUSH
29786: PPUSH
29787: PPUSH
29788: PPUSH
29789: PPUSH
29790: PPUSH
29791: PPUSH
29792: PPUSH
29793: PPUSH
29794: PPUSH
29795: PPUSH
29796: PPUSH
29797: PPUSH
29798: PPUSH
29799: PPUSH
29800: PPUSH
29801: PPUSH
29802: PPUSH
29803: PPUSH
29804: PPUSH
29805: PPUSH
29806: PPUSH
29807: PPUSH
29808: PPUSH
29809: PPUSH
29810: PPUSH
29811: PPUSH
29812: PPUSH
29813: PPUSH
29814: PPUSH
29815: PPUSH
29816: PPUSH
29817: PPUSH
29818: PPUSH
29819: PPUSH
29820: PPUSH
29821: PPUSH
29822: PPUSH
29823: PPUSH
29824: PPUSH
29825: PPUSH
29826: PPUSH
29827: PPUSH
// result = [ ] ;
29828: LD_ADDR_VAR 0 7
29832: PUSH
29833: EMPTY
29834: ST_TO_ADDR
// temp_list = [ ] ;
29835: LD_ADDR_VAR 0 9
29839: PUSH
29840: EMPTY
29841: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
29842: LD_VAR 0 4
29846: PUSH
29847: LD_INT 0
29849: PUSH
29850: LD_INT 1
29852: PUSH
29853: LD_INT 2
29855: PUSH
29856: LD_INT 3
29858: PUSH
29859: LD_INT 4
29861: PUSH
29862: LD_INT 5
29864: PUSH
29865: EMPTY
29866: LIST
29867: LIST
29868: LIST
29869: LIST
29870: LIST
29871: LIST
29872: IN
29873: NOT
29874: PUSH
29875: LD_VAR 0 1
29879: PUSH
29880: LD_INT 0
29882: PUSH
29883: LD_INT 1
29885: PUSH
29886: EMPTY
29887: LIST
29888: LIST
29889: IN
29890: PUSH
29891: LD_VAR 0 5
29895: PUSH
29896: LD_INT 1
29898: PUSH
29899: LD_INT 2
29901: PUSH
29902: LD_INT 3
29904: PUSH
29905: EMPTY
29906: LIST
29907: LIST
29908: LIST
29909: IN
29910: NOT
29911: AND
29912: OR
29913: IFFALSE 29917
// exit ;
29915: GO 48308
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
29917: LD_VAR 0 1
29921: PUSH
29922: LD_INT 6
29924: PUSH
29925: LD_INT 7
29927: PUSH
29928: LD_INT 8
29930: PUSH
29931: LD_INT 13
29933: PUSH
29934: LD_INT 12
29936: PUSH
29937: LD_INT 15
29939: PUSH
29940: LD_INT 11
29942: PUSH
29943: LD_INT 14
29945: PUSH
29946: LD_INT 10
29948: PUSH
29949: EMPTY
29950: LIST
29951: LIST
29952: LIST
29953: LIST
29954: LIST
29955: LIST
29956: LIST
29957: LIST
29958: LIST
29959: IN
29960: IFFALSE 29970
// btype = b_lab ;
29962: LD_ADDR_VAR 0 1
29966: PUSH
29967: LD_INT 6
29969: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
29970: LD_VAR 0 6
29974: PUSH
29975: LD_INT 0
29977: PUSH
29978: LD_INT 1
29980: PUSH
29981: LD_INT 2
29983: PUSH
29984: EMPTY
29985: LIST
29986: LIST
29987: LIST
29988: IN
29989: NOT
29990: PUSH
29991: LD_VAR 0 1
29995: PUSH
29996: LD_INT 0
29998: PUSH
29999: LD_INT 1
30001: PUSH
30002: LD_INT 2
30004: PUSH
30005: LD_INT 3
30007: PUSH
30008: LD_INT 6
30010: PUSH
30011: LD_INT 36
30013: PUSH
30014: LD_INT 4
30016: PUSH
30017: LD_INT 5
30019: PUSH
30020: LD_INT 31
30022: PUSH
30023: LD_INT 32
30025: PUSH
30026: LD_INT 33
30028: PUSH
30029: EMPTY
30030: LIST
30031: LIST
30032: LIST
30033: LIST
30034: LIST
30035: LIST
30036: LIST
30037: LIST
30038: LIST
30039: LIST
30040: LIST
30041: IN
30042: NOT
30043: PUSH
30044: LD_VAR 0 6
30048: PUSH
30049: LD_INT 1
30051: EQUAL
30052: AND
30053: OR
30054: PUSH
30055: LD_VAR 0 1
30059: PUSH
30060: LD_INT 2
30062: PUSH
30063: LD_INT 3
30065: PUSH
30066: EMPTY
30067: LIST
30068: LIST
30069: IN
30070: NOT
30071: PUSH
30072: LD_VAR 0 6
30076: PUSH
30077: LD_INT 2
30079: EQUAL
30080: AND
30081: OR
30082: IFFALSE 30092
// mode = 0 ;
30084: LD_ADDR_VAR 0 6
30088: PUSH
30089: LD_INT 0
30091: ST_TO_ADDR
// case mode of 0 :
30092: LD_VAR 0 6
30096: PUSH
30097: LD_INT 0
30099: DOUBLE
30100: EQUAL
30101: IFTRUE 30105
30103: GO 41558
30105: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30106: LD_ADDR_VAR 0 11
30110: PUSH
30111: LD_INT 0
30113: PUSH
30114: LD_INT 0
30116: PUSH
30117: EMPTY
30118: LIST
30119: LIST
30120: PUSH
30121: LD_INT 0
30123: PUSH
30124: LD_INT 1
30126: NEG
30127: PUSH
30128: EMPTY
30129: LIST
30130: LIST
30131: PUSH
30132: LD_INT 1
30134: PUSH
30135: LD_INT 0
30137: PUSH
30138: EMPTY
30139: LIST
30140: LIST
30141: PUSH
30142: LD_INT 1
30144: PUSH
30145: LD_INT 1
30147: PUSH
30148: EMPTY
30149: LIST
30150: LIST
30151: PUSH
30152: LD_INT 0
30154: PUSH
30155: LD_INT 1
30157: PUSH
30158: EMPTY
30159: LIST
30160: LIST
30161: PUSH
30162: LD_INT 1
30164: NEG
30165: PUSH
30166: LD_INT 0
30168: PUSH
30169: EMPTY
30170: LIST
30171: LIST
30172: PUSH
30173: LD_INT 1
30175: NEG
30176: PUSH
30177: LD_INT 1
30179: NEG
30180: PUSH
30181: EMPTY
30182: LIST
30183: LIST
30184: PUSH
30185: LD_INT 1
30187: NEG
30188: PUSH
30189: LD_INT 2
30191: NEG
30192: PUSH
30193: EMPTY
30194: LIST
30195: LIST
30196: PUSH
30197: LD_INT 0
30199: PUSH
30200: LD_INT 2
30202: NEG
30203: PUSH
30204: EMPTY
30205: LIST
30206: LIST
30207: PUSH
30208: LD_INT 1
30210: PUSH
30211: LD_INT 1
30213: NEG
30214: PUSH
30215: EMPTY
30216: LIST
30217: LIST
30218: PUSH
30219: LD_INT 1
30221: PUSH
30222: LD_INT 2
30224: PUSH
30225: EMPTY
30226: LIST
30227: LIST
30228: PUSH
30229: LD_INT 0
30231: PUSH
30232: LD_INT 2
30234: PUSH
30235: EMPTY
30236: LIST
30237: LIST
30238: PUSH
30239: LD_INT 1
30241: NEG
30242: PUSH
30243: LD_INT 1
30245: PUSH
30246: EMPTY
30247: LIST
30248: LIST
30249: PUSH
30250: LD_INT 1
30252: PUSH
30253: LD_INT 3
30255: PUSH
30256: EMPTY
30257: LIST
30258: LIST
30259: PUSH
30260: LD_INT 0
30262: PUSH
30263: LD_INT 3
30265: PUSH
30266: EMPTY
30267: LIST
30268: LIST
30269: PUSH
30270: LD_INT 1
30272: NEG
30273: PUSH
30274: LD_INT 2
30276: PUSH
30277: EMPTY
30278: LIST
30279: LIST
30280: PUSH
30281: EMPTY
30282: LIST
30283: LIST
30284: LIST
30285: LIST
30286: LIST
30287: LIST
30288: LIST
30289: LIST
30290: LIST
30291: LIST
30292: LIST
30293: LIST
30294: LIST
30295: LIST
30296: LIST
30297: LIST
30298: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30299: LD_ADDR_VAR 0 12
30303: PUSH
30304: LD_INT 0
30306: PUSH
30307: LD_INT 0
30309: PUSH
30310: EMPTY
30311: LIST
30312: LIST
30313: PUSH
30314: LD_INT 0
30316: PUSH
30317: LD_INT 1
30319: NEG
30320: PUSH
30321: EMPTY
30322: LIST
30323: LIST
30324: PUSH
30325: LD_INT 1
30327: PUSH
30328: LD_INT 0
30330: PUSH
30331: EMPTY
30332: LIST
30333: LIST
30334: PUSH
30335: LD_INT 1
30337: PUSH
30338: LD_INT 1
30340: PUSH
30341: EMPTY
30342: LIST
30343: LIST
30344: PUSH
30345: LD_INT 0
30347: PUSH
30348: LD_INT 1
30350: PUSH
30351: EMPTY
30352: LIST
30353: LIST
30354: PUSH
30355: LD_INT 1
30357: NEG
30358: PUSH
30359: LD_INT 0
30361: PUSH
30362: EMPTY
30363: LIST
30364: LIST
30365: PUSH
30366: LD_INT 1
30368: NEG
30369: PUSH
30370: LD_INT 1
30372: NEG
30373: PUSH
30374: EMPTY
30375: LIST
30376: LIST
30377: PUSH
30378: LD_INT 1
30380: PUSH
30381: LD_INT 1
30383: NEG
30384: PUSH
30385: EMPTY
30386: LIST
30387: LIST
30388: PUSH
30389: LD_INT 2
30391: PUSH
30392: LD_INT 0
30394: PUSH
30395: EMPTY
30396: LIST
30397: LIST
30398: PUSH
30399: LD_INT 2
30401: PUSH
30402: LD_INT 1
30404: PUSH
30405: EMPTY
30406: LIST
30407: LIST
30408: PUSH
30409: LD_INT 1
30411: NEG
30412: PUSH
30413: LD_INT 1
30415: PUSH
30416: EMPTY
30417: LIST
30418: LIST
30419: PUSH
30420: LD_INT 2
30422: NEG
30423: PUSH
30424: LD_INT 0
30426: PUSH
30427: EMPTY
30428: LIST
30429: LIST
30430: PUSH
30431: LD_INT 2
30433: NEG
30434: PUSH
30435: LD_INT 1
30437: NEG
30438: PUSH
30439: EMPTY
30440: LIST
30441: LIST
30442: PUSH
30443: LD_INT 2
30445: NEG
30446: PUSH
30447: LD_INT 1
30449: PUSH
30450: EMPTY
30451: LIST
30452: LIST
30453: PUSH
30454: LD_INT 3
30456: NEG
30457: PUSH
30458: LD_INT 0
30460: PUSH
30461: EMPTY
30462: LIST
30463: LIST
30464: PUSH
30465: LD_INT 3
30467: NEG
30468: PUSH
30469: LD_INT 1
30471: NEG
30472: PUSH
30473: EMPTY
30474: LIST
30475: LIST
30476: PUSH
30477: EMPTY
30478: LIST
30479: LIST
30480: LIST
30481: LIST
30482: LIST
30483: LIST
30484: LIST
30485: LIST
30486: LIST
30487: LIST
30488: LIST
30489: LIST
30490: LIST
30491: LIST
30492: LIST
30493: LIST
30494: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30495: LD_ADDR_VAR 0 13
30499: PUSH
30500: LD_INT 0
30502: PUSH
30503: LD_INT 0
30505: PUSH
30506: EMPTY
30507: LIST
30508: LIST
30509: PUSH
30510: LD_INT 0
30512: PUSH
30513: LD_INT 1
30515: NEG
30516: PUSH
30517: EMPTY
30518: LIST
30519: LIST
30520: PUSH
30521: LD_INT 1
30523: PUSH
30524: LD_INT 0
30526: PUSH
30527: EMPTY
30528: LIST
30529: LIST
30530: PUSH
30531: LD_INT 1
30533: PUSH
30534: LD_INT 1
30536: PUSH
30537: EMPTY
30538: LIST
30539: LIST
30540: PUSH
30541: LD_INT 0
30543: PUSH
30544: LD_INT 1
30546: PUSH
30547: EMPTY
30548: LIST
30549: LIST
30550: PUSH
30551: LD_INT 1
30553: NEG
30554: PUSH
30555: LD_INT 0
30557: PUSH
30558: EMPTY
30559: LIST
30560: LIST
30561: PUSH
30562: LD_INT 1
30564: NEG
30565: PUSH
30566: LD_INT 1
30568: NEG
30569: PUSH
30570: EMPTY
30571: LIST
30572: LIST
30573: PUSH
30574: LD_INT 1
30576: NEG
30577: PUSH
30578: LD_INT 2
30580: NEG
30581: PUSH
30582: EMPTY
30583: LIST
30584: LIST
30585: PUSH
30586: LD_INT 2
30588: PUSH
30589: LD_INT 1
30591: PUSH
30592: EMPTY
30593: LIST
30594: LIST
30595: PUSH
30596: LD_INT 2
30598: PUSH
30599: LD_INT 2
30601: PUSH
30602: EMPTY
30603: LIST
30604: LIST
30605: PUSH
30606: LD_INT 1
30608: PUSH
30609: LD_INT 2
30611: PUSH
30612: EMPTY
30613: LIST
30614: LIST
30615: PUSH
30616: LD_INT 2
30618: NEG
30619: PUSH
30620: LD_INT 1
30622: NEG
30623: PUSH
30624: EMPTY
30625: LIST
30626: LIST
30627: PUSH
30628: LD_INT 2
30630: NEG
30631: PUSH
30632: LD_INT 2
30634: NEG
30635: PUSH
30636: EMPTY
30637: LIST
30638: LIST
30639: PUSH
30640: LD_INT 2
30642: NEG
30643: PUSH
30644: LD_INT 3
30646: NEG
30647: PUSH
30648: EMPTY
30649: LIST
30650: LIST
30651: PUSH
30652: LD_INT 3
30654: NEG
30655: PUSH
30656: LD_INT 2
30658: NEG
30659: PUSH
30660: EMPTY
30661: LIST
30662: LIST
30663: PUSH
30664: LD_INT 3
30666: NEG
30667: PUSH
30668: LD_INT 3
30670: NEG
30671: PUSH
30672: EMPTY
30673: LIST
30674: LIST
30675: PUSH
30676: EMPTY
30677: LIST
30678: LIST
30679: LIST
30680: LIST
30681: LIST
30682: LIST
30683: LIST
30684: LIST
30685: LIST
30686: LIST
30687: LIST
30688: LIST
30689: LIST
30690: LIST
30691: LIST
30692: LIST
30693: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30694: LD_ADDR_VAR 0 14
30698: PUSH
30699: LD_INT 0
30701: PUSH
30702: LD_INT 0
30704: PUSH
30705: EMPTY
30706: LIST
30707: LIST
30708: PUSH
30709: LD_INT 0
30711: PUSH
30712: LD_INT 1
30714: NEG
30715: PUSH
30716: EMPTY
30717: LIST
30718: LIST
30719: PUSH
30720: LD_INT 1
30722: PUSH
30723: LD_INT 0
30725: PUSH
30726: EMPTY
30727: LIST
30728: LIST
30729: PUSH
30730: LD_INT 1
30732: PUSH
30733: LD_INT 1
30735: PUSH
30736: EMPTY
30737: LIST
30738: LIST
30739: PUSH
30740: LD_INT 0
30742: PUSH
30743: LD_INT 1
30745: PUSH
30746: EMPTY
30747: LIST
30748: LIST
30749: PUSH
30750: LD_INT 1
30752: NEG
30753: PUSH
30754: LD_INT 0
30756: PUSH
30757: EMPTY
30758: LIST
30759: LIST
30760: PUSH
30761: LD_INT 1
30763: NEG
30764: PUSH
30765: LD_INT 1
30767: NEG
30768: PUSH
30769: EMPTY
30770: LIST
30771: LIST
30772: PUSH
30773: LD_INT 1
30775: NEG
30776: PUSH
30777: LD_INT 2
30779: NEG
30780: PUSH
30781: EMPTY
30782: LIST
30783: LIST
30784: PUSH
30785: LD_INT 0
30787: PUSH
30788: LD_INT 2
30790: NEG
30791: PUSH
30792: EMPTY
30793: LIST
30794: LIST
30795: PUSH
30796: LD_INT 1
30798: PUSH
30799: LD_INT 1
30801: NEG
30802: PUSH
30803: EMPTY
30804: LIST
30805: LIST
30806: PUSH
30807: LD_INT 1
30809: PUSH
30810: LD_INT 2
30812: PUSH
30813: EMPTY
30814: LIST
30815: LIST
30816: PUSH
30817: LD_INT 0
30819: PUSH
30820: LD_INT 2
30822: PUSH
30823: EMPTY
30824: LIST
30825: LIST
30826: PUSH
30827: LD_INT 1
30829: NEG
30830: PUSH
30831: LD_INT 1
30833: PUSH
30834: EMPTY
30835: LIST
30836: LIST
30837: PUSH
30838: LD_INT 1
30840: NEG
30841: PUSH
30842: LD_INT 3
30844: NEG
30845: PUSH
30846: EMPTY
30847: LIST
30848: LIST
30849: PUSH
30850: LD_INT 0
30852: PUSH
30853: LD_INT 3
30855: NEG
30856: PUSH
30857: EMPTY
30858: LIST
30859: LIST
30860: PUSH
30861: LD_INT 1
30863: PUSH
30864: LD_INT 2
30866: NEG
30867: PUSH
30868: EMPTY
30869: LIST
30870: LIST
30871: PUSH
30872: EMPTY
30873: LIST
30874: LIST
30875: LIST
30876: LIST
30877: LIST
30878: LIST
30879: LIST
30880: LIST
30881: LIST
30882: LIST
30883: LIST
30884: LIST
30885: LIST
30886: LIST
30887: LIST
30888: LIST
30889: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30890: LD_ADDR_VAR 0 15
30894: PUSH
30895: LD_INT 0
30897: PUSH
30898: LD_INT 0
30900: PUSH
30901: EMPTY
30902: LIST
30903: LIST
30904: PUSH
30905: LD_INT 0
30907: PUSH
30908: LD_INT 1
30910: NEG
30911: PUSH
30912: EMPTY
30913: LIST
30914: LIST
30915: PUSH
30916: LD_INT 1
30918: PUSH
30919: LD_INT 0
30921: PUSH
30922: EMPTY
30923: LIST
30924: LIST
30925: PUSH
30926: LD_INT 1
30928: PUSH
30929: LD_INT 1
30931: PUSH
30932: EMPTY
30933: LIST
30934: LIST
30935: PUSH
30936: LD_INT 0
30938: PUSH
30939: LD_INT 1
30941: PUSH
30942: EMPTY
30943: LIST
30944: LIST
30945: PUSH
30946: LD_INT 1
30948: NEG
30949: PUSH
30950: LD_INT 0
30952: PUSH
30953: EMPTY
30954: LIST
30955: LIST
30956: PUSH
30957: LD_INT 1
30959: NEG
30960: PUSH
30961: LD_INT 1
30963: NEG
30964: PUSH
30965: EMPTY
30966: LIST
30967: LIST
30968: PUSH
30969: LD_INT 1
30971: PUSH
30972: LD_INT 1
30974: NEG
30975: PUSH
30976: EMPTY
30977: LIST
30978: LIST
30979: PUSH
30980: LD_INT 2
30982: PUSH
30983: LD_INT 0
30985: PUSH
30986: EMPTY
30987: LIST
30988: LIST
30989: PUSH
30990: LD_INT 2
30992: PUSH
30993: LD_INT 1
30995: PUSH
30996: EMPTY
30997: LIST
30998: LIST
30999: PUSH
31000: LD_INT 1
31002: NEG
31003: PUSH
31004: LD_INT 1
31006: PUSH
31007: EMPTY
31008: LIST
31009: LIST
31010: PUSH
31011: LD_INT 2
31013: NEG
31014: PUSH
31015: LD_INT 0
31017: PUSH
31018: EMPTY
31019: LIST
31020: LIST
31021: PUSH
31022: LD_INT 2
31024: NEG
31025: PUSH
31026: LD_INT 1
31028: NEG
31029: PUSH
31030: EMPTY
31031: LIST
31032: LIST
31033: PUSH
31034: LD_INT 2
31036: PUSH
31037: LD_INT 1
31039: NEG
31040: PUSH
31041: EMPTY
31042: LIST
31043: LIST
31044: PUSH
31045: LD_INT 3
31047: PUSH
31048: LD_INT 0
31050: PUSH
31051: EMPTY
31052: LIST
31053: LIST
31054: PUSH
31055: LD_INT 3
31057: PUSH
31058: LD_INT 1
31060: PUSH
31061: EMPTY
31062: LIST
31063: LIST
31064: PUSH
31065: EMPTY
31066: LIST
31067: LIST
31068: LIST
31069: LIST
31070: LIST
31071: LIST
31072: LIST
31073: LIST
31074: LIST
31075: LIST
31076: LIST
31077: LIST
31078: LIST
31079: LIST
31080: LIST
31081: LIST
31082: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31083: LD_ADDR_VAR 0 16
31087: PUSH
31088: LD_INT 0
31090: PUSH
31091: LD_INT 0
31093: PUSH
31094: EMPTY
31095: LIST
31096: LIST
31097: PUSH
31098: LD_INT 0
31100: PUSH
31101: LD_INT 1
31103: NEG
31104: PUSH
31105: EMPTY
31106: LIST
31107: LIST
31108: PUSH
31109: LD_INT 1
31111: PUSH
31112: LD_INT 0
31114: PUSH
31115: EMPTY
31116: LIST
31117: LIST
31118: PUSH
31119: LD_INT 1
31121: PUSH
31122: LD_INT 1
31124: PUSH
31125: EMPTY
31126: LIST
31127: LIST
31128: PUSH
31129: LD_INT 0
31131: PUSH
31132: LD_INT 1
31134: PUSH
31135: EMPTY
31136: LIST
31137: LIST
31138: PUSH
31139: LD_INT 1
31141: NEG
31142: PUSH
31143: LD_INT 0
31145: PUSH
31146: EMPTY
31147: LIST
31148: LIST
31149: PUSH
31150: LD_INT 1
31152: NEG
31153: PUSH
31154: LD_INT 1
31156: NEG
31157: PUSH
31158: EMPTY
31159: LIST
31160: LIST
31161: PUSH
31162: LD_INT 1
31164: NEG
31165: PUSH
31166: LD_INT 2
31168: NEG
31169: PUSH
31170: EMPTY
31171: LIST
31172: LIST
31173: PUSH
31174: LD_INT 2
31176: PUSH
31177: LD_INT 1
31179: PUSH
31180: EMPTY
31181: LIST
31182: LIST
31183: PUSH
31184: LD_INT 2
31186: PUSH
31187: LD_INT 2
31189: PUSH
31190: EMPTY
31191: LIST
31192: LIST
31193: PUSH
31194: LD_INT 1
31196: PUSH
31197: LD_INT 2
31199: PUSH
31200: EMPTY
31201: LIST
31202: LIST
31203: PUSH
31204: LD_INT 2
31206: NEG
31207: PUSH
31208: LD_INT 1
31210: NEG
31211: PUSH
31212: EMPTY
31213: LIST
31214: LIST
31215: PUSH
31216: LD_INT 2
31218: NEG
31219: PUSH
31220: LD_INT 2
31222: NEG
31223: PUSH
31224: EMPTY
31225: LIST
31226: LIST
31227: PUSH
31228: LD_INT 3
31230: PUSH
31231: LD_INT 2
31233: PUSH
31234: EMPTY
31235: LIST
31236: LIST
31237: PUSH
31238: LD_INT 3
31240: PUSH
31241: LD_INT 3
31243: PUSH
31244: EMPTY
31245: LIST
31246: LIST
31247: PUSH
31248: LD_INT 2
31250: PUSH
31251: LD_INT 3
31253: PUSH
31254: EMPTY
31255: LIST
31256: LIST
31257: PUSH
31258: EMPTY
31259: LIST
31260: LIST
31261: LIST
31262: LIST
31263: LIST
31264: LIST
31265: LIST
31266: LIST
31267: LIST
31268: LIST
31269: LIST
31270: LIST
31271: LIST
31272: LIST
31273: LIST
31274: LIST
31275: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31276: LD_ADDR_VAR 0 17
31280: PUSH
31281: LD_INT 0
31283: PUSH
31284: LD_INT 0
31286: PUSH
31287: EMPTY
31288: LIST
31289: LIST
31290: PUSH
31291: LD_INT 0
31293: PUSH
31294: LD_INT 1
31296: NEG
31297: PUSH
31298: EMPTY
31299: LIST
31300: LIST
31301: PUSH
31302: LD_INT 1
31304: PUSH
31305: LD_INT 0
31307: PUSH
31308: EMPTY
31309: LIST
31310: LIST
31311: PUSH
31312: LD_INT 1
31314: PUSH
31315: LD_INT 1
31317: PUSH
31318: EMPTY
31319: LIST
31320: LIST
31321: PUSH
31322: LD_INT 0
31324: PUSH
31325: LD_INT 1
31327: PUSH
31328: EMPTY
31329: LIST
31330: LIST
31331: PUSH
31332: LD_INT 1
31334: NEG
31335: PUSH
31336: LD_INT 0
31338: PUSH
31339: EMPTY
31340: LIST
31341: LIST
31342: PUSH
31343: LD_INT 1
31345: NEG
31346: PUSH
31347: LD_INT 1
31349: NEG
31350: PUSH
31351: EMPTY
31352: LIST
31353: LIST
31354: PUSH
31355: LD_INT 1
31357: NEG
31358: PUSH
31359: LD_INT 2
31361: NEG
31362: PUSH
31363: EMPTY
31364: LIST
31365: LIST
31366: PUSH
31367: LD_INT 0
31369: PUSH
31370: LD_INT 2
31372: NEG
31373: PUSH
31374: EMPTY
31375: LIST
31376: LIST
31377: PUSH
31378: LD_INT 1
31380: PUSH
31381: LD_INT 1
31383: NEG
31384: PUSH
31385: EMPTY
31386: LIST
31387: LIST
31388: PUSH
31389: LD_INT 2
31391: PUSH
31392: LD_INT 0
31394: PUSH
31395: EMPTY
31396: LIST
31397: LIST
31398: PUSH
31399: LD_INT 2
31401: PUSH
31402: LD_INT 1
31404: PUSH
31405: EMPTY
31406: LIST
31407: LIST
31408: PUSH
31409: LD_INT 2
31411: PUSH
31412: LD_INT 2
31414: PUSH
31415: EMPTY
31416: LIST
31417: LIST
31418: PUSH
31419: LD_INT 1
31421: PUSH
31422: LD_INT 2
31424: PUSH
31425: EMPTY
31426: LIST
31427: LIST
31428: PUSH
31429: LD_INT 0
31431: PUSH
31432: LD_INT 2
31434: PUSH
31435: EMPTY
31436: LIST
31437: LIST
31438: PUSH
31439: LD_INT 1
31441: NEG
31442: PUSH
31443: LD_INT 1
31445: PUSH
31446: EMPTY
31447: LIST
31448: LIST
31449: PUSH
31450: LD_INT 2
31452: NEG
31453: PUSH
31454: LD_INT 0
31456: PUSH
31457: EMPTY
31458: LIST
31459: LIST
31460: PUSH
31461: LD_INT 2
31463: NEG
31464: PUSH
31465: LD_INT 1
31467: NEG
31468: PUSH
31469: EMPTY
31470: LIST
31471: LIST
31472: PUSH
31473: LD_INT 2
31475: NEG
31476: PUSH
31477: LD_INT 2
31479: NEG
31480: PUSH
31481: EMPTY
31482: LIST
31483: LIST
31484: PUSH
31485: EMPTY
31486: LIST
31487: LIST
31488: LIST
31489: LIST
31490: LIST
31491: LIST
31492: LIST
31493: LIST
31494: LIST
31495: LIST
31496: LIST
31497: LIST
31498: LIST
31499: LIST
31500: LIST
31501: LIST
31502: LIST
31503: LIST
31504: LIST
31505: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31506: LD_ADDR_VAR 0 18
31510: PUSH
31511: LD_INT 0
31513: PUSH
31514: LD_INT 0
31516: PUSH
31517: EMPTY
31518: LIST
31519: LIST
31520: PUSH
31521: LD_INT 0
31523: PUSH
31524: LD_INT 1
31526: NEG
31527: PUSH
31528: EMPTY
31529: LIST
31530: LIST
31531: PUSH
31532: LD_INT 1
31534: PUSH
31535: LD_INT 0
31537: PUSH
31538: EMPTY
31539: LIST
31540: LIST
31541: PUSH
31542: LD_INT 1
31544: PUSH
31545: LD_INT 1
31547: PUSH
31548: EMPTY
31549: LIST
31550: LIST
31551: PUSH
31552: LD_INT 0
31554: PUSH
31555: LD_INT 1
31557: PUSH
31558: EMPTY
31559: LIST
31560: LIST
31561: PUSH
31562: LD_INT 1
31564: NEG
31565: PUSH
31566: LD_INT 0
31568: PUSH
31569: EMPTY
31570: LIST
31571: LIST
31572: PUSH
31573: LD_INT 1
31575: NEG
31576: PUSH
31577: LD_INT 1
31579: NEG
31580: PUSH
31581: EMPTY
31582: LIST
31583: LIST
31584: PUSH
31585: LD_INT 1
31587: NEG
31588: PUSH
31589: LD_INT 2
31591: NEG
31592: PUSH
31593: EMPTY
31594: LIST
31595: LIST
31596: PUSH
31597: LD_INT 0
31599: PUSH
31600: LD_INT 2
31602: NEG
31603: PUSH
31604: EMPTY
31605: LIST
31606: LIST
31607: PUSH
31608: LD_INT 1
31610: PUSH
31611: LD_INT 1
31613: NEG
31614: PUSH
31615: EMPTY
31616: LIST
31617: LIST
31618: PUSH
31619: LD_INT 2
31621: PUSH
31622: LD_INT 0
31624: PUSH
31625: EMPTY
31626: LIST
31627: LIST
31628: PUSH
31629: LD_INT 2
31631: PUSH
31632: LD_INT 1
31634: PUSH
31635: EMPTY
31636: LIST
31637: LIST
31638: PUSH
31639: LD_INT 2
31641: PUSH
31642: LD_INT 2
31644: PUSH
31645: EMPTY
31646: LIST
31647: LIST
31648: PUSH
31649: LD_INT 1
31651: PUSH
31652: LD_INT 2
31654: PUSH
31655: EMPTY
31656: LIST
31657: LIST
31658: PUSH
31659: LD_INT 0
31661: PUSH
31662: LD_INT 2
31664: PUSH
31665: EMPTY
31666: LIST
31667: LIST
31668: PUSH
31669: LD_INT 1
31671: NEG
31672: PUSH
31673: LD_INT 1
31675: PUSH
31676: EMPTY
31677: LIST
31678: LIST
31679: PUSH
31680: LD_INT 2
31682: NEG
31683: PUSH
31684: LD_INT 0
31686: PUSH
31687: EMPTY
31688: LIST
31689: LIST
31690: PUSH
31691: LD_INT 2
31693: NEG
31694: PUSH
31695: LD_INT 1
31697: NEG
31698: PUSH
31699: EMPTY
31700: LIST
31701: LIST
31702: PUSH
31703: LD_INT 2
31705: NEG
31706: PUSH
31707: LD_INT 2
31709: NEG
31710: PUSH
31711: EMPTY
31712: LIST
31713: LIST
31714: PUSH
31715: EMPTY
31716: LIST
31717: LIST
31718: LIST
31719: LIST
31720: LIST
31721: LIST
31722: LIST
31723: LIST
31724: LIST
31725: LIST
31726: LIST
31727: LIST
31728: LIST
31729: LIST
31730: LIST
31731: LIST
31732: LIST
31733: LIST
31734: LIST
31735: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31736: LD_ADDR_VAR 0 19
31740: PUSH
31741: LD_INT 0
31743: PUSH
31744: LD_INT 0
31746: PUSH
31747: EMPTY
31748: LIST
31749: LIST
31750: PUSH
31751: LD_INT 0
31753: PUSH
31754: LD_INT 1
31756: NEG
31757: PUSH
31758: EMPTY
31759: LIST
31760: LIST
31761: PUSH
31762: LD_INT 1
31764: PUSH
31765: LD_INT 0
31767: PUSH
31768: EMPTY
31769: LIST
31770: LIST
31771: PUSH
31772: LD_INT 1
31774: PUSH
31775: LD_INT 1
31777: PUSH
31778: EMPTY
31779: LIST
31780: LIST
31781: PUSH
31782: LD_INT 0
31784: PUSH
31785: LD_INT 1
31787: PUSH
31788: EMPTY
31789: LIST
31790: LIST
31791: PUSH
31792: LD_INT 1
31794: NEG
31795: PUSH
31796: LD_INT 0
31798: PUSH
31799: EMPTY
31800: LIST
31801: LIST
31802: PUSH
31803: LD_INT 1
31805: NEG
31806: PUSH
31807: LD_INT 1
31809: NEG
31810: PUSH
31811: EMPTY
31812: LIST
31813: LIST
31814: PUSH
31815: LD_INT 1
31817: NEG
31818: PUSH
31819: LD_INT 2
31821: NEG
31822: PUSH
31823: EMPTY
31824: LIST
31825: LIST
31826: PUSH
31827: LD_INT 0
31829: PUSH
31830: LD_INT 2
31832: NEG
31833: PUSH
31834: EMPTY
31835: LIST
31836: LIST
31837: PUSH
31838: LD_INT 1
31840: PUSH
31841: LD_INT 1
31843: NEG
31844: PUSH
31845: EMPTY
31846: LIST
31847: LIST
31848: PUSH
31849: LD_INT 2
31851: PUSH
31852: LD_INT 0
31854: PUSH
31855: EMPTY
31856: LIST
31857: LIST
31858: PUSH
31859: LD_INT 2
31861: PUSH
31862: LD_INT 1
31864: PUSH
31865: EMPTY
31866: LIST
31867: LIST
31868: PUSH
31869: LD_INT 2
31871: PUSH
31872: LD_INT 2
31874: PUSH
31875: EMPTY
31876: LIST
31877: LIST
31878: PUSH
31879: LD_INT 1
31881: PUSH
31882: LD_INT 2
31884: PUSH
31885: EMPTY
31886: LIST
31887: LIST
31888: PUSH
31889: LD_INT 0
31891: PUSH
31892: LD_INT 2
31894: PUSH
31895: EMPTY
31896: LIST
31897: LIST
31898: PUSH
31899: LD_INT 1
31901: NEG
31902: PUSH
31903: LD_INT 1
31905: PUSH
31906: EMPTY
31907: LIST
31908: LIST
31909: PUSH
31910: LD_INT 2
31912: NEG
31913: PUSH
31914: LD_INT 0
31916: PUSH
31917: EMPTY
31918: LIST
31919: LIST
31920: PUSH
31921: LD_INT 2
31923: NEG
31924: PUSH
31925: LD_INT 1
31927: NEG
31928: PUSH
31929: EMPTY
31930: LIST
31931: LIST
31932: PUSH
31933: LD_INT 2
31935: NEG
31936: PUSH
31937: LD_INT 2
31939: NEG
31940: PUSH
31941: EMPTY
31942: LIST
31943: LIST
31944: PUSH
31945: EMPTY
31946: LIST
31947: LIST
31948: LIST
31949: LIST
31950: LIST
31951: LIST
31952: LIST
31953: LIST
31954: LIST
31955: LIST
31956: LIST
31957: LIST
31958: LIST
31959: LIST
31960: LIST
31961: LIST
31962: LIST
31963: LIST
31964: LIST
31965: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31966: LD_ADDR_VAR 0 20
31970: PUSH
31971: LD_INT 0
31973: PUSH
31974: LD_INT 0
31976: PUSH
31977: EMPTY
31978: LIST
31979: LIST
31980: PUSH
31981: LD_INT 0
31983: PUSH
31984: LD_INT 1
31986: NEG
31987: PUSH
31988: EMPTY
31989: LIST
31990: LIST
31991: PUSH
31992: LD_INT 1
31994: PUSH
31995: LD_INT 0
31997: PUSH
31998: EMPTY
31999: LIST
32000: LIST
32001: PUSH
32002: LD_INT 1
32004: PUSH
32005: LD_INT 1
32007: PUSH
32008: EMPTY
32009: LIST
32010: LIST
32011: PUSH
32012: LD_INT 0
32014: PUSH
32015: LD_INT 1
32017: PUSH
32018: EMPTY
32019: LIST
32020: LIST
32021: PUSH
32022: LD_INT 1
32024: NEG
32025: PUSH
32026: LD_INT 0
32028: PUSH
32029: EMPTY
32030: LIST
32031: LIST
32032: PUSH
32033: LD_INT 1
32035: NEG
32036: PUSH
32037: LD_INT 1
32039: NEG
32040: PUSH
32041: EMPTY
32042: LIST
32043: LIST
32044: PUSH
32045: LD_INT 1
32047: NEG
32048: PUSH
32049: LD_INT 2
32051: NEG
32052: PUSH
32053: EMPTY
32054: LIST
32055: LIST
32056: PUSH
32057: LD_INT 0
32059: PUSH
32060: LD_INT 2
32062: NEG
32063: PUSH
32064: EMPTY
32065: LIST
32066: LIST
32067: PUSH
32068: LD_INT 1
32070: PUSH
32071: LD_INT 1
32073: NEG
32074: PUSH
32075: EMPTY
32076: LIST
32077: LIST
32078: PUSH
32079: LD_INT 2
32081: PUSH
32082: LD_INT 0
32084: PUSH
32085: EMPTY
32086: LIST
32087: LIST
32088: PUSH
32089: LD_INT 2
32091: PUSH
32092: LD_INT 1
32094: PUSH
32095: EMPTY
32096: LIST
32097: LIST
32098: PUSH
32099: LD_INT 2
32101: PUSH
32102: LD_INT 2
32104: PUSH
32105: EMPTY
32106: LIST
32107: LIST
32108: PUSH
32109: LD_INT 1
32111: PUSH
32112: LD_INT 2
32114: PUSH
32115: EMPTY
32116: LIST
32117: LIST
32118: PUSH
32119: LD_INT 0
32121: PUSH
32122: LD_INT 2
32124: PUSH
32125: EMPTY
32126: LIST
32127: LIST
32128: PUSH
32129: LD_INT 1
32131: NEG
32132: PUSH
32133: LD_INT 1
32135: PUSH
32136: EMPTY
32137: LIST
32138: LIST
32139: PUSH
32140: LD_INT 2
32142: NEG
32143: PUSH
32144: LD_INT 0
32146: PUSH
32147: EMPTY
32148: LIST
32149: LIST
32150: PUSH
32151: LD_INT 2
32153: NEG
32154: PUSH
32155: LD_INT 1
32157: NEG
32158: PUSH
32159: EMPTY
32160: LIST
32161: LIST
32162: PUSH
32163: LD_INT 2
32165: NEG
32166: PUSH
32167: LD_INT 2
32169: NEG
32170: PUSH
32171: EMPTY
32172: LIST
32173: LIST
32174: PUSH
32175: EMPTY
32176: LIST
32177: LIST
32178: LIST
32179: LIST
32180: LIST
32181: LIST
32182: LIST
32183: LIST
32184: LIST
32185: LIST
32186: LIST
32187: LIST
32188: LIST
32189: LIST
32190: LIST
32191: LIST
32192: LIST
32193: LIST
32194: LIST
32195: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32196: LD_ADDR_VAR 0 21
32200: PUSH
32201: LD_INT 0
32203: PUSH
32204: LD_INT 0
32206: PUSH
32207: EMPTY
32208: LIST
32209: LIST
32210: PUSH
32211: LD_INT 0
32213: PUSH
32214: LD_INT 1
32216: NEG
32217: PUSH
32218: EMPTY
32219: LIST
32220: LIST
32221: PUSH
32222: LD_INT 1
32224: PUSH
32225: LD_INT 0
32227: PUSH
32228: EMPTY
32229: LIST
32230: LIST
32231: PUSH
32232: LD_INT 1
32234: PUSH
32235: LD_INT 1
32237: PUSH
32238: EMPTY
32239: LIST
32240: LIST
32241: PUSH
32242: LD_INT 0
32244: PUSH
32245: LD_INT 1
32247: PUSH
32248: EMPTY
32249: LIST
32250: LIST
32251: PUSH
32252: LD_INT 1
32254: NEG
32255: PUSH
32256: LD_INT 0
32258: PUSH
32259: EMPTY
32260: LIST
32261: LIST
32262: PUSH
32263: LD_INT 1
32265: NEG
32266: PUSH
32267: LD_INT 1
32269: NEG
32270: PUSH
32271: EMPTY
32272: LIST
32273: LIST
32274: PUSH
32275: LD_INT 1
32277: NEG
32278: PUSH
32279: LD_INT 2
32281: NEG
32282: PUSH
32283: EMPTY
32284: LIST
32285: LIST
32286: PUSH
32287: LD_INT 0
32289: PUSH
32290: LD_INT 2
32292: NEG
32293: PUSH
32294: EMPTY
32295: LIST
32296: LIST
32297: PUSH
32298: LD_INT 1
32300: PUSH
32301: LD_INT 1
32303: NEG
32304: PUSH
32305: EMPTY
32306: LIST
32307: LIST
32308: PUSH
32309: LD_INT 2
32311: PUSH
32312: LD_INT 0
32314: PUSH
32315: EMPTY
32316: LIST
32317: LIST
32318: PUSH
32319: LD_INT 2
32321: PUSH
32322: LD_INT 1
32324: PUSH
32325: EMPTY
32326: LIST
32327: LIST
32328: PUSH
32329: LD_INT 2
32331: PUSH
32332: LD_INT 2
32334: PUSH
32335: EMPTY
32336: LIST
32337: LIST
32338: PUSH
32339: LD_INT 1
32341: PUSH
32342: LD_INT 2
32344: PUSH
32345: EMPTY
32346: LIST
32347: LIST
32348: PUSH
32349: LD_INT 0
32351: PUSH
32352: LD_INT 2
32354: PUSH
32355: EMPTY
32356: LIST
32357: LIST
32358: PUSH
32359: LD_INT 1
32361: NEG
32362: PUSH
32363: LD_INT 1
32365: PUSH
32366: EMPTY
32367: LIST
32368: LIST
32369: PUSH
32370: LD_INT 2
32372: NEG
32373: PUSH
32374: LD_INT 0
32376: PUSH
32377: EMPTY
32378: LIST
32379: LIST
32380: PUSH
32381: LD_INT 2
32383: NEG
32384: PUSH
32385: LD_INT 1
32387: NEG
32388: PUSH
32389: EMPTY
32390: LIST
32391: LIST
32392: PUSH
32393: LD_INT 2
32395: NEG
32396: PUSH
32397: LD_INT 2
32399: NEG
32400: PUSH
32401: EMPTY
32402: LIST
32403: LIST
32404: PUSH
32405: EMPTY
32406: LIST
32407: LIST
32408: LIST
32409: LIST
32410: LIST
32411: LIST
32412: LIST
32413: LIST
32414: LIST
32415: LIST
32416: LIST
32417: LIST
32418: LIST
32419: LIST
32420: LIST
32421: LIST
32422: LIST
32423: LIST
32424: LIST
32425: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32426: LD_ADDR_VAR 0 22
32430: PUSH
32431: LD_INT 0
32433: PUSH
32434: LD_INT 0
32436: PUSH
32437: EMPTY
32438: LIST
32439: LIST
32440: PUSH
32441: LD_INT 0
32443: PUSH
32444: LD_INT 1
32446: NEG
32447: PUSH
32448: EMPTY
32449: LIST
32450: LIST
32451: PUSH
32452: LD_INT 1
32454: PUSH
32455: LD_INT 0
32457: PUSH
32458: EMPTY
32459: LIST
32460: LIST
32461: PUSH
32462: LD_INT 1
32464: PUSH
32465: LD_INT 1
32467: PUSH
32468: EMPTY
32469: LIST
32470: LIST
32471: PUSH
32472: LD_INT 0
32474: PUSH
32475: LD_INT 1
32477: PUSH
32478: EMPTY
32479: LIST
32480: LIST
32481: PUSH
32482: LD_INT 1
32484: NEG
32485: PUSH
32486: LD_INT 0
32488: PUSH
32489: EMPTY
32490: LIST
32491: LIST
32492: PUSH
32493: LD_INT 1
32495: NEG
32496: PUSH
32497: LD_INT 1
32499: NEG
32500: PUSH
32501: EMPTY
32502: LIST
32503: LIST
32504: PUSH
32505: LD_INT 1
32507: NEG
32508: PUSH
32509: LD_INT 2
32511: NEG
32512: PUSH
32513: EMPTY
32514: LIST
32515: LIST
32516: PUSH
32517: LD_INT 0
32519: PUSH
32520: LD_INT 2
32522: NEG
32523: PUSH
32524: EMPTY
32525: LIST
32526: LIST
32527: PUSH
32528: LD_INT 1
32530: PUSH
32531: LD_INT 1
32533: NEG
32534: PUSH
32535: EMPTY
32536: LIST
32537: LIST
32538: PUSH
32539: LD_INT 2
32541: PUSH
32542: LD_INT 0
32544: PUSH
32545: EMPTY
32546: LIST
32547: LIST
32548: PUSH
32549: LD_INT 2
32551: PUSH
32552: LD_INT 1
32554: PUSH
32555: EMPTY
32556: LIST
32557: LIST
32558: PUSH
32559: LD_INT 2
32561: PUSH
32562: LD_INT 2
32564: PUSH
32565: EMPTY
32566: LIST
32567: LIST
32568: PUSH
32569: LD_INT 1
32571: PUSH
32572: LD_INT 2
32574: PUSH
32575: EMPTY
32576: LIST
32577: LIST
32578: PUSH
32579: LD_INT 0
32581: PUSH
32582: LD_INT 2
32584: PUSH
32585: EMPTY
32586: LIST
32587: LIST
32588: PUSH
32589: LD_INT 1
32591: NEG
32592: PUSH
32593: LD_INT 1
32595: PUSH
32596: EMPTY
32597: LIST
32598: LIST
32599: PUSH
32600: LD_INT 2
32602: NEG
32603: PUSH
32604: LD_INT 0
32606: PUSH
32607: EMPTY
32608: LIST
32609: LIST
32610: PUSH
32611: LD_INT 2
32613: NEG
32614: PUSH
32615: LD_INT 1
32617: NEG
32618: PUSH
32619: EMPTY
32620: LIST
32621: LIST
32622: PUSH
32623: LD_INT 2
32625: NEG
32626: PUSH
32627: LD_INT 2
32629: NEG
32630: PUSH
32631: EMPTY
32632: LIST
32633: LIST
32634: PUSH
32635: EMPTY
32636: LIST
32637: LIST
32638: LIST
32639: LIST
32640: LIST
32641: LIST
32642: LIST
32643: LIST
32644: LIST
32645: LIST
32646: LIST
32647: LIST
32648: LIST
32649: LIST
32650: LIST
32651: LIST
32652: LIST
32653: LIST
32654: LIST
32655: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
32656: LD_ADDR_VAR 0 23
32660: PUSH
32661: LD_INT 0
32663: PUSH
32664: LD_INT 0
32666: PUSH
32667: EMPTY
32668: LIST
32669: LIST
32670: PUSH
32671: LD_INT 0
32673: PUSH
32674: LD_INT 1
32676: NEG
32677: PUSH
32678: EMPTY
32679: LIST
32680: LIST
32681: PUSH
32682: LD_INT 1
32684: PUSH
32685: LD_INT 0
32687: PUSH
32688: EMPTY
32689: LIST
32690: LIST
32691: PUSH
32692: LD_INT 1
32694: PUSH
32695: LD_INT 1
32697: PUSH
32698: EMPTY
32699: LIST
32700: LIST
32701: PUSH
32702: LD_INT 0
32704: PUSH
32705: LD_INT 1
32707: PUSH
32708: EMPTY
32709: LIST
32710: LIST
32711: PUSH
32712: LD_INT 1
32714: NEG
32715: PUSH
32716: LD_INT 0
32718: PUSH
32719: EMPTY
32720: LIST
32721: LIST
32722: PUSH
32723: LD_INT 1
32725: NEG
32726: PUSH
32727: LD_INT 1
32729: NEG
32730: PUSH
32731: EMPTY
32732: LIST
32733: LIST
32734: PUSH
32735: LD_INT 1
32737: NEG
32738: PUSH
32739: LD_INT 2
32741: NEG
32742: PUSH
32743: EMPTY
32744: LIST
32745: LIST
32746: PUSH
32747: LD_INT 0
32749: PUSH
32750: LD_INT 2
32752: NEG
32753: PUSH
32754: EMPTY
32755: LIST
32756: LIST
32757: PUSH
32758: LD_INT 1
32760: PUSH
32761: LD_INT 1
32763: NEG
32764: PUSH
32765: EMPTY
32766: LIST
32767: LIST
32768: PUSH
32769: LD_INT 2
32771: PUSH
32772: LD_INT 0
32774: PUSH
32775: EMPTY
32776: LIST
32777: LIST
32778: PUSH
32779: LD_INT 2
32781: PUSH
32782: LD_INT 1
32784: PUSH
32785: EMPTY
32786: LIST
32787: LIST
32788: PUSH
32789: LD_INT 2
32791: PUSH
32792: LD_INT 2
32794: PUSH
32795: EMPTY
32796: LIST
32797: LIST
32798: PUSH
32799: LD_INT 1
32801: PUSH
32802: LD_INT 2
32804: PUSH
32805: EMPTY
32806: LIST
32807: LIST
32808: PUSH
32809: LD_INT 0
32811: PUSH
32812: LD_INT 2
32814: PUSH
32815: EMPTY
32816: LIST
32817: LIST
32818: PUSH
32819: LD_INT 1
32821: NEG
32822: PUSH
32823: LD_INT 1
32825: PUSH
32826: EMPTY
32827: LIST
32828: LIST
32829: PUSH
32830: LD_INT 2
32832: NEG
32833: PUSH
32834: LD_INT 0
32836: PUSH
32837: EMPTY
32838: LIST
32839: LIST
32840: PUSH
32841: LD_INT 2
32843: NEG
32844: PUSH
32845: LD_INT 1
32847: NEG
32848: PUSH
32849: EMPTY
32850: LIST
32851: LIST
32852: PUSH
32853: LD_INT 2
32855: NEG
32856: PUSH
32857: LD_INT 2
32859: NEG
32860: PUSH
32861: EMPTY
32862: LIST
32863: LIST
32864: PUSH
32865: LD_INT 2
32867: NEG
32868: PUSH
32869: LD_INT 3
32871: NEG
32872: PUSH
32873: EMPTY
32874: LIST
32875: LIST
32876: PUSH
32877: LD_INT 1
32879: NEG
32880: PUSH
32881: LD_INT 3
32883: NEG
32884: PUSH
32885: EMPTY
32886: LIST
32887: LIST
32888: PUSH
32889: LD_INT 1
32891: PUSH
32892: LD_INT 2
32894: NEG
32895: PUSH
32896: EMPTY
32897: LIST
32898: LIST
32899: PUSH
32900: LD_INT 2
32902: PUSH
32903: LD_INT 1
32905: NEG
32906: PUSH
32907: EMPTY
32908: LIST
32909: LIST
32910: PUSH
32911: EMPTY
32912: LIST
32913: LIST
32914: LIST
32915: LIST
32916: LIST
32917: LIST
32918: LIST
32919: LIST
32920: LIST
32921: LIST
32922: LIST
32923: LIST
32924: LIST
32925: LIST
32926: LIST
32927: LIST
32928: LIST
32929: LIST
32930: LIST
32931: LIST
32932: LIST
32933: LIST
32934: LIST
32935: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
32936: LD_ADDR_VAR 0 24
32940: PUSH
32941: LD_INT 0
32943: PUSH
32944: LD_INT 0
32946: PUSH
32947: EMPTY
32948: LIST
32949: LIST
32950: PUSH
32951: LD_INT 0
32953: PUSH
32954: LD_INT 1
32956: NEG
32957: PUSH
32958: EMPTY
32959: LIST
32960: LIST
32961: PUSH
32962: LD_INT 1
32964: PUSH
32965: LD_INT 0
32967: PUSH
32968: EMPTY
32969: LIST
32970: LIST
32971: PUSH
32972: LD_INT 1
32974: PUSH
32975: LD_INT 1
32977: PUSH
32978: EMPTY
32979: LIST
32980: LIST
32981: PUSH
32982: LD_INT 0
32984: PUSH
32985: LD_INT 1
32987: PUSH
32988: EMPTY
32989: LIST
32990: LIST
32991: PUSH
32992: LD_INT 1
32994: NEG
32995: PUSH
32996: LD_INT 0
32998: PUSH
32999: EMPTY
33000: LIST
33001: LIST
33002: PUSH
33003: LD_INT 1
33005: NEG
33006: PUSH
33007: LD_INT 1
33009: NEG
33010: PUSH
33011: EMPTY
33012: LIST
33013: LIST
33014: PUSH
33015: LD_INT 1
33017: NEG
33018: PUSH
33019: LD_INT 2
33021: NEG
33022: PUSH
33023: EMPTY
33024: LIST
33025: LIST
33026: PUSH
33027: LD_INT 0
33029: PUSH
33030: LD_INT 2
33032: NEG
33033: PUSH
33034: EMPTY
33035: LIST
33036: LIST
33037: PUSH
33038: LD_INT 1
33040: PUSH
33041: LD_INT 1
33043: NEG
33044: PUSH
33045: EMPTY
33046: LIST
33047: LIST
33048: PUSH
33049: LD_INT 2
33051: PUSH
33052: LD_INT 0
33054: PUSH
33055: EMPTY
33056: LIST
33057: LIST
33058: PUSH
33059: LD_INT 2
33061: PUSH
33062: LD_INT 1
33064: PUSH
33065: EMPTY
33066: LIST
33067: LIST
33068: PUSH
33069: LD_INT 2
33071: PUSH
33072: LD_INT 2
33074: PUSH
33075: EMPTY
33076: LIST
33077: LIST
33078: PUSH
33079: LD_INT 1
33081: PUSH
33082: LD_INT 2
33084: PUSH
33085: EMPTY
33086: LIST
33087: LIST
33088: PUSH
33089: LD_INT 0
33091: PUSH
33092: LD_INT 2
33094: PUSH
33095: EMPTY
33096: LIST
33097: LIST
33098: PUSH
33099: LD_INT 1
33101: NEG
33102: PUSH
33103: LD_INT 1
33105: PUSH
33106: EMPTY
33107: LIST
33108: LIST
33109: PUSH
33110: LD_INT 2
33112: NEG
33113: PUSH
33114: LD_INT 0
33116: PUSH
33117: EMPTY
33118: LIST
33119: LIST
33120: PUSH
33121: LD_INT 2
33123: NEG
33124: PUSH
33125: LD_INT 1
33127: NEG
33128: PUSH
33129: EMPTY
33130: LIST
33131: LIST
33132: PUSH
33133: LD_INT 2
33135: NEG
33136: PUSH
33137: LD_INT 2
33139: NEG
33140: PUSH
33141: EMPTY
33142: LIST
33143: LIST
33144: PUSH
33145: LD_INT 1
33147: PUSH
33148: LD_INT 2
33150: NEG
33151: PUSH
33152: EMPTY
33153: LIST
33154: LIST
33155: PUSH
33156: LD_INT 2
33158: PUSH
33159: LD_INT 1
33161: NEG
33162: PUSH
33163: EMPTY
33164: LIST
33165: LIST
33166: PUSH
33167: LD_INT 3
33169: PUSH
33170: LD_INT 1
33172: PUSH
33173: EMPTY
33174: LIST
33175: LIST
33176: PUSH
33177: LD_INT 3
33179: PUSH
33180: LD_INT 2
33182: PUSH
33183: EMPTY
33184: LIST
33185: LIST
33186: PUSH
33187: EMPTY
33188: LIST
33189: LIST
33190: LIST
33191: LIST
33192: LIST
33193: LIST
33194: LIST
33195: LIST
33196: LIST
33197: LIST
33198: LIST
33199: LIST
33200: LIST
33201: LIST
33202: LIST
33203: LIST
33204: LIST
33205: LIST
33206: LIST
33207: LIST
33208: LIST
33209: LIST
33210: LIST
33211: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
33212: LD_ADDR_VAR 0 25
33216: PUSH
33217: LD_INT 0
33219: PUSH
33220: LD_INT 0
33222: PUSH
33223: EMPTY
33224: LIST
33225: LIST
33226: PUSH
33227: LD_INT 0
33229: PUSH
33230: LD_INT 1
33232: NEG
33233: PUSH
33234: EMPTY
33235: LIST
33236: LIST
33237: PUSH
33238: LD_INT 1
33240: PUSH
33241: LD_INT 0
33243: PUSH
33244: EMPTY
33245: LIST
33246: LIST
33247: PUSH
33248: LD_INT 1
33250: PUSH
33251: LD_INT 1
33253: PUSH
33254: EMPTY
33255: LIST
33256: LIST
33257: PUSH
33258: LD_INT 0
33260: PUSH
33261: LD_INT 1
33263: PUSH
33264: EMPTY
33265: LIST
33266: LIST
33267: PUSH
33268: LD_INT 1
33270: NEG
33271: PUSH
33272: LD_INT 0
33274: PUSH
33275: EMPTY
33276: LIST
33277: LIST
33278: PUSH
33279: LD_INT 1
33281: NEG
33282: PUSH
33283: LD_INT 1
33285: NEG
33286: PUSH
33287: EMPTY
33288: LIST
33289: LIST
33290: PUSH
33291: LD_INT 1
33293: NEG
33294: PUSH
33295: LD_INT 2
33297: NEG
33298: PUSH
33299: EMPTY
33300: LIST
33301: LIST
33302: PUSH
33303: LD_INT 0
33305: PUSH
33306: LD_INT 2
33308: NEG
33309: PUSH
33310: EMPTY
33311: LIST
33312: LIST
33313: PUSH
33314: LD_INT 1
33316: PUSH
33317: LD_INT 1
33319: NEG
33320: PUSH
33321: EMPTY
33322: LIST
33323: LIST
33324: PUSH
33325: LD_INT 2
33327: PUSH
33328: LD_INT 0
33330: PUSH
33331: EMPTY
33332: LIST
33333: LIST
33334: PUSH
33335: LD_INT 2
33337: PUSH
33338: LD_INT 1
33340: PUSH
33341: EMPTY
33342: LIST
33343: LIST
33344: PUSH
33345: LD_INT 2
33347: PUSH
33348: LD_INT 2
33350: PUSH
33351: EMPTY
33352: LIST
33353: LIST
33354: PUSH
33355: LD_INT 1
33357: PUSH
33358: LD_INT 2
33360: PUSH
33361: EMPTY
33362: LIST
33363: LIST
33364: PUSH
33365: LD_INT 0
33367: PUSH
33368: LD_INT 2
33370: PUSH
33371: EMPTY
33372: LIST
33373: LIST
33374: PUSH
33375: LD_INT 1
33377: NEG
33378: PUSH
33379: LD_INT 1
33381: PUSH
33382: EMPTY
33383: LIST
33384: LIST
33385: PUSH
33386: LD_INT 2
33388: NEG
33389: PUSH
33390: LD_INT 0
33392: PUSH
33393: EMPTY
33394: LIST
33395: LIST
33396: PUSH
33397: LD_INT 2
33399: NEG
33400: PUSH
33401: LD_INT 1
33403: NEG
33404: PUSH
33405: EMPTY
33406: LIST
33407: LIST
33408: PUSH
33409: LD_INT 2
33411: NEG
33412: PUSH
33413: LD_INT 2
33415: NEG
33416: PUSH
33417: EMPTY
33418: LIST
33419: LIST
33420: PUSH
33421: LD_INT 3
33423: PUSH
33424: LD_INT 1
33426: PUSH
33427: EMPTY
33428: LIST
33429: LIST
33430: PUSH
33431: LD_INT 3
33433: PUSH
33434: LD_INT 2
33436: PUSH
33437: EMPTY
33438: LIST
33439: LIST
33440: PUSH
33441: LD_INT 2
33443: PUSH
33444: LD_INT 3
33446: PUSH
33447: EMPTY
33448: LIST
33449: LIST
33450: PUSH
33451: LD_INT 1
33453: PUSH
33454: LD_INT 3
33456: PUSH
33457: EMPTY
33458: LIST
33459: LIST
33460: PUSH
33461: EMPTY
33462: LIST
33463: LIST
33464: LIST
33465: LIST
33466: LIST
33467: LIST
33468: LIST
33469: LIST
33470: LIST
33471: LIST
33472: LIST
33473: LIST
33474: LIST
33475: LIST
33476: LIST
33477: LIST
33478: LIST
33479: LIST
33480: LIST
33481: LIST
33482: LIST
33483: LIST
33484: LIST
33485: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
33486: LD_ADDR_VAR 0 26
33490: PUSH
33491: LD_INT 0
33493: PUSH
33494: LD_INT 0
33496: PUSH
33497: EMPTY
33498: LIST
33499: LIST
33500: PUSH
33501: LD_INT 0
33503: PUSH
33504: LD_INT 1
33506: NEG
33507: PUSH
33508: EMPTY
33509: LIST
33510: LIST
33511: PUSH
33512: LD_INT 1
33514: PUSH
33515: LD_INT 0
33517: PUSH
33518: EMPTY
33519: LIST
33520: LIST
33521: PUSH
33522: LD_INT 1
33524: PUSH
33525: LD_INT 1
33527: PUSH
33528: EMPTY
33529: LIST
33530: LIST
33531: PUSH
33532: LD_INT 0
33534: PUSH
33535: LD_INT 1
33537: PUSH
33538: EMPTY
33539: LIST
33540: LIST
33541: PUSH
33542: LD_INT 1
33544: NEG
33545: PUSH
33546: LD_INT 0
33548: PUSH
33549: EMPTY
33550: LIST
33551: LIST
33552: PUSH
33553: LD_INT 1
33555: NEG
33556: PUSH
33557: LD_INT 1
33559: NEG
33560: PUSH
33561: EMPTY
33562: LIST
33563: LIST
33564: PUSH
33565: LD_INT 1
33567: NEG
33568: PUSH
33569: LD_INT 2
33571: NEG
33572: PUSH
33573: EMPTY
33574: LIST
33575: LIST
33576: PUSH
33577: LD_INT 0
33579: PUSH
33580: LD_INT 2
33582: NEG
33583: PUSH
33584: EMPTY
33585: LIST
33586: LIST
33587: PUSH
33588: LD_INT 1
33590: PUSH
33591: LD_INT 1
33593: NEG
33594: PUSH
33595: EMPTY
33596: LIST
33597: LIST
33598: PUSH
33599: LD_INT 2
33601: PUSH
33602: LD_INT 0
33604: PUSH
33605: EMPTY
33606: LIST
33607: LIST
33608: PUSH
33609: LD_INT 2
33611: PUSH
33612: LD_INT 1
33614: PUSH
33615: EMPTY
33616: LIST
33617: LIST
33618: PUSH
33619: LD_INT 2
33621: PUSH
33622: LD_INT 2
33624: PUSH
33625: EMPTY
33626: LIST
33627: LIST
33628: PUSH
33629: LD_INT 1
33631: PUSH
33632: LD_INT 2
33634: PUSH
33635: EMPTY
33636: LIST
33637: LIST
33638: PUSH
33639: LD_INT 0
33641: PUSH
33642: LD_INT 2
33644: PUSH
33645: EMPTY
33646: LIST
33647: LIST
33648: PUSH
33649: LD_INT 1
33651: NEG
33652: PUSH
33653: LD_INT 1
33655: PUSH
33656: EMPTY
33657: LIST
33658: LIST
33659: PUSH
33660: LD_INT 2
33662: NEG
33663: PUSH
33664: LD_INT 0
33666: PUSH
33667: EMPTY
33668: LIST
33669: LIST
33670: PUSH
33671: LD_INT 2
33673: NEG
33674: PUSH
33675: LD_INT 1
33677: NEG
33678: PUSH
33679: EMPTY
33680: LIST
33681: LIST
33682: PUSH
33683: LD_INT 2
33685: NEG
33686: PUSH
33687: LD_INT 2
33689: NEG
33690: PUSH
33691: EMPTY
33692: LIST
33693: LIST
33694: PUSH
33695: LD_INT 2
33697: PUSH
33698: LD_INT 3
33700: PUSH
33701: EMPTY
33702: LIST
33703: LIST
33704: PUSH
33705: LD_INT 1
33707: PUSH
33708: LD_INT 3
33710: PUSH
33711: EMPTY
33712: LIST
33713: LIST
33714: PUSH
33715: LD_INT 1
33717: NEG
33718: PUSH
33719: LD_INT 2
33721: PUSH
33722: EMPTY
33723: LIST
33724: LIST
33725: PUSH
33726: LD_INT 2
33728: NEG
33729: PUSH
33730: LD_INT 1
33732: PUSH
33733: EMPTY
33734: LIST
33735: LIST
33736: PUSH
33737: EMPTY
33738: LIST
33739: LIST
33740: LIST
33741: LIST
33742: LIST
33743: LIST
33744: LIST
33745: LIST
33746: LIST
33747: LIST
33748: LIST
33749: LIST
33750: LIST
33751: LIST
33752: LIST
33753: LIST
33754: LIST
33755: LIST
33756: LIST
33757: LIST
33758: LIST
33759: LIST
33760: LIST
33761: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
33762: LD_ADDR_VAR 0 27
33766: PUSH
33767: LD_INT 0
33769: PUSH
33770: LD_INT 0
33772: PUSH
33773: EMPTY
33774: LIST
33775: LIST
33776: PUSH
33777: LD_INT 0
33779: PUSH
33780: LD_INT 1
33782: NEG
33783: PUSH
33784: EMPTY
33785: LIST
33786: LIST
33787: PUSH
33788: LD_INT 1
33790: PUSH
33791: LD_INT 0
33793: PUSH
33794: EMPTY
33795: LIST
33796: LIST
33797: PUSH
33798: LD_INT 1
33800: PUSH
33801: LD_INT 1
33803: PUSH
33804: EMPTY
33805: LIST
33806: LIST
33807: PUSH
33808: LD_INT 0
33810: PUSH
33811: LD_INT 1
33813: PUSH
33814: EMPTY
33815: LIST
33816: LIST
33817: PUSH
33818: LD_INT 1
33820: NEG
33821: PUSH
33822: LD_INT 0
33824: PUSH
33825: EMPTY
33826: LIST
33827: LIST
33828: PUSH
33829: LD_INT 1
33831: NEG
33832: PUSH
33833: LD_INT 1
33835: NEG
33836: PUSH
33837: EMPTY
33838: LIST
33839: LIST
33840: PUSH
33841: LD_INT 1
33843: NEG
33844: PUSH
33845: LD_INT 2
33847: NEG
33848: PUSH
33849: EMPTY
33850: LIST
33851: LIST
33852: PUSH
33853: LD_INT 0
33855: PUSH
33856: LD_INT 2
33858: NEG
33859: PUSH
33860: EMPTY
33861: LIST
33862: LIST
33863: PUSH
33864: LD_INT 1
33866: PUSH
33867: LD_INT 1
33869: NEG
33870: PUSH
33871: EMPTY
33872: LIST
33873: LIST
33874: PUSH
33875: LD_INT 2
33877: PUSH
33878: LD_INT 0
33880: PUSH
33881: EMPTY
33882: LIST
33883: LIST
33884: PUSH
33885: LD_INT 2
33887: PUSH
33888: LD_INT 1
33890: PUSH
33891: EMPTY
33892: LIST
33893: LIST
33894: PUSH
33895: LD_INT 2
33897: PUSH
33898: LD_INT 2
33900: PUSH
33901: EMPTY
33902: LIST
33903: LIST
33904: PUSH
33905: LD_INT 1
33907: PUSH
33908: LD_INT 2
33910: PUSH
33911: EMPTY
33912: LIST
33913: LIST
33914: PUSH
33915: LD_INT 0
33917: PUSH
33918: LD_INT 2
33920: PUSH
33921: EMPTY
33922: LIST
33923: LIST
33924: PUSH
33925: LD_INT 1
33927: NEG
33928: PUSH
33929: LD_INT 1
33931: PUSH
33932: EMPTY
33933: LIST
33934: LIST
33935: PUSH
33936: LD_INT 2
33938: NEG
33939: PUSH
33940: LD_INT 0
33942: PUSH
33943: EMPTY
33944: LIST
33945: LIST
33946: PUSH
33947: LD_INT 2
33949: NEG
33950: PUSH
33951: LD_INT 1
33953: NEG
33954: PUSH
33955: EMPTY
33956: LIST
33957: LIST
33958: PUSH
33959: LD_INT 2
33961: NEG
33962: PUSH
33963: LD_INT 2
33965: NEG
33966: PUSH
33967: EMPTY
33968: LIST
33969: LIST
33970: PUSH
33971: LD_INT 1
33973: NEG
33974: PUSH
33975: LD_INT 2
33977: PUSH
33978: EMPTY
33979: LIST
33980: LIST
33981: PUSH
33982: LD_INT 2
33984: NEG
33985: PUSH
33986: LD_INT 1
33988: PUSH
33989: EMPTY
33990: LIST
33991: LIST
33992: PUSH
33993: LD_INT 3
33995: NEG
33996: PUSH
33997: LD_INT 1
33999: NEG
34000: PUSH
34001: EMPTY
34002: LIST
34003: LIST
34004: PUSH
34005: LD_INT 3
34007: NEG
34008: PUSH
34009: LD_INT 2
34011: NEG
34012: PUSH
34013: EMPTY
34014: LIST
34015: LIST
34016: PUSH
34017: EMPTY
34018: LIST
34019: LIST
34020: LIST
34021: LIST
34022: LIST
34023: LIST
34024: LIST
34025: LIST
34026: LIST
34027: LIST
34028: LIST
34029: LIST
34030: LIST
34031: LIST
34032: LIST
34033: LIST
34034: LIST
34035: LIST
34036: LIST
34037: LIST
34038: LIST
34039: LIST
34040: LIST
34041: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
34042: LD_ADDR_VAR 0 28
34046: PUSH
34047: LD_INT 0
34049: PUSH
34050: LD_INT 0
34052: PUSH
34053: EMPTY
34054: LIST
34055: LIST
34056: PUSH
34057: LD_INT 0
34059: PUSH
34060: LD_INT 1
34062: NEG
34063: PUSH
34064: EMPTY
34065: LIST
34066: LIST
34067: PUSH
34068: LD_INT 1
34070: PUSH
34071: LD_INT 0
34073: PUSH
34074: EMPTY
34075: LIST
34076: LIST
34077: PUSH
34078: LD_INT 1
34080: PUSH
34081: LD_INT 1
34083: PUSH
34084: EMPTY
34085: LIST
34086: LIST
34087: PUSH
34088: LD_INT 0
34090: PUSH
34091: LD_INT 1
34093: PUSH
34094: EMPTY
34095: LIST
34096: LIST
34097: PUSH
34098: LD_INT 1
34100: NEG
34101: PUSH
34102: LD_INT 0
34104: PUSH
34105: EMPTY
34106: LIST
34107: LIST
34108: PUSH
34109: LD_INT 1
34111: NEG
34112: PUSH
34113: LD_INT 1
34115: NEG
34116: PUSH
34117: EMPTY
34118: LIST
34119: LIST
34120: PUSH
34121: LD_INT 1
34123: NEG
34124: PUSH
34125: LD_INT 2
34127: NEG
34128: PUSH
34129: EMPTY
34130: LIST
34131: LIST
34132: PUSH
34133: LD_INT 0
34135: PUSH
34136: LD_INT 2
34138: NEG
34139: PUSH
34140: EMPTY
34141: LIST
34142: LIST
34143: PUSH
34144: LD_INT 1
34146: PUSH
34147: LD_INT 1
34149: NEG
34150: PUSH
34151: EMPTY
34152: LIST
34153: LIST
34154: PUSH
34155: LD_INT 2
34157: PUSH
34158: LD_INT 0
34160: PUSH
34161: EMPTY
34162: LIST
34163: LIST
34164: PUSH
34165: LD_INT 2
34167: PUSH
34168: LD_INT 1
34170: PUSH
34171: EMPTY
34172: LIST
34173: LIST
34174: PUSH
34175: LD_INT 2
34177: PUSH
34178: LD_INT 2
34180: PUSH
34181: EMPTY
34182: LIST
34183: LIST
34184: PUSH
34185: LD_INT 1
34187: PUSH
34188: LD_INT 2
34190: PUSH
34191: EMPTY
34192: LIST
34193: LIST
34194: PUSH
34195: LD_INT 0
34197: PUSH
34198: LD_INT 2
34200: PUSH
34201: EMPTY
34202: LIST
34203: LIST
34204: PUSH
34205: LD_INT 1
34207: NEG
34208: PUSH
34209: LD_INT 1
34211: PUSH
34212: EMPTY
34213: LIST
34214: LIST
34215: PUSH
34216: LD_INT 2
34218: NEG
34219: PUSH
34220: LD_INT 0
34222: PUSH
34223: EMPTY
34224: LIST
34225: LIST
34226: PUSH
34227: LD_INT 2
34229: NEG
34230: PUSH
34231: LD_INT 1
34233: NEG
34234: PUSH
34235: EMPTY
34236: LIST
34237: LIST
34238: PUSH
34239: LD_INT 2
34241: NEG
34242: PUSH
34243: LD_INT 2
34245: NEG
34246: PUSH
34247: EMPTY
34248: LIST
34249: LIST
34250: PUSH
34251: LD_INT 2
34253: NEG
34254: PUSH
34255: LD_INT 3
34257: NEG
34258: PUSH
34259: EMPTY
34260: LIST
34261: LIST
34262: PUSH
34263: LD_INT 1
34265: NEG
34266: PUSH
34267: LD_INT 3
34269: NEG
34270: PUSH
34271: EMPTY
34272: LIST
34273: LIST
34274: PUSH
34275: LD_INT 3
34277: NEG
34278: PUSH
34279: LD_INT 1
34281: NEG
34282: PUSH
34283: EMPTY
34284: LIST
34285: LIST
34286: PUSH
34287: LD_INT 3
34289: NEG
34290: PUSH
34291: LD_INT 2
34293: NEG
34294: PUSH
34295: EMPTY
34296: LIST
34297: LIST
34298: PUSH
34299: EMPTY
34300: LIST
34301: LIST
34302: LIST
34303: LIST
34304: LIST
34305: LIST
34306: LIST
34307: LIST
34308: LIST
34309: LIST
34310: LIST
34311: LIST
34312: LIST
34313: LIST
34314: LIST
34315: LIST
34316: LIST
34317: LIST
34318: LIST
34319: LIST
34320: LIST
34321: LIST
34322: LIST
34323: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
34324: LD_ADDR_VAR 0 29
34328: PUSH
34329: LD_INT 0
34331: PUSH
34332: LD_INT 0
34334: PUSH
34335: EMPTY
34336: LIST
34337: LIST
34338: PUSH
34339: LD_INT 0
34341: PUSH
34342: LD_INT 1
34344: NEG
34345: PUSH
34346: EMPTY
34347: LIST
34348: LIST
34349: PUSH
34350: LD_INT 1
34352: PUSH
34353: LD_INT 0
34355: PUSH
34356: EMPTY
34357: LIST
34358: LIST
34359: PUSH
34360: LD_INT 1
34362: PUSH
34363: LD_INT 1
34365: PUSH
34366: EMPTY
34367: LIST
34368: LIST
34369: PUSH
34370: LD_INT 0
34372: PUSH
34373: LD_INT 1
34375: PUSH
34376: EMPTY
34377: LIST
34378: LIST
34379: PUSH
34380: LD_INT 1
34382: NEG
34383: PUSH
34384: LD_INT 0
34386: PUSH
34387: EMPTY
34388: LIST
34389: LIST
34390: PUSH
34391: LD_INT 1
34393: NEG
34394: PUSH
34395: LD_INT 1
34397: NEG
34398: PUSH
34399: EMPTY
34400: LIST
34401: LIST
34402: PUSH
34403: LD_INT 1
34405: NEG
34406: PUSH
34407: LD_INT 2
34409: NEG
34410: PUSH
34411: EMPTY
34412: LIST
34413: LIST
34414: PUSH
34415: LD_INT 0
34417: PUSH
34418: LD_INT 2
34420: NEG
34421: PUSH
34422: EMPTY
34423: LIST
34424: LIST
34425: PUSH
34426: LD_INT 1
34428: PUSH
34429: LD_INT 1
34431: NEG
34432: PUSH
34433: EMPTY
34434: LIST
34435: LIST
34436: PUSH
34437: LD_INT 2
34439: PUSH
34440: LD_INT 0
34442: PUSH
34443: EMPTY
34444: LIST
34445: LIST
34446: PUSH
34447: LD_INT 2
34449: PUSH
34450: LD_INT 1
34452: PUSH
34453: EMPTY
34454: LIST
34455: LIST
34456: PUSH
34457: LD_INT 1
34459: PUSH
34460: LD_INT 2
34462: PUSH
34463: EMPTY
34464: LIST
34465: LIST
34466: PUSH
34467: LD_INT 0
34469: PUSH
34470: LD_INT 2
34472: PUSH
34473: EMPTY
34474: LIST
34475: LIST
34476: PUSH
34477: LD_INT 1
34479: NEG
34480: PUSH
34481: LD_INT 1
34483: PUSH
34484: EMPTY
34485: LIST
34486: LIST
34487: PUSH
34488: LD_INT 2
34490: NEG
34491: PUSH
34492: LD_INT 1
34494: NEG
34495: PUSH
34496: EMPTY
34497: LIST
34498: LIST
34499: PUSH
34500: LD_INT 2
34502: NEG
34503: PUSH
34504: LD_INT 2
34506: NEG
34507: PUSH
34508: EMPTY
34509: LIST
34510: LIST
34511: PUSH
34512: LD_INT 2
34514: NEG
34515: PUSH
34516: LD_INT 3
34518: NEG
34519: PUSH
34520: EMPTY
34521: LIST
34522: LIST
34523: PUSH
34524: LD_INT 2
34526: PUSH
34527: LD_INT 1
34529: NEG
34530: PUSH
34531: EMPTY
34532: LIST
34533: LIST
34534: PUSH
34535: LD_INT 3
34537: PUSH
34538: LD_INT 1
34540: PUSH
34541: EMPTY
34542: LIST
34543: LIST
34544: PUSH
34545: LD_INT 1
34547: PUSH
34548: LD_INT 3
34550: PUSH
34551: EMPTY
34552: LIST
34553: LIST
34554: PUSH
34555: LD_INT 1
34557: NEG
34558: PUSH
34559: LD_INT 2
34561: PUSH
34562: EMPTY
34563: LIST
34564: LIST
34565: PUSH
34566: LD_INT 3
34568: NEG
34569: PUSH
34570: LD_INT 2
34572: NEG
34573: PUSH
34574: EMPTY
34575: LIST
34576: LIST
34577: PUSH
34578: EMPTY
34579: LIST
34580: LIST
34581: LIST
34582: LIST
34583: LIST
34584: LIST
34585: LIST
34586: LIST
34587: LIST
34588: LIST
34589: LIST
34590: LIST
34591: LIST
34592: LIST
34593: LIST
34594: LIST
34595: LIST
34596: LIST
34597: LIST
34598: LIST
34599: LIST
34600: LIST
34601: LIST
34602: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
34603: LD_ADDR_VAR 0 30
34607: PUSH
34608: LD_INT 0
34610: PUSH
34611: LD_INT 0
34613: PUSH
34614: EMPTY
34615: LIST
34616: LIST
34617: PUSH
34618: LD_INT 0
34620: PUSH
34621: LD_INT 1
34623: NEG
34624: PUSH
34625: EMPTY
34626: LIST
34627: LIST
34628: PUSH
34629: LD_INT 1
34631: PUSH
34632: LD_INT 0
34634: PUSH
34635: EMPTY
34636: LIST
34637: LIST
34638: PUSH
34639: LD_INT 1
34641: PUSH
34642: LD_INT 1
34644: PUSH
34645: EMPTY
34646: LIST
34647: LIST
34648: PUSH
34649: LD_INT 0
34651: PUSH
34652: LD_INT 1
34654: PUSH
34655: EMPTY
34656: LIST
34657: LIST
34658: PUSH
34659: LD_INT 1
34661: NEG
34662: PUSH
34663: LD_INT 0
34665: PUSH
34666: EMPTY
34667: LIST
34668: LIST
34669: PUSH
34670: LD_INT 1
34672: NEG
34673: PUSH
34674: LD_INT 1
34676: NEG
34677: PUSH
34678: EMPTY
34679: LIST
34680: LIST
34681: PUSH
34682: LD_INT 1
34684: NEG
34685: PUSH
34686: LD_INT 2
34688: NEG
34689: PUSH
34690: EMPTY
34691: LIST
34692: LIST
34693: PUSH
34694: LD_INT 0
34696: PUSH
34697: LD_INT 2
34699: NEG
34700: PUSH
34701: EMPTY
34702: LIST
34703: LIST
34704: PUSH
34705: LD_INT 1
34707: PUSH
34708: LD_INT 1
34710: NEG
34711: PUSH
34712: EMPTY
34713: LIST
34714: LIST
34715: PUSH
34716: LD_INT 2
34718: PUSH
34719: LD_INT 0
34721: PUSH
34722: EMPTY
34723: LIST
34724: LIST
34725: PUSH
34726: LD_INT 2
34728: PUSH
34729: LD_INT 1
34731: PUSH
34732: EMPTY
34733: LIST
34734: LIST
34735: PUSH
34736: LD_INT 2
34738: PUSH
34739: LD_INT 2
34741: PUSH
34742: EMPTY
34743: LIST
34744: LIST
34745: PUSH
34746: LD_INT 1
34748: PUSH
34749: LD_INT 2
34751: PUSH
34752: EMPTY
34753: LIST
34754: LIST
34755: PUSH
34756: LD_INT 1
34758: NEG
34759: PUSH
34760: LD_INT 1
34762: PUSH
34763: EMPTY
34764: LIST
34765: LIST
34766: PUSH
34767: LD_INT 2
34769: NEG
34770: PUSH
34771: LD_INT 0
34773: PUSH
34774: EMPTY
34775: LIST
34776: LIST
34777: PUSH
34778: LD_INT 2
34780: NEG
34781: PUSH
34782: LD_INT 1
34784: NEG
34785: PUSH
34786: EMPTY
34787: LIST
34788: LIST
34789: PUSH
34790: LD_INT 1
34792: NEG
34793: PUSH
34794: LD_INT 3
34796: NEG
34797: PUSH
34798: EMPTY
34799: LIST
34800: LIST
34801: PUSH
34802: LD_INT 1
34804: PUSH
34805: LD_INT 2
34807: NEG
34808: PUSH
34809: EMPTY
34810: LIST
34811: LIST
34812: PUSH
34813: LD_INT 3
34815: PUSH
34816: LD_INT 2
34818: PUSH
34819: EMPTY
34820: LIST
34821: LIST
34822: PUSH
34823: LD_INT 2
34825: PUSH
34826: LD_INT 3
34828: PUSH
34829: EMPTY
34830: LIST
34831: LIST
34832: PUSH
34833: LD_INT 2
34835: NEG
34836: PUSH
34837: LD_INT 1
34839: PUSH
34840: EMPTY
34841: LIST
34842: LIST
34843: PUSH
34844: LD_INT 3
34846: NEG
34847: PUSH
34848: LD_INT 1
34850: NEG
34851: PUSH
34852: EMPTY
34853: LIST
34854: LIST
34855: PUSH
34856: EMPTY
34857: LIST
34858: LIST
34859: LIST
34860: LIST
34861: LIST
34862: LIST
34863: LIST
34864: LIST
34865: LIST
34866: LIST
34867: LIST
34868: LIST
34869: LIST
34870: LIST
34871: LIST
34872: LIST
34873: LIST
34874: LIST
34875: LIST
34876: LIST
34877: LIST
34878: LIST
34879: LIST
34880: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
34881: LD_ADDR_VAR 0 31
34885: PUSH
34886: LD_INT 0
34888: PUSH
34889: LD_INT 0
34891: PUSH
34892: EMPTY
34893: LIST
34894: LIST
34895: PUSH
34896: LD_INT 0
34898: PUSH
34899: LD_INT 1
34901: NEG
34902: PUSH
34903: EMPTY
34904: LIST
34905: LIST
34906: PUSH
34907: LD_INT 1
34909: PUSH
34910: LD_INT 0
34912: PUSH
34913: EMPTY
34914: LIST
34915: LIST
34916: PUSH
34917: LD_INT 1
34919: PUSH
34920: LD_INT 1
34922: PUSH
34923: EMPTY
34924: LIST
34925: LIST
34926: PUSH
34927: LD_INT 0
34929: PUSH
34930: LD_INT 1
34932: PUSH
34933: EMPTY
34934: LIST
34935: LIST
34936: PUSH
34937: LD_INT 1
34939: NEG
34940: PUSH
34941: LD_INT 0
34943: PUSH
34944: EMPTY
34945: LIST
34946: LIST
34947: PUSH
34948: LD_INT 1
34950: NEG
34951: PUSH
34952: LD_INT 1
34954: NEG
34955: PUSH
34956: EMPTY
34957: LIST
34958: LIST
34959: PUSH
34960: LD_INT 1
34962: NEG
34963: PUSH
34964: LD_INT 2
34966: NEG
34967: PUSH
34968: EMPTY
34969: LIST
34970: LIST
34971: PUSH
34972: LD_INT 1
34974: PUSH
34975: LD_INT 1
34977: NEG
34978: PUSH
34979: EMPTY
34980: LIST
34981: LIST
34982: PUSH
34983: LD_INT 2
34985: PUSH
34986: LD_INT 0
34988: PUSH
34989: EMPTY
34990: LIST
34991: LIST
34992: PUSH
34993: LD_INT 2
34995: PUSH
34996: LD_INT 1
34998: PUSH
34999: EMPTY
35000: LIST
35001: LIST
35002: PUSH
35003: LD_INT 2
35005: PUSH
35006: LD_INT 2
35008: PUSH
35009: EMPTY
35010: LIST
35011: LIST
35012: PUSH
35013: LD_INT 1
35015: PUSH
35016: LD_INT 2
35018: PUSH
35019: EMPTY
35020: LIST
35021: LIST
35022: PUSH
35023: LD_INT 0
35025: PUSH
35026: LD_INT 2
35028: PUSH
35029: EMPTY
35030: LIST
35031: LIST
35032: PUSH
35033: LD_INT 1
35035: NEG
35036: PUSH
35037: LD_INT 1
35039: PUSH
35040: EMPTY
35041: LIST
35042: LIST
35043: PUSH
35044: LD_INT 2
35046: NEG
35047: PUSH
35048: LD_INT 1
35050: NEG
35051: PUSH
35052: EMPTY
35053: LIST
35054: LIST
35055: PUSH
35056: LD_INT 2
35058: NEG
35059: PUSH
35060: LD_INT 2
35062: NEG
35063: PUSH
35064: EMPTY
35065: LIST
35066: LIST
35067: PUSH
35068: LD_INT 2
35070: NEG
35071: PUSH
35072: LD_INT 3
35074: NEG
35075: PUSH
35076: EMPTY
35077: LIST
35078: LIST
35079: PUSH
35080: LD_INT 2
35082: PUSH
35083: LD_INT 1
35085: NEG
35086: PUSH
35087: EMPTY
35088: LIST
35089: LIST
35090: PUSH
35091: LD_INT 3
35093: PUSH
35094: LD_INT 1
35096: PUSH
35097: EMPTY
35098: LIST
35099: LIST
35100: PUSH
35101: LD_INT 1
35103: PUSH
35104: LD_INT 3
35106: PUSH
35107: EMPTY
35108: LIST
35109: LIST
35110: PUSH
35111: LD_INT 1
35113: NEG
35114: PUSH
35115: LD_INT 2
35117: PUSH
35118: EMPTY
35119: LIST
35120: LIST
35121: PUSH
35122: LD_INT 3
35124: NEG
35125: PUSH
35126: LD_INT 2
35128: NEG
35129: PUSH
35130: EMPTY
35131: LIST
35132: LIST
35133: PUSH
35134: EMPTY
35135: LIST
35136: LIST
35137: LIST
35138: LIST
35139: LIST
35140: LIST
35141: LIST
35142: LIST
35143: LIST
35144: LIST
35145: LIST
35146: LIST
35147: LIST
35148: LIST
35149: LIST
35150: LIST
35151: LIST
35152: LIST
35153: LIST
35154: LIST
35155: LIST
35156: LIST
35157: LIST
35158: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35159: LD_ADDR_VAR 0 32
35163: PUSH
35164: LD_INT 0
35166: PUSH
35167: LD_INT 0
35169: PUSH
35170: EMPTY
35171: LIST
35172: LIST
35173: PUSH
35174: LD_INT 0
35176: PUSH
35177: LD_INT 1
35179: NEG
35180: PUSH
35181: EMPTY
35182: LIST
35183: LIST
35184: PUSH
35185: LD_INT 1
35187: PUSH
35188: LD_INT 0
35190: PUSH
35191: EMPTY
35192: LIST
35193: LIST
35194: PUSH
35195: LD_INT 1
35197: PUSH
35198: LD_INT 1
35200: PUSH
35201: EMPTY
35202: LIST
35203: LIST
35204: PUSH
35205: LD_INT 0
35207: PUSH
35208: LD_INT 1
35210: PUSH
35211: EMPTY
35212: LIST
35213: LIST
35214: PUSH
35215: LD_INT 1
35217: NEG
35218: PUSH
35219: LD_INT 0
35221: PUSH
35222: EMPTY
35223: LIST
35224: LIST
35225: PUSH
35226: LD_INT 1
35228: NEG
35229: PUSH
35230: LD_INT 1
35232: NEG
35233: PUSH
35234: EMPTY
35235: LIST
35236: LIST
35237: PUSH
35238: LD_INT 1
35240: NEG
35241: PUSH
35242: LD_INT 2
35244: NEG
35245: PUSH
35246: EMPTY
35247: LIST
35248: LIST
35249: PUSH
35250: LD_INT 0
35252: PUSH
35253: LD_INT 2
35255: NEG
35256: PUSH
35257: EMPTY
35258: LIST
35259: LIST
35260: PUSH
35261: LD_INT 1
35263: PUSH
35264: LD_INT 1
35266: NEG
35267: PUSH
35268: EMPTY
35269: LIST
35270: LIST
35271: PUSH
35272: LD_INT 2
35274: PUSH
35275: LD_INT 1
35277: PUSH
35278: EMPTY
35279: LIST
35280: LIST
35281: PUSH
35282: LD_INT 2
35284: PUSH
35285: LD_INT 2
35287: PUSH
35288: EMPTY
35289: LIST
35290: LIST
35291: PUSH
35292: LD_INT 1
35294: PUSH
35295: LD_INT 2
35297: PUSH
35298: EMPTY
35299: LIST
35300: LIST
35301: PUSH
35302: LD_INT 0
35304: PUSH
35305: LD_INT 2
35307: PUSH
35308: EMPTY
35309: LIST
35310: LIST
35311: PUSH
35312: LD_INT 1
35314: NEG
35315: PUSH
35316: LD_INT 1
35318: PUSH
35319: EMPTY
35320: LIST
35321: LIST
35322: PUSH
35323: LD_INT 2
35325: NEG
35326: PUSH
35327: LD_INT 0
35329: PUSH
35330: EMPTY
35331: LIST
35332: LIST
35333: PUSH
35334: LD_INT 2
35336: NEG
35337: PUSH
35338: LD_INT 1
35340: NEG
35341: PUSH
35342: EMPTY
35343: LIST
35344: LIST
35345: PUSH
35346: LD_INT 1
35348: NEG
35349: PUSH
35350: LD_INT 3
35352: NEG
35353: PUSH
35354: EMPTY
35355: LIST
35356: LIST
35357: PUSH
35358: LD_INT 1
35360: PUSH
35361: LD_INT 2
35363: NEG
35364: PUSH
35365: EMPTY
35366: LIST
35367: LIST
35368: PUSH
35369: LD_INT 3
35371: PUSH
35372: LD_INT 2
35374: PUSH
35375: EMPTY
35376: LIST
35377: LIST
35378: PUSH
35379: LD_INT 2
35381: PUSH
35382: LD_INT 3
35384: PUSH
35385: EMPTY
35386: LIST
35387: LIST
35388: PUSH
35389: LD_INT 2
35391: NEG
35392: PUSH
35393: LD_INT 1
35395: PUSH
35396: EMPTY
35397: LIST
35398: LIST
35399: PUSH
35400: LD_INT 3
35402: NEG
35403: PUSH
35404: LD_INT 1
35406: NEG
35407: PUSH
35408: EMPTY
35409: LIST
35410: LIST
35411: PUSH
35412: EMPTY
35413: LIST
35414: LIST
35415: LIST
35416: LIST
35417: LIST
35418: LIST
35419: LIST
35420: LIST
35421: LIST
35422: LIST
35423: LIST
35424: LIST
35425: LIST
35426: LIST
35427: LIST
35428: LIST
35429: LIST
35430: LIST
35431: LIST
35432: LIST
35433: LIST
35434: LIST
35435: LIST
35436: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35437: LD_ADDR_VAR 0 33
35441: PUSH
35442: LD_INT 0
35444: PUSH
35445: LD_INT 0
35447: PUSH
35448: EMPTY
35449: LIST
35450: LIST
35451: PUSH
35452: LD_INT 0
35454: PUSH
35455: LD_INT 1
35457: NEG
35458: PUSH
35459: EMPTY
35460: LIST
35461: LIST
35462: PUSH
35463: LD_INT 1
35465: PUSH
35466: LD_INT 0
35468: PUSH
35469: EMPTY
35470: LIST
35471: LIST
35472: PUSH
35473: LD_INT 1
35475: PUSH
35476: LD_INT 1
35478: PUSH
35479: EMPTY
35480: LIST
35481: LIST
35482: PUSH
35483: LD_INT 0
35485: PUSH
35486: LD_INT 1
35488: PUSH
35489: EMPTY
35490: LIST
35491: LIST
35492: PUSH
35493: LD_INT 1
35495: NEG
35496: PUSH
35497: LD_INT 0
35499: PUSH
35500: EMPTY
35501: LIST
35502: LIST
35503: PUSH
35504: LD_INT 1
35506: NEG
35507: PUSH
35508: LD_INT 1
35510: NEG
35511: PUSH
35512: EMPTY
35513: LIST
35514: LIST
35515: PUSH
35516: LD_INT 1
35518: NEG
35519: PUSH
35520: LD_INT 2
35522: NEG
35523: PUSH
35524: EMPTY
35525: LIST
35526: LIST
35527: PUSH
35528: LD_INT 1
35530: PUSH
35531: LD_INT 1
35533: NEG
35534: PUSH
35535: EMPTY
35536: LIST
35537: LIST
35538: PUSH
35539: LD_INT 2
35541: PUSH
35542: LD_INT 0
35544: PUSH
35545: EMPTY
35546: LIST
35547: LIST
35548: PUSH
35549: LD_INT 2
35551: PUSH
35552: LD_INT 1
35554: PUSH
35555: EMPTY
35556: LIST
35557: LIST
35558: PUSH
35559: LD_INT 1
35561: PUSH
35562: LD_INT 2
35564: PUSH
35565: EMPTY
35566: LIST
35567: LIST
35568: PUSH
35569: LD_INT 0
35571: PUSH
35572: LD_INT 2
35574: PUSH
35575: EMPTY
35576: LIST
35577: LIST
35578: PUSH
35579: LD_INT 1
35581: NEG
35582: PUSH
35583: LD_INT 1
35585: PUSH
35586: EMPTY
35587: LIST
35588: LIST
35589: PUSH
35590: LD_INT 2
35592: NEG
35593: PUSH
35594: LD_INT 0
35596: PUSH
35597: EMPTY
35598: LIST
35599: LIST
35600: PUSH
35601: LD_INT 2
35603: NEG
35604: PUSH
35605: LD_INT 1
35607: NEG
35608: PUSH
35609: EMPTY
35610: LIST
35611: LIST
35612: PUSH
35613: LD_INT 2
35615: NEG
35616: PUSH
35617: LD_INT 2
35619: NEG
35620: PUSH
35621: EMPTY
35622: LIST
35623: LIST
35624: PUSH
35625: LD_INT 2
35627: NEG
35628: PUSH
35629: LD_INT 3
35631: NEG
35632: PUSH
35633: EMPTY
35634: LIST
35635: LIST
35636: PUSH
35637: LD_INT 2
35639: PUSH
35640: LD_INT 1
35642: NEG
35643: PUSH
35644: EMPTY
35645: LIST
35646: LIST
35647: PUSH
35648: LD_INT 3
35650: PUSH
35651: LD_INT 1
35653: PUSH
35654: EMPTY
35655: LIST
35656: LIST
35657: PUSH
35658: LD_INT 1
35660: PUSH
35661: LD_INT 3
35663: PUSH
35664: EMPTY
35665: LIST
35666: LIST
35667: PUSH
35668: LD_INT 1
35670: NEG
35671: PUSH
35672: LD_INT 2
35674: PUSH
35675: EMPTY
35676: LIST
35677: LIST
35678: PUSH
35679: LD_INT 3
35681: NEG
35682: PUSH
35683: LD_INT 2
35685: NEG
35686: PUSH
35687: EMPTY
35688: LIST
35689: LIST
35690: PUSH
35691: EMPTY
35692: LIST
35693: LIST
35694: LIST
35695: LIST
35696: LIST
35697: LIST
35698: LIST
35699: LIST
35700: LIST
35701: LIST
35702: LIST
35703: LIST
35704: LIST
35705: LIST
35706: LIST
35707: LIST
35708: LIST
35709: LIST
35710: LIST
35711: LIST
35712: LIST
35713: LIST
35714: LIST
35715: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35716: LD_ADDR_VAR 0 34
35720: PUSH
35721: LD_INT 0
35723: PUSH
35724: LD_INT 0
35726: PUSH
35727: EMPTY
35728: LIST
35729: LIST
35730: PUSH
35731: LD_INT 0
35733: PUSH
35734: LD_INT 1
35736: NEG
35737: PUSH
35738: EMPTY
35739: LIST
35740: LIST
35741: PUSH
35742: LD_INT 1
35744: PUSH
35745: LD_INT 0
35747: PUSH
35748: EMPTY
35749: LIST
35750: LIST
35751: PUSH
35752: LD_INT 1
35754: PUSH
35755: LD_INT 1
35757: PUSH
35758: EMPTY
35759: LIST
35760: LIST
35761: PUSH
35762: LD_INT 0
35764: PUSH
35765: LD_INT 1
35767: PUSH
35768: EMPTY
35769: LIST
35770: LIST
35771: PUSH
35772: LD_INT 1
35774: NEG
35775: PUSH
35776: LD_INT 0
35778: PUSH
35779: EMPTY
35780: LIST
35781: LIST
35782: PUSH
35783: LD_INT 1
35785: NEG
35786: PUSH
35787: LD_INT 1
35789: NEG
35790: PUSH
35791: EMPTY
35792: LIST
35793: LIST
35794: PUSH
35795: LD_INT 1
35797: NEG
35798: PUSH
35799: LD_INT 2
35801: NEG
35802: PUSH
35803: EMPTY
35804: LIST
35805: LIST
35806: PUSH
35807: LD_INT 0
35809: PUSH
35810: LD_INT 2
35812: NEG
35813: PUSH
35814: EMPTY
35815: LIST
35816: LIST
35817: PUSH
35818: LD_INT 1
35820: PUSH
35821: LD_INT 1
35823: NEG
35824: PUSH
35825: EMPTY
35826: LIST
35827: LIST
35828: PUSH
35829: LD_INT 2
35831: PUSH
35832: LD_INT 1
35834: PUSH
35835: EMPTY
35836: LIST
35837: LIST
35838: PUSH
35839: LD_INT 2
35841: PUSH
35842: LD_INT 2
35844: PUSH
35845: EMPTY
35846: LIST
35847: LIST
35848: PUSH
35849: LD_INT 1
35851: PUSH
35852: LD_INT 2
35854: PUSH
35855: EMPTY
35856: LIST
35857: LIST
35858: PUSH
35859: LD_INT 1
35861: NEG
35862: PUSH
35863: LD_INT 1
35865: PUSH
35866: EMPTY
35867: LIST
35868: LIST
35869: PUSH
35870: LD_INT 2
35872: NEG
35873: PUSH
35874: LD_INT 0
35876: PUSH
35877: EMPTY
35878: LIST
35879: LIST
35880: PUSH
35881: LD_INT 2
35883: NEG
35884: PUSH
35885: LD_INT 1
35887: NEG
35888: PUSH
35889: EMPTY
35890: LIST
35891: LIST
35892: PUSH
35893: LD_INT 2
35895: NEG
35896: PUSH
35897: LD_INT 2
35899: NEG
35900: PUSH
35901: EMPTY
35902: LIST
35903: LIST
35904: PUSH
35905: LD_INT 1
35907: NEG
35908: PUSH
35909: LD_INT 3
35911: NEG
35912: PUSH
35913: EMPTY
35914: LIST
35915: LIST
35916: PUSH
35917: LD_INT 1
35919: PUSH
35920: LD_INT 2
35922: NEG
35923: PUSH
35924: EMPTY
35925: LIST
35926: LIST
35927: PUSH
35928: LD_INT 3
35930: PUSH
35931: LD_INT 2
35933: PUSH
35934: EMPTY
35935: LIST
35936: LIST
35937: PUSH
35938: LD_INT 2
35940: PUSH
35941: LD_INT 3
35943: PUSH
35944: EMPTY
35945: LIST
35946: LIST
35947: PUSH
35948: LD_INT 2
35950: NEG
35951: PUSH
35952: LD_INT 1
35954: PUSH
35955: EMPTY
35956: LIST
35957: LIST
35958: PUSH
35959: LD_INT 3
35961: NEG
35962: PUSH
35963: LD_INT 1
35965: NEG
35966: PUSH
35967: EMPTY
35968: LIST
35969: LIST
35970: PUSH
35971: EMPTY
35972: LIST
35973: LIST
35974: LIST
35975: LIST
35976: LIST
35977: LIST
35978: LIST
35979: LIST
35980: LIST
35981: LIST
35982: LIST
35983: LIST
35984: LIST
35985: LIST
35986: LIST
35987: LIST
35988: LIST
35989: LIST
35990: LIST
35991: LIST
35992: LIST
35993: LIST
35994: LIST
35995: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
35996: LD_ADDR_VAR 0 35
36000: PUSH
36001: LD_INT 0
36003: PUSH
36004: LD_INT 0
36006: PUSH
36007: EMPTY
36008: LIST
36009: LIST
36010: PUSH
36011: LD_INT 0
36013: PUSH
36014: LD_INT 1
36016: NEG
36017: PUSH
36018: EMPTY
36019: LIST
36020: LIST
36021: PUSH
36022: LD_INT 1
36024: PUSH
36025: LD_INT 0
36027: PUSH
36028: EMPTY
36029: LIST
36030: LIST
36031: PUSH
36032: LD_INT 1
36034: PUSH
36035: LD_INT 1
36037: PUSH
36038: EMPTY
36039: LIST
36040: LIST
36041: PUSH
36042: LD_INT 0
36044: PUSH
36045: LD_INT 1
36047: PUSH
36048: EMPTY
36049: LIST
36050: LIST
36051: PUSH
36052: LD_INT 1
36054: NEG
36055: PUSH
36056: LD_INT 0
36058: PUSH
36059: EMPTY
36060: LIST
36061: LIST
36062: PUSH
36063: LD_INT 1
36065: NEG
36066: PUSH
36067: LD_INT 1
36069: NEG
36070: PUSH
36071: EMPTY
36072: LIST
36073: LIST
36074: PUSH
36075: LD_INT 2
36077: PUSH
36078: LD_INT 1
36080: PUSH
36081: EMPTY
36082: LIST
36083: LIST
36084: PUSH
36085: LD_INT 2
36087: NEG
36088: PUSH
36089: LD_INT 1
36091: NEG
36092: PUSH
36093: EMPTY
36094: LIST
36095: LIST
36096: PUSH
36097: EMPTY
36098: LIST
36099: LIST
36100: LIST
36101: LIST
36102: LIST
36103: LIST
36104: LIST
36105: LIST
36106: LIST
36107: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
36108: LD_ADDR_VAR 0 36
36112: PUSH
36113: LD_INT 0
36115: PUSH
36116: LD_INT 0
36118: PUSH
36119: EMPTY
36120: LIST
36121: LIST
36122: PUSH
36123: LD_INT 0
36125: PUSH
36126: LD_INT 1
36128: NEG
36129: PUSH
36130: EMPTY
36131: LIST
36132: LIST
36133: PUSH
36134: LD_INT 1
36136: PUSH
36137: LD_INT 0
36139: PUSH
36140: EMPTY
36141: LIST
36142: LIST
36143: PUSH
36144: LD_INT 1
36146: PUSH
36147: LD_INT 1
36149: PUSH
36150: EMPTY
36151: LIST
36152: LIST
36153: PUSH
36154: LD_INT 0
36156: PUSH
36157: LD_INT 1
36159: PUSH
36160: EMPTY
36161: LIST
36162: LIST
36163: PUSH
36164: LD_INT 1
36166: NEG
36167: PUSH
36168: LD_INT 0
36170: PUSH
36171: EMPTY
36172: LIST
36173: LIST
36174: PUSH
36175: LD_INT 1
36177: NEG
36178: PUSH
36179: LD_INT 1
36181: NEG
36182: PUSH
36183: EMPTY
36184: LIST
36185: LIST
36186: PUSH
36187: LD_INT 1
36189: NEG
36190: PUSH
36191: LD_INT 2
36193: NEG
36194: PUSH
36195: EMPTY
36196: LIST
36197: LIST
36198: PUSH
36199: LD_INT 1
36201: PUSH
36202: LD_INT 2
36204: PUSH
36205: EMPTY
36206: LIST
36207: LIST
36208: PUSH
36209: EMPTY
36210: LIST
36211: LIST
36212: LIST
36213: LIST
36214: LIST
36215: LIST
36216: LIST
36217: LIST
36218: LIST
36219: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
36220: LD_ADDR_VAR 0 37
36224: PUSH
36225: LD_INT 0
36227: PUSH
36228: LD_INT 0
36230: PUSH
36231: EMPTY
36232: LIST
36233: LIST
36234: PUSH
36235: LD_INT 0
36237: PUSH
36238: LD_INT 1
36240: NEG
36241: PUSH
36242: EMPTY
36243: LIST
36244: LIST
36245: PUSH
36246: LD_INT 1
36248: PUSH
36249: LD_INT 0
36251: PUSH
36252: EMPTY
36253: LIST
36254: LIST
36255: PUSH
36256: LD_INT 1
36258: PUSH
36259: LD_INT 1
36261: PUSH
36262: EMPTY
36263: LIST
36264: LIST
36265: PUSH
36266: LD_INT 0
36268: PUSH
36269: LD_INT 1
36271: PUSH
36272: EMPTY
36273: LIST
36274: LIST
36275: PUSH
36276: LD_INT 1
36278: NEG
36279: PUSH
36280: LD_INT 0
36282: PUSH
36283: EMPTY
36284: LIST
36285: LIST
36286: PUSH
36287: LD_INT 1
36289: NEG
36290: PUSH
36291: LD_INT 1
36293: NEG
36294: PUSH
36295: EMPTY
36296: LIST
36297: LIST
36298: PUSH
36299: LD_INT 1
36301: PUSH
36302: LD_INT 1
36304: NEG
36305: PUSH
36306: EMPTY
36307: LIST
36308: LIST
36309: PUSH
36310: LD_INT 1
36312: NEG
36313: PUSH
36314: LD_INT 1
36316: PUSH
36317: EMPTY
36318: LIST
36319: LIST
36320: PUSH
36321: EMPTY
36322: LIST
36323: LIST
36324: LIST
36325: LIST
36326: LIST
36327: LIST
36328: LIST
36329: LIST
36330: LIST
36331: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
36332: LD_ADDR_VAR 0 38
36336: PUSH
36337: LD_INT 0
36339: PUSH
36340: LD_INT 0
36342: PUSH
36343: EMPTY
36344: LIST
36345: LIST
36346: PUSH
36347: LD_INT 0
36349: PUSH
36350: LD_INT 1
36352: NEG
36353: PUSH
36354: EMPTY
36355: LIST
36356: LIST
36357: PUSH
36358: LD_INT 1
36360: PUSH
36361: LD_INT 0
36363: PUSH
36364: EMPTY
36365: LIST
36366: LIST
36367: PUSH
36368: LD_INT 1
36370: PUSH
36371: LD_INT 1
36373: PUSH
36374: EMPTY
36375: LIST
36376: LIST
36377: PUSH
36378: LD_INT 0
36380: PUSH
36381: LD_INT 1
36383: PUSH
36384: EMPTY
36385: LIST
36386: LIST
36387: PUSH
36388: LD_INT 1
36390: NEG
36391: PUSH
36392: LD_INT 0
36394: PUSH
36395: EMPTY
36396: LIST
36397: LIST
36398: PUSH
36399: LD_INT 1
36401: NEG
36402: PUSH
36403: LD_INT 1
36405: NEG
36406: PUSH
36407: EMPTY
36408: LIST
36409: LIST
36410: PUSH
36411: LD_INT 2
36413: PUSH
36414: LD_INT 1
36416: PUSH
36417: EMPTY
36418: LIST
36419: LIST
36420: PUSH
36421: LD_INT 2
36423: NEG
36424: PUSH
36425: LD_INT 1
36427: NEG
36428: PUSH
36429: EMPTY
36430: LIST
36431: LIST
36432: PUSH
36433: EMPTY
36434: LIST
36435: LIST
36436: LIST
36437: LIST
36438: LIST
36439: LIST
36440: LIST
36441: LIST
36442: LIST
36443: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
36444: LD_ADDR_VAR 0 39
36448: PUSH
36449: LD_INT 0
36451: PUSH
36452: LD_INT 0
36454: PUSH
36455: EMPTY
36456: LIST
36457: LIST
36458: PUSH
36459: LD_INT 0
36461: PUSH
36462: LD_INT 1
36464: NEG
36465: PUSH
36466: EMPTY
36467: LIST
36468: LIST
36469: PUSH
36470: LD_INT 1
36472: PUSH
36473: LD_INT 0
36475: PUSH
36476: EMPTY
36477: LIST
36478: LIST
36479: PUSH
36480: LD_INT 1
36482: PUSH
36483: LD_INT 1
36485: PUSH
36486: EMPTY
36487: LIST
36488: LIST
36489: PUSH
36490: LD_INT 0
36492: PUSH
36493: LD_INT 1
36495: PUSH
36496: EMPTY
36497: LIST
36498: LIST
36499: PUSH
36500: LD_INT 1
36502: NEG
36503: PUSH
36504: LD_INT 0
36506: PUSH
36507: EMPTY
36508: LIST
36509: LIST
36510: PUSH
36511: LD_INT 1
36513: NEG
36514: PUSH
36515: LD_INT 1
36517: NEG
36518: PUSH
36519: EMPTY
36520: LIST
36521: LIST
36522: PUSH
36523: LD_INT 1
36525: NEG
36526: PUSH
36527: LD_INT 2
36529: NEG
36530: PUSH
36531: EMPTY
36532: LIST
36533: LIST
36534: PUSH
36535: LD_INT 1
36537: PUSH
36538: LD_INT 2
36540: PUSH
36541: EMPTY
36542: LIST
36543: LIST
36544: PUSH
36545: EMPTY
36546: LIST
36547: LIST
36548: LIST
36549: LIST
36550: LIST
36551: LIST
36552: LIST
36553: LIST
36554: LIST
36555: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
36556: LD_ADDR_VAR 0 40
36560: PUSH
36561: LD_INT 0
36563: PUSH
36564: LD_INT 0
36566: PUSH
36567: EMPTY
36568: LIST
36569: LIST
36570: PUSH
36571: LD_INT 0
36573: PUSH
36574: LD_INT 1
36576: NEG
36577: PUSH
36578: EMPTY
36579: LIST
36580: LIST
36581: PUSH
36582: LD_INT 1
36584: PUSH
36585: LD_INT 0
36587: PUSH
36588: EMPTY
36589: LIST
36590: LIST
36591: PUSH
36592: LD_INT 1
36594: PUSH
36595: LD_INT 1
36597: PUSH
36598: EMPTY
36599: LIST
36600: LIST
36601: PUSH
36602: LD_INT 0
36604: PUSH
36605: LD_INT 1
36607: PUSH
36608: EMPTY
36609: LIST
36610: LIST
36611: PUSH
36612: LD_INT 1
36614: NEG
36615: PUSH
36616: LD_INT 0
36618: PUSH
36619: EMPTY
36620: LIST
36621: LIST
36622: PUSH
36623: LD_INT 1
36625: NEG
36626: PUSH
36627: LD_INT 1
36629: NEG
36630: PUSH
36631: EMPTY
36632: LIST
36633: LIST
36634: PUSH
36635: LD_INT 1
36637: PUSH
36638: LD_INT 1
36640: NEG
36641: PUSH
36642: EMPTY
36643: LIST
36644: LIST
36645: PUSH
36646: LD_INT 1
36648: NEG
36649: PUSH
36650: LD_INT 1
36652: PUSH
36653: EMPTY
36654: LIST
36655: LIST
36656: PUSH
36657: EMPTY
36658: LIST
36659: LIST
36660: LIST
36661: LIST
36662: LIST
36663: LIST
36664: LIST
36665: LIST
36666: LIST
36667: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36668: LD_ADDR_VAR 0 41
36672: PUSH
36673: LD_INT 0
36675: PUSH
36676: LD_INT 0
36678: PUSH
36679: EMPTY
36680: LIST
36681: LIST
36682: PUSH
36683: LD_INT 0
36685: PUSH
36686: LD_INT 1
36688: NEG
36689: PUSH
36690: EMPTY
36691: LIST
36692: LIST
36693: PUSH
36694: LD_INT 1
36696: PUSH
36697: LD_INT 0
36699: PUSH
36700: EMPTY
36701: LIST
36702: LIST
36703: PUSH
36704: LD_INT 1
36706: PUSH
36707: LD_INT 1
36709: PUSH
36710: EMPTY
36711: LIST
36712: LIST
36713: PUSH
36714: LD_INT 0
36716: PUSH
36717: LD_INT 1
36719: PUSH
36720: EMPTY
36721: LIST
36722: LIST
36723: PUSH
36724: LD_INT 1
36726: NEG
36727: PUSH
36728: LD_INT 0
36730: PUSH
36731: EMPTY
36732: LIST
36733: LIST
36734: PUSH
36735: LD_INT 1
36737: NEG
36738: PUSH
36739: LD_INT 1
36741: NEG
36742: PUSH
36743: EMPTY
36744: LIST
36745: LIST
36746: PUSH
36747: LD_INT 1
36749: NEG
36750: PUSH
36751: LD_INT 2
36753: NEG
36754: PUSH
36755: EMPTY
36756: LIST
36757: LIST
36758: PUSH
36759: LD_INT 1
36761: PUSH
36762: LD_INT 1
36764: NEG
36765: PUSH
36766: EMPTY
36767: LIST
36768: LIST
36769: PUSH
36770: LD_INT 2
36772: PUSH
36773: LD_INT 0
36775: PUSH
36776: EMPTY
36777: LIST
36778: LIST
36779: PUSH
36780: LD_INT 2
36782: PUSH
36783: LD_INT 1
36785: PUSH
36786: EMPTY
36787: LIST
36788: LIST
36789: PUSH
36790: LD_INT 2
36792: PUSH
36793: LD_INT 2
36795: PUSH
36796: EMPTY
36797: LIST
36798: LIST
36799: PUSH
36800: LD_INT 1
36802: PUSH
36803: LD_INT 2
36805: PUSH
36806: EMPTY
36807: LIST
36808: LIST
36809: PUSH
36810: LD_INT 1
36812: NEG
36813: PUSH
36814: LD_INT 1
36816: PUSH
36817: EMPTY
36818: LIST
36819: LIST
36820: PUSH
36821: LD_INT 2
36823: NEG
36824: PUSH
36825: LD_INT 0
36827: PUSH
36828: EMPTY
36829: LIST
36830: LIST
36831: PUSH
36832: LD_INT 2
36834: NEG
36835: PUSH
36836: LD_INT 1
36838: NEG
36839: PUSH
36840: EMPTY
36841: LIST
36842: LIST
36843: PUSH
36844: LD_INT 2
36846: NEG
36847: PUSH
36848: LD_INT 2
36850: NEG
36851: PUSH
36852: EMPTY
36853: LIST
36854: LIST
36855: PUSH
36856: LD_INT 2
36858: NEG
36859: PUSH
36860: LD_INT 3
36862: NEG
36863: PUSH
36864: EMPTY
36865: LIST
36866: LIST
36867: PUSH
36868: LD_INT 2
36870: PUSH
36871: LD_INT 1
36873: NEG
36874: PUSH
36875: EMPTY
36876: LIST
36877: LIST
36878: PUSH
36879: LD_INT 3
36881: PUSH
36882: LD_INT 0
36884: PUSH
36885: EMPTY
36886: LIST
36887: LIST
36888: PUSH
36889: LD_INT 3
36891: PUSH
36892: LD_INT 1
36894: PUSH
36895: EMPTY
36896: LIST
36897: LIST
36898: PUSH
36899: LD_INT 3
36901: PUSH
36902: LD_INT 2
36904: PUSH
36905: EMPTY
36906: LIST
36907: LIST
36908: PUSH
36909: LD_INT 3
36911: PUSH
36912: LD_INT 3
36914: PUSH
36915: EMPTY
36916: LIST
36917: LIST
36918: PUSH
36919: LD_INT 2
36921: PUSH
36922: LD_INT 3
36924: PUSH
36925: EMPTY
36926: LIST
36927: LIST
36928: PUSH
36929: LD_INT 2
36931: NEG
36932: PUSH
36933: LD_INT 1
36935: PUSH
36936: EMPTY
36937: LIST
36938: LIST
36939: PUSH
36940: LD_INT 3
36942: NEG
36943: PUSH
36944: LD_INT 0
36946: PUSH
36947: EMPTY
36948: LIST
36949: LIST
36950: PUSH
36951: LD_INT 3
36953: NEG
36954: PUSH
36955: LD_INT 1
36957: NEG
36958: PUSH
36959: EMPTY
36960: LIST
36961: LIST
36962: PUSH
36963: LD_INT 3
36965: NEG
36966: PUSH
36967: LD_INT 2
36969: NEG
36970: PUSH
36971: EMPTY
36972: LIST
36973: LIST
36974: PUSH
36975: LD_INT 3
36977: NEG
36978: PUSH
36979: LD_INT 3
36981: NEG
36982: PUSH
36983: EMPTY
36984: LIST
36985: LIST
36986: PUSH
36987: EMPTY
36988: LIST
36989: LIST
36990: LIST
36991: LIST
36992: LIST
36993: LIST
36994: LIST
36995: LIST
36996: LIST
36997: LIST
36998: LIST
36999: LIST
37000: LIST
37001: LIST
37002: LIST
37003: LIST
37004: LIST
37005: LIST
37006: LIST
37007: LIST
37008: LIST
37009: LIST
37010: LIST
37011: LIST
37012: LIST
37013: LIST
37014: LIST
37015: LIST
37016: LIST
37017: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37018: LD_ADDR_VAR 0 42
37022: PUSH
37023: LD_INT 0
37025: PUSH
37026: LD_INT 0
37028: PUSH
37029: EMPTY
37030: LIST
37031: LIST
37032: PUSH
37033: LD_INT 0
37035: PUSH
37036: LD_INT 1
37038: NEG
37039: PUSH
37040: EMPTY
37041: LIST
37042: LIST
37043: PUSH
37044: LD_INT 1
37046: PUSH
37047: LD_INT 0
37049: PUSH
37050: EMPTY
37051: LIST
37052: LIST
37053: PUSH
37054: LD_INT 1
37056: PUSH
37057: LD_INT 1
37059: PUSH
37060: EMPTY
37061: LIST
37062: LIST
37063: PUSH
37064: LD_INT 0
37066: PUSH
37067: LD_INT 1
37069: PUSH
37070: EMPTY
37071: LIST
37072: LIST
37073: PUSH
37074: LD_INT 1
37076: NEG
37077: PUSH
37078: LD_INT 0
37080: PUSH
37081: EMPTY
37082: LIST
37083: LIST
37084: PUSH
37085: LD_INT 1
37087: NEG
37088: PUSH
37089: LD_INT 1
37091: NEG
37092: PUSH
37093: EMPTY
37094: LIST
37095: LIST
37096: PUSH
37097: LD_INT 1
37099: NEG
37100: PUSH
37101: LD_INT 2
37103: NEG
37104: PUSH
37105: EMPTY
37106: LIST
37107: LIST
37108: PUSH
37109: LD_INT 0
37111: PUSH
37112: LD_INT 2
37114: NEG
37115: PUSH
37116: EMPTY
37117: LIST
37118: LIST
37119: PUSH
37120: LD_INT 1
37122: PUSH
37123: LD_INT 1
37125: NEG
37126: PUSH
37127: EMPTY
37128: LIST
37129: LIST
37130: PUSH
37131: LD_INT 2
37133: PUSH
37134: LD_INT 1
37136: PUSH
37137: EMPTY
37138: LIST
37139: LIST
37140: PUSH
37141: LD_INT 2
37143: PUSH
37144: LD_INT 2
37146: PUSH
37147: EMPTY
37148: LIST
37149: LIST
37150: PUSH
37151: LD_INT 1
37153: PUSH
37154: LD_INT 2
37156: PUSH
37157: EMPTY
37158: LIST
37159: LIST
37160: PUSH
37161: LD_INT 0
37163: PUSH
37164: LD_INT 2
37166: PUSH
37167: EMPTY
37168: LIST
37169: LIST
37170: PUSH
37171: LD_INT 1
37173: NEG
37174: PUSH
37175: LD_INT 1
37177: PUSH
37178: EMPTY
37179: LIST
37180: LIST
37181: PUSH
37182: LD_INT 2
37184: NEG
37185: PUSH
37186: LD_INT 1
37188: NEG
37189: PUSH
37190: EMPTY
37191: LIST
37192: LIST
37193: PUSH
37194: LD_INT 2
37196: NEG
37197: PUSH
37198: LD_INT 2
37200: NEG
37201: PUSH
37202: EMPTY
37203: LIST
37204: LIST
37205: PUSH
37206: LD_INT 2
37208: NEG
37209: PUSH
37210: LD_INT 3
37212: NEG
37213: PUSH
37214: EMPTY
37215: LIST
37216: LIST
37217: PUSH
37218: LD_INT 1
37220: NEG
37221: PUSH
37222: LD_INT 3
37224: NEG
37225: PUSH
37226: EMPTY
37227: LIST
37228: LIST
37229: PUSH
37230: LD_INT 0
37232: PUSH
37233: LD_INT 3
37235: NEG
37236: PUSH
37237: EMPTY
37238: LIST
37239: LIST
37240: PUSH
37241: LD_INT 1
37243: PUSH
37244: LD_INT 2
37246: NEG
37247: PUSH
37248: EMPTY
37249: LIST
37250: LIST
37251: PUSH
37252: LD_INT 3
37254: PUSH
37255: LD_INT 2
37257: PUSH
37258: EMPTY
37259: LIST
37260: LIST
37261: PUSH
37262: LD_INT 3
37264: PUSH
37265: LD_INT 3
37267: PUSH
37268: EMPTY
37269: LIST
37270: LIST
37271: PUSH
37272: LD_INT 2
37274: PUSH
37275: LD_INT 3
37277: PUSH
37278: EMPTY
37279: LIST
37280: LIST
37281: PUSH
37282: LD_INT 1
37284: PUSH
37285: LD_INT 3
37287: PUSH
37288: EMPTY
37289: LIST
37290: LIST
37291: PUSH
37292: LD_INT 0
37294: PUSH
37295: LD_INT 3
37297: PUSH
37298: EMPTY
37299: LIST
37300: LIST
37301: PUSH
37302: LD_INT 1
37304: NEG
37305: PUSH
37306: LD_INT 2
37308: PUSH
37309: EMPTY
37310: LIST
37311: LIST
37312: PUSH
37313: LD_INT 3
37315: NEG
37316: PUSH
37317: LD_INT 2
37319: NEG
37320: PUSH
37321: EMPTY
37322: LIST
37323: LIST
37324: PUSH
37325: LD_INT 3
37327: NEG
37328: PUSH
37329: LD_INT 3
37331: NEG
37332: PUSH
37333: EMPTY
37334: LIST
37335: LIST
37336: PUSH
37337: EMPTY
37338: LIST
37339: LIST
37340: LIST
37341: LIST
37342: LIST
37343: LIST
37344: LIST
37345: LIST
37346: LIST
37347: LIST
37348: LIST
37349: LIST
37350: LIST
37351: LIST
37352: LIST
37353: LIST
37354: LIST
37355: LIST
37356: LIST
37357: LIST
37358: LIST
37359: LIST
37360: LIST
37361: LIST
37362: LIST
37363: LIST
37364: LIST
37365: LIST
37366: LIST
37367: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37368: LD_ADDR_VAR 0 43
37372: PUSH
37373: LD_INT 0
37375: PUSH
37376: LD_INT 0
37378: PUSH
37379: EMPTY
37380: LIST
37381: LIST
37382: PUSH
37383: LD_INT 0
37385: PUSH
37386: LD_INT 1
37388: NEG
37389: PUSH
37390: EMPTY
37391: LIST
37392: LIST
37393: PUSH
37394: LD_INT 1
37396: PUSH
37397: LD_INT 0
37399: PUSH
37400: EMPTY
37401: LIST
37402: LIST
37403: PUSH
37404: LD_INT 1
37406: PUSH
37407: LD_INT 1
37409: PUSH
37410: EMPTY
37411: LIST
37412: LIST
37413: PUSH
37414: LD_INT 0
37416: PUSH
37417: LD_INT 1
37419: PUSH
37420: EMPTY
37421: LIST
37422: LIST
37423: PUSH
37424: LD_INT 1
37426: NEG
37427: PUSH
37428: LD_INT 0
37430: PUSH
37431: EMPTY
37432: LIST
37433: LIST
37434: PUSH
37435: LD_INT 1
37437: NEG
37438: PUSH
37439: LD_INT 1
37441: NEG
37442: PUSH
37443: EMPTY
37444: LIST
37445: LIST
37446: PUSH
37447: LD_INT 1
37449: NEG
37450: PUSH
37451: LD_INT 2
37453: NEG
37454: PUSH
37455: EMPTY
37456: LIST
37457: LIST
37458: PUSH
37459: LD_INT 0
37461: PUSH
37462: LD_INT 2
37464: NEG
37465: PUSH
37466: EMPTY
37467: LIST
37468: LIST
37469: PUSH
37470: LD_INT 1
37472: PUSH
37473: LD_INT 1
37475: NEG
37476: PUSH
37477: EMPTY
37478: LIST
37479: LIST
37480: PUSH
37481: LD_INT 2
37483: PUSH
37484: LD_INT 0
37486: PUSH
37487: EMPTY
37488: LIST
37489: LIST
37490: PUSH
37491: LD_INT 2
37493: PUSH
37494: LD_INT 1
37496: PUSH
37497: EMPTY
37498: LIST
37499: LIST
37500: PUSH
37501: LD_INT 1
37503: PUSH
37504: LD_INT 2
37506: PUSH
37507: EMPTY
37508: LIST
37509: LIST
37510: PUSH
37511: LD_INT 0
37513: PUSH
37514: LD_INT 2
37516: PUSH
37517: EMPTY
37518: LIST
37519: LIST
37520: PUSH
37521: LD_INT 1
37523: NEG
37524: PUSH
37525: LD_INT 1
37527: PUSH
37528: EMPTY
37529: LIST
37530: LIST
37531: PUSH
37532: LD_INT 2
37534: NEG
37535: PUSH
37536: LD_INT 0
37538: PUSH
37539: EMPTY
37540: LIST
37541: LIST
37542: PUSH
37543: LD_INT 2
37545: NEG
37546: PUSH
37547: LD_INT 1
37549: NEG
37550: PUSH
37551: EMPTY
37552: LIST
37553: LIST
37554: PUSH
37555: LD_INT 1
37557: NEG
37558: PUSH
37559: LD_INT 3
37561: NEG
37562: PUSH
37563: EMPTY
37564: LIST
37565: LIST
37566: PUSH
37567: LD_INT 0
37569: PUSH
37570: LD_INT 3
37572: NEG
37573: PUSH
37574: EMPTY
37575: LIST
37576: LIST
37577: PUSH
37578: LD_INT 1
37580: PUSH
37581: LD_INT 2
37583: NEG
37584: PUSH
37585: EMPTY
37586: LIST
37587: LIST
37588: PUSH
37589: LD_INT 2
37591: PUSH
37592: LD_INT 1
37594: NEG
37595: PUSH
37596: EMPTY
37597: LIST
37598: LIST
37599: PUSH
37600: LD_INT 3
37602: PUSH
37603: LD_INT 0
37605: PUSH
37606: EMPTY
37607: LIST
37608: LIST
37609: PUSH
37610: LD_INT 3
37612: PUSH
37613: LD_INT 1
37615: PUSH
37616: EMPTY
37617: LIST
37618: LIST
37619: PUSH
37620: LD_INT 1
37622: PUSH
37623: LD_INT 3
37625: PUSH
37626: EMPTY
37627: LIST
37628: LIST
37629: PUSH
37630: LD_INT 0
37632: PUSH
37633: LD_INT 3
37635: PUSH
37636: EMPTY
37637: LIST
37638: LIST
37639: PUSH
37640: LD_INT 1
37642: NEG
37643: PUSH
37644: LD_INT 2
37646: PUSH
37647: EMPTY
37648: LIST
37649: LIST
37650: PUSH
37651: LD_INT 2
37653: NEG
37654: PUSH
37655: LD_INT 1
37657: PUSH
37658: EMPTY
37659: LIST
37660: LIST
37661: PUSH
37662: LD_INT 3
37664: NEG
37665: PUSH
37666: LD_INT 0
37668: PUSH
37669: EMPTY
37670: LIST
37671: LIST
37672: PUSH
37673: LD_INT 3
37675: NEG
37676: PUSH
37677: LD_INT 1
37679: NEG
37680: PUSH
37681: EMPTY
37682: LIST
37683: LIST
37684: PUSH
37685: EMPTY
37686: LIST
37687: LIST
37688: LIST
37689: LIST
37690: LIST
37691: LIST
37692: LIST
37693: LIST
37694: LIST
37695: LIST
37696: LIST
37697: LIST
37698: LIST
37699: LIST
37700: LIST
37701: LIST
37702: LIST
37703: LIST
37704: LIST
37705: LIST
37706: LIST
37707: LIST
37708: LIST
37709: LIST
37710: LIST
37711: LIST
37712: LIST
37713: LIST
37714: LIST
37715: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37716: LD_ADDR_VAR 0 44
37720: PUSH
37721: LD_INT 0
37723: PUSH
37724: LD_INT 0
37726: PUSH
37727: EMPTY
37728: LIST
37729: LIST
37730: PUSH
37731: LD_INT 0
37733: PUSH
37734: LD_INT 1
37736: NEG
37737: PUSH
37738: EMPTY
37739: LIST
37740: LIST
37741: PUSH
37742: LD_INT 1
37744: PUSH
37745: LD_INT 0
37747: PUSH
37748: EMPTY
37749: LIST
37750: LIST
37751: PUSH
37752: LD_INT 1
37754: PUSH
37755: LD_INT 1
37757: PUSH
37758: EMPTY
37759: LIST
37760: LIST
37761: PUSH
37762: LD_INT 0
37764: PUSH
37765: LD_INT 1
37767: PUSH
37768: EMPTY
37769: LIST
37770: LIST
37771: PUSH
37772: LD_INT 1
37774: NEG
37775: PUSH
37776: LD_INT 0
37778: PUSH
37779: EMPTY
37780: LIST
37781: LIST
37782: PUSH
37783: LD_INT 1
37785: NEG
37786: PUSH
37787: LD_INT 1
37789: NEG
37790: PUSH
37791: EMPTY
37792: LIST
37793: LIST
37794: PUSH
37795: LD_INT 1
37797: NEG
37798: PUSH
37799: LD_INT 2
37801: NEG
37802: PUSH
37803: EMPTY
37804: LIST
37805: LIST
37806: PUSH
37807: LD_INT 1
37809: PUSH
37810: LD_INT 1
37812: NEG
37813: PUSH
37814: EMPTY
37815: LIST
37816: LIST
37817: PUSH
37818: LD_INT 2
37820: PUSH
37821: LD_INT 0
37823: PUSH
37824: EMPTY
37825: LIST
37826: LIST
37827: PUSH
37828: LD_INT 2
37830: PUSH
37831: LD_INT 1
37833: PUSH
37834: EMPTY
37835: LIST
37836: LIST
37837: PUSH
37838: LD_INT 2
37840: PUSH
37841: LD_INT 2
37843: PUSH
37844: EMPTY
37845: LIST
37846: LIST
37847: PUSH
37848: LD_INT 1
37850: PUSH
37851: LD_INT 2
37853: PUSH
37854: EMPTY
37855: LIST
37856: LIST
37857: PUSH
37858: LD_INT 1
37860: NEG
37861: PUSH
37862: LD_INT 1
37864: PUSH
37865: EMPTY
37866: LIST
37867: LIST
37868: PUSH
37869: LD_INT 2
37871: NEG
37872: PUSH
37873: LD_INT 0
37875: PUSH
37876: EMPTY
37877: LIST
37878: LIST
37879: PUSH
37880: LD_INT 2
37882: NEG
37883: PUSH
37884: LD_INT 1
37886: NEG
37887: PUSH
37888: EMPTY
37889: LIST
37890: LIST
37891: PUSH
37892: LD_INT 2
37894: NEG
37895: PUSH
37896: LD_INT 2
37898: NEG
37899: PUSH
37900: EMPTY
37901: LIST
37902: LIST
37903: PUSH
37904: LD_INT 2
37906: NEG
37907: PUSH
37908: LD_INT 3
37910: NEG
37911: PUSH
37912: EMPTY
37913: LIST
37914: LIST
37915: PUSH
37916: LD_INT 2
37918: PUSH
37919: LD_INT 1
37921: NEG
37922: PUSH
37923: EMPTY
37924: LIST
37925: LIST
37926: PUSH
37927: LD_INT 3
37929: PUSH
37930: LD_INT 0
37932: PUSH
37933: EMPTY
37934: LIST
37935: LIST
37936: PUSH
37937: LD_INT 3
37939: PUSH
37940: LD_INT 1
37942: PUSH
37943: EMPTY
37944: LIST
37945: LIST
37946: PUSH
37947: LD_INT 3
37949: PUSH
37950: LD_INT 2
37952: PUSH
37953: EMPTY
37954: LIST
37955: LIST
37956: PUSH
37957: LD_INT 3
37959: PUSH
37960: LD_INT 3
37962: PUSH
37963: EMPTY
37964: LIST
37965: LIST
37966: PUSH
37967: LD_INT 2
37969: PUSH
37970: LD_INT 3
37972: PUSH
37973: EMPTY
37974: LIST
37975: LIST
37976: PUSH
37977: LD_INT 2
37979: NEG
37980: PUSH
37981: LD_INT 1
37983: PUSH
37984: EMPTY
37985: LIST
37986: LIST
37987: PUSH
37988: LD_INT 3
37990: NEG
37991: PUSH
37992: LD_INT 0
37994: PUSH
37995: EMPTY
37996: LIST
37997: LIST
37998: PUSH
37999: LD_INT 3
38001: NEG
38002: PUSH
38003: LD_INT 1
38005: NEG
38006: PUSH
38007: EMPTY
38008: LIST
38009: LIST
38010: PUSH
38011: LD_INT 3
38013: NEG
38014: PUSH
38015: LD_INT 2
38017: NEG
38018: PUSH
38019: EMPTY
38020: LIST
38021: LIST
38022: PUSH
38023: LD_INT 3
38025: NEG
38026: PUSH
38027: LD_INT 3
38029: NEG
38030: PUSH
38031: EMPTY
38032: LIST
38033: LIST
38034: PUSH
38035: EMPTY
38036: LIST
38037: LIST
38038: LIST
38039: LIST
38040: LIST
38041: LIST
38042: LIST
38043: LIST
38044: LIST
38045: LIST
38046: LIST
38047: LIST
38048: LIST
38049: LIST
38050: LIST
38051: LIST
38052: LIST
38053: LIST
38054: LIST
38055: LIST
38056: LIST
38057: LIST
38058: LIST
38059: LIST
38060: LIST
38061: LIST
38062: LIST
38063: LIST
38064: LIST
38065: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38066: LD_ADDR_VAR 0 45
38070: PUSH
38071: LD_INT 0
38073: PUSH
38074: LD_INT 0
38076: PUSH
38077: EMPTY
38078: LIST
38079: LIST
38080: PUSH
38081: LD_INT 0
38083: PUSH
38084: LD_INT 1
38086: NEG
38087: PUSH
38088: EMPTY
38089: LIST
38090: LIST
38091: PUSH
38092: LD_INT 1
38094: PUSH
38095: LD_INT 0
38097: PUSH
38098: EMPTY
38099: LIST
38100: LIST
38101: PUSH
38102: LD_INT 1
38104: PUSH
38105: LD_INT 1
38107: PUSH
38108: EMPTY
38109: LIST
38110: LIST
38111: PUSH
38112: LD_INT 0
38114: PUSH
38115: LD_INT 1
38117: PUSH
38118: EMPTY
38119: LIST
38120: LIST
38121: PUSH
38122: LD_INT 1
38124: NEG
38125: PUSH
38126: LD_INT 0
38128: PUSH
38129: EMPTY
38130: LIST
38131: LIST
38132: PUSH
38133: LD_INT 1
38135: NEG
38136: PUSH
38137: LD_INT 1
38139: NEG
38140: PUSH
38141: EMPTY
38142: LIST
38143: LIST
38144: PUSH
38145: LD_INT 1
38147: NEG
38148: PUSH
38149: LD_INT 2
38151: NEG
38152: PUSH
38153: EMPTY
38154: LIST
38155: LIST
38156: PUSH
38157: LD_INT 0
38159: PUSH
38160: LD_INT 2
38162: NEG
38163: PUSH
38164: EMPTY
38165: LIST
38166: LIST
38167: PUSH
38168: LD_INT 1
38170: PUSH
38171: LD_INT 1
38173: NEG
38174: PUSH
38175: EMPTY
38176: LIST
38177: LIST
38178: PUSH
38179: LD_INT 2
38181: PUSH
38182: LD_INT 1
38184: PUSH
38185: EMPTY
38186: LIST
38187: LIST
38188: PUSH
38189: LD_INT 2
38191: PUSH
38192: LD_INT 2
38194: PUSH
38195: EMPTY
38196: LIST
38197: LIST
38198: PUSH
38199: LD_INT 1
38201: PUSH
38202: LD_INT 2
38204: PUSH
38205: EMPTY
38206: LIST
38207: LIST
38208: PUSH
38209: LD_INT 0
38211: PUSH
38212: LD_INT 2
38214: PUSH
38215: EMPTY
38216: LIST
38217: LIST
38218: PUSH
38219: LD_INT 1
38221: NEG
38222: PUSH
38223: LD_INT 1
38225: PUSH
38226: EMPTY
38227: LIST
38228: LIST
38229: PUSH
38230: LD_INT 2
38232: NEG
38233: PUSH
38234: LD_INT 1
38236: NEG
38237: PUSH
38238: EMPTY
38239: LIST
38240: LIST
38241: PUSH
38242: LD_INT 2
38244: NEG
38245: PUSH
38246: LD_INT 2
38248: NEG
38249: PUSH
38250: EMPTY
38251: LIST
38252: LIST
38253: PUSH
38254: LD_INT 2
38256: NEG
38257: PUSH
38258: LD_INT 3
38260: NEG
38261: PUSH
38262: EMPTY
38263: LIST
38264: LIST
38265: PUSH
38266: LD_INT 1
38268: NEG
38269: PUSH
38270: LD_INT 3
38272: NEG
38273: PUSH
38274: EMPTY
38275: LIST
38276: LIST
38277: PUSH
38278: LD_INT 0
38280: PUSH
38281: LD_INT 3
38283: NEG
38284: PUSH
38285: EMPTY
38286: LIST
38287: LIST
38288: PUSH
38289: LD_INT 1
38291: PUSH
38292: LD_INT 2
38294: NEG
38295: PUSH
38296: EMPTY
38297: LIST
38298: LIST
38299: PUSH
38300: LD_INT 3
38302: PUSH
38303: LD_INT 2
38305: PUSH
38306: EMPTY
38307: LIST
38308: LIST
38309: PUSH
38310: LD_INT 3
38312: PUSH
38313: LD_INT 3
38315: PUSH
38316: EMPTY
38317: LIST
38318: LIST
38319: PUSH
38320: LD_INT 2
38322: PUSH
38323: LD_INT 3
38325: PUSH
38326: EMPTY
38327: LIST
38328: LIST
38329: PUSH
38330: LD_INT 1
38332: PUSH
38333: LD_INT 3
38335: PUSH
38336: EMPTY
38337: LIST
38338: LIST
38339: PUSH
38340: LD_INT 0
38342: PUSH
38343: LD_INT 3
38345: PUSH
38346: EMPTY
38347: LIST
38348: LIST
38349: PUSH
38350: LD_INT 1
38352: NEG
38353: PUSH
38354: LD_INT 2
38356: PUSH
38357: EMPTY
38358: LIST
38359: LIST
38360: PUSH
38361: LD_INT 3
38363: NEG
38364: PUSH
38365: LD_INT 2
38367: NEG
38368: PUSH
38369: EMPTY
38370: LIST
38371: LIST
38372: PUSH
38373: LD_INT 3
38375: NEG
38376: PUSH
38377: LD_INT 3
38379: NEG
38380: PUSH
38381: EMPTY
38382: LIST
38383: LIST
38384: PUSH
38385: EMPTY
38386: LIST
38387: LIST
38388: LIST
38389: LIST
38390: LIST
38391: LIST
38392: LIST
38393: LIST
38394: LIST
38395: LIST
38396: LIST
38397: LIST
38398: LIST
38399: LIST
38400: LIST
38401: LIST
38402: LIST
38403: LIST
38404: LIST
38405: LIST
38406: LIST
38407: LIST
38408: LIST
38409: LIST
38410: LIST
38411: LIST
38412: LIST
38413: LIST
38414: LIST
38415: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38416: LD_ADDR_VAR 0 46
38420: PUSH
38421: LD_INT 0
38423: PUSH
38424: LD_INT 0
38426: PUSH
38427: EMPTY
38428: LIST
38429: LIST
38430: PUSH
38431: LD_INT 0
38433: PUSH
38434: LD_INT 1
38436: NEG
38437: PUSH
38438: EMPTY
38439: LIST
38440: LIST
38441: PUSH
38442: LD_INT 1
38444: PUSH
38445: LD_INT 0
38447: PUSH
38448: EMPTY
38449: LIST
38450: LIST
38451: PUSH
38452: LD_INT 1
38454: PUSH
38455: LD_INT 1
38457: PUSH
38458: EMPTY
38459: LIST
38460: LIST
38461: PUSH
38462: LD_INT 0
38464: PUSH
38465: LD_INT 1
38467: PUSH
38468: EMPTY
38469: LIST
38470: LIST
38471: PUSH
38472: LD_INT 1
38474: NEG
38475: PUSH
38476: LD_INT 0
38478: PUSH
38479: EMPTY
38480: LIST
38481: LIST
38482: PUSH
38483: LD_INT 1
38485: NEG
38486: PUSH
38487: LD_INT 1
38489: NEG
38490: PUSH
38491: EMPTY
38492: LIST
38493: LIST
38494: PUSH
38495: LD_INT 1
38497: NEG
38498: PUSH
38499: LD_INT 2
38501: NEG
38502: PUSH
38503: EMPTY
38504: LIST
38505: LIST
38506: PUSH
38507: LD_INT 0
38509: PUSH
38510: LD_INT 2
38512: NEG
38513: PUSH
38514: EMPTY
38515: LIST
38516: LIST
38517: PUSH
38518: LD_INT 1
38520: PUSH
38521: LD_INT 1
38523: NEG
38524: PUSH
38525: EMPTY
38526: LIST
38527: LIST
38528: PUSH
38529: LD_INT 2
38531: PUSH
38532: LD_INT 0
38534: PUSH
38535: EMPTY
38536: LIST
38537: LIST
38538: PUSH
38539: LD_INT 2
38541: PUSH
38542: LD_INT 1
38544: PUSH
38545: EMPTY
38546: LIST
38547: LIST
38548: PUSH
38549: LD_INT 1
38551: PUSH
38552: LD_INT 2
38554: PUSH
38555: EMPTY
38556: LIST
38557: LIST
38558: PUSH
38559: LD_INT 0
38561: PUSH
38562: LD_INT 2
38564: PUSH
38565: EMPTY
38566: LIST
38567: LIST
38568: PUSH
38569: LD_INT 1
38571: NEG
38572: PUSH
38573: LD_INT 1
38575: PUSH
38576: EMPTY
38577: LIST
38578: LIST
38579: PUSH
38580: LD_INT 2
38582: NEG
38583: PUSH
38584: LD_INT 0
38586: PUSH
38587: EMPTY
38588: LIST
38589: LIST
38590: PUSH
38591: LD_INT 2
38593: NEG
38594: PUSH
38595: LD_INT 1
38597: NEG
38598: PUSH
38599: EMPTY
38600: LIST
38601: LIST
38602: PUSH
38603: LD_INT 1
38605: NEG
38606: PUSH
38607: LD_INT 3
38609: NEG
38610: PUSH
38611: EMPTY
38612: LIST
38613: LIST
38614: PUSH
38615: LD_INT 0
38617: PUSH
38618: LD_INT 3
38620: NEG
38621: PUSH
38622: EMPTY
38623: LIST
38624: LIST
38625: PUSH
38626: LD_INT 1
38628: PUSH
38629: LD_INT 2
38631: NEG
38632: PUSH
38633: EMPTY
38634: LIST
38635: LIST
38636: PUSH
38637: LD_INT 2
38639: PUSH
38640: LD_INT 1
38642: NEG
38643: PUSH
38644: EMPTY
38645: LIST
38646: LIST
38647: PUSH
38648: LD_INT 3
38650: PUSH
38651: LD_INT 0
38653: PUSH
38654: EMPTY
38655: LIST
38656: LIST
38657: PUSH
38658: LD_INT 3
38660: PUSH
38661: LD_INT 1
38663: PUSH
38664: EMPTY
38665: LIST
38666: LIST
38667: PUSH
38668: LD_INT 1
38670: PUSH
38671: LD_INT 3
38673: PUSH
38674: EMPTY
38675: LIST
38676: LIST
38677: PUSH
38678: LD_INT 0
38680: PUSH
38681: LD_INT 3
38683: PUSH
38684: EMPTY
38685: LIST
38686: LIST
38687: PUSH
38688: LD_INT 1
38690: NEG
38691: PUSH
38692: LD_INT 2
38694: PUSH
38695: EMPTY
38696: LIST
38697: LIST
38698: PUSH
38699: LD_INT 2
38701: NEG
38702: PUSH
38703: LD_INT 1
38705: PUSH
38706: EMPTY
38707: LIST
38708: LIST
38709: PUSH
38710: LD_INT 3
38712: NEG
38713: PUSH
38714: LD_INT 0
38716: PUSH
38717: EMPTY
38718: LIST
38719: LIST
38720: PUSH
38721: LD_INT 3
38723: NEG
38724: PUSH
38725: LD_INT 1
38727: NEG
38728: PUSH
38729: EMPTY
38730: LIST
38731: LIST
38732: PUSH
38733: EMPTY
38734: LIST
38735: LIST
38736: LIST
38737: LIST
38738: LIST
38739: LIST
38740: LIST
38741: LIST
38742: LIST
38743: LIST
38744: LIST
38745: LIST
38746: LIST
38747: LIST
38748: LIST
38749: LIST
38750: LIST
38751: LIST
38752: LIST
38753: LIST
38754: LIST
38755: LIST
38756: LIST
38757: LIST
38758: LIST
38759: LIST
38760: LIST
38761: LIST
38762: LIST
38763: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38764: LD_ADDR_VAR 0 47
38768: PUSH
38769: LD_INT 0
38771: PUSH
38772: LD_INT 0
38774: PUSH
38775: EMPTY
38776: LIST
38777: LIST
38778: PUSH
38779: LD_INT 0
38781: PUSH
38782: LD_INT 1
38784: NEG
38785: PUSH
38786: EMPTY
38787: LIST
38788: LIST
38789: PUSH
38790: LD_INT 1
38792: PUSH
38793: LD_INT 0
38795: PUSH
38796: EMPTY
38797: LIST
38798: LIST
38799: PUSH
38800: LD_INT 1
38802: PUSH
38803: LD_INT 1
38805: PUSH
38806: EMPTY
38807: LIST
38808: LIST
38809: PUSH
38810: LD_INT 0
38812: PUSH
38813: LD_INT 1
38815: PUSH
38816: EMPTY
38817: LIST
38818: LIST
38819: PUSH
38820: LD_INT 1
38822: NEG
38823: PUSH
38824: LD_INT 0
38826: PUSH
38827: EMPTY
38828: LIST
38829: LIST
38830: PUSH
38831: LD_INT 1
38833: NEG
38834: PUSH
38835: LD_INT 1
38837: NEG
38838: PUSH
38839: EMPTY
38840: LIST
38841: LIST
38842: PUSH
38843: LD_INT 1
38845: NEG
38846: PUSH
38847: LD_INT 2
38849: NEG
38850: PUSH
38851: EMPTY
38852: LIST
38853: LIST
38854: PUSH
38855: LD_INT 0
38857: PUSH
38858: LD_INT 2
38860: NEG
38861: PUSH
38862: EMPTY
38863: LIST
38864: LIST
38865: PUSH
38866: LD_INT 1
38868: PUSH
38869: LD_INT 1
38871: NEG
38872: PUSH
38873: EMPTY
38874: LIST
38875: LIST
38876: PUSH
38877: LD_INT 2
38879: NEG
38880: PUSH
38881: LD_INT 1
38883: NEG
38884: PUSH
38885: EMPTY
38886: LIST
38887: LIST
38888: PUSH
38889: LD_INT 2
38891: NEG
38892: PUSH
38893: LD_INT 2
38895: NEG
38896: PUSH
38897: EMPTY
38898: LIST
38899: LIST
38900: PUSH
38901: EMPTY
38902: LIST
38903: LIST
38904: LIST
38905: LIST
38906: LIST
38907: LIST
38908: LIST
38909: LIST
38910: LIST
38911: LIST
38912: LIST
38913: LIST
38914: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
38915: LD_ADDR_VAR 0 48
38919: PUSH
38920: LD_INT 0
38922: PUSH
38923: LD_INT 0
38925: PUSH
38926: EMPTY
38927: LIST
38928: LIST
38929: PUSH
38930: LD_INT 0
38932: PUSH
38933: LD_INT 1
38935: NEG
38936: PUSH
38937: EMPTY
38938: LIST
38939: LIST
38940: PUSH
38941: LD_INT 1
38943: PUSH
38944: LD_INT 0
38946: PUSH
38947: EMPTY
38948: LIST
38949: LIST
38950: PUSH
38951: LD_INT 1
38953: PUSH
38954: LD_INT 1
38956: PUSH
38957: EMPTY
38958: LIST
38959: LIST
38960: PUSH
38961: LD_INT 0
38963: PUSH
38964: LD_INT 1
38966: PUSH
38967: EMPTY
38968: LIST
38969: LIST
38970: PUSH
38971: LD_INT 1
38973: NEG
38974: PUSH
38975: LD_INT 0
38977: PUSH
38978: EMPTY
38979: LIST
38980: LIST
38981: PUSH
38982: LD_INT 1
38984: NEG
38985: PUSH
38986: LD_INT 1
38988: NEG
38989: PUSH
38990: EMPTY
38991: LIST
38992: LIST
38993: PUSH
38994: LD_INT 1
38996: NEG
38997: PUSH
38998: LD_INT 2
39000: NEG
39001: PUSH
39002: EMPTY
39003: LIST
39004: LIST
39005: PUSH
39006: LD_INT 0
39008: PUSH
39009: LD_INT 2
39011: NEG
39012: PUSH
39013: EMPTY
39014: LIST
39015: LIST
39016: PUSH
39017: LD_INT 1
39019: PUSH
39020: LD_INT 1
39022: NEG
39023: PUSH
39024: EMPTY
39025: LIST
39026: LIST
39027: PUSH
39028: LD_INT 2
39030: PUSH
39031: LD_INT 0
39033: PUSH
39034: EMPTY
39035: LIST
39036: LIST
39037: PUSH
39038: LD_INT 2
39040: PUSH
39041: LD_INT 1
39043: PUSH
39044: EMPTY
39045: LIST
39046: LIST
39047: PUSH
39048: EMPTY
39049: LIST
39050: LIST
39051: LIST
39052: LIST
39053: LIST
39054: LIST
39055: LIST
39056: LIST
39057: LIST
39058: LIST
39059: LIST
39060: LIST
39061: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
39062: LD_ADDR_VAR 0 49
39066: PUSH
39067: LD_INT 0
39069: PUSH
39070: LD_INT 0
39072: PUSH
39073: EMPTY
39074: LIST
39075: LIST
39076: PUSH
39077: LD_INT 0
39079: PUSH
39080: LD_INT 1
39082: NEG
39083: PUSH
39084: EMPTY
39085: LIST
39086: LIST
39087: PUSH
39088: LD_INT 1
39090: PUSH
39091: LD_INT 0
39093: PUSH
39094: EMPTY
39095: LIST
39096: LIST
39097: PUSH
39098: LD_INT 1
39100: PUSH
39101: LD_INT 1
39103: PUSH
39104: EMPTY
39105: LIST
39106: LIST
39107: PUSH
39108: LD_INT 0
39110: PUSH
39111: LD_INT 1
39113: PUSH
39114: EMPTY
39115: LIST
39116: LIST
39117: PUSH
39118: LD_INT 1
39120: NEG
39121: PUSH
39122: LD_INT 0
39124: PUSH
39125: EMPTY
39126: LIST
39127: LIST
39128: PUSH
39129: LD_INT 1
39131: NEG
39132: PUSH
39133: LD_INT 1
39135: NEG
39136: PUSH
39137: EMPTY
39138: LIST
39139: LIST
39140: PUSH
39141: LD_INT 1
39143: PUSH
39144: LD_INT 1
39146: NEG
39147: PUSH
39148: EMPTY
39149: LIST
39150: LIST
39151: PUSH
39152: LD_INT 2
39154: PUSH
39155: LD_INT 0
39157: PUSH
39158: EMPTY
39159: LIST
39160: LIST
39161: PUSH
39162: LD_INT 2
39164: PUSH
39165: LD_INT 1
39167: PUSH
39168: EMPTY
39169: LIST
39170: LIST
39171: PUSH
39172: LD_INT 2
39174: PUSH
39175: LD_INT 2
39177: PUSH
39178: EMPTY
39179: LIST
39180: LIST
39181: PUSH
39182: LD_INT 1
39184: PUSH
39185: LD_INT 2
39187: PUSH
39188: EMPTY
39189: LIST
39190: LIST
39191: PUSH
39192: EMPTY
39193: LIST
39194: LIST
39195: LIST
39196: LIST
39197: LIST
39198: LIST
39199: LIST
39200: LIST
39201: LIST
39202: LIST
39203: LIST
39204: LIST
39205: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
39206: LD_ADDR_VAR 0 50
39210: PUSH
39211: LD_INT 0
39213: PUSH
39214: LD_INT 0
39216: PUSH
39217: EMPTY
39218: LIST
39219: LIST
39220: PUSH
39221: LD_INT 0
39223: PUSH
39224: LD_INT 1
39226: NEG
39227: PUSH
39228: EMPTY
39229: LIST
39230: LIST
39231: PUSH
39232: LD_INT 1
39234: PUSH
39235: LD_INT 0
39237: PUSH
39238: EMPTY
39239: LIST
39240: LIST
39241: PUSH
39242: LD_INT 1
39244: PUSH
39245: LD_INT 1
39247: PUSH
39248: EMPTY
39249: LIST
39250: LIST
39251: PUSH
39252: LD_INT 0
39254: PUSH
39255: LD_INT 1
39257: PUSH
39258: EMPTY
39259: LIST
39260: LIST
39261: PUSH
39262: LD_INT 1
39264: NEG
39265: PUSH
39266: LD_INT 0
39268: PUSH
39269: EMPTY
39270: LIST
39271: LIST
39272: PUSH
39273: LD_INT 1
39275: NEG
39276: PUSH
39277: LD_INT 1
39279: NEG
39280: PUSH
39281: EMPTY
39282: LIST
39283: LIST
39284: PUSH
39285: LD_INT 2
39287: PUSH
39288: LD_INT 1
39290: PUSH
39291: EMPTY
39292: LIST
39293: LIST
39294: PUSH
39295: LD_INT 2
39297: PUSH
39298: LD_INT 2
39300: PUSH
39301: EMPTY
39302: LIST
39303: LIST
39304: PUSH
39305: LD_INT 1
39307: PUSH
39308: LD_INT 2
39310: PUSH
39311: EMPTY
39312: LIST
39313: LIST
39314: PUSH
39315: LD_INT 0
39317: PUSH
39318: LD_INT 2
39320: PUSH
39321: EMPTY
39322: LIST
39323: LIST
39324: PUSH
39325: LD_INT 1
39327: NEG
39328: PUSH
39329: LD_INT 1
39331: PUSH
39332: EMPTY
39333: LIST
39334: LIST
39335: PUSH
39336: EMPTY
39337: LIST
39338: LIST
39339: LIST
39340: LIST
39341: LIST
39342: LIST
39343: LIST
39344: LIST
39345: LIST
39346: LIST
39347: LIST
39348: LIST
39349: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
39350: LD_ADDR_VAR 0 51
39354: PUSH
39355: LD_INT 0
39357: PUSH
39358: LD_INT 0
39360: PUSH
39361: EMPTY
39362: LIST
39363: LIST
39364: PUSH
39365: LD_INT 0
39367: PUSH
39368: LD_INT 1
39370: NEG
39371: PUSH
39372: EMPTY
39373: LIST
39374: LIST
39375: PUSH
39376: LD_INT 1
39378: PUSH
39379: LD_INT 0
39381: PUSH
39382: EMPTY
39383: LIST
39384: LIST
39385: PUSH
39386: LD_INT 1
39388: PUSH
39389: LD_INT 1
39391: PUSH
39392: EMPTY
39393: LIST
39394: LIST
39395: PUSH
39396: LD_INT 0
39398: PUSH
39399: LD_INT 1
39401: PUSH
39402: EMPTY
39403: LIST
39404: LIST
39405: PUSH
39406: LD_INT 1
39408: NEG
39409: PUSH
39410: LD_INT 0
39412: PUSH
39413: EMPTY
39414: LIST
39415: LIST
39416: PUSH
39417: LD_INT 1
39419: NEG
39420: PUSH
39421: LD_INT 1
39423: NEG
39424: PUSH
39425: EMPTY
39426: LIST
39427: LIST
39428: PUSH
39429: LD_INT 1
39431: PUSH
39432: LD_INT 2
39434: PUSH
39435: EMPTY
39436: LIST
39437: LIST
39438: PUSH
39439: LD_INT 0
39441: PUSH
39442: LD_INT 2
39444: PUSH
39445: EMPTY
39446: LIST
39447: LIST
39448: PUSH
39449: LD_INT 1
39451: NEG
39452: PUSH
39453: LD_INT 1
39455: PUSH
39456: EMPTY
39457: LIST
39458: LIST
39459: PUSH
39460: LD_INT 2
39462: NEG
39463: PUSH
39464: LD_INT 0
39466: PUSH
39467: EMPTY
39468: LIST
39469: LIST
39470: PUSH
39471: LD_INT 2
39473: NEG
39474: PUSH
39475: LD_INT 1
39477: NEG
39478: PUSH
39479: EMPTY
39480: LIST
39481: LIST
39482: PUSH
39483: EMPTY
39484: LIST
39485: LIST
39486: LIST
39487: LIST
39488: LIST
39489: LIST
39490: LIST
39491: LIST
39492: LIST
39493: LIST
39494: LIST
39495: LIST
39496: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39497: LD_ADDR_VAR 0 52
39501: PUSH
39502: LD_INT 0
39504: PUSH
39505: LD_INT 0
39507: PUSH
39508: EMPTY
39509: LIST
39510: LIST
39511: PUSH
39512: LD_INT 0
39514: PUSH
39515: LD_INT 1
39517: NEG
39518: PUSH
39519: EMPTY
39520: LIST
39521: LIST
39522: PUSH
39523: LD_INT 1
39525: PUSH
39526: LD_INT 0
39528: PUSH
39529: EMPTY
39530: LIST
39531: LIST
39532: PUSH
39533: LD_INT 1
39535: PUSH
39536: LD_INT 1
39538: PUSH
39539: EMPTY
39540: LIST
39541: LIST
39542: PUSH
39543: LD_INT 0
39545: PUSH
39546: LD_INT 1
39548: PUSH
39549: EMPTY
39550: LIST
39551: LIST
39552: PUSH
39553: LD_INT 1
39555: NEG
39556: PUSH
39557: LD_INT 0
39559: PUSH
39560: EMPTY
39561: LIST
39562: LIST
39563: PUSH
39564: LD_INT 1
39566: NEG
39567: PUSH
39568: LD_INT 1
39570: NEG
39571: PUSH
39572: EMPTY
39573: LIST
39574: LIST
39575: PUSH
39576: LD_INT 1
39578: NEG
39579: PUSH
39580: LD_INT 2
39582: NEG
39583: PUSH
39584: EMPTY
39585: LIST
39586: LIST
39587: PUSH
39588: LD_INT 1
39590: NEG
39591: PUSH
39592: LD_INT 1
39594: PUSH
39595: EMPTY
39596: LIST
39597: LIST
39598: PUSH
39599: LD_INT 2
39601: NEG
39602: PUSH
39603: LD_INT 0
39605: PUSH
39606: EMPTY
39607: LIST
39608: LIST
39609: PUSH
39610: LD_INT 2
39612: NEG
39613: PUSH
39614: LD_INT 1
39616: NEG
39617: PUSH
39618: EMPTY
39619: LIST
39620: LIST
39621: PUSH
39622: LD_INT 2
39624: NEG
39625: PUSH
39626: LD_INT 2
39628: NEG
39629: PUSH
39630: EMPTY
39631: LIST
39632: LIST
39633: PUSH
39634: EMPTY
39635: LIST
39636: LIST
39637: LIST
39638: LIST
39639: LIST
39640: LIST
39641: LIST
39642: LIST
39643: LIST
39644: LIST
39645: LIST
39646: LIST
39647: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39648: LD_ADDR_VAR 0 53
39652: PUSH
39653: LD_INT 0
39655: PUSH
39656: LD_INT 0
39658: PUSH
39659: EMPTY
39660: LIST
39661: LIST
39662: PUSH
39663: LD_INT 0
39665: PUSH
39666: LD_INT 1
39668: NEG
39669: PUSH
39670: EMPTY
39671: LIST
39672: LIST
39673: PUSH
39674: LD_INT 1
39676: PUSH
39677: LD_INT 0
39679: PUSH
39680: EMPTY
39681: LIST
39682: LIST
39683: PUSH
39684: LD_INT 1
39686: PUSH
39687: LD_INT 1
39689: PUSH
39690: EMPTY
39691: LIST
39692: LIST
39693: PUSH
39694: LD_INT 0
39696: PUSH
39697: LD_INT 1
39699: PUSH
39700: EMPTY
39701: LIST
39702: LIST
39703: PUSH
39704: LD_INT 1
39706: NEG
39707: PUSH
39708: LD_INT 0
39710: PUSH
39711: EMPTY
39712: LIST
39713: LIST
39714: PUSH
39715: LD_INT 1
39717: NEG
39718: PUSH
39719: LD_INT 1
39721: NEG
39722: PUSH
39723: EMPTY
39724: LIST
39725: LIST
39726: PUSH
39727: LD_INT 1
39729: NEG
39730: PUSH
39731: LD_INT 2
39733: NEG
39734: PUSH
39735: EMPTY
39736: LIST
39737: LIST
39738: PUSH
39739: LD_INT 0
39741: PUSH
39742: LD_INT 2
39744: NEG
39745: PUSH
39746: EMPTY
39747: LIST
39748: LIST
39749: PUSH
39750: LD_INT 1
39752: PUSH
39753: LD_INT 1
39755: NEG
39756: PUSH
39757: EMPTY
39758: LIST
39759: LIST
39760: PUSH
39761: LD_INT 2
39763: PUSH
39764: LD_INT 0
39766: PUSH
39767: EMPTY
39768: LIST
39769: LIST
39770: PUSH
39771: LD_INT 2
39773: PUSH
39774: LD_INT 1
39776: PUSH
39777: EMPTY
39778: LIST
39779: LIST
39780: PUSH
39781: LD_INT 2
39783: PUSH
39784: LD_INT 2
39786: PUSH
39787: EMPTY
39788: LIST
39789: LIST
39790: PUSH
39791: LD_INT 1
39793: PUSH
39794: LD_INT 2
39796: PUSH
39797: EMPTY
39798: LIST
39799: LIST
39800: PUSH
39801: LD_INT 0
39803: PUSH
39804: LD_INT 2
39806: PUSH
39807: EMPTY
39808: LIST
39809: LIST
39810: PUSH
39811: LD_INT 1
39813: NEG
39814: PUSH
39815: LD_INT 1
39817: PUSH
39818: EMPTY
39819: LIST
39820: LIST
39821: PUSH
39822: LD_INT 2
39824: NEG
39825: PUSH
39826: LD_INT 0
39828: PUSH
39829: EMPTY
39830: LIST
39831: LIST
39832: PUSH
39833: LD_INT 2
39835: NEG
39836: PUSH
39837: LD_INT 1
39839: NEG
39840: PUSH
39841: EMPTY
39842: LIST
39843: LIST
39844: PUSH
39845: LD_INT 2
39847: NEG
39848: PUSH
39849: LD_INT 2
39851: NEG
39852: PUSH
39853: EMPTY
39854: LIST
39855: LIST
39856: PUSH
39857: EMPTY
39858: LIST
39859: LIST
39860: LIST
39861: LIST
39862: LIST
39863: LIST
39864: LIST
39865: LIST
39866: LIST
39867: LIST
39868: LIST
39869: LIST
39870: LIST
39871: LIST
39872: LIST
39873: LIST
39874: LIST
39875: LIST
39876: LIST
39877: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39878: LD_ADDR_VAR 0 54
39882: PUSH
39883: LD_INT 0
39885: PUSH
39886: LD_INT 0
39888: PUSH
39889: EMPTY
39890: LIST
39891: LIST
39892: PUSH
39893: LD_INT 0
39895: PUSH
39896: LD_INT 1
39898: NEG
39899: PUSH
39900: EMPTY
39901: LIST
39902: LIST
39903: PUSH
39904: LD_INT 1
39906: PUSH
39907: LD_INT 0
39909: PUSH
39910: EMPTY
39911: LIST
39912: LIST
39913: PUSH
39914: LD_INT 1
39916: PUSH
39917: LD_INT 1
39919: PUSH
39920: EMPTY
39921: LIST
39922: LIST
39923: PUSH
39924: LD_INT 0
39926: PUSH
39927: LD_INT 1
39929: PUSH
39930: EMPTY
39931: LIST
39932: LIST
39933: PUSH
39934: LD_INT 1
39936: NEG
39937: PUSH
39938: LD_INT 0
39940: PUSH
39941: EMPTY
39942: LIST
39943: LIST
39944: PUSH
39945: LD_INT 1
39947: NEG
39948: PUSH
39949: LD_INT 1
39951: NEG
39952: PUSH
39953: EMPTY
39954: LIST
39955: LIST
39956: PUSH
39957: LD_INT 1
39959: NEG
39960: PUSH
39961: LD_INT 2
39963: NEG
39964: PUSH
39965: EMPTY
39966: LIST
39967: LIST
39968: PUSH
39969: LD_INT 0
39971: PUSH
39972: LD_INT 2
39974: NEG
39975: PUSH
39976: EMPTY
39977: LIST
39978: LIST
39979: PUSH
39980: LD_INT 1
39982: PUSH
39983: LD_INT 1
39985: NEG
39986: PUSH
39987: EMPTY
39988: LIST
39989: LIST
39990: PUSH
39991: LD_INT 2
39993: PUSH
39994: LD_INT 0
39996: PUSH
39997: EMPTY
39998: LIST
39999: LIST
40000: PUSH
40001: LD_INT 2
40003: PUSH
40004: LD_INT 1
40006: PUSH
40007: EMPTY
40008: LIST
40009: LIST
40010: PUSH
40011: LD_INT 2
40013: PUSH
40014: LD_INT 2
40016: PUSH
40017: EMPTY
40018: LIST
40019: LIST
40020: PUSH
40021: LD_INT 1
40023: PUSH
40024: LD_INT 2
40026: PUSH
40027: EMPTY
40028: LIST
40029: LIST
40030: PUSH
40031: LD_INT 0
40033: PUSH
40034: LD_INT 2
40036: PUSH
40037: EMPTY
40038: LIST
40039: LIST
40040: PUSH
40041: LD_INT 1
40043: NEG
40044: PUSH
40045: LD_INT 1
40047: PUSH
40048: EMPTY
40049: LIST
40050: LIST
40051: PUSH
40052: LD_INT 2
40054: NEG
40055: PUSH
40056: LD_INT 0
40058: PUSH
40059: EMPTY
40060: LIST
40061: LIST
40062: PUSH
40063: LD_INT 2
40065: NEG
40066: PUSH
40067: LD_INT 1
40069: NEG
40070: PUSH
40071: EMPTY
40072: LIST
40073: LIST
40074: PUSH
40075: LD_INT 2
40077: NEG
40078: PUSH
40079: LD_INT 2
40081: NEG
40082: PUSH
40083: EMPTY
40084: LIST
40085: LIST
40086: PUSH
40087: EMPTY
40088: LIST
40089: LIST
40090: LIST
40091: LIST
40092: LIST
40093: LIST
40094: LIST
40095: LIST
40096: LIST
40097: LIST
40098: LIST
40099: LIST
40100: LIST
40101: LIST
40102: LIST
40103: LIST
40104: LIST
40105: LIST
40106: LIST
40107: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40108: LD_ADDR_VAR 0 55
40112: PUSH
40113: LD_INT 0
40115: PUSH
40116: LD_INT 0
40118: PUSH
40119: EMPTY
40120: LIST
40121: LIST
40122: PUSH
40123: LD_INT 0
40125: PUSH
40126: LD_INT 1
40128: NEG
40129: PUSH
40130: EMPTY
40131: LIST
40132: LIST
40133: PUSH
40134: LD_INT 1
40136: PUSH
40137: LD_INT 0
40139: PUSH
40140: EMPTY
40141: LIST
40142: LIST
40143: PUSH
40144: LD_INT 1
40146: PUSH
40147: LD_INT 1
40149: PUSH
40150: EMPTY
40151: LIST
40152: LIST
40153: PUSH
40154: LD_INT 0
40156: PUSH
40157: LD_INT 1
40159: PUSH
40160: EMPTY
40161: LIST
40162: LIST
40163: PUSH
40164: LD_INT 1
40166: NEG
40167: PUSH
40168: LD_INT 0
40170: PUSH
40171: EMPTY
40172: LIST
40173: LIST
40174: PUSH
40175: LD_INT 1
40177: NEG
40178: PUSH
40179: LD_INT 1
40181: NEG
40182: PUSH
40183: EMPTY
40184: LIST
40185: LIST
40186: PUSH
40187: LD_INT 1
40189: NEG
40190: PUSH
40191: LD_INT 2
40193: NEG
40194: PUSH
40195: EMPTY
40196: LIST
40197: LIST
40198: PUSH
40199: LD_INT 0
40201: PUSH
40202: LD_INT 2
40204: NEG
40205: PUSH
40206: EMPTY
40207: LIST
40208: LIST
40209: PUSH
40210: LD_INT 1
40212: PUSH
40213: LD_INT 1
40215: NEG
40216: PUSH
40217: EMPTY
40218: LIST
40219: LIST
40220: PUSH
40221: LD_INT 2
40223: PUSH
40224: LD_INT 0
40226: PUSH
40227: EMPTY
40228: LIST
40229: LIST
40230: PUSH
40231: LD_INT 2
40233: PUSH
40234: LD_INT 1
40236: PUSH
40237: EMPTY
40238: LIST
40239: LIST
40240: PUSH
40241: LD_INT 2
40243: PUSH
40244: LD_INT 2
40246: PUSH
40247: EMPTY
40248: LIST
40249: LIST
40250: PUSH
40251: LD_INT 1
40253: PUSH
40254: LD_INT 2
40256: PUSH
40257: EMPTY
40258: LIST
40259: LIST
40260: PUSH
40261: LD_INT 0
40263: PUSH
40264: LD_INT 2
40266: PUSH
40267: EMPTY
40268: LIST
40269: LIST
40270: PUSH
40271: LD_INT 1
40273: NEG
40274: PUSH
40275: LD_INT 1
40277: PUSH
40278: EMPTY
40279: LIST
40280: LIST
40281: PUSH
40282: LD_INT 2
40284: NEG
40285: PUSH
40286: LD_INT 0
40288: PUSH
40289: EMPTY
40290: LIST
40291: LIST
40292: PUSH
40293: LD_INT 2
40295: NEG
40296: PUSH
40297: LD_INT 1
40299: NEG
40300: PUSH
40301: EMPTY
40302: LIST
40303: LIST
40304: PUSH
40305: LD_INT 2
40307: NEG
40308: PUSH
40309: LD_INT 2
40311: NEG
40312: PUSH
40313: EMPTY
40314: LIST
40315: LIST
40316: PUSH
40317: EMPTY
40318: LIST
40319: LIST
40320: LIST
40321: LIST
40322: LIST
40323: LIST
40324: LIST
40325: LIST
40326: LIST
40327: LIST
40328: LIST
40329: LIST
40330: LIST
40331: LIST
40332: LIST
40333: LIST
40334: LIST
40335: LIST
40336: LIST
40337: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40338: LD_ADDR_VAR 0 56
40342: PUSH
40343: LD_INT 0
40345: PUSH
40346: LD_INT 0
40348: PUSH
40349: EMPTY
40350: LIST
40351: LIST
40352: PUSH
40353: LD_INT 0
40355: PUSH
40356: LD_INT 1
40358: NEG
40359: PUSH
40360: EMPTY
40361: LIST
40362: LIST
40363: PUSH
40364: LD_INT 1
40366: PUSH
40367: LD_INT 0
40369: PUSH
40370: EMPTY
40371: LIST
40372: LIST
40373: PUSH
40374: LD_INT 1
40376: PUSH
40377: LD_INT 1
40379: PUSH
40380: EMPTY
40381: LIST
40382: LIST
40383: PUSH
40384: LD_INT 0
40386: PUSH
40387: LD_INT 1
40389: PUSH
40390: EMPTY
40391: LIST
40392: LIST
40393: PUSH
40394: LD_INT 1
40396: NEG
40397: PUSH
40398: LD_INT 0
40400: PUSH
40401: EMPTY
40402: LIST
40403: LIST
40404: PUSH
40405: LD_INT 1
40407: NEG
40408: PUSH
40409: LD_INT 1
40411: NEG
40412: PUSH
40413: EMPTY
40414: LIST
40415: LIST
40416: PUSH
40417: LD_INT 1
40419: NEG
40420: PUSH
40421: LD_INT 2
40423: NEG
40424: PUSH
40425: EMPTY
40426: LIST
40427: LIST
40428: PUSH
40429: LD_INT 0
40431: PUSH
40432: LD_INT 2
40434: NEG
40435: PUSH
40436: EMPTY
40437: LIST
40438: LIST
40439: PUSH
40440: LD_INT 1
40442: PUSH
40443: LD_INT 1
40445: NEG
40446: PUSH
40447: EMPTY
40448: LIST
40449: LIST
40450: PUSH
40451: LD_INT 2
40453: PUSH
40454: LD_INT 0
40456: PUSH
40457: EMPTY
40458: LIST
40459: LIST
40460: PUSH
40461: LD_INT 2
40463: PUSH
40464: LD_INT 1
40466: PUSH
40467: EMPTY
40468: LIST
40469: LIST
40470: PUSH
40471: LD_INT 2
40473: PUSH
40474: LD_INT 2
40476: PUSH
40477: EMPTY
40478: LIST
40479: LIST
40480: PUSH
40481: LD_INT 1
40483: PUSH
40484: LD_INT 2
40486: PUSH
40487: EMPTY
40488: LIST
40489: LIST
40490: PUSH
40491: LD_INT 0
40493: PUSH
40494: LD_INT 2
40496: PUSH
40497: EMPTY
40498: LIST
40499: LIST
40500: PUSH
40501: LD_INT 1
40503: NEG
40504: PUSH
40505: LD_INT 1
40507: PUSH
40508: EMPTY
40509: LIST
40510: LIST
40511: PUSH
40512: LD_INT 2
40514: NEG
40515: PUSH
40516: LD_INT 0
40518: PUSH
40519: EMPTY
40520: LIST
40521: LIST
40522: PUSH
40523: LD_INT 2
40525: NEG
40526: PUSH
40527: LD_INT 1
40529: NEG
40530: PUSH
40531: EMPTY
40532: LIST
40533: LIST
40534: PUSH
40535: LD_INT 2
40537: NEG
40538: PUSH
40539: LD_INT 2
40541: NEG
40542: PUSH
40543: EMPTY
40544: LIST
40545: LIST
40546: PUSH
40547: EMPTY
40548: LIST
40549: LIST
40550: LIST
40551: LIST
40552: LIST
40553: LIST
40554: LIST
40555: LIST
40556: LIST
40557: LIST
40558: LIST
40559: LIST
40560: LIST
40561: LIST
40562: LIST
40563: LIST
40564: LIST
40565: LIST
40566: LIST
40567: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40568: LD_ADDR_VAR 0 57
40572: PUSH
40573: LD_INT 0
40575: PUSH
40576: LD_INT 0
40578: PUSH
40579: EMPTY
40580: LIST
40581: LIST
40582: PUSH
40583: LD_INT 0
40585: PUSH
40586: LD_INT 1
40588: NEG
40589: PUSH
40590: EMPTY
40591: LIST
40592: LIST
40593: PUSH
40594: LD_INT 1
40596: PUSH
40597: LD_INT 0
40599: PUSH
40600: EMPTY
40601: LIST
40602: LIST
40603: PUSH
40604: LD_INT 1
40606: PUSH
40607: LD_INT 1
40609: PUSH
40610: EMPTY
40611: LIST
40612: LIST
40613: PUSH
40614: LD_INT 0
40616: PUSH
40617: LD_INT 1
40619: PUSH
40620: EMPTY
40621: LIST
40622: LIST
40623: PUSH
40624: LD_INT 1
40626: NEG
40627: PUSH
40628: LD_INT 0
40630: PUSH
40631: EMPTY
40632: LIST
40633: LIST
40634: PUSH
40635: LD_INT 1
40637: NEG
40638: PUSH
40639: LD_INT 1
40641: NEG
40642: PUSH
40643: EMPTY
40644: LIST
40645: LIST
40646: PUSH
40647: LD_INT 1
40649: NEG
40650: PUSH
40651: LD_INT 2
40653: NEG
40654: PUSH
40655: EMPTY
40656: LIST
40657: LIST
40658: PUSH
40659: LD_INT 0
40661: PUSH
40662: LD_INT 2
40664: NEG
40665: PUSH
40666: EMPTY
40667: LIST
40668: LIST
40669: PUSH
40670: LD_INT 1
40672: PUSH
40673: LD_INT 1
40675: NEG
40676: PUSH
40677: EMPTY
40678: LIST
40679: LIST
40680: PUSH
40681: LD_INT 2
40683: PUSH
40684: LD_INT 0
40686: PUSH
40687: EMPTY
40688: LIST
40689: LIST
40690: PUSH
40691: LD_INT 2
40693: PUSH
40694: LD_INT 1
40696: PUSH
40697: EMPTY
40698: LIST
40699: LIST
40700: PUSH
40701: LD_INT 2
40703: PUSH
40704: LD_INT 2
40706: PUSH
40707: EMPTY
40708: LIST
40709: LIST
40710: PUSH
40711: LD_INT 1
40713: PUSH
40714: LD_INT 2
40716: PUSH
40717: EMPTY
40718: LIST
40719: LIST
40720: PUSH
40721: LD_INT 0
40723: PUSH
40724: LD_INT 2
40726: PUSH
40727: EMPTY
40728: LIST
40729: LIST
40730: PUSH
40731: LD_INT 1
40733: NEG
40734: PUSH
40735: LD_INT 1
40737: PUSH
40738: EMPTY
40739: LIST
40740: LIST
40741: PUSH
40742: LD_INT 2
40744: NEG
40745: PUSH
40746: LD_INT 0
40748: PUSH
40749: EMPTY
40750: LIST
40751: LIST
40752: PUSH
40753: LD_INT 2
40755: NEG
40756: PUSH
40757: LD_INT 1
40759: NEG
40760: PUSH
40761: EMPTY
40762: LIST
40763: LIST
40764: PUSH
40765: LD_INT 2
40767: NEG
40768: PUSH
40769: LD_INT 2
40771: NEG
40772: PUSH
40773: EMPTY
40774: LIST
40775: LIST
40776: PUSH
40777: EMPTY
40778: LIST
40779: LIST
40780: LIST
40781: LIST
40782: LIST
40783: LIST
40784: LIST
40785: LIST
40786: LIST
40787: LIST
40788: LIST
40789: LIST
40790: LIST
40791: LIST
40792: LIST
40793: LIST
40794: LIST
40795: LIST
40796: LIST
40797: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40798: LD_ADDR_VAR 0 58
40802: PUSH
40803: LD_INT 0
40805: PUSH
40806: LD_INT 0
40808: PUSH
40809: EMPTY
40810: LIST
40811: LIST
40812: PUSH
40813: LD_INT 0
40815: PUSH
40816: LD_INT 1
40818: NEG
40819: PUSH
40820: EMPTY
40821: LIST
40822: LIST
40823: PUSH
40824: LD_INT 1
40826: PUSH
40827: LD_INT 0
40829: PUSH
40830: EMPTY
40831: LIST
40832: LIST
40833: PUSH
40834: LD_INT 1
40836: PUSH
40837: LD_INT 1
40839: PUSH
40840: EMPTY
40841: LIST
40842: LIST
40843: PUSH
40844: LD_INT 0
40846: PUSH
40847: LD_INT 1
40849: PUSH
40850: EMPTY
40851: LIST
40852: LIST
40853: PUSH
40854: LD_INT 1
40856: NEG
40857: PUSH
40858: LD_INT 0
40860: PUSH
40861: EMPTY
40862: LIST
40863: LIST
40864: PUSH
40865: LD_INT 1
40867: NEG
40868: PUSH
40869: LD_INT 1
40871: NEG
40872: PUSH
40873: EMPTY
40874: LIST
40875: LIST
40876: PUSH
40877: LD_INT 1
40879: NEG
40880: PUSH
40881: LD_INT 2
40883: NEG
40884: PUSH
40885: EMPTY
40886: LIST
40887: LIST
40888: PUSH
40889: LD_INT 0
40891: PUSH
40892: LD_INT 2
40894: NEG
40895: PUSH
40896: EMPTY
40897: LIST
40898: LIST
40899: PUSH
40900: LD_INT 1
40902: PUSH
40903: LD_INT 1
40905: NEG
40906: PUSH
40907: EMPTY
40908: LIST
40909: LIST
40910: PUSH
40911: LD_INT 2
40913: PUSH
40914: LD_INT 0
40916: PUSH
40917: EMPTY
40918: LIST
40919: LIST
40920: PUSH
40921: LD_INT 2
40923: PUSH
40924: LD_INT 1
40926: PUSH
40927: EMPTY
40928: LIST
40929: LIST
40930: PUSH
40931: LD_INT 2
40933: PUSH
40934: LD_INT 2
40936: PUSH
40937: EMPTY
40938: LIST
40939: LIST
40940: PUSH
40941: LD_INT 1
40943: PUSH
40944: LD_INT 2
40946: PUSH
40947: EMPTY
40948: LIST
40949: LIST
40950: PUSH
40951: LD_INT 0
40953: PUSH
40954: LD_INT 2
40956: PUSH
40957: EMPTY
40958: LIST
40959: LIST
40960: PUSH
40961: LD_INT 1
40963: NEG
40964: PUSH
40965: LD_INT 1
40967: PUSH
40968: EMPTY
40969: LIST
40970: LIST
40971: PUSH
40972: LD_INT 2
40974: NEG
40975: PUSH
40976: LD_INT 0
40978: PUSH
40979: EMPTY
40980: LIST
40981: LIST
40982: PUSH
40983: LD_INT 2
40985: NEG
40986: PUSH
40987: LD_INT 1
40989: NEG
40990: PUSH
40991: EMPTY
40992: LIST
40993: LIST
40994: PUSH
40995: LD_INT 2
40997: NEG
40998: PUSH
40999: LD_INT 2
41001: NEG
41002: PUSH
41003: EMPTY
41004: LIST
41005: LIST
41006: PUSH
41007: EMPTY
41008: LIST
41009: LIST
41010: LIST
41011: LIST
41012: LIST
41013: LIST
41014: LIST
41015: LIST
41016: LIST
41017: LIST
41018: LIST
41019: LIST
41020: LIST
41021: LIST
41022: LIST
41023: LIST
41024: LIST
41025: LIST
41026: LIST
41027: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41028: LD_ADDR_VAR 0 59
41032: PUSH
41033: LD_INT 0
41035: PUSH
41036: LD_INT 0
41038: PUSH
41039: EMPTY
41040: LIST
41041: LIST
41042: PUSH
41043: LD_INT 0
41045: PUSH
41046: LD_INT 1
41048: NEG
41049: PUSH
41050: EMPTY
41051: LIST
41052: LIST
41053: PUSH
41054: LD_INT 1
41056: PUSH
41057: LD_INT 0
41059: PUSH
41060: EMPTY
41061: LIST
41062: LIST
41063: PUSH
41064: LD_INT 1
41066: PUSH
41067: LD_INT 1
41069: PUSH
41070: EMPTY
41071: LIST
41072: LIST
41073: PUSH
41074: LD_INT 0
41076: PUSH
41077: LD_INT 1
41079: PUSH
41080: EMPTY
41081: LIST
41082: LIST
41083: PUSH
41084: LD_INT 1
41086: NEG
41087: PUSH
41088: LD_INT 0
41090: PUSH
41091: EMPTY
41092: LIST
41093: LIST
41094: PUSH
41095: LD_INT 1
41097: NEG
41098: PUSH
41099: LD_INT 1
41101: NEG
41102: PUSH
41103: EMPTY
41104: LIST
41105: LIST
41106: PUSH
41107: EMPTY
41108: LIST
41109: LIST
41110: LIST
41111: LIST
41112: LIST
41113: LIST
41114: LIST
41115: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41116: LD_ADDR_VAR 0 60
41120: PUSH
41121: LD_INT 0
41123: PUSH
41124: LD_INT 0
41126: PUSH
41127: EMPTY
41128: LIST
41129: LIST
41130: PUSH
41131: LD_INT 0
41133: PUSH
41134: LD_INT 1
41136: NEG
41137: PUSH
41138: EMPTY
41139: LIST
41140: LIST
41141: PUSH
41142: LD_INT 1
41144: PUSH
41145: LD_INT 0
41147: PUSH
41148: EMPTY
41149: LIST
41150: LIST
41151: PUSH
41152: LD_INT 1
41154: PUSH
41155: LD_INT 1
41157: PUSH
41158: EMPTY
41159: LIST
41160: LIST
41161: PUSH
41162: LD_INT 0
41164: PUSH
41165: LD_INT 1
41167: PUSH
41168: EMPTY
41169: LIST
41170: LIST
41171: PUSH
41172: LD_INT 1
41174: NEG
41175: PUSH
41176: LD_INT 0
41178: PUSH
41179: EMPTY
41180: LIST
41181: LIST
41182: PUSH
41183: LD_INT 1
41185: NEG
41186: PUSH
41187: LD_INT 1
41189: NEG
41190: PUSH
41191: EMPTY
41192: LIST
41193: LIST
41194: PUSH
41195: EMPTY
41196: LIST
41197: LIST
41198: LIST
41199: LIST
41200: LIST
41201: LIST
41202: LIST
41203: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41204: LD_ADDR_VAR 0 61
41208: PUSH
41209: LD_INT 0
41211: PUSH
41212: LD_INT 0
41214: PUSH
41215: EMPTY
41216: LIST
41217: LIST
41218: PUSH
41219: LD_INT 0
41221: PUSH
41222: LD_INT 1
41224: NEG
41225: PUSH
41226: EMPTY
41227: LIST
41228: LIST
41229: PUSH
41230: LD_INT 1
41232: PUSH
41233: LD_INT 0
41235: PUSH
41236: EMPTY
41237: LIST
41238: LIST
41239: PUSH
41240: LD_INT 1
41242: PUSH
41243: LD_INT 1
41245: PUSH
41246: EMPTY
41247: LIST
41248: LIST
41249: PUSH
41250: LD_INT 0
41252: PUSH
41253: LD_INT 1
41255: PUSH
41256: EMPTY
41257: LIST
41258: LIST
41259: PUSH
41260: LD_INT 1
41262: NEG
41263: PUSH
41264: LD_INT 0
41266: PUSH
41267: EMPTY
41268: LIST
41269: LIST
41270: PUSH
41271: LD_INT 1
41273: NEG
41274: PUSH
41275: LD_INT 1
41277: NEG
41278: PUSH
41279: EMPTY
41280: LIST
41281: LIST
41282: PUSH
41283: EMPTY
41284: LIST
41285: LIST
41286: LIST
41287: LIST
41288: LIST
41289: LIST
41290: LIST
41291: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41292: LD_ADDR_VAR 0 62
41296: PUSH
41297: LD_INT 0
41299: PUSH
41300: LD_INT 0
41302: PUSH
41303: EMPTY
41304: LIST
41305: LIST
41306: PUSH
41307: LD_INT 0
41309: PUSH
41310: LD_INT 1
41312: NEG
41313: PUSH
41314: EMPTY
41315: LIST
41316: LIST
41317: PUSH
41318: LD_INT 1
41320: PUSH
41321: LD_INT 0
41323: PUSH
41324: EMPTY
41325: LIST
41326: LIST
41327: PUSH
41328: LD_INT 1
41330: PUSH
41331: LD_INT 1
41333: PUSH
41334: EMPTY
41335: LIST
41336: LIST
41337: PUSH
41338: LD_INT 0
41340: PUSH
41341: LD_INT 1
41343: PUSH
41344: EMPTY
41345: LIST
41346: LIST
41347: PUSH
41348: LD_INT 1
41350: NEG
41351: PUSH
41352: LD_INT 0
41354: PUSH
41355: EMPTY
41356: LIST
41357: LIST
41358: PUSH
41359: LD_INT 1
41361: NEG
41362: PUSH
41363: LD_INT 1
41365: NEG
41366: PUSH
41367: EMPTY
41368: LIST
41369: LIST
41370: PUSH
41371: EMPTY
41372: LIST
41373: LIST
41374: LIST
41375: LIST
41376: LIST
41377: LIST
41378: LIST
41379: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41380: LD_ADDR_VAR 0 63
41384: PUSH
41385: LD_INT 0
41387: PUSH
41388: LD_INT 0
41390: PUSH
41391: EMPTY
41392: LIST
41393: LIST
41394: PUSH
41395: LD_INT 0
41397: PUSH
41398: LD_INT 1
41400: NEG
41401: PUSH
41402: EMPTY
41403: LIST
41404: LIST
41405: PUSH
41406: LD_INT 1
41408: PUSH
41409: LD_INT 0
41411: PUSH
41412: EMPTY
41413: LIST
41414: LIST
41415: PUSH
41416: LD_INT 1
41418: PUSH
41419: LD_INT 1
41421: PUSH
41422: EMPTY
41423: LIST
41424: LIST
41425: PUSH
41426: LD_INT 0
41428: PUSH
41429: LD_INT 1
41431: PUSH
41432: EMPTY
41433: LIST
41434: LIST
41435: PUSH
41436: LD_INT 1
41438: NEG
41439: PUSH
41440: LD_INT 0
41442: PUSH
41443: EMPTY
41444: LIST
41445: LIST
41446: PUSH
41447: LD_INT 1
41449: NEG
41450: PUSH
41451: LD_INT 1
41453: NEG
41454: PUSH
41455: EMPTY
41456: LIST
41457: LIST
41458: PUSH
41459: EMPTY
41460: LIST
41461: LIST
41462: LIST
41463: LIST
41464: LIST
41465: LIST
41466: LIST
41467: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41468: LD_ADDR_VAR 0 64
41472: PUSH
41473: LD_INT 0
41475: PUSH
41476: LD_INT 0
41478: PUSH
41479: EMPTY
41480: LIST
41481: LIST
41482: PUSH
41483: LD_INT 0
41485: PUSH
41486: LD_INT 1
41488: NEG
41489: PUSH
41490: EMPTY
41491: LIST
41492: LIST
41493: PUSH
41494: LD_INT 1
41496: PUSH
41497: LD_INT 0
41499: PUSH
41500: EMPTY
41501: LIST
41502: LIST
41503: PUSH
41504: LD_INT 1
41506: PUSH
41507: LD_INT 1
41509: PUSH
41510: EMPTY
41511: LIST
41512: LIST
41513: PUSH
41514: LD_INT 0
41516: PUSH
41517: LD_INT 1
41519: PUSH
41520: EMPTY
41521: LIST
41522: LIST
41523: PUSH
41524: LD_INT 1
41526: NEG
41527: PUSH
41528: LD_INT 0
41530: PUSH
41531: EMPTY
41532: LIST
41533: LIST
41534: PUSH
41535: LD_INT 1
41537: NEG
41538: PUSH
41539: LD_INT 1
41541: NEG
41542: PUSH
41543: EMPTY
41544: LIST
41545: LIST
41546: PUSH
41547: EMPTY
41548: LIST
41549: LIST
41550: LIST
41551: LIST
41552: LIST
41553: LIST
41554: LIST
41555: ST_TO_ADDR
// end ; 1 :
41556: GO 47453
41558: LD_INT 1
41560: DOUBLE
41561: EQUAL
41562: IFTRUE 41566
41564: GO 44189
41566: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41567: LD_ADDR_VAR 0 11
41571: PUSH
41572: LD_INT 1
41574: NEG
41575: PUSH
41576: LD_INT 3
41578: NEG
41579: PUSH
41580: EMPTY
41581: LIST
41582: LIST
41583: PUSH
41584: LD_INT 0
41586: PUSH
41587: LD_INT 3
41589: NEG
41590: PUSH
41591: EMPTY
41592: LIST
41593: LIST
41594: PUSH
41595: LD_INT 1
41597: PUSH
41598: LD_INT 2
41600: NEG
41601: PUSH
41602: EMPTY
41603: LIST
41604: LIST
41605: PUSH
41606: EMPTY
41607: LIST
41608: LIST
41609: LIST
41610: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41611: LD_ADDR_VAR 0 12
41615: PUSH
41616: LD_INT 2
41618: PUSH
41619: LD_INT 1
41621: NEG
41622: PUSH
41623: EMPTY
41624: LIST
41625: LIST
41626: PUSH
41627: LD_INT 3
41629: PUSH
41630: LD_INT 0
41632: PUSH
41633: EMPTY
41634: LIST
41635: LIST
41636: PUSH
41637: LD_INT 3
41639: PUSH
41640: LD_INT 1
41642: PUSH
41643: EMPTY
41644: LIST
41645: LIST
41646: PUSH
41647: EMPTY
41648: LIST
41649: LIST
41650: LIST
41651: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41652: LD_ADDR_VAR 0 13
41656: PUSH
41657: LD_INT 3
41659: PUSH
41660: LD_INT 2
41662: PUSH
41663: EMPTY
41664: LIST
41665: LIST
41666: PUSH
41667: LD_INT 3
41669: PUSH
41670: LD_INT 3
41672: PUSH
41673: EMPTY
41674: LIST
41675: LIST
41676: PUSH
41677: LD_INT 2
41679: PUSH
41680: LD_INT 3
41682: PUSH
41683: EMPTY
41684: LIST
41685: LIST
41686: PUSH
41687: EMPTY
41688: LIST
41689: LIST
41690: LIST
41691: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41692: LD_ADDR_VAR 0 14
41696: PUSH
41697: LD_INT 1
41699: PUSH
41700: LD_INT 3
41702: PUSH
41703: EMPTY
41704: LIST
41705: LIST
41706: PUSH
41707: LD_INT 0
41709: PUSH
41710: LD_INT 3
41712: PUSH
41713: EMPTY
41714: LIST
41715: LIST
41716: PUSH
41717: LD_INT 1
41719: NEG
41720: PUSH
41721: LD_INT 2
41723: PUSH
41724: EMPTY
41725: LIST
41726: LIST
41727: PUSH
41728: EMPTY
41729: LIST
41730: LIST
41731: LIST
41732: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41733: LD_ADDR_VAR 0 15
41737: PUSH
41738: LD_INT 2
41740: NEG
41741: PUSH
41742: LD_INT 1
41744: PUSH
41745: EMPTY
41746: LIST
41747: LIST
41748: PUSH
41749: LD_INT 3
41751: NEG
41752: PUSH
41753: LD_INT 0
41755: PUSH
41756: EMPTY
41757: LIST
41758: LIST
41759: PUSH
41760: LD_INT 3
41762: NEG
41763: PUSH
41764: LD_INT 1
41766: NEG
41767: PUSH
41768: EMPTY
41769: LIST
41770: LIST
41771: PUSH
41772: EMPTY
41773: LIST
41774: LIST
41775: LIST
41776: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41777: LD_ADDR_VAR 0 16
41781: PUSH
41782: LD_INT 2
41784: NEG
41785: PUSH
41786: LD_INT 3
41788: NEG
41789: PUSH
41790: EMPTY
41791: LIST
41792: LIST
41793: PUSH
41794: LD_INT 3
41796: NEG
41797: PUSH
41798: LD_INT 2
41800: NEG
41801: PUSH
41802: EMPTY
41803: LIST
41804: LIST
41805: PUSH
41806: LD_INT 3
41808: NEG
41809: PUSH
41810: LD_INT 3
41812: NEG
41813: PUSH
41814: EMPTY
41815: LIST
41816: LIST
41817: PUSH
41818: EMPTY
41819: LIST
41820: LIST
41821: LIST
41822: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41823: LD_ADDR_VAR 0 17
41827: PUSH
41828: LD_INT 1
41830: NEG
41831: PUSH
41832: LD_INT 3
41834: NEG
41835: PUSH
41836: EMPTY
41837: LIST
41838: LIST
41839: PUSH
41840: LD_INT 0
41842: PUSH
41843: LD_INT 3
41845: NEG
41846: PUSH
41847: EMPTY
41848: LIST
41849: LIST
41850: PUSH
41851: LD_INT 1
41853: PUSH
41854: LD_INT 2
41856: NEG
41857: PUSH
41858: EMPTY
41859: LIST
41860: LIST
41861: PUSH
41862: EMPTY
41863: LIST
41864: LIST
41865: LIST
41866: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41867: LD_ADDR_VAR 0 18
41871: PUSH
41872: LD_INT 2
41874: PUSH
41875: LD_INT 1
41877: NEG
41878: PUSH
41879: EMPTY
41880: LIST
41881: LIST
41882: PUSH
41883: LD_INT 3
41885: PUSH
41886: LD_INT 0
41888: PUSH
41889: EMPTY
41890: LIST
41891: LIST
41892: PUSH
41893: LD_INT 3
41895: PUSH
41896: LD_INT 1
41898: PUSH
41899: EMPTY
41900: LIST
41901: LIST
41902: PUSH
41903: EMPTY
41904: LIST
41905: LIST
41906: LIST
41907: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41908: LD_ADDR_VAR 0 19
41912: PUSH
41913: LD_INT 3
41915: PUSH
41916: LD_INT 2
41918: PUSH
41919: EMPTY
41920: LIST
41921: LIST
41922: PUSH
41923: LD_INT 3
41925: PUSH
41926: LD_INT 3
41928: PUSH
41929: EMPTY
41930: LIST
41931: LIST
41932: PUSH
41933: LD_INT 2
41935: PUSH
41936: LD_INT 3
41938: PUSH
41939: EMPTY
41940: LIST
41941: LIST
41942: PUSH
41943: EMPTY
41944: LIST
41945: LIST
41946: LIST
41947: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41948: LD_ADDR_VAR 0 20
41952: PUSH
41953: LD_INT 1
41955: PUSH
41956: LD_INT 3
41958: PUSH
41959: EMPTY
41960: LIST
41961: LIST
41962: PUSH
41963: LD_INT 0
41965: PUSH
41966: LD_INT 3
41968: PUSH
41969: EMPTY
41970: LIST
41971: LIST
41972: PUSH
41973: LD_INT 1
41975: NEG
41976: PUSH
41977: LD_INT 2
41979: PUSH
41980: EMPTY
41981: LIST
41982: LIST
41983: PUSH
41984: EMPTY
41985: LIST
41986: LIST
41987: LIST
41988: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41989: LD_ADDR_VAR 0 21
41993: PUSH
41994: LD_INT 2
41996: NEG
41997: PUSH
41998: LD_INT 1
42000: PUSH
42001: EMPTY
42002: LIST
42003: LIST
42004: PUSH
42005: LD_INT 3
42007: NEG
42008: PUSH
42009: LD_INT 0
42011: PUSH
42012: EMPTY
42013: LIST
42014: LIST
42015: PUSH
42016: LD_INT 3
42018: NEG
42019: PUSH
42020: LD_INT 1
42022: NEG
42023: PUSH
42024: EMPTY
42025: LIST
42026: LIST
42027: PUSH
42028: EMPTY
42029: LIST
42030: LIST
42031: LIST
42032: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42033: LD_ADDR_VAR 0 22
42037: PUSH
42038: LD_INT 2
42040: NEG
42041: PUSH
42042: LD_INT 3
42044: NEG
42045: PUSH
42046: EMPTY
42047: LIST
42048: LIST
42049: PUSH
42050: LD_INT 3
42052: NEG
42053: PUSH
42054: LD_INT 2
42056: NEG
42057: PUSH
42058: EMPTY
42059: LIST
42060: LIST
42061: PUSH
42062: LD_INT 3
42064: NEG
42065: PUSH
42066: LD_INT 3
42068: NEG
42069: PUSH
42070: EMPTY
42071: LIST
42072: LIST
42073: PUSH
42074: EMPTY
42075: LIST
42076: LIST
42077: LIST
42078: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
42079: LD_ADDR_VAR 0 23
42083: PUSH
42084: LD_INT 0
42086: PUSH
42087: LD_INT 3
42089: NEG
42090: PUSH
42091: EMPTY
42092: LIST
42093: LIST
42094: PUSH
42095: LD_INT 1
42097: NEG
42098: PUSH
42099: LD_INT 4
42101: NEG
42102: PUSH
42103: EMPTY
42104: LIST
42105: LIST
42106: PUSH
42107: LD_INT 1
42109: PUSH
42110: LD_INT 3
42112: NEG
42113: PUSH
42114: EMPTY
42115: LIST
42116: LIST
42117: PUSH
42118: EMPTY
42119: LIST
42120: LIST
42121: LIST
42122: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
42123: LD_ADDR_VAR 0 24
42127: PUSH
42128: LD_INT 3
42130: PUSH
42131: LD_INT 0
42133: PUSH
42134: EMPTY
42135: LIST
42136: LIST
42137: PUSH
42138: LD_INT 3
42140: PUSH
42141: LD_INT 1
42143: NEG
42144: PUSH
42145: EMPTY
42146: LIST
42147: LIST
42148: PUSH
42149: LD_INT 4
42151: PUSH
42152: LD_INT 1
42154: PUSH
42155: EMPTY
42156: LIST
42157: LIST
42158: PUSH
42159: EMPTY
42160: LIST
42161: LIST
42162: LIST
42163: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
42164: LD_ADDR_VAR 0 25
42168: PUSH
42169: LD_INT 3
42171: PUSH
42172: LD_INT 3
42174: PUSH
42175: EMPTY
42176: LIST
42177: LIST
42178: PUSH
42179: LD_INT 4
42181: PUSH
42182: LD_INT 3
42184: PUSH
42185: EMPTY
42186: LIST
42187: LIST
42188: PUSH
42189: LD_INT 3
42191: PUSH
42192: LD_INT 4
42194: PUSH
42195: EMPTY
42196: LIST
42197: LIST
42198: PUSH
42199: EMPTY
42200: LIST
42201: LIST
42202: LIST
42203: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
42204: LD_ADDR_VAR 0 26
42208: PUSH
42209: LD_INT 0
42211: PUSH
42212: LD_INT 3
42214: PUSH
42215: EMPTY
42216: LIST
42217: LIST
42218: PUSH
42219: LD_INT 1
42221: PUSH
42222: LD_INT 4
42224: PUSH
42225: EMPTY
42226: LIST
42227: LIST
42228: PUSH
42229: LD_INT 1
42231: NEG
42232: PUSH
42233: LD_INT 3
42235: PUSH
42236: EMPTY
42237: LIST
42238: LIST
42239: PUSH
42240: EMPTY
42241: LIST
42242: LIST
42243: LIST
42244: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
42245: LD_ADDR_VAR 0 27
42249: PUSH
42250: LD_INT 3
42252: NEG
42253: PUSH
42254: LD_INT 0
42256: PUSH
42257: EMPTY
42258: LIST
42259: LIST
42260: PUSH
42261: LD_INT 3
42263: NEG
42264: PUSH
42265: LD_INT 1
42267: PUSH
42268: EMPTY
42269: LIST
42270: LIST
42271: PUSH
42272: LD_INT 4
42274: NEG
42275: PUSH
42276: LD_INT 1
42278: NEG
42279: PUSH
42280: EMPTY
42281: LIST
42282: LIST
42283: PUSH
42284: EMPTY
42285: LIST
42286: LIST
42287: LIST
42288: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
42289: LD_ADDR_VAR 0 28
42293: PUSH
42294: LD_INT 3
42296: NEG
42297: PUSH
42298: LD_INT 3
42300: NEG
42301: PUSH
42302: EMPTY
42303: LIST
42304: LIST
42305: PUSH
42306: LD_INT 3
42308: NEG
42309: PUSH
42310: LD_INT 4
42312: NEG
42313: PUSH
42314: EMPTY
42315: LIST
42316: LIST
42317: PUSH
42318: LD_INT 4
42320: NEG
42321: PUSH
42322: LD_INT 3
42324: NEG
42325: PUSH
42326: EMPTY
42327: LIST
42328: LIST
42329: PUSH
42330: EMPTY
42331: LIST
42332: LIST
42333: LIST
42334: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
42335: LD_ADDR_VAR 0 29
42339: PUSH
42340: LD_INT 1
42342: NEG
42343: PUSH
42344: LD_INT 3
42346: NEG
42347: PUSH
42348: EMPTY
42349: LIST
42350: LIST
42351: PUSH
42352: LD_INT 0
42354: PUSH
42355: LD_INT 3
42357: NEG
42358: PUSH
42359: EMPTY
42360: LIST
42361: LIST
42362: PUSH
42363: LD_INT 1
42365: PUSH
42366: LD_INT 2
42368: NEG
42369: PUSH
42370: EMPTY
42371: LIST
42372: LIST
42373: PUSH
42374: LD_INT 1
42376: NEG
42377: PUSH
42378: LD_INT 4
42380: NEG
42381: PUSH
42382: EMPTY
42383: LIST
42384: LIST
42385: PUSH
42386: LD_INT 0
42388: PUSH
42389: LD_INT 4
42391: NEG
42392: PUSH
42393: EMPTY
42394: LIST
42395: LIST
42396: PUSH
42397: LD_INT 1
42399: PUSH
42400: LD_INT 3
42402: NEG
42403: PUSH
42404: EMPTY
42405: LIST
42406: LIST
42407: PUSH
42408: LD_INT 1
42410: NEG
42411: PUSH
42412: LD_INT 5
42414: NEG
42415: PUSH
42416: EMPTY
42417: LIST
42418: LIST
42419: PUSH
42420: LD_INT 0
42422: PUSH
42423: LD_INT 5
42425: NEG
42426: PUSH
42427: EMPTY
42428: LIST
42429: LIST
42430: PUSH
42431: LD_INT 1
42433: PUSH
42434: LD_INT 4
42436: NEG
42437: PUSH
42438: EMPTY
42439: LIST
42440: LIST
42441: PUSH
42442: LD_INT 1
42444: NEG
42445: PUSH
42446: LD_INT 6
42448: NEG
42449: PUSH
42450: EMPTY
42451: LIST
42452: LIST
42453: PUSH
42454: LD_INT 0
42456: PUSH
42457: LD_INT 6
42459: NEG
42460: PUSH
42461: EMPTY
42462: LIST
42463: LIST
42464: PUSH
42465: LD_INT 1
42467: PUSH
42468: LD_INT 5
42470: NEG
42471: PUSH
42472: EMPTY
42473: LIST
42474: LIST
42475: PUSH
42476: EMPTY
42477: LIST
42478: LIST
42479: LIST
42480: LIST
42481: LIST
42482: LIST
42483: LIST
42484: LIST
42485: LIST
42486: LIST
42487: LIST
42488: LIST
42489: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
42490: LD_ADDR_VAR 0 30
42494: PUSH
42495: LD_INT 2
42497: PUSH
42498: LD_INT 1
42500: NEG
42501: PUSH
42502: EMPTY
42503: LIST
42504: LIST
42505: PUSH
42506: LD_INT 3
42508: PUSH
42509: LD_INT 0
42511: PUSH
42512: EMPTY
42513: LIST
42514: LIST
42515: PUSH
42516: LD_INT 3
42518: PUSH
42519: LD_INT 1
42521: PUSH
42522: EMPTY
42523: LIST
42524: LIST
42525: PUSH
42526: LD_INT 3
42528: PUSH
42529: LD_INT 1
42531: NEG
42532: PUSH
42533: EMPTY
42534: LIST
42535: LIST
42536: PUSH
42537: LD_INT 4
42539: PUSH
42540: LD_INT 0
42542: PUSH
42543: EMPTY
42544: LIST
42545: LIST
42546: PUSH
42547: LD_INT 4
42549: PUSH
42550: LD_INT 1
42552: PUSH
42553: EMPTY
42554: LIST
42555: LIST
42556: PUSH
42557: LD_INT 4
42559: PUSH
42560: LD_INT 1
42562: NEG
42563: PUSH
42564: EMPTY
42565: LIST
42566: LIST
42567: PUSH
42568: LD_INT 5
42570: PUSH
42571: LD_INT 0
42573: PUSH
42574: EMPTY
42575: LIST
42576: LIST
42577: PUSH
42578: LD_INT 5
42580: PUSH
42581: LD_INT 1
42583: PUSH
42584: EMPTY
42585: LIST
42586: LIST
42587: PUSH
42588: LD_INT 5
42590: PUSH
42591: LD_INT 1
42593: NEG
42594: PUSH
42595: EMPTY
42596: LIST
42597: LIST
42598: PUSH
42599: LD_INT 6
42601: PUSH
42602: LD_INT 0
42604: PUSH
42605: EMPTY
42606: LIST
42607: LIST
42608: PUSH
42609: LD_INT 6
42611: PUSH
42612: LD_INT 1
42614: PUSH
42615: EMPTY
42616: LIST
42617: LIST
42618: PUSH
42619: EMPTY
42620: LIST
42621: LIST
42622: LIST
42623: LIST
42624: LIST
42625: LIST
42626: LIST
42627: LIST
42628: LIST
42629: LIST
42630: LIST
42631: LIST
42632: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
42633: LD_ADDR_VAR 0 31
42637: PUSH
42638: LD_INT 3
42640: PUSH
42641: LD_INT 2
42643: PUSH
42644: EMPTY
42645: LIST
42646: LIST
42647: PUSH
42648: LD_INT 3
42650: PUSH
42651: LD_INT 3
42653: PUSH
42654: EMPTY
42655: LIST
42656: LIST
42657: PUSH
42658: LD_INT 2
42660: PUSH
42661: LD_INT 3
42663: PUSH
42664: EMPTY
42665: LIST
42666: LIST
42667: PUSH
42668: LD_INT 4
42670: PUSH
42671: LD_INT 3
42673: PUSH
42674: EMPTY
42675: LIST
42676: LIST
42677: PUSH
42678: LD_INT 4
42680: PUSH
42681: LD_INT 4
42683: PUSH
42684: EMPTY
42685: LIST
42686: LIST
42687: PUSH
42688: LD_INT 3
42690: PUSH
42691: LD_INT 4
42693: PUSH
42694: EMPTY
42695: LIST
42696: LIST
42697: PUSH
42698: LD_INT 5
42700: PUSH
42701: LD_INT 4
42703: PUSH
42704: EMPTY
42705: LIST
42706: LIST
42707: PUSH
42708: LD_INT 5
42710: PUSH
42711: LD_INT 5
42713: PUSH
42714: EMPTY
42715: LIST
42716: LIST
42717: PUSH
42718: LD_INT 4
42720: PUSH
42721: LD_INT 5
42723: PUSH
42724: EMPTY
42725: LIST
42726: LIST
42727: PUSH
42728: LD_INT 6
42730: PUSH
42731: LD_INT 5
42733: PUSH
42734: EMPTY
42735: LIST
42736: LIST
42737: PUSH
42738: LD_INT 6
42740: PUSH
42741: LD_INT 6
42743: PUSH
42744: EMPTY
42745: LIST
42746: LIST
42747: PUSH
42748: LD_INT 5
42750: PUSH
42751: LD_INT 6
42753: PUSH
42754: EMPTY
42755: LIST
42756: LIST
42757: PUSH
42758: EMPTY
42759: LIST
42760: LIST
42761: LIST
42762: LIST
42763: LIST
42764: LIST
42765: LIST
42766: LIST
42767: LIST
42768: LIST
42769: LIST
42770: LIST
42771: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
42772: LD_ADDR_VAR 0 32
42776: PUSH
42777: LD_INT 1
42779: PUSH
42780: LD_INT 3
42782: PUSH
42783: EMPTY
42784: LIST
42785: LIST
42786: PUSH
42787: LD_INT 0
42789: PUSH
42790: LD_INT 3
42792: PUSH
42793: EMPTY
42794: LIST
42795: LIST
42796: PUSH
42797: LD_INT 1
42799: NEG
42800: PUSH
42801: LD_INT 2
42803: PUSH
42804: EMPTY
42805: LIST
42806: LIST
42807: PUSH
42808: LD_INT 1
42810: PUSH
42811: LD_INT 4
42813: PUSH
42814: EMPTY
42815: LIST
42816: LIST
42817: PUSH
42818: LD_INT 0
42820: PUSH
42821: LD_INT 4
42823: PUSH
42824: EMPTY
42825: LIST
42826: LIST
42827: PUSH
42828: LD_INT 1
42830: NEG
42831: PUSH
42832: LD_INT 3
42834: PUSH
42835: EMPTY
42836: LIST
42837: LIST
42838: PUSH
42839: LD_INT 1
42841: PUSH
42842: LD_INT 5
42844: PUSH
42845: EMPTY
42846: LIST
42847: LIST
42848: PUSH
42849: LD_INT 0
42851: PUSH
42852: LD_INT 5
42854: PUSH
42855: EMPTY
42856: LIST
42857: LIST
42858: PUSH
42859: LD_INT 1
42861: NEG
42862: PUSH
42863: LD_INT 4
42865: PUSH
42866: EMPTY
42867: LIST
42868: LIST
42869: PUSH
42870: LD_INT 1
42872: PUSH
42873: LD_INT 6
42875: PUSH
42876: EMPTY
42877: LIST
42878: LIST
42879: PUSH
42880: LD_INT 0
42882: PUSH
42883: LD_INT 6
42885: PUSH
42886: EMPTY
42887: LIST
42888: LIST
42889: PUSH
42890: LD_INT 1
42892: NEG
42893: PUSH
42894: LD_INT 5
42896: PUSH
42897: EMPTY
42898: LIST
42899: LIST
42900: PUSH
42901: EMPTY
42902: LIST
42903: LIST
42904: LIST
42905: LIST
42906: LIST
42907: LIST
42908: LIST
42909: LIST
42910: LIST
42911: LIST
42912: LIST
42913: LIST
42914: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
42915: LD_ADDR_VAR 0 33
42919: PUSH
42920: LD_INT 2
42922: NEG
42923: PUSH
42924: LD_INT 1
42926: PUSH
42927: EMPTY
42928: LIST
42929: LIST
42930: PUSH
42931: LD_INT 3
42933: NEG
42934: PUSH
42935: LD_INT 0
42937: PUSH
42938: EMPTY
42939: LIST
42940: LIST
42941: PUSH
42942: LD_INT 3
42944: NEG
42945: PUSH
42946: LD_INT 1
42948: NEG
42949: PUSH
42950: EMPTY
42951: LIST
42952: LIST
42953: PUSH
42954: LD_INT 3
42956: NEG
42957: PUSH
42958: LD_INT 1
42960: PUSH
42961: EMPTY
42962: LIST
42963: LIST
42964: PUSH
42965: LD_INT 4
42967: NEG
42968: PUSH
42969: LD_INT 0
42971: PUSH
42972: EMPTY
42973: LIST
42974: LIST
42975: PUSH
42976: LD_INT 4
42978: NEG
42979: PUSH
42980: LD_INT 1
42982: NEG
42983: PUSH
42984: EMPTY
42985: LIST
42986: LIST
42987: PUSH
42988: LD_INT 4
42990: NEG
42991: PUSH
42992: LD_INT 1
42994: PUSH
42995: EMPTY
42996: LIST
42997: LIST
42998: PUSH
42999: LD_INT 5
43001: NEG
43002: PUSH
43003: LD_INT 0
43005: PUSH
43006: EMPTY
43007: LIST
43008: LIST
43009: PUSH
43010: LD_INT 5
43012: NEG
43013: PUSH
43014: LD_INT 1
43016: NEG
43017: PUSH
43018: EMPTY
43019: LIST
43020: LIST
43021: PUSH
43022: LD_INT 5
43024: NEG
43025: PUSH
43026: LD_INT 1
43028: PUSH
43029: EMPTY
43030: LIST
43031: LIST
43032: PUSH
43033: LD_INT 6
43035: NEG
43036: PUSH
43037: LD_INT 0
43039: PUSH
43040: EMPTY
43041: LIST
43042: LIST
43043: PUSH
43044: LD_INT 6
43046: NEG
43047: PUSH
43048: LD_INT 1
43050: NEG
43051: PUSH
43052: EMPTY
43053: LIST
43054: LIST
43055: PUSH
43056: EMPTY
43057: LIST
43058: LIST
43059: LIST
43060: LIST
43061: LIST
43062: LIST
43063: LIST
43064: LIST
43065: LIST
43066: LIST
43067: LIST
43068: LIST
43069: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
43070: LD_ADDR_VAR 0 34
43074: PUSH
43075: LD_INT 2
43077: NEG
43078: PUSH
43079: LD_INT 3
43081: NEG
43082: PUSH
43083: EMPTY
43084: LIST
43085: LIST
43086: PUSH
43087: LD_INT 3
43089: NEG
43090: PUSH
43091: LD_INT 2
43093: NEG
43094: PUSH
43095: EMPTY
43096: LIST
43097: LIST
43098: PUSH
43099: LD_INT 3
43101: NEG
43102: PUSH
43103: LD_INT 3
43105: NEG
43106: PUSH
43107: EMPTY
43108: LIST
43109: LIST
43110: PUSH
43111: LD_INT 3
43113: NEG
43114: PUSH
43115: LD_INT 4
43117: NEG
43118: PUSH
43119: EMPTY
43120: LIST
43121: LIST
43122: PUSH
43123: LD_INT 4
43125: NEG
43126: PUSH
43127: LD_INT 3
43129: NEG
43130: PUSH
43131: EMPTY
43132: LIST
43133: LIST
43134: PUSH
43135: LD_INT 4
43137: NEG
43138: PUSH
43139: LD_INT 4
43141: NEG
43142: PUSH
43143: EMPTY
43144: LIST
43145: LIST
43146: PUSH
43147: LD_INT 4
43149: NEG
43150: PUSH
43151: LD_INT 5
43153: NEG
43154: PUSH
43155: EMPTY
43156: LIST
43157: LIST
43158: PUSH
43159: LD_INT 5
43161: NEG
43162: PUSH
43163: LD_INT 4
43165: NEG
43166: PUSH
43167: EMPTY
43168: LIST
43169: LIST
43170: PUSH
43171: LD_INT 5
43173: NEG
43174: PUSH
43175: LD_INT 5
43177: NEG
43178: PUSH
43179: EMPTY
43180: LIST
43181: LIST
43182: PUSH
43183: LD_INT 5
43185: NEG
43186: PUSH
43187: LD_INT 6
43189: NEG
43190: PUSH
43191: EMPTY
43192: LIST
43193: LIST
43194: PUSH
43195: LD_INT 6
43197: NEG
43198: PUSH
43199: LD_INT 5
43201: NEG
43202: PUSH
43203: EMPTY
43204: LIST
43205: LIST
43206: PUSH
43207: LD_INT 6
43209: NEG
43210: PUSH
43211: LD_INT 6
43213: NEG
43214: PUSH
43215: EMPTY
43216: LIST
43217: LIST
43218: PUSH
43219: EMPTY
43220: LIST
43221: LIST
43222: LIST
43223: LIST
43224: LIST
43225: LIST
43226: LIST
43227: LIST
43228: LIST
43229: LIST
43230: LIST
43231: LIST
43232: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
43233: LD_ADDR_VAR 0 41
43237: PUSH
43238: LD_INT 0
43240: PUSH
43241: LD_INT 2
43243: NEG
43244: PUSH
43245: EMPTY
43246: LIST
43247: LIST
43248: PUSH
43249: LD_INT 1
43251: NEG
43252: PUSH
43253: LD_INT 3
43255: NEG
43256: PUSH
43257: EMPTY
43258: LIST
43259: LIST
43260: PUSH
43261: LD_INT 1
43263: PUSH
43264: LD_INT 2
43266: NEG
43267: PUSH
43268: EMPTY
43269: LIST
43270: LIST
43271: PUSH
43272: EMPTY
43273: LIST
43274: LIST
43275: LIST
43276: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
43277: LD_ADDR_VAR 0 42
43281: PUSH
43282: LD_INT 2
43284: PUSH
43285: LD_INT 0
43287: PUSH
43288: EMPTY
43289: LIST
43290: LIST
43291: PUSH
43292: LD_INT 2
43294: PUSH
43295: LD_INT 1
43297: NEG
43298: PUSH
43299: EMPTY
43300: LIST
43301: LIST
43302: PUSH
43303: LD_INT 3
43305: PUSH
43306: LD_INT 1
43308: PUSH
43309: EMPTY
43310: LIST
43311: LIST
43312: PUSH
43313: EMPTY
43314: LIST
43315: LIST
43316: LIST
43317: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
43318: LD_ADDR_VAR 0 43
43322: PUSH
43323: LD_INT 2
43325: PUSH
43326: LD_INT 2
43328: PUSH
43329: EMPTY
43330: LIST
43331: LIST
43332: PUSH
43333: LD_INT 3
43335: PUSH
43336: LD_INT 2
43338: PUSH
43339: EMPTY
43340: LIST
43341: LIST
43342: PUSH
43343: LD_INT 2
43345: PUSH
43346: LD_INT 3
43348: PUSH
43349: EMPTY
43350: LIST
43351: LIST
43352: PUSH
43353: EMPTY
43354: LIST
43355: LIST
43356: LIST
43357: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
43358: LD_ADDR_VAR 0 44
43362: PUSH
43363: LD_INT 0
43365: PUSH
43366: LD_INT 2
43368: PUSH
43369: EMPTY
43370: LIST
43371: LIST
43372: PUSH
43373: LD_INT 1
43375: PUSH
43376: LD_INT 3
43378: PUSH
43379: EMPTY
43380: LIST
43381: LIST
43382: PUSH
43383: LD_INT 1
43385: NEG
43386: PUSH
43387: LD_INT 2
43389: PUSH
43390: EMPTY
43391: LIST
43392: LIST
43393: PUSH
43394: EMPTY
43395: LIST
43396: LIST
43397: LIST
43398: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43399: LD_ADDR_VAR 0 45
43403: PUSH
43404: LD_INT 2
43406: NEG
43407: PUSH
43408: LD_INT 0
43410: PUSH
43411: EMPTY
43412: LIST
43413: LIST
43414: PUSH
43415: LD_INT 2
43417: NEG
43418: PUSH
43419: LD_INT 1
43421: PUSH
43422: EMPTY
43423: LIST
43424: LIST
43425: PUSH
43426: LD_INT 3
43428: NEG
43429: PUSH
43430: LD_INT 1
43432: NEG
43433: PUSH
43434: EMPTY
43435: LIST
43436: LIST
43437: PUSH
43438: EMPTY
43439: LIST
43440: LIST
43441: LIST
43442: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
43443: LD_ADDR_VAR 0 46
43447: PUSH
43448: LD_INT 2
43450: NEG
43451: PUSH
43452: LD_INT 2
43454: NEG
43455: PUSH
43456: EMPTY
43457: LIST
43458: LIST
43459: PUSH
43460: LD_INT 2
43462: NEG
43463: PUSH
43464: LD_INT 3
43466: NEG
43467: PUSH
43468: EMPTY
43469: LIST
43470: LIST
43471: PUSH
43472: LD_INT 3
43474: NEG
43475: PUSH
43476: LD_INT 2
43478: NEG
43479: PUSH
43480: EMPTY
43481: LIST
43482: LIST
43483: PUSH
43484: EMPTY
43485: LIST
43486: LIST
43487: LIST
43488: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
43489: LD_ADDR_VAR 0 47
43493: PUSH
43494: LD_INT 2
43496: NEG
43497: PUSH
43498: LD_INT 3
43500: NEG
43501: PUSH
43502: EMPTY
43503: LIST
43504: LIST
43505: PUSH
43506: LD_INT 1
43508: NEG
43509: PUSH
43510: LD_INT 3
43512: NEG
43513: PUSH
43514: EMPTY
43515: LIST
43516: LIST
43517: PUSH
43518: EMPTY
43519: LIST
43520: LIST
43521: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
43522: LD_ADDR_VAR 0 48
43526: PUSH
43527: LD_INT 1
43529: PUSH
43530: LD_INT 2
43532: NEG
43533: PUSH
43534: EMPTY
43535: LIST
43536: LIST
43537: PUSH
43538: LD_INT 2
43540: PUSH
43541: LD_INT 1
43543: NEG
43544: PUSH
43545: EMPTY
43546: LIST
43547: LIST
43548: PUSH
43549: EMPTY
43550: LIST
43551: LIST
43552: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
43553: LD_ADDR_VAR 0 49
43557: PUSH
43558: LD_INT 3
43560: PUSH
43561: LD_INT 1
43563: PUSH
43564: EMPTY
43565: LIST
43566: LIST
43567: PUSH
43568: LD_INT 3
43570: PUSH
43571: LD_INT 2
43573: PUSH
43574: EMPTY
43575: LIST
43576: LIST
43577: PUSH
43578: EMPTY
43579: LIST
43580: LIST
43581: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
43582: LD_ADDR_VAR 0 50
43586: PUSH
43587: LD_INT 2
43589: PUSH
43590: LD_INT 3
43592: PUSH
43593: EMPTY
43594: LIST
43595: LIST
43596: PUSH
43597: LD_INT 1
43599: PUSH
43600: LD_INT 3
43602: PUSH
43603: EMPTY
43604: LIST
43605: LIST
43606: PUSH
43607: EMPTY
43608: LIST
43609: LIST
43610: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
43611: LD_ADDR_VAR 0 51
43615: PUSH
43616: LD_INT 1
43618: NEG
43619: PUSH
43620: LD_INT 2
43622: PUSH
43623: EMPTY
43624: LIST
43625: LIST
43626: PUSH
43627: LD_INT 2
43629: NEG
43630: PUSH
43631: LD_INT 1
43633: PUSH
43634: EMPTY
43635: LIST
43636: LIST
43637: PUSH
43638: EMPTY
43639: LIST
43640: LIST
43641: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43642: LD_ADDR_VAR 0 52
43646: PUSH
43647: LD_INT 3
43649: NEG
43650: PUSH
43651: LD_INT 1
43653: NEG
43654: PUSH
43655: EMPTY
43656: LIST
43657: LIST
43658: PUSH
43659: LD_INT 3
43661: NEG
43662: PUSH
43663: LD_INT 2
43665: NEG
43666: PUSH
43667: EMPTY
43668: LIST
43669: LIST
43670: PUSH
43671: EMPTY
43672: LIST
43673: LIST
43674: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43675: LD_ADDR_VAR 0 53
43679: PUSH
43680: LD_INT 1
43682: NEG
43683: PUSH
43684: LD_INT 3
43686: NEG
43687: PUSH
43688: EMPTY
43689: LIST
43690: LIST
43691: PUSH
43692: LD_INT 0
43694: PUSH
43695: LD_INT 3
43697: NEG
43698: PUSH
43699: EMPTY
43700: LIST
43701: LIST
43702: PUSH
43703: LD_INT 1
43705: PUSH
43706: LD_INT 2
43708: NEG
43709: PUSH
43710: EMPTY
43711: LIST
43712: LIST
43713: PUSH
43714: EMPTY
43715: LIST
43716: LIST
43717: LIST
43718: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43719: LD_ADDR_VAR 0 54
43723: PUSH
43724: LD_INT 2
43726: PUSH
43727: LD_INT 1
43729: NEG
43730: PUSH
43731: EMPTY
43732: LIST
43733: LIST
43734: PUSH
43735: LD_INT 3
43737: PUSH
43738: LD_INT 0
43740: PUSH
43741: EMPTY
43742: LIST
43743: LIST
43744: PUSH
43745: LD_INT 3
43747: PUSH
43748: LD_INT 1
43750: PUSH
43751: EMPTY
43752: LIST
43753: LIST
43754: PUSH
43755: EMPTY
43756: LIST
43757: LIST
43758: LIST
43759: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43760: LD_ADDR_VAR 0 55
43764: PUSH
43765: LD_INT 3
43767: PUSH
43768: LD_INT 2
43770: PUSH
43771: EMPTY
43772: LIST
43773: LIST
43774: PUSH
43775: LD_INT 3
43777: PUSH
43778: LD_INT 3
43780: PUSH
43781: EMPTY
43782: LIST
43783: LIST
43784: PUSH
43785: LD_INT 2
43787: PUSH
43788: LD_INT 3
43790: PUSH
43791: EMPTY
43792: LIST
43793: LIST
43794: PUSH
43795: EMPTY
43796: LIST
43797: LIST
43798: LIST
43799: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43800: LD_ADDR_VAR 0 56
43804: PUSH
43805: LD_INT 1
43807: PUSH
43808: LD_INT 3
43810: PUSH
43811: EMPTY
43812: LIST
43813: LIST
43814: PUSH
43815: LD_INT 0
43817: PUSH
43818: LD_INT 3
43820: PUSH
43821: EMPTY
43822: LIST
43823: LIST
43824: PUSH
43825: LD_INT 1
43827: NEG
43828: PUSH
43829: LD_INT 2
43831: PUSH
43832: EMPTY
43833: LIST
43834: LIST
43835: PUSH
43836: EMPTY
43837: LIST
43838: LIST
43839: LIST
43840: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43841: LD_ADDR_VAR 0 57
43845: PUSH
43846: LD_INT 2
43848: NEG
43849: PUSH
43850: LD_INT 1
43852: PUSH
43853: EMPTY
43854: LIST
43855: LIST
43856: PUSH
43857: LD_INT 3
43859: NEG
43860: PUSH
43861: LD_INT 0
43863: PUSH
43864: EMPTY
43865: LIST
43866: LIST
43867: PUSH
43868: LD_INT 3
43870: NEG
43871: PUSH
43872: LD_INT 1
43874: NEG
43875: PUSH
43876: EMPTY
43877: LIST
43878: LIST
43879: PUSH
43880: EMPTY
43881: LIST
43882: LIST
43883: LIST
43884: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43885: LD_ADDR_VAR 0 58
43889: PUSH
43890: LD_INT 2
43892: NEG
43893: PUSH
43894: LD_INT 3
43896: NEG
43897: PUSH
43898: EMPTY
43899: LIST
43900: LIST
43901: PUSH
43902: LD_INT 3
43904: NEG
43905: PUSH
43906: LD_INT 2
43908: NEG
43909: PUSH
43910: EMPTY
43911: LIST
43912: LIST
43913: PUSH
43914: LD_INT 3
43916: NEG
43917: PUSH
43918: LD_INT 3
43920: NEG
43921: PUSH
43922: EMPTY
43923: LIST
43924: LIST
43925: PUSH
43926: EMPTY
43927: LIST
43928: LIST
43929: LIST
43930: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
43931: LD_ADDR_VAR 0 59
43935: PUSH
43936: LD_INT 1
43938: NEG
43939: PUSH
43940: LD_INT 2
43942: NEG
43943: PUSH
43944: EMPTY
43945: LIST
43946: LIST
43947: PUSH
43948: LD_INT 0
43950: PUSH
43951: LD_INT 2
43953: NEG
43954: PUSH
43955: EMPTY
43956: LIST
43957: LIST
43958: PUSH
43959: LD_INT 1
43961: PUSH
43962: LD_INT 1
43964: NEG
43965: PUSH
43966: EMPTY
43967: LIST
43968: LIST
43969: PUSH
43970: EMPTY
43971: LIST
43972: LIST
43973: LIST
43974: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
43975: LD_ADDR_VAR 0 60
43979: PUSH
43980: LD_INT 1
43982: PUSH
43983: LD_INT 1
43985: NEG
43986: PUSH
43987: EMPTY
43988: LIST
43989: LIST
43990: PUSH
43991: LD_INT 2
43993: PUSH
43994: LD_INT 0
43996: PUSH
43997: EMPTY
43998: LIST
43999: LIST
44000: PUSH
44001: LD_INT 2
44003: PUSH
44004: LD_INT 1
44006: PUSH
44007: EMPTY
44008: LIST
44009: LIST
44010: PUSH
44011: EMPTY
44012: LIST
44013: LIST
44014: LIST
44015: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
44016: LD_ADDR_VAR 0 61
44020: PUSH
44021: LD_INT 2
44023: PUSH
44024: LD_INT 1
44026: PUSH
44027: EMPTY
44028: LIST
44029: LIST
44030: PUSH
44031: LD_INT 2
44033: PUSH
44034: LD_INT 2
44036: PUSH
44037: EMPTY
44038: LIST
44039: LIST
44040: PUSH
44041: LD_INT 1
44043: PUSH
44044: LD_INT 2
44046: PUSH
44047: EMPTY
44048: LIST
44049: LIST
44050: PUSH
44051: EMPTY
44052: LIST
44053: LIST
44054: LIST
44055: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
44056: LD_ADDR_VAR 0 62
44060: PUSH
44061: LD_INT 1
44063: PUSH
44064: LD_INT 2
44066: PUSH
44067: EMPTY
44068: LIST
44069: LIST
44070: PUSH
44071: LD_INT 0
44073: PUSH
44074: LD_INT 2
44076: PUSH
44077: EMPTY
44078: LIST
44079: LIST
44080: PUSH
44081: LD_INT 1
44083: NEG
44084: PUSH
44085: LD_INT 1
44087: PUSH
44088: EMPTY
44089: LIST
44090: LIST
44091: PUSH
44092: EMPTY
44093: LIST
44094: LIST
44095: LIST
44096: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
44097: LD_ADDR_VAR 0 63
44101: PUSH
44102: LD_INT 1
44104: NEG
44105: PUSH
44106: LD_INT 1
44108: PUSH
44109: EMPTY
44110: LIST
44111: LIST
44112: PUSH
44113: LD_INT 2
44115: NEG
44116: PUSH
44117: LD_INT 0
44119: PUSH
44120: EMPTY
44121: LIST
44122: LIST
44123: PUSH
44124: LD_INT 2
44126: NEG
44127: PUSH
44128: LD_INT 1
44130: NEG
44131: PUSH
44132: EMPTY
44133: LIST
44134: LIST
44135: PUSH
44136: EMPTY
44137: LIST
44138: LIST
44139: LIST
44140: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44141: LD_ADDR_VAR 0 64
44145: PUSH
44146: LD_INT 1
44148: NEG
44149: PUSH
44150: LD_INT 2
44152: NEG
44153: PUSH
44154: EMPTY
44155: LIST
44156: LIST
44157: PUSH
44158: LD_INT 2
44160: NEG
44161: PUSH
44162: LD_INT 1
44164: NEG
44165: PUSH
44166: EMPTY
44167: LIST
44168: LIST
44169: PUSH
44170: LD_INT 2
44172: NEG
44173: PUSH
44174: LD_INT 2
44176: NEG
44177: PUSH
44178: EMPTY
44179: LIST
44180: LIST
44181: PUSH
44182: EMPTY
44183: LIST
44184: LIST
44185: LIST
44186: ST_TO_ADDR
// end ; 2 :
44187: GO 47453
44189: LD_INT 2
44191: DOUBLE
44192: EQUAL
44193: IFTRUE 44197
44195: GO 47452
44197: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
44198: LD_ADDR_VAR 0 29
44202: PUSH
44203: LD_INT 4
44205: PUSH
44206: LD_INT 0
44208: PUSH
44209: EMPTY
44210: LIST
44211: LIST
44212: PUSH
44213: LD_INT 4
44215: PUSH
44216: LD_INT 1
44218: NEG
44219: PUSH
44220: EMPTY
44221: LIST
44222: LIST
44223: PUSH
44224: LD_INT 5
44226: PUSH
44227: LD_INT 0
44229: PUSH
44230: EMPTY
44231: LIST
44232: LIST
44233: PUSH
44234: LD_INT 5
44236: PUSH
44237: LD_INT 1
44239: PUSH
44240: EMPTY
44241: LIST
44242: LIST
44243: PUSH
44244: LD_INT 4
44246: PUSH
44247: LD_INT 1
44249: PUSH
44250: EMPTY
44251: LIST
44252: LIST
44253: PUSH
44254: LD_INT 3
44256: PUSH
44257: LD_INT 0
44259: PUSH
44260: EMPTY
44261: LIST
44262: LIST
44263: PUSH
44264: LD_INT 3
44266: PUSH
44267: LD_INT 1
44269: NEG
44270: PUSH
44271: EMPTY
44272: LIST
44273: LIST
44274: PUSH
44275: LD_INT 3
44277: PUSH
44278: LD_INT 2
44280: NEG
44281: PUSH
44282: EMPTY
44283: LIST
44284: LIST
44285: PUSH
44286: LD_INT 5
44288: PUSH
44289: LD_INT 2
44291: PUSH
44292: EMPTY
44293: LIST
44294: LIST
44295: PUSH
44296: LD_INT 3
44298: PUSH
44299: LD_INT 3
44301: PUSH
44302: EMPTY
44303: LIST
44304: LIST
44305: PUSH
44306: LD_INT 3
44308: PUSH
44309: LD_INT 2
44311: PUSH
44312: EMPTY
44313: LIST
44314: LIST
44315: PUSH
44316: LD_INT 4
44318: PUSH
44319: LD_INT 3
44321: PUSH
44322: EMPTY
44323: LIST
44324: LIST
44325: PUSH
44326: LD_INT 4
44328: PUSH
44329: LD_INT 4
44331: PUSH
44332: EMPTY
44333: LIST
44334: LIST
44335: PUSH
44336: LD_INT 3
44338: PUSH
44339: LD_INT 4
44341: PUSH
44342: EMPTY
44343: LIST
44344: LIST
44345: PUSH
44346: LD_INT 2
44348: PUSH
44349: LD_INT 3
44351: PUSH
44352: EMPTY
44353: LIST
44354: LIST
44355: PUSH
44356: LD_INT 2
44358: PUSH
44359: LD_INT 2
44361: PUSH
44362: EMPTY
44363: LIST
44364: LIST
44365: PUSH
44366: LD_INT 4
44368: PUSH
44369: LD_INT 2
44371: PUSH
44372: EMPTY
44373: LIST
44374: LIST
44375: PUSH
44376: LD_INT 2
44378: PUSH
44379: LD_INT 4
44381: PUSH
44382: EMPTY
44383: LIST
44384: LIST
44385: PUSH
44386: LD_INT 0
44388: PUSH
44389: LD_INT 4
44391: PUSH
44392: EMPTY
44393: LIST
44394: LIST
44395: PUSH
44396: LD_INT 0
44398: PUSH
44399: LD_INT 3
44401: PUSH
44402: EMPTY
44403: LIST
44404: LIST
44405: PUSH
44406: LD_INT 1
44408: PUSH
44409: LD_INT 4
44411: PUSH
44412: EMPTY
44413: LIST
44414: LIST
44415: PUSH
44416: LD_INT 1
44418: PUSH
44419: LD_INT 5
44421: PUSH
44422: EMPTY
44423: LIST
44424: LIST
44425: PUSH
44426: LD_INT 0
44428: PUSH
44429: LD_INT 5
44431: PUSH
44432: EMPTY
44433: LIST
44434: LIST
44435: PUSH
44436: LD_INT 1
44438: NEG
44439: PUSH
44440: LD_INT 4
44442: PUSH
44443: EMPTY
44444: LIST
44445: LIST
44446: PUSH
44447: LD_INT 1
44449: NEG
44450: PUSH
44451: LD_INT 3
44453: PUSH
44454: EMPTY
44455: LIST
44456: LIST
44457: PUSH
44458: LD_INT 2
44460: PUSH
44461: LD_INT 5
44463: PUSH
44464: EMPTY
44465: LIST
44466: LIST
44467: PUSH
44468: LD_INT 2
44470: NEG
44471: PUSH
44472: LD_INT 3
44474: PUSH
44475: EMPTY
44476: LIST
44477: LIST
44478: PUSH
44479: LD_INT 3
44481: NEG
44482: PUSH
44483: LD_INT 0
44485: PUSH
44486: EMPTY
44487: LIST
44488: LIST
44489: PUSH
44490: LD_INT 3
44492: NEG
44493: PUSH
44494: LD_INT 1
44496: NEG
44497: PUSH
44498: EMPTY
44499: LIST
44500: LIST
44501: PUSH
44502: LD_INT 2
44504: NEG
44505: PUSH
44506: LD_INT 0
44508: PUSH
44509: EMPTY
44510: LIST
44511: LIST
44512: PUSH
44513: LD_INT 2
44515: NEG
44516: PUSH
44517: LD_INT 1
44519: PUSH
44520: EMPTY
44521: LIST
44522: LIST
44523: PUSH
44524: LD_INT 3
44526: NEG
44527: PUSH
44528: LD_INT 1
44530: PUSH
44531: EMPTY
44532: LIST
44533: LIST
44534: PUSH
44535: LD_INT 4
44537: NEG
44538: PUSH
44539: LD_INT 0
44541: PUSH
44542: EMPTY
44543: LIST
44544: LIST
44545: PUSH
44546: LD_INT 4
44548: NEG
44549: PUSH
44550: LD_INT 1
44552: NEG
44553: PUSH
44554: EMPTY
44555: LIST
44556: LIST
44557: PUSH
44558: LD_INT 4
44560: NEG
44561: PUSH
44562: LD_INT 2
44564: NEG
44565: PUSH
44566: EMPTY
44567: LIST
44568: LIST
44569: PUSH
44570: LD_INT 2
44572: NEG
44573: PUSH
44574: LD_INT 2
44576: PUSH
44577: EMPTY
44578: LIST
44579: LIST
44580: PUSH
44581: LD_INT 4
44583: NEG
44584: PUSH
44585: LD_INT 4
44587: NEG
44588: PUSH
44589: EMPTY
44590: LIST
44591: LIST
44592: PUSH
44593: LD_INT 4
44595: NEG
44596: PUSH
44597: LD_INT 5
44599: NEG
44600: PUSH
44601: EMPTY
44602: LIST
44603: LIST
44604: PUSH
44605: LD_INT 3
44607: NEG
44608: PUSH
44609: LD_INT 4
44611: NEG
44612: PUSH
44613: EMPTY
44614: LIST
44615: LIST
44616: PUSH
44617: LD_INT 3
44619: NEG
44620: PUSH
44621: LD_INT 3
44623: NEG
44624: PUSH
44625: EMPTY
44626: LIST
44627: LIST
44628: PUSH
44629: LD_INT 4
44631: NEG
44632: PUSH
44633: LD_INT 3
44635: NEG
44636: PUSH
44637: EMPTY
44638: LIST
44639: LIST
44640: PUSH
44641: LD_INT 5
44643: NEG
44644: PUSH
44645: LD_INT 4
44647: NEG
44648: PUSH
44649: EMPTY
44650: LIST
44651: LIST
44652: PUSH
44653: LD_INT 5
44655: NEG
44656: PUSH
44657: LD_INT 5
44659: NEG
44660: PUSH
44661: EMPTY
44662: LIST
44663: LIST
44664: PUSH
44665: LD_INT 3
44667: NEG
44668: PUSH
44669: LD_INT 5
44671: NEG
44672: PUSH
44673: EMPTY
44674: LIST
44675: LIST
44676: PUSH
44677: LD_INT 5
44679: NEG
44680: PUSH
44681: LD_INT 3
44683: NEG
44684: PUSH
44685: EMPTY
44686: LIST
44687: LIST
44688: PUSH
44689: EMPTY
44690: LIST
44691: LIST
44692: LIST
44693: LIST
44694: LIST
44695: LIST
44696: LIST
44697: LIST
44698: LIST
44699: LIST
44700: LIST
44701: LIST
44702: LIST
44703: LIST
44704: LIST
44705: LIST
44706: LIST
44707: LIST
44708: LIST
44709: LIST
44710: LIST
44711: LIST
44712: LIST
44713: LIST
44714: LIST
44715: LIST
44716: LIST
44717: LIST
44718: LIST
44719: LIST
44720: LIST
44721: LIST
44722: LIST
44723: LIST
44724: LIST
44725: LIST
44726: LIST
44727: LIST
44728: LIST
44729: LIST
44730: LIST
44731: LIST
44732: LIST
44733: LIST
44734: LIST
44735: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
44736: LD_ADDR_VAR 0 30
44740: PUSH
44741: LD_INT 4
44743: PUSH
44744: LD_INT 4
44746: PUSH
44747: EMPTY
44748: LIST
44749: LIST
44750: PUSH
44751: LD_INT 4
44753: PUSH
44754: LD_INT 3
44756: PUSH
44757: EMPTY
44758: LIST
44759: LIST
44760: PUSH
44761: LD_INT 5
44763: PUSH
44764: LD_INT 4
44766: PUSH
44767: EMPTY
44768: LIST
44769: LIST
44770: PUSH
44771: LD_INT 5
44773: PUSH
44774: LD_INT 5
44776: PUSH
44777: EMPTY
44778: LIST
44779: LIST
44780: PUSH
44781: LD_INT 4
44783: PUSH
44784: LD_INT 5
44786: PUSH
44787: EMPTY
44788: LIST
44789: LIST
44790: PUSH
44791: LD_INT 3
44793: PUSH
44794: LD_INT 4
44796: PUSH
44797: EMPTY
44798: LIST
44799: LIST
44800: PUSH
44801: LD_INT 3
44803: PUSH
44804: LD_INT 3
44806: PUSH
44807: EMPTY
44808: LIST
44809: LIST
44810: PUSH
44811: LD_INT 5
44813: PUSH
44814: LD_INT 3
44816: PUSH
44817: EMPTY
44818: LIST
44819: LIST
44820: PUSH
44821: LD_INT 3
44823: PUSH
44824: LD_INT 5
44826: PUSH
44827: EMPTY
44828: LIST
44829: LIST
44830: PUSH
44831: LD_INT 0
44833: PUSH
44834: LD_INT 3
44836: PUSH
44837: EMPTY
44838: LIST
44839: LIST
44840: PUSH
44841: LD_INT 0
44843: PUSH
44844: LD_INT 2
44846: PUSH
44847: EMPTY
44848: LIST
44849: LIST
44850: PUSH
44851: LD_INT 1
44853: PUSH
44854: LD_INT 3
44856: PUSH
44857: EMPTY
44858: LIST
44859: LIST
44860: PUSH
44861: LD_INT 1
44863: PUSH
44864: LD_INT 4
44866: PUSH
44867: EMPTY
44868: LIST
44869: LIST
44870: PUSH
44871: LD_INT 0
44873: PUSH
44874: LD_INT 4
44876: PUSH
44877: EMPTY
44878: LIST
44879: LIST
44880: PUSH
44881: LD_INT 1
44883: NEG
44884: PUSH
44885: LD_INT 3
44887: PUSH
44888: EMPTY
44889: LIST
44890: LIST
44891: PUSH
44892: LD_INT 1
44894: NEG
44895: PUSH
44896: LD_INT 2
44898: PUSH
44899: EMPTY
44900: LIST
44901: LIST
44902: PUSH
44903: LD_INT 2
44905: PUSH
44906: LD_INT 4
44908: PUSH
44909: EMPTY
44910: LIST
44911: LIST
44912: PUSH
44913: LD_INT 2
44915: NEG
44916: PUSH
44917: LD_INT 2
44919: PUSH
44920: EMPTY
44921: LIST
44922: LIST
44923: PUSH
44924: LD_INT 4
44926: NEG
44927: PUSH
44928: LD_INT 0
44930: PUSH
44931: EMPTY
44932: LIST
44933: LIST
44934: PUSH
44935: LD_INT 4
44937: NEG
44938: PUSH
44939: LD_INT 1
44941: NEG
44942: PUSH
44943: EMPTY
44944: LIST
44945: LIST
44946: PUSH
44947: LD_INT 3
44949: NEG
44950: PUSH
44951: LD_INT 0
44953: PUSH
44954: EMPTY
44955: LIST
44956: LIST
44957: PUSH
44958: LD_INT 3
44960: NEG
44961: PUSH
44962: LD_INT 1
44964: PUSH
44965: EMPTY
44966: LIST
44967: LIST
44968: PUSH
44969: LD_INT 4
44971: NEG
44972: PUSH
44973: LD_INT 1
44975: PUSH
44976: EMPTY
44977: LIST
44978: LIST
44979: PUSH
44980: LD_INT 5
44982: NEG
44983: PUSH
44984: LD_INT 0
44986: PUSH
44987: EMPTY
44988: LIST
44989: LIST
44990: PUSH
44991: LD_INT 5
44993: NEG
44994: PUSH
44995: LD_INT 1
44997: NEG
44998: PUSH
44999: EMPTY
45000: LIST
45001: LIST
45002: PUSH
45003: LD_INT 5
45005: NEG
45006: PUSH
45007: LD_INT 2
45009: NEG
45010: PUSH
45011: EMPTY
45012: LIST
45013: LIST
45014: PUSH
45015: LD_INT 3
45017: NEG
45018: PUSH
45019: LD_INT 2
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: PUSH
45026: LD_INT 3
45028: NEG
45029: PUSH
45030: LD_INT 3
45032: NEG
45033: PUSH
45034: EMPTY
45035: LIST
45036: LIST
45037: PUSH
45038: LD_INT 3
45040: NEG
45041: PUSH
45042: LD_INT 4
45044: NEG
45045: PUSH
45046: EMPTY
45047: LIST
45048: LIST
45049: PUSH
45050: LD_INT 2
45052: NEG
45053: PUSH
45054: LD_INT 3
45056: NEG
45057: PUSH
45058: EMPTY
45059: LIST
45060: LIST
45061: PUSH
45062: LD_INT 2
45064: NEG
45065: PUSH
45066: LD_INT 2
45068: NEG
45069: PUSH
45070: EMPTY
45071: LIST
45072: LIST
45073: PUSH
45074: LD_INT 3
45076: NEG
45077: PUSH
45078: LD_INT 2
45080: NEG
45081: PUSH
45082: EMPTY
45083: LIST
45084: LIST
45085: PUSH
45086: LD_INT 4
45088: NEG
45089: PUSH
45090: LD_INT 3
45092: NEG
45093: PUSH
45094: EMPTY
45095: LIST
45096: LIST
45097: PUSH
45098: LD_INT 4
45100: NEG
45101: PUSH
45102: LD_INT 4
45104: NEG
45105: PUSH
45106: EMPTY
45107: LIST
45108: LIST
45109: PUSH
45110: LD_INT 2
45112: NEG
45113: PUSH
45114: LD_INT 4
45116: NEG
45117: PUSH
45118: EMPTY
45119: LIST
45120: LIST
45121: PUSH
45122: LD_INT 4
45124: NEG
45125: PUSH
45126: LD_INT 2
45128: NEG
45129: PUSH
45130: EMPTY
45131: LIST
45132: LIST
45133: PUSH
45134: LD_INT 0
45136: PUSH
45137: LD_INT 4
45139: NEG
45140: PUSH
45141: EMPTY
45142: LIST
45143: LIST
45144: PUSH
45145: LD_INT 0
45147: PUSH
45148: LD_INT 5
45150: NEG
45151: PUSH
45152: EMPTY
45153: LIST
45154: LIST
45155: PUSH
45156: LD_INT 1
45158: PUSH
45159: LD_INT 4
45161: NEG
45162: PUSH
45163: EMPTY
45164: LIST
45165: LIST
45166: PUSH
45167: LD_INT 1
45169: PUSH
45170: LD_INT 3
45172: NEG
45173: PUSH
45174: EMPTY
45175: LIST
45176: LIST
45177: PUSH
45178: LD_INT 0
45180: PUSH
45181: LD_INT 3
45183: NEG
45184: PUSH
45185: EMPTY
45186: LIST
45187: LIST
45188: PUSH
45189: LD_INT 1
45191: NEG
45192: PUSH
45193: LD_INT 4
45195: NEG
45196: PUSH
45197: EMPTY
45198: LIST
45199: LIST
45200: PUSH
45201: LD_INT 1
45203: NEG
45204: PUSH
45205: LD_INT 5
45207: NEG
45208: PUSH
45209: EMPTY
45210: LIST
45211: LIST
45212: PUSH
45213: LD_INT 2
45215: PUSH
45216: LD_INT 3
45218: NEG
45219: PUSH
45220: EMPTY
45221: LIST
45222: LIST
45223: PUSH
45224: LD_INT 2
45226: NEG
45227: PUSH
45228: LD_INT 5
45230: NEG
45231: PUSH
45232: EMPTY
45233: LIST
45234: LIST
45235: PUSH
45236: EMPTY
45237: LIST
45238: LIST
45239: LIST
45240: LIST
45241: LIST
45242: LIST
45243: LIST
45244: LIST
45245: LIST
45246: LIST
45247: LIST
45248: LIST
45249: LIST
45250: LIST
45251: LIST
45252: LIST
45253: LIST
45254: LIST
45255: LIST
45256: LIST
45257: LIST
45258: LIST
45259: LIST
45260: LIST
45261: LIST
45262: LIST
45263: LIST
45264: LIST
45265: LIST
45266: LIST
45267: LIST
45268: LIST
45269: LIST
45270: LIST
45271: LIST
45272: LIST
45273: LIST
45274: LIST
45275: LIST
45276: LIST
45277: LIST
45278: LIST
45279: LIST
45280: LIST
45281: LIST
45282: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
45283: LD_ADDR_VAR 0 31
45287: PUSH
45288: LD_INT 0
45290: PUSH
45291: LD_INT 4
45293: PUSH
45294: EMPTY
45295: LIST
45296: LIST
45297: PUSH
45298: LD_INT 0
45300: PUSH
45301: LD_INT 3
45303: PUSH
45304: EMPTY
45305: LIST
45306: LIST
45307: PUSH
45308: LD_INT 1
45310: PUSH
45311: LD_INT 4
45313: PUSH
45314: EMPTY
45315: LIST
45316: LIST
45317: PUSH
45318: LD_INT 1
45320: PUSH
45321: LD_INT 5
45323: PUSH
45324: EMPTY
45325: LIST
45326: LIST
45327: PUSH
45328: LD_INT 0
45330: PUSH
45331: LD_INT 5
45333: PUSH
45334: EMPTY
45335: LIST
45336: LIST
45337: PUSH
45338: LD_INT 1
45340: NEG
45341: PUSH
45342: LD_INT 4
45344: PUSH
45345: EMPTY
45346: LIST
45347: LIST
45348: PUSH
45349: LD_INT 1
45351: NEG
45352: PUSH
45353: LD_INT 3
45355: PUSH
45356: EMPTY
45357: LIST
45358: LIST
45359: PUSH
45360: LD_INT 2
45362: PUSH
45363: LD_INT 5
45365: PUSH
45366: EMPTY
45367: LIST
45368: LIST
45369: PUSH
45370: LD_INT 2
45372: NEG
45373: PUSH
45374: LD_INT 3
45376: PUSH
45377: EMPTY
45378: LIST
45379: LIST
45380: PUSH
45381: LD_INT 3
45383: NEG
45384: PUSH
45385: LD_INT 0
45387: PUSH
45388: EMPTY
45389: LIST
45390: LIST
45391: PUSH
45392: LD_INT 3
45394: NEG
45395: PUSH
45396: LD_INT 1
45398: NEG
45399: PUSH
45400: EMPTY
45401: LIST
45402: LIST
45403: PUSH
45404: LD_INT 2
45406: NEG
45407: PUSH
45408: LD_INT 0
45410: PUSH
45411: EMPTY
45412: LIST
45413: LIST
45414: PUSH
45415: LD_INT 2
45417: NEG
45418: PUSH
45419: LD_INT 1
45421: PUSH
45422: EMPTY
45423: LIST
45424: LIST
45425: PUSH
45426: LD_INT 3
45428: NEG
45429: PUSH
45430: LD_INT 1
45432: PUSH
45433: EMPTY
45434: LIST
45435: LIST
45436: PUSH
45437: LD_INT 4
45439: NEG
45440: PUSH
45441: LD_INT 0
45443: PUSH
45444: EMPTY
45445: LIST
45446: LIST
45447: PUSH
45448: LD_INT 4
45450: NEG
45451: PUSH
45452: LD_INT 1
45454: NEG
45455: PUSH
45456: EMPTY
45457: LIST
45458: LIST
45459: PUSH
45460: LD_INT 4
45462: NEG
45463: PUSH
45464: LD_INT 2
45466: NEG
45467: PUSH
45468: EMPTY
45469: LIST
45470: LIST
45471: PUSH
45472: LD_INT 2
45474: NEG
45475: PUSH
45476: LD_INT 2
45478: PUSH
45479: EMPTY
45480: LIST
45481: LIST
45482: PUSH
45483: LD_INT 4
45485: NEG
45486: PUSH
45487: LD_INT 4
45489: NEG
45490: PUSH
45491: EMPTY
45492: LIST
45493: LIST
45494: PUSH
45495: LD_INT 4
45497: NEG
45498: PUSH
45499: LD_INT 5
45501: NEG
45502: PUSH
45503: EMPTY
45504: LIST
45505: LIST
45506: PUSH
45507: LD_INT 3
45509: NEG
45510: PUSH
45511: LD_INT 4
45513: NEG
45514: PUSH
45515: EMPTY
45516: LIST
45517: LIST
45518: PUSH
45519: LD_INT 3
45521: NEG
45522: PUSH
45523: LD_INT 3
45525: NEG
45526: PUSH
45527: EMPTY
45528: LIST
45529: LIST
45530: PUSH
45531: LD_INT 4
45533: NEG
45534: PUSH
45535: LD_INT 3
45537: NEG
45538: PUSH
45539: EMPTY
45540: LIST
45541: LIST
45542: PUSH
45543: LD_INT 5
45545: NEG
45546: PUSH
45547: LD_INT 4
45549: NEG
45550: PUSH
45551: EMPTY
45552: LIST
45553: LIST
45554: PUSH
45555: LD_INT 5
45557: NEG
45558: PUSH
45559: LD_INT 5
45561: NEG
45562: PUSH
45563: EMPTY
45564: LIST
45565: LIST
45566: PUSH
45567: LD_INT 3
45569: NEG
45570: PUSH
45571: LD_INT 5
45573: NEG
45574: PUSH
45575: EMPTY
45576: LIST
45577: LIST
45578: PUSH
45579: LD_INT 5
45581: NEG
45582: PUSH
45583: LD_INT 3
45585: NEG
45586: PUSH
45587: EMPTY
45588: LIST
45589: LIST
45590: PUSH
45591: LD_INT 0
45593: PUSH
45594: LD_INT 3
45596: NEG
45597: PUSH
45598: EMPTY
45599: LIST
45600: LIST
45601: PUSH
45602: LD_INT 0
45604: PUSH
45605: LD_INT 4
45607: NEG
45608: PUSH
45609: EMPTY
45610: LIST
45611: LIST
45612: PUSH
45613: LD_INT 1
45615: PUSH
45616: LD_INT 3
45618: NEG
45619: PUSH
45620: EMPTY
45621: LIST
45622: LIST
45623: PUSH
45624: LD_INT 1
45626: PUSH
45627: LD_INT 2
45629: NEG
45630: PUSH
45631: EMPTY
45632: LIST
45633: LIST
45634: PUSH
45635: LD_INT 0
45637: PUSH
45638: LD_INT 2
45640: NEG
45641: PUSH
45642: EMPTY
45643: LIST
45644: LIST
45645: PUSH
45646: LD_INT 1
45648: NEG
45649: PUSH
45650: LD_INT 3
45652: NEG
45653: PUSH
45654: EMPTY
45655: LIST
45656: LIST
45657: PUSH
45658: LD_INT 1
45660: NEG
45661: PUSH
45662: LD_INT 4
45664: NEG
45665: PUSH
45666: EMPTY
45667: LIST
45668: LIST
45669: PUSH
45670: LD_INT 2
45672: PUSH
45673: LD_INT 2
45675: NEG
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: PUSH
45681: LD_INT 2
45683: NEG
45684: PUSH
45685: LD_INT 4
45687: NEG
45688: PUSH
45689: EMPTY
45690: LIST
45691: LIST
45692: PUSH
45693: LD_INT 4
45695: PUSH
45696: LD_INT 0
45698: PUSH
45699: EMPTY
45700: LIST
45701: LIST
45702: PUSH
45703: LD_INT 4
45705: PUSH
45706: LD_INT 1
45708: NEG
45709: PUSH
45710: EMPTY
45711: LIST
45712: LIST
45713: PUSH
45714: LD_INT 5
45716: PUSH
45717: LD_INT 0
45719: PUSH
45720: EMPTY
45721: LIST
45722: LIST
45723: PUSH
45724: LD_INT 5
45726: PUSH
45727: LD_INT 1
45729: PUSH
45730: EMPTY
45731: LIST
45732: LIST
45733: PUSH
45734: LD_INT 4
45736: PUSH
45737: LD_INT 1
45739: PUSH
45740: EMPTY
45741: LIST
45742: LIST
45743: PUSH
45744: LD_INT 3
45746: PUSH
45747: LD_INT 0
45749: PUSH
45750: EMPTY
45751: LIST
45752: LIST
45753: PUSH
45754: LD_INT 3
45756: PUSH
45757: LD_INT 1
45759: NEG
45760: PUSH
45761: EMPTY
45762: LIST
45763: LIST
45764: PUSH
45765: LD_INT 3
45767: PUSH
45768: LD_INT 2
45770: NEG
45771: PUSH
45772: EMPTY
45773: LIST
45774: LIST
45775: PUSH
45776: LD_INT 5
45778: PUSH
45779: LD_INT 2
45781: PUSH
45782: EMPTY
45783: LIST
45784: LIST
45785: PUSH
45786: EMPTY
45787: LIST
45788: LIST
45789: LIST
45790: LIST
45791: LIST
45792: LIST
45793: LIST
45794: LIST
45795: LIST
45796: LIST
45797: LIST
45798: LIST
45799: LIST
45800: LIST
45801: LIST
45802: LIST
45803: LIST
45804: LIST
45805: LIST
45806: LIST
45807: LIST
45808: LIST
45809: LIST
45810: LIST
45811: LIST
45812: LIST
45813: LIST
45814: LIST
45815: LIST
45816: LIST
45817: LIST
45818: LIST
45819: LIST
45820: LIST
45821: LIST
45822: LIST
45823: LIST
45824: LIST
45825: LIST
45826: LIST
45827: LIST
45828: LIST
45829: LIST
45830: LIST
45831: LIST
45832: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
45833: LD_ADDR_VAR 0 32
45837: PUSH
45838: LD_INT 4
45840: NEG
45841: PUSH
45842: LD_INT 0
45844: PUSH
45845: EMPTY
45846: LIST
45847: LIST
45848: PUSH
45849: LD_INT 4
45851: NEG
45852: PUSH
45853: LD_INT 1
45855: NEG
45856: PUSH
45857: EMPTY
45858: LIST
45859: LIST
45860: PUSH
45861: LD_INT 3
45863: NEG
45864: PUSH
45865: LD_INT 0
45867: PUSH
45868: EMPTY
45869: LIST
45870: LIST
45871: PUSH
45872: LD_INT 3
45874: NEG
45875: PUSH
45876: LD_INT 1
45878: PUSH
45879: EMPTY
45880: LIST
45881: LIST
45882: PUSH
45883: LD_INT 4
45885: NEG
45886: PUSH
45887: LD_INT 1
45889: PUSH
45890: EMPTY
45891: LIST
45892: LIST
45893: PUSH
45894: LD_INT 5
45896: NEG
45897: PUSH
45898: LD_INT 0
45900: PUSH
45901: EMPTY
45902: LIST
45903: LIST
45904: PUSH
45905: LD_INT 5
45907: NEG
45908: PUSH
45909: LD_INT 1
45911: NEG
45912: PUSH
45913: EMPTY
45914: LIST
45915: LIST
45916: PUSH
45917: LD_INT 5
45919: NEG
45920: PUSH
45921: LD_INT 2
45923: NEG
45924: PUSH
45925: EMPTY
45926: LIST
45927: LIST
45928: PUSH
45929: LD_INT 3
45931: NEG
45932: PUSH
45933: LD_INT 2
45935: PUSH
45936: EMPTY
45937: LIST
45938: LIST
45939: PUSH
45940: LD_INT 3
45942: NEG
45943: PUSH
45944: LD_INT 3
45946: NEG
45947: PUSH
45948: EMPTY
45949: LIST
45950: LIST
45951: PUSH
45952: LD_INT 3
45954: NEG
45955: PUSH
45956: LD_INT 4
45958: NEG
45959: PUSH
45960: EMPTY
45961: LIST
45962: LIST
45963: PUSH
45964: LD_INT 2
45966: NEG
45967: PUSH
45968: LD_INT 3
45970: NEG
45971: PUSH
45972: EMPTY
45973: LIST
45974: LIST
45975: PUSH
45976: LD_INT 2
45978: NEG
45979: PUSH
45980: LD_INT 2
45982: NEG
45983: PUSH
45984: EMPTY
45985: LIST
45986: LIST
45987: PUSH
45988: LD_INT 3
45990: NEG
45991: PUSH
45992: LD_INT 2
45994: NEG
45995: PUSH
45996: EMPTY
45997: LIST
45998: LIST
45999: PUSH
46000: LD_INT 4
46002: NEG
46003: PUSH
46004: LD_INT 3
46006: NEG
46007: PUSH
46008: EMPTY
46009: LIST
46010: LIST
46011: PUSH
46012: LD_INT 4
46014: NEG
46015: PUSH
46016: LD_INT 4
46018: NEG
46019: PUSH
46020: EMPTY
46021: LIST
46022: LIST
46023: PUSH
46024: LD_INT 2
46026: NEG
46027: PUSH
46028: LD_INT 4
46030: NEG
46031: PUSH
46032: EMPTY
46033: LIST
46034: LIST
46035: PUSH
46036: LD_INT 4
46038: NEG
46039: PUSH
46040: LD_INT 2
46042: NEG
46043: PUSH
46044: EMPTY
46045: LIST
46046: LIST
46047: PUSH
46048: LD_INT 0
46050: PUSH
46051: LD_INT 4
46053: NEG
46054: PUSH
46055: EMPTY
46056: LIST
46057: LIST
46058: PUSH
46059: LD_INT 0
46061: PUSH
46062: LD_INT 5
46064: NEG
46065: PUSH
46066: EMPTY
46067: LIST
46068: LIST
46069: PUSH
46070: LD_INT 1
46072: PUSH
46073: LD_INT 4
46075: NEG
46076: PUSH
46077: EMPTY
46078: LIST
46079: LIST
46080: PUSH
46081: LD_INT 1
46083: PUSH
46084: LD_INT 3
46086: NEG
46087: PUSH
46088: EMPTY
46089: LIST
46090: LIST
46091: PUSH
46092: LD_INT 0
46094: PUSH
46095: LD_INT 3
46097: NEG
46098: PUSH
46099: EMPTY
46100: LIST
46101: LIST
46102: PUSH
46103: LD_INT 1
46105: NEG
46106: PUSH
46107: LD_INT 4
46109: NEG
46110: PUSH
46111: EMPTY
46112: LIST
46113: LIST
46114: PUSH
46115: LD_INT 1
46117: NEG
46118: PUSH
46119: LD_INT 5
46121: NEG
46122: PUSH
46123: EMPTY
46124: LIST
46125: LIST
46126: PUSH
46127: LD_INT 2
46129: PUSH
46130: LD_INT 3
46132: NEG
46133: PUSH
46134: EMPTY
46135: LIST
46136: LIST
46137: PUSH
46138: LD_INT 2
46140: NEG
46141: PUSH
46142: LD_INT 5
46144: NEG
46145: PUSH
46146: EMPTY
46147: LIST
46148: LIST
46149: PUSH
46150: LD_INT 3
46152: PUSH
46153: LD_INT 0
46155: PUSH
46156: EMPTY
46157: LIST
46158: LIST
46159: PUSH
46160: LD_INT 3
46162: PUSH
46163: LD_INT 1
46165: NEG
46166: PUSH
46167: EMPTY
46168: LIST
46169: LIST
46170: PUSH
46171: LD_INT 4
46173: PUSH
46174: LD_INT 0
46176: PUSH
46177: EMPTY
46178: LIST
46179: LIST
46180: PUSH
46181: LD_INT 4
46183: PUSH
46184: LD_INT 1
46186: PUSH
46187: EMPTY
46188: LIST
46189: LIST
46190: PUSH
46191: LD_INT 3
46193: PUSH
46194: LD_INT 1
46196: PUSH
46197: EMPTY
46198: LIST
46199: LIST
46200: PUSH
46201: LD_INT 2
46203: PUSH
46204: LD_INT 0
46206: PUSH
46207: EMPTY
46208: LIST
46209: LIST
46210: PUSH
46211: LD_INT 2
46213: PUSH
46214: LD_INT 1
46216: NEG
46217: PUSH
46218: EMPTY
46219: LIST
46220: LIST
46221: PUSH
46222: LD_INT 2
46224: PUSH
46225: LD_INT 2
46227: NEG
46228: PUSH
46229: EMPTY
46230: LIST
46231: LIST
46232: PUSH
46233: LD_INT 4
46235: PUSH
46236: LD_INT 2
46238: PUSH
46239: EMPTY
46240: LIST
46241: LIST
46242: PUSH
46243: LD_INT 4
46245: PUSH
46246: LD_INT 4
46248: PUSH
46249: EMPTY
46250: LIST
46251: LIST
46252: PUSH
46253: LD_INT 4
46255: PUSH
46256: LD_INT 3
46258: PUSH
46259: EMPTY
46260: LIST
46261: LIST
46262: PUSH
46263: LD_INT 5
46265: PUSH
46266: LD_INT 4
46268: PUSH
46269: EMPTY
46270: LIST
46271: LIST
46272: PUSH
46273: LD_INT 5
46275: PUSH
46276: LD_INT 5
46278: PUSH
46279: EMPTY
46280: LIST
46281: LIST
46282: PUSH
46283: LD_INT 4
46285: PUSH
46286: LD_INT 5
46288: PUSH
46289: EMPTY
46290: LIST
46291: LIST
46292: PUSH
46293: LD_INT 3
46295: PUSH
46296: LD_INT 4
46298: PUSH
46299: EMPTY
46300: LIST
46301: LIST
46302: PUSH
46303: LD_INT 3
46305: PUSH
46306: LD_INT 3
46308: PUSH
46309: EMPTY
46310: LIST
46311: LIST
46312: PUSH
46313: LD_INT 5
46315: PUSH
46316: LD_INT 3
46318: PUSH
46319: EMPTY
46320: LIST
46321: LIST
46322: PUSH
46323: LD_INT 3
46325: PUSH
46326: LD_INT 5
46328: PUSH
46329: EMPTY
46330: LIST
46331: LIST
46332: PUSH
46333: EMPTY
46334: LIST
46335: LIST
46336: LIST
46337: LIST
46338: LIST
46339: LIST
46340: LIST
46341: LIST
46342: LIST
46343: LIST
46344: LIST
46345: LIST
46346: LIST
46347: LIST
46348: LIST
46349: LIST
46350: LIST
46351: LIST
46352: LIST
46353: LIST
46354: LIST
46355: LIST
46356: LIST
46357: LIST
46358: LIST
46359: LIST
46360: LIST
46361: LIST
46362: LIST
46363: LIST
46364: LIST
46365: LIST
46366: LIST
46367: LIST
46368: LIST
46369: LIST
46370: LIST
46371: LIST
46372: LIST
46373: LIST
46374: LIST
46375: LIST
46376: LIST
46377: LIST
46378: LIST
46379: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
46380: LD_ADDR_VAR 0 33
46384: PUSH
46385: LD_INT 4
46387: NEG
46388: PUSH
46389: LD_INT 4
46391: NEG
46392: PUSH
46393: EMPTY
46394: LIST
46395: LIST
46396: PUSH
46397: LD_INT 4
46399: NEG
46400: PUSH
46401: LD_INT 5
46403: NEG
46404: PUSH
46405: EMPTY
46406: LIST
46407: LIST
46408: PUSH
46409: LD_INT 3
46411: NEG
46412: PUSH
46413: LD_INT 4
46415: NEG
46416: PUSH
46417: EMPTY
46418: LIST
46419: LIST
46420: PUSH
46421: LD_INT 3
46423: NEG
46424: PUSH
46425: LD_INT 3
46427: NEG
46428: PUSH
46429: EMPTY
46430: LIST
46431: LIST
46432: PUSH
46433: LD_INT 4
46435: NEG
46436: PUSH
46437: LD_INT 3
46439: NEG
46440: PUSH
46441: EMPTY
46442: LIST
46443: LIST
46444: PUSH
46445: LD_INT 5
46447: NEG
46448: PUSH
46449: LD_INT 4
46451: NEG
46452: PUSH
46453: EMPTY
46454: LIST
46455: LIST
46456: PUSH
46457: LD_INT 5
46459: NEG
46460: PUSH
46461: LD_INT 5
46463: NEG
46464: PUSH
46465: EMPTY
46466: LIST
46467: LIST
46468: PUSH
46469: LD_INT 3
46471: NEG
46472: PUSH
46473: LD_INT 5
46475: NEG
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: PUSH
46481: LD_INT 5
46483: NEG
46484: PUSH
46485: LD_INT 3
46487: NEG
46488: PUSH
46489: EMPTY
46490: LIST
46491: LIST
46492: PUSH
46493: LD_INT 0
46495: PUSH
46496: LD_INT 3
46498: NEG
46499: PUSH
46500: EMPTY
46501: LIST
46502: LIST
46503: PUSH
46504: LD_INT 0
46506: PUSH
46507: LD_INT 4
46509: NEG
46510: PUSH
46511: EMPTY
46512: LIST
46513: LIST
46514: PUSH
46515: LD_INT 1
46517: PUSH
46518: LD_INT 3
46520: NEG
46521: PUSH
46522: EMPTY
46523: LIST
46524: LIST
46525: PUSH
46526: LD_INT 1
46528: PUSH
46529: LD_INT 2
46531: NEG
46532: PUSH
46533: EMPTY
46534: LIST
46535: LIST
46536: PUSH
46537: LD_INT 0
46539: PUSH
46540: LD_INT 2
46542: NEG
46543: PUSH
46544: EMPTY
46545: LIST
46546: LIST
46547: PUSH
46548: LD_INT 1
46550: NEG
46551: PUSH
46552: LD_INT 3
46554: NEG
46555: PUSH
46556: EMPTY
46557: LIST
46558: LIST
46559: PUSH
46560: LD_INT 1
46562: NEG
46563: PUSH
46564: LD_INT 4
46566: NEG
46567: PUSH
46568: EMPTY
46569: LIST
46570: LIST
46571: PUSH
46572: LD_INT 2
46574: PUSH
46575: LD_INT 2
46577: NEG
46578: PUSH
46579: EMPTY
46580: LIST
46581: LIST
46582: PUSH
46583: LD_INT 2
46585: NEG
46586: PUSH
46587: LD_INT 4
46589: NEG
46590: PUSH
46591: EMPTY
46592: LIST
46593: LIST
46594: PUSH
46595: LD_INT 4
46597: PUSH
46598: LD_INT 0
46600: PUSH
46601: EMPTY
46602: LIST
46603: LIST
46604: PUSH
46605: LD_INT 4
46607: PUSH
46608: LD_INT 1
46610: NEG
46611: PUSH
46612: EMPTY
46613: LIST
46614: LIST
46615: PUSH
46616: LD_INT 5
46618: PUSH
46619: LD_INT 0
46621: PUSH
46622: EMPTY
46623: LIST
46624: LIST
46625: PUSH
46626: LD_INT 5
46628: PUSH
46629: LD_INT 1
46631: PUSH
46632: EMPTY
46633: LIST
46634: LIST
46635: PUSH
46636: LD_INT 4
46638: PUSH
46639: LD_INT 1
46641: PUSH
46642: EMPTY
46643: LIST
46644: LIST
46645: PUSH
46646: LD_INT 3
46648: PUSH
46649: LD_INT 0
46651: PUSH
46652: EMPTY
46653: LIST
46654: LIST
46655: PUSH
46656: LD_INT 3
46658: PUSH
46659: LD_INT 1
46661: NEG
46662: PUSH
46663: EMPTY
46664: LIST
46665: LIST
46666: PUSH
46667: LD_INT 3
46669: PUSH
46670: LD_INT 2
46672: NEG
46673: PUSH
46674: EMPTY
46675: LIST
46676: LIST
46677: PUSH
46678: LD_INT 5
46680: PUSH
46681: LD_INT 2
46683: PUSH
46684: EMPTY
46685: LIST
46686: LIST
46687: PUSH
46688: LD_INT 3
46690: PUSH
46691: LD_INT 3
46693: PUSH
46694: EMPTY
46695: LIST
46696: LIST
46697: PUSH
46698: LD_INT 3
46700: PUSH
46701: LD_INT 2
46703: PUSH
46704: EMPTY
46705: LIST
46706: LIST
46707: PUSH
46708: LD_INT 4
46710: PUSH
46711: LD_INT 3
46713: PUSH
46714: EMPTY
46715: LIST
46716: LIST
46717: PUSH
46718: LD_INT 4
46720: PUSH
46721: LD_INT 4
46723: PUSH
46724: EMPTY
46725: LIST
46726: LIST
46727: PUSH
46728: LD_INT 3
46730: PUSH
46731: LD_INT 4
46733: PUSH
46734: EMPTY
46735: LIST
46736: LIST
46737: PUSH
46738: LD_INT 2
46740: PUSH
46741: LD_INT 3
46743: PUSH
46744: EMPTY
46745: LIST
46746: LIST
46747: PUSH
46748: LD_INT 2
46750: PUSH
46751: LD_INT 2
46753: PUSH
46754: EMPTY
46755: LIST
46756: LIST
46757: PUSH
46758: LD_INT 4
46760: PUSH
46761: LD_INT 2
46763: PUSH
46764: EMPTY
46765: LIST
46766: LIST
46767: PUSH
46768: LD_INT 2
46770: PUSH
46771: LD_INT 4
46773: PUSH
46774: EMPTY
46775: LIST
46776: LIST
46777: PUSH
46778: LD_INT 0
46780: PUSH
46781: LD_INT 4
46783: PUSH
46784: EMPTY
46785: LIST
46786: LIST
46787: PUSH
46788: LD_INT 0
46790: PUSH
46791: LD_INT 3
46793: PUSH
46794: EMPTY
46795: LIST
46796: LIST
46797: PUSH
46798: LD_INT 1
46800: PUSH
46801: LD_INT 4
46803: PUSH
46804: EMPTY
46805: LIST
46806: LIST
46807: PUSH
46808: LD_INT 1
46810: PUSH
46811: LD_INT 5
46813: PUSH
46814: EMPTY
46815: LIST
46816: LIST
46817: PUSH
46818: LD_INT 0
46820: PUSH
46821: LD_INT 5
46823: PUSH
46824: EMPTY
46825: LIST
46826: LIST
46827: PUSH
46828: LD_INT 1
46830: NEG
46831: PUSH
46832: LD_INT 4
46834: PUSH
46835: EMPTY
46836: LIST
46837: LIST
46838: PUSH
46839: LD_INT 1
46841: NEG
46842: PUSH
46843: LD_INT 3
46845: PUSH
46846: EMPTY
46847: LIST
46848: LIST
46849: PUSH
46850: LD_INT 2
46852: PUSH
46853: LD_INT 5
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: PUSH
46860: LD_INT 2
46862: NEG
46863: PUSH
46864: LD_INT 3
46866: PUSH
46867: EMPTY
46868: LIST
46869: LIST
46870: PUSH
46871: EMPTY
46872: LIST
46873: LIST
46874: LIST
46875: LIST
46876: LIST
46877: LIST
46878: LIST
46879: LIST
46880: LIST
46881: LIST
46882: LIST
46883: LIST
46884: LIST
46885: LIST
46886: LIST
46887: LIST
46888: LIST
46889: LIST
46890: LIST
46891: LIST
46892: LIST
46893: LIST
46894: LIST
46895: LIST
46896: LIST
46897: LIST
46898: LIST
46899: LIST
46900: LIST
46901: LIST
46902: LIST
46903: LIST
46904: LIST
46905: LIST
46906: LIST
46907: LIST
46908: LIST
46909: LIST
46910: LIST
46911: LIST
46912: LIST
46913: LIST
46914: LIST
46915: LIST
46916: LIST
46917: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
46918: LD_ADDR_VAR 0 34
46922: PUSH
46923: LD_INT 0
46925: PUSH
46926: LD_INT 4
46928: NEG
46929: PUSH
46930: EMPTY
46931: LIST
46932: LIST
46933: PUSH
46934: LD_INT 0
46936: PUSH
46937: LD_INT 5
46939: NEG
46940: PUSH
46941: EMPTY
46942: LIST
46943: LIST
46944: PUSH
46945: LD_INT 1
46947: PUSH
46948: LD_INT 4
46950: NEG
46951: PUSH
46952: EMPTY
46953: LIST
46954: LIST
46955: PUSH
46956: LD_INT 1
46958: PUSH
46959: LD_INT 3
46961: NEG
46962: PUSH
46963: EMPTY
46964: LIST
46965: LIST
46966: PUSH
46967: LD_INT 0
46969: PUSH
46970: LD_INT 3
46972: NEG
46973: PUSH
46974: EMPTY
46975: LIST
46976: LIST
46977: PUSH
46978: LD_INT 1
46980: NEG
46981: PUSH
46982: LD_INT 4
46984: NEG
46985: PUSH
46986: EMPTY
46987: LIST
46988: LIST
46989: PUSH
46990: LD_INT 1
46992: NEG
46993: PUSH
46994: LD_INT 5
46996: NEG
46997: PUSH
46998: EMPTY
46999: LIST
47000: LIST
47001: PUSH
47002: LD_INT 2
47004: PUSH
47005: LD_INT 3
47007: NEG
47008: PUSH
47009: EMPTY
47010: LIST
47011: LIST
47012: PUSH
47013: LD_INT 2
47015: NEG
47016: PUSH
47017: LD_INT 5
47019: NEG
47020: PUSH
47021: EMPTY
47022: LIST
47023: LIST
47024: PUSH
47025: LD_INT 3
47027: PUSH
47028: LD_INT 0
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: PUSH
47035: LD_INT 3
47037: PUSH
47038: LD_INT 1
47040: NEG
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: PUSH
47046: LD_INT 4
47048: PUSH
47049: LD_INT 0
47051: PUSH
47052: EMPTY
47053: LIST
47054: LIST
47055: PUSH
47056: LD_INT 4
47058: PUSH
47059: LD_INT 1
47061: PUSH
47062: EMPTY
47063: LIST
47064: LIST
47065: PUSH
47066: LD_INT 3
47068: PUSH
47069: LD_INT 1
47071: PUSH
47072: EMPTY
47073: LIST
47074: LIST
47075: PUSH
47076: LD_INT 2
47078: PUSH
47079: LD_INT 0
47081: PUSH
47082: EMPTY
47083: LIST
47084: LIST
47085: PUSH
47086: LD_INT 2
47088: PUSH
47089: LD_INT 1
47091: NEG
47092: PUSH
47093: EMPTY
47094: LIST
47095: LIST
47096: PUSH
47097: LD_INT 2
47099: PUSH
47100: LD_INT 2
47102: NEG
47103: PUSH
47104: EMPTY
47105: LIST
47106: LIST
47107: PUSH
47108: LD_INT 4
47110: PUSH
47111: LD_INT 2
47113: PUSH
47114: EMPTY
47115: LIST
47116: LIST
47117: PUSH
47118: LD_INT 4
47120: PUSH
47121: LD_INT 4
47123: PUSH
47124: EMPTY
47125: LIST
47126: LIST
47127: PUSH
47128: LD_INT 4
47130: PUSH
47131: LD_INT 3
47133: PUSH
47134: EMPTY
47135: LIST
47136: LIST
47137: PUSH
47138: LD_INT 5
47140: PUSH
47141: LD_INT 4
47143: PUSH
47144: EMPTY
47145: LIST
47146: LIST
47147: PUSH
47148: LD_INT 5
47150: PUSH
47151: LD_INT 5
47153: PUSH
47154: EMPTY
47155: LIST
47156: LIST
47157: PUSH
47158: LD_INT 4
47160: PUSH
47161: LD_INT 5
47163: PUSH
47164: EMPTY
47165: LIST
47166: LIST
47167: PUSH
47168: LD_INT 3
47170: PUSH
47171: LD_INT 4
47173: PUSH
47174: EMPTY
47175: LIST
47176: LIST
47177: PUSH
47178: LD_INT 3
47180: PUSH
47181: LD_INT 3
47183: PUSH
47184: EMPTY
47185: LIST
47186: LIST
47187: PUSH
47188: LD_INT 5
47190: PUSH
47191: LD_INT 3
47193: PUSH
47194: EMPTY
47195: LIST
47196: LIST
47197: PUSH
47198: LD_INT 3
47200: PUSH
47201: LD_INT 5
47203: PUSH
47204: EMPTY
47205: LIST
47206: LIST
47207: PUSH
47208: LD_INT 0
47210: PUSH
47211: LD_INT 3
47213: PUSH
47214: EMPTY
47215: LIST
47216: LIST
47217: PUSH
47218: LD_INT 0
47220: PUSH
47221: LD_INT 2
47223: PUSH
47224: EMPTY
47225: LIST
47226: LIST
47227: PUSH
47228: LD_INT 1
47230: PUSH
47231: LD_INT 3
47233: PUSH
47234: EMPTY
47235: LIST
47236: LIST
47237: PUSH
47238: LD_INT 1
47240: PUSH
47241: LD_INT 4
47243: PUSH
47244: EMPTY
47245: LIST
47246: LIST
47247: PUSH
47248: LD_INT 0
47250: PUSH
47251: LD_INT 4
47253: PUSH
47254: EMPTY
47255: LIST
47256: LIST
47257: PUSH
47258: LD_INT 1
47260: NEG
47261: PUSH
47262: LD_INT 3
47264: PUSH
47265: EMPTY
47266: LIST
47267: LIST
47268: PUSH
47269: LD_INT 1
47271: NEG
47272: PUSH
47273: LD_INT 2
47275: PUSH
47276: EMPTY
47277: LIST
47278: LIST
47279: PUSH
47280: LD_INT 2
47282: PUSH
47283: LD_INT 4
47285: PUSH
47286: EMPTY
47287: LIST
47288: LIST
47289: PUSH
47290: LD_INT 2
47292: NEG
47293: PUSH
47294: LD_INT 2
47296: PUSH
47297: EMPTY
47298: LIST
47299: LIST
47300: PUSH
47301: LD_INT 4
47303: NEG
47304: PUSH
47305: LD_INT 0
47307: PUSH
47308: EMPTY
47309: LIST
47310: LIST
47311: PUSH
47312: LD_INT 4
47314: NEG
47315: PUSH
47316: LD_INT 1
47318: NEG
47319: PUSH
47320: EMPTY
47321: LIST
47322: LIST
47323: PUSH
47324: LD_INT 3
47326: NEG
47327: PUSH
47328: LD_INT 0
47330: PUSH
47331: EMPTY
47332: LIST
47333: LIST
47334: PUSH
47335: LD_INT 3
47337: NEG
47338: PUSH
47339: LD_INT 1
47341: PUSH
47342: EMPTY
47343: LIST
47344: LIST
47345: PUSH
47346: LD_INT 4
47348: NEG
47349: PUSH
47350: LD_INT 1
47352: PUSH
47353: EMPTY
47354: LIST
47355: LIST
47356: PUSH
47357: LD_INT 5
47359: NEG
47360: PUSH
47361: LD_INT 0
47363: PUSH
47364: EMPTY
47365: LIST
47366: LIST
47367: PUSH
47368: LD_INT 5
47370: NEG
47371: PUSH
47372: LD_INT 1
47374: NEG
47375: PUSH
47376: EMPTY
47377: LIST
47378: LIST
47379: PUSH
47380: LD_INT 5
47382: NEG
47383: PUSH
47384: LD_INT 2
47386: NEG
47387: PUSH
47388: EMPTY
47389: LIST
47390: LIST
47391: PUSH
47392: LD_INT 3
47394: NEG
47395: PUSH
47396: LD_INT 2
47398: PUSH
47399: EMPTY
47400: LIST
47401: LIST
47402: PUSH
47403: EMPTY
47404: LIST
47405: LIST
47406: LIST
47407: LIST
47408: LIST
47409: LIST
47410: LIST
47411: LIST
47412: LIST
47413: LIST
47414: LIST
47415: LIST
47416: LIST
47417: LIST
47418: LIST
47419: LIST
47420: LIST
47421: LIST
47422: LIST
47423: LIST
47424: LIST
47425: LIST
47426: LIST
47427: LIST
47428: LIST
47429: LIST
47430: LIST
47431: LIST
47432: LIST
47433: LIST
47434: LIST
47435: LIST
47436: LIST
47437: LIST
47438: LIST
47439: LIST
47440: LIST
47441: LIST
47442: LIST
47443: LIST
47444: LIST
47445: LIST
47446: LIST
47447: LIST
47448: LIST
47449: ST_TO_ADDR
// end ; end ;
47450: GO 47453
47452: POP
// case btype of b_depot , b_warehouse :
47453: LD_VAR 0 1
47457: PUSH
47458: LD_INT 0
47460: DOUBLE
47461: EQUAL
47462: IFTRUE 47472
47464: LD_INT 1
47466: DOUBLE
47467: EQUAL
47468: IFTRUE 47472
47470: GO 47673
47472: POP
// case nation of nation_american :
47473: LD_VAR 0 5
47477: PUSH
47478: LD_INT 1
47480: DOUBLE
47481: EQUAL
47482: IFTRUE 47486
47484: GO 47542
47486: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
47487: LD_ADDR_VAR 0 9
47491: PUSH
47492: LD_VAR 0 11
47496: PUSH
47497: LD_VAR 0 12
47501: PUSH
47502: LD_VAR 0 13
47506: PUSH
47507: LD_VAR 0 14
47511: PUSH
47512: LD_VAR 0 15
47516: PUSH
47517: LD_VAR 0 16
47521: PUSH
47522: EMPTY
47523: LIST
47524: LIST
47525: LIST
47526: LIST
47527: LIST
47528: LIST
47529: PUSH
47530: LD_VAR 0 4
47534: PUSH
47535: LD_INT 1
47537: PLUS
47538: ARRAY
47539: ST_TO_ADDR
47540: GO 47671
47542: LD_INT 2
47544: DOUBLE
47545: EQUAL
47546: IFTRUE 47550
47548: GO 47606
47550: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
47551: LD_ADDR_VAR 0 9
47555: PUSH
47556: LD_VAR 0 17
47560: PUSH
47561: LD_VAR 0 18
47565: PUSH
47566: LD_VAR 0 19
47570: PUSH
47571: LD_VAR 0 20
47575: PUSH
47576: LD_VAR 0 21
47580: PUSH
47581: LD_VAR 0 22
47585: PUSH
47586: EMPTY
47587: LIST
47588: LIST
47589: LIST
47590: LIST
47591: LIST
47592: LIST
47593: PUSH
47594: LD_VAR 0 4
47598: PUSH
47599: LD_INT 1
47601: PLUS
47602: ARRAY
47603: ST_TO_ADDR
47604: GO 47671
47606: LD_INT 3
47608: DOUBLE
47609: EQUAL
47610: IFTRUE 47614
47612: GO 47670
47614: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
47615: LD_ADDR_VAR 0 9
47619: PUSH
47620: LD_VAR 0 23
47624: PUSH
47625: LD_VAR 0 24
47629: PUSH
47630: LD_VAR 0 25
47634: PUSH
47635: LD_VAR 0 26
47639: PUSH
47640: LD_VAR 0 27
47644: PUSH
47645: LD_VAR 0 28
47649: PUSH
47650: EMPTY
47651: LIST
47652: LIST
47653: LIST
47654: LIST
47655: LIST
47656: LIST
47657: PUSH
47658: LD_VAR 0 4
47662: PUSH
47663: LD_INT 1
47665: PLUS
47666: ARRAY
47667: ST_TO_ADDR
47668: GO 47671
47670: POP
47671: GO 48226
47673: LD_INT 2
47675: DOUBLE
47676: EQUAL
47677: IFTRUE 47687
47679: LD_INT 3
47681: DOUBLE
47682: EQUAL
47683: IFTRUE 47687
47685: GO 47743
47687: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
47688: LD_ADDR_VAR 0 9
47692: PUSH
47693: LD_VAR 0 29
47697: PUSH
47698: LD_VAR 0 30
47702: PUSH
47703: LD_VAR 0 31
47707: PUSH
47708: LD_VAR 0 32
47712: PUSH
47713: LD_VAR 0 33
47717: PUSH
47718: LD_VAR 0 34
47722: PUSH
47723: EMPTY
47724: LIST
47725: LIST
47726: LIST
47727: LIST
47728: LIST
47729: LIST
47730: PUSH
47731: LD_VAR 0 4
47735: PUSH
47736: LD_INT 1
47738: PLUS
47739: ARRAY
47740: ST_TO_ADDR
47741: GO 48226
47743: LD_INT 16
47745: DOUBLE
47746: EQUAL
47747: IFTRUE 47805
47749: LD_INT 17
47751: DOUBLE
47752: EQUAL
47753: IFTRUE 47805
47755: LD_INT 18
47757: DOUBLE
47758: EQUAL
47759: IFTRUE 47805
47761: LD_INT 19
47763: DOUBLE
47764: EQUAL
47765: IFTRUE 47805
47767: LD_INT 22
47769: DOUBLE
47770: EQUAL
47771: IFTRUE 47805
47773: LD_INT 20
47775: DOUBLE
47776: EQUAL
47777: IFTRUE 47805
47779: LD_INT 21
47781: DOUBLE
47782: EQUAL
47783: IFTRUE 47805
47785: LD_INT 23
47787: DOUBLE
47788: EQUAL
47789: IFTRUE 47805
47791: LD_INT 24
47793: DOUBLE
47794: EQUAL
47795: IFTRUE 47805
47797: LD_INT 25
47799: DOUBLE
47800: EQUAL
47801: IFTRUE 47805
47803: GO 47861
47805: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
47806: LD_ADDR_VAR 0 9
47810: PUSH
47811: LD_VAR 0 35
47815: PUSH
47816: LD_VAR 0 36
47820: PUSH
47821: LD_VAR 0 37
47825: PUSH
47826: LD_VAR 0 38
47830: PUSH
47831: LD_VAR 0 39
47835: PUSH
47836: LD_VAR 0 40
47840: PUSH
47841: EMPTY
47842: LIST
47843: LIST
47844: LIST
47845: LIST
47846: LIST
47847: LIST
47848: PUSH
47849: LD_VAR 0 4
47853: PUSH
47854: LD_INT 1
47856: PLUS
47857: ARRAY
47858: ST_TO_ADDR
47859: GO 48226
47861: LD_INT 6
47863: DOUBLE
47864: EQUAL
47865: IFTRUE 47917
47867: LD_INT 7
47869: DOUBLE
47870: EQUAL
47871: IFTRUE 47917
47873: LD_INT 8
47875: DOUBLE
47876: EQUAL
47877: IFTRUE 47917
47879: LD_INT 13
47881: DOUBLE
47882: EQUAL
47883: IFTRUE 47917
47885: LD_INT 12
47887: DOUBLE
47888: EQUAL
47889: IFTRUE 47917
47891: LD_INT 15
47893: DOUBLE
47894: EQUAL
47895: IFTRUE 47917
47897: LD_INT 11
47899: DOUBLE
47900: EQUAL
47901: IFTRUE 47917
47903: LD_INT 14
47905: DOUBLE
47906: EQUAL
47907: IFTRUE 47917
47909: LD_INT 10
47911: DOUBLE
47912: EQUAL
47913: IFTRUE 47917
47915: GO 47973
47917: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
47918: LD_ADDR_VAR 0 9
47922: PUSH
47923: LD_VAR 0 41
47927: PUSH
47928: LD_VAR 0 42
47932: PUSH
47933: LD_VAR 0 43
47937: PUSH
47938: LD_VAR 0 44
47942: PUSH
47943: LD_VAR 0 45
47947: PUSH
47948: LD_VAR 0 46
47952: PUSH
47953: EMPTY
47954: LIST
47955: LIST
47956: LIST
47957: LIST
47958: LIST
47959: LIST
47960: PUSH
47961: LD_VAR 0 4
47965: PUSH
47966: LD_INT 1
47968: PLUS
47969: ARRAY
47970: ST_TO_ADDR
47971: GO 48226
47973: LD_INT 36
47975: DOUBLE
47976: EQUAL
47977: IFTRUE 47981
47979: GO 48037
47981: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
47982: LD_ADDR_VAR 0 9
47986: PUSH
47987: LD_VAR 0 47
47991: PUSH
47992: LD_VAR 0 48
47996: PUSH
47997: LD_VAR 0 49
48001: PUSH
48002: LD_VAR 0 50
48006: PUSH
48007: LD_VAR 0 51
48011: PUSH
48012: LD_VAR 0 52
48016: PUSH
48017: EMPTY
48018: LIST
48019: LIST
48020: LIST
48021: LIST
48022: LIST
48023: LIST
48024: PUSH
48025: LD_VAR 0 4
48029: PUSH
48030: LD_INT 1
48032: PLUS
48033: ARRAY
48034: ST_TO_ADDR
48035: GO 48226
48037: LD_INT 4
48039: DOUBLE
48040: EQUAL
48041: IFTRUE 48063
48043: LD_INT 5
48045: DOUBLE
48046: EQUAL
48047: IFTRUE 48063
48049: LD_INT 34
48051: DOUBLE
48052: EQUAL
48053: IFTRUE 48063
48055: LD_INT 37
48057: DOUBLE
48058: EQUAL
48059: IFTRUE 48063
48061: GO 48119
48063: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
48064: LD_ADDR_VAR 0 9
48068: PUSH
48069: LD_VAR 0 53
48073: PUSH
48074: LD_VAR 0 54
48078: PUSH
48079: LD_VAR 0 55
48083: PUSH
48084: LD_VAR 0 56
48088: PUSH
48089: LD_VAR 0 57
48093: PUSH
48094: LD_VAR 0 58
48098: PUSH
48099: EMPTY
48100: LIST
48101: LIST
48102: LIST
48103: LIST
48104: LIST
48105: LIST
48106: PUSH
48107: LD_VAR 0 4
48111: PUSH
48112: LD_INT 1
48114: PLUS
48115: ARRAY
48116: ST_TO_ADDR
48117: GO 48226
48119: LD_INT 31
48121: DOUBLE
48122: EQUAL
48123: IFTRUE 48169
48125: LD_INT 32
48127: DOUBLE
48128: EQUAL
48129: IFTRUE 48169
48131: LD_INT 33
48133: DOUBLE
48134: EQUAL
48135: IFTRUE 48169
48137: LD_INT 27
48139: DOUBLE
48140: EQUAL
48141: IFTRUE 48169
48143: LD_INT 26
48145: DOUBLE
48146: EQUAL
48147: IFTRUE 48169
48149: LD_INT 28
48151: DOUBLE
48152: EQUAL
48153: IFTRUE 48169
48155: LD_INT 29
48157: DOUBLE
48158: EQUAL
48159: IFTRUE 48169
48161: LD_INT 30
48163: DOUBLE
48164: EQUAL
48165: IFTRUE 48169
48167: GO 48225
48169: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
48170: LD_ADDR_VAR 0 9
48174: PUSH
48175: LD_VAR 0 59
48179: PUSH
48180: LD_VAR 0 60
48184: PUSH
48185: LD_VAR 0 61
48189: PUSH
48190: LD_VAR 0 62
48194: PUSH
48195: LD_VAR 0 63
48199: PUSH
48200: LD_VAR 0 64
48204: PUSH
48205: EMPTY
48206: LIST
48207: LIST
48208: LIST
48209: LIST
48210: LIST
48211: LIST
48212: PUSH
48213: LD_VAR 0 4
48217: PUSH
48218: LD_INT 1
48220: PLUS
48221: ARRAY
48222: ST_TO_ADDR
48223: GO 48226
48225: POP
// temp_list2 = [ ] ;
48226: LD_ADDR_VAR 0 10
48230: PUSH
48231: EMPTY
48232: ST_TO_ADDR
// for i in temp_list do
48233: LD_ADDR_VAR 0 8
48237: PUSH
48238: LD_VAR 0 9
48242: PUSH
48243: FOR_IN
48244: IFFALSE 48296
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
48246: LD_ADDR_VAR 0 10
48250: PUSH
48251: LD_VAR 0 10
48255: PUSH
48256: LD_VAR 0 8
48260: PUSH
48261: LD_INT 1
48263: ARRAY
48264: PUSH
48265: LD_VAR 0 2
48269: PLUS
48270: PUSH
48271: LD_VAR 0 8
48275: PUSH
48276: LD_INT 2
48278: ARRAY
48279: PUSH
48280: LD_VAR 0 3
48284: PLUS
48285: PUSH
48286: EMPTY
48287: LIST
48288: LIST
48289: PUSH
48290: EMPTY
48291: LIST
48292: ADD
48293: ST_TO_ADDR
48294: GO 48243
48296: POP
48297: POP
// result = temp_list2 ;
48298: LD_ADDR_VAR 0 7
48302: PUSH
48303: LD_VAR 0 10
48307: ST_TO_ADDR
// end ;
48308: LD_VAR 0 7
48312: RET
// export function EnemyInRange ( unit , dist ) ; begin
48313: LD_INT 0
48315: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
48316: LD_ADDR_VAR 0 3
48320: PUSH
48321: LD_VAR 0 1
48325: PPUSH
48326: CALL_OW 255
48330: PPUSH
48331: LD_VAR 0 1
48335: PPUSH
48336: CALL_OW 250
48340: PPUSH
48341: LD_VAR 0 1
48345: PPUSH
48346: CALL_OW 251
48350: PPUSH
48351: LD_VAR 0 2
48355: PPUSH
48356: CALL 21686 0 4
48360: PUSH
48361: LD_INT 4
48363: ARRAY
48364: ST_TO_ADDR
// end ;
48365: LD_VAR 0 3
48369: RET
// export function PlayerSeeMe ( unit ) ; begin
48370: LD_INT 0
48372: PPUSH
// result := See ( your_side , unit ) ;
48373: LD_ADDR_VAR 0 2
48377: PUSH
48378: LD_OWVAR 2
48382: PPUSH
48383: LD_VAR 0 1
48387: PPUSH
48388: CALL_OW 292
48392: ST_TO_ADDR
// end ;
48393: LD_VAR 0 2
48397: RET
// export function ReverseDir ( unit ) ; begin
48398: LD_INT 0
48400: PPUSH
// if not unit then
48401: LD_VAR 0 1
48405: NOT
48406: IFFALSE 48410
// exit ;
48408: GO 48433
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
48410: LD_ADDR_VAR 0 2
48414: PUSH
48415: LD_VAR 0 1
48419: PPUSH
48420: CALL_OW 254
48424: PUSH
48425: LD_INT 3
48427: PLUS
48428: PUSH
48429: LD_INT 6
48431: MOD
48432: ST_TO_ADDR
// end ;
48433: LD_VAR 0 2
48437: RET
// export function ReverseArray ( array ) ; var i ; begin
48438: LD_INT 0
48440: PPUSH
48441: PPUSH
// if not array then
48442: LD_VAR 0 1
48446: NOT
48447: IFFALSE 48451
// exit ;
48449: GO 48506
// result := [ ] ;
48451: LD_ADDR_VAR 0 2
48455: PUSH
48456: EMPTY
48457: ST_TO_ADDR
// for i := array downto 1 do
48458: LD_ADDR_VAR 0 3
48462: PUSH
48463: DOUBLE
48464: LD_VAR 0 1
48468: INC
48469: ST_TO_ADDR
48470: LD_INT 1
48472: PUSH
48473: FOR_DOWNTO
48474: IFFALSE 48504
// result := Join ( result , array [ i ] ) ;
48476: LD_ADDR_VAR 0 2
48480: PUSH
48481: LD_VAR 0 2
48485: PPUSH
48486: LD_VAR 0 1
48490: PUSH
48491: LD_VAR 0 3
48495: ARRAY
48496: PPUSH
48497: CALL 53171 0 2
48501: ST_TO_ADDR
48502: GO 48473
48504: POP
48505: POP
// end ;
48506: LD_VAR 0 2
48510: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
48511: LD_INT 0
48513: PPUSH
48514: PPUSH
48515: PPUSH
48516: PPUSH
48517: PPUSH
48518: PPUSH
// if not unit or not hexes then
48519: LD_VAR 0 1
48523: NOT
48524: PUSH
48525: LD_VAR 0 2
48529: NOT
48530: OR
48531: IFFALSE 48535
// exit ;
48533: GO 48658
// dist := 9999 ;
48535: LD_ADDR_VAR 0 5
48539: PUSH
48540: LD_INT 9999
48542: ST_TO_ADDR
// for i = 1 to hexes do
48543: LD_ADDR_VAR 0 4
48547: PUSH
48548: DOUBLE
48549: LD_INT 1
48551: DEC
48552: ST_TO_ADDR
48553: LD_VAR 0 2
48557: PUSH
48558: FOR_TO
48559: IFFALSE 48646
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48561: LD_ADDR_VAR 0 6
48565: PUSH
48566: LD_VAR 0 1
48570: PPUSH
48571: LD_VAR 0 2
48575: PUSH
48576: LD_VAR 0 4
48580: ARRAY
48581: PUSH
48582: LD_INT 1
48584: ARRAY
48585: PPUSH
48586: LD_VAR 0 2
48590: PUSH
48591: LD_VAR 0 4
48595: ARRAY
48596: PUSH
48597: LD_INT 2
48599: ARRAY
48600: PPUSH
48601: CALL_OW 297
48605: ST_TO_ADDR
// if tdist < dist then
48606: LD_VAR 0 6
48610: PUSH
48611: LD_VAR 0 5
48615: LESS
48616: IFFALSE 48644
// begin hex := hexes [ i ] ;
48618: LD_ADDR_VAR 0 8
48622: PUSH
48623: LD_VAR 0 2
48627: PUSH
48628: LD_VAR 0 4
48632: ARRAY
48633: ST_TO_ADDR
// dist := tdist ;
48634: LD_ADDR_VAR 0 5
48638: PUSH
48639: LD_VAR 0 6
48643: ST_TO_ADDR
// end ; end ;
48644: GO 48558
48646: POP
48647: POP
// result := hex ;
48648: LD_ADDR_VAR 0 3
48652: PUSH
48653: LD_VAR 0 8
48657: ST_TO_ADDR
// end ;
48658: LD_VAR 0 3
48662: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
48663: LD_INT 0
48665: PPUSH
48666: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
48667: LD_VAR 0 1
48671: NOT
48672: PUSH
48673: LD_VAR 0 1
48677: PUSH
48678: LD_INT 21
48680: PUSH
48681: LD_INT 2
48683: PUSH
48684: EMPTY
48685: LIST
48686: LIST
48687: PUSH
48688: LD_INT 23
48690: PUSH
48691: LD_INT 2
48693: PUSH
48694: EMPTY
48695: LIST
48696: LIST
48697: PUSH
48698: EMPTY
48699: LIST
48700: LIST
48701: PPUSH
48702: CALL_OW 69
48706: IN
48707: NOT
48708: OR
48709: IFFALSE 48713
// exit ;
48711: GO 48760
// for i = 1 to 3 do
48713: LD_ADDR_VAR 0 3
48717: PUSH
48718: DOUBLE
48719: LD_INT 1
48721: DEC
48722: ST_TO_ADDR
48723: LD_INT 3
48725: PUSH
48726: FOR_TO
48727: IFFALSE 48758
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
48729: LD_VAR 0 1
48733: PPUSH
48734: CALL_OW 250
48738: PPUSH
48739: LD_VAR 0 1
48743: PPUSH
48744: CALL_OW 251
48748: PPUSH
48749: LD_INT 1
48751: PPUSH
48752: CALL_OW 453
48756: GO 48726
48758: POP
48759: POP
// end ;
48760: LD_VAR 0 2
48764: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
48765: LD_INT 0
48767: PPUSH
48768: PPUSH
48769: PPUSH
48770: PPUSH
48771: PPUSH
48772: PPUSH
// if not unit or not enemy_unit then
48773: LD_VAR 0 1
48777: NOT
48778: PUSH
48779: LD_VAR 0 2
48783: NOT
48784: OR
48785: IFFALSE 48789
// exit ;
48787: GO 49256
// if GetLives ( i ) < 250 then
48789: LD_VAR 0 4
48793: PPUSH
48794: CALL_OW 256
48798: PUSH
48799: LD_INT 250
48801: LESS
48802: IFFALSE 48815
// begin ComAutodestruct ( i ) ;
48804: LD_VAR 0 4
48808: PPUSH
48809: CALL 48663 0 1
// exit ;
48813: GO 49256
// end ; x := GetX ( enemy_unit ) ;
48815: LD_ADDR_VAR 0 7
48819: PUSH
48820: LD_VAR 0 2
48824: PPUSH
48825: CALL_OW 250
48829: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
48830: LD_ADDR_VAR 0 8
48834: PUSH
48835: LD_VAR 0 2
48839: PPUSH
48840: CALL_OW 251
48844: ST_TO_ADDR
// if not x or not y then
48845: LD_VAR 0 7
48849: NOT
48850: PUSH
48851: LD_VAR 0 8
48855: NOT
48856: OR
48857: IFFALSE 48861
// exit ;
48859: GO 49256
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
48861: LD_ADDR_VAR 0 6
48865: PUSH
48866: LD_VAR 0 7
48870: PPUSH
48871: LD_INT 0
48873: PPUSH
48874: LD_INT 4
48876: PPUSH
48877: CALL_OW 272
48881: PUSH
48882: LD_VAR 0 8
48886: PPUSH
48887: LD_INT 0
48889: PPUSH
48890: LD_INT 4
48892: PPUSH
48893: CALL_OW 273
48897: PUSH
48898: EMPTY
48899: LIST
48900: LIST
48901: PUSH
48902: LD_VAR 0 7
48906: PPUSH
48907: LD_INT 1
48909: PPUSH
48910: LD_INT 4
48912: PPUSH
48913: CALL_OW 272
48917: PUSH
48918: LD_VAR 0 8
48922: PPUSH
48923: LD_INT 1
48925: PPUSH
48926: LD_INT 4
48928: PPUSH
48929: CALL_OW 273
48933: PUSH
48934: EMPTY
48935: LIST
48936: LIST
48937: PUSH
48938: LD_VAR 0 7
48942: PPUSH
48943: LD_INT 2
48945: PPUSH
48946: LD_INT 4
48948: PPUSH
48949: CALL_OW 272
48953: PUSH
48954: LD_VAR 0 8
48958: PPUSH
48959: LD_INT 2
48961: PPUSH
48962: LD_INT 4
48964: PPUSH
48965: CALL_OW 273
48969: PUSH
48970: EMPTY
48971: LIST
48972: LIST
48973: PUSH
48974: LD_VAR 0 7
48978: PPUSH
48979: LD_INT 3
48981: PPUSH
48982: LD_INT 4
48984: PPUSH
48985: CALL_OW 272
48989: PUSH
48990: LD_VAR 0 8
48994: PPUSH
48995: LD_INT 3
48997: PPUSH
48998: LD_INT 4
49000: PPUSH
49001: CALL_OW 273
49005: PUSH
49006: EMPTY
49007: LIST
49008: LIST
49009: PUSH
49010: LD_VAR 0 7
49014: PPUSH
49015: LD_INT 4
49017: PPUSH
49018: LD_INT 4
49020: PPUSH
49021: CALL_OW 272
49025: PUSH
49026: LD_VAR 0 8
49030: PPUSH
49031: LD_INT 4
49033: PPUSH
49034: LD_INT 4
49036: PPUSH
49037: CALL_OW 273
49041: PUSH
49042: EMPTY
49043: LIST
49044: LIST
49045: PUSH
49046: LD_VAR 0 7
49050: PPUSH
49051: LD_INT 5
49053: PPUSH
49054: LD_INT 4
49056: PPUSH
49057: CALL_OW 272
49061: PUSH
49062: LD_VAR 0 8
49066: PPUSH
49067: LD_INT 5
49069: PPUSH
49070: LD_INT 4
49072: PPUSH
49073: CALL_OW 273
49077: PUSH
49078: EMPTY
49079: LIST
49080: LIST
49081: PUSH
49082: EMPTY
49083: LIST
49084: LIST
49085: LIST
49086: LIST
49087: LIST
49088: LIST
49089: ST_TO_ADDR
// for i = tmp downto 1 do
49090: LD_ADDR_VAR 0 4
49094: PUSH
49095: DOUBLE
49096: LD_VAR 0 6
49100: INC
49101: ST_TO_ADDR
49102: LD_INT 1
49104: PUSH
49105: FOR_DOWNTO
49106: IFFALSE 49207
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
49108: LD_VAR 0 6
49112: PUSH
49113: LD_VAR 0 4
49117: ARRAY
49118: PUSH
49119: LD_INT 1
49121: ARRAY
49122: PPUSH
49123: LD_VAR 0 6
49127: PUSH
49128: LD_VAR 0 4
49132: ARRAY
49133: PUSH
49134: LD_INT 2
49136: ARRAY
49137: PPUSH
49138: CALL_OW 488
49142: NOT
49143: PUSH
49144: LD_VAR 0 6
49148: PUSH
49149: LD_VAR 0 4
49153: ARRAY
49154: PUSH
49155: LD_INT 1
49157: ARRAY
49158: PPUSH
49159: LD_VAR 0 6
49163: PUSH
49164: LD_VAR 0 4
49168: ARRAY
49169: PUSH
49170: LD_INT 2
49172: ARRAY
49173: PPUSH
49174: CALL_OW 428
49178: PUSH
49179: LD_INT 0
49181: NONEQUAL
49182: OR
49183: IFFALSE 49205
// tmp := Delete ( tmp , i ) ;
49185: LD_ADDR_VAR 0 6
49189: PUSH
49190: LD_VAR 0 6
49194: PPUSH
49195: LD_VAR 0 4
49199: PPUSH
49200: CALL_OW 3
49204: ST_TO_ADDR
49205: GO 49105
49207: POP
49208: POP
// j := GetClosestHex ( unit , tmp ) ;
49209: LD_ADDR_VAR 0 5
49213: PUSH
49214: LD_VAR 0 1
49218: PPUSH
49219: LD_VAR 0 6
49223: PPUSH
49224: CALL 48511 0 2
49228: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
49229: LD_VAR 0 1
49233: PPUSH
49234: LD_VAR 0 5
49238: PUSH
49239: LD_INT 1
49241: ARRAY
49242: PPUSH
49243: LD_VAR 0 5
49247: PUSH
49248: LD_INT 2
49250: ARRAY
49251: PPUSH
49252: CALL_OW 111
// end ;
49256: LD_VAR 0 3
49260: RET
// export function PrepareApemanSoldier ( ) ; begin
49261: LD_INT 0
49263: PPUSH
// uc_nation := 0 ;
49264: LD_ADDR_OWVAR 21
49268: PUSH
49269: LD_INT 0
49271: ST_TO_ADDR
// hc_sex := sex_male ;
49272: LD_ADDR_OWVAR 27
49276: PUSH
49277: LD_INT 1
49279: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
49280: LD_ADDR_OWVAR 28
49284: PUSH
49285: LD_INT 15
49287: ST_TO_ADDR
// hc_gallery :=  ;
49288: LD_ADDR_OWVAR 33
49292: PUSH
49293: LD_STRING 
49295: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
49296: LD_ADDR_OWVAR 31
49300: PUSH
49301: LD_INT 0
49303: PPUSH
49304: LD_INT 3
49306: PPUSH
49307: CALL_OW 12
49311: PUSH
49312: LD_INT 0
49314: PPUSH
49315: LD_INT 3
49317: PPUSH
49318: CALL_OW 12
49322: PUSH
49323: LD_INT 0
49325: PUSH
49326: LD_INT 0
49328: PUSH
49329: EMPTY
49330: LIST
49331: LIST
49332: LIST
49333: LIST
49334: ST_TO_ADDR
// end ;
49335: LD_VAR 0 1
49339: RET
// export function PrepareApemanEngineer ( ) ; begin
49340: LD_INT 0
49342: PPUSH
// uc_nation := 0 ;
49343: LD_ADDR_OWVAR 21
49347: PUSH
49348: LD_INT 0
49350: ST_TO_ADDR
// hc_sex := sex_male ;
49351: LD_ADDR_OWVAR 27
49355: PUSH
49356: LD_INT 1
49358: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
49359: LD_ADDR_OWVAR 28
49363: PUSH
49364: LD_INT 16
49366: ST_TO_ADDR
// hc_gallery :=  ;
49367: LD_ADDR_OWVAR 33
49371: PUSH
49372: LD_STRING 
49374: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
49375: LD_ADDR_OWVAR 31
49379: PUSH
49380: LD_INT 0
49382: PPUSH
49383: LD_INT 3
49385: PPUSH
49386: CALL_OW 12
49390: PUSH
49391: LD_INT 0
49393: PPUSH
49394: LD_INT 3
49396: PPUSH
49397: CALL_OW 12
49401: PUSH
49402: LD_INT 0
49404: PUSH
49405: LD_INT 0
49407: PUSH
49408: EMPTY
49409: LIST
49410: LIST
49411: LIST
49412: LIST
49413: ST_TO_ADDR
// end ;
49414: LD_VAR 0 1
49418: RET
// export function PrepareApeman ( agressivity ) ; begin
49419: LD_INT 0
49421: PPUSH
// uc_side := 0 ;
49422: LD_ADDR_OWVAR 20
49426: PUSH
49427: LD_INT 0
49429: ST_TO_ADDR
// uc_nation := 0 ;
49430: LD_ADDR_OWVAR 21
49434: PUSH
49435: LD_INT 0
49437: ST_TO_ADDR
// hc_sex := sex_male ;
49438: LD_ADDR_OWVAR 27
49442: PUSH
49443: LD_INT 1
49445: ST_TO_ADDR
// hc_class := class_apeman ;
49446: LD_ADDR_OWVAR 28
49450: PUSH
49451: LD_INT 12
49453: ST_TO_ADDR
// hc_gallery :=  ;
49454: LD_ADDR_OWVAR 33
49458: PUSH
49459: LD_STRING 
49461: ST_TO_ADDR
// if agressivity = 0 then
49462: LD_VAR 0 1
49466: PUSH
49467: LD_INT 0
49469: EQUAL
49470: IFFALSE 49482
// hc_agressivity := 0 else
49472: LD_ADDR_OWVAR 35
49476: PUSH
49477: LD_INT 0
49479: ST_TO_ADDR
49480: GO 49503
// hc_agressivity := rand ( - agressivity , agressivity ) ;
49482: LD_ADDR_OWVAR 35
49486: PUSH
49487: LD_VAR 0 1
49491: NEG
49492: PPUSH
49493: LD_VAR 0 1
49497: PPUSH
49498: CALL_OW 12
49502: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
49503: LD_ADDR_OWVAR 31
49507: PUSH
49508: LD_INT 0
49510: PPUSH
49511: LD_INT 3
49513: PPUSH
49514: CALL_OW 12
49518: PUSH
49519: LD_INT 0
49521: PPUSH
49522: LD_INT 3
49524: PPUSH
49525: CALL_OW 12
49529: PUSH
49530: LD_INT 0
49532: PUSH
49533: LD_INT 0
49535: PUSH
49536: EMPTY
49537: LIST
49538: LIST
49539: LIST
49540: LIST
49541: ST_TO_ADDR
// end ;
49542: LD_VAR 0 2
49546: RET
// export function PrepareTiger ( agressivity ) ; begin
49547: LD_INT 0
49549: PPUSH
// uc_side := 0 ;
49550: LD_ADDR_OWVAR 20
49554: PUSH
49555: LD_INT 0
49557: ST_TO_ADDR
// uc_nation := 0 ;
49558: LD_ADDR_OWVAR 21
49562: PUSH
49563: LD_INT 0
49565: ST_TO_ADDR
// hc_class := class_tiger ;
49566: LD_ADDR_OWVAR 28
49570: PUSH
49571: LD_INT 14
49573: ST_TO_ADDR
// hc_gallery :=  ;
49574: LD_ADDR_OWVAR 33
49578: PUSH
49579: LD_STRING 
49581: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
49582: LD_ADDR_OWVAR 35
49586: PUSH
49587: LD_VAR 0 1
49591: NEG
49592: PPUSH
49593: LD_VAR 0 1
49597: PPUSH
49598: CALL_OW 12
49602: ST_TO_ADDR
// end ;
49603: LD_VAR 0 2
49607: RET
// export function PrepareEnchidna ( ) ; begin
49608: LD_INT 0
49610: PPUSH
// uc_side := 0 ;
49611: LD_ADDR_OWVAR 20
49615: PUSH
49616: LD_INT 0
49618: ST_TO_ADDR
// uc_nation := 0 ;
49619: LD_ADDR_OWVAR 21
49623: PUSH
49624: LD_INT 0
49626: ST_TO_ADDR
// hc_class := class_baggie ;
49627: LD_ADDR_OWVAR 28
49631: PUSH
49632: LD_INT 13
49634: ST_TO_ADDR
// hc_gallery :=  ;
49635: LD_ADDR_OWVAR 33
49639: PUSH
49640: LD_STRING 
49642: ST_TO_ADDR
// end ;
49643: LD_VAR 0 1
49647: RET
// export function PrepareFrog ( ) ; begin
49648: LD_INT 0
49650: PPUSH
// uc_side := 0 ;
49651: LD_ADDR_OWVAR 20
49655: PUSH
49656: LD_INT 0
49658: ST_TO_ADDR
// uc_nation := 0 ;
49659: LD_ADDR_OWVAR 21
49663: PUSH
49664: LD_INT 0
49666: ST_TO_ADDR
// hc_class := class_frog ;
49667: LD_ADDR_OWVAR 28
49671: PUSH
49672: LD_INT 19
49674: ST_TO_ADDR
// hc_gallery :=  ;
49675: LD_ADDR_OWVAR 33
49679: PUSH
49680: LD_STRING 
49682: ST_TO_ADDR
// end ;
49683: LD_VAR 0 1
49687: RET
// export function PrepareFish ( ) ; begin
49688: LD_INT 0
49690: PPUSH
// uc_side := 0 ;
49691: LD_ADDR_OWVAR 20
49695: PUSH
49696: LD_INT 0
49698: ST_TO_ADDR
// uc_nation := 0 ;
49699: LD_ADDR_OWVAR 21
49703: PUSH
49704: LD_INT 0
49706: ST_TO_ADDR
// hc_class := class_fish ;
49707: LD_ADDR_OWVAR 28
49711: PUSH
49712: LD_INT 20
49714: ST_TO_ADDR
// hc_gallery :=  ;
49715: LD_ADDR_OWVAR 33
49719: PUSH
49720: LD_STRING 
49722: ST_TO_ADDR
// end ;
49723: LD_VAR 0 1
49727: RET
// export function PrepareBird ( ) ; begin
49728: LD_INT 0
49730: PPUSH
// uc_side := 0 ;
49731: LD_ADDR_OWVAR 20
49735: PUSH
49736: LD_INT 0
49738: ST_TO_ADDR
// uc_nation := 0 ;
49739: LD_ADDR_OWVAR 21
49743: PUSH
49744: LD_INT 0
49746: ST_TO_ADDR
// hc_class := class_phororhacos ;
49747: LD_ADDR_OWVAR 28
49751: PUSH
49752: LD_INT 18
49754: ST_TO_ADDR
// hc_gallery :=  ;
49755: LD_ADDR_OWVAR 33
49759: PUSH
49760: LD_STRING 
49762: ST_TO_ADDR
// end ;
49763: LD_VAR 0 1
49767: RET
// export function PrepareHorse ( ) ; begin
49768: LD_INT 0
49770: PPUSH
// uc_side := 0 ;
49771: LD_ADDR_OWVAR 20
49775: PUSH
49776: LD_INT 0
49778: ST_TO_ADDR
// uc_nation := 0 ;
49779: LD_ADDR_OWVAR 21
49783: PUSH
49784: LD_INT 0
49786: ST_TO_ADDR
// hc_class := class_horse ;
49787: LD_ADDR_OWVAR 28
49791: PUSH
49792: LD_INT 21
49794: ST_TO_ADDR
// hc_gallery :=  ;
49795: LD_ADDR_OWVAR 33
49799: PUSH
49800: LD_STRING 
49802: ST_TO_ADDR
// end ;
49803: LD_VAR 0 1
49807: RET
// export function PrepareMastodont ( ) ; begin
49808: LD_INT 0
49810: PPUSH
// uc_side := 0 ;
49811: LD_ADDR_OWVAR 20
49815: PUSH
49816: LD_INT 0
49818: ST_TO_ADDR
// uc_nation := 0 ;
49819: LD_ADDR_OWVAR 21
49823: PUSH
49824: LD_INT 0
49826: ST_TO_ADDR
// vc_chassis := class_mastodont ;
49827: LD_ADDR_OWVAR 37
49831: PUSH
49832: LD_INT 31
49834: ST_TO_ADDR
// vc_control := control_rider ;
49835: LD_ADDR_OWVAR 38
49839: PUSH
49840: LD_INT 4
49842: ST_TO_ADDR
// end ;
49843: LD_VAR 0 1
49847: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
49848: LD_INT 0
49850: PPUSH
49851: PPUSH
49852: PPUSH
// uc_side = 0 ;
49853: LD_ADDR_OWVAR 20
49857: PUSH
49858: LD_INT 0
49860: ST_TO_ADDR
// uc_nation = 0 ;
49861: LD_ADDR_OWVAR 21
49865: PUSH
49866: LD_INT 0
49868: ST_TO_ADDR
// InitHc_All ( ) ;
49869: CALL_OW 584
// InitVc ;
49873: CALL_OW 20
// if mastodonts then
49877: LD_VAR 0 6
49881: IFFALSE 49948
// for i = 1 to mastodonts do
49883: LD_ADDR_VAR 0 11
49887: PUSH
49888: DOUBLE
49889: LD_INT 1
49891: DEC
49892: ST_TO_ADDR
49893: LD_VAR 0 6
49897: PUSH
49898: FOR_TO
49899: IFFALSE 49946
// begin vc_chassis := 31 ;
49901: LD_ADDR_OWVAR 37
49905: PUSH
49906: LD_INT 31
49908: ST_TO_ADDR
// vc_control := control_rider ;
49909: LD_ADDR_OWVAR 38
49913: PUSH
49914: LD_INT 4
49916: ST_TO_ADDR
// animal := CreateVehicle ;
49917: LD_ADDR_VAR 0 12
49921: PUSH
49922: CALL_OW 45
49926: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49927: LD_VAR 0 12
49931: PPUSH
49932: LD_VAR 0 8
49936: PPUSH
49937: LD_INT 0
49939: PPUSH
49940: CALL 52076 0 3
// end ;
49944: GO 49898
49946: POP
49947: POP
// if horses then
49948: LD_VAR 0 5
49952: IFFALSE 50019
// for i = 1 to horses do
49954: LD_ADDR_VAR 0 11
49958: PUSH
49959: DOUBLE
49960: LD_INT 1
49962: DEC
49963: ST_TO_ADDR
49964: LD_VAR 0 5
49968: PUSH
49969: FOR_TO
49970: IFFALSE 50017
// begin hc_class := 21 ;
49972: LD_ADDR_OWVAR 28
49976: PUSH
49977: LD_INT 21
49979: ST_TO_ADDR
// hc_gallery :=  ;
49980: LD_ADDR_OWVAR 33
49984: PUSH
49985: LD_STRING 
49987: ST_TO_ADDR
// animal := CreateHuman ;
49988: LD_ADDR_VAR 0 12
49992: PUSH
49993: CALL_OW 44
49997: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49998: LD_VAR 0 12
50002: PPUSH
50003: LD_VAR 0 8
50007: PPUSH
50008: LD_INT 0
50010: PPUSH
50011: CALL 52076 0 3
// end ;
50015: GO 49969
50017: POP
50018: POP
// if birds then
50019: LD_VAR 0 1
50023: IFFALSE 50090
// for i = 1 to birds do
50025: LD_ADDR_VAR 0 11
50029: PUSH
50030: DOUBLE
50031: LD_INT 1
50033: DEC
50034: ST_TO_ADDR
50035: LD_VAR 0 1
50039: PUSH
50040: FOR_TO
50041: IFFALSE 50088
// begin hc_class := 18 ;
50043: LD_ADDR_OWVAR 28
50047: PUSH
50048: LD_INT 18
50050: ST_TO_ADDR
// hc_gallery =  ;
50051: LD_ADDR_OWVAR 33
50055: PUSH
50056: LD_STRING 
50058: ST_TO_ADDR
// animal := CreateHuman ;
50059: LD_ADDR_VAR 0 12
50063: PUSH
50064: CALL_OW 44
50068: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50069: LD_VAR 0 12
50073: PPUSH
50074: LD_VAR 0 8
50078: PPUSH
50079: LD_INT 0
50081: PPUSH
50082: CALL 52076 0 3
// end ;
50086: GO 50040
50088: POP
50089: POP
// if tigers then
50090: LD_VAR 0 2
50094: IFFALSE 50178
// for i = 1 to tigers do
50096: LD_ADDR_VAR 0 11
50100: PUSH
50101: DOUBLE
50102: LD_INT 1
50104: DEC
50105: ST_TO_ADDR
50106: LD_VAR 0 2
50110: PUSH
50111: FOR_TO
50112: IFFALSE 50176
// begin hc_class = class_tiger ;
50114: LD_ADDR_OWVAR 28
50118: PUSH
50119: LD_INT 14
50121: ST_TO_ADDR
// hc_gallery =  ;
50122: LD_ADDR_OWVAR 33
50126: PUSH
50127: LD_STRING 
50129: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
50130: LD_ADDR_OWVAR 35
50134: PUSH
50135: LD_INT 7
50137: NEG
50138: PPUSH
50139: LD_INT 7
50141: PPUSH
50142: CALL_OW 12
50146: ST_TO_ADDR
// animal := CreateHuman ;
50147: LD_ADDR_VAR 0 12
50151: PUSH
50152: CALL_OW 44
50156: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50157: LD_VAR 0 12
50161: PPUSH
50162: LD_VAR 0 8
50166: PPUSH
50167: LD_INT 0
50169: PPUSH
50170: CALL 52076 0 3
// end ;
50174: GO 50111
50176: POP
50177: POP
// if apemans then
50178: LD_VAR 0 3
50182: IFFALSE 50305
// for i = 1 to apemans do
50184: LD_ADDR_VAR 0 11
50188: PUSH
50189: DOUBLE
50190: LD_INT 1
50192: DEC
50193: ST_TO_ADDR
50194: LD_VAR 0 3
50198: PUSH
50199: FOR_TO
50200: IFFALSE 50303
// begin hc_class = class_apeman ;
50202: LD_ADDR_OWVAR 28
50206: PUSH
50207: LD_INT 12
50209: ST_TO_ADDR
// hc_gallery =  ;
50210: LD_ADDR_OWVAR 33
50214: PUSH
50215: LD_STRING 
50217: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
50218: LD_ADDR_OWVAR 35
50222: PUSH
50223: LD_INT 2
50225: NEG
50226: PPUSH
50227: LD_INT 2
50229: PPUSH
50230: CALL_OW 12
50234: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
50235: LD_ADDR_OWVAR 31
50239: PUSH
50240: LD_INT 1
50242: PPUSH
50243: LD_INT 3
50245: PPUSH
50246: CALL_OW 12
50250: PUSH
50251: LD_INT 1
50253: PPUSH
50254: LD_INT 3
50256: PPUSH
50257: CALL_OW 12
50261: PUSH
50262: LD_INT 0
50264: PUSH
50265: LD_INT 0
50267: PUSH
50268: EMPTY
50269: LIST
50270: LIST
50271: LIST
50272: LIST
50273: ST_TO_ADDR
// animal := CreateHuman ;
50274: LD_ADDR_VAR 0 12
50278: PUSH
50279: CALL_OW 44
50283: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50284: LD_VAR 0 12
50288: PPUSH
50289: LD_VAR 0 8
50293: PPUSH
50294: LD_INT 0
50296: PPUSH
50297: CALL 52076 0 3
// end ;
50301: GO 50199
50303: POP
50304: POP
// if enchidnas then
50305: LD_VAR 0 4
50309: IFFALSE 50376
// for i = 1 to enchidnas do
50311: LD_ADDR_VAR 0 11
50315: PUSH
50316: DOUBLE
50317: LD_INT 1
50319: DEC
50320: ST_TO_ADDR
50321: LD_VAR 0 4
50325: PUSH
50326: FOR_TO
50327: IFFALSE 50374
// begin hc_class = 13 ;
50329: LD_ADDR_OWVAR 28
50333: PUSH
50334: LD_INT 13
50336: ST_TO_ADDR
// hc_gallery =  ;
50337: LD_ADDR_OWVAR 33
50341: PUSH
50342: LD_STRING 
50344: ST_TO_ADDR
// animal := CreateHuman ;
50345: LD_ADDR_VAR 0 12
50349: PUSH
50350: CALL_OW 44
50354: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50355: LD_VAR 0 12
50359: PPUSH
50360: LD_VAR 0 8
50364: PPUSH
50365: LD_INT 0
50367: PPUSH
50368: CALL 52076 0 3
// end ;
50372: GO 50326
50374: POP
50375: POP
// if fishes then
50376: LD_VAR 0 7
50380: IFFALSE 50447
// for i = 1 to fishes do
50382: LD_ADDR_VAR 0 11
50386: PUSH
50387: DOUBLE
50388: LD_INT 1
50390: DEC
50391: ST_TO_ADDR
50392: LD_VAR 0 7
50396: PUSH
50397: FOR_TO
50398: IFFALSE 50445
// begin hc_class = 20 ;
50400: LD_ADDR_OWVAR 28
50404: PUSH
50405: LD_INT 20
50407: ST_TO_ADDR
// hc_gallery =  ;
50408: LD_ADDR_OWVAR 33
50412: PUSH
50413: LD_STRING 
50415: ST_TO_ADDR
// animal := CreateHuman ;
50416: LD_ADDR_VAR 0 12
50420: PUSH
50421: CALL_OW 44
50425: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
50426: LD_VAR 0 12
50430: PPUSH
50431: LD_VAR 0 9
50435: PPUSH
50436: LD_INT 0
50438: PPUSH
50439: CALL 52076 0 3
// end ;
50443: GO 50397
50445: POP
50446: POP
// end ;
50447: LD_VAR 0 10
50451: RET
// export function WantHeal ( sci , unit ) ; begin
50452: LD_INT 0
50454: PPUSH
// if GetTaskList ( sci ) > 0 then
50455: LD_VAR 0 1
50459: PPUSH
50460: CALL_OW 437
50464: PUSH
50465: LD_INT 0
50467: GREATER
50468: IFFALSE 50538
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
50470: LD_VAR 0 1
50474: PPUSH
50475: CALL_OW 437
50479: PUSH
50480: LD_INT 1
50482: ARRAY
50483: PUSH
50484: LD_INT 1
50486: ARRAY
50487: PUSH
50488: LD_STRING l
50490: EQUAL
50491: PUSH
50492: LD_VAR 0 1
50496: PPUSH
50497: CALL_OW 437
50501: PUSH
50502: LD_INT 1
50504: ARRAY
50505: PUSH
50506: LD_INT 4
50508: ARRAY
50509: PUSH
50510: LD_VAR 0 2
50514: EQUAL
50515: AND
50516: IFFALSE 50528
// result := true else
50518: LD_ADDR_VAR 0 3
50522: PUSH
50523: LD_INT 1
50525: ST_TO_ADDR
50526: GO 50536
// result := false ;
50528: LD_ADDR_VAR 0 3
50532: PUSH
50533: LD_INT 0
50535: ST_TO_ADDR
// end else
50536: GO 50546
// result := false ;
50538: LD_ADDR_VAR 0 3
50542: PUSH
50543: LD_INT 0
50545: ST_TO_ADDR
// end ;
50546: LD_VAR 0 3
50550: RET
// export function HealTarget ( sci ) ; begin
50551: LD_INT 0
50553: PPUSH
// if not sci then
50554: LD_VAR 0 1
50558: NOT
50559: IFFALSE 50563
// exit ;
50561: GO 50628
// result := 0 ;
50563: LD_ADDR_VAR 0 2
50567: PUSH
50568: LD_INT 0
50570: ST_TO_ADDR
// if GetTaskList ( sci ) then
50571: LD_VAR 0 1
50575: PPUSH
50576: CALL_OW 437
50580: IFFALSE 50628
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
50582: LD_VAR 0 1
50586: PPUSH
50587: CALL_OW 437
50591: PUSH
50592: LD_INT 1
50594: ARRAY
50595: PUSH
50596: LD_INT 1
50598: ARRAY
50599: PUSH
50600: LD_STRING l
50602: EQUAL
50603: IFFALSE 50628
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
50605: LD_ADDR_VAR 0 2
50609: PUSH
50610: LD_VAR 0 1
50614: PPUSH
50615: CALL_OW 437
50619: PUSH
50620: LD_INT 1
50622: ARRAY
50623: PUSH
50624: LD_INT 4
50626: ARRAY
50627: ST_TO_ADDR
// end ;
50628: LD_VAR 0 2
50632: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
50633: LD_INT 0
50635: PPUSH
50636: PPUSH
50637: PPUSH
50638: PPUSH
// if not base_units then
50639: LD_VAR 0 1
50643: NOT
50644: IFFALSE 50648
// exit ;
50646: GO 50735
// result := false ;
50648: LD_ADDR_VAR 0 2
50652: PUSH
50653: LD_INT 0
50655: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
50656: LD_ADDR_VAR 0 5
50660: PUSH
50661: LD_VAR 0 1
50665: PPUSH
50666: LD_INT 21
50668: PUSH
50669: LD_INT 3
50671: PUSH
50672: EMPTY
50673: LIST
50674: LIST
50675: PPUSH
50676: CALL_OW 72
50680: ST_TO_ADDR
// if not tmp then
50681: LD_VAR 0 5
50685: NOT
50686: IFFALSE 50690
// exit ;
50688: GO 50735
// for i in tmp do
50690: LD_ADDR_VAR 0 3
50694: PUSH
50695: LD_VAR 0 5
50699: PUSH
50700: FOR_IN
50701: IFFALSE 50733
// begin result := EnemyInRange ( i , 22 ) ;
50703: LD_ADDR_VAR 0 2
50707: PUSH
50708: LD_VAR 0 3
50712: PPUSH
50713: LD_INT 22
50715: PPUSH
50716: CALL 48313 0 2
50720: ST_TO_ADDR
// if result then
50721: LD_VAR 0 2
50725: IFFALSE 50731
// exit ;
50727: POP
50728: POP
50729: GO 50735
// end ;
50731: GO 50700
50733: POP
50734: POP
// end ;
50735: LD_VAR 0 2
50739: RET
// export function FilterByTag ( units , tag ) ; begin
50740: LD_INT 0
50742: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
50743: LD_ADDR_VAR 0 3
50747: PUSH
50748: LD_VAR 0 1
50752: PPUSH
50753: LD_INT 120
50755: PUSH
50756: LD_VAR 0 2
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: PPUSH
50765: CALL_OW 72
50769: ST_TO_ADDR
// end ;
50770: LD_VAR 0 3
50774: RET
// export function IsDriver ( un ) ; begin
50775: LD_INT 0
50777: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
50778: LD_ADDR_VAR 0 2
50782: PUSH
50783: LD_VAR 0 1
50787: PUSH
50788: LD_INT 55
50790: PUSH
50791: EMPTY
50792: LIST
50793: PPUSH
50794: CALL_OW 69
50798: IN
50799: ST_TO_ADDR
// end ;
50800: LD_VAR 0 2
50804: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
50805: LD_INT 0
50807: PPUSH
50808: PPUSH
// list := [ ] ;
50809: LD_ADDR_VAR 0 5
50813: PUSH
50814: EMPTY
50815: ST_TO_ADDR
// case d of 0 :
50816: LD_VAR 0 3
50820: PUSH
50821: LD_INT 0
50823: DOUBLE
50824: EQUAL
50825: IFTRUE 50829
50827: GO 50962
50829: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
50830: LD_ADDR_VAR 0 5
50834: PUSH
50835: LD_VAR 0 1
50839: PUSH
50840: LD_INT 4
50842: MINUS
50843: PUSH
50844: LD_VAR 0 2
50848: PUSH
50849: LD_INT 4
50851: MINUS
50852: PUSH
50853: LD_INT 2
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: LIST
50860: PUSH
50861: LD_VAR 0 1
50865: PUSH
50866: LD_INT 3
50868: MINUS
50869: PUSH
50870: LD_VAR 0 2
50874: PUSH
50875: LD_INT 1
50877: PUSH
50878: EMPTY
50879: LIST
50880: LIST
50881: LIST
50882: PUSH
50883: LD_VAR 0 1
50887: PUSH
50888: LD_INT 4
50890: PLUS
50891: PUSH
50892: LD_VAR 0 2
50896: PUSH
50897: LD_INT 4
50899: PUSH
50900: EMPTY
50901: LIST
50902: LIST
50903: LIST
50904: PUSH
50905: LD_VAR 0 1
50909: PUSH
50910: LD_INT 3
50912: PLUS
50913: PUSH
50914: LD_VAR 0 2
50918: PUSH
50919: LD_INT 3
50921: PLUS
50922: PUSH
50923: LD_INT 5
50925: PUSH
50926: EMPTY
50927: LIST
50928: LIST
50929: LIST
50930: PUSH
50931: LD_VAR 0 1
50935: PUSH
50936: LD_VAR 0 2
50940: PUSH
50941: LD_INT 4
50943: PLUS
50944: PUSH
50945: LD_INT 0
50947: PUSH
50948: EMPTY
50949: LIST
50950: LIST
50951: LIST
50952: PUSH
50953: EMPTY
50954: LIST
50955: LIST
50956: LIST
50957: LIST
50958: LIST
50959: ST_TO_ADDR
// end ; 1 :
50960: GO 51660
50962: LD_INT 1
50964: DOUBLE
50965: EQUAL
50966: IFTRUE 50970
50968: GO 51103
50970: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
50971: LD_ADDR_VAR 0 5
50975: PUSH
50976: LD_VAR 0 1
50980: PUSH
50981: LD_VAR 0 2
50985: PUSH
50986: LD_INT 4
50988: MINUS
50989: PUSH
50990: LD_INT 3
50992: PUSH
50993: EMPTY
50994: LIST
50995: LIST
50996: LIST
50997: PUSH
50998: LD_VAR 0 1
51002: PUSH
51003: LD_INT 3
51005: MINUS
51006: PUSH
51007: LD_VAR 0 2
51011: PUSH
51012: LD_INT 3
51014: MINUS
51015: PUSH
51016: LD_INT 2
51018: PUSH
51019: EMPTY
51020: LIST
51021: LIST
51022: LIST
51023: PUSH
51024: LD_VAR 0 1
51028: PUSH
51029: LD_INT 4
51031: MINUS
51032: PUSH
51033: LD_VAR 0 2
51037: PUSH
51038: LD_INT 1
51040: PUSH
51041: EMPTY
51042: LIST
51043: LIST
51044: LIST
51045: PUSH
51046: LD_VAR 0 1
51050: PUSH
51051: LD_VAR 0 2
51055: PUSH
51056: LD_INT 3
51058: PLUS
51059: PUSH
51060: LD_INT 0
51062: PUSH
51063: EMPTY
51064: LIST
51065: LIST
51066: LIST
51067: PUSH
51068: LD_VAR 0 1
51072: PUSH
51073: LD_INT 4
51075: PLUS
51076: PUSH
51077: LD_VAR 0 2
51081: PUSH
51082: LD_INT 4
51084: PLUS
51085: PUSH
51086: LD_INT 5
51088: PUSH
51089: EMPTY
51090: LIST
51091: LIST
51092: LIST
51093: PUSH
51094: EMPTY
51095: LIST
51096: LIST
51097: LIST
51098: LIST
51099: LIST
51100: ST_TO_ADDR
// end ; 2 :
51101: GO 51660
51103: LD_INT 2
51105: DOUBLE
51106: EQUAL
51107: IFTRUE 51111
51109: GO 51240
51111: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
51112: LD_ADDR_VAR 0 5
51116: PUSH
51117: LD_VAR 0 1
51121: PUSH
51122: LD_VAR 0 2
51126: PUSH
51127: LD_INT 3
51129: MINUS
51130: PUSH
51131: LD_INT 3
51133: PUSH
51134: EMPTY
51135: LIST
51136: LIST
51137: LIST
51138: PUSH
51139: LD_VAR 0 1
51143: PUSH
51144: LD_INT 4
51146: PLUS
51147: PUSH
51148: LD_VAR 0 2
51152: PUSH
51153: LD_INT 4
51155: PUSH
51156: EMPTY
51157: LIST
51158: LIST
51159: LIST
51160: PUSH
51161: LD_VAR 0 1
51165: PUSH
51166: LD_VAR 0 2
51170: PUSH
51171: LD_INT 4
51173: PLUS
51174: PUSH
51175: LD_INT 0
51177: PUSH
51178: EMPTY
51179: LIST
51180: LIST
51181: LIST
51182: PUSH
51183: LD_VAR 0 1
51187: PUSH
51188: LD_INT 3
51190: MINUS
51191: PUSH
51192: LD_VAR 0 2
51196: PUSH
51197: LD_INT 1
51199: PUSH
51200: EMPTY
51201: LIST
51202: LIST
51203: LIST
51204: PUSH
51205: LD_VAR 0 1
51209: PUSH
51210: LD_INT 4
51212: MINUS
51213: PUSH
51214: LD_VAR 0 2
51218: PUSH
51219: LD_INT 4
51221: MINUS
51222: PUSH
51223: LD_INT 2
51225: PUSH
51226: EMPTY
51227: LIST
51228: LIST
51229: LIST
51230: PUSH
51231: EMPTY
51232: LIST
51233: LIST
51234: LIST
51235: LIST
51236: LIST
51237: ST_TO_ADDR
// end ; 3 :
51238: GO 51660
51240: LD_INT 3
51242: DOUBLE
51243: EQUAL
51244: IFTRUE 51248
51246: GO 51381
51248: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
51249: LD_ADDR_VAR 0 5
51253: PUSH
51254: LD_VAR 0 1
51258: PUSH
51259: LD_INT 3
51261: PLUS
51262: PUSH
51263: LD_VAR 0 2
51267: PUSH
51268: LD_INT 4
51270: PUSH
51271: EMPTY
51272: LIST
51273: LIST
51274: LIST
51275: PUSH
51276: LD_VAR 0 1
51280: PUSH
51281: LD_INT 4
51283: PLUS
51284: PUSH
51285: LD_VAR 0 2
51289: PUSH
51290: LD_INT 4
51292: PLUS
51293: PUSH
51294: LD_INT 5
51296: PUSH
51297: EMPTY
51298: LIST
51299: LIST
51300: LIST
51301: PUSH
51302: LD_VAR 0 1
51306: PUSH
51307: LD_INT 4
51309: MINUS
51310: PUSH
51311: LD_VAR 0 2
51315: PUSH
51316: LD_INT 1
51318: PUSH
51319: EMPTY
51320: LIST
51321: LIST
51322: LIST
51323: PUSH
51324: LD_VAR 0 1
51328: PUSH
51329: LD_VAR 0 2
51333: PUSH
51334: LD_INT 4
51336: MINUS
51337: PUSH
51338: LD_INT 3
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: LIST
51345: PUSH
51346: LD_VAR 0 1
51350: PUSH
51351: LD_INT 3
51353: MINUS
51354: PUSH
51355: LD_VAR 0 2
51359: PUSH
51360: LD_INT 3
51362: MINUS
51363: PUSH
51364: LD_INT 2
51366: PUSH
51367: EMPTY
51368: LIST
51369: LIST
51370: LIST
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: LIST
51376: LIST
51377: LIST
51378: ST_TO_ADDR
// end ; 4 :
51379: GO 51660
51381: LD_INT 4
51383: DOUBLE
51384: EQUAL
51385: IFTRUE 51389
51387: GO 51522
51389: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
51390: LD_ADDR_VAR 0 5
51394: PUSH
51395: LD_VAR 0 1
51399: PUSH
51400: LD_VAR 0 2
51404: PUSH
51405: LD_INT 4
51407: PLUS
51408: PUSH
51409: LD_INT 0
51411: PUSH
51412: EMPTY
51413: LIST
51414: LIST
51415: LIST
51416: PUSH
51417: LD_VAR 0 1
51421: PUSH
51422: LD_INT 3
51424: PLUS
51425: PUSH
51426: LD_VAR 0 2
51430: PUSH
51431: LD_INT 3
51433: PLUS
51434: PUSH
51435: LD_INT 5
51437: PUSH
51438: EMPTY
51439: LIST
51440: LIST
51441: LIST
51442: PUSH
51443: LD_VAR 0 1
51447: PUSH
51448: LD_INT 4
51450: PLUS
51451: PUSH
51452: LD_VAR 0 2
51456: PUSH
51457: LD_INT 4
51459: PUSH
51460: EMPTY
51461: LIST
51462: LIST
51463: LIST
51464: PUSH
51465: LD_VAR 0 1
51469: PUSH
51470: LD_VAR 0 2
51474: PUSH
51475: LD_INT 3
51477: MINUS
51478: PUSH
51479: LD_INT 3
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: LIST
51486: PUSH
51487: LD_VAR 0 1
51491: PUSH
51492: LD_INT 4
51494: MINUS
51495: PUSH
51496: LD_VAR 0 2
51500: PUSH
51501: LD_INT 4
51503: MINUS
51504: PUSH
51505: LD_INT 2
51507: PUSH
51508: EMPTY
51509: LIST
51510: LIST
51511: LIST
51512: PUSH
51513: EMPTY
51514: LIST
51515: LIST
51516: LIST
51517: LIST
51518: LIST
51519: ST_TO_ADDR
// end ; 5 :
51520: GO 51660
51522: LD_INT 5
51524: DOUBLE
51525: EQUAL
51526: IFTRUE 51530
51528: GO 51659
51530: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
51531: LD_ADDR_VAR 0 5
51535: PUSH
51536: LD_VAR 0 1
51540: PUSH
51541: LD_INT 4
51543: MINUS
51544: PUSH
51545: LD_VAR 0 2
51549: PUSH
51550: LD_INT 1
51552: PUSH
51553: EMPTY
51554: LIST
51555: LIST
51556: LIST
51557: PUSH
51558: LD_VAR 0 1
51562: PUSH
51563: LD_VAR 0 2
51567: PUSH
51568: LD_INT 4
51570: MINUS
51571: PUSH
51572: LD_INT 3
51574: PUSH
51575: EMPTY
51576: LIST
51577: LIST
51578: LIST
51579: PUSH
51580: LD_VAR 0 1
51584: PUSH
51585: LD_INT 4
51587: PLUS
51588: PUSH
51589: LD_VAR 0 2
51593: PUSH
51594: LD_INT 4
51596: PLUS
51597: PUSH
51598: LD_INT 5
51600: PUSH
51601: EMPTY
51602: LIST
51603: LIST
51604: LIST
51605: PUSH
51606: LD_VAR 0 1
51610: PUSH
51611: LD_INT 3
51613: PLUS
51614: PUSH
51615: LD_VAR 0 2
51619: PUSH
51620: LD_INT 4
51622: PUSH
51623: EMPTY
51624: LIST
51625: LIST
51626: LIST
51627: PUSH
51628: LD_VAR 0 1
51632: PUSH
51633: LD_VAR 0 2
51637: PUSH
51638: LD_INT 3
51640: PLUS
51641: PUSH
51642: LD_INT 0
51644: PUSH
51645: EMPTY
51646: LIST
51647: LIST
51648: LIST
51649: PUSH
51650: EMPTY
51651: LIST
51652: LIST
51653: LIST
51654: LIST
51655: LIST
51656: ST_TO_ADDR
// end ; end ;
51657: GO 51660
51659: POP
// result := list ;
51660: LD_ADDR_VAR 0 4
51664: PUSH
51665: LD_VAR 0 5
51669: ST_TO_ADDR
// end ;
51670: LD_VAR 0 4
51674: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
51675: LD_INT 0
51677: PPUSH
51678: PPUSH
51679: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
51680: LD_VAR 0 1
51684: NOT
51685: PUSH
51686: LD_VAR 0 2
51690: PUSH
51691: LD_INT 1
51693: PUSH
51694: LD_INT 2
51696: PUSH
51697: LD_INT 3
51699: PUSH
51700: LD_INT 4
51702: PUSH
51703: EMPTY
51704: LIST
51705: LIST
51706: LIST
51707: LIST
51708: IN
51709: NOT
51710: OR
51711: IFFALSE 51715
// exit ;
51713: GO 51798
// tmp := [ ] ;
51715: LD_ADDR_VAR 0 5
51719: PUSH
51720: EMPTY
51721: ST_TO_ADDR
// for i in units do
51722: LD_ADDR_VAR 0 4
51726: PUSH
51727: LD_VAR 0 1
51731: PUSH
51732: FOR_IN
51733: IFFALSE 51767
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
51735: LD_ADDR_VAR 0 5
51739: PUSH
51740: LD_VAR 0 5
51744: PPUSH
51745: LD_VAR 0 4
51749: PPUSH
51750: LD_VAR 0 2
51754: PPUSH
51755: CALL_OW 259
51759: PPUSH
51760: CALL 53171 0 2
51764: ST_TO_ADDR
51765: GO 51732
51767: POP
51768: POP
// if not tmp then
51769: LD_VAR 0 5
51773: NOT
51774: IFFALSE 51778
// exit ;
51776: GO 51798
// result := SortListByListDesc ( units , tmp ) ;
51778: LD_ADDR_VAR 0 3
51782: PUSH
51783: LD_VAR 0 1
51787: PPUSH
51788: LD_VAR 0 5
51792: PPUSH
51793: CALL_OW 77
51797: ST_TO_ADDR
// end ;
51798: LD_VAR 0 3
51802: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
51803: LD_INT 0
51805: PPUSH
51806: PPUSH
51807: PPUSH
// result := false ;
51808: LD_ADDR_VAR 0 3
51812: PUSH
51813: LD_INT 0
51815: ST_TO_ADDR
// if not building then
51816: LD_VAR 0 2
51820: NOT
51821: IFFALSE 51825
// exit ;
51823: GO 51963
// x := GetX ( building ) ;
51825: LD_ADDR_VAR 0 4
51829: PUSH
51830: LD_VAR 0 2
51834: PPUSH
51835: CALL_OW 250
51839: ST_TO_ADDR
// y := GetY ( building ) ;
51840: LD_ADDR_VAR 0 5
51844: PUSH
51845: LD_VAR 0 2
51849: PPUSH
51850: CALL_OW 251
51854: ST_TO_ADDR
// if not x or not y then
51855: LD_VAR 0 4
51859: NOT
51860: PUSH
51861: LD_VAR 0 5
51865: NOT
51866: OR
51867: IFFALSE 51871
// exit ;
51869: GO 51963
// if GetTaskList ( unit ) then
51871: LD_VAR 0 1
51875: PPUSH
51876: CALL_OW 437
51880: IFFALSE 51963
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
51882: LD_STRING e
51884: PUSH
51885: LD_VAR 0 1
51889: PPUSH
51890: CALL_OW 437
51894: PUSH
51895: LD_INT 1
51897: ARRAY
51898: PUSH
51899: LD_INT 1
51901: ARRAY
51902: EQUAL
51903: PUSH
51904: LD_VAR 0 4
51908: PUSH
51909: LD_VAR 0 1
51913: PPUSH
51914: CALL_OW 437
51918: PUSH
51919: LD_INT 1
51921: ARRAY
51922: PUSH
51923: LD_INT 2
51925: ARRAY
51926: EQUAL
51927: AND
51928: PUSH
51929: LD_VAR 0 5
51933: PUSH
51934: LD_VAR 0 1
51938: PPUSH
51939: CALL_OW 437
51943: PUSH
51944: LD_INT 1
51946: ARRAY
51947: PUSH
51948: LD_INT 3
51950: ARRAY
51951: EQUAL
51952: AND
51953: IFFALSE 51963
// result := true end ;
51955: LD_ADDR_VAR 0 3
51959: PUSH
51960: LD_INT 1
51962: ST_TO_ADDR
// end ;
51963: LD_VAR 0 3
51967: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
51968: LD_INT 0
51970: PPUSH
// result := false ;
51971: LD_ADDR_VAR 0 4
51975: PUSH
51976: LD_INT 0
51978: ST_TO_ADDR
// if GetTaskList ( unit ) then
51979: LD_VAR 0 1
51983: PPUSH
51984: CALL_OW 437
51988: IFFALSE 52071
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
51990: LD_STRING M
51992: PUSH
51993: LD_VAR 0 1
51997: PPUSH
51998: CALL_OW 437
52002: PUSH
52003: LD_INT 1
52005: ARRAY
52006: PUSH
52007: LD_INT 1
52009: ARRAY
52010: EQUAL
52011: PUSH
52012: LD_VAR 0 2
52016: PUSH
52017: LD_VAR 0 1
52021: PPUSH
52022: CALL_OW 437
52026: PUSH
52027: LD_INT 1
52029: ARRAY
52030: PUSH
52031: LD_INT 2
52033: ARRAY
52034: EQUAL
52035: AND
52036: PUSH
52037: LD_VAR 0 3
52041: PUSH
52042: LD_VAR 0 1
52046: PPUSH
52047: CALL_OW 437
52051: PUSH
52052: LD_INT 1
52054: ARRAY
52055: PUSH
52056: LD_INT 3
52058: ARRAY
52059: EQUAL
52060: AND
52061: IFFALSE 52071
// result := true ;
52063: LD_ADDR_VAR 0 4
52067: PUSH
52068: LD_INT 1
52070: ST_TO_ADDR
// end ; end ;
52071: LD_VAR 0 4
52075: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
52076: LD_INT 0
52078: PPUSH
52079: PPUSH
52080: PPUSH
52081: PPUSH
// if not unit or not area then
52082: LD_VAR 0 1
52086: NOT
52087: PUSH
52088: LD_VAR 0 2
52092: NOT
52093: OR
52094: IFFALSE 52098
// exit ;
52096: GO 52274
// tmp := AreaToList ( area , i ) ;
52098: LD_ADDR_VAR 0 6
52102: PUSH
52103: LD_VAR 0 2
52107: PPUSH
52108: LD_VAR 0 5
52112: PPUSH
52113: CALL_OW 517
52117: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
52118: LD_ADDR_VAR 0 5
52122: PUSH
52123: DOUBLE
52124: LD_INT 1
52126: DEC
52127: ST_TO_ADDR
52128: LD_VAR 0 6
52132: PUSH
52133: LD_INT 1
52135: ARRAY
52136: PUSH
52137: FOR_TO
52138: IFFALSE 52272
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
52140: LD_ADDR_VAR 0 7
52144: PUSH
52145: LD_VAR 0 6
52149: PUSH
52150: LD_INT 1
52152: ARRAY
52153: PUSH
52154: LD_VAR 0 5
52158: ARRAY
52159: PUSH
52160: LD_VAR 0 6
52164: PUSH
52165: LD_INT 2
52167: ARRAY
52168: PUSH
52169: LD_VAR 0 5
52173: ARRAY
52174: PUSH
52175: EMPTY
52176: LIST
52177: LIST
52178: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
52179: LD_INT 92
52181: PUSH
52182: LD_VAR 0 7
52186: PUSH
52187: LD_INT 1
52189: ARRAY
52190: PUSH
52191: LD_VAR 0 7
52195: PUSH
52196: LD_INT 2
52198: ARRAY
52199: PUSH
52200: LD_INT 2
52202: PUSH
52203: EMPTY
52204: LIST
52205: LIST
52206: LIST
52207: LIST
52208: PPUSH
52209: CALL_OW 69
52213: PUSH
52214: LD_INT 0
52216: EQUAL
52217: IFFALSE 52270
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
52219: LD_VAR 0 1
52223: PPUSH
52224: LD_VAR 0 7
52228: PUSH
52229: LD_INT 1
52231: ARRAY
52232: PPUSH
52233: LD_VAR 0 7
52237: PUSH
52238: LD_INT 2
52240: ARRAY
52241: PPUSH
52242: LD_VAR 0 3
52246: PPUSH
52247: CALL_OW 48
// result := IsPlaced ( unit ) ;
52251: LD_ADDR_VAR 0 4
52255: PUSH
52256: LD_VAR 0 1
52260: PPUSH
52261: CALL_OW 305
52265: ST_TO_ADDR
// exit ;
52266: POP
52267: POP
52268: GO 52274
// end ; end ;
52270: GO 52137
52272: POP
52273: POP
// end ;
52274: LD_VAR 0 4
52278: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
52279: LD_INT 0
52281: PPUSH
52282: PPUSH
52283: PPUSH
// if not side or side > 8 then
52284: LD_VAR 0 1
52288: NOT
52289: PUSH
52290: LD_VAR 0 1
52294: PUSH
52295: LD_INT 8
52297: GREATER
52298: OR
52299: IFFALSE 52303
// exit ;
52301: GO 52490
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
52303: LD_ADDR_VAR 0 4
52307: PUSH
52308: LD_INT 22
52310: PUSH
52311: LD_VAR 0 1
52315: PUSH
52316: EMPTY
52317: LIST
52318: LIST
52319: PUSH
52320: LD_INT 21
52322: PUSH
52323: LD_INT 3
52325: PUSH
52326: EMPTY
52327: LIST
52328: LIST
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: PPUSH
52334: CALL_OW 69
52338: ST_TO_ADDR
// if not tmp then
52339: LD_VAR 0 4
52343: NOT
52344: IFFALSE 52348
// exit ;
52346: GO 52490
// enable_addtolog := true ;
52348: LD_ADDR_OWVAR 81
52352: PUSH
52353: LD_INT 1
52355: ST_TO_ADDR
// AddToLog ( [ ) ;
52356: LD_STRING [
52358: PPUSH
52359: CALL_OW 561
// for i in tmp do
52363: LD_ADDR_VAR 0 3
52367: PUSH
52368: LD_VAR 0 4
52372: PUSH
52373: FOR_IN
52374: IFFALSE 52481
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
52376: LD_STRING [
52378: PUSH
52379: LD_VAR 0 3
52383: PPUSH
52384: CALL_OW 266
52388: STR
52389: PUSH
52390: LD_STRING , 
52392: STR
52393: PUSH
52394: LD_VAR 0 3
52398: PPUSH
52399: CALL_OW 250
52403: STR
52404: PUSH
52405: LD_STRING , 
52407: STR
52408: PUSH
52409: LD_VAR 0 3
52413: PPUSH
52414: CALL_OW 251
52418: STR
52419: PUSH
52420: LD_STRING , 
52422: STR
52423: PUSH
52424: LD_VAR 0 3
52428: PPUSH
52429: CALL_OW 254
52433: STR
52434: PUSH
52435: LD_STRING , 
52437: STR
52438: PUSH
52439: LD_VAR 0 3
52443: PPUSH
52444: LD_INT 1
52446: PPUSH
52447: CALL_OW 268
52451: STR
52452: PUSH
52453: LD_STRING , 
52455: STR
52456: PUSH
52457: LD_VAR 0 3
52461: PPUSH
52462: LD_INT 2
52464: PPUSH
52465: CALL_OW 268
52469: STR
52470: PUSH
52471: LD_STRING ],
52473: STR
52474: PPUSH
52475: CALL_OW 561
// end ;
52479: GO 52373
52481: POP
52482: POP
// AddToLog ( ]; ) ;
52483: LD_STRING ];
52485: PPUSH
52486: CALL_OW 561
// end ;
52490: LD_VAR 0 2
52494: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
52495: LD_INT 0
52497: PPUSH
52498: PPUSH
52499: PPUSH
52500: PPUSH
52501: PPUSH
// if not area or not rate or not max then
52502: LD_VAR 0 1
52506: NOT
52507: PUSH
52508: LD_VAR 0 2
52512: NOT
52513: OR
52514: PUSH
52515: LD_VAR 0 4
52519: NOT
52520: OR
52521: IFFALSE 52525
// exit ;
52523: GO 52714
// while 1 do
52525: LD_INT 1
52527: IFFALSE 52714
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
52529: LD_ADDR_VAR 0 9
52533: PUSH
52534: LD_VAR 0 1
52538: PPUSH
52539: LD_INT 1
52541: PPUSH
52542: CALL_OW 287
52546: PUSH
52547: LD_INT 10
52549: MUL
52550: ST_TO_ADDR
// r := rate / 10 ;
52551: LD_ADDR_VAR 0 7
52555: PUSH
52556: LD_VAR 0 2
52560: PUSH
52561: LD_INT 10
52563: DIVREAL
52564: ST_TO_ADDR
// time := 1 1$00 ;
52565: LD_ADDR_VAR 0 8
52569: PUSH
52570: LD_INT 2100
52572: ST_TO_ADDR
// if amount < min then
52573: LD_VAR 0 9
52577: PUSH
52578: LD_VAR 0 3
52582: LESS
52583: IFFALSE 52601
// r := r * 2 else
52585: LD_ADDR_VAR 0 7
52589: PUSH
52590: LD_VAR 0 7
52594: PUSH
52595: LD_INT 2
52597: MUL
52598: ST_TO_ADDR
52599: GO 52627
// if amount > max then
52601: LD_VAR 0 9
52605: PUSH
52606: LD_VAR 0 4
52610: GREATER
52611: IFFALSE 52627
// r := r / 2 ;
52613: LD_ADDR_VAR 0 7
52617: PUSH
52618: LD_VAR 0 7
52622: PUSH
52623: LD_INT 2
52625: DIVREAL
52626: ST_TO_ADDR
// time := time / r ;
52627: LD_ADDR_VAR 0 8
52631: PUSH
52632: LD_VAR 0 8
52636: PUSH
52637: LD_VAR 0 7
52641: DIVREAL
52642: ST_TO_ADDR
// if time < 0 then
52643: LD_VAR 0 8
52647: PUSH
52648: LD_INT 0
52650: LESS
52651: IFFALSE 52668
// time := time * - 1 ;
52653: LD_ADDR_VAR 0 8
52657: PUSH
52658: LD_VAR 0 8
52662: PUSH
52663: LD_INT 1
52665: NEG
52666: MUL
52667: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
52668: LD_VAR 0 8
52672: PUSH
52673: LD_INT 35
52675: PPUSH
52676: LD_INT 875
52678: PPUSH
52679: CALL_OW 12
52683: PLUS
52684: PPUSH
52685: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
52689: LD_INT 1
52691: PPUSH
52692: LD_INT 5
52694: PPUSH
52695: CALL_OW 12
52699: PPUSH
52700: LD_VAR 0 1
52704: PPUSH
52705: LD_INT 1
52707: PPUSH
52708: CALL_OW 55
// end ;
52712: GO 52525
// end ;
52714: LD_VAR 0 5
52718: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
52719: LD_INT 0
52721: PPUSH
52722: PPUSH
52723: PPUSH
52724: PPUSH
52725: PPUSH
52726: PPUSH
52727: PPUSH
52728: PPUSH
// if not turrets or not factories then
52729: LD_VAR 0 1
52733: NOT
52734: PUSH
52735: LD_VAR 0 2
52739: NOT
52740: OR
52741: IFFALSE 52745
// exit ;
52743: GO 53052
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
52745: LD_ADDR_VAR 0 10
52749: PUSH
52750: LD_INT 5
52752: PUSH
52753: LD_INT 6
52755: PUSH
52756: EMPTY
52757: LIST
52758: LIST
52759: PUSH
52760: LD_INT 2
52762: PUSH
52763: LD_INT 4
52765: PUSH
52766: EMPTY
52767: LIST
52768: LIST
52769: PUSH
52770: LD_INT 3
52772: PUSH
52773: LD_INT 5
52775: PUSH
52776: EMPTY
52777: LIST
52778: LIST
52779: PUSH
52780: EMPTY
52781: LIST
52782: LIST
52783: LIST
52784: PUSH
52785: LD_INT 24
52787: PUSH
52788: LD_INT 25
52790: PUSH
52791: EMPTY
52792: LIST
52793: LIST
52794: PUSH
52795: LD_INT 23
52797: PUSH
52798: LD_INT 27
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: PUSH
52805: EMPTY
52806: LIST
52807: LIST
52808: PUSH
52809: LD_INT 42
52811: PUSH
52812: LD_INT 43
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: PUSH
52819: LD_INT 44
52821: PUSH
52822: LD_INT 46
52824: PUSH
52825: EMPTY
52826: LIST
52827: LIST
52828: PUSH
52829: LD_INT 45
52831: PUSH
52832: LD_INT 47
52834: PUSH
52835: EMPTY
52836: LIST
52837: LIST
52838: PUSH
52839: EMPTY
52840: LIST
52841: LIST
52842: LIST
52843: PUSH
52844: EMPTY
52845: LIST
52846: LIST
52847: LIST
52848: ST_TO_ADDR
// result := [ ] ;
52849: LD_ADDR_VAR 0 3
52853: PUSH
52854: EMPTY
52855: ST_TO_ADDR
// for i in turrets do
52856: LD_ADDR_VAR 0 4
52860: PUSH
52861: LD_VAR 0 1
52865: PUSH
52866: FOR_IN
52867: IFFALSE 53050
// begin nat := GetNation ( i ) ;
52869: LD_ADDR_VAR 0 7
52873: PUSH
52874: LD_VAR 0 4
52878: PPUSH
52879: CALL_OW 248
52883: ST_TO_ADDR
// weapon := 0 ;
52884: LD_ADDR_VAR 0 8
52888: PUSH
52889: LD_INT 0
52891: ST_TO_ADDR
// if not nat then
52892: LD_VAR 0 7
52896: NOT
52897: IFFALSE 52901
// continue ;
52899: GO 52866
// for j in list [ nat ] do
52901: LD_ADDR_VAR 0 5
52905: PUSH
52906: LD_VAR 0 10
52910: PUSH
52911: LD_VAR 0 7
52915: ARRAY
52916: PUSH
52917: FOR_IN
52918: IFFALSE 52959
// if GetBWeapon ( i ) = j [ 1 ] then
52920: LD_VAR 0 4
52924: PPUSH
52925: CALL_OW 269
52929: PUSH
52930: LD_VAR 0 5
52934: PUSH
52935: LD_INT 1
52937: ARRAY
52938: EQUAL
52939: IFFALSE 52957
// begin weapon := j [ 2 ] ;
52941: LD_ADDR_VAR 0 8
52945: PUSH
52946: LD_VAR 0 5
52950: PUSH
52951: LD_INT 2
52953: ARRAY
52954: ST_TO_ADDR
// break ;
52955: GO 52959
// end ;
52957: GO 52917
52959: POP
52960: POP
// if not weapon then
52961: LD_VAR 0 8
52965: NOT
52966: IFFALSE 52970
// continue ;
52968: GO 52866
// for k in factories do
52970: LD_ADDR_VAR 0 6
52974: PUSH
52975: LD_VAR 0 2
52979: PUSH
52980: FOR_IN
52981: IFFALSE 53046
// begin weapons := AvailableWeaponList ( k ) ;
52983: LD_ADDR_VAR 0 9
52987: PUSH
52988: LD_VAR 0 6
52992: PPUSH
52993: CALL_OW 478
52997: ST_TO_ADDR
// if not weapons then
52998: LD_VAR 0 9
53002: NOT
53003: IFFALSE 53007
// continue ;
53005: GO 52980
// if weapon in weapons then
53007: LD_VAR 0 8
53011: PUSH
53012: LD_VAR 0 9
53016: IN
53017: IFFALSE 53044
// begin result := [ i , weapon ] ;
53019: LD_ADDR_VAR 0 3
53023: PUSH
53024: LD_VAR 0 4
53028: PUSH
53029: LD_VAR 0 8
53033: PUSH
53034: EMPTY
53035: LIST
53036: LIST
53037: ST_TO_ADDR
// exit ;
53038: POP
53039: POP
53040: POP
53041: POP
53042: GO 53052
// end ; end ;
53044: GO 52980
53046: POP
53047: POP
// end ;
53048: GO 52866
53050: POP
53051: POP
// end ;
53052: LD_VAR 0 3
53056: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
53057: LD_INT 0
53059: PPUSH
// if not side or side > 8 then
53060: LD_VAR 0 3
53064: NOT
53065: PUSH
53066: LD_VAR 0 3
53070: PUSH
53071: LD_INT 8
53073: GREATER
53074: OR
53075: IFFALSE 53079
// exit ;
53077: GO 53138
// if not range then
53079: LD_VAR 0 4
53083: NOT
53084: IFFALSE 53095
// range := - 12 ;
53086: LD_ADDR_VAR 0 4
53090: PUSH
53091: LD_INT 12
53093: NEG
53094: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
53095: LD_VAR 0 1
53099: PPUSH
53100: LD_VAR 0 2
53104: PPUSH
53105: LD_VAR 0 3
53109: PPUSH
53110: LD_VAR 0 4
53114: PPUSH
53115: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
53119: LD_VAR 0 1
53123: PPUSH
53124: LD_VAR 0 2
53128: PPUSH
53129: LD_VAR 0 3
53133: PPUSH
53134: CALL_OW 331
// end ;
53138: LD_VAR 0 5
53142: RET
// export function Video ( mode ) ; begin
53143: LD_INT 0
53145: PPUSH
// ingame_video = mode ;
53146: LD_ADDR_OWVAR 52
53150: PUSH
53151: LD_VAR 0 1
53155: ST_TO_ADDR
// interface_hidden = mode ;
53156: LD_ADDR_OWVAR 54
53160: PUSH
53161: LD_VAR 0 1
53165: ST_TO_ADDR
// end ;
53166: LD_VAR 0 2
53170: RET
// export function Join ( array , element ) ; begin
53171: LD_INT 0
53173: PPUSH
// result := Replace ( array , array + 1 , element ) ;
53174: LD_ADDR_VAR 0 3
53178: PUSH
53179: LD_VAR 0 1
53183: PPUSH
53184: LD_VAR 0 1
53188: PUSH
53189: LD_INT 1
53191: PLUS
53192: PPUSH
53193: LD_VAR 0 2
53197: PPUSH
53198: CALL_OW 1
53202: ST_TO_ADDR
// end ;
53203: LD_VAR 0 3
53207: RET
// export function JoinUnion ( array , element ) ; begin
53208: LD_INT 0
53210: PPUSH
// result := array union element ;
53211: LD_ADDR_VAR 0 3
53215: PUSH
53216: LD_VAR 0 1
53220: PUSH
53221: LD_VAR 0 2
53225: UNION
53226: ST_TO_ADDR
// end ;
53227: LD_VAR 0 3
53231: RET
// export function GetBehemoths ( side ) ; begin
53232: LD_INT 0
53234: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
53235: LD_ADDR_VAR 0 2
53239: PUSH
53240: LD_INT 22
53242: PUSH
53243: LD_VAR 0 1
53247: PUSH
53248: EMPTY
53249: LIST
53250: LIST
53251: PUSH
53252: LD_INT 31
53254: PUSH
53255: LD_INT 25
53257: PUSH
53258: EMPTY
53259: LIST
53260: LIST
53261: PUSH
53262: EMPTY
53263: LIST
53264: LIST
53265: PPUSH
53266: CALL_OW 69
53270: ST_TO_ADDR
// end ;
53271: LD_VAR 0 2
53275: RET
// export function Shuffle ( array ) ; var i , index ; begin
53276: LD_INT 0
53278: PPUSH
53279: PPUSH
53280: PPUSH
// result := [ ] ;
53281: LD_ADDR_VAR 0 2
53285: PUSH
53286: EMPTY
53287: ST_TO_ADDR
// if not array then
53288: LD_VAR 0 1
53292: NOT
53293: IFFALSE 53297
// exit ;
53295: GO 53396
// Randomize ;
53297: CALL_OW 10
// for i = array downto 1 do
53301: LD_ADDR_VAR 0 3
53305: PUSH
53306: DOUBLE
53307: LD_VAR 0 1
53311: INC
53312: ST_TO_ADDR
53313: LD_INT 1
53315: PUSH
53316: FOR_DOWNTO
53317: IFFALSE 53394
// begin index := rand ( 1 , array ) ;
53319: LD_ADDR_VAR 0 4
53323: PUSH
53324: LD_INT 1
53326: PPUSH
53327: LD_VAR 0 1
53331: PPUSH
53332: CALL_OW 12
53336: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
53337: LD_ADDR_VAR 0 2
53341: PUSH
53342: LD_VAR 0 2
53346: PPUSH
53347: LD_VAR 0 2
53351: PUSH
53352: LD_INT 1
53354: PLUS
53355: PPUSH
53356: LD_VAR 0 1
53360: PUSH
53361: LD_VAR 0 4
53365: ARRAY
53366: PPUSH
53367: CALL_OW 2
53371: ST_TO_ADDR
// array := Delete ( array , index ) ;
53372: LD_ADDR_VAR 0 1
53376: PUSH
53377: LD_VAR 0 1
53381: PPUSH
53382: LD_VAR 0 4
53386: PPUSH
53387: CALL_OW 3
53391: ST_TO_ADDR
// end ;
53392: GO 53316
53394: POP
53395: POP
// end ;
53396: LD_VAR 0 2
53400: RET
// export function GetBaseMaterials ( base ) ; begin
53401: LD_INT 0
53403: PPUSH
// result := [ 0 , 0 , 0 ] ;
53404: LD_ADDR_VAR 0 2
53408: PUSH
53409: LD_INT 0
53411: PUSH
53412: LD_INT 0
53414: PUSH
53415: LD_INT 0
53417: PUSH
53418: EMPTY
53419: LIST
53420: LIST
53421: LIST
53422: ST_TO_ADDR
// if not base then
53423: LD_VAR 0 1
53427: NOT
53428: IFFALSE 53432
// exit ;
53430: GO 53481
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
53432: LD_ADDR_VAR 0 2
53436: PUSH
53437: LD_VAR 0 1
53441: PPUSH
53442: LD_INT 1
53444: PPUSH
53445: CALL_OW 275
53449: PUSH
53450: LD_VAR 0 1
53454: PPUSH
53455: LD_INT 2
53457: PPUSH
53458: CALL_OW 275
53462: PUSH
53463: LD_VAR 0 1
53467: PPUSH
53468: LD_INT 3
53470: PPUSH
53471: CALL_OW 275
53475: PUSH
53476: EMPTY
53477: LIST
53478: LIST
53479: LIST
53480: ST_TO_ADDR
// end ;
53481: LD_VAR 0 2
53485: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
53486: LD_INT 0
53488: PPUSH
53489: PPUSH
// result := array ;
53490: LD_ADDR_VAR 0 3
53494: PUSH
53495: LD_VAR 0 1
53499: ST_TO_ADDR
// if size >= result then
53500: LD_VAR 0 2
53504: PUSH
53505: LD_VAR 0 3
53509: GREATEREQUAL
53510: IFFALSE 53514
// exit ;
53512: GO 53564
// if size then
53514: LD_VAR 0 2
53518: IFFALSE 53564
// for i := array downto size do
53520: LD_ADDR_VAR 0 4
53524: PUSH
53525: DOUBLE
53526: LD_VAR 0 1
53530: INC
53531: ST_TO_ADDR
53532: LD_VAR 0 2
53536: PUSH
53537: FOR_DOWNTO
53538: IFFALSE 53562
// result := Delete ( result , result ) ;
53540: LD_ADDR_VAR 0 3
53544: PUSH
53545: LD_VAR 0 3
53549: PPUSH
53550: LD_VAR 0 3
53554: PPUSH
53555: CALL_OW 3
53559: ST_TO_ADDR
53560: GO 53537
53562: POP
53563: POP
// end ;
53564: LD_VAR 0 3
53568: RET
// export function ComExit ( unit ) ; var tmp ; begin
53569: LD_INT 0
53571: PPUSH
53572: PPUSH
// if not IsInUnit ( unit ) then
53573: LD_VAR 0 1
53577: PPUSH
53578: CALL_OW 310
53582: NOT
53583: IFFALSE 53587
// exit ;
53585: GO 53647
// tmp := IsInUnit ( unit ) ;
53587: LD_ADDR_VAR 0 3
53591: PUSH
53592: LD_VAR 0 1
53596: PPUSH
53597: CALL_OW 310
53601: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
53602: LD_VAR 0 3
53606: PPUSH
53607: CALL_OW 247
53611: PUSH
53612: LD_INT 2
53614: EQUAL
53615: IFFALSE 53628
// ComExitVehicle ( unit ) else
53617: LD_VAR 0 1
53621: PPUSH
53622: CALL_OW 121
53626: GO 53637
// ComExitBuilding ( unit ) ;
53628: LD_VAR 0 1
53632: PPUSH
53633: CALL_OW 122
// result := tmp ;
53637: LD_ADDR_VAR 0 2
53641: PUSH
53642: LD_VAR 0 3
53646: ST_TO_ADDR
// end ;
53647: LD_VAR 0 2
53651: RET
// export function ComExitAll ( units ) ; var i ; begin
53652: LD_INT 0
53654: PPUSH
53655: PPUSH
// if not units then
53656: LD_VAR 0 1
53660: NOT
53661: IFFALSE 53665
// exit ;
53663: GO 53691
// for i in units do
53665: LD_ADDR_VAR 0 3
53669: PUSH
53670: LD_VAR 0 1
53674: PUSH
53675: FOR_IN
53676: IFFALSE 53689
// ComExit ( i ) ;
53678: LD_VAR 0 3
53682: PPUSH
53683: CALL 53569 0 1
53687: GO 53675
53689: POP
53690: POP
// end ;
53691: LD_VAR 0 2
53695: RET
// export function ResetHc ; begin
53696: LD_INT 0
53698: PPUSH
// InitHc ;
53699: CALL_OW 19
// hc_importance := 0 ;
53703: LD_ADDR_OWVAR 32
53707: PUSH
53708: LD_INT 0
53710: ST_TO_ADDR
// end ;
53711: LD_VAR 0 1
53715: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
53716: LD_INT 0
53718: PPUSH
53719: PPUSH
53720: PPUSH
// _x := ( x1 + x2 ) div 2 ;
53721: LD_ADDR_VAR 0 6
53725: PUSH
53726: LD_VAR 0 1
53730: PUSH
53731: LD_VAR 0 3
53735: PLUS
53736: PUSH
53737: LD_INT 2
53739: DIV
53740: ST_TO_ADDR
// if _x < 0 then
53741: LD_VAR 0 6
53745: PUSH
53746: LD_INT 0
53748: LESS
53749: IFFALSE 53766
// _x := _x * - 1 ;
53751: LD_ADDR_VAR 0 6
53755: PUSH
53756: LD_VAR 0 6
53760: PUSH
53761: LD_INT 1
53763: NEG
53764: MUL
53765: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
53766: LD_ADDR_VAR 0 7
53770: PUSH
53771: LD_VAR 0 2
53775: PUSH
53776: LD_VAR 0 4
53780: PLUS
53781: PUSH
53782: LD_INT 2
53784: DIV
53785: ST_TO_ADDR
// if _y < 0 then
53786: LD_VAR 0 7
53790: PUSH
53791: LD_INT 0
53793: LESS
53794: IFFALSE 53811
// _y := _y * - 1 ;
53796: LD_ADDR_VAR 0 7
53800: PUSH
53801: LD_VAR 0 7
53805: PUSH
53806: LD_INT 1
53808: NEG
53809: MUL
53810: ST_TO_ADDR
// result := [ _x , _y ] ;
53811: LD_ADDR_VAR 0 5
53815: PUSH
53816: LD_VAR 0 6
53820: PUSH
53821: LD_VAR 0 7
53825: PUSH
53826: EMPTY
53827: LIST
53828: LIST
53829: ST_TO_ADDR
// end ;
53830: LD_VAR 0 5
53834: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
53835: LD_INT 0
53837: PPUSH
53838: PPUSH
53839: PPUSH
53840: PPUSH
// task := GetTaskList ( unit ) ;
53841: LD_ADDR_VAR 0 7
53845: PUSH
53846: LD_VAR 0 1
53850: PPUSH
53851: CALL_OW 437
53855: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
53856: LD_VAR 0 7
53860: NOT
53861: PUSH
53862: LD_VAR 0 1
53866: PPUSH
53867: LD_VAR 0 2
53871: PPUSH
53872: CALL_OW 308
53876: NOT
53877: AND
53878: IFFALSE 53882
// exit ;
53880: GO 54000
// if IsInArea ( unit , area ) then
53882: LD_VAR 0 1
53886: PPUSH
53887: LD_VAR 0 2
53891: PPUSH
53892: CALL_OW 308
53896: IFFALSE 53914
// begin ComMoveToArea ( unit , goAway ) ;
53898: LD_VAR 0 1
53902: PPUSH
53903: LD_VAR 0 3
53907: PPUSH
53908: CALL_OW 113
// exit ;
53912: GO 54000
// end ; if task [ 1 ] [ 1 ] <> M then
53914: LD_VAR 0 7
53918: PUSH
53919: LD_INT 1
53921: ARRAY
53922: PUSH
53923: LD_INT 1
53925: ARRAY
53926: PUSH
53927: LD_STRING M
53929: NONEQUAL
53930: IFFALSE 53934
// exit ;
53932: GO 54000
// x := task [ 1 ] [ 2 ] ;
53934: LD_ADDR_VAR 0 5
53938: PUSH
53939: LD_VAR 0 7
53943: PUSH
53944: LD_INT 1
53946: ARRAY
53947: PUSH
53948: LD_INT 2
53950: ARRAY
53951: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
53952: LD_ADDR_VAR 0 6
53956: PUSH
53957: LD_VAR 0 7
53961: PUSH
53962: LD_INT 1
53964: ARRAY
53965: PUSH
53966: LD_INT 3
53968: ARRAY
53969: ST_TO_ADDR
// if InArea ( x , y , area ) then
53970: LD_VAR 0 5
53974: PPUSH
53975: LD_VAR 0 6
53979: PPUSH
53980: LD_VAR 0 2
53984: PPUSH
53985: CALL_OW 309
53989: IFFALSE 54000
// ComStop ( unit ) ;
53991: LD_VAR 0 1
53995: PPUSH
53996: CALL_OW 141
// end ;
54000: LD_VAR 0 4
54004: RET
// export function Abs ( value ) ; begin
54005: LD_INT 0
54007: PPUSH
// result := value ;
54008: LD_ADDR_VAR 0 2
54012: PUSH
54013: LD_VAR 0 1
54017: ST_TO_ADDR
// if value < 0 then
54018: LD_VAR 0 1
54022: PUSH
54023: LD_INT 0
54025: LESS
54026: IFFALSE 54043
// result := value * - 1 ;
54028: LD_ADDR_VAR 0 2
54032: PUSH
54033: LD_VAR 0 1
54037: PUSH
54038: LD_INT 1
54040: NEG
54041: MUL
54042: ST_TO_ADDR
// end ;
54043: LD_VAR 0 2
54047: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
54048: LD_INT 0
54050: PPUSH
54051: PPUSH
54052: PPUSH
54053: PPUSH
54054: PPUSH
54055: PPUSH
54056: PPUSH
54057: PPUSH
// if not unit or not building then
54058: LD_VAR 0 1
54062: NOT
54063: PUSH
54064: LD_VAR 0 2
54068: NOT
54069: OR
54070: IFFALSE 54074
// exit ;
54072: GO 54300
// x := GetX ( building ) ;
54074: LD_ADDR_VAR 0 4
54078: PUSH
54079: LD_VAR 0 2
54083: PPUSH
54084: CALL_OW 250
54088: ST_TO_ADDR
// y := GetY ( building ) ;
54089: LD_ADDR_VAR 0 6
54093: PUSH
54094: LD_VAR 0 2
54098: PPUSH
54099: CALL_OW 251
54103: ST_TO_ADDR
// d := GetDir ( building ) ;
54104: LD_ADDR_VAR 0 8
54108: PUSH
54109: LD_VAR 0 2
54113: PPUSH
54114: CALL_OW 254
54118: ST_TO_ADDR
// r := 4 ;
54119: LD_ADDR_VAR 0 9
54123: PUSH
54124: LD_INT 4
54126: ST_TO_ADDR
// for i := 1 to 5 do
54127: LD_ADDR_VAR 0 10
54131: PUSH
54132: DOUBLE
54133: LD_INT 1
54135: DEC
54136: ST_TO_ADDR
54137: LD_INT 5
54139: PUSH
54140: FOR_TO
54141: IFFALSE 54298
// begin _x := ShiftX ( x , d , r + i ) ;
54143: LD_ADDR_VAR 0 5
54147: PUSH
54148: LD_VAR 0 4
54152: PPUSH
54153: LD_VAR 0 8
54157: PPUSH
54158: LD_VAR 0 9
54162: PUSH
54163: LD_VAR 0 10
54167: PLUS
54168: PPUSH
54169: CALL_OW 272
54173: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
54174: LD_ADDR_VAR 0 7
54178: PUSH
54179: LD_VAR 0 6
54183: PPUSH
54184: LD_VAR 0 8
54188: PPUSH
54189: LD_VAR 0 9
54193: PUSH
54194: LD_VAR 0 10
54198: PLUS
54199: PPUSH
54200: CALL_OW 273
54204: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
54205: LD_VAR 0 5
54209: PPUSH
54210: LD_VAR 0 7
54214: PPUSH
54215: CALL_OW 488
54219: PUSH
54220: LD_VAR 0 5
54224: PPUSH
54225: LD_VAR 0 7
54229: PPUSH
54230: CALL_OW 428
54234: PPUSH
54235: CALL_OW 247
54239: PUSH
54240: LD_INT 3
54242: PUSH
54243: LD_INT 2
54245: PUSH
54246: EMPTY
54247: LIST
54248: LIST
54249: IN
54250: NOT
54251: AND
54252: IFFALSE 54296
// begin ComMoveXY ( unit , _x , _y ) ;
54254: LD_VAR 0 1
54258: PPUSH
54259: LD_VAR 0 5
54263: PPUSH
54264: LD_VAR 0 7
54268: PPUSH
54269: CALL_OW 111
// result := [ _x , _y ] ;
54273: LD_ADDR_VAR 0 3
54277: PUSH
54278: LD_VAR 0 5
54282: PUSH
54283: LD_VAR 0 7
54287: PUSH
54288: EMPTY
54289: LIST
54290: LIST
54291: ST_TO_ADDR
// exit ;
54292: POP
54293: POP
54294: GO 54300
// end ; end ;
54296: GO 54140
54298: POP
54299: POP
// end ;
54300: LD_VAR 0 3
54304: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
54305: LD_INT 0
54307: PPUSH
54308: PPUSH
54309: PPUSH
// result := 0 ;
54310: LD_ADDR_VAR 0 3
54314: PUSH
54315: LD_INT 0
54317: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
54318: LD_VAR 0 1
54322: PUSH
54323: LD_INT 0
54325: LESS
54326: PUSH
54327: LD_VAR 0 1
54331: PUSH
54332: LD_INT 8
54334: GREATER
54335: OR
54336: PUSH
54337: LD_VAR 0 2
54341: PUSH
54342: LD_INT 0
54344: LESS
54345: OR
54346: PUSH
54347: LD_VAR 0 2
54351: PUSH
54352: LD_INT 8
54354: GREATER
54355: OR
54356: IFFALSE 54360
// exit ;
54358: GO 54435
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
54360: LD_ADDR_VAR 0 4
54364: PUSH
54365: LD_INT 22
54367: PUSH
54368: LD_VAR 0 2
54372: PUSH
54373: EMPTY
54374: LIST
54375: LIST
54376: PPUSH
54377: CALL_OW 69
54381: PUSH
54382: FOR_IN
54383: IFFALSE 54433
// begin un := UnitShoot ( i ) ;
54385: LD_ADDR_VAR 0 5
54389: PUSH
54390: LD_VAR 0 4
54394: PPUSH
54395: CALL_OW 504
54399: ST_TO_ADDR
// if GetSide ( un ) = side1 then
54400: LD_VAR 0 5
54404: PPUSH
54405: CALL_OW 255
54409: PUSH
54410: LD_VAR 0 1
54414: EQUAL
54415: IFFALSE 54431
// begin result := un ;
54417: LD_ADDR_VAR 0 3
54421: PUSH
54422: LD_VAR 0 5
54426: ST_TO_ADDR
// exit ;
54427: POP
54428: POP
54429: GO 54435
// end ; end ;
54431: GO 54382
54433: POP
54434: POP
// end ;
54435: LD_VAR 0 3
54439: RET
// export function GetCargoBay ( units ) ; begin
54440: LD_INT 0
54442: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
54443: LD_ADDR_VAR 0 2
54447: PUSH
54448: LD_VAR 0 1
54452: PPUSH
54453: LD_INT 2
54455: PUSH
54456: LD_INT 34
54458: PUSH
54459: LD_INT 12
54461: PUSH
54462: EMPTY
54463: LIST
54464: LIST
54465: PUSH
54466: LD_INT 34
54468: PUSH
54469: LD_INT 51
54471: PUSH
54472: EMPTY
54473: LIST
54474: LIST
54475: PUSH
54476: LD_INT 34
54478: PUSH
54479: LD_INT 32
54481: PUSH
54482: EMPTY
54483: LIST
54484: LIST
54485: PUSH
54486: LD_INT 34
54488: PUSH
54489: LD_INT 89
54491: PUSH
54492: EMPTY
54493: LIST
54494: LIST
54495: PUSH
54496: EMPTY
54497: LIST
54498: LIST
54499: LIST
54500: LIST
54501: LIST
54502: PPUSH
54503: CALL_OW 72
54507: ST_TO_ADDR
// end ;
54508: LD_VAR 0 2
54512: RET
// export function Negate ( value ) ; begin
54513: LD_INT 0
54515: PPUSH
// result := not value ;
54516: LD_ADDR_VAR 0 2
54520: PUSH
54521: LD_VAR 0 1
54525: NOT
54526: ST_TO_ADDR
// end ;
54527: LD_VAR 0 2
54531: RET
// export function Inc ( value ) ; begin
54532: LD_INT 0
54534: PPUSH
// result := value + 1 ;
54535: LD_ADDR_VAR 0 2
54539: PUSH
54540: LD_VAR 0 1
54544: PUSH
54545: LD_INT 1
54547: PLUS
54548: ST_TO_ADDR
// end ;
54549: LD_VAR 0 2
54553: RET
// export function Dec ( value ) ; begin
54554: LD_INT 0
54556: PPUSH
// result := value - 1 ;
54557: LD_ADDR_VAR 0 2
54561: PUSH
54562: LD_VAR 0 1
54566: PUSH
54567: LD_INT 1
54569: MINUS
54570: ST_TO_ADDR
// end ;
54571: LD_VAR 0 2
54575: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
54576: LD_INT 0
54578: PPUSH
54579: PPUSH
54580: PPUSH
54581: PPUSH
54582: PPUSH
54583: PPUSH
54584: PPUSH
54585: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
54586: LD_VAR 0 1
54590: PPUSH
54591: LD_VAR 0 2
54595: PPUSH
54596: CALL_OW 488
54600: NOT
54601: PUSH
54602: LD_VAR 0 3
54606: PPUSH
54607: LD_VAR 0 4
54611: PPUSH
54612: CALL_OW 488
54616: NOT
54617: OR
54618: IFFALSE 54631
// begin result := - 1 ;
54620: LD_ADDR_VAR 0 5
54624: PUSH
54625: LD_INT 1
54627: NEG
54628: ST_TO_ADDR
// exit ;
54629: GO 54866
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
54631: LD_ADDR_VAR 0 12
54635: PUSH
54636: LD_VAR 0 1
54640: PPUSH
54641: LD_VAR 0 2
54645: PPUSH
54646: LD_VAR 0 3
54650: PPUSH
54651: LD_VAR 0 4
54655: PPUSH
54656: CALL 53716 0 4
54660: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
54661: LD_ADDR_VAR 0 11
54665: PUSH
54666: LD_VAR 0 1
54670: PPUSH
54671: LD_VAR 0 2
54675: PPUSH
54676: LD_VAR 0 12
54680: PUSH
54681: LD_INT 1
54683: ARRAY
54684: PPUSH
54685: LD_VAR 0 12
54689: PUSH
54690: LD_INT 2
54692: ARRAY
54693: PPUSH
54694: CALL_OW 298
54698: ST_TO_ADDR
// distance := 9999 ;
54699: LD_ADDR_VAR 0 10
54703: PUSH
54704: LD_INT 9999
54706: ST_TO_ADDR
// for i := 0 to 5 do
54707: LD_ADDR_VAR 0 6
54711: PUSH
54712: DOUBLE
54713: LD_INT 0
54715: DEC
54716: ST_TO_ADDR
54717: LD_INT 5
54719: PUSH
54720: FOR_TO
54721: IFFALSE 54864
// begin _x := ShiftX ( x1 , i , centerDist ) ;
54723: LD_ADDR_VAR 0 7
54727: PUSH
54728: LD_VAR 0 1
54732: PPUSH
54733: LD_VAR 0 6
54737: PPUSH
54738: LD_VAR 0 11
54742: PPUSH
54743: CALL_OW 272
54747: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
54748: LD_ADDR_VAR 0 8
54752: PUSH
54753: LD_VAR 0 2
54757: PPUSH
54758: LD_VAR 0 6
54762: PPUSH
54763: LD_VAR 0 11
54767: PPUSH
54768: CALL_OW 273
54772: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
54773: LD_VAR 0 7
54777: PPUSH
54778: LD_VAR 0 8
54782: PPUSH
54783: CALL_OW 488
54787: NOT
54788: IFFALSE 54792
// continue ;
54790: GO 54720
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
54792: LD_ADDR_VAR 0 9
54796: PUSH
54797: LD_VAR 0 12
54801: PUSH
54802: LD_INT 1
54804: ARRAY
54805: PPUSH
54806: LD_VAR 0 12
54810: PUSH
54811: LD_INT 2
54813: ARRAY
54814: PPUSH
54815: LD_VAR 0 7
54819: PPUSH
54820: LD_VAR 0 8
54824: PPUSH
54825: CALL_OW 298
54829: ST_TO_ADDR
// if tmp < distance then
54830: LD_VAR 0 9
54834: PUSH
54835: LD_VAR 0 10
54839: LESS
54840: IFFALSE 54862
// begin result := i ;
54842: LD_ADDR_VAR 0 5
54846: PUSH
54847: LD_VAR 0 6
54851: ST_TO_ADDR
// distance := tmp ;
54852: LD_ADDR_VAR 0 10
54856: PUSH
54857: LD_VAR 0 9
54861: ST_TO_ADDR
// end ; end ;
54862: GO 54720
54864: POP
54865: POP
// end ;
54866: LD_VAR 0 5
54870: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
54871: LD_INT 0
54873: PPUSH
54874: PPUSH
// if not driver or not IsInUnit ( driver ) then
54875: LD_VAR 0 1
54879: NOT
54880: PUSH
54881: LD_VAR 0 1
54885: PPUSH
54886: CALL_OW 310
54890: NOT
54891: OR
54892: IFFALSE 54896
// exit ;
54894: GO 54986
// vehicle := IsInUnit ( driver ) ;
54896: LD_ADDR_VAR 0 3
54900: PUSH
54901: LD_VAR 0 1
54905: PPUSH
54906: CALL_OW 310
54910: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
54911: LD_VAR 0 1
54915: PPUSH
54916: LD_STRING \
54918: PUSH
54919: LD_INT 0
54921: PUSH
54922: LD_INT 0
54924: PUSH
54925: LD_INT 0
54927: PUSH
54928: LD_INT 0
54930: PUSH
54931: LD_INT 0
54933: PUSH
54934: LD_INT 0
54936: PUSH
54937: EMPTY
54938: LIST
54939: LIST
54940: LIST
54941: LIST
54942: LIST
54943: LIST
54944: LIST
54945: PUSH
54946: LD_STRING E
54948: PUSH
54949: LD_INT 0
54951: PUSH
54952: LD_INT 0
54954: PUSH
54955: LD_VAR 0 3
54959: PUSH
54960: LD_INT 0
54962: PUSH
54963: LD_INT 0
54965: PUSH
54966: LD_INT 0
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: LIST
54973: LIST
54974: LIST
54975: LIST
54976: LIST
54977: PUSH
54978: EMPTY
54979: LIST
54980: LIST
54981: PPUSH
54982: CALL_OW 446
// end ;
54986: LD_VAR 0 2
54990: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
54991: LD_INT 0
54993: PPUSH
54994: PPUSH
// if not driver or not IsInUnit ( driver ) then
54995: LD_VAR 0 1
54999: NOT
55000: PUSH
55001: LD_VAR 0 1
55005: PPUSH
55006: CALL_OW 310
55010: NOT
55011: OR
55012: IFFALSE 55016
// exit ;
55014: GO 55106
// vehicle := IsInUnit ( driver ) ;
55016: LD_ADDR_VAR 0 3
55020: PUSH
55021: LD_VAR 0 1
55025: PPUSH
55026: CALL_OW 310
55030: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
55031: LD_VAR 0 1
55035: PPUSH
55036: LD_STRING \
55038: PUSH
55039: LD_INT 0
55041: PUSH
55042: LD_INT 0
55044: PUSH
55045: LD_INT 0
55047: PUSH
55048: LD_INT 0
55050: PUSH
55051: LD_INT 0
55053: PUSH
55054: LD_INT 0
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: LIST
55061: LIST
55062: LIST
55063: LIST
55064: LIST
55065: PUSH
55066: LD_STRING E
55068: PUSH
55069: LD_INT 0
55071: PUSH
55072: LD_INT 0
55074: PUSH
55075: LD_VAR 0 3
55079: PUSH
55080: LD_INT 0
55082: PUSH
55083: LD_INT 0
55085: PUSH
55086: LD_INT 0
55088: PUSH
55089: EMPTY
55090: LIST
55091: LIST
55092: LIST
55093: LIST
55094: LIST
55095: LIST
55096: LIST
55097: PUSH
55098: EMPTY
55099: LIST
55100: LIST
55101: PPUSH
55102: CALL_OW 447
// end ;
55106: LD_VAR 0 2
55110: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
55111: LD_INT 0
55113: PPUSH
55114: PPUSH
55115: PPUSH
// tmp := [ ] ;
55116: LD_ADDR_VAR 0 5
55120: PUSH
55121: EMPTY
55122: ST_TO_ADDR
// for i in units do
55123: LD_ADDR_VAR 0 4
55127: PUSH
55128: LD_VAR 0 1
55132: PUSH
55133: FOR_IN
55134: IFFALSE 55172
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
55136: LD_ADDR_VAR 0 5
55140: PUSH
55141: LD_VAR 0 5
55145: PPUSH
55146: LD_VAR 0 5
55150: PUSH
55151: LD_INT 1
55153: PLUS
55154: PPUSH
55155: LD_VAR 0 4
55159: PPUSH
55160: CALL_OW 256
55164: PPUSH
55165: CALL_OW 2
55169: ST_TO_ADDR
55170: GO 55133
55172: POP
55173: POP
// if not tmp then
55174: LD_VAR 0 5
55178: NOT
55179: IFFALSE 55183
// exit ;
55181: GO 55231
// if asc then
55183: LD_VAR 0 2
55187: IFFALSE 55211
// result := SortListByListAsc ( units , tmp ) else
55189: LD_ADDR_VAR 0 3
55193: PUSH
55194: LD_VAR 0 1
55198: PPUSH
55199: LD_VAR 0 5
55203: PPUSH
55204: CALL_OW 76
55208: ST_TO_ADDR
55209: GO 55231
// result := SortListByListDesc ( units , tmp ) ;
55211: LD_ADDR_VAR 0 3
55215: PUSH
55216: LD_VAR 0 1
55220: PPUSH
55221: LD_VAR 0 5
55225: PPUSH
55226: CALL_OW 77
55230: ST_TO_ADDR
// end ;
55231: LD_VAR 0 3
55235: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
55236: LD_INT 0
55238: PPUSH
55239: PPUSH
// task := GetTaskList ( mech ) ;
55240: LD_ADDR_VAR 0 4
55244: PUSH
55245: LD_VAR 0 1
55249: PPUSH
55250: CALL_OW 437
55254: ST_TO_ADDR
// if not task then
55255: LD_VAR 0 4
55259: NOT
55260: IFFALSE 55264
// exit ;
55262: GO 55306
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
55264: LD_ADDR_VAR 0 3
55268: PUSH
55269: LD_VAR 0 4
55273: PUSH
55274: LD_INT 1
55276: ARRAY
55277: PUSH
55278: LD_INT 1
55280: ARRAY
55281: PUSH
55282: LD_STRING r
55284: EQUAL
55285: PUSH
55286: LD_VAR 0 4
55290: PUSH
55291: LD_INT 1
55293: ARRAY
55294: PUSH
55295: LD_INT 4
55297: ARRAY
55298: PUSH
55299: LD_VAR 0 2
55303: EQUAL
55304: AND
55305: ST_TO_ADDR
// end ;
55306: LD_VAR 0 3
55310: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
55311: LD_INT 0
55313: PPUSH
// SetDir ( unit , d ) ;
55314: LD_VAR 0 1
55318: PPUSH
55319: LD_VAR 0 4
55323: PPUSH
55324: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
55328: LD_ADDR_VAR 0 6
55332: PUSH
55333: LD_VAR 0 1
55337: PPUSH
55338: LD_VAR 0 2
55342: PPUSH
55343: LD_VAR 0 3
55347: PPUSH
55348: LD_VAR 0 5
55352: PPUSH
55353: CALL_OW 48
55357: ST_TO_ADDR
// end ;
55358: LD_VAR 0 6
55362: RET
// export function ToNaturalNumber ( number ) ; begin
55363: LD_INT 0
55365: PPUSH
// result := number div 1 ;
55366: LD_ADDR_VAR 0 2
55370: PUSH
55371: LD_VAR 0 1
55375: PUSH
55376: LD_INT 1
55378: DIV
55379: ST_TO_ADDR
// if number < 0 then
55380: LD_VAR 0 1
55384: PUSH
55385: LD_INT 0
55387: LESS
55388: IFFALSE 55398
// result := 0 ;
55390: LD_ADDR_VAR 0 2
55394: PUSH
55395: LD_INT 0
55397: ST_TO_ADDR
// end ;
55398: LD_VAR 0 2
55402: RET
// export function SortByClass ( units , class ) ; var un ; begin
55403: LD_INT 0
55405: PPUSH
55406: PPUSH
// if not units or not class then
55407: LD_VAR 0 1
55411: NOT
55412: PUSH
55413: LD_VAR 0 2
55417: NOT
55418: OR
55419: IFFALSE 55423
// exit ;
55421: GO 55518
// result := [ ] ;
55423: LD_ADDR_VAR 0 3
55427: PUSH
55428: EMPTY
55429: ST_TO_ADDR
// for un in units do
55430: LD_ADDR_VAR 0 4
55434: PUSH
55435: LD_VAR 0 1
55439: PUSH
55440: FOR_IN
55441: IFFALSE 55516
// if GetClass ( un ) = class then
55443: LD_VAR 0 4
55447: PPUSH
55448: CALL_OW 257
55452: PUSH
55453: LD_VAR 0 2
55457: EQUAL
55458: IFFALSE 55485
// result := Insert ( result , 1 , un ) else
55460: LD_ADDR_VAR 0 3
55464: PUSH
55465: LD_VAR 0 3
55469: PPUSH
55470: LD_INT 1
55472: PPUSH
55473: LD_VAR 0 4
55477: PPUSH
55478: CALL_OW 2
55482: ST_TO_ADDR
55483: GO 55514
// result := Replace ( result , result + 1 , un ) ;
55485: LD_ADDR_VAR 0 3
55489: PUSH
55490: LD_VAR 0 3
55494: PPUSH
55495: LD_VAR 0 3
55499: PUSH
55500: LD_INT 1
55502: PLUS
55503: PPUSH
55504: LD_VAR 0 4
55508: PPUSH
55509: CALL_OW 1
55513: ST_TO_ADDR
55514: GO 55440
55516: POP
55517: POP
// end ;
55518: LD_VAR 0 3
55522: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
55523: LD_INT 0
55525: PPUSH
55526: PPUSH
55527: PPUSH
55528: PPUSH
55529: PPUSH
55530: PPUSH
55531: PPUSH
// result := [ ] ;
55532: LD_ADDR_VAR 0 4
55536: PUSH
55537: EMPTY
55538: ST_TO_ADDR
// if x - r < 0 then
55539: LD_VAR 0 1
55543: PUSH
55544: LD_VAR 0 3
55548: MINUS
55549: PUSH
55550: LD_INT 0
55552: LESS
55553: IFFALSE 55565
// min_x := 0 else
55555: LD_ADDR_VAR 0 8
55559: PUSH
55560: LD_INT 0
55562: ST_TO_ADDR
55563: GO 55581
// min_x := x - r ;
55565: LD_ADDR_VAR 0 8
55569: PUSH
55570: LD_VAR 0 1
55574: PUSH
55575: LD_VAR 0 3
55579: MINUS
55580: ST_TO_ADDR
// if y - r < 0 then
55581: LD_VAR 0 2
55585: PUSH
55586: LD_VAR 0 3
55590: MINUS
55591: PUSH
55592: LD_INT 0
55594: LESS
55595: IFFALSE 55607
// min_y := 0 else
55597: LD_ADDR_VAR 0 7
55601: PUSH
55602: LD_INT 0
55604: ST_TO_ADDR
55605: GO 55623
// min_y := y - r ;
55607: LD_ADDR_VAR 0 7
55611: PUSH
55612: LD_VAR 0 2
55616: PUSH
55617: LD_VAR 0 3
55621: MINUS
55622: ST_TO_ADDR
// max_x := x + r ;
55623: LD_ADDR_VAR 0 9
55627: PUSH
55628: LD_VAR 0 1
55632: PUSH
55633: LD_VAR 0 3
55637: PLUS
55638: ST_TO_ADDR
// max_y := y + r ;
55639: LD_ADDR_VAR 0 10
55643: PUSH
55644: LD_VAR 0 2
55648: PUSH
55649: LD_VAR 0 3
55653: PLUS
55654: ST_TO_ADDR
// for _x = min_x to max_x do
55655: LD_ADDR_VAR 0 5
55659: PUSH
55660: DOUBLE
55661: LD_VAR 0 8
55665: DEC
55666: ST_TO_ADDR
55667: LD_VAR 0 9
55671: PUSH
55672: FOR_TO
55673: IFFALSE 55774
// for _y = min_y to max_y do
55675: LD_ADDR_VAR 0 6
55679: PUSH
55680: DOUBLE
55681: LD_VAR 0 7
55685: DEC
55686: ST_TO_ADDR
55687: LD_VAR 0 10
55691: PUSH
55692: FOR_TO
55693: IFFALSE 55770
// begin if not ValidHex ( _x , _y ) then
55695: LD_VAR 0 5
55699: PPUSH
55700: LD_VAR 0 6
55704: PPUSH
55705: CALL_OW 488
55709: NOT
55710: IFFALSE 55714
// continue ;
55712: GO 55692
// if GetResourceTypeXY ( _x , _y ) then
55714: LD_VAR 0 5
55718: PPUSH
55719: LD_VAR 0 6
55723: PPUSH
55724: CALL_OW 283
55728: IFFALSE 55768
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
55730: LD_ADDR_VAR 0 4
55734: PUSH
55735: LD_VAR 0 4
55739: PPUSH
55740: LD_VAR 0 4
55744: PUSH
55745: LD_INT 1
55747: PLUS
55748: PPUSH
55749: LD_VAR 0 5
55753: PUSH
55754: LD_VAR 0 6
55758: PUSH
55759: EMPTY
55760: LIST
55761: LIST
55762: PPUSH
55763: CALL_OW 1
55767: ST_TO_ADDR
// end ;
55768: GO 55692
55770: POP
55771: POP
55772: GO 55672
55774: POP
55775: POP
// end ;
55776: LD_VAR 0 4
55780: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
55781: LD_INT 0
55783: PPUSH
55784: PPUSH
55785: PPUSH
55786: PPUSH
55787: PPUSH
55788: PPUSH
55789: PPUSH
55790: PPUSH
// if not units then
55791: LD_VAR 0 1
55795: NOT
55796: IFFALSE 55800
// exit ;
55798: GO 56328
// result := UnitFilter ( units , [ f_ok ] ) ;
55800: LD_ADDR_VAR 0 3
55804: PUSH
55805: LD_VAR 0 1
55809: PPUSH
55810: LD_INT 50
55812: PUSH
55813: EMPTY
55814: LIST
55815: PPUSH
55816: CALL_OW 72
55820: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
55821: LD_ADDR_VAR 0 8
55825: PUSH
55826: LD_VAR 0 1
55830: PUSH
55831: LD_INT 1
55833: ARRAY
55834: PPUSH
55835: CALL_OW 255
55839: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
55840: LD_ADDR_VAR 0 10
55844: PUSH
55845: LD_INT 29
55847: PUSH
55848: LD_INT 91
55850: PUSH
55851: LD_INT 49
55853: PUSH
55854: EMPTY
55855: LIST
55856: LIST
55857: LIST
55858: ST_TO_ADDR
// if not result then
55859: LD_VAR 0 3
55863: NOT
55864: IFFALSE 55868
// exit ;
55866: GO 56328
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
55868: LD_ADDR_VAR 0 5
55872: PUSH
55873: LD_INT 81
55875: PUSH
55876: LD_VAR 0 8
55880: PUSH
55881: EMPTY
55882: LIST
55883: LIST
55884: PPUSH
55885: CALL_OW 69
55889: ST_TO_ADDR
// for i in result do
55890: LD_ADDR_VAR 0 4
55894: PUSH
55895: LD_VAR 0 3
55899: PUSH
55900: FOR_IN
55901: IFFALSE 56326
// begin tag := GetTag ( i ) + 1 ;
55903: LD_ADDR_VAR 0 9
55907: PUSH
55908: LD_VAR 0 4
55912: PPUSH
55913: CALL_OW 110
55917: PUSH
55918: LD_INT 1
55920: PLUS
55921: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
55922: LD_ADDR_VAR 0 7
55926: PUSH
55927: LD_VAR 0 4
55931: PPUSH
55932: CALL_OW 250
55936: PPUSH
55937: LD_VAR 0 4
55941: PPUSH
55942: CALL_OW 251
55946: PPUSH
55947: LD_INT 4
55949: PPUSH
55950: CALL 55523 0 3
55954: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
55955: LD_VAR 0 4
55959: PPUSH
55960: CALL_OW 247
55964: PUSH
55965: LD_INT 2
55967: EQUAL
55968: PUSH
55969: LD_VAR 0 7
55973: PUSH
55974: LD_INT 2
55976: GREATER
55977: AND
55978: PUSH
55979: LD_VAR 0 4
55983: PPUSH
55984: CALL_OW 264
55988: PUSH
55989: LD_VAR 0 10
55993: IN
55994: NOT
55995: AND
55996: IFFALSE 56035
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
55998: LD_VAR 0 4
56002: PPUSH
56003: LD_VAR 0 7
56007: PUSH
56008: LD_INT 1
56010: ARRAY
56011: PUSH
56012: LD_INT 1
56014: ARRAY
56015: PPUSH
56016: LD_VAR 0 7
56020: PUSH
56021: LD_INT 1
56023: ARRAY
56024: PUSH
56025: LD_INT 2
56027: ARRAY
56028: PPUSH
56029: CALL_OW 116
56033: GO 56324
// if path > tag then
56035: LD_VAR 0 2
56039: PUSH
56040: LD_VAR 0 9
56044: GREATER
56045: IFFALSE 56253
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
56047: LD_ADDR_VAR 0 6
56051: PUSH
56052: LD_VAR 0 5
56056: PPUSH
56057: LD_INT 91
56059: PUSH
56060: LD_VAR 0 4
56064: PUSH
56065: LD_INT 8
56067: PUSH
56068: EMPTY
56069: LIST
56070: LIST
56071: LIST
56072: PPUSH
56073: CALL_OW 72
56077: ST_TO_ADDR
// if nearEnemy then
56078: LD_VAR 0 6
56082: IFFALSE 56151
// begin if GetWeapon ( i ) = ru_time_lapser then
56084: LD_VAR 0 4
56088: PPUSH
56089: CALL_OW 264
56093: PUSH
56094: LD_INT 49
56096: EQUAL
56097: IFFALSE 56125
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
56099: LD_VAR 0 4
56103: PPUSH
56104: LD_VAR 0 6
56108: PPUSH
56109: LD_VAR 0 4
56113: PPUSH
56114: CALL_OW 74
56118: PPUSH
56119: CALL_OW 112
56123: GO 56149
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
56125: LD_VAR 0 4
56129: PPUSH
56130: LD_VAR 0 6
56134: PPUSH
56135: LD_VAR 0 4
56139: PPUSH
56140: CALL_OW 74
56144: PPUSH
56145: CALL 57399 0 2
// end else
56149: GO 56251
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
56151: LD_VAR 0 4
56155: PPUSH
56156: LD_VAR 0 2
56160: PUSH
56161: LD_VAR 0 9
56165: ARRAY
56166: PUSH
56167: LD_INT 1
56169: ARRAY
56170: PPUSH
56171: LD_VAR 0 2
56175: PUSH
56176: LD_VAR 0 9
56180: ARRAY
56181: PUSH
56182: LD_INT 2
56184: ARRAY
56185: PPUSH
56186: CALL_OW 297
56190: PUSH
56191: LD_INT 6
56193: GREATER
56194: IFFALSE 56237
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
56196: LD_VAR 0 4
56200: PPUSH
56201: LD_VAR 0 2
56205: PUSH
56206: LD_VAR 0 9
56210: ARRAY
56211: PUSH
56212: LD_INT 1
56214: ARRAY
56215: PPUSH
56216: LD_VAR 0 2
56220: PUSH
56221: LD_VAR 0 9
56225: ARRAY
56226: PUSH
56227: LD_INT 2
56229: ARRAY
56230: PPUSH
56231: CALL_OW 114
56235: GO 56251
// SetTag ( i , tag ) ;
56237: LD_VAR 0 4
56241: PPUSH
56242: LD_VAR 0 9
56246: PPUSH
56247: CALL_OW 109
// end else
56251: GO 56324
// if enemy then
56253: LD_VAR 0 5
56257: IFFALSE 56324
// begin if GetWeapon ( i ) = ru_time_lapser then
56259: LD_VAR 0 4
56263: PPUSH
56264: CALL_OW 264
56268: PUSH
56269: LD_INT 49
56271: EQUAL
56272: IFFALSE 56300
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
56274: LD_VAR 0 4
56278: PPUSH
56279: LD_VAR 0 5
56283: PPUSH
56284: LD_VAR 0 4
56288: PPUSH
56289: CALL_OW 74
56293: PPUSH
56294: CALL_OW 112
56298: GO 56324
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
56300: LD_VAR 0 4
56304: PPUSH
56305: LD_VAR 0 5
56309: PPUSH
56310: LD_VAR 0 4
56314: PPUSH
56315: CALL_OW 74
56319: PPUSH
56320: CALL 57399 0 2
// end ; end ;
56324: GO 55900
56326: POP
56327: POP
// end ;
56328: LD_VAR 0 3
56332: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
56333: LD_INT 0
56335: PPUSH
56336: PPUSH
56337: PPUSH
// if not unit or IsInUnit ( unit ) then
56338: LD_VAR 0 1
56342: NOT
56343: PUSH
56344: LD_VAR 0 1
56348: PPUSH
56349: CALL_OW 310
56353: OR
56354: IFFALSE 56358
// exit ;
56356: GO 56449
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
56358: LD_ADDR_VAR 0 4
56362: PUSH
56363: LD_VAR 0 1
56367: PPUSH
56368: CALL_OW 250
56372: PPUSH
56373: LD_VAR 0 2
56377: PPUSH
56378: LD_INT 1
56380: PPUSH
56381: CALL_OW 272
56385: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
56386: LD_ADDR_VAR 0 5
56390: PUSH
56391: LD_VAR 0 1
56395: PPUSH
56396: CALL_OW 251
56400: PPUSH
56401: LD_VAR 0 2
56405: PPUSH
56406: LD_INT 1
56408: PPUSH
56409: CALL_OW 273
56413: ST_TO_ADDR
// if ValidHex ( x , y ) then
56414: LD_VAR 0 4
56418: PPUSH
56419: LD_VAR 0 5
56423: PPUSH
56424: CALL_OW 488
56428: IFFALSE 56449
// ComTurnXY ( unit , x , y ) ;
56430: LD_VAR 0 1
56434: PPUSH
56435: LD_VAR 0 4
56439: PPUSH
56440: LD_VAR 0 5
56444: PPUSH
56445: CALL_OW 118
// end ;
56449: LD_VAR 0 3
56453: RET
// export function SeeUnits ( side , units ) ; var i ; begin
56454: LD_INT 0
56456: PPUSH
56457: PPUSH
// result := false ;
56458: LD_ADDR_VAR 0 3
56462: PUSH
56463: LD_INT 0
56465: ST_TO_ADDR
// if not units then
56466: LD_VAR 0 2
56470: NOT
56471: IFFALSE 56475
// exit ;
56473: GO 56520
// for i in units do
56475: LD_ADDR_VAR 0 4
56479: PUSH
56480: LD_VAR 0 2
56484: PUSH
56485: FOR_IN
56486: IFFALSE 56518
// if See ( side , i ) then
56488: LD_VAR 0 1
56492: PPUSH
56493: LD_VAR 0 4
56497: PPUSH
56498: CALL_OW 292
56502: IFFALSE 56516
// begin result := true ;
56504: LD_ADDR_VAR 0 3
56508: PUSH
56509: LD_INT 1
56511: ST_TO_ADDR
// exit ;
56512: POP
56513: POP
56514: GO 56520
// end ;
56516: GO 56485
56518: POP
56519: POP
// end ;
56520: LD_VAR 0 3
56524: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
56525: LD_INT 0
56527: PPUSH
56528: PPUSH
56529: PPUSH
56530: PPUSH
// if not unit or not points then
56531: LD_VAR 0 1
56535: NOT
56536: PUSH
56537: LD_VAR 0 2
56541: NOT
56542: OR
56543: IFFALSE 56547
// exit ;
56545: GO 56637
// dist := 99999 ;
56547: LD_ADDR_VAR 0 5
56551: PUSH
56552: LD_INT 99999
56554: ST_TO_ADDR
// for i in points do
56555: LD_ADDR_VAR 0 4
56559: PUSH
56560: LD_VAR 0 2
56564: PUSH
56565: FOR_IN
56566: IFFALSE 56635
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
56568: LD_ADDR_VAR 0 6
56572: PUSH
56573: LD_VAR 0 1
56577: PPUSH
56578: LD_VAR 0 4
56582: PUSH
56583: LD_INT 1
56585: ARRAY
56586: PPUSH
56587: LD_VAR 0 4
56591: PUSH
56592: LD_INT 2
56594: ARRAY
56595: PPUSH
56596: CALL_OW 297
56600: ST_TO_ADDR
// if tmpDist < dist then
56601: LD_VAR 0 6
56605: PUSH
56606: LD_VAR 0 5
56610: LESS
56611: IFFALSE 56633
// begin result := i ;
56613: LD_ADDR_VAR 0 3
56617: PUSH
56618: LD_VAR 0 4
56622: ST_TO_ADDR
// dist := tmpDist ;
56623: LD_ADDR_VAR 0 5
56627: PUSH
56628: LD_VAR 0 6
56632: ST_TO_ADDR
// end ; end ;
56633: GO 56565
56635: POP
56636: POP
// end ;
56637: LD_VAR 0 3
56641: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
56642: LD_INT 0
56644: PPUSH
// uc_side := side ;
56645: LD_ADDR_OWVAR 20
56649: PUSH
56650: LD_VAR 0 1
56654: ST_TO_ADDR
// uc_nation := 3 ;
56655: LD_ADDR_OWVAR 21
56659: PUSH
56660: LD_INT 3
56662: ST_TO_ADDR
// vc_chassis := 25 ;
56663: LD_ADDR_OWVAR 37
56667: PUSH
56668: LD_INT 25
56670: ST_TO_ADDR
// vc_engine := engine_siberite ;
56671: LD_ADDR_OWVAR 39
56675: PUSH
56676: LD_INT 3
56678: ST_TO_ADDR
// vc_control := control_computer ;
56679: LD_ADDR_OWVAR 38
56683: PUSH
56684: LD_INT 3
56686: ST_TO_ADDR
// vc_weapon := 59 ;
56687: LD_ADDR_OWVAR 40
56691: PUSH
56692: LD_INT 59
56694: ST_TO_ADDR
// result := CreateVehicle ;
56695: LD_ADDR_VAR 0 5
56699: PUSH
56700: CALL_OW 45
56704: ST_TO_ADDR
// SetDir ( result , d ) ;
56705: LD_VAR 0 5
56709: PPUSH
56710: LD_VAR 0 4
56714: PPUSH
56715: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
56719: LD_VAR 0 5
56723: PPUSH
56724: LD_VAR 0 2
56728: PPUSH
56729: LD_VAR 0 3
56733: PPUSH
56734: LD_INT 0
56736: PPUSH
56737: CALL_OW 48
// end ;
56741: LD_VAR 0 5
56745: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
56746: LD_INT 0
56748: PPUSH
56749: PPUSH
56750: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
56751: LD_ADDR_VAR 0 2
56755: PUSH
56756: LD_INT 0
56758: PUSH
56759: LD_INT 0
56761: PUSH
56762: LD_INT 0
56764: PUSH
56765: LD_INT 0
56767: PUSH
56768: EMPTY
56769: LIST
56770: LIST
56771: LIST
56772: LIST
56773: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
56774: LD_VAR 0 1
56778: NOT
56779: PUSH
56780: LD_VAR 0 1
56784: PPUSH
56785: CALL_OW 264
56789: PUSH
56790: LD_INT 12
56792: PUSH
56793: LD_INT 51
56795: PUSH
56796: LD_INT 32
56798: PUSH
56799: LD_INT 89
56801: PUSH
56802: EMPTY
56803: LIST
56804: LIST
56805: LIST
56806: LIST
56807: IN
56808: NOT
56809: OR
56810: IFFALSE 56814
// exit ;
56812: GO 56912
// for i := 1 to 3 do
56814: LD_ADDR_VAR 0 3
56818: PUSH
56819: DOUBLE
56820: LD_INT 1
56822: DEC
56823: ST_TO_ADDR
56824: LD_INT 3
56826: PUSH
56827: FOR_TO
56828: IFFALSE 56910
// begin tmp := GetCargo ( cargo , i ) ;
56830: LD_ADDR_VAR 0 4
56834: PUSH
56835: LD_VAR 0 1
56839: PPUSH
56840: LD_VAR 0 3
56844: PPUSH
56845: CALL_OW 289
56849: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
56850: LD_ADDR_VAR 0 2
56854: PUSH
56855: LD_VAR 0 2
56859: PPUSH
56860: LD_VAR 0 3
56864: PPUSH
56865: LD_VAR 0 4
56869: PPUSH
56870: CALL_OW 1
56874: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
56875: LD_ADDR_VAR 0 2
56879: PUSH
56880: LD_VAR 0 2
56884: PPUSH
56885: LD_INT 4
56887: PPUSH
56888: LD_VAR 0 2
56892: PUSH
56893: LD_INT 4
56895: ARRAY
56896: PUSH
56897: LD_VAR 0 4
56901: PLUS
56902: PPUSH
56903: CALL_OW 1
56907: ST_TO_ADDR
// end ;
56908: GO 56827
56910: POP
56911: POP
// end ;
56912: LD_VAR 0 2
56916: RET
// export function Length ( array ) ; begin
56917: LD_INT 0
56919: PPUSH
// result := array + 0 ;
56920: LD_ADDR_VAR 0 2
56924: PUSH
56925: LD_VAR 0 1
56929: PUSH
56930: LD_INT 0
56932: PLUS
56933: ST_TO_ADDR
// end ;
56934: LD_VAR 0 2
56938: RET
// export function PrepareArray ( array ) ; begin
56939: LD_INT 0
56941: PPUSH
// result := array diff 0 ;
56942: LD_ADDR_VAR 0 2
56946: PUSH
56947: LD_VAR 0 1
56951: PUSH
56952: LD_INT 0
56954: DIFF
56955: ST_TO_ADDR
// if not result [ 1 ] then
56956: LD_VAR 0 2
56960: PUSH
56961: LD_INT 1
56963: ARRAY
56964: NOT
56965: IFFALSE 56985
// result := Delete ( result , 1 ) ;
56967: LD_ADDR_VAR 0 2
56971: PUSH
56972: LD_VAR 0 2
56976: PPUSH
56977: LD_INT 1
56979: PPUSH
56980: CALL_OW 3
56984: ST_TO_ADDR
// end ;
56985: LD_VAR 0 2
56989: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
56990: LD_INT 0
56992: PPUSH
56993: PPUSH
56994: PPUSH
56995: PPUSH
// sibRocketRange := 25 ;
56996: LD_ADDR_VAR 0 6
57000: PUSH
57001: LD_INT 25
57003: ST_TO_ADDR
// result := false ;
57004: LD_ADDR_VAR 0 4
57008: PUSH
57009: LD_INT 0
57011: ST_TO_ADDR
// for i := 0 to 5 do
57012: LD_ADDR_VAR 0 5
57016: PUSH
57017: DOUBLE
57018: LD_INT 0
57020: DEC
57021: ST_TO_ADDR
57022: LD_INT 5
57024: PUSH
57025: FOR_TO
57026: IFFALSE 57093
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
57028: LD_VAR 0 1
57032: PPUSH
57033: LD_VAR 0 5
57037: PPUSH
57038: LD_VAR 0 6
57042: PPUSH
57043: CALL_OW 272
57047: PPUSH
57048: LD_VAR 0 2
57052: PPUSH
57053: LD_VAR 0 5
57057: PPUSH
57058: LD_VAR 0 6
57062: PPUSH
57063: CALL_OW 273
57067: PPUSH
57068: LD_VAR 0 3
57072: PPUSH
57073: CALL_OW 309
57077: IFFALSE 57091
// begin result := true ;
57079: LD_ADDR_VAR 0 4
57083: PUSH
57084: LD_INT 1
57086: ST_TO_ADDR
// exit ;
57087: POP
57088: POP
57089: GO 57095
// end ;
57091: GO 57025
57093: POP
57094: POP
// end ;
57095: LD_VAR 0 4
57099: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
57100: LD_INT 0
57102: PPUSH
57103: PPUSH
57104: PPUSH
// if btype = b_depot then
57105: LD_VAR 0 2
57109: PUSH
57110: LD_INT 0
57112: EQUAL
57113: IFFALSE 57125
// begin result := true ;
57115: LD_ADDR_VAR 0 3
57119: PUSH
57120: LD_INT 1
57122: ST_TO_ADDR
// exit ;
57123: GO 57241
// end ; pom := GetBase ( depot ) ;
57125: LD_ADDR_VAR 0 4
57129: PUSH
57130: LD_VAR 0 1
57134: PPUSH
57135: CALL_OW 274
57139: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
57140: LD_ADDR_VAR 0 5
57144: PUSH
57145: LD_VAR 0 2
57149: PPUSH
57150: LD_VAR 0 1
57154: PPUSH
57155: CALL_OW 248
57159: PPUSH
57160: CALL_OW 450
57164: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
57165: LD_ADDR_VAR 0 3
57169: PUSH
57170: LD_VAR 0 4
57174: PPUSH
57175: LD_INT 1
57177: PPUSH
57178: CALL_OW 275
57182: PUSH
57183: LD_VAR 0 5
57187: PUSH
57188: LD_INT 1
57190: ARRAY
57191: GREATEREQUAL
57192: PUSH
57193: LD_VAR 0 4
57197: PPUSH
57198: LD_INT 2
57200: PPUSH
57201: CALL_OW 275
57205: PUSH
57206: LD_VAR 0 5
57210: PUSH
57211: LD_INT 2
57213: ARRAY
57214: GREATEREQUAL
57215: AND
57216: PUSH
57217: LD_VAR 0 4
57221: PPUSH
57222: LD_INT 3
57224: PPUSH
57225: CALL_OW 275
57229: PUSH
57230: LD_VAR 0 5
57234: PUSH
57235: LD_INT 3
57237: ARRAY
57238: GREATEREQUAL
57239: AND
57240: ST_TO_ADDR
// end ;
57241: LD_VAR 0 3
57245: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
57246: LD_INT 0
57248: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
57249: LD_VAR 0 1
57253: PPUSH
57254: LD_VAR 0 2
57258: PPUSH
57259: LD_INT 0
57261: PPUSH
57262: LD_INT 0
57264: PPUSH
57265: LD_INT 1
57267: PPUSH
57268: LD_INT 0
57270: PPUSH
57271: CALL_OW 587
// end ;
57275: LD_VAR 0 3
57279: RET
// export function CenterOnNow ( unit ) ; begin
57280: LD_INT 0
57282: PPUSH
// result := IsInUnit ( unit ) ;
57283: LD_ADDR_VAR 0 2
57287: PUSH
57288: LD_VAR 0 1
57292: PPUSH
57293: CALL_OW 310
57297: ST_TO_ADDR
// if not result then
57298: LD_VAR 0 2
57302: NOT
57303: IFFALSE 57315
// result := unit ;
57305: LD_ADDR_VAR 0 2
57309: PUSH
57310: LD_VAR 0 1
57314: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
57315: LD_VAR 0 1
57319: PPUSH
57320: CALL_OW 87
// end ;
57324: LD_VAR 0 2
57328: RET
// export function ComMoveHex ( unit , hex ) ; begin
57329: LD_INT 0
57331: PPUSH
// if not hex then
57332: LD_VAR 0 2
57336: NOT
57337: IFFALSE 57341
// exit ;
57339: GO 57394
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
57341: LD_VAR 0 2
57345: PUSH
57346: LD_INT 1
57348: ARRAY
57349: PPUSH
57350: LD_VAR 0 2
57354: PUSH
57355: LD_INT 2
57357: ARRAY
57358: PPUSH
57359: CALL_OW 428
57363: IFFALSE 57367
// exit ;
57365: GO 57394
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
57367: LD_VAR 0 1
57371: PPUSH
57372: LD_VAR 0 2
57376: PUSH
57377: LD_INT 1
57379: ARRAY
57380: PPUSH
57381: LD_VAR 0 2
57385: PUSH
57386: LD_INT 2
57388: ARRAY
57389: PPUSH
57390: CALL_OW 111
// end ;
57394: LD_VAR 0 3
57398: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
57399: LD_INT 0
57401: PPUSH
57402: PPUSH
57403: PPUSH
// if not unit or not enemy then
57404: LD_VAR 0 1
57408: NOT
57409: PUSH
57410: LD_VAR 0 2
57414: NOT
57415: OR
57416: IFFALSE 57420
// exit ;
57418: GO 57544
// x := GetX ( enemy ) ;
57420: LD_ADDR_VAR 0 4
57424: PUSH
57425: LD_VAR 0 2
57429: PPUSH
57430: CALL_OW 250
57434: ST_TO_ADDR
// y := GetY ( enemy ) ;
57435: LD_ADDR_VAR 0 5
57439: PUSH
57440: LD_VAR 0 2
57444: PPUSH
57445: CALL_OW 251
57449: ST_TO_ADDR
// if ValidHex ( x , y ) then
57450: LD_VAR 0 4
57454: PPUSH
57455: LD_VAR 0 5
57459: PPUSH
57460: CALL_OW 488
57464: IFFALSE 57544
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
57466: LD_VAR 0 2
57470: PPUSH
57471: CALL_OW 247
57475: PUSH
57476: LD_INT 3
57478: PUSH
57479: LD_INT 2
57481: PUSH
57482: EMPTY
57483: LIST
57484: LIST
57485: IN
57486: PUSH
57487: LD_VAR 0 1
57491: PPUSH
57492: CALL_OW 255
57496: PPUSH
57497: LD_VAR 0 2
57501: PPUSH
57502: CALL_OW 292
57506: OR
57507: IFFALSE 57525
// ComAttackUnit ( unit , enemy ) else
57509: LD_VAR 0 1
57513: PPUSH
57514: LD_VAR 0 2
57518: PPUSH
57519: CALL_OW 115
57523: GO 57544
// ComAgressiveMove ( unit , x , y ) ;
57525: LD_VAR 0 1
57529: PPUSH
57530: LD_VAR 0 4
57534: PPUSH
57535: LD_VAR 0 5
57539: PPUSH
57540: CALL_OW 114
// end ;
57544: LD_VAR 0 3
57548: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
57549: LD_INT 0
57551: PPUSH
57552: PPUSH
57553: PPUSH
// list := AreaToList ( area , 0 ) ;
57554: LD_ADDR_VAR 0 5
57558: PUSH
57559: LD_VAR 0 1
57563: PPUSH
57564: LD_INT 0
57566: PPUSH
57567: CALL_OW 517
57571: ST_TO_ADDR
// if not list then
57572: LD_VAR 0 5
57576: NOT
57577: IFFALSE 57581
// exit ;
57579: GO 57711
// if all then
57581: LD_VAR 0 2
57585: IFFALSE 57673
// begin for i := 1 to list [ 1 ] do
57587: LD_ADDR_VAR 0 4
57591: PUSH
57592: DOUBLE
57593: LD_INT 1
57595: DEC
57596: ST_TO_ADDR
57597: LD_VAR 0 5
57601: PUSH
57602: LD_INT 1
57604: ARRAY
57605: PUSH
57606: FOR_TO
57607: IFFALSE 57669
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
57609: LD_ADDR_VAR 0 3
57613: PUSH
57614: LD_VAR 0 3
57618: PPUSH
57619: LD_VAR 0 3
57623: PUSH
57624: LD_INT 1
57626: PLUS
57627: PPUSH
57628: LD_VAR 0 5
57632: PUSH
57633: LD_INT 1
57635: ARRAY
57636: PUSH
57637: LD_VAR 0 4
57641: ARRAY
57642: PUSH
57643: LD_VAR 0 5
57647: PUSH
57648: LD_INT 2
57650: ARRAY
57651: PUSH
57652: LD_VAR 0 4
57656: ARRAY
57657: PUSH
57658: EMPTY
57659: LIST
57660: LIST
57661: PPUSH
57662: CALL_OW 1
57666: ST_TO_ADDR
57667: GO 57606
57669: POP
57670: POP
// exit ;
57671: GO 57711
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
57673: LD_ADDR_VAR 0 3
57677: PUSH
57678: LD_VAR 0 5
57682: PUSH
57683: LD_INT 1
57685: ARRAY
57686: PUSH
57687: LD_INT 1
57689: ARRAY
57690: PUSH
57691: LD_VAR 0 5
57695: PUSH
57696: LD_INT 2
57698: ARRAY
57699: PUSH
57700: LD_INT 1
57702: ARRAY
57703: PUSH
57704: EMPTY
57705: LIST
57706: LIST
57707: PUSH
57708: EMPTY
57709: LIST
57710: ST_TO_ADDR
// end ;
57711: LD_VAR 0 3
57715: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
57716: LD_INT 0
57718: PPUSH
57719: PPUSH
// list := AreaToList ( area , 0 ) ;
57720: LD_ADDR_VAR 0 4
57724: PUSH
57725: LD_VAR 0 1
57729: PPUSH
57730: LD_INT 0
57732: PPUSH
57733: CALL_OW 517
57737: ST_TO_ADDR
// if not list then
57738: LD_VAR 0 4
57742: NOT
57743: IFFALSE 57747
// exit ;
57745: GO 57788
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
57747: LD_ADDR_VAR 0 3
57751: PUSH
57752: LD_VAR 0 4
57756: PUSH
57757: LD_INT 1
57759: ARRAY
57760: PUSH
57761: LD_INT 1
57763: ARRAY
57764: PUSH
57765: LD_VAR 0 4
57769: PUSH
57770: LD_INT 2
57772: ARRAY
57773: PUSH
57774: LD_INT 1
57776: ARRAY
57777: PUSH
57778: LD_VAR 0 2
57782: PUSH
57783: EMPTY
57784: LIST
57785: LIST
57786: LIST
57787: ST_TO_ADDR
// end ;
57788: LD_VAR 0 3
57792: RET
// export function First ( array ) ; begin
57793: LD_INT 0
57795: PPUSH
// if not array then
57796: LD_VAR 0 1
57800: NOT
57801: IFFALSE 57805
// exit ;
57803: GO 57819
// result := array [ 1 ] ;
57805: LD_ADDR_VAR 0 2
57809: PUSH
57810: LD_VAR 0 1
57814: PUSH
57815: LD_INT 1
57817: ARRAY
57818: ST_TO_ADDR
// end ;
57819: LD_VAR 0 2
57823: RET
// export function Last ( array ) ; begin
57824: LD_INT 0
57826: PPUSH
// if not array then
57827: LD_VAR 0 1
57831: NOT
57832: IFFALSE 57836
// exit ;
57834: GO 57852
// result := array [ array ] ;
57836: LD_ADDR_VAR 0 2
57840: PUSH
57841: LD_VAR 0 1
57845: PUSH
57846: LD_VAR 0 1
57850: ARRAY
57851: ST_TO_ADDR
// end ;
57852: LD_VAR 0 2
57856: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
57857: LD_INT 0
57859: PPUSH
57860: PPUSH
// result := [ ] ;
57861: LD_ADDR_VAR 0 5
57865: PUSH
57866: EMPTY
57867: ST_TO_ADDR
// if not array then
57868: LD_VAR 0 1
57872: NOT
57873: IFFALSE 57877
// exit ;
57875: GO 57989
// for i := 1 to array do
57877: LD_ADDR_VAR 0 6
57881: PUSH
57882: DOUBLE
57883: LD_INT 1
57885: DEC
57886: ST_TO_ADDR
57887: LD_VAR 0 1
57891: PUSH
57892: FOR_TO
57893: IFFALSE 57987
// if array [ i ] [ index ] = value then
57895: LD_VAR 0 1
57899: PUSH
57900: LD_VAR 0 6
57904: ARRAY
57905: PUSH
57906: LD_VAR 0 2
57910: ARRAY
57911: PUSH
57912: LD_VAR 0 3
57916: EQUAL
57917: IFFALSE 57985
// begin if indexColumn then
57919: LD_VAR 0 4
57923: IFFALSE 57959
// result := Join ( result , array [ i ] [ indexColumn ] ) else
57925: LD_ADDR_VAR 0 5
57929: PUSH
57930: LD_VAR 0 5
57934: PPUSH
57935: LD_VAR 0 1
57939: PUSH
57940: LD_VAR 0 6
57944: ARRAY
57945: PUSH
57946: LD_VAR 0 4
57950: ARRAY
57951: PPUSH
57952: CALL 53171 0 2
57956: ST_TO_ADDR
57957: GO 57985
// result := Join ( result , array [ i ] ) ;
57959: LD_ADDR_VAR 0 5
57963: PUSH
57964: LD_VAR 0 5
57968: PPUSH
57969: LD_VAR 0 1
57973: PUSH
57974: LD_VAR 0 6
57978: ARRAY
57979: PPUSH
57980: CALL 53171 0 2
57984: ST_TO_ADDR
// end ;
57985: GO 57892
57987: POP
57988: POP
// end ;
57989: LD_VAR 0 5
57993: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
57994: LD_INT 0
57996: PPUSH
// if not vehicles or not parkingPoint then
57997: LD_VAR 0 1
58001: NOT
58002: PUSH
58003: LD_VAR 0 2
58007: NOT
58008: OR
58009: IFFALSE 58013
// exit ;
58011: GO 58111
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
58013: LD_ADDR_VAR 0 1
58017: PUSH
58018: LD_VAR 0 1
58022: PPUSH
58023: LD_INT 50
58025: PUSH
58026: EMPTY
58027: LIST
58028: PUSH
58029: LD_INT 3
58031: PUSH
58032: LD_INT 92
58034: PUSH
58035: LD_VAR 0 2
58039: PUSH
58040: LD_INT 1
58042: ARRAY
58043: PUSH
58044: LD_VAR 0 2
58048: PUSH
58049: LD_INT 2
58051: ARRAY
58052: PUSH
58053: LD_INT 8
58055: PUSH
58056: EMPTY
58057: LIST
58058: LIST
58059: LIST
58060: LIST
58061: PUSH
58062: EMPTY
58063: LIST
58064: LIST
58065: PUSH
58066: EMPTY
58067: LIST
58068: LIST
58069: PPUSH
58070: CALL_OW 72
58074: ST_TO_ADDR
// if not vehicles then
58075: LD_VAR 0 1
58079: NOT
58080: IFFALSE 58084
// exit ;
58082: GO 58111
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
58084: LD_VAR 0 1
58088: PPUSH
58089: LD_VAR 0 2
58093: PUSH
58094: LD_INT 1
58096: ARRAY
58097: PPUSH
58098: LD_VAR 0 2
58102: PUSH
58103: LD_INT 2
58105: ARRAY
58106: PPUSH
58107: CALL_OW 111
// end ;
58111: LD_VAR 0 3
58115: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
58116: LD_INT 0
58118: PPUSH
58119: PPUSH
58120: PPUSH
// if not side or not area then
58121: LD_VAR 0 1
58125: NOT
58126: PUSH
58127: LD_VAR 0 2
58131: NOT
58132: OR
58133: IFFALSE 58137
// exit ;
58135: GO 58256
// tmp := AreaToList ( area , 0 ) ;
58137: LD_ADDR_VAR 0 5
58141: PUSH
58142: LD_VAR 0 2
58146: PPUSH
58147: LD_INT 0
58149: PPUSH
58150: CALL_OW 517
58154: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
58155: LD_ADDR_VAR 0 4
58159: PUSH
58160: DOUBLE
58161: LD_INT 1
58163: DEC
58164: ST_TO_ADDR
58165: LD_VAR 0 5
58169: PUSH
58170: LD_INT 1
58172: ARRAY
58173: PUSH
58174: FOR_TO
58175: IFFALSE 58254
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
58177: LD_VAR 0 5
58181: PUSH
58182: LD_INT 1
58184: ARRAY
58185: PUSH
58186: LD_VAR 0 4
58190: ARRAY
58191: PPUSH
58192: LD_VAR 0 5
58196: PUSH
58197: LD_INT 2
58199: ARRAY
58200: PUSH
58201: LD_VAR 0 4
58205: ARRAY
58206: PPUSH
58207: CALL_OW 351
58211: IFFALSE 58252
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
58213: LD_VAR 0 5
58217: PUSH
58218: LD_INT 1
58220: ARRAY
58221: PUSH
58222: LD_VAR 0 4
58226: ARRAY
58227: PPUSH
58228: LD_VAR 0 5
58232: PUSH
58233: LD_INT 2
58235: ARRAY
58236: PUSH
58237: LD_VAR 0 4
58241: ARRAY
58242: PPUSH
58243: LD_VAR 0 1
58247: PPUSH
58248: CALL_OW 244
// end ;
58252: GO 58174
58254: POP
58255: POP
// end ; end_of_file
58256: LD_VAR 0 3
58260: RET
// export function SOS_UnitDestroyed ( un ) ; begin
58261: LD_INT 0
58263: PPUSH
// ComRadiation ( un ) ;
58264: LD_VAR 0 1
58268: PPUSH
58269: CALL 59330 0 1
// end ;
58273: LD_VAR 0 2
58277: RET
// export function SOS_UnitKamikazed ( un ) ; begin
58278: LD_INT 0
58280: PPUSH
// ComRadiation ( un ) ;
58281: LD_VAR 0 1
58285: PPUSH
58286: CALL 59330 0 1
// end ;
58290: LD_VAR 0 2
58294: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
58295: LD_INT 0
58297: PPUSH
// end ;
58298: LD_VAR 0 4
58302: RET
// export function SOS_Command ( cmd ) ; begin
58303: LD_INT 0
58305: PPUSH
// end ;
58306: LD_VAR 0 2
58310: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
58311: LD_INT 0
58313: PPUSH
// end ;
58314: LD_VAR 0 6
58318: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
58319: LD_INT 0
58321: PPUSH
58322: PPUSH
58323: PPUSH
58324: PPUSH
// if not vehicle or not factory then
58325: LD_VAR 0 1
58329: NOT
58330: PUSH
58331: LD_VAR 0 2
58335: NOT
58336: OR
58337: IFFALSE 58341
// exit ;
58339: GO 58921
// if not factoryWaypoints then
58341: LD_EXP 53
58345: NOT
58346: IFFALSE 58350
// exit ;
58348: GO 58921
// for i := 1 to Count ( factoryWaypoints ) do
58350: LD_ADDR_VAR 0 4
58354: PUSH
58355: DOUBLE
58356: LD_INT 1
58358: DEC
58359: ST_TO_ADDR
58360: LD_EXP 53
58364: PPUSH
58365: CALL 17562 0 1
58369: PUSH
58370: FOR_TO
58371: IFFALSE 58919
// if factoryWaypoints [ i ] [ 2 ] = factory then
58373: LD_EXP 53
58377: PUSH
58378: LD_VAR 0 4
58382: ARRAY
58383: PUSH
58384: LD_INT 2
58386: ARRAY
58387: PUSH
58388: LD_VAR 0 2
58392: EQUAL
58393: IFFALSE 58917
// begin if GetControl ( vehicle ) = control_manual then
58395: LD_VAR 0 1
58399: PPUSH
58400: CALL_OW 263
58404: PUSH
58405: LD_INT 1
58407: EQUAL
58408: IFFALSE 58770
// begin driver := IsDrivenBy ( vehicle ) ;
58410: LD_ADDR_VAR 0 5
58414: PUSH
58415: LD_VAR 0 1
58419: PPUSH
58420: CALL_OW 311
58424: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
58425: LD_VAR 0 5
58429: PUSH
58430: LD_EXP 54
58434: IN
58435: PUSH
58436: LD_VAR 0 1
58440: PUSH
58441: LD_EXP 54
58445: IN
58446: OR
58447: IFFALSE 58453
// exit ;
58449: POP
58450: POP
58451: GO 58921
// if not HasTask ( driver ) then
58453: LD_VAR 0 5
58457: PPUSH
58458: CALL_OW 314
58462: NOT
58463: IFFALSE 58768
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
58465: LD_ADDR_EXP 54
58469: PUSH
58470: LD_EXP 54
58474: PPUSH
58475: LD_VAR 0 5
58479: PPUSH
58480: CALL 53171 0 2
58484: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
58485: LD_ADDR_EXP 54
58489: PUSH
58490: LD_EXP 54
58494: PPUSH
58495: LD_VAR 0 1
58499: PPUSH
58500: CALL 53171 0 2
58504: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
58505: LD_ADDR_VAR 0 6
58509: PUSH
58510: LD_EXP 53
58514: PUSH
58515: LD_VAR 0 4
58519: ARRAY
58520: PUSH
58521: LD_INT 3
58523: ARRAY
58524: PPUSH
58525: LD_EXP 53
58529: PUSH
58530: LD_VAR 0 4
58534: ARRAY
58535: PUSH
58536: LD_INT 4
58538: ARRAY
58539: PPUSH
58540: CALL_OW 428
58544: ST_TO_ADDR
// if hex then
58545: LD_VAR 0 6
58549: IFFALSE 58567
// ComMoveUnit ( driver , hex ) else
58551: LD_VAR 0 5
58555: PPUSH
58556: LD_VAR 0 6
58560: PPUSH
58561: CALL_OW 112
58565: GO 58651
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
58567: LD_VAR 0 1
58571: PPUSH
58572: LD_EXP 53
58576: PUSH
58577: LD_VAR 0 4
58581: ARRAY
58582: PUSH
58583: LD_INT 3
58585: ARRAY
58586: PPUSH
58587: LD_EXP 53
58591: PUSH
58592: LD_VAR 0 4
58596: ARRAY
58597: PUSH
58598: LD_INT 4
58600: ARRAY
58601: PPUSH
58602: CALL_OW 297
58606: PUSH
58607: LD_INT 0
58609: GREATER
58610: IFFALSE 58651
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
58612: LD_VAR 0 5
58616: PPUSH
58617: LD_EXP 53
58621: PUSH
58622: LD_VAR 0 4
58626: ARRAY
58627: PUSH
58628: LD_INT 3
58630: ARRAY
58631: PPUSH
58632: LD_EXP 53
58636: PUSH
58637: LD_VAR 0 4
58641: ARRAY
58642: PUSH
58643: LD_INT 4
58645: ARRAY
58646: PPUSH
58647: CALL_OW 111
// AddComExitVehicle ( driver ) ;
58651: LD_VAR 0 5
58655: PPUSH
58656: CALL_OW 181
// if Multiplayer then
58660: LD_OWVAR 4
58664: IFFALSE 58713
// begin repeat wait ( 10 ) ;
58666: LD_INT 10
58668: PPUSH
58669: CALL_OW 67
// until not IsInUnit ( driver ) ;
58673: LD_VAR 0 5
58677: PPUSH
58678: CALL_OW 310
58682: NOT
58683: IFFALSE 58666
// if not HasTask ( driver ) then
58685: LD_VAR 0 5
58689: PPUSH
58690: CALL_OW 314
58694: NOT
58695: IFFALSE 58711
// ComEnterUnit ( driver , factory ) ;
58697: LD_VAR 0 5
58701: PPUSH
58702: LD_VAR 0 2
58706: PPUSH
58707: CALL_OW 120
// end else
58711: GO 58727
// AddComEnterUnit ( driver , factory ) ;
58713: LD_VAR 0 5
58717: PPUSH
58718: LD_VAR 0 2
58722: PPUSH
58723: CALL_OW 180
// wait ( 0 0$1 ) ;
58727: LD_INT 35
58729: PPUSH
58730: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
58734: LD_ADDR_EXP 54
58738: PUSH
58739: LD_EXP 54
58743: PUSH
58744: LD_VAR 0 5
58748: DIFF
58749: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
58750: LD_ADDR_EXP 54
58754: PUSH
58755: LD_EXP 54
58759: PUSH
58760: LD_VAR 0 1
58764: DIFF
58765: ST_TO_ADDR
// break ;
58766: GO 58919
// end ; end else
58768: GO 58917
// if GetControl ( vehicle ) = control_remote then
58770: LD_VAR 0 1
58774: PPUSH
58775: CALL_OW 263
58779: PUSH
58780: LD_INT 2
58782: EQUAL
58783: IFFALSE 58869
// begin wait ( 0 0$2 ) ;
58785: LD_INT 70
58787: PPUSH
58788: CALL_OW 67
// repeat wait ( 10 ) ;
58792: LD_INT 10
58794: PPUSH
58795: CALL_OW 67
// Connect ( vehicle ) ;
58799: LD_VAR 0 1
58803: PPUSH
58804: CALL 23768 0 1
// until IsControledBy ( vehicle ) ;
58808: LD_VAR 0 1
58812: PPUSH
58813: CALL_OW 312
58817: IFFALSE 58792
// wait ( 10 ) ;
58819: LD_INT 10
58821: PPUSH
58822: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
58826: LD_VAR 0 1
58830: PPUSH
58831: LD_EXP 53
58835: PUSH
58836: LD_VAR 0 4
58840: ARRAY
58841: PUSH
58842: LD_INT 3
58844: ARRAY
58845: PPUSH
58846: LD_EXP 53
58850: PUSH
58851: LD_VAR 0 4
58855: ARRAY
58856: PUSH
58857: LD_INT 4
58859: ARRAY
58860: PPUSH
58861: CALL_OW 111
// break ;
58865: GO 58919
// end else
58867: GO 58917
// begin wait ( 0 0$3 ) ;
58869: LD_INT 105
58871: PPUSH
58872: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
58876: LD_VAR 0 1
58880: PPUSH
58881: LD_EXP 53
58885: PUSH
58886: LD_VAR 0 4
58890: ARRAY
58891: PUSH
58892: LD_INT 3
58894: ARRAY
58895: PPUSH
58896: LD_EXP 53
58900: PUSH
58901: LD_VAR 0 4
58905: ARRAY
58906: PUSH
58907: LD_INT 4
58909: ARRAY
58910: PPUSH
58911: CALL_OW 111
// break ;
58915: GO 58919
// end ; end ;
58917: GO 58370
58919: POP
58920: POP
// end ;
58921: LD_VAR 0 3
58925: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
58926: LD_INT 0
58928: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
58929: LD_VAR 0 1
58933: PUSH
58934: LD_INT 250
58936: EQUAL
58937: PUSH
58938: LD_VAR 0 2
58942: PPUSH
58943: CALL_OW 264
58947: PUSH
58948: LD_INT 81
58950: EQUAL
58951: AND
58952: IFFALSE 58973
// MinerPlaceMine ( unit , x , y ) ;
58954: LD_VAR 0 2
58958: PPUSH
58959: LD_VAR 0 4
58963: PPUSH
58964: LD_VAR 0 5
58968: PPUSH
58969: CALL 62065 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
58973: LD_VAR 0 1
58977: PUSH
58978: LD_INT 251
58980: EQUAL
58981: PUSH
58982: LD_VAR 0 2
58986: PPUSH
58987: CALL_OW 264
58991: PUSH
58992: LD_INT 81
58994: EQUAL
58995: AND
58996: IFFALSE 59017
// MinerDetonateMine ( unit , x , y ) ;
58998: LD_VAR 0 2
59002: PPUSH
59003: LD_VAR 0 4
59007: PPUSH
59008: LD_VAR 0 5
59012: PPUSH
59013: CALL 62340 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
59017: LD_VAR 0 1
59021: PUSH
59022: LD_INT 252
59024: EQUAL
59025: PUSH
59026: LD_VAR 0 2
59030: PPUSH
59031: CALL_OW 264
59035: PUSH
59036: LD_INT 81
59038: EQUAL
59039: AND
59040: IFFALSE 59061
// MinerCreateMinefield ( unit , x , y ) ;
59042: LD_VAR 0 2
59046: PPUSH
59047: LD_VAR 0 4
59051: PPUSH
59052: LD_VAR 0 5
59056: PPUSH
59057: CALL 62757 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
59061: LD_VAR 0 1
59065: PUSH
59066: LD_INT 253
59068: EQUAL
59069: PUSH
59070: LD_VAR 0 2
59074: PPUSH
59075: CALL_OW 257
59079: PUSH
59080: LD_INT 5
59082: EQUAL
59083: AND
59084: IFFALSE 59105
// ComBinocular ( unit , x , y ) ;
59086: LD_VAR 0 2
59090: PPUSH
59091: LD_VAR 0 4
59095: PPUSH
59096: LD_VAR 0 5
59100: PPUSH
59101: CALL 63126 0 3
// if selectedUnit then
59105: LD_VAR 0 3
59109: IFFALSE 59165
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
59111: LD_VAR 0 1
59115: PUSH
59116: LD_INT 254
59118: EQUAL
59119: PUSH
59120: LD_VAR 0 2
59124: PPUSH
59125: CALL_OW 264
59129: PUSH
59130: LD_INT 99
59132: EQUAL
59133: AND
59134: PUSH
59135: LD_VAR 0 3
59139: PPUSH
59140: CALL_OW 263
59144: PUSH
59145: LD_INT 3
59147: EQUAL
59148: AND
59149: IFFALSE 59165
// HackDestroyVehicle ( unit , selectedUnit ) ;
59151: LD_VAR 0 2
59155: PPUSH
59156: LD_VAR 0 3
59160: PPUSH
59161: CALL 61429 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
59165: LD_VAR 0 1
59169: PUSH
59170: LD_INT 255
59172: EQUAL
59173: PUSH
59174: LD_VAR 0 2
59178: PPUSH
59179: CALL_OW 264
59183: PUSH
59184: LD_INT 14
59186: PUSH
59187: LD_INT 53
59189: PUSH
59190: EMPTY
59191: LIST
59192: LIST
59193: IN
59194: AND
59195: PUSH
59196: LD_VAR 0 4
59200: PPUSH
59201: LD_VAR 0 5
59205: PPUSH
59206: CALL_OW 488
59210: AND
59211: IFFALSE 59235
// CutTreeXYR ( unit , x , y , 12 ) ;
59213: LD_VAR 0 2
59217: PPUSH
59218: LD_VAR 0 4
59222: PPUSH
59223: LD_VAR 0 5
59227: PPUSH
59228: LD_INT 12
59230: PPUSH
59231: CALL 59426 0 4
// if cmd = 256 then
59235: LD_VAR 0 1
59239: PUSH
59240: LD_INT 256
59242: EQUAL
59243: IFFALSE 59264
// SetFactoryWaypoint ( unit , x , y ) ;
59245: LD_VAR 0 2
59249: PPUSH
59250: LD_VAR 0 4
59254: PPUSH
59255: LD_VAR 0 5
59259: PPUSH
59260: CALL 64281 0 3
// if cmd = 257 then
59264: LD_VAR 0 1
59268: PUSH
59269: LD_INT 257
59271: EQUAL
59272: IFFALSE 59293
// SetWarehouseGatheringPoint ( unit , x , y ) ;
59274: LD_VAR 0 2
59278: PPUSH
59279: LD_VAR 0 4
59283: PPUSH
59284: LD_VAR 0 5
59288: PPUSH
59289: CALL 64771 0 3
// if cmd = 258 then
59293: LD_VAR 0 1
59297: PUSH
59298: LD_INT 258
59300: EQUAL
59301: IFFALSE 59325
// BurnTreeXYR ( unit , x , y , 8 ) ;
59303: LD_VAR 0 2
59307: PPUSH
59308: LD_VAR 0 4
59312: PPUSH
59313: LD_VAR 0 5
59317: PPUSH
59318: LD_INT 8
59320: PPUSH
59321: CALL 59820 0 4
// end ;
59325: LD_VAR 0 6
59329: RET
// export function ComRadiation ( un ) ; var eff ; begin
59330: LD_INT 0
59332: PPUSH
59333: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
59334: LD_VAR 0 1
59338: PPUSH
59339: CALL_OW 264
59343: PUSH
59344: LD_INT 91
59346: NONEQUAL
59347: IFFALSE 59351
// exit ;
59349: GO 59421
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
59351: LD_INT 68
59353: PPUSH
59354: LD_VAR 0 1
59358: PPUSH
59359: CALL_OW 255
59363: PPUSH
59364: CALL_OW 321
59368: PUSH
59369: LD_INT 2
59371: EQUAL
59372: IFFALSE 59384
// eff := 50 else
59374: LD_ADDR_VAR 0 3
59378: PUSH
59379: LD_INT 50
59381: ST_TO_ADDR
59382: GO 59392
// eff := 25 ;
59384: LD_ADDR_VAR 0 3
59388: PUSH
59389: LD_INT 25
59391: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
59392: LD_VAR 0 1
59396: PPUSH
59397: CALL_OW 250
59401: PPUSH
59402: LD_VAR 0 1
59406: PPUSH
59407: CALL_OW 251
59411: PPUSH
59412: LD_VAR 0 3
59416: PPUSH
59417: CALL_OW 495
// end ;
59421: LD_VAR 0 2
59425: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
59426: LD_INT 0
59428: PPUSH
59429: PPUSH
59430: PPUSH
59431: PPUSH
59432: PPUSH
59433: PPUSH
59434: PPUSH
59435: PPUSH
59436: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
59437: LD_VAR 0 1
59441: PPUSH
59442: CALL_OW 302
59446: NOT
59447: PUSH
59448: LD_VAR 0 2
59452: PPUSH
59453: LD_VAR 0 3
59457: PPUSH
59458: CALL_OW 488
59462: NOT
59463: OR
59464: PUSH
59465: LD_VAR 0 4
59469: NOT
59470: OR
59471: IFFALSE 59475
// exit ;
59473: GO 59815
// list := [ ] ;
59475: LD_ADDR_VAR 0 13
59479: PUSH
59480: EMPTY
59481: ST_TO_ADDR
// if x - r < 0 then
59482: LD_VAR 0 2
59486: PUSH
59487: LD_VAR 0 4
59491: MINUS
59492: PUSH
59493: LD_INT 0
59495: LESS
59496: IFFALSE 59508
// min_x := 0 else
59498: LD_ADDR_VAR 0 7
59502: PUSH
59503: LD_INT 0
59505: ST_TO_ADDR
59506: GO 59524
// min_x := x - r ;
59508: LD_ADDR_VAR 0 7
59512: PUSH
59513: LD_VAR 0 2
59517: PUSH
59518: LD_VAR 0 4
59522: MINUS
59523: ST_TO_ADDR
// if y - r < 0 then
59524: LD_VAR 0 3
59528: PUSH
59529: LD_VAR 0 4
59533: MINUS
59534: PUSH
59535: LD_INT 0
59537: LESS
59538: IFFALSE 59550
// min_y := 0 else
59540: LD_ADDR_VAR 0 8
59544: PUSH
59545: LD_INT 0
59547: ST_TO_ADDR
59548: GO 59566
// min_y := y - r ;
59550: LD_ADDR_VAR 0 8
59554: PUSH
59555: LD_VAR 0 3
59559: PUSH
59560: LD_VAR 0 4
59564: MINUS
59565: ST_TO_ADDR
// max_x := x + r ;
59566: LD_ADDR_VAR 0 9
59570: PUSH
59571: LD_VAR 0 2
59575: PUSH
59576: LD_VAR 0 4
59580: PLUS
59581: ST_TO_ADDR
// max_y := y + r ;
59582: LD_ADDR_VAR 0 10
59586: PUSH
59587: LD_VAR 0 3
59591: PUSH
59592: LD_VAR 0 4
59596: PLUS
59597: ST_TO_ADDR
// for _x = min_x to max_x do
59598: LD_ADDR_VAR 0 11
59602: PUSH
59603: DOUBLE
59604: LD_VAR 0 7
59608: DEC
59609: ST_TO_ADDR
59610: LD_VAR 0 9
59614: PUSH
59615: FOR_TO
59616: IFFALSE 59733
// for _y = min_y to max_y do
59618: LD_ADDR_VAR 0 12
59622: PUSH
59623: DOUBLE
59624: LD_VAR 0 8
59628: DEC
59629: ST_TO_ADDR
59630: LD_VAR 0 10
59634: PUSH
59635: FOR_TO
59636: IFFALSE 59729
// begin if not ValidHex ( _x , _y ) then
59638: LD_VAR 0 11
59642: PPUSH
59643: LD_VAR 0 12
59647: PPUSH
59648: CALL_OW 488
59652: NOT
59653: IFFALSE 59657
// continue ;
59655: GO 59635
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
59657: LD_VAR 0 11
59661: PPUSH
59662: LD_VAR 0 12
59666: PPUSH
59667: CALL_OW 351
59671: PUSH
59672: LD_VAR 0 11
59676: PPUSH
59677: LD_VAR 0 12
59681: PPUSH
59682: CALL_OW 554
59686: AND
59687: IFFALSE 59727
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
59689: LD_ADDR_VAR 0 13
59693: PUSH
59694: LD_VAR 0 13
59698: PPUSH
59699: LD_VAR 0 13
59703: PUSH
59704: LD_INT 1
59706: PLUS
59707: PPUSH
59708: LD_VAR 0 11
59712: PUSH
59713: LD_VAR 0 12
59717: PUSH
59718: EMPTY
59719: LIST
59720: LIST
59721: PPUSH
59722: CALL_OW 2
59726: ST_TO_ADDR
// end ;
59727: GO 59635
59729: POP
59730: POP
59731: GO 59615
59733: POP
59734: POP
// if not list then
59735: LD_VAR 0 13
59739: NOT
59740: IFFALSE 59744
// exit ;
59742: GO 59815
// for i in list do
59744: LD_ADDR_VAR 0 6
59748: PUSH
59749: LD_VAR 0 13
59753: PUSH
59754: FOR_IN
59755: IFFALSE 59813
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
59757: LD_VAR 0 1
59761: PPUSH
59762: LD_STRING M
59764: PUSH
59765: LD_VAR 0 6
59769: PUSH
59770: LD_INT 1
59772: ARRAY
59773: PUSH
59774: LD_VAR 0 6
59778: PUSH
59779: LD_INT 2
59781: ARRAY
59782: PUSH
59783: LD_INT 0
59785: PUSH
59786: LD_INT 0
59788: PUSH
59789: LD_INT 0
59791: PUSH
59792: LD_INT 0
59794: PUSH
59795: EMPTY
59796: LIST
59797: LIST
59798: LIST
59799: LIST
59800: LIST
59801: LIST
59802: LIST
59803: PUSH
59804: EMPTY
59805: LIST
59806: PPUSH
59807: CALL_OW 447
59811: GO 59754
59813: POP
59814: POP
// end ;
59815: LD_VAR 0 5
59819: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
59820: LD_INT 0
59822: PPUSH
59823: PPUSH
59824: PPUSH
59825: PPUSH
59826: PPUSH
59827: PPUSH
59828: PPUSH
59829: PPUSH
59830: PPUSH
59831: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
59832: LD_VAR 0 1
59836: PPUSH
59837: CALL_OW 302
59841: NOT
59842: PUSH
59843: LD_VAR 0 2
59847: PPUSH
59848: LD_VAR 0 3
59852: PPUSH
59853: CALL_OW 488
59857: NOT
59858: OR
59859: PUSH
59860: LD_VAR 0 4
59864: NOT
59865: OR
59866: IFFALSE 59870
// exit ;
59868: GO 60383
// list := [ ] ;
59870: LD_ADDR_VAR 0 13
59874: PUSH
59875: EMPTY
59876: ST_TO_ADDR
// if x - r < 0 then
59877: LD_VAR 0 2
59881: PUSH
59882: LD_VAR 0 4
59886: MINUS
59887: PUSH
59888: LD_INT 0
59890: LESS
59891: IFFALSE 59903
// min_x := 0 else
59893: LD_ADDR_VAR 0 7
59897: PUSH
59898: LD_INT 0
59900: ST_TO_ADDR
59901: GO 59919
// min_x := x - r ;
59903: LD_ADDR_VAR 0 7
59907: PUSH
59908: LD_VAR 0 2
59912: PUSH
59913: LD_VAR 0 4
59917: MINUS
59918: ST_TO_ADDR
// if y - r < 0 then
59919: LD_VAR 0 3
59923: PUSH
59924: LD_VAR 0 4
59928: MINUS
59929: PUSH
59930: LD_INT 0
59932: LESS
59933: IFFALSE 59945
// min_y := 0 else
59935: LD_ADDR_VAR 0 8
59939: PUSH
59940: LD_INT 0
59942: ST_TO_ADDR
59943: GO 59961
// min_y := y - r ;
59945: LD_ADDR_VAR 0 8
59949: PUSH
59950: LD_VAR 0 3
59954: PUSH
59955: LD_VAR 0 4
59959: MINUS
59960: ST_TO_ADDR
// max_x := x + r ;
59961: LD_ADDR_VAR 0 9
59965: PUSH
59966: LD_VAR 0 2
59970: PUSH
59971: LD_VAR 0 4
59975: PLUS
59976: ST_TO_ADDR
// max_y := y + r ;
59977: LD_ADDR_VAR 0 10
59981: PUSH
59982: LD_VAR 0 3
59986: PUSH
59987: LD_VAR 0 4
59991: PLUS
59992: ST_TO_ADDR
// for _x = min_x to max_x do
59993: LD_ADDR_VAR 0 11
59997: PUSH
59998: DOUBLE
59999: LD_VAR 0 7
60003: DEC
60004: ST_TO_ADDR
60005: LD_VAR 0 9
60009: PUSH
60010: FOR_TO
60011: IFFALSE 60128
// for _y = min_y to max_y do
60013: LD_ADDR_VAR 0 12
60017: PUSH
60018: DOUBLE
60019: LD_VAR 0 8
60023: DEC
60024: ST_TO_ADDR
60025: LD_VAR 0 10
60029: PUSH
60030: FOR_TO
60031: IFFALSE 60124
// begin if not ValidHex ( _x , _y ) then
60033: LD_VAR 0 11
60037: PPUSH
60038: LD_VAR 0 12
60042: PPUSH
60043: CALL_OW 488
60047: NOT
60048: IFFALSE 60052
// continue ;
60050: GO 60030
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
60052: LD_VAR 0 11
60056: PPUSH
60057: LD_VAR 0 12
60061: PPUSH
60062: CALL_OW 351
60066: PUSH
60067: LD_VAR 0 11
60071: PPUSH
60072: LD_VAR 0 12
60076: PPUSH
60077: CALL_OW 554
60081: AND
60082: IFFALSE 60122
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
60084: LD_ADDR_VAR 0 13
60088: PUSH
60089: LD_VAR 0 13
60093: PPUSH
60094: LD_VAR 0 13
60098: PUSH
60099: LD_INT 1
60101: PLUS
60102: PPUSH
60103: LD_VAR 0 11
60107: PUSH
60108: LD_VAR 0 12
60112: PUSH
60113: EMPTY
60114: LIST
60115: LIST
60116: PPUSH
60117: CALL_OW 2
60121: ST_TO_ADDR
// end ;
60122: GO 60030
60124: POP
60125: POP
60126: GO 60010
60128: POP
60129: POP
// if not list then
60130: LD_VAR 0 13
60134: NOT
60135: IFFALSE 60139
// exit ;
60137: GO 60383
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
60139: LD_ADDR_VAR 0 13
60143: PUSH
60144: LD_VAR 0 1
60148: PPUSH
60149: LD_VAR 0 13
60153: PPUSH
60154: LD_INT 1
60156: PPUSH
60157: LD_INT 1
60159: PPUSH
60160: CALL 20910 0 4
60164: ST_TO_ADDR
// ComStop ( flame ) ;
60165: LD_VAR 0 1
60169: PPUSH
60170: CALL_OW 141
// for i in list do
60174: LD_ADDR_VAR 0 6
60178: PUSH
60179: LD_VAR 0 13
60183: PUSH
60184: FOR_IN
60185: IFFALSE 60216
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
60187: LD_VAR 0 1
60191: PPUSH
60192: LD_VAR 0 6
60196: PUSH
60197: LD_INT 1
60199: ARRAY
60200: PPUSH
60201: LD_VAR 0 6
60205: PUSH
60206: LD_INT 2
60208: ARRAY
60209: PPUSH
60210: CALL_OW 176
60214: GO 60184
60216: POP
60217: POP
// repeat wait ( 0 0$1 ) ;
60218: LD_INT 35
60220: PPUSH
60221: CALL_OW 67
// task := GetTaskList ( flame ) ;
60225: LD_ADDR_VAR 0 14
60229: PUSH
60230: LD_VAR 0 1
60234: PPUSH
60235: CALL_OW 437
60239: ST_TO_ADDR
// if not task then
60240: LD_VAR 0 14
60244: NOT
60245: IFFALSE 60249
// exit ;
60247: GO 60383
// if task [ 1 ] [ 1 ] <> | then
60249: LD_VAR 0 14
60253: PUSH
60254: LD_INT 1
60256: ARRAY
60257: PUSH
60258: LD_INT 1
60260: ARRAY
60261: PUSH
60262: LD_STRING |
60264: NONEQUAL
60265: IFFALSE 60269
// exit ;
60267: GO 60383
// _x := task [ 1 ] [ 2 ] ;
60269: LD_ADDR_VAR 0 11
60273: PUSH
60274: LD_VAR 0 14
60278: PUSH
60279: LD_INT 1
60281: ARRAY
60282: PUSH
60283: LD_INT 2
60285: ARRAY
60286: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
60287: LD_ADDR_VAR 0 12
60291: PUSH
60292: LD_VAR 0 14
60296: PUSH
60297: LD_INT 1
60299: ARRAY
60300: PUSH
60301: LD_INT 3
60303: ARRAY
60304: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
60305: LD_VAR 0 11
60309: PPUSH
60310: LD_VAR 0 12
60314: PPUSH
60315: CALL_OW 351
60319: NOT
60320: PUSH
60321: LD_VAR 0 11
60325: PPUSH
60326: LD_VAR 0 12
60330: PPUSH
60331: CALL_OW 554
60335: NOT
60336: OR
60337: IFFALSE 60371
// begin task := Delete ( task , 1 ) ;
60339: LD_ADDR_VAR 0 14
60343: PUSH
60344: LD_VAR 0 14
60348: PPUSH
60349: LD_INT 1
60351: PPUSH
60352: CALL_OW 3
60356: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
60357: LD_VAR 0 1
60361: PPUSH
60362: LD_VAR 0 14
60366: PPUSH
60367: CALL_OW 446
// end ; until not HasTask ( flame ) ;
60371: LD_VAR 0 1
60375: PPUSH
60376: CALL_OW 314
60380: NOT
60381: IFFALSE 60218
// end ;
60383: LD_VAR 0 5
60387: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
60388: LD_EXP 43
60392: NOT
60393: IFFALSE 60443
60395: GO 60397
60397: DISABLE
// begin initHack := true ;
60398: LD_ADDR_EXP 43
60402: PUSH
60403: LD_INT 1
60405: ST_TO_ADDR
// hackTanks := [ ] ;
60406: LD_ADDR_EXP 44
60410: PUSH
60411: EMPTY
60412: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
60413: LD_ADDR_EXP 45
60417: PUSH
60418: EMPTY
60419: ST_TO_ADDR
// hackLimit := 3 ;
60420: LD_ADDR_EXP 46
60424: PUSH
60425: LD_INT 3
60427: ST_TO_ADDR
// hackDist := 12 ;
60428: LD_ADDR_EXP 47
60432: PUSH
60433: LD_INT 12
60435: ST_TO_ADDR
// hackCounter := [ ] ;
60436: LD_ADDR_EXP 48
60440: PUSH
60441: EMPTY
60442: ST_TO_ADDR
// end ;
60443: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
60444: LD_EXP 43
60448: PUSH
60449: LD_INT 34
60451: PUSH
60452: LD_INT 99
60454: PUSH
60455: EMPTY
60456: LIST
60457: LIST
60458: PPUSH
60459: CALL_OW 69
60463: AND
60464: IFFALSE 60717
60466: GO 60468
60468: DISABLE
60469: LD_INT 0
60471: PPUSH
60472: PPUSH
// begin enable ;
60473: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
60474: LD_ADDR_VAR 0 1
60478: PUSH
60479: LD_INT 34
60481: PUSH
60482: LD_INT 99
60484: PUSH
60485: EMPTY
60486: LIST
60487: LIST
60488: PPUSH
60489: CALL_OW 69
60493: PUSH
60494: FOR_IN
60495: IFFALSE 60715
// begin if not i in hackTanks then
60497: LD_VAR 0 1
60501: PUSH
60502: LD_EXP 44
60506: IN
60507: NOT
60508: IFFALSE 60591
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
60510: LD_ADDR_EXP 44
60514: PUSH
60515: LD_EXP 44
60519: PPUSH
60520: LD_EXP 44
60524: PUSH
60525: LD_INT 1
60527: PLUS
60528: PPUSH
60529: LD_VAR 0 1
60533: PPUSH
60534: CALL_OW 1
60538: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
60539: LD_ADDR_EXP 45
60543: PUSH
60544: LD_EXP 45
60548: PPUSH
60549: LD_EXP 45
60553: PUSH
60554: LD_INT 1
60556: PLUS
60557: PPUSH
60558: EMPTY
60559: PPUSH
60560: CALL_OW 1
60564: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
60565: LD_ADDR_EXP 48
60569: PUSH
60570: LD_EXP 48
60574: PPUSH
60575: LD_EXP 48
60579: PUSH
60580: LD_INT 1
60582: PLUS
60583: PPUSH
60584: EMPTY
60585: PPUSH
60586: CALL_OW 1
60590: ST_TO_ADDR
// end ; if not IsOk ( i ) then
60591: LD_VAR 0 1
60595: PPUSH
60596: CALL_OW 302
60600: NOT
60601: IFFALSE 60614
// begin HackUnlinkAll ( i ) ;
60603: LD_VAR 0 1
60607: PPUSH
60608: CALL 60720 0 1
// continue ;
60612: GO 60494
// end ; HackCheckCapturedStatus ( i ) ;
60614: LD_VAR 0 1
60618: PPUSH
60619: CALL 61163 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
60623: LD_ADDR_VAR 0 2
60627: PUSH
60628: LD_INT 81
60630: PUSH
60631: LD_VAR 0 1
60635: PPUSH
60636: CALL_OW 255
60640: PUSH
60641: EMPTY
60642: LIST
60643: LIST
60644: PUSH
60645: LD_INT 33
60647: PUSH
60648: LD_INT 3
60650: PUSH
60651: EMPTY
60652: LIST
60653: LIST
60654: PUSH
60655: LD_INT 91
60657: PUSH
60658: LD_VAR 0 1
60662: PUSH
60663: LD_EXP 47
60667: PUSH
60668: EMPTY
60669: LIST
60670: LIST
60671: LIST
60672: PUSH
60673: LD_INT 50
60675: PUSH
60676: EMPTY
60677: LIST
60678: PUSH
60679: EMPTY
60680: LIST
60681: LIST
60682: LIST
60683: LIST
60684: PPUSH
60685: CALL_OW 69
60689: ST_TO_ADDR
// if not tmp then
60690: LD_VAR 0 2
60694: NOT
60695: IFFALSE 60699
// continue ;
60697: GO 60494
// HackLink ( i , tmp ) ;
60699: LD_VAR 0 1
60703: PPUSH
60704: LD_VAR 0 2
60708: PPUSH
60709: CALL 60856 0 2
// end ;
60713: GO 60494
60715: POP
60716: POP
// end ;
60717: PPOPN 2
60719: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
60720: LD_INT 0
60722: PPUSH
60723: PPUSH
60724: PPUSH
// if not hack in hackTanks then
60725: LD_VAR 0 1
60729: PUSH
60730: LD_EXP 44
60734: IN
60735: NOT
60736: IFFALSE 60740
// exit ;
60738: GO 60851
// index := GetElementIndex ( hackTanks , hack ) ;
60740: LD_ADDR_VAR 0 4
60744: PUSH
60745: LD_EXP 44
60749: PPUSH
60750: LD_VAR 0 1
60754: PPUSH
60755: CALL 20207 0 2
60759: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
60760: LD_EXP 45
60764: PUSH
60765: LD_VAR 0 4
60769: ARRAY
60770: IFFALSE 60851
// begin for i in hackTanksCaptured [ index ] do
60772: LD_ADDR_VAR 0 3
60776: PUSH
60777: LD_EXP 45
60781: PUSH
60782: LD_VAR 0 4
60786: ARRAY
60787: PUSH
60788: FOR_IN
60789: IFFALSE 60815
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
60791: LD_VAR 0 3
60795: PUSH
60796: LD_INT 1
60798: ARRAY
60799: PPUSH
60800: LD_VAR 0 3
60804: PUSH
60805: LD_INT 2
60807: ARRAY
60808: PPUSH
60809: CALL_OW 235
60813: GO 60788
60815: POP
60816: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
60817: LD_ADDR_EXP 45
60821: PUSH
60822: LD_EXP 45
60826: PPUSH
60827: LD_VAR 0 4
60831: PPUSH
60832: EMPTY
60833: PPUSH
60834: CALL_OW 1
60838: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
60839: LD_VAR 0 1
60843: PPUSH
60844: LD_INT 0
60846: PPUSH
60847: CALL_OW 505
// end ; end ;
60851: LD_VAR 0 2
60855: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
60856: LD_INT 0
60858: PPUSH
60859: PPUSH
60860: PPUSH
// if not hack in hackTanks or not vehicles then
60861: LD_VAR 0 1
60865: PUSH
60866: LD_EXP 44
60870: IN
60871: NOT
60872: PUSH
60873: LD_VAR 0 2
60877: NOT
60878: OR
60879: IFFALSE 60883
// exit ;
60881: GO 61158
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
60883: LD_ADDR_VAR 0 2
60887: PUSH
60888: LD_VAR 0 1
60892: PPUSH
60893: LD_VAR 0 2
60897: PPUSH
60898: LD_INT 1
60900: PPUSH
60901: LD_INT 1
60903: PPUSH
60904: CALL 20857 0 4
60908: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
60909: LD_ADDR_VAR 0 5
60913: PUSH
60914: LD_EXP 44
60918: PPUSH
60919: LD_VAR 0 1
60923: PPUSH
60924: CALL 20207 0 2
60928: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
60929: LD_EXP 45
60933: PUSH
60934: LD_VAR 0 5
60938: ARRAY
60939: PUSH
60940: LD_EXP 46
60944: LESS
60945: IFFALSE 61134
// begin for i := 1 to vehicles do
60947: LD_ADDR_VAR 0 4
60951: PUSH
60952: DOUBLE
60953: LD_INT 1
60955: DEC
60956: ST_TO_ADDR
60957: LD_VAR 0 2
60961: PUSH
60962: FOR_TO
60963: IFFALSE 61132
// begin if hackTanksCaptured [ index ] = hackLimit then
60965: LD_EXP 45
60969: PUSH
60970: LD_VAR 0 5
60974: ARRAY
60975: PUSH
60976: LD_EXP 46
60980: EQUAL
60981: IFFALSE 60985
// break ;
60983: GO 61132
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
60985: LD_ADDR_EXP 48
60989: PUSH
60990: LD_EXP 48
60994: PPUSH
60995: LD_VAR 0 5
60999: PPUSH
61000: LD_EXP 48
61004: PUSH
61005: LD_VAR 0 5
61009: ARRAY
61010: PUSH
61011: LD_INT 1
61013: PLUS
61014: PPUSH
61015: CALL_OW 1
61019: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
61020: LD_ADDR_EXP 45
61024: PUSH
61025: LD_EXP 45
61029: PPUSH
61030: LD_VAR 0 5
61034: PUSH
61035: LD_EXP 45
61039: PUSH
61040: LD_VAR 0 5
61044: ARRAY
61045: PUSH
61046: LD_INT 1
61048: PLUS
61049: PUSH
61050: EMPTY
61051: LIST
61052: LIST
61053: PPUSH
61054: LD_VAR 0 2
61058: PUSH
61059: LD_VAR 0 4
61063: ARRAY
61064: PUSH
61065: LD_VAR 0 2
61069: PUSH
61070: LD_VAR 0 4
61074: ARRAY
61075: PPUSH
61076: CALL_OW 255
61080: PUSH
61081: EMPTY
61082: LIST
61083: LIST
61084: PPUSH
61085: CALL 20422 0 3
61089: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
61090: LD_VAR 0 2
61094: PUSH
61095: LD_VAR 0 4
61099: ARRAY
61100: PPUSH
61101: LD_VAR 0 1
61105: PPUSH
61106: CALL_OW 255
61110: PPUSH
61111: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
61115: LD_VAR 0 2
61119: PUSH
61120: LD_VAR 0 4
61124: ARRAY
61125: PPUSH
61126: CALL_OW 141
// end ;
61130: GO 60962
61132: POP
61133: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
61134: LD_VAR 0 1
61138: PPUSH
61139: LD_EXP 45
61143: PUSH
61144: LD_VAR 0 5
61148: ARRAY
61149: PUSH
61150: LD_INT 0
61152: PLUS
61153: PPUSH
61154: CALL_OW 505
// end ;
61158: LD_VAR 0 3
61162: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
61163: LD_INT 0
61165: PPUSH
61166: PPUSH
61167: PPUSH
61168: PPUSH
// if not hack in hackTanks then
61169: LD_VAR 0 1
61173: PUSH
61174: LD_EXP 44
61178: IN
61179: NOT
61180: IFFALSE 61184
// exit ;
61182: GO 61424
// index := GetElementIndex ( hackTanks , hack ) ;
61184: LD_ADDR_VAR 0 4
61188: PUSH
61189: LD_EXP 44
61193: PPUSH
61194: LD_VAR 0 1
61198: PPUSH
61199: CALL 20207 0 2
61203: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
61204: LD_ADDR_VAR 0 3
61208: PUSH
61209: DOUBLE
61210: LD_EXP 45
61214: PUSH
61215: LD_VAR 0 4
61219: ARRAY
61220: INC
61221: ST_TO_ADDR
61222: LD_INT 1
61224: PUSH
61225: FOR_DOWNTO
61226: IFFALSE 61398
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
61228: LD_ADDR_VAR 0 5
61232: PUSH
61233: LD_EXP 45
61237: PUSH
61238: LD_VAR 0 4
61242: ARRAY
61243: PUSH
61244: LD_VAR 0 3
61248: ARRAY
61249: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
61250: LD_VAR 0 5
61254: PUSH
61255: LD_INT 1
61257: ARRAY
61258: PPUSH
61259: CALL_OW 302
61263: NOT
61264: PUSH
61265: LD_VAR 0 5
61269: PUSH
61270: LD_INT 1
61272: ARRAY
61273: PPUSH
61274: CALL_OW 255
61278: PUSH
61279: LD_VAR 0 1
61283: PPUSH
61284: CALL_OW 255
61288: NONEQUAL
61289: OR
61290: IFFALSE 61396
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
61292: LD_VAR 0 5
61296: PUSH
61297: LD_INT 1
61299: ARRAY
61300: PPUSH
61301: CALL_OW 305
61305: PUSH
61306: LD_VAR 0 5
61310: PUSH
61311: LD_INT 1
61313: ARRAY
61314: PPUSH
61315: CALL_OW 255
61319: PUSH
61320: LD_VAR 0 1
61324: PPUSH
61325: CALL_OW 255
61329: EQUAL
61330: AND
61331: IFFALSE 61355
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
61333: LD_VAR 0 5
61337: PUSH
61338: LD_INT 1
61340: ARRAY
61341: PPUSH
61342: LD_VAR 0 5
61346: PUSH
61347: LD_INT 2
61349: ARRAY
61350: PPUSH
61351: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
61355: LD_ADDR_EXP 45
61359: PUSH
61360: LD_EXP 45
61364: PPUSH
61365: LD_VAR 0 4
61369: PPUSH
61370: LD_EXP 45
61374: PUSH
61375: LD_VAR 0 4
61379: ARRAY
61380: PPUSH
61381: LD_VAR 0 3
61385: PPUSH
61386: CALL_OW 3
61390: PPUSH
61391: CALL_OW 1
61395: ST_TO_ADDR
// end ; end ;
61396: GO 61225
61398: POP
61399: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
61400: LD_VAR 0 1
61404: PPUSH
61405: LD_EXP 45
61409: PUSH
61410: LD_VAR 0 4
61414: ARRAY
61415: PUSH
61416: LD_INT 0
61418: PLUS
61419: PPUSH
61420: CALL_OW 505
// end ;
61424: LD_VAR 0 2
61428: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
61429: LD_INT 0
61431: PPUSH
61432: PPUSH
61433: PPUSH
61434: PPUSH
// if not hack in hackTanks then
61435: LD_VAR 0 1
61439: PUSH
61440: LD_EXP 44
61444: IN
61445: NOT
61446: IFFALSE 61450
// exit ;
61448: GO 61535
// index := GetElementIndex ( hackTanks , hack ) ;
61450: LD_ADDR_VAR 0 5
61454: PUSH
61455: LD_EXP 44
61459: PPUSH
61460: LD_VAR 0 1
61464: PPUSH
61465: CALL 20207 0 2
61469: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
61470: LD_ADDR_VAR 0 4
61474: PUSH
61475: DOUBLE
61476: LD_INT 1
61478: DEC
61479: ST_TO_ADDR
61480: LD_EXP 45
61484: PUSH
61485: LD_VAR 0 5
61489: ARRAY
61490: PUSH
61491: FOR_TO
61492: IFFALSE 61533
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
61494: LD_EXP 45
61498: PUSH
61499: LD_VAR 0 5
61503: ARRAY
61504: PUSH
61505: LD_VAR 0 4
61509: ARRAY
61510: PUSH
61511: LD_INT 1
61513: ARRAY
61514: PUSH
61515: LD_VAR 0 2
61519: EQUAL
61520: IFFALSE 61531
// KillUnit ( vehicle ) ;
61522: LD_VAR 0 2
61526: PPUSH
61527: CALL_OW 66
61531: GO 61491
61533: POP
61534: POP
// end ;
61535: LD_VAR 0 3
61539: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
61540: LD_EXP 49
61544: NOT
61545: IFFALSE 61580
61547: GO 61549
61549: DISABLE
// begin initMiner := true ;
61550: LD_ADDR_EXP 49
61554: PUSH
61555: LD_INT 1
61557: ST_TO_ADDR
// minersList := [ ] ;
61558: LD_ADDR_EXP 50
61562: PUSH
61563: EMPTY
61564: ST_TO_ADDR
// minerMinesList := [ ] ;
61565: LD_ADDR_EXP 51
61569: PUSH
61570: EMPTY
61571: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
61572: LD_ADDR_EXP 52
61576: PUSH
61577: LD_INT 5
61579: ST_TO_ADDR
// end ;
61580: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
61581: LD_EXP 49
61585: PUSH
61586: LD_INT 34
61588: PUSH
61589: LD_INT 81
61591: PUSH
61592: EMPTY
61593: LIST
61594: LIST
61595: PPUSH
61596: CALL_OW 69
61600: AND
61601: IFFALSE 62062
61603: GO 61605
61605: DISABLE
61606: LD_INT 0
61608: PPUSH
61609: PPUSH
61610: PPUSH
61611: PPUSH
// begin enable ;
61612: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
61613: LD_ADDR_VAR 0 1
61617: PUSH
61618: LD_INT 34
61620: PUSH
61621: LD_INT 81
61623: PUSH
61624: EMPTY
61625: LIST
61626: LIST
61627: PPUSH
61628: CALL_OW 69
61632: PUSH
61633: FOR_IN
61634: IFFALSE 61706
// begin if not i in minersList then
61636: LD_VAR 0 1
61640: PUSH
61641: LD_EXP 50
61645: IN
61646: NOT
61647: IFFALSE 61704
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
61649: LD_ADDR_EXP 50
61653: PUSH
61654: LD_EXP 50
61658: PPUSH
61659: LD_EXP 50
61663: PUSH
61664: LD_INT 1
61666: PLUS
61667: PPUSH
61668: LD_VAR 0 1
61672: PPUSH
61673: CALL_OW 1
61677: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
61678: LD_ADDR_EXP 51
61682: PUSH
61683: LD_EXP 51
61687: PPUSH
61688: LD_EXP 51
61692: PUSH
61693: LD_INT 1
61695: PLUS
61696: PPUSH
61697: EMPTY
61698: PPUSH
61699: CALL_OW 1
61703: ST_TO_ADDR
// end end ;
61704: GO 61633
61706: POP
61707: POP
// for i := minerMinesList downto 1 do
61708: LD_ADDR_VAR 0 1
61712: PUSH
61713: DOUBLE
61714: LD_EXP 51
61718: INC
61719: ST_TO_ADDR
61720: LD_INT 1
61722: PUSH
61723: FOR_DOWNTO
61724: IFFALSE 62060
// begin if IsLive ( minersList [ i ] ) then
61726: LD_EXP 50
61730: PUSH
61731: LD_VAR 0 1
61735: ARRAY
61736: PPUSH
61737: CALL_OW 300
61741: IFFALSE 61769
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
61743: LD_EXP 50
61747: PUSH
61748: LD_VAR 0 1
61752: ARRAY
61753: PPUSH
61754: LD_EXP 51
61758: PUSH
61759: LD_VAR 0 1
61763: ARRAY
61764: PPUSH
61765: CALL_OW 505
// if not minerMinesList [ i ] then
61769: LD_EXP 51
61773: PUSH
61774: LD_VAR 0 1
61778: ARRAY
61779: NOT
61780: IFFALSE 61784
// continue ;
61782: GO 61723
// for j := minerMinesList [ i ] downto 1 do
61784: LD_ADDR_VAR 0 2
61788: PUSH
61789: DOUBLE
61790: LD_EXP 51
61794: PUSH
61795: LD_VAR 0 1
61799: ARRAY
61800: INC
61801: ST_TO_ADDR
61802: LD_INT 1
61804: PUSH
61805: FOR_DOWNTO
61806: IFFALSE 62056
// begin side := GetSide ( minersList [ i ] ) ;
61808: LD_ADDR_VAR 0 3
61812: PUSH
61813: LD_EXP 50
61817: PUSH
61818: LD_VAR 0 1
61822: ARRAY
61823: PPUSH
61824: CALL_OW 255
61828: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
61829: LD_ADDR_VAR 0 4
61833: PUSH
61834: LD_EXP 51
61838: PUSH
61839: LD_VAR 0 1
61843: ARRAY
61844: PUSH
61845: LD_VAR 0 2
61849: ARRAY
61850: PUSH
61851: LD_INT 1
61853: ARRAY
61854: PPUSH
61855: LD_EXP 51
61859: PUSH
61860: LD_VAR 0 1
61864: ARRAY
61865: PUSH
61866: LD_VAR 0 2
61870: ARRAY
61871: PUSH
61872: LD_INT 2
61874: ARRAY
61875: PPUSH
61876: CALL_OW 428
61880: ST_TO_ADDR
// if not tmp then
61881: LD_VAR 0 4
61885: NOT
61886: IFFALSE 61890
// continue ;
61888: GO 61805
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
61890: LD_VAR 0 4
61894: PUSH
61895: LD_INT 81
61897: PUSH
61898: LD_VAR 0 3
61902: PUSH
61903: EMPTY
61904: LIST
61905: LIST
61906: PPUSH
61907: CALL_OW 69
61911: IN
61912: PUSH
61913: LD_EXP 51
61917: PUSH
61918: LD_VAR 0 1
61922: ARRAY
61923: PUSH
61924: LD_VAR 0 2
61928: ARRAY
61929: PUSH
61930: LD_INT 1
61932: ARRAY
61933: PPUSH
61934: LD_EXP 51
61938: PUSH
61939: LD_VAR 0 1
61943: ARRAY
61944: PUSH
61945: LD_VAR 0 2
61949: ARRAY
61950: PUSH
61951: LD_INT 2
61953: ARRAY
61954: PPUSH
61955: CALL_OW 458
61959: AND
61960: IFFALSE 62054
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
61962: LD_EXP 51
61966: PUSH
61967: LD_VAR 0 1
61971: ARRAY
61972: PUSH
61973: LD_VAR 0 2
61977: ARRAY
61978: PUSH
61979: LD_INT 1
61981: ARRAY
61982: PPUSH
61983: LD_EXP 51
61987: PUSH
61988: LD_VAR 0 1
61992: ARRAY
61993: PUSH
61994: LD_VAR 0 2
61998: ARRAY
61999: PUSH
62000: LD_INT 2
62002: ARRAY
62003: PPUSH
62004: LD_VAR 0 3
62008: PPUSH
62009: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
62013: LD_ADDR_EXP 51
62017: PUSH
62018: LD_EXP 51
62022: PPUSH
62023: LD_VAR 0 1
62027: PPUSH
62028: LD_EXP 51
62032: PUSH
62033: LD_VAR 0 1
62037: ARRAY
62038: PPUSH
62039: LD_VAR 0 2
62043: PPUSH
62044: CALL_OW 3
62048: PPUSH
62049: CALL_OW 1
62053: ST_TO_ADDR
// end ; end ;
62054: GO 61805
62056: POP
62057: POP
// end ;
62058: GO 61723
62060: POP
62061: POP
// end ;
62062: PPOPN 4
62064: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
62065: LD_INT 0
62067: PPUSH
62068: PPUSH
// result := false ;
62069: LD_ADDR_VAR 0 4
62073: PUSH
62074: LD_INT 0
62076: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
62077: LD_VAR 0 1
62081: PPUSH
62082: CALL_OW 264
62086: PUSH
62087: LD_INT 81
62089: EQUAL
62090: NOT
62091: IFFALSE 62095
// exit ;
62093: GO 62335
// index := GetElementIndex ( minersList , unit ) ;
62095: LD_ADDR_VAR 0 5
62099: PUSH
62100: LD_EXP 50
62104: PPUSH
62105: LD_VAR 0 1
62109: PPUSH
62110: CALL 20207 0 2
62114: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
62115: LD_EXP 51
62119: PUSH
62120: LD_VAR 0 5
62124: ARRAY
62125: PUSH
62126: LD_EXP 52
62130: GREATEREQUAL
62131: IFFALSE 62135
// exit ;
62133: GO 62335
// ComMoveXY ( unit , x , y ) ;
62135: LD_VAR 0 1
62139: PPUSH
62140: LD_VAR 0 2
62144: PPUSH
62145: LD_VAR 0 3
62149: PPUSH
62150: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
62154: LD_INT 35
62156: PPUSH
62157: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
62161: LD_VAR 0 1
62165: PPUSH
62166: LD_VAR 0 2
62170: PPUSH
62171: LD_VAR 0 3
62175: PPUSH
62176: CALL 51968 0 3
62180: NOT
62181: PUSH
62182: LD_VAR 0 1
62186: PPUSH
62187: CALL_OW 314
62191: AND
62192: IFFALSE 62196
// exit ;
62194: GO 62335
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
62196: LD_VAR 0 2
62200: PPUSH
62201: LD_VAR 0 3
62205: PPUSH
62206: CALL_OW 428
62210: PUSH
62211: LD_VAR 0 1
62215: EQUAL
62216: PUSH
62217: LD_VAR 0 1
62221: PPUSH
62222: CALL_OW 314
62226: NOT
62227: AND
62228: IFFALSE 62154
// PlaySoundXY ( x , y , PlantMine ) ;
62230: LD_VAR 0 2
62234: PPUSH
62235: LD_VAR 0 3
62239: PPUSH
62240: LD_STRING PlantMine
62242: PPUSH
62243: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
62247: LD_VAR 0 2
62251: PPUSH
62252: LD_VAR 0 3
62256: PPUSH
62257: LD_VAR 0 1
62261: PPUSH
62262: CALL_OW 255
62266: PPUSH
62267: LD_INT 0
62269: PPUSH
62270: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
62274: LD_ADDR_EXP 51
62278: PUSH
62279: LD_EXP 51
62283: PPUSH
62284: LD_VAR 0 5
62288: PUSH
62289: LD_EXP 51
62293: PUSH
62294: LD_VAR 0 5
62298: ARRAY
62299: PUSH
62300: LD_INT 1
62302: PLUS
62303: PUSH
62304: EMPTY
62305: LIST
62306: LIST
62307: PPUSH
62308: LD_VAR 0 2
62312: PUSH
62313: LD_VAR 0 3
62317: PUSH
62318: EMPTY
62319: LIST
62320: LIST
62321: PPUSH
62322: CALL 20422 0 3
62326: ST_TO_ADDR
// result := true ;
62327: LD_ADDR_VAR 0 4
62331: PUSH
62332: LD_INT 1
62334: ST_TO_ADDR
// end ;
62335: LD_VAR 0 4
62339: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
62340: LD_INT 0
62342: PPUSH
62343: PPUSH
62344: PPUSH
// if not unit in minersList then
62345: LD_VAR 0 1
62349: PUSH
62350: LD_EXP 50
62354: IN
62355: NOT
62356: IFFALSE 62360
// exit ;
62358: GO 62752
// index := GetElementIndex ( minersList , unit ) ;
62360: LD_ADDR_VAR 0 6
62364: PUSH
62365: LD_EXP 50
62369: PPUSH
62370: LD_VAR 0 1
62374: PPUSH
62375: CALL 20207 0 2
62379: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
62380: LD_ADDR_VAR 0 5
62384: PUSH
62385: DOUBLE
62386: LD_EXP 51
62390: PUSH
62391: LD_VAR 0 6
62395: ARRAY
62396: INC
62397: ST_TO_ADDR
62398: LD_INT 1
62400: PUSH
62401: FOR_DOWNTO
62402: IFFALSE 62563
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
62404: LD_EXP 51
62408: PUSH
62409: LD_VAR 0 6
62413: ARRAY
62414: PUSH
62415: LD_VAR 0 5
62419: ARRAY
62420: PUSH
62421: LD_INT 1
62423: ARRAY
62424: PUSH
62425: LD_VAR 0 2
62429: EQUAL
62430: PUSH
62431: LD_EXP 51
62435: PUSH
62436: LD_VAR 0 6
62440: ARRAY
62441: PUSH
62442: LD_VAR 0 5
62446: ARRAY
62447: PUSH
62448: LD_INT 2
62450: ARRAY
62451: PUSH
62452: LD_VAR 0 3
62456: EQUAL
62457: AND
62458: IFFALSE 62561
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
62460: LD_EXP 51
62464: PUSH
62465: LD_VAR 0 6
62469: ARRAY
62470: PUSH
62471: LD_VAR 0 5
62475: ARRAY
62476: PUSH
62477: LD_INT 1
62479: ARRAY
62480: PPUSH
62481: LD_EXP 51
62485: PUSH
62486: LD_VAR 0 6
62490: ARRAY
62491: PUSH
62492: LD_VAR 0 5
62496: ARRAY
62497: PUSH
62498: LD_INT 2
62500: ARRAY
62501: PPUSH
62502: LD_VAR 0 1
62506: PPUSH
62507: CALL_OW 255
62511: PPUSH
62512: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
62516: LD_ADDR_EXP 51
62520: PUSH
62521: LD_EXP 51
62525: PPUSH
62526: LD_VAR 0 6
62530: PPUSH
62531: LD_EXP 51
62535: PUSH
62536: LD_VAR 0 6
62540: ARRAY
62541: PPUSH
62542: LD_VAR 0 5
62546: PPUSH
62547: CALL_OW 3
62551: PPUSH
62552: CALL_OW 1
62556: ST_TO_ADDR
// exit ;
62557: POP
62558: POP
62559: GO 62752
// end ; end ;
62561: GO 62401
62563: POP
62564: POP
// for i := minerMinesList [ index ] downto 1 do
62565: LD_ADDR_VAR 0 5
62569: PUSH
62570: DOUBLE
62571: LD_EXP 51
62575: PUSH
62576: LD_VAR 0 6
62580: ARRAY
62581: INC
62582: ST_TO_ADDR
62583: LD_INT 1
62585: PUSH
62586: FOR_DOWNTO
62587: IFFALSE 62750
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
62589: LD_EXP 51
62593: PUSH
62594: LD_VAR 0 6
62598: ARRAY
62599: PUSH
62600: LD_VAR 0 5
62604: ARRAY
62605: PUSH
62606: LD_INT 1
62608: ARRAY
62609: PPUSH
62610: LD_EXP 51
62614: PUSH
62615: LD_VAR 0 6
62619: ARRAY
62620: PUSH
62621: LD_VAR 0 5
62625: ARRAY
62626: PUSH
62627: LD_INT 2
62629: ARRAY
62630: PPUSH
62631: LD_VAR 0 2
62635: PPUSH
62636: LD_VAR 0 3
62640: PPUSH
62641: CALL_OW 298
62645: PUSH
62646: LD_INT 6
62648: LESS
62649: IFFALSE 62748
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
62651: LD_EXP 51
62655: PUSH
62656: LD_VAR 0 6
62660: ARRAY
62661: PUSH
62662: LD_VAR 0 5
62666: ARRAY
62667: PUSH
62668: LD_INT 1
62670: ARRAY
62671: PPUSH
62672: LD_EXP 51
62676: PUSH
62677: LD_VAR 0 6
62681: ARRAY
62682: PUSH
62683: LD_VAR 0 5
62687: ARRAY
62688: PUSH
62689: LD_INT 2
62691: ARRAY
62692: PPUSH
62693: LD_VAR 0 1
62697: PPUSH
62698: CALL_OW 255
62702: PPUSH
62703: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
62707: LD_ADDR_EXP 51
62711: PUSH
62712: LD_EXP 51
62716: PPUSH
62717: LD_VAR 0 6
62721: PPUSH
62722: LD_EXP 51
62726: PUSH
62727: LD_VAR 0 6
62731: ARRAY
62732: PPUSH
62733: LD_VAR 0 5
62737: PPUSH
62738: CALL_OW 3
62742: PPUSH
62743: CALL_OW 1
62747: ST_TO_ADDR
// end ; end ;
62748: GO 62586
62750: POP
62751: POP
// end ;
62752: LD_VAR 0 4
62756: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
62757: LD_INT 0
62759: PPUSH
62760: PPUSH
62761: PPUSH
62762: PPUSH
62763: PPUSH
62764: PPUSH
62765: PPUSH
62766: PPUSH
62767: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
62768: LD_VAR 0 1
62772: PPUSH
62773: CALL_OW 264
62777: PUSH
62778: LD_INT 81
62780: EQUAL
62781: NOT
62782: PUSH
62783: LD_VAR 0 1
62787: PUSH
62788: LD_EXP 50
62792: IN
62793: NOT
62794: OR
62795: IFFALSE 62799
// exit ;
62797: GO 63121
// index := GetElementIndex ( minersList , unit ) ;
62799: LD_ADDR_VAR 0 6
62803: PUSH
62804: LD_EXP 50
62808: PPUSH
62809: LD_VAR 0 1
62813: PPUSH
62814: CALL 20207 0 2
62818: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
62819: LD_ADDR_VAR 0 8
62823: PUSH
62824: LD_EXP 52
62828: PUSH
62829: LD_EXP 51
62833: PUSH
62834: LD_VAR 0 6
62838: ARRAY
62839: MINUS
62840: ST_TO_ADDR
// if not minesFreeAmount then
62841: LD_VAR 0 8
62845: NOT
62846: IFFALSE 62850
// exit ;
62848: GO 63121
// tmp := [ ] ;
62850: LD_ADDR_VAR 0 7
62854: PUSH
62855: EMPTY
62856: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
62857: LD_ADDR_VAR 0 5
62861: PUSH
62862: DOUBLE
62863: LD_INT 1
62865: DEC
62866: ST_TO_ADDR
62867: LD_VAR 0 8
62871: PUSH
62872: FOR_TO
62873: IFFALSE 63068
// begin _d := rand ( 0 , 5 ) ;
62875: LD_ADDR_VAR 0 11
62879: PUSH
62880: LD_INT 0
62882: PPUSH
62883: LD_INT 5
62885: PPUSH
62886: CALL_OW 12
62890: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
62891: LD_ADDR_VAR 0 12
62895: PUSH
62896: LD_INT 2
62898: PPUSH
62899: LD_INT 6
62901: PPUSH
62902: CALL_OW 12
62906: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
62907: LD_ADDR_VAR 0 9
62911: PUSH
62912: LD_VAR 0 2
62916: PPUSH
62917: LD_VAR 0 11
62921: PPUSH
62922: LD_VAR 0 12
62926: PPUSH
62927: CALL_OW 272
62931: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
62932: LD_ADDR_VAR 0 10
62936: PUSH
62937: LD_VAR 0 3
62941: PPUSH
62942: LD_VAR 0 11
62946: PPUSH
62947: LD_VAR 0 12
62951: PPUSH
62952: CALL_OW 273
62956: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
62957: LD_VAR 0 9
62961: PPUSH
62962: LD_VAR 0 10
62966: PPUSH
62967: CALL_OW 488
62971: PUSH
62972: LD_VAR 0 9
62976: PUSH
62977: LD_VAR 0 10
62981: PUSH
62982: EMPTY
62983: LIST
62984: LIST
62985: PUSH
62986: LD_VAR 0 7
62990: IN
62991: NOT
62992: AND
62993: PUSH
62994: LD_VAR 0 9
62998: PPUSH
62999: LD_VAR 0 10
63003: PPUSH
63004: CALL_OW 458
63008: NOT
63009: AND
63010: IFFALSE 63052
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
63012: LD_ADDR_VAR 0 7
63016: PUSH
63017: LD_VAR 0 7
63021: PPUSH
63022: LD_VAR 0 7
63026: PUSH
63027: LD_INT 1
63029: PLUS
63030: PPUSH
63031: LD_VAR 0 9
63035: PUSH
63036: LD_VAR 0 10
63040: PUSH
63041: EMPTY
63042: LIST
63043: LIST
63044: PPUSH
63045: CALL_OW 1
63049: ST_TO_ADDR
63050: GO 63066
// i := i - 1 ;
63052: LD_ADDR_VAR 0 5
63056: PUSH
63057: LD_VAR 0 5
63061: PUSH
63062: LD_INT 1
63064: MINUS
63065: ST_TO_ADDR
// end ;
63066: GO 62872
63068: POP
63069: POP
// for i in tmp do
63070: LD_ADDR_VAR 0 5
63074: PUSH
63075: LD_VAR 0 7
63079: PUSH
63080: FOR_IN
63081: IFFALSE 63119
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
63083: LD_VAR 0 1
63087: PPUSH
63088: LD_VAR 0 5
63092: PUSH
63093: LD_INT 1
63095: ARRAY
63096: PPUSH
63097: LD_VAR 0 5
63101: PUSH
63102: LD_INT 2
63104: ARRAY
63105: PPUSH
63106: CALL 62065 0 3
63110: NOT
63111: IFFALSE 63117
// exit ;
63113: POP
63114: POP
63115: GO 63121
63117: GO 63080
63119: POP
63120: POP
// end ;
63121: LD_VAR 0 4
63125: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
63126: LD_INT 0
63128: PPUSH
63129: PPUSH
63130: PPUSH
63131: PPUSH
63132: PPUSH
63133: PPUSH
63134: PPUSH
63135: PPUSH
63136: PPUSH
// if GetClass ( unit ) <> class_sniper then
63137: LD_VAR 0 1
63141: PPUSH
63142: CALL_OW 257
63146: PUSH
63147: LD_INT 5
63149: NONEQUAL
63150: IFFALSE 63154
// exit ;
63152: GO 63620
// dist := 8 ;
63154: LD_ADDR_VAR 0 5
63158: PUSH
63159: LD_INT 8
63161: ST_TO_ADDR
// viewRange := 12 ;
63162: LD_ADDR_VAR 0 8
63166: PUSH
63167: LD_INT 12
63169: ST_TO_ADDR
// side := GetSide ( unit ) ;
63170: LD_ADDR_VAR 0 6
63174: PUSH
63175: LD_VAR 0 1
63179: PPUSH
63180: CALL_OW 255
63184: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
63185: LD_INT 61
63187: PPUSH
63188: LD_VAR 0 6
63192: PPUSH
63193: CALL_OW 321
63197: PUSH
63198: LD_INT 2
63200: EQUAL
63201: IFFALSE 63211
// viewRange := 16 ;
63203: LD_ADDR_VAR 0 8
63207: PUSH
63208: LD_INT 16
63210: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
63211: LD_VAR 0 1
63215: PPUSH
63216: LD_VAR 0 2
63220: PPUSH
63221: LD_VAR 0 3
63225: PPUSH
63226: CALL_OW 297
63230: PUSH
63231: LD_VAR 0 5
63235: GREATER
63236: IFFALSE 63315
// begin ComMoveXY ( unit , x , y ) ;
63238: LD_VAR 0 1
63242: PPUSH
63243: LD_VAR 0 2
63247: PPUSH
63248: LD_VAR 0 3
63252: PPUSH
63253: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
63257: LD_INT 35
63259: PPUSH
63260: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
63264: LD_VAR 0 1
63268: PPUSH
63269: LD_VAR 0 2
63273: PPUSH
63274: LD_VAR 0 3
63278: PPUSH
63279: CALL 51968 0 3
63283: NOT
63284: IFFALSE 63288
// exit ;
63286: GO 63620
// until GetDistUnitXY ( unit , x , y ) < dist ;
63288: LD_VAR 0 1
63292: PPUSH
63293: LD_VAR 0 2
63297: PPUSH
63298: LD_VAR 0 3
63302: PPUSH
63303: CALL_OW 297
63307: PUSH
63308: LD_VAR 0 5
63312: LESS
63313: IFFALSE 63257
// end ; ComTurnXY ( unit , x , y ) ;
63315: LD_VAR 0 1
63319: PPUSH
63320: LD_VAR 0 2
63324: PPUSH
63325: LD_VAR 0 3
63329: PPUSH
63330: CALL_OW 118
// repeat if Multiplayer then
63334: LD_OWVAR 4
63338: IFFALSE 63349
// wait ( 35 ) else
63340: LD_INT 35
63342: PPUSH
63343: CALL_OW 67
63347: GO 63356
// wait ( 5 ) ;
63349: LD_INT 5
63351: PPUSH
63352: CALL_OW 67
// _d := GetDir ( unit ) ;
63356: LD_ADDR_VAR 0 11
63360: PUSH
63361: LD_VAR 0 1
63365: PPUSH
63366: CALL_OW 254
63370: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
63371: LD_ADDR_VAR 0 7
63375: PUSH
63376: LD_VAR 0 1
63380: PPUSH
63381: CALL_OW 250
63385: PPUSH
63386: LD_VAR 0 1
63390: PPUSH
63391: CALL_OW 251
63395: PPUSH
63396: LD_VAR 0 2
63400: PPUSH
63401: LD_VAR 0 3
63405: PPUSH
63406: CALL 54576 0 4
63410: ST_TO_ADDR
// until dir = _d ;
63411: LD_VAR 0 7
63415: PUSH
63416: LD_VAR 0 11
63420: EQUAL
63421: IFFALSE 63334
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
63423: LD_ADDR_VAR 0 9
63427: PUSH
63428: LD_VAR 0 1
63432: PPUSH
63433: CALL_OW 250
63437: PPUSH
63438: LD_VAR 0 7
63442: PPUSH
63443: LD_VAR 0 5
63447: PPUSH
63448: CALL_OW 272
63452: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
63453: LD_ADDR_VAR 0 10
63457: PUSH
63458: LD_VAR 0 1
63462: PPUSH
63463: CALL_OW 251
63467: PPUSH
63468: LD_VAR 0 7
63472: PPUSH
63473: LD_VAR 0 5
63477: PPUSH
63478: CALL_OW 273
63482: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
63483: LD_VAR 0 9
63487: PPUSH
63488: LD_VAR 0 10
63492: PPUSH
63493: CALL_OW 488
63497: NOT
63498: IFFALSE 63502
// exit ;
63500: GO 63620
// ComAnimCustom ( unit , 1 ) ;
63502: LD_VAR 0 1
63506: PPUSH
63507: LD_INT 1
63509: PPUSH
63510: CALL_OW 592
// p := 0 ;
63514: LD_ADDR_VAR 0 12
63518: PUSH
63519: LD_INT 0
63521: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
63522: LD_VAR 0 9
63526: PPUSH
63527: LD_VAR 0 10
63531: PPUSH
63532: LD_VAR 0 6
63536: PPUSH
63537: LD_VAR 0 8
63541: PPUSH
63542: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
63546: LD_INT 35
63548: PPUSH
63549: CALL_OW 67
// p := Inc ( p ) ;
63553: LD_ADDR_VAR 0 12
63557: PUSH
63558: LD_VAR 0 12
63562: PPUSH
63563: CALL 54532 0 1
63567: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
63568: LD_VAR 0 12
63572: PUSH
63573: LD_INT 3
63575: EQUAL
63576: PUSH
63577: LD_VAR 0 1
63581: PPUSH
63582: CALL_OW 302
63586: NOT
63587: OR
63588: PUSH
63589: LD_VAR 0 1
63593: PPUSH
63594: CALL_OW 301
63598: OR
63599: IFFALSE 63546
// RemoveSeeing ( _x , _y , side ) ;
63601: LD_VAR 0 9
63605: PPUSH
63606: LD_VAR 0 10
63610: PPUSH
63611: LD_VAR 0 6
63615: PPUSH
63616: CALL_OW 331
// end ; end_of_file end_of_file
63620: LD_VAR 0 4
63624: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
63625: PPOPN 6
63627: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
63628: LD_EXP 36
63632: PUSH
63633: LD_INT 4
63635: EQUAL
63636: IFFALSE 63672
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
63638: LD_STRING setGameDifficulty(
63640: PUSH
63641: LD_OWVAR 67
63645: STR
63646: PUSH
63647: LD_STRING )
63649: STR
63650: PPUSH
63651: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
63655: LD_STRING displayDifficulty(
63657: PUSH
63658: LD_OWVAR 67
63662: STR
63663: PUSH
63664: LD_STRING )
63666: STR
63667: PPUSH
63668: CALL_OW 559
// end ; SOS_MapStart ( ) ;
63672: CALL 63701 0 0
// end ; end_of_file
63676: PPOPN 1
63678: END
// every 0 0$1 do
63679: GO 63681
63681: DISABLE
// begin enable ;
63682: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
63683: LD_STRING updateTimer(
63685: PUSH
63686: LD_OWVAR 1
63690: STR
63691: PUSH
63692: LD_STRING );
63694: STR
63695: PPUSH
63696: CALL_OW 559
// end ;
63700: END
// export function SOS_MapStart ( ) ; begin
63701: LD_INT 0
63703: PPUSH
// UpdateFactoryWaypoints ( ) ;
63704: CALL 64629 0 0
// UpdateWarehouseGatheringPoints ( ) ;
63708: CALL 64881 0 0
// ParseMultiDataToLua ( ) ;
63712: CALL 65028 0 0
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
63716: LD_STRING setSpecLogoNumber(
63718: PUSH
63719: LD_INT 2
63721: STR
63722: PUSH
63723: LD_STRING ,
63725: STR
63726: PUSH
63727: LD_INT 1
63729: STR
63730: PUSH
63731: LD_STRING )
63733: STR
63734: PPUSH
63735: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
63739: LD_STRING setSpecLogoNumber(
63741: PUSH
63742: LD_INT 3
63744: STR
63745: PUSH
63746: LD_STRING ,
63748: STR
63749: PUSH
63750: LD_INT 2
63752: STR
63753: PUSH
63754: LD_STRING )
63756: STR
63757: PPUSH
63758: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
63762: LD_STRING setSpecLogoNumber(
63764: PUSH
63765: LD_INT 4
63767: STR
63768: PUSH
63769: LD_STRING ,
63771: STR
63772: PUSH
63773: LD_INT 3
63775: STR
63776: PUSH
63777: LD_STRING )
63779: STR
63780: PPUSH
63781: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
63785: LD_STRING setSpecLogoNumber(
63787: PUSH
63788: LD_INT 5
63790: STR
63791: PUSH
63792: LD_STRING ,
63794: STR
63795: PUSH
63796: LD_INT 4
63798: STR
63799: PUSH
63800: LD_STRING )
63802: STR
63803: PPUSH
63804: CALL_OW 559
// end ;
63808: LD_VAR 0 1
63812: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
63813: LD_INT 0
63815: PPUSH
63816: PPUSH
63817: PPUSH
63818: PPUSH
63819: PPUSH
63820: PPUSH
63821: PPUSH
63822: PPUSH
63823: PPUSH
// for i := 1 to 8 do
63824: LD_ADDR_VAR 0 2
63828: PUSH
63829: DOUBLE
63830: LD_INT 1
63832: DEC
63833: ST_TO_ADDR
63834: LD_INT 8
63836: PUSH
63837: FOR_TO
63838: IFFALSE 64223
// begin if mpSidePositions [ i ] then
63840: LD_EXP 37
63844: PUSH
63845: LD_VAR 0 2
63849: ARRAY
63850: IFFALSE 64221
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
63852: LD_ADDR_VAR 0 7
63856: PUSH
63857: LD_INT 22
63859: PUSH
63860: LD_VAR 0 2
63864: PUSH
63865: EMPTY
63866: LIST
63867: LIST
63868: PUSH
63869: LD_INT 21
63871: PUSH
63872: LD_INT 1
63874: PUSH
63875: EMPTY
63876: LIST
63877: LIST
63878: PUSH
63879: EMPTY
63880: LIST
63881: LIST
63882: PPUSH
63883: CALL_OW 69
63887: PPUSH
63888: CALL 17562 0 1
63892: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
63893: LD_ADDR_VAR 0 9
63897: PUSH
63898: LD_INT 22
63900: PUSH
63901: LD_VAR 0 2
63905: PUSH
63906: EMPTY
63907: LIST
63908: LIST
63909: PUSH
63910: LD_INT 2
63912: PUSH
63913: LD_INT 30
63915: PUSH
63916: LD_INT 0
63918: PUSH
63919: EMPTY
63920: LIST
63921: LIST
63922: PUSH
63923: LD_INT 30
63925: PUSH
63926: LD_INT 1
63928: PUSH
63929: EMPTY
63930: LIST
63931: LIST
63932: PUSH
63933: EMPTY
63934: LIST
63935: LIST
63936: LIST
63937: PUSH
63938: EMPTY
63939: LIST
63940: LIST
63941: PPUSH
63942: CALL_OW 69
63946: ST_TO_ADDR
// crates := 0 ;
63947: LD_ADDR_VAR 0 4
63951: PUSH
63952: LD_INT 0
63954: ST_TO_ADDR
// oil := 0 ;
63955: LD_ADDR_VAR 0 5
63959: PUSH
63960: LD_INT 0
63962: ST_TO_ADDR
// sib := 0 ;
63963: LD_ADDR_VAR 0 6
63967: PUSH
63968: LD_INT 0
63970: ST_TO_ADDR
// if bases then
63971: LD_VAR 0 9
63975: IFFALSE 64081
// begin for j in bases do
63977: LD_ADDR_VAR 0 3
63981: PUSH
63982: LD_VAR 0 9
63986: PUSH
63987: FOR_IN
63988: IFFALSE 64079
// begin base := GetBase ( j ) ;
63990: LD_ADDR_VAR 0 8
63994: PUSH
63995: LD_VAR 0 3
63999: PPUSH
64000: CALL_OW 274
64004: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
64005: LD_ADDR_VAR 0 4
64009: PUSH
64010: LD_VAR 0 4
64014: PUSH
64015: LD_VAR 0 8
64019: PPUSH
64020: LD_INT 1
64022: PPUSH
64023: CALL_OW 275
64027: PLUS
64028: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
64029: LD_ADDR_VAR 0 5
64033: PUSH
64034: LD_VAR 0 5
64038: PUSH
64039: LD_VAR 0 8
64043: PPUSH
64044: LD_INT 2
64046: PPUSH
64047: CALL_OW 275
64051: PLUS
64052: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
64053: LD_ADDR_VAR 0 6
64057: PUSH
64058: LD_VAR 0 6
64062: PUSH
64063: LD_VAR 0 8
64067: PPUSH
64068: LD_INT 3
64070: PPUSH
64071: CALL_OW 275
64075: PLUS
64076: ST_TO_ADDR
// end ;
64077: GO 63987
64079: POP
64080: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
64081: LD_STRING setSpecText(
64083: PUSH
64084: LD_VAR 0 2
64088: STR
64089: PUSH
64090: LD_STRING ,
64092: STR
64093: PUSH
64094: LD_INT 2
64096: STR
64097: PUSH
64098: LD_STRING ,
64100: STR
64101: PUSH
64102: LD_VAR 0 4
64106: STR
64107: PUSH
64108: LD_STRING )
64110: STR
64111: PPUSH
64112: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
64116: LD_STRING setSpecText(
64118: PUSH
64119: LD_VAR 0 2
64123: STR
64124: PUSH
64125: LD_STRING ,
64127: STR
64128: PUSH
64129: LD_INT 3
64131: STR
64132: PUSH
64133: LD_STRING ,
64135: STR
64136: PUSH
64137: LD_VAR 0 5
64141: STR
64142: PUSH
64143: LD_STRING )
64145: STR
64146: PPUSH
64147: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
64151: LD_STRING setSpecText(
64153: PUSH
64154: LD_VAR 0 2
64158: STR
64159: PUSH
64160: LD_STRING ,
64162: STR
64163: PUSH
64164: LD_INT 4
64166: STR
64167: PUSH
64168: LD_STRING ,
64170: STR
64171: PUSH
64172: LD_VAR 0 6
64176: STR
64177: PUSH
64178: LD_STRING )
64180: STR
64181: PPUSH
64182: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
64186: LD_STRING setSpecText(
64188: PUSH
64189: LD_VAR 0 2
64193: STR
64194: PUSH
64195: LD_STRING ,
64197: STR
64198: PUSH
64199: LD_INT 5
64201: STR
64202: PUSH
64203: LD_STRING ,
64205: STR
64206: PUSH
64207: LD_VAR 0 7
64211: STR
64212: PUSH
64213: LD_STRING )
64215: STR
64216: PPUSH
64217: CALL_OW 559
// end ; end ;
64221: GO 63837
64223: POP
64224: POP
// end ;
64225: LD_VAR 0 1
64229: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
64230: LD_INT 2
64232: PUSH
64233: LD_INT 30
64235: PUSH
64236: LD_INT 0
64238: PUSH
64239: EMPTY
64240: LIST
64241: LIST
64242: PUSH
64243: LD_INT 30
64245: PUSH
64246: LD_INT 1
64248: PUSH
64249: EMPTY
64250: LIST
64251: LIST
64252: PUSH
64253: EMPTY
64254: LIST
64255: LIST
64256: LIST
64257: PPUSH
64258: CALL_OW 69
64262: IFFALSE 64272
64264: GO 64266
64266: DISABLE
// begin enable ;
64267: ENABLE
// UpdateSpectatorBar ;
64268: CALL 63813 0 0
// end ;
64272: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
64273: LD_INT 0
64275: PPUSH
// end ;
64276: LD_VAR 0 12
64280: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
64281: LD_INT 0
64283: PPUSH
64284: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
64285: LD_VAR 0 1
64289: NOT
64290: PUSH
64291: LD_VAR 0 2
64295: PPUSH
64296: LD_VAR 0 3
64300: PPUSH
64301: CALL_OW 488
64305: NOT
64306: OR
64307: PUSH
64308: LD_VAR 0 1
64312: PPUSH
64313: CALL_OW 266
64317: PUSH
64318: LD_INT 3
64320: NONEQUAL
64321: PUSH
64322: LD_VAR 0 1
64326: PPUSH
64327: CALL_OW 247
64331: PUSH
64332: LD_INT 1
64334: EQUAL
64335: NOT
64336: AND
64337: OR
64338: IFFALSE 64342
// exit ;
64340: GO 64624
// if GetType ( factory ) = unit_human then
64342: LD_VAR 0 1
64346: PPUSH
64347: CALL_OW 247
64351: PUSH
64352: LD_INT 1
64354: EQUAL
64355: IFFALSE 64372
// factory := IsInUnit ( factory ) ;
64357: LD_ADDR_VAR 0 1
64361: PUSH
64362: LD_VAR 0 1
64366: PPUSH
64367: CALL_OW 310
64371: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
64372: LD_VAR 0 1
64376: PPUSH
64377: CALL_OW 266
64381: PUSH
64382: LD_INT 3
64384: NONEQUAL
64385: IFFALSE 64389
// exit ;
64387: GO 64624
// for i := 1 to Count ( factoryWaypoints ) do
64389: LD_ADDR_VAR 0 5
64393: PUSH
64394: DOUBLE
64395: LD_INT 1
64397: DEC
64398: ST_TO_ADDR
64399: LD_EXP 53
64403: PPUSH
64404: CALL 17562 0 1
64408: PUSH
64409: FOR_TO
64410: IFFALSE 64572
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
64412: LD_VAR 0 2
64416: PPUSH
64417: LD_VAR 0 3
64421: PPUSH
64422: CALL_OW 428
64426: PUSH
64427: LD_EXP 53
64431: PUSH
64432: LD_VAR 0 5
64436: ARRAY
64437: PUSH
64438: LD_INT 2
64440: ARRAY
64441: EQUAL
64442: IFFALSE 64474
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
64444: LD_ADDR_EXP 53
64448: PUSH
64449: LD_EXP 53
64453: PPUSH
64454: LD_VAR 0 5
64458: PPUSH
64459: CALL_OW 3
64463: ST_TO_ADDR
// UpdateFactoryWaypoints ;
64464: CALL 64629 0 0
// exit ;
64468: POP
64469: POP
64470: GO 64624
// end else
64472: GO 64570
// if factory = factoryWaypoints [ i ] [ 2 ] then
64474: LD_VAR 0 1
64478: PUSH
64479: LD_EXP 53
64483: PUSH
64484: LD_VAR 0 5
64488: ARRAY
64489: PUSH
64490: LD_INT 2
64492: ARRAY
64493: EQUAL
64494: IFFALSE 64570
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
64496: LD_ADDR_EXP 53
64500: PUSH
64501: LD_EXP 53
64505: PPUSH
64506: LD_VAR 0 5
64510: PPUSH
64511: CALL_OW 3
64515: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
64516: LD_ADDR_EXP 53
64520: PUSH
64521: LD_EXP 53
64525: PPUSH
64526: LD_VAR 0 1
64530: PPUSH
64531: CALL_OW 255
64535: PUSH
64536: LD_VAR 0 1
64540: PUSH
64541: LD_VAR 0 2
64545: PUSH
64546: LD_VAR 0 3
64550: PUSH
64551: EMPTY
64552: LIST
64553: LIST
64554: LIST
64555: LIST
64556: PPUSH
64557: CALL 53171 0 2
64561: ST_TO_ADDR
// UpdateFactoryWaypoints ;
64562: CALL 64629 0 0
// exit ;
64566: POP
64567: POP
64568: GO 64624
// end ; end ;
64570: GO 64409
64572: POP
64573: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
64574: LD_ADDR_EXP 53
64578: PUSH
64579: LD_EXP 53
64583: PPUSH
64584: LD_VAR 0 1
64588: PPUSH
64589: CALL_OW 255
64593: PUSH
64594: LD_VAR 0 1
64598: PUSH
64599: LD_VAR 0 2
64603: PUSH
64604: LD_VAR 0 3
64608: PUSH
64609: EMPTY
64610: LIST
64611: LIST
64612: LIST
64613: LIST
64614: PPUSH
64615: CALL 53171 0 2
64619: ST_TO_ADDR
// UpdateFactoryWaypoints ;
64620: CALL 64629 0 0
// end ;
64624: LD_VAR 0 4
64628: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
64629: LD_INT 0
64631: PPUSH
64632: PPUSH
64633: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
64634: LD_STRING resetFactoryWaypoint();
64636: PPUSH
64637: CALL_OW 559
// if factoryWaypoints then
64641: LD_EXP 53
64645: IFFALSE 64766
// begin list := factoryWaypoints ;
64647: LD_ADDR_VAR 0 3
64651: PUSH
64652: LD_EXP 53
64656: ST_TO_ADDR
// for i := 1 to list do
64657: LD_ADDR_VAR 0 2
64661: PUSH
64662: DOUBLE
64663: LD_INT 1
64665: DEC
64666: ST_TO_ADDR
64667: LD_VAR 0 3
64671: PUSH
64672: FOR_TO
64673: IFFALSE 64764
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
64675: LD_STRING setFactoryWaypointXY(
64677: PUSH
64678: LD_VAR 0 3
64682: PUSH
64683: LD_VAR 0 2
64687: ARRAY
64688: PUSH
64689: LD_INT 1
64691: ARRAY
64692: STR
64693: PUSH
64694: LD_STRING ,
64696: STR
64697: PUSH
64698: LD_VAR 0 3
64702: PUSH
64703: LD_VAR 0 2
64707: ARRAY
64708: PUSH
64709: LD_INT 2
64711: ARRAY
64712: STR
64713: PUSH
64714: LD_STRING ,
64716: STR
64717: PUSH
64718: LD_VAR 0 3
64722: PUSH
64723: LD_VAR 0 2
64727: ARRAY
64728: PUSH
64729: LD_INT 3
64731: ARRAY
64732: STR
64733: PUSH
64734: LD_STRING ,
64736: STR
64737: PUSH
64738: LD_VAR 0 3
64742: PUSH
64743: LD_VAR 0 2
64747: ARRAY
64748: PUSH
64749: LD_INT 4
64751: ARRAY
64752: STR
64753: PUSH
64754: LD_STRING )
64756: STR
64757: PPUSH
64758: CALL_OW 559
64762: GO 64672
64764: POP
64765: POP
// end ; end ;
64766: LD_VAR 0 1
64770: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
64771: LD_INT 0
64773: PPUSH
// if HexInfo ( x , y ) = warehouse then
64774: LD_VAR 0 2
64778: PPUSH
64779: LD_VAR 0 3
64783: PPUSH
64784: CALL_OW 428
64788: PUSH
64789: LD_VAR 0 1
64793: EQUAL
64794: IFFALSE 64821
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
64796: LD_ADDR_EXP 55
64800: PUSH
64801: LD_EXP 55
64805: PPUSH
64806: LD_VAR 0 1
64810: PPUSH
64811: LD_INT 0
64813: PPUSH
64814: CALL_OW 1
64818: ST_TO_ADDR
64819: GO 64872
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
64821: LD_ADDR_EXP 55
64825: PUSH
64826: LD_EXP 55
64830: PPUSH
64831: LD_VAR 0 1
64835: PPUSH
64836: LD_VAR 0 1
64840: PPUSH
64841: CALL_OW 255
64845: PUSH
64846: LD_VAR 0 1
64850: PUSH
64851: LD_VAR 0 2
64855: PUSH
64856: LD_VAR 0 3
64860: PUSH
64861: EMPTY
64862: LIST
64863: LIST
64864: LIST
64865: LIST
64866: PPUSH
64867: CALL_OW 1
64871: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
64872: CALL 64881 0 0
// end ;
64876: LD_VAR 0 4
64880: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
64881: LD_INT 0
64883: PPUSH
64884: PPUSH
64885: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
64886: LD_STRING resetWarehouseGatheringPoints();
64888: PPUSH
64889: CALL_OW 559
// if warehouseGatheringPoints then
64893: LD_EXP 55
64897: IFFALSE 65023
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
64899: LD_ADDR_VAR 0 3
64903: PUSH
64904: LD_EXP 55
64908: PPUSH
64909: CALL 56939 0 1
64913: ST_TO_ADDR
// for i := 1 to list do
64914: LD_ADDR_VAR 0 2
64918: PUSH
64919: DOUBLE
64920: LD_INT 1
64922: DEC
64923: ST_TO_ADDR
64924: LD_VAR 0 3
64928: PUSH
64929: FOR_TO
64930: IFFALSE 65021
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
64932: LD_STRING setWarehouseGatheringPointXY(
64934: PUSH
64935: LD_VAR 0 3
64939: PUSH
64940: LD_VAR 0 2
64944: ARRAY
64945: PUSH
64946: LD_INT 1
64948: ARRAY
64949: STR
64950: PUSH
64951: LD_STRING ,
64953: STR
64954: PUSH
64955: LD_VAR 0 3
64959: PUSH
64960: LD_VAR 0 2
64964: ARRAY
64965: PUSH
64966: LD_INT 2
64968: ARRAY
64969: STR
64970: PUSH
64971: LD_STRING ,
64973: STR
64974: PUSH
64975: LD_VAR 0 3
64979: PUSH
64980: LD_VAR 0 2
64984: ARRAY
64985: PUSH
64986: LD_INT 3
64988: ARRAY
64989: STR
64990: PUSH
64991: LD_STRING ,
64993: STR
64994: PUSH
64995: LD_VAR 0 3
64999: PUSH
65000: LD_VAR 0 2
65004: ARRAY
65005: PUSH
65006: LD_INT 4
65008: ARRAY
65009: STR
65010: PUSH
65011: LD_STRING )
65013: STR
65014: PPUSH
65015: CALL_OW 559
65019: GO 64929
65021: POP
65022: POP
// end ; end ;
65023: LD_VAR 0 1
65027: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
65028: LD_INT 0
65030: PPUSH
65031: PPUSH
// if not mpSidePositions then
65032: LD_EXP 37
65036: NOT
65037: IFFALSE 65041
// exit ;
65039: GO 65112
// result :=  ;
65041: LD_ADDR_VAR 0 1
65045: PUSH
65046: LD_STRING 
65048: ST_TO_ADDR
// for i := 1 to 8 do
65049: LD_ADDR_VAR 0 2
65053: PUSH
65054: DOUBLE
65055: LD_INT 1
65057: DEC
65058: ST_TO_ADDR
65059: LD_INT 8
65061: PUSH
65062: FOR_TO
65063: IFFALSE 65093
// begin result := result & mpSidePositions [ i ] & ; ;
65065: LD_ADDR_VAR 0 1
65069: PUSH
65070: LD_VAR 0 1
65074: PUSH
65075: LD_EXP 37
65079: PUSH
65080: LD_VAR 0 2
65084: ARRAY
65085: STR
65086: PUSH
65087: LD_STRING ;
65089: STR
65090: ST_TO_ADDR
// end ;
65091: GO 65062
65093: POP
65094: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
65095: LD_STRING setMultiplayerRealPosition("
65097: PUSH
65098: LD_VAR 0 1
65102: STR
65103: PUSH
65104: LD_STRING ");
65106: STR
65107: PPUSH
65108: CALL_OW 559
// end ;
65112: LD_VAR 0 1
65116: RET
