// starting begin ResetFog ;
   0: CALL_OW 335
// InitHc ;
   4: CALL_OW 19
// InitUc ;
   8: CALL_OW 18
// InitBc ;
  12: CALL_OW 21
// InitVariables ;
  16: CALL 116 0 0
// InitMultiplayer ;
  20: CALL 3874 0 0
// if debug then
  24: LD_EXP 1
  28: IFFALSE 37
// FogOff ( 1 ) ;
  30: LD_INT 1
  32: PPUSH
  33: CALL_OW 344
// PrepareArabian ( Multiplayer_SetBotSide ( 2 ) ) ;
  37: LD_INT 2
  39: PPUSH
  40: CALL 5754 0 1
  44: PPUSH
  45: CALL 1028 0 1
// PrepareConvoys ( Multiplayer_SetBotSide ( 6 ) ) ;
  49: LD_INT 6
  51: PPUSH
  52: CALL 5754 0 1
  56: PPUSH
  57: CALL 12301 0 1
// Multiplayer_Start ;
  61: CALL 7484 0 0
// ResetFog ;
  65: CALL_OW 335
// PlaceSeeing ( 1 , 1 , convoySide , - 32973 ) ;
  69: LD_INT 1
  71: PPUSH
  72: LD_INT 1
  74: PPUSH
  75: LD_EXP 42
  79: PPUSH
  80: LD_INT 32973
  82: NEG
  83: PPUSH
  84: CALL_OW 330
// RemoveSeeing ( 1 , 1 , convoySide ) ;
  88: LD_INT 1
  90: PPUSH
  91: LD_INT 1
  93: PPUSH
  94: LD_EXP 42
  98: PPUSH
  99: CALL_OW 331
// game := true ;
 103: LD_ADDR_EXP 2
 107: PUSH
 108: LD_INT 1
 110: ST_TO_ADDR
// Multiplayer_End ;
 111: CALL 7603 0 0
// end ;
 115: END
// export debug , game , winAllowed , botSides , savedConvoyUnits , blockThread , forestIsCleared , goToUnload ; function InitVariables ; begin
 116: LD_INT 0
 118: PPUSH
// debug := false ;
 119: LD_ADDR_EXP 1
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// botSides := [ 2 , 6 ] ;
 127: LD_ADDR_EXP 4
 131: PUSH
 132: LD_INT 2
 134: PUSH
 135: LD_INT 6
 137: PUSH
 138: EMPTY
 139: LIST
 140: LIST
 141: ST_TO_ADDR
// winAllowed := false ;
 142: LD_ADDR_EXP 3
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// savedConvoyUnits := 0 ;
 150: LD_ADDR_EXP 5
 154: PUSH
 155: LD_INT 0
 157: ST_TO_ADDR
// forestIsCleared := false ;
 158: LD_ADDR_EXP 7
 162: PUSH
 163: LD_INT 0
 165: ST_TO_ADDR
// blockThread := false ;
 166: LD_ADDR_EXP 6
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// goToUnload := [ ] ;
 174: LD_ADDR_EXP 8
 178: PUSH
 179: EMPTY
 180: ST_TO_ADDR
// end ;
 181: LD_VAR 0 1
 185: RET
// every 0 0$01 trigger game and not debug_strings do
 186: LD_EXP 2
 190: IFFALSE 199
 192: PUSH
 193: LD_OWVAR 48
 197: NOT
 198: AND
 199: IFFALSE 215
 201: GO 203
 203: DISABLE
// begin enable ;
 204: ENABLE
// display_strings := Multiplayer_DisplayStrings ( ) ;
 205: LD_ADDR_OWVAR 47
 209: PUSH
 210: CALL 8036 0 0
 214: ST_TO_ADDR
// end ; end_of_file
 215: END
// every 0 0$30 trigger convoyWave in [ [ 6 , 8 , 10 ] [ Difficulty ] , [ 16 , 20 , 24 ] [ Difficulty ] , [ 26 , 30 , 34 ] [ Difficulty ] ] do var i , j , un , veh , skill ;
 216: LD_EXP 41
 220: PUSH
 221: LD_INT 6
 223: PUSH
 224: LD_INT 8
 226: PUSH
 227: LD_INT 10
 229: PUSH
 230: EMPTY
 231: LIST
 232: LIST
 233: LIST
 234: PUSH
 235: LD_OWVAR 67
 239: ARRAY
 240: PUSH
 241: LD_INT 16
 243: PUSH
 244: LD_INT 20
 246: PUSH
 247: LD_INT 24
 249: PUSH
 250: EMPTY
 251: LIST
 252: LIST
 253: LIST
 254: PUSH
 255: LD_OWVAR 67
 259: ARRAY
 260: PUSH
 261: LD_INT 26
 263: PUSH
 264: LD_INT 30
 266: PUSH
 267: LD_INT 34
 269: PUSH
 270: EMPTY
 271: LIST
 272: LIST
 273: LIST
 274: PUSH
 275: LD_OWVAR 67
 279: ARRAY
 280: PUSH
 281: EMPTY
 282: LIST
 283: LIST
 284: LIST
 285: IN
 286: IFFALSE 660
 288: GO 290
 290: DISABLE
 291: LD_INT 0
 293: PPUSH
 294: PPUSH
 295: PPUSH
 296: PPUSH
 297: PPUSH
// begin repeat wait ( 10 ) ;
 298: LD_INT 10
 300: PPUSH
 301: CALL_OW 67
// until not blockThread ;
 305: LD_EXP 6
 309: NOT
 310: IFFALSE 298
// skill := [ 6 , 5 , 4 ] [ Difficulty ] ;
 312: LD_ADDR_VAR 0 5
 316: PUSH
 317: LD_INT 6
 319: PUSH
 320: LD_INT 5
 322: PUSH
 323: LD_INT 4
 325: PUSH
 326: EMPTY
 327: LIST
 328: LIST
 329: LIST
 330: PUSH
 331: LD_OWVAR 67
 335: ARRAY
 336: ST_TO_ADDR
// for i := 1 to 8 do
 337: LD_ADDR_VAR 0 1
 341: PUSH
 342: DOUBLE
 343: LD_INT 1
 345: DEC
 346: ST_TO_ADDR
 347: LD_INT 8
 349: PUSH
 350: FOR_TO
 351: IFFALSE 650
// if multi_sides [ i ] = 2 and not multi_loosers [ i ] then
 353: LD_EXP 15
 357: PUSH
 358: LD_VAR 0 1
 362: ARRAY
 363: PUSH
 364: LD_INT 2
 366: EQUAL
 367: IFFALSE 382
 369: PUSH
 370: LD_EXP 32
 374: PUSH
 375: LD_VAR 0 1
 379: ARRAY
 380: NOT
 381: AND
 382: IFFALSE 648
// begin uc_side := i ;
 384: LD_ADDR_OWVAR 20
 388: PUSH
 389: LD_VAR 0 1
 393: ST_TO_ADDR
// uc_nation := nation_russian ;
 394: LD_ADDR_OWVAR 21
 398: PUSH
 399: LD_INT 3
 401: ST_TO_ADDR
// if i = your_side then
 402: LD_VAR 0 1
 406: PUSH
 407: LD_OWVAR 2
 411: EQUAL
 412: IFFALSE 424
// CenterNowOnXY ( 112 , 172 ) ;
 414: LD_INT 112
 416: PPUSH
 417: LD_INT 172
 419: PPUSH
 420: CALL_OW 86
// PrepareEngineer ( false , skill ) ;
 424: LD_INT 0
 426: PPUSH
 427: LD_VAR 0 5
 431: PPUSH
 432: CALL_OW 382
// un := CreateHuman ;
 436: LD_ADDR_VAR 0 3
 440: PUSH
 441: CALL_OW 44
 445: ST_TO_ADDR
// PlaceUnitArea ( un , southRefArea , false ) ;
 446: LD_VAR 0 3
 450: PPUSH
 451: LD_INT 25
 453: PPUSH
 454: LD_INT 0
 456: PPUSH
 457: CALL_OW 49
// for j := 1 to 2 do
 461: LD_ADDR_VAR 0 2
 465: PUSH
 466: DOUBLE
 467: LD_INT 1
 469: DEC
 470: ST_TO_ADDR
 471: LD_INT 2
 473: PUSH
 474: FOR_TO
 475: IFFALSE 516
// begin PrepareMechanic ( false , skill ) ;
 477: LD_INT 0
 479: PPUSH
 480: LD_VAR 0 5
 484: PPUSH
 485: CALL_OW 383
// un := CreateHuman ;
 489: LD_ADDR_VAR 0 3
 493: PUSH
 494: CALL_OW 44
 498: ST_TO_ADDR
// PlaceUnitArea ( un , southRefArea , false ) ;
 499: LD_VAR 0 3
 503: PPUSH
 504: LD_INT 25
 506: PPUSH
 507: LD_INT 0
 509: PPUSH
 510: CALL_OW 49
// end ;
 514: GO 474
 516: POP
 517: POP
// for j := 1 to 2 do
 518: LD_ADDR_VAR 0 2
 522: PUSH
 523: DOUBLE
 524: LD_INT 1
 526: DEC
 527: ST_TO_ADDR
 528: LD_INT 2
 530: PUSH
 531: FOR_TO
 532: IFFALSE 646
// begin uc_side := i ;
 534: LD_ADDR_OWVAR 20
 538: PUSH
 539: LD_VAR 0 1
 543: ST_TO_ADDR
// uc_nation := nation_russian ;
 544: LD_ADDR_OWVAR 21
 548: PUSH
 549: LD_INT 3
 551: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_gun , 50 ) ;
 552: LD_INT 22
 554: PPUSH
 555: LD_INT 1
 557: PPUSH
 558: LD_INT 1
 560: PPUSH
 561: LD_INT 44
 563: PPUSH
 564: LD_INT 50
 566: PPUSH
 567: CALL 20436 0 5
// veh := CreateVehicle ;
 571: LD_ADDR_VAR 0 4
 575: PUSH
 576: CALL_OW 45
 580: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
 581: LD_VAR 0 4
 585: PPUSH
 586: LD_INT 5
 588: PPUSH
 589: CALL_OW 233
// PrepareMechanic ( false , skill ) ;
 593: LD_INT 0
 595: PPUSH
 596: LD_VAR 0 5
 600: PPUSH
 601: CALL_OW 383
// un := CreateHuman ;
 605: LD_ADDR_VAR 0 3
 609: PUSH
 610: CALL_OW 44
 614: ST_TO_ADDR
// PlaceUnitArea ( veh , southRefArea , false ) ;
 615: LD_VAR 0 4
 619: PPUSH
 620: LD_INT 25
 622: PPUSH
 623: LD_INT 0
 625: PPUSH
 626: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
 630: LD_VAR 0 3
 634: PPUSH
 635: LD_VAR 0 4
 639: PPUSH
 640: CALL_OW 52
// end ;
 644: GO 531
 646: POP
 647: POP
// end ;
 648: GO 350
 650: POP
 651: POP
// wait ( 10 10$0 ) ;
 652: LD_INT 21000
 654: PPUSH
 655: CALL_OW 67
// enable ;
 659: ENABLE
// end ;
 660: PPOPN 5
 662: END
// every 0 0$30 trigger convoyWave in [ [ 12 , 14 , 16 ] [ Difficulty ] , [ 22 , 26 , 30 ] [ Difficulty ] , [ 32 , 36 , 40 ] [ Difficulty ] ] do var i , j , un , veh , skill ;
 663: LD_EXP 41
 667: PUSH
 668: LD_INT 12
 670: PUSH
 671: LD_INT 14
 673: PUSH
 674: LD_INT 16
 676: PUSH
 677: EMPTY
 678: LIST
 679: LIST
 680: LIST
 681: PUSH
 682: LD_OWVAR 67
 686: ARRAY
 687: PUSH
 688: LD_INT 22
 690: PUSH
 691: LD_INT 26
 693: PUSH
 694: LD_INT 30
 696: PUSH
 697: EMPTY
 698: LIST
 699: LIST
 700: LIST
 701: PUSH
 702: LD_OWVAR 67
 706: ARRAY
 707: PUSH
 708: LD_INT 32
 710: PUSH
 711: LD_INT 36
 713: PUSH
 714: LD_INT 40
 716: PUSH
 717: EMPTY
 718: LIST
 719: LIST
 720: LIST
 721: PUSH
 722: LD_OWVAR 67
 726: ARRAY
 727: PUSH
 728: EMPTY
 729: LIST
 730: LIST
 731: LIST
 732: IN
 733: IFFALSE 1025
 735: GO 737
 737: DISABLE
 738: LD_INT 0
 740: PPUSH
 741: PPUSH
 742: PPUSH
 743: PPUSH
 744: PPUSH
// begin repeat wait ( 10 ) ;
 745: LD_INT 10
 747: PPUSH
 748: CALL_OW 67
// until not blockThread ;
 752: LD_EXP 6
 756: NOT
 757: IFFALSE 745
// skill := [ 6 , 5 , 4 ] [ Difficulty ] ;
 759: LD_ADDR_VAR 0 5
 763: PUSH
 764: LD_INT 6
 766: PUSH
 767: LD_INT 5
 769: PUSH
 770: LD_INT 4
 772: PUSH
 773: EMPTY
 774: LIST
 775: LIST
 776: LIST
 777: PUSH
 778: LD_OWVAR 67
 782: ARRAY
 783: ST_TO_ADDR
// for i := 1 to 8 do
 784: LD_ADDR_VAR 0 1
 788: PUSH
 789: DOUBLE
 790: LD_INT 1
 792: DEC
 793: ST_TO_ADDR
 794: LD_INT 8
 796: PUSH
 797: FOR_TO
 798: IFFALSE 1015
// if multi_sides [ i ] = 1 and not multi_loosers [ i ] then
 800: LD_EXP 15
 804: PUSH
 805: LD_VAR 0 1
 809: ARRAY
 810: PUSH
 811: LD_INT 1
 813: EQUAL
 814: IFFALSE 829
 816: PUSH
 817: LD_EXP 32
 821: PUSH
 822: LD_VAR 0 1
 826: ARRAY
 827: NOT
 828: AND
 829: IFFALSE 1013
// begin if i = your_side then
 831: LD_VAR 0 1
 835: PUSH
 836: LD_OWVAR 2
 840: EQUAL
 841: IFFALSE 853
// CenterNowOnXY ( 112 , 172 ) ;
 843: LD_INT 112
 845: PPUSH
 846: LD_INT 172
 848: PPUSH
 849: CALL_OW 86
// for j := 1 to 3 do
 853: LD_ADDR_VAR 0 2
 857: PUSH
 858: DOUBLE
 859: LD_INT 1
 861: DEC
 862: ST_TO_ADDR
 863: LD_INT 3
 865: PUSH
 866: FOR_TO
 867: IFFALSE 1011
// begin uc_side := i ;
 869: LD_ADDR_OWVAR 20
 873: PUSH
 874: LD_VAR 0 1
 878: ST_TO_ADDR
// uc_nation := nation_russian ;
 879: LD_ADDR_OWVAR 21
 883: PUSH
 884: LD_INT 3
 886: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun ] [ i mod 2 + 1 ] , 50 ) ;
 887: LD_INT 22
 889: PPUSH
 890: LD_INT 1
 892: PPUSH
 893: LD_INT 1
 895: PPUSH
 896: LD_INT 44
 898: PUSH
 899: LD_INT 43
 901: PUSH
 902: EMPTY
 903: LIST
 904: LIST
 905: PUSH
 906: LD_VAR 0 1
 910: PUSH
 911: LD_INT 2
 913: MOD
 914: PUSH
 915: LD_INT 1
 917: PLUS
 918: ARRAY
 919: PPUSH
 920: LD_INT 50
 922: PPUSH
 923: CALL 20436 0 5
// veh := CreateVehicle ;
 927: LD_ADDR_VAR 0 4
 931: PUSH
 932: CALL_OW 45
 936: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
 937: LD_VAR 0 4
 941: PPUSH
 942: LD_INT 5
 944: PPUSH
 945: CALL_OW 233
// PrepareMechanic ( false , skill ) ;
 949: LD_INT 0
 951: PPUSH
 952: LD_VAR 0 5
 956: PPUSH
 957: CALL_OW 383
// un := CreateHuman ;
 961: LD_ADDR_VAR 0 3
 965: PUSH
 966: CALL_OW 44
 970: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
 971: LD_INT 35
 973: PPUSH
 974: CALL_OW 67
// until PlaceUnitArea ( veh , southRefArea , false ) ;
 978: LD_VAR 0 4
 982: PPUSH
 983: LD_INT 25
 985: PPUSH
 986: LD_INT 0
 988: PPUSH
 989: CALL_OW 49
 993: IFFALSE 971
// PlaceHumanInUnit ( un , veh ) ;
 995: LD_VAR 0 3
 999: PPUSH
1000: LD_VAR 0 4
1004: PPUSH
1005: CALL_OW 52
// end ;
1009: GO 866
1011: POP
1012: POP
// end ;
1013: GO 797
1015: POP
1016: POP
// wait ( 10 10$0 ) ;
1017: LD_INT 21000
1019: PPUSH
1020: CALL_OW 67
// enable ;
1024: ENABLE
// end ; end_of_file
1025: PPOPN 5
1027: END
// export enemyUnits , enemyMobile , enemyForestGuard , enemySide , arAttackersInf ; export function PrepareArabian ( side ) ; var i , un , skill , veh ; begin
1028: LD_INT 0
1030: PPUSH
1031: PPUSH
1032: PPUSH
1033: PPUSH
1034: PPUSH
// enemySide := side ;
1035: LD_ADDR_EXP 12
1039: PUSH
1040: LD_VAR 0 1
1044: ST_TO_ADDR
// enemyUnits := [ ] ;
1045: LD_ADDR_EXP 9
1049: PUSH
1050: EMPTY
1051: ST_TO_ADDR
// enemyMobile := [ ] ;
1052: LD_ADDR_EXP 10
1056: PUSH
1057: EMPTY
1058: ST_TO_ADDR
// enemyForestGuard := [ ] ;
1059: LD_ADDR_EXP 11
1063: PUSH
1064: EMPTY
1065: ST_TO_ADDR
// arAttackersInf := [ ] ;
1066: LD_ADDR_EXP 13
1070: PUSH
1071: EMPTY
1072: ST_TO_ADDR
// skill := [ 4 , 6 , 8 ] [ Difficulty ] ;
1073: LD_ADDR_VAR 0 5
1077: PUSH
1078: LD_INT 4
1080: PUSH
1081: LD_INT 6
1083: PUSH
1084: LD_INT 8
1086: PUSH
1087: EMPTY
1088: LIST
1089: LIST
1090: LIST
1091: PUSH
1092: LD_OWVAR 67
1096: ARRAY
1097: ST_TO_ADDR
// uc_side := side ;
1098: LD_ADDR_OWVAR 20
1102: PUSH
1103: LD_VAR 0 1
1107: ST_TO_ADDR
// uc_nation := nation_arabian ;
1108: LD_ADDR_OWVAR 21
1112: PUSH
1113: LD_INT 2
1115: ST_TO_ADDR
// for i := 1 to [ 5 , 6 , 7 ] [ Difficulty ] do
1116: LD_ADDR_VAR 0 3
1120: PUSH
1121: DOUBLE
1122: LD_INT 1
1124: DEC
1125: ST_TO_ADDR
1126: LD_INT 5
1128: PUSH
1129: LD_INT 6
1131: PUSH
1132: LD_INT 7
1134: PUSH
1135: EMPTY
1136: LIST
1137: LIST
1138: LIST
1139: PUSH
1140: LD_OWVAR 67
1144: ARRAY
1145: PUSH
1146: FOR_TO
1147: IFFALSE 1234
// begin PrepareSoldier ( false , skill ) ;
1149: LD_INT 0
1151: PPUSH
1152: LD_VAR 0 5
1156: PPUSH
1157: CALL_OW 381
// un := CreateHuman ;
1161: LD_ADDR_VAR 0 4
1165: PUSH
1166: CALL_OW 44
1170: ST_TO_ADDR
// if i mod 2 = 0 then
1171: LD_VAR 0 3
1175: PUSH
1176: LD_INT 2
1178: MOD
1179: PUSH
1180: LD_INT 0
1182: EQUAL
1183: IFFALSE 1197
// SetClass ( un , class_mortar ) ;
1185: LD_VAR 0 4
1189: PPUSH
1190: LD_INT 8
1192: PPUSH
1193: CALL_OW 336
// enemyForestGuard := Join ( enemyForestGuard , un ) ;
1197: LD_ADDR_EXP 11
1201: PUSH
1202: LD_EXP 11
1206: PPUSH
1207: LD_VAR 0 4
1211: PPUSH
1212: CALL 53606 0 2
1216: ST_TO_ADDR
// PlaceUnitArea ( un , forestGuardHill1Area , false ) ;
1217: LD_VAR 0 4
1221: PPUSH
1222: LD_INT 17
1224: PPUSH
1225: LD_INT 0
1227: PPUSH
1228: CALL_OW 49
// end ;
1232: GO 1146
1234: POP
1235: POP
// for i := 1 to 2 do
1236: LD_ADDR_VAR 0 3
1240: PUSH
1241: DOUBLE
1242: LD_INT 1
1244: DEC
1245: ST_TO_ADDR
1246: LD_INT 2
1248: PUSH
1249: FOR_TO
1250: IFFALSE 1311
// begin PrepareScientist ( false , skill ) ;
1252: LD_INT 0
1254: PPUSH
1255: LD_VAR 0 5
1259: PPUSH
1260: CALL_OW 384
// un := CreateHuman ;
1264: LD_ADDR_VAR 0 4
1268: PUSH
1269: CALL_OW 44
1273: ST_TO_ADDR
// enemyForestGuard := Join ( enemyForestGuard , un ) ;
1274: LD_ADDR_EXP 11
1278: PUSH
1279: LD_EXP 11
1283: PPUSH
1284: LD_VAR 0 4
1288: PPUSH
1289: CALL 53606 0 2
1293: ST_TO_ADDR
// PlaceUnitArea ( un , forestGuardHill1Area , false ) ;
1294: LD_VAR 0 4
1298: PPUSH
1299: LD_INT 17
1301: PPUSH
1302: LD_INT 0
1304: PPUSH
1305: CALL_OW 49
// end ;
1309: GO 1249
1311: POP
1312: POP
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
1313: LD_ADDR_VAR 0 3
1317: PUSH
1318: DOUBLE
1319: LD_INT 1
1321: DEC
1322: ST_TO_ADDR
1323: LD_INT 2
1325: PUSH
1326: LD_INT 3
1328: PUSH
1329: LD_INT 3
1331: PUSH
1332: EMPTY
1333: LIST
1334: LIST
1335: LIST
1336: PUSH
1337: LD_OWVAR 67
1341: ARRAY
1342: PUSH
1343: FOR_TO
1344: IFFALSE 1480
// begin PrepareVehicle ( ar_half_tracked , engine_solar , control_manual , ar_gun , 100 ) ;
1346: LD_INT 14
1348: PPUSH
1349: LD_INT 2
1351: PPUSH
1352: LD_INT 1
1354: PPUSH
1355: LD_INT 27
1357: PPUSH
1358: LD_INT 100
1360: PPUSH
1361: CALL 20436 0 5
// veh := CreateVehicle ;
1365: LD_ADDR_VAR 0 6
1369: PUSH
1370: CALL_OW 45
1374: ST_TO_ADDR
// enemyForestGuard := Join ( enemyForestGuard , veh ) ;
1375: LD_ADDR_EXP 11
1379: PUSH
1380: LD_EXP 11
1384: PPUSH
1385: LD_VAR 0 6
1389: PPUSH
1390: CALL 53606 0 2
1394: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
1395: LD_VAR 0 6
1399: PPUSH
1400: LD_INT 5
1402: PPUSH
1403: CALL_OW 233
// PrepareMechanic ( false , skill ) ;
1407: LD_INT 0
1409: PPUSH
1410: LD_VAR 0 5
1414: PPUSH
1415: CALL_OW 383
// un := CreateHuman ;
1419: LD_ADDR_VAR 0 4
1423: PUSH
1424: CALL_OW 44
1428: ST_TO_ADDR
// enemyForestGuard := Join ( enemyForestGuard , un ) ;
1429: LD_ADDR_EXP 11
1433: PUSH
1434: LD_EXP 11
1438: PPUSH
1439: LD_VAR 0 4
1443: PPUSH
1444: CALL 53606 0 2
1448: ST_TO_ADDR
// PlaceUnitArea ( veh , forestGuardHill2Area , false ) ;
1449: LD_VAR 0 6
1453: PPUSH
1454: LD_INT 18
1456: PPUSH
1457: LD_INT 0
1459: PPUSH
1460: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
1464: LD_VAR 0 4
1468: PPUSH
1469: LD_VAR 0 6
1473: PPUSH
1474: CALL_OW 52
// end ;
1478: GO 1343
1480: POP
1481: POP
// for i := 1 to 2 do
1482: LD_ADDR_VAR 0 3
1486: PUSH
1487: DOUBLE
1488: LD_INT 1
1490: DEC
1491: ST_TO_ADDR
1492: LD_INT 2
1494: PUSH
1495: FOR_TO
1496: IFFALSE 1579
// begin PrepareVehicle ( ar_half_tracked , engine_solar , control_manual , ar_cargo_bay , 100 ) ;
1498: LD_INT 14
1500: PPUSH
1501: LD_INT 2
1503: PPUSH
1504: LD_INT 1
1506: PPUSH
1507: LD_INT 32
1509: PPUSH
1510: LD_INT 100
1512: PPUSH
1513: CALL 20436 0 5
// veh := CreateVehicle ;
1517: LD_ADDR_VAR 0 6
1521: PUSH
1522: CALL_OW 45
1526: ST_TO_ADDR
// SetDir ( veh , rand ( 2 , 3 ) ) ;
1527: LD_VAR 0 6
1531: PPUSH
1532: LD_INT 2
1534: PPUSH
1535: LD_INT 3
1537: PPUSH
1538: CALL_OW 12
1542: PPUSH
1543: CALL_OW 233
// PlaceUnitArea ( veh , arOilArea , false ) ;
1547: LD_VAR 0 6
1551: PPUSH
1552: LD_INT 22
1554: PPUSH
1555: LD_INT 0
1557: PPUSH
1558: CALL_OW 49
// SetCargo ( veh , mat_oil , 100 ) ;
1562: LD_VAR 0 6
1566: PPUSH
1567: LD_INT 2
1569: PPUSH
1570: LD_INT 100
1572: PPUSH
1573: CALL_OW 290
// end ;
1577: GO 1495
1579: POP
1580: POP
// end ;
1581: LD_VAR 0 2
1585: RET
// export function PrepareMobileGroup ; var i , veh , un , skill , v ; begin
1586: LD_INT 0
1588: PPUSH
1589: PPUSH
1590: PPUSH
1591: PPUSH
1592: PPUSH
1593: PPUSH
// blockThread := true ;
1594: LD_ADDR_EXP 6
1598: PUSH
1599: LD_INT 1
1601: ST_TO_ADDR
// v := convoyWave div 12 ;
1602: LD_ADDR_VAR 0 6
1606: PUSH
1607: LD_EXP 41
1611: PUSH
1612: LD_INT 12
1614: DIV
1615: ST_TO_ADDR
// skill := [ 4 , 5 , 6 ] [ Difficulty ] + v ;
1616: LD_ADDR_VAR 0 5
1620: PUSH
1621: LD_INT 4
1623: PUSH
1624: LD_INT 5
1626: PUSH
1627: LD_INT 6
1629: PUSH
1630: EMPTY
1631: LIST
1632: LIST
1633: LIST
1634: PUSH
1635: LD_OWVAR 67
1639: ARRAY
1640: PUSH
1641: LD_VAR 0 6
1645: PLUS
1646: ST_TO_ADDR
// if skill > 10 then
1647: LD_VAR 0 5
1651: PUSH
1652: LD_INT 10
1654: GREATER
1655: IFFALSE 1665
// skill := 10 ;
1657: LD_ADDR_VAR 0 5
1661: PUSH
1662: LD_INT 10
1664: ST_TO_ADDR
// if v > 8 then
1665: LD_VAR 0 6
1669: PUSH
1670: LD_INT 8
1672: GREATER
1673: IFFALSE 1683
// v := 8 ;
1675: LD_ADDR_VAR 0 6
1679: PUSH
1680: LD_INT 8
1682: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] + v do
1683: LD_ADDR_VAR 0 2
1687: PUSH
1688: DOUBLE
1689: LD_INT 1
1691: DEC
1692: ST_TO_ADDR
1693: LD_INT 2
1695: PUSH
1696: LD_INT 3
1698: PUSH
1699: LD_INT 3
1701: PUSH
1702: EMPTY
1703: LIST
1704: LIST
1705: LIST
1706: PUSH
1707: LD_OWVAR 67
1711: ARRAY
1712: PUSH
1713: LD_VAR 0 6
1717: PLUS
1718: PUSH
1719: FOR_TO
1720: IFFALSE 1899
// begin uc_side := enemySide ;
1722: LD_ADDR_OWVAR 20
1726: PUSH
1727: LD_EXP 12
1731: ST_TO_ADDR
// uc_nation := nation_arabian ;
1732: LD_ADDR_OWVAR 21
1736: PUSH
1737: LD_INT 2
1739: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , [ ar_gun , ar_gatling_gun ] [ i mod 2 + 1 ] , 100 ) ;
1740: LD_INT 14
1742: PPUSH
1743: LD_INT 1
1745: PPUSH
1746: LD_INT 1
1748: PPUSH
1749: LD_INT 27
1751: PUSH
1752: LD_INT 25
1754: PUSH
1755: EMPTY
1756: LIST
1757: LIST
1758: PUSH
1759: LD_VAR 0 2
1763: PUSH
1764: LD_INT 2
1766: MOD
1767: PUSH
1768: LD_INT 1
1770: PLUS
1771: ARRAY
1772: PPUSH
1773: LD_INT 100
1775: PPUSH
1776: CALL 20436 0 5
// veh := CreateVehicle ;
1780: LD_ADDR_VAR 0 3
1784: PUSH
1785: CALL_OW 45
1789: ST_TO_ADDR
// enemyMobile := Join ( enemyMobile , veh ) ;
1790: LD_ADDR_EXP 10
1794: PUSH
1795: LD_EXP 10
1799: PPUSH
1800: LD_VAR 0 3
1804: PPUSH
1805: CALL 53606 0 2
1809: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1810: LD_VAR 0 3
1814: PPUSH
1815: LD_INT 2
1817: PPUSH
1818: CALL_OW 233
// PrepareMechanic ( false , skill ) ;
1822: LD_INT 0
1824: PPUSH
1825: LD_VAR 0 5
1829: PPUSH
1830: CALL_OW 383
// un := CreateHuman ;
1834: LD_ADDR_VAR 0 4
1838: PUSH
1839: CALL_OW 44
1843: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
1844: LD_INT 35
1846: PPUSH
1847: CALL_OW 67
// until PlaceUnitArea ( veh , arabNorthSpawnArea , false ) ;
1851: LD_VAR 0 3
1855: PPUSH
1856: LD_INT 23
1858: PPUSH
1859: LD_INT 0
1861: PPUSH
1862: CALL_OW 49
1866: IFFALSE 1844
// PlaceHumanInUnit ( un , veh ) ;
1868: LD_VAR 0 4
1872: PPUSH
1873: LD_VAR 0 3
1877: PPUSH
1878: CALL_OW 52
// ComMoveXY ( veh , 104 , 18 ) ;
1882: LD_VAR 0 3
1886: PPUSH
1887: LD_INT 104
1889: PPUSH
1890: LD_INT 18
1892: PPUSH
1893: CALL_OW 111
// end ;
1897: GO 1719
1899: POP
1900: POP
// blockThread := false ;
1901: LD_ADDR_EXP 6
1905: PUSH
1906: LD_INT 0
1908: ST_TO_ADDR
// end ;
1909: LD_VAR 0 1
1913: RET
// export function PrepareMobileGroup2 ; var i , veh , un , skill , v ; begin
1914: LD_INT 0
1916: PPUSH
1917: PPUSH
1918: PPUSH
1919: PPUSH
1920: PPUSH
1921: PPUSH
// blockThread := true ;
1922: LD_ADDR_EXP 6
1926: PUSH
1927: LD_INT 1
1929: ST_TO_ADDR
// v := convoyWave div 12 ;
1930: LD_ADDR_VAR 0 6
1934: PUSH
1935: LD_EXP 41
1939: PUSH
1940: LD_INT 12
1942: DIV
1943: ST_TO_ADDR
// if v > 8 then
1944: LD_VAR 0 6
1948: PUSH
1949: LD_INT 8
1951: GREATER
1952: IFFALSE 1962
// v := 8 ;
1954: LD_ADDR_VAR 0 6
1958: PUSH
1959: LD_INT 8
1961: ST_TO_ADDR
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] + v do
1962: LD_ADDR_VAR 0 2
1966: PUSH
1967: DOUBLE
1968: LD_INT 1
1970: DEC
1971: ST_TO_ADDR
1972: LD_INT 3
1974: PUSH
1975: LD_INT 4
1977: PUSH
1978: LD_INT 5
1980: PUSH
1981: EMPTY
1982: LIST
1983: LIST
1984: LIST
1985: PUSH
1986: LD_OWVAR 67
1990: ARRAY
1991: PUSH
1992: LD_VAR 0 6
1996: PLUS
1997: PUSH
1998: FOR_TO
1999: IFFALSE 2182
// begin uc_side := enemySide ;
2001: LD_ADDR_OWVAR 20
2005: PUSH
2006: LD_EXP 12
2010: ST_TO_ADDR
// uc_nation := nation_arabian ;
2011: LD_ADDR_OWVAR 21
2015: PUSH
2016: LD_INT 2
2018: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , [ ar_gun , ar_gatling_gun , ar_flame_thrower ] [ i mod 3 + 1 ] , 100 ) ;
2019: LD_INT 14
2021: PPUSH
2022: LD_INT 1
2024: PPUSH
2025: LD_INT 1
2027: PPUSH
2028: LD_INT 27
2030: PUSH
2031: LD_INT 25
2033: PUSH
2034: LD_INT 26
2036: PUSH
2037: EMPTY
2038: LIST
2039: LIST
2040: LIST
2041: PUSH
2042: LD_VAR 0 2
2046: PUSH
2047: LD_INT 3
2049: MOD
2050: PUSH
2051: LD_INT 1
2053: PLUS
2054: ARRAY
2055: PPUSH
2056: LD_INT 100
2058: PPUSH
2059: CALL 20436 0 5
// veh := CreateVehicle ;
2063: LD_ADDR_VAR 0 3
2067: PUSH
2068: CALL_OW 45
2072: ST_TO_ADDR
// enemyMobile := Join ( enemyMobile , veh ) ;
2073: LD_ADDR_EXP 10
2077: PUSH
2078: LD_EXP 10
2082: PPUSH
2083: LD_VAR 0 3
2087: PPUSH
2088: CALL 53606 0 2
2092: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2093: LD_VAR 0 3
2097: PPUSH
2098: LD_INT 4
2100: PPUSH
2101: CALL_OW 233
// PrepareMechanic ( false , skill ) ;
2105: LD_INT 0
2107: PPUSH
2108: LD_VAR 0 5
2112: PPUSH
2113: CALL_OW 383
// un := CreateHuman ;
2117: LD_ADDR_VAR 0 4
2121: PUSH
2122: CALL_OW 44
2126: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2127: LD_INT 35
2129: PPUSH
2130: CALL_OW 67
// until PlaceUnitArea ( veh , arabEastSpawnArea , false ) ;
2134: LD_VAR 0 3
2138: PPUSH
2139: LD_INT 14
2141: PPUSH
2142: LD_INT 0
2144: PPUSH
2145: CALL_OW 49
2149: IFFALSE 2127
// PlaceHumanInUnit ( un , veh ) ;
2151: LD_VAR 0 4
2155: PPUSH
2156: LD_VAR 0 3
2160: PPUSH
2161: CALL_OW 52
// ComMoveXY ( veh , 151 , 28 ) ;
2165: LD_VAR 0 3
2169: PPUSH
2170: LD_INT 151
2172: PPUSH
2173: LD_INT 28
2175: PPUSH
2176: CALL_OW 111
// end ;
2180: GO 1998
2182: POP
2183: POP
// blockThread := false ;
2184: LD_ADDR_EXP 6
2188: PUSH
2189: LD_INT 0
2191: ST_TO_ADDR
// end ;
2192: LD_VAR 0 1
2196: RET
// export function ClearRoadInForest ; var i , un , veh , tmp , skill ; begin
2197: LD_INT 0
2199: PPUSH
2200: PPUSH
2201: PPUSH
2202: PPUSH
2203: PPUSH
2204: PPUSH
// blockThread := true ;
2205: LD_ADDR_EXP 6
2209: PUSH
2210: LD_INT 1
2212: ST_TO_ADDR
// skill := [ 4 , 5 , 7 ] [ Difficulty ] ;
2213: LD_ADDR_VAR 0 6
2217: PUSH
2218: LD_INT 4
2220: PUSH
2221: LD_INT 5
2223: PUSH
2224: LD_INT 7
2226: PUSH
2227: EMPTY
2228: LIST
2229: LIST
2230: LIST
2231: PUSH
2232: LD_OWVAR 67
2236: ARRAY
2237: ST_TO_ADDR
// tmp := AreaToList ( forestRoadArea , 0 ) ;
2238: LD_ADDR_VAR 0 5
2242: PUSH
2243: LD_INT 15
2245: PPUSH
2246: LD_INT 0
2248: PPUSH
2249: CALL_OW 517
2253: ST_TO_ADDR
// uc_side := enemySide ;
2254: LD_ADDR_OWVAR 20
2258: PUSH
2259: LD_EXP 12
2263: ST_TO_ADDR
// uc_nation := nation_arabian ;
2264: LD_ADDR_OWVAR 21
2268: PUSH
2269: LD_INT 2
2271: ST_TO_ADDR
// PrepareMechanic ( false , skill ) ;
2272: LD_INT 0
2274: PPUSH
2275: LD_VAR 0 6
2279: PPUSH
2280: CALL_OW 383
// un := CreateHuman ;
2284: LD_ADDR_VAR 0 3
2288: PUSH
2289: CALL_OW 44
2293: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower , 100 ) ;
2294: LD_INT 14
2296: PPUSH
2297: LD_INT 1
2299: PPUSH
2300: LD_INT 1
2302: PPUSH
2303: LD_INT 26
2305: PPUSH
2306: LD_INT 100
2308: PPUSH
2309: CALL 20436 0 5
// veh := CreateVehicle ;
2313: LD_ADDR_VAR 0 4
2317: PUSH
2318: CALL_OW 45
2322: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2323: LD_VAR 0 4
2327: PPUSH
2328: LD_INT 4
2330: PPUSH
2331: CALL_OW 233
// repeat wait ( 0 0$1 ) ;
2335: LD_INT 35
2337: PPUSH
2338: CALL_OW 67
// until PlaceUnitArea ( veh , arabEastSpawnArea , false ) ;
2342: LD_VAR 0 4
2346: PPUSH
2347: LD_INT 14
2349: PPUSH
2350: LD_INT 0
2352: PPUSH
2353: CALL_OW 49
2357: IFFALSE 2335
// PlaceHumanInUnit ( un , veh ) ;
2359: LD_VAR 0 3
2363: PPUSH
2364: LD_VAR 0 4
2368: PPUSH
2369: CALL_OW 52
// blockThread := false ;
2373: LD_ADDR_EXP 6
2377: PUSH
2378: LD_INT 0
2380: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
2381: LD_ADDR_VAR 0 2
2385: PUSH
2386: DOUBLE
2387: LD_INT 1
2389: DEC
2390: ST_TO_ADDR
2391: LD_VAR 0 5
2395: PUSH
2396: LD_INT 1
2398: ARRAY
2399: PUSH
2400: FOR_TO
2401: IFFALSE 2447
// BurnTreeXYR ( veh , tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 7 ) ;
2403: LD_VAR 0 4
2407: PPUSH
2408: LD_VAR 0 5
2412: PUSH
2413: LD_INT 1
2415: ARRAY
2416: PUSH
2417: LD_VAR 0 2
2421: ARRAY
2422: PPUSH
2423: LD_VAR 0 5
2427: PUSH
2428: LD_INT 2
2430: ARRAY
2431: PUSH
2432: LD_VAR 0 2
2436: ARRAY
2437: PPUSH
2438: LD_INT 7
2440: PPUSH
2441: CALL 60545 0 4
2445: GO 2400
2447: POP
2448: POP
// repeat wait ( 0 0$1 ) ;
2449: LD_INT 35
2451: PPUSH
2452: CALL_OW 67
// if IsDead ( veh ) then
2456: LD_VAR 0 4
2460: PPUSH
2461: CALL_OW 301
2465: IFFALSE 2469
// exit ;
2467: GO 2546
// until FilterUnitsInArea ( endOfTheForestArea , [ f_side , enemySide ] ) or not HasTask ( veh ) or not HasTask ( un ) ;
2469: LD_INT 16
2471: PPUSH
2472: LD_INT 22
2474: PUSH
2475: LD_EXP 12
2479: PUSH
2480: EMPTY
2481: LIST
2482: LIST
2483: PPUSH
2484: CALL_OW 70
2488: IFTRUE 2502
2490: PUSH
2491: LD_VAR 0 4
2495: PPUSH
2496: CALL_OW 314
2500: NOT
2501: OR
2502: IFTRUE 2516
2504: PUSH
2505: LD_VAR 0 3
2509: PPUSH
2510: CALL_OW 314
2514: NOT
2515: OR
2516: IFFALSE 2449
// forestIsCleared := true ;
2518: LD_ADDR_EXP 7
2522: PUSH
2523: LD_INT 1
2525: ST_TO_ADDR
// enemyMobile := Join ( enemyMobile , veh ) ;
2526: LD_ADDR_EXP 10
2530: PUSH
2531: LD_EXP 10
2535: PPUSH
2536: LD_VAR 0 4
2540: PPUSH
2541: CALL 53606 0 2
2545: ST_TO_ADDR
// end ;
2546: LD_VAR 0 1
2550: RET
// export function SendWestGroup ; var i , un , skill ; begin
2551: LD_INT 0
2553: PPUSH
2554: PPUSH
2555: PPUSH
2556: PPUSH
// blockThread := true ;
2557: LD_ADDR_EXP 6
2561: PUSH
2562: LD_INT 1
2564: ST_TO_ADDR
// skill := [ 3 , 5 , 7 ] [ Difficulty ] ;
2565: LD_ADDR_VAR 0 4
2569: PUSH
2570: LD_INT 3
2572: PUSH
2573: LD_INT 5
2575: PUSH
2576: LD_INT 7
2578: PUSH
2579: EMPTY
2580: LIST
2581: LIST
2582: LIST
2583: PUSH
2584: LD_OWVAR 67
2588: ARRAY
2589: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
2590: LD_ADDR_VAR 0 2
2594: PUSH
2595: DOUBLE
2596: LD_INT 1
2598: DEC
2599: ST_TO_ADDR
2600: LD_INT 2
2602: PUSH
2603: LD_INT 3
2605: PUSH
2606: LD_INT 3
2608: PUSH
2609: EMPTY
2610: LIST
2611: LIST
2612: LIST
2613: PUSH
2614: LD_OWVAR 67
2618: ARRAY
2619: PUSH
2620: FOR_TO
2621: IFFALSE 2746
// begin uc_side := enemySide ;
2623: LD_ADDR_OWVAR 20
2627: PUSH
2628: LD_EXP 12
2632: ST_TO_ADDR
// uc_nation := nation_arabian ;
2633: LD_ADDR_OWVAR 21
2637: PUSH
2638: LD_INT 2
2640: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
2641: LD_INT 0
2643: PPUSH
2644: LD_VAR 0 4
2648: PPUSH
2649: CALL_OW 381
// un := CreateHuman ;
2653: LD_ADDR_VAR 0 3
2657: PUSH
2658: CALL_OW 44
2662: ST_TO_ADDR
// if i mod 3 = 0 then
2663: LD_VAR 0 2
2667: PUSH
2668: LD_INT 3
2670: MOD
2671: PUSH
2672: LD_INT 0
2674: EQUAL
2675: IFFALSE 2689
// SetClass ( un , class_mortar ) ;
2677: LD_VAR 0 3
2681: PPUSH
2682: LD_INT 8
2684: PPUSH
2685: CALL_OW 336
// enemyUnits := Join ( enemyUnits , un ) ;
2689: LD_ADDR_EXP 9
2693: PUSH
2694: LD_EXP 9
2698: PPUSH
2699: LD_VAR 0 3
2703: PPUSH
2704: CALL 53606 0 2
2708: ST_TO_ADDR
// PlaceUnitArea ( un , arabWestSpawnArea , false ) ;
2709: LD_VAR 0 3
2713: PPUSH
2714: LD_INT 24
2716: PPUSH
2717: LD_INT 0
2719: PPUSH
2720: CALL_OW 49
// result := Join ( result , un ) ;
2724: LD_ADDR_VAR 0 1
2728: PUSH
2729: LD_VAR 0 1
2733: PPUSH
2734: LD_VAR 0 3
2738: PPUSH
2739: CALL 53606 0 2
2743: ST_TO_ADDR
// end ;
2744: GO 2620
2746: POP
2747: POP
// PrepareScientist ( false , skill ) ;
2748: LD_INT 0
2750: PPUSH
2751: LD_VAR 0 4
2755: PPUSH
2756: CALL_OW 384
// un := CreateHuman ;
2760: LD_ADDR_VAR 0 3
2764: PUSH
2765: CALL_OW 44
2769: ST_TO_ADDR
// enemyUnits := Join ( enemyUnits , un ) ;
2770: LD_ADDR_EXP 9
2774: PUSH
2775: LD_EXP 9
2779: PPUSH
2780: LD_VAR 0 3
2784: PPUSH
2785: CALL 53606 0 2
2789: ST_TO_ADDR
// PlaceUnitArea ( un , arabWestSpawnArea , false ) ;
2790: LD_VAR 0 3
2794: PPUSH
2795: LD_INT 24
2797: PPUSH
2798: LD_INT 0
2800: PPUSH
2801: CALL_OW 49
// result := Join ( result , un ) ;
2805: LD_ADDR_VAR 0 1
2809: PUSH
2810: LD_VAR 0 1
2814: PPUSH
2815: LD_VAR 0 3
2819: PPUSH
2820: CALL 53606 0 2
2824: ST_TO_ADDR
// ComAgressiveMove ( result , 24 , 37 ) ;
2825: LD_VAR 0 1
2829: PPUSH
2830: LD_INT 24
2832: PPUSH
2833: LD_INT 37
2835: PPUSH
2836: CALL_OW 114
// blockThread := false ;
2840: LD_ADDR_EXP 6
2844: PUSH
2845: LD_INT 0
2847: ST_TO_ADDR
// end ;
2848: LD_VAR 0 1
2852: RET
// export function PrepareForestOnslaught ; var i , veh , un , skill , v ; begin
2853: LD_INT 0
2855: PPUSH
2856: PPUSH
2857: PPUSH
2858: PPUSH
2859: PPUSH
2860: PPUSH
// blockThread := true ;
2861: LD_ADDR_EXP 6
2865: PUSH
2866: LD_INT 1
2868: ST_TO_ADDR
// v := convoyWave div 12 ;
2869: LD_ADDR_VAR 0 6
2873: PUSH
2874: LD_EXP 41
2878: PUSH
2879: LD_INT 12
2881: DIV
2882: ST_TO_ADDR
// skill := [ 4 , 5 , 6 ] [ Difficulty ] + v ;
2883: LD_ADDR_VAR 0 5
2887: PUSH
2888: LD_INT 4
2890: PUSH
2891: LD_INT 5
2893: PUSH
2894: LD_INT 6
2896: PUSH
2897: EMPTY
2898: LIST
2899: LIST
2900: LIST
2901: PUSH
2902: LD_OWVAR 67
2906: ARRAY
2907: PUSH
2908: LD_VAR 0 6
2912: PLUS
2913: ST_TO_ADDR
// if skill > 10 then
2914: LD_VAR 0 5
2918: PUSH
2919: LD_INT 10
2921: GREATER
2922: IFFALSE 2932
// skill := 10 ;
2924: LD_ADDR_VAR 0 5
2928: PUSH
2929: LD_INT 10
2931: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
2932: LD_ADDR_VAR 0 2
2936: PUSH
2937: DOUBLE
2938: LD_INT 1
2940: DEC
2941: ST_TO_ADDR
2942: LD_INT 2
2944: PUSH
2945: LD_INT 3
2947: PUSH
2948: LD_INT 3
2950: PUSH
2951: EMPTY
2952: LIST
2953: LIST
2954: LIST
2955: PUSH
2956: LD_OWVAR 67
2960: ARRAY
2961: PUSH
2962: FOR_TO
2963: IFFALSE 3166
// begin uc_side := enemySide ;
2965: LD_ADDR_OWVAR 20
2969: PUSH
2970: LD_EXP 12
2974: ST_TO_ADDR
// uc_nation := nation_arabian ;
2975: LD_ADDR_OWVAR 21
2979: PUSH
2980: LD_INT 2
2982: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , [ ar_gun , ar_radar , ar_light_gun ] [ i mod 3 + 1 ] , 100 ) ;
2983: LD_INT 14
2985: PPUSH
2986: LD_INT 1
2988: PPUSH
2989: LD_INT 1
2991: PPUSH
2992: LD_INT 27
2994: PUSH
2995: LD_INT 30
2997: PUSH
2998: LD_INT 23
3000: PUSH
3001: EMPTY
3002: LIST
3003: LIST
3004: LIST
3005: PUSH
3006: LD_VAR 0 2
3010: PUSH
3011: LD_INT 3
3013: MOD
3014: PUSH
3015: LD_INT 1
3017: PLUS
3018: ARRAY
3019: PPUSH
3020: LD_INT 100
3022: PPUSH
3023: CALL 20436 0 5
// veh := CreateVehicle ;
3027: LD_ADDR_VAR 0 3
3031: PUSH
3032: CALL_OW 45
3036: ST_TO_ADDR
// result := Join ( result , veh ) ;
3037: LD_ADDR_VAR 0 1
3041: PUSH
3042: LD_VAR 0 1
3046: PPUSH
3047: LD_VAR 0 3
3051: PPUSH
3052: CALL 53606 0 2
3056: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
3057: LD_VAR 0 3
3061: PPUSH
3062: LD_INT 4
3064: PPUSH
3065: CALL_OW 233
// PrepareMechanic ( false , skill ) ;
3069: LD_INT 0
3071: PPUSH
3072: LD_VAR 0 5
3076: PPUSH
3077: CALL_OW 383
// un := CreateHuman ;
3081: LD_ADDR_VAR 0 4
3085: PUSH
3086: CALL_OW 44
3090: ST_TO_ADDR
// result := Join ( result , un ) ;
3091: LD_ADDR_VAR 0 1
3095: PUSH
3096: LD_VAR 0 1
3100: PPUSH
3101: LD_VAR 0 4
3105: PPUSH
3106: CALL 53606 0 2
3110: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3111: LD_INT 35
3113: PPUSH
3114: CALL_OW 67
// until PlaceUnitArea ( veh , arabEastSpawnArea , false ) ;
3118: LD_VAR 0 3
3122: PPUSH
3123: LD_INT 14
3125: PPUSH
3126: LD_INT 0
3128: PPUSH
3129: CALL_OW 49
3133: IFFALSE 3111
// PlaceHumanInUnit ( un , veh ) ;
3135: LD_VAR 0 4
3139: PPUSH
3140: LD_VAR 0 3
3144: PPUSH
3145: CALL_OW 52
// ComMoveXY ( veh , 159 , 53 ) ;
3149: LD_VAR 0 3
3153: PPUSH
3154: LD_INT 159
3156: PPUSH
3157: LD_INT 53
3159: PPUSH
3160: CALL_OW 111
// end ;
3164: GO 2962
3166: POP
3167: POP
// blockThread := false ;
3168: LD_ADDR_EXP 6
3172: PUSH
3173: LD_INT 0
3175: ST_TO_ADDR
// end ;
3176: LD_VAR 0 1
3180: RET
// export function SendEastGroup ; var i , un , skill ; begin
3181: LD_INT 0
3183: PPUSH
3184: PPUSH
3185: PPUSH
3186: PPUSH
// blockThread := true ;
3187: LD_ADDR_EXP 6
3191: PUSH
3192: LD_INT 1
3194: ST_TO_ADDR
// skill := [ 3 , 5 , 7 ] [ Difficulty ] ;
3195: LD_ADDR_VAR 0 4
3199: PUSH
3200: LD_INT 3
3202: PUSH
3203: LD_INT 5
3205: PUSH
3206: LD_INT 7
3208: PUSH
3209: EMPTY
3210: LIST
3211: LIST
3212: LIST
3213: PUSH
3214: LD_OWVAR 67
3218: ARRAY
3219: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
3220: LD_ADDR_VAR 0 2
3224: PUSH
3225: DOUBLE
3226: LD_INT 1
3228: DEC
3229: ST_TO_ADDR
3230: LD_INT 4
3232: PUSH
3233: LD_INT 5
3235: PUSH
3236: LD_INT 6
3238: PUSH
3239: EMPTY
3240: LIST
3241: LIST
3242: LIST
3243: PUSH
3244: LD_OWVAR 67
3248: ARRAY
3249: PUSH
3250: FOR_TO
3251: IFFALSE 3356
// begin uc_side := enemySide ;
3253: LD_ADDR_OWVAR 20
3257: PUSH
3258: LD_EXP 12
3262: ST_TO_ADDR
// uc_nation := nation_arabian ;
3263: LD_ADDR_OWVAR 21
3267: PUSH
3268: LD_INT 2
3270: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
3271: LD_INT 0
3273: PPUSH
3274: LD_VAR 0 4
3278: PPUSH
3279: CALL_OW 381
// un := CreateHuman ;
3283: LD_ADDR_VAR 0 3
3287: PUSH
3288: CALL_OW 44
3292: ST_TO_ADDR
// if i mod 3 = 0 then
3293: LD_VAR 0 2
3297: PUSH
3298: LD_INT 3
3300: MOD
3301: PUSH
3302: LD_INT 0
3304: EQUAL
3305: IFFALSE 3319
// SetClass ( un , class_mortar ) ;
3307: LD_VAR 0 3
3311: PPUSH
3312: LD_INT 8
3314: PPUSH
3315: CALL_OW 336
// PlaceUnitArea ( un , arabSouthSpawnArea , false ) ;
3319: LD_VAR 0 3
3323: PPUSH
3324: LD_INT 26
3326: PPUSH
3327: LD_INT 0
3329: PPUSH
3330: CALL_OW 49
// result := Join ( result , un ) ;
3334: LD_ADDR_VAR 0 1
3338: PUSH
3339: LD_VAR 0 1
3343: PPUSH
3344: LD_VAR 0 3
3348: PPUSH
3349: CALL 53606 0 2
3353: ST_TO_ADDR
// end ;
3354: GO 3250
3356: POP
3357: POP
// ComAgressiveMove ( result , 219 , 168 ) ;
3358: LD_VAR 0 1
3362: PPUSH
3363: LD_INT 219
3365: PPUSH
3366: LD_INT 168
3368: PPUSH
3369: CALL_OW 114
// blockThread := false ;
3373: LD_ADDR_EXP 6
3377: PUSH
3378: LD_INT 0
3380: ST_TO_ADDR
// end ;
3381: LD_VAR 0 1
3385: RET
// export function SendNorthGroup ; var i , un , skill , v ; begin
3386: LD_INT 0
3388: PPUSH
3389: PPUSH
3390: PPUSH
3391: PPUSH
3392: PPUSH
// blockThread := true ;
3393: LD_ADDR_EXP 6
3397: PUSH
3398: LD_INT 1
3400: ST_TO_ADDR
// v := convoyWave div 12 ;
3401: LD_ADDR_VAR 0 5
3405: PUSH
3406: LD_EXP 41
3410: PUSH
3411: LD_INT 12
3413: DIV
3414: ST_TO_ADDR
// skill := [ 4 , 5 , 6 ] [ Difficulty ] + v ;
3415: LD_ADDR_VAR 0 4
3419: PUSH
3420: LD_INT 4
3422: PUSH
3423: LD_INT 5
3425: PUSH
3426: LD_INT 6
3428: PUSH
3429: EMPTY
3430: LIST
3431: LIST
3432: LIST
3433: PUSH
3434: LD_OWVAR 67
3438: ARRAY
3439: PUSH
3440: LD_VAR 0 5
3444: PLUS
3445: ST_TO_ADDR
// if skill > 10 then
3446: LD_VAR 0 4
3450: PUSH
3451: LD_INT 10
3453: GREATER
3454: IFFALSE 3464
// skill := 10 ;
3456: LD_ADDR_VAR 0 4
3460: PUSH
3461: LD_INT 10
3463: ST_TO_ADDR
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
3464: LD_ADDR_VAR 0 2
3468: PUSH
3469: DOUBLE
3470: LD_INT 1
3472: DEC
3473: ST_TO_ADDR
3474: LD_INT 3
3476: PUSH
3477: LD_INT 4
3479: PUSH
3480: LD_INT 5
3482: PUSH
3483: EMPTY
3484: LIST
3485: LIST
3486: LIST
3487: PUSH
3488: LD_OWVAR 67
3492: ARRAY
3493: PUSH
3494: FOR_TO
3495: IFFALSE 3600
// begin uc_side := enemySide ;
3497: LD_ADDR_OWVAR 20
3501: PUSH
3502: LD_EXP 12
3506: ST_TO_ADDR
// uc_nation := nation_arabian ;
3507: LD_ADDR_OWVAR 21
3511: PUSH
3512: LD_INT 2
3514: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
3515: LD_INT 0
3517: PPUSH
3518: LD_VAR 0 4
3522: PPUSH
3523: CALL_OW 381
// un := CreateHuman ;
3527: LD_ADDR_VAR 0 3
3531: PUSH
3532: CALL_OW 44
3536: ST_TO_ADDR
// if i mod 3 = 0 then
3537: LD_VAR 0 2
3541: PUSH
3542: LD_INT 3
3544: MOD
3545: PUSH
3546: LD_INT 0
3548: EQUAL
3549: IFFALSE 3563
// SetClass ( un , class_mortar ) ;
3551: LD_VAR 0 3
3555: PPUSH
3556: LD_INT 8
3558: PPUSH
3559: CALL_OW 336
// PlaceUnitArea ( un , arabNorthForestSpawnArea , false ) ;
3563: LD_VAR 0 3
3567: PPUSH
3568: LD_INT 27
3570: PPUSH
3571: LD_INT 0
3573: PPUSH
3574: CALL_OW 49
// result := Join ( result , un ) ;
3578: LD_ADDR_VAR 0 1
3582: PUSH
3583: LD_VAR 0 1
3587: PPUSH
3588: LD_VAR 0 3
3592: PPUSH
3593: CALL 53606 0 2
3597: ST_TO_ADDR
// end ;
3598: GO 3494
3600: POP
3601: POP
// ComAgressiveMove ( result , 77 , 23 ) ;
3602: LD_VAR 0 1
3606: PPUSH
3607: LD_INT 77
3609: PPUSH
3610: LD_INT 23
3612: PPUSH
3613: CALL_OW 114
// blockThread := false ;
3617: LD_ADDR_EXP 6
3621: PUSH
3622: LD_INT 0
3624: ST_TO_ADDR
// end ;
3625: LD_VAR 0 1
3629: RET
// export function SendEastGroup2 ; var i , un , skill , v ; begin
3630: LD_INT 0
3632: PPUSH
3633: PPUSH
3634: PPUSH
3635: PPUSH
3636: PPUSH
// blockThread := true ;
3637: LD_ADDR_EXP 6
3641: PUSH
3642: LD_INT 1
3644: ST_TO_ADDR
// v := convoyWave div 12 ;
3645: LD_ADDR_VAR 0 5
3649: PUSH
3650: LD_EXP 41
3654: PUSH
3655: LD_INT 12
3657: DIV
3658: ST_TO_ADDR
// skill := [ 4 , 5 , 6 ] [ Difficulty ] + v ;
3659: LD_ADDR_VAR 0 4
3663: PUSH
3664: LD_INT 4
3666: PUSH
3667: LD_INT 5
3669: PUSH
3670: LD_INT 6
3672: PUSH
3673: EMPTY
3674: LIST
3675: LIST
3676: LIST
3677: PUSH
3678: LD_OWVAR 67
3682: ARRAY
3683: PUSH
3684: LD_VAR 0 5
3688: PLUS
3689: ST_TO_ADDR
// if skill > 10 then
3690: LD_VAR 0 4
3694: PUSH
3695: LD_INT 10
3697: GREATER
3698: IFFALSE 3708
// skill := 10 ;
3700: LD_ADDR_VAR 0 4
3704: PUSH
3705: LD_INT 10
3707: ST_TO_ADDR
// for i := 1 to [ 3 , 4 , 4 ] [ Difficulty ] do
3708: LD_ADDR_VAR 0 2
3712: PUSH
3713: DOUBLE
3714: LD_INT 1
3716: DEC
3717: ST_TO_ADDR
3718: LD_INT 3
3720: PUSH
3721: LD_INT 4
3723: PUSH
3724: LD_INT 4
3726: PUSH
3727: EMPTY
3728: LIST
3729: LIST
3730: LIST
3731: PUSH
3732: LD_OWVAR 67
3736: ARRAY
3737: PUSH
3738: FOR_TO
3739: IFFALSE 3844
// begin uc_side := enemySide ;
3741: LD_ADDR_OWVAR 20
3745: PUSH
3746: LD_EXP 12
3750: ST_TO_ADDR
// uc_nation := nation_arabian ;
3751: LD_ADDR_OWVAR 21
3755: PUSH
3756: LD_INT 2
3758: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
3759: LD_INT 0
3761: PPUSH
3762: LD_VAR 0 4
3766: PPUSH
3767: CALL_OW 381
// un := CreateHuman ;
3771: LD_ADDR_VAR 0 3
3775: PUSH
3776: CALL_OW 44
3780: ST_TO_ADDR
// if i mod 3 = 0 then
3781: LD_VAR 0 2
3785: PUSH
3786: LD_INT 3
3788: MOD
3789: PUSH
3790: LD_INT 0
3792: EQUAL
3793: IFFALSE 3807
// SetClass ( un , class_mortar ) ;
3795: LD_VAR 0 3
3799: PPUSH
3800: LD_INT 8
3802: PPUSH
3803: CALL_OW 336
// PlaceUnitArea ( un , arabEastForestSpawnArea , false ) ;
3807: LD_VAR 0 3
3811: PPUSH
3812: LD_INT 28
3814: PPUSH
3815: LD_INT 0
3817: PPUSH
3818: CALL_OW 49
// result := Join ( result , un ) ;
3822: LD_ADDR_VAR 0 1
3826: PUSH
3827: LD_VAR 0 1
3831: PPUSH
3832: LD_VAR 0 3
3836: PPUSH
3837: CALL 53606 0 2
3841: ST_TO_ADDR
// end ;
3842: GO 3738
3844: POP
3845: POP
// ComAgressiveMove ( result , 147 , 100 ) ;
3846: LD_VAR 0 1
3850: PPUSH
3851: LD_INT 147
3853: PPUSH
3854: LD_INT 100
3856: PPUSH
3857: CALL_OW 114
// blockThread := false ;
3861: LD_ADDR_EXP 6
3865: PUSH
3866: LD_INT 0
3868: ST_TO_ADDR
// end ; end_of_file
3869: LD_VAR 0 1
3873: RET
// export multi_gametype , multi_sides , multi_side_teams , multi_nations , multi_teams , multi_spec , multi_pos_area , multi_allowed_nations , multi_bots , multi_teamgame , multi_custom_commanders , multi_settings , multi_settings_counter , multi_pep_amount , multi_skill_level , multi_crates_spawn , multi_vehicles , multi_commanders , multi_loosers , multi_players_amount , multi_points_to_victory , multi_buildings ; export mpGameType , mpSidePositions ; export function InitMultiplayer ; var i , j , x , tmp ; begin
3874: LD_INT 0
3876: PPUSH
3877: PPUSH
3878: PPUSH
3879: PPUSH
3880: PPUSH
// mpGameType := GameTypeCoop ;
3881: LD_ADDR_EXP 36
3885: PUSH
3886: LD_INT 4
3888: ST_TO_ADDR
// multi_settings_counter := 5 ;
3889: LD_ADDR_EXP 26
3893: PUSH
3894: LD_INT 5
3896: ST_TO_ADDR
// multi_settings := [ ] ;
3897: LD_ADDR_EXP 25
3901: PUSH
3902: EMPTY
3903: ST_TO_ADDR
// if Multiplayer then
3904: LD_OWVAR 4
3908: IFFALSE 4088
// begin your_side := mp_player_side ;
3910: LD_ADDR_OWVAR 2
3914: PUSH
3915: LD_OWVAR 7
3919: ST_TO_ADDR
// multi_gametype := mp_game_type ;
3920: LD_ADDR_EXP 14
3924: PUSH
3925: LD_OWVAR 6
3929: ST_TO_ADDR
// multi_sides := mp_sides_positions ;
3930: LD_ADDR_EXP 15
3934: PUSH
3935: LD_OWVAR 17
3939: ST_TO_ADDR
// multi_side_teams := mp_sides_teams ;
3940: LD_ADDR_EXP 16
3944: PUSH
3945: LD_OWVAR 15
3949: ST_TO_ADDR
// multi_nations := mp_sides_nations ;
3950: LD_ADDR_EXP 17
3954: PUSH
3955: LD_OWVAR 16
3959: ST_TO_ADDR
// multi_teams := [ [ ] ] ;
3960: LD_ADDR_EXP 18
3964: PUSH
3965: EMPTY
3966: PUSH
3967: EMPTY
3968: LIST
3969: ST_TO_ADDR
// for i in mp_teams do
3970: LD_ADDR_VAR 0 2
3974: PUSH
3975: LD_OWVAR 12
3979: PUSH
3980: FOR_IN
3981: IFFALSE 4024
// if i then
3983: LD_VAR 0 2
3987: IFFALSE 4022
// multi_teams := Replace ( multi_teams , 1 , multi_teams [ 1 ] union i ) ;
3989: LD_ADDR_EXP 18
3993: PUSH
3994: LD_EXP 18
3998: PPUSH
3999: LD_INT 1
4001: PPUSH
4002: LD_EXP 18
4006: PUSH
4007: LD_INT 1
4009: ARRAY
4010: PUSH
4011: LD_VAR 0 2
4015: UNION
4016: PPUSH
4017: CALL_OW 1
4021: ST_TO_ADDR
4022: GO 3980
4024: POP
4025: POP
// for i := 1 to multi_settings_counter do
4026: LD_ADDR_VAR 0 2
4030: PUSH
4031: DOUBLE
4032: LD_INT 1
4034: DEC
4035: ST_TO_ADDR
4036: LD_EXP 26
4040: PUSH
4041: FOR_TO
4042: IFFALSE 4084
// multi_settings := Replace ( multi_settings , multi_settings + 1 , GetMultiplayerSetting ( i ) + 1 ) ;
4044: LD_ADDR_EXP 25
4048: PUSH
4049: LD_EXP 25
4053: PPUSH
4054: LD_EXP 25
4058: PUSH
4059: LD_INT 1
4061: PLUS
4062: PPUSH
4063: LD_VAR 0 2
4067: PPUSH
4068: CALL_OW 426
4072: PUSH
4073: LD_INT 1
4075: PLUS
4076: PPUSH
4077: CALL_OW 1
4081: ST_TO_ADDR
4082: GO 4041
4084: POP
4085: POP
// end else
4086: GO 4270
// begin your_side := 3 ;
4088: LD_ADDR_OWVAR 2
4092: PUSH
4093: LD_INT 3
4095: ST_TO_ADDR
// multi_gametype := 1 ;
4096: LD_ADDR_EXP 14
4100: PUSH
4101: LD_INT 1
4103: ST_TO_ADDR
// multi_sides := [ 0 , 0 , 2 , 0 , 0 , 0 , 1 , 0 ] ;
4104: LD_ADDR_EXP 15
4108: PUSH
4109: LD_INT 0
4111: PUSH
4112: LD_INT 0
4114: PUSH
4115: LD_INT 2
4117: PUSH
4118: LD_INT 0
4120: PUSH
4121: LD_INT 0
4123: PUSH
4124: LD_INT 0
4126: PUSH
4127: LD_INT 1
4129: PUSH
4130: LD_INT 0
4132: PUSH
4133: EMPTY
4134: LIST
4135: LIST
4136: LIST
4137: LIST
4138: LIST
4139: LIST
4140: LIST
4141: LIST
4142: ST_TO_ADDR
// multi_side_teams := [ 0 , 0 , 1 , 0 , 0 , 0 , 1 , 0 ] ;
4143: LD_ADDR_EXP 16
4147: PUSH
4148: LD_INT 0
4150: PUSH
4151: LD_INT 0
4153: PUSH
4154: LD_INT 1
4156: PUSH
4157: LD_INT 0
4159: PUSH
4160: LD_INT 0
4162: PUSH
4163: LD_INT 0
4165: PUSH
4166: LD_INT 1
4168: PUSH
4169: LD_INT 0
4171: PUSH
4172: EMPTY
4173: LIST
4174: LIST
4175: LIST
4176: LIST
4177: LIST
4178: LIST
4179: LIST
4180: LIST
4181: ST_TO_ADDR
// multi_nations := [ 0 , 0 , 3 , 0 , 0 , 0 , 3 , 0 ] ;
4182: LD_ADDR_EXP 17
4186: PUSH
4187: LD_INT 0
4189: PUSH
4190: LD_INT 0
4192: PUSH
4193: LD_INT 3
4195: PUSH
4196: LD_INT 0
4198: PUSH
4199: LD_INT 0
4201: PUSH
4202: LD_INT 0
4204: PUSH
4205: LD_INT 3
4207: PUSH
4208: LD_INT 0
4210: PUSH
4211: EMPTY
4212: LIST
4213: LIST
4214: LIST
4215: LIST
4216: LIST
4217: LIST
4218: LIST
4219: LIST
4220: ST_TO_ADDR
// multi_teams := [ [ 3 , 7 ] ] ;
4221: LD_ADDR_EXP 18
4225: PUSH
4226: LD_INT 3
4228: PUSH
4229: LD_INT 7
4231: PUSH
4232: EMPTY
4233: LIST
4234: LIST
4235: PUSH
4236: EMPTY
4237: LIST
4238: ST_TO_ADDR
// multi_settings := [ 2 , 1 , 4 , 3 , 2 , 4 ] ;
4239: LD_ADDR_EXP 25
4243: PUSH
4244: LD_INT 2
4246: PUSH
4247: LD_INT 1
4249: PUSH
4250: LD_INT 4
4252: PUSH
4253: LD_INT 3
4255: PUSH
4256: LD_INT 2
4258: PUSH
4259: LD_INT 4
4261: PUSH
4262: EMPTY
4263: LIST
4264: LIST
4265: LIST
4266: LIST
4267: LIST
4268: LIST
4269: ST_TO_ADDR
// end ; mpSidePositions := multi_sides ;
4270: LD_ADDR_EXP 37
4274: PUSH
4275: LD_EXP 15
4279: ST_TO_ADDR
// multi_spec := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4280: LD_ADDR_EXP 19
4284: PUSH
4285: LD_INT 0
4287: PUSH
4288: LD_INT 0
4290: PUSH
4291: LD_INT 0
4293: PUSH
4294: LD_INT 0
4296: PUSH
4297: LD_INT 0
4299: PUSH
4300: LD_INT 0
4302: PUSH
4303: LD_INT 0
4305: PUSH
4306: LD_INT 0
4308: PUSH
4309: EMPTY
4310: LIST
4311: LIST
4312: LIST
4313: LIST
4314: LIST
4315: LIST
4316: LIST
4317: LIST
4318: ST_TO_ADDR
// multi_bots := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4319: LD_ADDR_EXP 22
4323: PUSH
4324: LD_INT 0
4326: PUSH
4327: LD_INT 0
4329: PUSH
4330: LD_INT 0
4332: PUSH
4333: LD_INT 0
4335: PUSH
4336: LD_INT 0
4338: PUSH
4339: LD_INT 0
4341: PUSH
4342: LD_INT 0
4344: PUSH
4345: LD_INT 0
4347: PUSH
4348: EMPTY
4349: LIST
4350: LIST
4351: LIST
4352: LIST
4353: LIST
4354: LIST
4355: LIST
4356: LIST
4357: ST_TO_ADDR
// multi_loosers := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4358: LD_ADDR_EXP 32
4362: PUSH
4363: LD_INT 0
4365: PUSH
4366: LD_INT 0
4368: PUSH
4369: LD_INT 0
4371: PUSH
4372: LD_INT 0
4374: PUSH
4375: LD_INT 0
4377: PUSH
4378: LD_INT 0
4380: PUSH
4381: LD_INT 0
4383: PUSH
4384: LD_INT 0
4386: PUSH
4387: EMPTY
4388: LIST
4389: LIST
4390: LIST
4391: LIST
4392: LIST
4393: LIST
4394: LIST
4395: LIST
4396: ST_TO_ADDR
// multi_teamgame := true ;
4397: LD_ADDR_EXP 23
4401: PUSH
4402: LD_INT 1
4404: ST_TO_ADDR
// multi_allowed_nations := [ 3 ] ;
4405: LD_ADDR_EXP 21
4409: PUSH
4410: LD_INT 3
4412: PUSH
4413: EMPTY
4414: LIST
4415: ST_TO_ADDR
// multi_custom_commanders := true ;
4416: LD_ADDR_EXP 24
4420: PUSH
4421: LD_INT 1
4423: ST_TO_ADDR
// multi_commanders := [ ] ;
4424: LD_ADDR_EXP 31
4428: PUSH
4429: EMPTY
4430: ST_TO_ADDR
// multi_players_amount := 0 ;
4431: LD_ADDR_EXP 33
4435: PUSH
4436: LD_INT 0
4438: ST_TO_ADDR
// multi_pos_area := [ [ player1SpawnArea , player1SpawnArea ] , [ player2SpawnArea , player2VehSpawnArea ] ] ;
4439: LD_ADDR_EXP 20
4443: PUSH
4444: LD_INT 3
4446: PUSH
4447: LD_INT 3
4449: PUSH
4450: EMPTY
4451: LIST
4452: LIST
4453: PUSH
4454: LD_INT 4
4456: PUSH
4457: LD_INT 6
4459: PUSH
4460: EMPTY
4461: LIST
4462: LIST
4463: PUSH
4464: EMPTY
4465: LIST
4466: LIST
4467: ST_TO_ADDR
// multi_buildings := [ [ [ b_depot , [ 108 , 110 , 2 ] ] , [ b_bunker , [ 117 , 101 , 3 ] , ru_gun ] , [ b_bunker , [ 124 , 107 , 3 ] , ru_gatling_gun ] , [ b_bunker , [ 94 , 114 , 1 ] , ru_gun ] , [ b_bunker , [ 110 , 94 , 4 ] , ru_gun ] , [ b_oil_mine , [ 126 , 124 , 5 ] ] , [ b_oil_power , [ 101 , 115 , 0 ] ] , [ b_oil_power , [ 125 , 121 , 3 ] ] , [ b_factory , [ 109 , 126 , 0 ] ] , [ b_ext_gun , [ 112 , 129 , 5 ] ] ] , [ [ b_breastwork , [ 95 , 36 , 4 ] ] , [ b_breastwork , [ 116 , 66 , 3 ] ] , [ b_breastwork , [ 157 , 159 , 4 ] ] , [ b_breastwork , [ 75 , 88 , 3 ] ] , [ b_breastwork , [ 63 , 82 , 3 ] ] , [ b_breastwork , [ 106 , 147 , 4 ] ] , [ b_workshop , [ 124 , 164 , 5 ] ] , [ b_armoury , [ 129 , 159 , 4 ] ] , ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
4468: LD_ADDR_EXP 35
4472: PUSH
4473: LD_INT 0
4475: PUSH
4476: LD_INT 108
4478: PUSH
4479: LD_INT 110
4481: PUSH
4482: LD_INT 2
4484: PUSH
4485: EMPTY
4486: LIST
4487: LIST
4488: LIST
4489: PUSH
4490: EMPTY
4491: LIST
4492: LIST
4493: PUSH
4494: LD_INT 32
4496: PUSH
4497: LD_INT 117
4499: PUSH
4500: LD_INT 101
4502: PUSH
4503: LD_INT 3
4505: PUSH
4506: EMPTY
4507: LIST
4508: LIST
4509: LIST
4510: PUSH
4511: LD_INT 44
4513: PUSH
4514: EMPTY
4515: LIST
4516: LIST
4517: LIST
4518: PUSH
4519: LD_INT 32
4521: PUSH
4522: LD_INT 124
4524: PUSH
4525: LD_INT 107
4527: PUSH
4528: LD_INT 3
4530: PUSH
4531: EMPTY
4532: LIST
4533: LIST
4534: LIST
4535: PUSH
4536: LD_INT 43
4538: PUSH
4539: EMPTY
4540: LIST
4541: LIST
4542: LIST
4543: PUSH
4544: LD_INT 32
4546: PUSH
4547: LD_INT 94
4549: PUSH
4550: LD_INT 114
4552: PUSH
4553: LD_INT 1
4555: PUSH
4556: EMPTY
4557: LIST
4558: LIST
4559: LIST
4560: PUSH
4561: LD_INT 44
4563: PUSH
4564: EMPTY
4565: LIST
4566: LIST
4567: LIST
4568: PUSH
4569: LD_INT 32
4571: PUSH
4572: LD_INT 110
4574: PUSH
4575: LD_INT 94
4577: PUSH
4578: LD_INT 4
4580: PUSH
4581: EMPTY
4582: LIST
4583: LIST
4584: LIST
4585: PUSH
4586: LD_INT 44
4588: PUSH
4589: EMPTY
4590: LIST
4591: LIST
4592: LIST
4593: PUSH
4594: LD_INT 29
4596: PUSH
4597: LD_INT 126
4599: PUSH
4600: LD_INT 124
4602: PUSH
4603: LD_INT 5
4605: PUSH
4606: EMPTY
4607: LIST
4608: LIST
4609: LIST
4610: PUSH
4611: EMPTY
4612: LIST
4613: LIST
4614: PUSH
4615: LD_INT 26
4617: PUSH
4618: LD_INT 101
4620: PUSH
4621: LD_INT 115
4623: PUSH
4624: LD_INT 0
4626: PUSH
4627: EMPTY
4628: LIST
4629: LIST
4630: LIST
4631: PUSH
4632: EMPTY
4633: LIST
4634: LIST
4635: PUSH
4636: LD_INT 26
4638: PUSH
4639: LD_INT 125
4641: PUSH
4642: LD_INT 121
4644: PUSH
4645: LD_INT 3
4647: PUSH
4648: EMPTY
4649: LIST
4650: LIST
4651: LIST
4652: PUSH
4653: EMPTY
4654: LIST
4655: LIST
4656: PUSH
4657: LD_INT 3
4659: PUSH
4660: LD_INT 109
4662: PUSH
4663: LD_INT 126
4665: PUSH
4666: LD_INT 0
4668: PUSH
4669: EMPTY
4670: LIST
4671: LIST
4672: LIST
4673: PUSH
4674: EMPTY
4675: LIST
4676: LIST
4677: PUSH
4678: LD_INT 17
4680: PUSH
4681: LD_INT 112
4683: PUSH
4684: LD_INT 129
4686: PUSH
4687: LD_INT 5
4689: PUSH
4690: EMPTY
4691: LIST
4692: LIST
4693: LIST
4694: PUSH
4695: EMPTY
4696: LIST
4697: LIST
4698: PUSH
4699: EMPTY
4700: LIST
4701: LIST
4702: LIST
4703: LIST
4704: LIST
4705: LIST
4706: LIST
4707: LIST
4708: LIST
4709: LIST
4710: PUSH
4711: LD_INT 31
4713: PUSH
4714: LD_INT 95
4716: PUSH
4717: LD_INT 36
4719: PUSH
4720: LD_INT 4
4722: PUSH
4723: EMPTY
4724: LIST
4725: LIST
4726: LIST
4727: PUSH
4728: EMPTY
4729: LIST
4730: LIST
4731: PUSH
4732: LD_INT 31
4734: PUSH
4735: LD_INT 116
4737: PUSH
4738: LD_INT 66
4740: PUSH
4741: LD_INT 3
4743: PUSH
4744: EMPTY
4745: LIST
4746: LIST
4747: LIST
4748: PUSH
4749: EMPTY
4750: LIST
4751: LIST
4752: PUSH
4753: LD_INT 31
4755: PUSH
4756: LD_INT 157
4758: PUSH
4759: LD_INT 159
4761: PUSH
4762: LD_INT 4
4764: PUSH
4765: EMPTY
4766: LIST
4767: LIST
4768: LIST
4769: PUSH
4770: EMPTY
4771: LIST
4772: LIST
4773: PUSH
4774: LD_INT 31
4776: PUSH
4777: LD_INT 75
4779: PUSH
4780: LD_INT 88
4782: PUSH
4783: LD_INT 3
4785: PUSH
4786: EMPTY
4787: LIST
4788: LIST
4789: LIST
4790: PUSH
4791: EMPTY
4792: LIST
4793: LIST
4794: PUSH
4795: LD_INT 31
4797: PUSH
4798: LD_INT 63
4800: PUSH
4801: LD_INT 82
4803: PUSH
4804: LD_INT 3
4806: PUSH
4807: EMPTY
4808: LIST
4809: LIST
4810: LIST
4811: PUSH
4812: EMPTY
4813: LIST
4814: LIST
4815: PUSH
4816: LD_INT 31
4818: PUSH
4819: LD_INT 106
4821: PUSH
4822: LD_INT 147
4824: PUSH
4825: LD_INT 4
4827: PUSH
4828: EMPTY
4829: LIST
4830: LIST
4831: LIST
4832: PUSH
4833: EMPTY
4834: LIST
4835: LIST
4836: PUSH
4837: LD_INT 2
4839: PUSH
4840: LD_INT 124
4842: PUSH
4843: LD_INT 164
4845: PUSH
4846: LD_INT 5
4848: PUSH
4849: EMPTY
4850: LIST
4851: LIST
4852: LIST
4853: PUSH
4854: EMPTY
4855: LIST
4856: LIST
4857: PUSH
4858: LD_INT 4
4860: PUSH
4861: LD_INT 129
4863: PUSH
4864: LD_INT 159
4866: PUSH
4867: LD_INT 4
4869: PUSH
4870: EMPTY
4871: LIST
4872: LIST
4873: LIST
4874: PUSH
4875: EMPTY
4876: LIST
4877: LIST
4878: PUSH
4879: EMPTY
4880: LIST
4881: LIST
4882: LIST
4883: LIST
4884: LIST
4885: LIST
4886: LIST
4887: LIST
4888: PUSH
4889: EMPTY
4890: PUSH
4891: EMPTY
4892: PUSH
4893: EMPTY
4894: PUSH
4895: EMPTY
4896: PUSH
4897: EMPTY
4898: PUSH
4899: EMPTY
4900: PUSH
4901: EMPTY
4902: LIST
4903: LIST
4904: LIST
4905: LIST
4906: LIST
4907: LIST
4908: LIST
4909: LIST
4910: ST_TO_ADDR
// multi_vehicles := [ [ ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_tracked , engine_combustion , control_manual , ru_cargo_bay ] , [ ru_medium_tracked , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun ] [ Difficulty ] ] , [ ru_medium_tracked , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun ] [ Difficulty ] ] , [ ru_medium_tracked , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun ] [ Difficulty ] ] ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
4911: LD_ADDR_EXP 30
4915: PUSH
4916: EMPTY
4917: PUSH
4918: LD_INT 21
4920: PUSH
4921: LD_INT 1
4923: PUSH
4924: LD_INT 1
4926: PUSH
4927: LD_INT 42
4929: PUSH
4930: EMPTY
4931: LIST
4932: LIST
4933: LIST
4934: LIST
4935: PUSH
4936: LD_INT 22
4938: PUSH
4939: LD_INT 1
4941: PUSH
4942: LD_INT 1
4944: PUSH
4945: LD_INT 51
4947: PUSH
4948: EMPTY
4949: LIST
4950: LIST
4951: LIST
4952: LIST
4953: PUSH
4954: LD_INT 22
4956: PUSH
4957: LD_INT 1
4959: PUSH
4960: LD_INT 1
4962: PUSH
4963: LD_INT 44
4965: PUSH
4966: LD_INT 43
4968: PUSH
4969: LD_INT 42
4971: PUSH
4972: EMPTY
4973: LIST
4974: LIST
4975: LIST
4976: PUSH
4977: LD_OWVAR 67
4981: ARRAY
4982: PUSH
4983: EMPTY
4984: LIST
4985: LIST
4986: LIST
4987: LIST
4988: PUSH
4989: LD_INT 22
4991: PUSH
4992: LD_INT 1
4994: PUSH
4995: LD_INT 1
4997: PUSH
4998: LD_INT 44
5000: PUSH
5001: LD_INT 43
5003: PUSH
5004: LD_INT 42
5006: PUSH
5007: EMPTY
5008: LIST
5009: LIST
5010: LIST
5011: PUSH
5012: LD_OWVAR 67
5016: ARRAY
5017: PUSH
5018: EMPTY
5019: LIST
5020: LIST
5021: LIST
5022: LIST
5023: PUSH
5024: LD_INT 22
5026: PUSH
5027: LD_INT 1
5029: PUSH
5030: LD_INT 1
5032: PUSH
5033: LD_INT 44
5035: PUSH
5036: LD_INT 43
5038: PUSH
5039: LD_INT 42
5041: PUSH
5042: EMPTY
5043: LIST
5044: LIST
5045: LIST
5046: PUSH
5047: LD_OWVAR 67
5051: ARRAY
5052: PUSH
5053: EMPTY
5054: LIST
5055: LIST
5056: LIST
5057: LIST
5058: PUSH
5059: EMPTY
5060: LIST
5061: LIST
5062: LIST
5063: LIST
5064: LIST
5065: PUSH
5066: EMPTY
5067: PUSH
5068: EMPTY
5069: PUSH
5070: EMPTY
5071: PUSH
5072: EMPTY
5073: PUSH
5074: EMPTY
5075: PUSH
5076: EMPTY
5077: PUSH
5078: EMPTY
5079: LIST
5080: LIST
5081: LIST
5082: LIST
5083: LIST
5084: LIST
5085: LIST
5086: LIST
5087: ST_TO_ADDR
// for i := 1 to 8 do
5088: LD_ADDR_VAR 0 2
5092: PUSH
5093: DOUBLE
5094: LD_INT 1
5096: DEC
5097: ST_TO_ADDR
5098: LD_INT 8
5100: PUSH
5101: FOR_TO
5102: IFFALSE 5437
// begin if Multiplayer_GetPlayerIsSpec ( i ) then
5104: LD_VAR 0 2
5108: PPUSH
5109: CALL_OW 530
5113: IFFALSE 5271
// begin multi_spec := Replace ( multi_spec , i , 1 ) ;
5115: LD_ADDR_EXP 19
5119: PUSH
5120: LD_EXP 19
5124: PPUSH
5125: LD_VAR 0 2
5129: PPUSH
5130: LD_INT 1
5132: PPUSH
5133: CALL_OW 1
5137: ST_TO_ADDR
// multi_nations := Replace ( multi_nations , i , 0 ) ;
5138: LD_ADDR_EXP 17
5142: PUSH
5143: LD_EXP 17
5147: PPUSH
5148: LD_VAR 0 2
5152: PPUSH
5153: LD_INT 0
5155: PPUSH
5156: CALL_OW 1
5160: ST_TO_ADDR
// multi_sides := Replace ( multi_sides , i , 0 ) ;
5161: LD_ADDR_EXP 15
5165: PUSH
5166: LD_EXP 15
5170: PPUSH
5171: LD_VAR 0 2
5175: PPUSH
5176: LD_INT 0
5178: PPUSH
5179: CALL_OW 1
5183: ST_TO_ADDR
// for j = 1 to multi_teams do
5184: LD_ADDR_VAR 0 3
5188: PUSH
5189: DOUBLE
5190: LD_INT 1
5192: DEC
5193: ST_TO_ADDR
5194: LD_EXP 18
5198: PUSH
5199: FOR_TO
5200: IFFALSE 5269
// begin if i in multi_teams [ j ] then
5202: LD_VAR 0 2
5206: PUSH
5207: LD_EXP 18
5211: PUSH
5212: LD_VAR 0 3
5216: ARRAY
5217: IN
5218: IFFALSE 5267
// begin tmp := multi_teams [ j ] diff i ;
5220: LD_ADDR_VAR 0 5
5224: PUSH
5225: LD_EXP 18
5229: PUSH
5230: LD_VAR 0 3
5234: ARRAY
5235: PUSH
5236: LD_VAR 0 2
5240: DIFF
5241: ST_TO_ADDR
// multi_teams := Replace ( multi_teams , j , tmp ) ;
5242: LD_ADDR_EXP 18
5246: PUSH
5247: LD_EXP 18
5251: PPUSH
5252: LD_VAR 0 3
5256: PPUSH
5257: LD_VAR 0 5
5261: PPUSH
5262: CALL_OW 1
5266: ST_TO_ADDR
// end ; end ;
5267: GO 5199
5269: POP
5270: POP
// end ; if multi_nations [ i ] and not multi_nations [ i ] in multi_allowed_nations then
5271: LD_EXP 17
5275: PUSH
5276: LD_VAR 0 2
5280: ARRAY
5281: IFFALSE 5302
5283: PUSH
5284: LD_EXP 17
5288: PUSH
5289: LD_VAR 0 2
5293: ARRAY
5294: PUSH
5295: LD_EXP 21
5299: IN
5300: NOT
5301: AND
5302: IFFALSE 5343
// multi_nations := Replace ( multi_nations , i , multi_allowed_nations [ rand ( 1 , multi_allowed_nations ) ] ) ;
5304: LD_ADDR_EXP 17
5308: PUSH
5309: LD_EXP 17
5313: PPUSH
5314: LD_VAR 0 2
5318: PPUSH
5319: LD_EXP 21
5323: PUSH
5324: LD_INT 1
5326: PPUSH
5327: LD_EXP 21
5331: PPUSH
5332: CALL_OW 12
5336: ARRAY
5337: PPUSH
5338: CALL_OW 1
5342: ST_TO_ADDR
// if not multi_nations [ i ] and not multi_sides [ i ] and not multi_spec [ i ] then
5343: LD_EXP 17
5347: PUSH
5348: LD_VAR 0 2
5352: ARRAY
5353: NOT
5354: IFFALSE 5369
5356: PUSH
5357: LD_EXP 15
5361: PUSH
5362: LD_VAR 0 2
5366: ARRAY
5367: NOT
5368: AND
5369: IFFALSE 5384
5371: PUSH
5372: LD_EXP 19
5376: PUSH
5377: LD_VAR 0 2
5381: ARRAY
5382: NOT
5383: AND
5384: IFFALSE 5409
// multi_bots := Replace ( multi_bots , i , 1 ) ;
5386: LD_ADDR_EXP 22
5390: PUSH
5391: LD_EXP 22
5395: PPUSH
5396: LD_VAR 0 2
5400: PPUSH
5401: LD_INT 1
5403: PPUSH
5404: CALL_OW 1
5408: ST_TO_ADDR
// if multi_sides [ i ] then
5409: LD_EXP 15
5413: PUSH
5414: LD_VAR 0 2
5418: ARRAY
5419: IFFALSE 5435
// multi_players_amount := multi_players_amount + 1 ;
5421: LD_ADDR_EXP 33
5425: PUSH
5426: LD_EXP 33
5430: PUSH
5431: LD_INT 1
5433: PLUS
5434: ST_TO_ADDR
// end ;
5435: GO 5101
5437: POP
5438: POP
// for i in multi_teams do
5439: LD_ADDR_VAR 0 2
5443: PUSH
5444: LD_EXP 18
5448: PUSH
5449: FOR_IN
5450: IFFALSE 5558
// begin for j = 2 to i do
5452: LD_ADDR_VAR 0 3
5456: PUSH
5457: DOUBLE
5458: LD_INT 2
5460: DEC
5461: ST_TO_ADDR
5462: LD_VAR 0 2
5466: PUSH
5467: FOR_TO
5468: IFFALSE 5554
// begin ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
5470: LD_VAR 0 2
5474: PUSH
5475: LD_VAR 0 3
5479: ARRAY
5480: PPUSH
5481: LD_VAR 0 2
5485: PUSH
5486: LD_INT 1
5488: ARRAY
5489: PPUSH
5490: CALL_OW 343
// for x = 1 to j - 1 do
5494: LD_ADDR_VAR 0 4
5498: PUSH
5499: DOUBLE
5500: LD_INT 1
5502: DEC
5503: ST_TO_ADDR
5504: LD_VAR 0 3
5508: PUSH
5509: LD_INT 1
5511: MINUS
5512: PUSH
5513: FOR_TO
5514: IFFALSE 5550
// SetAttitude ( i [ j ] , i [ x ] , att_friend , true ) ;
5516: LD_VAR 0 2
5520: PUSH
5521: LD_VAR 0 3
5525: ARRAY
5526: PPUSH
5527: LD_VAR 0 2
5531: PUSH
5532: LD_VAR 0 4
5536: ARRAY
5537: PPUSH
5538: LD_INT 1
5540: PPUSH
5541: LD_INT 1
5543: PPUSH
5544: CALL_OW 80
5548: GO 5513
5550: POP
5551: POP
// end ;
5552: GO 5467
5554: POP
5555: POP
// end ;
5556: GO 5449
5558: POP
5559: POP
// Difficulty := [ 1 , 2 , 3 ] [ multi_settings [ 1 ] ] ;
5560: LD_ADDR_OWVAR 67
5564: PUSH
5565: LD_INT 1
5567: PUSH
5568: LD_INT 2
5570: PUSH
5571: LD_INT 3
5573: PUSH
5574: EMPTY
5575: LIST
5576: LIST
5577: LIST
5578: PUSH
5579: LD_EXP 25
5583: PUSH
5584: LD_INT 1
5586: ARRAY
5587: ARRAY
5588: ST_TO_ADDR
// multi_pep_amount := [ 9 , 12 , 15 ] [ multi_settings [ 2 ] ] ;
5589: LD_ADDR_EXP 27
5593: PUSH
5594: LD_INT 9
5596: PUSH
5597: LD_INT 12
5599: PUSH
5600: LD_INT 15
5602: PUSH
5603: EMPTY
5604: LIST
5605: LIST
5606: LIST
5607: PUSH
5608: LD_EXP 25
5612: PUSH
5613: LD_INT 2
5615: ARRAY
5616: ARRAY
5617: ST_TO_ADDR
// multi_skill_level := [ 1 , 3 , 4 , 6 ] [ multi_settings [ 3 ] ] ;
5618: LD_ADDR_EXP 28
5622: PUSH
5623: LD_INT 1
5625: PUSH
5626: LD_INT 3
5628: PUSH
5629: LD_INT 4
5631: PUSH
5632: LD_INT 6
5634: PUSH
5635: EMPTY
5636: LIST
5637: LIST
5638: LIST
5639: LIST
5640: PUSH
5641: LD_EXP 25
5645: PUSH
5646: LD_INT 3
5648: ARRAY
5649: ARRAY
5650: ST_TO_ADDR
// multi_points_to_victory := [ 3500 , 5000 , 7500 , 10000 , 15000 ] [ multi_settings [ 4 ] ] ;
5651: LD_ADDR_EXP 34
5655: PUSH
5656: LD_INT 3500
5658: PUSH
5659: LD_INT 5000
5661: PUSH
5662: LD_INT 7500
5664: PUSH
5665: LD_INT 10000
5667: PUSH
5668: LD_INT 15000
5670: PUSH
5671: EMPTY
5672: LIST
5673: LIST
5674: LIST
5675: LIST
5676: LIST
5677: PUSH
5678: LD_EXP 25
5682: PUSH
5683: LD_INT 4
5685: ARRAY
5686: ARRAY
5687: ST_TO_ADDR
// multi_crates_spawn := [ [ 1000 , 0 0$36 ] , [ 2000 , 0 0$30 ] , [ 3000 , 0 0$24 ] , [ 4000 , 0 0$18 ] ] [ multi_settings [ 5 ] ] ;
5688: LD_ADDR_EXP 29
5692: PUSH
5693: LD_INT 1000
5695: PUSH
5696: LD_INT 1260
5698: PUSH
5699: EMPTY
5700: LIST
5701: LIST
5702: PUSH
5703: LD_INT 2000
5705: PUSH
5706: LD_INT 1050
5708: PUSH
5709: EMPTY
5710: LIST
5711: LIST
5712: PUSH
5713: LD_INT 3000
5715: PUSH
5716: LD_INT 840
5718: PUSH
5719: EMPTY
5720: LIST
5721: LIST
5722: PUSH
5723: LD_INT 4000
5725: PUSH
5726: LD_INT 630
5728: PUSH
5729: EMPTY
5730: LIST
5731: LIST
5732: PUSH
5733: EMPTY
5734: LIST
5735: LIST
5736: LIST
5737: LIST
5738: PUSH
5739: LD_EXP 25
5743: PUSH
5744: LD_INT 5
5746: ARRAY
5747: ARRAY
5748: ST_TO_ADDR
// end ;
5749: LD_VAR 0 1
5753: RET
// export function Multiplayer_SetBotSide ( preferSide ) ; var i ; begin
5754: LD_INT 0
5756: PPUSH
5757: PPUSH
// if not multi_sides [ preferSide ] then
5758: LD_EXP 15
5762: PUSH
5763: LD_VAR 0 1
5767: ARRAY
5768: NOT
5769: IFFALSE 5783
// begin result := preferSide ;
5771: LD_ADDR_VAR 0 2
5775: PUSH
5776: LD_VAR 0 1
5780: ST_TO_ADDR
// exit ;
5781: GO 5830
// end ; for i := 1 to 8 do
5783: LD_ADDR_VAR 0 3
5787: PUSH
5788: DOUBLE
5789: LD_INT 1
5791: DEC
5792: ST_TO_ADDR
5793: LD_INT 8
5795: PUSH
5796: FOR_TO
5797: IFFALSE 5828
// if not multi_sides [ i ] then
5799: LD_EXP 15
5803: PUSH
5804: LD_VAR 0 3
5808: ARRAY
5809: NOT
5810: IFFALSE 5826
// begin result := i ;
5812: LD_ADDR_VAR 0 2
5816: PUSH
5817: LD_VAR 0 3
5821: ST_TO_ADDR
// exit ;
5822: POP
5823: POP
5824: GO 5830
// end ;
5826: GO 5796
5828: POP
5829: POP
// end ;
5830: LD_VAR 0 2
5834: RET
// export function Multiplayer_PrepareCustomCommanders ( side , num ) ; begin
5835: LD_INT 0
5837: PPUSH
// uc_side := side ;
5838: LD_ADDR_OWVAR 20
5842: PUSH
5843: LD_VAR 0 1
5847: ST_TO_ADDR
// uc_nation := nation_russian ;
5848: LD_ADDR_OWVAR 21
5852: PUSH
5853: LD_INT 3
5855: ST_TO_ADDR
// hc_importance := 100 ;
5856: LD_ADDR_OWVAR 32
5860: PUSH
5861: LD_INT 100
5863: ST_TO_ADDR
// if num = 1 then
5864: LD_VAR 0 2
5868: PUSH
5869: LD_INT 1
5871: EQUAL
5872: IFFALSE 5939
// begin PrepareSoldier ( sex_male , multi_skill_level + 1 ) ;
5874: LD_INT 1
5876: PPUSH
5877: LD_EXP 28
5881: PUSH
5882: LD_INT 1
5884: PLUS
5885: PPUSH
5886: CALL_OW 381
// hc_gallery := ru ;
5890: LD_ADDR_OWVAR 33
5894: PUSH
5895: LD_STRING ru
5897: ST_TO_ADDR
// hc_face_number := 13 ;
5898: LD_ADDR_OWVAR 34
5902: PUSH
5903: LD_INT 13
5905: ST_TO_ADDR
// hc_name := Kuzmov ;
5906: LD_ADDR_OWVAR 26
5910: PUSH
5911: LD_STRING Kuzmov
5913: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
5914: LD_ADDR_OWVAR 29
5918: PUSH
5919: LD_INT 11
5921: PUSH
5922: LD_INT 11
5924: PUSH
5925: EMPTY
5926: LIST
5927: LIST
5928: ST_TO_ADDR
// result := CreateHuman ;
5929: LD_ADDR_VAR 0 3
5933: PUSH
5934: CALL_OW 44
5938: ST_TO_ADDR
// end ; if num = 2 then
5939: LD_VAR 0 2
5943: PUSH
5944: LD_INT 2
5946: EQUAL
5947: IFFALSE 6014
// begin PrepareMechanic ( sex_male , multi_skill_level + 2 ) ;
5949: LD_INT 1
5951: PPUSH
5952: LD_EXP 28
5956: PUSH
5957: LD_INT 2
5959: PLUS
5960: PPUSH
5961: CALL_OW 383
// hc_gallery := ru ;
5965: LD_ADDR_OWVAR 33
5969: PUSH
5970: LD_STRING ru
5972: ST_TO_ADDR
// hc_face_number := 1 ;
5973: LD_ADDR_OWVAR 34
5977: PUSH
5978: LD_INT 1
5980: ST_TO_ADDR
// hc_name := Burlak ;
5981: LD_ADDR_OWVAR 26
5985: PUSH
5986: LD_STRING Burlak
5988: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
5989: LD_ADDR_OWVAR 29
5993: PUSH
5994: LD_INT 10
5996: PUSH
5997: LD_INT 11
5999: PUSH
6000: EMPTY
6001: LIST
6002: LIST
6003: ST_TO_ADDR
// result := CreateHuman ;
6004: LD_ADDR_VAR 0 3
6008: PUSH
6009: CALL_OW 44
6013: ST_TO_ADDR
// end ; end ;
6014: LD_VAR 0 3
6018: RET
// export function Multiplayer_PreparePlayers ( ) ; var i , j , b , cl , un , veh , vehicles , tmp , people_amount ; begin
6019: LD_INT 0
6021: PPUSH
6022: PPUSH
6023: PPUSH
6024: PPUSH
6025: PPUSH
6026: PPUSH
6027: PPUSH
6028: PPUSH
6029: PPUSH
6030: PPUSH
// for i := 1 to 8 do
6031: LD_ADDR_VAR 0 2
6035: PUSH
6036: DOUBLE
6037: LD_INT 1
6039: DEC
6040: ST_TO_ADDR
6041: LD_INT 8
6043: PUSH
6044: FOR_TO
6045: IFFALSE 7477
// begin if not multi_sides [ i ] then
6047: LD_EXP 15
6051: PUSH
6052: LD_VAR 0 2
6056: ARRAY
6057: NOT
6058: IFFALSE 6062
// continue ;
6060: GO 6044
// vehicles := multi_vehicles [ multi_sides [ i ] ] ;
6062: LD_ADDR_VAR 0 8
6066: PUSH
6067: LD_EXP 30
6071: PUSH
6072: LD_EXP 15
6076: PUSH
6077: LD_VAR 0 2
6081: ARRAY
6082: ARRAY
6083: ST_TO_ADDR
// if multi_buildings [ multi_sides [ i ] ] then
6084: LD_EXP 35
6088: PUSH
6089: LD_EXP 15
6093: PUSH
6094: LD_VAR 0 2
6098: ARRAY
6099: ARRAY
6100: IFFALSE 6397
// begin uc_side := i ;
6102: LD_ADDR_OWVAR 20
6106: PUSH
6107: LD_VAR 0 2
6111: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
6112: LD_ADDR_OWVAR 21
6116: PUSH
6117: LD_EXP 17
6121: PUSH
6122: LD_VAR 0 2
6126: ARRAY
6127: ST_TO_ADDR
// for j in multi_buildings [ multi_sides [ i ] ] do
6128: LD_ADDR_VAR 0 3
6132: PUSH
6133: LD_EXP 35
6137: PUSH
6138: LD_EXP 15
6142: PUSH
6143: LD_VAR 0 2
6147: ARRAY
6148: ARRAY
6149: PUSH
6150: FOR_IN
6151: IFFALSE 6395
// begin if j [ 1 ] = b_oil_mine then
6153: LD_VAR 0 3
6157: PUSH
6158: LD_INT 1
6160: ARRAY
6161: PUSH
6162: LD_INT 29
6164: EQUAL
6165: IFFALSE 6202
// SetResourceVisibility ( j [ 2 ] [ 1 ] , j [ 2 ] [ 2 ] , i ) ;
6167: LD_VAR 0 3
6171: PUSH
6172: LD_INT 2
6174: ARRAY
6175: PUSH
6176: LD_INT 1
6178: ARRAY
6179: PPUSH
6180: LD_VAR 0 3
6184: PUSH
6185: LD_INT 2
6187: ARRAY
6188: PUSH
6189: LD_INT 2
6191: ARRAY
6192: PPUSH
6193: LD_VAR 0 2
6197: PPUSH
6198: CALL_OW 441
// bc_type := j [ 1 ] ;
6202: LD_ADDR_OWVAR 42
6206: PUSH
6207: LD_VAR 0 3
6211: PUSH
6212: LD_INT 1
6214: ARRAY
6215: ST_TO_ADDR
// bc_level := 3 ;
6216: LD_ADDR_OWVAR 43
6220: PUSH
6221: LD_INT 3
6223: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( j [ 2 ] [ 1 ] , j [ 2 ] [ 2 ] , j [ 2 ] [ 3 ] ) ;
6224: LD_ADDR_VAR 0 4
6228: PUSH
6229: LD_VAR 0 3
6233: PUSH
6234: LD_INT 2
6236: ARRAY
6237: PUSH
6238: LD_INT 1
6240: ARRAY
6241: PPUSH
6242: LD_VAR 0 3
6246: PUSH
6247: LD_INT 2
6249: ARRAY
6250: PUSH
6251: LD_INT 2
6253: ARRAY
6254: PPUSH
6255: LD_VAR 0 3
6259: PUSH
6260: LD_INT 2
6262: ARRAY
6263: PUSH
6264: LD_INT 3
6266: ARRAY
6267: PPUSH
6268: CALL_OW 47
6272: ST_TO_ADDR
// if j [ 1 ] = b_depot then
6273: LD_VAR 0 3
6277: PUSH
6278: LD_INT 1
6280: ARRAY
6281: PUSH
6282: LD_INT 0
6284: EQUAL
6285: IFFALSE 6361
// begin SetResourceType ( GetBase ( b ) , mat_cans , [ 450 , 350 , 230 ] [ Difficulty ] ) ;
6287: LD_VAR 0 4
6291: PPUSH
6292: CALL_OW 274
6296: PPUSH
6297: LD_INT 1
6299: PPUSH
6300: LD_INT 450
6302: PUSH
6303: LD_INT 350
6305: PUSH
6306: LD_INT 230
6308: PUSH
6309: EMPTY
6310: LIST
6311: LIST
6312: LIST
6313: PUSH
6314: LD_OWVAR 67
6318: ARRAY
6319: PPUSH
6320: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_oil , [ 90 , 60 , 40 ] [ Difficulty ] ) ;
6324: LD_VAR 0 4
6328: PPUSH
6329: CALL_OW 274
6333: PPUSH
6334: LD_INT 2
6336: PPUSH
6337: LD_INT 90
6339: PUSH
6340: LD_INT 60
6342: PUSH
6343: LD_INT 40
6345: PUSH
6346: EMPTY
6347: LIST
6348: LIST
6349: LIST
6350: PUSH
6351: LD_OWVAR 67
6355: ARRAY
6356: PPUSH
6357: CALL_OW 277
// end ; if j [ 1 ] = b_bunker then
6361: LD_VAR 0 3
6365: PUSH
6366: LD_INT 1
6368: ARRAY
6369: PUSH
6370: LD_INT 32
6372: EQUAL
6373: IFFALSE 6393
// PlaceWeaponTurret ( b , j [ 3 ] ) ;
6375: LD_VAR 0 4
6379: PPUSH
6380: LD_VAR 0 3
6384: PUSH
6385: LD_INT 3
6387: ARRAY
6388: PPUSH
6389: CALL_OW 431
// end ;
6393: GO 6150
6395: POP
6396: POP
// end ; if multi_custom_commanders then
6397: LD_EXP 24
6401: IFFALSE 6618
// begin un := Multiplayer_PrepareCustomCommanders ( i , multi_sides [ i ] ) ;
6403: LD_ADDR_VAR 0 6
6407: PUSH
6408: LD_VAR 0 2
6412: PPUSH
6413: LD_EXP 15
6417: PUSH
6418: LD_VAR 0 2
6422: ARRAY
6423: PPUSH
6424: CALL 5835 0 2
6428: ST_TO_ADDR
// multi_commanders := Insert ( multi_commanders , multi_commanders + 1 , un ) ;
6429: LD_ADDR_EXP 31
6433: PUSH
6434: LD_EXP 31
6438: PPUSH
6439: LD_EXP 31
6443: PUSH
6444: LD_INT 1
6446: PLUS
6447: PPUSH
6448: LD_VAR 0 6
6452: PPUSH
6453: CALL_OW 2
6457: ST_TO_ADDR
// if GetClass ( un ) = class_mechanic then
6458: LD_VAR 0 6
6462: PPUSH
6463: CALL_OW 257
6467: PUSH
6468: LD_INT 3
6470: EQUAL
6471: IFFALSE 6583
// begin uc_nation := nation_russian ;
6473: LD_ADDR_OWVAR 21
6477: PUSH
6478: LD_INT 3
6480: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_wheeled , engine_combustion , control_manual , ru_gun , 80 ) ;
6481: LD_INT 23
6483: PPUSH
6484: LD_INT 1
6486: PPUSH
6487: LD_INT 1
6489: PPUSH
6490: LD_INT 44
6492: PPUSH
6493: LD_INT 80
6495: PPUSH
6496: CALL 20436 0 5
// veh := CreateVehicle ;
6500: LD_ADDR_VAR 0 7
6504: PUSH
6505: CALL_OW 45
6509: ST_TO_ADDR
// SetMark ( veh , GetSide ( un ) * - 1 ) ;
6510: LD_VAR 0 7
6514: PPUSH
6515: LD_VAR 0 6
6519: PPUSH
6520: CALL_OW 255
6524: PUSH
6525: LD_INT 1
6527: NEG
6528: MUL
6529: PPUSH
6530: CALL_OW 242
// PlaceUnitArea ( veh , multi_pos_area [ multi_sides [ i ] ] [ 2 ] , false ) ;
6534: LD_VAR 0 7
6538: PPUSH
6539: LD_EXP 20
6543: PUSH
6544: LD_EXP 15
6548: PUSH
6549: LD_VAR 0 2
6553: ARRAY
6554: ARRAY
6555: PUSH
6556: LD_INT 2
6558: ARRAY
6559: PPUSH
6560: LD_INT 0
6562: PPUSH
6563: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
6567: LD_VAR 0 6
6571: PPUSH
6572: LD_VAR 0 7
6576: PPUSH
6577: CALL_OW 52
// end else
6581: GO 6616
// PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
6583: LD_VAR 0 6
6587: PPUSH
6588: LD_EXP 20
6592: PUSH
6593: LD_EXP 15
6597: PUSH
6598: LD_VAR 0 2
6602: ARRAY
6603: ARRAY
6604: PUSH
6605: LD_INT 1
6607: ARRAY
6608: PPUSH
6609: LD_INT 0
6611: PPUSH
6612: CALL_OW 49
// end else
6616: GO 6829
// begin uc_side := i ;
6618: LD_ADDR_OWVAR 20
6622: PUSH
6623: LD_VAR 0 2
6627: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
6628: LD_ADDR_OWVAR 21
6632: PUSH
6633: LD_EXP 17
6637: PUSH
6638: LD_VAR 0 2
6642: ARRAY
6643: ST_TO_ADDR
// hc_importance := 100 ;
6644: LD_ADDR_OWVAR 32
6648: PUSH
6649: LD_INT 100
6651: ST_TO_ADDR
// PrepareHuman ( false , 1 , multi_skill_level ) ;
6652: LD_INT 0
6654: PPUSH
6655: LD_INT 1
6657: PPUSH
6658: LD_EXP 28
6662: PPUSH
6663: CALL_OW 380
// if multiplayer then
6667: LD_OWVAR 4
6671: IFFALSE 6729
// begin hc_name := mp_sides_players_names [ i ] ;
6673: LD_ADDR_OWVAR 26
6677: PUSH
6678: LD_OWVAR 19
6682: PUSH
6683: LD_VAR 0 2
6687: ARRAY
6688: ST_TO_ADDR
// hc_gallery := MULTIAVATARS ;
6689: LD_ADDR_OWVAR 33
6693: PUSH
6694: LD_STRING MULTIAVATARS
6696: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( i ) ;
6697: LD_ADDR_OWVAR 34
6701: PUSH
6702: LD_VAR 0 2
6706: PPUSH
6707: CALL_OW 525
6711: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( i ) ;
6712: LD_ADDR_OWVAR 27
6716: PUSH
6717: LD_VAR 0 2
6721: PPUSH
6722: CALL_OW 526
6726: ST_TO_ADDR
// end else
6727: GO 6761
// begin hc_gallery :=  ;
6729: LD_ADDR_OWVAR 33
6733: PUSH
6734: LD_STRING 
6736: ST_TO_ADDR
// hc_name :=  ;
6737: LD_ADDR_OWVAR 26
6741: PUSH
6742: LD_STRING 
6744: ST_TO_ADDR
// hc_sex := rand ( 1 , 2 ) ;
6745: LD_ADDR_OWVAR 27
6749: PUSH
6750: LD_INT 1
6752: PPUSH
6753: LD_INT 2
6755: PPUSH
6756: CALL_OW 12
6760: ST_TO_ADDR
// end ; un := CreateHuman ;
6761: LD_ADDR_VAR 0 6
6765: PUSH
6766: CALL_OW 44
6770: ST_TO_ADDR
// PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
6771: LD_VAR 0 6
6775: PPUSH
6776: LD_EXP 20
6780: PUSH
6781: LD_EXP 15
6785: PUSH
6786: LD_VAR 0 2
6790: ARRAY
6791: ARRAY
6792: PUSH
6793: LD_INT 1
6795: ARRAY
6796: PPUSH
6797: LD_INT 0
6799: PPUSH
6800: CALL_OW 49
// multi_commanders := Replace ( multi_commanders , i , un ) ;
6804: LD_ADDR_EXP 31
6808: PUSH
6809: LD_EXP 31
6813: PPUSH
6814: LD_VAR 0 2
6818: PPUSH
6819: LD_VAR 0 6
6823: PPUSH
6824: CALL_OW 1
6828: ST_TO_ADDR
// end ; InitHc ;
6829: CALL_OW 19
// InitUc ;
6833: CALL_OW 18
// uc_side := i ;
6837: LD_ADDR_OWVAR 20
6841: PUSH
6842: LD_VAR 0 2
6846: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
6847: LD_ADDR_OWVAR 21
6851: PUSH
6852: LD_EXP 17
6856: PUSH
6857: LD_VAR 0 2
6861: ARRAY
6862: ST_TO_ADDR
// hc_gallery :=  ;
6863: LD_ADDR_OWVAR 33
6867: PUSH
6868: LD_STRING 
6870: ST_TO_ADDR
// hc_name :=  ;
6871: LD_ADDR_OWVAR 26
6875: PUSH
6876: LD_STRING 
6878: ST_TO_ADDR
// hc_importance := 0 ;
6879: LD_ADDR_OWVAR 32
6883: PUSH
6884: LD_INT 0
6886: ST_TO_ADDR
// cl := 1 ;
6887: LD_ADDR_VAR 0 5
6891: PUSH
6892: LD_INT 1
6894: ST_TO_ADDR
// for j := 2 to multi_pep_amount do
6895: LD_ADDR_VAR 0 3
6899: PUSH
6900: DOUBLE
6901: LD_INT 2
6903: DEC
6904: ST_TO_ADDR
6905: LD_EXP 27
6909: PUSH
6910: FOR_TO
6911: IFFALSE 7473
// begin if ( j - 1 ) mod ( ( multi_pep_amount - 1 ) / 4 ) = 0 then
6913: LD_VAR 0 3
6917: PUSH
6918: LD_INT 1
6920: MINUS
6921: PUSH
6922: LD_EXP 27
6926: PUSH
6927: LD_INT 1
6929: MINUS
6930: PUSH
6931: LD_INT 4
6933: DIVREAL
6934: MOD
6935: PUSH
6936: LD_INT 0
6938: EQUAL
6939: IFFALSE 6955
// cl := cl + 1 ;
6941: LD_ADDR_VAR 0 5
6945: PUSH
6946: LD_VAR 0 5
6950: PUSH
6951: LD_INT 1
6953: PLUS
6954: ST_TO_ADDR
// if cl > 4 then
6955: LD_VAR 0 5
6959: PUSH
6960: LD_INT 4
6962: GREATER
6963: IFFALSE 6973
// cl := 1 ;
6965: LD_ADDR_VAR 0 5
6969: PUSH
6970: LD_INT 1
6972: ST_TO_ADDR
// if multi_sides [ i ] = 2 and ( cl = 2 or ( cl = 4 and FilterAllUnits ( [ [ f_side , i ] , [ f_class , 4 ] ] ) > 1 ) ) then
6973: LD_EXP 15
6977: PUSH
6978: LD_VAR 0 2
6982: ARRAY
6983: PUSH
6984: LD_INT 2
6986: EQUAL
6987: IFFALSE 7049
6989: PUSH
6990: LD_VAR 0 5
6994: PUSH
6995: LD_INT 2
6997: EQUAL
6998: IFTRUE 7048
7000: PUSH
7001: LD_VAR 0 5
7005: PUSH
7006: LD_INT 4
7008: EQUAL
7009: IFFALSE 7047
7011: PUSH
7012: LD_INT 22
7014: PUSH
7015: LD_VAR 0 2
7019: PUSH
7020: EMPTY
7021: LIST
7022: LIST
7023: PUSH
7024: LD_INT 25
7026: PUSH
7027: LD_INT 4
7029: PUSH
7030: EMPTY
7031: LIST
7032: LIST
7033: PUSH
7034: EMPTY
7035: LIST
7036: LIST
7037: PPUSH
7038: CALL_OW 69
7042: PUSH
7043: LD_INT 1
7045: GREATER
7046: AND
7047: OR
7048: AND
7049: IFFALSE 7068
// PrepareHuman ( false , 1 , multi_skill_level ) else
7051: LD_INT 0
7053: PPUSH
7054: LD_INT 1
7056: PPUSH
7057: LD_EXP 28
7061: PPUSH
7062: CALL_OW 380
7066: GO 7085
// PrepareHuman ( false , cl , multi_skill_level ) ;
7068: LD_INT 0
7070: PPUSH
7071: LD_VAR 0 5
7075: PPUSH
7076: LD_EXP 28
7080: PPUSH
7081: CALL_OW 380
// un := CreateHuman ;
7085: LD_ADDR_VAR 0 6
7089: PUSH
7090: CALL_OW 44
7094: ST_TO_ADDR
// if multi_pos_area then
7095: LD_EXP 20
7099: IFFALSE 7471
// begin if GetClass ( un ) = 3 and vehicles then
7101: LD_VAR 0 6
7105: PPUSH
7106: CALL_OW 257
7110: PUSH
7111: LD_INT 3
7113: EQUAL
7114: IFFALSE 7122
7116: PUSH
7117: LD_VAR 0 8
7121: AND
7122: IFFALSE 7307
// begin PrepareVehicle ( vehicles [ 1 ] [ 1 ] , vehicles [ 1 ] [ 2 ] , vehicles [ 1 ] [ 3 ] , vehicles [ 1 ] [ 4 ] , [ 80 , 60 , 40 ] [ Difficulty ] ) ;
7124: LD_VAR 0 8
7128: PUSH
7129: LD_INT 1
7131: ARRAY
7132: PUSH
7133: LD_INT 1
7135: ARRAY
7136: PPUSH
7137: LD_VAR 0 8
7141: PUSH
7142: LD_INT 1
7144: ARRAY
7145: PUSH
7146: LD_INT 2
7148: ARRAY
7149: PPUSH
7150: LD_VAR 0 8
7154: PUSH
7155: LD_INT 1
7157: ARRAY
7158: PUSH
7159: LD_INT 3
7161: ARRAY
7162: PPUSH
7163: LD_VAR 0 8
7167: PUSH
7168: LD_INT 1
7170: ARRAY
7171: PUSH
7172: LD_INT 4
7174: ARRAY
7175: PPUSH
7176: LD_INT 80
7178: PUSH
7179: LD_INT 60
7181: PUSH
7182: LD_INT 40
7184: PUSH
7185: EMPTY
7186: LIST
7187: LIST
7188: LIST
7189: PUSH
7190: LD_OWVAR 67
7194: ARRAY
7195: PPUSH
7196: CALL 20436 0 5
// veh := CreateVehicle ;
7200: LD_ADDR_VAR 0 7
7204: PUSH
7205: CALL_OW 45
7209: ST_TO_ADDR
// PlaceUnitArea ( veh , multi_pos_area [ multi_sides [ i ] ] [ 2 ] , false ) ;
7210: LD_VAR 0 7
7214: PPUSH
7215: LD_EXP 20
7219: PUSH
7220: LD_EXP 15
7224: PUSH
7225: LD_VAR 0 2
7229: ARRAY
7230: ARRAY
7231: PUSH
7232: LD_INT 2
7234: ARRAY
7235: PPUSH
7236: LD_INT 0
7238: PPUSH
7239: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
7243: LD_VAR 0 6
7247: PPUSH
7248: LD_VAR 0 7
7252: PPUSH
7253: CALL_OW 52
// if GetWeapon ( veh ) = ru_cargo_bay then
7257: LD_VAR 0 7
7261: PPUSH
7262: CALL_OW 264
7266: PUSH
7267: LD_INT 51
7269: EQUAL
7270: IFFALSE 7287
// SetCargo ( veh , mat_oil , 60 ) ;
7272: LD_VAR 0 7
7276: PPUSH
7277: LD_INT 2
7279: PPUSH
7280: LD_INT 60
7282: PPUSH
7283: CALL_OW 290
// vehicles := Delete ( vehicles , 1 ) ;
7287: LD_ADDR_VAR 0 8
7291: PUSH
7292: LD_VAR 0 8
7296: PPUSH
7297: LD_INT 1
7299: PPUSH
7300: CALL_OW 3
7304: ST_TO_ADDR
// continue ;
7305: GO 6910
// end ; tmp := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ;
7307: LD_ADDR_VAR 0 9
7311: PUSH
7312: LD_INT 22
7314: PUSH
7315: LD_VAR 0 2
7319: PUSH
7320: EMPTY
7321: LIST
7322: LIST
7323: PUSH
7324: LD_INT 2
7326: PUSH
7327: LD_INT 30
7329: PUSH
7330: LD_INT 32
7332: PUSH
7333: EMPTY
7334: LIST
7335: LIST
7336: PUSH
7337: LD_INT 30
7339: PUSH
7340: LD_INT 31
7342: PUSH
7343: EMPTY
7344: LIST
7345: LIST
7346: PUSH
7347: EMPTY
7348: LIST
7349: LIST
7350: LIST
7351: PUSH
7352: LD_INT 58
7354: PUSH
7355: EMPTY
7356: LIST
7357: PUSH
7358: EMPTY
7359: LIST
7360: LIST
7361: LIST
7362: PPUSH
7363: CALL_OW 69
7367: ST_TO_ADDR
// if GetClass ( un ) = 1 and tmp then
7368: LD_VAR 0 6
7372: PPUSH
7373: CALL_OW 257
7377: PUSH
7378: LD_INT 1
7380: EQUAL
7381: IFFALSE 7389
7383: PUSH
7384: LD_VAR 0 9
7388: AND
7389: IFFALSE 7438
// begin SetDir ( un , GetDir ( tmp [ 1 ] ) - 3 ) ;
7391: LD_VAR 0 6
7395: PPUSH
7396: LD_VAR 0 9
7400: PUSH
7401: LD_INT 1
7403: ARRAY
7404: PPUSH
7405: CALL_OW 254
7409: PUSH
7410: LD_INT 3
7412: MINUS
7413: PPUSH
7414: CALL_OW 233
// PlaceHumanInUnit ( un , tmp [ 1 ] ) ;
7418: LD_VAR 0 6
7422: PPUSH
7423: LD_VAR 0 9
7427: PUSH
7428: LD_INT 1
7430: ARRAY
7431: PPUSH
7432: CALL_OW 52
// continue ;
7436: GO 6910
// end ; PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
7438: LD_VAR 0 6
7442: PPUSH
7443: LD_EXP 20
7447: PUSH
7448: LD_EXP 15
7452: PUSH
7453: LD_VAR 0 2
7457: ARRAY
7458: ARRAY
7459: PUSH
7460: LD_INT 1
7462: ARRAY
7463: PPUSH
7464: LD_INT 0
7466: PPUSH
7467: CALL_OW 49
// end ; end ;
7471: GO 6910
7473: POP
7474: POP
// end ;
7475: GO 6044
7477: POP
7478: POP
// end ;
7479: LD_VAR 0 1
7483: RET
// export function Multiplayer_Start ( ) ; begin
7484: LD_INT 0
7486: PPUSH
// Multiplayer_PreparePlayers ( ) ;
7487: CALL 6019 0 0
// Multiplayer_InitPointSystem ( ) ;
7491: CALL 8208 0 0
// Multiplayer_RegisterCondition ( 20 ) ;
7495: LD_INT 20
7497: PPUSH
7498: CALL 8392 0 1
// Multiplayer_RegisterCondition ( 150 ) ;
7502: LD_INT 150
7504: PPUSH
7505: CALL 8392 0 1
// Multiplayer_RegisterCondition ( 5 ) ;
7509: LD_INT 5
7511: PPUSH
7512: CALL 8392 0 1
// Multiplayer_RegisterCondition ( - 60 ) ;
7516: LD_INT 60
7518: NEG
7519: PPUSH
7520: CALL 8392 0 1
// Multiplayer_RegisterCondition ( - 40 ) ;
7524: LD_INT 40
7526: NEG
7527: PPUSH
7528: CALL 8392 0 1
// Multiplayer_RegisterCondition ( 2 ) ;
7532: LD_INT 2
7534: PPUSH
7535: CALL 8392 0 1
// Multiplayer_RegisterCondition ( 110 ) ;
7539: LD_INT 110
7541: PPUSH
7542: CALL 8392 0 1
// Multiplayer_RegisterCondition ( 55 ) ;
7546: LD_INT 55
7548: PPUSH
7549: CALL 8392 0 1
// Multiplayer_RegisterCondition ( - 1000 ) ;
7553: LD_INT 1000
7555: NEG
7556: PPUSH
7557: CALL 8392 0 1
// if multi_sides [ your_side ] then
7561: LD_EXP 15
7565: PUSH
7566: LD_OWVAR 2
7570: ARRAY
7571: IFFALSE 7598
// CenterNowOnUnits ( FilterAllUnits ( [ f_side , your_side ] ) [ 1 ] ) ;
7573: LD_INT 22
7575: PUSH
7576: LD_OWVAR 2
7580: PUSH
7581: EMPTY
7582: LIST
7583: LIST
7584: PPUSH
7585: CALL_OW 69
7589: PUSH
7590: LD_INT 1
7592: ARRAY
7593: PPUSH
7594: CALL_OW 87
// end ;
7598: LD_VAR 0 1
7602: RET
// export function Multiplayer_End ( ) ; var i , j , points ; begin
7603: LD_INT 0
7605: PPUSH
7606: PPUSH
7607: PPUSH
7608: PPUSH
// repeat wait ( 0 0$1 ) ;
7609: LD_INT 35
7611: PPUSH
7612: CALL_OW 67
// points := 0 ;
7616: LD_ADDR_VAR 0 4
7620: PUSH
7621: LD_INT 0
7623: ST_TO_ADDR
// for i := 1 to 8 do
7624: LD_ADDR_VAR 0 2
7628: PUSH
7629: DOUBLE
7630: LD_INT 1
7632: DEC
7633: ST_TO_ADDR
7634: LD_INT 8
7636: PUSH
7637: FOR_TO
7638: IFFALSE 7664
// points := points + multi_points [ i ] ;
7640: LD_ADDR_VAR 0 4
7644: PUSH
7645: LD_VAR 0 4
7649: PUSH
7650: LD_EXP 38
7654: PUSH
7655: LD_VAR 0 2
7659: ARRAY
7660: PLUS
7661: ST_TO_ADDR
7662: GO 7637
7664: POP
7665: POP
// if not multi_custom_commanders then
7666: LD_EXP 24
7670: NOT
7671: IFFALSE 7786
// begin for i := 1 to 8 do
7673: LD_ADDR_VAR 0 2
7677: PUSH
7678: DOUBLE
7679: LD_INT 1
7681: DEC
7682: ST_TO_ADDR
7683: LD_INT 8
7685: PUSH
7686: FOR_TO
7687: IFFALSE 7760
// begin if FilterAllUnits ( [ f_side , i ] ) = 0 and not multi_loosers [ i ] then
7689: LD_INT 22
7691: PUSH
7692: LD_VAR 0 2
7696: PUSH
7697: EMPTY
7698: LIST
7699: LIST
7700: PPUSH
7701: CALL_OW 69
7705: PUSH
7706: LD_INT 0
7708: EQUAL
7709: IFFALSE 7724
7711: PUSH
7712: LD_EXP 32
7716: PUSH
7717: LD_VAR 0 2
7721: ARRAY
7722: NOT
7723: AND
7724: IFFALSE 7758
// begin multi_loosers := Replace ( multi_loosers , i , 1 ) ;
7726: LD_ADDR_EXP 32
7730: PUSH
7731: LD_EXP 32
7735: PPUSH
7736: LD_VAR 0 2
7740: PPUSH
7741: LD_INT 1
7743: PPUSH
7744: CALL_OW 1
7748: ST_TO_ADDR
// Multiplayer_Reside ( i ) ;
7749: LD_VAR 0 2
7753: PPUSH
7754: CALL 8462 0 1
// end ; end ;
7758: GO 7686
7760: POP
7761: POP
// if Count ( multi_loosers ) = Count ( multi_sides ) then
7762: LD_EXP 32
7766: PPUSH
7767: CALL 17674 0 1
7771: PUSH
7772: LD_EXP 15
7776: PPUSH
7777: CALL 17674 0 1
7781: EQUAL
7782: IFFALSE 7786
// break ;
7784: GO 7831
// end ; if points >= multi_points_to_victory then
7786: LD_VAR 0 4
7790: PUSH
7791: LD_EXP 34
7795: GREATEREQUAL
7796: IFFALSE 7808
// begin winAllowed := true ;
7798: LD_ADDR_EXP 3
7802: PUSH
7803: LD_INT 1
7805: ST_TO_ADDR
// break ;
7806: GO 7831
// end ; until ( winAllowed and game ) or not multi_commanders ;
7808: LD_EXP 3
7812: IFFALSE 7820
7814: PUSH
7815: LD_EXP 2
7819: AND
7820: IFTRUE 7829
7822: PUSH
7823: LD_EXP 31
7827: NOT
7828: OR
7829: IFFALSE 7609
// game := false ;
7831: LD_ADDR_EXP 2
7835: PUSH
7836: LD_INT 0
7838: ST_TO_ADDR
// for i := 1 to 8 do
7839: LD_ADDR_VAR 0 2
7843: PUSH
7844: DOUBLE
7845: LD_INT 1
7847: DEC
7848: ST_TO_ADDR
7849: LD_INT 8
7851: PUSH
7852: FOR_TO
7853: IFFALSE 7889
// begin if multi_sides [ i ] then
7855: LD_EXP 15
7859: PUSH
7860: LD_VAR 0 2
7864: ARRAY
7865: IFFALSE 7887
// SetMultiScore ( i , multi_points [ i ] ) ;
7867: LD_VAR 0 2
7871: PPUSH
7872: LD_EXP 38
7876: PUSH
7877: LD_VAR 0 2
7881: ARRAY
7882: PPUSH
7883: CALL_OW 506
// end ;
7887: GO 7852
7889: POP
7890: POP
// if multi_loosers [ your_side ] then
7891: LD_EXP 32
7895: PUSH
7896: LD_OWVAR 2
7900: ARRAY
7901: IFFALSE 7924
// begin if Multiplayer then
7903: LD_OWVAR 4
7907: IFFALSE 7915
// YouLostInMultiplayer else
7909: CALL_OW 107
7913: GO 7922
// YouLost (  ) ;
7915: LD_STRING 
7917: PPUSH
7918: CALL_OW 104
// end else
7922: GO 7940
// begin if Multiplayer then
7924: LD_OWVAR 4
7928: IFFALSE 7936
// YouWinInMultiplayer else
7930: CALL_OW 106
7934: GO 7940
// YouWin ;
7936: CALL_OW 103
// end ; end ;
7940: LD_VAR 0 1
7944: RET
// export function Multiplayer_EnemyAlive ( ) ; var side ; begin
7945: LD_INT 0
7947: PPUSH
7948: PPUSH
// result := false ;
7949: LD_ADDR_VAR 0 1
7953: PUSH
7954: LD_INT 0
7956: ST_TO_ADDR
// for side in botSides do
7957: LD_ADDR_VAR 0 2
7961: PUSH
7962: LD_EXP 4
7966: PUSH
7967: FOR_IN
7968: IFFALSE 8029
// begin result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] , [ f_ok ] ] ) > 0 ;
7970: LD_ADDR_VAR 0 1
7974: PUSH
7975: LD_INT 22
7977: PUSH
7978: LD_VAR 0 2
7982: PUSH
7983: EMPTY
7984: LIST
7985: LIST
7986: PUSH
7987: LD_INT 21
7989: PUSH
7990: LD_INT 1
7992: PUSH
7993: EMPTY
7994: LIST
7995: LIST
7996: PUSH
7997: LD_INT 50
7999: PUSH
8000: EMPTY
8001: LIST
8002: PUSH
8003: EMPTY
8004: LIST
8005: LIST
8006: LIST
8007: PPUSH
8008: CALL_OW 69
8012: PUSH
8013: LD_INT 0
8015: GREATER
8016: ST_TO_ADDR
// if result then
8017: LD_VAR 0 1
8021: IFFALSE 8027
// exit ;
8023: POP
8024: POP
8025: GO 8031
// end ;
8027: GO 7967
8029: POP
8030: POP
// end ;
8031: LD_VAR 0 1
8035: RET
// export function Multiplayer_DisplayStrings ( ) ; var i , points ; begin
8036: LD_INT 0
8038: PPUSH
8039: PPUSH
8040: PPUSH
// result := [ ] ;
8041: LD_ADDR_VAR 0 1
8045: PUSH
8046: EMPTY
8047: ST_TO_ADDR
// points := 0 ;
8048: LD_ADDR_VAR 0 3
8052: PUSH
8053: LD_INT 0
8055: ST_TO_ADDR
// for i := 1 to 8 do
8056: LD_ADDR_VAR 0 2
8060: PUSH
8061: DOUBLE
8062: LD_INT 1
8064: DEC
8065: ST_TO_ADDR
8066: LD_INT 8
8068: PUSH
8069: FOR_TO
8070: IFFALSE 8149
// begin points := points + multi_points [ i ] ;
8072: LD_ADDR_VAR 0 3
8076: PUSH
8077: LD_VAR 0 3
8081: PUSH
8082: LD_EXP 38
8086: PUSH
8087: LD_VAR 0 2
8091: ARRAY
8092: PLUS
8093: ST_TO_ADDR
// if multi_sides [ i ] then
8094: LD_EXP 15
8098: PUSH
8099: LD_VAR 0 2
8103: ARRAY
8104: IFFALSE 8147
// begin result := result ^ [ #coop-points , i , i , multi_points [ i ] ] ;
8106: LD_ADDR_VAR 0 1
8110: PUSH
8111: LD_VAR 0 1
8115: PUSH
8116: LD_STRING #coop-points
8118: PUSH
8119: LD_VAR 0 2
8123: PUSH
8124: LD_VAR 0 2
8128: PUSH
8129: LD_EXP 38
8133: PUSH
8134: LD_VAR 0 2
8138: ARRAY
8139: PUSH
8140: EMPTY
8141: LIST
8142: LIST
8143: LIST
8144: LIST
8145: ADD
8146: ST_TO_ADDR
// end ; end ;
8147: GO 8069
8149: POP
8150: POP
// result := result ^ [ #saved-convoys , savedConvoyUnits ] ;
8151: LD_ADDR_VAR 0 1
8155: PUSH
8156: LD_VAR 0 1
8160: PUSH
8161: LD_STRING #saved-convoys
8163: PUSH
8164: LD_EXP 5
8168: PUSH
8169: EMPTY
8170: LIST
8171: LIST
8172: ADD
8173: ST_TO_ADDR
// result := result ^ [ #points-to-win , points , multi_points_to_victory ] ;
8174: LD_ADDR_VAR 0 1
8178: PUSH
8179: LD_VAR 0 1
8183: PUSH
8184: LD_STRING #points-to-win
8186: PUSH
8187: LD_VAR 0 3
8191: PUSH
8192: LD_EXP 34
8196: PUSH
8197: EMPTY
8198: LIST
8199: LIST
8200: LIST
8201: ADD
8202: ST_TO_ADDR
// end ;
8203: LD_VAR 0 1
8207: RET
// export multi_points , multi_points_conditions ; export function Multiplayer_InitPointSystem ( ) ; var i ; begin
8208: LD_INT 0
8210: PPUSH
8211: PPUSH
// multi_points := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
8212: LD_ADDR_EXP 38
8216: PUSH
8217: LD_INT 0
8219: PUSH
8220: LD_INT 0
8222: PUSH
8223: LD_INT 0
8225: PUSH
8226: LD_INT 0
8228: PUSH
8229: LD_INT 0
8231: PUSH
8232: LD_INT 0
8234: PUSH
8235: LD_INT 0
8237: PUSH
8238: LD_INT 0
8240: PUSH
8241: EMPTY
8242: LIST
8243: LIST
8244: LIST
8245: LIST
8246: LIST
8247: LIST
8248: LIST
8249: LIST
8250: ST_TO_ADDR
// multi_points_conditions := [ ] ;
8251: LD_ADDR_EXP 39
8255: PUSH
8256: EMPTY
8257: ST_TO_ADDR
// end ;
8258: LD_VAR 0 1
8262: RET
// export function Multiplayer_AddPoints ( side , amount ) ; begin
8263: LD_INT 0
8265: PPUSH
// if not multi_points or not side or side > 8 then
8266: LD_EXP 38
8270: NOT
8271: IFTRUE 8280
8273: PUSH
8274: LD_VAR 0 1
8278: NOT
8279: OR
8280: IFTRUE 8292
8282: PUSH
8283: LD_VAR 0 1
8287: PUSH
8288: LD_INT 8
8290: GREATER
8291: OR
8292: IFFALSE 8296
// exit ;
8294: GO 8333
// multi_points := Replace ( multi_points , side , multi_points [ side ] + amount ) ;
8296: LD_ADDR_EXP 38
8300: PUSH
8301: LD_EXP 38
8305: PPUSH
8306: LD_VAR 0 1
8310: PPUSH
8311: LD_EXP 38
8315: PUSH
8316: LD_VAR 0 1
8320: ARRAY
8321: PUSH
8322: LD_VAR 0 2
8326: PLUS
8327: PPUSH
8328: CALL_OW 1
8332: ST_TO_ADDR
// end ;
8333: LD_VAR 0 3
8337: RET
// export function Multiplayer_GetPoints ( side ) ; begin
8338: LD_INT 0
8340: PPUSH
// if not multi_points or not side or side > 8 then
8341: LD_EXP 38
8345: NOT
8346: IFTRUE 8355
8348: PUSH
8349: LD_VAR 0 1
8353: NOT
8354: OR
8355: IFTRUE 8367
8357: PUSH
8358: LD_VAR 0 1
8362: PUSH
8363: LD_INT 8
8365: GREATER
8366: OR
8367: IFFALSE 8371
// exit ;
8369: GO 8387
// result := multi_points [ side ] ;
8371: LD_ADDR_VAR 0 2
8375: PUSH
8376: LD_EXP 38
8380: PUSH
8381: LD_VAR 0 1
8385: ARRAY
8386: ST_TO_ADDR
// end ;
8387: LD_VAR 0 2
8391: RET
// export function Multiplayer_RegisterCondition ( points ) ; begin
8392: LD_INT 0
8394: PPUSH
// multi_points_conditions := Replace ( multi_points_conditions , multi_points_conditions + 1 , points ) ;
8395: LD_ADDR_EXP 39
8399: PUSH
8400: LD_EXP 39
8404: PPUSH
8405: LD_EXP 39
8409: PUSH
8410: LD_INT 1
8412: PLUS
8413: PPUSH
8414: LD_VAR 0 1
8418: PPUSH
8419: CALL_OW 1
8423: ST_TO_ADDR
// end ;
8424: LD_VAR 0 2
8428: RET
// export function Multiplayer_GetCondition ( id ) ; begin
8429: LD_INT 0
8431: PPUSH
// if not id then
8432: LD_VAR 0 1
8436: NOT
8437: IFFALSE 8441
// exit ;
8439: GO 8457
// result := multi_points_conditions [ id ] ;
8441: LD_ADDR_VAR 0 2
8445: PUSH
8446: LD_EXP 39
8450: PUSH
8451: LD_VAR 0 1
8455: ARRAY
8456: ST_TO_ADDR
// end ;
8457: LD_VAR 0 2
8461: RET
// export function Multiplayer_Reside ( side ) ; var players , i , j , tmp ; begin
8462: LD_INT 0
8464: PPUSH
8465: PPUSH
8466: PPUSH
8467: PPUSH
8468: PPUSH
// players := [ ] ;
8469: LD_ADDR_VAR 0 3
8473: PUSH
8474: EMPTY
8475: ST_TO_ADDR
// for i = 1 to 8 do
8476: LD_ADDR_VAR 0 4
8480: PUSH
8481: DOUBLE
8482: LD_INT 1
8484: DEC
8485: ST_TO_ADDR
8486: LD_INT 8
8488: PUSH
8489: FOR_TO
8490: IFFALSE 8551
// begin if i = side then
8492: LD_VAR 0 4
8496: PUSH
8497: LD_VAR 0 1
8501: EQUAL
8502: IFFALSE 8506
// continue ;
8504: GO 8489
// if multi_sides [ i ] and not multi_loosers [ i ] then
8506: LD_EXP 15
8510: PUSH
8511: LD_VAR 0 4
8515: ARRAY
8516: IFFALSE 8531
8518: PUSH
8519: LD_EXP 32
8523: PUSH
8524: LD_VAR 0 4
8528: ARRAY
8529: NOT
8530: AND
8531: IFFALSE 8549
// players := players ^ i ;
8533: LD_ADDR_VAR 0 3
8537: PUSH
8538: LD_VAR 0 3
8542: PUSH
8543: LD_VAR 0 4
8547: ADD
8548: ST_TO_ADDR
// end ;
8549: GO 8489
8551: POP
8552: POP
// if not players then
8553: LD_VAR 0 3
8557: NOT
8558: IFFALSE 8562
// exit ;
8560: GO 8829
// if players = 1 then
8562: LD_VAR 0 3
8566: PUSH
8567: LD_INT 1
8569: EQUAL
8570: IFFALSE 8631
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_alive ] ] ) do
8572: LD_ADDR_VAR 0 4
8576: PUSH
8577: LD_INT 22
8579: PUSH
8580: LD_VAR 0 1
8584: PUSH
8585: EMPTY
8586: LIST
8587: LIST
8588: PUSH
8589: LD_INT 51
8591: PUSH
8592: EMPTY
8593: LIST
8594: PUSH
8595: EMPTY
8596: LIST
8597: LIST
8598: PPUSH
8599: CALL_OW 69
8603: PUSH
8604: FOR_IN
8605: IFFALSE 8627
// SetSide ( i , players [ 1 ] ) ;
8607: LD_VAR 0 4
8611: PPUSH
8612: LD_VAR 0 3
8616: PUSH
8617: LD_INT 1
8619: ARRAY
8620: PPUSH
8621: CALL_OW 235
8625: GO 8604
8627: POP
8628: POP
// end else
8629: GO 8829
// begin j := 1 ;
8631: LD_ADDR_VAR 0 5
8635: PUSH
8636: LD_INT 1
8638: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ [ f_type , unit_human ] , [ f_alive ] ] , [ f_type , unit_vehicle ] ] ] ) do
8639: LD_ADDR_VAR 0 4
8643: PUSH
8644: LD_INT 22
8646: PUSH
8647: LD_VAR 0 1
8651: PUSH
8652: EMPTY
8653: LIST
8654: LIST
8655: PUSH
8656: LD_INT 2
8658: PUSH
8659: LD_INT 21
8661: PUSH
8662: LD_INT 1
8664: PUSH
8665: EMPTY
8666: LIST
8667: LIST
8668: PUSH
8669: LD_INT 51
8671: PUSH
8672: EMPTY
8673: LIST
8674: PUSH
8675: EMPTY
8676: LIST
8677: LIST
8678: PUSH
8679: LD_INT 21
8681: PUSH
8682: LD_INT 2
8684: PUSH
8685: EMPTY
8686: LIST
8687: LIST
8688: PUSH
8689: EMPTY
8690: LIST
8691: LIST
8692: LIST
8693: PUSH
8694: EMPTY
8695: LIST
8696: LIST
8697: PPUSH
8698: CALL_OW 69
8702: PUSH
8703: FOR_IN
8704: IFFALSE 8827
// begin SetSide ( i , players [ j ] ) ;
8706: LD_VAR 0 4
8710: PPUSH
8711: LD_VAR 0 3
8715: PUSH
8716: LD_VAR 0 5
8720: ARRAY
8721: PPUSH
8722: CALL_OW 235
// if IsDrivenBy ( i ) then
8726: LD_VAR 0 4
8730: PPUSH
8731: CALL_OW 311
8735: IFFALSE 8762
// SetSide ( IsDrivenBy ( i ) , players [ j ] ) ;
8737: LD_VAR 0 4
8741: PPUSH
8742: CALL_OW 311
8746: PPUSH
8747: LD_VAR 0 3
8751: PUSH
8752: LD_VAR 0 5
8756: ARRAY
8757: PPUSH
8758: CALL_OW 235
// if GetType ( IsInUnit ( i ) ) = unit_building then
8762: LD_VAR 0 4
8766: PPUSH
8767: CALL_OW 310
8771: PPUSH
8772: CALL_OW 247
8776: PUSH
8777: LD_INT 3
8779: EQUAL
8780: IFFALSE 8791
// ComExitBuilding ( i ) ;
8782: LD_VAR 0 4
8786: PPUSH
8787: CALL_OW 122
// j := j + 1 ;
8791: LD_ADDR_VAR 0 5
8795: PUSH
8796: LD_VAR 0 5
8800: PUSH
8801: LD_INT 1
8803: PLUS
8804: ST_TO_ADDR
// if j > players then
8805: LD_VAR 0 5
8809: PUSH
8810: LD_VAR 0 3
8814: GREATER
8815: IFFALSE 8825
// j := 1 ;
8817: LD_ADDR_VAR 0 5
8821: PUSH
8822: LD_INT 1
8824: ST_TO_ADDR
// end ;
8825: GO 8703
8827: POP
8828: POP
// end ; end ;
8829: LD_VAR 0 2
8833: RET
// export function MultiplayerEvent_Produced ( side ) ; begin
8834: LD_INT 0
8836: PPUSH
// if not side or side > 8 then
8837: LD_VAR 0 1
8841: NOT
8842: IFTRUE 8854
8844: PUSH
8845: LD_VAR 0 1
8849: PUSH
8850: LD_INT 8
8852: GREATER
8853: OR
8854: IFFALSE 8858
// exit ;
8856: GO 8875
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 6 ) ) ;
8858: LD_VAR 0 1
8862: PPUSH
8863: LD_INT 6
8865: PPUSH
8866: CALL 8429 0 1
8870: PPUSH
8871: CALL 8263 0 2
// end ;
8875: LD_VAR 0 2
8879: RET
// export function MultiplayerEvent_HumanLost ( side ) ; begin
8880: LD_INT 0
8882: PPUSH
// if not side or side > 8 then
8883: LD_VAR 0 1
8887: NOT
8888: IFTRUE 8900
8890: PUSH
8891: LD_VAR 0 1
8895: PUSH
8896: LD_INT 8
8898: GREATER
8899: OR
8900: IFFALSE 8904
// exit ;
8902: GO 8921
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 4 ) ) ;
8904: LD_VAR 0 1
8908: PPUSH
8909: LD_INT 4
8911: PPUSH
8912: CALL 8429 0 1
8916: PPUSH
8917: CALL 8263 0 2
// end ;
8921: LD_VAR 0 2
8925: RET
// export function MultiplayerEvent_VehicleLost ( side ) ; begin
8926: LD_INT 0
8928: PPUSH
// if not side or side > 8 then
8929: LD_VAR 0 1
8933: NOT
8934: IFTRUE 8946
8936: PUSH
8937: LD_VAR 0 1
8941: PUSH
8942: LD_INT 8
8944: GREATER
8945: OR
8946: IFFALSE 8950
// exit ;
8948: GO 8967
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 5 ) ) ;
8950: LD_VAR 0 1
8954: PPUSH
8955: LD_INT 5
8957: PPUSH
8958: CALL 8429 0 1
8962: PPUSH
8963: CALL 8263 0 2
// end ;
8967: LD_VAR 0 2
8971: RET
// export function MultiplayerEvent_BuildingCompleted ( side , btype ) ; begin
8972: LD_INT 0
8974: PPUSH
// if not side or side > 8 or not btype in [ b_workshop , b_lab , b_control_tower , b_depot ] then
8975: LD_VAR 0 1
8979: NOT
8980: IFTRUE 8992
8982: PUSH
8983: LD_VAR 0 1
8987: PUSH
8988: LD_INT 8
8990: GREATER
8991: OR
8992: IFTRUE 9020
8994: PUSH
8995: LD_VAR 0 2
8999: PUSH
9000: LD_INT 2
9002: PUSH
9003: LD_INT 6
9005: PUSH
9006: LD_INT 36
9008: PUSH
9009: LD_INT 0
9011: PUSH
9012: EMPTY
9013: LIST
9014: LIST
9015: LIST
9016: LIST
9017: IN
9018: NOT
9019: OR
9020: IFFALSE 9024
// exit ;
9022: GO 9041
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 3 ) ) ;
9024: LD_VAR 0 1
9028: PPUSH
9029: LD_INT 3
9031: PPUSH
9032: CALL 8429 0 1
9036: PPUSH
9037: CALL 8263 0 2
// end ;
9041: LD_VAR 0 3
9045: RET
// export function MultiplayerEvent_UnitKilled ( un , side , points ) ; var gained_points ; begin
9046: LD_INT 0
9048: PPUSH
9049: PPUSH
// if not un then
9050: LD_VAR 0 1
9054: NOT
9055: IFFALSE 9059
// exit ;
9057: GO 9105
// if not points then
9059: LD_VAR 0 3
9063: NOT
9064: IFFALSE 9081
// gained_points := Multiplayer_GetCondition ( 1 ) else
9066: LD_ADDR_VAR 0 5
9070: PUSH
9071: LD_INT 1
9073: PPUSH
9074: CALL 8429 0 1
9078: ST_TO_ADDR
9079: GO 9091
// gained_points := points ;
9081: LD_ADDR_VAR 0 5
9085: PUSH
9086: LD_VAR 0 3
9090: ST_TO_ADDR
// Multiplayer_AddPoints ( side , gained_points ) ;
9091: LD_VAR 0 2
9095: PPUSH
9096: LD_VAR 0 5
9100: PPUSH
9101: CALL 8263 0 2
// end ; end_of_file
9105: LD_VAR 0 4
9109: RET
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do var side ;
9110: LD_INT 0
9112: PPUSH
// begin side := GetSide ( un ) ;
9113: LD_ADDR_VAR 0 4
9117: PUSH
9118: LD_VAR 0 1
9122: PPUSH
9123: CALL_OW 255
9127: ST_TO_ADDR
// if killerSide = enemySide then
9128: LD_VAR 0 2
9132: PUSH
9133: LD_EXP 12
9137: EQUAL
9138: IFFALSE 9142
// exit ;
9140: GO 9204
// if side = convoySide and multi_sides [ killerSide ] then
9142: LD_VAR 0 4
9146: PUSH
9147: LD_EXP 42
9151: EQUAL
9152: IFFALSE 9166
9154: PUSH
9155: LD_EXP 15
9159: PUSH
9160: LD_VAR 0 2
9164: ARRAY
9165: AND
9166: IFFALSE 9187
// begin Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 9 ) ) ;
9168: LD_VAR 0 4
9172: PPUSH
9173: LD_INT 9
9175: PPUSH
9176: CALL 8429 0 1
9180: PPUSH
9181: CALL 8263 0 2
// exit ;
9185: GO 9204
// end ; MultiplayerEvent_UnitKilled ( un , killerSide , false ) ;
9187: LD_VAR 0 1
9191: PPUSH
9192: LD_VAR 0 2
9196: PPUSH
9197: LD_INT 0
9199: PPUSH
9200: CALL 9046 0 3
// end ;
9204: PPOPN 4
9206: END
// on UnitDestroyed ( un ) do var i , side , base , chassis , engine , control , weapon , tmp , factory , btype ;
9207: LD_INT 0
9209: PPUSH
9210: PPUSH
9211: PPUSH
9212: PPUSH
9213: PPUSH
9214: PPUSH
9215: PPUSH
9216: PPUSH
9217: PPUSH
9218: PPUSH
// begin SOS_UnitDestroyed ( un ) ;
9219: LD_VAR 0 1
9223: PPUSH
9224: CALL 58960 0 1
// side := GetSide ( un ) ;
9228: LD_ADDR_VAR 0 3
9232: PUSH
9233: LD_VAR 0 1
9237: PPUSH
9238: CALL_OW 255
9242: ST_TO_ADDR
// if multi_sides [ side ] or side = convoySide then
9243: LD_EXP 15
9247: PUSH
9248: LD_VAR 0 3
9252: ARRAY
9253: IFTRUE 9267
9255: PUSH
9256: LD_VAR 0 3
9260: PUSH
9261: LD_EXP 42
9265: EQUAL
9266: OR
9267: IFFALSE 9345
// begin if un in convoys then
9269: LD_VAR 0 1
9273: PUSH
9274: LD_EXP 40
9278: IN
9279: IFFALSE 9297
// convoys := convoys diff un ;
9281: LD_ADDR_EXP 40
9285: PUSH
9286: LD_EXP 40
9290: PUSH
9291: LD_VAR 0 1
9295: DIFF
9296: ST_TO_ADDR
// if GetType ( un ) = unit_human then
9297: LD_VAR 0 1
9301: PPUSH
9302: CALL_OW 247
9306: PUSH
9307: LD_INT 1
9309: EQUAL
9310: IFFALSE 9321
// MultiplayerEvent_HumanLost ( side ) ;
9312: LD_VAR 0 3
9316: PPUSH
9317: CALL 8880 0 1
// if GetType ( un ) = unit_vehicle then
9321: LD_VAR 0 1
9325: PPUSH
9326: CALL_OW 247
9330: PUSH
9331: LD_INT 2
9333: EQUAL
9334: IFFALSE 9345
// MultiplayerEvent_VehicleLost ( side ) ;
9336: LD_VAR 0 3
9340: PPUSH
9341: CALL 8926 0 1
// end ; if un in enemyForestGuard then
9345: LD_VAR 0 1
9349: PUSH
9350: LD_EXP 11
9354: IN
9355: IFFALSE 9373
// enemyForestGuard := enemyForestGuard diff un ;
9357: LD_ADDR_EXP 11
9361: PUSH
9362: LD_EXP 11
9366: PUSH
9367: LD_VAR 0 1
9371: DIFF
9372: ST_TO_ADDR
// if un in enemyMobile then
9373: LD_VAR 0 1
9377: PUSH
9378: LD_EXP 10
9382: IN
9383: IFFALSE 9401
// enemyMobile := enemyMobile diff un ;
9385: LD_ADDR_EXP 10
9389: PUSH
9390: LD_EXP 10
9394: PUSH
9395: LD_VAR 0 1
9399: DIFF
9400: ST_TO_ADDR
// if un in enemyUnits then
9401: LD_VAR 0 1
9405: PUSH
9406: LD_EXP 9
9410: IN
9411: IFFALSE 9429
// enemyUnits := enemyUnits diff un ;
9413: LD_ADDR_EXP 9
9417: PUSH
9418: LD_EXP 9
9422: PUSH
9423: LD_VAR 0 1
9427: DIFF
9428: ST_TO_ADDR
// if un in arAttackersInf then
9429: LD_VAR 0 1
9433: PUSH
9434: LD_EXP 13
9438: IN
9439: IFFALSE 9457
// arAttackersInf := arAttackersInf diff un ;
9441: LD_ADDR_EXP 13
9445: PUSH
9446: LD_EXP 13
9450: PUSH
9451: LD_VAR 0 1
9455: DIFF
9456: ST_TO_ADDR
// if multi_commanders and multi_custom_commanders and not multi_loosers [ side ] then
9457: LD_EXP 31
9461: IFFALSE 9469
9463: PUSH
9464: LD_EXP 24
9468: AND
9469: IFFALSE 9484
9471: PUSH
9472: LD_EXP 32
9476: PUSH
9477: LD_VAR 0 3
9481: ARRAY
9482: NOT
9483: AND
9484: IFFALSE 9562
// if un in multi_commanders then
9486: LD_VAR 0 1
9490: PUSH
9491: LD_EXP 31
9495: IN
9496: IFFALSE 9562
// begin if side = your_side then
9498: LD_VAR 0 3
9502: PUSH
9503: LD_OWVAR 2
9507: EQUAL
9508: IFFALSE 9514
// Multiplayer_Loose_Message ;
9510: CALL_OW 521
// multi_loosers := Replace ( multi_loosers , side , 1 ) ;
9514: LD_ADDR_EXP 32
9518: PUSH
9519: LD_EXP 32
9523: PPUSH
9524: LD_VAR 0 3
9528: PPUSH
9529: LD_INT 1
9531: PPUSH
9532: CALL_OW 1
9536: ST_TO_ADDR
// multi_commanders := multi_commanders diff un ;
9537: LD_ADDR_EXP 31
9541: PUSH
9542: LD_EXP 31
9546: PUSH
9547: LD_VAR 0 1
9551: DIFF
9552: ST_TO_ADDR
// Multiplayer_Reside ( side ) ;
9553: LD_VAR 0 3
9557: PPUSH
9558: CALL 8462 0 1
// end ; end ;
9562: PPOPN 11
9564: END
// on BuildingComplete ( building ) do var i , j , side , btype ;
9565: LD_INT 0
9567: PPUSH
9568: PPUSH
9569: PPUSH
9570: PPUSH
// begin side := GetSide ( building ) ;
9571: LD_ADDR_VAR 0 4
9575: PUSH
9576: LD_VAR 0 1
9580: PPUSH
9581: CALL_OW 255
9585: ST_TO_ADDR
// if multi_sides [ side ] then
9586: LD_EXP 15
9590: PUSH
9591: LD_VAR 0 4
9595: ARRAY
9596: IFFALSE 9617
// MultiplayerEvent_BuildingCompleted ( side , GetBType ( building ) ) ;
9598: LD_VAR 0 4
9602: PPUSH
9603: LD_VAR 0 1
9607: PPUSH
9608: CALL_OW 266
9612: PPUSH
9613: CALL 8972 0 2
// end ;
9617: PPOPN 5
9619: END
// on VehicleConstructed ( vehicle , factory ) do var i , side , tmp , base , amount , driver ;
9620: LD_INT 0
9622: PPUSH
9623: PPUSH
9624: PPUSH
9625: PPUSH
9626: PPUSH
9627: PPUSH
// begin SOS_VehicleConstructed ( vehicle , factory ) ;
9628: LD_VAR 0 1
9632: PPUSH
9633: LD_VAR 0 2
9637: PPUSH
9638: CALL 59018 0 2
// side := GetSide ( vehicle ) ;
9642: LD_ADDR_VAR 0 4
9646: PUSH
9647: LD_VAR 0 1
9651: PPUSH
9652: CALL_OW 255
9656: ST_TO_ADDR
// if multi_sides [ side ] then
9657: LD_EXP 15
9661: PUSH
9662: LD_VAR 0 4
9666: ARRAY
9667: IFFALSE 9678
// MultiplayerEvent_Produced ( side ) ;
9669: LD_VAR 0 4
9673: PPUSH
9674: CALL 8834 0 1
// end ;
9678: PPOPN 8
9680: END
// on ResearchComplete ( tech , lab ) do var i , side ;
9681: LD_INT 0
9683: PPUSH
9684: PPUSH
// begin side := GetSide ( lab ) ;
9685: LD_ADDR_VAR 0 4
9689: PUSH
9690: LD_VAR 0 2
9694: PPUSH
9695: CALL_OW 255
9699: ST_TO_ADDR
// if multi_sides [ side ] then
9700: LD_EXP 15
9704: PUSH
9705: LD_VAR 0 4
9709: ARRAY
9710: IFFALSE 9775
// for i := 1 to 8 do
9712: LD_ADDR_VAR 0 3
9716: PUSH
9717: DOUBLE
9718: LD_INT 1
9720: DEC
9721: ST_TO_ADDR
9722: LD_INT 8
9724: PUSH
9725: FOR_TO
9726: IFFALSE 9773
// if multi_sides [ i ] and i <> side then
9728: LD_EXP 15
9732: PUSH
9733: LD_VAR 0 3
9737: ARRAY
9738: IFFALSE 9752
9740: PUSH
9741: LD_VAR 0 3
9745: PUSH
9746: LD_VAR 0 4
9750: NONEQUAL
9751: AND
9752: IFFALSE 9771
// SetTech ( tech , i , state_researched ) ;
9754: LD_VAR 0 1
9758: PPUSH
9759: LD_VAR 0 3
9763: PPUSH
9764: LD_INT 2
9766: PPUSH
9767: CALL_OW 322
9771: GO 9725
9773: POP
9774: POP
// end ;
9775: PPOPN 4
9777: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if veh in enemyMobile then
9778: LD_VAR 0 2
9782: PUSH
9783: LD_EXP 10
9787: IN
9788: IFFALSE 9851
// begin repeat ComMoveXY ( driver , 163 , 31 ) ;
9790: LD_VAR 0 1
9794: PPUSH
9795: LD_INT 163
9797: PPUSH
9798: LD_INT 31
9800: PPUSH
9801: CALL_OW 111
// wait ( 0 0$1 ) ;
9805: LD_INT 35
9807: PPUSH
9808: CALL_OW 67
// if IsDead ( driver ) then
9812: LD_VAR 0 1
9816: PPUSH
9817: CALL_OW 301
9821: IFFALSE 9825
// exit ;
9823: GO 9851
// until IsAt ( driver , 163 , 31 ) ;
9825: LD_VAR 0 1
9829: PPUSH
9830: LD_INT 163
9832: PPUSH
9833: LD_INT 31
9835: PPUSH
9836: CALL_OW 307
9840: IFFALSE 9790
// RemoveUnit ( driver ) ;
9842: LD_VAR 0 1
9846: PPUSH
9847: CALL_OW 64
// end ; end ; end_of_file
9851: PPOPN 4
9853: END
// every 8 8$00 trigger not forestIsCleared do
9854: LD_EXP 7
9858: NOT
9859: IFFALSE 9868
9861: GO 9863
9863: DISABLE
// ClearRoadInForest ;
9864: CALL 2197 0 0
9868: END
// every 18 18$00 trigger not forestIsCleared do
9869: LD_EXP 7
9873: NOT
9874: IFFALSE 9883
9876: GO 9878
9878: DISABLE
// ClearRoadInForest ;
9879: CALL 2197 0 0
9883: END
// every 0 0$30 trigger convoyWave mod 4 = 0 and convoyWave >= 4 do
9884: LD_EXP 41
9888: PUSH
9889: LD_INT 4
9891: MOD
9892: PUSH
9893: LD_INT 0
9895: EQUAL
9896: IFFALSE 9908
9898: PUSH
9899: LD_EXP 41
9903: PUSH
9904: LD_INT 4
9906: GREATEREQUAL
9907: AND
9908: IFFALSE 9937
9910: GO 9912
9912: DISABLE
// begin arAttackersInf := arAttackersInf union SendNorthGroup ;
9913: LD_ADDR_EXP 13
9917: PUSH
9918: LD_EXP 13
9922: PUSH
9923: CALL 3386 0 0
9927: UNION
9928: ST_TO_ADDR
// wait ( 5 5$00 ) ;
9929: LD_INT 10500
9931: PPUSH
9932: CALL_OW 67
// enable ;
9936: ENABLE
// end ;
9937: END
// every 0 0$30 trigger convoyWave mod 7 = 0 and convoyWave >= 7 do
9938: LD_EXP 41
9942: PUSH
9943: LD_INT 7
9945: MOD
9946: PUSH
9947: LD_INT 0
9949: EQUAL
9950: IFFALSE 9962
9952: PUSH
9953: LD_EXP 41
9957: PUSH
9958: LD_INT 7
9960: GREATEREQUAL
9961: AND
9962: IFFALSE 9991
9964: GO 9966
9966: DISABLE
// begin arAttackersInf := arAttackersInf union SendEastGroup2 ;
9967: LD_ADDR_EXP 13
9971: PUSH
9972: LD_EXP 13
9976: PUSH
9977: CALL 3630 0 0
9981: UNION
9982: ST_TO_ADDR
// wait ( 5 5$00 ) ;
9983: LD_INT 10500
9985: PPUSH
9986: CALL_OW 67
// enable ;
9990: ENABLE
// end ;
9991: END
// every 0 0$30 trigger convoyWave in [ 8 , 12 , 16 , 20 , 22 , 24 , 26 , 28 , 30 , 32 , 36 , 38 ] do
9992: LD_EXP 41
9996: PUSH
9997: LD_INT 8
9999: PUSH
10000: LD_INT 12
10002: PUSH
10003: LD_INT 16
10005: PUSH
10006: LD_INT 20
10008: PUSH
10009: LD_INT 22
10011: PUSH
10012: LD_INT 24
10014: PUSH
10015: LD_INT 26
10017: PUSH
10018: LD_INT 28
10020: PUSH
10021: LD_INT 30
10023: PUSH
10024: LD_INT 32
10026: PUSH
10027: LD_INT 36
10029: PUSH
10030: LD_INT 38
10032: PUSH
10033: EMPTY
10034: LIST
10035: LIST
10036: LIST
10037: LIST
10038: LIST
10039: LIST
10040: LIST
10041: LIST
10042: LIST
10043: LIST
10044: LIST
10045: LIST
10046: IN
10047: IFFALSE 10076
10049: GO 10051
10051: DISABLE
// begin arAttackersInf := arAttackersInf union SendEastGroup ;
10052: LD_ADDR_EXP 13
10056: PUSH
10057: LD_EXP 13
10061: PUSH
10062: CALL 3181 0 0
10066: UNION
10067: ST_TO_ADDR
// wait ( 5 5$00 ) ;
10068: LD_INT 10500
10070: PPUSH
10071: CALL_OW 67
// enable ;
10075: ENABLE
// end ;
10076: END
// every 0 0$2 trigger convoyWave mod 5 = 4 and not FilterAllUnits ( [ [ f_side , enemySide ] , [ f_distxy , 30 , 48 , 20 ] ] ) do
10077: LD_EXP 41
10081: PUSH
10082: LD_INT 5
10084: MOD
10085: PUSH
10086: LD_INT 4
10088: EQUAL
10089: IFFALSE 10132
10091: PUSH
10092: LD_INT 22
10094: PUSH
10095: LD_EXP 12
10099: PUSH
10100: EMPTY
10101: LIST
10102: LIST
10103: PUSH
10104: LD_INT 92
10106: PUSH
10107: LD_INT 30
10109: PUSH
10110: LD_INT 48
10112: PUSH
10113: LD_INT 20
10115: PUSH
10116: EMPTY
10117: LIST
10118: LIST
10119: LIST
10120: LIST
10121: PUSH
10122: EMPTY
10123: LIST
10124: LIST
10125: PPUSH
10126: CALL_OW 69
10130: NOT
10131: AND
10132: IFFALSE 10149
10134: GO 10136
10136: DISABLE
// begin SendWestGroup ;
10137: CALL 2551 0 0
// wait ( 6 6$00 ) ;
10141: LD_INT 12600
10143: PPUSH
10144: CALL_OW 67
// enable ;
10148: ENABLE
// end ;
10149: END
// every 2 2$30 + 2 2$00 trigger UnitFilter ( enemyMobile , [ f_ok ] ) < 5 do
10150: LD_EXP 10
10154: PPUSH
10155: LD_INT 50
10157: PUSH
10158: EMPTY
10159: LIST
10160: PPUSH
10161: CALL_OW 72
10165: PUSH
10166: LD_INT 5
10168: LESS
10169: IFFALSE 10203
10171: GO 10173
10173: DISABLE
// begin PrepareMobileGroup ;
10174: CALL 1586 0 0
// wait ( [ 3 3$30 , 3 3$00 , 2 2$30 ] [ Difficulty ] ) ;
10178: LD_INT 7350
10180: PUSH
10181: LD_INT 6300
10183: PUSH
10184: LD_INT 5250
10186: PUSH
10187: EMPTY
10188: LIST
10189: LIST
10190: LIST
10191: PUSH
10192: LD_OWVAR 67
10196: ARRAY
10197: PPUSH
10198: CALL_OW 67
// enable ;
10202: ENABLE
// end ;
10203: END
// every 0 0$30 trigger convoyWave mod 6 = 0 and convoyWave >= 6 and UnitFilter ( enemyMobile , [ f_ok ] ) < 10 do
10204: LD_EXP 41
10208: PUSH
10209: LD_INT 6
10211: MOD
10212: PUSH
10213: LD_INT 0
10215: EQUAL
10216: IFFALSE 10228
10218: PUSH
10219: LD_EXP 41
10223: PUSH
10224: LD_INT 6
10226: GREATEREQUAL
10227: AND
10228: IFFALSE 10251
10230: PUSH
10231: LD_EXP 10
10235: PPUSH
10236: LD_INT 50
10238: PUSH
10239: EMPTY
10240: LIST
10241: PPUSH
10242: CALL_OW 72
10246: PUSH
10247: LD_INT 10
10249: LESS
10250: AND
10251: IFFALSE 10285
10253: GO 10255
10255: DISABLE
// begin PrepareMobileGroup2 ;
10256: CALL 1914 0 0
// wait ( [ 4 4$30 , 4 4$00 , 3 3$30 ] [ Difficulty ] ) ;
10260: LD_INT 9450
10262: PUSH
10263: LD_INT 8400
10265: PUSH
10266: LD_INT 7350
10268: PUSH
10269: EMPTY
10270: LIST
10271: LIST
10272: LIST
10273: PUSH
10274: LD_OWVAR 67
10278: ARRAY
10279: PPUSH
10280: CALL_OW 67
// enable ;
10284: ENABLE
// end ;
10285: END
// every 7 7$00 + 4 4$00 trigger forestIsCleared do var i , tmp ;
10286: LD_EXP 7
10290: IFFALSE 10503
10292: GO 10294
10294: DISABLE
10295: LD_INT 0
10297: PPUSH
10298: PPUSH
// begin if tick > 50 50$00 then
10299: LD_OWVAR 1
10303: PUSH
10304: LD_INT 105000
10306: GREATER
10307: IFFALSE 10312
// begin disable ;
10309: DISABLE
// exit ;
10310: GO 10503
// end ; tmp := PrepareForestOnslaught ;
10312: LD_ADDR_VAR 0 2
10316: PUSH
10317: CALL 2853 0 0
10321: ST_TO_ADDR
// for i in tmp do
10322: LD_ADDR_VAR 0 1
10326: PUSH
10327: LD_VAR 0 2
10331: PUSH
10332: FOR_IN
10333: IFFALSE 10397
// begin AddComMoveXY ( i , 197 , 152 ) ;
10335: LD_VAR 0 1
10339: PPUSH
10340: LD_INT 197
10342: PPUSH
10343: LD_INT 152
10345: PPUSH
10346: CALL_OW 171
// AddComMoveXY ( i , 159 , 163 ) ;
10350: LD_VAR 0 1
10354: PPUSH
10355: LD_INT 159
10357: PPUSH
10358: LD_INT 163
10360: PPUSH
10361: CALL_OW 171
// AddComMoveXY ( i , 116 , 154 ) ;
10365: LD_VAR 0 1
10369: PPUSH
10370: LD_INT 116
10372: PPUSH
10373: LD_INT 154
10375: PPUSH
10376: CALL_OW 171
// AddComMoveXY ( i , 93 , 177 ) ;
10380: LD_VAR 0 1
10384: PPUSH
10385: LD_INT 93
10387: PPUSH
10388: LD_INT 177
10390: PPUSH
10391: CALL_OW 171
// end ;
10395: GO 10332
10397: POP
10398: POP
// repeat wait ( 0 0$1 ) ;
10399: LD_INT 35
10401: PPUSH
10402: CALL_OW 67
// for i in tmp do
10406: LD_ADDR_VAR 0 1
10410: PUSH
10411: LD_VAR 0 2
10415: PUSH
10416: FOR_IN
10417: IFFALSE 10478
// if not IsOk ( i ) then
10419: LD_VAR 0 1
10423: PPUSH
10424: CALL_OW 302
10428: NOT
10429: IFFALSE 10449
// tmp := tmp diff i else
10431: LD_ADDR_VAR 0 2
10435: PUSH
10436: LD_VAR 0 2
10440: PUSH
10441: LD_VAR 0 1
10445: DIFF
10446: ST_TO_ADDR
10447: GO 10476
// if not HasTask ( i ) then
10449: LD_VAR 0 1
10453: PPUSH
10454: CALL_OW 314
10458: NOT
10459: IFFALSE 10476
// ComMoveXY ( i , 93 , 177 ) ;
10461: LD_VAR 0 1
10465: PPUSH
10466: LD_INT 93
10468: PPUSH
10469: LD_INT 177
10471: PPUSH
10472: CALL_OW 111
10476: GO 10416
10478: POP
10479: POP
// until not tmp ;
10480: LD_VAR 0 2
10484: NOT
10485: IFFALSE 10399
// wait ( rand ( 0 0$30 , 5 5$30 ) ) ;
10487: LD_INT 1050
10489: PPUSH
10490: LD_INT 11550
10492: PPUSH
10493: CALL_OW 12
10497: PPUSH
10498: CALL_OW 67
// enable ;
10502: ENABLE
// end ;
10503: PPOPN 2
10505: END
// every 0 0$1 trigger enemyForestGuard do var i , tmp , enemyInForest , vehicle ;
10506: LD_EXP 11
10510: IFFALSE 11029
10512: GO 10514
10514: DISABLE
10515: LD_INT 0
10517: PPUSH
10518: PPUSH
10519: PPUSH
10520: PPUSH
// begin enable ;
10521: ENABLE
// tmp := UnitFilter ( enemyForestGuard , [ f_ok ] ) ;
10522: LD_ADDR_VAR 0 2
10526: PUSH
10527: LD_EXP 11
10531: PPUSH
10532: LD_INT 50
10534: PUSH
10535: EMPTY
10536: LIST
10537: PPUSH
10538: CALL_OW 72
10542: ST_TO_ADDR
// enemyInForest := FilterUnitsInArea ( arCampArea , [ f_not , [ f_side , enemySide ] ] ) ;
10543: LD_ADDR_VAR 0 3
10547: PUSH
10548: LD_INT 19
10550: PPUSH
10551: LD_INT 3
10553: PUSH
10554: LD_INT 22
10556: PUSH
10557: LD_EXP 12
10561: PUSH
10562: EMPTY
10563: LIST
10564: LIST
10565: PUSH
10566: EMPTY
10567: LIST
10568: LIST
10569: PPUSH
10570: CALL_OW 70
10574: ST_TO_ADDR
// if not tmp then
10575: LD_VAR 0 2
10579: NOT
10580: IFFALSE 10584
// exit ;
10582: GO 11029
// for i in tmp do
10584: LD_ADDR_VAR 0 1
10588: PUSH
10589: LD_VAR 0 2
10593: PUSH
10594: FOR_IN
10595: IFFALSE 11027
// begin if enemyInForest then
10597: LD_VAR 0 3
10601: IFFALSE 10691
// begin if GetClass ( i ) = 4 then
10603: LD_VAR 0 1
10607: PPUSH
10608: CALL_OW 257
10612: PUSH
10613: LD_INT 4
10615: EQUAL
10616: IFFALSE 10650
// ComMoveUnit ( i , NearestUnitToUnit ( tmp diff i , i ) ) else
10618: LD_VAR 0 1
10622: PPUSH
10623: LD_VAR 0 2
10627: PUSH
10628: LD_VAR 0 1
10632: DIFF
10633: PPUSH
10634: LD_VAR 0 1
10638: PPUSH
10639: CALL_OW 74
10643: PPUSH
10644: CALL_OW 112
10648: GO 10689
// if GetClass ( i ) <> 3 then
10650: LD_VAR 0 1
10654: PPUSH
10655: CALL_OW 257
10659: PUSH
10660: LD_INT 3
10662: NONEQUAL
10663: IFFALSE 10689
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInForest , i ) ) ;
10665: LD_VAR 0 1
10669: PPUSH
10670: LD_VAR 0 3
10674: PPUSH
10675: LD_VAR 0 1
10679: PPUSH
10680: CALL_OW 74
10684: PPUSH
10685: CALL_OW 115
// end else
10689: GO 11025
// if not IsInArea ( i , arForestArea ) then
10691: LD_VAR 0 1
10695: PPUSH
10696: LD_INT 21
10698: PPUSH
10699: CALL_OW 308
10703: NOT
10704: IFFALSE 10720
// ComMoveToArea ( i , arForestArea ) else
10706: LD_VAR 0 1
10710: PPUSH
10711: LD_INT 21
10713: PPUSH
10714: CALL_OW 113
10718: GO 11025
// if GetClass ( i ) = 3 then
10720: LD_VAR 0 1
10724: PPUSH
10725: CALL_OW 257
10729: PUSH
10730: LD_INT 3
10732: EQUAL
10733: IFFALSE 11025
// begin vehicle := IsInUnit ( i ) ;
10735: LD_ADDR_VAR 0 4
10739: PUSH
10740: LD_VAR 0 1
10744: PPUSH
10745: CALL_OW 310
10749: ST_TO_ADDR
// if vehicle then
10750: LD_VAR 0 4
10754: IFFALSE 10981
// begin if GetLives ( vehicle ) < 1000 and not HasTask ( i ) then
10756: LD_VAR 0 4
10760: PPUSH
10761: CALL_OW 256
10765: PUSH
10766: LD_INT 1000
10768: LESS
10769: IFFALSE 10783
10771: PUSH
10772: LD_VAR 0 1
10776: PPUSH
10777: CALL_OW 314
10781: NOT
10782: AND
10783: IFFALSE 10979
// begin if not IsInArea ( vehicle , arParkingArea ) then
10785: LD_VAR 0 4
10789: PPUSH
10790: LD_INT 20
10792: PPUSH
10793: CALL_OW 308
10797: NOT
10798: IFFALSE 10814
// ComMoveToArea ( vehicle , arParkingArea ) else
10800: LD_VAR 0 4
10804: PPUSH
10805: LD_INT 20
10807: PPUSH
10808: CALL_OW 113
10812: GO 10979
// if not GetTag ( i ) then
10814: LD_VAR 0 1
10818: PPUSH
10819: CALL_OW 110
10823: NOT
10824: IFFALSE 10979
// begin SetTag ( i , tMech ) ;
10826: LD_VAR 0 1
10830: PPUSH
10831: LD_INT 7
10833: PPUSH
10834: CALL_OW 109
// ComExitVehicle ( i ) ;
10838: LD_VAR 0 1
10842: PPUSH
10843: CALL_OW 121
// AddComRepairVehicle ( i , vehicle ) ;
10847: LD_VAR 0 1
10851: PPUSH
10852: LD_VAR 0 4
10856: PPUSH
10857: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
10861: LD_INT 35
10863: PPUSH
10864: CALL_OW 67
// if FilterUnitsInArea ( arCampArea , [ f_not , [ f_side , enemySide ] ] ) then
10868: LD_INT 19
10870: PPUSH
10871: LD_INT 3
10873: PUSH
10874: LD_INT 22
10876: PUSH
10877: LD_EXP 12
10881: PUSH
10882: EMPTY
10883: LIST
10884: LIST
10885: PUSH
10886: EMPTY
10887: LIST
10888: LIST
10889: PPUSH
10890: CALL_OW 70
10894: IFFALSE 10926
// begin ComEnterUnit ( i , vehicle ) ;
10896: LD_VAR 0 1
10900: PPUSH
10901: LD_VAR 0 4
10905: PPUSH
10906: CALL_OW 120
// SetTag ( i , 0 ) ;
10910: LD_VAR 0 1
10914: PPUSH
10915: LD_INT 0
10917: PPUSH
10918: CALL_OW 109
// exit ;
10922: POP
10923: POP
10924: GO 11029
// end ; until GetLives ( vehicle ) = 1000 ;
10926: LD_VAR 0 4
10930: PPUSH
10931: CALL_OW 256
10935: PUSH
10936: LD_INT 1000
10938: EQUAL
10939: IFFALSE 10861
// SetLives ( i , 1000 ) ;
10941: LD_VAR 0 1
10945: PPUSH
10946: LD_INT 1000
10948: PPUSH
10949: CALL_OW 234
// ComEnterUnit ( i , vehicle ) ;
10953: LD_VAR 0 1
10957: PPUSH
10958: LD_VAR 0 4
10962: PPUSH
10963: CALL_OW 120
// SetTag ( i , 0 ) ;
10967: LD_VAR 0 1
10971: PPUSH
10972: LD_INT 0
10974: PPUSH
10975: CALL_OW 109
// end ; end ; end else
10979: GO 11025
// if not IsInArea ( i , arParkingArea ) and GetClass ( i ) <> 3 then
10981: LD_VAR 0 1
10985: PPUSH
10986: LD_INT 20
10988: PPUSH
10989: CALL_OW 308
10993: NOT
10994: IFFALSE 11011
10996: PUSH
10997: LD_VAR 0 1
11001: PPUSH
11002: CALL_OW 257
11006: PUSH
11007: LD_INT 3
11009: NONEQUAL
11010: AND
11011: IFFALSE 11025
// ComMoveToArea ( i , arParkingArea ) ;
11013: LD_VAR 0 1
11017: PPUSH
11018: LD_INT 20
11020: PPUSH
11021: CALL_OW 113
// end ; end ;
11025: GO 10594
11027: POP
11028: POP
// end ;
11029: PPOPN 4
11031: END
// every 0 0$1 trigger enemyMobile do var i , mech , enemy ;
11032: LD_EXP 10
11036: IFFALSE 11569
11038: GO 11040
11040: DISABLE
11041: LD_INT 0
11043: PPUSH
11044: PPUSH
11045: PPUSH
// begin enable ;
11046: ENABLE
// if not enemyMobile then
11047: LD_EXP 10
11051: NOT
11052: IFFALSE 11056
// exit ;
11054: GO 11569
// for i in enemyMobile do
11056: LD_ADDR_VAR 0 1
11060: PUSH
11061: LD_EXP 10
11065: PUSH
11066: FOR_IN
11067: IFFALSE 11567
// begin if GetSide ( i ) <> enemySide then
11069: LD_VAR 0 1
11073: PPUSH
11074: CALL_OW 255
11078: PUSH
11079: LD_EXP 12
11083: NONEQUAL
11084: IFFALSE 11104
// begin enemyMobile := enemyMobile diff i ;
11086: LD_ADDR_EXP 10
11090: PUSH
11091: LD_EXP 10
11095: PUSH
11096: LD_VAR 0 1
11100: DIFF
11101: ST_TO_ADDR
// continue ;
11102: GO 11066
// end ; if GetTag ( i ) = 300 then
11104: LD_VAR 0 1
11108: PPUSH
11109: CALL_OW 110
11113: PUSH
11114: LD_INT 300
11116: EQUAL
11117: IFFALSE 11232
// begin if GetFuel ( i ) < 50 then
11119: LD_VAR 0 1
11123: PPUSH
11124: CALL_OW 261
11128: PUSH
11129: LD_INT 50
11131: LESS
11132: IFFALSE 11191
// begin ComMoveXY ( i , 170 , 50 ) ;
11134: LD_VAR 0 1
11138: PPUSH
11139: LD_INT 170
11141: PPUSH
11142: LD_INT 50
11144: PPUSH
11145: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
11149: LD_INT 35
11151: PPUSH
11152: CALL_OW 67
// until GetDistUnitXY ( i , 170 , 50 ) < 4 ;
11156: LD_VAR 0 1
11160: PPUSH
11161: LD_INT 170
11163: PPUSH
11164: LD_INT 50
11166: PPUSH
11167: CALL_OW 297
11171: PUSH
11172: LD_INT 4
11174: LESS
11175: IFFALSE 11149
// SetFuel ( i , 100 ) ;
11177: LD_VAR 0 1
11181: PPUSH
11182: LD_INT 100
11184: PPUSH
11185: CALL_OW 240
// end else
11189: GO 11232
// if not IsInArea ( i , arParkingArea ) then
11191: LD_VAR 0 1
11195: PPUSH
11196: LD_INT 20
11198: PPUSH
11199: CALL_OW 308
11203: NOT
11204: IFFALSE 11220
// ComMoveToArea ( i , arParkingArea ) else
11206: LD_VAR 0 1
11210: PPUSH
11211: LD_INT 20
11213: PPUSH
11214: CALL_OW 113
11218: GO 11232
// SetTag ( i , 301 ) ;
11220: LD_VAR 0 1
11224: PPUSH
11225: LD_INT 301
11227: PPUSH
11228: CALL_OW 109
// end ; if GetTag ( i ) = 301 then
11232: LD_VAR 0 1
11236: PPUSH
11237: CALL_OW 110
11241: PUSH
11242: LD_INT 301
11244: EQUAL
11245: IFFALSE 11387
// begin if GetLives ( i ) < 1000 then
11247: LD_VAR 0 1
11251: PPUSH
11252: CALL_OW 256
11256: PUSH
11257: LD_INT 1000
11259: LESS
11260: IFFALSE 11364
// begin if not IsDrivenBy ( i ) then
11262: LD_VAR 0 1
11266: PPUSH
11267: CALL_OW 311
11271: NOT
11272: IFFALSE 11276
// continue ;
11274: GO 11066
// mech := IsDrivenBy ( i ) ;
11276: LD_ADDR_VAR 0 2
11280: PUSH
11281: LD_VAR 0 1
11285: PPUSH
11286: CALL_OW 311
11290: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
11291: LD_VAR 0 2
11295: PPUSH
11296: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
11300: LD_VAR 0 2
11304: PPUSH
11305: LD_VAR 0 1
11309: PPUSH
11310: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
11314: LD_INT 35
11316: PPUSH
11317: CALL_OW 67
// until GetLives ( i ) = 1000 ;
11321: LD_VAR 0 1
11325: PPUSH
11326: CALL_OW 256
11330: PUSH
11331: LD_INT 1000
11333: EQUAL
11334: IFFALSE 11314
// SetLives ( mech , 1000 ) ;
11336: LD_VAR 0 2
11340: PPUSH
11341: LD_INT 1000
11343: PPUSH
11344: CALL_OW 234
// ComEnterUnit ( mech , i ) ;
11348: LD_VAR 0 2
11352: PPUSH
11353: LD_VAR 0 1
11357: PPUSH
11358: CALL_OW 120
// end else
11362: GO 11387
// if IsDrivenBy ( i ) then
11364: LD_VAR 0 1
11368: PPUSH
11369: CALL_OW 311
11373: IFFALSE 11387
// SetTag ( i , 0 ) ;
11375: LD_VAR 0 1
11379: PPUSH
11380: LD_INT 0
11382: PPUSH
11383: CALL_OW 109
// end ; if GetTag ( i ) < 300 then
11387: LD_VAR 0 1
11391: PPUSH
11392: CALL_OW 110
11396: PUSH
11397: LD_INT 300
11399: LESS
11400: IFFALSE 11565
// begin enemy := FilterUnitsInArea ( arCampArea , [ f_enemy , enemySide ] ) ;
11402: LD_ADDR_VAR 0 3
11406: PUSH
11407: LD_INT 19
11409: PPUSH
11410: LD_INT 81
11412: PUSH
11413: LD_EXP 12
11417: PUSH
11418: EMPTY
11419: LIST
11420: LIST
11421: PPUSH
11422: CALL_OW 70
11426: ST_TO_ADDR
// if GetLives ( i ) < 650 then
11427: LD_VAR 0 1
11431: PPUSH
11432: CALL_OW 256
11436: PUSH
11437: LD_INT 650
11439: LESS
11440: IFFALSE 11465
// begin ComStop ( i ) ;
11442: LD_VAR 0 1
11446: PPUSH
11447: CALL_OW 141
// SetTag ( i , 300 ) ;
11451: LD_VAR 0 1
11455: PPUSH
11456: LD_INT 300
11458: PPUSH
11459: CALL_OW 109
// continue ;
11463: GO 11066
// end ; if enemy then
11465: LD_VAR 0 3
11469: IFFALSE 11509
// begin if not HasTask ( i ) then
11471: LD_VAR 0 1
11475: PPUSH
11476: CALL_OW 314
11480: NOT
11481: IFFALSE 11507
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
11483: LD_VAR 0 1
11487: PPUSH
11488: LD_VAR 0 3
11492: PPUSH
11493: LD_VAR 0 1
11497: PPUSH
11498: CALL_OW 74
11502: PPUSH
11503: CALL_OW 115
// end else
11507: GO 11565
// if enemyMobile then
11509: LD_EXP 10
11513: IFFALSE 11565
// begin enemy := FilterAllUnits ( [ f_enemy , enemySide ] ) ;
11515: LD_ADDR_VAR 0 3
11519: PUSH
11520: LD_INT 81
11522: PUSH
11523: LD_EXP 12
11527: PUSH
11528: EMPTY
11529: LIST
11530: LIST
11531: PPUSH
11532: CALL_OW 69
11536: ST_TO_ADDR
// if enemy then
11537: LD_VAR 0 3
11541: IFFALSE 11565
// AgressiveMove ( i , [ [ 130 , 28 ] ] ) ;
11543: LD_VAR 0 1
11547: PPUSH
11548: LD_INT 130
11550: PUSH
11551: LD_INT 28
11553: PUSH
11554: EMPTY
11555: LIST
11556: LIST
11557: PUSH
11558: EMPTY
11559: LIST
11560: PPUSH
11561: CALL 56372 0 2
// end ; end ; end ;
11565: GO 11066
11567: POP
11568: POP
// end ;
11569: PPOPN 3
11571: END
// every 0 0$2 trigger arAttackersInf do var i , tmp , nearest , enemy , path ;
11572: LD_EXP 13
11576: IFFALSE 12101
11578: GO 11580
11580: DISABLE
11581: LD_INT 0
11583: PPUSH
11584: PPUSH
11585: PPUSH
11586: PPUSH
11587: PPUSH
// begin enable ;
11588: ENABLE
// tmp := UnitFilter ( arAttackersInf , [ f_ok ] ) ;
11589: LD_ADDR_VAR 0 2
11593: PUSH
11594: LD_EXP 13
11598: PPUSH
11599: LD_INT 50
11601: PUSH
11602: EMPTY
11603: LIST
11604: PPUSH
11605: CALL_OW 72
11609: ST_TO_ADDR
// arAttackersInf := [ ] ;
11610: LD_ADDR_EXP 13
11614: PUSH
11615: EMPTY
11616: ST_TO_ADDR
// for i in UnitFilter ( tmp , [ f_class , class_soldier ] ) do
11617: LD_ADDR_VAR 0 1
11621: PUSH
11622: LD_VAR 0 2
11626: PPUSH
11627: LD_INT 25
11629: PUSH
11630: LD_INT 1
11632: PUSH
11633: EMPTY
11634: LIST
11635: LIST
11636: PPUSH
11637: CALL_OW 72
11641: PUSH
11642: FOR_IN
11643: IFFALSE 11795
// begin if Prob ( 50 ) then
11645: LD_INT 50
11647: PPUSH
11648: CALL_OW 13
11652: IFFALSE 11668
// SetTag ( i , tMine ) else
11654: LD_VAR 0 1
11658: PPUSH
11659: LD_INT 6
11661: PPUSH
11662: CALL_OW 109
11666: GO 11670
// continue ;
11668: GO 11642
// nearest := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , enemySide ] , [ f_not , [ f_tag , tMined ] ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) , i ) ;
11670: LD_ADDR_VAR 0 3
11674: PUSH
11675: LD_INT 81
11677: PUSH
11678: LD_EXP 12
11682: PUSH
11683: EMPTY
11684: LIST
11685: LIST
11686: PUSH
11687: LD_INT 3
11689: PUSH
11690: LD_INT 120
11692: PUSH
11693: LD_INT 11
11695: PUSH
11696: EMPTY
11697: LIST
11698: LIST
11699: PUSH
11700: EMPTY
11701: LIST
11702: LIST
11703: PUSH
11704: LD_INT 2
11706: PUSH
11707: LD_INT 21
11709: PUSH
11710: LD_INT 2
11712: PUSH
11713: EMPTY
11714: LIST
11715: LIST
11716: PUSH
11717: LD_INT 21
11719: PUSH
11720: LD_INT 3
11722: PUSH
11723: EMPTY
11724: LIST
11725: LIST
11726: PUSH
11727: EMPTY
11728: LIST
11729: LIST
11730: LIST
11731: PUSH
11732: EMPTY
11733: LIST
11734: LIST
11735: LIST
11736: PPUSH
11737: CALL_OW 69
11741: PPUSH
11742: LD_VAR 0 1
11746: PPUSH
11747: CALL_OW 74
11751: ST_TO_ADDR
// if not nearest then
11752: LD_VAR 0 3
11756: NOT
11757: IFFALSE 11761
// break ;
11759: GO 11795
// SetTag ( nearest , tMined ) ;
11761: LD_VAR 0 3
11765: PPUSH
11766: LD_INT 11
11768: PPUSH
11769: CALL_OW 109
// AddComPlaceDelayedCharge ( i , 0 , 0 , nearest ) ;
11773: LD_VAR 0 1
11777: PPUSH
11778: LD_INT 0
11780: PPUSH
11781: LD_INT 0
11783: PPUSH
11784: LD_VAR 0 3
11788: PPUSH
11789: CALL_OW 192
// end ;
11793: GO 11642
11795: POP
11796: POP
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
11797: LD_ADDR_VAR 0 2
11801: PUSH
11802: LD_VAR 0 2
11806: PPUSH
11807: LD_INT 50
11809: PUSH
11810: EMPTY
11811: LIST
11812: PPUSH
11813: CALL_OW 72
11817: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
11818: LD_INT 70
11820: PPUSH
11821: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
11825: LD_ADDR_VAR 0 2
11829: PUSH
11830: LD_VAR 0 2
11834: PPUSH
11835: LD_INT 50
11837: PUSH
11838: EMPTY
11839: LIST
11840: PPUSH
11841: CALL_OW 72
11845: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_enemy , enemySide ] ) ;
11846: LD_ADDR_VAR 0 4
11850: PUSH
11851: LD_INT 81
11853: PUSH
11854: LD_EXP 12
11858: PUSH
11859: EMPTY
11860: LIST
11861: LIST
11862: PPUSH
11863: CALL_OW 69
11867: ST_TO_ADDR
// for i in tmp do
11868: LD_ADDR_VAR 0 1
11872: PUSH
11873: LD_VAR 0 2
11877: PUSH
11878: FOR_IN
11879: IFFALSE 12092
// if GetClass ( i ) <> 1 and GetTag ( i ) <> tMine then
11881: LD_VAR 0 1
11885: PPUSH
11886: CALL_OW 257
11890: PUSH
11891: LD_INT 1
11893: NONEQUAL
11894: IFFALSE 11911
11896: PUSH
11897: LD_VAR 0 1
11901: PPUSH
11902: CALL_OW 110
11906: PUSH
11907: LD_INT 6
11909: NONEQUAL
11910: AND
11911: IFFALSE 11939
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
11913: LD_VAR 0 1
11917: PPUSH
11918: LD_VAR 0 4
11922: PPUSH
11923: LD_VAR 0 1
11927: PPUSH
11928: CALL_OW 74
11932: PPUSH
11933: CALL_OW 115
11937: GO 12090
// begin nearest := NearestUnitToUnit ( UnitFilter ( enemy , [ [ f_not , [ f_tag , tMined ] ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) , i ) ;
11939: LD_ADDR_VAR 0 3
11943: PUSH
11944: LD_VAR 0 4
11948: PPUSH
11949: LD_INT 3
11951: PUSH
11952: LD_INT 120
11954: PUSH
11955: LD_INT 11
11957: PUSH
11958: EMPTY
11959: LIST
11960: LIST
11961: PUSH
11962: EMPTY
11963: LIST
11964: LIST
11965: PUSH
11966: LD_INT 2
11968: PUSH
11969: LD_INT 21
11971: PUSH
11972: LD_INT 2
11974: PUSH
11975: EMPTY
11976: LIST
11977: LIST
11978: PUSH
11979: LD_INT 21
11981: PUSH
11982: LD_INT 3
11984: PUSH
11985: EMPTY
11986: LIST
11987: LIST
11988: PUSH
11989: EMPTY
11990: LIST
11991: LIST
11992: LIST
11993: PUSH
11994: EMPTY
11995: LIST
11996: LIST
11997: PPUSH
11998: CALL_OW 72
12002: PPUSH
12003: LD_VAR 0 1
12007: PPUSH
12008: CALL_OW 74
12012: ST_TO_ADDR
// if not nearest then
12013: LD_VAR 0 3
12017: NOT
12018: IFFALSE 12046
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
12020: LD_VAR 0 1
12024: PPUSH
12025: LD_VAR 0 4
12029: PPUSH
12030: LD_VAR 0 1
12034: PPUSH
12035: CALL_OW 74
12039: PPUSH
12040: CALL_OW 115
12044: GO 12090
// if not HasTask ( i ) then
12046: LD_VAR 0 1
12050: PPUSH
12051: CALL_OW 314
12055: NOT
12056: IFFALSE 12090
// begin SetTag ( nearest , tMined ) ;
12058: LD_VAR 0 3
12062: PPUSH
12063: LD_INT 11
12065: PPUSH
12066: CALL_OW 109
// ComPlaceDelayedCharge ( i , 0 , 0 , nearest ) ;
12070: LD_VAR 0 1
12074: PPUSH
12075: LD_INT 0
12077: PPUSH
12078: LD_INT 0
12080: PPUSH
12081: LD_VAR 0 3
12085: PPUSH
12086: CALL_OW 132
// end ; end ;
12090: GO 11878
12092: POP
12093: POP
// until not tmp ;
12094: LD_VAR 0 2
12098: NOT
12099: IFFALSE 11818
// end ;
12101: PPOPN 5
12103: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , enemySide ] , [ f_engine , engine_combustion ] ] ) do var i ;
12104: LD_INT 22
12106: PUSH
12107: LD_EXP 12
12111: PUSH
12112: EMPTY
12113: LIST
12114: LIST
12115: PUSH
12116: LD_INT 32
12118: PUSH
12119: LD_INT 1
12121: PUSH
12122: EMPTY
12123: LIST
12124: LIST
12125: PUSH
12126: EMPTY
12127: LIST
12128: LIST
12129: PPUSH
12130: CALL_OW 69
12134: IFFALSE 12213
12136: GO 12138
12138: DISABLE
12139: LD_INT 0
12141: PPUSH
// begin enable ;
12142: ENABLE
// for i in FilterAllUnits ( [ [ f_side , enemySide ] , [ f_engine , engine_combustion ] ] ) do
12143: LD_ADDR_VAR 0 1
12147: PUSH
12148: LD_INT 22
12150: PUSH
12151: LD_EXP 12
12155: PUSH
12156: EMPTY
12157: LIST
12158: LIST
12159: PUSH
12160: LD_INT 32
12162: PUSH
12163: LD_INT 1
12165: PUSH
12166: EMPTY
12167: LIST
12168: LIST
12169: PUSH
12170: EMPTY
12171: LIST
12172: LIST
12173: PPUSH
12174: CALL_OW 69
12178: PUSH
12179: FOR_IN
12180: IFFALSE 12211
// if GetFuel ( i ) < 3 then
12182: LD_VAR 0 1
12186: PPUSH
12187: CALL_OW 261
12191: PUSH
12192: LD_INT 3
12194: LESS
12195: IFFALSE 12209
// SetFuel ( i , 3 ) ;
12197: LD_VAR 0 1
12201: PPUSH
12202: LD_INT 3
12204: PPUSH
12205: CALL_OW 240
12209: GO 12179
12211: POP
12212: POP
// end ;
12213: PPOPN 1
12215: END
// every 0 0$2 trigger FilterUnitsInArea ( southEndArea , [ f_side , enemySide ] ) do var i ;
12216: LD_INT 9
12218: PPUSH
12219: LD_INT 22
12221: PUSH
12222: LD_EXP 12
12226: PUSH
12227: EMPTY
12228: LIST
12229: LIST
12230: PPUSH
12231: CALL_OW 70
12235: IFFALSE 12298
12237: GO 12239
12239: DISABLE
12240: LD_INT 0
12242: PPUSH
// begin enable ;
12243: ENABLE
// for i in FilterUnitsInArea ( southEndArea , [ f_side , enemySide ] ) do
12244: LD_ADDR_VAR 0 1
12248: PUSH
12249: LD_INT 9
12251: PPUSH
12252: LD_INT 22
12254: PUSH
12255: LD_EXP 12
12259: PUSH
12260: EMPTY
12261: LIST
12262: LIST
12263: PPUSH
12264: CALL_OW 70
12268: PUSH
12269: FOR_IN
12270: IFFALSE 12296
// begin Multiplayer_AddPoints ( convoySide , - 250 ) ;
12272: LD_EXP 42
12276: PPUSH
12277: LD_INT 250
12279: NEG
12280: PPUSH
12281: CALL 8263 0 2
// RemoveUnit ( i ) ;
12285: LD_VAR 0 1
12289: PPUSH
12290: CALL_OW 64
// end ;
12294: GO 12269
12296: POP
12297: POP
// end ; end_of_file
12298: PPOPN 1
12300: END
// export convoys , convoyWave , convoySide ; export function PrepareConvoys ( side ) ; var i ; begin
12301: LD_INT 0
12303: PPUSH
12304: PPUSH
// convoys := [ ] ;
12305: LD_ADDR_EXP 40
12309: PUSH
12310: EMPTY
12311: ST_TO_ADDR
// convoySide := side ;
12312: LD_ADDR_EXP 42
12316: PUSH
12317: LD_VAR 0 1
12321: ST_TO_ADDR
// convoyWave := 1 ;
12322: LD_ADDR_EXP 41
12326: PUSH
12327: LD_INT 1
12329: ST_TO_ADDR
// for i := 1 to 8 do
12330: LD_ADDR_VAR 0 3
12334: PUSH
12335: DOUBLE
12336: LD_INT 1
12338: DEC
12339: ST_TO_ADDR
12340: LD_INT 8
12342: PUSH
12343: FOR_TO
12344: IFFALSE 12374
// if multi_sides [ i ] then
12346: LD_EXP 15
12350: PUSH
12351: LD_VAR 0 3
12355: ARRAY
12356: IFFALSE 12372
// ChangeSideFog ( i , side ) ;
12358: LD_VAR 0 3
12362: PPUSH
12363: LD_VAR 0 1
12367: PPUSH
12368: CALL_OW 343
12372: GO 12343
12374: POP
12375: POP
// end ;
12376: LD_VAR 0 2
12380: RET
// every 2 2$00 + 1 1$00 trigger game do var i , tmp ;
12381: LD_EXP 2
12385: IFFALSE 12420
12387: GO 12389
12389: DISABLE
12390: LD_INT 0
12392: PPUSH
12393: PPUSH
// begin enable ;
12394: ENABLE
// blockThread := true ;
12395: LD_ADDR_EXP 6
12399: PUSH
12400: LD_INT 1
12402: ST_TO_ADDR
// SendConvoy ( convoyWave ) ;
12403: LD_EXP 41
12407: PPUSH
12408: CALL 12423 0 1
// blockThread := false ;
12412: LD_ADDR_EXP 6
12416: PUSH
12417: LD_INT 0
12419: ST_TO_ADDR
// end ;
12420: PPOPN 2
12422: END
// function SendConvoy ( wave ) ; var i , skill , un , veh , tmp , path ; begin
12423: LD_INT 0
12425: PPUSH
12426: PPUSH
12427: PPUSH
12428: PPUSH
12429: PPUSH
12430: PPUSH
12431: PPUSH
// convoyWave := Inc ( wave ) ;
12432: LD_ADDR_EXP 41
12436: PUSH
12437: LD_VAR 0 1
12441: PPUSH
12442: CALL 54979 0 1
12446: ST_TO_ADDR
// skill := [ 5 , 4 , 3 ] [ Difficulty ] ;
12447: LD_ADDR_VAR 0 4
12451: PUSH
12452: LD_INT 5
12454: PUSH
12455: LD_INT 4
12457: PUSH
12458: LD_INT 3
12460: PUSH
12461: EMPTY
12462: LIST
12463: LIST
12464: LIST
12465: PUSH
12466: LD_OWVAR 67
12470: ARRAY
12471: ST_TO_ADDR
// tmp := [ ] ;
12472: LD_ADDR_VAR 0 7
12476: PUSH
12477: EMPTY
12478: ST_TO_ADDR
// if wave mod 5 = 0 then
12479: LD_VAR 0 1
12483: PUSH
12484: LD_INT 5
12486: MOD
12487: PUSH
12488: LD_INT 0
12490: EQUAL
12491: IFFALSE 12737
// begin path := [ [ 16 , 21 ] , [ 36 , 45 ] , [ 48 , 58 ] , [ 59 , 88 ] , [ 76 , 106 ] , [ 93 , 150 ] , [ 92 , 177 ] ] ;
12493: LD_ADDR_VAR 0 8
12497: PUSH
12498: LD_INT 16
12500: PUSH
12501: LD_INT 21
12503: PUSH
12504: EMPTY
12505: LIST
12506: LIST
12507: PUSH
12508: LD_INT 36
12510: PUSH
12511: LD_INT 45
12513: PUSH
12514: EMPTY
12515: LIST
12516: LIST
12517: PUSH
12518: LD_INT 48
12520: PUSH
12521: LD_INT 58
12523: PUSH
12524: EMPTY
12525: LIST
12526: LIST
12527: PUSH
12528: LD_INT 59
12530: PUSH
12531: LD_INT 88
12533: PUSH
12534: EMPTY
12535: LIST
12536: LIST
12537: PUSH
12538: LD_INT 76
12540: PUSH
12541: LD_INT 106
12543: PUSH
12544: EMPTY
12545: LIST
12546: LIST
12547: PUSH
12548: LD_INT 93
12550: PUSH
12551: LD_INT 150
12553: PUSH
12554: EMPTY
12555: LIST
12556: LIST
12557: PUSH
12558: LD_INT 92
12560: PUSH
12561: LD_INT 177
12563: PUSH
12564: EMPTY
12565: LIST
12566: LIST
12567: PUSH
12568: EMPTY
12569: LIST
12570: LIST
12571: LIST
12572: LIST
12573: LIST
12574: LIST
12575: LIST
12576: ST_TO_ADDR
// for i := 1 to 4 do
12577: LD_ADDR_VAR 0 3
12581: PUSH
12582: DOUBLE
12583: LD_INT 1
12585: DEC
12586: ST_TO_ADDR
12587: LD_INT 4
12589: PUSH
12590: FOR_TO
12591: IFFALSE 12733
// begin uc_side := convoySide ;
12593: LD_ADDR_OWVAR 20
12597: PUSH
12598: LD_EXP 42
12602: ST_TO_ADDR
// uc_nation := nation_russian ;
12603: LD_ADDR_OWVAR 21
12607: PUSH
12608: LD_INT 3
12610: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , skill ) ;
12611: LD_INT 0
12613: PPUSH
12614: LD_INT 1
12616: PPUSH
12617: LD_INT 4
12619: PPUSH
12620: CALL_OW 12
12624: PPUSH
12625: LD_VAR 0 4
12629: PPUSH
12630: CALL_OW 380
// un := CreateHuman ;
12634: LD_ADDR_VAR 0 5
12638: PUSH
12639: CALL_OW 44
12643: ST_TO_ADDR
// SetDir ( un , 3 ) ;
12644: LD_VAR 0 5
12648: PPUSH
12649: LD_INT 3
12651: PPUSH
12652: CALL_OW 233
// PlaceUnitArea ( un , northForestSpawnArea , false ) ;
12656: LD_VAR 0 5
12660: PPUSH
12661: LD_INT 10
12663: PPUSH
12664: LD_INT 0
12666: PPUSH
12667: CALL_OW 49
// SetLives ( un , rand ( 400 , 1000 ) ) ;
12671: LD_VAR 0 5
12675: PPUSH
12676: LD_INT 400
12678: PPUSH
12679: LD_INT 1000
12681: PPUSH
12682: CALL_OW 12
12686: PPUSH
12687: CALL_OW 234
// convoys := Join ( convoys , un ) ;
12691: LD_ADDR_EXP 40
12695: PUSH
12696: LD_EXP 40
12700: PPUSH
12701: LD_VAR 0 5
12705: PPUSH
12706: CALL 53606 0 2
12710: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
12711: LD_ADDR_VAR 0 7
12715: PUSH
12716: LD_VAR 0 7
12720: PPUSH
12721: LD_VAR 0 5
12725: PPUSH
12726: CALL 53606 0 2
12730: ST_TO_ADDR
// end ;
12731: GO 12590
12733: POP
12734: POP
// end else
12735: GO 13918
// if wave mod 3 = 0 then
12737: LD_VAR 0 1
12741: PUSH
12742: LD_INT 3
12744: MOD
12745: PUSH
12746: LD_INT 0
12748: EQUAL
12749: IFFALSE 13239
// begin path := [ [ 133 , 15 ] , [ 125 , 34 ] , [ 109 , 55 ] , [ 99 , 64 ] , [ 133 , 102 ] , [ 143 , 136 ] , [ 127 , 154 ] , [ 92 , 152 ] , [ 93 , 177 ] ] ;
12751: LD_ADDR_VAR 0 8
12755: PUSH
12756: LD_INT 133
12758: PUSH
12759: LD_INT 15
12761: PUSH
12762: EMPTY
12763: LIST
12764: LIST
12765: PUSH
12766: LD_INT 125
12768: PUSH
12769: LD_INT 34
12771: PUSH
12772: EMPTY
12773: LIST
12774: LIST
12775: PUSH
12776: LD_INT 109
12778: PUSH
12779: LD_INT 55
12781: PUSH
12782: EMPTY
12783: LIST
12784: LIST
12785: PUSH
12786: LD_INT 99
12788: PUSH
12789: LD_INT 64
12791: PUSH
12792: EMPTY
12793: LIST
12794: LIST
12795: PUSH
12796: LD_INT 133
12798: PUSH
12799: LD_INT 102
12801: PUSH
12802: EMPTY
12803: LIST
12804: LIST
12805: PUSH
12806: LD_INT 143
12808: PUSH
12809: LD_INT 136
12811: PUSH
12812: EMPTY
12813: LIST
12814: LIST
12815: PUSH
12816: LD_INT 127
12818: PUSH
12819: LD_INT 154
12821: PUSH
12822: EMPTY
12823: LIST
12824: LIST
12825: PUSH
12826: LD_INT 92
12828: PUSH
12829: LD_INT 152
12831: PUSH
12832: EMPTY
12833: LIST
12834: LIST
12835: PUSH
12836: LD_INT 93
12838: PUSH
12839: LD_INT 177
12841: PUSH
12842: EMPTY
12843: LIST
12844: LIST
12845: PUSH
12846: EMPTY
12847: LIST
12848: LIST
12849: LIST
12850: LIST
12851: LIST
12852: LIST
12853: LIST
12854: LIST
12855: LIST
12856: ST_TO_ADDR
// for i := 1 to 4 do
12857: LD_ADDR_VAR 0 3
12861: PUSH
12862: DOUBLE
12863: LD_INT 1
12865: DEC
12866: ST_TO_ADDR
12867: LD_INT 4
12869: PUSH
12870: FOR_TO
12871: IFFALSE 13235
// begin uc_side := convoySide ;
12873: LD_ADDR_OWVAR 20
12877: PUSH
12878: LD_EXP 42
12882: ST_TO_ADDR
// uc_nation := nation_russian ;
12883: LD_ADDR_OWVAR 21
12887: PUSH
12888: LD_INT 3
12890: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , skill ) ;
12891: LD_INT 0
12893: PPUSH
12894: LD_INT 1
12896: PPUSH
12897: LD_INT 4
12899: PPUSH
12900: CALL_OW 12
12904: PPUSH
12905: LD_VAR 0 4
12909: PPUSH
12910: CALL_OW 380
// un := CreateHuman ;
12914: LD_ADDR_VAR 0 5
12918: PUSH
12919: CALL_OW 44
12923: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_wheeled , ru_medium_tracked ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_cargo_bay , ru_gun ] [ rand ( 1 , 4 ) ] , rand ( 60 , 90 ) ) ;
12924: LD_INT 21
12926: PUSH
12927: LD_INT 22
12929: PUSH
12930: EMPTY
12931: LIST
12932: LIST
12933: PUSH
12934: LD_INT 1
12936: PPUSH
12937: LD_INT 2
12939: PPUSH
12940: CALL_OW 12
12944: ARRAY
12945: PPUSH
12946: LD_INT 1
12948: PPUSH
12949: LD_INT 1
12951: PPUSH
12952: LD_INT 42
12954: PUSH
12955: LD_INT 43
12957: PUSH
12958: LD_INT 51
12960: PUSH
12961: LD_INT 44
12963: PUSH
12964: EMPTY
12965: LIST
12966: LIST
12967: LIST
12968: LIST
12969: PUSH
12970: LD_INT 1
12972: PPUSH
12973: LD_INT 4
12975: PPUSH
12976: CALL_OW 12
12980: ARRAY
12981: PPUSH
12982: LD_INT 60
12984: PPUSH
12985: LD_INT 90
12987: PPUSH
12988: CALL_OW 12
12992: PPUSH
12993: CALL 20436 0 5
// veh := CreateVehicle ;
12997: LD_ADDR_VAR 0 6
13001: PUSH
13002: CALL_OW 45
13006: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
13007: LD_VAR 0 6
13011: PPUSH
13012: LD_INT 3
13014: PPUSH
13015: CALL_OW 233
// SetLives ( veh , rand ( 400 , 1000 ) ) ;
13019: LD_VAR 0 6
13023: PPUSH
13024: LD_INT 400
13026: PPUSH
13027: LD_INT 1000
13029: PPUSH
13030: CALL_OW 12
13034: PPUSH
13035: CALL_OW 234
// if GetWeapon ( veh ) = ru_cargo_bay then
13039: LD_VAR 0 6
13043: PPUSH
13044: CALL_OW 264
13048: PUSH
13049: LD_INT 51
13051: EQUAL
13052: IFFALSE 13100
// SetCargo ( veh , [ mat_cans , mat_oil ] [ rand ( 1 , 2 ) ] , 10 * rand ( 1 , 10 ) ) ;
13054: LD_VAR 0 6
13058: PPUSH
13059: LD_INT 1
13061: PUSH
13062: LD_INT 2
13064: PUSH
13065: EMPTY
13066: LIST
13067: LIST
13068: PUSH
13069: LD_INT 1
13071: PPUSH
13072: LD_INT 2
13074: PPUSH
13075: CALL_OW 12
13079: ARRAY
13080: PPUSH
13081: LD_INT 10
13083: PUSH
13084: LD_INT 1
13086: PPUSH
13087: LD_INT 10
13089: PPUSH
13090: CALL_OW 12
13094: MUL
13095: PPUSH
13096: CALL_OW 290
// repeat wait ( 0 0$0.3 ) ;
13100: LD_INT 10
13102: PPUSH
13103: CALL_OW 67
// until PlaceUnitArea ( veh , northSpawnArea , false ) ;
13107: LD_VAR 0 6
13111: PPUSH
13112: LD_INT 7
13114: PPUSH
13115: LD_INT 0
13117: PPUSH
13118: CALL_OW 49
13122: IFFALSE 13100
// PlaceHumanInUnit ( un , veh ) ;
13124: LD_VAR 0 5
13128: PPUSH
13129: LD_VAR 0 6
13133: PPUSH
13134: CALL_OW 52
// convoys := Join ( convoys , un ) ;
13138: LD_ADDR_EXP 40
13142: PUSH
13143: LD_EXP 40
13147: PPUSH
13148: LD_VAR 0 5
13152: PPUSH
13153: CALL 53606 0 2
13157: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
13158: LD_ADDR_VAR 0 7
13162: PUSH
13163: LD_VAR 0 7
13167: PPUSH
13168: LD_VAR 0 5
13172: PPUSH
13173: CALL 53606 0 2
13177: ST_TO_ADDR
// convoys := Join ( convoys , veh ) ;
13178: LD_ADDR_EXP 40
13182: PUSH
13183: LD_EXP 40
13187: PPUSH
13188: LD_VAR 0 6
13192: PPUSH
13193: CALL 53606 0 2
13197: ST_TO_ADDR
// tmp := Join ( tmp , veh ) ;
13198: LD_ADDR_VAR 0 7
13202: PUSH
13203: LD_VAR 0 7
13207: PPUSH
13208: LD_VAR 0 6
13212: PPUSH
13213: CALL 53606 0 2
13217: ST_TO_ADDR
// ComMoveXY ( un , 133 , 15 ) ;
13218: LD_VAR 0 5
13222: PPUSH
13223: LD_INT 133
13225: PPUSH
13226: LD_INT 15
13228: PPUSH
13229: CALL_OW 111
// end ;
13233: GO 12870
13235: POP
13236: POP
// end else
13237: GO 13918
// begin path := [ [ 133 , 15 ] , [ 125 , 34 ] , [ 109 , 55 ] , [ 99 , 64 ] , [ 88 , 70 ] , [ 74 , 78 ] , [ 70 , 91 ] , [ 80 , 113 ] , [ 89 , 133 ] , [ 91 , 159 ] , [ 93 , 177 ] ] ;
13239: LD_ADDR_VAR 0 8
13243: PUSH
13244: LD_INT 133
13246: PUSH
13247: LD_INT 15
13249: PUSH
13250: EMPTY
13251: LIST
13252: LIST
13253: PUSH
13254: LD_INT 125
13256: PUSH
13257: LD_INT 34
13259: PUSH
13260: EMPTY
13261: LIST
13262: LIST
13263: PUSH
13264: LD_INT 109
13266: PUSH
13267: LD_INT 55
13269: PUSH
13270: EMPTY
13271: LIST
13272: LIST
13273: PUSH
13274: LD_INT 99
13276: PUSH
13277: LD_INT 64
13279: PUSH
13280: EMPTY
13281: LIST
13282: LIST
13283: PUSH
13284: LD_INT 88
13286: PUSH
13287: LD_INT 70
13289: PUSH
13290: EMPTY
13291: LIST
13292: LIST
13293: PUSH
13294: LD_INT 74
13296: PUSH
13297: LD_INT 78
13299: PUSH
13300: EMPTY
13301: LIST
13302: LIST
13303: PUSH
13304: LD_INT 70
13306: PUSH
13307: LD_INT 91
13309: PUSH
13310: EMPTY
13311: LIST
13312: LIST
13313: PUSH
13314: LD_INT 80
13316: PUSH
13317: LD_INT 113
13319: PUSH
13320: EMPTY
13321: LIST
13322: LIST
13323: PUSH
13324: LD_INT 89
13326: PUSH
13327: LD_INT 133
13329: PUSH
13330: EMPTY
13331: LIST
13332: LIST
13333: PUSH
13334: LD_INT 91
13336: PUSH
13337: LD_INT 159
13339: PUSH
13340: EMPTY
13341: LIST
13342: LIST
13343: PUSH
13344: LD_INT 93
13346: PUSH
13347: LD_INT 177
13349: PUSH
13350: EMPTY
13351: LIST
13352: LIST
13353: PUSH
13354: EMPTY
13355: LIST
13356: LIST
13357: LIST
13358: LIST
13359: LIST
13360: LIST
13361: LIST
13362: LIST
13363: LIST
13364: LIST
13365: LIST
13366: ST_TO_ADDR
// for i := 1 to 2 do
13367: LD_ADDR_VAR 0 3
13371: PUSH
13372: DOUBLE
13373: LD_INT 1
13375: DEC
13376: ST_TO_ADDR
13377: LD_INT 2
13379: PUSH
13380: FOR_TO
13381: IFFALSE 13726
// begin uc_side := convoySide ;
13383: LD_ADDR_OWVAR 20
13387: PUSH
13388: LD_EXP 42
13392: ST_TO_ADDR
// uc_nation := nation_russian ;
13393: LD_ADDR_OWVAR 21
13397: PUSH
13398: LD_INT 3
13400: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , skill ) ;
13401: LD_INT 0
13403: PPUSH
13404: LD_INT 1
13406: PPUSH
13407: LD_INT 4
13409: PPUSH
13410: CALL_OW 12
13414: PPUSH
13415: LD_VAR 0 4
13419: PPUSH
13420: CALL_OW 380
// un := CreateHuman ;
13424: LD_ADDR_VAR 0 5
13428: PUSH
13429: CALL_OW 44
13433: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_wheeled , ru_medium_tracked ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_cargo_bay , ru_gun ] [ rand ( 1 , 4 ) ] , rand ( 70 , 90 ) ) ;
13434: LD_INT 21
13436: PUSH
13437: LD_INT 22
13439: PUSH
13440: EMPTY
13441: LIST
13442: LIST
13443: PUSH
13444: LD_INT 1
13446: PPUSH
13447: LD_INT 2
13449: PPUSH
13450: CALL_OW 12
13454: ARRAY
13455: PPUSH
13456: LD_INT 1
13458: PPUSH
13459: LD_INT 1
13461: PPUSH
13462: LD_INT 42
13464: PUSH
13465: LD_INT 43
13467: PUSH
13468: LD_INT 51
13470: PUSH
13471: LD_INT 44
13473: PUSH
13474: EMPTY
13475: LIST
13476: LIST
13477: LIST
13478: LIST
13479: PUSH
13480: LD_INT 1
13482: PPUSH
13483: LD_INT 4
13485: PPUSH
13486: CALL_OW 12
13490: ARRAY
13491: PPUSH
13492: LD_INT 70
13494: PPUSH
13495: LD_INT 90
13497: PPUSH
13498: CALL_OW 12
13502: PPUSH
13503: CALL 20436 0 5
// veh := CreateVehicle ;
13507: LD_ADDR_VAR 0 6
13511: PUSH
13512: CALL_OW 45
13516: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
13517: LD_VAR 0 6
13521: PPUSH
13522: LD_INT 3
13524: PPUSH
13525: CALL_OW 233
// SetLives ( veh , rand ( 400 , 1000 ) ) ;
13529: LD_VAR 0 6
13533: PPUSH
13534: LD_INT 400
13536: PPUSH
13537: LD_INT 1000
13539: PPUSH
13540: CALL_OW 12
13544: PPUSH
13545: CALL_OW 234
// if GetWeapon ( veh ) = ru_cargo_bay then
13549: LD_VAR 0 6
13553: PPUSH
13554: CALL_OW 264
13558: PUSH
13559: LD_INT 51
13561: EQUAL
13562: IFFALSE 13591
// SetCargo ( veh , mat_cans , 10 * rand ( 1 , 10 ) ) ;
13564: LD_VAR 0 6
13568: PPUSH
13569: LD_INT 1
13571: PPUSH
13572: LD_INT 10
13574: PUSH
13575: LD_INT 1
13577: PPUSH
13578: LD_INT 10
13580: PPUSH
13581: CALL_OW 12
13585: MUL
13586: PPUSH
13587: CALL_OW 290
// repeat wait ( 0 0$0.3 ) ;
13591: LD_INT 10
13593: PPUSH
13594: CALL_OW 67
// until PlaceUnitArea ( veh , northSpawnArea , false ) ;
13598: LD_VAR 0 6
13602: PPUSH
13603: LD_INT 7
13605: PPUSH
13606: LD_INT 0
13608: PPUSH
13609: CALL_OW 49
13613: IFFALSE 13591
// PlaceHumanInUnit ( un , veh ) ;
13615: LD_VAR 0 5
13619: PPUSH
13620: LD_VAR 0 6
13624: PPUSH
13625: CALL_OW 52
// convoys := Join ( convoys , un ) ;
13629: LD_ADDR_EXP 40
13633: PUSH
13634: LD_EXP 40
13638: PPUSH
13639: LD_VAR 0 5
13643: PPUSH
13644: CALL 53606 0 2
13648: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
13649: LD_ADDR_VAR 0 7
13653: PUSH
13654: LD_VAR 0 7
13658: PPUSH
13659: LD_VAR 0 5
13663: PPUSH
13664: CALL 53606 0 2
13668: ST_TO_ADDR
// convoys := Join ( convoys , veh ) ;
13669: LD_ADDR_EXP 40
13673: PUSH
13674: LD_EXP 40
13678: PPUSH
13679: LD_VAR 0 6
13683: PPUSH
13684: CALL 53606 0 2
13688: ST_TO_ADDR
// tmp := Join ( tmp , veh ) ;
13689: LD_ADDR_VAR 0 7
13693: PUSH
13694: LD_VAR 0 7
13698: PPUSH
13699: LD_VAR 0 6
13703: PPUSH
13704: CALL 53606 0 2
13708: ST_TO_ADDR
// ComMoveXY ( un , 133 , 15 ) ;
13709: LD_VAR 0 5
13713: PPUSH
13714: LD_INT 133
13716: PPUSH
13717: LD_INT 15
13719: PPUSH
13720: CALL_OW 111
// end ;
13724: GO 13380
13726: POP
13727: POP
// for i := 1 to rand ( 3 , 5 ) do
13728: LD_ADDR_VAR 0 3
13732: PUSH
13733: DOUBLE
13734: LD_INT 1
13736: DEC
13737: ST_TO_ADDR
13738: LD_INT 3
13740: PPUSH
13741: LD_INT 5
13743: PPUSH
13744: CALL_OW 12
13748: PUSH
13749: FOR_TO
13750: IFFALSE 13916
// begin uc_side := convoySide ;
13752: LD_ADDR_OWVAR 20
13756: PUSH
13757: LD_EXP 42
13761: ST_TO_ADDR
// uc_nation := nation_russian ;
13762: LD_ADDR_OWVAR 21
13766: PUSH
13767: LD_INT 3
13769: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , skill ) ;
13770: LD_INT 0
13772: PPUSH
13773: LD_INT 1
13775: PPUSH
13776: LD_INT 4
13778: PPUSH
13779: CALL_OW 12
13783: PPUSH
13784: LD_VAR 0 4
13788: PPUSH
13789: CALL_OW 380
// un := CreateHuman ;
13793: LD_ADDR_VAR 0 5
13797: PUSH
13798: CALL_OW 44
13802: ST_TO_ADDR
// SetDir ( un , 3 ) ;
13803: LD_VAR 0 5
13807: PPUSH
13808: LD_INT 3
13810: PPUSH
13811: CALL_OW 233
// repeat wait ( 0 0$1 ) ;
13815: LD_INT 35
13817: PPUSH
13818: CALL_OW 67
// until PlaceUnitArea ( un , northSpawnArea , false ) ;
13822: LD_VAR 0 5
13826: PPUSH
13827: LD_INT 7
13829: PPUSH
13830: LD_INT 0
13832: PPUSH
13833: CALL_OW 49
13837: IFFALSE 13815
// SetLives ( un , rand ( 400 , 1000 ) ) ;
13839: LD_VAR 0 5
13843: PPUSH
13844: LD_INT 400
13846: PPUSH
13847: LD_INT 1000
13849: PPUSH
13850: CALL_OW 12
13854: PPUSH
13855: CALL_OW 234
// convoys := Join ( convoys , un ) ;
13859: LD_ADDR_EXP 40
13863: PUSH
13864: LD_EXP 40
13868: PPUSH
13869: LD_VAR 0 5
13873: PPUSH
13874: CALL 53606 0 2
13878: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
13879: LD_ADDR_VAR 0 7
13883: PUSH
13884: LD_VAR 0 7
13888: PPUSH
13889: LD_VAR 0 5
13893: PPUSH
13894: CALL 53606 0 2
13898: ST_TO_ADDR
// ComMoveXY ( un , 133 , 15 ) ;
13899: LD_VAR 0 5
13903: PPUSH
13904: LD_INT 133
13906: PPUSH
13907: LD_INT 15
13909: PPUSH
13910: CALL_OW 111
// end ;
13914: GO 13749
13916: POP
13917: POP
// end ; if not tmp then
13918: LD_VAR 0 7
13922: NOT
13923: IFFALSE 13927
// exit ;
13925: GO 14235
// repeat wait ( 0 0$1 ) ;
13927: LD_INT 35
13929: PPUSH
13930: CALL_OW 67
// for i in tmp do
13934: LD_ADDR_VAR 0 3
13938: PUSH
13939: LD_VAR 0 7
13943: PUSH
13944: FOR_IN
13945: IFFALSE 14226
// begin if IsDead ( i ) then
13947: LD_VAR 0 3
13951: PPUSH
13952: CALL_OW 301
13956: IFFALSE 13976
// tmp := tmp diff i else
13958: LD_ADDR_VAR 0 7
13962: PUSH
13963: LD_VAR 0 7
13967: PUSH
13968: LD_VAR 0 3
13972: DIFF
13973: ST_TO_ADDR
13974: GO 14224
// if IsInArea ( i , southEndArea ) then
13976: LD_VAR 0 3
13980: PPUSH
13981: LD_INT 9
13983: PPUSH
13984: CALL_OW 308
13988: IFFALSE 14141
// begin tmp := tmp diff i ;
13990: LD_ADDR_VAR 0 7
13994: PUSH
13995: LD_VAR 0 7
13999: PUSH
14000: LD_VAR 0 3
14004: DIFF
14005: ST_TO_ADDR
// convoys := convoys diff i ;
14006: LD_ADDR_EXP 40
14010: PUSH
14011: LD_EXP 40
14015: PUSH
14016: LD_VAR 0 3
14020: DIFF
14021: ST_TO_ADDR
// if GetType ( i ) = unit_human then
14022: LD_VAR 0 3
14026: PPUSH
14027: CALL_OW 247
14031: PUSH
14032: LD_INT 1
14034: EQUAL
14035: IFFALSE 14056
// Multiplayer_AddPoints ( convoySide , Multiplayer_GetCondition ( 7 ) ) else
14037: LD_EXP 42
14041: PPUSH
14042: LD_INT 7
14044: PPUSH
14045: CALL 8429 0 1
14049: PPUSH
14050: CALL 8263 0 2
14054: GO 14115
// begin tmp := tmp diff IsInUnit ( i ) ;
14056: LD_ADDR_VAR 0 7
14060: PUSH
14061: LD_VAR 0 7
14065: PUSH
14066: LD_VAR 0 3
14070: PPUSH
14071: CALL_OW 310
14075: DIFF
14076: ST_TO_ADDR
// convoys := convoys diff IsInUnit ( i ) ;
14077: LD_ADDR_EXP 40
14081: PUSH
14082: LD_EXP 40
14086: PUSH
14087: LD_VAR 0 3
14091: PPUSH
14092: CALL_OW 310
14096: DIFF
14097: ST_TO_ADDR
// Multiplayer_AddPoints ( convoySide , Multiplayer_GetCondition ( 8 ) ) ;
14098: LD_EXP 42
14102: PPUSH
14103: LD_INT 8
14105: PPUSH
14106: CALL 8429 0 1
14110: PPUSH
14111: CALL 8263 0 2
// end ; RemoveUnit ( i ) ;
14115: LD_VAR 0 3
14119: PPUSH
14120: CALL_OW 64
// savedConvoyUnits := Inc ( savedConvoyUnits ) ;
14124: LD_ADDR_EXP 5
14128: PUSH
14129: LD_EXP 5
14133: PPUSH
14134: CALL 54979 0 1
14138: ST_TO_ADDR
// end else
14139: GO 14224
// if GetType ( i ) = unit_vehicle and GetFuel ( i ) = 0 then
14141: LD_VAR 0 3
14145: PPUSH
14146: CALL_OW 247
14150: PUSH
14151: LD_INT 2
14153: EQUAL
14154: IFFALSE 14171
14156: PUSH
14157: LD_VAR 0 3
14161: PPUSH
14162: CALL_OW 261
14166: PUSH
14167: LD_INT 0
14169: EQUAL
14170: AND
14171: IFFALSE 14207
// begin tmp := tmp diff i ;
14173: LD_ADDR_VAR 0 7
14177: PUSH
14178: LD_VAR 0 7
14182: PUSH
14183: LD_VAR 0 3
14187: DIFF
14188: ST_TO_ADDR
// convoys := convoys diff i ;
14189: LD_ADDR_EXP 40
14193: PUSH
14194: LD_EXP 40
14198: PUSH
14199: LD_VAR 0 3
14203: DIFF
14204: ST_TO_ADDR
// end else
14205: GO 14224
// MoveTo ( i , path , southEndArea ) ;
14207: LD_VAR 0 3
14211: PPUSH
14212: LD_VAR 0 8
14216: PPUSH
14217: LD_INT 9
14219: PPUSH
14220: CALL 14240 0 3
// end ;
14224: GO 13944
14226: POP
14227: POP
// until not tmp ;
14228: LD_VAR 0 7
14232: NOT
14233: IFFALSE 13927
// end ;
14235: LD_VAR 0 2
14239: RET
// function MoveTo ( unit , path , area ) ; var cr , tag , type , vehicle , ignoreCratesWeapon ; begin
14240: LD_INT 0
14242: PPUSH
14243: PPUSH
14244: PPUSH
14245: PPUSH
14246: PPUSH
14247: PPUSH
// if not unit then
14248: LD_VAR 0 1
14252: NOT
14253: IFFALSE 14257
// exit ;
14255: GO 15033
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser , ru_cargo_bay ] ;
14257: LD_ADDR_VAR 0 9
14261: PUSH
14262: LD_INT 29
14264: PUSH
14265: LD_INT 91
14267: PUSH
14268: LD_INT 49
14270: PUSH
14271: LD_INT 51
14273: PUSH
14274: EMPTY
14275: LIST
14276: LIST
14277: LIST
14278: LIST
14279: ST_TO_ADDR
// if IsOk ( unit ) then
14280: LD_VAR 0 1
14284: PPUSH
14285: CALL_OW 302
14289: IFFALSE 15033
// begin tag := GetTag ( unit ) + 1 ;
14291: LD_ADDR_VAR 0 6
14295: PUSH
14296: LD_VAR 0 1
14300: PPUSH
14301: CALL_OW 110
14305: PUSH
14306: LD_INT 1
14308: PLUS
14309: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( unit ) , GetY ( unit ) , 3 ) ;
14310: LD_ADDR_VAR 0 5
14314: PUSH
14315: LD_VAR 0 1
14319: PPUSH
14320: CALL_OW 250
14324: PPUSH
14325: LD_VAR 0 1
14329: PPUSH
14330: CALL_OW 251
14334: PPUSH
14335: LD_INT 3
14337: PPUSH
14338: CALL 56114 0 3
14342: ST_TO_ADDR
// type := GetType ( unit ) ;
14343: LD_ADDR_VAR 0 7
14347: PUSH
14348: LD_VAR 0 1
14352: PPUSH
14353: CALL_OW 247
14357: ST_TO_ADDR
// if type = unit_human then
14358: LD_VAR 0 7
14362: PUSH
14363: LD_INT 1
14365: EQUAL
14366: IFFALSE 14458
// begin vehicle := IsInUnit ( unit ) ;
14368: LD_ADDR_VAR 0 8
14372: PUSH
14373: LD_VAR 0 1
14377: PPUSH
14378: CALL_OW 310
14382: ST_TO_ADDR
// if vehicle and GetFuel ( vehicle ) = 0 then
14383: LD_VAR 0 8
14387: IFFALSE 14404
14389: PUSH
14390: LD_VAR 0 8
14394: PPUSH
14395: CALL_OW 261
14399: PUSH
14400: LD_INT 0
14402: EQUAL
14403: AND
14404: IFFALSE 14456
// begin ComExitVehicle ( unit ) ;
14406: LD_VAR 0 1
14410: PPUSH
14411: CALL_OW 121
// AddComMoveXY ( unit , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) ;
14415: LD_VAR 0 1
14419: PPUSH
14420: LD_VAR 0 2
14424: PUSH
14425: LD_VAR 0 6
14429: ARRAY
14430: PUSH
14431: LD_INT 1
14433: ARRAY
14434: PPUSH
14435: LD_VAR 0 2
14439: PUSH
14440: LD_VAR 0 6
14444: ARRAY
14445: PUSH
14446: LD_INT 2
14448: ARRAY
14449: PPUSH
14450: CALL_OW 171
// exit ;
14454: GO 15033
// end ; end else
14456: GO 14533
// begin if GetFuel ( unit ) = 0 then
14458: LD_VAR 0 1
14462: PPUSH
14463: CALL_OW 261
14467: PUSH
14468: LD_INT 0
14470: EQUAL
14471: IFFALSE 14533
// begin ComExitVehicle ( IsDrivenBy ( unit ) ) ;
14473: LD_VAR 0 1
14477: PPUSH
14478: CALL_OW 311
14482: PPUSH
14483: CALL_OW 121
// AddComMoveXY ( IsDrivenBy ( unit ) , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) ;
14487: LD_VAR 0 1
14491: PPUSH
14492: CALL_OW 311
14496: PPUSH
14497: LD_VAR 0 2
14501: PUSH
14502: LD_VAR 0 6
14506: ARRAY
14507: PUSH
14508: LD_INT 1
14510: ARRAY
14511: PPUSH
14512: LD_VAR 0 2
14516: PUSH
14517: LD_VAR 0 6
14521: ARRAY
14522: PUSH
14523: LD_INT 2
14525: ARRAY
14526: PPUSH
14527: CALL_OW 171
// exit ;
14531: GO 15033
// end ; end ; if type = unit_vehicle and GetWeapon ( unit ) = ru_cargo_bay and IsInArea ( unit , cargoCheckpointArea ) and ( GetCargo ( unit , mat_cans ) or GetCargo ( unit , mat_oil ) ) then
14533: LD_VAR 0 7
14537: PUSH
14538: LD_INT 2
14540: EQUAL
14541: IFFALSE 14558
14543: PUSH
14544: LD_VAR 0 1
14548: PPUSH
14549: CALL_OW 264
14553: PUSH
14554: LD_INT 51
14556: EQUAL
14557: AND
14558: IFFALSE 14574
14560: PUSH
14561: LD_VAR 0 1
14565: PPUSH
14566: LD_INT 29
14568: PPUSH
14569: CALL_OW 308
14573: AND
14574: IFFALSE 14606
14576: PUSH
14577: LD_VAR 0 1
14581: PPUSH
14582: LD_INT 1
14584: PPUSH
14585: CALL_OW 289
14589: IFTRUE 14605
14591: PUSH
14592: LD_VAR 0 1
14596: PPUSH
14597: LD_INT 2
14599: PPUSH
14600: CALL_OW 289
14604: OR
14605: AND
14606: IFFALSE 14654
// begin goToUnload := Join ( goToUnload , unit ) ;
14608: LD_ADDR_EXP 8
14612: PUSH
14613: LD_EXP 8
14617: PPUSH
14618: LD_VAR 0 1
14622: PPUSH
14623: CALL 53606 0 2
14627: ST_TO_ADDR
// ComMoveXY ( unit , 113 , 117 ) ;
14628: LD_VAR 0 1
14632: PPUSH
14633: LD_INT 113
14635: PPUSH
14636: LD_INT 117
14638: PPUSH
14639: CALL_OW 111
// AddComUnload ( unit ) ;
14643: LD_VAR 0 1
14647: PPUSH
14648: CALL_OW 219
// exit ;
14652: GO 15033
// end ; if unit in goToUnload then
14654: LD_VAR 0 1
14658: PUSH
14659: LD_EXP 8
14663: IN
14664: IFFALSE 14742
// begin if GetCargo ( unit , mat_cans ) = 0 and GetCargo ( unit , mat_oil ) = 0 then
14666: LD_VAR 0 1
14670: PPUSH
14671: LD_INT 1
14673: PPUSH
14674: CALL_OW 289
14678: PUSH
14679: LD_INT 0
14681: EQUAL
14682: IFFALSE 14702
14684: PUSH
14685: LD_VAR 0 1
14689: PPUSH
14690: LD_INT 2
14692: PPUSH
14693: CALL_OW 289
14697: PUSH
14698: LD_INT 0
14700: EQUAL
14701: AND
14702: IFFALSE 14740
// begin SetTag ( unit , tag + 2 ) ;
14704: LD_VAR 0 1
14708: PPUSH
14709: LD_VAR 0 6
14713: PUSH
14714: LD_INT 2
14716: PLUS
14717: PPUSH
14718: CALL_OW 109
// goToUnload := goToUnload diff unit ;
14722: LD_ADDR_EXP 8
14726: PUSH
14727: LD_EXP 8
14731: PUSH
14732: LD_VAR 0 1
14736: DIFF
14737: ST_TO_ADDR
// end else
14738: GO 14742
// exit ;
14740: GO 15033
// end ; if type = unit_vehicle and cr > 3 and not GetWeapon ( unit ) in ignoreCratesWeapon then
14742: LD_VAR 0 7
14746: PUSH
14747: LD_INT 2
14749: EQUAL
14750: IFFALSE 14762
14752: PUSH
14753: LD_VAR 0 5
14757: PUSH
14758: LD_INT 3
14760: GREATER
14761: AND
14762: IFFALSE 14782
14764: PUSH
14765: LD_VAR 0 1
14769: PPUSH
14770: CALL_OW 264
14774: PUSH
14775: LD_VAR 0 9
14779: IN
14780: NOT
14781: AND
14782: IFFALSE 14821
// ComAttackPlace ( unit , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
14784: LD_VAR 0 1
14788: PPUSH
14789: LD_VAR 0 5
14793: PUSH
14794: LD_INT 1
14796: ARRAY
14797: PUSH
14798: LD_INT 1
14800: ARRAY
14801: PPUSH
14802: LD_VAR 0 5
14806: PUSH
14807: LD_INT 1
14809: ARRAY
14810: PUSH
14811: LD_INT 2
14813: ARRAY
14814: PPUSH
14815: CALL_OW 116
14819: GO 15033
// if path > tag then
14821: LD_VAR 0 2
14825: PUSH
14826: LD_VAR 0 6
14830: GREATER
14831: IFFALSE 15002
// begin if GetDistUnitXY ( unit , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
14833: LD_VAR 0 1
14837: PPUSH
14838: LD_VAR 0 2
14842: PUSH
14843: LD_VAR 0 6
14847: ARRAY
14848: PUSH
14849: LD_INT 1
14851: ARRAY
14852: PPUSH
14853: LD_VAR 0 2
14857: PUSH
14858: LD_VAR 0 6
14862: ARRAY
14863: PUSH
14864: LD_INT 2
14866: ARRAY
14867: PPUSH
14868: CALL_OW 297
14872: PUSH
14873: LD_INT 6
14875: GREATER
14876: IFFALSE 14986
// if GetClass ( unit ) in [ 2 , 3 , 4 ] then
14878: LD_VAR 0 1
14882: PPUSH
14883: CALL_OW 257
14887: PUSH
14888: LD_INT 2
14890: PUSH
14891: LD_INT 3
14893: PUSH
14894: LD_INT 4
14896: PUSH
14897: EMPTY
14898: LIST
14899: LIST
14900: LIST
14901: IN
14902: IFFALSE 14945
// ComMoveXY ( unit , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
14904: LD_VAR 0 1
14908: PPUSH
14909: LD_VAR 0 2
14913: PUSH
14914: LD_VAR 0 6
14918: ARRAY
14919: PUSH
14920: LD_INT 1
14922: ARRAY
14923: PPUSH
14924: LD_VAR 0 2
14928: PUSH
14929: LD_VAR 0 6
14933: ARRAY
14934: PUSH
14935: LD_INT 2
14937: ARRAY
14938: PPUSH
14939: CALL_OW 111
14943: GO 14984
// ComAgressiveMove ( unit , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
14945: LD_VAR 0 1
14949: PPUSH
14950: LD_VAR 0 2
14954: PUSH
14955: LD_VAR 0 6
14959: ARRAY
14960: PUSH
14961: LD_INT 1
14963: ARRAY
14964: PPUSH
14965: LD_VAR 0 2
14969: PUSH
14970: LD_VAR 0 6
14974: ARRAY
14975: PUSH
14976: LD_INT 2
14978: ARRAY
14979: PPUSH
14980: CALL_OW 114
14984: GO 15000
// SetTag ( unit , tag ) ;
14986: LD_VAR 0 1
14990: PPUSH
14991: LD_VAR 0 6
14995: PPUSH
14996: CALL_OW 109
// end else
15000: GO 15033
// if not IsInArea ( unit , area ) then
15002: LD_VAR 0 1
15006: PPUSH
15007: LD_VAR 0 3
15011: PPUSH
15012: CALL_OW 308
15016: NOT
15017: IFFALSE 15033
// ComMoveToArea ( unit , area ) ;
15019: LD_VAR 0 1
15023: PPUSH
15024: LD_VAR 0 3
15028: PPUSH
15029: CALL_OW 113
// end ; end ; end_of_file
15033: LD_VAR 0 4
15037: RET
// every 0 0$20 trigger game do
15038: LD_EXP 2
15042: IFFALSE 15083
15044: GO 15046
15046: DISABLE
// SpawnCrates ( [ cratesWestArea , cratesEastArea , cratesMiddleArea ] , multi_crates_spawn [ 2 ] , multi_crates_spawn [ 1 ] ) ;
15047: LD_INT 11
15049: PUSH
15050: LD_INT 12
15052: PUSH
15053: LD_INT 13
15055: PUSH
15056: EMPTY
15057: LIST
15058: LIST
15059: LIST
15060: PPUSH
15061: LD_EXP 29
15065: PUSH
15066: LD_INT 2
15068: ARRAY
15069: PPUSH
15070: LD_EXP 29
15074: PUSH
15075: LD_INT 1
15077: ARRAY
15078: PPUSH
15079: CALL 15084 0 3
15083: END
// export function SpawnCrates ( areas , time , amount ) ; var i , x ; begin
15084: LD_INT 0
15086: PPUSH
15087: PPUSH
15088: PPUSH
// if not areas then
15089: LD_VAR 0 1
15093: NOT
15094: IFFALSE 15098
// exit ;
15096: GO 15306
// x := 5 ;
15098: LD_ADDR_VAR 0 6
15102: PUSH
15103: LD_INT 5
15105: ST_TO_ADDR
// repeat wait ( time ) ;
15106: LD_VAR 0 2
15110: PPUSH
15111: CALL_OW 67
// for i in areas do
15115: LD_ADDR_VAR 0 5
15119: PUSH
15120: LD_VAR 0 1
15124: PUSH
15125: FOR_IN
15126: IFFALSE 15215
// begin if GetResourceArea ( i , mat_cans ) < [ 15 , 12 , 10 ] [ Difficulty ] then
15128: LD_VAR 0 5
15132: PPUSH
15133: LD_INT 1
15135: PPUSH
15136: CALL_OW 287
15140: PUSH
15141: LD_INT 15
15143: PUSH
15144: LD_INT 12
15146: PUSH
15147: LD_INT 10
15149: PUSH
15150: EMPTY
15151: LIST
15152: LIST
15153: LIST
15154: PUSH
15155: LD_OWVAR 67
15159: ARRAY
15160: LESS
15161: IFFALSE 15213
// begin wait ( 0 0$10 * Difficulty ) ;
15163: LD_INT 350
15165: PUSH
15166: LD_OWVAR 67
15170: MUL
15171: PPUSH
15172: CALL_OW 67
// CreateCratesArea ( x , i , true ) ;
15176: LD_VAR 0 6
15180: PPUSH
15181: LD_VAR 0 5
15185: PPUSH
15186: LD_INT 1
15188: PPUSH
15189: CALL_OW 55
// amount := amount - ( x * 10 ) ;
15193: LD_ADDR_VAR 0 3
15197: PUSH
15198: LD_VAR 0 3
15202: PUSH
15203: LD_VAR 0 6
15207: PUSH
15208: LD_INT 10
15210: MUL
15211: MINUS
15212: ST_TO_ADDR
// end ; end ;
15213: GO 15125
15215: POP
15216: POP
// time := time + ( 0 0$5 * Difficulty ) ;
15217: LD_ADDR_VAR 0 2
15221: PUSH
15222: LD_VAR 0 2
15226: PUSH
15227: LD_INT 175
15229: PUSH
15230: LD_OWVAR 67
15234: MUL
15235: PLUS
15236: ST_TO_ADDR
// x := x - 1 ;
15237: LD_ADDR_VAR 0 6
15241: PUSH
15242: LD_VAR 0 6
15246: PUSH
15247: LD_INT 1
15249: MINUS
15250: ST_TO_ADDR
// if x = 0 then
15251: LD_VAR 0 6
15255: PUSH
15256: LD_INT 0
15258: EQUAL
15259: IFFALSE 15269
// x := 5 ;
15261: LD_ADDR_VAR 0 6
15265: PUSH
15266: LD_INT 5
15268: ST_TO_ADDR
// if time > 2 2$00 then
15269: LD_VAR 0 2
15273: PUSH
15274: LD_INT 4200
15276: GREATER
15277: IFFALSE 15287
// time := 0 0$40 ;
15279: LD_ADDR_VAR 0 2
15283: PUSH
15284: LD_INT 1400
15286: ST_TO_ADDR
// until not game or amount <= 0 ;
15287: LD_EXP 2
15291: NOT
15292: IFTRUE 15304
15294: PUSH
15295: LD_VAR 0 3
15299: PUSH
15300: LD_INT 0
15302: LESSEQUAL
15303: OR
15304: IFFALSE 15106
// end ; end_of_file
15306: LD_VAR 0 4
15310: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
15311: LD_VAR 0 1
15315: PUSH
15316: LD_INT 200
15318: DOUBLE
15319: GREATEREQUAL
15320: IFFALSE 15328
15322: LD_INT 299
15324: DOUBLE
15325: LESSEQUAL
15326: IFTRUE 15330
15328: GO 15362
15330: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
15331: LD_VAR 0 1
15335: PPUSH
15336: LD_VAR 0 2
15340: PPUSH
15341: LD_VAR 0 3
15345: PPUSH
15346: LD_VAR 0 4
15350: PPUSH
15351: LD_VAR 0 5
15355: PPUSH
15356: CALL 59629 0 5
15360: GO 15439
15362: LD_INT 300
15364: DOUBLE
15365: GREATEREQUAL
15366: IFFALSE 15374
15368: LD_INT 399
15370: DOUBLE
15371: LESSEQUAL
15372: IFTRUE 15376
15374: GO 15438
15376: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
15377: LD_VAR 0 1
15381: PPUSH
15382: LD_VAR 0 2
15386: PPUSH
15387: LD_VAR 0 3
15391: PPUSH
15392: LD_VAR 0 4
15396: PPUSH
15397: LD_VAR 0 5
15401: PPUSH
15402: LD_VAR 0 6
15406: PPUSH
15407: LD_VAR 0 7
15411: PPUSH
15412: LD_VAR 0 8
15416: PPUSH
15417: LD_VAR 0 9
15421: PPUSH
15422: LD_VAR 0 10
15426: PPUSH
15427: LD_VAR 0 11
15431: PPUSH
15432: CALL 65034 0 11
15436: GO 15439
15438: POP
// end ;
15439: PPOPN 11
15441: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
15442: LD_VAR 0 1
15446: PPUSH
15447: LD_VAR 0 2
15451: PPUSH
15452: LD_VAR 0 3
15456: PPUSH
15457: LD_VAR 0 4
15461: PPUSH
15462: LD_VAR 0 5
15466: PPUSH
15467: CALL 59010 0 5
// end ; end_of_file
15471: PPOPN 5
15473: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
15474: LD_INT 0
15476: PPUSH
15477: PPUSH
// if exist_mode then
15478: LD_VAR 0 2
15482: IFFALSE 15528
// begin unit := CreateCharacter ( prefix & ident ) ;
15484: LD_ADDR_VAR 0 5
15488: PUSH
15489: LD_VAR 0 3
15493: PUSH
15494: LD_VAR 0 1
15498: STR
15499: PPUSH
15500: CALL_OW 34
15504: ST_TO_ADDR
// if unit then
15505: LD_VAR 0 5
15509: IFFALSE 15526
// DeleteCharacters ( prefix & ident ) ;
15511: LD_VAR 0 3
15515: PUSH
15516: LD_VAR 0 1
15520: STR
15521: PPUSH
15522: CALL_OW 40
// end else
15526: GO 15543
// unit := NewCharacter ( ident ) ;
15528: LD_ADDR_VAR 0 5
15532: PUSH
15533: LD_VAR 0 1
15537: PPUSH
15538: CALL_OW 25
15542: ST_TO_ADDR
// result := unit ;
15543: LD_ADDR_VAR 0 4
15547: PUSH
15548: LD_VAR 0 5
15552: ST_TO_ADDR
// end ;
15553: LD_VAR 0 4
15557: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
15558: LD_INT 0
15560: PPUSH
15561: PPUSH
// if exist_mode then
15562: LD_VAR 0 2
15566: IFFALSE 15591
// unit := CreateCharacter ( prefix & ident ) else
15568: LD_ADDR_VAR 0 5
15572: PUSH
15573: LD_VAR 0 3
15577: PUSH
15578: LD_VAR 0 1
15582: STR
15583: PPUSH
15584: CALL_OW 34
15588: ST_TO_ADDR
15589: GO 15606
// unit := NewCharacter ( ident ) ;
15591: LD_ADDR_VAR 0 5
15595: PUSH
15596: LD_VAR 0 1
15600: PPUSH
15601: CALL_OW 25
15605: ST_TO_ADDR
// result := unit ;
15606: LD_ADDR_VAR 0 4
15610: PUSH
15611: LD_VAR 0 5
15615: ST_TO_ADDR
// end ;
15616: LD_VAR 0 4
15620: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
15621: LD_INT 0
15623: PPUSH
15624: PPUSH
// if not side or not nation then
15625: LD_VAR 0 1
15629: NOT
15630: IFTRUE 15639
15632: PUSH
15633: LD_VAR 0 2
15637: NOT
15638: OR
15639: IFFALSE 15643
// exit ;
15641: GO 16413
// case nation of nation_american :
15643: LD_VAR 0 2
15647: PUSH
15648: LD_INT 1
15650: DOUBLE
15651: EQUAL
15652: IFTRUE 15656
15654: GO 15870
15656: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
15657: LD_ADDR_VAR 0 4
15661: PUSH
15662: LD_INT 35
15664: PUSH
15665: LD_INT 45
15667: PUSH
15668: LD_INT 46
15670: PUSH
15671: LD_INT 47
15673: PUSH
15674: LD_INT 82
15676: PUSH
15677: LD_INT 83
15679: PUSH
15680: LD_INT 84
15682: PUSH
15683: LD_INT 85
15685: PUSH
15686: LD_INT 86
15688: PUSH
15689: LD_INT 1
15691: PUSH
15692: LD_INT 2
15694: PUSH
15695: LD_INT 6
15697: PUSH
15698: LD_INT 15
15700: PUSH
15701: LD_INT 16
15703: PUSH
15704: LD_INT 7
15706: PUSH
15707: LD_INT 12
15709: PUSH
15710: LD_INT 13
15712: PUSH
15713: LD_INT 10
15715: PUSH
15716: LD_INT 14
15718: PUSH
15719: LD_INT 20
15721: PUSH
15722: LD_INT 21
15724: PUSH
15725: LD_INT 22
15727: PUSH
15728: LD_INT 25
15730: PUSH
15731: LD_INT 32
15733: PUSH
15734: LD_INT 27
15736: PUSH
15737: LD_INT 36
15739: PUSH
15740: LD_INT 69
15742: PUSH
15743: LD_INT 39
15745: PUSH
15746: LD_INT 34
15748: PUSH
15749: LD_INT 40
15751: PUSH
15752: LD_INT 48
15754: PUSH
15755: LD_INT 49
15757: PUSH
15758: LD_INT 50
15760: PUSH
15761: LD_INT 51
15763: PUSH
15764: LD_INT 52
15766: PUSH
15767: LD_INT 53
15769: PUSH
15770: LD_INT 54
15772: PUSH
15773: LD_INT 55
15775: PUSH
15776: LD_INT 56
15778: PUSH
15779: LD_INT 57
15781: PUSH
15782: LD_INT 58
15784: PUSH
15785: LD_INT 59
15787: PUSH
15788: LD_INT 60
15790: PUSH
15791: LD_INT 61
15793: PUSH
15794: LD_INT 62
15796: PUSH
15797: LD_INT 80
15799: PUSH
15800: LD_INT 82
15802: PUSH
15803: LD_INT 83
15805: PUSH
15806: LD_INT 84
15808: PUSH
15809: LD_INT 85
15811: PUSH
15812: LD_INT 86
15814: PUSH
15815: EMPTY
15816: LIST
15817: LIST
15818: LIST
15819: LIST
15820: LIST
15821: LIST
15822: LIST
15823: LIST
15824: LIST
15825: LIST
15826: LIST
15827: LIST
15828: LIST
15829: LIST
15830: LIST
15831: LIST
15832: LIST
15833: LIST
15834: LIST
15835: LIST
15836: LIST
15837: LIST
15838: LIST
15839: LIST
15840: LIST
15841: LIST
15842: LIST
15843: LIST
15844: LIST
15845: LIST
15846: LIST
15847: LIST
15848: LIST
15849: LIST
15850: LIST
15851: LIST
15852: LIST
15853: LIST
15854: LIST
15855: LIST
15856: LIST
15857: LIST
15858: LIST
15859: LIST
15860: LIST
15861: LIST
15862: LIST
15863: LIST
15864: LIST
15865: LIST
15866: LIST
15867: ST_TO_ADDR
15868: GO 16335
15870: LD_INT 2
15872: DOUBLE
15873: EQUAL
15874: IFTRUE 15878
15876: GO 16104
15878: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
15879: LD_ADDR_VAR 0 4
15883: PUSH
15884: LD_INT 35
15886: PUSH
15887: LD_INT 45
15889: PUSH
15890: LD_INT 46
15892: PUSH
15893: LD_INT 47
15895: PUSH
15896: LD_INT 82
15898: PUSH
15899: LD_INT 83
15901: PUSH
15902: LD_INT 84
15904: PUSH
15905: LD_INT 85
15907: PUSH
15908: LD_INT 87
15910: PUSH
15911: LD_INT 70
15913: PUSH
15914: LD_INT 1
15916: PUSH
15917: LD_INT 11
15919: PUSH
15920: LD_INT 3
15922: PUSH
15923: LD_INT 4
15925: PUSH
15926: LD_INT 5
15928: PUSH
15929: LD_INT 6
15931: PUSH
15932: LD_INT 15
15934: PUSH
15935: LD_INT 18
15937: PUSH
15938: LD_INT 7
15940: PUSH
15941: LD_INT 17
15943: PUSH
15944: LD_INT 8
15946: PUSH
15947: LD_INT 20
15949: PUSH
15950: LD_INT 21
15952: PUSH
15953: LD_INT 22
15955: PUSH
15956: LD_INT 72
15958: PUSH
15959: LD_INT 26
15961: PUSH
15962: LD_INT 69
15964: PUSH
15965: LD_INT 39
15967: PUSH
15968: LD_INT 40
15970: PUSH
15971: LD_INT 41
15973: PUSH
15974: LD_INT 42
15976: PUSH
15977: LD_INT 43
15979: PUSH
15980: LD_INT 48
15982: PUSH
15983: LD_INT 49
15985: PUSH
15986: LD_INT 50
15988: PUSH
15989: LD_INT 51
15991: PUSH
15992: LD_INT 52
15994: PUSH
15995: LD_INT 53
15997: PUSH
15998: LD_INT 54
16000: PUSH
16001: LD_INT 55
16003: PUSH
16004: LD_INT 56
16006: PUSH
16007: LD_INT 60
16009: PUSH
16010: LD_INT 61
16012: PUSH
16013: LD_INT 62
16015: PUSH
16016: LD_INT 66
16018: PUSH
16019: LD_INT 67
16021: PUSH
16022: LD_INT 68
16024: PUSH
16025: LD_INT 81
16027: PUSH
16028: LD_INT 82
16030: PUSH
16031: LD_INT 83
16033: PUSH
16034: LD_INT 84
16036: PUSH
16037: LD_INT 85
16039: PUSH
16040: LD_INT 87
16042: PUSH
16043: LD_INT 88
16045: PUSH
16046: EMPTY
16047: LIST
16048: LIST
16049: LIST
16050: LIST
16051: LIST
16052: LIST
16053: LIST
16054: LIST
16055: LIST
16056: LIST
16057: LIST
16058: LIST
16059: LIST
16060: LIST
16061: LIST
16062: LIST
16063: LIST
16064: LIST
16065: LIST
16066: LIST
16067: LIST
16068: LIST
16069: LIST
16070: LIST
16071: LIST
16072: LIST
16073: LIST
16074: LIST
16075: LIST
16076: LIST
16077: LIST
16078: LIST
16079: LIST
16080: LIST
16081: LIST
16082: LIST
16083: LIST
16084: LIST
16085: LIST
16086: LIST
16087: LIST
16088: LIST
16089: LIST
16090: LIST
16091: LIST
16092: LIST
16093: LIST
16094: LIST
16095: LIST
16096: LIST
16097: LIST
16098: LIST
16099: LIST
16100: LIST
16101: ST_TO_ADDR
16102: GO 16335
16104: LD_INT 3
16106: DOUBLE
16107: EQUAL
16108: IFTRUE 16112
16110: GO 16334
16112: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
16113: LD_ADDR_VAR 0 4
16117: PUSH
16118: LD_INT 46
16120: PUSH
16121: LD_INT 47
16123: PUSH
16124: LD_INT 1
16126: PUSH
16127: LD_INT 2
16129: PUSH
16130: LD_INT 82
16132: PUSH
16133: LD_INT 83
16135: PUSH
16136: LD_INT 84
16138: PUSH
16139: LD_INT 85
16141: PUSH
16142: LD_INT 86
16144: PUSH
16145: LD_INT 11
16147: PUSH
16148: LD_INT 9
16150: PUSH
16151: LD_INT 20
16153: PUSH
16154: LD_INT 19
16156: PUSH
16157: LD_INT 21
16159: PUSH
16160: LD_INT 24
16162: PUSH
16163: LD_INT 22
16165: PUSH
16166: LD_INT 25
16168: PUSH
16169: LD_INT 28
16171: PUSH
16172: LD_INT 29
16174: PUSH
16175: LD_INT 30
16177: PUSH
16178: LD_INT 31
16180: PUSH
16181: LD_INT 37
16183: PUSH
16184: LD_INT 38
16186: PUSH
16187: LD_INT 32
16189: PUSH
16190: LD_INT 27
16192: PUSH
16193: LD_INT 33
16195: PUSH
16196: LD_INT 69
16198: PUSH
16199: LD_INT 39
16201: PUSH
16202: LD_INT 34
16204: PUSH
16205: LD_INT 40
16207: PUSH
16208: LD_INT 71
16210: PUSH
16211: LD_INT 23
16213: PUSH
16214: LD_INT 44
16216: PUSH
16217: LD_INT 48
16219: PUSH
16220: LD_INT 49
16222: PUSH
16223: LD_INT 50
16225: PUSH
16226: LD_INT 51
16228: PUSH
16229: LD_INT 52
16231: PUSH
16232: LD_INT 53
16234: PUSH
16235: LD_INT 54
16237: PUSH
16238: LD_INT 55
16240: PUSH
16241: LD_INT 56
16243: PUSH
16244: LD_INT 57
16246: PUSH
16247: LD_INT 58
16249: PUSH
16250: LD_INT 59
16252: PUSH
16253: LD_INT 63
16255: PUSH
16256: LD_INT 64
16258: PUSH
16259: LD_INT 65
16261: PUSH
16262: LD_INT 82
16264: PUSH
16265: LD_INT 83
16267: PUSH
16268: LD_INT 84
16270: PUSH
16271: LD_INT 85
16273: PUSH
16274: LD_INT 86
16276: PUSH
16277: EMPTY
16278: LIST
16279: LIST
16280: LIST
16281: LIST
16282: LIST
16283: LIST
16284: LIST
16285: LIST
16286: LIST
16287: LIST
16288: LIST
16289: LIST
16290: LIST
16291: LIST
16292: LIST
16293: LIST
16294: LIST
16295: LIST
16296: LIST
16297: LIST
16298: LIST
16299: LIST
16300: LIST
16301: LIST
16302: LIST
16303: LIST
16304: LIST
16305: LIST
16306: LIST
16307: LIST
16308: LIST
16309: LIST
16310: LIST
16311: LIST
16312: LIST
16313: LIST
16314: LIST
16315: LIST
16316: LIST
16317: LIST
16318: LIST
16319: LIST
16320: LIST
16321: LIST
16322: LIST
16323: LIST
16324: LIST
16325: LIST
16326: LIST
16327: LIST
16328: LIST
16329: LIST
16330: LIST
16331: ST_TO_ADDR
16332: GO 16335
16334: POP
// if state > - 1 and state < 3 then
16335: LD_VAR 0 3
16339: PUSH
16340: LD_INT 1
16342: NEG
16343: GREATER
16344: IFFALSE 16356
16346: PUSH
16347: LD_VAR 0 3
16351: PUSH
16352: LD_INT 3
16354: LESS
16355: AND
16356: IFFALSE 16413
// for i in result do
16358: LD_ADDR_VAR 0 5
16362: PUSH
16363: LD_VAR 0 4
16367: PUSH
16368: FOR_IN
16369: IFFALSE 16411
// if GetTech ( i , side ) <> state then
16371: LD_VAR 0 5
16375: PPUSH
16376: LD_VAR 0 1
16380: PPUSH
16381: CALL_OW 321
16385: PUSH
16386: LD_VAR 0 3
16390: NONEQUAL
16391: IFFALSE 16409
// result := result diff i ;
16393: LD_ADDR_VAR 0 4
16397: PUSH
16398: LD_VAR 0 4
16402: PUSH
16403: LD_VAR 0 5
16407: DIFF
16408: ST_TO_ADDR
16409: GO 16368
16411: POP
16412: POP
// end ;
16413: LD_VAR 0 4
16417: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
16418: LD_INT 0
16420: PPUSH
16421: PPUSH
16422: PPUSH
// result := true ;
16423: LD_ADDR_VAR 0 3
16427: PUSH
16428: LD_INT 1
16430: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
16431: LD_ADDR_VAR 0 5
16435: PUSH
16436: LD_VAR 0 2
16440: PPUSH
16441: CALL_OW 480
16445: ST_TO_ADDR
// if not tmp then
16446: LD_VAR 0 5
16450: NOT
16451: IFFALSE 16455
// exit ;
16453: GO 16504
// for i in tmp do
16455: LD_ADDR_VAR 0 4
16459: PUSH
16460: LD_VAR 0 5
16464: PUSH
16465: FOR_IN
16466: IFFALSE 16502
// if GetTech ( i , side ) <> state_researched then
16468: LD_VAR 0 4
16472: PPUSH
16473: LD_VAR 0 1
16477: PPUSH
16478: CALL_OW 321
16482: PUSH
16483: LD_INT 2
16485: NONEQUAL
16486: IFFALSE 16500
// begin result := false ;
16488: LD_ADDR_VAR 0 3
16492: PUSH
16493: LD_INT 0
16495: ST_TO_ADDR
// exit ;
16496: POP
16497: POP
16498: GO 16504
// end ;
16500: GO 16465
16502: POP
16503: POP
// end ;
16504: LD_VAR 0 3
16508: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
16509: LD_INT 0
16511: PPUSH
16512: PPUSH
16513: PPUSH
16514: PPUSH
16515: PPUSH
16516: PPUSH
16517: PPUSH
16518: PPUSH
16519: PPUSH
16520: PPUSH
16521: PPUSH
16522: PPUSH
16523: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
16524: LD_VAR 0 1
16528: NOT
16529: IFTRUE 16546
16531: PUSH
16532: LD_VAR 0 1
16536: PPUSH
16537: CALL_OW 257
16541: PUSH
16542: LD_INT 9
16544: NONEQUAL
16545: OR
16546: IFFALSE 16550
// exit ;
16548: GO 17129
// side := GetSide ( unit ) ;
16550: LD_ADDR_VAR 0 9
16554: PUSH
16555: LD_VAR 0 1
16559: PPUSH
16560: CALL_OW 255
16564: ST_TO_ADDR
// tech_space := tech_spacanom ;
16565: LD_ADDR_VAR 0 12
16569: PUSH
16570: LD_INT 29
16572: ST_TO_ADDR
// tech_time := tech_taurad ;
16573: LD_ADDR_VAR 0 13
16577: PUSH
16578: LD_INT 28
16580: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
16581: LD_ADDR_VAR 0 11
16585: PUSH
16586: LD_VAR 0 1
16590: PPUSH
16591: CALL_OW 310
16595: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
16596: LD_VAR 0 11
16600: PPUSH
16601: CALL_OW 247
16605: PUSH
16606: LD_INT 2
16608: EQUAL
16609: IFFALSE 16613
// exit ;
16611: GO 17129
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16613: LD_ADDR_VAR 0 8
16617: PUSH
16618: LD_INT 81
16620: PUSH
16621: LD_VAR 0 9
16625: PUSH
16626: EMPTY
16627: LIST
16628: LIST
16629: PUSH
16630: LD_INT 3
16632: PUSH
16633: LD_INT 21
16635: PUSH
16636: LD_INT 3
16638: PUSH
16639: EMPTY
16640: LIST
16641: LIST
16642: PUSH
16643: EMPTY
16644: LIST
16645: LIST
16646: PUSH
16647: EMPTY
16648: LIST
16649: LIST
16650: PPUSH
16651: CALL_OW 69
16655: ST_TO_ADDR
// if not tmp then
16656: LD_VAR 0 8
16660: NOT
16661: IFFALSE 16665
// exit ;
16663: GO 17129
// if in_unit then
16665: LD_VAR 0 11
16669: IFFALSE 16693
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
16671: LD_ADDR_VAR 0 10
16675: PUSH
16676: LD_VAR 0 8
16680: PPUSH
16681: LD_VAR 0 11
16685: PPUSH
16686: CALL_OW 74
16690: ST_TO_ADDR
16691: GO 16713
// enemy := NearestUnitToUnit ( tmp , unit ) ;
16693: LD_ADDR_VAR 0 10
16697: PUSH
16698: LD_VAR 0 8
16702: PPUSH
16703: LD_VAR 0 1
16707: PPUSH
16708: CALL_OW 74
16712: ST_TO_ADDR
// if not enemy then
16713: LD_VAR 0 10
16717: NOT
16718: IFFALSE 16722
// exit ;
16720: GO 17129
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
16722: LD_VAR 0 11
16726: IFFALSE 16748
16728: PUSH
16729: LD_VAR 0 11
16733: PPUSH
16734: LD_VAR 0 10
16738: PPUSH
16739: CALL_OW 296
16743: PUSH
16744: LD_INT 13
16746: GREATER
16747: AND
16748: IFTRUE 16770
16750: PUSH
16751: LD_VAR 0 1
16755: PPUSH
16756: LD_VAR 0 10
16760: PPUSH
16761: CALL_OW 296
16765: PUSH
16766: LD_INT 12
16768: GREATER
16769: OR
16770: IFFALSE 16774
// exit ;
16772: GO 17129
// missile := [ 1 ] ;
16774: LD_ADDR_VAR 0 14
16778: PUSH
16779: LD_INT 1
16781: PUSH
16782: EMPTY
16783: LIST
16784: ST_TO_ADDR
// if Researched ( side , tech_space ) then
16785: LD_VAR 0 9
16789: PPUSH
16790: LD_VAR 0 12
16794: PPUSH
16795: CALL_OW 325
16799: IFFALSE 16828
// missile := Replace ( missile , missile + 1 , 2 ) ;
16801: LD_ADDR_VAR 0 14
16805: PUSH
16806: LD_VAR 0 14
16810: PPUSH
16811: LD_VAR 0 14
16815: PUSH
16816: LD_INT 1
16818: PLUS
16819: PPUSH
16820: LD_INT 2
16822: PPUSH
16823: CALL_OW 1
16827: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
16828: LD_VAR 0 9
16832: PPUSH
16833: LD_VAR 0 13
16837: PPUSH
16838: CALL_OW 325
16842: IFFALSE 16866
16844: PUSH
16845: LD_VAR 0 10
16849: PPUSH
16850: CALL_OW 255
16854: PPUSH
16855: LD_VAR 0 13
16859: PPUSH
16860: CALL_OW 325
16864: NOT
16865: AND
16866: IFFALSE 16895
// missile := Replace ( missile , missile + 1 , 3 ) ;
16868: LD_ADDR_VAR 0 14
16872: PUSH
16873: LD_VAR 0 14
16877: PPUSH
16878: LD_VAR 0 14
16882: PUSH
16883: LD_INT 1
16885: PLUS
16886: PPUSH
16887: LD_INT 3
16889: PPUSH
16890: CALL_OW 1
16894: ST_TO_ADDR
// if missile < 2 then
16895: LD_VAR 0 14
16899: PUSH
16900: LD_INT 2
16902: LESS
16903: IFFALSE 16907
// exit ;
16905: GO 17129
// x := GetX ( enemy ) ;
16907: LD_ADDR_VAR 0 4
16911: PUSH
16912: LD_VAR 0 10
16916: PPUSH
16917: CALL_OW 250
16921: ST_TO_ADDR
// y := GetY ( enemy ) ;
16922: LD_ADDR_VAR 0 5
16926: PUSH
16927: LD_VAR 0 10
16931: PPUSH
16932: CALL_OW 251
16936: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
16937: LD_ADDR_VAR 0 6
16941: PUSH
16942: LD_VAR 0 4
16946: PUSH
16947: LD_INT 1
16949: NEG
16950: PPUSH
16951: LD_INT 1
16953: PPUSH
16954: CALL_OW 12
16958: PLUS
16959: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
16960: LD_ADDR_VAR 0 7
16964: PUSH
16965: LD_VAR 0 5
16969: PUSH
16970: LD_INT 1
16972: NEG
16973: PPUSH
16974: LD_INT 1
16976: PPUSH
16977: CALL_OW 12
16981: PLUS
16982: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
16983: LD_VAR 0 6
16987: PPUSH
16988: LD_VAR 0 7
16992: PPUSH
16993: CALL_OW 488
16997: NOT
16998: IFFALSE 17020
// begin _x := x ;
17000: LD_ADDR_VAR 0 6
17004: PUSH
17005: LD_VAR 0 4
17009: ST_TO_ADDR
// _y := y ;
17010: LD_ADDR_VAR 0 7
17014: PUSH
17015: LD_VAR 0 5
17019: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
17020: LD_ADDR_VAR 0 3
17024: PUSH
17025: LD_INT 1
17027: PPUSH
17028: LD_VAR 0 14
17032: PPUSH
17033: CALL_OW 12
17037: ST_TO_ADDR
// case i of 1 :
17038: LD_VAR 0 3
17042: PUSH
17043: LD_INT 1
17045: DOUBLE
17046: EQUAL
17047: IFTRUE 17051
17049: GO 17068
17051: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
17052: LD_VAR 0 1
17056: PPUSH
17057: LD_VAR 0 10
17061: PPUSH
17062: CALL_OW 115
17066: GO 17129
17068: LD_INT 2
17070: DOUBLE
17071: EQUAL
17072: IFTRUE 17076
17074: GO 17098
17076: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
17077: LD_VAR 0 1
17081: PPUSH
17082: LD_VAR 0 6
17086: PPUSH
17087: LD_VAR 0 7
17091: PPUSH
17092: CALL_OW 153
17096: GO 17129
17098: LD_INT 3
17100: DOUBLE
17101: EQUAL
17102: IFTRUE 17106
17104: GO 17128
17106: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
17107: LD_VAR 0 1
17111: PPUSH
17112: LD_VAR 0 6
17116: PPUSH
17117: LD_VAR 0 7
17121: PPUSH
17122: CALL_OW 154
17126: GO 17129
17128: POP
// end ;
17129: LD_VAR 0 2
17133: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
17134: LD_INT 0
17136: PPUSH
17137: PPUSH
17138: PPUSH
17139: PPUSH
17140: PPUSH
17141: PPUSH
// if not unit or not building then
17142: LD_VAR 0 1
17146: NOT
17147: IFTRUE 17156
17149: PUSH
17150: LD_VAR 0 2
17154: NOT
17155: OR
17156: IFFALSE 17160
// exit ;
17158: GO 17318
// x := GetX ( building ) ;
17160: LD_ADDR_VAR 0 5
17164: PUSH
17165: LD_VAR 0 2
17169: PPUSH
17170: CALL_OW 250
17174: ST_TO_ADDR
// y := GetY ( building ) ;
17175: LD_ADDR_VAR 0 6
17179: PUSH
17180: LD_VAR 0 2
17184: PPUSH
17185: CALL_OW 251
17189: ST_TO_ADDR
// for i := 0 to 5 do
17190: LD_ADDR_VAR 0 4
17194: PUSH
17195: DOUBLE
17196: LD_INT 0
17198: DEC
17199: ST_TO_ADDR
17200: LD_INT 5
17202: PUSH
17203: FOR_TO
17204: IFFALSE 17316
// begin _x := ShiftX ( x , i , 3 ) ;
17206: LD_ADDR_VAR 0 7
17210: PUSH
17211: LD_VAR 0 5
17215: PPUSH
17216: LD_VAR 0 4
17220: PPUSH
17221: LD_INT 3
17223: PPUSH
17224: CALL_OW 272
17228: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
17229: LD_ADDR_VAR 0 8
17233: PUSH
17234: LD_VAR 0 6
17238: PPUSH
17239: LD_VAR 0 4
17243: PPUSH
17244: LD_INT 3
17246: PPUSH
17247: CALL_OW 273
17251: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
17252: LD_VAR 0 7
17256: PPUSH
17257: LD_VAR 0 8
17261: PPUSH
17262: CALL_OW 488
17266: NOT
17267: IFFALSE 17271
// continue ;
17269: GO 17203
// if HexInfo ( _x , _y ) = 0 then
17271: LD_VAR 0 7
17275: PPUSH
17276: LD_VAR 0 8
17280: PPUSH
17281: CALL_OW 428
17285: PUSH
17286: LD_INT 0
17288: EQUAL
17289: IFFALSE 17314
// begin ComMoveXY ( unit , _x , _y ) ;
17291: LD_VAR 0 1
17295: PPUSH
17296: LD_VAR 0 7
17300: PPUSH
17301: LD_VAR 0 8
17305: PPUSH
17306: CALL_OW 111
// exit ;
17310: POP
17311: POP
17312: GO 17318
// end ; end ;
17314: GO 17203
17316: POP
17317: POP
// end ;
17318: LD_VAR 0 3
17322: RET
// export function ScanBase ( side , base_area ) ; begin
17323: LD_INT 0
17325: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
17326: LD_ADDR_VAR 0 3
17330: PUSH
17331: LD_VAR 0 2
17335: PPUSH
17336: LD_INT 81
17338: PUSH
17339: LD_VAR 0 1
17343: PUSH
17344: EMPTY
17345: LIST
17346: LIST
17347: PPUSH
17348: CALL_OW 70
17352: ST_TO_ADDR
// end ;
17353: LD_VAR 0 3
17357: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
17358: LD_INT 0
17360: PPUSH
17361: PPUSH
17362: PPUSH
17363: PPUSH
// result := false ;
17364: LD_ADDR_VAR 0 2
17368: PUSH
17369: LD_INT 0
17371: ST_TO_ADDR
// side := GetSide ( unit ) ;
17372: LD_ADDR_VAR 0 3
17376: PUSH
17377: LD_VAR 0 1
17381: PPUSH
17382: CALL_OW 255
17386: ST_TO_ADDR
// nat := GetNation ( unit ) ;
17387: LD_ADDR_VAR 0 4
17391: PUSH
17392: LD_VAR 0 1
17396: PPUSH
17397: CALL_OW 248
17401: ST_TO_ADDR
// case nat of 1 :
17402: LD_VAR 0 4
17406: PUSH
17407: LD_INT 1
17409: DOUBLE
17410: EQUAL
17411: IFTRUE 17415
17413: GO 17426
17415: POP
// tech := tech_lassight ; 2 :
17416: LD_ADDR_VAR 0 5
17420: PUSH
17421: LD_INT 12
17423: ST_TO_ADDR
17424: GO 17465
17426: LD_INT 2
17428: DOUBLE
17429: EQUAL
17430: IFTRUE 17434
17432: GO 17445
17434: POP
// tech := tech_mortar ; 3 :
17435: LD_ADDR_VAR 0 5
17439: PUSH
17440: LD_INT 41
17442: ST_TO_ADDR
17443: GO 17465
17445: LD_INT 3
17447: DOUBLE
17448: EQUAL
17449: IFTRUE 17453
17451: GO 17464
17453: POP
// tech := tech_bazooka ; end ;
17454: LD_ADDR_VAR 0 5
17458: PUSH
17459: LD_INT 44
17461: ST_TO_ADDR
17462: GO 17465
17464: POP
// if Researched ( side , tech ) then
17465: LD_VAR 0 3
17469: PPUSH
17470: LD_VAR 0 5
17474: PPUSH
17475: CALL_OW 325
17479: IFFALSE 17506
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
17481: LD_ADDR_VAR 0 2
17485: PUSH
17486: LD_INT 5
17488: PUSH
17489: LD_INT 8
17491: PUSH
17492: LD_INT 9
17494: PUSH
17495: EMPTY
17496: LIST
17497: LIST
17498: LIST
17499: PUSH
17500: LD_VAR 0 4
17504: ARRAY
17505: ST_TO_ADDR
// end ;
17506: LD_VAR 0 2
17510: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
17511: LD_INT 0
17513: PPUSH
17514: PPUSH
17515: PPUSH
// if not mines then
17516: LD_VAR 0 2
17520: NOT
17521: IFFALSE 17525
// exit ;
17523: GO 17669
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17525: LD_ADDR_VAR 0 5
17529: PUSH
17530: LD_INT 81
17532: PUSH
17533: LD_VAR 0 1
17537: PUSH
17538: EMPTY
17539: LIST
17540: LIST
17541: PUSH
17542: LD_INT 3
17544: PUSH
17545: LD_INT 21
17547: PUSH
17548: LD_INT 3
17550: PUSH
17551: EMPTY
17552: LIST
17553: LIST
17554: PUSH
17555: EMPTY
17556: LIST
17557: LIST
17558: PUSH
17559: EMPTY
17560: LIST
17561: LIST
17562: PPUSH
17563: CALL_OW 69
17567: ST_TO_ADDR
// for i in mines do
17568: LD_ADDR_VAR 0 4
17572: PUSH
17573: LD_VAR 0 2
17577: PUSH
17578: FOR_IN
17579: IFFALSE 17667
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
17581: LD_VAR 0 4
17585: PUSH
17586: LD_INT 1
17588: ARRAY
17589: PPUSH
17590: LD_VAR 0 4
17594: PUSH
17595: LD_INT 2
17597: ARRAY
17598: PPUSH
17599: CALL_OW 458
17603: NOT
17604: IFFALSE 17608
// continue ;
17606: GO 17578
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
17608: LD_VAR 0 4
17612: PUSH
17613: LD_INT 1
17615: ARRAY
17616: PPUSH
17617: LD_VAR 0 4
17621: PUSH
17622: LD_INT 2
17624: ARRAY
17625: PPUSH
17626: CALL_OW 428
17630: PUSH
17631: LD_VAR 0 5
17635: IN
17636: IFFALSE 17665
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
17638: LD_VAR 0 4
17642: PUSH
17643: LD_INT 1
17645: ARRAY
17646: PPUSH
17647: LD_VAR 0 4
17651: PUSH
17652: LD_INT 2
17654: ARRAY
17655: PPUSH
17656: LD_VAR 0 1
17660: PPUSH
17661: CALL_OW 456
// end ;
17665: GO 17578
17667: POP
17668: POP
// end ;
17669: LD_VAR 0 3
17673: RET
// export function Count ( array ) ; begin
17674: LD_INT 0
17676: PPUSH
// result := array + 0 ;
17677: LD_ADDR_VAR 0 2
17681: PUSH
17682: LD_VAR 0 1
17686: PUSH
17687: LD_INT 0
17689: PLUS
17690: ST_TO_ADDR
// end ;
17691: LD_VAR 0 2
17695: RET
// export function IsEmpty ( building ) ; begin
17696: LD_INT 0
17698: PPUSH
// if not building then
17699: LD_VAR 0 1
17703: NOT
17704: IFFALSE 17708
// exit ;
17706: GO 17751
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
17708: LD_ADDR_VAR 0 2
17712: PUSH
17713: LD_VAR 0 1
17717: PUSH
17718: LD_INT 22
17720: PUSH
17721: LD_VAR 0 1
17725: PPUSH
17726: CALL_OW 255
17730: PUSH
17731: EMPTY
17732: LIST
17733: LIST
17734: PUSH
17735: LD_INT 58
17737: PUSH
17738: EMPTY
17739: LIST
17740: PUSH
17741: EMPTY
17742: LIST
17743: LIST
17744: PPUSH
17745: CALL_OW 69
17749: IN
17750: ST_TO_ADDR
// end ;
17751: LD_VAR 0 2
17755: RET
// export function IsNotFull ( building ) ; var places ; begin
17756: LD_INT 0
17758: PPUSH
17759: PPUSH
// if not building then
17760: LD_VAR 0 1
17764: NOT
17765: IFFALSE 17769
// exit ;
17767: GO 17797
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
17769: LD_ADDR_VAR 0 2
17773: PUSH
17774: LD_VAR 0 1
17778: PPUSH
17779: LD_INT 3
17781: PUSH
17782: LD_INT 62
17784: PUSH
17785: EMPTY
17786: LIST
17787: PUSH
17788: EMPTY
17789: LIST
17790: LIST
17791: PPUSH
17792: CALL_OW 72
17796: ST_TO_ADDR
// end ;
17797: LD_VAR 0 2
17801: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
17802: LD_INT 0
17804: PPUSH
17805: PPUSH
17806: PPUSH
17807: PPUSH
// tmp := [ ] ;
17808: LD_ADDR_VAR 0 3
17812: PUSH
17813: EMPTY
17814: ST_TO_ADDR
// list := [ ] ;
17815: LD_ADDR_VAR 0 5
17819: PUSH
17820: EMPTY
17821: ST_TO_ADDR
// for i = 16 to 25 do
17822: LD_ADDR_VAR 0 4
17826: PUSH
17827: DOUBLE
17828: LD_INT 16
17830: DEC
17831: ST_TO_ADDR
17832: LD_INT 25
17834: PUSH
17835: FOR_TO
17836: IFFALSE 17909
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
17838: LD_ADDR_VAR 0 3
17842: PUSH
17843: LD_VAR 0 3
17847: PUSH
17848: LD_INT 22
17850: PUSH
17851: LD_VAR 0 1
17855: PPUSH
17856: CALL_OW 255
17860: PUSH
17861: EMPTY
17862: LIST
17863: LIST
17864: PUSH
17865: LD_INT 91
17867: PUSH
17868: LD_VAR 0 1
17872: PUSH
17873: LD_INT 6
17875: PUSH
17876: EMPTY
17877: LIST
17878: LIST
17879: LIST
17880: PUSH
17881: LD_INT 30
17883: PUSH
17884: LD_VAR 0 4
17888: PUSH
17889: EMPTY
17890: LIST
17891: LIST
17892: PUSH
17893: EMPTY
17894: LIST
17895: LIST
17896: LIST
17897: PUSH
17898: EMPTY
17899: LIST
17900: PPUSH
17901: CALL_OW 69
17905: ADD
17906: ST_TO_ADDR
17907: GO 17835
17909: POP
17910: POP
// for i = 1 to tmp do
17911: LD_ADDR_VAR 0 4
17915: PUSH
17916: DOUBLE
17917: LD_INT 1
17919: DEC
17920: ST_TO_ADDR
17921: LD_VAR 0 3
17925: PUSH
17926: FOR_TO
17927: IFFALSE 18015
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
17929: LD_ADDR_VAR 0 5
17933: PUSH
17934: LD_VAR 0 5
17938: PUSH
17939: LD_VAR 0 3
17943: PUSH
17944: LD_VAR 0 4
17948: ARRAY
17949: PPUSH
17950: CALL_OW 266
17954: PUSH
17955: LD_VAR 0 3
17959: PUSH
17960: LD_VAR 0 4
17964: ARRAY
17965: PPUSH
17966: CALL_OW 250
17970: PUSH
17971: LD_VAR 0 3
17975: PUSH
17976: LD_VAR 0 4
17980: ARRAY
17981: PPUSH
17982: CALL_OW 251
17986: PUSH
17987: LD_VAR 0 3
17991: PUSH
17992: LD_VAR 0 4
17996: ARRAY
17997: PPUSH
17998: CALL_OW 254
18002: PUSH
18003: EMPTY
18004: LIST
18005: LIST
18006: LIST
18007: LIST
18008: PUSH
18009: EMPTY
18010: LIST
18011: ADD
18012: ST_TO_ADDR
18013: GO 17926
18015: POP
18016: POP
// result := list ;
18017: LD_ADDR_VAR 0 2
18021: PUSH
18022: LD_VAR 0 5
18026: ST_TO_ADDR
// end ;
18027: LD_VAR 0 2
18031: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
18032: LD_INT 0
18034: PPUSH
18035: PPUSH
18036: PPUSH
18037: PPUSH
18038: PPUSH
18039: PPUSH
18040: PPUSH
// if not factory then
18041: LD_VAR 0 1
18045: NOT
18046: IFFALSE 18050
// exit ;
18048: GO 18653
// if control = control_apeman then
18050: LD_VAR 0 4
18054: PUSH
18055: LD_INT 5
18057: EQUAL
18058: IFFALSE 18167
// begin tmp := UnitsInside ( factory ) ;
18060: LD_ADDR_VAR 0 8
18064: PUSH
18065: LD_VAR 0 1
18069: PPUSH
18070: CALL_OW 313
18074: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
18075: LD_VAR 0 8
18079: PPUSH
18080: LD_INT 25
18082: PUSH
18083: LD_INT 12
18085: PUSH
18086: EMPTY
18087: LIST
18088: LIST
18089: PPUSH
18090: CALL_OW 72
18094: NOT
18095: IFFALSE 18105
// control := control_manual ;
18097: LD_ADDR_VAR 0 4
18101: PUSH
18102: LD_INT 1
18104: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
18105: LD_ADDR_VAR 0 8
18109: PUSH
18110: LD_VAR 0 1
18114: PPUSH
18115: CALL 17802 0 1
18119: ST_TO_ADDR
// if tmp then
18120: LD_VAR 0 8
18124: IFFALSE 18167
// begin for i in tmp do
18126: LD_ADDR_VAR 0 7
18130: PUSH
18131: LD_VAR 0 8
18135: PUSH
18136: FOR_IN
18137: IFFALSE 18165
// if i [ 1 ] = b_ext_radio then
18139: LD_VAR 0 7
18143: PUSH
18144: LD_INT 1
18146: ARRAY
18147: PUSH
18148: LD_INT 22
18150: EQUAL
18151: IFFALSE 18163
// begin control := control_remote ;
18153: LD_ADDR_VAR 0 4
18157: PUSH
18158: LD_INT 2
18160: ST_TO_ADDR
// break ;
18161: GO 18165
// end ;
18163: GO 18136
18165: POP
18166: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
18167: LD_VAR 0 1
18171: PPUSH
18172: LD_VAR 0 2
18176: PPUSH
18177: LD_VAR 0 3
18181: PPUSH
18182: LD_VAR 0 4
18186: PPUSH
18187: LD_VAR 0 5
18191: PPUSH
18192: CALL_OW 448
18196: IFFALSE 18231
// begin result := [ chassis , engine , control , weapon ] ;
18198: LD_ADDR_VAR 0 6
18202: PUSH
18203: LD_VAR 0 2
18207: PUSH
18208: LD_VAR 0 3
18212: PUSH
18213: LD_VAR 0 4
18217: PUSH
18218: LD_VAR 0 5
18222: PUSH
18223: EMPTY
18224: LIST
18225: LIST
18226: LIST
18227: LIST
18228: ST_TO_ADDR
// exit ;
18229: GO 18653
// end ; _chassis := AvailableChassisList ( factory ) ;
18231: LD_ADDR_VAR 0 9
18235: PUSH
18236: LD_VAR 0 1
18240: PPUSH
18241: CALL_OW 475
18245: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
18246: LD_ADDR_VAR 0 11
18250: PUSH
18251: LD_VAR 0 1
18255: PPUSH
18256: CALL_OW 476
18260: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
18261: LD_ADDR_VAR 0 12
18265: PUSH
18266: LD_VAR 0 1
18270: PPUSH
18271: CALL_OW 477
18275: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
18276: LD_ADDR_VAR 0 10
18280: PUSH
18281: LD_VAR 0 1
18285: PPUSH
18286: CALL_OW 478
18290: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
18291: LD_VAR 0 9
18295: NOT
18296: IFTRUE 18305
18298: PUSH
18299: LD_VAR 0 11
18303: NOT
18304: OR
18305: IFTRUE 18314
18307: PUSH
18308: LD_VAR 0 12
18312: NOT
18313: OR
18314: IFTRUE 18323
18316: PUSH
18317: LD_VAR 0 10
18321: NOT
18322: OR
18323: IFFALSE 18358
// begin result := [ chassis , engine , control , weapon ] ;
18325: LD_ADDR_VAR 0 6
18329: PUSH
18330: LD_VAR 0 2
18334: PUSH
18335: LD_VAR 0 3
18339: PUSH
18340: LD_VAR 0 4
18344: PUSH
18345: LD_VAR 0 5
18349: PUSH
18350: EMPTY
18351: LIST
18352: LIST
18353: LIST
18354: LIST
18355: ST_TO_ADDR
// exit ;
18356: GO 18653
// end ; if not chassis in _chassis then
18358: LD_VAR 0 2
18362: PUSH
18363: LD_VAR 0 9
18367: IN
18368: NOT
18369: IFFALSE 18395
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
18371: LD_ADDR_VAR 0 2
18375: PUSH
18376: LD_VAR 0 9
18380: PUSH
18381: LD_INT 1
18383: PPUSH
18384: LD_VAR 0 9
18388: PPUSH
18389: CALL_OW 12
18393: ARRAY
18394: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
18395: LD_VAR 0 2
18399: PPUSH
18400: LD_VAR 0 3
18404: PPUSH
18405: CALL 18658 0 2
18409: NOT
18410: IFFALSE 18471
// repeat engine := _engine [ 1 ] ;
18412: LD_ADDR_VAR 0 3
18416: PUSH
18417: LD_VAR 0 11
18421: PUSH
18422: LD_INT 1
18424: ARRAY
18425: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
18426: LD_ADDR_VAR 0 11
18430: PUSH
18431: LD_VAR 0 11
18435: PPUSH
18436: LD_INT 1
18438: PPUSH
18439: CALL_OW 3
18443: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
18444: LD_VAR 0 2
18448: PPUSH
18449: LD_VAR 0 3
18453: PPUSH
18454: CALL 18658 0 2
18458: IFTRUE 18469
18460: PUSH
18461: LD_VAR 0 11
18465: PUSH
18466: EMPTY
18467: EQUAL
18468: OR
18469: IFFALSE 18412
// if not control in _control then
18471: LD_VAR 0 4
18475: PUSH
18476: LD_VAR 0 12
18480: IN
18481: NOT
18482: IFFALSE 18508
// control := _control [ rand ( 1 , _control ) ] ;
18484: LD_ADDR_VAR 0 4
18488: PUSH
18489: LD_VAR 0 12
18493: PUSH
18494: LD_INT 1
18496: PPUSH
18497: LD_VAR 0 12
18501: PPUSH
18502: CALL_OW 12
18506: ARRAY
18507: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
18508: LD_VAR 0 2
18512: PPUSH
18513: LD_VAR 0 5
18517: PPUSH
18518: CALL 18880 0 2
18522: NOT
18523: IFFALSE 18584
// repeat weapon := _weapon [ 1 ] ;
18525: LD_ADDR_VAR 0 5
18529: PUSH
18530: LD_VAR 0 10
18534: PUSH
18535: LD_INT 1
18537: ARRAY
18538: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
18539: LD_ADDR_VAR 0 10
18543: PUSH
18544: LD_VAR 0 10
18548: PPUSH
18549: LD_INT 1
18551: PPUSH
18552: CALL_OW 3
18556: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
18557: LD_VAR 0 2
18561: PPUSH
18562: LD_VAR 0 5
18566: PPUSH
18567: CALL 18880 0 2
18571: IFTRUE 18582
18573: PUSH
18574: LD_VAR 0 10
18578: PUSH
18579: EMPTY
18580: EQUAL
18581: OR
18582: IFFALSE 18525
// result := [ ] ;
18584: LD_ADDR_VAR 0 6
18588: PUSH
18589: EMPTY
18590: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
18591: LD_VAR 0 1
18595: PPUSH
18596: LD_VAR 0 2
18600: PPUSH
18601: LD_VAR 0 3
18605: PPUSH
18606: LD_VAR 0 4
18610: PPUSH
18611: LD_VAR 0 5
18615: PPUSH
18616: CALL_OW 448
18620: IFFALSE 18653
// result := [ chassis , engine , control , weapon ] ;
18622: LD_ADDR_VAR 0 6
18626: PUSH
18627: LD_VAR 0 2
18631: PUSH
18632: LD_VAR 0 3
18636: PUSH
18637: LD_VAR 0 4
18641: PUSH
18642: LD_VAR 0 5
18646: PUSH
18647: EMPTY
18648: LIST
18649: LIST
18650: LIST
18651: LIST
18652: ST_TO_ADDR
// end ;
18653: LD_VAR 0 6
18657: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
18658: LD_INT 0
18660: PPUSH
// if not chassis or not engine then
18661: LD_VAR 0 1
18665: NOT
18666: IFTRUE 18675
18668: PUSH
18669: LD_VAR 0 2
18673: NOT
18674: OR
18675: IFFALSE 18679
// exit ;
18677: GO 18875
// case engine of engine_solar :
18679: LD_VAR 0 2
18683: PUSH
18684: LD_INT 2
18686: DOUBLE
18687: EQUAL
18688: IFTRUE 18692
18690: GO 18730
18692: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
18693: LD_ADDR_VAR 0 3
18697: PUSH
18698: LD_INT 11
18700: PUSH
18701: LD_INT 12
18703: PUSH
18704: LD_INT 13
18706: PUSH
18707: LD_INT 14
18709: PUSH
18710: LD_INT 1
18712: PUSH
18713: LD_INT 2
18715: PUSH
18716: LD_INT 3
18718: PUSH
18719: EMPTY
18720: LIST
18721: LIST
18722: LIST
18723: LIST
18724: LIST
18725: LIST
18726: LIST
18727: ST_TO_ADDR
18728: GO 18859
18730: LD_INT 1
18732: DOUBLE
18733: EQUAL
18734: IFTRUE 18738
18736: GO 18800
18738: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
18739: LD_ADDR_VAR 0 3
18743: PUSH
18744: LD_INT 11
18746: PUSH
18747: LD_INT 12
18749: PUSH
18750: LD_INT 13
18752: PUSH
18753: LD_INT 14
18755: PUSH
18756: LD_INT 1
18758: PUSH
18759: LD_INT 2
18761: PUSH
18762: LD_INT 3
18764: PUSH
18765: LD_INT 4
18767: PUSH
18768: LD_INT 5
18770: PUSH
18771: LD_INT 21
18773: PUSH
18774: LD_INT 23
18776: PUSH
18777: LD_INT 22
18779: PUSH
18780: LD_INT 24
18782: PUSH
18783: EMPTY
18784: LIST
18785: LIST
18786: LIST
18787: LIST
18788: LIST
18789: LIST
18790: LIST
18791: LIST
18792: LIST
18793: LIST
18794: LIST
18795: LIST
18796: LIST
18797: ST_TO_ADDR
18798: GO 18859
18800: LD_INT 3
18802: DOUBLE
18803: EQUAL
18804: IFTRUE 18808
18806: GO 18858
18808: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
18809: LD_ADDR_VAR 0 3
18813: PUSH
18814: LD_INT 13
18816: PUSH
18817: LD_INT 14
18819: PUSH
18820: LD_INT 2
18822: PUSH
18823: LD_INT 3
18825: PUSH
18826: LD_INT 4
18828: PUSH
18829: LD_INT 5
18831: PUSH
18832: LD_INT 21
18834: PUSH
18835: LD_INT 22
18837: PUSH
18838: LD_INT 23
18840: PUSH
18841: LD_INT 24
18843: PUSH
18844: EMPTY
18845: LIST
18846: LIST
18847: LIST
18848: LIST
18849: LIST
18850: LIST
18851: LIST
18852: LIST
18853: LIST
18854: LIST
18855: ST_TO_ADDR
18856: GO 18859
18858: POP
// result := ( chassis in result ) ;
18859: LD_ADDR_VAR 0 3
18863: PUSH
18864: LD_VAR 0 1
18868: PUSH
18869: LD_VAR 0 3
18873: IN
18874: ST_TO_ADDR
// end ;
18875: LD_VAR 0 3
18879: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
18880: LD_INT 0
18882: PPUSH
// if not chassis or not weapon then
18883: LD_VAR 0 1
18887: NOT
18888: IFTRUE 18897
18890: PUSH
18891: LD_VAR 0 2
18895: NOT
18896: OR
18897: IFFALSE 18901
// exit ;
18899: GO 19961
// case weapon of us_machine_gun :
18901: LD_VAR 0 2
18905: PUSH
18906: LD_INT 2
18908: DOUBLE
18909: EQUAL
18910: IFTRUE 18914
18912: GO 18944
18914: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
18915: LD_ADDR_VAR 0 3
18919: PUSH
18920: LD_INT 1
18922: PUSH
18923: LD_INT 2
18925: PUSH
18926: LD_INT 3
18928: PUSH
18929: LD_INT 4
18931: PUSH
18932: LD_INT 5
18934: PUSH
18935: EMPTY
18936: LIST
18937: LIST
18938: LIST
18939: LIST
18940: LIST
18941: ST_TO_ADDR
18942: GO 19945
18944: LD_INT 3
18946: DOUBLE
18947: EQUAL
18948: IFTRUE 18952
18950: GO 18982
18952: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
18953: LD_ADDR_VAR 0 3
18957: PUSH
18958: LD_INT 1
18960: PUSH
18961: LD_INT 2
18963: PUSH
18964: LD_INT 3
18966: PUSH
18967: LD_INT 4
18969: PUSH
18970: LD_INT 5
18972: PUSH
18973: EMPTY
18974: LIST
18975: LIST
18976: LIST
18977: LIST
18978: LIST
18979: ST_TO_ADDR
18980: GO 19945
18982: LD_INT 11
18984: DOUBLE
18985: EQUAL
18986: IFTRUE 18990
18988: GO 19020
18990: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
18991: LD_ADDR_VAR 0 3
18995: PUSH
18996: LD_INT 1
18998: PUSH
18999: LD_INT 2
19001: PUSH
19002: LD_INT 3
19004: PUSH
19005: LD_INT 4
19007: PUSH
19008: LD_INT 5
19010: PUSH
19011: EMPTY
19012: LIST
19013: LIST
19014: LIST
19015: LIST
19016: LIST
19017: ST_TO_ADDR
19018: GO 19945
19020: LD_INT 4
19022: DOUBLE
19023: EQUAL
19024: IFTRUE 19028
19026: GO 19054
19028: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
19029: LD_ADDR_VAR 0 3
19033: PUSH
19034: LD_INT 2
19036: PUSH
19037: LD_INT 3
19039: PUSH
19040: LD_INT 4
19042: PUSH
19043: LD_INT 5
19045: PUSH
19046: EMPTY
19047: LIST
19048: LIST
19049: LIST
19050: LIST
19051: ST_TO_ADDR
19052: GO 19945
19054: LD_INT 5
19056: DOUBLE
19057: EQUAL
19058: IFTRUE 19062
19060: GO 19088
19062: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
19063: LD_ADDR_VAR 0 3
19067: PUSH
19068: LD_INT 2
19070: PUSH
19071: LD_INT 3
19073: PUSH
19074: LD_INT 4
19076: PUSH
19077: LD_INT 5
19079: PUSH
19080: EMPTY
19081: LIST
19082: LIST
19083: LIST
19084: LIST
19085: ST_TO_ADDR
19086: GO 19945
19088: LD_INT 9
19090: DOUBLE
19091: EQUAL
19092: IFTRUE 19096
19094: GO 19122
19096: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
19097: LD_ADDR_VAR 0 3
19101: PUSH
19102: LD_INT 2
19104: PUSH
19105: LD_INT 3
19107: PUSH
19108: LD_INT 4
19110: PUSH
19111: LD_INT 5
19113: PUSH
19114: EMPTY
19115: LIST
19116: LIST
19117: LIST
19118: LIST
19119: ST_TO_ADDR
19120: GO 19945
19122: LD_INT 7
19124: DOUBLE
19125: EQUAL
19126: IFTRUE 19130
19128: GO 19156
19130: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
19131: LD_ADDR_VAR 0 3
19135: PUSH
19136: LD_INT 2
19138: PUSH
19139: LD_INT 3
19141: PUSH
19142: LD_INT 4
19144: PUSH
19145: LD_INT 5
19147: PUSH
19148: EMPTY
19149: LIST
19150: LIST
19151: LIST
19152: LIST
19153: ST_TO_ADDR
19154: GO 19945
19156: LD_INT 12
19158: DOUBLE
19159: EQUAL
19160: IFTRUE 19164
19162: GO 19190
19164: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
19165: LD_ADDR_VAR 0 3
19169: PUSH
19170: LD_INT 2
19172: PUSH
19173: LD_INT 3
19175: PUSH
19176: LD_INT 4
19178: PUSH
19179: LD_INT 5
19181: PUSH
19182: EMPTY
19183: LIST
19184: LIST
19185: LIST
19186: LIST
19187: ST_TO_ADDR
19188: GO 19945
19190: LD_INT 13
19192: DOUBLE
19193: EQUAL
19194: IFTRUE 19198
19196: GO 19224
19198: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
19199: LD_ADDR_VAR 0 3
19203: PUSH
19204: LD_INT 2
19206: PUSH
19207: LD_INT 3
19209: PUSH
19210: LD_INT 4
19212: PUSH
19213: LD_INT 5
19215: PUSH
19216: EMPTY
19217: LIST
19218: LIST
19219: LIST
19220: LIST
19221: ST_TO_ADDR
19222: GO 19945
19224: LD_INT 14
19226: DOUBLE
19227: EQUAL
19228: IFTRUE 19232
19230: GO 19250
19232: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
19233: LD_ADDR_VAR 0 3
19237: PUSH
19238: LD_INT 4
19240: PUSH
19241: LD_INT 5
19243: PUSH
19244: EMPTY
19245: LIST
19246: LIST
19247: ST_TO_ADDR
19248: GO 19945
19250: LD_INT 6
19252: DOUBLE
19253: EQUAL
19254: IFTRUE 19258
19256: GO 19276
19258: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
19259: LD_ADDR_VAR 0 3
19263: PUSH
19264: LD_INT 4
19266: PUSH
19267: LD_INT 5
19269: PUSH
19270: EMPTY
19271: LIST
19272: LIST
19273: ST_TO_ADDR
19274: GO 19945
19276: LD_INT 10
19278: DOUBLE
19279: EQUAL
19280: IFTRUE 19284
19282: GO 19302
19284: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
19285: LD_ADDR_VAR 0 3
19289: PUSH
19290: LD_INT 4
19292: PUSH
19293: LD_INT 5
19295: PUSH
19296: EMPTY
19297: LIST
19298: LIST
19299: ST_TO_ADDR
19300: GO 19945
19302: LD_INT 22
19304: DOUBLE
19305: EQUAL
19306: IFTRUE 19310
19308: GO 19336
19310: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
19311: LD_ADDR_VAR 0 3
19315: PUSH
19316: LD_INT 11
19318: PUSH
19319: LD_INT 12
19321: PUSH
19322: LD_INT 13
19324: PUSH
19325: LD_INT 14
19327: PUSH
19328: EMPTY
19329: LIST
19330: LIST
19331: LIST
19332: LIST
19333: ST_TO_ADDR
19334: GO 19945
19336: LD_INT 23
19338: DOUBLE
19339: EQUAL
19340: IFTRUE 19344
19342: GO 19370
19344: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
19345: LD_ADDR_VAR 0 3
19349: PUSH
19350: LD_INT 11
19352: PUSH
19353: LD_INT 12
19355: PUSH
19356: LD_INT 13
19358: PUSH
19359: LD_INT 14
19361: PUSH
19362: EMPTY
19363: LIST
19364: LIST
19365: LIST
19366: LIST
19367: ST_TO_ADDR
19368: GO 19945
19370: LD_INT 24
19372: DOUBLE
19373: EQUAL
19374: IFTRUE 19378
19376: GO 19404
19378: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
19379: LD_ADDR_VAR 0 3
19383: PUSH
19384: LD_INT 11
19386: PUSH
19387: LD_INT 12
19389: PUSH
19390: LD_INT 13
19392: PUSH
19393: LD_INT 14
19395: PUSH
19396: EMPTY
19397: LIST
19398: LIST
19399: LIST
19400: LIST
19401: ST_TO_ADDR
19402: GO 19945
19404: LD_INT 30
19406: DOUBLE
19407: EQUAL
19408: IFTRUE 19412
19410: GO 19438
19412: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
19413: LD_ADDR_VAR 0 3
19417: PUSH
19418: LD_INT 11
19420: PUSH
19421: LD_INT 12
19423: PUSH
19424: LD_INT 13
19426: PUSH
19427: LD_INT 14
19429: PUSH
19430: EMPTY
19431: LIST
19432: LIST
19433: LIST
19434: LIST
19435: ST_TO_ADDR
19436: GO 19945
19438: LD_INT 25
19440: DOUBLE
19441: EQUAL
19442: IFTRUE 19446
19444: GO 19464
19446: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
19447: LD_ADDR_VAR 0 3
19451: PUSH
19452: LD_INT 13
19454: PUSH
19455: LD_INT 14
19457: PUSH
19458: EMPTY
19459: LIST
19460: LIST
19461: ST_TO_ADDR
19462: GO 19945
19464: LD_INT 27
19466: DOUBLE
19467: EQUAL
19468: IFTRUE 19472
19470: GO 19490
19472: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
19473: LD_ADDR_VAR 0 3
19477: PUSH
19478: LD_INT 13
19480: PUSH
19481: LD_INT 14
19483: PUSH
19484: EMPTY
19485: LIST
19486: LIST
19487: ST_TO_ADDR
19488: GO 19945
19490: LD_INT 92
19492: DOUBLE
19493: EQUAL
19494: IFTRUE 19498
19496: GO 19524
19498: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
19499: LD_ADDR_VAR 0 3
19503: PUSH
19504: LD_INT 11
19506: PUSH
19507: LD_INT 12
19509: PUSH
19510: LD_INT 13
19512: PUSH
19513: LD_INT 14
19515: PUSH
19516: EMPTY
19517: LIST
19518: LIST
19519: LIST
19520: LIST
19521: ST_TO_ADDR
19522: GO 19945
19524: LD_INT 28
19526: DOUBLE
19527: EQUAL
19528: IFTRUE 19532
19530: GO 19550
19532: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
19533: LD_ADDR_VAR 0 3
19537: PUSH
19538: LD_INT 13
19540: PUSH
19541: LD_INT 14
19543: PUSH
19544: EMPTY
19545: LIST
19546: LIST
19547: ST_TO_ADDR
19548: GO 19945
19550: LD_INT 29
19552: DOUBLE
19553: EQUAL
19554: IFTRUE 19558
19556: GO 19576
19558: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
19559: LD_ADDR_VAR 0 3
19563: PUSH
19564: LD_INT 13
19566: PUSH
19567: LD_INT 14
19569: PUSH
19570: EMPTY
19571: LIST
19572: LIST
19573: ST_TO_ADDR
19574: GO 19945
19576: LD_INT 31
19578: DOUBLE
19579: EQUAL
19580: IFTRUE 19584
19582: GO 19602
19584: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
19585: LD_ADDR_VAR 0 3
19589: PUSH
19590: LD_INT 13
19592: PUSH
19593: LD_INT 14
19595: PUSH
19596: EMPTY
19597: LIST
19598: LIST
19599: ST_TO_ADDR
19600: GO 19945
19602: LD_INT 26
19604: DOUBLE
19605: EQUAL
19606: IFTRUE 19610
19608: GO 19628
19610: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
19611: LD_ADDR_VAR 0 3
19615: PUSH
19616: LD_INT 13
19618: PUSH
19619: LD_INT 14
19621: PUSH
19622: EMPTY
19623: LIST
19624: LIST
19625: ST_TO_ADDR
19626: GO 19945
19628: LD_INT 42
19630: DOUBLE
19631: EQUAL
19632: IFTRUE 19636
19634: GO 19662
19636: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
19637: LD_ADDR_VAR 0 3
19641: PUSH
19642: LD_INT 21
19644: PUSH
19645: LD_INT 22
19647: PUSH
19648: LD_INT 23
19650: PUSH
19651: LD_INT 24
19653: PUSH
19654: EMPTY
19655: LIST
19656: LIST
19657: LIST
19658: LIST
19659: ST_TO_ADDR
19660: GO 19945
19662: LD_INT 43
19664: DOUBLE
19665: EQUAL
19666: IFTRUE 19670
19668: GO 19696
19670: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
19671: LD_ADDR_VAR 0 3
19675: PUSH
19676: LD_INT 21
19678: PUSH
19679: LD_INT 22
19681: PUSH
19682: LD_INT 23
19684: PUSH
19685: LD_INT 24
19687: PUSH
19688: EMPTY
19689: LIST
19690: LIST
19691: LIST
19692: LIST
19693: ST_TO_ADDR
19694: GO 19945
19696: LD_INT 44
19698: DOUBLE
19699: EQUAL
19700: IFTRUE 19704
19702: GO 19730
19704: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
19705: LD_ADDR_VAR 0 3
19709: PUSH
19710: LD_INT 21
19712: PUSH
19713: LD_INT 22
19715: PUSH
19716: LD_INT 23
19718: PUSH
19719: LD_INT 24
19721: PUSH
19722: EMPTY
19723: LIST
19724: LIST
19725: LIST
19726: LIST
19727: ST_TO_ADDR
19728: GO 19945
19730: LD_INT 45
19732: DOUBLE
19733: EQUAL
19734: IFTRUE 19738
19736: GO 19764
19738: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
19739: LD_ADDR_VAR 0 3
19743: PUSH
19744: LD_INT 21
19746: PUSH
19747: LD_INT 22
19749: PUSH
19750: LD_INT 23
19752: PUSH
19753: LD_INT 24
19755: PUSH
19756: EMPTY
19757: LIST
19758: LIST
19759: LIST
19760: LIST
19761: ST_TO_ADDR
19762: GO 19945
19764: LD_INT 49
19766: DOUBLE
19767: EQUAL
19768: IFTRUE 19772
19770: GO 19798
19772: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
19773: LD_ADDR_VAR 0 3
19777: PUSH
19778: LD_INT 21
19780: PUSH
19781: LD_INT 22
19783: PUSH
19784: LD_INT 23
19786: PUSH
19787: LD_INT 24
19789: PUSH
19790: EMPTY
19791: LIST
19792: LIST
19793: LIST
19794: LIST
19795: ST_TO_ADDR
19796: GO 19945
19798: LD_INT 51
19800: DOUBLE
19801: EQUAL
19802: IFTRUE 19806
19804: GO 19832
19806: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
19807: LD_ADDR_VAR 0 3
19811: PUSH
19812: LD_INT 21
19814: PUSH
19815: LD_INT 22
19817: PUSH
19818: LD_INT 23
19820: PUSH
19821: LD_INT 24
19823: PUSH
19824: EMPTY
19825: LIST
19826: LIST
19827: LIST
19828: LIST
19829: ST_TO_ADDR
19830: GO 19945
19832: LD_INT 52
19834: DOUBLE
19835: EQUAL
19836: IFTRUE 19840
19838: GO 19866
19840: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
19841: LD_ADDR_VAR 0 3
19845: PUSH
19846: LD_INT 21
19848: PUSH
19849: LD_INT 22
19851: PUSH
19852: LD_INT 23
19854: PUSH
19855: LD_INT 24
19857: PUSH
19858: EMPTY
19859: LIST
19860: LIST
19861: LIST
19862: LIST
19863: ST_TO_ADDR
19864: GO 19945
19866: LD_INT 53
19868: DOUBLE
19869: EQUAL
19870: IFTRUE 19874
19872: GO 19892
19874: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
19875: LD_ADDR_VAR 0 3
19879: PUSH
19880: LD_INT 23
19882: PUSH
19883: LD_INT 24
19885: PUSH
19886: EMPTY
19887: LIST
19888: LIST
19889: ST_TO_ADDR
19890: GO 19945
19892: LD_INT 46
19894: DOUBLE
19895: EQUAL
19896: IFTRUE 19900
19898: GO 19918
19900: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
19901: LD_ADDR_VAR 0 3
19905: PUSH
19906: LD_INT 23
19908: PUSH
19909: LD_INT 24
19911: PUSH
19912: EMPTY
19913: LIST
19914: LIST
19915: ST_TO_ADDR
19916: GO 19945
19918: LD_INT 47
19920: DOUBLE
19921: EQUAL
19922: IFTRUE 19926
19924: GO 19944
19926: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
19927: LD_ADDR_VAR 0 3
19931: PUSH
19932: LD_INT 23
19934: PUSH
19935: LD_INT 24
19937: PUSH
19938: EMPTY
19939: LIST
19940: LIST
19941: ST_TO_ADDR
19942: GO 19945
19944: POP
// result := ( chassis in result ) ;
19945: LD_ADDR_VAR 0 3
19949: PUSH
19950: LD_VAR 0 1
19954: PUSH
19955: LD_VAR 0 3
19959: IN
19960: ST_TO_ADDR
// end ;
19961: LD_VAR 0 3
19965: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
19966: LD_INT 0
19968: PPUSH
19969: PPUSH
19970: PPUSH
19971: PPUSH
19972: PPUSH
19973: PPUSH
19974: PPUSH
// result := array ;
19975: LD_ADDR_VAR 0 5
19979: PUSH
19980: LD_VAR 0 1
19984: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
19985: LD_VAR 0 1
19989: NOT
19990: IFTRUE 19999
19992: PUSH
19993: LD_VAR 0 2
19997: NOT
19998: OR
19999: IFTRUE 20008
20001: PUSH
20002: LD_VAR 0 3
20006: NOT
20007: OR
20008: IFTRUE 20022
20010: PUSH
20011: LD_VAR 0 2
20015: PUSH
20016: LD_VAR 0 1
20020: GREATER
20021: OR
20022: IFTRUE 20036
20024: PUSH
20025: LD_VAR 0 3
20029: PUSH
20030: LD_VAR 0 1
20034: GREATER
20035: OR
20036: IFFALSE 20040
// exit ;
20038: GO 20336
// if direction then
20040: LD_VAR 0 4
20044: IFFALSE 20108
// begin d := 1 ;
20046: LD_ADDR_VAR 0 9
20050: PUSH
20051: LD_INT 1
20053: ST_TO_ADDR
// if i_from > i_to then
20054: LD_VAR 0 2
20058: PUSH
20059: LD_VAR 0 3
20063: GREATER
20064: IFFALSE 20090
// length := ( array - i_from ) + i_to else
20066: LD_ADDR_VAR 0 11
20070: PUSH
20071: LD_VAR 0 1
20075: PUSH
20076: LD_VAR 0 2
20080: MINUS
20081: PUSH
20082: LD_VAR 0 3
20086: PLUS
20087: ST_TO_ADDR
20088: GO 20106
// length := i_to - i_from ;
20090: LD_ADDR_VAR 0 11
20094: PUSH
20095: LD_VAR 0 3
20099: PUSH
20100: LD_VAR 0 2
20104: MINUS
20105: ST_TO_ADDR
// end else
20106: GO 20169
// begin d := - 1 ;
20108: LD_ADDR_VAR 0 9
20112: PUSH
20113: LD_INT 1
20115: NEG
20116: ST_TO_ADDR
// if i_from > i_to then
20117: LD_VAR 0 2
20121: PUSH
20122: LD_VAR 0 3
20126: GREATER
20127: IFFALSE 20147
// length := i_from - i_to else
20129: LD_ADDR_VAR 0 11
20133: PUSH
20134: LD_VAR 0 2
20138: PUSH
20139: LD_VAR 0 3
20143: MINUS
20144: ST_TO_ADDR
20145: GO 20169
// length := ( array - i_to ) + i_from ;
20147: LD_ADDR_VAR 0 11
20151: PUSH
20152: LD_VAR 0 1
20156: PUSH
20157: LD_VAR 0 3
20161: MINUS
20162: PUSH
20163: LD_VAR 0 2
20167: PLUS
20168: ST_TO_ADDR
// end ; if not length then
20169: LD_VAR 0 11
20173: NOT
20174: IFFALSE 20178
// exit ;
20176: GO 20336
// tmp := array ;
20178: LD_ADDR_VAR 0 10
20182: PUSH
20183: LD_VAR 0 1
20187: ST_TO_ADDR
// for i = 1 to length do
20188: LD_ADDR_VAR 0 6
20192: PUSH
20193: DOUBLE
20194: LD_INT 1
20196: DEC
20197: ST_TO_ADDR
20198: LD_VAR 0 11
20202: PUSH
20203: FOR_TO
20204: IFFALSE 20324
// begin for j = 1 to array do
20206: LD_ADDR_VAR 0 7
20210: PUSH
20211: DOUBLE
20212: LD_INT 1
20214: DEC
20215: ST_TO_ADDR
20216: LD_VAR 0 1
20220: PUSH
20221: FOR_TO
20222: IFFALSE 20310
// begin k := j + d ;
20224: LD_ADDR_VAR 0 8
20228: PUSH
20229: LD_VAR 0 7
20233: PUSH
20234: LD_VAR 0 9
20238: PLUS
20239: ST_TO_ADDR
// if k > array then
20240: LD_VAR 0 8
20244: PUSH
20245: LD_VAR 0 1
20249: GREATER
20250: IFFALSE 20260
// k := 1 ;
20252: LD_ADDR_VAR 0 8
20256: PUSH
20257: LD_INT 1
20259: ST_TO_ADDR
// if not k then
20260: LD_VAR 0 8
20264: NOT
20265: IFFALSE 20277
// k := array ;
20267: LD_ADDR_VAR 0 8
20271: PUSH
20272: LD_VAR 0 1
20276: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
20277: LD_ADDR_VAR 0 10
20281: PUSH
20282: LD_VAR 0 10
20286: PPUSH
20287: LD_VAR 0 8
20291: PPUSH
20292: LD_VAR 0 1
20296: PUSH
20297: LD_VAR 0 7
20301: ARRAY
20302: PPUSH
20303: CALL_OW 1
20307: ST_TO_ADDR
// end ;
20308: GO 20221
20310: POP
20311: POP
// array := tmp ;
20312: LD_ADDR_VAR 0 1
20316: PUSH
20317: LD_VAR 0 10
20321: ST_TO_ADDR
// end ;
20322: GO 20203
20324: POP
20325: POP
// result := array ;
20326: LD_ADDR_VAR 0 5
20330: PUSH
20331: LD_VAR 0 1
20335: ST_TO_ADDR
// end ;
20336: LD_VAR 0 5
20340: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
20341: LD_INT 0
20343: PPUSH
20344: PPUSH
// result := 0 ;
20345: LD_ADDR_VAR 0 3
20349: PUSH
20350: LD_INT 0
20352: ST_TO_ADDR
// if not array or not value in array then
20353: LD_VAR 0 1
20357: NOT
20358: IFTRUE 20373
20360: PUSH
20361: LD_VAR 0 2
20365: PUSH
20366: LD_VAR 0 1
20370: IN
20371: NOT
20372: OR
20373: IFFALSE 20377
// exit ;
20375: GO 20431
// for i = 1 to array do
20377: LD_ADDR_VAR 0 4
20381: PUSH
20382: DOUBLE
20383: LD_INT 1
20385: DEC
20386: ST_TO_ADDR
20387: LD_VAR 0 1
20391: PUSH
20392: FOR_TO
20393: IFFALSE 20429
// if value = array [ i ] then
20395: LD_VAR 0 2
20399: PUSH
20400: LD_VAR 0 1
20404: PUSH
20405: LD_VAR 0 4
20409: ARRAY
20410: EQUAL
20411: IFFALSE 20427
// begin result := i ;
20413: LD_ADDR_VAR 0 3
20417: PUSH
20418: LD_VAR 0 4
20422: ST_TO_ADDR
// exit ;
20423: POP
20424: POP
20425: GO 20431
// end ;
20427: GO 20392
20429: POP
20430: POP
// end ;
20431: LD_VAR 0 3
20435: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
20436: LD_INT 0
20438: PPUSH
// vc_chassis := chassis ;
20439: LD_ADDR_OWVAR 37
20443: PUSH
20444: LD_VAR 0 1
20448: ST_TO_ADDR
// vc_engine := engine ;
20449: LD_ADDR_OWVAR 39
20453: PUSH
20454: LD_VAR 0 2
20458: ST_TO_ADDR
// vc_control := control ;
20459: LD_ADDR_OWVAR 38
20463: PUSH
20464: LD_VAR 0 3
20468: ST_TO_ADDR
// vc_weapon := weapon ;
20469: LD_ADDR_OWVAR 40
20473: PUSH
20474: LD_VAR 0 4
20478: ST_TO_ADDR
// vc_fuel_battery := fuel ;
20479: LD_ADDR_OWVAR 41
20483: PUSH
20484: LD_VAR 0 5
20488: ST_TO_ADDR
// end ;
20489: LD_VAR 0 6
20493: RET
// export function WantPlant ( unit ) ; var task ; begin
20494: LD_INT 0
20496: PPUSH
20497: PPUSH
// result := false ;
20498: LD_ADDR_VAR 0 2
20502: PUSH
20503: LD_INT 0
20505: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
20506: LD_ADDR_VAR 0 3
20510: PUSH
20511: LD_VAR 0 1
20515: PPUSH
20516: CALL_OW 437
20520: ST_TO_ADDR
// if task then
20521: LD_VAR 0 3
20525: IFFALSE 20553
// if task [ 1 ] [ 1 ] = p then
20527: LD_VAR 0 3
20531: PUSH
20532: LD_INT 1
20534: ARRAY
20535: PUSH
20536: LD_INT 1
20538: ARRAY
20539: PUSH
20540: LD_STRING p
20542: EQUAL
20543: IFFALSE 20553
// result := true ;
20545: LD_ADDR_VAR 0 2
20549: PUSH
20550: LD_INT 1
20552: ST_TO_ADDR
// end ;
20553: LD_VAR 0 2
20557: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
20558: LD_INT 0
20560: PPUSH
20561: PPUSH
20562: PPUSH
20563: PPUSH
// if pos < 1 then
20564: LD_VAR 0 2
20568: PUSH
20569: LD_INT 1
20571: LESS
20572: IFFALSE 20576
// exit ;
20574: GO 20879
// if pos = 1 then
20576: LD_VAR 0 2
20580: PUSH
20581: LD_INT 1
20583: EQUAL
20584: IFFALSE 20617
// result := Replace ( arr , pos [ 1 ] , value ) else
20586: LD_ADDR_VAR 0 4
20590: PUSH
20591: LD_VAR 0 1
20595: PPUSH
20596: LD_VAR 0 2
20600: PUSH
20601: LD_INT 1
20603: ARRAY
20604: PPUSH
20605: LD_VAR 0 3
20609: PPUSH
20610: CALL_OW 1
20614: ST_TO_ADDR
20615: GO 20879
// begin tmp := arr ;
20617: LD_ADDR_VAR 0 6
20621: PUSH
20622: LD_VAR 0 1
20626: ST_TO_ADDR
// s_arr := [ tmp ] ;
20627: LD_ADDR_VAR 0 7
20631: PUSH
20632: LD_VAR 0 6
20636: PUSH
20637: EMPTY
20638: LIST
20639: ST_TO_ADDR
// for i = 1 to pos - 1 do
20640: LD_ADDR_VAR 0 5
20644: PUSH
20645: DOUBLE
20646: LD_INT 1
20648: DEC
20649: ST_TO_ADDR
20650: LD_VAR 0 2
20654: PUSH
20655: LD_INT 1
20657: MINUS
20658: PUSH
20659: FOR_TO
20660: IFFALSE 20705
// begin tmp := tmp [ pos [ i ] ] ;
20662: LD_ADDR_VAR 0 6
20666: PUSH
20667: LD_VAR 0 6
20671: PUSH
20672: LD_VAR 0 2
20676: PUSH
20677: LD_VAR 0 5
20681: ARRAY
20682: ARRAY
20683: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
20684: LD_ADDR_VAR 0 7
20688: PUSH
20689: LD_VAR 0 7
20693: PUSH
20694: LD_VAR 0 6
20698: PUSH
20699: EMPTY
20700: LIST
20701: ADD
20702: ST_TO_ADDR
// end ;
20703: GO 20659
20705: POP
20706: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
20707: LD_ADDR_VAR 0 6
20711: PUSH
20712: LD_VAR 0 6
20716: PPUSH
20717: LD_VAR 0 2
20721: PUSH
20722: LD_VAR 0 2
20726: ARRAY
20727: PPUSH
20728: LD_VAR 0 3
20732: PPUSH
20733: CALL_OW 1
20737: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
20738: LD_ADDR_VAR 0 7
20742: PUSH
20743: LD_VAR 0 7
20747: PPUSH
20748: LD_VAR 0 7
20752: PPUSH
20753: LD_VAR 0 6
20757: PPUSH
20758: CALL_OW 1
20762: ST_TO_ADDR
// for i = s_arr downto 2 do
20763: LD_ADDR_VAR 0 5
20767: PUSH
20768: DOUBLE
20769: LD_VAR 0 7
20773: INC
20774: ST_TO_ADDR
20775: LD_INT 2
20777: PUSH
20778: FOR_DOWNTO
20779: IFFALSE 20863
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
20781: LD_ADDR_VAR 0 6
20785: PUSH
20786: LD_VAR 0 7
20790: PUSH
20791: LD_VAR 0 5
20795: PUSH
20796: LD_INT 1
20798: MINUS
20799: ARRAY
20800: PPUSH
20801: LD_VAR 0 2
20805: PUSH
20806: LD_VAR 0 5
20810: PUSH
20811: LD_INT 1
20813: MINUS
20814: ARRAY
20815: PPUSH
20816: LD_VAR 0 7
20820: PUSH
20821: LD_VAR 0 5
20825: ARRAY
20826: PPUSH
20827: CALL_OW 1
20831: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
20832: LD_ADDR_VAR 0 7
20836: PUSH
20837: LD_VAR 0 7
20841: PPUSH
20842: LD_VAR 0 5
20846: PUSH
20847: LD_INT 1
20849: MINUS
20850: PPUSH
20851: LD_VAR 0 6
20855: PPUSH
20856: CALL_OW 1
20860: ST_TO_ADDR
// end ;
20861: GO 20778
20863: POP
20864: POP
// result := s_arr [ 1 ] ;
20865: LD_ADDR_VAR 0 4
20869: PUSH
20870: LD_VAR 0 7
20874: PUSH
20875: LD_INT 1
20877: ARRAY
20878: ST_TO_ADDR
// end ; end ;
20879: LD_VAR 0 4
20883: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
20884: LD_INT 0
20886: PPUSH
20887: PPUSH
// if not list then
20888: LD_VAR 0 1
20892: NOT
20893: IFFALSE 20897
// exit ;
20895: GO 20988
// i := list [ pos1 ] ;
20897: LD_ADDR_VAR 0 5
20901: PUSH
20902: LD_VAR 0 1
20906: PUSH
20907: LD_VAR 0 2
20911: ARRAY
20912: ST_TO_ADDR
// if not i then
20913: LD_VAR 0 5
20917: NOT
20918: IFFALSE 20922
// exit ;
20920: GO 20988
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
20922: LD_ADDR_VAR 0 1
20926: PUSH
20927: LD_VAR 0 1
20931: PPUSH
20932: LD_VAR 0 2
20936: PPUSH
20937: LD_VAR 0 1
20941: PUSH
20942: LD_VAR 0 3
20946: ARRAY
20947: PPUSH
20948: CALL_OW 1
20952: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
20953: LD_ADDR_VAR 0 1
20957: PUSH
20958: LD_VAR 0 1
20962: PPUSH
20963: LD_VAR 0 3
20967: PPUSH
20968: LD_VAR 0 5
20972: PPUSH
20973: CALL_OW 1
20977: ST_TO_ADDR
// result := list ;
20978: LD_ADDR_VAR 0 4
20982: PUSH
20983: LD_VAR 0 1
20987: ST_TO_ADDR
// end ;
20988: LD_VAR 0 4
20992: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
20993: LD_INT 0
20995: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
20996: LD_ADDR_VAR 0 5
21000: PUSH
21001: LD_VAR 0 1
21005: PPUSH
21006: CALL_OW 250
21010: PPUSH
21011: LD_VAR 0 1
21015: PPUSH
21016: CALL_OW 251
21020: PPUSH
21021: LD_VAR 0 2
21025: PPUSH
21026: LD_VAR 0 3
21030: PPUSH
21031: LD_VAR 0 4
21035: PPUSH
21036: CALL 21418 0 5
21040: ST_TO_ADDR
// end ;
21041: LD_VAR 0 5
21045: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
21046: LD_INT 0
21048: PPUSH
21049: PPUSH
21050: PPUSH
21051: PPUSH
// if not list or not unit then
21052: LD_VAR 0 2
21056: NOT
21057: IFTRUE 21066
21059: PUSH
21060: LD_VAR 0 1
21064: NOT
21065: OR
21066: IFFALSE 21070
// exit ;
21068: GO 21413
// result := [ ] ;
21070: LD_ADDR_VAR 0 5
21074: PUSH
21075: EMPTY
21076: ST_TO_ADDR
// for i in list do
21077: LD_ADDR_VAR 0 6
21081: PUSH
21082: LD_VAR 0 2
21086: PUSH
21087: FOR_IN
21088: IFFALSE 21306
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
21090: LD_ADDR_VAR 0 8
21094: PUSH
21095: LD_VAR 0 1
21099: PPUSH
21100: LD_VAR 0 6
21104: PUSH
21105: LD_INT 1
21107: ARRAY
21108: PPUSH
21109: LD_VAR 0 6
21113: PUSH
21114: LD_INT 2
21116: ARRAY
21117: PPUSH
21118: CALL_OW 297
21122: ST_TO_ADDR
// if not Count ( result ) then
21123: LD_VAR 0 5
21127: PPUSH
21128: CALL 17674 0 1
21132: NOT
21133: IFFALSE 21166
// begin result := Join ( result , [ i , tmp ] ) ;
21135: LD_ADDR_VAR 0 5
21139: PUSH
21140: LD_VAR 0 5
21144: PPUSH
21145: LD_VAR 0 6
21149: PUSH
21150: LD_VAR 0 8
21154: PUSH
21155: EMPTY
21156: LIST
21157: LIST
21158: PPUSH
21159: CALL 53606 0 2
21163: ST_TO_ADDR
// continue ;
21164: GO 21087
// end ; if result [ result ] [ 2 ] <= tmp then
21166: LD_VAR 0 5
21170: PUSH
21171: LD_VAR 0 5
21175: ARRAY
21176: PUSH
21177: LD_INT 2
21179: ARRAY
21180: PUSH
21181: LD_VAR 0 8
21185: LESSEQUAL
21186: IFFALSE 21219
// result := Join ( result , [ i , tmp ] ) else
21188: LD_ADDR_VAR 0 5
21192: PUSH
21193: LD_VAR 0 5
21197: PPUSH
21198: LD_VAR 0 6
21202: PUSH
21203: LD_VAR 0 8
21207: PUSH
21208: EMPTY
21209: LIST
21210: LIST
21211: PPUSH
21212: CALL 53606 0 2
21216: ST_TO_ADDR
21217: GO 21304
// begin for j := 1 to Count ( result ) do
21219: LD_ADDR_VAR 0 7
21223: PUSH
21224: DOUBLE
21225: LD_INT 1
21227: DEC
21228: ST_TO_ADDR
21229: LD_VAR 0 5
21233: PPUSH
21234: CALL 17674 0 1
21238: PUSH
21239: FOR_TO
21240: IFFALSE 21302
// begin if tmp < result [ j ] [ 2 ] then
21242: LD_VAR 0 8
21246: PUSH
21247: LD_VAR 0 5
21251: PUSH
21252: LD_VAR 0 7
21256: ARRAY
21257: PUSH
21258: LD_INT 2
21260: ARRAY
21261: LESS
21262: IFFALSE 21300
// begin result := Insert ( result , j , [ i , tmp ] ) ;
21264: LD_ADDR_VAR 0 5
21268: PUSH
21269: LD_VAR 0 5
21273: PPUSH
21274: LD_VAR 0 7
21278: PPUSH
21279: LD_VAR 0 6
21283: PUSH
21284: LD_VAR 0 8
21288: PUSH
21289: EMPTY
21290: LIST
21291: LIST
21292: PPUSH
21293: CALL_OW 2
21297: ST_TO_ADDR
// break ;
21298: GO 21302
// end ; end ;
21300: GO 21239
21302: POP
21303: POP
// end ; end ;
21304: GO 21087
21306: POP
21307: POP
// if result and not asc then
21308: LD_VAR 0 5
21312: IFFALSE 21321
21314: PUSH
21315: LD_VAR 0 3
21319: NOT
21320: AND
21321: IFFALSE 21338
// result := ReverseArray ( result ) ;
21323: LD_ADDR_VAR 0 5
21327: PUSH
21328: LD_VAR 0 5
21332: PPUSH
21333: CALL 48696 0 1
21337: ST_TO_ADDR
// tmp := [ ] ;
21338: LD_ADDR_VAR 0 8
21342: PUSH
21343: EMPTY
21344: ST_TO_ADDR
// if mode then
21345: LD_VAR 0 4
21349: IFFALSE 21413
// begin for i := 1 to result do
21351: LD_ADDR_VAR 0 6
21355: PUSH
21356: DOUBLE
21357: LD_INT 1
21359: DEC
21360: ST_TO_ADDR
21361: LD_VAR 0 5
21365: PUSH
21366: FOR_TO
21367: IFFALSE 21401
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
21369: LD_ADDR_VAR 0 8
21373: PUSH
21374: LD_VAR 0 8
21378: PPUSH
21379: LD_VAR 0 5
21383: PUSH
21384: LD_VAR 0 6
21388: ARRAY
21389: PUSH
21390: LD_INT 1
21392: ARRAY
21393: PPUSH
21394: CALL 53606 0 2
21398: ST_TO_ADDR
21399: GO 21366
21401: POP
21402: POP
// result := tmp ;
21403: LD_ADDR_VAR 0 5
21407: PUSH
21408: LD_VAR 0 8
21412: ST_TO_ADDR
// end ; end ;
21413: LD_VAR 0 5
21417: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
21418: LD_INT 0
21420: PPUSH
21421: PPUSH
21422: PPUSH
21423: PPUSH
// if not list then
21424: LD_VAR 0 3
21428: NOT
21429: IFFALSE 21433
// exit ;
21431: GO 21823
// result := [ ] ;
21433: LD_ADDR_VAR 0 6
21437: PUSH
21438: EMPTY
21439: ST_TO_ADDR
// for i in list do
21440: LD_ADDR_VAR 0 7
21444: PUSH
21445: LD_VAR 0 3
21449: PUSH
21450: FOR_IN
21451: IFFALSE 21653
// begin tmp := GetDistUnitXY ( i , x , y ) ;
21453: LD_ADDR_VAR 0 9
21457: PUSH
21458: LD_VAR 0 7
21462: PPUSH
21463: LD_VAR 0 1
21467: PPUSH
21468: LD_VAR 0 2
21472: PPUSH
21473: CALL_OW 297
21477: ST_TO_ADDR
// if not result then
21478: LD_VAR 0 6
21482: NOT
21483: IFFALSE 21509
// result := [ [ i , tmp ] ] else
21485: LD_ADDR_VAR 0 6
21489: PUSH
21490: LD_VAR 0 7
21494: PUSH
21495: LD_VAR 0 9
21499: PUSH
21500: EMPTY
21501: LIST
21502: LIST
21503: PUSH
21504: EMPTY
21505: LIST
21506: ST_TO_ADDR
21507: GO 21651
// begin if result [ result ] [ 2 ] <= tmp then
21509: LD_VAR 0 6
21513: PUSH
21514: LD_VAR 0 6
21518: ARRAY
21519: PUSH
21520: LD_INT 2
21522: ARRAY
21523: PUSH
21524: LD_VAR 0 9
21528: LESSEQUAL
21529: IFFALSE 21571
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
21531: LD_ADDR_VAR 0 6
21535: PUSH
21536: LD_VAR 0 6
21540: PPUSH
21541: LD_VAR 0 6
21545: PUSH
21546: LD_INT 1
21548: PLUS
21549: PPUSH
21550: LD_VAR 0 7
21554: PUSH
21555: LD_VAR 0 9
21559: PUSH
21560: EMPTY
21561: LIST
21562: LIST
21563: PPUSH
21564: CALL_OW 2
21568: ST_TO_ADDR
21569: GO 21651
// for j := 1 to result do
21571: LD_ADDR_VAR 0 8
21575: PUSH
21576: DOUBLE
21577: LD_INT 1
21579: DEC
21580: ST_TO_ADDR
21581: LD_VAR 0 6
21585: PUSH
21586: FOR_TO
21587: IFFALSE 21649
// begin if tmp < result [ j ] [ 2 ] then
21589: LD_VAR 0 9
21593: PUSH
21594: LD_VAR 0 6
21598: PUSH
21599: LD_VAR 0 8
21603: ARRAY
21604: PUSH
21605: LD_INT 2
21607: ARRAY
21608: LESS
21609: IFFALSE 21647
// begin result := Insert ( result , j , [ i , tmp ] ) ;
21611: LD_ADDR_VAR 0 6
21615: PUSH
21616: LD_VAR 0 6
21620: PPUSH
21621: LD_VAR 0 8
21625: PPUSH
21626: LD_VAR 0 7
21630: PUSH
21631: LD_VAR 0 9
21635: PUSH
21636: EMPTY
21637: LIST
21638: LIST
21639: PPUSH
21640: CALL_OW 2
21644: ST_TO_ADDR
// break ;
21645: GO 21649
// end ; end ;
21647: GO 21586
21649: POP
21650: POP
// end ; end ;
21651: GO 21450
21653: POP
21654: POP
// if result and not asc then
21655: LD_VAR 0 6
21659: IFFALSE 21668
21661: PUSH
21662: LD_VAR 0 4
21666: NOT
21667: AND
21668: IFFALSE 21743
// begin tmp := result ;
21670: LD_ADDR_VAR 0 9
21674: PUSH
21675: LD_VAR 0 6
21679: ST_TO_ADDR
// for i = tmp downto 1 do
21680: LD_ADDR_VAR 0 7
21684: PUSH
21685: DOUBLE
21686: LD_VAR 0 9
21690: INC
21691: ST_TO_ADDR
21692: LD_INT 1
21694: PUSH
21695: FOR_DOWNTO
21696: IFFALSE 21741
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
21698: LD_ADDR_VAR 0 6
21702: PUSH
21703: LD_VAR 0 6
21707: PPUSH
21708: LD_VAR 0 9
21712: PUSH
21713: LD_VAR 0 7
21717: MINUS
21718: PUSH
21719: LD_INT 1
21721: PLUS
21722: PPUSH
21723: LD_VAR 0 9
21727: PUSH
21728: LD_VAR 0 7
21732: ARRAY
21733: PPUSH
21734: CALL_OW 1
21738: ST_TO_ADDR
21739: GO 21695
21741: POP
21742: POP
// end ; tmp := [ ] ;
21743: LD_ADDR_VAR 0 9
21747: PUSH
21748: EMPTY
21749: ST_TO_ADDR
// if mode then
21750: LD_VAR 0 5
21754: IFFALSE 21823
// begin for i = 1 to result do
21756: LD_ADDR_VAR 0 7
21760: PUSH
21761: DOUBLE
21762: LD_INT 1
21764: DEC
21765: ST_TO_ADDR
21766: LD_VAR 0 6
21770: PUSH
21771: FOR_TO
21772: IFFALSE 21811
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
21774: LD_ADDR_VAR 0 9
21778: PUSH
21779: LD_VAR 0 9
21783: PPUSH
21784: LD_VAR 0 7
21788: PPUSH
21789: LD_VAR 0 6
21793: PUSH
21794: LD_VAR 0 7
21798: ARRAY
21799: PUSH
21800: LD_INT 1
21802: ARRAY
21803: PPUSH
21804: CALL_OW 1
21808: ST_TO_ADDR
21809: GO 21771
21811: POP
21812: POP
// result := tmp ;
21813: LD_ADDR_VAR 0 6
21817: PUSH
21818: LD_VAR 0 9
21822: ST_TO_ADDR
// end ; end ;
21823: LD_VAR 0 6
21827: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
21828: LD_INT 0
21830: PPUSH
21831: PPUSH
21832: PPUSH
21833: PPUSH
21834: PPUSH
21835: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
21836: LD_ADDR_VAR 0 5
21840: PUSH
21841: LD_INT 0
21843: PUSH
21844: LD_INT 0
21846: PUSH
21847: LD_INT 0
21849: PUSH
21850: EMPTY
21851: PUSH
21852: EMPTY
21853: LIST
21854: LIST
21855: LIST
21856: LIST
21857: ST_TO_ADDR
// if not x or not y then
21858: LD_VAR 0 2
21862: NOT
21863: IFTRUE 21872
21865: PUSH
21866: LD_VAR 0 3
21870: NOT
21871: OR
21872: IFFALSE 21876
// exit ;
21874: GO 23532
// if not range then
21876: LD_VAR 0 4
21880: NOT
21881: IFFALSE 21891
// range := 10 ;
21883: LD_ADDR_VAR 0 4
21887: PUSH
21888: LD_INT 10
21890: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21891: LD_ADDR_VAR 0 8
21895: PUSH
21896: LD_INT 81
21898: PUSH
21899: LD_VAR 0 1
21903: PUSH
21904: EMPTY
21905: LIST
21906: LIST
21907: PUSH
21908: LD_INT 92
21910: PUSH
21911: LD_VAR 0 2
21915: PUSH
21916: LD_VAR 0 3
21920: PUSH
21921: LD_VAR 0 4
21925: PUSH
21926: EMPTY
21927: LIST
21928: LIST
21929: LIST
21930: LIST
21931: PUSH
21932: LD_INT 3
21934: PUSH
21935: LD_INT 21
21937: PUSH
21938: LD_INT 3
21940: PUSH
21941: EMPTY
21942: LIST
21943: LIST
21944: PUSH
21945: EMPTY
21946: LIST
21947: LIST
21948: PUSH
21949: EMPTY
21950: LIST
21951: LIST
21952: LIST
21953: PPUSH
21954: CALL_OW 69
21958: ST_TO_ADDR
// if not tmp then
21959: LD_VAR 0 8
21963: NOT
21964: IFFALSE 21968
// exit ;
21966: GO 23532
// for i in tmp do
21968: LD_ADDR_VAR 0 6
21972: PUSH
21973: LD_VAR 0 8
21977: PUSH
21978: FOR_IN
21979: IFFALSE 23507
// begin points := [ 0 , 0 , 0 ] ;
21981: LD_ADDR_VAR 0 9
21985: PUSH
21986: LD_INT 0
21988: PUSH
21989: LD_INT 0
21991: PUSH
21992: LD_INT 0
21994: PUSH
21995: EMPTY
21996: LIST
21997: LIST
21998: LIST
21999: ST_TO_ADDR
// bpoints := 1 ;
22000: LD_ADDR_VAR 0 10
22004: PUSH
22005: LD_INT 1
22007: ST_TO_ADDR
// case GetType ( i ) of unit_human :
22008: LD_VAR 0 6
22012: PPUSH
22013: CALL_OW 247
22017: PUSH
22018: LD_INT 1
22020: DOUBLE
22021: EQUAL
22022: IFTRUE 22026
22024: GO 22608
22026: POP
// begin if GetClass ( i ) = 1 then
22027: LD_VAR 0 6
22031: PPUSH
22032: CALL_OW 257
22036: PUSH
22037: LD_INT 1
22039: EQUAL
22040: IFFALSE 22061
// points := [ 10 , 5 , 3 ] ;
22042: LD_ADDR_VAR 0 9
22046: PUSH
22047: LD_INT 10
22049: PUSH
22050: LD_INT 5
22052: PUSH
22053: LD_INT 3
22055: PUSH
22056: EMPTY
22057: LIST
22058: LIST
22059: LIST
22060: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
22061: LD_VAR 0 6
22065: PPUSH
22066: CALL_OW 257
22070: PUSH
22071: LD_INT 2
22073: PUSH
22074: LD_INT 3
22076: PUSH
22077: LD_INT 4
22079: PUSH
22080: EMPTY
22081: LIST
22082: LIST
22083: LIST
22084: IN
22085: IFFALSE 22106
// points := [ 3 , 2 , 1 ] ;
22087: LD_ADDR_VAR 0 9
22091: PUSH
22092: LD_INT 3
22094: PUSH
22095: LD_INT 2
22097: PUSH
22098: LD_INT 1
22100: PUSH
22101: EMPTY
22102: LIST
22103: LIST
22104: LIST
22105: ST_TO_ADDR
// if GetClass ( i ) = 5 then
22106: LD_VAR 0 6
22110: PPUSH
22111: CALL_OW 257
22115: PUSH
22116: LD_INT 5
22118: EQUAL
22119: IFFALSE 22140
// points := [ 130 , 5 , 2 ] ;
22121: LD_ADDR_VAR 0 9
22125: PUSH
22126: LD_INT 130
22128: PUSH
22129: LD_INT 5
22131: PUSH
22132: LD_INT 2
22134: PUSH
22135: EMPTY
22136: LIST
22137: LIST
22138: LIST
22139: ST_TO_ADDR
// if GetClass ( i ) = 8 then
22140: LD_VAR 0 6
22144: PPUSH
22145: CALL_OW 257
22149: PUSH
22150: LD_INT 8
22152: EQUAL
22153: IFFALSE 22174
// points := [ 35 , 35 , 30 ] ;
22155: LD_ADDR_VAR 0 9
22159: PUSH
22160: LD_INT 35
22162: PUSH
22163: LD_INT 35
22165: PUSH
22166: LD_INT 30
22168: PUSH
22169: EMPTY
22170: LIST
22171: LIST
22172: LIST
22173: ST_TO_ADDR
// if GetClass ( i ) = 9 then
22174: LD_VAR 0 6
22178: PPUSH
22179: CALL_OW 257
22183: PUSH
22184: LD_INT 9
22186: EQUAL
22187: IFFALSE 22208
// points := [ 20 , 55 , 40 ] ;
22189: LD_ADDR_VAR 0 9
22193: PUSH
22194: LD_INT 20
22196: PUSH
22197: LD_INT 55
22199: PUSH
22200: LD_INT 40
22202: PUSH
22203: EMPTY
22204: LIST
22205: LIST
22206: LIST
22207: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
22208: LD_VAR 0 6
22212: PPUSH
22213: CALL_OW 257
22217: PUSH
22218: LD_INT 12
22220: PUSH
22221: LD_INT 16
22223: PUSH
22224: EMPTY
22225: LIST
22226: LIST
22227: IN
22228: IFFALSE 22249
// points := [ 5 , 3 , 2 ] ;
22230: LD_ADDR_VAR 0 9
22234: PUSH
22235: LD_INT 5
22237: PUSH
22238: LD_INT 3
22240: PUSH
22241: LD_INT 2
22243: PUSH
22244: EMPTY
22245: LIST
22246: LIST
22247: LIST
22248: ST_TO_ADDR
// if GetClass ( i ) = 17 then
22249: LD_VAR 0 6
22253: PPUSH
22254: CALL_OW 257
22258: PUSH
22259: LD_INT 17
22261: EQUAL
22262: IFFALSE 22283
// points := [ 100 , 50 , 75 ] ;
22264: LD_ADDR_VAR 0 9
22268: PUSH
22269: LD_INT 100
22271: PUSH
22272: LD_INT 50
22274: PUSH
22275: LD_INT 75
22277: PUSH
22278: EMPTY
22279: LIST
22280: LIST
22281: LIST
22282: ST_TO_ADDR
// if GetClass ( i ) = 15 then
22283: LD_VAR 0 6
22287: PPUSH
22288: CALL_OW 257
22292: PUSH
22293: LD_INT 15
22295: EQUAL
22296: IFFALSE 22317
// points := [ 10 , 5 , 3 ] ;
22298: LD_ADDR_VAR 0 9
22302: PUSH
22303: LD_INT 10
22305: PUSH
22306: LD_INT 5
22308: PUSH
22309: LD_INT 3
22311: PUSH
22312: EMPTY
22313: LIST
22314: LIST
22315: LIST
22316: ST_TO_ADDR
// if GetClass ( i ) = 14 then
22317: LD_VAR 0 6
22321: PPUSH
22322: CALL_OW 257
22326: PUSH
22327: LD_INT 14
22329: EQUAL
22330: IFFALSE 22351
// points := [ 10 , 0 , 0 ] ;
22332: LD_ADDR_VAR 0 9
22336: PUSH
22337: LD_INT 10
22339: PUSH
22340: LD_INT 0
22342: PUSH
22343: LD_INT 0
22345: PUSH
22346: EMPTY
22347: LIST
22348: LIST
22349: LIST
22350: ST_TO_ADDR
// if GetClass ( i ) = 11 then
22351: LD_VAR 0 6
22355: PPUSH
22356: CALL_OW 257
22360: PUSH
22361: LD_INT 11
22363: EQUAL
22364: IFFALSE 22385
// points := [ 30 , 10 , 5 ] ;
22366: LD_ADDR_VAR 0 9
22370: PUSH
22371: LD_INT 30
22373: PUSH
22374: LD_INT 10
22376: PUSH
22377: LD_INT 5
22379: PUSH
22380: EMPTY
22381: LIST
22382: LIST
22383: LIST
22384: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
22385: LD_VAR 0 1
22389: PPUSH
22390: LD_INT 5
22392: PPUSH
22393: CALL_OW 321
22397: PUSH
22398: LD_INT 2
22400: EQUAL
22401: IFFALSE 22418
// bpoints := bpoints * 1.8 ;
22403: LD_ADDR_VAR 0 10
22407: PUSH
22408: LD_VAR 0 10
22412: PUSH
22413: LD_REAL  1.80000000000000E+0000
22416: MUL
22417: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
22418: LD_VAR 0 6
22422: PPUSH
22423: CALL_OW 257
22427: PUSH
22428: LD_INT 1
22430: PUSH
22431: LD_INT 2
22433: PUSH
22434: LD_INT 3
22436: PUSH
22437: LD_INT 4
22439: PUSH
22440: EMPTY
22441: LIST
22442: LIST
22443: LIST
22444: LIST
22445: IN
22446: IFFALSE 22466
22448: PUSH
22449: LD_VAR 0 1
22453: PPUSH
22454: LD_INT 51
22456: PPUSH
22457: CALL_OW 321
22461: PUSH
22462: LD_INT 2
22464: EQUAL
22465: AND
22466: IFFALSE 22483
// bpoints := bpoints * 1.2 ;
22468: LD_ADDR_VAR 0 10
22472: PUSH
22473: LD_VAR 0 10
22477: PUSH
22478: LD_REAL  1.20000000000000E+0000
22481: MUL
22482: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
22483: LD_VAR 0 6
22487: PPUSH
22488: CALL_OW 257
22492: PUSH
22493: LD_INT 5
22495: PUSH
22496: LD_INT 7
22498: PUSH
22499: LD_INT 9
22501: PUSH
22502: EMPTY
22503: LIST
22504: LIST
22505: LIST
22506: IN
22507: IFFALSE 22527
22509: PUSH
22510: LD_VAR 0 1
22514: PPUSH
22515: LD_INT 52
22517: PPUSH
22518: CALL_OW 321
22522: PUSH
22523: LD_INT 2
22525: EQUAL
22526: AND
22527: IFFALSE 22544
// bpoints := bpoints * 1.5 ;
22529: LD_ADDR_VAR 0 10
22533: PUSH
22534: LD_VAR 0 10
22538: PUSH
22539: LD_REAL  1.50000000000000E+0000
22542: MUL
22543: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
22544: LD_VAR 0 1
22548: PPUSH
22549: LD_INT 66
22551: PPUSH
22552: CALL_OW 321
22556: PUSH
22557: LD_INT 2
22559: EQUAL
22560: IFFALSE 22577
// bpoints := bpoints * 1.1 ;
22562: LD_ADDR_VAR 0 10
22566: PUSH
22567: LD_VAR 0 10
22571: PUSH
22572: LD_REAL  1.10000000000000E+0000
22575: MUL
22576: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
22577: LD_ADDR_VAR 0 10
22581: PUSH
22582: LD_VAR 0 10
22586: PUSH
22587: LD_VAR 0 6
22591: PPUSH
22592: LD_INT 1
22594: PPUSH
22595: CALL_OW 259
22599: PUSH
22600: LD_REAL  1.15000000000000E+0000
22603: MUL
22604: MUL
22605: ST_TO_ADDR
// end ; unit_vehicle :
22606: GO 23436
22608: LD_INT 2
22610: DOUBLE
22611: EQUAL
22612: IFTRUE 22616
22614: GO 23424
22616: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
22617: LD_VAR 0 6
22621: PPUSH
22622: CALL_OW 264
22626: PUSH
22627: LD_INT 2
22629: PUSH
22630: LD_INT 42
22632: PUSH
22633: LD_INT 24
22635: PUSH
22636: EMPTY
22637: LIST
22638: LIST
22639: LIST
22640: IN
22641: IFFALSE 22662
// points := [ 25 , 5 , 3 ] ;
22643: LD_ADDR_VAR 0 9
22647: PUSH
22648: LD_INT 25
22650: PUSH
22651: LD_INT 5
22653: PUSH
22654: LD_INT 3
22656: PUSH
22657: EMPTY
22658: LIST
22659: LIST
22660: LIST
22661: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
22662: LD_VAR 0 6
22666: PPUSH
22667: CALL_OW 264
22671: PUSH
22672: LD_INT 4
22674: PUSH
22675: LD_INT 43
22677: PUSH
22678: LD_INT 25
22680: PUSH
22681: EMPTY
22682: LIST
22683: LIST
22684: LIST
22685: IN
22686: IFFALSE 22707
// points := [ 40 , 15 , 5 ] ;
22688: LD_ADDR_VAR 0 9
22692: PUSH
22693: LD_INT 40
22695: PUSH
22696: LD_INT 15
22698: PUSH
22699: LD_INT 5
22701: PUSH
22702: EMPTY
22703: LIST
22704: LIST
22705: LIST
22706: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
22707: LD_VAR 0 6
22711: PPUSH
22712: CALL_OW 264
22716: PUSH
22717: LD_INT 3
22719: PUSH
22720: LD_INT 23
22722: PUSH
22723: EMPTY
22724: LIST
22725: LIST
22726: IN
22727: IFFALSE 22748
// points := [ 7 , 25 , 8 ] ;
22729: LD_ADDR_VAR 0 9
22733: PUSH
22734: LD_INT 7
22736: PUSH
22737: LD_INT 25
22739: PUSH
22740: LD_INT 8
22742: PUSH
22743: EMPTY
22744: LIST
22745: LIST
22746: LIST
22747: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
22748: LD_VAR 0 6
22752: PPUSH
22753: CALL_OW 264
22757: PUSH
22758: LD_INT 5
22760: PUSH
22761: LD_INT 27
22763: PUSH
22764: LD_INT 44
22766: PUSH
22767: EMPTY
22768: LIST
22769: LIST
22770: LIST
22771: IN
22772: IFFALSE 22793
// points := [ 14 , 50 , 16 ] ;
22774: LD_ADDR_VAR 0 9
22778: PUSH
22779: LD_INT 14
22781: PUSH
22782: LD_INT 50
22784: PUSH
22785: LD_INT 16
22787: PUSH
22788: EMPTY
22789: LIST
22790: LIST
22791: LIST
22792: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
22793: LD_VAR 0 6
22797: PPUSH
22798: CALL_OW 264
22802: PUSH
22803: LD_INT 6
22805: PUSH
22806: LD_INT 46
22808: PUSH
22809: EMPTY
22810: LIST
22811: LIST
22812: IN
22813: IFFALSE 22834
// points := [ 32 , 120 , 70 ] ;
22815: LD_ADDR_VAR 0 9
22819: PUSH
22820: LD_INT 32
22822: PUSH
22823: LD_INT 120
22825: PUSH
22826: LD_INT 70
22828: PUSH
22829: EMPTY
22830: LIST
22831: LIST
22832: LIST
22833: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
22834: LD_VAR 0 6
22838: PPUSH
22839: CALL_OW 264
22843: PUSH
22844: LD_INT 7
22846: PUSH
22847: LD_INT 28
22849: PUSH
22850: LD_INT 45
22852: PUSH
22853: LD_INT 92
22855: PUSH
22856: EMPTY
22857: LIST
22858: LIST
22859: LIST
22860: LIST
22861: IN
22862: IFFALSE 22883
// points := [ 35 , 20 , 45 ] ;
22864: LD_ADDR_VAR 0 9
22868: PUSH
22869: LD_INT 35
22871: PUSH
22872: LD_INT 20
22874: PUSH
22875: LD_INT 45
22877: PUSH
22878: EMPTY
22879: LIST
22880: LIST
22881: LIST
22882: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
22883: LD_VAR 0 6
22887: PPUSH
22888: CALL_OW 264
22892: PUSH
22893: LD_INT 47
22895: PUSH
22896: EMPTY
22897: LIST
22898: IN
22899: IFFALSE 22920
// points := [ 67 , 45 , 75 ] ;
22901: LD_ADDR_VAR 0 9
22905: PUSH
22906: LD_INT 67
22908: PUSH
22909: LD_INT 45
22911: PUSH
22912: LD_INT 75
22914: PUSH
22915: EMPTY
22916: LIST
22917: LIST
22918: LIST
22919: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
22920: LD_VAR 0 6
22924: PPUSH
22925: CALL_OW 264
22929: PUSH
22930: LD_INT 26
22932: PUSH
22933: EMPTY
22934: LIST
22935: IN
22936: IFFALSE 22957
// points := [ 120 , 30 , 80 ] ;
22938: LD_ADDR_VAR 0 9
22942: PUSH
22943: LD_INT 120
22945: PUSH
22946: LD_INT 30
22948: PUSH
22949: LD_INT 80
22951: PUSH
22952: EMPTY
22953: LIST
22954: LIST
22955: LIST
22956: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
22957: LD_VAR 0 6
22961: PPUSH
22962: CALL_OW 264
22966: PUSH
22967: LD_INT 22
22969: PUSH
22970: EMPTY
22971: LIST
22972: IN
22973: IFFALSE 22994
// points := [ 40 , 1 , 1 ] ;
22975: LD_ADDR_VAR 0 9
22979: PUSH
22980: LD_INT 40
22982: PUSH
22983: LD_INT 1
22985: PUSH
22986: LD_INT 1
22988: PUSH
22989: EMPTY
22990: LIST
22991: LIST
22992: LIST
22993: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
22994: LD_VAR 0 6
22998: PPUSH
22999: CALL_OW 264
23003: PUSH
23004: LD_INT 29
23006: PUSH
23007: EMPTY
23008: LIST
23009: IN
23010: IFFALSE 23031
// points := [ 70 , 200 , 400 ] ;
23012: LD_ADDR_VAR 0 9
23016: PUSH
23017: LD_INT 70
23019: PUSH
23020: LD_INT 200
23022: PUSH
23023: LD_INT 400
23025: PUSH
23026: EMPTY
23027: LIST
23028: LIST
23029: LIST
23030: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
23031: LD_VAR 0 6
23035: PPUSH
23036: CALL_OW 264
23040: PUSH
23041: LD_INT 14
23043: PUSH
23044: LD_INT 53
23046: PUSH
23047: EMPTY
23048: LIST
23049: LIST
23050: IN
23051: IFFALSE 23072
// points := [ 40 , 10 , 20 ] ;
23053: LD_ADDR_VAR 0 9
23057: PUSH
23058: LD_INT 40
23060: PUSH
23061: LD_INT 10
23063: PUSH
23064: LD_INT 20
23066: PUSH
23067: EMPTY
23068: LIST
23069: LIST
23070: LIST
23071: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
23072: LD_VAR 0 6
23076: PPUSH
23077: CALL_OW 264
23081: PUSH
23082: LD_INT 9
23084: PUSH
23085: EMPTY
23086: LIST
23087: IN
23088: IFFALSE 23109
// points := [ 5 , 70 , 20 ] ;
23090: LD_ADDR_VAR 0 9
23094: PUSH
23095: LD_INT 5
23097: PUSH
23098: LD_INT 70
23100: PUSH
23101: LD_INT 20
23103: PUSH
23104: EMPTY
23105: LIST
23106: LIST
23107: LIST
23108: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
23109: LD_VAR 0 6
23113: PPUSH
23114: CALL_OW 264
23118: PUSH
23119: LD_INT 10
23121: PUSH
23122: EMPTY
23123: LIST
23124: IN
23125: IFFALSE 23146
// points := [ 35 , 110 , 70 ] ;
23127: LD_ADDR_VAR 0 9
23131: PUSH
23132: LD_INT 35
23134: PUSH
23135: LD_INT 110
23137: PUSH
23138: LD_INT 70
23140: PUSH
23141: EMPTY
23142: LIST
23143: LIST
23144: LIST
23145: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
23146: LD_VAR 0 6
23150: PPUSH
23151: CALL_OW 265
23155: PUSH
23156: LD_INT 25
23158: EQUAL
23159: IFFALSE 23180
// points := [ 80 , 65 , 100 ] ;
23161: LD_ADDR_VAR 0 9
23165: PUSH
23166: LD_INT 80
23168: PUSH
23169: LD_INT 65
23171: PUSH
23172: LD_INT 100
23174: PUSH
23175: EMPTY
23176: LIST
23177: LIST
23178: LIST
23179: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
23180: LD_VAR 0 6
23184: PPUSH
23185: CALL_OW 263
23189: PUSH
23190: LD_INT 1
23192: EQUAL
23193: IFFALSE 23228
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
23195: LD_ADDR_VAR 0 10
23199: PUSH
23200: LD_VAR 0 10
23204: PUSH
23205: LD_VAR 0 6
23209: PPUSH
23210: CALL_OW 311
23214: PPUSH
23215: LD_INT 3
23217: PPUSH
23218: CALL_OW 259
23222: PUSH
23223: LD_INT 4
23225: MUL
23226: MUL
23227: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
23228: LD_VAR 0 6
23232: PPUSH
23233: CALL_OW 263
23237: PUSH
23238: LD_INT 2
23240: EQUAL
23241: IFFALSE 23292
// begin j := IsControledBy ( i ) ;
23243: LD_ADDR_VAR 0 7
23247: PUSH
23248: LD_VAR 0 6
23252: PPUSH
23253: CALL_OW 312
23257: ST_TO_ADDR
// if j then
23258: LD_VAR 0 7
23262: IFFALSE 23292
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
23264: LD_ADDR_VAR 0 10
23268: PUSH
23269: LD_VAR 0 10
23273: PUSH
23274: LD_VAR 0 7
23278: PPUSH
23279: LD_INT 3
23281: PPUSH
23282: CALL_OW 259
23286: PUSH
23287: LD_INT 3
23289: MUL
23290: MUL
23291: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
23292: LD_VAR 0 6
23296: PPUSH
23297: CALL_OW 264
23301: PUSH
23302: LD_INT 5
23304: PUSH
23305: LD_INT 6
23307: PUSH
23308: LD_INT 46
23310: PUSH
23311: LD_INT 44
23313: PUSH
23314: LD_INT 47
23316: PUSH
23317: LD_INT 45
23319: PUSH
23320: LD_INT 28
23322: PUSH
23323: LD_INT 7
23325: PUSH
23326: LD_INT 27
23328: PUSH
23329: LD_INT 29
23331: PUSH
23332: EMPTY
23333: LIST
23334: LIST
23335: LIST
23336: LIST
23337: LIST
23338: LIST
23339: LIST
23340: LIST
23341: LIST
23342: LIST
23343: IN
23344: IFFALSE 23364
23346: PUSH
23347: LD_VAR 0 1
23351: PPUSH
23352: LD_INT 52
23354: PPUSH
23355: CALL_OW 321
23359: PUSH
23360: LD_INT 2
23362: EQUAL
23363: AND
23364: IFFALSE 23381
// bpoints := bpoints * 1.2 ;
23366: LD_ADDR_VAR 0 10
23370: PUSH
23371: LD_VAR 0 10
23375: PUSH
23376: LD_REAL  1.20000000000000E+0000
23379: MUL
23380: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
23381: LD_VAR 0 6
23385: PPUSH
23386: CALL_OW 264
23390: PUSH
23391: LD_INT 6
23393: PUSH
23394: LD_INT 46
23396: PUSH
23397: LD_INT 47
23399: PUSH
23400: EMPTY
23401: LIST
23402: LIST
23403: LIST
23404: IN
23405: IFFALSE 23422
// bpoints := bpoints * 1.2 ;
23407: LD_ADDR_VAR 0 10
23411: PUSH
23412: LD_VAR 0 10
23416: PUSH
23417: LD_REAL  1.20000000000000E+0000
23420: MUL
23421: ST_TO_ADDR
// end ; unit_building :
23422: GO 23436
23424: LD_INT 3
23426: DOUBLE
23427: EQUAL
23428: IFTRUE 23432
23430: GO 23435
23432: POP
// ; end ;
23433: GO 23436
23435: POP
// for j = 1 to 3 do
23436: LD_ADDR_VAR 0 7
23440: PUSH
23441: DOUBLE
23442: LD_INT 1
23444: DEC
23445: ST_TO_ADDR
23446: LD_INT 3
23448: PUSH
23449: FOR_TO
23450: IFFALSE 23503
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
23452: LD_ADDR_VAR 0 5
23456: PUSH
23457: LD_VAR 0 5
23461: PPUSH
23462: LD_VAR 0 7
23466: PPUSH
23467: LD_VAR 0 5
23471: PUSH
23472: LD_VAR 0 7
23476: ARRAY
23477: PUSH
23478: LD_VAR 0 9
23482: PUSH
23483: LD_VAR 0 7
23487: ARRAY
23488: PUSH
23489: LD_VAR 0 10
23493: MUL
23494: PLUS
23495: PPUSH
23496: CALL_OW 1
23500: ST_TO_ADDR
23501: GO 23449
23503: POP
23504: POP
// end ;
23505: GO 21978
23507: POP
23508: POP
// result := Replace ( result , 4 , tmp ) ;
23509: LD_ADDR_VAR 0 5
23513: PUSH
23514: LD_VAR 0 5
23518: PPUSH
23519: LD_INT 4
23521: PPUSH
23522: LD_VAR 0 8
23526: PPUSH
23527: CALL_OW 1
23531: ST_TO_ADDR
// end ;
23532: LD_VAR 0 5
23536: RET
// export function DangerAtRange ( unit , range ) ; begin
23537: LD_INT 0
23539: PPUSH
// if not unit then
23540: LD_VAR 0 1
23544: NOT
23545: IFFALSE 23549
// exit ;
23547: GO 23594
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
23549: LD_ADDR_VAR 0 3
23553: PUSH
23554: LD_VAR 0 1
23558: PPUSH
23559: CALL_OW 255
23563: PPUSH
23564: LD_VAR 0 1
23568: PPUSH
23569: CALL_OW 250
23573: PPUSH
23574: LD_VAR 0 1
23578: PPUSH
23579: CALL_OW 251
23583: PPUSH
23584: LD_VAR 0 2
23588: PPUSH
23589: CALL 21828 0 4
23593: ST_TO_ADDR
// end ;
23594: LD_VAR 0 3
23598: RET
// export function DangerInArea ( side , area ) ; begin
23599: LD_INT 0
23601: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
23602: LD_ADDR_VAR 0 3
23606: PUSH
23607: LD_VAR 0 2
23611: PPUSH
23612: LD_INT 81
23614: PUSH
23615: LD_VAR 0 1
23619: PUSH
23620: EMPTY
23621: LIST
23622: LIST
23623: PPUSH
23624: CALL_OW 70
23628: ST_TO_ADDR
// end ;
23629: LD_VAR 0 3
23633: RET
// export function IsExtension ( b ) ; begin
23634: LD_INT 0
23636: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
23637: LD_ADDR_VAR 0 2
23641: PUSH
23642: LD_VAR 0 1
23646: PUSH
23647: LD_INT 23
23649: PUSH
23650: LD_INT 20
23652: PUSH
23653: LD_INT 22
23655: PUSH
23656: LD_INT 17
23658: PUSH
23659: LD_INT 24
23661: PUSH
23662: LD_INT 21
23664: PUSH
23665: LD_INT 19
23667: PUSH
23668: LD_INT 16
23670: PUSH
23671: LD_INT 25
23673: PUSH
23674: LD_INT 18
23676: PUSH
23677: EMPTY
23678: LIST
23679: LIST
23680: LIST
23681: LIST
23682: LIST
23683: LIST
23684: LIST
23685: LIST
23686: LIST
23687: LIST
23688: IN
23689: ST_TO_ADDR
// end ;
23690: LD_VAR 0 2
23694: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
23695: LD_INT 0
23697: PPUSH
23698: PPUSH
23699: PPUSH
// result := [ ] ;
23700: LD_ADDR_VAR 0 4
23704: PUSH
23705: EMPTY
23706: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
23707: LD_ADDR_VAR 0 5
23711: PUSH
23712: LD_VAR 0 2
23716: PPUSH
23717: LD_INT 21
23719: PUSH
23720: LD_INT 3
23722: PUSH
23723: EMPTY
23724: LIST
23725: LIST
23726: PPUSH
23727: CALL_OW 70
23731: ST_TO_ADDR
// if not tmp then
23732: LD_VAR 0 5
23736: NOT
23737: IFFALSE 23741
// exit ;
23739: GO 23805
// if checkLink then
23741: LD_VAR 0 3
23745: IFFALSE 23795
// begin for i in tmp do
23747: LD_ADDR_VAR 0 6
23751: PUSH
23752: LD_VAR 0 5
23756: PUSH
23757: FOR_IN
23758: IFFALSE 23793
// if GetBase ( i ) <> base then
23760: LD_VAR 0 6
23764: PPUSH
23765: CALL_OW 274
23769: PUSH
23770: LD_VAR 0 1
23774: NONEQUAL
23775: IFFALSE 23791
// ComLinkToBase ( base , i ) ;
23777: LD_VAR 0 1
23781: PPUSH
23782: LD_VAR 0 6
23786: PPUSH
23787: CALL_OW 169
23791: GO 23757
23793: POP
23794: POP
// end ; result := tmp ;
23795: LD_ADDR_VAR 0 4
23799: PUSH
23800: LD_VAR 0 5
23804: ST_TO_ADDR
// end ;
23805: LD_VAR 0 4
23809: RET
// export function ComComplete ( units , b ) ; var i ; begin
23810: LD_INT 0
23812: PPUSH
23813: PPUSH
// if not units then
23814: LD_VAR 0 1
23818: NOT
23819: IFFALSE 23823
// exit ;
23821: GO 23913
// for i in units do
23823: LD_ADDR_VAR 0 4
23827: PUSH
23828: LD_VAR 0 1
23832: PUSH
23833: FOR_IN
23834: IFFALSE 23911
// if BuildingStatus ( b ) = bs_build then
23836: LD_VAR 0 2
23840: PPUSH
23841: CALL_OW 461
23845: PUSH
23846: LD_INT 1
23848: EQUAL
23849: IFFALSE 23909
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
23851: LD_VAR 0 4
23855: PPUSH
23856: LD_STRING h
23858: PUSH
23859: LD_VAR 0 2
23863: PPUSH
23864: CALL_OW 250
23868: PUSH
23869: LD_VAR 0 2
23873: PPUSH
23874: CALL_OW 251
23878: PUSH
23879: LD_VAR 0 2
23883: PUSH
23884: LD_INT 0
23886: PUSH
23887: LD_INT 0
23889: PUSH
23890: LD_INT 0
23892: PUSH
23893: EMPTY
23894: LIST
23895: LIST
23896: LIST
23897: LIST
23898: LIST
23899: LIST
23900: LIST
23901: PUSH
23902: EMPTY
23903: LIST
23904: PPUSH
23905: CALL_OW 446
23909: GO 23833
23911: POP
23912: POP
// end ;
23913: LD_VAR 0 3
23917: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
23918: LD_INT 0
23920: PPUSH
23921: PPUSH
23922: PPUSH
23923: PPUSH
23924: PPUSH
23925: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
23926: LD_VAR 0 1
23930: NOT
23931: IFTRUE 23948
23933: PUSH
23934: LD_VAR 0 1
23938: PPUSH
23939: CALL_OW 263
23943: PUSH
23944: LD_INT 2
23946: NONEQUAL
23947: OR
23948: IFFALSE 23952
// exit ;
23950: GO 24268
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
23952: LD_ADDR_VAR 0 6
23956: PUSH
23957: LD_INT 22
23959: PUSH
23960: LD_VAR 0 1
23964: PPUSH
23965: CALL_OW 255
23969: PUSH
23970: EMPTY
23971: LIST
23972: LIST
23973: PUSH
23974: LD_INT 2
23976: PUSH
23977: LD_INT 30
23979: PUSH
23980: LD_INT 36
23982: PUSH
23983: EMPTY
23984: LIST
23985: LIST
23986: PUSH
23987: LD_INT 34
23989: PUSH
23990: LD_INT 31
23992: PUSH
23993: EMPTY
23994: LIST
23995: LIST
23996: PUSH
23997: EMPTY
23998: LIST
23999: LIST
24000: LIST
24001: PUSH
24002: EMPTY
24003: LIST
24004: LIST
24005: PPUSH
24006: CALL_OW 69
24010: ST_TO_ADDR
// if not tmp then
24011: LD_VAR 0 6
24015: NOT
24016: IFFALSE 24020
// exit ;
24018: GO 24268
// result := [ ] ;
24020: LD_ADDR_VAR 0 2
24024: PUSH
24025: EMPTY
24026: ST_TO_ADDR
// for i in tmp do
24027: LD_ADDR_VAR 0 3
24031: PUSH
24032: LD_VAR 0 6
24036: PUSH
24037: FOR_IN
24038: IFFALSE 24109
// begin t := UnitsInside ( i ) ;
24040: LD_ADDR_VAR 0 4
24044: PUSH
24045: LD_VAR 0 3
24049: PPUSH
24050: CALL_OW 313
24054: ST_TO_ADDR
// if t then
24055: LD_VAR 0 4
24059: IFFALSE 24107
// for j in t do
24061: LD_ADDR_VAR 0 7
24065: PUSH
24066: LD_VAR 0 4
24070: PUSH
24071: FOR_IN
24072: IFFALSE 24105
// result := Replace ( result , result + 1 , j ) ;
24074: LD_ADDR_VAR 0 2
24078: PUSH
24079: LD_VAR 0 2
24083: PPUSH
24084: LD_VAR 0 2
24088: PUSH
24089: LD_INT 1
24091: PLUS
24092: PPUSH
24093: LD_VAR 0 7
24097: PPUSH
24098: CALL_OW 1
24102: ST_TO_ADDR
24103: GO 24071
24105: POP
24106: POP
// end ;
24107: GO 24037
24109: POP
24110: POP
// if not result then
24111: LD_VAR 0 2
24115: NOT
24116: IFFALSE 24120
// exit ;
24118: GO 24268
// mech := result [ 1 ] ;
24120: LD_ADDR_VAR 0 5
24124: PUSH
24125: LD_VAR 0 2
24129: PUSH
24130: LD_INT 1
24132: ARRAY
24133: ST_TO_ADDR
// if result > 1 then
24134: LD_VAR 0 2
24138: PUSH
24139: LD_INT 1
24141: GREATER
24142: IFFALSE 24254
// begin for i = 2 to result do
24144: LD_ADDR_VAR 0 3
24148: PUSH
24149: DOUBLE
24150: LD_INT 2
24152: DEC
24153: ST_TO_ADDR
24154: LD_VAR 0 2
24158: PUSH
24159: FOR_TO
24160: IFFALSE 24252
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
24162: LD_ADDR_VAR 0 4
24166: PUSH
24167: LD_VAR 0 2
24171: PUSH
24172: LD_VAR 0 3
24176: ARRAY
24177: PPUSH
24178: LD_INT 3
24180: PPUSH
24181: CALL_OW 259
24185: PUSH
24186: LD_VAR 0 2
24190: PUSH
24191: LD_VAR 0 3
24195: ARRAY
24196: PPUSH
24197: CALL_OW 432
24201: MINUS
24202: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
24203: LD_VAR 0 4
24207: PUSH
24208: LD_VAR 0 5
24212: PPUSH
24213: LD_INT 3
24215: PPUSH
24216: CALL_OW 259
24220: PUSH
24221: LD_VAR 0 5
24225: PPUSH
24226: CALL_OW 432
24230: MINUS
24231: GREATEREQUAL
24232: IFFALSE 24250
// mech := result [ i ] ;
24234: LD_ADDR_VAR 0 5
24238: PUSH
24239: LD_VAR 0 2
24243: PUSH
24244: LD_VAR 0 3
24248: ARRAY
24249: ST_TO_ADDR
// end ;
24250: GO 24159
24252: POP
24253: POP
// end ; ComLinkTo ( vehicle , mech ) ;
24254: LD_VAR 0 1
24258: PPUSH
24259: LD_VAR 0 5
24263: PPUSH
24264: CALL_OW 135
// end ;
24268: LD_VAR 0 2
24272: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
24273: LD_INT 0
24275: PPUSH
24276: PPUSH
24277: PPUSH
24278: PPUSH
24279: PPUSH
24280: PPUSH
24281: PPUSH
24282: PPUSH
24283: PPUSH
24284: PPUSH
24285: PPUSH
24286: PPUSH
24287: PPUSH
// result := [ ] ;
24288: LD_ADDR_VAR 0 7
24292: PUSH
24293: EMPTY
24294: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
24295: LD_VAR 0 1
24299: PPUSH
24300: CALL_OW 266
24304: PUSH
24305: LD_INT 0
24307: PUSH
24308: LD_INT 1
24310: PUSH
24311: EMPTY
24312: LIST
24313: LIST
24314: IN
24315: NOT
24316: IFFALSE 24320
// exit ;
24318: GO 25960
// if name then
24320: LD_VAR 0 3
24324: IFFALSE 24340
// SetBName ( base_dep , name ) ;
24326: LD_VAR 0 1
24330: PPUSH
24331: LD_VAR 0 3
24335: PPUSH
24336: CALL_OW 500
// base := GetBase ( base_dep ) ;
24340: LD_ADDR_VAR 0 15
24344: PUSH
24345: LD_VAR 0 1
24349: PPUSH
24350: CALL_OW 274
24354: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
24355: LD_ADDR_VAR 0 16
24359: PUSH
24360: LD_VAR 0 1
24364: PPUSH
24365: CALL_OW 255
24369: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
24370: LD_ADDR_VAR 0 17
24374: PUSH
24375: LD_VAR 0 1
24379: PPUSH
24380: CALL_OW 248
24384: ST_TO_ADDR
// if sources then
24385: LD_VAR 0 5
24389: IFFALSE 24436
// for i = 1 to 3 do
24391: LD_ADDR_VAR 0 8
24395: PUSH
24396: DOUBLE
24397: LD_INT 1
24399: DEC
24400: ST_TO_ADDR
24401: LD_INT 3
24403: PUSH
24404: FOR_TO
24405: IFFALSE 24434
// AddResourceType ( base , i , sources [ i ] ) ;
24407: LD_VAR 0 15
24411: PPUSH
24412: LD_VAR 0 8
24416: PPUSH
24417: LD_VAR 0 5
24421: PUSH
24422: LD_VAR 0 8
24426: ARRAY
24427: PPUSH
24428: CALL_OW 276
24432: GO 24404
24434: POP
24435: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
24436: LD_ADDR_VAR 0 18
24440: PUSH
24441: LD_VAR 0 15
24445: PPUSH
24446: LD_VAR 0 2
24450: PPUSH
24451: LD_INT 1
24453: PPUSH
24454: CALL 23695 0 3
24458: ST_TO_ADDR
// InitHc ;
24459: CALL_OW 19
// InitUc ;
24463: CALL_OW 18
// uc_side := side ;
24467: LD_ADDR_OWVAR 20
24471: PUSH
24472: LD_VAR 0 16
24476: ST_TO_ADDR
// uc_nation := nation ;
24477: LD_ADDR_OWVAR 21
24481: PUSH
24482: LD_VAR 0 17
24486: ST_TO_ADDR
// if buildings then
24487: LD_VAR 0 18
24491: IFFALSE 25819
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
24493: LD_ADDR_VAR 0 19
24497: PUSH
24498: LD_VAR 0 18
24502: PPUSH
24503: LD_INT 2
24505: PUSH
24506: LD_INT 30
24508: PUSH
24509: LD_INT 29
24511: PUSH
24512: EMPTY
24513: LIST
24514: LIST
24515: PUSH
24516: LD_INT 30
24518: PUSH
24519: LD_INT 30
24521: PUSH
24522: EMPTY
24523: LIST
24524: LIST
24525: PUSH
24526: EMPTY
24527: LIST
24528: LIST
24529: LIST
24530: PPUSH
24531: CALL_OW 72
24535: ST_TO_ADDR
// if tmp then
24536: LD_VAR 0 19
24540: IFFALSE 24588
// for i in tmp do
24542: LD_ADDR_VAR 0 8
24546: PUSH
24547: LD_VAR 0 19
24551: PUSH
24552: FOR_IN
24553: IFFALSE 24586
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
24555: LD_VAR 0 8
24559: PPUSH
24560: CALL_OW 250
24564: PPUSH
24565: LD_VAR 0 8
24569: PPUSH
24570: CALL_OW 251
24574: PPUSH
24575: LD_VAR 0 16
24579: PPUSH
24580: CALL_OW 441
24584: GO 24552
24586: POP
24587: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
24588: LD_VAR 0 18
24592: PPUSH
24593: LD_INT 2
24595: PUSH
24596: LD_INT 30
24598: PUSH
24599: LD_INT 32
24601: PUSH
24602: EMPTY
24603: LIST
24604: LIST
24605: PUSH
24606: LD_INT 30
24608: PUSH
24609: LD_INT 33
24611: PUSH
24612: EMPTY
24613: LIST
24614: LIST
24615: PUSH
24616: EMPTY
24617: LIST
24618: LIST
24619: LIST
24620: PPUSH
24621: CALL_OW 72
24625: IFFALSE 24713
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
24627: LD_ADDR_VAR 0 8
24631: PUSH
24632: LD_VAR 0 18
24636: PPUSH
24637: LD_INT 2
24639: PUSH
24640: LD_INT 30
24642: PUSH
24643: LD_INT 32
24645: PUSH
24646: EMPTY
24647: LIST
24648: LIST
24649: PUSH
24650: LD_INT 30
24652: PUSH
24653: LD_INT 33
24655: PUSH
24656: EMPTY
24657: LIST
24658: LIST
24659: PUSH
24660: EMPTY
24661: LIST
24662: LIST
24663: LIST
24664: PPUSH
24665: CALL_OW 72
24669: PUSH
24670: FOR_IN
24671: IFFALSE 24711
// begin if not GetBWeapon ( i ) then
24673: LD_VAR 0 8
24677: PPUSH
24678: CALL_OW 269
24682: NOT
24683: IFFALSE 24709
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
24685: LD_VAR 0 8
24689: PPUSH
24690: LD_VAR 0 8
24694: PPUSH
24695: LD_VAR 0 2
24699: PPUSH
24700: CALL 25965 0 2
24704: PPUSH
24705: CALL_OW 431
// end ;
24709: GO 24670
24711: POP
24712: POP
// end ; for i = 1 to personel do
24713: LD_ADDR_VAR 0 8
24717: PUSH
24718: DOUBLE
24719: LD_INT 1
24721: DEC
24722: ST_TO_ADDR
24723: LD_VAR 0 6
24727: PUSH
24728: FOR_TO
24729: IFFALSE 25799
// begin if i > 4 then
24731: LD_VAR 0 8
24735: PUSH
24736: LD_INT 4
24738: GREATER
24739: IFFALSE 24743
// break ;
24741: GO 25799
// case i of 1 :
24743: LD_VAR 0 8
24747: PUSH
24748: LD_INT 1
24750: DOUBLE
24751: EQUAL
24752: IFTRUE 24756
24754: GO 24836
24756: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
24757: LD_ADDR_VAR 0 12
24761: PUSH
24762: LD_VAR 0 18
24766: PPUSH
24767: LD_INT 22
24769: PUSH
24770: LD_VAR 0 16
24774: PUSH
24775: EMPTY
24776: LIST
24777: LIST
24778: PUSH
24779: LD_INT 58
24781: PUSH
24782: EMPTY
24783: LIST
24784: PUSH
24785: LD_INT 2
24787: PUSH
24788: LD_INT 30
24790: PUSH
24791: LD_INT 32
24793: PUSH
24794: EMPTY
24795: LIST
24796: LIST
24797: PUSH
24798: LD_INT 30
24800: PUSH
24801: LD_INT 4
24803: PUSH
24804: EMPTY
24805: LIST
24806: LIST
24807: PUSH
24808: LD_INT 30
24810: PUSH
24811: LD_INT 5
24813: PUSH
24814: EMPTY
24815: LIST
24816: LIST
24817: PUSH
24818: EMPTY
24819: LIST
24820: LIST
24821: LIST
24822: LIST
24823: PUSH
24824: EMPTY
24825: LIST
24826: LIST
24827: LIST
24828: PPUSH
24829: CALL_OW 72
24833: ST_TO_ADDR
24834: GO 25058
24836: LD_INT 2
24838: DOUBLE
24839: EQUAL
24840: IFTRUE 24844
24842: GO 24906
24844: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
24845: LD_ADDR_VAR 0 12
24849: PUSH
24850: LD_VAR 0 18
24854: PPUSH
24855: LD_INT 22
24857: PUSH
24858: LD_VAR 0 16
24862: PUSH
24863: EMPTY
24864: LIST
24865: LIST
24866: PUSH
24867: LD_INT 2
24869: PUSH
24870: LD_INT 30
24872: PUSH
24873: LD_INT 0
24875: PUSH
24876: EMPTY
24877: LIST
24878: LIST
24879: PUSH
24880: LD_INT 30
24882: PUSH
24883: LD_INT 1
24885: PUSH
24886: EMPTY
24887: LIST
24888: LIST
24889: PUSH
24890: EMPTY
24891: LIST
24892: LIST
24893: LIST
24894: PUSH
24895: EMPTY
24896: LIST
24897: LIST
24898: PPUSH
24899: CALL_OW 72
24903: ST_TO_ADDR
24904: GO 25058
24906: LD_INT 3
24908: DOUBLE
24909: EQUAL
24910: IFTRUE 24914
24912: GO 24976
24914: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
24915: LD_ADDR_VAR 0 12
24919: PUSH
24920: LD_VAR 0 18
24924: PPUSH
24925: LD_INT 22
24927: PUSH
24928: LD_VAR 0 16
24932: PUSH
24933: EMPTY
24934: LIST
24935: LIST
24936: PUSH
24937: LD_INT 2
24939: PUSH
24940: LD_INT 30
24942: PUSH
24943: LD_INT 2
24945: PUSH
24946: EMPTY
24947: LIST
24948: LIST
24949: PUSH
24950: LD_INT 30
24952: PUSH
24953: LD_INT 3
24955: PUSH
24956: EMPTY
24957: LIST
24958: LIST
24959: PUSH
24960: EMPTY
24961: LIST
24962: LIST
24963: LIST
24964: PUSH
24965: EMPTY
24966: LIST
24967: LIST
24968: PPUSH
24969: CALL_OW 72
24973: ST_TO_ADDR
24974: GO 25058
24976: LD_INT 4
24978: DOUBLE
24979: EQUAL
24980: IFTRUE 24984
24982: GO 25057
24984: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
24985: LD_ADDR_VAR 0 12
24989: PUSH
24990: LD_VAR 0 18
24994: PPUSH
24995: LD_INT 22
24997: PUSH
24998: LD_VAR 0 16
25002: PUSH
25003: EMPTY
25004: LIST
25005: LIST
25006: PUSH
25007: LD_INT 2
25009: PUSH
25010: LD_INT 30
25012: PUSH
25013: LD_INT 6
25015: PUSH
25016: EMPTY
25017: LIST
25018: LIST
25019: PUSH
25020: LD_INT 30
25022: PUSH
25023: LD_INT 7
25025: PUSH
25026: EMPTY
25027: LIST
25028: LIST
25029: PUSH
25030: LD_INT 30
25032: PUSH
25033: LD_INT 8
25035: PUSH
25036: EMPTY
25037: LIST
25038: LIST
25039: PUSH
25040: EMPTY
25041: LIST
25042: LIST
25043: LIST
25044: LIST
25045: PUSH
25046: EMPTY
25047: LIST
25048: LIST
25049: PPUSH
25050: CALL_OW 72
25054: ST_TO_ADDR
25055: GO 25058
25057: POP
// if i = 1 then
25058: LD_VAR 0 8
25062: PUSH
25063: LD_INT 1
25065: EQUAL
25066: IFFALSE 25177
// begin tmp := [ ] ;
25068: LD_ADDR_VAR 0 19
25072: PUSH
25073: EMPTY
25074: ST_TO_ADDR
// for j in f do
25075: LD_ADDR_VAR 0 9
25079: PUSH
25080: LD_VAR 0 12
25084: PUSH
25085: FOR_IN
25086: IFFALSE 25159
// if GetBType ( j ) = b_bunker then
25088: LD_VAR 0 9
25092: PPUSH
25093: CALL_OW 266
25097: PUSH
25098: LD_INT 32
25100: EQUAL
25101: IFFALSE 25128
// tmp := Insert ( tmp , 1 , j ) else
25103: LD_ADDR_VAR 0 19
25107: PUSH
25108: LD_VAR 0 19
25112: PPUSH
25113: LD_INT 1
25115: PPUSH
25116: LD_VAR 0 9
25120: PPUSH
25121: CALL_OW 2
25125: ST_TO_ADDR
25126: GO 25157
// tmp := Insert ( tmp , tmp + 1 , j ) ;
25128: LD_ADDR_VAR 0 19
25132: PUSH
25133: LD_VAR 0 19
25137: PPUSH
25138: LD_VAR 0 19
25142: PUSH
25143: LD_INT 1
25145: PLUS
25146: PPUSH
25147: LD_VAR 0 9
25151: PPUSH
25152: CALL_OW 2
25156: ST_TO_ADDR
25157: GO 25085
25159: POP
25160: POP
// if tmp then
25161: LD_VAR 0 19
25165: IFFALSE 25177
// f := tmp ;
25167: LD_ADDR_VAR 0 12
25171: PUSH
25172: LD_VAR 0 19
25176: ST_TO_ADDR
// end ; x := personel [ i ] ;
25177: LD_ADDR_VAR 0 13
25181: PUSH
25182: LD_VAR 0 6
25186: PUSH
25187: LD_VAR 0 8
25191: ARRAY
25192: ST_TO_ADDR
// if x = - 1 then
25193: LD_VAR 0 13
25197: PUSH
25198: LD_INT 1
25200: NEG
25201: EQUAL
25202: IFFALSE 25413
// begin for j in f do
25204: LD_ADDR_VAR 0 9
25208: PUSH
25209: LD_VAR 0 12
25213: PUSH
25214: FOR_IN
25215: IFFALSE 25409
// repeat InitHc ;
25217: CALL_OW 19
// if GetBType ( j ) = b_barracks then
25221: LD_VAR 0 9
25225: PPUSH
25226: CALL_OW 266
25230: PUSH
25231: LD_INT 5
25233: EQUAL
25234: IFFALSE 25304
// begin if UnitsInside ( j ) < 3 then
25236: LD_VAR 0 9
25240: PPUSH
25241: CALL_OW 313
25245: PUSH
25246: LD_INT 3
25248: LESS
25249: IFFALSE 25285
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
25251: LD_INT 0
25253: PPUSH
25254: LD_INT 5
25256: PUSH
25257: LD_INT 8
25259: PUSH
25260: LD_INT 9
25262: PUSH
25263: EMPTY
25264: LIST
25265: LIST
25266: LIST
25267: PUSH
25268: LD_VAR 0 17
25272: ARRAY
25273: PPUSH
25274: LD_VAR 0 4
25278: PPUSH
25279: CALL_OW 380
25283: GO 25302
// PrepareHuman ( false , i , skill ) ;
25285: LD_INT 0
25287: PPUSH
25288: LD_VAR 0 8
25292: PPUSH
25293: LD_VAR 0 4
25297: PPUSH
25298: CALL_OW 380
// end else
25302: GO 25321
// PrepareHuman ( false , i , skill ) ;
25304: LD_INT 0
25306: PPUSH
25307: LD_VAR 0 8
25311: PPUSH
25312: LD_VAR 0 4
25316: PPUSH
25317: CALL_OW 380
// un := CreateHuman ;
25321: LD_ADDR_VAR 0 14
25325: PUSH
25326: CALL_OW 44
25330: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25331: LD_ADDR_VAR 0 7
25335: PUSH
25336: LD_VAR 0 7
25340: PPUSH
25341: LD_INT 1
25343: PPUSH
25344: LD_VAR 0 14
25348: PPUSH
25349: CALL_OW 2
25353: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
25354: LD_VAR 0 14
25358: PPUSH
25359: LD_VAR 0 9
25363: PPUSH
25364: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
25368: LD_VAR 0 9
25372: PPUSH
25373: CALL_OW 313
25377: PUSH
25378: LD_INT 6
25380: EQUAL
25381: IFTRUE 25405
25383: PUSH
25384: LD_VAR 0 9
25388: PPUSH
25389: CALL_OW 266
25393: PUSH
25394: LD_INT 32
25396: PUSH
25397: LD_INT 31
25399: PUSH
25400: EMPTY
25401: LIST
25402: LIST
25403: IN
25404: OR
25405: IFFALSE 25217
25407: GO 25214
25409: POP
25410: POP
// end else
25411: GO 25797
// for j = 1 to x do
25413: LD_ADDR_VAR 0 9
25417: PUSH
25418: DOUBLE
25419: LD_INT 1
25421: DEC
25422: ST_TO_ADDR
25423: LD_VAR 0 13
25427: PUSH
25428: FOR_TO
25429: IFFALSE 25795
// begin InitHc ;
25431: CALL_OW 19
// if not f then
25435: LD_VAR 0 12
25439: NOT
25440: IFFALSE 25529
// begin PrepareHuman ( false , i , skill ) ;
25442: LD_INT 0
25444: PPUSH
25445: LD_VAR 0 8
25449: PPUSH
25450: LD_VAR 0 4
25454: PPUSH
25455: CALL_OW 380
// un := CreateHuman ;
25459: LD_ADDR_VAR 0 14
25463: PUSH
25464: CALL_OW 44
25468: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25469: LD_ADDR_VAR 0 7
25473: PUSH
25474: LD_VAR 0 7
25478: PPUSH
25479: LD_INT 1
25481: PPUSH
25482: LD_VAR 0 14
25486: PPUSH
25487: CALL_OW 2
25491: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
25492: LD_VAR 0 14
25496: PPUSH
25497: LD_VAR 0 1
25501: PPUSH
25502: CALL_OW 250
25506: PPUSH
25507: LD_VAR 0 1
25511: PPUSH
25512: CALL_OW 251
25516: PPUSH
25517: LD_INT 10
25519: PPUSH
25520: LD_INT 0
25522: PPUSH
25523: CALL_OW 50
// continue ;
25527: GO 25428
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
25529: LD_VAR 0 12
25533: PUSH
25534: LD_INT 1
25536: ARRAY
25537: PPUSH
25538: CALL_OW 313
25542: IFFALSE 25570
25544: PUSH
25545: LD_VAR 0 12
25549: PUSH
25550: LD_INT 1
25552: ARRAY
25553: PPUSH
25554: CALL_OW 266
25558: PUSH
25559: LD_INT 32
25561: PUSH
25562: LD_INT 31
25564: PUSH
25565: EMPTY
25566: LIST
25567: LIST
25568: IN
25569: AND
25570: IFTRUE 25591
25572: PUSH
25573: LD_VAR 0 12
25577: PUSH
25578: LD_INT 1
25580: ARRAY
25581: PPUSH
25582: CALL_OW 313
25586: PUSH
25587: LD_INT 6
25589: EQUAL
25590: OR
25591: IFFALSE 25611
// f := Delete ( f , 1 ) ;
25593: LD_ADDR_VAR 0 12
25597: PUSH
25598: LD_VAR 0 12
25602: PPUSH
25603: LD_INT 1
25605: PPUSH
25606: CALL_OW 3
25610: ST_TO_ADDR
// if not f then
25611: LD_VAR 0 12
25615: NOT
25616: IFFALSE 25634
// begin x := x + 2 ;
25618: LD_ADDR_VAR 0 13
25622: PUSH
25623: LD_VAR 0 13
25627: PUSH
25628: LD_INT 2
25630: PLUS
25631: ST_TO_ADDR
// continue ;
25632: GO 25428
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
25634: LD_VAR 0 12
25638: PUSH
25639: LD_INT 1
25641: ARRAY
25642: PPUSH
25643: CALL_OW 266
25647: PUSH
25648: LD_INT 5
25650: EQUAL
25651: IFFALSE 25725
// begin if UnitsInside ( f [ 1 ] ) < 3 then
25653: LD_VAR 0 12
25657: PUSH
25658: LD_INT 1
25660: ARRAY
25661: PPUSH
25662: CALL_OW 313
25666: PUSH
25667: LD_INT 3
25669: LESS
25670: IFFALSE 25706
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
25672: LD_INT 0
25674: PPUSH
25675: LD_INT 5
25677: PUSH
25678: LD_INT 8
25680: PUSH
25681: LD_INT 9
25683: PUSH
25684: EMPTY
25685: LIST
25686: LIST
25687: LIST
25688: PUSH
25689: LD_VAR 0 17
25693: ARRAY
25694: PPUSH
25695: LD_VAR 0 4
25699: PPUSH
25700: CALL_OW 380
25704: GO 25723
// PrepareHuman ( false , i , skill ) ;
25706: LD_INT 0
25708: PPUSH
25709: LD_VAR 0 8
25713: PPUSH
25714: LD_VAR 0 4
25718: PPUSH
25719: CALL_OW 380
// end else
25723: GO 25742
// PrepareHuman ( false , i , skill ) ;
25725: LD_INT 0
25727: PPUSH
25728: LD_VAR 0 8
25732: PPUSH
25733: LD_VAR 0 4
25737: PPUSH
25738: CALL_OW 380
// un := CreateHuman ;
25742: LD_ADDR_VAR 0 14
25746: PUSH
25747: CALL_OW 44
25751: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25752: LD_ADDR_VAR 0 7
25756: PUSH
25757: LD_VAR 0 7
25761: PPUSH
25762: LD_INT 1
25764: PPUSH
25765: LD_VAR 0 14
25769: PPUSH
25770: CALL_OW 2
25774: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
25775: LD_VAR 0 14
25779: PPUSH
25780: LD_VAR 0 12
25784: PUSH
25785: LD_INT 1
25787: ARRAY
25788: PPUSH
25789: CALL_OW 52
// end ;
25793: GO 25428
25795: POP
25796: POP
// end ;
25797: GO 24728
25799: POP
25800: POP
// result := result ^ buildings ;
25801: LD_ADDR_VAR 0 7
25805: PUSH
25806: LD_VAR 0 7
25810: PUSH
25811: LD_VAR 0 18
25815: ADD
25816: ST_TO_ADDR
// end else
25817: GO 25960
// begin for i = 1 to personel do
25819: LD_ADDR_VAR 0 8
25823: PUSH
25824: DOUBLE
25825: LD_INT 1
25827: DEC
25828: ST_TO_ADDR
25829: LD_VAR 0 6
25833: PUSH
25834: FOR_TO
25835: IFFALSE 25958
// begin if i > 4 then
25837: LD_VAR 0 8
25841: PUSH
25842: LD_INT 4
25844: GREATER
25845: IFFALSE 25849
// break ;
25847: GO 25958
// x := personel [ i ] ;
25849: LD_ADDR_VAR 0 13
25853: PUSH
25854: LD_VAR 0 6
25858: PUSH
25859: LD_VAR 0 8
25863: ARRAY
25864: ST_TO_ADDR
// if x = - 1 then
25865: LD_VAR 0 13
25869: PUSH
25870: LD_INT 1
25872: NEG
25873: EQUAL
25874: IFFALSE 25878
// continue ;
25876: GO 25834
// PrepareHuman ( false , i , skill ) ;
25878: LD_INT 0
25880: PPUSH
25881: LD_VAR 0 8
25885: PPUSH
25886: LD_VAR 0 4
25890: PPUSH
25891: CALL_OW 380
// un := CreateHuman ;
25895: LD_ADDR_VAR 0 14
25899: PUSH
25900: CALL_OW 44
25904: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
25905: LD_VAR 0 14
25909: PPUSH
25910: LD_VAR 0 1
25914: PPUSH
25915: CALL_OW 250
25919: PPUSH
25920: LD_VAR 0 1
25924: PPUSH
25925: CALL_OW 251
25929: PPUSH
25930: LD_INT 10
25932: PPUSH
25933: LD_INT 0
25935: PPUSH
25936: CALL_OW 50
// result := result ^ un ;
25940: LD_ADDR_VAR 0 7
25944: PUSH
25945: LD_VAR 0 7
25949: PUSH
25950: LD_VAR 0 14
25954: ADD
25955: ST_TO_ADDR
// end ;
25956: GO 25834
25958: POP
25959: POP
// end ; end ;
25960: LD_VAR 0 7
25964: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
25965: LD_INT 0
25967: PPUSH
25968: PPUSH
25969: PPUSH
25970: PPUSH
25971: PPUSH
25972: PPUSH
25973: PPUSH
25974: PPUSH
25975: PPUSH
25976: PPUSH
25977: PPUSH
25978: PPUSH
25979: PPUSH
25980: PPUSH
25981: PPUSH
25982: PPUSH
// result := false ;
25983: LD_ADDR_VAR 0 3
25987: PUSH
25988: LD_INT 0
25990: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
25991: LD_VAR 0 1
25995: NOT
25996: IFTRUE 26021
25998: PUSH
25999: LD_VAR 0 1
26003: PPUSH
26004: CALL_OW 266
26008: PUSH
26009: LD_INT 32
26011: PUSH
26012: LD_INT 33
26014: PUSH
26015: EMPTY
26016: LIST
26017: LIST
26018: IN
26019: NOT
26020: OR
26021: IFFALSE 26025
// exit ;
26023: GO 27160
// nat := GetNation ( tower ) ;
26025: LD_ADDR_VAR 0 12
26029: PUSH
26030: LD_VAR 0 1
26034: PPUSH
26035: CALL_OW 248
26039: ST_TO_ADDR
// side := GetSide ( tower ) ;
26040: LD_ADDR_VAR 0 16
26044: PUSH
26045: LD_VAR 0 1
26049: PPUSH
26050: CALL_OW 255
26054: ST_TO_ADDR
// x := GetX ( tower ) ;
26055: LD_ADDR_VAR 0 10
26059: PUSH
26060: LD_VAR 0 1
26064: PPUSH
26065: CALL_OW 250
26069: ST_TO_ADDR
// y := GetY ( tower ) ;
26070: LD_ADDR_VAR 0 11
26074: PUSH
26075: LD_VAR 0 1
26079: PPUSH
26080: CALL_OW 251
26084: ST_TO_ADDR
// if not x or not y then
26085: LD_VAR 0 10
26089: NOT
26090: IFTRUE 26099
26092: PUSH
26093: LD_VAR 0 11
26097: NOT
26098: OR
26099: IFFALSE 26103
// exit ;
26101: GO 27160
// weapon := 0 ;
26103: LD_ADDR_VAR 0 18
26107: PUSH
26108: LD_INT 0
26110: ST_TO_ADDR
// fac_list := [ ] ;
26111: LD_ADDR_VAR 0 17
26115: PUSH
26116: EMPTY
26117: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
26118: LD_ADDR_VAR 0 6
26122: PUSH
26123: LD_VAR 0 1
26127: PPUSH
26128: CALL_OW 274
26132: PPUSH
26133: LD_VAR 0 2
26137: PPUSH
26138: LD_INT 0
26140: PPUSH
26141: CALL 23695 0 3
26145: PPUSH
26146: LD_INT 30
26148: PUSH
26149: LD_INT 3
26151: PUSH
26152: EMPTY
26153: LIST
26154: LIST
26155: PPUSH
26156: CALL_OW 72
26160: ST_TO_ADDR
// if not factories then
26161: LD_VAR 0 6
26165: NOT
26166: IFFALSE 26170
// exit ;
26168: GO 27160
// for i in factories do
26170: LD_ADDR_VAR 0 8
26174: PUSH
26175: LD_VAR 0 6
26179: PUSH
26180: FOR_IN
26181: IFFALSE 26206
// fac_list := fac_list union AvailableWeaponList ( i ) ;
26183: LD_ADDR_VAR 0 17
26187: PUSH
26188: LD_VAR 0 17
26192: PUSH
26193: LD_VAR 0 8
26197: PPUSH
26198: CALL_OW 478
26202: UNION
26203: ST_TO_ADDR
26204: GO 26180
26206: POP
26207: POP
// if not fac_list then
26208: LD_VAR 0 17
26212: NOT
26213: IFFALSE 26217
// exit ;
26215: GO 27160
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
26217: LD_ADDR_VAR 0 5
26221: PUSH
26222: LD_INT 4
26224: PUSH
26225: LD_INT 5
26227: PUSH
26228: LD_INT 9
26230: PUSH
26231: LD_INT 10
26233: PUSH
26234: LD_INT 6
26236: PUSH
26237: LD_INT 7
26239: PUSH
26240: LD_INT 11
26242: PUSH
26243: EMPTY
26244: LIST
26245: LIST
26246: LIST
26247: LIST
26248: LIST
26249: LIST
26250: LIST
26251: PUSH
26252: LD_INT 27
26254: PUSH
26255: LD_INT 28
26257: PUSH
26258: LD_INT 26
26260: PUSH
26261: LD_INT 30
26263: PUSH
26264: EMPTY
26265: LIST
26266: LIST
26267: LIST
26268: LIST
26269: PUSH
26270: LD_INT 43
26272: PUSH
26273: LD_INT 44
26275: PUSH
26276: LD_INT 46
26278: PUSH
26279: LD_INT 45
26281: PUSH
26282: LD_INT 47
26284: PUSH
26285: LD_INT 49
26287: PUSH
26288: EMPTY
26289: LIST
26290: LIST
26291: LIST
26292: LIST
26293: LIST
26294: LIST
26295: PUSH
26296: EMPTY
26297: LIST
26298: LIST
26299: LIST
26300: PUSH
26301: LD_VAR 0 12
26305: ARRAY
26306: ST_TO_ADDR
// list := list isect fac_list ;
26307: LD_ADDR_VAR 0 5
26311: PUSH
26312: LD_VAR 0 5
26316: PUSH
26317: LD_VAR 0 17
26321: ISECT
26322: ST_TO_ADDR
// if not list then
26323: LD_VAR 0 5
26327: NOT
26328: IFFALSE 26332
// exit ;
26330: GO 27160
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
26332: LD_VAR 0 12
26336: PUSH
26337: LD_INT 3
26339: EQUAL
26340: IFFALSE 26352
26342: PUSH
26343: LD_INT 49
26345: PUSH
26346: LD_VAR 0 5
26350: IN
26351: AND
26352: IFFALSE 26372
26354: PUSH
26355: LD_INT 31
26357: PPUSH
26358: LD_VAR 0 16
26362: PPUSH
26363: CALL_OW 321
26367: PUSH
26368: LD_INT 2
26370: EQUAL
26371: AND
26372: IFFALSE 26432
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
26374: LD_INT 22
26376: PUSH
26377: LD_VAR 0 16
26381: PUSH
26382: EMPTY
26383: LIST
26384: LIST
26385: PUSH
26386: LD_INT 35
26388: PUSH
26389: LD_INT 49
26391: PUSH
26392: EMPTY
26393: LIST
26394: LIST
26395: PUSH
26396: LD_INT 91
26398: PUSH
26399: LD_VAR 0 1
26403: PUSH
26404: LD_INT 10
26406: PUSH
26407: EMPTY
26408: LIST
26409: LIST
26410: LIST
26411: PUSH
26412: EMPTY
26413: LIST
26414: LIST
26415: LIST
26416: PPUSH
26417: CALL_OW 69
26421: NOT
26422: IFFALSE 26432
// weapon := ru_time_lapser ;
26424: LD_ADDR_VAR 0 18
26428: PUSH
26429: LD_INT 49
26431: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
26432: LD_VAR 0 12
26436: PUSH
26437: LD_INT 1
26439: PUSH
26440: LD_INT 2
26442: PUSH
26443: EMPTY
26444: LIST
26445: LIST
26446: IN
26447: IFFALSE 26471
26449: PUSH
26450: LD_INT 11
26452: PUSH
26453: LD_VAR 0 5
26457: IN
26458: IFTRUE 26470
26460: PUSH
26461: LD_INT 30
26463: PUSH
26464: LD_VAR 0 5
26468: IN
26469: OR
26470: AND
26471: IFFALSE 26491
26473: PUSH
26474: LD_INT 6
26476: PPUSH
26477: LD_VAR 0 16
26481: PPUSH
26482: CALL_OW 321
26486: PUSH
26487: LD_INT 2
26489: EQUAL
26490: AND
26491: IFFALSE 26658
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
26493: LD_INT 22
26495: PUSH
26496: LD_VAR 0 16
26500: PUSH
26501: EMPTY
26502: LIST
26503: LIST
26504: PUSH
26505: LD_INT 2
26507: PUSH
26508: LD_INT 35
26510: PUSH
26511: LD_INT 11
26513: PUSH
26514: EMPTY
26515: LIST
26516: LIST
26517: PUSH
26518: LD_INT 35
26520: PUSH
26521: LD_INT 30
26523: PUSH
26524: EMPTY
26525: LIST
26526: LIST
26527: PUSH
26528: EMPTY
26529: LIST
26530: LIST
26531: LIST
26532: PUSH
26533: LD_INT 91
26535: PUSH
26536: LD_VAR 0 1
26540: PUSH
26541: LD_INT 18
26543: PUSH
26544: EMPTY
26545: LIST
26546: LIST
26547: LIST
26548: PUSH
26549: EMPTY
26550: LIST
26551: LIST
26552: LIST
26553: PPUSH
26554: CALL_OW 69
26558: NOT
26559: IFFALSE 26635
26561: PUSH
26562: LD_INT 22
26564: PUSH
26565: LD_VAR 0 16
26569: PUSH
26570: EMPTY
26571: LIST
26572: LIST
26573: PUSH
26574: LD_INT 2
26576: PUSH
26577: LD_INT 30
26579: PUSH
26580: LD_INT 32
26582: PUSH
26583: EMPTY
26584: LIST
26585: LIST
26586: PUSH
26587: LD_INT 30
26589: PUSH
26590: LD_INT 33
26592: PUSH
26593: EMPTY
26594: LIST
26595: LIST
26596: PUSH
26597: EMPTY
26598: LIST
26599: LIST
26600: LIST
26601: PUSH
26602: LD_INT 91
26604: PUSH
26605: LD_VAR 0 1
26609: PUSH
26610: LD_INT 12
26612: PUSH
26613: EMPTY
26614: LIST
26615: LIST
26616: LIST
26617: PUSH
26618: EMPTY
26619: LIST
26620: LIST
26621: LIST
26622: PUSH
26623: EMPTY
26624: LIST
26625: PPUSH
26626: CALL_OW 69
26630: PUSH
26631: LD_INT 2
26633: GREATER
26634: AND
26635: IFFALSE 26658
// weapon := [ us_radar , ar_radar ] [ nat ] ;
26637: LD_ADDR_VAR 0 18
26641: PUSH
26642: LD_INT 11
26644: PUSH
26645: LD_INT 30
26647: PUSH
26648: EMPTY
26649: LIST
26650: LIST
26651: PUSH
26652: LD_VAR 0 12
26656: ARRAY
26657: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
26658: LD_VAR 0 18
26662: NOT
26663: IFFALSE 26683
26665: PUSH
26666: LD_INT 40
26668: PPUSH
26669: LD_VAR 0 16
26673: PPUSH
26674: CALL_OW 321
26678: PUSH
26679: LD_INT 2
26681: EQUAL
26682: AND
26683: IFFALSE 26719
26685: PUSH
26686: LD_INT 7
26688: PUSH
26689: LD_VAR 0 5
26693: IN
26694: IFTRUE 26706
26696: PUSH
26697: LD_INT 28
26699: PUSH
26700: LD_VAR 0 5
26704: IN
26705: OR
26706: IFTRUE 26718
26708: PUSH
26709: LD_INT 45
26711: PUSH
26712: LD_VAR 0 5
26716: IN
26717: OR
26718: AND
26719: IFFALSE 26973
// begin hex := GetHexInfo ( x , y ) ;
26721: LD_ADDR_VAR 0 4
26725: PUSH
26726: LD_VAR 0 10
26730: PPUSH
26731: LD_VAR 0 11
26735: PPUSH
26736: CALL_OW 546
26740: ST_TO_ADDR
// if hex [ 1 ] then
26741: LD_VAR 0 4
26745: PUSH
26746: LD_INT 1
26748: ARRAY
26749: IFFALSE 26753
// exit ;
26751: GO 27160
// height := hex [ 2 ] ;
26753: LD_ADDR_VAR 0 15
26757: PUSH
26758: LD_VAR 0 4
26762: PUSH
26763: LD_INT 2
26765: ARRAY
26766: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
26767: LD_ADDR_VAR 0 14
26771: PUSH
26772: LD_INT 0
26774: PUSH
26775: LD_INT 2
26777: PUSH
26778: LD_INT 3
26780: PUSH
26781: LD_INT 5
26783: PUSH
26784: EMPTY
26785: LIST
26786: LIST
26787: LIST
26788: LIST
26789: ST_TO_ADDR
// for i in tmp do
26790: LD_ADDR_VAR 0 8
26794: PUSH
26795: LD_VAR 0 14
26799: PUSH
26800: FOR_IN
26801: IFFALSE 26971
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
26803: LD_ADDR_VAR 0 9
26807: PUSH
26808: LD_VAR 0 10
26812: PPUSH
26813: LD_VAR 0 8
26817: PPUSH
26818: LD_INT 5
26820: PPUSH
26821: CALL_OW 272
26825: PUSH
26826: LD_VAR 0 11
26830: PPUSH
26831: LD_VAR 0 8
26835: PPUSH
26836: LD_INT 5
26838: PPUSH
26839: CALL_OW 273
26843: PUSH
26844: EMPTY
26845: LIST
26846: LIST
26847: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
26848: LD_VAR 0 9
26852: PUSH
26853: LD_INT 1
26855: ARRAY
26856: PPUSH
26857: LD_VAR 0 9
26861: PUSH
26862: LD_INT 2
26864: ARRAY
26865: PPUSH
26866: CALL_OW 488
26870: IFFALSE 26969
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
26872: LD_ADDR_VAR 0 4
26876: PUSH
26877: LD_VAR 0 9
26881: PUSH
26882: LD_INT 1
26884: ARRAY
26885: PPUSH
26886: LD_VAR 0 9
26890: PUSH
26891: LD_INT 2
26893: ARRAY
26894: PPUSH
26895: CALL_OW 546
26899: ST_TO_ADDR
// if hex [ 1 ] then
26900: LD_VAR 0 4
26904: PUSH
26905: LD_INT 1
26907: ARRAY
26908: IFFALSE 26912
// continue ;
26910: GO 26800
// h := hex [ 2 ] ;
26912: LD_ADDR_VAR 0 13
26916: PUSH
26917: LD_VAR 0 4
26921: PUSH
26922: LD_INT 2
26924: ARRAY
26925: ST_TO_ADDR
// if h + 7 < height then
26926: LD_VAR 0 13
26930: PUSH
26931: LD_INT 7
26933: PLUS
26934: PUSH
26935: LD_VAR 0 15
26939: LESS
26940: IFFALSE 26969
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
26942: LD_ADDR_VAR 0 18
26946: PUSH
26947: LD_INT 7
26949: PUSH
26950: LD_INT 28
26952: PUSH
26953: LD_INT 45
26955: PUSH
26956: EMPTY
26957: LIST
26958: LIST
26959: LIST
26960: PUSH
26961: LD_VAR 0 12
26965: ARRAY
26966: ST_TO_ADDR
// break ;
26967: GO 26971
// end ; end ; end ;
26969: GO 26800
26971: POP
26972: POP
// end ; if not weapon then
26973: LD_VAR 0 18
26977: NOT
26978: IFFALSE 27038
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
26980: LD_ADDR_VAR 0 5
26984: PUSH
26985: LD_VAR 0 5
26989: PUSH
26990: LD_INT 11
26992: PUSH
26993: LD_INT 30
26995: PUSH
26996: LD_INT 49
26998: PUSH
26999: EMPTY
27000: LIST
27001: LIST
27002: LIST
27003: DIFF
27004: ST_TO_ADDR
// if not list then
27005: LD_VAR 0 5
27009: NOT
27010: IFFALSE 27014
// exit ;
27012: GO 27160
// weapon := list [ rand ( 1 , list ) ] ;
27014: LD_ADDR_VAR 0 18
27018: PUSH
27019: LD_VAR 0 5
27023: PUSH
27024: LD_INT 1
27026: PPUSH
27027: LD_VAR 0 5
27031: PPUSH
27032: CALL_OW 12
27036: ARRAY
27037: ST_TO_ADDR
// end ; if weapon then
27038: LD_VAR 0 18
27042: IFFALSE 27160
// begin tmp := CostOfWeapon ( weapon ) ;
27044: LD_ADDR_VAR 0 14
27048: PUSH
27049: LD_VAR 0 18
27053: PPUSH
27054: CALL_OW 451
27058: ST_TO_ADDR
// j := GetBase ( tower ) ;
27059: LD_ADDR_VAR 0 9
27063: PUSH
27064: LD_VAR 0 1
27068: PPUSH
27069: CALL_OW 274
27073: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
27074: LD_VAR 0 9
27078: PPUSH
27079: LD_INT 1
27081: PPUSH
27082: CALL_OW 275
27086: PUSH
27087: LD_VAR 0 14
27091: PUSH
27092: LD_INT 1
27094: ARRAY
27095: GREATEREQUAL
27096: IFFALSE 27122
27098: PUSH
27099: LD_VAR 0 9
27103: PPUSH
27104: LD_INT 2
27106: PPUSH
27107: CALL_OW 275
27111: PUSH
27112: LD_VAR 0 14
27116: PUSH
27117: LD_INT 2
27119: ARRAY
27120: GREATEREQUAL
27121: AND
27122: IFFALSE 27148
27124: PUSH
27125: LD_VAR 0 9
27129: PPUSH
27130: LD_INT 3
27132: PPUSH
27133: CALL_OW 275
27137: PUSH
27138: LD_VAR 0 14
27142: PUSH
27143: LD_INT 3
27145: ARRAY
27146: GREATEREQUAL
27147: AND
27148: IFFALSE 27160
// result := weapon ;
27150: LD_ADDR_VAR 0 3
27154: PUSH
27155: LD_VAR 0 18
27159: ST_TO_ADDR
// end ; end ;
27160: LD_VAR 0 3
27164: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
27165: LD_INT 0
27167: PPUSH
27168: PPUSH
// result := true ;
27169: LD_ADDR_VAR 0 3
27173: PUSH
27174: LD_INT 1
27176: ST_TO_ADDR
// if array1 = array2 then
27177: LD_VAR 0 1
27181: PUSH
27182: LD_VAR 0 2
27186: EQUAL
27187: IFFALSE 27247
// begin for i = 1 to array1 do
27189: LD_ADDR_VAR 0 4
27193: PUSH
27194: DOUBLE
27195: LD_INT 1
27197: DEC
27198: ST_TO_ADDR
27199: LD_VAR 0 1
27203: PUSH
27204: FOR_TO
27205: IFFALSE 27243
// if array1 [ i ] <> array2 [ i ] then
27207: LD_VAR 0 1
27211: PUSH
27212: LD_VAR 0 4
27216: ARRAY
27217: PUSH
27218: LD_VAR 0 2
27222: PUSH
27223: LD_VAR 0 4
27227: ARRAY
27228: NONEQUAL
27229: IFFALSE 27241
// begin result := false ;
27231: LD_ADDR_VAR 0 3
27235: PUSH
27236: LD_INT 0
27238: ST_TO_ADDR
// break ;
27239: GO 27243
// end ;
27241: GO 27204
27243: POP
27244: POP
// end else
27245: GO 27255
// result := false ;
27247: LD_ADDR_VAR 0 3
27251: PUSH
27252: LD_INT 0
27254: ST_TO_ADDR
// end ;
27255: LD_VAR 0 3
27259: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
27260: LD_INT 0
27262: PPUSH
27263: PPUSH
// if not array1 or not array2 then
27264: LD_VAR 0 1
27268: NOT
27269: IFTRUE 27278
27271: PUSH
27272: LD_VAR 0 2
27276: NOT
27277: OR
27278: IFFALSE 27282
// exit ;
27280: GO 27346
// result := true ;
27282: LD_ADDR_VAR 0 3
27286: PUSH
27287: LD_INT 1
27289: ST_TO_ADDR
// for i = 1 to array1 do
27290: LD_ADDR_VAR 0 4
27294: PUSH
27295: DOUBLE
27296: LD_INT 1
27298: DEC
27299: ST_TO_ADDR
27300: LD_VAR 0 1
27304: PUSH
27305: FOR_TO
27306: IFFALSE 27344
// if array1 [ i ] <> array2 [ i ] then
27308: LD_VAR 0 1
27312: PUSH
27313: LD_VAR 0 4
27317: ARRAY
27318: PUSH
27319: LD_VAR 0 2
27323: PUSH
27324: LD_VAR 0 4
27328: ARRAY
27329: NONEQUAL
27330: IFFALSE 27342
// begin result := false ;
27332: LD_ADDR_VAR 0 3
27336: PUSH
27337: LD_INT 0
27339: ST_TO_ADDR
// break ;
27340: GO 27344
// end ;
27342: GO 27305
27344: POP
27345: POP
// end ;
27346: LD_VAR 0 3
27350: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
27351: LD_INT 0
27353: PPUSH
27354: PPUSH
27355: PPUSH
// pom := GetBase ( fac ) ;
27356: LD_ADDR_VAR 0 5
27360: PUSH
27361: LD_VAR 0 1
27365: PPUSH
27366: CALL_OW 274
27370: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
27371: LD_ADDR_VAR 0 4
27375: PUSH
27376: LD_VAR 0 2
27380: PUSH
27381: LD_INT 1
27383: ARRAY
27384: PPUSH
27385: LD_VAR 0 2
27389: PUSH
27390: LD_INT 2
27392: ARRAY
27393: PPUSH
27394: LD_VAR 0 2
27398: PUSH
27399: LD_INT 3
27401: ARRAY
27402: PPUSH
27403: LD_VAR 0 2
27407: PUSH
27408: LD_INT 4
27410: ARRAY
27411: PPUSH
27412: CALL_OW 449
27416: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27417: LD_ADDR_VAR 0 3
27421: PUSH
27422: LD_VAR 0 5
27426: PPUSH
27427: LD_INT 1
27429: PPUSH
27430: CALL_OW 275
27434: PUSH
27435: LD_VAR 0 4
27439: PUSH
27440: LD_INT 1
27442: ARRAY
27443: GREATEREQUAL
27444: IFFALSE 27470
27446: PUSH
27447: LD_VAR 0 5
27451: PPUSH
27452: LD_INT 2
27454: PPUSH
27455: CALL_OW 275
27459: PUSH
27460: LD_VAR 0 4
27464: PUSH
27465: LD_INT 2
27467: ARRAY
27468: GREATEREQUAL
27469: AND
27470: IFFALSE 27496
27472: PUSH
27473: LD_VAR 0 5
27477: PPUSH
27478: LD_INT 3
27480: PPUSH
27481: CALL_OW 275
27485: PUSH
27486: LD_VAR 0 4
27490: PUSH
27491: LD_INT 3
27493: ARRAY
27494: GREATEREQUAL
27495: AND
27496: ST_TO_ADDR
// end ;
27497: LD_VAR 0 3
27501: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
27502: LD_INT 0
27504: PPUSH
27505: PPUSH
27506: PPUSH
27507: PPUSH
// pom := GetBase ( building ) ;
27508: LD_ADDR_VAR 0 3
27512: PUSH
27513: LD_VAR 0 1
27517: PPUSH
27518: CALL_OW 274
27522: ST_TO_ADDR
// if not pom then
27523: LD_VAR 0 3
27527: NOT
27528: IFFALSE 27532
// exit ;
27530: GO 27706
// btype := GetBType ( building ) ;
27532: LD_ADDR_VAR 0 5
27536: PUSH
27537: LD_VAR 0 1
27541: PPUSH
27542: CALL_OW 266
27546: ST_TO_ADDR
// if btype = b_armoury then
27547: LD_VAR 0 5
27551: PUSH
27552: LD_INT 4
27554: EQUAL
27555: IFFALSE 27565
// btype := b_barracks ;
27557: LD_ADDR_VAR 0 5
27561: PUSH
27562: LD_INT 5
27564: ST_TO_ADDR
// if btype = b_depot then
27565: LD_VAR 0 5
27569: PUSH
27570: LD_INT 0
27572: EQUAL
27573: IFFALSE 27583
// btype := b_warehouse ;
27575: LD_ADDR_VAR 0 5
27579: PUSH
27580: LD_INT 1
27582: ST_TO_ADDR
// if btype = b_workshop then
27583: LD_VAR 0 5
27587: PUSH
27588: LD_INT 2
27590: EQUAL
27591: IFFALSE 27601
// btype := b_factory ;
27593: LD_ADDR_VAR 0 5
27597: PUSH
27598: LD_INT 3
27600: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
27601: LD_ADDR_VAR 0 4
27605: PUSH
27606: LD_VAR 0 5
27610: PPUSH
27611: LD_VAR 0 1
27615: PPUSH
27616: CALL_OW 248
27620: PPUSH
27621: CALL_OW 450
27625: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27626: LD_ADDR_VAR 0 2
27630: PUSH
27631: LD_VAR 0 3
27635: PPUSH
27636: LD_INT 1
27638: PPUSH
27639: CALL_OW 275
27643: PUSH
27644: LD_VAR 0 4
27648: PUSH
27649: LD_INT 1
27651: ARRAY
27652: GREATEREQUAL
27653: IFFALSE 27679
27655: PUSH
27656: LD_VAR 0 3
27660: PPUSH
27661: LD_INT 2
27663: PPUSH
27664: CALL_OW 275
27668: PUSH
27669: LD_VAR 0 4
27673: PUSH
27674: LD_INT 2
27676: ARRAY
27677: GREATEREQUAL
27678: AND
27679: IFFALSE 27705
27681: PUSH
27682: LD_VAR 0 3
27686: PPUSH
27687: LD_INT 3
27689: PPUSH
27690: CALL_OW 275
27694: PUSH
27695: LD_VAR 0 4
27699: PUSH
27700: LD_INT 3
27702: ARRAY
27703: GREATEREQUAL
27704: AND
27705: ST_TO_ADDR
// end ;
27706: LD_VAR 0 2
27710: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
27711: LD_INT 0
27713: PPUSH
27714: PPUSH
27715: PPUSH
// pom := GetBase ( building ) ;
27716: LD_ADDR_VAR 0 4
27720: PUSH
27721: LD_VAR 0 1
27725: PPUSH
27726: CALL_OW 274
27730: ST_TO_ADDR
// if not pom then
27731: LD_VAR 0 4
27735: NOT
27736: IFFALSE 27740
// exit ;
27738: GO 27845
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
27740: LD_ADDR_VAR 0 5
27744: PUSH
27745: LD_VAR 0 2
27749: PPUSH
27750: LD_VAR 0 1
27754: PPUSH
27755: CALL_OW 248
27759: PPUSH
27760: CALL_OW 450
27764: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27765: LD_ADDR_VAR 0 3
27769: PUSH
27770: LD_VAR 0 4
27774: PPUSH
27775: LD_INT 1
27777: PPUSH
27778: CALL_OW 275
27782: PUSH
27783: LD_VAR 0 5
27787: PUSH
27788: LD_INT 1
27790: ARRAY
27791: GREATEREQUAL
27792: IFFALSE 27818
27794: PUSH
27795: LD_VAR 0 4
27799: PPUSH
27800: LD_INT 2
27802: PPUSH
27803: CALL_OW 275
27807: PUSH
27808: LD_VAR 0 5
27812: PUSH
27813: LD_INT 2
27815: ARRAY
27816: GREATEREQUAL
27817: AND
27818: IFFALSE 27844
27820: PUSH
27821: LD_VAR 0 4
27825: PPUSH
27826: LD_INT 3
27828: PPUSH
27829: CALL_OW 275
27833: PUSH
27834: LD_VAR 0 5
27838: PUSH
27839: LD_INT 3
27841: ARRAY
27842: GREATEREQUAL
27843: AND
27844: ST_TO_ADDR
// end ;
27845: LD_VAR 0 3
27849: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
27850: LD_INT 0
27852: PPUSH
27853: PPUSH
27854: PPUSH
27855: PPUSH
27856: PPUSH
27857: PPUSH
27858: PPUSH
27859: PPUSH
27860: PPUSH
27861: PPUSH
27862: PPUSH
// result := false ;
27863: LD_ADDR_VAR 0 8
27867: PUSH
27868: LD_INT 0
27870: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
27871: LD_VAR 0 5
27875: NOT
27876: IFTRUE 27885
27878: PUSH
27879: LD_VAR 0 1
27883: NOT
27884: OR
27885: IFTRUE 27894
27887: PUSH
27888: LD_VAR 0 2
27892: NOT
27893: OR
27894: IFTRUE 27903
27896: PUSH
27897: LD_VAR 0 3
27901: NOT
27902: OR
27903: IFFALSE 27907
// exit ;
27905: GO 28733
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
27907: LD_ADDR_VAR 0 14
27911: PUSH
27912: LD_VAR 0 1
27916: PPUSH
27917: LD_VAR 0 2
27921: PPUSH
27922: LD_VAR 0 3
27926: PPUSH
27927: LD_VAR 0 4
27931: PPUSH
27932: LD_VAR 0 5
27936: PUSH
27937: LD_INT 1
27939: ARRAY
27940: PPUSH
27941: CALL_OW 248
27945: PPUSH
27946: LD_INT 0
27948: PPUSH
27949: CALL 30014 0 6
27953: ST_TO_ADDR
// if not hexes then
27954: LD_VAR 0 14
27958: NOT
27959: IFFALSE 27963
// exit ;
27961: GO 28733
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27963: LD_ADDR_VAR 0 17
27967: PUSH
27968: LD_VAR 0 5
27972: PPUSH
27973: LD_INT 22
27975: PUSH
27976: LD_VAR 0 13
27980: PPUSH
27981: CALL_OW 255
27985: PUSH
27986: EMPTY
27987: LIST
27988: LIST
27989: PUSH
27990: LD_INT 2
27992: PUSH
27993: LD_INT 30
27995: PUSH
27996: LD_INT 0
27998: PUSH
27999: EMPTY
28000: LIST
28001: LIST
28002: PUSH
28003: LD_INT 30
28005: PUSH
28006: LD_INT 1
28008: PUSH
28009: EMPTY
28010: LIST
28011: LIST
28012: PUSH
28013: EMPTY
28014: LIST
28015: LIST
28016: LIST
28017: PUSH
28018: EMPTY
28019: LIST
28020: LIST
28021: PPUSH
28022: CALL_OW 72
28026: ST_TO_ADDR
// for i = 1 to hexes do
28027: LD_ADDR_VAR 0 9
28031: PUSH
28032: DOUBLE
28033: LD_INT 1
28035: DEC
28036: ST_TO_ADDR
28037: LD_VAR 0 14
28041: PUSH
28042: FOR_TO
28043: IFFALSE 28731
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
28045: LD_ADDR_VAR 0 13
28049: PUSH
28050: LD_VAR 0 14
28054: PUSH
28055: LD_VAR 0 9
28059: ARRAY
28060: PUSH
28061: LD_INT 1
28063: ARRAY
28064: PPUSH
28065: LD_VAR 0 14
28069: PUSH
28070: LD_VAR 0 9
28074: ARRAY
28075: PUSH
28076: LD_INT 2
28078: ARRAY
28079: PPUSH
28080: CALL_OW 428
28084: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
28085: LD_VAR 0 14
28089: PUSH
28090: LD_VAR 0 9
28094: ARRAY
28095: PUSH
28096: LD_INT 1
28098: ARRAY
28099: PPUSH
28100: LD_VAR 0 14
28104: PUSH
28105: LD_VAR 0 9
28109: ARRAY
28110: PUSH
28111: LD_INT 2
28113: ARRAY
28114: PPUSH
28115: CALL_OW 351
28119: IFTRUE 28158
28121: PUSH
28122: LD_VAR 0 14
28126: PUSH
28127: LD_VAR 0 9
28131: ARRAY
28132: PUSH
28133: LD_INT 1
28135: ARRAY
28136: PPUSH
28137: LD_VAR 0 14
28141: PUSH
28142: LD_VAR 0 9
28146: ARRAY
28147: PUSH
28148: LD_INT 2
28150: ARRAY
28151: PPUSH
28152: CALL_OW 488
28156: NOT
28157: OR
28158: IFTRUE 28175
28160: PUSH
28161: LD_VAR 0 13
28165: PPUSH
28166: CALL_OW 247
28170: PUSH
28171: LD_INT 3
28173: EQUAL
28174: OR
28175: IFFALSE 28181
// exit ;
28177: POP
28178: POP
28179: GO 28733
// if not tmp then
28181: LD_VAR 0 13
28185: NOT
28186: IFFALSE 28190
// continue ;
28188: GO 28042
// result := true ;
28190: LD_ADDR_VAR 0 8
28194: PUSH
28195: LD_INT 1
28197: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
28198: LD_VAR 0 6
28202: IFFALSE 28219
28204: PUSH
28205: LD_VAR 0 13
28209: PPUSH
28210: CALL_OW 247
28214: PUSH
28215: LD_INT 2
28217: EQUAL
28218: AND
28219: IFFALSE 28236
28221: PUSH
28222: LD_VAR 0 13
28226: PPUSH
28227: CALL_OW 263
28231: PUSH
28232: LD_INT 1
28234: EQUAL
28235: AND
28236: IFFALSE 28400
// begin if IsDrivenBy ( tmp ) then
28238: LD_VAR 0 13
28242: PPUSH
28243: CALL_OW 311
28247: IFFALSE 28251
// continue ;
28249: GO 28042
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
28251: LD_VAR 0 6
28255: PPUSH
28256: LD_INT 3
28258: PUSH
28259: LD_INT 60
28261: PUSH
28262: EMPTY
28263: LIST
28264: PUSH
28265: EMPTY
28266: LIST
28267: LIST
28268: PUSH
28269: LD_INT 3
28271: PUSH
28272: LD_INT 55
28274: PUSH
28275: EMPTY
28276: LIST
28277: PUSH
28278: EMPTY
28279: LIST
28280: LIST
28281: PUSH
28282: EMPTY
28283: LIST
28284: LIST
28285: PPUSH
28286: CALL_OW 72
28290: IFFALSE 28398
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
28292: LD_ADDR_VAR 0 18
28296: PUSH
28297: LD_VAR 0 6
28301: PPUSH
28302: LD_INT 3
28304: PUSH
28305: LD_INT 60
28307: PUSH
28308: EMPTY
28309: LIST
28310: PUSH
28311: EMPTY
28312: LIST
28313: LIST
28314: PUSH
28315: LD_INT 3
28317: PUSH
28318: LD_INT 55
28320: PUSH
28321: EMPTY
28322: LIST
28323: PUSH
28324: EMPTY
28325: LIST
28326: LIST
28327: PUSH
28328: EMPTY
28329: LIST
28330: LIST
28331: PPUSH
28332: CALL_OW 72
28336: PUSH
28337: LD_INT 1
28339: ARRAY
28340: ST_TO_ADDR
// if IsInUnit ( driver ) then
28341: LD_VAR 0 18
28345: PPUSH
28346: CALL_OW 310
28350: IFFALSE 28361
// ComExit ( driver ) ;
28352: LD_VAR 0 18
28356: PPUSH
28357: CALL 54004 0 1
// AddComEnterUnit ( driver , tmp ) ;
28361: LD_VAR 0 18
28365: PPUSH
28366: LD_VAR 0 13
28370: PPUSH
28371: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
28375: LD_VAR 0 18
28379: PPUSH
28380: LD_VAR 0 7
28384: PPUSH
28385: CALL_OW 173
// AddComExitVehicle ( driver ) ;
28389: LD_VAR 0 18
28393: PPUSH
28394: CALL_OW 181
// end ; continue ;
28398: GO 28042
// end ; if not cleaners or not tmp in cleaners then
28400: LD_VAR 0 6
28404: NOT
28405: IFTRUE 28420
28407: PUSH
28408: LD_VAR 0 13
28412: PUSH
28413: LD_VAR 0 6
28417: IN
28418: NOT
28419: OR
28420: IFFALSE 28729
// begin if dep then
28422: LD_VAR 0 17
28426: IFFALSE 28562
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
28428: LD_ADDR_VAR 0 16
28432: PUSH
28433: LD_VAR 0 17
28437: PUSH
28438: LD_INT 1
28440: ARRAY
28441: PPUSH
28442: CALL_OW 250
28446: PPUSH
28447: LD_VAR 0 17
28451: PUSH
28452: LD_INT 1
28454: ARRAY
28455: PPUSH
28456: CALL_OW 254
28460: PPUSH
28461: LD_INT 5
28463: PPUSH
28464: CALL_OW 272
28468: PUSH
28469: LD_VAR 0 17
28473: PUSH
28474: LD_INT 1
28476: ARRAY
28477: PPUSH
28478: CALL_OW 251
28482: PPUSH
28483: LD_VAR 0 17
28487: PUSH
28488: LD_INT 1
28490: ARRAY
28491: PPUSH
28492: CALL_OW 254
28496: PPUSH
28497: LD_INT 5
28499: PPUSH
28500: CALL_OW 273
28504: PUSH
28505: EMPTY
28506: LIST
28507: LIST
28508: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
28509: LD_VAR 0 16
28513: PUSH
28514: LD_INT 1
28516: ARRAY
28517: PPUSH
28518: LD_VAR 0 16
28522: PUSH
28523: LD_INT 2
28525: ARRAY
28526: PPUSH
28527: CALL_OW 488
28531: IFFALSE 28562
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
28533: LD_VAR 0 13
28537: PPUSH
28538: LD_VAR 0 16
28542: PUSH
28543: LD_INT 1
28545: ARRAY
28546: PPUSH
28547: LD_VAR 0 16
28551: PUSH
28552: LD_INT 2
28554: ARRAY
28555: PPUSH
28556: CALL_OW 111
// continue ;
28560: GO 28042
// end ; end ; r := GetDir ( tmp ) ;
28562: LD_ADDR_VAR 0 15
28566: PUSH
28567: LD_VAR 0 13
28571: PPUSH
28572: CALL_OW 254
28576: ST_TO_ADDR
// if r = 5 then
28577: LD_VAR 0 15
28581: PUSH
28582: LD_INT 5
28584: EQUAL
28585: IFFALSE 28595
// r := 0 ;
28587: LD_ADDR_VAR 0 15
28591: PUSH
28592: LD_INT 0
28594: ST_TO_ADDR
// for j = r to 5 do
28595: LD_ADDR_VAR 0 10
28599: PUSH
28600: DOUBLE
28601: LD_VAR 0 15
28605: DEC
28606: ST_TO_ADDR
28607: LD_INT 5
28609: PUSH
28610: FOR_TO
28611: IFFALSE 28727
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
28613: LD_ADDR_VAR 0 11
28617: PUSH
28618: LD_VAR 0 13
28622: PPUSH
28623: CALL_OW 250
28627: PPUSH
28628: LD_VAR 0 10
28632: PPUSH
28633: LD_INT 2
28635: PPUSH
28636: CALL_OW 272
28640: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
28641: LD_ADDR_VAR 0 12
28645: PUSH
28646: LD_VAR 0 13
28650: PPUSH
28651: CALL_OW 251
28655: PPUSH
28656: LD_VAR 0 10
28660: PPUSH
28661: LD_INT 2
28663: PPUSH
28664: CALL_OW 273
28668: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
28669: LD_VAR 0 11
28673: PPUSH
28674: LD_VAR 0 12
28678: PPUSH
28679: CALL_OW 488
28683: IFFALSE 28702
28685: PUSH
28686: LD_VAR 0 11
28690: PPUSH
28691: LD_VAR 0 12
28695: PPUSH
28696: CALL_OW 428
28700: NOT
28701: AND
28702: IFFALSE 28725
// begin ComMoveXY ( tmp , _x , _y ) ;
28704: LD_VAR 0 13
28708: PPUSH
28709: LD_VAR 0 11
28713: PPUSH
28714: LD_VAR 0 12
28718: PPUSH
28719: CALL_OW 111
// break ;
28723: GO 28727
// end ; end ;
28725: GO 28610
28727: POP
28728: POP
// end ; end ;
28729: GO 28042
28731: POP
28732: POP
// end ;
28733: LD_VAR 0 8
28737: RET
// export function BuildingTechInvented ( side , btype ) ; begin
28738: LD_INT 0
28740: PPUSH
// result := true ;
28741: LD_ADDR_VAR 0 3
28745: PUSH
28746: LD_INT 1
28748: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
28749: LD_VAR 0 2
28753: PUSH
28754: LD_INT 24
28756: DOUBLE
28757: EQUAL
28758: IFTRUE 28768
28760: LD_INT 33
28762: DOUBLE
28763: EQUAL
28764: IFTRUE 28768
28766: GO 28793
28768: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
28769: LD_ADDR_VAR 0 3
28773: PUSH
28774: LD_INT 32
28776: PPUSH
28777: LD_VAR 0 1
28781: PPUSH
28782: CALL_OW 321
28786: PUSH
28787: LD_INT 2
28789: EQUAL
28790: ST_TO_ADDR
28791: GO 29109
28793: LD_INT 20
28795: DOUBLE
28796: EQUAL
28797: IFTRUE 28801
28799: GO 28826
28801: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
28802: LD_ADDR_VAR 0 3
28806: PUSH
28807: LD_INT 6
28809: PPUSH
28810: LD_VAR 0 1
28814: PPUSH
28815: CALL_OW 321
28819: PUSH
28820: LD_INT 2
28822: EQUAL
28823: ST_TO_ADDR
28824: GO 29109
28826: LD_INT 22
28828: DOUBLE
28829: EQUAL
28830: IFTRUE 28840
28832: LD_INT 36
28834: DOUBLE
28835: EQUAL
28836: IFTRUE 28840
28838: GO 28865
28840: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
28841: LD_ADDR_VAR 0 3
28845: PUSH
28846: LD_INT 15
28848: PPUSH
28849: LD_VAR 0 1
28853: PPUSH
28854: CALL_OW 321
28858: PUSH
28859: LD_INT 2
28861: EQUAL
28862: ST_TO_ADDR
28863: GO 29109
28865: LD_INT 30
28867: DOUBLE
28868: EQUAL
28869: IFTRUE 28873
28871: GO 28898
28873: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
28874: LD_ADDR_VAR 0 3
28878: PUSH
28879: LD_INT 20
28881: PPUSH
28882: LD_VAR 0 1
28886: PPUSH
28887: CALL_OW 321
28891: PUSH
28892: LD_INT 2
28894: EQUAL
28895: ST_TO_ADDR
28896: GO 29109
28898: LD_INT 28
28900: DOUBLE
28901: EQUAL
28902: IFTRUE 28912
28904: LD_INT 21
28906: DOUBLE
28907: EQUAL
28908: IFTRUE 28912
28910: GO 28937
28912: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
28913: LD_ADDR_VAR 0 3
28917: PUSH
28918: LD_INT 21
28920: PPUSH
28921: LD_VAR 0 1
28925: PPUSH
28926: CALL_OW 321
28930: PUSH
28931: LD_INT 2
28933: EQUAL
28934: ST_TO_ADDR
28935: GO 29109
28937: LD_INT 16
28939: DOUBLE
28940: EQUAL
28941: IFTRUE 28945
28943: GO 28970
28945: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
28946: LD_ADDR_VAR 0 3
28950: PUSH
28951: LD_INT 84
28953: PPUSH
28954: LD_VAR 0 1
28958: PPUSH
28959: CALL_OW 321
28963: PUSH
28964: LD_INT 2
28966: EQUAL
28967: ST_TO_ADDR
28968: GO 29109
28970: LD_INT 19
28972: DOUBLE
28973: EQUAL
28974: IFTRUE 28984
28976: LD_INT 23
28978: DOUBLE
28979: EQUAL
28980: IFTRUE 28984
28982: GO 29009
28984: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
28985: LD_ADDR_VAR 0 3
28989: PUSH
28990: LD_INT 83
28992: PPUSH
28993: LD_VAR 0 1
28997: PPUSH
28998: CALL_OW 321
29002: PUSH
29003: LD_INT 2
29005: EQUAL
29006: ST_TO_ADDR
29007: GO 29109
29009: LD_INT 17
29011: DOUBLE
29012: EQUAL
29013: IFTRUE 29017
29015: GO 29042
29017: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
29018: LD_ADDR_VAR 0 3
29022: PUSH
29023: LD_INT 39
29025: PPUSH
29026: LD_VAR 0 1
29030: PPUSH
29031: CALL_OW 321
29035: PUSH
29036: LD_INT 2
29038: EQUAL
29039: ST_TO_ADDR
29040: GO 29109
29042: LD_INT 18
29044: DOUBLE
29045: EQUAL
29046: IFTRUE 29050
29048: GO 29075
29050: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
29051: LD_ADDR_VAR 0 3
29055: PUSH
29056: LD_INT 40
29058: PPUSH
29059: LD_VAR 0 1
29063: PPUSH
29064: CALL_OW 321
29068: PUSH
29069: LD_INT 2
29071: EQUAL
29072: ST_TO_ADDR
29073: GO 29109
29075: LD_INT 27
29077: DOUBLE
29078: EQUAL
29079: IFTRUE 29083
29081: GO 29108
29083: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
29084: LD_ADDR_VAR 0 3
29088: PUSH
29089: LD_INT 35
29091: PPUSH
29092: LD_VAR 0 1
29096: PPUSH
29097: CALL_OW 321
29101: PUSH
29102: LD_INT 2
29104: EQUAL
29105: ST_TO_ADDR
29106: GO 29109
29108: POP
// end ;
29109: LD_VAR 0 3
29113: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
29114: LD_INT 0
29116: PPUSH
29117: PPUSH
29118: PPUSH
29119: PPUSH
29120: PPUSH
29121: PPUSH
29122: PPUSH
29123: PPUSH
29124: PPUSH
29125: PPUSH
29126: PPUSH
// result := false ;
29127: LD_ADDR_VAR 0 6
29131: PUSH
29132: LD_INT 0
29134: ST_TO_ADDR
// if btype = b_depot then
29135: LD_VAR 0 2
29139: PUSH
29140: LD_INT 0
29142: EQUAL
29143: IFFALSE 29155
// begin result := true ;
29145: LD_ADDR_VAR 0 6
29149: PUSH
29150: LD_INT 1
29152: ST_TO_ADDR
// exit ;
29153: GO 30009
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
29155: LD_VAR 0 1
29159: NOT
29160: IFTRUE 29185
29162: PUSH
29163: LD_VAR 0 1
29167: PPUSH
29168: CALL_OW 266
29172: PUSH
29173: LD_INT 0
29175: PUSH
29176: LD_INT 1
29178: PUSH
29179: EMPTY
29180: LIST
29181: LIST
29182: IN
29183: NOT
29184: OR
29185: IFTRUE 29194
29187: PUSH
29188: LD_VAR 0 2
29192: NOT
29193: OR
29194: IFTRUE 29230
29196: PUSH
29197: LD_VAR 0 5
29201: PUSH
29202: LD_INT 0
29204: PUSH
29205: LD_INT 1
29207: PUSH
29208: LD_INT 2
29210: PUSH
29211: LD_INT 3
29213: PUSH
29214: LD_INT 4
29216: PUSH
29217: LD_INT 5
29219: PUSH
29220: EMPTY
29221: LIST
29222: LIST
29223: LIST
29224: LIST
29225: LIST
29226: LIST
29227: IN
29228: NOT
29229: OR
29230: IFTRUE 29249
29232: PUSH
29233: LD_VAR 0 3
29237: PPUSH
29238: LD_VAR 0 4
29242: PPUSH
29243: CALL_OW 488
29247: NOT
29248: OR
29249: IFFALSE 29253
// exit ;
29251: GO 30009
// side := GetSide ( depot ) ;
29253: LD_ADDR_VAR 0 9
29257: PUSH
29258: LD_VAR 0 1
29262: PPUSH
29263: CALL_OW 255
29267: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
29268: LD_VAR 0 9
29272: PPUSH
29273: LD_VAR 0 2
29277: PPUSH
29278: CALL 28738 0 2
29282: NOT
29283: IFFALSE 29287
// exit ;
29285: GO 30009
// pom := GetBase ( depot ) ;
29287: LD_ADDR_VAR 0 10
29291: PUSH
29292: LD_VAR 0 1
29296: PPUSH
29297: CALL_OW 274
29301: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
29302: LD_ADDR_VAR 0 11
29306: PUSH
29307: LD_VAR 0 2
29311: PPUSH
29312: LD_VAR 0 1
29316: PPUSH
29317: CALL_OW 248
29321: PPUSH
29322: CALL_OW 450
29326: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
29327: LD_VAR 0 10
29331: PPUSH
29332: LD_INT 1
29334: PPUSH
29335: CALL_OW 275
29339: PUSH
29340: LD_VAR 0 11
29344: PUSH
29345: LD_INT 1
29347: ARRAY
29348: GREATEREQUAL
29349: IFFALSE 29375
29351: PUSH
29352: LD_VAR 0 10
29356: PPUSH
29357: LD_INT 2
29359: PPUSH
29360: CALL_OW 275
29364: PUSH
29365: LD_VAR 0 11
29369: PUSH
29370: LD_INT 2
29372: ARRAY
29373: GREATEREQUAL
29374: AND
29375: IFFALSE 29401
29377: PUSH
29378: LD_VAR 0 10
29382: PPUSH
29383: LD_INT 3
29385: PPUSH
29386: CALL_OW 275
29390: PUSH
29391: LD_VAR 0 11
29395: PUSH
29396: LD_INT 3
29398: ARRAY
29399: GREATEREQUAL
29400: AND
29401: NOT
29402: IFFALSE 29406
// exit ;
29404: GO 30009
// if GetBType ( depot ) = b_depot then
29406: LD_VAR 0 1
29410: PPUSH
29411: CALL_OW 266
29415: PUSH
29416: LD_INT 0
29418: EQUAL
29419: IFFALSE 29431
// dist := 28 else
29421: LD_ADDR_VAR 0 14
29425: PUSH
29426: LD_INT 28
29428: ST_TO_ADDR
29429: GO 29439
// dist := 36 ;
29431: LD_ADDR_VAR 0 14
29435: PUSH
29436: LD_INT 36
29438: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
29439: LD_VAR 0 1
29443: PPUSH
29444: LD_VAR 0 3
29448: PPUSH
29449: LD_VAR 0 4
29453: PPUSH
29454: CALL_OW 297
29458: PUSH
29459: LD_VAR 0 14
29463: GREATER
29464: IFFALSE 29468
// exit ;
29466: GO 30009
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
29468: LD_ADDR_VAR 0 12
29472: PUSH
29473: LD_VAR 0 2
29477: PPUSH
29478: LD_VAR 0 3
29482: PPUSH
29483: LD_VAR 0 4
29487: PPUSH
29488: LD_VAR 0 5
29492: PPUSH
29493: LD_VAR 0 1
29497: PPUSH
29498: CALL_OW 248
29502: PPUSH
29503: LD_INT 0
29505: PPUSH
29506: CALL 30014 0 6
29510: ST_TO_ADDR
// if not hexes then
29511: LD_VAR 0 12
29515: NOT
29516: IFFALSE 29520
// exit ;
29518: GO 30009
// hex := GetHexInfo ( x , y ) ;
29520: LD_ADDR_VAR 0 15
29524: PUSH
29525: LD_VAR 0 3
29529: PPUSH
29530: LD_VAR 0 4
29534: PPUSH
29535: CALL_OW 546
29539: ST_TO_ADDR
// if hex [ 1 ] then
29540: LD_VAR 0 15
29544: PUSH
29545: LD_INT 1
29547: ARRAY
29548: IFFALSE 29552
// exit ;
29550: GO 30009
// height := hex [ 2 ] ;
29552: LD_ADDR_VAR 0 13
29556: PUSH
29557: LD_VAR 0 15
29561: PUSH
29562: LD_INT 2
29564: ARRAY
29565: ST_TO_ADDR
// for i = 1 to hexes do
29566: LD_ADDR_VAR 0 7
29570: PUSH
29571: DOUBLE
29572: LD_INT 1
29574: DEC
29575: ST_TO_ADDR
29576: LD_VAR 0 12
29580: PUSH
29581: FOR_TO
29582: IFFALSE 29926
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
29584: LD_VAR 0 12
29588: PUSH
29589: LD_VAR 0 7
29593: ARRAY
29594: PUSH
29595: LD_INT 1
29597: ARRAY
29598: PPUSH
29599: LD_VAR 0 12
29603: PUSH
29604: LD_VAR 0 7
29608: ARRAY
29609: PUSH
29610: LD_INT 2
29612: ARRAY
29613: PPUSH
29614: CALL_OW 488
29618: NOT
29619: IFTRUE 29661
29621: PUSH
29622: LD_VAR 0 12
29626: PUSH
29627: LD_VAR 0 7
29631: ARRAY
29632: PUSH
29633: LD_INT 1
29635: ARRAY
29636: PPUSH
29637: LD_VAR 0 12
29641: PUSH
29642: LD_VAR 0 7
29646: ARRAY
29647: PUSH
29648: LD_INT 2
29650: ARRAY
29651: PPUSH
29652: CALL_OW 428
29656: PUSH
29657: LD_INT 0
29659: GREATER
29660: OR
29661: IFTRUE 29699
29663: PUSH
29664: LD_VAR 0 12
29668: PUSH
29669: LD_VAR 0 7
29673: ARRAY
29674: PUSH
29675: LD_INT 1
29677: ARRAY
29678: PPUSH
29679: LD_VAR 0 12
29683: PUSH
29684: LD_VAR 0 7
29688: ARRAY
29689: PUSH
29690: LD_INT 2
29692: ARRAY
29693: PPUSH
29694: CALL_OW 351
29698: OR
29699: IFFALSE 29705
// exit ;
29701: POP
29702: POP
29703: GO 30009
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
29705: LD_ADDR_VAR 0 8
29709: PUSH
29710: LD_VAR 0 12
29714: PUSH
29715: LD_VAR 0 7
29719: ARRAY
29720: PUSH
29721: LD_INT 1
29723: ARRAY
29724: PPUSH
29725: LD_VAR 0 12
29729: PUSH
29730: LD_VAR 0 7
29734: ARRAY
29735: PUSH
29736: LD_INT 2
29738: ARRAY
29739: PPUSH
29740: CALL_OW 546
29744: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
29745: LD_VAR 0 8
29749: PUSH
29750: LD_INT 1
29752: ARRAY
29753: IFTRUE 29775
29755: PUSH
29756: LD_VAR 0 8
29760: PUSH
29761: LD_INT 2
29763: ARRAY
29764: PUSH
29765: LD_VAR 0 13
29769: PUSH
29770: LD_INT 2
29772: PLUS
29773: GREATER
29774: OR
29775: IFTRUE 29797
29777: PUSH
29778: LD_VAR 0 8
29782: PUSH
29783: LD_INT 2
29785: ARRAY
29786: PUSH
29787: LD_VAR 0 13
29791: PUSH
29792: LD_INT 2
29794: MINUS
29795: LESS
29796: OR
29797: IFTRUE 29865
29799: PUSH
29800: LD_VAR 0 8
29804: PUSH
29805: LD_INT 3
29807: ARRAY
29808: PUSH
29809: LD_INT 0
29811: PUSH
29812: LD_INT 8
29814: PUSH
29815: LD_INT 9
29817: PUSH
29818: LD_INT 10
29820: PUSH
29821: LD_INT 11
29823: PUSH
29824: LD_INT 12
29826: PUSH
29827: LD_INT 13
29829: PUSH
29830: LD_INT 16
29832: PUSH
29833: LD_INT 17
29835: PUSH
29836: LD_INT 18
29838: PUSH
29839: LD_INT 19
29841: PUSH
29842: LD_INT 20
29844: PUSH
29845: LD_INT 21
29847: PUSH
29848: EMPTY
29849: LIST
29850: LIST
29851: LIST
29852: LIST
29853: LIST
29854: LIST
29855: LIST
29856: LIST
29857: LIST
29858: LIST
29859: LIST
29860: LIST
29861: LIST
29862: IN
29863: NOT
29864: OR
29865: IFTRUE 29878
29867: PUSH
29868: LD_VAR 0 8
29872: PUSH
29873: LD_INT 5
29875: ARRAY
29876: NOT
29877: OR
29878: IFTRUE 29918
29880: PUSH
29881: LD_VAR 0 8
29885: PUSH
29886: LD_INT 6
29888: ARRAY
29889: PUSH
29890: LD_INT 1
29892: PUSH
29893: LD_INT 2
29895: PUSH
29896: LD_INT 7
29898: PUSH
29899: LD_INT 9
29901: PUSH
29902: LD_INT 10
29904: PUSH
29905: LD_INT 11
29907: PUSH
29908: EMPTY
29909: LIST
29910: LIST
29911: LIST
29912: LIST
29913: LIST
29914: LIST
29915: IN
29916: NOT
29917: OR
29918: IFFALSE 29924
// exit ;
29920: POP
29921: POP
29922: GO 30009
// end ;
29924: GO 29581
29926: POP
29927: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
29928: LD_VAR 0 9
29932: PPUSH
29933: LD_VAR 0 3
29937: PPUSH
29938: LD_VAR 0 4
29942: PPUSH
29943: LD_INT 20
29945: PPUSH
29946: CALL 21828 0 4
29950: PUSH
29951: LD_INT 4
29953: ARRAY
29954: IFFALSE 29958
// exit ;
29956: GO 30009
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
29958: LD_VAR 0 2
29962: PUSH
29963: LD_INT 29
29965: PUSH
29966: LD_INT 30
29968: PUSH
29969: EMPTY
29970: LIST
29971: LIST
29972: IN
29973: IFFALSE 29997
29975: PUSH
29976: LD_VAR 0 3
29980: PPUSH
29981: LD_VAR 0 4
29985: PPUSH
29986: LD_VAR 0 9
29990: PPUSH
29991: CALL_OW 440
29995: NOT
29996: AND
29997: IFFALSE 30001
// exit ;
29999: GO 30009
// result := true ;
30001: LD_ADDR_VAR 0 6
30005: PUSH
30006: LD_INT 1
30008: ST_TO_ADDR
// end ;
30009: LD_VAR 0 6
30013: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
30014: LD_INT 0
30016: PPUSH
30017: PPUSH
30018: PPUSH
30019: PPUSH
30020: PPUSH
30021: PPUSH
30022: PPUSH
30023: PPUSH
30024: PPUSH
30025: PPUSH
30026: PPUSH
30027: PPUSH
30028: PPUSH
30029: PPUSH
30030: PPUSH
30031: PPUSH
30032: PPUSH
30033: PPUSH
30034: PPUSH
30035: PPUSH
30036: PPUSH
30037: PPUSH
30038: PPUSH
30039: PPUSH
30040: PPUSH
30041: PPUSH
30042: PPUSH
30043: PPUSH
30044: PPUSH
30045: PPUSH
30046: PPUSH
30047: PPUSH
30048: PPUSH
30049: PPUSH
30050: PPUSH
30051: PPUSH
30052: PPUSH
30053: PPUSH
30054: PPUSH
30055: PPUSH
30056: PPUSH
30057: PPUSH
30058: PPUSH
30059: PPUSH
30060: PPUSH
30061: PPUSH
30062: PPUSH
30063: PPUSH
30064: PPUSH
30065: PPUSH
30066: PPUSH
30067: PPUSH
30068: PPUSH
30069: PPUSH
30070: PPUSH
30071: PPUSH
30072: PPUSH
30073: PPUSH
// result = [ ] ;
30074: LD_ADDR_VAR 0 7
30078: PUSH
30079: EMPTY
30080: ST_TO_ADDR
// temp_list = [ ] ;
30081: LD_ADDR_VAR 0 9
30085: PUSH
30086: EMPTY
30087: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
30088: LD_VAR 0 4
30092: PUSH
30093: LD_INT 0
30095: PUSH
30096: LD_INT 1
30098: PUSH
30099: LD_INT 2
30101: PUSH
30102: LD_INT 3
30104: PUSH
30105: LD_INT 4
30107: PUSH
30108: LD_INT 5
30110: PUSH
30111: EMPTY
30112: LIST
30113: LIST
30114: LIST
30115: LIST
30116: LIST
30117: LIST
30118: IN
30119: NOT
30120: IFTRUE 30163
30122: PUSH
30123: LD_VAR 0 1
30127: PUSH
30128: LD_INT 0
30130: PUSH
30131: LD_INT 1
30133: PUSH
30134: EMPTY
30135: LIST
30136: LIST
30137: IN
30138: IFFALSE 30162
30140: PUSH
30141: LD_VAR 0 5
30145: PUSH
30146: LD_INT 1
30148: PUSH
30149: LD_INT 2
30151: PUSH
30152: LD_INT 3
30154: PUSH
30155: EMPTY
30156: LIST
30157: LIST
30158: LIST
30159: IN
30160: NOT
30161: AND
30162: OR
30163: IFFALSE 30167
// exit ;
30165: GO 48566
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
30167: LD_VAR 0 1
30171: PUSH
30172: LD_INT 6
30174: PUSH
30175: LD_INT 7
30177: PUSH
30178: LD_INT 8
30180: PUSH
30181: LD_INT 13
30183: PUSH
30184: LD_INT 12
30186: PUSH
30187: LD_INT 15
30189: PUSH
30190: LD_INT 11
30192: PUSH
30193: LD_INT 14
30195: PUSH
30196: LD_INT 10
30198: PUSH
30199: EMPTY
30200: LIST
30201: LIST
30202: LIST
30203: LIST
30204: LIST
30205: LIST
30206: LIST
30207: LIST
30208: LIST
30209: IN
30210: IFFALSE 30220
// btype = b_lab ;
30212: LD_ADDR_VAR 0 1
30216: PUSH
30217: LD_INT 6
30219: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
30220: LD_VAR 0 6
30224: PUSH
30225: LD_INT 0
30227: PUSH
30228: LD_INT 1
30230: PUSH
30231: LD_INT 2
30233: PUSH
30234: EMPTY
30235: LIST
30236: LIST
30237: LIST
30238: IN
30239: NOT
30240: IFTRUE 30308
30242: PUSH
30243: LD_VAR 0 1
30247: PUSH
30248: LD_INT 0
30250: PUSH
30251: LD_INT 1
30253: PUSH
30254: LD_INT 2
30256: PUSH
30257: LD_INT 3
30259: PUSH
30260: LD_INT 6
30262: PUSH
30263: LD_INT 36
30265: PUSH
30266: LD_INT 4
30268: PUSH
30269: LD_INT 5
30271: PUSH
30272: LD_INT 31
30274: PUSH
30275: LD_INT 32
30277: PUSH
30278: LD_INT 33
30280: PUSH
30281: EMPTY
30282: LIST
30283: LIST
30284: LIST
30285: LIST
30286: LIST
30287: LIST
30288: LIST
30289: LIST
30290: LIST
30291: LIST
30292: LIST
30293: IN
30294: NOT
30295: IFFALSE 30307
30297: PUSH
30298: LD_VAR 0 6
30302: PUSH
30303: LD_INT 1
30305: EQUAL
30306: AND
30307: OR
30308: IFTRUE 30340
30310: PUSH
30311: LD_VAR 0 1
30315: PUSH
30316: LD_INT 2
30318: PUSH
30319: LD_INT 3
30321: PUSH
30322: EMPTY
30323: LIST
30324: LIST
30325: IN
30326: NOT
30327: IFFALSE 30339
30329: PUSH
30330: LD_VAR 0 6
30334: PUSH
30335: LD_INT 2
30337: EQUAL
30338: AND
30339: OR
30340: IFFALSE 30350
// mode = 0 ;
30342: LD_ADDR_VAR 0 6
30346: PUSH
30347: LD_INT 0
30349: ST_TO_ADDR
// case mode of 0 :
30350: LD_VAR 0 6
30354: PUSH
30355: LD_INT 0
30357: DOUBLE
30358: EQUAL
30359: IFTRUE 30363
30361: GO 41816
30363: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30364: LD_ADDR_VAR 0 11
30368: PUSH
30369: LD_INT 0
30371: PUSH
30372: LD_INT 0
30374: PUSH
30375: EMPTY
30376: LIST
30377: LIST
30378: PUSH
30379: LD_INT 0
30381: PUSH
30382: LD_INT 1
30384: NEG
30385: PUSH
30386: EMPTY
30387: LIST
30388: LIST
30389: PUSH
30390: LD_INT 1
30392: PUSH
30393: LD_INT 0
30395: PUSH
30396: EMPTY
30397: LIST
30398: LIST
30399: PUSH
30400: LD_INT 1
30402: PUSH
30403: LD_INT 1
30405: PUSH
30406: EMPTY
30407: LIST
30408: LIST
30409: PUSH
30410: LD_INT 0
30412: PUSH
30413: LD_INT 1
30415: PUSH
30416: EMPTY
30417: LIST
30418: LIST
30419: PUSH
30420: LD_INT 1
30422: NEG
30423: PUSH
30424: LD_INT 0
30426: PUSH
30427: EMPTY
30428: LIST
30429: LIST
30430: PUSH
30431: LD_INT 1
30433: NEG
30434: PUSH
30435: LD_INT 1
30437: NEG
30438: PUSH
30439: EMPTY
30440: LIST
30441: LIST
30442: PUSH
30443: LD_INT 1
30445: NEG
30446: PUSH
30447: LD_INT 2
30449: NEG
30450: PUSH
30451: EMPTY
30452: LIST
30453: LIST
30454: PUSH
30455: LD_INT 0
30457: PUSH
30458: LD_INT 2
30460: NEG
30461: PUSH
30462: EMPTY
30463: LIST
30464: LIST
30465: PUSH
30466: LD_INT 1
30468: PUSH
30469: LD_INT 1
30471: NEG
30472: PUSH
30473: EMPTY
30474: LIST
30475: LIST
30476: PUSH
30477: LD_INT 1
30479: PUSH
30480: LD_INT 2
30482: PUSH
30483: EMPTY
30484: LIST
30485: LIST
30486: PUSH
30487: LD_INT 0
30489: PUSH
30490: LD_INT 2
30492: PUSH
30493: EMPTY
30494: LIST
30495: LIST
30496: PUSH
30497: LD_INT 1
30499: NEG
30500: PUSH
30501: LD_INT 1
30503: PUSH
30504: EMPTY
30505: LIST
30506: LIST
30507: PUSH
30508: LD_INT 1
30510: PUSH
30511: LD_INT 3
30513: PUSH
30514: EMPTY
30515: LIST
30516: LIST
30517: PUSH
30518: LD_INT 0
30520: PUSH
30521: LD_INT 3
30523: PUSH
30524: EMPTY
30525: LIST
30526: LIST
30527: PUSH
30528: LD_INT 1
30530: NEG
30531: PUSH
30532: LD_INT 2
30534: PUSH
30535: EMPTY
30536: LIST
30537: LIST
30538: PUSH
30539: EMPTY
30540: LIST
30541: LIST
30542: LIST
30543: LIST
30544: LIST
30545: LIST
30546: LIST
30547: LIST
30548: LIST
30549: LIST
30550: LIST
30551: LIST
30552: LIST
30553: LIST
30554: LIST
30555: LIST
30556: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30557: LD_ADDR_VAR 0 12
30561: PUSH
30562: LD_INT 0
30564: PUSH
30565: LD_INT 0
30567: PUSH
30568: EMPTY
30569: LIST
30570: LIST
30571: PUSH
30572: LD_INT 0
30574: PUSH
30575: LD_INT 1
30577: NEG
30578: PUSH
30579: EMPTY
30580: LIST
30581: LIST
30582: PUSH
30583: LD_INT 1
30585: PUSH
30586: LD_INT 0
30588: PUSH
30589: EMPTY
30590: LIST
30591: LIST
30592: PUSH
30593: LD_INT 1
30595: PUSH
30596: LD_INT 1
30598: PUSH
30599: EMPTY
30600: LIST
30601: LIST
30602: PUSH
30603: LD_INT 0
30605: PUSH
30606: LD_INT 1
30608: PUSH
30609: EMPTY
30610: LIST
30611: LIST
30612: PUSH
30613: LD_INT 1
30615: NEG
30616: PUSH
30617: LD_INT 0
30619: PUSH
30620: EMPTY
30621: LIST
30622: LIST
30623: PUSH
30624: LD_INT 1
30626: NEG
30627: PUSH
30628: LD_INT 1
30630: NEG
30631: PUSH
30632: EMPTY
30633: LIST
30634: LIST
30635: PUSH
30636: LD_INT 1
30638: PUSH
30639: LD_INT 1
30641: NEG
30642: PUSH
30643: EMPTY
30644: LIST
30645: LIST
30646: PUSH
30647: LD_INT 2
30649: PUSH
30650: LD_INT 0
30652: PUSH
30653: EMPTY
30654: LIST
30655: LIST
30656: PUSH
30657: LD_INT 2
30659: PUSH
30660: LD_INT 1
30662: PUSH
30663: EMPTY
30664: LIST
30665: LIST
30666: PUSH
30667: LD_INT 1
30669: NEG
30670: PUSH
30671: LD_INT 1
30673: PUSH
30674: EMPTY
30675: LIST
30676: LIST
30677: PUSH
30678: LD_INT 2
30680: NEG
30681: PUSH
30682: LD_INT 0
30684: PUSH
30685: EMPTY
30686: LIST
30687: LIST
30688: PUSH
30689: LD_INT 2
30691: NEG
30692: PUSH
30693: LD_INT 1
30695: NEG
30696: PUSH
30697: EMPTY
30698: LIST
30699: LIST
30700: PUSH
30701: LD_INT 2
30703: NEG
30704: PUSH
30705: LD_INT 1
30707: PUSH
30708: EMPTY
30709: LIST
30710: LIST
30711: PUSH
30712: LD_INT 3
30714: NEG
30715: PUSH
30716: LD_INT 0
30718: PUSH
30719: EMPTY
30720: LIST
30721: LIST
30722: PUSH
30723: LD_INT 3
30725: NEG
30726: PUSH
30727: LD_INT 1
30729: NEG
30730: PUSH
30731: EMPTY
30732: LIST
30733: LIST
30734: PUSH
30735: EMPTY
30736: LIST
30737: LIST
30738: LIST
30739: LIST
30740: LIST
30741: LIST
30742: LIST
30743: LIST
30744: LIST
30745: LIST
30746: LIST
30747: LIST
30748: LIST
30749: LIST
30750: LIST
30751: LIST
30752: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30753: LD_ADDR_VAR 0 13
30757: PUSH
30758: LD_INT 0
30760: PUSH
30761: LD_INT 0
30763: PUSH
30764: EMPTY
30765: LIST
30766: LIST
30767: PUSH
30768: LD_INT 0
30770: PUSH
30771: LD_INT 1
30773: NEG
30774: PUSH
30775: EMPTY
30776: LIST
30777: LIST
30778: PUSH
30779: LD_INT 1
30781: PUSH
30782: LD_INT 0
30784: PUSH
30785: EMPTY
30786: LIST
30787: LIST
30788: PUSH
30789: LD_INT 1
30791: PUSH
30792: LD_INT 1
30794: PUSH
30795: EMPTY
30796: LIST
30797: LIST
30798: PUSH
30799: LD_INT 0
30801: PUSH
30802: LD_INT 1
30804: PUSH
30805: EMPTY
30806: LIST
30807: LIST
30808: PUSH
30809: LD_INT 1
30811: NEG
30812: PUSH
30813: LD_INT 0
30815: PUSH
30816: EMPTY
30817: LIST
30818: LIST
30819: PUSH
30820: LD_INT 1
30822: NEG
30823: PUSH
30824: LD_INT 1
30826: NEG
30827: PUSH
30828: EMPTY
30829: LIST
30830: LIST
30831: PUSH
30832: LD_INT 1
30834: NEG
30835: PUSH
30836: LD_INT 2
30838: NEG
30839: PUSH
30840: EMPTY
30841: LIST
30842: LIST
30843: PUSH
30844: LD_INT 2
30846: PUSH
30847: LD_INT 1
30849: PUSH
30850: EMPTY
30851: LIST
30852: LIST
30853: PUSH
30854: LD_INT 2
30856: PUSH
30857: LD_INT 2
30859: PUSH
30860: EMPTY
30861: LIST
30862: LIST
30863: PUSH
30864: LD_INT 1
30866: PUSH
30867: LD_INT 2
30869: PUSH
30870: EMPTY
30871: LIST
30872: LIST
30873: PUSH
30874: LD_INT 2
30876: NEG
30877: PUSH
30878: LD_INT 1
30880: NEG
30881: PUSH
30882: EMPTY
30883: LIST
30884: LIST
30885: PUSH
30886: LD_INT 2
30888: NEG
30889: PUSH
30890: LD_INT 2
30892: NEG
30893: PUSH
30894: EMPTY
30895: LIST
30896: LIST
30897: PUSH
30898: LD_INT 2
30900: NEG
30901: PUSH
30902: LD_INT 3
30904: NEG
30905: PUSH
30906: EMPTY
30907: LIST
30908: LIST
30909: PUSH
30910: LD_INT 3
30912: NEG
30913: PUSH
30914: LD_INT 2
30916: NEG
30917: PUSH
30918: EMPTY
30919: LIST
30920: LIST
30921: PUSH
30922: LD_INT 3
30924: NEG
30925: PUSH
30926: LD_INT 3
30928: NEG
30929: PUSH
30930: EMPTY
30931: LIST
30932: LIST
30933: PUSH
30934: EMPTY
30935: LIST
30936: LIST
30937: LIST
30938: LIST
30939: LIST
30940: LIST
30941: LIST
30942: LIST
30943: LIST
30944: LIST
30945: LIST
30946: LIST
30947: LIST
30948: LIST
30949: LIST
30950: LIST
30951: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30952: LD_ADDR_VAR 0 14
30956: PUSH
30957: LD_INT 0
30959: PUSH
30960: LD_INT 0
30962: PUSH
30963: EMPTY
30964: LIST
30965: LIST
30966: PUSH
30967: LD_INT 0
30969: PUSH
30970: LD_INT 1
30972: NEG
30973: PUSH
30974: EMPTY
30975: LIST
30976: LIST
30977: PUSH
30978: LD_INT 1
30980: PUSH
30981: LD_INT 0
30983: PUSH
30984: EMPTY
30985: LIST
30986: LIST
30987: PUSH
30988: LD_INT 1
30990: PUSH
30991: LD_INT 1
30993: PUSH
30994: EMPTY
30995: LIST
30996: LIST
30997: PUSH
30998: LD_INT 0
31000: PUSH
31001: LD_INT 1
31003: PUSH
31004: EMPTY
31005: LIST
31006: LIST
31007: PUSH
31008: LD_INT 1
31010: NEG
31011: PUSH
31012: LD_INT 0
31014: PUSH
31015: EMPTY
31016: LIST
31017: LIST
31018: PUSH
31019: LD_INT 1
31021: NEG
31022: PUSH
31023: LD_INT 1
31025: NEG
31026: PUSH
31027: EMPTY
31028: LIST
31029: LIST
31030: PUSH
31031: LD_INT 1
31033: NEG
31034: PUSH
31035: LD_INT 2
31037: NEG
31038: PUSH
31039: EMPTY
31040: LIST
31041: LIST
31042: PUSH
31043: LD_INT 0
31045: PUSH
31046: LD_INT 2
31048: NEG
31049: PUSH
31050: EMPTY
31051: LIST
31052: LIST
31053: PUSH
31054: LD_INT 1
31056: PUSH
31057: LD_INT 1
31059: NEG
31060: PUSH
31061: EMPTY
31062: LIST
31063: LIST
31064: PUSH
31065: LD_INT 1
31067: PUSH
31068: LD_INT 2
31070: PUSH
31071: EMPTY
31072: LIST
31073: LIST
31074: PUSH
31075: LD_INT 0
31077: PUSH
31078: LD_INT 2
31080: PUSH
31081: EMPTY
31082: LIST
31083: LIST
31084: PUSH
31085: LD_INT 1
31087: NEG
31088: PUSH
31089: LD_INT 1
31091: PUSH
31092: EMPTY
31093: LIST
31094: LIST
31095: PUSH
31096: LD_INT 1
31098: NEG
31099: PUSH
31100: LD_INT 3
31102: NEG
31103: PUSH
31104: EMPTY
31105: LIST
31106: LIST
31107: PUSH
31108: LD_INT 0
31110: PUSH
31111: LD_INT 3
31113: NEG
31114: PUSH
31115: EMPTY
31116: LIST
31117: LIST
31118: PUSH
31119: LD_INT 1
31121: PUSH
31122: LD_INT 2
31124: NEG
31125: PUSH
31126: EMPTY
31127: LIST
31128: LIST
31129: PUSH
31130: EMPTY
31131: LIST
31132: LIST
31133: LIST
31134: LIST
31135: LIST
31136: LIST
31137: LIST
31138: LIST
31139: LIST
31140: LIST
31141: LIST
31142: LIST
31143: LIST
31144: LIST
31145: LIST
31146: LIST
31147: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31148: LD_ADDR_VAR 0 15
31152: PUSH
31153: LD_INT 0
31155: PUSH
31156: LD_INT 0
31158: PUSH
31159: EMPTY
31160: LIST
31161: LIST
31162: PUSH
31163: LD_INT 0
31165: PUSH
31166: LD_INT 1
31168: NEG
31169: PUSH
31170: EMPTY
31171: LIST
31172: LIST
31173: PUSH
31174: LD_INT 1
31176: PUSH
31177: LD_INT 0
31179: PUSH
31180: EMPTY
31181: LIST
31182: LIST
31183: PUSH
31184: LD_INT 1
31186: PUSH
31187: LD_INT 1
31189: PUSH
31190: EMPTY
31191: LIST
31192: LIST
31193: PUSH
31194: LD_INT 0
31196: PUSH
31197: LD_INT 1
31199: PUSH
31200: EMPTY
31201: LIST
31202: LIST
31203: PUSH
31204: LD_INT 1
31206: NEG
31207: PUSH
31208: LD_INT 0
31210: PUSH
31211: EMPTY
31212: LIST
31213: LIST
31214: PUSH
31215: LD_INT 1
31217: NEG
31218: PUSH
31219: LD_INT 1
31221: NEG
31222: PUSH
31223: EMPTY
31224: LIST
31225: LIST
31226: PUSH
31227: LD_INT 1
31229: PUSH
31230: LD_INT 1
31232: NEG
31233: PUSH
31234: EMPTY
31235: LIST
31236: LIST
31237: PUSH
31238: LD_INT 2
31240: PUSH
31241: LD_INT 0
31243: PUSH
31244: EMPTY
31245: LIST
31246: LIST
31247: PUSH
31248: LD_INT 2
31250: PUSH
31251: LD_INT 1
31253: PUSH
31254: EMPTY
31255: LIST
31256: LIST
31257: PUSH
31258: LD_INT 1
31260: NEG
31261: PUSH
31262: LD_INT 1
31264: PUSH
31265: EMPTY
31266: LIST
31267: LIST
31268: PUSH
31269: LD_INT 2
31271: NEG
31272: PUSH
31273: LD_INT 0
31275: PUSH
31276: EMPTY
31277: LIST
31278: LIST
31279: PUSH
31280: LD_INT 2
31282: NEG
31283: PUSH
31284: LD_INT 1
31286: NEG
31287: PUSH
31288: EMPTY
31289: LIST
31290: LIST
31291: PUSH
31292: LD_INT 2
31294: PUSH
31295: LD_INT 1
31297: NEG
31298: PUSH
31299: EMPTY
31300: LIST
31301: LIST
31302: PUSH
31303: LD_INT 3
31305: PUSH
31306: LD_INT 0
31308: PUSH
31309: EMPTY
31310: LIST
31311: LIST
31312: PUSH
31313: LD_INT 3
31315: PUSH
31316: LD_INT 1
31318: PUSH
31319: EMPTY
31320: LIST
31321: LIST
31322: PUSH
31323: EMPTY
31324: LIST
31325: LIST
31326: LIST
31327: LIST
31328: LIST
31329: LIST
31330: LIST
31331: LIST
31332: LIST
31333: LIST
31334: LIST
31335: LIST
31336: LIST
31337: LIST
31338: LIST
31339: LIST
31340: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31341: LD_ADDR_VAR 0 16
31345: PUSH
31346: LD_INT 0
31348: PUSH
31349: LD_INT 0
31351: PUSH
31352: EMPTY
31353: LIST
31354: LIST
31355: PUSH
31356: LD_INT 0
31358: PUSH
31359: LD_INT 1
31361: NEG
31362: PUSH
31363: EMPTY
31364: LIST
31365: LIST
31366: PUSH
31367: LD_INT 1
31369: PUSH
31370: LD_INT 0
31372: PUSH
31373: EMPTY
31374: LIST
31375: LIST
31376: PUSH
31377: LD_INT 1
31379: PUSH
31380: LD_INT 1
31382: PUSH
31383: EMPTY
31384: LIST
31385: LIST
31386: PUSH
31387: LD_INT 0
31389: PUSH
31390: LD_INT 1
31392: PUSH
31393: EMPTY
31394: LIST
31395: LIST
31396: PUSH
31397: LD_INT 1
31399: NEG
31400: PUSH
31401: LD_INT 0
31403: PUSH
31404: EMPTY
31405: LIST
31406: LIST
31407: PUSH
31408: LD_INT 1
31410: NEG
31411: PUSH
31412: LD_INT 1
31414: NEG
31415: PUSH
31416: EMPTY
31417: LIST
31418: LIST
31419: PUSH
31420: LD_INT 1
31422: NEG
31423: PUSH
31424: LD_INT 2
31426: NEG
31427: PUSH
31428: EMPTY
31429: LIST
31430: LIST
31431: PUSH
31432: LD_INT 2
31434: PUSH
31435: LD_INT 1
31437: PUSH
31438: EMPTY
31439: LIST
31440: LIST
31441: PUSH
31442: LD_INT 2
31444: PUSH
31445: LD_INT 2
31447: PUSH
31448: EMPTY
31449: LIST
31450: LIST
31451: PUSH
31452: LD_INT 1
31454: PUSH
31455: LD_INT 2
31457: PUSH
31458: EMPTY
31459: LIST
31460: LIST
31461: PUSH
31462: LD_INT 2
31464: NEG
31465: PUSH
31466: LD_INT 1
31468: NEG
31469: PUSH
31470: EMPTY
31471: LIST
31472: LIST
31473: PUSH
31474: LD_INT 2
31476: NEG
31477: PUSH
31478: LD_INT 2
31480: NEG
31481: PUSH
31482: EMPTY
31483: LIST
31484: LIST
31485: PUSH
31486: LD_INT 3
31488: PUSH
31489: LD_INT 2
31491: PUSH
31492: EMPTY
31493: LIST
31494: LIST
31495: PUSH
31496: LD_INT 3
31498: PUSH
31499: LD_INT 3
31501: PUSH
31502: EMPTY
31503: LIST
31504: LIST
31505: PUSH
31506: LD_INT 2
31508: PUSH
31509: LD_INT 3
31511: PUSH
31512: EMPTY
31513: LIST
31514: LIST
31515: PUSH
31516: EMPTY
31517: LIST
31518: LIST
31519: LIST
31520: LIST
31521: LIST
31522: LIST
31523: LIST
31524: LIST
31525: LIST
31526: LIST
31527: LIST
31528: LIST
31529: LIST
31530: LIST
31531: LIST
31532: LIST
31533: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31534: LD_ADDR_VAR 0 17
31538: PUSH
31539: LD_INT 0
31541: PUSH
31542: LD_INT 0
31544: PUSH
31545: EMPTY
31546: LIST
31547: LIST
31548: PUSH
31549: LD_INT 0
31551: PUSH
31552: LD_INT 1
31554: NEG
31555: PUSH
31556: EMPTY
31557: LIST
31558: LIST
31559: PUSH
31560: LD_INT 1
31562: PUSH
31563: LD_INT 0
31565: PUSH
31566: EMPTY
31567: LIST
31568: LIST
31569: PUSH
31570: LD_INT 1
31572: PUSH
31573: LD_INT 1
31575: PUSH
31576: EMPTY
31577: LIST
31578: LIST
31579: PUSH
31580: LD_INT 0
31582: PUSH
31583: LD_INT 1
31585: PUSH
31586: EMPTY
31587: LIST
31588: LIST
31589: PUSH
31590: LD_INT 1
31592: NEG
31593: PUSH
31594: LD_INT 0
31596: PUSH
31597: EMPTY
31598: LIST
31599: LIST
31600: PUSH
31601: LD_INT 1
31603: NEG
31604: PUSH
31605: LD_INT 1
31607: NEG
31608: PUSH
31609: EMPTY
31610: LIST
31611: LIST
31612: PUSH
31613: LD_INT 1
31615: NEG
31616: PUSH
31617: LD_INT 2
31619: NEG
31620: PUSH
31621: EMPTY
31622: LIST
31623: LIST
31624: PUSH
31625: LD_INT 0
31627: PUSH
31628: LD_INT 2
31630: NEG
31631: PUSH
31632: EMPTY
31633: LIST
31634: LIST
31635: PUSH
31636: LD_INT 1
31638: PUSH
31639: LD_INT 1
31641: NEG
31642: PUSH
31643: EMPTY
31644: LIST
31645: LIST
31646: PUSH
31647: LD_INT 2
31649: PUSH
31650: LD_INT 0
31652: PUSH
31653: EMPTY
31654: LIST
31655: LIST
31656: PUSH
31657: LD_INT 2
31659: PUSH
31660: LD_INT 1
31662: PUSH
31663: EMPTY
31664: LIST
31665: LIST
31666: PUSH
31667: LD_INT 2
31669: PUSH
31670: LD_INT 2
31672: PUSH
31673: EMPTY
31674: LIST
31675: LIST
31676: PUSH
31677: LD_INT 1
31679: PUSH
31680: LD_INT 2
31682: PUSH
31683: EMPTY
31684: LIST
31685: LIST
31686: PUSH
31687: LD_INT 0
31689: PUSH
31690: LD_INT 2
31692: PUSH
31693: EMPTY
31694: LIST
31695: LIST
31696: PUSH
31697: LD_INT 1
31699: NEG
31700: PUSH
31701: LD_INT 1
31703: PUSH
31704: EMPTY
31705: LIST
31706: LIST
31707: PUSH
31708: LD_INT 2
31710: NEG
31711: PUSH
31712: LD_INT 0
31714: PUSH
31715: EMPTY
31716: LIST
31717: LIST
31718: PUSH
31719: LD_INT 2
31721: NEG
31722: PUSH
31723: LD_INT 1
31725: NEG
31726: PUSH
31727: EMPTY
31728: LIST
31729: LIST
31730: PUSH
31731: LD_INT 2
31733: NEG
31734: PUSH
31735: LD_INT 2
31737: NEG
31738: PUSH
31739: EMPTY
31740: LIST
31741: LIST
31742: PUSH
31743: EMPTY
31744: LIST
31745: LIST
31746: LIST
31747: LIST
31748: LIST
31749: LIST
31750: LIST
31751: LIST
31752: LIST
31753: LIST
31754: LIST
31755: LIST
31756: LIST
31757: LIST
31758: LIST
31759: LIST
31760: LIST
31761: LIST
31762: LIST
31763: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31764: LD_ADDR_VAR 0 18
31768: PUSH
31769: LD_INT 0
31771: PUSH
31772: LD_INT 0
31774: PUSH
31775: EMPTY
31776: LIST
31777: LIST
31778: PUSH
31779: LD_INT 0
31781: PUSH
31782: LD_INT 1
31784: NEG
31785: PUSH
31786: EMPTY
31787: LIST
31788: LIST
31789: PUSH
31790: LD_INT 1
31792: PUSH
31793: LD_INT 0
31795: PUSH
31796: EMPTY
31797: LIST
31798: LIST
31799: PUSH
31800: LD_INT 1
31802: PUSH
31803: LD_INT 1
31805: PUSH
31806: EMPTY
31807: LIST
31808: LIST
31809: PUSH
31810: LD_INT 0
31812: PUSH
31813: LD_INT 1
31815: PUSH
31816: EMPTY
31817: LIST
31818: LIST
31819: PUSH
31820: LD_INT 1
31822: NEG
31823: PUSH
31824: LD_INT 0
31826: PUSH
31827: EMPTY
31828: LIST
31829: LIST
31830: PUSH
31831: LD_INT 1
31833: NEG
31834: PUSH
31835: LD_INT 1
31837: NEG
31838: PUSH
31839: EMPTY
31840: LIST
31841: LIST
31842: PUSH
31843: LD_INT 1
31845: NEG
31846: PUSH
31847: LD_INT 2
31849: NEG
31850: PUSH
31851: EMPTY
31852: LIST
31853: LIST
31854: PUSH
31855: LD_INT 0
31857: PUSH
31858: LD_INT 2
31860: NEG
31861: PUSH
31862: EMPTY
31863: LIST
31864: LIST
31865: PUSH
31866: LD_INT 1
31868: PUSH
31869: LD_INT 1
31871: NEG
31872: PUSH
31873: EMPTY
31874: LIST
31875: LIST
31876: PUSH
31877: LD_INT 2
31879: PUSH
31880: LD_INT 0
31882: PUSH
31883: EMPTY
31884: LIST
31885: LIST
31886: PUSH
31887: LD_INT 2
31889: PUSH
31890: LD_INT 1
31892: PUSH
31893: EMPTY
31894: LIST
31895: LIST
31896: PUSH
31897: LD_INT 2
31899: PUSH
31900: LD_INT 2
31902: PUSH
31903: EMPTY
31904: LIST
31905: LIST
31906: PUSH
31907: LD_INT 1
31909: PUSH
31910: LD_INT 2
31912: PUSH
31913: EMPTY
31914: LIST
31915: LIST
31916: PUSH
31917: LD_INT 0
31919: PUSH
31920: LD_INT 2
31922: PUSH
31923: EMPTY
31924: LIST
31925: LIST
31926: PUSH
31927: LD_INT 1
31929: NEG
31930: PUSH
31931: LD_INT 1
31933: PUSH
31934: EMPTY
31935: LIST
31936: LIST
31937: PUSH
31938: LD_INT 2
31940: NEG
31941: PUSH
31942: LD_INT 0
31944: PUSH
31945: EMPTY
31946: LIST
31947: LIST
31948: PUSH
31949: LD_INT 2
31951: NEG
31952: PUSH
31953: LD_INT 1
31955: NEG
31956: PUSH
31957: EMPTY
31958: LIST
31959: LIST
31960: PUSH
31961: LD_INT 2
31963: NEG
31964: PUSH
31965: LD_INT 2
31967: NEG
31968: PUSH
31969: EMPTY
31970: LIST
31971: LIST
31972: PUSH
31973: EMPTY
31974: LIST
31975: LIST
31976: LIST
31977: LIST
31978: LIST
31979: LIST
31980: LIST
31981: LIST
31982: LIST
31983: LIST
31984: LIST
31985: LIST
31986: LIST
31987: LIST
31988: LIST
31989: LIST
31990: LIST
31991: LIST
31992: LIST
31993: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31994: LD_ADDR_VAR 0 19
31998: PUSH
31999: LD_INT 0
32001: PUSH
32002: LD_INT 0
32004: PUSH
32005: EMPTY
32006: LIST
32007: LIST
32008: PUSH
32009: LD_INT 0
32011: PUSH
32012: LD_INT 1
32014: NEG
32015: PUSH
32016: EMPTY
32017: LIST
32018: LIST
32019: PUSH
32020: LD_INT 1
32022: PUSH
32023: LD_INT 0
32025: PUSH
32026: EMPTY
32027: LIST
32028: LIST
32029: PUSH
32030: LD_INT 1
32032: PUSH
32033: LD_INT 1
32035: PUSH
32036: EMPTY
32037: LIST
32038: LIST
32039: PUSH
32040: LD_INT 0
32042: PUSH
32043: LD_INT 1
32045: PUSH
32046: EMPTY
32047: LIST
32048: LIST
32049: PUSH
32050: LD_INT 1
32052: NEG
32053: PUSH
32054: LD_INT 0
32056: PUSH
32057: EMPTY
32058: LIST
32059: LIST
32060: PUSH
32061: LD_INT 1
32063: NEG
32064: PUSH
32065: LD_INT 1
32067: NEG
32068: PUSH
32069: EMPTY
32070: LIST
32071: LIST
32072: PUSH
32073: LD_INT 1
32075: NEG
32076: PUSH
32077: LD_INT 2
32079: NEG
32080: PUSH
32081: EMPTY
32082: LIST
32083: LIST
32084: PUSH
32085: LD_INT 0
32087: PUSH
32088: LD_INT 2
32090: NEG
32091: PUSH
32092: EMPTY
32093: LIST
32094: LIST
32095: PUSH
32096: LD_INT 1
32098: PUSH
32099: LD_INT 1
32101: NEG
32102: PUSH
32103: EMPTY
32104: LIST
32105: LIST
32106: PUSH
32107: LD_INT 2
32109: PUSH
32110: LD_INT 0
32112: PUSH
32113: EMPTY
32114: LIST
32115: LIST
32116: PUSH
32117: LD_INT 2
32119: PUSH
32120: LD_INT 1
32122: PUSH
32123: EMPTY
32124: LIST
32125: LIST
32126: PUSH
32127: LD_INT 2
32129: PUSH
32130: LD_INT 2
32132: PUSH
32133: EMPTY
32134: LIST
32135: LIST
32136: PUSH
32137: LD_INT 1
32139: PUSH
32140: LD_INT 2
32142: PUSH
32143: EMPTY
32144: LIST
32145: LIST
32146: PUSH
32147: LD_INT 0
32149: PUSH
32150: LD_INT 2
32152: PUSH
32153: EMPTY
32154: LIST
32155: LIST
32156: PUSH
32157: LD_INT 1
32159: NEG
32160: PUSH
32161: LD_INT 1
32163: PUSH
32164: EMPTY
32165: LIST
32166: LIST
32167: PUSH
32168: LD_INT 2
32170: NEG
32171: PUSH
32172: LD_INT 0
32174: PUSH
32175: EMPTY
32176: LIST
32177: LIST
32178: PUSH
32179: LD_INT 2
32181: NEG
32182: PUSH
32183: LD_INT 1
32185: NEG
32186: PUSH
32187: EMPTY
32188: LIST
32189: LIST
32190: PUSH
32191: LD_INT 2
32193: NEG
32194: PUSH
32195: LD_INT 2
32197: NEG
32198: PUSH
32199: EMPTY
32200: LIST
32201: LIST
32202: PUSH
32203: EMPTY
32204: LIST
32205: LIST
32206: LIST
32207: LIST
32208: LIST
32209: LIST
32210: LIST
32211: LIST
32212: LIST
32213: LIST
32214: LIST
32215: LIST
32216: LIST
32217: LIST
32218: LIST
32219: LIST
32220: LIST
32221: LIST
32222: LIST
32223: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32224: LD_ADDR_VAR 0 20
32228: PUSH
32229: LD_INT 0
32231: PUSH
32232: LD_INT 0
32234: PUSH
32235: EMPTY
32236: LIST
32237: LIST
32238: PUSH
32239: LD_INT 0
32241: PUSH
32242: LD_INT 1
32244: NEG
32245: PUSH
32246: EMPTY
32247: LIST
32248: LIST
32249: PUSH
32250: LD_INT 1
32252: PUSH
32253: LD_INT 0
32255: PUSH
32256: EMPTY
32257: LIST
32258: LIST
32259: PUSH
32260: LD_INT 1
32262: PUSH
32263: LD_INT 1
32265: PUSH
32266: EMPTY
32267: LIST
32268: LIST
32269: PUSH
32270: LD_INT 0
32272: PUSH
32273: LD_INT 1
32275: PUSH
32276: EMPTY
32277: LIST
32278: LIST
32279: PUSH
32280: LD_INT 1
32282: NEG
32283: PUSH
32284: LD_INT 0
32286: PUSH
32287: EMPTY
32288: LIST
32289: LIST
32290: PUSH
32291: LD_INT 1
32293: NEG
32294: PUSH
32295: LD_INT 1
32297: NEG
32298: PUSH
32299: EMPTY
32300: LIST
32301: LIST
32302: PUSH
32303: LD_INT 1
32305: NEG
32306: PUSH
32307: LD_INT 2
32309: NEG
32310: PUSH
32311: EMPTY
32312: LIST
32313: LIST
32314: PUSH
32315: LD_INT 0
32317: PUSH
32318: LD_INT 2
32320: NEG
32321: PUSH
32322: EMPTY
32323: LIST
32324: LIST
32325: PUSH
32326: LD_INT 1
32328: PUSH
32329: LD_INT 1
32331: NEG
32332: PUSH
32333: EMPTY
32334: LIST
32335: LIST
32336: PUSH
32337: LD_INT 2
32339: PUSH
32340: LD_INT 0
32342: PUSH
32343: EMPTY
32344: LIST
32345: LIST
32346: PUSH
32347: LD_INT 2
32349: PUSH
32350: LD_INT 1
32352: PUSH
32353: EMPTY
32354: LIST
32355: LIST
32356: PUSH
32357: LD_INT 2
32359: PUSH
32360: LD_INT 2
32362: PUSH
32363: EMPTY
32364: LIST
32365: LIST
32366: PUSH
32367: LD_INT 1
32369: PUSH
32370: LD_INT 2
32372: PUSH
32373: EMPTY
32374: LIST
32375: LIST
32376: PUSH
32377: LD_INT 0
32379: PUSH
32380: LD_INT 2
32382: PUSH
32383: EMPTY
32384: LIST
32385: LIST
32386: PUSH
32387: LD_INT 1
32389: NEG
32390: PUSH
32391: LD_INT 1
32393: PUSH
32394: EMPTY
32395: LIST
32396: LIST
32397: PUSH
32398: LD_INT 2
32400: NEG
32401: PUSH
32402: LD_INT 0
32404: PUSH
32405: EMPTY
32406: LIST
32407: LIST
32408: PUSH
32409: LD_INT 2
32411: NEG
32412: PUSH
32413: LD_INT 1
32415: NEG
32416: PUSH
32417: EMPTY
32418: LIST
32419: LIST
32420: PUSH
32421: LD_INT 2
32423: NEG
32424: PUSH
32425: LD_INT 2
32427: NEG
32428: PUSH
32429: EMPTY
32430: LIST
32431: LIST
32432: PUSH
32433: EMPTY
32434: LIST
32435: LIST
32436: LIST
32437: LIST
32438: LIST
32439: LIST
32440: LIST
32441: LIST
32442: LIST
32443: LIST
32444: LIST
32445: LIST
32446: LIST
32447: LIST
32448: LIST
32449: LIST
32450: LIST
32451: LIST
32452: LIST
32453: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32454: LD_ADDR_VAR 0 21
32458: PUSH
32459: LD_INT 0
32461: PUSH
32462: LD_INT 0
32464: PUSH
32465: EMPTY
32466: LIST
32467: LIST
32468: PUSH
32469: LD_INT 0
32471: PUSH
32472: LD_INT 1
32474: NEG
32475: PUSH
32476: EMPTY
32477: LIST
32478: LIST
32479: PUSH
32480: LD_INT 1
32482: PUSH
32483: LD_INT 0
32485: PUSH
32486: EMPTY
32487: LIST
32488: LIST
32489: PUSH
32490: LD_INT 1
32492: PUSH
32493: LD_INT 1
32495: PUSH
32496: EMPTY
32497: LIST
32498: LIST
32499: PUSH
32500: LD_INT 0
32502: PUSH
32503: LD_INT 1
32505: PUSH
32506: EMPTY
32507: LIST
32508: LIST
32509: PUSH
32510: LD_INT 1
32512: NEG
32513: PUSH
32514: LD_INT 0
32516: PUSH
32517: EMPTY
32518: LIST
32519: LIST
32520: PUSH
32521: LD_INT 1
32523: NEG
32524: PUSH
32525: LD_INT 1
32527: NEG
32528: PUSH
32529: EMPTY
32530: LIST
32531: LIST
32532: PUSH
32533: LD_INT 1
32535: NEG
32536: PUSH
32537: LD_INT 2
32539: NEG
32540: PUSH
32541: EMPTY
32542: LIST
32543: LIST
32544: PUSH
32545: LD_INT 0
32547: PUSH
32548: LD_INT 2
32550: NEG
32551: PUSH
32552: EMPTY
32553: LIST
32554: LIST
32555: PUSH
32556: LD_INT 1
32558: PUSH
32559: LD_INT 1
32561: NEG
32562: PUSH
32563: EMPTY
32564: LIST
32565: LIST
32566: PUSH
32567: LD_INT 2
32569: PUSH
32570: LD_INT 0
32572: PUSH
32573: EMPTY
32574: LIST
32575: LIST
32576: PUSH
32577: LD_INT 2
32579: PUSH
32580: LD_INT 1
32582: PUSH
32583: EMPTY
32584: LIST
32585: LIST
32586: PUSH
32587: LD_INT 2
32589: PUSH
32590: LD_INT 2
32592: PUSH
32593: EMPTY
32594: LIST
32595: LIST
32596: PUSH
32597: LD_INT 1
32599: PUSH
32600: LD_INT 2
32602: PUSH
32603: EMPTY
32604: LIST
32605: LIST
32606: PUSH
32607: LD_INT 0
32609: PUSH
32610: LD_INT 2
32612: PUSH
32613: EMPTY
32614: LIST
32615: LIST
32616: PUSH
32617: LD_INT 1
32619: NEG
32620: PUSH
32621: LD_INT 1
32623: PUSH
32624: EMPTY
32625: LIST
32626: LIST
32627: PUSH
32628: LD_INT 2
32630: NEG
32631: PUSH
32632: LD_INT 0
32634: PUSH
32635: EMPTY
32636: LIST
32637: LIST
32638: PUSH
32639: LD_INT 2
32641: NEG
32642: PUSH
32643: LD_INT 1
32645: NEG
32646: PUSH
32647: EMPTY
32648: LIST
32649: LIST
32650: PUSH
32651: LD_INT 2
32653: NEG
32654: PUSH
32655: LD_INT 2
32657: NEG
32658: PUSH
32659: EMPTY
32660: LIST
32661: LIST
32662: PUSH
32663: EMPTY
32664: LIST
32665: LIST
32666: LIST
32667: LIST
32668: LIST
32669: LIST
32670: LIST
32671: LIST
32672: LIST
32673: LIST
32674: LIST
32675: LIST
32676: LIST
32677: LIST
32678: LIST
32679: LIST
32680: LIST
32681: LIST
32682: LIST
32683: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32684: LD_ADDR_VAR 0 22
32688: PUSH
32689: LD_INT 0
32691: PUSH
32692: LD_INT 0
32694: PUSH
32695: EMPTY
32696: LIST
32697: LIST
32698: PUSH
32699: LD_INT 0
32701: PUSH
32702: LD_INT 1
32704: NEG
32705: PUSH
32706: EMPTY
32707: LIST
32708: LIST
32709: PUSH
32710: LD_INT 1
32712: PUSH
32713: LD_INT 0
32715: PUSH
32716: EMPTY
32717: LIST
32718: LIST
32719: PUSH
32720: LD_INT 1
32722: PUSH
32723: LD_INT 1
32725: PUSH
32726: EMPTY
32727: LIST
32728: LIST
32729: PUSH
32730: LD_INT 0
32732: PUSH
32733: LD_INT 1
32735: PUSH
32736: EMPTY
32737: LIST
32738: LIST
32739: PUSH
32740: LD_INT 1
32742: NEG
32743: PUSH
32744: LD_INT 0
32746: PUSH
32747: EMPTY
32748: LIST
32749: LIST
32750: PUSH
32751: LD_INT 1
32753: NEG
32754: PUSH
32755: LD_INT 1
32757: NEG
32758: PUSH
32759: EMPTY
32760: LIST
32761: LIST
32762: PUSH
32763: LD_INT 1
32765: NEG
32766: PUSH
32767: LD_INT 2
32769: NEG
32770: PUSH
32771: EMPTY
32772: LIST
32773: LIST
32774: PUSH
32775: LD_INT 0
32777: PUSH
32778: LD_INT 2
32780: NEG
32781: PUSH
32782: EMPTY
32783: LIST
32784: LIST
32785: PUSH
32786: LD_INT 1
32788: PUSH
32789: LD_INT 1
32791: NEG
32792: PUSH
32793: EMPTY
32794: LIST
32795: LIST
32796: PUSH
32797: LD_INT 2
32799: PUSH
32800: LD_INT 0
32802: PUSH
32803: EMPTY
32804: LIST
32805: LIST
32806: PUSH
32807: LD_INT 2
32809: PUSH
32810: LD_INT 1
32812: PUSH
32813: EMPTY
32814: LIST
32815: LIST
32816: PUSH
32817: LD_INT 2
32819: PUSH
32820: LD_INT 2
32822: PUSH
32823: EMPTY
32824: LIST
32825: LIST
32826: PUSH
32827: LD_INT 1
32829: PUSH
32830: LD_INT 2
32832: PUSH
32833: EMPTY
32834: LIST
32835: LIST
32836: PUSH
32837: LD_INT 0
32839: PUSH
32840: LD_INT 2
32842: PUSH
32843: EMPTY
32844: LIST
32845: LIST
32846: PUSH
32847: LD_INT 1
32849: NEG
32850: PUSH
32851: LD_INT 1
32853: PUSH
32854: EMPTY
32855: LIST
32856: LIST
32857: PUSH
32858: LD_INT 2
32860: NEG
32861: PUSH
32862: LD_INT 0
32864: PUSH
32865: EMPTY
32866: LIST
32867: LIST
32868: PUSH
32869: LD_INT 2
32871: NEG
32872: PUSH
32873: LD_INT 1
32875: NEG
32876: PUSH
32877: EMPTY
32878: LIST
32879: LIST
32880: PUSH
32881: LD_INT 2
32883: NEG
32884: PUSH
32885: LD_INT 2
32887: NEG
32888: PUSH
32889: EMPTY
32890: LIST
32891: LIST
32892: PUSH
32893: EMPTY
32894: LIST
32895: LIST
32896: LIST
32897: LIST
32898: LIST
32899: LIST
32900: LIST
32901: LIST
32902: LIST
32903: LIST
32904: LIST
32905: LIST
32906: LIST
32907: LIST
32908: LIST
32909: LIST
32910: LIST
32911: LIST
32912: LIST
32913: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
32914: LD_ADDR_VAR 0 23
32918: PUSH
32919: LD_INT 0
32921: PUSH
32922: LD_INT 0
32924: PUSH
32925: EMPTY
32926: LIST
32927: LIST
32928: PUSH
32929: LD_INT 0
32931: PUSH
32932: LD_INT 1
32934: NEG
32935: PUSH
32936: EMPTY
32937: LIST
32938: LIST
32939: PUSH
32940: LD_INT 1
32942: PUSH
32943: LD_INT 0
32945: PUSH
32946: EMPTY
32947: LIST
32948: LIST
32949: PUSH
32950: LD_INT 1
32952: PUSH
32953: LD_INT 1
32955: PUSH
32956: EMPTY
32957: LIST
32958: LIST
32959: PUSH
32960: LD_INT 0
32962: PUSH
32963: LD_INT 1
32965: PUSH
32966: EMPTY
32967: LIST
32968: LIST
32969: PUSH
32970: LD_INT 1
32972: NEG
32973: PUSH
32974: LD_INT 0
32976: PUSH
32977: EMPTY
32978: LIST
32979: LIST
32980: PUSH
32981: LD_INT 1
32983: NEG
32984: PUSH
32985: LD_INT 1
32987: NEG
32988: PUSH
32989: EMPTY
32990: LIST
32991: LIST
32992: PUSH
32993: LD_INT 1
32995: NEG
32996: PUSH
32997: LD_INT 2
32999: NEG
33000: PUSH
33001: EMPTY
33002: LIST
33003: LIST
33004: PUSH
33005: LD_INT 0
33007: PUSH
33008: LD_INT 2
33010: NEG
33011: PUSH
33012: EMPTY
33013: LIST
33014: LIST
33015: PUSH
33016: LD_INT 1
33018: PUSH
33019: LD_INT 1
33021: NEG
33022: PUSH
33023: EMPTY
33024: LIST
33025: LIST
33026: PUSH
33027: LD_INT 2
33029: PUSH
33030: LD_INT 0
33032: PUSH
33033: EMPTY
33034: LIST
33035: LIST
33036: PUSH
33037: LD_INT 2
33039: PUSH
33040: LD_INT 1
33042: PUSH
33043: EMPTY
33044: LIST
33045: LIST
33046: PUSH
33047: LD_INT 2
33049: PUSH
33050: LD_INT 2
33052: PUSH
33053: EMPTY
33054: LIST
33055: LIST
33056: PUSH
33057: LD_INT 1
33059: PUSH
33060: LD_INT 2
33062: PUSH
33063: EMPTY
33064: LIST
33065: LIST
33066: PUSH
33067: LD_INT 0
33069: PUSH
33070: LD_INT 2
33072: PUSH
33073: EMPTY
33074: LIST
33075: LIST
33076: PUSH
33077: LD_INT 1
33079: NEG
33080: PUSH
33081: LD_INT 1
33083: PUSH
33084: EMPTY
33085: LIST
33086: LIST
33087: PUSH
33088: LD_INT 2
33090: NEG
33091: PUSH
33092: LD_INT 0
33094: PUSH
33095: EMPTY
33096: LIST
33097: LIST
33098: PUSH
33099: LD_INT 2
33101: NEG
33102: PUSH
33103: LD_INT 1
33105: NEG
33106: PUSH
33107: EMPTY
33108: LIST
33109: LIST
33110: PUSH
33111: LD_INT 2
33113: NEG
33114: PUSH
33115: LD_INT 2
33117: NEG
33118: PUSH
33119: EMPTY
33120: LIST
33121: LIST
33122: PUSH
33123: LD_INT 2
33125: NEG
33126: PUSH
33127: LD_INT 3
33129: NEG
33130: PUSH
33131: EMPTY
33132: LIST
33133: LIST
33134: PUSH
33135: LD_INT 1
33137: NEG
33138: PUSH
33139: LD_INT 3
33141: NEG
33142: PUSH
33143: EMPTY
33144: LIST
33145: LIST
33146: PUSH
33147: LD_INT 1
33149: PUSH
33150: LD_INT 2
33152: NEG
33153: PUSH
33154: EMPTY
33155: LIST
33156: LIST
33157: PUSH
33158: LD_INT 2
33160: PUSH
33161: LD_INT 1
33163: NEG
33164: PUSH
33165: EMPTY
33166: LIST
33167: LIST
33168: PUSH
33169: EMPTY
33170: LIST
33171: LIST
33172: LIST
33173: LIST
33174: LIST
33175: LIST
33176: LIST
33177: LIST
33178: LIST
33179: LIST
33180: LIST
33181: LIST
33182: LIST
33183: LIST
33184: LIST
33185: LIST
33186: LIST
33187: LIST
33188: LIST
33189: LIST
33190: LIST
33191: LIST
33192: LIST
33193: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
33194: LD_ADDR_VAR 0 24
33198: PUSH
33199: LD_INT 0
33201: PUSH
33202: LD_INT 0
33204: PUSH
33205: EMPTY
33206: LIST
33207: LIST
33208: PUSH
33209: LD_INT 0
33211: PUSH
33212: LD_INT 1
33214: NEG
33215: PUSH
33216: EMPTY
33217: LIST
33218: LIST
33219: PUSH
33220: LD_INT 1
33222: PUSH
33223: LD_INT 0
33225: PUSH
33226: EMPTY
33227: LIST
33228: LIST
33229: PUSH
33230: LD_INT 1
33232: PUSH
33233: LD_INT 1
33235: PUSH
33236: EMPTY
33237: LIST
33238: LIST
33239: PUSH
33240: LD_INT 0
33242: PUSH
33243: LD_INT 1
33245: PUSH
33246: EMPTY
33247: LIST
33248: LIST
33249: PUSH
33250: LD_INT 1
33252: NEG
33253: PUSH
33254: LD_INT 0
33256: PUSH
33257: EMPTY
33258: LIST
33259: LIST
33260: PUSH
33261: LD_INT 1
33263: NEG
33264: PUSH
33265: LD_INT 1
33267: NEG
33268: PUSH
33269: EMPTY
33270: LIST
33271: LIST
33272: PUSH
33273: LD_INT 1
33275: NEG
33276: PUSH
33277: LD_INT 2
33279: NEG
33280: PUSH
33281: EMPTY
33282: LIST
33283: LIST
33284: PUSH
33285: LD_INT 0
33287: PUSH
33288: LD_INT 2
33290: NEG
33291: PUSH
33292: EMPTY
33293: LIST
33294: LIST
33295: PUSH
33296: LD_INT 1
33298: PUSH
33299: LD_INT 1
33301: NEG
33302: PUSH
33303: EMPTY
33304: LIST
33305: LIST
33306: PUSH
33307: LD_INT 2
33309: PUSH
33310: LD_INT 0
33312: PUSH
33313: EMPTY
33314: LIST
33315: LIST
33316: PUSH
33317: LD_INT 2
33319: PUSH
33320: LD_INT 1
33322: PUSH
33323: EMPTY
33324: LIST
33325: LIST
33326: PUSH
33327: LD_INT 2
33329: PUSH
33330: LD_INT 2
33332: PUSH
33333: EMPTY
33334: LIST
33335: LIST
33336: PUSH
33337: LD_INT 1
33339: PUSH
33340: LD_INT 2
33342: PUSH
33343: EMPTY
33344: LIST
33345: LIST
33346: PUSH
33347: LD_INT 0
33349: PUSH
33350: LD_INT 2
33352: PUSH
33353: EMPTY
33354: LIST
33355: LIST
33356: PUSH
33357: LD_INT 1
33359: NEG
33360: PUSH
33361: LD_INT 1
33363: PUSH
33364: EMPTY
33365: LIST
33366: LIST
33367: PUSH
33368: LD_INT 2
33370: NEG
33371: PUSH
33372: LD_INT 0
33374: PUSH
33375: EMPTY
33376: LIST
33377: LIST
33378: PUSH
33379: LD_INT 2
33381: NEG
33382: PUSH
33383: LD_INT 1
33385: NEG
33386: PUSH
33387: EMPTY
33388: LIST
33389: LIST
33390: PUSH
33391: LD_INT 2
33393: NEG
33394: PUSH
33395: LD_INT 2
33397: NEG
33398: PUSH
33399: EMPTY
33400: LIST
33401: LIST
33402: PUSH
33403: LD_INT 1
33405: PUSH
33406: LD_INT 2
33408: NEG
33409: PUSH
33410: EMPTY
33411: LIST
33412: LIST
33413: PUSH
33414: LD_INT 2
33416: PUSH
33417: LD_INT 1
33419: NEG
33420: PUSH
33421: EMPTY
33422: LIST
33423: LIST
33424: PUSH
33425: LD_INT 3
33427: PUSH
33428: LD_INT 1
33430: PUSH
33431: EMPTY
33432: LIST
33433: LIST
33434: PUSH
33435: LD_INT 3
33437: PUSH
33438: LD_INT 2
33440: PUSH
33441: EMPTY
33442: LIST
33443: LIST
33444: PUSH
33445: EMPTY
33446: LIST
33447: LIST
33448: LIST
33449: LIST
33450: LIST
33451: LIST
33452: LIST
33453: LIST
33454: LIST
33455: LIST
33456: LIST
33457: LIST
33458: LIST
33459: LIST
33460: LIST
33461: LIST
33462: LIST
33463: LIST
33464: LIST
33465: LIST
33466: LIST
33467: LIST
33468: LIST
33469: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
33470: LD_ADDR_VAR 0 25
33474: PUSH
33475: LD_INT 0
33477: PUSH
33478: LD_INT 0
33480: PUSH
33481: EMPTY
33482: LIST
33483: LIST
33484: PUSH
33485: LD_INT 0
33487: PUSH
33488: LD_INT 1
33490: NEG
33491: PUSH
33492: EMPTY
33493: LIST
33494: LIST
33495: PUSH
33496: LD_INT 1
33498: PUSH
33499: LD_INT 0
33501: PUSH
33502: EMPTY
33503: LIST
33504: LIST
33505: PUSH
33506: LD_INT 1
33508: PUSH
33509: LD_INT 1
33511: PUSH
33512: EMPTY
33513: LIST
33514: LIST
33515: PUSH
33516: LD_INT 0
33518: PUSH
33519: LD_INT 1
33521: PUSH
33522: EMPTY
33523: LIST
33524: LIST
33525: PUSH
33526: LD_INT 1
33528: NEG
33529: PUSH
33530: LD_INT 0
33532: PUSH
33533: EMPTY
33534: LIST
33535: LIST
33536: PUSH
33537: LD_INT 1
33539: NEG
33540: PUSH
33541: LD_INT 1
33543: NEG
33544: PUSH
33545: EMPTY
33546: LIST
33547: LIST
33548: PUSH
33549: LD_INT 1
33551: NEG
33552: PUSH
33553: LD_INT 2
33555: NEG
33556: PUSH
33557: EMPTY
33558: LIST
33559: LIST
33560: PUSH
33561: LD_INT 0
33563: PUSH
33564: LD_INT 2
33566: NEG
33567: PUSH
33568: EMPTY
33569: LIST
33570: LIST
33571: PUSH
33572: LD_INT 1
33574: PUSH
33575: LD_INT 1
33577: NEG
33578: PUSH
33579: EMPTY
33580: LIST
33581: LIST
33582: PUSH
33583: LD_INT 2
33585: PUSH
33586: LD_INT 0
33588: PUSH
33589: EMPTY
33590: LIST
33591: LIST
33592: PUSH
33593: LD_INT 2
33595: PUSH
33596: LD_INT 1
33598: PUSH
33599: EMPTY
33600: LIST
33601: LIST
33602: PUSH
33603: LD_INT 2
33605: PUSH
33606: LD_INT 2
33608: PUSH
33609: EMPTY
33610: LIST
33611: LIST
33612: PUSH
33613: LD_INT 1
33615: PUSH
33616: LD_INT 2
33618: PUSH
33619: EMPTY
33620: LIST
33621: LIST
33622: PUSH
33623: LD_INT 0
33625: PUSH
33626: LD_INT 2
33628: PUSH
33629: EMPTY
33630: LIST
33631: LIST
33632: PUSH
33633: LD_INT 1
33635: NEG
33636: PUSH
33637: LD_INT 1
33639: PUSH
33640: EMPTY
33641: LIST
33642: LIST
33643: PUSH
33644: LD_INT 2
33646: NEG
33647: PUSH
33648: LD_INT 0
33650: PUSH
33651: EMPTY
33652: LIST
33653: LIST
33654: PUSH
33655: LD_INT 2
33657: NEG
33658: PUSH
33659: LD_INT 1
33661: NEG
33662: PUSH
33663: EMPTY
33664: LIST
33665: LIST
33666: PUSH
33667: LD_INT 2
33669: NEG
33670: PUSH
33671: LD_INT 2
33673: NEG
33674: PUSH
33675: EMPTY
33676: LIST
33677: LIST
33678: PUSH
33679: LD_INT 3
33681: PUSH
33682: LD_INT 1
33684: PUSH
33685: EMPTY
33686: LIST
33687: LIST
33688: PUSH
33689: LD_INT 3
33691: PUSH
33692: LD_INT 2
33694: PUSH
33695: EMPTY
33696: LIST
33697: LIST
33698: PUSH
33699: LD_INT 2
33701: PUSH
33702: LD_INT 3
33704: PUSH
33705: EMPTY
33706: LIST
33707: LIST
33708: PUSH
33709: LD_INT 1
33711: PUSH
33712: LD_INT 3
33714: PUSH
33715: EMPTY
33716: LIST
33717: LIST
33718: PUSH
33719: EMPTY
33720: LIST
33721: LIST
33722: LIST
33723: LIST
33724: LIST
33725: LIST
33726: LIST
33727: LIST
33728: LIST
33729: LIST
33730: LIST
33731: LIST
33732: LIST
33733: LIST
33734: LIST
33735: LIST
33736: LIST
33737: LIST
33738: LIST
33739: LIST
33740: LIST
33741: LIST
33742: LIST
33743: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
33744: LD_ADDR_VAR 0 26
33748: PUSH
33749: LD_INT 0
33751: PUSH
33752: LD_INT 0
33754: PUSH
33755: EMPTY
33756: LIST
33757: LIST
33758: PUSH
33759: LD_INT 0
33761: PUSH
33762: LD_INT 1
33764: NEG
33765: PUSH
33766: EMPTY
33767: LIST
33768: LIST
33769: PUSH
33770: LD_INT 1
33772: PUSH
33773: LD_INT 0
33775: PUSH
33776: EMPTY
33777: LIST
33778: LIST
33779: PUSH
33780: LD_INT 1
33782: PUSH
33783: LD_INT 1
33785: PUSH
33786: EMPTY
33787: LIST
33788: LIST
33789: PUSH
33790: LD_INT 0
33792: PUSH
33793: LD_INT 1
33795: PUSH
33796: EMPTY
33797: LIST
33798: LIST
33799: PUSH
33800: LD_INT 1
33802: NEG
33803: PUSH
33804: LD_INT 0
33806: PUSH
33807: EMPTY
33808: LIST
33809: LIST
33810: PUSH
33811: LD_INT 1
33813: NEG
33814: PUSH
33815: LD_INT 1
33817: NEG
33818: PUSH
33819: EMPTY
33820: LIST
33821: LIST
33822: PUSH
33823: LD_INT 1
33825: NEG
33826: PUSH
33827: LD_INT 2
33829: NEG
33830: PUSH
33831: EMPTY
33832: LIST
33833: LIST
33834: PUSH
33835: LD_INT 0
33837: PUSH
33838: LD_INT 2
33840: NEG
33841: PUSH
33842: EMPTY
33843: LIST
33844: LIST
33845: PUSH
33846: LD_INT 1
33848: PUSH
33849: LD_INT 1
33851: NEG
33852: PUSH
33853: EMPTY
33854: LIST
33855: LIST
33856: PUSH
33857: LD_INT 2
33859: PUSH
33860: LD_INT 0
33862: PUSH
33863: EMPTY
33864: LIST
33865: LIST
33866: PUSH
33867: LD_INT 2
33869: PUSH
33870: LD_INT 1
33872: PUSH
33873: EMPTY
33874: LIST
33875: LIST
33876: PUSH
33877: LD_INT 2
33879: PUSH
33880: LD_INT 2
33882: PUSH
33883: EMPTY
33884: LIST
33885: LIST
33886: PUSH
33887: LD_INT 1
33889: PUSH
33890: LD_INT 2
33892: PUSH
33893: EMPTY
33894: LIST
33895: LIST
33896: PUSH
33897: LD_INT 0
33899: PUSH
33900: LD_INT 2
33902: PUSH
33903: EMPTY
33904: LIST
33905: LIST
33906: PUSH
33907: LD_INT 1
33909: NEG
33910: PUSH
33911: LD_INT 1
33913: PUSH
33914: EMPTY
33915: LIST
33916: LIST
33917: PUSH
33918: LD_INT 2
33920: NEG
33921: PUSH
33922: LD_INT 0
33924: PUSH
33925: EMPTY
33926: LIST
33927: LIST
33928: PUSH
33929: LD_INT 2
33931: NEG
33932: PUSH
33933: LD_INT 1
33935: NEG
33936: PUSH
33937: EMPTY
33938: LIST
33939: LIST
33940: PUSH
33941: LD_INT 2
33943: NEG
33944: PUSH
33945: LD_INT 2
33947: NEG
33948: PUSH
33949: EMPTY
33950: LIST
33951: LIST
33952: PUSH
33953: LD_INT 2
33955: PUSH
33956: LD_INT 3
33958: PUSH
33959: EMPTY
33960: LIST
33961: LIST
33962: PUSH
33963: LD_INT 1
33965: PUSH
33966: LD_INT 3
33968: PUSH
33969: EMPTY
33970: LIST
33971: LIST
33972: PUSH
33973: LD_INT 1
33975: NEG
33976: PUSH
33977: LD_INT 2
33979: PUSH
33980: EMPTY
33981: LIST
33982: LIST
33983: PUSH
33984: LD_INT 2
33986: NEG
33987: PUSH
33988: LD_INT 1
33990: PUSH
33991: EMPTY
33992: LIST
33993: LIST
33994: PUSH
33995: EMPTY
33996: LIST
33997: LIST
33998: LIST
33999: LIST
34000: LIST
34001: LIST
34002: LIST
34003: LIST
34004: LIST
34005: LIST
34006: LIST
34007: LIST
34008: LIST
34009: LIST
34010: LIST
34011: LIST
34012: LIST
34013: LIST
34014: LIST
34015: LIST
34016: LIST
34017: LIST
34018: LIST
34019: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
34020: LD_ADDR_VAR 0 27
34024: PUSH
34025: LD_INT 0
34027: PUSH
34028: LD_INT 0
34030: PUSH
34031: EMPTY
34032: LIST
34033: LIST
34034: PUSH
34035: LD_INT 0
34037: PUSH
34038: LD_INT 1
34040: NEG
34041: PUSH
34042: EMPTY
34043: LIST
34044: LIST
34045: PUSH
34046: LD_INT 1
34048: PUSH
34049: LD_INT 0
34051: PUSH
34052: EMPTY
34053: LIST
34054: LIST
34055: PUSH
34056: LD_INT 1
34058: PUSH
34059: LD_INT 1
34061: PUSH
34062: EMPTY
34063: LIST
34064: LIST
34065: PUSH
34066: LD_INT 0
34068: PUSH
34069: LD_INT 1
34071: PUSH
34072: EMPTY
34073: LIST
34074: LIST
34075: PUSH
34076: LD_INT 1
34078: NEG
34079: PUSH
34080: LD_INT 0
34082: PUSH
34083: EMPTY
34084: LIST
34085: LIST
34086: PUSH
34087: LD_INT 1
34089: NEG
34090: PUSH
34091: LD_INT 1
34093: NEG
34094: PUSH
34095: EMPTY
34096: LIST
34097: LIST
34098: PUSH
34099: LD_INT 1
34101: NEG
34102: PUSH
34103: LD_INT 2
34105: NEG
34106: PUSH
34107: EMPTY
34108: LIST
34109: LIST
34110: PUSH
34111: LD_INT 0
34113: PUSH
34114: LD_INT 2
34116: NEG
34117: PUSH
34118: EMPTY
34119: LIST
34120: LIST
34121: PUSH
34122: LD_INT 1
34124: PUSH
34125: LD_INT 1
34127: NEG
34128: PUSH
34129: EMPTY
34130: LIST
34131: LIST
34132: PUSH
34133: LD_INT 2
34135: PUSH
34136: LD_INT 0
34138: PUSH
34139: EMPTY
34140: LIST
34141: LIST
34142: PUSH
34143: LD_INT 2
34145: PUSH
34146: LD_INT 1
34148: PUSH
34149: EMPTY
34150: LIST
34151: LIST
34152: PUSH
34153: LD_INT 2
34155: PUSH
34156: LD_INT 2
34158: PUSH
34159: EMPTY
34160: LIST
34161: LIST
34162: PUSH
34163: LD_INT 1
34165: PUSH
34166: LD_INT 2
34168: PUSH
34169: EMPTY
34170: LIST
34171: LIST
34172: PUSH
34173: LD_INT 0
34175: PUSH
34176: LD_INT 2
34178: PUSH
34179: EMPTY
34180: LIST
34181: LIST
34182: PUSH
34183: LD_INT 1
34185: NEG
34186: PUSH
34187: LD_INT 1
34189: PUSH
34190: EMPTY
34191: LIST
34192: LIST
34193: PUSH
34194: LD_INT 2
34196: NEG
34197: PUSH
34198: LD_INT 0
34200: PUSH
34201: EMPTY
34202: LIST
34203: LIST
34204: PUSH
34205: LD_INT 2
34207: NEG
34208: PUSH
34209: LD_INT 1
34211: NEG
34212: PUSH
34213: EMPTY
34214: LIST
34215: LIST
34216: PUSH
34217: LD_INT 2
34219: NEG
34220: PUSH
34221: LD_INT 2
34223: NEG
34224: PUSH
34225: EMPTY
34226: LIST
34227: LIST
34228: PUSH
34229: LD_INT 1
34231: NEG
34232: PUSH
34233: LD_INT 2
34235: PUSH
34236: EMPTY
34237: LIST
34238: LIST
34239: PUSH
34240: LD_INT 2
34242: NEG
34243: PUSH
34244: LD_INT 1
34246: PUSH
34247: EMPTY
34248: LIST
34249: LIST
34250: PUSH
34251: LD_INT 3
34253: NEG
34254: PUSH
34255: LD_INT 1
34257: NEG
34258: PUSH
34259: EMPTY
34260: LIST
34261: LIST
34262: PUSH
34263: LD_INT 3
34265: NEG
34266: PUSH
34267: LD_INT 2
34269: NEG
34270: PUSH
34271: EMPTY
34272: LIST
34273: LIST
34274: PUSH
34275: EMPTY
34276: LIST
34277: LIST
34278: LIST
34279: LIST
34280: LIST
34281: LIST
34282: LIST
34283: LIST
34284: LIST
34285: LIST
34286: LIST
34287: LIST
34288: LIST
34289: LIST
34290: LIST
34291: LIST
34292: LIST
34293: LIST
34294: LIST
34295: LIST
34296: LIST
34297: LIST
34298: LIST
34299: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
34300: LD_ADDR_VAR 0 28
34304: PUSH
34305: LD_INT 0
34307: PUSH
34308: LD_INT 0
34310: PUSH
34311: EMPTY
34312: LIST
34313: LIST
34314: PUSH
34315: LD_INT 0
34317: PUSH
34318: LD_INT 1
34320: NEG
34321: PUSH
34322: EMPTY
34323: LIST
34324: LIST
34325: PUSH
34326: LD_INT 1
34328: PUSH
34329: LD_INT 0
34331: PUSH
34332: EMPTY
34333: LIST
34334: LIST
34335: PUSH
34336: LD_INT 1
34338: PUSH
34339: LD_INT 1
34341: PUSH
34342: EMPTY
34343: LIST
34344: LIST
34345: PUSH
34346: LD_INT 0
34348: PUSH
34349: LD_INT 1
34351: PUSH
34352: EMPTY
34353: LIST
34354: LIST
34355: PUSH
34356: LD_INT 1
34358: NEG
34359: PUSH
34360: LD_INT 0
34362: PUSH
34363: EMPTY
34364: LIST
34365: LIST
34366: PUSH
34367: LD_INT 1
34369: NEG
34370: PUSH
34371: LD_INT 1
34373: NEG
34374: PUSH
34375: EMPTY
34376: LIST
34377: LIST
34378: PUSH
34379: LD_INT 1
34381: NEG
34382: PUSH
34383: LD_INT 2
34385: NEG
34386: PUSH
34387: EMPTY
34388: LIST
34389: LIST
34390: PUSH
34391: LD_INT 0
34393: PUSH
34394: LD_INT 2
34396: NEG
34397: PUSH
34398: EMPTY
34399: LIST
34400: LIST
34401: PUSH
34402: LD_INT 1
34404: PUSH
34405: LD_INT 1
34407: NEG
34408: PUSH
34409: EMPTY
34410: LIST
34411: LIST
34412: PUSH
34413: LD_INT 2
34415: PUSH
34416: LD_INT 0
34418: PUSH
34419: EMPTY
34420: LIST
34421: LIST
34422: PUSH
34423: LD_INT 2
34425: PUSH
34426: LD_INT 1
34428: PUSH
34429: EMPTY
34430: LIST
34431: LIST
34432: PUSH
34433: LD_INT 2
34435: PUSH
34436: LD_INT 2
34438: PUSH
34439: EMPTY
34440: LIST
34441: LIST
34442: PUSH
34443: LD_INT 1
34445: PUSH
34446: LD_INT 2
34448: PUSH
34449: EMPTY
34450: LIST
34451: LIST
34452: PUSH
34453: LD_INT 0
34455: PUSH
34456: LD_INT 2
34458: PUSH
34459: EMPTY
34460: LIST
34461: LIST
34462: PUSH
34463: LD_INT 1
34465: NEG
34466: PUSH
34467: LD_INT 1
34469: PUSH
34470: EMPTY
34471: LIST
34472: LIST
34473: PUSH
34474: LD_INT 2
34476: NEG
34477: PUSH
34478: LD_INT 0
34480: PUSH
34481: EMPTY
34482: LIST
34483: LIST
34484: PUSH
34485: LD_INT 2
34487: NEG
34488: PUSH
34489: LD_INT 1
34491: NEG
34492: PUSH
34493: EMPTY
34494: LIST
34495: LIST
34496: PUSH
34497: LD_INT 2
34499: NEG
34500: PUSH
34501: LD_INT 2
34503: NEG
34504: PUSH
34505: EMPTY
34506: LIST
34507: LIST
34508: PUSH
34509: LD_INT 2
34511: NEG
34512: PUSH
34513: LD_INT 3
34515: NEG
34516: PUSH
34517: EMPTY
34518: LIST
34519: LIST
34520: PUSH
34521: LD_INT 1
34523: NEG
34524: PUSH
34525: LD_INT 3
34527: NEG
34528: PUSH
34529: EMPTY
34530: LIST
34531: LIST
34532: PUSH
34533: LD_INT 3
34535: NEG
34536: PUSH
34537: LD_INT 1
34539: NEG
34540: PUSH
34541: EMPTY
34542: LIST
34543: LIST
34544: PUSH
34545: LD_INT 3
34547: NEG
34548: PUSH
34549: LD_INT 2
34551: NEG
34552: PUSH
34553: EMPTY
34554: LIST
34555: LIST
34556: PUSH
34557: EMPTY
34558: LIST
34559: LIST
34560: LIST
34561: LIST
34562: LIST
34563: LIST
34564: LIST
34565: LIST
34566: LIST
34567: LIST
34568: LIST
34569: LIST
34570: LIST
34571: LIST
34572: LIST
34573: LIST
34574: LIST
34575: LIST
34576: LIST
34577: LIST
34578: LIST
34579: LIST
34580: LIST
34581: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
34582: LD_ADDR_VAR 0 29
34586: PUSH
34587: LD_INT 0
34589: PUSH
34590: LD_INT 0
34592: PUSH
34593: EMPTY
34594: LIST
34595: LIST
34596: PUSH
34597: LD_INT 0
34599: PUSH
34600: LD_INT 1
34602: NEG
34603: PUSH
34604: EMPTY
34605: LIST
34606: LIST
34607: PUSH
34608: LD_INT 1
34610: PUSH
34611: LD_INT 0
34613: PUSH
34614: EMPTY
34615: LIST
34616: LIST
34617: PUSH
34618: LD_INT 1
34620: PUSH
34621: LD_INT 1
34623: PUSH
34624: EMPTY
34625: LIST
34626: LIST
34627: PUSH
34628: LD_INT 0
34630: PUSH
34631: LD_INT 1
34633: PUSH
34634: EMPTY
34635: LIST
34636: LIST
34637: PUSH
34638: LD_INT 1
34640: NEG
34641: PUSH
34642: LD_INT 0
34644: PUSH
34645: EMPTY
34646: LIST
34647: LIST
34648: PUSH
34649: LD_INT 1
34651: NEG
34652: PUSH
34653: LD_INT 1
34655: NEG
34656: PUSH
34657: EMPTY
34658: LIST
34659: LIST
34660: PUSH
34661: LD_INT 1
34663: NEG
34664: PUSH
34665: LD_INT 2
34667: NEG
34668: PUSH
34669: EMPTY
34670: LIST
34671: LIST
34672: PUSH
34673: LD_INT 0
34675: PUSH
34676: LD_INT 2
34678: NEG
34679: PUSH
34680: EMPTY
34681: LIST
34682: LIST
34683: PUSH
34684: LD_INT 1
34686: PUSH
34687: LD_INT 1
34689: NEG
34690: PUSH
34691: EMPTY
34692: LIST
34693: LIST
34694: PUSH
34695: LD_INT 2
34697: PUSH
34698: LD_INT 0
34700: PUSH
34701: EMPTY
34702: LIST
34703: LIST
34704: PUSH
34705: LD_INT 2
34707: PUSH
34708: LD_INT 1
34710: PUSH
34711: EMPTY
34712: LIST
34713: LIST
34714: PUSH
34715: LD_INT 1
34717: PUSH
34718: LD_INT 2
34720: PUSH
34721: EMPTY
34722: LIST
34723: LIST
34724: PUSH
34725: LD_INT 0
34727: PUSH
34728: LD_INT 2
34730: PUSH
34731: EMPTY
34732: LIST
34733: LIST
34734: PUSH
34735: LD_INT 1
34737: NEG
34738: PUSH
34739: LD_INT 1
34741: PUSH
34742: EMPTY
34743: LIST
34744: LIST
34745: PUSH
34746: LD_INT 2
34748: NEG
34749: PUSH
34750: LD_INT 1
34752: NEG
34753: PUSH
34754: EMPTY
34755: LIST
34756: LIST
34757: PUSH
34758: LD_INT 2
34760: NEG
34761: PUSH
34762: LD_INT 2
34764: NEG
34765: PUSH
34766: EMPTY
34767: LIST
34768: LIST
34769: PUSH
34770: LD_INT 2
34772: NEG
34773: PUSH
34774: LD_INT 3
34776: NEG
34777: PUSH
34778: EMPTY
34779: LIST
34780: LIST
34781: PUSH
34782: LD_INT 2
34784: PUSH
34785: LD_INT 1
34787: NEG
34788: PUSH
34789: EMPTY
34790: LIST
34791: LIST
34792: PUSH
34793: LD_INT 3
34795: PUSH
34796: LD_INT 1
34798: PUSH
34799: EMPTY
34800: LIST
34801: LIST
34802: PUSH
34803: LD_INT 1
34805: PUSH
34806: LD_INT 3
34808: PUSH
34809: EMPTY
34810: LIST
34811: LIST
34812: PUSH
34813: LD_INT 1
34815: NEG
34816: PUSH
34817: LD_INT 2
34819: PUSH
34820: EMPTY
34821: LIST
34822: LIST
34823: PUSH
34824: LD_INT 3
34826: NEG
34827: PUSH
34828: LD_INT 2
34830: NEG
34831: PUSH
34832: EMPTY
34833: LIST
34834: LIST
34835: PUSH
34836: EMPTY
34837: LIST
34838: LIST
34839: LIST
34840: LIST
34841: LIST
34842: LIST
34843: LIST
34844: LIST
34845: LIST
34846: LIST
34847: LIST
34848: LIST
34849: LIST
34850: LIST
34851: LIST
34852: LIST
34853: LIST
34854: LIST
34855: LIST
34856: LIST
34857: LIST
34858: LIST
34859: LIST
34860: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
34861: LD_ADDR_VAR 0 30
34865: PUSH
34866: LD_INT 0
34868: PUSH
34869: LD_INT 0
34871: PUSH
34872: EMPTY
34873: LIST
34874: LIST
34875: PUSH
34876: LD_INT 0
34878: PUSH
34879: LD_INT 1
34881: NEG
34882: PUSH
34883: EMPTY
34884: LIST
34885: LIST
34886: PUSH
34887: LD_INT 1
34889: PUSH
34890: LD_INT 0
34892: PUSH
34893: EMPTY
34894: LIST
34895: LIST
34896: PUSH
34897: LD_INT 1
34899: PUSH
34900: LD_INT 1
34902: PUSH
34903: EMPTY
34904: LIST
34905: LIST
34906: PUSH
34907: LD_INT 0
34909: PUSH
34910: LD_INT 1
34912: PUSH
34913: EMPTY
34914: LIST
34915: LIST
34916: PUSH
34917: LD_INT 1
34919: NEG
34920: PUSH
34921: LD_INT 0
34923: PUSH
34924: EMPTY
34925: LIST
34926: LIST
34927: PUSH
34928: LD_INT 1
34930: NEG
34931: PUSH
34932: LD_INT 1
34934: NEG
34935: PUSH
34936: EMPTY
34937: LIST
34938: LIST
34939: PUSH
34940: LD_INT 1
34942: NEG
34943: PUSH
34944: LD_INT 2
34946: NEG
34947: PUSH
34948: EMPTY
34949: LIST
34950: LIST
34951: PUSH
34952: LD_INT 0
34954: PUSH
34955: LD_INT 2
34957: NEG
34958: PUSH
34959: EMPTY
34960: LIST
34961: LIST
34962: PUSH
34963: LD_INT 1
34965: PUSH
34966: LD_INT 1
34968: NEG
34969: PUSH
34970: EMPTY
34971: LIST
34972: LIST
34973: PUSH
34974: LD_INT 2
34976: PUSH
34977: LD_INT 0
34979: PUSH
34980: EMPTY
34981: LIST
34982: LIST
34983: PUSH
34984: LD_INT 2
34986: PUSH
34987: LD_INT 1
34989: PUSH
34990: EMPTY
34991: LIST
34992: LIST
34993: PUSH
34994: LD_INT 2
34996: PUSH
34997: LD_INT 2
34999: PUSH
35000: EMPTY
35001: LIST
35002: LIST
35003: PUSH
35004: LD_INT 1
35006: PUSH
35007: LD_INT 2
35009: PUSH
35010: EMPTY
35011: LIST
35012: LIST
35013: PUSH
35014: LD_INT 1
35016: NEG
35017: PUSH
35018: LD_INT 1
35020: PUSH
35021: EMPTY
35022: LIST
35023: LIST
35024: PUSH
35025: LD_INT 2
35027: NEG
35028: PUSH
35029: LD_INT 0
35031: PUSH
35032: EMPTY
35033: LIST
35034: LIST
35035: PUSH
35036: LD_INT 2
35038: NEG
35039: PUSH
35040: LD_INT 1
35042: NEG
35043: PUSH
35044: EMPTY
35045: LIST
35046: LIST
35047: PUSH
35048: LD_INT 1
35050: NEG
35051: PUSH
35052: LD_INT 3
35054: NEG
35055: PUSH
35056: EMPTY
35057: LIST
35058: LIST
35059: PUSH
35060: LD_INT 1
35062: PUSH
35063: LD_INT 2
35065: NEG
35066: PUSH
35067: EMPTY
35068: LIST
35069: LIST
35070: PUSH
35071: LD_INT 3
35073: PUSH
35074: LD_INT 2
35076: PUSH
35077: EMPTY
35078: LIST
35079: LIST
35080: PUSH
35081: LD_INT 2
35083: PUSH
35084: LD_INT 3
35086: PUSH
35087: EMPTY
35088: LIST
35089: LIST
35090: PUSH
35091: LD_INT 2
35093: NEG
35094: PUSH
35095: LD_INT 1
35097: PUSH
35098: EMPTY
35099: LIST
35100: LIST
35101: PUSH
35102: LD_INT 3
35104: NEG
35105: PUSH
35106: LD_INT 1
35108: NEG
35109: PUSH
35110: EMPTY
35111: LIST
35112: LIST
35113: PUSH
35114: EMPTY
35115: LIST
35116: LIST
35117: LIST
35118: LIST
35119: LIST
35120: LIST
35121: LIST
35122: LIST
35123: LIST
35124: LIST
35125: LIST
35126: LIST
35127: LIST
35128: LIST
35129: LIST
35130: LIST
35131: LIST
35132: LIST
35133: LIST
35134: LIST
35135: LIST
35136: LIST
35137: LIST
35138: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35139: LD_ADDR_VAR 0 31
35143: PUSH
35144: LD_INT 0
35146: PUSH
35147: LD_INT 0
35149: PUSH
35150: EMPTY
35151: LIST
35152: LIST
35153: PUSH
35154: LD_INT 0
35156: PUSH
35157: LD_INT 1
35159: NEG
35160: PUSH
35161: EMPTY
35162: LIST
35163: LIST
35164: PUSH
35165: LD_INT 1
35167: PUSH
35168: LD_INT 0
35170: PUSH
35171: EMPTY
35172: LIST
35173: LIST
35174: PUSH
35175: LD_INT 1
35177: PUSH
35178: LD_INT 1
35180: PUSH
35181: EMPTY
35182: LIST
35183: LIST
35184: PUSH
35185: LD_INT 0
35187: PUSH
35188: LD_INT 1
35190: PUSH
35191: EMPTY
35192: LIST
35193: LIST
35194: PUSH
35195: LD_INT 1
35197: NEG
35198: PUSH
35199: LD_INT 0
35201: PUSH
35202: EMPTY
35203: LIST
35204: LIST
35205: PUSH
35206: LD_INT 1
35208: NEG
35209: PUSH
35210: LD_INT 1
35212: NEG
35213: PUSH
35214: EMPTY
35215: LIST
35216: LIST
35217: PUSH
35218: LD_INT 1
35220: NEG
35221: PUSH
35222: LD_INT 2
35224: NEG
35225: PUSH
35226: EMPTY
35227: LIST
35228: LIST
35229: PUSH
35230: LD_INT 1
35232: PUSH
35233: LD_INT 1
35235: NEG
35236: PUSH
35237: EMPTY
35238: LIST
35239: LIST
35240: PUSH
35241: LD_INT 2
35243: PUSH
35244: LD_INT 0
35246: PUSH
35247: EMPTY
35248: LIST
35249: LIST
35250: PUSH
35251: LD_INT 2
35253: PUSH
35254: LD_INT 1
35256: PUSH
35257: EMPTY
35258: LIST
35259: LIST
35260: PUSH
35261: LD_INT 2
35263: PUSH
35264: LD_INT 2
35266: PUSH
35267: EMPTY
35268: LIST
35269: LIST
35270: PUSH
35271: LD_INT 1
35273: PUSH
35274: LD_INT 2
35276: PUSH
35277: EMPTY
35278: LIST
35279: LIST
35280: PUSH
35281: LD_INT 0
35283: PUSH
35284: LD_INT 2
35286: PUSH
35287: EMPTY
35288: LIST
35289: LIST
35290: PUSH
35291: LD_INT 1
35293: NEG
35294: PUSH
35295: LD_INT 1
35297: PUSH
35298: EMPTY
35299: LIST
35300: LIST
35301: PUSH
35302: LD_INT 2
35304: NEG
35305: PUSH
35306: LD_INT 1
35308: NEG
35309: PUSH
35310: EMPTY
35311: LIST
35312: LIST
35313: PUSH
35314: LD_INT 2
35316: NEG
35317: PUSH
35318: LD_INT 2
35320: NEG
35321: PUSH
35322: EMPTY
35323: LIST
35324: LIST
35325: PUSH
35326: LD_INT 2
35328: NEG
35329: PUSH
35330: LD_INT 3
35332: NEG
35333: PUSH
35334: EMPTY
35335: LIST
35336: LIST
35337: PUSH
35338: LD_INT 2
35340: PUSH
35341: LD_INT 1
35343: NEG
35344: PUSH
35345: EMPTY
35346: LIST
35347: LIST
35348: PUSH
35349: LD_INT 3
35351: PUSH
35352: LD_INT 1
35354: PUSH
35355: EMPTY
35356: LIST
35357: LIST
35358: PUSH
35359: LD_INT 1
35361: PUSH
35362: LD_INT 3
35364: PUSH
35365: EMPTY
35366: LIST
35367: LIST
35368: PUSH
35369: LD_INT 1
35371: NEG
35372: PUSH
35373: LD_INT 2
35375: PUSH
35376: EMPTY
35377: LIST
35378: LIST
35379: PUSH
35380: LD_INT 3
35382: NEG
35383: PUSH
35384: LD_INT 2
35386: NEG
35387: PUSH
35388: EMPTY
35389: LIST
35390: LIST
35391: PUSH
35392: EMPTY
35393: LIST
35394: LIST
35395: LIST
35396: LIST
35397: LIST
35398: LIST
35399: LIST
35400: LIST
35401: LIST
35402: LIST
35403: LIST
35404: LIST
35405: LIST
35406: LIST
35407: LIST
35408: LIST
35409: LIST
35410: LIST
35411: LIST
35412: LIST
35413: LIST
35414: LIST
35415: LIST
35416: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35417: LD_ADDR_VAR 0 32
35421: PUSH
35422: LD_INT 0
35424: PUSH
35425: LD_INT 0
35427: PUSH
35428: EMPTY
35429: LIST
35430: LIST
35431: PUSH
35432: LD_INT 0
35434: PUSH
35435: LD_INT 1
35437: NEG
35438: PUSH
35439: EMPTY
35440: LIST
35441: LIST
35442: PUSH
35443: LD_INT 1
35445: PUSH
35446: LD_INT 0
35448: PUSH
35449: EMPTY
35450: LIST
35451: LIST
35452: PUSH
35453: LD_INT 1
35455: PUSH
35456: LD_INT 1
35458: PUSH
35459: EMPTY
35460: LIST
35461: LIST
35462: PUSH
35463: LD_INT 0
35465: PUSH
35466: LD_INT 1
35468: PUSH
35469: EMPTY
35470: LIST
35471: LIST
35472: PUSH
35473: LD_INT 1
35475: NEG
35476: PUSH
35477: LD_INT 0
35479: PUSH
35480: EMPTY
35481: LIST
35482: LIST
35483: PUSH
35484: LD_INT 1
35486: NEG
35487: PUSH
35488: LD_INT 1
35490: NEG
35491: PUSH
35492: EMPTY
35493: LIST
35494: LIST
35495: PUSH
35496: LD_INT 1
35498: NEG
35499: PUSH
35500: LD_INT 2
35502: NEG
35503: PUSH
35504: EMPTY
35505: LIST
35506: LIST
35507: PUSH
35508: LD_INT 0
35510: PUSH
35511: LD_INT 2
35513: NEG
35514: PUSH
35515: EMPTY
35516: LIST
35517: LIST
35518: PUSH
35519: LD_INT 1
35521: PUSH
35522: LD_INT 1
35524: NEG
35525: PUSH
35526: EMPTY
35527: LIST
35528: LIST
35529: PUSH
35530: LD_INT 2
35532: PUSH
35533: LD_INT 1
35535: PUSH
35536: EMPTY
35537: LIST
35538: LIST
35539: PUSH
35540: LD_INT 2
35542: PUSH
35543: LD_INT 2
35545: PUSH
35546: EMPTY
35547: LIST
35548: LIST
35549: PUSH
35550: LD_INT 1
35552: PUSH
35553: LD_INT 2
35555: PUSH
35556: EMPTY
35557: LIST
35558: LIST
35559: PUSH
35560: LD_INT 0
35562: PUSH
35563: LD_INT 2
35565: PUSH
35566: EMPTY
35567: LIST
35568: LIST
35569: PUSH
35570: LD_INT 1
35572: NEG
35573: PUSH
35574: LD_INT 1
35576: PUSH
35577: EMPTY
35578: LIST
35579: LIST
35580: PUSH
35581: LD_INT 2
35583: NEG
35584: PUSH
35585: LD_INT 0
35587: PUSH
35588: EMPTY
35589: LIST
35590: LIST
35591: PUSH
35592: LD_INT 2
35594: NEG
35595: PUSH
35596: LD_INT 1
35598: NEG
35599: PUSH
35600: EMPTY
35601: LIST
35602: LIST
35603: PUSH
35604: LD_INT 1
35606: NEG
35607: PUSH
35608: LD_INT 3
35610: NEG
35611: PUSH
35612: EMPTY
35613: LIST
35614: LIST
35615: PUSH
35616: LD_INT 1
35618: PUSH
35619: LD_INT 2
35621: NEG
35622: PUSH
35623: EMPTY
35624: LIST
35625: LIST
35626: PUSH
35627: LD_INT 3
35629: PUSH
35630: LD_INT 2
35632: PUSH
35633: EMPTY
35634: LIST
35635: LIST
35636: PUSH
35637: LD_INT 2
35639: PUSH
35640: LD_INT 3
35642: PUSH
35643: EMPTY
35644: LIST
35645: LIST
35646: PUSH
35647: LD_INT 2
35649: NEG
35650: PUSH
35651: LD_INT 1
35653: PUSH
35654: EMPTY
35655: LIST
35656: LIST
35657: PUSH
35658: LD_INT 3
35660: NEG
35661: PUSH
35662: LD_INT 1
35664: NEG
35665: PUSH
35666: EMPTY
35667: LIST
35668: LIST
35669: PUSH
35670: EMPTY
35671: LIST
35672: LIST
35673: LIST
35674: LIST
35675: LIST
35676: LIST
35677: LIST
35678: LIST
35679: LIST
35680: LIST
35681: LIST
35682: LIST
35683: LIST
35684: LIST
35685: LIST
35686: LIST
35687: LIST
35688: LIST
35689: LIST
35690: LIST
35691: LIST
35692: LIST
35693: LIST
35694: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35695: LD_ADDR_VAR 0 33
35699: PUSH
35700: LD_INT 0
35702: PUSH
35703: LD_INT 0
35705: PUSH
35706: EMPTY
35707: LIST
35708: LIST
35709: PUSH
35710: LD_INT 0
35712: PUSH
35713: LD_INT 1
35715: NEG
35716: PUSH
35717: EMPTY
35718: LIST
35719: LIST
35720: PUSH
35721: LD_INT 1
35723: PUSH
35724: LD_INT 0
35726: PUSH
35727: EMPTY
35728: LIST
35729: LIST
35730: PUSH
35731: LD_INT 1
35733: PUSH
35734: LD_INT 1
35736: PUSH
35737: EMPTY
35738: LIST
35739: LIST
35740: PUSH
35741: LD_INT 0
35743: PUSH
35744: LD_INT 1
35746: PUSH
35747: EMPTY
35748: LIST
35749: LIST
35750: PUSH
35751: LD_INT 1
35753: NEG
35754: PUSH
35755: LD_INT 0
35757: PUSH
35758: EMPTY
35759: LIST
35760: LIST
35761: PUSH
35762: LD_INT 1
35764: NEG
35765: PUSH
35766: LD_INT 1
35768: NEG
35769: PUSH
35770: EMPTY
35771: LIST
35772: LIST
35773: PUSH
35774: LD_INT 1
35776: NEG
35777: PUSH
35778: LD_INT 2
35780: NEG
35781: PUSH
35782: EMPTY
35783: LIST
35784: LIST
35785: PUSH
35786: LD_INT 1
35788: PUSH
35789: LD_INT 1
35791: NEG
35792: PUSH
35793: EMPTY
35794: LIST
35795: LIST
35796: PUSH
35797: LD_INT 2
35799: PUSH
35800: LD_INT 0
35802: PUSH
35803: EMPTY
35804: LIST
35805: LIST
35806: PUSH
35807: LD_INT 2
35809: PUSH
35810: LD_INT 1
35812: PUSH
35813: EMPTY
35814: LIST
35815: LIST
35816: PUSH
35817: LD_INT 1
35819: PUSH
35820: LD_INT 2
35822: PUSH
35823: EMPTY
35824: LIST
35825: LIST
35826: PUSH
35827: LD_INT 0
35829: PUSH
35830: LD_INT 2
35832: PUSH
35833: EMPTY
35834: LIST
35835: LIST
35836: PUSH
35837: LD_INT 1
35839: NEG
35840: PUSH
35841: LD_INT 1
35843: PUSH
35844: EMPTY
35845: LIST
35846: LIST
35847: PUSH
35848: LD_INT 2
35850: NEG
35851: PUSH
35852: LD_INT 0
35854: PUSH
35855: EMPTY
35856: LIST
35857: LIST
35858: PUSH
35859: LD_INT 2
35861: NEG
35862: PUSH
35863: LD_INT 1
35865: NEG
35866: PUSH
35867: EMPTY
35868: LIST
35869: LIST
35870: PUSH
35871: LD_INT 2
35873: NEG
35874: PUSH
35875: LD_INT 2
35877: NEG
35878: PUSH
35879: EMPTY
35880: LIST
35881: LIST
35882: PUSH
35883: LD_INT 2
35885: NEG
35886: PUSH
35887: LD_INT 3
35889: NEG
35890: PUSH
35891: EMPTY
35892: LIST
35893: LIST
35894: PUSH
35895: LD_INT 2
35897: PUSH
35898: LD_INT 1
35900: NEG
35901: PUSH
35902: EMPTY
35903: LIST
35904: LIST
35905: PUSH
35906: LD_INT 3
35908: PUSH
35909: LD_INT 1
35911: PUSH
35912: EMPTY
35913: LIST
35914: LIST
35915: PUSH
35916: LD_INT 1
35918: PUSH
35919: LD_INT 3
35921: PUSH
35922: EMPTY
35923: LIST
35924: LIST
35925: PUSH
35926: LD_INT 1
35928: NEG
35929: PUSH
35930: LD_INT 2
35932: PUSH
35933: EMPTY
35934: LIST
35935: LIST
35936: PUSH
35937: LD_INT 3
35939: NEG
35940: PUSH
35941: LD_INT 2
35943: NEG
35944: PUSH
35945: EMPTY
35946: LIST
35947: LIST
35948: PUSH
35949: EMPTY
35950: LIST
35951: LIST
35952: LIST
35953: LIST
35954: LIST
35955: LIST
35956: LIST
35957: LIST
35958: LIST
35959: LIST
35960: LIST
35961: LIST
35962: LIST
35963: LIST
35964: LIST
35965: LIST
35966: LIST
35967: LIST
35968: LIST
35969: LIST
35970: LIST
35971: LIST
35972: LIST
35973: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35974: LD_ADDR_VAR 0 34
35978: PUSH
35979: LD_INT 0
35981: PUSH
35982: LD_INT 0
35984: PUSH
35985: EMPTY
35986: LIST
35987: LIST
35988: PUSH
35989: LD_INT 0
35991: PUSH
35992: LD_INT 1
35994: NEG
35995: PUSH
35996: EMPTY
35997: LIST
35998: LIST
35999: PUSH
36000: LD_INT 1
36002: PUSH
36003: LD_INT 0
36005: PUSH
36006: EMPTY
36007: LIST
36008: LIST
36009: PUSH
36010: LD_INT 1
36012: PUSH
36013: LD_INT 1
36015: PUSH
36016: EMPTY
36017: LIST
36018: LIST
36019: PUSH
36020: LD_INT 0
36022: PUSH
36023: LD_INT 1
36025: PUSH
36026: EMPTY
36027: LIST
36028: LIST
36029: PUSH
36030: LD_INT 1
36032: NEG
36033: PUSH
36034: LD_INT 0
36036: PUSH
36037: EMPTY
36038: LIST
36039: LIST
36040: PUSH
36041: LD_INT 1
36043: NEG
36044: PUSH
36045: LD_INT 1
36047: NEG
36048: PUSH
36049: EMPTY
36050: LIST
36051: LIST
36052: PUSH
36053: LD_INT 1
36055: NEG
36056: PUSH
36057: LD_INT 2
36059: NEG
36060: PUSH
36061: EMPTY
36062: LIST
36063: LIST
36064: PUSH
36065: LD_INT 0
36067: PUSH
36068: LD_INT 2
36070: NEG
36071: PUSH
36072: EMPTY
36073: LIST
36074: LIST
36075: PUSH
36076: LD_INT 1
36078: PUSH
36079: LD_INT 1
36081: NEG
36082: PUSH
36083: EMPTY
36084: LIST
36085: LIST
36086: PUSH
36087: LD_INT 2
36089: PUSH
36090: LD_INT 1
36092: PUSH
36093: EMPTY
36094: LIST
36095: LIST
36096: PUSH
36097: LD_INT 2
36099: PUSH
36100: LD_INT 2
36102: PUSH
36103: EMPTY
36104: LIST
36105: LIST
36106: PUSH
36107: LD_INT 1
36109: PUSH
36110: LD_INT 2
36112: PUSH
36113: EMPTY
36114: LIST
36115: LIST
36116: PUSH
36117: LD_INT 1
36119: NEG
36120: PUSH
36121: LD_INT 1
36123: PUSH
36124: EMPTY
36125: LIST
36126: LIST
36127: PUSH
36128: LD_INT 2
36130: NEG
36131: PUSH
36132: LD_INT 0
36134: PUSH
36135: EMPTY
36136: LIST
36137: LIST
36138: PUSH
36139: LD_INT 2
36141: NEG
36142: PUSH
36143: LD_INT 1
36145: NEG
36146: PUSH
36147: EMPTY
36148: LIST
36149: LIST
36150: PUSH
36151: LD_INT 2
36153: NEG
36154: PUSH
36155: LD_INT 2
36157: NEG
36158: PUSH
36159: EMPTY
36160: LIST
36161: LIST
36162: PUSH
36163: LD_INT 1
36165: NEG
36166: PUSH
36167: LD_INT 3
36169: NEG
36170: PUSH
36171: EMPTY
36172: LIST
36173: LIST
36174: PUSH
36175: LD_INT 1
36177: PUSH
36178: LD_INT 2
36180: NEG
36181: PUSH
36182: EMPTY
36183: LIST
36184: LIST
36185: PUSH
36186: LD_INT 3
36188: PUSH
36189: LD_INT 2
36191: PUSH
36192: EMPTY
36193: LIST
36194: LIST
36195: PUSH
36196: LD_INT 2
36198: PUSH
36199: LD_INT 3
36201: PUSH
36202: EMPTY
36203: LIST
36204: LIST
36205: PUSH
36206: LD_INT 2
36208: NEG
36209: PUSH
36210: LD_INT 1
36212: PUSH
36213: EMPTY
36214: LIST
36215: LIST
36216: PUSH
36217: LD_INT 3
36219: NEG
36220: PUSH
36221: LD_INT 1
36223: NEG
36224: PUSH
36225: EMPTY
36226: LIST
36227: LIST
36228: PUSH
36229: EMPTY
36230: LIST
36231: LIST
36232: LIST
36233: LIST
36234: LIST
36235: LIST
36236: LIST
36237: LIST
36238: LIST
36239: LIST
36240: LIST
36241: LIST
36242: LIST
36243: LIST
36244: LIST
36245: LIST
36246: LIST
36247: LIST
36248: LIST
36249: LIST
36250: LIST
36251: LIST
36252: LIST
36253: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
36254: LD_ADDR_VAR 0 35
36258: PUSH
36259: LD_INT 0
36261: PUSH
36262: LD_INT 0
36264: PUSH
36265: EMPTY
36266: LIST
36267: LIST
36268: PUSH
36269: LD_INT 0
36271: PUSH
36272: LD_INT 1
36274: NEG
36275: PUSH
36276: EMPTY
36277: LIST
36278: LIST
36279: PUSH
36280: LD_INT 1
36282: PUSH
36283: LD_INT 0
36285: PUSH
36286: EMPTY
36287: LIST
36288: LIST
36289: PUSH
36290: LD_INT 1
36292: PUSH
36293: LD_INT 1
36295: PUSH
36296: EMPTY
36297: LIST
36298: LIST
36299: PUSH
36300: LD_INT 0
36302: PUSH
36303: LD_INT 1
36305: PUSH
36306: EMPTY
36307: LIST
36308: LIST
36309: PUSH
36310: LD_INT 1
36312: NEG
36313: PUSH
36314: LD_INT 0
36316: PUSH
36317: EMPTY
36318: LIST
36319: LIST
36320: PUSH
36321: LD_INT 1
36323: NEG
36324: PUSH
36325: LD_INT 1
36327: NEG
36328: PUSH
36329: EMPTY
36330: LIST
36331: LIST
36332: PUSH
36333: LD_INT 2
36335: PUSH
36336: LD_INT 1
36338: PUSH
36339: EMPTY
36340: LIST
36341: LIST
36342: PUSH
36343: LD_INT 2
36345: NEG
36346: PUSH
36347: LD_INT 1
36349: NEG
36350: PUSH
36351: EMPTY
36352: LIST
36353: LIST
36354: PUSH
36355: EMPTY
36356: LIST
36357: LIST
36358: LIST
36359: LIST
36360: LIST
36361: LIST
36362: LIST
36363: LIST
36364: LIST
36365: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
36366: LD_ADDR_VAR 0 36
36370: PUSH
36371: LD_INT 0
36373: PUSH
36374: LD_INT 0
36376: PUSH
36377: EMPTY
36378: LIST
36379: LIST
36380: PUSH
36381: LD_INT 0
36383: PUSH
36384: LD_INT 1
36386: NEG
36387: PUSH
36388: EMPTY
36389: LIST
36390: LIST
36391: PUSH
36392: LD_INT 1
36394: PUSH
36395: LD_INT 0
36397: PUSH
36398: EMPTY
36399: LIST
36400: LIST
36401: PUSH
36402: LD_INT 1
36404: PUSH
36405: LD_INT 1
36407: PUSH
36408: EMPTY
36409: LIST
36410: LIST
36411: PUSH
36412: LD_INT 0
36414: PUSH
36415: LD_INT 1
36417: PUSH
36418: EMPTY
36419: LIST
36420: LIST
36421: PUSH
36422: LD_INT 1
36424: NEG
36425: PUSH
36426: LD_INT 0
36428: PUSH
36429: EMPTY
36430: LIST
36431: LIST
36432: PUSH
36433: LD_INT 1
36435: NEG
36436: PUSH
36437: LD_INT 1
36439: NEG
36440: PUSH
36441: EMPTY
36442: LIST
36443: LIST
36444: PUSH
36445: LD_INT 1
36447: NEG
36448: PUSH
36449: LD_INT 2
36451: NEG
36452: PUSH
36453: EMPTY
36454: LIST
36455: LIST
36456: PUSH
36457: LD_INT 1
36459: PUSH
36460: LD_INT 2
36462: PUSH
36463: EMPTY
36464: LIST
36465: LIST
36466: PUSH
36467: EMPTY
36468: LIST
36469: LIST
36470: LIST
36471: LIST
36472: LIST
36473: LIST
36474: LIST
36475: LIST
36476: LIST
36477: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
36478: LD_ADDR_VAR 0 37
36482: PUSH
36483: LD_INT 0
36485: PUSH
36486: LD_INT 0
36488: PUSH
36489: EMPTY
36490: LIST
36491: LIST
36492: PUSH
36493: LD_INT 0
36495: PUSH
36496: LD_INT 1
36498: NEG
36499: PUSH
36500: EMPTY
36501: LIST
36502: LIST
36503: PUSH
36504: LD_INT 1
36506: PUSH
36507: LD_INT 0
36509: PUSH
36510: EMPTY
36511: LIST
36512: LIST
36513: PUSH
36514: LD_INT 1
36516: PUSH
36517: LD_INT 1
36519: PUSH
36520: EMPTY
36521: LIST
36522: LIST
36523: PUSH
36524: LD_INT 0
36526: PUSH
36527: LD_INT 1
36529: PUSH
36530: EMPTY
36531: LIST
36532: LIST
36533: PUSH
36534: LD_INT 1
36536: NEG
36537: PUSH
36538: LD_INT 0
36540: PUSH
36541: EMPTY
36542: LIST
36543: LIST
36544: PUSH
36545: LD_INT 1
36547: NEG
36548: PUSH
36549: LD_INT 1
36551: NEG
36552: PUSH
36553: EMPTY
36554: LIST
36555: LIST
36556: PUSH
36557: LD_INT 1
36559: PUSH
36560: LD_INT 1
36562: NEG
36563: PUSH
36564: EMPTY
36565: LIST
36566: LIST
36567: PUSH
36568: LD_INT 1
36570: NEG
36571: PUSH
36572: LD_INT 1
36574: PUSH
36575: EMPTY
36576: LIST
36577: LIST
36578: PUSH
36579: EMPTY
36580: LIST
36581: LIST
36582: LIST
36583: LIST
36584: LIST
36585: LIST
36586: LIST
36587: LIST
36588: LIST
36589: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
36590: LD_ADDR_VAR 0 38
36594: PUSH
36595: LD_INT 0
36597: PUSH
36598: LD_INT 0
36600: PUSH
36601: EMPTY
36602: LIST
36603: LIST
36604: PUSH
36605: LD_INT 0
36607: PUSH
36608: LD_INT 1
36610: NEG
36611: PUSH
36612: EMPTY
36613: LIST
36614: LIST
36615: PUSH
36616: LD_INT 1
36618: PUSH
36619: LD_INT 0
36621: PUSH
36622: EMPTY
36623: LIST
36624: LIST
36625: PUSH
36626: LD_INT 1
36628: PUSH
36629: LD_INT 1
36631: PUSH
36632: EMPTY
36633: LIST
36634: LIST
36635: PUSH
36636: LD_INT 0
36638: PUSH
36639: LD_INT 1
36641: PUSH
36642: EMPTY
36643: LIST
36644: LIST
36645: PUSH
36646: LD_INT 1
36648: NEG
36649: PUSH
36650: LD_INT 0
36652: PUSH
36653: EMPTY
36654: LIST
36655: LIST
36656: PUSH
36657: LD_INT 1
36659: NEG
36660: PUSH
36661: LD_INT 1
36663: NEG
36664: PUSH
36665: EMPTY
36666: LIST
36667: LIST
36668: PUSH
36669: LD_INT 2
36671: PUSH
36672: LD_INT 1
36674: PUSH
36675: EMPTY
36676: LIST
36677: LIST
36678: PUSH
36679: LD_INT 2
36681: NEG
36682: PUSH
36683: LD_INT 1
36685: NEG
36686: PUSH
36687: EMPTY
36688: LIST
36689: LIST
36690: PUSH
36691: EMPTY
36692: LIST
36693: LIST
36694: LIST
36695: LIST
36696: LIST
36697: LIST
36698: LIST
36699: LIST
36700: LIST
36701: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
36702: LD_ADDR_VAR 0 39
36706: PUSH
36707: LD_INT 0
36709: PUSH
36710: LD_INT 0
36712: PUSH
36713: EMPTY
36714: LIST
36715: LIST
36716: PUSH
36717: LD_INT 0
36719: PUSH
36720: LD_INT 1
36722: NEG
36723: PUSH
36724: EMPTY
36725: LIST
36726: LIST
36727: PUSH
36728: LD_INT 1
36730: PUSH
36731: LD_INT 0
36733: PUSH
36734: EMPTY
36735: LIST
36736: LIST
36737: PUSH
36738: LD_INT 1
36740: PUSH
36741: LD_INT 1
36743: PUSH
36744: EMPTY
36745: LIST
36746: LIST
36747: PUSH
36748: LD_INT 0
36750: PUSH
36751: LD_INT 1
36753: PUSH
36754: EMPTY
36755: LIST
36756: LIST
36757: PUSH
36758: LD_INT 1
36760: NEG
36761: PUSH
36762: LD_INT 0
36764: PUSH
36765: EMPTY
36766: LIST
36767: LIST
36768: PUSH
36769: LD_INT 1
36771: NEG
36772: PUSH
36773: LD_INT 1
36775: NEG
36776: PUSH
36777: EMPTY
36778: LIST
36779: LIST
36780: PUSH
36781: LD_INT 1
36783: NEG
36784: PUSH
36785: LD_INT 2
36787: NEG
36788: PUSH
36789: EMPTY
36790: LIST
36791: LIST
36792: PUSH
36793: LD_INT 1
36795: PUSH
36796: LD_INT 2
36798: PUSH
36799: EMPTY
36800: LIST
36801: LIST
36802: PUSH
36803: EMPTY
36804: LIST
36805: LIST
36806: LIST
36807: LIST
36808: LIST
36809: LIST
36810: LIST
36811: LIST
36812: LIST
36813: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
36814: LD_ADDR_VAR 0 40
36818: PUSH
36819: LD_INT 0
36821: PUSH
36822: LD_INT 0
36824: PUSH
36825: EMPTY
36826: LIST
36827: LIST
36828: PUSH
36829: LD_INT 0
36831: PUSH
36832: LD_INT 1
36834: NEG
36835: PUSH
36836: EMPTY
36837: LIST
36838: LIST
36839: PUSH
36840: LD_INT 1
36842: PUSH
36843: LD_INT 0
36845: PUSH
36846: EMPTY
36847: LIST
36848: LIST
36849: PUSH
36850: LD_INT 1
36852: PUSH
36853: LD_INT 1
36855: PUSH
36856: EMPTY
36857: LIST
36858: LIST
36859: PUSH
36860: LD_INT 0
36862: PUSH
36863: LD_INT 1
36865: PUSH
36866: EMPTY
36867: LIST
36868: LIST
36869: PUSH
36870: LD_INT 1
36872: NEG
36873: PUSH
36874: LD_INT 0
36876: PUSH
36877: EMPTY
36878: LIST
36879: LIST
36880: PUSH
36881: LD_INT 1
36883: NEG
36884: PUSH
36885: LD_INT 1
36887: NEG
36888: PUSH
36889: EMPTY
36890: LIST
36891: LIST
36892: PUSH
36893: LD_INT 1
36895: PUSH
36896: LD_INT 1
36898: NEG
36899: PUSH
36900: EMPTY
36901: LIST
36902: LIST
36903: PUSH
36904: LD_INT 1
36906: NEG
36907: PUSH
36908: LD_INT 1
36910: PUSH
36911: EMPTY
36912: LIST
36913: LIST
36914: PUSH
36915: EMPTY
36916: LIST
36917: LIST
36918: LIST
36919: LIST
36920: LIST
36921: LIST
36922: LIST
36923: LIST
36924: LIST
36925: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36926: LD_ADDR_VAR 0 41
36930: PUSH
36931: LD_INT 0
36933: PUSH
36934: LD_INT 0
36936: PUSH
36937: EMPTY
36938: LIST
36939: LIST
36940: PUSH
36941: LD_INT 0
36943: PUSH
36944: LD_INT 1
36946: NEG
36947: PUSH
36948: EMPTY
36949: LIST
36950: LIST
36951: PUSH
36952: LD_INT 1
36954: PUSH
36955: LD_INT 0
36957: PUSH
36958: EMPTY
36959: LIST
36960: LIST
36961: PUSH
36962: LD_INT 1
36964: PUSH
36965: LD_INT 1
36967: PUSH
36968: EMPTY
36969: LIST
36970: LIST
36971: PUSH
36972: LD_INT 0
36974: PUSH
36975: LD_INT 1
36977: PUSH
36978: EMPTY
36979: LIST
36980: LIST
36981: PUSH
36982: LD_INT 1
36984: NEG
36985: PUSH
36986: LD_INT 0
36988: PUSH
36989: EMPTY
36990: LIST
36991: LIST
36992: PUSH
36993: LD_INT 1
36995: NEG
36996: PUSH
36997: LD_INT 1
36999: NEG
37000: PUSH
37001: EMPTY
37002: LIST
37003: LIST
37004: PUSH
37005: LD_INT 1
37007: NEG
37008: PUSH
37009: LD_INT 2
37011: NEG
37012: PUSH
37013: EMPTY
37014: LIST
37015: LIST
37016: PUSH
37017: LD_INT 1
37019: PUSH
37020: LD_INT 1
37022: NEG
37023: PUSH
37024: EMPTY
37025: LIST
37026: LIST
37027: PUSH
37028: LD_INT 2
37030: PUSH
37031: LD_INT 0
37033: PUSH
37034: EMPTY
37035: LIST
37036: LIST
37037: PUSH
37038: LD_INT 2
37040: PUSH
37041: LD_INT 1
37043: PUSH
37044: EMPTY
37045: LIST
37046: LIST
37047: PUSH
37048: LD_INT 2
37050: PUSH
37051: LD_INT 2
37053: PUSH
37054: EMPTY
37055: LIST
37056: LIST
37057: PUSH
37058: LD_INT 1
37060: PUSH
37061: LD_INT 2
37063: PUSH
37064: EMPTY
37065: LIST
37066: LIST
37067: PUSH
37068: LD_INT 1
37070: NEG
37071: PUSH
37072: LD_INT 1
37074: PUSH
37075: EMPTY
37076: LIST
37077: LIST
37078: PUSH
37079: LD_INT 2
37081: NEG
37082: PUSH
37083: LD_INT 0
37085: PUSH
37086: EMPTY
37087: LIST
37088: LIST
37089: PUSH
37090: LD_INT 2
37092: NEG
37093: PUSH
37094: LD_INT 1
37096: NEG
37097: PUSH
37098: EMPTY
37099: LIST
37100: LIST
37101: PUSH
37102: LD_INT 2
37104: NEG
37105: PUSH
37106: LD_INT 2
37108: NEG
37109: PUSH
37110: EMPTY
37111: LIST
37112: LIST
37113: PUSH
37114: LD_INT 2
37116: NEG
37117: PUSH
37118: LD_INT 3
37120: NEG
37121: PUSH
37122: EMPTY
37123: LIST
37124: LIST
37125: PUSH
37126: LD_INT 2
37128: PUSH
37129: LD_INT 1
37131: NEG
37132: PUSH
37133: EMPTY
37134: LIST
37135: LIST
37136: PUSH
37137: LD_INT 3
37139: PUSH
37140: LD_INT 0
37142: PUSH
37143: EMPTY
37144: LIST
37145: LIST
37146: PUSH
37147: LD_INT 3
37149: PUSH
37150: LD_INT 1
37152: PUSH
37153: EMPTY
37154: LIST
37155: LIST
37156: PUSH
37157: LD_INT 3
37159: PUSH
37160: LD_INT 2
37162: PUSH
37163: EMPTY
37164: LIST
37165: LIST
37166: PUSH
37167: LD_INT 3
37169: PUSH
37170: LD_INT 3
37172: PUSH
37173: EMPTY
37174: LIST
37175: LIST
37176: PUSH
37177: LD_INT 2
37179: PUSH
37180: LD_INT 3
37182: PUSH
37183: EMPTY
37184: LIST
37185: LIST
37186: PUSH
37187: LD_INT 2
37189: NEG
37190: PUSH
37191: LD_INT 1
37193: PUSH
37194: EMPTY
37195: LIST
37196: LIST
37197: PUSH
37198: LD_INT 3
37200: NEG
37201: PUSH
37202: LD_INT 0
37204: PUSH
37205: EMPTY
37206: LIST
37207: LIST
37208: PUSH
37209: LD_INT 3
37211: NEG
37212: PUSH
37213: LD_INT 1
37215: NEG
37216: PUSH
37217: EMPTY
37218: LIST
37219: LIST
37220: PUSH
37221: LD_INT 3
37223: NEG
37224: PUSH
37225: LD_INT 2
37227: NEG
37228: PUSH
37229: EMPTY
37230: LIST
37231: LIST
37232: PUSH
37233: LD_INT 3
37235: NEG
37236: PUSH
37237: LD_INT 3
37239: NEG
37240: PUSH
37241: EMPTY
37242: LIST
37243: LIST
37244: PUSH
37245: EMPTY
37246: LIST
37247: LIST
37248: LIST
37249: LIST
37250: LIST
37251: LIST
37252: LIST
37253: LIST
37254: LIST
37255: LIST
37256: LIST
37257: LIST
37258: LIST
37259: LIST
37260: LIST
37261: LIST
37262: LIST
37263: LIST
37264: LIST
37265: LIST
37266: LIST
37267: LIST
37268: LIST
37269: LIST
37270: LIST
37271: LIST
37272: LIST
37273: LIST
37274: LIST
37275: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37276: LD_ADDR_VAR 0 42
37280: PUSH
37281: LD_INT 0
37283: PUSH
37284: LD_INT 0
37286: PUSH
37287: EMPTY
37288: LIST
37289: LIST
37290: PUSH
37291: LD_INT 0
37293: PUSH
37294: LD_INT 1
37296: NEG
37297: PUSH
37298: EMPTY
37299: LIST
37300: LIST
37301: PUSH
37302: LD_INT 1
37304: PUSH
37305: LD_INT 0
37307: PUSH
37308: EMPTY
37309: LIST
37310: LIST
37311: PUSH
37312: LD_INT 1
37314: PUSH
37315: LD_INT 1
37317: PUSH
37318: EMPTY
37319: LIST
37320: LIST
37321: PUSH
37322: LD_INT 0
37324: PUSH
37325: LD_INT 1
37327: PUSH
37328: EMPTY
37329: LIST
37330: LIST
37331: PUSH
37332: LD_INT 1
37334: NEG
37335: PUSH
37336: LD_INT 0
37338: PUSH
37339: EMPTY
37340: LIST
37341: LIST
37342: PUSH
37343: LD_INT 1
37345: NEG
37346: PUSH
37347: LD_INT 1
37349: NEG
37350: PUSH
37351: EMPTY
37352: LIST
37353: LIST
37354: PUSH
37355: LD_INT 1
37357: NEG
37358: PUSH
37359: LD_INT 2
37361: NEG
37362: PUSH
37363: EMPTY
37364: LIST
37365: LIST
37366: PUSH
37367: LD_INT 0
37369: PUSH
37370: LD_INT 2
37372: NEG
37373: PUSH
37374: EMPTY
37375: LIST
37376: LIST
37377: PUSH
37378: LD_INT 1
37380: PUSH
37381: LD_INT 1
37383: NEG
37384: PUSH
37385: EMPTY
37386: LIST
37387: LIST
37388: PUSH
37389: LD_INT 2
37391: PUSH
37392: LD_INT 1
37394: PUSH
37395: EMPTY
37396: LIST
37397: LIST
37398: PUSH
37399: LD_INT 2
37401: PUSH
37402: LD_INT 2
37404: PUSH
37405: EMPTY
37406: LIST
37407: LIST
37408: PUSH
37409: LD_INT 1
37411: PUSH
37412: LD_INT 2
37414: PUSH
37415: EMPTY
37416: LIST
37417: LIST
37418: PUSH
37419: LD_INT 0
37421: PUSH
37422: LD_INT 2
37424: PUSH
37425: EMPTY
37426: LIST
37427: LIST
37428: PUSH
37429: LD_INT 1
37431: NEG
37432: PUSH
37433: LD_INT 1
37435: PUSH
37436: EMPTY
37437: LIST
37438: LIST
37439: PUSH
37440: LD_INT 2
37442: NEG
37443: PUSH
37444: LD_INT 1
37446: NEG
37447: PUSH
37448: EMPTY
37449: LIST
37450: LIST
37451: PUSH
37452: LD_INT 2
37454: NEG
37455: PUSH
37456: LD_INT 2
37458: NEG
37459: PUSH
37460: EMPTY
37461: LIST
37462: LIST
37463: PUSH
37464: LD_INT 2
37466: NEG
37467: PUSH
37468: LD_INT 3
37470: NEG
37471: PUSH
37472: EMPTY
37473: LIST
37474: LIST
37475: PUSH
37476: LD_INT 1
37478: NEG
37479: PUSH
37480: LD_INT 3
37482: NEG
37483: PUSH
37484: EMPTY
37485: LIST
37486: LIST
37487: PUSH
37488: LD_INT 0
37490: PUSH
37491: LD_INT 3
37493: NEG
37494: PUSH
37495: EMPTY
37496: LIST
37497: LIST
37498: PUSH
37499: LD_INT 1
37501: PUSH
37502: LD_INT 2
37504: NEG
37505: PUSH
37506: EMPTY
37507: LIST
37508: LIST
37509: PUSH
37510: LD_INT 3
37512: PUSH
37513: LD_INT 2
37515: PUSH
37516: EMPTY
37517: LIST
37518: LIST
37519: PUSH
37520: LD_INT 3
37522: PUSH
37523: LD_INT 3
37525: PUSH
37526: EMPTY
37527: LIST
37528: LIST
37529: PUSH
37530: LD_INT 2
37532: PUSH
37533: LD_INT 3
37535: PUSH
37536: EMPTY
37537: LIST
37538: LIST
37539: PUSH
37540: LD_INT 1
37542: PUSH
37543: LD_INT 3
37545: PUSH
37546: EMPTY
37547: LIST
37548: LIST
37549: PUSH
37550: LD_INT 0
37552: PUSH
37553: LD_INT 3
37555: PUSH
37556: EMPTY
37557: LIST
37558: LIST
37559: PUSH
37560: LD_INT 1
37562: NEG
37563: PUSH
37564: LD_INT 2
37566: PUSH
37567: EMPTY
37568: LIST
37569: LIST
37570: PUSH
37571: LD_INT 3
37573: NEG
37574: PUSH
37575: LD_INT 2
37577: NEG
37578: PUSH
37579: EMPTY
37580: LIST
37581: LIST
37582: PUSH
37583: LD_INT 3
37585: NEG
37586: PUSH
37587: LD_INT 3
37589: NEG
37590: PUSH
37591: EMPTY
37592: LIST
37593: LIST
37594: PUSH
37595: EMPTY
37596: LIST
37597: LIST
37598: LIST
37599: LIST
37600: LIST
37601: LIST
37602: LIST
37603: LIST
37604: LIST
37605: LIST
37606: LIST
37607: LIST
37608: LIST
37609: LIST
37610: LIST
37611: LIST
37612: LIST
37613: LIST
37614: LIST
37615: LIST
37616: LIST
37617: LIST
37618: LIST
37619: LIST
37620: LIST
37621: LIST
37622: LIST
37623: LIST
37624: LIST
37625: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37626: LD_ADDR_VAR 0 43
37630: PUSH
37631: LD_INT 0
37633: PUSH
37634: LD_INT 0
37636: PUSH
37637: EMPTY
37638: LIST
37639: LIST
37640: PUSH
37641: LD_INT 0
37643: PUSH
37644: LD_INT 1
37646: NEG
37647: PUSH
37648: EMPTY
37649: LIST
37650: LIST
37651: PUSH
37652: LD_INT 1
37654: PUSH
37655: LD_INT 0
37657: PUSH
37658: EMPTY
37659: LIST
37660: LIST
37661: PUSH
37662: LD_INT 1
37664: PUSH
37665: LD_INT 1
37667: PUSH
37668: EMPTY
37669: LIST
37670: LIST
37671: PUSH
37672: LD_INT 0
37674: PUSH
37675: LD_INT 1
37677: PUSH
37678: EMPTY
37679: LIST
37680: LIST
37681: PUSH
37682: LD_INT 1
37684: NEG
37685: PUSH
37686: LD_INT 0
37688: PUSH
37689: EMPTY
37690: LIST
37691: LIST
37692: PUSH
37693: LD_INT 1
37695: NEG
37696: PUSH
37697: LD_INT 1
37699: NEG
37700: PUSH
37701: EMPTY
37702: LIST
37703: LIST
37704: PUSH
37705: LD_INT 1
37707: NEG
37708: PUSH
37709: LD_INT 2
37711: NEG
37712: PUSH
37713: EMPTY
37714: LIST
37715: LIST
37716: PUSH
37717: LD_INT 0
37719: PUSH
37720: LD_INT 2
37722: NEG
37723: PUSH
37724: EMPTY
37725: LIST
37726: LIST
37727: PUSH
37728: LD_INT 1
37730: PUSH
37731: LD_INT 1
37733: NEG
37734: PUSH
37735: EMPTY
37736: LIST
37737: LIST
37738: PUSH
37739: LD_INT 2
37741: PUSH
37742: LD_INT 0
37744: PUSH
37745: EMPTY
37746: LIST
37747: LIST
37748: PUSH
37749: LD_INT 2
37751: PUSH
37752: LD_INT 1
37754: PUSH
37755: EMPTY
37756: LIST
37757: LIST
37758: PUSH
37759: LD_INT 1
37761: PUSH
37762: LD_INT 2
37764: PUSH
37765: EMPTY
37766: LIST
37767: LIST
37768: PUSH
37769: LD_INT 0
37771: PUSH
37772: LD_INT 2
37774: PUSH
37775: EMPTY
37776: LIST
37777: LIST
37778: PUSH
37779: LD_INT 1
37781: NEG
37782: PUSH
37783: LD_INT 1
37785: PUSH
37786: EMPTY
37787: LIST
37788: LIST
37789: PUSH
37790: LD_INT 2
37792: NEG
37793: PUSH
37794: LD_INT 0
37796: PUSH
37797: EMPTY
37798: LIST
37799: LIST
37800: PUSH
37801: LD_INT 2
37803: NEG
37804: PUSH
37805: LD_INT 1
37807: NEG
37808: PUSH
37809: EMPTY
37810: LIST
37811: LIST
37812: PUSH
37813: LD_INT 1
37815: NEG
37816: PUSH
37817: LD_INT 3
37819: NEG
37820: PUSH
37821: EMPTY
37822: LIST
37823: LIST
37824: PUSH
37825: LD_INT 0
37827: PUSH
37828: LD_INT 3
37830: NEG
37831: PUSH
37832: EMPTY
37833: LIST
37834: LIST
37835: PUSH
37836: LD_INT 1
37838: PUSH
37839: LD_INT 2
37841: NEG
37842: PUSH
37843: EMPTY
37844: LIST
37845: LIST
37846: PUSH
37847: LD_INT 2
37849: PUSH
37850: LD_INT 1
37852: NEG
37853: PUSH
37854: EMPTY
37855: LIST
37856: LIST
37857: PUSH
37858: LD_INT 3
37860: PUSH
37861: LD_INT 0
37863: PUSH
37864: EMPTY
37865: LIST
37866: LIST
37867: PUSH
37868: LD_INT 3
37870: PUSH
37871: LD_INT 1
37873: PUSH
37874: EMPTY
37875: LIST
37876: LIST
37877: PUSH
37878: LD_INT 1
37880: PUSH
37881: LD_INT 3
37883: PUSH
37884: EMPTY
37885: LIST
37886: LIST
37887: PUSH
37888: LD_INT 0
37890: PUSH
37891: LD_INT 3
37893: PUSH
37894: EMPTY
37895: LIST
37896: LIST
37897: PUSH
37898: LD_INT 1
37900: NEG
37901: PUSH
37902: LD_INT 2
37904: PUSH
37905: EMPTY
37906: LIST
37907: LIST
37908: PUSH
37909: LD_INT 2
37911: NEG
37912: PUSH
37913: LD_INT 1
37915: PUSH
37916: EMPTY
37917: LIST
37918: LIST
37919: PUSH
37920: LD_INT 3
37922: NEG
37923: PUSH
37924: LD_INT 0
37926: PUSH
37927: EMPTY
37928: LIST
37929: LIST
37930: PUSH
37931: LD_INT 3
37933: NEG
37934: PUSH
37935: LD_INT 1
37937: NEG
37938: PUSH
37939: EMPTY
37940: LIST
37941: LIST
37942: PUSH
37943: EMPTY
37944: LIST
37945: LIST
37946: LIST
37947: LIST
37948: LIST
37949: LIST
37950: LIST
37951: LIST
37952: LIST
37953: LIST
37954: LIST
37955: LIST
37956: LIST
37957: LIST
37958: LIST
37959: LIST
37960: LIST
37961: LIST
37962: LIST
37963: LIST
37964: LIST
37965: LIST
37966: LIST
37967: LIST
37968: LIST
37969: LIST
37970: LIST
37971: LIST
37972: LIST
37973: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37974: LD_ADDR_VAR 0 44
37978: PUSH
37979: LD_INT 0
37981: PUSH
37982: LD_INT 0
37984: PUSH
37985: EMPTY
37986: LIST
37987: LIST
37988: PUSH
37989: LD_INT 0
37991: PUSH
37992: LD_INT 1
37994: NEG
37995: PUSH
37996: EMPTY
37997: LIST
37998: LIST
37999: PUSH
38000: LD_INT 1
38002: PUSH
38003: LD_INT 0
38005: PUSH
38006: EMPTY
38007: LIST
38008: LIST
38009: PUSH
38010: LD_INT 1
38012: PUSH
38013: LD_INT 1
38015: PUSH
38016: EMPTY
38017: LIST
38018: LIST
38019: PUSH
38020: LD_INT 0
38022: PUSH
38023: LD_INT 1
38025: PUSH
38026: EMPTY
38027: LIST
38028: LIST
38029: PUSH
38030: LD_INT 1
38032: NEG
38033: PUSH
38034: LD_INT 0
38036: PUSH
38037: EMPTY
38038: LIST
38039: LIST
38040: PUSH
38041: LD_INT 1
38043: NEG
38044: PUSH
38045: LD_INT 1
38047: NEG
38048: PUSH
38049: EMPTY
38050: LIST
38051: LIST
38052: PUSH
38053: LD_INT 1
38055: NEG
38056: PUSH
38057: LD_INT 2
38059: NEG
38060: PUSH
38061: EMPTY
38062: LIST
38063: LIST
38064: PUSH
38065: LD_INT 1
38067: PUSH
38068: LD_INT 1
38070: NEG
38071: PUSH
38072: EMPTY
38073: LIST
38074: LIST
38075: PUSH
38076: LD_INT 2
38078: PUSH
38079: LD_INT 0
38081: PUSH
38082: EMPTY
38083: LIST
38084: LIST
38085: PUSH
38086: LD_INT 2
38088: PUSH
38089: LD_INT 1
38091: PUSH
38092: EMPTY
38093: LIST
38094: LIST
38095: PUSH
38096: LD_INT 2
38098: PUSH
38099: LD_INT 2
38101: PUSH
38102: EMPTY
38103: LIST
38104: LIST
38105: PUSH
38106: LD_INT 1
38108: PUSH
38109: LD_INT 2
38111: PUSH
38112: EMPTY
38113: LIST
38114: LIST
38115: PUSH
38116: LD_INT 1
38118: NEG
38119: PUSH
38120: LD_INT 1
38122: PUSH
38123: EMPTY
38124: LIST
38125: LIST
38126: PUSH
38127: LD_INT 2
38129: NEG
38130: PUSH
38131: LD_INT 0
38133: PUSH
38134: EMPTY
38135: LIST
38136: LIST
38137: PUSH
38138: LD_INT 2
38140: NEG
38141: PUSH
38142: LD_INT 1
38144: NEG
38145: PUSH
38146: EMPTY
38147: LIST
38148: LIST
38149: PUSH
38150: LD_INT 2
38152: NEG
38153: PUSH
38154: LD_INT 2
38156: NEG
38157: PUSH
38158: EMPTY
38159: LIST
38160: LIST
38161: PUSH
38162: LD_INT 2
38164: NEG
38165: PUSH
38166: LD_INT 3
38168: NEG
38169: PUSH
38170: EMPTY
38171: LIST
38172: LIST
38173: PUSH
38174: LD_INT 2
38176: PUSH
38177: LD_INT 1
38179: NEG
38180: PUSH
38181: EMPTY
38182: LIST
38183: LIST
38184: PUSH
38185: LD_INT 3
38187: PUSH
38188: LD_INT 0
38190: PUSH
38191: EMPTY
38192: LIST
38193: LIST
38194: PUSH
38195: LD_INT 3
38197: PUSH
38198: LD_INT 1
38200: PUSH
38201: EMPTY
38202: LIST
38203: LIST
38204: PUSH
38205: LD_INT 3
38207: PUSH
38208: LD_INT 2
38210: PUSH
38211: EMPTY
38212: LIST
38213: LIST
38214: PUSH
38215: LD_INT 3
38217: PUSH
38218: LD_INT 3
38220: PUSH
38221: EMPTY
38222: LIST
38223: LIST
38224: PUSH
38225: LD_INT 2
38227: PUSH
38228: LD_INT 3
38230: PUSH
38231: EMPTY
38232: LIST
38233: LIST
38234: PUSH
38235: LD_INT 2
38237: NEG
38238: PUSH
38239: LD_INT 1
38241: PUSH
38242: EMPTY
38243: LIST
38244: LIST
38245: PUSH
38246: LD_INT 3
38248: NEG
38249: PUSH
38250: LD_INT 0
38252: PUSH
38253: EMPTY
38254: LIST
38255: LIST
38256: PUSH
38257: LD_INT 3
38259: NEG
38260: PUSH
38261: LD_INT 1
38263: NEG
38264: PUSH
38265: EMPTY
38266: LIST
38267: LIST
38268: PUSH
38269: LD_INT 3
38271: NEG
38272: PUSH
38273: LD_INT 2
38275: NEG
38276: PUSH
38277: EMPTY
38278: LIST
38279: LIST
38280: PUSH
38281: LD_INT 3
38283: NEG
38284: PUSH
38285: LD_INT 3
38287: NEG
38288: PUSH
38289: EMPTY
38290: LIST
38291: LIST
38292: PUSH
38293: EMPTY
38294: LIST
38295: LIST
38296: LIST
38297: LIST
38298: LIST
38299: LIST
38300: LIST
38301: LIST
38302: LIST
38303: LIST
38304: LIST
38305: LIST
38306: LIST
38307: LIST
38308: LIST
38309: LIST
38310: LIST
38311: LIST
38312: LIST
38313: LIST
38314: LIST
38315: LIST
38316: LIST
38317: LIST
38318: LIST
38319: LIST
38320: LIST
38321: LIST
38322: LIST
38323: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38324: LD_ADDR_VAR 0 45
38328: PUSH
38329: LD_INT 0
38331: PUSH
38332: LD_INT 0
38334: PUSH
38335: EMPTY
38336: LIST
38337: LIST
38338: PUSH
38339: LD_INT 0
38341: PUSH
38342: LD_INT 1
38344: NEG
38345: PUSH
38346: EMPTY
38347: LIST
38348: LIST
38349: PUSH
38350: LD_INT 1
38352: PUSH
38353: LD_INT 0
38355: PUSH
38356: EMPTY
38357: LIST
38358: LIST
38359: PUSH
38360: LD_INT 1
38362: PUSH
38363: LD_INT 1
38365: PUSH
38366: EMPTY
38367: LIST
38368: LIST
38369: PUSH
38370: LD_INT 0
38372: PUSH
38373: LD_INT 1
38375: PUSH
38376: EMPTY
38377: LIST
38378: LIST
38379: PUSH
38380: LD_INT 1
38382: NEG
38383: PUSH
38384: LD_INT 0
38386: PUSH
38387: EMPTY
38388: LIST
38389: LIST
38390: PUSH
38391: LD_INT 1
38393: NEG
38394: PUSH
38395: LD_INT 1
38397: NEG
38398: PUSH
38399: EMPTY
38400: LIST
38401: LIST
38402: PUSH
38403: LD_INT 1
38405: NEG
38406: PUSH
38407: LD_INT 2
38409: NEG
38410: PUSH
38411: EMPTY
38412: LIST
38413: LIST
38414: PUSH
38415: LD_INT 0
38417: PUSH
38418: LD_INT 2
38420: NEG
38421: PUSH
38422: EMPTY
38423: LIST
38424: LIST
38425: PUSH
38426: LD_INT 1
38428: PUSH
38429: LD_INT 1
38431: NEG
38432: PUSH
38433: EMPTY
38434: LIST
38435: LIST
38436: PUSH
38437: LD_INT 2
38439: PUSH
38440: LD_INT 1
38442: PUSH
38443: EMPTY
38444: LIST
38445: LIST
38446: PUSH
38447: LD_INT 2
38449: PUSH
38450: LD_INT 2
38452: PUSH
38453: EMPTY
38454: LIST
38455: LIST
38456: PUSH
38457: LD_INT 1
38459: PUSH
38460: LD_INT 2
38462: PUSH
38463: EMPTY
38464: LIST
38465: LIST
38466: PUSH
38467: LD_INT 0
38469: PUSH
38470: LD_INT 2
38472: PUSH
38473: EMPTY
38474: LIST
38475: LIST
38476: PUSH
38477: LD_INT 1
38479: NEG
38480: PUSH
38481: LD_INT 1
38483: PUSH
38484: EMPTY
38485: LIST
38486: LIST
38487: PUSH
38488: LD_INT 2
38490: NEG
38491: PUSH
38492: LD_INT 1
38494: NEG
38495: PUSH
38496: EMPTY
38497: LIST
38498: LIST
38499: PUSH
38500: LD_INT 2
38502: NEG
38503: PUSH
38504: LD_INT 2
38506: NEG
38507: PUSH
38508: EMPTY
38509: LIST
38510: LIST
38511: PUSH
38512: LD_INT 2
38514: NEG
38515: PUSH
38516: LD_INT 3
38518: NEG
38519: PUSH
38520: EMPTY
38521: LIST
38522: LIST
38523: PUSH
38524: LD_INT 1
38526: NEG
38527: PUSH
38528: LD_INT 3
38530: NEG
38531: PUSH
38532: EMPTY
38533: LIST
38534: LIST
38535: PUSH
38536: LD_INT 0
38538: PUSH
38539: LD_INT 3
38541: NEG
38542: PUSH
38543: EMPTY
38544: LIST
38545: LIST
38546: PUSH
38547: LD_INT 1
38549: PUSH
38550: LD_INT 2
38552: NEG
38553: PUSH
38554: EMPTY
38555: LIST
38556: LIST
38557: PUSH
38558: LD_INT 3
38560: PUSH
38561: LD_INT 2
38563: PUSH
38564: EMPTY
38565: LIST
38566: LIST
38567: PUSH
38568: LD_INT 3
38570: PUSH
38571: LD_INT 3
38573: PUSH
38574: EMPTY
38575: LIST
38576: LIST
38577: PUSH
38578: LD_INT 2
38580: PUSH
38581: LD_INT 3
38583: PUSH
38584: EMPTY
38585: LIST
38586: LIST
38587: PUSH
38588: LD_INT 1
38590: PUSH
38591: LD_INT 3
38593: PUSH
38594: EMPTY
38595: LIST
38596: LIST
38597: PUSH
38598: LD_INT 0
38600: PUSH
38601: LD_INT 3
38603: PUSH
38604: EMPTY
38605: LIST
38606: LIST
38607: PUSH
38608: LD_INT 1
38610: NEG
38611: PUSH
38612: LD_INT 2
38614: PUSH
38615: EMPTY
38616: LIST
38617: LIST
38618: PUSH
38619: LD_INT 3
38621: NEG
38622: PUSH
38623: LD_INT 2
38625: NEG
38626: PUSH
38627: EMPTY
38628: LIST
38629: LIST
38630: PUSH
38631: LD_INT 3
38633: NEG
38634: PUSH
38635: LD_INT 3
38637: NEG
38638: PUSH
38639: EMPTY
38640: LIST
38641: LIST
38642: PUSH
38643: EMPTY
38644: LIST
38645: LIST
38646: LIST
38647: LIST
38648: LIST
38649: LIST
38650: LIST
38651: LIST
38652: LIST
38653: LIST
38654: LIST
38655: LIST
38656: LIST
38657: LIST
38658: LIST
38659: LIST
38660: LIST
38661: LIST
38662: LIST
38663: LIST
38664: LIST
38665: LIST
38666: LIST
38667: LIST
38668: LIST
38669: LIST
38670: LIST
38671: LIST
38672: LIST
38673: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38674: LD_ADDR_VAR 0 46
38678: PUSH
38679: LD_INT 0
38681: PUSH
38682: LD_INT 0
38684: PUSH
38685: EMPTY
38686: LIST
38687: LIST
38688: PUSH
38689: LD_INT 0
38691: PUSH
38692: LD_INT 1
38694: NEG
38695: PUSH
38696: EMPTY
38697: LIST
38698: LIST
38699: PUSH
38700: LD_INT 1
38702: PUSH
38703: LD_INT 0
38705: PUSH
38706: EMPTY
38707: LIST
38708: LIST
38709: PUSH
38710: LD_INT 1
38712: PUSH
38713: LD_INT 1
38715: PUSH
38716: EMPTY
38717: LIST
38718: LIST
38719: PUSH
38720: LD_INT 0
38722: PUSH
38723: LD_INT 1
38725: PUSH
38726: EMPTY
38727: LIST
38728: LIST
38729: PUSH
38730: LD_INT 1
38732: NEG
38733: PUSH
38734: LD_INT 0
38736: PUSH
38737: EMPTY
38738: LIST
38739: LIST
38740: PUSH
38741: LD_INT 1
38743: NEG
38744: PUSH
38745: LD_INT 1
38747: NEG
38748: PUSH
38749: EMPTY
38750: LIST
38751: LIST
38752: PUSH
38753: LD_INT 1
38755: NEG
38756: PUSH
38757: LD_INT 2
38759: NEG
38760: PUSH
38761: EMPTY
38762: LIST
38763: LIST
38764: PUSH
38765: LD_INT 0
38767: PUSH
38768: LD_INT 2
38770: NEG
38771: PUSH
38772: EMPTY
38773: LIST
38774: LIST
38775: PUSH
38776: LD_INT 1
38778: PUSH
38779: LD_INT 1
38781: NEG
38782: PUSH
38783: EMPTY
38784: LIST
38785: LIST
38786: PUSH
38787: LD_INT 2
38789: PUSH
38790: LD_INT 0
38792: PUSH
38793: EMPTY
38794: LIST
38795: LIST
38796: PUSH
38797: LD_INT 2
38799: PUSH
38800: LD_INT 1
38802: PUSH
38803: EMPTY
38804: LIST
38805: LIST
38806: PUSH
38807: LD_INT 1
38809: PUSH
38810: LD_INT 2
38812: PUSH
38813: EMPTY
38814: LIST
38815: LIST
38816: PUSH
38817: LD_INT 0
38819: PUSH
38820: LD_INT 2
38822: PUSH
38823: EMPTY
38824: LIST
38825: LIST
38826: PUSH
38827: LD_INT 1
38829: NEG
38830: PUSH
38831: LD_INT 1
38833: PUSH
38834: EMPTY
38835: LIST
38836: LIST
38837: PUSH
38838: LD_INT 2
38840: NEG
38841: PUSH
38842: LD_INT 0
38844: PUSH
38845: EMPTY
38846: LIST
38847: LIST
38848: PUSH
38849: LD_INT 2
38851: NEG
38852: PUSH
38853: LD_INT 1
38855: NEG
38856: PUSH
38857: EMPTY
38858: LIST
38859: LIST
38860: PUSH
38861: LD_INT 1
38863: NEG
38864: PUSH
38865: LD_INT 3
38867: NEG
38868: PUSH
38869: EMPTY
38870: LIST
38871: LIST
38872: PUSH
38873: LD_INT 0
38875: PUSH
38876: LD_INT 3
38878: NEG
38879: PUSH
38880: EMPTY
38881: LIST
38882: LIST
38883: PUSH
38884: LD_INT 1
38886: PUSH
38887: LD_INT 2
38889: NEG
38890: PUSH
38891: EMPTY
38892: LIST
38893: LIST
38894: PUSH
38895: LD_INT 2
38897: PUSH
38898: LD_INT 1
38900: NEG
38901: PUSH
38902: EMPTY
38903: LIST
38904: LIST
38905: PUSH
38906: LD_INT 3
38908: PUSH
38909: LD_INT 0
38911: PUSH
38912: EMPTY
38913: LIST
38914: LIST
38915: PUSH
38916: LD_INT 3
38918: PUSH
38919: LD_INT 1
38921: PUSH
38922: EMPTY
38923: LIST
38924: LIST
38925: PUSH
38926: LD_INT 1
38928: PUSH
38929: LD_INT 3
38931: PUSH
38932: EMPTY
38933: LIST
38934: LIST
38935: PUSH
38936: LD_INT 0
38938: PUSH
38939: LD_INT 3
38941: PUSH
38942: EMPTY
38943: LIST
38944: LIST
38945: PUSH
38946: LD_INT 1
38948: NEG
38949: PUSH
38950: LD_INT 2
38952: PUSH
38953: EMPTY
38954: LIST
38955: LIST
38956: PUSH
38957: LD_INT 2
38959: NEG
38960: PUSH
38961: LD_INT 1
38963: PUSH
38964: EMPTY
38965: LIST
38966: LIST
38967: PUSH
38968: LD_INT 3
38970: NEG
38971: PUSH
38972: LD_INT 0
38974: PUSH
38975: EMPTY
38976: LIST
38977: LIST
38978: PUSH
38979: LD_INT 3
38981: NEG
38982: PUSH
38983: LD_INT 1
38985: NEG
38986: PUSH
38987: EMPTY
38988: LIST
38989: LIST
38990: PUSH
38991: EMPTY
38992: LIST
38993: LIST
38994: LIST
38995: LIST
38996: LIST
38997: LIST
38998: LIST
38999: LIST
39000: LIST
39001: LIST
39002: LIST
39003: LIST
39004: LIST
39005: LIST
39006: LIST
39007: LIST
39008: LIST
39009: LIST
39010: LIST
39011: LIST
39012: LIST
39013: LIST
39014: LIST
39015: LIST
39016: LIST
39017: LIST
39018: LIST
39019: LIST
39020: LIST
39021: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39022: LD_ADDR_VAR 0 47
39026: PUSH
39027: LD_INT 0
39029: PUSH
39030: LD_INT 0
39032: PUSH
39033: EMPTY
39034: LIST
39035: LIST
39036: PUSH
39037: LD_INT 0
39039: PUSH
39040: LD_INT 1
39042: NEG
39043: PUSH
39044: EMPTY
39045: LIST
39046: LIST
39047: PUSH
39048: LD_INT 1
39050: PUSH
39051: LD_INT 0
39053: PUSH
39054: EMPTY
39055: LIST
39056: LIST
39057: PUSH
39058: LD_INT 1
39060: PUSH
39061: LD_INT 1
39063: PUSH
39064: EMPTY
39065: LIST
39066: LIST
39067: PUSH
39068: LD_INT 0
39070: PUSH
39071: LD_INT 1
39073: PUSH
39074: EMPTY
39075: LIST
39076: LIST
39077: PUSH
39078: LD_INT 1
39080: NEG
39081: PUSH
39082: LD_INT 0
39084: PUSH
39085: EMPTY
39086: LIST
39087: LIST
39088: PUSH
39089: LD_INT 1
39091: NEG
39092: PUSH
39093: LD_INT 1
39095: NEG
39096: PUSH
39097: EMPTY
39098: LIST
39099: LIST
39100: PUSH
39101: LD_INT 1
39103: NEG
39104: PUSH
39105: LD_INT 2
39107: NEG
39108: PUSH
39109: EMPTY
39110: LIST
39111: LIST
39112: PUSH
39113: LD_INT 0
39115: PUSH
39116: LD_INT 2
39118: NEG
39119: PUSH
39120: EMPTY
39121: LIST
39122: LIST
39123: PUSH
39124: LD_INT 1
39126: PUSH
39127: LD_INT 1
39129: NEG
39130: PUSH
39131: EMPTY
39132: LIST
39133: LIST
39134: PUSH
39135: LD_INT 2
39137: NEG
39138: PUSH
39139: LD_INT 1
39141: NEG
39142: PUSH
39143: EMPTY
39144: LIST
39145: LIST
39146: PUSH
39147: LD_INT 2
39149: NEG
39150: PUSH
39151: LD_INT 2
39153: NEG
39154: PUSH
39155: EMPTY
39156: LIST
39157: LIST
39158: PUSH
39159: EMPTY
39160: LIST
39161: LIST
39162: LIST
39163: LIST
39164: LIST
39165: LIST
39166: LIST
39167: LIST
39168: LIST
39169: LIST
39170: LIST
39171: LIST
39172: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
39173: LD_ADDR_VAR 0 48
39177: PUSH
39178: LD_INT 0
39180: PUSH
39181: LD_INT 0
39183: PUSH
39184: EMPTY
39185: LIST
39186: LIST
39187: PUSH
39188: LD_INT 0
39190: PUSH
39191: LD_INT 1
39193: NEG
39194: PUSH
39195: EMPTY
39196: LIST
39197: LIST
39198: PUSH
39199: LD_INT 1
39201: PUSH
39202: LD_INT 0
39204: PUSH
39205: EMPTY
39206: LIST
39207: LIST
39208: PUSH
39209: LD_INT 1
39211: PUSH
39212: LD_INT 1
39214: PUSH
39215: EMPTY
39216: LIST
39217: LIST
39218: PUSH
39219: LD_INT 0
39221: PUSH
39222: LD_INT 1
39224: PUSH
39225: EMPTY
39226: LIST
39227: LIST
39228: PUSH
39229: LD_INT 1
39231: NEG
39232: PUSH
39233: LD_INT 0
39235: PUSH
39236: EMPTY
39237: LIST
39238: LIST
39239: PUSH
39240: LD_INT 1
39242: NEG
39243: PUSH
39244: LD_INT 1
39246: NEG
39247: PUSH
39248: EMPTY
39249: LIST
39250: LIST
39251: PUSH
39252: LD_INT 1
39254: NEG
39255: PUSH
39256: LD_INT 2
39258: NEG
39259: PUSH
39260: EMPTY
39261: LIST
39262: LIST
39263: PUSH
39264: LD_INT 0
39266: PUSH
39267: LD_INT 2
39269: NEG
39270: PUSH
39271: EMPTY
39272: LIST
39273: LIST
39274: PUSH
39275: LD_INT 1
39277: PUSH
39278: LD_INT 1
39280: NEG
39281: PUSH
39282: EMPTY
39283: LIST
39284: LIST
39285: PUSH
39286: LD_INT 2
39288: PUSH
39289: LD_INT 0
39291: PUSH
39292: EMPTY
39293: LIST
39294: LIST
39295: PUSH
39296: LD_INT 2
39298: PUSH
39299: LD_INT 1
39301: PUSH
39302: EMPTY
39303: LIST
39304: LIST
39305: PUSH
39306: EMPTY
39307: LIST
39308: LIST
39309: LIST
39310: LIST
39311: LIST
39312: LIST
39313: LIST
39314: LIST
39315: LIST
39316: LIST
39317: LIST
39318: LIST
39319: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
39320: LD_ADDR_VAR 0 49
39324: PUSH
39325: LD_INT 0
39327: PUSH
39328: LD_INT 0
39330: PUSH
39331: EMPTY
39332: LIST
39333: LIST
39334: PUSH
39335: LD_INT 0
39337: PUSH
39338: LD_INT 1
39340: NEG
39341: PUSH
39342: EMPTY
39343: LIST
39344: LIST
39345: PUSH
39346: LD_INT 1
39348: PUSH
39349: LD_INT 0
39351: PUSH
39352: EMPTY
39353: LIST
39354: LIST
39355: PUSH
39356: LD_INT 1
39358: PUSH
39359: LD_INT 1
39361: PUSH
39362: EMPTY
39363: LIST
39364: LIST
39365: PUSH
39366: LD_INT 0
39368: PUSH
39369: LD_INT 1
39371: PUSH
39372: EMPTY
39373: LIST
39374: LIST
39375: PUSH
39376: LD_INT 1
39378: NEG
39379: PUSH
39380: LD_INT 0
39382: PUSH
39383: EMPTY
39384: LIST
39385: LIST
39386: PUSH
39387: LD_INT 1
39389: NEG
39390: PUSH
39391: LD_INT 1
39393: NEG
39394: PUSH
39395: EMPTY
39396: LIST
39397: LIST
39398: PUSH
39399: LD_INT 1
39401: PUSH
39402: LD_INT 1
39404: NEG
39405: PUSH
39406: EMPTY
39407: LIST
39408: LIST
39409: PUSH
39410: LD_INT 2
39412: PUSH
39413: LD_INT 0
39415: PUSH
39416: EMPTY
39417: LIST
39418: LIST
39419: PUSH
39420: LD_INT 2
39422: PUSH
39423: LD_INT 1
39425: PUSH
39426: EMPTY
39427: LIST
39428: LIST
39429: PUSH
39430: LD_INT 2
39432: PUSH
39433: LD_INT 2
39435: PUSH
39436: EMPTY
39437: LIST
39438: LIST
39439: PUSH
39440: LD_INT 1
39442: PUSH
39443: LD_INT 2
39445: PUSH
39446: EMPTY
39447: LIST
39448: LIST
39449: PUSH
39450: EMPTY
39451: LIST
39452: LIST
39453: LIST
39454: LIST
39455: LIST
39456: LIST
39457: LIST
39458: LIST
39459: LIST
39460: LIST
39461: LIST
39462: LIST
39463: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
39464: LD_ADDR_VAR 0 50
39468: PUSH
39469: LD_INT 0
39471: PUSH
39472: LD_INT 0
39474: PUSH
39475: EMPTY
39476: LIST
39477: LIST
39478: PUSH
39479: LD_INT 0
39481: PUSH
39482: LD_INT 1
39484: NEG
39485: PUSH
39486: EMPTY
39487: LIST
39488: LIST
39489: PUSH
39490: LD_INT 1
39492: PUSH
39493: LD_INT 0
39495: PUSH
39496: EMPTY
39497: LIST
39498: LIST
39499: PUSH
39500: LD_INT 1
39502: PUSH
39503: LD_INT 1
39505: PUSH
39506: EMPTY
39507: LIST
39508: LIST
39509: PUSH
39510: LD_INT 0
39512: PUSH
39513: LD_INT 1
39515: PUSH
39516: EMPTY
39517: LIST
39518: LIST
39519: PUSH
39520: LD_INT 1
39522: NEG
39523: PUSH
39524: LD_INT 0
39526: PUSH
39527: EMPTY
39528: LIST
39529: LIST
39530: PUSH
39531: LD_INT 1
39533: NEG
39534: PUSH
39535: LD_INT 1
39537: NEG
39538: PUSH
39539: EMPTY
39540: LIST
39541: LIST
39542: PUSH
39543: LD_INT 2
39545: PUSH
39546: LD_INT 1
39548: PUSH
39549: EMPTY
39550: LIST
39551: LIST
39552: PUSH
39553: LD_INT 2
39555: PUSH
39556: LD_INT 2
39558: PUSH
39559: EMPTY
39560: LIST
39561: LIST
39562: PUSH
39563: LD_INT 1
39565: PUSH
39566: LD_INT 2
39568: PUSH
39569: EMPTY
39570: LIST
39571: LIST
39572: PUSH
39573: LD_INT 0
39575: PUSH
39576: LD_INT 2
39578: PUSH
39579: EMPTY
39580: LIST
39581: LIST
39582: PUSH
39583: LD_INT 1
39585: NEG
39586: PUSH
39587: LD_INT 1
39589: PUSH
39590: EMPTY
39591: LIST
39592: LIST
39593: PUSH
39594: EMPTY
39595: LIST
39596: LIST
39597: LIST
39598: LIST
39599: LIST
39600: LIST
39601: LIST
39602: LIST
39603: LIST
39604: LIST
39605: LIST
39606: LIST
39607: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
39608: LD_ADDR_VAR 0 51
39612: PUSH
39613: LD_INT 0
39615: PUSH
39616: LD_INT 0
39618: PUSH
39619: EMPTY
39620: LIST
39621: LIST
39622: PUSH
39623: LD_INT 0
39625: PUSH
39626: LD_INT 1
39628: NEG
39629: PUSH
39630: EMPTY
39631: LIST
39632: LIST
39633: PUSH
39634: LD_INT 1
39636: PUSH
39637: LD_INT 0
39639: PUSH
39640: EMPTY
39641: LIST
39642: LIST
39643: PUSH
39644: LD_INT 1
39646: PUSH
39647: LD_INT 1
39649: PUSH
39650: EMPTY
39651: LIST
39652: LIST
39653: PUSH
39654: LD_INT 0
39656: PUSH
39657: LD_INT 1
39659: PUSH
39660: EMPTY
39661: LIST
39662: LIST
39663: PUSH
39664: LD_INT 1
39666: NEG
39667: PUSH
39668: LD_INT 0
39670: PUSH
39671: EMPTY
39672: LIST
39673: LIST
39674: PUSH
39675: LD_INT 1
39677: NEG
39678: PUSH
39679: LD_INT 1
39681: NEG
39682: PUSH
39683: EMPTY
39684: LIST
39685: LIST
39686: PUSH
39687: LD_INT 1
39689: PUSH
39690: LD_INT 2
39692: PUSH
39693: EMPTY
39694: LIST
39695: LIST
39696: PUSH
39697: LD_INT 0
39699: PUSH
39700: LD_INT 2
39702: PUSH
39703: EMPTY
39704: LIST
39705: LIST
39706: PUSH
39707: LD_INT 1
39709: NEG
39710: PUSH
39711: LD_INT 1
39713: PUSH
39714: EMPTY
39715: LIST
39716: LIST
39717: PUSH
39718: LD_INT 2
39720: NEG
39721: PUSH
39722: LD_INT 0
39724: PUSH
39725: EMPTY
39726: LIST
39727: LIST
39728: PUSH
39729: LD_INT 2
39731: NEG
39732: PUSH
39733: LD_INT 1
39735: NEG
39736: PUSH
39737: EMPTY
39738: LIST
39739: LIST
39740: PUSH
39741: EMPTY
39742: LIST
39743: LIST
39744: LIST
39745: LIST
39746: LIST
39747: LIST
39748: LIST
39749: LIST
39750: LIST
39751: LIST
39752: LIST
39753: LIST
39754: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39755: LD_ADDR_VAR 0 52
39759: PUSH
39760: LD_INT 0
39762: PUSH
39763: LD_INT 0
39765: PUSH
39766: EMPTY
39767: LIST
39768: LIST
39769: PUSH
39770: LD_INT 0
39772: PUSH
39773: LD_INT 1
39775: NEG
39776: PUSH
39777: EMPTY
39778: LIST
39779: LIST
39780: PUSH
39781: LD_INT 1
39783: PUSH
39784: LD_INT 0
39786: PUSH
39787: EMPTY
39788: LIST
39789: LIST
39790: PUSH
39791: LD_INT 1
39793: PUSH
39794: LD_INT 1
39796: PUSH
39797: EMPTY
39798: LIST
39799: LIST
39800: PUSH
39801: LD_INT 0
39803: PUSH
39804: LD_INT 1
39806: PUSH
39807: EMPTY
39808: LIST
39809: LIST
39810: PUSH
39811: LD_INT 1
39813: NEG
39814: PUSH
39815: LD_INT 0
39817: PUSH
39818: EMPTY
39819: LIST
39820: LIST
39821: PUSH
39822: LD_INT 1
39824: NEG
39825: PUSH
39826: LD_INT 1
39828: NEG
39829: PUSH
39830: EMPTY
39831: LIST
39832: LIST
39833: PUSH
39834: LD_INT 1
39836: NEG
39837: PUSH
39838: LD_INT 2
39840: NEG
39841: PUSH
39842: EMPTY
39843: LIST
39844: LIST
39845: PUSH
39846: LD_INT 1
39848: NEG
39849: PUSH
39850: LD_INT 1
39852: PUSH
39853: EMPTY
39854: LIST
39855: LIST
39856: PUSH
39857: LD_INT 2
39859: NEG
39860: PUSH
39861: LD_INT 0
39863: PUSH
39864: EMPTY
39865: LIST
39866: LIST
39867: PUSH
39868: LD_INT 2
39870: NEG
39871: PUSH
39872: LD_INT 1
39874: NEG
39875: PUSH
39876: EMPTY
39877: LIST
39878: LIST
39879: PUSH
39880: LD_INT 2
39882: NEG
39883: PUSH
39884: LD_INT 2
39886: NEG
39887: PUSH
39888: EMPTY
39889: LIST
39890: LIST
39891: PUSH
39892: EMPTY
39893: LIST
39894: LIST
39895: LIST
39896: LIST
39897: LIST
39898: LIST
39899: LIST
39900: LIST
39901: LIST
39902: LIST
39903: LIST
39904: LIST
39905: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39906: LD_ADDR_VAR 0 53
39910: PUSH
39911: LD_INT 0
39913: PUSH
39914: LD_INT 0
39916: PUSH
39917: EMPTY
39918: LIST
39919: LIST
39920: PUSH
39921: LD_INT 0
39923: PUSH
39924: LD_INT 1
39926: NEG
39927: PUSH
39928: EMPTY
39929: LIST
39930: LIST
39931: PUSH
39932: LD_INT 1
39934: PUSH
39935: LD_INT 0
39937: PUSH
39938: EMPTY
39939: LIST
39940: LIST
39941: PUSH
39942: LD_INT 1
39944: PUSH
39945: LD_INT 1
39947: PUSH
39948: EMPTY
39949: LIST
39950: LIST
39951: PUSH
39952: LD_INT 0
39954: PUSH
39955: LD_INT 1
39957: PUSH
39958: EMPTY
39959: LIST
39960: LIST
39961: PUSH
39962: LD_INT 1
39964: NEG
39965: PUSH
39966: LD_INT 0
39968: PUSH
39969: EMPTY
39970: LIST
39971: LIST
39972: PUSH
39973: LD_INT 1
39975: NEG
39976: PUSH
39977: LD_INT 1
39979: NEG
39980: PUSH
39981: EMPTY
39982: LIST
39983: LIST
39984: PUSH
39985: LD_INT 1
39987: NEG
39988: PUSH
39989: LD_INT 2
39991: NEG
39992: PUSH
39993: EMPTY
39994: LIST
39995: LIST
39996: PUSH
39997: LD_INT 0
39999: PUSH
40000: LD_INT 2
40002: NEG
40003: PUSH
40004: EMPTY
40005: LIST
40006: LIST
40007: PUSH
40008: LD_INT 1
40010: PUSH
40011: LD_INT 1
40013: NEG
40014: PUSH
40015: EMPTY
40016: LIST
40017: LIST
40018: PUSH
40019: LD_INT 2
40021: PUSH
40022: LD_INT 0
40024: PUSH
40025: EMPTY
40026: LIST
40027: LIST
40028: PUSH
40029: LD_INT 2
40031: PUSH
40032: LD_INT 1
40034: PUSH
40035: EMPTY
40036: LIST
40037: LIST
40038: PUSH
40039: LD_INT 2
40041: PUSH
40042: LD_INT 2
40044: PUSH
40045: EMPTY
40046: LIST
40047: LIST
40048: PUSH
40049: LD_INT 1
40051: PUSH
40052: LD_INT 2
40054: PUSH
40055: EMPTY
40056: LIST
40057: LIST
40058: PUSH
40059: LD_INT 0
40061: PUSH
40062: LD_INT 2
40064: PUSH
40065: EMPTY
40066: LIST
40067: LIST
40068: PUSH
40069: LD_INT 1
40071: NEG
40072: PUSH
40073: LD_INT 1
40075: PUSH
40076: EMPTY
40077: LIST
40078: LIST
40079: PUSH
40080: LD_INT 2
40082: NEG
40083: PUSH
40084: LD_INT 0
40086: PUSH
40087: EMPTY
40088: LIST
40089: LIST
40090: PUSH
40091: LD_INT 2
40093: NEG
40094: PUSH
40095: LD_INT 1
40097: NEG
40098: PUSH
40099: EMPTY
40100: LIST
40101: LIST
40102: PUSH
40103: LD_INT 2
40105: NEG
40106: PUSH
40107: LD_INT 2
40109: NEG
40110: PUSH
40111: EMPTY
40112: LIST
40113: LIST
40114: PUSH
40115: EMPTY
40116: LIST
40117: LIST
40118: LIST
40119: LIST
40120: LIST
40121: LIST
40122: LIST
40123: LIST
40124: LIST
40125: LIST
40126: LIST
40127: LIST
40128: LIST
40129: LIST
40130: LIST
40131: LIST
40132: LIST
40133: LIST
40134: LIST
40135: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40136: LD_ADDR_VAR 0 54
40140: PUSH
40141: LD_INT 0
40143: PUSH
40144: LD_INT 0
40146: PUSH
40147: EMPTY
40148: LIST
40149: LIST
40150: PUSH
40151: LD_INT 0
40153: PUSH
40154: LD_INT 1
40156: NEG
40157: PUSH
40158: EMPTY
40159: LIST
40160: LIST
40161: PUSH
40162: LD_INT 1
40164: PUSH
40165: LD_INT 0
40167: PUSH
40168: EMPTY
40169: LIST
40170: LIST
40171: PUSH
40172: LD_INT 1
40174: PUSH
40175: LD_INT 1
40177: PUSH
40178: EMPTY
40179: LIST
40180: LIST
40181: PUSH
40182: LD_INT 0
40184: PUSH
40185: LD_INT 1
40187: PUSH
40188: EMPTY
40189: LIST
40190: LIST
40191: PUSH
40192: LD_INT 1
40194: NEG
40195: PUSH
40196: LD_INT 0
40198: PUSH
40199: EMPTY
40200: LIST
40201: LIST
40202: PUSH
40203: LD_INT 1
40205: NEG
40206: PUSH
40207: LD_INT 1
40209: NEG
40210: PUSH
40211: EMPTY
40212: LIST
40213: LIST
40214: PUSH
40215: LD_INT 1
40217: NEG
40218: PUSH
40219: LD_INT 2
40221: NEG
40222: PUSH
40223: EMPTY
40224: LIST
40225: LIST
40226: PUSH
40227: LD_INT 0
40229: PUSH
40230: LD_INT 2
40232: NEG
40233: PUSH
40234: EMPTY
40235: LIST
40236: LIST
40237: PUSH
40238: LD_INT 1
40240: PUSH
40241: LD_INT 1
40243: NEG
40244: PUSH
40245: EMPTY
40246: LIST
40247: LIST
40248: PUSH
40249: LD_INT 2
40251: PUSH
40252: LD_INT 0
40254: PUSH
40255: EMPTY
40256: LIST
40257: LIST
40258: PUSH
40259: LD_INT 2
40261: PUSH
40262: LD_INT 1
40264: PUSH
40265: EMPTY
40266: LIST
40267: LIST
40268: PUSH
40269: LD_INT 2
40271: PUSH
40272: LD_INT 2
40274: PUSH
40275: EMPTY
40276: LIST
40277: LIST
40278: PUSH
40279: LD_INT 1
40281: PUSH
40282: LD_INT 2
40284: PUSH
40285: EMPTY
40286: LIST
40287: LIST
40288: PUSH
40289: LD_INT 0
40291: PUSH
40292: LD_INT 2
40294: PUSH
40295: EMPTY
40296: LIST
40297: LIST
40298: PUSH
40299: LD_INT 1
40301: NEG
40302: PUSH
40303: LD_INT 1
40305: PUSH
40306: EMPTY
40307: LIST
40308: LIST
40309: PUSH
40310: LD_INT 2
40312: NEG
40313: PUSH
40314: LD_INT 0
40316: PUSH
40317: EMPTY
40318: LIST
40319: LIST
40320: PUSH
40321: LD_INT 2
40323: NEG
40324: PUSH
40325: LD_INT 1
40327: NEG
40328: PUSH
40329: EMPTY
40330: LIST
40331: LIST
40332: PUSH
40333: LD_INT 2
40335: NEG
40336: PUSH
40337: LD_INT 2
40339: NEG
40340: PUSH
40341: EMPTY
40342: LIST
40343: LIST
40344: PUSH
40345: EMPTY
40346: LIST
40347: LIST
40348: LIST
40349: LIST
40350: LIST
40351: LIST
40352: LIST
40353: LIST
40354: LIST
40355: LIST
40356: LIST
40357: LIST
40358: LIST
40359: LIST
40360: LIST
40361: LIST
40362: LIST
40363: LIST
40364: LIST
40365: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40366: LD_ADDR_VAR 0 55
40370: PUSH
40371: LD_INT 0
40373: PUSH
40374: LD_INT 0
40376: PUSH
40377: EMPTY
40378: LIST
40379: LIST
40380: PUSH
40381: LD_INT 0
40383: PUSH
40384: LD_INT 1
40386: NEG
40387: PUSH
40388: EMPTY
40389: LIST
40390: LIST
40391: PUSH
40392: LD_INT 1
40394: PUSH
40395: LD_INT 0
40397: PUSH
40398: EMPTY
40399: LIST
40400: LIST
40401: PUSH
40402: LD_INT 1
40404: PUSH
40405: LD_INT 1
40407: PUSH
40408: EMPTY
40409: LIST
40410: LIST
40411: PUSH
40412: LD_INT 0
40414: PUSH
40415: LD_INT 1
40417: PUSH
40418: EMPTY
40419: LIST
40420: LIST
40421: PUSH
40422: LD_INT 1
40424: NEG
40425: PUSH
40426: LD_INT 0
40428: PUSH
40429: EMPTY
40430: LIST
40431: LIST
40432: PUSH
40433: LD_INT 1
40435: NEG
40436: PUSH
40437: LD_INT 1
40439: NEG
40440: PUSH
40441: EMPTY
40442: LIST
40443: LIST
40444: PUSH
40445: LD_INT 1
40447: NEG
40448: PUSH
40449: LD_INT 2
40451: NEG
40452: PUSH
40453: EMPTY
40454: LIST
40455: LIST
40456: PUSH
40457: LD_INT 0
40459: PUSH
40460: LD_INT 2
40462: NEG
40463: PUSH
40464: EMPTY
40465: LIST
40466: LIST
40467: PUSH
40468: LD_INT 1
40470: PUSH
40471: LD_INT 1
40473: NEG
40474: PUSH
40475: EMPTY
40476: LIST
40477: LIST
40478: PUSH
40479: LD_INT 2
40481: PUSH
40482: LD_INT 0
40484: PUSH
40485: EMPTY
40486: LIST
40487: LIST
40488: PUSH
40489: LD_INT 2
40491: PUSH
40492: LD_INT 1
40494: PUSH
40495: EMPTY
40496: LIST
40497: LIST
40498: PUSH
40499: LD_INT 2
40501: PUSH
40502: LD_INT 2
40504: PUSH
40505: EMPTY
40506: LIST
40507: LIST
40508: PUSH
40509: LD_INT 1
40511: PUSH
40512: LD_INT 2
40514: PUSH
40515: EMPTY
40516: LIST
40517: LIST
40518: PUSH
40519: LD_INT 0
40521: PUSH
40522: LD_INT 2
40524: PUSH
40525: EMPTY
40526: LIST
40527: LIST
40528: PUSH
40529: LD_INT 1
40531: NEG
40532: PUSH
40533: LD_INT 1
40535: PUSH
40536: EMPTY
40537: LIST
40538: LIST
40539: PUSH
40540: LD_INT 2
40542: NEG
40543: PUSH
40544: LD_INT 0
40546: PUSH
40547: EMPTY
40548: LIST
40549: LIST
40550: PUSH
40551: LD_INT 2
40553: NEG
40554: PUSH
40555: LD_INT 1
40557: NEG
40558: PUSH
40559: EMPTY
40560: LIST
40561: LIST
40562: PUSH
40563: LD_INT 2
40565: NEG
40566: PUSH
40567: LD_INT 2
40569: NEG
40570: PUSH
40571: EMPTY
40572: LIST
40573: LIST
40574: PUSH
40575: EMPTY
40576: LIST
40577: LIST
40578: LIST
40579: LIST
40580: LIST
40581: LIST
40582: LIST
40583: LIST
40584: LIST
40585: LIST
40586: LIST
40587: LIST
40588: LIST
40589: LIST
40590: LIST
40591: LIST
40592: LIST
40593: LIST
40594: LIST
40595: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40596: LD_ADDR_VAR 0 56
40600: PUSH
40601: LD_INT 0
40603: PUSH
40604: LD_INT 0
40606: PUSH
40607: EMPTY
40608: LIST
40609: LIST
40610: PUSH
40611: LD_INT 0
40613: PUSH
40614: LD_INT 1
40616: NEG
40617: PUSH
40618: EMPTY
40619: LIST
40620: LIST
40621: PUSH
40622: LD_INT 1
40624: PUSH
40625: LD_INT 0
40627: PUSH
40628: EMPTY
40629: LIST
40630: LIST
40631: PUSH
40632: LD_INT 1
40634: PUSH
40635: LD_INT 1
40637: PUSH
40638: EMPTY
40639: LIST
40640: LIST
40641: PUSH
40642: LD_INT 0
40644: PUSH
40645: LD_INT 1
40647: PUSH
40648: EMPTY
40649: LIST
40650: LIST
40651: PUSH
40652: LD_INT 1
40654: NEG
40655: PUSH
40656: LD_INT 0
40658: PUSH
40659: EMPTY
40660: LIST
40661: LIST
40662: PUSH
40663: LD_INT 1
40665: NEG
40666: PUSH
40667: LD_INT 1
40669: NEG
40670: PUSH
40671: EMPTY
40672: LIST
40673: LIST
40674: PUSH
40675: LD_INT 1
40677: NEG
40678: PUSH
40679: LD_INT 2
40681: NEG
40682: PUSH
40683: EMPTY
40684: LIST
40685: LIST
40686: PUSH
40687: LD_INT 0
40689: PUSH
40690: LD_INT 2
40692: NEG
40693: PUSH
40694: EMPTY
40695: LIST
40696: LIST
40697: PUSH
40698: LD_INT 1
40700: PUSH
40701: LD_INT 1
40703: NEG
40704: PUSH
40705: EMPTY
40706: LIST
40707: LIST
40708: PUSH
40709: LD_INT 2
40711: PUSH
40712: LD_INT 0
40714: PUSH
40715: EMPTY
40716: LIST
40717: LIST
40718: PUSH
40719: LD_INT 2
40721: PUSH
40722: LD_INT 1
40724: PUSH
40725: EMPTY
40726: LIST
40727: LIST
40728: PUSH
40729: LD_INT 2
40731: PUSH
40732: LD_INT 2
40734: PUSH
40735: EMPTY
40736: LIST
40737: LIST
40738: PUSH
40739: LD_INT 1
40741: PUSH
40742: LD_INT 2
40744: PUSH
40745: EMPTY
40746: LIST
40747: LIST
40748: PUSH
40749: LD_INT 0
40751: PUSH
40752: LD_INT 2
40754: PUSH
40755: EMPTY
40756: LIST
40757: LIST
40758: PUSH
40759: LD_INT 1
40761: NEG
40762: PUSH
40763: LD_INT 1
40765: PUSH
40766: EMPTY
40767: LIST
40768: LIST
40769: PUSH
40770: LD_INT 2
40772: NEG
40773: PUSH
40774: LD_INT 0
40776: PUSH
40777: EMPTY
40778: LIST
40779: LIST
40780: PUSH
40781: LD_INT 2
40783: NEG
40784: PUSH
40785: LD_INT 1
40787: NEG
40788: PUSH
40789: EMPTY
40790: LIST
40791: LIST
40792: PUSH
40793: LD_INT 2
40795: NEG
40796: PUSH
40797: LD_INT 2
40799: NEG
40800: PUSH
40801: EMPTY
40802: LIST
40803: LIST
40804: PUSH
40805: EMPTY
40806: LIST
40807: LIST
40808: LIST
40809: LIST
40810: LIST
40811: LIST
40812: LIST
40813: LIST
40814: LIST
40815: LIST
40816: LIST
40817: LIST
40818: LIST
40819: LIST
40820: LIST
40821: LIST
40822: LIST
40823: LIST
40824: LIST
40825: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40826: LD_ADDR_VAR 0 57
40830: PUSH
40831: LD_INT 0
40833: PUSH
40834: LD_INT 0
40836: PUSH
40837: EMPTY
40838: LIST
40839: LIST
40840: PUSH
40841: LD_INT 0
40843: PUSH
40844: LD_INT 1
40846: NEG
40847: PUSH
40848: EMPTY
40849: LIST
40850: LIST
40851: PUSH
40852: LD_INT 1
40854: PUSH
40855: LD_INT 0
40857: PUSH
40858: EMPTY
40859: LIST
40860: LIST
40861: PUSH
40862: LD_INT 1
40864: PUSH
40865: LD_INT 1
40867: PUSH
40868: EMPTY
40869: LIST
40870: LIST
40871: PUSH
40872: LD_INT 0
40874: PUSH
40875: LD_INT 1
40877: PUSH
40878: EMPTY
40879: LIST
40880: LIST
40881: PUSH
40882: LD_INT 1
40884: NEG
40885: PUSH
40886: LD_INT 0
40888: PUSH
40889: EMPTY
40890: LIST
40891: LIST
40892: PUSH
40893: LD_INT 1
40895: NEG
40896: PUSH
40897: LD_INT 1
40899: NEG
40900: PUSH
40901: EMPTY
40902: LIST
40903: LIST
40904: PUSH
40905: LD_INT 1
40907: NEG
40908: PUSH
40909: LD_INT 2
40911: NEG
40912: PUSH
40913: EMPTY
40914: LIST
40915: LIST
40916: PUSH
40917: LD_INT 0
40919: PUSH
40920: LD_INT 2
40922: NEG
40923: PUSH
40924: EMPTY
40925: LIST
40926: LIST
40927: PUSH
40928: LD_INT 1
40930: PUSH
40931: LD_INT 1
40933: NEG
40934: PUSH
40935: EMPTY
40936: LIST
40937: LIST
40938: PUSH
40939: LD_INT 2
40941: PUSH
40942: LD_INT 0
40944: PUSH
40945: EMPTY
40946: LIST
40947: LIST
40948: PUSH
40949: LD_INT 2
40951: PUSH
40952: LD_INT 1
40954: PUSH
40955: EMPTY
40956: LIST
40957: LIST
40958: PUSH
40959: LD_INT 2
40961: PUSH
40962: LD_INT 2
40964: PUSH
40965: EMPTY
40966: LIST
40967: LIST
40968: PUSH
40969: LD_INT 1
40971: PUSH
40972: LD_INT 2
40974: PUSH
40975: EMPTY
40976: LIST
40977: LIST
40978: PUSH
40979: LD_INT 0
40981: PUSH
40982: LD_INT 2
40984: PUSH
40985: EMPTY
40986: LIST
40987: LIST
40988: PUSH
40989: LD_INT 1
40991: NEG
40992: PUSH
40993: LD_INT 1
40995: PUSH
40996: EMPTY
40997: LIST
40998: LIST
40999: PUSH
41000: LD_INT 2
41002: NEG
41003: PUSH
41004: LD_INT 0
41006: PUSH
41007: EMPTY
41008: LIST
41009: LIST
41010: PUSH
41011: LD_INT 2
41013: NEG
41014: PUSH
41015: LD_INT 1
41017: NEG
41018: PUSH
41019: EMPTY
41020: LIST
41021: LIST
41022: PUSH
41023: LD_INT 2
41025: NEG
41026: PUSH
41027: LD_INT 2
41029: NEG
41030: PUSH
41031: EMPTY
41032: LIST
41033: LIST
41034: PUSH
41035: EMPTY
41036: LIST
41037: LIST
41038: LIST
41039: LIST
41040: LIST
41041: LIST
41042: LIST
41043: LIST
41044: LIST
41045: LIST
41046: LIST
41047: LIST
41048: LIST
41049: LIST
41050: LIST
41051: LIST
41052: LIST
41053: LIST
41054: LIST
41055: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41056: LD_ADDR_VAR 0 58
41060: PUSH
41061: LD_INT 0
41063: PUSH
41064: LD_INT 0
41066: PUSH
41067: EMPTY
41068: LIST
41069: LIST
41070: PUSH
41071: LD_INT 0
41073: PUSH
41074: LD_INT 1
41076: NEG
41077: PUSH
41078: EMPTY
41079: LIST
41080: LIST
41081: PUSH
41082: LD_INT 1
41084: PUSH
41085: LD_INT 0
41087: PUSH
41088: EMPTY
41089: LIST
41090: LIST
41091: PUSH
41092: LD_INT 1
41094: PUSH
41095: LD_INT 1
41097: PUSH
41098: EMPTY
41099: LIST
41100: LIST
41101: PUSH
41102: LD_INT 0
41104: PUSH
41105: LD_INT 1
41107: PUSH
41108: EMPTY
41109: LIST
41110: LIST
41111: PUSH
41112: LD_INT 1
41114: NEG
41115: PUSH
41116: LD_INT 0
41118: PUSH
41119: EMPTY
41120: LIST
41121: LIST
41122: PUSH
41123: LD_INT 1
41125: NEG
41126: PUSH
41127: LD_INT 1
41129: NEG
41130: PUSH
41131: EMPTY
41132: LIST
41133: LIST
41134: PUSH
41135: LD_INT 1
41137: NEG
41138: PUSH
41139: LD_INT 2
41141: NEG
41142: PUSH
41143: EMPTY
41144: LIST
41145: LIST
41146: PUSH
41147: LD_INT 0
41149: PUSH
41150: LD_INT 2
41152: NEG
41153: PUSH
41154: EMPTY
41155: LIST
41156: LIST
41157: PUSH
41158: LD_INT 1
41160: PUSH
41161: LD_INT 1
41163: NEG
41164: PUSH
41165: EMPTY
41166: LIST
41167: LIST
41168: PUSH
41169: LD_INT 2
41171: PUSH
41172: LD_INT 0
41174: PUSH
41175: EMPTY
41176: LIST
41177: LIST
41178: PUSH
41179: LD_INT 2
41181: PUSH
41182: LD_INT 1
41184: PUSH
41185: EMPTY
41186: LIST
41187: LIST
41188: PUSH
41189: LD_INT 2
41191: PUSH
41192: LD_INT 2
41194: PUSH
41195: EMPTY
41196: LIST
41197: LIST
41198: PUSH
41199: LD_INT 1
41201: PUSH
41202: LD_INT 2
41204: PUSH
41205: EMPTY
41206: LIST
41207: LIST
41208: PUSH
41209: LD_INT 0
41211: PUSH
41212: LD_INT 2
41214: PUSH
41215: EMPTY
41216: LIST
41217: LIST
41218: PUSH
41219: LD_INT 1
41221: NEG
41222: PUSH
41223: LD_INT 1
41225: PUSH
41226: EMPTY
41227: LIST
41228: LIST
41229: PUSH
41230: LD_INT 2
41232: NEG
41233: PUSH
41234: LD_INT 0
41236: PUSH
41237: EMPTY
41238: LIST
41239: LIST
41240: PUSH
41241: LD_INT 2
41243: NEG
41244: PUSH
41245: LD_INT 1
41247: NEG
41248: PUSH
41249: EMPTY
41250: LIST
41251: LIST
41252: PUSH
41253: LD_INT 2
41255: NEG
41256: PUSH
41257: LD_INT 2
41259: NEG
41260: PUSH
41261: EMPTY
41262: LIST
41263: LIST
41264: PUSH
41265: EMPTY
41266: LIST
41267: LIST
41268: LIST
41269: LIST
41270: LIST
41271: LIST
41272: LIST
41273: LIST
41274: LIST
41275: LIST
41276: LIST
41277: LIST
41278: LIST
41279: LIST
41280: LIST
41281: LIST
41282: LIST
41283: LIST
41284: LIST
41285: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41286: LD_ADDR_VAR 0 59
41290: PUSH
41291: LD_INT 0
41293: PUSH
41294: LD_INT 0
41296: PUSH
41297: EMPTY
41298: LIST
41299: LIST
41300: PUSH
41301: LD_INT 0
41303: PUSH
41304: LD_INT 1
41306: NEG
41307: PUSH
41308: EMPTY
41309: LIST
41310: LIST
41311: PUSH
41312: LD_INT 1
41314: PUSH
41315: LD_INT 0
41317: PUSH
41318: EMPTY
41319: LIST
41320: LIST
41321: PUSH
41322: LD_INT 1
41324: PUSH
41325: LD_INT 1
41327: PUSH
41328: EMPTY
41329: LIST
41330: LIST
41331: PUSH
41332: LD_INT 0
41334: PUSH
41335: LD_INT 1
41337: PUSH
41338: EMPTY
41339: LIST
41340: LIST
41341: PUSH
41342: LD_INT 1
41344: NEG
41345: PUSH
41346: LD_INT 0
41348: PUSH
41349: EMPTY
41350: LIST
41351: LIST
41352: PUSH
41353: LD_INT 1
41355: NEG
41356: PUSH
41357: LD_INT 1
41359: NEG
41360: PUSH
41361: EMPTY
41362: LIST
41363: LIST
41364: PUSH
41365: EMPTY
41366: LIST
41367: LIST
41368: LIST
41369: LIST
41370: LIST
41371: LIST
41372: LIST
41373: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41374: LD_ADDR_VAR 0 60
41378: PUSH
41379: LD_INT 0
41381: PUSH
41382: LD_INT 0
41384: PUSH
41385: EMPTY
41386: LIST
41387: LIST
41388: PUSH
41389: LD_INT 0
41391: PUSH
41392: LD_INT 1
41394: NEG
41395: PUSH
41396: EMPTY
41397: LIST
41398: LIST
41399: PUSH
41400: LD_INT 1
41402: PUSH
41403: LD_INT 0
41405: PUSH
41406: EMPTY
41407: LIST
41408: LIST
41409: PUSH
41410: LD_INT 1
41412: PUSH
41413: LD_INT 1
41415: PUSH
41416: EMPTY
41417: LIST
41418: LIST
41419: PUSH
41420: LD_INT 0
41422: PUSH
41423: LD_INT 1
41425: PUSH
41426: EMPTY
41427: LIST
41428: LIST
41429: PUSH
41430: LD_INT 1
41432: NEG
41433: PUSH
41434: LD_INT 0
41436: PUSH
41437: EMPTY
41438: LIST
41439: LIST
41440: PUSH
41441: LD_INT 1
41443: NEG
41444: PUSH
41445: LD_INT 1
41447: NEG
41448: PUSH
41449: EMPTY
41450: LIST
41451: LIST
41452: PUSH
41453: EMPTY
41454: LIST
41455: LIST
41456: LIST
41457: LIST
41458: LIST
41459: LIST
41460: LIST
41461: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41462: LD_ADDR_VAR 0 61
41466: PUSH
41467: LD_INT 0
41469: PUSH
41470: LD_INT 0
41472: PUSH
41473: EMPTY
41474: LIST
41475: LIST
41476: PUSH
41477: LD_INT 0
41479: PUSH
41480: LD_INT 1
41482: NEG
41483: PUSH
41484: EMPTY
41485: LIST
41486: LIST
41487: PUSH
41488: LD_INT 1
41490: PUSH
41491: LD_INT 0
41493: PUSH
41494: EMPTY
41495: LIST
41496: LIST
41497: PUSH
41498: LD_INT 1
41500: PUSH
41501: LD_INT 1
41503: PUSH
41504: EMPTY
41505: LIST
41506: LIST
41507: PUSH
41508: LD_INT 0
41510: PUSH
41511: LD_INT 1
41513: PUSH
41514: EMPTY
41515: LIST
41516: LIST
41517: PUSH
41518: LD_INT 1
41520: NEG
41521: PUSH
41522: LD_INT 0
41524: PUSH
41525: EMPTY
41526: LIST
41527: LIST
41528: PUSH
41529: LD_INT 1
41531: NEG
41532: PUSH
41533: LD_INT 1
41535: NEG
41536: PUSH
41537: EMPTY
41538: LIST
41539: LIST
41540: PUSH
41541: EMPTY
41542: LIST
41543: LIST
41544: LIST
41545: LIST
41546: LIST
41547: LIST
41548: LIST
41549: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41550: LD_ADDR_VAR 0 62
41554: PUSH
41555: LD_INT 0
41557: PUSH
41558: LD_INT 0
41560: PUSH
41561: EMPTY
41562: LIST
41563: LIST
41564: PUSH
41565: LD_INT 0
41567: PUSH
41568: LD_INT 1
41570: NEG
41571: PUSH
41572: EMPTY
41573: LIST
41574: LIST
41575: PUSH
41576: LD_INT 1
41578: PUSH
41579: LD_INT 0
41581: PUSH
41582: EMPTY
41583: LIST
41584: LIST
41585: PUSH
41586: LD_INT 1
41588: PUSH
41589: LD_INT 1
41591: PUSH
41592: EMPTY
41593: LIST
41594: LIST
41595: PUSH
41596: LD_INT 0
41598: PUSH
41599: LD_INT 1
41601: PUSH
41602: EMPTY
41603: LIST
41604: LIST
41605: PUSH
41606: LD_INT 1
41608: NEG
41609: PUSH
41610: LD_INT 0
41612: PUSH
41613: EMPTY
41614: LIST
41615: LIST
41616: PUSH
41617: LD_INT 1
41619: NEG
41620: PUSH
41621: LD_INT 1
41623: NEG
41624: PUSH
41625: EMPTY
41626: LIST
41627: LIST
41628: PUSH
41629: EMPTY
41630: LIST
41631: LIST
41632: LIST
41633: LIST
41634: LIST
41635: LIST
41636: LIST
41637: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41638: LD_ADDR_VAR 0 63
41642: PUSH
41643: LD_INT 0
41645: PUSH
41646: LD_INT 0
41648: PUSH
41649: EMPTY
41650: LIST
41651: LIST
41652: PUSH
41653: LD_INT 0
41655: PUSH
41656: LD_INT 1
41658: NEG
41659: PUSH
41660: EMPTY
41661: LIST
41662: LIST
41663: PUSH
41664: LD_INT 1
41666: PUSH
41667: LD_INT 0
41669: PUSH
41670: EMPTY
41671: LIST
41672: LIST
41673: PUSH
41674: LD_INT 1
41676: PUSH
41677: LD_INT 1
41679: PUSH
41680: EMPTY
41681: LIST
41682: LIST
41683: PUSH
41684: LD_INT 0
41686: PUSH
41687: LD_INT 1
41689: PUSH
41690: EMPTY
41691: LIST
41692: LIST
41693: PUSH
41694: LD_INT 1
41696: NEG
41697: PUSH
41698: LD_INT 0
41700: PUSH
41701: EMPTY
41702: LIST
41703: LIST
41704: PUSH
41705: LD_INT 1
41707: NEG
41708: PUSH
41709: LD_INT 1
41711: NEG
41712: PUSH
41713: EMPTY
41714: LIST
41715: LIST
41716: PUSH
41717: EMPTY
41718: LIST
41719: LIST
41720: LIST
41721: LIST
41722: LIST
41723: LIST
41724: LIST
41725: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41726: LD_ADDR_VAR 0 64
41730: PUSH
41731: LD_INT 0
41733: PUSH
41734: LD_INT 0
41736: PUSH
41737: EMPTY
41738: LIST
41739: LIST
41740: PUSH
41741: LD_INT 0
41743: PUSH
41744: LD_INT 1
41746: NEG
41747: PUSH
41748: EMPTY
41749: LIST
41750: LIST
41751: PUSH
41752: LD_INT 1
41754: PUSH
41755: LD_INT 0
41757: PUSH
41758: EMPTY
41759: LIST
41760: LIST
41761: PUSH
41762: LD_INT 1
41764: PUSH
41765: LD_INT 1
41767: PUSH
41768: EMPTY
41769: LIST
41770: LIST
41771: PUSH
41772: LD_INT 0
41774: PUSH
41775: LD_INT 1
41777: PUSH
41778: EMPTY
41779: LIST
41780: LIST
41781: PUSH
41782: LD_INT 1
41784: NEG
41785: PUSH
41786: LD_INT 0
41788: PUSH
41789: EMPTY
41790: LIST
41791: LIST
41792: PUSH
41793: LD_INT 1
41795: NEG
41796: PUSH
41797: LD_INT 1
41799: NEG
41800: PUSH
41801: EMPTY
41802: LIST
41803: LIST
41804: PUSH
41805: EMPTY
41806: LIST
41807: LIST
41808: LIST
41809: LIST
41810: LIST
41811: LIST
41812: LIST
41813: ST_TO_ADDR
// end ; 1 :
41814: GO 47711
41816: LD_INT 1
41818: DOUBLE
41819: EQUAL
41820: IFTRUE 41824
41822: GO 44447
41824: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41825: LD_ADDR_VAR 0 11
41829: PUSH
41830: LD_INT 1
41832: NEG
41833: PUSH
41834: LD_INT 3
41836: NEG
41837: PUSH
41838: EMPTY
41839: LIST
41840: LIST
41841: PUSH
41842: LD_INT 0
41844: PUSH
41845: LD_INT 3
41847: NEG
41848: PUSH
41849: EMPTY
41850: LIST
41851: LIST
41852: PUSH
41853: LD_INT 1
41855: PUSH
41856: LD_INT 2
41858: NEG
41859: PUSH
41860: EMPTY
41861: LIST
41862: LIST
41863: PUSH
41864: EMPTY
41865: LIST
41866: LIST
41867: LIST
41868: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41869: LD_ADDR_VAR 0 12
41873: PUSH
41874: LD_INT 2
41876: PUSH
41877: LD_INT 1
41879: NEG
41880: PUSH
41881: EMPTY
41882: LIST
41883: LIST
41884: PUSH
41885: LD_INT 3
41887: PUSH
41888: LD_INT 0
41890: PUSH
41891: EMPTY
41892: LIST
41893: LIST
41894: PUSH
41895: LD_INT 3
41897: PUSH
41898: LD_INT 1
41900: PUSH
41901: EMPTY
41902: LIST
41903: LIST
41904: PUSH
41905: EMPTY
41906: LIST
41907: LIST
41908: LIST
41909: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41910: LD_ADDR_VAR 0 13
41914: PUSH
41915: LD_INT 3
41917: PUSH
41918: LD_INT 2
41920: PUSH
41921: EMPTY
41922: LIST
41923: LIST
41924: PUSH
41925: LD_INT 3
41927: PUSH
41928: LD_INT 3
41930: PUSH
41931: EMPTY
41932: LIST
41933: LIST
41934: PUSH
41935: LD_INT 2
41937: PUSH
41938: LD_INT 3
41940: PUSH
41941: EMPTY
41942: LIST
41943: LIST
41944: PUSH
41945: EMPTY
41946: LIST
41947: LIST
41948: LIST
41949: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41950: LD_ADDR_VAR 0 14
41954: PUSH
41955: LD_INT 1
41957: PUSH
41958: LD_INT 3
41960: PUSH
41961: EMPTY
41962: LIST
41963: LIST
41964: PUSH
41965: LD_INT 0
41967: PUSH
41968: LD_INT 3
41970: PUSH
41971: EMPTY
41972: LIST
41973: LIST
41974: PUSH
41975: LD_INT 1
41977: NEG
41978: PUSH
41979: LD_INT 2
41981: PUSH
41982: EMPTY
41983: LIST
41984: LIST
41985: PUSH
41986: EMPTY
41987: LIST
41988: LIST
41989: LIST
41990: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41991: LD_ADDR_VAR 0 15
41995: PUSH
41996: LD_INT 2
41998: NEG
41999: PUSH
42000: LD_INT 1
42002: PUSH
42003: EMPTY
42004: LIST
42005: LIST
42006: PUSH
42007: LD_INT 3
42009: NEG
42010: PUSH
42011: LD_INT 0
42013: PUSH
42014: EMPTY
42015: LIST
42016: LIST
42017: PUSH
42018: LD_INT 3
42020: NEG
42021: PUSH
42022: LD_INT 1
42024: NEG
42025: PUSH
42026: EMPTY
42027: LIST
42028: LIST
42029: PUSH
42030: EMPTY
42031: LIST
42032: LIST
42033: LIST
42034: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42035: LD_ADDR_VAR 0 16
42039: PUSH
42040: LD_INT 2
42042: NEG
42043: PUSH
42044: LD_INT 3
42046: NEG
42047: PUSH
42048: EMPTY
42049: LIST
42050: LIST
42051: PUSH
42052: LD_INT 3
42054: NEG
42055: PUSH
42056: LD_INT 2
42058: NEG
42059: PUSH
42060: EMPTY
42061: LIST
42062: LIST
42063: PUSH
42064: LD_INT 3
42066: NEG
42067: PUSH
42068: LD_INT 3
42070: NEG
42071: PUSH
42072: EMPTY
42073: LIST
42074: LIST
42075: PUSH
42076: EMPTY
42077: LIST
42078: LIST
42079: LIST
42080: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42081: LD_ADDR_VAR 0 17
42085: PUSH
42086: LD_INT 1
42088: NEG
42089: PUSH
42090: LD_INT 3
42092: NEG
42093: PUSH
42094: EMPTY
42095: LIST
42096: LIST
42097: PUSH
42098: LD_INT 0
42100: PUSH
42101: LD_INT 3
42103: NEG
42104: PUSH
42105: EMPTY
42106: LIST
42107: LIST
42108: PUSH
42109: LD_INT 1
42111: PUSH
42112: LD_INT 2
42114: NEG
42115: PUSH
42116: EMPTY
42117: LIST
42118: LIST
42119: PUSH
42120: EMPTY
42121: LIST
42122: LIST
42123: LIST
42124: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42125: LD_ADDR_VAR 0 18
42129: PUSH
42130: LD_INT 2
42132: PUSH
42133: LD_INT 1
42135: NEG
42136: PUSH
42137: EMPTY
42138: LIST
42139: LIST
42140: PUSH
42141: LD_INT 3
42143: PUSH
42144: LD_INT 0
42146: PUSH
42147: EMPTY
42148: LIST
42149: LIST
42150: PUSH
42151: LD_INT 3
42153: PUSH
42154: LD_INT 1
42156: PUSH
42157: EMPTY
42158: LIST
42159: LIST
42160: PUSH
42161: EMPTY
42162: LIST
42163: LIST
42164: LIST
42165: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42166: LD_ADDR_VAR 0 19
42170: PUSH
42171: LD_INT 3
42173: PUSH
42174: LD_INT 2
42176: PUSH
42177: EMPTY
42178: LIST
42179: LIST
42180: PUSH
42181: LD_INT 3
42183: PUSH
42184: LD_INT 3
42186: PUSH
42187: EMPTY
42188: LIST
42189: LIST
42190: PUSH
42191: LD_INT 2
42193: PUSH
42194: LD_INT 3
42196: PUSH
42197: EMPTY
42198: LIST
42199: LIST
42200: PUSH
42201: EMPTY
42202: LIST
42203: LIST
42204: LIST
42205: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42206: LD_ADDR_VAR 0 20
42210: PUSH
42211: LD_INT 1
42213: PUSH
42214: LD_INT 3
42216: PUSH
42217: EMPTY
42218: LIST
42219: LIST
42220: PUSH
42221: LD_INT 0
42223: PUSH
42224: LD_INT 3
42226: PUSH
42227: EMPTY
42228: LIST
42229: LIST
42230: PUSH
42231: LD_INT 1
42233: NEG
42234: PUSH
42235: LD_INT 2
42237: PUSH
42238: EMPTY
42239: LIST
42240: LIST
42241: PUSH
42242: EMPTY
42243: LIST
42244: LIST
42245: LIST
42246: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42247: LD_ADDR_VAR 0 21
42251: PUSH
42252: LD_INT 2
42254: NEG
42255: PUSH
42256: LD_INT 1
42258: PUSH
42259: EMPTY
42260: LIST
42261: LIST
42262: PUSH
42263: LD_INT 3
42265: NEG
42266: PUSH
42267: LD_INT 0
42269: PUSH
42270: EMPTY
42271: LIST
42272: LIST
42273: PUSH
42274: LD_INT 3
42276: NEG
42277: PUSH
42278: LD_INT 1
42280: NEG
42281: PUSH
42282: EMPTY
42283: LIST
42284: LIST
42285: PUSH
42286: EMPTY
42287: LIST
42288: LIST
42289: LIST
42290: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42291: LD_ADDR_VAR 0 22
42295: PUSH
42296: LD_INT 2
42298: NEG
42299: PUSH
42300: LD_INT 3
42302: NEG
42303: PUSH
42304: EMPTY
42305: LIST
42306: LIST
42307: PUSH
42308: LD_INT 3
42310: NEG
42311: PUSH
42312: LD_INT 2
42314: NEG
42315: PUSH
42316: EMPTY
42317: LIST
42318: LIST
42319: PUSH
42320: LD_INT 3
42322: NEG
42323: PUSH
42324: LD_INT 3
42326: NEG
42327: PUSH
42328: EMPTY
42329: LIST
42330: LIST
42331: PUSH
42332: EMPTY
42333: LIST
42334: LIST
42335: LIST
42336: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
42337: LD_ADDR_VAR 0 23
42341: PUSH
42342: LD_INT 0
42344: PUSH
42345: LD_INT 3
42347: NEG
42348: PUSH
42349: EMPTY
42350: LIST
42351: LIST
42352: PUSH
42353: LD_INT 1
42355: NEG
42356: PUSH
42357: LD_INT 4
42359: NEG
42360: PUSH
42361: EMPTY
42362: LIST
42363: LIST
42364: PUSH
42365: LD_INT 1
42367: PUSH
42368: LD_INT 3
42370: NEG
42371: PUSH
42372: EMPTY
42373: LIST
42374: LIST
42375: PUSH
42376: EMPTY
42377: LIST
42378: LIST
42379: LIST
42380: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
42381: LD_ADDR_VAR 0 24
42385: PUSH
42386: LD_INT 3
42388: PUSH
42389: LD_INT 0
42391: PUSH
42392: EMPTY
42393: LIST
42394: LIST
42395: PUSH
42396: LD_INT 3
42398: PUSH
42399: LD_INT 1
42401: NEG
42402: PUSH
42403: EMPTY
42404: LIST
42405: LIST
42406: PUSH
42407: LD_INT 4
42409: PUSH
42410: LD_INT 1
42412: PUSH
42413: EMPTY
42414: LIST
42415: LIST
42416: PUSH
42417: EMPTY
42418: LIST
42419: LIST
42420: LIST
42421: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
42422: LD_ADDR_VAR 0 25
42426: PUSH
42427: LD_INT 3
42429: PUSH
42430: LD_INT 3
42432: PUSH
42433: EMPTY
42434: LIST
42435: LIST
42436: PUSH
42437: LD_INT 4
42439: PUSH
42440: LD_INT 3
42442: PUSH
42443: EMPTY
42444: LIST
42445: LIST
42446: PUSH
42447: LD_INT 3
42449: PUSH
42450: LD_INT 4
42452: PUSH
42453: EMPTY
42454: LIST
42455: LIST
42456: PUSH
42457: EMPTY
42458: LIST
42459: LIST
42460: LIST
42461: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
42462: LD_ADDR_VAR 0 26
42466: PUSH
42467: LD_INT 0
42469: PUSH
42470: LD_INT 3
42472: PUSH
42473: EMPTY
42474: LIST
42475: LIST
42476: PUSH
42477: LD_INT 1
42479: PUSH
42480: LD_INT 4
42482: PUSH
42483: EMPTY
42484: LIST
42485: LIST
42486: PUSH
42487: LD_INT 1
42489: NEG
42490: PUSH
42491: LD_INT 3
42493: PUSH
42494: EMPTY
42495: LIST
42496: LIST
42497: PUSH
42498: EMPTY
42499: LIST
42500: LIST
42501: LIST
42502: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
42503: LD_ADDR_VAR 0 27
42507: PUSH
42508: LD_INT 3
42510: NEG
42511: PUSH
42512: LD_INT 0
42514: PUSH
42515: EMPTY
42516: LIST
42517: LIST
42518: PUSH
42519: LD_INT 3
42521: NEG
42522: PUSH
42523: LD_INT 1
42525: PUSH
42526: EMPTY
42527: LIST
42528: LIST
42529: PUSH
42530: LD_INT 4
42532: NEG
42533: PUSH
42534: LD_INT 1
42536: NEG
42537: PUSH
42538: EMPTY
42539: LIST
42540: LIST
42541: PUSH
42542: EMPTY
42543: LIST
42544: LIST
42545: LIST
42546: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
42547: LD_ADDR_VAR 0 28
42551: PUSH
42552: LD_INT 3
42554: NEG
42555: PUSH
42556: LD_INT 3
42558: NEG
42559: PUSH
42560: EMPTY
42561: LIST
42562: LIST
42563: PUSH
42564: LD_INT 3
42566: NEG
42567: PUSH
42568: LD_INT 4
42570: NEG
42571: PUSH
42572: EMPTY
42573: LIST
42574: LIST
42575: PUSH
42576: LD_INT 4
42578: NEG
42579: PUSH
42580: LD_INT 3
42582: NEG
42583: PUSH
42584: EMPTY
42585: LIST
42586: LIST
42587: PUSH
42588: EMPTY
42589: LIST
42590: LIST
42591: LIST
42592: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
42593: LD_ADDR_VAR 0 29
42597: PUSH
42598: LD_INT 1
42600: NEG
42601: PUSH
42602: LD_INT 3
42604: NEG
42605: PUSH
42606: EMPTY
42607: LIST
42608: LIST
42609: PUSH
42610: LD_INT 0
42612: PUSH
42613: LD_INT 3
42615: NEG
42616: PUSH
42617: EMPTY
42618: LIST
42619: LIST
42620: PUSH
42621: LD_INT 1
42623: PUSH
42624: LD_INT 2
42626: NEG
42627: PUSH
42628: EMPTY
42629: LIST
42630: LIST
42631: PUSH
42632: LD_INT 1
42634: NEG
42635: PUSH
42636: LD_INT 4
42638: NEG
42639: PUSH
42640: EMPTY
42641: LIST
42642: LIST
42643: PUSH
42644: LD_INT 0
42646: PUSH
42647: LD_INT 4
42649: NEG
42650: PUSH
42651: EMPTY
42652: LIST
42653: LIST
42654: PUSH
42655: LD_INT 1
42657: PUSH
42658: LD_INT 3
42660: NEG
42661: PUSH
42662: EMPTY
42663: LIST
42664: LIST
42665: PUSH
42666: LD_INT 1
42668: NEG
42669: PUSH
42670: LD_INT 5
42672: NEG
42673: PUSH
42674: EMPTY
42675: LIST
42676: LIST
42677: PUSH
42678: LD_INT 0
42680: PUSH
42681: LD_INT 5
42683: NEG
42684: PUSH
42685: EMPTY
42686: LIST
42687: LIST
42688: PUSH
42689: LD_INT 1
42691: PUSH
42692: LD_INT 4
42694: NEG
42695: PUSH
42696: EMPTY
42697: LIST
42698: LIST
42699: PUSH
42700: LD_INT 1
42702: NEG
42703: PUSH
42704: LD_INT 6
42706: NEG
42707: PUSH
42708: EMPTY
42709: LIST
42710: LIST
42711: PUSH
42712: LD_INT 0
42714: PUSH
42715: LD_INT 6
42717: NEG
42718: PUSH
42719: EMPTY
42720: LIST
42721: LIST
42722: PUSH
42723: LD_INT 1
42725: PUSH
42726: LD_INT 5
42728: NEG
42729: PUSH
42730: EMPTY
42731: LIST
42732: LIST
42733: PUSH
42734: EMPTY
42735: LIST
42736: LIST
42737: LIST
42738: LIST
42739: LIST
42740: LIST
42741: LIST
42742: LIST
42743: LIST
42744: LIST
42745: LIST
42746: LIST
42747: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
42748: LD_ADDR_VAR 0 30
42752: PUSH
42753: LD_INT 2
42755: PUSH
42756: LD_INT 1
42758: NEG
42759: PUSH
42760: EMPTY
42761: LIST
42762: LIST
42763: PUSH
42764: LD_INT 3
42766: PUSH
42767: LD_INT 0
42769: PUSH
42770: EMPTY
42771: LIST
42772: LIST
42773: PUSH
42774: LD_INT 3
42776: PUSH
42777: LD_INT 1
42779: PUSH
42780: EMPTY
42781: LIST
42782: LIST
42783: PUSH
42784: LD_INT 3
42786: PUSH
42787: LD_INT 1
42789: NEG
42790: PUSH
42791: EMPTY
42792: LIST
42793: LIST
42794: PUSH
42795: LD_INT 4
42797: PUSH
42798: LD_INT 0
42800: PUSH
42801: EMPTY
42802: LIST
42803: LIST
42804: PUSH
42805: LD_INT 4
42807: PUSH
42808: LD_INT 1
42810: PUSH
42811: EMPTY
42812: LIST
42813: LIST
42814: PUSH
42815: LD_INT 4
42817: PUSH
42818: LD_INT 1
42820: NEG
42821: PUSH
42822: EMPTY
42823: LIST
42824: LIST
42825: PUSH
42826: LD_INT 5
42828: PUSH
42829: LD_INT 0
42831: PUSH
42832: EMPTY
42833: LIST
42834: LIST
42835: PUSH
42836: LD_INT 5
42838: PUSH
42839: LD_INT 1
42841: PUSH
42842: EMPTY
42843: LIST
42844: LIST
42845: PUSH
42846: LD_INT 5
42848: PUSH
42849: LD_INT 1
42851: NEG
42852: PUSH
42853: EMPTY
42854: LIST
42855: LIST
42856: PUSH
42857: LD_INT 6
42859: PUSH
42860: LD_INT 0
42862: PUSH
42863: EMPTY
42864: LIST
42865: LIST
42866: PUSH
42867: LD_INT 6
42869: PUSH
42870: LD_INT 1
42872: PUSH
42873: EMPTY
42874: LIST
42875: LIST
42876: PUSH
42877: EMPTY
42878: LIST
42879: LIST
42880: LIST
42881: LIST
42882: LIST
42883: LIST
42884: LIST
42885: LIST
42886: LIST
42887: LIST
42888: LIST
42889: LIST
42890: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
42891: LD_ADDR_VAR 0 31
42895: PUSH
42896: LD_INT 3
42898: PUSH
42899: LD_INT 2
42901: PUSH
42902: EMPTY
42903: LIST
42904: LIST
42905: PUSH
42906: LD_INT 3
42908: PUSH
42909: LD_INT 3
42911: PUSH
42912: EMPTY
42913: LIST
42914: LIST
42915: PUSH
42916: LD_INT 2
42918: PUSH
42919: LD_INT 3
42921: PUSH
42922: EMPTY
42923: LIST
42924: LIST
42925: PUSH
42926: LD_INT 4
42928: PUSH
42929: LD_INT 3
42931: PUSH
42932: EMPTY
42933: LIST
42934: LIST
42935: PUSH
42936: LD_INT 4
42938: PUSH
42939: LD_INT 4
42941: PUSH
42942: EMPTY
42943: LIST
42944: LIST
42945: PUSH
42946: LD_INT 3
42948: PUSH
42949: LD_INT 4
42951: PUSH
42952: EMPTY
42953: LIST
42954: LIST
42955: PUSH
42956: LD_INT 5
42958: PUSH
42959: LD_INT 4
42961: PUSH
42962: EMPTY
42963: LIST
42964: LIST
42965: PUSH
42966: LD_INT 5
42968: PUSH
42969: LD_INT 5
42971: PUSH
42972: EMPTY
42973: LIST
42974: LIST
42975: PUSH
42976: LD_INT 4
42978: PUSH
42979: LD_INT 5
42981: PUSH
42982: EMPTY
42983: LIST
42984: LIST
42985: PUSH
42986: LD_INT 6
42988: PUSH
42989: LD_INT 5
42991: PUSH
42992: EMPTY
42993: LIST
42994: LIST
42995: PUSH
42996: LD_INT 6
42998: PUSH
42999: LD_INT 6
43001: PUSH
43002: EMPTY
43003: LIST
43004: LIST
43005: PUSH
43006: LD_INT 5
43008: PUSH
43009: LD_INT 6
43011: PUSH
43012: EMPTY
43013: LIST
43014: LIST
43015: PUSH
43016: EMPTY
43017: LIST
43018: LIST
43019: LIST
43020: LIST
43021: LIST
43022: LIST
43023: LIST
43024: LIST
43025: LIST
43026: LIST
43027: LIST
43028: LIST
43029: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
43030: LD_ADDR_VAR 0 32
43034: PUSH
43035: LD_INT 1
43037: PUSH
43038: LD_INT 3
43040: PUSH
43041: EMPTY
43042: LIST
43043: LIST
43044: PUSH
43045: LD_INT 0
43047: PUSH
43048: LD_INT 3
43050: PUSH
43051: EMPTY
43052: LIST
43053: LIST
43054: PUSH
43055: LD_INT 1
43057: NEG
43058: PUSH
43059: LD_INT 2
43061: PUSH
43062: EMPTY
43063: LIST
43064: LIST
43065: PUSH
43066: LD_INT 1
43068: PUSH
43069: LD_INT 4
43071: PUSH
43072: EMPTY
43073: LIST
43074: LIST
43075: PUSH
43076: LD_INT 0
43078: PUSH
43079: LD_INT 4
43081: PUSH
43082: EMPTY
43083: LIST
43084: LIST
43085: PUSH
43086: LD_INT 1
43088: NEG
43089: PUSH
43090: LD_INT 3
43092: PUSH
43093: EMPTY
43094: LIST
43095: LIST
43096: PUSH
43097: LD_INT 1
43099: PUSH
43100: LD_INT 5
43102: PUSH
43103: EMPTY
43104: LIST
43105: LIST
43106: PUSH
43107: LD_INT 0
43109: PUSH
43110: LD_INT 5
43112: PUSH
43113: EMPTY
43114: LIST
43115: LIST
43116: PUSH
43117: LD_INT 1
43119: NEG
43120: PUSH
43121: LD_INT 4
43123: PUSH
43124: EMPTY
43125: LIST
43126: LIST
43127: PUSH
43128: LD_INT 1
43130: PUSH
43131: LD_INT 6
43133: PUSH
43134: EMPTY
43135: LIST
43136: LIST
43137: PUSH
43138: LD_INT 0
43140: PUSH
43141: LD_INT 6
43143: PUSH
43144: EMPTY
43145: LIST
43146: LIST
43147: PUSH
43148: LD_INT 1
43150: NEG
43151: PUSH
43152: LD_INT 5
43154: PUSH
43155: EMPTY
43156: LIST
43157: LIST
43158: PUSH
43159: EMPTY
43160: LIST
43161: LIST
43162: LIST
43163: LIST
43164: LIST
43165: LIST
43166: LIST
43167: LIST
43168: LIST
43169: LIST
43170: LIST
43171: LIST
43172: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
43173: LD_ADDR_VAR 0 33
43177: PUSH
43178: LD_INT 2
43180: NEG
43181: PUSH
43182: LD_INT 1
43184: PUSH
43185: EMPTY
43186: LIST
43187: LIST
43188: PUSH
43189: LD_INT 3
43191: NEG
43192: PUSH
43193: LD_INT 0
43195: PUSH
43196: EMPTY
43197: LIST
43198: LIST
43199: PUSH
43200: LD_INT 3
43202: NEG
43203: PUSH
43204: LD_INT 1
43206: NEG
43207: PUSH
43208: EMPTY
43209: LIST
43210: LIST
43211: PUSH
43212: LD_INT 3
43214: NEG
43215: PUSH
43216: LD_INT 1
43218: PUSH
43219: EMPTY
43220: LIST
43221: LIST
43222: PUSH
43223: LD_INT 4
43225: NEG
43226: PUSH
43227: LD_INT 0
43229: PUSH
43230: EMPTY
43231: LIST
43232: LIST
43233: PUSH
43234: LD_INT 4
43236: NEG
43237: PUSH
43238: LD_INT 1
43240: NEG
43241: PUSH
43242: EMPTY
43243: LIST
43244: LIST
43245: PUSH
43246: LD_INT 4
43248: NEG
43249: PUSH
43250: LD_INT 1
43252: PUSH
43253: EMPTY
43254: LIST
43255: LIST
43256: PUSH
43257: LD_INT 5
43259: NEG
43260: PUSH
43261: LD_INT 0
43263: PUSH
43264: EMPTY
43265: LIST
43266: LIST
43267: PUSH
43268: LD_INT 5
43270: NEG
43271: PUSH
43272: LD_INT 1
43274: NEG
43275: PUSH
43276: EMPTY
43277: LIST
43278: LIST
43279: PUSH
43280: LD_INT 5
43282: NEG
43283: PUSH
43284: LD_INT 1
43286: PUSH
43287: EMPTY
43288: LIST
43289: LIST
43290: PUSH
43291: LD_INT 6
43293: NEG
43294: PUSH
43295: LD_INT 0
43297: PUSH
43298: EMPTY
43299: LIST
43300: LIST
43301: PUSH
43302: LD_INT 6
43304: NEG
43305: PUSH
43306: LD_INT 1
43308: NEG
43309: PUSH
43310: EMPTY
43311: LIST
43312: LIST
43313: PUSH
43314: EMPTY
43315: LIST
43316: LIST
43317: LIST
43318: LIST
43319: LIST
43320: LIST
43321: LIST
43322: LIST
43323: LIST
43324: LIST
43325: LIST
43326: LIST
43327: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
43328: LD_ADDR_VAR 0 34
43332: PUSH
43333: LD_INT 2
43335: NEG
43336: PUSH
43337: LD_INT 3
43339: NEG
43340: PUSH
43341: EMPTY
43342: LIST
43343: LIST
43344: PUSH
43345: LD_INT 3
43347: NEG
43348: PUSH
43349: LD_INT 2
43351: NEG
43352: PUSH
43353: EMPTY
43354: LIST
43355: LIST
43356: PUSH
43357: LD_INT 3
43359: NEG
43360: PUSH
43361: LD_INT 3
43363: NEG
43364: PUSH
43365: EMPTY
43366: LIST
43367: LIST
43368: PUSH
43369: LD_INT 3
43371: NEG
43372: PUSH
43373: LD_INT 4
43375: NEG
43376: PUSH
43377: EMPTY
43378: LIST
43379: LIST
43380: PUSH
43381: LD_INT 4
43383: NEG
43384: PUSH
43385: LD_INT 3
43387: NEG
43388: PUSH
43389: EMPTY
43390: LIST
43391: LIST
43392: PUSH
43393: LD_INT 4
43395: NEG
43396: PUSH
43397: LD_INT 4
43399: NEG
43400: PUSH
43401: EMPTY
43402: LIST
43403: LIST
43404: PUSH
43405: LD_INT 4
43407: NEG
43408: PUSH
43409: LD_INT 5
43411: NEG
43412: PUSH
43413: EMPTY
43414: LIST
43415: LIST
43416: PUSH
43417: LD_INT 5
43419: NEG
43420: PUSH
43421: LD_INT 4
43423: NEG
43424: PUSH
43425: EMPTY
43426: LIST
43427: LIST
43428: PUSH
43429: LD_INT 5
43431: NEG
43432: PUSH
43433: LD_INT 5
43435: NEG
43436: PUSH
43437: EMPTY
43438: LIST
43439: LIST
43440: PUSH
43441: LD_INT 5
43443: NEG
43444: PUSH
43445: LD_INT 6
43447: NEG
43448: PUSH
43449: EMPTY
43450: LIST
43451: LIST
43452: PUSH
43453: LD_INT 6
43455: NEG
43456: PUSH
43457: LD_INT 5
43459: NEG
43460: PUSH
43461: EMPTY
43462: LIST
43463: LIST
43464: PUSH
43465: LD_INT 6
43467: NEG
43468: PUSH
43469: LD_INT 6
43471: NEG
43472: PUSH
43473: EMPTY
43474: LIST
43475: LIST
43476: PUSH
43477: EMPTY
43478: LIST
43479: LIST
43480: LIST
43481: LIST
43482: LIST
43483: LIST
43484: LIST
43485: LIST
43486: LIST
43487: LIST
43488: LIST
43489: LIST
43490: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
43491: LD_ADDR_VAR 0 41
43495: PUSH
43496: LD_INT 0
43498: PUSH
43499: LD_INT 2
43501: NEG
43502: PUSH
43503: EMPTY
43504: LIST
43505: LIST
43506: PUSH
43507: LD_INT 1
43509: NEG
43510: PUSH
43511: LD_INT 3
43513: NEG
43514: PUSH
43515: EMPTY
43516: LIST
43517: LIST
43518: PUSH
43519: LD_INT 1
43521: PUSH
43522: LD_INT 2
43524: NEG
43525: PUSH
43526: EMPTY
43527: LIST
43528: LIST
43529: PUSH
43530: EMPTY
43531: LIST
43532: LIST
43533: LIST
43534: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
43535: LD_ADDR_VAR 0 42
43539: PUSH
43540: LD_INT 2
43542: PUSH
43543: LD_INT 0
43545: PUSH
43546: EMPTY
43547: LIST
43548: LIST
43549: PUSH
43550: LD_INT 2
43552: PUSH
43553: LD_INT 1
43555: NEG
43556: PUSH
43557: EMPTY
43558: LIST
43559: LIST
43560: PUSH
43561: LD_INT 3
43563: PUSH
43564: LD_INT 1
43566: PUSH
43567: EMPTY
43568: LIST
43569: LIST
43570: PUSH
43571: EMPTY
43572: LIST
43573: LIST
43574: LIST
43575: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
43576: LD_ADDR_VAR 0 43
43580: PUSH
43581: LD_INT 2
43583: PUSH
43584: LD_INT 2
43586: PUSH
43587: EMPTY
43588: LIST
43589: LIST
43590: PUSH
43591: LD_INT 3
43593: PUSH
43594: LD_INT 2
43596: PUSH
43597: EMPTY
43598: LIST
43599: LIST
43600: PUSH
43601: LD_INT 2
43603: PUSH
43604: LD_INT 3
43606: PUSH
43607: EMPTY
43608: LIST
43609: LIST
43610: PUSH
43611: EMPTY
43612: LIST
43613: LIST
43614: LIST
43615: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
43616: LD_ADDR_VAR 0 44
43620: PUSH
43621: LD_INT 0
43623: PUSH
43624: LD_INT 2
43626: PUSH
43627: EMPTY
43628: LIST
43629: LIST
43630: PUSH
43631: LD_INT 1
43633: PUSH
43634: LD_INT 3
43636: PUSH
43637: EMPTY
43638: LIST
43639: LIST
43640: PUSH
43641: LD_INT 1
43643: NEG
43644: PUSH
43645: LD_INT 2
43647: PUSH
43648: EMPTY
43649: LIST
43650: LIST
43651: PUSH
43652: EMPTY
43653: LIST
43654: LIST
43655: LIST
43656: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43657: LD_ADDR_VAR 0 45
43661: PUSH
43662: LD_INT 2
43664: NEG
43665: PUSH
43666: LD_INT 0
43668: PUSH
43669: EMPTY
43670: LIST
43671: LIST
43672: PUSH
43673: LD_INT 2
43675: NEG
43676: PUSH
43677: LD_INT 1
43679: PUSH
43680: EMPTY
43681: LIST
43682: LIST
43683: PUSH
43684: LD_INT 3
43686: NEG
43687: PUSH
43688: LD_INT 1
43690: NEG
43691: PUSH
43692: EMPTY
43693: LIST
43694: LIST
43695: PUSH
43696: EMPTY
43697: LIST
43698: LIST
43699: LIST
43700: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
43701: LD_ADDR_VAR 0 46
43705: PUSH
43706: LD_INT 2
43708: NEG
43709: PUSH
43710: LD_INT 2
43712: NEG
43713: PUSH
43714: EMPTY
43715: LIST
43716: LIST
43717: PUSH
43718: LD_INT 2
43720: NEG
43721: PUSH
43722: LD_INT 3
43724: NEG
43725: PUSH
43726: EMPTY
43727: LIST
43728: LIST
43729: PUSH
43730: LD_INT 3
43732: NEG
43733: PUSH
43734: LD_INT 2
43736: NEG
43737: PUSH
43738: EMPTY
43739: LIST
43740: LIST
43741: PUSH
43742: EMPTY
43743: LIST
43744: LIST
43745: LIST
43746: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
43747: LD_ADDR_VAR 0 47
43751: PUSH
43752: LD_INT 2
43754: NEG
43755: PUSH
43756: LD_INT 3
43758: NEG
43759: PUSH
43760: EMPTY
43761: LIST
43762: LIST
43763: PUSH
43764: LD_INT 1
43766: NEG
43767: PUSH
43768: LD_INT 3
43770: NEG
43771: PUSH
43772: EMPTY
43773: LIST
43774: LIST
43775: PUSH
43776: EMPTY
43777: LIST
43778: LIST
43779: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
43780: LD_ADDR_VAR 0 48
43784: PUSH
43785: LD_INT 1
43787: PUSH
43788: LD_INT 2
43790: NEG
43791: PUSH
43792: EMPTY
43793: LIST
43794: LIST
43795: PUSH
43796: LD_INT 2
43798: PUSH
43799: LD_INT 1
43801: NEG
43802: PUSH
43803: EMPTY
43804: LIST
43805: LIST
43806: PUSH
43807: EMPTY
43808: LIST
43809: LIST
43810: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
43811: LD_ADDR_VAR 0 49
43815: PUSH
43816: LD_INT 3
43818: PUSH
43819: LD_INT 1
43821: PUSH
43822: EMPTY
43823: LIST
43824: LIST
43825: PUSH
43826: LD_INT 3
43828: PUSH
43829: LD_INT 2
43831: PUSH
43832: EMPTY
43833: LIST
43834: LIST
43835: PUSH
43836: EMPTY
43837: LIST
43838: LIST
43839: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
43840: LD_ADDR_VAR 0 50
43844: PUSH
43845: LD_INT 2
43847: PUSH
43848: LD_INT 3
43850: PUSH
43851: EMPTY
43852: LIST
43853: LIST
43854: PUSH
43855: LD_INT 1
43857: PUSH
43858: LD_INT 3
43860: PUSH
43861: EMPTY
43862: LIST
43863: LIST
43864: PUSH
43865: EMPTY
43866: LIST
43867: LIST
43868: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
43869: LD_ADDR_VAR 0 51
43873: PUSH
43874: LD_INT 1
43876: NEG
43877: PUSH
43878: LD_INT 2
43880: PUSH
43881: EMPTY
43882: LIST
43883: LIST
43884: PUSH
43885: LD_INT 2
43887: NEG
43888: PUSH
43889: LD_INT 1
43891: PUSH
43892: EMPTY
43893: LIST
43894: LIST
43895: PUSH
43896: EMPTY
43897: LIST
43898: LIST
43899: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43900: LD_ADDR_VAR 0 52
43904: PUSH
43905: LD_INT 3
43907: NEG
43908: PUSH
43909: LD_INT 1
43911: NEG
43912: PUSH
43913: EMPTY
43914: LIST
43915: LIST
43916: PUSH
43917: LD_INT 3
43919: NEG
43920: PUSH
43921: LD_INT 2
43923: NEG
43924: PUSH
43925: EMPTY
43926: LIST
43927: LIST
43928: PUSH
43929: EMPTY
43930: LIST
43931: LIST
43932: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43933: LD_ADDR_VAR 0 53
43937: PUSH
43938: LD_INT 1
43940: NEG
43941: PUSH
43942: LD_INT 3
43944: NEG
43945: PUSH
43946: EMPTY
43947: LIST
43948: LIST
43949: PUSH
43950: LD_INT 0
43952: PUSH
43953: LD_INT 3
43955: NEG
43956: PUSH
43957: EMPTY
43958: LIST
43959: LIST
43960: PUSH
43961: LD_INT 1
43963: PUSH
43964: LD_INT 2
43966: NEG
43967: PUSH
43968: EMPTY
43969: LIST
43970: LIST
43971: PUSH
43972: EMPTY
43973: LIST
43974: LIST
43975: LIST
43976: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43977: LD_ADDR_VAR 0 54
43981: PUSH
43982: LD_INT 2
43984: PUSH
43985: LD_INT 1
43987: NEG
43988: PUSH
43989: EMPTY
43990: LIST
43991: LIST
43992: PUSH
43993: LD_INT 3
43995: PUSH
43996: LD_INT 0
43998: PUSH
43999: EMPTY
44000: LIST
44001: LIST
44002: PUSH
44003: LD_INT 3
44005: PUSH
44006: LD_INT 1
44008: PUSH
44009: EMPTY
44010: LIST
44011: LIST
44012: PUSH
44013: EMPTY
44014: LIST
44015: LIST
44016: LIST
44017: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44018: LD_ADDR_VAR 0 55
44022: PUSH
44023: LD_INT 3
44025: PUSH
44026: LD_INT 2
44028: PUSH
44029: EMPTY
44030: LIST
44031: LIST
44032: PUSH
44033: LD_INT 3
44035: PUSH
44036: LD_INT 3
44038: PUSH
44039: EMPTY
44040: LIST
44041: LIST
44042: PUSH
44043: LD_INT 2
44045: PUSH
44046: LD_INT 3
44048: PUSH
44049: EMPTY
44050: LIST
44051: LIST
44052: PUSH
44053: EMPTY
44054: LIST
44055: LIST
44056: LIST
44057: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44058: LD_ADDR_VAR 0 56
44062: PUSH
44063: LD_INT 1
44065: PUSH
44066: LD_INT 3
44068: PUSH
44069: EMPTY
44070: LIST
44071: LIST
44072: PUSH
44073: LD_INT 0
44075: PUSH
44076: LD_INT 3
44078: PUSH
44079: EMPTY
44080: LIST
44081: LIST
44082: PUSH
44083: LD_INT 1
44085: NEG
44086: PUSH
44087: LD_INT 2
44089: PUSH
44090: EMPTY
44091: LIST
44092: LIST
44093: PUSH
44094: EMPTY
44095: LIST
44096: LIST
44097: LIST
44098: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44099: LD_ADDR_VAR 0 57
44103: PUSH
44104: LD_INT 2
44106: NEG
44107: PUSH
44108: LD_INT 1
44110: PUSH
44111: EMPTY
44112: LIST
44113: LIST
44114: PUSH
44115: LD_INT 3
44117: NEG
44118: PUSH
44119: LD_INT 0
44121: PUSH
44122: EMPTY
44123: LIST
44124: LIST
44125: PUSH
44126: LD_INT 3
44128: NEG
44129: PUSH
44130: LD_INT 1
44132: NEG
44133: PUSH
44134: EMPTY
44135: LIST
44136: LIST
44137: PUSH
44138: EMPTY
44139: LIST
44140: LIST
44141: LIST
44142: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44143: LD_ADDR_VAR 0 58
44147: PUSH
44148: LD_INT 2
44150: NEG
44151: PUSH
44152: LD_INT 3
44154: NEG
44155: PUSH
44156: EMPTY
44157: LIST
44158: LIST
44159: PUSH
44160: LD_INT 3
44162: NEG
44163: PUSH
44164: LD_INT 2
44166: NEG
44167: PUSH
44168: EMPTY
44169: LIST
44170: LIST
44171: PUSH
44172: LD_INT 3
44174: NEG
44175: PUSH
44176: LD_INT 3
44178: NEG
44179: PUSH
44180: EMPTY
44181: LIST
44182: LIST
44183: PUSH
44184: EMPTY
44185: LIST
44186: LIST
44187: LIST
44188: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
44189: LD_ADDR_VAR 0 59
44193: PUSH
44194: LD_INT 1
44196: NEG
44197: PUSH
44198: LD_INT 2
44200: NEG
44201: PUSH
44202: EMPTY
44203: LIST
44204: LIST
44205: PUSH
44206: LD_INT 0
44208: PUSH
44209: LD_INT 2
44211: NEG
44212: PUSH
44213: EMPTY
44214: LIST
44215: LIST
44216: PUSH
44217: LD_INT 1
44219: PUSH
44220: LD_INT 1
44222: NEG
44223: PUSH
44224: EMPTY
44225: LIST
44226: LIST
44227: PUSH
44228: EMPTY
44229: LIST
44230: LIST
44231: LIST
44232: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
44233: LD_ADDR_VAR 0 60
44237: PUSH
44238: LD_INT 1
44240: PUSH
44241: LD_INT 1
44243: NEG
44244: PUSH
44245: EMPTY
44246: LIST
44247: LIST
44248: PUSH
44249: LD_INT 2
44251: PUSH
44252: LD_INT 0
44254: PUSH
44255: EMPTY
44256: LIST
44257: LIST
44258: PUSH
44259: LD_INT 2
44261: PUSH
44262: LD_INT 1
44264: PUSH
44265: EMPTY
44266: LIST
44267: LIST
44268: PUSH
44269: EMPTY
44270: LIST
44271: LIST
44272: LIST
44273: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
44274: LD_ADDR_VAR 0 61
44278: PUSH
44279: LD_INT 2
44281: PUSH
44282: LD_INT 1
44284: PUSH
44285: EMPTY
44286: LIST
44287: LIST
44288: PUSH
44289: LD_INT 2
44291: PUSH
44292: LD_INT 2
44294: PUSH
44295: EMPTY
44296: LIST
44297: LIST
44298: PUSH
44299: LD_INT 1
44301: PUSH
44302: LD_INT 2
44304: PUSH
44305: EMPTY
44306: LIST
44307: LIST
44308: PUSH
44309: EMPTY
44310: LIST
44311: LIST
44312: LIST
44313: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
44314: LD_ADDR_VAR 0 62
44318: PUSH
44319: LD_INT 1
44321: PUSH
44322: LD_INT 2
44324: PUSH
44325: EMPTY
44326: LIST
44327: LIST
44328: PUSH
44329: LD_INT 0
44331: PUSH
44332: LD_INT 2
44334: PUSH
44335: EMPTY
44336: LIST
44337: LIST
44338: PUSH
44339: LD_INT 1
44341: NEG
44342: PUSH
44343: LD_INT 1
44345: PUSH
44346: EMPTY
44347: LIST
44348: LIST
44349: PUSH
44350: EMPTY
44351: LIST
44352: LIST
44353: LIST
44354: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
44355: LD_ADDR_VAR 0 63
44359: PUSH
44360: LD_INT 1
44362: NEG
44363: PUSH
44364: LD_INT 1
44366: PUSH
44367: EMPTY
44368: LIST
44369: LIST
44370: PUSH
44371: LD_INT 2
44373: NEG
44374: PUSH
44375: LD_INT 0
44377: PUSH
44378: EMPTY
44379: LIST
44380: LIST
44381: PUSH
44382: LD_INT 2
44384: NEG
44385: PUSH
44386: LD_INT 1
44388: NEG
44389: PUSH
44390: EMPTY
44391: LIST
44392: LIST
44393: PUSH
44394: EMPTY
44395: LIST
44396: LIST
44397: LIST
44398: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44399: LD_ADDR_VAR 0 64
44403: PUSH
44404: LD_INT 1
44406: NEG
44407: PUSH
44408: LD_INT 2
44410: NEG
44411: PUSH
44412: EMPTY
44413: LIST
44414: LIST
44415: PUSH
44416: LD_INT 2
44418: NEG
44419: PUSH
44420: LD_INT 1
44422: NEG
44423: PUSH
44424: EMPTY
44425: LIST
44426: LIST
44427: PUSH
44428: LD_INT 2
44430: NEG
44431: PUSH
44432: LD_INT 2
44434: NEG
44435: PUSH
44436: EMPTY
44437: LIST
44438: LIST
44439: PUSH
44440: EMPTY
44441: LIST
44442: LIST
44443: LIST
44444: ST_TO_ADDR
// end ; 2 :
44445: GO 47711
44447: LD_INT 2
44449: DOUBLE
44450: EQUAL
44451: IFTRUE 44455
44453: GO 47710
44455: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
44456: LD_ADDR_VAR 0 29
44460: PUSH
44461: LD_INT 4
44463: PUSH
44464: LD_INT 0
44466: PUSH
44467: EMPTY
44468: LIST
44469: LIST
44470: PUSH
44471: LD_INT 4
44473: PUSH
44474: LD_INT 1
44476: NEG
44477: PUSH
44478: EMPTY
44479: LIST
44480: LIST
44481: PUSH
44482: LD_INT 5
44484: PUSH
44485: LD_INT 0
44487: PUSH
44488: EMPTY
44489: LIST
44490: LIST
44491: PUSH
44492: LD_INT 5
44494: PUSH
44495: LD_INT 1
44497: PUSH
44498: EMPTY
44499: LIST
44500: LIST
44501: PUSH
44502: LD_INT 4
44504: PUSH
44505: LD_INT 1
44507: PUSH
44508: EMPTY
44509: LIST
44510: LIST
44511: PUSH
44512: LD_INT 3
44514: PUSH
44515: LD_INT 0
44517: PUSH
44518: EMPTY
44519: LIST
44520: LIST
44521: PUSH
44522: LD_INT 3
44524: PUSH
44525: LD_INT 1
44527: NEG
44528: PUSH
44529: EMPTY
44530: LIST
44531: LIST
44532: PUSH
44533: LD_INT 3
44535: PUSH
44536: LD_INT 2
44538: NEG
44539: PUSH
44540: EMPTY
44541: LIST
44542: LIST
44543: PUSH
44544: LD_INT 5
44546: PUSH
44547: LD_INT 2
44549: PUSH
44550: EMPTY
44551: LIST
44552: LIST
44553: PUSH
44554: LD_INT 3
44556: PUSH
44557: LD_INT 3
44559: PUSH
44560: EMPTY
44561: LIST
44562: LIST
44563: PUSH
44564: LD_INT 3
44566: PUSH
44567: LD_INT 2
44569: PUSH
44570: EMPTY
44571: LIST
44572: LIST
44573: PUSH
44574: LD_INT 4
44576: PUSH
44577: LD_INT 3
44579: PUSH
44580: EMPTY
44581: LIST
44582: LIST
44583: PUSH
44584: LD_INT 4
44586: PUSH
44587: LD_INT 4
44589: PUSH
44590: EMPTY
44591: LIST
44592: LIST
44593: PUSH
44594: LD_INT 3
44596: PUSH
44597: LD_INT 4
44599: PUSH
44600: EMPTY
44601: LIST
44602: LIST
44603: PUSH
44604: LD_INT 2
44606: PUSH
44607: LD_INT 3
44609: PUSH
44610: EMPTY
44611: LIST
44612: LIST
44613: PUSH
44614: LD_INT 2
44616: PUSH
44617: LD_INT 2
44619: PUSH
44620: EMPTY
44621: LIST
44622: LIST
44623: PUSH
44624: LD_INT 4
44626: PUSH
44627: LD_INT 2
44629: PUSH
44630: EMPTY
44631: LIST
44632: LIST
44633: PUSH
44634: LD_INT 2
44636: PUSH
44637: LD_INT 4
44639: PUSH
44640: EMPTY
44641: LIST
44642: LIST
44643: PUSH
44644: LD_INT 0
44646: PUSH
44647: LD_INT 4
44649: PUSH
44650: EMPTY
44651: LIST
44652: LIST
44653: PUSH
44654: LD_INT 0
44656: PUSH
44657: LD_INT 3
44659: PUSH
44660: EMPTY
44661: LIST
44662: LIST
44663: PUSH
44664: LD_INT 1
44666: PUSH
44667: LD_INT 4
44669: PUSH
44670: EMPTY
44671: LIST
44672: LIST
44673: PUSH
44674: LD_INT 1
44676: PUSH
44677: LD_INT 5
44679: PUSH
44680: EMPTY
44681: LIST
44682: LIST
44683: PUSH
44684: LD_INT 0
44686: PUSH
44687: LD_INT 5
44689: PUSH
44690: EMPTY
44691: LIST
44692: LIST
44693: PUSH
44694: LD_INT 1
44696: NEG
44697: PUSH
44698: LD_INT 4
44700: PUSH
44701: EMPTY
44702: LIST
44703: LIST
44704: PUSH
44705: LD_INT 1
44707: NEG
44708: PUSH
44709: LD_INT 3
44711: PUSH
44712: EMPTY
44713: LIST
44714: LIST
44715: PUSH
44716: LD_INT 2
44718: PUSH
44719: LD_INT 5
44721: PUSH
44722: EMPTY
44723: LIST
44724: LIST
44725: PUSH
44726: LD_INT 2
44728: NEG
44729: PUSH
44730: LD_INT 3
44732: PUSH
44733: EMPTY
44734: LIST
44735: LIST
44736: PUSH
44737: LD_INT 3
44739: NEG
44740: PUSH
44741: LD_INT 0
44743: PUSH
44744: EMPTY
44745: LIST
44746: LIST
44747: PUSH
44748: LD_INT 3
44750: NEG
44751: PUSH
44752: LD_INT 1
44754: NEG
44755: PUSH
44756: EMPTY
44757: LIST
44758: LIST
44759: PUSH
44760: LD_INT 2
44762: NEG
44763: PUSH
44764: LD_INT 0
44766: PUSH
44767: EMPTY
44768: LIST
44769: LIST
44770: PUSH
44771: LD_INT 2
44773: NEG
44774: PUSH
44775: LD_INT 1
44777: PUSH
44778: EMPTY
44779: LIST
44780: LIST
44781: PUSH
44782: LD_INT 3
44784: NEG
44785: PUSH
44786: LD_INT 1
44788: PUSH
44789: EMPTY
44790: LIST
44791: LIST
44792: PUSH
44793: LD_INT 4
44795: NEG
44796: PUSH
44797: LD_INT 0
44799: PUSH
44800: EMPTY
44801: LIST
44802: LIST
44803: PUSH
44804: LD_INT 4
44806: NEG
44807: PUSH
44808: LD_INT 1
44810: NEG
44811: PUSH
44812: EMPTY
44813: LIST
44814: LIST
44815: PUSH
44816: LD_INT 4
44818: NEG
44819: PUSH
44820: LD_INT 2
44822: NEG
44823: PUSH
44824: EMPTY
44825: LIST
44826: LIST
44827: PUSH
44828: LD_INT 2
44830: NEG
44831: PUSH
44832: LD_INT 2
44834: PUSH
44835: EMPTY
44836: LIST
44837: LIST
44838: PUSH
44839: LD_INT 4
44841: NEG
44842: PUSH
44843: LD_INT 4
44845: NEG
44846: PUSH
44847: EMPTY
44848: LIST
44849: LIST
44850: PUSH
44851: LD_INT 4
44853: NEG
44854: PUSH
44855: LD_INT 5
44857: NEG
44858: PUSH
44859: EMPTY
44860: LIST
44861: LIST
44862: PUSH
44863: LD_INT 3
44865: NEG
44866: PUSH
44867: LD_INT 4
44869: NEG
44870: PUSH
44871: EMPTY
44872: LIST
44873: LIST
44874: PUSH
44875: LD_INT 3
44877: NEG
44878: PUSH
44879: LD_INT 3
44881: NEG
44882: PUSH
44883: EMPTY
44884: LIST
44885: LIST
44886: PUSH
44887: LD_INT 4
44889: NEG
44890: PUSH
44891: LD_INT 3
44893: NEG
44894: PUSH
44895: EMPTY
44896: LIST
44897: LIST
44898: PUSH
44899: LD_INT 5
44901: NEG
44902: PUSH
44903: LD_INT 4
44905: NEG
44906: PUSH
44907: EMPTY
44908: LIST
44909: LIST
44910: PUSH
44911: LD_INT 5
44913: NEG
44914: PUSH
44915: LD_INT 5
44917: NEG
44918: PUSH
44919: EMPTY
44920: LIST
44921: LIST
44922: PUSH
44923: LD_INT 3
44925: NEG
44926: PUSH
44927: LD_INT 5
44929: NEG
44930: PUSH
44931: EMPTY
44932: LIST
44933: LIST
44934: PUSH
44935: LD_INT 5
44937: NEG
44938: PUSH
44939: LD_INT 3
44941: NEG
44942: PUSH
44943: EMPTY
44944: LIST
44945: LIST
44946: PUSH
44947: EMPTY
44948: LIST
44949: LIST
44950: LIST
44951: LIST
44952: LIST
44953: LIST
44954: LIST
44955: LIST
44956: LIST
44957: LIST
44958: LIST
44959: LIST
44960: LIST
44961: LIST
44962: LIST
44963: LIST
44964: LIST
44965: LIST
44966: LIST
44967: LIST
44968: LIST
44969: LIST
44970: LIST
44971: LIST
44972: LIST
44973: LIST
44974: LIST
44975: LIST
44976: LIST
44977: LIST
44978: LIST
44979: LIST
44980: LIST
44981: LIST
44982: LIST
44983: LIST
44984: LIST
44985: LIST
44986: LIST
44987: LIST
44988: LIST
44989: LIST
44990: LIST
44991: LIST
44992: LIST
44993: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
44994: LD_ADDR_VAR 0 30
44998: PUSH
44999: LD_INT 4
45001: PUSH
45002: LD_INT 4
45004: PUSH
45005: EMPTY
45006: LIST
45007: LIST
45008: PUSH
45009: LD_INT 4
45011: PUSH
45012: LD_INT 3
45014: PUSH
45015: EMPTY
45016: LIST
45017: LIST
45018: PUSH
45019: LD_INT 5
45021: PUSH
45022: LD_INT 4
45024: PUSH
45025: EMPTY
45026: LIST
45027: LIST
45028: PUSH
45029: LD_INT 5
45031: PUSH
45032: LD_INT 5
45034: PUSH
45035: EMPTY
45036: LIST
45037: LIST
45038: PUSH
45039: LD_INT 4
45041: PUSH
45042: LD_INT 5
45044: PUSH
45045: EMPTY
45046: LIST
45047: LIST
45048: PUSH
45049: LD_INT 3
45051: PUSH
45052: LD_INT 4
45054: PUSH
45055: EMPTY
45056: LIST
45057: LIST
45058: PUSH
45059: LD_INT 3
45061: PUSH
45062: LD_INT 3
45064: PUSH
45065: EMPTY
45066: LIST
45067: LIST
45068: PUSH
45069: LD_INT 5
45071: PUSH
45072: LD_INT 3
45074: PUSH
45075: EMPTY
45076: LIST
45077: LIST
45078: PUSH
45079: LD_INT 3
45081: PUSH
45082: LD_INT 5
45084: PUSH
45085: EMPTY
45086: LIST
45087: LIST
45088: PUSH
45089: LD_INT 0
45091: PUSH
45092: LD_INT 3
45094: PUSH
45095: EMPTY
45096: LIST
45097: LIST
45098: PUSH
45099: LD_INT 0
45101: PUSH
45102: LD_INT 2
45104: PUSH
45105: EMPTY
45106: LIST
45107: LIST
45108: PUSH
45109: LD_INT 1
45111: PUSH
45112: LD_INT 3
45114: PUSH
45115: EMPTY
45116: LIST
45117: LIST
45118: PUSH
45119: LD_INT 1
45121: PUSH
45122: LD_INT 4
45124: PUSH
45125: EMPTY
45126: LIST
45127: LIST
45128: PUSH
45129: LD_INT 0
45131: PUSH
45132: LD_INT 4
45134: PUSH
45135: EMPTY
45136: LIST
45137: LIST
45138: PUSH
45139: LD_INT 1
45141: NEG
45142: PUSH
45143: LD_INT 3
45145: PUSH
45146: EMPTY
45147: LIST
45148: LIST
45149: PUSH
45150: LD_INT 1
45152: NEG
45153: PUSH
45154: LD_INT 2
45156: PUSH
45157: EMPTY
45158: LIST
45159: LIST
45160: PUSH
45161: LD_INT 2
45163: PUSH
45164: LD_INT 4
45166: PUSH
45167: EMPTY
45168: LIST
45169: LIST
45170: PUSH
45171: LD_INT 2
45173: NEG
45174: PUSH
45175: LD_INT 2
45177: PUSH
45178: EMPTY
45179: LIST
45180: LIST
45181: PUSH
45182: LD_INT 4
45184: NEG
45185: PUSH
45186: LD_INT 0
45188: PUSH
45189: EMPTY
45190: LIST
45191: LIST
45192: PUSH
45193: LD_INT 4
45195: NEG
45196: PUSH
45197: LD_INT 1
45199: NEG
45200: PUSH
45201: EMPTY
45202: LIST
45203: LIST
45204: PUSH
45205: LD_INT 3
45207: NEG
45208: PUSH
45209: LD_INT 0
45211: PUSH
45212: EMPTY
45213: LIST
45214: LIST
45215: PUSH
45216: LD_INT 3
45218: NEG
45219: PUSH
45220: LD_INT 1
45222: PUSH
45223: EMPTY
45224: LIST
45225: LIST
45226: PUSH
45227: LD_INT 4
45229: NEG
45230: PUSH
45231: LD_INT 1
45233: PUSH
45234: EMPTY
45235: LIST
45236: LIST
45237: PUSH
45238: LD_INT 5
45240: NEG
45241: PUSH
45242: LD_INT 0
45244: PUSH
45245: EMPTY
45246: LIST
45247: LIST
45248: PUSH
45249: LD_INT 5
45251: NEG
45252: PUSH
45253: LD_INT 1
45255: NEG
45256: PUSH
45257: EMPTY
45258: LIST
45259: LIST
45260: PUSH
45261: LD_INT 5
45263: NEG
45264: PUSH
45265: LD_INT 2
45267: NEG
45268: PUSH
45269: EMPTY
45270: LIST
45271: LIST
45272: PUSH
45273: LD_INT 3
45275: NEG
45276: PUSH
45277: LD_INT 2
45279: PUSH
45280: EMPTY
45281: LIST
45282: LIST
45283: PUSH
45284: LD_INT 3
45286: NEG
45287: PUSH
45288: LD_INT 3
45290: NEG
45291: PUSH
45292: EMPTY
45293: LIST
45294: LIST
45295: PUSH
45296: LD_INT 3
45298: NEG
45299: PUSH
45300: LD_INT 4
45302: NEG
45303: PUSH
45304: EMPTY
45305: LIST
45306: LIST
45307: PUSH
45308: LD_INT 2
45310: NEG
45311: PUSH
45312: LD_INT 3
45314: NEG
45315: PUSH
45316: EMPTY
45317: LIST
45318: LIST
45319: PUSH
45320: LD_INT 2
45322: NEG
45323: PUSH
45324: LD_INT 2
45326: NEG
45327: PUSH
45328: EMPTY
45329: LIST
45330: LIST
45331: PUSH
45332: LD_INT 3
45334: NEG
45335: PUSH
45336: LD_INT 2
45338: NEG
45339: PUSH
45340: EMPTY
45341: LIST
45342: LIST
45343: PUSH
45344: LD_INT 4
45346: NEG
45347: PUSH
45348: LD_INT 3
45350: NEG
45351: PUSH
45352: EMPTY
45353: LIST
45354: LIST
45355: PUSH
45356: LD_INT 4
45358: NEG
45359: PUSH
45360: LD_INT 4
45362: NEG
45363: PUSH
45364: EMPTY
45365: LIST
45366: LIST
45367: PUSH
45368: LD_INT 2
45370: NEG
45371: PUSH
45372: LD_INT 4
45374: NEG
45375: PUSH
45376: EMPTY
45377: LIST
45378: LIST
45379: PUSH
45380: LD_INT 4
45382: NEG
45383: PUSH
45384: LD_INT 2
45386: NEG
45387: PUSH
45388: EMPTY
45389: LIST
45390: LIST
45391: PUSH
45392: LD_INT 0
45394: PUSH
45395: LD_INT 4
45397: NEG
45398: PUSH
45399: EMPTY
45400: LIST
45401: LIST
45402: PUSH
45403: LD_INT 0
45405: PUSH
45406: LD_INT 5
45408: NEG
45409: PUSH
45410: EMPTY
45411: LIST
45412: LIST
45413: PUSH
45414: LD_INT 1
45416: PUSH
45417: LD_INT 4
45419: NEG
45420: PUSH
45421: EMPTY
45422: LIST
45423: LIST
45424: PUSH
45425: LD_INT 1
45427: PUSH
45428: LD_INT 3
45430: NEG
45431: PUSH
45432: EMPTY
45433: LIST
45434: LIST
45435: PUSH
45436: LD_INT 0
45438: PUSH
45439: LD_INT 3
45441: NEG
45442: PUSH
45443: EMPTY
45444: LIST
45445: LIST
45446: PUSH
45447: LD_INT 1
45449: NEG
45450: PUSH
45451: LD_INT 4
45453: NEG
45454: PUSH
45455: EMPTY
45456: LIST
45457: LIST
45458: PUSH
45459: LD_INT 1
45461: NEG
45462: PUSH
45463: LD_INT 5
45465: NEG
45466: PUSH
45467: EMPTY
45468: LIST
45469: LIST
45470: PUSH
45471: LD_INT 2
45473: PUSH
45474: LD_INT 3
45476: NEG
45477: PUSH
45478: EMPTY
45479: LIST
45480: LIST
45481: PUSH
45482: LD_INT 2
45484: NEG
45485: PUSH
45486: LD_INT 5
45488: NEG
45489: PUSH
45490: EMPTY
45491: LIST
45492: LIST
45493: PUSH
45494: EMPTY
45495: LIST
45496: LIST
45497: LIST
45498: LIST
45499: LIST
45500: LIST
45501: LIST
45502: LIST
45503: LIST
45504: LIST
45505: LIST
45506: LIST
45507: LIST
45508: LIST
45509: LIST
45510: LIST
45511: LIST
45512: LIST
45513: LIST
45514: LIST
45515: LIST
45516: LIST
45517: LIST
45518: LIST
45519: LIST
45520: LIST
45521: LIST
45522: LIST
45523: LIST
45524: LIST
45525: LIST
45526: LIST
45527: LIST
45528: LIST
45529: LIST
45530: LIST
45531: LIST
45532: LIST
45533: LIST
45534: LIST
45535: LIST
45536: LIST
45537: LIST
45538: LIST
45539: LIST
45540: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
45541: LD_ADDR_VAR 0 31
45545: PUSH
45546: LD_INT 0
45548: PUSH
45549: LD_INT 4
45551: PUSH
45552: EMPTY
45553: LIST
45554: LIST
45555: PUSH
45556: LD_INT 0
45558: PUSH
45559: LD_INT 3
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: PUSH
45566: LD_INT 1
45568: PUSH
45569: LD_INT 4
45571: PUSH
45572: EMPTY
45573: LIST
45574: LIST
45575: PUSH
45576: LD_INT 1
45578: PUSH
45579: LD_INT 5
45581: PUSH
45582: EMPTY
45583: LIST
45584: LIST
45585: PUSH
45586: LD_INT 0
45588: PUSH
45589: LD_INT 5
45591: PUSH
45592: EMPTY
45593: LIST
45594: LIST
45595: PUSH
45596: LD_INT 1
45598: NEG
45599: PUSH
45600: LD_INT 4
45602: PUSH
45603: EMPTY
45604: LIST
45605: LIST
45606: PUSH
45607: LD_INT 1
45609: NEG
45610: PUSH
45611: LD_INT 3
45613: PUSH
45614: EMPTY
45615: LIST
45616: LIST
45617: PUSH
45618: LD_INT 2
45620: PUSH
45621: LD_INT 5
45623: PUSH
45624: EMPTY
45625: LIST
45626: LIST
45627: PUSH
45628: LD_INT 2
45630: NEG
45631: PUSH
45632: LD_INT 3
45634: PUSH
45635: EMPTY
45636: LIST
45637: LIST
45638: PUSH
45639: LD_INT 3
45641: NEG
45642: PUSH
45643: LD_INT 0
45645: PUSH
45646: EMPTY
45647: LIST
45648: LIST
45649: PUSH
45650: LD_INT 3
45652: NEG
45653: PUSH
45654: LD_INT 1
45656: NEG
45657: PUSH
45658: EMPTY
45659: LIST
45660: LIST
45661: PUSH
45662: LD_INT 2
45664: NEG
45665: PUSH
45666: LD_INT 0
45668: PUSH
45669: EMPTY
45670: LIST
45671: LIST
45672: PUSH
45673: LD_INT 2
45675: NEG
45676: PUSH
45677: LD_INT 1
45679: PUSH
45680: EMPTY
45681: LIST
45682: LIST
45683: PUSH
45684: LD_INT 3
45686: NEG
45687: PUSH
45688: LD_INT 1
45690: PUSH
45691: EMPTY
45692: LIST
45693: LIST
45694: PUSH
45695: LD_INT 4
45697: NEG
45698: PUSH
45699: LD_INT 0
45701: PUSH
45702: EMPTY
45703: LIST
45704: LIST
45705: PUSH
45706: LD_INT 4
45708: NEG
45709: PUSH
45710: LD_INT 1
45712: NEG
45713: PUSH
45714: EMPTY
45715: LIST
45716: LIST
45717: PUSH
45718: LD_INT 4
45720: NEG
45721: PUSH
45722: LD_INT 2
45724: NEG
45725: PUSH
45726: EMPTY
45727: LIST
45728: LIST
45729: PUSH
45730: LD_INT 2
45732: NEG
45733: PUSH
45734: LD_INT 2
45736: PUSH
45737: EMPTY
45738: LIST
45739: LIST
45740: PUSH
45741: LD_INT 4
45743: NEG
45744: PUSH
45745: LD_INT 4
45747: NEG
45748: PUSH
45749: EMPTY
45750: LIST
45751: LIST
45752: PUSH
45753: LD_INT 4
45755: NEG
45756: PUSH
45757: LD_INT 5
45759: NEG
45760: PUSH
45761: EMPTY
45762: LIST
45763: LIST
45764: PUSH
45765: LD_INT 3
45767: NEG
45768: PUSH
45769: LD_INT 4
45771: NEG
45772: PUSH
45773: EMPTY
45774: LIST
45775: LIST
45776: PUSH
45777: LD_INT 3
45779: NEG
45780: PUSH
45781: LD_INT 3
45783: NEG
45784: PUSH
45785: EMPTY
45786: LIST
45787: LIST
45788: PUSH
45789: LD_INT 4
45791: NEG
45792: PUSH
45793: LD_INT 3
45795: NEG
45796: PUSH
45797: EMPTY
45798: LIST
45799: LIST
45800: PUSH
45801: LD_INT 5
45803: NEG
45804: PUSH
45805: LD_INT 4
45807: NEG
45808: PUSH
45809: EMPTY
45810: LIST
45811: LIST
45812: PUSH
45813: LD_INT 5
45815: NEG
45816: PUSH
45817: LD_INT 5
45819: NEG
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: PUSH
45825: LD_INT 3
45827: NEG
45828: PUSH
45829: LD_INT 5
45831: NEG
45832: PUSH
45833: EMPTY
45834: LIST
45835: LIST
45836: PUSH
45837: LD_INT 5
45839: NEG
45840: PUSH
45841: LD_INT 3
45843: NEG
45844: PUSH
45845: EMPTY
45846: LIST
45847: LIST
45848: PUSH
45849: LD_INT 0
45851: PUSH
45852: LD_INT 3
45854: NEG
45855: PUSH
45856: EMPTY
45857: LIST
45858: LIST
45859: PUSH
45860: LD_INT 0
45862: PUSH
45863: LD_INT 4
45865: NEG
45866: PUSH
45867: EMPTY
45868: LIST
45869: LIST
45870: PUSH
45871: LD_INT 1
45873: PUSH
45874: LD_INT 3
45876: NEG
45877: PUSH
45878: EMPTY
45879: LIST
45880: LIST
45881: PUSH
45882: LD_INT 1
45884: PUSH
45885: LD_INT 2
45887: NEG
45888: PUSH
45889: EMPTY
45890: LIST
45891: LIST
45892: PUSH
45893: LD_INT 0
45895: PUSH
45896: LD_INT 2
45898: NEG
45899: PUSH
45900: EMPTY
45901: LIST
45902: LIST
45903: PUSH
45904: LD_INT 1
45906: NEG
45907: PUSH
45908: LD_INT 3
45910: NEG
45911: PUSH
45912: EMPTY
45913: LIST
45914: LIST
45915: PUSH
45916: LD_INT 1
45918: NEG
45919: PUSH
45920: LD_INT 4
45922: NEG
45923: PUSH
45924: EMPTY
45925: LIST
45926: LIST
45927: PUSH
45928: LD_INT 2
45930: PUSH
45931: LD_INT 2
45933: NEG
45934: PUSH
45935: EMPTY
45936: LIST
45937: LIST
45938: PUSH
45939: LD_INT 2
45941: NEG
45942: PUSH
45943: LD_INT 4
45945: NEG
45946: PUSH
45947: EMPTY
45948: LIST
45949: LIST
45950: PUSH
45951: LD_INT 4
45953: PUSH
45954: LD_INT 0
45956: PUSH
45957: EMPTY
45958: LIST
45959: LIST
45960: PUSH
45961: LD_INT 4
45963: PUSH
45964: LD_INT 1
45966: NEG
45967: PUSH
45968: EMPTY
45969: LIST
45970: LIST
45971: PUSH
45972: LD_INT 5
45974: PUSH
45975: LD_INT 0
45977: PUSH
45978: EMPTY
45979: LIST
45980: LIST
45981: PUSH
45982: LD_INT 5
45984: PUSH
45985: LD_INT 1
45987: PUSH
45988: EMPTY
45989: LIST
45990: LIST
45991: PUSH
45992: LD_INT 4
45994: PUSH
45995: LD_INT 1
45997: PUSH
45998: EMPTY
45999: LIST
46000: LIST
46001: PUSH
46002: LD_INT 3
46004: PUSH
46005: LD_INT 0
46007: PUSH
46008: EMPTY
46009: LIST
46010: LIST
46011: PUSH
46012: LD_INT 3
46014: PUSH
46015: LD_INT 1
46017: NEG
46018: PUSH
46019: EMPTY
46020: LIST
46021: LIST
46022: PUSH
46023: LD_INT 3
46025: PUSH
46026: LD_INT 2
46028: NEG
46029: PUSH
46030: EMPTY
46031: LIST
46032: LIST
46033: PUSH
46034: LD_INT 5
46036: PUSH
46037: LD_INT 2
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: PUSH
46044: EMPTY
46045: LIST
46046: LIST
46047: LIST
46048: LIST
46049: LIST
46050: LIST
46051: LIST
46052: LIST
46053: LIST
46054: LIST
46055: LIST
46056: LIST
46057: LIST
46058: LIST
46059: LIST
46060: LIST
46061: LIST
46062: LIST
46063: LIST
46064: LIST
46065: LIST
46066: LIST
46067: LIST
46068: LIST
46069: LIST
46070: LIST
46071: LIST
46072: LIST
46073: LIST
46074: LIST
46075: LIST
46076: LIST
46077: LIST
46078: LIST
46079: LIST
46080: LIST
46081: LIST
46082: LIST
46083: LIST
46084: LIST
46085: LIST
46086: LIST
46087: LIST
46088: LIST
46089: LIST
46090: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
46091: LD_ADDR_VAR 0 32
46095: PUSH
46096: LD_INT 4
46098: NEG
46099: PUSH
46100: LD_INT 0
46102: PUSH
46103: EMPTY
46104: LIST
46105: LIST
46106: PUSH
46107: LD_INT 4
46109: NEG
46110: PUSH
46111: LD_INT 1
46113: NEG
46114: PUSH
46115: EMPTY
46116: LIST
46117: LIST
46118: PUSH
46119: LD_INT 3
46121: NEG
46122: PUSH
46123: LD_INT 0
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: PUSH
46130: LD_INT 3
46132: NEG
46133: PUSH
46134: LD_INT 1
46136: PUSH
46137: EMPTY
46138: LIST
46139: LIST
46140: PUSH
46141: LD_INT 4
46143: NEG
46144: PUSH
46145: LD_INT 1
46147: PUSH
46148: EMPTY
46149: LIST
46150: LIST
46151: PUSH
46152: LD_INT 5
46154: NEG
46155: PUSH
46156: LD_INT 0
46158: PUSH
46159: EMPTY
46160: LIST
46161: LIST
46162: PUSH
46163: LD_INT 5
46165: NEG
46166: PUSH
46167: LD_INT 1
46169: NEG
46170: PUSH
46171: EMPTY
46172: LIST
46173: LIST
46174: PUSH
46175: LD_INT 5
46177: NEG
46178: PUSH
46179: LD_INT 2
46181: NEG
46182: PUSH
46183: EMPTY
46184: LIST
46185: LIST
46186: PUSH
46187: LD_INT 3
46189: NEG
46190: PUSH
46191: LD_INT 2
46193: PUSH
46194: EMPTY
46195: LIST
46196: LIST
46197: PUSH
46198: LD_INT 3
46200: NEG
46201: PUSH
46202: LD_INT 3
46204: NEG
46205: PUSH
46206: EMPTY
46207: LIST
46208: LIST
46209: PUSH
46210: LD_INT 3
46212: NEG
46213: PUSH
46214: LD_INT 4
46216: NEG
46217: PUSH
46218: EMPTY
46219: LIST
46220: LIST
46221: PUSH
46222: LD_INT 2
46224: NEG
46225: PUSH
46226: LD_INT 3
46228: NEG
46229: PUSH
46230: EMPTY
46231: LIST
46232: LIST
46233: PUSH
46234: LD_INT 2
46236: NEG
46237: PUSH
46238: LD_INT 2
46240: NEG
46241: PUSH
46242: EMPTY
46243: LIST
46244: LIST
46245: PUSH
46246: LD_INT 3
46248: NEG
46249: PUSH
46250: LD_INT 2
46252: NEG
46253: PUSH
46254: EMPTY
46255: LIST
46256: LIST
46257: PUSH
46258: LD_INT 4
46260: NEG
46261: PUSH
46262: LD_INT 3
46264: NEG
46265: PUSH
46266: EMPTY
46267: LIST
46268: LIST
46269: PUSH
46270: LD_INT 4
46272: NEG
46273: PUSH
46274: LD_INT 4
46276: NEG
46277: PUSH
46278: EMPTY
46279: LIST
46280: LIST
46281: PUSH
46282: LD_INT 2
46284: NEG
46285: PUSH
46286: LD_INT 4
46288: NEG
46289: PUSH
46290: EMPTY
46291: LIST
46292: LIST
46293: PUSH
46294: LD_INT 4
46296: NEG
46297: PUSH
46298: LD_INT 2
46300: NEG
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: PUSH
46306: LD_INT 0
46308: PUSH
46309: LD_INT 4
46311: NEG
46312: PUSH
46313: EMPTY
46314: LIST
46315: LIST
46316: PUSH
46317: LD_INT 0
46319: PUSH
46320: LD_INT 5
46322: NEG
46323: PUSH
46324: EMPTY
46325: LIST
46326: LIST
46327: PUSH
46328: LD_INT 1
46330: PUSH
46331: LD_INT 4
46333: NEG
46334: PUSH
46335: EMPTY
46336: LIST
46337: LIST
46338: PUSH
46339: LD_INT 1
46341: PUSH
46342: LD_INT 3
46344: NEG
46345: PUSH
46346: EMPTY
46347: LIST
46348: LIST
46349: PUSH
46350: LD_INT 0
46352: PUSH
46353: LD_INT 3
46355: NEG
46356: PUSH
46357: EMPTY
46358: LIST
46359: LIST
46360: PUSH
46361: LD_INT 1
46363: NEG
46364: PUSH
46365: LD_INT 4
46367: NEG
46368: PUSH
46369: EMPTY
46370: LIST
46371: LIST
46372: PUSH
46373: LD_INT 1
46375: NEG
46376: PUSH
46377: LD_INT 5
46379: NEG
46380: PUSH
46381: EMPTY
46382: LIST
46383: LIST
46384: PUSH
46385: LD_INT 2
46387: PUSH
46388: LD_INT 3
46390: NEG
46391: PUSH
46392: EMPTY
46393: LIST
46394: LIST
46395: PUSH
46396: LD_INT 2
46398: NEG
46399: PUSH
46400: LD_INT 5
46402: NEG
46403: PUSH
46404: EMPTY
46405: LIST
46406: LIST
46407: PUSH
46408: LD_INT 3
46410: PUSH
46411: LD_INT 0
46413: PUSH
46414: EMPTY
46415: LIST
46416: LIST
46417: PUSH
46418: LD_INT 3
46420: PUSH
46421: LD_INT 1
46423: NEG
46424: PUSH
46425: EMPTY
46426: LIST
46427: LIST
46428: PUSH
46429: LD_INT 4
46431: PUSH
46432: LD_INT 0
46434: PUSH
46435: EMPTY
46436: LIST
46437: LIST
46438: PUSH
46439: LD_INT 4
46441: PUSH
46442: LD_INT 1
46444: PUSH
46445: EMPTY
46446: LIST
46447: LIST
46448: PUSH
46449: LD_INT 3
46451: PUSH
46452: LD_INT 1
46454: PUSH
46455: EMPTY
46456: LIST
46457: LIST
46458: PUSH
46459: LD_INT 2
46461: PUSH
46462: LD_INT 0
46464: PUSH
46465: EMPTY
46466: LIST
46467: LIST
46468: PUSH
46469: LD_INT 2
46471: PUSH
46472: LD_INT 1
46474: NEG
46475: PUSH
46476: EMPTY
46477: LIST
46478: LIST
46479: PUSH
46480: LD_INT 2
46482: PUSH
46483: LD_INT 2
46485: NEG
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: PUSH
46491: LD_INT 4
46493: PUSH
46494: LD_INT 2
46496: PUSH
46497: EMPTY
46498: LIST
46499: LIST
46500: PUSH
46501: LD_INT 4
46503: PUSH
46504: LD_INT 4
46506: PUSH
46507: EMPTY
46508: LIST
46509: LIST
46510: PUSH
46511: LD_INT 4
46513: PUSH
46514: LD_INT 3
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: PUSH
46521: LD_INT 5
46523: PUSH
46524: LD_INT 4
46526: PUSH
46527: EMPTY
46528: LIST
46529: LIST
46530: PUSH
46531: LD_INT 5
46533: PUSH
46534: LD_INT 5
46536: PUSH
46537: EMPTY
46538: LIST
46539: LIST
46540: PUSH
46541: LD_INT 4
46543: PUSH
46544: LD_INT 5
46546: PUSH
46547: EMPTY
46548: LIST
46549: LIST
46550: PUSH
46551: LD_INT 3
46553: PUSH
46554: LD_INT 4
46556: PUSH
46557: EMPTY
46558: LIST
46559: LIST
46560: PUSH
46561: LD_INT 3
46563: PUSH
46564: LD_INT 3
46566: PUSH
46567: EMPTY
46568: LIST
46569: LIST
46570: PUSH
46571: LD_INT 5
46573: PUSH
46574: LD_INT 3
46576: PUSH
46577: EMPTY
46578: LIST
46579: LIST
46580: PUSH
46581: LD_INT 3
46583: PUSH
46584: LD_INT 5
46586: PUSH
46587: EMPTY
46588: LIST
46589: LIST
46590: PUSH
46591: EMPTY
46592: LIST
46593: LIST
46594: LIST
46595: LIST
46596: LIST
46597: LIST
46598: LIST
46599: LIST
46600: LIST
46601: LIST
46602: LIST
46603: LIST
46604: LIST
46605: LIST
46606: LIST
46607: LIST
46608: LIST
46609: LIST
46610: LIST
46611: LIST
46612: LIST
46613: LIST
46614: LIST
46615: LIST
46616: LIST
46617: LIST
46618: LIST
46619: LIST
46620: LIST
46621: LIST
46622: LIST
46623: LIST
46624: LIST
46625: LIST
46626: LIST
46627: LIST
46628: LIST
46629: LIST
46630: LIST
46631: LIST
46632: LIST
46633: LIST
46634: LIST
46635: LIST
46636: LIST
46637: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
46638: LD_ADDR_VAR 0 33
46642: PUSH
46643: LD_INT 4
46645: NEG
46646: PUSH
46647: LD_INT 4
46649: NEG
46650: PUSH
46651: EMPTY
46652: LIST
46653: LIST
46654: PUSH
46655: LD_INT 4
46657: NEG
46658: PUSH
46659: LD_INT 5
46661: NEG
46662: PUSH
46663: EMPTY
46664: LIST
46665: LIST
46666: PUSH
46667: LD_INT 3
46669: NEG
46670: PUSH
46671: LD_INT 4
46673: NEG
46674: PUSH
46675: EMPTY
46676: LIST
46677: LIST
46678: PUSH
46679: LD_INT 3
46681: NEG
46682: PUSH
46683: LD_INT 3
46685: NEG
46686: PUSH
46687: EMPTY
46688: LIST
46689: LIST
46690: PUSH
46691: LD_INT 4
46693: NEG
46694: PUSH
46695: LD_INT 3
46697: NEG
46698: PUSH
46699: EMPTY
46700: LIST
46701: LIST
46702: PUSH
46703: LD_INT 5
46705: NEG
46706: PUSH
46707: LD_INT 4
46709: NEG
46710: PUSH
46711: EMPTY
46712: LIST
46713: LIST
46714: PUSH
46715: LD_INT 5
46717: NEG
46718: PUSH
46719: LD_INT 5
46721: NEG
46722: PUSH
46723: EMPTY
46724: LIST
46725: LIST
46726: PUSH
46727: LD_INT 3
46729: NEG
46730: PUSH
46731: LD_INT 5
46733: NEG
46734: PUSH
46735: EMPTY
46736: LIST
46737: LIST
46738: PUSH
46739: LD_INT 5
46741: NEG
46742: PUSH
46743: LD_INT 3
46745: NEG
46746: PUSH
46747: EMPTY
46748: LIST
46749: LIST
46750: PUSH
46751: LD_INT 0
46753: PUSH
46754: LD_INT 3
46756: NEG
46757: PUSH
46758: EMPTY
46759: LIST
46760: LIST
46761: PUSH
46762: LD_INT 0
46764: PUSH
46765: LD_INT 4
46767: NEG
46768: PUSH
46769: EMPTY
46770: LIST
46771: LIST
46772: PUSH
46773: LD_INT 1
46775: PUSH
46776: LD_INT 3
46778: NEG
46779: PUSH
46780: EMPTY
46781: LIST
46782: LIST
46783: PUSH
46784: LD_INT 1
46786: PUSH
46787: LD_INT 2
46789: NEG
46790: PUSH
46791: EMPTY
46792: LIST
46793: LIST
46794: PUSH
46795: LD_INT 0
46797: PUSH
46798: LD_INT 2
46800: NEG
46801: PUSH
46802: EMPTY
46803: LIST
46804: LIST
46805: PUSH
46806: LD_INT 1
46808: NEG
46809: PUSH
46810: LD_INT 3
46812: NEG
46813: PUSH
46814: EMPTY
46815: LIST
46816: LIST
46817: PUSH
46818: LD_INT 1
46820: NEG
46821: PUSH
46822: LD_INT 4
46824: NEG
46825: PUSH
46826: EMPTY
46827: LIST
46828: LIST
46829: PUSH
46830: LD_INT 2
46832: PUSH
46833: LD_INT 2
46835: NEG
46836: PUSH
46837: EMPTY
46838: LIST
46839: LIST
46840: PUSH
46841: LD_INT 2
46843: NEG
46844: PUSH
46845: LD_INT 4
46847: NEG
46848: PUSH
46849: EMPTY
46850: LIST
46851: LIST
46852: PUSH
46853: LD_INT 4
46855: PUSH
46856: LD_INT 0
46858: PUSH
46859: EMPTY
46860: LIST
46861: LIST
46862: PUSH
46863: LD_INT 4
46865: PUSH
46866: LD_INT 1
46868: NEG
46869: PUSH
46870: EMPTY
46871: LIST
46872: LIST
46873: PUSH
46874: LD_INT 5
46876: PUSH
46877: LD_INT 0
46879: PUSH
46880: EMPTY
46881: LIST
46882: LIST
46883: PUSH
46884: LD_INT 5
46886: PUSH
46887: LD_INT 1
46889: PUSH
46890: EMPTY
46891: LIST
46892: LIST
46893: PUSH
46894: LD_INT 4
46896: PUSH
46897: LD_INT 1
46899: PUSH
46900: EMPTY
46901: LIST
46902: LIST
46903: PUSH
46904: LD_INT 3
46906: PUSH
46907: LD_INT 0
46909: PUSH
46910: EMPTY
46911: LIST
46912: LIST
46913: PUSH
46914: LD_INT 3
46916: PUSH
46917: LD_INT 1
46919: NEG
46920: PUSH
46921: EMPTY
46922: LIST
46923: LIST
46924: PUSH
46925: LD_INT 3
46927: PUSH
46928: LD_INT 2
46930: NEG
46931: PUSH
46932: EMPTY
46933: LIST
46934: LIST
46935: PUSH
46936: LD_INT 5
46938: PUSH
46939: LD_INT 2
46941: PUSH
46942: EMPTY
46943: LIST
46944: LIST
46945: PUSH
46946: LD_INT 3
46948: PUSH
46949: LD_INT 3
46951: PUSH
46952: EMPTY
46953: LIST
46954: LIST
46955: PUSH
46956: LD_INT 3
46958: PUSH
46959: LD_INT 2
46961: PUSH
46962: EMPTY
46963: LIST
46964: LIST
46965: PUSH
46966: LD_INT 4
46968: PUSH
46969: LD_INT 3
46971: PUSH
46972: EMPTY
46973: LIST
46974: LIST
46975: PUSH
46976: LD_INT 4
46978: PUSH
46979: LD_INT 4
46981: PUSH
46982: EMPTY
46983: LIST
46984: LIST
46985: PUSH
46986: LD_INT 3
46988: PUSH
46989: LD_INT 4
46991: PUSH
46992: EMPTY
46993: LIST
46994: LIST
46995: PUSH
46996: LD_INT 2
46998: PUSH
46999: LD_INT 3
47001: PUSH
47002: EMPTY
47003: LIST
47004: LIST
47005: PUSH
47006: LD_INT 2
47008: PUSH
47009: LD_INT 2
47011: PUSH
47012: EMPTY
47013: LIST
47014: LIST
47015: PUSH
47016: LD_INT 4
47018: PUSH
47019: LD_INT 2
47021: PUSH
47022: EMPTY
47023: LIST
47024: LIST
47025: PUSH
47026: LD_INT 2
47028: PUSH
47029: LD_INT 4
47031: PUSH
47032: EMPTY
47033: LIST
47034: LIST
47035: PUSH
47036: LD_INT 0
47038: PUSH
47039: LD_INT 4
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: PUSH
47046: LD_INT 0
47048: PUSH
47049: LD_INT 3
47051: PUSH
47052: EMPTY
47053: LIST
47054: LIST
47055: PUSH
47056: LD_INT 1
47058: PUSH
47059: LD_INT 4
47061: PUSH
47062: EMPTY
47063: LIST
47064: LIST
47065: PUSH
47066: LD_INT 1
47068: PUSH
47069: LD_INT 5
47071: PUSH
47072: EMPTY
47073: LIST
47074: LIST
47075: PUSH
47076: LD_INT 0
47078: PUSH
47079: LD_INT 5
47081: PUSH
47082: EMPTY
47083: LIST
47084: LIST
47085: PUSH
47086: LD_INT 1
47088: NEG
47089: PUSH
47090: LD_INT 4
47092: PUSH
47093: EMPTY
47094: LIST
47095: LIST
47096: PUSH
47097: LD_INT 1
47099: NEG
47100: PUSH
47101: LD_INT 3
47103: PUSH
47104: EMPTY
47105: LIST
47106: LIST
47107: PUSH
47108: LD_INT 2
47110: PUSH
47111: LD_INT 5
47113: PUSH
47114: EMPTY
47115: LIST
47116: LIST
47117: PUSH
47118: LD_INT 2
47120: NEG
47121: PUSH
47122: LD_INT 3
47124: PUSH
47125: EMPTY
47126: LIST
47127: LIST
47128: PUSH
47129: EMPTY
47130: LIST
47131: LIST
47132: LIST
47133: LIST
47134: LIST
47135: LIST
47136: LIST
47137: LIST
47138: LIST
47139: LIST
47140: LIST
47141: LIST
47142: LIST
47143: LIST
47144: LIST
47145: LIST
47146: LIST
47147: LIST
47148: LIST
47149: LIST
47150: LIST
47151: LIST
47152: LIST
47153: LIST
47154: LIST
47155: LIST
47156: LIST
47157: LIST
47158: LIST
47159: LIST
47160: LIST
47161: LIST
47162: LIST
47163: LIST
47164: LIST
47165: LIST
47166: LIST
47167: LIST
47168: LIST
47169: LIST
47170: LIST
47171: LIST
47172: LIST
47173: LIST
47174: LIST
47175: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
47176: LD_ADDR_VAR 0 34
47180: PUSH
47181: LD_INT 0
47183: PUSH
47184: LD_INT 4
47186: NEG
47187: PUSH
47188: EMPTY
47189: LIST
47190: LIST
47191: PUSH
47192: LD_INT 0
47194: PUSH
47195: LD_INT 5
47197: NEG
47198: PUSH
47199: EMPTY
47200: LIST
47201: LIST
47202: PUSH
47203: LD_INT 1
47205: PUSH
47206: LD_INT 4
47208: NEG
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: PUSH
47214: LD_INT 1
47216: PUSH
47217: LD_INT 3
47219: NEG
47220: PUSH
47221: EMPTY
47222: LIST
47223: LIST
47224: PUSH
47225: LD_INT 0
47227: PUSH
47228: LD_INT 3
47230: NEG
47231: PUSH
47232: EMPTY
47233: LIST
47234: LIST
47235: PUSH
47236: LD_INT 1
47238: NEG
47239: PUSH
47240: LD_INT 4
47242: NEG
47243: PUSH
47244: EMPTY
47245: LIST
47246: LIST
47247: PUSH
47248: LD_INT 1
47250: NEG
47251: PUSH
47252: LD_INT 5
47254: NEG
47255: PUSH
47256: EMPTY
47257: LIST
47258: LIST
47259: PUSH
47260: LD_INT 2
47262: PUSH
47263: LD_INT 3
47265: NEG
47266: PUSH
47267: EMPTY
47268: LIST
47269: LIST
47270: PUSH
47271: LD_INT 2
47273: NEG
47274: PUSH
47275: LD_INT 5
47277: NEG
47278: PUSH
47279: EMPTY
47280: LIST
47281: LIST
47282: PUSH
47283: LD_INT 3
47285: PUSH
47286: LD_INT 0
47288: PUSH
47289: EMPTY
47290: LIST
47291: LIST
47292: PUSH
47293: LD_INT 3
47295: PUSH
47296: LD_INT 1
47298: NEG
47299: PUSH
47300: EMPTY
47301: LIST
47302: LIST
47303: PUSH
47304: LD_INT 4
47306: PUSH
47307: LD_INT 0
47309: PUSH
47310: EMPTY
47311: LIST
47312: LIST
47313: PUSH
47314: LD_INT 4
47316: PUSH
47317: LD_INT 1
47319: PUSH
47320: EMPTY
47321: LIST
47322: LIST
47323: PUSH
47324: LD_INT 3
47326: PUSH
47327: LD_INT 1
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: PUSH
47334: LD_INT 2
47336: PUSH
47337: LD_INT 0
47339: PUSH
47340: EMPTY
47341: LIST
47342: LIST
47343: PUSH
47344: LD_INT 2
47346: PUSH
47347: LD_INT 1
47349: NEG
47350: PUSH
47351: EMPTY
47352: LIST
47353: LIST
47354: PUSH
47355: LD_INT 2
47357: PUSH
47358: LD_INT 2
47360: NEG
47361: PUSH
47362: EMPTY
47363: LIST
47364: LIST
47365: PUSH
47366: LD_INT 4
47368: PUSH
47369: LD_INT 2
47371: PUSH
47372: EMPTY
47373: LIST
47374: LIST
47375: PUSH
47376: LD_INT 4
47378: PUSH
47379: LD_INT 4
47381: PUSH
47382: EMPTY
47383: LIST
47384: LIST
47385: PUSH
47386: LD_INT 4
47388: PUSH
47389: LD_INT 3
47391: PUSH
47392: EMPTY
47393: LIST
47394: LIST
47395: PUSH
47396: LD_INT 5
47398: PUSH
47399: LD_INT 4
47401: PUSH
47402: EMPTY
47403: LIST
47404: LIST
47405: PUSH
47406: LD_INT 5
47408: PUSH
47409: LD_INT 5
47411: PUSH
47412: EMPTY
47413: LIST
47414: LIST
47415: PUSH
47416: LD_INT 4
47418: PUSH
47419: LD_INT 5
47421: PUSH
47422: EMPTY
47423: LIST
47424: LIST
47425: PUSH
47426: LD_INT 3
47428: PUSH
47429: LD_INT 4
47431: PUSH
47432: EMPTY
47433: LIST
47434: LIST
47435: PUSH
47436: LD_INT 3
47438: PUSH
47439: LD_INT 3
47441: PUSH
47442: EMPTY
47443: LIST
47444: LIST
47445: PUSH
47446: LD_INT 5
47448: PUSH
47449: LD_INT 3
47451: PUSH
47452: EMPTY
47453: LIST
47454: LIST
47455: PUSH
47456: LD_INT 3
47458: PUSH
47459: LD_INT 5
47461: PUSH
47462: EMPTY
47463: LIST
47464: LIST
47465: PUSH
47466: LD_INT 0
47468: PUSH
47469: LD_INT 3
47471: PUSH
47472: EMPTY
47473: LIST
47474: LIST
47475: PUSH
47476: LD_INT 0
47478: PUSH
47479: LD_INT 2
47481: PUSH
47482: EMPTY
47483: LIST
47484: LIST
47485: PUSH
47486: LD_INT 1
47488: PUSH
47489: LD_INT 3
47491: PUSH
47492: EMPTY
47493: LIST
47494: LIST
47495: PUSH
47496: LD_INT 1
47498: PUSH
47499: LD_INT 4
47501: PUSH
47502: EMPTY
47503: LIST
47504: LIST
47505: PUSH
47506: LD_INT 0
47508: PUSH
47509: LD_INT 4
47511: PUSH
47512: EMPTY
47513: LIST
47514: LIST
47515: PUSH
47516: LD_INT 1
47518: NEG
47519: PUSH
47520: LD_INT 3
47522: PUSH
47523: EMPTY
47524: LIST
47525: LIST
47526: PUSH
47527: LD_INT 1
47529: NEG
47530: PUSH
47531: LD_INT 2
47533: PUSH
47534: EMPTY
47535: LIST
47536: LIST
47537: PUSH
47538: LD_INT 2
47540: PUSH
47541: LD_INT 4
47543: PUSH
47544: EMPTY
47545: LIST
47546: LIST
47547: PUSH
47548: LD_INT 2
47550: NEG
47551: PUSH
47552: LD_INT 2
47554: PUSH
47555: EMPTY
47556: LIST
47557: LIST
47558: PUSH
47559: LD_INT 4
47561: NEG
47562: PUSH
47563: LD_INT 0
47565: PUSH
47566: EMPTY
47567: LIST
47568: LIST
47569: PUSH
47570: LD_INT 4
47572: NEG
47573: PUSH
47574: LD_INT 1
47576: NEG
47577: PUSH
47578: EMPTY
47579: LIST
47580: LIST
47581: PUSH
47582: LD_INT 3
47584: NEG
47585: PUSH
47586: LD_INT 0
47588: PUSH
47589: EMPTY
47590: LIST
47591: LIST
47592: PUSH
47593: LD_INT 3
47595: NEG
47596: PUSH
47597: LD_INT 1
47599: PUSH
47600: EMPTY
47601: LIST
47602: LIST
47603: PUSH
47604: LD_INT 4
47606: NEG
47607: PUSH
47608: LD_INT 1
47610: PUSH
47611: EMPTY
47612: LIST
47613: LIST
47614: PUSH
47615: LD_INT 5
47617: NEG
47618: PUSH
47619: LD_INT 0
47621: PUSH
47622: EMPTY
47623: LIST
47624: LIST
47625: PUSH
47626: LD_INT 5
47628: NEG
47629: PUSH
47630: LD_INT 1
47632: NEG
47633: PUSH
47634: EMPTY
47635: LIST
47636: LIST
47637: PUSH
47638: LD_INT 5
47640: NEG
47641: PUSH
47642: LD_INT 2
47644: NEG
47645: PUSH
47646: EMPTY
47647: LIST
47648: LIST
47649: PUSH
47650: LD_INT 3
47652: NEG
47653: PUSH
47654: LD_INT 2
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: PUSH
47661: EMPTY
47662: LIST
47663: LIST
47664: LIST
47665: LIST
47666: LIST
47667: LIST
47668: LIST
47669: LIST
47670: LIST
47671: LIST
47672: LIST
47673: LIST
47674: LIST
47675: LIST
47676: LIST
47677: LIST
47678: LIST
47679: LIST
47680: LIST
47681: LIST
47682: LIST
47683: LIST
47684: LIST
47685: LIST
47686: LIST
47687: LIST
47688: LIST
47689: LIST
47690: LIST
47691: LIST
47692: LIST
47693: LIST
47694: LIST
47695: LIST
47696: LIST
47697: LIST
47698: LIST
47699: LIST
47700: LIST
47701: LIST
47702: LIST
47703: LIST
47704: LIST
47705: LIST
47706: LIST
47707: ST_TO_ADDR
// end ; end ;
47708: GO 47711
47710: POP
// case btype of b_depot , b_warehouse :
47711: LD_VAR 0 1
47715: PUSH
47716: LD_INT 0
47718: DOUBLE
47719: EQUAL
47720: IFTRUE 47730
47722: LD_INT 1
47724: DOUBLE
47725: EQUAL
47726: IFTRUE 47730
47728: GO 47931
47730: POP
// case nation of nation_american :
47731: LD_VAR 0 5
47735: PUSH
47736: LD_INT 1
47738: DOUBLE
47739: EQUAL
47740: IFTRUE 47744
47742: GO 47800
47744: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
47745: LD_ADDR_VAR 0 9
47749: PUSH
47750: LD_VAR 0 11
47754: PUSH
47755: LD_VAR 0 12
47759: PUSH
47760: LD_VAR 0 13
47764: PUSH
47765: LD_VAR 0 14
47769: PUSH
47770: LD_VAR 0 15
47774: PUSH
47775: LD_VAR 0 16
47779: PUSH
47780: EMPTY
47781: LIST
47782: LIST
47783: LIST
47784: LIST
47785: LIST
47786: LIST
47787: PUSH
47788: LD_VAR 0 4
47792: PUSH
47793: LD_INT 1
47795: PLUS
47796: ARRAY
47797: ST_TO_ADDR
47798: GO 47929
47800: LD_INT 2
47802: DOUBLE
47803: EQUAL
47804: IFTRUE 47808
47806: GO 47864
47808: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
47809: LD_ADDR_VAR 0 9
47813: PUSH
47814: LD_VAR 0 17
47818: PUSH
47819: LD_VAR 0 18
47823: PUSH
47824: LD_VAR 0 19
47828: PUSH
47829: LD_VAR 0 20
47833: PUSH
47834: LD_VAR 0 21
47838: PUSH
47839: LD_VAR 0 22
47843: PUSH
47844: EMPTY
47845: LIST
47846: LIST
47847: LIST
47848: LIST
47849: LIST
47850: LIST
47851: PUSH
47852: LD_VAR 0 4
47856: PUSH
47857: LD_INT 1
47859: PLUS
47860: ARRAY
47861: ST_TO_ADDR
47862: GO 47929
47864: LD_INT 3
47866: DOUBLE
47867: EQUAL
47868: IFTRUE 47872
47870: GO 47928
47872: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
47873: LD_ADDR_VAR 0 9
47877: PUSH
47878: LD_VAR 0 23
47882: PUSH
47883: LD_VAR 0 24
47887: PUSH
47888: LD_VAR 0 25
47892: PUSH
47893: LD_VAR 0 26
47897: PUSH
47898: LD_VAR 0 27
47902: PUSH
47903: LD_VAR 0 28
47907: PUSH
47908: EMPTY
47909: LIST
47910: LIST
47911: LIST
47912: LIST
47913: LIST
47914: LIST
47915: PUSH
47916: LD_VAR 0 4
47920: PUSH
47921: LD_INT 1
47923: PLUS
47924: ARRAY
47925: ST_TO_ADDR
47926: GO 47929
47928: POP
47929: GO 48484
47931: LD_INT 2
47933: DOUBLE
47934: EQUAL
47935: IFTRUE 47945
47937: LD_INT 3
47939: DOUBLE
47940: EQUAL
47941: IFTRUE 47945
47943: GO 48001
47945: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
47946: LD_ADDR_VAR 0 9
47950: PUSH
47951: LD_VAR 0 29
47955: PUSH
47956: LD_VAR 0 30
47960: PUSH
47961: LD_VAR 0 31
47965: PUSH
47966: LD_VAR 0 32
47970: PUSH
47971: LD_VAR 0 33
47975: PUSH
47976: LD_VAR 0 34
47980: PUSH
47981: EMPTY
47982: LIST
47983: LIST
47984: LIST
47985: LIST
47986: LIST
47987: LIST
47988: PUSH
47989: LD_VAR 0 4
47993: PUSH
47994: LD_INT 1
47996: PLUS
47997: ARRAY
47998: ST_TO_ADDR
47999: GO 48484
48001: LD_INT 16
48003: DOUBLE
48004: EQUAL
48005: IFTRUE 48063
48007: LD_INT 17
48009: DOUBLE
48010: EQUAL
48011: IFTRUE 48063
48013: LD_INT 18
48015: DOUBLE
48016: EQUAL
48017: IFTRUE 48063
48019: LD_INT 19
48021: DOUBLE
48022: EQUAL
48023: IFTRUE 48063
48025: LD_INT 22
48027: DOUBLE
48028: EQUAL
48029: IFTRUE 48063
48031: LD_INT 20
48033: DOUBLE
48034: EQUAL
48035: IFTRUE 48063
48037: LD_INT 21
48039: DOUBLE
48040: EQUAL
48041: IFTRUE 48063
48043: LD_INT 23
48045: DOUBLE
48046: EQUAL
48047: IFTRUE 48063
48049: LD_INT 24
48051: DOUBLE
48052: EQUAL
48053: IFTRUE 48063
48055: LD_INT 25
48057: DOUBLE
48058: EQUAL
48059: IFTRUE 48063
48061: GO 48119
48063: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
48064: LD_ADDR_VAR 0 9
48068: PUSH
48069: LD_VAR 0 35
48073: PUSH
48074: LD_VAR 0 36
48078: PUSH
48079: LD_VAR 0 37
48083: PUSH
48084: LD_VAR 0 38
48088: PUSH
48089: LD_VAR 0 39
48093: PUSH
48094: LD_VAR 0 40
48098: PUSH
48099: EMPTY
48100: LIST
48101: LIST
48102: LIST
48103: LIST
48104: LIST
48105: LIST
48106: PUSH
48107: LD_VAR 0 4
48111: PUSH
48112: LD_INT 1
48114: PLUS
48115: ARRAY
48116: ST_TO_ADDR
48117: GO 48484
48119: LD_INT 6
48121: DOUBLE
48122: EQUAL
48123: IFTRUE 48175
48125: LD_INT 7
48127: DOUBLE
48128: EQUAL
48129: IFTRUE 48175
48131: LD_INT 8
48133: DOUBLE
48134: EQUAL
48135: IFTRUE 48175
48137: LD_INT 13
48139: DOUBLE
48140: EQUAL
48141: IFTRUE 48175
48143: LD_INT 12
48145: DOUBLE
48146: EQUAL
48147: IFTRUE 48175
48149: LD_INT 15
48151: DOUBLE
48152: EQUAL
48153: IFTRUE 48175
48155: LD_INT 11
48157: DOUBLE
48158: EQUAL
48159: IFTRUE 48175
48161: LD_INT 14
48163: DOUBLE
48164: EQUAL
48165: IFTRUE 48175
48167: LD_INT 10
48169: DOUBLE
48170: EQUAL
48171: IFTRUE 48175
48173: GO 48231
48175: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
48176: LD_ADDR_VAR 0 9
48180: PUSH
48181: LD_VAR 0 41
48185: PUSH
48186: LD_VAR 0 42
48190: PUSH
48191: LD_VAR 0 43
48195: PUSH
48196: LD_VAR 0 44
48200: PUSH
48201: LD_VAR 0 45
48205: PUSH
48206: LD_VAR 0 46
48210: PUSH
48211: EMPTY
48212: LIST
48213: LIST
48214: LIST
48215: LIST
48216: LIST
48217: LIST
48218: PUSH
48219: LD_VAR 0 4
48223: PUSH
48224: LD_INT 1
48226: PLUS
48227: ARRAY
48228: ST_TO_ADDR
48229: GO 48484
48231: LD_INT 36
48233: DOUBLE
48234: EQUAL
48235: IFTRUE 48239
48237: GO 48295
48239: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
48240: LD_ADDR_VAR 0 9
48244: PUSH
48245: LD_VAR 0 47
48249: PUSH
48250: LD_VAR 0 48
48254: PUSH
48255: LD_VAR 0 49
48259: PUSH
48260: LD_VAR 0 50
48264: PUSH
48265: LD_VAR 0 51
48269: PUSH
48270: LD_VAR 0 52
48274: PUSH
48275: EMPTY
48276: LIST
48277: LIST
48278: LIST
48279: LIST
48280: LIST
48281: LIST
48282: PUSH
48283: LD_VAR 0 4
48287: PUSH
48288: LD_INT 1
48290: PLUS
48291: ARRAY
48292: ST_TO_ADDR
48293: GO 48484
48295: LD_INT 4
48297: DOUBLE
48298: EQUAL
48299: IFTRUE 48321
48301: LD_INT 5
48303: DOUBLE
48304: EQUAL
48305: IFTRUE 48321
48307: LD_INT 34
48309: DOUBLE
48310: EQUAL
48311: IFTRUE 48321
48313: LD_INT 37
48315: DOUBLE
48316: EQUAL
48317: IFTRUE 48321
48319: GO 48377
48321: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
48322: LD_ADDR_VAR 0 9
48326: PUSH
48327: LD_VAR 0 53
48331: PUSH
48332: LD_VAR 0 54
48336: PUSH
48337: LD_VAR 0 55
48341: PUSH
48342: LD_VAR 0 56
48346: PUSH
48347: LD_VAR 0 57
48351: PUSH
48352: LD_VAR 0 58
48356: PUSH
48357: EMPTY
48358: LIST
48359: LIST
48360: LIST
48361: LIST
48362: LIST
48363: LIST
48364: PUSH
48365: LD_VAR 0 4
48369: PUSH
48370: LD_INT 1
48372: PLUS
48373: ARRAY
48374: ST_TO_ADDR
48375: GO 48484
48377: LD_INT 31
48379: DOUBLE
48380: EQUAL
48381: IFTRUE 48427
48383: LD_INT 32
48385: DOUBLE
48386: EQUAL
48387: IFTRUE 48427
48389: LD_INT 33
48391: DOUBLE
48392: EQUAL
48393: IFTRUE 48427
48395: LD_INT 27
48397: DOUBLE
48398: EQUAL
48399: IFTRUE 48427
48401: LD_INT 26
48403: DOUBLE
48404: EQUAL
48405: IFTRUE 48427
48407: LD_INT 28
48409: DOUBLE
48410: EQUAL
48411: IFTRUE 48427
48413: LD_INT 29
48415: DOUBLE
48416: EQUAL
48417: IFTRUE 48427
48419: LD_INT 30
48421: DOUBLE
48422: EQUAL
48423: IFTRUE 48427
48425: GO 48483
48427: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
48428: LD_ADDR_VAR 0 9
48432: PUSH
48433: LD_VAR 0 59
48437: PUSH
48438: LD_VAR 0 60
48442: PUSH
48443: LD_VAR 0 61
48447: PUSH
48448: LD_VAR 0 62
48452: PUSH
48453: LD_VAR 0 63
48457: PUSH
48458: LD_VAR 0 64
48462: PUSH
48463: EMPTY
48464: LIST
48465: LIST
48466: LIST
48467: LIST
48468: LIST
48469: LIST
48470: PUSH
48471: LD_VAR 0 4
48475: PUSH
48476: LD_INT 1
48478: PLUS
48479: ARRAY
48480: ST_TO_ADDR
48481: GO 48484
48483: POP
// temp_list2 = [ ] ;
48484: LD_ADDR_VAR 0 10
48488: PUSH
48489: EMPTY
48490: ST_TO_ADDR
// for i in temp_list do
48491: LD_ADDR_VAR 0 8
48495: PUSH
48496: LD_VAR 0 9
48500: PUSH
48501: FOR_IN
48502: IFFALSE 48554
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
48504: LD_ADDR_VAR 0 10
48508: PUSH
48509: LD_VAR 0 10
48513: PUSH
48514: LD_VAR 0 8
48518: PUSH
48519: LD_INT 1
48521: ARRAY
48522: PUSH
48523: LD_VAR 0 2
48527: PLUS
48528: PUSH
48529: LD_VAR 0 8
48533: PUSH
48534: LD_INT 2
48536: ARRAY
48537: PUSH
48538: LD_VAR 0 3
48542: PLUS
48543: PUSH
48544: EMPTY
48545: LIST
48546: LIST
48547: PUSH
48548: EMPTY
48549: LIST
48550: ADD
48551: ST_TO_ADDR
48552: GO 48501
48554: POP
48555: POP
// result = temp_list2 ;
48556: LD_ADDR_VAR 0 7
48560: PUSH
48561: LD_VAR 0 10
48565: ST_TO_ADDR
// end ;
48566: LD_VAR 0 7
48570: RET
// export function EnemyInRange ( unit , dist ) ; begin
48571: LD_INT 0
48573: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
48574: LD_ADDR_VAR 0 3
48578: PUSH
48579: LD_VAR 0 1
48583: PPUSH
48584: CALL_OW 255
48588: PPUSH
48589: LD_VAR 0 1
48593: PPUSH
48594: CALL_OW 250
48598: PPUSH
48599: LD_VAR 0 1
48603: PPUSH
48604: CALL_OW 251
48608: PPUSH
48609: LD_VAR 0 2
48613: PPUSH
48614: CALL 21828 0 4
48618: PUSH
48619: LD_INT 4
48621: ARRAY
48622: ST_TO_ADDR
// end ;
48623: LD_VAR 0 3
48627: RET
// export function PlayerSeeMe ( unit ) ; begin
48628: LD_INT 0
48630: PPUSH
// result := See ( your_side , unit ) ;
48631: LD_ADDR_VAR 0 2
48635: PUSH
48636: LD_OWVAR 2
48640: PPUSH
48641: LD_VAR 0 1
48645: PPUSH
48646: CALL_OW 292
48650: ST_TO_ADDR
// end ;
48651: LD_VAR 0 2
48655: RET
// export function ReverseDir ( unit ) ; begin
48656: LD_INT 0
48658: PPUSH
// if not unit then
48659: LD_VAR 0 1
48663: NOT
48664: IFFALSE 48668
// exit ;
48666: GO 48691
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
48668: LD_ADDR_VAR 0 2
48672: PUSH
48673: LD_VAR 0 1
48677: PPUSH
48678: CALL_OW 254
48682: PUSH
48683: LD_INT 3
48685: PLUS
48686: PUSH
48687: LD_INT 6
48689: MOD
48690: ST_TO_ADDR
// end ;
48691: LD_VAR 0 2
48695: RET
// export function ReverseArray ( array ) ; var i ; begin
48696: LD_INT 0
48698: PPUSH
48699: PPUSH
// if not array then
48700: LD_VAR 0 1
48704: NOT
48705: IFFALSE 48709
// exit ;
48707: GO 48764
// result := [ ] ;
48709: LD_ADDR_VAR 0 2
48713: PUSH
48714: EMPTY
48715: ST_TO_ADDR
// for i := array downto 1 do
48716: LD_ADDR_VAR 0 3
48720: PUSH
48721: DOUBLE
48722: LD_VAR 0 1
48726: INC
48727: ST_TO_ADDR
48728: LD_INT 1
48730: PUSH
48731: FOR_DOWNTO
48732: IFFALSE 48762
// result := Join ( result , array [ i ] ) ;
48734: LD_ADDR_VAR 0 2
48738: PUSH
48739: LD_VAR 0 2
48743: PPUSH
48744: LD_VAR 0 1
48748: PUSH
48749: LD_VAR 0 3
48753: ARRAY
48754: PPUSH
48755: CALL 53606 0 2
48759: ST_TO_ADDR
48760: GO 48731
48762: POP
48763: POP
// end ;
48764: LD_VAR 0 2
48768: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
48769: LD_INT 0
48771: PPUSH
48772: PPUSH
48773: PPUSH
48774: PPUSH
48775: PPUSH
48776: PPUSH
// if not unit or not hexes then
48777: LD_VAR 0 1
48781: NOT
48782: IFTRUE 48791
48784: PUSH
48785: LD_VAR 0 2
48789: NOT
48790: OR
48791: IFFALSE 48795
// exit ;
48793: GO 48918
// dist := 9999 ;
48795: LD_ADDR_VAR 0 5
48799: PUSH
48800: LD_INT 9999
48802: ST_TO_ADDR
// for i = 1 to hexes do
48803: LD_ADDR_VAR 0 4
48807: PUSH
48808: DOUBLE
48809: LD_INT 1
48811: DEC
48812: ST_TO_ADDR
48813: LD_VAR 0 2
48817: PUSH
48818: FOR_TO
48819: IFFALSE 48906
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48821: LD_ADDR_VAR 0 6
48825: PUSH
48826: LD_VAR 0 1
48830: PPUSH
48831: LD_VAR 0 2
48835: PUSH
48836: LD_VAR 0 4
48840: ARRAY
48841: PUSH
48842: LD_INT 1
48844: ARRAY
48845: PPUSH
48846: LD_VAR 0 2
48850: PUSH
48851: LD_VAR 0 4
48855: ARRAY
48856: PUSH
48857: LD_INT 2
48859: ARRAY
48860: PPUSH
48861: CALL_OW 297
48865: ST_TO_ADDR
// if tdist < dist then
48866: LD_VAR 0 6
48870: PUSH
48871: LD_VAR 0 5
48875: LESS
48876: IFFALSE 48904
// begin hex := hexes [ i ] ;
48878: LD_ADDR_VAR 0 8
48882: PUSH
48883: LD_VAR 0 2
48887: PUSH
48888: LD_VAR 0 4
48892: ARRAY
48893: ST_TO_ADDR
// dist := tdist ;
48894: LD_ADDR_VAR 0 5
48898: PUSH
48899: LD_VAR 0 6
48903: ST_TO_ADDR
// end ; end ;
48904: GO 48818
48906: POP
48907: POP
// result := hex ;
48908: LD_ADDR_VAR 0 3
48912: PUSH
48913: LD_VAR 0 8
48917: ST_TO_ADDR
// end ;
48918: LD_VAR 0 3
48922: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
48923: LD_INT 0
48925: PPUSH
48926: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
48927: LD_VAR 0 1
48931: NOT
48932: IFTRUE 48971
48934: PUSH
48935: LD_VAR 0 1
48939: PUSH
48940: LD_INT 21
48942: PUSH
48943: LD_INT 2
48945: PUSH
48946: EMPTY
48947: LIST
48948: LIST
48949: PUSH
48950: LD_INT 23
48952: PUSH
48953: LD_INT 2
48955: PUSH
48956: EMPTY
48957: LIST
48958: LIST
48959: PUSH
48960: EMPTY
48961: LIST
48962: LIST
48963: PPUSH
48964: CALL_OW 69
48968: IN
48969: NOT
48970: OR
48971: IFFALSE 48975
// exit ;
48973: GO 49022
// for i = 1 to 3 do
48975: LD_ADDR_VAR 0 3
48979: PUSH
48980: DOUBLE
48981: LD_INT 1
48983: DEC
48984: ST_TO_ADDR
48985: LD_INT 3
48987: PUSH
48988: FOR_TO
48989: IFFALSE 49020
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
48991: LD_VAR 0 1
48995: PPUSH
48996: CALL_OW 250
49000: PPUSH
49001: LD_VAR 0 1
49005: PPUSH
49006: CALL_OW 251
49010: PPUSH
49011: LD_INT 1
49013: PPUSH
49014: CALL_OW 453
49018: GO 48988
49020: POP
49021: POP
// end ;
49022: LD_VAR 0 2
49026: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
49027: LD_INT 0
49029: PPUSH
49030: PPUSH
49031: PPUSH
49032: PPUSH
49033: PPUSH
49034: PPUSH
// if not unit or not enemy_unit then
49035: LD_VAR 0 1
49039: NOT
49040: IFTRUE 49049
49042: PUSH
49043: LD_VAR 0 2
49047: NOT
49048: OR
49049: IFFALSE 49053
// exit ;
49051: GO 49524
// if GetLives ( i ) < 250 then
49053: LD_VAR 0 4
49057: PPUSH
49058: CALL_OW 256
49062: PUSH
49063: LD_INT 250
49065: LESS
49066: IFFALSE 49079
// begin ComAutodestruct ( i ) ;
49068: LD_VAR 0 4
49072: PPUSH
49073: CALL 48923 0 1
// exit ;
49077: GO 49524
// end ; x := GetX ( enemy_unit ) ;
49079: LD_ADDR_VAR 0 7
49083: PUSH
49084: LD_VAR 0 2
49088: PPUSH
49089: CALL_OW 250
49093: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
49094: LD_ADDR_VAR 0 8
49098: PUSH
49099: LD_VAR 0 2
49103: PPUSH
49104: CALL_OW 251
49108: ST_TO_ADDR
// if not x or not y then
49109: LD_VAR 0 7
49113: NOT
49114: IFTRUE 49123
49116: PUSH
49117: LD_VAR 0 8
49121: NOT
49122: OR
49123: IFFALSE 49127
// exit ;
49125: GO 49524
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
49127: LD_ADDR_VAR 0 6
49131: PUSH
49132: LD_VAR 0 7
49136: PPUSH
49137: LD_INT 0
49139: PPUSH
49140: LD_INT 4
49142: PPUSH
49143: CALL_OW 272
49147: PUSH
49148: LD_VAR 0 8
49152: PPUSH
49153: LD_INT 0
49155: PPUSH
49156: LD_INT 4
49158: PPUSH
49159: CALL_OW 273
49163: PUSH
49164: EMPTY
49165: LIST
49166: LIST
49167: PUSH
49168: LD_VAR 0 7
49172: PPUSH
49173: LD_INT 1
49175: PPUSH
49176: LD_INT 4
49178: PPUSH
49179: CALL_OW 272
49183: PUSH
49184: LD_VAR 0 8
49188: PPUSH
49189: LD_INT 1
49191: PPUSH
49192: LD_INT 4
49194: PPUSH
49195: CALL_OW 273
49199: PUSH
49200: EMPTY
49201: LIST
49202: LIST
49203: PUSH
49204: LD_VAR 0 7
49208: PPUSH
49209: LD_INT 2
49211: PPUSH
49212: LD_INT 4
49214: PPUSH
49215: CALL_OW 272
49219: PUSH
49220: LD_VAR 0 8
49224: PPUSH
49225: LD_INT 2
49227: PPUSH
49228: LD_INT 4
49230: PPUSH
49231: CALL_OW 273
49235: PUSH
49236: EMPTY
49237: LIST
49238: LIST
49239: PUSH
49240: LD_VAR 0 7
49244: PPUSH
49245: LD_INT 3
49247: PPUSH
49248: LD_INT 4
49250: PPUSH
49251: CALL_OW 272
49255: PUSH
49256: LD_VAR 0 8
49260: PPUSH
49261: LD_INT 3
49263: PPUSH
49264: LD_INT 4
49266: PPUSH
49267: CALL_OW 273
49271: PUSH
49272: EMPTY
49273: LIST
49274: LIST
49275: PUSH
49276: LD_VAR 0 7
49280: PPUSH
49281: LD_INT 4
49283: PPUSH
49284: LD_INT 4
49286: PPUSH
49287: CALL_OW 272
49291: PUSH
49292: LD_VAR 0 8
49296: PPUSH
49297: LD_INT 4
49299: PPUSH
49300: LD_INT 4
49302: PPUSH
49303: CALL_OW 273
49307: PUSH
49308: EMPTY
49309: LIST
49310: LIST
49311: PUSH
49312: LD_VAR 0 7
49316: PPUSH
49317: LD_INT 5
49319: PPUSH
49320: LD_INT 4
49322: PPUSH
49323: CALL_OW 272
49327: PUSH
49328: LD_VAR 0 8
49332: PPUSH
49333: LD_INT 5
49335: PPUSH
49336: LD_INT 4
49338: PPUSH
49339: CALL_OW 273
49343: PUSH
49344: EMPTY
49345: LIST
49346: LIST
49347: PUSH
49348: EMPTY
49349: LIST
49350: LIST
49351: LIST
49352: LIST
49353: LIST
49354: LIST
49355: ST_TO_ADDR
// for i = tmp downto 1 do
49356: LD_ADDR_VAR 0 4
49360: PUSH
49361: DOUBLE
49362: LD_VAR 0 6
49366: INC
49367: ST_TO_ADDR
49368: LD_INT 1
49370: PUSH
49371: FOR_DOWNTO
49372: IFFALSE 49475
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
49374: LD_VAR 0 6
49378: PUSH
49379: LD_VAR 0 4
49383: ARRAY
49384: PUSH
49385: LD_INT 1
49387: ARRAY
49388: PPUSH
49389: LD_VAR 0 6
49393: PUSH
49394: LD_VAR 0 4
49398: ARRAY
49399: PUSH
49400: LD_INT 2
49402: ARRAY
49403: PPUSH
49404: CALL_OW 488
49408: NOT
49409: IFTRUE 49451
49411: PUSH
49412: LD_VAR 0 6
49416: PUSH
49417: LD_VAR 0 4
49421: ARRAY
49422: PUSH
49423: LD_INT 1
49425: ARRAY
49426: PPUSH
49427: LD_VAR 0 6
49431: PUSH
49432: LD_VAR 0 4
49436: ARRAY
49437: PUSH
49438: LD_INT 2
49440: ARRAY
49441: PPUSH
49442: CALL_OW 428
49446: PUSH
49447: LD_INT 0
49449: NONEQUAL
49450: OR
49451: IFFALSE 49473
// tmp := Delete ( tmp , i ) ;
49453: LD_ADDR_VAR 0 6
49457: PUSH
49458: LD_VAR 0 6
49462: PPUSH
49463: LD_VAR 0 4
49467: PPUSH
49468: CALL_OW 3
49472: ST_TO_ADDR
49473: GO 49371
49475: POP
49476: POP
// j := GetClosestHex ( unit , tmp ) ;
49477: LD_ADDR_VAR 0 5
49481: PUSH
49482: LD_VAR 0 1
49486: PPUSH
49487: LD_VAR 0 6
49491: PPUSH
49492: CALL 48769 0 2
49496: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
49497: LD_VAR 0 1
49501: PPUSH
49502: LD_VAR 0 5
49506: PUSH
49507: LD_INT 1
49509: ARRAY
49510: PPUSH
49511: LD_VAR 0 5
49515: PUSH
49516: LD_INT 2
49518: ARRAY
49519: PPUSH
49520: CALL_OW 111
// end ;
49524: LD_VAR 0 3
49528: RET
// export function PrepareApemanSoldier ( ) ; begin
49529: LD_INT 0
49531: PPUSH
// uc_nation := 0 ;
49532: LD_ADDR_OWVAR 21
49536: PUSH
49537: LD_INT 0
49539: ST_TO_ADDR
// hc_sex := sex_male ;
49540: LD_ADDR_OWVAR 27
49544: PUSH
49545: LD_INT 1
49547: ST_TO_ADDR
// hc_name :=  ;
49548: LD_ADDR_OWVAR 26
49552: PUSH
49553: LD_STRING 
49555: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
49556: LD_ADDR_OWVAR 28
49560: PUSH
49561: LD_INT 15
49563: ST_TO_ADDR
// hc_gallery :=  ;
49564: LD_ADDR_OWVAR 33
49568: PUSH
49569: LD_STRING 
49571: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
49572: LD_ADDR_OWVAR 31
49576: PUSH
49577: LD_INT 0
49579: PPUSH
49580: LD_INT 3
49582: PPUSH
49583: CALL_OW 12
49587: PUSH
49588: LD_INT 0
49590: PPUSH
49591: LD_INT 3
49593: PPUSH
49594: CALL_OW 12
49598: PUSH
49599: LD_INT 0
49601: PUSH
49602: LD_INT 0
49604: PUSH
49605: EMPTY
49606: LIST
49607: LIST
49608: LIST
49609: LIST
49610: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
49611: LD_ADDR_OWVAR 29
49615: PUSH
49616: LD_INT 12
49618: PUSH
49619: LD_INT 12
49621: PUSH
49622: EMPTY
49623: LIST
49624: LIST
49625: ST_TO_ADDR
// end ;
49626: LD_VAR 0 1
49630: RET
// export function PrepareApemanEngineer ( ) ; begin
49631: LD_INT 0
49633: PPUSH
// uc_nation := 0 ;
49634: LD_ADDR_OWVAR 21
49638: PUSH
49639: LD_INT 0
49641: ST_TO_ADDR
// hc_sex := sex_male ;
49642: LD_ADDR_OWVAR 27
49646: PUSH
49647: LD_INT 1
49649: ST_TO_ADDR
// hc_name :=  ;
49650: LD_ADDR_OWVAR 26
49654: PUSH
49655: LD_STRING 
49657: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
49658: LD_ADDR_OWVAR 28
49662: PUSH
49663: LD_INT 16
49665: ST_TO_ADDR
// hc_gallery :=  ;
49666: LD_ADDR_OWVAR 33
49670: PUSH
49671: LD_STRING 
49673: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
49674: LD_ADDR_OWVAR 31
49678: PUSH
49679: LD_INT 0
49681: PPUSH
49682: LD_INT 3
49684: PPUSH
49685: CALL_OW 12
49689: PUSH
49690: LD_INT 0
49692: PPUSH
49693: LD_INT 3
49695: PPUSH
49696: CALL_OW 12
49700: PUSH
49701: LD_INT 0
49703: PUSH
49704: LD_INT 0
49706: PUSH
49707: EMPTY
49708: LIST
49709: LIST
49710: LIST
49711: LIST
49712: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
49713: LD_ADDR_OWVAR 29
49717: PUSH
49718: LD_INT 12
49720: PUSH
49721: LD_INT 12
49723: PUSH
49724: EMPTY
49725: LIST
49726: LIST
49727: ST_TO_ADDR
// end ;
49728: LD_VAR 0 1
49732: RET
// export function PrepareApeman ( agressivity ) ; begin
49733: LD_INT 0
49735: PPUSH
// uc_side := 0 ;
49736: LD_ADDR_OWVAR 20
49740: PUSH
49741: LD_INT 0
49743: ST_TO_ADDR
// uc_nation := 0 ;
49744: LD_ADDR_OWVAR 21
49748: PUSH
49749: LD_INT 0
49751: ST_TO_ADDR
// hc_sex := sex_male ;
49752: LD_ADDR_OWVAR 27
49756: PUSH
49757: LD_INT 1
49759: ST_TO_ADDR
// hc_class := class_apeman ;
49760: LD_ADDR_OWVAR 28
49764: PUSH
49765: LD_INT 12
49767: ST_TO_ADDR
// hc_gallery :=  ;
49768: LD_ADDR_OWVAR 33
49772: PUSH
49773: LD_STRING 
49775: ST_TO_ADDR
// hc_name :=  ;
49776: LD_ADDR_OWVAR 26
49780: PUSH
49781: LD_STRING 
49783: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
49784: LD_ADDR_OWVAR 29
49788: PUSH
49789: LD_INT 12
49791: PUSH
49792: LD_INT 12
49794: PUSH
49795: EMPTY
49796: LIST
49797: LIST
49798: ST_TO_ADDR
// if agressivity = 0 then
49799: LD_VAR 0 1
49803: PUSH
49804: LD_INT 0
49806: EQUAL
49807: IFFALSE 49819
// hc_agressivity := 0 else
49809: LD_ADDR_OWVAR 35
49813: PUSH
49814: LD_INT 0
49816: ST_TO_ADDR
49817: GO 49840
// hc_agressivity := rand ( - agressivity , agressivity ) ;
49819: LD_ADDR_OWVAR 35
49823: PUSH
49824: LD_VAR 0 1
49828: NEG
49829: PPUSH
49830: LD_VAR 0 1
49834: PPUSH
49835: CALL_OW 12
49839: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
49840: LD_ADDR_OWVAR 31
49844: PUSH
49845: LD_INT 0
49847: PPUSH
49848: LD_INT 3
49850: PPUSH
49851: CALL_OW 12
49855: PUSH
49856: LD_INT 0
49858: PPUSH
49859: LD_INT 3
49861: PPUSH
49862: CALL_OW 12
49866: PUSH
49867: LD_INT 0
49869: PUSH
49870: LD_INT 0
49872: PUSH
49873: EMPTY
49874: LIST
49875: LIST
49876: LIST
49877: LIST
49878: ST_TO_ADDR
// end ;
49879: LD_VAR 0 2
49883: RET
// export function PrepareTiger ( agressivity ) ; begin
49884: LD_INT 0
49886: PPUSH
// uc_side := 0 ;
49887: LD_ADDR_OWVAR 20
49891: PUSH
49892: LD_INT 0
49894: ST_TO_ADDR
// uc_nation := 0 ;
49895: LD_ADDR_OWVAR 21
49899: PUSH
49900: LD_INT 0
49902: ST_TO_ADDR
// InitHc ;
49903: CALL_OW 19
// hc_class := class_tiger ;
49907: LD_ADDR_OWVAR 28
49911: PUSH
49912: LD_INT 14
49914: ST_TO_ADDR
// hc_gallery :=  ;
49915: LD_ADDR_OWVAR 33
49919: PUSH
49920: LD_STRING 
49922: ST_TO_ADDR
// hc_name :=  ;
49923: LD_ADDR_OWVAR 26
49927: PUSH
49928: LD_STRING 
49930: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
49931: LD_ADDR_OWVAR 35
49935: PUSH
49936: LD_VAR 0 1
49940: NEG
49941: PPUSH
49942: LD_VAR 0 1
49946: PPUSH
49947: CALL_OW 12
49951: ST_TO_ADDR
// end ;
49952: LD_VAR 0 2
49956: RET
// export function PrepareEnchidna ( ) ; begin
49957: LD_INT 0
49959: PPUSH
// uc_side := 0 ;
49960: LD_ADDR_OWVAR 20
49964: PUSH
49965: LD_INT 0
49967: ST_TO_ADDR
// uc_nation := 0 ;
49968: LD_ADDR_OWVAR 21
49972: PUSH
49973: LD_INT 0
49975: ST_TO_ADDR
// InitHc ;
49976: CALL_OW 19
// hc_class := class_baggie ;
49980: LD_ADDR_OWVAR 28
49984: PUSH
49985: LD_INT 13
49987: ST_TO_ADDR
// hc_gallery :=  ;
49988: LD_ADDR_OWVAR 33
49992: PUSH
49993: LD_STRING 
49995: ST_TO_ADDR
// hc_name :=  ;
49996: LD_ADDR_OWVAR 26
50000: PUSH
50001: LD_STRING 
50003: ST_TO_ADDR
// end ;
50004: LD_VAR 0 1
50008: RET
// export function PrepareFrog ( ) ; begin
50009: LD_INT 0
50011: PPUSH
// uc_side := 0 ;
50012: LD_ADDR_OWVAR 20
50016: PUSH
50017: LD_INT 0
50019: ST_TO_ADDR
// uc_nation := 0 ;
50020: LD_ADDR_OWVAR 21
50024: PUSH
50025: LD_INT 0
50027: ST_TO_ADDR
// InitHc ;
50028: CALL_OW 19
// hc_class := class_frog ;
50032: LD_ADDR_OWVAR 28
50036: PUSH
50037: LD_INT 19
50039: ST_TO_ADDR
// hc_gallery :=  ;
50040: LD_ADDR_OWVAR 33
50044: PUSH
50045: LD_STRING 
50047: ST_TO_ADDR
// hc_name :=  ;
50048: LD_ADDR_OWVAR 26
50052: PUSH
50053: LD_STRING 
50055: ST_TO_ADDR
// end ;
50056: LD_VAR 0 1
50060: RET
// export function PrepareFish ( ) ; begin
50061: LD_INT 0
50063: PPUSH
// uc_side := 0 ;
50064: LD_ADDR_OWVAR 20
50068: PUSH
50069: LD_INT 0
50071: ST_TO_ADDR
// uc_nation := 0 ;
50072: LD_ADDR_OWVAR 21
50076: PUSH
50077: LD_INT 0
50079: ST_TO_ADDR
// InitHc ;
50080: CALL_OW 19
// hc_class := class_fish ;
50084: LD_ADDR_OWVAR 28
50088: PUSH
50089: LD_INT 20
50091: ST_TO_ADDR
// hc_gallery :=  ;
50092: LD_ADDR_OWVAR 33
50096: PUSH
50097: LD_STRING 
50099: ST_TO_ADDR
// hc_name :=  ;
50100: LD_ADDR_OWVAR 26
50104: PUSH
50105: LD_STRING 
50107: ST_TO_ADDR
// end ;
50108: LD_VAR 0 1
50112: RET
// export function PrepareBird ( ) ; begin
50113: LD_INT 0
50115: PPUSH
// uc_side := 0 ;
50116: LD_ADDR_OWVAR 20
50120: PUSH
50121: LD_INT 0
50123: ST_TO_ADDR
// uc_nation := 0 ;
50124: LD_ADDR_OWVAR 21
50128: PUSH
50129: LD_INT 0
50131: ST_TO_ADDR
// InitHc ;
50132: CALL_OW 19
// hc_class := class_phororhacos ;
50136: LD_ADDR_OWVAR 28
50140: PUSH
50141: LD_INT 18
50143: ST_TO_ADDR
// hc_gallery :=  ;
50144: LD_ADDR_OWVAR 33
50148: PUSH
50149: LD_STRING 
50151: ST_TO_ADDR
// hc_name :=  ;
50152: LD_ADDR_OWVAR 26
50156: PUSH
50157: LD_STRING 
50159: ST_TO_ADDR
// end ;
50160: LD_VAR 0 1
50164: RET
// export function PrepareHorse ( ) ; begin
50165: LD_INT 0
50167: PPUSH
// uc_side := 0 ;
50168: LD_ADDR_OWVAR 20
50172: PUSH
50173: LD_INT 0
50175: ST_TO_ADDR
// uc_nation := 0 ;
50176: LD_ADDR_OWVAR 21
50180: PUSH
50181: LD_INT 0
50183: ST_TO_ADDR
// InitHc ;
50184: CALL_OW 19
// hc_class := class_horse ;
50188: LD_ADDR_OWVAR 28
50192: PUSH
50193: LD_INT 21
50195: ST_TO_ADDR
// hc_gallery :=  ;
50196: LD_ADDR_OWVAR 33
50200: PUSH
50201: LD_STRING 
50203: ST_TO_ADDR
// hc_name :=  ;
50204: LD_ADDR_OWVAR 26
50208: PUSH
50209: LD_STRING 
50211: ST_TO_ADDR
// end ;
50212: LD_VAR 0 1
50216: RET
// export function PrepareMastodont ( ) ; begin
50217: LD_INT 0
50219: PPUSH
// uc_side := 0 ;
50220: LD_ADDR_OWVAR 20
50224: PUSH
50225: LD_INT 0
50227: ST_TO_ADDR
// uc_nation := 0 ;
50228: LD_ADDR_OWVAR 21
50232: PUSH
50233: LD_INT 0
50235: ST_TO_ADDR
// vc_chassis := class_mastodont ;
50236: LD_ADDR_OWVAR 37
50240: PUSH
50241: LD_INT 31
50243: ST_TO_ADDR
// vc_control := control_rider ;
50244: LD_ADDR_OWVAR 38
50248: PUSH
50249: LD_INT 4
50251: ST_TO_ADDR
// end ;
50252: LD_VAR 0 1
50256: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
50257: LD_INT 0
50259: PPUSH
50260: PPUSH
50261: PPUSH
// uc_side = 0 ;
50262: LD_ADDR_OWVAR 20
50266: PUSH
50267: LD_INT 0
50269: ST_TO_ADDR
// uc_nation = 0 ;
50270: LD_ADDR_OWVAR 21
50274: PUSH
50275: LD_INT 0
50277: ST_TO_ADDR
// InitHc_All ( ) ;
50278: CALL_OW 584
// InitVc ;
50282: CALL_OW 20
// if mastodonts then
50286: LD_VAR 0 6
50290: IFFALSE 50357
// for i = 1 to mastodonts do
50292: LD_ADDR_VAR 0 11
50296: PUSH
50297: DOUBLE
50298: LD_INT 1
50300: DEC
50301: ST_TO_ADDR
50302: LD_VAR 0 6
50306: PUSH
50307: FOR_TO
50308: IFFALSE 50355
// begin vc_chassis := 31 ;
50310: LD_ADDR_OWVAR 37
50314: PUSH
50315: LD_INT 31
50317: ST_TO_ADDR
// vc_control := control_rider ;
50318: LD_ADDR_OWVAR 38
50322: PUSH
50323: LD_INT 4
50325: ST_TO_ADDR
// animal := CreateVehicle ;
50326: LD_ADDR_VAR 0 12
50330: PUSH
50331: CALL_OW 45
50335: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50336: LD_VAR 0 12
50340: PPUSH
50341: LD_VAR 0 8
50345: PPUSH
50346: LD_INT 0
50348: PPUSH
50349: CALL 52499 0 3
// end ;
50353: GO 50307
50355: POP
50356: POP
// if horses then
50357: LD_VAR 0 5
50361: IFFALSE 50428
// for i = 1 to horses do
50363: LD_ADDR_VAR 0 11
50367: PUSH
50368: DOUBLE
50369: LD_INT 1
50371: DEC
50372: ST_TO_ADDR
50373: LD_VAR 0 5
50377: PUSH
50378: FOR_TO
50379: IFFALSE 50426
// begin hc_class := 21 ;
50381: LD_ADDR_OWVAR 28
50385: PUSH
50386: LD_INT 21
50388: ST_TO_ADDR
// hc_gallery :=  ;
50389: LD_ADDR_OWVAR 33
50393: PUSH
50394: LD_STRING 
50396: ST_TO_ADDR
// animal := CreateHuman ;
50397: LD_ADDR_VAR 0 12
50401: PUSH
50402: CALL_OW 44
50406: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50407: LD_VAR 0 12
50411: PPUSH
50412: LD_VAR 0 8
50416: PPUSH
50417: LD_INT 0
50419: PPUSH
50420: CALL 52499 0 3
// end ;
50424: GO 50378
50426: POP
50427: POP
// if birds then
50428: LD_VAR 0 1
50432: IFFALSE 50499
// for i = 1 to birds do
50434: LD_ADDR_VAR 0 11
50438: PUSH
50439: DOUBLE
50440: LD_INT 1
50442: DEC
50443: ST_TO_ADDR
50444: LD_VAR 0 1
50448: PUSH
50449: FOR_TO
50450: IFFALSE 50497
// begin hc_class := 18 ;
50452: LD_ADDR_OWVAR 28
50456: PUSH
50457: LD_INT 18
50459: ST_TO_ADDR
// hc_gallery =  ;
50460: LD_ADDR_OWVAR 33
50464: PUSH
50465: LD_STRING 
50467: ST_TO_ADDR
// animal := CreateHuman ;
50468: LD_ADDR_VAR 0 12
50472: PUSH
50473: CALL_OW 44
50477: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50478: LD_VAR 0 12
50482: PPUSH
50483: LD_VAR 0 8
50487: PPUSH
50488: LD_INT 0
50490: PPUSH
50491: CALL 52499 0 3
// end ;
50495: GO 50449
50497: POP
50498: POP
// if tigers then
50499: LD_VAR 0 2
50503: IFFALSE 50587
// for i = 1 to tigers do
50505: LD_ADDR_VAR 0 11
50509: PUSH
50510: DOUBLE
50511: LD_INT 1
50513: DEC
50514: ST_TO_ADDR
50515: LD_VAR 0 2
50519: PUSH
50520: FOR_TO
50521: IFFALSE 50585
// begin hc_class = class_tiger ;
50523: LD_ADDR_OWVAR 28
50527: PUSH
50528: LD_INT 14
50530: ST_TO_ADDR
// hc_gallery =  ;
50531: LD_ADDR_OWVAR 33
50535: PUSH
50536: LD_STRING 
50538: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
50539: LD_ADDR_OWVAR 35
50543: PUSH
50544: LD_INT 7
50546: NEG
50547: PPUSH
50548: LD_INT 7
50550: PPUSH
50551: CALL_OW 12
50555: ST_TO_ADDR
// animal := CreateHuman ;
50556: LD_ADDR_VAR 0 12
50560: PUSH
50561: CALL_OW 44
50565: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50566: LD_VAR 0 12
50570: PPUSH
50571: LD_VAR 0 8
50575: PPUSH
50576: LD_INT 0
50578: PPUSH
50579: CALL 52499 0 3
// end ;
50583: GO 50520
50585: POP
50586: POP
// if apemans then
50587: LD_VAR 0 3
50591: IFFALSE 50714
// for i = 1 to apemans do
50593: LD_ADDR_VAR 0 11
50597: PUSH
50598: DOUBLE
50599: LD_INT 1
50601: DEC
50602: ST_TO_ADDR
50603: LD_VAR 0 3
50607: PUSH
50608: FOR_TO
50609: IFFALSE 50712
// begin hc_class = class_apeman ;
50611: LD_ADDR_OWVAR 28
50615: PUSH
50616: LD_INT 12
50618: ST_TO_ADDR
// hc_gallery =  ;
50619: LD_ADDR_OWVAR 33
50623: PUSH
50624: LD_STRING 
50626: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
50627: LD_ADDR_OWVAR 35
50631: PUSH
50632: LD_INT 2
50634: NEG
50635: PPUSH
50636: LD_INT 2
50638: PPUSH
50639: CALL_OW 12
50643: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
50644: LD_ADDR_OWVAR 31
50648: PUSH
50649: LD_INT 1
50651: PPUSH
50652: LD_INT 3
50654: PPUSH
50655: CALL_OW 12
50659: PUSH
50660: LD_INT 1
50662: PPUSH
50663: LD_INT 3
50665: PPUSH
50666: CALL_OW 12
50670: PUSH
50671: LD_INT 0
50673: PUSH
50674: LD_INT 0
50676: PUSH
50677: EMPTY
50678: LIST
50679: LIST
50680: LIST
50681: LIST
50682: ST_TO_ADDR
// animal := CreateHuman ;
50683: LD_ADDR_VAR 0 12
50687: PUSH
50688: CALL_OW 44
50692: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50693: LD_VAR 0 12
50697: PPUSH
50698: LD_VAR 0 8
50702: PPUSH
50703: LD_INT 0
50705: PPUSH
50706: CALL 52499 0 3
// end ;
50710: GO 50608
50712: POP
50713: POP
// if enchidnas then
50714: LD_VAR 0 4
50718: IFFALSE 50785
// for i = 1 to enchidnas do
50720: LD_ADDR_VAR 0 11
50724: PUSH
50725: DOUBLE
50726: LD_INT 1
50728: DEC
50729: ST_TO_ADDR
50730: LD_VAR 0 4
50734: PUSH
50735: FOR_TO
50736: IFFALSE 50783
// begin hc_class = 13 ;
50738: LD_ADDR_OWVAR 28
50742: PUSH
50743: LD_INT 13
50745: ST_TO_ADDR
// hc_gallery =  ;
50746: LD_ADDR_OWVAR 33
50750: PUSH
50751: LD_STRING 
50753: ST_TO_ADDR
// animal := CreateHuman ;
50754: LD_ADDR_VAR 0 12
50758: PUSH
50759: CALL_OW 44
50763: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50764: LD_VAR 0 12
50768: PPUSH
50769: LD_VAR 0 8
50773: PPUSH
50774: LD_INT 0
50776: PPUSH
50777: CALL 52499 0 3
// end ;
50781: GO 50735
50783: POP
50784: POP
// if fishes then
50785: LD_VAR 0 7
50789: IFFALSE 50856
// for i = 1 to fishes do
50791: LD_ADDR_VAR 0 11
50795: PUSH
50796: DOUBLE
50797: LD_INT 1
50799: DEC
50800: ST_TO_ADDR
50801: LD_VAR 0 7
50805: PUSH
50806: FOR_TO
50807: IFFALSE 50854
// begin hc_class = 20 ;
50809: LD_ADDR_OWVAR 28
50813: PUSH
50814: LD_INT 20
50816: ST_TO_ADDR
// hc_gallery =  ;
50817: LD_ADDR_OWVAR 33
50821: PUSH
50822: LD_STRING 
50824: ST_TO_ADDR
// animal := CreateHuman ;
50825: LD_ADDR_VAR 0 12
50829: PUSH
50830: CALL_OW 44
50834: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
50835: LD_VAR 0 12
50839: PPUSH
50840: LD_VAR 0 9
50844: PPUSH
50845: LD_INT 0
50847: PPUSH
50848: CALL 52499 0 3
// end ;
50852: GO 50806
50854: POP
50855: POP
// end ;
50856: LD_VAR 0 10
50860: RET
// export function WantHeal ( sci , unit ) ; begin
50861: LD_INT 0
50863: PPUSH
// if GetTaskList ( sci ) > 0 then
50864: LD_VAR 0 1
50868: PPUSH
50869: CALL_OW 437
50873: PUSH
50874: LD_INT 0
50876: GREATER
50877: IFFALSE 50949
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
50879: LD_VAR 0 1
50883: PPUSH
50884: CALL_OW 437
50888: PUSH
50889: LD_INT 1
50891: ARRAY
50892: PUSH
50893: LD_INT 1
50895: ARRAY
50896: PUSH
50897: LD_STRING l
50899: EQUAL
50900: IFFALSE 50927
50902: PUSH
50903: LD_VAR 0 1
50907: PPUSH
50908: CALL_OW 437
50912: PUSH
50913: LD_INT 1
50915: ARRAY
50916: PUSH
50917: LD_INT 4
50919: ARRAY
50920: PUSH
50921: LD_VAR 0 2
50925: EQUAL
50926: AND
50927: IFFALSE 50939
// result := true else
50929: LD_ADDR_VAR 0 3
50933: PUSH
50934: LD_INT 1
50936: ST_TO_ADDR
50937: GO 50947
// result := false ;
50939: LD_ADDR_VAR 0 3
50943: PUSH
50944: LD_INT 0
50946: ST_TO_ADDR
// end else
50947: GO 50957
// result := false ;
50949: LD_ADDR_VAR 0 3
50953: PUSH
50954: LD_INT 0
50956: ST_TO_ADDR
// end ;
50957: LD_VAR 0 3
50961: RET
// export function HealTarget ( sci ) ; begin
50962: LD_INT 0
50964: PPUSH
// if not sci then
50965: LD_VAR 0 1
50969: NOT
50970: IFFALSE 50974
// exit ;
50972: GO 51039
// result := 0 ;
50974: LD_ADDR_VAR 0 2
50978: PUSH
50979: LD_INT 0
50981: ST_TO_ADDR
// if GetTaskList ( sci ) then
50982: LD_VAR 0 1
50986: PPUSH
50987: CALL_OW 437
50991: IFFALSE 51039
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
50993: LD_VAR 0 1
50997: PPUSH
50998: CALL_OW 437
51002: PUSH
51003: LD_INT 1
51005: ARRAY
51006: PUSH
51007: LD_INT 1
51009: ARRAY
51010: PUSH
51011: LD_STRING l
51013: EQUAL
51014: IFFALSE 51039
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
51016: LD_ADDR_VAR 0 2
51020: PUSH
51021: LD_VAR 0 1
51025: PPUSH
51026: CALL_OW 437
51030: PUSH
51031: LD_INT 1
51033: ARRAY
51034: PUSH
51035: LD_INT 4
51037: ARRAY
51038: ST_TO_ADDR
// end ;
51039: LD_VAR 0 2
51043: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
51044: LD_INT 0
51046: PPUSH
51047: PPUSH
51048: PPUSH
51049: PPUSH
// if not base_units then
51050: LD_VAR 0 1
51054: NOT
51055: IFFALSE 51059
// exit ;
51057: GO 51146
// result := false ;
51059: LD_ADDR_VAR 0 2
51063: PUSH
51064: LD_INT 0
51066: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
51067: LD_ADDR_VAR 0 5
51071: PUSH
51072: LD_VAR 0 1
51076: PPUSH
51077: LD_INT 21
51079: PUSH
51080: LD_INT 3
51082: PUSH
51083: EMPTY
51084: LIST
51085: LIST
51086: PPUSH
51087: CALL_OW 72
51091: ST_TO_ADDR
// if not tmp then
51092: LD_VAR 0 5
51096: NOT
51097: IFFALSE 51101
// exit ;
51099: GO 51146
// for i in tmp do
51101: LD_ADDR_VAR 0 3
51105: PUSH
51106: LD_VAR 0 5
51110: PUSH
51111: FOR_IN
51112: IFFALSE 51144
// begin result := EnemyInRange ( i , 22 ) ;
51114: LD_ADDR_VAR 0 2
51118: PUSH
51119: LD_VAR 0 3
51123: PPUSH
51124: LD_INT 22
51126: PPUSH
51127: CALL 48571 0 2
51131: ST_TO_ADDR
// if result then
51132: LD_VAR 0 2
51136: IFFALSE 51142
// exit ;
51138: POP
51139: POP
51140: GO 51146
// end ;
51142: GO 51111
51144: POP
51145: POP
// end ;
51146: LD_VAR 0 2
51150: RET
// export function FilterByTag ( units , tag ) ; begin
51151: LD_INT 0
51153: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
51154: LD_ADDR_VAR 0 3
51158: PUSH
51159: LD_VAR 0 1
51163: PPUSH
51164: LD_INT 120
51166: PUSH
51167: LD_VAR 0 2
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: PPUSH
51176: CALL_OW 72
51180: ST_TO_ADDR
// end ;
51181: LD_VAR 0 3
51185: RET
// export function IsDriver ( un ) ; begin
51186: LD_INT 0
51188: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
51189: LD_ADDR_VAR 0 2
51193: PUSH
51194: LD_VAR 0 1
51198: PUSH
51199: LD_INT 55
51201: PUSH
51202: EMPTY
51203: LIST
51204: PPUSH
51205: CALL_OW 69
51209: IN
51210: ST_TO_ADDR
// end ;
51211: LD_VAR 0 2
51215: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
51216: LD_INT 0
51218: PPUSH
51219: PPUSH
// list := [ ] ;
51220: LD_ADDR_VAR 0 5
51224: PUSH
51225: EMPTY
51226: ST_TO_ADDR
// case d of 0 :
51227: LD_VAR 0 3
51231: PUSH
51232: LD_INT 0
51234: DOUBLE
51235: EQUAL
51236: IFTRUE 51240
51238: GO 51373
51240: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
51241: LD_ADDR_VAR 0 5
51245: PUSH
51246: LD_VAR 0 1
51250: PUSH
51251: LD_INT 4
51253: MINUS
51254: PUSH
51255: LD_VAR 0 2
51259: PUSH
51260: LD_INT 4
51262: MINUS
51263: PUSH
51264: LD_INT 2
51266: PUSH
51267: EMPTY
51268: LIST
51269: LIST
51270: LIST
51271: PUSH
51272: LD_VAR 0 1
51276: PUSH
51277: LD_INT 3
51279: MINUS
51280: PUSH
51281: LD_VAR 0 2
51285: PUSH
51286: LD_INT 1
51288: PUSH
51289: EMPTY
51290: LIST
51291: LIST
51292: LIST
51293: PUSH
51294: LD_VAR 0 1
51298: PUSH
51299: LD_INT 4
51301: PLUS
51302: PUSH
51303: LD_VAR 0 2
51307: PUSH
51308: LD_INT 4
51310: PUSH
51311: EMPTY
51312: LIST
51313: LIST
51314: LIST
51315: PUSH
51316: LD_VAR 0 1
51320: PUSH
51321: LD_INT 3
51323: PLUS
51324: PUSH
51325: LD_VAR 0 2
51329: PUSH
51330: LD_INT 3
51332: PLUS
51333: PUSH
51334: LD_INT 5
51336: PUSH
51337: EMPTY
51338: LIST
51339: LIST
51340: LIST
51341: PUSH
51342: LD_VAR 0 1
51346: PUSH
51347: LD_VAR 0 2
51351: PUSH
51352: LD_INT 4
51354: PLUS
51355: PUSH
51356: LD_INT 0
51358: PUSH
51359: EMPTY
51360: LIST
51361: LIST
51362: LIST
51363: PUSH
51364: EMPTY
51365: LIST
51366: LIST
51367: LIST
51368: LIST
51369: LIST
51370: ST_TO_ADDR
// end ; 1 :
51371: GO 52071
51373: LD_INT 1
51375: DOUBLE
51376: EQUAL
51377: IFTRUE 51381
51379: GO 51514
51381: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
51382: LD_ADDR_VAR 0 5
51386: PUSH
51387: LD_VAR 0 1
51391: PUSH
51392: LD_VAR 0 2
51396: PUSH
51397: LD_INT 4
51399: MINUS
51400: PUSH
51401: LD_INT 3
51403: PUSH
51404: EMPTY
51405: LIST
51406: LIST
51407: LIST
51408: PUSH
51409: LD_VAR 0 1
51413: PUSH
51414: LD_INT 3
51416: MINUS
51417: PUSH
51418: LD_VAR 0 2
51422: PUSH
51423: LD_INT 3
51425: MINUS
51426: PUSH
51427: LD_INT 2
51429: PUSH
51430: EMPTY
51431: LIST
51432: LIST
51433: LIST
51434: PUSH
51435: LD_VAR 0 1
51439: PUSH
51440: LD_INT 4
51442: MINUS
51443: PUSH
51444: LD_VAR 0 2
51448: PUSH
51449: LD_INT 1
51451: PUSH
51452: EMPTY
51453: LIST
51454: LIST
51455: LIST
51456: PUSH
51457: LD_VAR 0 1
51461: PUSH
51462: LD_VAR 0 2
51466: PUSH
51467: LD_INT 3
51469: PLUS
51470: PUSH
51471: LD_INT 0
51473: PUSH
51474: EMPTY
51475: LIST
51476: LIST
51477: LIST
51478: PUSH
51479: LD_VAR 0 1
51483: PUSH
51484: LD_INT 4
51486: PLUS
51487: PUSH
51488: LD_VAR 0 2
51492: PUSH
51493: LD_INT 4
51495: PLUS
51496: PUSH
51497: LD_INT 5
51499: PUSH
51500: EMPTY
51501: LIST
51502: LIST
51503: LIST
51504: PUSH
51505: EMPTY
51506: LIST
51507: LIST
51508: LIST
51509: LIST
51510: LIST
51511: ST_TO_ADDR
// end ; 2 :
51512: GO 52071
51514: LD_INT 2
51516: DOUBLE
51517: EQUAL
51518: IFTRUE 51522
51520: GO 51651
51522: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
51523: LD_ADDR_VAR 0 5
51527: PUSH
51528: LD_VAR 0 1
51532: PUSH
51533: LD_VAR 0 2
51537: PUSH
51538: LD_INT 3
51540: MINUS
51541: PUSH
51542: LD_INT 3
51544: PUSH
51545: EMPTY
51546: LIST
51547: LIST
51548: LIST
51549: PUSH
51550: LD_VAR 0 1
51554: PUSH
51555: LD_INT 4
51557: PLUS
51558: PUSH
51559: LD_VAR 0 2
51563: PUSH
51564: LD_INT 4
51566: PUSH
51567: EMPTY
51568: LIST
51569: LIST
51570: LIST
51571: PUSH
51572: LD_VAR 0 1
51576: PUSH
51577: LD_VAR 0 2
51581: PUSH
51582: LD_INT 4
51584: PLUS
51585: PUSH
51586: LD_INT 0
51588: PUSH
51589: EMPTY
51590: LIST
51591: LIST
51592: LIST
51593: PUSH
51594: LD_VAR 0 1
51598: PUSH
51599: LD_INT 3
51601: MINUS
51602: PUSH
51603: LD_VAR 0 2
51607: PUSH
51608: LD_INT 1
51610: PUSH
51611: EMPTY
51612: LIST
51613: LIST
51614: LIST
51615: PUSH
51616: LD_VAR 0 1
51620: PUSH
51621: LD_INT 4
51623: MINUS
51624: PUSH
51625: LD_VAR 0 2
51629: PUSH
51630: LD_INT 4
51632: MINUS
51633: PUSH
51634: LD_INT 2
51636: PUSH
51637: EMPTY
51638: LIST
51639: LIST
51640: LIST
51641: PUSH
51642: EMPTY
51643: LIST
51644: LIST
51645: LIST
51646: LIST
51647: LIST
51648: ST_TO_ADDR
// end ; 3 :
51649: GO 52071
51651: LD_INT 3
51653: DOUBLE
51654: EQUAL
51655: IFTRUE 51659
51657: GO 51792
51659: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
51660: LD_ADDR_VAR 0 5
51664: PUSH
51665: LD_VAR 0 1
51669: PUSH
51670: LD_INT 3
51672: PLUS
51673: PUSH
51674: LD_VAR 0 2
51678: PUSH
51679: LD_INT 4
51681: PUSH
51682: EMPTY
51683: LIST
51684: LIST
51685: LIST
51686: PUSH
51687: LD_VAR 0 1
51691: PUSH
51692: LD_INT 4
51694: PLUS
51695: PUSH
51696: LD_VAR 0 2
51700: PUSH
51701: LD_INT 4
51703: PLUS
51704: PUSH
51705: LD_INT 5
51707: PUSH
51708: EMPTY
51709: LIST
51710: LIST
51711: LIST
51712: PUSH
51713: LD_VAR 0 1
51717: PUSH
51718: LD_INT 4
51720: MINUS
51721: PUSH
51722: LD_VAR 0 2
51726: PUSH
51727: LD_INT 1
51729: PUSH
51730: EMPTY
51731: LIST
51732: LIST
51733: LIST
51734: PUSH
51735: LD_VAR 0 1
51739: PUSH
51740: LD_VAR 0 2
51744: PUSH
51745: LD_INT 4
51747: MINUS
51748: PUSH
51749: LD_INT 3
51751: PUSH
51752: EMPTY
51753: LIST
51754: LIST
51755: LIST
51756: PUSH
51757: LD_VAR 0 1
51761: PUSH
51762: LD_INT 3
51764: MINUS
51765: PUSH
51766: LD_VAR 0 2
51770: PUSH
51771: LD_INT 3
51773: MINUS
51774: PUSH
51775: LD_INT 2
51777: PUSH
51778: EMPTY
51779: LIST
51780: LIST
51781: LIST
51782: PUSH
51783: EMPTY
51784: LIST
51785: LIST
51786: LIST
51787: LIST
51788: LIST
51789: ST_TO_ADDR
// end ; 4 :
51790: GO 52071
51792: LD_INT 4
51794: DOUBLE
51795: EQUAL
51796: IFTRUE 51800
51798: GO 51933
51800: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
51801: LD_ADDR_VAR 0 5
51805: PUSH
51806: LD_VAR 0 1
51810: PUSH
51811: LD_VAR 0 2
51815: PUSH
51816: LD_INT 4
51818: PLUS
51819: PUSH
51820: LD_INT 0
51822: PUSH
51823: EMPTY
51824: LIST
51825: LIST
51826: LIST
51827: PUSH
51828: LD_VAR 0 1
51832: PUSH
51833: LD_INT 3
51835: PLUS
51836: PUSH
51837: LD_VAR 0 2
51841: PUSH
51842: LD_INT 3
51844: PLUS
51845: PUSH
51846: LD_INT 5
51848: PUSH
51849: EMPTY
51850: LIST
51851: LIST
51852: LIST
51853: PUSH
51854: LD_VAR 0 1
51858: PUSH
51859: LD_INT 4
51861: PLUS
51862: PUSH
51863: LD_VAR 0 2
51867: PUSH
51868: LD_INT 4
51870: PUSH
51871: EMPTY
51872: LIST
51873: LIST
51874: LIST
51875: PUSH
51876: LD_VAR 0 1
51880: PUSH
51881: LD_VAR 0 2
51885: PUSH
51886: LD_INT 3
51888: MINUS
51889: PUSH
51890: LD_INT 3
51892: PUSH
51893: EMPTY
51894: LIST
51895: LIST
51896: LIST
51897: PUSH
51898: LD_VAR 0 1
51902: PUSH
51903: LD_INT 4
51905: MINUS
51906: PUSH
51907: LD_VAR 0 2
51911: PUSH
51912: LD_INT 4
51914: MINUS
51915: PUSH
51916: LD_INT 2
51918: PUSH
51919: EMPTY
51920: LIST
51921: LIST
51922: LIST
51923: PUSH
51924: EMPTY
51925: LIST
51926: LIST
51927: LIST
51928: LIST
51929: LIST
51930: ST_TO_ADDR
// end ; 5 :
51931: GO 52071
51933: LD_INT 5
51935: DOUBLE
51936: EQUAL
51937: IFTRUE 51941
51939: GO 52070
51941: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
51942: LD_ADDR_VAR 0 5
51946: PUSH
51947: LD_VAR 0 1
51951: PUSH
51952: LD_INT 4
51954: MINUS
51955: PUSH
51956: LD_VAR 0 2
51960: PUSH
51961: LD_INT 1
51963: PUSH
51964: EMPTY
51965: LIST
51966: LIST
51967: LIST
51968: PUSH
51969: LD_VAR 0 1
51973: PUSH
51974: LD_VAR 0 2
51978: PUSH
51979: LD_INT 4
51981: MINUS
51982: PUSH
51983: LD_INT 3
51985: PUSH
51986: EMPTY
51987: LIST
51988: LIST
51989: LIST
51990: PUSH
51991: LD_VAR 0 1
51995: PUSH
51996: LD_INT 4
51998: PLUS
51999: PUSH
52000: LD_VAR 0 2
52004: PUSH
52005: LD_INT 4
52007: PLUS
52008: PUSH
52009: LD_INT 5
52011: PUSH
52012: EMPTY
52013: LIST
52014: LIST
52015: LIST
52016: PUSH
52017: LD_VAR 0 1
52021: PUSH
52022: LD_INT 3
52024: PLUS
52025: PUSH
52026: LD_VAR 0 2
52030: PUSH
52031: LD_INT 4
52033: PUSH
52034: EMPTY
52035: LIST
52036: LIST
52037: LIST
52038: PUSH
52039: LD_VAR 0 1
52043: PUSH
52044: LD_VAR 0 2
52048: PUSH
52049: LD_INT 3
52051: PLUS
52052: PUSH
52053: LD_INT 0
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: LIST
52060: PUSH
52061: EMPTY
52062: LIST
52063: LIST
52064: LIST
52065: LIST
52066: LIST
52067: ST_TO_ADDR
// end ; end ;
52068: GO 52071
52070: POP
// result := list ;
52071: LD_ADDR_VAR 0 4
52075: PUSH
52076: LD_VAR 0 5
52080: ST_TO_ADDR
// end ;
52081: LD_VAR 0 4
52085: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
52086: LD_INT 0
52088: PPUSH
52089: PPUSH
52090: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
52091: LD_VAR 0 1
52095: NOT
52096: IFTRUE 52124
52098: PUSH
52099: LD_VAR 0 2
52103: PUSH
52104: LD_INT 1
52106: PUSH
52107: LD_INT 2
52109: PUSH
52110: LD_INT 3
52112: PUSH
52113: LD_INT 4
52115: PUSH
52116: EMPTY
52117: LIST
52118: LIST
52119: LIST
52120: LIST
52121: IN
52122: NOT
52123: OR
52124: IFFALSE 52128
// exit ;
52126: GO 52211
// tmp := [ ] ;
52128: LD_ADDR_VAR 0 5
52132: PUSH
52133: EMPTY
52134: ST_TO_ADDR
// for i in units do
52135: LD_ADDR_VAR 0 4
52139: PUSH
52140: LD_VAR 0 1
52144: PUSH
52145: FOR_IN
52146: IFFALSE 52180
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
52148: LD_ADDR_VAR 0 5
52152: PUSH
52153: LD_VAR 0 5
52157: PPUSH
52158: LD_VAR 0 4
52162: PPUSH
52163: LD_VAR 0 2
52167: PPUSH
52168: CALL_OW 259
52172: PPUSH
52173: CALL 53606 0 2
52177: ST_TO_ADDR
52178: GO 52145
52180: POP
52181: POP
// if not tmp then
52182: LD_VAR 0 5
52186: NOT
52187: IFFALSE 52191
// exit ;
52189: GO 52211
// result := SortListByListDesc ( units , tmp ) ;
52191: LD_ADDR_VAR 0 3
52195: PUSH
52196: LD_VAR 0 1
52200: PPUSH
52201: LD_VAR 0 5
52205: PPUSH
52206: CALL_OW 77
52210: ST_TO_ADDR
// end ;
52211: LD_VAR 0 3
52215: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
52216: LD_INT 0
52218: PPUSH
52219: PPUSH
52220: PPUSH
// result := false ;
52221: LD_ADDR_VAR 0 3
52225: PUSH
52226: LD_INT 0
52228: ST_TO_ADDR
// if not building then
52229: LD_VAR 0 2
52233: NOT
52234: IFFALSE 52238
// exit ;
52236: GO 52382
// x := GetX ( building ) ;
52238: LD_ADDR_VAR 0 4
52242: PUSH
52243: LD_VAR 0 2
52247: PPUSH
52248: CALL_OW 250
52252: ST_TO_ADDR
// y := GetY ( building ) ;
52253: LD_ADDR_VAR 0 5
52257: PUSH
52258: LD_VAR 0 2
52262: PPUSH
52263: CALL_OW 251
52267: ST_TO_ADDR
// if not x or not y then
52268: LD_VAR 0 4
52272: NOT
52273: IFTRUE 52282
52275: PUSH
52276: LD_VAR 0 5
52280: NOT
52281: OR
52282: IFFALSE 52286
// exit ;
52284: GO 52382
// if GetTaskList ( unit ) then
52286: LD_VAR 0 1
52290: PPUSH
52291: CALL_OW 437
52295: IFFALSE 52382
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
52297: LD_STRING e
52299: PUSH
52300: LD_VAR 0 1
52304: PPUSH
52305: CALL_OW 437
52309: PUSH
52310: LD_INT 1
52312: ARRAY
52313: PUSH
52314: LD_INT 1
52316: ARRAY
52317: EQUAL
52318: IFFALSE 52345
52320: PUSH
52321: LD_VAR 0 4
52325: PUSH
52326: LD_VAR 0 1
52330: PPUSH
52331: CALL_OW 437
52335: PUSH
52336: LD_INT 1
52338: ARRAY
52339: PUSH
52340: LD_INT 2
52342: ARRAY
52343: EQUAL
52344: AND
52345: IFFALSE 52372
52347: PUSH
52348: LD_VAR 0 5
52352: PUSH
52353: LD_VAR 0 1
52357: PPUSH
52358: CALL_OW 437
52362: PUSH
52363: LD_INT 1
52365: ARRAY
52366: PUSH
52367: LD_INT 3
52369: ARRAY
52370: EQUAL
52371: AND
52372: IFFALSE 52382
// result := true end ;
52374: LD_ADDR_VAR 0 3
52378: PUSH
52379: LD_INT 1
52381: ST_TO_ADDR
// end ;
52382: LD_VAR 0 3
52386: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
52387: LD_INT 0
52389: PPUSH
// result := false ;
52390: LD_ADDR_VAR 0 4
52394: PUSH
52395: LD_INT 0
52397: ST_TO_ADDR
// if GetTaskList ( unit ) then
52398: LD_VAR 0 1
52402: PPUSH
52403: CALL_OW 437
52407: IFFALSE 52494
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
52409: LD_STRING M
52411: PUSH
52412: LD_VAR 0 1
52416: PPUSH
52417: CALL_OW 437
52421: PUSH
52422: LD_INT 1
52424: ARRAY
52425: PUSH
52426: LD_INT 1
52428: ARRAY
52429: EQUAL
52430: IFFALSE 52457
52432: PUSH
52433: LD_VAR 0 2
52437: PUSH
52438: LD_VAR 0 1
52442: PPUSH
52443: CALL_OW 437
52447: PUSH
52448: LD_INT 1
52450: ARRAY
52451: PUSH
52452: LD_INT 2
52454: ARRAY
52455: EQUAL
52456: AND
52457: IFFALSE 52484
52459: PUSH
52460: LD_VAR 0 3
52464: PUSH
52465: LD_VAR 0 1
52469: PPUSH
52470: CALL_OW 437
52474: PUSH
52475: LD_INT 1
52477: ARRAY
52478: PUSH
52479: LD_INT 3
52481: ARRAY
52482: EQUAL
52483: AND
52484: IFFALSE 52494
// result := true ;
52486: LD_ADDR_VAR 0 4
52490: PUSH
52491: LD_INT 1
52493: ST_TO_ADDR
// end ; end ;
52494: LD_VAR 0 4
52498: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
52499: LD_INT 0
52501: PPUSH
52502: PPUSH
52503: PPUSH
52504: PPUSH
// if not unit or not area then
52505: LD_VAR 0 1
52509: NOT
52510: IFTRUE 52519
52512: PUSH
52513: LD_VAR 0 2
52517: NOT
52518: OR
52519: IFFALSE 52523
// exit ;
52521: GO 52699
// tmp := AreaToList ( area , i ) ;
52523: LD_ADDR_VAR 0 6
52527: PUSH
52528: LD_VAR 0 2
52532: PPUSH
52533: LD_VAR 0 5
52537: PPUSH
52538: CALL_OW 517
52542: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
52543: LD_ADDR_VAR 0 5
52547: PUSH
52548: DOUBLE
52549: LD_INT 1
52551: DEC
52552: ST_TO_ADDR
52553: LD_VAR 0 6
52557: PUSH
52558: LD_INT 1
52560: ARRAY
52561: PUSH
52562: FOR_TO
52563: IFFALSE 52697
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
52565: LD_ADDR_VAR 0 7
52569: PUSH
52570: LD_VAR 0 6
52574: PUSH
52575: LD_INT 1
52577: ARRAY
52578: PUSH
52579: LD_VAR 0 5
52583: ARRAY
52584: PUSH
52585: LD_VAR 0 6
52589: PUSH
52590: LD_INT 2
52592: ARRAY
52593: PUSH
52594: LD_VAR 0 5
52598: ARRAY
52599: PUSH
52600: EMPTY
52601: LIST
52602: LIST
52603: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
52604: LD_INT 92
52606: PUSH
52607: LD_VAR 0 7
52611: PUSH
52612: LD_INT 1
52614: ARRAY
52615: PUSH
52616: LD_VAR 0 7
52620: PUSH
52621: LD_INT 2
52623: ARRAY
52624: PUSH
52625: LD_INT 2
52627: PUSH
52628: EMPTY
52629: LIST
52630: LIST
52631: LIST
52632: LIST
52633: PPUSH
52634: CALL_OW 69
52638: PUSH
52639: LD_INT 0
52641: EQUAL
52642: IFFALSE 52695
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
52644: LD_VAR 0 1
52648: PPUSH
52649: LD_VAR 0 7
52653: PUSH
52654: LD_INT 1
52656: ARRAY
52657: PPUSH
52658: LD_VAR 0 7
52662: PUSH
52663: LD_INT 2
52665: ARRAY
52666: PPUSH
52667: LD_VAR 0 3
52671: PPUSH
52672: CALL_OW 48
// result := IsPlaced ( unit ) ;
52676: LD_ADDR_VAR 0 4
52680: PUSH
52681: LD_VAR 0 1
52685: PPUSH
52686: CALL_OW 305
52690: ST_TO_ADDR
// exit ;
52691: POP
52692: POP
52693: GO 52699
// end ; end ;
52695: GO 52562
52697: POP
52698: POP
// end ;
52699: LD_VAR 0 4
52703: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
52704: LD_INT 0
52706: PPUSH
52707: PPUSH
52708: PPUSH
// if not side or side > 8 then
52709: LD_VAR 0 1
52713: NOT
52714: IFTRUE 52726
52716: PUSH
52717: LD_VAR 0 1
52721: PUSH
52722: LD_INT 8
52724: GREATER
52725: OR
52726: IFFALSE 52730
// exit ;
52728: GO 52917
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
52730: LD_ADDR_VAR 0 4
52734: PUSH
52735: LD_INT 22
52737: PUSH
52738: LD_VAR 0 1
52742: PUSH
52743: EMPTY
52744: LIST
52745: LIST
52746: PUSH
52747: LD_INT 21
52749: PUSH
52750: LD_INT 3
52752: PUSH
52753: EMPTY
52754: LIST
52755: LIST
52756: PUSH
52757: EMPTY
52758: LIST
52759: LIST
52760: PPUSH
52761: CALL_OW 69
52765: ST_TO_ADDR
// if not tmp then
52766: LD_VAR 0 4
52770: NOT
52771: IFFALSE 52775
// exit ;
52773: GO 52917
// enable_addtolog := true ;
52775: LD_ADDR_OWVAR 81
52779: PUSH
52780: LD_INT 1
52782: ST_TO_ADDR
// AddToLog ( [ ) ;
52783: LD_STRING [
52785: PPUSH
52786: CALL_OW 561
// for i in tmp do
52790: LD_ADDR_VAR 0 3
52794: PUSH
52795: LD_VAR 0 4
52799: PUSH
52800: FOR_IN
52801: IFFALSE 52908
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
52803: LD_STRING [
52805: PUSH
52806: LD_VAR 0 3
52810: PPUSH
52811: CALL_OW 266
52815: STR
52816: PUSH
52817: LD_STRING , 
52819: STR
52820: PUSH
52821: LD_VAR 0 3
52825: PPUSH
52826: CALL_OW 250
52830: STR
52831: PUSH
52832: LD_STRING , 
52834: STR
52835: PUSH
52836: LD_VAR 0 3
52840: PPUSH
52841: CALL_OW 251
52845: STR
52846: PUSH
52847: LD_STRING , 
52849: STR
52850: PUSH
52851: LD_VAR 0 3
52855: PPUSH
52856: CALL_OW 254
52860: STR
52861: PUSH
52862: LD_STRING , 
52864: STR
52865: PUSH
52866: LD_VAR 0 3
52870: PPUSH
52871: LD_INT 1
52873: PPUSH
52874: CALL_OW 268
52878: STR
52879: PUSH
52880: LD_STRING , 
52882: STR
52883: PUSH
52884: LD_VAR 0 3
52888: PPUSH
52889: LD_INT 2
52891: PPUSH
52892: CALL_OW 268
52896: STR
52897: PUSH
52898: LD_STRING ],
52900: STR
52901: PPUSH
52902: CALL_OW 561
// end ;
52906: GO 52800
52908: POP
52909: POP
// AddToLog ( ]; ) ;
52910: LD_STRING ];
52912: PPUSH
52913: CALL_OW 561
// end ;
52917: LD_VAR 0 2
52921: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
52922: LD_INT 0
52924: PPUSH
52925: PPUSH
52926: PPUSH
52927: PPUSH
52928: PPUSH
// if not area or not rate or not max then
52929: LD_VAR 0 1
52933: NOT
52934: IFTRUE 52943
52936: PUSH
52937: LD_VAR 0 2
52941: NOT
52942: OR
52943: IFTRUE 52952
52945: PUSH
52946: LD_VAR 0 4
52950: NOT
52951: OR
52952: IFFALSE 52956
// exit ;
52954: GO 53145
// while 1 do
52956: LD_INT 1
52958: IFFALSE 53145
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
52960: LD_ADDR_VAR 0 9
52964: PUSH
52965: LD_VAR 0 1
52969: PPUSH
52970: LD_INT 1
52972: PPUSH
52973: CALL_OW 287
52977: PUSH
52978: LD_INT 10
52980: MUL
52981: ST_TO_ADDR
// r := rate / 10 ;
52982: LD_ADDR_VAR 0 7
52986: PUSH
52987: LD_VAR 0 2
52991: PUSH
52992: LD_INT 10
52994: DIVREAL
52995: ST_TO_ADDR
// time := 1 1$00 ;
52996: LD_ADDR_VAR 0 8
53000: PUSH
53001: LD_INT 2100
53003: ST_TO_ADDR
// if amount < min then
53004: LD_VAR 0 9
53008: PUSH
53009: LD_VAR 0 3
53013: LESS
53014: IFFALSE 53032
// r := r * 2 else
53016: LD_ADDR_VAR 0 7
53020: PUSH
53021: LD_VAR 0 7
53025: PUSH
53026: LD_INT 2
53028: MUL
53029: ST_TO_ADDR
53030: GO 53058
// if amount > max then
53032: LD_VAR 0 9
53036: PUSH
53037: LD_VAR 0 4
53041: GREATER
53042: IFFALSE 53058
// r := r / 2 ;
53044: LD_ADDR_VAR 0 7
53048: PUSH
53049: LD_VAR 0 7
53053: PUSH
53054: LD_INT 2
53056: DIVREAL
53057: ST_TO_ADDR
// time := time / r ;
53058: LD_ADDR_VAR 0 8
53062: PUSH
53063: LD_VAR 0 8
53067: PUSH
53068: LD_VAR 0 7
53072: DIVREAL
53073: ST_TO_ADDR
// if time < 0 then
53074: LD_VAR 0 8
53078: PUSH
53079: LD_INT 0
53081: LESS
53082: IFFALSE 53099
// time := time * - 1 ;
53084: LD_ADDR_VAR 0 8
53088: PUSH
53089: LD_VAR 0 8
53093: PUSH
53094: LD_INT 1
53096: NEG
53097: MUL
53098: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
53099: LD_VAR 0 8
53103: PUSH
53104: LD_INT 35
53106: PPUSH
53107: LD_INT 875
53109: PPUSH
53110: CALL_OW 12
53114: PLUS
53115: PPUSH
53116: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
53120: LD_INT 1
53122: PPUSH
53123: LD_INT 5
53125: PPUSH
53126: CALL_OW 12
53130: PPUSH
53131: LD_VAR 0 1
53135: PPUSH
53136: LD_INT 1
53138: PPUSH
53139: CALL_OW 55
// end ;
53143: GO 52956
// end ;
53145: LD_VAR 0 5
53149: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
53150: LD_INT 0
53152: PPUSH
53153: PPUSH
53154: PPUSH
53155: PPUSH
53156: PPUSH
53157: PPUSH
53158: PPUSH
53159: PPUSH
// if not turrets or not factories then
53160: LD_VAR 0 1
53164: NOT
53165: IFTRUE 53174
53167: PUSH
53168: LD_VAR 0 2
53172: NOT
53173: OR
53174: IFFALSE 53178
// exit ;
53176: GO 53485
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
53178: LD_ADDR_VAR 0 10
53182: PUSH
53183: LD_INT 5
53185: PUSH
53186: LD_INT 6
53188: PUSH
53189: EMPTY
53190: LIST
53191: LIST
53192: PUSH
53193: LD_INT 2
53195: PUSH
53196: LD_INT 4
53198: PUSH
53199: EMPTY
53200: LIST
53201: LIST
53202: PUSH
53203: LD_INT 3
53205: PUSH
53206: LD_INT 5
53208: PUSH
53209: EMPTY
53210: LIST
53211: LIST
53212: PUSH
53213: EMPTY
53214: LIST
53215: LIST
53216: LIST
53217: PUSH
53218: LD_INT 24
53220: PUSH
53221: LD_INT 25
53223: PUSH
53224: EMPTY
53225: LIST
53226: LIST
53227: PUSH
53228: LD_INT 23
53230: PUSH
53231: LD_INT 27
53233: PUSH
53234: EMPTY
53235: LIST
53236: LIST
53237: PUSH
53238: EMPTY
53239: LIST
53240: LIST
53241: PUSH
53242: LD_INT 42
53244: PUSH
53245: LD_INT 43
53247: PUSH
53248: EMPTY
53249: LIST
53250: LIST
53251: PUSH
53252: LD_INT 44
53254: PUSH
53255: LD_INT 46
53257: PUSH
53258: EMPTY
53259: LIST
53260: LIST
53261: PUSH
53262: LD_INT 45
53264: PUSH
53265: LD_INT 47
53267: PUSH
53268: EMPTY
53269: LIST
53270: LIST
53271: PUSH
53272: EMPTY
53273: LIST
53274: LIST
53275: LIST
53276: PUSH
53277: EMPTY
53278: LIST
53279: LIST
53280: LIST
53281: ST_TO_ADDR
// result := [ ] ;
53282: LD_ADDR_VAR 0 3
53286: PUSH
53287: EMPTY
53288: ST_TO_ADDR
// for i in turrets do
53289: LD_ADDR_VAR 0 4
53293: PUSH
53294: LD_VAR 0 1
53298: PUSH
53299: FOR_IN
53300: IFFALSE 53483
// begin nat := GetNation ( i ) ;
53302: LD_ADDR_VAR 0 7
53306: PUSH
53307: LD_VAR 0 4
53311: PPUSH
53312: CALL_OW 248
53316: ST_TO_ADDR
// weapon := 0 ;
53317: LD_ADDR_VAR 0 8
53321: PUSH
53322: LD_INT 0
53324: ST_TO_ADDR
// if not nat then
53325: LD_VAR 0 7
53329: NOT
53330: IFFALSE 53334
// continue ;
53332: GO 53299
// for j in list [ nat ] do
53334: LD_ADDR_VAR 0 5
53338: PUSH
53339: LD_VAR 0 10
53343: PUSH
53344: LD_VAR 0 7
53348: ARRAY
53349: PUSH
53350: FOR_IN
53351: IFFALSE 53392
// if GetBWeapon ( i ) = j [ 1 ] then
53353: LD_VAR 0 4
53357: PPUSH
53358: CALL_OW 269
53362: PUSH
53363: LD_VAR 0 5
53367: PUSH
53368: LD_INT 1
53370: ARRAY
53371: EQUAL
53372: IFFALSE 53390
// begin weapon := j [ 2 ] ;
53374: LD_ADDR_VAR 0 8
53378: PUSH
53379: LD_VAR 0 5
53383: PUSH
53384: LD_INT 2
53386: ARRAY
53387: ST_TO_ADDR
// break ;
53388: GO 53392
// end ;
53390: GO 53350
53392: POP
53393: POP
// if not weapon then
53394: LD_VAR 0 8
53398: NOT
53399: IFFALSE 53403
// continue ;
53401: GO 53299
// for k in factories do
53403: LD_ADDR_VAR 0 6
53407: PUSH
53408: LD_VAR 0 2
53412: PUSH
53413: FOR_IN
53414: IFFALSE 53479
// begin weapons := AvailableWeaponList ( k ) ;
53416: LD_ADDR_VAR 0 9
53420: PUSH
53421: LD_VAR 0 6
53425: PPUSH
53426: CALL_OW 478
53430: ST_TO_ADDR
// if not weapons then
53431: LD_VAR 0 9
53435: NOT
53436: IFFALSE 53440
// continue ;
53438: GO 53413
// if weapon in weapons then
53440: LD_VAR 0 8
53444: PUSH
53445: LD_VAR 0 9
53449: IN
53450: IFFALSE 53477
// begin result := [ i , weapon ] ;
53452: LD_ADDR_VAR 0 3
53456: PUSH
53457: LD_VAR 0 4
53461: PUSH
53462: LD_VAR 0 8
53466: PUSH
53467: EMPTY
53468: LIST
53469: LIST
53470: ST_TO_ADDR
// exit ;
53471: POP
53472: POP
53473: POP
53474: POP
53475: GO 53485
// end ; end ;
53477: GO 53413
53479: POP
53480: POP
// end ;
53481: GO 53299
53483: POP
53484: POP
// end ;
53485: LD_VAR 0 3
53489: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
53490: LD_INT 0
53492: PPUSH
// if not side or side > 8 then
53493: LD_VAR 0 3
53497: NOT
53498: IFTRUE 53510
53500: PUSH
53501: LD_VAR 0 3
53505: PUSH
53506: LD_INT 8
53508: GREATER
53509: OR
53510: IFFALSE 53514
// exit ;
53512: GO 53573
// if not range then
53514: LD_VAR 0 4
53518: NOT
53519: IFFALSE 53530
// range := - 12 ;
53521: LD_ADDR_VAR 0 4
53525: PUSH
53526: LD_INT 12
53528: NEG
53529: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
53530: LD_VAR 0 1
53534: PPUSH
53535: LD_VAR 0 2
53539: PPUSH
53540: LD_VAR 0 3
53544: PPUSH
53545: LD_VAR 0 4
53549: PPUSH
53550: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
53554: LD_VAR 0 1
53558: PPUSH
53559: LD_VAR 0 2
53563: PPUSH
53564: LD_VAR 0 3
53568: PPUSH
53569: CALL_OW 331
// end ;
53573: LD_VAR 0 5
53577: RET
// export function Video ( mode ) ; begin
53578: LD_INT 0
53580: PPUSH
// ingame_video = mode ;
53581: LD_ADDR_OWVAR 52
53585: PUSH
53586: LD_VAR 0 1
53590: ST_TO_ADDR
// interface_hidden = mode ;
53591: LD_ADDR_OWVAR 54
53595: PUSH
53596: LD_VAR 0 1
53600: ST_TO_ADDR
// end ;
53601: LD_VAR 0 2
53605: RET
// export function Join ( array , element ) ; begin
53606: LD_INT 0
53608: PPUSH
// result := Replace ( array , array + 1 , element ) ;
53609: LD_ADDR_VAR 0 3
53613: PUSH
53614: LD_VAR 0 1
53618: PPUSH
53619: LD_VAR 0 1
53623: PUSH
53624: LD_INT 1
53626: PLUS
53627: PPUSH
53628: LD_VAR 0 2
53632: PPUSH
53633: CALL_OW 1
53637: ST_TO_ADDR
// end ;
53638: LD_VAR 0 3
53642: RET
// export function JoinUnion ( array , element ) ; begin
53643: LD_INT 0
53645: PPUSH
// result := array union element ;
53646: LD_ADDR_VAR 0 3
53650: PUSH
53651: LD_VAR 0 1
53655: PUSH
53656: LD_VAR 0 2
53660: UNION
53661: ST_TO_ADDR
// end ;
53662: LD_VAR 0 3
53666: RET
// export function GetBehemoths ( side ) ; begin
53667: LD_INT 0
53669: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
53670: LD_ADDR_VAR 0 2
53674: PUSH
53675: LD_INT 22
53677: PUSH
53678: LD_VAR 0 1
53682: PUSH
53683: EMPTY
53684: LIST
53685: LIST
53686: PUSH
53687: LD_INT 31
53689: PUSH
53690: LD_INT 25
53692: PUSH
53693: EMPTY
53694: LIST
53695: LIST
53696: PUSH
53697: EMPTY
53698: LIST
53699: LIST
53700: PPUSH
53701: CALL_OW 69
53705: ST_TO_ADDR
// end ;
53706: LD_VAR 0 2
53710: RET
// export function Shuffle ( array ) ; var i , index ; begin
53711: LD_INT 0
53713: PPUSH
53714: PPUSH
53715: PPUSH
// result := [ ] ;
53716: LD_ADDR_VAR 0 2
53720: PUSH
53721: EMPTY
53722: ST_TO_ADDR
// if not array then
53723: LD_VAR 0 1
53727: NOT
53728: IFFALSE 53732
// exit ;
53730: GO 53831
// Randomize ;
53732: CALL_OW 10
// for i = array downto 1 do
53736: LD_ADDR_VAR 0 3
53740: PUSH
53741: DOUBLE
53742: LD_VAR 0 1
53746: INC
53747: ST_TO_ADDR
53748: LD_INT 1
53750: PUSH
53751: FOR_DOWNTO
53752: IFFALSE 53829
// begin index := rand ( 1 , array ) ;
53754: LD_ADDR_VAR 0 4
53758: PUSH
53759: LD_INT 1
53761: PPUSH
53762: LD_VAR 0 1
53766: PPUSH
53767: CALL_OW 12
53771: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
53772: LD_ADDR_VAR 0 2
53776: PUSH
53777: LD_VAR 0 2
53781: PPUSH
53782: LD_VAR 0 2
53786: PUSH
53787: LD_INT 1
53789: PLUS
53790: PPUSH
53791: LD_VAR 0 1
53795: PUSH
53796: LD_VAR 0 4
53800: ARRAY
53801: PPUSH
53802: CALL_OW 2
53806: ST_TO_ADDR
// array := Delete ( array , index ) ;
53807: LD_ADDR_VAR 0 1
53811: PUSH
53812: LD_VAR 0 1
53816: PPUSH
53817: LD_VAR 0 4
53821: PPUSH
53822: CALL_OW 3
53826: ST_TO_ADDR
// end ;
53827: GO 53751
53829: POP
53830: POP
// end ;
53831: LD_VAR 0 2
53835: RET
// export function GetBaseMaterials ( base ) ; begin
53836: LD_INT 0
53838: PPUSH
// result := [ 0 , 0 , 0 ] ;
53839: LD_ADDR_VAR 0 2
53843: PUSH
53844: LD_INT 0
53846: PUSH
53847: LD_INT 0
53849: PUSH
53850: LD_INT 0
53852: PUSH
53853: EMPTY
53854: LIST
53855: LIST
53856: LIST
53857: ST_TO_ADDR
// if not base then
53858: LD_VAR 0 1
53862: NOT
53863: IFFALSE 53867
// exit ;
53865: GO 53916
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
53867: LD_ADDR_VAR 0 2
53871: PUSH
53872: LD_VAR 0 1
53876: PPUSH
53877: LD_INT 1
53879: PPUSH
53880: CALL_OW 275
53884: PUSH
53885: LD_VAR 0 1
53889: PPUSH
53890: LD_INT 2
53892: PPUSH
53893: CALL_OW 275
53897: PUSH
53898: LD_VAR 0 1
53902: PPUSH
53903: LD_INT 3
53905: PPUSH
53906: CALL_OW 275
53910: PUSH
53911: EMPTY
53912: LIST
53913: LIST
53914: LIST
53915: ST_TO_ADDR
// end ;
53916: LD_VAR 0 2
53920: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
53921: LD_INT 0
53923: PPUSH
53924: PPUSH
// result := array ;
53925: LD_ADDR_VAR 0 3
53929: PUSH
53930: LD_VAR 0 1
53934: ST_TO_ADDR
// if size >= result then
53935: LD_VAR 0 2
53939: PUSH
53940: LD_VAR 0 3
53944: GREATEREQUAL
53945: IFFALSE 53949
// exit ;
53947: GO 53999
// if size then
53949: LD_VAR 0 2
53953: IFFALSE 53999
// for i := array downto size do
53955: LD_ADDR_VAR 0 4
53959: PUSH
53960: DOUBLE
53961: LD_VAR 0 1
53965: INC
53966: ST_TO_ADDR
53967: LD_VAR 0 2
53971: PUSH
53972: FOR_DOWNTO
53973: IFFALSE 53997
// result := Delete ( result , result ) ;
53975: LD_ADDR_VAR 0 3
53979: PUSH
53980: LD_VAR 0 3
53984: PPUSH
53985: LD_VAR 0 3
53989: PPUSH
53990: CALL_OW 3
53994: ST_TO_ADDR
53995: GO 53972
53997: POP
53998: POP
// end ;
53999: LD_VAR 0 3
54003: RET
// export function ComExit ( unit ) ; var tmp ; begin
54004: LD_INT 0
54006: PPUSH
54007: PPUSH
// if not IsInUnit ( unit ) then
54008: LD_VAR 0 1
54012: PPUSH
54013: CALL_OW 310
54017: NOT
54018: IFFALSE 54022
// exit ;
54020: GO 54082
// tmp := IsInUnit ( unit ) ;
54022: LD_ADDR_VAR 0 3
54026: PUSH
54027: LD_VAR 0 1
54031: PPUSH
54032: CALL_OW 310
54036: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
54037: LD_VAR 0 3
54041: PPUSH
54042: CALL_OW 247
54046: PUSH
54047: LD_INT 2
54049: EQUAL
54050: IFFALSE 54063
// ComExitVehicle ( unit ) else
54052: LD_VAR 0 1
54056: PPUSH
54057: CALL_OW 121
54061: GO 54072
// ComExitBuilding ( unit ) ;
54063: LD_VAR 0 1
54067: PPUSH
54068: CALL_OW 122
// result := tmp ;
54072: LD_ADDR_VAR 0 2
54076: PUSH
54077: LD_VAR 0 3
54081: ST_TO_ADDR
// end ;
54082: LD_VAR 0 2
54086: RET
// export function ComExitAll ( units ) ; var i ; begin
54087: LD_INT 0
54089: PPUSH
54090: PPUSH
// if not units then
54091: LD_VAR 0 1
54095: NOT
54096: IFFALSE 54100
// exit ;
54098: GO 54126
// for i in units do
54100: LD_ADDR_VAR 0 3
54104: PUSH
54105: LD_VAR 0 1
54109: PUSH
54110: FOR_IN
54111: IFFALSE 54124
// ComExit ( i ) ;
54113: LD_VAR 0 3
54117: PPUSH
54118: CALL 54004 0 1
54122: GO 54110
54124: POP
54125: POP
// end ;
54126: LD_VAR 0 2
54130: RET
// export function ResetHc ; begin
54131: LD_INT 0
54133: PPUSH
// InitHc ;
54134: CALL_OW 19
// hc_importance := 0 ;
54138: LD_ADDR_OWVAR 32
54142: PUSH
54143: LD_INT 0
54145: ST_TO_ADDR
// end ;
54146: LD_VAR 0 1
54150: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
54151: LD_INT 0
54153: PPUSH
54154: PPUSH
54155: PPUSH
// _x := ( x1 + x2 ) div 2 ;
54156: LD_ADDR_VAR 0 6
54160: PUSH
54161: LD_VAR 0 1
54165: PUSH
54166: LD_VAR 0 3
54170: PLUS
54171: PUSH
54172: LD_INT 2
54174: DIV
54175: ST_TO_ADDR
// if _x < 0 then
54176: LD_VAR 0 6
54180: PUSH
54181: LD_INT 0
54183: LESS
54184: IFFALSE 54201
// _x := _x * - 1 ;
54186: LD_ADDR_VAR 0 6
54190: PUSH
54191: LD_VAR 0 6
54195: PUSH
54196: LD_INT 1
54198: NEG
54199: MUL
54200: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
54201: LD_ADDR_VAR 0 7
54205: PUSH
54206: LD_VAR 0 2
54210: PUSH
54211: LD_VAR 0 4
54215: PLUS
54216: PUSH
54217: LD_INT 2
54219: DIV
54220: ST_TO_ADDR
// if _y < 0 then
54221: LD_VAR 0 7
54225: PUSH
54226: LD_INT 0
54228: LESS
54229: IFFALSE 54246
// _y := _y * - 1 ;
54231: LD_ADDR_VAR 0 7
54235: PUSH
54236: LD_VAR 0 7
54240: PUSH
54241: LD_INT 1
54243: NEG
54244: MUL
54245: ST_TO_ADDR
// result := [ _x , _y ] ;
54246: LD_ADDR_VAR 0 5
54250: PUSH
54251: LD_VAR 0 6
54255: PUSH
54256: LD_VAR 0 7
54260: PUSH
54261: EMPTY
54262: LIST
54263: LIST
54264: ST_TO_ADDR
// end ;
54265: LD_VAR 0 5
54269: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
54270: LD_INT 0
54272: PPUSH
54273: PPUSH
54274: PPUSH
54275: PPUSH
// task := GetTaskList ( unit ) ;
54276: LD_ADDR_VAR 0 7
54280: PUSH
54281: LD_VAR 0 1
54285: PPUSH
54286: CALL_OW 437
54290: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
54291: LD_VAR 0 7
54295: NOT
54296: IFFALSE 54315
54298: PUSH
54299: LD_VAR 0 1
54303: PPUSH
54304: LD_VAR 0 2
54308: PPUSH
54309: CALL_OW 308
54313: NOT
54314: AND
54315: IFFALSE 54319
// exit ;
54317: GO 54437
// if IsInArea ( unit , area ) then
54319: LD_VAR 0 1
54323: PPUSH
54324: LD_VAR 0 2
54328: PPUSH
54329: CALL_OW 308
54333: IFFALSE 54351
// begin ComMoveToArea ( unit , goAway ) ;
54335: LD_VAR 0 1
54339: PPUSH
54340: LD_VAR 0 3
54344: PPUSH
54345: CALL_OW 113
// exit ;
54349: GO 54437
// end ; if task [ 1 ] [ 1 ] <> M then
54351: LD_VAR 0 7
54355: PUSH
54356: LD_INT 1
54358: ARRAY
54359: PUSH
54360: LD_INT 1
54362: ARRAY
54363: PUSH
54364: LD_STRING M
54366: NONEQUAL
54367: IFFALSE 54371
// exit ;
54369: GO 54437
// x := task [ 1 ] [ 2 ] ;
54371: LD_ADDR_VAR 0 5
54375: PUSH
54376: LD_VAR 0 7
54380: PUSH
54381: LD_INT 1
54383: ARRAY
54384: PUSH
54385: LD_INT 2
54387: ARRAY
54388: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
54389: LD_ADDR_VAR 0 6
54393: PUSH
54394: LD_VAR 0 7
54398: PUSH
54399: LD_INT 1
54401: ARRAY
54402: PUSH
54403: LD_INT 3
54405: ARRAY
54406: ST_TO_ADDR
// if InArea ( x , y , area ) then
54407: LD_VAR 0 5
54411: PPUSH
54412: LD_VAR 0 6
54416: PPUSH
54417: LD_VAR 0 2
54421: PPUSH
54422: CALL_OW 309
54426: IFFALSE 54437
// ComStop ( unit ) ;
54428: LD_VAR 0 1
54432: PPUSH
54433: CALL_OW 141
// end ;
54437: LD_VAR 0 4
54441: RET
// export function Abs ( value ) ; begin
54442: LD_INT 0
54444: PPUSH
// result := value ;
54445: LD_ADDR_VAR 0 2
54449: PUSH
54450: LD_VAR 0 1
54454: ST_TO_ADDR
// if value < 0 then
54455: LD_VAR 0 1
54459: PUSH
54460: LD_INT 0
54462: LESS
54463: IFFALSE 54480
// result := value * - 1 ;
54465: LD_ADDR_VAR 0 2
54469: PUSH
54470: LD_VAR 0 1
54474: PUSH
54475: LD_INT 1
54477: NEG
54478: MUL
54479: ST_TO_ADDR
// end ;
54480: LD_VAR 0 2
54484: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
54485: LD_INT 0
54487: PPUSH
54488: PPUSH
54489: PPUSH
54490: PPUSH
54491: PPUSH
54492: PPUSH
54493: PPUSH
54494: PPUSH
// if not unit or not building then
54495: LD_VAR 0 1
54499: NOT
54500: IFTRUE 54509
54502: PUSH
54503: LD_VAR 0 2
54507: NOT
54508: OR
54509: IFFALSE 54513
// exit ;
54511: GO 54741
// x := GetX ( building ) ;
54513: LD_ADDR_VAR 0 4
54517: PUSH
54518: LD_VAR 0 2
54522: PPUSH
54523: CALL_OW 250
54527: ST_TO_ADDR
// y := GetY ( building ) ;
54528: LD_ADDR_VAR 0 6
54532: PUSH
54533: LD_VAR 0 2
54537: PPUSH
54538: CALL_OW 251
54542: ST_TO_ADDR
// d := GetDir ( building ) ;
54543: LD_ADDR_VAR 0 8
54547: PUSH
54548: LD_VAR 0 2
54552: PPUSH
54553: CALL_OW 254
54557: ST_TO_ADDR
// r := 4 ;
54558: LD_ADDR_VAR 0 9
54562: PUSH
54563: LD_INT 4
54565: ST_TO_ADDR
// for i := 1 to 5 do
54566: LD_ADDR_VAR 0 10
54570: PUSH
54571: DOUBLE
54572: LD_INT 1
54574: DEC
54575: ST_TO_ADDR
54576: LD_INT 5
54578: PUSH
54579: FOR_TO
54580: IFFALSE 54739
// begin _x := ShiftX ( x , d , r + i ) ;
54582: LD_ADDR_VAR 0 5
54586: PUSH
54587: LD_VAR 0 4
54591: PPUSH
54592: LD_VAR 0 8
54596: PPUSH
54597: LD_VAR 0 9
54601: PUSH
54602: LD_VAR 0 10
54606: PLUS
54607: PPUSH
54608: CALL_OW 272
54612: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
54613: LD_ADDR_VAR 0 7
54617: PUSH
54618: LD_VAR 0 6
54622: PPUSH
54623: LD_VAR 0 8
54627: PPUSH
54628: LD_VAR 0 9
54632: PUSH
54633: LD_VAR 0 10
54637: PLUS
54638: PPUSH
54639: CALL_OW 273
54643: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
54644: LD_VAR 0 5
54648: PPUSH
54649: LD_VAR 0 7
54653: PPUSH
54654: CALL_OW 488
54658: IFFALSE 54693
54660: PUSH
54661: LD_VAR 0 5
54665: PPUSH
54666: LD_VAR 0 7
54670: PPUSH
54671: CALL_OW 428
54675: PPUSH
54676: CALL_OW 247
54680: PUSH
54681: LD_INT 3
54683: PUSH
54684: LD_INT 2
54686: PUSH
54687: EMPTY
54688: LIST
54689: LIST
54690: IN
54691: NOT
54692: AND
54693: IFFALSE 54737
// begin ComMoveXY ( unit , _x , _y ) ;
54695: LD_VAR 0 1
54699: PPUSH
54700: LD_VAR 0 5
54704: PPUSH
54705: LD_VAR 0 7
54709: PPUSH
54710: CALL_OW 111
// result := [ _x , _y ] ;
54714: LD_ADDR_VAR 0 3
54718: PUSH
54719: LD_VAR 0 5
54723: PUSH
54724: LD_VAR 0 7
54728: PUSH
54729: EMPTY
54730: LIST
54731: LIST
54732: ST_TO_ADDR
// exit ;
54733: POP
54734: POP
54735: GO 54741
// end ; end ;
54737: GO 54579
54739: POP
54740: POP
// end ;
54741: LD_VAR 0 3
54745: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
54746: LD_INT 0
54748: PPUSH
54749: PPUSH
54750: PPUSH
// result := 0 ;
54751: LD_ADDR_VAR 0 3
54755: PUSH
54756: LD_INT 0
54758: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
54759: LD_VAR 0 1
54763: PUSH
54764: LD_INT 0
54766: LESS
54767: IFTRUE 54779
54769: PUSH
54770: LD_VAR 0 1
54774: PUSH
54775: LD_INT 8
54777: GREATER
54778: OR
54779: IFTRUE 54791
54781: PUSH
54782: LD_VAR 0 2
54786: PUSH
54787: LD_INT 0
54789: LESS
54790: OR
54791: IFTRUE 54803
54793: PUSH
54794: LD_VAR 0 2
54798: PUSH
54799: LD_INT 8
54801: GREATER
54802: OR
54803: IFFALSE 54807
// exit ;
54805: GO 54882
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
54807: LD_ADDR_VAR 0 4
54811: PUSH
54812: LD_INT 22
54814: PUSH
54815: LD_VAR 0 2
54819: PUSH
54820: EMPTY
54821: LIST
54822: LIST
54823: PPUSH
54824: CALL_OW 69
54828: PUSH
54829: FOR_IN
54830: IFFALSE 54880
// begin un := UnitShoot ( i ) ;
54832: LD_ADDR_VAR 0 5
54836: PUSH
54837: LD_VAR 0 4
54841: PPUSH
54842: CALL_OW 504
54846: ST_TO_ADDR
// if GetSide ( un ) = side1 then
54847: LD_VAR 0 5
54851: PPUSH
54852: CALL_OW 255
54856: PUSH
54857: LD_VAR 0 1
54861: EQUAL
54862: IFFALSE 54878
// begin result := un ;
54864: LD_ADDR_VAR 0 3
54868: PUSH
54869: LD_VAR 0 5
54873: ST_TO_ADDR
// exit ;
54874: POP
54875: POP
54876: GO 54882
// end ; end ;
54878: GO 54829
54880: POP
54881: POP
// end ;
54882: LD_VAR 0 3
54886: RET
// export function GetCargoBay ( units ) ; begin
54887: LD_INT 0
54889: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
54890: LD_ADDR_VAR 0 2
54894: PUSH
54895: LD_VAR 0 1
54899: PPUSH
54900: LD_INT 2
54902: PUSH
54903: LD_INT 34
54905: PUSH
54906: LD_INT 12
54908: PUSH
54909: EMPTY
54910: LIST
54911: LIST
54912: PUSH
54913: LD_INT 34
54915: PUSH
54916: LD_INT 51
54918: PUSH
54919: EMPTY
54920: LIST
54921: LIST
54922: PUSH
54923: LD_INT 34
54925: PUSH
54926: LD_INT 32
54928: PUSH
54929: EMPTY
54930: LIST
54931: LIST
54932: PUSH
54933: LD_INT 34
54935: PUSH
54936: LD_INT 89
54938: PUSH
54939: EMPTY
54940: LIST
54941: LIST
54942: PUSH
54943: EMPTY
54944: LIST
54945: LIST
54946: LIST
54947: LIST
54948: LIST
54949: PPUSH
54950: CALL_OW 72
54954: ST_TO_ADDR
// end ;
54955: LD_VAR 0 2
54959: RET
// export function Negate ( value ) ; begin
54960: LD_INT 0
54962: PPUSH
// result := not value ;
54963: LD_ADDR_VAR 0 2
54967: PUSH
54968: LD_VAR 0 1
54972: NOT
54973: ST_TO_ADDR
// end ;
54974: LD_VAR 0 2
54978: RET
// export function Inc ( value ) ; begin
54979: LD_INT 0
54981: PPUSH
// result := value + 1 ;
54982: LD_ADDR_VAR 0 2
54986: PUSH
54987: LD_VAR 0 1
54991: PUSH
54992: LD_INT 1
54994: PLUS
54995: ST_TO_ADDR
// end ;
54996: LD_VAR 0 2
55000: RET
// export function Dec ( value ) ; begin
55001: LD_INT 0
55003: PPUSH
// result := value - 1 ;
55004: LD_ADDR_VAR 0 2
55008: PUSH
55009: LD_VAR 0 1
55013: PUSH
55014: LD_INT 1
55016: MINUS
55017: ST_TO_ADDR
// end ;
55018: LD_VAR 0 2
55022: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
55023: LD_INT 0
55025: PPUSH
55026: PPUSH
55027: PPUSH
55028: PPUSH
55029: PPUSH
55030: PPUSH
55031: PPUSH
55032: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
55033: LD_VAR 0 1
55037: PPUSH
55038: LD_VAR 0 2
55042: PPUSH
55043: CALL_OW 488
55047: NOT
55048: IFTRUE 55067
55050: PUSH
55051: LD_VAR 0 3
55055: PPUSH
55056: LD_VAR 0 4
55060: PPUSH
55061: CALL_OW 488
55065: NOT
55066: OR
55067: IFFALSE 55080
// begin result := - 1 ;
55069: LD_ADDR_VAR 0 5
55073: PUSH
55074: LD_INT 1
55076: NEG
55077: ST_TO_ADDR
// exit ;
55078: GO 55315
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
55080: LD_ADDR_VAR 0 12
55084: PUSH
55085: LD_VAR 0 1
55089: PPUSH
55090: LD_VAR 0 2
55094: PPUSH
55095: LD_VAR 0 3
55099: PPUSH
55100: LD_VAR 0 4
55104: PPUSH
55105: CALL 54151 0 4
55109: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
55110: LD_ADDR_VAR 0 11
55114: PUSH
55115: LD_VAR 0 1
55119: PPUSH
55120: LD_VAR 0 2
55124: PPUSH
55125: LD_VAR 0 12
55129: PUSH
55130: LD_INT 1
55132: ARRAY
55133: PPUSH
55134: LD_VAR 0 12
55138: PUSH
55139: LD_INT 2
55141: ARRAY
55142: PPUSH
55143: CALL_OW 298
55147: ST_TO_ADDR
// distance := 9999 ;
55148: LD_ADDR_VAR 0 10
55152: PUSH
55153: LD_INT 9999
55155: ST_TO_ADDR
// for i := 0 to 5 do
55156: LD_ADDR_VAR 0 6
55160: PUSH
55161: DOUBLE
55162: LD_INT 0
55164: DEC
55165: ST_TO_ADDR
55166: LD_INT 5
55168: PUSH
55169: FOR_TO
55170: IFFALSE 55313
// begin _x := ShiftX ( x1 , i , centerDist ) ;
55172: LD_ADDR_VAR 0 7
55176: PUSH
55177: LD_VAR 0 1
55181: PPUSH
55182: LD_VAR 0 6
55186: PPUSH
55187: LD_VAR 0 11
55191: PPUSH
55192: CALL_OW 272
55196: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
55197: LD_ADDR_VAR 0 8
55201: PUSH
55202: LD_VAR 0 2
55206: PPUSH
55207: LD_VAR 0 6
55211: PPUSH
55212: LD_VAR 0 11
55216: PPUSH
55217: CALL_OW 273
55221: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
55222: LD_VAR 0 7
55226: PPUSH
55227: LD_VAR 0 8
55231: PPUSH
55232: CALL_OW 488
55236: NOT
55237: IFFALSE 55241
// continue ;
55239: GO 55169
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
55241: LD_ADDR_VAR 0 9
55245: PUSH
55246: LD_VAR 0 12
55250: PUSH
55251: LD_INT 1
55253: ARRAY
55254: PPUSH
55255: LD_VAR 0 12
55259: PUSH
55260: LD_INT 2
55262: ARRAY
55263: PPUSH
55264: LD_VAR 0 7
55268: PPUSH
55269: LD_VAR 0 8
55273: PPUSH
55274: CALL_OW 298
55278: ST_TO_ADDR
// if tmp < distance then
55279: LD_VAR 0 9
55283: PUSH
55284: LD_VAR 0 10
55288: LESS
55289: IFFALSE 55311
// begin result := i ;
55291: LD_ADDR_VAR 0 5
55295: PUSH
55296: LD_VAR 0 6
55300: ST_TO_ADDR
// distance := tmp ;
55301: LD_ADDR_VAR 0 10
55305: PUSH
55306: LD_VAR 0 9
55310: ST_TO_ADDR
// end ; end ;
55311: GO 55169
55313: POP
55314: POP
// end ;
55315: LD_VAR 0 5
55319: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
55320: LD_INT 0
55322: PPUSH
55323: PPUSH
// if not driver or not IsInUnit ( driver ) then
55324: LD_VAR 0 1
55328: NOT
55329: IFTRUE 55343
55331: PUSH
55332: LD_VAR 0 1
55336: PPUSH
55337: CALL_OW 310
55341: NOT
55342: OR
55343: IFFALSE 55347
// exit ;
55345: GO 55437
// vehicle := IsInUnit ( driver ) ;
55347: LD_ADDR_VAR 0 3
55351: PUSH
55352: LD_VAR 0 1
55356: PPUSH
55357: CALL_OW 310
55361: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
55362: LD_VAR 0 1
55366: PPUSH
55367: LD_STRING \
55369: PUSH
55370: LD_INT 0
55372: PUSH
55373: LD_INT 0
55375: PUSH
55376: LD_INT 0
55378: PUSH
55379: LD_INT 0
55381: PUSH
55382: LD_INT 0
55384: PUSH
55385: LD_INT 0
55387: PUSH
55388: EMPTY
55389: LIST
55390: LIST
55391: LIST
55392: LIST
55393: LIST
55394: LIST
55395: LIST
55396: PUSH
55397: LD_STRING E
55399: PUSH
55400: LD_INT 0
55402: PUSH
55403: LD_INT 0
55405: PUSH
55406: LD_VAR 0 3
55410: PUSH
55411: LD_INT 0
55413: PUSH
55414: LD_INT 0
55416: PUSH
55417: LD_INT 0
55419: PUSH
55420: EMPTY
55421: LIST
55422: LIST
55423: LIST
55424: LIST
55425: LIST
55426: LIST
55427: LIST
55428: PUSH
55429: EMPTY
55430: LIST
55431: LIST
55432: PPUSH
55433: CALL_OW 446
// end ;
55437: LD_VAR 0 2
55441: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
55442: LD_INT 0
55444: PPUSH
55445: PPUSH
// if not driver or not IsInUnit ( driver ) then
55446: LD_VAR 0 1
55450: NOT
55451: IFTRUE 55465
55453: PUSH
55454: LD_VAR 0 1
55458: PPUSH
55459: CALL_OW 310
55463: NOT
55464: OR
55465: IFFALSE 55469
// exit ;
55467: GO 55559
// vehicle := IsInUnit ( driver ) ;
55469: LD_ADDR_VAR 0 3
55473: PUSH
55474: LD_VAR 0 1
55478: PPUSH
55479: CALL_OW 310
55483: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
55484: LD_VAR 0 1
55488: PPUSH
55489: LD_STRING \
55491: PUSH
55492: LD_INT 0
55494: PUSH
55495: LD_INT 0
55497: PUSH
55498: LD_INT 0
55500: PUSH
55501: LD_INT 0
55503: PUSH
55504: LD_INT 0
55506: PUSH
55507: LD_INT 0
55509: PUSH
55510: EMPTY
55511: LIST
55512: LIST
55513: LIST
55514: LIST
55515: LIST
55516: LIST
55517: LIST
55518: PUSH
55519: LD_STRING E
55521: PUSH
55522: LD_INT 0
55524: PUSH
55525: LD_INT 0
55527: PUSH
55528: LD_VAR 0 3
55532: PUSH
55533: LD_INT 0
55535: PUSH
55536: LD_INT 0
55538: PUSH
55539: LD_INT 0
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: LIST
55546: LIST
55547: LIST
55548: LIST
55549: LIST
55550: PUSH
55551: EMPTY
55552: LIST
55553: LIST
55554: PPUSH
55555: CALL_OW 447
// end ;
55559: LD_VAR 0 2
55563: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
55564: LD_INT 0
55566: PPUSH
55567: PPUSH
55568: PPUSH
// tmp := [ ] ;
55569: LD_ADDR_VAR 0 5
55573: PUSH
55574: EMPTY
55575: ST_TO_ADDR
// for i in units do
55576: LD_ADDR_VAR 0 4
55580: PUSH
55581: LD_VAR 0 1
55585: PUSH
55586: FOR_IN
55587: IFFALSE 55625
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
55589: LD_ADDR_VAR 0 5
55593: PUSH
55594: LD_VAR 0 5
55598: PPUSH
55599: LD_VAR 0 5
55603: PUSH
55604: LD_INT 1
55606: PLUS
55607: PPUSH
55608: LD_VAR 0 4
55612: PPUSH
55613: CALL_OW 256
55617: PPUSH
55618: CALL_OW 2
55622: ST_TO_ADDR
55623: GO 55586
55625: POP
55626: POP
// if not tmp then
55627: LD_VAR 0 5
55631: NOT
55632: IFFALSE 55636
// exit ;
55634: GO 55684
// if asc then
55636: LD_VAR 0 2
55640: IFFALSE 55664
// result := SortListByListAsc ( units , tmp ) else
55642: LD_ADDR_VAR 0 3
55646: PUSH
55647: LD_VAR 0 1
55651: PPUSH
55652: LD_VAR 0 5
55656: PPUSH
55657: CALL_OW 76
55661: ST_TO_ADDR
55662: GO 55684
// result := SortListByListDesc ( units , tmp ) ;
55664: LD_ADDR_VAR 0 3
55668: PUSH
55669: LD_VAR 0 1
55673: PPUSH
55674: LD_VAR 0 5
55678: PPUSH
55679: CALL_OW 77
55683: ST_TO_ADDR
// end ;
55684: LD_VAR 0 3
55688: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
55689: LD_INT 0
55691: PPUSH
55692: PPUSH
// task := GetTaskList ( mech ) ;
55693: LD_ADDR_VAR 0 4
55697: PUSH
55698: LD_VAR 0 1
55702: PPUSH
55703: CALL_OW 437
55707: ST_TO_ADDR
// if not task then
55708: LD_VAR 0 4
55712: NOT
55713: IFFALSE 55717
// exit ;
55715: GO 55761
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
55717: LD_ADDR_VAR 0 3
55721: PUSH
55722: LD_VAR 0 4
55726: PUSH
55727: LD_INT 1
55729: ARRAY
55730: PUSH
55731: LD_INT 1
55733: ARRAY
55734: PUSH
55735: LD_STRING r
55737: EQUAL
55738: IFFALSE 55760
55740: PUSH
55741: LD_VAR 0 4
55745: PUSH
55746: LD_INT 1
55748: ARRAY
55749: PUSH
55750: LD_INT 4
55752: ARRAY
55753: PUSH
55754: LD_VAR 0 2
55758: EQUAL
55759: AND
55760: ST_TO_ADDR
// end ;
55761: LD_VAR 0 3
55765: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
55766: LD_INT 0
55768: PPUSH
// SetDir ( unit , d ) ;
55769: LD_VAR 0 1
55773: PPUSH
55774: LD_VAR 0 4
55778: PPUSH
55779: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
55783: LD_ADDR_VAR 0 6
55787: PUSH
55788: LD_VAR 0 1
55792: PPUSH
55793: LD_VAR 0 2
55797: PPUSH
55798: LD_VAR 0 3
55802: PPUSH
55803: LD_VAR 0 5
55807: PPUSH
55808: CALL_OW 48
55812: ST_TO_ADDR
// end ;
55813: LD_VAR 0 6
55817: RET
// export function ToNaturalNumber ( number ) ; begin
55818: LD_INT 0
55820: PPUSH
// result := number div 1 ;
55821: LD_ADDR_VAR 0 2
55825: PUSH
55826: LD_VAR 0 1
55830: PUSH
55831: LD_INT 1
55833: DIV
55834: ST_TO_ADDR
// if number < 0 then
55835: LD_VAR 0 1
55839: PUSH
55840: LD_INT 0
55842: LESS
55843: IFFALSE 55853
// result := 0 ;
55845: LD_ADDR_VAR 0 2
55849: PUSH
55850: LD_INT 0
55852: ST_TO_ADDR
// end ;
55853: LD_VAR 0 2
55857: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
55858: LD_INT 0
55860: PPUSH
55861: PPUSH
55862: PPUSH
// if not buildings then
55863: LD_VAR 0 1
55867: NOT
55868: IFFALSE 55872
// exit ;
55870: GO 55987
// tmp := [ ] ;
55872: LD_ADDR_VAR 0 5
55876: PUSH
55877: EMPTY
55878: ST_TO_ADDR
// for b in buildings do
55879: LD_ADDR_VAR 0 4
55883: PUSH
55884: LD_VAR 0 1
55888: PUSH
55889: FOR_IN
55890: IFFALSE 55928
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
55892: LD_ADDR_VAR 0 5
55896: PUSH
55897: LD_VAR 0 5
55901: PPUSH
55902: LD_VAR 0 5
55906: PUSH
55907: LD_INT 1
55909: PLUS
55910: PPUSH
55911: LD_VAR 0 4
55915: PPUSH
55916: CALL_OW 266
55920: PPUSH
55921: CALL_OW 1
55925: ST_TO_ADDR
55926: GO 55889
55928: POP
55929: POP
// if not tmp then
55930: LD_VAR 0 5
55934: NOT
55935: IFFALSE 55939
// exit ;
55937: GO 55987
// if asc then
55939: LD_VAR 0 2
55943: IFFALSE 55967
// result := SortListByListAsc ( buildings , tmp ) else
55945: LD_ADDR_VAR 0 3
55949: PUSH
55950: LD_VAR 0 1
55954: PPUSH
55955: LD_VAR 0 5
55959: PPUSH
55960: CALL_OW 76
55964: ST_TO_ADDR
55965: GO 55987
// result := SortListByListDesc ( buildings , tmp ) ;
55967: LD_ADDR_VAR 0 3
55971: PUSH
55972: LD_VAR 0 1
55976: PPUSH
55977: LD_VAR 0 5
55981: PPUSH
55982: CALL_OW 77
55986: ST_TO_ADDR
// end ;
55987: LD_VAR 0 3
55991: RET
// export function SortByClass ( units , class ) ; var un ; begin
55992: LD_INT 0
55994: PPUSH
55995: PPUSH
// if not units or not class then
55996: LD_VAR 0 1
56000: NOT
56001: IFTRUE 56010
56003: PUSH
56004: LD_VAR 0 2
56008: NOT
56009: OR
56010: IFFALSE 56014
// exit ;
56012: GO 56109
// result := [ ] ;
56014: LD_ADDR_VAR 0 3
56018: PUSH
56019: EMPTY
56020: ST_TO_ADDR
// for un in units do
56021: LD_ADDR_VAR 0 4
56025: PUSH
56026: LD_VAR 0 1
56030: PUSH
56031: FOR_IN
56032: IFFALSE 56107
// if GetClass ( un ) = class then
56034: LD_VAR 0 4
56038: PPUSH
56039: CALL_OW 257
56043: PUSH
56044: LD_VAR 0 2
56048: EQUAL
56049: IFFALSE 56076
// result := Insert ( result , 1 , un ) else
56051: LD_ADDR_VAR 0 3
56055: PUSH
56056: LD_VAR 0 3
56060: PPUSH
56061: LD_INT 1
56063: PPUSH
56064: LD_VAR 0 4
56068: PPUSH
56069: CALL_OW 2
56073: ST_TO_ADDR
56074: GO 56105
// result := Replace ( result , result + 1 , un ) ;
56076: LD_ADDR_VAR 0 3
56080: PUSH
56081: LD_VAR 0 3
56085: PPUSH
56086: LD_VAR 0 3
56090: PUSH
56091: LD_INT 1
56093: PLUS
56094: PPUSH
56095: LD_VAR 0 4
56099: PPUSH
56100: CALL_OW 1
56104: ST_TO_ADDR
56105: GO 56031
56107: POP
56108: POP
// end ;
56109: LD_VAR 0 3
56113: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
56114: LD_INT 0
56116: PPUSH
56117: PPUSH
56118: PPUSH
56119: PPUSH
56120: PPUSH
56121: PPUSH
56122: PPUSH
// result := [ ] ;
56123: LD_ADDR_VAR 0 4
56127: PUSH
56128: EMPTY
56129: ST_TO_ADDR
// if x - r < 0 then
56130: LD_VAR 0 1
56134: PUSH
56135: LD_VAR 0 3
56139: MINUS
56140: PUSH
56141: LD_INT 0
56143: LESS
56144: IFFALSE 56156
// min_x := 0 else
56146: LD_ADDR_VAR 0 8
56150: PUSH
56151: LD_INT 0
56153: ST_TO_ADDR
56154: GO 56172
// min_x := x - r ;
56156: LD_ADDR_VAR 0 8
56160: PUSH
56161: LD_VAR 0 1
56165: PUSH
56166: LD_VAR 0 3
56170: MINUS
56171: ST_TO_ADDR
// if y - r < 0 then
56172: LD_VAR 0 2
56176: PUSH
56177: LD_VAR 0 3
56181: MINUS
56182: PUSH
56183: LD_INT 0
56185: LESS
56186: IFFALSE 56198
// min_y := 0 else
56188: LD_ADDR_VAR 0 7
56192: PUSH
56193: LD_INT 0
56195: ST_TO_ADDR
56196: GO 56214
// min_y := y - r ;
56198: LD_ADDR_VAR 0 7
56202: PUSH
56203: LD_VAR 0 2
56207: PUSH
56208: LD_VAR 0 3
56212: MINUS
56213: ST_TO_ADDR
// max_x := x + r ;
56214: LD_ADDR_VAR 0 9
56218: PUSH
56219: LD_VAR 0 1
56223: PUSH
56224: LD_VAR 0 3
56228: PLUS
56229: ST_TO_ADDR
// max_y := y + r ;
56230: LD_ADDR_VAR 0 10
56234: PUSH
56235: LD_VAR 0 2
56239: PUSH
56240: LD_VAR 0 3
56244: PLUS
56245: ST_TO_ADDR
// for _x = min_x to max_x do
56246: LD_ADDR_VAR 0 5
56250: PUSH
56251: DOUBLE
56252: LD_VAR 0 8
56256: DEC
56257: ST_TO_ADDR
56258: LD_VAR 0 9
56262: PUSH
56263: FOR_TO
56264: IFFALSE 56365
// for _y = min_y to max_y do
56266: LD_ADDR_VAR 0 6
56270: PUSH
56271: DOUBLE
56272: LD_VAR 0 7
56276: DEC
56277: ST_TO_ADDR
56278: LD_VAR 0 10
56282: PUSH
56283: FOR_TO
56284: IFFALSE 56361
// begin if not ValidHex ( _x , _y ) then
56286: LD_VAR 0 5
56290: PPUSH
56291: LD_VAR 0 6
56295: PPUSH
56296: CALL_OW 488
56300: NOT
56301: IFFALSE 56305
// continue ;
56303: GO 56283
// if GetResourceTypeXY ( _x , _y ) then
56305: LD_VAR 0 5
56309: PPUSH
56310: LD_VAR 0 6
56314: PPUSH
56315: CALL_OW 283
56319: IFFALSE 56359
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
56321: LD_ADDR_VAR 0 4
56325: PUSH
56326: LD_VAR 0 4
56330: PPUSH
56331: LD_VAR 0 4
56335: PUSH
56336: LD_INT 1
56338: PLUS
56339: PPUSH
56340: LD_VAR 0 5
56344: PUSH
56345: LD_VAR 0 6
56349: PUSH
56350: EMPTY
56351: LIST
56352: LIST
56353: PPUSH
56354: CALL_OW 1
56358: ST_TO_ADDR
// end ;
56359: GO 56283
56361: POP
56362: POP
56363: GO 56263
56365: POP
56366: POP
// end ;
56367: LD_VAR 0 4
56371: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
56372: LD_INT 0
56374: PPUSH
56375: PPUSH
56376: PPUSH
56377: PPUSH
56378: PPUSH
56379: PPUSH
56380: PPUSH
56381: PPUSH
// if not units then
56382: LD_VAR 0 1
56386: NOT
56387: IFFALSE 56391
// exit ;
56389: GO 56923
// result := UnitFilter ( units , [ f_ok ] ) ;
56391: LD_ADDR_VAR 0 3
56395: PUSH
56396: LD_VAR 0 1
56400: PPUSH
56401: LD_INT 50
56403: PUSH
56404: EMPTY
56405: LIST
56406: PPUSH
56407: CALL_OW 72
56411: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
56412: LD_ADDR_VAR 0 8
56416: PUSH
56417: LD_VAR 0 1
56421: PUSH
56422: LD_INT 1
56424: ARRAY
56425: PPUSH
56426: CALL_OW 255
56430: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
56431: LD_ADDR_VAR 0 10
56435: PUSH
56436: LD_INT 29
56438: PUSH
56439: LD_INT 91
56441: PUSH
56442: LD_INT 49
56444: PUSH
56445: EMPTY
56446: LIST
56447: LIST
56448: LIST
56449: ST_TO_ADDR
// if not result then
56450: LD_VAR 0 3
56454: NOT
56455: IFFALSE 56459
// exit ;
56457: GO 56923
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
56459: LD_ADDR_VAR 0 5
56463: PUSH
56464: LD_INT 81
56466: PUSH
56467: LD_VAR 0 8
56471: PUSH
56472: EMPTY
56473: LIST
56474: LIST
56475: PPUSH
56476: CALL_OW 69
56480: ST_TO_ADDR
// for i in result do
56481: LD_ADDR_VAR 0 4
56485: PUSH
56486: LD_VAR 0 3
56490: PUSH
56491: FOR_IN
56492: IFFALSE 56921
// begin tag := GetTag ( i ) + 1 ;
56494: LD_ADDR_VAR 0 9
56498: PUSH
56499: LD_VAR 0 4
56503: PPUSH
56504: CALL_OW 110
56508: PUSH
56509: LD_INT 1
56511: PLUS
56512: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
56513: LD_ADDR_VAR 0 7
56517: PUSH
56518: LD_VAR 0 4
56522: PPUSH
56523: CALL_OW 250
56527: PPUSH
56528: LD_VAR 0 4
56532: PPUSH
56533: CALL_OW 251
56537: PPUSH
56538: LD_INT 4
56540: PPUSH
56541: CALL 56114 0 3
56545: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
56546: LD_VAR 0 4
56550: PPUSH
56551: CALL_OW 247
56555: PUSH
56556: LD_INT 2
56558: EQUAL
56559: IFFALSE 56571
56561: PUSH
56562: LD_VAR 0 7
56566: PUSH
56567: LD_INT 2
56569: GREATER
56570: AND
56571: IFFALSE 56591
56573: PUSH
56574: LD_VAR 0 4
56578: PPUSH
56579: CALL_OW 264
56583: PUSH
56584: LD_VAR 0 10
56588: IN
56589: NOT
56590: AND
56591: IFFALSE 56630
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
56593: LD_VAR 0 4
56597: PPUSH
56598: LD_VAR 0 7
56602: PUSH
56603: LD_INT 1
56605: ARRAY
56606: PUSH
56607: LD_INT 1
56609: ARRAY
56610: PPUSH
56611: LD_VAR 0 7
56615: PUSH
56616: LD_INT 1
56618: ARRAY
56619: PUSH
56620: LD_INT 2
56622: ARRAY
56623: PPUSH
56624: CALL_OW 116
56628: GO 56919
// if path > tag then
56630: LD_VAR 0 2
56634: PUSH
56635: LD_VAR 0 9
56639: GREATER
56640: IFFALSE 56848
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
56642: LD_ADDR_VAR 0 6
56646: PUSH
56647: LD_VAR 0 5
56651: PPUSH
56652: LD_INT 91
56654: PUSH
56655: LD_VAR 0 4
56659: PUSH
56660: LD_INT 8
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: LIST
56667: PPUSH
56668: CALL_OW 72
56672: ST_TO_ADDR
// if nearEnemy then
56673: LD_VAR 0 6
56677: IFFALSE 56746
// begin if GetWeapon ( i ) = ru_time_lapser then
56679: LD_VAR 0 4
56683: PPUSH
56684: CALL_OW 264
56688: PUSH
56689: LD_INT 49
56691: EQUAL
56692: IFFALSE 56720
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
56694: LD_VAR 0 4
56698: PPUSH
56699: LD_VAR 0 6
56703: PPUSH
56704: LD_VAR 0 4
56708: PPUSH
56709: CALL_OW 74
56713: PPUSH
56714: CALL_OW 112
56718: GO 56744
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
56720: LD_VAR 0 4
56724: PPUSH
56725: LD_VAR 0 6
56729: PPUSH
56730: LD_VAR 0 4
56734: PPUSH
56735: CALL_OW 74
56739: PPUSH
56740: CALL 58004 0 2
// end else
56744: GO 56846
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
56746: LD_VAR 0 4
56750: PPUSH
56751: LD_VAR 0 2
56755: PUSH
56756: LD_VAR 0 9
56760: ARRAY
56761: PUSH
56762: LD_INT 1
56764: ARRAY
56765: PPUSH
56766: LD_VAR 0 2
56770: PUSH
56771: LD_VAR 0 9
56775: ARRAY
56776: PUSH
56777: LD_INT 2
56779: ARRAY
56780: PPUSH
56781: CALL_OW 297
56785: PUSH
56786: LD_INT 6
56788: GREATER
56789: IFFALSE 56832
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
56791: LD_VAR 0 4
56795: PPUSH
56796: LD_VAR 0 2
56800: PUSH
56801: LD_VAR 0 9
56805: ARRAY
56806: PUSH
56807: LD_INT 1
56809: ARRAY
56810: PPUSH
56811: LD_VAR 0 2
56815: PUSH
56816: LD_VAR 0 9
56820: ARRAY
56821: PUSH
56822: LD_INT 2
56824: ARRAY
56825: PPUSH
56826: CALL_OW 114
56830: GO 56846
// SetTag ( i , tag ) ;
56832: LD_VAR 0 4
56836: PPUSH
56837: LD_VAR 0 9
56841: PPUSH
56842: CALL_OW 109
// end else
56846: GO 56919
// if enemy then
56848: LD_VAR 0 5
56852: IFFALSE 56919
// begin if GetWeapon ( i ) = ru_time_lapser then
56854: LD_VAR 0 4
56858: PPUSH
56859: CALL_OW 264
56863: PUSH
56864: LD_INT 49
56866: EQUAL
56867: IFFALSE 56895
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
56869: LD_VAR 0 4
56873: PPUSH
56874: LD_VAR 0 5
56878: PPUSH
56879: LD_VAR 0 4
56883: PPUSH
56884: CALL_OW 74
56888: PPUSH
56889: CALL_OW 112
56893: GO 56919
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
56895: LD_VAR 0 4
56899: PPUSH
56900: LD_VAR 0 5
56904: PPUSH
56905: LD_VAR 0 4
56909: PPUSH
56910: CALL_OW 74
56914: PPUSH
56915: CALL 58004 0 2
// end ; end ;
56919: GO 56491
56921: POP
56922: POP
// end ;
56923: LD_VAR 0 3
56927: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
56928: LD_INT 0
56930: PPUSH
56931: PPUSH
56932: PPUSH
// if not unit or IsInUnit ( unit ) then
56933: LD_VAR 0 1
56937: NOT
56938: IFTRUE 56951
56940: PUSH
56941: LD_VAR 0 1
56945: PPUSH
56946: CALL_OW 310
56950: OR
56951: IFFALSE 56955
// exit ;
56953: GO 57046
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
56955: LD_ADDR_VAR 0 4
56959: PUSH
56960: LD_VAR 0 1
56964: PPUSH
56965: CALL_OW 250
56969: PPUSH
56970: LD_VAR 0 2
56974: PPUSH
56975: LD_INT 1
56977: PPUSH
56978: CALL_OW 272
56982: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
56983: LD_ADDR_VAR 0 5
56987: PUSH
56988: LD_VAR 0 1
56992: PPUSH
56993: CALL_OW 251
56997: PPUSH
56998: LD_VAR 0 2
57002: PPUSH
57003: LD_INT 1
57005: PPUSH
57006: CALL_OW 273
57010: ST_TO_ADDR
// if ValidHex ( x , y ) then
57011: LD_VAR 0 4
57015: PPUSH
57016: LD_VAR 0 5
57020: PPUSH
57021: CALL_OW 488
57025: IFFALSE 57046
// ComTurnXY ( unit , x , y ) ;
57027: LD_VAR 0 1
57031: PPUSH
57032: LD_VAR 0 4
57036: PPUSH
57037: LD_VAR 0 5
57041: PPUSH
57042: CALL_OW 118
// end ;
57046: LD_VAR 0 3
57050: RET
// export function SeeUnits ( side , units ) ; var i ; begin
57051: LD_INT 0
57053: PPUSH
57054: PPUSH
// result := false ;
57055: LD_ADDR_VAR 0 3
57059: PUSH
57060: LD_INT 0
57062: ST_TO_ADDR
// if not units then
57063: LD_VAR 0 2
57067: NOT
57068: IFFALSE 57072
// exit ;
57070: GO 57117
// for i in units do
57072: LD_ADDR_VAR 0 4
57076: PUSH
57077: LD_VAR 0 2
57081: PUSH
57082: FOR_IN
57083: IFFALSE 57115
// if See ( side , i ) then
57085: LD_VAR 0 1
57089: PPUSH
57090: LD_VAR 0 4
57094: PPUSH
57095: CALL_OW 292
57099: IFFALSE 57113
// begin result := true ;
57101: LD_ADDR_VAR 0 3
57105: PUSH
57106: LD_INT 1
57108: ST_TO_ADDR
// exit ;
57109: POP
57110: POP
57111: GO 57117
// end ;
57113: GO 57082
57115: POP
57116: POP
// end ;
57117: LD_VAR 0 3
57121: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
57122: LD_INT 0
57124: PPUSH
57125: PPUSH
57126: PPUSH
57127: PPUSH
// if not unit or not points then
57128: LD_VAR 0 1
57132: NOT
57133: IFTRUE 57142
57135: PUSH
57136: LD_VAR 0 2
57140: NOT
57141: OR
57142: IFFALSE 57146
// exit ;
57144: GO 57236
// dist := 99999 ;
57146: LD_ADDR_VAR 0 5
57150: PUSH
57151: LD_INT 99999
57153: ST_TO_ADDR
// for i in points do
57154: LD_ADDR_VAR 0 4
57158: PUSH
57159: LD_VAR 0 2
57163: PUSH
57164: FOR_IN
57165: IFFALSE 57234
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
57167: LD_ADDR_VAR 0 6
57171: PUSH
57172: LD_VAR 0 1
57176: PPUSH
57177: LD_VAR 0 4
57181: PUSH
57182: LD_INT 1
57184: ARRAY
57185: PPUSH
57186: LD_VAR 0 4
57190: PUSH
57191: LD_INT 2
57193: ARRAY
57194: PPUSH
57195: CALL_OW 297
57199: ST_TO_ADDR
// if tmpDist < dist then
57200: LD_VAR 0 6
57204: PUSH
57205: LD_VAR 0 5
57209: LESS
57210: IFFALSE 57232
// begin result := i ;
57212: LD_ADDR_VAR 0 3
57216: PUSH
57217: LD_VAR 0 4
57221: ST_TO_ADDR
// dist := tmpDist ;
57222: LD_ADDR_VAR 0 5
57226: PUSH
57227: LD_VAR 0 6
57231: ST_TO_ADDR
// end ; end ;
57232: GO 57164
57234: POP
57235: POP
// end ;
57236: LD_VAR 0 3
57240: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
57241: LD_INT 0
57243: PPUSH
// uc_side := side ;
57244: LD_ADDR_OWVAR 20
57248: PUSH
57249: LD_VAR 0 1
57253: ST_TO_ADDR
// uc_nation := 3 ;
57254: LD_ADDR_OWVAR 21
57258: PUSH
57259: LD_INT 3
57261: ST_TO_ADDR
// vc_chassis := 25 ;
57262: LD_ADDR_OWVAR 37
57266: PUSH
57267: LD_INT 25
57269: ST_TO_ADDR
// vc_engine := engine_siberite ;
57270: LD_ADDR_OWVAR 39
57274: PUSH
57275: LD_INT 3
57277: ST_TO_ADDR
// vc_control := control_computer ;
57278: LD_ADDR_OWVAR 38
57282: PUSH
57283: LD_INT 3
57285: ST_TO_ADDR
// vc_weapon := 59 ;
57286: LD_ADDR_OWVAR 40
57290: PUSH
57291: LD_INT 59
57293: ST_TO_ADDR
// result := CreateVehicle ;
57294: LD_ADDR_VAR 0 5
57298: PUSH
57299: CALL_OW 45
57303: ST_TO_ADDR
// SetDir ( result , d ) ;
57304: LD_VAR 0 5
57308: PPUSH
57309: LD_VAR 0 4
57313: PPUSH
57314: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
57318: LD_VAR 0 5
57322: PPUSH
57323: LD_VAR 0 2
57327: PPUSH
57328: LD_VAR 0 3
57332: PPUSH
57333: LD_INT 0
57335: PPUSH
57336: CALL_OW 48
// end ;
57340: LD_VAR 0 5
57344: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
57345: LD_INT 0
57347: PPUSH
57348: PPUSH
57349: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
57350: LD_ADDR_VAR 0 2
57354: PUSH
57355: LD_INT 0
57357: PUSH
57358: LD_INT 0
57360: PUSH
57361: LD_INT 0
57363: PUSH
57364: LD_INT 0
57366: PUSH
57367: EMPTY
57368: LIST
57369: LIST
57370: LIST
57371: LIST
57372: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
57373: LD_VAR 0 1
57377: NOT
57378: IFTRUE 57411
57380: PUSH
57381: LD_VAR 0 1
57385: PPUSH
57386: CALL_OW 264
57390: PUSH
57391: LD_INT 12
57393: PUSH
57394: LD_INT 51
57396: PUSH
57397: LD_INT 32
57399: PUSH
57400: LD_INT 89
57402: PUSH
57403: EMPTY
57404: LIST
57405: LIST
57406: LIST
57407: LIST
57408: IN
57409: NOT
57410: OR
57411: IFFALSE 57415
// exit ;
57413: GO 57513
// for i := 1 to 3 do
57415: LD_ADDR_VAR 0 3
57419: PUSH
57420: DOUBLE
57421: LD_INT 1
57423: DEC
57424: ST_TO_ADDR
57425: LD_INT 3
57427: PUSH
57428: FOR_TO
57429: IFFALSE 57511
// begin tmp := GetCargo ( cargo , i ) ;
57431: LD_ADDR_VAR 0 4
57435: PUSH
57436: LD_VAR 0 1
57440: PPUSH
57441: LD_VAR 0 3
57445: PPUSH
57446: CALL_OW 289
57450: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
57451: LD_ADDR_VAR 0 2
57455: PUSH
57456: LD_VAR 0 2
57460: PPUSH
57461: LD_VAR 0 3
57465: PPUSH
57466: LD_VAR 0 4
57470: PPUSH
57471: CALL_OW 1
57475: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
57476: LD_ADDR_VAR 0 2
57480: PUSH
57481: LD_VAR 0 2
57485: PPUSH
57486: LD_INT 4
57488: PPUSH
57489: LD_VAR 0 2
57493: PUSH
57494: LD_INT 4
57496: ARRAY
57497: PUSH
57498: LD_VAR 0 4
57502: PLUS
57503: PPUSH
57504: CALL_OW 1
57508: ST_TO_ADDR
// end ;
57509: GO 57428
57511: POP
57512: POP
// end ;
57513: LD_VAR 0 2
57517: RET
// export function Length ( array ) ; begin
57518: LD_INT 0
57520: PPUSH
// result := array + 0 ;
57521: LD_ADDR_VAR 0 2
57525: PUSH
57526: LD_VAR 0 1
57530: PUSH
57531: LD_INT 0
57533: PLUS
57534: ST_TO_ADDR
// end ;
57535: LD_VAR 0 2
57539: RET
// export function PrepareArray ( array ) ; begin
57540: LD_INT 0
57542: PPUSH
// result := array diff 0 ;
57543: LD_ADDR_VAR 0 2
57547: PUSH
57548: LD_VAR 0 1
57552: PUSH
57553: LD_INT 0
57555: DIFF
57556: ST_TO_ADDR
// if not result [ 1 ] then
57557: LD_VAR 0 2
57561: PUSH
57562: LD_INT 1
57564: ARRAY
57565: NOT
57566: IFFALSE 57586
// result := Delete ( result , 1 ) ;
57568: LD_ADDR_VAR 0 2
57572: PUSH
57573: LD_VAR 0 2
57577: PPUSH
57578: LD_INT 1
57580: PPUSH
57581: CALL_OW 3
57585: ST_TO_ADDR
// end ;
57586: LD_VAR 0 2
57590: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
57591: LD_INT 0
57593: PPUSH
57594: PPUSH
57595: PPUSH
57596: PPUSH
// sibRocketRange := 25 ;
57597: LD_ADDR_VAR 0 6
57601: PUSH
57602: LD_INT 25
57604: ST_TO_ADDR
// result := false ;
57605: LD_ADDR_VAR 0 4
57609: PUSH
57610: LD_INT 0
57612: ST_TO_ADDR
// for i := 0 to 5 do
57613: LD_ADDR_VAR 0 5
57617: PUSH
57618: DOUBLE
57619: LD_INT 0
57621: DEC
57622: ST_TO_ADDR
57623: LD_INT 5
57625: PUSH
57626: FOR_TO
57627: IFFALSE 57694
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
57629: LD_VAR 0 1
57633: PPUSH
57634: LD_VAR 0 5
57638: PPUSH
57639: LD_VAR 0 6
57643: PPUSH
57644: CALL_OW 272
57648: PPUSH
57649: LD_VAR 0 2
57653: PPUSH
57654: LD_VAR 0 5
57658: PPUSH
57659: LD_VAR 0 6
57663: PPUSH
57664: CALL_OW 273
57668: PPUSH
57669: LD_VAR 0 3
57673: PPUSH
57674: CALL_OW 309
57678: IFFALSE 57692
// begin result := true ;
57680: LD_ADDR_VAR 0 4
57684: PUSH
57685: LD_INT 1
57687: ST_TO_ADDR
// exit ;
57688: POP
57689: POP
57690: GO 57696
// end ;
57692: GO 57626
57694: POP
57695: POP
// end ;
57696: LD_VAR 0 4
57700: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
57701: LD_INT 0
57703: PPUSH
57704: PPUSH
57705: PPUSH
// if btype = b_depot then
57706: LD_VAR 0 2
57710: PUSH
57711: LD_INT 0
57713: EQUAL
57714: IFFALSE 57726
// begin result := true ;
57716: LD_ADDR_VAR 0 3
57720: PUSH
57721: LD_INT 1
57723: ST_TO_ADDR
// exit ;
57724: GO 57846
// end ; pom := GetBase ( depot ) ;
57726: LD_ADDR_VAR 0 4
57730: PUSH
57731: LD_VAR 0 1
57735: PPUSH
57736: CALL_OW 274
57740: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
57741: LD_ADDR_VAR 0 5
57745: PUSH
57746: LD_VAR 0 2
57750: PPUSH
57751: LD_VAR 0 1
57755: PPUSH
57756: CALL_OW 248
57760: PPUSH
57761: CALL_OW 450
57765: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
57766: LD_ADDR_VAR 0 3
57770: PUSH
57771: LD_VAR 0 4
57775: PPUSH
57776: LD_INT 1
57778: PPUSH
57779: CALL_OW 275
57783: PUSH
57784: LD_VAR 0 5
57788: PUSH
57789: LD_INT 1
57791: ARRAY
57792: GREATEREQUAL
57793: IFFALSE 57819
57795: PUSH
57796: LD_VAR 0 4
57800: PPUSH
57801: LD_INT 2
57803: PPUSH
57804: CALL_OW 275
57808: PUSH
57809: LD_VAR 0 5
57813: PUSH
57814: LD_INT 2
57816: ARRAY
57817: GREATEREQUAL
57818: AND
57819: IFFALSE 57845
57821: PUSH
57822: LD_VAR 0 4
57826: PPUSH
57827: LD_INT 3
57829: PPUSH
57830: CALL_OW 275
57834: PUSH
57835: LD_VAR 0 5
57839: PUSH
57840: LD_INT 3
57842: ARRAY
57843: GREATEREQUAL
57844: AND
57845: ST_TO_ADDR
// end ;
57846: LD_VAR 0 3
57850: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
57851: LD_INT 0
57853: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
57854: LD_VAR 0 1
57858: PPUSH
57859: LD_VAR 0 2
57863: PPUSH
57864: LD_INT 0
57866: PPUSH
57867: LD_INT 0
57869: PPUSH
57870: LD_INT 1
57872: PPUSH
57873: LD_INT 0
57875: PPUSH
57876: CALL_OW 587
// end ;
57880: LD_VAR 0 3
57884: RET
// export function CenterOnNow ( unit ) ; begin
57885: LD_INT 0
57887: PPUSH
// result := IsInUnit ( unit ) ;
57888: LD_ADDR_VAR 0 2
57892: PUSH
57893: LD_VAR 0 1
57897: PPUSH
57898: CALL_OW 310
57902: ST_TO_ADDR
// if not result then
57903: LD_VAR 0 2
57907: NOT
57908: IFFALSE 57920
// result := unit ;
57910: LD_ADDR_VAR 0 2
57914: PUSH
57915: LD_VAR 0 1
57919: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
57920: LD_VAR 0 1
57924: PPUSH
57925: CALL_OW 87
// end ;
57929: LD_VAR 0 2
57933: RET
// export function ComMoveHex ( unit , hex ) ; begin
57934: LD_INT 0
57936: PPUSH
// if not hex then
57937: LD_VAR 0 2
57941: NOT
57942: IFFALSE 57946
// exit ;
57944: GO 57999
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
57946: LD_VAR 0 2
57950: PUSH
57951: LD_INT 1
57953: ARRAY
57954: PPUSH
57955: LD_VAR 0 2
57959: PUSH
57960: LD_INT 2
57962: ARRAY
57963: PPUSH
57964: CALL_OW 428
57968: IFFALSE 57972
// exit ;
57970: GO 57999
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
57972: LD_VAR 0 1
57976: PPUSH
57977: LD_VAR 0 2
57981: PUSH
57982: LD_INT 1
57984: ARRAY
57985: PPUSH
57986: LD_VAR 0 2
57990: PUSH
57991: LD_INT 2
57993: ARRAY
57994: PPUSH
57995: CALL_OW 111
// end ;
57999: LD_VAR 0 3
58003: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
58004: LD_INT 0
58006: PPUSH
58007: PPUSH
58008: PPUSH
// if not unit or not enemy then
58009: LD_VAR 0 1
58013: NOT
58014: IFTRUE 58023
58016: PUSH
58017: LD_VAR 0 2
58021: NOT
58022: OR
58023: IFFALSE 58027
// exit ;
58025: GO 58153
// x := GetX ( enemy ) ;
58027: LD_ADDR_VAR 0 4
58031: PUSH
58032: LD_VAR 0 2
58036: PPUSH
58037: CALL_OW 250
58041: ST_TO_ADDR
// y := GetY ( enemy ) ;
58042: LD_ADDR_VAR 0 5
58046: PUSH
58047: LD_VAR 0 2
58051: PPUSH
58052: CALL_OW 251
58056: ST_TO_ADDR
// if ValidHex ( x , y ) then
58057: LD_VAR 0 4
58061: PPUSH
58062: LD_VAR 0 5
58066: PPUSH
58067: CALL_OW 488
58071: IFFALSE 58153
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
58073: LD_VAR 0 2
58077: PPUSH
58078: CALL_OW 247
58082: PUSH
58083: LD_INT 3
58085: PUSH
58086: LD_INT 2
58088: PUSH
58089: EMPTY
58090: LIST
58091: LIST
58092: IN
58093: IFTRUE 58116
58095: PUSH
58096: LD_VAR 0 1
58100: PPUSH
58101: CALL_OW 255
58105: PPUSH
58106: LD_VAR 0 2
58110: PPUSH
58111: CALL_OW 292
58115: OR
58116: IFFALSE 58134
// ComAttackUnit ( unit , enemy ) else
58118: LD_VAR 0 1
58122: PPUSH
58123: LD_VAR 0 2
58127: PPUSH
58128: CALL_OW 115
58132: GO 58153
// ComAgressiveMove ( unit , x , y ) ;
58134: LD_VAR 0 1
58138: PPUSH
58139: LD_VAR 0 4
58143: PPUSH
58144: LD_VAR 0 5
58148: PPUSH
58149: CALL_OW 114
// end ;
58153: LD_VAR 0 3
58157: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
58158: LD_INT 0
58160: PPUSH
58161: PPUSH
58162: PPUSH
// list := AreaToList ( area , 0 ) ;
58163: LD_ADDR_VAR 0 5
58167: PUSH
58168: LD_VAR 0 1
58172: PPUSH
58173: LD_INT 0
58175: PPUSH
58176: CALL_OW 517
58180: ST_TO_ADDR
// if not list then
58181: LD_VAR 0 5
58185: NOT
58186: IFFALSE 58190
// exit ;
58188: GO 58320
// if all then
58190: LD_VAR 0 2
58194: IFFALSE 58282
// begin for i := 1 to list [ 1 ] do
58196: LD_ADDR_VAR 0 4
58200: PUSH
58201: DOUBLE
58202: LD_INT 1
58204: DEC
58205: ST_TO_ADDR
58206: LD_VAR 0 5
58210: PUSH
58211: LD_INT 1
58213: ARRAY
58214: PUSH
58215: FOR_TO
58216: IFFALSE 58278
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
58218: LD_ADDR_VAR 0 3
58222: PUSH
58223: LD_VAR 0 3
58227: PPUSH
58228: LD_VAR 0 3
58232: PUSH
58233: LD_INT 1
58235: PLUS
58236: PPUSH
58237: LD_VAR 0 5
58241: PUSH
58242: LD_INT 1
58244: ARRAY
58245: PUSH
58246: LD_VAR 0 4
58250: ARRAY
58251: PUSH
58252: LD_VAR 0 5
58256: PUSH
58257: LD_INT 2
58259: ARRAY
58260: PUSH
58261: LD_VAR 0 4
58265: ARRAY
58266: PUSH
58267: EMPTY
58268: LIST
58269: LIST
58270: PPUSH
58271: CALL_OW 1
58275: ST_TO_ADDR
58276: GO 58215
58278: POP
58279: POP
// exit ;
58280: GO 58320
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
58282: LD_ADDR_VAR 0 3
58286: PUSH
58287: LD_VAR 0 5
58291: PUSH
58292: LD_INT 1
58294: ARRAY
58295: PUSH
58296: LD_INT 1
58298: ARRAY
58299: PUSH
58300: LD_VAR 0 5
58304: PUSH
58305: LD_INT 2
58307: ARRAY
58308: PUSH
58309: LD_INT 1
58311: ARRAY
58312: PUSH
58313: EMPTY
58314: LIST
58315: LIST
58316: PUSH
58317: EMPTY
58318: LIST
58319: ST_TO_ADDR
// end ;
58320: LD_VAR 0 3
58324: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
58325: LD_INT 0
58327: PPUSH
58328: PPUSH
// list := AreaToList ( area , 0 ) ;
58329: LD_ADDR_VAR 0 4
58333: PUSH
58334: LD_VAR 0 1
58338: PPUSH
58339: LD_INT 0
58341: PPUSH
58342: CALL_OW 517
58346: ST_TO_ADDR
// if not list then
58347: LD_VAR 0 4
58351: NOT
58352: IFFALSE 58356
// exit ;
58354: GO 58397
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
58356: LD_ADDR_VAR 0 3
58360: PUSH
58361: LD_VAR 0 4
58365: PUSH
58366: LD_INT 1
58368: ARRAY
58369: PUSH
58370: LD_INT 1
58372: ARRAY
58373: PUSH
58374: LD_VAR 0 4
58378: PUSH
58379: LD_INT 2
58381: ARRAY
58382: PUSH
58383: LD_INT 1
58385: ARRAY
58386: PUSH
58387: LD_VAR 0 2
58391: PUSH
58392: EMPTY
58393: LIST
58394: LIST
58395: LIST
58396: ST_TO_ADDR
// end ;
58397: LD_VAR 0 3
58401: RET
// export function First ( array ) ; begin
58402: LD_INT 0
58404: PPUSH
// if not array then
58405: LD_VAR 0 1
58409: NOT
58410: IFFALSE 58414
// exit ;
58412: GO 58428
// result := array [ 1 ] ;
58414: LD_ADDR_VAR 0 2
58418: PUSH
58419: LD_VAR 0 1
58423: PUSH
58424: LD_INT 1
58426: ARRAY
58427: ST_TO_ADDR
// end ;
58428: LD_VAR 0 2
58432: RET
// export function Last ( array ) ; begin
58433: LD_INT 0
58435: PPUSH
// if not array then
58436: LD_VAR 0 1
58440: NOT
58441: IFFALSE 58445
// exit ;
58443: GO 58461
// result := array [ array ] ;
58445: LD_ADDR_VAR 0 2
58449: PUSH
58450: LD_VAR 0 1
58454: PUSH
58455: LD_VAR 0 1
58459: ARRAY
58460: ST_TO_ADDR
// end ;
58461: LD_VAR 0 2
58465: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
58466: LD_INT 0
58468: PPUSH
58469: PPUSH
// result := [ ] ;
58470: LD_ADDR_VAR 0 5
58474: PUSH
58475: EMPTY
58476: ST_TO_ADDR
// if not array then
58477: LD_VAR 0 1
58481: NOT
58482: IFFALSE 58486
// exit ;
58484: GO 58598
// for i := 1 to array do
58486: LD_ADDR_VAR 0 6
58490: PUSH
58491: DOUBLE
58492: LD_INT 1
58494: DEC
58495: ST_TO_ADDR
58496: LD_VAR 0 1
58500: PUSH
58501: FOR_TO
58502: IFFALSE 58596
// if array [ i ] [ index ] = value then
58504: LD_VAR 0 1
58508: PUSH
58509: LD_VAR 0 6
58513: ARRAY
58514: PUSH
58515: LD_VAR 0 2
58519: ARRAY
58520: PUSH
58521: LD_VAR 0 3
58525: EQUAL
58526: IFFALSE 58594
// begin if indexColumn then
58528: LD_VAR 0 4
58532: IFFALSE 58568
// result := Join ( result , array [ i ] [ indexColumn ] ) else
58534: LD_ADDR_VAR 0 5
58538: PUSH
58539: LD_VAR 0 5
58543: PPUSH
58544: LD_VAR 0 1
58548: PUSH
58549: LD_VAR 0 6
58553: ARRAY
58554: PUSH
58555: LD_VAR 0 4
58559: ARRAY
58560: PPUSH
58561: CALL 53606 0 2
58565: ST_TO_ADDR
58566: GO 58594
// result := Join ( result , array [ i ] ) ;
58568: LD_ADDR_VAR 0 5
58572: PUSH
58573: LD_VAR 0 5
58577: PPUSH
58578: LD_VAR 0 1
58582: PUSH
58583: LD_VAR 0 6
58587: ARRAY
58588: PPUSH
58589: CALL 53606 0 2
58593: ST_TO_ADDR
// end ;
58594: GO 58501
58596: POP
58597: POP
// end ;
58598: LD_VAR 0 5
58602: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
58603: LD_INT 0
58605: PPUSH
// if not vehicles or not parkingPoint then
58606: LD_VAR 0 1
58610: NOT
58611: IFTRUE 58620
58613: PUSH
58614: LD_VAR 0 2
58618: NOT
58619: OR
58620: IFFALSE 58624
// exit ;
58622: GO 58722
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
58624: LD_ADDR_VAR 0 1
58628: PUSH
58629: LD_VAR 0 1
58633: PPUSH
58634: LD_INT 50
58636: PUSH
58637: EMPTY
58638: LIST
58639: PUSH
58640: LD_INT 3
58642: PUSH
58643: LD_INT 92
58645: PUSH
58646: LD_VAR 0 2
58650: PUSH
58651: LD_INT 1
58653: ARRAY
58654: PUSH
58655: LD_VAR 0 2
58659: PUSH
58660: LD_INT 2
58662: ARRAY
58663: PUSH
58664: LD_INT 8
58666: PUSH
58667: EMPTY
58668: LIST
58669: LIST
58670: LIST
58671: LIST
58672: PUSH
58673: EMPTY
58674: LIST
58675: LIST
58676: PUSH
58677: EMPTY
58678: LIST
58679: LIST
58680: PPUSH
58681: CALL_OW 72
58685: ST_TO_ADDR
// if not vehicles then
58686: LD_VAR 0 1
58690: NOT
58691: IFFALSE 58695
// exit ;
58693: GO 58722
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
58695: LD_VAR 0 1
58699: PPUSH
58700: LD_VAR 0 2
58704: PUSH
58705: LD_INT 1
58707: ARRAY
58708: PPUSH
58709: LD_VAR 0 2
58713: PUSH
58714: LD_INT 2
58716: ARRAY
58717: PPUSH
58718: CALL_OW 111
// end ;
58722: LD_VAR 0 3
58726: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
58727: LD_INT 0
58729: PPUSH
58730: PPUSH
58731: PPUSH
// if not side or not area then
58732: LD_VAR 0 1
58736: NOT
58737: IFTRUE 58746
58739: PUSH
58740: LD_VAR 0 2
58744: NOT
58745: OR
58746: IFFALSE 58750
// exit ;
58748: GO 58869
// tmp := AreaToList ( area , 0 ) ;
58750: LD_ADDR_VAR 0 5
58754: PUSH
58755: LD_VAR 0 2
58759: PPUSH
58760: LD_INT 0
58762: PPUSH
58763: CALL_OW 517
58767: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
58768: LD_ADDR_VAR 0 4
58772: PUSH
58773: DOUBLE
58774: LD_INT 1
58776: DEC
58777: ST_TO_ADDR
58778: LD_VAR 0 5
58782: PUSH
58783: LD_INT 1
58785: ARRAY
58786: PUSH
58787: FOR_TO
58788: IFFALSE 58867
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
58790: LD_VAR 0 5
58794: PUSH
58795: LD_INT 1
58797: ARRAY
58798: PUSH
58799: LD_VAR 0 4
58803: ARRAY
58804: PPUSH
58805: LD_VAR 0 5
58809: PUSH
58810: LD_INT 2
58812: ARRAY
58813: PUSH
58814: LD_VAR 0 4
58818: ARRAY
58819: PPUSH
58820: CALL_OW 351
58824: IFFALSE 58865
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
58826: LD_VAR 0 5
58830: PUSH
58831: LD_INT 1
58833: ARRAY
58834: PUSH
58835: LD_VAR 0 4
58839: ARRAY
58840: PPUSH
58841: LD_VAR 0 5
58845: PUSH
58846: LD_INT 2
58848: ARRAY
58849: PUSH
58850: LD_VAR 0 4
58854: ARRAY
58855: PPUSH
58856: LD_VAR 0 1
58860: PPUSH
58861: CALL_OW 244
// end ;
58865: GO 58787
58867: POP
58868: POP
// end ;
58869: LD_VAR 0 3
58873: RET
// export function UniqueArray ( array ) ; var i ; begin
58874: LD_INT 0
58876: PPUSH
58877: PPUSH
// result := [ ] ;
58878: LD_ADDR_VAR 0 2
58882: PUSH
58883: EMPTY
58884: ST_TO_ADDR
// if not array then
58885: LD_VAR 0 1
58889: NOT
58890: IFFALSE 58894
// exit ;
58892: GO 58955
// for i := 1 to array do
58894: LD_ADDR_VAR 0 3
58898: PUSH
58899: DOUBLE
58900: LD_INT 1
58902: DEC
58903: ST_TO_ADDR
58904: LD_VAR 0 1
58908: PUSH
58909: FOR_TO
58910: IFFALSE 58953
// if not array [ i ] in result then
58912: LD_VAR 0 1
58916: PUSH
58917: LD_VAR 0 3
58921: ARRAY
58922: PUSH
58923: LD_VAR 0 2
58927: IN
58928: NOT
58929: IFFALSE 58951
// result := Join ( result , i ) ;
58931: LD_ADDR_VAR 0 2
58935: PUSH
58936: LD_VAR 0 2
58940: PPUSH
58941: LD_VAR 0 3
58945: PPUSH
58946: CALL 53606 0 2
58950: ST_TO_ADDR
58951: GO 58909
58953: POP
58954: POP
// end ; end_of_file
58955: LD_VAR 0 2
58959: RET
// export function SOS_UnitDestroyed ( un ) ; begin
58960: LD_INT 0
58962: PPUSH
// ComRadiation ( un ) ;
58963: LD_VAR 0 1
58967: PPUSH
58968: CALL 60049 0 1
// end ;
58972: LD_VAR 0 2
58976: RET
// export function SOS_UnitKamikazed ( un ) ; begin
58977: LD_INT 0
58979: PPUSH
// ComRadiation ( un ) ;
58980: LD_VAR 0 1
58984: PPUSH
58985: CALL 60049 0 1
// end ;
58989: LD_VAR 0 2
58993: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
58994: LD_INT 0
58996: PPUSH
// end ;
58997: LD_VAR 0 4
59001: RET
// export function SOS_Command ( cmd ) ; begin
59002: LD_INT 0
59004: PPUSH
// end ;
59005: LD_VAR 0 2
59009: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
59010: LD_INT 0
59012: PPUSH
// end ;
59013: LD_VAR 0 6
59017: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
59018: LD_INT 0
59020: PPUSH
59021: PPUSH
59022: PPUSH
59023: PPUSH
// if not vehicle or not factory then
59024: LD_VAR 0 1
59028: NOT
59029: IFTRUE 59038
59031: PUSH
59032: LD_VAR 0 2
59036: NOT
59037: OR
59038: IFFALSE 59042
// exit ;
59040: GO 59624
// if not factoryWaypoints then
59042: LD_EXP 53
59046: NOT
59047: IFFALSE 59051
// exit ;
59049: GO 59624
// for i := 1 to Count ( factoryWaypoints ) do
59051: LD_ADDR_VAR 0 4
59055: PUSH
59056: DOUBLE
59057: LD_INT 1
59059: DEC
59060: ST_TO_ADDR
59061: LD_EXP 53
59065: PPUSH
59066: CALL 17674 0 1
59070: PUSH
59071: FOR_TO
59072: IFFALSE 59622
// if factoryWaypoints [ i ] [ 2 ] = factory then
59074: LD_EXP 53
59078: PUSH
59079: LD_VAR 0 4
59083: ARRAY
59084: PUSH
59085: LD_INT 2
59087: ARRAY
59088: PUSH
59089: LD_VAR 0 2
59093: EQUAL
59094: IFFALSE 59620
// begin if GetControl ( vehicle ) = control_manual then
59096: LD_VAR 0 1
59100: PPUSH
59101: CALL_OW 263
59105: PUSH
59106: LD_INT 1
59108: EQUAL
59109: IFFALSE 59473
// begin driver := IsDrivenBy ( vehicle ) ;
59111: LD_ADDR_VAR 0 5
59115: PUSH
59116: LD_VAR 0 1
59120: PPUSH
59121: CALL_OW 311
59125: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
59126: LD_VAR 0 5
59130: PUSH
59131: LD_EXP 54
59135: IN
59136: IFTRUE 59150
59138: PUSH
59139: LD_VAR 0 1
59143: PUSH
59144: LD_EXP 54
59148: IN
59149: OR
59150: IFFALSE 59156
// exit ;
59152: POP
59153: POP
59154: GO 59624
// if not HasTask ( driver ) then
59156: LD_VAR 0 5
59160: PPUSH
59161: CALL_OW 314
59165: NOT
59166: IFFALSE 59471
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
59168: LD_ADDR_EXP 54
59172: PUSH
59173: LD_EXP 54
59177: PPUSH
59178: LD_VAR 0 5
59182: PPUSH
59183: CALL 53606 0 2
59187: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
59188: LD_ADDR_EXP 54
59192: PUSH
59193: LD_EXP 54
59197: PPUSH
59198: LD_VAR 0 1
59202: PPUSH
59203: CALL 53606 0 2
59207: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
59208: LD_ADDR_VAR 0 6
59212: PUSH
59213: LD_EXP 53
59217: PUSH
59218: LD_VAR 0 4
59222: ARRAY
59223: PUSH
59224: LD_INT 3
59226: ARRAY
59227: PPUSH
59228: LD_EXP 53
59232: PUSH
59233: LD_VAR 0 4
59237: ARRAY
59238: PUSH
59239: LD_INT 4
59241: ARRAY
59242: PPUSH
59243: CALL_OW 428
59247: ST_TO_ADDR
// if hex then
59248: LD_VAR 0 6
59252: IFFALSE 59270
// ComMoveUnit ( driver , hex ) else
59254: LD_VAR 0 5
59258: PPUSH
59259: LD_VAR 0 6
59263: PPUSH
59264: CALL_OW 112
59268: GO 59354
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
59270: LD_VAR 0 1
59274: PPUSH
59275: LD_EXP 53
59279: PUSH
59280: LD_VAR 0 4
59284: ARRAY
59285: PUSH
59286: LD_INT 3
59288: ARRAY
59289: PPUSH
59290: LD_EXP 53
59294: PUSH
59295: LD_VAR 0 4
59299: ARRAY
59300: PUSH
59301: LD_INT 4
59303: ARRAY
59304: PPUSH
59305: CALL_OW 297
59309: PUSH
59310: LD_INT 0
59312: GREATER
59313: IFFALSE 59354
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
59315: LD_VAR 0 5
59319: PPUSH
59320: LD_EXP 53
59324: PUSH
59325: LD_VAR 0 4
59329: ARRAY
59330: PUSH
59331: LD_INT 3
59333: ARRAY
59334: PPUSH
59335: LD_EXP 53
59339: PUSH
59340: LD_VAR 0 4
59344: ARRAY
59345: PUSH
59346: LD_INT 4
59348: ARRAY
59349: PPUSH
59350: CALL_OW 111
// AddComExitVehicle ( driver ) ;
59354: LD_VAR 0 5
59358: PPUSH
59359: CALL_OW 181
// if Multiplayer then
59363: LD_OWVAR 4
59367: IFFALSE 59416
// begin repeat wait ( 10 ) ;
59369: LD_INT 10
59371: PPUSH
59372: CALL_OW 67
// until not IsInUnit ( driver ) ;
59376: LD_VAR 0 5
59380: PPUSH
59381: CALL_OW 310
59385: NOT
59386: IFFALSE 59369
// if not HasTask ( driver ) then
59388: LD_VAR 0 5
59392: PPUSH
59393: CALL_OW 314
59397: NOT
59398: IFFALSE 59414
// ComEnterUnit ( driver , factory ) ;
59400: LD_VAR 0 5
59404: PPUSH
59405: LD_VAR 0 2
59409: PPUSH
59410: CALL_OW 120
// end else
59414: GO 59430
// AddComEnterUnit ( driver , factory ) ;
59416: LD_VAR 0 5
59420: PPUSH
59421: LD_VAR 0 2
59425: PPUSH
59426: CALL_OW 180
// wait ( 0 0$1 ) ;
59430: LD_INT 35
59432: PPUSH
59433: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
59437: LD_ADDR_EXP 54
59441: PUSH
59442: LD_EXP 54
59446: PUSH
59447: LD_VAR 0 5
59451: DIFF
59452: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
59453: LD_ADDR_EXP 54
59457: PUSH
59458: LD_EXP 54
59462: PUSH
59463: LD_VAR 0 1
59467: DIFF
59468: ST_TO_ADDR
// break ;
59469: GO 59622
// end ; end else
59471: GO 59620
// if GetControl ( vehicle ) = control_remote then
59473: LD_VAR 0 1
59477: PPUSH
59478: CALL_OW 263
59482: PUSH
59483: LD_INT 2
59485: EQUAL
59486: IFFALSE 59572
// begin wait ( 0 0$2 ) ;
59488: LD_INT 70
59490: PPUSH
59491: CALL_OW 67
// repeat wait ( 10 ) ;
59495: LD_INT 10
59497: PPUSH
59498: CALL_OW 67
// Connect ( vehicle ) ;
59502: LD_VAR 0 1
59506: PPUSH
59507: CALL 23918 0 1
// until IsControledBy ( vehicle ) ;
59511: LD_VAR 0 1
59515: PPUSH
59516: CALL_OW 312
59520: IFFALSE 59495
// wait ( 10 ) ;
59522: LD_INT 10
59524: PPUSH
59525: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
59529: LD_VAR 0 1
59533: PPUSH
59534: LD_EXP 53
59538: PUSH
59539: LD_VAR 0 4
59543: ARRAY
59544: PUSH
59545: LD_INT 3
59547: ARRAY
59548: PPUSH
59549: LD_EXP 53
59553: PUSH
59554: LD_VAR 0 4
59558: ARRAY
59559: PUSH
59560: LD_INT 4
59562: ARRAY
59563: PPUSH
59564: CALL_OW 111
// break ;
59568: GO 59622
// end else
59570: GO 59620
// begin wait ( 0 0$3 ) ;
59572: LD_INT 105
59574: PPUSH
59575: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
59579: LD_VAR 0 1
59583: PPUSH
59584: LD_EXP 53
59588: PUSH
59589: LD_VAR 0 4
59593: ARRAY
59594: PUSH
59595: LD_INT 3
59597: ARRAY
59598: PPUSH
59599: LD_EXP 53
59603: PUSH
59604: LD_VAR 0 4
59608: ARRAY
59609: PUSH
59610: LD_INT 4
59612: ARRAY
59613: PPUSH
59614: CALL_OW 111
// break ;
59618: GO 59622
// end ; end ;
59620: GO 59071
59622: POP
59623: POP
// end ;
59624: LD_VAR 0 3
59628: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
59629: LD_INT 0
59631: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
59632: LD_VAR 0 1
59636: PUSH
59637: LD_INT 250
59639: EQUAL
59640: IFFALSE 59657
59642: PUSH
59643: LD_VAR 0 2
59647: PPUSH
59648: CALL_OW 264
59652: PUSH
59653: LD_INT 81
59655: EQUAL
59656: AND
59657: IFFALSE 59678
// MinerPlaceMine ( unit , x , y ) ;
59659: LD_VAR 0 2
59663: PPUSH
59664: LD_VAR 0 4
59668: PPUSH
59669: LD_VAR 0 5
59673: PPUSH
59674: CALL 62810 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
59678: LD_VAR 0 1
59682: PUSH
59683: LD_INT 251
59685: EQUAL
59686: IFFALSE 59703
59688: PUSH
59689: LD_VAR 0 2
59693: PPUSH
59694: CALL_OW 264
59698: PUSH
59699: LD_INT 81
59701: EQUAL
59702: AND
59703: IFFALSE 59724
// MinerDetonateMine ( unit , x , y ) ;
59705: LD_VAR 0 2
59709: PPUSH
59710: LD_VAR 0 4
59714: PPUSH
59715: LD_VAR 0 5
59719: PPUSH
59720: CALL 63089 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
59724: LD_VAR 0 1
59728: PUSH
59729: LD_INT 252
59731: EQUAL
59732: IFFALSE 59749
59734: PUSH
59735: LD_VAR 0 2
59739: PPUSH
59740: CALL_OW 264
59744: PUSH
59745: LD_INT 81
59747: EQUAL
59748: AND
59749: IFFALSE 59770
// MinerCreateMinefield ( unit , x , y ) ;
59751: LD_VAR 0 2
59755: PPUSH
59756: LD_VAR 0 4
59760: PPUSH
59761: LD_VAR 0 5
59765: PPUSH
59766: CALL 63508 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
59770: LD_VAR 0 1
59774: PUSH
59775: LD_INT 253
59777: EQUAL
59778: IFFALSE 59795
59780: PUSH
59781: LD_VAR 0 2
59785: PPUSH
59786: CALL_OW 257
59790: PUSH
59791: LD_INT 5
59793: EQUAL
59794: AND
59795: IFFALSE 59816
// ComBinocular ( unit , x , y ) ;
59797: LD_VAR 0 2
59801: PPUSH
59802: LD_VAR 0 4
59806: PPUSH
59807: LD_VAR 0 5
59811: PPUSH
59812: CALL 63883 0 3
// if selectedUnit then
59816: LD_VAR 0 3
59820: IFFALSE 59880
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
59822: LD_VAR 0 1
59826: PUSH
59827: LD_INT 254
59829: EQUAL
59830: IFFALSE 59847
59832: PUSH
59833: LD_VAR 0 2
59837: PPUSH
59838: CALL_OW 264
59842: PUSH
59843: LD_INT 99
59845: EQUAL
59846: AND
59847: IFFALSE 59864
59849: PUSH
59850: LD_VAR 0 3
59854: PPUSH
59855: CALL_OW 263
59859: PUSH
59860: LD_INT 3
59862: EQUAL
59863: AND
59864: IFFALSE 59880
// HackDestroyVehicle ( unit , selectedUnit ) ;
59866: LD_VAR 0 2
59870: PPUSH
59871: LD_VAR 0 3
59875: PPUSH
59876: CALL 62170 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
59880: LD_VAR 0 1
59884: PUSH
59885: LD_INT 255
59887: EQUAL
59888: IFFALSE 59912
59890: PUSH
59891: LD_VAR 0 2
59895: PPUSH
59896: CALL_OW 264
59900: PUSH
59901: LD_INT 14
59903: PUSH
59904: LD_INT 53
59906: PUSH
59907: EMPTY
59908: LIST
59909: LIST
59910: IN
59911: AND
59912: IFFALSE 59930
59914: PUSH
59915: LD_VAR 0 4
59919: PPUSH
59920: LD_VAR 0 5
59924: PPUSH
59925: CALL_OW 488
59929: AND
59930: IFFALSE 59954
// CutTreeXYR ( unit , x , y , 12 ) ;
59932: LD_VAR 0 2
59936: PPUSH
59937: LD_VAR 0 4
59941: PPUSH
59942: LD_VAR 0 5
59946: PPUSH
59947: LD_INT 12
59949: PPUSH
59950: CALL 60145 0 4
// if cmd = 256 then
59954: LD_VAR 0 1
59958: PUSH
59959: LD_INT 256
59961: EQUAL
59962: IFFALSE 59983
// SetFactoryWaypoint ( unit , x , y ) ;
59964: LD_VAR 0 2
59968: PPUSH
59969: LD_VAR 0 4
59973: PPUSH
59974: LD_VAR 0 5
59978: PPUSH
59979: CALL 65042 0 3
// if cmd = 257 then
59983: LD_VAR 0 1
59987: PUSH
59988: LD_INT 257
59990: EQUAL
59991: IFFALSE 60012
// SetWarehouseGatheringPoint ( unit , x , y ) ;
59993: LD_VAR 0 2
59997: PPUSH
59998: LD_VAR 0 4
60002: PPUSH
60003: LD_VAR 0 5
60007: PPUSH
60008: CALL 65538 0 3
// if cmd = 258 then
60012: LD_VAR 0 1
60016: PUSH
60017: LD_INT 258
60019: EQUAL
60020: IFFALSE 60044
// BurnTreeXYR ( unit , x , y , 8 ) ;
60022: LD_VAR 0 2
60026: PPUSH
60027: LD_VAR 0 4
60031: PPUSH
60032: LD_VAR 0 5
60036: PPUSH
60037: LD_INT 8
60039: PPUSH
60040: CALL 60545 0 4
// end ;
60044: LD_VAR 0 6
60048: RET
// export function ComRadiation ( un ) ; var eff ; begin
60049: LD_INT 0
60051: PPUSH
60052: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
60053: LD_VAR 0 1
60057: PPUSH
60058: CALL_OW 264
60062: PUSH
60063: LD_INT 91
60065: NONEQUAL
60066: IFFALSE 60070
// exit ;
60068: GO 60140
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
60070: LD_INT 68
60072: PPUSH
60073: LD_VAR 0 1
60077: PPUSH
60078: CALL_OW 255
60082: PPUSH
60083: CALL_OW 321
60087: PUSH
60088: LD_INT 2
60090: EQUAL
60091: IFFALSE 60103
// eff := 50 else
60093: LD_ADDR_VAR 0 3
60097: PUSH
60098: LD_INT 50
60100: ST_TO_ADDR
60101: GO 60111
// eff := 25 ;
60103: LD_ADDR_VAR 0 3
60107: PUSH
60108: LD_INT 25
60110: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
60111: LD_VAR 0 1
60115: PPUSH
60116: CALL_OW 250
60120: PPUSH
60121: LD_VAR 0 1
60125: PPUSH
60126: CALL_OW 251
60130: PPUSH
60131: LD_VAR 0 3
60135: PPUSH
60136: CALL_OW 495
// end ;
60140: LD_VAR 0 2
60144: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
60145: LD_INT 0
60147: PPUSH
60148: PPUSH
60149: PPUSH
60150: PPUSH
60151: PPUSH
60152: PPUSH
60153: PPUSH
60154: PPUSH
60155: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
60156: LD_VAR 0 1
60160: PPUSH
60161: CALL_OW 302
60165: NOT
60166: IFTRUE 60185
60168: PUSH
60169: LD_VAR 0 2
60173: PPUSH
60174: LD_VAR 0 3
60178: PPUSH
60179: CALL_OW 488
60183: NOT
60184: OR
60185: IFTRUE 60194
60187: PUSH
60188: LD_VAR 0 4
60192: NOT
60193: OR
60194: IFFALSE 60198
// exit ;
60196: GO 60540
// list := [ ] ;
60198: LD_ADDR_VAR 0 13
60202: PUSH
60203: EMPTY
60204: ST_TO_ADDR
// if x - r < 0 then
60205: LD_VAR 0 2
60209: PUSH
60210: LD_VAR 0 4
60214: MINUS
60215: PUSH
60216: LD_INT 0
60218: LESS
60219: IFFALSE 60231
// min_x := 0 else
60221: LD_ADDR_VAR 0 7
60225: PUSH
60226: LD_INT 0
60228: ST_TO_ADDR
60229: GO 60247
// min_x := x - r ;
60231: LD_ADDR_VAR 0 7
60235: PUSH
60236: LD_VAR 0 2
60240: PUSH
60241: LD_VAR 0 4
60245: MINUS
60246: ST_TO_ADDR
// if y - r < 0 then
60247: LD_VAR 0 3
60251: PUSH
60252: LD_VAR 0 4
60256: MINUS
60257: PUSH
60258: LD_INT 0
60260: LESS
60261: IFFALSE 60273
// min_y := 0 else
60263: LD_ADDR_VAR 0 8
60267: PUSH
60268: LD_INT 0
60270: ST_TO_ADDR
60271: GO 60289
// min_y := y - r ;
60273: LD_ADDR_VAR 0 8
60277: PUSH
60278: LD_VAR 0 3
60282: PUSH
60283: LD_VAR 0 4
60287: MINUS
60288: ST_TO_ADDR
// max_x := x + r ;
60289: LD_ADDR_VAR 0 9
60293: PUSH
60294: LD_VAR 0 2
60298: PUSH
60299: LD_VAR 0 4
60303: PLUS
60304: ST_TO_ADDR
// max_y := y + r ;
60305: LD_ADDR_VAR 0 10
60309: PUSH
60310: LD_VAR 0 3
60314: PUSH
60315: LD_VAR 0 4
60319: PLUS
60320: ST_TO_ADDR
// for _x = min_x to max_x do
60321: LD_ADDR_VAR 0 11
60325: PUSH
60326: DOUBLE
60327: LD_VAR 0 7
60331: DEC
60332: ST_TO_ADDR
60333: LD_VAR 0 9
60337: PUSH
60338: FOR_TO
60339: IFFALSE 60458
// for _y = min_y to max_y do
60341: LD_ADDR_VAR 0 12
60345: PUSH
60346: DOUBLE
60347: LD_VAR 0 8
60351: DEC
60352: ST_TO_ADDR
60353: LD_VAR 0 10
60357: PUSH
60358: FOR_TO
60359: IFFALSE 60454
// begin if not ValidHex ( _x , _y ) then
60361: LD_VAR 0 11
60365: PPUSH
60366: LD_VAR 0 12
60370: PPUSH
60371: CALL_OW 488
60375: NOT
60376: IFFALSE 60380
// continue ;
60378: GO 60358
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
60380: LD_VAR 0 11
60384: PPUSH
60385: LD_VAR 0 12
60389: PPUSH
60390: CALL_OW 351
60394: IFFALSE 60412
60396: PUSH
60397: LD_VAR 0 11
60401: PPUSH
60402: LD_VAR 0 12
60406: PPUSH
60407: CALL_OW 554
60411: AND
60412: IFFALSE 60452
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
60414: LD_ADDR_VAR 0 13
60418: PUSH
60419: LD_VAR 0 13
60423: PPUSH
60424: LD_VAR 0 13
60428: PUSH
60429: LD_INT 1
60431: PLUS
60432: PPUSH
60433: LD_VAR 0 11
60437: PUSH
60438: LD_VAR 0 12
60442: PUSH
60443: EMPTY
60444: LIST
60445: LIST
60446: PPUSH
60447: CALL_OW 2
60451: ST_TO_ADDR
// end ;
60452: GO 60358
60454: POP
60455: POP
60456: GO 60338
60458: POP
60459: POP
// if not list then
60460: LD_VAR 0 13
60464: NOT
60465: IFFALSE 60469
// exit ;
60467: GO 60540
// for i in list do
60469: LD_ADDR_VAR 0 6
60473: PUSH
60474: LD_VAR 0 13
60478: PUSH
60479: FOR_IN
60480: IFFALSE 60538
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
60482: LD_VAR 0 1
60486: PPUSH
60487: LD_STRING M
60489: PUSH
60490: LD_VAR 0 6
60494: PUSH
60495: LD_INT 1
60497: ARRAY
60498: PUSH
60499: LD_VAR 0 6
60503: PUSH
60504: LD_INT 2
60506: ARRAY
60507: PUSH
60508: LD_INT 0
60510: PUSH
60511: LD_INT 0
60513: PUSH
60514: LD_INT 0
60516: PUSH
60517: LD_INT 0
60519: PUSH
60520: EMPTY
60521: LIST
60522: LIST
60523: LIST
60524: LIST
60525: LIST
60526: LIST
60527: LIST
60528: PUSH
60529: EMPTY
60530: LIST
60531: PPUSH
60532: CALL_OW 447
60536: GO 60479
60538: POP
60539: POP
// end ;
60540: LD_VAR 0 5
60544: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
60545: LD_INT 0
60547: PPUSH
60548: PPUSH
60549: PPUSH
60550: PPUSH
60551: PPUSH
60552: PPUSH
60553: PPUSH
60554: PPUSH
60555: PPUSH
60556: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
60557: LD_VAR 0 1
60561: PPUSH
60562: CALL_OW 302
60566: NOT
60567: IFTRUE 60586
60569: PUSH
60570: LD_VAR 0 2
60574: PPUSH
60575: LD_VAR 0 3
60579: PPUSH
60580: CALL_OW 488
60584: NOT
60585: OR
60586: IFTRUE 60595
60588: PUSH
60589: LD_VAR 0 4
60593: NOT
60594: OR
60595: IFFALSE 60599
// exit ;
60597: GO 61116
// list := [ ] ;
60599: LD_ADDR_VAR 0 13
60603: PUSH
60604: EMPTY
60605: ST_TO_ADDR
// if x - r < 0 then
60606: LD_VAR 0 2
60610: PUSH
60611: LD_VAR 0 4
60615: MINUS
60616: PUSH
60617: LD_INT 0
60619: LESS
60620: IFFALSE 60632
// min_x := 0 else
60622: LD_ADDR_VAR 0 7
60626: PUSH
60627: LD_INT 0
60629: ST_TO_ADDR
60630: GO 60648
// min_x := x - r ;
60632: LD_ADDR_VAR 0 7
60636: PUSH
60637: LD_VAR 0 2
60641: PUSH
60642: LD_VAR 0 4
60646: MINUS
60647: ST_TO_ADDR
// if y - r < 0 then
60648: LD_VAR 0 3
60652: PUSH
60653: LD_VAR 0 4
60657: MINUS
60658: PUSH
60659: LD_INT 0
60661: LESS
60662: IFFALSE 60674
// min_y := 0 else
60664: LD_ADDR_VAR 0 8
60668: PUSH
60669: LD_INT 0
60671: ST_TO_ADDR
60672: GO 60690
// min_y := y - r ;
60674: LD_ADDR_VAR 0 8
60678: PUSH
60679: LD_VAR 0 3
60683: PUSH
60684: LD_VAR 0 4
60688: MINUS
60689: ST_TO_ADDR
// max_x := x + r ;
60690: LD_ADDR_VAR 0 9
60694: PUSH
60695: LD_VAR 0 2
60699: PUSH
60700: LD_VAR 0 4
60704: PLUS
60705: ST_TO_ADDR
// max_y := y + r ;
60706: LD_ADDR_VAR 0 10
60710: PUSH
60711: LD_VAR 0 3
60715: PUSH
60716: LD_VAR 0 4
60720: PLUS
60721: ST_TO_ADDR
// for _x = min_x to max_x do
60722: LD_ADDR_VAR 0 11
60726: PUSH
60727: DOUBLE
60728: LD_VAR 0 7
60732: DEC
60733: ST_TO_ADDR
60734: LD_VAR 0 9
60738: PUSH
60739: FOR_TO
60740: IFFALSE 60859
// for _y = min_y to max_y do
60742: LD_ADDR_VAR 0 12
60746: PUSH
60747: DOUBLE
60748: LD_VAR 0 8
60752: DEC
60753: ST_TO_ADDR
60754: LD_VAR 0 10
60758: PUSH
60759: FOR_TO
60760: IFFALSE 60855
// begin if not ValidHex ( _x , _y ) then
60762: LD_VAR 0 11
60766: PPUSH
60767: LD_VAR 0 12
60771: PPUSH
60772: CALL_OW 488
60776: NOT
60777: IFFALSE 60781
// continue ;
60779: GO 60759
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
60781: LD_VAR 0 11
60785: PPUSH
60786: LD_VAR 0 12
60790: PPUSH
60791: CALL_OW 351
60795: IFFALSE 60813
60797: PUSH
60798: LD_VAR 0 11
60802: PPUSH
60803: LD_VAR 0 12
60807: PPUSH
60808: CALL_OW 554
60812: AND
60813: IFFALSE 60853
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
60815: LD_ADDR_VAR 0 13
60819: PUSH
60820: LD_VAR 0 13
60824: PPUSH
60825: LD_VAR 0 13
60829: PUSH
60830: LD_INT 1
60832: PLUS
60833: PPUSH
60834: LD_VAR 0 11
60838: PUSH
60839: LD_VAR 0 12
60843: PUSH
60844: EMPTY
60845: LIST
60846: LIST
60847: PPUSH
60848: CALL_OW 2
60852: ST_TO_ADDR
// end ;
60853: GO 60759
60855: POP
60856: POP
60857: GO 60739
60859: POP
60860: POP
// if not list then
60861: LD_VAR 0 13
60865: NOT
60866: IFFALSE 60870
// exit ;
60868: GO 61116
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
60870: LD_ADDR_VAR 0 13
60874: PUSH
60875: LD_VAR 0 1
60879: PPUSH
60880: LD_VAR 0 13
60884: PPUSH
60885: LD_INT 1
60887: PPUSH
60888: LD_INT 1
60890: PPUSH
60891: CALL 21046 0 4
60895: ST_TO_ADDR
// ComStop ( flame ) ;
60896: LD_VAR 0 1
60900: PPUSH
60901: CALL_OW 141
// for i in list do
60905: LD_ADDR_VAR 0 6
60909: PUSH
60910: LD_VAR 0 13
60914: PUSH
60915: FOR_IN
60916: IFFALSE 60947
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
60918: LD_VAR 0 1
60922: PPUSH
60923: LD_VAR 0 6
60927: PUSH
60928: LD_INT 1
60930: ARRAY
60931: PPUSH
60932: LD_VAR 0 6
60936: PUSH
60937: LD_INT 2
60939: ARRAY
60940: PPUSH
60941: CALL_OW 176
60945: GO 60915
60947: POP
60948: POP
// repeat wait ( 0 0$1 ) ;
60949: LD_INT 35
60951: PPUSH
60952: CALL_OW 67
// task := GetTaskList ( flame ) ;
60956: LD_ADDR_VAR 0 14
60960: PUSH
60961: LD_VAR 0 1
60965: PPUSH
60966: CALL_OW 437
60970: ST_TO_ADDR
// if not task then
60971: LD_VAR 0 14
60975: NOT
60976: IFFALSE 60980
// exit ;
60978: GO 61116
// if task [ 1 ] [ 1 ] <> | then
60980: LD_VAR 0 14
60984: PUSH
60985: LD_INT 1
60987: ARRAY
60988: PUSH
60989: LD_INT 1
60991: ARRAY
60992: PUSH
60993: LD_STRING |
60995: NONEQUAL
60996: IFFALSE 61000
// exit ;
60998: GO 61116
// _x := task [ 1 ] [ 2 ] ;
61000: LD_ADDR_VAR 0 11
61004: PUSH
61005: LD_VAR 0 14
61009: PUSH
61010: LD_INT 1
61012: ARRAY
61013: PUSH
61014: LD_INT 2
61016: ARRAY
61017: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
61018: LD_ADDR_VAR 0 12
61022: PUSH
61023: LD_VAR 0 14
61027: PUSH
61028: LD_INT 1
61030: ARRAY
61031: PUSH
61032: LD_INT 3
61034: ARRAY
61035: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
61036: LD_VAR 0 11
61040: PPUSH
61041: LD_VAR 0 12
61045: PPUSH
61046: CALL_OW 351
61050: NOT
61051: IFTRUE 61070
61053: PUSH
61054: LD_VAR 0 11
61058: PPUSH
61059: LD_VAR 0 12
61063: PPUSH
61064: CALL_OW 554
61068: NOT
61069: OR
61070: IFFALSE 61104
// begin task := Delete ( task , 1 ) ;
61072: LD_ADDR_VAR 0 14
61076: PUSH
61077: LD_VAR 0 14
61081: PPUSH
61082: LD_INT 1
61084: PPUSH
61085: CALL_OW 3
61089: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
61090: LD_VAR 0 1
61094: PPUSH
61095: LD_VAR 0 14
61099: PPUSH
61100: CALL_OW 446
// end ; until not HasTask ( flame ) ;
61104: LD_VAR 0 1
61108: PPUSH
61109: CALL_OW 314
61113: NOT
61114: IFFALSE 60949
// end ;
61116: LD_VAR 0 5
61120: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
61121: LD_EXP 43
61125: NOT
61126: IFFALSE 61176
61128: GO 61130
61130: DISABLE
// begin initHack := true ;
61131: LD_ADDR_EXP 43
61135: PUSH
61136: LD_INT 1
61138: ST_TO_ADDR
// hackTanks := [ ] ;
61139: LD_ADDR_EXP 44
61143: PUSH
61144: EMPTY
61145: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
61146: LD_ADDR_EXP 45
61150: PUSH
61151: EMPTY
61152: ST_TO_ADDR
// hackLimit := 3 ;
61153: LD_ADDR_EXP 46
61157: PUSH
61158: LD_INT 3
61160: ST_TO_ADDR
// hackDist := 12 ;
61161: LD_ADDR_EXP 47
61165: PUSH
61166: LD_INT 12
61168: ST_TO_ADDR
// hackCounter := [ ] ;
61169: LD_ADDR_EXP 48
61173: PUSH
61174: EMPTY
61175: ST_TO_ADDR
// end ;
61176: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
61177: LD_EXP 43
61181: IFFALSE 61199
61183: PUSH
61184: LD_INT 34
61186: PUSH
61187: LD_INT 99
61189: PUSH
61190: EMPTY
61191: LIST
61192: LIST
61193: PPUSH
61194: CALL_OW 69
61198: AND
61199: IFFALSE 61452
61201: GO 61203
61203: DISABLE
61204: LD_INT 0
61206: PPUSH
61207: PPUSH
// begin enable ;
61208: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
61209: LD_ADDR_VAR 0 1
61213: PUSH
61214: LD_INT 34
61216: PUSH
61217: LD_INT 99
61219: PUSH
61220: EMPTY
61221: LIST
61222: LIST
61223: PPUSH
61224: CALL_OW 69
61228: PUSH
61229: FOR_IN
61230: IFFALSE 61450
// begin if not i in hackTanks then
61232: LD_VAR 0 1
61236: PUSH
61237: LD_EXP 44
61241: IN
61242: NOT
61243: IFFALSE 61326
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
61245: LD_ADDR_EXP 44
61249: PUSH
61250: LD_EXP 44
61254: PPUSH
61255: LD_EXP 44
61259: PUSH
61260: LD_INT 1
61262: PLUS
61263: PPUSH
61264: LD_VAR 0 1
61268: PPUSH
61269: CALL_OW 1
61273: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
61274: LD_ADDR_EXP 45
61278: PUSH
61279: LD_EXP 45
61283: PPUSH
61284: LD_EXP 45
61288: PUSH
61289: LD_INT 1
61291: PLUS
61292: PPUSH
61293: EMPTY
61294: PPUSH
61295: CALL_OW 1
61299: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
61300: LD_ADDR_EXP 48
61304: PUSH
61305: LD_EXP 48
61309: PPUSH
61310: LD_EXP 48
61314: PUSH
61315: LD_INT 1
61317: PLUS
61318: PPUSH
61319: EMPTY
61320: PPUSH
61321: CALL_OW 1
61325: ST_TO_ADDR
// end ; if not IsOk ( i ) then
61326: LD_VAR 0 1
61330: PPUSH
61331: CALL_OW 302
61335: NOT
61336: IFFALSE 61349
// begin HackUnlinkAll ( i ) ;
61338: LD_VAR 0 1
61342: PPUSH
61343: CALL 61455 0 1
// continue ;
61347: GO 61229
// end ; HackCheckCapturedStatus ( i ) ;
61349: LD_VAR 0 1
61353: PPUSH
61354: CALL 61900 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
61358: LD_ADDR_VAR 0 2
61362: PUSH
61363: LD_INT 81
61365: PUSH
61366: LD_VAR 0 1
61370: PPUSH
61371: CALL_OW 255
61375: PUSH
61376: EMPTY
61377: LIST
61378: LIST
61379: PUSH
61380: LD_INT 33
61382: PUSH
61383: LD_INT 3
61385: PUSH
61386: EMPTY
61387: LIST
61388: LIST
61389: PUSH
61390: LD_INT 91
61392: PUSH
61393: LD_VAR 0 1
61397: PUSH
61398: LD_EXP 47
61402: PUSH
61403: EMPTY
61404: LIST
61405: LIST
61406: LIST
61407: PUSH
61408: LD_INT 50
61410: PUSH
61411: EMPTY
61412: LIST
61413: PUSH
61414: EMPTY
61415: LIST
61416: LIST
61417: LIST
61418: LIST
61419: PPUSH
61420: CALL_OW 69
61424: ST_TO_ADDR
// if not tmp then
61425: LD_VAR 0 2
61429: NOT
61430: IFFALSE 61434
// continue ;
61432: GO 61229
// HackLink ( i , tmp ) ;
61434: LD_VAR 0 1
61438: PPUSH
61439: LD_VAR 0 2
61443: PPUSH
61444: CALL 61591 0 2
// end ;
61448: GO 61229
61450: POP
61451: POP
// end ;
61452: PPOPN 2
61454: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
61455: LD_INT 0
61457: PPUSH
61458: PPUSH
61459: PPUSH
// if not hack in hackTanks then
61460: LD_VAR 0 1
61464: PUSH
61465: LD_EXP 44
61469: IN
61470: NOT
61471: IFFALSE 61475
// exit ;
61473: GO 61586
// index := GetElementIndex ( hackTanks , hack ) ;
61475: LD_ADDR_VAR 0 4
61479: PUSH
61480: LD_EXP 44
61484: PPUSH
61485: LD_VAR 0 1
61489: PPUSH
61490: CALL 20341 0 2
61494: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
61495: LD_EXP 45
61499: PUSH
61500: LD_VAR 0 4
61504: ARRAY
61505: IFFALSE 61586
// begin for i in hackTanksCaptured [ index ] do
61507: LD_ADDR_VAR 0 3
61511: PUSH
61512: LD_EXP 45
61516: PUSH
61517: LD_VAR 0 4
61521: ARRAY
61522: PUSH
61523: FOR_IN
61524: IFFALSE 61550
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
61526: LD_VAR 0 3
61530: PUSH
61531: LD_INT 1
61533: ARRAY
61534: PPUSH
61535: LD_VAR 0 3
61539: PUSH
61540: LD_INT 2
61542: ARRAY
61543: PPUSH
61544: CALL_OW 235
61548: GO 61523
61550: POP
61551: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
61552: LD_ADDR_EXP 45
61556: PUSH
61557: LD_EXP 45
61561: PPUSH
61562: LD_VAR 0 4
61566: PPUSH
61567: EMPTY
61568: PPUSH
61569: CALL_OW 1
61573: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
61574: LD_VAR 0 1
61578: PPUSH
61579: LD_INT 0
61581: PPUSH
61582: CALL_OW 505
// end ; end ;
61586: LD_VAR 0 2
61590: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
61591: LD_INT 0
61593: PPUSH
61594: PPUSH
61595: PPUSH
// if not hack in hackTanks or not vehicles then
61596: LD_VAR 0 1
61600: PUSH
61601: LD_EXP 44
61605: IN
61606: NOT
61607: IFTRUE 61616
61609: PUSH
61610: LD_VAR 0 2
61614: NOT
61615: OR
61616: IFFALSE 61620
// exit ;
61618: GO 61895
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
61620: LD_ADDR_VAR 0 2
61624: PUSH
61625: LD_VAR 0 1
61629: PPUSH
61630: LD_VAR 0 2
61634: PPUSH
61635: LD_INT 1
61637: PPUSH
61638: LD_INT 1
61640: PPUSH
61641: CALL 20993 0 4
61645: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
61646: LD_ADDR_VAR 0 5
61650: PUSH
61651: LD_EXP 44
61655: PPUSH
61656: LD_VAR 0 1
61660: PPUSH
61661: CALL 20341 0 2
61665: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
61666: LD_EXP 45
61670: PUSH
61671: LD_VAR 0 5
61675: ARRAY
61676: PUSH
61677: LD_EXP 46
61681: LESS
61682: IFFALSE 61871
// begin for i := 1 to vehicles do
61684: LD_ADDR_VAR 0 4
61688: PUSH
61689: DOUBLE
61690: LD_INT 1
61692: DEC
61693: ST_TO_ADDR
61694: LD_VAR 0 2
61698: PUSH
61699: FOR_TO
61700: IFFALSE 61869
// begin if hackTanksCaptured [ index ] = hackLimit then
61702: LD_EXP 45
61706: PUSH
61707: LD_VAR 0 5
61711: ARRAY
61712: PUSH
61713: LD_EXP 46
61717: EQUAL
61718: IFFALSE 61722
// break ;
61720: GO 61869
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
61722: LD_ADDR_EXP 48
61726: PUSH
61727: LD_EXP 48
61731: PPUSH
61732: LD_VAR 0 5
61736: PPUSH
61737: LD_EXP 48
61741: PUSH
61742: LD_VAR 0 5
61746: ARRAY
61747: PUSH
61748: LD_INT 1
61750: PLUS
61751: PPUSH
61752: CALL_OW 1
61756: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
61757: LD_ADDR_EXP 45
61761: PUSH
61762: LD_EXP 45
61766: PPUSH
61767: LD_VAR 0 5
61771: PUSH
61772: LD_EXP 45
61776: PUSH
61777: LD_VAR 0 5
61781: ARRAY
61782: PUSH
61783: LD_INT 1
61785: PLUS
61786: PUSH
61787: EMPTY
61788: LIST
61789: LIST
61790: PPUSH
61791: LD_VAR 0 2
61795: PUSH
61796: LD_VAR 0 4
61800: ARRAY
61801: PUSH
61802: LD_VAR 0 2
61806: PUSH
61807: LD_VAR 0 4
61811: ARRAY
61812: PPUSH
61813: CALL_OW 255
61817: PUSH
61818: EMPTY
61819: LIST
61820: LIST
61821: PPUSH
61822: CALL 20558 0 3
61826: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
61827: LD_VAR 0 2
61831: PUSH
61832: LD_VAR 0 4
61836: ARRAY
61837: PPUSH
61838: LD_VAR 0 1
61842: PPUSH
61843: CALL_OW 255
61847: PPUSH
61848: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
61852: LD_VAR 0 2
61856: PUSH
61857: LD_VAR 0 4
61861: ARRAY
61862: PPUSH
61863: CALL_OW 141
// end ;
61867: GO 61699
61869: POP
61870: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
61871: LD_VAR 0 1
61875: PPUSH
61876: LD_EXP 45
61880: PUSH
61881: LD_VAR 0 5
61885: ARRAY
61886: PUSH
61887: LD_INT 0
61889: PLUS
61890: PPUSH
61891: CALL_OW 505
// end ;
61895: LD_VAR 0 3
61899: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
61900: LD_INT 0
61902: PPUSH
61903: PPUSH
61904: PPUSH
61905: PPUSH
// if not hack in hackTanks then
61906: LD_VAR 0 1
61910: PUSH
61911: LD_EXP 44
61915: IN
61916: NOT
61917: IFFALSE 61921
// exit ;
61919: GO 62165
// index := GetElementIndex ( hackTanks , hack ) ;
61921: LD_ADDR_VAR 0 4
61925: PUSH
61926: LD_EXP 44
61930: PPUSH
61931: LD_VAR 0 1
61935: PPUSH
61936: CALL 20341 0 2
61940: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
61941: LD_ADDR_VAR 0 3
61945: PUSH
61946: DOUBLE
61947: LD_EXP 45
61951: PUSH
61952: LD_VAR 0 4
61956: ARRAY
61957: INC
61958: ST_TO_ADDR
61959: LD_INT 1
61961: PUSH
61962: FOR_DOWNTO
61963: IFFALSE 62139
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
61965: LD_ADDR_VAR 0 5
61969: PUSH
61970: LD_EXP 45
61974: PUSH
61975: LD_VAR 0 4
61979: ARRAY
61980: PUSH
61981: LD_VAR 0 3
61985: ARRAY
61986: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
61987: LD_VAR 0 5
61991: PUSH
61992: LD_INT 1
61994: ARRAY
61995: PPUSH
61996: CALL_OW 302
62000: NOT
62001: IFTRUE 62029
62003: PUSH
62004: LD_VAR 0 5
62008: PUSH
62009: LD_INT 1
62011: ARRAY
62012: PPUSH
62013: CALL_OW 255
62017: PUSH
62018: LD_VAR 0 1
62022: PPUSH
62023: CALL_OW 255
62027: NONEQUAL
62028: OR
62029: IFFALSE 62137
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
62031: LD_VAR 0 5
62035: PUSH
62036: LD_INT 1
62038: ARRAY
62039: PPUSH
62040: CALL_OW 305
62044: IFFALSE 62072
62046: PUSH
62047: LD_VAR 0 5
62051: PUSH
62052: LD_INT 1
62054: ARRAY
62055: PPUSH
62056: CALL_OW 255
62060: PUSH
62061: LD_VAR 0 1
62065: PPUSH
62066: CALL_OW 255
62070: EQUAL
62071: AND
62072: IFFALSE 62096
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
62074: LD_VAR 0 5
62078: PUSH
62079: LD_INT 1
62081: ARRAY
62082: PPUSH
62083: LD_VAR 0 5
62087: PUSH
62088: LD_INT 2
62090: ARRAY
62091: PPUSH
62092: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
62096: LD_ADDR_EXP 45
62100: PUSH
62101: LD_EXP 45
62105: PPUSH
62106: LD_VAR 0 4
62110: PPUSH
62111: LD_EXP 45
62115: PUSH
62116: LD_VAR 0 4
62120: ARRAY
62121: PPUSH
62122: LD_VAR 0 3
62126: PPUSH
62127: CALL_OW 3
62131: PPUSH
62132: CALL_OW 1
62136: ST_TO_ADDR
// end ; end ;
62137: GO 61962
62139: POP
62140: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
62141: LD_VAR 0 1
62145: PPUSH
62146: LD_EXP 45
62150: PUSH
62151: LD_VAR 0 4
62155: ARRAY
62156: PUSH
62157: LD_INT 0
62159: PLUS
62160: PPUSH
62161: CALL_OW 505
// end ;
62165: LD_VAR 0 2
62169: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
62170: LD_INT 0
62172: PPUSH
62173: PPUSH
62174: PPUSH
62175: PPUSH
// if not hack in hackTanks then
62176: LD_VAR 0 1
62180: PUSH
62181: LD_EXP 44
62185: IN
62186: NOT
62187: IFFALSE 62191
// exit ;
62189: GO 62276
// index := GetElementIndex ( hackTanks , hack ) ;
62191: LD_ADDR_VAR 0 5
62195: PUSH
62196: LD_EXP 44
62200: PPUSH
62201: LD_VAR 0 1
62205: PPUSH
62206: CALL 20341 0 2
62210: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
62211: LD_ADDR_VAR 0 4
62215: PUSH
62216: DOUBLE
62217: LD_INT 1
62219: DEC
62220: ST_TO_ADDR
62221: LD_EXP 45
62225: PUSH
62226: LD_VAR 0 5
62230: ARRAY
62231: PUSH
62232: FOR_TO
62233: IFFALSE 62274
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
62235: LD_EXP 45
62239: PUSH
62240: LD_VAR 0 5
62244: ARRAY
62245: PUSH
62246: LD_VAR 0 4
62250: ARRAY
62251: PUSH
62252: LD_INT 1
62254: ARRAY
62255: PUSH
62256: LD_VAR 0 2
62260: EQUAL
62261: IFFALSE 62272
// KillUnit ( vehicle ) ;
62263: LD_VAR 0 2
62267: PPUSH
62268: CALL_OW 66
62272: GO 62232
62274: POP
62275: POP
// end ;
62276: LD_VAR 0 3
62280: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
62281: LD_EXP 49
62285: NOT
62286: IFFALSE 62321
62288: GO 62290
62290: DISABLE
// begin initMiner := true ;
62291: LD_ADDR_EXP 49
62295: PUSH
62296: LD_INT 1
62298: ST_TO_ADDR
// minersList := [ ] ;
62299: LD_ADDR_EXP 50
62303: PUSH
62304: EMPTY
62305: ST_TO_ADDR
// minerMinesList := [ ] ;
62306: LD_ADDR_EXP 51
62310: PUSH
62311: EMPTY
62312: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
62313: LD_ADDR_EXP 52
62317: PUSH
62318: LD_INT 5
62320: ST_TO_ADDR
// end ;
62321: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
62322: LD_EXP 49
62326: IFFALSE 62344
62328: PUSH
62329: LD_INT 34
62331: PUSH
62332: LD_INT 81
62334: PUSH
62335: EMPTY
62336: LIST
62337: LIST
62338: PPUSH
62339: CALL_OW 69
62343: AND
62344: IFFALSE 62807
62346: GO 62348
62348: DISABLE
62349: LD_INT 0
62351: PPUSH
62352: PPUSH
62353: PPUSH
62354: PPUSH
// begin enable ;
62355: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
62356: LD_ADDR_VAR 0 1
62360: PUSH
62361: LD_INT 34
62363: PUSH
62364: LD_INT 81
62366: PUSH
62367: EMPTY
62368: LIST
62369: LIST
62370: PPUSH
62371: CALL_OW 69
62375: PUSH
62376: FOR_IN
62377: IFFALSE 62449
// begin if not i in minersList then
62379: LD_VAR 0 1
62383: PUSH
62384: LD_EXP 50
62388: IN
62389: NOT
62390: IFFALSE 62447
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
62392: LD_ADDR_EXP 50
62396: PUSH
62397: LD_EXP 50
62401: PPUSH
62402: LD_EXP 50
62406: PUSH
62407: LD_INT 1
62409: PLUS
62410: PPUSH
62411: LD_VAR 0 1
62415: PPUSH
62416: CALL_OW 1
62420: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
62421: LD_ADDR_EXP 51
62425: PUSH
62426: LD_EXP 51
62430: PPUSH
62431: LD_EXP 51
62435: PUSH
62436: LD_INT 1
62438: PLUS
62439: PPUSH
62440: EMPTY
62441: PPUSH
62442: CALL_OW 1
62446: ST_TO_ADDR
// end end ;
62447: GO 62376
62449: POP
62450: POP
// for i := minerMinesList downto 1 do
62451: LD_ADDR_VAR 0 1
62455: PUSH
62456: DOUBLE
62457: LD_EXP 51
62461: INC
62462: ST_TO_ADDR
62463: LD_INT 1
62465: PUSH
62466: FOR_DOWNTO
62467: IFFALSE 62805
// begin if IsLive ( minersList [ i ] ) then
62469: LD_EXP 50
62473: PUSH
62474: LD_VAR 0 1
62478: ARRAY
62479: PPUSH
62480: CALL_OW 300
62484: IFFALSE 62512
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
62486: LD_EXP 50
62490: PUSH
62491: LD_VAR 0 1
62495: ARRAY
62496: PPUSH
62497: LD_EXP 51
62501: PUSH
62502: LD_VAR 0 1
62506: ARRAY
62507: PPUSH
62508: CALL_OW 505
// if not minerMinesList [ i ] then
62512: LD_EXP 51
62516: PUSH
62517: LD_VAR 0 1
62521: ARRAY
62522: NOT
62523: IFFALSE 62527
// continue ;
62525: GO 62466
// for j := minerMinesList [ i ] downto 1 do
62527: LD_ADDR_VAR 0 2
62531: PUSH
62532: DOUBLE
62533: LD_EXP 51
62537: PUSH
62538: LD_VAR 0 1
62542: ARRAY
62543: INC
62544: ST_TO_ADDR
62545: LD_INT 1
62547: PUSH
62548: FOR_DOWNTO
62549: IFFALSE 62801
// begin side := GetSide ( minersList [ i ] ) ;
62551: LD_ADDR_VAR 0 3
62555: PUSH
62556: LD_EXP 50
62560: PUSH
62561: LD_VAR 0 1
62565: ARRAY
62566: PPUSH
62567: CALL_OW 255
62571: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
62572: LD_ADDR_VAR 0 4
62576: PUSH
62577: LD_EXP 51
62581: PUSH
62582: LD_VAR 0 1
62586: ARRAY
62587: PUSH
62588: LD_VAR 0 2
62592: ARRAY
62593: PUSH
62594: LD_INT 1
62596: ARRAY
62597: PPUSH
62598: LD_EXP 51
62602: PUSH
62603: LD_VAR 0 1
62607: ARRAY
62608: PUSH
62609: LD_VAR 0 2
62613: ARRAY
62614: PUSH
62615: LD_INT 2
62617: ARRAY
62618: PPUSH
62619: CALL_OW 428
62623: ST_TO_ADDR
// if not tmp then
62624: LD_VAR 0 4
62628: NOT
62629: IFFALSE 62633
// continue ;
62631: GO 62548
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
62633: LD_VAR 0 4
62637: PUSH
62638: LD_INT 81
62640: PUSH
62641: LD_VAR 0 3
62645: PUSH
62646: EMPTY
62647: LIST
62648: LIST
62649: PPUSH
62650: CALL_OW 69
62654: IN
62655: IFFALSE 62705
62657: PUSH
62658: LD_EXP 51
62662: PUSH
62663: LD_VAR 0 1
62667: ARRAY
62668: PUSH
62669: LD_VAR 0 2
62673: ARRAY
62674: PUSH
62675: LD_INT 1
62677: ARRAY
62678: PPUSH
62679: LD_EXP 51
62683: PUSH
62684: LD_VAR 0 1
62688: ARRAY
62689: PUSH
62690: LD_VAR 0 2
62694: ARRAY
62695: PUSH
62696: LD_INT 2
62698: ARRAY
62699: PPUSH
62700: CALL_OW 458
62704: AND
62705: IFFALSE 62799
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
62707: LD_EXP 51
62711: PUSH
62712: LD_VAR 0 1
62716: ARRAY
62717: PUSH
62718: LD_VAR 0 2
62722: ARRAY
62723: PUSH
62724: LD_INT 1
62726: ARRAY
62727: PPUSH
62728: LD_EXP 51
62732: PUSH
62733: LD_VAR 0 1
62737: ARRAY
62738: PUSH
62739: LD_VAR 0 2
62743: ARRAY
62744: PUSH
62745: LD_INT 2
62747: ARRAY
62748: PPUSH
62749: LD_VAR 0 3
62753: PPUSH
62754: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
62758: LD_ADDR_EXP 51
62762: PUSH
62763: LD_EXP 51
62767: PPUSH
62768: LD_VAR 0 1
62772: PPUSH
62773: LD_EXP 51
62777: PUSH
62778: LD_VAR 0 1
62782: ARRAY
62783: PPUSH
62784: LD_VAR 0 2
62788: PPUSH
62789: CALL_OW 3
62793: PPUSH
62794: CALL_OW 1
62798: ST_TO_ADDR
// end ; end ;
62799: GO 62548
62801: POP
62802: POP
// end ;
62803: GO 62466
62805: POP
62806: POP
// end ;
62807: PPOPN 4
62809: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
62810: LD_INT 0
62812: PPUSH
62813: PPUSH
// result := false ;
62814: LD_ADDR_VAR 0 4
62818: PUSH
62819: LD_INT 0
62821: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
62822: LD_VAR 0 1
62826: PPUSH
62827: CALL_OW 264
62831: PUSH
62832: LD_INT 81
62834: EQUAL
62835: NOT
62836: IFFALSE 62840
// exit ;
62838: GO 63084
// index := GetElementIndex ( minersList , unit ) ;
62840: LD_ADDR_VAR 0 5
62844: PUSH
62845: LD_EXP 50
62849: PPUSH
62850: LD_VAR 0 1
62854: PPUSH
62855: CALL 20341 0 2
62859: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
62860: LD_EXP 51
62864: PUSH
62865: LD_VAR 0 5
62869: ARRAY
62870: PUSH
62871: LD_EXP 52
62875: GREATEREQUAL
62876: IFFALSE 62880
// exit ;
62878: GO 63084
// ComMoveXY ( unit , x , y ) ;
62880: LD_VAR 0 1
62884: PPUSH
62885: LD_VAR 0 2
62889: PPUSH
62890: LD_VAR 0 3
62894: PPUSH
62895: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
62899: LD_INT 35
62901: PPUSH
62902: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
62906: LD_VAR 0 1
62910: PPUSH
62911: LD_VAR 0 2
62915: PPUSH
62916: LD_VAR 0 3
62920: PPUSH
62921: CALL 52387 0 3
62925: NOT
62926: IFFALSE 62939
62928: PUSH
62929: LD_VAR 0 1
62933: PPUSH
62934: CALL_OW 314
62938: AND
62939: IFFALSE 62943
// exit ;
62941: GO 63084
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
62943: LD_VAR 0 2
62947: PPUSH
62948: LD_VAR 0 3
62952: PPUSH
62953: CALL_OW 428
62957: PUSH
62958: LD_VAR 0 1
62962: EQUAL
62963: IFFALSE 62977
62965: PUSH
62966: LD_VAR 0 1
62970: PPUSH
62971: CALL_OW 314
62975: NOT
62976: AND
62977: IFFALSE 62899
// PlaySoundXY ( x , y , PlantMine ) ;
62979: LD_VAR 0 2
62983: PPUSH
62984: LD_VAR 0 3
62988: PPUSH
62989: LD_STRING PlantMine
62991: PPUSH
62992: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
62996: LD_VAR 0 2
63000: PPUSH
63001: LD_VAR 0 3
63005: PPUSH
63006: LD_VAR 0 1
63010: PPUSH
63011: CALL_OW 255
63015: PPUSH
63016: LD_INT 0
63018: PPUSH
63019: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
63023: LD_ADDR_EXP 51
63027: PUSH
63028: LD_EXP 51
63032: PPUSH
63033: LD_VAR 0 5
63037: PUSH
63038: LD_EXP 51
63042: PUSH
63043: LD_VAR 0 5
63047: ARRAY
63048: PUSH
63049: LD_INT 1
63051: PLUS
63052: PUSH
63053: EMPTY
63054: LIST
63055: LIST
63056: PPUSH
63057: LD_VAR 0 2
63061: PUSH
63062: LD_VAR 0 3
63066: PUSH
63067: EMPTY
63068: LIST
63069: LIST
63070: PPUSH
63071: CALL 20558 0 3
63075: ST_TO_ADDR
// result := true ;
63076: LD_ADDR_VAR 0 4
63080: PUSH
63081: LD_INT 1
63083: ST_TO_ADDR
// end ;
63084: LD_VAR 0 4
63088: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
63089: LD_INT 0
63091: PPUSH
63092: PPUSH
63093: PPUSH
// if not unit in minersList then
63094: LD_VAR 0 1
63098: PUSH
63099: LD_EXP 50
63103: IN
63104: NOT
63105: IFFALSE 63109
// exit ;
63107: GO 63503
// index := GetElementIndex ( minersList , unit ) ;
63109: LD_ADDR_VAR 0 6
63113: PUSH
63114: LD_EXP 50
63118: PPUSH
63119: LD_VAR 0 1
63123: PPUSH
63124: CALL 20341 0 2
63128: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
63129: LD_ADDR_VAR 0 5
63133: PUSH
63134: DOUBLE
63135: LD_EXP 51
63139: PUSH
63140: LD_VAR 0 6
63144: ARRAY
63145: INC
63146: ST_TO_ADDR
63147: LD_INT 1
63149: PUSH
63150: FOR_DOWNTO
63151: IFFALSE 63314
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
63153: LD_EXP 51
63157: PUSH
63158: LD_VAR 0 6
63162: ARRAY
63163: PUSH
63164: LD_VAR 0 5
63168: ARRAY
63169: PUSH
63170: LD_INT 1
63172: ARRAY
63173: PUSH
63174: LD_VAR 0 2
63178: EQUAL
63179: IFFALSE 63209
63181: PUSH
63182: LD_EXP 51
63186: PUSH
63187: LD_VAR 0 6
63191: ARRAY
63192: PUSH
63193: LD_VAR 0 5
63197: ARRAY
63198: PUSH
63199: LD_INT 2
63201: ARRAY
63202: PUSH
63203: LD_VAR 0 3
63207: EQUAL
63208: AND
63209: IFFALSE 63312
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
63211: LD_EXP 51
63215: PUSH
63216: LD_VAR 0 6
63220: ARRAY
63221: PUSH
63222: LD_VAR 0 5
63226: ARRAY
63227: PUSH
63228: LD_INT 1
63230: ARRAY
63231: PPUSH
63232: LD_EXP 51
63236: PUSH
63237: LD_VAR 0 6
63241: ARRAY
63242: PUSH
63243: LD_VAR 0 5
63247: ARRAY
63248: PUSH
63249: LD_INT 2
63251: ARRAY
63252: PPUSH
63253: LD_VAR 0 1
63257: PPUSH
63258: CALL_OW 255
63262: PPUSH
63263: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
63267: LD_ADDR_EXP 51
63271: PUSH
63272: LD_EXP 51
63276: PPUSH
63277: LD_VAR 0 6
63281: PPUSH
63282: LD_EXP 51
63286: PUSH
63287: LD_VAR 0 6
63291: ARRAY
63292: PPUSH
63293: LD_VAR 0 5
63297: PPUSH
63298: CALL_OW 3
63302: PPUSH
63303: CALL_OW 1
63307: ST_TO_ADDR
// exit ;
63308: POP
63309: POP
63310: GO 63503
// end ; end ;
63312: GO 63150
63314: POP
63315: POP
// for i := minerMinesList [ index ] downto 1 do
63316: LD_ADDR_VAR 0 5
63320: PUSH
63321: DOUBLE
63322: LD_EXP 51
63326: PUSH
63327: LD_VAR 0 6
63331: ARRAY
63332: INC
63333: ST_TO_ADDR
63334: LD_INT 1
63336: PUSH
63337: FOR_DOWNTO
63338: IFFALSE 63501
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
63340: LD_EXP 51
63344: PUSH
63345: LD_VAR 0 6
63349: ARRAY
63350: PUSH
63351: LD_VAR 0 5
63355: ARRAY
63356: PUSH
63357: LD_INT 1
63359: ARRAY
63360: PPUSH
63361: LD_EXP 51
63365: PUSH
63366: LD_VAR 0 6
63370: ARRAY
63371: PUSH
63372: LD_VAR 0 5
63376: ARRAY
63377: PUSH
63378: LD_INT 2
63380: ARRAY
63381: PPUSH
63382: LD_VAR 0 2
63386: PPUSH
63387: LD_VAR 0 3
63391: PPUSH
63392: CALL_OW 298
63396: PUSH
63397: LD_INT 6
63399: LESS
63400: IFFALSE 63499
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
63402: LD_EXP 51
63406: PUSH
63407: LD_VAR 0 6
63411: ARRAY
63412: PUSH
63413: LD_VAR 0 5
63417: ARRAY
63418: PUSH
63419: LD_INT 1
63421: ARRAY
63422: PPUSH
63423: LD_EXP 51
63427: PUSH
63428: LD_VAR 0 6
63432: ARRAY
63433: PUSH
63434: LD_VAR 0 5
63438: ARRAY
63439: PUSH
63440: LD_INT 2
63442: ARRAY
63443: PPUSH
63444: LD_VAR 0 1
63448: PPUSH
63449: CALL_OW 255
63453: PPUSH
63454: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
63458: LD_ADDR_EXP 51
63462: PUSH
63463: LD_EXP 51
63467: PPUSH
63468: LD_VAR 0 6
63472: PPUSH
63473: LD_EXP 51
63477: PUSH
63478: LD_VAR 0 6
63482: ARRAY
63483: PPUSH
63484: LD_VAR 0 5
63488: PPUSH
63489: CALL_OW 3
63493: PPUSH
63494: CALL_OW 1
63498: ST_TO_ADDR
// end ; end ;
63499: GO 63337
63501: POP
63502: POP
// end ;
63503: LD_VAR 0 4
63507: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
63508: LD_INT 0
63510: PPUSH
63511: PPUSH
63512: PPUSH
63513: PPUSH
63514: PPUSH
63515: PPUSH
63516: PPUSH
63517: PPUSH
63518: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
63519: LD_VAR 0 1
63523: PPUSH
63524: CALL_OW 264
63528: PUSH
63529: LD_INT 81
63531: EQUAL
63532: NOT
63533: IFTRUE 63548
63535: PUSH
63536: LD_VAR 0 1
63540: PUSH
63541: LD_EXP 50
63545: IN
63546: NOT
63547: OR
63548: IFFALSE 63552
// exit ;
63550: GO 63878
// index := GetElementIndex ( minersList , unit ) ;
63552: LD_ADDR_VAR 0 6
63556: PUSH
63557: LD_EXP 50
63561: PPUSH
63562: LD_VAR 0 1
63566: PPUSH
63567: CALL 20341 0 2
63571: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
63572: LD_ADDR_VAR 0 8
63576: PUSH
63577: LD_EXP 52
63581: PUSH
63582: LD_EXP 51
63586: PUSH
63587: LD_VAR 0 6
63591: ARRAY
63592: MINUS
63593: ST_TO_ADDR
// if not minesFreeAmount then
63594: LD_VAR 0 8
63598: NOT
63599: IFFALSE 63603
// exit ;
63601: GO 63878
// tmp := [ ] ;
63603: LD_ADDR_VAR 0 7
63607: PUSH
63608: EMPTY
63609: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
63610: LD_ADDR_VAR 0 5
63614: PUSH
63615: DOUBLE
63616: LD_INT 1
63618: DEC
63619: ST_TO_ADDR
63620: LD_VAR 0 8
63624: PUSH
63625: FOR_TO
63626: IFFALSE 63825
// begin _d := rand ( 0 , 5 ) ;
63628: LD_ADDR_VAR 0 11
63632: PUSH
63633: LD_INT 0
63635: PPUSH
63636: LD_INT 5
63638: PPUSH
63639: CALL_OW 12
63643: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
63644: LD_ADDR_VAR 0 12
63648: PUSH
63649: LD_INT 2
63651: PPUSH
63652: LD_INT 6
63654: PPUSH
63655: CALL_OW 12
63659: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
63660: LD_ADDR_VAR 0 9
63664: PUSH
63665: LD_VAR 0 2
63669: PPUSH
63670: LD_VAR 0 11
63674: PPUSH
63675: LD_VAR 0 12
63679: PPUSH
63680: CALL_OW 272
63684: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
63685: LD_ADDR_VAR 0 10
63689: PUSH
63690: LD_VAR 0 3
63694: PPUSH
63695: LD_VAR 0 11
63699: PPUSH
63700: LD_VAR 0 12
63704: PPUSH
63705: CALL_OW 273
63709: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
63710: LD_VAR 0 9
63714: PPUSH
63715: LD_VAR 0 10
63719: PPUSH
63720: CALL_OW 488
63724: IFFALSE 63748
63726: PUSH
63727: LD_VAR 0 9
63731: PUSH
63732: LD_VAR 0 10
63736: PUSH
63737: EMPTY
63738: LIST
63739: LIST
63740: PUSH
63741: LD_VAR 0 7
63745: IN
63746: NOT
63747: AND
63748: IFFALSE 63767
63750: PUSH
63751: LD_VAR 0 9
63755: PPUSH
63756: LD_VAR 0 10
63760: PPUSH
63761: CALL_OW 458
63765: NOT
63766: AND
63767: IFFALSE 63809
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
63769: LD_ADDR_VAR 0 7
63773: PUSH
63774: LD_VAR 0 7
63778: PPUSH
63779: LD_VAR 0 7
63783: PUSH
63784: LD_INT 1
63786: PLUS
63787: PPUSH
63788: LD_VAR 0 9
63792: PUSH
63793: LD_VAR 0 10
63797: PUSH
63798: EMPTY
63799: LIST
63800: LIST
63801: PPUSH
63802: CALL_OW 1
63806: ST_TO_ADDR
63807: GO 63823
// i := i - 1 ;
63809: LD_ADDR_VAR 0 5
63813: PUSH
63814: LD_VAR 0 5
63818: PUSH
63819: LD_INT 1
63821: MINUS
63822: ST_TO_ADDR
// end ;
63823: GO 63625
63825: POP
63826: POP
// for i in tmp do
63827: LD_ADDR_VAR 0 5
63831: PUSH
63832: LD_VAR 0 7
63836: PUSH
63837: FOR_IN
63838: IFFALSE 63876
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
63840: LD_VAR 0 1
63844: PPUSH
63845: LD_VAR 0 5
63849: PUSH
63850: LD_INT 1
63852: ARRAY
63853: PPUSH
63854: LD_VAR 0 5
63858: PUSH
63859: LD_INT 2
63861: ARRAY
63862: PPUSH
63863: CALL 62810 0 3
63867: NOT
63868: IFFALSE 63874
// exit ;
63870: POP
63871: POP
63872: GO 63878
63874: GO 63837
63876: POP
63877: POP
// end ;
63878: LD_VAR 0 4
63882: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
63883: LD_INT 0
63885: PPUSH
63886: PPUSH
63887: PPUSH
63888: PPUSH
63889: PPUSH
63890: PPUSH
63891: PPUSH
63892: PPUSH
63893: PPUSH
// if GetClass ( unit ) <> class_sniper then
63894: LD_VAR 0 1
63898: PPUSH
63899: CALL_OW 257
63903: PUSH
63904: LD_INT 5
63906: NONEQUAL
63907: IFFALSE 63911
// exit ;
63909: GO 64381
// dist := 8 ;
63911: LD_ADDR_VAR 0 5
63915: PUSH
63916: LD_INT 8
63918: ST_TO_ADDR
// viewRange := 12 ;
63919: LD_ADDR_VAR 0 8
63923: PUSH
63924: LD_INT 12
63926: ST_TO_ADDR
// side := GetSide ( unit ) ;
63927: LD_ADDR_VAR 0 6
63931: PUSH
63932: LD_VAR 0 1
63936: PPUSH
63937: CALL_OW 255
63941: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
63942: LD_INT 61
63944: PPUSH
63945: LD_VAR 0 6
63949: PPUSH
63950: CALL_OW 321
63954: PUSH
63955: LD_INT 2
63957: EQUAL
63958: IFFALSE 63968
// viewRange := 16 ;
63960: LD_ADDR_VAR 0 8
63964: PUSH
63965: LD_INT 16
63967: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
63968: LD_VAR 0 1
63972: PPUSH
63973: LD_VAR 0 2
63977: PPUSH
63978: LD_VAR 0 3
63982: PPUSH
63983: CALL_OW 297
63987: PUSH
63988: LD_VAR 0 5
63992: GREATER
63993: IFFALSE 64072
// begin ComMoveXY ( unit , x , y ) ;
63995: LD_VAR 0 1
63999: PPUSH
64000: LD_VAR 0 2
64004: PPUSH
64005: LD_VAR 0 3
64009: PPUSH
64010: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
64014: LD_INT 35
64016: PPUSH
64017: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
64021: LD_VAR 0 1
64025: PPUSH
64026: LD_VAR 0 2
64030: PPUSH
64031: LD_VAR 0 3
64035: PPUSH
64036: CALL 52387 0 3
64040: NOT
64041: IFFALSE 64045
// exit ;
64043: GO 64381
// until GetDistUnitXY ( unit , x , y ) < dist ;
64045: LD_VAR 0 1
64049: PPUSH
64050: LD_VAR 0 2
64054: PPUSH
64055: LD_VAR 0 3
64059: PPUSH
64060: CALL_OW 297
64064: PUSH
64065: LD_VAR 0 5
64069: LESS
64070: IFFALSE 64014
// end ; ComTurnXY ( unit , x , y ) ;
64072: LD_VAR 0 1
64076: PPUSH
64077: LD_VAR 0 2
64081: PPUSH
64082: LD_VAR 0 3
64086: PPUSH
64087: CALL_OW 118
// repeat if Multiplayer then
64091: LD_OWVAR 4
64095: IFFALSE 64106
// wait ( 35 ) else
64097: LD_INT 35
64099: PPUSH
64100: CALL_OW 67
64104: GO 64113
// wait ( 5 ) ;
64106: LD_INT 5
64108: PPUSH
64109: CALL_OW 67
// _d := GetDir ( unit ) ;
64113: LD_ADDR_VAR 0 11
64117: PUSH
64118: LD_VAR 0 1
64122: PPUSH
64123: CALL_OW 254
64127: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
64128: LD_ADDR_VAR 0 7
64132: PUSH
64133: LD_VAR 0 1
64137: PPUSH
64138: CALL_OW 250
64142: PPUSH
64143: LD_VAR 0 1
64147: PPUSH
64148: CALL_OW 251
64152: PPUSH
64153: LD_VAR 0 2
64157: PPUSH
64158: LD_VAR 0 3
64162: PPUSH
64163: CALL 55023 0 4
64167: ST_TO_ADDR
// until dir = _d ;
64168: LD_VAR 0 7
64172: PUSH
64173: LD_VAR 0 11
64177: EQUAL
64178: IFFALSE 64091
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
64180: LD_ADDR_VAR 0 9
64184: PUSH
64185: LD_VAR 0 1
64189: PPUSH
64190: CALL_OW 250
64194: PPUSH
64195: LD_VAR 0 7
64199: PPUSH
64200: LD_VAR 0 5
64204: PPUSH
64205: CALL_OW 272
64209: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
64210: LD_ADDR_VAR 0 10
64214: PUSH
64215: LD_VAR 0 1
64219: PPUSH
64220: CALL_OW 251
64224: PPUSH
64225: LD_VAR 0 7
64229: PPUSH
64230: LD_VAR 0 5
64234: PPUSH
64235: CALL_OW 273
64239: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
64240: LD_VAR 0 9
64244: PPUSH
64245: LD_VAR 0 10
64249: PPUSH
64250: CALL_OW 488
64254: NOT
64255: IFFALSE 64259
// exit ;
64257: GO 64381
// ComAnimCustom ( unit , 1 ) ;
64259: LD_VAR 0 1
64263: PPUSH
64264: LD_INT 1
64266: PPUSH
64267: CALL_OW 592
// p := 0 ;
64271: LD_ADDR_VAR 0 12
64275: PUSH
64276: LD_INT 0
64278: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
64279: LD_VAR 0 9
64283: PPUSH
64284: LD_VAR 0 10
64288: PPUSH
64289: LD_VAR 0 6
64293: PPUSH
64294: LD_VAR 0 8
64298: PPUSH
64299: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
64303: LD_INT 35
64305: PPUSH
64306: CALL_OW 67
// p := Inc ( p ) ;
64310: LD_ADDR_VAR 0 12
64314: PUSH
64315: LD_VAR 0 12
64319: PPUSH
64320: CALL 54979 0 1
64324: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
64325: LD_VAR 0 12
64329: PUSH
64330: LD_INT 3
64332: EQUAL
64333: IFTRUE 64347
64335: PUSH
64336: LD_VAR 0 1
64340: PPUSH
64341: CALL_OW 302
64345: NOT
64346: OR
64347: IFTRUE 64360
64349: PUSH
64350: LD_VAR 0 1
64354: PPUSH
64355: CALL_OW 301
64359: OR
64360: IFFALSE 64303
// RemoveSeeing ( _x , _y , side ) ;
64362: LD_VAR 0 9
64366: PPUSH
64367: LD_VAR 0 10
64371: PPUSH
64372: LD_VAR 0 6
64376: PPUSH
64377: CALL_OW 331
// end ; end_of_file end_of_file
64381: LD_VAR 0 4
64385: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
64386: PPOPN 6
64388: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
64389: LD_EXP 36
64393: PUSH
64394: LD_INT 4
64396: EQUAL
64397: IFFALSE 64433
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
64399: LD_STRING setGameDifficulty(
64401: PUSH
64402: LD_OWVAR 67
64406: STR
64407: PUSH
64408: LD_STRING )
64410: STR
64411: PPUSH
64412: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
64416: LD_STRING displayDifficulty(
64418: PUSH
64419: LD_OWVAR 67
64423: STR
64424: PUSH
64425: LD_STRING )
64427: STR
64428: PPUSH
64429: CALL_OW 559
// end ; SOS_MapStart ( ) ;
64433: CALL 64462 0 0
// end ; end_of_file
64437: PPOPN 1
64439: END
// every 0 0$1 do
64440: GO 64442
64442: DISABLE
// begin enable ;
64443: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
64444: LD_STRING updateTimer(
64446: PUSH
64447: LD_OWVAR 1
64451: STR
64452: PUSH
64453: LD_STRING );
64455: STR
64456: PPUSH
64457: CALL_OW 559
// end ;
64461: END
// export function SOS_MapStart ( ) ; begin
64462: LD_INT 0
64464: PPUSH
// UpdateFactoryWaypoints ( ) ;
64465: CALL 65396 0 0
// UpdateWarehouseGatheringPoints ( ) ;
64469: CALL 65648 0 0
// ParseMultiDataToLua ( ) ;
64473: CALL 65795 0 0
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
64477: LD_STRING setSpecLogoNumber(
64479: PUSH
64480: LD_INT 2
64482: STR
64483: PUSH
64484: LD_STRING ,
64486: STR
64487: PUSH
64488: LD_INT 1
64490: STR
64491: PUSH
64492: LD_STRING )
64494: STR
64495: PPUSH
64496: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
64500: LD_STRING setSpecLogoNumber(
64502: PUSH
64503: LD_INT 3
64505: STR
64506: PUSH
64507: LD_STRING ,
64509: STR
64510: PUSH
64511: LD_INT 2
64513: STR
64514: PUSH
64515: LD_STRING )
64517: STR
64518: PPUSH
64519: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
64523: LD_STRING setSpecLogoNumber(
64525: PUSH
64526: LD_INT 4
64528: STR
64529: PUSH
64530: LD_STRING ,
64532: STR
64533: PUSH
64534: LD_INT 3
64536: STR
64537: PUSH
64538: LD_STRING )
64540: STR
64541: PPUSH
64542: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
64546: LD_STRING setSpecLogoNumber(
64548: PUSH
64549: LD_INT 5
64551: STR
64552: PUSH
64553: LD_STRING ,
64555: STR
64556: PUSH
64557: LD_INT 4
64559: STR
64560: PUSH
64561: LD_STRING )
64563: STR
64564: PPUSH
64565: CALL_OW 559
// end ;
64569: LD_VAR 0 1
64573: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
64574: LD_INT 0
64576: PPUSH
64577: PPUSH
64578: PPUSH
64579: PPUSH
64580: PPUSH
64581: PPUSH
64582: PPUSH
64583: PPUSH
64584: PPUSH
// for i := 1 to 8 do
64585: LD_ADDR_VAR 0 2
64589: PUSH
64590: DOUBLE
64591: LD_INT 1
64593: DEC
64594: ST_TO_ADDR
64595: LD_INT 8
64597: PUSH
64598: FOR_TO
64599: IFFALSE 64984
// begin if mpSidePositions [ i ] then
64601: LD_EXP 37
64605: PUSH
64606: LD_VAR 0 2
64610: ARRAY
64611: IFFALSE 64982
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
64613: LD_ADDR_VAR 0 7
64617: PUSH
64618: LD_INT 22
64620: PUSH
64621: LD_VAR 0 2
64625: PUSH
64626: EMPTY
64627: LIST
64628: LIST
64629: PUSH
64630: LD_INT 21
64632: PUSH
64633: LD_INT 1
64635: PUSH
64636: EMPTY
64637: LIST
64638: LIST
64639: PUSH
64640: EMPTY
64641: LIST
64642: LIST
64643: PPUSH
64644: CALL_OW 69
64648: PPUSH
64649: CALL 17674 0 1
64653: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
64654: LD_ADDR_VAR 0 9
64658: PUSH
64659: LD_INT 22
64661: PUSH
64662: LD_VAR 0 2
64666: PUSH
64667: EMPTY
64668: LIST
64669: LIST
64670: PUSH
64671: LD_INT 2
64673: PUSH
64674: LD_INT 30
64676: PUSH
64677: LD_INT 0
64679: PUSH
64680: EMPTY
64681: LIST
64682: LIST
64683: PUSH
64684: LD_INT 30
64686: PUSH
64687: LD_INT 1
64689: PUSH
64690: EMPTY
64691: LIST
64692: LIST
64693: PUSH
64694: EMPTY
64695: LIST
64696: LIST
64697: LIST
64698: PUSH
64699: EMPTY
64700: LIST
64701: LIST
64702: PPUSH
64703: CALL_OW 69
64707: ST_TO_ADDR
// crates := 0 ;
64708: LD_ADDR_VAR 0 4
64712: PUSH
64713: LD_INT 0
64715: ST_TO_ADDR
// oil := 0 ;
64716: LD_ADDR_VAR 0 5
64720: PUSH
64721: LD_INT 0
64723: ST_TO_ADDR
// sib := 0 ;
64724: LD_ADDR_VAR 0 6
64728: PUSH
64729: LD_INT 0
64731: ST_TO_ADDR
// if bases then
64732: LD_VAR 0 9
64736: IFFALSE 64842
// begin for j in bases do
64738: LD_ADDR_VAR 0 3
64742: PUSH
64743: LD_VAR 0 9
64747: PUSH
64748: FOR_IN
64749: IFFALSE 64840
// begin base := GetBase ( j ) ;
64751: LD_ADDR_VAR 0 8
64755: PUSH
64756: LD_VAR 0 3
64760: PPUSH
64761: CALL_OW 274
64765: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
64766: LD_ADDR_VAR 0 4
64770: PUSH
64771: LD_VAR 0 4
64775: PUSH
64776: LD_VAR 0 8
64780: PPUSH
64781: LD_INT 1
64783: PPUSH
64784: CALL_OW 275
64788: PLUS
64789: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
64790: LD_ADDR_VAR 0 5
64794: PUSH
64795: LD_VAR 0 5
64799: PUSH
64800: LD_VAR 0 8
64804: PPUSH
64805: LD_INT 2
64807: PPUSH
64808: CALL_OW 275
64812: PLUS
64813: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
64814: LD_ADDR_VAR 0 6
64818: PUSH
64819: LD_VAR 0 6
64823: PUSH
64824: LD_VAR 0 8
64828: PPUSH
64829: LD_INT 3
64831: PPUSH
64832: CALL_OW 275
64836: PLUS
64837: ST_TO_ADDR
// end ;
64838: GO 64748
64840: POP
64841: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
64842: LD_STRING setSpecText(
64844: PUSH
64845: LD_VAR 0 2
64849: STR
64850: PUSH
64851: LD_STRING ,
64853: STR
64854: PUSH
64855: LD_INT 2
64857: STR
64858: PUSH
64859: LD_STRING ,
64861: STR
64862: PUSH
64863: LD_VAR 0 4
64867: STR
64868: PUSH
64869: LD_STRING )
64871: STR
64872: PPUSH
64873: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
64877: LD_STRING setSpecText(
64879: PUSH
64880: LD_VAR 0 2
64884: STR
64885: PUSH
64886: LD_STRING ,
64888: STR
64889: PUSH
64890: LD_INT 3
64892: STR
64893: PUSH
64894: LD_STRING ,
64896: STR
64897: PUSH
64898: LD_VAR 0 5
64902: STR
64903: PUSH
64904: LD_STRING )
64906: STR
64907: PPUSH
64908: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
64912: LD_STRING setSpecText(
64914: PUSH
64915: LD_VAR 0 2
64919: STR
64920: PUSH
64921: LD_STRING ,
64923: STR
64924: PUSH
64925: LD_INT 4
64927: STR
64928: PUSH
64929: LD_STRING ,
64931: STR
64932: PUSH
64933: LD_VAR 0 6
64937: STR
64938: PUSH
64939: LD_STRING )
64941: STR
64942: PPUSH
64943: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
64947: LD_STRING setSpecText(
64949: PUSH
64950: LD_VAR 0 2
64954: STR
64955: PUSH
64956: LD_STRING ,
64958: STR
64959: PUSH
64960: LD_INT 5
64962: STR
64963: PUSH
64964: LD_STRING ,
64966: STR
64967: PUSH
64968: LD_VAR 0 7
64972: STR
64973: PUSH
64974: LD_STRING )
64976: STR
64977: PPUSH
64978: CALL_OW 559
// end ; end ;
64982: GO 64598
64984: POP
64985: POP
// end ;
64986: LD_VAR 0 1
64990: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
64991: LD_INT 2
64993: PUSH
64994: LD_INT 30
64996: PUSH
64997: LD_INT 0
64999: PUSH
65000: EMPTY
65001: LIST
65002: LIST
65003: PUSH
65004: LD_INT 30
65006: PUSH
65007: LD_INT 1
65009: PUSH
65010: EMPTY
65011: LIST
65012: LIST
65013: PUSH
65014: EMPTY
65015: LIST
65016: LIST
65017: LIST
65018: PPUSH
65019: CALL_OW 69
65023: IFFALSE 65033
65025: GO 65027
65027: DISABLE
// begin enable ;
65028: ENABLE
// UpdateSpectatorBar ;
65029: CALL 64574 0 0
// end ;
65033: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
65034: LD_INT 0
65036: PPUSH
// end ;
65037: LD_VAR 0 12
65041: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
65042: LD_INT 0
65044: PPUSH
65045: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
65046: LD_VAR 0 1
65050: NOT
65051: IFTRUE 65070
65053: PUSH
65054: LD_VAR 0 2
65058: PPUSH
65059: LD_VAR 0 3
65063: PPUSH
65064: CALL_OW 488
65068: NOT
65069: OR
65070: IFTRUE 65105
65072: PUSH
65073: LD_VAR 0 1
65077: PPUSH
65078: CALL_OW 266
65082: PUSH
65083: LD_INT 3
65085: NONEQUAL
65086: IFFALSE 65104
65088: PUSH
65089: LD_VAR 0 1
65093: PPUSH
65094: CALL_OW 247
65098: PUSH
65099: LD_INT 1
65101: EQUAL
65102: NOT
65103: AND
65104: OR
65105: IFFALSE 65109
// exit ;
65107: GO 65391
// if GetType ( factory ) = unit_human then
65109: LD_VAR 0 1
65113: PPUSH
65114: CALL_OW 247
65118: PUSH
65119: LD_INT 1
65121: EQUAL
65122: IFFALSE 65139
// factory := IsInUnit ( factory ) ;
65124: LD_ADDR_VAR 0 1
65128: PUSH
65129: LD_VAR 0 1
65133: PPUSH
65134: CALL_OW 310
65138: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
65139: LD_VAR 0 1
65143: PPUSH
65144: CALL_OW 266
65148: PUSH
65149: LD_INT 3
65151: NONEQUAL
65152: IFFALSE 65156
// exit ;
65154: GO 65391
// for i := 1 to Count ( factoryWaypoints ) do
65156: LD_ADDR_VAR 0 5
65160: PUSH
65161: DOUBLE
65162: LD_INT 1
65164: DEC
65165: ST_TO_ADDR
65166: LD_EXP 53
65170: PPUSH
65171: CALL 17674 0 1
65175: PUSH
65176: FOR_TO
65177: IFFALSE 65339
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
65179: LD_VAR 0 2
65183: PPUSH
65184: LD_VAR 0 3
65188: PPUSH
65189: CALL_OW 428
65193: PUSH
65194: LD_EXP 53
65198: PUSH
65199: LD_VAR 0 5
65203: ARRAY
65204: PUSH
65205: LD_INT 2
65207: ARRAY
65208: EQUAL
65209: IFFALSE 65241
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
65211: LD_ADDR_EXP 53
65215: PUSH
65216: LD_EXP 53
65220: PPUSH
65221: LD_VAR 0 5
65225: PPUSH
65226: CALL_OW 3
65230: ST_TO_ADDR
// UpdateFactoryWaypoints ;
65231: CALL 65396 0 0
// exit ;
65235: POP
65236: POP
65237: GO 65391
// end else
65239: GO 65337
// if factory = factoryWaypoints [ i ] [ 2 ] then
65241: LD_VAR 0 1
65245: PUSH
65246: LD_EXP 53
65250: PUSH
65251: LD_VAR 0 5
65255: ARRAY
65256: PUSH
65257: LD_INT 2
65259: ARRAY
65260: EQUAL
65261: IFFALSE 65337
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
65263: LD_ADDR_EXP 53
65267: PUSH
65268: LD_EXP 53
65272: PPUSH
65273: LD_VAR 0 5
65277: PPUSH
65278: CALL_OW 3
65282: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
65283: LD_ADDR_EXP 53
65287: PUSH
65288: LD_EXP 53
65292: PPUSH
65293: LD_VAR 0 1
65297: PPUSH
65298: CALL_OW 255
65302: PUSH
65303: LD_VAR 0 1
65307: PUSH
65308: LD_VAR 0 2
65312: PUSH
65313: LD_VAR 0 3
65317: PUSH
65318: EMPTY
65319: LIST
65320: LIST
65321: LIST
65322: LIST
65323: PPUSH
65324: CALL 53606 0 2
65328: ST_TO_ADDR
// UpdateFactoryWaypoints ;
65329: CALL 65396 0 0
// exit ;
65333: POP
65334: POP
65335: GO 65391
// end ; end ;
65337: GO 65176
65339: POP
65340: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
65341: LD_ADDR_EXP 53
65345: PUSH
65346: LD_EXP 53
65350: PPUSH
65351: LD_VAR 0 1
65355: PPUSH
65356: CALL_OW 255
65360: PUSH
65361: LD_VAR 0 1
65365: PUSH
65366: LD_VAR 0 2
65370: PUSH
65371: LD_VAR 0 3
65375: PUSH
65376: EMPTY
65377: LIST
65378: LIST
65379: LIST
65380: LIST
65381: PPUSH
65382: CALL 53606 0 2
65386: ST_TO_ADDR
// UpdateFactoryWaypoints ;
65387: CALL 65396 0 0
// end ;
65391: LD_VAR 0 4
65395: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
65396: LD_INT 0
65398: PPUSH
65399: PPUSH
65400: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
65401: LD_STRING resetFactoryWaypoint();
65403: PPUSH
65404: CALL_OW 559
// if factoryWaypoints then
65408: LD_EXP 53
65412: IFFALSE 65533
// begin list := factoryWaypoints ;
65414: LD_ADDR_VAR 0 3
65418: PUSH
65419: LD_EXP 53
65423: ST_TO_ADDR
// for i := 1 to list do
65424: LD_ADDR_VAR 0 2
65428: PUSH
65429: DOUBLE
65430: LD_INT 1
65432: DEC
65433: ST_TO_ADDR
65434: LD_VAR 0 3
65438: PUSH
65439: FOR_TO
65440: IFFALSE 65531
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
65442: LD_STRING setFactoryWaypointXY(
65444: PUSH
65445: LD_VAR 0 3
65449: PUSH
65450: LD_VAR 0 2
65454: ARRAY
65455: PUSH
65456: LD_INT 1
65458: ARRAY
65459: STR
65460: PUSH
65461: LD_STRING ,
65463: STR
65464: PUSH
65465: LD_VAR 0 3
65469: PUSH
65470: LD_VAR 0 2
65474: ARRAY
65475: PUSH
65476: LD_INT 2
65478: ARRAY
65479: STR
65480: PUSH
65481: LD_STRING ,
65483: STR
65484: PUSH
65485: LD_VAR 0 3
65489: PUSH
65490: LD_VAR 0 2
65494: ARRAY
65495: PUSH
65496: LD_INT 3
65498: ARRAY
65499: STR
65500: PUSH
65501: LD_STRING ,
65503: STR
65504: PUSH
65505: LD_VAR 0 3
65509: PUSH
65510: LD_VAR 0 2
65514: ARRAY
65515: PUSH
65516: LD_INT 4
65518: ARRAY
65519: STR
65520: PUSH
65521: LD_STRING )
65523: STR
65524: PPUSH
65525: CALL_OW 559
65529: GO 65439
65531: POP
65532: POP
// end ; end ;
65533: LD_VAR 0 1
65537: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
65538: LD_INT 0
65540: PPUSH
// if HexInfo ( x , y ) = warehouse then
65541: LD_VAR 0 2
65545: PPUSH
65546: LD_VAR 0 3
65550: PPUSH
65551: CALL_OW 428
65555: PUSH
65556: LD_VAR 0 1
65560: EQUAL
65561: IFFALSE 65588
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
65563: LD_ADDR_EXP 55
65567: PUSH
65568: LD_EXP 55
65572: PPUSH
65573: LD_VAR 0 1
65577: PPUSH
65578: LD_INT 0
65580: PPUSH
65581: CALL_OW 1
65585: ST_TO_ADDR
65586: GO 65639
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
65588: LD_ADDR_EXP 55
65592: PUSH
65593: LD_EXP 55
65597: PPUSH
65598: LD_VAR 0 1
65602: PPUSH
65603: LD_VAR 0 1
65607: PPUSH
65608: CALL_OW 255
65612: PUSH
65613: LD_VAR 0 1
65617: PUSH
65618: LD_VAR 0 2
65622: PUSH
65623: LD_VAR 0 3
65627: PUSH
65628: EMPTY
65629: LIST
65630: LIST
65631: LIST
65632: LIST
65633: PPUSH
65634: CALL_OW 1
65638: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
65639: CALL 65648 0 0
// end ;
65643: LD_VAR 0 4
65647: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
65648: LD_INT 0
65650: PPUSH
65651: PPUSH
65652: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
65653: LD_STRING resetWarehouseGatheringPoints();
65655: PPUSH
65656: CALL_OW 559
// if warehouseGatheringPoints then
65660: LD_EXP 55
65664: IFFALSE 65790
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
65666: LD_ADDR_VAR 0 3
65670: PUSH
65671: LD_EXP 55
65675: PPUSH
65676: CALL 57540 0 1
65680: ST_TO_ADDR
// for i := 1 to list do
65681: LD_ADDR_VAR 0 2
65685: PUSH
65686: DOUBLE
65687: LD_INT 1
65689: DEC
65690: ST_TO_ADDR
65691: LD_VAR 0 3
65695: PUSH
65696: FOR_TO
65697: IFFALSE 65788
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
65699: LD_STRING setWarehouseGatheringPointXY(
65701: PUSH
65702: LD_VAR 0 3
65706: PUSH
65707: LD_VAR 0 2
65711: ARRAY
65712: PUSH
65713: LD_INT 1
65715: ARRAY
65716: STR
65717: PUSH
65718: LD_STRING ,
65720: STR
65721: PUSH
65722: LD_VAR 0 3
65726: PUSH
65727: LD_VAR 0 2
65731: ARRAY
65732: PUSH
65733: LD_INT 2
65735: ARRAY
65736: STR
65737: PUSH
65738: LD_STRING ,
65740: STR
65741: PUSH
65742: LD_VAR 0 3
65746: PUSH
65747: LD_VAR 0 2
65751: ARRAY
65752: PUSH
65753: LD_INT 3
65755: ARRAY
65756: STR
65757: PUSH
65758: LD_STRING ,
65760: STR
65761: PUSH
65762: LD_VAR 0 3
65766: PUSH
65767: LD_VAR 0 2
65771: ARRAY
65772: PUSH
65773: LD_INT 4
65775: ARRAY
65776: STR
65777: PUSH
65778: LD_STRING )
65780: STR
65781: PPUSH
65782: CALL_OW 559
65786: GO 65696
65788: POP
65789: POP
// end ; end ;
65790: LD_VAR 0 1
65794: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
65795: LD_INT 0
65797: PPUSH
65798: PPUSH
// if not mpSidePositions then
65799: LD_EXP 37
65803: NOT
65804: IFFALSE 65808
// exit ;
65806: GO 65879
// result :=  ;
65808: LD_ADDR_VAR 0 1
65812: PUSH
65813: LD_STRING 
65815: ST_TO_ADDR
// for i := 1 to 8 do
65816: LD_ADDR_VAR 0 2
65820: PUSH
65821: DOUBLE
65822: LD_INT 1
65824: DEC
65825: ST_TO_ADDR
65826: LD_INT 8
65828: PUSH
65829: FOR_TO
65830: IFFALSE 65860
// begin result := result & mpSidePositions [ i ] & ; ;
65832: LD_ADDR_VAR 0 1
65836: PUSH
65837: LD_VAR 0 1
65841: PUSH
65842: LD_EXP 37
65846: PUSH
65847: LD_VAR 0 2
65851: ARRAY
65852: STR
65853: PUSH
65854: LD_STRING ;
65856: STR
65857: ST_TO_ADDR
// end ;
65858: GO 65829
65860: POP
65861: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
65862: LD_STRING setMultiplayerRealPosition("
65864: PUSH
65865: LD_VAR 0 1
65869: STR
65870: PUSH
65871: LD_STRING ");
65873: STR
65874: PPUSH
65875: CALL_OW 559
// end ;
65879: LD_VAR 0 1
65883: RET
