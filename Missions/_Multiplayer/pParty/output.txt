// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 2393 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 2816 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 1 , 1 ] ;
  20: LD_ADDR_EXP 4
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 1
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ 0 , 1 , 2 , 4 ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 5
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: EMPTY
 123: LIST
 124: LIST
 125: PUSH
 126: LD_INT 9
 128: PUSH
 129: LD_INT 12
 131: PUSH
 132: LD_INT 15
 134: PUSH
 135: LD_INT 24
 137: PUSH
 138: EMPTY
 139: LIST
 140: LIST
 141: LIST
 142: LIST
 143: PUSH
 144: LD_INT 1
 146: PUSH
 147: LD_INT 3
 149: PUSH
 150: LD_INT 5
 152: PUSH
 153: LD_INT 7
 155: PUSH
 156: EMPTY
 157: LIST
 158: LIST
 159: LIST
 160: LIST
 161: PUSH
 162: LD_INT 0
 164: PUSH
 165: LD_INT 0
 167: PUSH
 168: LD_INT 0
 170: PUSH
 171: EMPTY
 172: LIST
 173: LIST
 174: LIST
 175: PUSH
 176: LD_INT 100
 178: PUSH
 179: LD_INT 30
 181: PUSH
 182: LD_INT 0
 184: PUSH
 185: EMPTY
 186: LIST
 187: LIST
 188: LIST
 189: PUSH
 190: LD_INT 200
 192: PUSH
 193: LD_INT 75
 195: PUSH
 196: LD_INT 10
 198: PUSH
 199: EMPTY
 200: LIST
 201: LIST
 202: LIST
 203: PUSH
 204: LD_INT 500
 206: PUSH
 207: LD_INT 150
 209: PUSH
 210: LD_INT 30
 212: PUSH
 213: EMPTY
 214: LIST
 215: LIST
 216: LIST
 217: PUSH
 218: EMPTY
 219: LIST
 220: LIST
 221: LIST
 222: LIST
 223: PUSH
 224: LD_INT 1
 226: PUSH
 227: LD_INT 2
 229: PUSH
 230: LD_INT 3
 232: PUSH
 233: LD_INT 4
 235: PUSH
 236: EMPTY
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: PUSH
 242: LD_INT 0
 244: PUSH
 245: LD_INT 1
 247: PUSH
 248: LD_INT 2
 250: PUSH
 251: EMPTY
 252: LIST
 253: LIST
 254: LIST
 255: PUSH
 256: LD_INT 0
 258: PUSH
 259: LD_INT 1
 261: PUSH
 262: LD_INT 2
 264: PUSH
 265: EMPTY
 266: LIST
 267: LIST
 268: LIST
 269: PUSH
 270: LD_INT 250
 272: PUSH
 273: LD_INT 350
 275: PUSH
 276: LD_INT 500
 278: PUSH
 279: LD_INT 1000
 281: PUSH
 282: LD_INT 2000
 284: PUSH
 285: EMPTY
 286: LIST
 287: LIST
 288: LIST
 289: LIST
 290: LIST
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: LD_INT 2
 297: PUSH
 298: EMPTY
 299: LIST
 300: LIST
 301: PUSH
 302: LD_INT 0
 304: PUSH
 305: LD_INT 10500
 307: PUSH
 308: LD_INT 21000
 310: PUSH
 311: LD_INT 31500
 313: PUSH
 314: LD_INT 42000
 316: PUSH
 317: LD_INT 63000
 319: PUSH
 320: EMPTY
 321: LIST
 322: LIST
 323: LIST
 324: LIST
 325: LIST
 326: LIST
 327: PUSH
 328: LD_INT 0
 330: PUSH
 331: LD_INT 1
 333: PUSH
 334: EMPTY
 335: LIST
 336: LIST
 337: PUSH
 338: LD_INT 1
 340: NEG
 341: PUSH
 342: LD_INT 350
 344: PUSH
 345: LD_INT 700
 347: PUSH
 348: LD_INT 1400
 350: PUSH
 351: LD_INT 0
 353: PUSH
 354: EMPTY
 355: LIST
 356: LIST
 357: LIST
 358: LIST
 359: LIST
 360: PUSH
 361: LD_INT 0
 363: PUSH
 364: LD_INT 1
 366: PUSH
 367: EMPTY
 368: LIST
 369: LIST
 370: PUSH
 371: LD_INT 0
 373: PUSH
 374: LD_INT 13650
 376: PUSH
 377: LD_INT 7350
 379: PUSH
 380: EMPTY
 381: LIST
 382: LIST
 383: LIST
 384: PUSH
 385: LD_INT 0
 387: PUSH
 388: LD_INT 2
 390: PUSH
 391: LD_INT 4
 393: PUSH
 394: LD_INT 6
 396: PUSH
 397: EMPTY
 398: LIST
 399: LIST
 400: LIST
 401: LIST
 402: PUSH
 403: EMPTY
 404: PUSH
 405: EMPTY
 406: PUSH
 407: LD_INT 0
 409: PUSH
 410: LD_INT 1
 412: PUSH
 413: LD_INT 31500
 415: PUSH
 416: LD_INT 52500
 418: PUSH
 419: LD_INT 63000
 421: PUSH
 422: LD_INT 94500
 424: PUSH
 425: LD_INT 126000
 427: PUSH
 428: LD_INT 189000
 430: PUSH
 431: LD_INT 210000
 433: PUSH
 434: LD_INT 252000
 436: PUSH
 437: LD_INT 378000
 439: PUSH
 440: EMPTY
 441: LIST
 442: LIST
 443: LIST
 444: LIST
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: PUSH
 453: EMPTY
 454: PUSH
 455: LD_INT 0
 457: PUSH
 458: LD_INT 1
 460: PUSH
 461: LD_INT 2
 463: PUSH
 464: LD_INT 4
 466: PUSH
 467: EMPTY
 468: LIST
 469: LIST
 470: LIST
 471: LIST
 472: PUSH
 473: LD_INT 0
 475: PUSH
 476: LD_INT 6300
 478: PUSH
 479: LD_INT 10500
 481: PUSH
 482: LD_INT 16800
 484: PUSH
 485: LD_INT 21000
 487: PUSH
 488: LD_INT 25200
 490: PUSH
 491: LD_INT 31500
 493: PUSH
 494: LD_INT 42000
 496: PUSH
 497: LD_INT 63000
 499: PUSH
 500: EMPTY
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: PUSH
 511: EMPTY
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: LIST
 522: LIST
 523: LIST
 524: LIST
 525: LIST
 526: LIST
 527: LIST
 528: LIST
 529: LIST
 530: LIST
 531: LIST
 532: LIST
 533: ST_TO_ADDR
// mpGameSettings := [ 1 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 0 , 0 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 3 3$0 ] ;
 534: LD_ADDR_EXP 6
 538: PUSH
 539: LD_INT 1
 541: PUSH
 542: LD_INT 15
 544: PUSH
 545: LD_INT 4
 547: PUSH
 548: LD_INT 100
 550: PUSH
 551: LD_INT 30
 553: PUSH
 554: LD_INT 0
 556: PUSH
 557: EMPTY
 558: LIST
 559: LIST
 560: LIST
 561: PUSH
 562: LD_INT 3
 564: PUSH
 565: LD_INT 1
 567: PUSH
 568: LD_INT 2
 570: PUSH
 571: LD_INT 250
 573: PUSH
 574: LD_INT 0
 576: PUSH
 577: LD_INT 0
 579: PUSH
 580: LD_INT 1
 582: PUSH
 583: LD_INT 700
 585: PUSH
 586: LD_INT 1
 588: PUSH
 589: LD_INT 700
 591: PUSH
 592: LD_INT 3
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 0
 600: PUSH
 601: LD_INT 31500
 603: PUSH
 604: LD_INT 0
 606: PUSH
 607: LD_INT 0
 609: PUSH
 610: LD_INT 6300
 612: PUSH
 613: EMPTY
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: LIST
 624: LIST
 625: LIST
 626: LIST
 627: LIST
 628: LIST
 629: LIST
 630: LIST
 631: LIST
 632: LIST
 633: LIST
 634: LIST
 635: ST_TO_ADDR
// mpGameType := GameTypeNormal ;
 636: LD_ADDR_EXP 3
 640: PUSH
 641: LD_INT 1
 643: ST_TO_ADDR
// your_side := 1 ;
 644: LD_ADDR_OWVAR 2
 648: PUSH
 649: LD_INT 1
 651: ST_TO_ADDR
// mpSidePositions := [ 1 , 2 , 3 , 4 , 0 , 0 , 0 , 0 ] ;
 652: LD_ADDR_EXP 7
 656: PUSH
 657: LD_INT 1
 659: PUSH
 660: LD_INT 2
 662: PUSH
 663: LD_INT 3
 665: PUSH
 666: LD_INT 4
 668: PUSH
 669: LD_INT 0
 671: PUSH
 672: LD_INT 0
 674: PUSH
 675: LD_INT 0
 677: PUSH
 678: LD_INT 0
 680: PUSH
 681: EMPTY
 682: LIST
 683: LIST
 684: LIST
 685: LIST
 686: LIST
 687: LIST
 688: LIST
 689: LIST
 690: ST_TO_ADDR
// mpSideTeams := [ 1 , 1 , 2 , 2 , 0 , 0 , 0 , 0 ] ;
 691: LD_ADDR_EXP 8
 695: PUSH
 696: LD_INT 1
 698: PUSH
 699: LD_INT 1
 701: PUSH
 702: LD_INT 2
 704: PUSH
 705: LD_INT 2
 707: PUSH
 708: LD_INT 0
 710: PUSH
 711: LD_INT 0
 713: PUSH
 714: LD_INT 0
 716: PUSH
 717: LD_INT 0
 719: PUSH
 720: EMPTY
 721: LIST
 722: LIST
 723: LIST
 724: LIST
 725: LIST
 726: LIST
 727: LIST
 728: LIST
 729: ST_TO_ADDR
// mpSideNations := [ 3 , 3 , 3 , 3 , 0 , 0 , 0 , 0 ] ;
 730: LD_ADDR_EXP 9
 734: PUSH
 735: LD_INT 3
 737: PUSH
 738: LD_INT 3
 740: PUSH
 741: LD_INT 3
 743: PUSH
 744: LD_INT 3
 746: PUSH
 747: LD_INT 0
 749: PUSH
 750: LD_INT 0
 752: PUSH
 753: LD_INT 0
 755: PUSH
 756: LD_INT 0
 758: PUSH
 759: EMPTY
 760: LIST
 761: LIST
 762: LIST
 763: LIST
 764: LIST
 765: LIST
 766: LIST
 767: LIST
 768: ST_TO_ADDR
// mpTeams := [ [ 1 , 2 ] , [ 3 , 4 ] ] ;
 769: LD_ADDR_EXP 10
 773: PUSH
 774: LD_INT 1
 776: PUSH
 777: LD_INT 2
 779: PUSH
 780: EMPTY
 781: LIST
 782: LIST
 783: PUSH
 784: LD_INT 3
 786: PUSH
 787: LD_INT 4
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: PUSH
 794: EMPTY
 795: LIST
 796: LIST
 797: ST_TO_ADDR
// mpTeamGame := true ;
 798: LD_ADDR_EXP 11
 802: PUSH
 803: LD_INT 1
 805: ST_TO_ADDR
// mpMapSize := [ 100 , 120 ] ;
 806: LD_ADDR_EXP 29
 810: PUSH
 811: LD_INT 100
 813: PUSH
 814: LD_INT 120
 816: PUSH
 817: EMPTY
 818: LIST
 819: LIST
 820: ST_TO_ADDR
// end ;
 821: LD_VAR 0 1
 825: RET
// export kingArea , kingCamArea ; export function GetMultiplayerMapData ( gameType ) ; var i , all , area , hasOil , hasSib , baseLevel , startPos ; begin
 826: LD_INT 0
 828: PPUSH
 829: PPUSH
 830: PPUSH
 831: PPUSH
 832: PPUSH
 833: PPUSH
 834: PPUSH
 835: PPUSH
// mpBuildUpAreas := [ BaseArea1 , BaseArea2 , BaseArea3 , BaseArea4 ] ;
 836: LD_ADDR_EXP 19
 840: PUSH
 841: LD_INT 1
 843: PUSH
 844: LD_INT 3
 846: PUSH
 847: LD_INT 2
 849: PUSH
 850: LD_INT 4
 852: PUSH
 853: EMPTY
 854: LIST
 855: LIST
 856: LIST
 857: LIST
 858: ST_TO_ADDR
// mpMarkedAreas := [ ] union mpBuildUpAreas ;
 859: LD_ADDR_EXP 18
 863: PUSH
 864: EMPTY
 865: PUSH
 866: LD_EXP 19
 870: UNION
 871: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 872: LD_VAR 0 1
 876: PUSH
 877: LD_INT 2
 879: EQUAL
 880: IFFALSE 892
// baseLevel := 1 else
 882: LD_ADDR_VAR 0 8
 886: PUSH
 887: LD_INT 1
 889: ST_TO_ADDR
 890: GO 906
// baseLevel := mpGameSettings [ 1 ] ;
 892: LD_ADDR_VAR 0 8
 896: PUSH
 897: LD_EXP 6
 901: PUSH
 902: LD_INT 1
 904: ARRAY
 905: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 906: LD_ADDR_EXP 24
 910: PUSH
 911: LD_EXP 6
 915: PUSH
 916: LD_INT 2
 918: ARRAY
 919: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 920: LD_ADDR_EXP 25
 924: PUSH
 925: LD_EXP 6
 929: PUSH
 930: LD_INT 3
 932: ARRAY
 933: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 934: LD_ADDR_EXP 15
 938: PUSH
 939: LD_EXP 6
 943: PUSH
 944: LD_INT 4
 946: ARRAY
 947: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 948: LD_ADDR_EXP 27
 952: PUSH
 953: LD_EXP 6
 957: PUSH
 958: LD_INT 5
 960: ARRAY
 961: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
 962: LD_ADDR_VAR 0 6
 966: PUSH
 967: LD_EXP 6
 971: PUSH
 972: LD_INT 6
 974: ARRAY
 975: PUSH
 976: LD_INT 0
 978: GREATER
 979: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
 980: LD_ADDR_VAR 0 7
 984: PUSH
 985: LD_EXP 6
 989: PUSH
 990: LD_INT 7
 992: ARRAY
 993: PUSH
 994: LD_INT 0
 996: GREATER
 997: ST_TO_ADDR
// mpKingArea := 0 ;
 998: LD_ADDR_EXP 34
1002: PUSH
1003: LD_INT 0
1005: ST_TO_ADDR
// mpPoints := 0 ;
1006: LD_ADDR_EXP 35
1010: PUSH
1011: LD_INT 0
1013: ST_TO_ADDR
// mpEmissions := 0 ;
1014: LD_ADDR_EXP 37
1018: PUSH
1019: LD_INT 0
1021: ST_TO_ADDR
// kingArea := 0 ;
1022: LD_ADDR_EXP 1
1026: PUSH
1027: LD_INT 0
1029: ST_TO_ADDR
// kingCamArea := 0 ;
1030: LD_ADDR_EXP 2
1034: PUSH
1035: LD_INT 0
1037: ST_TO_ADDR
// if mpGameSettings [ 9 ] then
1038: LD_EXP 6
1042: PUSH
1043: LD_INT 9
1045: ARRAY
1046: IFFALSE 1178
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1048: LD_ADDR_EXP 36
1052: PUSH
1053: LD_INT 1
1055: PUSH
1056: LD_INT 1
1058: PUSH
1059: LD_INT 1
1061: PUSH
1062: LD_INT 2
1064: PUSH
1065: EMPTY
1066: LIST
1067: LIST
1068: LIST
1069: LIST
1070: PUSH
1071: LD_INT 1
1073: PUSH
1074: LD_INT 1
1076: PUSH
1077: LD_INT 1
1079: PUSH
1080: LD_INT 3
1082: PUSH
1083: EMPTY
1084: LIST
1085: LIST
1086: LIST
1087: LIST
1088: PUSH
1089: EMPTY
1090: LIST
1091: LIST
1092: PUSH
1093: LD_INT 12
1095: PUSH
1096: LD_INT 1
1098: PUSH
1099: LD_INT 1
1101: PUSH
1102: LD_INT 24
1104: PUSH
1105: EMPTY
1106: LIST
1107: LIST
1108: LIST
1109: LIST
1110: PUSH
1111: LD_INT 12
1113: PUSH
1114: LD_INT 1
1116: PUSH
1117: LD_INT 1
1119: PUSH
1120: LD_INT 23
1122: PUSH
1123: EMPTY
1124: LIST
1125: LIST
1126: LIST
1127: LIST
1128: PUSH
1129: EMPTY
1130: LIST
1131: LIST
1132: PUSH
1133: LD_INT 21
1135: PUSH
1136: LD_INT 1
1138: PUSH
1139: LD_INT 1
1141: PUSH
1142: LD_INT 42
1144: PUSH
1145: EMPTY
1146: LIST
1147: LIST
1148: LIST
1149: LIST
1150: PUSH
1151: LD_INT 21
1153: PUSH
1154: LD_INT 1
1156: PUSH
1157: LD_INT 1
1159: PUSH
1160: LD_INT 42
1162: PUSH
1163: EMPTY
1164: LIST
1165: LIST
1166: LIST
1167: LIST
1168: PUSH
1169: EMPTY
1170: LIST
1171: LIST
1172: PUSH
1173: EMPTY
1174: LIST
1175: LIST
1176: LIST
1177: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1178: LD_ADDR_EXP 16
1182: PUSH
1183: LD_EXP 6
1187: PUSH
1188: LD_INT 11
1190: ARRAY
1191: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1192: LD_ADDR_EXP 22
1196: PUSH
1197: LD_EXP 6
1201: PUSH
1202: LD_INT 12
1204: ARRAY
1205: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1206: LD_ADDR_EXP 26
1210: PUSH
1211: LD_EXP 6
1215: PUSH
1216: LD_INT 13
1218: ARRAY
1219: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1220: LD_ADDR_EXP 33
1224: PUSH
1225: LD_EXP 6
1229: PUSH
1230: LD_INT 14
1232: ARRAY
1233: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1234: LD_ADDR_EXP 30
1238: PUSH
1239: LD_EXP 6
1243: PUSH
1244: LD_INT 15
1246: ARRAY
1247: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1248: LD_ADDR_EXP 28
1252: PUSH
1253: LD_EXP 6
1257: PUSH
1258: LD_INT 18
1260: ARRAY
1261: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1262: LD_ADDR_EXP 20
1266: PUSH
1267: LD_EXP 6
1271: PUSH
1272: LD_INT 21
1274: ARRAY
1275: ST_TO_ADDR
// mpApemansArea := [ ApeArea1 , ApeArea2 , ApeArea3 , ApeArea4 ] ;
1276: LD_ADDR_EXP 31
1280: PUSH
1281: LD_INT 22
1283: PUSH
1284: LD_INT 24
1286: PUSH
1287: LD_INT 23
1289: PUSH
1290: LD_INT 25
1292: PUSH
1293: EMPTY
1294: LIST
1295: LIST
1296: LIST
1297: LIST
1298: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( DepotArea1 , 1 ) , GetBuildingFromArea ( DepotArea2 , 1 ) , GetBuildingFromArea ( DepotArea3 , 4 ) , GetBuildingFromArea ( DepotArea4 , 4 ) ] ;
1299: LD_ADDR_VAR 0 9
1303: PUSH
1304: LD_INT 26
1306: PPUSH
1307: LD_INT 1
1309: PPUSH
1310: CALL 54288 0 2
1314: PUSH
1315: LD_INT 29
1317: PPUSH
1318: LD_INT 1
1320: PPUSH
1321: CALL 54288 0 2
1325: PUSH
1326: LD_INT 32
1328: PPUSH
1329: LD_INT 4
1331: PPUSH
1332: CALL 54288 0 2
1336: PUSH
1337: LD_INT 36
1339: PPUSH
1340: LD_INT 4
1342: PPUSH
1343: CALL 54288 0 2
1347: PUSH
1348: EMPTY
1349: LIST
1350: LIST
1351: LIST
1352: LIST
1353: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1354: LD_ADDR_VAR 0 3
1358: PUSH
1359: DOUBLE
1360: LD_INT 1
1362: DEC
1363: ST_TO_ADDR
1364: LD_VAR 0 9
1368: PPUSH
1369: CALL 13593 0 1
1373: PUSH
1374: FOR_TO
1375: IFFALSE 1479
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1377: LD_ADDR_EXP 21
1381: PUSH
1382: LD_EXP 21
1386: PPUSH
1387: LD_VAR 0 3
1391: PPUSH
1392: LD_VAR 0 9
1396: PUSH
1397: LD_VAR 0 3
1401: ARRAY
1402: PUSH
1403: LD_INT 1
1405: ARRAY
1406: PPUSH
1407: LD_VAR 0 9
1411: PUSH
1412: LD_VAR 0 3
1416: ARRAY
1417: PUSH
1418: LD_INT 3
1420: ARRAY
1421: PPUSH
1422: LD_INT 10
1424: PPUSH
1425: CALL_OW 272
1429: PUSH
1430: LD_VAR 0 9
1434: PUSH
1435: LD_VAR 0 3
1439: ARRAY
1440: PUSH
1441: LD_INT 2
1443: ARRAY
1444: PPUSH
1445: LD_VAR 0 9
1449: PUSH
1450: LD_VAR 0 3
1454: ARRAY
1455: PUSH
1456: LD_INT 3
1458: ARRAY
1459: PPUSH
1460: LD_INT 10
1462: PPUSH
1463: CALL_OW 273
1467: PUSH
1468: EMPTY
1469: LIST
1470: LIST
1471: PPUSH
1472: CALL_OW 1
1476: ST_TO_ADDR
1477: GO 1374
1479: POP
1480: POP
// if baseLevel >= 1 then
1481: LD_VAR 0 8
1485: PUSH
1486: LD_INT 1
1488: GREATEREQUAL
1489: IFFALSE 1501
// mpDepots := startPos ;
1491: LD_ADDR_EXP 14
1495: PUSH
1496: LD_VAR 0 9
1500: ST_TO_ADDR
// if hasOil then
1501: LD_VAR 0 6
1505: IFFALSE 1588
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1507: LD_ADDR_VAR 0 4
1511: PUSH
1512: LD_EXP 6
1516: PUSH
1517: LD_INT 6
1519: ARRAY
1520: PUSH
1521: LD_INT 2
1523: EQUAL
1524: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( OilArea1 , all ) , GetSourcesFromArea ( OilArea2 , all ) , GetSourcesFromArea ( OilArea3 , all ) , GetSourcesFromArea ( OilArea4 , all ) ] ;
1525: LD_ADDR_EXP 12
1529: PUSH
1530: LD_INT 27
1532: PPUSH
1533: LD_VAR 0 4
1537: PPUSH
1538: CALL 54121 0 2
1542: PUSH
1543: LD_INT 30
1545: PPUSH
1546: LD_VAR 0 4
1550: PPUSH
1551: CALL 54121 0 2
1555: PUSH
1556: LD_INT 33
1558: PPUSH
1559: LD_VAR 0 4
1563: PPUSH
1564: CALL 54121 0 2
1568: PUSH
1569: LD_INT 35
1571: PPUSH
1572: LD_VAR 0 4
1576: PPUSH
1577: CALL 54121 0 2
1581: PUSH
1582: EMPTY
1583: LIST
1584: LIST
1585: LIST
1586: LIST
1587: ST_TO_ADDR
// end ; if hasSib then
1588: LD_VAR 0 7
1592: IFFALSE 1675
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1594: LD_ADDR_VAR 0 4
1598: PUSH
1599: LD_EXP 6
1603: PUSH
1604: LD_INT 7
1606: ARRAY
1607: PUSH
1608: LD_INT 2
1610: EQUAL
1611: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( SibArea1 , all ) , GetSourcesFromArea ( SibArea2 , all ) , GetSourcesFromArea ( SibArea3 , all ) , GetSourcesFromArea ( SibArea4 , all ) ] ;
1612: LD_ADDR_EXP 13
1616: PUSH
1617: LD_INT 28
1619: PPUSH
1620: LD_VAR 0 4
1624: PPUSH
1625: CALL 54121 0 2
1629: PUSH
1630: LD_INT 31
1632: PPUSH
1633: LD_VAR 0 4
1637: PPUSH
1638: CALL 54121 0 2
1642: PUSH
1643: LD_INT 34
1645: PPUSH
1646: LD_VAR 0 4
1650: PPUSH
1651: CALL 54121 0 2
1655: PUSH
1656: LD_INT 37
1658: PPUSH
1659: LD_VAR 0 4
1663: PPUSH
1664: CALL 54121 0 2
1668: PUSH
1669: EMPTY
1670: LIST
1671: LIST
1672: LIST
1673: LIST
1674: ST_TO_ADDR
// end ; end ;
1675: LD_VAR 0 2
1679: RET
// every 0 0$2 marked mpActive do var i , x , d , tmp , time , areas , moreAreas , normalTime , delayTime , maxTime ;
1680: GO 1682
1682: DISABLE
1683: LD_INT 0
1685: PPUSH
1686: PPUSH
1687: PPUSH
1688: PPUSH
1689: PPUSH
1690: PPUSH
1691: PPUSH
1692: PPUSH
1693: PPUSH
1694: PPUSH
// begin if not mpShipments then
1695: LD_EXP 27
1699: NOT
1700: IFFALSE 1704
// exit ;
1702: GO 2230
// case mpShipments of 1 :
1704: LD_EXP 27
1708: PUSH
1709: LD_INT 1
1711: DOUBLE
1712: EQUAL
1713: IFTRUE 1717
1715: GO 1752
1717: POP
// begin time := 0 0$30 ;
1718: LD_ADDR_VAR 0 5
1722: PUSH
1723: LD_INT 1050
1725: ST_TO_ADDR
// normalTime := 0 0$30 ;
1726: LD_ADDR_VAR 0 8
1730: PUSH
1731: LD_INT 1050
1733: ST_TO_ADDR
// maxTime := 1 1$20 ;
1734: LD_ADDR_VAR 0 10
1738: PUSH
1739: LD_INT 2800
1741: ST_TO_ADDR
// delayTime := 0 0$5 ;
1742: LD_ADDR_VAR 0 9
1746: PUSH
1747: LD_INT 175
1749: ST_TO_ADDR
// end ; 2 :
1750: GO 1882
1752: LD_INT 2
1754: DOUBLE
1755: EQUAL
1756: IFTRUE 1760
1758: GO 1795
1760: POP
// begin time := 0 0$25 ;
1761: LD_ADDR_VAR 0 5
1765: PUSH
1766: LD_INT 875
1768: ST_TO_ADDR
// normalTime := 0 0$25 ;
1769: LD_ADDR_VAR 0 8
1773: PUSH
1774: LD_INT 875
1776: ST_TO_ADDR
// maxTime := 1 1$10 ;
1777: LD_ADDR_VAR 0 10
1781: PUSH
1782: LD_INT 2450
1784: ST_TO_ADDR
// delayTime := 0 0$4 ;
1785: LD_ADDR_VAR 0 9
1789: PUSH
1790: LD_INT 140
1792: ST_TO_ADDR
// end ; 3 :
1793: GO 1882
1795: LD_INT 3
1797: DOUBLE
1798: EQUAL
1799: IFTRUE 1803
1801: GO 1838
1803: POP
// begin time := 0 0$20 ;
1804: LD_ADDR_VAR 0 5
1808: PUSH
1809: LD_INT 700
1811: ST_TO_ADDR
// normalTime := 0 0$20 ;
1812: LD_ADDR_VAR 0 8
1816: PUSH
1817: LD_INT 700
1819: ST_TO_ADDR
// maxTime := 1 1$00 ;
1820: LD_ADDR_VAR 0 10
1824: PUSH
1825: LD_INT 2100
1827: ST_TO_ADDR
// delayTime := 0 0$3 ;
1828: LD_ADDR_VAR 0 9
1832: PUSH
1833: LD_INT 105
1835: ST_TO_ADDR
// end ; 4 :
1836: GO 1882
1838: LD_INT 4
1840: DOUBLE
1841: EQUAL
1842: IFTRUE 1846
1844: GO 1881
1846: POP
// begin time := 0 0$15 ;
1847: LD_ADDR_VAR 0 5
1851: PUSH
1852: LD_INT 525
1854: ST_TO_ADDR
// normalTime := 0 0$15 ;
1855: LD_ADDR_VAR 0 8
1859: PUSH
1860: LD_INT 525
1862: ST_TO_ADDR
// maxTime := 0 0$55 ;
1863: LD_ADDR_VAR 0 10
1867: PUSH
1868: LD_INT 1925
1870: ST_TO_ADDR
// delayTime := 0 0$2 ;
1871: LD_ADDR_VAR 0 9
1875: PUSH
1876: LD_INT 70
1878: ST_TO_ADDR
// end ; end ;
1879: GO 1882
1881: POP
// areas := [ Center ] ;
1882: LD_ADDR_VAR 0 6
1886: PUSH
1887: LD_INT 21
1889: PUSH
1890: EMPTY
1891: LIST
1892: ST_TO_ADDR
// tmp := [ BaseArea1 , BaseArea2 , BaseArea3 , BaseArea4 ] ;
1893: LD_ADDR_VAR 0 4
1897: PUSH
1898: LD_INT 1
1900: PUSH
1901: LD_INT 3
1903: PUSH
1904: LD_INT 2
1906: PUSH
1907: LD_INT 4
1909: PUSH
1910: EMPTY
1911: LIST
1912: LIST
1913: LIST
1914: LIST
1915: ST_TO_ADDR
// for i := 1 to 8 do
1916: LD_ADDR_VAR 0 1
1920: PUSH
1921: DOUBLE
1922: LD_INT 1
1924: DEC
1925: ST_TO_ADDR
1926: LD_INT 8
1928: PUSH
1929: FOR_TO
1930: IFFALSE 1977
// begin if not mpSidePositions [ i ] then
1932: LD_EXP 7
1936: PUSH
1937: LD_VAR 0 1
1941: ARRAY
1942: NOT
1943: IFFALSE 1947
// continue ;
1945: GO 1929
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
1947: LD_ADDR_VAR 0 6
1951: PUSH
1952: LD_VAR 0 6
1956: PUSH
1957: LD_VAR 0 4
1961: PUSH
1962: LD_EXP 7
1966: PUSH
1967: LD_VAR 0 1
1971: ARRAY
1972: ARRAY
1973: ADD
1974: ST_TO_ADDR
// end ;
1975: GO 1929
1977: POP
1978: POP
// x := 1 ;
1979: LD_ADDR_VAR 0 2
1983: PUSH
1984: LD_INT 1
1986: ST_TO_ADDR
// d := 1 ;
1987: LD_ADDR_VAR 0 3
1991: PUSH
1992: LD_INT 1
1994: ST_TO_ADDR
// repeat wait ( time ) ;
1995: LD_VAR 0 5
1999: PPUSH
2000: CALL_OW 67
// x := Inc ( x ) ;
2004: LD_ADDR_VAR 0 2
2008: PUSH
2009: LD_VAR 0 2
2013: PPUSH
2014: CALL 50942 0 1
2018: ST_TO_ADDR
// if x > 5 then
2019: LD_VAR 0 2
2023: PUSH
2024: LD_INT 5
2026: GREATER
2027: IFFALSE 2052
// begin x := 1 ;
2029: LD_ADDR_VAR 0 2
2033: PUSH
2034: LD_INT 1
2036: ST_TO_ADDR
// d := Inc ( d ) ;
2037: LD_ADDR_VAR 0 3
2041: PUSH
2042: LD_VAR 0 3
2046: PPUSH
2047: CALL 50942 0 1
2051: ST_TO_ADDR
// end ; if d mod 2 = 0 then
2052: LD_VAR 0 3
2056: PUSH
2057: LD_INT 2
2059: MOD
2060: PUSH
2061: LD_INT 0
2063: EQUAL
2064: IFFALSE 2091
// moreAreas := [ Ring1 , Ring2 , Ring3 , Ring4 ] else
2066: LD_ADDR_VAR 0 7
2070: PUSH
2071: LD_INT 17
2073: PUSH
2074: LD_INT 18
2076: PUSH
2077: LD_INT 19
2079: PUSH
2080: LD_INT 20
2082: PUSH
2083: EMPTY
2084: LIST
2085: LIST
2086: LIST
2087: LIST
2088: ST_TO_ADDR
2089: GO 2130
// moreAreas := [ Safe1 , Safe2 , Safe3 , Safe4 , Between1 , Between2 , Between3 , Between4 ] ;
2091: LD_ADDR_VAR 0 7
2095: PUSH
2096: LD_INT 9
2098: PUSH
2099: LD_INT 10
2101: PUSH
2102: LD_INT 11
2104: PUSH
2105: LD_INT 12
2107: PUSH
2108: LD_INT 13
2110: PUSH
2111: LD_INT 14
2113: PUSH
2114: LD_INT 15
2116: PUSH
2117: LD_INT 16
2119: PUSH
2120: EMPTY
2121: LIST
2122: LIST
2123: LIST
2124: LIST
2125: LIST
2126: LIST
2127: LIST
2128: LIST
2129: ST_TO_ADDR
// for i in areas union moreAreas do
2130: LD_ADDR_VAR 0 1
2134: PUSH
2135: LD_VAR 0 6
2139: PUSH
2140: LD_VAR 0 7
2144: UNION
2145: PUSH
2146: FOR_IN
2147: IFFALSE 2186
// begin if GetResourceArea ( i , mat_cans ) < 30 then
2149: LD_VAR 0 1
2153: PPUSH
2154: LD_INT 1
2156: PPUSH
2157: CALL_OW 287
2161: PUSH
2162: LD_INT 30
2164: LESS
2165: IFFALSE 2184
// begin CreateCratesArea ( x , i , true ) ;
2167: LD_VAR 0 2
2171: PPUSH
2172: LD_VAR 0 1
2176: PPUSH
2177: LD_INT 1
2179: PPUSH
2180: CALL_OW 55
// end ; end ;
2184: GO 2146
2186: POP
2187: POP
// time := time + delayTime ;
2188: LD_ADDR_VAR 0 5
2192: PUSH
2193: LD_VAR 0 5
2197: PUSH
2198: LD_VAR 0 9
2202: PLUS
2203: ST_TO_ADDR
// if time > maxTime then
2204: LD_VAR 0 5
2208: PUSH
2209: LD_VAR 0 10
2213: GREATER
2214: IFFALSE 2226
// time := normalTime ;
2216: LD_ADDR_VAR 0 5
2220: PUSH
2221: LD_VAR 0 8
2225: ST_TO_ADDR
// until false ;
2226: LD_INT 0
2228: IFFALSE 1995
// end ; end_of_file
2230: PPOPN 10
2232: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2233: LD_VAR 0 1
2237: PPUSH
2238: CALL 55086 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2242: LD_VAR 0 1
2246: PPUSH
2247: CALL 7939 0 1
// end ;
2251: PPOPN 1
2253: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2254: LD_VAR 0 1
2258: PPUSH
2259: CALL 55103 0 1
// end ;
2263: PPOPN 1
2265: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2266: LD_VAR 0 1
2270: PPUSH
2271: CALL 8992 0 1
2275: PPOPN 1
2277: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2278: LD_VAR 0 1
2282: PPUSH
2283: LD_VAR 0 2
2287: PPUSH
2288: CALL 55144 0 2
2292: PPOPN 2
2294: END
// on VehicleConstruction_ApeConsumed ( factory , un ) do Multiplayer_VehicleConstruction_ApeConsumed ( factory , un ) ;
2295: LD_VAR 0 1
2299: PPUSH
2300: LD_VAR 0 2
2304: PPUSH
2305: CALL 8745 0 2
2309: PPOPN 2
2311: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ;
2312: LD_VAR 0 1
2316: PPUSH
2317: LD_VAR 0 2
2321: PPUSH
2322: LD_VAR 0 3
2326: PPUSH
2327: CALL 9045 0 3
2331: PPOPN 3
2333: END
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ;
2334: LD_VAR 0 1
2338: PPUSH
2339: LD_VAR 0 2
2343: PPUSH
2344: LD_VAR 0 3
2348: PPUSH
2349: LD_VAR 0 4
2353: PPUSH
2354: LD_VAR 0 5
2358: PPUSH
2359: CALL 9729 0 5
// end ;
2363: PPOPN 5
2365: END
// on VehicleCaptured ( newId , oldId , oldSide , unit ) do Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; end_of_file
2366: LD_VAR 0 1
2370: PPUSH
2371: LD_VAR 0 2
2375: PPUSH
2376: LD_VAR 0 3
2380: PPUSH
2381: LD_VAR 0 4
2385: PPUSH
2386: CALL 9832 0 4
2390: PPOPN 4
2392: END
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpCommanders , mpGlobalOilDeposits , mpGlobalSibDeposits , mpTeleports , mpArtifacts , mpTimeToWin , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
2393: LD_INT 0
2395: PPUSH
2396: PPUSH
// disable ( mpActive ) ;
2397: LD_INT 100
2399: DISABLE_MARKED
// disable ( mpWin ) ;
2400: LD_INT 101
2402: DISABLE_MARKED
// disable ( mpLose ) ;
2403: LD_INT 102
2405: DISABLE_MARKED
// mpGameType := 0 ;
2406: LD_ADDR_EXP 3
2410: PUSH
2411: LD_INT 0
2413: ST_TO_ADDR
// mpGameSettings := [ ] ;
2414: LD_ADDR_EXP 6
2418: PUSH
2419: EMPTY
2420: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
2421: LD_ADDR_EXP 4
2425: PUSH
2426: EMPTY
2427: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
2428: LD_ADDR_EXP 5
2432: PUSH
2433: EMPTY
2434: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
2435: LD_ADDR_EXP 29
2439: PUSH
2440: LD_INT 2
2442: PUSH
2443: LD_INT 2
2445: PUSH
2446: EMPTY
2447: LIST
2448: LIST
2449: ST_TO_ADDR
// mpOilDeposits := [ ] ;
2450: LD_ADDR_EXP 12
2454: PUSH
2455: EMPTY
2456: ST_TO_ADDR
// mpSibDeposits := [ ] ;
2457: LD_ADDR_EXP 13
2461: PUSH
2462: EMPTY
2463: ST_TO_ADDR
// mpGlobalOilDeposits := [ ] ;
2464: LD_ADDR_EXP 42
2468: PUSH
2469: EMPTY
2470: ST_TO_ADDR
// mpGlobalSibDeposits := [ ] ;
2471: LD_ADDR_EXP 43
2475: PUSH
2476: EMPTY
2477: ST_TO_ADDR
// mpDepots := [ ] ;
2478: LD_ADDR_EXP 14
2482: PUSH
2483: EMPTY
2484: ST_TO_ADDR
// mpBuildings := [ ] ;
2485: LD_ADDR_EXP 17
2489: PUSH
2490: EMPTY
2491: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
2492: LD_ADDR_EXP 18
2496: PUSH
2497: EMPTY
2498: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
2499: LD_ADDR_EXP 19
2503: PUSH
2504: EMPTY
2505: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
2506: LD_ADDR_EXP 20
2510: PUSH
2511: EMPTY
2512: ST_TO_ADDR
// mpStartingResources := [ ] ;
2513: LD_ADDR_EXP 15
2517: PUSH
2518: EMPTY
2519: ST_TO_ADDR
// mpStartPos := [ ] ;
2520: LD_ADDR_EXP 21
2524: PUSH
2525: EMPTY
2526: ST_TO_ADDR
// mpBattleFlag := - 1 ;
2527: LD_ADDR_EXP 22
2531: PUSH
2532: LD_INT 1
2534: NEG
2535: ST_TO_ADDR
// mpBattleFlags := [ ] ;
2536: LD_ADDR_EXP 23
2540: PUSH
2541: EMPTY
2542: ST_TO_ADDR
// mpApemans := [ ] ;
2543: LD_ADDR_EXP 30
2547: PUSH
2548: EMPTY
2549: ST_TO_ADDR
// mpApemansArea := [ ] ;
2550: LD_ADDR_EXP 31
2554: PUSH
2555: EMPTY
2556: ST_TO_ADDR
// mpRespawn := [ ] ;
2557: LD_ADDR_EXP 33
2561: PUSH
2562: EMPTY
2563: ST_TO_ADDR
// mpKingArea := 0 ;
2564: LD_ADDR_EXP 34
2568: PUSH
2569: LD_INT 0
2571: ST_TO_ADDR
// mpPoints := [ ] ;
2572: LD_ADDR_EXP 35
2576: PUSH
2577: EMPTY
2578: ST_TO_ADDR
// mpVehicles := 0 ;
2579: LD_ADDR_EXP 36
2583: PUSH
2584: LD_INT 0
2586: ST_TO_ADDR
// mpShipments := 0 ;
2587: LD_ADDR_EXP 27
2591: PUSH
2592: LD_INT 0
2594: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
2595: LD_ADDR_EXP 40
2599: PUSH
2600: EMPTY
2601: PUSH
2602: EMPTY
2603: PUSH
2604: EMPTY
2605: PUSH
2606: EMPTY
2607: PUSH
2608: EMPTY
2609: PUSH
2610: EMPTY
2611: PUSH
2612: EMPTY
2613: PUSH
2614: EMPTY
2615: PUSH
2616: EMPTY
2617: LIST
2618: LIST
2619: LIST
2620: LIST
2621: LIST
2622: LIST
2623: LIST
2624: LIST
2625: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
2626: LD_ADDR_EXP 32
2630: PUSH
2631: EMPTY
2632: PUSH
2633: EMPTY
2634: PUSH
2635: EMPTY
2636: PUSH
2637: EMPTY
2638: PUSH
2639: EMPTY
2640: PUSH
2641: EMPTY
2642: PUSH
2643: EMPTY
2644: PUSH
2645: EMPTY
2646: PUSH
2647: EMPTY
2648: LIST
2649: LIST
2650: LIST
2651: LIST
2652: LIST
2653: LIST
2654: LIST
2655: LIST
2656: ST_TO_ADDR
// mpCommanders := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
2657: LD_ADDR_EXP 41
2661: PUSH
2662: LD_INT 0
2664: PUSH
2665: LD_INT 0
2667: PUSH
2668: LD_INT 0
2670: PUSH
2671: LD_INT 0
2673: PUSH
2674: LD_INT 0
2676: PUSH
2677: LD_INT 0
2679: PUSH
2680: LD_INT 0
2682: PUSH
2683: LD_INT 0
2685: PUSH
2686: EMPTY
2687: LIST
2688: LIST
2689: LIST
2690: LIST
2691: LIST
2692: LIST
2693: LIST
2694: LIST
2695: ST_TO_ADDR
// mpEmissions := 0 ;
2696: LD_ADDR_EXP 37
2700: PUSH
2701: LD_INT 0
2703: ST_TO_ADDR
// mpTeleports := 0 ;
2704: LD_ADDR_EXP 44
2708: PUSH
2709: LD_INT 0
2711: ST_TO_ADDR
// mpArtifacts := 0 ;
2712: LD_ADDR_EXP 45
2716: PUSH
2717: LD_INT 0
2719: ST_TO_ADDR
// mpTimeToWin := 0 0$0 ;
2720: LD_ADDR_EXP 46
2724: PUSH
2725: LD_INT 0
2727: ST_TO_ADDR
// mpPeopleSkill := 3 ;
2728: LD_ADDR_EXP 25
2732: PUSH
2733: LD_INT 3
2735: ST_TO_ADDR
// mpPeopleAmount := 15 ;
2736: LD_ADDR_EXP 24
2740: PUSH
2741: LD_INT 15
2743: ST_TO_ADDR
// mpDisplayStrings := 0 ;
2744: LD_ADDR_EXP 38
2748: PUSH
2749: LD_INT 0
2751: ST_TO_ADDR
// mpGameActive := false ;
2752: LD_ADDR_EXP 39
2756: PUSH
2757: LD_INT 0
2759: ST_TO_ADDR
// mpBlockRespThread := false ;
2760: LD_ADDR_EXP 47
2764: PUSH
2765: LD_INT 0
2767: ST_TO_ADDR
// for i := 1 to 32 do
2768: LD_ADDR_VAR 0 2
2772: PUSH
2773: DOUBLE
2774: LD_INT 1
2776: DEC
2777: ST_TO_ADDR
2778: LD_INT 32
2780: PUSH
2781: FOR_TO
2782: IFFALSE 2809
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
2784: LD_ADDR_EXP 6
2788: PUSH
2789: LD_EXP 6
2793: PPUSH
2794: LD_VAR 0 2
2798: PPUSH
2799: LD_INT 0
2801: PPUSH
2802: CALL_OW 1
2806: ST_TO_ADDR
2807: GO 2781
2809: POP
2810: POP
// end ;
2811: LD_VAR 0 1
2815: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
2816: LD_INT 0
2818: PPUSH
2819: PPUSH
2820: PPUSH
2821: PPUSH
2822: PPUSH
2823: PPUSH
2824: PPUSH
2825: PPUSH
2826: PPUSH
2827: PPUSH
2828: PPUSH
2829: PPUSH
2830: PPUSH
2831: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact , GameTypeSurvivalH ] ;
2832: LD_ADDR_VAR 0 14
2836: PUSH
2837: LD_INT 1
2839: PUSH
2840: LD_INT 2
2842: PUSH
2843: LD_INT 3
2845: PUSH
2846: LD_INT 5
2848: PUSH
2849: LD_INT 6
2851: PUSH
2852: LD_INT 7
2854: PUSH
2855: LD_INT 8
2857: PUSH
2858: EMPTY
2859: LIST
2860: LIST
2861: LIST
2862: LIST
2863: LIST
2864: LIST
2865: LIST
2866: ST_TO_ADDR
// for i in gameTypes do
2867: LD_ADDR_VAR 0 2
2871: PUSH
2872: LD_VAR 0 14
2876: PUSH
2877: FOR_IN
2878: IFFALSE 2887
// disable ( i ) ;
2880: LD_VAR 0 2
2884: DISABLE_MARKED
2885: GO 2877
2887: POP
2888: POP
// if Multiplayer then
2889: LD_OWVAR 4
2893: IFFALSE 3077
// begin mpGameType := mp_game_type ;
2895: LD_ADDR_EXP 3
2899: PUSH
2900: LD_OWVAR 6
2904: ST_TO_ADDR
// your_side := mp_player_side ;
2905: LD_ADDR_OWVAR 2
2909: PUSH
2910: LD_OWVAR 7
2914: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
2915: LD_ADDR_EXP 7
2919: PUSH
2920: LD_OWVAR 17
2924: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
2925: LD_ADDR_EXP 8
2929: PUSH
2930: LD_OWVAR 15
2934: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
2935: LD_ADDR_EXP 9
2939: PUSH
2940: LD_OWVAR 16
2944: ST_TO_ADDR
// mpTeams := mp_teams ;
2945: LD_ADDR_EXP 10
2949: PUSH
2950: LD_OWVAR 12
2954: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
2955: LD_ADDR_VAR 0 2
2959: PUSH
2960: DOUBLE
2961: LD_INT 1
2963: DEC
2964: ST_TO_ADDR
2965: LD_EXP 4
2969: PPUSH
2970: CALL 13593 0 1
2974: PUSH
2975: FOR_TO
2976: IFFALSE 3052
// begin setting := mpGameSettingsKeys [ i ] ;
2978: LD_ADDR_VAR 0 12
2982: PUSH
2983: LD_EXP 4
2987: PUSH
2988: LD_VAR 0 2
2992: ARRAY
2993: ST_TO_ADDR
// if setting then
2994: LD_VAR 0 12
2998: IFFALSE 3050
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
3000: LD_ADDR_EXP 6
3004: PUSH
3005: LD_EXP 6
3009: PPUSH
3010: LD_VAR 0 2
3014: PPUSH
3015: LD_EXP 5
3019: PUSH
3020: LD_VAR 0 2
3024: ARRAY
3025: PUSH
3026: LD_VAR 0 2
3030: PUSH
3031: LD_INT 1
3033: MINUS
3034: PPUSH
3035: CALL_OW 426
3039: PUSH
3040: LD_INT 1
3042: PLUS
3043: ARRAY
3044: PPUSH
3045: CALL_OW 1
3049: ST_TO_ADDR
// end ;
3050: GO 2975
3052: POP
3053: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
3054: LD_ADDR_EXP 11
3058: PUSH
3059: LD_EXP 8
3063: PUSH
3064: LD_INT 0
3066: PUSH
3067: EMPTY
3068: LIST
3069: DIFF
3070: PUSH
3071: LD_INT 1
3073: GREATER
3074: ST_TO_ADDR
// end else
3075: GO 3077
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
3077: LD_EXP 3
3081: PPUSH
3082: CALL 826 0 1
// if Count ( mpMarkedAreas ) then
3086: LD_EXP 18
3090: PPUSH
3091: CALL 13593 0 1
3095: IFFALSE 3126
// begin for i in mpMarkedAreas do
3097: LD_ADDR_VAR 0 2
3101: PUSH
3102: LD_EXP 18
3106: PUSH
3107: FOR_IN
3108: IFFALSE 3124
// SetAreaMapShow ( i , 0 ) ;
3110: LD_VAR 0 2
3114: PPUSH
3115: LD_INT 0
3117: PPUSH
3118: CALL_OW 424
3122: GO 3107
3124: POP
3125: POP
// end ; for i := 1 to 8 do
3126: LD_ADDR_VAR 0 2
3130: PUSH
3131: DOUBLE
3132: LD_INT 1
3134: DEC
3135: ST_TO_ADDR
3136: LD_INT 8
3138: PUSH
3139: FOR_TO
3140: IFFALSE 4599
// begin if not mpSidePositions [ i ] then
3142: LD_EXP 7
3146: PUSH
3147: LD_VAR 0 2
3151: ARRAY
3152: NOT
3153: IFFALSE 3157
// continue ;
3155: GO 3139
// side := i ;
3157: LD_ADDR_VAR 0 7
3161: PUSH
3162: LD_VAR 0 2
3166: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
3167: LD_ADDR_VAR 0 9
3171: PUSH
3172: LD_EXP 9
3176: PUSH
3177: LD_VAR 0 2
3181: ARRAY
3182: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
3183: LD_ADDR_VAR 0 8
3187: PUSH
3188: LD_EXP 7
3192: PUSH
3193: LD_VAR 0 2
3197: ARRAY
3198: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
3199: LD_EXP 12
3203: PPUSH
3204: CALL 13593 0 1
3208: IFFALSE 3285
// begin for j in mpOilDeposits [ pos ] do
3210: LD_ADDR_VAR 0 3
3214: PUSH
3215: LD_EXP 12
3219: PUSH
3220: LD_VAR 0 8
3224: ARRAY
3225: PUSH
3226: FOR_IN
3227: IFFALSE 3283
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
3229: LD_VAR 0 3
3233: PUSH
3234: LD_INT 1
3236: ARRAY
3237: PPUSH
3238: LD_VAR 0 3
3242: PUSH
3243: LD_INT 2
3245: ARRAY
3246: PPUSH
3247: LD_INT 2
3249: PPUSH
3250: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3254: LD_VAR 0 3
3258: PUSH
3259: LD_INT 1
3261: ARRAY
3262: PPUSH
3263: LD_VAR 0 3
3267: PUSH
3268: LD_INT 2
3270: ARRAY
3271: PPUSH
3272: LD_VAR 0 7
3276: PPUSH
3277: CALL_OW 441
// end ;
3281: GO 3226
3283: POP
3284: POP
// end ; if Count ( mpSibDeposits ) then
3285: LD_EXP 13
3289: PPUSH
3290: CALL 13593 0 1
3294: IFFALSE 3371
// begin for j in mpSibDeposits [ pos ] do
3296: LD_ADDR_VAR 0 3
3300: PUSH
3301: LD_EXP 13
3305: PUSH
3306: LD_VAR 0 8
3310: ARRAY
3311: PUSH
3312: FOR_IN
3313: IFFALSE 3369
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
3315: LD_VAR 0 3
3319: PUSH
3320: LD_INT 1
3322: ARRAY
3323: PPUSH
3324: LD_VAR 0 3
3328: PUSH
3329: LD_INT 2
3331: ARRAY
3332: PPUSH
3333: LD_INT 3
3335: PPUSH
3336: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3340: LD_VAR 0 3
3344: PUSH
3345: LD_INT 1
3347: ARRAY
3348: PPUSH
3349: LD_VAR 0 3
3353: PUSH
3354: LD_INT 2
3356: ARRAY
3357: PPUSH
3358: LD_VAR 0 7
3362: PPUSH
3363: CALL_OW 441
// end ;
3367: GO 3312
3369: POP
3370: POP
// end ; InitBc ;
3371: CALL_OW 21
// InitUc ;
3375: CALL_OW 18
// uc_side := side ;
3379: LD_ADDR_OWVAR 20
3383: PUSH
3384: LD_VAR 0 7
3388: ST_TO_ADDR
// uc_nation := nation ;
3389: LD_ADDR_OWVAR 21
3393: PUSH
3394: LD_VAR 0 9
3398: ST_TO_ADDR
// if mpBattleFlag > - 1 then
3399: LD_EXP 22
3403: PUSH
3404: LD_INT 1
3406: NEG
3407: GREATER
3408: IFFALSE 3567
// begin x := mpStartPos [ pos ] [ 1 ] ;
3410: LD_ADDR_VAR 0 5
3414: PUSH
3415: LD_EXP 21
3419: PUSH
3420: LD_VAR 0 8
3424: ARRAY
3425: PUSH
3426: LD_INT 1
3428: ARRAY
3429: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
3430: LD_ADDR_VAR 0 6
3434: PUSH
3435: LD_EXP 21
3439: PUSH
3440: LD_VAR 0 8
3444: ARRAY
3445: PUSH
3446: LD_INT 2
3448: ARRAY
3449: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3450: LD_VAR 0 5
3454: PPUSH
3455: LD_VAR 0 6
3459: PPUSH
3460: LD_INT 12
3462: PPUSH
3463: LD_INT 2
3465: PPUSH
3466: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
3470: LD_ADDR_EXP 23
3474: PUSH
3475: LD_EXP 23
3479: PPUSH
3480: LD_VAR 0 7
3484: PPUSH
3485: LD_VAR 0 7
3489: PPUSH
3490: LD_VAR 0 5
3494: PPUSH
3495: LD_VAR 0 6
3499: PPUSH
3500: LD_INT 1
3502: PUSH
3503: LD_INT 100
3505: PUSH
3506: EMPTY
3507: LIST
3508: LIST
3509: PUSH
3510: LD_INT 2
3512: PUSH
3513: LD_INT 70
3515: PUSH
3516: EMPTY
3517: LIST
3518: LIST
3519: PUSH
3520: LD_INT 3
3522: PUSH
3523: LD_INT 40
3525: PUSH
3526: EMPTY
3527: LIST
3528: LIST
3529: PUSH
3530: LD_INT 10
3532: PUSH
3533: LD_INT 25
3535: PUSH
3536: EMPTY
3537: LIST
3538: LIST
3539: PUSH
3540: LD_INT 20
3542: PUSH
3543: LD_INT 100
3545: PUSH
3546: EMPTY
3547: LIST
3548: LIST
3549: PUSH
3550: EMPTY
3551: LIST
3552: LIST
3553: LIST
3554: LIST
3555: LIST
3556: PPUSH
3557: CALL_OW 418
3561: PPUSH
3562: CALL_OW 1
3566: ST_TO_ADDR
// end ; if Count ( mpDepots ) then
3567: LD_EXP 14
3571: PPUSH
3572: CALL 13593 0 1
3576: IFFALSE 3775
// begin if mpGameType in [ GameTypeSurvival , GameTypeSurvivalH , GameTypeArmsRace , GameTypeArmsArtifact ] then
3578: LD_EXP 3
3582: PUSH
3583: LD_INT 2
3585: PUSH
3586: LD_INT 8
3588: PUSH
3589: LD_INT 6
3591: PUSH
3592: LD_INT 7
3594: PUSH
3595: EMPTY
3596: LIST
3597: LIST
3598: LIST
3599: LIST
3600: IN
3601: IFFALSE 3621
// begin bc_level := 10 ;
3603: LD_ADDR_OWVAR 43
3607: PUSH
3608: LD_INT 10
3610: ST_TO_ADDR
// bc_type := b_warehouse ;
3611: LD_ADDR_OWVAR 42
3615: PUSH
3616: LD_INT 1
3618: ST_TO_ADDR
// end else
3619: GO 3637
// begin bc_level := 0 ;
3621: LD_ADDR_OWVAR 43
3625: PUSH
3626: LD_INT 0
3628: ST_TO_ADDR
// bc_type := b_depot ;
3629: LD_ADDR_OWVAR 42
3633: PUSH
3634: LD_INT 0
3636: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
3637: LD_ADDR_VAR 0 4
3641: PUSH
3642: LD_EXP 14
3646: PUSH
3647: LD_VAR 0 8
3651: ARRAY
3652: PUSH
3653: LD_INT 1
3655: ARRAY
3656: PPUSH
3657: LD_EXP 14
3661: PUSH
3662: LD_VAR 0 8
3666: ARRAY
3667: PUSH
3668: LD_INT 2
3670: ARRAY
3671: PPUSH
3672: LD_EXP 14
3676: PUSH
3677: LD_VAR 0 8
3681: ARRAY
3682: PUSH
3683: LD_INT 3
3685: ARRAY
3686: PPUSH
3687: CALL_OW 47
3691: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
3692: LD_VAR 0 4
3696: PPUSH
3697: LD_STRING @
3699: PUSH
3700: LD_VAR 0 7
3704: STR
3705: PPUSH
3706: CALL_OW 500
// if Count ( mpStartingResources ) then
3710: LD_EXP 15
3714: PPUSH
3715: CALL 13593 0 1
3719: IFFALSE 3773
// begin for j := 1 to mpStartingResources do
3721: LD_ADDR_VAR 0 3
3725: PUSH
3726: DOUBLE
3727: LD_INT 1
3729: DEC
3730: ST_TO_ADDR
3731: LD_EXP 15
3735: PUSH
3736: FOR_TO
3737: IFFALSE 3771
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
3739: LD_VAR 0 4
3743: PPUSH
3744: CALL_OW 274
3748: PPUSH
3749: LD_VAR 0 3
3753: PPUSH
3754: LD_EXP 15
3758: PUSH
3759: LD_VAR 0 3
3763: ARRAY
3764: PPUSH
3765: CALL_OW 277
3769: GO 3736
3771: POP
3772: POP
// end ; end else
3773: GO 3982
// if Count ( mpStartingResources ) then
3775: LD_EXP 15
3779: PPUSH
3780: CALL 13593 0 1
3784: IFFALSE 3982
// begin x := mpStartPos [ pos ] [ 1 ] ;
3786: LD_ADDR_VAR 0 5
3790: PUSH
3791: LD_EXP 21
3795: PUSH
3796: LD_VAR 0 8
3800: ARRAY
3801: PUSH
3802: LD_INT 1
3804: ARRAY
3805: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
3806: LD_ADDR_VAR 0 6
3810: PUSH
3811: LD_EXP 21
3815: PUSH
3816: LD_VAR 0 8
3820: ARRAY
3821: PUSH
3822: LD_INT 2
3824: ARRAY
3825: ST_TO_ADDR
// for j := 1 to mpStartingResources do
3826: LD_ADDR_VAR 0 3
3830: PUSH
3831: DOUBLE
3832: LD_INT 1
3834: DEC
3835: ST_TO_ADDR
3836: LD_EXP 15
3840: PUSH
3841: FOR_TO
3842: IFFALSE 3980
// begin resources := mpStartingResources [ j ] ;
3844: LD_ADDR_VAR 0 13
3848: PUSH
3849: LD_EXP 15
3853: PUSH
3854: LD_VAR 0 3
3858: ARRAY
3859: ST_TO_ADDR
// if resources = 0 then
3860: LD_VAR 0 13
3864: PUSH
3865: LD_INT 0
3867: EQUAL
3868: IFFALSE 3872
// continue ;
3870: GO 3841
// repeat if resources >= 50 then
3872: LD_VAR 0 13
3876: PUSH
3877: LD_INT 50
3879: GREATEREQUAL
3880: IFFALSE 3926
// begin CreateResourcesXYR ( j , 5 , x , y , 6 , false ) ;
3882: LD_VAR 0 3
3886: PPUSH
3887: LD_INT 5
3889: PPUSH
3890: LD_VAR 0 5
3894: PPUSH
3895: LD_VAR 0 6
3899: PPUSH
3900: LD_INT 6
3902: PPUSH
3903: LD_INT 0
3905: PPUSH
3906: CALL_OW 60
// resources := resources - 50 ;
3910: LD_ADDR_VAR 0 13
3914: PUSH
3915: LD_VAR 0 13
3919: PUSH
3920: LD_INT 50
3922: MINUS
3923: ST_TO_ADDR
// end else
3924: GO 3968
// begin CreateResourcesXYR ( j , resources div 10 , x , y , 6 , false ) ;
3926: LD_VAR 0 3
3930: PPUSH
3931: LD_VAR 0 13
3935: PUSH
3936: LD_INT 10
3938: DIV
3939: PPUSH
3940: LD_VAR 0 5
3944: PPUSH
3945: LD_VAR 0 6
3949: PPUSH
3950: LD_INT 6
3952: PPUSH
3953: LD_INT 0
3955: PPUSH
3956: CALL_OW 60
// resources := 0 ;
3960: LD_ADDR_VAR 0 13
3964: PUSH
3965: LD_INT 0
3967: ST_TO_ADDR
// end ; until resources <= 0 ;
3968: LD_VAR 0 13
3972: PUSH
3973: LD_INT 0
3975: LESSEQUAL
3976: IFFALSE 3872
// end ;
3978: GO 3841
3980: POP
3981: POP
// end ; if Count ( mpBuildings ) and not mpGameType in [ GameTypeSurvival , GameTypeSurvivalH ] then
3982: LD_EXP 17
3986: PPUSH
3987: CALL 13593 0 1
3991: IFFALSE 4011
3993: PUSH
3994: LD_EXP 3
3998: PUSH
3999: LD_INT 2
4001: PUSH
4002: LD_INT 8
4004: PUSH
4005: EMPTY
4006: LIST
4007: LIST
4008: IN
4009: NOT
4010: AND
4011: IFFALSE 4089
// begin for j in mpBuildings [ pos ] do
4013: LD_ADDR_VAR 0 3
4017: PUSH
4018: LD_EXP 17
4022: PUSH
4023: LD_VAR 0 8
4027: ARRAY
4028: PUSH
4029: FOR_IN
4030: IFFALSE 4087
// begin bc_level := 0 ;
4032: LD_ADDR_OWVAR 43
4036: PUSH
4037: LD_INT 0
4039: ST_TO_ADDR
// bc_type := j [ 1 ] ;
4040: LD_ADDR_OWVAR 42
4044: PUSH
4045: LD_VAR 0 3
4049: PUSH
4050: LD_INT 1
4052: ARRAY
4053: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
4054: LD_VAR 0 3
4058: PUSH
4059: LD_INT 2
4061: ARRAY
4062: PPUSH
4063: LD_VAR 0 3
4067: PUSH
4068: LD_INT 3
4070: ARRAY
4071: PPUSH
4072: LD_VAR 0 3
4076: PUSH
4077: LD_INT 4
4079: ARRAY
4080: PPUSH
4081: CALL_OW 47
// end ;
4085: GO 4029
4087: POP
4088: POP
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
4089: LD_EXP 26
4093: IFFALSE 4113
4095: PUSH
4096: LD_INT 20
4098: PPUSH
4099: LD_VAR 0 7
4103: PPUSH
4104: CALL_OW 321
4108: PUSH
4109: LD_INT 1
4111: EQUAL
4112: AND
4113: IFFALSE 4130
// SetTech ( tech_SibDet , side , state_researched ) ;
4115: LD_INT 20
4117: PPUSH
4118: LD_VAR 0 7
4122: PPUSH
4123: LD_INT 2
4125: PPUSH
4126: CALL_OW 322
// if not mpArtifacts then
4130: LD_EXP 45
4134: NOT
4135: IFFALSE 4152
// SetTech ( tech_artifact , side , state_disabled ) ;
4137: LD_INT 24
4139: PPUSH
4140: LD_VAR 0 7
4144: PPUSH
4145: LD_INT 0
4147: PPUSH
4148: CALL_OW 322
// if mpSibBomb = 1 then
4152: LD_EXP 28
4156: PUSH
4157: LD_INT 1
4159: EQUAL
4160: IFFALSE 4179
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4162: LD_INT 25
4164: PPUSH
4165: LD_VAR 0 7
4169: PPUSH
4170: LD_INT 1
4172: PPUSH
4173: CALL_OW 322
// end else
4177: GO 4194
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4179: LD_INT 25
4181: PPUSH
4182: LD_VAR 0 7
4186: PPUSH
4187: LD_INT 0
4189: PPUSH
4190: CALL_OW 322
// end ; if mpVehicles then
4194: LD_EXP 36
4198: IFFALSE 4297
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
4200: LD_ADDR_VAR 0 3
4204: PUSH
4205: LD_VAR 0 7
4209: PPUSH
4210: LD_VAR 0 9
4214: PPUSH
4215: LD_EXP 36
4219: PPUSH
4220: CALL 5556 0 3
4224: PUSH
4225: FOR_IN
4226: IFFALSE 4295
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
4228: LD_VAR 0 3
4232: PPUSH
4233: LD_INT 0
4235: PPUSH
4236: LD_INT 5
4238: PPUSH
4239: CALL_OW 12
4243: PPUSH
4244: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4248: LD_VAR 0 3
4252: PPUSH
4253: LD_EXP 21
4257: PUSH
4258: LD_VAR 0 8
4262: ARRAY
4263: PUSH
4264: LD_INT 1
4266: ARRAY
4267: PPUSH
4268: LD_EXP 21
4272: PUSH
4273: LD_VAR 0 8
4277: ARRAY
4278: PUSH
4279: LD_INT 2
4281: ARRAY
4282: PPUSH
4283: LD_INT 12
4285: PPUSH
4286: LD_INT 0
4288: PPUSH
4289: CALL_OW 50
// end ;
4293: GO 4225
4295: POP
4296: POP
// end ; uc_nation := nation ;
4297: LD_ADDR_OWVAR 21
4301: PUSH
4302: LD_VAR 0 9
4306: ST_TO_ADDR
// if mpGameType in [ GameTypeArmsRace , GameTypeArmsArtifact ] and mpSidePositions [ i ] in [ 1 , 2 ] then
4307: LD_EXP 3
4311: PUSH
4312: LD_INT 6
4314: PUSH
4315: LD_INT 7
4317: PUSH
4318: EMPTY
4319: LIST
4320: LIST
4321: IN
4322: IFFALSE 4347
4324: PUSH
4325: LD_EXP 7
4329: PUSH
4330: LD_VAR 0 2
4334: ARRAY
4335: PUSH
4336: LD_INT 1
4338: PUSH
4339: LD_INT 2
4341: PUSH
4342: EMPTY
4343: LIST
4344: LIST
4345: IN
4346: AND
4347: IFFALSE 4395
// team := mpPrepareTeam ( side , nation , mpPeopleAmount + ( mpPeopleAmount div 2 ) , mpPeopleSkill + 1 ) else
4349: LD_ADDR_VAR 0 11
4353: PUSH
4354: LD_VAR 0 7
4358: PPUSH
4359: LD_VAR 0 9
4363: PPUSH
4364: LD_EXP 24
4368: PUSH
4369: LD_EXP 24
4373: PUSH
4374: LD_INT 2
4376: DIV
4377: PLUS
4378: PPUSH
4379: LD_EXP 25
4383: PUSH
4384: LD_INT 1
4386: PLUS
4387: PPUSH
4388: CALL 5011 0 4
4392: ST_TO_ADDR
4393: GO 4425
// team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
4395: LD_ADDR_VAR 0 11
4399: PUSH
4400: LD_VAR 0 7
4404: PPUSH
4405: LD_VAR 0 9
4409: PPUSH
4410: LD_EXP 24
4414: PPUSH
4415: LD_EXP 25
4419: PPUSH
4420: CALL 5011 0 4
4424: ST_TO_ADDR
// for j in team do
4425: LD_ADDR_VAR 0 3
4429: PUSH
4430: LD_VAR 0 11
4434: PUSH
4435: FOR_IN
4436: IFFALSE 4485
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4438: LD_VAR 0 3
4442: PPUSH
4443: LD_EXP 21
4447: PUSH
4448: LD_VAR 0 8
4452: ARRAY
4453: PUSH
4454: LD_INT 1
4456: ARRAY
4457: PPUSH
4458: LD_EXP 21
4462: PUSH
4463: LD_VAR 0 8
4467: ARRAY
4468: PUSH
4469: LD_INT 2
4471: ARRAY
4472: PPUSH
4473: LD_INT 12
4475: PPUSH
4476: LD_INT 0
4478: PPUSH
4479: CALL_OW 50
4483: GO 4435
4485: POP
4486: POP
// if mpApemans then
4487: LD_EXP 30
4491: IFFALSE 4597
// begin for j := 1 to mpApemans do
4493: LD_ADDR_VAR 0 3
4497: PUSH
4498: DOUBLE
4499: LD_INT 1
4501: DEC
4502: ST_TO_ADDR
4503: LD_EXP 30
4507: PUSH
4508: FOR_TO
4509: IFFALSE 4595
// begin PrepareApeman ( - 5 ) ;
4511: LD_INT 5
4513: NEG
4514: PPUSH
4515: CALL 45696 0 1
// ape := CreateHuman ;
4519: LD_ADDR_VAR 0 10
4523: PUSH
4524: CALL_OW 44
4528: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
4529: LD_ADDR_EXP 32
4533: PUSH
4534: LD_EXP 32
4538: PPUSH
4539: LD_VAR 0 8
4543: PPUSH
4544: LD_EXP 32
4548: PUSH
4549: LD_VAR 0 8
4553: ARRAY
4554: PPUSH
4555: LD_VAR 0 10
4559: PPUSH
4560: CALL 49569 0 2
4564: PPUSH
4565: CALL_OW 1
4569: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
4570: LD_VAR 0 10
4574: PPUSH
4575: LD_EXP 31
4579: PUSH
4580: LD_VAR 0 8
4584: ARRAY
4585: PPUSH
4586: LD_INT 0
4588: PPUSH
4589: CALL_OW 49
// end ;
4593: GO 4508
4595: POP
4596: POP
// end ; end ;
4597: GO 3139
4599: POP
4600: POP
// if not mpTeamGame then
4601: LD_EXP 11
4605: NOT
4606: IFFALSE 4704
// begin for i := 1 to 8 do
4608: LD_ADDR_VAR 0 2
4612: PUSH
4613: DOUBLE
4614: LD_INT 1
4616: DEC
4617: ST_TO_ADDR
4618: LD_INT 8
4620: PUSH
4621: FOR_TO
4622: IFFALSE 4700
// for j := 1 to 8 do
4624: LD_ADDR_VAR 0 3
4628: PUSH
4629: DOUBLE
4630: LD_INT 1
4632: DEC
4633: ST_TO_ADDR
4634: LD_INT 8
4636: PUSH
4637: FOR_TO
4638: IFFALSE 4696
// if i <> j then
4640: LD_VAR 0 2
4644: PUSH
4645: LD_VAR 0 3
4649: NONEQUAL
4650: IFFALSE 4674
// SetAttitude ( i , j , att_neutral , true ) else
4652: LD_VAR 0 2
4656: PPUSH
4657: LD_VAR 0 3
4661: PPUSH
4662: LD_INT 0
4664: PPUSH
4665: LD_INT 1
4667: PPUSH
4668: CALL_OW 80
4672: GO 4694
// SetAttitude ( i , j , att_friend , true ) ;
4674: LD_VAR 0 2
4678: PPUSH
4679: LD_VAR 0 3
4683: PPUSH
4684: LD_INT 1
4686: PPUSH
4687: LD_INT 1
4689: PPUSH
4690: CALL_OW 80
4694: GO 4637
4696: POP
4697: POP
4698: GO 4621
4700: POP
4701: POP
// end else
4702: GO 4879
// begin if mpSharedVision then
4704: LD_EXP 16
4708: IFFALSE 4773
// begin for i in mpTeams do
4710: LD_ADDR_VAR 0 2
4714: PUSH
4715: LD_EXP 10
4719: PUSH
4720: FOR_IN
4721: IFFALSE 4771
// for j := 2 to i do
4723: LD_ADDR_VAR 0 3
4727: PUSH
4728: DOUBLE
4729: LD_INT 2
4731: DEC
4732: ST_TO_ADDR
4733: LD_VAR 0 2
4737: PUSH
4738: FOR_TO
4739: IFFALSE 4767
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
4741: LD_VAR 0 2
4745: PUSH
4746: LD_VAR 0 3
4750: ARRAY
4751: PPUSH
4752: LD_VAR 0 2
4756: PUSH
4757: LD_INT 1
4759: ARRAY
4760: PPUSH
4761: CALL_OW 343
4765: GO 4738
4767: POP
4768: POP
4769: GO 4720
4771: POP
4772: POP
// end ; for i := 1 to 8 do
4773: LD_ADDR_VAR 0 2
4777: PUSH
4778: DOUBLE
4779: LD_INT 1
4781: DEC
4782: ST_TO_ADDR
4783: LD_INT 8
4785: PUSH
4786: FOR_TO
4787: IFFALSE 4877
// for j := 1 to 8 do
4789: LD_ADDR_VAR 0 3
4793: PUSH
4794: DOUBLE
4795: LD_INT 1
4797: DEC
4798: ST_TO_ADDR
4799: LD_INT 8
4801: PUSH
4802: FOR_TO
4803: IFFALSE 4873
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
4805: LD_EXP 8
4809: PUSH
4810: LD_VAR 0 2
4814: ARRAY
4815: PUSH
4816: LD_EXP 8
4820: PUSH
4821: LD_VAR 0 3
4825: ARRAY
4826: EQUAL
4827: IFFALSE 4851
// SetAttitude ( i , j , att_friend , true ) else
4829: LD_VAR 0 2
4833: PPUSH
4834: LD_VAR 0 3
4838: PPUSH
4839: LD_INT 1
4841: PPUSH
4842: LD_INT 1
4844: PPUSH
4845: CALL_OW 80
4849: GO 4871
// SetAttitude ( i , j , att_enemy , true ) ;
4851: LD_VAR 0 2
4855: PPUSH
4856: LD_VAR 0 3
4860: PPUSH
4861: LD_INT 2
4863: PPUSH
4864: LD_INT 1
4866: PPUSH
4867: CALL_OW 80
4871: GO 4802
4873: POP
4874: POP
4875: GO 4786
4877: POP
4878: POP
// end ; music_nat := mpSideNations [ your_side ] ;
4879: LD_ADDR_OWVAR 71
4883: PUSH
4884: LD_EXP 9
4888: PUSH
4889: LD_OWVAR 2
4893: ARRAY
4894: ST_TO_ADDR
// if IAmSpec then
4895: CALL_OW 531
4899: IFFALSE 4940
// begin FogOff ( true ) ;
4901: LD_INT 1
4903: PPUSH
4904: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
4908: LD_EXP 29
4912: PUSH
4913: LD_INT 1
4915: ARRAY
4916: PUSH
4917: LD_INT 2
4919: DIV
4920: PPUSH
4921: LD_EXP 29
4925: PUSH
4926: LD_INT 2
4928: ARRAY
4929: PUSH
4930: LD_INT 2
4932: DIV
4933: PPUSH
4934: CALL_OW 86
// end else
4938: GO 4986
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
4940: LD_EXP 21
4944: PUSH
4945: LD_EXP 7
4949: PUSH
4950: LD_OWVAR 2
4954: ARRAY
4955: ARRAY
4956: PUSH
4957: LD_INT 1
4959: ARRAY
4960: PPUSH
4961: LD_EXP 21
4965: PUSH
4966: LD_EXP 7
4970: PUSH
4971: LD_OWVAR 2
4975: ARRAY
4976: ARRAY
4977: PUSH
4978: LD_INT 2
4980: ARRAY
4981: PPUSH
4982: CALL_OW 86
// end ; BeginBuildUp ;
4986: CALL 6089 0 0
// enable ( mpActive ) ;
4990: LD_INT 100
4992: ENABLE_MARKED
// enable ( mpGameType ) ;
4993: LD_EXP 3
4997: ENABLE_MARKED
// mpGameActive := true ;
4998: LD_ADDR_EXP 39
5002: PUSH
5003: LD_INT 1
5005: ST_TO_ADDR
// end ;
5006: LD_VAR 0 1
5010: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class , commander ; begin
5011: LD_INT 0
5013: PPUSH
5014: PPUSH
5015: PPUSH
5016: PPUSH
5017: PPUSH
// result := [ ] ;
5018: LD_ADDR_VAR 0 5
5022: PUSH
5023: EMPTY
5024: ST_TO_ADDR
// class := class_soldier ;
5025: LD_ADDR_VAR 0 8
5029: PUSH
5030: LD_INT 1
5032: ST_TO_ADDR
// uc_side := side ;
5033: LD_ADDR_OWVAR 20
5037: PUSH
5038: LD_VAR 0 1
5042: ST_TO_ADDR
// uc_nation := nation ;
5043: LD_ADDR_OWVAR 21
5047: PUSH
5048: LD_VAR 0 2
5052: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
5053: LD_ADDR_OWVAR 26
5057: PUSH
5058: LD_OWVAR 19
5062: PUSH
5063: LD_VAR 0 1
5067: ARRAY
5068: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
5069: LD_INT 1
5071: PPUSH
5072: LD_INT 2
5074: PPUSH
5075: CALL_OW 12
5079: PPUSH
5080: LD_VAR 0 8
5084: PPUSH
5085: LD_VAR 0 4
5089: PUSH
5090: LD_INT 2
5092: PLUS
5093: PPUSH
5094: CALL_OW 380
// hc_importance := 105 ;
5098: LD_ADDR_OWVAR 32
5102: PUSH
5103: LD_INT 105
5105: ST_TO_ADDR
// if Multiplayer then
5106: LD_OWVAR 4
5110: IFFALSE 5150
// begin hc_gallery := MULTIAVATARS ;
5112: LD_ADDR_OWVAR 33
5116: PUSH
5117: LD_STRING MULTIAVATARS
5119: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
5120: LD_ADDR_OWVAR 34
5124: PUSH
5125: LD_VAR 0 1
5129: PPUSH
5130: CALL_OW 525
5134: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
5135: LD_ADDR_OWVAR 27
5139: PUSH
5140: LD_VAR 0 1
5144: PPUSH
5145: CALL_OW 526
5149: ST_TO_ADDR
// end ; commander := CreateHuman ;
5150: LD_ADDR_VAR 0 9
5154: PUSH
5155: CALL_OW 44
5159: ST_TO_ADDR
// result := Join ( result , commander ) ;
5160: LD_ADDR_VAR 0 5
5164: PUSH
5165: LD_VAR 0 5
5169: PPUSH
5170: LD_VAR 0 9
5174: PPUSH
5175: CALL 49569 0 2
5179: ST_TO_ADDR
// mpCommanders := Replace ( mpCommanders , side , commander ) ;
5180: LD_ADDR_EXP 41
5184: PUSH
5185: LD_EXP 41
5189: PPUSH
5190: LD_VAR 0 1
5194: PPUSH
5195: LD_VAR 0 9
5199: PPUSH
5200: CALL_OW 1
5204: ST_TO_ADDR
// if mpTeamPreset then
5205: LD_LOC 1
5209: IFFALSE 5305
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
5211: LD_LOC 1
5215: PUSH
5216: LD_INT 1
5218: ARRAY
5219: PPUSH
5220: LD_VAR 0 5
5224: PUSH
5225: LD_VAR 0 5
5229: ARRAY
5230: PPUSH
5231: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
5235: LD_VAR 0 5
5239: PUSH
5240: LD_VAR 0 5
5244: ARRAY
5245: PPUSH
5246: LD_INT 1
5248: PPUSH
5249: LD_LOC 1
5253: PUSH
5254: LD_INT 1
5256: ARRAY
5257: PPUSH
5258: LD_INT 1
5260: PPUSH
5261: CALL_OW 260
5265: PPUSH
5266: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
5270: LD_VAR 0 5
5274: PUSH
5275: LD_VAR 0 5
5279: ARRAY
5280: PPUSH
5281: LD_INT 2
5283: PPUSH
5284: LD_LOC 1
5288: PUSH
5289: LD_INT 1
5291: ARRAY
5292: PPUSH
5293: LD_INT 2
5295: PPUSH
5296: CALL_OW 260
5300: PPUSH
5301: CALL_OW 239
// end ; InitHc_All ( ) ;
5305: CALL_OW 584
// class := 2 ;
5309: LD_ADDR_VAR 0 8
5313: PUSH
5314: LD_INT 2
5316: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
5317: LD_ADDR_VAR 0 6
5321: PUSH
5322: DOUBLE
5323: LD_INT 1
5325: DEC
5326: ST_TO_ADDR
5327: LD_VAR 0 3
5331: PUSH
5332: LD_INT 1
5334: MINUS
5335: PUSH
5336: FOR_TO
5337: IFFALSE 5532
// begin PrepareHuman ( false , class , skill ) ;
5339: LD_INT 0
5341: PPUSH
5342: LD_VAR 0 8
5346: PPUSH
5347: LD_VAR 0 4
5351: PPUSH
5352: CALL_OW 380
// un := CreateHuman ;
5356: LD_ADDR_VAR 0 7
5360: PUSH
5361: CALL_OW 44
5365: ST_TO_ADDR
// result := Join ( result , un ) ;
5366: LD_ADDR_VAR 0 5
5370: PUSH
5371: LD_VAR 0 5
5375: PPUSH
5376: LD_VAR 0 7
5380: PPUSH
5381: CALL 49569 0 2
5385: ST_TO_ADDR
// if Count ( mpTeamPreset ) >= amount then
5386: LD_LOC 1
5390: PPUSH
5391: CALL 13593 0 1
5395: PUSH
5396: LD_VAR 0 3
5400: GREATEREQUAL
5401: IFFALSE 5497
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
5403: LD_LOC 1
5407: PUSH
5408: LD_VAR 0 6
5412: PUSH
5413: LD_INT 1
5415: PLUS
5416: ARRAY
5417: PPUSH
5418: LD_VAR 0 7
5422: PPUSH
5423: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
5427: LD_VAR 0 7
5431: PPUSH
5432: LD_INT 1
5434: PPUSH
5435: LD_LOC 1
5439: PUSH
5440: LD_VAR 0 6
5444: PUSH
5445: LD_INT 1
5447: PLUS
5448: ARRAY
5449: PPUSH
5450: LD_INT 1
5452: PPUSH
5453: CALL_OW 260
5457: PPUSH
5458: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
5462: LD_VAR 0 7
5466: PPUSH
5467: LD_INT 2
5469: PPUSH
5470: LD_LOC 1
5474: PUSH
5475: LD_VAR 0 6
5479: PUSH
5480: LD_INT 1
5482: PLUS
5483: ARRAY
5484: PPUSH
5485: LD_INT 2
5487: PPUSH
5488: CALL_OW 260
5492: PPUSH
5493: CALL_OW 239
// end ; class := Inc ( class ) ;
5497: LD_ADDR_VAR 0 8
5501: PUSH
5502: LD_VAR 0 8
5506: PPUSH
5507: CALL 50942 0 1
5511: ST_TO_ADDR
// if class = 5 then
5512: LD_VAR 0 8
5516: PUSH
5517: LD_INT 5
5519: EQUAL
5520: IFFALSE 5530
// class := 1 ;
5522: LD_ADDR_VAR 0 8
5526: PUSH
5527: LD_INT 1
5529: ST_TO_ADDR
// end ;
5530: GO 5336
5532: POP
5533: POP
// if not mpTeamPreset then
5534: LD_LOC 1
5538: NOT
5539: IFFALSE 5551
// mpTeamPreset := result ;
5541: LD_ADDR_LOC 1
5545: PUSH
5546: LD_VAR 0 5
5550: ST_TO_ADDR
// end ;
5551: LD_VAR 0 5
5555: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
5556: LD_INT 0
5558: PPUSH
5559: PPUSH
// result := [ ] ;
5560: LD_ADDR_VAR 0 4
5564: PUSH
5565: EMPTY
5566: ST_TO_ADDR
// if not vehicles then
5567: LD_VAR 0 3
5571: NOT
5572: IFFALSE 5576
// exit ;
5574: GO 5790
// for i := 1 to vehicles [ nation ] do
5576: LD_ADDR_VAR 0 5
5580: PUSH
5581: DOUBLE
5582: LD_INT 1
5584: DEC
5585: ST_TO_ADDR
5586: LD_VAR 0 3
5590: PUSH
5591: LD_VAR 0 2
5595: ARRAY
5596: PUSH
5597: FOR_TO
5598: IFFALSE 5788
// begin uc_side := side ;
5600: LD_ADDR_OWVAR 20
5604: PUSH
5605: LD_VAR 0 1
5609: ST_TO_ADDR
// if Count ( vehicles [ nation ] [ i ] ) > 4 then
5610: LD_VAR 0 3
5614: PUSH
5615: LD_VAR 0 2
5619: ARRAY
5620: PUSH
5621: LD_VAR 0 5
5625: ARRAY
5626: PPUSH
5627: CALL 13593 0 1
5631: PUSH
5632: LD_INT 4
5634: GREATER
5635: IFFALSE 5665
// uc_nation := vehicles [ nation ] [ i ] [ 5 ] else
5637: LD_ADDR_OWVAR 21
5641: PUSH
5642: LD_VAR 0 3
5646: PUSH
5647: LD_VAR 0 2
5651: ARRAY
5652: PUSH
5653: LD_VAR 0 5
5657: ARRAY
5658: PUSH
5659: LD_INT 5
5661: ARRAY
5662: ST_TO_ADDR
5663: GO 5675
// uc_nation := nation ;
5665: LD_ADDR_OWVAR 21
5669: PUSH
5670: LD_VAR 0 2
5674: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
5675: LD_VAR 0 3
5679: PUSH
5680: LD_VAR 0 2
5684: ARRAY
5685: PUSH
5686: LD_VAR 0 5
5690: ARRAY
5691: PUSH
5692: LD_INT 1
5694: ARRAY
5695: PPUSH
5696: LD_VAR 0 3
5700: PUSH
5701: LD_VAR 0 2
5705: ARRAY
5706: PUSH
5707: LD_VAR 0 5
5711: ARRAY
5712: PUSH
5713: LD_INT 2
5715: ARRAY
5716: PPUSH
5717: LD_VAR 0 3
5721: PUSH
5722: LD_VAR 0 2
5726: ARRAY
5727: PUSH
5728: LD_VAR 0 5
5732: ARRAY
5733: PUSH
5734: LD_INT 3
5736: ARRAY
5737: PPUSH
5738: LD_VAR 0 3
5742: PUSH
5743: LD_VAR 0 2
5747: ARRAY
5748: PUSH
5749: LD_VAR 0 5
5753: ARRAY
5754: PUSH
5755: LD_INT 4
5757: ARRAY
5758: PPUSH
5759: LD_INT 80
5761: PPUSH
5762: CALL 16389 0 5
// result := Join ( result , CreateVehicle ) ;
5766: LD_ADDR_VAR 0 4
5770: PUSH
5771: LD_VAR 0 4
5775: PPUSH
5776: CALL_OW 45
5780: PPUSH
5781: CALL 49569 0 2
5785: ST_TO_ADDR
// end ;
5786: GO 5597
5788: POP
5789: POP
// end ;
5790: LD_VAR 0 4
5794: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
5795: LD_INT 0
5797: PPUSH
5798: PPUSH
// for i in mpBattleFlags do
5799: LD_ADDR_VAR 0 3
5803: PUSH
5804: LD_EXP 23
5808: PUSH
5809: FOR_IN
5810: IFFALSE 5887
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
5812: LD_VAR 0 3
5816: PPUSH
5817: LD_INT 1
5819: PUSH
5820: LD_VAR 0 1
5824: PUSH
5825: EMPTY
5826: LIST
5827: LIST
5828: PUSH
5829: LD_INT 2
5831: PUSH
5832: LD_VAR 0 1
5836: PUSH
5837: LD_REAL  7.00000000000000E-0001
5840: MUL
5841: PUSH
5842: EMPTY
5843: LIST
5844: LIST
5845: PUSH
5846: LD_INT 3
5848: PUSH
5849: LD_VAR 0 1
5853: PUSH
5854: LD_REAL  4.00000000000000E-0001
5857: MUL
5858: PUSH
5859: EMPTY
5860: LIST
5861: LIST
5862: PUSH
5863: LD_INT 20
5865: PUSH
5866: LD_VAR 0 1
5870: PUSH
5871: EMPTY
5872: LIST
5873: LIST
5874: PUSH
5875: EMPTY
5876: LIST
5877: LIST
5878: LIST
5879: LIST
5880: PPUSH
5881: CALL_OW 423
5885: GO 5809
5887: POP
5888: POP
// end ;
5889: LD_VAR 0 2
5893: RET
// every 0 0$1 trigger mpActive do var i , strength ;
5894: LD_INT 100
5896: IFFALSE 5991
5898: GO 5900
5900: DISABLE
5901: LD_INT 0
5903: PPUSH
5904: PPUSH
// begin if mpBattleFlag <= 0 then
5905: LD_EXP 22
5909: PUSH
5910: LD_INT 0
5912: LESSEQUAL
5913: IFFALSE 5917
// exit ;
5915: GO 5991
// strength := 100 ;
5917: LD_ADDR_VAR 0 2
5921: PUSH
5922: LD_INT 100
5924: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
5925: LD_EXP 22
5929: PPUSH
5930: CALL_OW 67
// strength := Dec ( strength ) ;
5934: LD_ADDR_VAR 0 2
5938: PUSH
5939: LD_VAR 0 2
5943: PPUSH
5944: CALL 50964 0 1
5948: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
5949: LD_VAR 0 2
5953: PPUSH
5954: CALL 5795 0 1
// until not strength ;
5958: LD_VAR 0 2
5962: NOT
5963: IFFALSE 5925
// for i in mpBattleFlags do
5965: LD_ADDR_VAR 0 1
5969: PUSH
5970: LD_EXP 23
5974: PUSH
5975: FOR_IN
5976: IFFALSE 5989
// KillBattleFlag ( i ) ;
5978: LD_VAR 0 1
5982: PPUSH
5983: CALL_OW 419
5987: GO 5975
5989: POP
5990: POP
// end ;
5991: PPOPN 2
5993: END
// every 0 0$1 marked mpActive do var side , tmp ;
5994: GO 5996
5996: DISABLE
5997: LD_INT 0
5999: PPUSH
6000: PPUSH
// begin if mpSibBomb <= 1 then
6001: LD_EXP 28
6005: PUSH
6006: LD_INT 1
6008: LESSEQUAL
6009: IFFALSE 6013
// exit ;
6011: GO 6086
// tmp := mpSibBomb ;
6013: LD_ADDR_VAR 0 2
6017: PUSH
6018: LD_EXP 28
6022: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6023: LD_INT 35
6025: PPUSH
6026: CALL_OW 67
// tmp := tmp - 0 0$1 ;
6030: LD_ADDR_VAR 0 2
6034: PUSH
6035: LD_VAR 0 2
6039: PUSH
6040: LD_INT 35
6042: MINUS
6043: ST_TO_ADDR
// until not tmp ;
6044: LD_VAR 0 2
6048: NOT
6049: IFFALSE 6023
// for side := 1 to 8 do
6051: LD_ADDR_VAR 0 1
6055: PUSH
6056: DOUBLE
6057: LD_INT 1
6059: DEC
6060: ST_TO_ADDR
6061: LD_INT 8
6063: PUSH
6064: FOR_TO
6065: IFFALSE 6084
// SetTech ( tech_SibFiss , side , state_enabled ) ;
6067: LD_INT 25
6069: PPUSH
6070: LD_VAR 0 1
6074: PPUSH
6075: LD_INT 1
6077: PPUSH
6078: CALL_OW 322
6082: GO 6064
6084: POP
6085: POP
// end ;
6086: PPOPN 2
6088: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
6089: LD_INT 0
6091: PPUSH
6092: PPUSH
6093: PPUSH
// mpBuildUpTimeDelay := 0 ;
6094: LD_ADDR_EXP 48
6098: PUSH
6099: LD_INT 0
6101: ST_TO_ADDR
// if not mpBuildUpTime then
6102: LD_EXP 20
6106: NOT
6107: IFFALSE 6111
// exit ;
6109: GO 6300
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
6111: LD_ADDR_EXP 48
6115: PUSH
6116: LD_INT 8400
6118: PUSH
6119: LD_INT 2100
6121: PUSH
6122: LD_EXP 20
6126: MUL
6127: PLUS
6128: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
6129: LD_ADDR_EXP 49
6133: PUSH
6134: LD_INT 1
6136: ST_TO_ADDR
// for i := 1 to 8 do
6137: LD_ADDR_VAR 0 2
6141: PUSH
6142: DOUBLE
6143: LD_INT 1
6145: DEC
6146: ST_TO_ADDR
6147: LD_INT 8
6149: PUSH
6150: FOR_TO
6151: IFFALSE 6298
// if mpSidePositions [ i ] then
6153: LD_EXP 7
6157: PUSH
6158: LD_VAR 0 2
6162: ARRAY
6163: IFFALSE 6296
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
6165: LD_EXP 19
6169: PUSH
6170: LD_EXP 7
6174: PUSH
6175: LD_VAR 0 2
6179: ARRAY
6180: ARRAY
6181: PPUSH
6182: LD_INT 5
6184: PPUSH
6185: CALL_OW 424
// for j := 1 to 8 do
6189: LD_ADDR_VAR 0 3
6193: PUSH
6194: DOUBLE
6195: LD_INT 1
6197: DEC
6198: ST_TO_ADDR
6199: LD_INT 8
6201: PUSH
6202: FOR_TO
6203: IFFALSE 6294
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6205: LD_EXP 7
6209: PUSH
6210: LD_VAR 0 3
6214: ARRAY
6215: IFFALSE 6264
6217: PUSH
6218: LD_EXP 8
6222: PUSH
6223: LD_VAR 0 2
6227: ARRAY
6228: PUSH
6229: LD_EXP 8
6233: PUSH
6234: LD_VAR 0 3
6238: ARRAY
6239: NONEQUAL
6240: IFTRUE 6263
6242: PUSH
6243: LD_EXP 11
6247: NOT
6248: IFFALSE 6262
6250: PUSH
6251: LD_VAR 0 2
6255: PUSH
6256: LD_VAR 0 3
6260: NONEQUAL
6261: AND
6262: OR
6263: AND
6264: IFFALSE 6292
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6266: LD_VAR 0 3
6270: PPUSH
6271: LD_EXP 19
6275: PUSH
6276: LD_EXP 7
6280: PUSH
6281: LD_VAR 0 2
6285: ARRAY
6286: ARRAY
6287: PPUSH
6288: CALL_OW 333
6292: GO 6202
6294: POP
6295: POP
// end ;
6296: GO 6150
6298: POP
6299: POP
// end ;
6300: LD_VAR 0 1
6304: RET
// function EndBuildUp ; var i , j ; begin
6305: LD_INT 0
6307: PPUSH
6308: PPUSH
6309: PPUSH
// mpBuildUpTimeActive := false ;
6310: LD_ADDR_EXP 49
6314: PUSH
6315: LD_INT 0
6317: ST_TO_ADDR
// for i := 1 to 8 do
6318: LD_ADDR_VAR 0 2
6322: PUSH
6323: DOUBLE
6324: LD_INT 1
6326: DEC
6327: ST_TO_ADDR
6328: LD_INT 8
6330: PUSH
6331: FOR_TO
6332: IFFALSE 6479
// if mpSidePositions [ i ] then
6334: LD_EXP 7
6338: PUSH
6339: LD_VAR 0 2
6343: ARRAY
6344: IFFALSE 6477
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
6346: LD_EXP 19
6350: PUSH
6351: LD_EXP 7
6355: PUSH
6356: LD_VAR 0 2
6360: ARRAY
6361: ARRAY
6362: PPUSH
6363: LD_INT 0
6365: PPUSH
6366: CALL_OW 424
// for j := 1 to 8 do
6370: LD_ADDR_VAR 0 3
6374: PUSH
6375: DOUBLE
6376: LD_INT 1
6378: DEC
6379: ST_TO_ADDR
6380: LD_INT 8
6382: PUSH
6383: FOR_TO
6384: IFFALSE 6475
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6386: LD_EXP 7
6390: PUSH
6391: LD_VAR 0 3
6395: ARRAY
6396: IFFALSE 6445
6398: PUSH
6399: LD_EXP 8
6403: PUSH
6404: LD_VAR 0 2
6408: ARRAY
6409: PUSH
6410: LD_EXP 8
6414: PUSH
6415: LD_VAR 0 3
6419: ARRAY
6420: NONEQUAL
6421: IFTRUE 6444
6423: PUSH
6424: LD_EXP 11
6428: NOT
6429: IFFALSE 6443
6431: PUSH
6432: LD_VAR 0 2
6436: PUSH
6437: LD_VAR 0 3
6441: NONEQUAL
6442: AND
6443: OR
6444: AND
6445: IFFALSE 6473
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6447: LD_VAR 0 3
6451: PPUSH
6452: LD_EXP 19
6456: PUSH
6457: LD_EXP 7
6461: PUSH
6462: LD_VAR 0 2
6466: ARRAY
6467: ARRAY
6468: PPUSH
6469: CALL_OW 334
6473: GO 6383
6475: POP
6476: POP
// end ;
6477: GO 6331
6479: POP
6480: POP
// end ;
6481: LD_VAR 0 1
6485: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
6486: LD_EXP 49
6490: IFFALSE 6669
6492: GO 6494
6494: DISABLE
6495: LD_INT 0
6497: PPUSH
6498: PPUSH
// begin for i := 1 to 8 do
6499: LD_ADDR_VAR 0 1
6503: PUSH
6504: DOUBLE
6505: LD_INT 1
6507: DEC
6508: ST_TO_ADDR
6509: LD_INT 8
6511: PUSH
6512: FOR_TO
6513: IFFALSE 6666
// if mpSidePositions [ i ] then
6515: LD_EXP 7
6519: PUSH
6520: LD_VAR 0 1
6524: ARRAY
6525: IFFALSE 6664
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
6527: LD_ADDR_VAR 0 2
6531: PUSH
6532: LD_EXP 19
6536: PUSH
6537: LD_EXP 7
6541: PUSH
6542: LD_VAR 0 1
6546: ARRAY
6547: ARRAY
6548: PPUSH
6549: LD_INT 2
6551: PUSH
6552: LD_INT 21
6554: PUSH
6555: LD_INT 1
6557: PUSH
6558: EMPTY
6559: LIST
6560: LIST
6561: PUSH
6562: LD_INT 21
6564: PUSH
6565: LD_INT 2
6567: PUSH
6568: EMPTY
6569: LIST
6570: LIST
6571: PUSH
6572: EMPTY
6573: LIST
6574: LIST
6575: LIST
6576: PUSH
6577: LD_INT 22
6579: PUSH
6580: LD_OWVAR 2
6584: PUSH
6585: EMPTY
6586: LIST
6587: LIST
6588: PUSH
6589: EMPTY
6590: LIST
6591: LIST
6592: PPUSH
6593: CALL_OW 70
6597: PUSH
6598: FOR_IN
6599: IFFALSE 6662
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
6601: LD_EXP 8
6605: PUSH
6606: LD_VAR 0 1
6610: ARRAY
6611: PUSH
6612: LD_EXP 8
6616: PUSH
6617: LD_OWVAR 2
6621: ARRAY
6622: NONEQUAL
6623: IFTRUE 6646
6625: PUSH
6626: LD_EXP 11
6630: NOT
6631: IFFALSE 6645
6633: PUSH
6634: LD_VAR 0 1
6638: PUSH
6639: LD_OWVAR 2
6643: NONEQUAL
6644: AND
6645: OR
6646: IFFALSE 6660
// ComMoveToArea ( un , BuildUpEscape ) ;
6648: LD_VAR 0 2
6652: PPUSH
6653: LD_INT 38
6655: PPUSH
6656: CALL_OW 113
6660: GO 6598
6662: POP
6663: POP
6664: GO 6512
6666: POP
6667: POP
// enable ;
6668: ENABLE
// end ;
6669: PPOPN 2
6671: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
6672: LD_EXP 20
6676: IFFALSE 6726
6678: GO 6680
6680: DISABLE
6681: LD_INT 0
6683: PPUSH
// begin tmp := mpBuildUpTime ;
6684: LD_ADDR_VAR 0 1
6688: PUSH
6689: LD_EXP 20
6693: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6694: LD_INT 35
6696: PPUSH
6697: CALL_OW 67
// tmp := tmp - 0 0$1 ;
6701: LD_ADDR_VAR 0 1
6705: PUSH
6706: LD_VAR 0 1
6710: PUSH
6711: LD_INT 35
6713: MINUS
6714: ST_TO_ADDR
// until not tmp ;
6715: LD_VAR 0 1
6719: NOT
6720: IFFALSE 6694
// EndBuildUp ;
6722: CALL 6305 0 0
// end ;
6726: PPOPN 1
6728: END
// every 0 0$1 trigger mpActive marked mpWin do
6729: LD_INT 100
6731: IFFALSE 6765
6733: GO 6735
6735: DISABLE
// begin if IAmServer then
6736: CALL_OW 518
6740: IFFALSE 6749
// wait ( 0 0$3 ) ;
6742: LD_INT 105
6744: PPUSH
6745: CALL_OW 67
// if Multiplayer then
6749: LD_OWVAR 4
6753: IFFALSE 6761
// YouWinInMultiplayer else
6755: CALL_OW 106
6759: GO 6765
// YouWin ;
6761: CALL_OW 103
// end ;
6765: END
// export function HasPowerByGameType ( gameType , side ) ; begin
6766: LD_INT 0
6768: PPUSH
// result := false ;
6769: LD_ADDR_VAR 0 3
6773: PUSH
6774: LD_INT 0
6776: ST_TO_ADDR
// case gameType of GameTypeNormal , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact :
6777: LD_VAR 0 1
6781: PUSH
6782: LD_INT 1
6784: DOUBLE
6785: EQUAL
6786: IFTRUE 6808
6788: LD_INT 5
6790: DOUBLE
6791: EQUAL
6792: IFTRUE 6808
6794: LD_INT 6
6796: DOUBLE
6797: EQUAL
6798: IFTRUE 6808
6800: LD_INT 7
6802: DOUBLE
6803: EQUAL
6804: IFTRUE 6808
6806: GO 6881
6808: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
6809: LD_ADDR_VAR 0 3
6813: PUSH
6814: LD_INT 22
6816: PUSH
6817: LD_VAR 0 2
6821: PUSH
6822: EMPTY
6823: LIST
6824: LIST
6825: PUSH
6826: LD_INT 2
6828: PUSH
6829: LD_INT 21
6831: PUSH
6832: LD_INT 1
6834: PUSH
6835: EMPTY
6836: LIST
6837: LIST
6838: PUSH
6839: LD_INT 33
6841: PUSH
6842: LD_INT 3
6844: PUSH
6845: EMPTY
6846: LIST
6847: LIST
6848: PUSH
6849: LD_INT 33
6851: PUSH
6852: LD_INT 5
6854: PUSH
6855: EMPTY
6856: LIST
6857: LIST
6858: PUSH
6859: EMPTY
6860: LIST
6861: LIST
6862: LIST
6863: LIST
6864: PUSH
6865: EMPTY
6866: LIST
6867: LIST
6868: PPUSH
6869: CALL_OW 69
6873: PPUSH
6874: CALL 13593 0 1
6878: ST_TO_ADDR
// end ; GameTypeSurvival :
6879: GO 7277
6881: LD_INT 2
6883: DOUBLE
6884: EQUAL
6885: IFTRUE 6889
6887: GO 7019
6889: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
6890: LD_ADDR_VAR 0 3
6894: PUSH
6895: LD_INT 22
6897: PUSH
6898: LD_VAR 0 2
6902: PUSH
6903: EMPTY
6904: LIST
6905: LIST
6906: PUSH
6907: LD_INT 2
6909: PUSH
6910: LD_INT 30
6912: PUSH
6913: LD_INT 0
6915: PUSH
6916: EMPTY
6917: LIST
6918: LIST
6919: PUSH
6920: LD_INT 30
6922: PUSH
6923: LD_INT 1
6925: PUSH
6926: EMPTY
6927: LIST
6928: LIST
6929: PUSH
6930: EMPTY
6931: LIST
6932: LIST
6933: LIST
6934: PUSH
6935: EMPTY
6936: LIST
6937: LIST
6938: PPUSH
6939: CALL_OW 69
6943: PPUSH
6944: CALL 13593 0 1
6948: IFFALSE 7016
6950: PUSH
6951: LD_INT 22
6953: PUSH
6954: LD_VAR 0 2
6958: PUSH
6959: EMPTY
6960: LIST
6961: LIST
6962: PUSH
6963: LD_INT 2
6965: PUSH
6966: LD_INT 21
6968: PUSH
6969: LD_INT 1
6971: PUSH
6972: EMPTY
6973: LIST
6974: LIST
6975: PUSH
6976: LD_INT 33
6978: PUSH
6979: LD_INT 3
6981: PUSH
6982: EMPTY
6983: LIST
6984: LIST
6985: PUSH
6986: LD_INT 33
6988: PUSH
6989: LD_INT 5
6991: PUSH
6992: EMPTY
6993: LIST
6994: LIST
6995: PUSH
6996: EMPTY
6997: LIST
6998: LIST
6999: LIST
7000: LIST
7001: PUSH
7002: EMPTY
7003: LIST
7004: LIST
7005: PPUSH
7006: CALL_OW 69
7010: PPUSH
7011: CALL 13593 0 1
7015: AND
7016: ST_TO_ADDR
// end ; GameTypeSurvivalH :
7017: GO 7277
7019: LD_INT 8
7021: DOUBLE
7022: EQUAL
7023: IFTRUE 7027
7025: GO 7176
7027: POP
// begin result := IsLive ( mpCommanders [ side ] ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
7028: LD_ADDR_VAR 0 3
7032: PUSH
7033: LD_EXP 41
7037: PUSH
7038: LD_VAR 0 2
7042: ARRAY
7043: PPUSH
7044: CALL_OW 300
7048: IFFALSE 7105
7050: PUSH
7051: LD_INT 22
7053: PUSH
7054: LD_VAR 0 2
7058: PUSH
7059: EMPTY
7060: LIST
7061: LIST
7062: PUSH
7063: LD_INT 2
7065: PUSH
7066: LD_INT 30
7068: PUSH
7069: LD_INT 0
7071: PUSH
7072: EMPTY
7073: LIST
7074: LIST
7075: PUSH
7076: LD_INT 30
7078: PUSH
7079: LD_INT 1
7081: PUSH
7082: EMPTY
7083: LIST
7084: LIST
7085: PUSH
7086: EMPTY
7087: LIST
7088: LIST
7089: LIST
7090: PUSH
7091: EMPTY
7092: LIST
7093: LIST
7094: PPUSH
7095: CALL_OW 69
7099: PPUSH
7100: CALL 13593 0 1
7104: AND
7105: IFFALSE 7173
7107: PUSH
7108: LD_INT 22
7110: PUSH
7111: LD_VAR 0 2
7115: PUSH
7116: EMPTY
7117: LIST
7118: LIST
7119: PUSH
7120: LD_INT 2
7122: PUSH
7123: LD_INT 21
7125: PUSH
7126: LD_INT 1
7128: PUSH
7129: EMPTY
7130: LIST
7131: LIST
7132: PUSH
7133: LD_INT 33
7135: PUSH
7136: LD_INT 3
7138: PUSH
7139: EMPTY
7140: LIST
7141: LIST
7142: PUSH
7143: LD_INT 33
7145: PUSH
7146: LD_INT 5
7148: PUSH
7149: EMPTY
7150: LIST
7151: LIST
7152: PUSH
7153: EMPTY
7154: LIST
7155: LIST
7156: LIST
7157: LIST
7158: PUSH
7159: EMPTY
7160: LIST
7161: LIST
7162: PPUSH
7163: CALL_OW 69
7167: PPUSH
7168: CALL 13593 0 1
7172: AND
7173: ST_TO_ADDR
// end ; GameTypeKing :
7174: GO 7277
7176: LD_INT 3
7178: DOUBLE
7179: EQUAL
7180: IFTRUE 7184
7182: GO 7276
7184: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
7185: LD_ADDR_VAR 0 3
7189: PUSH
7190: LD_INT 22
7192: PUSH
7193: LD_VAR 0 2
7197: PUSH
7198: EMPTY
7199: LIST
7200: LIST
7201: PUSH
7202: LD_INT 2
7204: PUSH
7205: LD_INT 21
7207: PUSH
7208: LD_INT 1
7210: PUSH
7211: EMPTY
7212: LIST
7213: LIST
7214: PUSH
7215: LD_INT 33
7217: PUSH
7218: LD_INT 3
7220: PUSH
7221: EMPTY
7222: LIST
7223: LIST
7224: PUSH
7225: LD_INT 33
7227: PUSH
7228: LD_INT 5
7230: PUSH
7231: EMPTY
7232: LIST
7233: LIST
7234: PUSH
7235: EMPTY
7236: LIST
7237: LIST
7238: LIST
7239: LIST
7240: PUSH
7241: EMPTY
7242: LIST
7243: LIST
7244: PPUSH
7245: CALL_OW 69
7249: PPUSH
7250: CALL 13593 0 1
7254: IFFALSE 7273
7256: PUSH
7257: LD_VAR 0 2
7261: PPUSH
7262: CALL 62581 0 1
7266: PUSH
7267: LD_EXP 35
7271: LESS
7272: AND
7273: ST_TO_ADDR
// end ; end ;
7274: GO 7277
7276: POP
// end ;
7277: LD_VAR 0 3
7281: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
7282: LD_INT 100
7284: IFFALSE 7514
7286: GO 7288
7288: DISABLE
7289: LD_INT 0
7291: PPUSH
7292: PPUSH
// begin if Multiplayer then
7293: LD_OWVAR 4
7297: IFFALSE 7305
// SetPlayerSpectator ( ) else
7299: CALL_OW 572
7303: GO 7314
// FogOff ( your_side ) ;
7305: LD_OWVAR 2
7309: PPUSH
7310: CALL_OW 344
// repeat gameIsOn := false ;
7314: LD_ADDR_VAR 0 1
7318: PUSH
7319: LD_INT 0
7321: ST_TO_ADDR
// for i := 1 to 8 do
7322: LD_ADDR_VAR 0 2
7326: PUSH
7327: DOUBLE
7328: LD_INT 1
7330: DEC
7331: ST_TO_ADDR
7332: LD_INT 8
7334: PUSH
7335: FOR_TO
7336: IFFALSE 7466
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
7338: LD_EXP 7
7342: PUSH
7343: LD_VAR 0 2
7347: ARRAY
7348: IFFALSE 7361
7350: PUSH
7351: LD_VAR 0 2
7355: PPUSH
7356: CALL_OW 108
7360: AND
7361: IFFALSE 7375
7363: PUSH
7364: LD_VAR 0 2
7368: PUSH
7369: LD_OWVAR 2
7373: NONEQUAL
7374: AND
7375: IFFALSE 7464
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
7377: LD_EXP 8
7381: PUSH
7382: LD_VAR 0 2
7386: ARRAY
7387: NOT
7388: IFTRUE 7436
7390: PUSH
7391: LD_EXP 8
7395: PUSH
7396: LD_VAR 0 2
7400: ARRAY
7401: PUSH
7402: LD_EXP 8
7406: PUSH
7407: LD_OWVAR 2
7411: ARRAY
7412: NONEQUAL
7413: IFFALSE 7435
7415: PUSH
7416: LD_OWVAR 2
7420: PPUSH
7421: LD_VAR 0 2
7425: PPUSH
7426: CALL_OW 81
7430: PUSH
7431: LD_INT 1
7433: NONEQUAL
7434: AND
7435: OR
7436: IFFALSE 7464
// if HasPowerByGameType ( mpGameType , i ) then
7438: LD_EXP 3
7442: PPUSH
7443: LD_VAR 0 2
7447: PPUSH
7448: CALL 6766 0 2
7452: IFFALSE 7464
// begin gameIsOn := true ;
7454: LD_ADDR_VAR 0 1
7458: PUSH
7459: LD_INT 1
7461: ST_TO_ADDR
// break ;
7462: GO 7466
// end ;
7464: GO 7335
7466: POP
7467: POP
// wait ( 100 ) ;
7468: LD_INT 100
7470: PPUSH
7471: CALL_OW 67
// until not gameIsOn ;
7475: LD_VAR 0 1
7479: NOT
7480: IFFALSE 7314
// if IAmServer then
7482: CALL_OW 518
7486: IFFALSE 7495
// wait ( 0 0$3 ) ;
7488: LD_INT 105
7490: PPUSH
7491: CALL_OW 67
// if Multiplayer then
7495: LD_OWVAR 4
7499: IFFALSE 7507
// YouLostInMultiplayer else
7501: CALL_OW 107
7505: GO 7514
// YouLost (  ) ;
7507: LD_STRING 
7509: PPUSH
7510: CALL_OW 104
// end ;
7514: PPOPN 2
7516: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
7517: LD_EXP 33
7521: IFFALSE 7905
7523: GO 7525
7525: DISABLE
7526: LD_INT 0
7528: PPUSH
7529: PPUSH
7530: PPUSH
7531: PPUSH
7532: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
7533: LD_ADDR_VAR 0 5
7537: PUSH
7538: LD_INT 1
7540: PUSH
7541: LD_INT 2
7543: PUSH
7544: LD_INT 3
7546: PUSH
7547: LD_INT 4
7549: PUSH
7550: LD_INT 5
7552: PUSH
7553: LD_INT 6
7555: PUSH
7556: LD_INT 7
7558: PUSH
7559: LD_INT 8
7561: PUSH
7562: EMPTY
7563: LIST
7564: LIST
7565: LIST
7566: LIST
7567: LIST
7568: LIST
7569: LIST
7570: LIST
7571: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
7572: LD_INT 350
7574: PPUSH
7575: CALL_OW 67
// for i := 1 to 8 do
7579: LD_ADDR_VAR 0 1
7583: PUSH
7584: DOUBLE
7585: LD_INT 1
7587: DEC
7588: ST_TO_ADDR
7589: LD_INT 8
7591: PUSH
7592: FOR_TO
7593: IFFALSE 7875
// begin j := sides [ i ] ;
7595: LD_ADDR_VAR 0 2
7599: PUSH
7600: LD_VAR 0 5
7604: PUSH
7605: LD_VAR 0 1
7609: ARRAY
7610: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
7611: LD_EXP 40
7615: PUSH
7616: LD_VAR 0 2
7620: ARRAY
7621: PPUSH
7622: CALL 13593 0 1
7626: IFFALSE 7639
7628: PUSH
7629: LD_VAR 0 2
7633: PPUSH
7634: CALL_OW 108
7638: AND
7639: IFFALSE 7657
7641: PUSH
7642: LD_EXP 3
7646: PPUSH
7647: LD_VAR 0 2
7651: PPUSH
7652: CALL 6766 0 2
7656: AND
7657: IFFALSE 7873
// begin wait ( mpRespawn div 2 ) ;
7659: LD_EXP 33
7663: PUSH
7664: LD_INT 2
7666: DIV
7667: PPUSH
7668: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7672: LD_ADDR_VAR 0 3
7676: PUSH
7677: LD_INT 22
7679: PUSH
7680: LD_VAR 0 2
7684: PUSH
7685: EMPTY
7686: LIST
7687: LIST
7688: PUSH
7689: LD_INT 50
7691: PUSH
7692: EMPTY
7693: LIST
7694: PUSH
7695: LD_INT 2
7697: PUSH
7698: LD_INT 30
7700: PUSH
7701: LD_INT 0
7703: PUSH
7704: EMPTY
7705: LIST
7706: LIST
7707: PUSH
7708: LD_INT 30
7710: PUSH
7711: LD_INT 1
7713: PUSH
7714: EMPTY
7715: LIST
7716: LIST
7717: PUSH
7718: EMPTY
7719: LIST
7720: LIST
7721: LIST
7722: PUSH
7723: EMPTY
7724: LIST
7725: LIST
7726: LIST
7727: PPUSH
7728: CALL_OW 69
7732: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
7733: LD_VAR 0 3
7737: NOT
7738: IFTRUE 7752
7740: PUSH
7741: LD_VAR 0 2
7745: PPUSH
7746: CALL_OW 108
7750: NOT
7751: OR
7752: IFTRUE 7771
7754: PUSH
7755: LD_EXP 3
7759: PPUSH
7760: LD_VAR 0 2
7764: PPUSH
7765: CALL 6766 0 2
7769: NOT
7770: OR
7771: IFFALSE 7775
// continue ;
7773: GO 7592
// spawn := tmp [ 1 ] ;
7775: LD_ADDR_VAR 0 4
7779: PUSH
7780: LD_VAR 0 3
7784: PUSH
7785: LD_INT 1
7787: ARRAY
7788: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
7789: LD_EXP 40
7793: PUSH
7794: LD_VAR 0 2
7798: ARRAY
7799: PUSH
7800: LD_INT 1
7802: ARRAY
7803: PPUSH
7804: LD_VAR 0 4
7808: PPUSH
7809: CALL_OW 250
7813: PPUSH
7814: LD_VAR 0 4
7818: PPUSH
7819: CALL_OW 251
7823: PPUSH
7824: LD_INT 32
7826: PPUSH
7827: LD_INT 1
7829: PPUSH
7830: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
7834: LD_ADDR_EXP 40
7838: PUSH
7839: LD_EXP 40
7843: PPUSH
7844: LD_VAR 0 2
7848: PPUSH
7849: LD_EXP 40
7853: PUSH
7854: LD_VAR 0 2
7858: ARRAY
7859: PPUSH
7860: LD_INT 1
7862: PPUSH
7863: CALL_OW 3
7867: PPUSH
7868: CALL_OW 1
7872: ST_TO_ADDR
// end ; end ;
7873: GO 7592
7875: POP
7876: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
7877: LD_ADDR_VAR 0 5
7881: PUSH
7882: LD_VAR 0 5
7886: PPUSH
7887: LD_INT 1
7889: PPUSH
7890: LD_INT 8
7892: PPUSH
7893: LD_INT 1
7895: PPUSH
7896: CALL 15919 0 4
7900: ST_TO_ADDR
// until false ;
7901: LD_INT 0
7903: IFFALSE 7572
// end ;
7905: PPOPN 5
7907: END
// every 0 0$1 marked mpActive do
7908: GO 7910
7910: DISABLE
// begin enable ;
7911: ENABLE
// if not mpDisplayStrings then
7912: LD_EXP 38
7916: NOT
7917: IFFALSE 7928
// begin display_strings := [ ] ;
7919: LD_ADDR_OWVAR 47
7923: PUSH
7924: EMPTY
7925: ST_TO_ADDR
// exit ;
7926: GO 7938
// end ; display_strings := mpDisplayStrings ;
7928: LD_ADDR_OWVAR 47
7932: PUSH
7933: LD_EXP 38
7937: ST_TO_ADDR
// end ; end_of_file
7938: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
7939: LD_INT 0
7941: PPUSH
7942: PPUSH
7943: PPUSH
7944: PPUSH
7945: PPUSH
7946: PPUSH
7947: PPUSH
7948: PPUSH
7949: PPUSH
// if GetType ( un ) = unit_vehicle then
7950: LD_VAR 0 1
7954: PPUSH
7955: CALL_OW 247
7959: PUSH
7960: LD_INT 2
7962: EQUAL
7963: IFFALSE 7967
// exit ;
7965: GO 8740
// side := GetSide ( un ) ;
7967: LD_ADDR_VAR 0 9
7971: PUSH
7972: LD_VAR 0 1
7976: PPUSH
7977: CALL_OW 255
7981: ST_TO_ADDR
// if mpGameType in [ GameTypeSurvival , GameTypeSurvivalH ] then
7982: LD_EXP 3
7986: PUSH
7987: LD_INT 2
7989: PUSH
7990: LD_INT 8
7992: PUSH
7993: EMPTY
7994: LIST
7995: LIST
7996: IN
7997: IFFALSE 8091
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
7999: LD_VAR 0 1
8003: PPUSH
8004: CALL_OW 266
8008: PUSH
8009: LD_INT 0
8011: PUSH
8012: LD_INT 1
8014: PUSH
8015: EMPTY
8016: LIST
8017: LIST
8018: IN
8019: IFFALSE 8091
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
8021: LD_ADDR_VAR 0 3
8025: PUSH
8026: LD_INT 22
8028: PUSH
8029: LD_VAR 0 9
8033: PUSH
8034: EMPTY
8035: LIST
8036: LIST
8037: PUSH
8038: LD_INT 2
8040: PUSH
8041: LD_INT 21
8043: PUSH
8044: LD_INT 1
8046: PUSH
8047: EMPTY
8048: LIST
8049: LIST
8050: PUSH
8051: LD_INT 33
8053: PUSH
8054: LD_INT 3
8056: PUSH
8057: EMPTY
8058: LIST
8059: LIST
8060: PUSH
8061: EMPTY
8062: LIST
8063: LIST
8064: LIST
8065: PUSH
8066: EMPTY
8067: LIST
8068: LIST
8069: PPUSH
8070: CALL_OW 69
8074: PUSH
8075: FOR_IN
8076: IFFALSE 8089
// KillUnit ( i ) ;
8078: LD_VAR 0 3
8082: PPUSH
8083: CALL_OW 66
8087: GO 8075
8089: POP
8090: POP
// end ; if mpGameType = GameTypeSurvivalH then
8091: LD_EXP 3
8095: PUSH
8096: LD_INT 8
8098: EQUAL
8099: IFFALSE 8183
// if un in mpCommanders then
8101: LD_VAR 0 1
8105: PUSH
8106: LD_EXP 41
8110: IN
8111: IFFALSE 8183
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
8113: LD_ADDR_VAR 0 3
8117: PUSH
8118: LD_INT 22
8120: PUSH
8121: LD_VAR 0 9
8125: PUSH
8126: EMPTY
8127: LIST
8128: LIST
8129: PUSH
8130: LD_INT 2
8132: PUSH
8133: LD_INT 21
8135: PUSH
8136: LD_INT 1
8138: PUSH
8139: EMPTY
8140: LIST
8141: LIST
8142: PUSH
8143: LD_INT 33
8145: PUSH
8146: LD_INT 3
8148: PUSH
8149: EMPTY
8150: LIST
8151: LIST
8152: PUSH
8153: EMPTY
8154: LIST
8155: LIST
8156: LIST
8157: PUSH
8158: EMPTY
8159: LIST
8160: LIST
8161: PPUSH
8162: CALL_OW 69
8166: PUSH
8167: FOR_IN
8168: IFFALSE 8181
// KillUnit ( i ) ;
8170: LD_VAR 0 3
8174: PPUSH
8175: CALL_OW 66
8179: GO 8167
8181: POP
8182: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
8183: LD_VAR 0 1
8187: PPUSH
8188: CALL_OW 257
8192: PUSH
8193: LD_INT 12
8195: PUSH
8196: LD_INT 17
8198: PUSH
8199: LD_INT 15
8201: PUSH
8202: LD_INT 16
8204: PUSH
8205: EMPTY
8206: LIST
8207: LIST
8208: LIST
8209: LIST
8210: IN
8211: IFTRUE 8228
8213: PUSH
8214: LD_VAR 0 1
8218: PPUSH
8219: CALL_OW 263
8223: PUSH
8224: LD_INT 5
8226: EQUAL
8227: OR
8228: IFFALSE 8465
// begin tag := 0 ;
8230: LD_ADDR_VAR 0 5
8234: PUSH
8235: LD_INT 0
8237: ST_TO_ADDR
// for i := 1 to 8 do
8238: LD_ADDR_VAR 0 3
8242: PUSH
8243: DOUBLE
8244: LD_INT 1
8246: DEC
8247: ST_TO_ADDR
8248: LD_INT 8
8250: PUSH
8251: FOR_TO
8252: IFFALSE 8286
// if un in mpApePosIndex [ i ] then
8254: LD_VAR 0 1
8258: PUSH
8259: LD_EXP 32
8263: PUSH
8264: LD_VAR 0 3
8268: ARRAY
8269: IN
8270: IFFALSE 8284
// begin tag := i ;
8272: LD_ADDR_VAR 0 5
8276: PUSH
8277: LD_VAR 0 3
8281: ST_TO_ADDR
// break ;
8282: GO 8286
// end ;
8284: GO 8251
8286: POP
8287: POP
// if not tag then
8288: LD_VAR 0 5
8292: NOT
8293: IFFALSE 8297
// exit ;
8295: GO 8740
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
8297: LD_ADDR_VAR 0 7
8301: PUSH
8302: LD_EXP 31
8306: PUSH
8307: LD_EXP 7
8311: PUSH
8312: LD_VAR 0 5
8316: ARRAY
8317: ARRAY
8318: ST_TO_ADDR
// if not area then
8319: LD_VAR 0 7
8323: NOT
8324: IFFALSE 8328
// exit ;
8326: GO 8740
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
8328: LD_INT 14700
8330: PUSH
8331: LD_VAR 0 1
8335: PUSH
8336: LD_INT 5
8338: MOD
8339: PUSH
8340: LD_INT 1
8342: PLUS
8343: PUSH
8344: LD_INT 700
8346: MUL
8347: PLUS
8348: PPUSH
8349: CALL_OW 67
// repeat wait ( 10 ) ;
8353: LD_INT 10
8355: PPUSH
8356: CALL_OW 67
// until not mpBlockRespThread ;
8360: LD_EXP 47
8364: NOT
8365: IFFALSE 8353
// mpBlockRespThread := true ;
8367: LD_ADDR_EXP 47
8371: PUSH
8372: LD_INT 1
8374: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
8375: LD_INT 0
8377: PPUSH
8378: CALL 45696 0 1
// ape := CreateHuman ;
8382: LD_ADDR_VAR 0 4
8386: PUSH
8387: CALL_OW 44
8391: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
8392: LD_ADDR_EXP 32
8396: PUSH
8397: LD_EXP 32
8401: PPUSH
8402: LD_VAR 0 5
8406: PPUSH
8407: LD_EXP 32
8411: PUSH
8412: LD_VAR 0 5
8416: ARRAY
8417: PPUSH
8418: LD_VAR 0 4
8422: PPUSH
8423: CALL 49569 0 2
8427: PPUSH
8428: CALL_OW 1
8432: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
8433: LD_VAR 0 4
8437: PPUSH
8438: LD_VAR 0 7
8442: PPUSH
8443: LD_INT 0
8445: PPUSH
8446: CALL_OW 49
// wait ( 10 ) ;
8450: LD_INT 10
8452: PPUSH
8453: CALL_OW 67
// mpBlockRespThread := false ;
8457: LD_ADDR_EXP 47
8461: PUSH
8462: LD_INT 0
8464: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
8465: LD_VAR 0 1
8469: PPUSH
8470: CALL_OW 247
8474: PUSH
8475: LD_INT 1
8477: EQUAL
8478: IFFALSE 8495
8480: PUSH
8481: LD_VAR 0 1
8485: PPUSH
8486: CALL_OW 248
8490: PUSH
8491: LD_INT 0
8493: GREATER
8494: AND
8495: IFFALSE 8740
// begin if not mpRespawn then
8497: LD_EXP 33
8501: NOT
8502: IFFALSE 8506
// exit ;
8504: GO 8740
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
8506: LD_VAR 0 9
8510: PPUSH
8511: CALL_OW 108
8515: NOT
8516: IFFALSE 8535
8518: PUSH
8519: LD_EXP 3
8523: PPUSH
8524: LD_VAR 0 9
8528: PPUSH
8529: CALL 6766 0 2
8533: NOT
8534: AND
8535: IFFALSE 8539
// exit ;
8537: GO 8740
// side := GetSide ( un ) ;
8539: LD_ADDR_VAR 0 9
8543: PUSH
8544: LD_VAR 0 1
8548: PPUSH
8549: CALL_OW 255
8553: ST_TO_ADDR
// nation := GetNation ( un ) ;
8554: LD_ADDR_VAR 0 8
8558: PUSH
8559: LD_VAR 0 1
8563: PPUSH
8564: CALL_OW 248
8568: ST_TO_ADDR
// class := GetClass ( un ) ;
8569: LD_ADDR_VAR 0 6
8573: PUSH
8574: LD_VAR 0 1
8578: PPUSH
8579: CALL_OW 257
8583: ST_TO_ADDR
// if class > 4 then
8584: LD_VAR 0 6
8588: PUSH
8589: LD_INT 4
8591: GREATER
8592: IFFALSE 8602
// class := 1 ;
8594: LD_ADDR_VAR 0 6
8598: PUSH
8599: LD_INT 1
8601: ST_TO_ADDR
// repeat wait ( 10 ) ;
8602: LD_INT 10
8604: PPUSH
8605: CALL_OW 67
// until not mpBlockRespThread ;
8609: LD_EXP 47
8613: NOT
8614: IFFALSE 8602
// mpBlockRespThread := true ;
8616: LD_ADDR_EXP 47
8620: PUSH
8621: LD_INT 1
8623: ST_TO_ADDR
// uc_side := side ;
8624: LD_ADDR_OWVAR 20
8628: PUSH
8629: LD_VAR 0 9
8633: ST_TO_ADDR
// uc_nation := nation ;
8634: LD_ADDR_OWVAR 21
8638: PUSH
8639: LD_VAR 0 8
8643: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
8644: LD_INT 0
8646: PPUSH
8647: LD_VAR 0 6
8651: PPUSH
8652: LD_INT 2
8654: PPUSH
8655: CALL_OW 380
// un := CreateHuman ;
8659: LD_ADDR_VAR 0 1
8663: PUSH
8664: CALL_OW 44
8668: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
8669: LD_ADDR_EXP 40
8673: PUSH
8674: LD_EXP 40
8678: PPUSH
8679: LD_VAR 0 9
8683: PPUSH
8684: LD_EXP 40
8688: PUSH
8689: LD_VAR 0 9
8693: ARRAY
8694: PPUSH
8695: LD_EXP 40
8699: PUSH
8700: LD_VAR 0 9
8704: ARRAY
8705: PUSH
8706: LD_INT 1
8708: PLUS
8709: PPUSH
8710: LD_VAR 0 1
8714: PPUSH
8715: CALL_OW 1
8719: PPUSH
8720: CALL_OW 1
8724: ST_TO_ADDR
// wait ( 10 ) ;
8725: LD_INT 10
8727: PPUSH
8728: CALL_OW 67
// mpBlockRespThread := false ;
8732: LD_ADDR_EXP 47
8736: PUSH
8737: LD_INT 0
8739: ST_TO_ADDR
// end ; end ;
8740: LD_VAR 0 2
8744: RET
// export function Multiplayer_VehicleConstruction_ApeConsumed ( factory , un ) ; var i , tag , area , ape ; begin
8745: LD_INT 0
8747: PPUSH
8748: PPUSH
8749: PPUSH
8750: PPUSH
8751: PPUSH
// tag := 0 ;
8752: LD_ADDR_VAR 0 5
8756: PUSH
8757: LD_INT 0
8759: ST_TO_ADDR
// for i := 1 to 8 do
8760: LD_ADDR_VAR 0 4
8764: PUSH
8765: DOUBLE
8766: LD_INT 1
8768: DEC
8769: ST_TO_ADDR
8770: LD_INT 8
8772: PUSH
8773: FOR_TO
8774: IFFALSE 8808
// if un in mpApePosIndex [ i ] then
8776: LD_VAR 0 2
8780: PUSH
8781: LD_EXP 32
8785: PUSH
8786: LD_VAR 0 4
8790: ARRAY
8791: IN
8792: IFFALSE 8806
// begin tag := i ;
8794: LD_ADDR_VAR 0 5
8798: PUSH
8799: LD_VAR 0 4
8803: ST_TO_ADDR
// break ;
8804: GO 8808
// end ;
8806: GO 8773
8808: POP
8809: POP
// if not tag then
8810: LD_VAR 0 5
8814: NOT
8815: IFFALSE 8819
// exit ;
8817: GO 8987
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
8819: LD_ADDR_VAR 0 6
8823: PUSH
8824: LD_EXP 31
8828: PUSH
8829: LD_EXP 7
8833: PUSH
8834: LD_VAR 0 5
8838: ARRAY
8839: ARRAY
8840: ST_TO_ADDR
// if not area then
8841: LD_VAR 0 6
8845: NOT
8846: IFFALSE 8850
// exit ;
8848: GO 8987
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
8850: LD_INT 14700
8852: PUSH
8853: LD_VAR 0 2
8857: PUSH
8858: LD_INT 5
8860: MOD
8861: PUSH
8862: LD_INT 1
8864: PLUS
8865: PUSH
8866: LD_INT 700
8868: MUL
8869: PLUS
8870: PPUSH
8871: CALL_OW 67
// repeat wait ( 10 ) ;
8875: LD_INT 10
8877: PPUSH
8878: CALL_OW 67
// until not mpBlockRespThread ;
8882: LD_EXP 47
8886: NOT
8887: IFFALSE 8875
// mpBlockRespThread := true ;
8889: LD_ADDR_EXP 47
8893: PUSH
8894: LD_INT 1
8896: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
8897: LD_INT 0
8899: PPUSH
8900: CALL 45696 0 1
// ape := CreateHuman ;
8904: LD_ADDR_VAR 0 7
8908: PUSH
8909: CALL_OW 44
8913: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
8914: LD_ADDR_EXP 32
8918: PUSH
8919: LD_EXP 32
8923: PPUSH
8924: LD_VAR 0 5
8928: PPUSH
8929: LD_EXP 32
8933: PUSH
8934: LD_VAR 0 5
8938: ARRAY
8939: PPUSH
8940: LD_VAR 0 7
8944: PPUSH
8945: CALL 49569 0 2
8949: PPUSH
8950: CALL_OW 1
8954: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
8955: LD_VAR 0 7
8959: PPUSH
8960: LD_VAR 0 6
8964: PPUSH
8965: LD_INT 0
8967: PPUSH
8968: CALL_OW 49
// wait ( 10 ) ;
8972: LD_INT 10
8974: PPUSH
8975: CALL_OW 67
// mpBlockRespThread := false ;
8979: LD_ADDR_EXP 47
8983: PUSH
8984: LD_INT 0
8986: ST_TO_ADDR
// end ;
8987: LD_VAR 0 3
8991: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
8992: LD_INT 0
8994: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
8995: LD_VAR 0 1
8999: PPUSH
9000: CALL_OW 266
9004: PUSH
9005: LD_INT 0
9007: PUSH
9008: LD_INT 1
9010: PUSH
9011: EMPTY
9012: LIST
9013: LIST
9014: IN
9015: IFFALSE 9040
// SetBName ( building , @ & GetSide ( building ) ) ;
9017: LD_VAR 0 1
9021: PPUSH
9022: LD_STRING @
9024: PUSH
9025: LD_VAR 0 1
9029: PPUSH
9030: CALL_OW 255
9034: STR
9035: PPUSH
9036: CALL_OW 500
// end ;
9040: LD_VAR 0 2
9044: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
9045: LD_INT 0
9047: PPUSH
9048: PPUSH
// if mpGameType in [ GameTypeSurvival , GameTypeSurvivalH ] and GetBType ( building ) in [ b_depot , b_warehouse ] then
9049: LD_EXP 3
9053: PUSH
9054: LD_INT 2
9056: PUSH
9057: LD_INT 8
9059: PUSH
9060: EMPTY
9061: LIST
9062: LIST
9063: IN
9064: IFFALSE 9088
9066: PUSH
9067: LD_VAR 0 1
9071: PPUSH
9072: CALL_OW 266
9076: PUSH
9077: LD_INT 0
9079: PUSH
9080: LD_INT 1
9082: PUSH
9083: EMPTY
9084: LIST
9085: LIST
9086: IN
9087: AND
9088: IFFALSE 9167
// begin SetSide ( building , oldSide ) ;
9090: LD_VAR 0 1
9094: PPUSH
9095: LD_VAR 0 2
9099: PPUSH
9100: CALL_OW 235
// KillUnit ( building ) ;
9104: LD_VAR 0 1
9108: PPUSH
9109: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
9113: LD_ADDR_VAR 0 5
9117: PUSH
9118: LD_INT 22
9120: PUSH
9121: LD_VAR 0 2
9125: PUSH
9126: EMPTY
9127: LIST
9128: LIST
9129: PUSH
9130: LD_INT 21
9132: PUSH
9133: LD_INT 1
9135: PUSH
9136: EMPTY
9137: LIST
9138: LIST
9139: PUSH
9140: EMPTY
9141: LIST
9142: LIST
9143: PPUSH
9144: CALL_OW 69
9148: PUSH
9149: FOR_IN
9150: IFFALSE 9163
// KillUnit ( i ) ;
9152: LD_VAR 0 5
9156: PPUSH
9157: CALL_OW 66
9161: GO 9149
9163: POP
9164: POP
// exit ;
9165: GO 9212
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
9167: LD_VAR 0 1
9171: PPUSH
9172: CALL_OW 266
9176: PUSH
9177: LD_INT 0
9179: PUSH
9180: LD_INT 1
9182: PUSH
9183: EMPTY
9184: LIST
9185: LIST
9186: IN
9187: IFFALSE 9212
// SetBName ( building , @ & GetSide ( building ) ) ;
9189: LD_VAR 0 1
9193: PPUSH
9194: LD_STRING @
9196: PUSH
9197: LD_VAR 0 1
9201: PPUSH
9202: CALL_OW 255
9206: STR
9207: PPUSH
9208: CALL_OW 500
// end ;
9212: LD_VAR 0 4
9216: RET
// export function Multiplayer_OilExtracted ( building , side , base , amount ) ; var i , value ; begin
9217: LD_INT 0
9219: PPUSH
9220: PPUSH
9221: PPUSH
// if mpGameType <> GameTypeFamine then
9222: LD_EXP 3
9226: PUSH
9227: LD_INT 5
9229: NONEQUAL
9230: IFFALSE 9234
// exit ;
9232: GO 9468
// for i := 1 to mpGlobalOilDeposits do
9234: LD_ADDR_VAR 0 6
9238: PUSH
9239: DOUBLE
9240: LD_INT 1
9242: DEC
9243: ST_TO_ADDR
9244: LD_EXP 42
9248: PUSH
9249: FOR_TO
9250: IFFALSE 9466
// begin if HexInfo ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) = building then
9252: LD_EXP 42
9256: PUSH
9257: LD_VAR 0 6
9261: ARRAY
9262: PUSH
9263: LD_INT 1
9265: ARRAY
9266: PPUSH
9267: LD_EXP 42
9271: PUSH
9272: LD_VAR 0 6
9276: ARRAY
9277: PUSH
9278: LD_INT 2
9280: ARRAY
9281: PPUSH
9282: CALL_OW 428
9286: PUSH
9287: LD_VAR 0 1
9291: EQUAL
9292: IFFALSE 9464
// begin value := mpGlobalOilDeposits [ i ] [ 3 ] ;
9294: LD_ADDR_VAR 0 7
9298: PUSH
9299: LD_EXP 42
9303: PUSH
9304: LD_VAR 0 6
9308: ARRAY
9309: PUSH
9310: LD_INT 3
9312: ARRAY
9313: ST_TO_ADDR
// value := value - amount ;
9314: LD_ADDR_VAR 0 7
9318: PUSH
9319: LD_VAR 0 7
9323: PUSH
9324: LD_VAR 0 4
9328: MINUS
9329: ST_TO_ADDR
// mpGlobalOilDeposits := Replace ( mpGlobalOilDeposits , i , Replace ( mpGlobalOilDeposits [ i ] , 3 , value ) ) ;
9330: LD_ADDR_EXP 42
9334: PUSH
9335: LD_EXP 42
9339: PPUSH
9340: LD_VAR 0 6
9344: PPUSH
9345: LD_EXP 42
9349: PUSH
9350: LD_VAR 0 6
9354: ARRAY
9355: PPUSH
9356: LD_INT 3
9358: PPUSH
9359: LD_VAR 0 7
9363: PPUSH
9364: CALL_OW 1
9368: PPUSH
9369: CALL_OW 1
9373: ST_TO_ADDR
// if side in [ your_side , 9 ] then
9374: LD_VAR 0 2
9378: PUSH
9379: LD_OWVAR 2
9383: PUSH
9384: LD_INT 9
9386: PUSH
9387: EMPTY
9388: LIST
9389: LIST
9390: IN
9391: IFFALSE 9407
// SetUnitDisplayNumber ( building , value ) ;
9393: LD_VAR 0 1
9397: PPUSH
9398: LD_VAR 0 7
9402: PPUSH
9403: CALL_OW 505
// if value <= 0 then
9407: LD_VAR 0 7
9411: PUSH
9412: LD_INT 0
9414: LESSEQUAL
9415: IFFALSE 9464
// begin RemoveDepositXY ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) ;
9417: LD_EXP 42
9421: PUSH
9422: LD_VAR 0 6
9426: ARRAY
9427: PUSH
9428: LD_INT 1
9430: ARRAY
9431: PPUSH
9432: LD_EXP 42
9436: PUSH
9437: LD_VAR 0 6
9441: ARRAY
9442: PUSH
9443: LD_INT 2
9445: ARRAY
9446: PPUSH
9447: CALL_OW 63
// KillUnit ( building ) ;
9451: LD_VAR 0 1
9455: PPUSH
9456: CALL_OW 66
// exit ;
9460: POP
9461: POP
9462: GO 9468
// end ; end ; end ;
9464: GO 9249
9466: POP
9467: POP
// end ;
9468: LD_VAR 0 5
9472: RET
// export function Multiplayer_SibExtracted ( building , side , base , amount ) ; var i , value ; begin
9473: LD_INT 0
9475: PPUSH
9476: PPUSH
9477: PPUSH
// if mpGameType <> GameTypeFamine then
9478: LD_EXP 3
9482: PUSH
9483: LD_INT 5
9485: NONEQUAL
9486: IFFALSE 9490
// exit ;
9488: GO 9724
// for i := 1 to mpGlobalSibDeposits do
9490: LD_ADDR_VAR 0 6
9494: PUSH
9495: DOUBLE
9496: LD_INT 1
9498: DEC
9499: ST_TO_ADDR
9500: LD_EXP 43
9504: PUSH
9505: FOR_TO
9506: IFFALSE 9722
// begin if HexInfo ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) = building then
9508: LD_EXP 43
9512: PUSH
9513: LD_VAR 0 6
9517: ARRAY
9518: PUSH
9519: LD_INT 1
9521: ARRAY
9522: PPUSH
9523: LD_EXP 43
9527: PUSH
9528: LD_VAR 0 6
9532: ARRAY
9533: PUSH
9534: LD_INT 2
9536: ARRAY
9537: PPUSH
9538: CALL_OW 428
9542: PUSH
9543: LD_VAR 0 1
9547: EQUAL
9548: IFFALSE 9720
// begin value := mpGlobalSibDeposits [ i ] [ 3 ] ;
9550: LD_ADDR_VAR 0 7
9554: PUSH
9555: LD_EXP 43
9559: PUSH
9560: LD_VAR 0 6
9564: ARRAY
9565: PUSH
9566: LD_INT 3
9568: ARRAY
9569: ST_TO_ADDR
// value := value - amount ;
9570: LD_ADDR_VAR 0 7
9574: PUSH
9575: LD_VAR 0 7
9579: PUSH
9580: LD_VAR 0 4
9584: MINUS
9585: ST_TO_ADDR
// mpGlobalSibDeposits := Replace ( mpGlobalSibDeposits , i , Replace ( mpGlobalSibDeposits [ i ] , 3 , value ) ) ;
9586: LD_ADDR_EXP 43
9590: PUSH
9591: LD_EXP 43
9595: PPUSH
9596: LD_VAR 0 6
9600: PPUSH
9601: LD_EXP 43
9605: PUSH
9606: LD_VAR 0 6
9610: ARRAY
9611: PPUSH
9612: LD_INT 3
9614: PPUSH
9615: LD_VAR 0 7
9619: PPUSH
9620: CALL_OW 1
9624: PPUSH
9625: CALL_OW 1
9629: ST_TO_ADDR
// if side in [ your_side , 9 ] then
9630: LD_VAR 0 2
9634: PUSH
9635: LD_OWVAR 2
9639: PUSH
9640: LD_INT 9
9642: PUSH
9643: EMPTY
9644: LIST
9645: LIST
9646: IN
9647: IFFALSE 9663
// SetUnitDisplayNumber ( building , value ) ;
9649: LD_VAR 0 1
9653: PPUSH
9654: LD_VAR 0 7
9658: PPUSH
9659: CALL_OW 505
// if value <= 0 then
9663: LD_VAR 0 7
9667: PUSH
9668: LD_INT 0
9670: LESSEQUAL
9671: IFFALSE 9720
// begin RemoveDepositXY ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) ;
9673: LD_EXP 43
9677: PUSH
9678: LD_VAR 0 6
9682: ARRAY
9683: PUSH
9684: LD_INT 1
9686: ARRAY
9687: PPUSH
9688: LD_EXP 43
9692: PUSH
9693: LD_VAR 0 6
9697: ARRAY
9698: PUSH
9699: LD_INT 2
9701: ARRAY
9702: PPUSH
9703: CALL_OW 63
// KillUnit ( building ) ;
9707: LD_VAR 0 1
9711: PPUSH
9712: CALL_OW 66
// exit ;
9716: POP
9717: POP
9718: GO 9724
// end ; end ; end ;
9720: GO 9505
9722: POP
9723: POP
// end ;
9724: LD_VAR 0 5
9728: RET
// export function Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ; var side ; begin
9729: LD_INT 0
9731: PPUSH
9732: PPUSH
// side := GetSide ( factory ) ;
9733: LD_ADDR_VAR 0 7
9737: PUSH
9738: LD_VAR 0 1
9742: PPUSH
9743: CALL_OW 255
9747: ST_TO_ADDR
// if weapon = ar_miner and FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , ar_miner ] ] ) > 0 then
9748: LD_VAR 0 5
9752: PUSH
9753: LD_INT 81
9755: EQUAL
9756: IFFALSE 9794
9758: PUSH
9759: LD_INT 22
9761: PUSH
9762: LD_VAR 0 7
9766: PUSH
9767: EMPTY
9768: LIST
9769: LIST
9770: PUSH
9771: LD_INT 34
9773: PUSH
9774: LD_INT 81
9776: PUSH
9777: EMPTY
9778: LIST
9779: LIST
9780: PUSH
9781: EMPTY
9782: LIST
9783: LIST
9784: PPUSH
9785: CALL_OW 69
9789: PUSH
9790: LD_INT 0
9792: GREATER
9793: AND
9794: IFFALSE 9827
// begin ComCancel ( factory ) ;
9796: LD_VAR 0 1
9800: PPUSH
9801: CALL_OW 127
// if side = your_side then
9805: LD_VAR 0 7
9809: PUSH
9810: LD_OWVAR 2
9814: EQUAL
9815: IFFALSE 9827
// HintSpec ( VehLimit , 2 ) ;
9817: LD_STRING VehLimit
9819: PPUSH
9820: LD_INT 2
9822: PPUSH
9823: CALL_OW 338
// end ; end ;
9827: LD_VAR 0 6
9831: RET
// export function Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; var i , j ; begin
9832: LD_INT 0
9834: PPUSH
9835: PPUSH
9836: PPUSH
// if GetWeapon ( newId ) = ar_miner and GetControl ( newId ) = control_manual then
9837: LD_VAR 0 1
9841: PPUSH
9842: CALL_OW 264
9846: PUSH
9847: LD_INT 81
9849: EQUAL
9850: IFFALSE 9867
9852: PUSH
9853: LD_VAR 0 1
9857: PPUSH
9858: CALL_OW 263
9862: PUSH
9863: LD_INT 1
9865: EQUAL
9866: AND
9867: IFFALSE 10147
// begin for i := 1 to Count ( minersList ) do
9869: LD_ADDR_VAR 0 6
9873: PUSH
9874: DOUBLE
9875: LD_INT 1
9877: DEC
9878: ST_TO_ADDR
9879: LD_EXP 57
9883: PPUSH
9884: CALL 13593 0 1
9888: PUSH
9889: FOR_TO
9890: IFFALSE 10008
// begin if minersList [ i ] = oldId then
9892: LD_EXP 57
9896: PUSH
9897: LD_VAR 0 6
9901: ARRAY
9902: PUSH
9903: LD_VAR 0 2
9907: EQUAL
9908: IFFALSE 10006
// begin for j := 1 to minerMinesList [ i ] do
9910: LD_ADDR_VAR 0 7
9914: PUSH
9915: DOUBLE
9916: LD_INT 1
9918: DEC
9919: ST_TO_ADDR
9920: LD_EXP 58
9924: PUSH
9925: LD_VAR 0 6
9929: ARRAY
9930: PUSH
9931: FOR_TO
9932: IFFALSE 9982
// RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
9934: LD_EXP 58
9938: PUSH
9939: LD_VAR 0 6
9943: ARRAY
9944: PUSH
9945: LD_VAR 0 7
9949: ARRAY
9950: PUSH
9951: LD_INT 1
9953: ARRAY
9954: PPUSH
9955: LD_EXP 58
9959: PUSH
9960: LD_VAR 0 6
9964: ARRAY
9965: PUSH
9966: LD_VAR 0 7
9970: ARRAY
9971: PUSH
9972: LD_INT 2
9974: ARRAY
9975: PPUSH
9976: CALL_OW 612
9980: GO 9931
9982: POP
9983: POP
// minerMinesList := Delete ( minerMinesList , i ) ;
9984: LD_ADDR_EXP 58
9988: PUSH
9989: LD_EXP 58
9993: PPUSH
9994: LD_VAR 0 6
9998: PPUSH
9999: CALL_OW 3
10003: ST_TO_ADDR
// break ;
10004: GO 10008
// end ; end ;
10006: GO 9889
10008: POP
10009: POP
// minersList := minersList diff oldId ;
10010: LD_ADDR_EXP 57
10014: PUSH
10015: LD_EXP 57
10019: PUSH
10020: LD_VAR 0 2
10024: DIFF
10025: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_weapon , ar_miner ] ] ) > 1 then
10026: LD_INT 22
10028: PUSH
10029: LD_VAR 0 4
10033: PPUSH
10034: CALL_OW 255
10038: PUSH
10039: EMPTY
10040: LIST
10041: LIST
10042: PUSH
10043: LD_INT 34
10045: PUSH
10046: LD_INT 81
10048: PUSH
10049: EMPTY
10050: LIST
10051: LIST
10052: PUSH
10053: EMPTY
10054: LIST
10055: LIST
10056: PPUSH
10057: CALL_OW 69
10061: PUSH
10062: LD_INT 1
10064: GREATER
10065: IFFALSE 10092
// begin ComExit ( unit ) ;
10067: LD_VAR 0 4
10071: PPUSH
10072: CALL 49967 0 1
// SetSide ( newId , oldSide ) ;
10076: LD_VAR 0 1
10080: PPUSH
10081: LD_VAR 0 3
10085: PPUSH
10086: CALL_OW 235
// exit ;
10090: GO 10147
// end ; minersList := Replace ( minersList , minersList + 1 , newId ) ;
10092: LD_ADDR_EXP 57
10096: PUSH
10097: LD_EXP 57
10101: PPUSH
10102: LD_EXP 57
10106: PUSH
10107: LD_INT 1
10109: PLUS
10110: PPUSH
10111: LD_VAR 0 1
10115: PPUSH
10116: CALL_OW 1
10120: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
10121: LD_ADDR_EXP 58
10125: PUSH
10126: LD_EXP 58
10130: PPUSH
10131: LD_EXP 58
10135: PUSH
10136: LD_INT 1
10138: PLUS
10139: PPUSH
10140: EMPTY
10141: PPUSH
10142: CALL_OW 1
10146: ST_TO_ADDR
// end ; end ; end_of_file
10147: LD_VAR 0 5
10151: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
10152: LD_EXP 39
10156: IFFALSE 10164
10158: PUSH
10159: CALL 10374 0 0
10163: AND
10164: IFFALSE 10172
10166: PUSH
10167: LD_OWVAR 4
10171: AND
10172: IFFALSE 10371
10174: GO 10176
10176: DISABLE
10177: LD_INT 0
10179: PPUSH
10180: PPUSH
// begin canWin := false ;
10181: LD_ADDR_VAR 0 2
10185: PUSH
10186: LD_INT 0
10188: ST_TO_ADDR
// if not HasPower ( your_side ) then
10189: LD_OWVAR 2
10193: PPUSH
10194: CALL 10416 0 1
10198: NOT
10199: IFFALSE 10210
// begin Multiplayer_Loose_Message ;
10201: CALL_OW 521
// enable ( mpLose ) ;
10205: LD_INT 102
10207: ENABLE_MARKED
// end else
10208: GO 10371
// begin canWin := true ;
10210: LD_ADDR_VAR 0 2
10214: PUSH
10215: LD_INT 1
10217: ST_TO_ADDR
// for i := 1 to 8 do
10218: LD_ADDR_VAR 0 1
10222: PUSH
10223: DOUBLE
10224: LD_INT 1
10226: DEC
10227: ST_TO_ADDR
10228: LD_INT 8
10230: PUSH
10231: FOR_TO
10232: IFFALSE 10357
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
10234: LD_EXP 7
10238: PUSH
10239: LD_VAR 0 1
10243: ARRAY
10244: IFFALSE 10257
10246: PUSH
10247: LD_VAR 0 1
10251: PPUSH
10252: CALL_OW 108
10256: AND
10257: IFFALSE 10271
10259: PUSH
10260: LD_VAR 0 1
10264: PUSH
10265: LD_OWVAR 2
10269: NONEQUAL
10270: AND
10271: IFFALSE 10355
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
10273: LD_EXP 8
10277: PUSH
10278: LD_VAR 0 1
10282: ARRAY
10283: NOT
10284: IFTRUE 10332
10286: PUSH
10287: LD_EXP 8
10291: PUSH
10292: LD_VAR 0 1
10296: ARRAY
10297: PUSH
10298: LD_EXP 8
10302: PUSH
10303: LD_OWVAR 2
10307: ARRAY
10308: NONEQUAL
10309: IFFALSE 10331
10311: PUSH
10312: LD_OWVAR 2
10316: PPUSH
10317: LD_VAR 0 1
10321: PPUSH
10322: CALL_OW 81
10326: PUSH
10327: LD_INT 1
10329: NONEQUAL
10330: AND
10331: OR
10332: IFFALSE 10355
// if HasPower ( i ) then
10334: LD_VAR 0 1
10338: PPUSH
10339: CALL 10416 0 1
10343: IFFALSE 10355
// begin canWin := false ;
10345: LD_ADDR_VAR 0 2
10349: PUSH
10350: LD_INT 0
10352: ST_TO_ADDR
// break ;
10353: GO 10357
// end ;
10355: GO 10231
10357: POP
10358: POP
// if canWin then
10359: LD_VAR 0 2
10363: IFFALSE 10370
// enable ( mpWin ) else
10365: LD_INT 101
10367: ENABLE_MARKED
10368: GO 10371
// enable ;
10370: ENABLE
// end ; end ;
10371: PPOPN 2
10373: END
// function CanWinLoose ; begin
10374: LD_INT 0
10376: PPUSH
// result := true ;
10377: LD_ADDR_VAR 0 1
10381: PUSH
10382: LD_INT 1
10384: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
10385: CALL_OW 531
10389: IFFALSE 10401
10391: PUSH
10392: CALL_OW 519
10396: PUSH
10397: LD_INT 1
10399: GREATER
10400: AND
10401: IFFALSE 10411
// result := false ;
10403: LD_ADDR_VAR 0 1
10407: PUSH
10408: LD_INT 0
10410: ST_TO_ADDR
// end ;
10411: LD_VAR 0 1
10415: RET
// function HasPower ( i ) ; begin
10416: LD_INT 0
10418: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
10419: LD_ADDR_VAR 0 2
10423: PUSH
10424: LD_INT 22
10426: PUSH
10427: LD_VAR 0 1
10431: PUSH
10432: EMPTY
10433: LIST
10434: LIST
10435: PUSH
10436: LD_INT 2
10438: PUSH
10439: LD_INT 21
10441: PUSH
10442: LD_INT 1
10444: PUSH
10445: EMPTY
10446: LIST
10447: LIST
10448: PUSH
10449: LD_INT 33
10451: PUSH
10452: LD_INT 3
10454: PUSH
10455: EMPTY
10456: LIST
10457: LIST
10458: PUSH
10459: LD_INT 33
10461: PUSH
10462: LD_INT 5
10464: PUSH
10465: EMPTY
10466: LIST
10467: LIST
10468: PUSH
10469: EMPTY
10470: LIST
10471: LIST
10472: LIST
10473: LIST
10474: PUSH
10475: EMPTY
10476: LIST
10477: LIST
10478: PPUSH
10479: CALL_OW 69
10483: ST_TO_ADDR
// end ; end_of_file
10484: LD_VAR 0 2
10488: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
10489: LD_EXP 39
10493: IFFALSE 10536
10495: GO 10497
10497: DISABLE
10498: LD_INT 0
10500: PPUSH
// begin for i := 1 to 8 do
10501: LD_ADDR_VAR 0 1
10505: PUSH
10506: DOUBLE
10507: LD_INT 1
10509: DEC
10510: ST_TO_ADDR
10511: LD_INT 8
10513: PUSH
10514: FOR_TO
10515: IFFALSE 10534
// SetRestrict ( b_depot , i , state_disabled ) ;
10517: LD_INT 0
10519: PPUSH
10520: LD_VAR 0 1
10524: PPUSH
10525: LD_INT 0
10527: PPUSH
10528: CALL_OW 324
10532: GO 10514
10534: POP
10535: POP
// end ;
10536: PPOPN 1
10538: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
10539: LD_EXP 39
10543: IFFALSE 10551
10545: PUSH
10546: CALL 10761 0 0
10550: AND
10551: IFFALSE 10559
10553: PUSH
10554: LD_OWVAR 4
10558: AND
10559: IFFALSE 10758
10561: GO 10563
10563: DISABLE
10564: LD_INT 0
10566: PPUSH
10567: PPUSH
// begin canWin := false ;
10568: LD_ADDR_VAR 0 2
10572: PUSH
10573: LD_INT 0
10575: ST_TO_ADDR
// if not HasPower ( your_side ) then
10576: LD_OWVAR 2
10580: PPUSH
10581: CALL 10803 0 1
10585: NOT
10586: IFFALSE 10597
// begin Multiplayer_Loose_Message ;
10588: CALL_OW 521
// enable ( mpLose ) ;
10592: LD_INT 102
10594: ENABLE_MARKED
// end else
10595: GO 10758
// begin canWin := true ;
10597: LD_ADDR_VAR 0 2
10601: PUSH
10602: LD_INT 1
10604: ST_TO_ADDR
// for i := 1 to 8 do
10605: LD_ADDR_VAR 0 1
10609: PUSH
10610: DOUBLE
10611: LD_INT 1
10613: DEC
10614: ST_TO_ADDR
10615: LD_INT 8
10617: PUSH
10618: FOR_TO
10619: IFFALSE 10744
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
10621: LD_EXP 7
10625: PUSH
10626: LD_VAR 0 1
10630: ARRAY
10631: IFFALSE 10644
10633: PUSH
10634: LD_VAR 0 1
10638: PPUSH
10639: CALL_OW 108
10643: AND
10644: IFFALSE 10658
10646: PUSH
10647: LD_VAR 0 1
10651: PUSH
10652: LD_OWVAR 2
10656: NONEQUAL
10657: AND
10658: IFFALSE 10742
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
10660: LD_EXP 8
10664: PUSH
10665: LD_VAR 0 1
10669: ARRAY
10670: NOT
10671: IFTRUE 10719
10673: PUSH
10674: LD_EXP 8
10678: PUSH
10679: LD_VAR 0 1
10683: ARRAY
10684: PUSH
10685: LD_EXP 8
10689: PUSH
10690: LD_OWVAR 2
10694: ARRAY
10695: NONEQUAL
10696: IFFALSE 10718
10698: PUSH
10699: LD_OWVAR 2
10703: PPUSH
10704: LD_VAR 0 1
10708: PPUSH
10709: CALL_OW 81
10713: PUSH
10714: LD_INT 1
10716: NONEQUAL
10717: AND
10718: OR
10719: IFFALSE 10742
// if HasPower ( i ) then
10721: LD_VAR 0 1
10725: PPUSH
10726: CALL 10803 0 1
10730: IFFALSE 10742
// begin canWin := false ;
10732: LD_ADDR_VAR 0 2
10736: PUSH
10737: LD_INT 0
10739: ST_TO_ADDR
// break ;
10740: GO 10744
// end ;
10742: GO 10618
10744: POP
10745: POP
// if canWin then
10746: LD_VAR 0 2
10750: IFFALSE 10757
// enable ( mpWin ) else
10752: LD_INT 101
10754: ENABLE_MARKED
10755: GO 10758
// enable ;
10757: ENABLE
// end ; end ;
10758: PPOPN 2
10760: END
// function CanWinLoose ; begin
10761: LD_INT 0
10763: PPUSH
// result := true ;
10764: LD_ADDR_VAR 0 1
10768: PUSH
10769: LD_INT 1
10771: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
10772: CALL_OW 531
10776: IFFALSE 10788
10778: PUSH
10779: CALL_OW 519
10783: PUSH
10784: LD_INT 1
10786: GREATER
10787: AND
10788: IFFALSE 10798
// result := false ;
10790: LD_ADDR_VAR 0 1
10794: PUSH
10795: LD_INT 0
10797: ST_TO_ADDR
// end ;
10798: LD_VAR 0 1
10802: RET
// function HasPower ( i ) ; begin
10803: LD_INT 0
10805: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
10806: LD_INT 22
10808: PUSH
10809: LD_VAR 0 1
10813: PUSH
10814: EMPTY
10815: LIST
10816: LIST
10817: PUSH
10818: LD_INT 2
10820: PUSH
10821: LD_INT 30
10823: PUSH
10824: LD_INT 0
10826: PUSH
10827: EMPTY
10828: LIST
10829: LIST
10830: PUSH
10831: LD_INT 30
10833: PUSH
10834: LD_INT 1
10836: PUSH
10837: EMPTY
10838: LIST
10839: LIST
10840: PUSH
10841: EMPTY
10842: LIST
10843: LIST
10844: LIST
10845: PUSH
10846: EMPTY
10847: LIST
10848: LIST
10849: PPUSH
10850: CALL_OW 69
10854: NOT
10855: IFFALSE 10859
// exit ;
10857: GO 10924
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
10859: LD_ADDR_VAR 0 2
10863: PUSH
10864: LD_INT 22
10866: PUSH
10867: LD_VAR 0 1
10871: PUSH
10872: EMPTY
10873: LIST
10874: LIST
10875: PUSH
10876: LD_INT 2
10878: PUSH
10879: LD_INT 21
10881: PUSH
10882: LD_INT 1
10884: PUSH
10885: EMPTY
10886: LIST
10887: LIST
10888: PUSH
10889: LD_INT 33
10891: PUSH
10892: LD_INT 3
10894: PUSH
10895: EMPTY
10896: LIST
10897: LIST
10898: PUSH
10899: LD_INT 33
10901: PUSH
10902: LD_INT 5
10904: PUSH
10905: EMPTY
10906: LIST
10907: LIST
10908: PUSH
10909: EMPTY
10910: LIST
10911: LIST
10912: LIST
10913: LIST
10914: PUSH
10915: EMPTY
10916: LIST
10917: LIST
10918: PPUSH
10919: CALL_OW 69
10923: ST_TO_ADDR
// end ; end_of_file
10924: LD_VAR 0 2
10928: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvivalH do var i ;
10929: LD_EXP 39
10933: IFFALSE 10976
10935: GO 10937
10937: DISABLE
10938: LD_INT 0
10940: PPUSH
// begin for i := 1 to 8 do
10941: LD_ADDR_VAR 0 1
10945: PUSH
10946: DOUBLE
10947: LD_INT 1
10949: DEC
10950: ST_TO_ADDR
10951: LD_INT 8
10953: PUSH
10954: FOR_TO
10955: IFFALSE 10974
// SetRestrict ( b_depot , i , state_disabled ) ;
10957: LD_INT 0
10959: PPUSH
10960: LD_VAR 0 1
10964: PPUSH
10965: LD_INT 0
10967: PPUSH
10968: CALL_OW 324
10972: GO 10954
10974: POP
10975: POP
// end ;
10976: PPOPN 1
10978: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvivalH do var i , canWin ;
10979: LD_EXP 39
10983: IFFALSE 10991
10985: PUSH
10986: CALL 11201 0 0
10990: AND
10991: IFFALSE 10999
10993: PUSH
10994: LD_OWVAR 4
10998: AND
10999: IFFALSE 11198
11001: GO 11003
11003: DISABLE
11004: LD_INT 0
11006: PPUSH
11007: PPUSH
// begin canWin := false ;
11008: LD_ADDR_VAR 0 2
11012: PUSH
11013: LD_INT 0
11015: ST_TO_ADDR
// if not HasPower ( your_side ) then
11016: LD_OWVAR 2
11020: PPUSH
11021: CALL 11243 0 1
11025: NOT
11026: IFFALSE 11037
// begin Multiplayer_Loose_Message ;
11028: CALL_OW 521
// enable ( mpLose ) ;
11032: LD_INT 102
11034: ENABLE_MARKED
// end else
11035: GO 11198
// begin canWin := true ;
11037: LD_ADDR_VAR 0 2
11041: PUSH
11042: LD_INT 1
11044: ST_TO_ADDR
// for i := 1 to 8 do
11045: LD_ADDR_VAR 0 1
11049: PUSH
11050: DOUBLE
11051: LD_INT 1
11053: DEC
11054: ST_TO_ADDR
11055: LD_INT 8
11057: PUSH
11058: FOR_TO
11059: IFFALSE 11184
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
11061: LD_EXP 7
11065: PUSH
11066: LD_VAR 0 1
11070: ARRAY
11071: IFFALSE 11084
11073: PUSH
11074: LD_VAR 0 1
11078: PPUSH
11079: CALL_OW 108
11083: AND
11084: IFFALSE 11098
11086: PUSH
11087: LD_VAR 0 1
11091: PUSH
11092: LD_OWVAR 2
11096: NONEQUAL
11097: AND
11098: IFFALSE 11182
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
11100: LD_EXP 8
11104: PUSH
11105: LD_VAR 0 1
11109: ARRAY
11110: NOT
11111: IFTRUE 11159
11113: PUSH
11114: LD_EXP 8
11118: PUSH
11119: LD_VAR 0 1
11123: ARRAY
11124: PUSH
11125: LD_EXP 8
11129: PUSH
11130: LD_OWVAR 2
11134: ARRAY
11135: NONEQUAL
11136: IFFALSE 11158
11138: PUSH
11139: LD_OWVAR 2
11143: PPUSH
11144: LD_VAR 0 1
11148: PPUSH
11149: CALL_OW 81
11153: PUSH
11154: LD_INT 1
11156: NONEQUAL
11157: AND
11158: OR
11159: IFFALSE 11182
// if HasPower ( i ) then
11161: LD_VAR 0 1
11165: PPUSH
11166: CALL 11243 0 1
11170: IFFALSE 11182
// begin canWin := false ;
11172: LD_ADDR_VAR 0 2
11176: PUSH
11177: LD_INT 0
11179: ST_TO_ADDR
// break ;
11180: GO 11184
// end ;
11182: GO 11058
11184: POP
11185: POP
// if canWin then
11186: LD_VAR 0 2
11190: IFFALSE 11197
// enable ( mpWin ) else
11192: LD_INT 101
11194: ENABLE_MARKED
11195: GO 11198
// enable ;
11197: ENABLE
// end ; end ;
11198: PPOPN 2
11200: END
// function CanWinLoose ; begin
11201: LD_INT 0
11203: PPUSH
// result := true ;
11204: LD_ADDR_VAR 0 1
11208: PUSH
11209: LD_INT 1
11211: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
11212: CALL_OW 531
11216: IFFALSE 11228
11218: PUSH
11219: CALL_OW 519
11223: PUSH
11224: LD_INT 1
11226: GREATER
11227: AND
11228: IFFALSE 11238
// result := false ;
11230: LD_ADDR_VAR 0 1
11234: PUSH
11235: LD_INT 0
11237: ST_TO_ADDR
// end ;
11238: LD_VAR 0 1
11242: RET
// function HasPower ( i ) ; begin
11243: LD_INT 0
11245: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
11246: LD_INT 22
11248: PUSH
11249: LD_VAR 0 1
11253: PUSH
11254: EMPTY
11255: LIST
11256: LIST
11257: PUSH
11258: LD_INT 2
11260: PUSH
11261: LD_INT 30
11263: PUSH
11264: LD_INT 0
11266: PUSH
11267: EMPTY
11268: LIST
11269: LIST
11270: PUSH
11271: LD_INT 30
11273: PUSH
11274: LD_INT 1
11276: PUSH
11277: EMPTY
11278: LIST
11279: LIST
11280: PUSH
11281: EMPTY
11282: LIST
11283: LIST
11284: LIST
11285: PUSH
11286: EMPTY
11287: LIST
11288: LIST
11289: PPUSH
11290: CALL_OW 69
11294: NOT
11295: IFFALSE 11299
// exit ;
11297: GO 11364
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
11299: LD_ADDR_VAR 0 2
11303: PUSH
11304: LD_INT 22
11306: PUSH
11307: LD_VAR 0 1
11311: PUSH
11312: EMPTY
11313: LIST
11314: LIST
11315: PUSH
11316: LD_INT 2
11318: PUSH
11319: LD_INT 21
11321: PUSH
11322: LD_INT 1
11324: PUSH
11325: EMPTY
11326: LIST
11327: LIST
11328: PUSH
11329: LD_INT 33
11331: PUSH
11332: LD_INT 3
11334: PUSH
11335: EMPTY
11336: LIST
11337: LIST
11338: PUSH
11339: LD_INT 33
11341: PUSH
11342: LD_INT 5
11344: PUSH
11345: EMPTY
11346: LIST
11347: LIST
11348: PUSH
11349: EMPTY
11350: LIST
11351: LIST
11352: LIST
11353: LIST
11354: PUSH
11355: EMPTY
11356: LIST
11357: LIST
11358: PPUSH
11359: CALL_OW 69
11363: ST_TO_ADDR
// end ; end_of_file
11364: LD_VAR 0 2
11368: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
11369: LD_INT 0
11371: PPUSH
11372: PPUSH
// if exist_mode then
11373: LD_VAR 0 2
11377: IFFALSE 11423
// begin unit := CreateCharacter ( prefix & ident ) ;
11379: LD_ADDR_VAR 0 5
11383: PUSH
11384: LD_VAR 0 3
11388: PUSH
11389: LD_VAR 0 1
11393: STR
11394: PPUSH
11395: CALL_OW 34
11399: ST_TO_ADDR
// if unit then
11400: LD_VAR 0 5
11404: IFFALSE 11421
// DeleteCharacters ( prefix & ident ) ;
11406: LD_VAR 0 3
11410: PUSH
11411: LD_VAR 0 1
11415: STR
11416: PPUSH
11417: CALL_OW 40
// end else
11421: GO 11438
// unit := NewCharacter ( ident ) ;
11423: LD_ADDR_VAR 0 5
11427: PUSH
11428: LD_VAR 0 1
11432: PPUSH
11433: CALL_OW 25
11437: ST_TO_ADDR
// result := unit ;
11438: LD_ADDR_VAR 0 4
11442: PUSH
11443: LD_VAR 0 5
11447: ST_TO_ADDR
// end ;
11448: LD_VAR 0 4
11452: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
11453: LD_INT 0
11455: PPUSH
11456: PPUSH
// if exist_mode then
11457: LD_VAR 0 2
11461: IFFALSE 11486
// unit := CreateCharacter ( prefix & ident ) else
11463: LD_ADDR_VAR 0 5
11467: PUSH
11468: LD_VAR 0 3
11472: PUSH
11473: LD_VAR 0 1
11477: STR
11478: PPUSH
11479: CALL_OW 34
11483: ST_TO_ADDR
11484: GO 11501
// unit := NewCharacter ( ident ) ;
11486: LD_ADDR_VAR 0 5
11490: PUSH
11491: LD_VAR 0 1
11495: PPUSH
11496: CALL_OW 25
11500: ST_TO_ADDR
// result := unit ;
11501: LD_ADDR_VAR 0 4
11505: PUSH
11506: LD_VAR 0 5
11510: ST_TO_ADDR
// end ;
11511: LD_VAR 0 4
11515: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
11516: LD_INT 0
11518: PPUSH
11519: PPUSH
// if not side or not nation then
11520: LD_VAR 0 1
11524: NOT
11525: IFTRUE 11534
11527: PUSH
11528: LD_VAR 0 2
11532: NOT
11533: OR
11534: IFFALSE 11538
// exit ;
11536: GO 12332
// case nation of nation_american :
11538: LD_VAR 0 2
11542: PUSH
11543: LD_INT 1
11545: DOUBLE
11546: EQUAL
11547: IFTRUE 11551
11549: GO 11773
11551: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
11552: LD_ADDR_VAR 0 4
11556: PUSH
11557: LD_INT 35
11559: PUSH
11560: LD_INT 45
11562: PUSH
11563: LD_INT 46
11565: PUSH
11566: LD_INT 47
11568: PUSH
11569: LD_INT 82
11571: PUSH
11572: LD_INT 83
11574: PUSH
11575: LD_INT 84
11577: PUSH
11578: LD_INT 85
11580: PUSH
11581: LD_INT 86
11583: PUSH
11584: LD_INT 1
11586: PUSH
11587: LD_INT 2
11589: PUSH
11590: LD_INT 6
11592: PUSH
11593: LD_INT 15
11595: PUSH
11596: LD_INT 16
11598: PUSH
11599: LD_INT 7
11601: PUSH
11602: LD_INT 12
11604: PUSH
11605: LD_INT 13
11607: PUSH
11608: LD_INT 10
11610: PUSH
11611: LD_INT 14
11613: PUSH
11614: LD_INT 20
11616: PUSH
11617: LD_INT 21
11619: PUSH
11620: LD_INT 22
11622: PUSH
11623: LD_INT 25
11625: PUSH
11626: LD_INT 32
11628: PUSH
11629: LD_INT 27
11631: PUSH
11632: LD_INT 36
11634: PUSH
11635: LD_INT 69
11637: PUSH
11638: LD_INT 39
11640: PUSH
11641: LD_INT 34
11643: PUSH
11644: LD_INT 40
11646: PUSH
11647: LD_INT 48
11649: PUSH
11650: LD_INT 49
11652: PUSH
11653: LD_INT 50
11655: PUSH
11656: LD_INT 51
11658: PUSH
11659: LD_INT 52
11661: PUSH
11662: LD_INT 53
11664: PUSH
11665: LD_INT 54
11667: PUSH
11668: LD_INT 55
11670: PUSH
11671: LD_INT 56
11673: PUSH
11674: LD_INT 57
11676: PUSH
11677: LD_INT 58
11679: PUSH
11680: LD_INT 59
11682: PUSH
11683: LD_INT 60
11685: PUSH
11686: LD_INT 61
11688: PUSH
11689: LD_INT 62
11691: PUSH
11692: LD_INT 80
11694: PUSH
11695: LD_INT 82
11697: PUSH
11698: LD_INT 83
11700: PUSH
11701: LD_INT 84
11703: PUSH
11704: LD_INT 85
11706: PUSH
11707: LD_INT 86
11709: PUSH
11710: LD_INT 90
11712: PUSH
11713: LD_INT 93
11715: PUSH
11716: EMPTY
11717: LIST
11718: LIST
11719: LIST
11720: LIST
11721: LIST
11722: LIST
11723: LIST
11724: LIST
11725: LIST
11726: LIST
11727: LIST
11728: LIST
11729: LIST
11730: LIST
11731: LIST
11732: LIST
11733: LIST
11734: LIST
11735: LIST
11736: LIST
11737: LIST
11738: LIST
11739: LIST
11740: LIST
11741: LIST
11742: LIST
11743: LIST
11744: LIST
11745: LIST
11746: LIST
11747: LIST
11748: LIST
11749: LIST
11750: LIST
11751: LIST
11752: LIST
11753: LIST
11754: LIST
11755: LIST
11756: LIST
11757: LIST
11758: LIST
11759: LIST
11760: LIST
11761: LIST
11762: LIST
11763: LIST
11764: LIST
11765: LIST
11766: LIST
11767: LIST
11768: LIST
11769: LIST
11770: ST_TO_ADDR
11771: GO 12254
11773: LD_INT 2
11775: DOUBLE
11776: EQUAL
11777: IFTRUE 11781
11779: GO 12015
11781: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
11782: LD_ADDR_VAR 0 4
11786: PUSH
11787: LD_INT 35
11789: PUSH
11790: LD_INT 45
11792: PUSH
11793: LD_INT 46
11795: PUSH
11796: LD_INT 47
11798: PUSH
11799: LD_INT 82
11801: PUSH
11802: LD_INT 83
11804: PUSH
11805: LD_INT 84
11807: PUSH
11808: LD_INT 85
11810: PUSH
11811: LD_INT 87
11813: PUSH
11814: LD_INT 70
11816: PUSH
11817: LD_INT 1
11819: PUSH
11820: LD_INT 11
11822: PUSH
11823: LD_INT 3
11825: PUSH
11826: LD_INT 4
11828: PUSH
11829: LD_INT 5
11831: PUSH
11832: LD_INT 6
11834: PUSH
11835: LD_INT 15
11837: PUSH
11838: LD_INT 18
11840: PUSH
11841: LD_INT 7
11843: PUSH
11844: LD_INT 17
11846: PUSH
11847: LD_INT 8
11849: PUSH
11850: LD_INT 20
11852: PUSH
11853: LD_INT 21
11855: PUSH
11856: LD_INT 22
11858: PUSH
11859: LD_INT 72
11861: PUSH
11862: LD_INT 26
11864: PUSH
11865: LD_INT 69
11867: PUSH
11868: LD_INT 39
11870: PUSH
11871: LD_INT 40
11873: PUSH
11874: LD_INT 41
11876: PUSH
11877: LD_INT 42
11879: PUSH
11880: LD_INT 43
11882: PUSH
11883: LD_INT 48
11885: PUSH
11886: LD_INT 49
11888: PUSH
11889: LD_INT 50
11891: PUSH
11892: LD_INT 51
11894: PUSH
11895: LD_INT 52
11897: PUSH
11898: LD_INT 53
11900: PUSH
11901: LD_INT 54
11903: PUSH
11904: LD_INT 55
11906: PUSH
11907: LD_INT 56
11909: PUSH
11910: LD_INT 60
11912: PUSH
11913: LD_INT 61
11915: PUSH
11916: LD_INT 62
11918: PUSH
11919: LD_INT 66
11921: PUSH
11922: LD_INT 67
11924: PUSH
11925: LD_INT 68
11927: PUSH
11928: LD_INT 81
11930: PUSH
11931: LD_INT 82
11933: PUSH
11934: LD_INT 83
11936: PUSH
11937: LD_INT 84
11939: PUSH
11940: LD_INT 85
11942: PUSH
11943: LD_INT 87
11945: PUSH
11946: LD_INT 88
11948: PUSH
11949: LD_INT 92
11951: PUSH
11952: LD_INT 94
11954: PUSH
11955: EMPTY
11956: LIST
11957: LIST
11958: LIST
11959: LIST
11960: LIST
11961: LIST
11962: LIST
11963: LIST
11964: LIST
11965: LIST
11966: LIST
11967: LIST
11968: LIST
11969: LIST
11970: LIST
11971: LIST
11972: LIST
11973: LIST
11974: LIST
11975: LIST
11976: LIST
11977: LIST
11978: LIST
11979: LIST
11980: LIST
11981: LIST
11982: LIST
11983: LIST
11984: LIST
11985: LIST
11986: LIST
11987: LIST
11988: LIST
11989: LIST
11990: LIST
11991: LIST
11992: LIST
11993: LIST
11994: LIST
11995: LIST
11996: LIST
11997: LIST
11998: LIST
11999: LIST
12000: LIST
12001: LIST
12002: LIST
12003: LIST
12004: LIST
12005: LIST
12006: LIST
12007: LIST
12008: LIST
12009: LIST
12010: LIST
12011: LIST
12012: ST_TO_ADDR
12013: GO 12254
12015: LD_INT 3
12017: DOUBLE
12018: EQUAL
12019: IFTRUE 12023
12021: GO 12253
12023: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
12024: LD_ADDR_VAR 0 4
12028: PUSH
12029: LD_INT 46
12031: PUSH
12032: LD_INT 47
12034: PUSH
12035: LD_INT 1
12037: PUSH
12038: LD_INT 2
12040: PUSH
12041: LD_INT 82
12043: PUSH
12044: LD_INT 83
12046: PUSH
12047: LD_INT 84
12049: PUSH
12050: LD_INT 85
12052: PUSH
12053: LD_INT 86
12055: PUSH
12056: LD_INT 11
12058: PUSH
12059: LD_INT 9
12061: PUSH
12062: LD_INT 20
12064: PUSH
12065: LD_INT 19
12067: PUSH
12068: LD_INT 21
12070: PUSH
12071: LD_INT 24
12073: PUSH
12074: LD_INT 22
12076: PUSH
12077: LD_INT 25
12079: PUSH
12080: LD_INT 28
12082: PUSH
12083: LD_INT 29
12085: PUSH
12086: LD_INT 30
12088: PUSH
12089: LD_INT 31
12091: PUSH
12092: LD_INT 37
12094: PUSH
12095: LD_INT 38
12097: PUSH
12098: LD_INT 32
12100: PUSH
12101: LD_INT 27
12103: PUSH
12104: LD_INT 33
12106: PUSH
12107: LD_INT 69
12109: PUSH
12110: LD_INT 39
12112: PUSH
12113: LD_INT 34
12115: PUSH
12116: LD_INT 40
12118: PUSH
12119: LD_INT 71
12121: PUSH
12122: LD_INT 23
12124: PUSH
12125: LD_INT 44
12127: PUSH
12128: LD_INT 48
12130: PUSH
12131: LD_INT 49
12133: PUSH
12134: LD_INT 50
12136: PUSH
12137: LD_INT 51
12139: PUSH
12140: LD_INT 52
12142: PUSH
12143: LD_INT 53
12145: PUSH
12146: LD_INT 54
12148: PUSH
12149: LD_INT 55
12151: PUSH
12152: LD_INT 56
12154: PUSH
12155: LD_INT 57
12157: PUSH
12158: LD_INT 58
12160: PUSH
12161: LD_INT 59
12163: PUSH
12164: LD_INT 63
12166: PUSH
12167: LD_INT 64
12169: PUSH
12170: LD_INT 65
12172: PUSH
12173: LD_INT 82
12175: PUSH
12176: LD_INT 83
12178: PUSH
12179: LD_INT 84
12181: PUSH
12182: LD_INT 85
12184: PUSH
12185: LD_INT 86
12187: PUSH
12188: LD_INT 89
12190: PUSH
12191: LD_INT 91
12193: PUSH
12194: EMPTY
12195: LIST
12196: LIST
12197: LIST
12198: LIST
12199: LIST
12200: LIST
12201: LIST
12202: LIST
12203: LIST
12204: LIST
12205: LIST
12206: LIST
12207: LIST
12208: LIST
12209: LIST
12210: LIST
12211: LIST
12212: LIST
12213: LIST
12214: LIST
12215: LIST
12216: LIST
12217: LIST
12218: LIST
12219: LIST
12220: LIST
12221: LIST
12222: LIST
12223: LIST
12224: LIST
12225: LIST
12226: LIST
12227: LIST
12228: LIST
12229: LIST
12230: LIST
12231: LIST
12232: LIST
12233: LIST
12234: LIST
12235: LIST
12236: LIST
12237: LIST
12238: LIST
12239: LIST
12240: LIST
12241: LIST
12242: LIST
12243: LIST
12244: LIST
12245: LIST
12246: LIST
12247: LIST
12248: LIST
12249: LIST
12250: ST_TO_ADDR
12251: GO 12254
12253: POP
// if state > - 1 and state < 3 then
12254: LD_VAR 0 3
12258: PUSH
12259: LD_INT 1
12261: NEG
12262: GREATER
12263: IFFALSE 12275
12265: PUSH
12266: LD_VAR 0 3
12270: PUSH
12271: LD_INT 3
12273: LESS
12274: AND
12275: IFFALSE 12332
// for i in result do
12277: LD_ADDR_VAR 0 5
12281: PUSH
12282: LD_VAR 0 4
12286: PUSH
12287: FOR_IN
12288: IFFALSE 12330
// if GetTech ( i , side ) <> state then
12290: LD_VAR 0 5
12294: PPUSH
12295: LD_VAR 0 1
12299: PPUSH
12300: CALL_OW 321
12304: PUSH
12305: LD_VAR 0 3
12309: NONEQUAL
12310: IFFALSE 12328
// result := result diff i ;
12312: LD_ADDR_VAR 0 4
12316: PUSH
12317: LD_VAR 0 4
12321: PUSH
12322: LD_VAR 0 5
12326: DIFF
12327: ST_TO_ADDR
12328: GO 12287
12330: POP
12331: POP
// end ;
12332: LD_VAR 0 4
12336: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
12337: LD_INT 0
12339: PPUSH
12340: PPUSH
12341: PPUSH
// result := true ;
12342: LD_ADDR_VAR 0 3
12346: PUSH
12347: LD_INT 1
12349: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
12350: LD_ADDR_VAR 0 5
12354: PUSH
12355: LD_VAR 0 2
12359: PPUSH
12360: CALL_OW 480
12364: ST_TO_ADDR
// if not tmp then
12365: LD_VAR 0 5
12369: NOT
12370: IFFALSE 12374
// exit ;
12372: GO 12423
// for i in tmp do
12374: LD_ADDR_VAR 0 4
12378: PUSH
12379: LD_VAR 0 5
12383: PUSH
12384: FOR_IN
12385: IFFALSE 12421
// if GetTech ( i , side ) <> state_researched then
12387: LD_VAR 0 4
12391: PPUSH
12392: LD_VAR 0 1
12396: PPUSH
12397: CALL_OW 321
12401: PUSH
12402: LD_INT 2
12404: NONEQUAL
12405: IFFALSE 12419
// begin result := false ;
12407: LD_ADDR_VAR 0 3
12411: PUSH
12412: LD_INT 0
12414: ST_TO_ADDR
// exit ;
12415: POP
12416: POP
12417: GO 12423
// end ;
12419: GO 12384
12421: POP
12422: POP
// end ;
12423: LD_VAR 0 3
12427: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
12428: LD_INT 0
12430: PPUSH
12431: PPUSH
12432: PPUSH
12433: PPUSH
12434: PPUSH
12435: PPUSH
12436: PPUSH
12437: PPUSH
12438: PPUSH
12439: PPUSH
12440: PPUSH
12441: PPUSH
12442: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
12443: LD_VAR 0 1
12447: NOT
12448: IFTRUE 12465
12450: PUSH
12451: LD_VAR 0 1
12455: PPUSH
12456: CALL_OW 257
12460: PUSH
12461: LD_INT 9
12463: NONEQUAL
12464: OR
12465: IFFALSE 12469
// exit ;
12467: GO 13048
// side := GetSide ( unit ) ;
12469: LD_ADDR_VAR 0 9
12473: PUSH
12474: LD_VAR 0 1
12478: PPUSH
12479: CALL_OW 255
12483: ST_TO_ADDR
// tech_space := tech_spacanom ;
12484: LD_ADDR_VAR 0 12
12488: PUSH
12489: LD_INT 29
12491: ST_TO_ADDR
// tech_time := tech_taurad ;
12492: LD_ADDR_VAR 0 13
12496: PUSH
12497: LD_INT 28
12499: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
12500: LD_ADDR_VAR 0 11
12504: PUSH
12505: LD_VAR 0 1
12509: PPUSH
12510: CALL_OW 310
12514: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
12515: LD_VAR 0 11
12519: PPUSH
12520: CALL_OW 247
12524: PUSH
12525: LD_INT 2
12527: EQUAL
12528: IFFALSE 12532
// exit ;
12530: GO 13048
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
12532: LD_ADDR_VAR 0 8
12536: PUSH
12537: LD_INT 81
12539: PUSH
12540: LD_VAR 0 9
12544: PUSH
12545: EMPTY
12546: LIST
12547: LIST
12548: PUSH
12549: LD_INT 3
12551: PUSH
12552: LD_INT 21
12554: PUSH
12555: LD_INT 3
12557: PUSH
12558: EMPTY
12559: LIST
12560: LIST
12561: PUSH
12562: EMPTY
12563: LIST
12564: LIST
12565: PUSH
12566: EMPTY
12567: LIST
12568: LIST
12569: PPUSH
12570: CALL_OW 69
12574: ST_TO_ADDR
// if not tmp then
12575: LD_VAR 0 8
12579: NOT
12580: IFFALSE 12584
// exit ;
12582: GO 13048
// if in_unit then
12584: LD_VAR 0 11
12588: IFFALSE 12612
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
12590: LD_ADDR_VAR 0 10
12594: PUSH
12595: LD_VAR 0 8
12599: PPUSH
12600: LD_VAR 0 11
12604: PPUSH
12605: CALL_OW 74
12609: ST_TO_ADDR
12610: GO 12632
// enemy := NearestUnitToUnit ( tmp , unit ) ;
12612: LD_ADDR_VAR 0 10
12616: PUSH
12617: LD_VAR 0 8
12621: PPUSH
12622: LD_VAR 0 1
12626: PPUSH
12627: CALL_OW 74
12631: ST_TO_ADDR
// if not enemy then
12632: LD_VAR 0 10
12636: NOT
12637: IFFALSE 12641
// exit ;
12639: GO 13048
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
12641: LD_VAR 0 11
12645: IFFALSE 12667
12647: PUSH
12648: LD_VAR 0 11
12652: PPUSH
12653: LD_VAR 0 10
12657: PPUSH
12658: CALL_OW 296
12662: PUSH
12663: LD_INT 13
12665: GREATER
12666: AND
12667: IFTRUE 12689
12669: PUSH
12670: LD_VAR 0 1
12674: PPUSH
12675: LD_VAR 0 10
12679: PPUSH
12680: CALL_OW 296
12684: PUSH
12685: LD_INT 12
12687: GREATER
12688: OR
12689: IFFALSE 12693
// exit ;
12691: GO 13048
// missile := [ 1 ] ;
12693: LD_ADDR_VAR 0 14
12697: PUSH
12698: LD_INT 1
12700: PUSH
12701: EMPTY
12702: LIST
12703: ST_TO_ADDR
// if Researched ( side , tech_space ) then
12704: LD_VAR 0 9
12708: PPUSH
12709: LD_VAR 0 12
12713: PPUSH
12714: CALL_OW 325
12718: IFFALSE 12747
// missile := Replace ( missile , missile + 1 , 2 ) ;
12720: LD_ADDR_VAR 0 14
12724: PUSH
12725: LD_VAR 0 14
12729: PPUSH
12730: LD_VAR 0 14
12734: PUSH
12735: LD_INT 1
12737: PLUS
12738: PPUSH
12739: LD_INT 2
12741: PPUSH
12742: CALL_OW 1
12746: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
12747: LD_VAR 0 9
12751: PPUSH
12752: LD_VAR 0 13
12756: PPUSH
12757: CALL_OW 325
12761: IFFALSE 12785
12763: PUSH
12764: LD_VAR 0 10
12768: PPUSH
12769: CALL_OW 255
12773: PPUSH
12774: LD_VAR 0 13
12778: PPUSH
12779: CALL_OW 325
12783: NOT
12784: AND
12785: IFFALSE 12814
// missile := Replace ( missile , missile + 1 , 3 ) ;
12787: LD_ADDR_VAR 0 14
12791: PUSH
12792: LD_VAR 0 14
12796: PPUSH
12797: LD_VAR 0 14
12801: PUSH
12802: LD_INT 1
12804: PLUS
12805: PPUSH
12806: LD_INT 3
12808: PPUSH
12809: CALL_OW 1
12813: ST_TO_ADDR
// if missile < 2 then
12814: LD_VAR 0 14
12818: PUSH
12819: LD_INT 2
12821: LESS
12822: IFFALSE 12826
// exit ;
12824: GO 13048
// x := GetX ( enemy ) ;
12826: LD_ADDR_VAR 0 4
12830: PUSH
12831: LD_VAR 0 10
12835: PPUSH
12836: CALL_OW 250
12840: ST_TO_ADDR
// y := GetY ( enemy ) ;
12841: LD_ADDR_VAR 0 5
12845: PUSH
12846: LD_VAR 0 10
12850: PPUSH
12851: CALL_OW 251
12855: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
12856: LD_ADDR_VAR 0 6
12860: PUSH
12861: LD_VAR 0 4
12865: PUSH
12866: LD_INT 1
12868: NEG
12869: PPUSH
12870: LD_INT 1
12872: PPUSH
12873: CALL_OW 12
12877: PLUS
12878: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
12879: LD_ADDR_VAR 0 7
12883: PUSH
12884: LD_VAR 0 5
12888: PUSH
12889: LD_INT 1
12891: NEG
12892: PPUSH
12893: LD_INT 1
12895: PPUSH
12896: CALL_OW 12
12900: PLUS
12901: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
12902: LD_VAR 0 6
12906: PPUSH
12907: LD_VAR 0 7
12911: PPUSH
12912: CALL_OW 488
12916: NOT
12917: IFFALSE 12939
// begin _x := x ;
12919: LD_ADDR_VAR 0 6
12923: PUSH
12924: LD_VAR 0 4
12928: ST_TO_ADDR
// _y := y ;
12929: LD_ADDR_VAR 0 7
12933: PUSH
12934: LD_VAR 0 5
12938: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
12939: LD_ADDR_VAR 0 3
12943: PUSH
12944: LD_INT 1
12946: PPUSH
12947: LD_VAR 0 14
12951: PPUSH
12952: CALL_OW 12
12956: ST_TO_ADDR
// case i of 1 :
12957: LD_VAR 0 3
12961: PUSH
12962: LD_INT 1
12964: DOUBLE
12965: EQUAL
12966: IFTRUE 12970
12968: GO 12987
12970: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
12971: LD_VAR 0 1
12975: PPUSH
12976: LD_VAR 0 10
12980: PPUSH
12981: CALL_OW 115
12985: GO 13048
12987: LD_INT 2
12989: DOUBLE
12990: EQUAL
12991: IFTRUE 12995
12993: GO 13017
12995: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
12996: LD_VAR 0 1
13000: PPUSH
13001: LD_VAR 0 6
13005: PPUSH
13006: LD_VAR 0 7
13010: PPUSH
13011: CALL_OW 153
13015: GO 13048
13017: LD_INT 3
13019: DOUBLE
13020: EQUAL
13021: IFTRUE 13025
13023: GO 13047
13025: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
13026: LD_VAR 0 1
13030: PPUSH
13031: LD_VAR 0 6
13035: PPUSH
13036: LD_VAR 0 7
13040: PPUSH
13041: CALL_OW 154
13045: GO 13048
13047: POP
// end ;
13048: LD_VAR 0 2
13052: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
13053: LD_INT 0
13055: PPUSH
13056: PPUSH
13057: PPUSH
13058: PPUSH
13059: PPUSH
13060: PPUSH
// if not unit or not building then
13061: LD_VAR 0 1
13065: NOT
13066: IFTRUE 13075
13068: PUSH
13069: LD_VAR 0 2
13073: NOT
13074: OR
13075: IFFALSE 13079
// exit ;
13077: GO 13237
// x := GetX ( building ) ;
13079: LD_ADDR_VAR 0 5
13083: PUSH
13084: LD_VAR 0 2
13088: PPUSH
13089: CALL_OW 250
13093: ST_TO_ADDR
// y := GetY ( building ) ;
13094: LD_ADDR_VAR 0 6
13098: PUSH
13099: LD_VAR 0 2
13103: PPUSH
13104: CALL_OW 251
13108: ST_TO_ADDR
// for i := 0 to 5 do
13109: LD_ADDR_VAR 0 4
13113: PUSH
13114: DOUBLE
13115: LD_INT 0
13117: DEC
13118: ST_TO_ADDR
13119: LD_INT 5
13121: PUSH
13122: FOR_TO
13123: IFFALSE 13235
// begin _x := ShiftX ( x , i , 3 ) ;
13125: LD_ADDR_VAR 0 7
13129: PUSH
13130: LD_VAR 0 5
13134: PPUSH
13135: LD_VAR 0 4
13139: PPUSH
13140: LD_INT 3
13142: PPUSH
13143: CALL_OW 272
13147: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
13148: LD_ADDR_VAR 0 8
13152: PUSH
13153: LD_VAR 0 6
13157: PPUSH
13158: LD_VAR 0 4
13162: PPUSH
13163: LD_INT 3
13165: PPUSH
13166: CALL_OW 273
13170: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
13171: LD_VAR 0 7
13175: PPUSH
13176: LD_VAR 0 8
13180: PPUSH
13181: CALL_OW 488
13185: NOT
13186: IFFALSE 13190
// continue ;
13188: GO 13122
// if HexInfo ( _x , _y ) = 0 then
13190: LD_VAR 0 7
13194: PPUSH
13195: LD_VAR 0 8
13199: PPUSH
13200: CALL_OW 428
13204: PUSH
13205: LD_INT 0
13207: EQUAL
13208: IFFALSE 13233
// begin ComMoveXY ( unit , _x , _y ) ;
13210: LD_VAR 0 1
13214: PPUSH
13215: LD_VAR 0 7
13219: PPUSH
13220: LD_VAR 0 8
13224: PPUSH
13225: CALL_OW 111
// exit ;
13229: POP
13230: POP
13231: GO 13237
// end ; end ;
13233: GO 13122
13235: POP
13236: POP
// end ;
13237: LD_VAR 0 3
13241: RET
// export function ScanBase ( side , base_area ) ; begin
13242: LD_INT 0
13244: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
13245: LD_ADDR_VAR 0 3
13249: PUSH
13250: LD_VAR 0 2
13254: PPUSH
13255: LD_INT 81
13257: PUSH
13258: LD_VAR 0 1
13262: PUSH
13263: EMPTY
13264: LIST
13265: LIST
13266: PPUSH
13267: CALL_OW 70
13271: ST_TO_ADDR
// end ;
13272: LD_VAR 0 3
13276: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
13277: LD_INT 0
13279: PPUSH
13280: PPUSH
13281: PPUSH
13282: PPUSH
// result := false ;
13283: LD_ADDR_VAR 0 2
13287: PUSH
13288: LD_INT 0
13290: ST_TO_ADDR
// side := GetSide ( unit ) ;
13291: LD_ADDR_VAR 0 3
13295: PUSH
13296: LD_VAR 0 1
13300: PPUSH
13301: CALL_OW 255
13305: ST_TO_ADDR
// nat := GetNation ( unit ) ;
13306: LD_ADDR_VAR 0 4
13310: PUSH
13311: LD_VAR 0 1
13315: PPUSH
13316: CALL_OW 248
13320: ST_TO_ADDR
// case nat of 1 :
13321: LD_VAR 0 4
13325: PUSH
13326: LD_INT 1
13328: DOUBLE
13329: EQUAL
13330: IFTRUE 13334
13332: GO 13345
13334: POP
// tech := tech_lassight ; 2 :
13335: LD_ADDR_VAR 0 5
13339: PUSH
13340: LD_INT 12
13342: ST_TO_ADDR
13343: GO 13384
13345: LD_INT 2
13347: DOUBLE
13348: EQUAL
13349: IFTRUE 13353
13351: GO 13364
13353: POP
// tech := tech_mortar ; 3 :
13354: LD_ADDR_VAR 0 5
13358: PUSH
13359: LD_INT 41
13361: ST_TO_ADDR
13362: GO 13384
13364: LD_INT 3
13366: DOUBLE
13367: EQUAL
13368: IFTRUE 13372
13370: GO 13383
13372: POP
// tech := tech_bazooka ; end ;
13373: LD_ADDR_VAR 0 5
13377: PUSH
13378: LD_INT 44
13380: ST_TO_ADDR
13381: GO 13384
13383: POP
// if Researched ( side , tech ) then
13384: LD_VAR 0 3
13388: PPUSH
13389: LD_VAR 0 5
13393: PPUSH
13394: CALL_OW 325
13398: IFFALSE 13425
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
13400: LD_ADDR_VAR 0 2
13404: PUSH
13405: LD_INT 5
13407: PUSH
13408: LD_INT 8
13410: PUSH
13411: LD_INT 9
13413: PUSH
13414: EMPTY
13415: LIST
13416: LIST
13417: LIST
13418: PUSH
13419: LD_VAR 0 4
13423: ARRAY
13424: ST_TO_ADDR
// end ;
13425: LD_VAR 0 2
13429: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
13430: LD_INT 0
13432: PPUSH
13433: PPUSH
13434: PPUSH
// if not mines then
13435: LD_VAR 0 2
13439: NOT
13440: IFFALSE 13444
// exit ;
13442: GO 13588
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
13444: LD_ADDR_VAR 0 5
13448: PUSH
13449: LD_INT 81
13451: PUSH
13452: LD_VAR 0 1
13456: PUSH
13457: EMPTY
13458: LIST
13459: LIST
13460: PUSH
13461: LD_INT 3
13463: PUSH
13464: LD_INT 21
13466: PUSH
13467: LD_INT 3
13469: PUSH
13470: EMPTY
13471: LIST
13472: LIST
13473: PUSH
13474: EMPTY
13475: LIST
13476: LIST
13477: PUSH
13478: EMPTY
13479: LIST
13480: LIST
13481: PPUSH
13482: CALL_OW 69
13486: ST_TO_ADDR
// for i in mines do
13487: LD_ADDR_VAR 0 4
13491: PUSH
13492: LD_VAR 0 2
13496: PUSH
13497: FOR_IN
13498: IFFALSE 13586
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
13500: LD_VAR 0 4
13504: PUSH
13505: LD_INT 1
13507: ARRAY
13508: PPUSH
13509: LD_VAR 0 4
13513: PUSH
13514: LD_INT 2
13516: ARRAY
13517: PPUSH
13518: CALL_OW 458
13522: NOT
13523: IFFALSE 13527
// continue ;
13525: GO 13497
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
13527: LD_VAR 0 4
13531: PUSH
13532: LD_INT 1
13534: ARRAY
13535: PPUSH
13536: LD_VAR 0 4
13540: PUSH
13541: LD_INT 2
13543: ARRAY
13544: PPUSH
13545: CALL_OW 428
13549: PUSH
13550: LD_VAR 0 5
13554: IN
13555: IFFALSE 13584
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
13557: LD_VAR 0 4
13561: PUSH
13562: LD_INT 1
13564: ARRAY
13565: PPUSH
13566: LD_VAR 0 4
13570: PUSH
13571: LD_INT 2
13573: ARRAY
13574: PPUSH
13575: LD_VAR 0 1
13579: PPUSH
13580: CALL_OW 456
// end ;
13584: GO 13497
13586: POP
13587: POP
// end ;
13588: LD_VAR 0 3
13592: RET
// export function Count ( array ) ; begin
13593: LD_INT 0
13595: PPUSH
// result := array + 0 ;
13596: LD_ADDR_VAR 0 2
13600: PUSH
13601: LD_VAR 0 1
13605: PUSH
13606: LD_INT 0
13608: PLUS
13609: ST_TO_ADDR
// end ;
13610: LD_VAR 0 2
13614: RET
// export function IsEmpty ( building ) ; begin
13615: LD_INT 0
13617: PPUSH
// if not building then
13618: LD_VAR 0 1
13622: NOT
13623: IFFALSE 13627
// exit ;
13625: GO 13670
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
13627: LD_ADDR_VAR 0 2
13631: PUSH
13632: LD_VAR 0 1
13636: PUSH
13637: LD_INT 22
13639: PUSH
13640: LD_VAR 0 1
13644: PPUSH
13645: CALL_OW 255
13649: PUSH
13650: EMPTY
13651: LIST
13652: LIST
13653: PUSH
13654: LD_INT 58
13656: PUSH
13657: EMPTY
13658: LIST
13659: PUSH
13660: EMPTY
13661: LIST
13662: LIST
13663: PPUSH
13664: CALL_OW 69
13668: IN
13669: ST_TO_ADDR
// end ;
13670: LD_VAR 0 2
13674: RET
// export function IsNotFull ( building ) ; var places ; begin
13675: LD_INT 0
13677: PPUSH
13678: PPUSH
// if not building then
13679: LD_VAR 0 1
13683: NOT
13684: IFFALSE 13688
// exit ;
13686: GO 13716
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
13688: LD_ADDR_VAR 0 2
13692: PUSH
13693: LD_VAR 0 1
13697: PPUSH
13698: LD_INT 3
13700: PUSH
13701: LD_INT 62
13703: PUSH
13704: EMPTY
13705: LIST
13706: PUSH
13707: EMPTY
13708: LIST
13709: LIST
13710: PPUSH
13711: CALL_OW 72
13715: ST_TO_ADDR
// end ;
13716: LD_VAR 0 2
13720: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
13721: LD_INT 0
13723: PPUSH
13724: PPUSH
13725: PPUSH
13726: PPUSH
// tmp := [ ] ;
13727: LD_ADDR_VAR 0 3
13731: PUSH
13732: EMPTY
13733: ST_TO_ADDR
// list := [ ] ;
13734: LD_ADDR_VAR 0 5
13738: PUSH
13739: EMPTY
13740: ST_TO_ADDR
// for i = 16 to 25 do
13741: LD_ADDR_VAR 0 4
13745: PUSH
13746: DOUBLE
13747: LD_INT 16
13749: DEC
13750: ST_TO_ADDR
13751: LD_INT 25
13753: PUSH
13754: FOR_TO
13755: IFFALSE 13828
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
13757: LD_ADDR_VAR 0 3
13761: PUSH
13762: LD_VAR 0 3
13766: PUSH
13767: LD_INT 22
13769: PUSH
13770: LD_VAR 0 1
13774: PPUSH
13775: CALL_OW 255
13779: PUSH
13780: EMPTY
13781: LIST
13782: LIST
13783: PUSH
13784: LD_INT 91
13786: PUSH
13787: LD_VAR 0 1
13791: PUSH
13792: LD_INT 6
13794: PUSH
13795: EMPTY
13796: LIST
13797: LIST
13798: LIST
13799: PUSH
13800: LD_INT 30
13802: PUSH
13803: LD_VAR 0 4
13807: PUSH
13808: EMPTY
13809: LIST
13810: LIST
13811: PUSH
13812: EMPTY
13813: LIST
13814: LIST
13815: LIST
13816: PUSH
13817: EMPTY
13818: LIST
13819: PPUSH
13820: CALL_OW 69
13824: ADD
13825: ST_TO_ADDR
13826: GO 13754
13828: POP
13829: POP
// for i = 1 to tmp do
13830: LD_ADDR_VAR 0 4
13834: PUSH
13835: DOUBLE
13836: LD_INT 1
13838: DEC
13839: ST_TO_ADDR
13840: LD_VAR 0 3
13844: PUSH
13845: FOR_TO
13846: IFFALSE 13934
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
13848: LD_ADDR_VAR 0 5
13852: PUSH
13853: LD_VAR 0 5
13857: PUSH
13858: LD_VAR 0 3
13862: PUSH
13863: LD_VAR 0 4
13867: ARRAY
13868: PPUSH
13869: CALL_OW 266
13873: PUSH
13874: LD_VAR 0 3
13878: PUSH
13879: LD_VAR 0 4
13883: ARRAY
13884: PPUSH
13885: CALL_OW 250
13889: PUSH
13890: LD_VAR 0 3
13894: PUSH
13895: LD_VAR 0 4
13899: ARRAY
13900: PPUSH
13901: CALL_OW 251
13905: PUSH
13906: LD_VAR 0 3
13910: PUSH
13911: LD_VAR 0 4
13915: ARRAY
13916: PPUSH
13917: CALL_OW 254
13921: PUSH
13922: EMPTY
13923: LIST
13924: LIST
13925: LIST
13926: LIST
13927: PUSH
13928: EMPTY
13929: LIST
13930: ADD
13931: ST_TO_ADDR
13932: GO 13845
13934: POP
13935: POP
// result := list ;
13936: LD_ADDR_VAR 0 2
13940: PUSH
13941: LD_VAR 0 5
13945: ST_TO_ADDR
// end ;
13946: LD_VAR 0 2
13950: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
13951: LD_INT 0
13953: PPUSH
13954: PPUSH
13955: PPUSH
13956: PPUSH
13957: PPUSH
13958: PPUSH
13959: PPUSH
// if not factory then
13960: LD_VAR 0 1
13964: NOT
13965: IFFALSE 13969
// exit ;
13967: GO 14572
// if control = control_apeman then
13969: LD_VAR 0 4
13973: PUSH
13974: LD_INT 5
13976: EQUAL
13977: IFFALSE 14086
// begin tmp := UnitsInside ( factory ) ;
13979: LD_ADDR_VAR 0 8
13983: PUSH
13984: LD_VAR 0 1
13988: PPUSH
13989: CALL_OW 313
13993: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
13994: LD_VAR 0 8
13998: PPUSH
13999: LD_INT 25
14001: PUSH
14002: LD_INT 12
14004: PUSH
14005: EMPTY
14006: LIST
14007: LIST
14008: PPUSH
14009: CALL_OW 72
14013: NOT
14014: IFFALSE 14024
// control := control_manual ;
14016: LD_ADDR_VAR 0 4
14020: PUSH
14021: LD_INT 1
14023: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
14024: LD_ADDR_VAR 0 8
14028: PUSH
14029: LD_VAR 0 1
14033: PPUSH
14034: CALL 13721 0 1
14038: ST_TO_ADDR
// if tmp then
14039: LD_VAR 0 8
14043: IFFALSE 14086
// begin for i in tmp do
14045: LD_ADDR_VAR 0 7
14049: PUSH
14050: LD_VAR 0 8
14054: PUSH
14055: FOR_IN
14056: IFFALSE 14084
// if i [ 1 ] = b_ext_radio then
14058: LD_VAR 0 7
14062: PUSH
14063: LD_INT 1
14065: ARRAY
14066: PUSH
14067: LD_INT 22
14069: EQUAL
14070: IFFALSE 14082
// begin control := control_remote ;
14072: LD_ADDR_VAR 0 4
14076: PUSH
14077: LD_INT 2
14079: ST_TO_ADDR
// break ;
14080: GO 14084
// end ;
14082: GO 14055
14084: POP
14085: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
14086: LD_VAR 0 1
14090: PPUSH
14091: LD_VAR 0 2
14095: PPUSH
14096: LD_VAR 0 3
14100: PPUSH
14101: LD_VAR 0 4
14105: PPUSH
14106: LD_VAR 0 5
14110: PPUSH
14111: CALL_OW 448
14115: IFFALSE 14150
// begin result := [ chassis , engine , control , weapon ] ;
14117: LD_ADDR_VAR 0 6
14121: PUSH
14122: LD_VAR 0 2
14126: PUSH
14127: LD_VAR 0 3
14131: PUSH
14132: LD_VAR 0 4
14136: PUSH
14137: LD_VAR 0 5
14141: PUSH
14142: EMPTY
14143: LIST
14144: LIST
14145: LIST
14146: LIST
14147: ST_TO_ADDR
// exit ;
14148: GO 14572
// end ; _chassis := AvailableChassisList ( factory ) ;
14150: LD_ADDR_VAR 0 9
14154: PUSH
14155: LD_VAR 0 1
14159: PPUSH
14160: CALL_OW 475
14164: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
14165: LD_ADDR_VAR 0 11
14169: PUSH
14170: LD_VAR 0 1
14174: PPUSH
14175: CALL_OW 476
14179: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
14180: LD_ADDR_VAR 0 12
14184: PUSH
14185: LD_VAR 0 1
14189: PPUSH
14190: CALL_OW 477
14194: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
14195: LD_ADDR_VAR 0 10
14199: PUSH
14200: LD_VAR 0 1
14204: PPUSH
14205: CALL_OW 478
14209: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
14210: LD_VAR 0 9
14214: NOT
14215: IFTRUE 14224
14217: PUSH
14218: LD_VAR 0 11
14222: NOT
14223: OR
14224: IFTRUE 14233
14226: PUSH
14227: LD_VAR 0 12
14231: NOT
14232: OR
14233: IFTRUE 14242
14235: PUSH
14236: LD_VAR 0 10
14240: NOT
14241: OR
14242: IFFALSE 14277
// begin result := [ chassis , engine , control , weapon ] ;
14244: LD_ADDR_VAR 0 6
14248: PUSH
14249: LD_VAR 0 2
14253: PUSH
14254: LD_VAR 0 3
14258: PUSH
14259: LD_VAR 0 4
14263: PUSH
14264: LD_VAR 0 5
14268: PUSH
14269: EMPTY
14270: LIST
14271: LIST
14272: LIST
14273: LIST
14274: ST_TO_ADDR
// exit ;
14275: GO 14572
// end ; if not chassis in _chassis then
14277: LD_VAR 0 2
14281: PUSH
14282: LD_VAR 0 9
14286: IN
14287: NOT
14288: IFFALSE 14314
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
14290: LD_ADDR_VAR 0 2
14294: PUSH
14295: LD_VAR 0 9
14299: PUSH
14300: LD_INT 1
14302: PPUSH
14303: LD_VAR 0 9
14307: PPUSH
14308: CALL_OW 12
14312: ARRAY
14313: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
14314: LD_VAR 0 2
14318: PPUSH
14319: LD_VAR 0 3
14323: PPUSH
14324: CALL 14577 0 2
14328: NOT
14329: IFFALSE 14390
// repeat engine := _engine [ 1 ] ;
14331: LD_ADDR_VAR 0 3
14335: PUSH
14336: LD_VAR 0 11
14340: PUSH
14341: LD_INT 1
14343: ARRAY
14344: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
14345: LD_ADDR_VAR 0 11
14349: PUSH
14350: LD_VAR 0 11
14354: PPUSH
14355: LD_INT 1
14357: PPUSH
14358: CALL_OW 3
14362: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
14363: LD_VAR 0 2
14367: PPUSH
14368: LD_VAR 0 3
14372: PPUSH
14373: CALL 14577 0 2
14377: IFTRUE 14388
14379: PUSH
14380: LD_VAR 0 11
14384: PUSH
14385: EMPTY
14386: EQUAL
14387: OR
14388: IFFALSE 14331
// if not control in _control then
14390: LD_VAR 0 4
14394: PUSH
14395: LD_VAR 0 12
14399: IN
14400: NOT
14401: IFFALSE 14427
// control := _control [ rand ( 1 , _control ) ] ;
14403: LD_ADDR_VAR 0 4
14407: PUSH
14408: LD_VAR 0 12
14412: PUSH
14413: LD_INT 1
14415: PPUSH
14416: LD_VAR 0 12
14420: PPUSH
14421: CALL_OW 12
14425: ARRAY
14426: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
14427: LD_VAR 0 2
14431: PPUSH
14432: LD_VAR 0 5
14436: PPUSH
14437: CALL 14799 0 2
14441: NOT
14442: IFFALSE 14503
// repeat weapon := _weapon [ 1 ] ;
14444: LD_ADDR_VAR 0 5
14448: PUSH
14449: LD_VAR 0 10
14453: PUSH
14454: LD_INT 1
14456: ARRAY
14457: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
14458: LD_ADDR_VAR 0 10
14462: PUSH
14463: LD_VAR 0 10
14467: PPUSH
14468: LD_INT 1
14470: PPUSH
14471: CALL_OW 3
14475: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
14476: LD_VAR 0 2
14480: PPUSH
14481: LD_VAR 0 5
14485: PPUSH
14486: CALL 14799 0 2
14490: IFTRUE 14501
14492: PUSH
14493: LD_VAR 0 10
14497: PUSH
14498: EMPTY
14499: EQUAL
14500: OR
14501: IFFALSE 14444
// result := [ ] ;
14503: LD_ADDR_VAR 0 6
14507: PUSH
14508: EMPTY
14509: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
14510: LD_VAR 0 1
14514: PPUSH
14515: LD_VAR 0 2
14519: PPUSH
14520: LD_VAR 0 3
14524: PPUSH
14525: LD_VAR 0 4
14529: PPUSH
14530: LD_VAR 0 5
14534: PPUSH
14535: CALL_OW 448
14539: IFFALSE 14572
// result := [ chassis , engine , control , weapon ] ;
14541: LD_ADDR_VAR 0 6
14545: PUSH
14546: LD_VAR 0 2
14550: PUSH
14551: LD_VAR 0 3
14555: PUSH
14556: LD_VAR 0 4
14560: PUSH
14561: LD_VAR 0 5
14565: PUSH
14566: EMPTY
14567: LIST
14568: LIST
14569: LIST
14570: LIST
14571: ST_TO_ADDR
// end ;
14572: LD_VAR 0 6
14576: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
14577: LD_INT 0
14579: PPUSH
// if not chassis or not engine then
14580: LD_VAR 0 1
14584: NOT
14585: IFTRUE 14594
14587: PUSH
14588: LD_VAR 0 2
14592: NOT
14593: OR
14594: IFFALSE 14598
// exit ;
14596: GO 14794
// case engine of engine_solar :
14598: LD_VAR 0 2
14602: PUSH
14603: LD_INT 2
14605: DOUBLE
14606: EQUAL
14607: IFTRUE 14611
14609: GO 14649
14611: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
14612: LD_ADDR_VAR 0 3
14616: PUSH
14617: LD_INT 11
14619: PUSH
14620: LD_INT 12
14622: PUSH
14623: LD_INT 13
14625: PUSH
14626: LD_INT 14
14628: PUSH
14629: LD_INT 1
14631: PUSH
14632: LD_INT 2
14634: PUSH
14635: LD_INT 3
14637: PUSH
14638: EMPTY
14639: LIST
14640: LIST
14641: LIST
14642: LIST
14643: LIST
14644: LIST
14645: LIST
14646: ST_TO_ADDR
14647: GO 14778
14649: LD_INT 1
14651: DOUBLE
14652: EQUAL
14653: IFTRUE 14657
14655: GO 14719
14657: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
14658: LD_ADDR_VAR 0 3
14662: PUSH
14663: LD_INT 11
14665: PUSH
14666: LD_INT 12
14668: PUSH
14669: LD_INT 13
14671: PUSH
14672: LD_INT 14
14674: PUSH
14675: LD_INT 1
14677: PUSH
14678: LD_INT 2
14680: PUSH
14681: LD_INT 3
14683: PUSH
14684: LD_INT 4
14686: PUSH
14687: LD_INT 5
14689: PUSH
14690: LD_INT 21
14692: PUSH
14693: LD_INT 23
14695: PUSH
14696: LD_INT 22
14698: PUSH
14699: LD_INT 24
14701: PUSH
14702: EMPTY
14703: LIST
14704: LIST
14705: LIST
14706: LIST
14707: LIST
14708: LIST
14709: LIST
14710: LIST
14711: LIST
14712: LIST
14713: LIST
14714: LIST
14715: LIST
14716: ST_TO_ADDR
14717: GO 14778
14719: LD_INT 3
14721: DOUBLE
14722: EQUAL
14723: IFTRUE 14727
14725: GO 14777
14727: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
14728: LD_ADDR_VAR 0 3
14732: PUSH
14733: LD_INT 13
14735: PUSH
14736: LD_INT 14
14738: PUSH
14739: LD_INT 2
14741: PUSH
14742: LD_INT 3
14744: PUSH
14745: LD_INT 4
14747: PUSH
14748: LD_INT 5
14750: PUSH
14751: LD_INT 21
14753: PUSH
14754: LD_INT 22
14756: PUSH
14757: LD_INT 23
14759: PUSH
14760: LD_INT 24
14762: PUSH
14763: EMPTY
14764: LIST
14765: LIST
14766: LIST
14767: LIST
14768: LIST
14769: LIST
14770: LIST
14771: LIST
14772: LIST
14773: LIST
14774: ST_TO_ADDR
14775: GO 14778
14777: POP
// result := ( chassis in result ) ;
14778: LD_ADDR_VAR 0 3
14782: PUSH
14783: LD_VAR 0 1
14787: PUSH
14788: LD_VAR 0 3
14792: IN
14793: ST_TO_ADDR
// end ;
14794: LD_VAR 0 3
14798: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
14799: LD_INT 0
14801: PPUSH
// if not chassis or not weapon then
14802: LD_VAR 0 1
14806: NOT
14807: IFTRUE 14816
14809: PUSH
14810: LD_VAR 0 2
14814: NOT
14815: OR
14816: IFFALSE 14820
// exit ;
14818: GO 15914
// case weapon of us_machine_gun :
14820: LD_VAR 0 2
14824: PUSH
14825: LD_INT 2
14827: DOUBLE
14828: EQUAL
14829: IFTRUE 14833
14831: GO 14863
14833: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
14834: LD_ADDR_VAR 0 3
14838: PUSH
14839: LD_INT 1
14841: PUSH
14842: LD_INT 2
14844: PUSH
14845: LD_INT 3
14847: PUSH
14848: LD_INT 4
14850: PUSH
14851: LD_INT 5
14853: PUSH
14854: EMPTY
14855: LIST
14856: LIST
14857: LIST
14858: LIST
14859: LIST
14860: ST_TO_ADDR
14861: GO 15898
14863: LD_INT 3
14865: DOUBLE
14866: EQUAL
14867: IFTRUE 14871
14869: GO 14901
14871: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
14872: LD_ADDR_VAR 0 3
14876: PUSH
14877: LD_INT 1
14879: PUSH
14880: LD_INT 2
14882: PUSH
14883: LD_INT 3
14885: PUSH
14886: LD_INT 4
14888: PUSH
14889: LD_INT 5
14891: PUSH
14892: EMPTY
14893: LIST
14894: LIST
14895: LIST
14896: LIST
14897: LIST
14898: ST_TO_ADDR
14899: GO 15898
14901: LD_INT 11
14903: DOUBLE
14904: EQUAL
14905: IFTRUE 14909
14907: GO 14939
14909: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
14910: LD_ADDR_VAR 0 3
14914: PUSH
14915: LD_INT 1
14917: PUSH
14918: LD_INT 2
14920: PUSH
14921: LD_INT 3
14923: PUSH
14924: LD_INT 4
14926: PUSH
14927: LD_INT 5
14929: PUSH
14930: EMPTY
14931: LIST
14932: LIST
14933: LIST
14934: LIST
14935: LIST
14936: ST_TO_ADDR
14937: GO 15898
14939: LD_INT 4
14941: DOUBLE
14942: EQUAL
14943: IFTRUE 14947
14945: GO 14973
14947: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
14948: LD_ADDR_VAR 0 3
14952: PUSH
14953: LD_INT 2
14955: PUSH
14956: LD_INT 3
14958: PUSH
14959: LD_INT 4
14961: PUSH
14962: LD_INT 5
14964: PUSH
14965: EMPTY
14966: LIST
14967: LIST
14968: LIST
14969: LIST
14970: ST_TO_ADDR
14971: GO 15898
14973: LD_INT 5
14975: DOUBLE
14976: EQUAL
14977: IFTRUE 14981
14979: GO 15007
14981: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
14982: LD_ADDR_VAR 0 3
14986: PUSH
14987: LD_INT 2
14989: PUSH
14990: LD_INT 3
14992: PUSH
14993: LD_INT 4
14995: PUSH
14996: LD_INT 5
14998: PUSH
14999: EMPTY
15000: LIST
15001: LIST
15002: LIST
15003: LIST
15004: ST_TO_ADDR
15005: GO 15898
15007: LD_INT 9
15009: DOUBLE
15010: EQUAL
15011: IFTRUE 15015
15013: GO 15041
15015: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
15016: LD_ADDR_VAR 0 3
15020: PUSH
15021: LD_INT 2
15023: PUSH
15024: LD_INT 3
15026: PUSH
15027: LD_INT 4
15029: PUSH
15030: LD_INT 5
15032: PUSH
15033: EMPTY
15034: LIST
15035: LIST
15036: LIST
15037: LIST
15038: ST_TO_ADDR
15039: GO 15898
15041: LD_INT 7
15043: DOUBLE
15044: EQUAL
15045: IFTRUE 15049
15047: GO 15075
15049: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
15050: LD_ADDR_VAR 0 3
15054: PUSH
15055: LD_INT 2
15057: PUSH
15058: LD_INT 3
15060: PUSH
15061: LD_INT 4
15063: PUSH
15064: LD_INT 5
15066: PUSH
15067: EMPTY
15068: LIST
15069: LIST
15070: LIST
15071: LIST
15072: ST_TO_ADDR
15073: GO 15898
15075: LD_INT 12
15077: DOUBLE
15078: EQUAL
15079: IFTRUE 15083
15081: GO 15109
15083: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
15084: LD_ADDR_VAR 0 3
15088: PUSH
15089: LD_INT 2
15091: PUSH
15092: LD_INT 3
15094: PUSH
15095: LD_INT 4
15097: PUSH
15098: LD_INT 5
15100: PUSH
15101: EMPTY
15102: LIST
15103: LIST
15104: LIST
15105: LIST
15106: ST_TO_ADDR
15107: GO 15898
15109: LD_INT 13
15111: DOUBLE
15112: EQUAL
15113: IFTRUE 15117
15115: GO 15143
15117: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
15118: LD_ADDR_VAR 0 3
15122: PUSH
15123: LD_INT 2
15125: PUSH
15126: LD_INT 3
15128: PUSH
15129: LD_INT 4
15131: PUSH
15132: LD_INT 5
15134: PUSH
15135: EMPTY
15136: LIST
15137: LIST
15138: LIST
15139: LIST
15140: ST_TO_ADDR
15141: GO 15898
15143: LD_INT 14
15145: DOUBLE
15146: EQUAL
15147: IFTRUE 15151
15149: GO 15169
15151: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
15152: LD_ADDR_VAR 0 3
15156: PUSH
15157: LD_INT 4
15159: PUSH
15160: LD_INT 5
15162: PUSH
15163: EMPTY
15164: LIST
15165: LIST
15166: ST_TO_ADDR
15167: GO 15898
15169: LD_INT 6
15171: DOUBLE
15172: EQUAL
15173: IFTRUE 15177
15175: GO 15195
15177: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
15178: LD_ADDR_VAR 0 3
15182: PUSH
15183: LD_INT 4
15185: PUSH
15186: LD_INT 5
15188: PUSH
15189: EMPTY
15190: LIST
15191: LIST
15192: ST_TO_ADDR
15193: GO 15898
15195: LD_INT 10
15197: DOUBLE
15198: EQUAL
15199: IFTRUE 15203
15201: GO 15221
15203: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
15204: LD_ADDR_VAR 0 3
15208: PUSH
15209: LD_INT 4
15211: PUSH
15212: LD_INT 5
15214: PUSH
15215: EMPTY
15216: LIST
15217: LIST
15218: ST_TO_ADDR
15219: GO 15898
15221: LD_INT 22
15223: DOUBLE
15224: EQUAL
15225: IFTRUE 15229
15227: GO 15255
15229: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
15230: LD_ADDR_VAR 0 3
15234: PUSH
15235: LD_INT 11
15237: PUSH
15238: LD_INT 12
15240: PUSH
15241: LD_INT 13
15243: PUSH
15244: LD_INT 14
15246: PUSH
15247: EMPTY
15248: LIST
15249: LIST
15250: LIST
15251: LIST
15252: ST_TO_ADDR
15253: GO 15898
15255: LD_INT 23
15257: DOUBLE
15258: EQUAL
15259: IFTRUE 15263
15261: GO 15289
15263: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
15264: LD_ADDR_VAR 0 3
15268: PUSH
15269: LD_INT 11
15271: PUSH
15272: LD_INT 12
15274: PUSH
15275: LD_INT 13
15277: PUSH
15278: LD_INT 14
15280: PUSH
15281: EMPTY
15282: LIST
15283: LIST
15284: LIST
15285: LIST
15286: ST_TO_ADDR
15287: GO 15898
15289: LD_INT 24
15291: DOUBLE
15292: EQUAL
15293: IFTRUE 15297
15295: GO 15323
15297: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
15298: LD_ADDR_VAR 0 3
15302: PUSH
15303: LD_INT 11
15305: PUSH
15306: LD_INT 12
15308: PUSH
15309: LD_INT 13
15311: PUSH
15312: LD_INT 14
15314: PUSH
15315: EMPTY
15316: LIST
15317: LIST
15318: LIST
15319: LIST
15320: ST_TO_ADDR
15321: GO 15898
15323: LD_INT 30
15325: DOUBLE
15326: EQUAL
15327: IFTRUE 15331
15329: GO 15357
15331: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
15332: LD_ADDR_VAR 0 3
15336: PUSH
15337: LD_INT 11
15339: PUSH
15340: LD_INT 12
15342: PUSH
15343: LD_INT 13
15345: PUSH
15346: LD_INT 14
15348: PUSH
15349: EMPTY
15350: LIST
15351: LIST
15352: LIST
15353: LIST
15354: ST_TO_ADDR
15355: GO 15898
15357: LD_INT 25
15359: DOUBLE
15360: EQUAL
15361: IFTRUE 15365
15363: GO 15383
15365: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
15366: LD_ADDR_VAR 0 3
15370: PUSH
15371: LD_INT 13
15373: PUSH
15374: LD_INT 14
15376: PUSH
15377: EMPTY
15378: LIST
15379: LIST
15380: ST_TO_ADDR
15381: GO 15898
15383: LD_INT 27
15385: DOUBLE
15386: EQUAL
15387: IFTRUE 15391
15389: GO 15409
15391: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
15392: LD_ADDR_VAR 0 3
15396: PUSH
15397: LD_INT 13
15399: PUSH
15400: LD_INT 14
15402: PUSH
15403: EMPTY
15404: LIST
15405: LIST
15406: ST_TO_ADDR
15407: GO 15898
15409: LD_INT 92
15411: DOUBLE
15412: EQUAL
15413: IFTRUE 15417
15415: GO 15443
15417: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
15418: LD_ADDR_VAR 0 3
15422: PUSH
15423: LD_INT 11
15425: PUSH
15426: LD_INT 12
15428: PUSH
15429: LD_INT 13
15431: PUSH
15432: LD_INT 14
15434: PUSH
15435: EMPTY
15436: LIST
15437: LIST
15438: LIST
15439: LIST
15440: ST_TO_ADDR
15441: GO 15898
15443: LD_INT 28
15445: DOUBLE
15446: EQUAL
15447: IFTRUE 15451
15449: GO 15469
15451: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
15452: LD_ADDR_VAR 0 3
15456: PUSH
15457: LD_INT 13
15459: PUSH
15460: LD_INT 14
15462: PUSH
15463: EMPTY
15464: LIST
15465: LIST
15466: ST_TO_ADDR
15467: GO 15898
15469: LD_INT 29
15471: DOUBLE
15472: EQUAL
15473: IFTRUE 15477
15475: GO 15495
15477: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
15478: LD_ADDR_VAR 0 3
15482: PUSH
15483: LD_INT 13
15485: PUSH
15486: LD_INT 14
15488: PUSH
15489: EMPTY
15490: LIST
15491: LIST
15492: ST_TO_ADDR
15493: GO 15898
15495: LD_INT 31
15497: DOUBLE
15498: EQUAL
15499: IFTRUE 15503
15501: GO 15521
15503: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
15504: LD_ADDR_VAR 0 3
15508: PUSH
15509: LD_INT 13
15511: PUSH
15512: LD_INT 14
15514: PUSH
15515: EMPTY
15516: LIST
15517: LIST
15518: ST_TO_ADDR
15519: GO 15898
15521: LD_INT 26
15523: DOUBLE
15524: EQUAL
15525: IFTRUE 15529
15527: GO 15547
15529: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
15530: LD_ADDR_VAR 0 3
15534: PUSH
15535: LD_INT 13
15537: PUSH
15538: LD_INT 14
15540: PUSH
15541: EMPTY
15542: LIST
15543: LIST
15544: ST_TO_ADDR
15545: GO 15898
15547: LD_INT 42
15549: DOUBLE
15550: EQUAL
15551: IFTRUE 15555
15553: GO 15581
15555: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
15556: LD_ADDR_VAR 0 3
15560: PUSH
15561: LD_INT 21
15563: PUSH
15564: LD_INT 22
15566: PUSH
15567: LD_INT 23
15569: PUSH
15570: LD_INT 24
15572: PUSH
15573: EMPTY
15574: LIST
15575: LIST
15576: LIST
15577: LIST
15578: ST_TO_ADDR
15579: GO 15898
15581: LD_INT 43
15583: DOUBLE
15584: EQUAL
15585: IFTRUE 15589
15587: GO 15615
15589: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
15590: LD_ADDR_VAR 0 3
15594: PUSH
15595: LD_INT 21
15597: PUSH
15598: LD_INT 22
15600: PUSH
15601: LD_INT 23
15603: PUSH
15604: LD_INT 24
15606: PUSH
15607: EMPTY
15608: LIST
15609: LIST
15610: LIST
15611: LIST
15612: ST_TO_ADDR
15613: GO 15898
15615: LD_INT 44
15617: DOUBLE
15618: EQUAL
15619: IFTRUE 15623
15621: GO 15649
15623: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
15624: LD_ADDR_VAR 0 3
15628: PUSH
15629: LD_INT 21
15631: PUSH
15632: LD_INT 22
15634: PUSH
15635: LD_INT 23
15637: PUSH
15638: LD_INT 24
15640: PUSH
15641: EMPTY
15642: LIST
15643: LIST
15644: LIST
15645: LIST
15646: ST_TO_ADDR
15647: GO 15898
15649: LD_INT 45
15651: DOUBLE
15652: EQUAL
15653: IFTRUE 15657
15655: GO 15683
15657: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
15658: LD_ADDR_VAR 0 3
15662: PUSH
15663: LD_INT 21
15665: PUSH
15666: LD_INT 22
15668: PUSH
15669: LD_INT 23
15671: PUSH
15672: LD_INT 24
15674: PUSH
15675: EMPTY
15676: LIST
15677: LIST
15678: LIST
15679: LIST
15680: ST_TO_ADDR
15681: GO 15898
15683: LD_INT 49
15685: DOUBLE
15686: EQUAL
15687: IFTRUE 15691
15689: GO 15717
15691: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
15692: LD_ADDR_VAR 0 3
15696: PUSH
15697: LD_INT 21
15699: PUSH
15700: LD_INT 22
15702: PUSH
15703: LD_INT 23
15705: PUSH
15706: LD_INT 24
15708: PUSH
15709: EMPTY
15710: LIST
15711: LIST
15712: LIST
15713: LIST
15714: ST_TO_ADDR
15715: GO 15898
15717: LD_INT 51
15719: DOUBLE
15720: EQUAL
15721: IFTRUE 15725
15723: GO 15751
15725: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
15726: LD_ADDR_VAR 0 3
15730: PUSH
15731: LD_INT 21
15733: PUSH
15734: LD_INT 22
15736: PUSH
15737: LD_INT 23
15739: PUSH
15740: LD_INT 24
15742: PUSH
15743: EMPTY
15744: LIST
15745: LIST
15746: LIST
15747: LIST
15748: ST_TO_ADDR
15749: GO 15898
15751: LD_INT 52
15753: DOUBLE
15754: EQUAL
15755: IFTRUE 15759
15757: GO 15785
15759: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
15760: LD_ADDR_VAR 0 3
15764: PUSH
15765: LD_INT 21
15767: PUSH
15768: LD_INT 22
15770: PUSH
15771: LD_INT 23
15773: PUSH
15774: LD_INT 24
15776: PUSH
15777: EMPTY
15778: LIST
15779: LIST
15780: LIST
15781: LIST
15782: ST_TO_ADDR
15783: GO 15898
15785: LD_INT 53
15787: DOUBLE
15788: EQUAL
15789: IFTRUE 15793
15791: GO 15811
15793: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
15794: LD_ADDR_VAR 0 3
15798: PUSH
15799: LD_INT 23
15801: PUSH
15802: LD_INT 24
15804: PUSH
15805: EMPTY
15806: LIST
15807: LIST
15808: ST_TO_ADDR
15809: GO 15898
15811: LD_INT 46
15813: DOUBLE
15814: EQUAL
15815: IFTRUE 15819
15817: GO 15837
15819: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
15820: LD_ADDR_VAR 0 3
15824: PUSH
15825: LD_INT 23
15827: PUSH
15828: LD_INT 24
15830: PUSH
15831: EMPTY
15832: LIST
15833: LIST
15834: ST_TO_ADDR
15835: GO 15898
15837: LD_INT 47
15839: DOUBLE
15840: EQUAL
15841: IFTRUE 15845
15843: GO 15863
15845: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
15846: LD_ADDR_VAR 0 3
15850: PUSH
15851: LD_INT 23
15853: PUSH
15854: LD_INT 24
15856: PUSH
15857: EMPTY
15858: LIST
15859: LIST
15860: ST_TO_ADDR
15861: GO 15898
15863: LD_INT 98
15865: DOUBLE
15866: EQUAL
15867: IFTRUE 15871
15869: GO 15897
15871: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
15872: LD_ADDR_VAR 0 3
15876: PUSH
15877: LD_INT 21
15879: PUSH
15880: LD_INT 22
15882: PUSH
15883: LD_INT 23
15885: PUSH
15886: LD_INT 24
15888: PUSH
15889: EMPTY
15890: LIST
15891: LIST
15892: LIST
15893: LIST
15894: ST_TO_ADDR
15895: GO 15898
15897: POP
// result := ( chassis in result ) ;
15898: LD_ADDR_VAR 0 3
15902: PUSH
15903: LD_VAR 0 1
15907: PUSH
15908: LD_VAR 0 3
15912: IN
15913: ST_TO_ADDR
// end ;
15914: LD_VAR 0 3
15918: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
15919: LD_INT 0
15921: PPUSH
15922: PPUSH
15923: PPUSH
15924: PPUSH
15925: PPUSH
15926: PPUSH
15927: PPUSH
// result := array ;
15928: LD_ADDR_VAR 0 5
15932: PUSH
15933: LD_VAR 0 1
15937: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
15938: LD_VAR 0 1
15942: NOT
15943: IFTRUE 15952
15945: PUSH
15946: LD_VAR 0 2
15950: NOT
15951: OR
15952: IFTRUE 15961
15954: PUSH
15955: LD_VAR 0 3
15959: NOT
15960: OR
15961: IFTRUE 15975
15963: PUSH
15964: LD_VAR 0 2
15968: PUSH
15969: LD_VAR 0 1
15973: GREATER
15974: OR
15975: IFTRUE 15989
15977: PUSH
15978: LD_VAR 0 3
15982: PUSH
15983: LD_VAR 0 1
15987: GREATER
15988: OR
15989: IFFALSE 15993
// exit ;
15991: GO 16289
// if direction then
15993: LD_VAR 0 4
15997: IFFALSE 16061
// begin d := 1 ;
15999: LD_ADDR_VAR 0 9
16003: PUSH
16004: LD_INT 1
16006: ST_TO_ADDR
// if i_from > i_to then
16007: LD_VAR 0 2
16011: PUSH
16012: LD_VAR 0 3
16016: GREATER
16017: IFFALSE 16043
// length := ( array - i_from ) + i_to else
16019: LD_ADDR_VAR 0 11
16023: PUSH
16024: LD_VAR 0 1
16028: PUSH
16029: LD_VAR 0 2
16033: MINUS
16034: PUSH
16035: LD_VAR 0 3
16039: PLUS
16040: ST_TO_ADDR
16041: GO 16059
// length := i_to - i_from ;
16043: LD_ADDR_VAR 0 11
16047: PUSH
16048: LD_VAR 0 3
16052: PUSH
16053: LD_VAR 0 2
16057: MINUS
16058: ST_TO_ADDR
// end else
16059: GO 16122
// begin d := - 1 ;
16061: LD_ADDR_VAR 0 9
16065: PUSH
16066: LD_INT 1
16068: NEG
16069: ST_TO_ADDR
// if i_from > i_to then
16070: LD_VAR 0 2
16074: PUSH
16075: LD_VAR 0 3
16079: GREATER
16080: IFFALSE 16100
// length := i_from - i_to else
16082: LD_ADDR_VAR 0 11
16086: PUSH
16087: LD_VAR 0 2
16091: PUSH
16092: LD_VAR 0 3
16096: MINUS
16097: ST_TO_ADDR
16098: GO 16122
// length := ( array - i_to ) + i_from ;
16100: LD_ADDR_VAR 0 11
16104: PUSH
16105: LD_VAR 0 1
16109: PUSH
16110: LD_VAR 0 3
16114: MINUS
16115: PUSH
16116: LD_VAR 0 2
16120: PLUS
16121: ST_TO_ADDR
// end ; if not length then
16122: LD_VAR 0 11
16126: NOT
16127: IFFALSE 16131
// exit ;
16129: GO 16289
// tmp := array ;
16131: LD_ADDR_VAR 0 10
16135: PUSH
16136: LD_VAR 0 1
16140: ST_TO_ADDR
// for i = 1 to length do
16141: LD_ADDR_VAR 0 6
16145: PUSH
16146: DOUBLE
16147: LD_INT 1
16149: DEC
16150: ST_TO_ADDR
16151: LD_VAR 0 11
16155: PUSH
16156: FOR_TO
16157: IFFALSE 16277
// begin for j = 1 to array do
16159: LD_ADDR_VAR 0 7
16163: PUSH
16164: DOUBLE
16165: LD_INT 1
16167: DEC
16168: ST_TO_ADDR
16169: LD_VAR 0 1
16173: PUSH
16174: FOR_TO
16175: IFFALSE 16263
// begin k := j + d ;
16177: LD_ADDR_VAR 0 8
16181: PUSH
16182: LD_VAR 0 7
16186: PUSH
16187: LD_VAR 0 9
16191: PLUS
16192: ST_TO_ADDR
// if k > array then
16193: LD_VAR 0 8
16197: PUSH
16198: LD_VAR 0 1
16202: GREATER
16203: IFFALSE 16213
// k := 1 ;
16205: LD_ADDR_VAR 0 8
16209: PUSH
16210: LD_INT 1
16212: ST_TO_ADDR
// if not k then
16213: LD_VAR 0 8
16217: NOT
16218: IFFALSE 16230
// k := array ;
16220: LD_ADDR_VAR 0 8
16224: PUSH
16225: LD_VAR 0 1
16229: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
16230: LD_ADDR_VAR 0 10
16234: PUSH
16235: LD_VAR 0 10
16239: PPUSH
16240: LD_VAR 0 8
16244: PPUSH
16245: LD_VAR 0 1
16249: PUSH
16250: LD_VAR 0 7
16254: ARRAY
16255: PPUSH
16256: CALL_OW 1
16260: ST_TO_ADDR
// end ;
16261: GO 16174
16263: POP
16264: POP
// array := tmp ;
16265: LD_ADDR_VAR 0 1
16269: PUSH
16270: LD_VAR 0 10
16274: ST_TO_ADDR
// end ;
16275: GO 16156
16277: POP
16278: POP
// result := array ;
16279: LD_ADDR_VAR 0 5
16283: PUSH
16284: LD_VAR 0 1
16288: ST_TO_ADDR
// end ;
16289: LD_VAR 0 5
16293: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
16294: LD_INT 0
16296: PPUSH
16297: PPUSH
// result := 0 ;
16298: LD_ADDR_VAR 0 3
16302: PUSH
16303: LD_INT 0
16305: ST_TO_ADDR
// if not array or not value in array then
16306: LD_VAR 0 1
16310: NOT
16311: IFTRUE 16326
16313: PUSH
16314: LD_VAR 0 2
16318: PUSH
16319: LD_VAR 0 1
16323: IN
16324: NOT
16325: OR
16326: IFFALSE 16330
// exit ;
16328: GO 16384
// for i = 1 to array do
16330: LD_ADDR_VAR 0 4
16334: PUSH
16335: DOUBLE
16336: LD_INT 1
16338: DEC
16339: ST_TO_ADDR
16340: LD_VAR 0 1
16344: PUSH
16345: FOR_TO
16346: IFFALSE 16382
// if value = array [ i ] then
16348: LD_VAR 0 2
16352: PUSH
16353: LD_VAR 0 1
16357: PUSH
16358: LD_VAR 0 4
16362: ARRAY
16363: EQUAL
16364: IFFALSE 16380
// begin result := i ;
16366: LD_ADDR_VAR 0 3
16370: PUSH
16371: LD_VAR 0 4
16375: ST_TO_ADDR
// exit ;
16376: POP
16377: POP
16378: GO 16384
// end ;
16380: GO 16345
16382: POP
16383: POP
// end ;
16384: LD_VAR 0 3
16388: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
16389: LD_INT 0
16391: PPUSH
// vc_chassis := chassis ;
16392: LD_ADDR_OWVAR 37
16396: PUSH
16397: LD_VAR 0 1
16401: ST_TO_ADDR
// vc_engine := engine ;
16402: LD_ADDR_OWVAR 39
16406: PUSH
16407: LD_VAR 0 2
16411: ST_TO_ADDR
// vc_control := control ;
16412: LD_ADDR_OWVAR 38
16416: PUSH
16417: LD_VAR 0 3
16421: ST_TO_ADDR
// vc_weapon := weapon ;
16422: LD_ADDR_OWVAR 40
16426: PUSH
16427: LD_VAR 0 4
16431: ST_TO_ADDR
// vc_fuel_battery := fuel ;
16432: LD_ADDR_OWVAR 41
16436: PUSH
16437: LD_VAR 0 5
16441: ST_TO_ADDR
// end ;
16442: LD_VAR 0 6
16446: RET
// export function WantPlant ( unit ) ; var task ; begin
16447: LD_INT 0
16449: PPUSH
16450: PPUSH
// result := false ;
16451: LD_ADDR_VAR 0 2
16455: PUSH
16456: LD_INT 0
16458: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
16459: LD_ADDR_VAR 0 3
16463: PUSH
16464: LD_VAR 0 1
16468: PPUSH
16469: CALL_OW 437
16473: ST_TO_ADDR
// if task then
16474: LD_VAR 0 3
16478: IFFALSE 16506
// if task [ 1 ] [ 1 ] = p then
16480: LD_VAR 0 3
16484: PUSH
16485: LD_INT 1
16487: ARRAY
16488: PUSH
16489: LD_INT 1
16491: ARRAY
16492: PUSH
16493: LD_STRING p
16495: EQUAL
16496: IFFALSE 16506
// result := true ;
16498: LD_ADDR_VAR 0 2
16502: PUSH
16503: LD_INT 1
16505: ST_TO_ADDR
// end ;
16506: LD_VAR 0 2
16510: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
16511: LD_INT 0
16513: PPUSH
16514: PPUSH
16515: PPUSH
16516: PPUSH
// if pos < 1 then
16517: LD_VAR 0 2
16521: PUSH
16522: LD_INT 1
16524: LESS
16525: IFFALSE 16529
// exit ;
16527: GO 16832
// if pos = 1 then
16529: LD_VAR 0 2
16533: PUSH
16534: LD_INT 1
16536: EQUAL
16537: IFFALSE 16570
// result := Replace ( arr , pos [ 1 ] , value ) else
16539: LD_ADDR_VAR 0 4
16543: PUSH
16544: LD_VAR 0 1
16548: PPUSH
16549: LD_VAR 0 2
16553: PUSH
16554: LD_INT 1
16556: ARRAY
16557: PPUSH
16558: LD_VAR 0 3
16562: PPUSH
16563: CALL_OW 1
16567: ST_TO_ADDR
16568: GO 16832
// begin tmp := arr ;
16570: LD_ADDR_VAR 0 6
16574: PUSH
16575: LD_VAR 0 1
16579: ST_TO_ADDR
// s_arr := [ tmp ] ;
16580: LD_ADDR_VAR 0 7
16584: PUSH
16585: LD_VAR 0 6
16589: PUSH
16590: EMPTY
16591: LIST
16592: ST_TO_ADDR
// for i = 1 to pos - 1 do
16593: LD_ADDR_VAR 0 5
16597: PUSH
16598: DOUBLE
16599: LD_INT 1
16601: DEC
16602: ST_TO_ADDR
16603: LD_VAR 0 2
16607: PUSH
16608: LD_INT 1
16610: MINUS
16611: PUSH
16612: FOR_TO
16613: IFFALSE 16658
// begin tmp := tmp [ pos [ i ] ] ;
16615: LD_ADDR_VAR 0 6
16619: PUSH
16620: LD_VAR 0 6
16624: PUSH
16625: LD_VAR 0 2
16629: PUSH
16630: LD_VAR 0 5
16634: ARRAY
16635: ARRAY
16636: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
16637: LD_ADDR_VAR 0 7
16641: PUSH
16642: LD_VAR 0 7
16646: PUSH
16647: LD_VAR 0 6
16651: PUSH
16652: EMPTY
16653: LIST
16654: ADD
16655: ST_TO_ADDR
// end ;
16656: GO 16612
16658: POP
16659: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
16660: LD_ADDR_VAR 0 6
16664: PUSH
16665: LD_VAR 0 6
16669: PPUSH
16670: LD_VAR 0 2
16674: PUSH
16675: LD_VAR 0 2
16679: ARRAY
16680: PPUSH
16681: LD_VAR 0 3
16685: PPUSH
16686: CALL_OW 1
16690: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
16691: LD_ADDR_VAR 0 7
16695: PUSH
16696: LD_VAR 0 7
16700: PPUSH
16701: LD_VAR 0 7
16705: PPUSH
16706: LD_VAR 0 6
16710: PPUSH
16711: CALL_OW 1
16715: ST_TO_ADDR
// for i = s_arr downto 2 do
16716: LD_ADDR_VAR 0 5
16720: PUSH
16721: DOUBLE
16722: LD_VAR 0 7
16726: INC
16727: ST_TO_ADDR
16728: LD_INT 2
16730: PUSH
16731: FOR_DOWNTO
16732: IFFALSE 16816
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
16734: LD_ADDR_VAR 0 6
16738: PUSH
16739: LD_VAR 0 7
16743: PUSH
16744: LD_VAR 0 5
16748: PUSH
16749: LD_INT 1
16751: MINUS
16752: ARRAY
16753: PPUSH
16754: LD_VAR 0 2
16758: PUSH
16759: LD_VAR 0 5
16763: PUSH
16764: LD_INT 1
16766: MINUS
16767: ARRAY
16768: PPUSH
16769: LD_VAR 0 7
16773: PUSH
16774: LD_VAR 0 5
16778: ARRAY
16779: PPUSH
16780: CALL_OW 1
16784: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
16785: LD_ADDR_VAR 0 7
16789: PUSH
16790: LD_VAR 0 7
16794: PPUSH
16795: LD_VAR 0 5
16799: PUSH
16800: LD_INT 1
16802: MINUS
16803: PPUSH
16804: LD_VAR 0 6
16808: PPUSH
16809: CALL_OW 1
16813: ST_TO_ADDR
// end ;
16814: GO 16731
16816: POP
16817: POP
// result := s_arr [ 1 ] ;
16818: LD_ADDR_VAR 0 4
16822: PUSH
16823: LD_VAR 0 7
16827: PUSH
16828: LD_INT 1
16830: ARRAY
16831: ST_TO_ADDR
// end ; end ;
16832: LD_VAR 0 4
16836: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
16837: LD_INT 0
16839: PPUSH
16840: PPUSH
// if not list then
16841: LD_VAR 0 1
16845: NOT
16846: IFFALSE 16850
// exit ;
16848: GO 16941
// i := list [ pos1 ] ;
16850: LD_ADDR_VAR 0 5
16854: PUSH
16855: LD_VAR 0 1
16859: PUSH
16860: LD_VAR 0 2
16864: ARRAY
16865: ST_TO_ADDR
// if not i then
16866: LD_VAR 0 5
16870: NOT
16871: IFFALSE 16875
// exit ;
16873: GO 16941
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
16875: LD_ADDR_VAR 0 1
16879: PUSH
16880: LD_VAR 0 1
16884: PPUSH
16885: LD_VAR 0 2
16889: PPUSH
16890: LD_VAR 0 1
16894: PUSH
16895: LD_VAR 0 3
16899: ARRAY
16900: PPUSH
16901: CALL_OW 1
16905: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
16906: LD_ADDR_VAR 0 1
16910: PUSH
16911: LD_VAR 0 1
16915: PPUSH
16916: LD_VAR 0 3
16920: PPUSH
16921: LD_VAR 0 5
16925: PPUSH
16926: CALL_OW 1
16930: ST_TO_ADDR
// result := list ;
16931: LD_ADDR_VAR 0 4
16935: PUSH
16936: LD_VAR 0 1
16940: ST_TO_ADDR
// end ;
16941: LD_VAR 0 4
16945: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
16946: LD_INT 0
16948: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
16949: LD_ADDR_VAR 0 5
16953: PUSH
16954: LD_VAR 0 1
16958: PPUSH
16959: CALL_OW 250
16963: PPUSH
16964: LD_VAR 0 1
16968: PPUSH
16969: CALL_OW 251
16973: PPUSH
16974: LD_VAR 0 2
16978: PPUSH
16979: LD_VAR 0 3
16983: PPUSH
16984: LD_VAR 0 4
16988: PPUSH
16989: CALL 17371 0 5
16993: ST_TO_ADDR
// end ;
16994: LD_VAR 0 5
16998: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
16999: LD_INT 0
17001: PPUSH
17002: PPUSH
17003: PPUSH
17004: PPUSH
// if not list or not unit then
17005: LD_VAR 0 2
17009: NOT
17010: IFTRUE 17019
17012: PUSH
17013: LD_VAR 0 1
17017: NOT
17018: OR
17019: IFFALSE 17023
// exit ;
17021: GO 17366
// result := [ ] ;
17023: LD_ADDR_VAR 0 5
17027: PUSH
17028: EMPTY
17029: ST_TO_ADDR
// for i in list do
17030: LD_ADDR_VAR 0 6
17034: PUSH
17035: LD_VAR 0 2
17039: PUSH
17040: FOR_IN
17041: IFFALSE 17259
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
17043: LD_ADDR_VAR 0 8
17047: PUSH
17048: LD_VAR 0 1
17052: PPUSH
17053: LD_VAR 0 6
17057: PUSH
17058: LD_INT 1
17060: ARRAY
17061: PPUSH
17062: LD_VAR 0 6
17066: PUSH
17067: LD_INT 2
17069: ARRAY
17070: PPUSH
17071: CALL_OW 297
17075: ST_TO_ADDR
// if not Count ( result ) then
17076: LD_VAR 0 5
17080: PPUSH
17081: CALL 13593 0 1
17085: NOT
17086: IFFALSE 17119
// begin result := Join ( result , [ i , tmp ] ) ;
17088: LD_ADDR_VAR 0 5
17092: PUSH
17093: LD_VAR 0 5
17097: PPUSH
17098: LD_VAR 0 6
17102: PUSH
17103: LD_VAR 0 8
17107: PUSH
17108: EMPTY
17109: LIST
17110: LIST
17111: PPUSH
17112: CALL 49569 0 2
17116: ST_TO_ADDR
// continue ;
17117: GO 17040
// end ; if result [ result ] [ 2 ] <= tmp then
17119: LD_VAR 0 5
17123: PUSH
17124: LD_VAR 0 5
17128: ARRAY
17129: PUSH
17130: LD_INT 2
17132: ARRAY
17133: PUSH
17134: LD_VAR 0 8
17138: LESSEQUAL
17139: IFFALSE 17172
// result := Join ( result , [ i , tmp ] ) else
17141: LD_ADDR_VAR 0 5
17145: PUSH
17146: LD_VAR 0 5
17150: PPUSH
17151: LD_VAR 0 6
17155: PUSH
17156: LD_VAR 0 8
17160: PUSH
17161: EMPTY
17162: LIST
17163: LIST
17164: PPUSH
17165: CALL 49569 0 2
17169: ST_TO_ADDR
17170: GO 17257
// begin for j := 1 to Count ( result ) do
17172: LD_ADDR_VAR 0 7
17176: PUSH
17177: DOUBLE
17178: LD_INT 1
17180: DEC
17181: ST_TO_ADDR
17182: LD_VAR 0 5
17186: PPUSH
17187: CALL 13593 0 1
17191: PUSH
17192: FOR_TO
17193: IFFALSE 17255
// begin if tmp < result [ j ] [ 2 ] then
17195: LD_VAR 0 8
17199: PUSH
17200: LD_VAR 0 5
17204: PUSH
17205: LD_VAR 0 7
17209: ARRAY
17210: PUSH
17211: LD_INT 2
17213: ARRAY
17214: LESS
17215: IFFALSE 17253
// begin result := Insert ( result , j , [ i , tmp ] ) ;
17217: LD_ADDR_VAR 0 5
17221: PUSH
17222: LD_VAR 0 5
17226: PPUSH
17227: LD_VAR 0 7
17231: PPUSH
17232: LD_VAR 0 6
17236: PUSH
17237: LD_VAR 0 8
17241: PUSH
17242: EMPTY
17243: LIST
17244: LIST
17245: PPUSH
17246: CALL_OW 2
17250: ST_TO_ADDR
// break ;
17251: GO 17255
// end ; end ;
17253: GO 17192
17255: POP
17256: POP
// end ; end ;
17257: GO 17040
17259: POP
17260: POP
// if result and not asc then
17261: LD_VAR 0 5
17265: IFFALSE 17274
17267: PUSH
17268: LD_VAR 0 3
17272: NOT
17273: AND
17274: IFFALSE 17291
// result := ReverseArray ( result ) ;
17276: LD_ADDR_VAR 0 5
17280: PUSH
17281: LD_VAR 0 5
17285: PPUSH
17286: CALL 44649 0 1
17290: ST_TO_ADDR
// tmp := [ ] ;
17291: LD_ADDR_VAR 0 8
17295: PUSH
17296: EMPTY
17297: ST_TO_ADDR
// if mode then
17298: LD_VAR 0 4
17302: IFFALSE 17366
// begin for i := 1 to result do
17304: LD_ADDR_VAR 0 6
17308: PUSH
17309: DOUBLE
17310: LD_INT 1
17312: DEC
17313: ST_TO_ADDR
17314: LD_VAR 0 5
17318: PUSH
17319: FOR_TO
17320: IFFALSE 17354
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
17322: LD_ADDR_VAR 0 8
17326: PUSH
17327: LD_VAR 0 8
17331: PPUSH
17332: LD_VAR 0 5
17336: PUSH
17337: LD_VAR 0 6
17341: ARRAY
17342: PUSH
17343: LD_INT 1
17345: ARRAY
17346: PPUSH
17347: CALL 49569 0 2
17351: ST_TO_ADDR
17352: GO 17319
17354: POP
17355: POP
// result := tmp ;
17356: LD_ADDR_VAR 0 5
17360: PUSH
17361: LD_VAR 0 8
17365: ST_TO_ADDR
// end ; end ;
17366: LD_VAR 0 5
17370: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
17371: LD_INT 0
17373: PPUSH
17374: PPUSH
17375: PPUSH
17376: PPUSH
// if not list then
17377: LD_VAR 0 3
17381: NOT
17382: IFFALSE 17386
// exit ;
17384: GO 17776
// result := [ ] ;
17386: LD_ADDR_VAR 0 6
17390: PUSH
17391: EMPTY
17392: ST_TO_ADDR
// for i in list do
17393: LD_ADDR_VAR 0 7
17397: PUSH
17398: LD_VAR 0 3
17402: PUSH
17403: FOR_IN
17404: IFFALSE 17606
// begin tmp := GetDistUnitXY ( i , x , y ) ;
17406: LD_ADDR_VAR 0 9
17410: PUSH
17411: LD_VAR 0 7
17415: PPUSH
17416: LD_VAR 0 1
17420: PPUSH
17421: LD_VAR 0 2
17425: PPUSH
17426: CALL_OW 297
17430: ST_TO_ADDR
// if not result then
17431: LD_VAR 0 6
17435: NOT
17436: IFFALSE 17462
// result := [ [ i , tmp ] ] else
17438: LD_ADDR_VAR 0 6
17442: PUSH
17443: LD_VAR 0 7
17447: PUSH
17448: LD_VAR 0 9
17452: PUSH
17453: EMPTY
17454: LIST
17455: LIST
17456: PUSH
17457: EMPTY
17458: LIST
17459: ST_TO_ADDR
17460: GO 17604
// begin if result [ result ] [ 2 ] <= tmp then
17462: LD_VAR 0 6
17466: PUSH
17467: LD_VAR 0 6
17471: ARRAY
17472: PUSH
17473: LD_INT 2
17475: ARRAY
17476: PUSH
17477: LD_VAR 0 9
17481: LESSEQUAL
17482: IFFALSE 17524
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
17484: LD_ADDR_VAR 0 6
17488: PUSH
17489: LD_VAR 0 6
17493: PPUSH
17494: LD_VAR 0 6
17498: PUSH
17499: LD_INT 1
17501: PLUS
17502: PPUSH
17503: LD_VAR 0 7
17507: PUSH
17508: LD_VAR 0 9
17512: PUSH
17513: EMPTY
17514: LIST
17515: LIST
17516: PPUSH
17517: CALL_OW 2
17521: ST_TO_ADDR
17522: GO 17604
// for j := 1 to result do
17524: LD_ADDR_VAR 0 8
17528: PUSH
17529: DOUBLE
17530: LD_INT 1
17532: DEC
17533: ST_TO_ADDR
17534: LD_VAR 0 6
17538: PUSH
17539: FOR_TO
17540: IFFALSE 17602
// begin if tmp < result [ j ] [ 2 ] then
17542: LD_VAR 0 9
17546: PUSH
17547: LD_VAR 0 6
17551: PUSH
17552: LD_VAR 0 8
17556: ARRAY
17557: PUSH
17558: LD_INT 2
17560: ARRAY
17561: LESS
17562: IFFALSE 17600
// begin result := Insert ( result , j , [ i , tmp ] ) ;
17564: LD_ADDR_VAR 0 6
17568: PUSH
17569: LD_VAR 0 6
17573: PPUSH
17574: LD_VAR 0 8
17578: PPUSH
17579: LD_VAR 0 7
17583: PUSH
17584: LD_VAR 0 9
17588: PUSH
17589: EMPTY
17590: LIST
17591: LIST
17592: PPUSH
17593: CALL_OW 2
17597: ST_TO_ADDR
// break ;
17598: GO 17602
// end ; end ;
17600: GO 17539
17602: POP
17603: POP
// end ; end ;
17604: GO 17403
17606: POP
17607: POP
// if result and not asc then
17608: LD_VAR 0 6
17612: IFFALSE 17621
17614: PUSH
17615: LD_VAR 0 4
17619: NOT
17620: AND
17621: IFFALSE 17696
// begin tmp := result ;
17623: LD_ADDR_VAR 0 9
17627: PUSH
17628: LD_VAR 0 6
17632: ST_TO_ADDR
// for i = tmp downto 1 do
17633: LD_ADDR_VAR 0 7
17637: PUSH
17638: DOUBLE
17639: LD_VAR 0 9
17643: INC
17644: ST_TO_ADDR
17645: LD_INT 1
17647: PUSH
17648: FOR_DOWNTO
17649: IFFALSE 17694
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
17651: LD_ADDR_VAR 0 6
17655: PUSH
17656: LD_VAR 0 6
17660: PPUSH
17661: LD_VAR 0 9
17665: PUSH
17666: LD_VAR 0 7
17670: MINUS
17671: PUSH
17672: LD_INT 1
17674: PLUS
17675: PPUSH
17676: LD_VAR 0 9
17680: PUSH
17681: LD_VAR 0 7
17685: ARRAY
17686: PPUSH
17687: CALL_OW 1
17691: ST_TO_ADDR
17692: GO 17648
17694: POP
17695: POP
// end ; tmp := [ ] ;
17696: LD_ADDR_VAR 0 9
17700: PUSH
17701: EMPTY
17702: ST_TO_ADDR
// if mode then
17703: LD_VAR 0 5
17707: IFFALSE 17776
// begin for i = 1 to result do
17709: LD_ADDR_VAR 0 7
17713: PUSH
17714: DOUBLE
17715: LD_INT 1
17717: DEC
17718: ST_TO_ADDR
17719: LD_VAR 0 6
17723: PUSH
17724: FOR_TO
17725: IFFALSE 17764
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
17727: LD_ADDR_VAR 0 9
17731: PUSH
17732: LD_VAR 0 9
17736: PPUSH
17737: LD_VAR 0 7
17741: PPUSH
17742: LD_VAR 0 6
17746: PUSH
17747: LD_VAR 0 7
17751: ARRAY
17752: PUSH
17753: LD_INT 1
17755: ARRAY
17756: PPUSH
17757: CALL_OW 1
17761: ST_TO_ADDR
17762: GO 17724
17764: POP
17765: POP
// result := tmp ;
17766: LD_ADDR_VAR 0 6
17770: PUSH
17771: LD_VAR 0 9
17775: ST_TO_ADDR
// end ; end ;
17776: LD_VAR 0 6
17780: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
17781: LD_INT 0
17783: PPUSH
17784: PPUSH
17785: PPUSH
17786: PPUSH
17787: PPUSH
17788: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
17789: LD_ADDR_VAR 0 5
17793: PUSH
17794: LD_INT 0
17796: PUSH
17797: LD_INT 0
17799: PUSH
17800: LD_INT 0
17802: PUSH
17803: EMPTY
17804: PUSH
17805: EMPTY
17806: LIST
17807: LIST
17808: LIST
17809: LIST
17810: ST_TO_ADDR
// if not x or not y then
17811: LD_VAR 0 2
17815: NOT
17816: IFTRUE 17825
17818: PUSH
17819: LD_VAR 0 3
17823: NOT
17824: OR
17825: IFFALSE 17829
// exit ;
17827: GO 19485
// if not range then
17829: LD_VAR 0 4
17833: NOT
17834: IFFALSE 17844
// range := 10 ;
17836: LD_ADDR_VAR 0 4
17840: PUSH
17841: LD_INT 10
17843: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17844: LD_ADDR_VAR 0 8
17848: PUSH
17849: LD_INT 81
17851: PUSH
17852: LD_VAR 0 1
17856: PUSH
17857: EMPTY
17858: LIST
17859: LIST
17860: PUSH
17861: LD_INT 92
17863: PUSH
17864: LD_VAR 0 2
17868: PUSH
17869: LD_VAR 0 3
17873: PUSH
17874: LD_VAR 0 4
17878: PUSH
17879: EMPTY
17880: LIST
17881: LIST
17882: LIST
17883: LIST
17884: PUSH
17885: LD_INT 3
17887: PUSH
17888: LD_INT 21
17890: PUSH
17891: LD_INT 3
17893: PUSH
17894: EMPTY
17895: LIST
17896: LIST
17897: PUSH
17898: EMPTY
17899: LIST
17900: LIST
17901: PUSH
17902: EMPTY
17903: LIST
17904: LIST
17905: LIST
17906: PPUSH
17907: CALL_OW 69
17911: ST_TO_ADDR
// if not tmp then
17912: LD_VAR 0 8
17916: NOT
17917: IFFALSE 17921
// exit ;
17919: GO 19485
// for i in tmp do
17921: LD_ADDR_VAR 0 6
17925: PUSH
17926: LD_VAR 0 8
17930: PUSH
17931: FOR_IN
17932: IFFALSE 19460
// begin points := [ 0 , 0 , 0 ] ;
17934: LD_ADDR_VAR 0 9
17938: PUSH
17939: LD_INT 0
17941: PUSH
17942: LD_INT 0
17944: PUSH
17945: LD_INT 0
17947: PUSH
17948: EMPTY
17949: LIST
17950: LIST
17951: LIST
17952: ST_TO_ADDR
// bpoints := 1 ;
17953: LD_ADDR_VAR 0 10
17957: PUSH
17958: LD_INT 1
17960: ST_TO_ADDR
// case GetType ( i ) of unit_human :
17961: LD_VAR 0 6
17965: PPUSH
17966: CALL_OW 247
17970: PUSH
17971: LD_INT 1
17973: DOUBLE
17974: EQUAL
17975: IFTRUE 17979
17977: GO 18561
17979: POP
// begin if GetClass ( i ) = 1 then
17980: LD_VAR 0 6
17984: PPUSH
17985: CALL_OW 257
17989: PUSH
17990: LD_INT 1
17992: EQUAL
17993: IFFALSE 18014
// points := [ 10 , 5 , 3 ] ;
17995: LD_ADDR_VAR 0 9
17999: PUSH
18000: LD_INT 10
18002: PUSH
18003: LD_INT 5
18005: PUSH
18006: LD_INT 3
18008: PUSH
18009: EMPTY
18010: LIST
18011: LIST
18012: LIST
18013: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
18014: LD_VAR 0 6
18018: PPUSH
18019: CALL_OW 257
18023: PUSH
18024: LD_INT 2
18026: PUSH
18027: LD_INT 3
18029: PUSH
18030: LD_INT 4
18032: PUSH
18033: EMPTY
18034: LIST
18035: LIST
18036: LIST
18037: IN
18038: IFFALSE 18059
// points := [ 3 , 2 , 1 ] ;
18040: LD_ADDR_VAR 0 9
18044: PUSH
18045: LD_INT 3
18047: PUSH
18048: LD_INT 2
18050: PUSH
18051: LD_INT 1
18053: PUSH
18054: EMPTY
18055: LIST
18056: LIST
18057: LIST
18058: ST_TO_ADDR
// if GetClass ( i ) = 5 then
18059: LD_VAR 0 6
18063: PPUSH
18064: CALL_OW 257
18068: PUSH
18069: LD_INT 5
18071: EQUAL
18072: IFFALSE 18093
// points := [ 130 , 5 , 2 ] ;
18074: LD_ADDR_VAR 0 9
18078: PUSH
18079: LD_INT 130
18081: PUSH
18082: LD_INT 5
18084: PUSH
18085: LD_INT 2
18087: PUSH
18088: EMPTY
18089: LIST
18090: LIST
18091: LIST
18092: ST_TO_ADDR
// if GetClass ( i ) = 8 then
18093: LD_VAR 0 6
18097: PPUSH
18098: CALL_OW 257
18102: PUSH
18103: LD_INT 8
18105: EQUAL
18106: IFFALSE 18127
// points := [ 35 , 35 , 30 ] ;
18108: LD_ADDR_VAR 0 9
18112: PUSH
18113: LD_INT 35
18115: PUSH
18116: LD_INT 35
18118: PUSH
18119: LD_INT 30
18121: PUSH
18122: EMPTY
18123: LIST
18124: LIST
18125: LIST
18126: ST_TO_ADDR
// if GetClass ( i ) = 9 then
18127: LD_VAR 0 6
18131: PPUSH
18132: CALL_OW 257
18136: PUSH
18137: LD_INT 9
18139: EQUAL
18140: IFFALSE 18161
// points := [ 20 , 55 , 40 ] ;
18142: LD_ADDR_VAR 0 9
18146: PUSH
18147: LD_INT 20
18149: PUSH
18150: LD_INT 55
18152: PUSH
18153: LD_INT 40
18155: PUSH
18156: EMPTY
18157: LIST
18158: LIST
18159: LIST
18160: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
18161: LD_VAR 0 6
18165: PPUSH
18166: CALL_OW 257
18170: PUSH
18171: LD_INT 12
18173: PUSH
18174: LD_INT 16
18176: PUSH
18177: EMPTY
18178: LIST
18179: LIST
18180: IN
18181: IFFALSE 18202
// points := [ 5 , 3 , 2 ] ;
18183: LD_ADDR_VAR 0 9
18187: PUSH
18188: LD_INT 5
18190: PUSH
18191: LD_INT 3
18193: PUSH
18194: LD_INT 2
18196: PUSH
18197: EMPTY
18198: LIST
18199: LIST
18200: LIST
18201: ST_TO_ADDR
// if GetClass ( i ) = 17 then
18202: LD_VAR 0 6
18206: PPUSH
18207: CALL_OW 257
18211: PUSH
18212: LD_INT 17
18214: EQUAL
18215: IFFALSE 18236
// points := [ 100 , 50 , 75 ] ;
18217: LD_ADDR_VAR 0 9
18221: PUSH
18222: LD_INT 100
18224: PUSH
18225: LD_INT 50
18227: PUSH
18228: LD_INT 75
18230: PUSH
18231: EMPTY
18232: LIST
18233: LIST
18234: LIST
18235: ST_TO_ADDR
// if GetClass ( i ) = 15 then
18236: LD_VAR 0 6
18240: PPUSH
18241: CALL_OW 257
18245: PUSH
18246: LD_INT 15
18248: EQUAL
18249: IFFALSE 18270
// points := [ 10 , 5 , 3 ] ;
18251: LD_ADDR_VAR 0 9
18255: PUSH
18256: LD_INT 10
18258: PUSH
18259: LD_INT 5
18261: PUSH
18262: LD_INT 3
18264: PUSH
18265: EMPTY
18266: LIST
18267: LIST
18268: LIST
18269: ST_TO_ADDR
// if GetClass ( i ) = 14 then
18270: LD_VAR 0 6
18274: PPUSH
18275: CALL_OW 257
18279: PUSH
18280: LD_INT 14
18282: EQUAL
18283: IFFALSE 18304
// points := [ 10 , 0 , 0 ] ;
18285: LD_ADDR_VAR 0 9
18289: PUSH
18290: LD_INT 10
18292: PUSH
18293: LD_INT 0
18295: PUSH
18296: LD_INT 0
18298: PUSH
18299: EMPTY
18300: LIST
18301: LIST
18302: LIST
18303: ST_TO_ADDR
// if GetClass ( i ) = 11 then
18304: LD_VAR 0 6
18308: PPUSH
18309: CALL_OW 257
18313: PUSH
18314: LD_INT 11
18316: EQUAL
18317: IFFALSE 18338
// points := [ 30 , 10 , 5 ] ;
18319: LD_ADDR_VAR 0 9
18323: PUSH
18324: LD_INT 30
18326: PUSH
18327: LD_INT 10
18329: PUSH
18330: LD_INT 5
18332: PUSH
18333: EMPTY
18334: LIST
18335: LIST
18336: LIST
18337: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
18338: LD_VAR 0 1
18342: PPUSH
18343: LD_INT 5
18345: PPUSH
18346: CALL_OW 321
18350: PUSH
18351: LD_INT 2
18353: EQUAL
18354: IFFALSE 18371
// bpoints := bpoints * 1.8 ;
18356: LD_ADDR_VAR 0 10
18360: PUSH
18361: LD_VAR 0 10
18365: PUSH
18366: LD_REAL  1.80000000000000E+0000
18369: MUL
18370: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
18371: LD_VAR 0 6
18375: PPUSH
18376: CALL_OW 257
18380: PUSH
18381: LD_INT 1
18383: PUSH
18384: LD_INT 2
18386: PUSH
18387: LD_INT 3
18389: PUSH
18390: LD_INT 4
18392: PUSH
18393: EMPTY
18394: LIST
18395: LIST
18396: LIST
18397: LIST
18398: IN
18399: IFFALSE 18419
18401: PUSH
18402: LD_VAR 0 1
18406: PPUSH
18407: LD_INT 51
18409: PPUSH
18410: CALL_OW 321
18414: PUSH
18415: LD_INT 2
18417: EQUAL
18418: AND
18419: IFFALSE 18436
// bpoints := bpoints * 1.2 ;
18421: LD_ADDR_VAR 0 10
18425: PUSH
18426: LD_VAR 0 10
18430: PUSH
18431: LD_REAL  1.20000000000000E+0000
18434: MUL
18435: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
18436: LD_VAR 0 6
18440: PPUSH
18441: CALL_OW 257
18445: PUSH
18446: LD_INT 5
18448: PUSH
18449: LD_INT 7
18451: PUSH
18452: LD_INT 9
18454: PUSH
18455: EMPTY
18456: LIST
18457: LIST
18458: LIST
18459: IN
18460: IFFALSE 18480
18462: PUSH
18463: LD_VAR 0 1
18467: PPUSH
18468: LD_INT 52
18470: PPUSH
18471: CALL_OW 321
18475: PUSH
18476: LD_INT 2
18478: EQUAL
18479: AND
18480: IFFALSE 18497
// bpoints := bpoints * 1.5 ;
18482: LD_ADDR_VAR 0 10
18486: PUSH
18487: LD_VAR 0 10
18491: PUSH
18492: LD_REAL  1.50000000000000E+0000
18495: MUL
18496: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
18497: LD_VAR 0 1
18501: PPUSH
18502: LD_INT 66
18504: PPUSH
18505: CALL_OW 321
18509: PUSH
18510: LD_INT 2
18512: EQUAL
18513: IFFALSE 18530
// bpoints := bpoints * 1.1 ;
18515: LD_ADDR_VAR 0 10
18519: PUSH
18520: LD_VAR 0 10
18524: PUSH
18525: LD_REAL  1.10000000000000E+0000
18528: MUL
18529: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
18530: LD_ADDR_VAR 0 10
18534: PUSH
18535: LD_VAR 0 10
18539: PUSH
18540: LD_VAR 0 6
18544: PPUSH
18545: LD_INT 1
18547: PPUSH
18548: CALL_OW 259
18552: PUSH
18553: LD_REAL  1.15000000000000E+0000
18556: MUL
18557: MUL
18558: ST_TO_ADDR
// end ; unit_vehicle :
18559: GO 19389
18561: LD_INT 2
18563: DOUBLE
18564: EQUAL
18565: IFTRUE 18569
18567: GO 19377
18569: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
18570: LD_VAR 0 6
18574: PPUSH
18575: CALL_OW 264
18579: PUSH
18580: LD_INT 2
18582: PUSH
18583: LD_INT 42
18585: PUSH
18586: LD_INT 24
18588: PUSH
18589: EMPTY
18590: LIST
18591: LIST
18592: LIST
18593: IN
18594: IFFALSE 18615
// points := [ 25 , 5 , 3 ] ;
18596: LD_ADDR_VAR 0 9
18600: PUSH
18601: LD_INT 25
18603: PUSH
18604: LD_INT 5
18606: PUSH
18607: LD_INT 3
18609: PUSH
18610: EMPTY
18611: LIST
18612: LIST
18613: LIST
18614: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
18615: LD_VAR 0 6
18619: PPUSH
18620: CALL_OW 264
18624: PUSH
18625: LD_INT 4
18627: PUSH
18628: LD_INT 43
18630: PUSH
18631: LD_INT 25
18633: PUSH
18634: EMPTY
18635: LIST
18636: LIST
18637: LIST
18638: IN
18639: IFFALSE 18660
// points := [ 40 , 15 , 5 ] ;
18641: LD_ADDR_VAR 0 9
18645: PUSH
18646: LD_INT 40
18648: PUSH
18649: LD_INT 15
18651: PUSH
18652: LD_INT 5
18654: PUSH
18655: EMPTY
18656: LIST
18657: LIST
18658: LIST
18659: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
18660: LD_VAR 0 6
18664: PPUSH
18665: CALL_OW 264
18669: PUSH
18670: LD_INT 3
18672: PUSH
18673: LD_INT 23
18675: PUSH
18676: EMPTY
18677: LIST
18678: LIST
18679: IN
18680: IFFALSE 18701
// points := [ 7 , 25 , 8 ] ;
18682: LD_ADDR_VAR 0 9
18686: PUSH
18687: LD_INT 7
18689: PUSH
18690: LD_INT 25
18692: PUSH
18693: LD_INT 8
18695: PUSH
18696: EMPTY
18697: LIST
18698: LIST
18699: LIST
18700: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
18701: LD_VAR 0 6
18705: PPUSH
18706: CALL_OW 264
18710: PUSH
18711: LD_INT 5
18713: PUSH
18714: LD_INT 27
18716: PUSH
18717: LD_INT 44
18719: PUSH
18720: EMPTY
18721: LIST
18722: LIST
18723: LIST
18724: IN
18725: IFFALSE 18746
// points := [ 14 , 50 , 16 ] ;
18727: LD_ADDR_VAR 0 9
18731: PUSH
18732: LD_INT 14
18734: PUSH
18735: LD_INT 50
18737: PUSH
18738: LD_INT 16
18740: PUSH
18741: EMPTY
18742: LIST
18743: LIST
18744: LIST
18745: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
18746: LD_VAR 0 6
18750: PPUSH
18751: CALL_OW 264
18755: PUSH
18756: LD_INT 6
18758: PUSH
18759: LD_INT 46
18761: PUSH
18762: EMPTY
18763: LIST
18764: LIST
18765: IN
18766: IFFALSE 18787
// points := [ 32 , 120 , 70 ] ;
18768: LD_ADDR_VAR 0 9
18772: PUSH
18773: LD_INT 32
18775: PUSH
18776: LD_INT 120
18778: PUSH
18779: LD_INT 70
18781: PUSH
18782: EMPTY
18783: LIST
18784: LIST
18785: LIST
18786: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
18787: LD_VAR 0 6
18791: PPUSH
18792: CALL_OW 264
18796: PUSH
18797: LD_INT 7
18799: PUSH
18800: LD_INT 28
18802: PUSH
18803: LD_INT 45
18805: PUSH
18806: LD_INT 92
18808: PUSH
18809: EMPTY
18810: LIST
18811: LIST
18812: LIST
18813: LIST
18814: IN
18815: IFFALSE 18836
// points := [ 35 , 20 , 45 ] ;
18817: LD_ADDR_VAR 0 9
18821: PUSH
18822: LD_INT 35
18824: PUSH
18825: LD_INT 20
18827: PUSH
18828: LD_INT 45
18830: PUSH
18831: EMPTY
18832: LIST
18833: LIST
18834: LIST
18835: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
18836: LD_VAR 0 6
18840: PPUSH
18841: CALL_OW 264
18845: PUSH
18846: LD_INT 47
18848: PUSH
18849: EMPTY
18850: LIST
18851: IN
18852: IFFALSE 18873
// points := [ 67 , 45 , 75 ] ;
18854: LD_ADDR_VAR 0 9
18858: PUSH
18859: LD_INT 67
18861: PUSH
18862: LD_INT 45
18864: PUSH
18865: LD_INT 75
18867: PUSH
18868: EMPTY
18869: LIST
18870: LIST
18871: LIST
18872: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
18873: LD_VAR 0 6
18877: PPUSH
18878: CALL_OW 264
18882: PUSH
18883: LD_INT 26
18885: PUSH
18886: EMPTY
18887: LIST
18888: IN
18889: IFFALSE 18910
// points := [ 120 , 30 , 80 ] ;
18891: LD_ADDR_VAR 0 9
18895: PUSH
18896: LD_INT 120
18898: PUSH
18899: LD_INT 30
18901: PUSH
18902: LD_INT 80
18904: PUSH
18905: EMPTY
18906: LIST
18907: LIST
18908: LIST
18909: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
18910: LD_VAR 0 6
18914: PPUSH
18915: CALL_OW 264
18919: PUSH
18920: LD_INT 22
18922: PUSH
18923: EMPTY
18924: LIST
18925: IN
18926: IFFALSE 18947
// points := [ 40 , 1 , 1 ] ;
18928: LD_ADDR_VAR 0 9
18932: PUSH
18933: LD_INT 40
18935: PUSH
18936: LD_INT 1
18938: PUSH
18939: LD_INT 1
18941: PUSH
18942: EMPTY
18943: LIST
18944: LIST
18945: LIST
18946: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
18947: LD_VAR 0 6
18951: PPUSH
18952: CALL_OW 264
18956: PUSH
18957: LD_INT 29
18959: PUSH
18960: EMPTY
18961: LIST
18962: IN
18963: IFFALSE 18984
// points := [ 70 , 200 , 400 ] ;
18965: LD_ADDR_VAR 0 9
18969: PUSH
18970: LD_INT 70
18972: PUSH
18973: LD_INT 200
18975: PUSH
18976: LD_INT 400
18978: PUSH
18979: EMPTY
18980: LIST
18981: LIST
18982: LIST
18983: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
18984: LD_VAR 0 6
18988: PPUSH
18989: CALL_OW 264
18993: PUSH
18994: LD_INT 14
18996: PUSH
18997: LD_INT 53
18999: PUSH
19000: EMPTY
19001: LIST
19002: LIST
19003: IN
19004: IFFALSE 19025
// points := [ 40 , 10 , 20 ] ;
19006: LD_ADDR_VAR 0 9
19010: PUSH
19011: LD_INT 40
19013: PUSH
19014: LD_INT 10
19016: PUSH
19017: LD_INT 20
19019: PUSH
19020: EMPTY
19021: LIST
19022: LIST
19023: LIST
19024: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
19025: LD_VAR 0 6
19029: PPUSH
19030: CALL_OW 264
19034: PUSH
19035: LD_INT 9
19037: PUSH
19038: EMPTY
19039: LIST
19040: IN
19041: IFFALSE 19062
// points := [ 5 , 70 , 20 ] ;
19043: LD_ADDR_VAR 0 9
19047: PUSH
19048: LD_INT 5
19050: PUSH
19051: LD_INT 70
19053: PUSH
19054: LD_INT 20
19056: PUSH
19057: EMPTY
19058: LIST
19059: LIST
19060: LIST
19061: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
19062: LD_VAR 0 6
19066: PPUSH
19067: CALL_OW 264
19071: PUSH
19072: LD_INT 10
19074: PUSH
19075: EMPTY
19076: LIST
19077: IN
19078: IFFALSE 19099
// points := [ 35 , 110 , 70 ] ;
19080: LD_ADDR_VAR 0 9
19084: PUSH
19085: LD_INT 35
19087: PUSH
19088: LD_INT 110
19090: PUSH
19091: LD_INT 70
19093: PUSH
19094: EMPTY
19095: LIST
19096: LIST
19097: LIST
19098: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
19099: LD_VAR 0 6
19103: PPUSH
19104: CALL_OW 265
19108: PUSH
19109: LD_INT 25
19111: EQUAL
19112: IFFALSE 19133
// points := [ 80 , 65 , 100 ] ;
19114: LD_ADDR_VAR 0 9
19118: PUSH
19119: LD_INT 80
19121: PUSH
19122: LD_INT 65
19124: PUSH
19125: LD_INT 100
19127: PUSH
19128: EMPTY
19129: LIST
19130: LIST
19131: LIST
19132: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
19133: LD_VAR 0 6
19137: PPUSH
19138: CALL_OW 263
19142: PUSH
19143: LD_INT 1
19145: EQUAL
19146: IFFALSE 19181
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
19148: LD_ADDR_VAR 0 10
19152: PUSH
19153: LD_VAR 0 10
19157: PUSH
19158: LD_VAR 0 6
19162: PPUSH
19163: CALL_OW 311
19167: PPUSH
19168: LD_INT 3
19170: PPUSH
19171: CALL_OW 259
19175: PUSH
19176: LD_INT 4
19178: MUL
19179: MUL
19180: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
19181: LD_VAR 0 6
19185: PPUSH
19186: CALL_OW 263
19190: PUSH
19191: LD_INT 2
19193: EQUAL
19194: IFFALSE 19245
// begin j := IsControledBy ( i ) ;
19196: LD_ADDR_VAR 0 7
19200: PUSH
19201: LD_VAR 0 6
19205: PPUSH
19206: CALL_OW 312
19210: ST_TO_ADDR
// if j then
19211: LD_VAR 0 7
19215: IFFALSE 19245
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
19217: LD_ADDR_VAR 0 10
19221: PUSH
19222: LD_VAR 0 10
19226: PUSH
19227: LD_VAR 0 7
19231: PPUSH
19232: LD_INT 3
19234: PPUSH
19235: CALL_OW 259
19239: PUSH
19240: LD_INT 3
19242: MUL
19243: MUL
19244: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
19245: LD_VAR 0 6
19249: PPUSH
19250: CALL_OW 264
19254: PUSH
19255: LD_INT 5
19257: PUSH
19258: LD_INT 6
19260: PUSH
19261: LD_INT 46
19263: PUSH
19264: LD_INT 44
19266: PUSH
19267: LD_INT 47
19269: PUSH
19270: LD_INT 45
19272: PUSH
19273: LD_INT 28
19275: PUSH
19276: LD_INT 7
19278: PUSH
19279: LD_INT 27
19281: PUSH
19282: LD_INT 29
19284: PUSH
19285: EMPTY
19286: LIST
19287: LIST
19288: LIST
19289: LIST
19290: LIST
19291: LIST
19292: LIST
19293: LIST
19294: LIST
19295: LIST
19296: IN
19297: IFFALSE 19317
19299: PUSH
19300: LD_VAR 0 1
19304: PPUSH
19305: LD_INT 52
19307: PPUSH
19308: CALL_OW 321
19312: PUSH
19313: LD_INT 2
19315: EQUAL
19316: AND
19317: IFFALSE 19334
// bpoints := bpoints * 1.2 ;
19319: LD_ADDR_VAR 0 10
19323: PUSH
19324: LD_VAR 0 10
19328: PUSH
19329: LD_REAL  1.20000000000000E+0000
19332: MUL
19333: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
19334: LD_VAR 0 6
19338: PPUSH
19339: CALL_OW 264
19343: PUSH
19344: LD_INT 6
19346: PUSH
19347: LD_INT 46
19349: PUSH
19350: LD_INT 47
19352: PUSH
19353: EMPTY
19354: LIST
19355: LIST
19356: LIST
19357: IN
19358: IFFALSE 19375
// bpoints := bpoints * 1.2 ;
19360: LD_ADDR_VAR 0 10
19364: PUSH
19365: LD_VAR 0 10
19369: PUSH
19370: LD_REAL  1.20000000000000E+0000
19373: MUL
19374: ST_TO_ADDR
// end ; unit_building :
19375: GO 19389
19377: LD_INT 3
19379: DOUBLE
19380: EQUAL
19381: IFTRUE 19385
19383: GO 19388
19385: POP
// ; end ;
19386: GO 19389
19388: POP
// for j = 1 to 3 do
19389: LD_ADDR_VAR 0 7
19393: PUSH
19394: DOUBLE
19395: LD_INT 1
19397: DEC
19398: ST_TO_ADDR
19399: LD_INT 3
19401: PUSH
19402: FOR_TO
19403: IFFALSE 19456
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
19405: LD_ADDR_VAR 0 5
19409: PUSH
19410: LD_VAR 0 5
19414: PPUSH
19415: LD_VAR 0 7
19419: PPUSH
19420: LD_VAR 0 5
19424: PUSH
19425: LD_VAR 0 7
19429: ARRAY
19430: PUSH
19431: LD_VAR 0 9
19435: PUSH
19436: LD_VAR 0 7
19440: ARRAY
19441: PUSH
19442: LD_VAR 0 10
19446: MUL
19447: PLUS
19448: PPUSH
19449: CALL_OW 1
19453: ST_TO_ADDR
19454: GO 19402
19456: POP
19457: POP
// end ;
19458: GO 17931
19460: POP
19461: POP
// result := Replace ( result , 4 , tmp ) ;
19462: LD_ADDR_VAR 0 5
19466: PUSH
19467: LD_VAR 0 5
19471: PPUSH
19472: LD_INT 4
19474: PPUSH
19475: LD_VAR 0 8
19479: PPUSH
19480: CALL_OW 1
19484: ST_TO_ADDR
// end ;
19485: LD_VAR 0 5
19489: RET
// export function DangerAtRange ( unit , range ) ; begin
19490: LD_INT 0
19492: PPUSH
// if not unit then
19493: LD_VAR 0 1
19497: NOT
19498: IFFALSE 19502
// exit ;
19500: GO 19547
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
19502: LD_ADDR_VAR 0 3
19506: PUSH
19507: LD_VAR 0 1
19511: PPUSH
19512: CALL_OW 255
19516: PPUSH
19517: LD_VAR 0 1
19521: PPUSH
19522: CALL_OW 250
19526: PPUSH
19527: LD_VAR 0 1
19531: PPUSH
19532: CALL_OW 251
19536: PPUSH
19537: LD_VAR 0 2
19541: PPUSH
19542: CALL 17781 0 4
19546: ST_TO_ADDR
// end ;
19547: LD_VAR 0 3
19551: RET
// export function DangerInArea ( side , area ) ; begin
19552: LD_INT 0
19554: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
19555: LD_ADDR_VAR 0 3
19559: PUSH
19560: LD_VAR 0 2
19564: PPUSH
19565: LD_INT 81
19567: PUSH
19568: LD_VAR 0 1
19572: PUSH
19573: EMPTY
19574: LIST
19575: LIST
19576: PPUSH
19577: CALL_OW 70
19581: ST_TO_ADDR
// end ;
19582: LD_VAR 0 3
19586: RET
// export function IsExtension ( b ) ; begin
19587: LD_INT 0
19589: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
19590: LD_ADDR_VAR 0 2
19594: PUSH
19595: LD_VAR 0 1
19599: PUSH
19600: LD_INT 23
19602: PUSH
19603: LD_INT 20
19605: PUSH
19606: LD_INT 22
19608: PUSH
19609: LD_INT 17
19611: PUSH
19612: LD_INT 24
19614: PUSH
19615: LD_INT 21
19617: PUSH
19618: LD_INT 19
19620: PUSH
19621: LD_INT 16
19623: PUSH
19624: LD_INT 25
19626: PUSH
19627: LD_INT 18
19629: PUSH
19630: EMPTY
19631: LIST
19632: LIST
19633: LIST
19634: LIST
19635: LIST
19636: LIST
19637: LIST
19638: LIST
19639: LIST
19640: LIST
19641: IN
19642: ST_TO_ADDR
// end ;
19643: LD_VAR 0 2
19647: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
19648: LD_INT 0
19650: PPUSH
19651: PPUSH
19652: PPUSH
// result := [ ] ;
19653: LD_ADDR_VAR 0 4
19657: PUSH
19658: EMPTY
19659: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
19660: LD_ADDR_VAR 0 5
19664: PUSH
19665: LD_VAR 0 2
19669: PPUSH
19670: LD_INT 21
19672: PUSH
19673: LD_INT 3
19675: PUSH
19676: EMPTY
19677: LIST
19678: LIST
19679: PPUSH
19680: CALL_OW 70
19684: ST_TO_ADDR
// if not tmp then
19685: LD_VAR 0 5
19689: NOT
19690: IFFALSE 19694
// exit ;
19692: GO 19758
// if checkLink then
19694: LD_VAR 0 3
19698: IFFALSE 19748
// begin for i in tmp do
19700: LD_ADDR_VAR 0 6
19704: PUSH
19705: LD_VAR 0 5
19709: PUSH
19710: FOR_IN
19711: IFFALSE 19746
// if GetBase ( i ) <> base then
19713: LD_VAR 0 6
19717: PPUSH
19718: CALL_OW 274
19722: PUSH
19723: LD_VAR 0 1
19727: NONEQUAL
19728: IFFALSE 19744
// ComLinkToBase ( base , i ) ;
19730: LD_VAR 0 1
19734: PPUSH
19735: LD_VAR 0 6
19739: PPUSH
19740: CALL_OW 169
19744: GO 19710
19746: POP
19747: POP
// end ; result := tmp ;
19748: LD_ADDR_VAR 0 4
19752: PUSH
19753: LD_VAR 0 5
19757: ST_TO_ADDR
// end ;
19758: LD_VAR 0 4
19762: RET
// export function ComComplete ( units , b ) ; var i ; begin
19763: LD_INT 0
19765: PPUSH
19766: PPUSH
// if not units then
19767: LD_VAR 0 1
19771: NOT
19772: IFFALSE 19776
// exit ;
19774: GO 19866
// for i in units do
19776: LD_ADDR_VAR 0 4
19780: PUSH
19781: LD_VAR 0 1
19785: PUSH
19786: FOR_IN
19787: IFFALSE 19864
// if BuildingStatus ( b ) = bs_build then
19789: LD_VAR 0 2
19793: PPUSH
19794: CALL_OW 461
19798: PUSH
19799: LD_INT 1
19801: EQUAL
19802: IFFALSE 19862
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
19804: LD_VAR 0 4
19808: PPUSH
19809: LD_STRING h
19811: PUSH
19812: LD_VAR 0 2
19816: PPUSH
19817: CALL_OW 250
19821: PUSH
19822: LD_VAR 0 2
19826: PPUSH
19827: CALL_OW 251
19831: PUSH
19832: LD_VAR 0 2
19836: PUSH
19837: LD_INT 0
19839: PUSH
19840: LD_INT 0
19842: PUSH
19843: LD_INT 0
19845: PUSH
19846: EMPTY
19847: LIST
19848: LIST
19849: LIST
19850: LIST
19851: LIST
19852: LIST
19853: LIST
19854: PUSH
19855: EMPTY
19856: LIST
19857: PPUSH
19858: CALL_OW 446
19862: GO 19786
19864: POP
19865: POP
// end ;
19866: LD_VAR 0 3
19870: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
19871: LD_INT 0
19873: PPUSH
19874: PPUSH
19875: PPUSH
19876: PPUSH
19877: PPUSH
19878: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
19879: LD_VAR 0 1
19883: NOT
19884: IFTRUE 19901
19886: PUSH
19887: LD_VAR 0 1
19891: PPUSH
19892: CALL_OW 263
19896: PUSH
19897: LD_INT 2
19899: NONEQUAL
19900: OR
19901: IFFALSE 19905
// exit ;
19903: GO 20221
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
19905: LD_ADDR_VAR 0 6
19909: PUSH
19910: LD_INT 22
19912: PUSH
19913: LD_VAR 0 1
19917: PPUSH
19918: CALL_OW 255
19922: PUSH
19923: EMPTY
19924: LIST
19925: LIST
19926: PUSH
19927: LD_INT 2
19929: PUSH
19930: LD_INT 30
19932: PUSH
19933: LD_INT 36
19935: PUSH
19936: EMPTY
19937: LIST
19938: LIST
19939: PUSH
19940: LD_INT 34
19942: PUSH
19943: LD_INT 31
19945: PUSH
19946: EMPTY
19947: LIST
19948: LIST
19949: PUSH
19950: EMPTY
19951: LIST
19952: LIST
19953: LIST
19954: PUSH
19955: EMPTY
19956: LIST
19957: LIST
19958: PPUSH
19959: CALL_OW 69
19963: ST_TO_ADDR
// if not tmp then
19964: LD_VAR 0 6
19968: NOT
19969: IFFALSE 19973
// exit ;
19971: GO 20221
// result := [ ] ;
19973: LD_ADDR_VAR 0 2
19977: PUSH
19978: EMPTY
19979: ST_TO_ADDR
// for i in tmp do
19980: LD_ADDR_VAR 0 3
19984: PUSH
19985: LD_VAR 0 6
19989: PUSH
19990: FOR_IN
19991: IFFALSE 20062
// begin t := UnitsInside ( i ) ;
19993: LD_ADDR_VAR 0 4
19997: PUSH
19998: LD_VAR 0 3
20002: PPUSH
20003: CALL_OW 313
20007: ST_TO_ADDR
// if t then
20008: LD_VAR 0 4
20012: IFFALSE 20060
// for j in t do
20014: LD_ADDR_VAR 0 7
20018: PUSH
20019: LD_VAR 0 4
20023: PUSH
20024: FOR_IN
20025: IFFALSE 20058
// result := Replace ( result , result + 1 , j ) ;
20027: LD_ADDR_VAR 0 2
20031: PUSH
20032: LD_VAR 0 2
20036: PPUSH
20037: LD_VAR 0 2
20041: PUSH
20042: LD_INT 1
20044: PLUS
20045: PPUSH
20046: LD_VAR 0 7
20050: PPUSH
20051: CALL_OW 1
20055: ST_TO_ADDR
20056: GO 20024
20058: POP
20059: POP
// end ;
20060: GO 19990
20062: POP
20063: POP
// if not result then
20064: LD_VAR 0 2
20068: NOT
20069: IFFALSE 20073
// exit ;
20071: GO 20221
// mech := result [ 1 ] ;
20073: LD_ADDR_VAR 0 5
20077: PUSH
20078: LD_VAR 0 2
20082: PUSH
20083: LD_INT 1
20085: ARRAY
20086: ST_TO_ADDR
// if result > 1 then
20087: LD_VAR 0 2
20091: PUSH
20092: LD_INT 1
20094: GREATER
20095: IFFALSE 20207
// begin for i = 2 to result do
20097: LD_ADDR_VAR 0 3
20101: PUSH
20102: DOUBLE
20103: LD_INT 2
20105: DEC
20106: ST_TO_ADDR
20107: LD_VAR 0 2
20111: PUSH
20112: FOR_TO
20113: IFFALSE 20205
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
20115: LD_ADDR_VAR 0 4
20119: PUSH
20120: LD_VAR 0 2
20124: PUSH
20125: LD_VAR 0 3
20129: ARRAY
20130: PPUSH
20131: LD_INT 3
20133: PPUSH
20134: CALL_OW 259
20138: PUSH
20139: LD_VAR 0 2
20143: PUSH
20144: LD_VAR 0 3
20148: ARRAY
20149: PPUSH
20150: CALL_OW 432
20154: MINUS
20155: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
20156: LD_VAR 0 4
20160: PUSH
20161: LD_VAR 0 5
20165: PPUSH
20166: LD_INT 3
20168: PPUSH
20169: CALL_OW 259
20173: PUSH
20174: LD_VAR 0 5
20178: PPUSH
20179: CALL_OW 432
20183: MINUS
20184: GREATEREQUAL
20185: IFFALSE 20203
// mech := result [ i ] ;
20187: LD_ADDR_VAR 0 5
20191: PUSH
20192: LD_VAR 0 2
20196: PUSH
20197: LD_VAR 0 3
20201: ARRAY
20202: ST_TO_ADDR
// end ;
20203: GO 20112
20205: POP
20206: POP
// end ; ComLinkTo ( vehicle , mech ) ;
20207: LD_VAR 0 1
20211: PPUSH
20212: LD_VAR 0 5
20216: PPUSH
20217: CALL_OW 135
// end ;
20221: LD_VAR 0 2
20225: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
20226: LD_INT 0
20228: PPUSH
20229: PPUSH
20230: PPUSH
20231: PPUSH
20232: PPUSH
20233: PPUSH
20234: PPUSH
20235: PPUSH
20236: PPUSH
20237: PPUSH
20238: PPUSH
20239: PPUSH
20240: PPUSH
// result := [ ] ;
20241: LD_ADDR_VAR 0 7
20245: PUSH
20246: EMPTY
20247: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
20248: LD_VAR 0 1
20252: PPUSH
20253: CALL_OW 266
20257: PUSH
20258: LD_INT 0
20260: PUSH
20261: LD_INT 1
20263: PUSH
20264: EMPTY
20265: LIST
20266: LIST
20267: IN
20268: NOT
20269: IFFALSE 20273
// exit ;
20271: GO 21913
// if name then
20273: LD_VAR 0 3
20277: IFFALSE 20293
// SetBName ( base_dep , name ) ;
20279: LD_VAR 0 1
20283: PPUSH
20284: LD_VAR 0 3
20288: PPUSH
20289: CALL_OW 500
// base := GetBase ( base_dep ) ;
20293: LD_ADDR_VAR 0 15
20297: PUSH
20298: LD_VAR 0 1
20302: PPUSH
20303: CALL_OW 274
20307: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
20308: LD_ADDR_VAR 0 16
20312: PUSH
20313: LD_VAR 0 1
20317: PPUSH
20318: CALL_OW 255
20322: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
20323: LD_ADDR_VAR 0 17
20327: PUSH
20328: LD_VAR 0 1
20332: PPUSH
20333: CALL_OW 248
20337: ST_TO_ADDR
// if sources then
20338: LD_VAR 0 5
20342: IFFALSE 20389
// for i = 1 to 3 do
20344: LD_ADDR_VAR 0 8
20348: PUSH
20349: DOUBLE
20350: LD_INT 1
20352: DEC
20353: ST_TO_ADDR
20354: LD_INT 3
20356: PUSH
20357: FOR_TO
20358: IFFALSE 20387
// AddResourceType ( base , i , sources [ i ] ) ;
20360: LD_VAR 0 15
20364: PPUSH
20365: LD_VAR 0 8
20369: PPUSH
20370: LD_VAR 0 5
20374: PUSH
20375: LD_VAR 0 8
20379: ARRAY
20380: PPUSH
20381: CALL_OW 276
20385: GO 20357
20387: POP
20388: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
20389: LD_ADDR_VAR 0 18
20393: PUSH
20394: LD_VAR 0 15
20398: PPUSH
20399: LD_VAR 0 2
20403: PPUSH
20404: LD_INT 1
20406: PPUSH
20407: CALL 19648 0 3
20411: ST_TO_ADDR
// InitHc ;
20412: CALL_OW 19
// InitUc ;
20416: CALL_OW 18
// uc_side := side ;
20420: LD_ADDR_OWVAR 20
20424: PUSH
20425: LD_VAR 0 16
20429: ST_TO_ADDR
// uc_nation := nation ;
20430: LD_ADDR_OWVAR 21
20434: PUSH
20435: LD_VAR 0 17
20439: ST_TO_ADDR
// if buildings then
20440: LD_VAR 0 18
20444: IFFALSE 21772
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
20446: LD_ADDR_VAR 0 19
20450: PUSH
20451: LD_VAR 0 18
20455: PPUSH
20456: LD_INT 2
20458: PUSH
20459: LD_INT 30
20461: PUSH
20462: LD_INT 29
20464: PUSH
20465: EMPTY
20466: LIST
20467: LIST
20468: PUSH
20469: LD_INT 30
20471: PUSH
20472: LD_INT 30
20474: PUSH
20475: EMPTY
20476: LIST
20477: LIST
20478: PUSH
20479: EMPTY
20480: LIST
20481: LIST
20482: LIST
20483: PPUSH
20484: CALL_OW 72
20488: ST_TO_ADDR
// if tmp then
20489: LD_VAR 0 19
20493: IFFALSE 20541
// for i in tmp do
20495: LD_ADDR_VAR 0 8
20499: PUSH
20500: LD_VAR 0 19
20504: PUSH
20505: FOR_IN
20506: IFFALSE 20539
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
20508: LD_VAR 0 8
20512: PPUSH
20513: CALL_OW 250
20517: PPUSH
20518: LD_VAR 0 8
20522: PPUSH
20523: CALL_OW 251
20527: PPUSH
20528: LD_VAR 0 16
20532: PPUSH
20533: CALL_OW 441
20537: GO 20505
20539: POP
20540: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
20541: LD_VAR 0 18
20545: PPUSH
20546: LD_INT 2
20548: PUSH
20549: LD_INT 30
20551: PUSH
20552: LD_INT 32
20554: PUSH
20555: EMPTY
20556: LIST
20557: LIST
20558: PUSH
20559: LD_INT 30
20561: PUSH
20562: LD_INT 33
20564: PUSH
20565: EMPTY
20566: LIST
20567: LIST
20568: PUSH
20569: EMPTY
20570: LIST
20571: LIST
20572: LIST
20573: PPUSH
20574: CALL_OW 72
20578: IFFALSE 20666
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
20580: LD_ADDR_VAR 0 8
20584: PUSH
20585: LD_VAR 0 18
20589: PPUSH
20590: LD_INT 2
20592: PUSH
20593: LD_INT 30
20595: PUSH
20596: LD_INT 32
20598: PUSH
20599: EMPTY
20600: LIST
20601: LIST
20602: PUSH
20603: LD_INT 30
20605: PUSH
20606: LD_INT 33
20608: PUSH
20609: EMPTY
20610: LIST
20611: LIST
20612: PUSH
20613: EMPTY
20614: LIST
20615: LIST
20616: LIST
20617: PPUSH
20618: CALL_OW 72
20622: PUSH
20623: FOR_IN
20624: IFFALSE 20664
// begin if not GetBWeapon ( i ) then
20626: LD_VAR 0 8
20630: PPUSH
20631: CALL_OW 269
20635: NOT
20636: IFFALSE 20662
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
20638: LD_VAR 0 8
20642: PPUSH
20643: LD_VAR 0 8
20647: PPUSH
20648: LD_VAR 0 2
20652: PPUSH
20653: CALL 21918 0 2
20657: PPUSH
20658: CALL_OW 431
// end ;
20662: GO 20623
20664: POP
20665: POP
// end ; for i = 1 to personel do
20666: LD_ADDR_VAR 0 8
20670: PUSH
20671: DOUBLE
20672: LD_INT 1
20674: DEC
20675: ST_TO_ADDR
20676: LD_VAR 0 6
20680: PUSH
20681: FOR_TO
20682: IFFALSE 21752
// begin if i > 4 then
20684: LD_VAR 0 8
20688: PUSH
20689: LD_INT 4
20691: GREATER
20692: IFFALSE 20696
// break ;
20694: GO 21752
// case i of 1 :
20696: LD_VAR 0 8
20700: PUSH
20701: LD_INT 1
20703: DOUBLE
20704: EQUAL
20705: IFTRUE 20709
20707: GO 20789
20709: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
20710: LD_ADDR_VAR 0 12
20714: PUSH
20715: LD_VAR 0 18
20719: PPUSH
20720: LD_INT 22
20722: PUSH
20723: LD_VAR 0 16
20727: PUSH
20728: EMPTY
20729: LIST
20730: LIST
20731: PUSH
20732: LD_INT 58
20734: PUSH
20735: EMPTY
20736: LIST
20737: PUSH
20738: LD_INT 2
20740: PUSH
20741: LD_INT 30
20743: PUSH
20744: LD_INT 32
20746: PUSH
20747: EMPTY
20748: LIST
20749: LIST
20750: PUSH
20751: LD_INT 30
20753: PUSH
20754: LD_INT 4
20756: PUSH
20757: EMPTY
20758: LIST
20759: LIST
20760: PUSH
20761: LD_INT 30
20763: PUSH
20764: LD_INT 5
20766: PUSH
20767: EMPTY
20768: LIST
20769: LIST
20770: PUSH
20771: EMPTY
20772: LIST
20773: LIST
20774: LIST
20775: LIST
20776: PUSH
20777: EMPTY
20778: LIST
20779: LIST
20780: LIST
20781: PPUSH
20782: CALL_OW 72
20786: ST_TO_ADDR
20787: GO 21011
20789: LD_INT 2
20791: DOUBLE
20792: EQUAL
20793: IFTRUE 20797
20795: GO 20859
20797: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
20798: LD_ADDR_VAR 0 12
20802: PUSH
20803: LD_VAR 0 18
20807: PPUSH
20808: LD_INT 22
20810: PUSH
20811: LD_VAR 0 16
20815: PUSH
20816: EMPTY
20817: LIST
20818: LIST
20819: PUSH
20820: LD_INT 2
20822: PUSH
20823: LD_INT 30
20825: PUSH
20826: LD_INT 0
20828: PUSH
20829: EMPTY
20830: LIST
20831: LIST
20832: PUSH
20833: LD_INT 30
20835: PUSH
20836: LD_INT 1
20838: PUSH
20839: EMPTY
20840: LIST
20841: LIST
20842: PUSH
20843: EMPTY
20844: LIST
20845: LIST
20846: LIST
20847: PUSH
20848: EMPTY
20849: LIST
20850: LIST
20851: PPUSH
20852: CALL_OW 72
20856: ST_TO_ADDR
20857: GO 21011
20859: LD_INT 3
20861: DOUBLE
20862: EQUAL
20863: IFTRUE 20867
20865: GO 20929
20867: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
20868: LD_ADDR_VAR 0 12
20872: PUSH
20873: LD_VAR 0 18
20877: PPUSH
20878: LD_INT 22
20880: PUSH
20881: LD_VAR 0 16
20885: PUSH
20886: EMPTY
20887: LIST
20888: LIST
20889: PUSH
20890: LD_INT 2
20892: PUSH
20893: LD_INT 30
20895: PUSH
20896: LD_INT 2
20898: PUSH
20899: EMPTY
20900: LIST
20901: LIST
20902: PUSH
20903: LD_INT 30
20905: PUSH
20906: LD_INT 3
20908: PUSH
20909: EMPTY
20910: LIST
20911: LIST
20912: PUSH
20913: EMPTY
20914: LIST
20915: LIST
20916: LIST
20917: PUSH
20918: EMPTY
20919: LIST
20920: LIST
20921: PPUSH
20922: CALL_OW 72
20926: ST_TO_ADDR
20927: GO 21011
20929: LD_INT 4
20931: DOUBLE
20932: EQUAL
20933: IFTRUE 20937
20935: GO 21010
20937: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
20938: LD_ADDR_VAR 0 12
20942: PUSH
20943: LD_VAR 0 18
20947: PPUSH
20948: LD_INT 22
20950: PUSH
20951: LD_VAR 0 16
20955: PUSH
20956: EMPTY
20957: LIST
20958: LIST
20959: PUSH
20960: LD_INT 2
20962: PUSH
20963: LD_INT 30
20965: PUSH
20966: LD_INT 6
20968: PUSH
20969: EMPTY
20970: LIST
20971: LIST
20972: PUSH
20973: LD_INT 30
20975: PUSH
20976: LD_INT 7
20978: PUSH
20979: EMPTY
20980: LIST
20981: LIST
20982: PUSH
20983: LD_INT 30
20985: PUSH
20986: LD_INT 8
20988: PUSH
20989: EMPTY
20990: LIST
20991: LIST
20992: PUSH
20993: EMPTY
20994: LIST
20995: LIST
20996: LIST
20997: LIST
20998: PUSH
20999: EMPTY
21000: LIST
21001: LIST
21002: PPUSH
21003: CALL_OW 72
21007: ST_TO_ADDR
21008: GO 21011
21010: POP
// if i = 1 then
21011: LD_VAR 0 8
21015: PUSH
21016: LD_INT 1
21018: EQUAL
21019: IFFALSE 21130
// begin tmp := [ ] ;
21021: LD_ADDR_VAR 0 19
21025: PUSH
21026: EMPTY
21027: ST_TO_ADDR
// for j in f do
21028: LD_ADDR_VAR 0 9
21032: PUSH
21033: LD_VAR 0 12
21037: PUSH
21038: FOR_IN
21039: IFFALSE 21112
// if GetBType ( j ) = b_bunker then
21041: LD_VAR 0 9
21045: PPUSH
21046: CALL_OW 266
21050: PUSH
21051: LD_INT 32
21053: EQUAL
21054: IFFALSE 21081
// tmp := Insert ( tmp , 1 , j ) else
21056: LD_ADDR_VAR 0 19
21060: PUSH
21061: LD_VAR 0 19
21065: PPUSH
21066: LD_INT 1
21068: PPUSH
21069: LD_VAR 0 9
21073: PPUSH
21074: CALL_OW 2
21078: ST_TO_ADDR
21079: GO 21110
// tmp := Insert ( tmp , tmp + 1 , j ) ;
21081: LD_ADDR_VAR 0 19
21085: PUSH
21086: LD_VAR 0 19
21090: PPUSH
21091: LD_VAR 0 19
21095: PUSH
21096: LD_INT 1
21098: PLUS
21099: PPUSH
21100: LD_VAR 0 9
21104: PPUSH
21105: CALL_OW 2
21109: ST_TO_ADDR
21110: GO 21038
21112: POP
21113: POP
// if tmp then
21114: LD_VAR 0 19
21118: IFFALSE 21130
// f := tmp ;
21120: LD_ADDR_VAR 0 12
21124: PUSH
21125: LD_VAR 0 19
21129: ST_TO_ADDR
// end ; x := personel [ i ] ;
21130: LD_ADDR_VAR 0 13
21134: PUSH
21135: LD_VAR 0 6
21139: PUSH
21140: LD_VAR 0 8
21144: ARRAY
21145: ST_TO_ADDR
// if x = - 1 then
21146: LD_VAR 0 13
21150: PUSH
21151: LD_INT 1
21153: NEG
21154: EQUAL
21155: IFFALSE 21366
// begin for j in f do
21157: LD_ADDR_VAR 0 9
21161: PUSH
21162: LD_VAR 0 12
21166: PUSH
21167: FOR_IN
21168: IFFALSE 21362
// repeat InitHc ;
21170: CALL_OW 19
// if GetBType ( j ) = b_barracks then
21174: LD_VAR 0 9
21178: PPUSH
21179: CALL_OW 266
21183: PUSH
21184: LD_INT 5
21186: EQUAL
21187: IFFALSE 21257
// begin if UnitsInside ( j ) < 3 then
21189: LD_VAR 0 9
21193: PPUSH
21194: CALL_OW 313
21198: PUSH
21199: LD_INT 3
21201: LESS
21202: IFFALSE 21238
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
21204: LD_INT 0
21206: PPUSH
21207: LD_INT 5
21209: PUSH
21210: LD_INT 8
21212: PUSH
21213: LD_INT 9
21215: PUSH
21216: EMPTY
21217: LIST
21218: LIST
21219: LIST
21220: PUSH
21221: LD_VAR 0 17
21225: ARRAY
21226: PPUSH
21227: LD_VAR 0 4
21231: PPUSH
21232: CALL_OW 380
21236: GO 21255
// PrepareHuman ( false , i , skill ) ;
21238: LD_INT 0
21240: PPUSH
21241: LD_VAR 0 8
21245: PPUSH
21246: LD_VAR 0 4
21250: PPUSH
21251: CALL_OW 380
// end else
21255: GO 21274
// PrepareHuman ( false , i , skill ) ;
21257: LD_INT 0
21259: PPUSH
21260: LD_VAR 0 8
21264: PPUSH
21265: LD_VAR 0 4
21269: PPUSH
21270: CALL_OW 380
// un := CreateHuman ;
21274: LD_ADDR_VAR 0 14
21278: PUSH
21279: CALL_OW 44
21283: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
21284: LD_ADDR_VAR 0 7
21288: PUSH
21289: LD_VAR 0 7
21293: PPUSH
21294: LD_INT 1
21296: PPUSH
21297: LD_VAR 0 14
21301: PPUSH
21302: CALL_OW 2
21306: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
21307: LD_VAR 0 14
21311: PPUSH
21312: LD_VAR 0 9
21316: PPUSH
21317: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
21321: LD_VAR 0 9
21325: PPUSH
21326: CALL_OW 313
21330: PUSH
21331: LD_INT 6
21333: EQUAL
21334: IFTRUE 21358
21336: PUSH
21337: LD_VAR 0 9
21341: PPUSH
21342: CALL_OW 266
21346: PUSH
21347: LD_INT 32
21349: PUSH
21350: LD_INT 31
21352: PUSH
21353: EMPTY
21354: LIST
21355: LIST
21356: IN
21357: OR
21358: IFFALSE 21170
21360: GO 21167
21362: POP
21363: POP
// end else
21364: GO 21750
// for j = 1 to x do
21366: LD_ADDR_VAR 0 9
21370: PUSH
21371: DOUBLE
21372: LD_INT 1
21374: DEC
21375: ST_TO_ADDR
21376: LD_VAR 0 13
21380: PUSH
21381: FOR_TO
21382: IFFALSE 21748
// begin InitHc ;
21384: CALL_OW 19
// if not f then
21388: LD_VAR 0 12
21392: NOT
21393: IFFALSE 21482
// begin PrepareHuman ( false , i , skill ) ;
21395: LD_INT 0
21397: PPUSH
21398: LD_VAR 0 8
21402: PPUSH
21403: LD_VAR 0 4
21407: PPUSH
21408: CALL_OW 380
// un := CreateHuman ;
21412: LD_ADDR_VAR 0 14
21416: PUSH
21417: CALL_OW 44
21421: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
21422: LD_ADDR_VAR 0 7
21426: PUSH
21427: LD_VAR 0 7
21431: PPUSH
21432: LD_INT 1
21434: PPUSH
21435: LD_VAR 0 14
21439: PPUSH
21440: CALL_OW 2
21444: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
21445: LD_VAR 0 14
21449: PPUSH
21450: LD_VAR 0 1
21454: PPUSH
21455: CALL_OW 250
21459: PPUSH
21460: LD_VAR 0 1
21464: PPUSH
21465: CALL_OW 251
21469: PPUSH
21470: LD_INT 10
21472: PPUSH
21473: LD_INT 0
21475: PPUSH
21476: CALL_OW 50
// continue ;
21480: GO 21381
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
21482: LD_VAR 0 12
21486: PUSH
21487: LD_INT 1
21489: ARRAY
21490: PPUSH
21491: CALL_OW 313
21495: IFFALSE 21523
21497: PUSH
21498: LD_VAR 0 12
21502: PUSH
21503: LD_INT 1
21505: ARRAY
21506: PPUSH
21507: CALL_OW 266
21511: PUSH
21512: LD_INT 32
21514: PUSH
21515: LD_INT 31
21517: PUSH
21518: EMPTY
21519: LIST
21520: LIST
21521: IN
21522: AND
21523: IFTRUE 21544
21525: PUSH
21526: LD_VAR 0 12
21530: PUSH
21531: LD_INT 1
21533: ARRAY
21534: PPUSH
21535: CALL_OW 313
21539: PUSH
21540: LD_INT 6
21542: EQUAL
21543: OR
21544: IFFALSE 21564
// f := Delete ( f , 1 ) ;
21546: LD_ADDR_VAR 0 12
21550: PUSH
21551: LD_VAR 0 12
21555: PPUSH
21556: LD_INT 1
21558: PPUSH
21559: CALL_OW 3
21563: ST_TO_ADDR
// if not f then
21564: LD_VAR 0 12
21568: NOT
21569: IFFALSE 21587
// begin x := x + 2 ;
21571: LD_ADDR_VAR 0 13
21575: PUSH
21576: LD_VAR 0 13
21580: PUSH
21581: LD_INT 2
21583: PLUS
21584: ST_TO_ADDR
// continue ;
21585: GO 21381
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
21587: LD_VAR 0 12
21591: PUSH
21592: LD_INT 1
21594: ARRAY
21595: PPUSH
21596: CALL_OW 266
21600: PUSH
21601: LD_INT 5
21603: EQUAL
21604: IFFALSE 21678
// begin if UnitsInside ( f [ 1 ] ) < 3 then
21606: LD_VAR 0 12
21610: PUSH
21611: LD_INT 1
21613: ARRAY
21614: PPUSH
21615: CALL_OW 313
21619: PUSH
21620: LD_INT 3
21622: LESS
21623: IFFALSE 21659
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
21625: LD_INT 0
21627: PPUSH
21628: LD_INT 5
21630: PUSH
21631: LD_INT 8
21633: PUSH
21634: LD_INT 9
21636: PUSH
21637: EMPTY
21638: LIST
21639: LIST
21640: LIST
21641: PUSH
21642: LD_VAR 0 17
21646: ARRAY
21647: PPUSH
21648: LD_VAR 0 4
21652: PPUSH
21653: CALL_OW 380
21657: GO 21676
// PrepareHuman ( false , i , skill ) ;
21659: LD_INT 0
21661: PPUSH
21662: LD_VAR 0 8
21666: PPUSH
21667: LD_VAR 0 4
21671: PPUSH
21672: CALL_OW 380
// end else
21676: GO 21695
// PrepareHuman ( false , i , skill ) ;
21678: LD_INT 0
21680: PPUSH
21681: LD_VAR 0 8
21685: PPUSH
21686: LD_VAR 0 4
21690: PPUSH
21691: CALL_OW 380
// un := CreateHuman ;
21695: LD_ADDR_VAR 0 14
21699: PUSH
21700: CALL_OW 44
21704: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
21705: LD_ADDR_VAR 0 7
21709: PUSH
21710: LD_VAR 0 7
21714: PPUSH
21715: LD_INT 1
21717: PPUSH
21718: LD_VAR 0 14
21722: PPUSH
21723: CALL_OW 2
21727: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
21728: LD_VAR 0 14
21732: PPUSH
21733: LD_VAR 0 12
21737: PUSH
21738: LD_INT 1
21740: ARRAY
21741: PPUSH
21742: CALL_OW 52
// end ;
21746: GO 21381
21748: POP
21749: POP
// end ;
21750: GO 20681
21752: POP
21753: POP
// result := result ^ buildings ;
21754: LD_ADDR_VAR 0 7
21758: PUSH
21759: LD_VAR 0 7
21763: PUSH
21764: LD_VAR 0 18
21768: ADD
21769: ST_TO_ADDR
// end else
21770: GO 21913
// begin for i = 1 to personel do
21772: LD_ADDR_VAR 0 8
21776: PUSH
21777: DOUBLE
21778: LD_INT 1
21780: DEC
21781: ST_TO_ADDR
21782: LD_VAR 0 6
21786: PUSH
21787: FOR_TO
21788: IFFALSE 21911
// begin if i > 4 then
21790: LD_VAR 0 8
21794: PUSH
21795: LD_INT 4
21797: GREATER
21798: IFFALSE 21802
// break ;
21800: GO 21911
// x := personel [ i ] ;
21802: LD_ADDR_VAR 0 13
21806: PUSH
21807: LD_VAR 0 6
21811: PUSH
21812: LD_VAR 0 8
21816: ARRAY
21817: ST_TO_ADDR
// if x = - 1 then
21818: LD_VAR 0 13
21822: PUSH
21823: LD_INT 1
21825: NEG
21826: EQUAL
21827: IFFALSE 21831
// continue ;
21829: GO 21787
// PrepareHuman ( false , i , skill ) ;
21831: LD_INT 0
21833: PPUSH
21834: LD_VAR 0 8
21838: PPUSH
21839: LD_VAR 0 4
21843: PPUSH
21844: CALL_OW 380
// un := CreateHuman ;
21848: LD_ADDR_VAR 0 14
21852: PUSH
21853: CALL_OW 44
21857: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
21858: LD_VAR 0 14
21862: PPUSH
21863: LD_VAR 0 1
21867: PPUSH
21868: CALL_OW 250
21872: PPUSH
21873: LD_VAR 0 1
21877: PPUSH
21878: CALL_OW 251
21882: PPUSH
21883: LD_INT 10
21885: PPUSH
21886: LD_INT 0
21888: PPUSH
21889: CALL_OW 50
// result := result ^ un ;
21893: LD_ADDR_VAR 0 7
21897: PUSH
21898: LD_VAR 0 7
21902: PUSH
21903: LD_VAR 0 14
21907: ADD
21908: ST_TO_ADDR
// end ;
21909: GO 21787
21911: POP
21912: POP
// end ; end ;
21913: LD_VAR 0 7
21917: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
21918: LD_INT 0
21920: PPUSH
21921: PPUSH
21922: PPUSH
21923: PPUSH
21924: PPUSH
21925: PPUSH
21926: PPUSH
21927: PPUSH
21928: PPUSH
21929: PPUSH
21930: PPUSH
21931: PPUSH
21932: PPUSH
21933: PPUSH
21934: PPUSH
21935: PPUSH
// result := false ;
21936: LD_ADDR_VAR 0 3
21940: PUSH
21941: LD_INT 0
21943: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
21944: LD_VAR 0 1
21948: NOT
21949: IFTRUE 21974
21951: PUSH
21952: LD_VAR 0 1
21956: PPUSH
21957: CALL_OW 266
21961: PUSH
21962: LD_INT 32
21964: PUSH
21965: LD_INT 33
21967: PUSH
21968: EMPTY
21969: LIST
21970: LIST
21971: IN
21972: NOT
21973: OR
21974: IFFALSE 21978
// exit ;
21976: GO 23113
// nat := GetNation ( tower ) ;
21978: LD_ADDR_VAR 0 12
21982: PUSH
21983: LD_VAR 0 1
21987: PPUSH
21988: CALL_OW 248
21992: ST_TO_ADDR
// side := GetSide ( tower ) ;
21993: LD_ADDR_VAR 0 16
21997: PUSH
21998: LD_VAR 0 1
22002: PPUSH
22003: CALL_OW 255
22007: ST_TO_ADDR
// x := GetX ( tower ) ;
22008: LD_ADDR_VAR 0 10
22012: PUSH
22013: LD_VAR 0 1
22017: PPUSH
22018: CALL_OW 250
22022: ST_TO_ADDR
// y := GetY ( tower ) ;
22023: LD_ADDR_VAR 0 11
22027: PUSH
22028: LD_VAR 0 1
22032: PPUSH
22033: CALL_OW 251
22037: ST_TO_ADDR
// if not x or not y then
22038: LD_VAR 0 10
22042: NOT
22043: IFTRUE 22052
22045: PUSH
22046: LD_VAR 0 11
22050: NOT
22051: OR
22052: IFFALSE 22056
// exit ;
22054: GO 23113
// weapon := 0 ;
22056: LD_ADDR_VAR 0 18
22060: PUSH
22061: LD_INT 0
22063: ST_TO_ADDR
// fac_list := [ ] ;
22064: LD_ADDR_VAR 0 17
22068: PUSH
22069: EMPTY
22070: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
22071: LD_ADDR_VAR 0 6
22075: PUSH
22076: LD_VAR 0 1
22080: PPUSH
22081: CALL_OW 274
22085: PPUSH
22086: LD_VAR 0 2
22090: PPUSH
22091: LD_INT 0
22093: PPUSH
22094: CALL 19648 0 3
22098: PPUSH
22099: LD_INT 30
22101: PUSH
22102: LD_INT 3
22104: PUSH
22105: EMPTY
22106: LIST
22107: LIST
22108: PPUSH
22109: CALL_OW 72
22113: ST_TO_ADDR
// if not factories then
22114: LD_VAR 0 6
22118: NOT
22119: IFFALSE 22123
// exit ;
22121: GO 23113
// for i in factories do
22123: LD_ADDR_VAR 0 8
22127: PUSH
22128: LD_VAR 0 6
22132: PUSH
22133: FOR_IN
22134: IFFALSE 22159
// fac_list := fac_list union AvailableWeaponList ( i ) ;
22136: LD_ADDR_VAR 0 17
22140: PUSH
22141: LD_VAR 0 17
22145: PUSH
22146: LD_VAR 0 8
22150: PPUSH
22151: CALL_OW 478
22155: UNION
22156: ST_TO_ADDR
22157: GO 22133
22159: POP
22160: POP
// if not fac_list then
22161: LD_VAR 0 17
22165: NOT
22166: IFFALSE 22170
// exit ;
22168: GO 23113
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
22170: LD_ADDR_VAR 0 5
22174: PUSH
22175: LD_INT 4
22177: PUSH
22178: LD_INT 5
22180: PUSH
22181: LD_INT 9
22183: PUSH
22184: LD_INT 10
22186: PUSH
22187: LD_INT 6
22189: PUSH
22190: LD_INT 7
22192: PUSH
22193: LD_INT 11
22195: PUSH
22196: EMPTY
22197: LIST
22198: LIST
22199: LIST
22200: LIST
22201: LIST
22202: LIST
22203: LIST
22204: PUSH
22205: LD_INT 27
22207: PUSH
22208: LD_INT 28
22210: PUSH
22211: LD_INT 26
22213: PUSH
22214: LD_INT 30
22216: PUSH
22217: EMPTY
22218: LIST
22219: LIST
22220: LIST
22221: LIST
22222: PUSH
22223: LD_INT 43
22225: PUSH
22226: LD_INT 44
22228: PUSH
22229: LD_INT 46
22231: PUSH
22232: LD_INT 45
22234: PUSH
22235: LD_INT 47
22237: PUSH
22238: LD_INT 49
22240: PUSH
22241: EMPTY
22242: LIST
22243: LIST
22244: LIST
22245: LIST
22246: LIST
22247: LIST
22248: PUSH
22249: EMPTY
22250: LIST
22251: LIST
22252: LIST
22253: PUSH
22254: LD_VAR 0 12
22258: ARRAY
22259: ST_TO_ADDR
// list := list isect fac_list ;
22260: LD_ADDR_VAR 0 5
22264: PUSH
22265: LD_VAR 0 5
22269: PUSH
22270: LD_VAR 0 17
22274: ISECT
22275: ST_TO_ADDR
// if not list then
22276: LD_VAR 0 5
22280: NOT
22281: IFFALSE 22285
// exit ;
22283: GO 23113
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
22285: LD_VAR 0 12
22289: PUSH
22290: LD_INT 3
22292: EQUAL
22293: IFFALSE 22305
22295: PUSH
22296: LD_INT 49
22298: PUSH
22299: LD_VAR 0 5
22303: IN
22304: AND
22305: IFFALSE 22325
22307: PUSH
22308: LD_INT 31
22310: PPUSH
22311: LD_VAR 0 16
22315: PPUSH
22316: CALL_OW 321
22320: PUSH
22321: LD_INT 2
22323: EQUAL
22324: AND
22325: IFFALSE 22385
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
22327: LD_INT 22
22329: PUSH
22330: LD_VAR 0 16
22334: PUSH
22335: EMPTY
22336: LIST
22337: LIST
22338: PUSH
22339: LD_INT 35
22341: PUSH
22342: LD_INT 49
22344: PUSH
22345: EMPTY
22346: LIST
22347: LIST
22348: PUSH
22349: LD_INT 91
22351: PUSH
22352: LD_VAR 0 1
22356: PUSH
22357: LD_INT 10
22359: PUSH
22360: EMPTY
22361: LIST
22362: LIST
22363: LIST
22364: PUSH
22365: EMPTY
22366: LIST
22367: LIST
22368: LIST
22369: PPUSH
22370: CALL_OW 69
22374: NOT
22375: IFFALSE 22385
// weapon := ru_time_lapser ;
22377: LD_ADDR_VAR 0 18
22381: PUSH
22382: LD_INT 49
22384: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
22385: LD_VAR 0 12
22389: PUSH
22390: LD_INT 1
22392: PUSH
22393: LD_INT 2
22395: PUSH
22396: EMPTY
22397: LIST
22398: LIST
22399: IN
22400: IFFALSE 22424
22402: PUSH
22403: LD_INT 11
22405: PUSH
22406: LD_VAR 0 5
22410: IN
22411: IFTRUE 22423
22413: PUSH
22414: LD_INT 30
22416: PUSH
22417: LD_VAR 0 5
22421: IN
22422: OR
22423: AND
22424: IFFALSE 22444
22426: PUSH
22427: LD_INT 6
22429: PPUSH
22430: LD_VAR 0 16
22434: PPUSH
22435: CALL_OW 321
22439: PUSH
22440: LD_INT 2
22442: EQUAL
22443: AND
22444: IFFALSE 22611
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
22446: LD_INT 22
22448: PUSH
22449: LD_VAR 0 16
22453: PUSH
22454: EMPTY
22455: LIST
22456: LIST
22457: PUSH
22458: LD_INT 2
22460: PUSH
22461: LD_INT 35
22463: PUSH
22464: LD_INT 11
22466: PUSH
22467: EMPTY
22468: LIST
22469: LIST
22470: PUSH
22471: LD_INT 35
22473: PUSH
22474: LD_INT 30
22476: PUSH
22477: EMPTY
22478: LIST
22479: LIST
22480: PUSH
22481: EMPTY
22482: LIST
22483: LIST
22484: LIST
22485: PUSH
22486: LD_INT 91
22488: PUSH
22489: LD_VAR 0 1
22493: PUSH
22494: LD_INT 18
22496: PUSH
22497: EMPTY
22498: LIST
22499: LIST
22500: LIST
22501: PUSH
22502: EMPTY
22503: LIST
22504: LIST
22505: LIST
22506: PPUSH
22507: CALL_OW 69
22511: NOT
22512: IFFALSE 22588
22514: PUSH
22515: LD_INT 22
22517: PUSH
22518: LD_VAR 0 16
22522: PUSH
22523: EMPTY
22524: LIST
22525: LIST
22526: PUSH
22527: LD_INT 2
22529: PUSH
22530: LD_INT 30
22532: PUSH
22533: LD_INT 32
22535: PUSH
22536: EMPTY
22537: LIST
22538: LIST
22539: PUSH
22540: LD_INT 30
22542: PUSH
22543: LD_INT 33
22545: PUSH
22546: EMPTY
22547: LIST
22548: LIST
22549: PUSH
22550: EMPTY
22551: LIST
22552: LIST
22553: LIST
22554: PUSH
22555: LD_INT 91
22557: PUSH
22558: LD_VAR 0 1
22562: PUSH
22563: LD_INT 12
22565: PUSH
22566: EMPTY
22567: LIST
22568: LIST
22569: LIST
22570: PUSH
22571: EMPTY
22572: LIST
22573: LIST
22574: LIST
22575: PUSH
22576: EMPTY
22577: LIST
22578: PPUSH
22579: CALL_OW 69
22583: PUSH
22584: LD_INT 2
22586: GREATER
22587: AND
22588: IFFALSE 22611
// weapon := [ us_radar , ar_radar ] [ nat ] ;
22590: LD_ADDR_VAR 0 18
22594: PUSH
22595: LD_INT 11
22597: PUSH
22598: LD_INT 30
22600: PUSH
22601: EMPTY
22602: LIST
22603: LIST
22604: PUSH
22605: LD_VAR 0 12
22609: ARRAY
22610: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
22611: LD_VAR 0 18
22615: NOT
22616: IFFALSE 22636
22618: PUSH
22619: LD_INT 40
22621: PPUSH
22622: LD_VAR 0 16
22626: PPUSH
22627: CALL_OW 321
22631: PUSH
22632: LD_INT 2
22634: EQUAL
22635: AND
22636: IFFALSE 22672
22638: PUSH
22639: LD_INT 7
22641: PUSH
22642: LD_VAR 0 5
22646: IN
22647: IFTRUE 22659
22649: PUSH
22650: LD_INT 28
22652: PUSH
22653: LD_VAR 0 5
22657: IN
22658: OR
22659: IFTRUE 22671
22661: PUSH
22662: LD_INT 45
22664: PUSH
22665: LD_VAR 0 5
22669: IN
22670: OR
22671: AND
22672: IFFALSE 22926
// begin hex := GetHexInfo ( x , y ) ;
22674: LD_ADDR_VAR 0 4
22678: PUSH
22679: LD_VAR 0 10
22683: PPUSH
22684: LD_VAR 0 11
22688: PPUSH
22689: CALL_OW 546
22693: ST_TO_ADDR
// if hex [ 1 ] then
22694: LD_VAR 0 4
22698: PUSH
22699: LD_INT 1
22701: ARRAY
22702: IFFALSE 22706
// exit ;
22704: GO 23113
// height := hex [ 2 ] ;
22706: LD_ADDR_VAR 0 15
22710: PUSH
22711: LD_VAR 0 4
22715: PUSH
22716: LD_INT 2
22718: ARRAY
22719: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
22720: LD_ADDR_VAR 0 14
22724: PUSH
22725: LD_INT 0
22727: PUSH
22728: LD_INT 2
22730: PUSH
22731: LD_INT 3
22733: PUSH
22734: LD_INT 5
22736: PUSH
22737: EMPTY
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: ST_TO_ADDR
// for i in tmp do
22743: LD_ADDR_VAR 0 8
22747: PUSH
22748: LD_VAR 0 14
22752: PUSH
22753: FOR_IN
22754: IFFALSE 22924
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
22756: LD_ADDR_VAR 0 9
22760: PUSH
22761: LD_VAR 0 10
22765: PPUSH
22766: LD_VAR 0 8
22770: PPUSH
22771: LD_INT 5
22773: PPUSH
22774: CALL_OW 272
22778: PUSH
22779: LD_VAR 0 11
22783: PPUSH
22784: LD_VAR 0 8
22788: PPUSH
22789: LD_INT 5
22791: PPUSH
22792: CALL_OW 273
22796: PUSH
22797: EMPTY
22798: LIST
22799: LIST
22800: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
22801: LD_VAR 0 9
22805: PUSH
22806: LD_INT 1
22808: ARRAY
22809: PPUSH
22810: LD_VAR 0 9
22814: PUSH
22815: LD_INT 2
22817: ARRAY
22818: PPUSH
22819: CALL_OW 488
22823: IFFALSE 22922
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
22825: LD_ADDR_VAR 0 4
22829: PUSH
22830: LD_VAR 0 9
22834: PUSH
22835: LD_INT 1
22837: ARRAY
22838: PPUSH
22839: LD_VAR 0 9
22843: PUSH
22844: LD_INT 2
22846: ARRAY
22847: PPUSH
22848: CALL_OW 546
22852: ST_TO_ADDR
// if hex [ 1 ] then
22853: LD_VAR 0 4
22857: PUSH
22858: LD_INT 1
22860: ARRAY
22861: IFFALSE 22865
// continue ;
22863: GO 22753
// h := hex [ 2 ] ;
22865: LD_ADDR_VAR 0 13
22869: PUSH
22870: LD_VAR 0 4
22874: PUSH
22875: LD_INT 2
22877: ARRAY
22878: ST_TO_ADDR
// if h + 7 < height then
22879: LD_VAR 0 13
22883: PUSH
22884: LD_INT 7
22886: PLUS
22887: PUSH
22888: LD_VAR 0 15
22892: LESS
22893: IFFALSE 22922
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
22895: LD_ADDR_VAR 0 18
22899: PUSH
22900: LD_INT 7
22902: PUSH
22903: LD_INT 28
22905: PUSH
22906: LD_INT 45
22908: PUSH
22909: EMPTY
22910: LIST
22911: LIST
22912: LIST
22913: PUSH
22914: LD_VAR 0 12
22918: ARRAY
22919: ST_TO_ADDR
// break ;
22920: GO 22924
// end ; end ; end ;
22922: GO 22753
22924: POP
22925: POP
// end ; if not weapon then
22926: LD_VAR 0 18
22930: NOT
22931: IFFALSE 22991
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
22933: LD_ADDR_VAR 0 5
22937: PUSH
22938: LD_VAR 0 5
22942: PUSH
22943: LD_INT 11
22945: PUSH
22946: LD_INT 30
22948: PUSH
22949: LD_INT 49
22951: PUSH
22952: EMPTY
22953: LIST
22954: LIST
22955: LIST
22956: DIFF
22957: ST_TO_ADDR
// if not list then
22958: LD_VAR 0 5
22962: NOT
22963: IFFALSE 22967
// exit ;
22965: GO 23113
// weapon := list [ rand ( 1 , list ) ] ;
22967: LD_ADDR_VAR 0 18
22971: PUSH
22972: LD_VAR 0 5
22976: PUSH
22977: LD_INT 1
22979: PPUSH
22980: LD_VAR 0 5
22984: PPUSH
22985: CALL_OW 12
22989: ARRAY
22990: ST_TO_ADDR
// end ; if weapon then
22991: LD_VAR 0 18
22995: IFFALSE 23113
// begin tmp := CostOfWeapon ( weapon ) ;
22997: LD_ADDR_VAR 0 14
23001: PUSH
23002: LD_VAR 0 18
23006: PPUSH
23007: CALL_OW 451
23011: ST_TO_ADDR
// j := GetBase ( tower ) ;
23012: LD_ADDR_VAR 0 9
23016: PUSH
23017: LD_VAR 0 1
23021: PPUSH
23022: CALL_OW 274
23026: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
23027: LD_VAR 0 9
23031: PPUSH
23032: LD_INT 1
23034: PPUSH
23035: CALL_OW 275
23039: PUSH
23040: LD_VAR 0 14
23044: PUSH
23045: LD_INT 1
23047: ARRAY
23048: GREATEREQUAL
23049: IFFALSE 23075
23051: PUSH
23052: LD_VAR 0 9
23056: PPUSH
23057: LD_INT 2
23059: PPUSH
23060: CALL_OW 275
23064: PUSH
23065: LD_VAR 0 14
23069: PUSH
23070: LD_INT 2
23072: ARRAY
23073: GREATEREQUAL
23074: AND
23075: IFFALSE 23101
23077: PUSH
23078: LD_VAR 0 9
23082: PPUSH
23083: LD_INT 3
23085: PPUSH
23086: CALL_OW 275
23090: PUSH
23091: LD_VAR 0 14
23095: PUSH
23096: LD_INT 3
23098: ARRAY
23099: GREATEREQUAL
23100: AND
23101: IFFALSE 23113
// result := weapon ;
23103: LD_ADDR_VAR 0 3
23107: PUSH
23108: LD_VAR 0 18
23112: ST_TO_ADDR
// end ; end ;
23113: LD_VAR 0 3
23117: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
23118: LD_INT 0
23120: PPUSH
23121: PPUSH
// result := true ;
23122: LD_ADDR_VAR 0 3
23126: PUSH
23127: LD_INT 1
23129: ST_TO_ADDR
// if array1 = array2 then
23130: LD_VAR 0 1
23134: PUSH
23135: LD_VAR 0 2
23139: EQUAL
23140: IFFALSE 23200
// begin for i = 1 to array1 do
23142: LD_ADDR_VAR 0 4
23146: PUSH
23147: DOUBLE
23148: LD_INT 1
23150: DEC
23151: ST_TO_ADDR
23152: LD_VAR 0 1
23156: PUSH
23157: FOR_TO
23158: IFFALSE 23196
// if array1 [ i ] <> array2 [ i ] then
23160: LD_VAR 0 1
23164: PUSH
23165: LD_VAR 0 4
23169: ARRAY
23170: PUSH
23171: LD_VAR 0 2
23175: PUSH
23176: LD_VAR 0 4
23180: ARRAY
23181: NONEQUAL
23182: IFFALSE 23194
// begin result := false ;
23184: LD_ADDR_VAR 0 3
23188: PUSH
23189: LD_INT 0
23191: ST_TO_ADDR
// break ;
23192: GO 23196
// end ;
23194: GO 23157
23196: POP
23197: POP
// end else
23198: GO 23208
// result := false ;
23200: LD_ADDR_VAR 0 3
23204: PUSH
23205: LD_INT 0
23207: ST_TO_ADDR
// end ;
23208: LD_VAR 0 3
23212: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
23213: LD_INT 0
23215: PPUSH
23216: PPUSH
// if not array1 or not array2 then
23217: LD_VAR 0 1
23221: NOT
23222: IFTRUE 23231
23224: PUSH
23225: LD_VAR 0 2
23229: NOT
23230: OR
23231: IFFALSE 23235
// exit ;
23233: GO 23299
// result := true ;
23235: LD_ADDR_VAR 0 3
23239: PUSH
23240: LD_INT 1
23242: ST_TO_ADDR
// for i = 1 to array1 do
23243: LD_ADDR_VAR 0 4
23247: PUSH
23248: DOUBLE
23249: LD_INT 1
23251: DEC
23252: ST_TO_ADDR
23253: LD_VAR 0 1
23257: PUSH
23258: FOR_TO
23259: IFFALSE 23297
// if array1 [ i ] <> array2 [ i ] then
23261: LD_VAR 0 1
23265: PUSH
23266: LD_VAR 0 4
23270: ARRAY
23271: PUSH
23272: LD_VAR 0 2
23276: PUSH
23277: LD_VAR 0 4
23281: ARRAY
23282: NONEQUAL
23283: IFFALSE 23295
// begin result := false ;
23285: LD_ADDR_VAR 0 3
23289: PUSH
23290: LD_INT 0
23292: ST_TO_ADDR
// break ;
23293: GO 23297
// end ;
23295: GO 23258
23297: POP
23298: POP
// end ;
23299: LD_VAR 0 3
23303: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
23304: LD_INT 0
23306: PPUSH
23307: PPUSH
23308: PPUSH
// pom := GetBase ( fac ) ;
23309: LD_ADDR_VAR 0 5
23313: PUSH
23314: LD_VAR 0 1
23318: PPUSH
23319: CALL_OW 274
23323: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
23324: LD_ADDR_VAR 0 4
23328: PUSH
23329: LD_VAR 0 2
23333: PUSH
23334: LD_INT 1
23336: ARRAY
23337: PPUSH
23338: LD_VAR 0 2
23342: PUSH
23343: LD_INT 2
23345: ARRAY
23346: PPUSH
23347: LD_VAR 0 2
23351: PUSH
23352: LD_INT 3
23354: ARRAY
23355: PPUSH
23356: LD_VAR 0 2
23360: PUSH
23361: LD_INT 4
23363: ARRAY
23364: PPUSH
23365: CALL_OW 449
23369: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
23370: LD_ADDR_VAR 0 3
23374: PUSH
23375: LD_VAR 0 5
23379: PPUSH
23380: LD_INT 1
23382: PPUSH
23383: CALL_OW 275
23387: PUSH
23388: LD_VAR 0 4
23392: PUSH
23393: LD_INT 1
23395: ARRAY
23396: GREATEREQUAL
23397: IFFALSE 23423
23399: PUSH
23400: LD_VAR 0 5
23404: PPUSH
23405: LD_INT 2
23407: PPUSH
23408: CALL_OW 275
23412: PUSH
23413: LD_VAR 0 4
23417: PUSH
23418: LD_INT 2
23420: ARRAY
23421: GREATEREQUAL
23422: AND
23423: IFFALSE 23449
23425: PUSH
23426: LD_VAR 0 5
23430: PPUSH
23431: LD_INT 3
23433: PPUSH
23434: CALL_OW 275
23438: PUSH
23439: LD_VAR 0 4
23443: PUSH
23444: LD_INT 3
23446: ARRAY
23447: GREATEREQUAL
23448: AND
23449: ST_TO_ADDR
// end ;
23450: LD_VAR 0 3
23454: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
23455: LD_INT 0
23457: PPUSH
23458: PPUSH
23459: PPUSH
23460: PPUSH
// pom := GetBase ( building ) ;
23461: LD_ADDR_VAR 0 3
23465: PUSH
23466: LD_VAR 0 1
23470: PPUSH
23471: CALL_OW 274
23475: ST_TO_ADDR
// if not pom then
23476: LD_VAR 0 3
23480: NOT
23481: IFFALSE 23485
// exit ;
23483: GO 23659
// btype := GetBType ( building ) ;
23485: LD_ADDR_VAR 0 5
23489: PUSH
23490: LD_VAR 0 1
23494: PPUSH
23495: CALL_OW 266
23499: ST_TO_ADDR
// if btype = b_armoury then
23500: LD_VAR 0 5
23504: PUSH
23505: LD_INT 4
23507: EQUAL
23508: IFFALSE 23518
// btype := b_barracks ;
23510: LD_ADDR_VAR 0 5
23514: PUSH
23515: LD_INT 5
23517: ST_TO_ADDR
// if btype = b_depot then
23518: LD_VAR 0 5
23522: PUSH
23523: LD_INT 0
23525: EQUAL
23526: IFFALSE 23536
// btype := b_warehouse ;
23528: LD_ADDR_VAR 0 5
23532: PUSH
23533: LD_INT 1
23535: ST_TO_ADDR
// if btype = b_workshop then
23536: LD_VAR 0 5
23540: PUSH
23541: LD_INT 2
23543: EQUAL
23544: IFFALSE 23554
// btype := b_factory ;
23546: LD_ADDR_VAR 0 5
23550: PUSH
23551: LD_INT 3
23553: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
23554: LD_ADDR_VAR 0 4
23558: PUSH
23559: LD_VAR 0 5
23563: PPUSH
23564: LD_VAR 0 1
23568: PPUSH
23569: CALL_OW 248
23573: PPUSH
23574: CALL_OW 450
23578: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
23579: LD_ADDR_VAR 0 2
23583: PUSH
23584: LD_VAR 0 3
23588: PPUSH
23589: LD_INT 1
23591: PPUSH
23592: CALL_OW 275
23596: PUSH
23597: LD_VAR 0 4
23601: PUSH
23602: LD_INT 1
23604: ARRAY
23605: GREATEREQUAL
23606: IFFALSE 23632
23608: PUSH
23609: LD_VAR 0 3
23613: PPUSH
23614: LD_INT 2
23616: PPUSH
23617: CALL_OW 275
23621: PUSH
23622: LD_VAR 0 4
23626: PUSH
23627: LD_INT 2
23629: ARRAY
23630: GREATEREQUAL
23631: AND
23632: IFFALSE 23658
23634: PUSH
23635: LD_VAR 0 3
23639: PPUSH
23640: LD_INT 3
23642: PPUSH
23643: CALL_OW 275
23647: PUSH
23648: LD_VAR 0 4
23652: PUSH
23653: LD_INT 3
23655: ARRAY
23656: GREATEREQUAL
23657: AND
23658: ST_TO_ADDR
// end ;
23659: LD_VAR 0 2
23663: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
23664: LD_INT 0
23666: PPUSH
23667: PPUSH
23668: PPUSH
// pom := GetBase ( building ) ;
23669: LD_ADDR_VAR 0 4
23673: PUSH
23674: LD_VAR 0 1
23678: PPUSH
23679: CALL_OW 274
23683: ST_TO_ADDR
// if not pom then
23684: LD_VAR 0 4
23688: NOT
23689: IFFALSE 23693
// exit ;
23691: GO 23798
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
23693: LD_ADDR_VAR 0 5
23697: PUSH
23698: LD_VAR 0 2
23702: PPUSH
23703: LD_VAR 0 1
23707: PPUSH
23708: CALL_OW 248
23712: PPUSH
23713: CALL_OW 450
23717: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
23718: LD_ADDR_VAR 0 3
23722: PUSH
23723: LD_VAR 0 4
23727: PPUSH
23728: LD_INT 1
23730: PPUSH
23731: CALL_OW 275
23735: PUSH
23736: LD_VAR 0 5
23740: PUSH
23741: LD_INT 1
23743: ARRAY
23744: GREATEREQUAL
23745: IFFALSE 23771
23747: PUSH
23748: LD_VAR 0 4
23752: PPUSH
23753: LD_INT 2
23755: PPUSH
23756: CALL_OW 275
23760: PUSH
23761: LD_VAR 0 5
23765: PUSH
23766: LD_INT 2
23768: ARRAY
23769: GREATEREQUAL
23770: AND
23771: IFFALSE 23797
23773: PUSH
23774: LD_VAR 0 4
23778: PPUSH
23779: LD_INT 3
23781: PPUSH
23782: CALL_OW 275
23786: PUSH
23787: LD_VAR 0 5
23791: PUSH
23792: LD_INT 3
23794: ARRAY
23795: GREATEREQUAL
23796: AND
23797: ST_TO_ADDR
// end ;
23798: LD_VAR 0 3
23802: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
23803: LD_INT 0
23805: PPUSH
23806: PPUSH
23807: PPUSH
23808: PPUSH
23809: PPUSH
23810: PPUSH
23811: PPUSH
23812: PPUSH
23813: PPUSH
23814: PPUSH
23815: PPUSH
// result := false ;
23816: LD_ADDR_VAR 0 8
23820: PUSH
23821: LD_INT 0
23823: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
23824: LD_VAR 0 5
23828: NOT
23829: IFTRUE 23838
23831: PUSH
23832: LD_VAR 0 1
23836: NOT
23837: OR
23838: IFTRUE 23847
23840: PUSH
23841: LD_VAR 0 2
23845: NOT
23846: OR
23847: IFTRUE 23856
23849: PUSH
23850: LD_VAR 0 3
23854: NOT
23855: OR
23856: IFFALSE 23860
// exit ;
23858: GO 24686
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
23860: LD_ADDR_VAR 0 14
23864: PUSH
23865: LD_VAR 0 1
23869: PPUSH
23870: LD_VAR 0 2
23874: PPUSH
23875: LD_VAR 0 3
23879: PPUSH
23880: LD_VAR 0 4
23884: PPUSH
23885: LD_VAR 0 5
23889: PUSH
23890: LD_INT 1
23892: ARRAY
23893: PPUSH
23894: CALL_OW 248
23898: PPUSH
23899: LD_INT 0
23901: PPUSH
23902: CALL 25967 0 6
23906: ST_TO_ADDR
// if not hexes then
23907: LD_VAR 0 14
23911: NOT
23912: IFFALSE 23916
// exit ;
23914: GO 24686
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23916: LD_ADDR_VAR 0 17
23920: PUSH
23921: LD_VAR 0 5
23925: PPUSH
23926: LD_INT 22
23928: PUSH
23929: LD_VAR 0 13
23933: PPUSH
23934: CALL_OW 255
23938: PUSH
23939: EMPTY
23940: LIST
23941: LIST
23942: PUSH
23943: LD_INT 2
23945: PUSH
23946: LD_INT 30
23948: PUSH
23949: LD_INT 0
23951: PUSH
23952: EMPTY
23953: LIST
23954: LIST
23955: PUSH
23956: LD_INT 30
23958: PUSH
23959: LD_INT 1
23961: PUSH
23962: EMPTY
23963: LIST
23964: LIST
23965: PUSH
23966: EMPTY
23967: LIST
23968: LIST
23969: LIST
23970: PUSH
23971: EMPTY
23972: LIST
23973: LIST
23974: PPUSH
23975: CALL_OW 72
23979: ST_TO_ADDR
// for i = 1 to hexes do
23980: LD_ADDR_VAR 0 9
23984: PUSH
23985: DOUBLE
23986: LD_INT 1
23988: DEC
23989: ST_TO_ADDR
23990: LD_VAR 0 14
23994: PUSH
23995: FOR_TO
23996: IFFALSE 24684
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
23998: LD_ADDR_VAR 0 13
24002: PUSH
24003: LD_VAR 0 14
24007: PUSH
24008: LD_VAR 0 9
24012: ARRAY
24013: PUSH
24014: LD_INT 1
24016: ARRAY
24017: PPUSH
24018: LD_VAR 0 14
24022: PUSH
24023: LD_VAR 0 9
24027: ARRAY
24028: PUSH
24029: LD_INT 2
24031: ARRAY
24032: PPUSH
24033: CALL_OW 428
24037: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
24038: LD_VAR 0 14
24042: PUSH
24043: LD_VAR 0 9
24047: ARRAY
24048: PUSH
24049: LD_INT 1
24051: ARRAY
24052: PPUSH
24053: LD_VAR 0 14
24057: PUSH
24058: LD_VAR 0 9
24062: ARRAY
24063: PUSH
24064: LD_INT 2
24066: ARRAY
24067: PPUSH
24068: CALL_OW 351
24072: IFTRUE 24111
24074: PUSH
24075: LD_VAR 0 14
24079: PUSH
24080: LD_VAR 0 9
24084: ARRAY
24085: PUSH
24086: LD_INT 1
24088: ARRAY
24089: PPUSH
24090: LD_VAR 0 14
24094: PUSH
24095: LD_VAR 0 9
24099: ARRAY
24100: PUSH
24101: LD_INT 2
24103: ARRAY
24104: PPUSH
24105: CALL_OW 488
24109: NOT
24110: OR
24111: IFTRUE 24128
24113: PUSH
24114: LD_VAR 0 13
24118: PPUSH
24119: CALL_OW 247
24123: PUSH
24124: LD_INT 3
24126: EQUAL
24127: OR
24128: IFFALSE 24134
// exit ;
24130: POP
24131: POP
24132: GO 24686
// if not tmp then
24134: LD_VAR 0 13
24138: NOT
24139: IFFALSE 24143
// continue ;
24141: GO 23995
// result := true ;
24143: LD_ADDR_VAR 0 8
24147: PUSH
24148: LD_INT 1
24150: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
24151: LD_VAR 0 6
24155: IFFALSE 24172
24157: PUSH
24158: LD_VAR 0 13
24162: PPUSH
24163: CALL_OW 247
24167: PUSH
24168: LD_INT 2
24170: EQUAL
24171: AND
24172: IFFALSE 24189
24174: PUSH
24175: LD_VAR 0 13
24179: PPUSH
24180: CALL_OW 263
24184: PUSH
24185: LD_INT 1
24187: EQUAL
24188: AND
24189: IFFALSE 24353
// begin if IsDrivenBy ( tmp ) then
24191: LD_VAR 0 13
24195: PPUSH
24196: CALL_OW 311
24200: IFFALSE 24204
// continue ;
24202: GO 23995
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
24204: LD_VAR 0 6
24208: PPUSH
24209: LD_INT 3
24211: PUSH
24212: LD_INT 60
24214: PUSH
24215: EMPTY
24216: LIST
24217: PUSH
24218: EMPTY
24219: LIST
24220: LIST
24221: PUSH
24222: LD_INT 3
24224: PUSH
24225: LD_INT 55
24227: PUSH
24228: EMPTY
24229: LIST
24230: PUSH
24231: EMPTY
24232: LIST
24233: LIST
24234: PUSH
24235: EMPTY
24236: LIST
24237: LIST
24238: PPUSH
24239: CALL_OW 72
24243: IFFALSE 24351
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
24245: LD_ADDR_VAR 0 18
24249: PUSH
24250: LD_VAR 0 6
24254: PPUSH
24255: LD_INT 3
24257: PUSH
24258: LD_INT 60
24260: PUSH
24261: EMPTY
24262: LIST
24263: PUSH
24264: EMPTY
24265: LIST
24266: LIST
24267: PUSH
24268: LD_INT 3
24270: PUSH
24271: LD_INT 55
24273: PUSH
24274: EMPTY
24275: LIST
24276: PUSH
24277: EMPTY
24278: LIST
24279: LIST
24280: PUSH
24281: EMPTY
24282: LIST
24283: LIST
24284: PPUSH
24285: CALL_OW 72
24289: PUSH
24290: LD_INT 1
24292: ARRAY
24293: ST_TO_ADDR
// if IsInUnit ( driver ) then
24294: LD_VAR 0 18
24298: PPUSH
24299: CALL_OW 310
24303: IFFALSE 24314
// ComExit ( driver ) ;
24305: LD_VAR 0 18
24309: PPUSH
24310: CALL 49967 0 1
// AddComEnterUnit ( driver , tmp ) ;
24314: LD_VAR 0 18
24318: PPUSH
24319: LD_VAR 0 13
24323: PPUSH
24324: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
24328: LD_VAR 0 18
24332: PPUSH
24333: LD_VAR 0 7
24337: PPUSH
24338: CALL_OW 173
// AddComExitVehicle ( driver ) ;
24342: LD_VAR 0 18
24346: PPUSH
24347: CALL_OW 181
// end ; continue ;
24351: GO 23995
// end ; if not cleaners or not tmp in cleaners then
24353: LD_VAR 0 6
24357: NOT
24358: IFTRUE 24373
24360: PUSH
24361: LD_VAR 0 13
24365: PUSH
24366: LD_VAR 0 6
24370: IN
24371: NOT
24372: OR
24373: IFFALSE 24682
// begin if dep then
24375: LD_VAR 0 17
24379: IFFALSE 24515
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
24381: LD_ADDR_VAR 0 16
24385: PUSH
24386: LD_VAR 0 17
24390: PUSH
24391: LD_INT 1
24393: ARRAY
24394: PPUSH
24395: CALL_OW 250
24399: PPUSH
24400: LD_VAR 0 17
24404: PUSH
24405: LD_INT 1
24407: ARRAY
24408: PPUSH
24409: CALL_OW 254
24413: PPUSH
24414: LD_INT 5
24416: PPUSH
24417: CALL_OW 272
24421: PUSH
24422: LD_VAR 0 17
24426: PUSH
24427: LD_INT 1
24429: ARRAY
24430: PPUSH
24431: CALL_OW 251
24435: PPUSH
24436: LD_VAR 0 17
24440: PUSH
24441: LD_INT 1
24443: ARRAY
24444: PPUSH
24445: CALL_OW 254
24449: PPUSH
24450: LD_INT 5
24452: PPUSH
24453: CALL_OW 273
24457: PUSH
24458: EMPTY
24459: LIST
24460: LIST
24461: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
24462: LD_VAR 0 16
24466: PUSH
24467: LD_INT 1
24469: ARRAY
24470: PPUSH
24471: LD_VAR 0 16
24475: PUSH
24476: LD_INT 2
24478: ARRAY
24479: PPUSH
24480: CALL_OW 488
24484: IFFALSE 24515
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
24486: LD_VAR 0 13
24490: PPUSH
24491: LD_VAR 0 16
24495: PUSH
24496: LD_INT 1
24498: ARRAY
24499: PPUSH
24500: LD_VAR 0 16
24504: PUSH
24505: LD_INT 2
24507: ARRAY
24508: PPUSH
24509: CALL_OW 111
// continue ;
24513: GO 23995
// end ; end ; r := GetDir ( tmp ) ;
24515: LD_ADDR_VAR 0 15
24519: PUSH
24520: LD_VAR 0 13
24524: PPUSH
24525: CALL_OW 254
24529: ST_TO_ADDR
// if r = 5 then
24530: LD_VAR 0 15
24534: PUSH
24535: LD_INT 5
24537: EQUAL
24538: IFFALSE 24548
// r := 0 ;
24540: LD_ADDR_VAR 0 15
24544: PUSH
24545: LD_INT 0
24547: ST_TO_ADDR
// for j = r to 5 do
24548: LD_ADDR_VAR 0 10
24552: PUSH
24553: DOUBLE
24554: LD_VAR 0 15
24558: DEC
24559: ST_TO_ADDR
24560: LD_INT 5
24562: PUSH
24563: FOR_TO
24564: IFFALSE 24680
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
24566: LD_ADDR_VAR 0 11
24570: PUSH
24571: LD_VAR 0 13
24575: PPUSH
24576: CALL_OW 250
24580: PPUSH
24581: LD_VAR 0 10
24585: PPUSH
24586: LD_INT 2
24588: PPUSH
24589: CALL_OW 272
24593: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
24594: LD_ADDR_VAR 0 12
24598: PUSH
24599: LD_VAR 0 13
24603: PPUSH
24604: CALL_OW 251
24608: PPUSH
24609: LD_VAR 0 10
24613: PPUSH
24614: LD_INT 2
24616: PPUSH
24617: CALL_OW 273
24621: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
24622: LD_VAR 0 11
24626: PPUSH
24627: LD_VAR 0 12
24631: PPUSH
24632: CALL_OW 488
24636: IFFALSE 24655
24638: PUSH
24639: LD_VAR 0 11
24643: PPUSH
24644: LD_VAR 0 12
24648: PPUSH
24649: CALL_OW 428
24653: NOT
24654: AND
24655: IFFALSE 24678
// begin ComMoveXY ( tmp , _x , _y ) ;
24657: LD_VAR 0 13
24661: PPUSH
24662: LD_VAR 0 11
24666: PPUSH
24667: LD_VAR 0 12
24671: PPUSH
24672: CALL_OW 111
// break ;
24676: GO 24680
// end ; end ;
24678: GO 24563
24680: POP
24681: POP
// end ; end ;
24682: GO 23995
24684: POP
24685: POP
// end ;
24686: LD_VAR 0 8
24690: RET
// export function BuildingTechInvented ( side , btype ) ; begin
24691: LD_INT 0
24693: PPUSH
// result := true ;
24694: LD_ADDR_VAR 0 3
24698: PUSH
24699: LD_INT 1
24701: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
24702: LD_VAR 0 2
24706: PUSH
24707: LD_INT 24
24709: DOUBLE
24710: EQUAL
24711: IFTRUE 24721
24713: LD_INT 33
24715: DOUBLE
24716: EQUAL
24717: IFTRUE 24721
24719: GO 24746
24721: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
24722: LD_ADDR_VAR 0 3
24726: PUSH
24727: LD_INT 32
24729: PPUSH
24730: LD_VAR 0 1
24734: PPUSH
24735: CALL_OW 321
24739: PUSH
24740: LD_INT 2
24742: EQUAL
24743: ST_TO_ADDR
24744: GO 25062
24746: LD_INT 20
24748: DOUBLE
24749: EQUAL
24750: IFTRUE 24754
24752: GO 24779
24754: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
24755: LD_ADDR_VAR 0 3
24759: PUSH
24760: LD_INT 6
24762: PPUSH
24763: LD_VAR 0 1
24767: PPUSH
24768: CALL_OW 321
24772: PUSH
24773: LD_INT 2
24775: EQUAL
24776: ST_TO_ADDR
24777: GO 25062
24779: LD_INT 22
24781: DOUBLE
24782: EQUAL
24783: IFTRUE 24793
24785: LD_INT 36
24787: DOUBLE
24788: EQUAL
24789: IFTRUE 24793
24791: GO 24818
24793: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
24794: LD_ADDR_VAR 0 3
24798: PUSH
24799: LD_INT 15
24801: PPUSH
24802: LD_VAR 0 1
24806: PPUSH
24807: CALL_OW 321
24811: PUSH
24812: LD_INT 2
24814: EQUAL
24815: ST_TO_ADDR
24816: GO 25062
24818: LD_INT 30
24820: DOUBLE
24821: EQUAL
24822: IFTRUE 24826
24824: GO 24851
24826: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
24827: LD_ADDR_VAR 0 3
24831: PUSH
24832: LD_INT 20
24834: PPUSH
24835: LD_VAR 0 1
24839: PPUSH
24840: CALL_OW 321
24844: PUSH
24845: LD_INT 2
24847: EQUAL
24848: ST_TO_ADDR
24849: GO 25062
24851: LD_INT 28
24853: DOUBLE
24854: EQUAL
24855: IFTRUE 24865
24857: LD_INT 21
24859: DOUBLE
24860: EQUAL
24861: IFTRUE 24865
24863: GO 24890
24865: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
24866: LD_ADDR_VAR 0 3
24870: PUSH
24871: LD_INT 21
24873: PPUSH
24874: LD_VAR 0 1
24878: PPUSH
24879: CALL_OW 321
24883: PUSH
24884: LD_INT 2
24886: EQUAL
24887: ST_TO_ADDR
24888: GO 25062
24890: LD_INT 16
24892: DOUBLE
24893: EQUAL
24894: IFTRUE 24898
24896: GO 24923
24898: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
24899: LD_ADDR_VAR 0 3
24903: PUSH
24904: LD_INT 84
24906: PPUSH
24907: LD_VAR 0 1
24911: PPUSH
24912: CALL_OW 321
24916: PUSH
24917: LD_INT 2
24919: EQUAL
24920: ST_TO_ADDR
24921: GO 25062
24923: LD_INT 19
24925: DOUBLE
24926: EQUAL
24927: IFTRUE 24937
24929: LD_INT 23
24931: DOUBLE
24932: EQUAL
24933: IFTRUE 24937
24935: GO 24962
24937: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
24938: LD_ADDR_VAR 0 3
24942: PUSH
24943: LD_INT 83
24945: PPUSH
24946: LD_VAR 0 1
24950: PPUSH
24951: CALL_OW 321
24955: PUSH
24956: LD_INT 2
24958: EQUAL
24959: ST_TO_ADDR
24960: GO 25062
24962: LD_INT 17
24964: DOUBLE
24965: EQUAL
24966: IFTRUE 24970
24968: GO 24995
24970: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
24971: LD_ADDR_VAR 0 3
24975: PUSH
24976: LD_INT 39
24978: PPUSH
24979: LD_VAR 0 1
24983: PPUSH
24984: CALL_OW 321
24988: PUSH
24989: LD_INT 2
24991: EQUAL
24992: ST_TO_ADDR
24993: GO 25062
24995: LD_INT 18
24997: DOUBLE
24998: EQUAL
24999: IFTRUE 25003
25001: GO 25028
25003: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
25004: LD_ADDR_VAR 0 3
25008: PUSH
25009: LD_INT 40
25011: PPUSH
25012: LD_VAR 0 1
25016: PPUSH
25017: CALL_OW 321
25021: PUSH
25022: LD_INT 2
25024: EQUAL
25025: ST_TO_ADDR
25026: GO 25062
25028: LD_INT 27
25030: DOUBLE
25031: EQUAL
25032: IFTRUE 25036
25034: GO 25061
25036: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
25037: LD_ADDR_VAR 0 3
25041: PUSH
25042: LD_INT 35
25044: PPUSH
25045: LD_VAR 0 1
25049: PPUSH
25050: CALL_OW 321
25054: PUSH
25055: LD_INT 2
25057: EQUAL
25058: ST_TO_ADDR
25059: GO 25062
25061: POP
// end ;
25062: LD_VAR 0 3
25066: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
25067: LD_INT 0
25069: PPUSH
25070: PPUSH
25071: PPUSH
25072: PPUSH
25073: PPUSH
25074: PPUSH
25075: PPUSH
25076: PPUSH
25077: PPUSH
25078: PPUSH
25079: PPUSH
// result := false ;
25080: LD_ADDR_VAR 0 6
25084: PUSH
25085: LD_INT 0
25087: ST_TO_ADDR
// if btype = b_depot then
25088: LD_VAR 0 2
25092: PUSH
25093: LD_INT 0
25095: EQUAL
25096: IFFALSE 25108
// begin result := true ;
25098: LD_ADDR_VAR 0 6
25102: PUSH
25103: LD_INT 1
25105: ST_TO_ADDR
// exit ;
25106: GO 25962
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
25108: LD_VAR 0 1
25112: NOT
25113: IFTRUE 25138
25115: PUSH
25116: LD_VAR 0 1
25120: PPUSH
25121: CALL_OW 266
25125: PUSH
25126: LD_INT 0
25128: PUSH
25129: LD_INT 1
25131: PUSH
25132: EMPTY
25133: LIST
25134: LIST
25135: IN
25136: NOT
25137: OR
25138: IFTRUE 25147
25140: PUSH
25141: LD_VAR 0 2
25145: NOT
25146: OR
25147: IFTRUE 25183
25149: PUSH
25150: LD_VAR 0 5
25154: PUSH
25155: LD_INT 0
25157: PUSH
25158: LD_INT 1
25160: PUSH
25161: LD_INT 2
25163: PUSH
25164: LD_INT 3
25166: PUSH
25167: LD_INT 4
25169: PUSH
25170: LD_INT 5
25172: PUSH
25173: EMPTY
25174: LIST
25175: LIST
25176: LIST
25177: LIST
25178: LIST
25179: LIST
25180: IN
25181: NOT
25182: OR
25183: IFTRUE 25202
25185: PUSH
25186: LD_VAR 0 3
25190: PPUSH
25191: LD_VAR 0 4
25195: PPUSH
25196: CALL_OW 488
25200: NOT
25201: OR
25202: IFFALSE 25206
// exit ;
25204: GO 25962
// side := GetSide ( depot ) ;
25206: LD_ADDR_VAR 0 9
25210: PUSH
25211: LD_VAR 0 1
25215: PPUSH
25216: CALL_OW 255
25220: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
25221: LD_VAR 0 9
25225: PPUSH
25226: LD_VAR 0 2
25230: PPUSH
25231: CALL 24691 0 2
25235: NOT
25236: IFFALSE 25240
// exit ;
25238: GO 25962
// pom := GetBase ( depot ) ;
25240: LD_ADDR_VAR 0 10
25244: PUSH
25245: LD_VAR 0 1
25249: PPUSH
25250: CALL_OW 274
25254: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
25255: LD_ADDR_VAR 0 11
25259: PUSH
25260: LD_VAR 0 2
25264: PPUSH
25265: LD_VAR 0 1
25269: PPUSH
25270: CALL_OW 248
25274: PPUSH
25275: CALL_OW 450
25279: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
25280: LD_VAR 0 10
25284: PPUSH
25285: LD_INT 1
25287: PPUSH
25288: CALL_OW 275
25292: PUSH
25293: LD_VAR 0 11
25297: PUSH
25298: LD_INT 1
25300: ARRAY
25301: GREATEREQUAL
25302: IFFALSE 25328
25304: PUSH
25305: LD_VAR 0 10
25309: PPUSH
25310: LD_INT 2
25312: PPUSH
25313: CALL_OW 275
25317: PUSH
25318: LD_VAR 0 11
25322: PUSH
25323: LD_INT 2
25325: ARRAY
25326: GREATEREQUAL
25327: AND
25328: IFFALSE 25354
25330: PUSH
25331: LD_VAR 0 10
25335: PPUSH
25336: LD_INT 3
25338: PPUSH
25339: CALL_OW 275
25343: PUSH
25344: LD_VAR 0 11
25348: PUSH
25349: LD_INT 3
25351: ARRAY
25352: GREATEREQUAL
25353: AND
25354: NOT
25355: IFFALSE 25359
// exit ;
25357: GO 25962
// if GetBType ( depot ) = b_depot then
25359: LD_VAR 0 1
25363: PPUSH
25364: CALL_OW 266
25368: PUSH
25369: LD_INT 0
25371: EQUAL
25372: IFFALSE 25384
// dist := 28 else
25374: LD_ADDR_VAR 0 14
25378: PUSH
25379: LD_INT 28
25381: ST_TO_ADDR
25382: GO 25392
// dist := 36 ;
25384: LD_ADDR_VAR 0 14
25388: PUSH
25389: LD_INT 36
25391: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
25392: LD_VAR 0 1
25396: PPUSH
25397: LD_VAR 0 3
25401: PPUSH
25402: LD_VAR 0 4
25406: PPUSH
25407: CALL_OW 297
25411: PUSH
25412: LD_VAR 0 14
25416: GREATER
25417: IFFALSE 25421
// exit ;
25419: GO 25962
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
25421: LD_ADDR_VAR 0 12
25425: PUSH
25426: LD_VAR 0 2
25430: PPUSH
25431: LD_VAR 0 3
25435: PPUSH
25436: LD_VAR 0 4
25440: PPUSH
25441: LD_VAR 0 5
25445: PPUSH
25446: LD_VAR 0 1
25450: PPUSH
25451: CALL_OW 248
25455: PPUSH
25456: LD_INT 0
25458: PPUSH
25459: CALL 25967 0 6
25463: ST_TO_ADDR
// if not hexes then
25464: LD_VAR 0 12
25468: NOT
25469: IFFALSE 25473
// exit ;
25471: GO 25962
// hex := GetHexInfo ( x , y ) ;
25473: LD_ADDR_VAR 0 15
25477: PUSH
25478: LD_VAR 0 3
25482: PPUSH
25483: LD_VAR 0 4
25487: PPUSH
25488: CALL_OW 546
25492: ST_TO_ADDR
// if hex [ 1 ] then
25493: LD_VAR 0 15
25497: PUSH
25498: LD_INT 1
25500: ARRAY
25501: IFFALSE 25505
// exit ;
25503: GO 25962
// height := hex [ 2 ] ;
25505: LD_ADDR_VAR 0 13
25509: PUSH
25510: LD_VAR 0 15
25514: PUSH
25515: LD_INT 2
25517: ARRAY
25518: ST_TO_ADDR
// for i = 1 to hexes do
25519: LD_ADDR_VAR 0 7
25523: PUSH
25524: DOUBLE
25525: LD_INT 1
25527: DEC
25528: ST_TO_ADDR
25529: LD_VAR 0 12
25533: PUSH
25534: FOR_TO
25535: IFFALSE 25879
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
25537: LD_VAR 0 12
25541: PUSH
25542: LD_VAR 0 7
25546: ARRAY
25547: PUSH
25548: LD_INT 1
25550: ARRAY
25551: PPUSH
25552: LD_VAR 0 12
25556: PUSH
25557: LD_VAR 0 7
25561: ARRAY
25562: PUSH
25563: LD_INT 2
25565: ARRAY
25566: PPUSH
25567: CALL_OW 488
25571: NOT
25572: IFTRUE 25614
25574: PUSH
25575: LD_VAR 0 12
25579: PUSH
25580: LD_VAR 0 7
25584: ARRAY
25585: PUSH
25586: LD_INT 1
25588: ARRAY
25589: PPUSH
25590: LD_VAR 0 12
25594: PUSH
25595: LD_VAR 0 7
25599: ARRAY
25600: PUSH
25601: LD_INT 2
25603: ARRAY
25604: PPUSH
25605: CALL_OW 428
25609: PUSH
25610: LD_INT 0
25612: GREATER
25613: OR
25614: IFTRUE 25652
25616: PUSH
25617: LD_VAR 0 12
25621: PUSH
25622: LD_VAR 0 7
25626: ARRAY
25627: PUSH
25628: LD_INT 1
25630: ARRAY
25631: PPUSH
25632: LD_VAR 0 12
25636: PUSH
25637: LD_VAR 0 7
25641: ARRAY
25642: PUSH
25643: LD_INT 2
25645: ARRAY
25646: PPUSH
25647: CALL_OW 351
25651: OR
25652: IFFALSE 25658
// exit ;
25654: POP
25655: POP
25656: GO 25962
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
25658: LD_ADDR_VAR 0 8
25662: PUSH
25663: LD_VAR 0 12
25667: PUSH
25668: LD_VAR 0 7
25672: ARRAY
25673: PUSH
25674: LD_INT 1
25676: ARRAY
25677: PPUSH
25678: LD_VAR 0 12
25682: PUSH
25683: LD_VAR 0 7
25687: ARRAY
25688: PUSH
25689: LD_INT 2
25691: ARRAY
25692: PPUSH
25693: CALL_OW 546
25697: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
25698: LD_VAR 0 8
25702: PUSH
25703: LD_INT 1
25705: ARRAY
25706: IFTRUE 25728
25708: PUSH
25709: LD_VAR 0 8
25713: PUSH
25714: LD_INT 2
25716: ARRAY
25717: PUSH
25718: LD_VAR 0 13
25722: PUSH
25723: LD_INT 2
25725: PLUS
25726: GREATER
25727: OR
25728: IFTRUE 25750
25730: PUSH
25731: LD_VAR 0 8
25735: PUSH
25736: LD_INT 2
25738: ARRAY
25739: PUSH
25740: LD_VAR 0 13
25744: PUSH
25745: LD_INT 2
25747: MINUS
25748: LESS
25749: OR
25750: IFTRUE 25818
25752: PUSH
25753: LD_VAR 0 8
25757: PUSH
25758: LD_INT 3
25760: ARRAY
25761: PUSH
25762: LD_INT 0
25764: PUSH
25765: LD_INT 8
25767: PUSH
25768: LD_INT 9
25770: PUSH
25771: LD_INT 10
25773: PUSH
25774: LD_INT 11
25776: PUSH
25777: LD_INT 12
25779: PUSH
25780: LD_INT 13
25782: PUSH
25783: LD_INT 16
25785: PUSH
25786: LD_INT 17
25788: PUSH
25789: LD_INT 18
25791: PUSH
25792: LD_INT 19
25794: PUSH
25795: LD_INT 20
25797: PUSH
25798: LD_INT 21
25800: PUSH
25801: EMPTY
25802: LIST
25803: LIST
25804: LIST
25805: LIST
25806: LIST
25807: LIST
25808: LIST
25809: LIST
25810: LIST
25811: LIST
25812: LIST
25813: LIST
25814: LIST
25815: IN
25816: NOT
25817: OR
25818: IFTRUE 25831
25820: PUSH
25821: LD_VAR 0 8
25825: PUSH
25826: LD_INT 5
25828: ARRAY
25829: NOT
25830: OR
25831: IFTRUE 25871
25833: PUSH
25834: LD_VAR 0 8
25838: PUSH
25839: LD_INT 6
25841: ARRAY
25842: PUSH
25843: LD_INT 1
25845: PUSH
25846: LD_INT 2
25848: PUSH
25849: LD_INT 7
25851: PUSH
25852: LD_INT 9
25854: PUSH
25855: LD_INT 10
25857: PUSH
25858: LD_INT 11
25860: PUSH
25861: EMPTY
25862: LIST
25863: LIST
25864: LIST
25865: LIST
25866: LIST
25867: LIST
25868: IN
25869: NOT
25870: OR
25871: IFFALSE 25877
// exit ;
25873: POP
25874: POP
25875: GO 25962
// end ;
25877: GO 25534
25879: POP
25880: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
25881: LD_VAR 0 9
25885: PPUSH
25886: LD_VAR 0 3
25890: PPUSH
25891: LD_VAR 0 4
25895: PPUSH
25896: LD_INT 20
25898: PPUSH
25899: CALL 17781 0 4
25903: PUSH
25904: LD_INT 4
25906: ARRAY
25907: IFFALSE 25911
// exit ;
25909: GO 25962
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
25911: LD_VAR 0 2
25915: PUSH
25916: LD_INT 29
25918: PUSH
25919: LD_INT 30
25921: PUSH
25922: EMPTY
25923: LIST
25924: LIST
25925: IN
25926: IFFALSE 25950
25928: PUSH
25929: LD_VAR 0 3
25933: PPUSH
25934: LD_VAR 0 4
25938: PPUSH
25939: LD_VAR 0 9
25943: PPUSH
25944: CALL_OW 440
25948: NOT
25949: AND
25950: IFFALSE 25954
// exit ;
25952: GO 25962
// result := true ;
25954: LD_ADDR_VAR 0 6
25958: PUSH
25959: LD_INT 1
25961: ST_TO_ADDR
// end ;
25962: LD_VAR 0 6
25966: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
25967: LD_INT 0
25969: PPUSH
25970: PPUSH
25971: PPUSH
25972: PPUSH
25973: PPUSH
25974: PPUSH
25975: PPUSH
25976: PPUSH
25977: PPUSH
25978: PPUSH
25979: PPUSH
25980: PPUSH
25981: PPUSH
25982: PPUSH
25983: PPUSH
25984: PPUSH
25985: PPUSH
25986: PPUSH
25987: PPUSH
25988: PPUSH
25989: PPUSH
25990: PPUSH
25991: PPUSH
25992: PPUSH
25993: PPUSH
25994: PPUSH
25995: PPUSH
25996: PPUSH
25997: PPUSH
25998: PPUSH
25999: PPUSH
26000: PPUSH
26001: PPUSH
26002: PPUSH
26003: PPUSH
26004: PPUSH
26005: PPUSH
26006: PPUSH
26007: PPUSH
26008: PPUSH
26009: PPUSH
26010: PPUSH
26011: PPUSH
26012: PPUSH
26013: PPUSH
26014: PPUSH
26015: PPUSH
26016: PPUSH
26017: PPUSH
26018: PPUSH
26019: PPUSH
26020: PPUSH
26021: PPUSH
26022: PPUSH
26023: PPUSH
26024: PPUSH
26025: PPUSH
26026: PPUSH
// result = [ ] ;
26027: LD_ADDR_VAR 0 7
26031: PUSH
26032: EMPTY
26033: ST_TO_ADDR
// temp_list = [ ] ;
26034: LD_ADDR_VAR 0 9
26038: PUSH
26039: EMPTY
26040: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
26041: LD_VAR 0 4
26045: PUSH
26046: LD_INT 0
26048: PUSH
26049: LD_INT 1
26051: PUSH
26052: LD_INT 2
26054: PUSH
26055: LD_INT 3
26057: PUSH
26058: LD_INT 4
26060: PUSH
26061: LD_INT 5
26063: PUSH
26064: EMPTY
26065: LIST
26066: LIST
26067: LIST
26068: LIST
26069: LIST
26070: LIST
26071: IN
26072: NOT
26073: IFTRUE 26116
26075: PUSH
26076: LD_VAR 0 1
26080: PUSH
26081: LD_INT 0
26083: PUSH
26084: LD_INT 1
26086: PUSH
26087: EMPTY
26088: LIST
26089: LIST
26090: IN
26091: IFFALSE 26115
26093: PUSH
26094: LD_VAR 0 5
26098: PUSH
26099: LD_INT 1
26101: PUSH
26102: LD_INT 2
26104: PUSH
26105: LD_INT 3
26107: PUSH
26108: EMPTY
26109: LIST
26110: LIST
26111: LIST
26112: IN
26113: NOT
26114: AND
26115: OR
26116: IFFALSE 26120
// exit ;
26118: GO 44519
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
26120: LD_VAR 0 1
26124: PUSH
26125: LD_INT 6
26127: PUSH
26128: LD_INT 7
26130: PUSH
26131: LD_INT 8
26133: PUSH
26134: LD_INT 13
26136: PUSH
26137: LD_INT 12
26139: PUSH
26140: LD_INT 15
26142: PUSH
26143: LD_INT 11
26145: PUSH
26146: LD_INT 14
26148: PUSH
26149: LD_INT 10
26151: PUSH
26152: EMPTY
26153: LIST
26154: LIST
26155: LIST
26156: LIST
26157: LIST
26158: LIST
26159: LIST
26160: LIST
26161: LIST
26162: IN
26163: IFFALSE 26173
// btype = b_lab ;
26165: LD_ADDR_VAR 0 1
26169: PUSH
26170: LD_INT 6
26172: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
26173: LD_VAR 0 6
26177: PUSH
26178: LD_INT 0
26180: PUSH
26181: LD_INT 1
26183: PUSH
26184: LD_INT 2
26186: PUSH
26187: EMPTY
26188: LIST
26189: LIST
26190: LIST
26191: IN
26192: NOT
26193: IFTRUE 26261
26195: PUSH
26196: LD_VAR 0 1
26200: PUSH
26201: LD_INT 0
26203: PUSH
26204: LD_INT 1
26206: PUSH
26207: LD_INT 2
26209: PUSH
26210: LD_INT 3
26212: PUSH
26213: LD_INT 6
26215: PUSH
26216: LD_INT 36
26218: PUSH
26219: LD_INT 4
26221: PUSH
26222: LD_INT 5
26224: PUSH
26225: LD_INT 31
26227: PUSH
26228: LD_INT 32
26230: PUSH
26231: LD_INT 33
26233: PUSH
26234: EMPTY
26235: LIST
26236: LIST
26237: LIST
26238: LIST
26239: LIST
26240: LIST
26241: LIST
26242: LIST
26243: LIST
26244: LIST
26245: LIST
26246: IN
26247: NOT
26248: IFFALSE 26260
26250: PUSH
26251: LD_VAR 0 6
26255: PUSH
26256: LD_INT 1
26258: EQUAL
26259: AND
26260: OR
26261: IFTRUE 26293
26263: PUSH
26264: LD_VAR 0 1
26268: PUSH
26269: LD_INT 2
26271: PUSH
26272: LD_INT 3
26274: PUSH
26275: EMPTY
26276: LIST
26277: LIST
26278: IN
26279: NOT
26280: IFFALSE 26292
26282: PUSH
26283: LD_VAR 0 6
26287: PUSH
26288: LD_INT 2
26290: EQUAL
26291: AND
26292: OR
26293: IFFALSE 26303
// mode = 0 ;
26295: LD_ADDR_VAR 0 6
26299: PUSH
26300: LD_INT 0
26302: ST_TO_ADDR
// case mode of 0 :
26303: LD_VAR 0 6
26307: PUSH
26308: LD_INT 0
26310: DOUBLE
26311: EQUAL
26312: IFTRUE 26316
26314: GO 37769
26316: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
26317: LD_ADDR_VAR 0 11
26321: PUSH
26322: LD_INT 0
26324: PUSH
26325: LD_INT 0
26327: PUSH
26328: EMPTY
26329: LIST
26330: LIST
26331: PUSH
26332: LD_INT 0
26334: PUSH
26335: LD_INT 1
26337: NEG
26338: PUSH
26339: EMPTY
26340: LIST
26341: LIST
26342: PUSH
26343: LD_INT 1
26345: PUSH
26346: LD_INT 0
26348: PUSH
26349: EMPTY
26350: LIST
26351: LIST
26352: PUSH
26353: LD_INT 1
26355: PUSH
26356: LD_INT 1
26358: PUSH
26359: EMPTY
26360: LIST
26361: LIST
26362: PUSH
26363: LD_INT 0
26365: PUSH
26366: LD_INT 1
26368: PUSH
26369: EMPTY
26370: LIST
26371: LIST
26372: PUSH
26373: LD_INT 1
26375: NEG
26376: PUSH
26377: LD_INT 0
26379: PUSH
26380: EMPTY
26381: LIST
26382: LIST
26383: PUSH
26384: LD_INT 1
26386: NEG
26387: PUSH
26388: LD_INT 1
26390: NEG
26391: PUSH
26392: EMPTY
26393: LIST
26394: LIST
26395: PUSH
26396: LD_INT 1
26398: NEG
26399: PUSH
26400: LD_INT 2
26402: NEG
26403: PUSH
26404: EMPTY
26405: LIST
26406: LIST
26407: PUSH
26408: LD_INT 0
26410: PUSH
26411: LD_INT 2
26413: NEG
26414: PUSH
26415: EMPTY
26416: LIST
26417: LIST
26418: PUSH
26419: LD_INT 1
26421: PUSH
26422: LD_INT 1
26424: NEG
26425: PUSH
26426: EMPTY
26427: LIST
26428: LIST
26429: PUSH
26430: LD_INT 1
26432: PUSH
26433: LD_INT 2
26435: PUSH
26436: EMPTY
26437: LIST
26438: LIST
26439: PUSH
26440: LD_INT 0
26442: PUSH
26443: LD_INT 2
26445: PUSH
26446: EMPTY
26447: LIST
26448: LIST
26449: PUSH
26450: LD_INT 1
26452: NEG
26453: PUSH
26454: LD_INT 1
26456: PUSH
26457: EMPTY
26458: LIST
26459: LIST
26460: PUSH
26461: LD_INT 1
26463: PUSH
26464: LD_INT 3
26466: PUSH
26467: EMPTY
26468: LIST
26469: LIST
26470: PUSH
26471: LD_INT 0
26473: PUSH
26474: LD_INT 3
26476: PUSH
26477: EMPTY
26478: LIST
26479: LIST
26480: PUSH
26481: LD_INT 1
26483: NEG
26484: PUSH
26485: LD_INT 2
26487: PUSH
26488: EMPTY
26489: LIST
26490: LIST
26491: PUSH
26492: EMPTY
26493: LIST
26494: LIST
26495: LIST
26496: LIST
26497: LIST
26498: LIST
26499: LIST
26500: LIST
26501: LIST
26502: LIST
26503: LIST
26504: LIST
26505: LIST
26506: LIST
26507: LIST
26508: LIST
26509: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26510: LD_ADDR_VAR 0 12
26514: PUSH
26515: LD_INT 0
26517: PUSH
26518: LD_INT 0
26520: PUSH
26521: EMPTY
26522: LIST
26523: LIST
26524: PUSH
26525: LD_INT 0
26527: PUSH
26528: LD_INT 1
26530: NEG
26531: PUSH
26532: EMPTY
26533: LIST
26534: LIST
26535: PUSH
26536: LD_INT 1
26538: PUSH
26539: LD_INT 0
26541: PUSH
26542: EMPTY
26543: LIST
26544: LIST
26545: PUSH
26546: LD_INT 1
26548: PUSH
26549: LD_INT 1
26551: PUSH
26552: EMPTY
26553: LIST
26554: LIST
26555: PUSH
26556: LD_INT 0
26558: PUSH
26559: LD_INT 1
26561: PUSH
26562: EMPTY
26563: LIST
26564: LIST
26565: PUSH
26566: LD_INT 1
26568: NEG
26569: PUSH
26570: LD_INT 0
26572: PUSH
26573: EMPTY
26574: LIST
26575: LIST
26576: PUSH
26577: LD_INT 1
26579: NEG
26580: PUSH
26581: LD_INT 1
26583: NEG
26584: PUSH
26585: EMPTY
26586: LIST
26587: LIST
26588: PUSH
26589: LD_INT 1
26591: PUSH
26592: LD_INT 1
26594: NEG
26595: PUSH
26596: EMPTY
26597: LIST
26598: LIST
26599: PUSH
26600: LD_INT 2
26602: PUSH
26603: LD_INT 0
26605: PUSH
26606: EMPTY
26607: LIST
26608: LIST
26609: PUSH
26610: LD_INT 2
26612: PUSH
26613: LD_INT 1
26615: PUSH
26616: EMPTY
26617: LIST
26618: LIST
26619: PUSH
26620: LD_INT 1
26622: NEG
26623: PUSH
26624: LD_INT 1
26626: PUSH
26627: EMPTY
26628: LIST
26629: LIST
26630: PUSH
26631: LD_INT 2
26633: NEG
26634: PUSH
26635: LD_INT 0
26637: PUSH
26638: EMPTY
26639: LIST
26640: LIST
26641: PUSH
26642: LD_INT 2
26644: NEG
26645: PUSH
26646: LD_INT 1
26648: NEG
26649: PUSH
26650: EMPTY
26651: LIST
26652: LIST
26653: PUSH
26654: LD_INT 2
26656: NEG
26657: PUSH
26658: LD_INT 1
26660: PUSH
26661: EMPTY
26662: LIST
26663: LIST
26664: PUSH
26665: LD_INT 3
26667: NEG
26668: PUSH
26669: LD_INT 0
26671: PUSH
26672: EMPTY
26673: LIST
26674: LIST
26675: PUSH
26676: LD_INT 3
26678: NEG
26679: PUSH
26680: LD_INT 1
26682: NEG
26683: PUSH
26684: EMPTY
26685: LIST
26686: LIST
26687: PUSH
26688: EMPTY
26689: LIST
26690: LIST
26691: LIST
26692: LIST
26693: LIST
26694: LIST
26695: LIST
26696: LIST
26697: LIST
26698: LIST
26699: LIST
26700: LIST
26701: LIST
26702: LIST
26703: LIST
26704: LIST
26705: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26706: LD_ADDR_VAR 0 13
26710: PUSH
26711: LD_INT 0
26713: PUSH
26714: LD_INT 0
26716: PUSH
26717: EMPTY
26718: LIST
26719: LIST
26720: PUSH
26721: LD_INT 0
26723: PUSH
26724: LD_INT 1
26726: NEG
26727: PUSH
26728: EMPTY
26729: LIST
26730: LIST
26731: PUSH
26732: LD_INT 1
26734: PUSH
26735: LD_INT 0
26737: PUSH
26738: EMPTY
26739: LIST
26740: LIST
26741: PUSH
26742: LD_INT 1
26744: PUSH
26745: LD_INT 1
26747: PUSH
26748: EMPTY
26749: LIST
26750: LIST
26751: PUSH
26752: LD_INT 0
26754: PUSH
26755: LD_INT 1
26757: PUSH
26758: EMPTY
26759: LIST
26760: LIST
26761: PUSH
26762: LD_INT 1
26764: NEG
26765: PUSH
26766: LD_INT 0
26768: PUSH
26769: EMPTY
26770: LIST
26771: LIST
26772: PUSH
26773: LD_INT 1
26775: NEG
26776: PUSH
26777: LD_INT 1
26779: NEG
26780: PUSH
26781: EMPTY
26782: LIST
26783: LIST
26784: PUSH
26785: LD_INT 1
26787: NEG
26788: PUSH
26789: LD_INT 2
26791: NEG
26792: PUSH
26793: EMPTY
26794: LIST
26795: LIST
26796: PUSH
26797: LD_INT 2
26799: PUSH
26800: LD_INT 1
26802: PUSH
26803: EMPTY
26804: LIST
26805: LIST
26806: PUSH
26807: LD_INT 2
26809: PUSH
26810: LD_INT 2
26812: PUSH
26813: EMPTY
26814: LIST
26815: LIST
26816: PUSH
26817: LD_INT 1
26819: PUSH
26820: LD_INT 2
26822: PUSH
26823: EMPTY
26824: LIST
26825: LIST
26826: PUSH
26827: LD_INT 2
26829: NEG
26830: PUSH
26831: LD_INT 1
26833: NEG
26834: PUSH
26835: EMPTY
26836: LIST
26837: LIST
26838: PUSH
26839: LD_INT 2
26841: NEG
26842: PUSH
26843: LD_INT 2
26845: NEG
26846: PUSH
26847: EMPTY
26848: LIST
26849: LIST
26850: PUSH
26851: LD_INT 2
26853: NEG
26854: PUSH
26855: LD_INT 3
26857: NEG
26858: PUSH
26859: EMPTY
26860: LIST
26861: LIST
26862: PUSH
26863: LD_INT 3
26865: NEG
26866: PUSH
26867: LD_INT 2
26869: NEG
26870: PUSH
26871: EMPTY
26872: LIST
26873: LIST
26874: PUSH
26875: LD_INT 3
26877: NEG
26878: PUSH
26879: LD_INT 3
26881: NEG
26882: PUSH
26883: EMPTY
26884: LIST
26885: LIST
26886: PUSH
26887: EMPTY
26888: LIST
26889: LIST
26890: LIST
26891: LIST
26892: LIST
26893: LIST
26894: LIST
26895: LIST
26896: LIST
26897: LIST
26898: LIST
26899: LIST
26900: LIST
26901: LIST
26902: LIST
26903: LIST
26904: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
26905: LD_ADDR_VAR 0 14
26909: PUSH
26910: LD_INT 0
26912: PUSH
26913: LD_INT 0
26915: PUSH
26916: EMPTY
26917: LIST
26918: LIST
26919: PUSH
26920: LD_INT 0
26922: PUSH
26923: LD_INT 1
26925: NEG
26926: PUSH
26927: EMPTY
26928: LIST
26929: LIST
26930: PUSH
26931: LD_INT 1
26933: PUSH
26934: LD_INT 0
26936: PUSH
26937: EMPTY
26938: LIST
26939: LIST
26940: PUSH
26941: LD_INT 1
26943: PUSH
26944: LD_INT 1
26946: PUSH
26947: EMPTY
26948: LIST
26949: LIST
26950: PUSH
26951: LD_INT 0
26953: PUSH
26954: LD_INT 1
26956: PUSH
26957: EMPTY
26958: LIST
26959: LIST
26960: PUSH
26961: LD_INT 1
26963: NEG
26964: PUSH
26965: LD_INT 0
26967: PUSH
26968: EMPTY
26969: LIST
26970: LIST
26971: PUSH
26972: LD_INT 1
26974: NEG
26975: PUSH
26976: LD_INT 1
26978: NEG
26979: PUSH
26980: EMPTY
26981: LIST
26982: LIST
26983: PUSH
26984: LD_INT 1
26986: NEG
26987: PUSH
26988: LD_INT 2
26990: NEG
26991: PUSH
26992: EMPTY
26993: LIST
26994: LIST
26995: PUSH
26996: LD_INT 0
26998: PUSH
26999: LD_INT 2
27001: NEG
27002: PUSH
27003: EMPTY
27004: LIST
27005: LIST
27006: PUSH
27007: LD_INT 1
27009: PUSH
27010: LD_INT 1
27012: NEG
27013: PUSH
27014: EMPTY
27015: LIST
27016: LIST
27017: PUSH
27018: LD_INT 1
27020: PUSH
27021: LD_INT 2
27023: PUSH
27024: EMPTY
27025: LIST
27026: LIST
27027: PUSH
27028: LD_INT 0
27030: PUSH
27031: LD_INT 2
27033: PUSH
27034: EMPTY
27035: LIST
27036: LIST
27037: PUSH
27038: LD_INT 1
27040: NEG
27041: PUSH
27042: LD_INT 1
27044: PUSH
27045: EMPTY
27046: LIST
27047: LIST
27048: PUSH
27049: LD_INT 1
27051: NEG
27052: PUSH
27053: LD_INT 3
27055: NEG
27056: PUSH
27057: EMPTY
27058: LIST
27059: LIST
27060: PUSH
27061: LD_INT 0
27063: PUSH
27064: LD_INT 3
27066: NEG
27067: PUSH
27068: EMPTY
27069: LIST
27070: LIST
27071: PUSH
27072: LD_INT 1
27074: PUSH
27075: LD_INT 2
27077: NEG
27078: PUSH
27079: EMPTY
27080: LIST
27081: LIST
27082: PUSH
27083: EMPTY
27084: LIST
27085: LIST
27086: LIST
27087: LIST
27088: LIST
27089: LIST
27090: LIST
27091: LIST
27092: LIST
27093: LIST
27094: LIST
27095: LIST
27096: LIST
27097: LIST
27098: LIST
27099: LIST
27100: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27101: LD_ADDR_VAR 0 15
27105: PUSH
27106: LD_INT 0
27108: PUSH
27109: LD_INT 0
27111: PUSH
27112: EMPTY
27113: LIST
27114: LIST
27115: PUSH
27116: LD_INT 0
27118: PUSH
27119: LD_INT 1
27121: NEG
27122: PUSH
27123: EMPTY
27124: LIST
27125: LIST
27126: PUSH
27127: LD_INT 1
27129: PUSH
27130: LD_INT 0
27132: PUSH
27133: EMPTY
27134: LIST
27135: LIST
27136: PUSH
27137: LD_INT 1
27139: PUSH
27140: LD_INT 1
27142: PUSH
27143: EMPTY
27144: LIST
27145: LIST
27146: PUSH
27147: LD_INT 0
27149: PUSH
27150: LD_INT 1
27152: PUSH
27153: EMPTY
27154: LIST
27155: LIST
27156: PUSH
27157: LD_INT 1
27159: NEG
27160: PUSH
27161: LD_INT 0
27163: PUSH
27164: EMPTY
27165: LIST
27166: LIST
27167: PUSH
27168: LD_INT 1
27170: NEG
27171: PUSH
27172: LD_INT 1
27174: NEG
27175: PUSH
27176: EMPTY
27177: LIST
27178: LIST
27179: PUSH
27180: LD_INT 1
27182: PUSH
27183: LD_INT 1
27185: NEG
27186: PUSH
27187: EMPTY
27188: LIST
27189: LIST
27190: PUSH
27191: LD_INT 2
27193: PUSH
27194: LD_INT 0
27196: PUSH
27197: EMPTY
27198: LIST
27199: LIST
27200: PUSH
27201: LD_INT 2
27203: PUSH
27204: LD_INT 1
27206: PUSH
27207: EMPTY
27208: LIST
27209: LIST
27210: PUSH
27211: LD_INT 1
27213: NEG
27214: PUSH
27215: LD_INT 1
27217: PUSH
27218: EMPTY
27219: LIST
27220: LIST
27221: PUSH
27222: LD_INT 2
27224: NEG
27225: PUSH
27226: LD_INT 0
27228: PUSH
27229: EMPTY
27230: LIST
27231: LIST
27232: PUSH
27233: LD_INT 2
27235: NEG
27236: PUSH
27237: LD_INT 1
27239: NEG
27240: PUSH
27241: EMPTY
27242: LIST
27243: LIST
27244: PUSH
27245: LD_INT 2
27247: PUSH
27248: LD_INT 1
27250: NEG
27251: PUSH
27252: EMPTY
27253: LIST
27254: LIST
27255: PUSH
27256: LD_INT 3
27258: PUSH
27259: LD_INT 0
27261: PUSH
27262: EMPTY
27263: LIST
27264: LIST
27265: PUSH
27266: LD_INT 3
27268: PUSH
27269: LD_INT 1
27271: PUSH
27272: EMPTY
27273: LIST
27274: LIST
27275: PUSH
27276: EMPTY
27277: LIST
27278: LIST
27279: LIST
27280: LIST
27281: LIST
27282: LIST
27283: LIST
27284: LIST
27285: LIST
27286: LIST
27287: LIST
27288: LIST
27289: LIST
27290: LIST
27291: LIST
27292: LIST
27293: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27294: LD_ADDR_VAR 0 16
27298: PUSH
27299: LD_INT 0
27301: PUSH
27302: LD_INT 0
27304: PUSH
27305: EMPTY
27306: LIST
27307: LIST
27308: PUSH
27309: LD_INT 0
27311: PUSH
27312: LD_INT 1
27314: NEG
27315: PUSH
27316: EMPTY
27317: LIST
27318: LIST
27319: PUSH
27320: LD_INT 1
27322: PUSH
27323: LD_INT 0
27325: PUSH
27326: EMPTY
27327: LIST
27328: LIST
27329: PUSH
27330: LD_INT 1
27332: PUSH
27333: LD_INT 1
27335: PUSH
27336: EMPTY
27337: LIST
27338: LIST
27339: PUSH
27340: LD_INT 0
27342: PUSH
27343: LD_INT 1
27345: PUSH
27346: EMPTY
27347: LIST
27348: LIST
27349: PUSH
27350: LD_INT 1
27352: NEG
27353: PUSH
27354: LD_INT 0
27356: PUSH
27357: EMPTY
27358: LIST
27359: LIST
27360: PUSH
27361: LD_INT 1
27363: NEG
27364: PUSH
27365: LD_INT 1
27367: NEG
27368: PUSH
27369: EMPTY
27370: LIST
27371: LIST
27372: PUSH
27373: LD_INT 1
27375: NEG
27376: PUSH
27377: LD_INT 2
27379: NEG
27380: PUSH
27381: EMPTY
27382: LIST
27383: LIST
27384: PUSH
27385: LD_INT 2
27387: PUSH
27388: LD_INT 1
27390: PUSH
27391: EMPTY
27392: LIST
27393: LIST
27394: PUSH
27395: LD_INT 2
27397: PUSH
27398: LD_INT 2
27400: PUSH
27401: EMPTY
27402: LIST
27403: LIST
27404: PUSH
27405: LD_INT 1
27407: PUSH
27408: LD_INT 2
27410: PUSH
27411: EMPTY
27412: LIST
27413: LIST
27414: PUSH
27415: LD_INT 2
27417: NEG
27418: PUSH
27419: LD_INT 1
27421: NEG
27422: PUSH
27423: EMPTY
27424: LIST
27425: LIST
27426: PUSH
27427: LD_INT 2
27429: NEG
27430: PUSH
27431: LD_INT 2
27433: NEG
27434: PUSH
27435: EMPTY
27436: LIST
27437: LIST
27438: PUSH
27439: LD_INT 3
27441: PUSH
27442: LD_INT 2
27444: PUSH
27445: EMPTY
27446: LIST
27447: LIST
27448: PUSH
27449: LD_INT 3
27451: PUSH
27452: LD_INT 3
27454: PUSH
27455: EMPTY
27456: LIST
27457: LIST
27458: PUSH
27459: LD_INT 2
27461: PUSH
27462: LD_INT 3
27464: PUSH
27465: EMPTY
27466: LIST
27467: LIST
27468: PUSH
27469: EMPTY
27470: LIST
27471: LIST
27472: LIST
27473: LIST
27474: LIST
27475: LIST
27476: LIST
27477: LIST
27478: LIST
27479: LIST
27480: LIST
27481: LIST
27482: LIST
27483: LIST
27484: LIST
27485: LIST
27486: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27487: LD_ADDR_VAR 0 17
27491: PUSH
27492: LD_INT 0
27494: PUSH
27495: LD_INT 0
27497: PUSH
27498: EMPTY
27499: LIST
27500: LIST
27501: PUSH
27502: LD_INT 0
27504: PUSH
27505: LD_INT 1
27507: NEG
27508: PUSH
27509: EMPTY
27510: LIST
27511: LIST
27512: PUSH
27513: LD_INT 1
27515: PUSH
27516: LD_INT 0
27518: PUSH
27519: EMPTY
27520: LIST
27521: LIST
27522: PUSH
27523: LD_INT 1
27525: PUSH
27526: LD_INT 1
27528: PUSH
27529: EMPTY
27530: LIST
27531: LIST
27532: PUSH
27533: LD_INT 0
27535: PUSH
27536: LD_INT 1
27538: PUSH
27539: EMPTY
27540: LIST
27541: LIST
27542: PUSH
27543: LD_INT 1
27545: NEG
27546: PUSH
27547: LD_INT 0
27549: PUSH
27550: EMPTY
27551: LIST
27552: LIST
27553: PUSH
27554: LD_INT 1
27556: NEG
27557: PUSH
27558: LD_INT 1
27560: NEG
27561: PUSH
27562: EMPTY
27563: LIST
27564: LIST
27565: PUSH
27566: LD_INT 1
27568: NEG
27569: PUSH
27570: LD_INT 2
27572: NEG
27573: PUSH
27574: EMPTY
27575: LIST
27576: LIST
27577: PUSH
27578: LD_INT 0
27580: PUSH
27581: LD_INT 2
27583: NEG
27584: PUSH
27585: EMPTY
27586: LIST
27587: LIST
27588: PUSH
27589: LD_INT 1
27591: PUSH
27592: LD_INT 1
27594: NEG
27595: PUSH
27596: EMPTY
27597: LIST
27598: LIST
27599: PUSH
27600: LD_INT 2
27602: PUSH
27603: LD_INT 0
27605: PUSH
27606: EMPTY
27607: LIST
27608: LIST
27609: PUSH
27610: LD_INT 2
27612: PUSH
27613: LD_INT 1
27615: PUSH
27616: EMPTY
27617: LIST
27618: LIST
27619: PUSH
27620: LD_INT 2
27622: PUSH
27623: LD_INT 2
27625: PUSH
27626: EMPTY
27627: LIST
27628: LIST
27629: PUSH
27630: LD_INT 1
27632: PUSH
27633: LD_INT 2
27635: PUSH
27636: EMPTY
27637: LIST
27638: LIST
27639: PUSH
27640: LD_INT 0
27642: PUSH
27643: LD_INT 2
27645: PUSH
27646: EMPTY
27647: LIST
27648: LIST
27649: PUSH
27650: LD_INT 1
27652: NEG
27653: PUSH
27654: LD_INT 1
27656: PUSH
27657: EMPTY
27658: LIST
27659: LIST
27660: PUSH
27661: LD_INT 2
27663: NEG
27664: PUSH
27665: LD_INT 0
27667: PUSH
27668: EMPTY
27669: LIST
27670: LIST
27671: PUSH
27672: LD_INT 2
27674: NEG
27675: PUSH
27676: LD_INT 1
27678: NEG
27679: PUSH
27680: EMPTY
27681: LIST
27682: LIST
27683: PUSH
27684: LD_INT 2
27686: NEG
27687: PUSH
27688: LD_INT 2
27690: NEG
27691: PUSH
27692: EMPTY
27693: LIST
27694: LIST
27695: PUSH
27696: EMPTY
27697: LIST
27698: LIST
27699: LIST
27700: LIST
27701: LIST
27702: LIST
27703: LIST
27704: LIST
27705: LIST
27706: LIST
27707: LIST
27708: LIST
27709: LIST
27710: LIST
27711: LIST
27712: LIST
27713: LIST
27714: LIST
27715: LIST
27716: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27717: LD_ADDR_VAR 0 18
27721: PUSH
27722: LD_INT 0
27724: PUSH
27725: LD_INT 0
27727: PUSH
27728: EMPTY
27729: LIST
27730: LIST
27731: PUSH
27732: LD_INT 0
27734: PUSH
27735: LD_INT 1
27737: NEG
27738: PUSH
27739: EMPTY
27740: LIST
27741: LIST
27742: PUSH
27743: LD_INT 1
27745: PUSH
27746: LD_INT 0
27748: PUSH
27749: EMPTY
27750: LIST
27751: LIST
27752: PUSH
27753: LD_INT 1
27755: PUSH
27756: LD_INT 1
27758: PUSH
27759: EMPTY
27760: LIST
27761: LIST
27762: PUSH
27763: LD_INT 0
27765: PUSH
27766: LD_INT 1
27768: PUSH
27769: EMPTY
27770: LIST
27771: LIST
27772: PUSH
27773: LD_INT 1
27775: NEG
27776: PUSH
27777: LD_INT 0
27779: PUSH
27780: EMPTY
27781: LIST
27782: LIST
27783: PUSH
27784: LD_INT 1
27786: NEG
27787: PUSH
27788: LD_INT 1
27790: NEG
27791: PUSH
27792: EMPTY
27793: LIST
27794: LIST
27795: PUSH
27796: LD_INT 1
27798: NEG
27799: PUSH
27800: LD_INT 2
27802: NEG
27803: PUSH
27804: EMPTY
27805: LIST
27806: LIST
27807: PUSH
27808: LD_INT 0
27810: PUSH
27811: LD_INT 2
27813: NEG
27814: PUSH
27815: EMPTY
27816: LIST
27817: LIST
27818: PUSH
27819: LD_INT 1
27821: PUSH
27822: LD_INT 1
27824: NEG
27825: PUSH
27826: EMPTY
27827: LIST
27828: LIST
27829: PUSH
27830: LD_INT 2
27832: PUSH
27833: LD_INT 0
27835: PUSH
27836: EMPTY
27837: LIST
27838: LIST
27839: PUSH
27840: LD_INT 2
27842: PUSH
27843: LD_INT 1
27845: PUSH
27846: EMPTY
27847: LIST
27848: LIST
27849: PUSH
27850: LD_INT 2
27852: PUSH
27853: LD_INT 2
27855: PUSH
27856: EMPTY
27857: LIST
27858: LIST
27859: PUSH
27860: LD_INT 1
27862: PUSH
27863: LD_INT 2
27865: PUSH
27866: EMPTY
27867: LIST
27868: LIST
27869: PUSH
27870: LD_INT 0
27872: PUSH
27873: LD_INT 2
27875: PUSH
27876: EMPTY
27877: LIST
27878: LIST
27879: PUSH
27880: LD_INT 1
27882: NEG
27883: PUSH
27884: LD_INT 1
27886: PUSH
27887: EMPTY
27888: LIST
27889: LIST
27890: PUSH
27891: LD_INT 2
27893: NEG
27894: PUSH
27895: LD_INT 0
27897: PUSH
27898: EMPTY
27899: LIST
27900: LIST
27901: PUSH
27902: LD_INT 2
27904: NEG
27905: PUSH
27906: LD_INT 1
27908: NEG
27909: PUSH
27910: EMPTY
27911: LIST
27912: LIST
27913: PUSH
27914: LD_INT 2
27916: NEG
27917: PUSH
27918: LD_INT 2
27920: NEG
27921: PUSH
27922: EMPTY
27923: LIST
27924: LIST
27925: PUSH
27926: EMPTY
27927: LIST
27928: LIST
27929: LIST
27930: LIST
27931: LIST
27932: LIST
27933: LIST
27934: LIST
27935: LIST
27936: LIST
27937: LIST
27938: LIST
27939: LIST
27940: LIST
27941: LIST
27942: LIST
27943: LIST
27944: LIST
27945: LIST
27946: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27947: LD_ADDR_VAR 0 19
27951: PUSH
27952: LD_INT 0
27954: PUSH
27955: LD_INT 0
27957: PUSH
27958: EMPTY
27959: LIST
27960: LIST
27961: PUSH
27962: LD_INT 0
27964: PUSH
27965: LD_INT 1
27967: NEG
27968: PUSH
27969: EMPTY
27970: LIST
27971: LIST
27972: PUSH
27973: LD_INT 1
27975: PUSH
27976: LD_INT 0
27978: PUSH
27979: EMPTY
27980: LIST
27981: LIST
27982: PUSH
27983: LD_INT 1
27985: PUSH
27986: LD_INT 1
27988: PUSH
27989: EMPTY
27990: LIST
27991: LIST
27992: PUSH
27993: LD_INT 0
27995: PUSH
27996: LD_INT 1
27998: PUSH
27999: EMPTY
28000: LIST
28001: LIST
28002: PUSH
28003: LD_INT 1
28005: NEG
28006: PUSH
28007: LD_INT 0
28009: PUSH
28010: EMPTY
28011: LIST
28012: LIST
28013: PUSH
28014: LD_INT 1
28016: NEG
28017: PUSH
28018: LD_INT 1
28020: NEG
28021: PUSH
28022: EMPTY
28023: LIST
28024: LIST
28025: PUSH
28026: LD_INT 1
28028: NEG
28029: PUSH
28030: LD_INT 2
28032: NEG
28033: PUSH
28034: EMPTY
28035: LIST
28036: LIST
28037: PUSH
28038: LD_INT 0
28040: PUSH
28041: LD_INT 2
28043: NEG
28044: PUSH
28045: EMPTY
28046: LIST
28047: LIST
28048: PUSH
28049: LD_INT 1
28051: PUSH
28052: LD_INT 1
28054: NEG
28055: PUSH
28056: EMPTY
28057: LIST
28058: LIST
28059: PUSH
28060: LD_INT 2
28062: PUSH
28063: LD_INT 0
28065: PUSH
28066: EMPTY
28067: LIST
28068: LIST
28069: PUSH
28070: LD_INT 2
28072: PUSH
28073: LD_INT 1
28075: PUSH
28076: EMPTY
28077: LIST
28078: LIST
28079: PUSH
28080: LD_INT 2
28082: PUSH
28083: LD_INT 2
28085: PUSH
28086: EMPTY
28087: LIST
28088: LIST
28089: PUSH
28090: LD_INT 1
28092: PUSH
28093: LD_INT 2
28095: PUSH
28096: EMPTY
28097: LIST
28098: LIST
28099: PUSH
28100: LD_INT 0
28102: PUSH
28103: LD_INT 2
28105: PUSH
28106: EMPTY
28107: LIST
28108: LIST
28109: PUSH
28110: LD_INT 1
28112: NEG
28113: PUSH
28114: LD_INT 1
28116: PUSH
28117: EMPTY
28118: LIST
28119: LIST
28120: PUSH
28121: LD_INT 2
28123: NEG
28124: PUSH
28125: LD_INT 0
28127: PUSH
28128: EMPTY
28129: LIST
28130: LIST
28131: PUSH
28132: LD_INT 2
28134: NEG
28135: PUSH
28136: LD_INT 1
28138: NEG
28139: PUSH
28140: EMPTY
28141: LIST
28142: LIST
28143: PUSH
28144: LD_INT 2
28146: NEG
28147: PUSH
28148: LD_INT 2
28150: NEG
28151: PUSH
28152: EMPTY
28153: LIST
28154: LIST
28155: PUSH
28156: EMPTY
28157: LIST
28158: LIST
28159: LIST
28160: LIST
28161: LIST
28162: LIST
28163: LIST
28164: LIST
28165: LIST
28166: LIST
28167: LIST
28168: LIST
28169: LIST
28170: LIST
28171: LIST
28172: LIST
28173: LIST
28174: LIST
28175: LIST
28176: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28177: LD_ADDR_VAR 0 20
28181: PUSH
28182: LD_INT 0
28184: PUSH
28185: LD_INT 0
28187: PUSH
28188: EMPTY
28189: LIST
28190: LIST
28191: PUSH
28192: LD_INT 0
28194: PUSH
28195: LD_INT 1
28197: NEG
28198: PUSH
28199: EMPTY
28200: LIST
28201: LIST
28202: PUSH
28203: LD_INT 1
28205: PUSH
28206: LD_INT 0
28208: PUSH
28209: EMPTY
28210: LIST
28211: LIST
28212: PUSH
28213: LD_INT 1
28215: PUSH
28216: LD_INT 1
28218: PUSH
28219: EMPTY
28220: LIST
28221: LIST
28222: PUSH
28223: LD_INT 0
28225: PUSH
28226: LD_INT 1
28228: PUSH
28229: EMPTY
28230: LIST
28231: LIST
28232: PUSH
28233: LD_INT 1
28235: NEG
28236: PUSH
28237: LD_INT 0
28239: PUSH
28240: EMPTY
28241: LIST
28242: LIST
28243: PUSH
28244: LD_INT 1
28246: NEG
28247: PUSH
28248: LD_INT 1
28250: NEG
28251: PUSH
28252: EMPTY
28253: LIST
28254: LIST
28255: PUSH
28256: LD_INT 1
28258: NEG
28259: PUSH
28260: LD_INT 2
28262: NEG
28263: PUSH
28264: EMPTY
28265: LIST
28266: LIST
28267: PUSH
28268: LD_INT 0
28270: PUSH
28271: LD_INT 2
28273: NEG
28274: PUSH
28275: EMPTY
28276: LIST
28277: LIST
28278: PUSH
28279: LD_INT 1
28281: PUSH
28282: LD_INT 1
28284: NEG
28285: PUSH
28286: EMPTY
28287: LIST
28288: LIST
28289: PUSH
28290: LD_INT 2
28292: PUSH
28293: LD_INT 0
28295: PUSH
28296: EMPTY
28297: LIST
28298: LIST
28299: PUSH
28300: LD_INT 2
28302: PUSH
28303: LD_INT 1
28305: PUSH
28306: EMPTY
28307: LIST
28308: LIST
28309: PUSH
28310: LD_INT 2
28312: PUSH
28313: LD_INT 2
28315: PUSH
28316: EMPTY
28317: LIST
28318: LIST
28319: PUSH
28320: LD_INT 1
28322: PUSH
28323: LD_INT 2
28325: PUSH
28326: EMPTY
28327: LIST
28328: LIST
28329: PUSH
28330: LD_INT 0
28332: PUSH
28333: LD_INT 2
28335: PUSH
28336: EMPTY
28337: LIST
28338: LIST
28339: PUSH
28340: LD_INT 1
28342: NEG
28343: PUSH
28344: LD_INT 1
28346: PUSH
28347: EMPTY
28348: LIST
28349: LIST
28350: PUSH
28351: LD_INT 2
28353: NEG
28354: PUSH
28355: LD_INT 0
28357: PUSH
28358: EMPTY
28359: LIST
28360: LIST
28361: PUSH
28362: LD_INT 2
28364: NEG
28365: PUSH
28366: LD_INT 1
28368: NEG
28369: PUSH
28370: EMPTY
28371: LIST
28372: LIST
28373: PUSH
28374: LD_INT 2
28376: NEG
28377: PUSH
28378: LD_INT 2
28380: NEG
28381: PUSH
28382: EMPTY
28383: LIST
28384: LIST
28385: PUSH
28386: EMPTY
28387: LIST
28388: LIST
28389: LIST
28390: LIST
28391: LIST
28392: LIST
28393: LIST
28394: LIST
28395: LIST
28396: LIST
28397: LIST
28398: LIST
28399: LIST
28400: LIST
28401: LIST
28402: LIST
28403: LIST
28404: LIST
28405: LIST
28406: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28407: LD_ADDR_VAR 0 21
28411: PUSH
28412: LD_INT 0
28414: PUSH
28415: LD_INT 0
28417: PUSH
28418: EMPTY
28419: LIST
28420: LIST
28421: PUSH
28422: LD_INT 0
28424: PUSH
28425: LD_INT 1
28427: NEG
28428: PUSH
28429: EMPTY
28430: LIST
28431: LIST
28432: PUSH
28433: LD_INT 1
28435: PUSH
28436: LD_INT 0
28438: PUSH
28439: EMPTY
28440: LIST
28441: LIST
28442: PUSH
28443: LD_INT 1
28445: PUSH
28446: LD_INT 1
28448: PUSH
28449: EMPTY
28450: LIST
28451: LIST
28452: PUSH
28453: LD_INT 0
28455: PUSH
28456: LD_INT 1
28458: PUSH
28459: EMPTY
28460: LIST
28461: LIST
28462: PUSH
28463: LD_INT 1
28465: NEG
28466: PUSH
28467: LD_INT 0
28469: PUSH
28470: EMPTY
28471: LIST
28472: LIST
28473: PUSH
28474: LD_INT 1
28476: NEG
28477: PUSH
28478: LD_INT 1
28480: NEG
28481: PUSH
28482: EMPTY
28483: LIST
28484: LIST
28485: PUSH
28486: LD_INT 1
28488: NEG
28489: PUSH
28490: LD_INT 2
28492: NEG
28493: PUSH
28494: EMPTY
28495: LIST
28496: LIST
28497: PUSH
28498: LD_INT 0
28500: PUSH
28501: LD_INT 2
28503: NEG
28504: PUSH
28505: EMPTY
28506: LIST
28507: LIST
28508: PUSH
28509: LD_INT 1
28511: PUSH
28512: LD_INT 1
28514: NEG
28515: PUSH
28516: EMPTY
28517: LIST
28518: LIST
28519: PUSH
28520: LD_INT 2
28522: PUSH
28523: LD_INT 0
28525: PUSH
28526: EMPTY
28527: LIST
28528: LIST
28529: PUSH
28530: LD_INT 2
28532: PUSH
28533: LD_INT 1
28535: PUSH
28536: EMPTY
28537: LIST
28538: LIST
28539: PUSH
28540: LD_INT 2
28542: PUSH
28543: LD_INT 2
28545: PUSH
28546: EMPTY
28547: LIST
28548: LIST
28549: PUSH
28550: LD_INT 1
28552: PUSH
28553: LD_INT 2
28555: PUSH
28556: EMPTY
28557: LIST
28558: LIST
28559: PUSH
28560: LD_INT 0
28562: PUSH
28563: LD_INT 2
28565: PUSH
28566: EMPTY
28567: LIST
28568: LIST
28569: PUSH
28570: LD_INT 1
28572: NEG
28573: PUSH
28574: LD_INT 1
28576: PUSH
28577: EMPTY
28578: LIST
28579: LIST
28580: PUSH
28581: LD_INT 2
28583: NEG
28584: PUSH
28585: LD_INT 0
28587: PUSH
28588: EMPTY
28589: LIST
28590: LIST
28591: PUSH
28592: LD_INT 2
28594: NEG
28595: PUSH
28596: LD_INT 1
28598: NEG
28599: PUSH
28600: EMPTY
28601: LIST
28602: LIST
28603: PUSH
28604: LD_INT 2
28606: NEG
28607: PUSH
28608: LD_INT 2
28610: NEG
28611: PUSH
28612: EMPTY
28613: LIST
28614: LIST
28615: PUSH
28616: EMPTY
28617: LIST
28618: LIST
28619: LIST
28620: LIST
28621: LIST
28622: LIST
28623: LIST
28624: LIST
28625: LIST
28626: LIST
28627: LIST
28628: LIST
28629: LIST
28630: LIST
28631: LIST
28632: LIST
28633: LIST
28634: LIST
28635: LIST
28636: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28637: LD_ADDR_VAR 0 22
28641: PUSH
28642: LD_INT 0
28644: PUSH
28645: LD_INT 0
28647: PUSH
28648: EMPTY
28649: LIST
28650: LIST
28651: PUSH
28652: LD_INT 0
28654: PUSH
28655: LD_INT 1
28657: NEG
28658: PUSH
28659: EMPTY
28660: LIST
28661: LIST
28662: PUSH
28663: LD_INT 1
28665: PUSH
28666: LD_INT 0
28668: PUSH
28669: EMPTY
28670: LIST
28671: LIST
28672: PUSH
28673: LD_INT 1
28675: PUSH
28676: LD_INT 1
28678: PUSH
28679: EMPTY
28680: LIST
28681: LIST
28682: PUSH
28683: LD_INT 0
28685: PUSH
28686: LD_INT 1
28688: PUSH
28689: EMPTY
28690: LIST
28691: LIST
28692: PUSH
28693: LD_INT 1
28695: NEG
28696: PUSH
28697: LD_INT 0
28699: PUSH
28700: EMPTY
28701: LIST
28702: LIST
28703: PUSH
28704: LD_INT 1
28706: NEG
28707: PUSH
28708: LD_INT 1
28710: NEG
28711: PUSH
28712: EMPTY
28713: LIST
28714: LIST
28715: PUSH
28716: LD_INT 1
28718: NEG
28719: PUSH
28720: LD_INT 2
28722: NEG
28723: PUSH
28724: EMPTY
28725: LIST
28726: LIST
28727: PUSH
28728: LD_INT 0
28730: PUSH
28731: LD_INT 2
28733: NEG
28734: PUSH
28735: EMPTY
28736: LIST
28737: LIST
28738: PUSH
28739: LD_INT 1
28741: PUSH
28742: LD_INT 1
28744: NEG
28745: PUSH
28746: EMPTY
28747: LIST
28748: LIST
28749: PUSH
28750: LD_INT 2
28752: PUSH
28753: LD_INT 0
28755: PUSH
28756: EMPTY
28757: LIST
28758: LIST
28759: PUSH
28760: LD_INT 2
28762: PUSH
28763: LD_INT 1
28765: PUSH
28766: EMPTY
28767: LIST
28768: LIST
28769: PUSH
28770: LD_INT 2
28772: PUSH
28773: LD_INT 2
28775: PUSH
28776: EMPTY
28777: LIST
28778: LIST
28779: PUSH
28780: LD_INT 1
28782: PUSH
28783: LD_INT 2
28785: PUSH
28786: EMPTY
28787: LIST
28788: LIST
28789: PUSH
28790: LD_INT 0
28792: PUSH
28793: LD_INT 2
28795: PUSH
28796: EMPTY
28797: LIST
28798: LIST
28799: PUSH
28800: LD_INT 1
28802: NEG
28803: PUSH
28804: LD_INT 1
28806: PUSH
28807: EMPTY
28808: LIST
28809: LIST
28810: PUSH
28811: LD_INT 2
28813: NEG
28814: PUSH
28815: LD_INT 0
28817: PUSH
28818: EMPTY
28819: LIST
28820: LIST
28821: PUSH
28822: LD_INT 2
28824: NEG
28825: PUSH
28826: LD_INT 1
28828: NEG
28829: PUSH
28830: EMPTY
28831: LIST
28832: LIST
28833: PUSH
28834: LD_INT 2
28836: NEG
28837: PUSH
28838: LD_INT 2
28840: NEG
28841: PUSH
28842: EMPTY
28843: LIST
28844: LIST
28845: PUSH
28846: EMPTY
28847: LIST
28848: LIST
28849: LIST
28850: LIST
28851: LIST
28852: LIST
28853: LIST
28854: LIST
28855: LIST
28856: LIST
28857: LIST
28858: LIST
28859: LIST
28860: LIST
28861: LIST
28862: LIST
28863: LIST
28864: LIST
28865: LIST
28866: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
28867: LD_ADDR_VAR 0 23
28871: PUSH
28872: LD_INT 0
28874: PUSH
28875: LD_INT 0
28877: PUSH
28878: EMPTY
28879: LIST
28880: LIST
28881: PUSH
28882: LD_INT 0
28884: PUSH
28885: LD_INT 1
28887: NEG
28888: PUSH
28889: EMPTY
28890: LIST
28891: LIST
28892: PUSH
28893: LD_INT 1
28895: PUSH
28896: LD_INT 0
28898: PUSH
28899: EMPTY
28900: LIST
28901: LIST
28902: PUSH
28903: LD_INT 1
28905: PUSH
28906: LD_INT 1
28908: PUSH
28909: EMPTY
28910: LIST
28911: LIST
28912: PUSH
28913: LD_INT 0
28915: PUSH
28916: LD_INT 1
28918: PUSH
28919: EMPTY
28920: LIST
28921: LIST
28922: PUSH
28923: LD_INT 1
28925: NEG
28926: PUSH
28927: LD_INT 0
28929: PUSH
28930: EMPTY
28931: LIST
28932: LIST
28933: PUSH
28934: LD_INT 1
28936: NEG
28937: PUSH
28938: LD_INT 1
28940: NEG
28941: PUSH
28942: EMPTY
28943: LIST
28944: LIST
28945: PUSH
28946: LD_INT 1
28948: NEG
28949: PUSH
28950: LD_INT 2
28952: NEG
28953: PUSH
28954: EMPTY
28955: LIST
28956: LIST
28957: PUSH
28958: LD_INT 0
28960: PUSH
28961: LD_INT 2
28963: NEG
28964: PUSH
28965: EMPTY
28966: LIST
28967: LIST
28968: PUSH
28969: LD_INT 1
28971: PUSH
28972: LD_INT 1
28974: NEG
28975: PUSH
28976: EMPTY
28977: LIST
28978: LIST
28979: PUSH
28980: LD_INT 2
28982: PUSH
28983: LD_INT 0
28985: PUSH
28986: EMPTY
28987: LIST
28988: LIST
28989: PUSH
28990: LD_INT 2
28992: PUSH
28993: LD_INT 1
28995: PUSH
28996: EMPTY
28997: LIST
28998: LIST
28999: PUSH
29000: LD_INT 2
29002: PUSH
29003: LD_INT 2
29005: PUSH
29006: EMPTY
29007: LIST
29008: LIST
29009: PUSH
29010: LD_INT 1
29012: PUSH
29013: LD_INT 2
29015: PUSH
29016: EMPTY
29017: LIST
29018: LIST
29019: PUSH
29020: LD_INT 0
29022: PUSH
29023: LD_INT 2
29025: PUSH
29026: EMPTY
29027: LIST
29028: LIST
29029: PUSH
29030: LD_INT 1
29032: NEG
29033: PUSH
29034: LD_INT 1
29036: PUSH
29037: EMPTY
29038: LIST
29039: LIST
29040: PUSH
29041: LD_INT 2
29043: NEG
29044: PUSH
29045: LD_INT 0
29047: PUSH
29048: EMPTY
29049: LIST
29050: LIST
29051: PUSH
29052: LD_INT 2
29054: NEG
29055: PUSH
29056: LD_INT 1
29058: NEG
29059: PUSH
29060: EMPTY
29061: LIST
29062: LIST
29063: PUSH
29064: LD_INT 2
29066: NEG
29067: PUSH
29068: LD_INT 2
29070: NEG
29071: PUSH
29072: EMPTY
29073: LIST
29074: LIST
29075: PUSH
29076: LD_INT 2
29078: NEG
29079: PUSH
29080: LD_INT 3
29082: NEG
29083: PUSH
29084: EMPTY
29085: LIST
29086: LIST
29087: PUSH
29088: LD_INT 1
29090: NEG
29091: PUSH
29092: LD_INT 3
29094: NEG
29095: PUSH
29096: EMPTY
29097: LIST
29098: LIST
29099: PUSH
29100: LD_INT 1
29102: PUSH
29103: LD_INT 2
29105: NEG
29106: PUSH
29107: EMPTY
29108: LIST
29109: LIST
29110: PUSH
29111: LD_INT 2
29113: PUSH
29114: LD_INT 1
29116: NEG
29117: PUSH
29118: EMPTY
29119: LIST
29120: LIST
29121: PUSH
29122: EMPTY
29123: LIST
29124: LIST
29125: LIST
29126: LIST
29127: LIST
29128: LIST
29129: LIST
29130: LIST
29131: LIST
29132: LIST
29133: LIST
29134: LIST
29135: LIST
29136: LIST
29137: LIST
29138: LIST
29139: LIST
29140: LIST
29141: LIST
29142: LIST
29143: LIST
29144: LIST
29145: LIST
29146: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
29147: LD_ADDR_VAR 0 24
29151: PUSH
29152: LD_INT 0
29154: PUSH
29155: LD_INT 0
29157: PUSH
29158: EMPTY
29159: LIST
29160: LIST
29161: PUSH
29162: LD_INT 0
29164: PUSH
29165: LD_INT 1
29167: NEG
29168: PUSH
29169: EMPTY
29170: LIST
29171: LIST
29172: PUSH
29173: LD_INT 1
29175: PUSH
29176: LD_INT 0
29178: PUSH
29179: EMPTY
29180: LIST
29181: LIST
29182: PUSH
29183: LD_INT 1
29185: PUSH
29186: LD_INT 1
29188: PUSH
29189: EMPTY
29190: LIST
29191: LIST
29192: PUSH
29193: LD_INT 0
29195: PUSH
29196: LD_INT 1
29198: PUSH
29199: EMPTY
29200: LIST
29201: LIST
29202: PUSH
29203: LD_INT 1
29205: NEG
29206: PUSH
29207: LD_INT 0
29209: PUSH
29210: EMPTY
29211: LIST
29212: LIST
29213: PUSH
29214: LD_INT 1
29216: NEG
29217: PUSH
29218: LD_INT 1
29220: NEG
29221: PUSH
29222: EMPTY
29223: LIST
29224: LIST
29225: PUSH
29226: LD_INT 1
29228: NEG
29229: PUSH
29230: LD_INT 2
29232: NEG
29233: PUSH
29234: EMPTY
29235: LIST
29236: LIST
29237: PUSH
29238: LD_INT 0
29240: PUSH
29241: LD_INT 2
29243: NEG
29244: PUSH
29245: EMPTY
29246: LIST
29247: LIST
29248: PUSH
29249: LD_INT 1
29251: PUSH
29252: LD_INT 1
29254: NEG
29255: PUSH
29256: EMPTY
29257: LIST
29258: LIST
29259: PUSH
29260: LD_INT 2
29262: PUSH
29263: LD_INT 0
29265: PUSH
29266: EMPTY
29267: LIST
29268: LIST
29269: PUSH
29270: LD_INT 2
29272: PUSH
29273: LD_INT 1
29275: PUSH
29276: EMPTY
29277: LIST
29278: LIST
29279: PUSH
29280: LD_INT 2
29282: PUSH
29283: LD_INT 2
29285: PUSH
29286: EMPTY
29287: LIST
29288: LIST
29289: PUSH
29290: LD_INT 1
29292: PUSH
29293: LD_INT 2
29295: PUSH
29296: EMPTY
29297: LIST
29298: LIST
29299: PUSH
29300: LD_INT 0
29302: PUSH
29303: LD_INT 2
29305: PUSH
29306: EMPTY
29307: LIST
29308: LIST
29309: PUSH
29310: LD_INT 1
29312: NEG
29313: PUSH
29314: LD_INT 1
29316: PUSH
29317: EMPTY
29318: LIST
29319: LIST
29320: PUSH
29321: LD_INT 2
29323: NEG
29324: PUSH
29325: LD_INT 0
29327: PUSH
29328: EMPTY
29329: LIST
29330: LIST
29331: PUSH
29332: LD_INT 2
29334: NEG
29335: PUSH
29336: LD_INT 1
29338: NEG
29339: PUSH
29340: EMPTY
29341: LIST
29342: LIST
29343: PUSH
29344: LD_INT 2
29346: NEG
29347: PUSH
29348: LD_INT 2
29350: NEG
29351: PUSH
29352: EMPTY
29353: LIST
29354: LIST
29355: PUSH
29356: LD_INT 1
29358: PUSH
29359: LD_INT 2
29361: NEG
29362: PUSH
29363: EMPTY
29364: LIST
29365: LIST
29366: PUSH
29367: LD_INT 2
29369: PUSH
29370: LD_INT 1
29372: NEG
29373: PUSH
29374: EMPTY
29375: LIST
29376: LIST
29377: PUSH
29378: LD_INT 3
29380: PUSH
29381: LD_INT 1
29383: PUSH
29384: EMPTY
29385: LIST
29386: LIST
29387: PUSH
29388: LD_INT 3
29390: PUSH
29391: LD_INT 2
29393: PUSH
29394: EMPTY
29395: LIST
29396: LIST
29397: PUSH
29398: EMPTY
29399: LIST
29400: LIST
29401: LIST
29402: LIST
29403: LIST
29404: LIST
29405: LIST
29406: LIST
29407: LIST
29408: LIST
29409: LIST
29410: LIST
29411: LIST
29412: LIST
29413: LIST
29414: LIST
29415: LIST
29416: LIST
29417: LIST
29418: LIST
29419: LIST
29420: LIST
29421: LIST
29422: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
29423: LD_ADDR_VAR 0 25
29427: PUSH
29428: LD_INT 0
29430: PUSH
29431: LD_INT 0
29433: PUSH
29434: EMPTY
29435: LIST
29436: LIST
29437: PUSH
29438: LD_INT 0
29440: PUSH
29441: LD_INT 1
29443: NEG
29444: PUSH
29445: EMPTY
29446: LIST
29447: LIST
29448: PUSH
29449: LD_INT 1
29451: PUSH
29452: LD_INT 0
29454: PUSH
29455: EMPTY
29456: LIST
29457: LIST
29458: PUSH
29459: LD_INT 1
29461: PUSH
29462: LD_INT 1
29464: PUSH
29465: EMPTY
29466: LIST
29467: LIST
29468: PUSH
29469: LD_INT 0
29471: PUSH
29472: LD_INT 1
29474: PUSH
29475: EMPTY
29476: LIST
29477: LIST
29478: PUSH
29479: LD_INT 1
29481: NEG
29482: PUSH
29483: LD_INT 0
29485: PUSH
29486: EMPTY
29487: LIST
29488: LIST
29489: PUSH
29490: LD_INT 1
29492: NEG
29493: PUSH
29494: LD_INT 1
29496: NEG
29497: PUSH
29498: EMPTY
29499: LIST
29500: LIST
29501: PUSH
29502: LD_INT 1
29504: NEG
29505: PUSH
29506: LD_INT 2
29508: NEG
29509: PUSH
29510: EMPTY
29511: LIST
29512: LIST
29513: PUSH
29514: LD_INT 0
29516: PUSH
29517: LD_INT 2
29519: NEG
29520: PUSH
29521: EMPTY
29522: LIST
29523: LIST
29524: PUSH
29525: LD_INT 1
29527: PUSH
29528: LD_INT 1
29530: NEG
29531: PUSH
29532: EMPTY
29533: LIST
29534: LIST
29535: PUSH
29536: LD_INT 2
29538: PUSH
29539: LD_INT 0
29541: PUSH
29542: EMPTY
29543: LIST
29544: LIST
29545: PUSH
29546: LD_INT 2
29548: PUSH
29549: LD_INT 1
29551: PUSH
29552: EMPTY
29553: LIST
29554: LIST
29555: PUSH
29556: LD_INT 2
29558: PUSH
29559: LD_INT 2
29561: PUSH
29562: EMPTY
29563: LIST
29564: LIST
29565: PUSH
29566: LD_INT 1
29568: PUSH
29569: LD_INT 2
29571: PUSH
29572: EMPTY
29573: LIST
29574: LIST
29575: PUSH
29576: LD_INT 0
29578: PUSH
29579: LD_INT 2
29581: PUSH
29582: EMPTY
29583: LIST
29584: LIST
29585: PUSH
29586: LD_INT 1
29588: NEG
29589: PUSH
29590: LD_INT 1
29592: PUSH
29593: EMPTY
29594: LIST
29595: LIST
29596: PUSH
29597: LD_INT 2
29599: NEG
29600: PUSH
29601: LD_INT 0
29603: PUSH
29604: EMPTY
29605: LIST
29606: LIST
29607: PUSH
29608: LD_INT 2
29610: NEG
29611: PUSH
29612: LD_INT 1
29614: NEG
29615: PUSH
29616: EMPTY
29617: LIST
29618: LIST
29619: PUSH
29620: LD_INT 2
29622: NEG
29623: PUSH
29624: LD_INT 2
29626: NEG
29627: PUSH
29628: EMPTY
29629: LIST
29630: LIST
29631: PUSH
29632: LD_INT 3
29634: PUSH
29635: LD_INT 1
29637: PUSH
29638: EMPTY
29639: LIST
29640: LIST
29641: PUSH
29642: LD_INT 3
29644: PUSH
29645: LD_INT 2
29647: PUSH
29648: EMPTY
29649: LIST
29650: LIST
29651: PUSH
29652: LD_INT 2
29654: PUSH
29655: LD_INT 3
29657: PUSH
29658: EMPTY
29659: LIST
29660: LIST
29661: PUSH
29662: LD_INT 1
29664: PUSH
29665: LD_INT 3
29667: PUSH
29668: EMPTY
29669: LIST
29670: LIST
29671: PUSH
29672: EMPTY
29673: LIST
29674: LIST
29675: LIST
29676: LIST
29677: LIST
29678: LIST
29679: LIST
29680: LIST
29681: LIST
29682: LIST
29683: LIST
29684: LIST
29685: LIST
29686: LIST
29687: LIST
29688: LIST
29689: LIST
29690: LIST
29691: LIST
29692: LIST
29693: LIST
29694: LIST
29695: LIST
29696: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
29697: LD_ADDR_VAR 0 26
29701: PUSH
29702: LD_INT 0
29704: PUSH
29705: LD_INT 0
29707: PUSH
29708: EMPTY
29709: LIST
29710: LIST
29711: PUSH
29712: LD_INT 0
29714: PUSH
29715: LD_INT 1
29717: NEG
29718: PUSH
29719: EMPTY
29720: LIST
29721: LIST
29722: PUSH
29723: LD_INT 1
29725: PUSH
29726: LD_INT 0
29728: PUSH
29729: EMPTY
29730: LIST
29731: LIST
29732: PUSH
29733: LD_INT 1
29735: PUSH
29736: LD_INT 1
29738: PUSH
29739: EMPTY
29740: LIST
29741: LIST
29742: PUSH
29743: LD_INT 0
29745: PUSH
29746: LD_INT 1
29748: PUSH
29749: EMPTY
29750: LIST
29751: LIST
29752: PUSH
29753: LD_INT 1
29755: NEG
29756: PUSH
29757: LD_INT 0
29759: PUSH
29760: EMPTY
29761: LIST
29762: LIST
29763: PUSH
29764: LD_INT 1
29766: NEG
29767: PUSH
29768: LD_INT 1
29770: NEG
29771: PUSH
29772: EMPTY
29773: LIST
29774: LIST
29775: PUSH
29776: LD_INT 1
29778: NEG
29779: PUSH
29780: LD_INT 2
29782: NEG
29783: PUSH
29784: EMPTY
29785: LIST
29786: LIST
29787: PUSH
29788: LD_INT 0
29790: PUSH
29791: LD_INT 2
29793: NEG
29794: PUSH
29795: EMPTY
29796: LIST
29797: LIST
29798: PUSH
29799: LD_INT 1
29801: PUSH
29802: LD_INT 1
29804: NEG
29805: PUSH
29806: EMPTY
29807: LIST
29808: LIST
29809: PUSH
29810: LD_INT 2
29812: PUSH
29813: LD_INT 0
29815: PUSH
29816: EMPTY
29817: LIST
29818: LIST
29819: PUSH
29820: LD_INT 2
29822: PUSH
29823: LD_INT 1
29825: PUSH
29826: EMPTY
29827: LIST
29828: LIST
29829: PUSH
29830: LD_INT 2
29832: PUSH
29833: LD_INT 2
29835: PUSH
29836: EMPTY
29837: LIST
29838: LIST
29839: PUSH
29840: LD_INT 1
29842: PUSH
29843: LD_INT 2
29845: PUSH
29846: EMPTY
29847: LIST
29848: LIST
29849: PUSH
29850: LD_INT 0
29852: PUSH
29853: LD_INT 2
29855: PUSH
29856: EMPTY
29857: LIST
29858: LIST
29859: PUSH
29860: LD_INT 1
29862: NEG
29863: PUSH
29864: LD_INT 1
29866: PUSH
29867: EMPTY
29868: LIST
29869: LIST
29870: PUSH
29871: LD_INT 2
29873: NEG
29874: PUSH
29875: LD_INT 0
29877: PUSH
29878: EMPTY
29879: LIST
29880: LIST
29881: PUSH
29882: LD_INT 2
29884: NEG
29885: PUSH
29886: LD_INT 1
29888: NEG
29889: PUSH
29890: EMPTY
29891: LIST
29892: LIST
29893: PUSH
29894: LD_INT 2
29896: NEG
29897: PUSH
29898: LD_INT 2
29900: NEG
29901: PUSH
29902: EMPTY
29903: LIST
29904: LIST
29905: PUSH
29906: LD_INT 2
29908: PUSH
29909: LD_INT 3
29911: PUSH
29912: EMPTY
29913: LIST
29914: LIST
29915: PUSH
29916: LD_INT 1
29918: PUSH
29919: LD_INT 3
29921: PUSH
29922: EMPTY
29923: LIST
29924: LIST
29925: PUSH
29926: LD_INT 1
29928: NEG
29929: PUSH
29930: LD_INT 2
29932: PUSH
29933: EMPTY
29934: LIST
29935: LIST
29936: PUSH
29937: LD_INT 2
29939: NEG
29940: PUSH
29941: LD_INT 1
29943: PUSH
29944: EMPTY
29945: LIST
29946: LIST
29947: PUSH
29948: EMPTY
29949: LIST
29950: LIST
29951: LIST
29952: LIST
29953: LIST
29954: LIST
29955: LIST
29956: LIST
29957: LIST
29958: LIST
29959: LIST
29960: LIST
29961: LIST
29962: LIST
29963: LIST
29964: LIST
29965: LIST
29966: LIST
29967: LIST
29968: LIST
29969: LIST
29970: LIST
29971: LIST
29972: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29973: LD_ADDR_VAR 0 27
29977: PUSH
29978: LD_INT 0
29980: PUSH
29981: LD_INT 0
29983: PUSH
29984: EMPTY
29985: LIST
29986: LIST
29987: PUSH
29988: LD_INT 0
29990: PUSH
29991: LD_INT 1
29993: NEG
29994: PUSH
29995: EMPTY
29996: LIST
29997: LIST
29998: PUSH
29999: LD_INT 1
30001: PUSH
30002: LD_INT 0
30004: PUSH
30005: EMPTY
30006: LIST
30007: LIST
30008: PUSH
30009: LD_INT 1
30011: PUSH
30012: LD_INT 1
30014: PUSH
30015: EMPTY
30016: LIST
30017: LIST
30018: PUSH
30019: LD_INT 0
30021: PUSH
30022: LD_INT 1
30024: PUSH
30025: EMPTY
30026: LIST
30027: LIST
30028: PUSH
30029: LD_INT 1
30031: NEG
30032: PUSH
30033: LD_INT 0
30035: PUSH
30036: EMPTY
30037: LIST
30038: LIST
30039: PUSH
30040: LD_INT 1
30042: NEG
30043: PUSH
30044: LD_INT 1
30046: NEG
30047: PUSH
30048: EMPTY
30049: LIST
30050: LIST
30051: PUSH
30052: LD_INT 1
30054: NEG
30055: PUSH
30056: LD_INT 2
30058: NEG
30059: PUSH
30060: EMPTY
30061: LIST
30062: LIST
30063: PUSH
30064: LD_INT 0
30066: PUSH
30067: LD_INT 2
30069: NEG
30070: PUSH
30071: EMPTY
30072: LIST
30073: LIST
30074: PUSH
30075: LD_INT 1
30077: PUSH
30078: LD_INT 1
30080: NEG
30081: PUSH
30082: EMPTY
30083: LIST
30084: LIST
30085: PUSH
30086: LD_INT 2
30088: PUSH
30089: LD_INT 0
30091: PUSH
30092: EMPTY
30093: LIST
30094: LIST
30095: PUSH
30096: LD_INT 2
30098: PUSH
30099: LD_INT 1
30101: PUSH
30102: EMPTY
30103: LIST
30104: LIST
30105: PUSH
30106: LD_INT 2
30108: PUSH
30109: LD_INT 2
30111: PUSH
30112: EMPTY
30113: LIST
30114: LIST
30115: PUSH
30116: LD_INT 1
30118: PUSH
30119: LD_INT 2
30121: PUSH
30122: EMPTY
30123: LIST
30124: LIST
30125: PUSH
30126: LD_INT 0
30128: PUSH
30129: LD_INT 2
30131: PUSH
30132: EMPTY
30133: LIST
30134: LIST
30135: PUSH
30136: LD_INT 1
30138: NEG
30139: PUSH
30140: LD_INT 1
30142: PUSH
30143: EMPTY
30144: LIST
30145: LIST
30146: PUSH
30147: LD_INT 2
30149: NEG
30150: PUSH
30151: LD_INT 0
30153: PUSH
30154: EMPTY
30155: LIST
30156: LIST
30157: PUSH
30158: LD_INT 2
30160: NEG
30161: PUSH
30162: LD_INT 1
30164: NEG
30165: PUSH
30166: EMPTY
30167: LIST
30168: LIST
30169: PUSH
30170: LD_INT 2
30172: NEG
30173: PUSH
30174: LD_INT 2
30176: NEG
30177: PUSH
30178: EMPTY
30179: LIST
30180: LIST
30181: PUSH
30182: LD_INT 1
30184: NEG
30185: PUSH
30186: LD_INT 2
30188: PUSH
30189: EMPTY
30190: LIST
30191: LIST
30192: PUSH
30193: LD_INT 2
30195: NEG
30196: PUSH
30197: LD_INT 1
30199: PUSH
30200: EMPTY
30201: LIST
30202: LIST
30203: PUSH
30204: LD_INT 3
30206: NEG
30207: PUSH
30208: LD_INT 1
30210: NEG
30211: PUSH
30212: EMPTY
30213: LIST
30214: LIST
30215: PUSH
30216: LD_INT 3
30218: NEG
30219: PUSH
30220: LD_INT 2
30222: NEG
30223: PUSH
30224: EMPTY
30225: LIST
30226: LIST
30227: PUSH
30228: EMPTY
30229: LIST
30230: LIST
30231: LIST
30232: LIST
30233: LIST
30234: LIST
30235: LIST
30236: LIST
30237: LIST
30238: LIST
30239: LIST
30240: LIST
30241: LIST
30242: LIST
30243: LIST
30244: LIST
30245: LIST
30246: LIST
30247: LIST
30248: LIST
30249: LIST
30250: LIST
30251: LIST
30252: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
30253: LD_ADDR_VAR 0 28
30257: PUSH
30258: LD_INT 0
30260: PUSH
30261: LD_INT 0
30263: PUSH
30264: EMPTY
30265: LIST
30266: LIST
30267: PUSH
30268: LD_INT 0
30270: PUSH
30271: LD_INT 1
30273: NEG
30274: PUSH
30275: EMPTY
30276: LIST
30277: LIST
30278: PUSH
30279: LD_INT 1
30281: PUSH
30282: LD_INT 0
30284: PUSH
30285: EMPTY
30286: LIST
30287: LIST
30288: PUSH
30289: LD_INT 1
30291: PUSH
30292: LD_INT 1
30294: PUSH
30295: EMPTY
30296: LIST
30297: LIST
30298: PUSH
30299: LD_INT 0
30301: PUSH
30302: LD_INT 1
30304: PUSH
30305: EMPTY
30306: LIST
30307: LIST
30308: PUSH
30309: LD_INT 1
30311: NEG
30312: PUSH
30313: LD_INT 0
30315: PUSH
30316: EMPTY
30317: LIST
30318: LIST
30319: PUSH
30320: LD_INT 1
30322: NEG
30323: PUSH
30324: LD_INT 1
30326: NEG
30327: PUSH
30328: EMPTY
30329: LIST
30330: LIST
30331: PUSH
30332: LD_INT 1
30334: NEG
30335: PUSH
30336: LD_INT 2
30338: NEG
30339: PUSH
30340: EMPTY
30341: LIST
30342: LIST
30343: PUSH
30344: LD_INT 0
30346: PUSH
30347: LD_INT 2
30349: NEG
30350: PUSH
30351: EMPTY
30352: LIST
30353: LIST
30354: PUSH
30355: LD_INT 1
30357: PUSH
30358: LD_INT 1
30360: NEG
30361: PUSH
30362: EMPTY
30363: LIST
30364: LIST
30365: PUSH
30366: LD_INT 2
30368: PUSH
30369: LD_INT 0
30371: PUSH
30372: EMPTY
30373: LIST
30374: LIST
30375: PUSH
30376: LD_INT 2
30378: PUSH
30379: LD_INT 1
30381: PUSH
30382: EMPTY
30383: LIST
30384: LIST
30385: PUSH
30386: LD_INT 2
30388: PUSH
30389: LD_INT 2
30391: PUSH
30392: EMPTY
30393: LIST
30394: LIST
30395: PUSH
30396: LD_INT 1
30398: PUSH
30399: LD_INT 2
30401: PUSH
30402: EMPTY
30403: LIST
30404: LIST
30405: PUSH
30406: LD_INT 0
30408: PUSH
30409: LD_INT 2
30411: PUSH
30412: EMPTY
30413: LIST
30414: LIST
30415: PUSH
30416: LD_INT 1
30418: NEG
30419: PUSH
30420: LD_INT 1
30422: PUSH
30423: EMPTY
30424: LIST
30425: LIST
30426: PUSH
30427: LD_INT 2
30429: NEG
30430: PUSH
30431: LD_INT 0
30433: PUSH
30434: EMPTY
30435: LIST
30436: LIST
30437: PUSH
30438: LD_INT 2
30440: NEG
30441: PUSH
30442: LD_INT 1
30444: NEG
30445: PUSH
30446: EMPTY
30447: LIST
30448: LIST
30449: PUSH
30450: LD_INT 2
30452: NEG
30453: PUSH
30454: LD_INT 2
30456: NEG
30457: PUSH
30458: EMPTY
30459: LIST
30460: LIST
30461: PUSH
30462: LD_INT 2
30464: NEG
30465: PUSH
30466: LD_INT 3
30468: NEG
30469: PUSH
30470: EMPTY
30471: LIST
30472: LIST
30473: PUSH
30474: LD_INT 1
30476: NEG
30477: PUSH
30478: LD_INT 3
30480: NEG
30481: PUSH
30482: EMPTY
30483: LIST
30484: LIST
30485: PUSH
30486: LD_INT 3
30488: NEG
30489: PUSH
30490: LD_INT 1
30492: NEG
30493: PUSH
30494: EMPTY
30495: LIST
30496: LIST
30497: PUSH
30498: LD_INT 3
30500: NEG
30501: PUSH
30502: LD_INT 2
30504: NEG
30505: PUSH
30506: EMPTY
30507: LIST
30508: LIST
30509: PUSH
30510: EMPTY
30511: LIST
30512: LIST
30513: LIST
30514: LIST
30515: LIST
30516: LIST
30517: LIST
30518: LIST
30519: LIST
30520: LIST
30521: LIST
30522: LIST
30523: LIST
30524: LIST
30525: LIST
30526: LIST
30527: LIST
30528: LIST
30529: LIST
30530: LIST
30531: LIST
30532: LIST
30533: LIST
30534: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
30535: LD_ADDR_VAR 0 29
30539: PUSH
30540: LD_INT 0
30542: PUSH
30543: LD_INT 0
30545: PUSH
30546: EMPTY
30547: LIST
30548: LIST
30549: PUSH
30550: LD_INT 0
30552: PUSH
30553: LD_INT 1
30555: NEG
30556: PUSH
30557: EMPTY
30558: LIST
30559: LIST
30560: PUSH
30561: LD_INT 1
30563: PUSH
30564: LD_INT 0
30566: PUSH
30567: EMPTY
30568: LIST
30569: LIST
30570: PUSH
30571: LD_INT 1
30573: PUSH
30574: LD_INT 1
30576: PUSH
30577: EMPTY
30578: LIST
30579: LIST
30580: PUSH
30581: LD_INT 0
30583: PUSH
30584: LD_INT 1
30586: PUSH
30587: EMPTY
30588: LIST
30589: LIST
30590: PUSH
30591: LD_INT 1
30593: NEG
30594: PUSH
30595: LD_INT 0
30597: PUSH
30598: EMPTY
30599: LIST
30600: LIST
30601: PUSH
30602: LD_INT 1
30604: NEG
30605: PUSH
30606: LD_INT 1
30608: NEG
30609: PUSH
30610: EMPTY
30611: LIST
30612: LIST
30613: PUSH
30614: LD_INT 1
30616: NEG
30617: PUSH
30618: LD_INT 2
30620: NEG
30621: PUSH
30622: EMPTY
30623: LIST
30624: LIST
30625: PUSH
30626: LD_INT 0
30628: PUSH
30629: LD_INT 2
30631: NEG
30632: PUSH
30633: EMPTY
30634: LIST
30635: LIST
30636: PUSH
30637: LD_INT 1
30639: PUSH
30640: LD_INT 1
30642: NEG
30643: PUSH
30644: EMPTY
30645: LIST
30646: LIST
30647: PUSH
30648: LD_INT 2
30650: PUSH
30651: LD_INT 0
30653: PUSH
30654: EMPTY
30655: LIST
30656: LIST
30657: PUSH
30658: LD_INT 2
30660: PUSH
30661: LD_INT 1
30663: PUSH
30664: EMPTY
30665: LIST
30666: LIST
30667: PUSH
30668: LD_INT 1
30670: PUSH
30671: LD_INT 2
30673: PUSH
30674: EMPTY
30675: LIST
30676: LIST
30677: PUSH
30678: LD_INT 0
30680: PUSH
30681: LD_INT 2
30683: PUSH
30684: EMPTY
30685: LIST
30686: LIST
30687: PUSH
30688: LD_INT 1
30690: NEG
30691: PUSH
30692: LD_INT 1
30694: PUSH
30695: EMPTY
30696: LIST
30697: LIST
30698: PUSH
30699: LD_INT 2
30701: NEG
30702: PUSH
30703: LD_INT 1
30705: NEG
30706: PUSH
30707: EMPTY
30708: LIST
30709: LIST
30710: PUSH
30711: LD_INT 2
30713: NEG
30714: PUSH
30715: LD_INT 2
30717: NEG
30718: PUSH
30719: EMPTY
30720: LIST
30721: LIST
30722: PUSH
30723: LD_INT 2
30725: NEG
30726: PUSH
30727: LD_INT 3
30729: NEG
30730: PUSH
30731: EMPTY
30732: LIST
30733: LIST
30734: PUSH
30735: LD_INT 2
30737: PUSH
30738: LD_INT 1
30740: NEG
30741: PUSH
30742: EMPTY
30743: LIST
30744: LIST
30745: PUSH
30746: LD_INT 3
30748: PUSH
30749: LD_INT 1
30751: PUSH
30752: EMPTY
30753: LIST
30754: LIST
30755: PUSH
30756: LD_INT 1
30758: PUSH
30759: LD_INT 3
30761: PUSH
30762: EMPTY
30763: LIST
30764: LIST
30765: PUSH
30766: LD_INT 1
30768: NEG
30769: PUSH
30770: LD_INT 2
30772: PUSH
30773: EMPTY
30774: LIST
30775: LIST
30776: PUSH
30777: LD_INT 3
30779: NEG
30780: PUSH
30781: LD_INT 2
30783: NEG
30784: PUSH
30785: EMPTY
30786: LIST
30787: LIST
30788: PUSH
30789: EMPTY
30790: LIST
30791: LIST
30792: LIST
30793: LIST
30794: LIST
30795: LIST
30796: LIST
30797: LIST
30798: LIST
30799: LIST
30800: LIST
30801: LIST
30802: LIST
30803: LIST
30804: LIST
30805: LIST
30806: LIST
30807: LIST
30808: LIST
30809: LIST
30810: LIST
30811: LIST
30812: LIST
30813: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30814: LD_ADDR_VAR 0 30
30818: PUSH
30819: LD_INT 0
30821: PUSH
30822: LD_INT 0
30824: PUSH
30825: EMPTY
30826: LIST
30827: LIST
30828: PUSH
30829: LD_INT 0
30831: PUSH
30832: LD_INT 1
30834: NEG
30835: PUSH
30836: EMPTY
30837: LIST
30838: LIST
30839: PUSH
30840: LD_INT 1
30842: PUSH
30843: LD_INT 0
30845: PUSH
30846: EMPTY
30847: LIST
30848: LIST
30849: PUSH
30850: LD_INT 1
30852: PUSH
30853: LD_INT 1
30855: PUSH
30856: EMPTY
30857: LIST
30858: LIST
30859: PUSH
30860: LD_INT 0
30862: PUSH
30863: LD_INT 1
30865: PUSH
30866: EMPTY
30867: LIST
30868: LIST
30869: PUSH
30870: LD_INT 1
30872: NEG
30873: PUSH
30874: LD_INT 0
30876: PUSH
30877: EMPTY
30878: LIST
30879: LIST
30880: PUSH
30881: LD_INT 1
30883: NEG
30884: PUSH
30885: LD_INT 1
30887: NEG
30888: PUSH
30889: EMPTY
30890: LIST
30891: LIST
30892: PUSH
30893: LD_INT 1
30895: NEG
30896: PUSH
30897: LD_INT 2
30899: NEG
30900: PUSH
30901: EMPTY
30902: LIST
30903: LIST
30904: PUSH
30905: LD_INT 0
30907: PUSH
30908: LD_INT 2
30910: NEG
30911: PUSH
30912: EMPTY
30913: LIST
30914: LIST
30915: PUSH
30916: LD_INT 1
30918: PUSH
30919: LD_INT 1
30921: NEG
30922: PUSH
30923: EMPTY
30924: LIST
30925: LIST
30926: PUSH
30927: LD_INT 2
30929: PUSH
30930: LD_INT 0
30932: PUSH
30933: EMPTY
30934: LIST
30935: LIST
30936: PUSH
30937: LD_INT 2
30939: PUSH
30940: LD_INT 1
30942: PUSH
30943: EMPTY
30944: LIST
30945: LIST
30946: PUSH
30947: LD_INT 2
30949: PUSH
30950: LD_INT 2
30952: PUSH
30953: EMPTY
30954: LIST
30955: LIST
30956: PUSH
30957: LD_INT 1
30959: PUSH
30960: LD_INT 2
30962: PUSH
30963: EMPTY
30964: LIST
30965: LIST
30966: PUSH
30967: LD_INT 1
30969: NEG
30970: PUSH
30971: LD_INT 1
30973: PUSH
30974: EMPTY
30975: LIST
30976: LIST
30977: PUSH
30978: LD_INT 2
30980: NEG
30981: PUSH
30982: LD_INT 0
30984: PUSH
30985: EMPTY
30986: LIST
30987: LIST
30988: PUSH
30989: LD_INT 2
30991: NEG
30992: PUSH
30993: LD_INT 1
30995: NEG
30996: PUSH
30997: EMPTY
30998: LIST
30999: LIST
31000: PUSH
31001: LD_INT 1
31003: NEG
31004: PUSH
31005: LD_INT 3
31007: NEG
31008: PUSH
31009: EMPTY
31010: LIST
31011: LIST
31012: PUSH
31013: LD_INT 1
31015: PUSH
31016: LD_INT 2
31018: NEG
31019: PUSH
31020: EMPTY
31021: LIST
31022: LIST
31023: PUSH
31024: LD_INT 3
31026: PUSH
31027: LD_INT 2
31029: PUSH
31030: EMPTY
31031: LIST
31032: LIST
31033: PUSH
31034: LD_INT 2
31036: PUSH
31037: LD_INT 3
31039: PUSH
31040: EMPTY
31041: LIST
31042: LIST
31043: PUSH
31044: LD_INT 2
31046: NEG
31047: PUSH
31048: LD_INT 1
31050: PUSH
31051: EMPTY
31052: LIST
31053: LIST
31054: PUSH
31055: LD_INT 3
31057: NEG
31058: PUSH
31059: LD_INT 1
31061: NEG
31062: PUSH
31063: EMPTY
31064: LIST
31065: LIST
31066: PUSH
31067: EMPTY
31068: LIST
31069: LIST
31070: LIST
31071: LIST
31072: LIST
31073: LIST
31074: LIST
31075: LIST
31076: LIST
31077: LIST
31078: LIST
31079: LIST
31080: LIST
31081: LIST
31082: LIST
31083: LIST
31084: LIST
31085: LIST
31086: LIST
31087: LIST
31088: LIST
31089: LIST
31090: LIST
31091: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
31092: LD_ADDR_VAR 0 31
31096: PUSH
31097: LD_INT 0
31099: PUSH
31100: LD_INT 0
31102: PUSH
31103: EMPTY
31104: LIST
31105: LIST
31106: PUSH
31107: LD_INT 0
31109: PUSH
31110: LD_INT 1
31112: NEG
31113: PUSH
31114: EMPTY
31115: LIST
31116: LIST
31117: PUSH
31118: LD_INT 1
31120: PUSH
31121: LD_INT 0
31123: PUSH
31124: EMPTY
31125: LIST
31126: LIST
31127: PUSH
31128: LD_INT 1
31130: PUSH
31131: LD_INT 1
31133: PUSH
31134: EMPTY
31135: LIST
31136: LIST
31137: PUSH
31138: LD_INT 0
31140: PUSH
31141: LD_INT 1
31143: PUSH
31144: EMPTY
31145: LIST
31146: LIST
31147: PUSH
31148: LD_INT 1
31150: NEG
31151: PUSH
31152: LD_INT 0
31154: PUSH
31155: EMPTY
31156: LIST
31157: LIST
31158: PUSH
31159: LD_INT 1
31161: NEG
31162: PUSH
31163: LD_INT 1
31165: NEG
31166: PUSH
31167: EMPTY
31168: LIST
31169: LIST
31170: PUSH
31171: LD_INT 1
31173: NEG
31174: PUSH
31175: LD_INT 2
31177: NEG
31178: PUSH
31179: EMPTY
31180: LIST
31181: LIST
31182: PUSH
31183: LD_INT 1
31185: PUSH
31186: LD_INT 1
31188: NEG
31189: PUSH
31190: EMPTY
31191: LIST
31192: LIST
31193: PUSH
31194: LD_INT 2
31196: PUSH
31197: LD_INT 0
31199: PUSH
31200: EMPTY
31201: LIST
31202: LIST
31203: PUSH
31204: LD_INT 2
31206: PUSH
31207: LD_INT 1
31209: PUSH
31210: EMPTY
31211: LIST
31212: LIST
31213: PUSH
31214: LD_INT 2
31216: PUSH
31217: LD_INT 2
31219: PUSH
31220: EMPTY
31221: LIST
31222: LIST
31223: PUSH
31224: LD_INT 1
31226: PUSH
31227: LD_INT 2
31229: PUSH
31230: EMPTY
31231: LIST
31232: LIST
31233: PUSH
31234: LD_INT 0
31236: PUSH
31237: LD_INT 2
31239: PUSH
31240: EMPTY
31241: LIST
31242: LIST
31243: PUSH
31244: LD_INT 1
31246: NEG
31247: PUSH
31248: LD_INT 1
31250: PUSH
31251: EMPTY
31252: LIST
31253: LIST
31254: PUSH
31255: LD_INT 2
31257: NEG
31258: PUSH
31259: LD_INT 1
31261: NEG
31262: PUSH
31263: EMPTY
31264: LIST
31265: LIST
31266: PUSH
31267: LD_INT 2
31269: NEG
31270: PUSH
31271: LD_INT 2
31273: NEG
31274: PUSH
31275: EMPTY
31276: LIST
31277: LIST
31278: PUSH
31279: LD_INT 2
31281: NEG
31282: PUSH
31283: LD_INT 3
31285: NEG
31286: PUSH
31287: EMPTY
31288: LIST
31289: LIST
31290: PUSH
31291: LD_INT 2
31293: PUSH
31294: LD_INT 1
31296: NEG
31297: PUSH
31298: EMPTY
31299: LIST
31300: LIST
31301: PUSH
31302: LD_INT 3
31304: PUSH
31305: LD_INT 1
31307: PUSH
31308: EMPTY
31309: LIST
31310: LIST
31311: PUSH
31312: LD_INT 1
31314: PUSH
31315: LD_INT 3
31317: PUSH
31318: EMPTY
31319: LIST
31320: LIST
31321: PUSH
31322: LD_INT 1
31324: NEG
31325: PUSH
31326: LD_INT 2
31328: PUSH
31329: EMPTY
31330: LIST
31331: LIST
31332: PUSH
31333: LD_INT 3
31335: NEG
31336: PUSH
31337: LD_INT 2
31339: NEG
31340: PUSH
31341: EMPTY
31342: LIST
31343: LIST
31344: PUSH
31345: EMPTY
31346: LIST
31347: LIST
31348: LIST
31349: LIST
31350: LIST
31351: LIST
31352: LIST
31353: LIST
31354: LIST
31355: LIST
31356: LIST
31357: LIST
31358: LIST
31359: LIST
31360: LIST
31361: LIST
31362: LIST
31363: LIST
31364: LIST
31365: LIST
31366: LIST
31367: LIST
31368: LIST
31369: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31370: LD_ADDR_VAR 0 32
31374: PUSH
31375: LD_INT 0
31377: PUSH
31378: LD_INT 0
31380: PUSH
31381: EMPTY
31382: LIST
31383: LIST
31384: PUSH
31385: LD_INT 0
31387: PUSH
31388: LD_INT 1
31390: NEG
31391: PUSH
31392: EMPTY
31393: LIST
31394: LIST
31395: PUSH
31396: LD_INT 1
31398: PUSH
31399: LD_INT 0
31401: PUSH
31402: EMPTY
31403: LIST
31404: LIST
31405: PUSH
31406: LD_INT 1
31408: PUSH
31409: LD_INT 1
31411: PUSH
31412: EMPTY
31413: LIST
31414: LIST
31415: PUSH
31416: LD_INT 0
31418: PUSH
31419: LD_INT 1
31421: PUSH
31422: EMPTY
31423: LIST
31424: LIST
31425: PUSH
31426: LD_INT 1
31428: NEG
31429: PUSH
31430: LD_INT 0
31432: PUSH
31433: EMPTY
31434: LIST
31435: LIST
31436: PUSH
31437: LD_INT 1
31439: NEG
31440: PUSH
31441: LD_INT 1
31443: NEG
31444: PUSH
31445: EMPTY
31446: LIST
31447: LIST
31448: PUSH
31449: LD_INT 1
31451: NEG
31452: PUSH
31453: LD_INT 2
31455: NEG
31456: PUSH
31457: EMPTY
31458: LIST
31459: LIST
31460: PUSH
31461: LD_INT 0
31463: PUSH
31464: LD_INT 2
31466: NEG
31467: PUSH
31468: EMPTY
31469: LIST
31470: LIST
31471: PUSH
31472: LD_INT 1
31474: PUSH
31475: LD_INT 1
31477: NEG
31478: PUSH
31479: EMPTY
31480: LIST
31481: LIST
31482: PUSH
31483: LD_INT 2
31485: PUSH
31486: LD_INT 1
31488: PUSH
31489: EMPTY
31490: LIST
31491: LIST
31492: PUSH
31493: LD_INT 2
31495: PUSH
31496: LD_INT 2
31498: PUSH
31499: EMPTY
31500: LIST
31501: LIST
31502: PUSH
31503: LD_INT 1
31505: PUSH
31506: LD_INT 2
31508: PUSH
31509: EMPTY
31510: LIST
31511: LIST
31512: PUSH
31513: LD_INT 0
31515: PUSH
31516: LD_INT 2
31518: PUSH
31519: EMPTY
31520: LIST
31521: LIST
31522: PUSH
31523: LD_INT 1
31525: NEG
31526: PUSH
31527: LD_INT 1
31529: PUSH
31530: EMPTY
31531: LIST
31532: LIST
31533: PUSH
31534: LD_INT 2
31536: NEG
31537: PUSH
31538: LD_INT 0
31540: PUSH
31541: EMPTY
31542: LIST
31543: LIST
31544: PUSH
31545: LD_INT 2
31547: NEG
31548: PUSH
31549: LD_INT 1
31551: NEG
31552: PUSH
31553: EMPTY
31554: LIST
31555: LIST
31556: PUSH
31557: LD_INT 1
31559: NEG
31560: PUSH
31561: LD_INT 3
31563: NEG
31564: PUSH
31565: EMPTY
31566: LIST
31567: LIST
31568: PUSH
31569: LD_INT 1
31571: PUSH
31572: LD_INT 2
31574: NEG
31575: PUSH
31576: EMPTY
31577: LIST
31578: LIST
31579: PUSH
31580: LD_INT 3
31582: PUSH
31583: LD_INT 2
31585: PUSH
31586: EMPTY
31587: LIST
31588: LIST
31589: PUSH
31590: LD_INT 2
31592: PUSH
31593: LD_INT 3
31595: PUSH
31596: EMPTY
31597: LIST
31598: LIST
31599: PUSH
31600: LD_INT 2
31602: NEG
31603: PUSH
31604: LD_INT 1
31606: PUSH
31607: EMPTY
31608: LIST
31609: LIST
31610: PUSH
31611: LD_INT 3
31613: NEG
31614: PUSH
31615: LD_INT 1
31617: NEG
31618: PUSH
31619: EMPTY
31620: LIST
31621: LIST
31622: PUSH
31623: EMPTY
31624: LIST
31625: LIST
31626: LIST
31627: LIST
31628: LIST
31629: LIST
31630: LIST
31631: LIST
31632: LIST
31633: LIST
31634: LIST
31635: LIST
31636: LIST
31637: LIST
31638: LIST
31639: LIST
31640: LIST
31641: LIST
31642: LIST
31643: LIST
31644: LIST
31645: LIST
31646: LIST
31647: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
31648: LD_ADDR_VAR 0 33
31652: PUSH
31653: LD_INT 0
31655: PUSH
31656: LD_INT 0
31658: PUSH
31659: EMPTY
31660: LIST
31661: LIST
31662: PUSH
31663: LD_INT 0
31665: PUSH
31666: LD_INT 1
31668: NEG
31669: PUSH
31670: EMPTY
31671: LIST
31672: LIST
31673: PUSH
31674: LD_INT 1
31676: PUSH
31677: LD_INT 0
31679: PUSH
31680: EMPTY
31681: LIST
31682: LIST
31683: PUSH
31684: LD_INT 1
31686: PUSH
31687: LD_INT 1
31689: PUSH
31690: EMPTY
31691: LIST
31692: LIST
31693: PUSH
31694: LD_INT 0
31696: PUSH
31697: LD_INT 1
31699: PUSH
31700: EMPTY
31701: LIST
31702: LIST
31703: PUSH
31704: LD_INT 1
31706: NEG
31707: PUSH
31708: LD_INT 0
31710: PUSH
31711: EMPTY
31712: LIST
31713: LIST
31714: PUSH
31715: LD_INT 1
31717: NEG
31718: PUSH
31719: LD_INT 1
31721: NEG
31722: PUSH
31723: EMPTY
31724: LIST
31725: LIST
31726: PUSH
31727: LD_INT 1
31729: NEG
31730: PUSH
31731: LD_INT 2
31733: NEG
31734: PUSH
31735: EMPTY
31736: LIST
31737: LIST
31738: PUSH
31739: LD_INT 1
31741: PUSH
31742: LD_INT 1
31744: NEG
31745: PUSH
31746: EMPTY
31747: LIST
31748: LIST
31749: PUSH
31750: LD_INT 2
31752: PUSH
31753: LD_INT 0
31755: PUSH
31756: EMPTY
31757: LIST
31758: LIST
31759: PUSH
31760: LD_INT 2
31762: PUSH
31763: LD_INT 1
31765: PUSH
31766: EMPTY
31767: LIST
31768: LIST
31769: PUSH
31770: LD_INT 1
31772: PUSH
31773: LD_INT 2
31775: PUSH
31776: EMPTY
31777: LIST
31778: LIST
31779: PUSH
31780: LD_INT 0
31782: PUSH
31783: LD_INT 2
31785: PUSH
31786: EMPTY
31787: LIST
31788: LIST
31789: PUSH
31790: LD_INT 1
31792: NEG
31793: PUSH
31794: LD_INT 1
31796: PUSH
31797: EMPTY
31798: LIST
31799: LIST
31800: PUSH
31801: LD_INT 2
31803: NEG
31804: PUSH
31805: LD_INT 0
31807: PUSH
31808: EMPTY
31809: LIST
31810: LIST
31811: PUSH
31812: LD_INT 2
31814: NEG
31815: PUSH
31816: LD_INT 1
31818: NEG
31819: PUSH
31820: EMPTY
31821: LIST
31822: LIST
31823: PUSH
31824: LD_INT 2
31826: NEG
31827: PUSH
31828: LD_INT 2
31830: NEG
31831: PUSH
31832: EMPTY
31833: LIST
31834: LIST
31835: PUSH
31836: LD_INT 2
31838: NEG
31839: PUSH
31840: LD_INT 3
31842: NEG
31843: PUSH
31844: EMPTY
31845: LIST
31846: LIST
31847: PUSH
31848: LD_INT 2
31850: PUSH
31851: LD_INT 1
31853: NEG
31854: PUSH
31855: EMPTY
31856: LIST
31857: LIST
31858: PUSH
31859: LD_INT 3
31861: PUSH
31862: LD_INT 1
31864: PUSH
31865: EMPTY
31866: LIST
31867: LIST
31868: PUSH
31869: LD_INT 1
31871: PUSH
31872: LD_INT 3
31874: PUSH
31875: EMPTY
31876: LIST
31877: LIST
31878: PUSH
31879: LD_INT 1
31881: NEG
31882: PUSH
31883: LD_INT 2
31885: PUSH
31886: EMPTY
31887: LIST
31888: LIST
31889: PUSH
31890: LD_INT 3
31892: NEG
31893: PUSH
31894: LD_INT 2
31896: NEG
31897: PUSH
31898: EMPTY
31899: LIST
31900: LIST
31901: PUSH
31902: EMPTY
31903: LIST
31904: LIST
31905: LIST
31906: LIST
31907: LIST
31908: LIST
31909: LIST
31910: LIST
31911: LIST
31912: LIST
31913: LIST
31914: LIST
31915: LIST
31916: LIST
31917: LIST
31918: LIST
31919: LIST
31920: LIST
31921: LIST
31922: LIST
31923: LIST
31924: LIST
31925: LIST
31926: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31927: LD_ADDR_VAR 0 34
31931: PUSH
31932: LD_INT 0
31934: PUSH
31935: LD_INT 0
31937: PUSH
31938: EMPTY
31939: LIST
31940: LIST
31941: PUSH
31942: LD_INT 0
31944: PUSH
31945: LD_INT 1
31947: NEG
31948: PUSH
31949: EMPTY
31950: LIST
31951: LIST
31952: PUSH
31953: LD_INT 1
31955: PUSH
31956: LD_INT 0
31958: PUSH
31959: EMPTY
31960: LIST
31961: LIST
31962: PUSH
31963: LD_INT 1
31965: PUSH
31966: LD_INT 1
31968: PUSH
31969: EMPTY
31970: LIST
31971: LIST
31972: PUSH
31973: LD_INT 0
31975: PUSH
31976: LD_INT 1
31978: PUSH
31979: EMPTY
31980: LIST
31981: LIST
31982: PUSH
31983: LD_INT 1
31985: NEG
31986: PUSH
31987: LD_INT 0
31989: PUSH
31990: EMPTY
31991: LIST
31992: LIST
31993: PUSH
31994: LD_INT 1
31996: NEG
31997: PUSH
31998: LD_INT 1
32000: NEG
32001: PUSH
32002: EMPTY
32003: LIST
32004: LIST
32005: PUSH
32006: LD_INT 1
32008: NEG
32009: PUSH
32010: LD_INT 2
32012: NEG
32013: PUSH
32014: EMPTY
32015: LIST
32016: LIST
32017: PUSH
32018: LD_INT 0
32020: PUSH
32021: LD_INT 2
32023: NEG
32024: PUSH
32025: EMPTY
32026: LIST
32027: LIST
32028: PUSH
32029: LD_INT 1
32031: PUSH
32032: LD_INT 1
32034: NEG
32035: PUSH
32036: EMPTY
32037: LIST
32038: LIST
32039: PUSH
32040: LD_INT 2
32042: PUSH
32043: LD_INT 1
32045: PUSH
32046: EMPTY
32047: LIST
32048: LIST
32049: PUSH
32050: LD_INT 2
32052: PUSH
32053: LD_INT 2
32055: PUSH
32056: EMPTY
32057: LIST
32058: LIST
32059: PUSH
32060: LD_INT 1
32062: PUSH
32063: LD_INT 2
32065: PUSH
32066: EMPTY
32067: LIST
32068: LIST
32069: PUSH
32070: LD_INT 1
32072: NEG
32073: PUSH
32074: LD_INT 1
32076: PUSH
32077: EMPTY
32078: LIST
32079: LIST
32080: PUSH
32081: LD_INT 2
32083: NEG
32084: PUSH
32085: LD_INT 0
32087: PUSH
32088: EMPTY
32089: LIST
32090: LIST
32091: PUSH
32092: LD_INT 2
32094: NEG
32095: PUSH
32096: LD_INT 1
32098: NEG
32099: PUSH
32100: EMPTY
32101: LIST
32102: LIST
32103: PUSH
32104: LD_INT 2
32106: NEG
32107: PUSH
32108: LD_INT 2
32110: NEG
32111: PUSH
32112: EMPTY
32113: LIST
32114: LIST
32115: PUSH
32116: LD_INT 1
32118: NEG
32119: PUSH
32120: LD_INT 3
32122: NEG
32123: PUSH
32124: EMPTY
32125: LIST
32126: LIST
32127: PUSH
32128: LD_INT 1
32130: PUSH
32131: LD_INT 2
32133: NEG
32134: PUSH
32135: EMPTY
32136: LIST
32137: LIST
32138: PUSH
32139: LD_INT 3
32141: PUSH
32142: LD_INT 2
32144: PUSH
32145: EMPTY
32146: LIST
32147: LIST
32148: PUSH
32149: LD_INT 2
32151: PUSH
32152: LD_INT 3
32154: PUSH
32155: EMPTY
32156: LIST
32157: LIST
32158: PUSH
32159: LD_INT 2
32161: NEG
32162: PUSH
32163: LD_INT 1
32165: PUSH
32166: EMPTY
32167: LIST
32168: LIST
32169: PUSH
32170: LD_INT 3
32172: NEG
32173: PUSH
32174: LD_INT 1
32176: NEG
32177: PUSH
32178: EMPTY
32179: LIST
32180: LIST
32181: PUSH
32182: EMPTY
32183: LIST
32184: LIST
32185: LIST
32186: LIST
32187: LIST
32188: LIST
32189: LIST
32190: LIST
32191: LIST
32192: LIST
32193: LIST
32194: LIST
32195: LIST
32196: LIST
32197: LIST
32198: LIST
32199: LIST
32200: LIST
32201: LIST
32202: LIST
32203: LIST
32204: LIST
32205: LIST
32206: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
32207: LD_ADDR_VAR 0 35
32211: PUSH
32212: LD_INT 0
32214: PUSH
32215: LD_INT 0
32217: PUSH
32218: EMPTY
32219: LIST
32220: LIST
32221: PUSH
32222: LD_INT 0
32224: PUSH
32225: LD_INT 1
32227: NEG
32228: PUSH
32229: EMPTY
32230: LIST
32231: LIST
32232: PUSH
32233: LD_INT 1
32235: PUSH
32236: LD_INT 0
32238: PUSH
32239: EMPTY
32240: LIST
32241: LIST
32242: PUSH
32243: LD_INT 1
32245: PUSH
32246: LD_INT 1
32248: PUSH
32249: EMPTY
32250: LIST
32251: LIST
32252: PUSH
32253: LD_INT 0
32255: PUSH
32256: LD_INT 1
32258: PUSH
32259: EMPTY
32260: LIST
32261: LIST
32262: PUSH
32263: LD_INT 1
32265: NEG
32266: PUSH
32267: LD_INT 0
32269: PUSH
32270: EMPTY
32271: LIST
32272: LIST
32273: PUSH
32274: LD_INT 1
32276: NEG
32277: PUSH
32278: LD_INT 1
32280: NEG
32281: PUSH
32282: EMPTY
32283: LIST
32284: LIST
32285: PUSH
32286: LD_INT 2
32288: PUSH
32289: LD_INT 1
32291: PUSH
32292: EMPTY
32293: LIST
32294: LIST
32295: PUSH
32296: LD_INT 2
32298: NEG
32299: PUSH
32300: LD_INT 1
32302: NEG
32303: PUSH
32304: EMPTY
32305: LIST
32306: LIST
32307: PUSH
32308: EMPTY
32309: LIST
32310: LIST
32311: LIST
32312: LIST
32313: LIST
32314: LIST
32315: LIST
32316: LIST
32317: LIST
32318: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
32319: LD_ADDR_VAR 0 36
32323: PUSH
32324: LD_INT 0
32326: PUSH
32327: LD_INT 0
32329: PUSH
32330: EMPTY
32331: LIST
32332: LIST
32333: PUSH
32334: LD_INT 0
32336: PUSH
32337: LD_INT 1
32339: NEG
32340: PUSH
32341: EMPTY
32342: LIST
32343: LIST
32344: PUSH
32345: LD_INT 1
32347: PUSH
32348: LD_INT 0
32350: PUSH
32351: EMPTY
32352: LIST
32353: LIST
32354: PUSH
32355: LD_INT 1
32357: PUSH
32358: LD_INT 1
32360: PUSH
32361: EMPTY
32362: LIST
32363: LIST
32364: PUSH
32365: LD_INT 0
32367: PUSH
32368: LD_INT 1
32370: PUSH
32371: EMPTY
32372: LIST
32373: LIST
32374: PUSH
32375: LD_INT 1
32377: NEG
32378: PUSH
32379: LD_INT 0
32381: PUSH
32382: EMPTY
32383: LIST
32384: LIST
32385: PUSH
32386: LD_INT 1
32388: NEG
32389: PUSH
32390: LD_INT 1
32392: NEG
32393: PUSH
32394: EMPTY
32395: LIST
32396: LIST
32397: PUSH
32398: LD_INT 1
32400: NEG
32401: PUSH
32402: LD_INT 2
32404: NEG
32405: PUSH
32406: EMPTY
32407: LIST
32408: LIST
32409: PUSH
32410: LD_INT 1
32412: PUSH
32413: LD_INT 2
32415: PUSH
32416: EMPTY
32417: LIST
32418: LIST
32419: PUSH
32420: EMPTY
32421: LIST
32422: LIST
32423: LIST
32424: LIST
32425: LIST
32426: LIST
32427: LIST
32428: LIST
32429: LIST
32430: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
32431: LD_ADDR_VAR 0 37
32435: PUSH
32436: LD_INT 0
32438: PUSH
32439: LD_INT 0
32441: PUSH
32442: EMPTY
32443: LIST
32444: LIST
32445: PUSH
32446: LD_INT 0
32448: PUSH
32449: LD_INT 1
32451: NEG
32452: PUSH
32453: EMPTY
32454: LIST
32455: LIST
32456: PUSH
32457: LD_INT 1
32459: PUSH
32460: LD_INT 0
32462: PUSH
32463: EMPTY
32464: LIST
32465: LIST
32466: PUSH
32467: LD_INT 1
32469: PUSH
32470: LD_INT 1
32472: PUSH
32473: EMPTY
32474: LIST
32475: LIST
32476: PUSH
32477: LD_INT 0
32479: PUSH
32480: LD_INT 1
32482: PUSH
32483: EMPTY
32484: LIST
32485: LIST
32486: PUSH
32487: LD_INT 1
32489: NEG
32490: PUSH
32491: LD_INT 0
32493: PUSH
32494: EMPTY
32495: LIST
32496: LIST
32497: PUSH
32498: LD_INT 1
32500: NEG
32501: PUSH
32502: LD_INT 1
32504: NEG
32505: PUSH
32506: EMPTY
32507: LIST
32508: LIST
32509: PUSH
32510: LD_INT 1
32512: PUSH
32513: LD_INT 1
32515: NEG
32516: PUSH
32517: EMPTY
32518: LIST
32519: LIST
32520: PUSH
32521: LD_INT 1
32523: NEG
32524: PUSH
32525: LD_INT 1
32527: PUSH
32528: EMPTY
32529: LIST
32530: LIST
32531: PUSH
32532: EMPTY
32533: LIST
32534: LIST
32535: LIST
32536: LIST
32537: LIST
32538: LIST
32539: LIST
32540: LIST
32541: LIST
32542: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
32543: LD_ADDR_VAR 0 38
32547: PUSH
32548: LD_INT 0
32550: PUSH
32551: LD_INT 0
32553: PUSH
32554: EMPTY
32555: LIST
32556: LIST
32557: PUSH
32558: LD_INT 0
32560: PUSH
32561: LD_INT 1
32563: NEG
32564: PUSH
32565: EMPTY
32566: LIST
32567: LIST
32568: PUSH
32569: LD_INT 1
32571: PUSH
32572: LD_INT 0
32574: PUSH
32575: EMPTY
32576: LIST
32577: LIST
32578: PUSH
32579: LD_INT 1
32581: PUSH
32582: LD_INT 1
32584: PUSH
32585: EMPTY
32586: LIST
32587: LIST
32588: PUSH
32589: LD_INT 0
32591: PUSH
32592: LD_INT 1
32594: PUSH
32595: EMPTY
32596: LIST
32597: LIST
32598: PUSH
32599: LD_INT 1
32601: NEG
32602: PUSH
32603: LD_INT 0
32605: PUSH
32606: EMPTY
32607: LIST
32608: LIST
32609: PUSH
32610: LD_INT 1
32612: NEG
32613: PUSH
32614: LD_INT 1
32616: NEG
32617: PUSH
32618: EMPTY
32619: LIST
32620: LIST
32621: PUSH
32622: LD_INT 2
32624: PUSH
32625: LD_INT 1
32627: PUSH
32628: EMPTY
32629: LIST
32630: LIST
32631: PUSH
32632: LD_INT 2
32634: NEG
32635: PUSH
32636: LD_INT 1
32638: NEG
32639: PUSH
32640: EMPTY
32641: LIST
32642: LIST
32643: PUSH
32644: EMPTY
32645: LIST
32646: LIST
32647: LIST
32648: LIST
32649: LIST
32650: LIST
32651: LIST
32652: LIST
32653: LIST
32654: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
32655: LD_ADDR_VAR 0 39
32659: PUSH
32660: LD_INT 0
32662: PUSH
32663: LD_INT 0
32665: PUSH
32666: EMPTY
32667: LIST
32668: LIST
32669: PUSH
32670: LD_INT 0
32672: PUSH
32673: LD_INT 1
32675: NEG
32676: PUSH
32677: EMPTY
32678: LIST
32679: LIST
32680: PUSH
32681: LD_INT 1
32683: PUSH
32684: LD_INT 0
32686: PUSH
32687: EMPTY
32688: LIST
32689: LIST
32690: PUSH
32691: LD_INT 1
32693: PUSH
32694: LD_INT 1
32696: PUSH
32697: EMPTY
32698: LIST
32699: LIST
32700: PUSH
32701: LD_INT 0
32703: PUSH
32704: LD_INT 1
32706: PUSH
32707: EMPTY
32708: LIST
32709: LIST
32710: PUSH
32711: LD_INT 1
32713: NEG
32714: PUSH
32715: LD_INT 0
32717: PUSH
32718: EMPTY
32719: LIST
32720: LIST
32721: PUSH
32722: LD_INT 1
32724: NEG
32725: PUSH
32726: LD_INT 1
32728: NEG
32729: PUSH
32730: EMPTY
32731: LIST
32732: LIST
32733: PUSH
32734: LD_INT 1
32736: NEG
32737: PUSH
32738: LD_INT 2
32740: NEG
32741: PUSH
32742: EMPTY
32743: LIST
32744: LIST
32745: PUSH
32746: LD_INT 1
32748: PUSH
32749: LD_INT 2
32751: PUSH
32752: EMPTY
32753: LIST
32754: LIST
32755: PUSH
32756: EMPTY
32757: LIST
32758: LIST
32759: LIST
32760: LIST
32761: LIST
32762: LIST
32763: LIST
32764: LIST
32765: LIST
32766: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
32767: LD_ADDR_VAR 0 40
32771: PUSH
32772: LD_INT 0
32774: PUSH
32775: LD_INT 0
32777: PUSH
32778: EMPTY
32779: LIST
32780: LIST
32781: PUSH
32782: LD_INT 0
32784: PUSH
32785: LD_INT 1
32787: NEG
32788: PUSH
32789: EMPTY
32790: LIST
32791: LIST
32792: PUSH
32793: LD_INT 1
32795: PUSH
32796: LD_INT 0
32798: PUSH
32799: EMPTY
32800: LIST
32801: LIST
32802: PUSH
32803: LD_INT 1
32805: PUSH
32806: LD_INT 1
32808: PUSH
32809: EMPTY
32810: LIST
32811: LIST
32812: PUSH
32813: LD_INT 0
32815: PUSH
32816: LD_INT 1
32818: PUSH
32819: EMPTY
32820: LIST
32821: LIST
32822: PUSH
32823: LD_INT 1
32825: NEG
32826: PUSH
32827: LD_INT 0
32829: PUSH
32830: EMPTY
32831: LIST
32832: LIST
32833: PUSH
32834: LD_INT 1
32836: NEG
32837: PUSH
32838: LD_INT 1
32840: NEG
32841: PUSH
32842: EMPTY
32843: LIST
32844: LIST
32845: PUSH
32846: LD_INT 1
32848: PUSH
32849: LD_INT 1
32851: NEG
32852: PUSH
32853: EMPTY
32854: LIST
32855: LIST
32856: PUSH
32857: LD_INT 1
32859: NEG
32860: PUSH
32861: LD_INT 1
32863: PUSH
32864: EMPTY
32865: LIST
32866: LIST
32867: PUSH
32868: EMPTY
32869: LIST
32870: LIST
32871: LIST
32872: LIST
32873: LIST
32874: LIST
32875: LIST
32876: LIST
32877: LIST
32878: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32879: LD_ADDR_VAR 0 41
32883: PUSH
32884: LD_INT 0
32886: PUSH
32887: LD_INT 0
32889: PUSH
32890: EMPTY
32891: LIST
32892: LIST
32893: PUSH
32894: LD_INT 0
32896: PUSH
32897: LD_INT 1
32899: NEG
32900: PUSH
32901: EMPTY
32902: LIST
32903: LIST
32904: PUSH
32905: LD_INT 1
32907: PUSH
32908: LD_INT 0
32910: PUSH
32911: EMPTY
32912: LIST
32913: LIST
32914: PUSH
32915: LD_INT 1
32917: PUSH
32918: LD_INT 1
32920: PUSH
32921: EMPTY
32922: LIST
32923: LIST
32924: PUSH
32925: LD_INT 0
32927: PUSH
32928: LD_INT 1
32930: PUSH
32931: EMPTY
32932: LIST
32933: LIST
32934: PUSH
32935: LD_INT 1
32937: NEG
32938: PUSH
32939: LD_INT 0
32941: PUSH
32942: EMPTY
32943: LIST
32944: LIST
32945: PUSH
32946: LD_INT 1
32948: NEG
32949: PUSH
32950: LD_INT 1
32952: NEG
32953: PUSH
32954: EMPTY
32955: LIST
32956: LIST
32957: PUSH
32958: LD_INT 1
32960: NEG
32961: PUSH
32962: LD_INT 2
32964: NEG
32965: PUSH
32966: EMPTY
32967: LIST
32968: LIST
32969: PUSH
32970: LD_INT 1
32972: PUSH
32973: LD_INT 1
32975: NEG
32976: PUSH
32977: EMPTY
32978: LIST
32979: LIST
32980: PUSH
32981: LD_INT 2
32983: PUSH
32984: LD_INT 0
32986: PUSH
32987: EMPTY
32988: LIST
32989: LIST
32990: PUSH
32991: LD_INT 2
32993: PUSH
32994: LD_INT 1
32996: PUSH
32997: EMPTY
32998: LIST
32999: LIST
33000: PUSH
33001: LD_INT 2
33003: PUSH
33004: LD_INT 2
33006: PUSH
33007: EMPTY
33008: LIST
33009: LIST
33010: PUSH
33011: LD_INT 1
33013: PUSH
33014: LD_INT 2
33016: PUSH
33017: EMPTY
33018: LIST
33019: LIST
33020: PUSH
33021: LD_INT 1
33023: NEG
33024: PUSH
33025: LD_INT 1
33027: PUSH
33028: EMPTY
33029: LIST
33030: LIST
33031: PUSH
33032: LD_INT 2
33034: NEG
33035: PUSH
33036: LD_INT 0
33038: PUSH
33039: EMPTY
33040: LIST
33041: LIST
33042: PUSH
33043: LD_INT 2
33045: NEG
33046: PUSH
33047: LD_INT 1
33049: NEG
33050: PUSH
33051: EMPTY
33052: LIST
33053: LIST
33054: PUSH
33055: LD_INT 2
33057: NEG
33058: PUSH
33059: LD_INT 2
33061: NEG
33062: PUSH
33063: EMPTY
33064: LIST
33065: LIST
33066: PUSH
33067: LD_INT 2
33069: NEG
33070: PUSH
33071: LD_INT 3
33073: NEG
33074: PUSH
33075: EMPTY
33076: LIST
33077: LIST
33078: PUSH
33079: LD_INT 2
33081: PUSH
33082: LD_INT 1
33084: NEG
33085: PUSH
33086: EMPTY
33087: LIST
33088: LIST
33089: PUSH
33090: LD_INT 3
33092: PUSH
33093: LD_INT 0
33095: PUSH
33096: EMPTY
33097: LIST
33098: LIST
33099: PUSH
33100: LD_INT 3
33102: PUSH
33103: LD_INT 1
33105: PUSH
33106: EMPTY
33107: LIST
33108: LIST
33109: PUSH
33110: LD_INT 3
33112: PUSH
33113: LD_INT 2
33115: PUSH
33116: EMPTY
33117: LIST
33118: LIST
33119: PUSH
33120: LD_INT 3
33122: PUSH
33123: LD_INT 3
33125: PUSH
33126: EMPTY
33127: LIST
33128: LIST
33129: PUSH
33130: LD_INT 2
33132: PUSH
33133: LD_INT 3
33135: PUSH
33136: EMPTY
33137: LIST
33138: LIST
33139: PUSH
33140: LD_INT 2
33142: NEG
33143: PUSH
33144: LD_INT 1
33146: PUSH
33147: EMPTY
33148: LIST
33149: LIST
33150: PUSH
33151: LD_INT 3
33153: NEG
33154: PUSH
33155: LD_INT 0
33157: PUSH
33158: EMPTY
33159: LIST
33160: LIST
33161: PUSH
33162: LD_INT 3
33164: NEG
33165: PUSH
33166: LD_INT 1
33168: NEG
33169: PUSH
33170: EMPTY
33171: LIST
33172: LIST
33173: PUSH
33174: LD_INT 3
33176: NEG
33177: PUSH
33178: LD_INT 2
33180: NEG
33181: PUSH
33182: EMPTY
33183: LIST
33184: LIST
33185: PUSH
33186: LD_INT 3
33188: NEG
33189: PUSH
33190: LD_INT 3
33192: NEG
33193: PUSH
33194: EMPTY
33195: LIST
33196: LIST
33197: PUSH
33198: EMPTY
33199: LIST
33200: LIST
33201: LIST
33202: LIST
33203: LIST
33204: LIST
33205: LIST
33206: LIST
33207: LIST
33208: LIST
33209: LIST
33210: LIST
33211: LIST
33212: LIST
33213: LIST
33214: LIST
33215: LIST
33216: LIST
33217: LIST
33218: LIST
33219: LIST
33220: LIST
33221: LIST
33222: LIST
33223: LIST
33224: LIST
33225: LIST
33226: LIST
33227: LIST
33228: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33229: LD_ADDR_VAR 0 42
33233: PUSH
33234: LD_INT 0
33236: PUSH
33237: LD_INT 0
33239: PUSH
33240: EMPTY
33241: LIST
33242: LIST
33243: PUSH
33244: LD_INT 0
33246: PUSH
33247: LD_INT 1
33249: NEG
33250: PUSH
33251: EMPTY
33252: LIST
33253: LIST
33254: PUSH
33255: LD_INT 1
33257: PUSH
33258: LD_INT 0
33260: PUSH
33261: EMPTY
33262: LIST
33263: LIST
33264: PUSH
33265: LD_INT 1
33267: PUSH
33268: LD_INT 1
33270: PUSH
33271: EMPTY
33272: LIST
33273: LIST
33274: PUSH
33275: LD_INT 0
33277: PUSH
33278: LD_INT 1
33280: PUSH
33281: EMPTY
33282: LIST
33283: LIST
33284: PUSH
33285: LD_INT 1
33287: NEG
33288: PUSH
33289: LD_INT 0
33291: PUSH
33292: EMPTY
33293: LIST
33294: LIST
33295: PUSH
33296: LD_INT 1
33298: NEG
33299: PUSH
33300: LD_INT 1
33302: NEG
33303: PUSH
33304: EMPTY
33305: LIST
33306: LIST
33307: PUSH
33308: LD_INT 1
33310: NEG
33311: PUSH
33312: LD_INT 2
33314: NEG
33315: PUSH
33316: EMPTY
33317: LIST
33318: LIST
33319: PUSH
33320: LD_INT 0
33322: PUSH
33323: LD_INT 2
33325: NEG
33326: PUSH
33327: EMPTY
33328: LIST
33329: LIST
33330: PUSH
33331: LD_INT 1
33333: PUSH
33334: LD_INT 1
33336: NEG
33337: PUSH
33338: EMPTY
33339: LIST
33340: LIST
33341: PUSH
33342: LD_INT 2
33344: PUSH
33345: LD_INT 1
33347: PUSH
33348: EMPTY
33349: LIST
33350: LIST
33351: PUSH
33352: LD_INT 2
33354: PUSH
33355: LD_INT 2
33357: PUSH
33358: EMPTY
33359: LIST
33360: LIST
33361: PUSH
33362: LD_INT 1
33364: PUSH
33365: LD_INT 2
33367: PUSH
33368: EMPTY
33369: LIST
33370: LIST
33371: PUSH
33372: LD_INT 0
33374: PUSH
33375: LD_INT 2
33377: PUSH
33378: EMPTY
33379: LIST
33380: LIST
33381: PUSH
33382: LD_INT 1
33384: NEG
33385: PUSH
33386: LD_INT 1
33388: PUSH
33389: EMPTY
33390: LIST
33391: LIST
33392: PUSH
33393: LD_INT 2
33395: NEG
33396: PUSH
33397: LD_INT 1
33399: NEG
33400: PUSH
33401: EMPTY
33402: LIST
33403: LIST
33404: PUSH
33405: LD_INT 2
33407: NEG
33408: PUSH
33409: LD_INT 2
33411: NEG
33412: PUSH
33413: EMPTY
33414: LIST
33415: LIST
33416: PUSH
33417: LD_INT 2
33419: NEG
33420: PUSH
33421: LD_INT 3
33423: NEG
33424: PUSH
33425: EMPTY
33426: LIST
33427: LIST
33428: PUSH
33429: LD_INT 1
33431: NEG
33432: PUSH
33433: LD_INT 3
33435: NEG
33436: PUSH
33437: EMPTY
33438: LIST
33439: LIST
33440: PUSH
33441: LD_INT 0
33443: PUSH
33444: LD_INT 3
33446: NEG
33447: PUSH
33448: EMPTY
33449: LIST
33450: LIST
33451: PUSH
33452: LD_INT 1
33454: PUSH
33455: LD_INT 2
33457: NEG
33458: PUSH
33459: EMPTY
33460: LIST
33461: LIST
33462: PUSH
33463: LD_INT 3
33465: PUSH
33466: LD_INT 2
33468: PUSH
33469: EMPTY
33470: LIST
33471: LIST
33472: PUSH
33473: LD_INT 3
33475: PUSH
33476: LD_INT 3
33478: PUSH
33479: EMPTY
33480: LIST
33481: LIST
33482: PUSH
33483: LD_INT 2
33485: PUSH
33486: LD_INT 3
33488: PUSH
33489: EMPTY
33490: LIST
33491: LIST
33492: PUSH
33493: LD_INT 1
33495: PUSH
33496: LD_INT 3
33498: PUSH
33499: EMPTY
33500: LIST
33501: LIST
33502: PUSH
33503: LD_INT 0
33505: PUSH
33506: LD_INT 3
33508: PUSH
33509: EMPTY
33510: LIST
33511: LIST
33512: PUSH
33513: LD_INT 1
33515: NEG
33516: PUSH
33517: LD_INT 2
33519: PUSH
33520: EMPTY
33521: LIST
33522: LIST
33523: PUSH
33524: LD_INT 3
33526: NEG
33527: PUSH
33528: LD_INT 2
33530: NEG
33531: PUSH
33532: EMPTY
33533: LIST
33534: LIST
33535: PUSH
33536: LD_INT 3
33538: NEG
33539: PUSH
33540: LD_INT 3
33542: NEG
33543: PUSH
33544: EMPTY
33545: LIST
33546: LIST
33547: PUSH
33548: EMPTY
33549: LIST
33550: LIST
33551: LIST
33552: LIST
33553: LIST
33554: LIST
33555: LIST
33556: LIST
33557: LIST
33558: LIST
33559: LIST
33560: LIST
33561: LIST
33562: LIST
33563: LIST
33564: LIST
33565: LIST
33566: LIST
33567: LIST
33568: LIST
33569: LIST
33570: LIST
33571: LIST
33572: LIST
33573: LIST
33574: LIST
33575: LIST
33576: LIST
33577: LIST
33578: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33579: LD_ADDR_VAR 0 43
33583: PUSH
33584: LD_INT 0
33586: PUSH
33587: LD_INT 0
33589: PUSH
33590: EMPTY
33591: LIST
33592: LIST
33593: PUSH
33594: LD_INT 0
33596: PUSH
33597: LD_INT 1
33599: NEG
33600: PUSH
33601: EMPTY
33602: LIST
33603: LIST
33604: PUSH
33605: LD_INT 1
33607: PUSH
33608: LD_INT 0
33610: PUSH
33611: EMPTY
33612: LIST
33613: LIST
33614: PUSH
33615: LD_INT 1
33617: PUSH
33618: LD_INT 1
33620: PUSH
33621: EMPTY
33622: LIST
33623: LIST
33624: PUSH
33625: LD_INT 0
33627: PUSH
33628: LD_INT 1
33630: PUSH
33631: EMPTY
33632: LIST
33633: LIST
33634: PUSH
33635: LD_INT 1
33637: NEG
33638: PUSH
33639: LD_INT 0
33641: PUSH
33642: EMPTY
33643: LIST
33644: LIST
33645: PUSH
33646: LD_INT 1
33648: NEG
33649: PUSH
33650: LD_INT 1
33652: NEG
33653: PUSH
33654: EMPTY
33655: LIST
33656: LIST
33657: PUSH
33658: LD_INT 1
33660: NEG
33661: PUSH
33662: LD_INT 2
33664: NEG
33665: PUSH
33666: EMPTY
33667: LIST
33668: LIST
33669: PUSH
33670: LD_INT 0
33672: PUSH
33673: LD_INT 2
33675: NEG
33676: PUSH
33677: EMPTY
33678: LIST
33679: LIST
33680: PUSH
33681: LD_INT 1
33683: PUSH
33684: LD_INT 1
33686: NEG
33687: PUSH
33688: EMPTY
33689: LIST
33690: LIST
33691: PUSH
33692: LD_INT 2
33694: PUSH
33695: LD_INT 0
33697: PUSH
33698: EMPTY
33699: LIST
33700: LIST
33701: PUSH
33702: LD_INT 2
33704: PUSH
33705: LD_INT 1
33707: PUSH
33708: EMPTY
33709: LIST
33710: LIST
33711: PUSH
33712: LD_INT 1
33714: PUSH
33715: LD_INT 2
33717: PUSH
33718: EMPTY
33719: LIST
33720: LIST
33721: PUSH
33722: LD_INT 0
33724: PUSH
33725: LD_INT 2
33727: PUSH
33728: EMPTY
33729: LIST
33730: LIST
33731: PUSH
33732: LD_INT 1
33734: NEG
33735: PUSH
33736: LD_INT 1
33738: PUSH
33739: EMPTY
33740: LIST
33741: LIST
33742: PUSH
33743: LD_INT 2
33745: NEG
33746: PUSH
33747: LD_INT 0
33749: PUSH
33750: EMPTY
33751: LIST
33752: LIST
33753: PUSH
33754: LD_INT 2
33756: NEG
33757: PUSH
33758: LD_INT 1
33760: NEG
33761: PUSH
33762: EMPTY
33763: LIST
33764: LIST
33765: PUSH
33766: LD_INT 1
33768: NEG
33769: PUSH
33770: LD_INT 3
33772: NEG
33773: PUSH
33774: EMPTY
33775: LIST
33776: LIST
33777: PUSH
33778: LD_INT 0
33780: PUSH
33781: LD_INT 3
33783: NEG
33784: PUSH
33785: EMPTY
33786: LIST
33787: LIST
33788: PUSH
33789: LD_INT 1
33791: PUSH
33792: LD_INT 2
33794: NEG
33795: PUSH
33796: EMPTY
33797: LIST
33798: LIST
33799: PUSH
33800: LD_INT 2
33802: PUSH
33803: LD_INT 1
33805: NEG
33806: PUSH
33807: EMPTY
33808: LIST
33809: LIST
33810: PUSH
33811: LD_INT 3
33813: PUSH
33814: LD_INT 0
33816: PUSH
33817: EMPTY
33818: LIST
33819: LIST
33820: PUSH
33821: LD_INT 3
33823: PUSH
33824: LD_INT 1
33826: PUSH
33827: EMPTY
33828: LIST
33829: LIST
33830: PUSH
33831: LD_INT 1
33833: PUSH
33834: LD_INT 3
33836: PUSH
33837: EMPTY
33838: LIST
33839: LIST
33840: PUSH
33841: LD_INT 0
33843: PUSH
33844: LD_INT 3
33846: PUSH
33847: EMPTY
33848: LIST
33849: LIST
33850: PUSH
33851: LD_INT 1
33853: NEG
33854: PUSH
33855: LD_INT 2
33857: PUSH
33858: EMPTY
33859: LIST
33860: LIST
33861: PUSH
33862: LD_INT 2
33864: NEG
33865: PUSH
33866: LD_INT 1
33868: PUSH
33869: EMPTY
33870: LIST
33871: LIST
33872: PUSH
33873: LD_INT 3
33875: NEG
33876: PUSH
33877: LD_INT 0
33879: PUSH
33880: EMPTY
33881: LIST
33882: LIST
33883: PUSH
33884: LD_INT 3
33886: NEG
33887: PUSH
33888: LD_INT 1
33890: NEG
33891: PUSH
33892: EMPTY
33893: LIST
33894: LIST
33895: PUSH
33896: EMPTY
33897: LIST
33898: LIST
33899: LIST
33900: LIST
33901: LIST
33902: LIST
33903: LIST
33904: LIST
33905: LIST
33906: LIST
33907: LIST
33908: LIST
33909: LIST
33910: LIST
33911: LIST
33912: LIST
33913: LIST
33914: LIST
33915: LIST
33916: LIST
33917: LIST
33918: LIST
33919: LIST
33920: LIST
33921: LIST
33922: LIST
33923: LIST
33924: LIST
33925: LIST
33926: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33927: LD_ADDR_VAR 0 44
33931: PUSH
33932: LD_INT 0
33934: PUSH
33935: LD_INT 0
33937: PUSH
33938: EMPTY
33939: LIST
33940: LIST
33941: PUSH
33942: LD_INT 0
33944: PUSH
33945: LD_INT 1
33947: NEG
33948: PUSH
33949: EMPTY
33950: LIST
33951: LIST
33952: PUSH
33953: LD_INT 1
33955: PUSH
33956: LD_INT 0
33958: PUSH
33959: EMPTY
33960: LIST
33961: LIST
33962: PUSH
33963: LD_INT 1
33965: PUSH
33966: LD_INT 1
33968: PUSH
33969: EMPTY
33970: LIST
33971: LIST
33972: PUSH
33973: LD_INT 0
33975: PUSH
33976: LD_INT 1
33978: PUSH
33979: EMPTY
33980: LIST
33981: LIST
33982: PUSH
33983: LD_INT 1
33985: NEG
33986: PUSH
33987: LD_INT 0
33989: PUSH
33990: EMPTY
33991: LIST
33992: LIST
33993: PUSH
33994: LD_INT 1
33996: NEG
33997: PUSH
33998: LD_INT 1
34000: NEG
34001: PUSH
34002: EMPTY
34003: LIST
34004: LIST
34005: PUSH
34006: LD_INT 1
34008: NEG
34009: PUSH
34010: LD_INT 2
34012: NEG
34013: PUSH
34014: EMPTY
34015: LIST
34016: LIST
34017: PUSH
34018: LD_INT 1
34020: PUSH
34021: LD_INT 1
34023: NEG
34024: PUSH
34025: EMPTY
34026: LIST
34027: LIST
34028: PUSH
34029: LD_INT 2
34031: PUSH
34032: LD_INT 0
34034: PUSH
34035: EMPTY
34036: LIST
34037: LIST
34038: PUSH
34039: LD_INT 2
34041: PUSH
34042: LD_INT 1
34044: PUSH
34045: EMPTY
34046: LIST
34047: LIST
34048: PUSH
34049: LD_INT 2
34051: PUSH
34052: LD_INT 2
34054: PUSH
34055: EMPTY
34056: LIST
34057: LIST
34058: PUSH
34059: LD_INT 1
34061: PUSH
34062: LD_INT 2
34064: PUSH
34065: EMPTY
34066: LIST
34067: LIST
34068: PUSH
34069: LD_INT 1
34071: NEG
34072: PUSH
34073: LD_INT 1
34075: PUSH
34076: EMPTY
34077: LIST
34078: LIST
34079: PUSH
34080: LD_INT 2
34082: NEG
34083: PUSH
34084: LD_INT 0
34086: PUSH
34087: EMPTY
34088: LIST
34089: LIST
34090: PUSH
34091: LD_INT 2
34093: NEG
34094: PUSH
34095: LD_INT 1
34097: NEG
34098: PUSH
34099: EMPTY
34100: LIST
34101: LIST
34102: PUSH
34103: LD_INT 2
34105: NEG
34106: PUSH
34107: LD_INT 2
34109: NEG
34110: PUSH
34111: EMPTY
34112: LIST
34113: LIST
34114: PUSH
34115: LD_INT 2
34117: NEG
34118: PUSH
34119: LD_INT 3
34121: NEG
34122: PUSH
34123: EMPTY
34124: LIST
34125: LIST
34126: PUSH
34127: LD_INT 2
34129: PUSH
34130: LD_INT 1
34132: NEG
34133: PUSH
34134: EMPTY
34135: LIST
34136: LIST
34137: PUSH
34138: LD_INT 3
34140: PUSH
34141: LD_INT 0
34143: PUSH
34144: EMPTY
34145: LIST
34146: LIST
34147: PUSH
34148: LD_INT 3
34150: PUSH
34151: LD_INT 1
34153: PUSH
34154: EMPTY
34155: LIST
34156: LIST
34157: PUSH
34158: LD_INT 3
34160: PUSH
34161: LD_INT 2
34163: PUSH
34164: EMPTY
34165: LIST
34166: LIST
34167: PUSH
34168: LD_INT 3
34170: PUSH
34171: LD_INT 3
34173: PUSH
34174: EMPTY
34175: LIST
34176: LIST
34177: PUSH
34178: LD_INT 2
34180: PUSH
34181: LD_INT 3
34183: PUSH
34184: EMPTY
34185: LIST
34186: LIST
34187: PUSH
34188: LD_INT 2
34190: NEG
34191: PUSH
34192: LD_INT 1
34194: PUSH
34195: EMPTY
34196: LIST
34197: LIST
34198: PUSH
34199: LD_INT 3
34201: NEG
34202: PUSH
34203: LD_INT 0
34205: PUSH
34206: EMPTY
34207: LIST
34208: LIST
34209: PUSH
34210: LD_INT 3
34212: NEG
34213: PUSH
34214: LD_INT 1
34216: NEG
34217: PUSH
34218: EMPTY
34219: LIST
34220: LIST
34221: PUSH
34222: LD_INT 3
34224: NEG
34225: PUSH
34226: LD_INT 2
34228: NEG
34229: PUSH
34230: EMPTY
34231: LIST
34232: LIST
34233: PUSH
34234: LD_INT 3
34236: NEG
34237: PUSH
34238: LD_INT 3
34240: NEG
34241: PUSH
34242: EMPTY
34243: LIST
34244: LIST
34245: PUSH
34246: EMPTY
34247: LIST
34248: LIST
34249: LIST
34250: LIST
34251: LIST
34252: LIST
34253: LIST
34254: LIST
34255: LIST
34256: LIST
34257: LIST
34258: LIST
34259: LIST
34260: LIST
34261: LIST
34262: LIST
34263: LIST
34264: LIST
34265: LIST
34266: LIST
34267: LIST
34268: LIST
34269: LIST
34270: LIST
34271: LIST
34272: LIST
34273: LIST
34274: LIST
34275: LIST
34276: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34277: LD_ADDR_VAR 0 45
34281: PUSH
34282: LD_INT 0
34284: PUSH
34285: LD_INT 0
34287: PUSH
34288: EMPTY
34289: LIST
34290: LIST
34291: PUSH
34292: LD_INT 0
34294: PUSH
34295: LD_INT 1
34297: NEG
34298: PUSH
34299: EMPTY
34300: LIST
34301: LIST
34302: PUSH
34303: LD_INT 1
34305: PUSH
34306: LD_INT 0
34308: PUSH
34309: EMPTY
34310: LIST
34311: LIST
34312: PUSH
34313: LD_INT 1
34315: PUSH
34316: LD_INT 1
34318: PUSH
34319: EMPTY
34320: LIST
34321: LIST
34322: PUSH
34323: LD_INT 0
34325: PUSH
34326: LD_INT 1
34328: PUSH
34329: EMPTY
34330: LIST
34331: LIST
34332: PUSH
34333: LD_INT 1
34335: NEG
34336: PUSH
34337: LD_INT 0
34339: PUSH
34340: EMPTY
34341: LIST
34342: LIST
34343: PUSH
34344: LD_INT 1
34346: NEG
34347: PUSH
34348: LD_INT 1
34350: NEG
34351: PUSH
34352: EMPTY
34353: LIST
34354: LIST
34355: PUSH
34356: LD_INT 1
34358: NEG
34359: PUSH
34360: LD_INT 2
34362: NEG
34363: PUSH
34364: EMPTY
34365: LIST
34366: LIST
34367: PUSH
34368: LD_INT 0
34370: PUSH
34371: LD_INT 2
34373: NEG
34374: PUSH
34375: EMPTY
34376: LIST
34377: LIST
34378: PUSH
34379: LD_INT 1
34381: PUSH
34382: LD_INT 1
34384: NEG
34385: PUSH
34386: EMPTY
34387: LIST
34388: LIST
34389: PUSH
34390: LD_INT 2
34392: PUSH
34393: LD_INT 1
34395: PUSH
34396: EMPTY
34397: LIST
34398: LIST
34399: PUSH
34400: LD_INT 2
34402: PUSH
34403: LD_INT 2
34405: PUSH
34406: EMPTY
34407: LIST
34408: LIST
34409: PUSH
34410: LD_INT 1
34412: PUSH
34413: LD_INT 2
34415: PUSH
34416: EMPTY
34417: LIST
34418: LIST
34419: PUSH
34420: LD_INT 0
34422: PUSH
34423: LD_INT 2
34425: PUSH
34426: EMPTY
34427: LIST
34428: LIST
34429: PUSH
34430: LD_INT 1
34432: NEG
34433: PUSH
34434: LD_INT 1
34436: PUSH
34437: EMPTY
34438: LIST
34439: LIST
34440: PUSH
34441: LD_INT 2
34443: NEG
34444: PUSH
34445: LD_INT 1
34447: NEG
34448: PUSH
34449: EMPTY
34450: LIST
34451: LIST
34452: PUSH
34453: LD_INT 2
34455: NEG
34456: PUSH
34457: LD_INT 2
34459: NEG
34460: PUSH
34461: EMPTY
34462: LIST
34463: LIST
34464: PUSH
34465: LD_INT 2
34467: NEG
34468: PUSH
34469: LD_INT 3
34471: NEG
34472: PUSH
34473: EMPTY
34474: LIST
34475: LIST
34476: PUSH
34477: LD_INT 1
34479: NEG
34480: PUSH
34481: LD_INT 3
34483: NEG
34484: PUSH
34485: EMPTY
34486: LIST
34487: LIST
34488: PUSH
34489: LD_INT 0
34491: PUSH
34492: LD_INT 3
34494: NEG
34495: PUSH
34496: EMPTY
34497: LIST
34498: LIST
34499: PUSH
34500: LD_INT 1
34502: PUSH
34503: LD_INT 2
34505: NEG
34506: PUSH
34507: EMPTY
34508: LIST
34509: LIST
34510: PUSH
34511: LD_INT 3
34513: PUSH
34514: LD_INT 2
34516: PUSH
34517: EMPTY
34518: LIST
34519: LIST
34520: PUSH
34521: LD_INT 3
34523: PUSH
34524: LD_INT 3
34526: PUSH
34527: EMPTY
34528: LIST
34529: LIST
34530: PUSH
34531: LD_INT 2
34533: PUSH
34534: LD_INT 3
34536: PUSH
34537: EMPTY
34538: LIST
34539: LIST
34540: PUSH
34541: LD_INT 1
34543: PUSH
34544: LD_INT 3
34546: PUSH
34547: EMPTY
34548: LIST
34549: LIST
34550: PUSH
34551: LD_INT 0
34553: PUSH
34554: LD_INT 3
34556: PUSH
34557: EMPTY
34558: LIST
34559: LIST
34560: PUSH
34561: LD_INT 1
34563: NEG
34564: PUSH
34565: LD_INT 2
34567: PUSH
34568: EMPTY
34569: LIST
34570: LIST
34571: PUSH
34572: LD_INT 3
34574: NEG
34575: PUSH
34576: LD_INT 2
34578: NEG
34579: PUSH
34580: EMPTY
34581: LIST
34582: LIST
34583: PUSH
34584: LD_INT 3
34586: NEG
34587: PUSH
34588: LD_INT 3
34590: NEG
34591: PUSH
34592: EMPTY
34593: LIST
34594: LIST
34595: PUSH
34596: EMPTY
34597: LIST
34598: LIST
34599: LIST
34600: LIST
34601: LIST
34602: LIST
34603: LIST
34604: LIST
34605: LIST
34606: LIST
34607: LIST
34608: LIST
34609: LIST
34610: LIST
34611: LIST
34612: LIST
34613: LIST
34614: LIST
34615: LIST
34616: LIST
34617: LIST
34618: LIST
34619: LIST
34620: LIST
34621: LIST
34622: LIST
34623: LIST
34624: LIST
34625: LIST
34626: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34627: LD_ADDR_VAR 0 46
34631: PUSH
34632: LD_INT 0
34634: PUSH
34635: LD_INT 0
34637: PUSH
34638: EMPTY
34639: LIST
34640: LIST
34641: PUSH
34642: LD_INT 0
34644: PUSH
34645: LD_INT 1
34647: NEG
34648: PUSH
34649: EMPTY
34650: LIST
34651: LIST
34652: PUSH
34653: LD_INT 1
34655: PUSH
34656: LD_INT 0
34658: PUSH
34659: EMPTY
34660: LIST
34661: LIST
34662: PUSH
34663: LD_INT 1
34665: PUSH
34666: LD_INT 1
34668: PUSH
34669: EMPTY
34670: LIST
34671: LIST
34672: PUSH
34673: LD_INT 0
34675: PUSH
34676: LD_INT 1
34678: PUSH
34679: EMPTY
34680: LIST
34681: LIST
34682: PUSH
34683: LD_INT 1
34685: NEG
34686: PUSH
34687: LD_INT 0
34689: PUSH
34690: EMPTY
34691: LIST
34692: LIST
34693: PUSH
34694: LD_INT 1
34696: NEG
34697: PUSH
34698: LD_INT 1
34700: NEG
34701: PUSH
34702: EMPTY
34703: LIST
34704: LIST
34705: PUSH
34706: LD_INT 1
34708: NEG
34709: PUSH
34710: LD_INT 2
34712: NEG
34713: PUSH
34714: EMPTY
34715: LIST
34716: LIST
34717: PUSH
34718: LD_INT 0
34720: PUSH
34721: LD_INT 2
34723: NEG
34724: PUSH
34725: EMPTY
34726: LIST
34727: LIST
34728: PUSH
34729: LD_INT 1
34731: PUSH
34732: LD_INT 1
34734: NEG
34735: PUSH
34736: EMPTY
34737: LIST
34738: LIST
34739: PUSH
34740: LD_INT 2
34742: PUSH
34743: LD_INT 0
34745: PUSH
34746: EMPTY
34747: LIST
34748: LIST
34749: PUSH
34750: LD_INT 2
34752: PUSH
34753: LD_INT 1
34755: PUSH
34756: EMPTY
34757: LIST
34758: LIST
34759: PUSH
34760: LD_INT 1
34762: PUSH
34763: LD_INT 2
34765: PUSH
34766: EMPTY
34767: LIST
34768: LIST
34769: PUSH
34770: LD_INT 0
34772: PUSH
34773: LD_INT 2
34775: PUSH
34776: EMPTY
34777: LIST
34778: LIST
34779: PUSH
34780: LD_INT 1
34782: NEG
34783: PUSH
34784: LD_INT 1
34786: PUSH
34787: EMPTY
34788: LIST
34789: LIST
34790: PUSH
34791: LD_INT 2
34793: NEG
34794: PUSH
34795: LD_INT 0
34797: PUSH
34798: EMPTY
34799: LIST
34800: LIST
34801: PUSH
34802: LD_INT 2
34804: NEG
34805: PUSH
34806: LD_INT 1
34808: NEG
34809: PUSH
34810: EMPTY
34811: LIST
34812: LIST
34813: PUSH
34814: LD_INT 1
34816: NEG
34817: PUSH
34818: LD_INT 3
34820: NEG
34821: PUSH
34822: EMPTY
34823: LIST
34824: LIST
34825: PUSH
34826: LD_INT 0
34828: PUSH
34829: LD_INT 3
34831: NEG
34832: PUSH
34833: EMPTY
34834: LIST
34835: LIST
34836: PUSH
34837: LD_INT 1
34839: PUSH
34840: LD_INT 2
34842: NEG
34843: PUSH
34844: EMPTY
34845: LIST
34846: LIST
34847: PUSH
34848: LD_INT 2
34850: PUSH
34851: LD_INT 1
34853: NEG
34854: PUSH
34855: EMPTY
34856: LIST
34857: LIST
34858: PUSH
34859: LD_INT 3
34861: PUSH
34862: LD_INT 0
34864: PUSH
34865: EMPTY
34866: LIST
34867: LIST
34868: PUSH
34869: LD_INT 3
34871: PUSH
34872: LD_INT 1
34874: PUSH
34875: EMPTY
34876: LIST
34877: LIST
34878: PUSH
34879: LD_INT 1
34881: PUSH
34882: LD_INT 3
34884: PUSH
34885: EMPTY
34886: LIST
34887: LIST
34888: PUSH
34889: LD_INT 0
34891: PUSH
34892: LD_INT 3
34894: PUSH
34895: EMPTY
34896: LIST
34897: LIST
34898: PUSH
34899: LD_INT 1
34901: NEG
34902: PUSH
34903: LD_INT 2
34905: PUSH
34906: EMPTY
34907: LIST
34908: LIST
34909: PUSH
34910: LD_INT 2
34912: NEG
34913: PUSH
34914: LD_INT 1
34916: PUSH
34917: EMPTY
34918: LIST
34919: LIST
34920: PUSH
34921: LD_INT 3
34923: NEG
34924: PUSH
34925: LD_INT 0
34927: PUSH
34928: EMPTY
34929: LIST
34930: LIST
34931: PUSH
34932: LD_INT 3
34934: NEG
34935: PUSH
34936: LD_INT 1
34938: NEG
34939: PUSH
34940: EMPTY
34941: LIST
34942: LIST
34943: PUSH
34944: EMPTY
34945: LIST
34946: LIST
34947: LIST
34948: LIST
34949: LIST
34950: LIST
34951: LIST
34952: LIST
34953: LIST
34954: LIST
34955: LIST
34956: LIST
34957: LIST
34958: LIST
34959: LIST
34960: LIST
34961: LIST
34962: LIST
34963: LIST
34964: LIST
34965: LIST
34966: LIST
34967: LIST
34968: LIST
34969: LIST
34970: LIST
34971: LIST
34972: LIST
34973: LIST
34974: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34975: LD_ADDR_VAR 0 47
34979: PUSH
34980: LD_INT 0
34982: PUSH
34983: LD_INT 0
34985: PUSH
34986: EMPTY
34987: LIST
34988: LIST
34989: PUSH
34990: LD_INT 0
34992: PUSH
34993: LD_INT 1
34995: NEG
34996: PUSH
34997: EMPTY
34998: LIST
34999: LIST
35000: PUSH
35001: LD_INT 1
35003: PUSH
35004: LD_INT 0
35006: PUSH
35007: EMPTY
35008: LIST
35009: LIST
35010: PUSH
35011: LD_INT 1
35013: PUSH
35014: LD_INT 1
35016: PUSH
35017: EMPTY
35018: LIST
35019: LIST
35020: PUSH
35021: LD_INT 0
35023: PUSH
35024: LD_INT 1
35026: PUSH
35027: EMPTY
35028: LIST
35029: LIST
35030: PUSH
35031: LD_INT 1
35033: NEG
35034: PUSH
35035: LD_INT 0
35037: PUSH
35038: EMPTY
35039: LIST
35040: LIST
35041: PUSH
35042: LD_INT 1
35044: NEG
35045: PUSH
35046: LD_INT 1
35048: NEG
35049: PUSH
35050: EMPTY
35051: LIST
35052: LIST
35053: PUSH
35054: LD_INT 1
35056: NEG
35057: PUSH
35058: LD_INT 2
35060: NEG
35061: PUSH
35062: EMPTY
35063: LIST
35064: LIST
35065: PUSH
35066: LD_INT 0
35068: PUSH
35069: LD_INT 2
35071: NEG
35072: PUSH
35073: EMPTY
35074: LIST
35075: LIST
35076: PUSH
35077: LD_INT 1
35079: PUSH
35080: LD_INT 1
35082: NEG
35083: PUSH
35084: EMPTY
35085: LIST
35086: LIST
35087: PUSH
35088: LD_INT 2
35090: NEG
35091: PUSH
35092: LD_INT 1
35094: NEG
35095: PUSH
35096: EMPTY
35097: LIST
35098: LIST
35099: PUSH
35100: LD_INT 2
35102: NEG
35103: PUSH
35104: LD_INT 2
35106: NEG
35107: PUSH
35108: EMPTY
35109: LIST
35110: LIST
35111: PUSH
35112: EMPTY
35113: LIST
35114: LIST
35115: LIST
35116: LIST
35117: LIST
35118: LIST
35119: LIST
35120: LIST
35121: LIST
35122: LIST
35123: LIST
35124: LIST
35125: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
35126: LD_ADDR_VAR 0 48
35130: PUSH
35131: LD_INT 0
35133: PUSH
35134: LD_INT 0
35136: PUSH
35137: EMPTY
35138: LIST
35139: LIST
35140: PUSH
35141: LD_INT 0
35143: PUSH
35144: LD_INT 1
35146: NEG
35147: PUSH
35148: EMPTY
35149: LIST
35150: LIST
35151: PUSH
35152: LD_INT 1
35154: PUSH
35155: LD_INT 0
35157: PUSH
35158: EMPTY
35159: LIST
35160: LIST
35161: PUSH
35162: LD_INT 1
35164: PUSH
35165: LD_INT 1
35167: PUSH
35168: EMPTY
35169: LIST
35170: LIST
35171: PUSH
35172: LD_INT 0
35174: PUSH
35175: LD_INT 1
35177: PUSH
35178: EMPTY
35179: LIST
35180: LIST
35181: PUSH
35182: LD_INT 1
35184: NEG
35185: PUSH
35186: LD_INT 0
35188: PUSH
35189: EMPTY
35190: LIST
35191: LIST
35192: PUSH
35193: LD_INT 1
35195: NEG
35196: PUSH
35197: LD_INT 1
35199: NEG
35200: PUSH
35201: EMPTY
35202: LIST
35203: LIST
35204: PUSH
35205: LD_INT 1
35207: NEG
35208: PUSH
35209: LD_INT 2
35211: NEG
35212: PUSH
35213: EMPTY
35214: LIST
35215: LIST
35216: PUSH
35217: LD_INT 0
35219: PUSH
35220: LD_INT 2
35222: NEG
35223: PUSH
35224: EMPTY
35225: LIST
35226: LIST
35227: PUSH
35228: LD_INT 1
35230: PUSH
35231: LD_INT 1
35233: NEG
35234: PUSH
35235: EMPTY
35236: LIST
35237: LIST
35238: PUSH
35239: LD_INT 2
35241: PUSH
35242: LD_INT 0
35244: PUSH
35245: EMPTY
35246: LIST
35247: LIST
35248: PUSH
35249: LD_INT 2
35251: PUSH
35252: LD_INT 1
35254: PUSH
35255: EMPTY
35256: LIST
35257: LIST
35258: PUSH
35259: EMPTY
35260: LIST
35261: LIST
35262: LIST
35263: LIST
35264: LIST
35265: LIST
35266: LIST
35267: LIST
35268: LIST
35269: LIST
35270: LIST
35271: LIST
35272: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
35273: LD_ADDR_VAR 0 49
35277: PUSH
35278: LD_INT 0
35280: PUSH
35281: LD_INT 0
35283: PUSH
35284: EMPTY
35285: LIST
35286: LIST
35287: PUSH
35288: LD_INT 0
35290: PUSH
35291: LD_INT 1
35293: NEG
35294: PUSH
35295: EMPTY
35296: LIST
35297: LIST
35298: PUSH
35299: LD_INT 1
35301: PUSH
35302: LD_INT 0
35304: PUSH
35305: EMPTY
35306: LIST
35307: LIST
35308: PUSH
35309: LD_INT 1
35311: PUSH
35312: LD_INT 1
35314: PUSH
35315: EMPTY
35316: LIST
35317: LIST
35318: PUSH
35319: LD_INT 0
35321: PUSH
35322: LD_INT 1
35324: PUSH
35325: EMPTY
35326: LIST
35327: LIST
35328: PUSH
35329: LD_INT 1
35331: NEG
35332: PUSH
35333: LD_INT 0
35335: PUSH
35336: EMPTY
35337: LIST
35338: LIST
35339: PUSH
35340: LD_INT 1
35342: NEG
35343: PUSH
35344: LD_INT 1
35346: NEG
35347: PUSH
35348: EMPTY
35349: LIST
35350: LIST
35351: PUSH
35352: LD_INT 1
35354: PUSH
35355: LD_INT 1
35357: NEG
35358: PUSH
35359: EMPTY
35360: LIST
35361: LIST
35362: PUSH
35363: LD_INT 2
35365: PUSH
35366: LD_INT 0
35368: PUSH
35369: EMPTY
35370: LIST
35371: LIST
35372: PUSH
35373: LD_INT 2
35375: PUSH
35376: LD_INT 1
35378: PUSH
35379: EMPTY
35380: LIST
35381: LIST
35382: PUSH
35383: LD_INT 2
35385: PUSH
35386: LD_INT 2
35388: PUSH
35389: EMPTY
35390: LIST
35391: LIST
35392: PUSH
35393: LD_INT 1
35395: PUSH
35396: LD_INT 2
35398: PUSH
35399: EMPTY
35400: LIST
35401: LIST
35402: PUSH
35403: EMPTY
35404: LIST
35405: LIST
35406: LIST
35407: LIST
35408: LIST
35409: LIST
35410: LIST
35411: LIST
35412: LIST
35413: LIST
35414: LIST
35415: LIST
35416: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
35417: LD_ADDR_VAR 0 50
35421: PUSH
35422: LD_INT 0
35424: PUSH
35425: LD_INT 0
35427: PUSH
35428: EMPTY
35429: LIST
35430: LIST
35431: PUSH
35432: LD_INT 0
35434: PUSH
35435: LD_INT 1
35437: NEG
35438: PUSH
35439: EMPTY
35440: LIST
35441: LIST
35442: PUSH
35443: LD_INT 1
35445: PUSH
35446: LD_INT 0
35448: PUSH
35449: EMPTY
35450: LIST
35451: LIST
35452: PUSH
35453: LD_INT 1
35455: PUSH
35456: LD_INT 1
35458: PUSH
35459: EMPTY
35460: LIST
35461: LIST
35462: PUSH
35463: LD_INT 0
35465: PUSH
35466: LD_INT 1
35468: PUSH
35469: EMPTY
35470: LIST
35471: LIST
35472: PUSH
35473: LD_INT 1
35475: NEG
35476: PUSH
35477: LD_INT 0
35479: PUSH
35480: EMPTY
35481: LIST
35482: LIST
35483: PUSH
35484: LD_INT 1
35486: NEG
35487: PUSH
35488: LD_INT 1
35490: NEG
35491: PUSH
35492: EMPTY
35493: LIST
35494: LIST
35495: PUSH
35496: LD_INT 2
35498: PUSH
35499: LD_INT 1
35501: PUSH
35502: EMPTY
35503: LIST
35504: LIST
35505: PUSH
35506: LD_INT 2
35508: PUSH
35509: LD_INT 2
35511: PUSH
35512: EMPTY
35513: LIST
35514: LIST
35515: PUSH
35516: LD_INT 1
35518: PUSH
35519: LD_INT 2
35521: PUSH
35522: EMPTY
35523: LIST
35524: LIST
35525: PUSH
35526: LD_INT 0
35528: PUSH
35529: LD_INT 2
35531: PUSH
35532: EMPTY
35533: LIST
35534: LIST
35535: PUSH
35536: LD_INT 1
35538: NEG
35539: PUSH
35540: LD_INT 1
35542: PUSH
35543: EMPTY
35544: LIST
35545: LIST
35546: PUSH
35547: EMPTY
35548: LIST
35549: LIST
35550: LIST
35551: LIST
35552: LIST
35553: LIST
35554: LIST
35555: LIST
35556: LIST
35557: LIST
35558: LIST
35559: LIST
35560: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
35561: LD_ADDR_VAR 0 51
35565: PUSH
35566: LD_INT 0
35568: PUSH
35569: LD_INT 0
35571: PUSH
35572: EMPTY
35573: LIST
35574: LIST
35575: PUSH
35576: LD_INT 0
35578: PUSH
35579: LD_INT 1
35581: NEG
35582: PUSH
35583: EMPTY
35584: LIST
35585: LIST
35586: PUSH
35587: LD_INT 1
35589: PUSH
35590: LD_INT 0
35592: PUSH
35593: EMPTY
35594: LIST
35595: LIST
35596: PUSH
35597: LD_INT 1
35599: PUSH
35600: LD_INT 1
35602: PUSH
35603: EMPTY
35604: LIST
35605: LIST
35606: PUSH
35607: LD_INT 0
35609: PUSH
35610: LD_INT 1
35612: PUSH
35613: EMPTY
35614: LIST
35615: LIST
35616: PUSH
35617: LD_INT 1
35619: NEG
35620: PUSH
35621: LD_INT 0
35623: PUSH
35624: EMPTY
35625: LIST
35626: LIST
35627: PUSH
35628: LD_INT 1
35630: NEG
35631: PUSH
35632: LD_INT 1
35634: NEG
35635: PUSH
35636: EMPTY
35637: LIST
35638: LIST
35639: PUSH
35640: LD_INT 1
35642: PUSH
35643: LD_INT 2
35645: PUSH
35646: EMPTY
35647: LIST
35648: LIST
35649: PUSH
35650: LD_INT 0
35652: PUSH
35653: LD_INT 2
35655: PUSH
35656: EMPTY
35657: LIST
35658: LIST
35659: PUSH
35660: LD_INT 1
35662: NEG
35663: PUSH
35664: LD_INT 1
35666: PUSH
35667: EMPTY
35668: LIST
35669: LIST
35670: PUSH
35671: LD_INT 2
35673: NEG
35674: PUSH
35675: LD_INT 0
35677: PUSH
35678: EMPTY
35679: LIST
35680: LIST
35681: PUSH
35682: LD_INT 2
35684: NEG
35685: PUSH
35686: LD_INT 1
35688: NEG
35689: PUSH
35690: EMPTY
35691: LIST
35692: LIST
35693: PUSH
35694: EMPTY
35695: LIST
35696: LIST
35697: LIST
35698: LIST
35699: LIST
35700: LIST
35701: LIST
35702: LIST
35703: LIST
35704: LIST
35705: LIST
35706: LIST
35707: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35708: LD_ADDR_VAR 0 52
35712: PUSH
35713: LD_INT 0
35715: PUSH
35716: LD_INT 0
35718: PUSH
35719: EMPTY
35720: LIST
35721: LIST
35722: PUSH
35723: LD_INT 0
35725: PUSH
35726: LD_INT 1
35728: NEG
35729: PUSH
35730: EMPTY
35731: LIST
35732: LIST
35733: PUSH
35734: LD_INT 1
35736: PUSH
35737: LD_INT 0
35739: PUSH
35740: EMPTY
35741: LIST
35742: LIST
35743: PUSH
35744: LD_INT 1
35746: PUSH
35747: LD_INT 1
35749: PUSH
35750: EMPTY
35751: LIST
35752: LIST
35753: PUSH
35754: LD_INT 0
35756: PUSH
35757: LD_INT 1
35759: PUSH
35760: EMPTY
35761: LIST
35762: LIST
35763: PUSH
35764: LD_INT 1
35766: NEG
35767: PUSH
35768: LD_INT 0
35770: PUSH
35771: EMPTY
35772: LIST
35773: LIST
35774: PUSH
35775: LD_INT 1
35777: NEG
35778: PUSH
35779: LD_INT 1
35781: NEG
35782: PUSH
35783: EMPTY
35784: LIST
35785: LIST
35786: PUSH
35787: LD_INT 1
35789: NEG
35790: PUSH
35791: LD_INT 2
35793: NEG
35794: PUSH
35795: EMPTY
35796: LIST
35797: LIST
35798: PUSH
35799: LD_INT 1
35801: NEG
35802: PUSH
35803: LD_INT 1
35805: PUSH
35806: EMPTY
35807: LIST
35808: LIST
35809: PUSH
35810: LD_INT 2
35812: NEG
35813: PUSH
35814: LD_INT 0
35816: PUSH
35817: EMPTY
35818: LIST
35819: LIST
35820: PUSH
35821: LD_INT 2
35823: NEG
35824: PUSH
35825: LD_INT 1
35827: NEG
35828: PUSH
35829: EMPTY
35830: LIST
35831: LIST
35832: PUSH
35833: LD_INT 2
35835: NEG
35836: PUSH
35837: LD_INT 2
35839: NEG
35840: PUSH
35841: EMPTY
35842: LIST
35843: LIST
35844: PUSH
35845: EMPTY
35846: LIST
35847: LIST
35848: LIST
35849: LIST
35850: LIST
35851: LIST
35852: LIST
35853: LIST
35854: LIST
35855: LIST
35856: LIST
35857: LIST
35858: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35859: LD_ADDR_VAR 0 53
35863: PUSH
35864: LD_INT 0
35866: PUSH
35867: LD_INT 0
35869: PUSH
35870: EMPTY
35871: LIST
35872: LIST
35873: PUSH
35874: LD_INT 0
35876: PUSH
35877: LD_INT 1
35879: NEG
35880: PUSH
35881: EMPTY
35882: LIST
35883: LIST
35884: PUSH
35885: LD_INT 1
35887: PUSH
35888: LD_INT 0
35890: PUSH
35891: EMPTY
35892: LIST
35893: LIST
35894: PUSH
35895: LD_INT 1
35897: PUSH
35898: LD_INT 1
35900: PUSH
35901: EMPTY
35902: LIST
35903: LIST
35904: PUSH
35905: LD_INT 0
35907: PUSH
35908: LD_INT 1
35910: PUSH
35911: EMPTY
35912: LIST
35913: LIST
35914: PUSH
35915: LD_INT 1
35917: NEG
35918: PUSH
35919: LD_INT 0
35921: PUSH
35922: EMPTY
35923: LIST
35924: LIST
35925: PUSH
35926: LD_INT 1
35928: NEG
35929: PUSH
35930: LD_INT 1
35932: NEG
35933: PUSH
35934: EMPTY
35935: LIST
35936: LIST
35937: PUSH
35938: LD_INT 1
35940: NEG
35941: PUSH
35942: LD_INT 2
35944: NEG
35945: PUSH
35946: EMPTY
35947: LIST
35948: LIST
35949: PUSH
35950: LD_INT 0
35952: PUSH
35953: LD_INT 2
35955: NEG
35956: PUSH
35957: EMPTY
35958: LIST
35959: LIST
35960: PUSH
35961: LD_INT 1
35963: PUSH
35964: LD_INT 1
35966: NEG
35967: PUSH
35968: EMPTY
35969: LIST
35970: LIST
35971: PUSH
35972: LD_INT 2
35974: PUSH
35975: LD_INT 0
35977: PUSH
35978: EMPTY
35979: LIST
35980: LIST
35981: PUSH
35982: LD_INT 2
35984: PUSH
35985: LD_INT 1
35987: PUSH
35988: EMPTY
35989: LIST
35990: LIST
35991: PUSH
35992: LD_INT 2
35994: PUSH
35995: LD_INT 2
35997: PUSH
35998: EMPTY
35999: LIST
36000: LIST
36001: PUSH
36002: LD_INT 1
36004: PUSH
36005: LD_INT 2
36007: PUSH
36008: EMPTY
36009: LIST
36010: LIST
36011: PUSH
36012: LD_INT 0
36014: PUSH
36015: LD_INT 2
36017: PUSH
36018: EMPTY
36019: LIST
36020: LIST
36021: PUSH
36022: LD_INT 1
36024: NEG
36025: PUSH
36026: LD_INT 1
36028: PUSH
36029: EMPTY
36030: LIST
36031: LIST
36032: PUSH
36033: LD_INT 2
36035: NEG
36036: PUSH
36037: LD_INT 0
36039: PUSH
36040: EMPTY
36041: LIST
36042: LIST
36043: PUSH
36044: LD_INT 2
36046: NEG
36047: PUSH
36048: LD_INT 1
36050: NEG
36051: PUSH
36052: EMPTY
36053: LIST
36054: LIST
36055: PUSH
36056: LD_INT 2
36058: NEG
36059: PUSH
36060: LD_INT 2
36062: NEG
36063: PUSH
36064: EMPTY
36065: LIST
36066: LIST
36067: PUSH
36068: EMPTY
36069: LIST
36070: LIST
36071: LIST
36072: LIST
36073: LIST
36074: LIST
36075: LIST
36076: LIST
36077: LIST
36078: LIST
36079: LIST
36080: LIST
36081: LIST
36082: LIST
36083: LIST
36084: LIST
36085: LIST
36086: LIST
36087: LIST
36088: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36089: LD_ADDR_VAR 0 54
36093: PUSH
36094: LD_INT 0
36096: PUSH
36097: LD_INT 0
36099: PUSH
36100: EMPTY
36101: LIST
36102: LIST
36103: PUSH
36104: LD_INT 0
36106: PUSH
36107: LD_INT 1
36109: NEG
36110: PUSH
36111: EMPTY
36112: LIST
36113: LIST
36114: PUSH
36115: LD_INT 1
36117: PUSH
36118: LD_INT 0
36120: PUSH
36121: EMPTY
36122: LIST
36123: LIST
36124: PUSH
36125: LD_INT 1
36127: PUSH
36128: LD_INT 1
36130: PUSH
36131: EMPTY
36132: LIST
36133: LIST
36134: PUSH
36135: LD_INT 0
36137: PUSH
36138: LD_INT 1
36140: PUSH
36141: EMPTY
36142: LIST
36143: LIST
36144: PUSH
36145: LD_INT 1
36147: NEG
36148: PUSH
36149: LD_INT 0
36151: PUSH
36152: EMPTY
36153: LIST
36154: LIST
36155: PUSH
36156: LD_INT 1
36158: NEG
36159: PUSH
36160: LD_INT 1
36162: NEG
36163: PUSH
36164: EMPTY
36165: LIST
36166: LIST
36167: PUSH
36168: LD_INT 1
36170: NEG
36171: PUSH
36172: LD_INT 2
36174: NEG
36175: PUSH
36176: EMPTY
36177: LIST
36178: LIST
36179: PUSH
36180: LD_INT 0
36182: PUSH
36183: LD_INT 2
36185: NEG
36186: PUSH
36187: EMPTY
36188: LIST
36189: LIST
36190: PUSH
36191: LD_INT 1
36193: PUSH
36194: LD_INT 1
36196: NEG
36197: PUSH
36198: EMPTY
36199: LIST
36200: LIST
36201: PUSH
36202: LD_INT 2
36204: PUSH
36205: LD_INT 0
36207: PUSH
36208: EMPTY
36209: LIST
36210: LIST
36211: PUSH
36212: LD_INT 2
36214: PUSH
36215: LD_INT 1
36217: PUSH
36218: EMPTY
36219: LIST
36220: LIST
36221: PUSH
36222: LD_INT 2
36224: PUSH
36225: LD_INT 2
36227: PUSH
36228: EMPTY
36229: LIST
36230: LIST
36231: PUSH
36232: LD_INT 1
36234: PUSH
36235: LD_INT 2
36237: PUSH
36238: EMPTY
36239: LIST
36240: LIST
36241: PUSH
36242: LD_INT 0
36244: PUSH
36245: LD_INT 2
36247: PUSH
36248: EMPTY
36249: LIST
36250: LIST
36251: PUSH
36252: LD_INT 1
36254: NEG
36255: PUSH
36256: LD_INT 1
36258: PUSH
36259: EMPTY
36260: LIST
36261: LIST
36262: PUSH
36263: LD_INT 2
36265: NEG
36266: PUSH
36267: LD_INT 0
36269: PUSH
36270: EMPTY
36271: LIST
36272: LIST
36273: PUSH
36274: LD_INT 2
36276: NEG
36277: PUSH
36278: LD_INT 1
36280: NEG
36281: PUSH
36282: EMPTY
36283: LIST
36284: LIST
36285: PUSH
36286: LD_INT 2
36288: NEG
36289: PUSH
36290: LD_INT 2
36292: NEG
36293: PUSH
36294: EMPTY
36295: LIST
36296: LIST
36297: PUSH
36298: EMPTY
36299: LIST
36300: LIST
36301: LIST
36302: LIST
36303: LIST
36304: LIST
36305: LIST
36306: LIST
36307: LIST
36308: LIST
36309: LIST
36310: LIST
36311: LIST
36312: LIST
36313: LIST
36314: LIST
36315: LIST
36316: LIST
36317: LIST
36318: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36319: LD_ADDR_VAR 0 55
36323: PUSH
36324: LD_INT 0
36326: PUSH
36327: LD_INT 0
36329: PUSH
36330: EMPTY
36331: LIST
36332: LIST
36333: PUSH
36334: LD_INT 0
36336: PUSH
36337: LD_INT 1
36339: NEG
36340: PUSH
36341: EMPTY
36342: LIST
36343: LIST
36344: PUSH
36345: LD_INT 1
36347: PUSH
36348: LD_INT 0
36350: PUSH
36351: EMPTY
36352: LIST
36353: LIST
36354: PUSH
36355: LD_INT 1
36357: PUSH
36358: LD_INT 1
36360: PUSH
36361: EMPTY
36362: LIST
36363: LIST
36364: PUSH
36365: LD_INT 0
36367: PUSH
36368: LD_INT 1
36370: PUSH
36371: EMPTY
36372: LIST
36373: LIST
36374: PUSH
36375: LD_INT 1
36377: NEG
36378: PUSH
36379: LD_INT 0
36381: PUSH
36382: EMPTY
36383: LIST
36384: LIST
36385: PUSH
36386: LD_INT 1
36388: NEG
36389: PUSH
36390: LD_INT 1
36392: NEG
36393: PUSH
36394: EMPTY
36395: LIST
36396: LIST
36397: PUSH
36398: LD_INT 1
36400: NEG
36401: PUSH
36402: LD_INT 2
36404: NEG
36405: PUSH
36406: EMPTY
36407: LIST
36408: LIST
36409: PUSH
36410: LD_INT 0
36412: PUSH
36413: LD_INT 2
36415: NEG
36416: PUSH
36417: EMPTY
36418: LIST
36419: LIST
36420: PUSH
36421: LD_INT 1
36423: PUSH
36424: LD_INT 1
36426: NEG
36427: PUSH
36428: EMPTY
36429: LIST
36430: LIST
36431: PUSH
36432: LD_INT 2
36434: PUSH
36435: LD_INT 0
36437: PUSH
36438: EMPTY
36439: LIST
36440: LIST
36441: PUSH
36442: LD_INT 2
36444: PUSH
36445: LD_INT 1
36447: PUSH
36448: EMPTY
36449: LIST
36450: LIST
36451: PUSH
36452: LD_INT 2
36454: PUSH
36455: LD_INT 2
36457: PUSH
36458: EMPTY
36459: LIST
36460: LIST
36461: PUSH
36462: LD_INT 1
36464: PUSH
36465: LD_INT 2
36467: PUSH
36468: EMPTY
36469: LIST
36470: LIST
36471: PUSH
36472: LD_INT 0
36474: PUSH
36475: LD_INT 2
36477: PUSH
36478: EMPTY
36479: LIST
36480: LIST
36481: PUSH
36482: LD_INT 1
36484: NEG
36485: PUSH
36486: LD_INT 1
36488: PUSH
36489: EMPTY
36490: LIST
36491: LIST
36492: PUSH
36493: LD_INT 2
36495: NEG
36496: PUSH
36497: LD_INT 0
36499: PUSH
36500: EMPTY
36501: LIST
36502: LIST
36503: PUSH
36504: LD_INT 2
36506: NEG
36507: PUSH
36508: LD_INT 1
36510: NEG
36511: PUSH
36512: EMPTY
36513: LIST
36514: LIST
36515: PUSH
36516: LD_INT 2
36518: NEG
36519: PUSH
36520: LD_INT 2
36522: NEG
36523: PUSH
36524: EMPTY
36525: LIST
36526: LIST
36527: PUSH
36528: EMPTY
36529: LIST
36530: LIST
36531: LIST
36532: LIST
36533: LIST
36534: LIST
36535: LIST
36536: LIST
36537: LIST
36538: LIST
36539: LIST
36540: LIST
36541: LIST
36542: LIST
36543: LIST
36544: LIST
36545: LIST
36546: LIST
36547: LIST
36548: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36549: LD_ADDR_VAR 0 56
36553: PUSH
36554: LD_INT 0
36556: PUSH
36557: LD_INT 0
36559: PUSH
36560: EMPTY
36561: LIST
36562: LIST
36563: PUSH
36564: LD_INT 0
36566: PUSH
36567: LD_INT 1
36569: NEG
36570: PUSH
36571: EMPTY
36572: LIST
36573: LIST
36574: PUSH
36575: LD_INT 1
36577: PUSH
36578: LD_INT 0
36580: PUSH
36581: EMPTY
36582: LIST
36583: LIST
36584: PUSH
36585: LD_INT 1
36587: PUSH
36588: LD_INT 1
36590: PUSH
36591: EMPTY
36592: LIST
36593: LIST
36594: PUSH
36595: LD_INT 0
36597: PUSH
36598: LD_INT 1
36600: PUSH
36601: EMPTY
36602: LIST
36603: LIST
36604: PUSH
36605: LD_INT 1
36607: NEG
36608: PUSH
36609: LD_INT 0
36611: PUSH
36612: EMPTY
36613: LIST
36614: LIST
36615: PUSH
36616: LD_INT 1
36618: NEG
36619: PUSH
36620: LD_INT 1
36622: NEG
36623: PUSH
36624: EMPTY
36625: LIST
36626: LIST
36627: PUSH
36628: LD_INT 1
36630: NEG
36631: PUSH
36632: LD_INT 2
36634: NEG
36635: PUSH
36636: EMPTY
36637: LIST
36638: LIST
36639: PUSH
36640: LD_INT 0
36642: PUSH
36643: LD_INT 2
36645: NEG
36646: PUSH
36647: EMPTY
36648: LIST
36649: LIST
36650: PUSH
36651: LD_INT 1
36653: PUSH
36654: LD_INT 1
36656: NEG
36657: PUSH
36658: EMPTY
36659: LIST
36660: LIST
36661: PUSH
36662: LD_INT 2
36664: PUSH
36665: LD_INT 0
36667: PUSH
36668: EMPTY
36669: LIST
36670: LIST
36671: PUSH
36672: LD_INT 2
36674: PUSH
36675: LD_INT 1
36677: PUSH
36678: EMPTY
36679: LIST
36680: LIST
36681: PUSH
36682: LD_INT 2
36684: PUSH
36685: LD_INT 2
36687: PUSH
36688: EMPTY
36689: LIST
36690: LIST
36691: PUSH
36692: LD_INT 1
36694: PUSH
36695: LD_INT 2
36697: PUSH
36698: EMPTY
36699: LIST
36700: LIST
36701: PUSH
36702: LD_INT 0
36704: PUSH
36705: LD_INT 2
36707: PUSH
36708: EMPTY
36709: LIST
36710: LIST
36711: PUSH
36712: LD_INT 1
36714: NEG
36715: PUSH
36716: LD_INT 1
36718: PUSH
36719: EMPTY
36720: LIST
36721: LIST
36722: PUSH
36723: LD_INT 2
36725: NEG
36726: PUSH
36727: LD_INT 0
36729: PUSH
36730: EMPTY
36731: LIST
36732: LIST
36733: PUSH
36734: LD_INT 2
36736: NEG
36737: PUSH
36738: LD_INT 1
36740: NEG
36741: PUSH
36742: EMPTY
36743: LIST
36744: LIST
36745: PUSH
36746: LD_INT 2
36748: NEG
36749: PUSH
36750: LD_INT 2
36752: NEG
36753: PUSH
36754: EMPTY
36755: LIST
36756: LIST
36757: PUSH
36758: EMPTY
36759: LIST
36760: LIST
36761: LIST
36762: LIST
36763: LIST
36764: LIST
36765: LIST
36766: LIST
36767: LIST
36768: LIST
36769: LIST
36770: LIST
36771: LIST
36772: LIST
36773: LIST
36774: LIST
36775: LIST
36776: LIST
36777: LIST
36778: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36779: LD_ADDR_VAR 0 57
36783: PUSH
36784: LD_INT 0
36786: PUSH
36787: LD_INT 0
36789: PUSH
36790: EMPTY
36791: LIST
36792: LIST
36793: PUSH
36794: LD_INT 0
36796: PUSH
36797: LD_INT 1
36799: NEG
36800: PUSH
36801: EMPTY
36802: LIST
36803: LIST
36804: PUSH
36805: LD_INT 1
36807: PUSH
36808: LD_INT 0
36810: PUSH
36811: EMPTY
36812: LIST
36813: LIST
36814: PUSH
36815: LD_INT 1
36817: PUSH
36818: LD_INT 1
36820: PUSH
36821: EMPTY
36822: LIST
36823: LIST
36824: PUSH
36825: LD_INT 0
36827: PUSH
36828: LD_INT 1
36830: PUSH
36831: EMPTY
36832: LIST
36833: LIST
36834: PUSH
36835: LD_INT 1
36837: NEG
36838: PUSH
36839: LD_INT 0
36841: PUSH
36842: EMPTY
36843: LIST
36844: LIST
36845: PUSH
36846: LD_INT 1
36848: NEG
36849: PUSH
36850: LD_INT 1
36852: NEG
36853: PUSH
36854: EMPTY
36855: LIST
36856: LIST
36857: PUSH
36858: LD_INT 1
36860: NEG
36861: PUSH
36862: LD_INT 2
36864: NEG
36865: PUSH
36866: EMPTY
36867: LIST
36868: LIST
36869: PUSH
36870: LD_INT 0
36872: PUSH
36873: LD_INT 2
36875: NEG
36876: PUSH
36877: EMPTY
36878: LIST
36879: LIST
36880: PUSH
36881: LD_INT 1
36883: PUSH
36884: LD_INT 1
36886: NEG
36887: PUSH
36888: EMPTY
36889: LIST
36890: LIST
36891: PUSH
36892: LD_INT 2
36894: PUSH
36895: LD_INT 0
36897: PUSH
36898: EMPTY
36899: LIST
36900: LIST
36901: PUSH
36902: LD_INT 2
36904: PUSH
36905: LD_INT 1
36907: PUSH
36908: EMPTY
36909: LIST
36910: LIST
36911: PUSH
36912: LD_INT 2
36914: PUSH
36915: LD_INT 2
36917: PUSH
36918: EMPTY
36919: LIST
36920: LIST
36921: PUSH
36922: LD_INT 1
36924: PUSH
36925: LD_INT 2
36927: PUSH
36928: EMPTY
36929: LIST
36930: LIST
36931: PUSH
36932: LD_INT 0
36934: PUSH
36935: LD_INT 2
36937: PUSH
36938: EMPTY
36939: LIST
36940: LIST
36941: PUSH
36942: LD_INT 1
36944: NEG
36945: PUSH
36946: LD_INT 1
36948: PUSH
36949: EMPTY
36950: LIST
36951: LIST
36952: PUSH
36953: LD_INT 2
36955: NEG
36956: PUSH
36957: LD_INT 0
36959: PUSH
36960: EMPTY
36961: LIST
36962: LIST
36963: PUSH
36964: LD_INT 2
36966: NEG
36967: PUSH
36968: LD_INT 1
36970: NEG
36971: PUSH
36972: EMPTY
36973: LIST
36974: LIST
36975: PUSH
36976: LD_INT 2
36978: NEG
36979: PUSH
36980: LD_INT 2
36982: NEG
36983: PUSH
36984: EMPTY
36985: LIST
36986: LIST
36987: PUSH
36988: EMPTY
36989: LIST
36990: LIST
36991: LIST
36992: LIST
36993: LIST
36994: LIST
36995: LIST
36996: LIST
36997: LIST
36998: LIST
36999: LIST
37000: LIST
37001: LIST
37002: LIST
37003: LIST
37004: LIST
37005: LIST
37006: LIST
37007: LIST
37008: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37009: LD_ADDR_VAR 0 58
37013: PUSH
37014: LD_INT 0
37016: PUSH
37017: LD_INT 0
37019: PUSH
37020: EMPTY
37021: LIST
37022: LIST
37023: PUSH
37024: LD_INT 0
37026: PUSH
37027: LD_INT 1
37029: NEG
37030: PUSH
37031: EMPTY
37032: LIST
37033: LIST
37034: PUSH
37035: LD_INT 1
37037: PUSH
37038: LD_INT 0
37040: PUSH
37041: EMPTY
37042: LIST
37043: LIST
37044: PUSH
37045: LD_INT 1
37047: PUSH
37048: LD_INT 1
37050: PUSH
37051: EMPTY
37052: LIST
37053: LIST
37054: PUSH
37055: LD_INT 0
37057: PUSH
37058: LD_INT 1
37060: PUSH
37061: EMPTY
37062: LIST
37063: LIST
37064: PUSH
37065: LD_INT 1
37067: NEG
37068: PUSH
37069: LD_INT 0
37071: PUSH
37072: EMPTY
37073: LIST
37074: LIST
37075: PUSH
37076: LD_INT 1
37078: NEG
37079: PUSH
37080: LD_INT 1
37082: NEG
37083: PUSH
37084: EMPTY
37085: LIST
37086: LIST
37087: PUSH
37088: LD_INT 1
37090: NEG
37091: PUSH
37092: LD_INT 2
37094: NEG
37095: PUSH
37096: EMPTY
37097: LIST
37098: LIST
37099: PUSH
37100: LD_INT 0
37102: PUSH
37103: LD_INT 2
37105: NEG
37106: PUSH
37107: EMPTY
37108: LIST
37109: LIST
37110: PUSH
37111: LD_INT 1
37113: PUSH
37114: LD_INT 1
37116: NEG
37117: PUSH
37118: EMPTY
37119: LIST
37120: LIST
37121: PUSH
37122: LD_INT 2
37124: PUSH
37125: LD_INT 0
37127: PUSH
37128: EMPTY
37129: LIST
37130: LIST
37131: PUSH
37132: LD_INT 2
37134: PUSH
37135: LD_INT 1
37137: PUSH
37138: EMPTY
37139: LIST
37140: LIST
37141: PUSH
37142: LD_INT 2
37144: PUSH
37145: LD_INT 2
37147: PUSH
37148: EMPTY
37149: LIST
37150: LIST
37151: PUSH
37152: LD_INT 1
37154: PUSH
37155: LD_INT 2
37157: PUSH
37158: EMPTY
37159: LIST
37160: LIST
37161: PUSH
37162: LD_INT 0
37164: PUSH
37165: LD_INT 2
37167: PUSH
37168: EMPTY
37169: LIST
37170: LIST
37171: PUSH
37172: LD_INT 1
37174: NEG
37175: PUSH
37176: LD_INT 1
37178: PUSH
37179: EMPTY
37180: LIST
37181: LIST
37182: PUSH
37183: LD_INT 2
37185: NEG
37186: PUSH
37187: LD_INT 0
37189: PUSH
37190: EMPTY
37191: LIST
37192: LIST
37193: PUSH
37194: LD_INT 2
37196: NEG
37197: PUSH
37198: LD_INT 1
37200: NEG
37201: PUSH
37202: EMPTY
37203: LIST
37204: LIST
37205: PUSH
37206: LD_INT 2
37208: NEG
37209: PUSH
37210: LD_INT 2
37212: NEG
37213: PUSH
37214: EMPTY
37215: LIST
37216: LIST
37217: PUSH
37218: EMPTY
37219: LIST
37220: LIST
37221: LIST
37222: LIST
37223: LIST
37224: LIST
37225: LIST
37226: LIST
37227: LIST
37228: LIST
37229: LIST
37230: LIST
37231: LIST
37232: LIST
37233: LIST
37234: LIST
37235: LIST
37236: LIST
37237: LIST
37238: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37239: LD_ADDR_VAR 0 59
37243: PUSH
37244: LD_INT 0
37246: PUSH
37247: LD_INT 0
37249: PUSH
37250: EMPTY
37251: LIST
37252: LIST
37253: PUSH
37254: LD_INT 0
37256: PUSH
37257: LD_INT 1
37259: NEG
37260: PUSH
37261: EMPTY
37262: LIST
37263: LIST
37264: PUSH
37265: LD_INT 1
37267: PUSH
37268: LD_INT 0
37270: PUSH
37271: EMPTY
37272: LIST
37273: LIST
37274: PUSH
37275: LD_INT 1
37277: PUSH
37278: LD_INT 1
37280: PUSH
37281: EMPTY
37282: LIST
37283: LIST
37284: PUSH
37285: LD_INT 0
37287: PUSH
37288: LD_INT 1
37290: PUSH
37291: EMPTY
37292: LIST
37293: LIST
37294: PUSH
37295: LD_INT 1
37297: NEG
37298: PUSH
37299: LD_INT 0
37301: PUSH
37302: EMPTY
37303: LIST
37304: LIST
37305: PUSH
37306: LD_INT 1
37308: NEG
37309: PUSH
37310: LD_INT 1
37312: NEG
37313: PUSH
37314: EMPTY
37315: LIST
37316: LIST
37317: PUSH
37318: EMPTY
37319: LIST
37320: LIST
37321: LIST
37322: LIST
37323: LIST
37324: LIST
37325: LIST
37326: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37327: LD_ADDR_VAR 0 60
37331: PUSH
37332: LD_INT 0
37334: PUSH
37335: LD_INT 0
37337: PUSH
37338: EMPTY
37339: LIST
37340: LIST
37341: PUSH
37342: LD_INT 0
37344: PUSH
37345: LD_INT 1
37347: NEG
37348: PUSH
37349: EMPTY
37350: LIST
37351: LIST
37352: PUSH
37353: LD_INT 1
37355: PUSH
37356: LD_INT 0
37358: PUSH
37359: EMPTY
37360: LIST
37361: LIST
37362: PUSH
37363: LD_INT 1
37365: PUSH
37366: LD_INT 1
37368: PUSH
37369: EMPTY
37370: LIST
37371: LIST
37372: PUSH
37373: LD_INT 0
37375: PUSH
37376: LD_INT 1
37378: PUSH
37379: EMPTY
37380: LIST
37381: LIST
37382: PUSH
37383: LD_INT 1
37385: NEG
37386: PUSH
37387: LD_INT 0
37389: PUSH
37390: EMPTY
37391: LIST
37392: LIST
37393: PUSH
37394: LD_INT 1
37396: NEG
37397: PUSH
37398: LD_INT 1
37400: NEG
37401: PUSH
37402: EMPTY
37403: LIST
37404: LIST
37405: PUSH
37406: EMPTY
37407: LIST
37408: LIST
37409: LIST
37410: LIST
37411: LIST
37412: LIST
37413: LIST
37414: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37415: LD_ADDR_VAR 0 61
37419: PUSH
37420: LD_INT 0
37422: PUSH
37423: LD_INT 0
37425: PUSH
37426: EMPTY
37427: LIST
37428: LIST
37429: PUSH
37430: LD_INT 0
37432: PUSH
37433: LD_INT 1
37435: NEG
37436: PUSH
37437: EMPTY
37438: LIST
37439: LIST
37440: PUSH
37441: LD_INT 1
37443: PUSH
37444: LD_INT 0
37446: PUSH
37447: EMPTY
37448: LIST
37449: LIST
37450: PUSH
37451: LD_INT 1
37453: PUSH
37454: LD_INT 1
37456: PUSH
37457: EMPTY
37458: LIST
37459: LIST
37460: PUSH
37461: LD_INT 0
37463: PUSH
37464: LD_INT 1
37466: PUSH
37467: EMPTY
37468: LIST
37469: LIST
37470: PUSH
37471: LD_INT 1
37473: NEG
37474: PUSH
37475: LD_INT 0
37477: PUSH
37478: EMPTY
37479: LIST
37480: LIST
37481: PUSH
37482: LD_INT 1
37484: NEG
37485: PUSH
37486: LD_INT 1
37488: NEG
37489: PUSH
37490: EMPTY
37491: LIST
37492: LIST
37493: PUSH
37494: EMPTY
37495: LIST
37496: LIST
37497: LIST
37498: LIST
37499: LIST
37500: LIST
37501: LIST
37502: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37503: LD_ADDR_VAR 0 62
37507: PUSH
37508: LD_INT 0
37510: PUSH
37511: LD_INT 0
37513: PUSH
37514: EMPTY
37515: LIST
37516: LIST
37517: PUSH
37518: LD_INT 0
37520: PUSH
37521: LD_INT 1
37523: NEG
37524: PUSH
37525: EMPTY
37526: LIST
37527: LIST
37528: PUSH
37529: LD_INT 1
37531: PUSH
37532: LD_INT 0
37534: PUSH
37535: EMPTY
37536: LIST
37537: LIST
37538: PUSH
37539: LD_INT 1
37541: PUSH
37542: LD_INT 1
37544: PUSH
37545: EMPTY
37546: LIST
37547: LIST
37548: PUSH
37549: LD_INT 0
37551: PUSH
37552: LD_INT 1
37554: PUSH
37555: EMPTY
37556: LIST
37557: LIST
37558: PUSH
37559: LD_INT 1
37561: NEG
37562: PUSH
37563: LD_INT 0
37565: PUSH
37566: EMPTY
37567: LIST
37568: LIST
37569: PUSH
37570: LD_INT 1
37572: NEG
37573: PUSH
37574: LD_INT 1
37576: NEG
37577: PUSH
37578: EMPTY
37579: LIST
37580: LIST
37581: PUSH
37582: EMPTY
37583: LIST
37584: LIST
37585: LIST
37586: LIST
37587: LIST
37588: LIST
37589: LIST
37590: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37591: LD_ADDR_VAR 0 63
37595: PUSH
37596: LD_INT 0
37598: PUSH
37599: LD_INT 0
37601: PUSH
37602: EMPTY
37603: LIST
37604: LIST
37605: PUSH
37606: LD_INT 0
37608: PUSH
37609: LD_INT 1
37611: NEG
37612: PUSH
37613: EMPTY
37614: LIST
37615: LIST
37616: PUSH
37617: LD_INT 1
37619: PUSH
37620: LD_INT 0
37622: PUSH
37623: EMPTY
37624: LIST
37625: LIST
37626: PUSH
37627: LD_INT 1
37629: PUSH
37630: LD_INT 1
37632: PUSH
37633: EMPTY
37634: LIST
37635: LIST
37636: PUSH
37637: LD_INT 0
37639: PUSH
37640: LD_INT 1
37642: PUSH
37643: EMPTY
37644: LIST
37645: LIST
37646: PUSH
37647: LD_INT 1
37649: NEG
37650: PUSH
37651: LD_INT 0
37653: PUSH
37654: EMPTY
37655: LIST
37656: LIST
37657: PUSH
37658: LD_INT 1
37660: NEG
37661: PUSH
37662: LD_INT 1
37664: NEG
37665: PUSH
37666: EMPTY
37667: LIST
37668: LIST
37669: PUSH
37670: EMPTY
37671: LIST
37672: LIST
37673: LIST
37674: LIST
37675: LIST
37676: LIST
37677: LIST
37678: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37679: LD_ADDR_VAR 0 64
37683: PUSH
37684: LD_INT 0
37686: PUSH
37687: LD_INT 0
37689: PUSH
37690: EMPTY
37691: LIST
37692: LIST
37693: PUSH
37694: LD_INT 0
37696: PUSH
37697: LD_INT 1
37699: NEG
37700: PUSH
37701: EMPTY
37702: LIST
37703: LIST
37704: PUSH
37705: LD_INT 1
37707: PUSH
37708: LD_INT 0
37710: PUSH
37711: EMPTY
37712: LIST
37713: LIST
37714: PUSH
37715: LD_INT 1
37717: PUSH
37718: LD_INT 1
37720: PUSH
37721: EMPTY
37722: LIST
37723: LIST
37724: PUSH
37725: LD_INT 0
37727: PUSH
37728: LD_INT 1
37730: PUSH
37731: EMPTY
37732: LIST
37733: LIST
37734: PUSH
37735: LD_INT 1
37737: NEG
37738: PUSH
37739: LD_INT 0
37741: PUSH
37742: EMPTY
37743: LIST
37744: LIST
37745: PUSH
37746: LD_INT 1
37748: NEG
37749: PUSH
37750: LD_INT 1
37752: NEG
37753: PUSH
37754: EMPTY
37755: LIST
37756: LIST
37757: PUSH
37758: EMPTY
37759: LIST
37760: LIST
37761: LIST
37762: LIST
37763: LIST
37764: LIST
37765: LIST
37766: ST_TO_ADDR
// end ; 1 :
37767: GO 43664
37769: LD_INT 1
37771: DOUBLE
37772: EQUAL
37773: IFTRUE 37777
37775: GO 40400
37777: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37778: LD_ADDR_VAR 0 11
37782: PUSH
37783: LD_INT 1
37785: NEG
37786: PUSH
37787: LD_INT 3
37789: NEG
37790: PUSH
37791: EMPTY
37792: LIST
37793: LIST
37794: PUSH
37795: LD_INT 0
37797: PUSH
37798: LD_INT 3
37800: NEG
37801: PUSH
37802: EMPTY
37803: LIST
37804: LIST
37805: PUSH
37806: LD_INT 1
37808: PUSH
37809: LD_INT 2
37811: NEG
37812: PUSH
37813: EMPTY
37814: LIST
37815: LIST
37816: PUSH
37817: EMPTY
37818: LIST
37819: LIST
37820: LIST
37821: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37822: LD_ADDR_VAR 0 12
37826: PUSH
37827: LD_INT 2
37829: PUSH
37830: LD_INT 1
37832: NEG
37833: PUSH
37834: EMPTY
37835: LIST
37836: LIST
37837: PUSH
37838: LD_INT 3
37840: PUSH
37841: LD_INT 0
37843: PUSH
37844: EMPTY
37845: LIST
37846: LIST
37847: PUSH
37848: LD_INT 3
37850: PUSH
37851: LD_INT 1
37853: PUSH
37854: EMPTY
37855: LIST
37856: LIST
37857: PUSH
37858: EMPTY
37859: LIST
37860: LIST
37861: LIST
37862: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37863: LD_ADDR_VAR 0 13
37867: PUSH
37868: LD_INT 3
37870: PUSH
37871: LD_INT 2
37873: PUSH
37874: EMPTY
37875: LIST
37876: LIST
37877: PUSH
37878: LD_INT 3
37880: PUSH
37881: LD_INT 3
37883: PUSH
37884: EMPTY
37885: LIST
37886: LIST
37887: PUSH
37888: LD_INT 2
37890: PUSH
37891: LD_INT 3
37893: PUSH
37894: EMPTY
37895: LIST
37896: LIST
37897: PUSH
37898: EMPTY
37899: LIST
37900: LIST
37901: LIST
37902: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37903: LD_ADDR_VAR 0 14
37907: PUSH
37908: LD_INT 1
37910: PUSH
37911: LD_INT 3
37913: PUSH
37914: EMPTY
37915: LIST
37916: LIST
37917: PUSH
37918: LD_INT 0
37920: PUSH
37921: LD_INT 3
37923: PUSH
37924: EMPTY
37925: LIST
37926: LIST
37927: PUSH
37928: LD_INT 1
37930: NEG
37931: PUSH
37932: LD_INT 2
37934: PUSH
37935: EMPTY
37936: LIST
37937: LIST
37938: PUSH
37939: EMPTY
37940: LIST
37941: LIST
37942: LIST
37943: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37944: LD_ADDR_VAR 0 15
37948: PUSH
37949: LD_INT 2
37951: NEG
37952: PUSH
37953: LD_INT 1
37955: PUSH
37956: EMPTY
37957: LIST
37958: LIST
37959: PUSH
37960: LD_INT 3
37962: NEG
37963: PUSH
37964: LD_INT 0
37966: PUSH
37967: EMPTY
37968: LIST
37969: LIST
37970: PUSH
37971: LD_INT 3
37973: NEG
37974: PUSH
37975: LD_INT 1
37977: NEG
37978: PUSH
37979: EMPTY
37980: LIST
37981: LIST
37982: PUSH
37983: EMPTY
37984: LIST
37985: LIST
37986: LIST
37987: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37988: LD_ADDR_VAR 0 16
37992: PUSH
37993: LD_INT 2
37995: NEG
37996: PUSH
37997: LD_INT 3
37999: NEG
38000: PUSH
38001: EMPTY
38002: LIST
38003: LIST
38004: PUSH
38005: LD_INT 3
38007: NEG
38008: PUSH
38009: LD_INT 2
38011: NEG
38012: PUSH
38013: EMPTY
38014: LIST
38015: LIST
38016: PUSH
38017: LD_INT 3
38019: NEG
38020: PUSH
38021: LD_INT 3
38023: NEG
38024: PUSH
38025: EMPTY
38026: LIST
38027: LIST
38028: PUSH
38029: EMPTY
38030: LIST
38031: LIST
38032: LIST
38033: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38034: LD_ADDR_VAR 0 17
38038: PUSH
38039: LD_INT 1
38041: NEG
38042: PUSH
38043: LD_INT 3
38045: NEG
38046: PUSH
38047: EMPTY
38048: LIST
38049: LIST
38050: PUSH
38051: LD_INT 0
38053: PUSH
38054: LD_INT 3
38056: NEG
38057: PUSH
38058: EMPTY
38059: LIST
38060: LIST
38061: PUSH
38062: LD_INT 1
38064: PUSH
38065: LD_INT 2
38067: NEG
38068: PUSH
38069: EMPTY
38070: LIST
38071: LIST
38072: PUSH
38073: EMPTY
38074: LIST
38075: LIST
38076: LIST
38077: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38078: LD_ADDR_VAR 0 18
38082: PUSH
38083: LD_INT 2
38085: PUSH
38086: LD_INT 1
38088: NEG
38089: PUSH
38090: EMPTY
38091: LIST
38092: LIST
38093: PUSH
38094: LD_INT 3
38096: PUSH
38097: LD_INT 0
38099: PUSH
38100: EMPTY
38101: LIST
38102: LIST
38103: PUSH
38104: LD_INT 3
38106: PUSH
38107: LD_INT 1
38109: PUSH
38110: EMPTY
38111: LIST
38112: LIST
38113: PUSH
38114: EMPTY
38115: LIST
38116: LIST
38117: LIST
38118: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38119: LD_ADDR_VAR 0 19
38123: PUSH
38124: LD_INT 3
38126: PUSH
38127: LD_INT 2
38129: PUSH
38130: EMPTY
38131: LIST
38132: LIST
38133: PUSH
38134: LD_INT 3
38136: PUSH
38137: LD_INT 3
38139: PUSH
38140: EMPTY
38141: LIST
38142: LIST
38143: PUSH
38144: LD_INT 2
38146: PUSH
38147: LD_INT 3
38149: PUSH
38150: EMPTY
38151: LIST
38152: LIST
38153: PUSH
38154: EMPTY
38155: LIST
38156: LIST
38157: LIST
38158: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38159: LD_ADDR_VAR 0 20
38163: PUSH
38164: LD_INT 1
38166: PUSH
38167: LD_INT 3
38169: PUSH
38170: EMPTY
38171: LIST
38172: LIST
38173: PUSH
38174: LD_INT 0
38176: PUSH
38177: LD_INT 3
38179: PUSH
38180: EMPTY
38181: LIST
38182: LIST
38183: PUSH
38184: LD_INT 1
38186: NEG
38187: PUSH
38188: LD_INT 2
38190: PUSH
38191: EMPTY
38192: LIST
38193: LIST
38194: PUSH
38195: EMPTY
38196: LIST
38197: LIST
38198: LIST
38199: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38200: LD_ADDR_VAR 0 21
38204: PUSH
38205: LD_INT 2
38207: NEG
38208: PUSH
38209: LD_INT 1
38211: PUSH
38212: EMPTY
38213: LIST
38214: LIST
38215: PUSH
38216: LD_INT 3
38218: NEG
38219: PUSH
38220: LD_INT 0
38222: PUSH
38223: EMPTY
38224: LIST
38225: LIST
38226: PUSH
38227: LD_INT 3
38229: NEG
38230: PUSH
38231: LD_INT 1
38233: NEG
38234: PUSH
38235: EMPTY
38236: LIST
38237: LIST
38238: PUSH
38239: EMPTY
38240: LIST
38241: LIST
38242: LIST
38243: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38244: LD_ADDR_VAR 0 22
38248: PUSH
38249: LD_INT 2
38251: NEG
38252: PUSH
38253: LD_INT 3
38255: NEG
38256: PUSH
38257: EMPTY
38258: LIST
38259: LIST
38260: PUSH
38261: LD_INT 3
38263: NEG
38264: PUSH
38265: LD_INT 2
38267: NEG
38268: PUSH
38269: EMPTY
38270: LIST
38271: LIST
38272: PUSH
38273: LD_INT 3
38275: NEG
38276: PUSH
38277: LD_INT 3
38279: NEG
38280: PUSH
38281: EMPTY
38282: LIST
38283: LIST
38284: PUSH
38285: EMPTY
38286: LIST
38287: LIST
38288: LIST
38289: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
38290: LD_ADDR_VAR 0 23
38294: PUSH
38295: LD_INT 0
38297: PUSH
38298: LD_INT 3
38300: NEG
38301: PUSH
38302: EMPTY
38303: LIST
38304: LIST
38305: PUSH
38306: LD_INT 1
38308: NEG
38309: PUSH
38310: LD_INT 4
38312: NEG
38313: PUSH
38314: EMPTY
38315: LIST
38316: LIST
38317: PUSH
38318: LD_INT 1
38320: PUSH
38321: LD_INT 3
38323: NEG
38324: PUSH
38325: EMPTY
38326: LIST
38327: LIST
38328: PUSH
38329: EMPTY
38330: LIST
38331: LIST
38332: LIST
38333: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
38334: LD_ADDR_VAR 0 24
38338: PUSH
38339: LD_INT 3
38341: PUSH
38342: LD_INT 0
38344: PUSH
38345: EMPTY
38346: LIST
38347: LIST
38348: PUSH
38349: LD_INT 3
38351: PUSH
38352: LD_INT 1
38354: NEG
38355: PUSH
38356: EMPTY
38357: LIST
38358: LIST
38359: PUSH
38360: LD_INT 4
38362: PUSH
38363: LD_INT 1
38365: PUSH
38366: EMPTY
38367: LIST
38368: LIST
38369: PUSH
38370: EMPTY
38371: LIST
38372: LIST
38373: LIST
38374: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
38375: LD_ADDR_VAR 0 25
38379: PUSH
38380: LD_INT 3
38382: PUSH
38383: LD_INT 3
38385: PUSH
38386: EMPTY
38387: LIST
38388: LIST
38389: PUSH
38390: LD_INT 4
38392: PUSH
38393: LD_INT 3
38395: PUSH
38396: EMPTY
38397: LIST
38398: LIST
38399: PUSH
38400: LD_INT 3
38402: PUSH
38403: LD_INT 4
38405: PUSH
38406: EMPTY
38407: LIST
38408: LIST
38409: PUSH
38410: EMPTY
38411: LIST
38412: LIST
38413: LIST
38414: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
38415: LD_ADDR_VAR 0 26
38419: PUSH
38420: LD_INT 0
38422: PUSH
38423: LD_INT 3
38425: PUSH
38426: EMPTY
38427: LIST
38428: LIST
38429: PUSH
38430: LD_INT 1
38432: PUSH
38433: LD_INT 4
38435: PUSH
38436: EMPTY
38437: LIST
38438: LIST
38439: PUSH
38440: LD_INT 1
38442: NEG
38443: PUSH
38444: LD_INT 3
38446: PUSH
38447: EMPTY
38448: LIST
38449: LIST
38450: PUSH
38451: EMPTY
38452: LIST
38453: LIST
38454: LIST
38455: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
38456: LD_ADDR_VAR 0 27
38460: PUSH
38461: LD_INT 3
38463: NEG
38464: PUSH
38465: LD_INT 0
38467: PUSH
38468: EMPTY
38469: LIST
38470: LIST
38471: PUSH
38472: LD_INT 3
38474: NEG
38475: PUSH
38476: LD_INT 1
38478: PUSH
38479: EMPTY
38480: LIST
38481: LIST
38482: PUSH
38483: LD_INT 4
38485: NEG
38486: PUSH
38487: LD_INT 1
38489: NEG
38490: PUSH
38491: EMPTY
38492: LIST
38493: LIST
38494: PUSH
38495: EMPTY
38496: LIST
38497: LIST
38498: LIST
38499: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
38500: LD_ADDR_VAR 0 28
38504: PUSH
38505: LD_INT 3
38507: NEG
38508: PUSH
38509: LD_INT 3
38511: NEG
38512: PUSH
38513: EMPTY
38514: LIST
38515: LIST
38516: PUSH
38517: LD_INT 3
38519: NEG
38520: PUSH
38521: LD_INT 4
38523: NEG
38524: PUSH
38525: EMPTY
38526: LIST
38527: LIST
38528: PUSH
38529: LD_INT 4
38531: NEG
38532: PUSH
38533: LD_INT 3
38535: NEG
38536: PUSH
38537: EMPTY
38538: LIST
38539: LIST
38540: PUSH
38541: EMPTY
38542: LIST
38543: LIST
38544: LIST
38545: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
38546: LD_ADDR_VAR 0 29
38550: PUSH
38551: LD_INT 1
38553: NEG
38554: PUSH
38555: LD_INT 3
38557: NEG
38558: PUSH
38559: EMPTY
38560: LIST
38561: LIST
38562: PUSH
38563: LD_INT 0
38565: PUSH
38566: LD_INT 3
38568: NEG
38569: PUSH
38570: EMPTY
38571: LIST
38572: LIST
38573: PUSH
38574: LD_INT 1
38576: PUSH
38577: LD_INT 2
38579: NEG
38580: PUSH
38581: EMPTY
38582: LIST
38583: LIST
38584: PUSH
38585: LD_INT 1
38587: NEG
38588: PUSH
38589: LD_INT 4
38591: NEG
38592: PUSH
38593: EMPTY
38594: LIST
38595: LIST
38596: PUSH
38597: LD_INT 0
38599: PUSH
38600: LD_INT 4
38602: NEG
38603: PUSH
38604: EMPTY
38605: LIST
38606: LIST
38607: PUSH
38608: LD_INT 1
38610: PUSH
38611: LD_INT 3
38613: NEG
38614: PUSH
38615: EMPTY
38616: LIST
38617: LIST
38618: PUSH
38619: LD_INT 1
38621: NEG
38622: PUSH
38623: LD_INT 5
38625: NEG
38626: PUSH
38627: EMPTY
38628: LIST
38629: LIST
38630: PUSH
38631: LD_INT 0
38633: PUSH
38634: LD_INT 5
38636: NEG
38637: PUSH
38638: EMPTY
38639: LIST
38640: LIST
38641: PUSH
38642: LD_INT 1
38644: PUSH
38645: LD_INT 4
38647: NEG
38648: PUSH
38649: EMPTY
38650: LIST
38651: LIST
38652: PUSH
38653: LD_INT 1
38655: NEG
38656: PUSH
38657: LD_INT 6
38659: NEG
38660: PUSH
38661: EMPTY
38662: LIST
38663: LIST
38664: PUSH
38665: LD_INT 0
38667: PUSH
38668: LD_INT 6
38670: NEG
38671: PUSH
38672: EMPTY
38673: LIST
38674: LIST
38675: PUSH
38676: LD_INT 1
38678: PUSH
38679: LD_INT 5
38681: NEG
38682: PUSH
38683: EMPTY
38684: LIST
38685: LIST
38686: PUSH
38687: EMPTY
38688: LIST
38689: LIST
38690: LIST
38691: LIST
38692: LIST
38693: LIST
38694: LIST
38695: LIST
38696: LIST
38697: LIST
38698: LIST
38699: LIST
38700: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
38701: LD_ADDR_VAR 0 30
38705: PUSH
38706: LD_INT 2
38708: PUSH
38709: LD_INT 1
38711: NEG
38712: PUSH
38713: EMPTY
38714: LIST
38715: LIST
38716: PUSH
38717: LD_INT 3
38719: PUSH
38720: LD_INT 0
38722: PUSH
38723: EMPTY
38724: LIST
38725: LIST
38726: PUSH
38727: LD_INT 3
38729: PUSH
38730: LD_INT 1
38732: PUSH
38733: EMPTY
38734: LIST
38735: LIST
38736: PUSH
38737: LD_INT 3
38739: PUSH
38740: LD_INT 1
38742: NEG
38743: PUSH
38744: EMPTY
38745: LIST
38746: LIST
38747: PUSH
38748: LD_INT 4
38750: PUSH
38751: LD_INT 0
38753: PUSH
38754: EMPTY
38755: LIST
38756: LIST
38757: PUSH
38758: LD_INT 4
38760: PUSH
38761: LD_INT 1
38763: PUSH
38764: EMPTY
38765: LIST
38766: LIST
38767: PUSH
38768: LD_INT 4
38770: PUSH
38771: LD_INT 1
38773: NEG
38774: PUSH
38775: EMPTY
38776: LIST
38777: LIST
38778: PUSH
38779: LD_INT 5
38781: PUSH
38782: LD_INT 0
38784: PUSH
38785: EMPTY
38786: LIST
38787: LIST
38788: PUSH
38789: LD_INT 5
38791: PUSH
38792: LD_INT 1
38794: PUSH
38795: EMPTY
38796: LIST
38797: LIST
38798: PUSH
38799: LD_INT 5
38801: PUSH
38802: LD_INT 1
38804: NEG
38805: PUSH
38806: EMPTY
38807: LIST
38808: LIST
38809: PUSH
38810: LD_INT 6
38812: PUSH
38813: LD_INT 0
38815: PUSH
38816: EMPTY
38817: LIST
38818: LIST
38819: PUSH
38820: LD_INT 6
38822: PUSH
38823: LD_INT 1
38825: PUSH
38826: EMPTY
38827: LIST
38828: LIST
38829: PUSH
38830: EMPTY
38831: LIST
38832: LIST
38833: LIST
38834: LIST
38835: LIST
38836: LIST
38837: LIST
38838: LIST
38839: LIST
38840: LIST
38841: LIST
38842: LIST
38843: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
38844: LD_ADDR_VAR 0 31
38848: PUSH
38849: LD_INT 3
38851: PUSH
38852: LD_INT 2
38854: PUSH
38855: EMPTY
38856: LIST
38857: LIST
38858: PUSH
38859: LD_INT 3
38861: PUSH
38862: LD_INT 3
38864: PUSH
38865: EMPTY
38866: LIST
38867: LIST
38868: PUSH
38869: LD_INT 2
38871: PUSH
38872: LD_INT 3
38874: PUSH
38875: EMPTY
38876: LIST
38877: LIST
38878: PUSH
38879: LD_INT 4
38881: PUSH
38882: LD_INT 3
38884: PUSH
38885: EMPTY
38886: LIST
38887: LIST
38888: PUSH
38889: LD_INT 4
38891: PUSH
38892: LD_INT 4
38894: PUSH
38895: EMPTY
38896: LIST
38897: LIST
38898: PUSH
38899: LD_INT 3
38901: PUSH
38902: LD_INT 4
38904: PUSH
38905: EMPTY
38906: LIST
38907: LIST
38908: PUSH
38909: LD_INT 5
38911: PUSH
38912: LD_INT 4
38914: PUSH
38915: EMPTY
38916: LIST
38917: LIST
38918: PUSH
38919: LD_INT 5
38921: PUSH
38922: LD_INT 5
38924: PUSH
38925: EMPTY
38926: LIST
38927: LIST
38928: PUSH
38929: LD_INT 4
38931: PUSH
38932: LD_INT 5
38934: PUSH
38935: EMPTY
38936: LIST
38937: LIST
38938: PUSH
38939: LD_INT 6
38941: PUSH
38942: LD_INT 5
38944: PUSH
38945: EMPTY
38946: LIST
38947: LIST
38948: PUSH
38949: LD_INT 6
38951: PUSH
38952: LD_INT 6
38954: PUSH
38955: EMPTY
38956: LIST
38957: LIST
38958: PUSH
38959: LD_INT 5
38961: PUSH
38962: LD_INT 6
38964: PUSH
38965: EMPTY
38966: LIST
38967: LIST
38968: PUSH
38969: EMPTY
38970: LIST
38971: LIST
38972: LIST
38973: LIST
38974: LIST
38975: LIST
38976: LIST
38977: LIST
38978: LIST
38979: LIST
38980: LIST
38981: LIST
38982: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
38983: LD_ADDR_VAR 0 32
38987: PUSH
38988: LD_INT 1
38990: PUSH
38991: LD_INT 3
38993: PUSH
38994: EMPTY
38995: LIST
38996: LIST
38997: PUSH
38998: LD_INT 0
39000: PUSH
39001: LD_INT 3
39003: PUSH
39004: EMPTY
39005: LIST
39006: LIST
39007: PUSH
39008: LD_INT 1
39010: NEG
39011: PUSH
39012: LD_INT 2
39014: PUSH
39015: EMPTY
39016: LIST
39017: LIST
39018: PUSH
39019: LD_INT 1
39021: PUSH
39022: LD_INT 4
39024: PUSH
39025: EMPTY
39026: LIST
39027: LIST
39028: PUSH
39029: LD_INT 0
39031: PUSH
39032: LD_INT 4
39034: PUSH
39035: EMPTY
39036: LIST
39037: LIST
39038: PUSH
39039: LD_INT 1
39041: NEG
39042: PUSH
39043: LD_INT 3
39045: PUSH
39046: EMPTY
39047: LIST
39048: LIST
39049: PUSH
39050: LD_INT 1
39052: PUSH
39053: LD_INT 5
39055: PUSH
39056: EMPTY
39057: LIST
39058: LIST
39059: PUSH
39060: LD_INT 0
39062: PUSH
39063: LD_INT 5
39065: PUSH
39066: EMPTY
39067: LIST
39068: LIST
39069: PUSH
39070: LD_INT 1
39072: NEG
39073: PUSH
39074: LD_INT 4
39076: PUSH
39077: EMPTY
39078: LIST
39079: LIST
39080: PUSH
39081: LD_INT 1
39083: PUSH
39084: LD_INT 6
39086: PUSH
39087: EMPTY
39088: LIST
39089: LIST
39090: PUSH
39091: LD_INT 0
39093: PUSH
39094: LD_INT 6
39096: PUSH
39097: EMPTY
39098: LIST
39099: LIST
39100: PUSH
39101: LD_INT 1
39103: NEG
39104: PUSH
39105: LD_INT 5
39107: PUSH
39108: EMPTY
39109: LIST
39110: LIST
39111: PUSH
39112: EMPTY
39113: LIST
39114: LIST
39115: LIST
39116: LIST
39117: LIST
39118: LIST
39119: LIST
39120: LIST
39121: LIST
39122: LIST
39123: LIST
39124: LIST
39125: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
39126: LD_ADDR_VAR 0 33
39130: PUSH
39131: LD_INT 2
39133: NEG
39134: PUSH
39135: LD_INT 1
39137: PUSH
39138: EMPTY
39139: LIST
39140: LIST
39141: PUSH
39142: LD_INT 3
39144: NEG
39145: PUSH
39146: LD_INT 0
39148: PUSH
39149: EMPTY
39150: LIST
39151: LIST
39152: PUSH
39153: LD_INT 3
39155: NEG
39156: PUSH
39157: LD_INT 1
39159: NEG
39160: PUSH
39161: EMPTY
39162: LIST
39163: LIST
39164: PUSH
39165: LD_INT 3
39167: NEG
39168: PUSH
39169: LD_INT 1
39171: PUSH
39172: EMPTY
39173: LIST
39174: LIST
39175: PUSH
39176: LD_INT 4
39178: NEG
39179: PUSH
39180: LD_INT 0
39182: PUSH
39183: EMPTY
39184: LIST
39185: LIST
39186: PUSH
39187: LD_INT 4
39189: NEG
39190: PUSH
39191: LD_INT 1
39193: NEG
39194: PUSH
39195: EMPTY
39196: LIST
39197: LIST
39198: PUSH
39199: LD_INT 4
39201: NEG
39202: PUSH
39203: LD_INT 1
39205: PUSH
39206: EMPTY
39207: LIST
39208: LIST
39209: PUSH
39210: LD_INT 5
39212: NEG
39213: PUSH
39214: LD_INT 0
39216: PUSH
39217: EMPTY
39218: LIST
39219: LIST
39220: PUSH
39221: LD_INT 5
39223: NEG
39224: PUSH
39225: LD_INT 1
39227: NEG
39228: PUSH
39229: EMPTY
39230: LIST
39231: LIST
39232: PUSH
39233: LD_INT 5
39235: NEG
39236: PUSH
39237: LD_INT 1
39239: PUSH
39240: EMPTY
39241: LIST
39242: LIST
39243: PUSH
39244: LD_INT 6
39246: NEG
39247: PUSH
39248: LD_INT 0
39250: PUSH
39251: EMPTY
39252: LIST
39253: LIST
39254: PUSH
39255: LD_INT 6
39257: NEG
39258: PUSH
39259: LD_INT 1
39261: NEG
39262: PUSH
39263: EMPTY
39264: LIST
39265: LIST
39266: PUSH
39267: EMPTY
39268: LIST
39269: LIST
39270: LIST
39271: LIST
39272: LIST
39273: LIST
39274: LIST
39275: LIST
39276: LIST
39277: LIST
39278: LIST
39279: LIST
39280: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
39281: LD_ADDR_VAR 0 34
39285: PUSH
39286: LD_INT 2
39288: NEG
39289: PUSH
39290: LD_INT 3
39292: NEG
39293: PUSH
39294: EMPTY
39295: LIST
39296: LIST
39297: PUSH
39298: LD_INT 3
39300: NEG
39301: PUSH
39302: LD_INT 2
39304: NEG
39305: PUSH
39306: EMPTY
39307: LIST
39308: LIST
39309: PUSH
39310: LD_INT 3
39312: NEG
39313: PUSH
39314: LD_INT 3
39316: NEG
39317: PUSH
39318: EMPTY
39319: LIST
39320: LIST
39321: PUSH
39322: LD_INT 3
39324: NEG
39325: PUSH
39326: LD_INT 4
39328: NEG
39329: PUSH
39330: EMPTY
39331: LIST
39332: LIST
39333: PUSH
39334: LD_INT 4
39336: NEG
39337: PUSH
39338: LD_INT 3
39340: NEG
39341: PUSH
39342: EMPTY
39343: LIST
39344: LIST
39345: PUSH
39346: LD_INT 4
39348: NEG
39349: PUSH
39350: LD_INT 4
39352: NEG
39353: PUSH
39354: EMPTY
39355: LIST
39356: LIST
39357: PUSH
39358: LD_INT 4
39360: NEG
39361: PUSH
39362: LD_INT 5
39364: NEG
39365: PUSH
39366: EMPTY
39367: LIST
39368: LIST
39369: PUSH
39370: LD_INT 5
39372: NEG
39373: PUSH
39374: LD_INT 4
39376: NEG
39377: PUSH
39378: EMPTY
39379: LIST
39380: LIST
39381: PUSH
39382: LD_INT 5
39384: NEG
39385: PUSH
39386: LD_INT 5
39388: NEG
39389: PUSH
39390: EMPTY
39391: LIST
39392: LIST
39393: PUSH
39394: LD_INT 5
39396: NEG
39397: PUSH
39398: LD_INT 6
39400: NEG
39401: PUSH
39402: EMPTY
39403: LIST
39404: LIST
39405: PUSH
39406: LD_INT 6
39408: NEG
39409: PUSH
39410: LD_INT 5
39412: NEG
39413: PUSH
39414: EMPTY
39415: LIST
39416: LIST
39417: PUSH
39418: LD_INT 6
39420: NEG
39421: PUSH
39422: LD_INT 6
39424: NEG
39425: PUSH
39426: EMPTY
39427: LIST
39428: LIST
39429: PUSH
39430: EMPTY
39431: LIST
39432: LIST
39433: LIST
39434: LIST
39435: LIST
39436: LIST
39437: LIST
39438: LIST
39439: LIST
39440: LIST
39441: LIST
39442: LIST
39443: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
39444: LD_ADDR_VAR 0 41
39448: PUSH
39449: LD_INT 0
39451: PUSH
39452: LD_INT 2
39454: NEG
39455: PUSH
39456: EMPTY
39457: LIST
39458: LIST
39459: PUSH
39460: LD_INT 1
39462: NEG
39463: PUSH
39464: LD_INT 3
39466: NEG
39467: PUSH
39468: EMPTY
39469: LIST
39470: LIST
39471: PUSH
39472: LD_INT 1
39474: PUSH
39475: LD_INT 2
39477: NEG
39478: PUSH
39479: EMPTY
39480: LIST
39481: LIST
39482: PUSH
39483: EMPTY
39484: LIST
39485: LIST
39486: LIST
39487: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
39488: LD_ADDR_VAR 0 42
39492: PUSH
39493: LD_INT 2
39495: PUSH
39496: LD_INT 0
39498: PUSH
39499: EMPTY
39500: LIST
39501: LIST
39502: PUSH
39503: LD_INT 2
39505: PUSH
39506: LD_INT 1
39508: NEG
39509: PUSH
39510: EMPTY
39511: LIST
39512: LIST
39513: PUSH
39514: LD_INT 3
39516: PUSH
39517: LD_INT 1
39519: PUSH
39520: EMPTY
39521: LIST
39522: LIST
39523: PUSH
39524: EMPTY
39525: LIST
39526: LIST
39527: LIST
39528: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
39529: LD_ADDR_VAR 0 43
39533: PUSH
39534: LD_INT 2
39536: PUSH
39537: LD_INT 2
39539: PUSH
39540: EMPTY
39541: LIST
39542: LIST
39543: PUSH
39544: LD_INT 3
39546: PUSH
39547: LD_INT 2
39549: PUSH
39550: EMPTY
39551: LIST
39552: LIST
39553: PUSH
39554: LD_INT 2
39556: PUSH
39557: LD_INT 3
39559: PUSH
39560: EMPTY
39561: LIST
39562: LIST
39563: PUSH
39564: EMPTY
39565: LIST
39566: LIST
39567: LIST
39568: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
39569: LD_ADDR_VAR 0 44
39573: PUSH
39574: LD_INT 0
39576: PUSH
39577: LD_INT 2
39579: PUSH
39580: EMPTY
39581: LIST
39582: LIST
39583: PUSH
39584: LD_INT 1
39586: PUSH
39587: LD_INT 3
39589: PUSH
39590: EMPTY
39591: LIST
39592: LIST
39593: PUSH
39594: LD_INT 1
39596: NEG
39597: PUSH
39598: LD_INT 2
39600: PUSH
39601: EMPTY
39602: LIST
39603: LIST
39604: PUSH
39605: EMPTY
39606: LIST
39607: LIST
39608: LIST
39609: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39610: LD_ADDR_VAR 0 45
39614: PUSH
39615: LD_INT 2
39617: NEG
39618: PUSH
39619: LD_INT 0
39621: PUSH
39622: EMPTY
39623: LIST
39624: LIST
39625: PUSH
39626: LD_INT 2
39628: NEG
39629: PUSH
39630: LD_INT 1
39632: PUSH
39633: EMPTY
39634: LIST
39635: LIST
39636: PUSH
39637: LD_INT 3
39639: NEG
39640: PUSH
39641: LD_INT 1
39643: NEG
39644: PUSH
39645: EMPTY
39646: LIST
39647: LIST
39648: PUSH
39649: EMPTY
39650: LIST
39651: LIST
39652: LIST
39653: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
39654: LD_ADDR_VAR 0 46
39658: PUSH
39659: LD_INT 2
39661: NEG
39662: PUSH
39663: LD_INT 2
39665: NEG
39666: PUSH
39667: EMPTY
39668: LIST
39669: LIST
39670: PUSH
39671: LD_INT 2
39673: NEG
39674: PUSH
39675: LD_INT 3
39677: NEG
39678: PUSH
39679: EMPTY
39680: LIST
39681: LIST
39682: PUSH
39683: LD_INT 3
39685: NEG
39686: PUSH
39687: LD_INT 2
39689: NEG
39690: PUSH
39691: EMPTY
39692: LIST
39693: LIST
39694: PUSH
39695: EMPTY
39696: LIST
39697: LIST
39698: LIST
39699: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
39700: LD_ADDR_VAR 0 47
39704: PUSH
39705: LD_INT 2
39707: NEG
39708: PUSH
39709: LD_INT 3
39711: NEG
39712: PUSH
39713: EMPTY
39714: LIST
39715: LIST
39716: PUSH
39717: LD_INT 1
39719: NEG
39720: PUSH
39721: LD_INT 3
39723: NEG
39724: PUSH
39725: EMPTY
39726: LIST
39727: LIST
39728: PUSH
39729: EMPTY
39730: LIST
39731: LIST
39732: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
39733: LD_ADDR_VAR 0 48
39737: PUSH
39738: LD_INT 1
39740: PUSH
39741: LD_INT 2
39743: NEG
39744: PUSH
39745: EMPTY
39746: LIST
39747: LIST
39748: PUSH
39749: LD_INT 2
39751: PUSH
39752: LD_INT 1
39754: NEG
39755: PUSH
39756: EMPTY
39757: LIST
39758: LIST
39759: PUSH
39760: EMPTY
39761: LIST
39762: LIST
39763: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
39764: LD_ADDR_VAR 0 49
39768: PUSH
39769: LD_INT 3
39771: PUSH
39772: LD_INT 1
39774: PUSH
39775: EMPTY
39776: LIST
39777: LIST
39778: PUSH
39779: LD_INT 3
39781: PUSH
39782: LD_INT 2
39784: PUSH
39785: EMPTY
39786: LIST
39787: LIST
39788: PUSH
39789: EMPTY
39790: LIST
39791: LIST
39792: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
39793: LD_ADDR_VAR 0 50
39797: PUSH
39798: LD_INT 2
39800: PUSH
39801: LD_INT 3
39803: PUSH
39804: EMPTY
39805: LIST
39806: LIST
39807: PUSH
39808: LD_INT 1
39810: PUSH
39811: LD_INT 3
39813: PUSH
39814: EMPTY
39815: LIST
39816: LIST
39817: PUSH
39818: EMPTY
39819: LIST
39820: LIST
39821: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
39822: LD_ADDR_VAR 0 51
39826: PUSH
39827: LD_INT 1
39829: NEG
39830: PUSH
39831: LD_INT 2
39833: PUSH
39834: EMPTY
39835: LIST
39836: LIST
39837: PUSH
39838: LD_INT 2
39840: NEG
39841: PUSH
39842: LD_INT 1
39844: PUSH
39845: EMPTY
39846: LIST
39847: LIST
39848: PUSH
39849: EMPTY
39850: LIST
39851: LIST
39852: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39853: LD_ADDR_VAR 0 52
39857: PUSH
39858: LD_INT 3
39860: NEG
39861: PUSH
39862: LD_INT 1
39864: NEG
39865: PUSH
39866: EMPTY
39867: LIST
39868: LIST
39869: PUSH
39870: LD_INT 3
39872: NEG
39873: PUSH
39874: LD_INT 2
39876: NEG
39877: PUSH
39878: EMPTY
39879: LIST
39880: LIST
39881: PUSH
39882: EMPTY
39883: LIST
39884: LIST
39885: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39886: LD_ADDR_VAR 0 53
39890: PUSH
39891: LD_INT 1
39893: NEG
39894: PUSH
39895: LD_INT 3
39897: NEG
39898: PUSH
39899: EMPTY
39900: LIST
39901: LIST
39902: PUSH
39903: LD_INT 0
39905: PUSH
39906: LD_INT 3
39908: NEG
39909: PUSH
39910: EMPTY
39911: LIST
39912: LIST
39913: PUSH
39914: LD_INT 1
39916: PUSH
39917: LD_INT 2
39919: NEG
39920: PUSH
39921: EMPTY
39922: LIST
39923: LIST
39924: PUSH
39925: EMPTY
39926: LIST
39927: LIST
39928: LIST
39929: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39930: LD_ADDR_VAR 0 54
39934: PUSH
39935: LD_INT 2
39937: PUSH
39938: LD_INT 1
39940: NEG
39941: PUSH
39942: EMPTY
39943: LIST
39944: LIST
39945: PUSH
39946: LD_INT 3
39948: PUSH
39949: LD_INT 0
39951: PUSH
39952: EMPTY
39953: LIST
39954: LIST
39955: PUSH
39956: LD_INT 3
39958: PUSH
39959: LD_INT 1
39961: PUSH
39962: EMPTY
39963: LIST
39964: LIST
39965: PUSH
39966: EMPTY
39967: LIST
39968: LIST
39969: LIST
39970: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
39971: LD_ADDR_VAR 0 55
39975: PUSH
39976: LD_INT 3
39978: PUSH
39979: LD_INT 2
39981: PUSH
39982: EMPTY
39983: LIST
39984: LIST
39985: PUSH
39986: LD_INT 3
39988: PUSH
39989: LD_INT 3
39991: PUSH
39992: EMPTY
39993: LIST
39994: LIST
39995: PUSH
39996: LD_INT 2
39998: PUSH
39999: LD_INT 3
40001: PUSH
40002: EMPTY
40003: LIST
40004: LIST
40005: PUSH
40006: EMPTY
40007: LIST
40008: LIST
40009: LIST
40010: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
40011: LD_ADDR_VAR 0 56
40015: PUSH
40016: LD_INT 1
40018: PUSH
40019: LD_INT 3
40021: PUSH
40022: EMPTY
40023: LIST
40024: LIST
40025: PUSH
40026: LD_INT 0
40028: PUSH
40029: LD_INT 3
40031: PUSH
40032: EMPTY
40033: LIST
40034: LIST
40035: PUSH
40036: LD_INT 1
40038: NEG
40039: PUSH
40040: LD_INT 2
40042: PUSH
40043: EMPTY
40044: LIST
40045: LIST
40046: PUSH
40047: EMPTY
40048: LIST
40049: LIST
40050: LIST
40051: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40052: LD_ADDR_VAR 0 57
40056: PUSH
40057: LD_INT 2
40059: NEG
40060: PUSH
40061: LD_INT 1
40063: PUSH
40064: EMPTY
40065: LIST
40066: LIST
40067: PUSH
40068: LD_INT 3
40070: NEG
40071: PUSH
40072: LD_INT 0
40074: PUSH
40075: EMPTY
40076: LIST
40077: LIST
40078: PUSH
40079: LD_INT 3
40081: NEG
40082: PUSH
40083: LD_INT 1
40085: NEG
40086: PUSH
40087: EMPTY
40088: LIST
40089: LIST
40090: PUSH
40091: EMPTY
40092: LIST
40093: LIST
40094: LIST
40095: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40096: LD_ADDR_VAR 0 58
40100: PUSH
40101: LD_INT 2
40103: NEG
40104: PUSH
40105: LD_INT 3
40107: NEG
40108: PUSH
40109: EMPTY
40110: LIST
40111: LIST
40112: PUSH
40113: LD_INT 3
40115: NEG
40116: PUSH
40117: LD_INT 2
40119: NEG
40120: PUSH
40121: EMPTY
40122: LIST
40123: LIST
40124: PUSH
40125: LD_INT 3
40127: NEG
40128: PUSH
40129: LD_INT 3
40131: NEG
40132: PUSH
40133: EMPTY
40134: LIST
40135: LIST
40136: PUSH
40137: EMPTY
40138: LIST
40139: LIST
40140: LIST
40141: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
40142: LD_ADDR_VAR 0 59
40146: PUSH
40147: LD_INT 1
40149: NEG
40150: PUSH
40151: LD_INT 2
40153: NEG
40154: PUSH
40155: EMPTY
40156: LIST
40157: LIST
40158: PUSH
40159: LD_INT 0
40161: PUSH
40162: LD_INT 2
40164: NEG
40165: PUSH
40166: EMPTY
40167: LIST
40168: LIST
40169: PUSH
40170: LD_INT 1
40172: PUSH
40173: LD_INT 1
40175: NEG
40176: PUSH
40177: EMPTY
40178: LIST
40179: LIST
40180: PUSH
40181: EMPTY
40182: LIST
40183: LIST
40184: LIST
40185: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
40186: LD_ADDR_VAR 0 60
40190: PUSH
40191: LD_INT 1
40193: PUSH
40194: LD_INT 1
40196: NEG
40197: PUSH
40198: EMPTY
40199: LIST
40200: LIST
40201: PUSH
40202: LD_INT 2
40204: PUSH
40205: LD_INT 0
40207: PUSH
40208: EMPTY
40209: LIST
40210: LIST
40211: PUSH
40212: LD_INT 2
40214: PUSH
40215: LD_INT 1
40217: PUSH
40218: EMPTY
40219: LIST
40220: LIST
40221: PUSH
40222: EMPTY
40223: LIST
40224: LIST
40225: LIST
40226: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
40227: LD_ADDR_VAR 0 61
40231: PUSH
40232: LD_INT 2
40234: PUSH
40235: LD_INT 1
40237: PUSH
40238: EMPTY
40239: LIST
40240: LIST
40241: PUSH
40242: LD_INT 2
40244: PUSH
40245: LD_INT 2
40247: PUSH
40248: EMPTY
40249: LIST
40250: LIST
40251: PUSH
40252: LD_INT 1
40254: PUSH
40255: LD_INT 2
40257: PUSH
40258: EMPTY
40259: LIST
40260: LIST
40261: PUSH
40262: EMPTY
40263: LIST
40264: LIST
40265: LIST
40266: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
40267: LD_ADDR_VAR 0 62
40271: PUSH
40272: LD_INT 1
40274: PUSH
40275: LD_INT 2
40277: PUSH
40278: EMPTY
40279: LIST
40280: LIST
40281: PUSH
40282: LD_INT 0
40284: PUSH
40285: LD_INT 2
40287: PUSH
40288: EMPTY
40289: LIST
40290: LIST
40291: PUSH
40292: LD_INT 1
40294: NEG
40295: PUSH
40296: LD_INT 1
40298: PUSH
40299: EMPTY
40300: LIST
40301: LIST
40302: PUSH
40303: EMPTY
40304: LIST
40305: LIST
40306: LIST
40307: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
40308: LD_ADDR_VAR 0 63
40312: PUSH
40313: LD_INT 1
40315: NEG
40316: PUSH
40317: LD_INT 1
40319: PUSH
40320: EMPTY
40321: LIST
40322: LIST
40323: PUSH
40324: LD_INT 2
40326: NEG
40327: PUSH
40328: LD_INT 0
40330: PUSH
40331: EMPTY
40332: LIST
40333: LIST
40334: PUSH
40335: LD_INT 2
40337: NEG
40338: PUSH
40339: LD_INT 1
40341: NEG
40342: PUSH
40343: EMPTY
40344: LIST
40345: LIST
40346: PUSH
40347: EMPTY
40348: LIST
40349: LIST
40350: LIST
40351: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40352: LD_ADDR_VAR 0 64
40356: PUSH
40357: LD_INT 1
40359: NEG
40360: PUSH
40361: LD_INT 2
40363: NEG
40364: PUSH
40365: EMPTY
40366: LIST
40367: LIST
40368: PUSH
40369: LD_INT 2
40371: NEG
40372: PUSH
40373: LD_INT 1
40375: NEG
40376: PUSH
40377: EMPTY
40378: LIST
40379: LIST
40380: PUSH
40381: LD_INT 2
40383: NEG
40384: PUSH
40385: LD_INT 2
40387: NEG
40388: PUSH
40389: EMPTY
40390: LIST
40391: LIST
40392: PUSH
40393: EMPTY
40394: LIST
40395: LIST
40396: LIST
40397: ST_TO_ADDR
// end ; 2 :
40398: GO 43664
40400: LD_INT 2
40402: DOUBLE
40403: EQUAL
40404: IFTRUE 40408
40406: GO 43663
40408: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
40409: LD_ADDR_VAR 0 29
40413: PUSH
40414: LD_INT 4
40416: PUSH
40417: LD_INT 0
40419: PUSH
40420: EMPTY
40421: LIST
40422: LIST
40423: PUSH
40424: LD_INT 4
40426: PUSH
40427: LD_INT 1
40429: NEG
40430: PUSH
40431: EMPTY
40432: LIST
40433: LIST
40434: PUSH
40435: LD_INT 5
40437: PUSH
40438: LD_INT 0
40440: PUSH
40441: EMPTY
40442: LIST
40443: LIST
40444: PUSH
40445: LD_INT 5
40447: PUSH
40448: LD_INT 1
40450: PUSH
40451: EMPTY
40452: LIST
40453: LIST
40454: PUSH
40455: LD_INT 4
40457: PUSH
40458: LD_INT 1
40460: PUSH
40461: EMPTY
40462: LIST
40463: LIST
40464: PUSH
40465: LD_INT 3
40467: PUSH
40468: LD_INT 0
40470: PUSH
40471: EMPTY
40472: LIST
40473: LIST
40474: PUSH
40475: LD_INT 3
40477: PUSH
40478: LD_INT 1
40480: NEG
40481: PUSH
40482: EMPTY
40483: LIST
40484: LIST
40485: PUSH
40486: LD_INT 3
40488: PUSH
40489: LD_INT 2
40491: NEG
40492: PUSH
40493: EMPTY
40494: LIST
40495: LIST
40496: PUSH
40497: LD_INT 5
40499: PUSH
40500: LD_INT 2
40502: PUSH
40503: EMPTY
40504: LIST
40505: LIST
40506: PUSH
40507: LD_INT 3
40509: PUSH
40510: LD_INT 3
40512: PUSH
40513: EMPTY
40514: LIST
40515: LIST
40516: PUSH
40517: LD_INT 3
40519: PUSH
40520: LD_INT 2
40522: PUSH
40523: EMPTY
40524: LIST
40525: LIST
40526: PUSH
40527: LD_INT 4
40529: PUSH
40530: LD_INT 3
40532: PUSH
40533: EMPTY
40534: LIST
40535: LIST
40536: PUSH
40537: LD_INT 4
40539: PUSH
40540: LD_INT 4
40542: PUSH
40543: EMPTY
40544: LIST
40545: LIST
40546: PUSH
40547: LD_INT 3
40549: PUSH
40550: LD_INT 4
40552: PUSH
40553: EMPTY
40554: LIST
40555: LIST
40556: PUSH
40557: LD_INT 2
40559: PUSH
40560: LD_INT 3
40562: PUSH
40563: EMPTY
40564: LIST
40565: LIST
40566: PUSH
40567: LD_INT 2
40569: PUSH
40570: LD_INT 2
40572: PUSH
40573: EMPTY
40574: LIST
40575: LIST
40576: PUSH
40577: LD_INT 4
40579: PUSH
40580: LD_INT 2
40582: PUSH
40583: EMPTY
40584: LIST
40585: LIST
40586: PUSH
40587: LD_INT 2
40589: PUSH
40590: LD_INT 4
40592: PUSH
40593: EMPTY
40594: LIST
40595: LIST
40596: PUSH
40597: LD_INT 0
40599: PUSH
40600: LD_INT 4
40602: PUSH
40603: EMPTY
40604: LIST
40605: LIST
40606: PUSH
40607: LD_INT 0
40609: PUSH
40610: LD_INT 3
40612: PUSH
40613: EMPTY
40614: LIST
40615: LIST
40616: PUSH
40617: LD_INT 1
40619: PUSH
40620: LD_INT 4
40622: PUSH
40623: EMPTY
40624: LIST
40625: LIST
40626: PUSH
40627: LD_INT 1
40629: PUSH
40630: LD_INT 5
40632: PUSH
40633: EMPTY
40634: LIST
40635: LIST
40636: PUSH
40637: LD_INT 0
40639: PUSH
40640: LD_INT 5
40642: PUSH
40643: EMPTY
40644: LIST
40645: LIST
40646: PUSH
40647: LD_INT 1
40649: NEG
40650: PUSH
40651: LD_INT 4
40653: PUSH
40654: EMPTY
40655: LIST
40656: LIST
40657: PUSH
40658: LD_INT 1
40660: NEG
40661: PUSH
40662: LD_INT 3
40664: PUSH
40665: EMPTY
40666: LIST
40667: LIST
40668: PUSH
40669: LD_INT 2
40671: PUSH
40672: LD_INT 5
40674: PUSH
40675: EMPTY
40676: LIST
40677: LIST
40678: PUSH
40679: LD_INT 2
40681: NEG
40682: PUSH
40683: LD_INT 3
40685: PUSH
40686: EMPTY
40687: LIST
40688: LIST
40689: PUSH
40690: LD_INT 3
40692: NEG
40693: PUSH
40694: LD_INT 0
40696: PUSH
40697: EMPTY
40698: LIST
40699: LIST
40700: PUSH
40701: LD_INT 3
40703: NEG
40704: PUSH
40705: LD_INT 1
40707: NEG
40708: PUSH
40709: EMPTY
40710: LIST
40711: LIST
40712: PUSH
40713: LD_INT 2
40715: NEG
40716: PUSH
40717: LD_INT 0
40719: PUSH
40720: EMPTY
40721: LIST
40722: LIST
40723: PUSH
40724: LD_INT 2
40726: NEG
40727: PUSH
40728: LD_INT 1
40730: PUSH
40731: EMPTY
40732: LIST
40733: LIST
40734: PUSH
40735: LD_INT 3
40737: NEG
40738: PUSH
40739: LD_INT 1
40741: PUSH
40742: EMPTY
40743: LIST
40744: LIST
40745: PUSH
40746: LD_INT 4
40748: NEG
40749: PUSH
40750: LD_INT 0
40752: PUSH
40753: EMPTY
40754: LIST
40755: LIST
40756: PUSH
40757: LD_INT 4
40759: NEG
40760: PUSH
40761: LD_INT 1
40763: NEG
40764: PUSH
40765: EMPTY
40766: LIST
40767: LIST
40768: PUSH
40769: LD_INT 4
40771: NEG
40772: PUSH
40773: LD_INT 2
40775: NEG
40776: PUSH
40777: EMPTY
40778: LIST
40779: LIST
40780: PUSH
40781: LD_INT 2
40783: NEG
40784: PUSH
40785: LD_INT 2
40787: PUSH
40788: EMPTY
40789: LIST
40790: LIST
40791: PUSH
40792: LD_INT 4
40794: NEG
40795: PUSH
40796: LD_INT 4
40798: NEG
40799: PUSH
40800: EMPTY
40801: LIST
40802: LIST
40803: PUSH
40804: LD_INT 4
40806: NEG
40807: PUSH
40808: LD_INT 5
40810: NEG
40811: PUSH
40812: EMPTY
40813: LIST
40814: LIST
40815: PUSH
40816: LD_INT 3
40818: NEG
40819: PUSH
40820: LD_INT 4
40822: NEG
40823: PUSH
40824: EMPTY
40825: LIST
40826: LIST
40827: PUSH
40828: LD_INT 3
40830: NEG
40831: PUSH
40832: LD_INT 3
40834: NEG
40835: PUSH
40836: EMPTY
40837: LIST
40838: LIST
40839: PUSH
40840: LD_INT 4
40842: NEG
40843: PUSH
40844: LD_INT 3
40846: NEG
40847: PUSH
40848: EMPTY
40849: LIST
40850: LIST
40851: PUSH
40852: LD_INT 5
40854: NEG
40855: PUSH
40856: LD_INT 4
40858: NEG
40859: PUSH
40860: EMPTY
40861: LIST
40862: LIST
40863: PUSH
40864: LD_INT 5
40866: NEG
40867: PUSH
40868: LD_INT 5
40870: NEG
40871: PUSH
40872: EMPTY
40873: LIST
40874: LIST
40875: PUSH
40876: LD_INT 3
40878: NEG
40879: PUSH
40880: LD_INT 5
40882: NEG
40883: PUSH
40884: EMPTY
40885: LIST
40886: LIST
40887: PUSH
40888: LD_INT 5
40890: NEG
40891: PUSH
40892: LD_INT 3
40894: NEG
40895: PUSH
40896: EMPTY
40897: LIST
40898: LIST
40899: PUSH
40900: EMPTY
40901: LIST
40902: LIST
40903: LIST
40904: LIST
40905: LIST
40906: LIST
40907: LIST
40908: LIST
40909: LIST
40910: LIST
40911: LIST
40912: LIST
40913: LIST
40914: LIST
40915: LIST
40916: LIST
40917: LIST
40918: LIST
40919: LIST
40920: LIST
40921: LIST
40922: LIST
40923: LIST
40924: LIST
40925: LIST
40926: LIST
40927: LIST
40928: LIST
40929: LIST
40930: LIST
40931: LIST
40932: LIST
40933: LIST
40934: LIST
40935: LIST
40936: LIST
40937: LIST
40938: LIST
40939: LIST
40940: LIST
40941: LIST
40942: LIST
40943: LIST
40944: LIST
40945: LIST
40946: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
40947: LD_ADDR_VAR 0 30
40951: PUSH
40952: LD_INT 4
40954: PUSH
40955: LD_INT 4
40957: PUSH
40958: EMPTY
40959: LIST
40960: LIST
40961: PUSH
40962: LD_INT 4
40964: PUSH
40965: LD_INT 3
40967: PUSH
40968: EMPTY
40969: LIST
40970: LIST
40971: PUSH
40972: LD_INT 5
40974: PUSH
40975: LD_INT 4
40977: PUSH
40978: EMPTY
40979: LIST
40980: LIST
40981: PUSH
40982: LD_INT 5
40984: PUSH
40985: LD_INT 5
40987: PUSH
40988: EMPTY
40989: LIST
40990: LIST
40991: PUSH
40992: LD_INT 4
40994: PUSH
40995: LD_INT 5
40997: PUSH
40998: EMPTY
40999: LIST
41000: LIST
41001: PUSH
41002: LD_INT 3
41004: PUSH
41005: LD_INT 4
41007: PUSH
41008: EMPTY
41009: LIST
41010: LIST
41011: PUSH
41012: LD_INT 3
41014: PUSH
41015: LD_INT 3
41017: PUSH
41018: EMPTY
41019: LIST
41020: LIST
41021: PUSH
41022: LD_INT 5
41024: PUSH
41025: LD_INT 3
41027: PUSH
41028: EMPTY
41029: LIST
41030: LIST
41031: PUSH
41032: LD_INT 3
41034: PUSH
41035: LD_INT 5
41037: PUSH
41038: EMPTY
41039: LIST
41040: LIST
41041: PUSH
41042: LD_INT 0
41044: PUSH
41045: LD_INT 3
41047: PUSH
41048: EMPTY
41049: LIST
41050: LIST
41051: PUSH
41052: LD_INT 0
41054: PUSH
41055: LD_INT 2
41057: PUSH
41058: EMPTY
41059: LIST
41060: LIST
41061: PUSH
41062: LD_INT 1
41064: PUSH
41065: LD_INT 3
41067: PUSH
41068: EMPTY
41069: LIST
41070: LIST
41071: PUSH
41072: LD_INT 1
41074: PUSH
41075: LD_INT 4
41077: PUSH
41078: EMPTY
41079: LIST
41080: LIST
41081: PUSH
41082: LD_INT 0
41084: PUSH
41085: LD_INT 4
41087: PUSH
41088: EMPTY
41089: LIST
41090: LIST
41091: PUSH
41092: LD_INT 1
41094: NEG
41095: PUSH
41096: LD_INT 3
41098: PUSH
41099: EMPTY
41100: LIST
41101: LIST
41102: PUSH
41103: LD_INT 1
41105: NEG
41106: PUSH
41107: LD_INT 2
41109: PUSH
41110: EMPTY
41111: LIST
41112: LIST
41113: PUSH
41114: LD_INT 2
41116: PUSH
41117: LD_INT 4
41119: PUSH
41120: EMPTY
41121: LIST
41122: LIST
41123: PUSH
41124: LD_INT 2
41126: NEG
41127: PUSH
41128: LD_INT 2
41130: PUSH
41131: EMPTY
41132: LIST
41133: LIST
41134: PUSH
41135: LD_INT 4
41137: NEG
41138: PUSH
41139: LD_INT 0
41141: PUSH
41142: EMPTY
41143: LIST
41144: LIST
41145: PUSH
41146: LD_INT 4
41148: NEG
41149: PUSH
41150: LD_INT 1
41152: NEG
41153: PUSH
41154: EMPTY
41155: LIST
41156: LIST
41157: PUSH
41158: LD_INT 3
41160: NEG
41161: PUSH
41162: LD_INT 0
41164: PUSH
41165: EMPTY
41166: LIST
41167: LIST
41168: PUSH
41169: LD_INT 3
41171: NEG
41172: PUSH
41173: LD_INT 1
41175: PUSH
41176: EMPTY
41177: LIST
41178: LIST
41179: PUSH
41180: LD_INT 4
41182: NEG
41183: PUSH
41184: LD_INT 1
41186: PUSH
41187: EMPTY
41188: LIST
41189: LIST
41190: PUSH
41191: LD_INT 5
41193: NEG
41194: PUSH
41195: LD_INT 0
41197: PUSH
41198: EMPTY
41199: LIST
41200: LIST
41201: PUSH
41202: LD_INT 5
41204: NEG
41205: PUSH
41206: LD_INT 1
41208: NEG
41209: PUSH
41210: EMPTY
41211: LIST
41212: LIST
41213: PUSH
41214: LD_INT 5
41216: NEG
41217: PUSH
41218: LD_INT 2
41220: NEG
41221: PUSH
41222: EMPTY
41223: LIST
41224: LIST
41225: PUSH
41226: LD_INT 3
41228: NEG
41229: PUSH
41230: LD_INT 2
41232: PUSH
41233: EMPTY
41234: LIST
41235: LIST
41236: PUSH
41237: LD_INT 3
41239: NEG
41240: PUSH
41241: LD_INT 3
41243: NEG
41244: PUSH
41245: EMPTY
41246: LIST
41247: LIST
41248: PUSH
41249: LD_INT 3
41251: NEG
41252: PUSH
41253: LD_INT 4
41255: NEG
41256: PUSH
41257: EMPTY
41258: LIST
41259: LIST
41260: PUSH
41261: LD_INT 2
41263: NEG
41264: PUSH
41265: LD_INT 3
41267: NEG
41268: PUSH
41269: EMPTY
41270: LIST
41271: LIST
41272: PUSH
41273: LD_INT 2
41275: NEG
41276: PUSH
41277: LD_INT 2
41279: NEG
41280: PUSH
41281: EMPTY
41282: LIST
41283: LIST
41284: PUSH
41285: LD_INT 3
41287: NEG
41288: PUSH
41289: LD_INT 2
41291: NEG
41292: PUSH
41293: EMPTY
41294: LIST
41295: LIST
41296: PUSH
41297: LD_INT 4
41299: NEG
41300: PUSH
41301: LD_INT 3
41303: NEG
41304: PUSH
41305: EMPTY
41306: LIST
41307: LIST
41308: PUSH
41309: LD_INT 4
41311: NEG
41312: PUSH
41313: LD_INT 4
41315: NEG
41316: PUSH
41317: EMPTY
41318: LIST
41319: LIST
41320: PUSH
41321: LD_INT 2
41323: NEG
41324: PUSH
41325: LD_INT 4
41327: NEG
41328: PUSH
41329: EMPTY
41330: LIST
41331: LIST
41332: PUSH
41333: LD_INT 4
41335: NEG
41336: PUSH
41337: LD_INT 2
41339: NEG
41340: PUSH
41341: EMPTY
41342: LIST
41343: LIST
41344: PUSH
41345: LD_INT 0
41347: PUSH
41348: LD_INT 4
41350: NEG
41351: PUSH
41352: EMPTY
41353: LIST
41354: LIST
41355: PUSH
41356: LD_INT 0
41358: PUSH
41359: LD_INT 5
41361: NEG
41362: PUSH
41363: EMPTY
41364: LIST
41365: LIST
41366: PUSH
41367: LD_INT 1
41369: PUSH
41370: LD_INT 4
41372: NEG
41373: PUSH
41374: EMPTY
41375: LIST
41376: LIST
41377: PUSH
41378: LD_INT 1
41380: PUSH
41381: LD_INT 3
41383: NEG
41384: PUSH
41385: EMPTY
41386: LIST
41387: LIST
41388: PUSH
41389: LD_INT 0
41391: PUSH
41392: LD_INT 3
41394: NEG
41395: PUSH
41396: EMPTY
41397: LIST
41398: LIST
41399: PUSH
41400: LD_INT 1
41402: NEG
41403: PUSH
41404: LD_INT 4
41406: NEG
41407: PUSH
41408: EMPTY
41409: LIST
41410: LIST
41411: PUSH
41412: LD_INT 1
41414: NEG
41415: PUSH
41416: LD_INT 5
41418: NEG
41419: PUSH
41420: EMPTY
41421: LIST
41422: LIST
41423: PUSH
41424: LD_INT 2
41426: PUSH
41427: LD_INT 3
41429: NEG
41430: PUSH
41431: EMPTY
41432: LIST
41433: LIST
41434: PUSH
41435: LD_INT 2
41437: NEG
41438: PUSH
41439: LD_INT 5
41441: NEG
41442: PUSH
41443: EMPTY
41444: LIST
41445: LIST
41446: PUSH
41447: EMPTY
41448: LIST
41449: LIST
41450: LIST
41451: LIST
41452: LIST
41453: LIST
41454: LIST
41455: LIST
41456: LIST
41457: LIST
41458: LIST
41459: LIST
41460: LIST
41461: LIST
41462: LIST
41463: LIST
41464: LIST
41465: LIST
41466: LIST
41467: LIST
41468: LIST
41469: LIST
41470: LIST
41471: LIST
41472: LIST
41473: LIST
41474: LIST
41475: LIST
41476: LIST
41477: LIST
41478: LIST
41479: LIST
41480: LIST
41481: LIST
41482: LIST
41483: LIST
41484: LIST
41485: LIST
41486: LIST
41487: LIST
41488: LIST
41489: LIST
41490: LIST
41491: LIST
41492: LIST
41493: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
41494: LD_ADDR_VAR 0 31
41498: PUSH
41499: LD_INT 0
41501: PUSH
41502: LD_INT 4
41504: PUSH
41505: EMPTY
41506: LIST
41507: LIST
41508: PUSH
41509: LD_INT 0
41511: PUSH
41512: LD_INT 3
41514: PUSH
41515: EMPTY
41516: LIST
41517: LIST
41518: PUSH
41519: LD_INT 1
41521: PUSH
41522: LD_INT 4
41524: PUSH
41525: EMPTY
41526: LIST
41527: LIST
41528: PUSH
41529: LD_INT 1
41531: PUSH
41532: LD_INT 5
41534: PUSH
41535: EMPTY
41536: LIST
41537: LIST
41538: PUSH
41539: LD_INT 0
41541: PUSH
41542: LD_INT 5
41544: PUSH
41545: EMPTY
41546: LIST
41547: LIST
41548: PUSH
41549: LD_INT 1
41551: NEG
41552: PUSH
41553: LD_INT 4
41555: PUSH
41556: EMPTY
41557: LIST
41558: LIST
41559: PUSH
41560: LD_INT 1
41562: NEG
41563: PUSH
41564: LD_INT 3
41566: PUSH
41567: EMPTY
41568: LIST
41569: LIST
41570: PUSH
41571: LD_INT 2
41573: PUSH
41574: LD_INT 5
41576: PUSH
41577: EMPTY
41578: LIST
41579: LIST
41580: PUSH
41581: LD_INT 2
41583: NEG
41584: PUSH
41585: LD_INT 3
41587: PUSH
41588: EMPTY
41589: LIST
41590: LIST
41591: PUSH
41592: LD_INT 3
41594: NEG
41595: PUSH
41596: LD_INT 0
41598: PUSH
41599: EMPTY
41600: LIST
41601: LIST
41602: PUSH
41603: LD_INT 3
41605: NEG
41606: PUSH
41607: LD_INT 1
41609: NEG
41610: PUSH
41611: EMPTY
41612: LIST
41613: LIST
41614: PUSH
41615: LD_INT 2
41617: NEG
41618: PUSH
41619: LD_INT 0
41621: PUSH
41622: EMPTY
41623: LIST
41624: LIST
41625: PUSH
41626: LD_INT 2
41628: NEG
41629: PUSH
41630: LD_INT 1
41632: PUSH
41633: EMPTY
41634: LIST
41635: LIST
41636: PUSH
41637: LD_INT 3
41639: NEG
41640: PUSH
41641: LD_INT 1
41643: PUSH
41644: EMPTY
41645: LIST
41646: LIST
41647: PUSH
41648: LD_INT 4
41650: NEG
41651: PUSH
41652: LD_INT 0
41654: PUSH
41655: EMPTY
41656: LIST
41657: LIST
41658: PUSH
41659: LD_INT 4
41661: NEG
41662: PUSH
41663: LD_INT 1
41665: NEG
41666: PUSH
41667: EMPTY
41668: LIST
41669: LIST
41670: PUSH
41671: LD_INT 4
41673: NEG
41674: PUSH
41675: LD_INT 2
41677: NEG
41678: PUSH
41679: EMPTY
41680: LIST
41681: LIST
41682: PUSH
41683: LD_INT 2
41685: NEG
41686: PUSH
41687: LD_INT 2
41689: PUSH
41690: EMPTY
41691: LIST
41692: LIST
41693: PUSH
41694: LD_INT 4
41696: NEG
41697: PUSH
41698: LD_INT 4
41700: NEG
41701: PUSH
41702: EMPTY
41703: LIST
41704: LIST
41705: PUSH
41706: LD_INT 4
41708: NEG
41709: PUSH
41710: LD_INT 5
41712: NEG
41713: PUSH
41714: EMPTY
41715: LIST
41716: LIST
41717: PUSH
41718: LD_INT 3
41720: NEG
41721: PUSH
41722: LD_INT 4
41724: NEG
41725: PUSH
41726: EMPTY
41727: LIST
41728: LIST
41729: PUSH
41730: LD_INT 3
41732: NEG
41733: PUSH
41734: LD_INT 3
41736: NEG
41737: PUSH
41738: EMPTY
41739: LIST
41740: LIST
41741: PUSH
41742: LD_INT 4
41744: NEG
41745: PUSH
41746: LD_INT 3
41748: NEG
41749: PUSH
41750: EMPTY
41751: LIST
41752: LIST
41753: PUSH
41754: LD_INT 5
41756: NEG
41757: PUSH
41758: LD_INT 4
41760: NEG
41761: PUSH
41762: EMPTY
41763: LIST
41764: LIST
41765: PUSH
41766: LD_INT 5
41768: NEG
41769: PUSH
41770: LD_INT 5
41772: NEG
41773: PUSH
41774: EMPTY
41775: LIST
41776: LIST
41777: PUSH
41778: LD_INT 3
41780: NEG
41781: PUSH
41782: LD_INT 5
41784: NEG
41785: PUSH
41786: EMPTY
41787: LIST
41788: LIST
41789: PUSH
41790: LD_INT 5
41792: NEG
41793: PUSH
41794: LD_INT 3
41796: NEG
41797: PUSH
41798: EMPTY
41799: LIST
41800: LIST
41801: PUSH
41802: LD_INT 0
41804: PUSH
41805: LD_INT 3
41807: NEG
41808: PUSH
41809: EMPTY
41810: LIST
41811: LIST
41812: PUSH
41813: LD_INT 0
41815: PUSH
41816: LD_INT 4
41818: NEG
41819: PUSH
41820: EMPTY
41821: LIST
41822: LIST
41823: PUSH
41824: LD_INT 1
41826: PUSH
41827: LD_INT 3
41829: NEG
41830: PUSH
41831: EMPTY
41832: LIST
41833: LIST
41834: PUSH
41835: LD_INT 1
41837: PUSH
41838: LD_INT 2
41840: NEG
41841: PUSH
41842: EMPTY
41843: LIST
41844: LIST
41845: PUSH
41846: LD_INT 0
41848: PUSH
41849: LD_INT 2
41851: NEG
41852: PUSH
41853: EMPTY
41854: LIST
41855: LIST
41856: PUSH
41857: LD_INT 1
41859: NEG
41860: PUSH
41861: LD_INT 3
41863: NEG
41864: PUSH
41865: EMPTY
41866: LIST
41867: LIST
41868: PUSH
41869: LD_INT 1
41871: NEG
41872: PUSH
41873: LD_INT 4
41875: NEG
41876: PUSH
41877: EMPTY
41878: LIST
41879: LIST
41880: PUSH
41881: LD_INT 2
41883: PUSH
41884: LD_INT 2
41886: NEG
41887: PUSH
41888: EMPTY
41889: LIST
41890: LIST
41891: PUSH
41892: LD_INT 2
41894: NEG
41895: PUSH
41896: LD_INT 4
41898: NEG
41899: PUSH
41900: EMPTY
41901: LIST
41902: LIST
41903: PUSH
41904: LD_INT 4
41906: PUSH
41907: LD_INT 0
41909: PUSH
41910: EMPTY
41911: LIST
41912: LIST
41913: PUSH
41914: LD_INT 4
41916: PUSH
41917: LD_INT 1
41919: NEG
41920: PUSH
41921: EMPTY
41922: LIST
41923: LIST
41924: PUSH
41925: LD_INT 5
41927: PUSH
41928: LD_INT 0
41930: PUSH
41931: EMPTY
41932: LIST
41933: LIST
41934: PUSH
41935: LD_INT 5
41937: PUSH
41938: LD_INT 1
41940: PUSH
41941: EMPTY
41942: LIST
41943: LIST
41944: PUSH
41945: LD_INT 4
41947: PUSH
41948: LD_INT 1
41950: PUSH
41951: EMPTY
41952: LIST
41953: LIST
41954: PUSH
41955: LD_INT 3
41957: PUSH
41958: LD_INT 0
41960: PUSH
41961: EMPTY
41962: LIST
41963: LIST
41964: PUSH
41965: LD_INT 3
41967: PUSH
41968: LD_INT 1
41970: NEG
41971: PUSH
41972: EMPTY
41973: LIST
41974: LIST
41975: PUSH
41976: LD_INT 3
41978: PUSH
41979: LD_INT 2
41981: NEG
41982: PUSH
41983: EMPTY
41984: LIST
41985: LIST
41986: PUSH
41987: LD_INT 5
41989: PUSH
41990: LD_INT 2
41992: PUSH
41993: EMPTY
41994: LIST
41995: LIST
41996: PUSH
41997: EMPTY
41998: LIST
41999: LIST
42000: LIST
42001: LIST
42002: LIST
42003: LIST
42004: LIST
42005: LIST
42006: LIST
42007: LIST
42008: LIST
42009: LIST
42010: LIST
42011: LIST
42012: LIST
42013: LIST
42014: LIST
42015: LIST
42016: LIST
42017: LIST
42018: LIST
42019: LIST
42020: LIST
42021: LIST
42022: LIST
42023: LIST
42024: LIST
42025: LIST
42026: LIST
42027: LIST
42028: LIST
42029: LIST
42030: LIST
42031: LIST
42032: LIST
42033: LIST
42034: LIST
42035: LIST
42036: LIST
42037: LIST
42038: LIST
42039: LIST
42040: LIST
42041: LIST
42042: LIST
42043: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
42044: LD_ADDR_VAR 0 32
42048: PUSH
42049: LD_INT 4
42051: NEG
42052: PUSH
42053: LD_INT 0
42055: PUSH
42056: EMPTY
42057: LIST
42058: LIST
42059: PUSH
42060: LD_INT 4
42062: NEG
42063: PUSH
42064: LD_INT 1
42066: NEG
42067: PUSH
42068: EMPTY
42069: LIST
42070: LIST
42071: PUSH
42072: LD_INT 3
42074: NEG
42075: PUSH
42076: LD_INT 0
42078: PUSH
42079: EMPTY
42080: LIST
42081: LIST
42082: PUSH
42083: LD_INT 3
42085: NEG
42086: PUSH
42087: LD_INT 1
42089: PUSH
42090: EMPTY
42091: LIST
42092: LIST
42093: PUSH
42094: LD_INT 4
42096: NEG
42097: PUSH
42098: LD_INT 1
42100: PUSH
42101: EMPTY
42102: LIST
42103: LIST
42104: PUSH
42105: LD_INT 5
42107: NEG
42108: PUSH
42109: LD_INT 0
42111: PUSH
42112: EMPTY
42113: LIST
42114: LIST
42115: PUSH
42116: LD_INT 5
42118: NEG
42119: PUSH
42120: LD_INT 1
42122: NEG
42123: PUSH
42124: EMPTY
42125: LIST
42126: LIST
42127: PUSH
42128: LD_INT 5
42130: NEG
42131: PUSH
42132: LD_INT 2
42134: NEG
42135: PUSH
42136: EMPTY
42137: LIST
42138: LIST
42139: PUSH
42140: LD_INT 3
42142: NEG
42143: PUSH
42144: LD_INT 2
42146: PUSH
42147: EMPTY
42148: LIST
42149: LIST
42150: PUSH
42151: LD_INT 3
42153: NEG
42154: PUSH
42155: LD_INT 3
42157: NEG
42158: PUSH
42159: EMPTY
42160: LIST
42161: LIST
42162: PUSH
42163: LD_INT 3
42165: NEG
42166: PUSH
42167: LD_INT 4
42169: NEG
42170: PUSH
42171: EMPTY
42172: LIST
42173: LIST
42174: PUSH
42175: LD_INT 2
42177: NEG
42178: PUSH
42179: LD_INT 3
42181: NEG
42182: PUSH
42183: EMPTY
42184: LIST
42185: LIST
42186: PUSH
42187: LD_INT 2
42189: NEG
42190: PUSH
42191: LD_INT 2
42193: NEG
42194: PUSH
42195: EMPTY
42196: LIST
42197: LIST
42198: PUSH
42199: LD_INT 3
42201: NEG
42202: PUSH
42203: LD_INT 2
42205: NEG
42206: PUSH
42207: EMPTY
42208: LIST
42209: LIST
42210: PUSH
42211: LD_INT 4
42213: NEG
42214: PUSH
42215: LD_INT 3
42217: NEG
42218: PUSH
42219: EMPTY
42220: LIST
42221: LIST
42222: PUSH
42223: LD_INT 4
42225: NEG
42226: PUSH
42227: LD_INT 4
42229: NEG
42230: PUSH
42231: EMPTY
42232: LIST
42233: LIST
42234: PUSH
42235: LD_INT 2
42237: NEG
42238: PUSH
42239: LD_INT 4
42241: NEG
42242: PUSH
42243: EMPTY
42244: LIST
42245: LIST
42246: PUSH
42247: LD_INT 4
42249: NEG
42250: PUSH
42251: LD_INT 2
42253: NEG
42254: PUSH
42255: EMPTY
42256: LIST
42257: LIST
42258: PUSH
42259: LD_INT 0
42261: PUSH
42262: LD_INT 4
42264: NEG
42265: PUSH
42266: EMPTY
42267: LIST
42268: LIST
42269: PUSH
42270: LD_INT 0
42272: PUSH
42273: LD_INT 5
42275: NEG
42276: PUSH
42277: EMPTY
42278: LIST
42279: LIST
42280: PUSH
42281: LD_INT 1
42283: PUSH
42284: LD_INT 4
42286: NEG
42287: PUSH
42288: EMPTY
42289: LIST
42290: LIST
42291: PUSH
42292: LD_INT 1
42294: PUSH
42295: LD_INT 3
42297: NEG
42298: PUSH
42299: EMPTY
42300: LIST
42301: LIST
42302: PUSH
42303: LD_INT 0
42305: PUSH
42306: LD_INT 3
42308: NEG
42309: PUSH
42310: EMPTY
42311: LIST
42312: LIST
42313: PUSH
42314: LD_INT 1
42316: NEG
42317: PUSH
42318: LD_INT 4
42320: NEG
42321: PUSH
42322: EMPTY
42323: LIST
42324: LIST
42325: PUSH
42326: LD_INT 1
42328: NEG
42329: PUSH
42330: LD_INT 5
42332: NEG
42333: PUSH
42334: EMPTY
42335: LIST
42336: LIST
42337: PUSH
42338: LD_INT 2
42340: PUSH
42341: LD_INT 3
42343: NEG
42344: PUSH
42345: EMPTY
42346: LIST
42347: LIST
42348: PUSH
42349: LD_INT 2
42351: NEG
42352: PUSH
42353: LD_INT 5
42355: NEG
42356: PUSH
42357: EMPTY
42358: LIST
42359: LIST
42360: PUSH
42361: LD_INT 3
42363: PUSH
42364: LD_INT 0
42366: PUSH
42367: EMPTY
42368: LIST
42369: LIST
42370: PUSH
42371: LD_INT 3
42373: PUSH
42374: LD_INT 1
42376: NEG
42377: PUSH
42378: EMPTY
42379: LIST
42380: LIST
42381: PUSH
42382: LD_INT 4
42384: PUSH
42385: LD_INT 0
42387: PUSH
42388: EMPTY
42389: LIST
42390: LIST
42391: PUSH
42392: LD_INT 4
42394: PUSH
42395: LD_INT 1
42397: PUSH
42398: EMPTY
42399: LIST
42400: LIST
42401: PUSH
42402: LD_INT 3
42404: PUSH
42405: LD_INT 1
42407: PUSH
42408: EMPTY
42409: LIST
42410: LIST
42411: PUSH
42412: LD_INT 2
42414: PUSH
42415: LD_INT 0
42417: PUSH
42418: EMPTY
42419: LIST
42420: LIST
42421: PUSH
42422: LD_INT 2
42424: PUSH
42425: LD_INT 1
42427: NEG
42428: PUSH
42429: EMPTY
42430: LIST
42431: LIST
42432: PUSH
42433: LD_INT 2
42435: PUSH
42436: LD_INT 2
42438: NEG
42439: PUSH
42440: EMPTY
42441: LIST
42442: LIST
42443: PUSH
42444: LD_INT 4
42446: PUSH
42447: LD_INT 2
42449: PUSH
42450: EMPTY
42451: LIST
42452: LIST
42453: PUSH
42454: LD_INT 4
42456: PUSH
42457: LD_INT 4
42459: PUSH
42460: EMPTY
42461: LIST
42462: LIST
42463: PUSH
42464: LD_INT 4
42466: PUSH
42467: LD_INT 3
42469: PUSH
42470: EMPTY
42471: LIST
42472: LIST
42473: PUSH
42474: LD_INT 5
42476: PUSH
42477: LD_INT 4
42479: PUSH
42480: EMPTY
42481: LIST
42482: LIST
42483: PUSH
42484: LD_INT 5
42486: PUSH
42487: LD_INT 5
42489: PUSH
42490: EMPTY
42491: LIST
42492: LIST
42493: PUSH
42494: LD_INT 4
42496: PUSH
42497: LD_INT 5
42499: PUSH
42500: EMPTY
42501: LIST
42502: LIST
42503: PUSH
42504: LD_INT 3
42506: PUSH
42507: LD_INT 4
42509: PUSH
42510: EMPTY
42511: LIST
42512: LIST
42513: PUSH
42514: LD_INT 3
42516: PUSH
42517: LD_INT 3
42519: PUSH
42520: EMPTY
42521: LIST
42522: LIST
42523: PUSH
42524: LD_INT 5
42526: PUSH
42527: LD_INT 3
42529: PUSH
42530: EMPTY
42531: LIST
42532: LIST
42533: PUSH
42534: LD_INT 3
42536: PUSH
42537: LD_INT 5
42539: PUSH
42540: EMPTY
42541: LIST
42542: LIST
42543: PUSH
42544: EMPTY
42545: LIST
42546: LIST
42547: LIST
42548: LIST
42549: LIST
42550: LIST
42551: LIST
42552: LIST
42553: LIST
42554: LIST
42555: LIST
42556: LIST
42557: LIST
42558: LIST
42559: LIST
42560: LIST
42561: LIST
42562: LIST
42563: LIST
42564: LIST
42565: LIST
42566: LIST
42567: LIST
42568: LIST
42569: LIST
42570: LIST
42571: LIST
42572: LIST
42573: LIST
42574: LIST
42575: LIST
42576: LIST
42577: LIST
42578: LIST
42579: LIST
42580: LIST
42581: LIST
42582: LIST
42583: LIST
42584: LIST
42585: LIST
42586: LIST
42587: LIST
42588: LIST
42589: LIST
42590: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
42591: LD_ADDR_VAR 0 33
42595: PUSH
42596: LD_INT 4
42598: NEG
42599: PUSH
42600: LD_INT 4
42602: NEG
42603: PUSH
42604: EMPTY
42605: LIST
42606: LIST
42607: PUSH
42608: LD_INT 4
42610: NEG
42611: PUSH
42612: LD_INT 5
42614: NEG
42615: PUSH
42616: EMPTY
42617: LIST
42618: LIST
42619: PUSH
42620: LD_INT 3
42622: NEG
42623: PUSH
42624: LD_INT 4
42626: NEG
42627: PUSH
42628: EMPTY
42629: LIST
42630: LIST
42631: PUSH
42632: LD_INT 3
42634: NEG
42635: PUSH
42636: LD_INT 3
42638: NEG
42639: PUSH
42640: EMPTY
42641: LIST
42642: LIST
42643: PUSH
42644: LD_INT 4
42646: NEG
42647: PUSH
42648: LD_INT 3
42650: NEG
42651: PUSH
42652: EMPTY
42653: LIST
42654: LIST
42655: PUSH
42656: LD_INT 5
42658: NEG
42659: PUSH
42660: LD_INT 4
42662: NEG
42663: PUSH
42664: EMPTY
42665: LIST
42666: LIST
42667: PUSH
42668: LD_INT 5
42670: NEG
42671: PUSH
42672: LD_INT 5
42674: NEG
42675: PUSH
42676: EMPTY
42677: LIST
42678: LIST
42679: PUSH
42680: LD_INT 3
42682: NEG
42683: PUSH
42684: LD_INT 5
42686: NEG
42687: PUSH
42688: EMPTY
42689: LIST
42690: LIST
42691: PUSH
42692: LD_INT 5
42694: NEG
42695: PUSH
42696: LD_INT 3
42698: NEG
42699: PUSH
42700: EMPTY
42701: LIST
42702: LIST
42703: PUSH
42704: LD_INT 0
42706: PUSH
42707: LD_INT 3
42709: NEG
42710: PUSH
42711: EMPTY
42712: LIST
42713: LIST
42714: PUSH
42715: LD_INT 0
42717: PUSH
42718: LD_INT 4
42720: NEG
42721: PUSH
42722: EMPTY
42723: LIST
42724: LIST
42725: PUSH
42726: LD_INT 1
42728: PUSH
42729: LD_INT 3
42731: NEG
42732: PUSH
42733: EMPTY
42734: LIST
42735: LIST
42736: PUSH
42737: LD_INT 1
42739: PUSH
42740: LD_INT 2
42742: NEG
42743: PUSH
42744: EMPTY
42745: LIST
42746: LIST
42747: PUSH
42748: LD_INT 0
42750: PUSH
42751: LD_INT 2
42753: NEG
42754: PUSH
42755: EMPTY
42756: LIST
42757: LIST
42758: PUSH
42759: LD_INT 1
42761: NEG
42762: PUSH
42763: LD_INT 3
42765: NEG
42766: PUSH
42767: EMPTY
42768: LIST
42769: LIST
42770: PUSH
42771: LD_INT 1
42773: NEG
42774: PUSH
42775: LD_INT 4
42777: NEG
42778: PUSH
42779: EMPTY
42780: LIST
42781: LIST
42782: PUSH
42783: LD_INT 2
42785: PUSH
42786: LD_INT 2
42788: NEG
42789: PUSH
42790: EMPTY
42791: LIST
42792: LIST
42793: PUSH
42794: LD_INT 2
42796: NEG
42797: PUSH
42798: LD_INT 4
42800: NEG
42801: PUSH
42802: EMPTY
42803: LIST
42804: LIST
42805: PUSH
42806: LD_INT 4
42808: PUSH
42809: LD_INT 0
42811: PUSH
42812: EMPTY
42813: LIST
42814: LIST
42815: PUSH
42816: LD_INT 4
42818: PUSH
42819: LD_INT 1
42821: NEG
42822: PUSH
42823: EMPTY
42824: LIST
42825: LIST
42826: PUSH
42827: LD_INT 5
42829: PUSH
42830: LD_INT 0
42832: PUSH
42833: EMPTY
42834: LIST
42835: LIST
42836: PUSH
42837: LD_INT 5
42839: PUSH
42840: LD_INT 1
42842: PUSH
42843: EMPTY
42844: LIST
42845: LIST
42846: PUSH
42847: LD_INT 4
42849: PUSH
42850: LD_INT 1
42852: PUSH
42853: EMPTY
42854: LIST
42855: LIST
42856: PUSH
42857: LD_INT 3
42859: PUSH
42860: LD_INT 0
42862: PUSH
42863: EMPTY
42864: LIST
42865: LIST
42866: PUSH
42867: LD_INT 3
42869: PUSH
42870: LD_INT 1
42872: NEG
42873: PUSH
42874: EMPTY
42875: LIST
42876: LIST
42877: PUSH
42878: LD_INT 3
42880: PUSH
42881: LD_INT 2
42883: NEG
42884: PUSH
42885: EMPTY
42886: LIST
42887: LIST
42888: PUSH
42889: LD_INT 5
42891: PUSH
42892: LD_INT 2
42894: PUSH
42895: EMPTY
42896: LIST
42897: LIST
42898: PUSH
42899: LD_INT 3
42901: PUSH
42902: LD_INT 3
42904: PUSH
42905: EMPTY
42906: LIST
42907: LIST
42908: PUSH
42909: LD_INT 3
42911: PUSH
42912: LD_INT 2
42914: PUSH
42915: EMPTY
42916: LIST
42917: LIST
42918: PUSH
42919: LD_INT 4
42921: PUSH
42922: LD_INT 3
42924: PUSH
42925: EMPTY
42926: LIST
42927: LIST
42928: PUSH
42929: LD_INT 4
42931: PUSH
42932: LD_INT 4
42934: PUSH
42935: EMPTY
42936: LIST
42937: LIST
42938: PUSH
42939: LD_INT 3
42941: PUSH
42942: LD_INT 4
42944: PUSH
42945: EMPTY
42946: LIST
42947: LIST
42948: PUSH
42949: LD_INT 2
42951: PUSH
42952: LD_INT 3
42954: PUSH
42955: EMPTY
42956: LIST
42957: LIST
42958: PUSH
42959: LD_INT 2
42961: PUSH
42962: LD_INT 2
42964: PUSH
42965: EMPTY
42966: LIST
42967: LIST
42968: PUSH
42969: LD_INT 4
42971: PUSH
42972: LD_INT 2
42974: PUSH
42975: EMPTY
42976: LIST
42977: LIST
42978: PUSH
42979: LD_INT 2
42981: PUSH
42982: LD_INT 4
42984: PUSH
42985: EMPTY
42986: LIST
42987: LIST
42988: PUSH
42989: LD_INT 0
42991: PUSH
42992: LD_INT 4
42994: PUSH
42995: EMPTY
42996: LIST
42997: LIST
42998: PUSH
42999: LD_INT 0
43001: PUSH
43002: LD_INT 3
43004: PUSH
43005: EMPTY
43006: LIST
43007: LIST
43008: PUSH
43009: LD_INT 1
43011: PUSH
43012: LD_INT 4
43014: PUSH
43015: EMPTY
43016: LIST
43017: LIST
43018: PUSH
43019: LD_INT 1
43021: PUSH
43022: LD_INT 5
43024: PUSH
43025: EMPTY
43026: LIST
43027: LIST
43028: PUSH
43029: LD_INT 0
43031: PUSH
43032: LD_INT 5
43034: PUSH
43035: EMPTY
43036: LIST
43037: LIST
43038: PUSH
43039: LD_INT 1
43041: NEG
43042: PUSH
43043: LD_INT 4
43045: PUSH
43046: EMPTY
43047: LIST
43048: LIST
43049: PUSH
43050: LD_INT 1
43052: NEG
43053: PUSH
43054: LD_INT 3
43056: PUSH
43057: EMPTY
43058: LIST
43059: LIST
43060: PUSH
43061: LD_INT 2
43063: PUSH
43064: LD_INT 5
43066: PUSH
43067: EMPTY
43068: LIST
43069: LIST
43070: PUSH
43071: LD_INT 2
43073: NEG
43074: PUSH
43075: LD_INT 3
43077: PUSH
43078: EMPTY
43079: LIST
43080: LIST
43081: PUSH
43082: EMPTY
43083: LIST
43084: LIST
43085: LIST
43086: LIST
43087: LIST
43088: LIST
43089: LIST
43090: LIST
43091: LIST
43092: LIST
43093: LIST
43094: LIST
43095: LIST
43096: LIST
43097: LIST
43098: LIST
43099: LIST
43100: LIST
43101: LIST
43102: LIST
43103: LIST
43104: LIST
43105: LIST
43106: LIST
43107: LIST
43108: LIST
43109: LIST
43110: LIST
43111: LIST
43112: LIST
43113: LIST
43114: LIST
43115: LIST
43116: LIST
43117: LIST
43118: LIST
43119: LIST
43120: LIST
43121: LIST
43122: LIST
43123: LIST
43124: LIST
43125: LIST
43126: LIST
43127: LIST
43128: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
43129: LD_ADDR_VAR 0 34
43133: PUSH
43134: LD_INT 0
43136: PUSH
43137: LD_INT 4
43139: NEG
43140: PUSH
43141: EMPTY
43142: LIST
43143: LIST
43144: PUSH
43145: LD_INT 0
43147: PUSH
43148: LD_INT 5
43150: NEG
43151: PUSH
43152: EMPTY
43153: LIST
43154: LIST
43155: PUSH
43156: LD_INT 1
43158: PUSH
43159: LD_INT 4
43161: NEG
43162: PUSH
43163: EMPTY
43164: LIST
43165: LIST
43166: PUSH
43167: LD_INT 1
43169: PUSH
43170: LD_INT 3
43172: NEG
43173: PUSH
43174: EMPTY
43175: LIST
43176: LIST
43177: PUSH
43178: LD_INT 0
43180: PUSH
43181: LD_INT 3
43183: NEG
43184: PUSH
43185: EMPTY
43186: LIST
43187: LIST
43188: PUSH
43189: LD_INT 1
43191: NEG
43192: PUSH
43193: LD_INT 4
43195: NEG
43196: PUSH
43197: EMPTY
43198: LIST
43199: LIST
43200: PUSH
43201: LD_INT 1
43203: NEG
43204: PUSH
43205: LD_INT 5
43207: NEG
43208: PUSH
43209: EMPTY
43210: LIST
43211: LIST
43212: PUSH
43213: LD_INT 2
43215: PUSH
43216: LD_INT 3
43218: NEG
43219: PUSH
43220: EMPTY
43221: LIST
43222: LIST
43223: PUSH
43224: LD_INT 2
43226: NEG
43227: PUSH
43228: LD_INT 5
43230: NEG
43231: PUSH
43232: EMPTY
43233: LIST
43234: LIST
43235: PUSH
43236: LD_INT 3
43238: PUSH
43239: LD_INT 0
43241: PUSH
43242: EMPTY
43243: LIST
43244: LIST
43245: PUSH
43246: LD_INT 3
43248: PUSH
43249: LD_INT 1
43251: NEG
43252: PUSH
43253: EMPTY
43254: LIST
43255: LIST
43256: PUSH
43257: LD_INT 4
43259: PUSH
43260: LD_INT 0
43262: PUSH
43263: EMPTY
43264: LIST
43265: LIST
43266: PUSH
43267: LD_INT 4
43269: PUSH
43270: LD_INT 1
43272: PUSH
43273: EMPTY
43274: LIST
43275: LIST
43276: PUSH
43277: LD_INT 3
43279: PUSH
43280: LD_INT 1
43282: PUSH
43283: EMPTY
43284: LIST
43285: LIST
43286: PUSH
43287: LD_INT 2
43289: PUSH
43290: LD_INT 0
43292: PUSH
43293: EMPTY
43294: LIST
43295: LIST
43296: PUSH
43297: LD_INT 2
43299: PUSH
43300: LD_INT 1
43302: NEG
43303: PUSH
43304: EMPTY
43305: LIST
43306: LIST
43307: PUSH
43308: LD_INT 2
43310: PUSH
43311: LD_INT 2
43313: NEG
43314: PUSH
43315: EMPTY
43316: LIST
43317: LIST
43318: PUSH
43319: LD_INT 4
43321: PUSH
43322: LD_INT 2
43324: PUSH
43325: EMPTY
43326: LIST
43327: LIST
43328: PUSH
43329: LD_INT 4
43331: PUSH
43332: LD_INT 4
43334: PUSH
43335: EMPTY
43336: LIST
43337: LIST
43338: PUSH
43339: LD_INT 4
43341: PUSH
43342: LD_INT 3
43344: PUSH
43345: EMPTY
43346: LIST
43347: LIST
43348: PUSH
43349: LD_INT 5
43351: PUSH
43352: LD_INT 4
43354: PUSH
43355: EMPTY
43356: LIST
43357: LIST
43358: PUSH
43359: LD_INT 5
43361: PUSH
43362: LD_INT 5
43364: PUSH
43365: EMPTY
43366: LIST
43367: LIST
43368: PUSH
43369: LD_INT 4
43371: PUSH
43372: LD_INT 5
43374: PUSH
43375: EMPTY
43376: LIST
43377: LIST
43378: PUSH
43379: LD_INT 3
43381: PUSH
43382: LD_INT 4
43384: PUSH
43385: EMPTY
43386: LIST
43387: LIST
43388: PUSH
43389: LD_INT 3
43391: PUSH
43392: LD_INT 3
43394: PUSH
43395: EMPTY
43396: LIST
43397: LIST
43398: PUSH
43399: LD_INT 5
43401: PUSH
43402: LD_INT 3
43404: PUSH
43405: EMPTY
43406: LIST
43407: LIST
43408: PUSH
43409: LD_INT 3
43411: PUSH
43412: LD_INT 5
43414: PUSH
43415: EMPTY
43416: LIST
43417: LIST
43418: PUSH
43419: LD_INT 0
43421: PUSH
43422: LD_INT 3
43424: PUSH
43425: EMPTY
43426: LIST
43427: LIST
43428: PUSH
43429: LD_INT 0
43431: PUSH
43432: LD_INT 2
43434: PUSH
43435: EMPTY
43436: LIST
43437: LIST
43438: PUSH
43439: LD_INT 1
43441: PUSH
43442: LD_INT 3
43444: PUSH
43445: EMPTY
43446: LIST
43447: LIST
43448: PUSH
43449: LD_INT 1
43451: PUSH
43452: LD_INT 4
43454: PUSH
43455: EMPTY
43456: LIST
43457: LIST
43458: PUSH
43459: LD_INT 0
43461: PUSH
43462: LD_INT 4
43464: PUSH
43465: EMPTY
43466: LIST
43467: LIST
43468: PUSH
43469: LD_INT 1
43471: NEG
43472: PUSH
43473: LD_INT 3
43475: PUSH
43476: EMPTY
43477: LIST
43478: LIST
43479: PUSH
43480: LD_INT 1
43482: NEG
43483: PUSH
43484: LD_INT 2
43486: PUSH
43487: EMPTY
43488: LIST
43489: LIST
43490: PUSH
43491: LD_INT 2
43493: PUSH
43494: LD_INT 4
43496: PUSH
43497: EMPTY
43498: LIST
43499: LIST
43500: PUSH
43501: LD_INT 2
43503: NEG
43504: PUSH
43505: LD_INT 2
43507: PUSH
43508: EMPTY
43509: LIST
43510: LIST
43511: PUSH
43512: LD_INT 4
43514: NEG
43515: PUSH
43516: LD_INT 0
43518: PUSH
43519: EMPTY
43520: LIST
43521: LIST
43522: PUSH
43523: LD_INT 4
43525: NEG
43526: PUSH
43527: LD_INT 1
43529: NEG
43530: PUSH
43531: EMPTY
43532: LIST
43533: LIST
43534: PUSH
43535: LD_INT 3
43537: NEG
43538: PUSH
43539: LD_INT 0
43541: PUSH
43542: EMPTY
43543: LIST
43544: LIST
43545: PUSH
43546: LD_INT 3
43548: NEG
43549: PUSH
43550: LD_INT 1
43552: PUSH
43553: EMPTY
43554: LIST
43555: LIST
43556: PUSH
43557: LD_INT 4
43559: NEG
43560: PUSH
43561: LD_INT 1
43563: PUSH
43564: EMPTY
43565: LIST
43566: LIST
43567: PUSH
43568: LD_INT 5
43570: NEG
43571: PUSH
43572: LD_INT 0
43574: PUSH
43575: EMPTY
43576: LIST
43577: LIST
43578: PUSH
43579: LD_INT 5
43581: NEG
43582: PUSH
43583: LD_INT 1
43585: NEG
43586: PUSH
43587: EMPTY
43588: LIST
43589: LIST
43590: PUSH
43591: LD_INT 5
43593: NEG
43594: PUSH
43595: LD_INT 2
43597: NEG
43598: PUSH
43599: EMPTY
43600: LIST
43601: LIST
43602: PUSH
43603: LD_INT 3
43605: NEG
43606: PUSH
43607: LD_INT 2
43609: PUSH
43610: EMPTY
43611: LIST
43612: LIST
43613: PUSH
43614: EMPTY
43615: LIST
43616: LIST
43617: LIST
43618: LIST
43619: LIST
43620: LIST
43621: LIST
43622: LIST
43623: LIST
43624: LIST
43625: LIST
43626: LIST
43627: LIST
43628: LIST
43629: LIST
43630: LIST
43631: LIST
43632: LIST
43633: LIST
43634: LIST
43635: LIST
43636: LIST
43637: LIST
43638: LIST
43639: LIST
43640: LIST
43641: LIST
43642: LIST
43643: LIST
43644: LIST
43645: LIST
43646: LIST
43647: LIST
43648: LIST
43649: LIST
43650: LIST
43651: LIST
43652: LIST
43653: LIST
43654: LIST
43655: LIST
43656: LIST
43657: LIST
43658: LIST
43659: LIST
43660: ST_TO_ADDR
// end ; end ;
43661: GO 43664
43663: POP
// case btype of b_depot , b_warehouse :
43664: LD_VAR 0 1
43668: PUSH
43669: LD_INT 0
43671: DOUBLE
43672: EQUAL
43673: IFTRUE 43683
43675: LD_INT 1
43677: DOUBLE
43678: EQUAL
43679: IFTRUE 43683
43681: GO 43884
43683: POP
// case nation of nation_american :
43684: LD_VAR 0 5
43688: PUSH
43689: LD_INT 1
43691: DOUBLE
43692: EQUAL
43693: IFTRUE 43697
43695: GO 43753
43697: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
43698: LD_ADDR_VAR 0 9
43702: PUSH
43703: LD_VAR 0 11
43707: PUSH
43708: LD_VAR 0 12
43712: PUSH
43713: LD_VAR 0 13
43717: PUSH
43718: LD_VAR 0 14
43722: PUSH
43723: LD_VAR 0 15
43727: PUSH
43728: LD_VAR 0 16
43732: PUSH
43733: EMPTY
43734: LIST
43735: LIST
43736: LIST
43737: LIST
43738: LIST
43739: LIST
43740: PUSH
43741: LD_VAR 0 4
43745: PUSH
43746: LD_INT 1
43748: PLUS
43749: ARRAY
43750: ST_TO_ADDR
43751: GO 43882
43753: LD_INT 2
43755: DOUBLE
43756: EQUAL
43757: IFTRUE 43761
43759: GO 43817
43761: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
43762: LD_ADDR_VAR 0 9
43766: PUSH
43767: LD_VAR 0 17
43771: PUSH
43772: LD_VAR 0 18
43776: PUSH
43777: LD_VAR 0 19
43781: PUSH
43782: LD_VAR 0 20
43786: PUSH
43787: LD_VAR 0 21
43791: PUSH
43792: LD_VAR 0 22
43796: PUSH
43797: EMPTY
43798: LIST
43799: LIST
43800: LIST
43801: LIST
43802: LIST
43803: LIST
43804: PUSH
43805: LD_VAR 0 4
43809: PUSH
43810: LD_INT 1
43812: PLUS
43813: ARRAY
43814: ST_TO_ADDR
43815: GO 43882
43817: LD_INT 3
43819: DOUBLE
43820: EQUAL
43821: IFTRUE 43825
43823: GO 43881
43825: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
43826: LD_ADDR_VAR 0 9
43830: PUSH
43831: LD_VAR 0 23
43835: PUSH
43836: LD_VAR 0 24
43840: PUSH
43841: LD_VAR 0 25
43845: PUSH
43846: LD_VAR 0 26
43850: PUSH
43851: LD_VAR 0 27
43855: PUSH
43856: LD_VAR 0 28
43860: PUSH
43861: EMPTY
43862: LIST
43863: LIST
43864: LIST
43865: LIST
43866: LIST
43867: LIST
43868: PUSH
43869: LD_VAR 0 4
43873: PUSH
43874: LD_INT 1
43876: PLUS
43877: ARRAY
43878: ST_TO_ADDR
43879: GO 43882
43881: POP
43882: GO 44437
43884: LD_INT 2
43886: DOUBLE
43887: EQUAL
43888: IFTRUE 43898
43890: LD_INT 3
43892: DOUBLE
43893: EQUAL
43894: IFTRUE 43898
43896: GO 43954
43898: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
43899: LD_ADDR_VAR 0 9
43903: PUSH
43904: LD_VAR 0 29
43908: PUSH
43909: LD_VAR 0 30
43913: PUSH
43914: LD_VAR 0 31
43918: PUSH
43919: LD_VAR 0 32
43923: PUSH
43924: LD_VAR 0 33
43928: PUSH
43929: LD_VAR 0 34
43933: PUSH
43934: EMPTY
43935: LIST
43936: LIST
43937: LIST
43938: LIST
43939: LIST
43940: LIST
43941: PUSH
43942: LD_VAR 0 4
43946: PUSH
43947: LD_INT 1
43949: PLUS
43950: ARRAY
43951: ST_TO_ADDR
43952: GO 44437
43954: LD_INT 16
43956: DOUBLE
43957: EQUAL
43958: IFTRUE 44016
43960: LD_INT 17
43962: DOUBLE
43963: EQUAL
43964: IFTRUE 44016
43966: LD_INT 18
43968: DOUBLE
43969: EQUAL
43970: IFTRUE 44016
43972: LD_INT 19
43974: DOUBLE
43975: EQUAL
43976: IFTRUE 44016
43978: LD_INT 22
43980: DOUBLE
43981: EQUAL
43982: IFTRUE 44016
43984: LD_INT 20
43986: DOUBLE
43987: EQUAL
43988: IFTRUE 44016
43990: LD_INT 21
43992: DOUBLE
43993: EQUAL
43994: IFTRUE 44016
43996: LD_INT 23
43998: DOUBLE
43999: EQUAL
44000: IFTRUE 44016
44002: LD_INT 24
44004: DOUBLE
44005: EQUAL
44006: IFTRUE 44016
44008: LD_INT 25
44010: DOUBLE
44011: EQUAL
44012: IFTRUE 44016
44014: GO 44072
44016: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
44017: LD_ADDR_VAR 0 9
44021: PUSH
44022: LD_VAR 0 35
44026: PUSH
44027: LD_VAR 0 36
44031: PUSH
44032: LD_VAR 0 37
44036: PUSH
44037: LD_VAR 0 38
44041: PUSH
44042: LD_VAR 0 39
44046: PUSH
44047: LD_VAR 0 40
44051: PUSH
44052: EMPTY
44053: LIST
44054: LIST
44055: LIST
44056: LIST
44057: LIST
44058: LIST
44059: PUSH
44060: LD_VAR 0 4
44064: PUSH
44065: LD_INT 1
44067: PLUS
44068: ARRAY
44069: ST_TO_ADDR
44070: GO 44437
44072: LD_INT 6
44074: DOUBLE
44075: EQUAL
44076: IFTRUE 44128
44078: LD_INT 7
44080: DOUBLE
44081: EQUAL
44082: IFTRUE 44128
44084: LD_INT 8
44086: DOUBLE
44087: EQUAL
44088: IFTRUE 44128
44090: LD_INT 13
44092: DOUBLE
44093: EQUAL
44094: IFTRUE 44128
44096: LD_INT 12
44098: DOUBLE
44099: EQUAL
44100: IFTRUE 44128
44102: LD_INT 15
44104: DOUBLE
44105: EQUAL
44106: IFTRUE 44128
44108: LD_INT 11
44110: DOUBLE
44111: EQUAL
44112: IFTRUE 44128
44114: LD_INT 14
44116: DOUBLE
44117: EQUAL
44118: IFTRUE 44128
44120: LD_INT 10
44122: DOUBLE
44123: EQUAL
44124: IFTRUE 44128
44126: GO 44184
44128: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
44129: LD_ADDR_VAR 0 9
44133: PUSH
44134: LD_VAR 0 41
44138: PUSH
44139: LD_VAR 0 42
44143: PUSH
44144: LD_VAR 0 43
44148: PUSH
44149: LD_VAR 0 44
44153: PUSH
44154: LD_VAR 0 45
44158: PUSH
44159: LD_VAR 0 46
44163: PUSH
44164: EMPTY
44165: LIST
44166: LIST
44167: LIST
44168: LIST
44169: LIST
44170: LIST
44171: PUSH
44172: LD_VAR 0 4
44176: PUSH
44177: LD_INT 1
44179: PLUS
44180: ARRAY
44181: ST_TO_ADDR
44182: GO 44437
44184: LD_INT 36
44186: DOUBLE
44187: EQUAL
44188: IFTRUE 44192
44190: GO 44248
44192: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
44193: LD_ADDR_VAR 0 9
44197: PUSH
44198: LD_VAR 0 47
44202: PUSH
44203: LD_VAR 0 48
44207: PUSH
44208: LD_VAR 0 49
44212: PUSH
44213: LD_VAR 0 50
44217: PUSH
44218: LD_VAR 0 51
44222: PUSH
44223: LD_VAR 0 52
44227: PUSH
44228: EMPTY
44229: LIST
44230: LIST
44231: LIST
44232: LIST
44233: LIST
44234: LIST
44235: PUSH
44236: LD_VAR 0 4
44240: PUSH
44241: LD_INT 1
44243: PLUS
44244: ARRAY
44245: ST_TO_ADDR
44246: GO 44437
44248: LD_INT 4
44250: DOUBLE
44251: EQUAL
44252: IFTRUE 44274
44254: LD_INT 5
44256: DOUBLE
44257: EQUAL
44258: IFTRUE 44274
44260: LD_INT 34
44262: DOUBLE
44263: EQUAL
44264: IFTRUE 44274
44266: LD_INT 37
44268: DOUBLE
44269: EQUAL
44270: IFTRUE 44274
44272: GO 44330
44274: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
44275: LD_ADDR_VAR 0 9
44279: PUSH
44280: LD_VAR 0 53
44284: PUSH
44285: LD_VAR 0 54
44289: PUSH
44290: LD_VAR 0 55
44294: PUSH
44295: LD_VAR 0 56
44299: PUSH
44300: LD_VAR 0 57
44304: PUSH
44305: LD_VAR 0 58
44309: PUSH
44310: EMPTY
44311: LIST
44312: LIST
44313: LIST
44314: LIST
44315: LIST
44316: LIST
44317: PUSH
44318: LD_VAR 0 4
44322: PUSH
44323: LD_INT 1
44325: PLUS
44326: ARRAY
44327: ST_TO_ADDR
44328: GO 44437
44330: LD_INT 31
44332: DOUBLE
44333: EQUAL
44334: IFTRUE 44380
44336: LD_INT 32
44338: DOUBLE
44339: EQUAL
44340: IFTRUE 44380
44342: LD_INT 33
44344: DOUBLE
44345: EQUAL
44346: IFTRUE 44380
44348: LD_INT 27
44350: DOUBLE
44351: EQUAL
44352: IFTRUE 44380
44354: LD_INT 26
44356: DOUBLE
44357: EQUAL
44358: IFTRUE 44380
44360: LD_INT 28
44362: DOUBLE
44363: EQUAL
44364: IFTRUE 44380
44366: LD_INT 29
44368: DOUBLE
44369: EQUAL
44370: IFTRUE 44380
44372: LD_INT 30
44374: DOUBLE
44375: EQUAL
44376: IFTRUE 44380
44378: GO 44436
44380: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
44381: LD_ADDR_VAR 0 9
44385: PUSH
44386: LD_VAR 0 59
44390: PUSH
44391: LD_VAR 0 60
44395: PUSH
44396: LD_VAR 0 61
44400: PUSH
44401: LD_VAR 0 62
44405: PUSH
44406: LD_VAR 0 63
44410: PUSH
44411: LD_VAR 0 64
44415: PUSH
44416: EMPTY
44417: LIST
44418: LIST
44419: LIST
44420: LIST
44421: LIST
44422: LIST
44423: PUSH
44424: LD_VAR 0 4
44428: PUSH
44429: LD_INT 1
44431: PLUS
44432: ARRAY
44433: ST_TO_ADDR
44434: GO 44437
44436: POP
// temp_list2 = [ ] ;
44437: LD_ADDR_VAR 0 10
44441: PUSH
44442: EMPTY
44443: ST_TO_ADDR
// for i in temp_list do
44444: LD_ADDR_VAR 0 8
44448: PUSH
44449: LD_VAR 0 9
44453: PUSH
44454: FOR_IN
44455: IFFALSE 44507
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
44457: LD_ADDR_VAR 0 10
44461: PUSH
44462: LD_VAR 0 10
44466: PUSH
44467: LD_VAR 0 8
44471: PUSH
44472: LD_INT 1
44474: ARRAY
44475: PUSH
44476: LD_VAR 0 2
44480: PLUS
44481: PUSH
44482: LD_VAR 0 8
44486: PUSH
44487: LD_INT 2
44489: ARRAY
44490: PUSH
44491: LD_VAR 0 3
44495: PLUS
44496: PUSH
44497: EMPTY
44498: LIST
44499: LIST
44500: PUSH
44501: EMPTY
44502: LIST
44503: ADD
44504: ST_TO_ADDR
44505: GO 44454
44507: POP
44508: POP
// result = temp_list2 ;
44509: LD_ADDR_VAR 0 7
44513: PUSH
44514: LD_VAR 0 10
44518: ST_TO_ADDR
// end ;
44519: LD_VAR 0 7
44523: RET
// export function EnemyInRange ( unit , dist ) ; begin
44524: LD_INT 0
44526: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
44527: LD_ADDR_VAR 0 3
44531: PUSH
44532: LD_VAR 0 1
44536: PPUSH
44537: CALL_OW 255
44541: PPUSH
44542: LD_VAR 0 1
44546: PPUSH
44547: CALL_OW 250
44551: PPUSH
44552: LD_VAR 0 1
44556: PPUSH
44557: CALL_OW 251
44561: PPUSH
44562: LD_VAR 0 2
44566: PPUSH
44567: CALL 17781 0 4
44571: PUSH
44572: LD_INT 4
44574: ARRAY
44575: ST_TO_ADDR
// end ;
44576: LD_VAR 0 3
44580: RET
// export function PlayerSeeMe ( unit ) ; begin
44581: LD_INT 0
44583: PPUSH
// result := See ( your_side , unit ) ;
44584: LD_ADDR_VAR 0 2
44588: PUSH
44589: LD_OWVAR 2
44593: PPUSH
44594: LD_VAR 0 1
44598: PPUSH
44599: CALL_OW 292
44603: ST_TO_ADDR
// end ;
44604: LD_VAR 0 2
44608: RET
// export function ReverseDir ( unit ) ; begin
44609: LD_INT 0
44611: PPUSH
// if not unit then
44612: LD_VAR 0 1
44616: NOT
44617: IFFALSE 44621
// exit ;
44619: GO 44644
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
44621: LD_ADDR_VAR 0 2
44625: PUSH
44626: LD_VAR 0 1
44630: PPUSH
44631: CALL_OW 254
44635: PUSH
44636: LD_INT 3
44638: PLUS
44639: PUSH
44640: LD_INT 6
44642: MOD
44643: ST_TO_ADDR
// end ;
44644: LD_VAR 0 2
44648: RET
// export function ReverseArray ( array ) ; var i ; begin
44649: LD_INT 0
44651: PPUSH
44652: PPUSH
// if not array then
44653: LD_VAR 0 1
44657: NOT
44658: IFFALSE 44662
// exit ;
44660: GO 44717
// result := [ ] ;
44662: LD_ADDR_VAR 0 2
44666: PUSH
44667: EMPTY
44668: ST_TO_ADDR
// for i := array downto 1 do
44669: LD_ADDR_VAR 0 3
44673: PUSH
44674: DOUBLE
44675: LD_VAR 0 1
44679: INC
44680: ST_TO_ADDR
44681: LD_INT 1
44683: PUSH
44684: FOR_DOWNTO
44685: IFFALSE 44715
// result := Join ( result , array [ i ] ) ;
44687: LD_ADDR_VAR 0 2
44691: PUSH
44692: LD_VAR 0 2
44696: PPUSH
44697: LD_VAR 0 1
44701: PUSH
44702: LD_VAR 0 3
44706: ARRAY
44707: PPUSH
44708: CALL 49569 0 2
44712: ST_TO_ADDR
44713: GO 44684
44715: POP
44716: POP
// end ;
44717: LD_VAR 0 2
44721: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
44722: LD_INT 0
44724: PPUSH
44725: PPUSH
44726: PPUSH
44727: PPUSH
44728: PPUSH
44729: PPUSH
// if not unit or not hexes then
44730: LD_VAR 0 1
44734: NOT
44735: IFTRUE 44744
44737: PUSH
44738: LD_VAR 0 2
44742: NOT
44743: OR
44744: IFFALSE 44748
// exit ;
44746: GO 44871
// dist := 9999 ;
44748: LD_ADDR_VAR 0 5
44752: PUSH
44753: LD_INT 9999
44755: ST_TO_ADDR
// for i = 1 to hexes do
44756: LD_ADDR_VAR 0 4
44760: PUSH
44761: DOUBLE
44762: LD_INT 1
44764: DEC
44765: ST_TO_ADDR
44766: LD_VAR 0 2
44770: PUSH
44771: FOR_TO
44772: IFFALSE 44859
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44774: LD_ADDR_VAR 0 6
44778: PUSH
44779: LD_VAR 0 1
44783: PPUSH
44784: LD_VAR 0 2
44788: PUSH
44789: LD_VAR 0 4
44793: ARRAY
44794: PUSH
44795: LD_INT 1
44797: ARRAY
44798: PPUSH
44799: LD_VAR 0 2
44803: PUSH
44804: LD_VAR 0 4
44808: ARRAY
44809: PUSH
44810: LD_INT 2
44812: ARRAY
44813: PPUSH
44814: CALL_OW 297
44818: ST_TO_ADDR
// if tdist < dist then
44819: LD_VAR 0 6
44823: PUSH
44824: LD_VAR 0 5
44828: LESS
44829: IFFALSE 44857
// begin hex := hexes [ i ] ;
44831: LD_ADDR_VAR 0 8
44835: PUSH
44836: LD_VAR 0 2
44840: PUSH
44841: LD_VAR 0 4
44845: ARRAY
44846: ST_TO_ADDR
// dist := tdist ;
44847: LD_ADDR_VAR 0 5
44851: PUSH
44852: LD_VAR 0 6
44856: ST_TO_ADDR
// end ; end ;
44857: GO 44771
44859: POP
44860: POP
// result := hex ;
44861: LD_ADDR_VAR 0 3
44865: PUSH
44866: LD_VAR 0 8
44870: ST_TO_ADDR
// end ;
44871: LD_VAR 0 3
44875: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
44876: LD_INT 0
44878: PPUSH
44879: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
44880: LD_VAR 0 1
44884: NOT
44885: IFTRUE 44924
44887: PUSH
44888: LD_VAR 0 1
44892: PUSH
44893: LD_INT 21
44895: PUSH
44896: LD_INT 2
44898: PUSH
44899: EMPTY
44900: LIST
44901: LIST
44902: PUSH
44903: LD_INT 23
44905: PUSH
44906: LD_INT 2
44908: PUSH
44909: EMPTY
44910: LIST
44911: LIST
44912: PUSH
44913: EMPTY
44914: LIST
44915: LIST
44916: PPUSH
44917: CALL_OW 69
44921: IN
44922: NOT
44923: OR
44924: IFFALSE 44928
// exit ;
44926: GO 44975
// for i = 1 to 3 do
44928: LD_ADDR_VAR 0 3
44932: PUSH
44933: DOUBLE
44934: LD_INT 1
44936: DEC
44937: ST_TO_ADDR
44938: LD_INT 3
44940: PUSH
44941: FOR_TO
44942: IFFALSE 44973
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
44944: LD_VAR 0 1
44948: PPUSH
44949: CALL_OW 250
44953: PPUSH
44954: LD_VAR 0 1
44958: PPUSH
44959: CALL_OW 251
44963: PPUSH
44964: LD_INT 1
44966: PPUSH
44967: CALL_OW 453
44971: GO 44941
44973: POP
44974: POP
// end ;
44975: LD_VAR 0 2
44979: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
44980: LD_INT 0
44982: PPUSH
44983: PPUSH
44984: PPUSH
44985: PPUSH
44986: PPUSH
44987: PPUSH
// if not unit or not enemy_unit then
44988: LD_VAR 0 1
44992: NOT
44993: IFTRUE 45002
44995: PUSH
44996: LD_VAR 0 2
45000: NOT
45001: OR
45002: IFFALSE 45006
// exit ;
45004: GO 45487
// if GetLives ( i ) < 250 then
45006: LD_VAR 0 4
45010: PPUSH
45011: CALL_OW 256
45015: PUSH
45016: LD_INT 250
45018: LESS
45019: IFFALSE 45032
// begin ComAutodestruct ( i ) ;
45021: LD_VAR 0 4
45025: PPUSH
45026: CALL 44876 0 1
// exit ;
45030: GO 45487
// end ; x := GetX ( enemy_unit ) ;
45032: LD_ADDR_VAR 0 7
45036: PUSH
45037: LD_VAR 0 2
45041: PPUSH
45042: CALL_OW 250
45046: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
45047: LD_ADDR_VAR 0 8
45051: PUSH
45052: LD_VAR 0 2
45056: PPUSH
45057: CALL_OW 251
45061: ST_TO_ADDR
// if not x or not y then
45062: LD_VAR 0 7
45066: NOT
45067: IFTRUE 45076
45069: PUSH
45070: LD_VAR 0 8
45074: NOT
45075: OR
45076: IFFALSE 45080
// exit ;
45078: GO 45487
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
45080: LD_ADDR_VAR 0 6
45084: PUSH
45085: LD_VAR 0 7
45089: PPUSH
45090: LD_INT 0
45092: PPUSH
45093: LD_INT 4
45095: PPUSH
45096: CALL_OW 272
45100: PUSH
45101: LD_VAR 0 8
45105: PPUSH
45106: LD_INT 0
45108: PPUSH
45109: LD_INT 4
45111: PPUSH
45112: CALL_OW 273
45116: PUSH
45117: EMPTY
45118: LIST
45119: LIST
45120: PUSH
45121: LD_VAR 0 7
45125: PPUSH
45126: LD_INT 1
45128: PPUSH
45129: LD_INT 4
45131: PPUSH
45132: CALL_OW 272
45136: PUSH
45137: LD_VAR 0 8
45141: PPUSH
45142: LD_INT 1
45144: PPUSH
45145: LD_INT 4
45147: PPUSH
45148: CALL_OW 273
45152: PUSH
45153: EMPTY
45154: LIST
45155: LIST
45156: PUSH
45157: LD_VAR 0 7
45161: PPUSH
45162: LD_INT 2
45164: PPUSH
45165: LD_INT 4
45167: PPUSH
45168: CALL_OW 272
45172: PUSH
45173: LD_VAR 0 8
45177: PPUSH
45178: LD_INT 2
45180: PPUSH
45181: LD_INT 4
45183: PPUSH
45184: CALL_OW 273
45188: PUSH
45189: EMPTY
45190: LIST
45191: LIST
45192: PUSH
45193: LD_VAR 0 7
45197: PPUSH
45198: LD_INT 3
45200: PPUSH
45201: LD_INT 4
45203: PPUSH
45204: CALL_OW 272
45208: PUSH
45209: LD_VAR 0 8
45213: PPUSH
45214: LD_INT 3
45216: PPUSH
45217: LD_INT 4
45219: PPUSH
45220: CALL_OW 273
45224: PUSH
45225: EMPTY
45226: LIST
45227: LIST
45228: PUSH
45229: LD_VAR 0 7
45233: PPUSH
45234: LD_INT 4
45236: PPUSH
45237: LD_INT 4
45239: PPUSH
45240: CALL_OW 272
45244: PUSH
45245: LD_VAR 0 8
45249: PPUSH
45250: LD_INT 4
45252: PPUSH
45253: LD_INT 4
45255: PPUSH
45256: CALL_OW 273
45260: PUSH
45261: EMPTY
45262: LIST
45263: LIST
45264: PUSH
45265: LD_VAR 0 7
45269: PPUSH
45270: LD_INT 5
45272: PPUSH
45273: LD_INT 4
45275: PPUSH
45276: CALL_OW 272
45280: PUSH
45281: LD_VAR 0 8
45285: PPUSH
45286: LD_INT 5
45288: PPUSH
45289: LD_INT 4
45291: PPUSH
45292: CALL_OW 273
45296: PUSH
45297: EMPTY
45298: LIST
45299: LIST
45300: PUSH
45301: EMPTY
45302: LIST
45303: LIST
45304: LIST
45305: LIST
45306: LIST
45307: LIST
45308: ST_TO_ADDR
// for i = tmp downto 1 do
45309: LD_ADDR_VAR 0 4
45313: PUSH
45314: DOUBLE
45315: LD_VAR 0 6
45319: INC
45320: ST_TO_ADDR
45321: LD_INT 1
45323: PUSH
45324: FOR_DOWNTO
45325: IFFALSE 45428
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
45327: LD_VAR 0 6
45331: PUSH
45332: LD_VAR 0 4
45336: ARRAY
45337: PUSH
45338: LD_INT 1
45340: ARRAY
45341: PPUSH
45342: LD_VAR 0 6
45346: PUSH
45347: LD_VAR 0 4
45351: ARRAY
45352: PUSH
45353: LD_INT 2
45355: ARRAY
45356: PPUSH
45357: CALL_OW 488
45361: NOT
45362: IFTRUE 45404
45364: PUSH
45365: LD_VAR 0 6
45369: PUSH
45370: LD_VAR 0 4
45374: ARRAY
45375: PUSH
45376: LD_INT 1
45378: ARRAY
45379: PPUSH
45380: LD_VAR 0 6
45384: PUSH
45385: LD_VAR 0 4
45389: ARRAY
45390: PUSH
45391: LD_INT 2
45393: ARRAY
45394: PPUSH
45395: CALL_OW 428
45399: PUSH
45400: LD_INT 0
45402: NONEQUAL
45403: OR
45404: IFFALSE 45426
// tmp := Delete ( tmp , i ) ;
45406: LD_ADDR_VAR 0 6
45410: PUSH
45411: LD_VAR 0 6
45415: PPUSH
45416: LD_VAR 0 4
45420: PPUSH
45421: CALL_OW 3
45425: ST_TO_ADDR
45426: GO 45324
45428: POP
45429: POP
// j := GetClosestHex ( unit , tmp ) ;
45430: LD_ADDR_VAR 0 5
45434: PUSH
45435: LD_VAR 0 1
45439: PPUSH
45440: LD_VAR 0 6
45444: PPUSH
45445: CALL 44722 0 2
45449: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
45450: LD_VAR 0 1
45454: PPUSH
45455: LD_VAR 0 5
45459: PUSH
45460: LD_INT 1
45462: ARRAY
45463: PPUSH
45464: LD_VAR 0 5
45468: PUSH
45469: LD_INT 2
45471: ARRAY
45472: PPUSH
45473: CALL_OW 111
// result := j ;
45477: LD_ADDR_VAR 0 3
45481: PUSH
45482: LD_VAR 0 5
45486: ST_TO_ADDR
// end ;
45487: LD_VAR 0 3
45491: RET
// export function PrepareApemanSoldier ( ) ; begin
45492: LD_INT 0
45494: PPUSH
// uc_nation := 0 ;
45495: LD_ADDR_OWVAR 21
45499: PUSH
45500: LD_INT 0
45502: ST_TO_ADDR
// hc_sex := sex_male ;
45503: LD_ADDR_OWVAR 27
45507: PUSH
45508: LD_INT 1
45510: ST_TO_ADDR
// hc_name :=  ;
45511: LD_ADDR_OWVAR 26
45515: PUSH
45516: LD_STRING 
45518: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
45519: LD_ADDR_OWVAR 28
45523: PUSH
45524: LD_INT 15
45526: ST_TO_ADDR
// hc_gallery :=  ;
45527: LD_ADDR_OWVAR 33
45531: PUSH
45532: LD_STRING 
45534: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
45535: LD_ADDR_OWVAR 31
45539: PUSH
45540: LD_INT 0
45542: PPUSH
45543: LD_INT 3
45545: PPUSH
45546: CALL_OW 12
45550: PUSH
45551: LD_INT 0
45553: PPUSH
45554: LD_INT 3
45556: PPUSH
45557: CALL_OW 12
45561: PUSH
45562: LD_INT 0
45564: PUSH
45565: LD_INT 0
45567: PUSH
45568: EMPTY
45569: LIST
45570: LIST
45571: LIST
45572: LIST
45573: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
45574: LD_ADDR_OWVAR 29
45578: PUSH
45579: LD_INT 10
45581: PUSH
45582: LD_INT 12
45584: PUSH
45585: EMPTY
45586: LIST
45587: LIST
45588: ST_TO_ADDR
// end ;
45589: LD_VAR 0 1
45593: RET
// export function PrepareApemanEngineer ( ) ; begin
45594: LD_INT 0
45596: PPUSH
// uc_nation := 0 ;
45597: LD_ADDR_OWVAR 21
45601: PUSH
45602: LD_INT 0
45604: ST_TO_ADDR
// hc_sex := sex_male ;
45605: LD_ADDR_OWVAR 27
45609: PUSH
45610: LD_INT 1
45612: ST_TO_ADDR
// hc_name :=  ;
45613: LD_ADDR_OWVAR 26
45617: PUSH
45618: LD_STRING 
45620: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
45621: LD_ADDR_OWVAR 28
45625: PUSH
45626: LD_INT 16
45628: ST_TO_ADDR
// hc_gallery :=  ;
45629: LD_ADDR_OWVAR 33
45633: PUSH
45634: LD_STRING 
45636: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
45637: LD_ADDR_OWVAR 31
45641: PUSH
45642: LD_INT 0
45644: PPUSH
45645: LD_INT 3
45647: PPUSH
45648: CALL_OW 12
45652: PUSH
45653: LD_INT 0
45655: PPUSH
45656: LD_INT 3
45658: PPUSH
45659: CALL_OW 12
45663: PUSH
45664: LD_INT 0
45666: PUSH
45667: LD_INT 0
45669: PUSH
45670: EMPTY
45671: LIST
45672: LIST
45673: LIST
45674: LIST
45675: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
45676: LD_ADDR_OWVAR 29
45680: PUSH
45681: LD_INT 10
45683: PUSH
45684: LD_INT 12
45686: PUSH
45687: EMPTY
45688: LIST
45689: LIST
45690: ST_TO_ADDR
// end ;
45691: LD_VAR 0 1
45695: RET
// export function PrepareApeman ( agressivity ) ; begin
45696: LD_INT 0
45698: PPUSH
// uc_side := 0 ;
45699: LD_ADDR_OWVAR 20
45703: PUSH
45704: LD_INT 0
45706: ST_TO_ADDR
// uc_nation := 0 ;
45707: LD_ADDR_OWVAR 21
45711: PUSH
45712: LD_INT 0
45714: ST_TO_ADDR
// hc_sex := sex_male ;
45715: LD_ADDR_OWVAR 27
45719: PUSH
45720: LD_INT 1
45722: ST_TO_ADDR
// hc_class := class_apeman ;
45723: LD_ADDR_OWVAR 28
45727: PUSH
45728: LD_INT 12
45730: ST_TO_ADDR
// hc_gallery :=  ;
45731: LD_ADDR_OWVAR 33
45735: PUSH
45736: LD_STRING 
45738: ST_TO_ADDR
// hc_name :=  ;
45739: LD_ADDR_OWVAR 26
45743: PUSH
45744: LD_STRING 
45746: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
45747: LD_ADDR_OWVAR 29
45751: PUSH
45752: LD_INT 10
45754: PUSH
45755: LD_INT 12
45757: PUSH
45758: EMPTY
45759: LIST
45760: LIST
45761: ST_TO_ADDR
// if agressivity = 0 then
45762: LD_VAR 0 1
45766: PUSH
45767: LD_INT 0
45769: EQUAL
45770: IFFALSE 45782
// hc_agressivity := 0 else
45772: LD_ADDR_OWVAR 35
45776: PUSH
45777: LD_INT 0
45779: ST_TO_ADDR
45780: GO 45803
// hc_agressivity := rand ( - agressivity , agressivity ) ;
45782: LD_ADDR_OWVAR 35
45786: PUSH
45787: LD_VAR 0 1
45791: NEG
45792: PPUSH
45793: LD_VAR 0 1
45797: PPUSH
45798: CALL_OW 12
45802: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
45803: LD_ADDR_OWVAR 31
45807: PUSH
45808: LD_INT 0
45810: PPUSH
45811: LD_INT 3
45813: PPUSH
45814: CALL_OW 12
45818: PUSH
45819: LD_INT 0
45821: PPUSH
45822: LD_INT 3
45824: PPUSH
45825: CALL_OW 12
45829: PUSH
45830: LD_INT 0
45832: PUSH
45833: LD_INT 0
45835: PUSH
45836: EMPTY
45837: LIST
45838: LIST
45839: LIST
45840: LIST
45841: ST_TO_ADDR
// end ;
45842: LD_VAR 0 2
45846: RET
// export function PrepareTiger ( agressivity ) ; begin
45847: LD_INT 0
45849: PPUSH
// uc_side := 0 ;
45850: LD_ADDR_OWVAR 20
45854: PUSH
45855: LD_INT 0
45857: ST_TO_ADDR
// uc_nation := 0 ;
45858: LD_ADDR_OWVAR 21
45862: PUSH
45863: LD_INT 0
45865: ST_TO_ADDR
// InitHc ;
45866: CALL_OW 19
// hc_class := class_tiger ;
45870: LD_ADDR_OWVAR 28
45874: PUSH
45875: LD_INT 14
45877: ST_TO_ADDR
// hc_gallery :=  ;
45878: LD_ADDR_OWVAR 33
45882: PUSH
45883: LD_STRING 
45885: ST_TO_ADDR
// hc_name :=  ;
45886: LD_ADDR_OWVAR 26
45890: PUSH
45891: LD_STRING 
45893: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
45894: LD_ADDR_OWVAR 35
45898: PUSH
45899: LD_VAR 0 1
45903: NEG
45904: PPUSH
45905: LD_VAR 0 1
45909: PPUSH
45910: CALL_OW 12
45914: ST_TO_ADDR
// end ;
45915: LD_VAR 0 2
45919: RET
// export function PrepareEnchidna ( ) ; begin
45920: LD_INT 0
45922: PPUSH
// uc_side := 0 ;
45923: LD_ADDR_OWVAR 20
45927: PUSH
45928: LD_INT 0
45930: ST_TO_ADDR
// uc_nation := 0 ;
45931: LD_ADDR_OWVAR 21
45935: PUSH
45936: LD_INT 0
45938: ST_TO_ADDR
// InitHc ;
45939: CALL_OW 19
// hc_class := class_baggie ;
45943: LD_ADDR_OWVAR 28
45947: PUSH
45948: LD_INT 13
45950: ST_TO_ADDR
// hc_gallery :=  ;
45951: LD_ADDR_OWVAR 33
45955: PUSH
45956: LD_STRING 
45958: ST_TO_ADDR
// hc_name :=  ;
45959: LD_ADDR_OWVAR 26
45963: PUSH
45964: LD_STRING 
45966: ST_TO_ADDR
// end ;
45967: LD_VAR 0 1
45971: RET
// export function PrepareFrog ( ) ; begin
45972: LD_INT 0
45974: PPUSH
// uc_side := 0 ;
45975: LD_ADDR_OWVAR 20
45979: PUSH
45980: LD_INT 0
45982: ST_TO_ADDR
// uc_nation := 0 ;
45983: LD_ADDR_OWVAR 21
45987: PUSH
45988: LD_INT 0
45990: ST_TO_ADDR
// InitHc ;
45991: CALL_OW 19
// hc_class := class_frog ;
45995: LD_ADDR_OWVAR 28
45999: PUSH
46000: LD_INT 19
46002: ST_TO_ADDR
// hc_gallery :=  ;
46003: LD_ADDR_OWVAR 33
46007: PUSH
46008: LD_STRING 
46010: ST_TO_ADDR
// hc_name :=  ;
46011: LD_ADDR_OWVAR 26
46015: PUSH
46016: LD_STRING 
46018: ST_TO_ADDR
// end ;
46019: LD_VAR 0 1
46023: RET
// export function PrepareFish ( ) ; begin
46024: LD_INT 0
46026: PPUSH
// uc_side := 0 ;
46027: LD_ADDR_OWVAR 20
46031: PUSH
46032: LD_INT 0
46034: ST_TO_ADDR
// uc_nation := 0 ;
46035: LD_ADDR_OWVAR 21
46039: PUSH
46040: LD_INT 0
46042: ST_TO_ADDR
// InitHc ;
46043: CALL_OW 19
// hc_class := class_fish ;
46047: LD_ADDR_OWVAR 28
46051: PUSH
46052: LD_INT 20
46054: ST_TO_ADDR
// hc_gallery :=  ;
46055: LD_ADDR_OWVAR 33
46059: PUSH
46060: LD_STRING 
46062: ST_TO_ADDR
// hc_name :=  ;
46063: LD_ADDR_OWVAR 26
46067: PUSH
46068: LD_STRING 
46070: ST_TO_ADDR
// end ;
46071: LD_VAR 0 1
46075: RET
// export function PrepareBird ( ) ; begin
46076: LD_INT 0
46078: PPUSH
// uc_side := 0 ;
46079: LD_ADDR_OWVAR 20
46083: PUSH
46084: LD_INT 0
46086: ST_TO_ADDR
// uc_nation := 0 ;
46087: LD_ADDR_OWVAR 21
46091: PUSH
46092: LD_INT 0
46094: ST_TO_ADDR
// InitHc ;
46095: CALL_OW 19
// hc_class := class_phororhacos ;
46099: LD_ADDR_OWVAR 28
46103: PUSH
46104: LD_INT 18
46106: ST_TO_ADDR
// hc_gallery :=  ;
46107: LD_ADDR_OWVAR 33
46111: PUSH
46112: LD_STRING 
46114: ST_TO_ADDR
// hc_name :=  ;
46115: LD_ADDR_OWVAR 26
46119: PUSH
46120: LD_STRING 
46122: ST_TO_ADDR
// end ;
46123: LD_VAR 0 1
46127: RET
// export function PrepareHorse ( ) ; begin
46128: LD_INT 0
46130: PPUSH
// uc_side := 0 ;
46131: LD_ADDR_OWVAR 20
46135: PUSH
46136: LD_INT 0
46138: ST_TO_ADDR
// uc_nation := 0 ;
46139: LD_ADDR_OWVAR 21
46143: PUSH
46144: LD_INT 0
46146: ST_TO_ADDR
// InitHc ;
46147: CALL_OW 19
// hc_class := class_horse ;
46151: LD_ADDR_OWVAR 28
46155: PUSH
46156: LD_INT 21
46158: ST_TO_ADDR
// hc_gallery :=  ;
46159: LD_ADDR_OWVAR 33
46163: PUSH
46164: LD_STRING 
46166: ST_TO_ADDR
// hc_name :=  ;
46167: LD_ADDR_OWVAR 26
46171: PUSH
46172: LD_STRING 
46174: ST_TO_ADDR
// end ;
46175: LD_VAR 0 1
46179: RET
// export function PrepareMastodont ( ) ; begin
46180: LD_INT 0
46182: PPUSH
// uc_side := 0 ;
46183: LD_ADDR_OWVAR 20
46187: PUSH
46188: LD_INT 0
46190: ST_TO_ADDR
// uc_nation := 0 ;
46191: LD_ADDR_OWVAR 21
46195: PUSH
46196: LD_INT 0
46198: ST_TO_ADDR
// vc_chassis := class_mastodont ;
46199: LD_ADDR_OWVAR 37
46203: PUSH
46204: LD_INT 31
46206: ST_TO_ADDR
// vc_control := control_rider ;
46207: LD_ADDR_OWVAR 38
46211: PUSH
46212: LD_INT 4
46214: ST_TO_ADDR
// end ;
46215: LD_VAR 0 1
46219: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
46220: LD_INT 0
46222: PPUSH
46223: PPUSH
46224: PPUSH
// uc_side = 0 ;
46225: LD_ADDR_OWVAR 20
46229: PUSH
46230: LD_INT 0
46232: ST_TO_ADDR
// uc_nation = 0 ;
46233: LD_ADDR_OWVAR 21
46237: PUSH
46238: LD_INT 0
46240: ST_TO_ADDR
// InitHc_All ( ) ;
46241: CALL_OW 584
// InitVc ;
46245: CALL_OW 20
// if mastodonts then
46249: LD_VAR 0 6
46253: IFFALSE 46320
// for i = 1 to mastodonts do
46255: LD_ADDR_VAR 0 11
46259: PUSH
46260: DOUBLE
46261: LD_INT 1
46263: DEC
46264: ST_TO_ADDR
46265: LD_VAR 0 6
46269: PUSH
46270: FOR_TO
46271: IFFALSE 46318
// begin vc_chassis := 31 ;
46273: LD_ADDR_OWVAR 37
46277: PUSH
46278: LD_INT 31
46280: ST_TO_ADDR
// vc_control := control_rider ;
46281: LD_ADDR_OWVAR 38
46285: PUSH
46286: LD_INT 4
46288: ST_TO_ADDR
// animal := CreateVehicle ;
46289: LD_ADDR_VAR 0 12
46293: PUSH
46294: CALL_OW 45
46298: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46299: LD_VAR 0 12
46303: PPUSH
46304: LD_VAR 0 8
46308: PPUSH
46309: LD_INT 0
46311: PPUSH
46312: CALL 48462 0 3
// end ;
46316: GO 46270
46318: POP
46319: POP
// if horses then
46320: LD_VAR 0 5
46324: IFFALSE 46391
// for i = 1 to horses do
46326: LD_ADDR_VAR 0 11
46330: PUSH
46331: DOUBLE
46332: LD_INT 1
46334: DEC
46335: ST_TO_ADDR
46336: LD_VAR 0 5
46340: PUSH
46341: FOR_TO
46342: IFFALSE 46389
// begin hc_class := 21 ;
46344: LD_ADDR_OWVAR 28
46348: PUSH
46349: LD_INT 21
46351: ST_TO_ADDR
// hc_gallery :=  ;
46352: LD_ADDR_OWVAR 33
46356: PUSH
46357: LD_STRING 
46359: ST_TO_ADDR
// animal := CreateHuman ;
46360: LD_ADDR_VAR 0 12
46364: PUSH
46365: CALL_OW 44
46369: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46370: LD_VAR 0 12
46374: PPUSH
46375: LD_VAR 0 8
46379: PPUSH
46380: LD_INT 0
46382: PPUSH
46383: CALL 48462 0 3
// end ;
46387: GO 46341
46389: POP
46390: POP
// if birds then
46391: LD_VAR 0 1
46395: IFFALSE 46462
// for i = 1 to birds do
46397: LD_ADDR_VAR 0 11
46401: PUSH
46402: DOUBLE
46403: LD_INT 1
46405: DEC
46406: ST_TO_ADDR
46407: LD_VAR 0 1
46411: PUSH
46412: FOR_TO
46413: IFFALSE 46460
// begin hc_class := 18 ;
46415: LD_ADDR_OWVAR 28
46419: PUSH
46420: LD_INT 18
46422: ST_TO_ADDR
// hc_gallery =  ;
46423: LD_ADDR_OWVAR 33
46427: PUSH
46428: LD_STRING 
46430: ST_TO_ADDR
// animal := CreateHuman ;
46431: LD_ADDR_VAR 0 12
46435: PUSH
46436: CALL_OW 44
46440: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46441: LD_VAR 0 12
46445: PPUSH
46446: LD_VAR 0 8
46450: PPUSH
46451: LD_INT 0
46453: PPUSH
46454: CALL 48462 0 3
// end ;
46458: GO 46412
46460: POP
46461: POP
// if tigers then
46462: LD_VAR 0 2
46466: IFFALSE 46550
// for i = 1 to tigers do
46468: LD_ADDR_VAR 0 11
46472: PUSH
46473: DOUBLE
46474: LD_INT 1
46476: DEC
46477: ST_TO_ADDR
46478: LD_VAR 0 2
46482: PUSH
46483: FOR_TO
46484: IFFALSE 46548
// begin hc_class = class_tiger ;
46486: LD_ADDR_OWVAR 28
46490: PUSH
46491: LD_INT 14
46493: ST_TO_ADDR
// hc_gallery =  ;
46494: LD_ADDR_OWVAR 33
46498: PUSH
46499: LD_STRING 
46501: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
46502: LD_ADDR_OWVAR 35
46506: PUSH
46507: LD_INT 7
46509: NEG
46510: PPUSH
46511: LD_INT 7
46513: PPUSH
46514: CALL_OW 12
46518: ST_TO_ADDR
// animal := CreateHuman ;
46519: LD_ADDR_VAR 0 12
46523: PUSH
46524: CALL_OW 44
46528: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46529: LD_VAR 0 12
46533: PPUSH
46534: LD_VAR 0 8
46538: PPUSH
46539: LD_INT 0
46541: PPUSH
46542: CALL 48462 0 3
// end ;
46546: GO 46483
46548: POP
46549: POP
// if apemans then
46550: LD_VAR 0 3
46554: IFFALSE 46677
// for i = 1 to apemans do
46556: LD_ADDR_VAR 0 11
46560: PUSH
46561: DOUBLE
46562: LD_INT 1
46564: DEC
46565: ST_TO_ADDR
46566: LD_VAR 0 3
46570: PUSH
46571: FOR_TO
46572: IFFALSE 46675
// begin hc_class = class_apeman ;
46574: LD_ADDR_OWVAR 28
46578: PUSH
46579: LD_INT 12
46581: ST_TO_ADDR
// hc_gallery =  ;
46582: LD_ADDR_OWVAR 33
46586: PUSH
46587: LD_STRING 
46589: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
46590: LD_ADDR_OWVAR 35
46594: PUSH
46595: LD_INT 2
46597: NEG
46598: PPUSH
46599: LD_INT 2
46601: PPUSH
46602: CALL_OW 12
46606: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
46607: LD_ADDR_OWVAR 31
46611: PUSH
46612: LD_INT 1
46614: PPUSH
46615: LD_INT 3
46617: PPUSH
46618: CALL_OW 12
46622: PUSH
46623: LD_INT 1
46625: PPUSH
46626: LD_INT 3
46628: PPUSH
46629: CALL_OW 12
46633: PUSH
46634: LD_INT 0
46636: PUSH
46637: LD_INT 0
46639: PUSH
46640: EMPTY
46641: LIST
46642: LIST
46643: LIST
46644: LIST
46645: ST_TO_ADDR
// animal := CreateHuman ;
46646: LD_ADDR_VAR 0 12
46650: PUSH
46651: CALL_OW 44
46655: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46656: LD_VAR 0 12
46660: PPUSH
46661: LD_VAR 0 8
46665: PPUSH
46666: LD_INT 0
46668: PPUSH
46669: CALL 48462 0 3
// end ;
46673: GO 46571
46675: POP
46676: POP
// if enchidnas then
46677: LD_VAR 0 4
46681: IFFALSE 46748
// for i = 1 to enchidnas do
46683: LD_ADDR_VAR 0 11
46687: PUSH
46688: DOUBLE
46689: LD_INT 1
46691: DEC
46692: ST_TO_ADDR
46693: LD_VAR 0 4
46697: PUSH
46698: FOR_TO
46699: IFFALSE 46746
// begin hc_class = 13 ;
46701: LD_ADDR_OWVAR 28
46705: PUSH
46706: LD_INT 13
46708: ST_TO_ADDR
// hc_gallery =  ;
46709: LD_ADDR_OWVAR 33
46713: PUSH
46714: LD_STRING 
46716: ST_TO_ADDR
// animal := CreateHuman ;
46717: LD_ADDR_VAR 0 12
46721: PUSH
46722: CALL_OW 44
46726: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46727: LD_VAR 0 12
46731: PPUSH
46732: LD_VAR 0 8
46736: PPUSH
46737: LD_INT 0
46739: PPUSH
46740: CALL 48462 0 3
// end ;
46744: GO 46698
46746: POP
46747: POP
// if fishes then
46748: LD_VAR 0 7
46752: IFFALSE 46819
// for i = 1 to fishes do
46754: LD_ADDR_VAR 0 11
46758: PUSH
46759: DOUBLE
46760: LD_INT 1
46762: DEC
46763: ST_TO_ADDR
46764: LD_VAR 0 7
46768: PUSH
46769: FOR_TO
46770: IFFALSE 46817
// begin hc_class = 20 ;
46772: LD_ADDR_OWVAR 28
46776: PUSH
46777: LD_INT 20
46779: ST_TO_ADDR
// hc_gallery =  ;
46780: LD_ADDR_OWVAR 33
46784: PUSH
46785: LD_STRING 
46787: ST_TO_ADDR
// animal := CreateHuman ;
46788: LD_ADDR_VAR 0 12
46792: PUSH
46793: CALL_OW 44
46797: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
46798: LD_VAR 0 12
46802: PPUSH
46803: LD_VAR 0 9
46807: PPUSH
46808: LD_INT 0
46810: PPUSH
46811: CALL 48462 0 3
// end ;
46815: GO 46769
46817: POP
46818: POP
// end ;
46819: LD_VAR 0 10
46823: RET
// export function WantHeal ( sci , unit ) ; begin
46824: LD_INT 0
46826: PPUSH
// if GetTaskList ( sci ) > 0 then
46827: LD_VAR 0 1
46831: PPUSH
46832: CALL_OW 437
46836: PUSH
46837: LD_INT 0
46839: GREATER
46840: IFFALSE 46912
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
46842: LD_VAR 0 1
46846: PPUSH
46847: CALL_OW 437
46851: PUSH
46852: LD_INT 1
46854: ARRAY
46855: PUSH
46856: LD_INT 1
46858: ARRAY
46859: PUSH
46860: LD_STRING l
46862: EQUAL
46863: IFFALSE 46890
46865: PUSH
46866: LD_VAR 0 1
46870: PPUSH
46871: CALL_OW 437
46875: PUSH
46876: LD_INT 1
46878: ARRAY
46879: PUSH
46880: LD_INT 4
46882: ARRAY
46883: PUSH
46884: LD_VAR 0 2
46888: EQUAL
46889: AND
46890: IFFALSE 46902
// result := true else
46892: LD_ADDR_VAR 0 3
46896: PUSH
46897: LD_INT 1
46899: ST_TO_ADDR
46900: GO 46910
// result := false ;
46902: LD_ADDR_VAR 0 3
46906: PUSH
46907: LD_INT 0
46909: ST_TO_ADDR
// end else
46910: GO 46920
// result := false ;
46912: LD_ADDR_VAR 0 3
46916: PUSH
46917: LD_INT 0
46919: ST_TO_ADDR
// end ;
46920: LD_VAR 0 3
46924: RET
// export function HealTarget ( sci ) ; begin
46925: LD_INT 0
46927: PPUSH
// if not sci then
46928: LD_VAR 0 1
46932: NOT
46933: IFFALSE 46937
// exit ;
46935: GO 47002
// result := 0 ;
46937: LD_ADDR_VAR 0 2
46941: PUSH
46942: LD_INT 0
46944: ST_TO_ADDR
// if GetTaskList ( sci ) then
46945: LD_VAR 0 1
46949: PPUSH
46950: CALL_OW 437
46954: IFFALSE 47002
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
46956: LD_VAR 0 1
46960: PPUSH
46961: CALL_OW 437
46965: PUSH
46966: LD_INT 1
46968: ARRAY
46969: PUSH
46970: LD_INT 1
46972: ARRAY
46973: PUSH
46974: LD_STRING l
46976: EQUAL
46977: IFFALSE 47002
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
46979: LD_ADDR_VAR 0 2
46983: PUSH
46984: LD_VAR 0 1
46988: PPUSH
46989: CALL_OW 437
46993: PUSH
46994: LD_INT 1
46996: ARRAY
46997: PUSH
46998: LD_INT 4
47000: ARRAY
47001: ST_TO_ADDR
// end ;
47002: LD_VAR 0 2
47006: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
47007: LD_INT 0
47009: PPUSH
47010: PPUSH
47011: PPUSH
47012: PPUSH
// if not base_units then
47013: LD_VAR 0 1
47017: NOT
47018: IFFALSE 47022
// exit ;
47020: GO 47109
// result := false ;
47022: LD_ADDR_VAR 0 2
47026: PUSH
47027: LD_INT 0
47029: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
47030: LD_ADDR_VAR 0 5
47034: PUSH
47035: LD_VAR 0 1
47039: PPUSH
47040: LD_INT 21
47042: PUSH
47043: LD_INT 3
47045: PUSH
47046: EMPTY
47047: LIST
47048: LIST
47049: PPUSH
47050: CALL_OW 72
47054: ST_TO_ADDR
// if not tmp then
47055: LD_VAR 0 5
47059: NOT
47060: IFFALSE 47064
// exit ;
47062: GO 47109
// for i in tmp do
47064: LD_ADDR_VAR 0 3
47068: PUSH
47069: LD_VAR 0 5
47073: PUSH
47074: FOR_IN
47075: IFFALSE 47107
// begin result := EnemyInRange ( i , 22 ) ;
47077: LD_ADDR_VAR 0 2
47081: PUSH
47082: LD_VAR 0 3
47086: PPUSH
47087: LD_INT 22
47089: PPUSH
47090: CALL 44524 0 2
47094: ST_TO_ADDR
// if result then
47095: LD_VAR 0 2
47099: IFFALSE 47105
// exit ;
47101: POP
47102: POP
47103: GO 47109
// end ;
47105: GO 47074
47107: POP
47108: POP
// end ;
47109: LD_VAR 0 2
47113: RET
// export function FilterByTag ( units , tag ) ; begin
47114: LD_INT 0
47116: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
47117: LD_ADDR_VAR 0 3
47121: PUSH
47122: LD_VAR 0 1
47126: PPUSH
47127: LD_INT 120
47129: PUSH
47130: LD_VAR 0 2
47134: PUSH
47135: EMPTY
47136: LIST
47137: LIST
47138: PPUSH
47139: CALL_OW 72
47143: ST_TO_ADDR
// end ;
47144: LD_VAR 0 3
47148: RET
// export function IsDriver ( un ) ; begin
47149: LD_INT 0
47151: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
47152: LD_ADDR_VAR 0 2
47156: PUSH
47157: LD_VAR 0 1
47161: PUSH
47162: LD_INT 55
47164: PUSH
47165: EMPTY
47166: LIST
47167: PPUSH
47168: CALL_OW 69
47172: IN
47173: ST_TO_ADDR
// end ;
47174: LD_VAR 0 2
47178: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
47179: LD_INT 0
47181: PPUSH
47182: PPUSH
// list := [ ] ;
47183: LD_ADDR_VAR 0 5
47187: PUSH
47188: EMPTY
47189: ST_TO_ADDR
// case d of 0 :
47190: LD_VAR 0 3
47194: PUSH
47195: LD_INT 0
47197: DOUBLE
47198: EQUAL
47199: IFTRUE 47203
47201: GO 47336
47203: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
47204: LD_ADDR_VAR 0 5
47208: PUSH
47209: LD_VAR 0 1
47213: PUSH
47214: LD_INT 4
47216: MINUS
47217: PUSH
47218: LD_VAR 0 2
47222: PUSH
47223: LD_INT 4
47225: MINUS
47226: PUSH
47227: LD_INT 2
47229: PUSH
47230: EMPTY
47231: LIST
47232: LIST
47233: LIST
47234: PUSH
47235: LD_VAR 0 1
47239: PUSH
47240: LD_INT 3
47242: MINUS
47243: PUSH
47244: LD_VAR 0 2
47248: PUSH
47249: LD_INT 1
47251: PUSH
47252: EMPTY
47253: LIST
47254: LIST
47255: LIST
47256: PUSH
47257: LD_VAR 0 1
47261: PUSH
47262: LD_INT 4
47264: PLUS
47265: PUSH
47266: LD_VAR 0 2
47270: PUSH
47271: LD_INT 4
47273: PUSH
47274: EMPTY
47275: LIST
47276: LIST
47277: LIST
47278: PUSH
47279: LD_VAR 0 1
47283: PUSH
47284: LD_INT 3
47286: PLUS
47287: PUSH
47288: LD_VAR 0 2
47292: PUSH
47293: LD_INT 3
47295: PLUS
47296: PUSH
47297: LD_INT 5
47299: PUSH
47300: EMPTY
47301: LIST
47302: LIST
47303: LIST
47304: PUSH
47305: LD_VAR 0 1
47309: PUSH
47310: LD_VAR 0 2
47314: PUSH
47315: LD_INT 4
47317: PLUS
47318: PUSH
47319: LD_INT 0
47321: PUSH
47322: EMPTY
47323: LIST
47324: LIST
47325: LIST
47326: PUSH
47327: EMPTY
47328: LIST
47329: LIST
47330: LIST
47331: LIST
47332: LIST
47333: ST_TO_ADDR
// end ; 1 :
47334: GO 48034
47336: LD_INT 1
47338: DOUBLE
47339: EQUAL
47340: IFTRUE 47344
47342: GO 47477
47344: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
47345: LD_ADDR_VAR 0 5
47349: PUSH
47350: LD_VAR 0 1
47354: PUSH
47355: LD_VAR 0 2
47359: PUSH
47360: LD_INT 4
47362: MINUS
47363: PUSH
47364: LD_INT 3
47366: PUSH
47367: EMPTY
47368: LIST
47369: LIST
47370: LIST
47371: PUSH
47372: LD_VAR 0 1
47376: PUSH
47377: LD_INT 3
47379: MINUS
47380: PUSH
47381: LD_VAR 0 2
47385: PUSH
47386: LD_INT 3
47388: MINUS
47389: PUSH
47390: LD_INT 2
47392: PUSH
47393: EMPTY
47394: LIST
47395: LIST
47396: LIST
47397: PUSH
47398: LD_VAR 0 1
47402: PUSH
47403: LD_INT 4
47405: MINUS
47406: PUSH
47407: LD_VAR 0 2
47411: PUSH
47412: LD_INT 1
47414: PUSH
47415: EMPTY
47416: LIST
47417: LIST
47418: LIST
47419: PUSH
47420: LD_VAR 0 1
47424: PUSH
47425: LD_VAR 0 2
47429: PUSH
47430: LD_INT 3
47432: PLUS
47433: PUSH
47434: LD_INT 0
47436: PUSH
47437: EMPTY
47438: LIST
47439: LIST
47440: LIST
47441: PUSH
47442: LD_VAR 0 1
47446: PUSH
47447: LD_INT 4
47449: PLUS
47450: PUSH
47451: LD_VAR 0 2
47455: PUSH
47456: LD_INT 4
47458: PLUS
47459: PUSH
47460: LD_INT 5
47462: PUSH
47463: EMPTY
47464: LIST
47465: LIST
47466: LIST
47467: PUSH
47468: EMPTY
47469: LIST
47470: LIST
47471: LIST
47472: LIST
47473: LIST
47474: ST_TO_ADDR
// end ; 2 :
47475: GO 48034
47477: LD_INT 2
47479: DOUBLE
47480: EQUAL
47481: IFTRUE 47485
47483: GO 47614
47485: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
47486: LD_ADDR_VAR 0 5
47490: PUSH
47491: LD_VAR 0 1
47495: PUSH
47496: LD_VAR 0 2
47500: PUSH
47501: LD_INT 3
47503: MINUS
47504: PUSH
47505: LD_INT 3
47507: PUSH
47508: EMPTY
47509: LIST
47510: LIST
47511: LIST
47512: PUSH
47513: LD_VAR 0 1
47517: PUSH
47518: LD_INT 4
47520: PLUS
47521: PUSH
47522: LD_VAR 0 2
47526: PUSH
47527: LD_INT 4
47529: PUSH
47530: EMPTY
47531: LIST
47532: LIST
47533: LIST
47534: PUSH
47535: LD_VAR 0 1
47539: PUSH
47540: LD_VAR 0 2
47544: PUSH
47545: LD_INT 4
47547: PLUS
47548: PUSH
47549: LD_INT 0
47551: PUSH
47552: EMPTY
47553: LIST
47554: LIST
47555: LIST
47556: PUSH
47557: LD_VAR 0 1
47561: PUSH
47562: LD_INT 3
47564: MINUS
47565: PUSH
47566: LD_VAR 0 2
47570: PUSH
47571: LD_INT 1
47573: PUSH
47574: EMPTY
47575: LIST
47576: LIST
47577: LIST
47578: PUSH
47579: LD_VAR 0 1
47583: PUSH
47584: LD_INT 4
47586: MINUS
47587: PUSH
47588: LD_VAR 0 2
47592: PUSH
47593: LD_INT 4
47595: MINUS
47596: PUSH
47597: LD_INT 2
47599: PUSH
47600: EMPTY
47601: LIST
47602: LIST
47603: LIST
47604: PUSH
47605: EMPTY
47606: LIST
47607: LIST
47608: LIST
47609: LIST
47610: LIST
47611: ST_TO_ADDR
// end ; 3 :
47612: GO 48034
47614: LD_INT 3
47616: DOUBLE
47617: EQUAL
47618: IFTRUE 47622
47620: GO 47755
47622: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
47623: LD_ADDR_VAR 0 5
47627: PUSH
47628: LD_VAR 0 1
47632: PUSH
47633: LD_INT 3
47635: PLUS
47636: PUSH
47637: LD_VAR 0 2
47641: PUSH
47642: LD_INT 4
47644: PUSH
47645: EMPTY
47646: LIST
47647: LIST
47648: LIST
47649: PUSH
47650: LD_VAR 0 1
47654: PUSH
47655: LD_INT 4
47657: PLUS
47658: PUSH
47659: LD_VAR 0 2
47663: PUSH
47664: LD_INT 4
47666: PLUS
47667: PUSH
47668: LD_INT 5
47670: PUSH
47671: EMPTY
47672: LIST
47673: LIST
47674: LIST
47675: PUSH
47676: LD_VAR 0 1
47680: PUSH
47681: LD_INT 4
47683: MINUS
47684: PUSH
47685: LD_VAR 0 2
47689: PUSH
47690: LD_INT 1
47692: PUSH
47693: EMPTY
47694: LIST
47695: LIST
47696: LIST
47697: PUSH
47698: LD_VAR 0 1
47702: PUSH
47703: LD_VAR 0 2
47707: PUSH
47708: LD_INT 4
47710: MINUS
47711: PUSH
47712: LD_INT 3
47714: PUSH
47715: EMPTY
47716: LIST
47717: LIST
47718: LIST
47719: PUSH
47720: LD_VAR 0 1
47724: PUSH
47725: LD_INT 3
47727: MINUS
47728: PUSH
47729: LD_VAR 0 2
47733: PUSH
47734: LD_INT 3
47736: MINUS
47737: PUSH
47738: LD_INT 2
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: LIST
47745: PUSH
47746: EMPTY
47747: LIST
47748: LIST
47749: LIST
47750: LIST
47751: LIST
47752: ST_TO_ADDR
// end ; 4 :
47753: GO 48034
47755: LD_INT 4
47757: DOUBLE
47758: EQUAL
47759: IFTRUE 47763
47761: GO 47896
47763: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
47764: LD_ADDR_VAR 0 5
47768: PUSH
47769: LD_VAR 0 1
47773: PUSH
47774: LD_VAR 0 2
47778: PUSH
47779: LD_INT 4
47781: PLUS
47782: PUSH
47783: LD_INT 0
47785: PUSH
47786: EMPTY
47787: LIST
47788: LIST
47789: LIST
47790: PUSH
47791: LD_VAR 0 1
47795: PUSH
47796: LD_INT 3
47798: PLUS
47799: PUSH
47800: LD_VAR 0 2
47804: PUSH
47805: LD_INT 3
47807: PLUS
47808: PUSH
47809: LD_INT 5
47811: PUSH
47812: EMPTY
47813: LIST
47814: LIST
47815: LIST
47816: PUSH
47817: LD_VAR 0 1
47821: PUSH
47822: LD_INT 4
47824: PLUS
47825: PUSH
47826: LD_VAR 0 2
47830: PUSH
47831: LD_INT 4
47833: PUSH
47834: EMPTY
47835: LIST
47836: LIST
47837: LIST
47838: PUSH
47839: LD_VAR 0 1
47843: PUSH
47844: LD_VAR 0 2
47848: PUSH
47849: LD_INT 3
47851: MINUS
47852: PUSH
47853: LD_INT 3
47855: PUSH
47856: EMPTY
47857: LIST
47858: LIST
47859: LIST
47860: PUSH
47861: LD_VAR 0 1
47865: PUSH
47866: LD_INT 4
47868: MINUS
47869: PUSH
47870: LD_VAR 0 2
47874: PUSH
47875: LD_INT 4
47877: MINUS
47878: PUSH
47879: LD_INT 2
47881: PUSH
47882: EMPTY
47883: LIST
47884: LIST
47885: LIST
47886: PUSH
47887: EMPTY
47888: LIST
47889: LIST
47890: LIST
47891: LIST
47892: LIST
47893: ST_TO_ADDR
// end ; 5 :
47894: GO 48034
47896: LD_INT 5
47898: DOUBLE
47899: EQUAL
47900: IFTRUE 47904
47902: GO 48033
47904: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
47905: LD_ADDR_VAR 0 5
47909: PUSH
47910: LD_VAR 0 1
47914: PUSH
47915: LD_INT 4
47917: MINUS
47918: PUSH
47919: LD_VAR 0 2
47923: PUSH
47924: LD_INT 1
47926: PUSH
47927: EMPTY
47928: LIST
47929: LIST
47930: LIST
47931: PUSH
47932: LD_VAR 0 1
47936: PUSH
47937: LD_VAR 0 2
47941: PUSH
47942: LD_INT 4
47944: MINUS
47945: PUSH
47946: LD_INT 3
47948: PUSH
47949: EMPTY
47950: LIST
47951: LIST
47952: LIST
47953: PUSH
47954: LD_VAR 0 1
47958: PUSH
47959: LD_INT 4
47961: PLUS
47962: PUSH
47963: LD_VAR 0 2
47967: PUSH
47968: LD_INT 4
47970: PLUS
47971: PUSH
47972: LD_INT 5
47974: PUSH
47975: EMPTY
47976: LIST
47977: LIST
47978: LIST
47979: PUSH
47980: LD_VAR 0 1
47984: PUSH
47985: LD_INT 3
47987: PLUS
47988: PUSH
47989: LD_VAR 0 2
47993: PUSH
47994: LD_INT 4
47996: PUSH
47997: EMPTY
47998: LIST
47999: LIST
48000: LIST
48001: PUSH
48002: LD_VAR 0 1
48006: PUSH
48007: LD_VAR 0 2
48011: PUSH
48012: LD_INT 3
48014: PLUS
48015: PUSH
48016: LD_INT 0
48018: PUSH
48019: EMPTY
48020: LIST
48021: LIST
48022: LIST
48023: PUSH
48024: EMPTY
48025: LIST
48026: LIST
48027: LIST
48028: LIST
48029: LIST
48030: ST_TO_ADDR
// end ; end ;
48031: GO 48034
48033: POP
// result := list ;
48034: LD_ADDR_VAR 0 4
48038: PUSH
48039: LD_VAR 0 5
48043: ST_TO_ADDR
// end ;
48044: LD_VAR 0 4
48048: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
48049: LD_INT 0
48051: PPUSH
48052: PPUSH
48053: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
48054: LD_VAR 0 1
48058: NOT
48059: IFTRUE 48087
48061: PUSH
48062: LD_VAR 0 2
48066: PUSH
48067: LD_INT 1
48069: PUSH
48070: LD_INT 2
48072: PUSH
48073: LD_INT 3
48075: PUSH
48076: LD_INT 4
48078: PUSH
48079: EMPTY
48080: LIST
48081: LIST
48082: LIST
48083: LIST
48084: IN
48085: NOT
48086: OR
48087: IFFALSE 48091
// exit ;
48089: GO 48174
// tmp := [ ] ;
48091: LD_ADDR_VAR 0 5
48095: PUSH
48096: EMPTY
48097: ST_TO_ADDR
// for i in units do
48098: LD_ADDR_VAR 0 4
48102: PUSH
48103: LD_VAR 0 1
48107: PUSH
48108: FOR_IN
48109: IFFALSE 48143
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
48111: LD_ADDR_VAR 0 5
48115: PUSH
48116: LD_VAR 0 5
48120: PPUSH
48121: LD_VAR 0 4
48125: PPUSH
48126: LD_VAR 0 2
48130: PPUSH
48131: CALL_OW 259
48135: PPUSH
48136: CALL 49569 0 2
48140: ST_TO_ADDR
48141: GO 48108
48143: POP
48144: POP
// if not tmp then
48145: LD_VAR 0 5
48149: NOT
48150: IFFALSE 48154
// exit ;
48152: GO 48174
// result := SortListByListDesc ( units , tmp ) ;
48154: LD_ADDR_VAR 0 3
48158: PUSH
48159: LD_VAR 0 1
48163: PPUSH
48164: LD_VAR 0 5
48168: PPUSH
48169: CALL_OW 77
48173: ST_TO_ADDR
// end ;
48174: LD_VAR 0 3
48178: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
48179: LD_INT 0
48181: PPUSH
48182: PPUSH
48183: PPUSH
// result := false ;
48184: LD_ADDR_VAR 0 3
48188: PUSH
48189: LD_INT 0
48191: ST_TO_ADDR
// if not building then
48192: LD_VAR 0 2
48196: NOT
48197: IFFALSE 48201
// exit ;
48199: GO 48345
// x := GetX ( building ) ;
48201: LD_ADDR_VAR 0 4
48205: PUSH
48206: LD_VAR 0 2
48210: PPUSH
48211: CALL_OW 250
48215: ST_TO_ADDR
// y := GetY ( building ) ;
48216: LD_ADDR_VAR 0 5
48220: PUSH
48221: LD_VAR 0 2
48225: PPUSH
48226: CALL_OW 251
48230: ST_TO_ADDR
// if not x or not y then
48231: LD_VAR 0 4
48235: NOT
48236: IFTRUE 48245
48238: PUSH
48239: LD_VAR 0 5
48243: NOT
48244: OR
48245: IFFALSE 48249
// exit ;
48247: GO 48345
// if GetTaskList ( unit ) then
48249: LD_VAR 0 1
48253: PPUSH
48254: CALL_OW 437
48258: IFFALSE 48345
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
48260: LD_STRING e
48262: PUSH
48263: LD_VAR 0 1
48267: PPUSH
48268: CALL_OW 437
48272: PUSH
48273: LD_INT 1
48275: ARRAY
48276: PUSH
48277: LD_INT 1
48279: ARRAY
48280: EQUAL
48281: IFFALSE 48308
48283: PUSH
48284: LD_VAR 0 4
48288: PUSH
48289: LD_VAR 0 1
48293: PPUSH
48294: CALL_OW 437
48298: PUSH
48299: LD_INT 1
48301: ARRAY
48302: PUSH
48303: LD_INT 2
48305: ARRAY
48306: EQUAL
48307: AND
48308: IFFALSE 48335
48310: PUSH
48311: LD_VAR 0 5
48315: PUSH
48316: LD_VAR 0 1
48320: PPUSH
48321: CALL_OW 437
48325: PUSH
48326: LD_INT 1
48328: ARRAY
48329: PUSH
48330: LD_INT 3
48332: ARRAY
48333: EQUAL
48334: AND
48335: IFFALSE 48345
// result := true end ;
48337: LD_ADDR_VAR 0 3
48341: PUSH
48342: LD_INT 1
48344: ST_TO_ADDR
// end ;
48345: LD_VAR 0 3
48349: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
48350: LD_INT 0
48352: PPUSH
// result := false ;
48353: LD_ADDR_VAR 0 4
48357: PUSH
48358: LD_INT 0
48360: ST_TO_ADDR
// if GetTaskList ( unit ) then
48361: LD_VAR 0 1
48365: PPUSH
48366: CALL_OW 437
48370: IFFALSE 48457
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
48372: LD_STRING M
48374: PUSH
48375: LD_VAR 0 1
48379: PPUSH
48380: CALL_OW 437
48384: PUSH
48385: LD_INT 1
48387: ARRAY
48388: PUSH
48389: LD_INT 1
48391: ARRAY
48392: EQUAL
48393: IFFALSE 48420
48395: PUSH
48396: LD_VAR 0 2
48400: PUSH
48401: LD_VAR 0 1
48405: PPUSH
48406: CALL_OW 437
48410: PUSH
48411: LD_INT 1
48413: ARRAY
48414: PUSH
48415: LD_INT 2
48417: ARRAY
48418: EQUAL
48419: AND
48420: IFFALSE 48447
48422: PUSH
48423: LD_VAR 0 3
48427: PUSH
48428: LD_VAR 0 1
48432: PPUSH
48433: CALL_OW 437
48437: PUSH
48438: LD_INT 1
48440: ARRAY
48441: PUSH
48442: LD_INT 3
48444: ARRAY
48445: EQUAL
48446: AND
48447: IFFALSE 48457
// result := true ;
48449: LD_ADDR_VAR 0 4
48453: PUSH
48454: LD_INT 1
48456: ST_TO_ADDR
// end ; end ;
48457: LD_VAR 0 4
48461: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
48462: LD_INT 0
48464: PPUSH
48465: PPUSH
48466: PPUSH
48467: PPUSH
// if not unit or not area then
48468: LD_VAR 0 1
48472: NOT
48473: IFTRUE 48482
48475: PUSH
48476: LD_VAR 0 2
48480: NOT
48481: OR
48482: IFFALSE 48486
// exit ;
48484: GO 48662
// tmp := AreaToList ( area , i ) ;
48486: LD_ADDR_VAR 0 6
48490: PUSH
48491: LD_VAR 0 2
48495: PPUSH
48496: LD_VAR 0 5
48500: PPUSH
48501: CALL_OW 517
48505: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
48506: LD_ADDR_VAR 0 5
48510: PUSH
48511: DOUBLE
48512: LD_INT 1
48514: DEC
48515: ST_TO_ADDR
48516: LD_VAR 0 6
48520: PUSH
48521: LD_INT 1
48523: ARRAY
48524: PUSH
48525: FOR_TO
48526: IFFALSE 48660
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
48528: LD_ADDR_VAR 0 7
48532: PUSH
48533: LD_VAR 0 6
48537: PUSH
48538: LD_INT 1
48540: ARRAY
48541: PUSH
48542: LD_VAR 0 5
48546: ARRAY
48547: PUSH
48548: LD_VAR 0 6
48552: PUSH
48553: LD_INT 2
48555: ARRAY
48556: PUSH
48557: LD_VAR 0 5
48561: ARRAY
48562: PUSH
48563: EMPTY
48564: LIST
48565: LIST
48566: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
48567: LD_INT 92
48569: PUSH
48570: LD_VAR 0 7
48574: PUSH
48575: LD_INT 1
48577: ARRAY
48578: PUSH
48579: LD_VAR 0 7
48583: PUSH
48584: LD_INT 2
48586: ARRAY
48587: PUSH
48588: LD_INT 2
48590: PUSH
48591: EMPTY
48592: LIST
48593: LIST
48594: LIST
48595: LIST
48596: PPUSH
48597: CALL_OW 69
48601: PUSH
48602: LD_INT 0
48604: EQUAL
48605: IFFALSE 48658
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
48607: LD_VAR 0 1
48611: PPUSH
48612: LD_VAR 0 7
48616: PUSH
48617: LD_INT 1
48619: ARRAY
48620: PPUSH
48621: LD_VAR 0 7
48625: PUSH
48626: LD_INT 2
48628: ARRAY
48629: PPUSH
48630: LD_VAR 0 3
48634: PPUSH
48635: CALL_OW 48
// result := IsPlaced ( unit ) ;
48639: LD_ADDR_VAR 0 4
48643: PUSH
48644: LD_VAR 0 1
48648: PPUSH
48649: CALL_OW 305
48653: ST_TO_ADDR
// exit ;
48654: POP
48655: POP
48656: GO 48662
// end ; end ;
48658: GO 48525
48660: POP
48661: POP
// end ;
48662: LD_VAR 0 4
48666: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
48667: LD_INT 0
48669: PPUSH
48670: PPUSH
48671: PPUSH
// if not side or side > 8 then
48672: LD_VAR 0 1
48676: NOT
48677: IFTRUE 48689
48679: PUSH
48680: LD_VAR 0 1
48684: PUSH
48685: LD_INT 8
48687: GREATER
48688: OR
48689: IFFALSE 48693
// exit ;
48691: GO 48880
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
48693: LD_ADDR_VAR 0 4
48697: PUSH
48698: LD_INT 22
48700: PUSH
48701: LD_VAR 0 1
48705: PUSH
48706: EMPTY
48707: LIST
48708: LIST
48709: PUSH
48710: LD_INT 21
48712: PUSH
48713: LD_INT 3
48715: PUSH
48716: EMPTY
48717: LIST
48718: LIST
48719: PUSH
48720: EMPTY
48721: LIST
48722: LIST
48723: PPUSH
48724: CALL_OW 69
48728: ST_TO_ADDR
// if not tmp then
48729: LD_VAR 0 4
48733: NOT
48734: IFFALSE 48738
// exit ;
48736: GO 48880
// enable_addtolog := true ;
48738: LD_ADDR_OWVAR 81
48742: PUSH
48743: LD_INT 1
48745: ST_TO_ADDR
// AddToLog ( [ ) ;
48746: LD_STRING [
48748: PPUSH
48749: CALL_OW 561
// for i in tmp do
48753: LD_ADDR_VAR 0 3
48757: PUSH
48758: LD_VAR 0 4
48762: PUSH
48763: FOR_IN
48764: IFFALSE 48871
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
48766: LD_STRING [
48768: PUSH
48769: LD_VAR 0 3
48773: PPUSH
48774: CALL_OW 266
48778: STR
48779: PUSH
48780: LD_STRING , 
48782: STR
48783: PUSH
48784: LD_VAR 0 3
48788: PPUSH
48789: CALL_OW 250
48793: STR
48794: PUSH
48795: LD_STRING , 
48797: STR
48798: PUSH
48799: LD_VAR 0 3
48803: PPUSH
48804: CALL_OW 251
48808: STR
48809: PUSH
48810: LD_STRING , 
48812: STR
48813: PUSH
48814: LD_VAR 0 3
48818: PPUSH
48819: CALL_OW 254
48823: STR
48824: PUSH
48825: LD_STRING , 
48827: STR
48828: PUSH
48829: LD_VAR 0 3
48833: PPUSH
48834: LD_INT 1
48836: PPUSH
48837: CALL_OW 268
48841: STR
48842: PUSH
48843: LD_STRING , 
48845: STR
48846: PUSH
48847: LD_VAR 0 3
48851: PPUSH
48852: LD_INT 2
48854: PPUSH
48855: CALL_OW 268
48859: STR
48860: PUSH
48861: LD_STRING ],
48863: STR
48864: PPUSH
48865: CALL_OW 561
// end ;
48869: GO 48763
48871: POP
48872: POP
// AddToLog ( ]; ) ;
48873: LD_STRING ];
48875: PPUSH
48876: CALL_OW 561
// end ;
48880: LD_VAR 0 2
48884: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
48885: LD_INT 0
48887: PPUSH
48888: PPUSH
48889: PPUSH
48890: PPUSH
48891: PPUSH
// if not area or not rate or not max then
48892: LD_VAR 0 1
48896: NOT
48897: IFTRUE 48906
48899: PUSH
48900: LD_VAR 0 2
48904: NOT
48905: OR
48906: IFTRUE 48915
48908: PUSH
48909: LD_VAR 0 4
48913: NOT
48914: OR
48915: IFFALSE 48919
// exit ;
48917: GO 49108
// while 1 do
48919: LD_INT 1
48921: IFFALSE 49108
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
48923: LD_ADDR_VAR 0 9
48927: PUSH
48928: LD_VAR 0 1
48932: PPUSH
48933: LD_INT 1
48935: PPUSH
48936: CALL_OW 287
48940: PUSH
48941: LD_INT 10
48943: MUL
48944: ST_TO_ADDR
// r := rate / 10 ;
48945: LD_ADDR_VAR 0 7
48949: PUSH
48950: LD_VAR 0 2
48954: PUSH
48955: LD_INT 10
48957: DIVREAL
48958: ST_TO_ADDR
// time := 1 1$00 ;
48959: LD_ADDR_VAR 0 8
48963: PUSH
48964: LD_INT 2100
48966: ST_TO_ADDR
// if amount < min then
48967: LD_VAR 0 9
48971: PUSH
48972: LD_VAR 0 3
48976: LESS
48977: IFFALSE 48995
// r := r * 2 else
48979: LD_ADDR_VAR 0 7
48983: PUSH
48984: LD_VAR 0 7
48988: PUSH
48989: LD_INT 2
48991: MUL
48992: ST_TO_ADDR
48993: GO 49021
// if amount > max then
48995: LD_VAR 0 9
48999: PUSH
49000: LD_VAR 0 4
49004: GREATER
49005: IFFALSE 49021
// r := r / 2 ;
49007: LD_ADDR_VAR 0 7
49011: PUSH
49012: LD_VAR 0 7
49016: PUSH
49017: LD_INT 2
49019: DIVREAL
49020: ST_TO_ADDR
// time := time / r ;
49021: LD_ADDR_VAR 0 8
49025: PUSH
49026: LD_VAR 0 8
49030: PUSH
49031: LD_VAR 0 7
49035: DIVREAL
49036: ST_TO_ADDR
// if time < 0 then
49037: LD_VAR 0 8
49041: PUSH
49042: LD_INT 0
49044: LESS
49045: IFFALSE 49062
// time := time * - 1 ;
49047: LD_ADDR_VAR 0 8
49051: PUSH
49052: LD_VAR 0 8
49056: PUSH
49057: LD_INT 1
49059: NEG
49060: MUL
49061: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
49062: LD_VAR 0 8
49066: PUSH
49067: LD_INT 35
49069: PPUSH
49070: LD_INT 875
49072: PPUSH
49073: CALL_OW 12
49077: PLUS
49078: PPUSH
49079: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
49083: LD_INT 1
49085: PPUSH
49086: LD_INT 5
49088: PPUSH
49089: CALL_OW 12
49093: PPUSH
49094: LD_VAR 0 1
49098: PPUSH
49099: LD_INT 1
49101: PPUSH
49102: CALL_OW 55
// end ;
49106: GO 48919
// end ;
49108: LD_VAR 0 5
49112: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
49113: LD_INT 0
49115: PPUSH
49116: PPUSH
49117: PPUSH
49118: PPUSH
49119: PPUSH
49120: PPUSH
49121: PPUSH
49122: PPUSH
// if not turrets or not factories then
49123: LD_VAR 0 1
49127: NOT
49128: IFTRUE 49137
49130: PUSH
49131: LD_VAR 0 2
49135: NOT
49136: OR
49137: IFFALSE 49141
// exit ;
49139: GO 49448
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
49141: LD_ADDR_VAR 0 10
49145: PUSH
49146: LD_INT 5
49148: PUSH
49149: LD_INT 6
49151: PUSH
49152: EMPTY
49153: LIST
49154: LIST
49155: PUSH
49156: LD_INT 2
49158: PUSH
49159: LD_INT 4
49161: PUSH
49162: EMPTY
49163: LIST
49164: LIST
49165: PUSH
49166: LD_INT 3
49168: PUSH
49169: LD_INT 5
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: EMPTY
49177: LIST
49178: LIST
49179: LIST
49180: PUSH
49181: LD_INT 24
49183: PUSH
49184: LD_INT 25
49186: PUSH
49187: EMPTY
49188: LIST
49189: LIST
49190: PUSH
49191: LD_INT 23
49193: PUSH
49194: LD_INT 27
49196: PUSH
49197: EMPTY
49198: LIST
49199: LIST
49200: PUSH
49201: EMPTY
49202: LIST
49203: LIST
49204: PUSH
49205: LD_INT 42
49207: PUSH
49208: LD_INT 43
49210: PUSH
49211: EMPTY
49212: LIST
49213: LIST
49214: PUSH
49215: LD_INT 44
49217: PUSH
49218: LD_INT 46
49220: PUSH
49221: EMPTY
49222: LIST
49223: LIST
49224: PUSH
49225: LD_INT 45
49227: PUSH
49228: LD_INT 47
49230: PUSH
49231: EMPTY
49232: LIST
49233: LIST
49234: PUSH
49235: EMPTY
49236: LIST
49237: LIST
49238: LIST
49239: PUSH
49240: EMPTY
49241: LIST
49242: LIST
49243: LIST
49244: ST_TO_ADDR
// result := [ ] ;
49245: LD_ADDR_VAR 0 3
49249: PUSH
49250: EMPTY
49251: ST_TO_ADDR
// for i in turrets do
49252: LD_ADDR_VAR 0 4
49256: PUSH
49257: LD_VAR 0 1
49261: PUSH
49262: FOR_IN
49263: IFFALSE 49446
// begin nat := GetNation ( i ) ;
49265: LD_ADDR_VAR 0 7
49269: PUSH
49270: LD_VAR 0 4
49274: PPUSH
49275: CALL_OW 248
49279: ST_TO_ADDR
// weapon := 0 ;
49280: LD_ADDR_VAR 0 8
49284: PUSH
49285: LD_INT 0
49287: ST_TO_ADDR
// if not nat then
49288: LD_VAR 0 7
49292: NOT
49293: IFFALSE 49297
// continue ;
49295: GO 49262
// for j in list [ nat ] do
49297: LD_ADDR_VAR 0 5
49301: PUSH
49302: LD_VAR 0 10
49306: PUSH
49307: LD_VAR 0 7
49311: ARRAY
49312: PUSH
49313: FOR_IN
49314: IFFALSE 49355
// if GetBWeapon ( i ) = j [ 1 ] then
49316: LD_VAR 0 4
49320: PPUSH
49321: CALL_OW 269
49325: PUSH
49326: LD_VAR 0 5
49330: PUSH
49331: LD_INT 1
49333: ARRAY
49334: EQUAL
49335: IFFALSE 49353
// begin weapon := j [ 2 ] ;
49337: LD_ADDR_VAR 0 8
49341: PUSH
49342: LD_VAR 0 5
49346: PUSH
49347: LD_INT 2
49349: ARRAY
49350: ST_TO_ADDR
// break ;
49351: GO 49355
// end ;
49353: GO 49313
49355: POP
49356: POP
// if not weapon then
49357: LD_VAR 0 8
49361: NOT
49362: IFFALSE 49366
// continue ;
49364: GO 49262
// for k in factories do
49366: LD_ADDR_VAR 0 6
49370: PUSH
49371: LD_VAR 0 2
49375: PUSH
49376: FOR_IN
49377: IFFALSE 49442
// begin weapons := AvailableWeaponList ( k ) ;
49379: LD_ADDR_VAR 0 9
49383: PUSH
49384: LD_VAR 0 6
49388: PPUSH
49389: CALL_OW 478
49393: ST_TO_ADDR
// if not weapons then
49394: LD_VAR 0 9
49398: NOT
49399: IFFALSE 49403
// continue ;
49401: GO 49376
// if weapon in weapons then
49403: LD_VAR 0 8
49407: PUSH
49408: LD_VAR 0 9
49412: IN
49413: IFFALSE 49440
// begin result := [ i , weapon ] ;
49415: LD_ADDR_VAR 0 3
49419: PUSH
49420: LD_VAR 0 4
49424: PUSH
49425: LD_VAR 0 8
49429: PUSH
49430: EMPTY
49431: LIST
49432: LIST
49433: ST_TO_ADDR
// exit ;
49434: POP
49435: POP
49436: POP
49437: POP
49438: GO 49448
// end ; end ;
49440: GO 49376
49442: POP
49443: POP
// end ;
49444: GO 49262
49446: POP
49447: POP
// end ;
49448: LD_VAR 0 3
49452: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
49453: LD_INT 0
49455: PPUSH
// if not side or side > 8 then
49456: LD_VAR 0 3
49460: NOT
49461: IFTRUE 49473
49463: PUSH
49464: LD_VAR 0 3
49468: PUSH
49469: LD_INT 8
49471: GREATER
49472: OR
49473: IFFALSE 49477
// exit ;
49475: GO 49536
// if not range then
49477: LD_VAR 0 4
49481: NOT
49482: IFFALSE 49493
// range := - 12 ;
49484: LD_ADDR_VAR 0 4
49488: PUSH
49489: LD_INT 12
49491: NEG
49492: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
49493: LD_VAR 0 1
49497: PPUSH
49498: LD_VAR 0 2
49502: PPUSH
49503: LD_VAR 0 3
49507: PPUSH
49508: LD_VAR 0 4
49512: PPUSH
49513: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
49517: LD_VAR 0 1
49521: PPUSH
49522: LD_VAR 0 2
49526: PPUSH
49527: LD_VAR 0 3
49531: PPUSH
49532: CALL_OW 331
// end ;
49536: LD_VAR 0 5
49540: RET
// export function Video ( mode ) ; begin
49541: LD_INT 0
49543: PPUSH
// ingame_video = mode ;
49544: LD_ADDR_OWVAR 52
49548: PUSH
49549: LD_VAR 0 1
49553: ST_TO_ADDR
// interface_hidden = mode ;
49554: LD_ADDR_OWVAR 54
49558: PUSH
49559: LD_VAR 0 1
49563: ST_TO_ADDR
// end ;
49564: LD_VAR 0 2
49568: RET
// export function Join ( array , element ) ; begin
49569: LD_INT 0
49571: PPUSH
// result := Replace ( array , array + 1 , element ) ;
49572: LD_ADDR_VAR 0 3
49576: PUSH
49577: LD_VAR 0 1
49581: PPUSH
49582: LD_VAR 0 1
49586: PUSH
49587: LD_INT 1
49589: PLUS
49590: PPUSH
49591: LD_VAR 0 2
49595: PPUSH
49596: CALL_OW 1
49600: ST_TO_ADDR
// end ;
49601: LD_VAR 0 3
49605: RET
// export function JoinUnion ( array , element ) ; begin
49606: LD_INT 0
49608: PPUSH
// result := array union element ;
49609: LD_ADDR_VAR 0 3
49613: PUSH
49614: LD_VAR 0 1
49618: PUSH
49619: LD_VAR 0 2
49623: UNION
49624: ST_TO_ADDR
// end ;
49625: LD_VAR 0 3
49629: RET
// export function GetBehemoths ( side ) ; begin
49630: LD_INT 0
49632: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
49633: LD_ADDR_VAR 0 2
49637: PUSH
49638: LD_INT 22
49640: PUSH
49641: LD_VAR 0 1
49645: PUSH
49646: EMPTY
49647: LIST
49648: LIST
49649: PUSH
49650: LD_INT 31
49652: PUSH
49653: LD_INT 25
49655: PUSH
49656: EMPTY
49657: LIST
49658: LIST
49659: PUSH
49660: EMPTY
49661: LIST
49662: LIST
49663: PPUSH
49664: CALL_OW 69
49668: ST_TO_ADDR
// end ;
49669: LD_VAR 0 2
49673: RET
// export function Shuffle ( array ) ; var i , index ; begin
49674: LD_INT 0
49676: PPUSH
49677: PPUSH
49678: PPUSH
// result := [ ] ;
49679: LD_ADDR_VAR 0 2
49683: PUSH
49684: EMPTY
49685: ST_TO_ADDR
// if not array then
49686: LD_VAR 0 1
49690: NOT
49691: IFFALSE 49695
// exit ;
49693: GO 49794
// Randomize ;
49695: CALL_OW 10
// for i = array downto 1 do
49699: LD_ADDR_VAR 0 3
49703: PUSH
49704: DOUBLE
49705: LD_VAR 0 1
49709: INC
49710: ST_TO_ADDR
49711: LD_INT 1
49713: PUSH
49714: FOR_DOWNTO
49715: IFFALSE 49792
// begin index := rand ( 1 , array ) ;
49717: LD_ADDR_VAR 0 4
49721: PUSH
49722: LD_INT 1
49724: PPUSH
49725: LD_VAR 0 1
49729: PPUSH
49730: CALL_OW 12
49734: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
49735: LD_ADDR_VAR 0 2
49739: PUSH
49740: LD_VAR 0 2
49744: PPUSH
49745: LD_VAR 0 2
49749: PUSH
49750: LD_INT 1
49752: PLUS
49753: PPUSH
49754: LD_VAR 0 1
49758: PUSH
49759: LD_VAR 0 4
49763: ARRAY
49764: PPUSH
49765: CALL_OW 2
49769: ST_TO_ADDR
// array := Delete ( array , index ) ;
49770: LD_ADDR_VAR 0 1
49774: PUSH
49775: LD_VAR 0 1
49779: PPUSH
49780: LD_VAR 0 4
49784: PPUSH
49785: CALL_OW 3
49789: ST_TO_ADDR
// end ;
49790: GO 49714
49792: POP
49793: POP
// end ;
49794: LD_VAR 0 2
49798: RET
// export function GetBaseMaterials ( base ) ; begin
49799: LD_INT 0
49801: PPUSH
// result := [ 0 , 0 , 0 ] ;
49802: LD_ADDR_VAR 0 2
49806: PUSH
49807: LD_INT 0
49809: PUSH
49810: LD_INT 0
49812: PUSH
49813: LD_INT 0
49815: PUSH
49816: EMPTY
49817: LIST
49818: LIST
49819: LIST
49820: ST_TO_ADDR
// if not base then
49821: LD_VAR 0 1
49825: NOT
49826: IFFALSE 49830
// exit ;
49828: GO 49879
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
49830: LD_ADDR_VAR 0 2
49834: PUSH
49835: LD_VAR 0 1
49839: PPUSH
49840: LD_INT 1
49842: PPUSH
49843: CALL_OW 275
49847: PUSH
49848: LD_VAR 0 1
49852: PPUSH
49853: LD_INT 2
49855: PPUSH
49856: CALL_OW 275
49860: PUSH
49861: LD_VAR 0 1
49865: PPUSH
49866: LD_INT 3
49868: PPUSH
49869: CALL_OW 275
49873: PUSH
49874: EMPTY
49875: LIST
49876: LIST
49877: LIST
49878: ST_TO_ADDR
// end ;
49879: LD_VAR 0 2
49883: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
49884: LD_INT 0
49886: PPUSH
49887: PPUSH
// result := array ;
49888: LD_ADDR_VAR 0 3
49892: PUSH
49893: LD_VAR 0 1
49897: ST_TO_ADDR
// if size >= result then
49898: LD_VAR 0 2
49902: PUSH
49903: LD_VAR 0 3
49907: GREATEREQUAL
49908: IFFALSE 49912
// exit ;
49910: GO 49962
// if size then
49912: LD_VAR 0 2
49916: IFFALSE 49962
// for i := array downto size do
49918: LD_ADDR_VAR 0 4
49922: PUSH
49923: DOUBLE
49924: LD_VAR 0 1
49928: INC
49929: ST_TO_ADDR
49930: LD_VAR 0 2
49934: PUSH
49935: FOR_DOWNTO
49936: IFFALSE 49960
// result := Delete ( result , result ) ;
49938: LD_ADDR_VAR 0 3
49942: PUSH
49943: LD_VAR 0 3
49947: PPUSH
49948: LD_VAR 0 3
49952: PPUSH
49953: CALL_OW 3
49957: ST_TO_ADDR
49958: GO 49935
49960: POP
49961: POP
// end ;
49962: LD_VAR 0 3
49966: RET
// export function ComExit ( unit ) ; var tmp ; begin
49967: LD_INT 0
49969: PPUSH
49970: PPUSH
// if not IsInUnit ( unit ) then
49971: LD_VAR 0 1
49975: PPUSH
49976: CALL_OW 310
49980: NOT
49981: IFFALSE 49985
// exit ;
49983: GO 50045
// tmp := IsInUnit ( unit ) ;
49985: LD_ADDR_VAR 0 3
49989: PUSH
49990: LD_VAR 0 1
49994: PPUSH
49995: CALL_OW 310
49999: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
50000: LD_VAR 0 3
50004: PPUSH
50005: CALL_OW 247
50009: PUSH
50010: LD_INT 2
50012: EQUAL
50013: IFFALSE 50026
// ComExitVehicle ( unit ) else
50015: LD_VAR 0 1
50019: PPUSH
50020: CALL_OW 121
50024: GO 50035
// ComExitBuilding ( unit ) ;
50026: LD_VAR 0 1
50030: PPUSH
50031: CALL_OW 122
// result := tmp ;
50035: LD_ADDR_VAR 0 2
50039: PUSH
50040: LD_VAR 0 3
50044: ST_TO_ADDR
// end ;
50045: LD_VAR 0 2
50049: RET
// export function ComExitAll ( units ) ; var i ; begin
50050: LD_INT 0
50052: PPUSH
50053: PPUSH
// if not units then
50054: LD_VAR 0 1
50058: NOT
50059: IFFALSE 50063
// exit ;
50061: GO 50089
// for i in units do
50063: LD_ADDR_VAR 0 3
50067: PUSH
50068: LD_VAR 0 1
50072: PUSH
50073: FOR_IN
50074: IFFALSE 50087
// ComExit ( i ) ;
50076: LD_VAR 0 3
50080: PPUSH
50081: CALL 49967 0 1
50085: GO 50073
50087: POP
50088: POP
// end ;
50089: LD_VAR 0 2
50093: RET
// export function ResetHc ; begin
50094: LD_INT 0
50096: PPUSH
// InitHc ;
50097: CALL_OW 19
// hc_importance := 0 ;
50101: LD_ADDR_OWVAR 32
50105: PUSH
50106: LD_INT 0
50108: ST_TO_ADDR
// end ;
50109: LD_VAR 0 1
50113: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
50114: LD_INT 0
50116: PPUSH
50117: PPUSH
50118: PPUSH
// _x := ( x1 + x2 ) div 2 ;
50119: LD_ADDR_VAR 0 6
50123: PUSH
50124: LD_VAR 0 1
50128: PUSH
50129: LD_VAR 0 3
50133: PLUS
50134: PUSH
50135: LD_INT 2
50137: DIV
50138: ST_TO_ADDR
// if _x < 0 then
50139: LD_VAR 0 6
50143: PUSH
50144: LD_INT 0
50146: LESS
50147: IFFALSE 50164
// _x := _x * - 1 ;
50149: LD_ADDR_VAR 0 6
50153: PUSH
50154: LD_VAR 0 6
50158: PUSH
50159: LD_INT 1
50161: NEG
50162: MUL
50163: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
50164: LD_ADDR_VAR 0 7
50168: PUSH
50169: LD_VAR 0 2
50173: PUSH
50174: LD_VAR 0 4
50178: PLUS
50179: PUSH
50180: LD_INT 2
50182: DIV
50183: ST_TO_ADDR
// if _y < 0 then
50184: LD_VAR 0 7
50188: PUSH
50189: LD_INT 0
50191: LESS
50192: IFFALSE 50209
// _y := _y * - 1 ;
50194: LD_ADDR_VAR 0 7
50198: PUSH
50199: LD_VAR 0 7
50203: PUSH
50204: LD_INT 1
50206: NEG
50207: MUL
50208: ST_TO_ADDR
// result := [ _x , _y ] ;
50209: LD_ADDR_VAR 0 5
50213: PUSH
50214: LD_VAR 0 6
50218: PUSH
50219: LD_VAR 0 7
50223: PUSH
50224: EMPTY
50225: LIST
50226: LIST
50227: ST_TO_ADDR
// end ;
50228: LD_VAR 0 5
50232: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
50233: LD_INT 0
50235: PPUSH
50236: PPUSH
50237: PPUSH
50238: PPUSH
// task := GetTaskList ( unit ) ;
50239: LD_ADDR_VAR 0 7
50243: PUSH
50244: LD_VAR 0 1
50248: PPUSH
50249: CALL_OW 437
50253: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
50254: LD_VAR 0 7
50258: NOT
50259: IFFALSE 50278
50261: PUSH
50262: LD_VAR 0 1
50266: PPUSH
50267: LD_VAR 0 2
50271: PPUSH
50272: CALL_OW 308
50276: NOT
50277: AND
50278: IFFALSE 50282
// exit ;
50280: GO 50400
// if IsInArea ( unit , area ) then
50282: LD_VAR 0 1
50286: PPUSH
50287: LD_VAR 0 2
50291: PPUSH
50292: CALL_OW 308
50296: IFFALSE 50314
// begin ComMoveToArea ( unit , goAway ) ;
50298: LD_VAR 0 1
50302: PPUSH
50303: LD_VAR 0 3
50307: PPUSH
50308: CALL_OW 113
// exit ;
50312: GO 50400
// end ; if task [ 1 ] [ 1 ] <> M then
50314: LD_VAR 0 7
50318: PUSH
50319: LD_INT 1
50321: ARRAY
50322: PUSH
50323: LD_INT 1
50325: ARRAY
50326: PUSH
50327: LD_STRING M
50329: NONEQUAL
50330: IFFALSE 50334
// exit ;
50332: GO 50400
// x := task [ 1 ] [ 2 ] ;
50334: LD_ADDR_VAR 0 5
50338: PUSH
50339: LD_VAR 0 7
50343: PUSH
50344: LD_INT 1
50346: ARRAY
50347: PUSH
50348: LD_INT 2
50350: ARRAY
50351: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
50352: LD_ADDR_VAR 0 6
50356: PUSH
50357: LD_VAR 0 7
50361: PUSH
50362: LD_INT 1
50364: ARRAY
50365: PUSH
50366: LD_INT 3
50368: ARRAY
50369: ST_TO_ADDR
// if InArea ( x , y , area ) then
50370: LD_VAR 0 5
50374: PPUSH
50375: LD_VAR 0 6
50379: PPUSH
50380: LD_VAR 0 2
50384: PPUSH
50385: CALL_OW 309
50389: IFFALSE 50400
// ComStop ( unit ) ;
50391: LD_VAR 0 1
50395: PPUSH
50396: CALL_OW 141
// end ;
50400: LD_VAR 0 4
50404: RET
// export function Abs ( value ) ; begin
50405: LD_INT 0
50407: PPUSH
// result := value ;
50408: LD_ADDR_VAR 0 2
50412: PUSH
50413: LD_VAR 0 1
50417: ST_TO_ADDR
// if value < 0 then
50418: LD_VAR 0 1
50422: PUSH
50423: LD_INT 0
50425: LESS
50426: IFFALSE 50443
// result := value * - 1 ;
50428: LD_ADDR_VAR 0 2
50432: PUSH
50433: LD_VAR 0 1
50437: PUSH
50438: LD_INT 1
50440: NEG
50441: MUL
50442: ST_TO_ADDR
// end ;
50443: LD_VAR 0 2
50447: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
50448: LD_INT 0
50450: PPUSH
50451: PPUSH
50452: PPUSH
50453: PPUSH
50454: PPUSH
50455: PPUSH
50456: PPUSH
50457: PPUSH
// if not unit or not building then
50458: LD_VAR 0 1
50462: NOT
50463: IFTRUE 50472
50465: PUSH
50466: LD_VAR 0 2
50470: NOT
50471: OR
50472: IFFALSE 50476
// exit ;
50474: GO 50704
// x := GetX ( building ) ;
50476: LD_ADDR_VAR 0 4
50480: PUSH
50481: LD_VAR 0 2
50485: PPUSH
50486: CALL_OW 250
50490: ST_TO_ADDR
// y := GetY ( building ) ;
50491: LD_ADDR_VAR 0 6
50495: PUSH
50496: LD_VAR 0 2
50500: PPUSH
50501: CALL_OW 251
50505: ST_TO_ADDR
// d := GetDir ( building ) ;
50506: LD_ADDR_VAR 0 8
50510: PUSH
50511: LD_VAR 0 2
50515: PPUSH
50516: CALL_OW 254
50520: ST_TO_ADDR
// r := 4 ;
50521: LD_ADDR_VAR 0 9
50525: PUSH
50526: LD_INT 4
50528: ST_TO_ADDR
// for i := 1 to 5 do
50529: LD_ADDR_VAR 0 10
50533: PUSH
50534: DOUBLE
50535: LD_INT 1
50537: DEC
50538: ST_TO_ADDR
50539: LD_INT 5
50541: PUSH
50542: FOR_TO
50543: IFFALSE 50702
// begin _x := ShiftX ( x , d , r + i ) ;
50545: LD_ADDR_VAR 0 5
50549: PUSH
50550: LD_VAR 0 4
50554: PPUSH
50555: LD_VAR 0 8
50559: PPUSH
50560: LD_VAR 0 9
50564: PUSH
50565: LD_VAR 0 10
50569: PLUS
50570: PPUSH
50571: CALL_OW 272
50575: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
50576: LD_ADDR_VAR 0 7
50580: PUSH
50581: LD_VAR 0 6
50585: PPUSH
50586: LD_VAR 0 8
50590: PPUSH
50591: LD_VAR 0 9
50595: PUSH
50596: LD_VAR 0 10
50600: PLUS
50601: PPUSH
50602: CALL_OW 273
50606: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
50607: LD_VAR 0 5
50611: PPUSH
50612: LD_VAR 0 7
50616: PPUSH
50617: CALL_OW 488
50621: IFFALSE 50656
50623: PUSH
50624: LD_VAR 0 5
50628: PPUSH
50629: LD_VAR 0 7
50633: PPUSH
50634: CALL_OW 428
50638: PPUSH
50639: CALL_OW 247
50643: PUSH
50644: LD_INT 3
50646: PUSH
50647: LD_INT 2
50649: PUSH
50650: EMPTY
50651: LIST
50652: LIST
50653: IN
50654: NOT
50655: AND
50656: IFFALSE 50700
// begin ComMoveXY ( unit , _x , _y ) ;
50658: LD_VAR 0 1
50662: PPUSH
50663: LD_VAR 0 5
50667: PPUSH
50668: LD_VAR 0 7
50672: PPUSH
50673: CALL_OW 111
// result := [ _x , _y ] ;
50677: LD_ADDR_VAR 0 3
50681: PUSH
50682: LD_VAR 0 5
50686: PUSH
50687: LD_VAR 0 7
50691: PUSH
50692: EMPTY
50693: LIST
50694: LIST
50695: ST_TO_ADDR
// exit ;
50696: POP
50697: POP
50698: GO 50704
// end ; end ;
50700: GO 50542
50702: POP
50703: POP
// end ;
50704: LD_VAR 0 3
50708: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
50709: LD_INT 0
50711: PPUSH
50712: PPUSH
50713: PPUSH
// result := 0 ;
50714: LD_ADDR_VAR 0 3
50718: PUSH
50719: LD_INT 0
50721: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
50722: LD_VAR 0 1
50726: PUSH
50727: LD_INT 0
50729: LESS
50730: IFTRUE 50742
50732: PUSH
50733: LD_VAR 0 1
50737: PUSH
50738: LD_INT 8
50740: GREATER
50741: OR
50742: IFTRUE 50754
50744: PUSH
50745: LD_VAR 0 2
50749: PUSH
50750: LD_INT 0
50752: LESS
50753: OR
50754: IFTRUE 50766
50756: PUSH
50757: LD_VAR 0 2
50761: PUSH
50762: LD_INT 8
50764: GREATER
50765: OR
50766: IFFALSE 50770
// exit ;
50768: GO 50845
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
50770: LD_ADDR_VAR 0 4
50774: PUSH
50775: LD_INT 22
50777: PUSH
50778: LD_VAR 0 2
50782: PUSH
50783: EMPTY
50784: LIST
50785: LIST
50786: PPUSH
50787: CALL_OW 69
50791: PUSH
50792: FOR_IN
50793: IFFALSE 50843
// begin un := UnitShoot ( i ) ;
50795: LD_ADDR_VAR 0 5
50799: PUSH
50800: LD_VAR 0 4
50804: PPUSH
50805: CALL_OW 504
50809: ST_TO_ADDR
// if GetSide ( un ) = side1 then
50810: LD_VAR 0 5
50814: PPUSH
50815: CALL_OW 255
50819: PUSH
50820: LD_VAR 0 1
50824: EQUAL
50825: IFFALSE 50841
// begin result := un ;
50827: LD_ADDR_VAR 0 3
50831: PUSH
50832: LD_VAR 0 5
50836: ST_TO_ADDR
// exit ;
50837: POP
50838: POP
50839: GO 50845
// end ; end ;
50841: GO 50792
50843: POP
50844: POP
// end ;
50845: LD_VAR 0 3
50849: RET
// export function GetCargoBay ( units ) ; begin
50850: LD_INT 0
50852: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
50853: LD_ADDR_VAR 0 2
50857: PUSH
50858: LD_VAR 0 1
50862: PPUSH
50863: LD_INT 2
50865: PUSH
50866: LD_INT 34
50868: PUSH
50869: LD_INT 12
50871: PUSH
50872: EMPTY
50873: LIST
50874: LIST
50875: PUSH
50876: LD_INT 34
50878: PUSH
50879: LD_INT 51
50881: PUSH
50882: EMPTY
50883: LIST
50884: LIST
50885: PUSH
50886: LD_INT 34
50888: PUSH
50889: LD_INT 32
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: PUSH
50896: LD_INT 34
50898: PUSH
50899: LD_INT 89
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: PUSH
50906: EMPTY
50907: LIST
50908: LIST
50909: LIST
50910: LIST
50911: LIST
50912: PPUSH
50913: CALL_OW 72
50917: ST_TO_ADDR
// end ;
50918: LD_VAR 0 2
50922: RET
// export function Negate ( value ) ; begin
50923: LD_INT 0
50925: PPUSH
// result := not value ;
50926: LD_ADDR_VAR 0 2
50930: PUSH
50931: LD_VAR 0 1
50935: NOT
50936: ST_TO_ADDR
// end ;
50937: LD_VAR 0 2
50941: RET
// export function Inc ( value ) ; begin
50942: LD_INT 0
50944: PPUSH
// result := value + 1 ;
50945: LD_ADDR_VAR 0 2
50949: PUSH
50950: LD_VAR 0 1
50954: PUSH
50955: LD_INT 1
50957: PLUS
50958: ST_TO_ADDR
// end ;
50959: LD_VAR 0 2
50963: RET
// export function Dec ( value ) ; begin
50964: LD_INT 0
50966: PPUSH
// result := value - 1 ;
50967: LD_ADDR_VAR 0 2
50971: PUSH
50972: LD_VAR 0 1
50976: PUSH
50977: LD_INT 1
50979: MINUS
50980: ST_TO_ADDR
// end ;
50981: LD_VAR 0 2
50985: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
50986: LD_INT 0
50988: PPUSH
50989: PPUSH
50990: PPUSH
50991: PPUSH
50992: PPUSH
50993: PPUSH
50994: PPUSH
50995: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
50996: LD_VAR 0 1
51000: PPUSH
51001: LD_VAR 0 2
51005: PPUSH
51006: CALL_OW 488
51010: NOT
51011: IFTRUE 51030
51013: PUSH
51014: LD_VAR 0 3
51018: PPUSH
51019: LD_VAR 0 4
51023: PPUSH
51024: CALL_OW 488
51028: NOT
51029: OR
51030: IFFALSE 51043
// begin result := - 1 ;
51032: LD_ADDR_VAR 0 5
51036: PUSH
51037: LD_INT 1
51039: NEG
51040: ST_TO_ADDR
// exit ;
51041: GO 51278
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
51043: LD_ADDR_VAR 0 12
51047: PUSH
51048: LD_VAR 0 1
51052: PPUSH
51053: LD_VAR 0 2
51057: PPUSH
51058: LD_VAR 0 3
51062: PPUSH
51063: LD_VAR 0 4
51067: PPUSH
51068: CALL 50114 0 4
51072: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
51073: LD_ADDR_VAR 0 11
51077: PUSH
51078: LD_VAR 0 1
51082: PPUSH
51083: LD_VAR 0 2
51087: PPUSH
51088: LD_VAR 0 12
51092: PUSH
51093: LD_INT 1
51095: ARRAY
51096: PPUSH
51097: LD_VAR 0 12
51101: PUSH
51102: LD_INT 2
51104: ARRAY
51105: PPUSH
51106: CALL_OW 298
51110: ST_TO_ADDR
// distance := 9999 ;
51111: LD_ADDR_VAR 0 10
51115: PUSH
51116: LD_INT 9999
51118: ST_TO_ADDR
// for i := 0 to 5 do
51119: LD_ADDR_VAR 0 6
51123: PUSH
51124: DOUBLE
51125: LD_INT 0
51127: DEC
51128: ST_TO_ADDR
51129: LD_INT 5
51131: PUSH
51132: FOR_TO
51133: IFFALSE 51276
// begin _x := ShiftX ( x1 , i , centerDist ) ;
51135: LD_ADDR_VAR 0 7
51139: PUSH
51140: LD_VAR 0 1
51144: PPUSH
51145: LD_VAR 0 6
51149: PPUSH
51150: LD_VAR 0 11
51154: PPUSH
51155: CALL_OW 272
51159: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
51160: LD_ADDR_VAR 0 8
51164: PUSH
51165: LD_VAR 0 2
51169: PPUSH
51170: LD_VAR 0 6
51174: PPUSH
51175: LD_VAR 0 11
51179: PPUSH
51180: CALL_OW 273
51184: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
51185: LD_VAR 0 7
51189: PPUSH
51190: LD_VAR 0 8
51194: PPUSH
51195: CALL_OW 488
51199: NOT
51200: IFFALSE 51204
// continue ;
51202: GO 51132
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
51204: LD_ADDR_VAR 0 9
51208: PUSH
51209: LD_VAR 0 12
51213: PUSH
51214: LD_INT 1
51216: ARRAY
51217: PPUSH
51218: LD_VAR 0 12
51222: PUSH
51223: LD_INT 2
51225: ARRAY
51226: PPUSH
51227: LD_VAR 0 7
51231: PPUSH
51232: LD_VAR 0 8
51236: PPUSH
51237: CALL_OW 298
51241: ST_TO_ADDR
// if tmp < distance then
51242: LD_VAR 0 9
51246: PUSH
51247: LD_VAR 0 10
51251: LESS
51252: IFFALSE 51274
// begin result := i ;
51254: LD_ADDR_VAR 0 5
51258: PUSH
51259: LD_VAR 0 6
51263: ST_TO_ADDR
// distance := tmp ;
51264: LD_ADDR_VAR 0 10
51268: PUSH
51269: LD_VAR 0 9
51273: ST_TO_ADDR
// end ; end ;
51274: GO 51132
51276: POP
51277: POP
// end ;
51278: LD_VAR 0 5
51282: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
51283: LD_INT 0
51285: PPUSH
51286: PPUSH
// if not driver or not IsInUnit ( driver ) then
51287: LD_VAR 0 1
51291: NOT
51292: IFTRUE 51306
51294: PUSH
51295: LD_VAR 0 1
51299: PPUSH
51300: CALL_OW 310
51304: NOT
51305: OR
51306: IFFALSE 51310
// exit ;
51308: GO 51400
// vehicle := IsInUnit ( driver ) ;
51310: LD_ADDR_VAR 0 3
51314: PUSH
51315: LD_VAR 0 1
51319: PPUSH
51320: CALL_OW 310
51324: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
51325: LD_VAR 0 1
51329: PPUSH
51330: LD_STRING \
51332: PUSH
51333: LD_INT 0
51335: PUSH
51336: LD_INT 0
51338: PUSH
51339: LD_INT 0
51341: PUSH
51342: LD_INT 0
51344: PUSH
51345: LD_INT 0
51347: PUSH
51348: LD_INT 0
51350: PUSH
51351: EMPTY
51352: LIST
51353: LIST
51354: LIST
51355: LIST
51356: LIST
51357: LIST
51358: LIST
51359: PUSH
51360: LD_STRING E
51362: PUSH
51363: LD_INT 0
51365: PUSH
51366: LD_INT 0
51368: PUSH
51369: LD_VAR 0 3
51373: PUSH
51374: LD_INT 0
51376: PUSH
51377: LD_INT 0
51379: PUSH
51380: LD_INT 0
51382: PUSH
51383: EMPTY
51384: LIST
51385: LIST
51386: LIST
51387: LIST
51388: LIST
51389: LIST
51390: LIST
51391: PUSH
51392: EMPTY
51393: LIST
51394: LIST
51395: PPUSH
51396: CALL_OW 446
// end ;
51400: LD_VAR 0 2
51404: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
51405: LD_INT 0
51407: PPUSH
51408: PPUSH
// if not driver or not IsInUnit ( driver ) then
51409: LD_VAR 0 1
51413: NOT
51414: IFTRUE 51428
51416: PUSH
51417: LD_VAR 0 1
51421: PPUSH
51422: CALL_OW 310
51426: NOT
51427: OR
51428: IFFALSE 51432
// exit ;
51430: GO 51522
// vehicle := IsInUnit ( driver ) ;
51432: LD_ADDR_VAR 0 3
51436: PUSH
51437: LD_VAR 0 1
51441: PPUSH
51442: CALL_OW 310
51446: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
51447: LD_VAR 0 1
51451: PPUSH
51452: LD_STRING \
51454: PUSH
51455: LD_INT 0
51457: PUSH
51458: LD_INT 0
51460: PUSH
51461: LD_INT 0
51463: PUSH
51464: LD_INT 0
51466: PUSH
51467: LD_INT 0
51469: PUSH
51470: LD_INT 0
51472: PUSH
51473: EMPTY
51474: LIST
51475: LIST
51476: LIST
51477: LIST
51478: LIST
51479: LIST
51480: LIST
51481: PUSH
51482: LD_STRING E
51484: PUSH
51485: LD_INT 0
51487: PUSH
51488: LD_INT 0
51490: PUSH
51491: LD_VAR 0 3
51495: PUSH
51496: LD_INT 0
51498: PUSH
51499: LD_INT 0
51501: PUSH
51502: LD_INT 0
51504: PUSH
51505: EMPTY
51506: LIST
51507: LIST
51508: LIST
51509: LIST
51510: LIST
51511: LIST
51512: LIST
51513: PUSH
51514: EMPTY
51515: LIST
51516: LIST
51517: PPUSH
51518: CALL_OW 447
// end ;
51522: LD_VAR 0 2
51526: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
51527: LD_INT 0
51529: PPUSH
51530: PPUSH
51531: PPUSH
// tmp := [ ] ;
51532: LD_ADDR_VAR 0 5
51536: PUSH
51537: EMPTY
51538: ST_TO_ADDR
// for i in units do
51539: LD_ADDR_VAR 0 4
51543: PUSH
51544: LD_VAR 0 1
51548: PUSH
51549: FOR_IN
51550: IFFALSE 51588
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
51552: LD_ADDR_VAR 0 5
51556: PUSH
51557: LD_VAR 0 5
51561: PPUSH
51562: LD_VAR 0 5
51566: PUSH
51567: LD_INT 1
51569: PLUS
51570: PPUSH
51571: LD_VAR 0 4
51575: PPUSH
51576: CALL_OW 256
51580: PPUSH
51581: CALL_OW 2
51585: ST_TO_ADDR
51586: GO 51549
51588: POP
51589: POP
// if not tmp then
51590: LD_VAR 0 5
51594: NOT
51595: IFFALSE 51599
// exit ;
51597: GO 51647
// if asc then
51599: LD_VAR 0 2
51603: IFFALSE 51627
// result := SortListByListAsc ( units , tmp ) else
51605: LD_ADDR_VAR 0 3
51609: PUSH
51610: LD_VAR 0 1
51614: PPUSH
51615: LD_VAR 0 5
51619: PPUSH
51620: CALL_OW 76
51624: ST_TO_ADDR
51625: GO 51647
// result := SortListByListDesc ( units , tmp ) ;
51627: LD_ADDR_VAR 0 3
51631: PUSH
51632: LD_VAR 0 1
51636: PPUSH
51637: LD_VAR 0 5
51641: PPUSH
51642: CALL_OW 77
51646: ST_TO_ADDR
// end ;
51647: LD_VAR 0 3
51651: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
51652: LD_INT 0
51654: PPUSH
51655: PPUSH
// task := GetTaskList ( mech ) ;
51656: LD_ADDR_VAR 0 4
51660: PUSH
51661: LD_VAR 0 1
51665: PPUSH
51666: CALL_OW 437
51670: ST_TO_ADDR
// if not task then
51671: LD_VAR 0 4
51675: NOT
51676: IFFALSE 51680
// exit ;
51678: GO 51724
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
51680: LD_ADDR_VAR 0 3
51684: PUSH
51685: LD_VAR 0 4
51689: PUSH
51690: LD_INT 1
51692: ARRAY
51693: PUSH
51694: LD_INT 1
51696: ARRAY
51697: PUSH
51698: LD_STRING r
51700: EQUAL
51701: IFFALSE 51723
51703: PUSH
51704: LD_VAR 0 4
51708: PUSH
51709: LD_INT 1
51711: ARRAY
51712: PUSH
51713: LD_INT 4
51715: ARRAY
51716: PUSH
51717: LD_VAR 0 2
51721: EQUAL
51722: AND
51723: ST_TO_ADDR
// end ;
51724: LD_VAR 0 3
51728: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
51729: LD_INT 0
51731: PPUSH
// SetDir ( unit , d ) ;
51732: LD_VAR 0 1
51736: PPUSH
51737: LD_VAR 0 4
51741: PPUSH
51742: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
51746: LD_ADDR_VAR 0 6
51750: PUSH
51751: LD_VAR 0 1
51755: PPUSH
51756: LD_VAR 0 2
51760: PPUSH
51761: LD_VAR 0 3
51765: PPUSH
51766: LD_VAR 0 5
51770: PPUSH
51771: CALL_OW 48
51775: ST_TO_ADDR
// end ;
51776: LD_VAR 0 6
51780: RET
// export function ToNaturalNumber ( number ) ; begin
51781: LD_INT 0
51783: PPUSH
// result := number div 1 ;
51784: LD_ADDR_VAR 0 2
51788: PUSH
51789: LD_VAR 0 1
51793: PUSH
51794: LD_INT 1
51796: DIV
51797: ST_TO_ADDR
// if number < 0 then
51798: LD_VAR 0 1
51802: PUSH
51803: LD_INT 0
51805: LESS
51806: IFFALSE 51816
// result := 0 ;
51808: LD_ADDR_VAR 0 2
51812: PUSH
51813: LD_INT 0
51815: ST_TO_ADDR
// end ;
51816: LD_VAR 0 2
51820: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
51821: LD_INT 0
51823: PPUSH
51824: PPUSH
51825: PPUSH
// if not buildings then
51826: LD_VAR 0 1
51830: NOT
51831: IFFALSE 51835
// exit ;
51833: GO 51950
// tmp := [ ] ;
51835: LD_ADDR_VAR 0 5
51839: PUSH
51840: EMPTY
51841: ST_TO_ADDR
// for b in buildings do
51842: LD_ADDR_VAR 0 4
51846: PUSH
51847: LD_VAR 0 1
51851: PUSH
51852: FOR_IN
51853: IFFALSE 51891
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
51855: LD_ADDR_VAR 0 5
51859: PUSH
51860: LD_VAR 0 5
51864: PPUSH
51865: LD_VAR 0 5
51869: PUSH
51870: LD_INT 1
51872: PLUS
51873: PPUSH
51874: LD_VAR 0 4
51878: PPUSH
51879: CALL_OW 266
51883: PPUSH
51884: CALL_OW 1
51888: ST_TO_ADDR
51889: GO 51852
51891: POP
51892: POP
// if not tmp then
51893: LD_VAR 0 5
51897: NOT
51898: IFFALSE 51902
// exit ;
51900: GO 51950
// if asc then
51902: LD_VAR 0 2
51906: IFFALSE 51930
// result := SortListByListAsc ( buildings , tmp ) else
51908: LD_ADDR_VAR 0 3
51912: PUSH
51913: LD_VAR 0 1
51917: PPUSH
51918: LD_VAR 0 5
51922: PPUSH
51923: CALL_OW 76
51927: ST_TO_ADDR
51928: GO 51950
// result := SortListByListDesc ( buildings , tmp ) ;
51930: LD_ADDR_VAR 0 3
51934: PUSH
51935: LD_VAR 0 1
51939: PPUSH
51940: LD_VAR 0 5
51944: PPUSH
51945: CALL_OW 77
51949: ST_TO_ADDR
// end ;
51950: LD_VAR 0 3
51954: RET
// export function SortByClass ( units , class ) ; var un ; begin
51955: LD_INT 0
51957: PPUSH
51958: PPUSH
// if not units or not class then
51959: LD_VAR 0 1
51963: NOT
51964: IFTRUE 51973
51966: PUSH
51967: LD_VAR 0 2
51971: NOT
51972: OR
51973: IFFALSE 51977
// exit ;
51975: GO 52072
// result := [ ] ;
51977: LD_ADDR_VAR 0 3
51981: PUSH
51982: EMPTY
51983: ST_TO_ADDR
// for un in units do
51984: LD_ADDR_VAR 0 4
51988: PUSH
51989: LD_VAR 0 1
51993: PUSH
51994: FOR_IN
51995: IFFALSE 52070
// if GetClass ( un ) = class then
51997: LD_VAR 0 4
52001: PPUSH
52002: CALL_OW 257
52006: PUSH
52007: LD_VAR 0 2
52011: EQUAL
52012: IFFALSE 52039
// result := Insert ( result , 1 , un ) else
52014: LD_ADDR_VAR 0 3
52018: PUSH
52019: LD_VAR 0 3
52023: PPUSH
52024: LD_INT 1
52026: PPUSH
52027: LD_VAR 0 4
52031: PPUSH
52032: CALL_OW 2
52036: ST_TO_ADDR
52037: GO 52068
// result := Replace ( result , result + 1 , un ) ;
52039: LD_ADDR_VAR 0 3
52043: PUSH
52044: LD_VAR 0 3
52048: PPUSH
52049: LD_VAR 0 3
52053: PUSH
52054: LD_INT 1
52056: PLUS
52057: PPUSH
52058: LD_VAR 0 4
52062: PPUSH
52063: CALL_OW 1
52067: ST_TO_ADDR
52068: GO 51994
52070: POP
52071: POP
// end ;
52072: LD_VAR 0 3
52076: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
52077: LD_INT 0
52079: PPUSH
52080: PPUSH
52081: PPUSH
52082: PPUSH
52083: PPUSH
52084: PPUSH
52085: PPUSH
// result := [ ] ;
52086: LD_ADDR_VAR 0 4
52090: PUSH
52091: EMPTY
52092: ST_TO_ADDR
// if x - r < 0 then
52093: LD_VAR 0 1
52097: PUSH
52098: LD_VAR 0 3
52102: MINUS
52103: PUSH
52104: LD_INT 0
52106: LESS
52107: IFFALSE 52119
// min_x := 0 else
52109: LD_ADDR_VAR 0 8
52113: PUSH
52114: LD_INT 0
52116: ST_TO_ADDR
52117: GO 52135
// min_x := x - r ;
52119: LD_ADDR_VAR 0 8
52123: PUSH
52124: LD_VAR 0 1
52128: PUSH
52129: LD_VAR 0 3
52133: MINUS
52134: ST_TO_ADDR
// if y - r < 0 then
52135: LD_VAR 0 2
52139: PUSH
52140: LD_VAR 0 3
52144: MINUS
52145: PUSH
52146: LD_INT 0
52148: LESS
52149: IFFALSE 52161
// min_y := 0 else
52151: LD_ADDR_VAR 0 7
52155: PUSH
52156: LD_INT 0
52158: ST_TO_ADDR
52159: GO 52177
// min_y := y - r ;
52161: LD_ADDR_VAR 0 7
52165: PUSH
52166: LD_VAR 0 2
52170: PUSH
52171: LD_VAR 0 3
52175: MINUS
52176: ST_TO_ADDR
// max_x := x + r ;
52177: LD_ADDR_VAR 0 9
52181: PUSH
52182: LD_VAR 0 1
52186: PUSH
52187: LD_VAR 0 3
52191: PLUS
52192: ST_TO_ADDR
// max_y := y + r ;
52193: LD_ADDR_VAR 0 10
52197: PUSH
52198: LD_VAR 0 2
52202: PUSH
52203: LD_VAR 0 3
52207: PLUS
52208: ST_TO_ADDR
// for _x = min_x to max_x do
52209: LD_ADDR_VAR 0 5
52213: PUSH
52214: DOUBLE
52215: LD_VAR 0 8
52219: DEC
52220: ST_TO_ADDR
52221: LD_VAR 0 9
52225: PUSH
52226: FOR_TO
52227: IFFALSE 52328
// for _y = min_y to max_y do
52229: LD_ADDR_VAR 0 6
52233: PUSH
52234: DOUBLE
52235: LD_VAR 0 7
52239: DEC
52240: ST_TO_ADDR
52241: LD_VAR 0 10
52245: PUSH
52246: FOR_TO
52247: IFFALSE 52324
// begin if not ValidHex ( _x , _y ) then
52249: LD_VAR 0 5
52253: PPUSH
52254: LD_VAR 0 6
52258: PPUSH
52259: CALL_OW 488
52263: NOT
52264: IFFALSE 52268
// continue ;
52266: GO 52246
// if GetResourceTypeXY ( _x , _y ) then
52268: LD_VAR 0 5
52272: PPUSH
52273: LD_VAR 0 6
52277: PPUSH
52278: CALL_OW 283
52282: IFFALSE 52322
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
52284: LD_ADDR_VAR 0 4
52288: PUSH
52289: LD_VAR 0 4
52293: PPUSH
52294: LD_VAR 0 4
52298: PUSH
52299: LD_INT 1
52301: PLUS
52302: PPUSH
52303: LD_VAR 0 5
52307: PUSH
52308: LD_VAR 0 6
52312: PUSH
52313: EMPTY
52314: LIST
52315: LIST
52316: PPUSH
52317: CALL_OW 1
52321: ST_TO_ADDR
// end ;
52322: GO 52246
52324: POP
52325: POP
52326: GO 52226
52328: POP
52329: POP
// end ;
52330: LD_VAR 0 4
52334: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
52335: LD_INT 0
52337: PPUSH
52338: PPUSH
52339: PPUSH
52340: PPUSH
52341: PPUSH
52342: PPUSH
52343: PPUSH
52344: PPUSH
// if not units then
52345: LD_VAR 0 1
52349: NOT
52350: IFFALSE 52354
// exit ;
52352: GO 52886
// result := UnitFilter ( units , [ f_ok ] ) ;
52354: LD_ADDR_VAR 0 3
52358: PUSH
52359: LD_VAR 0 1
52363: PPUSH
52364: LD_INT 50
52366: PUSH
52367: EMPTY
52368: LIST
52369: PPUSH
52370: CALL_OW 72
52374: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
52375: LD_ADDR_VAR 0 8
52379: PUSH
52380: LD_VAR 0 1
52384: PUSH
52385: LD_INT 1
52387: ARRAY
52388: PPUSH
52389: CALL_OW 255
52393: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
52394: LD_ADDR_VAR 0 10
52398: PUSH
52399: LD_INT 29
52401: PUSH
52402: LD_INT 91
52404: PUSH
52405: LD_INT 49
52407: PUSH
52408: EMPTY
52409: LIST
52410: LIST
52411: LIST
52412: ST_TO_ADDR
// if not result then
52413: LD_VAR 0 3
52417: NOT
52418: IFFALSE 52422
// exit ;
52420: GO 52886
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
52422: LD_ADDR_VAR 0 5
52426: PUSH
52427: LD_INT 81
52429: PUSH
52430: LD_VAR 0 8
52434: PUSH
52435: EMPTY
52436: LIST
52437: LIST
52438: PPUSH
52439: CALL_OW 69
52443: ST_TO_ADDR
// for i in result do
52444: LD_ADDR_VAR 0 4
52448: PUSH
52449: LD_VAR 0 3
52453: PUSH
52454: FOR_IN
52455: IFFALSE 52884
// begin tag := GetTag ( i ) + 1 ;
52457: LD_ADDR_VAR 0 9
52461: PUSH
52462: LD_VAR 0 4
52466: PPUSH
52467: CALL_OW 110
52471: PUSH
52472: LD_INT 1
52474: PLUS
52475: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
52476: LD_ADDR_VAR 0 7
52480: PUSH
52481: LD_VAR 0 4
52485: PPUSH
52486: CALL_OW 250
52490: PPUSH
52491: LD_VAR 0 4
52495: PPUSH
52496: CALL_OW 251
52500: PPUSH
52501: LD_INT 4
52503: PPUSH
52504: CALL 52077 0 3
52508: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
52509: LD_VAR 0 4
52513: PPUSH
52514: CALL_OW 247
52518: PUSH
52519: LD_INT 2
52521: EQUAL
52522: IFFALSE 52534
52524: PUSH
52525: LD_VAR 0 7
52529: PUSH
52530: LD_INT 2
52532: GREATER
52533: AND
52534: IFFALSE 52554
52536: PUSH
52537: LD_VAR 0 4
52541: PPUSH
52542: CALL_OW 264
52546: PUSH
52547: LD_VAR 0 10
52551: IN
52552: NOT
52553: AND
52554: IFFALSE 52593
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
52556: LD_VAR 0 4
52560: PPUSH
52561: LD_VAR 0 7
52565: PUSH
52566: LD_INT 1
52568: ARRAY
52569: PUSH
52570: LD_INT 1
52572: ARRAY
52573: PPUSH
52574: LD_VAR 0 7
52578: PUSH
52579: LD_INT 1
52581: ARRAY
52582: PUSH
52583: LD_INT 2
52585: ARRAY
52586: PPUSH
52587: CALL_OW 116
52591: GO 52882
// if path > tag then
52593: LD_VAR 0 2
52597: PUSH
52598: LD_VAR 0 9
52602: GREATER
52603: IFFALSE 52811
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
52605: LD_ADDR_VAR 0 6
52609: PUSH
52610: LD_VAR 0 5
52614: PPUSH
52615: LD_INT 91
52617: PUSH
52618: LD_VAR 0 4
52622: PUSH
52623: LD_INT 8
52625: PUSH
52626: EMPTY
52627: LIST
52628: LIST
52629: LIST
52630: PPUSH
52631: CALL_OW 72
52635: ST_TO_ADDR
// if nearEnemy then
52636: LD_VAR 0 6
52640: IFFALSE 52709
// begin if GetWeapon ( i ) = ru_time_lapser then
52642: LD_VAR 0 4
52646: PPUSH
52647: CALL_OW 264
52651: PUSH
52652: LD_INT 49
52654: EQUAL
52655: IFFALSE 52683
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
52657: LD_VAR 0 4
52661: PPUSH
52662: LD_VAR 0 6
52666: PPUSH
52667: LD_VAR 0 4
52671: PPUSH
52672: CALL_OW 74
52676: PPUSH
52677: CALL_OW 112
52681: GO 52707
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
52683: LD_VAR 0 4
52687: PPUSH
52688: LD_VAR 0 6
52692: PPUSH
52693: LD_VAR 0 4
52697: PPUSH
52698: CALL_OW 74
52702: PPUSH
52703: CALL 53967 0 2
// end else
52707: GO 52809
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
52709: LD_VAR 0 4
52713: PPUSH
52714: LD_VAR 0 2
52718: PUSH
52719: LD_VAR 0 9
52723: ARRAY
52724: PUSH
52725: LD_INT 1
52727: ARRAY
52728: PPUSH
52729: LD_VAR 0 2
52733: PUSH
52734: LD_VAR 0 9
52738: ARRAY
52739: PUSH
52740: LD_INT 2
52742: ARRAY
52743: PPUSH
52744: CALL_OW 297
52748: PUSH
52749: LD_INT 6
52751: GREATER
52752: IFFALSE 52795
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
52754: LD_VAR 0 4
52758: PPUSH
52759: LD_VAR 0 2
52763: PUSH
52764: LD_VAR 0 9
52768: ARRAY
52769: PUSH
52770: LD_INT 1
52772: ARRAY
52773: PPUSH
52774: LD_VAR 0 2
52778: PUSH
52779: LD_VAR 0 9
52783: ARRAY
52784: PUSH
52785: LD_INT 2
52787: ARRAY
52788: PPUSH
52789: CALL_OW 114
52793: GO 52809
// SetTag ( i , tag ) ;
52795: LD_VAR 0 4
52799: PPUSH
52800: LD_VAR 0 9
52804: PPUSH
52805: CALL_OW 109
// end else
52809: GO 52882
// if enemy then
52811: LD_VAR 0 5
52815: IFFALSE 52882
// begin if GetWeapon ( i ) = ru_time_lapser then
52817: LD_VAR 0 4
52821: PPUSH
52822: CALL_OW 264
52826: PUSH
52827: LD_INT 49
52829: EQUAL
52830: IFFALSE 52858
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
52832: LD_VAR 0 4
52836: PPUSH
52837: LD_VAR 0 5
52841: PPUSH
52842: LD_VAR 0 4
52846: PPUSH
52847: CALL_OW 74
52851: PPUSH
52852: CALL_OW 112
52856: GO 52882
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
52858: LD_VAR 0 4
52862: PPUSH
52863: LD_VAR 0 5
52867: PPUSH
52868: LD_VAR 0 4
52872: PPUSH
52873: CALL_OW 74
52877: PPUSH
52878: CALL 53967 0 2
// end ; end ;
52882: GO 52454
52884: POP
52885: POP
// end ;
52886: LD_VAR 0 3
52890: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
52891: LD_INT 0
52893: PPUSH
52894: PPUSH
52895: PPUSH
// if not unit or IsInUnit ( unit ) then
52896: LD_VAR 0 1
52900: NOT
52901: IFTRUE 52914
52903: PUSH
52904: LD_VAR 0 1
52908: PPUSH
52909: CALL_OW 310
52913: OR
52914: IFFALSE 52918
// exit ;
52916: GO 53009
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
52918: LD_ADDR_VAR 0 4
52922: PUSH
52923: LD_VAR 0 1
52927: PPUSH
52928: CALL_OW 250
52932: PPUSH
52933: LD_VAR 0 2
52937: PPUSH
52938: LD_INT 1
52940: PPUSH
52941: CALL_OW 272
52945: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
52946: LD_ADDR_VAR 0 5
52950: PUSH
52951: LD_VAR 0 1
52955: PPUSH
52956: CALL_OW 251
52960: PPUSH
52961: LD_VAR 0 2
52965: PPUSH
52966: LD_INT 1
52968: PPUSH
52969: CALL_OW 273
52973: ST_TO_ADDR
// if ValidHex ( x , y ) then
52974: LD_VAR 0 4
52978: PPUSH
52979: LD_VAR 0 5
52983: PPUSH
52984: CALL_OW 488
52988: IFFALSE 53009
// ComTurnXY ( unit , x , y ) ;
52990: LD_VAR 0 1
52994: PPUSH
52995: LD_VAR 0 4
52999: PPUSH
53000: LD_VAR 0 5
53004: PPUSH
53005: CALL_OW 118
// end ;
53009: LD_VAR 0 3
53013: RET
// export function SeeUnits ( side , units ) ; var i ; begin
53014: LD_INT 0
53016: PPUSH
53017: PPUSH
// result := false ;
53018: LD_ADDR_VAR 0 3
53022: PUSH
53023: LD_INT 0
53025: ST_TO_ADDR
// if not units then
53026: LD_VAR 0 2
53030: NOT
53031: IFFALSE 53035
// exit ;
53033: GO 53080
// for i in units do
53035: LD_ADDR_VAR 0 4
53039: PUSH
53040: LD_VAR 0 2
53044: PUSH
53045: FOR_IN
53046: IFFALSE 53078
// if See ( side , i ) then
53048: LD_VAR 0 1
53052: PPUSH
53053: LD_VAR 0 4
53057: PPUSH
53058: CALL_OW 292
53062: IFFALSE 53076
// begin result := true ;
53064: LD_ADDR_VAR 0 3
53068: PUSH
53069: LD_INT 1
53071: ST_TO_ADDR
// exit ;
53072: POP
53073: POP
53074: GO 53080
// end ;
53076: GO 53045
53078: POP
53079: POP
// end ;
53080: LD_VAR 0 3
53084: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
53085: LD_INT 0
53087: PPUSH
53088: PPUSH
53089: PPUSH
53090: PPUSH
// if not unit or not points then
53091: LD_VAR 0 1
53095: NOT
53096: IFTRUE 53105
53098: PUSH
53099: LD_VAR 0 2
53103: NOT
53104: OR
53105: IFFALSE 53109
// exit ;
53107: GO 53199
// dist := 99999 ;
53109: LD_ADDR_VAR 0 5
53113: PUSH
53114: LD_INT 99999
53116: ST_TO_ADDR
// for i in points do
53117: LD_ADDR_VAR 0 4
53121: PUSH
53122: LD_VAR 0 2
53126: PUSH
53127: FOR_IN
53128: IFFALSE 53197
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
53130: LD_ADDR_VAR 0 6
53134: PUSH
53135: LD_VAR 0 1
53139: PPUSH
53140: LD_VAR 0 4
53144: PUSH
53145: LD_INT 1
53147: ARRAY
53148: PPUSH
53149: LD_VAR 0 4
53153: PUSH
53154: LD_INT 2
53156: ARRAY
53157: PPUSH
53158: CALL_OW 297
53162: ST_TO_ADDR
// if tmpDist < dist then
53163: LD_VAR 0 6
53167: PUSH
53168: LD_VAR 0 5
53172: LESS
53173: IFFALSE 53195
// begin result := i ;
53175: LD_ADDR_VAR 0 3
53179: PUSH
53180: LD_VAR 0 4
53184: ST_TO_ADDR
// dist := tmpDist ;
53185: LD_ADDR_VAR 0 5
53189: PUSH
53190: LD_VAR 0 6
53194: ST_TO_ADDR
// end ; end ;
53195: GO 53127
53197: POP
53198: POP
// end ;
53199: LD_VAR 0 3
53203: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
53204: LD_INT 0
53206: PPUSH
// uc_side := side ;
53207: LD_ADDR_OWVAR 20
53211: PUSH
53212: LD_VAR 0 1
53216: ST_TO_ADDR
// uc_nation := 3 ;
53217: LD_ADDR_OWVAR 21
53221: PUSH
53222: LD_INT 3
53224: ST_TO_ADDR
// vc_chassis := 25 ;
53225: LD_ADDR_OWVAR 37
53229: PUSH
53230: LD_INT 25
53232: ST_TO_ADDR
// vc_engine := engine_siberite ;
53233: LD_ADDR_OWVAR 39
53237: PUSH
53238: LD_INT 3
53240: ST_TO_ADDR
// vc_control := control_computer ;
53241: LD_ADDR_OWVAR 38
53245: PUSH
53246: LD_INT 3
53248: ST_TO_ADDR
// vc_weapon := 59 ;
53249: LD_ADDR_OWVAR 40
53253: PUSH
53254: LD_INT 59
53256: ST_TO_ADDR
// result := CreateVehicle ;
53257: LD_ADDR_VAR 0 5
53261: PUSH
53262: CALL_OW 45
53266: ST_TO_ADDR
// SetDir ( result , d ) ;
53267: LD_VAR 0 5
53271: PPUSH
53272: LD_VAR 0 4
53276: PPUSH
53277: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
53281: LD_VAR 0 5
53285: PPUSH
53286: LD_VAR 0 2
53290: PPUSH
53291: LD_VAR 0 3
53295: PPUSH
53296: LD_INT 0
53298: PPUSH
53299: CALL_OW 48
// end ;
53303: LD_VAR 0 5
53307: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
53308: LD_INT 0
53310: PPUSH
53311: PPUSH
53312: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
53313: LD_ADDR_VAR 0 2
53317: PUSH
53318: LD_INT 0
53320: PUSH
53321: LD_INT 0
53323: PUSH
53324: LD_INT 0
53326: PUSH
53327: LD_INT 0
53329: PUSH
53330: EMPTY
53331: LIST
53332: LIST
53333: LIST
53334: LIST
53335: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
53336: LD_VAR 0 1
53340: NOT
53341: IFTRUE 53374
53343: PUSH
53344: LD_VAR 0 1
53348: PPUSH
53349: CALL_OW 264
53353: PUSH
53354: LD_INT 12
53356: PUSH
53357: LD_INT 51
53359: PUSH
53360: LD_INT 32
53362: PUSH
53363: LD_INT 89
53365: PUSH
53366: EMPTY
53367: LIST
53368: LIST
53369: LIST
53370: LIST
53371: IN
53372: NOT
53373: OR
53374: IFFALSE 53378
// exit ;
53376: GO 53476
// for i := 1 to 3 do
53378: LD_ADDR_VAR 0 3
53382: PUSH
53383: DOUBLE
53384: LD_INT 1
53386: DEC
53387: ST_TO_ADDR
53388: LD_INT 3
53390: PUSH
53391: FOR_TO
53392: IFFALSE 53474
// begin tmp := GetCargo ( cargo , i ) ;
53394: LD_ADDR_VAR 0 4
53398: PUSH
53399: LD_VAR 0 1
53403: PPUSH
53404: LD_VAR 0 3
53408: PPUSH
53409: CALL_OW 289
53413: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
53414: LD_ADDR_VAR 0 2
53418: PUSH
53419: LD_VAR 0 2
53423: PPUSH
53424: LD_VAR 0 3
53428: PPUSH
53429: LD_VAR 0 4
53433: PPUSH
53434: CALL_OW 1
53438: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
53439: LD_ADDR_VAR 0 2
53443: PUSH
53444: LD_VAR 0 2
53448: PPUSH
53449: LD_INT 4
53451: PPUSH
53452: LD_VAR 0 2
53456: PUSH
53457: LD_INT 4
53459: ARRAY
53460: PUSH
53461: LD_VAR 0 4
53465: PLUS
53466: PPUSH
53467: CALL_OW 1
53471: ST_TO_ADDR
// end ;
53472: GO 53391
53474: POP
53475: POP
// end ;
53476: LD_VAR 0 2
53480: RET
// export function Length ( array ) ; begin
53481: LD_INT 0
53483: PPUSH
// result := array + 0 ;
53484: LD_ADDR_VAR 0 2
53488: PUSH
53489: LD_VAR 0 1
53493: PUSH
53494: LD_INT 0
53496: PLUS
53497: ST_TO_ADDR
// end ;
53498: LD_VAR 0 2
53502: RET
// export function PrepareArray ( array ) ; begin
53503: LD_INT 0
53505: PPUSH
// result := array diff 0 ;
53506: LD_ADDR_VAR 0 2
53510: PUSH
53511: LD_VAR 0 1
53515: PUSH
53516: LD_INT 0
53518: DIFF
53519: ST_TO_ADDR
// if not result [ 1 ] then
53520: LD_VAR 0 2
53524: PUSH
53525: LD_INT 1
53527: ARRAY
53528: NOT
53529: IFFALSE 53549
// result := Delete ( result , 1 ) ;
53531: LD_ADDR_VAR 0 2
53535: PUSH
53536: LD_VAR 0 2
53540: PPUSH
53541: LD_INT 1
53543: PPUSH
53544: CALL_OW 3
53548: ST_TO_ADDR
// end ;
53549: LD_VAR 0 2
53553: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
53554: LD_INT 0
53556: PPUSH
53557: PPUSH
53558: PPUSH
53559: PPUSH
// sibRocketRange := 25 ;
53560: LD_ADDR_VAR 0 6
53564: PUSH
53565: LD_INT 25
53567: ST_TO_ADDR
// result := false ;
53568: LD_ADDR_VAR 0 4
53572: PUSH
53573: LD_INT 0
53575: ST_TO_ADDR
// for i := 0 to 5 do
53576: LD_ADDR_VAR 0 5
53580: PUSH
53581: DOUBLE
53582: LD_INT 0
53584: DEC
53585: ST_TO_ADDR
53586: LD_INT 5
53588: PUSH
53589: FOR_TO
53590: IFFALSE 53657
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
53592: LD_VAR 0 1
53596: PPUSH
53597: LD_VAR 0 5
53601: PPUSH
53602: LD_VAR 0 6
53606: PPUSH
53607: CALL_OW 272
53611: PPUSH
53612: LD_VAR 0 2
53616: PPUSH
53617: LD_VAR 0 5
53621: PPUSH
53622: LD_VAR 0 6
53626: PPUSH
53627: CALL_OW 273
53631: PPUSH
53632: LD_VAR 0 3
53636: PPUSH
53637: CALL_OW 309
53641: IFFALSE 53655
// begin result := true ;
53643: LD_ADDR_VAR 0 4
53647: PUSH
53648: LD_INT 1
53650: ST_TO_ADDR
// exit ;
53651: POP
53652: POP
53653: GO 53659
// end ;
53655: GO 53589
53657: POP
53658: POP
// end ;
53659: LD_VAR 0 4
53663: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
53664: LD_INT 0
53666: PPUSH
53667: PPUSH
53668: PPUSH
// if btype = b_depot then
53669: LD_VAR 0 2
53673: PUSH
53674: LD_INT 0
53676: EQUAL
53677: IFFALSE 53689
// begin result := true ;
53679: LD_ADDR_VAR 0 3
53683: PUSH
53684: LD_INT 1
53686: ST_TO_ADDR
// exit ;
53687: GO 53809
// end ; pom := GetBase ( depot ) ;
53689: LD_ADDR_VAR 0 4
53693: PUSH
53694: LD_VAR 0 1
53698: PPUSH
53699: CALL_OW 274
53703: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
53704: LD_ADDR_VAR 0 5
53708: PUSH
53709: LD_VAR 0 2
53713: PPUSH
53714: LD_VAR 0 1
53718: PPUSH
53719: CALL_OW 248
53723: PPUSH
53724: CALL_OW 450
53728: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
53729: LD_ADDR_VAR 0 3
53733: PUSH
53734: LD_VAR 0 4
53738: PPUSH
53739: LD_INT 1
53741: PPUSH
53742: CALL_OW 275
53746: PUSH
53747: LD_VAR 0 5
53751: PUSH
53752: LD_INT 1
53754: ARRAY
53755: GREATEREQUAL
53756: IFFALSE 53782
53758: PUSH
53759: LD_VAR 0 4
53763: PPUSH
53764: LD_INT 2
53766: PPUSH
53767: CALL_OW 275
53771: PUSH
53772: LD_VAR 0 5
53776: PUSH
53777: LD_INT 2
53779: ARRAY
53780: GREATEREQUAL
53781: AND
53782: IFFALSE 53808
53784: PUSH
53785: LD_VAR 0 4
53789: PPUSH
53790: LD_INT 3
53792: PPUSH
53793: CALL_OW 275
53797: PUSH
53798: LD_VAR 0 5
53802: PUSH
53803: LD_INT 3
53805: ARRAY
53806: GREATEREQUAL
53807: AND
53808: ST_TO_ADDR
// end ;
53809: LD_VAR 0 3
53813: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
53814: LD_INT 0
53816: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
53817: LD_VAR 0 1
53821: PPUSH
53822: LD_VAR 0 2
53826: PPUSH
53827: LD_INT 0
53829: PPUSH
53830: LD_INT 0
53832: PPUSH
53833: LD_INT 1
53835: PPUSH
53836: LD_INT 0
53838: PPUSH
53839: CALL_OW 587
// end ;
53843: LD_VAR 0 3
53847: RET
// export function CenterOnNow ( unit ) ; begin
53848: LD_INT 0
53850: PPUSH
// result := IsInUnit ( unit ) ;
53851: LD_ADDR_VAR 0 2
53855: PUSH
53856: LD_VAR 0 1
53860: PPUSH
53861: CALL_OW 310
53865: ST_TO_ADDR
// if not result then
53866: LD_VAR 0 2
53870: NOT
53871: IFFALSE 53883
// result := unit ;
53873: LD_ADDR_VAR 0 2
53877: PUSH
53878: LD_VAR 0 1
53882: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
53883: LD_VAR 0 1
53887: PPUSH
53888: CALL_OW 87
// end ;
53892: LD_VAR 0 2
53896: RET
// export function ComMoveHex ( unit , hex ) ; begin
53897: LD_INT 0
53899: PPUSH
// if not hex then
53900: LD_VAR 0 2
53904: NOT
53905: IFFALSE 53909
// exit ;
53907: GO 53962
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
53909: LD_VAR 0 2
53913: PUSH
53914: LD_INT 1
53916: ARRAY
53917: PPUSH
53918: LD_VAR 0 2
53922: PUSH
53923: LD_INT 2
53925: ARRAY
53926: PPUSH
53927: CALL_OW 428
53931: IFFALSE 53935
// exit ;
53933: GO 53962
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
53935: LD_VAR 0 1
53939: PPUSH
53940: LD_VAR 0 2
53944: PUSH
53945: LD_INT 1
53947: ARRAY
53948: PPUSH
53949: LD_VAR 0 2
53953: PUSH
53954: LD_INT 2
53956: ARRAY
53957: PPUSH
53958: CALL_OW 111
// end ;
53962: LD_VAR 0 3
53966: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
53967: LD_INT 0
53969: PPUSH
53970: PPUSH
53971: PPUSH
// if not unit or not enemy then
53972: LD_VAR 0 1
53976: NOT
53977: IFTRUE 53986
53979: PUSH
53980: LD_VAR 0 2
53984: NOT
53985: OR
53986: IFFALSE 53990
// exit ;
53988: GO 54116
// x := GetX ( enemy ) ;
53990: LD_ADDR_VAR 0 4
53994: PUSH
53995: LD_VAR 0 2
53999: PPUSH
54000: CALL_OW 250
54004: ST_TO_ADDR
// y := GetY ( enemy ) ;
54005: LD_ADDR_VAR 0 5
54009: PUSH
54010: LD_VAR 0 2
54014: PPUSH
54015: CALL_OW 251
54019: ST_TO_ADDR
// if ValidHex ( x , y ) then
54020: LD_VAR 0 4
54024: PPUSH
54025: LD_VAR 0 5
54029: PPUSH
54030: CALL_OW 488
54034: IFFALSE 54116
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
54036: LD_VAR 0 2
54040: PPUSH
54041: CALL_OW 247
54045: PUSH
54046: LD_INT 3
54048: PUSH
54049: LD_INT 2
54051: PUSH
54052: EMPTY
54053: LIST
54054: LIST
54055: IN
54056: IFTRUE 54079
54058: PUSH
54059: LD_VAR 0 1
54063: PPUSH
54064: CALL_OW 255
54068: PPUSH
54069: LD_VAR 0 2
54073: PPUSH
54074: CALL_OW 292
54078: OR
54079: IFFALSE 54097
// ComAttackUnit ( unit , enemy ) else
54081: LD_VAR 0 1
54085: PPUSH
54086: LD_VAR 0 2
54090: PPUSH
54091: CALL_OW 115
54095: GO 54116
// ComAgressiveMove ( unit , x , y ) ;
54097: LD_VAR 0 1
54101: PPUSH
54102: LD_VAR 0 4
54106: PPUSH
54107: LD_VAR 0 5
54111: PPUSH
54112: CALL_OW 114
// end ;
54116: LD_VAR 0 3
54120: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
54121: LD_INT 0
54123: PPUSH
54124: PPUSH
54125: PPUSH
// list := AreaToList ( area , 0 ) ;
54126: LD_ADDR_VAR 0 5
54130: PUSH
54131: LD_VAR 0 1
54135: PPUSH
54136: LD_INT 0
54138: PPUSH
54139: CALL_OW 517
54143: ST_TO_ADDR
// if not list then
54144: LD_VAR 0 5
54148: NOT
54149: IFFALSE 54153
// exit ;
54151: GO 54283
// if all then
54153: LD_VAR 0 2
54157: IFFALSE 54245
// begin for i := 1 to list [ 1 ] do
54159: LD_ADDR_VAR 0 4
54163: PUSH
54164: DOUBLE
54165: LD_INT 1
54167: DEC
54168: ST_TO_ADDR
54169: LD_VAR 0 5
54173: PUSH
54174: LD_INT 1
54176: ARRAY
54177: PUSH
54178: FOR_TO
54179: IFFALSE 54241
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
54181: LD_ADDR_VAR 0 3
54185: PUSH
54186: LD_VAR 0 3
54190: PPUSH
54191: LD_VAR 0 3
54195: PUSH
54196: LD_INT 1
54198: PLUS
54199: PPUSH
54200: LD_VAR 0 5
54204: PUSH
54205: LD_INT 1
54207: ARRAY
54208: PUSH
54209: LD_VAR 0 4
54213: ARRAY
54214: PUSH
54215: LD_VAR 0 5
54219: PUSH
54220: LD_INT 2
54222: ARRAY
54223: PUSH
54224: LD_VAR 0 4
54228: ARRAY
54229: PUSH
54230: EMPTY
54231: LIST
54232: LIST
54233: PPUSH
54234: CALL_OW 1
54238: ST_TO_ADDR
54239: GO 54178
54241: POP
54242: POP
// exit ;
54243: GO 54283
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
54245: LD_ADDR_VAR 0 3
54249: PUSH
54250: LD_VAR 0 5
54254: PUSH
54255: LD_INT 1
54257: ARRAY
54258: PUSH
54259: LD_INT 1
54261: ARRAY
54262: PUSH
54263: LD_VAR 0 5
54267: PUSH
54268: LD_INT 2
54270: ARRAY
54271: PUSH
54272: LD_INT 1
54274: ARRAY
54275: PUSH
54276: EMPTY
54277: LIST
54278: LIST
54279: PUSH
54280: EMPTY
54281: LIST
54282: ST_TO_ADDR
// end ;
54283: LD_VAR 0 3
54287: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
54288: LD_INT 0
54290: PPUSH
54291: PPUSH
// list := AreaToList ( area , 0 ) ;
54292: LD_ADDR_VAR 0 4
54296: PUSH
54297: LD_VAR 0 1
54301: PPUSH
54302: LD_INT 0
54304: PPUSH
54305: CALL_OW 517
54309: ST_TO_ADDR
// if not list then
54310: LD_VAR 0 4
54314: NOT
54315: IFFALSE 54319
// exit ;
54317: GO 54360
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
54319: LD_ADDR_VAR 0 3
54323: PUSH
54324: LD_VAR 0 4
54328: PUSH
54329: LD_INT 1
54331: ARRAY
54332: PUSH
54333: LD_INT 1
54335: ARRAY
54336: PUSH
54337: LD_VAR 0 4
54341: PUSH
54342: LD_INT 2
54344: ARRAY
54345: PUSH
54346: LD_INT 1
54348: ARRAY
54349: PUSH
54350: LD_VAR 0 2
54354: PUSH
54355: EMPTY
54356: LIST
54357: LIST
54358: LIST
54359: ST_TO_ADDR
// end ;
54360: LD_VAR 0 3
54364: RET
// export function First ( array ) ; begin
54365: LD_INT 0
54367: PPUSH
// if not array then
54368: LD_VAR 0 1
54372: NOT
54373: IFFALSE 54377
// exit ;
54375: GO 54391
// result := array [ 1 ] ;
54377: LD_ADDR_VAR 0 2
54381: PUSH
54382: LD_VAR 0 1
54386: PUSH
54387: LD_INT 1
54389: ARRAY
54390: ST_TO_ADDR
// end ;
54391: LD_VAR 0 2
54395: RET
// export function Last ( array ) ; begin
54396: LD_INT 0
54398: PPUSH
// if not array then
54399: LD_VAR 0 1
54403: NOT
54404: IFFALSE 54408
// exit ;
54406: GO 54424
// result := array [ array ] ;
54408: LD_ADDR_VAR 0 2
54412: PUSH
54413: LD_VAR 0 1
54417: PUSH
54418: LD_VAR 0 1
54422: ARRAY
54423: ST_TO_ADDR
// end ;
54424: LD_VAR 0 2
54428: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
54429: LD_INT 0
54431: PPUSH
54432: PPUSH
// result := [ ] ;
54433: LD_ADDR_VAR 0 5
54437: PUSH
54438: EMPTY
54439: ST_TO_ADDR
// if not array then
54440: LD_VAR 0 1
54444: NOT
54445: IFFALSE 54449
// exit ;
54447: GO 54561
// for i := 1 to array do
54449: LD_ADDR_VAR 0 6
54453: PUSH
54454: DOUBLE
54455: LD_INT 1
54457: DEC
54458: ST_TO_ADDR
54459: LD_VAR 0 1
54463: PUSH
54464: FOR_TO
54465: IFFALSE 54559
// if array [ i ] [ index ] = value then
54467: LD_VAR 0 1
54471: PUSH
54472: LD_VAR 0 6
54476: ARRAY
54477: PUSH
54478: LD_VAR 0 2
54482: ARRAY
54483: PUSH
54484: LD_VAR 0 3
54488: EQUAL
54489: IFFALSE 54557
// begin if indexColumn then
54491: LD_VAR 0 4
54495: IFFALSE 54531
// result := Join ( result , array [ i ] [ indexColumn ] ) else
54497: LD_ADDR_VAR 0 5
54501: PUSH
54502: LD_VAR 0 5
54506: PPUSH
54507: LD_VAR 0 1
54511: PUSH
54512: LD_VAR 0 6
54516: ARRAY
54517: PUSH
54518: LD_VAR 0 4
54522: ARRAY
54523: PPUSH
54524: CALL 49569 0 2
54528: ST_TO_ADDR
54529: GO 54557
// result := Join ( result , array [ i ] ) ;
54531: LD_ADDR_VAR 0 5
54535: PUSH
54536: LD_VAR 0 5
54540: PPUSH
54541: LD_VAR 0 1
54545: PUSH
54546: LD_VAR 0 6
54550: ARRAY
54551: PPUSH
54552: CALL 49569 0 2
54556: ST_TO_ADDR
// end ;
54557: GO 54464
54559: POP
54560: POP
// end ;
54561: LD_VAR 0 5
54565: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
54566: LD_INT 0
54568: PPUSH
// if not vehicles or not parkingPoint then
54569: LD_VAR 0 1
54573: NOT
54574: IFTRUE 54583
54576: PUSH
54577: LD_VAR 0 2
54581: NOT
54582: OR
54583: IFFALSE 54587
// exit ;
54585: GO 54685
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
54587: LD_ADDR_VAR 0 1
54591: PUSH
54592: LD_VAR 0 1
54596: PPUSH
54597: LD_INT 50
54599: PUSH
54600: EMPTY
54601: LIST
54602: PUSH
54603: LD_INT 3
54605: PUSH
54606: LD_INT 92
54608: PUSH
54609: LD_VAR 0 2
54613: PUSH
54614: LD_INT 1
54616: ARRAY
54617: PUSH
54618: LD_VAR 0 2
54622: PUSH
54623: LD_INT 2
54625: ARRAY
54626: PUSH
54627: LD_INT 8
54629: PUSH
54630: EMPTY
54631: LIST
54632: LIST
54633: LIST
54634: LIST
54635: PUSH
54636: EMPTY
54637: LIST
54638: LIST
54639: PUSH
54640: EMPTY
54641: LIST
54642: LIST
54643: PPUSH
54644: CALL_OW 72
54648: ST_TO_ADDR
// if not vehicles then
54649: LD_VAR 0 1
54653: NOT
54654: IFFALSE 54658
// exit ;
54656: GO 54685
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
54658: LD_VAR 0 1
54662: PPUSH
54663: LD_VAR 0 2
54667: PUSH
54668: LD_INT 1
54670: ARRAY
54671: PPUSH
54672: LD_VAR 0 2
54676: PUSH
54677: LD_INT 2
54679: ARRAY
54680: PPUSH
54681: CALL_OW 111
// end ;
54685: LD_VAR 0 3
54689: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
54690: LD_INT 0
54692: PPUSH
54693: PPUSH
54694: PPUSH
// if not side or not area then
54695: LD_VAR 0 1
54699: NOT
54700: IFTRUE 54709
54702: PUSH
54703: LD_VAR 0 2
54707: NOT
54708: OR
54709: IFFALSE 54713
// exit ;
54711: GO 54832
// tmp := AreaToList ( area , 0 ) ;
54713: LD_ADDR_VAR 0 5
54717: PUSH
54718: LD_VAR 0 2
54722: PPUSH
54723: LD_INT 0
54725: PPUSH
54726: CALL_OW 517
54730: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
54731: LD_ADDR_VAR 0 4
54735: PUSH
54736: DOUBLE
54737: LD_INT 1
54739: DEC
54740: ST_TO_ADDR
54741: LD_VAR 0 5
54745: PUSH
54746: LD_INT 1
54748: ARRAY
54749: PUSH
54750: FOR_TO
54751: IFFALSE 54830
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
54753: LD_VAR 0 5
54757: PUSH
54758: LD_INT 1
54760: ARRAY
54761: PUSH
54762: LD_VAR 0 4
54766: ARRAY
54767: PPUSH
54768: LD_VAR 0 5
54772: PUSH
54773: LD_INT 2
54775: ARRAY
54776: PUSH
54777: LD_VAR 0 4
54781: ARRAY
54782: PPUSH
54783: CALL_OW 351
54787: IFFALSE 54828
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
54789: LD_VAR 0 5
54793: PUSH
54794: LD_INT 1
54796: ARRAY
54797: PUSH
54798: LD_VAR 0 4
54802: ARRAY
54803: PPUSH
54804: LD_VAR 0 5
54808: PUSH
54809: LD_INT 2
54811: ARRAY
54812: PUSH
54813: LD_VAR 0 4
54817: ARRAY
54818: PPUSH
54819: LD_VAR 0 1
54823: PPUSH
54824: CALL_OW 244
// end ;
54828: GO 54750
54830: POP
54831: POP
// end ;
54832: LD_VAR 0 3
54836: RET
// export function UniqueArray ( array ) ; var i ; begin
54837: LD_INT 0
54839: PPUSH
54840: PPUSH
// result := [ ] ;
54841: LD_ADDR_VAR 0 2
54845: PUSH
54846: EMPTY
54847: ST_TO_ADDR
// if not array then
54848: LD_VAR 0 1
54852: NOT
54853: IFFALSE 54857
// exit ;
54855: GO 54918
// for i := 1 to array do
54857: LD_ADDR_VAR 0 3
54861: PUSH
54862: DOUBLE
54863: LD_INT 1
54865: DEC
54866: ST_TO_ADDR
54867: LD_VAR 0 1
54871: PUSH
54872: FOR_TO
54873: IFFALSE 54916
// if not array [ i ] in result then
54875: LD_VAR 0 1
54879: PUSH
54880: LD_VAR 0 3
54884: ARRAY
54885: PUSH
54886: LD_VAR 0 2
54890: IN
54891: NOT
54892: IFFALSE 54914
// result := Join ( result , i ) ;
54894: LD_ADDR_VAR 0 2
54898: PUSH
54899: LD_VAR 0 2
54903: PPUSH
54904: LD_VAR 0 3
54908: PPUSH
54909: CALL 49569 0 2
54913: ST_TO_ADDR
54914: GO 54872
54916: POP
54917: POP
// end ; end_of_file
54918: LD_VAR 0 2
54922: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
54923: LD_VAR 0 1
54927: PUSH
54928: LD_INT 200
54930: DOUBLE
54931: GREATEREQUAL
54932: IFFALSE 54940
54934: LD_INT 299
54936: DOUBLE
54937: LESSEQUAL
54938: IFTRUE 54942
54940: GO 54974
54942: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
54943: LD_VAR 0 1
54947: PPUSH
54948: LD_VAR 0 2
54952: PPUSH
54953: LD_VAR 0 3
54957: PPUSH
54958: LD_VAR 0 4
54962: PPUSH
54963: LD_VAR 0 5
54967: PPUSH
54968: CALL 55836 0 5
54972: GO 55051
54974: LD_INT 300
54976: DOUBLE
54977: GREATEREQUAL
54978: IFFALSE 54986
54980: LD_INT 399
54982: DOUBLE
54983: LESSEQUAL
54984: IFTRUE 54988
54986: GO 55050
54988: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
54989: LD_VAR 0 1
54993: PPUSH
54994: LD_VAR 0 2
54998: PPUSH
54999: LD_VAR 0 3
55003: PPUSH
55004: LD_VAR 0 4
55008: PPUSH
55009: LD_VAR 0 5
55013: PPUSH
55014: LD_VAR 0 6
55018: PPUSH
55019: LD_VAR 0 7
55023: PPUSH
55024: LD_VAR 0 8
55028: PPUSH
55029: LD_VAR 0 9
55033: PPUSH
55034: LD_VAR 0 10
55038: PPUSH
55039: LD_VAR 0 11
55043: PPUSH
55044: CALL 63938 0 11
55048: GO 55051
55050: POP
// end ;
55051: PPOPN 11
55053: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
55054: LD_VAR 0 1
55058: PPUSH
55059: LD_VAR 0 2
55063: PPUSH
55064: LD_VAR 0 3
55068: PPUSH
55069: LD_VAR 0 4
55073: PPUSH
55074: LD_VAR 0 5
55078: PPUSH
55079: CALL 55136 0 5
// end ; end_of_file
55083: PPOPN 5
55085: END
// export function SOS_UnitDestroyed ( un ) ; begin
55086: LD_INT 0
55088: PPUSH
// ComRadiation ( un ) ;
55089: LD_VAR 0 1
55093: PPUSH
55094: CALL 56256 0 1
// end ;
55098: LD_VAR 0 2
55102: RET
// export function SOS_UnitKamikazed ( un ) ; begin
55103: LD_INT 0
55105: PPUSH
// ComRadiation ( un ) ;
55106: LD_VAR 0 1
55110: PPUSH
55111: CALL 56256 0 1
// end ;
55115: LD_VAR 0 2
55119: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
55120: LD_INT 0
55122: PPUSH
// end ;
55123: LD_VAR 0 4
55127: RET
// export function SOS_Command ( cmd ) ; begin
55128: LD_INT 0
55130: PPUSH
// end ;
55131: LD_VAR 0 2
55135: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
55136: LD_INT 0
55138: PPUSH
// end ;
55139: LD_VAR 0 6
55143: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
55144: LD_INT 0
55146: PPUSH
55147: PPUSH
55148: PPUSH
55149: PPUSH
55150: PPUSH
// if not vehicle or not factory then
55151: LD_VAR 0 1
55155: NOT
55156: IFTRUE 55165
55158: PUSH
55159: LD_VAR 0 2
55163: NOT
55164: OR
55165: IFFALSE 55169
// exit ;
55167: GO 55831
// weapon := GetWeapon ( vehicle ) ;
55169: LD_ADDR_VAR 0 7
55173: PUSH
55174: LD_VAR 0 1
55178: PPUSH
55179: CALL_OW 264
55183: ST_TO_ADDR
// if weapon = ar_miner then
55184: LD_VAR 0 7
55188: PUSH
55189: LD_INT 81
55191: EQUAL
55192: IFFALSE 55249
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
55194: LD_ADDR_EXP 57
55198: PUSH
55199: LD_EXP 57
55203: PPUSH
55204: LD_EXP 57
55208: PUSH
55209: LD_INT 1
55211: PLUS
55212: PPUSH
55213: LD_VAR 0 1
55217: PPUSH
55218: CALL_OW 1
55222: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
55223: LD_ADDR_EXP 58
55227: PUSH
55228: LD_EXP 58
55232: PPUSH
55233: LD_EXP 58
55237: PUSH
55238: LD_INT 1
55240: PLUS
55241: PPUSH
55242: EMPTY
55243: PPUSH
55244: CALL_OW 1
55248: ST_TO_ADDR
// end ; if not factoryWaypoints then
55249: LD_EXP 61
55253: NOT
55254: IFFALSE 55258
// exit ;
55256: GO 55831
// for i := 1 to Count ( factoryWaypoints ) do
55258: LD_ADDR_VAR 0 4
55262: PUSH
55263: DOUBLE
55264: LD_INT 1
55266: DEC
55267: ST_TO_ADDR
55268: LD_EXP 61
55272: PPUSH
55273: CALL 13593 0 1
55277: PUSH
55278: FOR_TO
55279: IFFALSE 55829
// if factoryWaypoints [ i ] [ 2 ] = factory then
55281: LD_EXP 61
55285: PUSH
55286: LD_VAR 0 4
55290: ARRAY
55291: PUSH
55292: LD_INT 2
55294: ARRAY
55295: PUSH
55296: LD_VAR 0 2
55300: EQUAL
55301: IFFALSE 55827
// begin if GetControl ( vehicle ) = control_manual then
55303: LD_VAR 0 1
55307: PPUSH
55308: CALL_OW 263
55312: PUSH
55313: LD_INT 1
55315: EQUAL
55316: IFFALSE 55680
// begin driver := IsDrivenBy ( vehicle ) ;
55318: LD_ADDR_VAR 0 5
55322: PUSH
55323: LD_VAR 0 1
55327: PPUSH
55328: CALL_OW 311
55332: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
55333: LD_VAR 0 5
55337: PUSH
55338: LD_EXP 62
55342: IN
55343: IFTRUE 55357
55345: PUSH
55346: LD_VAR 0 1
55350: PUSH
55351: LD_EXP 62
55355: IN
55356: OR
55357: IFFALSE 55363
// exit ;
55359: POP
55360: POP
55361: GO 55831
// if not HasTask ( driver ) then
55363: LD_VAR 0 5
55367: PPUSH
55368: CALL_OW 314
55372: NOT
55373: IFFALSE 55678
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
55375: LD_ADDR_EXP 62
55379: PUSH
55380: LD_EXP 62
55384: PPUSH
55385: LD_VAR 0 5
55389: PPUSH
55390: CALL 49569 0 2
55394: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
55395: LD_ADDR_EXP 62
55399: PUSH
55400: LD_EXP 62
55404: PPUSH
55405: LD_VAR 0 1
55409: PPUSH
55410: CALL 49569 0 2
55414: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
55415: LD_ADDR_VAR 0 6
55419: PUSH
55420: LD_EXP 61
55424: PUSH
55425: LD_VAR 0 4
55429: ARRAY
55430: PUSH
55431: LD_INT 3
55433: ARRAY
55434: PPUSH
55435: LD_EXP 61
55439: PUSH
55440: LD_VAR 0 4
55444: ARRAY
55445: PUSH
55446: LD_INT 4
55448: ARRAY
55449: PPUSH
55450: CALL_OW 428
55454: ST_TO_ADDR
// if hex then
55455: LD_VAR 0 6
55459: IFFALSE 55477
// ComMoveUnit ( driver , hex ) else
55461: LD_VAR 0 5
55465: PPUSH
55466: LD_VAR 0 6
55470: PPUSH
55471: CALL_OW 112
55475: GO 55561
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
55477: LD_VAR 0 1
55481: PPUSH
55482: LD_EXP 61
55486: PUSH
55487: LD_VAR 0 4
55491: ARRAY
55492: PUSH
55493: LD_INT 3
55495: ARRAY
55496: PPUSH
55497: LD_EXP 61
55501: PUSH
55502: LD_VAR 0 4
55506: ARRAY
55507: PUSH
55508: LD_INT 4
55510: ARRAY
55511: PPUSH
55512: CALL_OW 297
55516: PUSH
55517: LD_INT 0
55519: GREATER
55520: IFFALSE 55561
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
55522: LD_VAR 0 5
55526: PPUSH
55527: LD_EXP 61
55531: PUSH
55532: LD_VAR 0 4
55536: ARRAY
55537: PUSH
55538: LD_INT 3
55540: ARRAY
55541: PPUSH
55542: LD_EXP 61
55546: PUSH
55547: LD_VAR 0 4
55551: ARRAY
55552: PUSH
55553: LD_INT 4
55555: ARRAY
55556: PPUSH
55557: CALL_OW 111
// AddComExitVehicle ( driver ) ;
55561: LD_VAR 0 5
55565: PPUSH
55566: CALL_OW 181
// if Multiplayer then
55570: LD_OWVAR 4
55574: IFFALSE 55623
// begin repeat wait ( 10 ) ;
55576: LD_INT 10
55578: PPUSH
55579: CALL_OW 67
// until not IsInUnit ( driver ) ;
55583: LD_VAR 0 5
55587: PPUSH
55588: CALL_OW 310
55592: NOT
55593: IFFALSE 55576
// if not HasTask ( driver ) then
55595: LD_VAR 0 5
55599: PPUSH
55600: CALL_OW 314
55604: NOT
55605: IFFALSE 55621
// ComEnterUnit ( driver , factory ) ;
55607: LD_VAR 0 5
55611: PPUSH
55612: LD_VAR 0 2
55616: PPUSH
55617: CALL_OW 120
// end else
55621: GO 55637
// AddComEnterUnit ( driver , factory ) ;
55623: LD_VAR 0 5
55627: PPUSH
55628: LD_VAR 0 2
55632: PPUSH
55633: CALL_OW 180
// wait ( 0 0$1 ) ;
55637: LD_INT 35
55639: PPUSH
55640: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
55644: LD_ADDR_EXP 62
55648: PUSH
55649: LD_EXP 62
55653: PUSH
55654: LD_VAR 0 5
55658: DIFF
55659: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
55660: LD_ADDR_EXP 62
55664: PUSH
55665: LD_EXP 62
55669: PUSH
55670: LD_VAR 0 1
55674: DIFF
55675: ST_TO_ADDR
// break ;
55676: GO 55829
// end ; end else
55678: GO 55827
// if GetControl ( vehicle ) = control_remote then
55680: LD_VAR 0 1
55684: PPUSH
55685: CALL_OW 263
55689: PUSH
55690: LD_INT 2
55692: EQUAL
55693: IFFALSE 55779
// begin wait ( 0 0$2 ) ;
55695: LD_INT 70
55697: PPUSH
55698: CALL_OW 67
// repeat wait ( 10 ) ;
55702: LD_INT 10
55704: PPUSH
55705: CALL_OW 67
// Connect ( vehicle ) ;
55709: LD_VAR 0 1
55713: PPUSH
55714: CALL 19871 0 1
// until IsControledBy ( vehicle ) ;
55718: LD_VAR 0 1
55722: PPUSH
55723: CALL_OW 312
55727: IFFALSE 55702
// wait ( 10 ) ;
55729: LD_INT 10
55731: PPUSH
55732: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
55736: LD_VAR 0 1
55740: PPUSH
55741: LD_EXP 61
55745: PUSH
55746: LD_VAR 0 4
55750: ARRAY
55751: PUSH
55752: LD_INT 3
55754: ARRAY
55755: PPUSH
55756: LD_EXP 61
55760: PUSH
55761: LD_VAR 0 4
55765: ARRAY
55766: PUSH
55767: LD_INT 4
55769: ARRAY
55770: PPUSH
55771: CALL_OW 111
// break ;
55775: GO 55829
// end else
55777: GO 55827
// begin wait ( 0 0$3 ) ;
55779: LD_INT 105
55781: PPUSH
55782: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
55786: LD_VAR 0 1
55790: PPUSH
55791: LD_EXP 61
55795: PUSH
55796: LD_VAR 0 4
55800: ARRAY
55801: PUSH
55802: LD_INT 3
55804: ARRAY
55805: PPUSH
55806: LD_EXP 61
55810: PUSH
55811: LD_VAR 0 4
55815: ARRAY
55816: PUSH
55817: LD_INT 4
55819: ARRAY
55820: PPUSH
55821: CALL_OW 111
// break ;
55825: GO 55829
// end ; end ;
55827: GO 55278
55829: POP
55830: POP
// end ;
55831: LD_VAR 0 3
55835: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
55836: LD_INT 0
55838: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
55839: LD_VAR 0 1
55843: PUSH
55844: LD_INT 250
55846: EQUAL
55847: IFFALSE 55864
55849: PUSH
55850: LD_VAR 0 2
55854: PPUSH
55855: CALL_OW 264
55859: PUSH
55860: LD_INT 81
55862: EQUAL
55863: AND
55864: IFFALSE 55885
// MinerPlaceMine ( unit , x , y ) ;
55866: LD_VAR 0 2
55870: PPUSH
55871: LD_VAR 0 4
55875: PPUSH
55876: LD_VAR 0 5
55880: PPUSH
55881: CALL 59231 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
55885: LD_VAR 0 1
55889: PUSH
55890: LD_INT 251
55892: EQUAL
55893: IFFALSE 55910
55895: PUSH
55896: LD_VAR 0 2
55900: PPUSH
55901: CALL_OW 264
55905: PUSH
55906: LD_INT 81
55908: EQUAL
55909: AND
55910: IFFALSE 55931
// MinerDetonateMine ( unit , x , y ) ;
55912: LD_VAR 0 2
55916: PPUSH
55917: LD_VAR 0 4
55921: PPUSH
55922: LD_VAR 0 5
55926: PPUSH
55927: CALL 59638 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
55931: LD_VAR 0 1
55935: PUSH
55936: LD_INT 252
55938: EQUAL
55939: IFFALSE 55956
55941: PUSH
55942: LD_VAR 0 2
55946: PPUSH
55947: CALL_OW 264
55951: PUSH
55952: LD_INT 81
55954: EQUAL
55955: AND
55956: IFFALSE 55977
// MinerCreateMinefield ( unit , x , y ) ;
55958: LD_VAR 0 2
55962: PPUSH
55963: LD_VAR 0 4
55967: PPUSH
55968: LD_VAR 0 5
55972: PPUSH
55973: CALL 59870 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
55977: LD_VAR 0 1
55981: PUSH
55982: LD_INT 253
55984: EQUAL
55985: IFFALSE 56002
55987: PUSH
55988: LD_VAR 0 2
55992: PPUSH
55993: CALL_OW 257
55997: PUSH
55998: LD_INT 5
56000: EQUAL
56001: AND
56002: IFFALSE 56023
// ComBinocular ( unit , x , y ) ;
56004: LD_VAR 0 2
56008: PPUSH
56009: LD_VAR 0 4
56013: PPUSH
56014: LD_VAR 0 5
56018: PPUSH
56019: CALL 60245 0 3
// if selectedUnit then
56023: LD_VAR 0 3
56027: IFFALSE 56087
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
56029: LD_VAR 0 1
56033: PUSH
56034: LD_INT 254
56036: EQUAL
56037: IFFALSE 56054
56039: PUSH
56040: LD_VAR 0 2
56044: PPUSH
56045: CALL_OW 264
56049: PUSH
56050: LD_INT 99
56052: EQUAL
56053: AND
56054: IFFALSE 56071
56056: PUSH
56057: LD_VAR 0 3
56061: PPUSH
56062: CALL_OW 263
56066: PUSH
56067: LD_INT 3
56069: EQUAL
56070: AND
56071: IFFALSE 56087
// HackDestroyVehicle ( unit , selectedUnit ) ;
56073: LD_VAR 0 2
56077: PPUSH
56078: LD_VAR 0 3
56082: PPUSH
56083: CALL 58421 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
56087: LD_VAR 0 1
56091: PUSH
56092: LD_INT 255
56094: EQUAL
56095: IFFALSE 56119
56097: PUSH
56098: LD_VAR 0 2
56102: PPUSH
56103: CALL_OW 264
56107: PUSH
56108: LD_INT 14
56110: PUSH
56111: LD_INT 53
56113: PUSH
56114: EMPTY
56115: LIST
56116: LIST
56117: IN
56118: AND
56119: IFFALSE 56137
56121: PUSH
56122: LD_VAR 0 4
56126: PPUSH
56127: LD_VAR 0 5
56131: PPUSH
56132: CALL_OW 488
56136: AND
56137: IFFALSE 56161
// CutTreeXYR ( unit , x , y , 12 ) ;
56139: LD_VAR 0 2
56143: PPUSH
56144: LD_VAR 0 4
56148: PPUSH
56149: LD_VAR 0 5
56153: PPUSH
56154: LD_INT 12
56156: PPUSH
56157: CALL 56352 0 4
// if cmd = 256 then
56161: LD_VAR 0 1
56165: PUSH
56166: LD_INT 256
56168: EQUAL
56169: IFFALSE 56190
// SetFactoryWaypoint ( unit , x , y ) ;
56171: LD_VAR 0 2
56175: PPUSH
56176: LD_VAR 0 4
56180: PPUSH
56181: LD_VAR 0 5
56185: PPUSH
56186: CALL 63946 0 3
// if cmd = 257 then
56190: LD_VAR 0 1
56194: PUSH
56195: LD_INT 257
56197: EQUAL
56198: IFFALSE 56219
// SetWarehouseGatheringPoint ( unit , x , y ) ;
56200: LD_VAR 0 2
56204: PPUSH
56205: LD_VAR 0 4
56209: PPUSH
56210: LD_VAR 0 5
56214: PPUSH
56215: CALL 64442 0 3
// if cmd = 258 then
56219: LD_VAR 0 1
56223: PUSH
56224: LD_INT 258
56226: EQUAL
56227: IFFALSE 56251
// BurnTreeXYR ( unit , x , y , 8 ) ;
56229: LD_VAR 0 2
56233: PPUSH
56234: LD_VAR 0 4
56238: PPUSH
56239: LD_VAR 0 5
56243: PPUSH
56244: LD_INT 8
56246: PPUSH
56247: CALL 56774 0 4
// end ;
56251: LD_VAR 0 6
56255: RET
// export function ComRadiation ( un ) ; var eff ; begin
56256: LD_INT 0
56258: PPUSH
56259: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
56260: LD_VAR 0 1
56264: PPUSH
56265: CALL_OW 264
56269: PUSH
56270: LD_INT 91
56272: NONEQUAL
56273: IFFALSE 56277
// exit ;
56275: GO 56347
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
56277: LD_INT 68
56279: PPUSH
56280: LD_VAR 0 1
56284: PPUSH
56285: CALL_OW 255
56289: PPUSH
56290: CALL_OW 321
56294: PUSH
56295: LD_INT 2
56297: EQUAL
56298: IFFALSE 56310
// eff := 50 else
56300: LD_ADDR_VAR 0 3
56304: PUSH
56305: LD_INT 50
56307: ST_TO_ADDR
56308: GO 56318
// eff := 25 ;
56310: LD_ADDR_VAR 0 3
56314: PUSH
56315: LD_INT 25
56317: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
56318: LD_VAR 0 1
56322: PPUSH
56323: CALL_OW 250
56327: PPUSH
56328: LD_VAR 0 1
56332: PPUSH
56333: CALL_OW 251
56337: PPUSH
56338: LD_VAR 0 3
56342: PPUSH
56343: CALL_OW 495
// end ;
56347: LD_VAR 0 2
56351: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
56352: LD_INT 0
56354: PPUSH
56355: PPUSH
56356: PPUSH
56357: PPUSH
56358: PPUSH
56359: PPUSH
56360: PPUSH
56361: PPUSH
56362: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
56363: LD_VAR 0 1
56367: PPUSH
56368: CALL_OW 302
56372: NOT
56373: IFTRUE 56392
56375: PUSH
56376: LD_VAR 0 2
56380: PPUSH
56381: LD_VAR 0 3
56385: PPUSH
56386: CALL_OW 488
56390: NOT
56391: OR
56392: IFTRUE 56401
56394: PUSH
56395: LD_VAR 0 4
56399: NOT
56400: OR
56401: IFFALSE 56405
// exit ;
56403: GO 56769
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
56405: LD_VAR 0 1
56409: PPUSH
56410: CALL_OW 437
56414: PPUSH
56415: CALL 13593 0 1
56419: PUSH
56420: LD_INT 10
56422: GREATER
56423: IFFALSE 56427
// exit ;
56425: GO 56769
// list := [ ] ;
56427: LD_ADDR_VAR 0 13
56431: PUSH
56432: EMPTY
56433: ST_TO_ADDR
// if x - r < 0 then
56434: LD_VAR 0 2
56438: PUSH
56439: LD_VAR 0 4
56443: MINUS
56444: PUSH
56445: LD_INT 0
56447: LESS
56448: IFFALSE 56460
// min_x := 0 else
56450: LD_ADDR_VAR 0 7
56454: PUSH
56455: LD_INT 0
56457: ST_TO_ADDR
56458: GO 56476
// min_x := x - r ;
56460: LD_ADDR_VAR 0 7
56464: PUSH
56465: LD_VAR 0 2
56469: PUSH
56470: LD_VAR 0 4
56474: MINUS
56475: ST_TO_ADDR
// if y - r < 0 then
56476: LD_VAR 0 3
56480: PUSH
56481: LD_VAR 0 4
56485: MINUS
56486: PUSH
56487: LD_INT 0
56489: LESS
56490: IFFALSE 56502
// min_y := 0 else
56492: LD_ADDR_VAR 0 8
56496: PUSH
56497: LD_INT 0
56499: ST_TO_ADDR
56500: GO 56518
// min_y := y - r ;
56502: LD_ADDR_VAR 0 8
56506: PUSH
56507: LD_VAR 0 3
56511: PUSH
56512: LD_VAR 0 4
56516: MINUS
56517: ST_TO_ADDR
// max_x := x + r ;
56518: LD_ADDR_VAR 0 9
56522: PUSH
56523: LD_VAR 0 2
56527: PUSH
56528: LD_VAR 0 4
56532: PLUS
56533: ST_TO_ADDR
// max_y := y + r ;
56534: LD_ADDR_VAR 0 10
56538: PUSH
56539: LD_VAR 0 3
56543: PUSH
56544: LD_VAR 0 4
56548: PLUS
56549: ST_TO_ADDR
// for _x = min_x to max_x do
56550: LD_ADDR_VAR 0 11
56554: PUSH
56555: DOUBLE
56556: LD_VAR 0 7
56560: DEC
56561: ST_TO_ADDR
56562: LD_VAR 0 9
56566: PUSH
56567: FOR_TO
56568: IFFALSE 56687
// for _y = min_y to max_y do
56570: LD_ADDR_VAR 0 12
56574: PUSH
56575: DOUBLE
56576: LD_VAR 0 8
56580: DEC
56581: ST_TO_ADDR
56582: LD_VAR 0 10
56586: PUSH
56587: FOR_TO
56588: IFFALSE 56683
// begin if not ValidHex ( _x , _y ) then
56590: LD_VAR 0 11
56594: PPUSH
56595: LD_VAR 0 12
56599: PPUSH
56600: CALL_OW 488
56604: NOT
56605: IFFALSE 56609
// continue ;
56607: GO 56587
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
56609: LD_VAR 0 11
56613: PPUSH
56614: LD_VAR 0 12
56618: PPUSH
56619: CALL_OW 351
56623: IFFALSE 56641
56625: PUSH
56626: LD_VAR 0 11
56630: PPUSH
56631: LD_VAR 0 12
56635: PPUSH
56636: CALL_OW 554
56640: AND
56641: IFFALSE 56681
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
56643: LD_ADDR_VAR 0 13
56647: PUSH
56648: LD_VAR 0 13
56652: PPUSH
56653: LD_VAR 0 13
56657: PUSH
56658: LD_INT 1
56660: PLUS
56661: PPUSH
56662: LD_VAR 0 11
56666: PUSH
56667: LD_VAR 0 12
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: PPUSH
56676: CALL_OW 2
56680: ST_TO_ADDR
// end ;
56681: GO 56587
56683: POP
56684: POP
56685: GO 56567
56687: POP
56688: POP
// if not list then
56689: LD_VAR 0 13
56693: NOT
56694: IFFALSE 56698
// exit ;
56696: GO 56769
// for i in list do
56698: LD_ADDR_VAR 0 6
56702: PUSH
56703: LD_VAR 0 13
56707: PUSH
56708: FOR_IN
56709: IFFALSE 56767
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
56711: LD_VAR 0 1
56715: PPUSH
56716: LD_STRING M
56718: PUSH
56719: LD_VAR 0 6
56723: PUSH
56724: LD_INT 1
56726: ARRAY
56727: PUSH
56728: LD_VAR 0 6
56732: PUSH
56733: LD_INT 2
56735: ARRAY
56736: PUSH
56737: LD_INT 0
56739: PUSH
56740: LD_INT 0
56742: PUSH
56743: LD_INT 0
56745: PUSH
56746: LD_INT 0
56748: PUSH
56749: EMPTY
56750: LIST
56751: LIST
56752: LIST
56753: LIST
56754: LIST
56755: LIST
56756: LIST
56757: PUSH
56758: EMPTY
56759: LIST
56760: PPUSH
56761: CALL_OW 447
56765: GO 56708
56767: POP
56768: POP
// end ;
56769: LD_VAR 0 5
56773: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
56774: LD_INT 0
56776: PPUSH
56777: PPUSH
56778: PPUSH
56779: PPUSH
56780: PPUSH
56781: PPUSH
56782: PPUSH
56783: PPUSH
56784: PPUSH
56785: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
56786: LD_VAR 0 1
56790: PPUSH
56791: CALL_OW 302
56795: NOT
56796: IFTRUE 56815
56798: PUSH
56799: LD_VAR 0 2
56803: PPUSH
56804: LD_VAR 0 3
56808: PPUSH
56809: CALL_OW 488
56813: NOT
56814: OR
56815: IFTRUE 56824
56817: PUSH
56818: LD_VAR 0 4
56822: NOT
56823: OR
56824: IFFALSE 56828
// exit ;
56826: GO 57367
// if Count ( GetTaskList ( flame ) ) > 10 then
56828: LD_VAR 0 1
56832: PPUSH
56833: CALL_OW 437
56837: PPUSH
56838: CALL 13593 0 1
56842: PUSH
56843: LD_INT 10
56845: GREATER
56846: IFFALSE 56850
// exit ;
56848: GO 57367
// list := [ ] ;
56850: LD_ADDR_VAR 0 13
56854: PUSH
56855: EMPTY
56856: ST_TO_ADDR
// if x - r < 0 then
56857: LD_VAR 0 2
56861: PUSH
56862: LD_VAR 0 4
56866: MINUS
56867: PUSH
56868: LD_INT 0
56870: LESS
56871: IFFALSE 56883
// min_x := 0 else
56873: LD_ADDR_VAR 0 7
56877: PUSH
56878: LD_INT 0
56880: ST_TO_ADDR
56881: GO 56899
// min_x := x - r ;
56883: LD_ADDR_VAR 0 7
56887: PUSH
56888: LD_VAR 0 2
56892: PUSH
56893: LD_VAR 0 4
56897: MINUS
56898: ST_TO_ADDR
// if y - r < 0 then
56899: LD_VAR 0 3
56903: PUSH
56904: LD_VAR 0 4
56908: MINUS
56909: PUSH
56910: LD_INT 0
56912: LESS
56913: IFFALSE 56925
// min_y := 0 else
56915: LD_ADDR_VAR 0 8
56919: PUSH
56920: LD_INT 0
56922: ST_TO_ADDR
56923: GO 56941
// min_y := y - r ;
56925: LD_ADDR_VAR 0 8
56929: PUSH
56930: LD_VAR 0 3
56934: PUSH
56935: LD_VAR 0 4
56939: MINUS
56940: ST_TO_ADDR
// max_x := x + r ;
56941: LD_ADDR_VAR 0 9
56945: PUSH
56946: LD_VAR 0 2
56950: PUSH
56951: LD_VAR 0 4
56955: PLUS
56956: ST_TO_ADDR
// max_y := y + r ;
56957: LD_ADDR_VAR 0 10
56961: PUSH
56962: LD_VAR 0 3
56966: PUSH
56967: LD_VAR 0 4
56971: PLUS
56972: ST_TO_ADDR
// for _x = min_x to max_x do
56973: LD_ADDR_VAR 0 11
56977: PUSH
56978: DOUBLE
56979: LD_VAR 0 7
56983: DEC
56984: ST_TO_ADDR
56985: LD_VAR 0 9
56989: PUSH
56990: FOR_TO
56991: IFFALSE 57110
// for _y = min_y to max_y do
56993: LD_ADDR_VAR 0 12
56997: PUSH
56998: DOUBLE
56999: LD_VAR 0 8
57003: DEC
57004: ST_TO_ADDR
57005: LD_VAR 0 10
57009: PUSH
57010: FOR_TO
57011: IFFALSE 57106
// begin if not ValidHex ( _x , _y ) then
57013: LD_VAR 0 11
57017: PPUSH
57018: LD_VAR 0 12
57022: PPUSH
57023: CALL_OW 488
57027: NOT
57028: IFFALSE 57032
// continue ;
57030: GO 57010
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
57032: LD_VAR 0 11
57036: PPUSH
57037: LD_VAR 0 12
57041: PPUSH
57042: CALL_OW 351
57046: IFFALSE 57064
57048: PUSH
57049: LD_VAR 0 11
57053: PPUSH
57054: LD_VAR 0 12
57058: PPUSH
57059: CALL_OW 554
57063: AND
57064: IFFALSE 57104
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
57066: LD_ADDR_VAR 0 13
57070: PUSH
57071: LD_VAR 0 13
57075: PPUSH
57076: LD_VAR 0 13
57080: PUSH
57081: LD_INT 1
57083: PLUS
57084: PPUSH
57085: LD_VAR 0 11
57089: PUSH
57090: LD_VAR 0 12
57094: PUSH
57095: EMPTY
57096: LIST
57097: LIST
57098: PPUSH
57099: CALL_OW 2
57103: ST_TO_ADDR
// end ;
57104: GO 57010
57106: POP
57107: POP
57108: GO 56990
57110: POP
57111: POP
// if not list then
57112: LD_VAR 0 13
57116: NOT
57117: IFFALSE 57121
// exit ;
57119: GO 57367
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
57121: LD_ADDR_VAR 0 13
57125: PUSH
57126: LD_VAR 0 1
57130: PPUSH
57131: LD_VAR 0 13
57135: PPUSH
57136: LD_INT 1
57138: PPUSH
57139: LD_INT 1
57141: PPUSH
57142: CALL 16999 0 4
57146: ST_TO_ADDR
// ComStop ( flame ) ;
57147: LD_VAR 0 1
57151: PPUSH
57152: CALL_OW 141
// for i in list do
57156: LD_ADDR_VAR 0 6
57160: PUSH
57161: LD_VAR 0 13
57165: PUSH
57166: FOR_IN
57167: IFFALSE 57198
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
57169: LD_VAR 0 1
57173: PPUSH
57174: LD_VAR 0 6
57178: PUSH
57179: LD_INT 1
57181: ARRAY
57182: PPUSH
57183: LD_VAR 0 6
57187: PUSH
57188: LD_INT 2
57190: ARRAY
57191: PPUSH
57192: CALL_OW 176
57196: GO 57166
57198: POP
57199: POP
// repeat wait ( 0 0$1 ) ;
57200: LD_INT 35
57202: PPUSH
57203: CALL_OW 67
// task := GetTaskList ( flame ) ;
57207: LD_ADDR_VAR 0 14
57211: PUSH
57212: LD_VAR 0 1
57216: PPUSH
57217: CALL_OW 437
57221: ST_TO_ADDR
// if not task then
57222: LD_VAR 0 14
57226: NOT
57227: IFFALSE 57231
// exit ;
57229: GO 57367
// if task [ 1 ] [ 1 ] <> | then
57231: LD_VAR 0 14
57235: PUSH
57236: LD_INT 1
57238: ARRAY
57239: PUSH
57240: LD_INT 1
57242: ARRAY
57243: PUSH
57244: LD_STRING |
57246: NONEQUAL
57247: IFFALSE 57251
// exit ;
57249: GO 57367
// _x := task [ 1 ] [ 2 ] ;
57251: LD_ADDR_VAR 0 11
57255: PUSH
57256: LD_VAR 0 14
57260: PUSH
57261: LD_INT 1
57263: ARRAY
57264: PUSH
57265: LD_INT 2
57267: ARRAY
57268: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
57269: LD_ADDR_VAR 0 12
57273: PUSH
57274: LD_VAR 0 14
57278: PUSH
57279: LD_INT 1
57281: ARRAY
57282: PUSH
57283: LD_INT 3
57285: ARRAY
57286: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
57287: LD_VAR 0 11
57291: PPUSH
57292: LD_VAR 0 12
57296: PPUSH
57297: CALL_OW 351
57301: NOT
57302: IFTRUE 57321
57304: PUSH
57305: LD_VAR 0 11
57309: PPUSH
57310: LD_VAR 0 12
57314: PPUSH
57315: CALL_OW 554
57319: NOT
57320: OR
57321: IFFALSE 57355
// begin task := Delete ( task , 1 ) ;
57323: LD_ADDR_VAR 0 14
57327: PUSH
57328: LD_VAR 0 14
57332: PPUSH
57333: LD_INT 1
57335: PPUSH
57336: CALL_OW 3
57340: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
57341: LD_VAR 0 1
57345: PPUSH
57346: LD_VAR 0 14
57350: PPUSH
57351: CALL_OW 446
// end ; until not HasTask ( flame ) ;
57355: LD_VAR 0 1
57359: PPUSH
57360: CALL_OW 314
57364: NOT
57365: IFFALSE 57200
// end ;
57367: LD_VAR 0 5
57371: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
57372: LD_EXP 50
57376: NOT
57377: IFFALSE 57427
57379: GO 57381
57381: DISABLE
// begin initHack := true ;
57382: LD_ADDR_EXP 50
57386: PUSH
57387: LD_INT 1
57389: ST_TO_ADDR
// hackTanks := [ ] ;
57390: LD_ADDR_EXP 51
57394: PUSH
57395: EMPTY
57396: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
57397: LD_ADDR_EXP 52
57401: PUSH
57402: EMPTY
57403: ST_TO_ADDR
// hackLimit := 3 ;
57404: LD_ADDR_EXP 53
57408: PUSH
57409: LD_INT 3
57411: ST_TO_ADDR
// hackDist := 12 ;
57412: LD_ADDR_EXP 54
57416: PUSH
57417: LD_INT 12
57419: ST_TO_ADDR
// hackCounter := [ ] ;
57420: LD_ADDR_EXP 55
57424: PUSH
57425: EMPTY
57426: ST_TO_ADDR
// end ;
57427: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
57428: LD_EXP 50
57432: IFFALSE 57450
57434: PUSH
57435: LD_INT 34
57437: PUSH
57438: LD_INT 99
57440: PUSH
57441: EMPTY
57442: LIST
57443: LIST
57444: PPUSH
57445: CALL_OW 69
57449: AND
57450: IFFALSE 57703
57452: GO 57454
57454: DISABLE
57455: LD_INT 0
57457: PPUSH
57458: PPUSH
// begin enable ;
57459: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
57460: LD_ADDR_VAR 0 1
57464: PUSH
57465: LD_INT 34
57467: PUSH
57468: LD_INT 99
57470: PUSH
57471: EMPTY
57472: LIST
57473: LIST
57474: PPUSH
57475: CALL_OW 69
57479: PUSH
57480: FOR_IN
57481: IFFALSE 57701
// begin if not i in hackTanks then
57483: LD_VAR 0 1
57487: PUSH
57488: LD_EXP 51
57492: IN
57493: NOT
57494: IFFALSE 57577
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
57496: LD_ADDR_EXP 51
57500: PUSH
57501: LD_EXP 51
57505: PPUSH
57506: LD_EXP 51
57510: PUSH
57511: LD_INT 1
57513: PLUS
57514: PPUSH
57515: LD_VAR 0 1
57519: PPUSH
57520: CALL_OW 1
57524: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
57525: LD_ADDR_EXP 52
57529: PUSH
57530: LD_EXP 52
57534: PPUSH
57535: LD_EXP 52
57539: PUSH
57540: LD_INT 1
57542: PLUS
57543: PPUSH
57544: EMPTY
57545: PPUSH
57546: CALL_OW 1
57550: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
57551: LD_ADDR_EXP 55
57555: PUSH
57556: LD_EXP 55
57560: PPUSH
57561: LD_EXP 55
57565: PUSH
57566: LD_INT 1
57568: PLUS
57569: PPUSH
57570: EMPTY
57571: PPUSH
57572: CALL_OW 1
57576: ST_TO_ADDR
// end ; if not IsOk ( i ) then
57577: LD_VAR 0 1
57581: PPUSH
57582: CALL_OW 302
57586: NOT
57587: IFFALSE 57600
// begin HackUnlinkAll ( i ) ;
57589: LD_VAR 0 1
57593: PPUSH
57594: CALL 57706 0 1
// continue ;
57598: GO 57480
// end ; HackCheckCapturedStatus ( i ) ;
57600: LD_VAR 0 1
57604: PPUSH
57605: CALL 58151 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
57609: LD_ADDR_VAR 0 2
57613: PUSH
57614: LD_INT 81
57616: PUSH
57617: LD_VAR 0 1
57621: PPUSH
57622: CALL_OW 255
57626: PUSH
57627: EMPTY
57628: LIST
57629: LIST
57630: PUSH
57631: LD_INT 33
57633: PUSH
57634: LD_INT 3
57636: PUSH
57637: EMPTY
57638: LIST
57639: LIST
57640: PUSH
57641: LD_INT 91
57643: PUSH
57644: LD_VAR 0 1
57648: PUSH
57649: LD_EXP 54
57653: PUSH
57654: EMPTY
57655: LIST
57656: LIST
57657: LIST
57658: PUSH
57659: LD_INT 50
57661: PUSH
57662: EMPTY
57663: LIST
57664: PUSH
57665: EMPTY
57666: LIST
57667: LIST
57668: LIST
57669: LIST
57670: PPUSH
57671: CALL_OW 69
57675: ST_TO_ADDR
// if not tmp then
57676: LD_VAR 0 2
57680: NOT
57681: IFFALSE 57685
// continue ;
57683: GO 57480
// HackLink ( i , tmp ) ;
57685: LD_VAR 0 1
57689: PPUSH
57690: LD_VAR 0 2
57694: PPUSH
57695: CALL 57842 0 2
// end ;
57699: GO 57480
57701: POP
57702: POP
// end ;
57703: PPOPN 2
57705: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
57706: LD_INT 0
57708: PPUSH
57709: PPUSH
57710: PPUSH
// if not hack in hackTanks then
57711: LD_VAR 0 1
57715: PUSH
57716: LD_EXP 51
57720: IN
57721: NOT
57722: IFFALSE 57726
// exit ;
57724: GO 57837
// index := GetElementIndex ( hackTanks , hack ) ;
57726: LD_ADDR_VAR 0 4
57730: PUSH
57731: LD_EXP 51
57735: PPUSH
57736: LD_VAR 0 1
57740: PPUSH
57741: CALL 16294 0 2
57745: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
57746: LD_EXP 52
57750: PUSH
57751: LD_VAR 0 4
57755: ARRAY
57756: IFFALSE 57837
// begin for i in hackTanksCaptured [ index ] do
57758: LD_ADDR_VAR 0 3
57762: PUSH
57763: LD_EXP 52
57767: PUSH
57768: LD_VAR 0 4
57772: ARRAY
57773: PUSH
57774: FOR_IN
57775: IFFALSE 57801
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
57777: LD_VAR 0 3
57781: PUSH
57782: LD_INT 1
57784: ARRAY
57785: PPUSH
57786: LD_VAR 0 3
57790: PUSH
57791: LD_INT 2
57793: ARRAY
57794: PPUSH
57795: CALL_OW 235
57799: GO 57774
57801: POP
57802: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
57803: LD_ADDR_EXP 52
57807: PUSH
57808: LD_EXP 52
57812: PPUSH
57813: LD_VAR 0 4
57817: PPUSH
57818: EMPTY
57819: PPUSH
57820: CALL_OW 1
57824: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
57825: LD_VAR 0 1
57829: PPUSH
57830: LD_INT 0
57832: PPUSH
57833: CALL_OW 505
// end ; end ;
57837: LD_VAR 0 2
57841: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
57842: LD_INT 0
57844: PPUSH
57845: PPUSH
57846: PPUSH
// if not hack in hackTanks or not vehicles then
57847: LD_VAR 0 1
57851: PUSH
57852: LD_EXP 51
57856: IN
57857: NOT
57858: IFTRUE 57867
57860: PUSH
57861: LD_VAR 0 2
57865: NOT
57866: OR
57867: IFFALSE 57871
// exit ;
57869: GO 58146
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
57871: LD_ADDR_VAR 0 2
57875: PUSH
57876: LD_VAR 0 1
57880: PPUSH
57881: LD_VAR 0 2
57885: PPUSH
57886: LD_INT 1
57888: PPUSH
57889: LD_INT 1
57891: PPUSH
57892: CALL 16946 0 4
57896: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
57897: LD_ADDR_VAR 0 5
57901: PUSH
57902: LD_EXP 51
57906: PPUSH
57907: LD_VAR 0 1
57911: PPUSH
57912: CALL 16294 0 2
57916: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
57917: LD_EXP 52
57921: PUSH
57922: LD_VAR 0 5
57926: ARRAY
57927: PUSH
57928: LD_EXP 53
57932: LESS
57933: IFFALSE 58122
// begin for i := 1 to vehicles do
57935: LD_ADDR_VAR 0 4
57939: PUSH
57940: DOUBLE
57941: LD_INT 1
57943: DEC
57944: ST_TO_ADDR
57945: LD_VAR 0 2
57949: PUSH
57950: FOR_TO
57951: IFFALSE 58120
// begin if hackTanksCaptured [ index ] = hackLimit then
57953: LD_EXP 52
57957: PUSH
57958: LD_VAR 0 5
57962: ARRAY
57963: PUSH
57964: LD_EXP 53
57968: EQUAL
57969: IFFALSE 57973
// break ;
57971: GO 58120
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
57973: LD_ADDR_EXP 55
57977: PUSH
57978: LD_EXP 55
57982: PPUSH
57983: LD_VAR 0 5
57987: PPUSH
57988: LD_EXP 55
57992: PUSH
57993: LD_VAR 0 5
57997: ARRAY
57998: PUSH
57999: LD_INT 1
58001: PLUS
58002: PPUSH
58003: CALL_OW 1
58007: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
58008: LD_ADDR_EXP 52
58012: PUSH
58013: LD_EXP 52
58017: PPUSH
58018: LD_VAR 0 5
58022: PUSH
58023: LD_EXP 52
58027: PUSH
58028: LD_VAR 0 5
58032: ARRAY
58033: PUSH
58034: LD_INT 1
58036: PLUS
58037: PUSH
58038: EMPTY
58039: LIST
58040: LIST
58041: PPUSH
58042: LD_VAR 0 2
58046: PUSH
58047: LD_VAR 0 4
58051: ARRAY
58052: PUSH
58053: LD_VAR 0 2
58057: PUSH
58058: LD_VAR 0 4
58062: ARRAY
58063: PPUSH
58064: CALL_OW 255
58068: PUSH
58069: EMPTY
58070: LIST
58071: LIST
58072: PPUSH
58073: CALL 16511 0 3
58077: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
58078: LD_VAR 0 2
58082: PUSH
58083: LD_VAR 0 4
58087: ARRAY
58088: PPUSH
58089: LD_VAR 0 1
58093: PPUSH
58094: CALL_OW 255
58098: PPUSH
58099: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
58103: LD_VAR 0 2
58107: PUSH
58108: LD_VAR 0 4
58112: ARRAY
58113: PPUSH
58114: CALL_OW 141
// end ;
58118: GO 57950
58120: POP
58121: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
58122: LD_VAR 0 1
58126: PPUSH
58127: LD_EXP 52
58131: PUSH
58132: LD_VAR 0 5
58136: ARRAY
58137: PUSH
58138: LD_INT 0
58140: PLUS
58141: PPUSH
58142: CALL_OW 505
// end ;
58146: LD_VAR 0 3
58150: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
58151: LD_INT 0
58153: PPUSH
58154: PPUSH
58155: PPUSH
58156: PPUSH
// if not hack in hackTanks then
58157: LD_VAR 0 1
58161: PUSH
58162: LD_EXP 51
58166: IN
58167: NOT
58168: IFFALSE 58172
// exit ;
58170: GO 58416
// index := GetElementIndex ( hackTanks , hack ) ;
58172: LD_ADDR_VAR 0 4
58176: PUSH
58177: LD_EXP 51
58181: PPUSH
58182: LD_VAR 0 1
58186: PPUSH
58187: CALL 16294 0 2
58191: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
58192: LD_ADDR_VAR 0 3
58196: PUSH
58197: DOUBLE
58198: LD_EXP 52
58202: PUSH
58203: LD_VAR 0 4
58207: ARRAY
58208: INC
58209: ST_TO_ADDR
58210: LD_INT 1
58212: PUSH
58213: FOR_DOWNTO
58214: IFFALSE 58390
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
58216: LD_ADDR_VAR 0 5
58220: PUSH
58221: LD_EXP 52
58225: PUSH
58226: LD_VAR 0 4
58230: ARRAY
58231: PUSH
58232: LD_VAR 0 3
58236: ARRAY
58237: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
58238: LD_VAR 0 5
58242: PUSH
58243: LD_INT 1
58245: ARRAY
58246: PPUSH
58247: CALL_OW 302
58251: NOT
58252: IFTRUE 58280
58254: PUSH
58255: LD_VAR 0 5
58259: PUSH
58260: LD_INT 1
58262: ARRAY
58263: PPUSH
58264: CALL_OW 255
58268: PUSH
58269: LD_VAR 0 1
58273: PPUSH
58274: CALL_OW 255
58278: NONEQUAL
58279: OR
58280: IFFALSE 58388
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
58282: LD_VAR 0 5
58286: PUSH
58287: LD_INT 1
58289: ARRAY
58290: PPUSH
58291: CALL_OW 305
58295: IFFALSE 58323
58297: PUSH
58298: LD_VAR 0 5
58302: PUSH
58303: LD_INT 1
58305: ARRAY
58306: PPUSH
58307: CALL_OW 255
58311: PUSH
58312: LD_VAR 0 1
58316: PPUSH
58317: CALL_OW 255
58321: EQUAL
58322: AND
58323: IFFALSE 58347
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
58325: LD_VAR 0 5
58329: PUSH
58330: LD_INT 1
58332: ARRAY
58333: PPUSH
58334: LD_VAR 0 5
58338: PUSH
58339: LD_INT 2
58341: ARRAY
58342: PPUSH
58343: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
58347: LD_ADDR_EXP 52
58351: PUSH
58352: LD_EXP 52
58356: PPUSH
58357: LD_VAR 0 4
58361: PPUSH
58362: LD_EXP 52
58366: PUSH
58367: LD_VAR 0 4
58371: ARRAY
58372: PPUSH
58373: LD_VAR 0 3
58377: PPUSH
58378: CALL_OW 3
58382: PPUSH
58383: CALL_OW 1
58387: ST_TO_ADDR
// end ; end ;
58388: GO 58213
58390: POP
58391: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
58392: LD_VAR 0 1
58396: PPUSH
58397: LD_EXP 52
58401: PUSH
58402: LD_VAR 0 4
58406: ARRAY
58407: PUSH
58408: LD_INT 0
58410: PLUS
58411: PPUSH
58412: CALL_OW 505
// end ;
58416: LD_VAR 0 2
58420: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
58421: LD_INT 0
58423: PPUSH
58424: PPUSH
58425: PPUSH
58426: PPUSH
// if not hack in hackTanks then
58427: LD_VAR 0 1
58431: PUSH
58432: LD_EXP 51
58436: IN
58437: NOT
58438: IFFALSE 58442
// exit ;
58440: GO 58527
// index := GetElementIndex ( hackTanks , hack ) ;
58442: LD_ADDR_VAR 0 5
58446: PUSH
58447: LD_EXP 51
58451: PPUSH
58452: LD_VAR 0 1
58456: PPUSH
58457: CALL 16294 0 2
58461: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
58462: LD_ADDR_VAR 0 4
58466: PUSH
58467: DOUBLE
58468: LD_INT 1
58470: DEC
58471: ST_TO_ADDR
58472: LD_EXP 52
58476: PUSH
58477: LD_VAR 0 5
58481: ARRAY
58482: PUSH
58483: FOR_TO
58484: IFFALSE 58525
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
58486: LD_EXP 52
58490: PUSH
58491: LD_VAR 0 5
58495: ARRAY
58496: PUSH
58497: LD_VAR 0 4
58501: ARRAY
58502: PUSH
58503: LD_INT 1
58505: ARRAY
58506: PUSH
58507: LD_VAR 0 2
58511: EQUAL
58512: IFFALSE 58523
// KillUnit ( vehicle ) ;
58514: LD_VAR 0 2
58518: PPUSH
58519: CALL_OW 66
58523: GO 58483
58525: POP
58526: POP
// end ;
58527: LD_VAR 0 3
58531: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
58532: LD_EXP 56
58536: NOT
58537: IFFALSE 58670
58539: GO 58541
58541: DISABLE
58542: LD_INT 0
58544: PPUSH
// begin initMiner := true ;
58545: LD_ADDR_EXP 56
58549: PUSH
58550: LD_INT 1
58552: ST_TO_ADDR
// minersList := [ ] ;
58553: LD_ADDR_EXP 57
58557: PUSH
58558: EMPTY
58559: ST_TO_ADDR
// minerMinesList := [ ] ;
58560: LD_ADDR_EXP 58
58564: PUSH
58565: EMPTY
58566: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
58567: LD_ADDR_EXP 59
58571: PUSH
58572: LD_INT 10
58574: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
58575: LD_ADDR_VAR 0 1
58579: PUSH
58580: LD_INT 34
58582: PUSH
58583: LD_INT 81
58585: PUSH
58586: EMPTY
58587: LIST
58588: LIST
58589: PPUSH
58590: CALL_OW 69
58594: PUSH
58595: FOR_IN
58596: IFFALSE 58668
// begin if not i in minersList then
58598: LD_VAR 0 1
58602: PUSH
58603: LD_EXP 57
58607: IN
58608: NOT
58609: IFFALSE 58666
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
58611: LD_ADDR_EXP 57
58615: PUSH
58616: LD_EXP 57
58620: PPUSH
58621: LD_EXP 57
58625: PUSH
58626: LD_INT 1
58628: PLUS
58629: PPUSH
58630: LD_VAR 0 1
58634: PPUSH
58635: CALL_OW 1
58639: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
58640: LD_ADDR_EXP 58
58644: PUSH
58645: LD_EXP 58
58649: PPUSH
58650: LD_EXP 58
58654: PUSH
58655: LD_INT 1
58657: PLUS
58658: PPUSH
58659: EMPTY
58660: PPUSH
58661: CALL_OW 1
58665: ST_TO_ADDR
// end end ;
58666: GO 58595
58668: POP
58669: POP
// end ;
58670: PPOPN 1
58672: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
58673: LD_EXP 56
58677: IFFALSE 58708
58679: PUSH
58680: LD_EXP 58
58684: PPUSH
58685: CALL 13593 0 1
58689: IFTRUE 58707
58691: PUSH
58692: LD_INT 34
58694: PUSH
58695: LD_INT 81
58697: PUSH
58698: EMPTY
58699: LIST
58700: LIST
58701: PPUSH
58702: CALL_OW 69
58706: OR
58707: AND
58708: IFFALSE 59228
58710: GO 58712
58712: DISABLE
58713: LD_INT 0
58715: PPUSH
58716: PPUSH
58717: PPUSH
58718: PPUSH
// begin enable ;
58719: ENABLE
// for i := minerMinesList downto 1 do
58720: LD_ADDR_VAR 0 1
58724: PUSH
58725: DOUBLE
58726: LD_EXP 58
58730: INC
58731: ST_TO_ADDR
58732: LD_INT 1
58734: PUSH
58735: FOR_DOWNTO
58736: IFFALSE 59226
// begin side := GetSide ( minersList [ i ] ) ;
58738: LD_ADDR_VAR 0 3
58742: PUSH
58743: LD_EXP 57
58747: PUSH
58748: LD_VAR 0 1
58752: ARRAY
58753: PPUSH
58754: CALL_OW 255
58758: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
58759: LD_EXP 57
58763: PUSH
58764: LD_VAR 0 1
58768: ARRAY
58769: PPUSH
58770: CALL_OW 300
58774: IFFALSE 58795
58776: PUSH
58777: LD_VAR 0 3
58781: PUSH
58782: LD_OWVAR 2
58786: PUSH
58787: LD_INT 9
58789: PUSH
58790: EMPTY
58791: LIST
58792: LIST
58793: IN
58794: AND
58795: IFFALSE 58828
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
58797: LD_EXP 57
58801: PUSH
58802: LD_VAR 0 1
58806: ARRAY
58807: PPUSH
58808: LD_EXP 58
58812: PUSH
58813: LD_VAR 0 1
58817: ARRAY
58818: PPUSH
58819: CALL 13593 0 1
58823: PPUSH
58824: CALL_OW 505
// if not minerMinesList [ i ] then
58828: LD_EXP 58
58832: PUSH
58833: LD_VAR 0 1
58837: ARRAY
58838: NOT
58839: IFFALSE 58843
// continue ;
58841: GO 58735
// for j := minerMinesList [ i ] downto 1 do
58843: LD_ADDR_VAR 0 2
58847: PUSH
58848: DOUBLE
58849: LD_EXP 58
58853: PUSH
58854: LD_VAR 0 1
58858: ARRAY
58859: INC
58860: ST_TO_ADDR
58861: LD_INT 1
58863: PUSH
58864: FOR_DOWNTO
58865: IFFALSE 59222
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
58867: LD_EXP 57
58871: PUSH
58872: LD_VAR 0 1
58876: ARRAY
58877: PPUSH
58878: CALL_OW 301
58882: IFTRUE 58902
58884: PUSH
58885: LD_EXP 57
58889: PUSH
58890: LD_VAR 0 1
58894: ARRAY
58895: PPUSH
58896: CALL_OW 305
58900: NOT
58901: OR
58902: IFFALSE 58993
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
58904: LD_EXP 58
58908: PUSH
58909: LD_VAR 0 1
58913: ARRAY
58914: PUSH
58915: LD_VAR 0 2
58919: ARRAY
58920: PUSH
58921: LD_INT 1
58923: ARRAY
58924: PPUSH
58925: LD_EXP 58
58929: PUSH
58930: LD_VAR 0 1
58934: ARRAY
58935: PUSH
58936: LD_VAR 0 2
58940: ARRAY
58941: PUSH
58942: LD_INT 2
58944: ARRAY
58945: PPUSH
58946: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
58950: LD_ADDR_EXP 58
58954: PUSH
58955: LD_EXP 58
58959: PPUSH
58960: LD_VAR 0 1
58964: PPUSH
58965: LD_EXP 58
58969: PUSH
58970: LD_VAR 0 1
58974: ARRAY
58975: PPUSH
58976: LD_VAR 0 2
58980: PPUSH
58981: CALL_OW 3
58985: PPUSH
58986: CALL_OW 1
58990: ST_TO_ADDR
// continue ;
58991: GO 58864
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
58993: LD_ADDR_VAR 0 4
58997: PUSH
58998: LD_EXP 58
59002: PUSH
59003: LD_VAR 0 1
59007: ARRAY
59008: PUSH
59009: LD_VAR 0 2
59013: ARRAY
59014: PUSH
59015: LD_INT 1
59017: ARRAY
59018: PPUSH
59019: LD_EXP 58
59023: PUSH
59024: LD_VAR 0 1
59028: ARRAY
59029: PUSH
59030: LD_VAR 0 2
59034: ARRAY
59035: PUSH
59036: LD_INT 2
59038: ARRAY
59039: PPUSH
59040: CALL_OW 428
59044: ST_TO_ADDR
// if not tmp then
59045: LD_VAR 0 4
59049: NOT
59050: IFFALSE 59054
// continue ;
59052: GO 58864
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
59054: LD_VAR 0 4
59058: PUSH
59059: LD_INT 81
59061: PUSH
59062: LD_VAR 0 3
59066: PUSH
59067: EMPTY
59068: LIST
59069: LIST
59070: PPUSH
59071: CALL_OW 69
59075: IN
59076: IFFALSE 59126
59078: PUSH
59079: LD_EXP 58
59083: PUSH
59084: LD_VAR 0 1
59088: ARRAY
59089: PUSH
59090: LD_VAR 0 2
59094: ARRAY
59095: PUSH
59096: LD_INT 1
59098: ARRAY
59099: PPUSH
59100: LD_EXP 58
59104: PUSH
59105: LD_VAR 0 1
59109: ARRAY
59110: PUSH
59111: LD_VAR 0 2
59115: ARRAY
59116: PUSH
59117: LD_INT 2
59119: ARRAY
59120: PPUSH
59121: CALL_OW 458
59125: AND
59126: IFFALSE 59220
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
59128: LD_EXP 58
59132: PUSH
59133: LD_VAR 0 1
59137: ARRAY
59138: PUSH
59139: LD_VAR 0 2
59143: ARRAY
59144: PUSH
59145: LD_INT 1
59147: ARRAY
59148: PPUSH
59149: LD_EXP 58
59153: PUSH
59154: LD_VAR 0 1
59158: ARRAY
59159: PUSH
59160: LD_VAR 0 2
59164: ARRAY
59165: PUSH
59166: LD_INT 2
59168: ARRAY
59169: PPUSH
59170: LD_VAR 0 3
59174: PPUSH
59175: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
59179: LD_ADDR_EXP 58
59183: PUSH
59184: LD_EXP 58
59188: PPUSH
59189: LD_VAR 0 1
59193: PPUSH
59194: LD_EXP 58
59198: PUSH
59199: LD_VAR 0 1
59203: ARRAY
59204: PPUSH
59205: LD_VAR 0 2
59209: PPUSH
59210: CALL_OW 3
59214: PPUSH
59215: CALL_OW 1
59219: ST_TO_ADDR
// end ; end ;
59220: GO 58864
59222: POP
59223: POP
// end ;
59224: GO 58735
59226: POP
59227: POP
// end ;
59228: PPOPN 4
59230: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
59231: LD_INT 0
59233: PPUSH
59234: PPUSH
59235: PPUSH
59236: PPUSH
// result := false ;
59237: LD_ADDR_VAR 0 4
59241: PUSH
59242: LD_INT 0
59244: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
59245: LD_VAR 0 1
59249: PPUSH
59250: CALL_OW 264
59254: PUSH
59255: LD_INT 81
59257: EQUAL
59258: NOT
59259: IFFALSE 59263
// exit ;
59261: GO 59633
// side := GetSide ( unit ) ;
59263: LD_ADDR_VAR 0 6
59267: PUSH
59268: LD_VAR 0 1
59272: PPUSH
59273: CALL_OW 255
59277: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
59278: LD_ADDR_VAR 0 5
59282: PUSH
59283: LD_EXP 57
59287: PPUSH
59288: LD_VAR 0 1
59292: PPUSH
59293: CALL 16294 0 2
59297: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
59298: LD_EXP 58
59302: PUSH
59303: LD_VAR 0 5
59307: ARRAY
59308: PUSH
59309: LD_EXP 59
59313: GREATEREQUAL
59314: IFFALSE 59318
// exit ;
59316: GO 59633
// ComMoveXY ( unit , x , y ) ;
59318: LD_VAR 0 1
59322: PPUSH
59323: LD_VAR 0 2
59327: PPUSH
59328: LD_VAR 0 3
59332: PPUSH
59333: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
59337: LD_INT 35
59339: PPUSH
59340: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
59344: LD_VAR 0 1
59348: PPUSH
59349: LD_VAR 0 2
59353: PPUSH
59354: LD_VAR 0 3
59358: PPUSH
59359: CALL 48350 0 3
59363: NOT
59364: IFFALSE 59377
59366: PUSH
59367: LD_VAR 0 1
59371: PPUSH
59372: CALL_OW 314
59376: AND
59377: IFFALSE 59381
// exit ;
59379: GO 59633
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
59381: LD_VAR 0 2
59385: PPUSH
59386: LD_VAR 0 3
59390: PPUSH
59391: CALL_OW 428
59395: PUSH
59396: LD_VAR 0 1
59400: EQUAL
59401: IFFALSE 59415
59403: PUSH
59404: LD_VAR 0 1
59408: PPUSH
59409: CALL_OW 314
59413: NOT
59414: AND
59415: IFFALSE 59337
// if MineAtPos ( x , y ) then
59417: LD_VAR 0 2
59421: PPUSH
59422: LD_VAR 0 3
59426: PPUSH
59427: CALL_OW 458
59431: IFFALSE 59435
// exit ;
59433: GO 59633
// if your_side = side then
59435: LD_OWVAR 2
59439: PUSH
59440: LD_VAR 0 6
59444: EQUAL
59445: IFFALSE 59464
// PlaySoundXY ( x , y , PlantMine ) ;
59447: LD_VAR 0 2
59451: PPUSH
59452: LD_VAR 0 3
59456: PPUSH
59457: LD_STRING PlantMine
59459: PPUSH
59460: CALL_OW 366
// repeat wait ( 1 ) ;
59464: LD_INT 1
59466: PPUSH
59467: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
59471: LD_VAR 0 2
59475: PPUSH
59476: LD_VAR 0 3
59480: PPUSH
59481: LD_VAR 0 6
59485: PPUSH
59486: LD_INT 0
59488: PPUSH
59489: CALL_OW 454
59493: IFFALSE 59464
// if MineAtPos ( x , y ) then
59495: LD_VAR 0 2
59499: PPUSH
59500: LD_VAR 0 3
59504: PPUSH
59505: CALL_OW 458
59509: IFFALSE 59625
// begin for i in minerMinesList [ index ] do
59511: LD_ADDR_VAR 0 7
59515: PUSH
59516: LD_EXP 58
59520: PUSH
59521: LD_VAR 0 5
59525: ARRAY
59526: PUSH
59527: FOR_IN
59528: IFFALSE 59570
// if i [ 1 ] = x and i [ 2 ] = y then
59530: LD_VAR 0 7
59534: PUSH
59535: LD_INT 1
59537: ARRAY
59538: PUSH
59539: LD_VAR 0 2
59543: EQUAL
59544: IFFALSE 59562
59546: PUSH
59547: LD_VAR 0 7
59551: PUSH
59552: LD_INT 2
59554: ARRAY
59555: PUSH
59556: LD_VAR 0 3
59560: EQUAL
59561: AND
59562: IFFALSE 59568
// exit ;
59564: POP
59565: POP
59566: GO 59633
59568: GO 59527
59570: POP
59571: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
59572: LD_ADDR_EXP 58
59576: PUSH
59577: LD_EXP 58
59581: PPUSH
59582: LD_VAR 0 5
59586: PUSH
59587: LD_EXP 58
59591: PUSH
59592: LD_VAR 0 5
59596: ARRAY
59597: PUSH
59598: LD_INT 1
59600: PLUS
59601: PUSH
59602: EMPTY
59603: LIST
59604: LIST
59605: PPUSH
59606: LD_VAR 0 2
59610: PUSH
59611: LD_VAR 0 3
59615: PUSH
59616: EMPTY
59617: LIST
59618: LIST
59619: PPUSH
59620: CALL 16511 0 3
59624: ST_TO_ADDR
// end ; result := true ;
59625: LD_ADDR_VAR 0 4
59629: PUSH
59630: LD_INT 1
59632: ST_TO_ADDR
// end ;
59633: LD_VAR 0 4
59637: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
59638: LD_INT 0
59640: PPUSH
59641: PPUSH
59642: PPUSH
// if not unit in minersList then
59643: LD_VAR 0 1
59647: PUSH
59648: LD_EXP 57
59652: IN
59653: NOT
59654: IFFALSE 59658
// exit ;
59656: GO 59865
// index := GetElementIndex ( minersList , unit ) ;
59658: LD_ADDR_VAR 0 6
59662: PUSH
59663: LD_EXP 57
59667: PPUSH
59668: LD_VAR 0 1
59672: PPUSH
59673: CALL 16294 0 2
59677: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
59678: LD_ADDR_VAR 0 5
59682: PUSH
59683: DOUBLE
59684: LD_EXP 58
59688: PUSH
59689: LD_VAR 0 6
59693: ARRAY
59694: INC
59695: ST_TO_ADDR
59696: LD_INT 1
59698: PUSH
59699: FOR_DOWNTO
59700: IFFALSE 59863
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
59702: LD_EXP 58
59706: PUSH
59707: LD_VAR 0 6
59711: ARRAY
59712: PUSH
59713: LD_VAR 0 5
59717: ARRAY
59718: PUSH
59719: LD_INT 1
59721: ARRAY
59722: PPUSH
59723: LD_EXP 58
59727: PUSH
59728: LD_VAR 0 6
59732: ARRAY
59733: PUSH
59734: LD_VAR 0 5
59738: ARRAY
59739: PUSH
59740: LD_INT 2
59742: ARRAY
59743: PPUSH
59744: LD_VAR 0 2
59748: PPUSH
59749: LD_VAR 0 3
59753: PPUSH
59754: CALL_OW 298
59758: PUSH
59759: LD_INT 6
59761: LESS
59762: IFFALSE 59861
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
59764: LD_EXP 58
59768: PUSH
59769: LD_VAR 0 6
59773: ARRAY
59774: PUSH
59775: LD_VAR 0 5
59779: ARRAY
59780: PUSH
59781: LD_INT 1
59783: ARRAY
59784: PPUSH
59785: LD_EXP 58
59789: PUSH
59790: LD_VAR 0 6
59794: ARRAY
59795: PUSH
59796: LD_VAR 0 5
59800: ARRAY
59801: PUSH
59802: LD_INT 2
59804: ARRAY
59805: PPUSH
59806: LD_VAR 0 1
59810: PPUSH
59811: CALL_OW 255
59815: PPUSH
59816: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
59820: LD_ADDR_EXP 58
59824: PUSH
59825: LD_EXP 58
59829: PPUSH
59830: LD_VAR 0 6
59834: PPUSH
59835: LD_EXP 58
59839: PUSH
59840: LD_VAR 0 6
59844: ARRAY
59845: PPUSH
59846: LD_VAR 0 5
59850: PPUSH
59851: CALL_OW 3
59855: PPUSH
59856: CALL_OW 1
59860: ST_TO_ADDR
// end ; end ;
59861: GO 59699
59863: POP
59864: POP
// end ;
59865: LD_VAR 0 4
59869: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
59870: LD_INT 0
59872: PPUSH
59873: PPUSH
59874: PPUSH
59875: PPUSH
59876: PPUSH
59877: PPUSH
59878: PPUSH
59879: PPUSH
59880: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
59881: LD_VAR 0 1
59885: PPUSH
59886: CALL_OW 264
59890: PUSH
59891: LD_INT 81
59893: EQUAL
59894: NOT
59895: IFTRUE 59910
59897: PUSH
59898: LD_VAR 0 1
59902: PUSH
59903: LD_EXP 57
59907: IN
59908: NOT
59909: OR
59910: IFFALSE 59914
// exit ;
59912: GO 60240
// index := GetElementIndex ( minersList , unit ) ;
59914: LD_ADDR_VAR 0 6
59918: PUSH
59919: LD_EXP 57
59923: PPUSH
59924: LD_VAR 0 1
59928: PPUSH
59929: CALL 16294 0 2
59933: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
59934: LD_ADDR_VAR 0 8
59938: PUSH
59939: LD_EXP 59
59943: PUSH
59944: LD_EXP 58
59948: PUSH
59949: LD_VAR 0 6
59953: ARRAY
59954: MINUS
59955: ST_TO_ADDR
// if not minesFreeAmount then
59956: LD_VAR 0 8
59960: NOT
59961: IFFALSE 59965
// exit ;
59963: GO 60240
// tmp := [ ] ;
59965: LD_ADDR_VAR 0 7
59969: PUSH
59970: EMPTY
59971: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
59972: LD_ADDR_VAR 0 5
59976: PUSH
59977: DOUBLE
59978: LD_INT 1
59980: DEC
59981: ST_TO_ADDR
59982: LD_VAR 0 8
59986: PUSH
59987: FOR_TO
59988: IFFALSE 60187
// begin _d := rand ( 0 , 5 ) ;
59990: LD_ADDR_VAR 0 11
59994: PUSH
59995: LD_INT 0
59997: PPUSH
59998: LD_INT 5
60000: PPUSH
60001: CALL_OW 12
60005: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
60006: LD_ADDR_VAR 0 12
60010: PUSH
60011: LD_INT 2
60013: PPUSH
60014: LD_INT 6
60016: PPUSH
60017: CALL_OW 12
60021: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
60022: LD_ADDR_VAR 0 9
60026: PUSH
60027: LD_VAR 0 2
60031: PPUSH
60032: LD_VAR 0 11
60036: PPUSH
60037: LD_VAR 0 12
60041: PPUSH
60042: CALL_OW 272
60046: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
60047: LD_ADDR_VAR 0 10
60051: PUSH
60052: LD_VAR 0 3
60056: PPUSH
60057: LD_VAR 0 11
60061: PPUSH
60062: LD_VAR 0 12
60066: PPUSH
60067: CALL_OW 273
60071: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
60072: LD_VAR 0 9
60076: PPUSH
60077: LD_VAR 0 10
60081: PPUSH
60082: CALL_OW 488
60086: IFFALSE 60110
60088: PUSH
60089: LD_VAR 0 9
60093: PUSH
60094: LD_VAR 0 10
60098: PUSH
60099: EMPTY
60100: LIST
60101: LIST
60102: PUSH
60103: LD_VAR 0 7
60107: IN
60108: NOT
60109: AND
60110: IFFALSE 60129
60112: PUSH
60113: LD_VAR 0 9
60117: PPUSH
60118: LD_VAR 0 10
60122: PPUSH
60123: CALL_OW 458
60127: NOT
60128: AND
60129: IFFALSE 60171
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
60131: LD_ADDR_VAR 0 7
60135: PUSH
60136: LD_VAR 0 7
60140: PPUSH
60141: LD_VAR 0 7
60145: PUSH
60146: LD_INT 1
60148: PLUS
60149: PPUSH
60150: LD_VAR 0 9
60154: PUSH
60155: LD_VAR 0 10
60159: PUSH
60160: EMPTY
60161: LIST
60162: LIST
60163: PPUSH
60164: CALL_OW 1
60168: ST_TO_ADDR
60169: GO 60185
// i := i - 1 ;
60171: LD_ADDR_VAR 0 5
60175: PUSH
60176: LD_VAR 0 5
60180: PUSH
60181: LD_INT 1
60183: MINUS
60184: ST_TO_ADDR
// end ;
60185: GO 59987
60187: POP
60188: POP
// for i in tmp do
60189: LD_ADDR_VAR 0 5
60193: PUSH
60194: LD_VAR 0 7
60198: PUSH
60199: FOR_IN
60200: IFFALSE 60238
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
60202: LD_VAR 0 1
60206: PPUSH
60207: LD_VAR 0 5
60211: PUSH
60212: LD_INT 1
60214: ARRAY
60215: PPUSH
60216: LD_VAR 0 5
60220: PUSH
60221: LD_INT 2
60223: ARRAY
60224: PPUSH
60225: CALL 59231 0 3
60229: NOT
60230: IFFALSE 60236
// exit ;
60232: POP
60233: POP
60234: GO 60240
60236: GO 60199
60238: POP
60239: POP
// end ;
60240: LD_VAR 0 4
60244: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
60245: LD_INT 0
60247: PPUSH
60248: PPUSH
60249: PPUSH
60250: PPUSH
60251: PPUSH
60252: PPUSH
60253: PPUSH
60254: PPUSH
60255: PPUSH
// if GetClass ( unit ) <> class_sniper then
60256: LD_VAR 0 1
60260: PPUSH
60261: CALL_OW 257
60265: PUSH
60266: LD_INT 5
60268: NONEQUAL
60269: IFFALSE 60273
// exit ;
60271: GO 60743
// dist := 8 ;
60273: LD_ADDR_VAR 0 5
60277: PUSH
60278: LD_INT 8
60280: ST_TO_ADDR
// viewRange := 12 ;
60281: LD_ADDR_VAR 0 8
60285: PUSH
60286: LD_INT 12
60288: ST_TO_ADDR
// side := GetSide ( unit ) ;
60289: LD_ADDR_VAR 0 6
60293: PUSH
60294: LD_VAR 0 1
60298: PPUSH
60299: CALL_OW 255
60303: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
60304: LD_INT 61
60306: PPUSH
60307: LD_VAR 0 6
60311: PPUSH
60312: CALL_OW 321
60316: PUSH
60317: LD_INT 2
60319: EQUAL
60320: IFFALSE 60330
// viewRange := 16 ;
60322: LD_ADDR_VAR 0 8
60326: PUSH
60327: LD_INT 16
60329: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
60330: LD_VAR 0 1
60334: PPUSH
60335: LD_VAR 0 2
60339: PPUSH
60340: LD_VAR 0 3
60344: PPUSH
60345: CALL_OW 297
60349: PUSH
60350: LD_VAR 0 5
60354: GREATER
60355: IFFALSE 60434
// begin ComMoveXY ( unit , x , y ) ;
60357: LD_VAR 0 1
60361: PPUSH
60362: LD_VAR 0 2
60366: PPUSH
60367: LD_VAR 0 3
60371: PPUSH
60372: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
60376: LD_INT 35
60378: PPUSH
60379: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
60383: LD_VAR 0 1
60387: PPUSH
60388: LD_VAR 0 2
60392: PPUSH
60393: LD_VAR 0 3
60397: PPUSH
60398: CALL 48350 0 3
60402: NOT
60403: IFFALSE 60407
// exit ;
60405: GO 60743
// until GetDistUnitXY ( unit , x , y ) < dist ;
60407: LD_VAR 0 1
60411: PPUSH
60412: LD_VAR 0 2
60416: PPUSH
60417: LD_VAR 0 3
60421: PPUSH
60422: CALL_OW 297
60426: PUSH
60427: LD_VAR 0 5
60431: LESS
60432: IFFALSE 60376
// end ; ComTurnXY ( unit , x , y ) ;
60434: LD_VAR 0 1
60438: PPUSH
60439: LD_VAR 0 2
60443: PPUSH
60444: LD_VAR 0 3
60448: PPUSH
60449: CALL_OW 118
// repeat if Multiplayer then
60453: LD_OWVAR 4
60457: IFFALSE 60468
// wait ( 35 ) else
60459: LD_INT 35
60461: PPUSH
60462: CALL_OW 67
60466: GO 60475
// wait ( 5 ) ;
60468: LD_INT 5
60470: PPUSH
60471: CALL_OW 67
// _d := GetDir ( unit ) ;
60475: LD_ADDR_VAR 0 11
60479: PUSH
60480: LD_VAR 0 1
60484: PPUSH
60485: CALL_OW 254
60489: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
60490: LD_ADDR_VAR 0 7
60494: PUSH
60495: LD_VAR 0 1
60499: PPUSH
60500: CALL_OW 250
60504: PPUSH
60505: LD_VAR 0 1
60509: PPUSH
60510: CALL_OW 251
60514: PPUSH
60515: LD_VAR 0 2
60519: PPUSH
60520: LD_VAR 0 3
60524: PPUSH
60525: CALL 50986 0 4
60529: ST_TO_ADDR
// until dir = _d ;
60530: LD_VAR 0 7
60534: PUSH
60535: LD_VAR 0 11
60539: EQUAL
60540: IFFALSE 60453
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
60542: LD_ADDR_VAR 0 9
60546: PUSH
60547: LD_VAR 0 1
60551: PPUSH
60552: CALL_OW 250
60556: PPUSH
60557: LD_VAR 0 7
60561: PPUSH
60562: LD_VAR 0 5
60566: PPUSH
60567: CALL_OW 272
60571: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
60572: LD_ADDR_VAR 0 10
60576: PUSH
60577: LD_VAR 0 1
60581: PPUSH
60582: CALL_OW 251
60586: PPUSH
60587: LD_VAR 0 7
60591: PPUSH
60592: LD_VAR 0 5
60596: PPUSH
60597: CALL_OW 273
60601: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
60602: LD_VAR 0 9
60606: PPUSH
60607: LD_VAR 0 10
60611: PPUSH
60612: CALL_OW 488
60616: NOT
60617: IFFALSE 60621
// exit ;
60619: GO 60743
// ComAnimCustom ( unit , 1 ) ;
60621: LD_VAR 0 1
60625: PPUSH
60626: LD_INT 1
60628: PPUSH
60629: CALL_OW 592
// p := 0 ;
60633: LD_ADDR_VAR 0 12
60637: PUSH
60638: LD_INT 0
60640: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
60641: LD_VAR 0 9
60645: PPUSH
60646: LD_VAR 0 10
60650: PPUSH
60651: LD_VAR 0 6
60655: PPUSH
60656: LD_VAR 0 8
60660: PPUSH
60661: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
60665: LD_INT 35
60667: PPUSH
60668: CALL_OW 67
// p := Inc ( p ) ;
60672: LD_ADDR_VAR 0 12
60676: PUSH
60677: LD_VAR 0 12
60681: PPUSH
60682: CALL 50942 0 1
60686: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
60687: LD_VAR 0 12
60691: PUSH
60692: LD_INT 3
60694: EQUAL
60695: IFTRUE 60709
60697: PUSH
60698: LD_VAR 0 1
60702: PPUSH
60703: CALL_OW 302
60707: NOT
60708: OR
60709: IFTRUE 60722
60711: PUSH
60712: LD_VAR 0 1
60716: PPUSH
60717: CALL_OW 301
60721: OR
60722: IFFALSE 60665
// RemoveSeeing ( _x , _y , side ) ;
60724: LD_VAR 0 9
60728: PPUSH
60729: LD_VAR 0 10
60733: PPUSH
60734: LD_VAR 0 6
60738: PPUSH
60739: CALL_OW 331
// end ;
60743: LD_VAR 0 4
60747: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
60748: LD_INT 0
60750: PPUSH
60751: PPUSH
60752: PPUSH
60753: PPUSH
60754: PPUSH
60755: PPUSH
60756: PPUSH
60757: PPUSH
60758: PPUSH
60759: PPUSH
60760: PPUSH
// if not unit then
60761: LD_VAR 0 1
60765: NOT
60766: IFFALSE 60770
// exit ;
60768: GO 61041
// side := GetSide ( unit ) ;
60770: LD_ADDR_VAR 0 3
60774: PUSH
60775: LD_VAR 0 1
60779: PPUSH
60780: CALL_OW 255
60784: ST_TO_ADDR
// x := GetX ( unit ) ;
60785: LD_ADDR_VAR 0 5
60789: PUSH
60790: LD_VAR 0 1
60794: PPUSH
60795: CALL_OW 250
60799: ST_TO_ADDR
// y := GetY ( unit ) ;
60800: LD_ADDR_VAR 0 6
60804: PUSH
60805: LD_VAR 0 1
60809: PPUSH
60810: CALL_OW 251
60814: ST_TO_ADDR
// r := 8 ;
60815: LD_ADDR_VAR 0 4
60819: PUSH
60820: LD_INT 8
60822: ST_TO_ADDR
// if x - r < 0 then
60823: LD_VAR 0 5
60827: PUSH
60828: LD_VAR 0 4
60832: MINUS
60833: PUSH
60834: LD_INT 0
60836: LESS
60837: IFFALSE 60849
// min_x := 0 else
60839: LD_ADDR_VAR 0 7
60843: PUSH
60844: LD_INT 0
60846: ST_TO_ADDR
60847: GO 60865
// min_x := x - r ;
60849: LD_ADDR_VAR 0 7
60853: PUSH
60854: LD_VAR 0 5
60858: PUSH
60859: LD_VAR 0 4
60863: MINUS
60864: ST_TO_ADDR
// if y - r < 0 then
60865: LD_VAR 0 6
60869: PUSH
60870: LD_VAR 0 4
60874: MINUS
60875: PUSH
60876: LD_INT 0
60878: LESS
60879: IFFALSE 60891
// min_y := 0 else
60881: LD_ADDR_VAR 0 8
60885: PUSH
60886: LD_INT 0
60888: ST_TO_ADDR
60889: GO 60907
// min_y := y - r ;
60891: LD_ADDR_VAR 0 8
60895: PUSH
60896: LD_VAR 0 6
60900: PUSH
60901: LD_VAR 0 4
60905: MINUS
60906: ST_TO_ADDR
// max_x := x + r ;
60907: LD_ADDR_VAR 0 9
60911: PUSH
60912: LD_VAR 0 5
60916: PUSH
60917: LD_VAR 0 4
60921: PLUS
60922: ST_TO_ADDR
// max_y := y + r ;
60923: LD_ADDR_VAR 0 10
60927: PUSH
60928: LD_VAR 0 6
60932: PUSH
60933: LD_VAR 0 4
60937: PLUS
60938: ST_TO_ADDR
// for _x = min_x to max_x do
60939: LD_ADDR_VAR 0 11
60943: PUSH
60944: DOUBLE
60945: LD_VAR 0 7
60949: DEC
60950: ST_TO_ADDR
60951: LD_VAR 0 9
60955: PUSH
60956: FOR_TO
60957: IFFALSE 61039
// for _y = min_y to max_y do
60959: LD_ADDR_VAR 0 12
60963: PUSH
60964: DOUBLE
60965: LD_VAR 0 8
60969: DEC
60970: ST_TO_ADDR
60971: LD_VAR 0 10
60975: PUSH
60976: FOR_TO
60977: IFFALSE 61035
// begin if not ValidHex ( _x , _y ) then
60979: LD_VAR 0 11
60983: PPUSH
60984: LD_VAR 0 12
60988: PPUSH
60989: CALL_OW 488
60993: NOT
60994: IFFALSE 60998
// continue ;
60996: GO 60976
// if MineAtPos ( _x , _y ) then
60998: LD_VAR 0 11
61002: PPUSH
61003: LD_VAR 0 12
61007: PPUSH
61008: CALL_OW 458
61012: IFFALSE 61033
// ViewMineAtPos ( _x , _y , side ) ;
61014: LD_VAR 0 11
61018: PPUSH
61019: LD_VAR 0 12
61023: PPUSH
61024: LD_VAR 0 3
61028: PPUSH
61029: CALL_OW 457
// end ;
61033: GO 60976
61035: POP
61036: POP
61037: GO 60956
61039: POP
61040: POP
// end ;
61041: LD_VAR 0 2
61045: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
61046: LD_INT 0
61048: PPUSH
61049: PPUSH
61050: PPUSH
61051: PPUSH
61052: PPUSH
61053: PPUSH
61054: PPUSH
// if not units then
61055: LD_VAR 0 1
61059: NOT
61060: IFFALSE 61064
// exit ;
61062: GO 61528
// scaners := [ ] ;
61064: LD_ADDR_VAR 0 6
61068: PUSH
61069: EMPTY
61070: ST_TO_ADDR
// for i in units do
61071: LD_ADDR_VAR 0 3
61075: PUSH
61076: LD_VAR 0 1
61080: PUSH
61081: FOR_IN
61082: IFFALSE 61239
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
61084: LD_VAR 0 3
61088: PPUSH
61089: CALL_OW 264
61093: PUSH
61094: LD_INT 11
61096: NONEQUAL
61097: IFTRUE 61111
61099: PUSH
61100: LD_VAR 0 3
61104: PPUSH
61105: CALL_OW 302
61109: NOT
61110: OR
61111: IFTRUE 61128
61113: PUSH
61114: LD_VAR 0 3
61118: PPUSH
61119: CALL_OW 110
61123: PUSH
61124: LD_INT 502
61126: EQUAL
61127: OR
61128: IFFALSE 61132
// continue ;
61130: GO 61081
// ComStop ( i ) ;
61132: LD_VAR 0 3
61136: PPUSH
61137: CALL_OW 141
// x := GetX ( i ) ;
61141: LD_ADDR_VAR 0 4
61145: PUSH
61146: LD_VAR 0 3
61150: PPUSH
61151: CALL_OW 250
61155: ST_TO_ADDR
// y := GetY ( i ) ;
61156: LD_ADDR_VAR 0 5
61160: PUSH
61161: LD_VAR 0 3
61165: PPUSH
61166: CALL_OW 251
61170: ST_TO_ADDR
// if GetSide ( i ) = your_side then
61171: LD_VAR 0 3
61175: PPUSH
61176: CALL_OW 255
61180: PUSH
61181: LD_OWVAR 2
61185: EQUAL
61186: IFFALSE 61205
// PlaySoundXY ( x , y , mineDetector ) ;
61188: LD_VAR 0 4
61192: PPUSH
61193: LD_VAR 0 5
61197: PPUSH
61198: LD_STRING mineDetector
61200: PPUSH
61201: CALL_OW 366
// scaners := Join ( scaners , i ) ;
61205: LD_ADDR_VAR 0 6
61209: PUSH
61210: LD_VAR 0 6
61214: PPUSH
61215: LD_VAR 0 3
61219: PPUSH
61220: CALL 49569 0 2
61224: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
61225: LD_VAR 0 3
61229: PPUSH
61230: LD_INT 502
61232: PPUSH
61233: CALL_OW 109
// end ;
61237: GO 61081
61239: POP
61240: POP
// if not scaners then
61241: LD_VAR 0 6
61245: NOT
61246: IFFALSE 61250
// exit ;
61248: GO 61528
// wait ( 3 ) ;
61250: LD_INT 3
61252: PPUSH
61253: CALL_OW 67
// timer := 6 ;
61257: LD_ADDR_VAR 0 7
61261: PUSH
61262: LD_INT 6
61264: ST_TO_ADDR
// repeat for i in scaners do
61265: LD_ADDR_VAR 0 3
61269: PUSH
61270: LD_VAR 0 6
61274: PUSH
61275: FOR_IN
61276: IFFALSE 61426
// begin side := GetSide ( i ) ;
61278: LD_ADDR_VAR 0 8
61282: PUSH
61283: LD_VAR 0 3
61287: PPUSH
61288: CALL_OW 255
61292: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
61293: LD_VAR 0 3
61297: PPUSH
61298: CALL_OW 302
61302: NOT
61303: IFTRUE 61316
61305: PUSH
61306: LD_VAR 0 3
61310: PPUSH
61311: CALL_OW 314
61315: OR
61316: IFTRUE 61347
61318: PUSH
61319: LD_VAR 0 3
61323: PPUSH
61324: CALL_OW 263
61328: PUSH
61329: LD_INT 1
61331: EQUAL
61332: IFFALSE 61346
61334: PUSH
61335: LD_VAR 0 3
61339: PPUSH
61340: CALL_OW 311
61344: NOT
61345: AND
61346: OR
61347: IFFALSE 61391
// begin SetUnitDisplayNumber ( i , 0 ) ;
61349: LD_VAR 0 3
61353: PPUSH
61354: LD_INT 0
61356: PPUSH
61357: CALL_OW 505
// SetTag ( i , 0 ) ;
61361: LD_VAR 0 3
61365: PPUSH
61366: LD_INT 0
61368: PPUSH
61369: CALL_OW 109
// scaners := scaners diff i ;
61373: LD_ADDR_VAR 0 6
61377: PUSH
61378: LD_VAR 0 6
61382: PUSH
61383: LD_VAR 0 3
61387: DIFF
61388: ST_TO_ADDR
// continue ;
61389: GO 61275
// end ; if side in [ your_side , 9 ] then
61391: LD_VAR 0 8
61395: PUSH
61396: LD_OWVAR 2
61400: PUSH
61401: LD_INT 9
61403: PUSH
61404: EMPTY
61405: LIST
61406: LIST
61407: IN
61408: IFFALSE 61424
// SetUnitDisplayNumber ( i , timer ) ;
61410: LD_VAR 0 3
61414: PPUSH
61415: LD_VAR 0 7
61419: PPUSH
61420: CALL_OW 505
// end ;
61424: GO 61275
61426: POP
61427: POP
// if not scaners then
61428: LD_VAR 0 6
61432: NOT
61433: IFFALSE 61437
// exit ;
61435: GO 61528
// timer := Dec ( timer ) ;
61437: LD_ADDR_VAR 0 7
61441: PUSH
61442: LD_VAR 0 7
61446: PPUSH
61447: CALL 50964 0 1
61451: ST_TO_ADDR
// wait ( 0 0$1 ) ;
61452: LD_INT 35
61454: PPUSH
61455: CALL_OW 67
// until timer = 0 ;
61459: LD_VAR 0 7
61463: PUSH
61464: LD_INT 0
61466: EQUAL
61467: IFFALSE 61265
// if not scaners then
61469: LD_VAR 0 6
61473: NOT
61474: IFFALSE 61478
// exit ;
61476: GO 61528
// for i in scaners do
61478: LD_ADDR_VAR 0 3
61482: PUSH
61483: LD_VAR 0 6
61487: PUSH
61488: FOR_IN
61489: IFFALSE 61526
// begin SetUnitDisplayNumber ( i , 0 ) ;
61491: LD_VAR 0 3
61495: PPUSH
61496: LD_INT 0
61498: PPUSH
61499: CALL_OW 505
// SetTag ( i , 0 ) ;
61503: LD_VAR 0 3
61507: PPUSH
61508: LD_INT 0
61510: PPUSH
61511: CALL_OW 109
// RevealDetectorMine ( i ) ;
61515: LD_VAR 0 3
61519: PPUSH
61520: CALL 60748 0 1
// end ;
61524: GO 61488
61526: POP
61527: POP
// end ;
61528: LD_VAR 0 2
61532: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
61533: LD_INT 0
61535: PPUSH
// if p1 = mine_detector_mode then
61536: LD_VAR 0 2
61540: PUSH
61541: LD_INT 103
61543: EQUAL
61544: IFFALSE 61555
// DetectMine ( units ) ;
61546: LD_VAR 0 1
61550: PPUSH
61551: CALL 61046 0 1
// end ; end_of_file
61555: LD_VAR 0 7
61559: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
61560: LD_EXP 39
61564: IFFALSE 61905
61566: GO 61568
61568: DISABLE
61569: LD_INT 0
61571: PPUSH
61572: PPUSH
61573: PPUSH
// begin mpKingPoints := [ ] ;
61574: LD_ADDR_EXP 60
61578: PUSH
61579: EMPTY
61580: ST_TO_ADDR
// if mpTeamGame then
61581: LD_EXP 11
61585: IFFALSE 61639
// begin for i := 1 to Count ( mpTeams ) do
61587: LD_ADDR_VAR 0 1
61591: PUSH
61592: DOUBLE
61593: LD_INT 1
61595: DEC
61596: ST_TO_ADDR
61597: LD_EXP 10
61601: PPUSH
61602: CALL 13593 0 1
61606: PUSH
61607: FOR_TO
61608: IFFALSE 61635
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
61610: LD_ADDR_EXP 60
61614: PUSH
61615: LD_EXP 60
61619: PPUSH
61620: LD_VAR 0 1
61624: PPUSH
61625: LD_INT 0
61627: PPUSH
61628: CALL_OW 1
61632: ST_TO_ADDR
61633: GO 61607
61635: POP
61636: POP
// end else
61637: GO 61682
// begin for i := 1 to 8 do
61639: LD_ADDR_VAR 0 1
61643: PUSH
61644: DOUBLE
61645: LD_INT 1
61647: DEC
61648: ST_TO_ADDR
61649: LD_INT 8
61651: PUSH
61652: FOR_TO
61653: IFFALSE 61680
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
61655: LD_ADDR_EXP 60
61659: PUSH
61660: LD_EXP 60
61664: PPUSH
61665: LD_VAR 0 1
61669: PPUSH
61670: LD_INT 0
61672: PPUSH
61673: CALL_OW 1
61677: ST_TO_ADDR
61678: GO 61652
61680: POP
61681: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
61682: LD_ADDR_VAR 0 3
61686: PUSH
61687: LD_EXP 2
61691: PPUSH
61692: LD_INT 0
61694: PPUSH
61695: CALL_OW 517
61699: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
61700: LD_ADDR_VAR 0 1
61704: PUSH
61705: DOUBLE
61706: LD_INT 1
61708: DEC
61709: ST_TO_ADDR
61710: LD_VAR 0 3
61714: PUSH
61715: LD_INT 1
61717: ARRAY
61718: PUSH
61719: FOR_TO
61720: IFFALSE 61787
// for j := 1 to 8 do
61722: LD_ADDR_VAR 0 2
61726: PUSH
61727: DOUBLE
61728: LD_INT 1
61730: DEC
61731: ST_TO_ADDR
61732: LD_INT 8
61734: PUSH
61735: FOR_TO
61736: IFFALSE 61783
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
61738: LD_VAR 0 3
61742: PUSH
61743: LD_INT 1
61745: ARRAY
61746: PUSH
61747: LD_VAR 0 1
61751: ARRAY
61752: PPUSH
61753: LD_VAR 0 3
61757: PUSH
61758: LD_INT 2
61760: ARRAY
61761: PUSH
61762: LD_VAR 0 1
61766: ARRAY
61767: PPUSH
61768: LD_VAR 0 2
61772: PPUSH
61773: LD_INT 12
61775: NEG
61776: PPUSH
61777: CALL_OW 330
61781: GO 61735
61783: POP
61784: POP
61785: GO 61719
61787: POP
61788: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
61789: LD_EXP 34
61793: PPUSH
61794: LD_INT 1
61796: PPUSH
61797: CALL_OW 424
// UpdateCounter ;
61801: CALL 62411 0 0
// repeat wait ( 0 0$1 ) ;
61805: LD_INT 35
61807: PPUSH
61808: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
61812: LD_ADDR_VAR 0 3
61816: PUSH
61817: LD_EXP 34
61821: PPUSH
61822: LD_INT 3
61824: PUSH
61825: LD_INT 57
61827: PUSH
61828: EMPTY
61829: LIST
61830: PUSH
61831: EMPTY
61832: LIST
61833: LIST
61834: PUSH
61835: LD_INT 50
61837: PUSH
61838: EMPTY
61839: LIST
61840: PUSH
61841: LD_INT 2
61843: PUSH
61844: LD_INT 30
61846: PUSH
61847: LD_INT 0
61849: PUSH
61850: EMPTY
61851: LIST
61852: LIST
61853: PUSH
61854: LD_INT 30
61856: PUSH
61857: LD_INT 1
61859: PUSH
61860: EMPTY
61861: LIST
61862: LIST
61863: PUSH
61864: EMPTY
61865: LIST
61866: LIST
61867: LIST
61868: PUSH
61869: EMPTY
61870: LIST
61871: LIST
61872: LIST
61873: PPUSH
61874: CALL_OW 70
61878: ST_TO_ADDR
// if not tmp then
61879: LD_VAR 0 3
61883: NOT
61884: IFFALSE 61888
// continue ;
61886: GO 61805
// AddPoints ( tmp ) ;
61888: LD_VAR 0 3
61892: PPUSH
61893: CALL 62089 0 1
// UpdateCounter ;
61897: CALL 62411 0 0
// until false ;
61901: LD_INT 0
61903: IFFALSE 61805
// end ;
61905: PPOPN 3
61907: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
61908: LD_EXP 39
61912: IFFALSE 61920
61914: PUSH
61915: LD_EXP 37
61919: AND
61920: IFFALSE 62086
61922: GO 61924
61924: DISABLE
61925: LD_INT 0
61927: PPUSH
61928: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
61929: LD_ADDR_VAR 0 2
61933: PUSH
61934: LD_EXP 2
61938: PPUSH
61939: LD_INT 0
61941: PPUSH
61942: CALL_OW 517
61946: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
61947: LD_ADDR_VAR 0 1
61951: PUSH
61952: DOUBLE
61953: LD_INT 1
61955: DEC
61956: ST_TO_ADDR
61957: LD_VAR 0 2
61961: PUSH
61962: LD_INT 1
61964: ARRAY
61965: PUSH
61966: FOR_TO
61967: IFFALSE 62008
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
61969: LD_VAR 0 2
61973: PUSH
61974: LD_INT 1
61976: ARRAY
61977: PUSH
61978: LD_VAR 0 1
61982: ARRAY
61983: PPUSH
61984: LD_VAR 0 2
61988: PUSH
61989: LD_INT 2
61991: ARRAY
61992: PUSH
61993: LD_VAR 0 1
61997: ARRAY
61998: PPUSH
61999: LD_INT 125
62001: PPUSH
62002: CALL_OW 495
62006: GO 61966
62008: POP
62009: POP
// repeat wait ( mpEmissions ) ;
62010: LD_EXP 37
62014: PPUSH
62015: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
62019: LD_ADDR_VAR 0 1
62023: PUSH
62024: DOUBLE
62025: LD_INT 1
62027: DEC
62028: ST_TO_ADDR
62029: LD_VAR 0 2
62033: PUSH
62034: LD_INT 1
62036: ARRAY
62037: PUSH
62038: FOR_TO
62039: IFFALSE 62080
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
62041: LD_VAR 0 2
62045: PUSH
62046: LD_INT 1
62048: ARRAY
62049: PUSH
62050: LD_VAR 0 1
62054: ARRAY
62055: PPUSH
62056: LD_VAR 0 2
62060: PUSH
62061: LD_INT 2
62063: ARRAY
62064: PUSH
62065: LD_VAR 0 1
62069: ARRAY
62070: PPUSH
62071: LD_INT 15
62073: PPUSH
62074: CALL_OW 495
62078: GO 62038
62080: POP
62081: POP
// until false ;
62082: LD_INT 0
62084: IFFALSE 62010
// end ;
62086: PPOPN 2
62088: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
62089: LD_INT 0
62091: PPUSH
62092: PPUSH
62093: PPUSH
62094: PPUSH
62095: PPUSH
// if mpTeamGame then
62096: LD_EXP 11
62100: IFFALSE 62297
// begin first := depots [ 1 ] ;
62102: LD_ADDR_VAR 0 4
62106: PUSH
62107: LD_VAR 0 1
62111: PUSH
62112: LD_INT 1
62114: ARRAY
62115: ST_TO_ADDR
// side := GetSide ( first ) ;
62116: LD_ADDR_VAR 0 6
62120: PUSH
62121: LD_VAR 0 4
62125: PPUSH
62126: CALL_OW 255
62130: ST_TO_ADDR
// for i := 1 to mpTeams do
62131: LD_ADDR_VAR 0 3
62135: PUSH
62136: DOUBLE
62137: LD_INT 1
62139: DEC
62140: ST_TO_ADDR
62141: LD_EXP 10
62145: PUSH
62146: FOR_TO
62147: IFFALSE 62181
// if side in mpTeams [ i ] then
62149: LD_VAR 0 6
62153: PUSH
62154: LD_EXP 10
62158: PUSH
62159: LD_VAR 0 3
62163: ARRAY
62164: IN
62165: IFFALSE 62179
// begin team := i ;
62167: LD_ADDR_VAR 0 5
62171: PUSH
62172: LD_VAR 0 3
62176: ST_TO_ADDR
// break ;
62177: GO 62181
// end ;
62179: GO 62146
62181: POP
62182: POP
// if not team then
62183: LD_VAR 0 5
62187: NOT
62188: IFFALSE 62192
// exit ;
62190: GO 62406
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
62192: LD_EXP 34
62196: PPUSH
62197: LD_INT 81
62199: PUSH
62200: LD_VAR 0 6
62204: PUSH
62205: EMPTY
62206: LIST
62207: LIST
62208: PPUSH
62209: CALL_OW 70
62213: IFFALSE 62217
// exit ;
62215: GO 62406
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
62217: LD_ADDR_EXP 60
62221: PUSH
62222: LD_EXP 60
62226: PPUSH
62227: LD_VAR 0 5
62231: PPUSH
62232: LD_EXP 60
62236: PUSH
62237: LD_VAR 0 5
62241: ARRAY
62242: PUSH
62243: LD_INT 1
62245: PLUS
62246: PPUSH
62247: CALL_OW 1
62251: ST_TO_ADDR
// for i in mpTeams [ team ] do
62252: LD_ADDR_VAR 0 3
62256: PUSH
62257: LD_EXP 10
62261: PUSH
62262: LD_VAR 0 5
62266: ARRAY
62267: PUSH
62268: FOR_IN
62269: IFFALSE 62293
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
62271: LD_VAR 0 3
62275: PPUSH
62276: LD_EXP 60
62280: PUSH
62281: LD_VAR 0 5
62285: ARRAY
62286: PPUSH
62287: CALL_OW 506
62291: GO 62268
62293: POP
62294: POP
// end else
62295: GO 62406
// begin first := depots [ 1 ] ;
62297: LD_ADDR_VAR 0 4
62301: PUSH
62302: LD_VAR 0 1
62306: PUSH
62307: LD_INT 1
62309: ARRAY
62310: ST_TO_ADDR
// side := GetSide ( first ) ;
62311: LD_ADDR_VAR 0 6
62315: PUSH
62316: LD_VAR 0 4
62320: PPUSH
62321: CALL_OW 255
62325: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
62326: LD_EXP 34
62330: PPUSH
62331: LD_INT 81
62333: PUSH
62334: LD_VAR 0 6
62338: PUSH
62339: EMPTY
62340: LIST
62341: LIST
62342: PPUSH
62343: CALL_OW 70
62347: IFFALSE 62351
// exit ;
62349: GO 62406
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
62351: LD_ADDR_EXP 60
62355: PUSH
62356: LD_EXP 60
62360: PPUSH
62361: LD_VAR 0 6
62365: PPUSH
62366: LD_EXP 60
62370: PUSH
62371: LD_VAR 0 6
62375: ARRAY
62376: PUSH
62377: LD_INT 1
62379: PLUS
62380: PPUSH
62381: CALL_OW 1
62385: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
62386: LD_VAR 0 6
62390: PPUSH
62391: LD_EXP 60
62395: PUSH
62396: LD_VAR 0 6
62400: ARRAY
62401: PPUSH
62402: CALL_OW 506
// end ; end ;
62406: LD_VAR 0 2
62410: RET
// function UpdateCounter ; var i ; begin
62411: LD_INT 0
62413: PPUSH
62414: PPUSH
// result := [ ] ;
62415: LD_ADDR_VAR 0 1
62419: PUSH
62420: EMPTY
62421: ST_TO_ADDR
// if mpTeamGame then
62422: LD_EXP 11
62426: IFFALSE 62493
// begin for i := 1 to mpTeams do
62428: LD_ADDR_VAR 0 2
62432: PUSH
62433: DOUBLE
62434: LD_INT 1
62436: DEC
62437: ST_TO_ADDR
62438: LD_EXP 10
62442: PUSH
62443: FOR_TO
62444: IFFALSE 62489
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
62446: LD_ADDR_VAR 0 1
62450: PUSH
62451: LD_VAR 0 1
62455: PUSH
62456: LD_STRING #KingoftheHill-Team
62458: PUSH
62459: LD_VAR 0 2
62463: PUSH
62464: LD_EXP 60
62468: PUSH
62469: LD_VAR 0 2
62473: ARRAY
62474: PUSH
62475: LD_EXP 35
62479: PUSH
62480: EMPTY
62481: LIST
62482: LIST
62483: LIST
62484: LIST
62485: ADD
62486: ST_TO_ADDR
62487: GO 62443
62489: POP
62490: POP
// end else
62491: GO 62566
// begin for i := 1 to 8 do
62493: LD_ADDR_VAR 0 2
62497: PUSH
62498: DOUBLE
62499: LD_INT 1
62501: DEC
62502: ST_TO_ADDR
62503: LD_INT 8
62505: PUSH
62506: FOR_TO
62507: IFFALSE 62564
// if mpSidePositions [ i ] then
62509: LD_EXP 7
62513: PUSH
62514: LD_VAR 0 2
62518: ARRAY
62519: IFFALSE 62562
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
62521: LD_ADDR_VAR 0 1
62525: PUSH
62526: LD_VAR 0 1
62530: PUSH
62531: LD_STRING #KingoftheHill-Player
62533: PUSH
62534: LD_VAR 0 2
62538: PUSH
62539: LD_EXP 60
62543: PUSH
62544: LD_VAR 0 2
62548: ARRAY
62549: PUSH
62550: LD_EXP 35
62554: PUSH
62555: EMPTY
62556: LIST
62557: LIST
62558: LIST
62559: LIST
62560: ADD
62561: ST_TO_ADDR
62562: GO 62506
62564: POP
62565: POP
// end ; mpDisplayStrings := result ;
62566: LD_ADDR_EXP 38
62570: PUSH
62571: LD_VAR 0 1
62575: ST_TO_ADDR
// end ;
62576: LD_VAR 0 1
62580: RET
// export function HowMuchPointsKing ( side ) ; begin
62581: LD_INT 0
62583: PPUSH
// result := HowMuchPoints ( side ) ;
62584: LD_ADDR_VAR 0 2
62588: PUSH
62589: LD_VAR 0 1
62593: PPUSH
62594: CALL 62604 0 1
62598: ST_TO_ADDR
// end ;
62599: LD_VAR 0 2
62603: RET
// function HowMuchPoints ( side ) ; var i ; begin
62604: LD_INT 0
62606: PPUSH
62607: PPUSH
// if mpTeamGame then
62608: LD_EXP 11
62612: IFFALSE 62681
// begin for i := 1 to Count ( mpTeams ) do
62614: LD_ADDR_VAR 0 3
62618: PUSH
62619: DOUBLE
62620: LD_INT 1
62622: DEC
62623: ST_TO_ADDR
62624: LD_EXP 10
62628: PPUSH
62629: CALL 13593 0 1
62633: PUSH
62634: FOR_TO
62635: IFFALSE 62677
// begin if side in mpTeams [ i ] then
62637: LD_VAR 0 1
62641: PUSH
62642: LD_EXP 10
62646: PUSH
62647: LD_VAR 0 3
62651: ARRAY
62652: IN
62653: IFFALSE 62675
// begin result := mpKingPoints [ i ] ;
62655: LD_ADDR_VAR 0 2
62659: PUSH
62660: LD_EXP 60
62664: PUSH
62665: LD_VAR 0 3
62669: ARRAY
62670: ST_TO_ADDR
// exit ;
62671: POP
62672: POP
62673: GO 62697
// end ; end ;
62675: GO 62634
62677: POP
62678: POP
// end else
62679: GO 62697
// result := mpKingPoints [ side ] ;
62681: LD_ADDR_VAR 0 2
62685: PUSH
62686: LD_EXP 60
62690: PUSH
62691: LD_VAR 0 1
62695: ARRAY
62696: ST_TO_ADDR
// end ;
62697: LD_VAR 0 2
62701: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
62702: LD_EXP 39
62706: IFFALSE 62714
62708: PUSH
62709: CALL 63126 0 0
62713: AND
62714: IFFALSE 62722
62716: PUSH
62717: LD_OWVAR 4
62721: AND
62722: IFFALSE 62975
62724: GO 62726
62726: DISABLE
62727: LD_INT 0
62729: PPUSH
62730: PPUSH
// begin canWin := false ;
62731: LD_ADDR_VAR 0 2
62735: PUSH
62736: LD_INT 0
62738: ST_TO_ADDR
// if not HasPower ( your_side ) then
62739: LD_OWVAR 2
62743: PPUSH
62744: CALL 63168 0 1
62748: NOT
62749: IFFALSE 62760
// begin Multiplayer_Loose_Message ;
62751: CALL_OW 521
// enable ( mpLose ) ;
62755: LD_INT 102
62757: ENABLE_MARKED
// end else
62758: GO 62975
// begin if not EnemiesInGame then
62760: CALL 62978 0 0
62764: NOT
62765: IFFALSE 62772
// begin enable ( mpWin ) ;
62767: LD_INT 101
62769: ENABLE_MARKED
// exit ;
62770: GO 62975
// end ; canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) ;
62772: LD_ADDR_VAR 0 2
62776: PUSH
62777: LD_OWVAR 2
62781: PPUSH
62782: CALL 62604 0 1
62786: PUSH
62787: LD_EXP 35
62791: GREATEREQUAL
62792: IFFALSE 62805
62794: PUSH
62795: LD_OWVAR 2
62799: PPUSH
62800: CALL 63168 0 1
62804: AND
62805: ST_TO_ADDR
// for i := 1 to 8 do
62806: LD_ADDR_VAR 0 1
62810: PUSH
62811: DOUBLE
62812: LD_INT 1
62814: DEC
62815: ST_TO_ADDR
62816: LD_INT 8
62818: PUSH
62819: FOR_TO
62820: IFFALSE 62961
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
62822: LD_EXP 7
62826: PUSH
62827: LD_VAR 0 1
62831: ARRAY
62832: IFFALSE 62845
62834: PUSH
62835: LD_VAR 0 1
62839: PPUSH
62840: CALL_OW 108
62844: AND
62845: IFFALSE 62859
62847: PUSH
62848: LD_VAR 0 1
62852: PUSH
62853: LD_OWVAR 2
62857: NONEQUAL
62858: AND
62859: IFFALSE 62959
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
62861: LD_EXP 8
62865: PUSH
62866: LD_VAR 0 1
62870: ARRAY
62871: NOT
62872: IFTRUE 62920
62874: PUSH
62875: LD_EXP 8
62879: PUSH
62880: LD_VAR 0 1
62884: ARRAY
62885: PUSH
62886: LD_EXP 8
62890: PUSH
62891: LD_OWVAR 2
62895: ARRAY
62896: NONEQUAL
62897: IFFALSE 62919
62899: PUSH
62900: LD_OWVAR 2
62904: PPUSH
62905: LD_VAR 0 1
62909: PPUSH
62910: CALL_OW 81
62914: PUSH
62915: LD_INT 1
62917: NONEQUAL
62918: AND
62919: OR
62920: IFFALSE 62959
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
62922: LD_VAR 0 1
62926: PPUSH
62927: CALL 62604 0 1
62931: PUSH
62932: LD_EXP 35
62936: GREATEREQUAL
62937: IFFALSE 62950
62939: PUSH
62940: LD_VAR 0 1
62944: PPUSH
62945: CALL 63168 0 1
62949: AND
62950: IFFALSE 62959
// begin enable ( mpLose ) ;
62952: LD_INT 102
62954: ENABLE_MARKED
// exit ;
62955: POP
62956: POP
62957: GO 62975
// end ;
62959: GO 62819
62961: POP
62962: POP
// if canWin then
62963: LD_VAR 0 2
62967: IFFALSE 62974
// enable ( mpWin ) else
62969: LD_INT 101
62971: ENABLE_MARKED
62972: GO 62975
// enable ;
62974: ENABLE
// end ; end ;
62975: PPOPN 2
62977: END
// function EnemiesInGame ; var i ; begin
62978: LD_INT 0
62980: PPUSH
62981: PPUSH
// result := false ;
62982: LD_ADDR_VAR 0 1
62986: PUSH
62987: LD_INT 0
62989: ST_TO_ADDR
// for i := 1 to 8 do
62990: LD_ADDR_VAR 0 2
62994: PUSH
62995: DOUBLE
62996: LD_INT 1
62998: DEC
62999: ST_TO_ADDR
63000: LD_INT 8
63002: PUSH
63003: FOR_TO
63004: IFFALSE 63119
// if i <> your_side and HasPower ( i ) and MultiplayerSideAlive ( i ) then
63006: LD_VAR 0 2
63010: PUSH
63011: LD_OWVAR 2
63015: NONEQUAL
63016: IFFALSE 63029
63018: PUSH
63019: LD_VAR 0 2
63023: PPUSH
63024: CALL 63168 0 1
63028: AND
63029: IFFALSE 63042
63031: PUSH
63032: LD_VAR 0 2
63036: PPUSH
63037: CALL_OW 108
63041: AND
63042: IFFALSE 63117
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
63044: LD_EXP 8
63048: PUSH
63049: LD_VAR 0 2
63053: ARRAY
63054: NOT
63055: IFTRUE 63103
63057: PUSH
63058: LD_EXP 8
63062: PUSH
63063: LD_VAR 0 2
63067: ARRAY
63068: PUSH
63069: LD_EXP 8
63073: PUSH
63074: LD_OWVAR 2
63078: ARRAY
63079: NONEQUAL
63080: IFFALSE 63102
63082: PUSH
63083: LD_OWVAR 2
63087: PPUSH
63088: LD_VAR 0 2
63092: PPUSH
63093: CALL_OW 81
63097: PUSH
63098: LD_INT 1
63100: NONEQUAL
63101: AND
63102: OR
63103: IFFALSE 63117
// begin result := true ;
63105: LD_ADDR_VAR 0 1
63109: PUSH
63110: LD_INT 1
63112: ST_TO_ADDR
// exit ;
63113: POP
63114: POP
63115: GO 63121
// end ;
63117: GO 63003
63119: POP
63120: POP
// end ;
63121: LD_VAR 0 1
63125: RET
// function CanWinLoose ; begin
63126: LD_INT 0
63128: PPUSH
// result := true ;
63129: LD_ADDR_VAR 0 1
63133: PUSH
63134: LD_INT 1
63136: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
63137: CALL_OW 531
63141: IFFALSE 63153
63143: PUSH
63144: CALL_OW 519
63148: PUSH
63149: LD_INT 1
63151: GREATER
63152: AND
63153: IFFALSE 63163
// result := false ;
63155: LD_ADDR_VAR 0 1
63159: PUSH
63160: LD_INT 0
63162: ST_TO_ADDR
// end ;
63163: LD_VAR 0 1
63167: RET
// function HasPower ( i ) ; begin
63168: LD_INT 0
63170: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
63171: LD_ADDR_VAR 0 2
63175: PUSH
63176: LD_INT 22
63178: PUSH
63179: LD_VAR 0 1
63183: PUSH
63184: EMPTY
63185: LIST
63186: LIST
63187: PUSH
63188: LD_INT 2
63190: PUSH
63191: LD_INT 21
63193: PUSH
63194: LD_INT 1
63196: PUSH
63197: EMPTY
63198: LIST
63199: LIST
63200: PUSH
63201: LD_INT 33
63203: PUSH
63204: LD_INT 3
63206: PUSH
63207: EMPTY
63208: LIST
63209: LIST
63210: PUSH
63211: LD_INT 33
63213: PUSH
63214: LD_INT 5
63216: PUSH
63217: EMPTY
63218: LIST
63219: LIST
63220: PUSH
63221: EMPTY
63222: LIST
63223: LIST
63224: LIST
63225: LIST
63226: PUSH
63227: EMPTY
63228: LIST
63229: LIST
63230: PPUSH
63231: CALL_OW 69
63235: ST_TO_ADDR
// end ; end_of_file
63236: LD_VAR 0 2
63240: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
63241: PPOPN 6
63243: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
63244: LD_INT 0
63246: PPUSH
// begin if not units then
63247: LD_VAR 0 1
63251: NOT
63252: IFFALSE 63256
// exit ;
63254: GO 63290
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
63256: LD_VAR 0 1
63260: PPUSH
63261: LD_VAR 0 2
63265: PPUSH
63266: LD_VAR 0 3
63270: PPUSH
63271: LD_VAR 0 4
63275: PPUSH
63276: LD_VAR 0 5
63280: PPUSH
63281: LD_VAR 0 6
63285: PPUSH
63286: CALL 61533 0 6
// end ;
63290: PPOPN 7
63292: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
63293: LD_EXP 3
63297: PUSH
63298: LD_INT 4
63300: EQUAL
63301: IFFALSE 63337
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
63303: LD_STRING setGameDifficulty(
63305: PUSH
63306: LD_OWVAR 67
63310: STR
63311: PUSH
63312: LD_STRING )
63314: STR
63315: PPUSH
63316: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
63320: LD_STRING displayDifficulty(
63322: PUSH
63323: LD_OWVAR 67
63327: STR
63328: PUSH
63329: LD_STRING )
63331: STR
63332: PPUSH
63333: CALL_OW 559
// end ; SOS_MapStart ( ) ;
63337: CALL 63366 0 0
// end ; end_of_file
63341: PPOPN 1
63343: END
// every 0 0$1 do
63344: GO 63346
63346: DISABLE
// begin enable ;
63347: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
63348: LD_STRING updateTimer(
63350: PUSH
63351: LD_OWVAR 1
63355: STR
63356: PUSH
63357: LD_STRING );
63359: STR
63360: PPUSH
63361: CALL_OW 559
// end ;
63365: END
// export function SOS_MapStart ( ) ; begin
63366: LD_INT 0
63368: PPUSH
// UpdateFactoryWaypoints ( ) ;
63369: CALL 64300 0 0
// UpdateWarehouseGatheringPoints ( ) ;
63373: CALL 64552 0 0
// ParseMultiDataToLua ( ) ;
63377: CALL 64699 0 0
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
63381: LD_STRING setSpecLogoNumber(
63383: PUSH
63384: LD_INT 2
63386: STR
63387: PUSH
63388: LD_STRING ,
63390: STR
63391: PUSH
63392: LD_INT 1
63394: STR
63395: PUSH
63396: LD_STRING )
63398: STR
63399: PPUSH
63400: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
63404: LD_STRING setSpecLogoNumber(
63406: PUSH
63407: LD_INT 3
63409: STR
63410: PUSH
63411: LD_STRING ,
63413: STR
63414: PUSH
63415: LD_INT 2
63417: STR
63418: PUSH
63419: LD_STRING )
63421: STR
63422: PPUSH
63423: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
63427: LD_STRING setSpecLogoNumber(
63429: PUSH
63430: LD_INT 4
63432: STR
63433: PUSH
63434: LD_STRING ,
63436: STR
63437: PUSH
63438: LD_INT 3
63440: STR
63441: PUSH
63442: LD_STRING )
63444: STR
63445: PPUSH
63446: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
63450: LD_STRING setSpecLogoNumber(
63452: PUSH
63453: LD_INT 5
63455: STR
63456: PUSH
63457: LD_STRING ,
63459: STR
63460: PUSH
63461: LD_INT 4
63463: STR
63464: PUSH
63465: LD_STRING )
63467: STR
63468: PPUSH
63469: CALL_OW 559
// end ;
63473: LD_VAR 0 1
63477: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
63478: LD_INT 0
63480: PPUSH
63481: PPUSH
63482: PPUSH
63483: PPUSH
63484: PPUSH
63485: PPUSH
63486: PPUSH
63487: PPUSH
63488: PPUSH
// for i := 1 to 8 do
63489: LD_ADDR_VAR 0 2
63493: PUSH
63494: DOUBLE
63495: LD_INT 1
63497: DEC
63498: ST_TO_ADDR
63499: LD_INT 8
63501: PUSH
63502: FOR_TO
63503: IFFALSE 63888
// begin if mpSidePositions [ i ] then
63505: LD_EXP 7
63509: PUSH
63510: LD_VAR 0 2
63514: ARRAY
63515: IFFALSE 63886
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
63517: LD_ADDR_VAR 0 7
63521: PUSH
63522: LD_INT 22
63524: PUSH
63525: LD_VAR 0 2
63529: PUSH
63530: EMPTY
63531: LIST
63532: LIST
63533: PUSH
63534: LD_INT 21
63536: PUSH
63537: LD_INT 1
63539: PUSH
63540: EMPTY
63541: LIST
63542: LIST
63543: PUSH
63544: EMPTY
63545: LIST
63546: LIST
63547: PPUSH
63548: CALL_OW 69
63552: PPUSH
63553: CALL 13593 0 1
63557: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
63558: LD_ADDR_VAR 0 9
63562: PUSH
63563: LD_INT 22
63565: PUSH
63566: LD_VAR 0 2
63570: PUSH
63571: EMPTY
63572: LIST
63573: LIST
63574: PUSH
63575: LD_INT 2
63577: PUSH
63578: LD_INT 30
63580: PUSH
63581: LD_INT 0
63583: PUSH
63584: EMPTY
63585: LIST
63586: LIST
63587: PUSH
63588: LD_INT 30
63590: PUSH
63591: LD_INT 1
63593: PUSH
63594: EMPTY
63595: LIST
63596: LIST
63597: PUSH
63598: EMPTY
63599: LIST
63600: LIST
63601: LIST
63602: PUSH
63603: EMPTY
63604: LIST
63605: LIST
63606: PPUSH
63607: CALL_OW 69
63611: ST_TO_ADDR
// crates := 0 ;
63612: LD_ADDR_VAR 0 4
63616: PUSH
63617: LD_INT 0
63619: ST_TO_ADDR
// oil := 0 ;
63620: LD_ADDR_VAR 0 5
63624: PUSH
63625: LD_INT 0
63627: ST_TO_ADDR
// sib := 0 ;
63628: LD_ADDR_VAR 0 6
63632: PUSH
63633: LD_INT 0
63635: ST_TO_ADDR
// if bases then
63636: LD_VAR 0 9
63640: IFFALSE 63746
// begin for j in bases do
63642: LD_ADDR_VAR 0 3
63646: PUSH
63647: LD_VAR 0 9
63651: PUSH
63652: FOR_IN
63653: IFFALSE 63744
// begin base := GetBase ( j ) ;
63655: LD_ADDR_VAR 0 8
63659: PUSH
63660: LD_VAR 0 3
63664: PPUSH
63665: CALL_OW 274
63669: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
63670: LD_ADDR_VAR 0 4
63674: PUSH
63675: LD_VAR 0 4
63679: PUSH
63680: LD_VAR 0 8
63684: PPUSH
63685: LD_INT 1
63687: PPUSH
63688: CALL_OW 275
63692: PLUS
63693: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
63694: LD_ADDR_VAR 0 5
63698: PUSH
63699: LD_VAR 0 5
63703: PUSH
63704: LD_VAR 0 8
63708: PPUSH
63709: LD_INT 2
63711: PPUSH
63712: CALL_OW 275
63716: PLUS
63717: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
63718: LD_ADDR_VAR 0 6
63722: PUSH
63723: LD_VAR 0 6
63727: PUSH
63728: LD_VAR 0 8
63732: PPUSH
63733: LD_INT 3
63735: PPUSH
63736: CALL_OW 275
63740: PLUS
63741: ST_TO_ADDR
// end ;
63742: GO 63652
63744: POP
63745: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
63746: LD_STRING setSpecText(
63748: PUSH
63749: LD_VAR 0 2
63753: STR
63754: PUSH
63755: LD_STRING ,
63757: STR
63758: PUSH
63759: LD_INT 2
63761: STR
63762: PUSH
63763: LD_STRING ,
63765: STR
63766: PUSH
63767: LD_VAR 0 4
63771: STR
63772: PUSH
63773: LD_STRING )
63775: STR
63776: PPUSH
63777: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
63781: LD_STRING setSpecText(
63783: PUSH
63784: LD_VAR 0 2
63788: STR
63789: PUSH
63790: LD_STRING ,
63792: STR
63793: PUSH
63794: LD_INT 3
63796: STR
63797: PUSH
63798: LD_STRING ,
63800: STR
63801: PUSH
63802: LD_VAR 0 5
63806: STR
63807: PUSH
63808: LD_STRING )
63810: STR
63811: PPUSH
63812: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
63816: LD_STRING setSpecText(
63818: PUSH
63819: LD_VAR 0 2
63823: STR
63824: PUSH
63825: LD_STRING ,
63827: STR
63828: PUSH
63829: LD_INT 4
63831: STR
63832: PUSH
63833: LD_STRING ,
63835: STR
63836: PUSH
63837: LD_VAR 0 6
63841: STR
63842: PUSH
63843: LD_STRING )
63845: STR
63846: PPUSH
63847: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
63851: LD_STRING setSpecText(
63853: PUSH
63854: LD_VAR 0 2
63858: STR
63859: PUSH
63860: LD_STRING ,
63862: STR
63863: PUSH
63864: LD_INT 5
63866: STR
63867: PUSH
63868: LD_STRING ,
63870: STR
63871: PUSH
63872: LD_VAR 0 7
63876: STR
63877: PUSH
63878: LD_STRING )
63880: STR
63881: PPUSH
63882: CALL_OW 559
// end ; end ;
63886: GO 63502
63888: POP
63889: POP
// end ;
63890: LD_VAR 0 1
63894: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
63895: LD_INT 2
63897: PUSH
63898: LD_INT 30
63900: PUSH
63901: LD_INT 0
63903: PUSH
63904: EMPTY
63905: LIST
63906: LIST
63907: PUSH
63908: LD_INT 30
63910: PUSH
63911: LD_INT 1
63913: PUSH
63914: EMPTY
63915: LIST
63916: LIST
63917: PUSH
63918: EMPTY
63919: LIST
63920: LIST
63921: LIST
63922: PPUSH
63923: CALL_OW 69
63927: IFFALSE 63937
63929: GO 63931
63931: DISABLE
// begin enable ;
63932: ENABLE
// UpdateSpectatorBar ;
63933: CALL 63478 0 0
// end ;
63937: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
63938: LD_INT 0
63940: PPUSH
// end ;
63941: LD_VAR 0 12
63945: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
63946: LD_INT 0
63948: PPUSH
63949: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
63950: LD_VAR 0 1
63954: NOT
63955: IFTRUE 63974
63957: PUSH
63958: LD_VAR 0 2
63962: PPUSH
63963: LD_VAR 0 3
63967: PPUSH
63968: CALL_OW 488
63972: NOT
63973: OR
63974: IFTRUE 64009
63976: PUSH
63977: LD_VAR 0 1
63981: PPUSH
63982: CALL_OW 266
63986: PUSH
63987: LD_INT 3
63989: NONEQUAL
63990: IFFALSE 64008
63992: PUSH
63993: LD_VAR 0 1
63997: PPUSH
63998: CALL_OW 247
64002: PUSH
64003: LD_INT 1
64005: EQUAL
64006: NOT
64007: AND
64008: OR
64009: IFFALSE 64013
// exit ;
64011: GO 64295
// if GetType ( factory ) = unit_human then
64013: LD_VAR 0 1
64017: PPUSH
64018: CALL_OW 247
64022: PUSH
64023: LD_INT 1
64025: EQUAL
64026: IFFALSE 64043
// factory := IsInUnit ( factory ) ;
64028: LD_ADDR_VAR 0 1
64032: PUSH
64033: LD_VAR 0 1
64037: PPUSH
64038: CALL_OW 310
64042: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
64043: LD_VAR 0 1
64047: PPUSH
64048: CALL_OW 266
64052: PUSH
64053: LD_INT 3
64055: NONEQUAL
64056: IFFALSE 64060
// exit ;
64058: GO 64295
// for i := 1 to Count ( factoryWaypoints ) do
64060: LD_ADDR_VAR 0 5
64064: PUSH
64065: DOUBLE
64066: LD_INT 1
64068: DEC
64069: ST_TO_ADDR
64070: LD_EXP 61
64074: PPUSH
64075: CALL 13593 0 1
64079: PUSH
64080: FOR_TO
64081: IFFALSE 64243
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
64083: LD_VAR 0 2
64087: PPUSH
64088: LD_VAR 0 3
64092: PPUSH
64093: CALL_OW 428
64097: PUSH
64098: LD_EXP 61
64102: PUSH
64103: LD_VAR 0 5
64107: ARRAY
64108: PUSH
64109: LD_INT 2
64111: ARRAY
64112: EQUAL
64113: IFFALSE 64145
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
64115: LD_ADDR_EXP 61
64119: PUSH
64120: LD_EXP 61
64124: PPUSH
64125: LD_VAR 0 5
64129: PPUSH
64130: CALL_OW 3
64134: ST_TO_ADDR
// UpdateFactoryWaypoints ;
64135: CALL 64300 0 0
// exit ;
64139: POP
64140: POP
64141: GO 64295
// end else
64143: GO 64241
// if factory = factoryWaypoints [ i ] [ 2 ] then
64145: LD_VAR 0 1
64149: PUSH
64150: LD_EXP 61
64154: PUSH
64155: LD_VAR 0 5
64159: ARRAY
64160: PUSH
64161: LD_INT 2
64163: ARRAY
64164: EQUAL
64165: IFFALSE 64241
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
64167: LD_ADDR_EXP 61
64171: PUSH
64172: LD_EXP 61
64176: PPUSH
64177: LD_VAR 0 5
64181: PPUSH
64182: CALL_OW 3
64186: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
64187: LD_ADDR_EXP 61
64191: PUSH
64192: LD_EXP 61
64196: PPUSH
64197: LD_VAR 0 1
64201: PPUSH
64202: CALL_OW 255
64206: PUSH
64207: LD_VAR 0 1
64211: PUSH
64212: LD_VAR 0 2
64216: PUSH
64217: LD_VAR 0 3
64221: PUSH
64222: EMPTY
64223: LIST
64224: LIST
64225: LIST
64226: LIST
64227: PPUSH
64228: CALL 49569 0 2
64232: ST_TO_ADDR
// UpdateFactoryWaypoints ;
64233: CALL 64300 0 0
// exit ;
64237: POP
64238: POP
64239: GO 64295
// end ; end ;
64241: GO 64080
64243: POP
64244: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
64245: LD_ADDR_EXP 61
64249: PUSH
64250: LD_EXP 61
64254: PPUSH
64255: LD_VAR 0 1
64259: PPUSH
64260: CALL_OW 255
64264: PUSH
64265: LD_VAR 0 1
64269: PUSH
64270: LD_VAR 0 2
64274: PUSH
64275: LD_VAR 0 3
64279: PUSH
64280: EMPTY
64281: LIST
64282: LIST
64283: LIST
64284: LIST
64285: PPUSH
64286: CALL 49569 0 2
64290: ST_TO_ADDR
// UpdateFactoryWaypoints ;
64291: CALL 64300 0 0
// end ;
64295: LD_VAR 0 4
64299: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
64300: LD_INT 0
64302: PPUSH
64303: PPUSH
64304: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
64305: LD_STRING resetFactoryWaypoint();
64307: PPUSH
64308: CALL_OW 559
// if factoryWaypoints then
64312: LD_EXP 61
64316: IFFALSE 64437
// begin list := factoryWaypoints ;
64318: LD_ADDR_VAR 0 3
64322: PUSH
64323: LD_EXP 61
64327: ST_TO_ADDR
// for i := 1 to list do
64328: LD_ADDR_VAR 0 2
64332: PUSH
64333: DOUBLE
64334: LD_INT 1
64336: DEC
64337: ST_TO_ADDR
64338: LD_VAR 0 3
64342: PUSH
64343: FOR_TO
64344: IFFALSE 64435
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
64346: LD_STRING setFactoryWaypointXY(
64348: PUSH
64349: LD_VAR 0 3
64353: PUSH
64354: LD_VAR 0 2
64358: ARRAY
64359: PUSH
64360: LD_INT 1
64362: ARRAY
64363: STR
64364: PUSH
64365: LD_STRING ,
64367: STR
64368: PUSH
64369: LD_VAR 0 3
64373: PUSH
64374: LD_VAR 0 2
64378: ARRAY
64379: PUSH
64380: LD_INT 2
64382: ARRAY
64383: STR
64384: PUSH
64385: LD_STRING ,
64387: STR
64388: PUSH
64389: LD_VAR 0 3
64393: PUSH
64394: LD_VAR 0 2
64398: ARRAY
64399: PUSH
64400: LD_INT 3
64402: ARRAY
64403: STR
64404: PUSH
64405: LD_STRING ,
64407: STR
64408: PUSH
64409: LD_VAR 0 3
64413: PUSH
64414: LD_VAR 0 2
64418: ARRAY
64419: PUSH
64420: LD_INT 4
64422: ARRAY
64423: STR
64424: PUSH
64425: LD_STRING )
64427: STR
64428: PPUSH
64429: CALL_OW 559
64433: GO 64343
64435: POP
64436: POP
// end ; end ;
64437: LD_VAR 0 1
64441: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
64442: LD_INT 0
64444: PPUSH
// if HexInfo ( x , y ) = warehouse then
64445: LD_VAR 0 2
64449: PPUSH
64450: LD_VAR 0 3
64454: PPUSH
64455: CALL_OW 428
64459: PUSH
64460: LD_VAR 0 1
64464: EQUAL
64465: IFFALSE 64492
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
64467: LD_ADDR_EXP 63
64471: PUSH
64472: LD_EXP 63
64476: PPUSH
64477: LD_VAR 0 1
64481: PPUSH
64482: LD_INT 0
64484: PPUSH
64485: CALL_OW 1
64489: ST_TO_ADDR
64490: GO 64543
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
64492: LD_ADDR_EXP 63
64496: PUSH
64497: LD_EXP 63
64501: PPUSH
64502: LD_VAR 0 1
64506: PPUSH
64507: LD_VAR 0 1
64511: PPUSH
64512: CALL_OW 255
64516: PUSH
64517: LD_VAR 0 1
64521: PUSH
64522: LD_VAR 0 2
64526: PUSH
64527: LD_VAR 0 3
64531: PUSH
64532: EMPTY
64533: LIST
64534: LIST
64535: LIST
64536: LIST
64537: PPUSH
64538: CALL_OW 1
64542: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
64543: CALL 64552 0 0
// end ;
64547: LD_VAR 0 4
64551: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
64552: LD_INT 0
64554: PPUSH
64555: PPUSH
64556: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
64557: LD_STRING resetWarehouseGatheringPoints();
64559: PPUSH
64560: CALL_OW 559
// if warehouseGatheringPoints then
64564: LD_EXP 63
64568: IFFALSE 64694
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
64570: LD_ADDR_VAR 0 3
64574: PUSH
64575: LD_EXP 63
64579: PPUSH
64580: CALL 53503 0 1
64584: ST_TO_ADDR
// for i := 1 to list do
64585: LD_ADDR_VAR 0 2
64589: PUSH
64590: DOUBLE
64591: LD_INT 1
64593: DEC
64594: ST_TO_ADDR
64595: LD_VAR 0 3
64599: PUSH
64600: FOR_TO
64601: IFFALSE 64692
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
64603: LD_STRING setWarehouseGatheringPointXY(
64605: PUSH
64606: LD_VAR 0 3
64610: PUSH
64611: LD_VAR 0 2
64615: ARRAY
64616: PUSH
64617: LD_INT 1
64619: ARRAY
64620: STR
64621: PUSH
64622: LD_STRING ,
64624: STR
64625: PUSH
64626: LD_VAR 0 3
64630: PUSH
64631: LD_VAR 0 2
64635: ARRAY
64636: PUSH
64637: LD_INT 2
64639: ARRAY
64640: STR
64641: PUSH
64642: LD_STRING ,
64644: STR
64645: PUSH
64646: LD_VAR 0 3
64650: PUSH
64651: LD_VAR 0 2
64655: ARRAY
64656: PUSH
64657: LD_INT 3
64659: ARRAY
64660: STR
64661: PUSH
64662: LD_STRING ,
64664: STR
64665: PUSH
64666: LD_VAR 0 3
64670: PUSH
64671: LD_VAR 0 2
64675: ARRAY
64676: PUSH
64677: LD_INT 4
64679: ARRAY
64680: STR
64681: PUSH
64682: LD_STRING )
64684: STR
64685: PPUSH
64686: CALL_OW 559
64690: GO 64600
64692: POP
64693: POP
// end ; end ;
64694: LD_VAR 0 1
64698: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
64699: LD_INT 0
64701: PPUSH
64702: PPUSH
// if not mpSidePositions then
64703: LD_EXP 7
64707: NOT
64708: IFFALSE 64712
// exit ;
64710: GO 64783
// result :=  ;
64712: LD_ADDR_VAR 0 1
64716: PUSH
64717: LD_STRING 
64719: ST_TO_ADDR
// for i := 1 to 8 do
64720: LD_ADDR_VAR 0 2
64724: PUSH
64725: DOUBLE
64726: LD_INT 1
64728: DEC
64729: ST_TO_ADDR
64730: LD_INT 8
64732: PUSH
64733: FOR_TO
64734: IFFALSE 64764
// begin result := result & mpSidePositions [ i ] & ; ;
64736: LD_ADDR_VAR 0 1
64740: PUSH
64741: LD_VAR 0 1
64745: PUSH
64746: LD_EXP 7
64750: PUSH
64751: LD_VAR 0 2
64755: ARRAY
64756: STR
64757: PUSH
64758: LD_STRING ;
64760: STR
64761: ST_TO_ADDR
// end ;
64762: GO 64733
64764: POP
64765: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
64766: LD_STRING setMultiplayerRealPosition("
64768: PUSH
64769: LD_VAR 0 1
64773: STR
64774: PUSH
64775: LD_STRING ");
64777: STR
64778: PPUSH
64779: CALL_OW 559
// end ;
64783: LD_VAR 0 1
64787: RET
