// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 46363 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 46747 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 2
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 3
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: EMPTY
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: LD_INT 6300
 466: PUSH
 467: LD_INT 10500
 469: PUSH
 470: LD_INT 16800
 472: PUSH
 473: LD_INT 21000
 475: PUSH
 476: LD_INT 25200
 478: PUSH
 479: LD_INT 31500
 481: PUSH
 482: LD_INT 42000
 484: PUSH
 485: LD_INT 63000
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 2 , 5 5$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 3 3$0 ] ;
 522: LD_ADDR_EXP 4
 526: PUSH
 527: LD_INT 2
 529: PUSH
 530: LD_INT 15
 532: PUSH
 533: LD_INT 4
 535: PUSH
 536: LD_INT 100
 538: PUSH
 539: LD_INT 30
 541: PUSH
 542: LD_INT 0
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 3
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: LD_INT 2
 558: PUSH
 559: LD_INT 250
 561: PUSH
 562: LD_INT 2
 564: PUSH
 565: LD_INT 10500
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: LD_INT 700
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: LD_INT 700
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 31500
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 6300
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: ST_TO_ADDR
// mpGameType := GameTypeNormal ;
 624: LD_ADDR_EXP 1
 628: PUSH
 629: LD_INT 1
 631: ST_TO_ADDR
// your_side := 1 ;
 632: LD_ADDR_OWVAR 2
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// mpSidePositions := [ 1 , 2 , 3 , 4 , 5 , 6 , 0 , 0 ] ;
 640: LD_ADDR_EXP 5
 644: PUSH
 645: LD_INT 1
 647: PUSH
 648: LD_INT 2
 650: PUSH
 651: LD_INT 3
 653: PUSH
 654: LD_INT 4
 656: PUSH
 657: LD_INT 5
 659: PUSH
 660: LD_INT 6
 662: PUSH
 663: LD_INT 0
 665: PUSH
 666: LD_INT 0
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// mpSideTeams := [ 1 , 1 , 1 , 2 , 2 , 2 , 0 , 0 ] ;
 679: LD_ADDR_EXP 6
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 1
 689: PUSH
 690: LD_INT 1
 692: PUSH
 693: LD_INT 2
 695: PUSH
 696: LD_INT 2
 698: PUSH
 699: LD_INT 2
 701: PUSH
 702: LD_INT 0
 704: PUSH
 705: LD_INT 0
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: ST_TO_ADDR
// mpSideNations := [ 1 , 2 , 3 , 1 , 2 , 3 , 0 , 0 ] ;
 718: LD_ADDR_EXP 7
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: LD_INT 2
 728: PUSH
 729: LD_INT 3
 731: PUSH
 732: LD_INT 1
 734: PUSH
 735: LD_INT 2
 737: PUSH
 738: LD_INT 3
 740: PUSH
 741: LD_INT 0
 743: PUSH
 744: LD_INT 0
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: ST_TO_ADDR
// mpTeams := [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ] ;
 757: LD_ADDR_EXP 8
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: LD_INT 2
 767: PUSH
 768: LD_INT 3
 770: PUSH
 771: EMPTY
 772: LIST
 773: LIST
 774: LIST
 775: PUSH
 776: LD_INT 4
 778: PUSH
 779: LD_INT 5
 781: PUSH
 782: LD_INT 6
 784: PUSH
 785: EMPTY
 786: LIST
 787: LIST
 788: LIST
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: ST_TO_ADDR
// mpTeamGame := true ;
 794: LD_ADDR_EXP 9
 798: PUSH
 799: LD_INT 1
 801: ST_TO_ADDR
// mpMapSize := [ 120 , 140 ] ;
 802: LD_ADDR_EXP 27
 806: PUSH
 807: LD_INT 120
 809: PUSH
 810: LD_INT 140
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: ST_TO_ADDR
// end ;
 817: LD_VAR 0 1
 821: RET
// export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 822: LD_INT 0
 824: PPUSH
 825: PPUSH
 826: PPUSH
 827: PPUSH
 828: PPUSH
 829: PPUSH
 830: PPUSH
// mpBuildUpAreas := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 ] ;
 831: LD_ADDR_EXP 17
 835: PUSH
 836: LD_INT 1
 838: PUSH
 839: LD_INT 2
 841: PUSH
 842: LD_INT 3
 844: PUSH
 845: LD_INT 6
 847: PUSH
 848: LD_INT 5
 850: PUSH
 851: LD_INT 4
 853: PUSH
 854: EMPTY
 855: LIST
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: LIST
 861: ST_TO_ADDR
// mpMarkedAreas := [ MZBaseArea , MZSpecialArea ] union mpBuildUpAreas ;
 862: LD_ADDR_EXP 16
 866: PUSH
 867: LD_INT 7
 869: PUSH
 870: LD_INT 8
 872: PUSH
 873: EMPTY
 874: LIST
 875: LIST
 876: PUSH
 877: LD_EXP 17
 881: UNION
 882: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 883: LD_VAR 0 1
 887: PUSH
 888: LD_INT 2
 890: EQUAL
 891: IFFALSE 903
// baseLevel := 1 else
 893: LD_ADDR_VAR 0 7
 897: PUSH
 898: LD_INT 1
 900: ST_TO_ADDR
 901: GO 917
// baseLevel := mpGameSettings [ 1 ] ;
 903: LD_ADDR_VAR 0 7
 907: PUSH
 908: LD_EXP 4
 912: PUSH
 913: LD_INT 1
 915: ARRAY
 916: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 917: LD_ADDR_EXP 22
 921: PUSH
 922: LD_EXP 4
 926: PUSH
 927: LD_INT 2
 929: ARRAY
 930: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 931: LD_ADDR_EXP 23
 935: PUSH
 936: LD_EXP 4
 940: PUSH
 941: LD_INT 3
 943: ARRAY
 944: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 945: LD_ADDR_EXP 13
 949: PUSH
 950: LD_EXP 4
 954: PUSH
 955: LD_INT 4
 957: ARRAY
 958: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 959: LD_ADDR_EXP 25
 963: PUSH
 964: LD_EXP 4
 968: PUSH
 969: LD_INT 5
 971: ARRAY
 972: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
 973: LD_ADDR_VAR 0 5
 977: PUSH
 978: LD_EXP 4
 982: PUSH
 983: LD_INT 6
 985: ARRAY
 986: PUSH
 987: LD_INT 0
 989: GREATER
 990: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
 991: LD_ADDR_VAR 0 6
 995: PUSH
 996: LD_EXP 4
1000: PUSH
1001: LD_INT 7
1003: ARRAY
1004: PUSH
1005: LD_INT 0
1007: GREATER
1008: ST_TO_ADDR
// mpKingArea := 0 ;
1009: LD_ADDR_EXP 32
1013: PUSH
1014: LD_INT 0
1016: ST_TO_ADDR
// mpPoints := 0 ;
1017: LD_ADDR_EXP 33
1021: PUSH
1022: LD_INT 0
1024: ST_TO_ADDR
// mpEmissions := 0 ;
1025: LD_ADDR_EXP 35
1029: PUSH
1030: LD_INT 0
1032: ST_TO_ADDR
// if mpGameSettings [ 9 ] then
1033: LD_EXP 4
1037: PUSH
1038: LD_INT 9
1040: ARRAY
1041: IFFALSE 1173
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1043: LD_ADDR_EXP 34
1047: PUSH
1048: LD_INT 1
1050: PUSH
1051: LD_INT 1
1053: PUSH
1054: LD_INT 1
1056: PUSH
1057: LD_INT 2
1059: PUSH
1060: EMPTY
1061: LIST
1062: LIST
1063: LIST
1064: LIST
1065: PUSH
1066: LD_INT 1
1068: PUSH
1069: LD_INT 1
1071: PUSH
1072: LD_INT 1
1074: PUSH
1075: LD_INT 3
1077: PUSH
1078: EMPTY
1079: LIST
1080: LIST
1081: LIST
1082: LIST
1083: PUSH
1084: EMPTY
1085: LIST
1086: LIST
1087: PUSH
1088: LD_INT 12
1090: PUSH
1091: LD_INT 1
1093: PUSH
1094: LD_INT 1
1096: PUSH
1097: LD_INT 24
1099: PUSH
1100: EMPTY
1101: LIST
1102: LIST
1103: LIST
1104: LIST
1105: PUSH
1106: LD_INT 12
1108: PUSH
1109: LD_INT 1
1111: PUSH
1112: LD_INT 1
1114: PUSH
1115: LD_INT 23
1117: PUSH
1118: EMPTY
1119: LIST
1120: LIST
1121: LIST
1122: LIST
1123: PUSH
1124: EMPTY
1125: LIST
1126: LIST
1127: PUSH
1128: LD_INT 21
1130: PUSH
1131: LD_INT 1
1133: PUSH
1134: LD_INT 1
1136: PUSH
1137: LD_INT 42
1139: PUSH
1140: EMPTY
1141: LIST
1142: LIST
1143: LIST
1144: LIST
1145: PUSH
1146: LD_INT 21
1148: PUSH
1149: LD_INT 1
1151: PUSH
1152: LD_INT 1
1154: PUSH
1155: LD_INT 42
1157: PUSH
1158: EMPTY
1159: LIST
1160: LIST
1161: LIST
1162: LIST
1163: PUSH
1164: EMPTY
1165: LIST
1166: LIST
1167: PUSH
1168: EMPTY
1169: LIST
1170: LIST
1171: LIST
1172: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1173: LD_ADDR_EXP 14
1177: PUSH
1178: LD_EXP 4
1182: PUSH
1183: LD_INT 11
1185: ARRAY
1186: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1187: LD_ADDR_EXP 20
1191: PUSH
1192: LD_EXP 4
1196: PUSH
1197: LD_INT 12
1199: ARRAY
1200: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1201: LD_ADDR_EXP 24
1205: PUSH
1206: LD_EXP 4
1210: PUSH
1211: LD_INT 13
1213: ARRAY
1214: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1215: LD_ADDR_EXP 31
1219: PUSH
1220: LD_EXP 4
1224: PUSH
1225: LD_INT 14
1227: ARRAY
1228: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1229: LD_ADDR_EXP 28
1233: PUSH
1234: LD_EXP 4
1238: PUSH
1239: LD_INT 15
1241: ARRAY
1242: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1243: LD_ADDR_EXP 26
1247: PUSH
1248: LD_EXP 4
1252: PUSH
1253: LD_INT 18
1255: ARRAY
1256: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1257: LD_ADDR_EXP 18
1261: PUSH
1262: LD_EXP 4
1266: PUSH
1267: LD_INT 21
1269: ARRAY
1270: ST_TO_ADDR
// mpApemansArea := [ BaseApeArea1 , BaseApeArea2 , BaseApeArea3 , BaseApeArea4 , BaseApeArea5 , BaseApeArea6 ] ;
1271: LD_ADDR_EXP 29
1275: PUSH
1276: LD_INT 13
1278: PUSH
1279: LD_INT 14
1281: PUSH
1282: LD_INT 10
1284: PUSH
1285: LD_INT 12
1287: PUSH
1288: LD_INT 11
1290: PUSH
1291: LD_INT 9
1293: PUSH
1294: EMPTY
1295: LIST
1296: LIST
1297: LIST
1298: LIST
1299: LIST
1300: LIST
1301: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 2 ) , GetBuildingFromArea ( depotArea2 , 1 ) , GetBuildingFromArea ( depotArea3 , 0 ) , GetBuildingFromArea ( depotArea4 , 3 ) , GetBuildingFromArea ( depotArea5 , 4 ) , GetBuildingFromArea ( depotArea6 , 5 ) ] ;
1302: LD_ADDR_VAR 0 8
1306: PUSH
1307: LD_INT 16
1309: PPUSH
1310: LD_INT 2
1312: PPUSH
1313: CALL 45728 0 2
1317: PUSH
1318: LD_INT 22
1320: PPUSH
1321: LD_INT 1
1323: PPUSH
1324: CALL 45728 0 2
1328: PUSH
1329: LD_INT 28
1331: PPUSH
1332: LD_INT 0
1334: PPUSH
1335: CALL 45728 0 2
1339: PUSH
1340: LD_INT 34
1342: PPUSH
1343: LD_INT 3
1345: PPUSH
1346: CALL 45728 0 2
1350: PUSH
1351: LD_INT 38
1353: PPUSH
1354: LD_INT 4
1356: PPUSH
1357: CALL 45728 0 2
1361: PUSH
1362: LD_INT 42
1364: PPUSH
1365: LD_INT 5
1367: PPUSH
1368: CALL 45728 0 2
1372: PUSH
1373: EMPTY
1374: LIST
1375: LIST
1376: LIST
1377: LIST
1378: LIST
1379: LIST
1380: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1381: LD_ADDR_VAR 0 3
1385: PUSH
1386: DOUBLE
1387: LD_INT 1
1389: DEC
1390: ST_TO_ADDR
1391: LD_VAR 0 8
1395: PPUSH
1396: CALL 5043 0 1
1400: PUSH
1401: FOR_TO
1402: IFFALSE 1506
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1404: LD_ADDR_EXP 19
1408: PUSH
1409: LD_EXP 19
1413: PPUSH
1414: LD_VAR 0 3
1418: PPUSH
1419: LD_VAR 0 8
1423: PUSH
1424: LD_VAR 0 3
1428: ARRAY
1429: PUSH
1430: LD_INT 1
1432: ARRAY
1433: PPUSH
1434: LD_VAR 0 8
1438: PUSH
1439: LD_VAR 0 3
1443: ARRAY
1444: PUSH
1445: LD_INT 3
1447: ARRAY
1448: PPUSH
1449: LD_INT 10
1451: PPUSH
1452: CALL_OW 272
1456: PUSH
1457: LD_VAR 0 8
1461: PUSH
1462: LD_VAR 0 3
1466: ARRAY
1467: PUSH
1468: LD_INT 2
1470: ARRAY
1471: PPUSH
1472: LD_VAR 0 8
1476: PUSH
1477: LD_VAR 0 3
1481: ARRAY
1482: PUSH
1483: LD_INT 3
1485: ARRAY
1486: PPUSH
1487: LD_INT 10
1489: PPUSH
1490: CALL_OW 273
1494: PUSH
1495: EMPTY
1496: LIST
1497: LIST
1498: PPUSH
1499: CALL_OW 1
1503: ST_TO_ADDR
1504: GO 1401
1506: POP
1507: POP
// if hasOil then
1508: LD_VAR 0 5
1512: IFFALSE 1623
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1514: LD_ADDR_VAR 0 4
1518: PUSH
1519: LD_EXP 4
1523: PUSH
1524: LD_INT 6
1526: ARRAY
1527: PUSH
1528: LD_INT 2
1530: EQUAL
1531: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) ] ;
1532: LD_ADDR_EXP 10
1536: PUSH
1537: LD_INT 20
1539: PPUSH
1540: LD_VAR 0 4
1544: PPUSH
1545: CALL 45561 0 2
1549: PUSH
1550: LD_INT 26
1552: PPUSH
1553: LD_VAR 0 4
1557: PPUSH
1558: CALL 45561 0 2
1562: PUSH
1563: LD_INT 32
1565: PPUSH
1566: LD_VAR 0 4
1570: PPUSH
1571: CALL 45561 0 2
1575: PUSH
1576: LD_INT 46
1578: PPUSH
1579: LD_VAR 0 4
1583: PPUSH
1584: CALL 45561 0 2
1588: PUSH
1589: LD_INT 48
1591: PPUSH
1592: LD_VAR 0 4
1596: PPUSH
1597: CALL 45561 0 2
1601: PUSH
1602: LD_INT 50
1604: PPUSH
1605: LD_VAR 0 4
1609: PPUSH
1610: CALL 45561 0 2
1614: PUSH
1615: EMPTY
1616: LIST
1617: LIST
1618: LIST
1619: LIST
1620: LIST
1621: LIST
1622: ST_TO_ADDR
// end ; if hasSib then
1623: LD_VAR 0 6
1627: IFFALSE 1738
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1629: LD_ADDR_VAR 0 4
1633: PUSH
1634: LD_EXP 4
1638: PUSH
1639: LD_INT 7
1641: ARRAY
1642: PUSH
1643: LD_INT 2
1645: EQUAL
1646: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) ] ;
1647: LD_ADDR_EXP 11
1651: PUSH
1652: LD_INT 21
1654: PPUSH
1655: LD_VAR 0 4
1659: PPUSH
1660: CALL 45561 0 2
1664: PUSH
1665: LD_INT 27
1667: PPUSH
1668: LD_VAR 0 4
1672: PPUSH
1673: CALL 45561 0 2
1677: PUSH
1678: LD_INT 33
1680: PPUSH
1681: LD_VAR 0 4
1685: PPUSH
1686: CALL 45561 0 2
1690: PUSH
1691: LD_INT 47
1693: PPUSH
1694: LD_VAR 0 4
1698: PPUSH
1699: CALL 45561 0 2
1703: PUSH
1704: LD_INT 49
1706: PPUSH
1707: LD_VAR 0 4
1711: PPUSH
1712: CALL 45561 0 2
1716: PUSH
1717: LD_INT 51
1719: PPUSH
1720: LD_VAR 0 4
1724: PPUSH
1725: CALL 45561 0 2
1729: PUSH
1730: EMPTY
1731: LIST
1732: LIST
1733: LIST
1734: LIST
1735: LIST
1736: LIST
1737: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1738: LD_VAR 0 7
1742: PUSH
1743: LD_INT 1
1745: GREATEREQUAL
1746: IFFALSE 1758
// mpDepots := startPos ;
1748: LD_ADDR_EXP 12
1752: PUSH
1753: LD_VAR 0 8
1757: ST_TO_ADDR
// if baseLevel >= 2 then
1758: LD_VAR 0 7
1762: PUSH
1763: LD_INT 2
1765: GREATEREQUAL
1766: IFFALSE 2081
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunArea1a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea1 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea2a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea2 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea3a , 3 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea3 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea4a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4b , 0 ) , b_armoury ^ GetBuildingFromArea ( armArea4 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea5a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5b , 1 ) , b_armoury ^ GetBuildingFromArea ( armArea5 , 1 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea6a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea6 , 2 ) ] ] ;
1768: LD_ADDR_EXP 15
1772: PUSH
1773: LD_INT 31
1775: PUSH
1776: LD_INT 17
1778: PPUSH
1779: LD_INT 5
1781: PPUSH
1782: CALL 45728 0 2
1786: ADD
1787: PUSH
1788: LD_INT 31
1790: PUSH
1791: LD_INT 18
1793: PPUSH
1794: LD_INT 5
1796: PPUSH
1797: CALL 45728 0 2
1801: ADD
1802: PUSH
1803: LD_INT 4
1805: PUSH
1806: LD_INT 19
1808: PPUSH
1809: LD_INT 5
1811: PPUSH
1812: CALL 45728 0 2
1816: ADD
1817: PUSH
1818: EMPTY
1819: LIST
1820: LIST
1821: LIST
1822: PUSH
1823: LD_INT 31
1825: PUSH
1826: LD_INT 23
1828: PPUSH
1829: LD_INT 4
1831: PPUSH
1832: CALL 45728 0 2
1836: ADD
1837: PUSH
1838: LD_INT 31
1840: PUSH
1841: LD_INT 24
1843: PPUSH
1844: LD_INT 4
1846: PPUSH
1847: CALL 45728 0 2
1851: ADD
1852: PUSH
1853: LD_INT 4
1855: PUSH
1856: LD_INT 25
1858: PPUSH
1859: LD_INT 4
1861: PPUSH
1862: CALL 45728 0 2
1866: ADD
1867: PUSH
1868: EMPTY
1869: LIST
1870: LIST
1871: LIST
1872: PUSH
1873: LD_INT 31
1875: PUSH
1876: LD_INT 29
1878: PPUSH
1879: LD_INT 3
1881: PPUSH
1882: CALL 45728 0 2
1886: ADD
1887: PUSH
1888: LD_INT 31
1890: PUSH
1891: LD_INT 30
1893: PPUSH
1894: LD_INT 2
1896: PPUSH
1897: CALL 45728 0 2
1901: ADD
1902: PUSH
1903: LD_INT 4
1905: PUSH
1906: LD_INT 31
1908: PPUSH
1909: LD_INT 3
1911: PPUSH
1912: CALL 45728 0 2
1916: ADD
1917: PUSH
1918: EMPTY
1919: LIST
1920: LIST
1921: LIST
1922: PUSH
1923: LD_INT 31
1925: PUSH
1926: LD_INT 35
1928: PPUSH
1929: LD_INT 5
1931: PPUSH
1932: CALL 45728 0 2
1936: ADD
1937: PUSH
1938: LD_INT 31
1940: PUSH
1941: LD_INT 36
1943: PPUSH
1944: LD_INT 0
1946: PPUSH
1947: CALL 45728 0 2
1951: ADD
1952: PUSH
1953: LD_INT 4
1955: PUSH
1956: LD_INT 37
1958: PPUSH
1959: LD_INT 0
1961: PPUSH
1962: CALL 45728 0 2
1966: ADD
1967: PUSH
1968: EMPTY
1969: LIST
1970: LIST
1971: LIST
1972: PUSH
1973: LD_INT 31
1975: PUSH
1976: LD_INT 39
1978: PPUSH
1979: LD_INT 1
1981: PPUSH
1982: CALL 45728 0 2
1986: ADD
1987: PUSH
1988: LD_INT 31
1990: PUSH
1991: LD_INT 40
1993: PPUSH
1994: LD_INT 1
1996: PPUSH
1997: CALL 45728 0 2
2001: ADD
2002: PUSH
2003: LD_INT 4
2005: PUSH
2006: LD_INT 41
2008: PPUSH
2009: LD_INT 1
2011: PPUSH
2012: CALL 45728 0 2
2016: ADD
2017: PUSH
2018: EMPTY
2019: LIST
2020: LIST
2021: LIST
2022: PUSH
2023: LD_INT 31
2025: PUSH
2026: LD_INT 43
2028: PPUSH
2029: LD_INT 1
2031: PPUSH
2032: CALL 45728 0 2
2036: ADD
2037: PUSH
2038: LD_INT 31
2040: PUSH
2041: LD_INT 44
2043: PPUSH
2044: LD_INT 2
2046: PPUSH
2047: CALL 45728 0 2
2051: ADD
2052: PUSH
2053: LD_INT 4
2055: PUSH
2056: LD_INT 45
2058: PPUSH
2059: LD_INT 2
2061: PPUSH
2062: CALL 45728 0 2
2066: ADD
2067: PUSH
2068: EMPTY
2069: LIST
2070: LIST
2071: LIST
2072: PUSH
2073: EMPTY
2074: LIST
2075: LIST
2076: LIST
2077: LIST
2078: LIST
2079: LIST
2080: ST_TO_ADDR
// end ; end ;
2081: LD_VAR 0 2
2085: RET
// every 0 0$2 marked mpActive do var i , x , tmp , time , areas , normalTime , delayTime , maxTime ;
2086: GO 2088
2088: DISABLE
2089: LD_INT 0
2091: PPUSH
2092: PPUSH
2093: PPUSH
2094: PPUSH
2095: PPUSH
2096: PPUSH
2097: PPUSH
2098: PPUSH
// begin if not mpShipments then
2099: LD_EXP 25
2103: NOT
2104: IFFALSE 2108
// exit ;
2106: GO 2673
// case mpShipments of 1 :
2108: LD_EXP 25
2112: PUSH
2113: LD_INT 1
2115: DOUBLE
2116: EQUAL
2117: IFTRUE 2121
2119: GO 2156
2121: POP
// begin time := 0 0$30 ;
2122: LD_ADDR_VAR 0 4
2126: PUSH
2127: LD_INT 1050
2129: ST_TO_ADDR
// normalTime := 0 0$30 ;
2130: LD_ADDR_VAR 0 6
2134: PUSH
2135: LD_INT 1050
2137: ST_TO_ADDR
// maxTime := 1 1$20 ;
2138: LD_ADDR_VAR 0 8
2142: PUSH
2143: LD_INT 2800
2145: ST_TO_ADDR
// delayTime := 0 0$5 ;
2146: LD_ADDR_VAR 0 7
2150: PUSH
2151: LD_INT 175
2153: ST_TO_ADDR
// end ; 2 :
2154: GO 2286
2156: LD_INT 2
2158: DOUBLE
2159: EQUAL
2160: IFTRUE 2164
2162: GO 2199
2164: POP
// begin time := 0 0$25 ;
2165: LD_ADDR_VAR 0 4
2169: PUSH
2170: LD_INT 875
2172: ST_TO_ADDR
// normalTime := 0 0$25 ;
2173: LD_ADDR_VAR 0 6
2177: PUSH
2178: LD_INT 875
2180: ST_TO_ADDR
// maxTime := 1 1$10 ;
2181: LD_ADDR_VAR 0 8
2185: PUSH
2186: LD_INT 2450
2188: ST_TO_ADDR
// delayTime := 0 0$4 ;
2189: LD_ADDR_VAR 0 7
2193: PUSH
2194: LD_INT 140
2196: ST_TO_ADDR
// end ; 3 :
2197: GO 2286
2199: LD_INT 3
2201: DOUBLE
2202: EQUAL
2203: IFTRUE 2207
2205: GO 2242
2207: POP
// begin time := 0 0$20 ;
2208: LD_ADDR_VAR 0 4
2212: PUSH
2213: LD_INT 700
2215: ST_TO_ADDR
// normalTime := 0 0$20 ;
2216: LD_ADDR_VAR 0 6
2220: PUSH
2221: LD_INT 700
2223: ST_TO_ADDR
// maxTime := 1 1$00 ;
2224: LD_ADDR_VAR 0 8
2228: PUSH
2229: LD_INT 2100
2231: ST_TO_ADDR
// delayTime := 0 0$3 ;
2232: LD_ADDR_VAR 0 7
2236: PUSH
2237: LD_INT 105
2239: ST_TO_ADDR
// end ; 4 :
2240: GO 2286
2242: LD_INT 4
2244: DOUBLE
2245: EQUAL
2246: IFTRUE 2250
2248: GO 2285
2250: POP
// begin time := 0 0$15 ;
2251: LD_ADDR_VAR 0 4
2255: PUSH
2256: LD_INT 525
2258: ST_TO_ADDR
// normalTime := 0 0$15 ;
2259: LD_ADDR_VAR 0 6
2263: PUSH
2264: LD_INT 525
2266: ST_TO_ADDR
// maxTime := 0 0$55 ;
2267: LD_ADDR_VAR 0 8
2271: PUSH
2272: LD_INT 1925
2274: ST_TO_ADDR
// delayTime := 0 0$2 ;
2275: LD_ADDR_VAR 0 7
2279: PUSH
2280: LD_INT 70
2282: ST_TO_ADDR
// end ; end ;
2283: GO 2286
2285: POP
// tmp := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 ] ;
2286: LD_ADDR_VAR 0 3
2290: PUSH
2291: LD_INT 1
2293: PUSH
2294: LD_INT 2
2296: PUSH
2297: LD_INT 3
2299: PUSH
2300: LD_INT 6
2302: PUSH
2303: LD_INT 5
2305: PUSH
2306: LD_INT 4
2308: PUSH
2309: EMPTY
2310: LIST
2311: LIST
2312: LIST
2313: LIST
2314: LIST
2315: LIST
2316: ST_TO_ADDR
// areas := [ ] ;
2317: LD_ADDR_VAR 0 5
2321: PUSH
2322: EMPTY
2323: ST_TO_ADDR
// for i := 1 to 8 do
2324: LD_ADDR_VAR 0 1
2328: PUSH
2329: DOUBLE
2330: LD_INT 1
2332: DEC
2333: ST_TO_ADDR
2334: LD_INT 8
2336: PUSH
2337: FOR_TO
2338: IFFALSE 2385
// begin if not mpSidePositions [ i ] then
2340: LD_EXP 5
2344: PUSH
2345: LD_VAR 0 1
2349: ARRAY
2350: NOT
2351: IFFALSE 2355
// continue ;
2353: GO 2337
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2355: LD_ADDR_VAR 0 5
2359: PUSH
2360: LD_VAR 0 5
2364: PUSH
2365: LD_VAR 0 3
2369: PUSH
2370: LD_EXP 5
2374: PUSH
2375: LD_VAR 0 1
2379: ARRAY
2380: ARRAY
2381: ADD
2382: ST_TO_ADDR
// end ;
2383: GO 2337
2385: POP
2386: POP
// x := 1 ;
2387: LD_ADDR_VAR 0 2
2391: PUSH
2392: LD_INT 1
2394: ST_TO_ADDR
// repeat wait ( time ) ;
2395: LD_VAR 0 4
2399: PPUSH
2400: CALL_OW 67
// x := Inc ( x ) ;
2404: LD_ADDR_VAR 0 2
2408: PUSH
2409: LD_VAR 0 2
2413: PPUSH
2414: CALL 42382 0 1
2418: ST_TO_ADDR
// if x > 5 then
2419: LD_VAR 0 2
2423: PUSH
2424: LD_INT 5
2426: GREATER
2427: IFFALSE 2437
// x := 1 ;
2429: LD_ADDR_VAR 0 2
2433: PUSH
2434: LD_INT 1
2436: ST_TO_ADDR
// for i in areas do
2437: LD_ADDR_VAR 0 1
2441: PUSH
2442: LD_VAR 0 5
2446: PUSH
2447: FOR_IN
2448: IFFALSE 2487
// begin if GetResourceArea ( i , mat_cans ) < 20 then
2450: LD_VAR 0 1
2454: PPUSH
2455: LD_INT 1
2457: PPUSH
2458: CALL_OW 287
2462: PUSH
2463: LD_INT 20
2465: LESS
2466: IFFALSE 2485
// begin CreateCratesArea ( x , i , true ) ;
2468: LD_VAR 0 2
2472: PPUSH
2473: LD_VAR 0 1
2477: PPUSH
2478: LD_INT 1
2480: PPUSH
2481: CALL_OW 55
// end ; end ;
2485: GO 2447
2487: POP
2488: POP
// if GetResourceArea ( MZBaseArea , mat_cans ) < 100 then
2489: LD_INT 7
2491: PPUSH
2492: LD_INT 1
2494: PPUSH
2495: CALL_OW 287
2499: PUSH
2500: LD_INT 100
2502: LESS
2503: IFFALSE 2547
// for i := 1 to Count ( areas ) do
2505: LD_ADDR_VAR 0 1
2509: PUSH
2510: DOUBLE
2511: LD_INT 1
2513: DEC
2514: ST_TO_ADDR
2515: LD_VAR 0 5
2519: PPUSH
2520: CALL 5043 0 1
2524: PUSH
2525: FOR_TO
2526: IFFALSE 2545
// CreateCratesArea ( x , MZBaseArea , true ) ;
2528: LD_VAR 0 2
2532: PPUSH
2533: LD_INT 7
2535: PPUSH
2536: LD_INT 1
2538: PPUSH
2539: CALL_OW 55
2543: GO 2525
2545: POP
2546: POP
// if GetResourceArea ( MZSpecialArea , mat_cans ) = 0 then
2547: LD_INT 8
2549: PPUSH
2550: LD_INT 1
2552: PPUSH
2553: CALL_OW 287
2557: PUSH
2558: LD_INT 0
2560: EQUAL
2561: IFFALSE 2600
// begin for i := 1 to 3 do
2563: LD_ADDR_VAR 0 1
2567: PUSH
2568: DOUBLE
2569: LD_INT 1
2571: DEC
2572: ST_TO_ADDR
2573: LD_INT 3
2575: PUSH
2576: FOR_TO
2577: IFFALSE 2596
// CreateCratesArea ( x , MZSpecialArea , true ) ;
2579: LD_VAR 0 2
2583: PPUSH
2584: LD_INT 8
2586: PPUSH
2587: LD_INT 1
2589: PPUSH
2590: CALL_OW 55
2594: GO 2576
2596: POP
2597: POP
// end else
2598: GO 2631
// if GetResourceArea ( MZSpecialArea , mat_cans ) < 30 then
2600: LD_INT 8
2602: PPUSH
2603: LD_INT 1
2605: PPUSH
2606: CALL_OW 287
2610: PUSH
2611: LD_INT 30
2613: LESS
2614: IFFALSE 2631
// CreateCratesArea ( x , MZSpecialArea , true ) ;
2616: LD_VAR 0 2
2620: PPUSH
2621: LD_INT 8
2623: PPUSH
2624: LD_INT 1
2626: PPUSH
2627: CALL_OW 55
// time := time + delayTime ;
2631: LD_ADDR_VAR 0 4
2635: PUSH
2636: LD_VAR 0 4
2640: PUSH
2641: LD_VAR 0 7
2645: PLUS
2646: ST_TO_ADDR
// if time > maxTime then
2647: LD_VAR 0 4
2651: PUSH
2652: LD_VAR 0 8
2656: GREATER
2657: IFFALSE 2669
// time := normalTime ;
2659: LD_ADDR_VAR 0 4
2663: PUSH
2664: LD_VAR 0 6
2668: ST_TO_ADDR
// until false ;
2669: LD_INT 0
2671: IFFALSE 2395
// end ; end_of_file
2673: PPOPN 8
2675: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2676: LD_VAR 0 1
2680: PPUSH
2681: CALL 56088 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2685: LD_VAR 0 1
2689: PPUSH
2690: CALL 51649 0 1
// end ;
2694: PPOPN 1
2696: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2697: LD_VAR 0 1
2701: PPUSH
2702: CALL 56105 0 1
// end ;
2706: PPOPN 1
2708: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2709: LD_VAR 0 1
2713: PPUSH
2714: CALL 52356 0 1
2718: PPOPN 1
2720: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2721: LD_VAR 0 1
2725: PPUSH
2726: LD_VAR 0 2
2730: PPUSH
2731: CALL 56146 0 2
2735: PPOPN 2
2737: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ;
2738: LD_VAR 0 1
2742: PPUSH
2743: LD_VAR 0 2
2747: PPUSH
2748: LD_VAR 0 3
2752: PPUSH
2753: CALL 52409 0 3
2757: PPOPN 3
2759: END
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ;
2760: LD_VAR 0 1
2764: PPUSH
2765: LD_VAR 0 2
2769: PPUSH
2770: LD_VAR 0 3
2774: PPUSH
2775: LD_VAR 0 4
2779: PPUSH
2780: LD_VAR 0 5
2784: PPUSH
2785: CALL 53048 0 5
2789: PPOPN 5
2791: END
// on VehicleCaptured ( newId , oldId , oldSide , unit ) do Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; end_of_file
2792: LD_VAR 0 1
2796: PPUSH
2797: LD_VAR 0 2
2801: PPUSH
2802: LD_VAR 0 3
2806: PPUSH
2807: LD_VAR 0 4
2811: PPUSH
2812: CALL 53151 0 4
2816: PPOPN 4
2818: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
2819: LD_INT 0
2821: PPUSH
2822: PPUSH
// if exist_mode then
2823: LD_VAR 0 2
2827: IFFALSE 2873
// begin unit := CreateCharacter ( prefix & ident ) ;
2829: LD_ADDR_VAR 0 5
2833: PUSH
2834: LD_VAR 0 3
2838: PUSH
2839: LD_VAR 0 1
2843: STR
2844: PPUSH
2845: CALL_OW 34
2849: ST_TO_ADDR
// if unit then
2850: LD_VAR 0 5
2854: IFFALSE 2871
// DeleteCharacters ( prefix & ident ) ;
2856: LD_VAR 0 3
2860: PUSH
2861: LD_VAR 0 1
2865: STR
2866: PPUSH
2867: CALL_OW 40
// end else
2871: GO 2888
// unit := NewCharacter ( ident ) ;
2873: LD_ADDR_VAR 0 5
2877: PUSH
2878: LD_VAR 0 1
2882: PPUSH
2883: CALL_OW 25
2887: ST_TO_ADDR
// result := unit ;
2888: LD_ADDR_VAR 0 4
2892: PUSH
2893: LD_VAR 0 5
2897: ST_TO_ADDR
// end ;
2898: LD_VAR 0 4
2902: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
2903: LD_INT 0
2905: PPUSH
2906: PPUSH
// if exist_mode then
2907: LD_VAR 0 2
2911: IFFALSE 2936
// unit := CreateCharacter ( prefix & ident ) else
2913: LD_ADDR_VAR 0 5
2917: PUSH
2918: LD_VAR 0 3
2922: PUSH
2923: LD_VAR 0 1
2927: STR
2928: PPUSH
2929: CALL_OW 34
2933: ST_TO_ADDR
2934: GO 2951
// unit := NewCharacter ( ident ) ;
2936: LD_ADDR_VAR 0 5
2940: PUSH
2941: LD_VAR 0 1
2945: PPUSH
2946: CALL_OW 25
2950: ST_TO_ADDR
// result := unit ;
2951: LD_ADDR_VAR 0 4
2955: PUSH
2956: LD_VAR 0 5
2960: ST_TO_ADDR
// end ;
2961: LD_VAR 0 4
2965: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
2966: LD_INT 0
2968: PPUSH
2969: PPUSH
// if not side or not nation then
2970: LD_VAR 0 1
2974: NOT
2975: IFTRUE 2984
2977: PUSH
2978: LD_VAR 0 2
2982: NOT
2983: OR
2984: IFFALSE 2988
// exit ;
2986: GO 3782
// case nation of nation_american :
2988: LD_VAR 0 2
2992: PUSH
2993: LD_INT 1
2995: DOUBLE
2996: EQUAL
2997: IFTRUE 3001
2999: GO 3223
3001: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
3002: LD_ADDR_VAR 0 4
3006: PUSH
3007: LD_INT 35
3009: PUSH
3010: LD_INT 45
3012: PUSH
3013: LD_INT 46
3015: PUSH
3016: LD_INT 47
3018: PUSH
3019: LD_INT 82
3021: PUSH
3022: LD_INT 83
3024: PUSH
3025: LD_INT 84
3027: PUSH
3028: LD_INT 85
3030: PUSH
3031: LD_INT 86
3033: PUSH
3034: LD_INT 1
3036: PUSH
3037: LD_INT 2
3039: PUSH
3040: LD_INT 6
3042: PUSH
3043: LD_INT 15
3045: PUSH
3046: LD_INT 16
3048: PUSH
3049: LD_INT 7
3051: PUSH
3052: LD_INT 12
3054: PUSH
3055: LD_INT 13
3057: PUSH
3058: LD_INT 10
3060: PUSH
3061: LD_INT 14
3063: PUSH
3064: LD_INT 20
3066: PUSH
3067: LD_INT 21
3069: PUSH
3070: LD_INT 22
3072: PUSH
3073: LD_INT 25
3075: PUSH
3076: LD_INT 32
3078: PUSH
3079: LD_INT 27
3081: PUSH
3082: LD_INT 36
3084: PUSH
3085: LD_INT 69
3087: PUSH
3088: LD_INT 39
3090: PUSH
3091: LD_INT 34
3093: PUSH
3094: LD_INT 40
3096: PUSH
3097: LD_INT 48
3099: PUSH
3100: LD_INT 49
3102: PUSH
3103: LD_INT 50
3105: PUSH
3106: LD_INT 51
3108: PUSH
3109: LD_INT 52
3111: PUSH
3112: LD_INT 53
3114: PUSH
3115: LD_INT 54
3117: PUSH
3118: LD_INT 55
3120: PUSH
3121: LD_INT 56
3123: PUSH
3124: LD_INT 57
3126: PUSH
3127: LD_INT 58
3129: PUSH
3130: LD_INT 59
3132: PUSH
3133: LD_INT 60
3135: PUSH
3136: LD_INT 61
3138: PUSH
3139: LD_INT 62
3141: PUSH
3142: LD_INT 80
3144: PUSH
3145: LD_INT 82
3147: PUSH
3148: LD_INT 83
3150: PUSH
3151: LD_INT 84
3153: PUSH
3154: LD_INT 85
3156: PUSH
3157: LD_INT 86
3159: PUSH
3160: LD_INT 90
3162: PUSH
3163: LD_INT 93
3165: PUSH
3166: EMPTY
3167: LIST
3168: LIST
3169: LIST
3170: LIST
3171: LIST
3172: LIST
3173: LIST
3174: LIST
3175: LIST
3176: LIST
3177: LIST
3178: LIST
3179: LIST
3180: LIST
3181: LIST
3182: LIST
3183: LIST
3184: LIST
3185: LIST
3186: LIST
3187: LIST
3188: LIST
3189: LIST
3190: LIST
3191: LIST
3192: LIST
3193: LIST
3194: LIST
3195: LIST
3196: LIST
3197: LIST
3198: LIST
3199: LIST
3200: LIST
3201: LIST
3202: LIST
3203: LIST
3204: LIST
3205: LIST
3206: LIST
3207: LIST
3208: LIST
3209: LIST
3210: LIST
3211: LIST
3212: LIST
3213: LIST
3214: LIST
3215: LIST
3216: LIST
3217: LIST
3218: LIST
3219: LIST
3220: ST_TO_ADDR
3221: GO 3704
3223: LD_INT 2
3225: DOUBLE
3226: EQUAL
3227: IFTRUE 3231
3229: GO 3465
3231: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
3232: LD_ADDR_VAR 0 4
3236: PUSH
3237: LD_INT 35
3239: PUSH
3240: LD_INT 45
3242: PUSH
3243: LD_INT 46
3245: PUSH
3246: LD_INT 47
3248: PUSH
3249: LD_INT 82
3251: PUSH
3252: LD_INT 83
3254: PUSH
3255: LD_INT 84
3257: PUSH
3258: LD_INT 85
3260: PUSH
3261: LD_INT 87
3263: PUSH
3264: LD_INT 70
3266: PUSH
3267: LD_INT 1
3269: PUSH
3270: LD_INT 11
3272: PUSH
3273: LD_INT 3
3275: PUSH
3276: LD_INT 4
3278: PUSH
3279: LD_INT 5
3281: PUSH
3282: LD_INT 6
3284: PUSH
3285: LD_INT 15
3287: PUSH
3288: LD_INT 18
3290: PUSH
3291: LD_INT 7
3293: PUSH
3294: LD_INT 17
3296: PUSH
3297: LD_INT 8
3299: PUSH
3300: LD_INT 20
3302: PUSH
3303: LD_INT 21
3305: PUSH
3306: LD_INT 22
3308: PUSH
3309: LD_INT 72
3311: PUSH
3312: LD_INT 26
3314: PUSH
3315: LD_INT 69
3317: PUSH
3318: LD_INT 39
3320: PUSH
3321: LD_INT 40
3323: PUSH
3324: LD_INT 41
3326: PUSH
3327: LD_INT 42
3329: PUSH
3330: LD_INT 43
3332: PUSH
3333: LD_INT 48
3335: PUSH
3336: LD_INT 49
3338: PUSH
3339: LD_INT 50
3341: PUSH
3342: LD_INT 51
3344: PUSH
3345: LD_INT 52
3347: PUSH
3348: LD_INT 53
3350: PUSH
3351: LD_INT 54
3353: PUSH
3354: LD_INT 55
3356: PUSH
3357: LD_INT 56
3359: PUSH
3360: LD_INT 60
3362: PUSH
3363: LD_INT 61
3365: PUSH
3366: LD_INT 62
3368: PUSH
3369: LD_INT 66
3371: PUSH
3372: LD_INT 67
3374: PUSH
3375: LD_INT 68
3377: PUSH
3378: LD_INT 81
3380: PUSH
3381: LD_INT 82
3383: PUSH
3384: LD_INT 83
3386: PUSH
3387: LD_INT 84
3389: PUSH
3390: LD_INT 85
3392: PUSH
3393: LD_INT 87
3395: PUSH
3396: LD_INT 88
3398: PUSH
3399: LD_INT 92
3401: PUSH
3402: LD_INT 94
3404: PUSH
3405: EMPTY
3406: LIST
3407: LIST
3408: LIST
3409: LIST
3410: LIST
3411: LIST
3412: LIST
3413: LIST
3414: LIST
3415: LIST
3416: LIST
3417: LIST
3418: LIST
3419: LIST
3420: LIST
3421: LIST
3422: LIST
3423: LIST
3424: LIST
3425: LIST
3426: LIST
3427: LIST
3428: LIST
3429: LIST
3430: LIST
3431: LIST
3432: LIST
3433: LIST
3434: LIST
3435: LIST
3436: LIST
3437: LIST
3438: LIST
3439: LIST
3440: LIST
3441: LIST
3442: LIST
3443: LIST
3444: LIST
3445: LIST
3446: LIST
3447: LIST
3448: LIST
3449: LIST
3450: LIST
3451: LIST
3452: LIST
3453: LIST
3454: LIST
3455: LIST
3456: LIST
3457: LIST
3458: LIST
3459: LIST
3460: LIST
3461: LIST
3462: ST_TO_ADDR
3463: GO 3704
3465: LD_INT 3
3467: DOUBLE
3468: EQUAL
3469: IFTRUE 3473
3471: GO 3703
3473: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
3474: LD_ADDR_VAR 0 4
3478: PUSH
3479: LD_INT 46
3481: PUSH
3482: LD_INT 47
3484: PUSH
3485: LD_INT 1
3487: PUSH
3488: LD_INT 2
3490: PUSH
3491: LD_INT 82
3493: PUSH
3494: LD_INT 83
3496: PUSH
3497: LD_INT 84
3499: PUSH
3500: LD_INT 85
3502: PUSH
3503: LD_INT 86
3505: PUSH
3506: LD_INT 11
3508: PUSH
3509: LD_INT 9
3511: PUSH
3512: LD_INT 20
3514: PUSH
3515: LD_INT 19
3517: PUSH
3518: LD_INT 21
3520: PUSH
3521: LD_INT 24
3523: PUSH
3524: LD_INT 22
3526: PUSH
3527: LD_INT 25
3529: PUSH
3530: LD_INT 28
3532: PUSH
3533: LD_INT 29
3535: PUSH
3536: LD_INT 30
3538: PUSH
3539: LD_INT 31
3541: PUSH
3542: LD_INT 37
3544: PUSH
3545: LD_INT 38
3547: PUSH
3548: LD_INT 32
3550: PUSH
3551: LD_INT 27
3553: PUSH
3554: LD_INT 33
3556: PUSH
3557: LD_INT 69
3559: PUSH
3560: LD_INT 39
3562: PUSH
3563: LD_INT 34
3565: PUSH
3566: LD_INT 40
3568: PUSH
3569: LD_INT 71
3571: PUSH
3572: LD_INT 23
3574: PUSH
3575: LD_INT 44
3577: PUSH
3578: LD_INT 48
3580: PUSH
3581: LD_INT 49
3583: PUSH
3584: LD_INT 50
3586: PUSH
3587: LD_INT 51
3589: PUSH
3590: LD_INT 52
3592: PUSH
3593: LD_INT 53
3595: PUSH
3596: LD_INT 54
3598: PUSH
3599: LD_INT 55
3601: PUSH
3602: LD_INT 56
3604: PUSH
3605: LD_INT 57
3607: PUSH
3608: LD_INT 58
3610: PUSH
3611: LD_INT 59
3613: PUSH
3614: LD_INT 63
3616: PUSH
3617: LD_INT 64
3619: PUSH
3620: LD_INT 65
3622: PUSH
3623: LD_INT 82
3625: PUSH
3626: LD_INT 83
3628: PUSH
3629: LD_INT 84
3631: PUSH
3632: LD_INT 85
3634: PUSH
3635: LD_INT 86
3637: PUSH
3638: LD_INT 89
3640: PUSH
3641: LD_INT 91
3643: PUSH
3644: EMPTY
3645: LIST
3646: LIST
3647: LIST
3648: LIST
3649: LIST
3650: LIST
3651: LIST
3652: LIST
3653: LIST
3654: LIST
3655: LIST
3656: LIST
3657: LIST
3658: LIST
3659: LIST
3660: LIST
3661: LIST
3662: LIST
3663: LIST
3664: LIST
3665: LIST
3666: LIST
3667: LIST
3668: LIST
3669: LIST
3670: LIST
3671: LIST
3672: LIST
3673: LIST
3674: LIST
3675: LIST
3676: LIST
3677: LIST
3678: LIST
3679: LIST
3680: LIST
3681: LIST
3682: LIST
3683: LIST
3684: LIST
3685: LIST
3686: LIST
3687: LIST
3688: LIST
3689: LIST
3690: LIST
3691: LIST
3692: LIST
3693: LIST
3694: LIST
3695: LIST
3696: LIST
3697: LIST
3698: LIST
3699: LIST
3700: ST_TO_ADDR
3701: GO 3704
3703: POP
// if state > - 1 and state < 3 then
3704: LD_VAR 0 3
3708: PUSH
3709: LD_INT 1
3711: NEG
3712: GREATER
3713: IFFALSE 3725
3715: PUSH
3716: LD_VAR 0 3
3720: PUSH
3721: LD_INT 3
3723: LESS
3724: AND
3725: IFFALSE 3782
// for i in result do
3727: LD_ADDR_VAR 0 5
3731: PUSH
3732: LD_VAR 0 4
3736: PUSH
3737: FOR_IN
3738: IFFALSE 3780
// if GetTech ( i , side ) <> state then
3740: LD_VAR 0 5
3744: PPUSH
3745: LD_VAR 0 1
3749: PPUSH
3750: CALL_OW 321
3754: PUSH
3755: LD_VAR 0 3
3759: NONEQUAL
3760: IFFALSE 3778
// result := result diff i ;
3762: LD_ADDR_VAR 0 4
3766: PUSH
3767: LD_VAR 0 4
3771: PUSH
3772: LD_VAR 0 5
3776: DIFF
3777: ST_TO_ADDR
3778: GO 3737
3780: POP
3781: POP
// end ;
3782: LD_VAR 0 4
3786: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
3787: LD_INT 0
3789: PPUSH
3790: PPUSH
3791: PPUSH
// result := true ;
3792: LD_ADDR_VAR 0 3
3796: PUSH
3797: LD_INT 1
3799: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
3800: LD_ADDR_VAR 0 5
3804: PUSH
3805: LD_VAR 0 2
3809: PPUSH
3810: CALL_OW 480
3814: ST_TO_ADDR
// if not tmp then
3815: LD_VAR 0 5
3819: NOT
3820: IFFALSE 3824
// exit ;
3822: GO 3873
// for i in tmp do
3824: LD_ADDR_VAR 0 4
3828: PUSH
3829: LD_VAR 0 5
3833: PUSH
3834: FOR_IN
3835: IFFALSE 3871
// if GetTech ( i , side ) <> state_researched then
3837: LD_VAR 0 4
3841: PPUSH
3842: LD_VAR 0 1
3846: PPUSH
3847: CALL_OW 321
3851: PUSH
3852: LD_INT 2
3854: NONEQUAL
3855: IFFALSE 3869
// begin result := false ;
3857: LD_ADDR_VAR 0 3
3861: PUSH
3862: LD_INT 0
3864: ST_TO_ADDR
// exit ;
3865: POP
3866: POP
3867: GO 3873
// end ;
3869: GO 3834
3871: POP
3872: POP
// end ;
3873: LD_VAR 0 3
3877: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
3878: LD_INT 0
3880: PPUSH
3881: PPUSH
3882: PPUSH
3883: PPUSH
3884: PPUSH
3885: PPUSH
3886: PPUSH
3887: PPUSH
3888: PPUSH
3889: PPUSH
3890: PPUSH
3891: PPUSH
3892: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
3893: LD_VAR 0 1
3897: NOT
3898: IFTRUE 3915
3900: PUSH
3901: LD_VAR 0 1
3905: PPUSH
3906: CALL_OW 257
3910: PUSH
3911: LD_INT 9
3913: NONEQUAL
3914: OR
3915: IFFALSE 3919
// exit ;
3917: GO 4498
// side := GetSide ( unit ) ;
3919: LD_ADDR_VAR 0 9
3923: PUSH
3924: LD_VAR 0 1
3928: PPUSH
3929: CALL_OW 255
3933: ST_TO_ADDR
// tech_space := tech_spacanom ;
3934: LD_ADDR_VAR 0 12
3938: PUSH
3939: LD_INT 29
3941: ST_TO_ADDR
// tech_time := tech_taurad ;
3942: LD_ADDR_VAR 0 13
3946: PUSH
3947: LD_INT 28
3949: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
3950: LD_ADDR_VAR 0 11
3954: PUSH
3955: LD_VAR 0 1
3959: PPUSH
3960: CALL_OW 310
3964: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
3965: LD_VAR 0 11
3969: PPUSH
3970: CALL_OW 247
3974: PUSH
3975: LD_INT 2
3977: EQUAL
3978: IFFALSE 3982
// exit ;
3980: GO 4498
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3982: LD_ADDR_VAR 0 8
3986: PUSH
3987: LD_INT 81
3989: PUSH
3990: LD_VAR 0 9
3994: PUSH
3995: EMPTY
3996: LIST
3997: LIST
3998: PUSH
3999: LD_INT 3
4001: PUSH
4002: LD_INT 21
4004: PUSH
4005: LD_INT 3
4007: PUSH
4008: EMPTY
4009: LIST
4010: LIST
4011: PUSH
4012: EMPTY
4013: LIST
4014: LIST
4015: PUSH
4016: EMPTY
4017: LIST
4018: LIST
4019: PPUSH
4020: CALL_OW 69
4024: ST_TO_ADDR
// if not tmp then
4025: LD_VAR 0 8
4029: NOT
4030: IFFALSE 4034
// exit ;
4032: GO 4498
// if in_unit then
4034: LD_VAR 0 11
4038: IFFALSE 4062
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
4040: LD_ADDR_VAR 0 10
4044: PUSH
4045: LD_VAR 0 8
4049: PPUSH
4050: LD_VAR 0 11
4054: PPUSH
4055: CALL_OW 74
4059: ST_TO_ADDR
4060: GO 4082
// enemy := NearestUnitToUnit ( tmp , unit ) ;
4062: LD_ADDR_VAR 0 10
4066: PUSH
4067: LD_VAR 0 8
4071: PPUSH
4072: LD_VAR 0 1
4076: PPUSH
4077: CALL_OW 74
4081: ST_TO_ADDR
// if not enemy then
4082: LD_VAR 0 10
4086: NOT
4087: IFFALSE 4091
// exit ;
4089: GO 4498
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
4091: LD_VAR 0 11
4095: IFFALSE 4117
4097: PUSH
4098: LD_VAR 0 11
4102: PPUSH
4103: LD_VAR 0 10
4107: PPUSH
4108: CALL_OW 296
4112: PUSH
4113: LD_INT 13
4115: GREATER
4116: AND
4117: IFTRUE 4139
4119: PUSH
4120: LD_VAR 0 1
4124: PPUSH
4125: LD_VAR 0 10
4129: PPUSH
4130: CALL_OW 296
4134: PUSH
4135: LD_INT 12
4137: GREATER
4138: OR
4139: IFFALSE 4143
// exit ;
4141: GO 4498
// missile := [ 1 ] ;
4143: LD_ADDR_VAR 0 14
4147: PUSH
4148: LD_INT 1
4150: PUSH
4151: EMPTY
4152: LIST
4153: ST_TO_ADDR
// if Researched ( side , tech_space ) then
4154: LD_VAR 0 9
4158: PPUSH
4159: LD_VAR 0 12
4163: PPUSH
4164: CALL_OW 325
4168: IFFALSE 4197
// missile := Replace ( missile , missile + 1 , 2 ) ;
4170: LD_ADDR_VAR 0 14
4174: PUSH
4175: LD_VAR 0 14
4179: PPUSH
4180: LD_VAR 0 14
4184: PUSH
4185: LD_INT 1
4187: PLUS
4188: PPUSH
4189: LD_INT 2
4191: PPUSH
4192: CALL_OW 1
4196: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
4197: LD_VAR 0 9
4201: PPUSH
4202: LD_VAR 0 13
4206: PPUSH
4207: CALL_OW 325
4211: IFFALSE 4235
4213: PUSH
4214: LD_VAR 0 10
4218: PPUSH
4219: CALL_OW 255
4223: PPUSH
4224: LD_VAR 0 13
4228: PPUSH
4229: CALL_OW 325
4233: NOT
4234: AND
4235: IFFALSE 4264
// missile := Replace ( missile , missile + 1 , 3 ) ;
4237: LD_ADDR_VAR 0 14
4241: PUSH
4242: LD_VAR 0 14
4246: PPUSH
4247: LD_VAR 0 14
4251: PUSH
4252: LD_INT 1
4254: PLUS
4255: PPUSH
4256: LD_INT 3
4258: PPUSH
4259: CALL_OW 1
4263: ST_TO_ADDR
// if missile < 2 then
4264: LD_VAR 0 14
4268: PUSH
4269: LD_INT 2
4271: LESS
4272: IFFALSE 4276
// exit ;
4274: GO 4498
// x := GetX ( enemy ) ;
4276: LD_ADDR_VAR 0 4
4280: PUSH
4281: LD_VAR 0 10
4285: PPUSH
4286: CALL_OW 250
4290: ST_TO_ADDR
// y := GetY ( enemy ) ;
4291: LD_ADDR_VAR 0 5
4295: PUSH
4296: LD_VAR 0 10
4300: PPUSH
4301: CALL_OW 251
4305: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
4306: LD_ADDR_VAR 0 6
4310: PUSH
4311: LD_VAR 0 4
4315: PUSH
4316: LD_INT 1
4318: NEG
4319: PPUSH
4320: LD_INT 1
4322: PPUSH
4323: CALL_OW 12
4327: PLUS
4328: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
4329: LD_ADDR_VAR 0 7
4333: PUSH
4334: LD_VAR 0 5
4338: PUSH
4339: LD_INT 1
4341: NEG
4342: PPUSH
4343: LD_INT 1
4345: PPUSH
4346: CALL_OW 12
4350: PLUS
4351: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4352: LD_VAR 0 6
4356: PPUSH
4357: LD_VAR 0 7
4361: PPUSH
4362: CALL_OW 488
4366: NOT
4367: IFFALSE 4389
// begin _x := x ;
4369: LD_ADDR_VAR 0 6
4373: PUSH
4374: LD_VAR 0 4
4378: ST_TO_ADDR
// _y := y ;
4379: LD_ADDR_VAR 0 7
4383: PUSH
4384: LD_VAR 0 5
4388: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
4389: LD_ADDR_VAR 0 3
4393: PUSH
4394: LD_INT 1
4396: PPUSH
4397: LD_VAR 0 14
4401: PPUSH
4402: CALL_OW 12
4406: ST_TO_ADDR
// case i of 1 :
4407: LD_VAR 0 3
4411: PUSH
4412: LD_INT 1
4414: DOUBLE
4415: EQUAL
4416: IFTRUE 4420
4418: GO 4437
4420: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
4421: LD_VAR 0 1
4425: PPUSH
4426: LD_VAR 0 10
4430: PPUSH
4431: CALL_OW 115
4435: GO 4498
4437: LD_INT 2
4439: DOUBLE
4440: EQUAL
4441: IFTRUE 4445
4443: GO 4467
4445: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
4446: LD_VAR 0 1
4450: PPUSH
4451: LD_VAR 0 6
4455: PPUSH
4456: LD_VAR 0 7
4460: PPUSH
4461: CALL_OW 153
4465: GO 4498
4467: LD_INT 3
4469: DOUBLE
4470: EQUAL
4471: IFTRUE 4475
4473: GO 4497
4475: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
4476: LD_VAR 0 1
4480: PPUSH
4481: LD_VAR 0 6
4485: PPUSH
4486: LD_VAR 0 7
4490: PPUSH
4491: CALL_OW 154
4495: GO 4498
4497: POP
// end ;
4498: LD_VAR 0 2
4502: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
4503: LD_INT 0
4505: PPUSH
4506: PPUSH
4507: PPUSH
4508: PPUSH
4509: PPUSH
4510: PPUSH
// if not unit or not building then
4511: LD_VAR 0 1
4515: NOT
4516: IFTRUE 4525
4518: PUSH
4519: LD_VAR 0 2
4523: NOT
4524: OR
4525: IFFALSE 4529
// exit ;
4527: GO 4687
// x := GetX ( building ) ;
4529: LD_ADDR_VAR 0 5
4533: PUSH
4534: LD_VAR 0 2
4538: PPUSH
4539: CALL_OW 250
4543: ST_TO_ADDR
// y := GetY ( building ) ;
4544: LD_ADDR_VAR 0 6
4548: PUSH
4549: LD_VAR 0 2
4553: PPUSH
4554: CALL_OW 251
4558: ST_TO_ADDR
// for i := 0 to 5 do
4559: LD_ADDR_VAR 0 4
4563: PUSH
4564: DOUBLE
4565: LD_INT 0
4567: DEC
4568: ST_TO_ADDR
4569: LD_INT 5
4571: PUSH
4572: FOR_TO
4573: IFFALSE 4685
// begin _x := ShiftX ( x , i , 3 ) ;
4575: LD_ADDR_VAR 0 7
4579: PUSH
4580: LD_VAR 0 5
4584: PPUSH
4585: LD_VAR 0 4
4589: PPUSH
4590: LD_INT 3
4592: PPUSH
4593: CALL_OW 272
4597: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
4598: LD_ADDR_VAR 0 8
4602: PUSH
4603: LD_VAR 0 6
4607: PPUSH
4608: LD_VAR 0 4
4612: PPUSH
4613: LD_INT 3
4615: PPUSH
4616: CALL_OW 273
4620: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4621: LD_VAR 0 7
4625: PPUSH
4626: LD_VAR 0 8
4630: PPUSH
4631: CALL_OW 488
4635: NOT
4636: IFFALSE 4640
// continue ;
4638: GO 4572
// if HexInfo ( _x , _y ) = 0 then
4640: LD_VAR 0 7
4644: PPUSH
4645: LD_VAR 0 8
4649: PPUSH
4650: CALL_OW 428
4654: PUSH
4655: LD_INT 0
4657: EQUAL
4658: IFFALSE 4683
// begin ComMoveXY ( unit , _x , _y ) ;
4660: LD_VAR 0 1
4664: PPUSH
4665: LD_VAR 0 7
4669: PPUSH
4670: LD_VAR 0 8
4674: PPUSH
4675: CALL_OW 111
// exit ;
4679: POP
4680: POP
4681: GO 4687
// end ; end ;
4683: GO 4572
4685: POP
4686: POP
// end ;
4687: LD_VAR 0 3
4691: RET
// export function ScanBase ( side , base_area ) ; begin
4692: LD_INT 0
4694: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
4695: LD_ADDR_VAR 0 3
4699: PUSH
4700: LD_VAR 0 2
4704: PPUSH
4705: LD_INT 81
4707: PUSH
4708: LD_VAR 0 1
4712: PUSH
4713: EMPTY
4714: LIST
4715: LIST
4716: PPUSH
4717: CALL_OW 70
4721: ST_TO_ADDR
// end ;
4722: LD_VAR 0 3
4726: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
4727: LD_INT 0
4729: PPUSH
4730: PPUSH
4731: PPUSH
4732: PPUSH
// result := false ;
4733: LD_ADDR_VAR 0 2
4737: PUSH
4738: LD_INT 0
4740: ST_TO_ADDR
// side := GetSide ( unit ) ;
4741: LD_ADDR_VAR 0 3
4745: PUSH
4746: LD_VAR 0 1
4750: PPUSH
4751: CALL_OW 255
4755: ST_TO_ADDR
// nat := GetNation ( unit ) ;
4756: LD_ADDR_VAR 0 4
4760: PUSH
4761: LD_VAR 0 1
4765: PPUSH
4766: CALL_OW 248
4770: ST_TO_ADDR
// case nat of 1 :
4771: LD_VAR 0 4
4775: PUSH
4776: LD_INT 1
4778: DOUBLE
4779: EQUAL
4780: IFTRUE 4784
4782: GO 4795
4784: POP
// tech := tech_lassight ; 2 :
4785: LD_ADDR_VAR 0 5
4789: PUSH
4790: LD_INT 12
4792: ST_TO_ADDR
4793: GO 4834
4795: LD_INT 2
4797: DOUBLE
4798: EQUAL
4799: IFTRUE 4803
4801: GO 4814
4803: POP
// tech := tech_mortar ; 3 :
4804: LD_ADDR_VAR 0 5
4808: PUSH
4809: LD_INT 41
4811: ST_TO_ADDR
4812: GO 4834
4814: LD_INT 3
4816: DOUBLE
4817: EQUAL
4818: IFTRUE 4822
4820: GO 4833
4822: POP
// tech := tech_bazooka ; end ;
4823: LD_ADDR_VAR 0 5
4827: PUSH
4828: LD_INT 44
4830: ST_TO_ADDR
4831: GO 4834
4833: POP
// if Researched ( side , tech ) then
4834: LD_VAR 0 3
4838: PPUSH
4839: LD_VAR 0 5
4843: PPUSH
4844: CALL_OW 325
4848: IFFALSE 4875
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
4850: LD_ADDR_VAR 0 2
4854: PUSH
4855: LD_INT 5
4857: PUSH
4858: LD_INT 8
4860: PUSH
4861: LD_INT 9
4863: PUSH
4864: EMPTY
4865: LIST
4866: LIST
4867: LIST
4868: PUSH
4869: LD_VAR 0 4
4873: ARRAY
4874: ST_TO_ADDR
// end ;
4875: LD_VAR 0 2
4879: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
4880: LD_INT 0
4882: PPUSH
4883: PPUSH
4884: PPUSH
// if not mines then
4885: LD_VAR 0 2
4889: NOT
4890: IFFALSE 4894
// exit ;
4892: GO 5038
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4894: LD_ADDR_VAR 0 5
4898: PUSH
4899: LD_INT 81
4901: PUSH
4902: LD_VAR 0 1
4906: PUSH
4907: EMPTY
4908: LIST
4909: LIST
4910: PUSH
4911: LD_INT 3
4913: PUSH
4914: LD_INT 21
4916: PUSH
4917: LD_INT 3
4919: PUSH
4920: EMPTY
4921: LIST
4922: LIST
4923: PUSH
4924: EMPTY
4925: LIST
4926: LIST
4927: PUSH
4928: EMPTY
4929: LIST
4930: LIST
4931: PPUSH
4932: CALL_OW 69
4936: ST_TO_ADDR
// for i in mines do
4937: LD_ADDR_VAR 0 4
4941: PUSH
4942: LD_VAR 0 2
4946: PUSH
4947: FOR_IN
4948: IFFALSE 5036
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
4950: LD_VAR 0 4
4954: PUSH
4955: LD_INT 1
4957: ARRAY
4958: PPUSH
4959: LD_VAR 0 4
4963: PUSH
4964: LD_INT 2
4966: ARRAY
4967: PPUSH
4968: CALL_OW 458
4972: NOT
4973: IFFALSE 4977
// continue ;
4975: GO 4947
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
4977: LD_VAR 0 4
4981: PUSH
4982: LD_INT 1
4984: ARRAY
4985: PPUSH
4986: LD_VAR 0 4
4990: PUSH
4991: LD_INT 2
4993: ARRAY
4994: PPUSH
4995: CALL_OW 428
4999: PUSH
5000: LD_VAR 0 5
5004: IN
5005: IFFALSE 5034
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
5007: LD_VAR 0 4
5011: PUSH
5012: LD_INT 1
5014: ARRAY
5015: PPUSH
5016: LD_VAR 0 4
5020: PUSH
5021: LD_INT 2
5023: ARRAY
5024: PPUSH
5025: LD_VAR 0 1
5029: PPUSH
5030: CALL_OW 456
// end ;
5034: GO 4947
5036: POP
5037: POP
// end ;
5038: LD_VAR 0 3
5042: RET
// export function Count ( array ) ; begin
5043: LD_INT 0
5045: PPUSH
// result := array + 0 ;
5046: LD_ADDR_VAR 0 2
5050: PUSH
5051: LD_VAR 0 1
5055: PUSH
5056: LD_INT 0
5058: PLUS
5059: ST_TO_ADDR
// end ;
5060: LD_VAR 0 2
5064: RET
// export function IsEmpty ( building ) ; begin
5065: LD_INT 0
5067: PPUSH
// if not building then
5068: LD_VAR 0 1
5072: NOT
5073: IFFALSE 5077
// exit ;
5075: GO 5120
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
5077: LD_ADDR_VAR 0 2
5081: PUSH
5082: LD_VAR 0 1
5086: PUSH
5087: LD_INT 22
5089: PUSH
5090: LD_VAR 0 1
5094: PPUSH
5095: CALL_OW 255
5099: PUSH
5100: EMPTY
5101: LIST
5102: LIST
5103: PUSH
5104: LD_INT 58
5106: PUSH
5107: EMPTY
5108: LIST
5109: PUSH
5110: EMPTY
5111: LIST
5112: LIST
5113: PPUSH
5114: CALL_OW 69
5118: IN
5119: ST_TO_ADDR
// end ;
5120: LD_VAR 0 2
5124: RET
// export function IsNotFull ( building ) ; var places ; begin
5125: LD_INT 0
5127: PPUSH
5128: PPUSH
// if not building then
5129: LD_VAR 0 1
5133: NOT
5134: IFFALSE 5138
// exit ;
5136: GO 5166
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
5138: LD_ADDR_VAR 0 2
5142: PUSH
5143: LD_VAR 0 1
5147: PPUSH
5148: LD_INT 3
5150: PUSH
5151: LD_INT 62
5153: PUSH
5154: EMPTY
5155: LIST
5156: PUSH
5157: EMPTY
5158: LIST
5159: LIST
5160: PPUSH
5161: CALL_OW 72
5165: ST_TO_ADDR
// end ;
5166: LD_VAR 0 2
5170: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
5171: LD_INT 0
5173: PPUSH
5174: PPUSH
5175: PPUSH
5176: PPUSH
// tmp := [ ] ;
5177: LD_ADDR_VAR 0 3
5181: PUSH
5182: EMPTY
5183: ST_TO_ADDR
// list := [ ] ;
5184: LD_ADDR_VAR 0 5
5188: PUSH
5189: EMPTY
5190: ST_TO_ADDR
// for i = 16 to 25 do
5191: LD_ADDR_VAR 0 4
5195: PUSH
5196: DOUBLE
5197: LD_INT 16
5199: DEC
5200: ST_TO_ADDR
5201: LD_INT 25
5203: PUSH
5204: FOR_TO
5205: IFFALSE 5278
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
5207: LD_ADDR_VAR 0 3
5211: PUSH
5212: LD_VAR 0 3
5216: PUSH
5217: LD_INT 22
5219: PUSH
5220: LD_VAR 0 1
5224: PPUSH
5225: CALL_OW 255
5229: PUSH
5230: EMPTY
5231: LIST
5232: LIST
5233: PUSH
5234: LD_INT 91
5236: PUSH
5237: LD_VAR 0 1
5241: PUSH
5242: LD_INT 6
5244: PUSH
5245: EMPTY
5246: LIST
5247: LIST
5248: LIST
5249: PUSH
5250: LD_INT 30
5252: PUSH
5253: LD_VAR 0 4
5257: PUSH
5258: EMPTY
5259: LIST
5260: LIST
5261: PUSH
5262: EMPTY
5263: LIST
5264: LIST
5265: LIST
5266: PUSH
5267: EMPTY
5268: LIST
5269: PPUSH
5270: CALL_OW 69
5274: ADD
5275: ST_TO_ADDR
5276: GO 5204
5278: POP
5279: POP
// for i = 1 to tmp do
5280: LD_ADDR_VAR 0 4
5284: PUSH
5285: DOUBLE
5286: LD_INT 1
5288: DEC
5289: ST_TO_ADDR
5290: LD_VAR 0 3
5294: PUSH
5295: FOR_TO
5296: IFFALSE 5384
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
5298: LD_ADDR_VAR 0 5
5302: PUSH
5303: LD_VAR 0 5
5307: PUSH
5308: LD_VAR 0 3
5312: PUSH
5313: LD_VAR 0 4
5317: ARRAY
5318: PPUSH
5319: CALL_OW 266
5323: PUSH
5324: LD_VAR 0 3
5328: PUSH
5329: LD_VAR 0 4
5333: ARRAY
5334: PPUSH
5335: CALL_OW 250
5339: PUSH
5340: LD_VAR 0 3
5344: PUSH
5345: LD_VAR 0 4
5349: ARRAY
5350: PPUSH
5351: CALL_OW 251
5355: PUSH
5356: LD_VAR 0 3
5360: PUSH
5361: LD_VAR 0 4
5365: ARRAY
5366: PPUSH
5367: CALL_OW 254
5371: PUSH
5372: EMPTY
5373: LIST
5374: LIST
5375: LIST
5376: LIST
5377: PUSH
5378: EMPTY
5379: LIST
5380: ADD
5381: ST_TO_ADDR
5382: GO 5295
5384: POP
5385: POP
// result := list ;
5386: LD_ADDR_VAR 0 2
5390: PUSH
5391: LD_VAR 0 5
5395: ST_TO_ADDR
// end ;
5396: LD_VAR 0 2
5400: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
5401: LD_INT 0
5403: PPUSH
5404: PPUSH
5405: PPUSH
5406: PPUSH
5407: PPUSH
5408: PPUSH
5409: PPUSH
// if not factory then
5410: LD_VAR 0 1
5414: NOT
5415: IFFALSE 5419
// exit ;
5417: GO 6022
// if control = control_apeman then
5419: LD_VAR 0 4
5423: PUSH
5424: LD_INT 5
5426: EQUAL
5427: IFFALSE 5536
// begin tmp := UnitsInside ( factory ) ;
5429: LD_ADDR_VAR 0 8
5433: PUSH
5434: LD_VAR 0 1
5438: PPUSH
5439: CALL_OW 313
5443: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
5444: LD_VAR 0 8
5448: PPUSH
5449: LD_INT 25
5451: PUSH
5452: LD_INT 12
5454: PUSH
5455: EMPTY
5456: LIST
5457: LIST
5458: PPUSH
5459: CALL_OW 72
5463: NOT
5464: IFFALSE 5474
// control := control_manual ;
5466: LD_ADDR_VAR 0 4
5470: PUSH
5471: LD_INT 1
5473: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
5474: LD_ADDR_VAR 0 8
5478: PUSH
5479: LD_VAR 0 1
5483: PPUSH
5484: CALL 5171 0 1
5488: ST_TO_ADDR
// if tmp then
5489: LD_VAR 0 8
5493: IFFALSE 5536
// begin for i in tmp do
5495: LD_ADDR_VAR 0 7
5499: PUSH
5500: LD_VAR 0 8
5504: PUSH
5505: FOR_IN
5506: IFFALSE 5534
// if i [ 1 ] = b_ext_radio then
5508: LD_VAR 0 7
5512: PUSH
5513: LD_INT 1
5515: ARRAY
5516: PUSH
5517: LD_INT 22
5519: EQUAL
5520: IFFALSE 5532
// begin control := control_remote ;
5522: LD_ADDR_VAR 0 4
5526: PUSH
5527: LD_INT 2
5529: ST_TO_ADDR
// break ;
5530: GO 5534
// end ;
5532: GO 5505
5534: POP
5535: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5536: LD_VAR 0 1
5540: PPUSH
5541: LD_VAR 0 2
5545: PPUSH
5546: LD_VAR 0 3
5550: PPUSH
5551: LD_VAR 0 4
5555: PPUSH
5556: LD_VAR 0 5
5560: PPUSH
5561: CALL_OW 448
5565: IFFALSE 5600
// begin result := [ chassis , engine , control , weapon ] ;
5567: LD_ADDR_VAR 0 6
5571: PUSH
5572: LD_VAR 0 2
5576: PUSH
5577: LD_VAR 0 3
5581: PUSH
5582: LD_VAR 0 4
5586: PUSH
5587: LD_VAR 0 5
5591: PUSH
5592: EMPTY
5593: LIST
5594: LIST
5595: LIST
5596: LIST
5597: ST_TO_ADDR
// exit ;
5598: GO 6022
// end ; _chassis := AvailableChassisList ( factory ) ;
5600: LD_ADDR_VAR 0 9
5604: PUSH
5605: LD_VAR 0 1
5609: PPUSH
5610: CALL_OW 475
5614: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
5615: LD_ADDR_VAR 0 11
5619: PUSH
5620: LD_VAR 0 1
5624: PPUSH
5625: CALL_OW 476
5629: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
5630: LD_ADDR_VAR 0 12
5634: PUSH
5635: LD_VAR 0 1
5639: PPUSH
5640: CALL_OW 477
5644: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
5645: LD_ADDR_VAR 0 10
5649: PUSH
5650: LD_VAR 0 1
5654: PPUSH
5655: CALL_OW 478
5659: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
5660: LD_VAR 0 9
5664: NOT
5665: IFTRUE 5674
5667: PUSH
5668: LD_VAR 0 11
5672: NOT
5673: OR
5674: IFTRUE 5683
5676: PUSH
5677: LD_VAR 0 12
5681: NOT
5682: OR
5683: IFTRUE 5692
5685: PUSH
5686: LD_VAR 0 10
5690: NOT
5691: OR
5692: IFFALSE 5727
// begin result := [ chassis , engine , control , weapon ] ;
5694: LD_ADDR_VAR 0 6
5698: PUSH
5699: LD_VAR 0 2
5703: PUSH
5704: LD_VAR 0 3
5708: PUSH
5709: LD_VAR 0 4
5713: PUSH
5714: LD_VAR 0 5
5718: PUSH
5719: EMPTY
5720: LIST
5721: LIST
5722: LIST
5723: LIST
5724: ST_TO_ADDR
// exit ;
5725: GO 6022
// end ; if not chassis in _chassis then
5727: LD_VAR 0 2
5731: PUSH
5732: LD_VAR 0 9
5736: IN
5737: NOT
5738: IFFALSE 5764
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
5740: LD_ADDR_VAR 0 2
5744: PUSH
5745: LD_VAR 0 9
5749: PUSH
5750: LD_INT 1
5752: PPUSH
5753: LD_VAR 0 9
5757: PPUSH
5758: CALL_OW 12
5762: ARRAY
5763: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
5764: LD_VAR 0 2
5768: PPUSH
5769: LD_VAR 0 3
5773: PPUSH
5774: CALL 6027 0 2
5778: NOT
5779: IFFALSE 5840
// repeat engine := _engine [ 1 ] ;
5781: LD_ADDR_VAR 0 3
5785: PUSH
5786: LD_VAR 0 11
5790: PUSH
5791: LD_INT 1
5793: ARRAY
5794: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
5795: LD_ADDR_VAR 0 11
5799: PUSH
5800: LD_VAR 0 11
5804: PPUSH
5805: LD_INT 1
5807: PPUSH
5808: CALL_OW 3
5812: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
5813: LD_VAR 0 2
5817: PPUSH
5818: LD_VAR 0 3
5822: PPUSH
5823: CALL 6027 0 2
5827: IFTRUE 5838
5829: PUSH
5830: LD_VAR 0 11
5834: PUSH
5835: EMPTY
5836: EQUAL
5837: OR
5838: IFFALSE 5781
// if not control in _control then
5840: LD_VAR 0 4
5844: PUSH
5845: LD_VAR 0 12
5849: IN
5850: NOT
5851: IFFALSE 5877
// control := _control [ rand ( 1 , _control ) ] ;
5853: LD_ADDR_VAR 0 4
5857: PUSH
5858: LD_VAR 0 12
5862: PUSH
5863: LD_INT 1
5865: PPUSH
5866: LD_VAR 0 12
5870: PPUSH
5871: CALL_OW 12
5875: ARRAY
5876: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
5877: LD_VAR 0 2
5881: PPUSH
5882: LD_VAR 0 5
5886: PPUSH
5887: CALL 6249 0 2
5891: NOT
5892: IFFALSE 5953
// repeat weapon := _weapon [ 1 ] ;
5894: LD_ADDR_VAR 0 5
5898: PUSH
5899: LD_VAR 0 10
5903: PUSH
5904: LD_INT 1
5906: ARRAY
5907: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
5908: LD_ADDR_VAR 0 10
5912: PUSH
5913: LD_VAR 0 10
5917: PPUSH
5918: LD_INT 1
5920: PPUSH
5921: CALL_OW 3
5925: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
5926: LD_VAR 0 2
5930: PPUSH
5931: LD_VAR 0 5
5935: PPUSH
5936: CALL 6249 0 2
5940: IFTRUE 5951
5942: PUSH
5943: LD_VAR 0 10
5947: PUSH
5948: EMPTY
5949: EQUAL
5950: OR
5951: IFFALSE 5894
// result := [ ] ;
5953: LD_ADDR_VAR 0 6
5957: PUSH
5958: EMPTY
5959: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5960: LD_VAR 0 1
5964: PPUSH
5965: LD_VAR 0 2
5969: PPUSH
5970: LD_VAR 0 3
5974: PPUSH
5975: LD_VAR 0 4
5979: PPUSH
5980: LD_VAR 0 5
5984: PPUSH
5985: CALL_OW 448
5989: IFFALSE 6022
// result := [ chassis , engine , control , weapon ] ;
5991: LD_ADDR_VAR 0 6
5995: PUSH
5996: LD_VAR 0 2
6000: PUSH
6001: LD_VAR 0 3
6005: PUSH
6006: LD_VAR 0 4
6010: PUSH
6011: LD_VAR 0 5
6015: PUSH
6016: EMPTY
6017: LIST
6018: LIST
6019: LIST
6020: LIST
6021: ST_TO_ADDR
// end ;
6022: LD_VAR 0 6
6026: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
6027: LD_INT 0
6029: PPUSH
// if not chassis or not engine then
6030: LD_VAR 0 1
6034: NOT
6035: IFTRUE 6044
6037: PUSH
6038: LD_VAR 0 2
6042: NOT
6043: OR
6044: IFFALSE 6048
// exit ;
6046: GO 6244
// case engine of engine_solar :
6048: LD_VAR 0 2
6052: PUSH
6053: LD_INT 2
6055: DOUBLE
6056: EQUAL
6057: IFTRUE 6061
6059: GO 6099
6061: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
6062: LD_ADDR_VAR 0 3
6066: PUSH
6067: LD_INT 11
6069: PUSH
6070: LD_INT 12
6072: PUSH
6073: LD_INT 13
6075: PUSH
6076: LD_INT 14
6078: PUSH
6079: LD_INT 1
6081: PUSH
6082: LD_INT 2
6084: PUSH
6085: LD_INT 3
6087: PUSH
6088: EMPTY
6089: LIST
6090: LIST
6091: LIST
6092: LIST
6093: LIST
6094: LIST
6095: LIST
6096: ST_TO_ADDR
6097: GO 6228
6099: LD_INT 1
6101: DOUBLE
6102: EQUAL
6103: IFTRUE 6107
6105: GO 6169
6107: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
6108: LD_ADDR_VAR 0 3
6112: PUSH
6113: LD_INT 11
6115: PUSH
6116: LD_INT 12
6118: PUSH
6119: LD_INT 13
6121: PUSH
6122: LD_INT 14
6124: PUSH
6125: LD_INT 1
6127: PUSH
6128: LD_INT 2
6130: PUSH
6131: LD_INT 3
6133: PUSH
6134: LD_INT 4
6136: PUSH
6137: LD_INT 5
6139: PUSH
6140: LD_INT 21
6142: PUSH
6143: LD_INT 23
6145: PUSH
6146: LD_INT 22
6148: PUSH
6149: LD_INT 24
6151: PUSH
6152: EMPTY
6153: LIST
6154: LIST
6155: LIST
6156: LIST
6157: LIST
6158: LIST
6159: LIST
6160: LIST
6161: LIST
6162: LIST
6163: LIST
6164: LIST
6165: LIST
6166: ST_TO_ADDR
6167: GO 6228
6169: LD_INT 3
6171: DOUBLE
6172: EQUAL
6173: IFTRUE 6177
6175: GO 6227
6177: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
6178: LD_ADDR_VAR 0 3
6182: PUSH
6183: LD_INT 13
6185: PUSH
6186: LD_INT 14
6188: PUSH
6189: LD_INT 2
6191: PUSH
6192: LD_INT 3
6194: PUSH
6195: LD_INT 4
6197: PUSH
6198: LD_INT 5
6200: PUSH
6201: LD_INT 21
6203: PUSH
6204: LD_INT 22
6206: PUSH
6207: LD_INT 23
6209: PUSH
6210: LD_INT 24
6212: PUSH
6213: EMPTY
6214: LIST
6215: LIST
6216: LIST
6217: LIST
6218: LIST
6219: LIST
6220: LIST
6221: LIST
6222: LIST
6223: LIST
6224: ST_TO_ADDR
6225: GO 6228
6227: POP
// result := ( chassis in result ) ;
6228: LD_ADDR_VAR 0 3
6232: PUSH
6233: LD_VAR 0 1
6237: PUSH
6238: LD_VAR 0 3
6242: IN
6243: ST_TO_ADDR
// end ;
6244: LD_VAR 0 3
6248: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
6249: LD_INT 0
6251: PPUSH
// if not chassis or not weapon then
6252: LD_VAR 0 1
6256: NOT
6257: IFTRUE 6266
6259: PUSH
6260: LD_VAR 0 2
6264: NOT
6265: OR
6266: IFFALSE 6270
// exit ;
6268: GO 7364
// case weapon of us_machine_gun :
6270: LD_VAR 0 2
6274: PUSH
6275: LD_INT 2
6277: DOUBLE
6278: EQUAL
6279: IFTRUE 6283
6281: GO 6313
6283: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
6284: LD_ADDR_VAR 0 3
6288: PUSH
6289: LD_INT 1
6291: PUSH
6292: LD_INT 2
6294: PUSH
6295: LD_INT 3
6297: PUSH
6298: LD_INT 4
6300: PUSH
6301: LD_INT 5
6303: PUSH
6304: EMPTY
6305: LIST
6306: LIST
6307: LIST
6308: LIST
6309: LIST
6310: ST_TO_ADDR
6311: GO 7348
6313: LD_INT 3
6315: DOUBLE
6316: EQUAL
6317: IFTRUE 6321
6319: GO 6351
6321: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
6322: LD_ADDR_VAR 0 3
6326: PUSH
6327: LD_INT 1
6329: PUSH
6330: LD_INT 2
6332: PUSH
6333: LD_INT 3
6335: PUSH
6336: LD_INT 4
6338: PUSH
6339: LD_INT 5
6341: PUSH
6342: EMPTY
6343: LIST
6344: LIST
6345: LIST
6346: LIST
6347: LIST
6348: ST_TO_ADDR
6349: GO 7348
6351: LD_INT 11
6353: DOUBLE
6354: EQUAL
6355: IFTRUE 6359
6357: GO 6389
6359: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
6360: LD_ADDR_VAR 0 3
6364: PUSH
6365: LD_INT 1
6367: PUSH
6368: LD_INT 2
6370: PUSH
6371: LD_INT 3
6373: PUSH
6374: LD_INT 4
6376: PUSH
6377: LD_INT 5
6379: PUSH
6380: EMPTY
6381: LIST
6382: LIST
6383: LIST
6384: LIST
6385: LIST
6386: ST_TO_ADDR
6387: GO 7348
6389: LD_INT 4
6391: DOUBLE
6392: EQUAL
6393: IFTRUE 6397
6395: GO 6423
6397: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
6398: LD_ADDR_VAR 0 3
6402: PUSH
6403: LD_INT 2
6405: PUSH
6406: LD_INT 3
6408: PUSH
6409: LD_INT 4
6411: PUSH
6412: LD_INT 5
6414: PUSH
6415: EMPTY
6416: LIST
6417: LIST
6418: LIST
6419: LIST
6420: ST_TO_ADDR
6421: GO 7348
6423: LD_INT 5
6425: DOUBLE
6426: EQUAL
6427: IFTRUE 6431
6429: GO 6457
6431: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
6432: LD_ADDR_VAR 0 3
6436: PUSH
6437: LD_INT 2
6439: PUSH
6440: LD_INT 3
6442: PUSH
6443: LD_INT 4
6445: PUSH
6446: LD_INT 5
6448: PUSH
6449: EMPTY
6450: LIST
6451: LIST
6452: LIST
6453: LIST
6454: ST_TO_ADDR
6455: GO 7348
6457: LD_INT 9
6459: DOUBLE
6460: EQUAL
6461: IFTRUE 6465
6463: GO 6491
6465: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
6466: LD_ADDR_VAR 0 3
6470: PUSH
6471: LD_INT 2
6473: PUSH
6474: LD_INT 3
6476: PUSH
6477: LD_INT 4
6479: PUSH
6480: LD_INT 5
6482: PUSH
6483: EMPTY
6484: LIST
6485: LIST
6486: LIST
6487: LIST
6488: ST_TO_ADDR
6489: GO 7348
6491: LD_INT 7
6493: DOUBLE
6494: EQUAL
6495: IFTRUE 6499
6497: GO 6525
6499: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
6500: LD_ADDR_VAR 0 3
6504: PUSH
6505: LD_INT 2
6507: PUSH
6508: LD_INT 3
6510: PUSH
6511: LD_INT 4
6513: PUSH
6514: LD_INT 5
6516: PUSH
6517: EMPTY
6518: LIST
6519: LIST
6520: LIST
6521: LIST
6522: ST_TO_ADDR
6523: GO 7348
6525: LD_INT 12
6527: DOUBLE
6528: EQUAL
6529: IFTRUE 6533
6531: GO 6559
6533: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
6534: LD_ADDR_VAR 0 3
6538: PUSH
6539: LD_INT 2
6541: PUSH
6542: LD_INT 3
6544: PUSH
6545: LD_INT 4
6547: PUSH
6548: LD_INT 5
6550: PUSH
6551: EMPTY
6552: LIST
6553: LIST
6554: LIST
6555: LIST
6556: ST_TO_ADDR
6557: GO 7348
6559: LD_INT 13
6561: DOUBLE
6562: EQUAL
6563: IFTRUE 6567
6565: GO 6593
6567: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
6568: LD_ADDR_VAR 0 3
6572: PUSH
6573: LD_INT 2
6575: PUSH
6576: LD_INT 3
6578: PUSH
6579: LD_INT 4
6581: PUSH
6582: LD_INT 5
6584: PUSH
6585: EMPTY
6586: LIST
6587: LIST
6588: LIST
6589: LIST
6590: ST_TO_ADDR
6591: GO 7348
6593: LD_INT 14
6595: DOUBLE
6596: EQUAL
6597: IFTRUE 6601
6599: GO 6619
6601: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
6602: LD_ADDR_VAR 0 3
6606: PUSH
6607: LD_INT 4
6609: PUSH
6610: LD_INT 5
6612: PUSH
6613: EMPTY
6614: LIST
6615: LIST
6616: ST_TO_ADDR
6617: GO 7348
6619: LD_INT 6
6621: DOUBLE
6622: EQUAL
6623: IFTRUE 6627
6625: GO 6645
6627: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
6628: LD_ADDR_VAR 0 3
6632: PUSH
6633: LD_INT 4
6635: PUSH
6636: LD_INT 5
6638: PUSH
6639: EMPTY
6640: LIST
6641: LIST
6642: ST_TO_ADDR
6643: GO 7348
6645: LD_INT 10
6647: DOUBLE
6648: EQUAL
6649: IFTRUE 6653
6651: GO 6671
6653: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
6654: LD_ADDR_VAR 0 3
6658: PUSH
6659: LD_INT 4
6661: PUSH
6662: LD_INT 5
6664: PUSH
6665: EMPTY
6666: LIST
6667: LIST
6668: ST_TO_ADDR
6669: GO 7348
6671: LD_INT 22
6673: DOUBLE
6674: EQUAL
6675: IFTRUE 6679
6677: GO 6705
6679: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
6680: LD_ADDR_VAR 0 3
6684: PUSH
6685: LD_INT 11
6687: PUSH
6688: LD_INT 12
6690: PUSH
6691: LD_INT 13
6693: PUSH
6694: LD_INT 14
6696: PUSH
6697: EMPTY
6698: LIST
6699: LIST
6700: LIST
6701: LIST
6702: ST_TO_ADDR
6703: GO 7348
6705: LD_INT 23
6707: DOUBLE
6708: EQUAL
6709: IFTRUE 6713
6711: GO 6739
6713: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
6714: LD_ADDR_VAR 0 3
6718: PUSH
6719: LD_INT 11
6721: PUSH
6722: LD_INT 12
6724: PUSH
6725: LD_INT 13
6727: PUSH
6728: LD_INT 14
6730: PUSH
6731: EMPTY
6732: LIST
6733: LIST
6734: LIST
6735: LIST
6736: ST_TO_ADDR
6737: GO 7348
6739: LD_INT 24
6741: DOUBLE
6742: EQUAL
6743: IFTRUE 6747
6745: GO 6773
6747: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
6748: LD_ADDR_VAR 0 3
6752: PUSH
6753: LD_INT 11
6755: PUSH
6756: LD_INT 12
6758: PUSH
6759: LD_INT 13
6761: PUSH
6762: LD_INT 14
6764: PUSH
6765: EMPTY
6766: LIST
6767: LIST
6768: LIST
6769: LIST
6770: ST_TO_ADDR
6771: GO 7348
6773: LD_INT 30
6775: DOUBLE
6776: EQUAL
6777: IFTRUE 6781
6779: GO 6807
6781: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
6782: LD_ADDR_VAR 0 3
6786: PUSH
6787: LD_INT 11
6789: PUSH
6790: LD_INT 12
6792: PUSH
6793: LD_INT 13
6795: PUSH
6796: LD_INT 14
6798: PUSH
6799: EMPTY
6800: LIST
6801: LIST
6802: LIST
6803: LIST
6804: ST_TO_ADDR
6805: GO 7348
6807: LD_INT 25
6809: DOUBLE
6810: EQUAL
6811: IFTRUE 6815
6813: GO 6833
6815: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
6816: LD_ADDR_VAR 0 3
6820: PUSH
6821: LD_INT 13
6823: PUSH
6824: LD_INT 14
6826: PUSH
6827: EMPTY
6828: LIST
6829: LIST
6830: ST_TO_ADDR
6831: GO 7348
6833: LD_INT 27
6835: DOUBLE
6836: EQUAL
6837: IFTRUE 6841
6839: GO 6859
6841: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
6842: LD_ADDR_VAR 0 3
6846: PUSH
6847: LD_INT 13
6849: PUSH
6850: LD_INT 14
6852: PUSH
6853: EMPTY
6854: LIST
6855: LIST
6856: ST_TO_ADDR
6857: GO 7348
6859: LD_INT 92
6861: DOUBLE
6862: EQUAL
6863: IFTRUE 6867
6865: GO 6893
6867: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
6868: LD_ADDR_VAR 0 3
6872: PUSH
6873: LD_INT 11
6875: PUSH
6876: LD_INT 12
6878: PUSH
6879: LD_INT 13
6881: PUSH
6882: LD_INT 14
6884: PUSH
6885: EMPTY
6886: LIST
6887: LIST
6888: LIST
6889: LIST
6890: ST_TO_ADDR
6891: GO 7348
6893: LD_INT 28
6895: DOUBLE
6896: EQUAL
6897: IFTRUE 6901
6899: GO 6919
6901: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
6902: LD_ADDR_VAR 0 3
6906: PUSH
6907: LD_INT 13
6909: PUSH
6910: LD_INT 14
6912: PUSH
6913: EMPTY
6914: LIST
6915: LIST
6916: ST_TO_ADDR
6917: GO 7348
6919: LD_INT 29
6921: DOUBLE
6922: EQUAL
6923: IFTRUE 6927
6925: GO 6945
6927: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
6928: LD_ADDR_VAR 0 3
6932: PUSH
6933: LD_INT 13
6935: PUSH
6936: LD_INT 14
6938: PUSH
6939: EMPTY
6940: LIST
6941: LIST
6942: ST_TO_ADDR
6943: GO 7348
6945: LD_INT 31
6947: DOUBLE
6948: EQUAL
6949: IFTRUE 6953
6951: GO 6971
6953: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
6954: LD_ADDR_VAR 0 3
6958: PUSH
6959: LD_INT 13
6961: PUSH
6962: LD_INT 14
6964: PUSH
6965: EMPTY
6966: LIST
6967: LIST
6968: ST_TO_ADDR
6969: GO 7348
6971: LD_INT 26
6973: DOUBLE
6974: EQUAL
6975: IFTRUE 6979
6977: GO 6997
6979: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
6980: LD_ADDR_VAR 0 3
6984: PUSH
6985: LD_INT 13
6987: PUSH
6988: LD_INT 14
6990: PUSH
6991: EMPTY
6992: LIST
6993: LIST
6994: ST_TO_ADDR
6995: GO 7348
6997: LD_INT 42
6999: DOUBLE
7000: EQUAL
7001: IFTRUE 7005
7003: GO 7031
7005: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
7006: LD_ADDR_VAR 0 3
7010: PUSH
7011: LD_INT 21
7013: PUSH
7014: LD_INT 22
7016: PUSH
7017: LD_INT 23
7019: PUSH
7020: LD_INT 24
7022: PUSH
7023: EMPTY
7024: LIST
7025: LIST
7026: LIST
7027: LIST
7028: ST_TO_ADDR
7029: GO 7348
7031: LD_INT 43
7033: DOUBLE
7034: EQUAL
7035: IFTRUE 7039
7037: GO 7065
7039: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
7040: LD_ADDR_VAR 0 3
7044: PUSH
7045: LD_INT 21
7047: PUSH
7048: LD_INT 22
7050: PUSH
7051: LD_INT 23
7053: PUSH
7054: LD_INT 24
7056: PUSH
7057: EMPTY
7058: LIST
7059: LIST
7060: LIST
7061: LIST
7062: ST_TO_ADDR
7063: GO 7348
7065: LD_INT 44
7067: DOUBLE
7068: EQUAL
7069: IFTRUE 7073
7071: GO 7099
7073: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
7074: LD_ADDR_VAR 0 3
7078: PUSH
7079: LD_INT 21
7081: PUSH
7082: LD_INT 22
7084: PUSH
7085: LD_INT 23
7087: PUSH
7088: LD_INT 24
7090: PUSH
7091: EMPTY
7092: LIST
7093: LIST
7094: LIST
7095: LIST
7096: ST_TO_ADDR
7097: GO 7348
7099: LD_INT 45
7101: DOUBLE
7102: EQUAL
7103: IFTRUE 7107
7105: GO 7133
7107: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
7108: LD_ADDR_VAR 0 3
7112: PUSH
7113: LD_INT 21
7115: PUSH
7116: LD_INT 22
7118: PUSH
7119: LD_INT 23
7121: PUSH
7122: LD_INT 24
7124: PUSH
7125: EMPTY
7126: LIST
7127: LIST
7128: LIST
7129: LIST
7130: ST_TO_ADDR
7131: GO 7348
7133: LD_INT 49
7135: DOUBLE
7136: EQUAL
7137: IFTRUE 7141
7139: GO 7167
7141: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
7142: LD_ADDR_VAR 0 3
7146: PUSH
7147: LD_INT 21
7149: PUSH
7150: LD_INT 22
7152: PUSH
7153: LD_INT 23
7155: PUSH
7156: LD_INT 24
7158: PUSH
7159: EMPTY
7160: LIST
7161: LIST
7162: LIST
7163: LIST
7164: ST_TO_ADDR
7165: GO 7348
7167: LD_INT 51
7169: DOUBLE
7170: EQUAL
7171: IFTRUE 7175
7173: GO 7201
7175: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
7176: LD_ADDR_VAR 0 3
7180: PUSH
7181: LD_INT 21
7183: PUSH
7184: LD_INT 22
7186: PUSH
7187: LD_INT 23
7189: PUSH
7190: LD_INT 24
7192: PUSH
7193: EMPTY
7194: LIST
7195: LIST
7196: LIST
7197: LIST
7198: ST_TO_ADDR
7199: GO 7348
7201: LD_INT 52
7203: DOUBLE
7204: EQUAL
7205: IFTRUE 7209
7207: GO 7235
7209: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
7210: LD_ADDR_VAR 0 3
7214: PUSH
7215: LD_INT 21
7217: PUSH
7218: LD_INT 22
7220: PUSH
7221: LD_INT 23
7223: PUSH
7224: LD_INT 24
7226: PUSH
7227: EMPTY
7228: LIST
7229: LIST
7230: LIST
7231: LIST
7232: ST_TO_ADDR
7233: GO 7348
7235: LD_INT 53
7237: DOUBLE
7238: EQUAL
7239: IFTRUE 7243
7241: GO 7261
7243: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
7244: LD_ADDR_VAR 0 3
7248: PUSH
7249: LD_INT 23
7251: PUSH
7252: LD_INT 24
7254: PUSH
7255: EMPTY
7256: LIST
7257: LIST
7258: ST_TO_ADDR
7259: GO 7348
7261: LD_INT 46
7263: DOUBLE
7264: EQUAL
7265: IFTRUE 7269
7267: GO 7287
7269: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
7270: LD_ADDR_VAR 0 3
7274: PUSH
7275: LD_INT 23
7277: PUSH
7278: LD_INT 24
7280: PUSH
7281: EMPTY
7282: LIST
7283: LIST
7284: ST_TO_ADDR
7285: GO 7348
7287: LD_INT 47
7289: DOUBLE
7290: EQUAL
7291: IFTRUE 7295
7293: GO 7313
7295: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
7296: LD_ADDR_VAR 0 3
7300: PUSH
7301: LD_INT 23
7303: PUSH
7304: LD_INT 24
7306: PUSH
7307: EMPTY
7308: LIST
7309: LIST
7310: ST_TO_ADDR
7311: GO 7348
7313: LD_INT 98
7315: DOUBLE
7316: EQUAL
7317: IFTRUE 7321
7319: GO 7347
7321: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
7322: LD_ADDR_VAR 0 3
7326: PUSH
7327: LD_INT 21
7329: PUSH
7330: LD_INT 22
7332: PUSH
7333: LD_INT 23
7335: PUSH
7336: LD_INT 24
7338: PUSH
7339: EMPTY
7340: LIST
7341: LIST
7342: LIST
7343: LIST
7344: ST_TO_ADDR
7345: GO 7348
7347: POP
// result := ( chassis in result ) ;
7348: LD_ADDR_VAR 0 3
7352: PUSH
7353: LD_VAR 0 1
7357: PUSH
7358: LD_VAR 0 3
7362: IN
7363: ST_TO_ADDR
// end ;
7364: LD_VAR 0 3
7368: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
7369: LD_INT 0
7371: PPUSH
7372: PPUSH
7373: PPUSH
7374: PPUSH
7375: PPUSH
7376: PPUSH
7377: PPUSH
// result := array ;
7378: LD_ADDR_VAR 0 5
7382: PUSH
7383: LD_VAR 0 1
7387: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
7388: LD_VAR 0 1
7392: NOT
7393: IFTRUE 7402
7395: PUSH
7396: LD_VAR 0 2
7400: NOT
7401: OR
7402: IFTRUE 7411
7404: PUSH
7405: LD_VAR 0 3
7409: NOT
7410: OR
7411: IFTRUE 7425
7413: PUSH
7414: LD_VAR 0 2
7418: PUSH
7419: LD_VAR 0 1
7423: GREATER
7424: OR
7425: IFTRUE 7439
7427: PUSH
7428: LD_VAR 0 3
7432: PUSH
7433: LD_VAR 0 1
7437: GREATER
7438: OR
7439: IFFALSE 7443
// exit ;
7441: GO 7739
// if direction then
7443: LD_VAR 0 4
7447: IFFALSE 7511
// begin d := 1 ;
7449: LD_ADDR_VAR 0 9
7453: PUSH
7454: LD_INT 1
7456: ST_TO_ADDR
// if i_from > i_to then
7457: LD_VAR 0 2
7461: PUSH
7462: LD_VAR 0 3
7466: GREATER
7467: IFFALSE 7493
// length := ( array - i_from ) + i_to else
7469: LD_ADDR_VAR 0 11
7473: PUSH
7474: LD_VAR 0 1
7478: PUSH
7479: LD_VAR 0 2
7483: MINUS
7484: PUSH
7485: LD_VAR 0 3
7489: PLUS
7490: ST_TO_ADDR
7491: GO 7509
// length := i_to - i_from ;
7493: LD_ADDR_VAR 0 11
7497: PUSH
7498: LD_VAR 0 3
7502: PUSH
7503: LD_VAR 0 2
7507: MINUS
7508: ST_TO_ADDR
// end else
7509: GO 7572
// begin d := - 1 ;
7511: LD_ADDR_VAR 0 9
7515: PUSH
7516: LD_INT 1
7518: NEG
7519: ST_TO_ADDR
// if i_from > i_to then
7520: LD_VAR 0 2
7524: PUSH
7525: LD_VAR 0 3
7529: GREATER
7530: IFFALSE 7550
// length := i_from - i_to else
7532: LD_ADDR_VAR 0 11
7536: PUSH
7537: LD_VAR 0 2
7541: PUSH
7542: LD_VAR 0 3
7546: MINUS
7547: ST_TO_ADDR
7548: GO 7572
// length := ( array - i_to ) + i_from ;
7550: LD_ADDR_VAR 0 11
7554: PUSH
7555: LD_VAR 0 1
7559: PUSH
7560: LD_VAR 0 3
7564: MINUS
7565: PUSH
7566: LD_VAR 0 2
7570: PLUS
7571: ST_TO_ADDR
// end ; if not length then
7572: LD_VAR 0 11
7576: NOT
7577: IFFALSE 7581
// exit ;
7579: GO 7739
// tmp := array ;
7581: LD_ADDR_VAR 0 10
7585: PUSH
7586: LD_VAR 0 1
7590: ST_TO_ADDR
// for i = 1 to length do
7591: LD_ADDR_VAR 0 6
7595: PUSH
7596: DOUBLE
7597: LD_INT 1
7599: DEC
7600: ST_TO_ADDR
7601: LD_VAR 0 11
7605: PUSH
7606: FOR_TO
7607: IFFALSE 7727
// begin for j = 1 to array do
7609: LD_ADDR_VAR 0 7
7613: PUSH
7614: DOUBLE
7615: LD_INT 1
7617: DEC
7618: ST_TO_ADDR
7619: LD_VAR 0 1
7623: PUSH
7624: FOR_TO
7625: IFFALSE 7713
// begin k := j + d ;
7627: LD_ADDR_VAR 0 8
7631: PUSH
7632: LD_VAR 0 7
7636: PUSH
7637: LD_VAR 0 9
7641: PLUS
7642: ST_TO_ADDR
// if k > array then
7643: LD_VAR 0 8
7647: PUSH
7648: LD_VAR 0 1
7652: GREATER
7653: IFFALSE 7663
// k := 1 ;
7655: LD_ADDR_VAR 0 8
7659: PUSH
7660: LD_INT 1
7662: ST_TO_ADDR
// if not k then
7663: LD_VAR 0 8
7667: NOT
7668: IFFALSE 7680
// k := array ;
7670: LD_ADDR_VAR 0 8
7674: PUSH
7675: LD_VAR 0 1
7679: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
7680: LD_ADDR_VAR 0 10
7684: PUSH
7685: LD_VAR 0 10
7689: PPUSH
7690: LD_VAR 0 8
7694: PPUSH
7695: LD_VAR 0 1
7699: PUSH
7700: LD_VAR 0 7
7704: ARRAY
7705: PPUSH
7706: CALL_OW 1
7710: ST_TO_ADDR
// end ;
7711: GO 7624
7713: POP
7714: POP
// array := tmp ;
7715: LD_ADDR_VAR 0 1
7719: PUSH
7720: LD_VAR 0 10
7724: ST_TO_ADDR
// end ;
7725: GO 7606
7727: POP
7728: POP
// result := array ;
7729: LD_ADDR_VAR 0 5
7733: PUSH
7734: LD_VAR 0 1
7738: ST_TO_ADDR
// end ;
7739: LD_VAR 0 5
7743: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
7744: LD_INT 0
7746: PPUSH
7747: PPUSH
// result := 0 ;
7748: LD_ADDR_VAR 0 3
7752: PUSH
7753: LD_INT 0
7755: ST_TO_ADDR
// if not array or not value in array then
7756: LD_VAR 0 1
7760: NOT
7761: IFTRUE 7776
7763: PUSH
7764: LD_VAR 0 2
7768: PUSH
7769: LD_VAR 0 1
7773: IN
7774: NOT
7775: OR
7776: IFFALSE 7780
// exit ;
7778: GO 7834
// for i = 1 to array do
7780: LD_ADDR_VAR 0 4
7784: PUSH
7785: DOUBLE
7786: LD_INT 1
7788: DEC
7789: ST_TO_ADDR
7790: LD_VAR 0 1
7794: PUSH
7795: FOR_TO
7796: IFFALSE 7832
// if value = array [ i ] then
7798: LD_VAR 0 2
7802: PUSH
7803: LD_VAR 0 1
7807: PUSH
7808: LD_VAR 0 4
7812: ARRAY
7813: EQUAL
7814: IFFALSE 7830
// begin result := i ;
7816: LD_ADDR_VAR 0 3
7820: PUSH
7821: LD_VAR 0 4
7825: ST_TO_ADDR
// exit ;
7826: POP
7827: POP
7828: GO 7834
// end ;
7830: GO 7795
7832: POP
7833: POP
// end ;
7834: LD_VAR 0 3
7838: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
7839: LD_INT 0
7841: PPUSH
// vc_chassis := chassis ;
7842: LD_ADDR_OWVAR 37
7846: PUSH
7847: LD_VAR 0 1
7851: ST_TO_ADDR
// vc_engine := engine ;
7852: LD_ADDR_OWVAR 39
7856: PUSH
7857: LD_VAR 0 2
7861: ST_TO_ADDR
// vc_control := control ;
7862: LD_ADDR_OWVAR 38
7866: PUSH
7867: LD_VAR 0 3
7871: ST_TO_ADDR
// vc_weapon := weapon ;
7872: LD_ADDR_OWVAR 40
7876: PUSH
7877: LD_VAR 0 4
7881: ST_TO_ADDR
// vc_fuel_battery := fuel ;
7882: LD_ADDR_OWVAR 41
7886: PUSH
7887: LD_VAR 0 5
7891: ST_TO_ADDR
// end ;
7892: LD_VAR 0 6
7896: RET
// export function WantPlant ( unit ) ; var task ; begin
7897: LD_INT 0
7899: PPUSH
7900: PPUSH
// result := false ;
7901: LD_ADDR_VAR 0 2
7905: PUSH
7906: LD_INT 0
7908: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
7909: LD_ADDR_VAR 0 3
7913: PUSH
7914: LD_VAR 0 1
7918: PPUSH
7919: CALL_OW 437
7923: ST_TO_ADDR
// if task then
7924: LD_VAR 0 3
7928: IFFALSE 7956
// if task [ 1 ] [ 1 ] = p then
7930: LD_VAR 0 3
7934: PUSH
7935: LD_INT 1
7937: ARRAY
7938: PUSH
7939: LD_INT 1
7941: ARRAY
7942: PUSH
7943: LD_STRING p
7945: EQUAL
7946: IFFALSE 7956
// result := true ;
7948: LD_ADDR_VAR 0 2
7952: PUSH
7953: LD_INT 1
7955: ST_TO_ADDR
// end ;
7956: LD_VAR 0 2
7960: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
7961: LD_INT 0
7963: PPUSH
7964: PPUSH
7965: PPUSH
7966: PPUSH
// if pos < 1 then
7967: LD_VAR 0 2
7971: PUSH
7972: LD_INT 1
7974: LESS
7975: IFFALSE 7979
// exit ;
7977: GO 8282
// if pos = 1 then
7979: LD_VAR 0 2
7983: PUSH
7984: LD_INT 1
7986: EQUAL
7987: IFFALSE 8020
// result := Replace ( arr , pos [ 1 ] , value ) else
7989: LD_ADDR_VAR 0 4
7993: PUSH
7994: LD_VAR 0 1
7998: PPUSH
7999: LD_VAR 0 2
8003: PUSH
8004: LD_INT 1
8006: ARRAY
8007: PPUSH
8008: LD_VAR 0 3
8012: PPUSH
8013: CALL_OW 1
8017: ST_TO_ADDR
8018: GO 8282
// begin tmp := arr ;
8020: LD_ADDR_VAR 0 6
8024: PUSH
8025: LD_VAR 0 1
8029: ST_TO_ADDR
// s_arr := [ tmp ] ;
8030: LD_ADDR_VAR 0 7
8034: PUSH
8035: LD_VAR 0 6
8039: PUSH
8040: EMPTY
8041: LIST
8042: ST_TO_ADDR
// for i = 1 to pos - 1 do
8043: LD_ADDR_VAR 0 5
8047: PUSH
8048: DOUBLE
8049: LD_INT 1
8051: DEC
8052: ST_TO_ADDR
8053: LD_VAR 0 2
8057: PUSH
8058: LD_INT 1
8060: MINUS
8061: PUSH
8062: FOR_TO
8063: IFFALSE 8108
// begin tmp := tmp [ pos [ i ] ] ;
8065: LD_ADDR_VAR 0 6
8069: PUSH
8070: LD_VAR 0 6
8074: PUSH
8075: LD_VAR 0 2
8079: PUSH
8080: LD_VAR 0 5
8084: ARRAY
8085: ARRAY
8086: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
8087: LD_ADDR_VAR 0 7
8091: PUSH
8092: LD_VAR 0 7
8096: PUSH
8097: LD_VAR 0 6
8101: PUSH
8102: EMPTY
8103: LIST
8104: ADD
8105: ST_TO_ADDR
// end ;
8106: GO 8062
8108: POP
8109: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
8110: LD_ADDR_VAR 0 6
8114: PUSH
8115: LD_VAR 0 6
8119: PPUSH
8120: LD_VAR 0 2
8124: PUSH
8125: LD_VAR 0 2
8129: ARRAY
8130: PPUSH
8131: LD_VAR 0 3
8135: PPUSH
8136: CALL_OW 1
8140: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
8141: LD_ADDR_VAR 0 7
8145: PUSH
8146: LD_VAR 0 7
8150: PPUSH
8151: LD_VAR 0 7
8155: PPUSH
8156: LD_VAR 0 6
8160: PPUSH
8161: CALL_OW 1
8165: ST_TO_ADDR
// for i = s_arr downto 2 do
8166: LD_ADDR_VAR 0 5
8170: PUSH
8171: DOUBLE
8172: LD_VAR 0 7
8176: INC
8177: ST_TO_ADDR
8178: LD_INT 2
8180: PUSH
8181: FOR_DOWNTO
8182: IFFALSE 8266
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
8184: LD_ADDR_VAR 0 6
8188: PUSH
8189: LD_VAR 0 7
8193: PUSH
8194: LD_VAR 0 5
8198: PUSH
8199: LD_INT 1
8201: MINUS
8202: ARRAY
8203: PPUSH
8204: LD_VAR 0 2
8208: PUSH
8209: LD_VAR 0 5
8213: PUSH
8214: LD_INT 1
8216: MINUS
8217: ARRAY
8218: PPUSH
8219: LD_VAR 0 7
8223: PUSH
8224: LD_VAR 0 5
8228: ARRAY
8229: PPUSH
8230: CALL_OW 1
8234: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
8235: LD_ADDR_VAR 0 7
8239: PUSH
8240: LD_VAR 0 7
8244: PPUSH
8245: LD_VAR 0 5
8249: PUSH
8250: LD_INT 1
8252: MINUS
8253: PPUSH
8254: LD_VAR 0 6
8258: PPUSH
8259: CALL_OW 1
8263: ST_TO_ADDR
// end ;
8264: GO 8181
8266: POP
8267: POP
// result := s_arr [ 1 ] ;
8268: LD_ADDR_VAR 0 4
8272: PUSH
8273: LD_VAR 0 7
8277: PUSH
8278: LD_INT 1
8280: ARRAY
8281: ST_TO_ADDR
// end ; end ;
8282: LD_VAR 0 4
8286: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
8287: LD_INT 0
8289: PPUSH
8290: PPUSH
// if not list then
8291: LD_VAR 0 1
8295: NOT
8296: IFFALSE 8300
// exit ;
8298: GO 8391
// i := list [ pos1 ] ;
8300: LD_ADDR_VAR 0 5
8304: PUSH
8305: LD_VAR 0 1
8309: PUSH
8310: LD_VAR 0 2
8314: ARRAY
8315: ST_TO_ADDR
// if not i then
8316: LD_VAR 0 5
8320: NOT
8321: IFFALSE 8325
// exit ;
8323: GO 8391
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
8325: LD_ADDR_VAR 0 1
8329: PUSH
8330: LD_VAR 0 1
8334: PPUSH
8335: LD_VAR 0 2
8339: PPUSH
8340: LD_VAR 0 1
8344: PUSH
8345: LD_VAR 0 3
8349: ARRAY
8350: PPUSH
8351: CALL_OW 1
8355: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
8356: LD_ADDR_VAR 0 1
8360: PUSH
8361: LD_VAR 0 1
8365: PPUSH
8366: LD_VAR 0 3
8370: PPUSH
8371: LD_VAR 0 5
8375: PPUSH
8376: CALL_OW 1
8380: ST_TO_ADDR
// result := list ;
8381: LD_ADDR_VAR 0 4
8385: PUSH
8386: LD_VAR 0 1
8390: ST_TO_ADDR
// end ;
8391: LD_VAR 0 4
8395: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
8396: LD_INT 0
8398: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
8399: LD_ADDR_VAR 0 5
8403: PUSH
8404: LD_VAR 0 1
8408: PPUSH
8409: CALL_OW 250
8413: PPUSH
8414: LD_VAR 0 1
8418: PPUSH
8419: CALL_OW 251
8423: PPUSH
8424: LD_VAR 0 2
8428: PPUSH
8429: LD_VAR 0 3
8433: PPUSH
8434: LD_VAR 0 4
8438: PPUSH
8439: CALL 8821 0 5
8443: ST_TO_ADDR
// end ;
8444: LD_VAR 0 5
8448: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
8449: LD_INT 0
8451: PPUSH
8452: PPUSH
8453: PPUSH
8454: PPUSH
// if not list or not unit then
8455: LD_VAR 0 2
8459: NOT
8460: IFTRUE 8469
8462: PUSH
8463: LD_VAR 0 1
8467: NOT
8468: OR
8469: IFFALSE 8473
// exit ;
8471: GO 8816
// result := [ ] ;
8473: LD_ADDR_VAR 0 5
8477: PUSH
8478: EMPTY
8479: ST_TO_ADDR
// for i in list do
8480: LD_ADDR_VAR 0 6
8484: PUSH
8485: LD_VAR 0 2
8489: PUSH
8490: FOR_IN
8491: IFFALSE 8709
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
8493: LD_ADDR_VAR 0 8
8497: PUSH
8498: LD_VAR 0 1
8502: PPUSH
8503: LD_VAR 0 6
8507: PUSH
8508: LD_INT 1
8510: ARRAY
8511: PPUSH
8512: LD_VAR 0 6
8516: PUSH
8517: LD_INT 2
8519: ARRAY
8520: PPUSH
8521: CALL_OW 297
8525: ST_TO_ADDR
// if not Count ( result ) then
8526: LD_VAR 0 5
8530: PPUSH
8531: CALL 5043 0 1
8535: NOT
8536: IFFALSE 8569
// begin result := Join ( result , [ i , tmp ] ) ;
8538: LD_ADDR_VAR 0 5
8542: PUSH
8543: LD_VAR 0 5
8547: PPUSH
8548: LD_VAR 0 6
8552: PUSH
8553: LD_VAR 0 8
8557: PUSH
8558: EMPTY
8559: LIST
8560: LIST
8561: PPUSH
8562: CALL 41009 0 2
8566: ST_TO_ADDR
// continue ;
8567: GO 8490
// end ; if result [ result ] [ 2 ] <= tmp then
8569: LD_VAR 0 5
8573: PUSH
8574: LD_VAR 0 5
8578: ARRAY
8579: PUSH
8580: LD_INT 2
8582: ARRAY
8583: PUSH
8584: LD_VAR 0 8
8588: LESSEQUAL
8589: IFFALSE 8622
// result := Join ( result , [ i , tmp ] ) else
8591: LD_ADDR_VAR 0 5
8595: PUSH
8596: LD_VAR 0 5
8600: PPUSH
8601: LD_VAR 0 6
8605: PUSH
8606: LD_VAR 0 8
8610: PUSH
8611: EMPTY
8612: LIST
8613: LIST
8614: PPUSH
8615: CALL 41009 0 2
8619: ST_TO_ADDR
8620: GO 8707
// begin for j := 1 to Count ( result ) do
8622: LD_ADDR_VAR 0 7
8626: PUSH
8627: DOUBLE
8628: LD_INT 1
8630: DEC
8631: ST_TO_ADDR
8632: LD_VAR 0 5
8636: PPUSH
8637: CALL 5043 0 1
8641: PUSH
8642: FOR_TO
8643: IFFALSE 8705
// begin if tmp < result [ j ] [ 2 ] then
8645: LD_VAR 0 8
8649: PUSH
8650: LD_VAR 0 5
8654: PUSH
8655: LD_VAR 0 7
8659: ARRAY
8660: PUSH
8661: LD_INT 2
8663: ARRAY
8664: LESS
8665: IFFALSE 8703
// begin result := Insert ( result , j , [ i , tmp ] ) ;
8667: LD_ADDR_VAR 0 5
8671: PUSH
8672: LD_VAR 0 5
8676: PPUSH
8677: LD_VAR 0 7
8681: PPUSH
8682: LD_VAR 0 6
8686: PUSH
8687: LD_VAR 0 8
8691: PUSH
8692: EMPTY
8693: LIST
8694: LIST
8695: PPUSH
8696: CALL_OW 2
8700: ST_TO_ADDR
// break ;
8701: GO 8705
// end ; end ;
8703: GO 8642
8705: POP
8706: POP
// end ; end ;
8707: GO 8490
8709: POP
8710: POP
// if result and not asc then
8711: LD_VAR 0 5
8715: IFFALSE 8724
8717: PUSH
8718: LD_VAR 0 3
8722: NOT
8723: AND
8724: IFFALSE 8741
// result := ReverseArray ( result ) ;
8726: LD_ADDR_VAR 0 5
8730: PUSH
8731: LD_VAR 0 5
8735: PPUSH
8736: CALL 36099 0 1
8740: ST_TO_ADDR
// tmp := [ ] ;
8741: LD_ADDR_VAR 0 8
8745: PUSH
8746: EMPTY
8747: ST_TO_ADDR
// if mode then
8748: LD_VAR 0 4
8752: IFFALSE 8816
// begin for i := 1 to result do
8754: LD_ADDR_VAR 0 6
8758: PUSH
8759: DOUBLE
8760: LD_INT 1
8762: DEC
8763: ST_TO_ADDR
8764: LD_VAR 0 5
8768: PUSH
8769: FOR_TO
8770: IFFALSE 8804
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
8772: LD_ADDR_VAR 0 8
8776: PUSH
8777: LD_VAR 0 8
8781: PPUSH
8782: LD_VAR 0 5
8786: PUSH
8787: LD_VAR 0 6
8791: ARRAY
8792: PUSH
8793: LD_INT 1
8795: ARRAY
8796: PPUSH
8797: CALL 41009 0 2
8801: ST_TO_ADDR
8802: GO 8769
8804: POP
8805: POP
// result := tmp ;
8806: LD_ADDR_VAR 0 5
8810: PUSH
8811: LD_VAR 0 8
8815: ST_TO_ADDR
// end ; end ;
8816: LD_VAR 0 5
8820: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
8821: LD_INT 0
8823: PPUSH
8824: PPUSH
8825: PPUSH
8826: PPUSH
// if not list then
8827: LD_VAR 0 3
8831: NOT
8832: IFFALSE 8836
// exit ;
8834: GO 9226
// result := [ ] ;
8836: LD_ADDR_VAR 0 6
8840: PUSH
8841: EMPTY
8842: ST_TO_ADDR
// for i in list do
8843: LD_ADDR_VAR 0 7
8847: PUSH
8848: LD_VAR 0 3
8852: PUSH
8853: FOR_IN
8854: IFFALSE 9056
// begin tmp := GetDistUnitXY ( i , x , y ) ;
8856: LD_ADDR_VAR 0 9
8860: PUSH
8861: LD_VAR 0 7
8865: PPUSH
8866: LD_VAR 0 1
8870: PPUSH
8871: LD_VAR 0 2
8875: PPUSH
8876: CALL_OW 297
8880: ST_TO_ADDR
// if not result then
8881: LD_VAR 0 6
8885: NOT
8886: IFFALSE 8912
// result := [ [ i , tmp ] ] else
8888: LD_ADDR_VAR 0 6
8892: PUSH
8893: LD_VAR 0 7
8897: PUSH
8898: LD_VAR 0 9
8902: PUSH
8903: EMPTY
8904: LIST
8905: LIST
8906: PUSH
8907: EMPTY
8908: LIST
8909: ST_TO_ADDR
8910: GO 9054
// begin if result [ result ] [ 2 ] <= tmp then
8912: LD_VAR 0 6
8916: PUSH
8917: LD_VAR 0 6
8921: ARRAY
8922: PUSH
8923: LD_INT 2
8925: ARRAY
8926: PUSH
8927: LD_VAR 0 9
8931: LESSEQUAL
8932: IFFALSE 8974
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
8934: LD_ADDR_VAR 0 6
8938: PUSH
8939: LD_VAR 0 6
8943: PPUSH
8944: LD_VAR 0 6
8948: PUSH
8949: LD_INT 1
8951: PLUS
8952: PPUSH
8953: LD_VAR 0 7
8957: PUSH
8958: LD_VAR 0 9
8962: PUSH
8963: EMPTY
8964: LIST
8965: LIST
8966: PPUSH
8967: CALL_OW 2
8971: ST_TO_ADDR
8972: GO 9054
// for j := 1 to result do
8974: LD_ADDR_VAR 0 8
8978: PUSH
8979: DOUBLE
8980: LD_INT 1
8982: DEC
8983: ST_TO_ADDR
8984: LD_VAR 0 6
8988: PUSH
8989: FOR_TO
8990: IFFALSE 9052
// begin if tmp < result [ j ] [ 2 ] then
8992: LD_VAR 0 9
8996: PUSH
8997: LD_VAR 0 6
9001: PUSH
9002: LD_VAR 0 8
9006: ARRAY
9007: PUSH
9008: LD_INT 2
9010: ARRAY
9011: LESS
9012: IFFALSE 9050
// begin result := Insert ( result , j , [ i , tmp ] ) ;
9014: LD_ADDR_VAR 0 6
9018: PUSH
9019: LD_VAR 0 6
9023: PPUSH
9024: LD_VAR 0 8
9028: PPUSH
9029: LD_VAR 0 7
9033: PUSH
9034: LD_VAR 0 9
9038: PUSH
9039: EMPTY
9040: LIST
9041: LIST
9042: PPUSH
9043: CALL_OW 2
9047: ST_TO_ADDR
// break ;
9048: GO 9052
// end ; end ;
9050: GO 8989
9052: POP
9053: POP
// end ; end ;
9054: GO 8853
9056: POP
9057: POP
// if result and not asc then
9058: LD_VAR 0 6
9062: IFFALSE 9071
9064: PUSH
9065: LD_VAR 0 4
9069: NOT
9070: AND
9071: IFFALSE 9146
// begin tmp := result ;
9073: LD_ADDR_VAR 0 9
9077: PUSH
9078: LD_VAR 0 6
9082: ST_TO_ADDR
// for i = tmp downto 1 do
9083: LD_ADDR_VAR 0 7
9087: PUSH
9088: DOUBLE
9089: LD_VAR 0 9
9093: INC
9094: ST_TO_ADDR
9095: LD_INT 1
9097: PUSH
9098: FOR_DOWNTO
9099: IFFALSE 9144
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
9101: LD_ADDR_VAR 0 6
9105: PUSH
9106: LD_VAR 0 6
9110: PPUSH
9111: LD_VAR 0 9
9115: PUSH
9116: LD_VAR 0 7
9120: MINUS
9121: PUSH
9122: LD_INT 1
9124: PLUS
9125: PPUSH
9126: LD_VAR 0 9
9130: PUSH
9131: LD_VAR 0 7
9135: ARRAY
9136: PPUSH
9137: CALL_OW 1
9141: ST_TO_ADDR
9142: GO 9098
9144: POP
9145: POP
// end ; tmp := [ ] ;
9146: LD_ADDR_VAR 0 9
9150: PUSH
9151: EMPTY
9152: ST_TO_ADDR
// if mode then
9153: LD_VAR 0 5
9157: IFFALSE 9226
// begin for i = 1 to result do
9159: LD_ADDR_VAR 0 7
9163: PUSH
9164: DOUBLE
9165: LD_INT 1
9167: DEC
9168: ST_TO_ADDR
9169: LD_VAR 0 6
9173: PUSH
9174: FOR_TO
9175: IFFALSE 9214
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
9177: LD_ADDR_VAR 0 9
9181: PUSH
9182: LD_VAR 0 9
9186: PPUSH
9187: LD_VAR 0 7
9191: PPUSH
9192: LD_VAR 0 6
9196: PUSH
9197: LD_VAR 0 7
9201: ARRAY
9202: PUSH
9203: LD_INT 1
9205: ARRAY
9206: PPUSH
9207: CALL_OW 1
9211: ST_TO_ADDR
9212: GO 9174
9214: POP
9215: POP
// result := tmp ;
9216: LD_ADDR_VAR 0 6
9220: PUSH
9221: LD_VAR 0 9
9225: ST_TO_ADDR
// end ; end ;
9226: LD_VAR 0 6
9230: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
9231: LD_INT 0
9233: PPUSH
9234: PPUSH
9235: PPUSH
9236: PPUSH
9237: PPUSH
9238: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
9239: LD_ADDR_VAR 0 5
9243: PUSH
9244: LD_INT 0
9246: PUSH
9247: LD_INT 0
9249: PUSH
9250: LD_INT 0
9252: PUSH
9253: EMPTY
9254: PUSH
9255: EMPTY
9256: LIST
9257: LIST
9258: LIST
9259: LIST
9260: ST_TO_ADDR
// if not x or not y then
9261: LD_VAR 0 2
9265: NOT
9266: IFTRUE 9275
9268: PUSH
9269: LD_VAR 0 3
9273: NOT
9274: OR
9275: IFFALSE 9279
// exit ;
9277: GO 10935
// if not range then
9279: LD_VAR 0 4
9283: NOT
9284: IFFALSE 9294
// range := 10 ;
9286: LD_ADDR_VAR 0 4
9290: PUSH
9291: LD_INT 10
9293: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9294: LD_ADDR_VAR 0 8
9298: PUSH
9299: LD_INT 81
9301: PUSH
9302: LD_VAR 0 1
9306: PUSH
9307: EMPTY
9308: LIST
9309: LIST
9310: PUSH
9311: LD_INT 92
9313: PUSH
9314: LD_VAR 0 2
9318: PUSH
9319: LD_VAR 0 3
9323: PUSH
9324: LD_VAR 0 4
9328: PUSH
9329: EMPTY
9330: LIST
9331: LIST
9332: LIST
9333: LIST
9334: PUSH
9335: LD_INT 3
9337: PUSH
9338: LD_INT 21
9340: PUSH
9341: LD_INT 3
9343: PUSH
9344: EMPTY
9345: LIST
9346: LIST
9347: PUSH
9348: EMPTY
9349: LIST
9350: LIST
9351: PUSH
9352: EMPTY
9353: LIST
9354: LIST
9355: LIST
9356: PPUSH
9357: CALL_OW 69
9361: ST_TO_ADDR
// if not tmp then
9362: LD_VAR 0 8
9366: NOT
9367: IFFALSE 9371
// exit ;
9369: GO 10935
// for i in tmp do
9371: LD_ADDR_VAR 0 6
9375: PUSH
9376: LD_VAR 0 8
9380: PUSH
9381: FOR_IN
9382: IFFALSE 10910
// begin points := [ 0 , 0 , 0 ] ;
9384: LD_ADDR_VAR 0 9
9388: PUSH
9389: LD_INT 0
9391: PUSH
9392: LD_INT 0
9394: PUSH
9395: LD_INT 0
9397: PUSH
9398: EMPTY
9399: LIST
9400: LIST
9401: LIST
9402: ST_TO_ADDR
// bpoints := 1 ;
9403: LD_ADDR_VAR 0 10
9407: PUSH
9408: LD_INT 1
9410: ST_TO_ADDR
// case GetType ( i ) of unit_human :
9411: LD_VAR 0 6
9415: PPUSH
9416: CALL_OW 247
9420: PUSH
9421: LD_INT 1
9423: DOUBLE
9424: EQUAL
9425: IFTRUE 9429
9427: GO 10011
9429: POP
// begin if GetClass ( i ) = 1 then
9430: LD_VAR 0 6
9434: PPUSH
9435: CALL_OW 257
9439: PUSH
9440: LD_INT 1
9442: EQUAL
9443: IFFALSE 9464
// points := [ 10 , 5 , 3 ] ;
9445: LD_ADDR_VAR 0 9
9449: PUSH
9450: LD_INT 10
9452: PUSH
9453: LD_INT 5
9455: PUSH
9456: LD_INT 3
9458: PUSH
9459: EMPTY
9460: LIST
9461: LIST
9462: LIST
9463: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
9464: LD_VAR 0 6
9468: PPUSH
9469: CALL_OW 257
9473: PUSH
9474: LD_INT 2
9476: PUSH
9477: LD_INT 3
9479: PUSH
9480: LD_INT 4
9482: PUSH
9483: EMPTY
9484: LIST
9485: LIST
9486: LIST
9487: IN
9488: IFFALSE 9509
// points := [ 3 , 2 , 1 ] ;
9490: LD_ADDR_VAR 0 9
9494: PUSH
9495: LD_INT 3
9497: PUSH
9498: LD_INT 2
9500: PUSH
9501: LD_INT 1
9503: PUSH
9504: EMPTY
9505: LIST
9506: LIST
9507: LIST
9508: ST_TO_ADDR
// if GetClass ( i ) = 5 then
9509: LD_VAR 0 6
9513: PPUSH
9514: CALL_OW 257
9518: PUSH
9519: LD_INT 5
9521: EQUAL
9522: IFFALSE 9543
// points := [ 130 , 5 , 2 ] ;
9524: LD_ADDR_VAR 0 9
9528: PUSH
9529: LD_INT 130
9531: PUSH
9532: LD_INT 5
9534: PUSH
9535: LD_INT 2
9537: PUSH
9538: EMPTY
9539: LIST
9540: LIST
9541: LIST
9542: ST_TO_ADDR
// if GetClass ( i ) = 8 then
9543: LD_VAR 0 6
9547: PPUSH
9548: CALL_OW 257
9552: PUSH
9553: LD_INT 8
9555: EQUAL
9556: IFFALSE 9577
// points := [ 35 , 35 , 30 ] ;
9558: LD_ADDR_VAR 0 9
9562: PUSH
9563: LD_INT 35
9565: PUSH
9566: LD_INT 35
9568: PUSH
9569: LD_INT 30
9571: PUSH
9572: EMPTY
9573: LIST
9574: LIST
9575: LIST
9576: ST_TO_ADDR
// if GetClass ( i ) = 9 then
9577: LD_VAR 0 6
9581: PPUSH
9582: CALL_OW 257
9586: PUSH
9587: LD_INT 9
9589: EQUAL
9590: IFFALSE 9611
// points := [ 20 , 55 , 40 ] ;
9592: LD_ADDR_VAR 0 9
9596: PUSH
9597: LD_INT 20
9599: PUSH
9600: LD_INT 55
9602: PUSH
9603: LD_INT 40
9605: PUSH
9606: EMPTY
9607: LIST
9608: LIST
9609: LIST
9610: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
9611: LD_VAR 0 6
9615: PPUSH
9616: CALL_OW 257
9620: PUSH
9621: LD_INT 12
9623: PUSH
9624: LD_INT 16
9626: PUSH
9627: EMPTY
9628: LIST
9629: LIST
9630: IN
9631: IFFALSE 9652
// points := [ 5 , 3 , 2 ] ;
9633: LD_ADDR_VAR 0 9
9637: PUSH
9638: LD_INT 5
9640: PUSH
9641: LD_INT 3
9643: PUSH
9644: LD_INT 2
9646: PUSH
9647: EMPTY
9648: LIST
9649: LIST
9650: LIST
9651: ST_TO_ADDR
// if GetClass ( i ) = 17 then
9652: LD_VAR 0 6
9656: PPUSH
9657: CALL_OW 257
9661: PUSH
9662: LD_INT 17
9664: EQUAL
9665: IFFALSE 9686
// points := [ 100 , 50 , 75 ] ;
9667: LD_ADDR_VAR 0 9
9671: PUSH
9672: LD_INT 100
9674: PUSH
9675: LD_INT 50
9677: PUSH
9678: LD_INT 75
9680: PUSH
9681: EMPTY
9682: LIST
9683: LIST
9684: LIST
9685: ST_TO_ADDR
// if GetClass ( i ) = 15 then
9686: LD_VAR 0 6
9690: PPUSH
9691: CALL_OW 257
9695: PUSH
9696: LD_INT 15
9698: EQUAL
9699: IFFALSE 9720
// points := [ 10 , 5 , 3 ] ;
9701: LD_ADDR_VAR 0 9
9705: PUSH
9706: LD_INT 10
9708: PUSH
9709: LD_INT 5
9711: PUSH
9712: LD_INT 3
9714: PUSH
9715: EMPTY
9716: LIST
9717: LIST
9718: LIST
9719: ST_TO_ADDR
// if GetClass ( i ) = 14 then
9720: LD_VAR 0 6
9724: PPUSH
9725: CALL_OW 257
9729: PUSH
9730: LD_INT 14
9732: EQUAL
9733: IFFALSE 9754
// points := [ 10 , 0 , 0 ] ;
9735: LD_ADDR_VAR 0 9
9739: PUSH
9740: LD_INT 10
9742: PUSH
9743: LD_INT 0
9745: PUSH
9746: LD_INT 0
9748: PUSH
9749: EMPTY
9750: LIST
9751: LIST
9752: LIST
9753: ST_TO_ADDR
// if GetClass ( i ) = 11 then
9754: LD_VAR 0 6
9758: PPUSH
9759: CALL_OW 257
9763: PUSH
9764: LD_INT 11
9766: EQUAL
9767: IFFALSE 9788
// points := [ 30 , 10 , 5 ] ;
9769: LD_ADDR_VAR 0 9
9773: PUSH
9774: LD_INT 30
9776: PUSH
9777: LD_INT 10
9779: PUSH
9780: LD_INT 5
9782: PUSH
9783: EMPTY
9784: LIST
9785: LIST
9786: LIST
9787: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
9788: LD_VAR 0 1
9792: PPUSH
9793: LD_INT 5
9795: PPUSH
9796: CALL_OW 321
9800: PUSH
9801: LD_INT 2
9803: EQUAL
9804: IFFALSE 9821
// bpoints := bpoints * 1.8 ;
9806: LD_ADDR_VAR 0 10
9810: PUSH
9811: LD_VAR 0 10
9815: PUSH
9816: LD_REAL  1.80000000000000E+0000
9819: MUL
9820: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
9821: LD_VAR 0 6
9825: PPUSH
9826: CALL_OW 257
9830: PUSH
9831: LD_INT 1
9833: PUSH
9834: LD_INT 2
9836: PUSH
9837: LD_INT 3
9839: PUSH
9840: LD_INT 4
9842: PUSH
9843: EMPTY
9844: LIST
9845: LIST
9846: LIST
9847: LIST
9848: IN
9849: IFFALSE 9869
9851: PUSH
9852: LD_VAR 0 1
9856: PPUSH
9857: LD_INT 51
9859: PPUSH
9860: CALL_OW 321
9864: PUSH
9865: LD_INT 2
9867: EQUAL
9868: AND
9869: IFFALSE 9886
// bpoints := bpoints * 1.2 ;
9871: LD_ADDR_VAR 0 10
9875: PUSH
9876: LD_VAR 0 10
9880: PUSH
9881: LD_REAL  1.20000000000000E+0000
9884: MUL
9885: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
9886: LD_VAR 0 6
9890: PPUSH
9891: CALL_OW 257
9895: PUSH
9896: LD_INT 5
9898: PUSH
9899: LD_INT 7
9901: PUSH
9902: LD_INT 9
9904: PUSH
9905: EMPTY
9906: LIST
9907: LIST
9908: LIST
9909: IN
9910: IFFALSE 9930
9912: PUSH
9913: LD_VAR 0 1
9917: PPUSH
9918: LD_INT 52
9920: PPUSH
9921: CALL_OW 321
9925: PUSH
9926: LD_INT 2
9928: EQUAL
9929: AND
9930: IFFALSE 9947
// bpoints := bpoints * 1.5 ;
9932: LD_ADDR_VAR 0 10
9936: PUSH
9937: LD_VAR 0 10
9941: PUSH
9942: LD_REAL  1.50000000000000E+0000
9945: MUL
9946: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
9947: LD_VAR 0 1
9951: PPUSH
9952: LD_INT 66
9954: PPUSH
9955: CALL_OW 321
9959: PUSH
9960: LD_INT 2
9962: EQUAL
9963: IFFALSE 9980
// bpoints := bpoints * 1.1 ;
9965: LD_ADDR_VAR 0 10
9969: PUSH
9970: LD_VAR 0 10
9974: PUSH
9975: LD_REAL  1.10000000000000E+0000
9978: MUL
9979: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
9980: LD_ADDR_VAR 0 10
9984: PUSH
9985: LD_VAR 0 10
9989: PUSH
9990: LD_VAR 0 6
9994: PPUSH
9995: LD_INT 1
9997: PPUSH
9998: CALL_OW 259
10002: PUSH
10003: LD_REAL  1.15000000000000E+0000
10006: MUL
10007: MUL
10008: ST_TO_ADDR
// end ; unit_vehicle :
10009: GO 10839
10011: LD_INT 2
10013: DOUBLE
10014: EQUAL
10015: IFTRUE 10019
10017: GO 10827
10019: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
10020: LD_VAR 0 6
10024: PPUSH
10025: CALL_OW 264
10029: PUSH
10030: LD_INT 2
10032: PUSH
10033: LD_INT 42
10035: PUSH
10036: LD_INT 24
10038: PUSH
10039: EMPTY
10040: LIST
10041: LIST
10042: LIST
10043: IN
10044: IFFALSE 10065
// points := [ 25 , 5 , 3 ] ;
10046: LD_ADDR_VAR 0 9
10050: PUSH
10051: LD_INT 25
10053: PUSH
10054: LD_INT 5
10056: PUSH
10057: LD_INT 3
10059: PUSH
10060: EMPTY
10061: LIST
10062: LIST
10063: LIST
10064: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
10065: LD_VAR 0 6
10069: PPUSH
10070: CALL_OW 264
10074: PUSH
10075: LD_INT 4
10077: PUSH
10078: LD_INT 43
10080: PUSH
10081: LD_INT 25
10083: PUSH
10084: EMPTY
10085: LIST
10086: LIST
10087: LIST
10088: IN
10089: IFFALSE 10110
// points := [ 40 , 15 , 5 ] ;
10091: LD_ADDR_VAR 0 9
10095: PUSH
10096: LD_INT 40
10098: PUSH
10099: LD_INT 15
10101: PUSH
10102: LD_INT 5
10104: PUSH
10105: EMPTY
10106: LIST
10107: LIST
10108: LIST
10109: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
10110: LD_VAR 0 6
10114: PPUSH
10115: CALL_OW 264
10119: PUSH
10120: LD_INT 3
10122: PUSH
10123: LD_INT 23
10125: PUSH
10126: EMPTY
10127: LIST
10128: LIST
10129: IN
10130: IFFALSE 10151
// points := [ 7 , 25 , 8 ] ;
10132: LD_ADDR_VAR 0 9
10136: PUSH
10137: LD_INT 7
10139: PUSH
10140: LD_INT 25
10142: PUSH
10143: LD_INT 8
10145: PUSH
10146: EMPTY
10147: LIST
10148: LIST
10149: LIST
10150: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
10151: LD_VAR 0 6
10155: PPUSH
10156: CALL_OW 264
10160: PUSH
10161: LD_INT 5
10163: PUSH
10164: LD_INT 27
10166: PUSH
10167: LD_INT 44
10169: PUSH
10170: EMPTY
10171: LIST
10172: LIST
10173: LIST
10174: IN
10175: IFFALSE 10196
// points := [ 14 , 50 , 16 ] ;
10177: LD_ADDR_VAR 0 9
10181: PUSH
10182: LD_INT 14
10184: PUSH
10185: LD_INT 50
10187: PUSH
10188: LD_INT 16
10190: PUSH
10191: EMPTY
10192: LIST
10193: LIST
10194: LIST
10195: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
10196: LD_VAR 0 6
10200: PPUSH
10201: CALL_OW 264
10205: PUSH
10206: LD_INT 6
10208: PUSH
10209: LD_INT 46
10211: PUSH
10212: EMPTY
10213: LIST
10214: LIST
10215: IN
10216: IFFALSE 10237
// points := [ 32 , 120 , 70 ] ;
10218: LD_ADDR_VAR 0 9
10222: PUSH
10223: LD_INT 32
10225: PUSH
10226: LD_INT 120
10228: PUSH
10229: LD_INT 70
10231: PUSH
10232: EMPTY
10233: LIST
10234: LIST
10235: LIST
10236: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
10237: LD_VAR 0 6
10241: PPUSH
10242: CALL_OW 264
10246: PUSH
10247: LD_INT 7
10249: PUSH
10250: LD_INT 28
10252: PUSH
10253: LD_INT 45
10255: PUSH
10256: LD_INT 92
10258: PUSH
10259: EMPTY
10260: LIST
10261: LIST
10262: LIST
10263: LIST
10264: IN
10265: IFFALSE 10286
// points := [ 35 , 20 , 45 ] ;
10267: LD_ADDR_VAR 0 9
10271: PUSH
10272: LD_INT 35
10274: PUSH
10275: LD_INT 20
10277: PUSH
10278: LD_INT 45
10280: PUSH
10281: EMPTY
10282: LIST
10283: LIST
10284: LIST
10285: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
10286: LD_VAR 0 6
10290: PPUSH
10291: CALL_OW 264
10295: PUSH
10296: LD_INT 47
10298: PUSH
10299: EMPTY
10300: LIST
10301: IN
10302: IFFALSE 10323
// points := [ 67 , 45 , 75 ] ;
10304: LD_ADDR_VAR 0 9
10308: PUSH
10309: LD_INT 67
10311: PUSH
10312: LD_INT 45
10314: PUSH
10315: LD_INT 75
10317: PUSH
10318: EMPTY
10319: LIST
10320: LIST
10321: LIST
10322: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
10323: LD_VAR 0 6
10327: PPUSH
10328: CALL_OW 264
10332: PUSH
10333: LD_INT 26
10335: PUSH
10336: EMPTY
10337: LIST
10338: IN
10339: IFFALSE 10360
// points := [ 120 , 30 , 80 ] ;
10341: LD_ADDR_VAR 0 9
10345: PUSH
10346: LD_INT 120
10348: PUSH
10349: LD_INT 30
10351: PUSH
10352: LD_INT 80
10354: PUSH
10355: EMPTY
10356: LIST
10357: LIST
10358: LIST
10359: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
10360: LD_VAR 0 6
10364: PPUSH
10365: CALL_OW 264
10369: PUSH
10370: LD_INT 22
10372: PUSH
10373: EMPTY
10374: LIST
10375: IN
10376: IFFALSE 10397
// points := [ 40 , 1 , 1 ] ;
10378: LD_ADDR_VAR 0 9
10382: PUSH
10383: LD_INT 40
10385: PUSH
10386: LD_INT 1
10388: PUSH
10389: LD_INT 1
10391: PUSH
10392: EMPTY
10393: LIST
10394: LIST
10395: LIST
10396: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
10397: LD_VAR 0 6
10401: PPUSH
10402: CALL_OW 264
10406: PUSH
10407: LD_INT 29
10409: PUSH
10410: EMPTY
10411: LIST
10412: IN
10413: IFFALSE 10434
// points := [ 70 , 200 , 400 ] ;
10415: LD_ADDR_VAR 0 9
10419: PUSH
10420: LD_INT 70
10422: PUSH
10423: LD_INT 200
10425: PUSH
10426: LD_INT 400
10428: PUSH
10429: EMPTY
10430: LIST
10431: LIST
10432: LIST
10433: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
10434: LD_VAR 0 6
10438: PPUSH
10439: CALL_OW 264
10443: PUSH
10444: LD_INT 14
10446: PUSH
10447: LD_INT 53
10449: PUSH
10450: EMPTY
10451: LIST
10452: LIST
10453: IN
10454: IFFALSE 10475
// points := [ 40 , 10 , 20 ] ;
10456: LD_ADDR_VAR 0 9
10460: PUSH
10461: LD_INT 40
10463: PUSH
10464: LD_INT 10
10466: PUSH
10467: LD_INT 20
10469: PUSH
10470: EMPTY
10471: LIST
10472: LIST
10473: LIST
10474: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
10475: LD_VAR 0 6
10479: PPUSH
10480: CALL_OW 264
10484: PUSH
10485: LD_INT 9
10487: PUSH
10488: EMPTY
10489: LIST
10490: IN
10491: IFFALSE 10512
// points := [ 5 , 70 , 20 ] ;
10493: LD_ADDR_VAR 0 9
10497: PUSH
10498: LD_INT 5
10500: PUSH
10501: LD_INT 70
10503: PUSH
10504: LD_INT 20
10506: PUSH
10507: EMPTY
10508: LIST
10509: LIST
10510: LIST
10511: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
10512: LD_VAR 0 6
10516: PPUSH
10517: CALL_OW 264
10521: PUSH
10522: LD_INT 10
10524: PUSH
10525: EMPTY
10526: LIST
10527: IN
10528: IFFALSE 10549
// points := [ 35 , 110 , 70 ] ;
10530: LD_ADDR_VAR 0 9
10534: PUSH
10535: LD_INT 35
10537: PUSH
10538: LD_INT 110
10540: PUSH
10541: LD_INT 70
10543: PUSH
10544: EMPTY
10545: LIST
10546: LIST
10547: LIST
10548: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
10549: LD_VAR 0 6
10553: PPUSH
10554: CALL_OW 265
10558: PUSH
10559: LD_INT 25
10561: EQUAL
10562: IFFALSE 10583
// points := [ 80 , 65 , 100 ] ;
10564: LD_ADDR_VAR 0 9
10568: PUSH
10569: LD_INT 80
10571: PUSH
10572: LD_INT 65
10574: PUSH
10575: LD_INT 100
10577: PUSH
10578: EMPTY
10579: LIST
10580: LIST
10581: LIST
10582: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
10583: LD_VAR 0 6
10587: PPUSH
10588: CALL_OW 263
10592: PUSH
10593: LD_INT 1
10595: EQUAL
10596: IFFALSE 10631
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
10598: LD_ADDR_VAR 0 10
10602: PUSH
10603: LD_VAR 0 10
10607: PUSH
10608: LD_VAR 0 6
10612: PPUSH
10613: CALL_OW 311
10617: PPUSH
10618: LD_INT 3
10620: PPUSH
10621: CALL_OW 259
10625: PUSH
10626: LD_INT 4
10628: MUL
10629: MUL
10630: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
10631: LD_VAR 0 6
10635: PPUSH
10636: CALL_OW 263
10640: PUSH
10641: LD_INT 2
10643: EQUAL
10644: IFFALSE 10695
// begin j := IsControledBy ( i ) ;
10646: LD_ADDR_VAR 0 7
10650: PUSH
10651: LD_VAR 0 6
10655: PPUSH
10656: CALL_OW 312
10660: ST_TO_ADDR
// if j then
10661: LD_VAR 0 7
10665: IFFALSE 10695
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
10667: LD_ADDR_VAR 0 10
10671: PUSH
10672: LD_VAR 0 10
10676: PUSH
10677: LD_VAR 0 7
10681: PPUSH
10682: LD_INT 3
10684: PPUSH
10685: CALL_OW 259
10689: PUSH
10690: LD_INT 3
10692: MUL
10693: MUL
10694: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
10695: LD_VAR 0 6
10699: PPUSH
10700: CALL_OW 264
10704: PUSH
10705: LD_INT 5
10707: PUSH
10708: LD_INT 6
10710: PUSH
10711: LD_INT 46
10713: PUSH
10714: LD_INT 44
10716: PUSH
10717: LD_INT 47
10719: PUSH
10720: LD_INT 45
10722: PUSH
10723: LD_INT 28
10725: PUSH
10726: LD_INT 7
10728: PUSH
10729: LD_INT 27
10731: PUSH
10732: LD_INT 29
10734: PUSH
10735: EMPTY
10736: LIST
10737: LIST
10738: LIST
10739: LIST
10740: LIST
10741: LIST
10742: LIST
10743: LIST
10744: LIST
10745: LIST
10746: IN
10747: IFFALSE 10767
10749: PUSH
10750: LD_VAR 0 1
10754: PPUSH
10755: LD_INT 52
10757: PPUSH
10758: CALL_OW 321
10762: PUSH
10763: LD_INT 2
10765: EQUAL
10766: AND
10767: IFFALSE 10784
// bpoints := bpoints * 1.2 ;
10769: LD_ADDR_VAR 0 10
10773: PUSH
10774: LD_VAR 0 10
10778: PUSH
10779: LD_REAL  1.20000000000000E+0000
10782: MUL
10783: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
10784: LD_VAR 0 6
10788: PPUSH
10789: CALL_OW 264
10793: PUSH
10794: LD_INT 6
10796: PUSH
10797: LD_INT 46
10799: PUSH
10800: LD_INT 47
10802: PUSH
10803: EMPTY
10804: LIST
10805: LIST
10806: LIST
10807: IN
10808: IFFALSE 10825
// bpoints := bpoints * 1.2 ;
10810: LD_ADDR_VAR 0 10
10814: PUSH
10815: LD_VAR 0 10
10819: PUSH
10820: LD_REAL  1.20000000000000E+0000
10823: MUL
10824: ST_TO_ADDR
// end ; unit_building :
10825: GO 10839
10827: LD_INT 3
10829: DOUBLE
10830: EQUAL
10831: IFTRUE 10835
10833: GO 10838
10835: POP
// ; end ;
10836: GO 10839
10838: POP
// for j = 1 to 3 do
10839: LD_ADDR_VAR 0 7
10843: PUSH
10844: DOUBLE
10845: LD_INT 1
10847: DEC
10848: ST_TO_ADDR
10849: LD_INT 3
10851: PUSH
10852: FOR_TO
10853: IFFALSE 10906
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
10855: LD_ADDR_VAR 0 5
10859: PUSH
10860: LD_VAR 0 5
10864: PPUSH
10865: LD_VAR 0 7
10869: PPUSH
10870: LD_VAR 0 5
10874: PUSH
10875: LD_VAR 0 7
10879: ARRAY
10880: PUSH
10881: LD_VAR 0 9
10885: PUSH
10886: LD_VAR 0 7
10890: ARRAY
10891: PUSH
10892: LD_VAR 0 10
10896: MUL
10897: PLUS
10898: PPUSH
10899: CALL_OW 1
10903: ST_TO_ADDR
10904: GO 10852
10906: POP
10907: POP
// end ;
10908: GO 9381
10910: POP
10911: POP
// result := Replace ( result , 4 , tmp ) ;
10912: LD_ADDR_VAR 0 5
10916: PUSH
10917: LD_VAR 0 5
10921: PPUSH
10922: LD_INT 4
10924: PPUSH
10925: LD_VAR 0 8
10929: PPUSH
10930: CALL_OW 1
10934: ST_TO_ADDR
// end ;
10935: LD_VAR 0 5
10939: RET
// export function DangerAtRange ( unit , range ) ; begin
10940: LD_INT 0
10942: PPUSH
// if not unit then
10943: LD_VAR 0 1
10947: NOT
10948: IFFALSE 10952
// exit ;
10950: GO 10997
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
10952: LD_ADDR_VAR 0 3
10956: PUSH
10957: LD_VAR 0 1
10961: PPUSH
10962: CALL_OW 255
10966: PPUSH
10967: LD_VAR 0 1
10971: PPUSH
10972: CALL_OW 250
10976: PPUSH
10977: LD_VAR 0 1
10981: PPUSH
10982: CALL_OW 251
10986: PPUSH
10987: LD_VAR 0 2
10991: PPUSH
10992: CALL 9231 0 4
10996: ST_TO_ADDR
// end ;
10997: LD_VAR 0 3
11001: RET
// export function DangerInArea ( side , area ) ; begin
11002: LD_INT 0
11004: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
11005: LD_ADDR_VAR 0 3
11009: PUSH
11010: LD_VAR 0 2
11014: PPUSH
11015: LD_INT 81
11017: PUSH
11018: LD_VAR 0 1
11022: PUSH
11023: EMPTY
11024: LIST
11025: LIST
11026: PPUSH
11027: CALL_OW 70
11031: ST_TO_ADDR
// end ;
11032: LD_VAR 0 3
11036: RET
// export function IsExtension ( b ) ; begin
11037: LD_INT 0
11039: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
11040: LD_ADDR_VAR 0 2
11044: PUSH
11045: LD_VAR 0 1
11049: PUSH
11050: LD_INT 23
11052: PUSH
11053: LD_INT 20
11055: PUSH
11056: LD_INT 22
11058: PUSH
11059: LD_INT 17
11061: PUSH
11062: LD_INT 24
11064: PUSH
11065: LD_INT 21
11067: PUSH
11068: LD_INT 19
11070: PUSH
11071: LD_INT 16
11073: PUSH
11074: LD_INT 25
11076: PUSH
11077: LD_INT 18
11079: PUSH
11080: EMPTY
11081: LIST
11082: LIST
11083: LIST
11084: LIST
11085: LIST
11086: LIST
11087: LIST
11088: LIST
11089: LIST
11090: LIST
11091: IN
11092: ST_TO_ADDR
// end ;
11093: LD_VAR 0 2
11097: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
11098: LD_INT 0
11100: PPUSH
11101: PPUSH
11102: PPUSH
// result := [ ] ;
11103: LD_ADDR_VAR 0 4
11107: PUSH
11108: EMPTY
11109: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
11110: LD_ADDR_VAR 0 5
11114: PUSH
11115: LD_VAR 0 2
11119: PPUSH
11120: LD_INT 21
11122: PUSH
11123: LD_INT 3
11125: PUSH
11126: EMPTY
11127: LIST
11128: LIST
11129: PPUSH
11130: CALL_OW 70
11134: ST_TO_ADDR
// if not tmp then
11135: LD_VAR 0 5
11139: NOT
11140: IFFALSE 11144
// exit ;
11142: GO 11208
// if checkLink then
11144: LD_VAR 0 3
11148: IFFALSE 11198
// begin for i in tmp do
11150: LD_ADDR_VAR 0 6
11154: PUSH
11155: LD_VAR 0 5
11159: PUSH
11160: FOR_IN
11161: IFFALSE 11196
// if GetBase ( i ) <> base then
11163: LD_VAR 0 6
11167: PPUSH
11168: CALL_OW 274
11172: PUSH
11173: LD_VAR 0 1
11177: NONEQUAL
11178: IFFALSE 11194
// ComLinkToBase ( base , i ) ;
11180: LD_VAR 0 1
11184: PPUSH
11185: LD_VAR 0 6
11189: PPUSH
11190: CALL_OW 169
11194: GO 11160
11196: POP
11197: POP
// end ; result := tmp ;
11198: LD_ADDR_VAR 0 4
11202: PUSH
11203: LD_VAR 0 5
11207: ST_TO_ADDR
// end ;
11208: LD_VAR 0 4
11212: RET
// export function ComComplete ( units , b ) ; var i ; begin
11213: LD_INT 0
11215: PPUSH
11216: PPUSH
// if not units then
11217: LD_VAR 0 1
11221: NOT
11222: IFFALSE 11226
// exit ;
11224: GO 11316
// for i in units do
11226: LD_ADDR_VAR 0 4
11230: PUSH
11231: LD_VAR 0 1
11235: PUSH
11236: FOR_IN
11237: IFFALSE 11314
// if BuildingStatus ( b ) = bs_build then
11239: LD_VAR 0 2
11243: PPUSH
11244: CALL_OW 461
11248: PUSH
11249: LD_INT 1
11251: EQUAL
11252: IFFALSE 11312
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
11254: LD_VAR 0 4
11258: PPUSH
11259: LD_STRING h
11261: PUSH
11262: LD_VAR 0 2
11266: PPUSH
11267: CALL_OW 250
11271: PUSH
11272: LD_VAR 0 2
11276: PPUSH
11277: CALL_OW 251
11281: PUSH
11282: LD_VAR 0 2
11286: PUSH
11287: LD_INT 0
11289: PUSH
11290: LD_INT 0
11292: PUSH
11293: LD_INT 0
11295: PUSH
11296: EMPTY
11297: LIST
11298: LIST
11299: LIST
11300: LIST
11301: LIST
11302: LIST
11303: LIST
11304: PUSH
11305: EMPTY
11306: LIST
11307: PPUSH
11308: CALL_OW 446
11312: GO 11236
11314: POP
11315: POP
// end ;
11316: LD_VAR 0 3
11320: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
11321: LD_INT 0
11323: PPUSH
11324: PPUSH
11325: PPUSH
11326: PPUSH
11327: PPUSH
11328: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
11329: LD_VAR 0 1
11333: NOT
11334: IFTRUE 11351
11336: PUSH
11337: LD_VAR 0 1
11341: PPUSH
11342: CALL_OW 263
11346: PUSH
11347: LD_INT 2
11349: NONEQUAL
11350: OR
11351: IFFALSE 11355
// exit ;
11353: GO 11671
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
11355: LD_ADDR_VAR 0 6
11359: PUSH
11360: LD_INT 22
11362: PUSH
11363: LD_VAR 0 1
11367: PPUSH
11368: CALL_OW 255
11372: PUSH
11373: EMPTY
11374: LIST
11375: LIST
11376: PUSH
11377: LD_INT 2
11379: PUSH
11380: LD_INT 30
11382: PUSH
11383: LD_INT 36
11385: PUSH
11386: EMPTY
11387: LIST
11388: LIST
11389: PUSH
11390: LD_INT 34
11392: PUSH
11393: LD_INT 31
11395: PUSH
11396: EMPTY
11397: LIST
11398: LIST
11399: PUSH
11400: EMPTY
11401: LIST
11402: LIST
11403: LIST
11404: PUSH
11405: EMPTY
11406: LIST
11407: LIST
11408: PPUSH
11409: CALL_OW 69
11413: ST_TO_ADDR
// if not tmp then
11414: LD_VAR 0 6
11418: NOT
11419: IFFALSE 11423
// exit ;
11421: GO 11671
// result := [ ] ;
11423: LD_ADDR_VAR 0 2
11427: PUSH
11428: EMPTY
11429: ST_TO_ADDR
// for i in tmp do
11430: LD_ADDR_VAR 0 3
11434: PUSH
11435: LD_VAR 0 6
11439: PUSH
11440: FOR_IN
11441: IFFALSE 11512
// begin t := UnitsInside ( i ) ;
11443: LD_ADDR_VAR 0 4
11447: PUSH
11448: LD_VAR 0 3
11452: PPUSH
11453: CALL_OW 313
11457: ST_TO_ADDR
// if t then
11458: LD_VAR 0 4
11462: IFFALSE 11510
// for j in t do
11464: LD_ADDR_VAR 0 7
11468: PUSH
11469: LD_VAR 0 4
11473: PUSH
11474: FOR_IN
11475: IFFALSE 11508
// result := Replace ( result , result + 1 , j ) ;
11477: LD_ADDR_VAR 0 2
11481: PUSH
11482: LD_VAR 0 2
11486: PPUSH
11487: LD_VAR 0 2
11491: PUSH
11492: LD_INT 1
11494: PLUS
11495: PPUSH
11496: LD_VAR 0 7
11500: PPUSH
11501: CALL_OW 1
11505: ST_TO_ADDR
11506: GO 11474
11508: POP
11509: POP
// end ;
11510: GO 11440
11512: POP
11513: POP
// if not result then
11514: LD_VAR 0 2
11518: NOT
11519: IFFALSE 11523
// exit ;
11521: GO 11671
// mech := result [ 1 ] ;
11523: LD_ADDR_VAR 0 5
11527: PUSH
11528: LD_VAR 0 2
11532: PUSH
11533: LD_INT 1
11535: ARRAY
11536: ST_TO_ADDR
// if result > 1 then
11537: LD_VAR 0 2
11541: PUSH
11542: LD_INT 1
11544: GREATER
11545: IFFALSE 11657
// begin for i = 2 to result do
11547: LD_ADDR_VAR 0 3
11551: PUSH
11552: DOUBLE
11553: LD_INT 2
11555: DEC
11556: ST_TO_ADDR
11557: LD_VAR 0 2
11561: PUSH
11562: FOR_TO
11563: IFFALSE 11655
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
11565: LD_ADDR_VAR 0 4
11569: PUSH
11570: LD_VAR 0 2
11574: PUSH
11575: LD_VAR 0 3
11579: ARRAY
11580: PPUSH
11581: LD_INT 3
11583: PPUSH
11584: CALL_OW 259
11588: PUSH
11589: LD_VAR 0 2
11593: PUSH
11594: LD_VAR 0 3
11598: ARRAY
11599: PPUSH
11600: CALL_OW 432
11604: MINUS
11605: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
11606: LD_VAR 0 4
11610: PUSH
11611: LD_VAR 0 5
11615: PPUSH
11616: LD_INT 3
11618: PPUSH
11619: CALL_OW 259
11623: PUSH
11624: LD_VAR 0 5
11628: PPUSH
11629: CALL_OW 432
11633: MINUS
11634: GREATEREQUAL
11635: IFFALSE 11653
// mech := result [ i ] ;
11637: LD_ADDR_VAR 0 5
11641: PUSH
11642: LD_VAR 0 2
11646: PUSH
11647: LD_VAR 0 3
11651: ARRAY
11652: ST_TO_ADDR
// end ;
11653: GO 11562
11655: POP
11656: POP
// end ; ComLinkTo ( vehicle , mech ) ;
11657: LD_VAR 0 1
11661: PPUSH
11662: LD_VAR 0 5
11666: PPUSH
11667: CALL_OW 135
// end ;
11671: LD_VAR 0 2
11675: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
11676: LD_INT 0
11678: PPUSH
11679: PPUSH
11680: PPUSH
11681: PPUSH
11682: PPUSH
11683: PPUSH
11684: PPUSH
11685: PPUSH
11686: PPUSH
11687: PPUSH
11688: PPUSH
11689: PPUSH
11690: PPUSH
// result := [ ] ;
11691: LD_ADDR_VAR 0 7
11695: PUSH
11696: EMPTY
11697: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
11698: LD_VAR 0 1
11702: PPUSH
11703: CALL_OW 266
11707: PUSH
11708: LD_INT 0
11710: PUSH
11711: LD_INT 1
11713: PUSH
11714: EMPTY
11715: LIST
11716: LIST
11717: IN
11718: NOT
11719: IFFALSE 11723
// exit ;
11721: GO 13363
// if name then
11723: LD_VAR 0 3
11727: IFFALSE 11743
// SetBName ( base_dep , name ) ;
11729: LD_VAR 0 1
11733: PPUSH
11734: LD_VAR 0 3
11738: PPUSH
11739: CALL_OW 500
// base := GetBase ( base_dep ) ;
11743: LD_ADDR_VAR 0 15
11747: PUSH
11748: LD_VAR 0 1
11752: PPUSH
11753: CALL_OW 274
11757: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
11758: LD_ADDR_VAR 0 16
11762: PUSH
11763: LD_VAR 0 1
11767: PPUSH
11768: CALL_OW 255
11772: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
11773: LD_ADDR_VAR 0 17
11777: PUSH
11778: LD_VAR 0 1
11782: PPUSH
11783: CALL_OW 248
11787: ST_TO_ADDR
// if sources then
11788: LD_VAR 0 5
11792: IFFALSE 11839
// for i = 1 to 3 do
11794: LD_ADDR_VAR 0 8
11798: PUSH
11799: DOUBLE
11800: LD_INT 1
11802: DEC
11803: ST_TO_ADDR
11804: LD_INT 3
11806: PUSH
11807: FOR_TO
11808: IFFALSE 11837
// AddResourceType ( base , i , sources [ i ] ) ;
11810: LD_VAR 0 15
11814: PPUSH
11815: LD_VAR 0 8
11819: PPUSH
11820: LD_VAR 0 5
11824: PUSH
11825: LD_VAR 0 8
11829: ARRAY
11830: PPUSH
11831: CALL_OW 276
11835: GO 11807
11837: POP
11838: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
11839: LD_ADDR_VAR 0 18
11843: PUSH
11844: LD_VAR 0 15
11848: PPUSH
11849: LD_VAR 0 2
11853: PPUSH
11854: LD_INT 1
11856: PPUSH
11857: CALL 11098 0 3
11861: ST_TO_ADDR
// InitHc ;
11862: CALL_OW 19
// InitUc ;
11866: CALL_OW 18
// uc_side := side ;
11870: LD_ADDR_OWVAR 20
11874: PUSH
11875: LD_VAR 0 16
11879: ST_TO_ADDR
// uc_nation := nation ;
11880: LD_ADDR_OWVAR 21
11884: PUSH
11885: LD_VAR 0 17
11889: ST_TO_ADDR
// if buildings then
11890: LD_VAR 0 18
11894: IFFALSE 13222
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
11896: LD_ADDR_VAR 0 19
11900: PUSH
11901: LD_VAR 0 18
11905: PPUSH
11906: LD_INT 2
11908: PUSH
11909: LD_INT 30
11911: PUSH
11912: LD_INT 29
11914: PUSH
11915: EMPTY
11916: LIST
11917: LIST
11918: PUSH
11919: LD_INT 30
11921: PUSH
11922: LD_INT 30
11924: PUSH
11925: EMPTY
11926: LIST
11927: LIST
11928: PUSH
11929: EMPTY
11930: LIST
11931: LIST
11932: LIST
11933: PPUSH
11934: CALL_OW 72
11938: ST_TO_ADDR
// if tmp then
11939: LD_VAR 0 19
11943: IFFALSE 11991
// for i in tmp do
11945: LD_ADDR_VAR 0 8
11949: PUSH
11950: LD_VAR 0 19
11954: PUSH
11955: FOR_IN
11956: IFFALSE 11989
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
11958: LD_VAR 0 8
11962: PPUSH
11963: CALL_OW 250
11967: PPUSH
11968: LD_VAR 0 8
11972: PPUSH
11973: CALL_OW 251
11977: PPUSH
11978: LD_VAR 0 16
11982: PPUSH
11983: CALL_OW 441
11987: GO 11955
11989: POP
11990: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
11991: LD_VAR 0 18
11995: PPUSH
11996: LD_INT 2
11998: PUSH
11999: LD_INT 30
12001: PUSH
12002: LD_INT 32
12004: PUSH
12005: EMPTY
12006: LIST
12007: LIST
12008: PUSH
12009: LD_INT 30
12011: PUSH
12012: LD_INT 33
12014: PUSH
12015: EMPTY
12016: LIST
12017: LIST
12018: PUSH
12019: EMPTY
12020: LIST
12021: LIST
12022: LIST
12023: PPUSH
12024: CALL_OW 72
12028: IFFALSE 12116
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
12030: LD_ADDR_VAR 0 8
12034: PUSH
12035: LD_VAR 0 18
12039: PPUSH
12040: LD_INT 2
12042: PUSH
12043: LD_INT 30
12045: PUSH
12046: LD_INT 32
12048: PUSH
12049: EMPTY
12050: LIST
12051: LIST
12052: PUSH
12053: LD_INT 30
12055: PUSH
12056: LD_INT 33
12058: PUSH
12059: EMPTY
12060: LIST
12061: LIST
12062: PUSH
12063: EMPTY
12064: LIST
12065: LIST
12066: LIST
12067: PPUSH
12068: CALL_OW 72
12072: PUSH
12073: FOR_IN
12074: IFFALSE 12114
// begin if not GetBWeapon ( i ) then
12076: LD_VAR 0 8
12080: PPUSH
12081: CALL_OW 269
12085: NOT
12086: IFFALSE 12112
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
12088: LD_VAR 0 8
12092: PPUSH
12093: LD_VAR 0 8
12097: PPUSH
12098: LD_VAR 0 2
12102: PPUSH
12103: CALL 13368 0 2
12107: PPUSH
12108: CALL_OW 431
// end ;
12112: GO 12073
12114: POP
12115: POP
// end ; for i = 1 to personel do
12116: LD_ADDR_VAR 0 8
12120: PUSH
12121: DOUBLE
12122: LD_INT 1
12124: DEC
12125: ST_TO_ADDR
12126: LD_VAR 0 6
12130: PUSH
12131: FOR_TO
12132: IFFALSE 13202
// begin if i > 4 then
12134: LD_VAR 0 8
12138: PUSH
12139: LD_INT 4
12141: GREATER
12142: IFFALSE 12146
// break ;
12144: GO 13202
// case i of 1 :
12146: LD_VAR 0 8
12150: PUSH
12151: LD_INT 1
12153: DOUBLE
12154: EQUAL
12155: IFTRUE 12159
12157: GO 12239
12159: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
12160: LD_ADDR_VAR 0 12
12164: PUSH
12165: LD_VAR 0 18
12169: PPUSH
12170: LD_INT 22
12172: PUSH
12173: LD_VAR 0 16
12177: PUSH
12178: EMPTY
12179: LIST
12180: LIST
12181: PUSH
12182: LD_INT 58
12184: PUSH
12185: EMPTY
12186: LIST
12187: PUSH
12188: LD_INT 2
12190: PUSH
12191: LD_INT 30
12193: PUSH
12194: LD_INT 32
12196: PUSH
12197: EMPTY
12198: LIST
12199: LIST
12200: PUSH
12201: LD_INT 30
12203: PUSH
12204: LD_INT 4
12206: PUSH
12207: EMPTY
12208: LIST
12209: LIST
12210: PUSH
12211: LD_INT 30
12213: PUSH
12214: LD_INT 5
12216: PUSH
12217: EMPTY
12218: LIST
12219: LIST
12220: PUSH
12221: EMPTY
12222: LIST
12223: LIST
12224: LIST
12225: LIST
12226: PUSH
12227: EMPTY
12228: LIST
12229: LIST
12230: LIST
12231: PPUSH
12232: CALL_OW 72
12236: ST_TO_ADDR
12237: GO 12461
12239: LD_INT 2
12241: DOUBLE
12242: EQUAL
12243: IFTRUE 12247
12245: GO 12309
12247: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
12248: LD_ADDR_VAR 0 12
12252: PUSH
12253: LD_VAR 0 18
12257: PPUSH
12258: LD_INT 22
12260: PUSH
12261: LD_VAR 0 16
12265: PUSH
12266: EMPTY
12267: LIST
12268: LIST
12269: PUSH
12270: LD_INT 2
12272: PUSH
12273: LD_INT 30
12275: PUSH
12276: LD_INT 0
12278: PUSH
12279: EMPTY
12280: LIST
12281: LIST
12282: PUSH
12283: LD_INT 30
12285: PUSH
12286: LD_INT 1
12288: PUSH
12289: EMPTY
12290: LIST
12291: LIST
12292: PUSH
12293: EMPTY
12294: LIST
12295: LIST
12296: LIST
12297: PUSH
12298: EMPTY
12299: LIST
12300: LIST
12301: PPUSH
12302: CALL_OW 72
12306: ST_TO_ADDR
12307: GO 12461
12309: LD_INT 3
12311: DOUBLE
12312: EQUAL
12313: IFTRUE 12317
12315: GO 12379
12317: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
12318: LD_ADDR_VAR 0 12
12322: PUSH
12323: LD_VAR 0 18
12327: PPUSH
12328: LD_INT 22
12330: PUSH
12331: LD_VAR 0 16
12335: PUSH
12336: EMPTY
12337: LIST
12338: LIST
12339: PUSH
12340: LD_INT 2
12342: PUSH
12343: LD_INT 30
12345: PUSH
12346: LD_INT 2
12348: PUSH
12349: EMPTY
12350: LIST
12351: LIST
12352: PUSH
12353: LD_INT 30
12355: PUSH
12356: LD_INT 3
12358: PUSH
12359: EMPTY
12360: LIST
12361: LIST
12362: PUSH
12363: EMPTY
12364: LIST
12365: LIST
12366: LIST
12367: PUSH
12368: EMPTY
12369: LIST
12370: LIST
12371: PPUSH
12372: CALL_OW 72
12376: ST_TO_ADDR
12377: GO 12461
12379: LD_INT 4
12381: DOUBLE
12382: EQUAL
12383: IFTRUE 12387
12385: GO 12460
12387: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
12388: LD_ADDR_VAR 0 12
12392: PUSH
12393: LD_VAR 0 18
12397: PPUSH
12398: LD_INT 22
12400: PUSH
12401: LD_VAR 0 16
12405: PUSH
12406: EMPTY
12407: LIST
12408: LIST
12409: PUSH
12410: LD_INT 2
12412: PUSH
12413: LD_INT 30
12415: PUSH
12416: LD_INT 6
12418: PUSH
12419: EMPTY
12420: LIST
12421: LIST
12422: PUSH
12423: LD_INT 30
12425: PUSH
12426: LD_INT 7
12428: PUSH
12429: EMPTY
12430: LIST
12431: LIST
12432: PUSH
12433: LD_INT 30
12435: PUSH
12436: LD_INT 8
12438: PUSH
12439: EMPTY
12440: LIST
12441: LIST
12442: PUSH
12443: EMPTY
12444: LIST
12445: LIST
12446: LIST
12447: LIST
12448: PUSH
12449: EMPTY
12450: LIST
12451: LIST
12452: PPUSH
12453: CALL_OW 72
12457: ST_TO_ADDR
12458: GO 12461
12460: POP
// if i = 1 then
12461: LD_VAR 0 8
12465: PUSH
12466: LD_INT 1
12468: EQUAL
12469: IFFALSE 12580
// begin tmp := [ ] ;
12471: LD_ADDR_VAR 0 19
12475: PUSH
12476: EMPTY
12477: ST_TO_ADDR
// for j in f do
12478: LD_ADDR_VAR 0 9
12482: PUSH
12483: LD_VAR 0 12
12487: PUSH
12488: FOR_IN
12489: IFFALSE 12562
// if GetBType ( j ) = b_bunker then
12491: LD_VAR 0 9
12495: PPUSH
12496: CALL_OW 266
12500: PUSH
12501: LD_INT 32
12503: EQUAL
12504: IFFALSE 12531
// tmp := Insert ( tmp , 1 , j ) else
12506: LD_ADDR_VAR 0 19
12510: PUSH
12511: LD_VAR 0 19
12515: PPUSH
12516: LD_INT 1
12518: PPUSH
12519: LD_VAR 0 9
12523: PPUSH
12524: CALL_OW 2
12528: ST_TO_ADDR
12529: GO 12560
// tmp := Insert ( tmp , tmp + 1 , j ) ;
12531: LD_ADDR_VAR 0 19
12535: PUSH
12536: LD_VAR 0 19
12540: PPUSH
12541: LD_VAR 0 19
12545: PUSH
12546: LD_INT 1
12548: PLUS
12549: PPUSH
12550: LD_VAR 0 9
12554: PPUSH
12555: CALL_OW 2
12559: ST_TO_ADDR
12560: GO 12488
12562: POP
12563: POP
// if tmp then
12564: LD_VAR 0 19
12568: IFFALSE 12580
// f := tmp ;
12570: LD_ADDR_VAR 0 12
12574: PUSH
12575: LD_VAR 0 19
12579: ST_TO_ADDR
// end ; x := personel [ i ] ;
12580: LD_ADDR_VAR 0 13
12584: PUSH
12585: LD_VAR 0 6
12589: PUSH
12590: LD_VAR 0 8
12594: ARRAY
12595: ST_TO_ADDR
// if x = - 1 then
12596: LD_VAR 0 13
12600: PUSH
12601: LD_INT 1
12603: NEG
12604: EQUAL
12605: IFFALSE 12816
// begin for j in f do
12607: LD_ADDR_VAR 0 9
12611: PUSH
12612: LD_VAR 0 12
12616: PUSH
12617: FOR_IN
12618: IFFALSE 12812
// repeat InitHc ;
12620: CALL_OW 19
// if GetBType ( j ) = b_barracks then
12624: LD_VAR 0 9
12628: PPUSH
12629: CALL_OW 266
12633: PUSH
12634: LD_INT 5
12636: EQUAL
12637: IFFALSE 12707
// begin if UnitsInside ( j ) < 3 then
12639: LD_VAR 0 9
12643: PPUSH
12644: CALL_OW 313
12648: PUSH
12649: LD_INT 3
12651: LESS
12652: IFFALSE 12688
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12654: LD_INT 0
12656: PPUSH
12657: LD_INT 5
12659: PUSH
12660: LD_INT 8
12662: PUSH
12663: LD_INT 9
12665: PUSH
12666: EMPTY
12667: LIST
12668: LIST
12669: LIST
12670: PUSH
12671: LD_VAR 0 17
12675: ARRAY
12676: PPUSH
12677: LD_VAR 0 4
12681: PPUSH
12682: CALL_OW 380
12686: GO 12705
// PrepareHuman ( false , i , skill ) ;
12688: LD_INT 0
12690: PPUSH
12691: LD_VAR 0 8
12695: PPUSH
12696: LD_VAR 0 4
12700: PPUSH
12701: CALL_OW 380
// end else
12705: GO 12724
// PrepareHuman ( false , i , skill ) ;
12707: LD_INT 0
12709: PPUSH
12710: LD_VAR 0 8
12714: PPUSH
12715: LD_VAR 0 4
12719: PPUSH
12720: CALL_OW 380
// un := CreateHuman ;
12724: LD_ADDR_VAR 0 14
12728: PUSH
12729: CALL_OW 44
12733: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12734: LD_ADDR_VAR 0 7
12738: PUSH
12739: LD_VAR 0 7
12743: PPUSH
12744: LD_INT 1
12746: PPUSH
12747: LD_VAR 0 14
12751: PPUSH
12752: CALL_OW 2
12756: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
12757: LD_VAR 0 14
12761: PPUSH
12762: LD_VAR 0 9
12766: PPUSH
12767: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
12771: LD_VAR 0 9
12775: PPUSH
12776: CALL_OW 313
12780: PUSH
12781: LD_INT 6
12783: EQUAL
12784: IFTRUE 12808
12786: PUSH
12787: LD_VAR 0 9
12791: PPUSH
12792: CALL_OW 266
12796: PUSH
12797: LD_INT 32
12799: PUSH
12800: LD_INT 31
12802: PUSH
12803: EMPTY
12804: LIST
12805: LIST
12806: IN
12807: OR
12808: IFFALSE 12620
12810: GO 12617
12812: POP
12813: POP
// end else
12814: GO 13200
// for j = 1 to x do
12816: LD_ADDR_VAR 0 9
12820: PUSH
12821: DOUBLE
12822: LD_INT 1
12824: DEC
12825: ST_TO_ADDR
12826: LD_VAR 0 13
12830: PUSH
12831: FOR_TO
12832: IFFALSE 13198
// begin InitHc ;
12834: CALL_OW 19
// if not f then
12838: LD_VAR 0 12
12842: NOT
12843: IFFALSE 12932
// begin PrepareHuman ( false , i , skill ) ;
12845: LD_INT 0
12847: PPUSH
12848: LD_VAR 0 8
12852: PPUSH
12853: LD_VAR 0 4
12857: PPUSH
12858: CALL_OW 380
// un := CreateHuman ;
12862: LD_ADDR_VAR 0 14
12866: PUSH
12867: CALL_OW 44
12871: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12872: LD_ADDR_VAR 0 7
12876: PUSH
12877: LD_VAR 0 7
12881: PPUSH
12882: LD_INT 1
12884: PPUSH
12885: LD_VAR 0 14
12889: PPUSH
12890: CALL_OW 2
12894: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
12895: LD_VAR 0 14
12899: PPUSH
12900: LD_VAR 0 1
12904: PPUSH
12905: CALL_OW 250
12909: PPUSH
12910: LD_VAR 0 1
12914: PPUSH
12915: CALL_OW 251
12919: PPUSH
12920: LD_INT 10
12922: PPUSH
12923: LD_INT 0
12925: PPUSH
12926: CALL_OW 50
// continue ;
12930: GO 12831
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
12932: LD_VAR 0 12
12936: PUSH
12937: LD_INT 1
12939: ARRAY
12940: PPUSH
12941: CALL_OW 313
12945: IFFALSE 12973
12947: PUSH
12948: LD_VAR 0 12
12952: PUSH
12953: LD_INT 1
12955: ARRAY
12956: PPUSH
12957: CALL_OW 266
12961: PUSH
12962: LD_INT 32
12964: PUSH
12965: LD_INT 31
12967: PUSH
12968: EMPTY
12969: LIST
12970: LIST
12971: IN
12972: AND
12973: IFTRUE 12994
12975: PUSH
12976: LD_VAR 0 12
12980: PUSH
12981: LD_INT 1
12983: ARRAY
12984: PPUSH
12985: CALL_OW 313
12989: PUSH
12990: LD_INT 6
12992: EQUAL
12993: OR
12994: IFFALSE 13014
// f := Delete ( f , 1 ) ;
12996: LD_ADDR_VAR 0 12
13000: PUSH
13001: LD_VAR 0 12
13005: PPUSH
13006: LD_INT 1
13008: PPUSH
13009: CALL_OW 3
13013: ST_TO_ADDR
// if not f then
13014: LD_VAR 0 12
13018: NOT
13019: IFFALSE 13037
// begin x := x + 2 ;
13021: LD_ADDR_VAR 0 13
13025: PUSH
13026: LD_VAR 0 13
13030: PUSH
13031: LD_INT 2
13033: PLUS
13034: ST_TO_ADDR
// continue ;
13035: GO 12831
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
13037: LD_VAR 0 12
13041: PUSH
13042: LD_INT 1
13044: ARRAY
13045: PPUSH
13046: CALL_OW 266
13050: PUSH
13051: LD_INT 5
13053: EQUAL
13054: IFFALSE 13128
// begin if UnitsInside ( f [ 1 ] ) < 3 then
13056: LD_VAR 0 12
13060: PUSH
13061: LD_INT 1
13063: ARRAY
13064: PPUSH
13065: CALL_OW 313
13069: PUSH
13070: LD_INT 3
13072: LESS
13073: IFFALSE 13109
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
13075: LD_INT 0
13077: PPUSH
13078: LD_INT 5
13080: PUSH
13081: LD_INT 8
13083: PUSH
13084: LD_INT 9
13086: PUSH
13087: EMPTY
13088: LIST
13089: LIST
13090: LIST
13091: PUSH
13092: LD_VAR 0 17
13096: ARRAY
13097: PPUSH
13098: LD_VAR 0 4
13102: PPUSH
13103: CALL_OW 380
13107: GO 13126
// PrepareHuman ( false , i , skill ) ;
13109: LD_INT 0
13111: PPUSH
13112: LD_VAR 0 8
13116: PPUSH
13117: LD_VAR 0 4
13121: PPUSH
13122: CALL_OW 380
// end else
13126: GO 13145
// PrepareHuman ( false , i , skill ) ;
13128: LD_INT 0
13130: PPUSH
13131: LD_VAR 0 8
13135: PPUSH
13136: LD_VAR 0 4
13140: PPUSH
13141: CALL_OW 380
// un := CreateHuman ;
13145: LD_ADDR_VAR 0 14
13149: PUSH
13150: CALL_OW 44
13154: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13155: LD_ADDR_VAR 0 7
13159: PUSH
13160: LD_VAR 0 7
13164: PPUSH
13165: LD_INT 1
13167: PPUSH
13168: LD_VAR 0 14
13172: PPUSH
13173: CALL_OW 2
13177: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
13178: LD_VAR 0 14
13182: PPUSH
13183: LD_VAR 0 12
13187: PUSH
13188: LD_INT 1
13190: ARRAY
13191: PPUSH
13192: CALL_OW 52
// end ;
13196: GO 12831
13198: POP
13199: POP
// end ;
13200: GO 12131
13202: POP
13203: POP
// result := result ^ buildings ;
13204: LD_ADDR_VAR 0 7
13208: PUSH
13209: LD_VAR 0 7
13213: PUSH
13214: LD_VAR 0 18
13218: ADD
13219: ST_TO_ADDR
// end else
13220: GO 13363
// begin for i = 1 to personel do
13222: LD_ADDR_VAR 0 8
13226: PUSH
13227: DOUBLE
13228: LD_INT 1
13230: DEC
13231: ST_TO_ADDR
13232: LD_VAR 0 6
13236: PUSH
13237: FOR_TO
13238: IFFALSE 13361
// begin if i > 4 then
13240: LD_VAR 0 8
13244: PUSH
13245: LD_INT 4
13247: GREATER
13248: IFFALSE 13252
// break ;
13250: GO 13361
// x := personel [ i ] ;
13252: LD_ADDR_VAR 0 13
13256: PUSH
13257: LD_VAR 0 6
13261: PUSH
13262: LD_VAR 0 8
13266: ARRAY
13267: ST_TO_ADDR
// if x = - 1 then
13268: LD_VAR 0 13
13272: PUSH
13273: LD_INT 1
13275: NEG
13276: EQUAL
13277: IFFALSE 13281
// continue ;
13279: GO 13237
// PrepareHuman ( false , i , skill ) ;
13281: LD_INT 0
13283: PPUSH
13284: LD_VAR 0 8
13288: PPUSH
13289: LD_VAR 0 4
13293: PPUSH
13294: CALL_OW 380
// un := CreateHuman ;
13298: LD_ADDR_VAR 0 14
13302: PUSH
13303: CALL_OW 44
13307: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13308: LD_VAR 0 14
13312: PPUSH
13313: LD_VAR 0 1
13317: PPUSH
13318: CALL_OW 250
13322: PPUSH
13323: LD_VAR 0 1
13327: PPUSH
13328: CALL_OW 251
13332: PPUSH
13333: LD_INT 10
13335: PPUSH
13336: LD_INT 0
13338: PPUSH
13339: CALL_OW 50
// result := result ^ un ;
13343: LD_ADDR_VAR 0 7
13347: PUSH
13348: LD_VAR 0 7
13352: PUSH
13353: LD_VAR 0 14
13357: ADD
13358: ST_TO_ADDR
// end ;
13359: GO 13237
13361: POP
13362: POP
// end ; end ;
13363: LD_VAR 0 7
13367: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
13368: LD_INT 0
13370: PPUSH
13371: PPUSH
13372: PPUSH
13373: PPUSH
13374: PPUSH
13375: PPUSH
13376: PPUSH
13377: PPUSH
13378: PPUSH
13379: PPUSH
13380: PPUSH
13381: PPUSH
13382: PPUSH
13383: PPUSH
13384: PPUSH
13385: PPUSH
// result := false ;
13386: LD_ADDR_VAR 0 3
13390: PUSH
13391: LD_INT 0
13393: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
13394: LD_VAR 0 1
13398: NOT
13399: IFTRUE 13424
13401: PUSH
13402: LD_VAR 0 1
13406: PPUSH
13407: CALL_OW 266
13411: PUSH
13412: LD_INT 32
13414: PUSH
13415: LD_INT 33
13417: PUSH
13418: EMPTY
13419: LIST
13420: LIST
13421: IN
13422: NOT
13423: OR
13424: IFFALSE 13428
// exit ;
13426: GO 14563
// nat := GetNation ( tower ) ;
13428: LD_ADDR_VAR 0 12
13432: PUSH
13433: LD_VAR 0 1
13437: PPUSH
13438: CALL_OW 248
13442: ST_TO_ADDR
// side := GetSide ( tower ) ;
13443: LD_ADDR_VAR 0 16
13447: PUSH
13448: LD_VAR 0 1
13452: PPUSH
13453: CALL_OW 255
13457: ST_TO_ADDR
// x := GetX ( tower ) ;
13458: LD_ADDR_VAR 0 10
13462: PUSH
13463: LD_VAR 0 1
13467: PPUSH
13468: CALL_OW 250
13472: ST_TO_ADDR
// y := GetY ( tower ) ;
13473: LD_ADDR_VAR 0 11
13477: PUSH
13478: LD_VAR 0 1
13482: PPUSH
13483: CALL_OW 251
13487: ST_TO_ADDR
// if not x or not y then
13488: LD_VAR 0 10
13492: NOT
13493: IFTRUE 13502
13495: PUSH
13496: LD_VAR 0 11
13500: NOT
13501: OR
13502: IFFALSE 13506
// exit ;
13504: GO 14563
// weapon := 0 ;
13506: LD_ADDR_VAR 0 18
13510: PUSH
13511: LD_INT 0
13513: ST_TO_ADDR
// fac_list := [ ] ;
13514: LD_ADDR_VAR 0 17
13518: PUSH
13519: EMPTY
13520: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
13521: LD_ADDR_VAR 0 6
13525: PUSH
13526: LD_VAR 0 1
13530: PPUSH
13531: CALL_OW 274
13535: PPUSH
13536: LD_VAR 0 2
13540: PPUSH
13541: LD_INT 0
13543: PPUSH
13544: CALL 11098 0 3
13548: PPUSH
13549: LD_INT 30
13551: PUSH
13552: LD_INT 3
13554: PUSH
13555: EMPTY
13556: LIST
13557: LIST
13558: PPUSH
13559: CALL_OW 72
13563: ST_TO_ADDR
// if not factories then
13564: LD_VAR 0 6
13568: NOT
13569: IFFALSE 13573
// exit ;
13571: GO 14563
// for i in factories do
13573: LD_ADDR_VAR 0 8
13577: PUSH
13578: LD_VAR 0 6
13582: PUSH
13583: FOR_IN
13584: IFFALSE 13609
// fac_list := fac_list union AvailableWeaponList ( i ) ;
13586: LD_ADDR_VAR 0 17
13590: PUSH
13591: LD_VAR 0 17
13595: PUSH
13596: LD_VAR 0 8
13600: PPUSH
13601: CALL_OW 478
13605: UNION
13606: ST_TO_ADDR
13607: GO 13583
13609: POP
13610: POP
// if not fac_list then
13611: LD_VAR 0 17
13615: NOT
13616: IFFALSE 13620
// exit ;
13618: GO 14563
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
13620: LD_ADDR_VAR 0 5
13624: PUSH
13625: LD_INT 4
13627: PUSH
13628: LD_INT 5
13630: PUSH
13631: LD_INT 9
13633: PUSH
13634: LD_INT 10
13636: PUSH
13637: LD_INT 6
13639: PUSH
13640: LD_INT 7
13642: PUSH
13643: LD_INT 11
13645: PUSH
13646: EMPTY
13647: LIST
13648: LIST
13649: LIST
13650: LIST
13651: LIST
13652: LIST
13653: LIST
13654: PUSH
13655: LD_INT 27
13657: PUSH
13658: LD_INT 28
13660: PUSH
13661: LD_INT 26
13663: PUSH
13664: LD_INT 30
13666: PUSH
13667: EMPTY
13668: LIST
13669: LIST
13670: LIST
13671: LIST
13672: PUSH
13673: LD_INT 43
13675: PUSH
13676: LD_INT 44
13678: PUSH
13679: LD_INT 46
13681: PUSH
13682: LD_INT 45
13684: PUSH
13685: LD_INT 47
13687: PUSH
13688: LD_INT 49
13690: PUSH
13691: EMPTY
13692: LIST
13693: LIST
13694: LIST
13695: LIST
13696: LIST
13697: LIST
13698: PUSH
13699: EMPTY
13700: LIST
13701: LIST
13702: LIST
13703: PUSH
13704: LD_VAR 0 12
13708: ARRAY
13709: ST_TO_ADDR
// list := list isect fac_list ;
13710: LD_ADDR_VAR 0 5
13714: PUSH
13715: LD_VAR 0 5
13719: PUSH
13720: LD_VAR 0 17
13724: ISECT
13725: ST_TO_ADDR
// if not list then
13726: LD_VAR 0 5
13730: NOT
13731: IFFALSE 13735
// exit ;
13733: GO 14563
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
13735: LD_VAR 0 12
13739: PUSH
13740: LD_INT 3
13742: EQUAL
13743: IFFALSE 13755
13745: PUSH
13746: LD_INT 49
13748: PUSH
13749: LD_VAR 0 5
13753: IN
13754: AND
13755: IFFALSE 13775
13757: PUSH
13758: LD_INT 31
13760: PPUSH
13761: LD_VAR 0 16
13765: PPUSH
13766: CALL_OW 321
13770: PUSH
13771: LD_INT 2
13773: EQUAL
13774: AND
13775: IFFALSE 13835
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
13777: LD_INT 22
13779: PUSH
13780: LD_VAR 0 16
13784: PUSH
13785: EMPTY
13786: LIST
13787: LIST
13788: PUSH
13789: LD_INT 35
13791: PUSH
13792: LD_INT 49
13794: PUSH
13795: EMPTY
13796: LIST
13797: LIST
13798: PUSH
13799: LD_INT 91
13801: PUSH
13802: LD_VAR 0 1
13806: PUSH
13807: LD_INT 10
13809: PUSH
13810: EMPTY
13811: LIST
13812: LIST
13813: LIST
13814: PUSH
13815: EMPTY
13816: LIST
13817: LIST
13818: LIST
13819: PPUSH
13820: CALL_OW 69
13824: NOT
13825: IFFALSE 13835
// weapon := ru_time_lapser ;
13827: LD_ADDR_VAR 0 18
13831: PUSH
13832: LD_INT 49
13834: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
13835: LD_VAR 0 12
13839: PUSH
13840: LD_INT 1
13842: PUSH
13843: LD_INT 2
13845: PUSH
13846: EMPTY
13847: LIST
13848: LIST
13849: IN
13850: IFFALSE 13874
13852: PUSH
13853: LD_INT 11
13855: PUSH
13856: LD_VAR 0 5
13860: IN
13861: IFTRUE 13873
13863: PUSH
13864: LD_INT 30
13866: PUSH
13867: LD_VAR 0 5
13871: IN
13872: OR
13873: AND
13874: IFFALSE 13894
13876: PUSH
13877: LD_INT 6
13879: PPUSH
13880: LD_VAR 0 16
13884: PPUSH
13885: CALL_OW 321
13889: PUSH
13890: LD_INT 2
13892: EQUAL
13893: AND
13894: IFFALSE 14061
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
13896: LD_INT 22
13898: PUSH
13899: LD_VAR 0 16
13903: PUSH
13904: EMPTY
13905: LIST
13906: LIST
13907: PUSH
13908: LD_INT 2
13910: PUSH
13911: LD_INT 35
13913: PUSH
13914: LD_INT 11
13916: PUSH
13917: EMPTY
13918: LIST
13919: LIST
13920: PUSH
13921: LD_INT 35
13923: PUSH
13924: LD_INT 30
13926: PUSH
13927: EMPTY
13928: LIST
13929: LIST
13930: PUSH
13931: EMPTY
13932: LIST
13933: LIST
13934: LIST
13935: PUSH
13936: LD_INT 91
13938: PUSH
13939: LD_VAR 0 1
13943: PUSH
13944: LD_INT 18
13946: PUSH
13947: EMPTY
13948: LIST
13949: LIST
13950: LIST
13951: PUSH
13952: EMPTY
13953: LIST
13954: LIST
13955: LIST
13956: PPUSH
13957: CALL_OW 69
13961: NOT
13962: IFFALSE 14038
13964: PUSH
13965: LD_INT 22
13967: PUSH
13968: LD_VAR 0 16
13972: PUSH
13973: EMPTY
13974: LIST
13975: LIST
13976: PUSH
13977: LD_INT 2
13979: PUSH
13980: LD_INT 30
13982: PUSH
13983: LD_INT 32
13985: PUSH
13986: EMPTY
13987: LIST
13988: LIST
13989: PUSH
13990: LD_INT 30
13992: PUSH
13993: LD_INT 33
13995: PUSH
13996: EMPTY
13997: LIST
13998: LIST
13999: PUSH
14000: EMPTY
14001: LIST
14002: LIST
14003: LIST
14004: PUSH
14005: LD_INT 91
14007: PUSH
14008: LD_VAR 0 1
14012: PUSH
14013: LD_INT 12
14015: PUSH
14016: EMPTY
14017: LIST
14018: LIST
14019: LIST
14020: PUSH
14021: EMPTY
14022: LIST
14023: LIST
14024: LIST
14025: PUSH
14026: EMPTY
14027: LIST
14028: PPUSH
14029: CALL_OW 69
14033: PUSH
14034: LD_INT 2
14036: GREATER
14037: AND
14038: IFFALSE 14061
// weapon := [ us_radar , ar_radar ] [ nat ] ;
14040: LD_ADDR_VAR 0 18
14044: PUSH
14045: LD_INT 11
14047: PUSH
14048: LD_INT 30
14050: PUSH
14051: EMPTY
14052: LIST
14053: LIST
14054: PUSH
14055: LD_VAR 0 12
14059: ARRAY
14060: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
14061: LD_VAR 0 18
14065: NOT
14066: IFFALSE 14086
14068: PUSH
14069: LD_INT 40
14071: PPUSH
14072: LD_VAR 0 16
14076: PPUSH
14077: CALL_OW 321
14081: PUSH
14082: LD_INT 2
14084: EQUAL
14085: AND
14086: IFFALSE 14122
14088: PUSH
14089: LD_INT 7
14091: PUSH
14092: LD_VAR 0 5
14096: IN
14097: IFTRUE 14109
14099: PUSH
14100: LD_INT 28
14102: PUSH
14103: LD_VAR 0 5
14107: IN
14108: OR
14109: IFTRUE 14121
14111: PUSH
14112: LD_INT 45
14114: PUSH
14115: LD_VAR 0 5
14119: IN
14120: OR
14121: AND
14122: IFFALSE 14376
// begin hex := GetHexInfo ( x , y ) ;
14124: LD_ADDR_VAR 0 4
14128: PUSH
14129: LD_VAR 0 10
14133: PPUSH
14134: LD_VAR 0 11
14138: PPUSH
14139: CALL_OW 546
14143: ST_TO_ADDR
// if hex [ 1 ] then
14144: LD_VAR 0 4
14148: PUSH
14149: LD_INT 1
14151: ARRAY
14152: IFFALSE 14156
// exit ;
14154: GO 14563
// height := hex [ 2 ] ;
14156: LD_ADDR_VAR 0 15
14160: PUSH
14161: LD_VAR 0 4
14165: PUSH
14166: LD_INT 2
14168: ARRAY
14169: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
14170: LD_ADDR_VAR 0 14
14174: PUSH
14175: LD_INT 0
14177: PUSH
14178: LD_INT 2
14180: PUSH
14181: LD_INT 3
14183: PUSH
14184: LD_INT 5
14186: PUSH
14187: EMPTY
14188: LIST
14189: LIST
14190: LIST
14191: LIST
14192: ST_TO_ADDR
// for i in tmp do
14193: LD_ADDR_VAR 0 8
14197: PUSH
14198: LD_VAR 0 14
14202: PUSH
14203: FOR_IN
14204: IFFALSE 14374
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
14206: LD_ADDR_VAR 0 9
14210: PUSH
14211: LD_VAR 0 10
14215: PPUSH
14216: LD_VAR 0 8
14220: PPUSH
14221: LD_INT 5
14223: PPUSH
14224: CALL_OW 272
14228: PUSH
14229: LD_VAR 0 11
14233: PPUSH
14234: LD_VAR 0 8
14238: PPUSH
14239: LD_INT 5
14241: PPUSH
14242: CALL_OW 273
14246: PUSH
14247: EMPTY
14248: LIST
14249: LIST
14250: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
14251: LD_VAR 0 9
14255: PUSH
14256: LD_INT 1
14258: ARRAY
14259: PPUSH
14260: LD_VAR 0 9
14264: PUSH
14265: LD_INT 2
14267: ARRAY
14268: PPUSH
14269: CALL_OW 488
14273: IFFALSE 14372
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
14275: LD_ADDR_VAR 0 4
14279: PUSH
14280: LD_VAR 0 9
14284: PUSH
14285: LD_INT 1
14287: ARRAY
14288: PPUSH
14289: LD_VAR 0 9
14293: PUSH
14294: LD_INT 2
14296: ARRAY
14297: PPUSH
14298: CALL_OW 546
14302: ST_TO_ADDR
// if hex [ 1 ] then
14303: LD_VAR 0 4
14307: PUSH
14308: LD_INT 1
14310: ARRAY
14311: IFFALSE 14315
// continue ;
14313: GO 14203
// h := hex [ 2 ] ;
14315: LD_ADDR_VAR 0 13
14319: PUSH
14320: LD_VAR 0 4
14324: PUSH
14325: LD_INT 2
14327: ARRAY
14328: ST_TO_ADDR
// if h + 7 < height then
14329: LD_VAR 0 13
14333: PUSH
14334: LD_INT 7
14336: PLUS
14337: PUSH
14338: LD_VAR 0 15
14342: LESS
14343: IFFALSE 14372
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
14345: LD_ADDR_VAR 0 18
14349: PUSH
14350: LD_INT 7
14352: PUSH
14353: LD_INT 28
14355: PUSH
14356: LD_INT 45
14358: PUSH
14359: EMPTY
14360: LIST
14361: LIST
14362: LIST
14363: PUSH
14364: LD_VAR 0 12
14368: ARRAY
14369: ST_TO_ADDR
// break ;
14370: GO 14374
// end ; end ; end ;
14372: GO 14203
14374: POP
14375: POP
// end ; if not weapon then
14376: LD_VAR 0 18
14380: NOT
14381: IFFALSE 14441
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
14383: LD_ADDR_VAR 0 5
14387: PUSH
14388: LD_VAR 0 5
14392: PUSH
14393: LD_INT 11
14395: PUSH
14396: LD_INT 30
14398: PUSH
14399: LD_INT 49
14401: PUSH
14402: EMPTY
14403: LIST
14404: LIST
14405: LIST
14406: DIFF
14407: ST_TO_ADDR
// if not list then
14408: LD_VAR 0 5
14412: NOT
14413: IFFALSE 14417
// exit ;
14415: GO 14563
// weapon := list [ rand ( 1 , list ) ] ;
14417: LD_ADDR_VAR 0 18
14421: PUSH
14422: LD_VAR 0 5
14426: PUSH
14427: LD_INT 1
14429: PPUSH
14430: LD_VAR 0 5
14434: PPUSH
14435: CALL_OW 12
14439: ARRAY
14440: ST_TO_ADDR
// end ; if weapon then
14441: LD_VAR 0 18
14445: IFFALSE 14563
// begin tmp := CostOfWeapon ( weapon ) ;
14447: LD_ADDR_VAR 0 14
14451: PUSH
14452: LD_VAR 0 18
14456: PPUSH
14457: CALL_OW 451
14461: ST_TO_ADDR
// j := GetBase ( tower ) ;
14462: LD_ADDR_VAR 0 9
14466: PUSH
14467: LD_VAR 0 1
14471: PPUSH
14472: CALL_OW 274
14476: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
14477: LD_VAR 0 9
14481: PPUSH
14482: LD_INT 1
14484: PPUSH
14485: CALL_OW 275
14489: PUSH
14490: LD_VAR 0 14
14494: PUSH
14495: LD_INT 1
14497: ARRAY
14498: GREATEREQUAL
14499: IFFALSE 14525
14501: PUSH
14502: LD_VAR 0 9
14506: PPUSH
14507: LD_INT 2
14509: PPUSH
14510: CALL_OW 275
14514: PUSH
14515: LD_VAR 0 14
14519: PUSH
14520: LD_INT 2
14522: ARRAY
14523: GREATEREQUAL
14524: AND
14525: IFFALSE 14551
14527: PUSH
14528: LD_VAR 0 9
14532: PPUSH
14533: LD_INT 3
14535: PPUSH
14536: CALL_OW 275
14540: PUSH
14541: LD_VAR 0 14
14545: PUSH
14546: LD_INT 3
14548: ARRAY
14549: GREATEREQUAL
14550: AND
14551: IFFALSE 14563
// result := weapon ;
14553: LD_ADDR_VAR 0 3
14557: PUSH
14558: LD_VAR 0 18
14562: ST_TO_ADDR
// end ; end ;
14563: LD_VAR 0 3
14567: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
14568: LD_INT 0
14570: PPUSH
14571: PPUSH
// result := true ;
14572: LD_ADDR_VAR 0 3
14576: PUSH
14577: LD_INT 1
14579: ST_TO_ADDR
// if array1 = array2 then
14580: LD_VAR 0 1
14584: PUSH
14585: LD_VAR 0 2
14589: EQUAL
14590: IFFALSE 14650
// begin for i = 1 to array1 do
14592: LD_ADDR_VAR 0 4
14596: PUSH
14597: DOUBLE
14598: LD_INT 1
14600: DEC
14601: ST_TO_ADDR
14602: LD_VAR 0 1
14606: PUSH
14607: FOR_TO
14608: IFFALSE 14646
// if array1 [ i ] <> array2 [ i ] then
14610: LD_VAR 0 1
14614: PUSH
14615: LD_VAR 0 4
14619: ARRAY
14620: PUSH
14621: LD_VAR 0 2
14625: PUSH
14626: LD_VAR 0 4
14630: ARRAY
14631: NONEQUAL
14632: IFFALSE 14644
// begin result := false ;
14634: LD_ADDR_VAR 0 3
14638: PUSH
14639: LD_INT 0
14641: ST_TO_ADDR
// break ;
14642: GO 14646
// end ;
14644: GO 14607
14646: POP
14647: POP
// end else
14648: GO 14658
// result := false ;
14650: LD_ADDR_VAR 0 3
14654: PUSH
14655: LD_INT 0
14657: ST_TO_ADDR
// end ;
14658: LD_VAR 0 3
14662: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
14663: LD_INT 0
14665: PPUSH
14666: PPUSH
// if not array1 or not array2 then
14667: LD_VAR 0 1
14671: NOT
14672: IFTRUE 14681
14674: PUSH
14675: LD_VAR 0 2
14679: NOT
14680: OR
14681: IFFALSE 14685
// exit ;
14683: GO 14749
// result := true ;
14685: LD_ADDR_VAR 0 3
14689: PUSH
14690: LD_INT 1
14692: ST_TO_ADDR
// for i = 1 to array1 do
14693: LD_ADDR_VAR 0 4
14697: PUSH
14698: DOUBLE
14699: LD_INT 1
14701: DEC
14702: ST_TO_ADDR
14703: LD_VAR 0 1
14707: PUSH
14708: FOR_TO
14709: IFFALSE 14747
// if array1 [ i ] <> array2 [ i ] then
14711: LD_VAR 0 1
14715: PUSH
14716: LD_VAR 0 4
14720: ARRAY
14721: PUSH
14722: LD_VAR 0 2
14726: PUSH
14727: LD_VAR 0 4
14731: ARRAY
14732: NONEQUAL
14733: IFFALSE 14745
// begin result := false ;
14735: LD_ADDR_VAR 0 3
14739: PUSH
14740: LD_INT 0
14742: ST_TO_ADDR
// break ;
14743: GO 14747
// end ;
14745: GO 14708
14747: POP
14748: POP
// end ;
14749: LD_VAR 0 3
14753: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
14754: LD_INT 0
14756: PPUSH
14757: PPUSH
14758: PPUSH
// pom := GetBase ( fac ) ;
14759: LD_ADDR_VAR 0 5
14763: PUSH
14764: LD_VAR 0 1
14768: PPUSH
14769: CALL_OW 274
14773: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
14774: LD_ADDR_VAR 0 4
14778: PUSH
14779: LD_VAR 0 2
14783: PUSH
14784: LD_INT 1
14786: ARRAY
14787: PPUSH
14788: LD_VAR 0 2
14792: PUSH
14793: LD_INT 2
14795: ARRAY
14796: PPUSH
14797: LD_VAR 0 2
14801: PUSH
14802: LD_INT 3
14804: ARRAY
14805: PPUSH
14806: LD_VAR 0 2
14810: PUSH
14811: LD_INT 4
14813: ARRAY
14814: PPUSH
14815: CALL_OW 449
14819: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14820: LD_ADDR_VAR 0 3
14824: PUSH
14825: LD_VAR 0 5
14829: PPUSH
14830: LD_INT 1
14832: PPUSH
14833: CALL_OW 275
14837: PUSH
14838: LD_VAR 0 4
14842: PUSH
14843: LD_INT 1
14845: ARRAY
14846: GREATEREQUAL
14847: IFFALSE 14873
14849: PUSH
14850: LD_VAR 0 5
14854: PPUSH
14855: LD_INT 2
14857: PPUSH
14858: CALL_OW 275
14862: PUSH
14863: LD_VAR 0 4
14867: PUSH
14868: LD_INT 2
14870: ARRAY
14871: GREATEREQUAL
14872: AND
14873: IFFALSE 14899
14875: PUSH
14876: LD_VAR 0 5
14880: PPUSH
14881: LD_INT 3
14883: PPUSH
14884: CALL_OW 275
14888: PUSH
14889: LD_VAR 0 4
14893: PUSH
14894: LD_INT 3
14896: ARRAY
14897: GREATEREQUAL
14898: AND
14899: ST_TO_ADDR
// end ;
14900: LD_VAR 0 3
14904: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
14905: LD_INT 0
14907: PPUSH
14908: PPUSH
14909: PPUSH
14910: PPUSH
// pom := GetBase ( building ) ;
14911: LD_ADDR_VAR 0 3
14915: PUSH
14916: LD_VAR 0 1
14920: PPUSH
14921: CALL_OW 274
14925: ST_TO_ADDR
// if not pom then
14926: LD_VAR 0 3
14930: NOT
14931: IFFALSE 14935
// exit ;
14933: GO 15109
// btype := GetBType ( building ) ;
14935: LD_ADDR_VAR 0 5
14939: PUSH
14940: LD_VAR 0 1
14944: PPUSH
14945: CALL_OW 266
14949: ST_TO_ADDR
// if btype = b_armoury then
14950: LD_VAR 0 5
14954: PUSH
14955: LD_INT 4
14957: EQUAL
14958: IFFALSE 14968
// btype := b_barracks ;
14960: LD_ADDR_VAR 0 5
14964: PUSH
14965: LD_INT 5
14967: ST_TO_ADDR
// if btype = b_depot then
14968: LD_VAR 0 5
14972: PUSH
14973: LD_INT 0
14975: EQUAL
14976: IFFALSE 14986
// btype := b_warehouse ;
14978: LD_ADDR_VAR 0 5
14982: PUSH
14983: LD_INT 1
14985: ST_TO_ADDR
// if btype = b_workshop then
14986: LD_VAR 0 5
14990: PUSH
14991: LD_INT 2
14993: EQUAL
14994: IFFALSE 15004
// btype := b_factory ;
14996: LD_ADDR_VAR 0 5
15000: PUSH
15001: LD_INT 3
15003: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15004: LD_ADDR_VAR 0 4
15008: PUSH
15009: LD_VAR 0 5
15013: PPUSH
15014: LD_VAR 0 1
15018: PPUSH
15019: CALL_OW 248
15023: PPUSH
15024: CALL_OW 450
15028: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15029: LD_ADDR_VAR 0 2
15033: PUSH
15034: LD_VAR 0 3
15038: PPUSH
15039: LD_INT 1
15041: PPUSH
15042: CALL_OW 275
15046: PUSH
15047: LD_VAR 0 4
15051: PUSH
15052: LD_INT 1
15054: ARRAY
15055: GREATEREQUAL
15056: IFFALSE 15082
15058: PUSH
15059: LD_VAR 0 3
15063: PPUSH
15064: LD_INT 2
15066: PPUSH
15067: CALL_OW 275
15071: PUSH
15072: LD_VAR 0 4
15076: PUSH
15077: LD_INT 2
15079: ARRAY
15080: GREATEREQUAL
15081: AND
15082: IFFALSE 15108
15084: PUSH
15085: LD_VAR 0 3
15089: PPUSH
15090: LD_INT 3
15092: PPUSH
15093: CALL_OW 275
15097: PUSH
15098: LD_VAR 0 4
15102: PUSH
15103: LD_INT 3
15105: ARRAY
15106: GREATEREQUAL
15107: AND
15108: ST_TO_ADDR
// end ;
15109: LD_VAR 0 2
15113: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
15114: LD_INT 0
15116: PPUSH
15117: PPUSH
15118: PPUSH
// pom := GetBase ( building ) ;
15119: LD_ADDR_VAR 0 4
15123: PUSH
15124: LD_VAR 0 1
15128: PPUSH
15129: CALL_OW 274
15133: ST_TO_ADDR
// if not pom then
15134: LD_VAR 0 4
15138: NOT
15139: IFFALSE 15143
// exit ;
15141: GO 15248
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15143: LD_ADDR_VAR 0 5
15147: PUSH
15148: LD_VAR 0 2
15152: PPUSH
15153: LD_VAR 0 1
15157: PPUSH
15158: CALL_OW 248
15162: PPUSH
15163: CALL_OW 450
15167: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15168: LD_ADDR_VAR 0 3
15172: PUSH
15173: LD_VAR 0 4
15177: PPUSH
15178: LD_INT 1
15180: PPUSH
15181: CALL_OW 275
15185: PUSH
15186: LD_VAR 0 5
15190: PUSH
15191: LD_INT 1
15193: ARRAY
15194: GREATEREQUAL
15195: IFFALSE 15221
15197: PUSH
15198: LD_VAR 0 4
15202: PPUSH
15203: LD_INT 2
15205: PPUSH
15206: CALL_OW 275
15210: PUSH
15211: LD_VAR 0 5
15215: PUSH
15216: LD_INT 2
15218: ARRAY
15219: GREATEREQUAL
15220: AND
15221: IFFALSE 15247
15223: PUSH
15224: LD_VAR 0 4
15228: PPUSH
15229: LD_INT 3
15231: PPUSH
15232: CALL_OW 275
15236: PUSH
15237: LD_VAR 0 5
15241: PUSH
15242: LD_INT 3
15244: ARRAY
15245: GREATEREQUAL
15246: AND
15247: ST_TO_ADDR
// end ;
15248: LD_VAR 0 3
15252: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
15253: LD_INT 0
15255: PPUSH
15256: PPUSH
15257: PPUSH
15258: PPUSH
15259: PPUSH
15260: PPUSH
15261: PPUSH
15262: PPUSH
15263: PPUSH
15264: PPUSH
15265: PPUSH
// result := false ;
15266: LD_ADDR_VAR 0 8
15270: PUSH
15271: LD_INT 0
15273: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
15274: LD_VAR 0 5
15278: NOT
15279: IFTRUE 15288
15281: PUSH
15282: LD_VAR 0 1
15286: NOT
15287: OR
15288: IFTRUE 15297
15290: PUSH
15291: LD_VAR 0 2
15295: NOT
15296: OR
15297: IFTRUE 15306
15299: PUSH
15300: LD_VAR 0 3
15304: NOT
15305: OR
15306: IFFALSE 15310
// exit ;
15308: GO 16136
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
15310: LD_ADDR_VAR 0 14
15314: PUSH
15315: LD_VAR 0 1
15319: PPUSH
15320: LD_VAR 0 2
15324: PPUSH
15325: LD_VAR 0 3
15329: PPUSH
15330: LD_VAR 0 4
15334: PPUSH
15335: LD_VAR 0 5
15339: PUSH
15340: LD_INT 1
15342: ARRAY
15343: PPUSH
15344: CALL_OW 248
15348: PPUSH
15349: LD_INT 0
15351: PPUSH
15352: CALL 17417 0 6
15356: ST_TO_ADDR
// if not hexes then
15357: LD_VAR 0 14
15361: NOT
15362: IFFALSE 15366
// exit ;
15364: GO 16136
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15366: LD_ADDR_VAR 0 17
15370: PUSH
15371: LD_VAR 0 5
15375: PPUSH
15376: LD_INT 22
15378: PUSH
15379: LD_VAR 0 13
15383: PPUSH
15384: CALL_OW 255
15388: PUSH
15389: EMPTY
15390: LIST
15391: LIST
15392: PUSH
15393: LD_INT 2
15395: PUSH
15396: LD_INT 30
15398: PUSH
15399: LD_INT 0
15401: PUSH
15402: EMPTY
15403: LIST
15404: LIST
15405: PUSH
15406: LD_INT 30
15408: PUSH
15409: LD_INT 1
15411: PUSH
15412: EMPTY
15413: LIST
15414: LIST
15415: PUSH
15416: EMPTY
15417: LIST
15418: LIST
15419: LIST
15420: PUSH
15421: EMPTY
15422: LIST
15423: LIST
15424: PPUSH
15425: CALL_OW 72
15429: ST_TO_ADDR
// for i = 1 to hexes do
15430: LD_ADDR_VAR 0 9
15434: PUSH
15435: DOUBLE
15436: LD_INT 1
15438: DEC
15439: ST_TO_ADDR
15440: LD_VAR 0 14
15444: PUSH
15445: FOR_TO
15446: IFFALSE 16134
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15448: LD_ADDR_VAR 0 13
15452: PUSH
15453: LD_VAR 0 14
15457: PUSH
15458: LD_VAR 0 9
15462: ARRAY
15463: PUSH
15464: LD_INT 1
15466: ARRAY
15467: PPUSH
15468: LD_VAR 0 14
15472: PUSH
15473: LD_VAR 0 9
15477: ARRAY
15478: PUSH
15479: LD_INT 2
15481: ARRAY
15482: PPUSH
15483: CALL_OW 428
15487: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
15488: LD_VAR 0 14
15492: PUSH
15493: LD_VAR 0 9
15497: ARRAY
15498: PUSH
15499: LD_INT 1
15501: ARRAY
15502: PPUSH
15503: LD_VAR 0 14
15507: PUSH
15508: LD_VAR 0 9
15512: ARRAY
15513: PUSH
15514: LD_INT 2
15516: ARRAY
15517: PPUSH
15518: CALL_OW 351
15522: IFTRUE 15561
15524: PUSH
15525: LD_VAR 0 14
15529: PUSH
15530: LD_VAR 0 9
15534: ARRAY
15535: PUSH
15536: LD_INT 1
15538: ARRAY
15539: PPUSH
15540: LD_VAR 0 14
15544: PUSH
15545: LD_VAR 0 9
15549: ARRAY
15550: PUSH
15551: LD_INT 2
15553: ARRAY
15554: PPUSH
15555: CALL_OW 488
15559: NOT
15560: OR
15561: IFTRUE 15578
15563: PUSH
15564: LD_VAR 0 13
15568: PPUSH
15569: CALL_OW 247
15573: PUSH
15574: LD_INT 3
15576: EQUAL
15577: OR
15578: IFFALSE 15584
// exit ;
15580: POP
15581: POP
15582: GO 16136
// if not tmp then
15584: LD_VAR 0 13
15588: NOT
15589: IFFALSE 15593
// continue ;
15591: GO 15445
// result := true ;
15593: LD_ADDR_VAR 0 8
15597: PUSH
15598: LD_INT 1
15600: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
15601: LD_VAR 0 6
15605: IFFALSE 15622
15607: PUSH
15608: LD_VAR 0 13
15612: PPUSH
15613: CALL_OW 247
15617: PUSH
15618: LD_INT 2
15620: EQUAL
15621: AND
15622: IFFALSE 15639
15624: PUSH
15625: LD_VAR 0 13
15629: PPUSH
15630: CALL_OW 263
15634: PUSH
15635: LD_INT 1
15637: EQUAL
15638: AND
15639: IFFALSE 15803
// begin if IsDrivenBy ( tmp ) then
15641: LD_VAR 0 13
15645: PPUSH
15646: CALL_OW 311
15650: IFFALSE 15654
// continue ;
15652: GO 15445
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
15654: LD_VAR 0 6
15658: PPUSH
15659: LD_INT 3
15661: PUSH
15662: LD_INT 60
15664: PUSH
15665: EMPTY
15666: LIST
15667: PUSH
15668: EMPTY
15669: LIST
15670: LIST
15671: PUSH
15672: LD_INT 3
15674: PUSH
15675: LD_INT 55
15677: PUSH
15678: EMPTY
15679: LIST
15680: PUSH
15681: EMPTY
15682: LIST
15683: LIST
15684: PUSH
15685: EMPTY
15686: LIST
15687: LIST
15688: PPUSH
15689: CALL_OW 72
15693: IFFALSE 15801
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
15695: LD_ADDR_VAR 0 18
15699: PUSH
15700: LD_VAR 0 6
15704: PPUSH
15705: LD_INT 3
15707: PUSH
15708: LD_INT 60
15710: PUSH
15711: EMPTY
15712: LIST
15713: PUSH
15714: EMPTY
15715: LIST
15716: LIST
15717: PUSH
15718: LD_INT 3
15720: PUSH
15721: LD_INT 55
15723: PUSH
15724: EMPTY
15725: LIST
15726: PUSH
15727: EMPTY
15728: LIST
15729: LIST
15730: PUSH
15731: EMPTY
15732: LIST
15733: LIST
15734: PPUSH
15735: CALL_OW 72
15739: PUSH
15740: LD_INT 1
15742: ARRAY
15743: ST_TO_ADDR
// if IsInUnit ( driver ) then
15744: LD_VAR 0 18
15748: PPUSH
15749: CALL_OW 310
15753: IFFALSE 15764
// ComExit ( driver ) ;
15755: LD_VAR 0 18
15759: PPUSH
15760: CALL 41407 0 1
// AddComEnterUnit ( driver , tmp ) ;
15764: LD_VAR 0 18
15768: PPUSH
15769: LD_VAR 0 13
15773: PPUSH
15774: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
15778: LD_VAR 0 18
15782: PPUSH
15783: LD_VAR 0 7
15787: PPUSH
15788: CALL_OW 173
// AddComExitVehicle ( driver ) ;
15792: LD_VAR 0 18
15796: PPUSH
15797: CALL_OW 181
// end ; continue ;
15801: GO 15445
// end ; if not cleaners or not tmp in cleaners then
15803: LD_VAR 0 6
15807: NOT
15808: IFTRUE 15823
15810: PUSH
15811: LD_VAR 0 13
15815: PUSH
15816: LD_VAR 0 6
15820: IN
15821: NOT
15822: OR
15823: IFFALSE 16132
// begin if dep then
15825: LD_VAR 0 17
15829: IFFALSE 15965
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
15831: LD_ADDR_VAR 0 16
15835: PUSH
15836: LD_VAR 0 17
15840: PUSH
15841: LD_INT 1
15843: ARRAY
15844: PPUSH
15845: CALL_OW 250
15849: PPUSH
15850: LD_VAR 0 17
15854: PUSH
15855: LD_INT 1
15857: ARRAY
15858: PPUSH
15859: CALL_OW 254
15863: PPUSH
15864: LD_INT 5
15866: PPUSH
15867: CALL_OW 272
15871: PUSH
15872: LD_VAR 0 17
15876: PUSH
15877: LD_INT 1
15879: ARRAY
15880: PPUSH
15881: CALL_OW 251
15885: PPUSH
15886: LD_VAR 0 17
15890: PUSH
15891: LD_INT 1
15893: ARRAY
15894: PPUSH
15895: CALL_OW 254
15899: PPUSH
15900: LD_INT 5
15902: PPUSH
15903: CALL_OW 273
15907: PUSH
15908: EMPTY
15909: LIST
15910: LIST
15911: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
15912: LD_VAR 0 16
15916: PUSH
15917: LD_INT 1
15919: ARRAY
15920: PPUSH
15921: LD_VAR 0 16
15925: PUSH
15926: LD_INT 2
15928: ARRAY
15929: PPUSH
15930: CALL_OW 488
15934: IFFALSE 15965
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
15936: LD_VAR 0 13
15940: PPUSH
15941: LD_VAR 0 16
15945: PUSH
15946: LD_INT 1
15948: ARRAY
15949: PPUSH
15950: LD_VAR 0 16
15954: PUSH
15955: LD_INT 2
15957: ARRAY
15958: PPUSH
15959: CALL_OW 111
// continue ;
15963: GO 15445
// end ; end ; r := GetDir ( tmp ) ;
15965: LD_ADDR_VAR 0 15
15969: PUSH
15970: LD_VAR 0 13
15974: PPUSH
15975: CALL_OW 254
15979: ST_TO_ADDR
// if r = 5 then
15980: LD_VAR 0 15
15984: PUSH
15985: LD_INT 5
15987: EQUAL
15988: IFFALSE 15998
// r := 0 ;
15990: LD_ADDR_VAR 0 15
15994: PUSH
15995: LD_INT 0
15997: ST_TO_ADDR
// for j = r to 5 do
15998: LD_ADDR_VAR 0 10
16002: PUSH
16003: DOUBLE
16004: LD_VAR 0 15
16008: DEC
16009: ST_TO_ADDR
16010: LD_INT 5
16012: PUSH
16013: FOR_TO
16014: IFFALSE 16130
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
16016: LD_ADDR_VAR 0 11
16020: PUSH
16021: LD_VAR 0 13
16025: PPUSH
16026: CALL_OW 250
16030: PPUSH
16031: LD_VAR 0 10
16035: PPUSH
16036: LD_INT 2
16038: PPUSH
16039: CALL_OW 272
16043: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
16044: LD_ADDR_VAR 0 12
16048: PUSH
16049: LD_VAR 0 13
16053: PPUSH
16054: CALL_OW 251
16058: PPUSH
16059: LD_VAR 0 10
16063: PPUSH
16064: LD_INT 2
16066: PPUSH
16067: CALL_OW 273
16071: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
16072: LD_VAR 0 11
16076: PPUSH
16077: LD_VAR 0 12
16081: PPUSH
16082: CALL_OW 488
16086: IFFALSE 16105
16088: PUSH
16089: LD_VAR 0 11
16093: PPUSH
16094: LD_VAR 0 12
16098: PPUSH
16099: CALL_OW 428
16103: NOT
16104: AND
16105: IFFALSE 16128
// begin ComMoveXY ( tmp , _x , _y ) ;
16107: LD_VAR 0 13
16111: PPUSH
16112: LD_VAR 0 11
16116: PPUSH
16117: LD_VAR 0 12
16121: PPUSH
16122: CALL_OW 111
// break ;
16126: GO 16130
// end ; end ;
16128: GO 16013
16130: POP
16131: POP
// end ; end ;
16132: GO 15445
16134: POP
16135: POP
// end ;
16136: LD_VAR 0 8
16140: RET
// export function BuildingTechInvented ( side , btype ) ; begin
16141: LD_INT 0
16143: PPUSH
// result := true ;
16144: LD_ADDR_VAR 0 3
16148: PUSH
16149: LD_INT 1
16151: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
16152: LD_VAR 0 2
16156: PUSH
16157: LD_INT 24
16159: DOUBLE
16160: EQUAL
16161: IFTRUE 16171
16163: LD_INT 33
16165: DOUBLE
16166: EQUAL
16167: IFTRUE 16171
16169: GO 16196
16171: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
16172: LD_ADDR_VAR 0 3
16176: PUSH
16177: LD_INT 32
16179: PPUSH
16180: LD_VAR 0 1
16184: PPUSH
16185: CALL_OW 321
16189: PUSH
16190: LD_INT 2
16192: EQUAL
16193: ST_TO_ADDR
16194: GO 16512
16196: LD_INT 20
16198: DOUBLE
16199: EQUAL
16200: IFTRUE 16204
16202: GO 16229
16204: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
16205: LD_ADDR_VAR 0 3
16209: PUSH
16210: LD_INT 6
16212: PPUSH
16213: LD_VAR 0 1
16217: PPUSH
16218: CALL_OW 321
16222: PUSH
16223: LD_INT 2
16225: EQUAL
16226: ST_TO_ADDR
16227: GO 16512
16229: LD_INT 22
16231: DOUBLE
16232: EQUAL
16233: IFTRUE 16243
16235: LD_INT 36
16237: DOUBLE
16238: EQUAL
16239: IFTRUE 16243
16241: GO 16268
16243: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
16244: LD_ADDR_VAR 0 3
16248: PUSH
16249: LD_INT 15
16251: PPUSH
16252: LD_VAR 0 1
16256: PPUSH
16257: CALL_OW 321
16261: PUSH
16262: LD_INT 2
16264: EQUAL
16265: ST_TO_ADDR
16266: GO 16512
16268: LD_INT 30
16270: DOUBLE
16271: EQUAL
16272: IFTRUE 16276
16274: GO 16301
16276: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
16277: LD_ADDR_VAR 0 3
16281: PUSH
16282: LD_INT 20
16284: PPUSH
16285: LD_VAR 0 1
16289: PPUSH
16290: CALL_OW 321
16294: PUSH
16295: LD_INT 2
16297: EQUAL
16298: ST_TO_ADDR
16299: GO 16512
16301: LD_INT 28
16303: DOUBLE
16304: EQUAL
16305: IFTRUE 16315
16307: LD_INT 21
16309: DOUBLE
16310: EQUAL
16311: IFTRUE 16315
16313: GO 16340
16315: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
16316: LD_ADDR_VAR 0 3
16320: PUSH
16321: LD_INT 21
16323: PPUSH
16324: LD_VAR 0 1
16328: PPUSH
16329: CALL_OW 321
16333: PUSH
16334: LD_INT 2
16336: EQUAL
16337: ST_TO_ADDR
16338: GO 16512
16340: LD_INT 16
16342: DOUBLE
16343: EQUAL
16344: IFTRUE 16348
16346: GO 16373
16348: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
16349: LD_ADDR_VAR 0 3
16353: PUSH
16354: LD_INT 84
16356: PPUSH
16357: LD_VAR 0 1
16361: PPUSH
16362: CALL_OW 321
16366: PUSH
16367: LD_INT 2
16369: EQUAL
16370: ST_TO_ADDR
16371: GO 16512
16373: LD_INT 19
16375: DOUBLE
16376: EQUAL
16377: IFTRUE 16387
16379: LD_INT 23
16381: DOUBLE
16382: EQUAL
16383: IFTRUE 16387
16385: GO 16412
16387: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
16388: LD_ADDR_VAR 0 3
16392: PUSH
16393: LD_INT 83
16395: PPUSH
16396: LD_VAR 0 1
16400: PPUSH
16401: CALL_OW 321
16405: PUSH
16406: LD_INT 2
16408: EQUAL
16409: ST_TO_ADDR
16410: GO 16512
16412: LD_INT 17
16414: DOUBLE
16415: EQUAL
16416: IFTRUE 16420
16418: GO 16445
16420: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
16421: LD_ADDR_VAR 0 3
16425: PUSH
16426: LD_INT 39
16428: PPUSH
16429: LD_VAR 0 1
16433: PPUSH
16434: CALL_OW 321
16438: PUSH
16439: LD_INT 2
16441: EQUAL
16442: ST_TO_ADDR
16443: GO 16512
16445: LD_INT 18
16447: DOUBLE
16448: EQUAL
16449: IFTRUE 16453
16451: GO 16478
16453: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
16454: LD_ADDR_VAR 0 3
16458: PUSH
16459: LD_INT 40
16461: PPUSH
16462: LD_VAR 0 1
16466: PPUSH
16467: CALL_OW 321
16471: PUSH
16472: LD_INT 2
16474: EQUAL
16475: ST_TO_ADDR
16476: GO 16512
16478: LD_INT 27
16480: DOUBLE
16481: EQUAL
16482: IFTRUE 16486
16484: GO 16511
16486: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
16487: LD_ADDR_VAR 0 3
16491: PUSH
16492: LD_INT 35
16494: PPUSH
16495: LD_VAR 0 1
16499: PPUSH
16500: CALL_OW 321
16504: PUSH
16505: LD_INT 2
16507: EQUAL
16508: ST_TO_ADDR
16509: GO 16512
16511: POP
// end ;
16512: LD_VAR 0 3
16516: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
16517: LD_INT 0
16519: PPUSH
16520: PPUSH
16521: PPUSH
16522: PPUSH
16523: PPUSH
16524: PPUSH
16525: PPUSH
16526: PPUSH
16527: PPUSH
16528: PPUSH
16529: PPUSH
// result := false ;
16530: LD_ADDR_VAR 0 6
16534: PUSH
16535: LD_INT 0
16537: ST_TO_ADDR
// if btype = b_depot then
16538: LD_VAR 0 2
16542: PUSH
16543: LD_INT 0
16545: EQUAL
16546: IFFALSE 16558
// begin result := true ;
16548: LD_ADDR_VAR 0 6
16552: PUSH
16553: LD_INT 1
16555: ST_TO_ADDR
// exit ;
16556: GO 17412
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
16558: LD_VAR 0 1
16562: NOT
16563: IFTRUE 16588
16565: PUSH
16566: LD_VAR 0 1
16570: PPUSH
16571: CALL_OW 266
16575: PUSH
16576: LD_INT 0
16578: PUSH
16579: LD_INT 1
16581: PUSH
16582: EMPTY
16583: LIST
16584: LIST
16585: IN
16586: NOT
16587: OR
16588: IFTRUE 16597
16590: PUSH
16591: LD_VAR 0 2
16595: NOT
16596: OR
16597: IFTRUE 16633
16599: PUSH
16600: LD_VAR 0 5
16604: PUSH
16605: LD_INT 0
16607: PUSH
16608: LD_INT 1
16610: PUSH
16611: LD_INT 2
16613: PUSH
16614: LD_INT 3
16616: PUSH
16617: LD_INT 4
16619: PUSH
16620: LD_INT 5
16622: PUSH
16623: EMPTY
16624: LIST
16625: LIST
16626: LIST
16627: LIST
16628: LIST
16629: LIST
16630: IN
16631: NOT
16632: OR
16633: IFTRUE 16652
16635: PUSH
16636: LD_VAR 0 3
16640: PPUSH
16641: LD_VAR 0 4
16645: PPUSH
16646: CALL_OW 488
16650: NOT
16651: OR
16652: IFFALSE 16656
// exit ;
16654: GO 17412
// side := GetSide ( depot ) ;
16656: LD_ADDR_VAR 0 9
16660: PUSH
16661: LD_VAR 0 1
16665: PPUSH
16666: CALL_OW 255
16670: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
16671: LD_VAR 0 9
16675: PPUSH
16676: LD_VAR 0 2
16680: PPUSH
16681: CALL 16141 0 2
16685: NOT
16686: IFFALSE 16690
// exit ;
16688: GO 17412
// pom := GetBase ( depot ) ;
16690: LD_ADDR_VAR 0 10
16694: PUSH
16695: LD_VAR 0 1
16699: PPUSH
16700: CALL_OW 274
16704: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
16705: LD_ADDR_VAR 0 11
16709: PUSH
16710: LD_VAR 0 2
16714: PPUSH
16715: LD_VAR 0 1
16719: PPUSH
16720: CALL_OW 248
16724: PPUSH
16725: CALL_OW 450
16729: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
16730: LD_VAR 0 10
16734: PPUSH
16735: LD_INT 1
16737: PPUSH
16738: CALL_OW 275
16742: PUSH
16743: LD_VAR 0 11
16747: PUSH
16748: LD_INT 1
16750: ARRAY
16751: GREATEREQUAL
16752: IFFALSE 16778
16754: PUSH
16755: LD_VAR 0 10
16759: PPUSH
16760: LD_INT 2
16762: PPUSH
16763: CALL_OW 275
16767: PUSH
16768: LD_VAR 0 11
16772: PUSH
16773: LD_INT 2
16775: ARRAY
16776: GREATEREQUAL
16777: AND
16778: IFFALSE 16804
16780: PUSH
16781: LD_VAR 0 10
16785: PPUSH
16786: LD_INT 3
16788: PPUSH
16789: CALL_OW 275
16793: PUSH
16794: LD_VAR 0 11
16798: PUSH
16799: LD_INT 3
16801: ARRAY
16802: GREATEREQUAL
16803: AND
16804: NOT
16805: IFFALSE 16809
// exit ;
16807: GO 17412
// if GetBType ( depot ) = b_depot then
16809: LD_VAR 0 1
16813: PPUSH
16814: CALL_OW 266
16818: PUSH
16819: LD_INT 0
16821: EQUAL
16822: IFFALSE 16834
// dist := 28 else
16824: LD_ADDR_VAR 0 14
16828: PUSH
16829: LD_INT 28
16831: ST_TO_ADDR
16832: GO 16842
// dist := 36 ;
16834: LD_ADDR_VAR 0 14
16838: PUSH
16839: LD_INT 36
16841: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
16842: LD_VAR 0 1
16846: PPUSH
16847: LD_VAR 0 3
16851: PPUSH
16852: LD_VAR 0 4
16856: PPUSH
16857: CALL_OW 297
16861: PUSH
16862: LD_VAR 0 14
16866: GREATER
16867: IFFALSE 16871
// exit ;
16869: GO 17412
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
16871: LD_ADDR_VAR 0 12
16875: PUSH
16876: LD_VAR 0 2
16880: PPUSH
16881: LD_VAR 0 3
16885: PPUSH
16886: LD_VAR 0 4
16890: PPUSH
16891: LD_VAR 0 5
16895: PPUSH
16896: LD_VAR 0 1
16900: PPUSH
16901: CALL_OW 248
16905: PPUSH
16906: LD_INT 0
16908: PPUSH
16909: CALL 17417 0 6
16913: ST_TO_ADDR
// if not hexes then
16914: LD_VAR 0 12
16918: NOT
16919: IFFALSE 16923
// exit ;
16921: GO 17412
// hex := GetHexInfo ( x , y ) ;
16923: LD_ADDR_VAR 0 15
16927: PUSH
16928: LD_VAR 0 3
16932: PPUSH
16933: LD_VAR 0 4
16937: PPUSH
16938: CALL_OW 546
16942: ST_TO_ADDR
// if hex [ 1 ] then
16943: LD_VAR 0 15
16947: PUSH
16948: LD_INT 1
16950: ARRAY
16951: IFFALSE 16955
// exit ;
16953: GO 17412
// height := hex [ 2 ] ;
16955: LD_ADDR_VAR 0 13
16959: PUSH
16960: LD_VAR 0 15
16964: PUSH
16965: LD_INT 2
16967: ARRAY
16968: ST_TO_ADDR
// for i = 1 to hexes do
16969: LD_ADDR_VAR 0 7
16973: PUSH
16974: DOUBLE
16975: LD_INT 1
16977: DEC
16978: ST_TO_ADDR
16979: LD_VAR 0 12
16983: PUSH
16984: FOR_TO
16985: IFFALSE 17329
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
16987: LD_VAR 0 12
16991: PUSH
16992: LD_VAR 0 7
16996: ARRAY
16997: PUSH
16998: LD_INT 1
17000: ARRAY
17001: PPUSH
17002: LD_VAR 0 12
17006: PUSH
17007: LD_VAR 0 7
17011: ARRAY
17012: PUSH
17013: LD_INT 2
17015: ARRAY
17016: PPUSH
17017: CALL_OW 488
17021: NOT
17022: IFTRUE 17064
17024: PUSH
17025: LD_VAR 0 12
17029: PUSH
17030: LD_VAR 0 7
17034: ARRAY
17035: PUSH
17036: LD_INT 1
17038: ARRAY
17039: PPUSH
17040: LD_VAR 0 12
17044: PUSH
17045: LD_VAR 0 7
17049: ARRAY
17050: PUSH
17051: LD_INT 2
17053: ARRAY
17054: PPUSH
17055: CALL_OW 428
17059: PUSH
17060: LD_INT 0
17062: GREATER
17063: OR
17064: IFTRUE 17102
17066: PUSH
17067: LD_VAR 0 12
17071: PUSH
17072: LD_VAR 0 7
17076: ARRAY
17077: PUSH
17078: LD_INT 1
17080: ARRAY
17081: PPUSH
17082: LD_VAR 0 12
17086: PUSH
17087: LD_VAR 0 7
17091: ARRAY
17092: PUSH
17093: LD_INT 2
17095: ARRAY
17096: PPUSH
17097: CALL_OW 351
17101: OR
17102: IFFALSE 17108
// exit ;
17104: POP
17105: POP
17106: GO 17412
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
17108: LD_ADDR_VAR 0 8
17112: PUSH
17113: LD_VAR 0 12
17117: PUSH
17118: LD_VAR 0 7
17122: ARRAY
17123: PUSH
17124: LD_INT 1
17126: ARRAY
17127: PPUSH
17128: LD_VAR 0 12
17132: PUSH
17133: LD_VAR 0 7
17137: ARRAY
17138: PUSH
17139: LD_INT 2
17141: ARRAY
17142: PPUSH
17143: CALL_OW 546
17147: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
17148: LD_VAR 0 8
17152: PUSH
17153: LD_INT 1
17155: ARRAY
17156: IFTRUE 17178
17158: PUSH
17159: LD_VAR 0 8
17163: PUSH
17164: LD_INT 2
17166: ARRAY
17167: PUSH
17168: LD_VAR 0 13
17172: PUSH
17173: LD_INT 2
17175: PLUS
17176: GREATER
17177: OR
17178: IFTRUE 17200
17180: PUSH
17181: LD_VAR 0 8
17185: PUSH
17186: LD_INT 2
17188: ARRAY
17189: PUSH
17190: LD_VAR 0 13
17194: PUSH
17195: LD_INT 2
17197: MINUS
17198: LESS
17199: OR
17200: IFTRUE 17268
17202: PUSH
17203: LD_VAR 0 8
17207: PUSH
17208: LD_INT 3
17210: ARRAY
17211: PUSH
17212: LD_INT 0
17214: PUSH
17215: LD_INT 8
17217: PUSH
17218: LD_INT 9
17220: PUSH
17221: LD_INT 10
17223: PUSH
17224: LD_INT 11
17226: PUSH
17227: LD_INT 12
17229: PUSH
17230: LD_INT 13
17232: PUSH
17233: LD_INT 16
17235: PUSH
17236: LD_INT 17
17238: PUSH
17239: LD_INT 18
17241: PUSH
17242: LD_INT 19
17244: PUSH
17245: LD_INT 20
17247: PUSH
17248: LD_INT 21
17250: PUSH
17251: EMPTY
17252: LIST
17253: LIST
17254: LIST
17255: LIST
17256: LIST
17257: LIST
17258: LIST
17259: LIST
17260: LIST
17261: LIST
17262: LIST
17263: LIST
17264: LIST
17265: IN
17266: NOT
17267: OR
17268: IFTRUE 17281
17270: PUSH
17271: LD_VAR 0 8
17275: PUSH
17276: LD_INT 5
17278: ARRAY
17279: NOT
17280: OR
17281: IFTRUE 17321
17283: PUSH
17284: LD_VAR 0 8
17288: PUSH
17289: LD_INT 6
17291: ARRAY
17292: PUSH
17293: LD_INT 1
17295: PUSH
17296: LD_INT 2
17298: PUSH
17299: LD_INT 7
17301: PUSH
17302: LD_INT 9
17304: PUSH
17305: LD_INT 10
17307: PUSH
17308: LD_INT 11
17310: PUSH
17311: EMPTY
17312: LIST
17313: LIST
17314: LIST
17315: LIST
17316: LIST
17317: LIST
17318: IN
17319: NOT
17320: OR
17321: IFFALSE 17327
// exit ;
17323: POP
17324: POP
17325: GO 17412
// end ;
17327: GO 16984
17329: POP
17330: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
17331: LD_VAR 0 9
17335: PPUSH
17336: LD_VAR 0 3
17340: PPUSH
17341: LD_VAR 0 4
17345: PPUSH
17346: LD_INT 20
17348: PPUSH
17349: CALL 9231 0 4
17353: PUSH
17354: LD_INT 4
17356: ARRAY
17357: IFFALSE 17361
// exit ;
17359: GO 17412
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
17361: LD_VAR 0 2
17365: PUSH
17366: LD_INT 29
17368: PUSH
17369: LD_INT 30
17371: PUSH
17372: EMPTY
17373: LIST
17374: LIST
17375: IN
17376: IFFALSE 17400
17378: PUSH
17379: LD_VAR 0 3
17383: PPUSH
17384: LD_VAR 0 4
17388: PPUSH
17389: LD_VAR 0 9
17393: PPUSH
17394: CALL_OW 440
17398: NOT
17399: AND
17400: IFFALSE 17404
// exit ;
17402: GO 17412
// result := true ;
17404: LD_ADDR_VAR 0 6
17408: PUSH
17409: LD_INT 1
17411: ST_TO_ADDR
// end ;
17412: LD_VAR 0 6
17416: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
17417: LD_INT 0
17419: PPUSH
17420: PPUSH
17421: PPUSH
17422: PPUSH
17423: PPUSH
17424: PPUSH
17425: PPUSH
17426: PPUSH
17427: PPUSH
17428: PPUSH
17429: PPUSH
17430: PPUSH
17431: PPUSH
17432: PPUSH
17433: PPUSH
17434: PPUSH
17435: PPUSH
17436: PPUSH
17437: PPUSH
17438: PPUSH
17439: PPUSH
17440: PPUSH
17441: PPUSH
17442: PPUSH
17443: PPUSH
17444: PPUSH
17445: PPUSH
17446: PPUSH
17447: PPUSH
17448: PPUSH
17449: PPUSH
17450: PPUSH
17451: PPUSH
17452: PPUSH
17453: PPUSH
17454: PPUSH
17455: PPUSH
17456: PPUSH
17457: PPUSH
17458: PPUSH
17459: PPUSH
17460: PPUSH
17461: PPUSH
17462: PPUSH
17463: PPUSH
17464: PPUSH
17465: PPUSH
17466: PPUSH
17467: PPUSH
17468: PPUSH
17469: PPUSH
17470: PPUSH
17471: PPUSH
17472: PPUSH
17473: PPUSH
17474: PPUSH
17475: PPUSH
17476: PPUSH
// result = [ ] ;
17477: LD_ADDR_VAR 0 7
17481: PUSH
17482: EMPTY
17483: ST_TO_ADDR
// temp_list = [ ] ;
17484: LD_ADDR_VAR 0 9
17488: PUSH
17489: EMPTY
17490: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
17491: LD_VAR 0 4
17495: PUSH
17496: LD_INT 0
17498: PUSH
17499: LD_INT 1
17501: PUSH
17502: LD_INT 2
17504: PUSH
17505: LD_INT 3
17507: PUSH
17508: LD_INT 4
17510: PUSH
17511: LD_INT 5
17513: PUSH
17514: EMPTY
17515: LIST
17516: LIST
17517: LIST
17518: LIST
17519: LIST
17520: LIST
17521: IN
17522: NOT
17523: IFTRUE 17566
17525: PUSH
17526: LD_VAR 0 1
17530: PUSH
17531: LD_INT 0
17533: PUSH
17534: LD_INT 1
17536: PUSH
17537: EMPTY
17538: LIST
17539: LIST
17540: IN
17541: IFFALSE 17565
17543: PUSH
17544: LD_VAR 0 5
17548: PUSH
17549: LD_INT 1
17551: PUSH
17552: LD_INT 2
17554: PUSH
17555: LD_INT 3
17557: PUSH
17558: EMPTY
17559: LIST
17560: LIST
17561: LIST
17562: IN
17563: NOT
17564: AND
17565: OR
17566: IFFALSE 17570
// exit ;
17568: GO 35969
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
17570: LD_VAR 0 1
17574: PUSH
17575: LD_INT 6
17577: PUSH
17578: LD_INT 7
17580: PUSH
17581: LD_INT 8
17583: PUSH
17584: LD_INT 13
17586: PUSH
17587: LD_INT 12
17589: PUSH
17590: LD_INT 15
17592: PUSH
17593: LD_INT 11
17595: PUSH
17596: LD_INT 14
17598: PUSH
17599: LD_INT 10
17601: PUSH
17602: EMPTY
17603: LIST
17604: LIST
17605: LIST
17606: LIST
17607: LIST
17608: LIST
17609: LIST
17610: LIST
17611: LIST
17612: IN
17613: IFFALSE 17623
// btype = b_lab ;
17615: LD_ADDR_VAR 0 1
17619: PUSH
17620: LD_INT 6
17622: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
17623: LD_VAR 0 6
17627: PUSH
17628: LD_INT 0
17630: PUSH
17631: LD_INT 1
17633: PUSH
17634: LD_INT 2
17636: PUSH
17637: EMPTY
17638: LIST
17639: LIST
17640: LIST
17641: IN
17642: NOT
17643: IFTRUE 17711
17645: PUSH
17646: LD_VAR 0 1
17650: PUSH
17651: LD_INT 0
17653: PUSH
17654: LD_INT 1
17656: PUSH
17657: LD_INT 2
17659: PUSH
17660: LD_INT 3
17662: PUSH
17663: LD_INT 6
17665: PUSH
17666: LD_INT 36
17668: PUSH
17669: LD_INT 4
17671: PUSH
17672: LD_INT 5
17674: PUSH
17675: LD_INT 31
17677: PUSH
17678: LD_INT 32
17680: PUSH
17681: LD_INT 33
17683: PUSH
17684: EMPTY
17685: LIST
17686: LIST
17687: LIST
17688: LIST
17689: LIST
17690: LIST
17691: LIST
17692: LIST
17693: LIST
17694: LIST
17695: LIST
17696: IN
17697: NOT
17698: IFFALSE 17710
17700: PUSH
17701: LD_VAR 0 6
17705: PUSH
17706: LD_INT 1
17708: EQUAL
17709: AND
17710: OR
17711: IFTRUE 17743
17713: PUSH
17714: LD_VAR 0 1
17718: PUSH
17719: LD_INT 2
17721: PUSH
17722: LD_INT 3
17724: PUSH
17725: EMPTY
17726: LIST
17727: LIST
17728: IN
17729: NOT
17730: IFFALSE 17742
17732: PUSH
17733: LD_VAR 0 6
17737: PUSH
17738: LD_INT 2
17740: EQUAL
17741: AND
17742: OR
17743: IFFALSE 17753
// mode = 0 ;
17745: LD_ADDR_VAR 0 6
17749: PUSH
17750: LD_INT 0
17752: ST_TO_ADDR
// case mode of 0 :
17753: LD_VAR 0 6
17757: PUSH
17758: LD_INT 0
17760: DOUBLE
17761: EQUAL
17762: IFTRUE 17766
17764: GO 29219
17766: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
17767: LD_ADDR_VAR 0 11
17771: PUSH
17772: LD_INT 0
17774: PUSH
17775: LD_INT 0
17777: PUSH
17778: EMPTY
17779: LIST
17780: LIST
17781: PUSH
17782: LD_INT 0
17784: PUSH
17785: LD_INT 1
17787: NEG
17788: PUSH
17789: EMPTY
17790: LIST
17791: LIST
17792: PUSH
17793: LD_INT 1
17795: PUSH
17796: LD_INT 0
17798: PUSH
17799: EMPTY
17800: LIST
17801: LIST
17802: PUSH
17803: LD_INT 1
17805: PUSH
17806: LD_INT 1
17808: PUSH
17809: EMPTY
17810: LIST
17811: LIST
17812: PUSH
17813: LD_INT 0
17815: PUSH
17816: LD_INT 1
17818: PUSH
17819: EMPTY
17820: LIST
17821: LIST
17822: PUSH
17823: LD_INT 1
17825: NEG
17826: PUSH
17827: LD_INT 0
17829: PUSH
17830: EMPTY
17831: LIST
17832: LIST
17833: PUSH
17834: LD_INT 1
17836: NEG
17837: PUSH
17838: LD_INT 1
17840: NEG
17841: PUSH
17842: EMPTY
17843: LIST
17844: LIST
17845: PUSH
17846: LD_INT 1
17848: NEG
17849: PUSH
17850: LD_INT 2
17852: NEG
17853: PUSH
17854: EMPTY
17855: LIST
17856: LIST
17857: PUSH
17858: LD_INT 0
17860: PUSH
17861: LD_INT 2
17863: NEG
17864: PUSH
17865: EMPTY
17866: LIST
17867: LIST
17868: PUSH
17869: LD_INT 1
17871: PUSH
17872: LD_INT 1
17874: NEG
17875: PUSH
17876: EMPTY
17877: LIST
17878: LIST
17879: PUSH
17880: LD_INT 1
17882: PUSH
17883: LD_INT 2
17885: PUSH
17886: EMPTY
17887: LIST
17888: LIST
17889: PUSH
17890: LD_INT 0
17892: PUSH
17893: LD_INT 2
17895: PUSH
17896: EMPTY
17897: LIST
17898: LIST
17899: PUSH
17900: LD_INT 1
17902: NEG
17903: PUSH
17904: LD_INT 1
17906: PUSH
17907: EMPTY
17908: LIST
17909: LIST
17910: PUSH
17911: LD_INT 1
17913: PUSH
17914: LD_INT 3
17916: PUSH
17917: EMPTY
17918: LIST
17919: LIST
17920: PUSH
17921: LD_INT 0
17923: PUSH
17924: LD_INT 3
17926: PUSH
17927: EMPTY
17928: LIST
17929: LIST
17930: PUSH
17931: LD_INT 1
17933: NEG
17934: PUSH
17935: LD_INT 2
17937: PUSH
17938: EMPTY
17939: LIST
17940: LIST
17941: PUSH
17942: EMPTY
17943: LIST
17944: LIST
17945: LIST
17946: LIST
17947: LIST
17948: LIST
17949: LIST
17950: LIST
17951: LIST
17952: LIST
17953: LIST
17954: LIST
17955: LIST
17956: LIST
17957: LIST
17958: LIST
17959: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
17960: LD_ADDR_VAR 0 12
17964: PUSH
17965: LD_INT 0
17967: PUSH
17968: LD_INT 0
17970: PUSH
17971: EMPTY
17972: LIST
17973: LIST
17974: PUSH
17975: LD_INT 0
17977: PUSH
17978: LD_INT 1
17980: NEG
17981: PUSH
17982: EMPTY
17983: LIST
17984: LIST
17985: PUSH
17986: LD_INT 1
17988: PUSH
17989: LD_INT 0
17991: PUSH
17992: EMPTY
17993: LIST
17994: LIST
17995: PUSH
17996: LD_INT 1
17998: PUSH
17999: LD_INT 1
18001: PUSH
18002: EMPTY
18003: LIST
18004: LIST
18005: PUSH
18006: LD_INT 0
18008: PUSH
18009: LD_INT 1
18011: PUSH
18012: EMPTY
18013: LIST
18014: LIST
18015: PUSH
18016: LD_INT 1
18018: NEG
18019: PUSH
18020: LD_INT 0
18022: PUSH
18023: EMPTY
18024: LIST
18025: LIST
18026: PUSH
18027: LD_INT 1
18029: NEG
18030: PUSH
18031: LD_INT 1
18033: NEG
18034: PUSH
18035: EMPTY
18036: LIST
18037: LIST
18038: PUSH
18039: LD_INT 1
18041: PUSH
18042: LD_INT 1
18044: NEG
18045: PUSH
18046: EMPTY
18047: LIST
18048: LIST
18049: PUSH
18050: LD_INT 2
18052: PUSH
18053: LD_INT 0
18055: PUSH
18056: EMPTY
18057: LIST
18058: LIST
18059: PUSH
18060: LD_INT 2
18062: PUSH
18063: LD_INT 1
18065: PUSH
18066: EMPTY
18067: LIST
18068: LIST
18069: PUSH
18070: LD_INT 1
18072: NEG
18073: PUSH
18074: LD_INT 1
18076: PUSH
18077: EMPTY
18078: LIST
18079: LIST
18080: PUSH
18081: LD_INT 2
18083: NEG
18084: PUSH
18085: LD_INT 0
18087: PUSH
18088: EMPTY
18089: LIST
18090: LIST
18091: PUSH
18092: LD_INT 2
18094: NEG
18095: PUSH
18096: LD_INT 1
18098: NEG
18099: PUSH
18100: EMPTY
18101: LIST
18102: LIST
18103: PUSH
18104: LD_INT 2
18106: NEG
18107: PUSH
18108: LD_INT 1
18110: PUSH
18111: EMPTY
18112: LIST
18113: LIST
18114: PUSH
18115: LD_INT 3
18117: NEG
18118: PUSH
18119: LD_INT 0
18121: PUSH
18122: EMPTY
18123: LIST
18124: LIST
18125: PUSH
18126: LD_INT 3
18128: NEG
18129: PUSH
18130: LD_INT 1
18132: NEG
18133: PUSH
18134: EMPTY
18135: LIST
18136: LIST
18137: PUSH
18138: EMPTY
18139: LIST
18140: LIST
18141: LIST
18142: LIST
18143: LIST
18144: LIST
18145: LIST
18146: LIST
18147: LIST
18148: LIST
18149: LIST
18150: LIST
18151: LIST
18152: LIST
18153: LIST
18154: LIST
18155: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
18156: LD_ADDR_VAR 0 13
18160: PUSH
18161: LD_INT 0
18163: PUSH
18164: LD_INT 0
18166: PUSH
18167: EMPTY
18168: LIST
18169: LIST
18170: PUSH
18171: LD_INT 0
18173: PUSH
18174: LD_INT 1
18176: NEG
18177: PUSH
18178: EMPTY
18179: LIST
18180: LIST
18181: PUSH
18182: LD_INT 1
18184: PUSH
18185: LD_INT 0
18187: PUSH
18188: EMPTY
18189: LIST
18190: LIST
18191: PUSH
18192: LD_INT 1
18194: PUSH
18195: LD_INT 1
18197: PUSH
18198: EMPTY
18199: LIST
18200: LIST
18201: PUSH
18202: LD_INT 0
18204: PUSH
18205: LD_INT 1
18207: PUSH
18208: EMPTY
18209: LIST
18210: LIST
18211: PUSH
18212: LD_INT 1
18214: NEG
18215: PUSH
18216: LD_INT 0
18218: PUSH
18219: EMPTY
18220: LIST
18221: LIST
18222: PUSH
18223: LD_INT 1
18225: NEG
18226: PUSH
18227: LD_INT 1
18229: NEG
18230: PUSH
18231: EMPTY
18232: LIST
18233: LIST
18234: PUSH
18235: LD_INT 1
18237: NEG
18238: PUSH
18239: LD_INT 2
18241: NEG
18242: PUSH
18243: EMPTY
18244: LIST
18245: LIST
18246: PUSH
18247: LD_INT 2
18249: PUSH
18250: LD_INT 1
18252: PUSH
18253: EMPTY
18254: LIST
18255: LIST
18256: PUSH
18257: LD_INT 2
18259: PUSH
18260: LD_INT 2
18262: PUSH
18263: EMPTY
18264: LIST
18265: LIST
18266: PUSH
18267: LD_INT 1
18269: PUSH
18270: LD_INT 2
18272: PUSH
18273: EMPTY
18274: LIST
18275: LIST
18276: PUSH
18277: LD_INT 2
18279: NEG
18280: PUSH
18281: LD_INT 1
18283: NEG
18284: PUSH
18285: EMPTY
18286: LIST
18287: LIST
18288: PUSH
18289: LD_INT 2
18291: NEG
18292: PUSH
18293: LD_INT 2
18295: NEG
18296: PUSH
18297: EMPTY
18298: LIST
18299: LIST
18300: PUSH
18301: LD_INT 2
18303: NEG
18304: PUSH
18305: LD_INT 3
18307: NEG
18308: PUSH
18309: EMPTY
18310: LIST
18311: LIST
18312: PUSH
18313: LD_INT 3
18315: NEG
18316: PUSH
18317: LD_INT 2
18319: NEG
18320: PUSH
18321: EMPTY
18322: LIST
18323: LIST
18324: PUSH
18325: LD_INT 3
18327: NEG
18328: PUSH
18329: LD_INT 3
18331: NEG
18332: PUSH
18333: EMPTY
18334: LIST
18335: LIST
18336: PUSH
18337: EMPTY
18338: LIST
18339: LIST
18340: LIST
18341: LIST
18342: LIST
18343: LIST
18344: LIST
18345: LIST
18346: LIST
18347: LIST
18348: LIST
18349: LIST
18350: LIST
18351: LIST
18352: LIST
18353: LIST
18354: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
18355: LD_ADDR_VAR 0 14
18359: PUSH
18360: LD_INT 0
18362: PUSH
18363: LD_INT 0
18365: PUSH
18366: EMPTY
18367: LIST
18368: LIST
18369: PUSH
18370: LD_INT 0
18372: PUSH
18373: LD_INT 1
18375: NEG
18376: PUSH
18377: EMPTY
18378: LIST
18379: LIST
18380: PUSH
18381: LD_INT 1
18383: PUSH
18384: LD_INT 0
18386: PUSH
18387: EMPTY
18388: LIST
18389: LIST
18390: PUSH
18391: LD_INT 1
18393: PUSH
18394: LD_INT 1
18396: PUSH
18397: EMPTY
18398: LIST
18399: LIST
18400: PUSH
18401: LD_INT 0
18403: PUSH
18404: LD_INT 1
18406: PUSH
18407: EMPTY
18408: LIST
18409: LIST
18410: PUSH
18411: LD_INT 1
18413: NEG
18414: PUSH
18415: LD_INT 0
18417: PUSH
18418: EMPTY
18419: LIST
18420: LIST
18421: PUSH
18422: LD_INT 1
18424: NEG
18425: PUSH
18426: LD_INT 1
18428: NEG
18429: PUSH
18430: EMPTY
18431: LIST
18432: LIST
18433: PUSH
18434: LD_INT 1
18436: NEG
18437: PUSH
18438: LD_INT 2
18440: NEG
18441: PUSH
18442: EMPTY
18443: LIST
18444: LIST
18445: PUSH
18446: LD_INT 0
18448: PUSH
18449: LD_INT 2
18451: NEG
18452: PUSH
18453: EMPTY
18454: LIST
18455: LIST
18456: PUSH
18457: LD_INT 1
18459: PUSH
18460: LD_INT 1
18462: NEG
18463: PUSH
18464: EMPTY
18465: LIST
18466: LIST
18467: PUSH
18468: LD_INT 1
18470: PUSH
18471: LD_INT 2
18473: PUSH
18474: EMPTY
18475: LIST
18476: LIST
18477: PUSH
18478: LD_INT 0
18480: PUSH
18481: LD_INT 2
18483: PUSH
18484: EMPTY
18485: LIST
18486: LIST
18487: PUSH
18488: LD_INT 1
18490: NEG
18491: PUSH
18492: LD_INT 1
18494: PUSH
18495: EMPTY
18496: LIST
18497: LIST
18498: PUSH
18499: LD_INT 1
18501: NEG
18502: PUSH
18503: LD_INT 3
18505: NEG
18506: PUSH
18507: EMPTY
18508: LIST
18509: LIST
18510: PUSH
18511: LD_INT 0
18513: PUSH
18514: LD_INT 3
18516: NEG
18517: PUSH
18518: EMPTY
18519: LIST
18520: LIST
18521: PUSH
18522: LD_INT 1
18524: PUSH
18525: LD_INT 2
18527: NEG
18528: PUSH
18529: EMPTY
18530: LIST
18531: LIST
18532: PUSH
18533: EMPTY
18534: LIST
18535: LIST
18536: LIST
18537: LIST
18538: LIST
18539: LIST
18540: LIST
18541: LIST
18542: LIST
18543: LIST
18544: LIST
18545: LIST
18546: LIST
18547: LIST
18548: LIST
18549: LIST
18550: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
18551: LD_ADDR_VAR 0 15
18555: PUSH
18556: LD_INT 0
18558: PUSH
18559: LD_INT 0
18561: PUSH
18562: EMPTY
18563: LIST
18564: LIST
18565: PUSH
18566: LD_INT 0
18568: PUSH
18569: LD_INT 1
18571: NEG
18572: PUSH
18573: EMPTY
18574: LIST
18575: LIST
18576: PUSH
18577: LD_INT 1
18579: PUSH
18580: LD_INT 0
18582: PUSH
18583: EMPTY
18584: LIST
18585: LIST
18586: PUSH
18587: LD_INT 1
18589: PUSH
18590: LD_INT 1
18592: PUSH
18593: EMPTY
18594: LIST
18595: LIST
18596: PUSH
18597: LD_INT 0
18599: PUSH
18600: LD_INT 1
18602: PUSH
18603: EMPTY
18604: LIST
18605: LIST
18606: PUSH
18607: LD_INT 1
18609: NEG
18610: PUSH
18611: LD_INT 0
18613: PUSH
18614: EMPTY
18615: LIST
18616: LIST
18617: PUSH
18618: LD_INT 1
18620: NEG
18621: PUSH
18622: LD_INT 1
18624: NEG
18625: PUSH
18626: EMPTY
18627: LIST
18628: LIST
18629: PUSH
18630: LD_INT 1
18632: PUSH
18633: LD_INT 1
18635: NEG
18636: PUSH
18637: EMPTY
18638: LIST
18639: LIST
18640: PUSH
18641: LD_INT 2
18643: PUSH
18644: LD_INT 0
18646: PUSH
18647: EMPTY
18648: LIST
18649: LIST
18650: PUSH
18651: LD_INT 2
18653: PUSH
18654: LD_INT 1
18656: PUSH
18657: EMPTY
18658: LIST
18659: LIST
18660: PUSH
18661: LD_INT 1
18663: NEG
18664: PUSH
18665: LD_INT 1
18667: PUSH
18668: EMPTY
18669: LIST
18670: LIST
18671: PUSH
18672: LD_INT 2
18674: NEG
18675: PUSH
18676: LD_INT 0
18678: PUSH
18679: EMPTY
18680: LIST
18681: LIST
18682: PUSH
18683: LD_INT 2
18685: NEG
18686: PUSH
18687: LD_INT 1
18689: NEG
18690: PUSH
18691: EMPTY
18692: LIST
18693: LIST
18694: PUSH
18695: LD_INT 2
18697: PUSH
18698: LD_INT 1
18700: NEG
18701: PUSH
18702: EMPTY
18703: LIST
18704: LIST
18705: PUSH
18706: LD_INT 3
18708: PUSH
18709: LD_INT 0
18711: PUSH
18712: EMPTY
18713: LIST
18714: LIST
18715: PUSH
18716: LD_INT 3
18718: PUSH
18719: LD_INT 1
18721: PUSH
18722: EMPTY
18723: LIST
18724: LIST
18725: PUSH
18726: EMPTY
18727: LIST
18728: LIST
18729: LIST
18730: LIST
18731: LIST
18732: LIST
18733: LIST
18734: LIST
18735: LIST
18736: LIST
18737: LIST
18738: LIST
18739: LIST
18740: LIST
18741: LIST
18742: LIST
18743: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
18744: LD_ADDR_VAR 0 16
18748: PUSH
18749: LD_INT 0
18751: PUSH
18752: LD_INT 0
18754: PUSH
18755: EMPTY
18756: LIST
18757: LIST
18758: PUSH
18759: LD_INT 0
18761: PUSH
18762: LD_INT 1
18764: NEG
18765: PUSH
18766: EMPTY
18767: LIST
18768: LIST
18769: PUSH
18770: LD_INT 1
18772: PUSH
18773: LD_INT 0
18775: PUSH
18776: EMPTY
18777: LIST
18778: LIST
18779: PUSH
18780: LD_INT 1
18782: PUSH
18783: LD_INT 1
18785: PUSH
18786: EMPTY
18787: LIST
18788: LIST
18789: PUSH
18790: LD_INT 0
18792: PUSH
18793: LD_INT 1
18795: PUSH
18796: EMPTY
18797: LIST
18798: LIST
18799: PUSH
18800: LD_INT 1
18802: NEG
18803: PUSH
18804: LD_INT 0
18806: PUSH
18807: EMPTY
18808: LIST
18809: LIST
18810: PUSH
18811: LD_INT 1
18813: NEG
18814: PUSH
18815: LD_INT 1
18817: NEG
18818: PUSH
18819: EMPTY
18820: LIST
18821: LIST
18822: PUSH
18823: LD_INT 1
18825: NEG
18826: PUSH
18827: LD_INT 2
18829: NEG
18830: PUSH
18831: EMPTY
18832: LIST
18833: LIST
18834: PUSH
18835: LD_INT 2
18837: PUSH
18838: LD_INT 1
18840: PUSH
18841: EMPTY
18842: LIST
18843: LIST
18844: PUSH
18845: LD_INT 2
18847: PUSH
18848: LD_INT 2
18850: PUSH
18851: EMPTY
18852: LIST
18853: LIST
18854: PUSH
18855: LD_INT 1
18857: PUSH
18858: LD_INT 2
18860: PUSH
18861: EMPTY
18862: LIST
18863: LIST
18864: PUSH
18865: LD_INT 2
18867: NEG
18868: PUSH
18869: LD_INT 1
18871: NEG
18872: PUSH
18873: EMPTY
18874: LIST
18875: LIST
18876: PUSH
18877: LD_INT 2
18879: NEG
18880: PUSH
18881: LD_INT 2
18883: NEG
18884: PUSH
18885: EMPTY
18886: LIST
18887: LIST
18888: PUSH
18889: LD_INT 3
18891: PUSH
18892: LD_INT 2
18894: PUSH
18895: EMPTY
18896: LIST
18897: LIST
18898: PUSH
18899: LD_INT 3
18901: PUSH
18902: LD_INT 3
18904: PUSH
18905: EMPTY
18906: LIST
18907: LIST
18908: PUSH
18909: LD_INT 2
18911: PUSH
18912: LD_INT 3
18914: PUSH
18915: EMPTY
18916: LIST
18917: LIST
18918: PUSH
18919: EMPTY
18920: LIST
18921: LIST
18922: LIST
18923: LIST
18924: LIST
18925: LIST
18926: LIST
18927: LIST
18928: LIST
18929: LIST
18930: LIST
18931: LIST
18932: LIST
18933: LIST
18934: LIST
18935: LIST
18936: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18937: LD_ADDR_VAR 0 17
18941: PUSH
18942: LD_INT 0
18944: PUSH
18945: LD_INT 0
18947: PUSH
18948: EMPTY
18949: LIST
18950: LIST
18951: PUSH
18952: LD_INT 0
18954: PUSH
18955: LD_INT 1
18957: NEG
18958: PUSH
18959: EMPTY
18960: LIST
18961: LIST
18962: PUSH
18963: LD_INT 1
18965: PUSH
18966: LD_INT 0
18968: PUSH
18969: EMPTY
18970: LIST
18971: LIST
18972: PUSH
18973: LD_INT 1
18975: PUSH
18976: LD_INT 1
18978: PUSH
18979: EMPTY
18980: LIST
18981: LIST
18982: PUSH
18983: LD_INT 0
18985: PUSH
18986: LD_INT 1
18988: PUSH
18989: EMPTY
18990: LIST
18991: LIST
18992: PUSH
18993: LD_INT 1
18995: NEG
18996: PUSH
18997: LD_INT 0
18999: PUSH
19000: EMPTY
19001: LIST
19002: LIST
19003: PUSH
19004: LD_INT 1
19006: NEG
19007: PUSH
19008: LD_INT 1
19010: NEG
19011: PUSH
19012: EMPTY
19013: LIST
19014: LIST
19015: PUSH
19016: LD_INT 1
19018: NEG
19019: PUSH
19020: LD_INT 2
19022: NEG
19023: PUSH
19024: EMPTY
19025: LIST
19026: LIST
19027: PUSH
19028: LD_INT 0
19030: PUSH
19031: LD_INT 2
19033: NEG
19034: PUSH
19035: EMPTY
19036: LIST
19037: LIST
19038: PUSH
19039: LD_INT 1
19041: PUSH
19042: LD_INT 1
19044: NEG
19045: PUSH
19046: EMPTY
19047: LIST
19048: LIST
19049: PUSH
19050: LD_INT 2
19052: PUSH
19053: LD_INT 0
19055: PUSH
19056: EMPTY
19057: LIST
19058: LIST
19059: PUSH
19060: LD_INT 2
19062: PUSH
19063: LD_INT 1
19065: PUSH
19066: EMPTY
19067: LIST
19068: LIST
19069: PUSH
19070: LD_INT 2
19072: PUSH
19073: LD_INT 2
19075: PUSH
19076: EMPTY
19077: LIST
19078: LIST
19079: PUSH
19080: LD_INT 1
19082: PUSH
19083: LD_INT 2
19085: PUSH
19086: EMPTY
19087: LIST
19088: LIST
19089: PUSH
19090: LD_INT 0
19092: PUSH
19093: LD_INT 2
19095: PUSH
19096: EMPTY
19097: LIST
19098: LIST
19099: PUSH
19100: LD_INT 1
19102: NEG
19103: PUSH
19104: LD_INT 1
19106: PUSH
19107: EMPTY
19108: LIST
19109: LIST
19110: PUSH
19111: LD_INT 2
19113: NEG
19114: PUSH
19115: LD_INT 0
19117: PUSH
19118: EMPTY
19119: LIST
19120: LIST
19121: PUSH
19122: LD_INT 2
19124: NEG
19125: PUSH
19126: LD_INT 1
19128: NEG
19129: PUSH
19130: EMPTY
19131: LIST
19132: LIST
19133: PUSH
19134: LD_INT 2
19136: NEG
19137: PUSH
19138: LD_INT 2
19140: NEG
19141: PUSH
19142: EMPTY
19143: LIST
19144: LIST
19145: PUSH
19146: EMPTY
19147: LIST
19148: LIST
19149: LIST
19150: LIST
19151: LIST
19152: LIST
19153: LIST
19154: LIST
19155: LIST
19156: LIST
19157: LIST
19158: LIST
19159: LIST
19160: LIST
19161: LIST
19162: LIST
19163: LIST
19164: LIST
19165: LIST
19166: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19167: LD_ADDR_VAR 0 18
19171: PUSH
19172: LD_INT 0
19174: PUSH
19175: LD_INT 0
19177: PUSH
19178: EMPTY
19179: LIST
19180: LIST
19181: PUSH
19182: LD_INT 0
19184: PUSH
19185: LD_INT 1
19187: NEG
19188: PUSH
19189: EMPTY
19190: LIST
19191: LIST
19192: PUSH
19193: LD_INT 1
19195: PUSH
19196: LD_INT 0
19198: PUSH
19199: EMPTY
19200: LIST
19201: LIST
19202: PUSH
19203: LD_INT 1
19205: PUSH
19206: LD_INT 1
19208: PUSH
19209: EMPTY
19210: LIST
19211: LIST
19212: PUSH
19213: LD_INT 0
19215: PUSH
19216: LD_INT 1
19218: PUSH
19219: EMPTY
19220: LIST
19221: LIST
19222: PUSH
19223: LD_INT 1
19225: NEG
19226: PUSH
19227: LD_INT 0
19229: PUSH
19230: EMPTY
19231: LIST
19232: LIST
19233: PUSH
19234: LD_INT 1
19236: NEG
19237: PUSH
19238: LD_INT 1
19240: NEG
19241: PUSH
19242: EMPTY
19243: LIST
19244: LIST
19245: PUSH
19246: LD_INT 1
19248: NEG
19249: PUSH
19250: LD_INT 2
19252: NEG
19253: PUSH
19254: EMPTY
19255: LIST
19256: LIST
19257: PUSH
19258: LD_INT 0
19260: PUSH
19261: LD_INT 2
19263: NEG
19264: PUSH
19265: EMPTY
19266: LIST
19267: LIST
19268: PUSH
19269: LD_INT 1
19271: PUSH
19272: LD_INT 1
19274: NEG
19275: PUSH
19276: EMPTY
19277: LIST
19278: LIST
19279: PUSH
19280: LD_INT 2
19282: PUSH
19283: LD_INT 0
19285: PUSH
19286: EMPTY
19287: LIST
19288: LIST
19289: PUSH
19290: LD_INT 2
19292: PUSH
19293: LD_INT 1
19295: PUSH
19296: EMPTY
19297: LIST
19298: LIST
19299: PUSH
19300: LD_INT 2
19302: PUSH
19303: LD_INT 2
19305: PUSH
19306: EMPTY
19307: LIST
19308: LIST
19309: PUSH
19310: LD_INT 1
19312: PUSH
19313: LD_INT 2
19315: PUSH
19316: EMPTY
19317: LIST
19318: LIST
19319: PUSH
19320: LD_INT 0
19322: PUSH
19323: LD_INT 2
19325: PUSH
19326: EMPTY
19327: LIST
19328: LIST
19329: PUSH
19330: LD_INT 1
19332: NEG
19333: PUSH
19334: LD_INT 1
19336: PUSH
19337: EMPTY
19338: LIST
19339: LIST
19340: PUSH
19341: LD_INT 2
19343: NEG
19344: PUSH
19345: LD_INT 0
19347: PUSH
19348: EMPTY
19349: LIST
19350: LIST
19351: PUSH
19352: LD_INT 2
19354: NEG
19355: PUSH
19356: LD_INT 1
19358: NEG
19359: PUSH
19360: EMPTY
19361: LIST
19362: LIST
19363: PUSH
19364: LD_INT 2
19366: NEG
19367: PUSH
19368: LD_INT 2
19370: NEG
19371: PUSH
19372: EMPTY
19373: LIST
19374: LIST
19375: PUSH
19376: EMPTY
19377: LIST
19378: LIST
19379: LIST
19380: LIST
19381: LIST
19382: LIST
19383: LIST
19384: LIST
19385: LIST
19386: LIST
19387: LIST
19388: LIST
19389: LIST
19390: LIST
19391: LIST
19392: LIST
19393: LIST
19394: LIST
19395: LIST
19396: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19397: LD_ADDR_VAR 0 19
19401: PUSH
19402: LD_INT 0
19404: PUSH
19405: LD_INT 0
19407: PUSH
19408: EMPTY
19409: LIST
19410: LIST
19411: PUSH
19412: LD_INT 0
19414: PUSH
19415: LD_INT 1
19417: NEG
19418: PUSH
19419: EMPTY
19420: LIST
19421: LIST
19422: PUSH
19423: LD_INT 1
19425: PUSH
19426: LD_INT 0
19428: PUSH
19429: EMPTY
19430: LIST
19431: LIST
19432: PUSH
19433: LD_INT 1
19435: PUSH
19436: LD_INT 1
19438: PUSH
19439: EMPTY
19440: LIST
19441: LIST
19442: PUSH
19443: LD_INT 0
19445: PUSH
19446: LD_INT 1
19448: PUSH
19449: EMPTY
19450: LIST
19451: LIST
19452: PUSH
19453: LD_INT 1
19455: NEG
19456: PUSH
19457: LD_INT 0
19459: PUSH
19460: EMPTY
19461: LIST
19462: LIST
19463: PUSH
19464: LD_INT 1
19466: NEG
19467: PUSH
19468: LD_INT 1
19470: NEG
19471: PUSH
19472: EMPTY
19473: LIST
19474: LIST
19475: PUSH
19476: LD_INT 1
19478: NEG
19479: PUSH
19480: LD_INT 2
19482: NEG
19483: PUSH
19484: EMPTY
19485: LIST
19486: LIST
19487: PUSH
19488: LD_INT 0
19490: PUSH
19491: LD_INT 2
19493: NEG
19494: PUSH
19495: EMPTY
19496: LIST
19497: LIST
19498: PUSH
19499: LD_INT 1
19501: PUSH
19502: LD_INT 1
19504: NEG
19505: PUSH
19506: EMPTY
19507: LIST
19508: LIST
19509: PUSH
19510: LD_INT 2
19512: PUSH
19513: LD_INT 0
19515: PUSH
19516: EMPTY
19517: LIST
19518: LIST
19519: PUSH
19520: LD_INT 2
19522: PUSH
19523: LD_INT 1
19525: PUSH
19526: EMPTY
19527: LIST
19528: LIST
19529: PUSH
19530: LD_INT 2
19532: PUSH
19533: LD_INT 2
19535: PUSH
19536: EMPTY
19537: LIST
19538: LIST
19539: PUSH
19540: LD_INT 1
19542: PUSH
19543: LD_INT 2
19545: PUSH
19546: EMPTY
19547: LIST
19548: LIST
19549: PUSH
19550: LD_INT 0
19552: PUSH
19553: LD_INT 2
19555: PUSH
19556: EMPTY
19557: LIST
19558: LIST
19559: PUSH
19560: LD_INT 1
19562: NEG
19563: PUSH
19564: LD_INT 1
19566: PUSH
19567: EMPTY
19568: LIST
19569: LIST
19570: PUSH
19571: LD_INT 2
19573: NEG
19574: PUSH
19575: LD_INT 0
19577: PUSH
19578: EMPTY
19579: LIST
19580: LIST
19581: PUSH
19582: LD_INT 2
19584: NEG
19585: PUSH
19586: LD_INT 1
19588: NEG
19589: PUSH
19590: EMPTY
19591: LIST
19592: LIST
19593: PUSH
19594: LD_INT 2
19596: NEG
19597: PUSH
19598: LD_INT 2
19600: NEG
19601: PUSH
19602: EMPTY
19603: LIST
19604: LIST
19605: PUSH
19606: EMPTY
19607: LIST
19608: LIST
19609: LIST
19610: LIST
19611: LIST
19612: LIST
19613: LIST
19614: LIST
19615: LIST
19616: LIST
19617: LIST
19618: LIST
19619: LIST
19620: LIST
19621: LIST
19622: LIST
19623: LIST
19624: LIST
19625: LIST
19626: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19627: LD_ADDR_VAR 0 20
19631: PUSH
19632: LD_INT 0
19634: PUSH
19635: LD_INT 0
19637: PUSH
19638: EMPTY
19639: LIST
19640: LIST
19641: PUSH
19642: LD_INT 0
19644: PUSH
19645: LD_INT 1
19647: NEG
19648: PUSH
19649: EMPTY
19650: LIST
19651: LIST
19652: PUSH
19653: LD_INT 1
19655: PUSH
19656: LD_INT 0
19658: PUSH
19659: EMPTY
19660: LIST
19661: LIST
19662: PUSH
19663: LD_INT 1
19665: PUSH
19666: LD_INT 1
19668: PUSH
19669: EMPTY
19670: LIST
19671: LIST
19672: PUSH
19673: LD_INT 0
19675: PUSH
19676: LD_INT 1
19678: PUSH
19679: EMPTY
19680: LIST
19681: LIST
19682: PUSH
19683: LD_INT 1
19685: NEG
19686: PUSH
19687: LD_INT 0
19689: PUSH
19690: EMPTY
19691: LIST
19692: LIST
19693: PUSH
19694: LD_INT 1
19696: NEG
19697: PUSH
19698: LD_INT 1
19700: NEG
19701: PUSH
19702: EMPTY
19703: LIST
19704: LIST
19705: PUSH
19706: LD_INT 1
19708: NEG
19709: PUSH
19710: LD_INT 2
19712: NEG
19713: PUSH
19714: EMPTY
19715: LIST
19716: LIST
19717: PUSH
19718: LD_INT 0
19720: PUSH
19721: LD_INT 2
19723: NEG
19724: PUSH
19725: EMPTY
19726: LIST
19727: LIST
19728: PUSH
19729: LD_INT 1
19731: PUSH
19732: LD_INT 1
19734: NEG
19735: PUSH
19736: EMPTY
19737: LIST
19738: LIST
19739: PUSH
19740: LD_INT 2
19742: PUSH
19743: LD_INT 0
19745: PUSH
19746: EMPTY
19747: LIST
19748: LIST
19749: PUSH
19750: LD_INT 2
19752: PUSH
19753: LD_INT 1
19755: PUSH
19756: EMPTY
19757: LIST
19758: LIST
19759: PUSH
19760: LD_INT 2
19762: PUSH
19763: LD_INT 2
19765: PUSH
19766: EMPTY
19767: LIST
19768: LIST
19769: PUSH
19770: LD_INT 1
19772: PUSH
19773: LD_INT 2
19775: PUSH
19776: EMPTY
19777: LIST
19778: LIST
19779: PUSH
19780: LD_INT 0
19782: PUSH
19783: LD_INT 2
19785: PUSH
19786: EMPTY
19787: LIST
19788: LIST
19789: PUSH
19790: LD_INT 1
19792: NEG
19793: PUSH
19794: LD_INT 1
19796: PUSH
19797: EMPTY
19798: LIST
19799: LIST
19800: PUSH
19801: LD_INT 2
19803: NEG
19804: PUSH
19805: LD_INT 0
19807: PUSH
19808: EMPTY
19809: LIST
19810: LIST
19811: PUSH
19812: LD_INT 2
19814: NEG
19815: PUSH
19816: LD_INT 1
19818: NEG
19819: PUSH
19820: EMPTY
19821: LIST
19822: LIST
19823: PUSH
19824: LD_INT 2
19826: NEG
19827: PUSH
19828: LD_INT 2
19830: NEG
19831: PUSH
19832: EMPTY
19833: LIST
19834: LIST
19835: PUSH
19836: EMPTY
19837: LIST
19838: LIST
19839: LIST
19840: LIST
19841: LIST
19842: LIST
19843: LIST
19844: LIST
19845: LIST
19846: LIST
19847: LIST
19848: LIST
19849: LIST
19850: LIST
19851: LIST
19852: LIST
19853: LIST
19854: LIST
19855: LIST
19856: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19857: LD_ADDR_VAR 0 21
19861: PUSH
19862: LD_INT 0
19864: PUSH
19865: LD_INT 0
19867: PUSH
19868: EMPTY
19869: LIST
19870: LIST
19871: PUSH
19872: LD_INT 0
19874: PUSH
19875: LD_INT 1
19877: NEG
19878: PUSH
19879: EMPTY
19880: LIST
19881: LIST
19882: PUSH
19883: LD_INT 1
19885: PUSH
19886: LD_INT 0
19888: PUSH
19889: EMPTY
19890: LIST
19891: LIST
19892: PUSH
19893: LD_INT 1
19895: PUSH
19896: LD_INT 1
19898: PUSH
19899: EMPTY
19900: LIST
19901: LIST
19902: PUSH
19903: LD_INT 0
19905: PUSH
19906: LD_INT 1
19908: PUSH
19909: EMPTY
19910: LIST
19911: LIST
19912: PUSH
19913: LD_INT 1
19915: NEG
19916: PUSH
19917: LD_INT 0
19919: PUSH
19920: EMPTY
19921: LIST
19922: LIST
19923: PUSH
19924: LD_INT 1
19926: NEG
19927: PUSH
19928: LD_INT 1
19930: NEG
19931: PUSH
19932: EMPTY
19933: LIST
19934: LIST
19935: PUSH
19936: LD_INT 1
19938: NEG
19939: PUSH
19940: LD_INT 2
19942: NEG
19943: PUSH
19944: EMPTY
19945: LIST
19946: LIST
19947: PUSH
19948: LD_INT 0
19950: PUSH
19951: LD_INT 2
19953: NEG
19954: PUSH
19955: EMPTY
19956: LIST
19957: LIST
19958: PUSH
19959: LD_INT 1
19961: PUSH
19962: LD_INT 1
19964: NEG
19965: PUSH
19966: EMPTY
19967: LIST
19968: LIST
19969: PUSH
19970: LD_INT 2
19972: PUSH
19973: LD_INT 0
19975: PUSH
19976: EMPTY
19977: LIST
19978: LIST
19979: PUSH
19980: LD_INT 2
19982: PUSH
19983: LD_INT 1
19985: PUSH
19986: EMPTY
19987: LIST
19988: LIST
19989: PUSH
19990: LD_INT 2
19992: PUSH
19993: LD_INT 2
19995: PUSH
19996: EMPTY
19997: LIST
19998: LIST
19999: PUSH
20000: LD_INT 1
20002: PUSH
20003: LD_INT 2
20005: PUSH
20006: EMPTY
20007: LIST
20008: LIST
20009: PUSH
20010: LD_INT 0
20012: PUSH
20013: LD_INT 2
20015: PUSH
20016: EMPTY
20017: LIST
20018: LIST
20019: PUSH
20020: LD_INT 1
20022: NEG
20023: PUSH
20024: LD_INT 1
20026: PUSH
20027: EMPTY
20028: LIST
20029: LIST
20030: PUSH
20031: LD_INT 2
20033: NEG
20034: PUSH
20035: LD_INT 0
20037: PUSH
20038: EMPTY
20039: LIST
20040: LIST
20041: PUSH
20042: LD_INT 2
20044: NEG
20045: PUSH
20046: LD_INT 1
20048: NEG
20049: PUSH
20050: EMPTY
20051: LIST
20052: LIST
20053: PUSH
20054: LD_INT 2
20056: NEG
20057: PUSH
20058: LD_INT 2
20060: NEG
20061: PUSH
20062: EMPTY
20063: LIST
20064: LIST
20065: PUSH
20066: EMPTY
20067: LIST
20068: LIST
20069: LIST
20070: LIST
20071: LIST
20072: LIST
20073: LIST
20074: LIST
20075: LIST
20076: LIST
20077: LIST
20078: LIST
20079: LIST
20080: LIST
20081: LIST
20082: LIST
20083: LIST
20084: LIST
20085: LIST
20086: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20087: LD_ADDR_VAR 0 22
20091: PUSH
20092: LD_INT 0
20094: PUSH
20095: LD_INT 0
20097: PUSH
20098: EMPTY
20099: LIST
20100: LIST
20101: PUSH
20102: LD_INT 0
20104: PUSH
20105: LD_INT 1
20107: NEG
20108: PUSH
20109: EMPTY
20110: LIST
20111: LIST
20112: PUSH
20113: LD_INT 1
20115: PUSH
20116: LD_INT 0
20118: PUSH
20119: EMPTY
20120: LIST
20121: LIST
20122: PUSH
20123: LD_INT 1
20125: PUSH
20126: LD_INT 1
20128: PUSH
20129: EMPTY
20130: LIST
20131: LIST
20132: PUSH
20133: LD_INT 0
20135: PUSH
20136: LD_INT 1
20138: PUSH
20139: EMPTY
20140: LIST
20141: LIST
20142: PUSH
20143: LD_INT 1
20145: NEG
20146: PUSH
20147: LD_INT 0
20149: PUSH
20150: EMPTY
20151: LIST
20152: LIST
20153: PUSH
20154: LD_INT 1
20156: NEG
20157: PUSH
20158: LD_INT 1
20160: NEG
20161: PUSH
20162: EMPTY
20163: LIST
20164: LIST
20165: PUSH
20166: LD_INT 1
20168: NEG
20169: PUSH
20170: LD_INT 2
20172: NEG
20173: PUSH
20174: EMPTY
20175: LIST
20176: LIST
20177: PUSH
20178: LD_INT 0
20180: PUSH
20181: LD_INT 2
20183: NEG
20184: PUSH
20185: EMPTY
20186: LIST
20187: LIST
20188: PUSH
20189: LD_INT 1
20191: PUSH
20192: LD_INT 1
20194: NEG
20195: PUSH
20196: EMPTY
20197: LIST
20198: LIST
20199: PUSH
20200: LD_INT 2
20202: PUSH
20203: LD_INT 0
20205: PUSH
20206: EMPTY
20207: LIST
20208: LIST
20209: PUSH
20210: LD_INT 2
20212: PUSH
20213: LD_INT 1
20215: PUSH
20216: EMPTY
20217: LIST
20218: LIST
20219: PUSH
20220: LD_INT 2
20222: PUSH
20223: LD_INT 2
20225: PUSH
20226: EMPTY
20227: LIST
20228: LIST
20229: PUSH
20230: LD_INT 1
20232: PUSH
20233: LD_INT 2
20235: PUSH
20236: EMPTY
20237: LIST
20238: LIST
20239: PUSH
20240: LD_INT 0
20242: PUSH
20243: LD_INT 2
20245: PUSH
20246: EMPTY
20247: LIST
20248: LIST
20249: PUSH
20250: LD_INT 1
20252: NEG
20253: PUSH
20254: LD_INT 1
20256: PUSH
20257: EMPTY
20258: LIST
20259: LIST
20260: PUSH
20261: LD_INT 2
20263: NEG
20264: PUSH
20265: LD_INT 0
20267: PUSH
20268: EMPTY
20269: LIST
20270: LIST
20271: PUSH
20272: LD_INT 2
20274: NEG
20275: PUSH
20276: LD_INT 1
20278: NEG
20279: PUSH
20280: EMPTY
20281: LIST
20282: LIST
20283: PUSH
20284: LD_INT 2
20286: NEG
20287: PUSH
20288: LD_INT 2
20290: NEG
20291: PUSH
20292: EMPTY
20293: LIST
20294: LIST
20295: PUSH
20296: EMPTY
20297: LIST
20298: LIST
20299: LIST
20300: LIST
20301: LIST
20302: LIST
20303: LIST
20304: LIST
20305: LIST
20306: LIST
20307: LIST
20308: LIST
20309: LIST
20310: LIST
20311: LIST
20312: LIST
20313: LIST
20314: LIST
20315: LIST
20316: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
20317: LD_ADDR_VAR 0 23
20321: PUSH
20322: LD_INT 0
20324: PUSH
20325: LD_INT 0
20327: PUSH
20328: EMPTY
20329: LIST
20330: LIST
20331: PUSH
20332: LD_INT 0
20334: PUSH
20335: LD_INT 1
20337: NEG
20338: PUSH
20339: EMPTY
20340: LIST
20341: LIST
20342: PUSH
20343: LD_INT 1
20345: PUSH
20346: LD_INT 0
20348: PUSH
20349: EMPTY
20350: LIST
20351: LIST
20352: PUSH
20353: LD_INT 1
20355: PUSH
20356: LD_INT 1
20358: PUSH
20359: EMPTY
20360: LIST
20361: LIST
20362: PUSH
20363: LD_INT 0
20365: PUSH
20366: LD_INT 1
20368: PUSH
20369: EMPTY
20370: LIST
20371: LIST
20372: PUSH
20373: LD_INT 1
20375: NEG
20376: PUSH
20377: LD_INT 0
20379: PUSH
20380: EMPTY
20381: LIST
20382: LIST
20383: PUSH
20384: LD_INT 1
20386: NEG
20387: PUSH
20388: LD_INT 1
20390: NEG
20391: PUSH
20392: EMPTY
20393: LIST
20394: LIST
20395: PUSH
20396: LD_INT 1
20398: NEG
20399: PUSH
20400: LD_INT 2
20402: NEG
20403: PUSH
20404: EMPTY
20405: LIST
20406: LIST
20407: PUSH
20408: LD_INT 0
20410: PUSH
20411: LD_INT 2
20413: NEG
20414: PUSH
20415: EMPTY
20416: LIST
20417: LIST
20418: PUSH
20419: LD_INT 1
20421: PUSH
20422: LD_INT 1
20424: NEG
20425: PUSH
20426: EMPTY
20427: LIST
20428: LIST
20429: PUSH
20430: LD_INT 2
20432: PUSH
20433: LD_INT 0
20435: PUSH
20436: EMPTY
20437: LIST
20438: LIST
20439: PUSH
20440: LD_INT 2
20442: PUSH
20443: LD_INT 1
20445: PUSH
20446: EMPTY
20447: LIST
20448: LIST
20449: PUSH
20450: LD_INT 2
20452: PUSH
20453: LD_INT 2
20455: PUSH
20456: EMPTY
20457: LIST
20458: LIST
20459: PUSH
20460: LD_INT 1
20462: PUSH
20463: LD_INT 2
20465: PUSH
20466: EMPTY
20467: LIST
20468: LIST
20469: PUSH
20470: LD_INT 0
20472: PUSH
20473: LD_INT 2
20475: PUSH
20476: EMPTY
20477: LIST
20478: LIST
20479: PUSH
20480: LD_INT 1
20482: NEG
20483: PUSH
20484: LD_INT 1
20486: PUSH
20487: EMPTY
20488: LIST
20489: LIST
20490: PUSH
20491: LD_INT 2
20493: NEG
20494: PUSH
20495: LD_INT 0
20497: PUSH
20498: EMPTY
20499: LIST
20500: LIST
20501: PUSH
20502: LD_INT 2
20504: NEG
20505: PUSH
20506: LD_INT 1
20508: NEG
20509: PUSH
20510: EMPTY
20511: LIST
20512: LIST
20513: PUSH
20514: LD_INT 2
20516: NEG
20517: PUSH
20518: LD_INT 2
20520: NEG
20521: PUSH
20522: EMPTY
20523: LIST
20524: LIST
20525: PUSH
20526: LD_INT 2
20528: NEG
20529: PUSH
20530: LD_INT 3
20532: NEG
20533: PUSH
20534: EMPTY
20535: LIST
20536: LIST
20537: PUSH
20538: LD_INT 1
20540: NEG
20541: PUSH
20542: LD_INT 3
20544: NEG
20545: PUSH
20546: EMPTY
20547: LIST
20548: LIST
20549: PUSH
20550: LD_INT 1
20552: PUSH
20553: LD_INT 2
20555: NEG
20556: PUSH
20557: EMPTY
20558: LIST
20559: LIST
20560: PUSH
20561: LD_INT 2
20563: PUSH
20564: LD_INT 1
20566: NEG
20567: PUSH
20568: EMPTY
20569: LIST
20570: LIST
20571: PUSH
20572: EMPTY
20573: LIST
20574: LIST
20575: LIST
20576: LIST
20577: LIST
20578: LIST
20579: LIST
20580: LIST
20581: LIST
20582: LIST
20583: LIST
20584: LIST
20585: LIST
20586: LIST
20587: LIST
20588: LIST
20589: LIST
20590: LIST
20591: LIST
20592: LIST
20593: LIST
20594: LIST
20595: LIST
20596: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
20597: LD_ADDR_VAR 0 24
20601: PUSH
20602: LD_INT 0
20604: PUSH
20605: LD_INT 0
20607: PUSH
20608: EMPTY
20609: LIST
20610: LIST
20611: PUSH
20612: LD_INT 0
20614: PUSH
20615: LD_INT 1
20617: NEG
20618: PUSH
20619: EMPTY
20620: LIST
20621: LIST
20622: PUSH
20623: LD_INT 1
20625: PUSH
20626: LD_INT 0
20628: PUSH
20629: EMPTY
20630: LIST
20631: LIST
20632: PUSH
20633: LD_INT 1
20635: PUSH
20636: LD_INT 1
20638: PUSH
20639: EMPTY
20640: LIST
20641: LIST
20642: PUSH
20643: LD_INT 0
20645: PUSH
20646: LD_INT 1
20648: PUSH
20649: EMPTY
20650: LIST
20651: LIST
20652: PUSH
20653: LD_INT 1
20655: NEG
20656: PUSH
20657: LD_INT 0
20659: PUSH
20660: EMPTY
20661: LIST
20662: LIST
20663: PUSH
20664: LD_INT 1
20666: NEG
20667: PUSH
20668: LD_INT 1
20670: NEG
20671: PUSH
20672: EMPTY
20673: LIST
20674: LIST
20675: PUSH
20676: LD_INT 1
20678: NEG
20679: PUSH
20680: LD_INT 2
20682: NEG
20683: PUSH
20684: EMPTY
20685: LIST
20686: LIST
20687: PUSH
20688: LD_INT 0
20690: PUSH
20691: LD_INT 2
20693: NEG
20694: PUSH
20695: EMPTY
20696: LIST
20697: LIST
20698: PUSH
20699: LD_INT 1
20701: PUSH
20702: LD_INT 1
20704: NEG
20705: PUSH
20706: EMPTY
20707: LIST
20708: LIST
20709: PUSH
20710: LD_INT 2
20712: PUSH
20713: LD_INT 0
20715: PUSH
20716: EMPTY
20717: LIST
20718: LIST
20719: PUSH
20720: LD_INT 2
20722: PUSH
20723: LD_INT 1
20725: PUSH
20726: EMPTY
20727: LIST
20728: LIST
20729: PUSH
20730: LD_INT 2
20732: PUSH
20733: LD_INT 2
20735: PUSH
20736: EMPTY
20737: LIST
20738: LIST
20739: PUSH
20740: LD_INT 1
20742: PUSH
20743: LD_INT 2
20745: PUSH
20746: EMPTY
20747: LIST
20748: LIST
20749: PUSH
20750: LD_INT 0
20752: PUSH
20753: LD_INT 2
20755: PUSH
20756: EMPTY
20757: LIST
20758: LIST
20759: PUSH
20760: LD_INT 1
20762: NEG
20763: PUSH
20764: LD_INT 1
20766: PUSH
20767: EMPTY
20768: LIST
20769: LIST
20770: PUSH
20771: LD_INT 2
20773: NEG
20774: PUSH
20775: LD_INT 0
20777: PUSH
20778: EMPTY
20779: LIST
20780: LIST
20781: PUSH
20782: LD_INT 2
20784: NEG
20785: PUSH
20786: LD_INT 1
20788: NEG
20789: PUSH
20790: EMPTY
20791: LIST
20792: LIST
20793: PUSH
20794: LD_INT 2
20796: NEG
20797: PUSH
20798: LD_INT 2
20800: NEG
20801: PUSH
20802: EMPTY
20803: LIST
20804: LIST
20805: PUSH
20806: LD_INT 1
20808: PUSH
20809: LD_INT 2
20811: NEG
20812: PUSH
20813: EMPTY
20814: LIST
20815: LIST
20816: PUSH
20817: LD_INT 2
20819: PUSH
20820: LD_INT 1
20822: NEG
20823: PUSH
20824: EMPTY
20825: LIST
20826: LIST
20827: PUSH
20828: LD_INT 3
20830: PUSH
20831: LD_INT 1
20833: PUSH
20834: EMPTY
20835: LIST
20836: LIST
20837: PUSH
20838: LD_INT 3
20840: PUSH
20841: LD_INT 2
20843: PUSH
20844: EMPTY
20845: LIST
20846: LIST
20847: PUSH
20848: EMPTY
20849: LIST
20850: LIST
20851: LIST
20852: LIST
20853: LIST
20854: LIST
20855: LIST
20856: LIST
20857: LIST
20858: LIST
20859: LIST
20860: LIST
20861: LIST
20862: LIST
20863: LIST
20864: LIST
20865: LIST
20866: LIST
20867: LIST
20868: LIST
20869: LIST
20870: LIST
20871: LIST
20872: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
20873: LD_ADDR_VAR 0 25
20877: PUSH
20878: LD_INT 0
20880: PUSH
20881: LD_INT 0
20883: PUSH
20884: EMPTY
20885: LIST
20886: LIST
20887: PUSH
20888: LD_INT 0
20890: PUSH
20891: LD_INT 1
20893: NEG
20894: PUSH
20895: EMPTY
20896: LIST
20897: LIST
20898: PUSH
20899: LD_INT 1
20901: PUSH
20902: LD_INT 0
20904: PUSH
20905: EMPTY
20906: LIST
20907: LIST
20908: PUSH
20909: LD_INT 1
20911: PUSH
20912: LD_INT 1
20914: PUSH
20915: EMPTY
20916: LIST
20917: LIST
20918: PUSH
20919: LD_INT 0
20921: PUSH
20922: LD_INT 1
20924: PUSH
20925: EMPTY
20926: LIST
20927: LIST
20928: PUSH
20929: LD_INT 1
20931: NEG
20932: PUSH
20933: LD_INT 0
20935: PUSH
20936: EMPTY
20937: LIST
20938: LIST
20939: PUSH
20940: LD_INT 1
20942: NEG
20943: PUSH
20944: LD_INT 1
20946: NEG
20947: PUSH
20948: EMPTY
20949: LIST
20950: LIST
20951: PUSH
20952: LD_INT 1
20954: NEG
20955: PUSH
20956: LD_INT 2
20958: NEG
20959: PUSH
20960: EMPTY
20961: LIST
20962: LIST
20963: PUSH
20964: LD_INT 0
20966: PUSH
20967: LD_INT 2
20969: NEG
20970: PUSH
20971: EMPTY
20972: LIST
20973: LIST
20974: PUSH
20975: LD_INT 1
20977: PUSH
20978: LD_INT 1
20980: NEG
20981: PUSH
20982: EMPTY
20983: LIST
20984: LIST
20985: PUSH
20986: LD_INT 2
20988: PUSH
20989: LD_INT 0
20991: PUSH
20992: EMPTY
20993: LIST
20994: LIST
20995: PUSH
20996: LD_INT 2
20998: PUSH
20999: LD_INT 1
21001: PUSH
21002: EMPTY
21003: LIST
21004: LIST
21005: PUSH
21006: LD_INT 2
21008: PUSH
21009: LD_INT 2
21011: PUSH
21012: EMPTY
21013: LIST
21014: LIST
21015: PUSH
21016: LD_INT 1
21018: PUSH
21019: LD_INT 2
21021: PUSH
21022: EMPTY
21023: LIST
21024: LIST
21025: PUSH
21026: LD_INT 0
21028: PUSH
21029: LD_INT 2
21031: PUSH
21032: EMPTY
21033: LIST
21034: LIST
21035: PUSH
21036: LD_INT 1
21038: NEG
21039: PUSH
21040: LD_INT 1
21042: PUSH
21043: EMPTY
21044: LIST
21045: LIST
21046: PUSH
21047: LD_INT 2
21049: NEG
21050: PUSH
21051: LD_INT 0
21053: PUSH
21054: EMPTY
21055: LIST
21056: LIST
21057: PUSH
21058: LD_INT 2
21060: NEG
21061: PUSH
21062: LD_INT 1
21064: NEG
21065: PUSH
21066: EMPTY
21067: LIST
21068: LIST
21069: PUSH
21070: LD_INT 2
21072: NEG
21073: PUSH
21074: LD_INT 2
21076: NEG
21077: PUSH
21078: EMPTY
21079: LIST
21080: LIST
21081: PUSH
21082: LD_INT 3
21084: PUSH
21085: LD_INT 1
21087: PUSH
21088: EMPTY
21089: LIST
21090: LIST
21091: PUSH
21092: LD_INT 3
21094: PUSH
21095: LD_INT 2
21097: PUSH
21098: EMPTY
21099: LIST
21100: LIST
21101: PUSH
21102: LD_INT 2
21104: PUSH
21105: LD_INT 3
21107: PUSH
21108: EMPTY
21109: LIST
21110: LIST
21111: PUSH
21112: LD_INT 1
21114: PUSH
21115: LD_INT 3
21117: PUSH
21118: EMPTY
21119: LIST
21120: LIST
21121: PUSH
21122: EMPTY
21123: LIST
21124: LIST
21125: LIST
21126: LIST
21127: LIST
21128: LIST
21129: LIST
21130: LIST
21131: LIST
21132: LIST
21133: LIST
21134: LIST
21135: LIST
21136: LIST
21137: LIST
21138: LIST
21139: LIST
21140: LIST
21141: LIST
21142: LIST
21143: LIST
21144: LIST
21145: LIST
21146: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
21147: LD_ADDR_VAR 0 26
21151: PUSH
21152: LD_INT 0
21154: PUSH
21155: LD_INT 0
21157: PUSH
21158: EMPTY
21159: LIST
21160: LIST
21161: PUSH
21162: LD_INT 0
21164: PUSH
21165: LD_INT 1
21167: NEG
21168: PUSH
21169: EMPTY
21170: LIST
21171: LIST
21172: PUSH
21173: LD_INT 1
21175: PUSH
21176: LD_INT 0
21178: PUSH
21179: EMPTY
21180: LIST
21181: LIST
21182: PUSH
21183: LD_INT 1
21185: PUSH
21186: LD_INT 1
21188: PUSH
21189: EMPTY
21190: LIST
21191: LIST
21192: PUSH
21193: LD_INT 0
21195: PUSH
21196: LD_INT 1
21198: PUSH
21199: EMPTY
21200: LIST
21201: LIST
21202: PUSH
21203: LD_INT 1
21205: NEG
21206: PUSH
21207: LD_INT 0
21209: PUSH
21210: EMPTY
21211: LIST
21212: LIST
21213: PUSH
21214: LD_INT 1
21216: NEG
21217: PUSH
21218: LD_INT 1
21220: NEG
21221: PUSH
21222: EMPTY
21223: LIST
21224: LIST
21225: PUSH
21226: LD_INT 1
21228: NEG
21229: PUSH
21230: LD_INT 2
21232: NEG
21233: PUSH
21234: EMPTY
21235: LIST
21236: LIST
21237: PUSH
21238: LD_INT 0
21240: PUSH
21241: LD_INT 2
21243: NEG
21244: PUSH
21245: EMPTY
21246: LIST
21247: LIST
21248: PUSH
21249: LD_INT 1
21251: PUSH
21252: LD_INT 1
21254: NEG
21255: PUSH
21256: EMPTY
21257: LIST
21258: LIST
21259: PUSH
21260: LD_INT 2
21262: PUSH
21263: LD_INT 0
21265: PUSH
21266: EMPTY
21267: LIST
21268: LIST
21269: PUSH
21270: LD_INT 2
21272: PUSH
21273: LD_INT 1
21275: PUSH
21276: EMPTY
21277: LIST
21278: LIST
21279: PUSH
21280: LD_INT 2
21282: PUSH
21283: LD_INT 2
21285: PUSH
21286: EMPTY
21287: LIST
21288: LIST
21289: PUSH
21290: LD_INT 1
21292: PUSH
21293: LD_INT 2
21295: PUSH
21296: EMPTY
21297: LIST
21298: LIST
21299: PUSH
21300: LD_INT 0
21302: PUSH
21303: LD_INT 2
21305: PUSH
21306: EMPTY
21307: LIST
21308: LIST
21309: PUSH
21310: LD_INT 1
21312: NEG
21313: PUSH
21314: LD_INT 1
21316: PUSH
21317: EMPTY
21318: LIST
21319: LIST
21320: PUSH
21321: LD_INT 2
21323: NEG
21324: PUSH
21325: LD_INT 0
21327: PUSH
21328: EMPTY
21329: LIST
21330: LIST
21331: PUSH
21332: LD_INT 2
21334: NEG
21335: PUSH
21336: LD_INT 1
21338: NEG
21339: PUSH
21340: EMPTY
21341: LIST
21342: LIST
21343: PUSH
21344: LD_INT 2
21346: NEG
21347: PUSH
21348: LD_INT 2
21350: NEG
21351: PUSH
21352: EMPTY
21353: LIST
21354: LIST
21355: PUSH
21356: LD_INT 2
21358: PUSH
21359: LD_INT 3
21361: PUSH
21362: EMPTY
21363: LIST
21364: LIST
21365: PUSH
21366: LD_INT 1
21368: PUSH
21369: LD_INT 3
21371: PUSH
21372: EMPTY
21373: LIST
21374: LIST
21375: PUSH
21376: LD_INT 1
21378: NEG
21379: PUSH
21380: LD_INT 2
21382: PUSH
21383: EMPTY
21384: LIST
21385: LIST
21386: PUSH
21387: LD_INT 2
21389: NEG
21390: PUSH
21391: LD_INT 1
21393: PUSH
21394: EMPTY
21395: LIST
21396: LIST
21397: PUSH
21398: EMPTY
21399: LIST
21400: LIST
21401: LIST
21402: LIST
21403: LIST
21404: LIST
21405: LIST
21406: LIST
21407: LIST
21408: LIST
21409: LIST
21410: LIST
21411: LIST
21412: LIST
21413: LIST
21414: LIST
21415: LIST
21416: LIST
21417: LIST
21418: LIST
21419: LIST
21420: LIST
21421: LIST
21422: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21423: LD_ADDR_VAR 0 27
21427: PUSH
21428: LD_INT 0
21430: PUSH
21431: LD_INT 0
21433: PUSH
21434: EMPTY
21435: LIST
21436: LIST
21437: PUSH
21438: LD_INT 0
21440: PUSH
21441: LD_INT 1
21443: NEG
21444: PUSH
21445: EMPTY
21446: LIST
21447: LIST
21448: PUSH
21449: LD_INT 1
21451: PUSH
21452: LD_INT 0
21454: PUSH
21455: EMPTY
21456: LIST
21457: LIST
21458: PUSH
21459: LD_INT 1
21461: PUSH
21462: LD_INT 1
21464: PUSH
21465: EMPTY
21466: LIST
21467: LIST
21468: PUSH
21469: LD_INT 0
21471: PUSH
21472: LD_INT 1
21474: PUSH
21475: EMPTY
21476: LIST
21477: LIST
21478: PUSH
21479: LD_INT 1
21481: NEG
21482: PUSH
21483: LD_INT 0
21485: PUSH
21486: EMPTY
21487: LIST
21488: LIST
21489: PUSH
21490: LD_INT 1
21492: NEG
21493: PUSH
21494: LD_INT 1
21496: NEG
21497: PUSH
21498: EMPTY
21499: LIST
21500: LIST
21501: PUSH
21502: LD_INT 1
21504: NEG
21505: PUSH
21506: LD_INT 2
21508: NEG
21509: PUSH
21510: EMPTY
21511: LIST
21512: LIST
21513: PUSH
21514: LD_INT 0
21516: PUSH
21517: LD_INT 2
21519: NEG
21520: PUSH
21521: EMPTY
21522: LIST
21523: LIST
21524: PUSH
21525: LD_INT 1
21527: PUSH
21528: LD_INT 1
21530: NEG
21531: PUSH
21532: EMPTY
21533: LIST
21534: LIST
21535: PUSH
21536: LD_INT 2
21538: PUSH
21539: LD_INT 0
21541: PUSH
21542: EMPTY
21543: LIST
21544: LIST
21545: PUSH
21546: LD_INT 2
21548: PUSH
21549: LD_INT 1
21551: PUSH
21552: EMPTY
21553: LIST
21554: LIST
21555: PUSH
21556: LD_INT 2
21558: PUSH
21559: LD_INT 2
21561: PUSH
21562: EMPTY
21563: LIST
21564: LIST
21565: PUSH
21566: LD_INT 1
21568: PUSH
21569: LD_INT 2
21571: PUSH
21572: EMPTY
21573: LIST
21574: LIST
21575: PUSH
21576: LD_INT 0
21578: PUSH
21579: LD_INT 2
21581: PUSH
21582: EMPTY
21583: LIST
21584: LIST
21585: PUSH
21586: LD_INT 1
21588: NEG
21589: PUSH
21590: LD_INT 1
21592: PUSH
21593: EMPTY
21594: LIST
21595: LIST
21596: PUSH
21597: LD_INT 2
21599: NEG
21600: PUSH
21601: LD_INT 0
21603: PUSH
21604: EMPTY
21605: LIST
21606: LIST
21607: PUSH
21608: LD_INT 2
21610: NEG
21611: PUSH
21612: LD_INT 1
21614: NEG
21615: PUSH
21616: EMPTY
21617: LIST
21618: LIST
21619: PUSH
21620: LD_INT 2
21622: NEG
21623: PUSH
21624: LD_INT 2
21626: NEG
21627: PUSH
21628: EMPTY
21629: LIST
21630: LIST
21631: PUSH
21632: LD_INT 1
21634: NEG
21635: PUSH
21636: LD_INT 2
21638: PUSH
21639: EMPTY
21640: LIST
21641: LIST
21642: PUSH
21643: LD_INT 2
21645: NEG
21646: PUSH
21647: LD_INT 1
21649: PUSH
21650: EMPTY
21651: LIST
21652: LIST
21653: PUSH
21654: LD_INT 3
21656: NEG
21657: PUSH
21658: LD_INT 1
21660: NEG
21661: PUSH
21662: EMPTY
21663: LIST
21664: LIST
21665: PUSH
21666: LD_INT 3
21668: NEG
21669: PUSH
21670: LD_INT 2
21672: NEG
21673: PUSH
21674: EMPTY
21675: LIST
21676: LIST
21677: PUSH
21678: EMPTY
21679: LIST
21680: LIST
21681: LIST
21682: LIST
21683: LIST
21684: LIST
21685: LIST
21686: LIST
21687: LIST
21688: LIST
21689: LIST
21690: LIST
21691: LIST
21692: LIST
21693: LIST
21694: LIST
21695: LIST
21696: LIST
21697: LIST
21698: LIST
21699: LIST
21700: LIST
21701: LIST
21702: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21703: LD_ADDR_VAR 0 28
21707: PUSH
21708: LD_INT 0
21710: PUSH
21711: LD_INT 0
21713: PUSH
21714: EMPTY
21715: LIST
21716: LIST
21717: PUSH
21718: LD_INT 0
21720: PUSH
21721: LD_INT 1
21723: NEG
21724: PUSH
21725: EMPTY
21726: LIST
21727: LIST
21728: PUSH
21729: LD_INT 1
21731: PUSH
21732: LD_INT 0
21734: PUSH
21735: EMPTY
21736: LIST
21737: LIST
21738: PUSH
21739: LD_INT 1
21741: PUSH
21742: LD_INT 1
21744: PUSH
21745: EMPTY
21746: LIST
21747: LIST
21748: PUSH
21749: LD_INT 0
21751: PUSH
21752: LD_INT 1
21754: PUSH
21755: EMPTY
21756: LIST
21757: LIST
21758: PUSH
21759: LD_INT 1
21761: NEG
21762: PUSH
21763: LD_INT 0
21765: PUSH
21766: EMPTY
21767: LIST
21768: LIST
21769: PUSH
21770: LD_INT 1
21772: NEG
21773: PUSH
21774: LD_INT 1
21776: NEG
21777: PUSH
21778: EMPTY
21779: LIST
21780: LIST
21781: PUSH
21782: LD_INT 1
21784: NEG
21785: PUSH
21786: LD_INT 2
21788: NEG
21789: PUSH
21790: EMPTY
21791: LIST
21792: LIST
21793: PUSH
21794: LD_INT 0
21796: PUSH
21797: LD_INT 2
21799: NEG
21800: PUSH
21801: EMPTY
21802: LIST
21803: LIST
21804: PUSH
21805: LD_INT 1
21807: PUSH
21808: LD_INT 1
21810: NEG
21811: PUSH
21812: EMPTY
21813: LIST
21814: LIST
21815: PUSH
21816: LD_INT 2
21818: PUSH
21819: LD_INT 0
21821: PUSH
21822: EMPTY
21823: LIST
21824: LIST
21825: PUSH
21826: LD_INT 2
21828: PUSH
21829: LD_INT 1
21831: PUSH
21832: EMPTY
21833: LIST
21834: LIST
21835: PUSH
21836: LD_INT 2
21838: PUSH
21839: LD_INT 2
21841: PUSH
21842: EMPTY
21843: LIST
21844: LIST
21845: PUSH
21846: LD_INT 1
21848: PUSH
21849: LD_INT 2
21851: PUSH
21852: EMPTY
21853: LIST
21854: LIST
21855: PUSH
21856: LD_INT 0
21858: PUSH
21859: LD_INT 2
21861: PUSH
21862: EMPTY
21863: LIST
21864: LIST
21865: PUSH
21866: LD_INT 1
21868: NEG
21869: PUSH
21870: LD_INT 1
21872: PUSH
21873: EMPTY
21874: LIST
21875: LIST
21876: PUSH
21877: LD_INT 2
21879: NEG
21880: PUSH
21881: LD_INT 0
21883: PUSH
21884: EMPTY
21885: LIST
21886: LIST
21887: PUSH
21888: LD_INT 2
21890: NEG
21891: PUSH
21892: LD_INT 1
21894: NEG
21895: PUSH
21896: EMPTY
21897: LIST
21898: LIST
21899: PUSH
21900: LD_INT 2
21902: NEG
21903: PUSH
21904: LD_INT 2
21906: NEG
21907: PUSH
21908: EMPTY
21909: LIST
21910: LIST
21911: PUSH
21912: LD_INT 2
21914: NEG
21915: PUSH
21916: LD_INT 3
21918: NEG
21919: PUSH
21920: EMPTY
21921: LIST
21922: LIST
21923: PUSH
21924: LD_INT 1
21926: NEG
21927: PUSH
21928: LD_INT 3
21930: NEG
21931: PUSH
21932: EMPTY
21933: LIST
21934: LIST
21935: PUSH
21936: LD_INT 3
21938: NEG
21939: PUSH
21940: LD_INT 1
21942: NEG
21943: PUSH
21944: EMPTY
21945: LIST
21946: LIST
21947: PUSH
21948: LD_INT 3
21950: NEG
21951: PUSH
21952: LD_INT 2
21954: NEG
21955: PUSH
21956: EMPTY
21957: LIST
21958: LIST
21959: PUSH
21960: EMPTY
21961: LIST
21962: LIST
21963: LIST
21964: LIST
21965: LIST
21966: LIST
21967: LIST
21968: LIST
21969: LIST
21970: LIST
21971: LIST
21972: LIST
21973: LIST
21974: LIST
21975: LIST
21976: LIST
21977: LIST
21978: LIST
21979: LIST
21980: LIST
21981: LIST
21982: LIST
21983: LIST
21984: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21985: LD_ADDR_VAR 0 29
21989: PUSH
21990: LD_INT 0
21992: PUSH
21993: LD_INT 0
21995: PUSH
21996: EMPTY
21997: LIST
21998: LIST
21999: PUSH
22000: LD_INT 0
22002: PUSH
22003: LD_INT 1
22005: NEG
22006: PUSH
22007: EMPTY
22008: LIST
22009: LIST
22010: PUSH
22011: LD_INT 1
22013: PUSH
22014: LD_INT 0
22016: PUSH
22017: EMPTY
22018: LIST
22019: LIST
22020: PUSH
22021: LD_INT 1
22023: PUSH
22024: LD_INT 1
22026: PUSH
22027: EMPTY
22028: LIST
22029: LIST
22030: PUSH
22031: LD_INT 0
22033: PUSH
22034: LD_INT 1
22036: PUSH
22037: EMPTY
22038: LIST
22039: LIST
22040: PUSH
22041: LD_INT 1
22043: NEG
22044: PUSH
22045: LD_INT 0
22047: PUSH
22048: EMPTY
22049: LIST
22050: LIST
22051: PUSH
22052: LD_INT 1
22054: NEG
22055: PUSH
22056: LD_INT 1
22058: NEG
22059: PUSH
22060: EMPTY
22061: LIST
22062: LIST
22063: PUSH
22064: LD_INT 1
22066: NEG
22067: PUSH
22068: LD_INT 2
22070: NEG
22071: PUSH
22072: EMPTY
22073: LIST
22074: LIST
22075: PUSH
22076: LD_INT 0
22078: PUSH
22079: LD_INT 2
22081: NEG
22082: PUSH
22083: EMPTY
22084: LIST
22085: LIST
22086: PUSH
22087: LD_INT 1
22089: PUSH
22090: LD_INT 1
22092: NEG
22093: PUSH
22094: EMPTY
22095: LIST
22096: LIST
22097: PUSH
22098: LD_INT 2
22100: PUSH
22101: LD_INT 0
22103: PUSH
22104: EMPTY
22105: LIST
22106: LIST
22107: PUSH
22108: LD_INT 2
22110: PUSH
22111: LD_INT 1
22113: PUSH
22114: EMPTY
22115: LIST
22116: LIST
22117: PUSH
22118: LD_INT 1
22120: PUSH
22121: LD_INT 2
22123: PUSH
22124: EMPTY
22125: LIST
22126: LIST
22127: PUSH
22128: LD_INT 0
22130: PUSH
22131: LD_INT 2
22133: PUSH
22134: EMPTY
22135: LIST
22136: LIST
22137: PUSH
22138: LD_INT 1
22140: NEG
22141: PUSH
22142: LD_INT 1
22144: PUSH
22145: EMPTY
22146: LIST
22147: LIST
22148: PUSH
22149: LD_INT 2
22151: NEG
22152: PUSH
22153: LD_INT 1
22155: NEG
22156: PUSH
22157: EMPTY
22158: LIST
22159: LIST
22160: PUSH
22161: LD_INT 2
22163: NEG
22164: PUSH
22165: LD_INT 2
22167: NEG
22168: PUSH
22169: EMPTY
22170: LIST
22171: LIST
22172: PUSH
22173: LD_INT 2
22175: NEG
22176: PUSH
22177: LD_INT 3
22179: NEG
22180: PUSH
22181: EMPTY
22182: LIST
22183: LIST
22184: PUSH
22185: LD_INT 2
22187: PUSH
22188: LD_INT 1
22190: NEG
22191: PUSH
22192: EMPTY
22193: LIST
22194: LIST
22195: PUSH
22196: LD_INT 3
22198: PUSH
22199: LD_INT 1
22201: PUSH
22202: EMPTY
22203: LIST
22204: LIST
22205: PUSH
22206: LD_INT 1
22208: PUSH
22209: LD_INT 3
22211: PUSH
22212: EMPTY
22213: LIST
22214: LIST
22215: PUSH
22216: LD_INT 1
22218: NEG
22219: PUSH
22220: LD_INT 2
22222: PUSH
22223: EMPTY
22224: LIST
22225: LIST
22226: PUSH
22227: LD_INT 3
22229: NEG
22230: PUSH
22231: LD_INT 2
22233: NEG
22234: PUSH
22235: EMPTY
22236: LIST
22237: LIST
22238: PUSH
22239: EMPTY
22240: LIST
22241: LIST
22242: LIST
22243: LIST
22244: LIST
22245: LIST
22246: LIST
22247: LIST
22248: LIST
22249: LIST
22250: LIST
22251: LIST
22252: LIST
22253: LIST
22254: LIST
22255: LIST
22256: LIST
22257: LIST
22258: LIST
22259: LIST
22260: LIST
22261: LIST
22262: LIST
22263: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22264: LD_ADDR_VAR 0 30
22268: PUSH
22269: LD_INT 0
22271: PUSH
22272: LD_INT 0
22274: PUSH
22275: EMPTY
22276: LIST
22277: LIST
22278: PUSH
22279: LD_INT 0
22281: PUSH
22282: LD_INT 1
22284: NEG
22285: PUSH
22286: EMPTY
22287: LIST
22288: LIST
22289: PUSH
22290: LD_INT 1
22292: PUSH
22293: LD_INT 0
22295: PUSH
22296: EMPTY
22297: LIST
22298: LIST
22299: PUSH
22300: LD_INT 1
22302: PUSH
22303: LD_INT 1
22305: PUSH
22306: EMPTY
22307: LIST
22308: LIST
22309: PUSH
22310: LD_INT 0
22312: PUSH
22313: LD_INT 1
22315: PUSH
22316: EMPTY
22317: LIST
22318: LIST
22319: PUSH
22320: LD_INT 1
22322: NEG
22323: PUSH
22324: LD_INT 0
22326: PUSH
22327: EMPTY
22328: LIST
22329: LIST
22330: PUSH
22331: LD_INT 1
22333: NEG
22334: PUSH
22335: LD_INT 1
22337: NEG
22338: PUSH
22339: EMPTY
22340: LIST
22341: LIST
22342: PUSH
22343: LD_INT 1
22345: NEG
22346: PUSH
22347: LD_INT 2
22349: NEG
22350: PUSH
22351: EMPTY
22352: LIST
22353: LIST
22354: PUSH
22355: LD_INT 0
22357: PUSH
22358: LD_INT 2
22360: NEG
22361: PUSH
22362: EMPTY
22363: LIST
22364: LIST
22365: PUSH
22366: LD_INT 1
22368: PUSH
22369: LD_INT 1
22371: NEG
22372: PUSH
22373: EMPTY
22374: LIST
22375: LIST
22376: PUSH
22377: LD_INT 2
22379: PUSH
22380: LD_INT 0
22382: PUSH
22383: EMPTY
22384: LIST
22385: LIST
22386: PUSH
22387: LD_INT 2
22389: PUSH
22390: LD_INT 1
22392: PUSH
22393: EMPTY
22394: LIST
22395: LIST
22396: PUSH
22397: LD_INT 2
22399: PUSH
22400: LD_INT 2
22402: PUSH
22403: EMPTY
22404: LIST
22405: LIST
22406: PUSH
22407: LD_INT 1
22409: PUSH
22410: LD_INT 2
22412: PUSH
22413: EMPTY
22414: LIST
22415: LIST
22416: PUSH
22417: LD_INT 1
22419: NEG
22420: PUSH
22421: LD_INT 1
22423: PUSH
22424: EMPTY
22425: LIST
22426: LIST
22427: PUSH
22428: LD_INT 2
22430: NEG
22431: PUSH
22432: LD_INT 0
22434: PUSH
22435: EMPTY
22436: LIST
22437: LIST
22438: PUSH
22439: LD_INT 2
22441: NEG
22442: PUSH
22443: LD_INT 1
22445: NEG
22446: PUSH
22447: EMPTY
22448: LIST
22449: LIST
22450: PUSH
22451: LD_INT 1
22453: NEG
22454: PUSH
22455: LD_INT 3
22457: NEG
22458: PUSH
22459: EMPTY
22460: LIST
22461: LIST
22462: PUSH
22463: LD_INT 1
22465: PUSH
22466: LD_INT 2
22468: NEG
22469: PUSH
22470: EMPTY
22471: LIST
22472: LIST
22473: PUSH
22474: LD_INT 3
22476: PUSH
22477: LD_INT 2
22479: PUSH
22480: EMPTY
22481: LIST
22482: LIST
22483: PUSH
22484: LD_INT 2
22486: PUSH
22487: LD_INT 3
22489: PUSH
22490: EMPTY
22491: LIST
22492: LIST
22493: PUSH
22494: LD_INT 2
22496: NEG
22497: PUSH
22498: LD_INT 1
22500: PUSH
22501: EMPTY
22502: LIST
22503: LIST
22504: PUSH
22505: LD_INT 3
22507: NEG
22508: PUSH
22509: LD_INT 1
22511: NEG
22512: PUSH
22513: EMPTY
22514: LIST
22515: LIST
22516: PUSH
22517: EMPTY
22518: LIST
22519: LIST
22520: LIST
22521: LIST
22522: LIST
22523: LIST
22524: LIST
22525: LIST
22526: LIST
22527: LIST
22528: LIST
22529: LIST
22530: LIST
22531: LIST
22532: LIST
22533: LIST
22534: LIST
22535: LIST
22536: LIST
22537: LIST
22538: LIST
22539: LIST
22540: LIST
22541: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22542: LD_ADDR_VAR 0 31
22546: PUSH
22547: LD_INT 0
22549: PUSH
22550: LD_INT 0
22552: PUSH
22553: EMPTY
22554: LIST
22555: LIST
22556: PUSH
22557: LD_INT 0
22559: PUSH
22560: LD_INT 1
22562: NEG
22563: PUSH
22564: EMPTY
22565: LIST
22566: LIST
22567: PUSH
22568: LD_INT 1
22570: PUSH
22571: LD_INT 0
22573: PUSH
22574: EMPTY
22575: LIST
22576: LIST
22577: PUSH
22578: LD_INT 1
22580: PUSH
22581: LD_INT 1
22583: PUSH
22584: EMPTY
22585: LIST
22586: LIST
22587: PUSH
22588: LD_INT 0
22590: PUSH
22591: LD_INT 1
22593: PUSH
22594: EMPTY
22595: LIST
22596: LIST
22597: PUSH
22598: LD_INT 1
22600: NEG
22601: PUSH
22602: LD_INT 0
22604: PUSH
22605: EMPTY
22606: LIST
22607: LIST
22608: PUSH
22609: LD_INT 1
22611: NEG
22612: PUSH
22613: LD_INT 1
22615: NEG
22616: PUSH
22617: EMPTY
22618: LIST
22619: LIST
22620: PUSH
22621: LD_INT 1
22623: NEG
22624: PUSH
22625: LD_INT 2
22627: NEG
22628: PUSH
22629: EMPTY
22630: LIST
22631: LIST
22632: PUSH
22633: LD_INT 1
22635: PUSH
22636: LD_INT 1
22638: NEG
22639: PUSH
22640: EMPTY
22641: LIST
22642: LIST
22643: PUSH
22644: LD_INT 2
22646: PUSH
22647: LD_INT 0
22649: PUSH
22650: EMPTY
22651: LIST
22652: LIST
22653: PUSH
22654: LD_INT 2
22656: PUSH
22657: LD_INT 1
22659: PUSH
22660: EMPTY
22661: LIST
22662: LIST
22663: PUSH
22664: LD_INT 2
22666: PUSH
22667: LD_INT 2
22669: PUSH
22670: EMPTY
22671: LIST
22672: LIST
22673: PUSH
22674: LD_INT 1
22676: PUSH
22677: LD_INT 2
22679: PUSH
22680: EMPTY
22681: LIST
22682: LIST
22683: PUSH
22684: LD_INT 0
22686: PUSH
22687: LD_INT 2
22689: PUSH
22690: EMPTY
22691: LIST
22692: LIST
22693: PUSH
22694: LD_INT 1
22696: NEG
22697: PUSH
22698: LD_INT 1
22700: PUSH
22701: EMPTY
22702: LIST
22703: LIST
22704: PUSH
22705: LD_INT 2
22707: NEG
22708: PUSH
22709: LD_INT 1
22711: NEG
22712: PUSH
22713: EMPTY
22714: LIST
22715: LIST
22716: PUSH
22717: LD_INT 2
22719: NEG
22720: PUSH
22721: LD_INT 2
22723: NEG
22724: PUSH
22725: EMPTY
22726: LIST
22727: LIST
22728: PUSH
22729: LD_INT 2
22731: NEG
22732: PUSH
22733: LD_INT 3
22735: NEG
22736: PUSH
22737: EMPTY
22738: LIST
22739: LIST
22740: PUSH
22741: LD_INT 2
22743: PUSH
22744: LD_INT 1
22746: NEG
22747: PUSH
22748: EMPTY
22749: LIST
22750: LIST
22751: PUSH
22752: LD_INT 3
22754: PUSH
22755: LD_INT 1
22757: PUSH
22758: EMPTY
22759: LIST
22760: LIST
22761: PUSH
22762: LD_INT 1
22764: PUSH
22765: LD_INT 3
22767: PUSH
22768: EMPTY
22769: LIST
22770: LIST
22771: PUSH
22772: LD_INT 1
22774: NEG
22775: PUSH
22776: LD_INT 2
22778: PUSH
22779: EMPTY
22780: LIST
22781: LIST
22782: PUSH
22783: LD_INT 3
22785: NEG
22786: PUSH
22787: LD_INT 2
22789: NEG
22790: PUSH
22791: EMPTY
22792: LIST
22793: LIST
22794: PUSH
22795: EMPTY
22796: LIST
22797: LIST
22798: LIST
22799: LIST
22800: LIST
22801: LIST
22802: LIST
22803: LIST
22804: LIST
22805: LIST
22806: LIST
22807: LIST
22808: LIST
22809: LIST
22810: LIST
22811: LIST
22812: LIST
22813: LIST
22814: LIST
22815: LIST
22816: LIST
22817: LIST
22818: LIST
22819: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22820: LD_ADDR_VAR 0 32
22824: PUSH
22825: LD_INT 0
22827: PUSH
22828: LD_INT 0
22830: PUSH
22831: EMPTY
22832: LIST
22833: LIST
22834: PUSH
22835: LD_INT 0
22837: PUSH
22838: LD_INT 1
22840: NEG
22841: PUSH
22842: EMPTY
22843: LIST
22844: LIST
22845: PUSH
22846: LD_INT 1
22848: PUSH
22849: LD_INT 0
22851: PUSH
22852: EMPTY
22853: LIST
22854: LIST
22855: PUSH
22856: LD_INT 1
22858: PUSH
22859: LD_INT 1
22861: PUSH
22862: EMPTY
22863: LIST
22864: LIST
22865: PUSH
22866: LD_INT 0
22868: PUSH
22869: LD_INT 1
22871: PUSH
22872: EMPTY
22873: LIST
22874: LIST
22875: PUSH
22876: LD_INT 1
22878: NEG
22879: PUSH
22880: LD_INT 0
22882: PUSH
22883: EMPTY
22884: LIST
22885: LIST
22886: PUSH
22887: LD_INT 1
22889: NEG
22890: PUSH
22891: LD_INT 1
22893: NEG
22894: PUSH
22895: EMPTY
22896: LIST
22897: LIST
22898: PUSH
22899: LD_INT 1
22901: NEG
22902: PUSH
22903: LD_INT 2
22905: NEG
22906: PUSH
22907: EMPTY
22908: LIST
22909: LIST
22910: PUSH
22911: LD_INT 0
22913: PUSH
22914: LD_INT 2
22916: NEG
22917: PUSH
22918: EMPTY
22919: LIST
22920: LIST
22921: PUSH
22922: LD_INT 1
22924: PUSH
22925: LD_INT 1
22927: NEG
22928: PUSH
22929: EMPTY
22930: LIST
22931: LIST
22932: PUSH
22933: LD_INT 2
22935: PUSH
22936: LD_INT 1
22938: PUSH
22939: EMPTY
22940: LIST
22941: LIST
22942: PUSH
22943: LD_INT 2
22945: PUSH
22946: LD_INT 2
22948: PUSH
22949: EMPTY
22950: LIST
22951: LIST
22952: PUSH
22953: LD_INT 1
22955: PUSH
22956: LD_INT 2
22958: PUSH
22959: EMPTY
22960: LIST
22961: LIST
22962: PUSH
22963: LD_INT 0
22965: PUSH
22966: LD_INT 2
22968: PUSH
22969: EMPTY
22970: LIST
22971: LIST
22972: PUSH
22973: LD_INT 1
22975: NEG
22976: PUSH
22977: LD_INT 1
22979: PUSH
22980: EMPTY
22981: LIST
22982: LIST
22983: PUSH
22984: LD_INT 2
22986: NEG
22987: PUSH
22988: LD_INT 0
22990: PUSH
22991: EMPTY
22992: LIST
22993: LIST
22994: PUSH
22995: LD_INT 2
22997: NEG
22998: PUSH
22999: LD_INT 1
23001: NEG
23002: PUSH
23003: EMPTY
23004: LIST
23005: LIST
23006: PUSH
23007: LD_INT 1
23009: NEG
23010: PUSH
23011: LD_INT 3
23013: NEG
23014: PUSH
23015: EMPTY
23016: LIST
23017: LIST
23018: PUSH
23019: LD_INT 1
23021: PUSH
23022: LD_INT 2
23024: NEG
23025: PUSH
23026: EMPTY
23027: LIST
23028: LIST
23029: PUSH
23030: LD_INT 3
23032: PUSH
23033: LD_INT 2
23035: PUSH
23036: EMPTY
23037: LIST
23038: LIST
23039: PUSH
23040: LD_INT 2
23042: PUSH
23043: LD_INT 3
23045: PUSH
23046: EMPTY
23047: LIST
23048: LIST
23049: PUSH
23050: LD_INT 2
23052: NEG
23053: PUSH
23054: LD_INT 1
23056: PUSH
23057: EMPTY
23058: LIST
23059: LIST
23060: PUSH
23061: LD_INT 3
23063: NEG
23064: PUSH
23065: LD_INT 1
23067: NEG
23068: PUSH
23069: EMPTY
23070: LIST
23071: LIST
23072: PUSH
23073: EMPTY
23074: LIST
23075: LIST
23076: LIST
23077: LIST
23078: LIST
23079: LIST
23080: LIST
23081: LIST
23082: LIST
23083: LIST
23084: LIST
23085: LIST
23086: LIST
23087: LIST
23088: LIST
23089: LIST
23090: LIST
23091: LIST
23092: LIST
23093: LIST
23094: LIST
23095: LIST
23096: LIST
23097: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23098: LD_ADDR_VAR 0 33
23102: PUSH
23103: LD_INT 0
23105: PUSH
23106: LD_INT 0
23108: PUSH
23109: EMPTY
23110: LIST
23111: LIST
23112: PUSH
23113: LD_INT 0
23115: PUSH
23116: LD_INT 1
23118: NEG
23119: PUSH
23120: EMPTY
23121: LIST
23122: LIST
23123: PUSH
23124: LD_INT 1
23126: PUSH
23127: LD_INT 0
23129: PUSH
23130: EMPTY
23131: LIST
23132: LIST
23133: PUSH
23134: LD_INT 1
23136: PUSH
23137: LD_INT 1
23139: PUSH
23140: EMPTY
23141: LIST
23142: LIST
23143: PUSH
23144: LD_INT 0
23146: PUSH
23147: LD_INT 1
23149: PUSH
23150: EMPTY
23151: LIST
23152: LIST
23153: PUSH
23154: LD_INT 1
23156: NEG
23157: PUSH
23158: LD_INT 0
23160: PUSH
23161: EMPTY
23162: LIST
23163: LIST
23164: PUSH
23165: LD_INT 1
23167: NEG
23168: PUSH
23169: LD_INT 1
23171: NEG
23172: PUSH
23173: EMPTY
23174: LIST
23175: LIST
23176: PUSH
23177: LD_INT 1
23179: NEG
23180: PUSH
23181: LD_INT 2
23183: NEG
23184: PUSH
23185: EMPTY
23186: LIST
23187: LIST
23188: PUSH
23189: LD_INT 1
23191: PUSH
23192: LD_INT 1
23194: NEG
23195: PUSH
23196: EMPTY
23197: LIST
23198: LIST
23199: PUSH
23200: LD_INT 2
23202: PUSH
23203: LD_INT 0
23205: PUSH
23206: EMPTY
23207: LIST
23208: LIST
23209: PUSH
23210: LD_INT 2
23212: PUSH
23213: LD_INT 1
23215: PUSH
23216: EMPTY
23217: LIST
23218: LIST
23219: PUSH
23220: LD_INT 1
23222: PUSH
23223: LD_INT 2
23225: PUSH
23226: EMPTY
23227: LIST
23228: LIST
23229: PUSH
23230: LD_INT 0
23232: PUSH
23233: LD_INT 2
23235: PUSH
23236: EMPTY
23237: LIST
23238: LIST
23239: PUSH
23240: LD_INT 1
23242: NEG
23243: PUSH
23244: LD_INT 1
23246: PUSH
23247: EMPTY
23248: LIST
23249: LIST
23250: PUSH
23251: LD_INT 2
23253: NEG
23254: PUSH
23255: LD_INT 0
23257: PUSH
23258: EMPTY
23259: LIST
23260: LIST
23261: PUSH
23262: LD_INT 2
23264: NEG
23265: PUSH
23266: LD_INT 1
23268: NEG
23269: PUSH
23270: EMPTY
23271: LIST
23272: LIST
23273: PUSH
23274: LD_INT 2
23276: NEG
23277: PUSH
23278: LD_INT 2
23280: NEG
23281: PUSH
23282: EMPTY
23283: LIST
23284: LIST
23285: PUSH
23286: LD_INT 2
23288: NEG
23289: PUSH
23290: LD_INT 3
23292: NEG
23293: PUSH
23294: EMPTY
23295: LIST
23296: LIST
23297: PUSH
23298: LD_INT 2
23300: PUSH
23301: LD_INT 1
23303: NEG
23304: PUSH
23305: EMPTY
23306: LIST
23307: LIST
23308: PUSH
23309: LD_INT 3
23311: PUSH
23312: LD_INT 1
23314: PUSH
23315: EMPTY
23316: LIST
23317: LIST
23318: PUSH
23319: LD_INT 1
23321: PUSH
23322: LD_INT 3
23324: PUSH
23325: EMPTY
23326: LIST
23327: LIST
23328: PUSH
23329: LD_INT 1
23331: NEG
23332: PUSH
23333: LD_INT 2
23335: PUSH
23336: EMPTY
23337: LIST
23338: LIST
23339: PUSH
23340: LD_INT 3
23342: NEG
23343: PUSH
23344: LD_INT 2
23346: NEG
23347: PUSH
23348: EMPTY
23349: LIST
23350: LIST
23351: PUSH
23352: EMPTY
23353: LIST
23354: LIST
23355: LIST
23356: LIST
23357: LIST
23358: LIST
23359: LIST
23360: LIST
23361: LIST
23362: LIST
23363: LIST
23364: LIST
23365: LIST
23366: LIST
23367: LIST
23368: LIST
23369: LIST
23370: LIST
23371: LIST
23372: LIST
23373: LIST
23374: LIST
23375: LIST
23376: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23377: LD_ADDR_VAR 0 34
23381: PUSH
23382: LD_INT 0
23384: PUSH
23385: LD_INT 0
23387: PUSH
23388: EMPTY
23389: LIST
23390: LIST
23391: PUSH
23392: LD_INT 0
23394: PUSH
23395: LD_INT 1
23397: NEG
23398: PUSH
23399: EMPTY
23400: LIST
23401: LIST
23402: PUSH
23403: LD_INT 1
23405: PUSH
23406: LD_INT 0
23408: PUSH
23409: EMPTY
23410: LIST
23411: LIST
23412: PUSH
23413: LD_INT 1
23415: PUSH
23416: LD_INT 1
23418: PUSH
23419: EMPTY
23420: LIST
23421: LIST
23422: PUSH
23423: LD_INT 0
23425: PUSH
23426: LD_INT 1
23428: PUSH
23429: EMPTY
23430: LIST
23431: LIST
23432: PUSH
23433: LD_INT 1
23435: NEG
23436: PUSH
23437: LD_INT 0
23439: PUSH
23440: EMPTY
23441: LIST
23442: LIST
23443: PUSH
23444: LD_INT 1
23446: NEG
23447: PUSH
23448: LD_INT 1
23450: NEG
23451: PUSH
23452: EMPTY
23453: LIST
23454: LIST
23455: PUSH
23456: LD_INT 1
23458: NEG
23459: PUSH
23460: LD_INT 2
23462: NEG
23463: PUSH
23464: EMPTY
23465: LIST
23466: LIST
23467: PUSH
23468: LD_INT 0
23470: PUSH
23471: LD_INT 2
23473: NEG
23474: PUSH
23475: EMPTY
23476: LIST
23477: LIST
23478: PUSH
23479: LD_INT 1
23481: PUSH
23482: LD_INT 1
23484: NEG
23485: PUSH
23486: EMPTY
23487: LIST
23488: LIST
23489: PUSH
23490: LD_INT 2
23492: PUSH
23493: LD_INT 1
23495: PUSH
23496: EMPTY
23497: LIST
23498: LIST
23499: PUSH
23500: LD_INT 2
23502: PUSH
23503: LD_INT 2
23505: PUSH
23506: EMPTY
23507: LIST
23508: LIST
23509: PUSH
23510: LD_INT 1
23512: PUSH
23513: LD_INT 2
23515: PUSH
23516: EMPTY
23517: LIST
23518: LIST
23519: PUSH
23520: LD_INT 1
23522: NEG
23523: PUSH
23524: LD_INT 1
23526: PUSH
23527: EMPTY
23528: LIST
23529: LIST
23530: PUSH
23531: LD_INT 2
23533: NEG
23534: PUSH
23535: LD_INT 0
23537: PUSH
23538: EMPTY
23539: LIST
23540: LIST
23541: PUSH
23542: LD_INT 2
23544: NEG
23545: PUSH
23546: LD_INT 1
23548: NEG
23549: PUSH
23550: EMPTY
23551: LIST
23552: LIST
23553: PUSH
23554: LD_INT 2
23556: NEG
23557: PUSH
23558: LD_INT 2
23560: NEG
23561: PUSH
23562: EMPTY
23563: LIST
23564: LIST
23565: PUSH
23566: LD_INT 1
23568: NEG
23569: PUSH
23570: LD_INT 3
23572: NEG
23573: PUSH
23574: EMPTY
23575: LIST
23576: LIST
23577: PUSH
23578: LD_INT 1
23580: PUSH
23581: LD_INT 2
23583: NEG
23584: PUSH
23585: EMPTY
23586: LIST
23587: LIST
23588: PUSH
23589: LD_INT 3
23591: PUSH
23592: LD_INT 2
23594: PUSH
23595: EMPTY
23596: LIST
23597: LIST
23598: PUSH
23599: LD_INT 2
23601: PUSH
23602: LD_INT 3
23604: PUSH
23605: EMPTY
23606: LIST
23607: LIST
23608: PUSH
23609: LD_INT 2
23611: NEG
23612: PUSH
23613: LD_INT 1
23615: PUSH
23616: EMPTY
23617: LIST
23618: LIST
23619: PUSH
23620: LD_INT 3
23622: NEG
23623: PUSH
23624: LD_INT 1
23626: NEG
23627: PUSH
23628: EMPTY
23629: LIST
23630: LIST
23631: PUSH
23632: EMPTY
23633: LIST
23634: LIST
23635: LIST
23636: LIST
23637: LIST
23638: LIST
23639: LIST
23640: LIST
23641: LIST
23642: LIST
23643: LIST
23644: LIST
23645: LIST
23646: LIST
23647: LIST
23648: LIST
23649: LIST
23650: LIST
23651: LIST
23652: LIST
23653: LIST
23654: LIST
23655: LIST
23656: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23657: LD_ADDR_VAR 0 35
23661: PUSH
23662: LD_INT 0
23664: PUSH
23665: LD_INT 0
23667: PUSH
23668: EMPTY
23669: LIST
23670: LIST
23671: PUSH
23672: LD_INT 0
23674: PUSH
23675: LD_INT 1
23677: NEG
23678: PUSH
23679: EMPTY
23680: LIST
23681: LIST
23682: PUSH
23683: LD_INT 1
23685: PUSH
23686: LD_INT 0
23688: PUSH
23689: EMPTY
23690: LIST
23691: LIST
23692: PUSH
23693: LD_INT 1
23695: PUSH
23696: LD_INT 1
23698: PUSH
23699: EMPTY
23700: LIST
23701: LIST
23702: PUSH
23703: LD_INT 0
23705: PUSH
23706: LD_INT 1
23708: PUSH
23709: EMPTY
23710: LIST
23711: LIST
23712: PUSH
23713: LD_INT 1
23715: NEG
23716: PUSH
23717: LD_INT 0
23719: PUSH
23720: EMPTY
23721: LIST
23722: LIST
23723: PUSH
23724: LD_INT 1
23726: NEG
23727: PUSH
23728: LD_INT 1
23730: NEG
23731: PUSH
23732: EMPTY
23733: LIST
23734: LIST
23735: PUSH
23736: LD_INT 2
23738: PUSH
23739: LD_INT 1
23741: PUSH
23742: EMPTY
23743: LIST
23744: LIST
23745: PUSH
23746: LD_INT 2
23748: NEG
23749: PUSH
23750: LD_INT 1
23752: NEG
23753: PUSH
23754: EMPTY
23755: LIST
23756: LIST
23757: PUSH
23758: EMPTY
23759: LIST
23760: LIST
23761: LIST
23762: LIST
23763: LIST
23764: LIST
23765: LIST
23766: LIST
23767: LIST
23768: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23769: LD_ADDR_VAR 0 36
23773: PUSH
23774: LD_INT 0
23776: PUSH
23777: LD_INT 0
23779: PUSH
23780: EMPTY
23781: LIST
23782: LIST
23783: PUSH
23784: LD_INT 0
23786: PUSH
23787: LD_INT 1
23789: NEG
23790: PUSH
23791: EMPTY
23792: LIST
23793: LIST
23794: PUSH
23795: LD_INT 1
23797: PUSH
23798: LD_INT 0
23800: PUSH
23801: EMPTY
23802: LIST
23803: LIST
23804: PUSH
23805: LD_INT 1
23807: PUSH
23808: LD_INT 1
23810: PUSH
23811: EMPTY
23812: LIST
23813: LIST
23814: PUSH
23815: LD_INT 0
23817: PUSH
23818: LD_INT 1
23820: PUSH
23821: EMPTY
23822: LIST
23823: LIST
23824: PUSH
23825: LD_INT 1
23827: NEG
23828: PUSH
23829: LD_INT 0
23831: PUSH
23832: EMPTY
23833: LIST
23834: LIST
23835: PUSH
23836: LD_INT 1
23838: NEG
23839: PUSH
23840: LD_INT 1
23842: NEG
23843: PUSH
23844: EMPTY
23845: LIST
23846: LIST
23847: PUSH
23848: LD_INT 1
23850: NEG
23851: PUSH
23852: LD_INT 2
23854: NEG
23855: PUSH
23856: EMPTY
23857: LIST
23858: LIST
23859: PUSH
23860: LD_INT 1
23862: PUSH
23863: LD_INT 2
23865: PUSH
23866: EMPTY
23867: LIST
23868: LIST
23869: PUSH
23870: EMPTY
23871: LIST
23872: LIST
23873: LIST
23874: LIST
23875: LIST
23876: LIST
23877: LIST
23878: LIST
23879: LIST
23880: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
23881: LD_ADDR_VAR 0 37
23885: PUSH
23886: LD_INT 0
23888: PUSH
23889: LD_INT 0
23891: PUSH
23892: EMPTY
23893: LIST
23894: LIST
23895: PUSH
23896: LD_INT 0
23898: PUSH
23899: LD_INT 1
23901: NEG
23902: PUSH
23903: EMPTY
23904: LIST
23905: LIST
23906: PUSH
23907: LD_INT 1
23909: PUSH
23910: LD_INT 0
23912: PUSH
23913: EMPTY
23914: LIST
23915: LIST
23916: PUSH
23917: LD_INT 1
23919: PUSH
23920: LD_INT 1
23922: PUSH
23923: EMPTY
23924: LIST
23925: LIST
23926: PUSH
23927: LD_INT 0
23929: PUSH
23930: LD_INT 1
23932: PUSH
23933: EMPTY
23934: LIST
23935: LIST
23936: PUSH
23937: LD_INT 1
23939: NEG
23940: PUSH
23941: LD_INT 0
23943: PUSH
23944: EMPTY
23945: LIST
23946: LIST
23947: PUSH
23948: LD_INT 1
23950: NEG
23951: PUSH
23952: LD_INT 1
23954: NEG
23955: PUSH
23956: EMPTY
23957: LIST
23958: LIST
23959: PUSH
23960: LD_INT 1
23962: PUSH
23963: LD_INT 1
23965: NEG
23966: PUSH
23967: EMPTY
23968: LIST
23969: LIST
23970: PUSH
23971: LD_INT 1
23973: NEG
23974: PUSH
23975: LD_INT 1
23977: PUSH
23978: EMPTY
23979: LIST
23980: LIST
23981: PUSH
23982: EMPTY
23983: LIST
23984: LIST
23985: LIST
23986: LIST
23987: LIST
23988: LIST
23989: LIST
23990: LIST
23991: LIST
23992: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23993: LD_ADDR_VAR 0 38
23997: PUSH
23998: LD_INT 0
24000: PUSH
24001: LD_INT 0
24003: PUSH
24004: EMPTY
24005: LIST
24006: LIST
24007: PUSH
24008: LD_INT 0
24010: PUSH
24011: LD_INT 1
24013: NEG
24014: PUSH
24015: EMPTY
24016: LIST
24017: LIST
24018: PUSH
24019: LD_INT 1
24021: PUSH
24022: LD_INT 0
24024: PUSH
24025: EMPTY
24026: LIST
24027: LIST
24028: PUSH
24029: LD_INT 1
24031: PUSH
24032: LD_INT 1
24034: PUSH
24035: EMPTY
24036: LIST
24037: LIST
24038: PUSH
24039: LD_INT 0
24041: PUSH
24042: LD_INT 1
24044: PUSH
24045: EMPTY
24046: LIST
24047: LIST
24048: PUSH
24049: LD_INT 1
24051: NEG
24052: PUSH
24053: LD_INT 0
24055: PUSH
24056: EMPTY
24057: LIST
24058: LIST
24059: PUSH
24060: LD_INT 1
24062: NEG
24063: PUSH
24064: LD_INT 1
24066: NEG
24067: PUSH
24068: EMPTY
24069: LIST
24070: LIST
24071: PUSH
24072: LD_INT 2
24074: PUSH
24075: LD_INT 1
24077: PUSH
24078: EMPTY
24079: LIST
24080: LIST
24081: PUSH
24082: LD_INT 2
24084: NEG
24085: PUSH
24086: LD_INT 1
24088: NEG
24089: PUSH
24090: EMPTY
24091: LIST
24092: LIST
24093: PUSH
24094: EMPTY
24095: LIST
24096: LIST
24097: LIST
24098: LIST
24099: LIST
24100: LIST
24101: LIST
24102: LIST
24103: LIST
24104: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
24105: LD_ADDR_VAR 0 39
24109: PUSH
24110: LD_INT 0
24112: PUSH
24113: LD_INT 0
24115: PUSH
24116: EMPTY
24117: LIST
24118: LIST
24119: PUSH
24120: LD_INT 0
24122: PUSH
24123: LD_INT 1
24125: NEG
24126: PUSH
24127: EMPTY
24128: LIST
24129: LIST
24130: PUSH
24131: LD_INT 1
24133: PUSH
24134: LD_INT 0
24136: PUSH
24137: EMPTY
24138: LIST
24139: LIST
24140: PUSH
24141: LD_INT 1
24143: PUSH
24144: LD_INT 1
24146: PUSH
24147: EMPTY
24148: LIST
24149: LIST
24150: PUSH
24151: LD_INT 0
24153: PUSH
24154: LD_INT 1
24156: PUSH
24157: EMPTY
24158: LIST
24159: LIST
24160: PUSH
24161: LD_INT 1
24163: NEG
24164: PUSH
24165: LD_INT 0
24167: PUSH
24168: EMPTY
24169: LIST
24170: LIST
24171: PUSH
24172: LD_INT 1
24174: NEG
24175: PUSH
24176: LD_INT 1
24178: NEG
24179: PUSH
24180: EMPTY
24181: LIST
24182: LIST
24183: PUSH
24184: LD_INT 1
24186: NEG
24187: PUSH
24188: LD_INT 2
24190: NEG
24191: PUSH
24192: EMPTY
24193: LIST
24194: LIST
24195: PUSH
24196: LD_INT 1
24198: PUSH
24199: LD_INT 2
24201: PUSH
24202: EMPTY
24203: LIST
24204: LIST
24205: PUSH
24206: EMPTY
24207: LIST
24208: LIST
24209: LIST
24210: LIST
24211: LIST
24212: LIST
24213: LIST
24214: LIST
24215: LIST
24216: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24217: LD_ADDR_VAR 0 40
24221: PUSH
24222: LD_INT 0
24224: PUSH
24225: LD_INT 0
24227: PUSH
24228: EMPTY
24229: LIST
24230: LIST
24231: PUSH
24232: LD_INT 0
24234: PUSH
24235: LD_INT 1
24237: NEG
24238: PUSH
24239: EMPTY
24240: LIST
24241: LIST
24242: PUSH
24243: LD_INT 1
24245: PUSH
24246: LD_INT 0
24248: PUSH
24249: EMPTY
24250: LIST
24251: LIST
24252: PUSH
24253: LD_INT 1
24255: PUSH
24256: LD_INT 1
24258: PUSH
24259: EMPTY
24260: LIST
24261: LIST
24262: PUSH
24263: LD_INT 0
24265: PUSH
24266: LD_INT 1
24268: PUSH
24269: EMPTY
24270: LIST
24271: LIST
24272: PUSH
24273: LD_INT 1
24275: NEG
24276: PUSH
24277: LD_INT 0
24279: PUSH
24280: EMPTY
24281: LIST
24282: LIST
24283: PUSH
24284: LD_INT 1
24286: NEG
24287: PUSH
24288: LD_INT 1
24290: NEG
24291: PUSH
24292: EMPTY
24293: LIST
24294: LIST
24295: PUSH
24296: LD_INT 1
24298: PUSH
24299: LD_INT 1
24301: NEG
24302: PUSH
24303: EMPTY
24304: LIST
24305: LIST
24306: PUSH
24307: LD_INT 1
24309: NEG
24310: PUSH
24311: LD_INT 1
24313: PUSH
24314: EMPTY
24315: LIST
24316: LIST
24317: PUSH
24318: EMPTY
24319: LIST
24320: LIST
24321: LIST
24322: LIST
24323: LIST
24324: LIST
24325: LIST
24326: LIST
24327: LIST
24328: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24329: LD_ADDR_VAR 0 41
24333: PUSH
24334: LD_INT 0
24336: PUSH
24337: LD_INT 0
24339: PUSH
24340: EMPTY
24341: LIST
24342: LIST
24343: PUSH
24344: LD_INT 0
24346: PUSH
24347: LD_INT 1
24349: NEG
24350: PUSH
24351: EMPTY
24352: LIST
24353: LIST
24354: PUSH
24355: LD_INT 1
24357: PUSH
24358: LD_INT 0
24360: PUSH
24361: EMPTY
24362: LIST
24363: LIST
24364: PUSH
24365: LD_INT 1
24367: PUSH
24368: LD_INT 1
24370: PUSH
24371: EMPTY
24372: LIST
24373: LIST
24374: PUSH
24375: LD_INT 0
24377: PUSH
24378: LD_INT 1
24380: PUSH
24381: EMPTY
24382: LIST
24383: LIST
24384: PUSH
24385: LD_INT 1
24387: NEG
24388: PUSH
24389: LD_INT 0
24391: PUSH
24392: EMPTY
24393: LIST
24394: LIST
24395: PUSH
24396: LD_INT 1
24398: NEG
24399: PUSH
24400: LD_INT 1
24402: NEG
24403: PUSH
24404: EMPTY
24405: LIST
24406: LIST
24407: PUSH
24408: LD_INT 1
24410: NEG
24411: PUSH
24412: LD_INT 2
24414: NEG
24415: PUSH
24416: EMPTY
24417: LIST
24418: LIST
24419: PUSH
24420: LD_INT 1
24422: PUSH
24423: LD_INT 1
24425: NEG
24426: PUSH
24427: EMPTY
24428: LIST
24429: LIST
24430: PUSH
24431: LD_INT 2
24433: PUSH
24434: LD_INT 0
24436: PUSH
24437: EMPTY
24438: LIST
24439: LIST
24440: PUSH
24441: LD_INT 2
24443: PUSH
24444: LD_INT 1
24446: PUSH
24447: EMPTY
24448: LIST
24449: LIST
24450: PUSH
24451: LD_INT 2
24453: PUSH
24454: LD_INT 2
24456: PUSH
24457: EMPTY
24458: LIST
24459: LIST
24460: PUSH
24461: LD_INT 1
24463: PUSH
24464: LD_INT 2
24466: PUSH
24467: EMPTY
24468: LIST
24469: LIST
24470: PUSH
24471: LD_INT 1
24473: NEG
24474: PUSH
24475: LD_INT 1
24477: PUSH
24478: EMPTY
24479: LIST
24480: LIST
24481: PUSH
24482: LD_INT 2
24484: NEG
24485: PUSH
24486: LD_INT 0
24488: PUSH
24489: EMPTY
24490: LIST
24491: LIST
24492: PUSH
24493: LD_INT 2
24495: NEG
24496: PUSH
24497: LD_INT 1
24499: NEG
24500: PUSH
24501: EMPTY
24502: LIST
24503: LIST
24504: PUSH
24505: LD_INT 2
24507: NEG
24508: PUSH
24509: LD_INT 2
24511: NEG
24512: PUSH
24513: EMPTY
24514: LIST
24515: LIST
24516: PUSH
24517: LD_INT 2
24519: NEG
24520: PUSH
24521: LD_INT 3
24523: NEG
24524: PUSH
24525: EMPTY
24526: LIST
24527: LIST
24528: PUSH
24529: LD_INT 2
24531: PUSH
24532: LD_INT 1
24534: NEG
24535: PUSH
24536: EMPTY
24537: LIST
24538: LIST
24539: PUSH
24540: LD_INT 3
24542: PUSH
24543: LD_INT 0
24545: PUSH
24546: EMPTY
24547: LIST
24548: LIST
24549: PUSH
24550: LD_INT 3
24552: PUSH
24553: LD_INT 1
24555: PUSH
24556: EMPTY
24557: LIST
24558: LIST
24559: PUSH
24560: LD_INT 3
24562: PUSH
24563: LD_INT 2
24565: PUSH
24566: EMPTY
24567: LIST
24568: LIST
24569: PUSH
24570: LD_INT 3
24572: PUSH
24573: LD_INT 3
24575: PUSH
24576: EMPTY
24577: LIST
24578: LIST
24579: PUSH
24580: LD_INT 2
24582: PUSH
24583: LD_INT 3
24585: PUSH
24586: EMPTY
24587: LIST
24588: LIST
24589: PUSH
24590: LD_INT 2
24592: NEG
24593: PUSH
24594: LD_INT 1
24596: PUSH
24597: EMPTY
24598: LIST
24599: LIST
24600: PUSH
24601: LD_INT 3
24603: NEG
24604: PUSH
24605: LD_INT 0
24607: PUSH
24608: EMPTY
24609: LIST
24610: LIST
24611: PUSH
24612: LD_INT 3
24614: NEG
24615: PUSH
24616: LD_INT 1
24618: NEG
24619: PUSH
24620: EMPTY
24621: LIST
24622: LIST
24623: PUSH
24624: LD_INT 3
24626: NEG
24627: PUSH
24628: LD_INT 2
24630: NEG
24631: PUSH
24632: EMPTY
24633: LIST
24634: LIST
24635: PUSH
24636: LD_INT 3
24638: NEG
24639: PUSH
24640: LD_INT 3
24642: NEG
24643: PUSH
24644: EMPTY
24645: LIST
24646: LIST
24647: PUSH
24648: EMPTY
24649: LIST
24650: LIST
24651: LIST
24652: LIST
24653: LIST
24654: LIST
24655: LIST
24656: LIST
24657: LIST
24658: LIST
24659: LIST
24660: LIST
24661: LIST
24662: LIST
24663: LIST
24664: LIST
24665: LIST
24666: LIST
24667: LIST
24668: LIST
24669: LIST
24670: LIST
24671: LIST
24672: LIST
24673: LIST
24674: LIST
24675: LIST
24676: LIST
24677: LIST
24678: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24679: LD_ADDR_VAR 0 42
24683: PUSH
24684: LD_INT 0
24686: PUSH
24687: LD_INT 0
24689: PUSH
24690: EMPTY
24691: LIST
24692: LIST
24693: PUSH
24694: LD_INT 0
24696: PUSH
24697: LD_INT 1
24699: NEG
24700: PUSH
24701: EMPTY
24702: LIST
24703: LIST
24704: PUSH
24705: LD_INT 1
24707: PUSH
24708: LD_INT 0
24710: PUSH
24711: EMPTY
24712: LIST
24713: LIST
24714: PUSH
24715: LD_INT 1
24717: PUSH
24718: LD_INT 1
24720: PUSH
24721: EMPTY
24722: LIST
24723: LIST
24724: PUSH
24725: LD_INT 0
24727: PUSH
24728: LD_INT 1
24730: PUSH
24731: EMPTY
24732: LIST
24733: LIST
24734: PUSH
24735: LD_INT 1
24737: NEG
24738: PUSH
24739: LD_INT 0
24741: PUSH
24742: EMPTY
24743: LIST
24744: LIST
24745: PUSH
24746: LD_INT 1
24748: NEG
24749: PUSH
24750: LD_INT 1
24752: NEG
24753: PUSH
24754: EMPTY
24755: LIST
24756: LIST
24757: PUSH
24758: LD_INT 1
24760: NEG
24761: PUSH
24762: LD_INT 2
24764: NEG
24765: PUSH
24766: EMPTY
24767: LIST
24768: LIST
24769: PUSH
24770: LD_INT 0
24772: PUSH
24773: LD_INT 2
24775: NEG
24776: PUSH
24777: EMPTY
24778: LIST
24779: LIST
24780: PUSH
24781: LD_INT 1
24783: PUSH
24784: LD_INT 1
24786: NEG
24787: PUSH
24788: EMPTY
24789: LIST
24790: LIST
24791: PUSH
24792: LD_INT 2
24794: PUSH
24795: LD_INT 1
24797: PUSH
24798: EMPTY
24799: LIST
24800: LIST
24801: PUSH
24802: LD_INT 2
24804: PUSH
24805: LD_INT 2
24807: PUSH
24808: EMPTY
24809: LIST
24810: LIST
24811: PUSH
24812: LD_INT 1
24814: PUSH
24815: LD_INT 2
24817: PUSH
24818: EMPTY
24819: LIST
24820: LIST
24821: PUSH
24822: LD_INT 0
24824: PUSH
24825: LD_INT 2
24827: PUSH
24828: EMPTY
24829: LIST
24830: LIST
24831: PUSH
24832: LD_INT 1
24834: NEG
24835: PUSH
24836: LD_INT 1
24838: PUSH
24839: EMPTY
24840: LIST
24841: LIST
24842: PUSH
24843: LD_INT 2
24845: NEG
24846: PUSH
24847: LD_INT 1
24849: NEG
24850: PUSH
24851: EMPTY
24852: LIST
24853: LIST
24854: PUSH
24855: LD_INT 2
24857: NEG
24858: PUSH
24859: LD_INT 2
24861: NEG
24862: PUSH
24863: EMPTY
24864: LIST
24865: LIST
24866: PUSH
24867: LD_INT 2
24869: NEG
24870: PUSH
24871: LD_INT 3
24873: NEG
24874: PUSH
24875: EMPTY
24876: LIST
24877: LIST
24878: PUSH
24879: LD_INT 1
24881: NEG
24882: PUSH
24883: LD_INT 3
24885: NEG
24886: PUSH
24887: EMPTY
24888: LIST
24889: LIST
24890: PUSH
24891: LD_INT 0
24893: PUSH
24894: LD_INT 3
24896: NEG
24897: PUSH
24898: EMPTY
24899: LIST
24900: LIST
24901: PUSH
24902: LD_INT 1
24904: PUSH
24905: LD_INT 2
24907: NEG
24908: PUSH
24909: EMPTY
24910: LIST
24911: LIST
24912: PUSH
24913: LD_INT 3
24915: PUSH
24916: LD_INT 2
24918: PUSH
24919: EMPTY
24920: LIST
24921: LIST
24922: PUSH
24923: LD_INT 3
24925: PUSH
24926: LD_INT 3
24928: PUSH
24929: EMPTY
24930: LIST
24931: LIST
24932: PUSH
24933: LD_INT 2
24935: PUSH
24936: LD_INT 3
24938: PUSH
24939: EMPTY
24940: LIST
24941: LIST
24942: PUSH
24943: LD_INT 1
24945: PUSH
24946: LD_INT 3
24948: PUSH
24949: EMPTY
24950: LIST
24951: LIST
24952: PUSH
24953: LD_INT 0
24955: PUSH
24956: LD_INT 3
24958: PUSH
24959: EMPTY
24960: LIST
24961: LIST
24962: PUSH
24963: LD_INT 1
24965: NEG
24966: PUSH
24967: LD_INT 2
24969: PUSH
24970: EMPTY
24971: LIST
24972: LIST
24973: PUSH
24974: LD_INT 3
24976: NEG
24977: PUSH
24978: LD_INT 2
24980: NEG
24981: PUSH
24982: EMPTY
24983: LIST
24984: LIST
24985: PUSH
24986: LD_INT 3
24988: NEG
24989: PUSH
24990: LD_INT 3
24992: NEG
24993: PUSH
24994: EMPTY
24995: LIST
24996: LIST
24997: PUSH
24998: EMPTY
24999: LIST
25000: LIST
25001: LIST
25002: LIST
25003: LIST
25004: LIST
25005: LIST
25006: LIST
25007: LIST
25008: LIST
25009: LIST
25010: LIST
25011: LIST
25012: LIST
25013: LIST
25014: LIST
25015: LIST
25016: LIST
25017: LIST
25018: LIST
25019: LIST
25020: LIST
25021: LIST
25022: LIST
25023: LIST
25024: LIST
25025: LIST
25026: LIST
25027: LIST
25028: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25029: LD_ADDR_VAR 0 43
25033: PUSH
25034: LD_INT 0
25036: PUSH
25037: LD_INT 0
25039: PUSH
25040: EMPTY
25041: LIST
25042: LIST
25043: PUSH
25044: LD_INT 0
25046: PUSH
25047: LD_INT 1
25049: NEG
25050: PUSH
25051: EMPTY
25052: LIST
25053: LIST
25054: PUSH
25055: LD_INT 1
25057: PUSH
25058: LD_INT 0
25060: PUSH
25061: EMPTY
25062: LIST
25063: LIST
25064: PUSH
25065: LD_INT 1
25067: PUSH
25068: LD_INT 1
25070: PUSH
25071: EMPTY
25072: LIST
25073: LIST
25074: PUSH
25075: LD_INT 0
25077: PUSH
25078: LD_INT 1
25080: PUSH
25081: EMPTY
25082: LIST
25083: LIST
25084: PUSH
25085: LD_INT 1
25087: NEG
25088: PUSH
25089: LD_INT 0
25091: PUSH
25092: EMPTY
25093: LIST
25094: LIST
25095: PUSH
25096: LD_INT 1
25098: NEG
25099: PUSH
25100: LD_INT 1
25102: NEG
25103: PUSH
25104: EMPTY
25105: LIST
25106: LIST
25107: PUSH
25108: LD_INT 1
25110: NEG
25111: PUSH
25112: LD_INT 2
25114: NEG
25115: PUSH
25116: EMPTY
25117: LIST
25118: LIST
25119: PUSH
25120: LD_INT 0
25122: PUSH
25123: LD_INT 2
25125: NEG
25126: PUSH
25127: EMPTY
25128: LIST
25129: LIST
25130: PUSH
25131: LD_INT 1
25133: PUSH
25134: LD_INT 1
25136: NEG
25137: PUSH
25138: EMPTY
25139: LIST
25140: LIST
25141: PUSH
25142: LD_INT 2
25144: PUSH
25145: LD_INT 0
25147: PUSH
25148: EMPTY
25149: LIST
25150: LIST
25151: PUSH
25152: LD_INT 2
25154: PUSH
25155: LD_INT 1
25157: PUSH
25158: EMPTY
25159: LIST
25160: LIST
25161: PUSH
25162: LD_INT 1
25164: PUSH
25165: LD_INT 2
25167: PUSH
25168: EMPTY
25169: LIST
25170: LIST
25171: PUSH
25172: LD_INT 0
25174: PUSH
25175: LD_INT 2
25177: PUSH
25178: EMPTY
25179: LIST
25180: LIST
25181: PUSH
25182: LD_INT 1
25184: NEG
25185: PUSH
25186: LD_INT 1
25188: PUSH
25189: EMPTY
25190: LIST
25191: LIST
25192: PUSH
25193: LD_INT 2
25195: NEG
25196: PUSH
25197: LD_INT 0
25199: PUSH
25200: EMPTY
25201: LIST
25202: LIST
25203: PUSH
25204: LD_INT 2
25206: NEG
25207: PUSH
25208: LD_INT 1
25210: NEG
25211: PUSH
25212: EMPTY
25213: LIST
25214: LIST
25215: PUSH
25216: LD_INT 1
25218: NEG
25219: PUSH
25220: LD_INT 3
25222: NEG
25223: PUSH
25224: EMPTY
25225: LIST
25226: LIST
25227: PUSH
25228: LD_INT 0
25230: PUSH
25231: LD_INT 3
25233: NEG
25234: PUSH
25235: EMPTY
25236: LIST
25237: LIST
25238: PUSH
25239: LD_INT 1
25241: PUSH
25242: LD_INT 2
25244: NEG
25245: PUSH
25246: EMPTY
25247: LIST
25248: LIST
25249: PUSH
25250: LD_INT 2
25252: PUSH
25253: LD_INT 1
25255: NEG
25256: PUSH
25257: EMPTY
25258: LIST
25259: LIST
25260: PUSH
25261: LD_INT 3
25263: PUSH
25264: LD_INT 0
25266: PUSH
25267: EMPTY
25268: LIST
25269: LIST
25270: PUSH
25271: LD_INT 3
25273: PUSH
25274: LD_INT 1
25276: PUSH
25277: EMPTY
25278: LIST
25279: LIST
25280: PUSH
25281: LD_INT 1
25283: PUSH
25284: LD_INT 3
25286: PUSH
25287: EMPTY
25288: LIST
25289: LIST
25290: PUSH
25291: LD_INT 0
25293: PUSH
25294: LD_INT 3
25296: PUSH
25297: EMPTY
25298: LIST
25299: LIST
25300: PUSH
25301: LD_INT 1
25303: NEG
25304: PUSH
25305: LD_INT 2
25307: PUSH
25308: EMPTY
25309: LIST
25310: LIST
25311: PUSH
25312: LD_INT 2
25314: NEG
25315: PUSH
25316: LD_INT 1
25318: PUSH
25319: EMPTY
25320: LIST
25321: LIST
25322: PUSH
25323: LD_INT 3
25325: NEG
25326: PUSH
25327: LD_INT 0
25329: PUSH
25330: EMPTY
25331: LIST
25332: LIST
25333: PUSH
25334: LD_INT 3
25336: NEG
25337: PUSH
25338: LD_INT 1
25340: NEG
25341: PUSH
25342: EMPTY
25343: LIST
25344: LIST
25345: PUSH
25346: EMPTY
25347: LIST
25348: LIST
25349: LIST
25350: LIST
25351: LIST
25352: LIST
25353: LIST
25354: LIST
25355: LIST
25356: LIST
25357: LIST
25358: LIST
25359: LIST
25360: LIST
25361: LIST
25362: LIST
25363: LIST
25364: LIST
25365: LIST
25366: LIST
25367: LIST
25368: LIST
25369: LIST
25370: LIST
25371: LIST
25372: LIST
25373: LIST
25374: LIST
25375: LIST
25376: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25377: LD_ADDR_VAR 0 44
25381: PUSH
25382: LD_INT 0
25384: PUSH
25385: LD_INT 0
25387: PUSH
25388: EMPTY
25389: LIST
25390: LIST
25391: PUSH
25392: LD_INT 0
25394: PUSH
25395: LD_INT 1
25397: NEG
25398: PUSH
25399: EMPTY
25400: LIST
25401: LIST
25402: PUSH
25403: LD_INT 1
25405: PUSH
25406: LD_INT 0
25408: PUSH
25409: EMPTY
25410: LIST
25411: LIST
25412: PUSH
25413: LD_INT 1
25415: PUSH
25416: LD_INT 1
25418: PUSH
25419: EMPTY
25420: LIST
25421: LIST
25422: PUSH
25423: LD_INT 0
25425: PUSH
25426: LD_INT 1
25428: PUSH
25429: EMPTY
25430: LIST
25431: LIST
25432: PUSH
25433: LD_INT 1
25435: NEG
25436: PUSH
25437: LD_INT 0
25439: PUSH
25440: EMPTY
25441: LIST
25442: LIST
25443: PUSH
25444: LD_INT 1
25446: NEG
25447: PUSH
25448: LD_INT 1
25450: NEG
25451: PUSH
25452: EMPTY
25453: LIST
25454: LIST
25455: PUSH
25456: LD_INT 1
25458: NEG
25459: PUSH
25460: LD_INT 2
25462: NEG
25463: PUSH
25464: EMPTY
25465: LIST
25466: LIST
25467: PUSH
25468: LD_INT 1
25470: PUSH
25471: LD_INT 1
25473: NEG
25474: PUSH
25475: EMPTY
25476: LIST
25477: LIST
25478: PUSH
25479: LD_INT 2
25481: PUSH
25482: LD_INT 0
25484: PUSH
25485: EMPTY
25486: LIST
25487: LIST
25488: PUSH
25489: LD_INT 2
25491: PUSH
25492: LD_INT 1
25494: PUSH
25495: EMPTY
25496: LIST
25497: LIST
25498: PUSH
25499: LD_INT 2
25501: PUSH
25502: LD_INT 2
25504: PUSH
25505: EMPTY
25506: LIST
25507: LIST
25508: PUSH
25509: LD_INT 1
25511: PUSH
25512: LD_INT 2
25514: PUSH
25515: EMPTY
25516: LIST
25517: LIST
25518: PUSH
25519: LD_INT 1
25521: NEG
25522: PUSH
25523: LD_INT 1
25525: PUSH
25526: EMPTY
25527: LIST
25528: LIST
25529: PUSH
25530: LD_INT 2
25532: NEG
25533: PUSH
25534: LD_INT 0
25536: PUSH
25537: EMPTY
25538: LIST
25539: LIST
25540: PUSH
25541: LD_INT 2
25543: NEG
25544: PUSH
25545: LD_INT 1
25547: NEG
25548: PUSH
25549: EMPTY
25550: LIST
25551: LIST
25552: PUSH
25553: LD_INT 2
25555: NEG
25556: PUSH
25557: LD_INT 2
25559: NEG
25560: PUSH
25561: EMPTY
25562: LIST
25563: LIST
25564: PUSH
25565: LD_INT 2
25567: NEG
25568: PUSH
25569: LD_INT 3
25571: NEG
25572: PUSH
25573: EMPTY
25574: LIST
25575: LIST
25576: PUSH
25577: LD_INT 2
25579: PUSH
25580: LD_INT 1
25582: NEG
25583: PUSH
25584: EMPTY
25585: LIST
25586: LIST
25587: PUSH
25588: LD_INT 3
25590: PUSH
25591: LD_INT 0
25593: PUSH
25594: EMPTY
25595: LIST
25596: LIST
25597: PUSH
25598: LD_INT 3
25600: PUSH
25601: LD_INT 1
25603: PUSH
25604: EMPTY
25605: LIST
25606: LIST
25607: PUSH
25608: LD_INT 3
25610: PUSH
25611: LD_INT 2
25613: PUSH
25614: EMPTY
25615: LIST
25616: LIST
25617: PUSH
25618: LD_INT 3
25620: PUSH
25621: LD_INT 3
25623: PUSH
25624: EMPTY
25625: LIST
25626: LIST
25627: PUSH
25628: LD_INT 2
25630: PUSH
25631: LD_INT 3
25633: PUSH
25634: EMPTY
25635: LIST
25636: LIST
25637: PUSH
25638: LD_INT 2
25640: NEG
25641: PUSH
25642: LD_INT 1
25644: PUSH
25645: EMPTY
25646: LIST
25647: LIST
25648: PUSH
25649: LD_INT 3
25651: NEG
25652: PUSH
25653: LD_INT 0
25655: PUSH
25656: EMPTY
25657: LIST
25658: LIST
25659: PUSH
25660: LD_INT 3
25662: NEG
25663: PUSH
25664: LD_INT 1
25666: NEG
25667: PUSH
25668: EMPTY
25669: LIST
25670: LIST
25671: PUSH
25672: LD_INT 3
25674: NEG
25675: PUSH
25676: LD_INT 2
25678: NEG
25679: PUSH
25680: EMPTY
25681: LIST
25682: LIST
25683: PUSH
25684: LD_INT 3
25686: NEG
25687: PUSH
25688: LD_INT 3
25690: NEG
25691: PUSH
25692: EMPTY
25693: LIST
25694: LIST
25695: PUSH
25696: EMPTY
25697: LIST
25698: LIST
25699: LIST
25700: LIST
25701: LIST
25702: LIST
25703: LIST
25704: LIST
25705: LIST
25706: LIST
25707: LIST
25708: LIST
25709: LIST
25710: LIST
25711: LIST
25712: LIST
25713: LIST
25714: LIST
25715: LIST
25716: LIST
25717: LIST
25718: LIST
25719: LIST
25720: LIST
25721: LIST
25722: LIST
25723: LIST
25724: LIST
25725: LIST
25726: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25727: LD_ADDR_VAR 0 45
25731: PUSH
25732: LD_INT 0
25734: PUSH
25735: LD_INT 0
25737: PUSH
25738: EMPTY
25739: LIST
25740: LIST
25741: PUSH
25742: LD_INT 0
25744: PUSH
25745: LD_INT 1
25747: NEG
25748: PUSH
25749: EMPTY
25750: LIST
25751: LIST
25752: PUSH
25753: LD_INT 1
25755: PUSH
25756: LD_INT 0
25758: PUSH
25759: EMPTY
25760: LIST
25761: LIST
25762: PUSH
25763: LD_INT 1
25765: PUSH
25766: LD_INT 1
25768: PUSH
25769: EMPTY
25770: LIST
25771: LIST
25772: PUSH
25773: LD_INT 0
25775: PUSH
25776: LD_INT 1
25778: PUSH
25779: EMPTY
25780: LIST
25781: LIST
25782: PUSH
25783: LD_INT 1
25785: NEG
25786: PUSH
25787: LD_INT 0
25789: PUSH
25790: EMPTY
25791: LIST
25792: LIST
25793: PUSH
25794: LD_INT 1
25796: NEG
25797: PUSH
25798: LD_INT 1
25800: NEG
25801: PUSH
25802: EMPTY
25803: LIST
25804: LIST
25805: PUSH
25806: LD_INT 1
25808: NEG
25809: PUSH
25810: LD_INT 2
25812: NEG
25813: PUSH
25814: EMPTY
25815: LIST
25816: LIST
25817: PUSH
25818: LD_INT 0
25820: PUSH
25821: LD_INT 2
25823: NEG
25824: PUSH
25825: EMPTY
25826: LIST
25827: LIST
25828: PUSH
25829: LD_INT 1
25831: PUSH
25832: LD_INT 1
25834: NEG
25835: PUSH
25836: EMPTY
25837: LIST
25838: LIST
25839: PUSH
25840: LD_INT 2
25842: PUSH
25843: LD_INT 1
25845: PUSH
25846: EMPTY
25847: LIST
25848: LIST
25849: PUSH
25850: LD_INT 2
25852: PUSH
25853: LD_INT 2
25855: PUSH
25856: EMPTY
25857: LIST
25858: LIST
25859: PUSH
25860: LD_INT 1
25862: PUSH
25863: LD_INT 2
25865: PUSH
25866: EMPTY
25867: LIST
25868: LIST
25869: PUSH
25870: LD_INT 0
25872: PUSH
25873: LD_INT 2
25875: PUSH
25876: EMPTY
25877: LIST
25878: LIST
25879: PUSH
25880: LD_INT 1
25882: NEG
25883: PUSH
25884: LD_INT 1
25886: PUSH
25887: EMPTY
25888: LIST
25889: LIST
25890: PUSH
25891: LD_INT 2
25893: NEG
25894: PUSH
25895: LD_INT 1
25897: NEG
25898: PUSH
25899: EMPTY
25900: LIST
25901: LIST
25902: PUSH
25903: LD_INT 2
25905: NEG
25906: PUSH
25907: LD_INT 2
25909: NEG
25910: PUSH
25911: EMPTY
25912: LIST
25913: LIST
25914: PUSH
25915: LD_INT 2
25917: NEG
25918: PUSH
25919: LD_INT 3
25921: NEG
25922: PUSH
25923: EMPTY
25924: LIST
25925: LIST
25926: PUSH
25927: LD_INT 1
25929: NEG
25930: PUSH
25931: LD_INT 3
25933: NEG
25934: PUSH
25935: EMPTY
25936: LIST
25937: LIST
25938: PUSH
25939: LD_INT 0
25941: PUSH
25942: LD_INT 3
25944: NEG
25945: PUSH
25946: EMPTY
25947: LIST
25948: LIST
25949: PUSH
25950: LD_INT 1
25952: PUSH
25953: LD_INT 2
25955: NEG
25956: PUSH
25957: EMPTY
25958: LIST
25959: LIST
25960: PUSH
25961: LD_INT 3
25963: PUSH
25964: LD_INT 2
25966: PUSH
25967: EMPTY
25968: LIST
25969: LIST
25970: PUSH
25971: LD_INT 3
25973: PUSH
25974: LD_INT 3
25976: PUSH
25977: EMPTY
25978: LIST
25979: LIST
25980: PUSH
25981: LD_INT 2
25983: PUSH
25984: LD_INT 3
25986: PUSH
25987: EMPTY
25988: LIST
25989: LIST
25990: PUSH
25991: LD_INT 1
25993: PUSH
25994: LD_INT 3
25996: PUSH
25997: EMPTY
25998: LIST
25999: LIST
26000: PUSH
26001: LD_INT 0
26003: PUSH
26004: LD_INT 3
26006: PUSH
26007: EMPTY
26008: LIST
26009: LIST
26010: PUSH
26011: LD_INT 1
26013: NEG
26014: PUSH
26015: LD_INT 2
26017: PUSH
26018: EMPTY
26019: LIST
26020: LIST
26021: PUSH
26022: LD_INT 3
26024: NEG
26025: PUSH
26026: LD_INT 2
26028: NEG
26029: PUSH
26030: EMPTY
26031: LIST
26032: LIST
26033: PUSH
26034: LD_INT 3
26036: NEG
26037: PUSH
26038: LD_INT 3
26040: NEG
26041: PUSH
26042: EMPTY
26043: LIST
26044: LIST
26045: PUSH
26046: EMPTY
26047: LIST
26048: LIST
26049: LIST
26050: LIST
26051: LIST
26052: LIST
26053: LIST
26054: LIST
26055: LIST
26056: LIST
26057: LIST
26058: LIST
26059: LIST
26060: LIST
26061: LIST
26062: LIST
26063: LIST
26064: LIST
26065: LIST
26066: LIST
26067: LIST
26068: LIST
26069: LIST
26070: LIST
26071: LIST
26072: LIST
26073: LIST
26074: LIST
26075: LIST
26076: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26077: LD_ADDR_VAR 0 46
26081: PUSH
26082: LD_INT 0
26084: PUSH
26085: LD_INT 0
26087: PUSH
26088: EMPTY
26089: LIST
26090: LIST
26091: PUSH
26092: LD_INT 0
26094: PUSH
26095: LD_INT 1
26097: NEG
26098: PUSH
26099: EMPTY
26100: LIST
26101: LIST
26102: PUSH
26103: LD_INT 1
26105: PUSH
26106: LD_INT 0
26108: PUSH
26109: EMPTY
26110: LIST
26111: LIST
26112: PUSH
26113: LD_INT 1
26115: PUSH
26116: LD_INT 1
26118: PUSH
26119: EMPTY
26120: LIST
26121: LIST
26122: PUSH
26123: LD_INT 0
26125: PUSH
26126: LD_INT 1
26128: PUSH
26129: EMPTY
26130: LIST
26131: LIST
26132: PUSH
26133: LD_INT 1
26135: NEG
26136: PUSH
26137: LD_INT 0
26139: PUSH
26140: EMPTY
26141: LIST
26142: LIST
26143: PUSH
26144: LD_INT 1
26146: NEG
26147: PUSH
26148: LD_INT 1
26150: NEG
26151: PUSH
26152: EMPTY
26153: LIST
26154: LIST
26155: PUSH
26156: LD_INT 1
26158: NEG
26159: PUSH
26160: LD_INT 2
26162: NEG
26163: PUSH
26164: EMPTY
26165: LIST
26166: LIST
26167: PUSH
26168: LD_INT 0
26170: PUSH
26171: LD_INT 2
26173: NEG
26174: PUSH
26175: EMPTY
26176: LIST
26177: LIST
26178: PUSH
26179: LD_INT 1
26181: PUSH
26182: LD_INT 1
26184: NEG
26185: PUSH
26186: EMPTY
26187: LIST
26188: LIST
26189: PUSH
26190: LD_INT 2
26192: PUSH
26193: LD_INT 0
26195: PUSH
26196: EMPTY
26197: LIST
26198: LIST
26199: PUSH
26200: LD_INT 2
26202: PUSH
26203: LD_INT 1
26205: PUSH
26206: EMPTY
26207: LIST
26208: LIST
26209: PUSH
26210: LD_INT 1
26212: PUSH
26213: LD_INT 2
26215: PUSH
26216: EMPTY
26217: LIST
26218: LIST
26219: PUSH
26220: LD_INT 0
26222: PUSH
26223: LD_INT 2
26225: PUSH
26226: EMPTY
26227: LIST
26228: LIST
26229: PUSH
26230: LD_INT 1
26232: NEG
26233: PUSH
26234: LD_INT 1
26236: PUSH
26237: EMPTY
26238: LIST
26239: LIST
26240: PUSH
26241: LD_INT 2
26243: NEG
26244: PUSH
26245: LD_INT 0
26247: PUSH
26248: EMPTY
26249: LIST
26250: LIST
26251: PUSH
26252: LD_INT 2
26254: NEG
26255: PUSH
26256: LD_INT 1
26258: NEG
26259: PUSH
26260: EMPTY
26261: LIST
26262: LIST
26263: PUSH
26264: LD_INT 1
26266: NEG
26267: PUSH
26268: LD_INT 3
26270: NEG
26271: PUSH
26272: EMPTY
26273: LIST
26274: LIST
26275: PUSH
26276: LD_INT 0
26278: PUSH
26279: LD_INT 3
26281: NEG
26282: PUSH
26283: EMPTY
26284: LIST
26285: LIST
26286: PUSH
26287: LD_INT 1
26289: PUSH
26290: LD_INT 2
26292: NEG
26293: PUSH
26294: EMPTY
26295: LIST
26296: LIST
26297: PUSH
26298: LD_INT 2
26300: PUSH
26301: LD_INT 1
26303: NEG
26304: PUSH
26305: EMPTY
26306: LIST
26307: LIST
26308: PUSH
26309: LD_INT 3
26311: PUSH
26312: LD_INT 0
26314: PUSH
26315: EMPTY
26316: LIST
26317: LIST
26318: PUSH
26319: LD_INT 3
26321: PUSH
26322: LD_INT 1
26324: PUSH
26325: EMPTY
26326: LIST
26327: LIST
26328: PUSH
26329: LD_INT 1
26331: PUSH
26332: LD_INT 3
26334: PUSH
26335: EMPTY
26336: LIST
26337: LIST
26338: PUSH
26339: LD_INT 0
26341: PUSH
26342: LD_INT 3
26344: PUSH
26345: EMPTY
26346: LIST
26347: LIST
26348: PUSH
26349: LD_INT 1
26351: NEG
26352: PUSH
26353: LD_INT 2
26355: PUSH
26356: EMPTY
26357: LIST
26358: LIST
26359: PUSH
26360: LD_INT 2
26362: NEG
26363: PUSH
26364: LD_INT 1
26366: PUSH
26367: EMPTY
26368: LIST
26369: LIST
26370: PUSH
26371: LD_INT 3
26373: NEG
26374: PUSH
26375: LD_INT 0
26377: PUSH
26378: EMPTY
26379: LIST
26380: LIST
26381: PUSH
26382: LD_INT 3
26384: NEG
26385: PUSH
26386: LD_INT 1
26388: NEG
26389: PUSH
26390: EMPTY
26391: LIST
26392: LIST
26393: PUSH
26394: EMPTY
26395: LIST
26396: LIST
26397: LIST
26398: LIST
26399: LIST
26400: LIST
26401: LIST
26402: LIST
26403: LIST
26404: LIST
26405: LIST
26406: LIST
26407: LIST
26408: LIST
26409: LIST
26410: LIST
26411: LIST
26412: LIST
26413: LIST
26414: LIST
26415: LIST
26416: LIST
26417: LIST
26418: LIST
26419: LIST
26420: LIST
26421: LIST
26422: LIST
26423: LIST
26424: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26425: LD_ADDR_VAR 0 47
26429: PUSH
26430: LD_INT 0
26432: PUSH
26433: LD_INT 0
26435: PUSH
26436: EMPTY
26437: LIST
26438: LIST
26439: PUSH
26440: LD_INT 0
26442: PUSH
26443: LD_INT 1
26445: NEG
26446: PUSH
26447: EMPTY
26448: LIST
26449: LIST
26450: PUSH
26451: LD_INT 1
26453: PUSH
26454: LD_INT 0
26456: PUSH
26457: EMPTY
26458: LIST
26459: LIST
26460: PUSH
26461: LD_INT 1
26463: PUSH
26464: LD_INT 1
26466: PUSH
26467: EMPTY
26468: LIST
26469: LIST
26470: PUSH
26471: LD_INT 0
26473: PUSH
26474: LD_INT 1
26476: PUSH
26477: EMPTY
26478: LIST
26479: LIST
26480: PUSH
26481: LD_INT 1
26483: NEG
26484: PUSH
26485: LD_INT 0
26487: PUSH
26488: EMPTY
26489: LIST
26490: LIST
26491: PUSH
26492: LD_INT 1
26494: NEG
26495: PUSH
26496: LD_INT 1
26498: NEG
26499: PUSH
26500: EMPTY
26501: LIST
26502: LIST
26503: PUSH
26504: LD_INT 1
26506: NEG
26507: PUSH
26508: LD_INT 2
26510: NEG
26511: PUSH
26512: EMPTY
26513: LIST
26514: LIST
26515: PUSH
26516: LD_INT 0
26518: PUSH
26519: LD_INT 2
26521: NEG
26522: PUSH
26523: EMPTY
26524: LIST
26525: LIST
26526: PUSH
26527: LD_INT 1
26529: PUSH
26530: LD_INT 1
26532: NEG
26533: PUSH
26534: EMPTY
26535: LIST
26536: LIST
26537: PUSH
26538: LD_INT 2
26540: NEG
26541: PUSH
26542: LD_INT 1
26544: NEG
26545: PUSH
26546: EMPTY
26547: LIST
26548: LIST
26549: PUSH
26550: LD_INT 2
26552: NEG
26553: PUSH
26554: LD_INT 2
26556: NEG
26557: PUSH
26558: EMPTY
26559: LIST
26560: LIST
26561: PUSH
26562: EMPTY
26563: LIST
26564: LIST
26565: LIST
26566: LIST
26567: LIST
26568: LIST
26569: LIST
26570: LIST
26571: LIST
26572: LIST
26573: LIST
26574: LIST
26575: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
26576: LD_ADDR_VAR 0 48
26580: PUSH
26581: LD_INT 0
26583: PUSH
26584: LD_INT 0
26586: PUSH
26587: EMPTY
26588: LIST
26589: LIST
26590: PUSH
26591: LD_INT 0
26593: PUSH
26594: LD_INT 1
26596: NEG
26597: PUSH
26598: EMPTY
26599: LIST
26600: LIST
26601: PUSH
26602: LD_INT 1
26604: PUSH
26605: LD_INT 0
26607: PUSH
26608: EMPTY
26609: LIST
26610: LIST
26611: PUSH
26612: LD_INT 1
26614: PUSH
26615: LD_INT 1
26617: PUSH
26618: EMPTY
26619: LIST
26620: LIST
26621: PUSH
26622: LD_INT 0
26624: PUSH
26625: LD_INT 1
26627: PUSH
26628: EMPTY
26629: LIST
26630: LIST
26631: PUSH
26632: LD_INT 1
26634: NEG
26635: PUSH
26636: LD_INT 0
26638: PUSH
26639: EMPTY
26640: LIST
26641: LIST
26642: PUSH
26643: LD_INT 1
26645: NEG
26646: PUSH
26647: LD_INT 1
26649: NEG
26650: PUSH
26651: EMPTY
26652: LIST
26653: LIST
26654: PUSH
26655: LD_INT 1
26657: NEG
26658: PUSH
26659: LD_INT 2
26661: NEG
26662: PUSH
26663: EMPTY
26664: LIST
26665: LIST
26666: PUSH
26667: LD_INT 0
26669: PUSH
26670: LD_INT 2
26672: NEG
26673: PUSH
26674: EMPTY
26675: LIST
26676: LIST
26677: PUSH
26678: LD_INT 1
26680: PUSH
26681: LD_INT 1
26683: NEG
26684: PUSH
26685: EMPTY
26686: LIST
26687: LIST
26688: PUSH
26689: LD_INT 2
26691: PUSH
26692: LD_INT 0
26694: PUSH
26695: EMPTY
26696: LIST
26697: LIST
26698: PUSH
26699: LD_INT 2
26701: PUSH
26702: LD_INT 1
26704: PUSH
26705: EMPTY
26706: LIST
26707: LIST
26708: PUSH
26709: EMPTY
26710: LIST
26711: LIST
26712: LIST
26713: LIST
26714: LIST
26715: LIST
26716: LIST
26717: LIST
26718: LIST
26719: LIST
26720: LIST
26721: LIST
26722: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
26723: LD_ADDR_VAR 0 49
26727: PUSH
26728: LD_INT 0
26730: PUSH
26731: LD_INT 0
26733: PUSH
26734: EMPTY
26735: LIST
26736: LIST
26737: PUSH
26738: LD_INT 0
26740: PUSH
26741: LD_INT 1
26743: NEG
26744: PUSH
26745: EMPTY
26746: LIST
26747: LIST
26748: PUSH
26749: LD_INT 1
26751: PUSH
26752: LD_INT 0
26754: PUSH
26755: EMPTY
26756: LIST
26757: LIST
26758: PUSH
26759: LD_INT 1
26761: PUSH
26762: LD_INT 1
26764: PUSH
26765: EMPTY
26766: LIST
26767: LIST
26768: PUSH
26769: LD_INT 0
26771: PUSH
26772: LD_INT 1
26774: PUSH
26775: EMPTY
26776: LIST
26777: LIST
26778: PUSH
26779: LD_INT 1
26781: NEG
26782: PUSH
26783: LD_INT 0
26785: PUSH
26786: EMPTY
26787: LIST
26788: LIST
26789: PUSH
26790: LD_INT 1
26792: NEG
26793: PUSH
26794: LD_INT 1
26796: NEG
26797: PUSH
26798: EMPTY
26799: LIST
26800: LIST
26801: PUSH
26802: LD_INT 1
26804: PUSH
26805: LD_INT 1
26807: NEG
26808: PUSH
26809: EMPTY
26810: LIST
26811: LIST
26812: PUSH
26813: LD_INT 2
26815: PUSH
26816: LD_INT 0
26818: PUSH
26819: EMPTY
26820: LIST
26821: LIST
26822: PUSH
26823: LD_INT 2
26825: PUSH
26826: LD_INT 1
26828: PUSH
26829: EMPTY
26830: LIST
26831: LIST
26832: PUSH
26833: LD_INT 2
26835: PUSH
26836: LD_INT 2
26838: PUSH
26839: EMPTY
26840: LIST
26841: LIST
26842: PUSH
26843: LD_INT 1
26845: PUSH
26846: LD_INT 2
26848: PUSH
26849: EMPTY
26850: LIST
26851: LIST
26852: PUSH
26853: EMPTY
26854: LIST
26855: LIST
26856: LIST
26857: LIST
26858: LIST
26859: LIST
26860: LIST
26861: LIST
26862: LIST
26863: LIST
26864: LIST
26865: LIST
26866: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
26867: LD_ADDR_VAR 0 50
26871: PUSH
26872: LD_INT 0
26874: PUSH
26875: LD_INT 0
26877: PUSH
26878: EMPTY
26879: LIST
26880: LIST
26881: PUSH
26882: LD_INT 0
26884: PUSH
26885: LD_INT 1
26887: NEG
26888: PUSH
26889: EMPTY
26890: LIST
26891: LIST
26892: PUSH
26893: LD_INT 1
26895: PUSH
26896: LD_INT 0
26898: PUSH
26899: EMPTY
26900: LIST
26901: LIST
26902: PUSH
26903: LD_INT 1
26905: PUSH
26906: LD_INT 1
26908: PUSH
26909: EMPTY
26910: LIST
26911: LIST
26912: PUSH
26913: LD_INT 0
26915: PUSH
26916: LD_INT 1
26918: PUSH
26919: EMPTY
26920: LIST
26921: LIST
26922: PUSH
26923: LD_INT 1
26925: NEG
26926: PUSH
26927: LD_INT 0
26929: PUSH
26930: EMPTY
26931: LIST
26932: LIST
26933: PUSH
26934: LD_INT 1
26936: NEG
26937: PUSH
26938: LD_INT 1
26940: NEG
26941: PUSH
26942: EMPTY
26943: LIST
26944: LIST
26945: PUSH
26946: LD_INT 2
26948: PUSH
26949: LD_INT 1
26951: PUSH
26952: EMPTY
26953: LIST
26954: LIST
26955: PUSH
26956: LD_INT 2
26958: PUSH
26959: LD_INT 2
26961: PUSH
26962: EMPTY
26963: LIST
26964: LIST
26965: PUSH
26966: LD_INT 1
26968: PUSH
26969: LD_INT 2
26971: PUSH
26972: EMPTY
26973: LIST
26974: LIST
26975: PUSH
26976: LD_INT 0
26978: PUSH
26979: LD_INT 2
26981: PUSH
26982: EMPTY
26983: LIST
26984: LIST
26985: PUSH
26986: LD_INT 1
26988: NEG
26989: PUSH
26990: LD_INT 1
26992: PUSH
26993: EMPTY
26994: LIST
26995: LIST
26996: PUSH
26997: EMPTY
26998: LIST
26999: LIST
27000: LIST
27001: LIST
27002: LIST
27003: LIST
27004: LIST
27005: LIST
27006: LIST
27007: LIST
27008: LIST
27009: LIST
27010: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
27011: LD_ADDR_VAR 0 51
27015: PUSH
27016: LD_INT 0
27018: PUSH
27019: LD_INT 0
27021: PUSH
27022: EMPTY
27023: LIST
27024: LIST
27025: PUSH
27026: LD_INT 0
27028: PUSH
27029: LD_INT 1
27031: NEG
27032: PUSH
27033: EMPTY
27034: LIST
27035: LIST
27036: PUSH
27037: LD_INT 1
27039: PUSH
27040: LD_INT 0
27042: PUSH
27043: EMPTY
27044: LIST
27045: LIST
27046: PUSH
27047: LD_INT 1
27049: PUSH
27050: LD_INT 1
27052: PUSH
27053: EMPTY
27054: LIST
27055: LIST
27056: PUSH
27057: LD_INT 0
27059: PUSH
27060: LD_INT 1
27062: PUSH
27063: EMPTY
27064: LIST
27065: LIST
27066: PUSH
27067: LD_INT 1
27069: NEG
27070: PUSH
27071: LD_INT 0
27073: PUSH
27074: EMPTY
27075: LIST
27076: LIST
27077: PUSH
27078: LD_INT 1
27080: NEG
27081: PUSH
27082: LD_INT 1
27084: NEG
27085: PUSH
27086: EMPTY
27087: LIST
27088: LIST
27089: PUSH
27090: LD_INT 1
27092: PUSH
27093: LD_INT 2
27095: PUSH
27096: EMPTY
27097: LIST
27098: LIST
27099: PUSH
27100: LD_INT 0
27102: PUSH
27103: LD_INT 2
27105: PUSH
27106: EMPTY
27107: LIST
27108: LIST
27109: PUSH
27110: LD_INT 1
27112: NEG
27113: PUSH
27114: LD_INT 1
27116: PUSH
27117: EMPTY
27118: LIST
27119: LIST
27120: PUSH
27121: LD_INT 2
27123: NEG
27124: PUSH
27125: LD_INT 0
27127: PUSH
27128: EMPTY
27129: LIST
27130: LIST
27131: PUSH
27132: LD_INT 2
27134: NEG
27135: PUSH
27136: LD_INT 1
27138: NEG
27139: PUSH
27140: EMPTY
27141: LIST
27142: LIST
27143: PUSH
27144: EMPTY
27145: LIST
27146: LIST
27147: LIST
27148: LIST
27149: LIST
27150: LIST
27151: LIST
27152: LIST
27153: LIST
27154: LIST
27155: LIST
27156: LIST
27157: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27158: LD_ADDR_VAR 0 52
27162: PUSH
27163: LD_INT 0
27165: PUSH
27166: LD_INT 0
27168: PUSH
27169: EMPTY
27170: LIST
27171: LIST
27172: PUSH
27173: LD_INT 0
27175: PUSH
27176: LD_INT 1
27178: NEG
27179: PUSH
27180: EMPTY
27181: LIST
27182: LIST
27183: PUSH
27184: LD_INT 1
27186: PUSH
27187: LD_INT 0
27189: PUSH
27190: EMPTY
27191: LIST
27192: LIST
27193: PUSH
27194: LD_INT 1
27196: PUSH
27197: LD_INT 1
27199: PUSH
27200: EMPTY
27201: LIST
27202: LIST
27203: PUSH
27204: LD_INT 0
27206: PUSH
27207: LD_INT 1
27209: PUSH
27210: EMPTY
27211: LIST
27212: LIST
27213: PUSH
27214: LD_INT 1
27216: NEG
27217: PUSH
27218: LD_INT 0
27220: PUSH
27221: EMPTY
27222: LIST
27223: LIST
27224: PUSH
27225: LD_INT 1
27227: NEG
27228: PUSH
27229: LD_INT 1
27231: NEG
27232: PUSH
27233: EMPTY
27234: LIST
27235: LIST
27236: PUSH
27237: LD_INT 1
27239: NEG
27240: PUSH
27241: LD_INT 2
27243: NEG
27244: PUSH
27245: EMPTY
27246: LIST
27247: LIST
27248: PUSH
27249: LD_INT 1
27251: NEG
27252: PUSH
27253: LD_INT 1
27255: PUSH
27256: EMPTY
27257: LIST
27258: LIST
27259: PUSH
27260: LD_INT 2
27262: NEG
27263: PUSH
27264: LD_INT 0
27266: PUSH
27267: EMPTY
27268: LIST
27269: LIST
27270: PUSH
27271: LD_INT 2
27273: NEG
27274: PUSH
27275: LD_INT 1
27277: NEG
27278: PUSH
27279: EMPTY
27280: LIST
27281: LIST
27282: PUSH
27283: LD_INT 2
27285: NEG
27286: PUSH
27287: LD_INT 2
27289: NEG
27290: PUSH
27291: EMPTY
27292: LIST
27293: LIST
27294: PUSH
27295: EMPTY
27296: LIST
27297: LIST
27298: LIST
27299: LIST
27300: LIST
27301: LIST
27302: LIST
27303: LIST
27304: LIST
27305: LIST
27306: LIST
27307: LIST
27308: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27309: LD_ADDR_VAR 0 53
27313: PUSH
27314: LD_INT 0
27316: PUSH
27317: LD_INT 0
27319: PUSH
27320: EMPTY
27321: LIST
27322: LIST
27323: PUSH
27324: LD_INT 0
27326: PUSH
27327: LD_INT 1
27329: NEG
27330: PUSH
27331: EMPTY
27332: LIST
27333: LIST
27334: PUSH
27335: LD_INT 1
27337: PUSH
27338: LD_INT 0
27340: PUSH
27341: EMPTY
27342: LIST
27343: LIST
27344: PUSH
27345: LD_INT 1
27347: PUSH
27348: LD_INT 1
27350: PUSH
27351: EMPTY
27352: LIST
27353: LIST
27354: PUSH
27355: LD_INT 0
27357: PUSH
27358: LD_INT 1
27360: PUSH
27361: EMPTY
27362: LIST
27363: LIST
27364: PUSH
27365: LD_INT 1
27367: NEG
27368: PUSH
27369: LD_INT 0
27371: PUSH
27372: EMPTY
27373: LIST
27374: LIST
27375: PUSH
27376: LD_INT 1
27378: NEG
27379: PUSH
27380: LD_INT 1
27382: NEG
27383: PUSH
27384: EMPTY
27385: LIST
27386: LIST
27387: PUSH
27388: LD_INT 1
27390: NEG
27391: PUSH
27392: LD_INT 2
27394: NEG
27395: PUSH
27396: EMPTY
27397: LIST
27398: LIST
27399: PUSH
27400: LD_INT 0
27402: PUSH
27403: LD_INT 2
27405: NEG
27406: PUSH
27407: EMPTY
27408: LIST
27409: LIST
27410: PUSH
27411: LD_INT 1
27413: PUSH
27414: LD_INT 1
27416: NEG
27417: PUSH
27418: EMPTY
27419: LIST
27420: LIST
27421: PUSH
27422: LD_INT 2
27424: PUSH
27425: LD_INT 0
27427: PUSH
27428: EMPTY
27429: LIST
27430: LIST
27431: PUSH
27432: LD_INT 2
27434: PUSH
27435: LD_INT 1
27437: PUSH
27438: EMPTY
27439: LIST
27440: LIST
27441: PUSH
27442: LD_INT 2
27444: PUSH
27445: LD_INT 2
27447: PUSH
27448: EMPTY
27449: LIST
27450: LIST
27451: PUSH
27452: LD_INT 1
27454: PUSH
27455: LD_INT 2
27457: PUSH
27458: EMPTY
27459: LIST
27460: LIST
27461: PUSH
27462: LD_INT 0
27464: PUSH
27465: LD_INT 2
27467: PUSH
27468: EMPTY
27469: LIST
27470: LIST
27471: PUSH
27472: LD_INT 1
27474: NEG
27475: PUSH
27476: LD_INT 1
27478: PUSH
27479: EMPTY
27480: LIST
27481: LIST
27482: PUSH
27483: LD_INT 2
27485: NEG
27486: PUSH
27487: LD_INT 0
27489: PUSH
27490: EMPTY
27491: LIST
27492: LIST
27493: PUSH
27494: LD_INT 2
27496: NEG
27497: PUSH
27498: LD_INT 1
27500: NEG
27501: PUSH
27502: EMPTY
27503: LIST
27504: LIST
27505: PUSH
27506: LD_INT 2
27508: NEG
27509: PUSH
27510: LD_INT 2
27512: NEG
27513: PUSH
27514: EMPTY
27515: LIST
27516: LIST
27517: PUSH
27518: EMPTY
27519: LIST
27520: LIST
27521: LIST
27522: LIST
27523: LIST
27524: LIST
27525: LIST
27526: LIST
27527: LIST
27528: LIST
27529: LIST
27530: LIST
27531: LIST
27532: LIST
27533: LIST
27534: LIST
27535: LIST
27536: LIST
27537: LIST
27538: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27539: LD_ADDR_VAR 0 54
27543: PUSH
27544: LD_INT 0
27546: PUSH
27547: LD_INT 0
27549: PUSH
27550: EMPTY
27551: LIST
27552: LIST
27553: PUSH
27554: LD_INT 0
27556: PUSH
27557: LD_INT 1
27559: NEG
27560: PUSH
27561: EMPTY
27562: LIST
27563: LIST
27564: PUSH
27565: LD_INT 1
27567: PUSH
27568: LD_INT 0
27570: PUSH
27571: EMPTY
27572: LIST
27573: LIST
27574: PUSH
27575: LD_INT 1
27577: PUSH
27578: LD_INT 1
27580: PUSH
27581: EMPTY
27582: LIST
27583: LIST
27584: PUSH
27585: LD_INT 0
27587: PUSH
27588: LD_INT 1
27590: PUSH
27591: EMPTY
27592: LIST
27593: LIST
27594: PUSH
27595: LD_INT 1
27597: NEG
27598: PUSH
27599: LD_INT 0
27601: PUSH
27602: EMPTY
27603: LIST
27604: LIST
27605: PUSH
27606: LD_INT 1
27608: NEG
27609: PUSH
27610: LD_INT 1
27612: NEG
27613: PUSH
27614: EMPTY
27615: LIST
27616: LIST
27617: PUSH
27618: LD_INT 1
27620: NEG
27621: PUSH
27622: LD_INT 2
27624: NEG
27625: PUSH
27626: EMPTY
27627: LIST
27628: LIST
27629: PUSH
27630: LD_INT 0
27632: PUSH
27633: LD_INT 2
27635: NEG
27636: PUSH
27637: EMPTY
27638: LIST
27639: LIST
27640: PUSH
27641: LD_INT 1
27643: PUSH
27644: LD_INT 1
27646: NEG
27647: PUSH
27648: EMPTY
27649: LIST
27650: LIST
27651: PUSH
27652: LD_INT 2
27654: PUSH
27655: LD_INT 0
27657: PUSH
27658: EMPTY
27659: LIST
27660: LIST
27661: PUSH
27662: LD_INT 2
27664: PUSH
27665: LD_INT 1
27667: PUSH
27668: EMPTY
27669: LIST
27670: LIST
27671: PUSH
27672: LD_INT 2
27674: PUSH
27675: LD_INT 2
27677: PUSH
27678: EMPTY
27679: LIST
27680: LIST
27681: PUSH
27682: LD_INT 1
27684: PUSH
27685: LD_INT 2
27687: PUSH
27688: EMPTY
27689: LIST
27690: LIST
27691: PUSH
27692: LD_INT 0
27694: PUSH
27695: LD_INT 2
27697: PUSH
27698: EMPTY
27699: LIST
27700: LIST
27701: PUSH
27702: LD_INT 1
27704: NEG
27705: PUSH
27706: LD_INT 1
27708: PUSH
27709: EMPTY
27710: LIST
27711: LIST
27712: PUSH
27713: LD_INT 2
27715: NEG
27716: PUSH
27717: LD_INT 0
27719: PUSH
27720: EMPTY
27721: LIST
27722: LIST
27723: PUSH
27724: LD_INT 2
27726: NEG
27727: PUSH
27728: LD_INT 1
27730: NEG
27731: PUSH
27732: EMPTY
27733: LIST
27734: LIST
27735: PUSH
27736: LD_INT 2
27738: NEG
27739: PUSH
27740: LD_INT 2
27742: NEG
27743: PUSH
27744: EMPTY
27745: LIST
27746: LIST
27747: PUSH
27748: EMPTY
27749: LIST
27750: LIST
27751: LIST
27752: LIST
27753: LIST
27754: LIST
27755: LIST
27756: LIST
27757: LIST
27758: LIST
27759: LIST
27760: LIST
27761: LIST
27762: LIST
27763: LIST
27764: LIST
27765: LIST
27766: LIST
27767: LIST
27768: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27769: LD_ADDR_VAR 0 55
27773: PUSH
27774: LD_INT 0
27776: PUSH
27777: LD_INT 0
27779: PUSH
27780: EMPTY
27781: LIST
27782: LIST
27783: PUSH
27784: LD_INT 0
27786: PUSH
27787: LD_INT 1
27789: NEG
27790: PUSH
27791: EMPTY
27792: LIST
27793: LIST
27794: PUSH
27795: LD_INT 1
27797: PUSH
27798: LD_INT 0
27800: PUSH
27801: EMPTY
27802: LIST
27803: LIST
27804: PUSH
27805: LD_INT 1
27807: PUSH
27808: LD_INT 1
27810: PUSH
27811: EMPTY
27812: LIST
27813: LIST
27814: PUSH
27815: LD_INT 0
27817: PUSH
27818: LD_INT 1
27820: PUSH
27821: EMPTY
27822: LIST
27823: LIST
27824: PUSH
27825: LD_INT 1
27827: NEG
27828: PUSH
27829: LD_INT 0
27831: PUSH
27832: EMPTY
27833: LIST
27834: LIST
27835: PUSH
27836: LD_INT 1
27838: NEG
27839: PUSH
27840: LD_INT 1
27842: NEG
27843: PUSH
27844: EMPTY
27845: LIST
27846: LIST
27847: PUSH
27848: LD_INT 1
27850: NEG
27851: PUSH
27852: LD_INT 2
27854: NEG
27855: PUSH
27856: EMPTY
27857: LIST
27858: LIST
27859: PUSH
27860: LD_INT 0
27862: PUSH
27863: LD_INT 2
27865: NEG
27866: PUSH
27867: EMPTY
27868: LIST
27869: LIST
27870: PUSH
27871: LD_INT 1
27873: PUSH
27874: LD_INT 1
27876: NEG
27877: PUSH
27878: EMPTY
27879: LIST
27880: LIST
27881: PUSH
27882: LD_INT 2
27884: PUSH
27885: LD_INT 0
27887: PUSH
27888: EMPTY
27889: LIST
27890: LIST
27891: PUSH
27892: LD_INT 2
27894: PUSH
27895: LD_INT 1
27897: PUSH
27898: EMPTY
27899: LIST
27900: LIST
27901: PUSH
27902: LD_INT 2
27904: PUSH
27905: LD_INT 2
27907: PUSH
27908: EMPTY
27909: LIST
27910: LIST
27911: PUSH
27912: LD_INT 1
27914: PUSH
27915: LD_INT 2
27917: PUSH
27918: EMPTY
27919: LIST
27920: LIST
27921: PUSH
27922: LD_INT 0
27924: PUSH
27925: LD_INT 2
27927: PUSH
27928: EMPTY
27929: LIST
27930: LIST
27931: PUSH
27932: LD_INT 1
27934: NEG
27935: PUSH
27936: LD_INT 1
27938: PUSH
27939: EMPTY
27940: LIST
27941: LIST
27942: PUSH
27943: LD_INT 2
27945: NEG
27946: PUSH
27947: LD_INT 0
27949: PUSH
27950: EMPTY
27951: LIST
27952: LIST
27953: PUSH
27954: LD_INT 2
27956: NEG
27957: PUSH
27958: LD_INT 1
27960: NEG
27961: PUSH
27962: EMPTY
27963: LIST
27964: LIST
27965: PUSH
27966: LD_INT 2
27968: NEG
27969: PUSH
27970: LD_INT 2
27972: NEG
27973: PUSH
27974: EMPTY
27975: LIST
27976: LIST
27977: PUSH
27978: EMPTY
27979: LIST
27980: LIST
27981: LIST
27982: LIST
27983: LIST
27984: LIST
27985: LIST
27986: LIST
27987: LIST
27988: LIST
27989: LIST
27990: LIST
27991: LIST
27992: LIST
27993: LIST
27994: LIST
27995: LIST
27996: LIST
27997: LIST
27998: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27999: LD_ADDR_VAR 0 56
28003: PUSH
28004: LD_INT 0
28006: PUSH
28007: LD_INT 0
28009: PUSH
28010: EMPTY
28011: LIST
28012: LIST
28013: PUSH
28014: LD_INT 0
28016: PUSH
28017: LD_INT 1
28019: NEG
28020: PUSH
28021: EMPTY
28022: LIST
28023: LIST
28024: PUSH
28025: LD_INT 1
28027: PUSH
28028: LD_INT 0
28030: PUSH
28031: EMPTY
28032: LIST
28033: LIST
28034: PUSH
28035: LD_INT 1
28037: PUSH
28038: LD_INT 1
28040: PUSH
28041: EMPTY
28042: LIST
28043: LIST
28044: PUSH
28045: LD_INT 0
28047: PUSH
28048: LD_INT 1
28050: PUSH
28051: EMPTY
28052: LIST
28053: LIST
28054: PUSH
28055: LD_INT 1
28057: NEG
28058: PUSH
28059: LD_INT 0
28061: PUSH
28062: EMPTY
28063: LIST
28064: LIST
28065: PUSH
28066: LD_INT 1
28068: NEG
28069: PUSH
28070: LD_INT 1
28072: NEG
28073: PUSH
28074: EMPTY
28075: LIST
28076: LIST
28077: PUSH
28078: LD_INT 1
28080: NEG
28081: PUSH
28082: LD_INT 2
28084: NEG
28085: PUSH
28086: EMPTY
28087: LIST
28088: LIST
28089: PUSH
28090: LD_INT 0
28092: PUSH
28093: LD_INT 2
28095: NEG
28096: PUSH
28097: EMPTY
28098: LIST
28099: LIST
28100: PUSH
28101: LD_INT 1
28103: PUSH
28104: LD_INT 1
28106: NEG
28107: PUSH
28108: EMPTY
28109: LIST
28110: LIST
28111: PUSH
28112: LD_INT 2
28114: PUSH
28115: LD_INT 0
28117: PUSH
28118: EMPTY
28119: LIST
28120: LIST
28121: PUSH
28122: LD_INT 2
28124: PUSH
28125: LD_INT 1
28127: PUSH
28128: EMPTY
28129: LIST
28130: LIST
28131: PUSH
28132: LD_INT 2
28134: PUSH
28135: LD_INT 2
28137: PUSH
28138: EMPTY
28139: LIST
28140: LIST
28141: PUSH
28142: LD_INT 1
28144: PUSH
28145: LD_INT 2
28147: PUSH
28148: EMPTY
28149: LIST
28150: LIST
28151: PUSH
28152: LD_INT 0
28154: PUSH
28155: LD_INT 2
28157: PUSH
28158: EMPTY
28159: LIST
28160: LIST
28161: PUSH
28162: LD_INT 1
28164: NEG
28165: PUSH
28166: LD_INT 1
28168: PUSH
28169: EMPTY
28170: LIST
28171: LIST
28172: PUSH
28173: LD_INT 2
28175: NEG
28176: PUSH
28177: LD_INT 0
28179: PUSH
28180: EMPTY
28181: LIST
28182: LIST
28183: PUSH
28184: LD_INT 2
28186: NEG
28187: PUSH
28188: LD_INT 1
28190: NEG
28191: PUSH
28192: EMPTY
28193: LIST
28194: LIST
28195: PUSH
28196: LD_INT 2
28198: NEG
28199: PUSH
28200: LD_INT 2
28202: NEG
28203: PUSH
28204: EMPTY
28205: LIST
28206: LIST
28207: PUSH
28208: EMPTY
28209: LIST
28210: LIST
28211: LIST
28212: LIST
28213: LIST
28214: LIST
28215: LIST
28216: LIST
28217: LIST
28218: LIST
28219: LIST
28220: LIST
28221: LIST
28222: LIST
28223: LIST
28224: LIST
28225: LIST
28226: LIST
28227: LIST
28228: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28229: LD_ADDR_VAR 0 57
28233: PUSH
28234: LD_INT 0
28236: PUSH
28237: LD_INT 0
28239: PUSH
28240: EMPTY
28241: LIST
28242: LIST
28243: PUSH
28244: LD_INT 0
28246: PUSH
28247: LD_INT 1
28249: NEG
28250: PUSH
28251: EMPTY
28252: LIST
28253: LIST
28254: PUSH
28255: LD_INT 1
28257: PUSH
28258: LD_INT 0
28260: PUSH
28261: EMPTY
28262: LIST
28263: LIST
28264: PUSH
28265: LD_INT 1
28267: PUSH
28268: LD_INT 1
28270: PUSH
28271: EMPTY
28272: LIST
28273: LIST
28274: PUSH
28275: LD_INT 0
28277: PUSH
28278: LD_INT 1
28280: PUSH
28281: EMPTY
28282: LIST
28283: LIST
28284: PUSH
28285: LD_INT 1
28287: NEG
28288: PUSH
28289: LD_INT 0
28291: PUSH
28292: EMPTY
28293: LIST
28294: LIST
28295: PUSH
28296: LD_INT 1
28298: NEG
28299: PUSH
28300: LD_INT 1
28302: NEG
28303: PUSH
28304: EMPTY
28305: LIST
28306: LIST
28307: PUSH
28308: LD_INT 1
28310: NEG
28311: PUSH
28312: LD_INT 2
28314: NEG
28315: PUSH
28316: EMPTY
28317: LIST
28318: LIST
28319: PUSH
28320: LD_INT 0
28322: PUSH
28323: LD_INT 2
28325: NEG
28326: PUSH
28327: EMPTY
28328: LIST
28329: LIST
28330: PUSH
28331: LD_INT 1
28333: PUSH
28334: LD_INT 1
28336: NEG
28337: PUSH
28338: EMPTY
28339: LIST
28340: LIST
28341: PUSH
28342: LD_INT 2
28344: PUSH
28345: LD_INT 0
28347: PUSH
28348: EMPTY
28349: LIST
28350: LIST
28351: PUSH
28352: LD_INT 2
28354: PUSH
28355: LD_INT 1
28357: PUSH
28358: EMPTY
28359: LIST
28360: LIST
28361: PUSH
28362: LD_INT 2
28364: PUSH
28365: LD_INT 2
28367: PUSH
28368: EMPTY
28369: LIST
28370: LIST
28371: PUSH
28372: LD_INT 1
28374: PUSH
28375: LD_INT 2
28377: PUSH
28378: EMPTY
28379: LIST
28380: LIST
28381: PUSH
28382: LD_INT 0
28384: PUSH
28385: LD_INT 2
28387: PUSH
28388: EMPTY
28389: LIST
28390: LIST
28391: PUSH
28392: LD_INT 1
28394: NEG
28395: PUSH
28396: LD_INT 1
28398: PUSH
28399: EMPTY
28400: LIST
28401: LIST
28402: PUSH
28403: LD_INT 2
28405: NEG
28406: PUSH
28407: LD_INT 0
28409: PUSH
28410: EMPTY
28411: LIST
28412: LIST
28413: PUSH
28414: LD_INT 2
28416: NEG
28417: PUSH
28418: LD_INT 1
28420: NEG
28421: PUSH
28422: EMPTY
28423: LIST
28424: LIST
28425: PUSH
28426: LD_INT 2
28428: NEG
28429: PUSH
28430: LD_INT 2
28432: NEG
28433: PUSH
28434: EMPTY
28435: LIST
28436: LIST
28437: PUSH
28438: EMPTY
28439: LIST
28440: LIST
28441: LIST
28442: LIST
28443: LIST
28444: LIST
28445: LIST
28446: LIST
28447: LIST
28448: LIST
28449: LIST
28450: LIST
28451: LIST
28452: LIST
28453: LIST
28454: LIST
28455: LIST
28456: LIST
28457: LIST
28458: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28459: LD_ADDR_VAR 0 58
28463: PUSH
28464: LD_INT 0
28466: PUSH
28467: LD_INT 0
28469: PUSH
28470: EMPTY
28471: LIST
28472: LIST
28473: PUSH
28474: LD_INT 0
28476: PUSH
28477: LD_INT 1
28479: NEG
28480: PUSH
28481: EMPTY
28482: LIST
28483: LIST
28484: PUSH
28485: LD_INT 1
28487: PUSH
28488: LD_INT 0
28490: PUSH
28491: EMPTY
28492: LIST
28493: LIST
28494: PUSH
28495: LD_INT 1
28497: PUSH
28498: LD_INT 1
28500: PUSH
28501: EMPTY
28502: LIST
28503: LIST
28504: PUSH
28505: LD_INT 0
28507: PUSH
28508: LD_INT 1
28510: PUSH
28511: EMPTY
28512: LIST
28513: LIST
28514: PUSH
28515: LD_INT 1
28517: NEG
28518: PUSH
28519: LD_INT 0
28521: PUSH
28522: EMPTY
28523: LIST
28524: LIST
28525: PUSH
28526: LD_INT 1
28528: NEG
28529: PUSH
28530: LD_INT 1
28532: NEG
28533: PUSH
28534: EMPTY
28535: LIST
28536: LIST
28537: PUSH
28538: LD_INT 1
28540: NEG
28541: PUSH
28542: LD_INT 2
28544: NEG
28545: PUSH
28546: EMPTY
28547: LIST
28548: LIST
28549: PUSH
28550: LD_INT 0
28552: PUSH
28553: LD_INT 2
28555: NEG
28556: PUSH
28557: EMPTY
28558: LIST
28559: LIST
28560: PUSH
28561: LD_INT 1
28563: PUSH
28564: LD_INT 1
28566: NEG
28567: PUSH
28568: EMPTY
28569: LIST
28570: LIST
28571: PUSH
28572: LD_INT 2
28574: PUSH
28575: LD_INT 0
28577: PUSH
28578: EMPTY
28579: LIST
28580: LIST
28581: PUSH
28582: LD_INT 2
28584: PUSH
28585: LD_INT 1
28587: PUSH
28588: EMPTY
28589: LIST
28590: LIST
28591: PUSH
28592: LD_INT 2
28594: PUSH
28595: LD_INT 2
28597: PUSH
28598: EMPTY
28599: LIST
28600: LIST
28601: PUSH
28602: LD_INT 1
28604: PUSH
28605: LD_INT 2
28607: PUSH
28608: EMPTY
28609: LIST
28610: LIST
28611: PUSH
28612: LD_INT 0
28614: PUSH
28615: LD_INT 2
28617: PUSH
28618: EMPTY
28619: LIST
28620: LIST
28621: PUSH
28622: LD_INT 1
28624: NEG
28625: PUSH
28626: LD_INT 1
28628: PUSH
28629: EMPTY
28630: LIST
28631: LIST
28632: PUSH
28633: LD_INT 2
28635: NEG
28636: PUSH
28637: LD_INT 0
28639: PUSH
28640: EMPTY
28641: LIST
28642: LIST
28643: PUSH
28644: LD_INT 2
28646: NEG
28647: PUSH
28648: LD_INT 1
28650: NEG
28651: PUSH
28652: EMPTY
28653: LIST
28654: LIST
28655: PUSH
28656: LD_INT 2
28658: NEG
28659: PUSH
28660: LD_INT 2
28662: NEG
28663: PUSH
28664: EMPTY
28665: LIST
28666: LIST
28667: PUSH
28668: EMPTY
28669: LIST
28670: LIST
28671: LIST
28672: LIST
28673: LIST
28674: LIST
28675: LIST
28676: LIST
28677: LIST
28678: LIST
28679: LIST
28680: LIST
28681: LIST
28682: LIST
28683: LIST
28684: LIST
28685: LIST
28686: LIST
28687: LIST
28688: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28689: LD_ADDR_VAR 0 59
28693: PUSH
28694: LD_INT 0
28696: PUSH
28697: LD_INT 0
28699: PUSH
28700: EMPTY
28701: LIST
28702: LIST
28703: PUSH
28704: LD_INT 0
28706: PUSH
28707: LD_INT 1
28709: NEG
28710: PUSH
28711: EMPTY
28712: LIST
28713: LIST
28714: PUSH
28715: LD_INT 1
28717: PUSH
28718: LD_INT 0
28720: PUSH
28721: EMPTY
28722: LIST
28723: LIST
28724: PUSH
28725: LD_INT 1
28727: PUSH
28728: LD_INT 1
28730: PUSH
28731: EMPTY
28732: LIST
28733: LIST
28734: PUSH
28735: LD_INT 0
28737: PUSH
28738: LD_INT 1
28740: PUSH
28741: EMPTY
28742: LIST
28743: LIST
28744: PUSH
28745: LD_INT 1
28747: NEG
28748: PUSH
28749: LD_INT 0
28751: PUSH
28752: EMPTY
28753: LIST
28754: LIST
28755: PUSH
28756: LD_INT 1
28758: NEG
28759: PUSH
28760: LD_INT 1
28762: NEG
28763: PUSH
28764: EMPTY
28765: LIST
28766: LIST
28767: PUSH
28768: EMPTY
28769: LIST
28770: LIST
28771: LIST
28772: LIST
28773: LIST
28774: LIST
28775: LIST
28776: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28777: LD_ADDR_VAR 0 60
28781: PUSH
28782: LD_INT 0
28784: PUSH
28785: LD_INT 0
28787: PUSH
28788: EMPTY
28789: LIST
28790: LIST
28791: PUSH
28792: LD_INT 0
28794: PUSH
28795: LD_INT 1
28797: NEG
28798: PUSH
28799: EMPTY
28800: LIST
28801: LIST
28802: PUSH
28803: LD_INT 1
28805: PUSH
28806: LD_INT 0
28808: PUSH
28809: EMPTY
28810: LIST
28811: LIST
28812: PUSH
28813: LD_INT 1
28815: PUSH
28816: LD_INT 1
28818: PUSH
28819: EMPTY
28820: LIST
28821: LIST
28822: PUSH
28823: LD_INT 0
28825: PUSH
28826: LD_INT 1
28828: PUSH
28829: EMPTY
28830: LIST
28831: LIST
28832: PUSH
28833: LD_INT 1
28835: NEG
28836: PUSH
28837: LD_INT 0
28839: PUSH
28840: EMPTY
28841: LIST
28842: LIST
28843: PUSH
28844: LD_INT 1
28846: NEG
28847: PUSH
28848: LD_INT 1
28850: NEG
28851: PUSH
28852: EMPTY
28853: LIST
28854: LIST
28855: PUSH
28856: EMPTY
28857: LIST
28858: LIST
28859: LIST
28860: LIST
28861: LIST
28862: LIST
28863: LIST
28864: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28865: LD_ADDR_VAR 0 61
28869: PUSH
28870: LD_INT 0
28872: PUSH
28873: LD_INT 0
28875: PUSH
28876: EMPTY
28877: LIST
28878: LIST
28879: PUSH
28880: LD_INT 0
28882: PUSH
28883: LD_INT 1
28885: NEG
28886: PUSH
28887: EMPTY
28888: LIST
28889: LIST
28890: PUSH
28891: LD_INT 1
28893: PUSH
28894: LD_INT 0
28896: PUSH
28897: EMPTY
28898: LIST
28899: LIST
28900: PUSH
28901: LD_INT 1
28903: PUSH
28904: LD_INT 1
28906: PUSH
28907: EMPTY
28908: LIST
28909: LIST
28910: PUSH
28911: LD_INT 0
28913: PUSH
28914: LD_INT 1
28916: PUSH
28917: EMPTY
28918: LIST
28919: LIST
28920: PUSH
28921: LD_INT 1
28923: NEG
28924: PUSH
28925: LD_INT 0
28927: PUSH
28928: EMPTY
28929: LIST
28930: LIST
28931: PUSH
28932: LD_INT 1
28934: NEG
28935: PUSH
28936: LD_INT 1
28938: NEG
28939: PUSH
28940: EMPTY
28941: LIST
28942: LIST
28943: PUSH
28944: EMPTY
28945: LIST
28946: LIST
28947: LIST
28948: LIST
28949: LIST
28950: LIST
28951: LIST
28952: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28953: LD_ADDR_VAR 0 62
28957: PUSH
28958: LD_INT 0
28960: PUSH
28961: LD_INT 0
28963: PUSH
28964: EMPTY
28965: LIST
28966: LIST
28967: PUSH
28968: LD_INT 0
28970: PUSH
28971: LD_INT 1
28973: NEG
28974: PUSH
28975: EMPTY
28976: LIST
28977: LIST
28978: PUSH
28979: LD_INT 1
28981: PUSH
28982: LD_INT 0
28984: PUSH
28985: EMPTY
28986: LIST
28987: LIST
28988: PUSH
28989: LD_INT 1
28991: PUSH
28992: LD_INT 1
28994: PUSH
28995: EMPTY
28996: LIST
28997: LIST
28998: PUSH
28999: LD_INT 0
29001: PUSH
29002: LD_INT 1
29004: PUSH
29005: EMPTY
29006: LIST
29007: LIST
29008: PUSH
29009: LD_INT 1
29011: NEG
29012: PUSH
29013: LD_INT 0
29015: PUSH
29016: EMPTY
29017: LIST
29018: LIST
29019: PUSH
29020: LD_INT 1
29022: NEG
29023: PUSH
29024: LD_INT 1
29026: NEG
29027: PUSH
29028: EMPTY
29029: LIST
29030: LIST
29031: PUSH
29032: EMPTY
29033: LIST
29034: LIST
29035: LIST
29036: LIST
29037: LIST
29038: LIST
29039: LIST
29040: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29041: LD_ADDR_VAR 0 63
29045: PUSH
29046: LD_INT 0
29048: PUSH
29049: LD_INT 0
29051: PUSH
29052: EMPTY
29053: LIST
29054: LIST
29055: PUSH
29056: LD_INT 0
29058: PUSH
29059: LD_INT 1
29061: NEG
29062: PUSH
29063: EMPTY
29064: LIST
29065: LIST
29066: PUSH
29067: LD_INT 1
29069: PUSH
29070: LD_INT 0
29072: PUSH
29073: EMPTY
29074: LIST
29075: LIST
29076: PUSH
29077: LD_INT 1
29079: PUSH
29080: LD_INT 1
29082: PUSH
29083: EMPTY
29084: LIST
29085: LIST
29086: PUSH
29087: LD_INT 0
29089: PUSH
29090: LD_INT 1
29092: PUSH
29093: EMPTY
29094: LIST
29095: LIST
29096: PUSH
29097: LD_INT 1
29099: NEG
29100: PUSH
29101: LD_INT 0
29103: PUSH
29104: EMPTY
29105: LIST
29106: LIST
29107: PUSH
29108: LD_INT 1
29110: NEG
29111: PUSH
29112: LD_INT 1
29114: NEG
29115: PUSH
29116: EMPTY
29117: LIST
29118: LIST
29119: PUSH
29120: EMPTY
29121: LIST
29122: LIST
29123: LIST
29124: LIST
29125: LIST
29126: LIST
29127: LIST
29128: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29129: LD_ADDR_VAR 0 64
29133: PUSH
29134: LD_INT 0
29136: PUSH
29137: LD_INT 0
29139: PUSH
29140: EMPTY
29141: LIST
29142: LIST
29143: PUSH
29144: LD_INT 0
29146: PUSH
29147: LD_INT 1
29149: NEG
29150: PUSH
29151: EMPTY
29152: LIST
29153: LIST
29154: PUSH
29155: LD_INT 1
29157: PUSH
29158: LD_INT 0
29160: PUSH
29161: EMPTY
29162: LIST
29163: LIST
29164: PUSH
29165: LD_INT 1
29167: PUSH
29168: LD_INT 1
29170: PUSH
29171: EMPTY
29172: LIST
29173: LIST
29174: PUSH
29175: LD_INT 0
29177: PUSH
29178: LD_INT 1
29180: PUSH
29181: EMPTY
29182: LIST
29183: LIST
29184: PUSH
29185: LD_INT 1
29187: NEG
29188: PUSH
29189: LD_INT 0
29191: PUSH
29192: EMPTY
29193: LIST
29194: LIST
29195: PUSH
29196: LD_INT 1
29198: NEG
29199: PUSH
29200: LD_INT 1
29202: NEG
29203: PUSH
29204: EMPTY
29205: LIST
29206: LIST
29207: PUSH
29208: EMPTY
29209: LIST
29210: LIST
29211: LIST
29212: LIST
29213: LIST
29214: LIST
29215: LIST
29216: ST_TO_ADDR
// end ; 1 :
29217: GO 35114
29219: LD_INT 1
29221: DOUBLE
29222: EQUAL
29223: IFTRUE 29227
29225: GO 31850
29227: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29228: LD_ADDR_VAR 0 11
29232: PUSH
29233: LD_INT 1
29235: NEG
29236: PUSH
29237: LD_INT 3
29239: NEG
29240: PUSH
29241: EMPTY
29242: LIST
29243: LIST
29244: PUSH
29245: LD_INT 0
29247: PUSH
29248: LD_INT 3
29250: NEG
29251: PUSH
29252: EMPTY
29253: LIST
29254: LIST
29255: PUSH
29256: LD_INT 1
29258: PUSH
29259: LD_INT 2
29261: NEG
29262: PUSH
29263: EMPTY
29264: LIST
29265: LIST
29266: PUSH
29267: EMPTY
29268: LIST
29269: LIST
29270: LIST
29271: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29272: LD_ADDR_VAR 0 12
29276: PUSH
29277: LD_INT 2
29279: PUSH
29280: LD_INT 1
29282: NEG
29283: PUSH
29284: EMPTY
29285: LIST
29286: LIST
29287: PUSH
29288: LD_INT 3
29290: PUSH
29291: LD_INT 0
29293: PUSH
29294: EMPTY
29295: LIST
29296: LIST
29297: PUSH
29298: LD_INT 3
29300: PUSH
29301: LD_INT 1
29303: PUSH
29304: EMPTY
29305: LIST
29306: LIST
29307: PUSH
29308: EMPTY
29309: LIST
29310: LIST
29311: LIST
29312: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29313: LD_ADDR_VAR 0 13
29317: PUSH
29318: LD_INT 3
29320: PUSH
29321: LD_INT 2
29323: PUSH
29324: EMPTY
29325: LIST
29326: LIST
29327: PUSH
29328: LD_INT 3
29330: PUSH
29331: LD_INT 3
29333: PUSH
29334: EMPTY
29335: LIST
29336: LIST
29337: PUSH
29338: LD_INT 2
29340: PUSH
29341: LD_INT 3
29343: PUSH
29344: EMPTY
29345: LIST
29346: LIST
29347: PUSH
29348: EMPTY
29349: LIST
29350: LIST
29351: LIST
29352: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29353: LD_ADDR_VAR 0 14
29357: PUSH
29358: LD_INT 1
29360: PUSH
29361: LD_INT 3
29363: PUSH
29364: EMPTY
29365: LIST
29366: LIST
29367: PUSH
29368: LD_INT 0
29370: PUSH
29371: LD_INT 3
29373: PUSH
29374: EMPTY
29375: LIST
29376: LIST
29377: PUSH
29378: LD_INT 1
29380: NEG
29381: PUSH
29382: LD_INT 2
29384: PUSH
29385: EMPTY
29386: LIST
29387: LIST
29388: PUSH
29389: EMPTY
29390: LIST
29391: LIST
29392: LIST
29393: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29394: LD_ADDR_VAR 0 15
29398: PUSH
29399: LD_INT 2
29401: NEG
29402: PUSH
29403: LD_INT 1
29405: PUSH
29406: EMPTY
29407: LIST
29408: LIST
29409: PUSH
29410: LD_INT 3
29412: NEG
29413: PUSH
29414: LD_INT 0
29416: PUSH
29417: EMPTY
29418: LIST
29419: LIST
29420: PUSH
29421: LD_INT 3
29423: NEG
29424: PUSH
29425: LD_INT 1
29427: NEG
29428: PUSH
29429: EMPTY
29430: LIST
29431: LIST
29432: PUSH
29433: EMPTY
29434: LIST
29435: LIST
29436: LIST
29437: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29438: LD_ADDR_VAR 0 16
29442: PUSH
29443: LD_INT 2
29445: NEG
29446: PUSH
29447: LD_INT 3
29449: NEG
29450: PUSH
29451: EMPTY
29452: LIST
29453: LIST
29454: PUSH
29455: LD_INT 3
29457: NEG
29458: PUSH
29459: LD_INT 2
29461: NEG
29462: PUSH
29463: EMPTY
29464: LIST
29465: LIST
29466: PUSH
29467: LD_INT 3
29469: NEG
29470: PUSH
29471: LD_INT 3
29473: NEG
29474: PUSH
29475: EMPTY
29476: LIST
29477: LIST
29478: PUSH
29479: EMPTY
29480: LIST
29481: LIST
29482: LIST
29483: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29484: LD_ADDR_VAR 0 17
29488: PUSH
29489: LD_INT 1
29491: NEG
29492: PUSH
29493: LD_INT 3
29495: NEG
29496: PUSH
29497: EMPTY
29498: LIST
29499: LIST
29500: PUSH
29501: LD_INT 0
29503: PUSH
29504: LD_INT 3
29506: NEG
29507: PUSH
29508: EMPTY
29509: LIST
29510: LIST
29511: PUSH
29512: LD_INT 1
29514: PUSH
29515: LD_INT 2
29517: NEG
29518: PUSH
29519: EMPTY
29520: LIST
29521: LIST
29522: PUSH
29523: EMPTY
29524: LIST
29525: LIST
29526: LIST
29527: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29528: LD_ADDR_VAR 0 18
29532: PUSH
29533: LD_INT 2
29535: PUSH
29536: LD_INT 1
29538: NEG
29539: PUSH
29540: EMPTY
29541: LIST
29542: LIST
29543: PUSH
29544: LD_INT 3
29546: PUSH
29547: LD_INT 0
29549: PUSH
29550: EMPTY
29551: LIST
29552: LIST
29553: PUSH
29554: LD_INT 3
29556: PUSH
29557: LD_INT 1
29559: PUSH
29560: EMPTY
29561: LIST
29562: LIST
29563: PUSH
29564: EMPTY
29565: LIST
29566: LIST
29567: LIST
29568: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29569: LD_ADDR_VAR 0 19
29573: PUSH
29574: LD_INT 3
29576: PUSH
29577: LD_INT 2
29579: PUSH
29580: EMPTY
29581: LIST
29582: LIST
29583: PUSH
29584: LD_INT 3
29586: PUSH
29587: LD_INT 3
29589: PUSH
29590: EMPTY
29591: LIST
29592: LIST
29593: PUSH
29594: LD_INT 2
29596: PUSH
29597: LD_INT 3
29599: PUSH
29600: EMPTY
29601: LIST
29602: LIST
29603: PUSH
29604: EMPTY
29605: LIST
29606: LIST
29607: LIST
29608: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29609: LD_ADDR_VAR 0 20
29613: PUSH
29614: LD_INT 1
29616: PUSH
29617: LD_INT 3
29619: PUSH
29620: EMPTY
29621: LIST
29622: LIST
29623: PUSH
29624: LD_INT 0
29626: PUSH
29627: LD_INT 3
29629: PUSH
29630: EMPTY
29631: LIST
29632: LIST
29633: PUSH
29634: LD_INT 1
29636: NEG
29637: PUSH
29638: LD_INT 2
29640: PUSH
29641: EMPTY
29642: LIST
29643: LIST
29644: PUSH
29645: EMPTY
29646: LIST
29647: LIST
29648: LIST
29649: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29650: LD_ADDR_VAR 0 21
29654: PUSH
29655: LD_INT 2
29657: NEG
29658: PUSH
29659: LD_INT 1
29661: PUSH
29662: EMPTY
29663: LIST
29664: LIST
29665: PUSH
29666: LD_INT 3
29668: NEG
29669: PUSH
29670: LD_INT 0
29672: PUSH
29673: EMPTY
29674: LIST
29675: LIST
29676: PUSH
29677: LD_INT 3
29679: NEG
29680: PUSH
29681: LD_INT 1
29683: NEG
29684: PUSH
29685: EMPTY
29686: LIST
29687: LIST
29688: PUSH
29689: EMPTY
29690: LIST
29691: LIST
29692: LIST
29693: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29694: LD_ADDR_VAR 0 22
29698: PUSH
29699: LD_INT 2
29701: NEG
29702: PUSH
29703: LD_INT 3
29705: NEG
29706: PUSH
29707: EMPTY
29708: LIST
29709: LIST
29710: PUSH
29711: LD_INT 3
29713: NEG
29714: PUSH
29715: LD_INT 2
29717: NEG
29718: PUSH
29719: EMPTY
29720: LIST
29721: LIST
29722: PUSH
29723: LD_INT 3
29725: NEG
29726: PUSH
29727: LD_INT 3
29729: NEG
29730: PUSH
29731: EMPTY
29732: LIST
29733: LIST
29734: PUSH
29735: EMPTY
29736: LIST
29737: LIST
29738: LIST
29739: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
29740: LD_ADDR_VAR 0 23
29744: PUSH
29745: LD_INT 0
29747: PUSH
29748: LD_INT 3
29750: NEG
29751: PUSH
29752: EMPTY
29753: LIST
29754: LIST
29755: PUSH
29756: LD_INT 1
29758: NEG
29759: PUSH
29760: LD_INT 4
29762: NEG
29763: PUSH
29764: EMPTY
29765: LIST
29766: LIST
29767: PUSH
29768: LD_INT 1
29770: PUSH
29771: LD_INT 3
29773: NEG
29774: PUSH
29775: EMPTY
29776: LIST
29777: LIST
29778: PUSH
29779: EMPTY
29780: LIST
29781: LIST
29782: LIST
29783: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
29784: LD_ADDR_VAR 0 24
29788: PUSH
29789: LD_INT 3
29791: PUSH
29792: LD_INT 0
29794: PUSH
29795: EMPTY
29796: LIST
29797: LIST
29798: PUSH
29799: LD_INT 3
29801: PUSH
29802: LD_INT 1
29804: NEG
29805: PUSH
29806: EMPTY
29807: LIST
29808: LIST
29809: PUSH
29810: LD_INT 4
29812: PUSH
29813: LD_INT 1
29815: PUSH
29816: EMPTY
29817: LIST
29818: LIST
29819: PUSH
29820: EMPTY
29821: LIST
29822: LIST
29823: LIST
29824: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
29825: LD_ADDR_VAR 0 25
29829: PUSH
29830: LD_INT 3
29832: PUSH
29833: LD_INT 3
29835: PUSH
29836: EMPTY
29837: LIST
29838: LIST
29839: PUSH
29840: LD_INT 4
29842: PUSH
29843: LD_INT 3
29845: PUSH
29846: EMPTY
29847: LIST
29848: LIST
29849: PUSH
29850: LD_INT 3
29852: PUSH
29853: LD_INT 4
29855: PUSH
29856: EMPTY
29857: LIST
29858: LIST
29859: PUSH
29860: EMPTY
29861: LIST
29862: LIST
29863: LIST
29864: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
29865: LD_ADDR_VAR 0 26
29869: PUSH
29870: LD_INT 0
29872: PUSH
29873: LD_INT 3
29875: PUSH
29876: EMPTY
29877: LIST
29878: LIST
29879: PUSH
29880: LD_INT 1
29882: PUSH
29883: LD_INT 4
29885: PUSH
29886: EMPTY
29887: LIST
29888: LIST
29889: PUSH
29890: LD_INT 1
29892: NEG
29893: PUSH
29894: LD_INT 3
29896: PUSH
29897: EMPTY
29898: LIST
29899: LIST
29900: PUSH
29901: EMPTY
29902: LIST
29903: LIST
29904: LIST
29905: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
29906: LD_ADDR_VAR 0 27
29910: PUSH
29911: LD_INT 3
29913: NEG
29914: PUSH
29915: LD_INT 0
29917: PUSH
29918: EMPTY
29919: LIST
29920: LIST
29921: PUSH
29922: LD_INT 3
29924: NEG
29925: PUSH
29926: LD_INT 1
29928: PUSH
29929: EMPTY
29930: LIST
29931: LIST
29932: PUSH
29933: LD_INT 4
29935: NEG
29936: PUSH
29937: LD_INT 1
29939: NEG
29940: PUSH
29941: EMPTY
29942: LIST
29943: LIST
29944: PUSH
29945: EMPTY
29946: LIST
29947: LIST
29948: LIST
29949: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
29950: LD_ADDR_VAR 0 28
29954: PUSH
29955: LD_INT 3
29957: NEG
29958: PUSH
29959: LD_INT 3
29961: NEG
29962: PUSH
29963: EMPTY
29964: LIST
29965: LIST
29966: PUSH
29967: LD_INT 3
29969: NEG
29970: PUSH
29971: LD_INT 4
29973: NEG
29974: PUSH
29975: EMPTY
29976: LIST
29977: LIST
29978: PUSH
29979: LD_INT 4
29981: NEG
29982: PUSH
29983: LD_INT 3
29985: NEG
29986: PUSH
29987: EMPTY
29988: LIST
29989: LIST
29990: PUSH
29991: EMPTY
29992: LIST
29993: LIST
29994: LIST
29995: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
29996: LD_ADDR_VAR 0 29
30000: PUSH
30001: LD_INT 1
30003: NEG
30004: PUSH
30005: LD_INT 3
30007: NEG
30008: PUSH
30009: EMPTY
30010: LIST
30011: LIST
30012: PUSH
30013: LD_INT 0
30015: PUSH
30016: LD_INT 3
30018: NEG
30019: PUSH
30020: EMPTY
30021: LIST
30022: LIST
30023: PUSH
30024: LD_INT 1
30026: PUSH
30027: LD_INT 2
30029: NEG
30030: PUSH
30031: EMPTY
30032: LIST
30033: LIST
30034: PUSH
30035: LD_INT 1
30037: NEG
30038: PUSH
30039: LD_INT 4
30041: NEG
30042: PUSH
30043: EMPTY
30044: LIST
30045: LIST
30046: PUSH
30047: LD_INT 0
30049: PUSH
30050: LD_INT 4
30052: NEG
30053: PUSH
30054: EMPTY
30055: LIST
30056: LIST
30057: PUSH
30058: LD_INT 1
30060: PUSH
30061: LD_INT 3
30063: NEG
30064: PUSH
30065: EMPTY
30066: LIST
30067: LIST
30068: PUSH
30069: LD_INT 1
30071: NEG
30072: PUSH
30073: LD_INT 5
30075: NEG
30076: PUSH
30077: EMPTY
30078: LIST
30079: LIST
30080: PUSH
30081: LD_INT 0
30083: PUSH
30084: LD_INT 5
30086: NEG
30087: PUSH
30088: EMPTY
30089: LIST
30090: LIST
30091: PUSH
30092: LD_INT 1
30094: PUSH
30095: LD_INT 4
30097: NEG
30098: PUSH
30099: EMPTY
30100: LIST
30101: LIST
30102: PUSH
30103: LD_INT 1
30105: NEG
30106: PUSH
30107: LD_INT 6
30109: NEG
30110: PUSH
30111: EMPTY
30112: LIST
30113: LIST
30114: PUSH
30115: LD_INT 0
30117: PUSH
30118: LD_INT 6
30120: NEG
30121: PUSH
30122: EMPTY
30123: LIST
30124: LIST
30125: PUSH
30126: LD_INT 1
30128: PUSH
30129: LD_INT 5
30131: NEG
30132: PUSH
30133: EMPTY
30134: LIST
30135: LIST
30136: PUSH
30137: EMPTY
30138: LIST
30139: LIST
30140: LIST
30141: LIST
30142: LIST
30143: LIST
30144: LIST
30145: LIST
30146: LIST
30147: LIST
30148: LIST
30149: LIST
30150: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
30151: LD_ADDR_VAR 0 30
30155: PUSH
30156: LD_INT 2
30158: PUSH
30159: LD_INT 1
30161: NEG
30162: PUSH
30163: EMPTY
30164: LIST
30165: LIST
30166: PUSH
30167: LD_INT 3
30169: PUSH
30170: LD_INT 0
30172: PUSH
30173: EMPTY
30174: LIST
30175: LIST
30176: PUSH
30177: LD_INT 3
30179: PUSH
30180: LD_INT 1
30182: PUSH
30183: EMPTY
30184: LIST
30185: LIST
30186: PUSH
30187: LD_INT 3
30189: PUSH
30190: LD_INT 1
30192: NEG
30193: PUSH
30194: EMPTY
30195: LIST
30196: LIST
30197: PUSH
30198: LD_INT 4
30200: PUSH
30201: LD_INT 0
30203: PUSH
30204: EMPTY
30205: LIST
30206: LIST
30207: PUSH
30208: LD_INT 4
30210: PUSH
30211: LD_INT 1
30213: PUSH
30214: EMPTY
30215: LIST
30216: LIST
30217: PUSH
30218: LD_INT 4
30220: PUSH
30221: LD_INT 1
30223: NEG
30224: PUSH
30225: EMPTY
30226: LIST
30227: LIST
30228: PUSH
30229: LD_INT 5
30231: PUSH
30232: LD_INT 0
30234: PUSH
30235: EMPTY
30236: LIST
30237: LIST
30238: PUSH
30239: LD_INT 5
30241: PUSH
30242: LD_INT 1
30244: PUSH
30245: EMPTY
30246: LIST
30247: LIST
30248: PUSH
30249: LD_INT 5
30251: PUSH
30252: LD_INT 1
30254: NEG
30255: PUSH
30256: EMPTY
30257: LIST
30258: LIST
30259: PUSH
30260: LD_INT 6
30262: PUSH
30263: LD_INT 0
30265: PUSH
30266: EMPTY
30267: LIST
30268: LIST
30269: PUSH
30270: LD_INT 6
30272: PUSH
30273: LD_INT 1
30275: PUSH
30276: EMPTY
30277: LIST
30278: LIST
30279: PUSH
30280: EMPTY
30281: LIST
30282: LIST
30283: LIST
30284: LIST
30285: LIST
30286: LIST
30287: LIST
30288: LIST
30289: LIST
30290: LIST
30291: LIST
30292: LIST
30293: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
30294: LD_ADDR_VAR 0 31
30298: PUSH
30299: LD_INT 3
30301: PUSH
30302: LD_INT 2
30304: PUSH
30305: EMPTY
30306: LIST
30307: LIST
30308: PUSH
30309: LD_INT 3
30311: PUSH
30312: LD_INT 3
30314: PUSH
30315: EMPTY
30316: LIST
30317: LIST
30318: PUSH
30319: LD_INT 2
30321: PUSH
30322: LD_INT 3
30324: PUSH
30325: EMPTY
30326: LIST
30327: LIST
30328: PUSH
30329: LD_INT 4
30331: PUSH
30332: LD_INT 3
30334: PUSH
30335: EMPTY
30336: LIST
30337: LIST
30338: PUSH
30339: LD_INT 4
30341: PUSH
30342: LD_INT 4
30344: PUSH
30345: EMPTY
30346: LIST
30347: LIST
30348: PUSH
30349: LD_INT 3
30351: PUSH
30352: LD_INT 4
30354: PUSH
30355: EMPTY
30356: LIST
30357: LIST
30358: PUSH
30359: LD_INT 5
30361: PUSH
30362: LD_INT 4
30364: PUSH
30365: EMPTY
30366: LIST
30367: LIST
30368: PUSH
30369: LD_INT 5
30371: PUSH
30372: LD_INT 5
30374: PUSH
30375: EMPTY
30376: LIST
30377: LIST
30378: PUSH
30379: LD_INT 4
30381: PUSH
30382: LD_INT 5
30384: PUSH
30385: EMPTY
30386: LIST
30387: LIST
30388: PUSH
30389: LD_INT 6
30391: PUSH
30392: LD_INT 5
30394: PUSH
30395: EMPTY
30396: LIST
30397: LIST
30398: PUSH
30399: LD_INT 6
30401: PUSH
30402: LD_INT 6
30404: PUSH
30405: EMPTY
30406: LIST
30407: LIST
30408: PUSH
30409: LD_INT 5
30411: PUSH
30412: LD_INT 6
30414: PUSH
30415: EMPTY
30416: LIST
30417: LIST
30418: PUSH
30419: EMPTY
30420: LIST
30421: LIST
30422: LIST
30423: LIST
30424: LIST
30425: LIST
30426: LIST
30427: LIST
30428: LIST
30429: LIST
30430: LIST
30431: LIST
30432: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
30433: LD_ADDR_VAR 0 32
30437: PUSH
30438: LD_INT 1
30440: PUSH
30441: LD_INT 3
30443: PUSH
30444: EMPTY
30445: LIST
30446: LIST
30447: PUSH
30448: LD_INT 0
30450: PUSH
30451: LD_INT 3
30453: PUSH
30454: EMPTY
30455: LIST
30456: LIST
30457: PUSH
30458: LD_INT 1
30460: NEG
30461: PUSH
30462: LD_INT 2
30464: PUSH
30465: EMPTY
30466: LIST
30467: LIST
30468: PUSH
30469: LD_INT 1
30471: PUSH
30472: LD_INT 4
30474: PUSH
30475: EMPTY
30476: LIST
30477: LIST
30478: PUSH
30479: LD_INT 0
30481: PUSH
30482: LD_INT 4
30484: PUSH
30485: EMPTY
30486: LIST
30487: LIST
30488: PUSH
30489: LD_INT 1
30491: NEG
30492: PUSH
30493: LD_INT 3
30495: PUSH
30496: EMPTY
30497: LIST
30498: LIST
30499: PUSH
30500: LD_INT 1
30502: PUSH
30503: LD_INT 5
30505: PUSH
30506: EMPTY
30507: LIST
30508: LIST
30509: PUSH
30510: LD_INT 0
30512: PUSH
30513: LD_INT 5
30515: PUSH
30516: EMPTY
30517: LIST
30518: LIST
30519: PUSH
30520: LD_INT 1
30522: NEG
30523: PUSH
30524: LD_INT 4
30526: PUSH
30527: EMPTY
30528: LIST
30529: LIST
30530: PUSH
30531: LD_INT 1
30533: PUSH
30534: LD_INT 6
30536: PUSH
30537: EMPTY
30538: LIST
30539: LIST
30540: PUSH
30541: LD_INT 0
30543: PUSH
30544: LD_INT 6
30546: PUSH
30547: EMPTY
30548: LIST
30549: LIST
30550: PUSH
30551: LD_INT 1
30553: NEG
30554: PUSH
30555: LD_INT 5
30557: PUSH
30558: EMPTY
30559: LIST
30560: LIST
30561: PUSH
30562: EMPTY
30563: LIST
30564: LIST
30565: LIST
30566: LIST
30567: LIST
30568: LIST
30569: LIST
30570: LIST
30571: LIST
30572: LIST
30573: LIST
30574: LIST
30575: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
30576: LD_ADDR_VAR 0 33
30580: PUSH
30581: LD_INT 2
30583: NEG
30584: PUSH
30585: LD_INT 1
30587: PUSH
30588: EMPTY
30589: LIST
30590: LIST
30591: PUSH
30592: LD_INT 3
30594: NEG
30595: PUSH
30596: LD_INT 0
30598: PUSH
30599: EMPTY
30600: LIST
30601: LIST
30602: PUSH
30603: LD_INT 3
30605: NEG
30606: PUSH
30607: LD_INT 1
30609: NEG
30610: PUSH
30611: EMPTY
30612: LIST
30613: LIST
30614: PUSH
30615: LD_INT 3
30617: NEG
30618: PUSH
30619: LD_INT 1
30621: PUSH
30622: EMPTY
30623: LIST
30624: LIST
30625: PUSH
30626: LD_INT 4
30628: NEG
30629: PUSH
30630: LD_INT 0
30632: PUSH
30633: EMPTY
30634: LIST
30635: LIST
30636: PUSH
30637: LD_INT 4
30639: NEG
30640: PUSH
30641: LD_INT 1
30643: NEG
30644: PUSH
30645: EMPTY
30646: LIST
30647: LIST
30648: PUSH
30649: LD_INT 4
30651: NEG
30652: PUSH
30653: LD_INT 1
30655: PUSH
30656: EMPTY
30657: LIST
30658: LIST
30659: PUSH
30660: LD_INT 5
30662: NEG
30663: PUSH
30664: LD_INT 0
30666: PUSH
30667: EMPTY
30668: LIST
30669: LIST
30670: PUSH
30671: LD_INT 5
30673: NEG
30674: PUSH
30675: LD_INT 1
30677: NEG
30678: PUSH
30679: EMPTY
30680: LIST
30681: LIST
30682: PUSH
30683: LD_INT 5
30685: NEG
30686: PUSH
30687: LD_INT 1
30689: PUSH
30690: EMPTY
30691: LIST
30692: LIST
30693: PUSH
30694: LD_INT 6
30696: NEG
30697: PUSH
30698: LD_INT 0
30700: PUSH
30701: EMPTY
30702: LIST
30703: LIST
30704: PUSH
30705: LD_INT 6
30707: NEG
30708: PUSH
30709: LD_INT 1
30711: NEG
30712: PUSH
30713: EMPTY
30714: LIST
30715: LIST
30716: PUSH
30717: EMPTY
30718: LIST
30719: LIST
30720: LIST
30721: LIST
30722: LIST
30723: LIST
30724: LIST
30725: LIST
30726: LIST
30727: LIST
30728: LIST
30729: LIST
30730: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
30731: LD_ADDR_VAR 0 34
30735: PUSH
30736: LD_INT 2
30738: NEG
30739: PUSH
30740: LD_INT 3
30742: NEG
30743: PUSH
30744: EMPTY
30745: LIST
30746: LIST
30747: PUSH
30748: LD_INT 3
30750: NEG
30751: PUSH
30752: LD_INT 2
30754: NEG
30755: PUSH
30756: EMPTY
30757: LIST
30758: LIST
30759: PUSH
30760: LD_INT 3
30762: NEG
30763: PUSH
30764: LD_INT 3
30766: NEG
30767: PUSH
30768: EMPTY
30769: LIST
30770: LIST
30771: PUSH
30772: LD_INT 3
30774: NEG
30775: PUSH
30776: LD_INT 4
30778: NEG
30779: PUSH
30780: EMPTY
30781: LIST
30782: LIST
30783: PUSH
30784: LD_INT 4
30786: NEG
30787: PUSH
30788: LD_INT 3
30790: NEG
30791: PUSH
30792: EMPTY
30793: LIST
30794: LIST
30795: PUSH
30796: LD_INT 4
30798: NEG
30799: PUSH
30800: LD_INT 4
30802: NEG
30803: PUSH
30804: EMPTY
30805: LIST
30806: LIST
30807: PUSH
30808: LD_INT 4
30810: NEG
30811: PUSH
30812: LD_INT 5
30814: NEG
30815: PUSH
30816: EMPTY
30817: LIST
30818: LIST
30819: PUSH
30820: LD_INT 5
30822: NEG
30823: PUSH
30824: LD_INT 4
30826: NEG
30827: PUSH
30828: EMPTY
30829: LIST
30830: LIST
30831: PUSH
30832: LD_INT 5
30834: NEG
30835: PUSH
30836: LD_INT 5
30838: NEG
30839: PUSH
30840: EMPTY
30841: LIST
30842: LIST
30843: PUSH
30844: LD_INT 5
30846: NEG
30847: PUSH
30848: LD_INT 6
30850: NEG
30851: PUSH
30852: EMPTY
30853: LIST
30854: LIST
30855: PUSH
30856: LD_INT 6
30858: NEG
30859: PUSH
30860: LD_INT 5
30862: NEG
30863: PUSH
30864: EMPTY
30865: LIST
30866: LIST
30867: PUSH
30868: LD_INT 6
30870: NEG
30871: PUSH
30872: LD_INT 6
30874: NEG
30875: PUSH
30876: EMPTY
30877: LIST
30878: LIST
30879: PUSH
30880: EMPTY
30881: LIST
30882: LIST
30883: LIST
30884: LIST
30885: LIST
30886: LIST
30887: LIST
30888: LIST
30889: LIST
30890: LIST
30891: LIST
30892: LIST
30893: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
30894: LD_ADDR_VAR 0 41
30898: PUSH
30899: LD_INT 0
30901: PUSH
30902: LD_INT 2
30904: NEG
30905: PUSH
30906: EMPTY
30907: LIST
30908: LIST
30909: PUSH
30910: LD_INT 1
30912: NEG
30913: PUSH
30914: LD_INT 3
30916: NEG
30917: PUSH
30918: EMPTY
30919: LIST
30920: LIST
30921: PUSH
30922: LD_INT 1
30924: PUSH
30925: LD_INT 2
30927: NEG
30928: PUSH
30929: EMPTY
30930: LIST
30931: LIST
30932: PUSH
30933: EMPTY
30934: LIST
30935: LIST
30936: LIST
30937: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
30938: LD_ADDR_VAR 0 42
30942: PUSH
30943: LD_INT 2
30945: PUSH
30946: LD_INT 0
30948: PUSH
30949: EMPTY
30950: LIST
30951: LIST
30952: PUSH
30953: LD_INT 2
30955: PUSH
30956: LD_INT 1
30958: NEG
30959: PUSH
30960: EMPTY
30961: LIST
30962: LIST
30963: PUSH
30964: LD_INT 3
30966: PUSH
30967: LD_INT 1
30969: PUSH
30970: EMPTY
30971: LIST
30972: LIST
30973: PUSH
30974: EMPTY
30975: LIST
30976: LIST
30977: LIST
30978: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
30979: LD_ADDR_VAR 0 43
30983: PUSH
30984: LD_INT 2
30986: PUSH
30987: LD_INT 2
30989: PUSH
30990: EMPTY
30991: LIST
30992: LIST
30993: PUSH
30994: LD_INT 3
30996: PUSH
30997: LD_INT 2
30999: PUSH
31000: EMPTY
31001: LIST
31002: LIST
31003: PUSH
31004: LD_INT 2
31006: PUSH
31007: LD_INT 3
31009: PUSH
31010: EMPTY
31011: LIST
31012: LIST
31013: PUSH
31014: EMPTY
31015: LIST
31016: LIST
31017: LIST
31018: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
31019: LD_ADDR_VAR 0 44
31023: PUSH
31024: LD_INT 0
31026: PUSH
31027: LD_INT 2
31029: PUSH
31030: EMPTY
31031: LIST
31032: LIST
31033: PUSH
31034: LD_INT 1
31036: PUSH
31037: LD_INT 3
31039: PUSH
31040: EMPTY
31041: LIST
31042: LIST
31043: PUSH
31044: LD_INT 1
31046: NEG
31047: PUSH
31048: LD_INT 2
31050: PUSH
31051: EMPTY
31052: LIST
31053: LIST
31054: PUSH
31055: EMPTY
31056: LIST
31057: LIST
31058: LIST
31059: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31060: LD_ADDR_VAR 0 45
31064: PUSH
31065: LD_INT 2
31067: NEG
31068: PUSH
31069: LD_INT 0
31071: PUSH
31072: EMPTY
31073: LIST
31074: LIST
31075: PUSH
31076: LD_INT 2
31078: NEG
31079: PUSH
31080: LD_INT 1
31082: PUSH
31083: EMPTY
31084: LIST
31085: LIST
31086: PUSH
31087: LD_INT 3
31089: NEG
31090: PUSH
31091: LD_INT 1
31093: NEG
31094: PUSH
31095: EMPTY
31096: LIST
31097: LIST
31098: PUSH
31099: EMPTY
31100: LIST
31101: LIST
31102: LIST
31103: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
31104: LD_ADDR_VAR 0 46
31108: PUSH
31109: LD_INT 2
31111: NEG
31112: PUSH
31113: LD_INT 2
31115: NEG
31116: PUSH
31117: EMPTY
31118: LIST
31119: LIST
31120: PUSH
31121: LD_INT 2
31123: NEG
31124: PUSH
31125: LD_INT 3
31127: NEG
31128: PUSH
31129: EMPTY
31130: LIST
31131: LIST
31132: PUSH
31133: LD_INT 3
31135: NEG
31136: PUSH
31137: LD_INT 2
31139: NEG
31140: PUSH
31141: EMPTY
31142: LIST
31143: LIST
31144: PUSH
31145: EMPTY
31146: LIST
31147: LIST
31148: LIST
31149: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
31150: LD_ADDR_VAR 0 47
31154: PUSH
31155: LD_INT 2
31157: NEG
31158: PUSH
31159: LD_INT 3
31161: NEG
31162: PUSH
31163: EMPTY
31164: LIST
31165: LIST
31166: PUSH
31167: LD_INT 1
31169: NEG
31170: PUSH
31171: LD_INT 3
31173: NEG
31174: PUSH
31175: EMPTY
31176: LIST
31177: LIST
31178: PUSH
31179: EMPTY
31180: LIST
31181: LIST
31182: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
31183: LD_ADDR_VAR 0 48
31187: PUSH
31188: LD_INT 1
31190: PUSH
31191: LD_INT 2
31193: NEG
31194: PUSH
31195: EMPTY
31196: LIST
31197: LIST
31198: PUSH
31199: LD_INT 2
31201: PUSH
31202: LD_INT 1
31204: NEG
31205: PUSH
31206: EMPTY
31207: LIST
31208: LIST
31209: PUSH
31210: EMPTY
31211: LIST
31212: LIST
31213: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
31214: LD_ADDR_VAR 0 49
31218: PUSH
31219: LD_INT 3
31221: PUSH
31222: LD_INT 1
31224: PUSH
31225: EMPTY
31226: LIST
31227: LIST
31228: PUSH
31229: LD_INT 3
31231: PUSH
31232: LD_INT 2
31234: PUSH
31235: EMPTY
31236: LIST
31237: LIST
31238: PUSH
31239: EMPTY
31240: LIST
31241: LIST
31242: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
31243: LD_ADDR_VAR 0 50
31247: PUSH
31248: LD_INT 2
31250: PUSH
31251: LD_INT 3
31253: PUSH
31254: EMPTY
31255: LIST
31256: LIST
31257: PUSH
31258: LD_INT 1
31260: PUSH
31261: LD_INT 3
31263: PUSH
31264: EMPTY
31265: LIST
31266: LIST
31267: PUSH
31268: EMPTY
31269: LIST
31270: LIST
31271: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
31272: LD_ADDR_VAR 0 51
31276: PUSH
31277: LD_INT 1
31279: NEG
31280: PUSH
31281: LD_INT 2
31283: PUSH
31284: EMPTY
31285: LIST
31286: LIST
31287: PUSH
31288: LD_INT 2
31290: NEG
31291: PUSH
31292: LD_INT 1
31294: PUSH
31295: EMPTY
31296: LIST
31297: LIST
31298: PUSH
31299: EMPTY
31300: LIST
31301: LIST
31302: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
31303: LD_ADDR_VAR 0 52
31307: PUSH
31308: LD_INT 3
31310: NEG
31311: PUSH
31312: LD_INT 1
31314: NEG
31315: PUSH
31316: EMPTY
31317: LIST
31318: LIST
31319: PUSH
31320: LD_INT 3
31322: NEG
31323: PUSH
31324: LD_INT 2
31326: NEG
31327: PUSH
31328: EMPTY
31329: LIST
31330: LIST
31331: PUSH
31332: EMPTY
31333: LIST
31334: LIST
31335: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31336: LD_ADDR_VAR 0 53
31340: PUSH
31341: LD_INT 1
31343: NEG
31344: PUSH
31345: LD_INT 3
31347: NEG
31348: PUSH
31349: EMPTY
31350: LIST
31351: LIST
31352: PUSH
31353: LD_INT 0
31355: PUSH
31356: LD_INT 3
31358: NEG
31359: PUSH
31360: EMPTY
31361: LIST
31362: LIST
31363: PUSH
31364: LD_INT 1
31366: PUSH
31367: LD_INT 2
31369: NEG
31370: PUSH
31371: EMPTY
31372: LIST
31373: LIST
31374: PUSH
31375: EMPTY
31376: LIST
31377: LIST
31378: LIST
31379: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31380: LD_ADDR_VAR 0 54
31384: PUSH
31385: LD_INT 2
31387: PUSH
31388: LD_INT 1
31390: NEG
31391: PUSH
31392: EMPTY
31393: LIST
31394: LIST
31395: PUSH
31396: LD_INT 3
31398: PUSH
31399: LD_INT 0
31401: PUSH
31402: EMPTY
31403: LIST
31404: LIST
31405: PUSH
31406: LD_INT 3
31408: PUSH
31409: LD_INT 1
31411: PUSH
31412: EMPTY
31413: LIST
31414: LIST
31415: PUSH
31416: EMPTY
31417: LIST
31418: LIST
31419: LIST
31420: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31421: LD_ADDR_VAR 0 55
31425: PUSH
31426: LD_INT 3
31428: PUSH
31429: LD_INT 2
31431: PUSH
31432: EMPTY
31433: LIST
31434: LIST
31435: PUSH
31436: LD_INT 3
31438: PUSH
31439: LD_INT 3
31441: PUSH
31442: EMPTY
31443: LIST
31444: LIST
31445: PUSH
31446: LD_INT 2
31448: PUSH
31449: LD_INT 3
31451: PUSH
31452: EMPTY
31453: LIST
31454: LIST
31455: PUSH
31456: EMPTY
31457: LIST
31458: LIST
31459: LIST
31460: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31461: LD_ADDR_VAR 0 56
31465: PUSH
31466: LD_INT 1
31468: PUSH
31469: LD_INT 3
31471: PUSH
31472: EMPTY
31473: LIST
31474: LIST
31475: PUSH
31476: LD_INT 0
31478: PUSH
31479: LD_INT 3
31481: PUSH
31482: EMPTY
31483: LIST
31484: LIST
31485: PUSH
31486: LD_INT 1
31488: NEG
31489: PUSH
31490: LD_INT 2
31492: PUSH
31493: EMPTY
31494: LIST
31495: LIST
31496: PUSH
31497: EMPTY
31498: LIST
31499: LIST
31500: LIST
31501: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31502: LD_ADDR_VAR 0 57
31506: PUSH
31507: LD_INT 2
31509: NEG
31510: PUSH
31511: LD_INT 1
31513: PUSH
31514: EMPTY
31515: LIST
31516: LIST
31517: PUSH
31518: LD_INT 3
31520: NEG
31521: PUSH
31522: LD_INT 0
31524: PUSH
31525: EMPTY
31526: LIST
31527: LIST
31528: PUSH
31529: LD_INT 3
31531: NEG
31532: PUSH
31533: LD_INT 1
31535: NEG
31536: PUSH
31537: EMPTY
31538: LIST
31539: LIST
31540: PUSH
31541: EMPTY
31542: LIST
31543: LIST
31544: LIST
31545: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31546: LD_ADDR_VAR 0 58
31550: PUSH
31551: LD_INT 2
31553: NEG
31554: PUSH
31555: LD_INT 3
31557: NEG
31558: PUSH
31559: EMPTY
31560: LIST
31561: LIST
31562: PUSH
31563: LD_INT 3
31565: NEG
31566: PUSH
31567: LD_INT 2
31569: NEG
31570: PUSH
31571: EMPTY
31572: LIST
31573: LIST
31574: PUSH
31575: LD_INT 3
31577: NEG
31578: PUSH
31579: LD_INT 3
31581: NEG
31582: PUSH
31583: EMPTY
31584: LIST
31585: LIST
31586: PUSH
31587: EMPTY
31588: LIST
31589: LIST
31590: LIST
31591: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
31592: LD_ADDR_VAR 0 59
31596: PUSH
31597: LD_INT 1
31599: NEG
31600: PUSH
31601: LD_INT 2
31603: NEG
31604: PUSH
31605: EMPTY
31606: LIST
31607: LIST
31608: PUSH
31609: LD_INT 0
31611: PUSH
31612: LD_INT 2
31614: NEG
31615: PUSH
31616: EMPTY
31617: LIST
31618: LIST
31619: PUSH
31620: LD_INT 1
31622: PUSH
31623: LD_INT 1
31625: NEG
31626: PUSH
31627: EMPTY
31628: LIST
31629: LIST
31630: PUSH
31631: EMPTY
31632: LIST
31633: LIST
31634: LIST
31635: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
31636: LD_ADDR_VAR 0 60
31640: PUSH
31641: LD_INT 1
31643: PUSH
31644: LD_INT 1
31646: NEG
31647: PUSH
31648: EMPTY
31649: LIST
31650: LIST
31651: PUSH
31652: LD_INT 2
31654: PUSH
31655: LD_INT 0
31657: PUSH
31658: EMPTY
31659: LIST
31660: LIST
31661: PUSH
31662: LD_INT 2
31664: PUSH
31665: LD_INT 1
31667: PUSH
31668: EMPTY
31669: LIST
31670: LIST
31671: PUSH
31672: EMPTY
31673: LIST
31674: LIST
31675: LIST
31676: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
31677: LD_ADDR_VAR 0 61
31681: PUSH
31682: LD_INT 2
31684: PUSH
31685: LD_INT 1
31687: PUSH
31688: EMPTY
31689: LIST
31690: LIST
31691: PUSH
31692: LD_INT 2
31694: PUSH
31695: LD_INT 2
31697: PUSH
31698: EMPTY
31699: LIST
31700: LIST
31701: PUSH
31702: LD_INT 1
31704: PUSH
31705: LD_INT 2
31707: PUSH
31708: EMPTY
31709: LIST
31710: LIST
31711: PUSH
31712: EMPTY
31713: LIST
31714: LIST
31715: LIST
31716: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
31717: LD_ADDR_VAR 0 62
31721: PUSH
31722: LD_INT 1
31724: PUSH
31725: LD_INT 2
31727: PUSH
31728: EMPTY
31729: LIST
31730: LIST
31731: PUSH
31732: LD_INT 0
31734: PUSH
31735: LD_INT 2
31737: PUSH
31738: EMPTY
31739: LIST
31740: LIST
31741: PUSH
31742: LD_INT 1
31744: NEG
31745: PUSH
31746: LD_INT 1
31748: PUSH
31749: EMPTY
31750: LIST
31751: LIST
31752: PUSH
31753: EMPTY
31754: LIST
31755: LIST
31756: LIST
31757: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
31758: LD_ADDR_VAR 0 63
31762: PUSH
31763: LD_INT 1
31765: NEG
31766: PUSH
31767: LD_INT 1
31769: PUSH
31770: EMPTY
31771: LIST
31772: LIST
31773: PUSH
31774: LD_INT 2
31776: NEG
31777: PUSH
31778: LD_INT 0
31780: PUSH
31781: EMPTY
31782: LIST
31783: LIST
31784: PUSH
31785: LD_INT 2
31787: NEG
31788: PUSH
31789: LD_INT 1
31791: NEG
31792: PUSH
31793: EMPTY
31794: LIST
31795: LIST
31796: PUSH
31797: EMPTY
31798: LIST
31799: LIST
31800: LIST
31801: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31802: LD_ADDR_VAR 0 64
31806: PUSH
31807: LD_INT 1
31809: NEG
31810: PUSH
31811: LD_INT 2
31813: NEG
31814: PUSH
31815: EMPTY
31816: LIST
31817: LIST
31818: PUSH
31819: LD_INT 2
31821: NEG
31822: PUSH
31823: LD_INT 1
31825: NEG
31826: PUSH
31827: EMPTY
31828: LIST
31829: LIST
31830: PUSH
31831: LD_INT 2
31833: NEG
31834: PUSH
31835: LD_INT 2
31837: NEG
31838: PUSH
31839: EMPTY
31840: LIST
31841: LIST
31842: PUSH
31843: EMPTY
31844: LIST
31845: LIST
31846: LIST
31847: ST_TO_ADDR
// end ; 2 :
31848: GO 35114
31850: LD_INT 2
31852: DOUBLE
31853: EQUAL
31854: IFTRUE 31858
31856: GO 35113
31858: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
31859: LD_ADDR_VAR 0 29
31863: PUSH
31864: LD_INT 4
31866: PUSH
31867: LD_INT 0
31869: PUSH
31870: EMPTY
31871: LIST
31872: LIST
31873: PUSH
31874: LD_INT 4
31876: PUSH
31877: LD_INT 1
31879: NEG
31880: PUSH
31881: EMPTY
31882: LIST
31883: LIST
31884: PUSH
31885: LD_INT 5
31887: PUSH
31888: LD_INT 0
31890: PUSH
31891: EMPTY
31892: LIST
31893: LIST
31894: PUSH
31895: LD_INT 5
31897: PUSH
31898: LD_INT 1
31900: PUSH
31901: EMPTY
31902: LIST
31903: LIST
31904: PUSH
31905: LD_INT 4
31907: PUSH
31908: LD_INT 1
31910: PUSH
31911: EMPTY
31912: LIST
31913: LIST
31914: PUSH
31915: LD_INT 3
31917: PUSH
31918: LD_INT 0
31920: PUSH
31921: EMPTY
31922: LIST
31923: LIST
31924: PUSH
31925: LD_INT 3
31927: PUSH
31928: LD_INT 1
31930: NEG
31931: PUSH
31932: EMPTY
31933: LIST
31934: LIST
31935: PUSH
31936: LD_INT 3
31938: PUSH
31939: LD_INT 2
31941: NEG
31942: PUSH
31943: EMPTY
31944: LIST
31945: LIST
31946: PUSH
31947: LD_INT 5
31949: PUSH
31950: LD_INT 2
31952: PUSH
31953: EMPTY
31954: LIST
31955: LIST
31956: PUSH
31957: LD_INT 3
31959: PUSH
31960: LD_INT 3
31962: PUSH
31963: EMPTY
31964: LIST
31965: LIST
31966: PUSH
31967: LD_INT 3
31969: PUSH
31970: LD_INT 2
31972: PUSH
31973: EMPTY
31974: LIST
31975: LIST
31976: PUSH
31977: LD_INT 4
31979: PUSH
31980: LD_INT 3
31982: PUSH
31983: EMPTY
31984: LIST
31985: LIST
31986: PUSH
31987: LD_INT 4
31989: PUSH
31990: LD_INT 4
31992: PUSH
31993: EMPTY
31994: LIST
31995: LIST
31996: PUSH
31997: LD_INT 3
31999: PUSH
32000: LD_INT 4
32002: PUSH
32003: EMPTY
32004: LIST
32005: LIST
32006: PUSH
32007: LD_INT 2
32009: PUSH
32010: LD_INT 3
32012: PUSH
32013: EMPTY
32014: LIST
32015: LIST
32016: PUSH
32017: LD_INT 2
32019: PUSH
32020: LD_INT 2
32022: PUSH
32023: EMPTY
32024: LIST
32025: LIST
32026: PUSH
32027: LD_INT 4
32029: PUSH
32030: LD_INT 2
32032: PUSH
32033: EMPTY
32034: LIST
32035: LIST
32036: PUSH
32037: LD_INT 2
32039: PUSH
32040: LD_INT 4
32042: PUSH
32043: EMPTY
32044: LIST
32045: LIST
32046: PUSH
32047: LD_INT 0
32049: PUSH
32050: LD_INT 4
32052: PUSH
32053: EMPTY
32054: LIST
32055: LIST
32056: PUSH
32057: LD_INT 0
32059: PUSH
32060: LD_INT 3
32062: PUSH
32063: EMPTY
32064: LIST
32065: LIST
32066: PUSH
32067: LD_INT 1
32069: PUSH
32070: LD_INT 4
32072: PUSH
32073: EMPTY
32074: LIST
32075: LIST
32076: PUSH
32077: LD_INT 1
32079: PUSH
32080: LD_INT 5
32082: PUSH
32083: EMPTY
32084: LIST
32085: LIST
32086: PUSH
32087: LD_INT 0
32089: PUSH
32090: LD_INT 5
32092: PUSH
32093: EMPTY
32094: LIST
32095: LIST
32096: PUSH
32097: LD_INT 1
32099: NEG
32100: PUSH
32101: LD_INT 4
32103: PUSH
32104: EMPTY
32105: LIST
32106: LIST
32107: PUSH
32108: LD_INT 1
32110: NEG
32111: PUSH
32112: LD_INT 3
32114: PUSH
32115: EMPTY
32116: LIST
32117: LIST
32118: PUSH
32119: LD_INT 2
32121: PUSH
32122: LD_INT 5
32124: PUSH
32125: EMPTY
32126: LIST
32127: LIST
32128: PUSH
32129: LD_INT 2
32131: NEG
32132: PUSH
32133: LD_INT 3
32135: PUSH
32136: EMPTY
32137: LIST
32138: LIST
32139: PUSH
32140: LD_INT 3
32142: NEG
32143: PUSH
32144: LD_INT 0
32146: PUSH
32147: EMPTY
32148: LIST
32149: LIST
32150: PUSH
32151: LD_INT 3
32153: NEG
32154: PUSH
32155: LD_INT 1
32157: NEG
32158: PUSH
32159: EMPTY
32160: LIST
32161: LIST
32162: PUSH
32163: LD_INT 2
32165: NEG
32166: PUSH
32167: LD_INT 0
32169: PUSH
32170: EMPTY
32171: LIST
32172: LIST
32173: PUSH
32174: LD_INT 2
32176: NEG
32177: PUSH
32178: LD_INT 1
32180: PUSH
32181: EMPTY
32182: LIST
32183: LIST
32184: PUSH
32185: LD_INT 3
32187: NEG
32188: PUSH
32189: LD_INT 1
32191: PUSH
32192: EMPTY
32193: LIST
32194: LIST
32195: PUSH
32196: LD_INT 4
32198: NEG
32199: PUSH
32200: LD_INT 0
32202: PUSH
32203: EMPTY
32204: LIST
32205: LIST
32206: PUSH
32207: LD_INT 4
32209: NEG
32210: PUSH
32211: LD_INT 1
32213: NEG
32214: PUSH
32215: EMPTY
32216: LIST
32217: LIST
32218: PUSH
32219: LD_INT 4
32221: NEG
32222: PUSH
32223: LD_INT 2
32225: NEG
32226: PUSH
32227: EMPTY
32228: LIST
32229: LIST
32230: PUSH
32231: LD_INT 2
32233: NEG
32234: PUSH
32235: LD_INT 2
32237: PUSH
32238: EMPTY
32239: LIST
32240: LIST
32241: PUSH
32242: LD_INT 4
32244: NEG
32245: PUSH
32246: LD_INT 4
32248: NEG
32249: PUSH
32250: EMPTY
32251: LIST
32252: LIST
32253: PUSH
32254: LD_INT 4
32256: NEG
32257: PUSH
32258: LD_INT 5
32260: NEG
32261: PUSH
32262: EMPTY
32263: LIST
32264: LIST
32265: PUSH
32266: LD_INT 3
32268: NEG
32269: PUSH
32270: LD_INT 4
32272: NEG
32273: PUSH
32274: EMPTY
32275: LIST
32276: LIST
32277: PUSH
32278: LD_INT 3
32280: NEG
32281: PUSH
32282: LD_INT 3
32284: NEG
32285: PUSH
32286: EMPTY
32287: LIST
32288: LIST
32289: PUSH
32290: LD_INT 4
32292: NEG
32293: PUSH
32294: LD_INT 3
32296: NEG
32297: PUSH
32298: EMPTY
32299: LIST
32300: LIST
32301: PUSH
32302: LD_INT 5
32304: NEG
32305: PUSH
32306: LD_INT 4
32308: NEG
32309: PUSH
32310: EMPTY
32311: LIST
32312: LIST
32313: PUSH
32314: LD_INT 5
32316: NEG
32317: PUSH
32318: LD_INT 5
32320: NEG
32321: PUSH
32322: EMPTY
32323: LIST
32324: LIST
32325: PUSH
32326: LD_INT 3
32328: NEG
32329: PUSH
32330: LD_INT 5
32332: NEG
32333: PUSH
32334: EMPTY
32335: LIST
32336: LIST
32337: PUSH
32338: LD_INT 5
32340: NEG
32341: PUSH
32342: LD_INT 3
32344: NEG
32345: PUSH
32346: EMPTY
32347: LIST
32348: LIST
32349: PUSH
32350: EMPTY
32351: LIST
32352: LIST
32353: LIST
32354: LIST
32355: LIST
32356: LIST
32357: LIST
32358: LIST
32359: LIST
32360: LIST
32361: LIST
32362: LIST
32363: LIST
32364: LIST
32365: LIST
32366: LIST
32367: LIST
32368: LIST
32369: LIST
32370: LIST
32371: LIST
32372: LIST
32373: LIST
32374: LIST
32375: LIST
32376: LIST
32377: LIST
32378: LIST
32379: LIST
32380: LIST
32381: LIST
32382: LIST
32383: LIST
32384: LIST
32385: LIST
32386: LIST
32387: LIST
32388: LIST
32389: LIST
32390: LIST
32391: LIST
32392: LIST
32393: LIST
32394: LIST
32395: LIST
32396: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
32397: LD_ADDR_VAR 0 30
32401: PUSH
32402: LD_INT 4
32404: PUSH
32405: LD_INT 4
32407: PUSH
32408: EMPTY
32409: LIST
32410: LIST
32411: PUSH
32412: LD_INT 4
32414: PUSH
32415: LD_INT 3
32417: PUSH
32418: EMPTY
32419: LIST
32420: LIST
32421: PUSH
32422: LD_INT 5
32424: PUSH
32425: LD_INT 4
32427: PUSH
32428: EMPTY
32429: LIST
32430: LIST
32431: PUSH
32432: LD_INT 5
32434: PUSH
32435: LD_INT 5
32437: PUSH
32438: EMPTY
32439: LIST
32440: LIST
32441: PUSH
32442: LD_INT 4
32444: PUSH
32445: LD_INT 5
32447: PUSH
32448: EMPTY
32449: LIST
32450: LIST
32451: PUSH
32452: LD_INT 3
32454: PUSH
32455: LD_INT 4
32457: PUSH
32458: EMPTY
32459: LIST
32460: LIST
32461: PUSH
32462: LD_INT 3
32464: PUSH
32465: LD_INT 3
32467: PUSH
32468: EMPTY
32469: LIST
32470: LIST
32471: PUSH
32472: LD_INT 5
32474: PUSH
32475: LD_INT 3
32477: PUSH
32478: EMPTY
32479: LIST
32480: LIST
32481: PUSH
32482: LD_INT 3
32484: PUSH
32485: LD_INT 5
32487: PUSH
32488: EMPTY
32489: LIST
32490: LIST
32491: PUSH
32492: LD_INT 0
32494: PUSH
32495: LD_INT 3
32497: PUSH
32498: EMPTY
32499: LIST
32500: LIST
32501: PUSH
32502: LD_INT 0
32504: PUSH
32505: LD_INT 2
32507: PUSH
32508: EMPTY
32509: LIST
32510: LIST
32511: PUSH
32512: LD_INT 1
32514: PUSH
32515: LD_INT 3
32517: PUSH
32518: EMPTY
32519: LIST
32520: LIST
32521: PUSH
32522: LD_INT 1
32524: PUSH
32525: LD_INT 4
32527: PUSH
32528: EMPTY
32529: LIST
32530: LIST
32531: PUSH
32532: LD_INT 0
32534: PUSH
32535: LD_INT 4
32537: PUSH
32538: EMPTY
32539: LIST
32540: LIST
32541: PUSH
32542: LD_INT 1
32544: NEG
32545: PUSH
32546: LD_INT 3
32548: PUSH
32549: EMPTY
32550: LIST
32551: LIST
32552: PUSH
32553: LD_INT 1
32555: NEG
32556: PUSH
32557: LD_INT 2
32559: PUSH
32560: EMPTY
32561: LIST
32562: LIST
32563: PUSH
32564: LD_INT 2
32566: PUSH
32567: LD_INT 4
32569: PUSH
32570: EMPTY
32571: LIST
32572: LIST
32573: PUSH
32574: LD_INT 2
32576: NEG
32577: PUSH
32578: LD_INT 2
32580: PUSH
32581: EMPTY
32582: LIST
32583: LIST
32584: PUSH
32585: LD_INT 4
32587: NEG
32588: PUSH
32589: LD_INT 0
32591: PUSH
32592: EMPTY
32593: LIST
32594: LIST
32595: PUSH
32596: LD_INT 4
32598: NEG
32599: PUSH
32600: LD_INT 1
32602: NEG
32603: PUSH
32604: EMPTY
32605: LIST
32606: LIST
32607: PUSH
32608: LD_INT 3
32610: NEG
32611: PUSH
32612: LD_INT 0
32614: PUSH
32615: EMPTY
32616: LIST
32617: LIST
32618: PUSH
32619: LD_INT 3
32621: NEG
32622: PUSH
32623: LD_INT 1
32625: PUSH
32626: EMPTY
32627: LIST
32628: LIST
32629: PUSH
32630: LD_INT 4
32632: NEG
32633: PUSH
32634: LD_INT 1
32636: PUSH
32637: EMPTY
32638: LIST
32639: LIST
32640: PUSH
32641: LD_INT 5
32643: NEG
32644: PUSH
32645: LD_INT 0
32647: PUSH
32648: EMPTY
32649: LIST
32650: LIST
32651: PUSH
32652: LD_INT 5
32654: NEG
32655: PUSH
32656: LD_INT 1
32658: NEG
32659: PUSH
32660: EMPTY
32661: LIST
32662: LIST
32663: PUSH
32664: LD_INT 5
32666: NEG
32667: PUSH
32668: LD_INT 2
32670: NEG
32671: PUSH
32672: EMPTY
32673: LIST
32674: LIST
32675: PUSH
32676: LD_INT 3
32678: NEG
32679: PUSH
32680: LD_INT 2
32682: PUSH
32683: EMPTY
32684: LIST
32685: LIST
32686: PUSH
32687: LD_INT 3
32689: NEG
32690: PUSH
32691: LD_INT 3
32693: NEG
32694: PUSH
32695: EMPTY
32696: LIST
32697: LIST
32698: PUSH
32699: LD_INT 3
32701: NEG
32702: PUSH
32703: LD_INT 4
32705: NEG
32706: PUSH
32707: EMPTY
32708: LIST
32709: LIST
32710: PUSH
32711: LD_INT 2
32713: NEG
32714: PUSH
32715: LD_INT 3
32717: NEG
32718: PUSH
32719: EMPTY
32720: LIST
32721: LIST
32722: PUSH
32723: LD_INT 2
32725: NEG
32726: PUSH
32727: LD_INT 2
32729: NEG
32730: PUSH
32731: EMPTY
32732: LIST
32733: LIST
32734: PUSH
32735: LD_INT 3
32737: NEG
32738: PUSH
32739: LD_INT 2
32741: NEG
32742: PUSH
32743: EMPTY
32744: LIST
32745: LIST
32746: PUSH
32747: LD_INT 4
32749: NEG
32750: PUSH
32751: LD_INT 3
32753: NEG
32754: PUSH
32755: EMPTY
32756: LIST
32757: LIST
32758: PUSH
32759: LD_INT 4
32761: NEG
32762: PUSH
32763: LD_INT 4
32765: NEG
32766: PUSH
32767: EMPTY
32768: LIST
32769: LIST
32770: PUSH
32771: LD_INT 2
32773: NEG
32774: PUSH
32775: LD_INT 4
32777: NEG
32778: PUSH
32779: EMPTY
32780: LIST
32781: LIST
32782: PUSH
32783: LD_INT 4
32785: NEG
32786: PUSH
32787: LD_INT 2
32789: NEG
32790: PUSH
32791: EMPTY
32792: LIST
32793: LIST
32794: PUSH
32795: LD_INT 0
32797: PUSH
32798: LD_INT 4
32800: NEG
32801: PUSH
32802: EMPTY
32803: LIST
32804: LIST
32805: PUSH
32806: LD_INT 0
32808: PUSH
32809: LD_INT 5
32811: NEG
32812: PUSH
32813: EMPTY
32814: LIST
32815: LIST
32816: PUSH
32817: LD_INT 1
32819: PUSH
32820: LD_INT 4
32822: NEG
32823: PUSH
32824: EMPTY
32825: LIST
32826: LIST
32827: PUSH
32828: LD_INT 1
32830: PUSH
32831: LD_INT 3
32833: NEG
32834: PUSH
32835: EMPTY
32836: LIST
32837: LIST
32838: PUSH
32839: LD_INT 0
32841: PUSH
32842: LD_INT 3
32844: NEG
32845: PUSH
32846: EMPTY
32847: LIST
32848: LIST
32849: PUSH
32850: LD_INT 1
32852: NEG
32853: PUSH
32854: LD_INT 4
32856: NEG
32857: PUSH
32858: EMPTY
32859: LIST
32860: LIST
32861: PUSH
32862: LD_INT 1
32864: NEG
32865: PUSH
32866: LD_INT 5
32868: NEG
32869: PUSH
32870: EMPTY
32871: LIST
32872: LIST
32873: PUSH
32874: LD_INT 2
32876: PUSH
32877: LD_INT 3
32879: NEG
32880: PUSH
32881: EMPTY
32882: LIST
32883: LIST
32884: PUSH
32885: LD_INT 2
32887: NEG
32888: PUSH
32889: LD_INT 5
32891: NEG
32892: PUSH
32893: EMPTY
32894: LIST
32895: LIST
32896: PUSH
32897: EMPTY
32898: LIST
32899: LIST
32900: LIST
32901: LIST
32902: LIST
32903: LIST
32904: LIST
32905: LIST
32906: LIST
32907: LIST
32908: LIST
32909: LIST
32910: LIST
32911: LIST
32912: LIST
32913: LIST
32914: LIST
32915: LIST
32916: LIST
32917: LIST
32918: LIST
32919: LIST
32920: LIST
32921: LIST
32922: LIST
32923: LIST
32924: LIST
32925: LIST
32926: LIST
32927: LIST
32928: LIST
32929: LIST
32930: LIST
32931: LIST
32932: LIST
32933: LIST
32934: LIST
32935: LIST
32936: LIST
32937: LIST
32938: LIST
32939: LIST
32940: LIST
32941: LIST
32942: LIST
32943: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
32944: LD_ADDR_VAR 0 31
32948: PUSH
32949: LD_INT 0
32951: PUSH
32952: LD_INT 4
32954: PUSH
32955: EMPTY
32956: LIST
32957: LIST
32958: PUSH
32959: LD_INT 0
32961: PUSH
32962: LD_INT 3
32964: PUSH
32965: EMPTY
32966: LIST
32967: LIST
32968: PUSH
32969: LD_INT 1
32971: PUSH
32972: LD_INT 4
32974: PUSH
32975: EMPTY
32976: LIST
32977: LIST
32978: PUSH
32979: LD_INT 1
32981: PUSH
32982: LD_INT 5
32984: PUSH
32985: EMPTY
32986: LIST
32987: LIST
32988: PUSH
32989: LD_INT 0
32991: PUSH
32992: LD_INT 5
32994: PUSH
32995: EMPTY
32996: LIST
32997: LIST
32998: PUSH
32999: LD_INT 1
33001: NEG
33002: PUSH
33003: LD_INT 4
33005: PUSH
33006: EMPTY
33007: LIST
33008: LIST
33009: PUSH
33010: LD_INT 1
33012: NEG
33013: PUSH
33014: LD_INT 3
33016: PUSH
33017: EMPTY
33018: LIST
33019: LIST
33020: PUSH
33021: LD_INT 2
33023: PUSH
33024: LD_INT 5
33026: PUSH
33027: EMPTY
33028: LIST
33029: LIST
33030: PUSH
33031: LD_INT 2
33033: NEG
33034: PUSH
33035: LD_INT 3
33037: PUSH
33038: EMPTY
33039: LIST
33040: LIST
33041: PUSH
33042: LD_INT 3
33044: NEG
33045: PUSH
33046: LD_INT 0
33048: PUSH
33049: EMPTY
33050: LIST
33051: LIST
33052: PUSH
33053: LD_INT 3
33055: NEG
33056: PUSH
33057: LD_INT 1
33059: NEG
33060: PUSH
33061: EMPTY
33062: LIST
33063: LIST
33064: PUSH
33065: LD_INT 2
33067: NEG
33068: PUSH
33069: LD_INT 0
33071: PUSH
33072: EMPTY
33073: LIST
33074: LIST
33075: PUSH
33076: LD_INT 2
33078: NEG
33079: PUSH
33080: LD_INT 1
33082: PUSH
33083: EMPTY
33084: LIST
33085: LIST
33086: PUSH
33087: LD_INT 3
33089: NEG
33090: PUSH
33091: LD_INT 1
33093: PUSH
33094: EMPTY
33095: LIST
33096: LIST
33097: PUSH
33098: LD_INT 4
33100: NEG
33101: PUSH
33102: LD_INT 0
33104: PUSH
33105: EMPTY
33106: LIST
33107: LIST
33108: PUSH
33109: LD_INT 4
33111: NEG
33112: PUSH
33113: LD_INT 1
33115: NEG
33116: PUSH
33117: EMPTY
33118: LIST
33119: LIST
33120: PUSH
33121: LD_INT 4
33123: NEG
33124: PUSH
33125: LD_INT 2
33127: NEG
33128: PUSH
33129: EMPTY
33130: LIST
33131: LIST
33132: PUSH
33133: LD_INT 2
33135: NEG
33136: PUSH
33137: LD_INT 2
33139: PUSH
33140: EMPTY
33141: LIST
33142: LIST
33143: PUSH
33144: LD_INT 4
33146: NEG
33147: PUSH
33148: LD_INT 4
33150: NEG
33151: PUSH
33152: EMPTY
33153: LIST
33154: LIST
33155: PUSH
33156: LD_INT 4
33158: NEG
33159: PUSH
33160: LD_INT 5
33162: NEG
33163: PUSH
33164: EMPTY
33165: LIST
33166: LIST
33167: PUSH
33168: LD_INT 3
33170: NEG
33171: PUSH
33172: LD_INT 4
33174: NEG
33175: PUSH
33176: EMPTY
33177: LIST
33178: LIST
33179: PUSH
33180: LD_INT 3
33182: NEG
33183: PUSH
33184: LD_INT 3
33186: NEG
33187: PUSH
33188: EMPTY
33189: LIST
33190: LIST
33191: PUSH
33192: LD_INT 4
33194: NEG
33195: PUSH
33196: LD_INT 3
33198: NEG
33199: PUSH
33200: EMPTY
33201: LIST
33202: LIST
33203: PUSH
33204: LD_INT 5
33206: NEG
33207: PUSH
33208: LD_INT 4
33210: NEG
33211: PUSH
33212: EMPTY
33213: LIST
33214: LIST
33215: PUSH
33216: LD_INT 5
33218: NEG
33219: PUSH
33220: LD_INT 5
33222: NEG
33223: PUSH
33224: EMPTY
33225: LIST
33226: LIST
33227: PUSH
33228: LD_INT 3
33230: NEG
33231: PUSH
33232: LD_INT 5
33234: NEG
33235: PUSH
33236: EMPTY
33237: LIST
33238: LIST
33239: PUSH
33240: LD_INT 5
33242: NEG
33243: PUSH
33244: LD_INT 3
33246: NEG
33247: PUSH
33248: EMPTY
33249: LIST
33250: LIST
33251: PUSH
33252: LD_INT 0
33254: PUSH
33255: LD_INT 3
33257: NEG
33258: PUSH
33259: EMPTY
33260: LIST
33261: LIST
33262: PUSH
33263: LD_INT 0
33265: PUSH
33266: LD_INT 4
33268: NEG
33269: PUSH
33270: EMPTY
33271: LIST
33272: LIST
33273: PUSH
33274: LD_INT 1
33276: PUSH
33277: LD_INT 3
33279: NEG
33280: PUSH
33281: EMPTY
33282: LIST
33283: LIST
33284: PUSH
33285: LD_INT 1
33287: PUSH
33288: LD_INT 2
33290: NEG
33291: PUSH
33292: EMPTY
33293: LIST
33294: LIST
33295: PUSH
33296: LD_INT 0
33298: PUSH
33299: LD_INT 2
33301: NEG
33302: PUSH
33303: EMPTY
33304: LIST
33305: LIST
33306: PUSH
33307: LD_INT 1
33309: NEG
33310: PUSH
33311: LD_INT 3
33313: NEG
33314: PUSH
33315: EMPTY
33316: LIST
33317: LIST
33318: PUSH
33319: LD_INT 1
33321: NEG
33322: PUSH
33323: LD_INT 4
33325: NEG
33326: PUSH
33327: EMPTY
33328: LIST
33329: LIST
33330: PUSH
33331: LD_INT 2
33333: PUSH
33334: LD_INT 2
33336: NEG
33337: PUSH
33338: EMPTY
33339: LIST
33340: LIST
33341: PUSH
33342: LD_INT 2
33344: NEG
33345: PUSH
33346: LD_INT 4
33348: NEG
33349: PUSH
33350: EMPTY
33351: LIST
33352: LIST
33353: PUSH
33354: LD_INT 4
33356: PUSH
33357: LD_INT 0
33359: PUSH
33360: EMPTY
33361: LIST
33362: LIST
33363: PUSH
33364: LD_INT 4
33366: PUSH
33367: LD_INT 1
33369: NEG
33370: PUSH
33371: EMPTY
33372: LIST
33373: LIST
33374: PUSH
33375: LD_INT 5
33377: PUSH
33378: LD_INT 0
33380: PUSH
33381: EMPTY
33382: LIST
33383: LIST
33384: PUSH
33385: LD_INT 5
33387: PUSH
33388: LD_INT 1
33390: PUSH
33391: EMPTY
33392: LIST
33393: LIST
33394: PUSH
33395: LD_INT 4
33397: PUSH
33398: LD_INT 1
33400: PUSH
33401: EMPTY
33402: LIST
33403: LIST
33404: PUSH
33405: LD_INT 3
33407: PUSH
33408: LD_INT 0
33410: PUSH
33411: EMPTY
33412: LIST
33413: LIST
33414: PUSH
33415: LD_INT 3
33417: PUSH
33418: LD_INT 1
33420: NEG
33421: PUSH
33422: EMPTY
33423: LIST
33424: LIST
33425: PUSH
33426: LD_INT 3
33428: PUSH
33429: LD_INT 2
33431: NEG
33432: PUSH
33433: EMPTY
33434: LIST
33435: LIST
33436: PUSH
33437: LD_INT 5
33439: PUSH
33440: LD_INT 2
33442: PUSH
33443: EMPTY
33444: LIST
33445: LIST
33446: PUSH
33447: EMPTY
33448: LIST
33449: LIST
33450: LIST
33451: LIST
33452: LIST
33453: LIST
33454: LIST
33455: LIST
33456: LIST
33457: LIST
33458: LIST
33459: LIST
33460: LIST
33461: LIST
33462: LIST
33463: LIST
33464: LIST
33465: LIST
33466: LIST
33467: LIST
33468: LIST
33469: LIST
33470: LIST
33471: LIST
33472: LIST
33473: LIST
33474: LIST
33475: LIST
33476: LIST
33477: LIST
33478: LIST
33479: LIST
33480: LIST
33481: LIST
33482: LIST
33483: LIST
33484: LIST
33485: LIST
33486: LIST
33487: LIST
33488: LIST
33489: LIST
33490: LIST
33491: LIST
33492: LIST
33493: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
33494: LD_ADDR_VAR 0 32
33498: PUSH
33499: LD_INT 4
33501: NEG
33502: PUSH
33503: LD_INT 0
33505: PUSH
33506: EMPTY
33507: LIST
33508: LIST
33509: PUSH
33510: LD_INT 4
33512: NEG
33513: PUSH
33514: LD_INT 1
33516: NEG
33517: PUSH
33518: EMPTY
33519: LIST
33520: LIST
33521: PUSH
33522: LD_INT 3
33524: NEG
33525: PUSH
33526: LD_INT 0
33528: PUSH
33529: EMPTY
33530: LIST
33531: LIST
33532: PUSH
33533: LD_INT 3
33535: NEG
33536: PUSH
33537: LD_INT 1
33539: PUSH
33540: EMPTY
33541: LIST
33542: LIST
33543: PUSH
33544: LD_INT 4
33546: NEG
33547: PUSH
33548: LD_INT 1
33550: PUSH
33551: EMPTY
33552: LIST
33553: LIST
33554: PUSH
33555: LD_INT 5
33557: NEG
33558: PUSH
33559: LD_INT 0
33561: PUSH
33562: EMPTY
33563: LIST
33564: LIST
33565: PUSH
33566: LD_INT 5
33568: NEG
33569: PUSH
33570: LD_INT 1
33572: NEG
33573: PUSH
33574: EMPTY
33575: LIST
33576: LIST
33577: PUSH
33578: LD_INT 5
33580: NEG
33581: PUSH
33582: LD_INT 2
33584: NEG
33585: PUSH
33586: EMPTY
33587: LIST
33588: LIST
33589: PUSH
33590: LD_INT 3
33592: NEG
33593: PUSH
33594: LD_INT 2
33596: PUSH
33597: EMPTY
33598: LIST
33599: LIST
33600: PUSH
33601: LD_INT 3
33603: NEG
33604: PUSH
33605: LD_INT 3
33607: NEG
33608: PUSH
33609: EMPTY
33610: LIST
33611: LIST
33612: PUSH
33613: LD_INT 3
33615: NEG
33616: PUSH
33617: LD_INT 4
33619: NEG
33620: PUSH
33621: EMPTY
33622: LIST
33623: LIST
33624: PUSH
33625: LD_INT 2
33627: NEG
33628: PUSH
33629: LD_INT 3
33631: NEG
33632: PUSH
33633: EMPTY
33634: LIST
33635: LIST
33636: PUSH
33637: LD_INT 2
33639: NEG
33640: PUSH
33641: LD_INT 2
33643: NEG
33644: PUSH
33645: EMPTY
33646: LIST
33647: LIST
33648: PUSH
33649: LD_INT 3
33651: NEG
33652: PUSH
33653: LD_INT 2
33655: NEG
33656: PUSH
33657: EMPTY
33658: LIST
33659: LIST
33660: PUSH
33661: LD_INT 4
33663: NEG
33664: PUSH
33665: LD_INT 3
33667: NEG
33668: PUSH
33669: EMPTY
33670: LIST
33671: LIST
33672: PUSH
33673: LD_INT 4
33675: NEG
33676: PUSH
33677: LD_INT 4
33679: NEG
33680: PUSH
33681: EMPTY
33682: LIST
33683: LIST
33684: PUSH
33685: LD_INT 2
33687: NEG
33688: PUSH
33689: LD_INT 4
33691: NEG
33692: PUSH
33693: EMPTY
33694: LIST
33695: LIST
33696: PUSH
33697: LD_INT 4
33699: NEG
33700: PUSH
33701: LD_INT 2
33703: NEG
33704: PUSH
33705: EMPTY
33706: LIST
33707: LIST
33708: PUSH
33709: LD_INT 0
33711: PUSH
33712: LD_INT 4
33714: NEG
33715: PUSH
33716: EMPTY
33717: LIST
33718: LIST
33719: PUSH
33720: LD_INT 0
33722: PUSH
33723: LD_INT 5
33725: NEG
33726: PUSH
33727: EMPTY
33728: LIST
33729: LIST
33730: PUSH
33731: LD_INT 1
33733: PUSH
33734: LD_INT 4
33736: NEG
33737: PUSH
33738: EMPTY
33739: LIST
33740: LIST
33741: PUSH
33742: LD_INT 1
33744: PUSH
33745: LD_INT 3
33747: NEG
33748: PUSH
33749: EMPTY
33750: LIST
33751: LIST
33752: PUSH
33753: LD_INT 0
33755: PUSH
33756: LD_INT 3
33758: NEG
33759: PUSH
33760: EMPTY
33761: LIST
33762: LIST
33763: PUSH
33764: LD_INT 1
33766: NEG
33767: PUSH
33768: LD_INT 4
33770: NEG
33771: PUSH
33772: EMPTY
33773: LIST
33774: LIST
33775: PUSH
33776: LD_INT 1
33778: NEG
33779: PUSH
33780: LD_INT 5
33782: NEG
33783: PUSH
33784: EMPTY
33785: LIST
33786: LIST
33787: PUSH
33788: LD_INT 2
33790: PUSH
33791: LD_INT 3
33793: NEG
33794: PUSH
33795: EMPTY
33796: LIST
33797: LIST
33798: PUSH
33799: LD_INT 2
33801: NEG
33802: PUSH
33803: LD_INT 5
33805: NEG
33806: PUSH
33807: EMPTY
33808: LIST
33809: LIST
33810: PUSH
33811: LD_INT 3
33813: PUSH
33814: LD_INT 0
33816: PUSH
33817: EMPTY
33818: LIST
33819: LIST
33820: PUSH
33821: LD_INT 3
33823: PUSH
33824: LD_INT 1
33826: NEG
33827: PUSH
33828: EMPTY
33829: LIST
33830: LIST
33831: PUSH
33832: LD_INT 4
33834: PUSH
33835: LD_INT 0
33837: PUSH
33838: EMPTY
33839: LIST
33840: LIST
33841: PUSH
33842: LD_INT 4
33844: PUSH
33845: LD_INT 1
33847: PUSH
33848: EMPTY
33849: LIST
33850: LIST
33851: PUSH
33852: LD_INT 3
33854: PUSH
33855: LD_INT 1
33857: PUSH
33858: EMPTY
33859: LIST
33860: LIST
33861: PUSH
33862: LD_INT 2
33864: PUSH
33865: LD_INT 0
33867: PUSH
33868: EMPTY
33869: LIST
33870: LIST
33871: PUSH
33872: LD_INT 2
33874: PUSH
33875: LD_INT 1
33877: NEG
33878: PUSH
33879: EMPTY
33880: LIST
33881: LIST
33882: PUSH
33883: LD_INT 2
33885: PUSH
33886: LD_INT 2
33888: NEG
33889: PUSH
33890: EMPTY
33891: LIST
33892: LIST
33893: PUSH
33894: LD_INT 4
33896: PUSH
33897: LD_INT 2
33899: PUSH
33900: EMPTY
33901: LIST
33902: LIST
33903: PUSH
33904: LD_INT 4
33906: PUSH
33907: LD_INT 4
33909: PUSH
33910: EMPTY
33911: LIST
33912: LIST
33913: PUSH
33914: LD_INT 4
33916: PUSH
33917: LD_INT 3
33919: PUSH
33920: EMPTY
33921: LIST
33922: LIST
33923: PUSH
33924: LD_INT 5
33926: PUSH
33927: LD_INT 4
33929: PUSH
33930: EMPTY
33931: LIST
33932: LIST
33933: PUSH
33934: LD_INT 5
33936: PUSH
33937: LD_INT 5
33939: PUSH
33940: EMPTY
33941: LIST
33942: LIST
33943: PUSH
33944: LD_INT 4
33946: PUSH
33947: LD_INT 5
33949: PUSH
33950: EMPTY
33951: LIST
33952: LIST
33953: PUSH
33954: LD_INT 3
33956: PUSH
33957: LD_INT 4
33959: PUSH
33960: EMPTY
33961: LIST
33962: LIST
33963: PUSH
33964: LD_INT 3
33966: PUSH
33967: LD_INT 3
33969: PUSH
33970: EMPTY
33971: LIST
33972: LIST
33973: PUSH
33974: LD_INT 5
33976: PUSH
33977: LD_INT 3
33979: PUSH
33980: EMPTY
33981: LIST
33982: LIST
33983: PUSH
33984: LD_INT 3
33986: PUSH
33987: LD_INT 5
33989: PUSH
33990: EMPTY
33991: LIST
33992: LIST
33993: PUSH
33994: EMPTY
33995: LIST
33996: LIST
33997: LIST
33998: LIST
33999: LIST
34000: LIST
34001: LIST
34002: LIST
34003: LIST
34004: LIST
34005: LIST
34006: LIST
34007: LIST
34008: LIST
34009: LIST
34010: LIST
34011: LIST
34012: LIST
34013: LIST
34014: LIST
34015: LIST
34016: LIST
34017: LIST
34018: LIST
34019: LIST
34020: LIST
34021: LIST
34022: LIST
34023: LIST
34024: LIST
34025: LIST
34026: LIST
34027: LIST
34028: LIST
34029: LIST
34030: LIST
34031: LIST
34032: LIST
34033: LIST
34034: LIST
34035: LIST
34036: LIST
34037: LIST
34038: LIST
34039: LIST
34040: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
34041: LD_ADDR_VAR 0 33
34045: PUSH
34046: LD_INT 4
34048: NEG
34049: PUSH
34050: LD_INT 4
34052: NEG
34053: PUSH
34054: EMPTY
34055: LIST
34056: LIST
34057: PUSH
34058: LD_INT 4
34060: NEG
34061: PUSH
34062: LD_INT 5
34064: NEG
34065: PUSH
34066: EMPTY
34067: LIST
34068: LIST
34069: PUSH
34070: LD_INT 3
34072: NEG
34073: PUSH
34074: LD_INT 4
34076: NEG
34077: PUSH
34078: EMPTY
34079: LIST
34080: LIST
34081: PUSH
34082: LD_INT 3
34084: NEG
34085: PUSH
34086: LD_INT 3
34088: NEG
34089: PUSH
34090: EMPTY
34091: LIST
34092: LIST
34093: PUSH
34094: LD_INT 4
34096: NEG
34097: PUSH
34098: LD_INT 3
34100: NEG
34101: PUSH
34102: EMPTY
34103: LIST
34104: LIST
34105: PUSH
34106: LD_INT 5
34108: NEG
34109: PUSH
34110: LD_INT 4
34112: NEG
34113: PUSH
34114: EMPTY
34115: LIST
34116: LIST
34117: PUSH
34118: LD_INT 5
34120: NEG
34121: PUSH
34122: LD_INT 5
34124: NEG
34125: PUSH
34126: EMPTY
34127: LIST
34128: LIST
34129: PUSH
34130: LD_INT 3
34132: NEG
34133: PUSH
34134: LD_INT 5
34136: NEG
34137: PUSH
34138: EMPTY
34139: LIST
34140: LIST
34141: PUSH
34142: LD_INT 5
34144: NEG
34145: PUSH
34146: LD_INT 3
34148: NEG
34149: PUSH
34150: EMPTY
34151: LIST
34152: LIST
34153: PUSH
34154: LD_INT 0
34156: PUSH
34157: LD_INT 3
34159: NEG
34160: PUSH
34161: EMPTY
34162: LIST
34163: LIST
34164: PUSH
34165: LD_INT 0
34167: PUSH
34168: LD_INT 4
34170: NEG
34171: PUSH
34172: EMPTY
34173: LIST
34174: LIST
34175: PUSH
34176: LD_INT 1
34178: PUSH
34179: LD_INT 3
34181: NEG
34182: PUSH
34183: EMPTY
34184: LIST
34185: LIST
34186: PUSH
34187: LD_INT 1
34189: PUSH
34190: LD_INT 2
34192: NEG
34193: PUSH
34194: EMPTY
34195: LIST
34196: LIST
34197: PUSH
34198: LD_INT 0
34200: PUSH
34201: LD_INT 2
34203: NEG
34204: PUSH
34205: EMPTY
34206: LIST
34207: LIST
34208: PUSH
34209: LD_INT 1
34211: NEG
34212: PUSH
34213: LD_INT 3
34215: NEG
34216: PUSH
34217: EMPTY
34218: LIST
34219: LIST
34220: PUSH
34221: LD_INT 1
34223: NEG
34224: PUSH
34225: LD_INT 4
34227: NEG
34228: PUSH
34229: EMPTY
34230: LIST
34231: LIST
34232: PUSH
34233: LD_INT 2
34235: PUSH
34236: LD_INT 2
34238: NEG
34239: PUSH
34240: EMPTY
34241: LIST
34242: LIST
34243: PUSH
34244: LD_INT 2
34246: NEG
34247: PUSH
34248: LD_INT 4
34250: NEG
34251: PUSH
34252: EMPTY
34253: LIST
34254: LIST
34255: PUSH
34256: LD_INT 4
34258: PUSH
34259: LD_INT 0
34261: PUSH
34262: EMPTY
34263: LIST
34264: LIST
34265: PUSH
34266: LD_INT 4
34268: PUSH
34269: LD_INT 1
34271: NEG
34272: PUSH
34273: EMPTY
34274: LIST
34275: LIST
34276: PUSH
34277: LD_INT 5
34279: PUSH
34280: LD_INT 0
34282: PUSH
34283: EMPTY
34284: LIST
34285: LIST
34286: PUSH
34287: LD_INT 5
34289: PUSH
34290: LD_INT 1
34292: PUSH
34293: EMPTY
34294: LIST
34295: LIST
34296: PUSH
34297: LD_INT 4
34299: PUSH
34300: LD_INT 1
34302: PUSH
34303: EMPTY
34304: LIST
34305: LIST
34306: PUSH
34307: LD_INT 3
34309: PUSH
34310: LD_INT 0
34312: PUSH
34313: EMPTY
34314: LIST
34315: LIST
34316: PUSH
34317: LD_INT 3
34319: PUSH
34320: LD_INT 1
34322: NEG
34323: PUSH
34324: EMPTY
34325: LIST
34326: LIST
34327: PUSH
34328: LD_INT 3
34330: PUSH
34331: LD_INT 2
34333: NEG
34334: PUSH
34335: EMPTY
34336: LIST
34337: LIST
34338: PUSH
34339: LD_INT 5
34341: PUSH
34342: LD_INT 2
34344: PUSH
34345: EMPTY
34346: LIST
34347: LIST
34348: PUSH
34349: LD_INT 3
34351: PUSH
34352: LD_INT 3
34354: PUSH
34355: EMPTY
34356: LIST
34357: LIST
34358: PUSH
34359: LD_INT 3
34361: PUSH
34362: LD_INT 2
34364: PUSH
34365: EMPTY
34366: LIST
34367: LIST
34368: PUSH
34369: LD_INT 4
34371: PUSH
34372: LD_INT 3
34374: PUSH
34375: EMPTY
34376: LIST
34377: LIST
34378: PUSH
34379: LD_INT 4
34381: PUSH
34382: LD_INT 4
34384: PUSH
34385: EMPTY
34386: LIST
34387: LIST
34388: PUSH
34389: LD_INT 3
34391: PUSH
34392: LD_INT 4
34394: PUSH
34395: EMPTY
34396: LIST
34397: LIST
34398: PUSH
34399: LD_INT 2
34401: PUSH
34402: LD_INT 3
34404: PUSH
34405: EMPTY
34406: LIST
34407: LIST
34408: PUSH
34409: LD_INT 2
34411: PUSH
34412: LD_INT 2
34414: PUSH
34415: EMPTY
34416: LIST
34417: LIST
34418: PUSH
34419: LD_INT 4
34421: PUSH
34422: LD_INT 2
34424: PUSH
34425: EMPTY
34426: LIST
34427: LIST
34428: PUSH
34429: LD_INT 2
34431: PUSH
34432: LD_INT 4
34434: PUSH
34435: EMPTY
34436: LIST
34437: LIST
34438: PUSH
34439: LD_INT 0
34441: PUSH
34442: LD_INT 4
34444: PUSH
34445: EMPTY
34446: LIST
34447: LIST
34448: PUSH
34449: LD_INT 0
34451: PUSH
34452: LD_INT 3
34454: PUSH
34455: EMPTY
34456: LIST
34457: LIST
34458: PUSH
34459: LD_INT 1
34461: PUSH
34462: LD_INT 4
34464: PUSH
34465: EMPTY
34466: LIST
34467: LIST
34468: PUSH
34469: LD_INT 1
34471: PUSH
34472: LD_INT 5
34474: PUSH
34475: EMPTY
34476: LIST
34477: LIST
34478: PUSH
34479: LD_INT 0
34481: PUSH
34482: LD_INT 5
34484: PUSH
34485: EMPTY
34486: LIST
34487: LIST
34488: PUSH
34489: LD_INT 1
34491: NEG
34492: PUSH
34493: LD_INT 4
34495: PUSH
34496: EMPTY
34497: LIST
34498: LIST
34499: PUSH
34500: LD_INT 1
34502: NEG
34503: PUSH
34504: LD_INT 3
34506: PUSH
34507: EMPTY
34508: LIST
34509: LIST
34510: PUSH
34511: LD_INT 2
34513: PUSH
34514: LD_INT 5
34516: PUSH
34517: EMPTY
34518: LIST
34519: LIST
34520: PUSH
34521: LD_INT 2
34523: NEG
34524: PUSH
34525: LD_INT 3
34527: PUSH
34528: EMPTY
34529: LIST
34530: LIST
34531: PUSH
34532: EMPTY
34533: LIST
34534: LIST
34535: LIST
34536: LIST
34537: LIST
34538: LIST
34539: LIST
34540: LIST
34541: LIST
34542: LIST
34543: LIST
34544: LIST
34545: LIST
34546: LIST
34547: LIST
34548: LIST
34549: LIST
34550: LIST
34551: LIST
34552: LIST
34553: LIST
34554: LIST
34555: LIST
34556: LIST
34557: LIST
34558: LIST
34559: LIST
34560: LIST
34561: LIST
34562: LIST
34563: LIST
34564: LIST
34565: LIST
34566: LIST
34567: LIST
34568: LIST
34569: LIST
34570: LIST
34571: LIST
34572: LIST
34573: LIST
34574: LIST
34575: LIST
34576: LIST
34577: LIST
34578: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
34579: LD_ADDR_VAR 0 34
34583: PUSH
34584: LD_INT 0
34586: PUSH
34587: LD_INT 4
34589: NEG
34590: PUSH
34591: EMPTY
34592: LIST
34593: LIST
34594: PUSH
34595: LD_INT 0
34597: PUSH
34598: LD_INT 5
34600: NEG
34601: PUSH
34602: EMPTY
34603: LIST
34604: LIST
34605: PUSH
34606: LD_INT 1
34608: PUSH
34609: LD_INT 4
34611: NEG
34612: PUSH
34613: EMPTY
34614: LIST
34615: LIST
34616: PUSH
34617: LD_INT 1
34619: PUSH
34620: LD_INT 3
34622: NEG
34623: PUSH
34624: EMPTY
34625: LIST
34626: LIST
34627: PUSH
34628: LD_INT 0
34630: PUSH
34631: LD_INT 3
34633: NEG
34634: PUSH
34635: EMPTY
34636: LIST
34637: LIST
34638: PUSH
34639: LD_INT 1
34641: NEG
34642: PUSH
34643: LD_INT 4
34645: NEG
34646: PUSH
34647: EMPTY
34648: LIST
34649: LIST
34650: PUSH
34651: LD_INT 1
34653: NEG
34654: PUSH
34655: LD_INT 5
34657: NEG
34658: PUSH
34659: EMPTY
34660: LIST
34661: LIST
34662: PUSH
34663: LD_INT 2
34665: PUSH
34666: LD_INT 3
34668: NEG
34669: PUSH
34670: EMPTY
34671: LIST
34672: LIST
34673: PUSH
34674: LD_INT 2
34676: NEG
34677: PUSH
34678: LD_INT 5
34680: NEG
34681: PUSH
34682: EMPTY
34683: LIST
34684: LIST
34685: PUSH
34686: LD_INT 3
34688: PUSH
34689: LD_INT 0
34691: PUSH
34692: EMPTY
34693: LIST
34694: LIST
34695: PUSH
34696: LD_INT 3
34698: PUSH
34699: LD_INT 1
34701: NEG
34702: PUSH
34703: EMPTY
34704: LIST
34705: LIST
34706: PUSH
34707: LD_INT 4
34709: PUSH
34710: LD_INT 0
34712: PUSH
34713: EMPTY
34714: LIST
34715: LIST
34716: PUSH
34717: LD_INT 4
34719: PUSH
34720: LD_INT 1
34722: PUSH
34723: EMPTY
34724: LIST
34725: LIST
34726: PUSH
34727: LD_INT 3
34729: PUSH
34730: LD_INT 1
34732: PUSH
34733: EMPTY
34734: LIST
34735: LIST
34736: PUSH
34737: LD_INT 2
34739: PUSH
34740: LD_INT 0
34742: PUSH
34743: EMPTY
34744: LIST
34745: LIST
34746: PUSH
34747: LD_INT 2
34749: PUSH
34750: LD_INT 1
34752: NEG
34753: PUSH
34754: EMPTY
34755: LIST
34756: LIST
34757: PUSH
34758: LD_INT 2
34760: PUSH
34761: LD_INT 2
34763: NEG
34764: PUSH
34765: EMPTY
34766: LIST
34767: LIST
34768: PUSH
34769: LD_INT 4
34771: PUSH
34772: LD_INT 2
34774: PUSH
34775: EMPTY
34776: LIST
34777: LIST
34778: PUSH
34779: LD_INT 4
34781: PUSH
34782: LD_INT 4
34784: PUSH
34785: EMPTY
34786: LIST
34787: LIST
34788: PUSH
34789: LD_INT 4
34791: PUSH
34792: LD_INT 3
34794: PUSH
34795: EMPTY
34796: LIST
34797: LIST
34798: PUSH
34799: LD_INT 5
34801: PUSH
34802: LD_INT 4
34804: PUSH
34805: EMPTY
34806: LIST
34807: LIST
34808: PUSH
34809: LD_INT 5
34811: PUSH
34812: LD_INT 5
34814: PUSH
34815: EMPTY
34816: LIST
34817: LIST
34818: PUSH
34819: LD_INT 4
34821: PUSH
34822: LD_INT 5
34824: PUSH
34825: EMPTY
34826: LIST
34827: LIST
34828: PUSH
34829: LD_INT 3
34831: PUSH
34832: LD_INT 4
34834: PUSH
34835: EMPTY
34836: LIST
34837: LIST
34838: PUSH
34839: LD_INT 3
34841: PUSH
34842: LD_INT 3
34844: PUSH
34845: EMPTY
34846: LIST
34847: LIST
34848: PUSH
34849: LD_INT 5
34851: PUSH
34852: LD_INT 3
34854: PUSH
34855: EMPTY
34856: LIST
34857: LIST
34858: PUSH
34859: LD_INT 3
34861: PUSH
34862: LD_INT 5
34864: PUSH
34865: EMPTY
34866: LIST
34867: LIST
34868: PUSH
34869: LD_INT 0
34871: PUSH
34872: LD_INT 3
34874: PUSH
34875: EMPTY
34876: LIST
34877: LIST
34878: PUSH
34879: LD_INT 0
34881: PUSH
34882: LD_INT 2
34884: PUSH
34885: EMPTY
34886: LIST
34887: LIST
34888: PUSH
34889: LD_INT 1
34891: PUSH
34892: LD_INT 3
34894: PUSH
34895: EMPTY
34896: LIST
34897: LIST
34898: PUSH
34899: LD_INT 1
34901: PUSH
34902: LD_INT 4
34904: PUSH
34905: EMPTY
34906: LIST
34907: LIST
34908: PUSH
34909: LD_INT 0
34911: PUSH
34912: LD_INT 4
34914: PUSH
34915: EMPTY
34916: LIST
34917: LIST
34918: PUSH
34919: LD_INT 1
34921: NEG
34922: PUSH
34923: LD_INT 3
34925: PUSH
34926: EMPTY
34927: LIST
34928: LIST
34929: PUSH
34930: LD_INT 1
34932: NEG
34933: PUSH
34934: LD_INT 2
34936: PUSH
34937: EMPTY
34938: LIST
34939: LIST
34940: PUSH
34941: LD_INT 2
34943: PUSH
34944: LD_INT 4
34946: PUSH
34947: EMPTY
34948: LIST
34949: LIST
34950: PUSH
34951: LD_INT 2
34953: NEG
34954: PUSH
34955: LD_INT 2
34957: PUSH
34958: EMPTY
34959: LIST
34960: LIST
34961: PUSH
34962: LD_INT 4
34964: NEG
34965: PUSH
34966: LD_INT 0
34968: PUSH
34969: EMPTY
34970: LIST
34971: LIST
34972: PUSH
34973: LD_INT 4
34975: NEG
34976: PUSH
34977: LD_INT 1
34979: NEG
34980: PUSH
34981: EMPTY
34982: LIST
34983: LIST
34984: PUSH
34985: LD_INT 3
34987: NEG
34988: PUSH
34989: LD_INT 0
34991: PUSH
34992: EMPTY
34993: LIST
34994: LIST
34995: PUSH
34996: LD_INT 3
34998: NEG
34999: PUSH
35000: LD_INT 1
35002: PUSH
35003: EMPTY
35004: LIST
35005: LIST
35006: PUSH
35007: LD_INT 4
35009: NEG
35010: PUSH
35011: LD_INT 1
35013: PUSH
35014: EMPTY
35015: LIST
35016: LIST
35017: PUSH
35018: LD_INT 5
35020: NEG
35021: PUSH
35022: LD_INT 0
35024: PUSH
35025: EMPTY
35026: LIST
35027: LIST
35028: PUSH
35029: LD_INT 5
35031: NEG
35032: PUSH
35033: LD_INT 1
35035: NEG
35036: PUSH
35037: EMPTY
35038: LIST
35039: LIST
35040: PUSH
35041: LD_INT 5
35043: NEG
35044: PUSH
35045: LD_INT 2
35047: NEG
35048: PUSH
35049: EMPTY
35050: LIST
35051: LIST
35052: PUSH
35053: LD_INT 3
35055: NEG
35056: PUSH
35057: LD_INT 2
35059: PUSH
35060: EMPTY
35061: LIST
35062: LIST
35063: PUSH
35064: EMPTY
35065: LIST
35066: LIST
35067: LIST
35068: LIST
35069: LIST
35070: LIST
35071: LIST
35072: LIST
35073: LIST
35074: LIST
35075: LIST
35076: LIST
35077: LIST
35078: LIST
35079: LIST
35080: LIST
35081: LIST
35082: LIST
35083: LIST
35084: LIST
35085: LIST
35086: LIST
35087: LIST
35088: LIST
35089: LIST
35090: LIST
35091: LIST
35092: LIST
35093: LIST
35094: LIST
35095: LIST
35096: LIST
35097: LIST
35098: LIST
35099: LIST
35100: LIST
35101: LIST
35102: LIST
35103: LIST
35104: LIST
35105: LIST
35106: LIST
35107: LIST
35108: LIST
35109: LIST
35110: ST_TO_ADDR
// end ; end ;
35111: GO 35114
35113: POP
// case btype of b_depot , b_warehouse :
35114: LD_VAR 0 1
35118: PUSH
35119: LD_INT 0
35121: DOUBLE
35122: EQUAL
35123: IFTRUE 35133
35125: LD_INT 1
35127: DOUBLE
35128: EQUAL
35129: IFTRUE 35133
35131: GO 35334
35133: POP
// case nation of nation_american :
35134: LD_VAR 0 5
35138: PUSH
35139: LD_INT 1
35141: DOUBLE
35142: EQUAL
35143: IFTRUE 35147
35145: GO 35203
35147: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
35148: LD_ADDR_VAR 0 9
35152: PUSH
35153: LD_VAR 0 11
35157: PUSH
35158: LD_VAR 0 12
35162: PUSH
35163: LD_VAR 0 13
35167: PUSH
35168: LD_VAR 0 14
35172: PUSH
35173: LD_VAR 0 15
35177: PUSH
35178: LD_VAR 0 16
35182: PUSH
35183: EMPTY
35184: LIST
35185: LIST
35186: LIST
35187: LIST
35188: LIST
35189: LIST
35190: PUSH
35191: LD_VAR 0 4
35195: PUSH
35196: LD_INT 1
35198: PLUS
35199: ARRAY
35200: ST_TO_ADDR
35201: GO 35332
35203: LD_INT 2
35205: DOUBLE
35206: EQUAL
35207: IFTRUE 35211
35209: GO 35267
35211: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
35212: LD_ADDR_VAR 0 9
35216: PUSH
35217: LD_VAR 0 17
35221: PUSH
35222: LD_VAR 0 18
35226: PUSH
35227: LD_VAR 0 19
35231: PUSH
35232: LD_VAR 0 20
35236: PUSH
35237: LD_VAR 0 21
35241: PUSH
35242: LD_VAR 0 22
35246: PUSH
35247: EMPTY
35248: LIST
35249: LIST
35250: LIST
35251: LIST
35252: LIST
35253: LIST
35254: PUSH
35255: LD_VAR 0 4
35259: PUSH
35260: LD_INT 1
35262: PLUS
35263: ARRAY
35264: ST_TO_ADDR
35265: GO 35332
35267: LD_INT 3
35269: DOUBLE
35270: EQUAL
35271: IFTRUE 35275
35273: GO 35331
35275: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
35276: LD_ADDR_VAR 0 9
35280: PUSH
35281: LD_VAR 0 23
35285: PUSH
35286: LD_VAR 0 24
35290: PUSH
35291: LD_VAR 0 25
35295: PUSH
35296: LD_VAR 0 26
35300: PUSH
35301: LD_VAR 0 27
35305: PUSH
35306: LD_VAR 0 28
35310: PUSH
35311: EMPTY
35312: LIST
35313: LIST
35314: LIST
35315: LIST
35316: LIST
35317: LIST
35318: PUSH
35319: LD_VAR 0 4
35323: PUSH
35324: LD_INT 1
35326: PLUS
35327: ARRAY
35328: ST_TO_ADDR
35329: GO 35332
35331: POP
35332: GO 35887
35334: LD_INT 2
35336: DOUBLE
35337: EQUAL
35338: IFTRUE 35348
35340: LD_INT 3
35342: DOUBLE
35343: EQUAL
35344: IFTRUE 35348
35346: GO 35404
35348: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
35349: LD_ADDR_VAR 0 9
35353: PUSH
35354: LD_VAR 0 29
35358: PUSH
35359: LD_VAR 0 30
35363: PUSH
35364: LD_VAR 0 31
35368: PUSH
35369: LD_VAR 0 32
35373: PUSH
35374: LD_VAR 0 33
35378: PUSH
35379: LD_VAR 0 34
35383: PUSH
35384: EMPTY
35385: LIST
35386: LIST
35387: LIST
35388: LIST
35389: LIST
35390: LIST
35391: PUSH
35392: LD_VAR 0 4
35396: PUSH
35397: LD_INT 1
35399: PLUS
35400: ARRAY
35401: ST_TO_ADDR
35402: GO 35887
35404: LD_INT 16
35406: DOUBLE
35407: EQUAL
35408: IFTRUE 35466
35410: LD_INT 17
35412: DOUBLE
35413: EQUAL
35414: IFTRUE 35466
35416: LD_INT 18
35418: DOUBLE
35419: EQUAL
35420: IFTRUE 35466
35422: LD_INT 19
35424: DOUBLE
35425: EQUAL
35426: IFTRUE 35466
35428: LD_INT 22
35430: DOUBLE
35431: EQUAL
35432: IFTRUE 35466
35434: LD_INT 20
35436: DOUBLE
35437: EQUAL
35438: IFTRUE 35466
35440: LD_INT 21
35442: DOUBLE
35443: EQUAL
35444: IFTRUE 35466
35446: LD_INT 23
35448: DOUBLE
35449: EQUAL
35450: IFTRUE 35466
35452: LD_INT 24
35454: DOUBLE
35455: EQUAL
35456: IFTRUE 35466
35458: LD_INT 25
35460: DOUBLE
35461: EQUAL
35462: IFTRUE 35466
35464: GO 35522
35466: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
35467: LD_ADDR_VAR 0 9
35471: PUSH
35472: LD_VAR 0 35
35476: PUSH
35477: LD_VAR 0 36
35481: PUSH
35482: LD_VAR 0 37
35486: PUSH
35487: LD_VAR 0 38
35491: PUSH
35492: LD_VAR 0 39
35496: PUSH
35497: LD_VAR 0 40
35501: PUSH
35502: EMPTY
35503: LIST
35504: LIST
35505: LIST
35506: LIST
35507: LIST
35508: LIST
35509: PUSH
35510: LD_VAR 0 4
35514: PUSH
35515: LD_INT 1
35517: PLUS
35518: ARRAY
35519: ST_TO_ADDR
35520: GO 35887
35522: LD_INT 6
35524: DOUBLE
35525: EQUAL
35526: IFTRUE 35578
35528: LD_INT 7
35530: DOUBLE
35531: EQUAL
35532: IFTRUE 35578
35534: LD_INT 8
35536: DOUBLE
35537: EQUAL
35538: IFTRUE 35578
35540: LD_INT 13
35542: DOUBLE
35543: EQUAL
35544: IFTRUE 35578
35546: LD_INT 12
35548: DOUBLE
35549: EQUAL
35550: IFTRUE 35578
35552: LD_INT 15
35554: DOUBLE
35555: EQUAL
35556: IFTRUE 35578
35558: LD_INT 11
35560: DOUBLE
35561: EQUAL
35562: IFTRUE 35578
35564: LD_INT 14
35566: DOUBLE
35567: EQUAL
35568: IFTRUE 35578
35570: LD_INT 10
35572: DOUBLE
35573: EQUAL
35574: IFTRUE 35578
35576: GO 35634
35578: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
35579: LD_ADDR_VAR 0 9
35583: PUSH
35584: LD_VAR 0 41
35588: PUSH
35589: LD_VAR 0 42
35593: PUSH
35594: LD_VAR 0 43
35598: PUSH
35599: LD_VAR 0 44
35603: PUSH
35604: LD_VAR 0 45
35608: PUSH
35609: LD_VAR 0 46
35613: PUSH
35614: EMPTY
35615: LIST
35616: LIST
35617: LIST
35618: LIST
35619: LIST
35620: LIST
35621: PUSH
35622: LD_VAR 0 4
35626: PUSH
35627: LD_INT 1
35629: PLUS
35630: ARRAY
35631: ST_TO_ADDR
35632: GO 35887
35634: LD_INT 36
35636: DOUBLE
35637: EQUAL
35638: IFTRUE 35642
35640: GO 35698
35642: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
35643: LD_ADDR_VAR 0 9
35647: PUSH
35648: LD_VAR 0 47
35652: PUSH
35653: LD_VAR 0 48
35657: PUSH
35658: LD_VAR 0 49
35662: PUSH
35663: LD_VAR 0 50
35667: PUSH
35668: LD_VAR 0 51
35672: PUSH
35673: LD_VAR 0 52
35677: PUSH
35678: EMPTY
35679: LIST
35680: LIST
35681: LIST
35682: LIST
35683: LIST
35684: LIST
35685: PUSH
35686: LD_VAR 0 4
35690: PUSH
35691: LD_INT 1
35693: PLUS
35694: ARRAY
35695: ST_TO_ADDR
35696: GO 35887
35698: LD_INT 4
35700: DOUBLE
35701: EQUAL
35702: IFTRUE 35724
35704: LD_INT 5
35706: DOUBLE
35707: EQUAL
35708: IFTRUE 35724
35710: LD_INT 34
35712: DOUBLE
35713: EQUAL
35714: IFTRUE 35724
35716: LD_INT 37
35718: DOUBLE
35719: EQUAL
35720: IFTRUE 35724
35722: GO 35780
35724: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
35725: LD_ADDR_VAR 0 9
35729: PUSH
35730: LD_VAR 0 53
35734: PUSH
35735: LD_VAR 0 54
35739: PUSH
35740: LD_VAR 0 55
35744: PUSH
35745: LD_VAR 0 56
35749: PUSH
35750: LD_VAR 0 57
35754: PUSH
35755: LD_VAR 0 58
35759: PUSH
35760: EMPTY
35761: LIST
35762: LIST
35763: LIST
35764: LIST
35765: LIST
35766: LIST
35767: PUSH
35768: LD_VAR 0 4
35772: PUSH
35773: LD_INT 1
35775: PLUS
35776: ARRAY
35777: ST_TO_ADDR
35778: GO 35887
35780: LD_INT 31
35782: DOUBLE
35783: EQUAL
35784: IFTRUE 35830
35786: LD_INT 32
35788: DOUBLE
35789: EQUAL
35790: IFTRUE 35830
35792: LD_INT 33
35794: DOUBLE
35795: EQUAL
35796: IFTRUE 35830
35798: LD_INT 27
35800: DOUBLE
35801: EQUAL
35802: IFTRUE 35830
35804: LD_INT 26
35806: DOUBLE
35807: EQUAL
35808: IFTRUE 35830
35810: LD_INT 28
35812: DOUBLE
35813: EQUAL
35814: IFTRUE 35830
35816: LD_INT 29
35818: DOUBLE
35819: EQUAL
35820: IFTRUE 35830
35822: LD_INT 30
35824: DOUBLE
35825: EQUAL
35826: IFTRUE 35830
35828: GO 35886
35830: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
35831: LD_ADDR_VAR 0 9
35835: PUSH
35836: LD_VAR 0 59
35840: PUSH
35841: LD_VAR 0 60
35845: PUSH
35846: LD_VAR 0 61
35850: PUSH
35851: LD_VAR 0 62
35855: PUSH
35856: LD_VAR 0 63
35860: PUSH
35861: LD_VAR 0 64
35865: PUSH
35866: EMPTY
35867: LIST
35868: LIST
35869: LIST
35870: LIST
35871: LIST
35872: LIST
35873: PUSH
35874: LD_VAR 0 4
35878: PUSH
35879: LD_INT 1
35881: PLUS
35882: ARRAY
35883: ST_TO_ADDR
35884: GO 35887
35886: POP
// temp_list2 = [ ] ;
35887: LD_ADDR_VAR 0 10
35891: PUSH
35892: EMPTY
35893: ST_TO_ADDR
// for i in temp_list do
35894: LD_ADDR_VAR 0 8
35898: PUSH
35899: LD_VAR 0 9
35903: PUSH
35904: FOR_IN
35905: IFFALSE 35957
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
35907: LD_ADDR_VAR 0 10
35911: PUSH
35912: LD_VAR 0 10
35916: PUSH
35917: LD_VAR 0 8
35921: PUSH
35922: LD_INT 1
35924: ARRAY
35925: PUSH
35926: LD_VAR 0 2
35930: PLUS
35931: PUSH
35932: LD_VAR 0 8
35936: PUSH
35937: LD_INT 2
35939: ARRAY
35940: PUSH
35941: LD_VAR 0 3
35945: PLUS
35946: PUSH
35947: EMPTY
35948: LIST
35949: LIST
35950: PUSH
35951: EMPTY
35952: LIST
35953: ADD
35954: ST_TO_ADDR
35955: GO 35904
35957: POP
35958: POP
// result = temp_list2 ;
35959: LD_ADDR_VAR 0 7
35963: PUSH
35964: LD_VAR 0 10
35968: ST_TO_ADDR
// end ;
35969: LD_VAR 0 7
35973: RET
// export function EnemyInRange ( unit , dist ) ; begin
35974: LD_INT 0
35976: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
35977: LD_ADDR_VAR 0 3
35981: PUSH
35982: LD_VAR 0 1
35986: PPUSH
35987: CALL_OW 255
35991: PPUSH
35992: LD_VAR 0 1
35996: PPUSH
35997: CALL_OW 250
36001: PPUSH
36002: LD_VAR 0 1
36006: PPUSH
36007: CALL_OW 251
36011: PPUSH
36012: LD_VAR 0 2
36016: PPUSH
36017: CALL 9231 0 4
36021: PUSH
36022: LD_INT 4
36024: ARRAY
36025: ST_TO_ADDR
// end ;
36026: LD_VAR 0 3
36030: RET
// export function PlayerSeeMe ( unit ) ; begin
36031: LD_INT 0
36033: PPUSH
// result := See ( your_side , unit ) ;
36034: LD_ADDR_VAR 0 2
36038: PUSH
36039: LD_OWVAR 2
36043: PPUSH
36044: LD_VAR 0 1
36048: PPUSH
36049: CALL_OW 292
36053: ST_TO_ADDR
// end ;
36054: LD_VAR 0 2
36058: RET
// export function ReverseDir ( unit ) ; begin
36059: LD_INT 0
36061: PPUSH
// if not unit then
36062: LD_VAR 0 1
36066: NOT
36067: IFFALSE 36071
// exit ;
36069: GO 36094
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
36071: LD_ADDR_VAR 0 2
36075: PUSH
36076: LD_VAR 0 1
36080: PPUSH
36081: CALL_OW 254
36085: PUSH
36086: LD_INT 3
36088: PLUS
36089: PUSH
36090: LD_INT 6
36092: MOD
36093: ST_TO_ADDR
// end ;
36094: LD_VAR 0 2
36098: RET
// export function ReverseArray ( array ) ; var i ; begin
36099: LD_INT 0
36101: PPUSH
36102: PPUSH
// if not array then
36103: LD_VAR 0 1
36107: NOT
36108: IFFALSE 36112
// exit ;
36110: GO 36167
// result := [ ] ;
36112: LD_ADDR_VAR 0 2
36116: PUSH
36117: EMPTY
36118: ST_TO_ADDR
// for i := array downto 1 do
36119: LD_ADDR_VAR 0 3
36123: PUSH
36124: DOUBLE
36125: LD_VAR 0 1
36129: INC
36130: ST_TO_ADDR
36131: LD_INT 1
36133: PUSH
36134: FOR_DOWNTO
36135: IFFALSE 36165
// result := Join ( result , array [ i ] ) ;
36137: LD_ADDR_VAR 0 2
36141: PUSH
36142: LD_VAR 0 2
36146: PPUSH
36147: LD_VAR 0 1
36151: PUSH
36152: LD_VAR 0 3
36156: ARRAY
36157: PPUSH
36158: CALL 41009 0 2
36162: ST_TO_ADDR
36163: GO 36134
36165: POP
36166: POP
// end ;
36167: LD_VAR 0 2
36171: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
36172: LD_INT 0
36174: PPUSH
36175: PPUSH
36176: PPUSH
36177: PPUSH
36178: PPUSH
36179: PPUSH
// if not unit or not hexes then
36180: LD_VAR 0 1
36184: NOT
36185: IFTRUE 36194
36187: PUSH
36188: LD_VAR 0 2
36192: NOT
36193: OR
36194: IFFALSE 36198
// exit ;
36196: GO 36321
// dist := 9999 ;
36198: LD_ADDR_VAR 0 5
36202: PUSH
36203: LD_INT 9999
36205: ST_TO_ADDR
// for i = 1 to hexes do
36206: LD_ADDR_VAR 0 4
36210: PUSH
36211: DOUBLE
36212: LD_INT 1
36214: DEC
36215: ST_TO_ADDR
36216: LD_VAR 0 2
36220: PUSH
36221: FOR_TO
36222: IFFALSE 36309
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36224: LD_ADDR_VAR 0 6
36228: PUSH
36229: LD_VAR 0 1
36233: PPUSH
36234: LD_VAR 0 2
36238: PUSH
36239: LD_VAR 0 4
36243: ARRAY
36244: PUSH
36245: LD_INT 1
36247: ARRAY
36248: PPUSH
36249: LD_VAR 0 2
36253: PUSH
36254: LD_VAR 0 4
36258: ARRAY
36259: PUSH
36260: LD_INT 2
36262: ARRAY
36263: PPUSH
36264: CALL_OW 297
36268: ST_TO_ADDR
// if tdist < dist then
36269: LD_VAR 0 6
36273: PUSH
36274: LD_VAR 0 5
36278: LESS
36279: IFFALSE 36307
// begin hex := hexes [ i ] ;
36281: LD_ADDR_VAR 0 8
36285: PUSH
36286: LD_VAR 0 2
36290: PUSH
36291: LD_VAR 0 4
36295: ARRAY
36296: ST_TO_ADDR
// dist := tdist ;
36297: LD_ADDR_VAR 0 5
36301: PUSH
36302: LD_VAR 0 6
36306: ST_TO_ADDR
// end ; end ;
36307: GO 36221
36309: POP
36310: POP
// result := hex ;
36311: LD_ADDR_VAR 0 3
36315: PUSH
36316: LD_VAR 0 8
36320: ST_TO_ADDR
// end ;
36321: LD_VAR 0 3
36325: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
36326: LD_INT 0
36328: PPUSH
36329: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
36330: LD_VAR 0 1
36334: NOT
36335: IFTRUE 36374
36337: PUSH
36338: LD_VAR 0 1
36342: PUSH
36343: LD_INT 21
36345: PUSH
36346: LD_INT 2
36348: PUSH
36349: EMPTY
36350: LIST
36351: LIST
36352: PUSH
36353: LD_INT 23
36355: PUSH
36356: LD_INT 2
36358: PUSH
36359: EMPTY
36360: LIST
36361: LIST
36362: PUSH
36363: EMPTY
36364: LIST
36365: LIST
36366: PPUSH
36367: CALL_OW 69
36371: IN
36372: NOT
36373: OR
36374: IFFALSE 36378
// exit ;
36376: GO 36425
// for i = 1 to 3 do
36378: LD_ADDR_VAR 0 3
36382: PUSH
36383: DOUBLE
36384: LD_INT 1
36386: DEC
36387: ST_TO_ADDR
36388: LD_INT 3
36390: PUSH
36391: FOR_TO
36392: IFFALSE 36423
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
36394: LD_VAR 0 1
36398: PPUSH
36399: CALL_OW 250
36403: PPUSH
36404: LD_VAR 0 1
36408: PPUSH
36409: CALL_OW 251
36413: PPUSH
36414: LD_INT 1
36416: PPUSH
36417: CALL_OW 453
36421: GO 36391
36423: POP
36424: POP
// end ;
36425: LD_VAR 0 2
36429: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
36430: LD_INT 0
36432: PPUSH
36433: PPUSH
36434: PPUSH
36435: PPUSH
36436: PPUSH
36437: PPUSH
// if not unit or not enemy_unit then
36438: LD_VAR 0 1
36442: NOT
36443: IFTRUE 36452
36445: PUSH
36446: LD_VAR 0 2
36450: NOT
36451: OR
36452: IFFALSE 36456
// exit ;
36454: GO 36927
// if GetLives ( i ) < 250 then
36456: LD_VAR 0 4
36460: PPUSH
36461: CALL_OW 256
36465: PUSH
36466: LD_INT 250
36468: LESS
36469: IFFALSE 36482
// begin ComAutodestruct ( i ) ;
36471: LD_VAR 0 4
36475: PPUSH
36476: CALL 36326 0 1
// exit ;
36480: GO 36927
// end ; x := GetX ( enemy_unit ) ;
36482: LD_ADDR_VAR 0 7
36486: PUSH
36487: LD_VAR 0 2
36491: PPUSH
36492: CALL_OW 250
36496: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
36497: LD_ADDR_VAR 0 8
36501: PUSH
36502: LD_VAR 0 2
36506: PPUSH
36507: CALL_OW 251
36511: ST_TO_ADDR
// if not x or not y then
36512: LD_VAR 0 7
36516: NOT
36517: IFTRUE 36526
36519: PUSH
36520: LD_VAR 0 8
36524: NOT
36525: OR
36526: IFFALSE 36530
// exit ;
36528: GO 36927
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
36530: LD_ADDR_VAR 0 6
36534: PUSH
36535: LD_VAR 0 7
36539: PPUSH
36540: LD_INT 0
36542: PPUSH
36543: LD_INT 4
36545: PPUSH
36546: CALL_OW 272
36550: PUSH
36551: LD_VAR 0 8
36555: PPUSH
36556: LD_INT 0
36558: PPUSH
36559: LD_INT 4
36561: PPUSH
36562: CALL_OW 273
36566: PUSH
36567: EMPTY
36568: LIST
36569: LIST
36570: PUSH
36571: LD_VAR 0 7
36575: PPUSH
36576: LD_INT 1
36578: PPUSH
36579: LD_INT 4
36581: PPUSH
36582: CALL_OW 272
36586: PUSH
36587: LD_VAR 0 8
36591: PPUSH
36592: LD_INT 1
36594: PPUSH
36595: LD_INT 4
36597: PPUSH
36598: CALL_OW 273
36602: PUSH
36603: EMPTY
36604: LIST
36605: LIST
36606: PUSH
36607: LD_VAR 0 7
36611: PPUSH
36612: LD_INT 2
36614: PPUSH
36615: LD_INT 4
36617: PPUSH
36618: CALL_OW 272
36622: PUSH
36623: LD_VAR 0 8
36627: PPUSH
36628: LD_INT 2
36630: PPUSH
36631: LD_INT 4
36633: PPUSH
36634: CALL_OW 273
36638: PUSH
36639: EMPTY
36640: LIST
36641: LIST
36642: PUSH
36643: LD_VAR 0 7
36647: PPUSH
36648: LD_INT 3
36650: PPUSH
36651: LD_INT 4
36653: PPUSH
36654: CALL_OW 272
36658: PUSH
36659: LD_VAR 0 8
36663: PPUSH
36664: LD_INT 3
36666: PPUSH
36667: LD_INT 4
36669: PPUSH
36670: CALL_OW 273
36674: PUSH
36675: EMPTY
36676: LIST
36677: LIST
36678: PUSH
36679: LD_VAR 0 7
36683: PPUSH
36684: LD_INT 4
36686: PPUSH
36687: LD_INT 4
36689: PPUSH
36690: CALL_OW 272
36694: PUSH
36695: LD_VAR 0 8
36699: PPUSH
36700: LD_INT 4
36702: PPUSH
36703: LD_INT 4
36705: PPUSH
36706: CALL_OW 273
36710: PUSH
36711: EMPTY
36712: LIST
36713: LIST
36714: PUSH
36715: LD_VAR 0 7
36719: PPUSH
36720: LD_INT 5
36722: PPUSH
36723: LD_INT 4
36725: PPUSH
36726: CALL_OW 272
36730: PUSH
36731: LD_VAR 0 8
36735: PPUSH
36736: LD_INT 5
36738: PPUSH
36739: LD_INT 4
36741: PPUSH
36742: CALL_OW 273
36746: PUSH
36747: EMPTY
36748: LIST
36749: LIST
36750: PUSH
36751: EMPTY
36752: LIST
36753: LIST
36754: LIST
36755: LIST
36756: LIST
36757: LIST
36758: ST_TO_ADDR
// for i = tmp downto 1 do
36759: LD_ADDR_VAR 0 4
36763: PUSH
36764: DOUBLE
36765: LD_VAR 0 6
36769: INC
36770: ST_TO_ADDR
36771: LD_INT 1
36773: PUSH
36774: FOR_DOWNTO
36775: IFFALSE 36878
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
36777: LD_VAR 0 6
36781: PUSH
36782: LD_VAR 0 4
36786: ARRAY
36787: PUSH
36788: LD_INT 1
36790: ARRAY
36791: PPUSH
36792: LD_VAR 0 6
36796: PUSH
36797: LD_VAR 0 4
36801: ARRAY
36802: PUSH
36803: LD_INT 2
36805: ARRAY
36806: PPUSH
36807: CALL_OW 488
36811: NOT
36812: IFTRUE 36854
36814: PUSH
36815: LD_VAR 0 6
36819: PUSH
36820: LD_VAR 0 4
36824: ARRAY
36825: PUSH
36826: LD_INT 1
36828: ARRAY
36829: PPUSH
36830: LD_VAR 0 6
36834: PUSH
36835: LD_VAR 0 4
36839: ARRAY
36840: PUSH
36841: LD_INT 2
36843: ARRAY
36844: PPUSH
36845: CALL_OW 428
36849: PUSH
36850: LD_INT 0
36852: NONEQUAL
36853: OR
36854: IFFALSE 36876
// tmp := Delete ( tmp , i ) ;
36856: LD_ADDR_VAR 0 6
36860: PUSH
36861: LD_VAR 0 6
36865: PPUSH
36866: LD_VAR 0 4
36870: PPUSH
36871: CALL_OW 3
36875: ST_TO_ADDR
36876: GO 36774
36878: POP
36879: POP
// j := GetClosestHex ( unit , tmp ) ;
36880: LD_ADDR_VAR 0 5
36884: PUSH
36885: LD_VAR 0 1
36889: PPUSH
36890: LD_VAR 0 6
36894: PPUSH
36895: CALL 36172 0 2
36899: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
36900: LD_VAR 0 1
36904: PPUSH
36905: LD_VAR 0 5
36909: PUSH
36910: LD_INT 1
36912: ARRAY
36913: PPUSH
36914: LD_VAR 0 5
36918: PUSH
36919: LD_INT 2
36921: ARRAY
36922: PPUSH
36923: CALL_OW 111
// end ;
36927: LD_VAR 0 3
36931: RET
// export function PrepareApemanSoldier ( ) ; begin
36932: LD_INT 0
36934: PPUSH
// uc_nation := 0 ;
36935: LD_ADDR_OWVAR 21
36939: PUSH
36940: LD_INT 0
36942: ST_TO_ADDR
// hc_sex := sex_male ;
36943: LD_ADDR_OWVAR 27
36947: PUSH
36948: LD_INT 1
36950: ST_TO_ADDR
// hc_name :=  ;
36951: LD_ADDR_OWVAR 26
36955: PUSH
36956: LD_STRING 
36958: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
36959: LD_ADDR_OWVAR 28
36963: PUSH
36964: LD_INT 15
36966: ST_TO_ADDR
// hc_gallery :=  ;
36967: LD_ADDR_OWVAR 33
36971: PUSH
36972: LD_STRING 
36974: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36975: LD_ADDR_OWVAR 31
36979: PUSH
36980: LD_INT 0
36982: PPUSH
36983: LD_INT 3
36985: PPUSH
36986: CALL_OW 12
36990: PUSH
36991: LD_INT 0
36993: PPUSH
36994: LD_INT 3
36996: PPUSH
36997: CALL_OW 12
37001: PUSH
37002: LD_INT 0
37004: PUSH
37005: LD_INT 0
37007: PUSH
37008: EMPTY
37009: LIST
37010: LIST
37011: LIST
37012: LIST
37013: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
37014: LD_ADDR_OWVAR 29
37018: PUSH
37019: LD_INT 12
37021: PUSH
37022: LD_INT 12
37024: PUSH
37025: EMPTY
37026: LIST
37027: LIST
37028: ST_TO_ADDR
// end ;
37029: LD_VAR 0 1
37033: RET
// export function PrepareApemanEngineer ( ) ; begin
37034: LD_INT 0
37036: PPUSH
// uc_nation := 0 ;
37037: LD_ADDR_OWVAR 21
37041: PUSH
37042: LD_INT 0
37044: ST_TO_ADDR
// hc_sex := sex_male ;
37045: LD_ADDR_OWVAR 27
37049: PUSH
37050: LD_INT 1
37052: ST_TO_ADDR
// hc_name :=  ;
37053: LD_ADDR_OWVAR 26
37057: PUSH
37058: LD_STRING 
37060: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
37061: LD_ADDR_OWVAR 28
37065: PUSH
37066: LD_INT 16
37068: ST_TO_ADDR
// hc_gallery :=  ;
37069: LD_ADDR_OWVAR 33
37073: PUSH
37074: LD_STRING 
37076: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37077: LD_ADDR_OWVAR 31
37081: PUSH
37082: LD_INT 0
37084: PPUSH
37085: LD_INT 3
37087: PPUSH
37088: CALL_OW 12
37092: PUSH
37093: LD_INT 0
37095: PPUSH
37096: LD_INT 3
37098: PPUSH
37099: CALL_OW 12
37103: PUSH
37104: LD_INT 0
37106: PUSH
37107: LD_INT 0
37109: PUSH
37110: EMPTY
37111: LIST
37112: LIST
37113: LIST
37114: LIST
37115: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
37116: LD_ADDR_OWVAR 29
37120: PUSH
37121: LD_INT 12
37123: PUSH
37124: LD_INT 12
37126: PUSH
37127: EMPTY
37128: LIST
37129: LIST
37130: ST_TO_ADDR
// end ;
37131: LD_VAR 0 1
37135: RET
// export function PrepareApeman ( agressivity ) ; begin
37136: LD_INT 0
37138: PPUSH
// uc_side := 0 ;
37139: LD_ADDR_OWVAR 20
37143: PUSH
37144: LD_INT 0
37146: ST_TO_ADDR
// uc_nation := 0 ;
37147: LD_ADDR_OWVAR 21
37151: PUSH
37152: LD_INT 0
37154: ST_TO_ADDR
// hc_sex := sex_male ;
37155: LD_ADDR_OWVAR 27
37159: PUSH
37160: LD_INT 1
37162: ST_TO_ADDR
// hc_class := class_apeman ;
37163: LD_ADDR_OWVAR 28
37167: PUSH
37168: LD_INT 12
37170: ST_TO_ADDR
// hc_gallery :=  ;
37171: LD_ADDR_OWVAR 33
37175: PUSH
37176: LD_STRING 
37178: ST_TO_ADDR
// hc_name :=  ;
37179: LD_ADDR_OWVAR 26
37183: PUSH
37184: LD_STRING 
37186: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
37187: LD_ADDR_OWVAR 29
37191: PUSH
37192: LD_INT 12
37194: PUSH
37195: LD_INT 12
37197: PUSH
37198: EMPTY
37199: LIST
37200: LIST
37201: ST_TO_ADDR
// if agressivity = 0 then
37202: LD_VAR 0 1
37206: PUSH
37207: LD_INT 0
37209: EQUAL
37210: IFFALSE 37222
// hc_agressivity := 0 else
37212: LD_ADDR_OWVAR 35
37216: PUSH
37217: LD_INT 0
37219: ST_TO_ADDR
37220: GO 37243
// hc_agressivity := rand ( - agressivity , agressivity ) ;
37222: LD_ADDR_OWVAR 35
37226: PUSH
37227: LD_VAR 0 1
37231: NEG
37232: PPUSH
37233: LD_VAR 0 1
37237: PPUSH
37238: CALL_OW 12
37242: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37243: LD_ADDR_OWVAR 31
37247: PUSH
37248: LD_INT 0
37250: PPUSH
37251: LD_INT 3
37253: PPUSH
37254: CALL_OW 12
37258: PUSH
37259: LD_INT 0
37261: PPUSH
37262: LD_INT 3
37264: PPUSH
37265: CALL_OW 12
37269: PUSH
37270: LD_INT 0
37272: PUSH
37273: LD_INT 0
37275: PUSH
37276: EMPTY
37277: LIST
37278: LIST
37279: LIST
37280: LIST
37281: ST_TO_ADDR
// end ;
37282: LD_VAR 0 2
37286: RET
// export function PrepareTiger ( agressivity ) ; begin
37287: LD_INT 0
37289: PPUSH
// uc_side := 0 ;
37290: LD_ADDR_OWVAR 20
37294: PUSH
37295: LD_INT 0
37297: ST_TO_ADDR
// uc_nation := 0 ;
37298: LD_ADDR_OWVAR 21
37302: PUSH
37303: LD_INT 0
37305: ST_TO_ADDR
// InitHc ;
37306: CALL_OW 19
// hc_class := class_tiger ;
37310: LD_ADDR_OWVAR 28
37314: PUSH
37315: LD_INT 14
37317: ST_TO_ADDR
// hc_gallery :=  ;
37318: LD_ADDR_OWVAR 33
37322: PUSH
37323: LD_STRING 
37325: ST_TO_ADDR
// hc_name :=  ;
37326: LD_ADDR_OWVAR 26
37330: PUSH
37331: LD_STRING 
37333: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
37334: LD_ADDR_OWVAR 35
37338: PUSH
37339: LD_VAR 0 1
37343: NEG
37344: PPUSH
37345: LD_VAR 0 1
37349: PPUSH
37350: CALL_OW 12
37354: ST_TO_ADDR
// end ;
37355: LD_VAR 0 2
37359: RET
// export function PrepareEnchidna ( ) ; begin
37360: LD_INT 0
37362: PPUSH
// uc_side := 0 ;
37363: LD_ADDR_OWVAR 20
37367: PUSH
37368: LD_INT 0
37370: ST_TO_ADDR
// uc_nation := 0 ;
37371: LD_ADDR_OWVAR 21
37375: PUSH
37376: LD_INT 0
37378: ST_TO_ADDR
// InitHc ;
37379: CALL_OW 19
// hc_class := class_baggie ;
37383: LD_ADDR_OWVAR 28
37387: PUSH
37388: LD_INT 13
37390: ST_TO_ADDR
// hc_gallery :=  ;
37391: LD_ADDR_OWVAR 33
37395: PUSH
37396: LD_STRING 
37398: ST_TO_ADDR
// hc_name :=  ;
37399: LD_ADDR_OWVAR 26
37403: PUSH
37404: LD_STRING 
37406: ST_TO_ADDR
// end ;
37407: LD_VAR 0 1
37411: RET
// export function PrepareFrog ( ) ; begin
37412: LD_INT 0
37414: PPUSH
// uc_side := 0 ;
37415: LD_ADDR_OWVAR 20
37419: PUSH
37420: LD_INT 0
37422: ST_TO_ADDR
// uc_nation := 0 ;
37423: LD_ADDR_OWVAR 21
37427: PUSH
37428: LD_INT 0
37430: ST_TO_ADDR
// InitHc ;
37431: CALL_OW 19
// hc_class := class_frog ;
37435: LD_ADDR_OWVAR 28
37439: PUSH
37440: LD_INT 19
37442: ST_TO_ADDR
// hc_gallery :=  ;
37443: LD_ADDR_OWVAR 33
37447: PUSH
37448: LD_STRING 
37450: ST_TO_ADDR
// hc_name :=  ;
37451: LD_ADDR_OWVAR 26
37455: PUSH
37456: LD_STRING 
37458: ST_TO_ADDR
// end ;
37459: LD_VAR 0 1
37463: RET
// export function PrepareFish ( ) ; begin
37464: LD_INT 0
37466: PPUSH
// uc_side := 0 ;
37467: LD_ADDR_OWVAR 20
37471: PUSH
37472: LD_INT 0
37474: ST_TO_ADDR
// uc_nation := 0 ;
37475: LD_ADDR_OWVAR 21
37479: PUSH
37480: LD_INT 0
37482: ST_TO_ADDR
// InitHc ;
37483: CALL_OW 19
// hc_class := class_fish ;
37487: LD_ADDR_OWVAR 28
37491: PUSH
37492: LD_INT 20
37494: ST_TO_ADDR
// hc_gallery :=  ;
37495: LD_ADDR_OWVAR 33
37499: PUSH
37500: LD_STRING 
37502: ST_TO_ADDR
// hc_name :=  ;
37503: LD_ADDR_OWVAR 26
37507: PUSH
37508: LD_STRING 
37510: ST_TO_ADDR
// end ;
37511: LD_VAR 0 1
37515: RET
// export function PrepareBird ( ) ; begin
37516: LD_INT 0
37518: PPUSH
// uc_side := 0 ;
37519: LD_ADDR_OWVAR 20
37523: PUSH
37524: LD_INT 0
37526: ST_TO_ADDR
// uc_nation := 0 ;
37527: LD_ADDR_OWVAR 21
37531: PUSH
37532: LD_INT 0
37534: ST_TO_ADDR
// InitHc ;
37535: CALL_OW 19
// hc_class := class_phororhacos ;
37539: LD_ADDR_OWVAR 28
37543: PUSH
37544: LD_INT 18
37546: ST_TO_ADDR
// hc_gallery :=  ;
37547: LD_ADDR_OWVAR 33
37551: PUSH
37552: LD_STRING 
37554: ST_TO_ADDR
// hc_name :=  ;
37555: LD_ADDR_OWVAR 26
37559: PUSH
37560: LD_STRING 
37562: ST_TO_ADDR
// end ;
37563: LD_VAR 0 1
37567: RET
// export function PrepareHorse ( ) ; begin
37568: LD_INT 0
37570: PPUSH
// uc_side := 0 ;
37571: LD_ADDR_OWVAR 20
37575: PUSH
37576: LD_INT 0
37578: ST_TO_ADDR
// uc_nation := 0 ;
37579: LD_ADDR_OWVAR 21
37583: PUSH
37584: LD_INT 0
37586: ST_TO_ADDR
// InitHc ;
37587: CALL_OW 19
// hc_class := class_horse ;
37591: LD_ADDR_OWVAR 28
37595: PUSH
37596: LD_INT 21
37598: ST_TO_ADDR
// hc_gallery :=  ;
37599: LD_ADDR_OWVAR 33
37603: PUSH
37604: LD_STRING 
37606: ST_TO_ADDR
// hc_name :=  ;
37607: LD_ADDR_OWVAR 26
37611: PUSH
37612: LD_STRING 
37614: ST_TO_ADDR
// end ;
37615: LD_VAR 0 1
37619: RET
// export function PrepareMastodont ( ) ; begin
37620: LD_INT 0
37622: PPUSH
// uc_side := 0 ;
37623: LD_ADDR_OWVAR 20
37627: PUSH
37628: LD_INT 0
37630: ST_TO_ADDR
// uc_nation := 0 ;
37631: LD_ADDR_OWVAR 21
37635: PUSH
37636: LD_INT 0
37638: ST_TO_ADDR
// vc_chassis := class_mastodont ;
37639: LD_ADDR_OWVAR 37
37643: PUSH
37644: LD_INT 31
37646: ST_TO_ADDR
// vc_control := control_rider ;
37647: LD_ADDR_OWVAR 38
37651: PUSH
37652: LD_INT 4
37654: ST_TO_ADDR
// end ;
37655: LD_VAR 0 1
37659: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
37660: LD_INT 0
37662: PPUSH
37663: PPUSH
37664: PPUSH
// uc_side = 0 ;
37665: LD_ADDR_OWVAR 20
37669: PUSH
37670: LD_INT 0
37672: ST_TO_ADDR
// uc_nation = 0 ;
37673: LD_ADDR_OWVAR 21
37677: PUSH
37678: LD_INT 0
37680: ST_TO_ADDR
// InitHc_All ( ) ;
37681: CALL_OW 584
// InitVc ;
37685: CALL_OW 20
// if mastodonts then
37689: LD_VAR 0 6
37693: IFFALSE 37760
// for i = 1 to mastodonts do
37695: LD_ADDR_VAR 0 11
37699: PUSH
37700: DOUBLE
37701: LD_INT 1
37703: DEC
37704: ST_TO_ADDR
37705: LD_VAR 0 6
37709: PUSH
37710: FOR_TO
37711: IFFALSE 37758
// begin vc_chassis := 31 ;
37713: LD_ADDR_OWVAR 37
37717: PUSH
37718: LD_INT 31
37720: ST_TO_ADDR
// vc_control := control_rider ;
37721: LD_ADDR_OWVAR 38
37725: PUSH
37726: LD_INT 4
37728: ST_TO_ADDR
// animal := CreateVehicle ;
37729: LD_ADDR_VAR 0 12
37733: PUSH
37734: CALL_OW 45
37738: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37739: LD_VAR 0 12
37743: PPUSH
37744: LD_VAR 0 8
37748: PPUSH
37749: LD_INT 0
37751: PPUSH
37752: CALL 39902 0 3
// end ;
37756: GO 37710
37758: POP
37759: POP
// if horses then
37760: LD_VAR 0 5
37764: IFFALSE 37831
// for i = 1 to horses do
37766: LD_ADDR_VAR 0 11
37770: PUSH
37771: DOUBLE
37772: LD_INT 1
37774: DEC
37775: ST_TO_ADDR
37776: LD_VAR 0 5
37780: PUSH
37781: FOR_TO
37782: IFFALSE 37829
// begin hc_class := 21 ;
37784: LD_ADDR_OWVAR 28
37788: PUSH
37789: LD_INT 21
37791: ST_TO_ADDR
// hc_gallery :=  ;
37792: LD_ADDR_OWVAR 33
37796: PUSH
37797: LD_STRING 
37799: ST_TO_ADDR
// animal := CreateHuman ;
37800: LD_ADDR_VAR 0 12
37804: PUSH
37805: CALL_OW 44
37809: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37810: LD_VAR 0 12
37814: PPUSH
37815: LD_VAR 0 8
37819: PPUSH
37820: LD_INT 0
37822: PPUSH
37823: CALL 39902 0 3
// end ;
37827: GO 37781
37829: POP
37830: POP
// if birds then
37831: LD_VAR 0 1
37835: IFFALSE 37902
// for i = 1 to birds do
37837: LD_ADDR_VAR 0 11
37841: PUSH
37842: DOUBLE
37843: LD_INT 1
37845: DEC
37846: ST_TO_ADDR
37847: LD_VAR 0 1
37851: PUSH
37852: FOR_TO
37853: IFFALSE 37900
// begin hc_class := 18 ;
37855: LD_ADDR_OWVAR 28
37859: PUSH
37860: LD_INT 18
37862: ST_TO_ADDR
// hc_gallery =  ;
37863: LD_ADDR_OWVAR 33
37867: PUSH
37868: LD_STRING 
37870: ST_TO_ADDR
// animal := CreateHuman ;
37871: LD_ADDR_VAR 0 12
37875: PUSH
37876: CALL_OW 44
37880: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37881: LD_VAR 0 12
37885: PPUSH
37886: LD_VAR 0 8
37890: PPUSH
37891: LD_INT 0
37893: PPUSH
37894: CALL 39902 0 3
// end ;
37898: GO 37852
37900: POP
37901: POP
// if tigers then
37902: LD_VAR 0 2
37906: IFFALSE 37990
// for i = 1 to tigers do
37908: LD_ADDR_VAR 0 11
37912: PUSH
37913: DOUBLE
37914: LD_INT 1
37916: DEC
37917: ST_TO_ADDR
37918: LD_VAR 0 2
37922: PUSH
37923: FOR_TO
37924: IFFALSE 37988
// begin hc_class = class_tiger ;
37926: LD_ADDR_OWVAR 28
37930: PUSH
37931: LD_INT 14
37933: ST_TO_ADDR
// hc_gallery =  ;
37934: LD_ADDR_OWVAR 33
37938: PUSH
37939: LD_STRING 
37941: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
37942: LD_ADDR_OWVAR 35
37946: PUSH
37947: LD_INT 7
37949: NEG
37950: PPUSH
37951: LD_INT 7
37953: PPUSH
37954: CALL_OW 12
37958: ST_TO_ADDR
// animal := CreateHuman ;
37959: LD_ADDR_VAR 0 12
37963: PUSH
37964: CALL_OW 44
37968: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37969: LD_VAR 0 12
37973: PPUSH
37974: LD_VAR 0 8
37978: PPUSH
37979: LD_INT 0
37981: PPUSH
37982: CALL 39902 0 3
// end ;
37986: GO 37923
37988: POP
37989: POP
// if apemans then
37990: LD_VAR 0 3
37994: IFFALSE 38117
// for i = 1 to apemans do
37996: LD_ADDR_VAR 0 11
38000: PUSH
38001: DOUBLE
38002: LD_INT 1
38004: DEC
38005: ST_TO_ADDR
38006: LD_VAR 0 3
38010: PUSH
38011: FOR_TO
38012: IFFALSE 38115
// begin hc_class = class_apeman ;
38014: LD_ADDR_OWVAR 28
38018: PUSH
38019: LD_INT 12
38021: ST_TO_ADDR
// hc_gallery =  ;
38022: LD_ADDR_OWVAR 33
38026: PUSH
38027: LD_STRING 
38029: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
38030: LD_ADDR_OWVAR 35
38034: PUSH
38035: LD_INT 2
38037: NEG
38038: PPUSH
38039: LD_INT 2
38041: PPUSH
38042: CALL_OW 12
38046: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
38047: LD_ADDR_OWVAR 31
38051: PUSH
38052: LD_INT 1
38054: PPUSH
38055: LD_INT 3
38057: PPUSH
38058: CALL_OW 12
38062: PUSH
38063: LD_INT 1
38065: PPUSH
38066: LD_INT 3
38068: PPUSH
38069: CALL_OW 12
38073: PUSH
38074: LD_INT 0
38076: PUSH
38077: LD_INT 0
38079: PUSH
38080: EMPTY
38081: LIST
38082: LIST
38083: LIST
38084: LIST
38085: ST_TO_ADDR
// animal := CreateHuman ;
38086: LD_ADDR_VAR 0 12
38090: PUSH
38091: CALL_OW 44
38095: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38096: LD_VAR 0 12
38100: PPUSH
38101: LD_VAR 0 8
38105: PPUSH
38106: LD_INT 0
38108: PPUSH
38109: CALL 39902 0 3
// end ;
38113: GO 38011
38115: POP
38116: POP
// if enchidnas then
38117: LD_VAR 0 4
38121: IFFALSE 38188
// for i = 1 to enchidnas do
38123: LD_ADDR_VAR 0 11
38127: PUSH
38128: DOUBLE
38129: LD_INT 1
38131: DEC
38132: ST_TO_ADDR
38133: LD_VAR 0 4
38137: PUSH
38138: FOR_TO
38139: IFFALSE 38186
// begin hc_class = 13 ;
38141: LD_ADDR_OWVAR 28
38145: PUSH
38146: LD_INT 13
38148: ST_TO_ADDR
// hc_gallery =  ;
38149: LD_ADDR_OWVAR 33
38153: PUSH
38154: LD_STRING 
38156: ST_TO_ADDR
// animal := CreateHuman ;
38157: LD_ADDR_VAR 0 12
38161: PUSH
38162: CALL_OW 44
38166: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38167: LD_VAR 0 12
38171: PPUSH
38172: LD_VAR 0 8
38176: PPUSH
38177: LD_INT 0
38179: PPUSH
38180: CALL 39902 0 3
// end ;
38184: GO 38138
38186: POP
38187: POP
// if fishes then
38188: LD_VAR 0 7
38192: IFFALSE 38259
// for i = 1 to fishes do
38194: LD_ADDR_VAR 0 11
38198: PUSH
38199: DOUBLE
38200: LD_INT 1
38202: DEC
38203: ST_TO_ADDR
38204: LD_VAR 0 7
38208: PUSH
38209: FOR_TO
38210: IFFALSE 38257
// begin hc_class = 20 ;
38212: LD_ADDR_OWVAR 28
38216: PUSH
38217: LD_INT 20
38219: ST_TO_ADDR
// hc_gallery =  ;
38220: LD_ADDR_OWVAR 33
38224: PUSH
38225: LD_STRING 
38227: ST_TO_ADDR
// animal := CreateHuman ;
38228: LD_ADDR_VAR 0 12
38232: PUSH
38233: CALL_OW 44
38237: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
38238: LD_VAR 0 12
38242: PPUSH
38243: LD_VAR 0 9
38247: PPUSH
38248: LD_INT 0
38250: PPUSH
38251: CALL 39902 0 3
// end ;
38255: GO 38209
38257: POP
38258: POP
// end ;
38259: LD_VAR 0 10
38263: RET
// export function WantHeal ( sci , unit ) ; begin
38264: LD_INT 0
38266: PPUSH
// if GetTaskList ( sci ) > 0 then
38267: LD_VAR 0 1
38271: PPUSH
38272: CALL_OW 437
38276: PUSH
38277: LD_INT 0
38279: GREATER
38280: IFFALSE 38352
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
38282: LD_VAR 0 1
38286: PPUSH
38287: CALL_OW 437
38291: PUSH
38292: LD_INT 1
38294: ARRAY
38295: PUSH
38296: LD_INT 1
38298: ARRAY
38299: PUSH
38300: LD_STRING l
38302: EQUAL
38303: IFFALSE 38330
38305: PUSH
38306: LD_VAR 0 1
38310: PPUSH
38311: CALL_OW 437
38315: PUSH
38316: LD_INT 1
38318: ARRAY
38319: PUSH
38320: LD_INT 4
38322: ARRAY
38323: PUSH
38324: LD_VAR 0 2
38328: EQUAL
38329: AND
38330: IFFALSE 38342
// result := true else
38332: LD_ADDR_VAR 0 3
38336: PUSH
38337: LD_INT 1
38339: ST_TO_ADDR
38340: GO 38350
// result := false ;
38342: LD_ADDR_VAR 0 3
38346: PUSH
38347: LD_INT 0
38349: ST_TO_ADDR
// end else
38350: GO 38360
// result := false ;
38352: LD_ADDR_VAR 0 3
38356: PUSH
38357: LD_INT 0
38359: ST_TO_ADDR
// end ;
38360: LD_VAR 0 3
38364: RET
// export function HealTarget ( sci ) ; begin
38365: LD_INT 0
38367: PPUSH
// if not sci then
38368: LD_VAR 0 1
38372: NOT
38373: IFFALSE 38377
// exit ;
38375: GO 38442
// result := 0 ;
38377: LD_ADDR_VAR 0 2
38381: PUSH
38382: LD_INT 0
38384: ST_TO_ADDR
// if GetTaskList ( sci ) then
38385: LD_VAR 0 1
38389: PPUSH
38390: CALL_OW 437
38394: IFFALSE 38442
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
38396: LD_VAR 0 1
38400: PPUSH
38401: CALL_OW 437
38405: PUSH
38406: LD_INT 1
38408: ARRAY
38409: PUSH
38410: LD_INT 1
38412: ARRAY
38413: PUSH
38414: LD_STRING l
38416: EQUAL
38417: IFFALSE 38442
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
38419: LD_ADDR_VAR 0 2
38423: PUSH
38424: LD_VAR 0 1
38428: PPUSH
38429: CALL_OW 437
38433: PUSH
38434: LD_INT 1
38436: ARRAY
38437: PUSH
38438: LD_INT 4
38440: ARRAY
38441: ST_TO_ADDR
// end ;
38442: LD_VAR 0 2
38446: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
38447: LD_INT 0
38449: PPUSH
38450: PPUSH
38451: PPUSH
38452: PPUSH
// if not base_units then
38453: LD_VAR 0 1
38457: NOT
38458: IFFALSE 38462
// exit ;
38460: GO 38549
// result := false ;
38462: LD_ADDR_VAR 0 2
38466: PUSH
38467: LD_INT 0
38469: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
38470: LD_ADDR_VAR 0 5
38474: PUSH
38475: LD_VAR 0 1
38479: PPUSH
38480: LD_INT 21
38482: PUSH
38483: LD_INT 3
38485: PUSH
38486: EMPTY
38487: LIST
38488: LIST
38489: PPUSH
38490: CALL_OW 72
38494: ST_TO_ADDR
// if not tmp then
38495: LD_VAR 0 5
38499: NOT
38500: IFFALSE 38504
// exit ;
38502: GO 38549
// for i in tmp do
38504: LD_ADDR_VAR 0 3
38508: PUSH
38509: LD_VAR 0 5
38513: PUSH
38514: FOR_IN
38515: IFFALSE 38547
// begin result := EnemyInRange ( i , 22 ) ;
38517: LD_ADDR_VAR 0 2
38521: PUSH
38522: LD_VAR 0 3
38526: PPUSH
38527: LD_INT 22
38529: PPUSH
38530: CALL 35974 0 2
38534: ST_TO_ADDR
// if result then
38535: LD_VAR 0 2
38539: IFFALSE 38545
// exit ;
38541: POP
38542: POP
38543: GO 38549
// end ;
38545: GO 38514
38547: POP
38548: POP
// end ;
38549: LD_VAR 0 2
38553: RET
// export function FilterByTag ( units , tag ) ; begin
38554: LD_INT 0
38556: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
38557: LD_ADDR_VAR 0 3
38561: PUSH
38562: LD_VAR 0 1
38566: PPUSH
38567: LD_INT 120
38569: PUSH
38570: LD_VAR 0 2
38574: PUSH
38575: EMPTY
38576: LIST
38577: LIST
38578: PPUSH
38579: CALL_OW 72
38583: ST_TO_ADDR
// end ;
38584: LD_VAR 0 3
38588: RET
// export function IsDriver ( un ) ; begin
38589: LD_INT 0
38591: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
38592: LD_ADDR_VAR 0 2
38596: PUSH
38597: LD_VAR 0 1
38601: PUSH
38602: LD_INT 55
38604: PUSH
38605: EMPTY
38606: LIST
38607: PPUSH
38608: CALL_OW 69
38612: IN
38613: ST_TO_ADDR
// end ;
38614: LD_VAR 0 2
38618: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
38619: LD_INT 0
38621: PPUSH
38622: PPUSH
// list := [ ] ;
38623: LD_ADDR_VAR 0 5
38627: PUSH
38628: EMPTY
38629: ST_TO_ADDR
// case d of 0 :
38630: LD_VAR 0 3
38634: PUSH
38635: LD_INT 0
38637: DOUBLE
38638: EQUAL
38639: IFTRUE 38643
38641: GO 38776
38643: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
38644: LD_ADDR_VAR 0 5
38648: PUSH
38649: LD_VAR 0 1
38653: PUSH
38654: LD_INT 4
38656: MINUS
38657: PUSH
38658: LD_VAR 0 2
38662: PUSH
38663: LD_INT 4
38665: MINUS
38666: PUSH
38667: LD_INT 2
38669: PUSH
38670: EMPTY
38671: LIST
38672: LIST
38673: LIST
38674: PUSH
38675: LD_VAR 0 1
38679: PUSH
38680: LD_INT 3
38682: MINUS
38683: PUSH
38684: LD_VAR 0 2
38688: PUSH
38689: LD_INT 1
38691: PUSH
38692: EMPTY
38693: LIST
38694: LIST
38695: LIST
38696: PUSH
38697: LD_VAR 0 1
38701: PUSH
38702: LD_INT 4
38704: PLUS
38705: PUSH
38706: LD_VAR 0 2
38710: PUSH
38711: LD_INT 4
38713: PUSH
38714: EMPTY
38715: LIST
38716: LIST
38717: LIST
38718: PUSH
38719: LD_VAR 0 1
38723: PUSH
38724: LD_INT 3
38726: PLUS
38727: PUSH
38728: LD_VAR 0 2
38732: PUSH
38733: LD_INT 3
38735: PLUS
38736: PUSH
38737: LD_INT 5
38739: PUSH
38740: EMPTY
38741: LIST
38742: LIST
38743: LIST
38744: PUSH
38745: LD_VAR 0 1
38749: PUSH
38750: LD_VAR 0 2
38754: PUSH
38755: LD_INT 4
38757: PLUS
38758: PUSH
38759: LD_INT 0
38761: PUSH
38762: EMPTY
38763: LIST
38764: LIST
38765: LIST
38766: PUSH
38767: EMPTY
38768: LIST
38769: LIST
38770: LIST
38771: LIST
38772: LIST
38773: ST_TO_ADDR
// end ; 1 :
38774: GO 39474
38776: LD_INT 1
38778: DOUBLE
38779: EQUAL
38780: IFTRUE 38784
38782: GO 38917
38784: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
38785: LD_ADDR_VAR 0 5
38789: PUSH
38790: LD_VAR 0 1
38794: PUSH
38795: LD_VAR 0 2
38799: PUSH
38800: LD_INT 4
38802: MINUS
38803: PUSH
38804: LD_INT 3
38806: PUSH
38807: EMPTY
38808: LIST
38809: LIST
38810: LIST
38811: PUSH
38812: LD_VAR 0 1
38816: PUSH
38817: LD_INT 3
38819: MINUS
38820: PUSH
38821: LD_VAR 0 2
38825: PUSH
38826: LD_INT 3
38828: MINUS
38829: PUSH
38830: LD_INT 2
38832: PUSH
38833: EMPTY
38834: LIST
38835: LIST
38836: LIST
38837: PUSH
38838: LD_VAR 0 1
38842: PUSH
38843: LD_INT 4
38845: MINUS
38846: PUSH
38847: LD_VAR 0 2
38851: PUSH
38852: LD_INT 1
38854: PUSH
38855: EMPTY
38856: LIST
38857: LIST
38858: LIST
38859: PUSH
38860: LD_VAR 0 1
38864: PUSH
38865: LD_VAR 0 2
38869: PUSH
38870: LD_INT 3
38872: PLUS
38873: PUSH
38874: LD_INT 0
38876: PUSH
38877: EMPTY
38878: LIST
38879: LIST
38880: LIST
38881: PUSH
38882: LD_VAR 0 1
38886: PUSH
38887: LD_INT 4
38889: PLUS
38890: PUSH
38891: LD_VAR 0 2
38895: PUSH
38896: LD_INT 4
38898: PLUS
38899: PUSH
38900: LD_INT 5
38902: PUSH
38903: EMPTY
38904: LIST
38905: LIST
38906: LIST
38907: PUSH
38908: EMPTY
38909: LIST
38910: LIST
38911: LIST
38912: LIST
38913: LIST
38914: ST_TO_ADDR
// end ; 2 :
38915: GO 39474
38917: LD_INT 2
38919: DOUBLE
38920: EQUAL
38921: IFTRUE 38925
38923: GO 39054
38925: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
38926: LD_ADDR_VAR 0 5
38930: PUSH
38931: LD_VAR 0 1
38935: PUSH
38936: LD_VAR 0 2
38940: PUSH
38941: LD_INT 3
38943: MINUS
38944: PUSH
38945: LD_INT 3
38947: PUSH
38948: EMPTY
38949: LIST
38950: LIST
38951: LIST
38952: PUSH
38953: LD_VAR 0 1
38957: PUSH
38958: LD_INT 4
38960: PLUS
38961: PUSH
38962: LD_VAR 0 2
38966: PUSH
38967: LD_INT 4
38969: PUSH
38970: EMPTY
38971: LIST
38972: LIST
38973: LIST
38974: PUSH
38975: LD_VAR 0 1
38979: PUSH
38980: LD_VAR 0 2
38984: PUSH
38985: LD_INT 4
38987: PLUS
38988: PUSH
38989: LD_INT 0
38991: PUSH
38992: EMPTY
38993: LIST
38994: LIST
38995: LIST
38996: PUSH
38997: LD_VAR 0 1
39001: PUSH
39002: LD_INT 3
39004: MINUS
39005: PUSH
39006: LD_VAR 0 2
39010: PUSH
39011: LD_INT 1
39013: PUSH
39014: EMPTY
39015: LIST
39016: LIST
39017: LIST
39018: PUSH
39019: LD_VAR 0 1
39023: PUSH
39024: LD_INT 4
39026: MINUS
39027: PUSH
39028: LD_VAR 0 2
39032: PUSH
39033: LD_INT 4
39035: MINUS
39036: PUSH
39037: LD_INT 2
39039: PUSH
39040: EMPTY
39041: LIST
39042: LIST
39043: LIST
39044: PUSH
39045: EMPTY
39046: LIST
39047: LIST
39048: LIST
39049: LIST
39050: LIST
39051: ST_TO_ADDR
// end ; 3 :
39052: GO 39474
39054: LD_INT 3
39056: DOUBLE
39057: EQUAL
39058: IFTRUE 39062
39060: GO 39195
39062: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
39063: LD_ADDR_VAR 0 5
39067: PUSH
39068: LD_VAR 0 1
39072: PUSH
39073: LD_INT 3
39075: PLUS
39076: PUSH
39077: LD_VAR 0 2
39081: PUSH
39082: LD_INT 4
39084: PUSH
39085: EMPTY
39086: LIST
39087: LIST
39088: LIST
39089: PUSH
39090: LD_VAR 0 1
39094: PUSH
39095: LD_INT 4
39097: PLUS
39098: PUSH
39099: LD_VAR 0 2
39103: PUSH
39104: LD_INT 4
39106: PLUS
39107: PUSH
39108: LD_INT 5
39110: PUSH
39111: EMPTY
39112: LIST
39113: LIST
39114: LIST
39115: PUSH
39116: LD_VAR 0 1
39120: PUSH
39121: LD_INT 4
39123: MINUS
39124: PUSH
39125: LD_VAR 0 2
39129: PUSH
39130: LD_INT 1
39132: PUSH
39133: EMPTY
39134: LIST
39135: LIST
39136: LIST
39137: PUSH
39138: LD_VAR 0 1
39142: PUSH
39143: LD_VAR 0 2
39147: PUSH
39148: LD_INT 4
39150: MINUS
39151: PUSH
39152: LD_INT 3
39154: PUSH
39155: EMPTY
39156: LIST
39157: LIST
39158: LIST
39159: PUSH
39160: LD_VAR 0 1
39164: PUSH
39165: LD_INT 3
39167: MINUS
39168: PUSH
39169: LD_VAR 0 2
39173: PUSH
39174: LD_INT 3
39176: MINUS
39177: PUSH
39178: LD_INT 2
39180: PUSH
39181: EMPTY
39182: LIST
39183: LIST
39184: LIST
39185: PUSH
39186: EMPTY
39187: LIST
39188: LIST
39189: LIST
39190: LIST
39191: LIST
39192: ST_TO_ADDR
// end ; 4 :
39193: GO 39474
39195: LD_INT 4
39197: DOUBLE
39198: EQUAL
39199: IFTRUE 39203
39201: GO 39336
39203: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
39204: LD_ADDR_VAR 0 5
39208: PUSH
39209: LD_VAR 0 1
39213: PUSH
39214: LD_VAR 0 2
39218: PUSH
39219: LD_INT 4
39221: PLUS
39222: PUSH
39223: LD_INT 0
39225: PUSH
39226: EMPTY
39227: LIST
39228: LIST
39229: LIST
39230: PUSH
39231: LD_VAR 0 1
39235: PUSH
39236: LD_INT 3
39238: PLUS
39239: PUSH
39240: LD_VAR 0 2
39244: PUSH
39245: LD_INT 3
39247: PLUS
39248: PUSH
39249: LD_INT 5
39251: PUSH
39252: EMPTY
39253: LIST
39254: LIST
39255: LIST
39256: PUSH
39257: LD_VAR 0 1
39261: PUSH
39262: LD_INT 4
39264: PLUS
39265: PUSH
39266: LD_VAR 0 2
39270: PUSH
39271: LD_INT 4
39273: PUSH
39274: EMPTY
39275: LIST
39276: LIST
39277: LIST
39278: PUSH
39279: LD_VAR 0 1
39283: PUSH
39284: LD_VAR 0 2
39288: PUSH
39289: LD_INT 3
39291: MINUS
39292: PUSH
39293: LD_INT 3
39295: PUSH
39296: EMPTY
39297: LIST
39298: LIST
39299: LIST
39300: PUSH
39301: LD_VAR 0 1
39305: PUSH
39306: LD_INT 4
39308: MINUS
39309: PUSH
39310: LD_VAR 0 2
39314: PUSH
39315: LD_INT 4
39317: MINUS
39318: PUSH
39319: LD_INT 2
39321: PUSH
39322: EMPTY
39323: LIST
39324: LIST
39325: LIST
39326: PUSH
39327: EMPTY
39328: LIST
39329: LIST
39330: LIST
39331: LIST
39332: LIST
39333: ST_TO_ADDR
// end ; 5 :
39334: GO 39474
39336: LD_INT 5
39338: DOUBLE
39339: EQUAL
39340: IFTRUE 39344
39342: GO 39473
39344: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
39345: LD_ADDR_VAR 0 5
39349: PUSH
39350: LD_VAR 0 1
39354: PUSH
39355: LD_INT 4
39357: MINUS
39358: PUSH
39359: LD_VAR 0 2
39363: PUSH
39364: LD_INT 1
39366: PUSH
39367: EMPTY
39368: LIST
39369: LIST
39370: LIST
39371: PUSH
39372: LD_VAR 0 1
39376: PUSH
39377: LD_VAR 0 2
39381: PUSH
39382: LD_INT 4
39384: MINUS
39385: PUSH
39386: LD_INT 3
39388: PUSH
39389: EMPTY
39390: LIST
39391: LIST
39392: LIST
39393: PUSH
39394: LD_VAR 0 1
39398: PUSH
39399: LD_INT 4
39401: PLUS
39402: PUSH
39403: LD_VAR 0 2
39407: PUSH
39408: LD_INT 4
39410: PLUS
39411: PUSH
39412: LD_INT 5
39414: PUSH
39415: EMPTY
39416: LIST
39417: LIST
39418: LIST
39419: PUSH
39420: LD_VAR 0 1
39424: PUSH
39425: LD_INT 3
39427: PLUS
39428: PUSH
39429: LD_VAR 0 2
39433: PUSH
39434: LD_INT 4
39436: PUSH
39437: EMPTY
39438: LIST
39439: LIST
39440: LIST
39441: PUSH
39442: LD_VAR 0 1
39446: PUSH
39447: LD_VAR 0 2
39451: PUSH
39452: LD_INT 3
39454: PLUS
39455: PUSH
39456: LD_INT 0
39458: PUSH
39459: EMPTY
39460: LIST
39461: LIST
39462: LIST
39463: PUSH
39464: EMPTY
39465: LIST
39466: LIST
39467: LIST
39468: LIST
39469: LIST
39470: ST_TO_ADDR
// end ; end ;
39471: GO 39474
39473: POP
// result := list ;
39474: LD_ADDR_VAR 0 4
39478: PUSH
39479: LD_VAR 0 5
39483: ST_TO_ADDR
// end ;
39484: LD_VAR 0 4
39488: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
39489: LD_INT 0
39491: PPUSH
39492: PPUSH
39493: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
39494: LD_VAR 0 1
39498: NOT
39499: IFTRUE 39527
39501: PUSH
39502: LD_VAR 0 2
39506: PUSH
39507: LD_INT 1
39509: PUSH
39510: LD_INT 2
39512: PUSH
39513: LD_INT 3
39515: PUSH
39516: LD_INT 4
39518: PUSH
39519: EMPTY
39520: LIST
39521: LIST
39522: LIST
39523: LIST
39524: IN
39525: NOT
39526: OR
39527: IFFALSE 39531
// exit ;
39529: GO 39614
// tmp := [ ] ;
39531: LD_ADDR_VAR 0 5
39535: PUSH
39536: EMPTY
39537: ST_TO_ADDR
// for i in units do
39538: LD_ADDR_VAR 0 4
39542: PUSH
39543: LD_VAR 0 1
39547: PUSH
39548: FOR_IN
39549: IFFALSE 39583
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
39551: LD_ADDR_VAR 0 5
39555: PUSH
39556: LD_VAR 0 5
39560: PPUSH
39561: LD_VAR 0 4
39565: PPUSH
39566: LD_VAR 0 2
39570: PPUSH
39571: CALL_OW 259
39575: PPUSH
39576: CALL 41009 0 2
39580: ST_TO_ADDR
39581: GO 39548
39583: POP
39584: POP
// if not tmp then
39585: LD_VAR 0 5
39589: NOT
39590: IFFALSE 39594
// exit ;
39592: GO 39614
// result := SortListByListDesc ( units , tmp ) ;
39594: LD_ADDR_VAR 0 3
39598: PUSH
39599: LD_VAR 0 1
39603: PPUSH
39604: LD_VAR 0 5
39608: PPUSH
39609: CALL_OW 77
39613: ST_TO_ADDR
// end ;
39614: LD_VAR 0 3
39618: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
39619: LD_INT 0
39621: PPUSH
39622: PPUSH
39623: PPUSH
// result := false ;
39624: LD_ADDR_VAR 0 3
39628: PUSH
39629: LD_INT 0
39631: ST_TO_ADDR
// if not building then
39632: LD_VAR 0 2
39636: NOT
39637: IFFALSE 39641
// exit ;
39639: GO 39785
// x := GetX ( building ) ;
39641: LD_ADDR_VAR 0 4
39645: PUSH
39646: LD_VAR 0 2
39650: PPUSH
39651: CALL_OW 250
39655: ST_TO_ADDR
// y := GetY ( building ) ;
39656: LD_ADDR_VAR 0 5
39660: PUSH
39661: LD_VAR 0 2
39665: PPUSH
39666: CALL_OW 251
39670: ST_TO_ADDR
// if not x or not y then
39671: LD_VAR 0 4
39675: NOT
39676: IFTRUE 39685
39678: PUSH
39679: LD_VAR 0 5
39683: NOT
39684: OR
39685: IFFALSE 39689
// exit ;
39687: GO 39785
// if GetTaskList ( unit ) then
39689: LD_VAR 0 1
39693: PPUSH
39694: CALL_OW 437
39698: IFFALSE 39785
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39700: LD_STRING e
39702: PUSH
39703: LD_VAR 0 1
39707: PPUSH
39708: CALL_OW 437
39712: PUSH
39713: LD_INT 1
39715: ARRAY
39716: PUSH
39717: LD_INT 1
39719: ARRAY
39720: EQUAL
39721: IFFALSE 39748
39723: PUSH
39724: LD_VAR 0 4
39728: PUSH
39729: LD_VAR 0 1
39733: PPUSH
39734: CALL_OW 437
39738: PUSH
39739: LD_INT 1
39741: ARRAY
39742: PUSH
39743: LD_INT 2
39745: ARRAY
39746: EQUAL
39747: AND
39748: IFFALSE 39775
39750: PUSH
39751: LD_VAR 0 5
39755: PUSH
39756: LD_VAR 0 1
39760: PPUSH
39761: CALL_OW 437
39765: PUSH
39766: LD_INT 1
39768: ARRAY
39769: PUSH
39770: LD_INT 3
39772: ARRAY
39773: EQUAL
39774: AND
39775: IFFALSE 39785
// result := true end ;
39777: LD_ADDR_VAR 0 3
39781: PUSH
39782: LD_INT 1
39784: ST_TO_ADDR
// end ;
39785: LD_VAR 0 3
39789: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
39790: LD_INT 0
39792: PPUSH
// result := false ;
39793: LD_ADDR_VAR 0 4
39797: PUSH
39798: LD_INT 0
39800: ST_TO_ADDR
// if GetTaskList ( unit ) then
39801: LD_VAR 0 1
39805: PPUSH
39806: CALL_OW 437
39810: IFFALSE 39897
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39812: LD_STRING M
39814: PUSH
39815: LD_VAR 0 1
39819: PPUSH
39820: CALL_OW 437
39824: PUSH
39825: LD_INT 1
39827: ARRAY
39828: PUSH
39829: LD_INT 1
39831: ARRAY
39832: EQUAL
39833: IFFALSE 39860
39835: PUSH
39836: LD_VAR 0 2
39840: PUSH
39841: LD_VAR 0 1
39845: PPUSH
39846: CALL_OW 437
39850: PUSH
39851: LD_INT 1
39853: ARRAY
39854: PUSH
39855: LD_INT 2
39857: ARRAY
39858: EQUAL
39859: AND
39860: IFFALSE 39887
39862: PUSH
39863: LD_VAR 0 3
39867: PUSH
39868: LD_VAR 0 1
39872: PPUSH
39873: CALL_OW 437
39877: PUSH
39878: LD_INT 1
39880: ARRAY
39881: PUSH
39882: LD_INT 3
39884: ARRAY
39885: EQUAL
39886: AND
39887: IFFALSE 39897
// result := true ;
39889: LD_ADDR_VAR 0 4
39893: PUSH
39894: LD_INT 1
39896: ST_TO_ADDR
// end ; end ;
39897: LD_VAR 0 4
39901: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
39902: LD_INT 0
39904: PPUSH
39905: PPUSH
39906: PPUSH
39907: PPUSH
// if not unit or not area then
39908: LD_VAR 0 1
39912: NOT
39913: IFTRUE 39922
39915: PUSH
39916: LD_VAR 0 2
39920: NOT
39921: OR
39922: IFFALSE 39926
// exit ;
39924: GO 40102
// tmp := AreaToList ( area , i ) ;
39926: LD_ADDR_VAR 0 6
39930: PUSH
39931: LD_VAR 0 2
39935: PPUSH
39936: LD_VAR 0 5
39940: PPUSH
39941: CALL_OW 517
39945: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
39946: LD_ADDR_VAR 0 5
39950: PUSH
39951: DOUBLE
39952: LD_INT 1
39954: DEC
39955: ST_TO_ADDR
39956: LD_VAR 0 6
39960: PUSH
39961: LD_INT 1
39963: ARRAY
39964: PUSH
39965: FOR_TO
39966: IFFALSE 40100
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
39968: LD_ADDR_VAR 0 7
39972: PUSH
39973: LD_VAR 0 6
39977: PUSH
39978: LD_INT 1
39980: ARRAY
39981: PUSH
39982: LD_VAR 0 5
39986: ARRAY
39987: PUSH
39988: LD_VAR 0 6
39992: PUSH
39993: LD_INT 2
39995: ARRAY
39996: PUSH
39997: LD_VAR 0 5
40001: ARRAY
40002: PUSH
40003: EMPTY
40004: LIST
40005: LIST
40006: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
40007: LD_INT 92
40009: PUSH
40010: LD_VAR 0 7
40014: PUSH
40015: LD_INT 1
40017: ARRAY
40018: PUSH
40019: LD_VAR 0 7
40023: PUSH
40024: LD_INT 2
40026: ARRAY
40027: PUSH
40028: LD_INT 2
40030: PUSH
40031: EMPTY
40032: LIST
40033: LIST
40034: LIST
40035: LIST
40036: PPUSH
40037: CALL_OW 69
40041: PUSH
40042: LD_INT 0
40044: EQUAL
40045: IFFALSE 40098
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
40047: LD_VAR 0 1
40051: PPUSH
40052: LD_VAR 0 7
40056: PUSH
40057: LD_INT 1
40059: ARRAY
40060: PPUSH
40061: LD_VAR 0 7
40065: PUSH
40066: LD_INT 2
40068: ARRAY
40069: PPUSH
40070: LD_VAR 0 3
40074: PPUSH
40075: CALL_OW 48
// result := IsPlaced ( unit ) ;
40079: LD_ADDR_VAR 0 4
40083: PUSH
40084: LD_VAR 0 1
40088: PPUSH
40089: CALL_OW 305
40093: ST_TO_ADDR
// exit ;
40094: POP
40095: POP
40096: GO 40102
// end ; end ;
40098: GO 39965
40100: POP
40101: POP
// end ;
40102: LD_VAR 0 4
40106: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
40107: LD_INT 0
40109: PPUSH
40110: PPUSH
40111: PPUSH
// if not side or side > 8 then
40112: LD_VAR 0 1
40116: NOT
40117: IFTRUE 40129
40119: PUSH
40120: LD_VAR 0 1
40124: PUSH
40125: LD_INT 8
40127: GREATER
40128: OR
40129: IFFALSE 40133
// exit ;
40131: GO 40320
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
40133: LD_ADDR_VAR 0 4
40137: PUSH
40138: LD_INT 22
40140: PUSH
40141: LD_VAR 0 1
40145: PUSH
40146: EMPTY
40147: LIST
40148: LIST
40149: PUSH
40150: LD_INT 21
40152: PUSH
40153: LD_INT 3
40155: PUSH
40156: EMPTY
40157: LIST
40158: LIST
40159: PUSH
40160: EMPTY
40161: LIST
40162: LIST
40163: PPUSH
40164: CALL_OW 69
40168: ST_TO_ADDR
// if not tmp then
40169: LD_VAR 0 4
40173: NOT
40174: IFFALSE 40178
// exit ;
40176: GO 40320
// enable_addtolog := true ;
40178: LD_ADDR_OWVAR 81
40182: PUSH
40183: LD_INT 1
40185: ST_TO_ADDR
// AddToLog ( [ ) ;
40186: LD_STRING [
40188: PPUSH
40189: CALL_OW 561
// for i in tmp do
40193: LD_ADDR_VAR 0 3
40197: PUSH
40198: LD_VAR 0 4
40202: PUSH
40203: FOR_IN
40204: IFFALSE 40311
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
40206: LD_STRING [
40208: PUSH
40209: LD_VAR 0 3
40213: PPUSH
40214: CALL_OW 266
40218: STR
40219: PUSH
40220: LD_STRING , 
40222: STR
40223: PUSH
40224: LD_VAR 0 3
40228: PPUSH
40229: CALL_OW 250
40233: STR
40234: PUSH
40235: LD_STRING , 
40237: STR
40238: PUSH
40239: LD_VAR 0 3
40243: PPUSH
40244: CALL_OW 251
40248: STR
40249: PUSH
40250: LD_STRING , 
40252: STR
40253: PUSH
40254: LD_VAR 0 3
40258: PPUSH
40259: CALL_OW 254
40263: STR
40264: PUSH
40265: LD_STRING , 
40267: STR
40268: PUSH
40269: LD_VAR 0 3
40273: PPUSH
40274: LD_INT 1
40276: PPUSH
40277: CALL_OW 268
40281: STR
40282: PUSH
40283: LD_STRING , 
40285: STR
40286: PUSH
40287: LD_VAR 0 3
40291: PPUSH
40292: LD_INT 2
40294: PPUSH
40295: CALL_OW 268
40299: STR
40300: PUSH
40301: LD_STRING ],
40303: STR
40304: PPUSH
40305: CALL_OW 561
// end ;
40309: GO 40203
40311: POP
40312: POP
// AddToLog ( ]; ) ;
40313: LD_STRING ];
40315: PPUSH
40316: CALL_OW 561
// end ;
40320: LD_VAR 0 2
40324: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
40325: LD_INT 0
40327: PPUSH
40328: PPUSH
40329: PPUSH
40330: PPUSH
40331: PPUSH
// if not area or not rate or not max then
40332: LD_VAR 0 1
40336: NOT
40337: IFTRUE 40346
40339: PUSH
40340: LD_VAR 0 2
40344: NOT
40345: OR
40346: IFTRUE 40355
40348: PUSH
40349: LD_VAR 0 4
40353: NOT
40354: OR
40355: IFFALSE 40359
// exit ;
40357: GO 40548
// while 1 do
40359: LD_INT 1
40361: IFFALSE 40548
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
40363: LD_ADDR_VAR 0 9
40367: PUSH
40368: LD_VAR 0 1
40372: PPUSH
40373: LD_INT 1
40375: PPUSH
40376: CALL_OW 287
40380: PUSH
40381: LD_INT 10
40383: MUL
40384: ST_TO_ADDR
// r := rate / 10 ;
40385: LD_ADDR_VAR 0 7
40389: PUSH
40390: LD_VAR 0 2
40394: PUSH
40395: LD_INT 10
40397: DIVREAL
40398: ST_TO_ADDR
// time := 1 1$00 ;
40399: LD_ADDR_VAR 0 8
40403: PUSH
40404: LD_INT 2100
40406: ST_TO_ADDR
// if amount < min then
40407: LD_VAR 0 9
40411: PUSH
40412: LD_VAR 0 3
40416: LESS
40417: IFFALSE 40435
// r := r * 2 else
40419: LD_ADDR_VAR 0 7
40423: PUSH
40424: LD_VAR 0 7
40428: PUSH
40429: LD_INT 2
40431: MUL
40432: ST_TO_ADDR
40433: GO 40461
// if amount > max then
40435: LD_VAR 0 9
40439: PUSH
40440: LD_VAR 0 4
40444: GREATER
40445: IFFALSE 40461
// r := r / 2 ;
40447: LD_ADDR_VAR 0 7
40451: PUSH
40452: LD_VAR 0 7
40456: PUSH
40457: LD_INT 2
40459: DIVREAL
40460: ST_TO_ADDR
// time := time / r ;
40461: LD_ADDR_VAR 0 8
40465: PUSH
40466: LD_VAR 0 8
40470: PUSH
40471: LD_VAR 0 7
40475: DIVREAL
40476: ST_TO_ADDR
// if time < 0 then
40477: LD_VAR 0 8
40481: PUSH
40482: LD_INT 0
40484: LESS
40485: IFFALSE 40502
// time := time * - 1 ;
40487: LD_ADDR_VAR 0 8
40491: PUSH
40492: LD_VAR 0 8
40496: PUSH
40497: LD_INT 1
40499: NEG
40500: MUL
40501: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
40502: LD_VAR 0 8
40506: PUSH
40507: LD_INT 35
40509: PPUSH
40510: LD_INT 875
40512: PPUSH
40513: CALL_OW 12
40517: PLUS
40518: PPUSH
40519: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
40523: LD_INT 1
40525: PPUSH
40526: LD_INT 5
40528: PPUSH
40529: CALL_OW 12
40533: PPUSH
40534: LD_VAR 0 1
40538: PPUSH
40539: LD_INT 1
40541: PPUSH
40542: CALL_OW 55
// end ;
40546: GO 40359
// end ;
40548: LD_VAR 0 5
40552: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
40553: LD_INT 0
40555: PPUSH
40556: PPUSH
40557: PPUSH
40558: PPUSH
40559: PPUSH
40560: PPUSH
40561: PPUSH
40562: PPUSH
// if not turrets or not factories then
40563: LD_VAR 0 1
40567: NOT
40568: IFTRUE 40577
40570: PUSH
40571: LD_VAR 0 2
40575: NOT
40576: OR
40577: IFFALSE 40581
// exit ;
40579: GO 40888
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
40581: LD_ADDR_VAR 0 10
40585: PUSH
40586: LD_INT 5
40588: PUSH
40589: LD_INT 6
40591: PUSH
40592: EMPTY
40593: LIST
40594: LIST
40595: PUSH
40596: LD_INT 2
40598: PUSH
40599: LD_INT 4
40601: PUSH
40602: EMPTY
40603: LIST
40604: LIST
40605: PUSH
40606: LD_INT 3
40608: PUSH
40609: LD_INT 5
40611: PUSH
40612: EMPTY
40613: LIST
40614: LIST
40615: PUSH
40616: EMPTY
40617: LIST
40618: LIST
40619: LIST
40620: PUSH
40621: LD_INT 24
40623: PUSH
40624: LD_INT 25
40626: PUSH
40627: EMPTY
40628: LIST
40629: LIST
40630: PUSH
40631: LD_INT 23
40633: PUSH
40634: LD_INT 27
40636: PUSH
40637: EMPTY
40638: LIST
40639: LIST
40640: PUSH
40641: EMPTY
40642: LIST
40643: LIST
40644: PUSH
40645: LD_INT 42
40647: PUSH
40648: LD_INT 43
40650: PUSH
40651: EMPTY
40652: LIST
40653: LIST
40654: PUSH
40655: LD_INT 44
40657: PUSH
40658: LD_INT 46
40660: PUSH
40661: EMPTY
40662: LIST
40663: LIST
40664: PUSH
40665: LD_INT 45
40667: PUSH
40668: LD_INT 47
40670: PUSH
40671: EMPTY
40672: LIST
40673: LIST
40674: PUSH
40675: EMPTY
40676: LIST
40677: LIST
40678: LIST
40679: PUSH
40680: EMPTY
40681: LIST
40682: LIST
40683: LIST
40684: ST_TO_ADDR
// result := [ ] ;
40685: LD_ADDR_VAR 0 3
40689: PUSH
40690: EMPTY
40691: ST_TO_ADDR
// for i in turrets do
40692: LD_ADDR_VAR 0 4
40696: PUSH
40697: LD_VAR 0 1
40701: PUSH
40702: FOR_IN
40703: IFFALSE 40886
// begin nat := GetNation ( i ) ;
40705: LD_ADDR_VAR 0 7
40709: PUSH
40710: LD_VAR 0 4
40714: PPUSH
40715: CALL_OW 248
40719: ST_TO_ADDR
// weapon := 0 ;
40720: LD_ADDR_VAR 0 8
40724: PUSH
40725: LD_INT 0
40727: ST_TO_ADDR
// if not nat then
40728: LD_VAR 0 7
40732: NOT
40733: IFFALSE 40737
// continue ;
40735: GO 40702
// for j in list [ nat ] do
40737: LD_ADDR_VAR 0 5
40741: PUSH
40742: LD_VAR 0 10
40746: PUSH
40747: LD_VAR 0 7
40751: ARRAY
40752: PUSH
40753: FOR_IN
40754: IFFALSE 40795
// if GetBWeapon ( i ) = j [ 1 ] then
40756: LD_VAR 0 4
40760: PPUSH
40761: CALL_OW 269
40765: PUSH
40766: LD_VAR 0 5
40770: PUSH
40771: LD_INT 1
40773: ARRAY
40774: EQUAL
40775: IFFALSE 40793
// begin weapon := j [ 2 ] ;
40777: LD_ADDR_VAR 0 8
40781: PUSH
40782: LD_VAR 0 5
40786: PUSH
40787: LD_INT 2
40789: ARRAY
40790: ST_TO_ADDR
// break ;
40791: GO 40795
// end ;
40793: GO 40753
40795: POP
40796: POP
// if not weapon then
40797: LD_VAR 0 8
40801: NOT
40802: IFFALSE 40806
// continue ;
40804: GO 40702
// for k in factories do
40806: LD_ADDR_VAR 0 6
40810: PUSH
40811: LD_VAR 0 2
40815: PUSH
40816: FOR_IN
40817: IFFALSE 40882
// begin weapons := AvailableWeaponList ( k ) ;
40819: LD_ADDR_VAR 0 9
40823: PUSH
40824: LD_VAR 0 6
40828: PPUSH
40829: CALL_OW 478
40833: ST_TO_ADDR
// if not weapons then
40834: LD_VAR 0 9
40838: NOT
40839: IFFALSE 40843
// continue ;
40841: GO 40816
// if weapon in weapons then
40843: LD_VAR 0 8
40847: PUSH
40848: LD_VAR 0 9
40852: IN
40853: IFFALSE 40880
// begin result := [ i , weapon ] ;
40855: LD_ADDR_VAR 0 3
40859: PUSH
40860: LD_VAR 0 4
40864: PUSH
40865: LD_VAR 0 8
40869: PUSH
40870: EMPTY
40871: LIST
40872: LIST
40873: ST_TO_ADDR
// exit ;
40874: POP
40875: POP
40876: POP
40877: POP
40878: GO 40888
// end ; end ;
40880: GO 40816
40882: POP
40883: POP
// end ;
40884: GO 40702
40886: POP
40887: POP
// end ;
40888: LD_VAR 0 3
40892: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
40893: LD_INT 0
40895: PPUSH
// if not side or side > 8 then
40896: LD_VAR 0 3
40900: NOT
40901: IFTRUE 40913
40903: PUSH
40904: LD_VAR 0 3
40908: PUSH
40909: LD_INT 8
40911: GREATER
40912: OR
40913: IFFALSE 40917
// exit ;
40915: GO 40976
// if not range then
40917: LD_VAR 0 4
40921: NOT
40922: IFFALSE 40933
// range := - 12 ;
40924: LD_ADDR_VAR 0 4
40928: PUSH
40929: LD_INT 12
40931: NEG
40932: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
40933: LD_VAR 0 1
40937: PPUSH
40938: LD_VAR 0 2
40942: PPUSH
40943: LD_VAR 0 3
40947: PPUSH
40948: LD_VAR 0 4
40952: PPUSH
40953: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
40957: LD_VAR 0 1
40961: PPUSH
40962: LD_VAR 0 2
40966: PPUSH
40967: LD_VAR 0 3
40971: PPUSH
40972: CALL_OW 331
// end ;
40976: LD_VAR 0 5
40980: RET
// export function Video ( mode ) ; begin
40981: LD_INT 0
40983: PPUSH
// ingame_video = mode ;
40984: LD_ADDR_OWVAR 52
40988: PUSH
40989: LD_VAR 0 1
40993: ST_TO_ADDR
// interface_hidden = mode ;
40994: LD_ADDR_OWVAR 54
40998: PUSH
40999: LD_VAR 0 1
41003: ST_TO_ADDR
// end ;
41004: LD_VAR 0 2
41008: RET
// export function Join ( array , element ) ; begin
41009: LD_INT 0
41011: PPUSH
// result := Replace ( array , array + 1 , element ) ;
41012: LD_ADDR_VAR 0 3
41016: PUSH
41017: LD_VAR 0 1
41021: PPUSH
41022: LD_VAR 0 1
41026: PUSH
41027: LD_INT 1
41029: PLUS
41030: PPUSH
41031: LD_VAR 0 2
41035: PPUSH
41036: CALL_OW 1
41040: ST_TO_ADDR
// end ;
41041: LD_VAR 0 3
41045: RET
// export function JoinUnion ( array , element ) ; begin
41046: LD_INT 0
41048: PPUSH
// result := array union element ;
41049: LD_ADDR_VAR 0 3
41053: PUSH
41054: LD_VAR 0 1
41058: PUSH
41059: LD_VAR 0 2
41063: UNION
41064: ST_TO_ADDR
// end ;
41065: LD_VAR 0 3
41069: RET
// export function GetBehemoths ( side ) ; begin
41070: LD_INT 0
41072: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
41073: LD_ADDR_VAR 0 2
41077: PUSH
41078: LD_INT 22
41080: PUSH
41081: LD_VAR 0 1
41085: PUSH
41086: EMPTY
41087: LIST
41088: LIST
41089: PUSH
41090: LD_INT 31
41092: PUSH
41093: LD_INT 25
41095: PUSH
41096: EMPTY
41097: LIST
41098: LIST
41099: PUSH
41100: EMPTY
41101: LIST
41102: LIST
41103: PPUSH
41104: CALL_OW 69
41108: ST_TO_ADDR
// end ;
41109: LD_VAR 0 2
41113: RET
// export function Shuffle ( array ) ; var i , index ; begin
41114: LD_INT 0
41116: PPUSH
41117: PPUSH
41118: PPUSH
// result := [ ] ;
41119: LD_ADDR_VAR 0 2
41123: PUSH
41124: EMPTY
41125: ST_TO_ADDR
// if not array then
41126: LD_VAR 0 1
41130: NOT
41131: IFFALSE 41135
// exit ;
41133: GO 41234
// Randomize ;
41135: CALL_OW 10
// for i = array downto 1 do
41139: LD_ADDR_VAR 0 3
41143: PUSH
41144: DOUBLE
41145: LD_VAR 0 1
41149: INC
41150: ST_TO_ADDR
41151: LD_INT 1
41153: PUSH
41154: FOR_DOWNTO
41155: IFFALSE 41232
// begin index := rand ( 1 , array ) ;
41157: LD_ADDR_VAR 0 4
41161: PUSH
41162: LD_INT 1
41164: PPUSH
41165: LD_VAR 0 1
41169: PPUSH
41170: CALL_OW 12
41174: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
41175: LD_ADDR_VAR 0 2
41179: PUSH
41180: LD_VAR 0 2
41184: PPUSH
41185: LD_VAR 0 2
41189: PUSH
41190: LD_INT 1
41192: PLUS
41193: PPUSH
41194: LD_VAR 0 1
41198: PUSH
41199: LD_VAR 0 4
41203: ARRAY
41204: PPUSH
41205: CALL_OW 2
41209: ST_TO_ADDR
// array := Delete ( array , index ) ;
41210: LD_ADDR_VAR 0 1
41214: PUSH
41215: LD_VAR 0 1
41219: PPUSH
41220: LD_VAR 0 4
41224: PPUSH
41225: CALL_OW 3
41229: ST_TO_ADDR
// end ;
41230: GO 41154
41232: POP
41233: POP
// end ;
41234: LD_VAR 0 2
41238: RET
// export function GetBaseMaterials ( base ) ; begin
41239: LD_INT 0
41241: PPUSH
// result := [ 0 , 0 , 0 ] ;
41242: LD_ADDR_VAR 0 2
41246: PUSH
41247: LD_INT 0
41249: PUSH
41250: LD_INT 0
41252: PUSH
41253: LD_INT 0
41255: PUSH
41256: EMPTY
41257: LIST
41258: LIST
41259: LIST
41260: ST_TO_ADDR
// if not base then
41261: LD_VAR 0 1
41265: NOT
41266: IFFALSE 41270
// exit ;
41268: GO 41319
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
41270: LD_ADDR_VAR 0 2
41274: PUSH
41275: LD_VAR 0 1
41279: PPUSH
41280: LD_INT 1
41282: PPUSH
41283: CALL_OW 275
41287: PUSH
41288: LD_VAR 0 1
41292: PPUSH
41293: LD_INT 2
41295: PPUSH
41296: CALL_OW 275
41300: PUSH
41301: LD_VAR 0 1
41305: PPUSH
41306: LD_INT 3
41308: PPUSH
41309: CALL_OW 275
41313: PUSH
41314: EMPTY
41315: LIST
41316: LIST
41317: LIST
41318: ST_TO_ADDR
// end ;
41319: LD_VAR 0 2
41323: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
41324: LD_INT 0
41326: PPUSH
41327: PPUSH
// result := array ;
41328: LD_ADDR_VAR 0 3
41332: PUSH
41333: LD_VAR 0 1
41337: ST_TO_ADDR
// if size >= result then
41338: LD_VAR 0 2
41342: PUSH
41343: LD_VAR 0 3
41347: GREATEREQUAL
41348: IFFALSE 41352
// exit ;
41350: GO 41402
// if size then
41352: LD_VAR 0 2
41356: IFFALSE 41402
// for i := array downto size do
41358: LD_ADDR_VAR 0 4
41362: PUSH
41363: DOUBLE
41364: LD_VAR 0 1
41368: INC
41369: ST_TO_ADDR
41370: LD_VAR 0 2
41374: PUSH
41375: FOR_DOWNTO
41376: IFFALSE 41400
// result := Delete ( result , result ) ;
41378: LD_ADDR_VAR 0 3
41382: PUSH
41383: LD_VAR 0 3
41387: PPUSH
41388: LD_VAR 0 3
41392: PPUSH
41393: CALL_OW 3
41397: ST_TO_ADDR
41398: GO 41375
41400: POP
41401: POP
// end ;
41402: LD_VAR 0 3
41406: RET
// export function ComExit ( unit ) ; var tmp ; begin
41407: LD_INT 0
41409: PPUSH
41410: PPUSH
// if not IsInUnit ( unit ) then
41411: LD_VAR 0 1
41415: PPUSH
41416: CALL_OW 310
41420: NOT
41421: IFFALSE 41425
// exit ;
41423: GO 41485
// tmp := IsInUnit ( unit ) ;
41425: LD_ADDR_VAR 0 3
41429: PUSH
41430: LD_VAR 0 1
41434: PPUSH
41435: CALL_OW 310
41439: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
41440: LD_VAR 0 3
41444: PPUSH
41445: CALL_OW 247
41449: PUSH
41450: LD_INT 2
41452: EQUAL
41453: IFFALSE 41466
// ComExitVehicle ( unit ) else
41455: LD_VAR 0 1
41459: PPUSH
41460: CALL_OW 121
41464: GO 41475
// ComExitBuilding ( unit ) ;
41466: LD_VAR 0 1
41470: PPUSH
41471: CALL_OW 122
// result := tmp ;
41475: LD_ADDR_VAR 0 2
41479: PUSH
41480: LD_VAR 0 3
41484: ST_TO_ADDR
// end ;
41485: LD_VAR 0 2
41489: RET
// export function ComExitAll ( units ) ; var i ; begin
41490: LD_INT 0
41492: PPUSH
41493: PPUSH
// if not units then
41494: LD_VAR 0 1
41498: NOT
41499: IFFALSE 41503
// exit ;
41501: GO 41529
// for i in units do
41503: LD_ADDR_VAR 0 3
41507: PUSH
41508: LD_VAR 0 1
41512: PUSH
41513: FOR_IN
41514: IFFALSE 41527
// ComExit ( i ) ;
41516: LD_VAR 0 3
41520: PPUSH
41521: CALL 41407 0 1
41525: GO 41513
41527: POP
41528: POP
// end ;
41529: LD_VAR 0 2
41533: RET
// export function ResetHc ; begin
41534: LD_INT 0
41536: PPUSH
// InitHc ;
41537: CALL_OW 19
// hc_importance := 0 ;
41541: LD_ADDR_OWVAR 32
41545: PUSH
41546: LD_INT 0
41548: ST_TO_ADDR
// end ;
41549: LD_VAR 0 1
41553: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
41554: LD_INT 0
41556: PPUSH
41557: PPUSH
41558: PPUSH
// _x := ( x1 + x2 ) div 2 ;
41559: LD_ADDR_VAR 0 6
41563: PUSH
41564: LD_VAR 0 1
41568: PUSH
41569: LD_VAR 0 3
41573: PLUS
41574: PUSH
41575: LD_INT 2
41577: DIV
41578: ST_TO_ADDR
// if _x < 0 then
41579: LD_VAR 0 6
41583: PUSH
41584: LD_INT 0
41586: LESS
41587: IFFALSE 41604
// _x := _x * - 1 ;
41589: LD_ADDR_VAR 0 6
41593: PUSH
41594: LD_VAR 0 6
41598: PUSH
41599: LD_INT 1
41601: NEG
41602: MUL
41603: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
41604: LD_ADDR_VAR 0 7
41608: PUSH
41609: LD_VAR 0 2
41613: PUSH
41614: LD_VAR 0 4
41618: PLUS
41619: PUSH
41620: LD_INT 2
41622: DIV
41623: ST_TO_ADDR
// if _y < 0 then
41624: LD_VAR 0 7
41628: PUSH
41629: LD_INT 0
41631: LESS
41632: IFFALSE 41649
// _y := _y * - 1 ;
41634: LD_ADDR_VAR 0 7
41638: PUSH
41639: LD_VAR 0 7
41643: PUSH
41644: LD_INT 1
41646: NEG
41647: MUL
41648: ST_TO_ADDR
// result := [ _x , _y ] ;
41649: LD_ADDR_VAR 0 5
41653: PUSH
41654: LD_VAR 0 6
41658: PUSH
41659: LD_VAR 0 7
41663: PUSH
41664: EMPTY
41665: LIST
41666: LIST
41667: ST_TO_ADDR
// end ;
41668: LD_VAR 0 5
41672: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
41673: LD_INT 0
41675: PPUSH
41676: PPUSH
41677: PPUSH
41678: PPUSH
// task := GetTaskList ( unit ) ;
41679: LD_ADDR_VAR 0 7
41683: PUSH
41684: LD_VAR 0 1
41688: PPUSH
41689: CALL_OW 437
41693: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
41694: LD_VAR 0 7
41698: NOT
41699: IFFALSE 41718
41701: PUSH
41702: LD_VAR 0 1
41706: PPUSH
41707: LD_VAR 0 2
41711: PPUSH
41712: CALL_OW 308
41716: NOT
41717: AND
41718: IFFALSE 41722
// exit ;
41720: GO 41840
// if IsInArea ( unit , area ) then
41722: LD_VAR 0 1
41726: PPUSH
41727: LD_VAR 0 2
41731: PPUSH
41732: CALL_OW 308
41736: IFFALSE 41754
// begin ComMoveToArea ( unit , goAway ) ;
41738: LD_VAR 0 1
41742: PPUSH
41743: LD_VAR 0 3
41747: PPUSH
41748: CALL_OW 113
// exit ;
41752: GO 41840
// end ; if task [ 1 ] [ 1 ] <> M then
41754: LD_VAR 0 7
41758: PUSH
41759: LD_INT 1
41761: ARRAY
41762: PUSH
41763: LD_INT 1
41765: ARRAY
41766: PUSH
41767: LD_STRING M
41769: NONEQUAL
41770: IFFALSE 41774
// exit ;
41772: GO 41840
// x := task [ 1 ] [ 2 ] ;
41774: LD_ADDR_VAR 0 5
41778: PUSH
41779: LD_VAR 0 7
41783: PUSH
41784: LD_INT 1
41786: ARRAY
41787: PUSH
41788: LD_INT 2
41790: ARRAY
41791: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
41792: LD_ADDR_VAR 0 6
41796: PUSH
41797: LD_VAR 0 7
41801: PUSH
41802: LD_INT 1
41804: ARRAY
41805: PUSH
41806: LD_INT 3
41808: ARRAY
41809: ST_TO_ADDR
// if InArea ( x , y , area ) then
41810: LD_VAR 0 5
41814: PPUSH
41815: LD_VAR 0 6
41819: PPUSH
41820: LD_VAR 0 2
41824: PPUSH
41825: CALL_OW 309
41829: IFFALSE 41840
// ComStop ( unit ) ;
41831: LD_VAR 0 1
41835: PPUSH
41836: CALL_OW 141
// end ;
41840: LD_VAR 0 4
41844: RET
// export function Abs ( value ) ; begin
41845: LD_INT 0
41847: PPUSH
// result := value ;
41848: LD_ADDR_VAR 0 2
41852: PUSH
41853: LD_VAR 0 1
41857: ST_TO_ADDR
// if value < 0 then
41858: LD_VAR 0 1
41862: PUSH
41863: LD_INT 0
41865: LESS
41866: IFFALSE 41883
// result := value * - 1 ;
41868: LD_ADDR_VAR 0 2
41872: PUSH
41873: LD_VAR 0 1
41877: PUSH
41878: LD_INT 1
41880: NEG
41881: MUL
41882: ST_TO_ADDR
// end ;
41883: LD_VAR 0 2
41887: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
41888: LD_INT 0
41890: PPUSH
41891: PPUSH
41892: PPUSH
41893: PPUSH
41894: PPUSH
41895: PPUSH
41896: PPUSH
41897: PPUSH
// if not unit or not building then
41898: LD_VAR 0 1
41902: NOT
41903: IFTRUE 41912
41905: PUSH
41906: LD_VAR 0 2
41910: NOT
41911: OR
41912: IFFALSE 41916
// exit ;
41914: GO 42144
// x := GetX ( building ) ;
41916: LD_ADDR_VAR 0 4
41920: PUSH
41921: LD_VAR 0 2
41925: PPUSH
41926: CALL_OW 250
41930: ST_TO_ADDR
// y := GetY ( building ) ;
41931: LD_ADDR_VAR 0 6
41935: PUSH
41936: LD_VAR 0 2
41940: PPUSH
41941: CALL_OW 251
41945: ST_TO_ADDR
// d := GetDir ( building ) ;
41946: LD_ADDR_VAR 0 8
41950: PUSH
41951: LD_VAR 0 2
41955: PPUSH
41956: CALL_OW 254
41960: ST_TO_ADDR
// r := 4 ;
41961: LD_ADDR_VAR 0 9
41965: PUSH
41966: LD_INT 4
41968: ST_TO_ADDR
// for i := 1 to 5 do
41969: LD_ADDR_VAR 0 10
41973: PUSH
41974: DOUBLE
41975: LD_INT 1
41977: DEC
41978: ST_TO_ADDR
41979: LD_INT 5
41981: PUSH
41982: FOR_TO
41983: IFFALSE 42142
// begin _x := ShiftX ( x , d , r + i ) ;
41985: LD_ADDR_VAR 0 5
41989: PUSH
41990: LD_VAR 0 4
41994: PPUSH
41995: LD_VAR 0 8
41999: PPUSH
42000: LD_VAR 0 9
42004: PUSH
42005: LD_VAR 0 10
42009: PLUS
42010: PPUSH
42011: CALL_OW 272
42015: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
42016: LD_ADDR_VAR 0 7
42020: PUSH
42021: LD_VAR 0 6
42025: PPUSH
42026: LD_VAR 0 8
42030: PPUSH
42031: LD_VAR 0 9
42035: PUSH
42036: LD_VAR 0 10
42040: PLUS
42041: PPUSH
42042: CALL_OW 273
42046: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
42047: LD_VAR 0 5
42051: PPUSH
42052: LD_VAR 0 7
42056: PPUSH
42057: CALL_OW 488
42061: IFFALSE 42096
42063: PUSH
42064: LD_VAR 0 5
42068: PPUSH
42069: LD_VAR 0 7
42073: PPUSH
42074: CALL_OW 428
42078: PPUSH
42079: CALL_OW 247
42083: PUSH
42084: LD_INT 3
42086: PUSH
42087: LD_INT 2
42089: PUSH
42090: EMPTY
42091: LIST
42092: LIST
42093: IN
42094: NOT
42095: AND
42096: IFFALSE 42140
// begin ComMoveXY ( unit , _x , _y ) ;
42098: LD_VAR 0 1
42102: PPUSH
42103: LD_VAR 0 5
42107: PPUSH
42108: LD_VAR 0 7
42112: PPUSH
42113: CALL_OW 111
// result := [ _x , _y ] ;
42117: LD_ADDR_VAR 0 3
42121: PUSH
42122: LD_VAR 0 5
42126: PUSH
42127: LD_VAR 0 7
42131: PUSH
42132: EMPTY
42133: LIST
42134: LIST
42135: ST_TO_ADDR
// exit ;
42136: POP
42137: POP
42138: GO 42144
// end ; end ;
42140: GO 41982
42142: POP
42143: POP
// end ;
42144: LD_VAR 0 3
42148: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
42149: LD_INT 0
42151: PPUSH
42152: PPUSH
42153: PPUSH
// result := 0 ;
42154: LD_ADDR_VAR 0 3
42158: PUSH
42159: LD_INT 0
42161: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
42162: LD_VAR 0 1
42166: PUSH
42167: LD_INT 0
42169: LESS
42170: IFTRUE 42182
42172: PUSH
42173: LD_VAR 0 1
42177: PUSH
42178: LD_INT 8
42180: GREATER
42181: OR
42182: IFTRUE 42194
42184: PUSH
42185: LD_VAR 0 2
42189: PUSH
42190: LD_INT 0
42192: LESS
42193: OR
42194: IFTRUE 42206
42196: PUSH
42197: LD_VAR 0 2
42201: PUSH
42202: LD_INT 8
42204: GREATER
42205: OR
42206: IFFALSE 42210
// exit ;
42208: GO 42285
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
42210: LD_ADDR_VAR 0 4
42214: PUSH
42215: LD_INT 22
42217: PUSH
42218: LD_VAR 0 2
42222: PUSH
42223: EMPTY
42224: LIST
42225: LIST
42226: PPUSH
42227: CALL_OW 69
42231: PUSH
42232: FOR_IN
42233: IFFALSE 42283
// begin un := UnitShoot ( i ) ;
42235: LD_ADDR_VAR 0 5
42239: PUSH
42240: LD_VAR 0 4
42244: PPUSH
42245: CALL_OW 504
42249: ST_TO_ADDR
// if GetSide ( un ) = side1 then
42250: LD_VAR 0 5
42254: PPUSH
42255: CALL_OW 255
42259: PUSH
42260: LD_VAR 0 1
42264: EQUAL
42265: IFFALSE 42281
// begin result := un ;
42267: LD_ADDR_VAR 0 3
42271: PUSH
42272: LD_VAR 0 5
42276: ST_TO_ADDR
// exit ;
42277: POP
42278: POP
42279: GO 42285
// end ; end ;
42281: GO 42232
42283: POP
42284: POP
// end ;
42285: LD_VAR 0 3
42289: RET
// export function GetCargoBay ( units ) ; begin
42290: LD_INT 0
42292: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
42293: LD_ADDR_VAR 0 2
42297: PUSH
42298: LD_VAR 0 1
42302: PPUSH
42303: LD_INT 2
42305: PUSH
42306: LD_INT 34
42308: PUSH
42309: LD_INT 12
42311: PUSH
42312: EMPTY
42313: LIST
42314: LIST
42315: PUSH
42316: LD_INT 34
42318: PUSH
42319: LD_INT 51
42321: PUSH
42322: EMPTY
42323: LIST
42324: LIST
42325: PUSH
42326: LD_INT 34
42328: PUSH
42329: LD_INT 32
42331: PUSH
42332: EMPTY
42333: LIST
42334: LIST
42335: PUSH
42336: LD_INT 34
42338: PUSH
42339: LD_INT 89
42341: PUSH
42342: EMPTY
42343: LIST
42344: LIST
42345: PUSH
42346: EMPTY
42347: LIST
42348: LIST
42349: LIST
42350: LIST
42351: LIST
42352: PPUSH
42353: CALL_OW 72
42357: ST_TO_ADDR
// end ;
42358: LD_VAR 0 2
42362: RET
// export function Negate ( value ) ; begin
42363: LD_INT 0
42365: PPUSH
// result := not value ;
42366: LD_ADDR_VAR 0 2
42370: PUSH
42371: LD_VAR 0 1
42375: NOT
42376: ST_TO_ADDR
// end ;
42377: LD_VAR 0 2
42381: RET
// export function Inc ( value ) ; begin
42382: LD_INT 0
42384: PPUSH
// result := value + 1 ;
42385: LD_ADDR_VAR 0 2
42389: PUSH
42390: LD_VAR 0 1
42394: PUSH
42395: LD_INT 1
42397: PLUS
42398: ST_TO_ADDR
// end ;
42399: LD_VAR 0 2
42403: RET
// export function Dec ( value ) ; begin
42404: LD_INT 0
42406: PPUSH
// result := value - 1 ;
42407: LD_ADDR_VAR 0 2
42411: PUSH
42412: LD_VAR 0 1
42416: PUSH
42417: LD_INT 1
42419: MINUS
42420: ST_TO_ADDR
// end ;
42421: LD_VAR 0 2
42425: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
42426: LD_INT 0
42428: PPUSH
42429: PPUSH
42430: PPUSH
42431: PPUSH
42432: PPUSH
42433: PPUSH
42434: PPUSH
42435: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
42436: LD_VAR 0 1
42440: PPUSH
42441: LD_VAR 0 2
42445: PPUSH
42446: CALL_OW 488
42450: NOT
42451: IFTRUE 42470
42453: PUSH
42454: LD_VAR 0 3
42458: PPUSH
42459: LD_VAR 0 4
42463: PPUSH
42464: CALL_OW 488
42468: NOT
42469: OR
42470: IFFALSE 42483
// begin result := - 1 ;
42472: LD_ADDR_VAR 0 5
42476: PUSH
42477: LD_INT 1
42479: NEG
42480: ST_TO_ADDR
// exit ;
42481: GO 42718
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
42483: LD_ADDR_VAR 0 12
42487: PUSH
42488: LD_VAR 0 1
42492: PPUSH
42493: LD_VAR 0 2
42497: PPUSH
42498: LD_VAR 0 3
42502: PPUSH
42503: LD_VAR 0 4
42507: PPUSH
42508: CALL 41554 0 4
42512: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
42513: LD_ADDR_VAR 0 11
42517: PUSH
42518: LD_VAR 0 1
42522: PPUSH
42523: LD_VAR 0 2
42527: PPUSH
42528: LD_VAR 0 12
42532: PUSH
42533: LD_INT 1
42535: ARRAY
42536: PPUSH
42537: LD_VAR 0 12
42541: PUSH
42542: LD_INT 2
42544: ARRAY
42545: PPUSH
42546: CALL_OW 298
42550: ST_TO_ADDR
// distance := 9999 ;
42551: LD_ADDR_VAR 0 10
42555: PUSH
42556: LD_INT 9999
42558: ST_TO_ADDR
// for i := 0 to 5 do
42559: LD_ADDR_VAR 0 6
42563: PUSH
42564: DOUBLE
42565: LD_INT 0
42567: DEC
42568: ST_TO_ADDR
42569: LD_INT 5
42571: PUSH
42572: FOR_TO
42573: IFFALSE 42716
// begin _x := ShiftX ( x1 , i , centerDist ) ;
42575: LD_ADDR_VAR 0 7
42579: PUSH
42580: LD_VAR 0 1
42584: PPUSH
42585: LD_VAR 0 6
42589: PPUSH
42590: LD_VAR 0 11
42594: PPUSH
42595: CALL_OW 272
42599: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
42600: LD_ADDR_VAR 0 8
42604: PUSH
42605: LD_VAR 0 2
42609: PPUSH
42610: LD_VAR 0 6
42614: PPUSH
42615: LD_VAR 0 11
42619: PPUSH
42620: CALL_OW 273
42624: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42625: LD_VAR 0 7
42629: PPUSH
42630: LD_VAR 0 8
42634: PPUSH
42635: CALL_OW 488
42639: NOT
42640: IFFALSE 42644
// continue ;
42642: GO 42572
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
42644: LD_ADDR_VAR 0 9
42648: PUSH
42649: LD_VAR 0 12
42653: PUSH
42654: LD_INT 1
42656: ARRAY
42657: PPUSH
42658: LD_VAR 0 12
42662: PUSH
42663: LD_INT 2
42665: ARRAY
42666: PPUSH
42667: LD_VAR 0 7
42671: PPUSH
42672: LD_VAR 0 8
42676: PPUSH
42677: CALL_OW 298
42681: ST_TO_ADDR
// if tmp < distance then
42682: LD_VAR 0 9
42686: PUSH
42687: LD_VAR 0 10
42691: LESS
42692: IFFALSE 42714
// begin result := i ;
42694: LD_ADDR_VAR 0 5
42698: PUSH
42699: LD_VAR 0 6
42703: ST_TO_ADDR
// distance := tmp ;
42704: LD_ADDR_VAR 0 10
42708: PUSH
42709: LD_VAR 0 9
42713: ST_TO_ADDR
// end ; end ;
42714: GO 42572
42716: POP
42717: POP
// end ;
42718: LD_VAR 0 5
42722: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42723: LD_INT 0
42725: PPUSH
42726: PPUSH
// if not driver or not IsInUnit ( driver ) then
42727: LD_VAR 0 1
42731: NOT
42732: IFTRUE 42746
42734: PUSH
42735: LD_VAR 0 1
42739: PPUSH
42740: CALL_OW 310
42744: NOT
42745: OR
42746: IFFALSE 42750
// exit ;
42748: GO 42840
// vehicle := IsInUnit ( driver ) ;
42750: LD_ADDR_VAR 0 3
42754: PUSH
42755: LD_VAR 0 1
42759: PPUSH
42760: CALL_OW 310
42764: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42765: LD_VAR 0 1
42769: PPUSH
42770: LD_STRING \
42772: PUSH
42773: LD_INT 0
42775: PUSH
42776: LD_INT 0
42778: PUSH
42779: LD_INT 0
42781: PUSH
42782: LD_INT 0
42784: PUSH
42785: LD_INT 0
42787: PUSH
42788: LD_INT 0
42790: PUSH
42791: EMPTY
42792: LIST
42793: LIST
42794: LIST
42795: LIST
42796: LIST
42797: LIST
42798: LIST
42799: PUSH
42800: LD_STRING E
42802: PUSH
42803: LD_INT 0
42805: PUSH
42806: LD_INT 0
42808: PUSH
42809: LD_VAR 0 3
42813: PUSH
42814: LD_INT 0
42816: PUSH
42817: LD_INT 0
42819: PUSH
42820: LD_INT 0
42822: PUSH
42823: EMPTY
42824: LIST
42825: LIST
42826: LIST
42827: LIST
42828: LIST
42829: LIST
42830: LIST
42831: PUSH
42832: EMPTY
42833: LIST
42834: LIST
42835: PPUSH
42836: CALL_OW 446
// end ;
42840: LD_VAR 0 2
42844: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42845: LD_INT 0
42847: PPUSH
42848: PPUSH
// if not driver or not IsInUnit ( driver ) then
42849: LD_VAR 0 1
42853: NOT
42854: IFTRUE 42868
42856: PUSH
42857: LD_VAR 0 1
42861: PPUSH
42862: CALL_OW 310
42866: NOT
42867: OR
42868: IFFALSE 42872
// exit ;
42870: GO 42962
// vehicle := IsInUnit ( driver ) ;
42872: LD_ADDR_VAR 0 3
42876: PUSH
42877: LD_VAR 0 1
42881: PPUSH
42882: CALL_OW 310
42886: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42887: LD_VAR 0 1
42891: PPUSH
42892: LD_STRING \
42894: PUSH
42895: LD_INT 0
42897: PUSH
42898: LD_INT 0
42900: PUSH
42901: LD_INT 0
42903: PUSH
42904: LD_INT 0
42906: PUSH
42907: LD_INT 0
42909: PUSH
42910: LD_INT 0
42912: PUSH
42913: EMPTY
42914: LIST
42915: LIST
42916: LIST
42917: LIST
42918: LIST
42919: LIST
42920: LIST
42921: PUSH
42922: LD_STRING E
42924: PUSH
42925: LD_INT 0
42927: PUSH
42928: LD_INT 0
42930: PUSH
42931: LD_VAR 0 3
42935: PUSH
42936: LD_INT 0
42938: PUSH
42939: LD_INT 0
42941: PUSH
42942: LD_INT 0
42944: PUSH
42945: EMPTY
42946: LIST
42947: LIST
42948: LIST
42949: LIST
42950: LIST
42951: LIST
42952: LIST
42953: PUSH
42954: EMPTY
42955: LIST
42956: LIST
42957: PPUSH
42958: CALL_OW 447
// end ;
42962: LD_VAR 0 2
42966: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
42967: LD_INT 0
42969: PPUSH
42970: PPUSH
42971: PPUSH
// tmp := [ ] ;
42972: LD_ADDR_VAR 0 5
42976: PUSH
42977: EMPTY
42978: ST_TO_ADDR
// for i in units do
42979: LD_ADDR_VAR 0 4
42983: PUSH
42984: LD_VAR 0 1
42988: PUSH
42989: FOR_IN
42990: IFFALSE 43028
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
42992: LD_ADDR_VAR 0 5
42996: PUSH
42997: LD_VAR 0 5
43001: PPUSH
43002: LD_VAR 0 5
43006: PUSH
43007: LD_INT 1
43009: PLUS
43010: PPUSH
43011: LD_VAR 0 4
43015: PPUSH
43016: CALL_OW 256
43020: PPUSH
43021: CALL_OW 2
43025: ST_TO_ADDR
43026: GO 42989
43028: POP
43029: POP
// if not tmp then
43030: LD_VAR 0 5
43034: NOT
43035: IFFALSE 43039
// exit ;
43037: GO 43087
// if asc then
43039: LD_VAR 0 2
43043: IFFALSE 43067
// result := SortListByListAsc ( units , tmp ) else
43045: LD_ADDR_VAR 0 3
43049: PUSH
43050: LD_VAR 0 1
43054: PPUSH
43055: LD_VAR 0 5
43059: PPUSH
43060: CALL_OW 76
43064: ST_TO_ADDR
43065: GO 43087
// result := SortListByListDesc ( units , tmp ) ;
43067: LD_ADDR_VAR 0 3
43071: PUSH
43072: LD_VAR 0 1
43076: PPUSH
43077: LD_VAR 0 5
43081: PPUSH
43082: CALL_OW 77
43086: ST_TO_ADDR
// end ;
43087: LD_VAR 0 3
43091: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
43092: LD_INT 0
43094: PPUSH
43095: PPUSH
// task := GetTaskList ( mech ) ;
43096: LD_ADDR_VAR 0 4
43100: PUSH
43101: LD_VAR 0 1
43105: PPUSH
43106: CALL_OW 437
43110: ST_TO_ADDR
// if not task then
43111: LD_VAR 0 4
43115: NOT
43116: IFFALSE 43120
// exit ;
43118: GO 43164
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
43120: LD_ADDR_VAR 0 3
43124: PUSH
43125: LD_VAR 0 4
43129: PUSH
43130: LD_INT 1
43132: ARRAY
43133: PUSH
43134: LD_INT 1
43136: ARRAY
43137: PUSH
43138: LD_STRING r
43140: EQUAL
43141: IFFALSE 43163
43143: PUSH
43144: LD_VAR 0 4
43148: PUSH
43149: LD_INT 1
43151: ARRAY
43152: PUSH
43153: LD_INT 4
43155: ARRAY
43156: PUSH
43157: LD_VAR 0 2
43161: EQUAL
43162: AND
43163: ST_TO_ADDR
// end ;
43164: LD_VAR 0 3
43168: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
43169: LD_INT 0
43171: PPUSH
// SetDir ( unit , d ) ;
43172: LD_VAR 0 1
43176: PPUSH
43177: LD_VAR 0 4
43181: PPUSH
43182: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
43186: LD_ADDR_VAR 0 6
43190: PUSH
43191: LD_VAR 0 1
43195: PPUSH
43196: LD_VAR 0 2
43200: PPUSH
43201: LD_VAR 0 3
43205: PPUSH
43206: LD_VAR 0 5
43210: PPUSH
43211: CALL_OW 48
43215: ST_TO_ADDR
// end ;
43216: LD_VAR 0 6
43220: RET
// export function ToNaturalNumber ( number ) ; begin
43221: LD_INT 0
43223: PPUSH
// result := number div 1 ;
43224: LD_ADDR_VAR 0 2
43228: PUSH
43229: LD_VAR 0 1
43233: PUSH
43234: LD_INT 1
43236: DIV
43237: ST_TO_ADDR
// if number < 0 then
43238: LD_VAR 0 1
43242: PUSH
43243: LD_INT 0
43245: LESS
43246: IFFALSE 43256
// result := 0 ;
43248: LD_ADDR_VAR 0 2
43252: PUSH
43253: LD_INT 0
43255: ST_TO_ADDR
// end ;
43256: LD_VAR 0 2
43260: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
43261: LD_INT 0
43263: PPUSH
43264: PPUSH
43265: PPUSH
// if not buildings then
43266: LD_VAR 0 1
43270: NOT
43271: IFFALSE 43275
// exit ;
43273: GO 43390
// tmp := [ ] ;
43275: LD_ADDR_VAR 0 5
43279: PUSH
43280: EMPTY
43281: ST_TO_ADDR
// for b in buildings do
43282: LD_ADDR_VAR 0 4
43286: PUSH
43287: LD_VAR 0 1
43291: PUSH
43292: FOR_IN
43293: IFFALSE 43331
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
43295: LD_ADDR_VAR 0 5
43299: PUSH
43300: LD_VAR 0 5
43304: PPUSH
43305: LD_VAR 0 5
43309: PUSH
43310: LD_INT 1
43312: PLUS
43313: PPUSH
43314: LD_VAR 0 4
43318: PPUSH
43319: CALL_OW 266
43323: PPUSH
43324: CALL_OW 1
43328: ST_TO_ADDR
43329: GO 43292
43331: POP
43332: POP
// if not tmp then
43333: LD_VAR 0 5
43337: NOT
43338: IFFALSE 43342
// exit ;
43340: GO 43390
// if asc then
43342: LD_VAR 0 2
43346: IFFALSE 43370
// result := SortListByListAsc ( buildings , tmp ) else
43348: LD_ADDR_VAR 0 3
43352: PUSH
43353: LD_VAR 0 1
43357: PPUSH
43358: LD_VAR 0 5
43362: PPUSH
43363: CALL_OW 76
43367: ST_TO_ADDR
43368: GO 43390
// result := SortListByListDesc ( buildings , tmp ) ;
43370: LD_ADDR_VAR 0 3
43374: PUSH
43375: LD_VAR 0 1
43379: PPUSH
43380: LD_VAR 0 5
43384: PPUSH
43385: CALL_OW 77
43389: ST_TO_ADDR
// end ;
43390: LD_VAR 0 3
43394: RET
// export function SortByClass ( units , class ) ; var un ; begin
43395: LD_INT 0
43397: PPUSH
43398: PPUSH
// if not units or not class then
43399: LD_VAR 0 1
43403: NOT
43404: IFTRUE 43413
43406: PUSH
43407: LD_VAR 0 2
43411: NOT
43412: OR
43413: IFFALSE 43417
// exit ;
43415: GO 43512
// result := [ ] ;
43417: LD_ADDR_VAR 0 3
43421: PUSH
43422: EMPTY
43423: ST_TO_ADDR
// for un in units do
43424: LD_ADDR_VAR 0 4
43428: PUSH
43429: LD_VAR 0 1
43433: PUSH
43434: FOR_IN
43435: IFFALSE 43510
// if GetClass ( un ) = class then
43437: LD_VAR 0 4
43441: PPUSH
43442: CALL_OW 257
43446: PUSH
43447: LD_VAR 0 2
43451: EQUAL
43452: IFFALSE 43479
// result := Insert ( result , 1 , un ) else
43454: LD_ADDR_VAR 0 3
43458: PUSH
43459: LD_VAR 0 3
43463: PPUSH
43464: LD_INT 1
43466: PPUSH
43467: LD_VAR 0 4
43471: PPUSH
43472: CALL_OW 2
43476: ST_TO_ADDR
43477: GO 43508
// result := Replace ( result , result + 1 , un ) ;
43479: LD_ADDR_VAR 0 3
43483: PUSH
43484: LD_VAR 0 3
43488: PPUSH
43489: LD_VAR 0 3
43493: PUSH
43494: LD_INT 1
43496: PLUS
43497: PPUSH
43498: LD_VAR 0 4
43502: PPUSH
43503: CALL_OW 1
43507: ST_TO_ADDR
43508: GO 43434
43510: POP
43511: POP
// end ;
43512: LD_VAR 0 3
43516: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
43517: LD_INT 0
43519: PPUSH
43520: PPUSH
43521: PPUSH
43522: PPUSH
43523: PPUSH
43524: PPUSH
43525: PPUSH
// result := [ ] ;
43526: LD_ADDR_VAR 0 4
43530: PUSH
43531: EMPTY
43532: ST_TO_ADDR
// if x - r < 0 then
43533: LD_VAR 0 1
43537: PUSH
43538: LD_VAR 0 3
43542: MINUS
43543: PUSH
43544: LD_INT 0
43546: LESS
43547: IFFALSE 43559
// min_x := 0 else
43549: LD_ADDR_VAR 0 8
43553: PUSH
43554: LD_INT 0
43556: ST_TO_ADDR
43557: GO 43575
// min_x := x - r ;
43559: LD_ADDR_VAR 0 8
43563: PUSH
43564: LD_VAR 0 1
43568: PUSH
43569: LD_VAR 0 3
43573: MINUS
43574: ST_TO_ADDR
// if y - r < 0 then
43575: LD_VAR 0 2
43579: PUSH
43580: LD_VAR 0 3
43584: MINUS
43585: PUSH
43586: LD_INT 0
43588: LESS
43589: IFFALSE 43601
// min_y := 0 else
43591: LD_ADDR_VAR 0 7
43595: PUSH
43596: LD_INT 0
43598: ST_TO_ADDR
43599: GO 43617
// min_y := y - r ;
43601: LD_ADDR_VAR 0 7
43605: PUSH
43606: LD_VAR 0 2
43610: PUSH
43611: LD_VAR 0 3
43615: MINUS
43616: ST_TO_ADDR
// max_x := x + r ;
43617: LD_ADDR_VAR 0 9
43621: PUSH
43622: LD_VAR 0 1
43626: PUSH
43627: LD_VAR 0 3
43631: PLUS
43632: ST_TO_ADDR
// max_y := y + r ;
43633: LD_ADDR_VAR 0 10
43637: PUSH
43638: LD_VAR 0 2
43642: PUSH
43643: LD_VAR 0 3
43647: PLUS
43648: ST_TO_ADDR
// for _x = min_x to max_x do
43649: LD_ADDR_VAR 0 5
43653: PUSH
43654: DOUBLE
43655: LD_VAR 0 8
43659: DEC
43660: ST_TO_ADDR
43661: LD_VAR 0 9
43665: PUSH
43666: FOR_TO
43667: IFFALSE 43768
// for _y = min_y to max_y do
43669: LD_ADDR_VAR 0 6
43673: PUSH
43674: DOUBLE
43675: LD_VAR 0 7
43679: DEC
43680: ST_TO_ADDR
43681: LD_VAR 0 10
43685: PUSH
43686: FOR_TO
43687: IFFALSE 43764
// begin if not ValidHex ( _x , _y ) then
43689: LD_VAR 0 5
43693: PPUSH
43694: LD_VAR 0 6
43698: PPUSH
43699: CALL_OW 488
43703: NOT
43704: IFFALSE 43708
// continue ;
43706: GO 43686
// if GetResourceTypeXY ( _x , _y ) then
43708: LD_VAR 0 5
43712: PPUSH
43713: LD_VAR 0 6
43717: PPUSH
43718: CALL_OW 283
43722: IFFALSE 43762
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
43724: LD_ADDR_VAR 0 4
43728: PUSH
43729: LD_VAR 0 4
43733: PPUSH
43734: LD_VAR 0 4
43738: PUSH
43739: LD_INT 1
43741: PLUS
43742: PPUSH
43743: LD_VAR 0 5
43747: PUSH
43748: LD_VAR 0 6
43752: PUSH
43753: EMPTY
43754: LIST
43755: LIST
43756: PPUSH
43757: CALL_OW 1
43761: ST_TO_ADDR
// end ;
43762: GO 43686
43764: POP
43765: POP
43766: GO 43666
43768: POP
43769: POP
// end ;
43770: LD_VAR 0 4
43774: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
43775: LD_INT 0
43777: PPUSH
43778: PPUSH
43779: PPUSH
43780: PPUSH
43781: PPUSH
43782: PPUSH
43783: PPUSH
43784: PPUSH
// if not units then
43785: LD_VAR 0 1
43789: NOT
43790: IFFALSE 43794
// exit ;
43792: GO 44326
// result := UnitFilter ( units , [ f_ok ] ) ;
43794: LD_ADDR_VAR 0 3
43798: PUSH
43799: LD_VAR 0 1
43803: PPUSH
43804: LD_INT 50
43806: PUSH
43807: EMPTY
43808: LIST
43809: PPUSH
43810: CALL_OW 72
43814: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
43815: LD_ADDR_VAR 0 8
43819: PUSH
43820: LD_VAR 0 1
43824: PUSH
43825: LD_INT 1
43827: ARRAY
43828: PPUSH
43829: CALL_OW 255
43833: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
43834: LD_ADDR_VAR 0 10
43838: PUSH
43839: LD_INT 29
43841: PUSH
43842: LD_INT 91
43844: PUSH
43845: LD_INT 49
43847: PUSH
43848: EMPTY
43849: LIST
43850: LIST
43851: LIST
43852: ST_TO_ADDR
// if not result then
43853: LD_VAR 0 3
43857: NOT
43858: IFFALSE 43862
// exit ;
43860: GO 44326
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
43862: LD_ADDR_VAR 0 5
43866: PUSH
43867: LD_INT 81
43869: PUSH
43870: LD_VAR 0 8
43874: PUSH
43875: EMPTY
43876: LIST
43877: LIST
43878: PPUSH
43879: CALL_OW 69
43883: ST_TO_ADDR
// for i in result do
43884: LD_ADDR_VAR 0 4
43888: PUSH
43889: LD_VAR 0 3
43893: PUSH
43894: FOR_IN
43895: IFFALSE 44324
// begin tag := GetTag ( i ) + 1 ;
43897: LD_ADDR_VAR 0 9
43901: PUSH
43902: LD_VAR 0 4
43906: PPUSH
43907: CALL_OW 110
43911: PUSH
43912: LD_INT 1
43914: PLUS
43915: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
43916: LD_ADDR_VAR 0 7
43920: PUSH
43921: LD_VAR 0 4
43925: PPUSH
43926: CALL_OW 250
43930: PPUSH
43931: LD_VAR 0 4
43935: PPUSH
43936: CALL_OW 251
43940: PPUSH
43941: LD_INT 4
43943: PPUSH
43944: CALL 43517 0 3
43948: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
43949: LD_VAR 0 4
43953: PPUSH
43954: CALL_OW 247
43958: PUSH
43959: LD_INT 2
43961: EQUAL
43962: IFFALSE 43974
43964: PUSH
43965: LD_VAR 0 7
43969: PUSH
43970: LD_INT 2
43972: GREATER
43973: AND
43974: IFFALSE 43994
43976: PUSH
43977: LD_VAR 0 4
43981: PPUSH
43982: CALL_OW 264
43986: PUSH
43987: LD_VAR 0 10
43991: IN
43992: NOT
43993: AND
43994: IFFALSE 44033
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
43996: LD_VAR 0 4
44000: PPUSH
44001: LD_VAR 0 7
44005: PUSH
44006: LD_INT 1
44008: ARRAY
44009: PUSH
44010: LD_INT 1
44012: ARRAY
44013: PPUSH
44014: LD_VAR 0 7
44018: PUSH
44019: LD_INT 1
44021: ARRAY
44022: PUSH
44023: LD_INT 2
44025: ARRAY
44026: PPUSH
44027: CALL_OW 116
44031: GO 44322
// if path > tag then
44033: LD_VAR 0 2
44037: PUSH
44038: LD_VAR 0 9
44042: GREATER
44043: IFFALSE 44251
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
44045: LD_ADDR_VAR 0 6
44049: PUSH
44050: LD_VAR 0 5
44054: PPUSH
44055: LD_INT 91
44057: PUSH
44058: LD_VAR 0 4
44062: PUSH
44063: LD_INT 8
44065: PUSH
44066: EMPTY
44067: LIST
44068: LIST
44069: LIST
44070: PPUSH
44071: CALL_OW 72
44075: ST_TO_ADDR
// if nearEnemy then
44076: LD_VAR 0 6
44080: IFFALSE 44149
// begin if GetWeapon ( i ) = ru_time_lapser then
44082: LD_VAR 0 4
44086: PPUSH
44087: CALL_OW 264
44091: PUSH
44092: LD_INT 49
44094: EQUAL
44095: IFFALSE 44123
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
44097: LD_VAR 0 4
44101: PPUSH
44102: LD_VAR 0 6
44106: PPUSH
44107: LD_VAR 0 4
44111: PPUSH
44112: CALL_OW 74
44116: PPUSH
44117: CALL_OW 112
44121: GO 44147
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
44123: LD_VAR 0 4
44127: PPUSH
44128: LD_VAR 0 6
44132: PPUSH
44133: LD_VAR 0 4
44137: PPUSH
44138: CALL_OW 74
44142: PPUSH
44143: CALL 45407 0 2
// end else
44147: GO 44249
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
44149: LD_VAR 0 4
44153: PPUSH
44154: LD_VAR 0 2
44158: PUSH
44159: LD_VAR 0 9
44163: ARRAY
44164: PUSH
44165: LD_INT 1
44167: ARRAY
44168: PPUSH
44169: LD_VAR 0 2
44173: PUSH
44174: LD_VAR 0 9
44178: ARRAY
44179: PUSH
44180: LD_INT 2
44182: ARRAY
44183: PPUSH
44184: CALL_OW 297
44188: PUSH
44189: LD_INT 6
44191: GREATER
44192: IFFALSE 44235
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
44194: LD_VAR 0 4
44198: PPUSH
44199: LD_VAR 0 2
44203: PUSH
44204: LD_VAR 0 9
44208: ARRAY
44209: PUSH
44210: LD_INT 1
44212: ARRAY
44213: PPUSH
44214: LD_VAR 0 2
44218: PUSH
44219: LD_VAR 0 9
44223: ARRAY
44224: PUSH
44225: LD_INT 2
44227: ARRAY
44228: PPUSH
44229: CALL_OW 114
44233: GO 44249
// SetTag ( i , tag ) ;
44235: LD_VAR 0 4
44239: PPUSH
44240: LD_VAR 0 9
44244: PPUSH
44245: CALL_OW 109
// end else
44249: GO 44322
// if enemy then
44251: LD_VAR 0 5
44255: IFFALSE 44322
// begin if GetWeapon ( i ) = ru_time_lapser then
44257: LD_VAR 0 4
44261: PPUSH
44262: CALL_OW 264
44266: PUSH
44267: LD_INT 49
44269: EQUAL
44270: IFFALSE 44298
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
44272: LD_VAR 0 4
44276: PPUSH
44277: LD_VAR 0 5
44281: PPUSH
44282: LD_VAR 0 4
44286: PPUSH
44287: CALL_OW 74
44291: PPUSH
44292: CALL_OW 112
44296: GO 44322
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
44298: LD_VAR 0 4
44302: PPUSH
44303: LD_VAR 0 5
44307: PPUSH
44308: LD_VAR 0 4
44312: PPUSH
44313: CALL_OW 74
44317: PPUSH
44318: CALL 45407 0 2
// end ; end ;
44322: GO 43894
44324: POP
44325: POP
// end ;
44326: LD_VAR 0 3
44330: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
44331: LD_INT 0
44333: PPUSH
44334: PPUSH
44335: PPUSH
// if not unit or IsInUnit ( unit ) then
44336: LD_VAR 0 1
44340: NOT
44341: IFTRUE 44354
44343: PUSH
44344: LD_VAR 0 1
44348: PPUSH
44349: CALL_OW 310
44353: OR
44354: IFFALSE 44358
// exit ;
44356: GO 44449
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
44358: LD_ADDR_VAR 0 4
44362: PUSH
44363: LD_VAR 0 1
44367: PPUSH
44368: CALL_OW 250
44372: PPUSH
44373: LD_VAR 0 2
44377: PPUSH
44378: LD_INT 1
44380: PPUSH
44381: CALL_OW 272
44385: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
44386: LD_ADDR_VAR 0 5
44390: PUSH
44391: LD_VAR 0 1
44395: PPUSH
44396: CALL_OW 251
44400: PPUSH
44401: LD_VAR 0 2
44405: PPUSH
44406: LD_INT 1
44408: PPUSH
44409: CALL_OW 273
44413: ST_TO_ADDR
// if ValidHex ( x , y ) then
44414: LD_VAR 0 4
44418: PPUSH
44419: LD_VAR 0 5
44423: PPUSH
44424: CALL_OW 488
44428: IFFALSE 44449
// ComTurnXY ( unit , x , y ) ;
44430: LD_VAR 0 1
44434: PPUSH
44435: LD_VAR 0 4
44439: PPUSH
44440: LD_VAR 0 5
44444: PPUSH
44445: CALL_OW 118
// end ;
44449: LD_VAR 0 3
44453: RET
// export function SeeUnits ( side , units ) ; var i ; begin
44454: LD_INT 0
44456: PPUSH
44457: PPUSH
// result := false ;
44458: LD_ADDR_VAR 0 3
44462: PUSH
44463: LD_INT 0
44465: ST_TO_ADDR
// if not units then
44466: LD_VAR 0 2
44470: NOT
44471: IFFALSE 44475
// exit ;
44473: GO 44520
// for i in units do
44475: LD_ADDR_VAR 0 4
44479: PUSH
44480: LD_VAR 0 2
44484: PUSH
44485: FOR_IN
44486: IFFALSE 44518
// if See ( side , i ) then
44488: LD_VAR 0 1
44492: PPUSH
44493: LD_VAR 0 4
44497: PPUSH
44498: CALL_OW 292
44502: IFFALSE 44516
// begin result := true ;
44504: LD_ADDR_VAR 0 3
44508: PUSH
44509: LD_INT 1
44511: ST_TO_ADDR
// exit ;
44512: POP
44513: POP
44514: GO 44520
// end ;
44516: GO 44485
44518: POP
44519: POP
// end ;
44520: LD_VAR 0 3
44524: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
44525: LD_INT 0
44527: PPUSH
44528: PPUSH
44529: PPUSH
44530: PPUSH
// if not unit or not points then
44531: LD_VAR 0 1
44535: NOT
44536: IFTRUE 44545
44538: PUSH
44539: LD_VAR 0 2
44543: NOT
44544: OR
44545: IFFALSE 44549
// exit ;
44547: GO 44639
// dist := 99999 ;
44549: LD_ADDR_VAR 0 5
44553: PUSH
44554: LD_INT 99999
44556: ST_TO_ADDR
// for i in points do
44557: LD_ADDR_VAR 0 4
44561: PUSH
44562: LD_VAR 0 2
44566: PUSH
44567: FOR_IN
44568: IFFALSE 44637
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
44570: LD_ADDR_VAR 0 6
44574: PUSH
44575: LD_VAR 0 1
44579: PPUSH
44580: LD_VAR 0 4
44584: PUSH
44585: LD_INT 1
44587: ARRAY
44588: PPUSH
44589: LD_VAR 0 4
44593: PUSH
44594: LD_INT 2
44596: ARRAY
44597: PPUSH
44598: CALL_OW 297
44602: ST_TO_ADDR
// if tmpDist < dist then
44603: LD_VAR 0 6
44607: PUSH
44608: LD_VAR 0 5
44612: LESS
44613: IFFALSE 44635
// begin result := i ;
44615: LD_ADDR_VAR 0 3
44619: PUSH
44620: LD_VAR 0 4
44624: ST_TO_ADDR
// dist := tmpDist ;
44625: LD_ADDR_VAR 0 5
44629: PUSH
44630: LD_VAR 0 6
44634: ST_TO_ADDR
// end ; end ;
44635: GO 44567
44637: POP
44638: POP
// end ;
44639: LD_VAR 0 3
44643: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
44644: LD_INT 0
44646: PPUSH
// uc_side := side ;
44647: LD_ADDR_OWVAR 20
44651: PUSH
44652: LD_VAR 0 1
44656: ST_TO_ADDR
// uc_nation := 3 ;
44657: LD_ADDR_OWVAR 21
44661: PUSH
44662: LD_INT 3
44664: ST_TO_ADDR
// vc_chassis := 25 ;
44665: LD_ADDR_OWVAR 37
44669: PUSH
44670: LD_INT 25
44672: ST_TO_ADDR
// vc_engine := engine_siberite ;
44673: LD_ADDR_OWVAR 39
44677: PUSH
44678: LD_INT 3
44680: ST_TO_ADDR
// vc_control := control_computer ;
44681: LD_ADDR_OWVAR 38
44685: PUSH
44686: LD_INT 3
44688: ST_TO_ADDR
// vc_weapon := 59 ;
44689: LD_ADDR_OWVAR 40
44693: PUSH
44694: LD_INT 59
44696: ST_TO_ADDR
// result := CreateVehicle ;
44697: LD_ADDR_VAR 0 5
44701: PUSH
44702: CALL_OW 45
44706: ST_TO_ADDR
// SetDir ( result , d ) ;
44707: LD_VAR 0 5
44711: PPUSH
44712: LD_VAR 0 4
44716: PPUSH
44717: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
44721: LD_VAR 0 5
44725: PPUSH
44726: LD_VAR 0 2
44730: PPUSH
44731: LD_VAR 0 3
44735: PPUSH
44736: LD_INT 0
44738: PPUSH
44739: CALL_OW 48
// end ;
44743: LD_VAR 0 5
44747: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
44748: LD_INT 0
44750: PPUSH
44751: PPUSH
44752: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
44753: LD_ADDR_VAR 0 2
44757: PUSH
44758: LD_INT 0
44760: PUSH
44761: LD_INT 0
44763: PUSH
44764: LD_INT 0
44766: PUSH
44767: LD_INT 0
44769: PUSH
44770: EMPTY
44771: LIST
44772: LIST
44773: LIST
44774: LIST
44775: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
44776: LD_VAR 0 1
44780: NOT
44781: IFTRUE 44814
44783: PUSH
44784: LD_VAR 0 1
44788: PPUSH
44789: CALL_OW 264
44793: PUSH
44794: LD_INT 12
44796: PUSH
44797: LD_INT 51
44799: PUSH
44800: LD_INT 32
44802: PUSH
44803: LD_INT 89
44805: PUSH
44806: EMPTY
44807: LIST
44808: LIST
44809: LIST
44810: LIST
44811: IN
44812: NOT
44813: OR
44814: IFFALSE 44818
// exit ;
44816: GO 44916
// for i := 1 to 3 do
44818: LD_ADDR_VAR 0 3
44822: PUSH
44823: DOUBLE
44824: LD_INT 1
44826: DEC
44827: ST_TO_ADDR
44828: LD_INT 3
44830: PUSH
44831: FOR_TO
44832: IFFALSE 44914
// begin tmp := GetCargo ( cargo , i ) ;
44834: LD_ADDR_VAR 0 4
44838: PUSH
44839: LD_VAR 0 1
44843: PPUSH
44844: LD_VAR 0 3
44848: PPUSH
44849: CALL_OW 289
44853: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
44854: LD_ADDR_VAR 0 2
44858: PUSH
44859: LD_VAR 0 2
44863: PPUSH
44864: LD_VAR 0 3
44868: PPUSH
44869: LD_VAR 0 4
44873: PPUSH
44874: CALL_OW 1
44878: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
44879: LD_ADDR_VAR 0 2
44883: PUSH
44884: LD_VAR 0 2
44888: PPUSH
44889: LD_INT 4
44891: PPUSH
44892: LD_VAR 0 2
44896: PUSH
44897: LD_INT 4
44899: ARRAY
44900: PUSH
44901: LD_VAR 0 4
44905: PLUS
44906: PPUSH
44907: CALL_OW 1
44911: ST_TO_ADDR
// end ;
44912: GO 44831
44914: POP
44915: POP
// end ;
44916: LD_VAR 0 2
44920: RET
// export function Length ( array ) ; begin
44921: LD_INT 0
44923: PPUSH
// result := array + 0 ;
44924: LD_ADDR_VAR 0 2
44928: PUSH
44929: LD_VAR 0 1
44933: PUSH
44934: LD_INT 0
44936: PLUS
44937: ST_TO_ADDR
// end ;
44938: LD_VAR 0 2
44942: RET
// export function PrepareArray ( array ) ; begin
44943: LD_INT 0
44945: PPUSH
// result := array diff 0 ;
44946: LD_ADDR_VAR 0 2
44950: PUSH
44951: LD_VAR 0 1
44955: PUSH
44956: LD_INT 0
44958: DIFF
44959: ST_TO_ADDR
// if not result [ 1 ] then
44960: LD_VAR 0 2
44964: PUSH
44965: LD_INT 1
44967: ARRAY
44968: NOT
44969: IFFALSE 44989
// result := Delete ( result , 1 ) ;
44971: LD_ADDR_VAR 0 2
44975: PUSH
44976: LD_VAR 0 2
44980: PPUSH
44981: LD_INT 1
44983: PPUSH
44984: CALL_OW 3
44988: ST_TO_ADDR
// end ;
44989: LD_VAR 0 2
44993: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
44994: LD_INT 0
44996: PPUSH
44997: PPUSH
44998: PPUSH
44999: PPUSH
// sibRocketRange := 25 ;
45000: LD_ADDR_VAR 0 6
45004: PUSH
45005: LD_INT 25
45007: ST_TO_ADDR
// result := false ;
45008: LD_ADDR_VAR 0 4
45012: PUSH
45013: LD_INT 0
45015: ST_TO_ADDR
// for i := 0 to 5 do
45016: LD_ADDR_VAR 0 5
45020: PUSH
45021: DOUBLE
45022: LD_INT 0
45024: DEC
45025: ST_TO_ADDR
45026: LD_INT 5
45028: PUSH
45029: FOR_TO
45030: IFFALSE 45097
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
45032: LD_VAR 0 1
45036: PPUSH
45037: LD_VAR 0 5
45041: PPUSH
45042: LD_VAR 0 6
45046: PPUSH
45047: CALL_OW 272
45051: PPUSH
45052: LD_VAR 0 2
45056: PPUSH
45057: LD_VAR 0 5
45061: PPUSH
45062: LD_VAR 0 6
45066: PPUSH
45067: CALL_OW 273
45071: PPUSH
45072: LD_VAR 0 3
45076: PPUSH
45077: CALL_OW 309
45081: IFFALSE 45095
// begin result := true ;
45083: LD_ADDR_VAR 0 4
45087: PUSH
45088: LD_INT 1
45090: ST_TO_ADDR
// exit ;
45091: POP
45092: POP
45093: GO 45099
// end ;
45095: GO 45029
45097: POP
45098: POP
// end ;
45099: LD_VAR 0 4
45103: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
45104: LD_INT 0
45106: PPUSH
45107: PPUSH
45108: PPUSH
// if btype = b_depot then
45109: LD_VAR 0 2
45113: PUSH
45114: LD_INT 0
45116: EQUAL
45117: IFFALSE 45129
// begin result := true ;
45119: LD_ADDR_VAR 0 3
45123: PUSH
45124: LD_INT 1
45126: ST_TO_ADDR
// exit ;
45127: GO 45249
// end ; pom := GetBase ( depot ) ;
45129: LD_ADDR_VAR 0 4
45133: PUSH
45134: LD_VAR 0 1
45138: PPUSH
45139: CALL_OW 274
45143: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
45144: LD_ADDR_VAR 0 5
45148: PUSH
45149: LD_VAR 0 2
45153: PPUSH
45154: LD_VAR 0 1
45158: PPUSH
45159: CALL_OW 248
45163: PPUSH
45164: CALL_OW 450
45168: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
45169: LD_ADDR_VAR 0 3
45173: PUSH
45174: LD_VAR 0 4
45178: PPUSH
45179: LD_INT 1
45181: PPUSH
45182: CALL_OW 275
45186: PUSH
45187: LD_VAR 0 5
45191: PUSH
45192: LD_INT 1
45194: ARRAY
45195: GREATEREQUAL
45196: IFFALSE 45222
45198: PUSH
45199: LD_VAR 0 4
45203: PPUSH
45204: LD_INT 2
45206: PPUSH
45207: CALL_OW 275
45211: PUSH
45212: LD_VAR 0 5
45216: PUSH
45217: LD_INT 2
45219: ARRAY
45220: GREATEREQUAL
45221: AND
45222: IFFALSE 45248
45224: PUSH
45225: LD_VAR 0 4
45229: PPUSH
45230: LD_INT 3
45232: PPUSH
45233: CALL_OW 275
45237: PUSH
45238: LD_VAR 0 5
45242: PUSH
45243: LD_INT 3
45245: ARRAY
45246: GREATEREQUAL
45247: AND
45248: ST_TO_ADDR
// end ;
45249: LD_VAR 0 3
45253: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
45254: LD_INT 0
45256: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
45257: LD_VAR 0 1
45261: PPUSH
45262: LD_VAR 0 2
45266: PPUSH
45267: LD_INT 0
45269: PPUSH
45270: LD_INT 0
45272: PPUSH
45273: LD_INT 1
45275: PPUSH
45276: LD_INT 0
45278: PPUSH
45279: CALL_OW 587
// end ;
45283: LD_VAR 0 3
45287: RET
// export function CenterOnNow ( unit ) ; begin
45288: LD_INT 0
45290: PPUSH
// result := IsInUnit ( unit ) ;
45291: LD_ADDR_VAR 0 2
45295: PUSH
45296: LD_VAR 0 1
45300: PPUSH
45301: CALL_OW 310
45305: ST_TO_ADDR
// if not result then
45306: LD_VAR 0 2
45310: NOT
45311: IFFALSE 45323
// result := unit ;
45313: LD_ADDR_VAR 0 2
45317: PUSH
45318: LD_VAR 0 1
45322: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
45323: LD_VAR 0 1
45327: PPUSH
45328: CALL_OW 87
// end ;
45332: LD_VAR 0 2
45336: RET
// export function ComMoveHex ( unit , hex ) ; begin
45337: LD_INT 0
45339: PPUSH
// if not hex then
45340: LD_VAR 0 2
45344: NOT
45345: IFFALSE 45349
// exit ;
45347: GO 45402
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
45349: LD_VAR 0 2
45353: PUSH
45354: LD_INT 1
45356: ARRAY
45357: PPUSH
45358: LD_VAR 0 2
45362: PUSH
45363: LD_INT 2
45365: ARRAY
45366: PPUSH
45367: CALL_OW 428
45371: IFFALSE 45375
// exit ;
45373: GO 45402
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
45375: LD_VAR 0 1
45379: PPUSH
45380: LD_VAR 0 2
45384: PUSH
45385: LD_INT 1
45387: ARRAY
45388: PPUSH
45389: LD_VAR 0 2
45393: PUSH
45394: LD_INT 2
45396: ARRAY
45397: PPUSH
45398: CALL_OW 111
// end ;
45402: LD_VAR 0 3
45406: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
45407: LD_INT 0
45409: PPUSH
45410: PPUSH
45411: PPUSH
// if not unit or not enemy then
45412: LD_VAR 0 1
45416: NOT
45417: IFTRUE 45426
45419: PUSH
45420: LD_VAR 0 2
45424: NOT
45425: OR
45426: IFFALSE 45430
// exit ;
45428: GO 45556
// x := GetX ( enemy ) ;
45430: LD_ADDR_VAR 0 4
45434: PUSH
45435: LD_VAR 0 2
45439: PPUSH
45440: CALL_OW 250
45444: ST_TO_ADDR
// y := GetY ( enemy ) ;
45445: LD_ADDR_VAR 0 5
45449: PUSH
45450: LD_VAR 0 2
45454: PPUSH
45455: CALL_OW 251
45459: ST_TO_ADDR
// if ValidHex ( x , y ) then
45460: LD_VAR 0 4
45464: PPUSH
45465: LD_VAR 0 5
45469: PPUSH
45470: CALL_OW 488
45474: IFFALSE 45556
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
45476: LD_VAR 0 2
45480: PPUSH
45481: CALL_OW 247
45485: PUSH
45486: LD_INT 3
45488: PUSH
45489: LD_INT 2
45491: PUSH
45492: EMPTY
45493: LIST
45494: LIST
45495: IN
45496: IFTRUE 45519
45498: PUSH
45499: LD_VAR 0 1
45503: PPUSH
45504: CALL_OW 255
45508: PPUSH
45509: LD_VAR 0 2
45513: PPUSH
45514: CALL_OW 292
45518: OR
45519: IFFALSE 45537
// ComAttackUnit ( unit , enemy ) else
45521: LD_VAR 0 1
45525: PPUSH
45526: LD_VAR 0 2
45530: PPUSH
45531: CALL_OW 115
45535: GO 45556
// ComAgressiveMove ( unit , x , y ) ;
45537: LD_VAR 0 1
45541: PPUSH
45542: LD_VAR 0 4
45546: PPUSH
45547: LD_VAR 0 5
45551: PPUSH
45552: CALL_OW 114
// end ;
45556: LD_VAR 0 3
45560: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
45561: LD_INT 0
45563: PPUSH
45564: PPUSH
45565: PPUSH
// list := AreaToList ( area , 0 ) ;
45566: LD_ADDR_VAR 0 5
45570: PUSH
45571: LD_VAR 0 1
45575: PPUSH
45576: LD_INT 0
45578: PPUSH
45579: CALL_OW 517
45583: ST_TO_ADDR
// if not list then
45584: LD_VAR 0 5
45588: NOT
45589: IFFALSE 45593
// exit ;
45591: GO 45723
// if all then
45593: LD_VAR 0 2
45597: IFFALSE 45685
// begin for i := 1 to list [ 1 ] do
45599: LD_ADDR_VAR 0 4
45603: PUSH
45604: DOUBLE
45605: LD_INT 1
45607: DEC
45608: ST_TO_ADDR
45609: LD_VAR 0 5
45613: PUSH
45614: LD_INT 1
45616: ARRAY
45617: PUSH
45618: FOR_TO
45619: IFFALSE 45681
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
45621: LD_ADDR_VAR 0 3
45625: PUSH
45626: LD_VAR 0 3
45630: PPUSH
45631: LD_VAR 0 3
45635: PUSH
45636: LD_INT 1
45638: PLUS
45639: PPUSH
45640: LD_VAR 0 5
45644: PUSH
45645: LD_INT 1
45647: ARRAY
45648: PUSH
45649: LD_VAR 0 4
45653: ARRAY
45654: PUSH
45655: LD_VAR 0 5
45659: PUSH
45660: LD_INT 2
45662: ARRAY
45663: PUSH
45664: LD_VAR 0 4
45668: ARRAY
45669: PUSH
45670: EMPTY
45671: LIST
45672: LIST
45673: PPUSH
45674: CALL_OW 1
45678: ST_TO_ADDR
45679: GO 45618
45681: POP
45682: POP
// exit ;
45683: GO 45723
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
45685: LD_ADDR_VAR 0 3
45689: PUSH
45690: LD_VAR 0 5
45694: PUSH
45695: LD_INT 1
45697: ARRAY
45698: PUSH
45699: LD_INT 1
45701: ARRAY
45702: PUSH
45703: LD_VAR 0 5
45707: PUSH
45708: LD_INT 2
45710: ARRAY
45711: PUSH
45712: LD_INT 1
45714: ARRAY
45715: PUSH
45716: EMPTY
45717: LIST
45718: LIST
45719: PUSH
45720: EMPTY
45721: LIST
45722: ST_TO_ADDR
// end ;
45723: LD_VAR 0 3
45727: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
45728: LD_INT 0
45730: PPUSH
45731: PPUSH
// list := AreaToList ( area , 0 ) ;
45732: LD_ADDR_VAR 0 4
45736: PUSH
45737: LD_VAR 0 1
45741: PPUSH
45742: LD_INT 0
45744: PPUSH
45745: CALL_OW 517
45749: ST_TO_ADDR
// if not list then
45750: LD_VAR 0 4
45754: NOT
45755: IFFALSE 45759
// exit ;
45757: GO 45800
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
45759: LD_ADDR_VAR 0 3
45763: PUSH
45764: LD_VAR 0 4
45768: PUSH
45769: LD_INT 1
45771: ARRAY
45772: PUSH
45773: LD_INT 1
45775: ARRAY
45776: PUSH
45777: LD_VAR 0 4
45781: PUSH
45782: LD_INT 2
45784: ARRAY
45785: PUSH
45786: LD_INT 1
45788: ARRAY
45789: PUSH
45790: LD_VAR 0 2
45794: PUSH
45795: EMPTY
45796: LIST
45797: LIST
45798: LIST
45799: ST_TO_ADDR
// end ;
45800: LD_VAR 0 3
45804: RET
// export function First ( array ) ; begin
45805: LD_INT 0
45807: PPUSH
// if not array then
45808: LD_VAR 0 1
45812: NOT
45813: IFFALSE 45817
// exit ;
45815: GO 45831
// result := array [ 1 ] ;
45817: LD_ADDR_VAR 0 2
45821: PUSH
45822: LD_VAR 0 1
45826: PUSH
45827: LD_INT 1
45829: ARRAY
45830: ST_TO_ADDR
// end ;
45831: LD_VAR 0 2
45835: RET
// export function Last ( array ) ; begin
45836: LD_INT 0
45838: PPUSH
// if not array then
45839: LD_VAR 0 1
45843: NOT
45844: IFFALSE 45848
// exit ;
45846: GO 45864
// result := array [ array ] ;
45848: LD_ADDR_VAR 0 2
45852: PUSH
45853: LD_VAR 0 1
45857: PUSH
45858: LD_VAR 0 1
45862: ARRAY
45863: ST_TO_ADDR
// end ;
45864: LD_VAR 0 2
45868: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
45869: LD_INT 0
45871: PPUSH
45872: PPUSH
// result := [ ] ;
45873: LD_ADDR_VAR 0 5
45877: PUSH
45878: EMPTY
45879: ST_TO_ADDR
// if not array then
45880: LD_VAR 0 1
45884: NOT
45885: IFFALSE 45889
// exit ;
45887: GO 46001
// for i := 1 to array do
45889: LD_ADDR_VAR 0 6
45893: PUSH
45894: DOUBLE
45895: LD_INT 1
45897: DEC
45898: ST_TO_ADDR
45899: LD_VAR 0 1
45903: PUSH
45904: FOR_TO
45905: IFFALSE 45999
// if array [ i ] [ index ] = value then
45907: LD_VAR 0 1
45911: PUSH
45912: LD_VAR 0 6
45916: ARRAY
45917: PUSH
45918: LD_VAR 0 2
45922: ARRAY
45923: PUSH
45924: LD_VAR 0 3
45928: EQUAL
45929: IFFALSE 45997
// begin if indexColumn then
45931: LD_VAR 0 4
45935: IFFALSE 45971
// result := Join ( result , array [ i ] [ indexColumn ] ) else
45937: LD_ADDR_VAR 0 5
45941: PUSH
45942: LD_VAR 0 5
45946: PPUSH
45947: LD_VAR 0 1
45951: PUSH
45952: LD_VAR 0 6
45956: ARRAY
45957: PUSH
45958: LD_VAR 0 4
45962: ARRAY
45963: PPUSH
45964: CALL 41009 0 2
45968: ST_TO_ADDR
45969: GO 45997
// result := Join ( result , array [ i ] ) ;
45971: LD_ADDR_VAR 0 5
45975: PUSH
45976: LD_VAR 0 5
45980: PPUSH
45981: LD_VAR 0 1
45985: PUSH
45986: LD_VAR 0 6
45990: ARRAY
45991: PPUSH
45992: CALL 41009 0 2
45996: ST_TO_ADDR
// end ;
45997: GO 45904
45999: POP
46000: POP
// end ;
46001: LD_VAR 0 5
46005: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
46006: LD_INT 0
46008: PPUSH
// if not vehicles or not parkingPoint then
46009: LD_VAR 0 1
46013: NOT
46014: IFTRUE 46023
46016: PUSH
46017: LD_VAR 0 2
46021: NOT
46022: OR
46023: IFFALSE 46027
// exit ;
46025: GO 46125
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
46027: LD_ADDR_VAR 0 1
46031: PUSH
46032: LD_VAR 0 1
46036: PPUSH
46037: LD_INT 50
46039: PUSH
46040: EMPTY
46041: LIST
46042: PUSH
46043: LD_INT 3
46045: PUSH
46046: LD_INT 92
46048: PUSH
46049: LD_VAR 0 2
46053: PUSH
46054: LD_INT 1
46056: ARRAY
46057: PUSH
46058: LD_VAR 0 2
46062: PUSH
46063: LD_INT 2
46065: ARRAY
46066: PUSH
46067: LD_INT 8
46069: PUSH
46070: EMPTY
46071: LIST
46072: LIST
46073: LIST
46074: LIST
46075: PUSH
46076: EMPTY
46077: LIST
46078: LIST
46079: PUSH
46080: EMPTY
46081: LIST
46082: LIST
46083: PPUSH
46084: CALL_OW 72
46088: ST_TO_ADDR
// if not vehicles then
46089: LD_VAR 0 1
46093: NOT
46094: IFFALSE 46098
// exit ;
46096: GO 46125
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
46098: LD_VAR 0 1
46102: PPUSH
46103: LD_VAR 0 2
46107: PUSH
46108: LD_INT 1
46110: ARRAY
46111: PPUSH
46112: LD_VAR 0 2
46116: PUSH
46117: LD_INT 2
46119: ARRAY
46120: PPUSH
46121: CALL_OW 111
// end ;
46125: LD_VAR 0 3
46129: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
46130: LD_INT 0
46132: PPUSH
46133: PPUSH
46134: PPUSH
// if not side or not area then
46135: LD_VAR 0 1
46139: NOT
46140: IFTRUE 46149
46142: PUSH
46143: LD_VAR 0 2
46147: NOT
46148: OR
46149: IFFALSE 46153
// exit ;
46151: GO 46272
// tmp := AreaToList ( area , 0 ) ;
46153: LD_ADDR_VAR 0 5
46157: PUSH
46158: LD_VAR 0 2
46162: PPUSH
46163: LD_INT 0
46165: PPUSH
46166: CALL_OW 517
46170: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
46171: LD_ADDR_VAR 0 4
46175: PUSH
46176: DOUBLE
46177: LD_INT 1
46179: DEC
46180: ST_TO_ADDR
46181: LD_VAR 0 5
46185: PUSH
46186: LD_INT 1
46188: ARRAY
46189: PUSH
46190: FOR_TO
46191: IFFALSE 46270
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
46193: LD_VAR 0 5
46197: PUSH
46198: LD_INT 1
46200: ARRAY
46201: PUSH
46202: LD_VAR 0 4
46206: ARRAY
46207: PPUSH
46208: LD_VAR 0 5
46212: PUSH
46213: LD_INT 2
46215: ARRAY
46216: PUSH
46217: LD_VAR 0 4
46221: ARRAY
46222: PPUSH
46223: CALL_OW 351
46227: IFFALSE 46268
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
46229: LD_VAR 0 5
46233: PUSH
46234: LD_INT 1
46236: ARRAY
46237: PUSH
46238: LD_VAR 0 4
46242: ARRAY
46243: PPUSH
46244: LD_VAR 0 5
46248: PUSH
46249: LD_INT 2
46251: ARRAY
46252: PUSH
46253: LD_VAR 0 4
46257: ARRAY
46258: PPUSH
46259: LD_VAR 0 1
46263: PPUSH
46264: CALL_OW 244
// end ;
46268: GO 46190
46270: POP
46271: POP
// end ;
46272: LD_VAR 0 3
46276: RET
// export function UniqueArray ( array ) ; var i ; begin
46277: LD_INT 0
46279: PPUSH
46280: PPUSH
// result := [ ] ;
46281: LD_ADDR_VAR 0 2
46285: PUSH
46286: EMPTY
46287: ST_TO_ADDR
// if not array then
46288: LD_VAR 0 1
46292: NOT
46293: IFFALSE 46297
// exit ;
46295: GO 46358
// for i := 1 to array do
46297: LD_ADDR_VAR 0 3
46301: PUSH
46302: DOUBLE
46303: LD_INT 1
46305: DEC
46306: ST_TO_ADDR
46307: LD_VAR 0 1
46311: PUSH
46312: FOR_TO
46313: IFFALSE 46356
// if not array [ i ] in result then
46315: LD_VAR 0 1
46319: PUSH
46320: LD_VAR 0 3
46324: ARRAY
46325: PUSH
46326: LD_VAR 0 2
46330: IN
46331: NOT
46332: IFFALSE 46354
// result := Join ( result , i ) ;
46334: LD_ADDR_VAR 0 2
46338: PUSH
46339: LD_VAR 0 2
46343: PPUSH
46344: LD_VAR 0 3
46348: PPUSH
46349: CALL 41009 0 2
46353: ST_TO_ADDR
46354: GO 46312
46356: POP
46357: POP
// end ; end_of_file
46358: LD_VAR 0 2
46362: RET
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpGlobalOilDeposits , mpGlobalSibDeposits , mpTeleports , mpArtifacts , mpTimeToWin , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
46363: LD_INT 0
46365: PPUSH
46366: PPUSH
// disable ( mpActive ) ;
46367: LD_INT 100
46369: DISABLE_MARKED
// disable ( mpWin ) ;
46370: LD_INT 101
46372: DISABLE_MARKED
// disable ( mpLose ) ;
46373: LD_INT 102
46375: DISABLE_MARKED
// mpGameType := 0 ;
46376: LD_ADDR_EXP 1
46380: PUSH
46381: LD_INT 0
46383: ST_TO_ADDR
// mpGameSettings := [ ] ;
46384: LD_ADDR_EXP 4
46388: PUSH
46389: EMPTY
46390: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
46391: LD_ADDR_EXP 2
46395: PUSH
46396: EMPTY
46397: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
46398: LD_ADDR_EXP 3
46402: PUSH
46403: EMPTY
46404: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
46405: LD_ADDR_EXP 27
46409: PUSH
46410: LD_INT 2
46412: PUSH
46413: LD_INT 2
46415: PUSH
46416: EMPTY
46417: LIST
46418: LIST
46419: ST_TO_ADDR
// mpOilDeposits := [ ] ;
46420: LD_ADDR_EXP 10
46424: PUSH
46425: EMPTY
46426: ST_TO_ADDR
// mpSibDeposits := [ ] ;
46427: LD_ADDR_EXP 11
46431: PUSH
46432: EMPTY
46433: ST_TO_ADDR
// mpGlobalOilDeposits := [ ] ;
46434: LD_ADDR_EXP 39
46438: PUSH
46439: EMPTY
46440: ST_TO_ADDR
// mpGlobalSibDeposits := [ ] ;
46441: LD_ADDR_EXP 40
46445: PUSH
46446: EMPTY
46447: ST_TO_ADDR
// mpDepots := [ ] ;
46448: LD_ADDR_EXP 12
46452: PUSH
46453: EMPTY
46454: ST_TO_ADDR
// mpBuildings := [ ] ;
46455: LD_ADDR_EXP 15
46459: PUSH
46460: EMPTY
46461: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
46462: LD_ADDR_EXP 16
46466: PUSH
46467: EMPTY
46468: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
46469: LD_ADDR_EXP 17
46473: PUSH
46474: EMPTY
46475: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
46476: LD_ADDR_EXP 18
46480: PUSH
46481: EMPTY
46482: ST_TO_ADDR
// mpStartingResources := [ ] ;
46483: LD_ADDR_EXP 13
46487: PUSH
46488: EMPTY
46489: ST_TO_ADDR
// mpStartPos := [ ] ;
46490: LD_ADDR_EXP 19
46494: PUSH
46495: EMPTY
46496: ST_TO_ADDR
// mpBattleFlag := - 1 ;
46497: LD_ADDR_EXP 20
46501: PUSH
46502: LD_INT 1
46504: NEG
46505: ST_TO_ADDR
// mpBattleFlags := [ ] ;
46506: LD_ADDR_EXP 21
46510: PUSH
46511: EMPTY
46512: ST_TO_ADDR
// mpApemans := [ ] ;
46513: LD_ADDR_EXP 28
46517: PUSH
46518: EMPTY
46519: ST_TO_ADDR
// mpApemansArea := [ ] ;
46520: LD_ADDR_EXP 29
46524: PUSH
46525: EMPTY
46526: ST_TO_ADDR
// mpRespawn := [ ] ;
46527: LD_ADDR_EXP 31
46531: PUSH
46532: EMPTY
46533: ST_TO_ADDR
// mpKingArea := 0 ;
46534: LD_ADDR_EXP 32
46538: PUSH
46539: LD_INT 0
46541: ST_TO_ADDR
// mpPoints := [ ] ;
46542: LD_ADDR_EXP 33
46546: PUSH
46547: EMPTY
46548: ST_TO_ADDR
// mpVehicles := 0 ;
46549: LD_ADDR_EXP 34
46553: PUSH
46554: LD_INT 0
46556: ST_TO_ADDR
// mpShipments := 0 ;
46557: LD_ADDR_EXP 25
46561: PUSH
46562: LD_INT 0
46564: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
46565: LD_ADDR_EXP 38
46569: PUSH
46570: EMPTY
46571: PUSH
46572: EMPTY
46573: PUSH
46574: EMPTY
46575: PUSH
46576: EMPTY
46577: PUSH
46578: EMPTY
46579: PUSH
46580: EMPTY
46581: PUSH
46582: EMPTY
46583: PUSH
46584: EMPTY
46585: PUSH
46586: EMPTY
46587: LIST
46588: LIST
46589: LIST
46590: LIST
46591: LIST
46592: LIST
46593: LIST
46594: LIST
46595: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
46596: LD_ADDR_EXP 30
46600: PUSH
46601: EMPTY
46602: PUSH
46603: EMPTY
46604: PUSH
46605: EMPTY
46606: PUSH
46607: EMPTY
46608: PUSH
46609: EMPTY
46610: PUSH
46611: EMPTY
46612: PUSH
46613: EMPTY
46614: PUSH
46615: EMPTY
46616: PUSH
46617: EMPTY
46618: LIST
46619: LIST
46620: LIST
46621: LIST
46622: LIST
46623: LIST
46624: LIST
46625: LIST
46626: ST_TO_ADDR
// mpEmissions := 0 ;
46627: LD_ADDR_EXP 35
46631: PUSH
46632: LD_INT 0
46634: ST_TO_ADDR
// mpTeleports := 0 ;
46635: LD_ADDR_EXP 41
46639: PUSH
46640: LD_INT 0
46642: ST_TO_ADDR
// mpArtifacts := 0 ;
46643: LD_ADDR_EXP 42
46647: PUSH
46648: LD_INT 0
46650: ST_TO_ADDR
// mpTimeToWin := 0 0$0 ;
46651: LD_ADDR_EXP 43
46655: PUSH
46656: LD_INT 0
46658: ST_TO_ADDR
// mpPeopleSkill := 3 ;
46659: LD_ADDR_EXP 23
46663: PUSH
46664: LD_INT 3
46666: ST_TO_ADDR
// mpPeopleAmount := 15 ;
46667: LD_ADDR_EXP 22
46671: PUSH
46672: LD_INT 15
46674: ST_TO_ADDR
// mpDisplayStrings := 0 ;
46675: LD_ADDR_EXP 36
46679: PUSH
46680: LD_INT 0
46682: ST_TO_ADDR
// mpGameActive := false ;
46683: LD_ADDR_EXP 37
46687: PUSH
46688: LD_INT 0
46690: ST_TO_ADDR
// mpBlockRespThread := false ;
46691: LD_ADDR_EXP 44
46695: PUSH
46696: LD_INT 0
46698: ST_TO_ADDR
// for i := 1 to 32 do
46699: LD_ADDR_VAR 0 2
46703: PUSH
46704: DOUBLE
46705: LD_INT 1
46707: DEC
46708: ST_TO_ADDR
46709: LD_INT 32
46711: PUSH
46712: FOR_TO
46713: IFFALSE 46740
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
46715: LD_ADDR_EXP 4
46719: PUSH
46720: LD_EXP 4
46724: PPUSH
46725: LD_VAR 0 2
46729: PPUSH
46730: LD_INT 0
46732: PPUSH
46733: CALL_OW 1
46737: ST_TO_ADDR
46738: GO 46712
46740: POP
46741: POP
// end ;
46742: LD_VAR 0 1
46746: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
46747: LD_INT 0
46749: PPUSH
46750: PPUSH
46751: PPUSH
46752: PPUSH
46753: PPUSH
46754: PPUSH
46755: PPUSH
46756: PPUSH
46757: PPUSH
46758: PPUSH
46759: PPUSH
46760: PPUSH
46761: PPUSH
46762: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact , ] ;
46763: LD_ADDR_VAR 0 14
46767: PUSH
46768: LD_INT 1
46770: PUSH
46771: LD_INT 2
46773: PUSH
46774: LD_INT 3
46776: PUSH
46777: LD_INT 5
46779: PUSH
46780: LD_INT 6
46782: PUSH
46783: LD_INT 7
46785: PUSH
46786: EMPTY
46787: LIST
46788: LIST
46789: LIST
46790: LIST
46791: LIST
46792: LIST
46793: ST_TO_ADDR
// for i in gameTypes do
46794: LD_ADDR_VAR 0 2
46798: PUSH
46799: LD_VAR 0 14
46803: PUSH
46804: FOR_IN
46805: IFFALSE 46814
// disable ( i ) ;
46807: LD_VAR 0 2
46811: DISABLE_MARKED
46812: GO 46804
46814: POP
46815: POP
// if Multiplayer then
46816: LD_OWVAR 4
46820: IFFALSE 47004
// begin mpGameType := mp_game_type ;
46822: LD_ADDR_EXP 1
46826: PUSH
46827: LD_OWVAR 6
46831: ST_TO_ADDR
// your_side := mp_player_side ;
46832: LD_ADDR_OWVAR 2
46836: PUSH
46837: LD_OWVAR 7
46841: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
46842: LD_ADDR_EXP 5
46846: PUSH
46847: LD_OWVAR 17
46851: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
46852: LD_ADDR_EXP 6
46856: PUSH
46857: LD_OWVAR 15
46861: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
46862: LD_ADDR_EXP 7
46866: PUSH
46867: LD_OWVAR 16
46871: ST_TO_ADDR
// mpTeams := mp_teams ;
46872: LD_ADDR_EXP 8
46876: PUSH
46877: LD_OWVAR 12
46881: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
46882: LD_ADDR_VAR 0 2
46886: PUSH
46887: DOUBLE
46888: LD_INT 1
46890: DEC
46891: ST_TO_ADDR
46892: LD_EXP 2
46896: PPUSH
46897: CALL 5043 0 1
46901: PUSH
46902: FOR_TO
46903: IFFALSE 46979
// begin setting := mpGameSettingsKeys [ i ] ;
46905: LD_ADDR_VAR 0 12
46909: PUSH
46910: LD_EXP 2
46914: PUSH
46915: LD_VAR 0 2
46919: ARRAY
46920: ST_TO_ADDR
// if setting then
46921: LD_VAR 0 12
46925: IFFALSE 46977
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
46927: LD_ADDR_EXP 4
46931: PUSH
46932: LD_EXP 4
46936: PPUSH
46937: LD_VAR 0 2
46941: PPUSH
46942: LD_EXP 3
46946: PUSH
46947: LD_VAR 0 2
46951: ARRAY
46952: PUSH
46953: LD_VAR 0 2
46957: PUSH
46958: LD_INT 1
46960: MINUS
46961: PPUSH
46962: CALL_OW 426
46966: PUSH
46967: LD_INT 1
46969: PLUS
46970: ARRAY
46971: PPUSH
46972: CALL_OW 1
46976: ST_TO_ADDR
// end ;
46977: GO 46902
46979: POP
46980: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
46981: LD_ADDR_EXP 9
46985: PUSH
46986: LD_EXP 6
46990: PUSH
46991: LD_INT 0
46993: PUSH
46994: EMPTY
46995: LIST
46996: DIFF
46997: PUSH
46998: LD_INT 1
47000: GREATER
47001: ST_TO_ADDR
// end else
47002: GO 47004
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
47004: LD_EXP 1
47008: PPUSH
47009: CALL 822 0 1
// if Count ( mpMarkedAreas ) then
47013: LD_EXP 16
47017: PPUSH
47018: CALL 5043 0 1
47022: IFFALSE 47053
// begin for i in mpMarkedAreas do
47024: LD_ADDR_VAR 0 2
47028: PUSH
47029: LD_EXP 16
47033: PUSH
47034: FOR_IN
47035: IFFALSE 47051
// SetAreaMapShow ( i , 0 ) ;
47037: LD_VAR 0 2
47041: PPUSH
47042: LD_INT 0
47044: PPUSH
47045: CALL_OW 424
47049: GO 47034
47051: POP
47052: POP
// end ; for i := 1 to 8 do
47053: LD_ADDR_VAR 0 2
47057: PUSH
47058: DOUBLE
47059: LD_INT 1
47061: DEC
47062: ST_TO_ADDR
47063: LD_INT 8
47065: PUSH
47066: FOR_TO
47067: IFFALSE 48502
// begin if not mpSidePositions [ i ] then
47069: LD_EXP 5
47073: PUSH
47074: LD_VAR 0 2
47078: ARRAY
47079: NOT
47080: IFFALSE 47084
// continue ;
47082: GO 47066
// side := i ;
47084: LD_ADDR_VAR 0 7
47088: PUSH
47089: LD_VAR 0 2
47093: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
47094: LD_ADDR_VAR 0 9
47098: PUSH
47099: LD_EXP 7
47103: PUSH
47104: LD_VAR 0 2
47108: ARRAY
47109: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
47110: LD_ADDR_VAR 0 8
47114: PUSH
47115: LD_EXP 5
47119: PUSH
47120: LD_VAR 0 2
47124: ARRAY
47125: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
47126: LD_EXP 10
47130: PPUSH
47131: CALL 5043 0 1
47135: IFFALSE 47212
// begin for j in mpOilDeposits [ pos ] do
47137: LD_ADDR_VAR 0 3
47141: PUSH
47142: LD_EXP 10
47146: PUSH
47147: LD_VAR 0 8
47151: ARRAY
47152: PUSH
47153: FOR_IN
47154: IFFALSE 47210
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
47156: LD_VAR 0 3
47160: PUSH
47161: LD_INT 1
47163: ARRAY
47164: PPUSH
47165: LD_VAR 0 3
47169: PUSH
47170: LD_INT 2
47172: ARRAY
47173: PPUSH
47174: LD_INT 2
47176: PPUSH
47177: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
47181: LD_VAR 0 3
47185: PUSH
47186: LD_INT 1
47188: ARRAY
47189: PPUSH
47190: LD_VAR 0 3
47194: PUSH
47195: LD_INT 2
47197: ARRAY
47198: PPUSH
47199: LD_VAR 0 7
47203: PPUSH
47204: CALL_OW 441
// end ;
47208: GO 47153
47210: POP
47211: POP
// end ; if Count ( mpSibDeposits ) then
47212: LD_EXP 11
47216: PPUSH
47217: CALL 5043 0 1
47221: IFFALSE 47298
// begin for j in mpSibDeposits [ pos ] do
47223: LD_ADDR_VAR 0 3
47227: PUSH
47228: LD_EXP 11
47232: PUSH
47233: LD_VAR 0 8
47237: ARRAY
47238: PUSH
47239: FOR_IN
47240: IFFALSE 47296
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
47242: LD_VAR 0 3
47246: PUSH
47247: LD_INT 1
47249: ARRAY
47250: PPUSH
47251: LD_VAR 0 3
47255: PUSH
47256: LD_INT 2
47258: ARRAY
47259: PPUSH
47260: LD_INT 3
47262: PPUSH
47263: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
47267: LD_VAR 0 3
47271: PUSH
47272: LD_INT 1
47274: ARRAY
47275: PPUSH
47276: LD_VAR 0 3
47280: PUSH
47281: LD_INT 2
47283: ARRAY
47284: PPUSH
47285: LD_VAR 0 7
47289: PPUSH
47290: CALL_OW 441
// end ;
47294: GO 47239
47296: POP
47297: POP
// end ; InitBc ;
47298: CALL_OW 21
// InitUc ;
47302: CALL_OW 18
// uc_side := side ;
47306: LD_ADDR_OWVAR 20
47310: PUSH
47311: LD_VAR 0 7
47315: ST_TO_ADDR
// uc_nation := nation ;
47316: LD_ADDR_OWVAR 21
47320: PUSH
47321: LD_VAR 0 9
47325: ST_TO_ADDR
// if mpBattleFlag > - 1 then
47326: LD_EXP 20
47330: PUSH
47331: LD_INT 1
47333: NEG
47334: GREATER
47335: IFFALSE 47494
// begin x := mpStartPos [ pos ] [ 1 ] ;
47337: LD_ADDR_VAR 0 5
47341: PUSH
47342: LD_EXP 19
47346: PUSH
47347: LD_VAR 0 8
47351: ARRAY
47352: PUSH
47353: LD_INT 1
47355: ARRAY
47356: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
47357: LD_ADDR_VAR 0 6
47361: PUSH
47362: LD_EXP 19
47366: PUSH
47367: LD_VAR 0 8
47371: ARRAY
47372: PUSH
47373: LD_INT 2
47375: ARRAY
47376: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
47377: LD_VAR 0 5
47381: PPUSH
47382: LD_VAR 0 6
47386: PPUSH
47387: LD_INT 12
47389: PPUSH
47390: LD_INT 2
47392: PPUSH
47393: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
47397: LD_ADDR_EXP 21
47401: PUSH
47402: LD_EXP 21
47406: PPUSH
47407: LD_VAR 0 7
47411: PPUSH
47412: LD_VAR 0 7
47416: PPUSH
47417: LD_VAR 0 5
47421: PPUSH
47422: LD_VAR 0 6
47426: PPUSH
47427: LD_INT 1
47429: PUSH
47430: LD_INT 100
47432: PUSH
47433: EMPTY
47434: LIST
47435: LIST
47436: PUSH
47437: LD_INT 2
47439: PUSH
47440: LD_INT 70
47442: PUSH
47443: EMPTY
47444: LIST
47445: LIST
47446: PUSH
47447: LD_INT 3
47449: PUSH
47450: LD_INT 40
47452: PUSH
47453: EMPTY
47454: LIST
47455: LIST
47456: PUSH
47457: LD_INT 10
47459: PUSH
47460: LD_INT 25
47462: PUSH
47463: EMPTY
47464: LIST
47465: LIST
47466: PUSH
47467: LD_INT 20
47469: PUSH
47470: LD_INT 100
47472: PUSH
47473: EMPTY
47474: LIST
47475: LIST
47476: PUSH
47477: EMPTY
47478: LIST
47479: LIST
47480: LIST
47481: LIST
47482: LIST
47483: PPUSH
47484: CALL_OW 418
47488: PPUSH
47489: CALL_OW 1
47493: ST_TO_ADDR
// end ; if Count ( mpDepots ) then
47494: LD_EXP 12
47498: PPUSH
47499: CALL 5043 0 1
47503: IFFALSE 47698
// begin if mpGameType in [ GameTypeSurvival , GameTypeArmsRace , GameTypeArmsArtifact ] then
47505: LD_EXP 1
47509: PUSH
47510: LD_INT 2
47512: PUSH
47513: LD_INT 6
47515: PUSH
47516: LD_INT 7
47518: PUSH
47519: EMPTY
47520: LIST
47521: LIST
47522: LIST
47523: IN
47524: IFFALSE 47544
// begin bc_level := 10 ;
47526: LD_ADDR_OWVAR 43
47530: PUSH
47531: LD_INT 10
47533: ST_TO_ADDR
// bc_type := b_warehouse ;
47534: LD_ADDR_OWVAR 42
47538: PUSH
47539: LD_INT 1
47541: ST_TO_ADDR
// end else
47542: GO 47560
// begin bc_level := 0 ;
47544: LD_ADDR_OWVAR 43
47548: PUSH
47549: LD_INT 0
47551: ST_TO_ADDR
// bc_type := b_depot ;
47552: LD_ADDR_OWVAR 42
47556: PUSH
47557: LD_INT 0
47559: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
47560: LD_ADDR_VAR 0 4
47564: PUSH
47565: LD_EXP 12
47569: PUSH
47570: LD_VAR 0 8
47574: ARRAY
47575: PUSH
47576: LD_INT 1
47578: ARRAY
47579: PPUSH
47580: LD_EXP 12
47584: PUSH
47585: LD_VAR 0 8
47589: ARRAY
47590: PUSH
47591: LD_INT 2
47593: ARRAY
47594: PPUSH
47595: LD_EXP 12
47599: PUSH
47600: LD_VAR 0 8
47604: ARRAY
47605: PUSH
47606: LD_INT 3
47608: ARRAY
47609: PPUSH
47610: CALL_OW 47
47614: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
47615: LD_VAR 0 4
47619: PPUSH
47620: LD_STRING @
47622: PUSH
47623: LD_VAR 0 7
47627: STR
47628: PPUSH
47629: CALL_OW 500
// if Count ( mpStartingResources ) then
47633: LD_EXP 13
47637: PPUSH
47638: CALL 5043 0 1
47642: IFFALSE 47696
// begin for j := 1 to mpStartingResources do
47644: LD_ADDR_VAR 0 3
47648: PUSH
47649: DOUBLE
47650: LD_INT 1
47652: DEC
47653: ST_TO_ADDR
47654: LD_EXP 13
47658: PUSH
47659: FOR_TO
47660: IFFALSE 47694
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
47662: LD_VAR 0 4
47666: PPUSH
47667: CALL_OW 274
47671: PPUSH
47672: LD_VAR 0 3
47676: PPUSH
47677: LD_EXP 13
47681: PUSH
47682: LD_VAR 0 3
47686: ARRAY
47687: PPUSH
47688: CALL_OW 277
47692: GO 47659
47694: POP
47695: POP
// end ; end else
47696: GO 47905
// if Count ( mpStartingResources ) then
47698: LD_EXP 13
47702: PPUSH
47703: CALL 5043 0 1
47707: IFFALSE 47905
// begin x := mpStartPos [ pos ] [ 1 ] ;
47709: LD_ADDR_VAR 0 5
47713: PUSH
47714: LD_EXP 19
47718: PUSH
47719: LD_VAR 0 8
47723: ARRAY
47724: PUSH
47725: LD_INT 1
47727: ARRAY
47728: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
47729: LD_ADDR_VAR 0 6
47733: PUSH
47734: LD_EXP 19
47738: PUSH
47739: LD_VAR 0 8
47743: ARRAY
47744: PUSH
47745: LD_INT 2
47747: ARRAY
47748: ST_TO_ADDR
// for j := 1 to mpStartingResources do
47749: LD_ADDR_VAR 0 3
47753: PUSH
47754: DOUBLE
47755: LD_INT 1
47757: DEC
47758: ST_TO_ADDR
47759: LD_EXP 13
47763: PUSH
47764: FOR_TO
47765: IFFALSE 47903
// begin resources := mpStartingResources [ j ] ;
47767: LD_ADDR_VAR 0 13
47771: PUSH
47772: LD_EXP 13
47776: PUSH
47777: LD_VAR 0 3
47781: ARRAY
47782: ST_TO_ADDR
// if resources = 0 then
47783: LD_VAR 0 13
47787: PUSH
47788: LD_INT 0
47790: EQUAL
47791: IFFALSE 47795
// continue ;
47793: GO 47764
// repeat if resources >= 50 then
47795: LD_VAR 0 13
47799: PUSH
47800: LD_INT 50
47802: GREATEREQUAL
47803: IFFALSE 47849
// begin CreateResourcesXYR ( j , 5 , x , y , 6 , false ) ;
47805: LD_VAR 0 3
47809: PPUSH
47810: LD_INT 5
47812: PPUSH
47813: LD_VAR 0 5
47817: PPUSH
47818: LD_VAR 0 6
47822: PPUSH
47823: LD_INT 6
47825: PPUSH
47826: LD_INT 0
47828: PPUSH
47829: CALL_OW 60
// resources := resources - 50 ;
47833: LD_ADDR_VAR 0 13
47837: PUSH
47838: LD_VAR 0 13
47842: PUSH
47843: LD_INT 50
47845: MINUS
47846: ST_TO_ADDR
// end else
47847: GO 47891
// begin CreateResourcesXYR ( j , resources div 10 , x , y , 6 , false ) ;
47849: LD_VAR 0 3
47853: PPUSH
47854: LD_VAR 0 13
47858: PUSH
47859: LD_INT 10
47861: DIV
47862: PPUSH
47863: LD_VAR 0 5
47867: PPUSH
47868: LD_VAR 0 6
47872: PPUSH
47873: LD_INT 6
47875: PPUSH
47876: LD_INT 0
47878: PPUSH
47879: CALL_OW 60
// resources := 0 ;
47883: LD_ADDR_VAR 0 13
47887: PUSH
47888: LD_INT 0
47890: ST_TO_ADDR
// end ; until resources <= 0 ;
47891: LD_VAR 0 13
47895: PUSH
47896: LD_INT 0
47898: LESSEQUAL
47899: IFFALSE 47795
// end ;
47901: GO 47764
47903: POP
47904: POP
// end ; if Count ( mpBuildings ) then
47905: LD_EXP 15
47909: PPUSH
47910: CALL 5043 0 1
47914: IFFALSE 47992
// begin for j in mpBuildings [ pos ] do
47916: LD_ADDR_VAR 0 3
47920: PUSH
47921: LD_EXP 15
47925: PUSH
47926: LD_VAR 0 8
47930: ARRAY
47931: PUSH
47932: FOR_IN
47933: IFFALSE 47990
// begin bc_level := 0 ;
47935: LD_ADDR_OWVAR 43
47939: PUSH
47940: LD_INT 0
47942: ST_TO_ADDR
// bc_type := j [ 1 ] ;
47943: LD_ADDR_OWVAR 42
47947: PUSH
47948: LD_VAR 0 3
47952: PUSH
47953: LD_INT 1
47955: ARRAY
47956: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
47957: LD_VAR 0 3
47961: PUSH
47962: LD_INT 2
47964: ARRAY
47965: PPUSH
47966: LD_VAR 0 3
47970: PUSH
47971: LD_INT 3
47973: ARRAY
47974: PPUSH
47975: LD_VAR 0 3
47979: PUSH
47980: LD_INT 4
47982: ARRAY
47983: PPUSH
47984: CALL_OW 47
// end ;
47988: GO 47932
47990: POP
47991: POP
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
47992: LD_EXP 24
47996: IFFALSE 48016
47998: PUSH
47999: LD_INT 20
48001: PPUSH
48002: LD_VAR 0 7
48006: PPUSH
48007: CALL_OW 321
48011: PUSH
48012: LD_INT 1
48014: EQUAL
48015: AND
48016: IFFALSE 48033
// SetTech ( tech_SibDet , side , state_researched ) ;
48018: LD_INT 20
48020: PPUSH
48021: LD_VAR 0 7
48025: PPUSH
48026: LD_INT 2
48028: PPUSH
48029: CALL_OW 322
// if not mpArtifacts then
48033: LD_EXP 42
48037: NOT
48038: IFFALSE 48055
// SetTech ( tech_artifact , side , state_disabled ) ;
48040: LD_INT 24
48042: PPUSH
48043: LD_VAR 0 7
48047: PPUSH
48048: LD_INT 0
48050: PPUSH
48051: CALL_OW 322
// if mpSibBomb = 1 then
48055: LD_EXP 26
48059: PUSH
48060: LD_INT 1
48062: EQUAL
48063: IFFALSE 48082
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
48065: LD_INT 25
48067: PPUSH
48068: LD_VAR 0 7
48072: PPUSH
48073: LD_INT 1
48075: PPUSH
48076: CALL_OW 322
// end else
48080: GO 48097
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
48082: LD_INT 25
48084: PPUSH
48085: LD_VAR 0 7
48089: PPUSH
48090: LD_INT 0
48092: PPUSH
48093: CALL_OW 322
// end ; if mpVehicles then
48097: LD_EXP 34
48101: IFFALSE 48200
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
48103: LD_ADDR_VAR 0 3
48107: PUSH
48108: LD_VAR 0 7
48112: PPUSH
48113: LD_VAR 0 9
48117: PPUSH
48118: LD_EXP 34
48122: PPUSH
48123: CALL 49423 0 3
48127: PUSH
48128: FOR_IN
48129: IFFALSE 48198
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
48131: LD_VAR 0 3
48135: PPUSH
48136: LD_INT 0
48138: PPUSH
48139: LD_INT 5
48141: PPUSH
48142: CALL_OW 12
48146: PPUSH
48147: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
48151: LD_VAR 0 3
48155: PPUSH
48156: LD_EXP 19
48160: PUSH
48161: LD_VAR 0 8
48165: ARRAY
48166: PUSH
48167: LD_INT 1
48169: ARRAY
48170: PPUSH
48171: LD_EXP 19
48175: PUSH
48176: LD_VAR 0 8
48180: ARRAY
48181: PUSH
48182: LD_INT 2
48184: ARRAY
48185: PPUSH
48186: LD_INT 12
48188: PPUSH
48189: LD_INT 0
48191: PPUSH
48192: CALL_OW 50
// end ;
48196: GO 48128
48198: POP
48199: POP
// end ; uc_nation := nation ;
48200: LD_ADDR_OWVAR 21
48204: PUSH
48205: LD_VAR 0 9
48209: ST_TO_ADDR
// if mpGameType in [ GameTypeArmsRace , GameTypeArmsArtifact ] and mpSidePositions [ i ] in [ 1 , 2 ] then
48210: LD_EXP 1
48214: PUSH
48215: LD_INT 6
48217: PUSH
48218: LD_INT 7
48220: PUSH
48221: EMPTY
48222: LIST
48223: LIST
48224: IN
48225: IFFALSE 48250
48227: PUSH
48228: LD_EXP 5
48232: PUSH
48233: LD_VAR 0 2
48237: ARRAY
48238: PUSH
48239: LD_INT 1
48241: PUSH
48242: LD_INT 2
48244: PUSH
48245: EMPTY
48246: LIST
48247: LIST
48248: IN
48249: AND
48250: IFFALSE 48298
// team := mpPrepareTeam ( side , nation , mpPeopleAmount + ( mpPeopleAmount div 2 ) , mpPeopleSkill + 1 ) else
48252: LD_ADDR_VAR 0 11
48256: PUSH
48257: LD_VAR 0 7
48261: PPUSH
48262: LD_VAR 0 9
48266: PPUSH
48267: LD_EXP 22
48271: PUSH
48272: LD_EXP 22
48276: PUSH
48277: LD_INT 2
48279: DIV
48280: PLUS
48281: PPUSH
48282: LD_EXP 23
48286: PUSH
48287: LD_INT 1
48289: PLUS
48290: PPUSH
48291: CALL 48914 0 4
48295: ST_TO_ADDR
48296: GO 48328
// team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
48298: LD_ADDR_VAR 0 11
48302: PUSH
48303: LD_VAR 0 7
48307: PPUSH
48308: LD_VAR 0 9
48312: PPUSH
48313: LD_EXP 22
48317: PPUSH
48318: LD_EXP 23
48322: PPUSH
48323: CALL 48914 0 4
48327: ST_TO_ADDR
// for j in team do
48328: LD_ADDR_VAR 0 3
48332: PUSH
48333: LD_VAR 0 11
48337: PUSH
48338: FOR_IN
48339: IFFALSE 48388
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
48341: LD_VAR 0 3
48345: PPUSH
48346: LD_EXP 19
48350: PUSH
48351: LD_VAR 0 8
48355: ARRAY
48356: PUSH
48357: LD_INT 1
48359: ARRAY
48360: PPUSH
48361: LD_EXP 19
48365: PUSH
48366: LD_VAR 0 8
48370: ARRAY
48371: PUSH
48372: LD_INT 2
48374: ARRAY
48375: PPUSH
48376: LD_INT 12
48378: PPUSH
48379: LD_INT 0
48381: PPUSH
48382: CALL_OW 50
48386: GO 48338
48388: POP
48389: POP
// if mpApemans then
48390: LD_EXP 28
48394: IFFALSE 48500
// begin for j := 1 to mpApemans do
48396: LD_ADDR_VAR 0 3
48400: PUSH
48401: DOUBLE
48402: LD_INT 1
48404: DEC
48405: ST_TO_ADDR
48406: LD_EXP 28
48410: PUSH
48411: FOR_TO
48412: IFFALSE 48498
// begin PrepareApeman ( - 5 ) ;
48414: LD_INT 5
48416: NEG
48417: PPUSH
48418: CALL 37136 0 1
// ape := CreateHuman ;
48422: LD_ADDR_VAR 0 10
48426: PUSH
48427: CALL_OW 44
48431: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
48432: LD_ADDR_EXP 30
48436: PUSH
48437: LD_EXP 30
48441: PPUSH
48442: LD_VAR 0 8
48446: PPUSH
48447: LD_EXP 30
48451: PUSH
48452: LD_VAR 0 8
48456: ARRAY
48457: PPUSH
48458: LD_VAR 0 10
48462: PPUSH
48463: CALL 41009 0 2
48467: PPUSH
48468: CALL_OW 1
48472: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
48473: LD_VAR 0 10
48477: PPUSH
48478: LD_EXP 29
48482: PUSH
48483: LD_VAR 0 8
48487: ARRAY
48488: PPUSH
48489: LD_INT 0
48491: PPUSH
48492: CALL_OW 49
// end ;
48496: GO 48411
48498: POP
48499: POP
// end ; end ;
48500: GO 47066
48502: POP
48503: POP
// if not mpTeamGame then
48504: LD_EXP 9
48508: NOT
48509: IFFALSE 48607
// begin for i := 1 to 8 do
48511: LD_ADDR_VAR 0 2
48515: PUSH
48516: DOUBLE
48517: LD_INT 1
48519: DEC
48520: ST_TO_ADDR
48521: LD_INT 8
48523: PUSH
48524: FOR_TO
48525: IFFALSE 48603
// for j := 1 to 8 do
48527: LD_ADDR_VAR 0 3
48531: PUSH
48532: DOUBLE
48533: LD_INT 1
48535: DEC
48536: ST_TO_ADDR
48537: LD_INT 8
48539: PUSH
48540: FOR_TO
48541: IFFALSE 48599
// if i <> j then
48543: LD_VAR 0 2
48547: PUSH
48548: LD_VAR 0 3
48552: NONEQUAL
48553: IFFALSE 48577
// SetAttitude ( i , j , att_neutral , true ) else
48555: LD_VAR 0 2
48559: PPUSH
48560: LD_VAR 0 3
48564: PPUSH
48565: LD_INT 0
48567: PPUSH
48568: LD_INT 1
48570: PPUSH
48571: CALL_OW 80
48575: GO 48597
// SetAttitude ( i , j , att_friend , true ) ;
48577: LD_VAR 0 2
48581: PPUSH
48582: LD_VAR 0 3
48586: PPUSH
48587: LD_INT 1
48589: PPUSH
48590: LD_INT 1
48592: PPUSH
48593: CALL_OW 80
48597: GO 48540
48599: POP
48600: POP
48601: GO 48524
48603: POP
48604: POP
// end else
48605: GO 48782
// begin if mpSharedVision then
48607: LD_EXP 14
48611: IFFALSE 48676
// begin for i in mpTeams do
48613: LD_ADDR_VAR 0 2
48617: PUSH
48618: LD_EXP 8
48622: PUSH
48623: FOR_IN
48624: IFFALSE 48674
// for j := 2 to i do
48626: LD_ADDR_VAR 0 3
48630: PUSH
48631: DOUBLE
48632: LD_INT 2
48634: DEC
48635: ST_TO_ADDR
48636: LD_VAR 0 2
48640: PUSH
48641: FOR_TO
48642: IFFALSE 48670
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
48644: LD_VAR 0 2
48648: PUSH
48649: LD_VAR 0 3
48653: ARRAY
48654: PPUSH
48655: LD_VAR 0 2
48659: PUSH
48660: LD_INT 1
48662: ARRAY
48663: PPUSH
48664: CALL_OW 343
48668: GO 48641
48670: POP
48671: POP
48672: GO 48623
48674: POP
48675: POP
// end ; for i := 1 to 8 do
48676: LD_ADDR_VAR 0 2
48680: PUSH
48681: DOUBLE
48682: LD_INT 1
48684: DEC
48685: ST_TO_ADDR
48686: LD_INT 8
48688: PUSH
48689: FOR_TO
48690: IFFALSE 48780
// for j := 1 to 8 do
48692: LD_ADDR_VAR 0 3
48696: PUSH
48697: DOUBLE
48698: LD_INT 1
48700: DEC
48701: ST_TO_ADDR
48702: LD_INT 8
48704: PUSH
48705: FOR_TO
48706: IFFALSE 48776
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
48708: LD_EXP 6
48712: PUSH
48713: LD_VAR 0 2
48717: ARRAY
48718: PUSH
48719: LD_EXP 6
48723: PUSH
48724: LD_VAR 0 3
48728: ARRAY
48729: EQUAL
48730: IFFALSE 48754
// SetAttitude ( i , j , att_friend , true ) else
48732: LD_VAR 0 2
48736: PPUSH
48737: LD_VAR 0 3
48741: PPUSH
48742: LD_INT 1
48744: PPUSH
48745: LD_INT 1
48747: PPUSH
48748: CALL_OW 80
48752: GO 48774
// SetAttitude ( i , j , att_enemy , true ) ;
48754: LD_VAR 0 2
48758: PPUSH
48759: LD_VAR 0 3
48763: PPUSH
48764: LD_INT 2
48766: PPUSH
48767: LD_INT 1
48769: PPUSH
48770: CALL_OW 80
48774: GO 48705
48776: POP
48777: POP
48778: GO 48689
48780: POP
48781: POP
// end ; music_nat := mpSideNations [ your_side ] ;
48782: LD_ADDR_OWVAR 71
48786: PUSH
48787: LD_EXP 7
48791: PUSH
48792: LD_OWVAR 2
48796: ARRAY
48797: ST_TO_ADDR
// if IAmSpec then
48798: CALL_OW 531
48802: IFFALSE 48843
// begin FogOff ( true ) ;
48804: LD_INT 1
48806: PPUSH
48807: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
48811: LD_EXP 27
48815: PUSH
48816: LD_INT 1
48818: ARRAY
48819: PUSH
48820: LD_INT 2
48822: DIV
48823: PPUSH
48824: LD_EXP 27
48828: PUSH
48829: LD_INT 2
48831: ARRAY
48832: PUSH
48833: LD_INT 2
48835: DIV
48836: PPUSH
48837: CALL_OW 86
// end else
48841: GO 48889
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
48843: LD_EXP 19
48847: PUSH
48848: LD_EXP 5
48852: PUSH
48853: LD_OWVAR 2
48857: ARRAY
48858: ARRAY
48859: PUSH
48860: LD_INT 1
48862: ARRAY
48863: PPUSH
48864: LD_EXP 19
48868: PUSH
48869: LD_EXP 5
48873: PUSH
48874: LD_OWVAR 2
48878: ARRAY
48879: ARRAY
48880: PUSH
48881: LD_INT 2
48883: ARRAY
48884: PPUSH
48885: CALL_OW 86
// end ; BeginBuildUp ;
48889: CALL 49956 0 0
// enable ( mpActive ) ;
48893: LD_INT 100
48895: ENABLE_MARKED
// enable ( mpGameType ) ;
48896: LD_EXP 1
48900: ENABLE_MARKED
// mpGameActive := true ;
48901: LD_ADDR_EXP 37
48905: PUSH
48906: LD_INT 1
48908: ST_TO_ADDR
// end ;
48909: LD_VAR 0 1
48913: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class ; begin
48914: LD_INT 0
48916: PPUSH
48917: PPUSH
48918: PPUSH
48919: PPUSH
// result := [ ] ;
48920: LD_ADDR_VAR 0 5
48924: PUSH
48925: EMPTY
48926: ST_TO_ADDR
// class := class_soldier ;
48927: LD_ADDR_VAR 0 8
48931: PUSH
48932: LD_INT 1
48934: ST_TO_ADDR
// uc_side := side ;
48935: LD_ADDR_OWVAR 20
48939: PUSH
48940: LD_VAR 0 1
48944: ST_TO_ADDR
// uc_nation := nation ;
48945: LD_ADDR_OWVAR 21
48949: PUSH
48950: LD_VAR 0 2
48954: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
48955: LD_ADDR_OWVAR 26
48959: PUSH
48960: LD_OWVAR 19
48964: PUSH
48965: LD_VAR 0 1
48969: ARRAY
48970: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
48971: LD_INT 1
48973: PPUSH
48974: LD_INT 2
48976: PPUSH
48977: CALL_OW 12
48981: PPUSH
48982: LD_VAR 0 8
48986: PPUSH
48987: LD_VAR 0 4
48991: PUSH
48992: LD_INT 2
48994: PLUS
48995: PPUSH
48996: CALL_OW 380
// hc_importance := 105 ;
49000: LD_ADDR_OWVAR 32
49004: PUSH
49005: LD_INT 105
49007: ST_TO_ADDR
// if Multiplayer then
49008: LD_OWVAR 4
49012: IFFALSE 49052
// begin hc_gallery := MULTIAVATARS ;
49014: LD_ADDR_OWVAR 33
49018: PUSH
49019: LD_STRING MULTIAVATARS
49021: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
49022: LD_ADDR_OWVAR 34
49026: PUSH
49027: LD_VAR 0 1
49031: PPUSH
49032: CALL_OW 525
49036: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
49037: LD_ADDR_OWVAR 27
49041: PUSH
49042: LD_VAR 0 1
49046: PPUSH
49047: CALL_OW 526
49051: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
49052: LD_ADDR_VAR 0 5
49056: PUSH
49057: LD_VAR 0 5
49061: PPUSH
49062: CALL_OW 44
49066: PPUSH
49067: CALL 41009 0 2
49071: ST_TO_ADDR
// if mpTeamPreset then
49072: LD_LOC 1
49076: IFFALSE 49172
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
49078: LD_LOC 1
49082: PUSH
49083: LD_INT 1
49085: ARRAY
49086: PPUSH
49087: LD_VAR 0 5
49091: PUSH
49092: LD_VAR 0 5
49096: ARRAY
49097: PPUSH
49098: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
49102: LD_VAR 0 5
49106: PUSH
49107: LD_VAR 0 5
49111: ARRAY
49112: PPUSH
49113: LD_INT 1
49115: PPUSH
49116: LD_LOC 1
49120: PUSH
49121: LD_INT 1
49123: ARRAY
49124: PPUSH
49125: LD_INT 1
49127: PPUSH
49128: CALL_OW 260
49132: PPUSH
49133: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
49137: LD_VAR 0 5
49141: PUSH
49142: LD_VAR 0 5
49146: ARRAY
49147: PPUSH
49148: LD_INT 2
49150: PPUSH
49151: LD_LOC 1
49155: PUSH
49156: LD_INT 1
49158: ARRAY
49159: PPUSH
49160: LD_INT 2
49162: PPUSH
49163: CALL_OW 260
49167: PPUSH
49168: CALL_OW 239
// end ; InitHc_All ( ) ;
49172: CALL_OW 584
// class := 2 ;
49176: LD_ADDR_VAR 0 8
49180: PUSH
49181: LD_INT 2
49183: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
49184: LD_ADDR_VAR 0 6
49188: PUSH
49189: DOUBLE
49190: LD_INT 1
49192: DEC
49193: ST_TO_ADDR
49194: LD_VAR 0 3
49198: PUSH
49199: LD_INT 1
49201: MINUS
49202: PUSH
49203: FOR_TO
49204: IFFALSE 49399
// begin PrepareHuman ( false , class , skill ) ;
49206: LD_INT 0
49208: PPUSH
49209: LD_VAR 0 8
49213: PPUSH
49214: LD_VAR 0 4
49218: PPUSH
49219: CALL_OW 380
// un := CreateHuman ;
49223: LD_ADDR_VAR 0 7
49227: PUSH
49228: CALL_OW 44
49232: ST_TO_ADDR
// result := Join ( result , un ) ;
49233: LD_ADDR_VAR 0 5
49237: PUSH
49238: LD_VAR 0 5
49242: PPUSH
49243: LD_VAR 0 7
49247: PPUSH
49248: CALL 41009 0 2
49252: ST_TO_ADDR
// if Count ( mpTeamPreset ) >= amount then
49253: LD_LOC 1
49257: PPUSH
49258: CALL 5043 0 1
49262: PUSH
49263: LD_VAR 0 3
49267: GREATEREQUAL
49268: IFFALSE 49364
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
49270: LD_LOC 1
49274: PUSH
49275: LD_VAR 0 6
49279: PUSH
49280: LD_INT 1
49282: PLUS
49283: ARRAY
49284: PPUSH
49285: LD_VAR 0 7
49289: PPUSH
49290: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
49294: LD_VAR 0 7
49298: PPUSH
49299: LD_INT 1
49301: PPUSH
49302: LD_LOC 1
49306: PUSH
49307: LD_VAR 0 6
49311: PUSH
49312: LD_INT 1
49314: PLUS
49315: ARRAY
49316: PPUSH
49317: LD_INT 1
49319: PPUSH
49320: CALL_OW 260
49324: PPUSH
49325: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
49329: LD_VAR 0 7
49333: PPUSH
49334: LD_INT 2
49336: PPUSH
49337: LD_LOC 1
49341: PUSH
49342: LD_VAR 0 6
49346: PUSH
49347: LD_INT 1
49349: PLUS
49350: ARRAY
49351: PPUSH
49352: LD_INT 2
49354: PPUSH
49355: CALL_OW 260
49359: PPUSH
49360: CALL_OW 239
// end ; class := Inc ( class ) ;
49364: LD_ADDR_VAR 0 8
49368: PUSH
49369: LD_VAR 0 8
49373: PPUSH
49374: CALL 42382 0 1
49378: ST_TO_ADDR
// if class = 5 then
49379: LD_VAR 0 8
49383: PUSH
49384: LD_INT 5
49386: EQUAL
49387: IFFALSE 49397
// class := 1 ;
49389: LD_ADDR_VAR 0 8
49393: PUSH
49394: LD_INT 1
49396: ST_TO_ADDR
// end ;
49397: GO 49203
49399: POP
49400: POP
// if not mpTeamPreset then
49401: LD_LOC 1
49405: NOT
49406: IFFALSE 49418
// mpTeamPreset := result ;
49408: LD_ADDR_LOC 1
49412: PUSH
49413: LD_VAR 0 5
49417: ST_TO_ADDR
// end ;
49418: LD_VAR 0 5
49422: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
49423: LD_INT 0
49425: PPUSH
49426: PPUSH
// result := [ ] ;
49427: LD_ADDR_VAR 0 4
49431: PUSH
49432: EMPTY
49433: ST_TO_ADDR
// if not vehicles then
49434: LD_VAR 0 3
49438: NOT
49439: IFFALSE 49443
// exit ;
49441: GO 49657
// for i := 1 to vehicles [ nation ] do
49443: LD_ADDR_VAR 0 5
49447: PUSH
49448: DOUBLE
49449: LD_INT 1
49451: DEC
49452: ST_TO_ADDR
49453: LD_VAR 0 3
49457: PUSH
49458: LD_VAR 0 2
49462: ARRAY
49463: PUSH
49464: FOR_TO
49465: IFFALSE 49655
// begin uc_side := side ;
49467: LD_ADDR_OWVAR 20
49471: PUSH
49472: LD_VAR 0 1
49476: ST_TO_ADDR
// if Count ( vehicles [ nation ] [ i ] ) > 4 then
49477: LD_VAR 0 3
49481: PUSH
49482: LD_VAR 0 2
49486: ARRAY
49487: PUSH
49488: LD_VAR 0 5
49492: ARRAY
49493: PPUSH
49494: CALL 5043 0 1
49498: PUSH
49499: LD_INT 4
49501: GREATER
49502: IFFALSE 49532
// uc_nation := vehicles [ nation ] [ i ] [ 5 ] else
49504: LD_ADDR_OWVAR 21
49508: PUSH
49509: LD_VAR 0 3
49513: PUSH
49514: LD_VAR 0 2
49518: ARRAY
49519: PUSH
49520: LD_VAR 0 5
49524: ARRAY
49525: PUSH
49526: LD_INT 5
49528: ARRAY
49529: ST_TO_ADDR
49530: GO 49542
// uc_nation := nation ;
49532: LD_ADDR_OWVAR 21
49536: PUSH
49537: LD_VAR 0 2
49541: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
49542: LD_VAR 0 3
49546: PUSH
49547: LD_VAR 0 2
49551: ARRAY
49552: PUSH
49553: LD_VAR 0 5
49557: ARRAY
49558: PUSH
49559: LD_INT 1
49561: ARRAY
49562: PPUSH
49563: LD_VAR 0 3
49567: PUSH
49568: LD_VAR 0 2
49572: ARRAY
49573: PUSH
49574: LD_VAR 0 5
49578: ARRAY
49579: PUSH
49580: LD_INT 2
49582: ARRAY
49583: PPUSH
49584: LD_VAR 0 3
49588: PUSH
49589: LD_VAR 0 2
49593: ARRAY
49594: PUSH
49595: LD_VAR 0 5
49599: ARRAY
49600: PUSH
49601: LD_INT 3
49603: ARRAY
49604: PPUSH
49605: LD_VAR 0 3
49609: PUSH
49610: LD_VAR 0 2
49614: ARRAY
49615: PUSH
49616: LD_VAR 0 5
49620: ARRAY
49621: PUSH
49622: LD_INT 4
49624: ARRAY
49625: PPUSH
49626: LD_INT 80
49628: PPUSH
49629: CALL 7839 0 5
// result := Join ( result , CreateVehicle ) ;
49633: LD_ADDR_VAR 0 4
49637: PUSH
49638: LD_VAR 0 4
49642: PPUSH
49643: CALL_OW 45
49647: PPUSH
49648: CALL 41009 0 2
49652: ST_TO_ADDR
// end ;
49653: GO 49464
49655: POP
49656: POP
// end ;
49657: LD_VAR 0 4
49661: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
49662: LD_INT 0
49664: PPUSH
49665: PPUSH
// for i in mpBattleFlags do
49666: LD_ADDR_VAR 0 3
49670: PUSH
49671: LD_EXP 21
49675: PUSH
49676: FOR_IN
49677: IFFALSE 49754
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
49679: LD_VAR 0 3
49683: PPUSH
49684: LD_INT 1
49686: PUSH
49687: LD_VAR 0 1
49691: PUSH
49692: EMPTY
49693: LIST
49694: LIST
49695: PUSH
49696: LD_INT 2
49698: PUSH
49699: LD_VAR 0 1
49703: PUSH
49704: LD_REAL  7.00000000000000E-0001
49707: MUL
49708: PUSH
49709: EMPTY
49710: LIST
49711: LIST
49712: PUSH
49713: LD_INT 3
49715: PUSH
49716: LD_VAR 0 1
49720: PUSH
49721: LD_REAL  4.00000000000000E-0001
49724: MUL
49725: PUSH
49726: EMPTY
49727: LIST
49728: LIST
49729: PUSH
49730: LD_INT 20
49732: PUSH
49733: LD_VAR 0 1
49737: PUSH
49738: EMPTY
49739: LIST
49740: LIST
49741: PUSH
49742: EMPTY
49743: LIST
49744: LIST
49745: LIST
49746: LIST
49747: PPUSH
49748: CALL_OW 423
49752: GO 49676
49754: POP
49755: POP
// end ;
49756: LD_VAR 0 2
49760: RET
// every 0 0$1 trigger mpActive do var i , strength ;
49761: LD_INT 100
49763: IFFALSE 49858
49765: GO 49767
49767: DISABLE
49768: LD_INT 0
49770: PPUSH
49771: PPUSH
// begin if mpBattleFlag <= 0 then
49772: LD_EXP 20
49776: PUSH
49777: LD_INT 0
49779: LESSEQUAL
49780: IFFALSE 49784
// exit ;
49782: GO 49858
// strength := 100 ;
49784: LD_ADDR_VAR 0 2
49788: PUSH
49789: LD_INT 100
49791: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
49792: LD_EXP 20
49796: PPUSH
49797: CALL_OW 67
// strength := Dec ( strength ) ;
49801: LD_ADDR_VAR 0 2
49805: PUSH
49806: LD_VAR 0 2
49810: PPUSH
49811: CALL 42404 0 1
49815: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
49816: LD_VAR 0 2
49820: PPUSH
49821: CALL 49662 0 1
// until not strength ;
49825: LD_VAR 0 2
49829: NOT
49830: IFFALSE 49792
// for i in mpBattleFlags do
49832: LD_ADDR_VAR 0 1
49836: PUSH
49837: LD_EXP 21
49841: PUSH
49842: FOR_IN
49843: IFFALSE 49856
// KillBattleFlag ( i ) ;
49845: LD_VAR 0 1
49849: PPUSH
49850: CALL_OW 419
49854: GO 49842
49856: POP
49857: POP
// end ;
49858: PPOPN 2
49860: END
// every 0 0$1 marked mpActive do var side , tmp ;
49861: GO 49863
49863: DISABLE
49864: LD_INT 0
49866: PPUSH
49867: PPUSH
// begin if mpSibBomb <= 1 then
49868: LD_EXP 26
49872: PUSH
49873: LD_INT 1
49875: LESSEQUAL
49876: IFFALSE 49880
// exit ;
49878: GO 49953
// tmp := mpSibBomb ;
49880: LD_ADDR_VAR 0 2
49884: PUSH
49885: LD_EXP 26
49889: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
49890: LD_INT 35
49892: PPUSH
49893: CALL_OW 67
// tmp := tmp - 0 0$1 ;
49897: LD_ADDR_VAR 0 2
49901: PUSH
49902: LD_VAR 0 2
49906: PUSH
49907: LD_INT 35
49909: MINUS
49910: ST_TO_ADDR
// until not tmp ;
49911: LD_VAR 0 2
49915: NOT
49916: IFFALSE 49890
// for side := 1 to 8 do
49918: LD_ADDR_VAR 0 1
49922: PUSH
49923: DOUBLE
49924: LD_INT 1
49926: DEC
49927: ST_TO_ADDR
49928: LD_INT 8
49930: PUSH
49931: FOR_TO
49932: IFFALSE 49951
// SetTech ( tech_SibFiss , side , state_enabled ) ;
49934: LD_INT 25
49936: PPUSH
49937: LD_VAR 0 1
49941: PPUSH
49942: LD_INT 1
49944: PPUSH
49945: CALL_OW 322
49949: GO 49931
49951: POP
49952: POP
// end ;
49953: PPOPN 2
49955: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
49956: LD_INT 0
49958: PPUSH
49959: PPUSH
49960: PPUSH
// mpBuildUpTimeDelay := 0 ;
49961: LD_ADDR_EXP 45
49965: PUSH
49966: LD_INT 0
49968: ST_TO_ADDR
// if not mpBuildUpTime then
49969: LD_EXP 18
49973: NOT
49974: IFFALSE 49978
// exit ;
49976: GO 50167
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
49978: LD_ADDR_EXP 45
49982: PUSH
49983: LD_INT 8400
49985: PUSH
49986: LD_INT 2100
49988: PUSH
49989: LD_EXP 18
49993: MUL
49994: PLUS
49995: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
49996: LD_ADDR_EXP 46
50000: PUSH
50001: LD_INT 1
50003: ST_TO_ADDR
// for i := 1 to 8 do
50004: LD_ADDR_VAR 0 2
50008: PUSH
50009: DOUBLE
50010: LD_INT 1
50012: DEC
50013: ST_TO_ADDR
50014: LD_INT 8
50016: PUSH
50017: FOR_TO
50018: IFFALSE 50165
// if mpSidePositions [ i ] then
50020: LD_EXP 5
50024: PUSH
50025: LD_VAR 0 2
50029: ARRAY
50030: IFFALSE 50163
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
50032: LD_EXP 17
50036: PUSH
50037: LD_EXP 5
50041: PUSH
50042: LD_VAR 0 2
50046: ARRAY
50047: ARRAY
50048: PPUSH
50049: LD_INT 5
50051: PPUSH
50052: CALL_OW 424
// for j := 1 to 8 do
50056: LD_ADDR_VAR 0 3
50060: PUSH
50061: DOUBLE
50062: LD_INT 1
50064: DEC
50065: ST_TO_ADDR
50066: LD_INT 8
50068: PUSH
50069: FOR_TO
50070: IFFALSE 50161
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
50072: LD_EXP 5
50076: PUSH
50077: LD_VAR 0 3
50081: ARRAY
50082: IFFALSE 50131
50084: PUSH
50085: LD_EXP 6
50089: PUSH
50090: LD_VAR 0 2
50094: ARRAY
50095: PUSH
50096: LD_EXP 6
50100: PUSH
50101: LD_VAR 0 3
50105: ARRAY
50106: NONEQUAL
50107: IFTRUE 50130
50109: PUSH
50110: LD_EXP 9
50114: NOT
50115: IFFALSE 50129
50117: PUSH
50118: LD_VAR 0 2
50122: PUSH
50123: LD_VAR 0 3
50127: NONEQUAL
50128: AND
50129: OR
50130: AND
50131: IFFALSE 50159
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
50133: LD_VAR 0 3
50137: PPUSH
50138: LD_EXP 17
50142: PUSH
50143: LD_EXP 5
50147: PUSH
50148: LD_VAR 0 2
50152: ARRAY
50153: ARRAY
50154: PPUSH
50155: CALL_OW 333
50159: GO 50069
50161: POP
50162: POP
// end ;
50163: GO 50017
50165: POP
50166: POP
// end ;
50167: LD_VAR 0 1
50171: RET
// function EndBuildUp ; var i , j ; begin
50172: LD_INT 0
50174: PPUSH
50175: PPUSH
50176: PPUSH
// mpBuildUpTimeActive := false ;
50177: LD_ADDR_EXP 46
50181: PUSH
50182: LD_INT 0
50184: ST_TO_ADDR
// for i := 1 to 8 do
50185: LD_ADDR_VAR 0 2
50189: PUSH
50190: DOUBLE
50191: LD_INT 1
50193: DEC
50194: ST_TO_ADDR
50195: LD_INT 8
50197: PUSH
50198: FOR_TO
50199: IFFALSE 50346
// if mpSidePositions [ i ] then
50201: LD_EXP 5
50205: PUSH
50206: LD_VAR 0 2
50210: ARRAY
50211: IFFALSE 50344
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
50213: LD_EXP 17
50217: PUSH
50218: LD_EXP 5
50222: PUSH
50223: LD_VAR 0 2
50227: ARRAY
50228: ARRAY
50229: PPUSH
50230: LD_INT 0
50232: PPUSH
50233: CALL_OW 424
// for j := 1 to 8 do
50237: LD_ADDR_VAR 0 3
50241: PUSH
50242: DOUBLE
50243: LD_INT 1
50245: DEC
50246: ST_TO_ADDR
50247: LD_INT 8
50249: PUSH
50250: FOR_TO
50251: IFFALSE 50342
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
50253: LD_EXP 5
50257: PUSH
50258: LD_VAR 0 3
50262: ARRAY
50263: IFFALSE 50312
50265: PUSH
50266: LD_EXP 6
50270: PUSH
50271: LD_VAR 0 2
50275: ARRAY
50276: PUSH
50277: LD_EXP 6
50281: PUSH
50282: LD_VAR 0 3
50286: ARRAY
50287: NONEQUAL
50288: IFTRUE 50311
50290: PUSH
50291: LD_EXP 9
50295: NOT
50296: IFFALSE 50310
50298: PUSH
50299: LD_VAR 0 2
50303: PUSH
50304: LD_VAR 0 3
50308: NONEQUAL
50309: AND
50310: OR
50311: AND
50312: IFFALSE 50340
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
50314: LD_VAR 0 3
50318: PPUSH
50319: LD_EXP 17
50323: PUSH
50324: LD_EXP 5
50328: PUSH
50329: LD_VAR 0 2
50333: ARRAY
50334: ARRAY
50335: PPUSH
50336: CALL_OW 334
50340: GO 50250
50342: POP
50343: POP
// end ;
50344: GO 50198
50346: POP
50347: POP
// end ;
50348: LD_VAR 0 1
50352: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
50353: LD_EXP 46
50357: IFFALSE 50536
50359: GO 50361
50361: DISABLE
50362: LD_INT 0
50364: PPUSH
50365: PPUSH
// begin for i := 1 to 8 do
50366: LD_ADDR_VAR 0 1
50370: PUSH
50371: DOUBLE
50372: LD_INT 1
50374: DEC
50375: ST_TO_ADDR
50376: LD_INT 8
50378: PUSH
50379: FOR_TO
50380: IFFALSE 50533
// if mpSidePositions [ i ] then
50382: LD_EXP 5
50386: PUSH
50387: LD_VAR 0 1
50391: ARRAY
50392: IFFALSE 50531
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
50394: LD_ADDR_VAR 0 2
50398: PUSH
50399: LD_EXP 17
50403: PUSH
50404: LD_EXP 5
50408: PUSH
50409: LD_VAR 0 1
50413: ARRAY
50414: ARRAY
50415: PPUSH
50416: LD_INT 2
50418: PUSH
50419: LD_INT 21
50421: PUSH
50422: LD_INT 1
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: PUSH
50429: LD_INT 21
50431: PUSH
50432: LD_INT 2
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: PUSH
50439: EMPTY
50440: LIST
50441: LIST
50442: LIST
50443: PUSH
50444: LD_INT 22
50446: PUSH
50447: LD_OWVAR 2
50451: PUSH
50452: EMPTY
50453: LIST
50454: LIST
50455: PUSH
50456: EMPTY
50457: LIST
50458: LIST
50459: PPUSH
50460: CALL_OW 70
50464: PUSH
50465: FOR_IN
50466: IFFALSE 50529
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
50468: LD_EXP 6
50472: PUSH
50473: LD_VAR 0 1
50477: ARRAY
50478: PUSH
50479: LD_EXP 6
50483: PUSH
50484: LD_OWVAR 2
50488: ARRAY
50489: NONEQUAL
50490: IFTRUE 50513
50492: PUSH
50493: LD_EXP 9
50497: NOT
50498: IFFALSE 50512
50500: PUSH
50501: LD_VAR 0 1
50505: PUSH
50506: LD_OWVAR 2
50510: NONEQUAL
50511: AND
50512: OR
50513: IFFALSE 50527
// ComMoveToArea ( un , BuildUpEscape ) ;
50515: LD_VAR 0 2
50519: PPUSH
50520: LD_INT 15
50522: PPUSH
50523: CALL_OW 113
50527: GO 50465
50529: POP
50530: POP
50531: GO 50379
50533: POP
50534: POP
// enable ;
50535: ENABLE
// end ;
50536: PPOPN 2
50538: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
50539: LD_EXP 18
50543: IFFALSE 50593
50545: GO 50547
50547: DISABLE
50548: LD_INT 0
50550: PPUSH
// begin tmp := mpBuildUpTime ;
50551: LD_ADDR_VAR 0 1
50555: PUSH
50556: LD_EXP 18
50560: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
50561: LD_INT 35
50563: PPUSH
50564: CALL_OW 67
// tmp := tmp - 0 0$1 ;
50568: LD_ADDR_VAR 0 1
50572: PUSH
50573: LD_VAR 0 1
50577: PUSH
50578: LD_INT 35
50580: MINUS
50581: ST_TO_ADDR
// until not tmp ;
50582: LD_VAR 0 1
50586: NOT
50587: IFFALSE 50561
// EndBuildUp ;
50589: CALL 50172 0 0
// end ;
50593: PPOPN 1
50595: END
// every 0 0$1 trigger mpActive marked mpWin do
50596: LD_INT 100
50598: IFFALSE 50632
50600: GO 50602
50602: DISABLE
// begin if IAmServer then
50603: CALL_OW 518
50607: IFFALSE 50616
// wait ( 0 0$3 ) ;
50609: LD_INT 105
50611: PPUSH
50612: CALL_OW 67
// if Multiplayer then
50616: LD_OWVAR 4
50620: IFFALSE 50628
// YouWinInMultiplayer else
50622: CALL_OW 106
50626: GO 50632
// YouWin ;
50628: CALL_OW 103
// end ;
50632: END
// export function HasPowerByGameType ( gameType , side ) ; begin
50633: LD_INT 0
50635: PPUSH
// result := false ;
50636: LD_ADDR_VAR 0 3
50640: PUSH
50641: LD_INT 0
50643: ST_TO_ADDR
// case gameType of GameTypeNormal , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact :
50644: LD_VAR 0 1
50648: PUSH
50649: LD_INT 1
50651: DOUBLE
50652: EQUAL
50653: IFTRUE 50675
50655: LD_INT 5
50657: DOUBLE
50658: EQUAL
50659: IFTRUE 50675
50661: LD_INT 6
50663: DOUBLE
50664: EQUAL
50665: IFTRUE 50675
50667: LD_INT 7
50669: DOUBLE
50670: EQUAL
50671: IFTRUE 50675
50673: GO 50748
50675: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
50676: LD_ADDR_VAR 0 3
50680: PUSH
50681: LD_INT 22
50683: PUSH
50684: LD_VAR 0 2
50688: PUSH
50689: EMPTY
50690: LIST
50691: LIST
50692: PUSH
50693: LD_INT 2
50695: PUSH
50696: LD_INT 21
50698: PUSH
50699: LD_INT 1
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: PUSH
50706: LD_INT 33
50708: PUSH
50709: LD_INT 3
50711: PUSH
50712: EMPTY
50713: LIST
50714: LIST
50715: PUSH
50716: LD_INT 33
50718: PUSH
50719: LD_INT 5
50721: PUSH
50722: EMPTY
50723: LIST
50724: LIST
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: LIST
50730: LIST
50731: PUSH
50732: EMPTY
50733: LIST
50734: LIST
50735: PPUSH
50736: CALL_OW 69
50740: PPUSH
50741: CALL 5043 0 1
50745: ST_TO_ADDR
// end ; GameTypeSurvival :
50746: GO 50987
50748: LD_INT 2
50750: DOUBLE
50751: EQUAL
50752: IFTRUE 50756
50754: GO 50886
50756: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
50757: LD_ADDR_VAR 0 3
50761: PUSH
50762: LD_INT 22
50764: PUSH
50765: LD_VAR 0 2
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: PUSH
50774: LD_INT 2
50776: PUSH
50777: LD_INT 30
50779: PUSH
50780: LD_INT 0
50782: PUSH
50783: EMPTY
50784: LIST
50785: LIST
50786: PUSH
50787: LD_INT 30
50789: PUSH
50790: LD_INT 1
50792: PUSH
50793: EMPTY
50794: LIST
50795: LIST
50796: PUSH
50797: EMPTY
50798: LIST
50799: LIST
50800: LIST
50801: PUSH
50802: EMPTY
50803: LIST
50804: LIST
50805: PPUSH
50806: CALL_OW 69
50810: PPUSH
50811: CALL 5043 0 1
50815: IFFALSE 50883
50817: PUSH
50818: LD_INT 22
50820: PUSH
50821: LD_VAR 0 2
50825: PUSH
50826: EMPTY
50827: LIST
50828: LIST
50829: PUSH
50830: LD_INT 2
50832: PUSH
50833: LD_INT 21
50835: PUSH
50836: LD_INT 1
50838: PUSH
50839: EMPTY
50840: LIST
50841: LIST
50842: PUSH
50843: LD_INT 33
50845: PUSH
50846: LD_INT 3
50848: PUSH
50849: EMPTY
50850: LIST
50851: LIST
50852: PUSH
50853: LD_INT 33
50855: PUSH
50856: LD_INT 5
50858: PUSH
50859: EMPTY
50860: LIST
50861: LIST
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: LIST
50867: LIST
50868: PUSH
50869: EMPTY
50870: LIST
50871: LIST
50872: PPUSH
50873: CALL_OW 69
50877: PPUSH
50878: CALL 5043 0 1
50882: AND
50883: ST_TO_ADDR
// end ; GameTypeKing :
50884: GO 50987
50886: LD_INT 3
50888: DOUBLE
50889: EQUAL
50890: IFTRUE 50894
50892: GO 50986
50894: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
50895: LD_ADDR_VAR 0 3
50899: PUSH
50900: LD_INT 22
50902: PUSH
50903: LD_VAR 0 2
50907: PUSH
50908: EMPTY
50909: LIST
50910: LIST
50911: PUSH
50912: LD_INT 2
50914: PUSH
50915: LD_INT 21
50917: PUSH
50918: LD_INT 1
50920: PUSH
50921: EMPTY
50922: LIST
50923: LIST
50924: PUSH
50925: LD_INT 33
50927: PUSH
50928: LD_INT 3
50930: PUSH
50931: EMPTY
50932: LIST
50933: LIST
50934: PUSH
50935: LD_INT 33
50937: PUSH
50938: LD_INT 5
50940: PUSH
50941: EMPTY
50942: LIST
50943: LIST
50944: PUSH
50945: EMPTY
50946: LIST
50947: LIST
50948: LIST
50949: LIST
50950: PUSH
50951: EMPTY
50952: LIST
50953: LIST
50954: PPUSH
50955: CALL_OW 69
50959: PPUSH
50960: CALL 5043 0 1
50964: IFFALSE 50983
50966: PUSH
50967: LD_VAR 0 2
50971: PPUSH
50972: CALL 55265 0 1
50976: PUSH
50977: LD_EXP 33
50981: LESS
50982: AND
50983: ST_TO_ADDR
// end ; end ;
50984: GO 50987
50986: POP
// end ;
50987: LD_VAR 0 3
50991: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
50992: LD_INT 100
50994: IFFALSE 51224
50996: GO 50998
50998: DISABLE
50999: LD_INT 0
51001: PPUSH
51002: PPUSH
// begin if Multiplayer then
51003: LD_OWVAR 4
51007: IFFALSE 51015
// SetPlayerSpectator ( ) else
51009: CALL_OW 572
51013: GO 51024
// FogOff ( your_side ) ;
51015: LD_OWVAR 2
51019: PPUSH
51020: CALL_OW 344
// repeat gameIsOn := false ;
51024: LD_ADDR_VAR 0 1
51028: PUSH
51029: LD_INT 0
51031: ST_TO_ADDR
// for i := 1 to 8 do
51032: LD_ADDR_VAR 0 2
51036: PUSH
51037: DOUBLE
51038: LD_INT 1
51040: DEC
51041: ST_TO_ADDR
51042: LD_INT 8
51044: PUSH
51045: FOR_TO
51046: IFFALSE 51176
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
51048: LD_EXP 5
51052: PUSH
51053: LD_VAR 0 2
51057: ARRAY
51058: IFFALSE 51071
51060: PUSH
51061: LD_VAR 0 2
51065: PPUSH
51066: CALL_OW 108
51070: AND
51071: IFFALSE 51085
51073: PUSH
51074: LD_VAR 0 2
51078: PUSH
51079: LD_OWVAR 2
51083: NONEQUAL
51084: AND
51085: IFFALSE 51174
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
51087: LD_EXP 6
51091: PUSH
51092: LD_VAR 0 2
51096: ARRAY
51097: NOT
51098: IFTRUE 51146
51100: PUSH
51101: LD_EXP 6
51105: PUSH
51106: LD_VAR 0 2
51110: ARRAY
51111: PUSH
51112: LD_EXP 6
51116: PUSH
51117: LD_OWVAR 2
51121: ARRAY
51122: NONEQUAL
51123: IFFALSE 51145
51125: PUSH
51126: LD_OWVAR 2
51130: PPUSH
51131: LD_VAR 0 2
51135: PPUSH
51136: CALL_OW 81
51140: PUSH
51141: LD_INT 1
51143: NONEQUAL
51144: AND
51145: OR
51146: IFFALSE 51174
// if HasPowerByGameType ( mpGameType , i ) then
51148: LD_EXP 1
51152: PPUSH
51153: LD_VAR 0 2
51157: PPUSH
51158: CALL 50633 0 2
51162: IFFALSE 51174
// begin gameIsOn := true ;
51164: LD_ADDR_VAR 0 1
51168: PUSH
51169: LD_INT 1
51171: ST_TO_ADDR
// break ;
51172: GO 51176
// end ;
51174: GO 51045
51176: POP
51177: POP
// wait ( 100 ) ;
51178: LD_INT 100
51180: PPUSH
51181: CALL_OW 67
// until not gameIsOn ;
51185: LD_VAR 0 1
51189: NOT
51190: IFFALSE 51024
// if IAmServer then
51192: CALL_OW 518
51196: IFFALSE 51205
// wait ( 0 0$3 ) ;
51198: LD_INT 105
51200: PPUSH
51201: CALL_OW 67
// if Multiplayer then
51205: LD_OWVAR 4
51209: IFFALSE 51217
// YouLostInMultiplayer else
51211: CALL_OW 107
51215: GO 51224
// YouLost (  ) ;
51217: LD_STRING 
51219: PPUSH
51220: CALL_OW 104
// end ;
51224: PPOPN 2
51226: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
51227: LD_EXP 31
51231: IFFALSE 51615
51233: GO 51235
51235: DISABLE
51236: LD_INT 0
51238: PPUSH
51239: PPUSH
51240: PPUSH
51241: PPUSH
51242: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
51243: LD_ADDR_VAR 0 5
51247: PUSH
51248: LD_INT 1
51250: PUSH
51251: LD_INT 2
51253: PUSH
51254: LD_INT 3
51256: PUSH
51257: LD_INT 4
51259: PUSH
51260: LD_INT 5
51262: PUSH
51263: LD_INT 6
51265: PUSH
51266: LD_INT 7
51268: PUSH
51269: LD_INT 8
51271: PUSH
51272: EMPTY
51273: LIST
51274: LIST
51275: LIST
51276: LIST
51277: LIST
51278: LIST
51279: LIST
51280: LIST
51281: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
51282: LD_INT 350
51284: PPUSH
51285: CALL_OW 67
// for i := 1 to 8 do
51289: LD_ADDR_VAR 0 1
51293: PUSH
51294: DOUBLE
51295: LD_INT 1
51297: DEC
51298: ST_TO_ADDR
51299: LD_INT 8
51301: PUSH
51302: FOR_TO
51303: IFFALSE 51585
// begin j := sides [ i ] ;
51305: LD_ADDR_VAR 0 2
51309: PUSH
51310: LD_VAR 0 5
51314: PUSH
51315: LD_VAR 0 1
51319: ARRAY
51320: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
51321: LD_EXP 38
51325: PUSH
51326: LD_VAR 0 2
51330: ARRAY
51331: PPUSH
51332: CALL 5043 0 1
51336: IFFALSE 51349
51338: PUSH
51339: LD_VAR 0 2
51343: PPUSH
51344: CALL_OW 108
51348: AND
51349: IFFALSE 51367
51351: PUSH
51352: LD_EXP 1
51356: PPUSH
51357: LD_VAR 0 2
51361: PPUSH
51362: CALL 50633 0 2
51366: AND
51367: IFFALSE 51583
// begin wait ( mpRespawn div 2 ) ;
51369: LD_EXP 31
51373: PUSH
51374: LD_INT 2
51376: DIV
51377: PPUSH
51378: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
51382: LD_ADDR_VAR 0 3
51386: PUSH
51387: LD_INT 22
51389: PUSH
51390: LD_VAR 0 2
51394: PUSH
51395: EMPTY
51396: LIST
51397: LIST
51398: PUSH
51399: LD_INT 50
51401: PUSH
51402: EMPTY
51403: LIST
51404: PUSH
51405: LD_INT 2
51407: PUSH
51408: LD_INT 30
51410: PUSH
51411: LD_INT 0
51413: PUSH
51414: EMPTY
51415: LIST
51416: LIST
51417: PUSH
51418: LD_INT 30
51420: PUSH
51421: LD_INT 1
51423: PUSH
51424: EMPTY
51425: LIST
51426: LIST
51427: PUSH
51428: EMPTY
51429: LIST
51430: LIST
51431: LIST
51432: PUSH
51433: EMPTY
51434: LIST
51435: LIST
51436: LIST
51437: PPUSH
51438: CALL_OW 69
51442: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
51443: LD_VAR 0 3
51447: NOT
51448: IFTRUE 51462
51450: PUSH
51451: LD_VAR 0 2
51455: PPUSH
51456: CALL_OW 108
51460: NOT
51461: OR
51462: IFTRUE 51481
51464: PUSH
51465: LD_EXP 1
51469: PPUSH
51470: LD_VAR 0 2
51474: PPUSH
51475: CALL 50633 0 2
51479: NOT
51480: OR
51481: IFFALSE 51485
// continue ;
51483: GO 51302
// spawn := tmp [ 1 ] ;
51485: LD_ADDR_VAR 0 4
51489: PUSH
51490: LD_VAR 0 3
51494: PUSH
51495: LD_INT 1
51497: ARRAY
51498: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
51499: LD_EXP 38
51503: PUSH
51504: LD_VAR 0 2
51508: ARRAY
51509: PUSH
51510: LD_INT 1
51512: ARRAY
51513: PPUSH
51514: LD_VAR 0 4
51518: PPUSH
51519: CALL_OW 250
51523: PPUSH
51524: LD_VAR 0 4
51528: PPUSH
51529: CALL_OW 251
51533: PPUSH
51534: LD_INT 32
51536: PPUSH
51537: LD_INT 1
51539: PPUSH
51540: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
51544: LD_ADDR_EXP 38
51548: PUSH
51549: LD_EXP 38
51553: PPUSH
51554: LD_VAR 0 2
51558: PPUSH
51559: LD_EXP 38
51563: PUSH
51564: LD_VAR 0 2
51568: ARRAY
51569: PPUSH
51570: LD_INT 1
51572: PPUSH
51573: CALL_OW 3
51577: PPUSH
51578: CALL_OW 1
51582: ST_TO_ADDR
// end ; end ;
51583: GO 51302
51585: POP
51586: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
51587: LD_ADDR_VAR 0 5
51591: PUSH
51592: LD_VAR 0 5
51596: PPUSH
51597: LD_INT 1
51599: PPUSH
51600: LD_INT 8
51602: PPUSH
51603: LD_INT 1
51605: PPUSH
51606: CALL 7369 0 4
51610: ST_TO_ADDR
// until false ;
51611: LD_INT 0
51613: IFFALSE 51282
// end ;
51615: PPOPN 5
51617: END
// every 0 0$1 marked mpActive do
51618: GO 51620
51620: DISABLE
// begin enable ;
51621: ENABLE
// if not mpDisplayStrings then
51622: LD_EXP 36
51626: NOT
51627: IFFALSE 51638
// begin display_strings := [ ] ;
51629: LD_ADDR_OWVAR 47
51633: PUSH
51634: EMPTY
51635: ST_TO_ADDR
// exit ;
51636: GO 51648
// end ; display_strings := mpDisplayStrings ;
51638: LD_ADDR_OWVAR 47
51642: PUSH
51643: LD_EXP 36
51647: ST_TO_ADDR
// end ; end_of_file
51648: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
51649: LD_INT 0
51651: PPUSH
51652: PPUSH
51653: PPUSH
51654: PPUSH
51655: PPUSH
51656: PPUSH
51657: PPUSH
51658: PPUSH
51659: PPUSH
// if GetType ( un ) = unit_vehicle then
51660: LD_VAR 0 1
51664: PPUSH
51665: CALL_OW 247
51669: PUSH
51670: LD_INT 2
51672: EQUAL
51673: IFFALSE 51677
// exit ;
51675: GO 52351
// side := GetSide ( un ) ;
51677: LD_ADDR_VAR 0 9
51681: PUSH
51682: LD_VAR 0 1
51686: PPUSH
51687: CALL_OW 255
51691: ST_TO_ADDR
// if mpGameType = GameTypeSurvival then
51692: LD_EXP 1
51696: PUSH
51697: LD_INT 2
51699: EQUAL
51700: IFFALSE 51794
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
51702: LD_VAR 0 1
51706: PPUSH
51707: CALL_OW 266
51711: PUSH
51712: LD_INT 0
51714: PUSH
51715: LD_INT 1
51717: PUSH
51718: EMPTY
51719: LIST
51720: LIST
51721: IN
51722: IFFALSE 51794
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
51724: LD_ADDR_VAR 0 3
51728: PUSH
51729: LD_INT 22
51731: PUSH
51732: LD_VAR 0 9
51736: PUSH
51737: EMPTY
51738: LIST
51739: LIST
51740: PUSH
51741: LD_INT 2
51743: PUSH
51744: LD_INT 21
51746: PUSH
51747: LD_INT 1
51749: PUSH
51750: EMPTY
51751: LIST
51752: LIST
51753: PUSH
51754: LD_INT 33
51756: PUSH
51757: LD_INT 3
51759: PUSH
51760: EMPTY
51761: LIST
51762: LIST
51763: PUSH
51764: EMPTY
51765: LIST
51766: LIST
51767: LIST
51768: PUSH
51769: EMPTY
51770: LIST
51771: LIST
51772: PPUSH
51773: CALL_OW 69
51777: PUSH
51778: FOR_IN
51779: IFFALSE 51792
// KillUnit ( i ) ;
51781: LD_VAR 0 3
51785: PPUSH
51786: CALL_OW 66
51790: GO 51778
51792: POP
51793: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
51794: LD_VAR 0 1
51798: PPUSH
51799: CALL_OW 257
51803: PUSH
51804: LD_INT 12
51806: PUSH
51807: LD_INT 17
51809: PUSH
51810: LD_INT 15
51812: PUSH
51813: LD_INT 16
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: LIST
51820: LIST
51821: IN
51822: IFTRUE 51839
51824: PUSH
51825: LD_VAR 0 1
51829: PPUSH
51830: CALL_OW 263
51834: PUSH
51835: LD_INT 5
51837: EQUAL
51838: OR
51839: IFFALSE 52076
// begin tag := 0 ;
51841: LD_ADDR_VAR 0 5
51845: PUSH
51846: LD_INT 0
51848: ST_TO_ADDR
// for i := 1 to 8 do
51849: LD_ADDR_VAR 0 3
51853: PUSH
51854: DOUBLE
51855: LD_INT 1
51857: DEC
51858: ST_TO_ADDR
51859: LD_INT 8
51861: PUSH
51862: FOR_TO
51863: IFFALSE 51897
// if un in mpApePosIndex [ i ] then
51865: LD_VAR 0 1
51869: PUSH
51870: LD_EXP 30
51874: PUSH
51875: LD_VAR 0 3
51879: ARRAY
51880: IN
51881: IFFALSE 51895
// begin tag := i ;
51883: LD_ADDR_VAR 0 5
51887: PUSH
51888: LD_VAR 0 3
51892: ST_TO_ADDR
// break ;
51893: GO 51897
// end ;
51895: GO 51862
51897: POP
51898: POP
// if not tag then
51899: LD_VAR 0 5
51903: NOT
51904: IFFALSE 51908
// exit ;
51906: GO 52351
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
51908: LD_ADDR_VAR 0 7
51912: PUSH
51913: LD_EXP 29
51917: PUSH
51918: LD_EXP 5
51922: PUSH
51923: LD_VAR 0 5
51927: ARRAY
51928: ARRAY
51929: ST_TO_ADDR
// if not area then
51930: LD_VAR 0 7
51934: NOT
51935: IFFALSE 51939
// exit ;
51937: GO 52351
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
51939: LD_INT 14700
51941: PUSH
51942: LD_VAR 0 1
51946: PUSH
51947: LD_INT 5
51949: MOD
51950: PUSH
51951: LD_INT 1
51953: PLUS
51954: PUSH
51955: LD_INT 700
51957: MUL
51958: PLUS
51959: PPUSH
51960: CALL_OW 67
// repeat wait ( 10 ) ;
51964: LD_INT 10
51966: PPUSH
51967: CALL_OW 67
// until not mpBlockRespThread ;
51971: LD_EXP 44
51975: NOT
51976: IFFALSE 51964
// mpBlockRespThread := true ;
51978: LD_ADDR_EXP 44
51982: PUSH
51983: LD_INT 1
51985: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
51986: LD_INT 0
51988: PPUSH
51989: CALL 37136 0 1
// ape := CreateHuman ;
51993: LD_ADDR_VAR 0 4
51997: PUSH
51998: CALL_OW 44
52002: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
52003: LD_ADDR_EXP 30
52007: PUSH
52008: LD_EXP 30
52012: PPUSH
52013: LD_VAR 0 5
52017: PPUSH
52018: LD_EXP 30
52022: PUSH
52023: LD_VAR 0 5
52027: ARRAY
52028: PPUSH
52029: LD_VAR 0 4
52033: PPUSH
52034: CALL 41009 0 2
52038: PPUSH
52039: CALL_OW 1
52043: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
52044: LD_VAR 0 4
52048: PPUSH
52049: LD_VAR 0 7
52053: PPUSH
52054: LD_INT 0
52056: PPUSH
52057: CALL_OW 49
// wait ( 10 ) ;
52061: LD_INT 10
52063: PPUSH
52064: CALL_OW 67
// mpBlockRespThread := false ;
52068: LD_ADDR_EXP 44
52072: PUSH
52073: LD_INT 0
52075: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
52076: LD_VAR 0 1
52080: PPUSH
52081: CALL_OW 247
52085: PUSH
52086: LD_INT 1
52088: EQUAL
52089: IFFALSE 52106
52091: PUSH
52092: LD_VAR 0 1
52096: PPUSH
52097: CALL_OW 248
52101: PUSH
52102: LD_INT 0
52104: GREATER
52105: AND
52106: IFFALSE 52351
// begin if not mpRespawn then
52108: LD_EXP 31
52112: NOT
52113: IFFALSE 52117
// exit ;
52115: GO 52351
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
52117: LD_VAR 0 9
52121: PPUSH
52122: CALL_OW 108
52126: NOT
52127: IFFALSE 52146
52129: PUSH
52130: LD_EXP 1
52134: PPUSH
52135: LD_VAR 0 9
52139: PPUSH
52140: CALL 50633 0 2
52144: NOT
52145: AND
52146: IFFALSE 52150
// exit ;
52148: GO 52351
// side := GetSide ( un ) ;
52150: LD_ADDR_VAR 0 9
52154: PUSH
52155: LD_VAR 0 1
52159: PPUSH
52160: CALL_OW 255
52164: ST_TO_ADDR
// nation := GetNation ( un ) ;
52165: LD_ADDR_VAR 0 8
52169: PUSH
52170: LD_VAR 0 1
52174: PPUSH
52175: CALL_OW 248
52179: ST_TO_ADDR
// class := GetClass ( un ) ;
52180: LD_ADDR_VAR 0 6
52184: PUSH
52185: LD_VAR 0 1
52189: PPUSH
52190: CALL_OW 257
52194: ST_TO_ADDR
// if class > 4 then
52195: LD_VAR 0 6
52199: PUSH
52200: LD_INT 4
52202: GREATER
52203: IFFALSE 52213
// class := 1 ;
52205: LD_ADDR_VAR 0 6
52209: PUSH
52210: LD_INT 1
52212: ST_TO_ADDR
// repeat wait ( 10 ) ;
52213: LD_INT 10
52215: PPUSH
52216: CALL_OW 67
// until not mpBlockRespThread ;
52220: LD_EXP 44
52224: NOT
52225: IFFALSE 52213
// mpBlockRespThread := true ;
52227: LD_ADDR_EXP 44
52231: PUSH
52232: LD_INT 1
52234: ST_TO_ADDR
// uc_side := side ;
52235: LD_ADDR_OWVAR 20
52239: PUSH
52240: LD_VAR 0 9
52244: ST_TO_ADDR
// uc_nation := nation ;
52245: LD_ADDR_OWVAR 21
52249: PUSH
52250: LD_VAR 0 8
52254: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
52255: LD_INT 0
52257: PPUSH
52258: LD_VAR 0 6
52262: PPUSH
52263: LD_INT 2
52265: PPUSH
52266: CALL_OW 380
// un := CreateHuman ;
52270: LD_ADDR_VAR 0 1
52274: PUSH
52275: CALL_OW 44
52279: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
52280: LD_ADDR_EXP 38
52284: PUSH
52285: LD_EXP 38
52289: PPUSH
52290: LD_VAR 0 9
52294: PPUSH
52295: LD_EXP 38
52299: PUSH
52300: LD_VAR 0 9
52304: ARRAY
52305: PPUSH
52306: LD_EXP 38
52310: PUSH
52311: LD_VAR 0 9
52315: ARRAY
52316: PUSH
52317: LD_INT 1
52319: PLUS
52320: PPUSH
52321: LD_VAR 0 1
52325: PPUSH
52326: CALL_OW 1
52330: PPUSH
52331: CALL_OW 1
52335: ST_TO_ADDR
// wait ( 10 ) ;
52336: LD_INT 10
52338: PPUSH
52339: CALL_OW 67
// mpBlockRespThread := false ;
52343: LD_ADDR_EXP 44
52347: PUSH
52348: LD_INT 0
52350: ST_TO_ADDR
// end ; end ;
52351: LD_VAR 0 2
52355: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
52356: LD_INT 0
52358: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
52359: LD_VAR 0 1
52363: PPUSH
52364: CALL_OW 266
52368: PUSH
52369: LD_INT 0
52371: PUSH
52372: LD_INT 1
52374: PUSH
52375: EMPTY
52376: LIST
52377: LIST
52378: IN
52379: IFFALSE 52404
// SetBName ( building , @ & GetSide ( building ) ) ;
52381: LD_VAR 0 1
52385: PPUSH
52386: LD_STRING @
52388: PUSH
52389: LD_VAR 0 1
52393: PPUSH
52394: CALL_OW 255
52398: STR
52399: PPUSH
52400: CALL_OW 500
// end ;
52404: LD_VAR 0 2
52408: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
52409: LD_INT 0
52411: PPUSH
52412: PPUSH
// if mpGameType = GameTypeSurvival and GetBType ( building ) in [ b_depot , b_warehouse ] then
52413: LD_EXP 1
52417: PUSH
52418: LD_INT 2
52420: EQUAL
52421: IFFALSE 52445
52423: PUSH
52424: LD_VAR 0 1
52428: PPUSH
52429: CALL_OW 266
52433: PUSH
52434: LD_INT 0
52436: PUSH
52437: LD_INT 1
52439: PUSH
52440: EMPTY
52441: LIST
52442: LIST
52443: IN
52444: AND
52445: IFFALSE 52524
// begin SetSide ( building , oldSide ) ;
52447: LD_VAR 0 1
52451: PPUSH
52452: LD_VAR 0 2
52456: PPUSH
52457: CALL_OW 235
// KillUnit ( building ) ;
52461: LD_VAR 0 1
52465: PPUSH
52466: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
52470: LD_ADDR_VAR 0 5
52474: PUSH
52475: LD_INT 22
52477: PUSH
52478: LD_VAR 0 2
52482: PUSH
52483: EMPTY
52484: LIST
52485: LIST
52486: PUSH
52487: LD_INT 21
52489: PUSH
52490: LD_INT 1
52492: PUSH
52493: EMPTY
52494: LIST
52495: LIST
52496: PUSH
52497: EMPTY
52498: LIST
52499: LIST
52500: PPUSH
52501: CALL_OW 69
52505: PUSH
52506: FOR_IN
52507: IFFALSE 52520
// KillUnit ( i ) ;
52509: LD_VAR 0 5
52513: PPUSH
52514: CALL_OW 66
52518: GO 52506
52520: POP
52521: POP
// exit ;
52522: GO 52569
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
52524: LD_VAR 0 1
52528: PPUSH
52529: CALL_OW 266
52533: PUSH
52534: LD_INT 0
52536: PUSH
52537: LD_INT 1
52539: PUSH
52540: EMPTY
52541: LIST
52542: LIST
52543: IN
52544: IFFALSE 52569
// SetBName ( building , @ & GetSide ( building ) ) ;
52546: LD_VAR 0 1
52550: PPUSH
52551: LD_STRING @
52553: PUSH
52554: LD_VAR 0 1
52558: PPUSH
52559: CALL_OW 255
52563: STR
52564: PPUSH
52565: CALL_OW 500
// end ;
52569: LD_VAR 0 4
52573: RET
// export function Multiplayer_OilExtracted ( building , side , base , amount ) ; var i , value ; begin
52574: LD_INT 0
52576: PPUSH
52577: PPUSH
52578: PPUSH
// if mpGameType <> GameTypeFamine then
52579: LD_EXP 1
52583: PUSH
52584: LD_INT 5
52586: NONEQUAL
52587: IFFALSE 52591
// exit ;
52589: GO 52806
// for i := 1 to mpGlobalOilDeposits do
52591: LD_ADDR_VAR 0 6
52595: PUSH
52596: DOUBLE
52597: LD_INT 1
52599: DEC
52600: ST_TO_ADDR
52601: LD_EXP 39
52605: PUSH
52606: FOR_TO
52607: IFFALSE 52804
// begin if HexInfo ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) = building then
52609: LD_EXP 39
52613: PUSH
52614: LD_VAR 0 6
52618: ARRAY
52619: PUSH
52620: LD_INT 1
52622: ARRAY
52623: PPUSH
52624: LD_EXP 39
52628: PUSH
52629: LD_VAR 0 6
52633: ARRAY
52634: PUSH
52635: LD_INT 2
52637: ARRAY
52638: PPUSH
52639: CALL_OW 428
52643: PUSH
52644: LD_VAR 0 1
52648: EQUAL
52649: IFFALSE 52802
// begin value := mpGlobalOilDeposits [ i ] [ 3 ] ;
52651: LD_ADDR_VAR 0 7
52655: PUSH
52656: LD_EXP 39
52660: PUSH
52661: LD_VAR 0 6
52665: ARRAY
52666: PUSH
52667: LD_INT 3
52669: ARRAY
52670: ST_TO_ADDR
// value := value - amount ;
52671: LD_ADDR_VAR 0 7
52675: PUSH
52676: LD_VAR 0 7
52680: PUSH
52681: LD_VAR 0 4
52685: MINUS
52686: ST_TO_ADDR
// mpGlobalOilDeposits := Replace ( mpGlobalOilDeposits , i , Replace ( mpGlobalOilDeposits [ i ] , 3 , value ) ) ;
52687: LD_ADDR_EXP 39
52691: PUSH
52692: LD_EXP 39
52696: PPUSH
52697: LD_VAR 0 6
52701: PPUSH
52702: LD_EXP 39
52706: PUSH
52707: LD_VAR 0 6
52711: ARRAY
52712: PPUSH
52713: LD_INT 3
52715: PPUSH
52716: LD_VAR 0 7
52720: PPUSH
52721: CALL_OW 1
52725: PPUSH
52726: CALL_OW 1
52730: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
52731: LD_VAR 0 1
52735: PPUSH
52736: LD_VAR 0 7
52740: PPUSH
52741: CALL_OW 505
// if value <= 0 then
52745: LD_VAR 0 7
52749: PUSH
52750: LD_INT 0
52752: LESSEQUAL
52753: IFFALSE 52802
// begin RemoveDepositXY ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) ;
52755: LD_EXP 39
52759: PUSH
52760: LD_VAR 0 6
52764: ARRAY
52765: PUSH
52766: LD_INT 1
52768: ARRAY
52769: PPUSH
52770: LD_EXP 39
52774: PUSH
52775: LD_VAR 0 6
52779: ARRAY
52780: PUSH
52781: LD_INT 2
52783: ARRAY
52784: PPUSH
52785: CALL_OW 63
// KillUnit ( building ) ;
52789: LD_VAR 0 1
52793: PPUSH
52794: CALL_OW 66
// exit ;
52798: POP
52799: POP
52800: GO 52806
// end ; end ; end ;
52802: GO 52606
52804: POP
52805: POP
// end ;
52806: LD_VAR 0 5
52810: RET
// export function Multiplayer_SibExtracted ( building , side , base , amount ) ; var i , value ; begin
52811: LD_INT 0
52813: PPUSH
52814: PPUSH
52815: PPUSH
// if mpGameType <> GameTypeFamine then
52816: LD_EXP 1
52820: PUSH
52821: LD_INT 5
52823: NONEQUAL
52824: IFFALSE 52828
// exit ;
52826: GO 53043
// for i := 1 to mpGlobalSibDeposits do
52828: LD_ADDR_VAR 0 6
52832: PUSH
52833: DOUBLE
52834: LD_INT 1
52836: DEC
52837: ST_TO_ADDR
52838: LD_EXP 40
52842: PUSH
52843: FOR_TO
52844: IFFALSE 53041
// begin if HexInfo ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) = building then
52846: LD_EXP 40
52850: PUSH
52851: LD_VAR 0 6
52855: ARRAY
52856: PUSH
52857: LD_INT 1
52859: ARRAY
52860: PPUSH
52861: LD_EXP 40
52865: PUSH
52866: LD_VAR 0 6
52870: ARRAY
52871: PUSH
52872: LD_INT 2
52874: ARRAY
52875: PPUSH
52876: CALL_OW 428
52880: PUSH
52881: LD_VAR 0 1
52885: EQUAL
52886: IFFALSE 53039
// begin value := mpGlobalSibDeposits [ i ] [ 3 ] ;
52888: LD_ADDR_VAR 0 7
52892: PUSH
52893: LD_EXP 40
52897: PUSH
52898: LD_VAR 0 6
52902: ARRAY
52903: PUSH
52904: LD_INT 3
52906: ARRAY
52907: ST_TO_ADDR
// value := value - amount ;
52908: LD_ADDR_VAR 0 7
52912: PUSH
52913: LD_VAR 0 7
52917: PUSH
52918: LD_VAR 0 4
52922: MINUS
52923: ST_TO_ADDR
// mpGlobalSibDeposits := Replace ( mpGlobalSibDeposits , i , Replace ( mpGlobalSibDeposits [ i ] , 3 , value ) ) ;
52924: LD_ADDR_EXP 40
52928: PUSH
52929: LD_EXP 40
52933: PPUSH
52934: LD_VAR 0 6
52938: PPUSH
52939: LD_EXP 40
52943: PUSH
52944: LD_VAR 0 6
52948: ARRAY
52949: PPUSH
52950: LD_INT 3
52952: PPUSH
52953: LD_VAR 0 7
52957: PPUSH
52958: CALL_OW 1
52962: PPUSH
52963: CALL_OW 1
52967: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
52968: LD_VAR 0 1
52972: PPUSH
52973: LD_VAR 0 7
52977: PPUSH
52978: CALL_OW 505
// if value <= 0 then
52982: LD_VAR 0 7
52986: PUSH
52987: LD_INT 0
52989: LESSEQUAL
52990: IFFALSE 53039
// begin RemoveDepositXY ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) ;
52992: LD_EXP 40
52996: PUSH
52997: LD_VAR 0 6
53001: ARRAY
53002: PUSH
53003: LD_INT 1
53005: ARRAY
53006: PPUSH
53007: LD_EXP 40
53011: PUSH
53012: LD_VAR 0 6
53016: ARRAY
53017: PUSH
53018: LD_INT 2
53020: ARRAY
53021: PPUSH
53022: CALL_OW 63
// KillUnit ( building ) ;
53026: LD_VAR 0 1
53030: PPUSH
53031: CALL_OW 66
// exit ;
53035: POP
53036: POP
53037: GO 53043
// end ; end ; end ;
53039: GO 52843
53041: POP
53042: POP
// end ;
53043: LD_VAR 0 5
53047: RET
// export function Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ; var side ; begin
53048: LD_INT 0
53050: PPUSH
53051: PPUSH
// side := GetSide ( factory ) ;
53052: LD_ADDR_VAR 0 7
53056: PUSH
53057: LD_VAR 0 1
53061: PPUSH
53062: CALL_OW 255
53066: ST_TO_ADDR
// if weapon = ar_miner and FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , ar_miner ] ] ) > 0 then
53067: LD_VAR 0 5
53071: PUSH
53072: LD_INT 81
53074: EQUAL
53075: IFFALSE 53113
53077: PUSH
53078: LD_INT 22
53080: PUSH
53081: LD_VAR 0 7
53085: PUSH
53086: EMPTY
53087: LIST
53088: LIST
53089: PUSH
53090: LD_INT 34
53092: PUSH
53093: LD_INT 81
53095: PUSH
53096: EMPTY
53097: LIST
53098: LIST
53099: PUSH
53100: EMPTY
53101: LIST
53102: LIST
53103: PPUSH
53104: CALL_OW 69
53108: PUSH
53109: LD_INT 0
53111: GREATER
53112: AND
53113: IFFALSE 53146
// begin ComCancel ( factory ) ;
53115: LD_VAR 0 1
53119: PPUSH
53120: CALL_OW 127
// if side = your_side then
53124: LD_VAR 0 7
53128: PUSH
53129: LD_OWVAR 2
53133: EQUAL
53134: IFFALSE 53146
// HintSpec ( VehLimit , 2 ) ;
53136: LD_STRING VehLimit
53138: PPUSH
53139: LD_INT 2
53141: PPUSH
53142: CALL_OW 338
// end ; end ;
53146: LD_VAR 0 6
53150: RET
// export function Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; var i , j ; begin
53151: LD_INT 0
53153: PPUSH
53154: PPUSH
53155: PPUSH
// if GetWeapon ( newId ) = ar_miner and GetControl ( newId ) = control_manual then
53156: LD_VAR 0 1
53160: PPUSH
53161: CALL_OW 264
53165: PUSH
53166: LD_INT 81
53168: EQUAL
53169: IFFALSE 53186
53171: PUSH
53172: LD_VAR 0 1
53176: PPUSH
53177: CALL_OW 263
53181: PUSH
53182: LD_INT 1
53184: EQUAL
53185: AND
53186: IFFALSE 53466
// begin for i := 1 to Count ( minersList ) do
53188: LD_ADDR_VAR 0 6
53192: PUSH
53193: DOUBLE
53194: LD_INT 1
53196: DEC
53197: ST_TO_ADDR
53198: LD_EXP 55
53202: PPUSH
53203: CALL 5043 0 1
53207: PUSH
53208: FOR_TO
53209: IFFALSE 53327
// begin if minersList [ i ] = oldId then
53211: LD_EXP 55
53215: PUSH
53216: LD_VAR 0 6
53220: ARRAY
53221: PUSH
53222: LD_VAR 0 2
53226: EQUAL
53227: IFFALSE 53325
// begin for j := 1 to minerMinesList [ i ] do
53229: LD_ADDR_VAR 0 7
53233: PUSH
53234: DOUBLE
53235: LD_INT 1
53237: DEC
53238: ST_TO_ADDR
53239: LD_EXP 56
53243: PUSH
53244: LD_VAR 0 6
53248: ARRAY
53249: PUSH
53250: FOR_TO
53251: IFFALSE 53301
// RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
53253: LD_EXP 56
53257: PUSH
53258: LD_VAR 0 6
53262: ARRAY
53263: PUSH
53264: LD_VAR 0 7
53268: ARRAY
53269: PUSH
53270: LD_INT 1
53272: ARRAY
53273: PPUSH
53274: LD_EXP 56
53278: PUSH
53279: LD_VAR 0 6
53283: ARRAY
53284: PUSH
53285: LD_VAR 0 7
53289: ARRAY
53290: PUSH
53291: LD_INT 2
53293: ARRAY
53294: PPUSH
53295: CALL_OW 612
53299: GO 53250
53301: POP
53302: POP
// minerMinesList := Delete ( minerMinesList , i ) ;
53303: LD_ADDR_EXP 56
53307: PUSH
53308: LD_EXP 56
53312: PPUSH
53313: LD_VAR 0 6
53317: PPUSH
53318: CALL_OW 3
53322: ST_TO_ADDR
// break ;
53323: GO 53327
// end ; end ;
53325: GO 53208
53327: POP
53328: POP
// minersList := minersList diff oldId ;
53329: LD_ADDR_EXP 55
53333: PUSH
53334: LD_EXP 55
53338: PUSH
53339: LD_VAR 0 2
53343: DIFF
53344: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_weapon , ar_miner ] ] ) > 1 then
53345: LD_INT 22
53347: PUSH
53348: LD_VAR 0 4
53352: PPUSH
53353: CALL_OW 255
53357: PUSH
53358: EMPTY
53359: LIST
53360: LIST
53361: PUSH
53362: LD_INT 34
53364: PUSH
53365: LD_INT 81
53367: PUSH
53368: EMPTY
53369: LIST
53370: LIST
53371: PUSH
53372: EMPTY
53373: LIST
53374: LIST
53375: PPUSH
53376: CALL_OW 69
53380: PUSH
53381: LD_INT 1
53383: GREATER
53384: IFFALSE 53411
// begin ComExit ( unit ) ;
53386: LD_VAR 0 4
53390: PPUSH
53391: CALL 41407 0 1
// SetSide ( newId , oldSide ) ;
53395: LD_VAR 0 1
53399: PPUSH
53400: LD_VAR 0 3
53404: PPUSH
53405: CALL_OW 235
// exit ;
53409: GO 53466
// end ; minersList := Replace ( minersList , minersList + 1 , newId ) ;
53411: LD_ADDR_EXP 55
53415: PUSH
53416: LD_EXP 55
53420: PPUSH
53421: LD_EXP 55
53425: PUSH
53426: LD_INT 1
53428: PLUS
53429: PPUSH
53430: LD_VAR 0 1
53434: PPUSH
53435: CALL_OW 1
53439: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
53440: LD_ADDR_EXP 56
53444: PUSH
53445: LD_EXP 56
53449: PPUSH
53450: LD_EXP 56
53454: PUSH
53455: LD_INT 1
53457: PLUS
53458: PPUSH
53459: EMPTY
53460: PPUSH
53461: CALL_OW 1
53465: ST_TO_ADDR
// end ; end ; end_of_file
53466: LD_VAR 0 5
53470: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
53471: LD_EXP 37
53475: IFFALSE 53483
53477: PUSH
53478: CALL 53693 0 0
53482: AND
53483: IFFALSE 53491
53485: PUSH
53486: LD_OWVAR 4
53490: AND
53491: IFFALSE 53690
53493: GO 53495
53495: DISABLE
53496: LD_INT 0
53498: PPUSH
53499: PPUSH
// begin canWin := false ;
53500: LD_ADDR_VAR 0 2
53504: PUSH
53505: LD_INT 0
53507: ST_TO_ADDR
// if not HasPower ( your_side ) then
53508: LD_OWVAR 2
53512: PPUSH
53513: CALL 53735 0 1
53517: NOT
53518: IFFALSE 53529
// begin Multiplayer_Loose_Message ;
53520: CALL_OW 521
// enable ( mpLose ) ;
53524: LD_INT 102
53526: ENABLE_MARKED
// end else
53527: GO 53690
// begin canWin := true ;
53529: LD_ADDR_VAR 0 2
53533: PUSH
53534: LD_INT 1
53536: ST_TO_ADDR
// for i := 1 to 8 do
53537: LD_ADDR_VAR 0 1
53541: PUSH
53542: DOUBLE
53543: LD_INT 1
53545: DEC
53546: ST_TO_ADDR
53547: LD_INT 8
53549: PUSH
53550: FOR_TO
53551: IFFALSE 53676
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
53553: LD_EXP 5
53557: PUSH
53558: LD_VAR 0 1
53562: ARRAY
53563: IFFALSE 53576
53565: PUSH
53566: LD_VAR 0 1
53570: PPUSH
53571: CALL_OW 108
53575: AND
53576: IFFALSE 53590
53578: PUSH
53579: LD_VAR 0 1
53583: PUSH
53584: LD_OWVAR 2
53588: NONEQUAL
53589: AND
53590: IFFALSE 53674
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
53592: LD_EXP 6
53596: PUSH
53597: LD_VAR 0 1
53601: ARRAY
53602: NOT
53603: IFTRUE 53651
53605: PUSH
53606: LD_EXP 6
53610: PUSH
53611: LD_VAR 0 1
53615: ARRAY
53616: PUSH
53617: LD_EXP 6
53621: PUSH
53622: LD_OWVAR 2
53626: ARRAY
53627: NONEQUAL
53628: IFFALSE 53650
53630: PUSH
53631: LD_OWVAR 2
53635: PPUSH
53636: LD_VAR 0 1
53640: PPUSH
53641: CALL_OW 81
53645: PUSH
53646: LD_INT 1
53648: NONEQUAL
53649: AND
53650: OR
53651: IFFALSE 53674
// if HasPower ( i ) then
53653: LD_VAR 0 1
53657: PPUSH
53658: CALL 53735 0 1
53662: IFFALSE 53674
// begin canWin := false ;
53664: LD_ADDR_VAR 0 2
53668: PUSH
53669: LD_INT 0
53671: ST_TO_ADDR
// break ;
53672: GO 53676
// end ;
53674: GO 53550
53676: POP
53677: POP
// if canWin then
53678: LD_VAR 0 2
53682: IFFALSE 53689
// enable ( mpWin ) else
53684: LD_INT 101
53686: ENABLE_MARKED
53687: GO 53690
// enable ;
53689: ENABLE
// end ; end ;
53690: PPOPN 2
53692: END
// function CanWinLoose ; begin
53693: LD_INT 0
53695: PPUSH
// result := true ;
53696: LD_ADDR_VAR 0 1
53700: PUSH
53701: LD_INT 1
53703: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
53704: CALL_OW 531
53708: IFFALSE 53720
53710: PUSH
53711: CALL_OW 519
53715: PUSH
53716: LD_INT 1
53718: GREATER
53719: AND
53720: IFFALSE 53730
// result := false ;
53722: LD_ADDR_VAR 0 1
53726: PUSH
53727: LD_INT 0
53729: ST_TO_ADDR
// end ;
53730: LD_VAR 0 1
53734: RET
// function HasPower ( i ) ; begin
53735: LD_INT 0
53737: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
53738: LD_ADDR_VAR 0 2
53742: PUSH
53743: LD_INT 22
53745: PUSH
53746: LD_VAR 0 1
53750: PUSH
53751: EMPTY
53752: LIST
53753: LIST
53754: PUSH
53755: LD_INT 2
53757: PUSH
53758: LD_INT 21
53760: PUSH
53761: LD_INT 1
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: PUSH
53768: LD_INT 33
53770: PUSH
53771: LD_INT 3
53773: PUSH
53774: EMPTY
53775: LIST
53776: LIST
53777: PUSH
53778: LD_INT 33
53780: PUSH
53781: LD_INT 5
53783: PUSH
53784: EMPTY
53785: LIST
53786: LIST
53787: PUSH
53788: EMPTY
53789: LIST
53790: LIST
53791: LIST
53792: LIST
53793: PUSH
53794: EMPTY
53795: LIST
53796: LIST
53797: PPUSH
53798: CALL_OW 69
53802: ST_TO_ADDR
// end ; end_of_file
53803: LD_VAR 0 2
53807: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
53808: LD_EXP 37
53812: IFFALSE 53855
53814: GO 53816
53816: DISABLE
53817: LD_INT 0
53819: PPUSH
// begin for i := 1 to 8 do
53820: LD_ADDR_VAR 0 1
53824: PUSH
53825: DOUBLE
53826: LD_INT 1
53828: DEC
53829: ST_TO_ADDR
53830: LD_INT 8
53832: PUSH
53833: FOR_TO
53834: IFFALSE 53853
// SetRestrict ( b_depot , i , state_disabled ) ;
53836: LD_INT 0
53838: PPUSH
53839: LD_VAR 0 1
53843: PPUSH
53844: LD_INT 0
53846: PPUSH
53847: CALL_OW 324
53851: GO 53833
53853: POP
53854: POP
// end ;
53855: PPOPN 1
53857: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
53858: LD_EXP 37
53862: IFFALSE 53870
53864: PUSH
53865: CALL 54080 0 0
53869: AND
53870: IFFALSE 53878
53872: PUSH
53873: LD_OWVAR 4
53877: AND
53878: IFFALSE 54077
53880: GO 53882
53882: DISABLE
53883: LD_INT 0
53885: PPUSH
53886: PPUSH
// begin canWin := false ;
53887: LD_ADDR_VAR 0 2
53891: PUSH
53892: LD_INT 0
53894: ST_TO_ADDR
// if not HasPower ( your_side ) then
53895: LD_OWVAR 2
53899: PPUSH
53900: CALL 54122 0 1
53904: NOT
53905: IFFALSE 53916
// begin Multiplayer_Loose_Message ;
53907: CALL_OW 521
// enable ( mpLose ) ;
53911: LD_INT 102
53913: ENABLE_MARKED
// end else
53914: GO 54077
// begin canWin := true ;
53916: LD_ADDR_VAR 0 2
53920: PUSH
53921: LD_INT 1
53923: ST_TO_ADDR
// for i := 1 to 8 do
53924: LD_ADDR_VAR 0 1
53928: PUSH
53929: DOUBLE
53930: LD_INT 1
53932: DEC
53933: ST_TO_ADDR
53934: LD_INT 8
53936: PUSH
53937: FOR_TO
53938: IFFALSE 54063
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
53940: LD_EXP 5
53944: PUSH
53945: LD_VAR 0 1
53949: ARRAY
53950: IFFALSE 53963
53952: PUSH
53953: LD_VAR 0 1
53957: PPUSH
53958: CALL_OW 108
53962: AND
53963: IFFALSE 53977
53965: PUSH
53966: LD_VAR 0 1
53970: PUSH
53971: LD_OWVAR 2
53975: NONEQUAL
53976: AND
53977: IFFALSE 54061
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
53979: LD_EXP 6
53983: PUSH
53984: LD_VAR 0 1
53988: ARRAY
53989: NOT
53990: IFTRUE 54038
53992: PUSH
53993: LD_EXP 6
53997: PUSH
53998: LD_VAR 0 1
54002: ARRAY
54003: PUSH
54004: LD_EXP 6
54008: PUSH
54009: LD_OWVAR 2
54013: ARRAY
54014: NONEQUAL
54015: IFFALSE 54037
54017: PUSH
54018: LD_OWVAR 2
54022: PPUSH
54023: LD_VAR 0 1
54027: PPUSH
54028: CALL_OW 81
54032: PUSH
54033: LD_INT 1
54035: NONEQUAL
54036: AND
54037: OR
54038: IFFALSE 54061
// if HasPower ( i ) then
54040: LD_VAR 0 1
54044: PPUSH
54045: CALL 54122 0 1
54049: IFFALSE 54061
// begin canWin := false ;
54051: LD_ADDR_VAR 0 2
54055: PUSH
54056: LD_INT 0
54058: ST_TO_ADDR
// break ;
54059: GO 54063
// end ;
54061: GO 53937
54063: POP
54064: POP
// if canWin then
54065: LD_VAR 0 2
54069: IFFALSE 54076
// enable ( mpWin ) else
54071: LD_INT 101
54073: ENABLE_MARKED
54074: GO 54077
// enable ;
54076: ENABLE
// end ; end ;
54077: PPOPN 2
54079: END
// function CanWinLoose ; begin
54080: LD_INT 0
54082: PPUSH
// result := true ;
54083: LD_ADDR_VAR 0 1
54087: PUSH
54088: LD_INT 1
54090: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
54091: CALL_OW 531
54095: IFFALSE 54107
54097: PUSH
54098: CALL_OW 519
54102: PUSH
54103: LD_INT 1
54105: GREATER
54106: AND
54107: IFFALSE 54117
// result := false ;
54109: LD_ADDR_VAR 0 1
54113: PUSH
54114: LD_INT 0
54116: ST_TO_ADDR
// end ;
54117: LD_VAR 0 1
54121: RET
// function HasPower ( i ) ; begin
54122: LD_INT 0
54124: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
54125: LD_INT 22
54127: PUSH
54128: LD_VAR 0 1
54132: PUSH
54133: EMPTY
54134: LIST
54135: LIST
54136: PUSH
54137: LD_INT 2
54139: PUSH
54140: LD_INT 30
54142: PUSH
54143: LD_INT 0
54145: PUSH
54146: EMPTY
54147: LIST
54148: LIST
54149: PUSH
54150: LD_INT 30
54152: PUSH
54153: LD_INT 1
54155: PUSH
54156: EMPTY
54157: LIST
54158: LIST
54159: PUSH
54160: EMPTY
54161: LIST
54162: LIST
54163: LIST
54164: PUSH
54165: EMPTY
54166: LIST
54167: LIST
54168: PPUSH
54169: CALL_OW 69
54173: NOT
54174: IFFALSE 54178
// exit ;
54176: GO 54243
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
54178: LD_ADDR_VAR 0 2
54182: PUSH
54183: LD_INT 22
54185: PUSH
54186: LD_VAR 0 1
54190: PUSH
54191: EMPTY
54192: LIST
54193: LIST
54194: PUSH
54195: LD_INT 2
54197: PUSH
54198: LD_INT 21
54200: PUSH
54201: LD_INT 1
54203: PUSH
54204: EMPTY
54205: LIST
54206: LIST
54207: PUSH
54208: LD_INT 33
54210: PUSH
54211: LD_INT 3
54213: PUSH
54214: EMPTY
54215: LIST
54216: LIST
54217: PUSH
54218: LD_INT 33
54220: PUSH
54221: LD_INT 5
54223: PUSH
54224: EMPTY
54225: LIST
54226: LIST
54227: PUSH
54228: EMPTY
54229: LIST
54230: LIST
54231: LIST
54232: LIST
54233: PUSH
54234: EMPTY
54235: LIST
54236: LIST
54237: PPUSH
54238: CALL_OW 69
54242: ST_TO_ADDR
// end ; end_of_file
54243: LD_VAR 0 2
54247: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
54248: LD_EXP 37
54252: IFFALSE 54591
54254: GO 54256
54256: DISABLE
54257: LD_INT 0
54259: PPUSH
54260: PPUSH
54261: PPUSH
// begin mpKingPoints := [ ] ;
54262: LD_ADDR_EXP 47
54266: PUSH
54267: EMPTY
54268: ST_TO_ADDR
// if mpTeamGame then
54269: LD_EXP 9
54273: IFFALSE 54327
// begin for i := 1 to Count ( mpTeams ) do
54275: LD_ADDR_VAR 0 1
54279: PUSH
54280: DOUBLE
54281: LD_INT 1
54283: DEC
54284: ST_TO_ADDR
54285: LD_EXP 8
54289: PPUSH
54290: CALL 5043 0 1
54294: PUSH
54295: FOR_TO
54296: IFFALSE 54323
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
54298: LD_ADDR_EXP 47
54302: PUSH
54303: LD_EXP 47
54307: PPUSH
54308: LD_VAR 0 1
54312: PPUSH
54313: LD_INT 0
54315: PPUSH
54316: CALL_OW 1
54320: ST_TO_ADDR
54321: GO 54295
54323: POP
54324: POP
// end else
54325: GO 54370
// begin for i := 1 to 8 do
54327: LD_ADDR_VAR 0 1
54331: PUSH
54332: DOUBLE
54333: LD_INT 1
54335: DEC
54336: ST_TO_ADDR
54337: LD_INT 8
54339: PUSH
54340: FOR_TO
54341: IFFALSE 54368
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
54343: LD_ADDR_EXP 47
54347: PUSH
54348: LD_EXP 47
54352: PPUSH
54353: LD_VAR 0 1
54357: PPUSH
54358: LD_INT 0
54360: PPUSH
54361: CALL_OW 1
54365: ST_TO_ADDR
54366: GO 54340
54368: POP
54369: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
54370: LD_ADDR_VAR 0 3
54374: PUSH
54375: LD_INT 52
54377: PPUSH
54378: LD_INT 0
54380: PPUSH
54381: CALL_OW 517
54385: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
54386: LD_ADDR_VAR 0 1
54390: PUSH
54391: DOUBLE
54392: LD_INT 1
54394: DEC
54395: ST_TO_ADDR
54396: LD_VAR 0 3
54400: PUSH
54401: LD_INT 1
54403: ARRAY
54404: PUSH
54405: FOR_TO
54406: IFFALSE 54473
// for j := 1 to 8 do
54408: LD_ADDR_VAR 0 2
54412: PUSH
54413: DOUBLE
54414: LD_INT 1
54416: DEC
54417: ST_TO_ADDR
54418: LD_INT 8
54420: PUSH
54421: FOR_TO
54422: IFFALSE 54469
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
54424: LD_VAR 0 3
54428: PUSH
54429: LD_INT 1
54431: ARRAY
54432: PUSH
54433: LD_VAR 0 1
54437: ARRAY
54438: PPUSH
54439: LD_VAR 0 3
54443: PUSH
54444: LD_INT 2
54446: ARRAY
54447: PUSH
54448: LD_VAR 0 1
54452: ARRAY
54453: PPUSH
54454: LD_VAR 0 2
54458: PPUSH
54459: LD_INT 12
54461: NEG
54462: PPUSH
54463: CALL_OW 330
54467: GO 54421
54469: POP
54470: POP
54471: GO 54405
54473: POP
54474: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
54475: LD_EXP 32
54479: PPUSH
54480: LD_INT 1
54482: PPUSH
54483: CALL_OW 424
// UpdateCounter ;
54487: CALL 55095 0 0
// repeat wait ( 0 0$1 ) ;
54491: LD_INT 35
54493: PPUSH
54494: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
54498: LD_ADDR_VAR 0 3
54502: PUSH
54503: LD_EXP 32
54507: PPUSH
54508: LD_INT 3
54510: PUSH
54511: LD_INT 57
54513: PUSH
54514: EMPTY
54515: LIST
54516: PUSH
54517: EMPTY
54518: LIST
54519: LIST
54520: PUSH
54521: LD_INT 50
54523: PUSH
54524: EMPTY
54525: LIST
54526: PUSH
54527: LD_INT 2
54529: PUSH
54530: LD_INT 30
54532: PUSH
54533: LD_INT 0
54535: PUSH
54536: EMPTY
54537: LIST
54538: LIST
54539: PUSH
54540: LD_INT 30
54542: PUSH
54543: LD_INT 1
54545: PUSH
54546: EMPTY
54547: LIST
54548: LIST
54549: PUSH
54550: EMPTY
54551: LIST
54552: LIST
54553: LIST
54554: PUSH
54555: EMPTY
54556: LIST
54557: LIST
54558: LIST
54559: PPUSH
54560: CALL_OW 70
54564: ST_TO_ADDR
// if not tmp then
54565: LD_VAR 0 3
54569: NOT
54570: IFFALSE 54574
// continue ;
54572: GO 54491
// AddPoints ( tmp ) ;
54574: LD_VAR 0 3
54578: PPUSH
54579: CALL 54773 0 1
// UpdateCounter ;
54583: CALL 55095 0 0
// until false ;
54587: LD_INT 0
54589: IFFALSE 54491
// end ;
54591: PPOPN 3
54593: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
54594: LD_EXP 37
54598: IFFALSE 54606
54600: PUSH
54601: LD_EXP 35
54605: AND
54606: IFFALSE 54770
54608: GO 54610
54610: DISABLE
54611: LD_INT 0
54613: PPUSH
54614: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
54615: LD_ADDR_VAR 0 2
54619: PUSH
54620: LD_INT 52
54622: PPUSH
54623: LD_INT 0
54625: PPUSH
54626: CALL_OW 517
54630: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
54631: LD_ADDR_VAR 0 1
54635: PUSH
54636: DOUBLE
54637: LD_INT 1
54639: DEC
54640: ST_TO_ADDR
54641: LD_VAR 0 2
54645: PUSH
54646: LD_INT 1
54648: ARRAY
54649: PUSH
54650: FOR_TO
54651: IFFALSE 54692
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
54653: LD_VAR 0 2
54657: PUSH
54658: LD_INT 1
54660: ARRAY
54661: PUSH
54662: LD_VAR 0 1
54666: ARRAY
54667: PPUSH
54668: LD_VAR 0 2
54672: PUSH
54673: LD_INT 2
54675: ARRAY
54676: PUSH
54677: LD_VAR 0 1
54681: ARRAY
54682: PPUSH
54683: LD_INT 125
54685: PPUSH
54686: CALL_OW 495
54690: GO 54650
54692: POP
54693: POP
// repeat wait ( mpEmissions ) ;
54694: LD_EXP 35
54698: PPUSH
54699: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
54703: LD_ADDR_VAR 0 1
54707: PUSH
54708: DOUBLE
54709: LD_INT 1
54711: DEC
54712: ST_TO_ADDR
54713: LD_VAR 0 2
54717: PUSH
54718: LD_INT 1
54720: ARRAY
54721: PUSH
54722: FOR_TO
54723: IFFALSE 54764
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
54725: LD_VAR 0 2
54729: PUSH
54730: LD_INT 1
54732: ARRAY
54733: PUSH
54734: LD_VAR 0 1
54738: ARRAY
54739: PPUSH
54740: LD_VAR 0 2
54744: PUSH
54745: LD_INT 2
54747: ARRAY
54748: PUSH
54749: LD_VAR 0 1
54753: ARRAY
54754: PPUSH
54755: LD_INT 15
54757: PPUSH
54758: CALL_OW 495
54762: GO 54722
54764: POP
54765: POP
// until false ;
54766: LD_INT 0
54768: IFFALSE 54694
// end ;
54770: PPOPN 2
54772: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
54773: LD_INT 0
54775: PPUSH
54776: PPUSH
54777: PPUSH
54778: PPUSH
54779: PPUSH
// if mpTeamGame then
54780: LD_EXP 9
54784: IFFALSE 54981
// begin first := depots [ 1 ] ;
54786: LD_ADDR_VAR 0 4
54790: PUSH
54791: LD_VAR 0 1
54795: PUSH
54796: LD_INT 1
54798: ARRAY
54799: ST_TO_ADDR
// side := GetSide ( first ) ;
54800: LD_ADDR_VAR 0 6
54804: PUSH
54805: LD_VAR 0 4
54809: PPUSH
54810: CALL_OW 255
54814: ST_TO_ADDR
// for i := 1 to mpTeams do
54815: LD_ADDR_VAR 0 3
54819: PUSH
54820: DOUBLE
54821: LD_INT 1
54823: DEC
54824: ST_TO_ADDR
54825: LD_EXP 8
54829: PUSH
54830: FOR_TO
54831: IFFALSE 54865
// if side in mpTeams [ i ] then
54833: LD_VAR 0 6
54837: PUSH
54838: LD_EXP 8
54842: PUSH
54843: LD_VAR 0 3
54847: ARRAY
54848: IN
54849: IFFALSE 54863
// begin team := i ;
54851: LD_ADDR_VAR 0 5
54855: PUSH
54856: LD_VAR 0 3
54860: ST_TO_ADDR
// break ;
54861: GO 54865
// end ;
54863: GO 54830
54865: POP
54866: POP
// if not team then
54867: LD_VAR 0 5
54871: NOT
54872: IFFALSE 54876
// exit ;
54874: GO 55090
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
54876: LD_EXP 32
54880: PPUSH
54881: LD_INT 81
54883: PUSH
54884: LD_VAR 0 6
54888: PUSH
54889: EMPTY
54890: LIST
54891: LIST
54892: PPUSH
54893: CALL_OW 70
54897: IFFALSE 54901
// exit ;
54899: GO 55090
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
54901: LD_ADDR_EXP 47
54905: PUSH
54906: LD_EXP 47
54910: PPUSH
54911: LD_VAR 0 5
54915: PPUSH
54916: LD_EXP 47
54920: PUSH
54921: LD_VAR 0 5
54925: ARRAY
54926: PUSH
54927: LD_INT 1
54929: PLUS
54930: PPUSH
54931: CALL_OW 1
54935: ST_TO_ADDR
// for i in mpTeams [ team ] do
54936: LD_ADDR_VAR 0 3
54940: PUSH
54941: LD_EXP 8
54945: PUSH
54946: LD_VAR 0 5
54950: ARRAY
54951: PUSH
54952: FOR_IN
54953: IFFALSE 54977
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
54955: LD_VAR 0 3
54959: PPUSH
54960: LD_EXP 47
54964: PUSH
54965: LD_VAR 0 5
54969: ARRAY
54970: PPUSH
54971: CALL_OW 506
54975: GO 54952
54977: POP
54978: POP
// end else
54979: GO 55090
// begin first := depots [ 1 ] ;
54981: LD_ADDR_VAR 0 4
54985: PUSH
54986: LD_VAR 0 1
54990: PUSH
54991: LD_INT 1
54993: ARRAY
54994: ST_TO_ADDR
// side := GetSide ( first ) ;
54995: LD_ADDR_VAR 0 6
54999: PUSH
55000: LD_VAR 0 4
55004: PPUSH
55005: CALL_OW 255
55009: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
55010: LD_EXP 32
55014: PPUSH
55015: LD_INT 81
55017: PUSH
55018: LD_VAR 0 6
55022: PUSH
55023: EMPTY
55024: LIST
55025: LIST
55026: PPUSH
55027: CALL_OW 70
55031: IFFALSE 55035
// exit ;
55033: GO 55090
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
55035: LD_ADDR_EXP 47
55039: PUSH
55040: LD_EXP 47
55044: PPUSH
55045: LD_VAR 0 6
55049: PPUSH
55050: LD_EXP 47
55054: PUSH
55055: LD_VAR 0 6
55059: ARRAY
55060: PUSH
55061: LD_INT 1
55063: PLUS
55064: PPUSH
55065: CALL_OW 1
55069: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
55070: LD_VAR 0 6
55074: PPUSH
55075: LD_EXP 47
55079: PUSH
55080: LD_VAR 0 6
55084: ARRAY
55085: PPUSH
55086: CALL_OW 506
// end ; end ;
55090: LD_VAR 0 2
55094: RET
// function UpdateCounter ; var i ; begin
55095: LD_INT 0
55097: PPUSH
55098: PPUSH
// result := [ ] ;
55099: LD_ADDR_VAR 0 1
55103: PUSH
55104: EMPTY
55105: ST_TO_ADDR
// if mpTeamGame then
55106: LD_EXP 9
55110: IFFALSE 55177
// begin for i := 1 to mpTeams do
55112: LD_ADDR_VAR 0 2
55116: PUSH
55117: DOUBLE
55118: LD_INT 1
55120: DEC
55121: ST_TO_ADDR
55122: LD_EXP 8
55126: PUSH
55127: FOR_TO
55128: IFFALSE 55173
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
55130: LD_ADDR_VAR 0 1
55134: PUSH
55135: LD_VAR 0 1
55139: PUSH
55140: LD_STRING #KingoftheHill-Team
55142: PUSH
55143: LD_VAR 0 2
55147: PUSH
55148: LD_EXP 47
55152: PUSH
55153: LD_VAR 0 2
55157: ARRAY
55158: PUSH
55159: LD_EXP 33
55163: PUSH
55164: EMPTY
55165: LIST
55166: LIST
55167: LIST
55168: LIST
55169: ADD
55170: ST_TO_ADDR
55171: GO 55127
55173: POP
55174: POP
// end else
55175: GO 55250
// begin for i := 1 to 8 do
55177: LD_ADDR_VAR 0 2
55181: PUSH
55182: DOUBLE
55183: LD_INT 1
55185: DEC
55186: ST_TO_ADDR
55187: LD_INT 8
55189: PUSH
55190: FOR_TO
55191: IFFALSE 55248
// if mpSidePositions [ i ] then
55193: LD_EXP 5
55197: PUSH
55198: LD_VAR 0 2
55202: ARRAY
55203: IFFALSE 55246
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
55205: LD_ADDR_VAR 0 1
55209: PUSH
55210: LD_VAR 0 1
55214: PUSH
55215: LD_STRING #KingoftheHill-Player
55217: PUSH
55218: LD_VAR 0 2
55222: PUSH
55223: LD_EXP 47
55227: PUSH
55228: LD_VAR 0 2
55232: ARRAY
55233: PUSH
55234: LD_EXP 33
55238: PUSH
55239: EMPTY
55240: LIST
55241: LIST
55242: LIST
55243: LIST
55244: ADD
55245: ST_TO_ADDR
55246: GO 55190
55248: POP
55249: POP
// end ; mpDisplayStrings := result ;
55250: LD_ADDR_EXP 36
55254: PUSH
55255: LD_VAR 0 1
55259: ST_TO_ADDR
// end ;
55260: LD_VAR 0 1
55264: RET
// export function HowMuchPointsKing ( side ) ; begin
55265: LD_INT 0
55267: PPUSH
// result := HowMuchPoints ( side ) ;
55268: LD_ADDR_VAR 0 2
55272: PUSH
55273: LD_VAR 0 1
55277: PPUSH
55278: CALL 55288 0 1
55282: ST_TO_ADDR
// end ;
55283: LD_VAR 0 2
55287: RET
// function HowMuchPoints ( side ) ; var i ; begin
55288: LD_INT 0
55290: PPUSH
55291: PPUSH
// if mpTeamGame then
55292: LD_EXP 9
55296: IFFALSE 55365
// begin for i := 1 to Count ( mpTeams ) do
55298: LD_ADDR_VAR 0 3
55302: PUSH
55303: DOUBLE
55304: LD_INT 1
55306: DEC
55307: ST_TO_ADDR
55308: LD_EXP 8
55312: PPUSH
55313: CALL 5043 0 1
55317: PUSH
55318: FOR_TO
55319: IFFALSE 55361
// begin if side in mpTeams [ i ] then
55321: LD_VAR 0 1
55325: PUSH
55326: LD_EXP 8
55330: PUSH
55331: LD_VAR 0 3
55335: ARRAY
55336: IN
55337: IFFALSE 55359
// begin result := mpKingPoints [ i ] ;
55339: LD_ADDR_VAR 0 2
55343: PUSH
55344: LD_EXP 47
55348: PUSH
55349: LD_VAR 0 3
55353: ARRAY
55354: ST_TO_ADDR
// exit ;
55355: POP
55356: POP
55357: GO 55381
// end ; end ;
55359: GO 55318
55361: POP
55362: POP
// end else
55363: GO 55381
// result := mpKingPoints [ side ] ;
55365: LD_ADDR_VAR 0 2
55369: PUSH
55370: LD_EXP 47
55374: PUSH
55375: LD_VAR 0 1
55379: ARRAY
55380: ST_TO_ADDR
// end ;
55381: LD_VAR 0 2
55385: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
55386: LD_EXP 37
55390: IFFALSE 55398
55392: PUSH
55393: CALL 55810 0 0
55397: AND
55398: IFFALSE 55406
55400: PUSH
55401: LD_OWVAR 4
55405: AND
55406: IFFALSE 55659
55408: GO 55410
55410: DISABLE
55411: LD_INT 0
55413: PPUSH
55414: PPUSH
// begin canWin := false ;
55415: LD_ADDR_VAR 0 2
55419: PUSH
55420: LD_INT 0
55422: ST_TO_ADDR
// if not HasPower ( your_side ) then
55423: LD_OWVAR 2
55427: PPUSH
55428: CALL 55852 0 1
55432: NOT
55433: IFFALSE 55444
// begin Multiplayer_Loose_Message ;
55435: CALL_OW 521
// enable ( mpLose ) ;
55439: LD_INT 102
55441: ENABLE_MARKED
// end else
55442: GO 55659
// begin if not EnemiesInGame then
55444: CALL 55662 0 0
55448: NOT
55449: IFFALSE 55456
// begin enable ( mpWin ) ;
55451: LD_INT 101
55453: ENABLE_MARKED
// exit ;
55454: GO 55659
// end ; canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) ;
55456: LD_ADDR_VAR 0 2
55460: PUSH
55461: LD_OWVAR 2
55465: PPUSH
55466: CALL 55288 0 1
55470: PUSH
55471: LD_EXP 33
55475: GREATEREQUAL
55476: IFFALSE 55489
55478: PUSH
55479: LD_OWVAR 2
55483: PPUSH
55484: CALL 55852 0 1
55488: AND
55489: ST_TO_ADDR
// for i := 1 to 8 do
55490: LD_ADDR_VAR 0 1
55494: PUSH
55495: DOUBLE
55496: LD_INT 1
55498: DEC
55499: ST_TO_ADDR
55500: LD_INT 8
55502: PUSH
55503: FOR_TO
55504: IFFALSE 55645
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
55506: LD_EXP 5
55510: PUSH
55511: LD_VAR 0 1
55515: ARRAY
55516: IFFALSE 55529
55518: PUSH
55519: LD_VAR 0 1
55523: PPUSH
55524: CALL_OW 108
55528: AND
55529: IFFALSE 55543
55531: PUSH
55532: LD_VAR 0 1
55536: PUSH
55537: LD_OWVAR 2
55541: NONEQUAL
55542: AND
55543: IFFALSE 55643
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
55545: LD_EXP 6
55549: PUSH
55550: LD_VAR 0 1
55554: ARRAY
55555: NOT
55556: IFTRUE 55604
55558: PUSH
55559: LD_EXP 6
55563: PUSH
55564: LD_VAR 0 1
55568: ARRAY
55569: PUSH
55570: LD_EXP 6
55574: PUSH
55575: LD_OWVAR 2
55579: ARRAY
55580: NONEQUAL
55581: IFFALSE 55603
55583: PUSH
55584: LD_OWVAR 2
55588: PPUSH
55589: LD_VAR 0 1
55593: PPUSH
55594: CALL_OW 81
55598: PUSH
55599: LD_INT 1
55601: NONEQUAL
55602: AND
55603: OR
55604: IFFALSE 55643
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
55606: LD_VAR 0 1
55610: PPUSH
55611: CALL 55288 0 1
55615: PUSH
55616: LD_EXP 33
55620: GREATEREQUAL
55621: IFFALSE 55634
55623: PUSH
55624: LD_VAR 0 1
55628: PPUSH
55629: CALL 55852 0 1
55633: AND
55634: IFFALSE 55643
// begin enable ( mpLose ) ;
55636: LD_INT 102
55638: ENABLE_MARKED
// exit ;
55639: POP
55640: POP
55641: GO 55659
// end ;
55643: GO 55503
55645: POP
55646: POP
// if canWin then
55647: LD_VAR 0 2
55651: IFFALSE 55658
// enable ( mpWin ) else
55653: LD_INT 101
55655: ENABLE_MARKED
55656: GO 55659
// enable ;
55658: ENABLE
// end ; end ;
55659: PPOPN 2
55661: END
// function EnemiesInGame ; var i ; begin
55662: LD_INT 0
55664: PPUSH
55665: PPUSH
// result := false ;
55666: LD_ADDR_VAR 0 1
55670: PUSH
55671: LD_INT 0
55673: ST_TO_ADDR
// for i := 1 to 8 do
55674: LD_ADDR_VAR 0 2
55678: PUSH
55679: DOUBLE
55680: LD_INT 1
55682: DEC
55683: ST_TO_ADDR
55684: LD_INT 8
55686: PUSH
55687: FOR_TO
55688: IFFALSE 55803
// if i <> your_side and HasPower ( i ) and MultiplayerSideAlive ( i ) then
55690: LD_VAR 0 2
55694: PUSH
55695: LD_OWVAR 2
55699: NONEQUAL
55700: IFFALSE 55713
55702: PUSH
55703: LD_VAR 0 2
55707: PPUSH
55708: CALL 55852 0 1
55712: AND
55713: IFFALSE 55726
55715: PUSH
55716: LD_VAR 0 2
55720: PPUSH
55721: CALL_OW 108
55725: AND
55726: IFFALSE 55801
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
55728: LD_EXP 6
55732: PUSH
55733: LD_VAR 0 2
55737: ARRAY
55738: NOT
55739: IFTRUE 55787
55741: PUSH
55742: LD_EXP 6
55746: PUSH
55747: LD_VAR 0 2
55751: ARRAY
55752: PUSH
55753: LD_EXP 6
55757: PUSH
55758: LD_OWVAR 2
55762: ARRAY
55763: NONEQUAL
55764: IFFALSE 55786
55766: PUSH
55767: LD_OWVAR 2
55771: PPUSH
55772: LD_VAR 0 2
55776: PPUSH
55777: CALL_OW 81
55781: PUSH
55782: LD_INT 1
55784: NONEQUAL
55785: AND
55786: OR
55787: IFFALSE 55801
// begin result := true ;
55789: LD_ADDR_VAR 0 1
55793: PUSH
55794: LD_INT 1
55796: ST_TO_ADDR
// exit ;
55797: POP
55798: POP
55799: GO 55805
// end ;
55801: GO 55687
55803: POP
55804: POP
// end ;
55805: LD_VAR 0 1
55809: RET
// function CanWinLoose ; begin
55810: LD_INT 0
55812: PPUSH
// result := true ;
55813: LD_ADDR_VAR 0 1
55817: PUSH
55818: LD_INT 1
55820: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
55821: CALL_OW 531
55825: IFFALSE 55837
55827: PUSH
55828: CALL_OW 519
55832: PUSH
55833: LD_INT 1
55835: GREATER
55836: AND
55837: IFFALSE 55847
// result := false ;
55839: LD_ADDR_VAR 0 1
55843: PUSH
55844: LD_INT 0
55846: ST_TO_ADDR
// end ;
55847: LD_VAR 0 1
55851: RET
// function HasPower ( i ) ; begin
55852: LD_INT 0
55854: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
55855: LD_ADDR_VAR 0 2
55859: PUSH
55860: LD_INT 22
55862: PUSH
55863: LD_VAR 0 1
55867: PUSH
55868: EMPTY
55869: LIST
55870: LIST
55871: PUSH
55872: LD_INT 2
55874: PUSH
55875: LD_INT 21
55877: PUSH
55878: LD_INT 1
55880: PUSH
55881: EMPTY
55882: LIST
55883: LIST
55884: PUSH
55885: LD_INT 33
55887: PUSH
55888: LD_INT 3
55890: PUSH
55891: EMPTY
55892: LIST
55893: LIST
55894: PUSH
55895: LD_INT 33
55897: PUSH
55898: LD_INT 5
55900: PUSH
55901: EMPTY
55902: LIST
55903: LIST
55904: PUSH
55905: EMPTY
55906: LIST
55907: LIST
55908: LIST
55909: LIST
55910: PUSH
55911: EMPTY
55912: LIST
55913: LIST
55914: PPUSH
55915: CALL_OW 69
55919: ST_TO_ADDR
// end ; end_of_file end_of_file
55920: LD_VAR 0 2
55924: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
55925: LD_VAR 0 1
55929: PUSH
55930: LD_INT 200
55932: DOUBLE
55933: GREATEREQUAL
55934: IFFALSE 55942
55936: LD_INT 299
55938: DOUBLE
55939: LESSEQUAL
55940: IFTRUE 55944
55942: GO 55976
55944: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
55945: LD_VAR 0 1
55949: PPUSH
55950: LD_VAR 0 2
55954: PPUSH
55955: LD_VAR 0 3
55959: PPUSH
55960: LD_VAR 0 4
55964: PPUSH
55965: LD_VAR 0 5
55969: PPUSH
55970: CALL 56838 0 5
55974: GO 56053
55976: LD_INT 300
55978: DOUBLE
55979: GREATEREQUAL
55980: IFFALSE 55988
55982: LD_INT 399
55984: DOUBLE
55985: LESSEQUAL
55986: IFTRUE 55990
55988: GO 56052
55990: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
55991: LD_VAR 0 1
55995: PPUSH
55996: LD_VAR 0 2
56000: PPUSH
56001: LD_VAR 0 3
56005: PPUSH
56006: LD_VAR 0 4
56010: PPUSH
56011: LD_VAR 0 5
56015: PPUSH
56016: LD_VAR 0 6
56020: PPUSH
56021: LD_VAR 0 7
56025: PPUSH
56026: LD_VAR 0 8
56030: PPUSH
56031: LD_VAR 0 9
56035: PPUSH
56036: LD_VAR 0 10
56040: PPUSH
56041: LD_VAR 0 11
56045: PPUSH
56046: CALL 63159 0 11
56050: GO 56053
56052: POP
// end ;
56053: PPOPN 11
56055: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
56056: LD_VAR 0 1
56060: PPUSH
56061: LD_VAR 0 2
56065: PPUSH
56066: LD_VAR 0 3
56070: PPUSH
56071: LD_VAR 0 4
56075: PPUSH
56076: LD_VAR 0 5
56080: PPUSH
56081: CALL 56138 0 5
// end ; end_of_file
56085: PPOPN 5
56087: END
// export function SOS_UnitDestroyed ( un ) ; begin
56088: LD_INT 0
56090: PPUSH
// ComRadiation ( un ) ;
56091: LD_VAR 0 1
56095: PPUSH
56096: CALL 57258 0 1
// end ;
56100: LD_VAR 0 2
56104: RET
// export function SOS_UnitKamikazed ( un ) ; begin
56105: LD_INT 0
56107: PPUSH
// ComRadiation ( un ) ;
56108: LD_VAR 0 1
56112: PPUSH
56113: CALL 57258 0 1
// end ;
56117: LD_VAR 0 2
56121: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
56122: LD_INT 0
56124: PPUSH
// end ;
56125: LD_VAR 0 4
56129: RET
// export function SOS_Command ( cmd ) ; begin
56130: LD_INT 0
56132: PPUSH
// end ;
56133: LD_VAR 0 2
56137: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
56138: LD_INT 0
56140: PPUSH
// end ;
56141: LD_VAR 0 6
56145: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
56146: LD_INT 0
56148: PPUSH
56149: PPUSH
56150: PPUSH
56151: PPUSH
56152: PPUSH
// if not vehicle or not factory then
56153: LD_VAR 0 1
56157: NOT
56158: IFTRUE 56167
56160: PUSH
56161: LD_VAR 0 2
56165: NOT
56166: OR
56167: IFFALSE 56171
// exit ;
56169: GO 56833
// weapon := GetWeapon ( vehicle ) ;
56171: LD_ADDR_VAR 0 7
56175: PUSH
56176: LD_VAR 0 1
56180: PPUSH
56181: CALL_OW 264
56185: ST_TO_ADDR
// if weapon = ar_miner then
56186: LD_VAR 0 7
56190: PUSH
56191: LD_INT 81
56193: EQUAL
56194: IFFALSE 56251
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
56196: LD_ADDR_EXP 55
56200: PUSH
56201: LD_EXP 55
56205: PPUSH
56206: LD_EXP 55
56210: PUSH
56211: LD_INT 1
56213: PLUS
56214: PPUSH
56215: LD_VAR 0 1
56219: PPUSH
56220: CALL_OW 1
56224: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
56225: LD_ADDR_EXP 56
56229: PUSH
56230: LD_EXP 56
56234: PPUSH
56235: LD_EXP 56
56239: PUSH
56240: LD_INT 1
56242: PLUS
56243: PPUSH
56244: EMPTY
56245: PPUSH
56246: CALL_OW 1
56250: ST_TO_ADDR
// end ; if not factoryWaypoints then
56251: LD_EXP 58
56255: NOT
56256: IFFALSE 56260
// exit ;
56258: GO 56833
// for i := 1 to Count ( factoryWaypoints ) do
56260: LD_ADDR_VAR 0 4
56264: PUSH
56265: DOUBLE
56266: LD_INT 1
56268: DEC
56269: ST_TO_ADDR
56270: LD_EXP 58
56274: PPUSH
56275: CALL 5043 0 1
56279: PUSH
56280: FOR_TO
56281: IFFALSE 56831
// if factoryWaypoints [ i ] [ 2 ] = factory then
56283: LD_EXP 58
56287: PUSH
56288: LD_VAR 0 4
56292: ARRAY
56293: PUSH
56294: LD_INT 2
56296: ARRAY
56297: PUSH
56298: LD_VAR 0 2
56302: EQUAL
56303: IFFALSE 56829
// begin if GetControl ( vehicle ) = control_manual then
56305: LD_VAR 0 1
56309: PPUSH
56310: CALL_OW 263
56314: PUSH
56315: LD_INT 1
56317: EQUAL
56318: IFFALSE 56682
// begin driver := IsDrivenBy ( vehicle ) ;
56320: LD_ADDR_VAR 0 5
56324: PUSH
56325: LD_VAR 0 1
56329: PPUSH
56330: CALL_OW 311
56334: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
56335: LD_VAR 0 5
56339: PUSH
56340: LD_EXP 59
56344: IN
56345: IFTRUE 56359
56347: PUSH
56348: LD_VAR 0 1
56352: PUSH
56353: LD_EXP 59
56357: IN
56358: OR
56359: IFFALSE 56365
// exit ;
56361: POP
56362: POP
56363: GO 56833
// if not HasTask ( driver ) then
56365: LD_VAR 0 5
56369: PPUSH
56370: CALL_OW 314
56374: NOT
56375: IFFALSE 56680
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
56377: LD_ADDR_EXP 59
56381: PUSH
56382: LD_EXP 59
56386: PPUSH
56387: LD_VAR 0 5
56391: PPUSH
56392: CALL 41009 0 2
56396: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
56397: LD_ADDR_EXP 59
56401: PUSH
56402: LD_EXP 59
56406: PPUSH
56407: LD_VAR 0 1
56411: PPUSH
56412: CALL 41009 0 2
56416: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
56417: LD_ADDR_VAR 0 6
56421: PUSH
56422: LD_EXP 58
56426: PUSH
56427: LD_VAR 0 4
56431: ARRAY
56432: PUSH
56433: LD_INT 3
56435: ARRAY
56436: PPUSH
56437: LD_EXP 58
56441: PUSH
56442: LD_VAR 0 4
56446: ARRAY
56447: PUSH
56448: LD_INT 4
56450: ARRAY
56451: PPUSH
56452: CALL_OW 428
56456: ST_TO_ADDR
// if hex then
56457: LD_VAR 0 6
56461: IFFALSE 56479
// ComMoveUnit ( driver , hex ) else
56463: LD_VAR 0 5
56467: PPUSH
56468: LD_VAR 0 6
56472: PPUSH
56473: CALL_OW 112
56477: GO 56563
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
56479: LD_VAR 0 1
56483: PPUSH
56484: LD_EXP 58
56488: PUSH
56489: LD_VAR 0 4
56493: ARRAY
56494: PUSH
56495: LD_INT 3
56497: ARRAY
56498: PPUSH
56499: LD_EXP 58
56503: PUSH
56504: LD_VAR 0 4
56508: ARRAY
56509: PUSH
56510: LD_INT 4
56512: ARRAY
56513: PPUSH
56514: CALL_OW 297
56518: PUSH
56519: LD_INT 0
56521: GREATER
56522: IFFALSE 56563
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
56524: LD_VAR 0 5
56528: PPUSH
56529: LD_EXP 58
56533: PUSH
56534: LD_VAR 0 4
56538: ARRAY
56539: PUSH
56540: LD_INT 3
56542: ARRAY
56543: PPUSH
56544: LD_EXP 58
56548: PUSH
56549: LD_VAR 0 4
56553: ARRAY
56554: PUSH
56555: LD_INT 4
56557: ARRAY
56558: PPUSH
56559: CALL_OW 111
// AddComExitVehicle ( driver ) ;
56563: LD_VAR 0 5
56567: PPUSH
56568: CALL_OW 181
// if Multiplayer then
56572: LD_OWVAR 4
56576: IFFALSE 56625
// begin repeat wait ( 10 ) ;
56578: LD_INT 10
56580: PPUSH
56581: CALL_OW 67
// until not IsInUnit ( driver ) ;
56585: LD_VAR 0 5
56589: PPUSH
56590: CALL_OW 310
56594: NOT
56595: IFFALSE 56578
// if not HasTask ( driver ) then
56597: LD_VAR 0 5
56601: PPUSH
56602: CALL_OW 314
56606: NOT
56607: IFFALSE 56623
// ComEnterUnit ( driver , factory ) ;
56609: LD_VAR 0 5
56613: PPUSH
56614: LD_VAR 0 2
56618: PPUSH
56619: CALL_OW 120
// end else
56623: GO 56639
// AddComEnterUnit ( driver , factory ) ;
56625: LD_VAR 0 5
56629: PPUSH
56630: LD_VAR 0 2
56634: PPUSH
56635: CALL_OW 180
// wait ( 0 0$1 ) ;
56639: LD_INT 35
56641: PPUSH
56642: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
56646: LD_ADDR_EXP 59
56650: PUSH
56651: LD_EXP 59
56655: PUSH
56656: LD_VAR 0 5
56660: DIFF
56661: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
56662: LD_ADDR_EXP 59
56666: PUSH
56667: LD_EXP 59
56671: PUSH
56672: LD_VAR 0 1
56676: DIFF
56677: ST_TO_ADDR
// break ;
56678: GO 56831
// end ; end else
56680: GO 56829
// if GetControl ( vehicle ) = control_remote then
56682: LD_VAR 0 1
56686: PPUSH
56687: CALL_OW 263
56691: PUSH
56692: LD_INT 2
56694: EQUAL
56695: IFFALSE 56781
// begin wait ( 0 0$2 ) ;
56697: LD_INT 70
56699: PPUSH
56700: CALL_OW 67
// repeat wait ( 10 ) ;
56704: LD_INT 10
56706: PPUSH
56707: CALL_OW 67
// Connect ( vehicle ) ;
56711: LD_VAR 0 1
56715: PPUSH
56716: CALL 11321 0 1
// until IsControledBy ( vehicle ) ;
56720: LD_VAR 0 1
56724: PPUSH
56725: CALL_OW 312
56729: IFFALSE 56704
// wait ( 10 ) ;
56731: LD_INT 10
56733: PPUSH
56734: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
56738: LD_VAR 0 1
56742: PPUSH
56743: LD_EXP 58
56747: PUSH
56748: LD_VAR 0 4
56752: ARRAY
56753: PUSH
56754: LD_INT 3
56756: ARRAY
56757: PPUSH
56758: LD_EXP 58
56762: PUSH
56763: LD_VAR 0 4
56767: ARRAY
56768: PUSH
56769: LD_INT 4
56771: ARRAY
56772: PPUSH
56773: CALL_OW 111
// break ;
56777: GO 56831
// end else
56779: GO 56829
// begin wait ( 0 0$3 ) ;
56781: LD_INT 105
56783: PPUSH
56784: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
56788: LD_VAR 0 1
56792: PPUSH
56793: LD_EXP 58
56797: PUSH
56798: LD_VAR 0 4
56802: ARRAY
56803: PUSH
56804: LD_INT 3
56806: ARRAY
56807: PPUSH
56808: LD_EXP 58
56812: PUSH
56813: LD_VAR 0 4
56817: ARRAY
56818: PUSH
56819: LD_INT 4
56821: ARRAY
56822: PPUSH
56823: CALL_OW 111
// break ;
56827: GO 56831
// end ; end ;
56829: GO 56280
56831: POP
56832: POP
// end ;
56833: LD_VAR 0 3
56837: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
56838: LD_INT 0
56840: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
56841: LD_VAR 0 1
56845: PUSH
56846: LD_INT 250
56848: EQUAL
56849: IFFALSE 56866
56851: PUSH
56852: LD_VAR 0 2
56856: PPUSH
56857: CALL_OW 264
56861: PUSH
56862: LD_INT 81
56864: EQUAL
56865: AND
56866: IFFALSE 56887
// MinerPlaceMine ( unit , x , y ) ;
56868: LD_VAR 0 2
56872: PPUSH
56873: LD_VAR 0 4
56877: PPUSH
56878: LD_VAR 0 5
56882: PPUSH
56883: CALL 60168 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
56887: LD_VAR 0 1
56891: PUSH
56892: LD_INT 251
56894: EQUAL
56895: IFFALSE 56912
56897: PUSH
56898: LD_VAR 0 2
56902: PPUSH
56903: CALL_OW 264
56907: PUSH
56908: LD_INT 81
56910: EQUAL
56911: AND
56912: IFFALSE 56933
// MinerDetonateMine ( unit , x , y ) ;
56914: LD_VAR 0 2
56918: PPUSH
56919: LD_VAR 0 4
56923: PPUSH
56924: LD_VAR 0 5
56928: PPUSH
56929: CALL 60575 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
56933: LD_VAR 0 1
56937: PUSH
56938: LD_INT 252
56940: EQUAL
56941: IFFALSE 56958
56943: PUSH
56944: LD_VAR 0 2
56948: PPUSH
56949: CALL_OW 264
56953: PUSH
56954: LD_INT 81
56956: EQUAL
56957: AND
56958: IFFALSE 56979
// MinerCreateMinefield ( unit , x , y ) ;
56960: LD_VAR 0 2
56964: PPUSH
56965: LD_VAR 0 4
56969: PPUSH
56970: LD_VAR 0 5
56974: PPUSH
56975: CALL 60807 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
56979: LD_VAR 0 1
56983: PUSH
56984: LD_INT 253
56986: EQUAL
56987: IFFALSE 57004
56989: PUSH
56990: LD_VAR 0 2
56994: PPUSH
56995: CALL_OW 257
56999: PUSH
57000: LD_INT 5
57002: EQUAL
57003: AND
57004: IFFALSE 57025
// ComBinocular ( unit , x , y ) ;
57006: LD_VAR 0 2
57010: PPUSH
57011: LD_VAR 0 4
57015: PPUSH
57016: LD_VAR 0 5
57020: PPUSH
57021: CALL 61182 0 3
// if selectedUnit then
57025: LD_VAR 0 3
57029: IFFALSE 57089
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
57031: LD_VAR 0 1
57035: PUSH
57036: LD_INT 254
57038: EQUAL
57039: IFFALSE 57056
57041: PUSH
57042: LD_VAR 0 2
57046: PPUSH
57047: CALL_OW 264
57051: PUSH
57052: LD_INT 99
57054: EQUAL
57055: AND
57056: IFFALSE 57073
57058: PUSH
57059: LD_VAR 0 3
57063: PPUSH
57064: CALL_OW 263
57068: PUSH
57069: LD_INT 3
57071: EQUAL
57072: AND
57073: IFFALSE 57089
// HackDestroyVehicle ( unit , selectedUnit ) ;
57075: LD_VAR 0 2
57079: PPUSH
57080: LD_VAR 0 3
57084: PPUSH
57085: CALL 59379 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
57089: LD_VAR 0 1
57093: PUSH
57094: LD_INT 255
57096: EQUAL
57097: IFFALSE 57121
57099: PUSH
57100: LD_VAR 0 2
57104: PPUSH
57105: CALL_OW 264
57109: PUSH
57110: LD_INT 14
57112: PUSH
57113: LD_INT 53
57115: PUSH
57116: EMPTY
57117: LIST
57118: LIST
57119: IN
57120: AND
57121: IFFALSE 57139
57123: PUSH
57124: LD_VAR 0 4
57128: PPUSH
57129: LD_VAR 0 5
57133: PPUSH
57134: CALL_OW 488
57138: AND
57139: IFFALSE 57163
// CutTreeXYR ( unit , x , y , 12 ) ;
57141: LD_VAR 0 2
57145: PPUSH
57146: LD_VAR 0 4
57150: PPUSH
57151: LD_VAR 0 5
57155: PPUSH
57156: LD_INT 12
57158: PPUSH
57159: CALL 57354 0 4
// if cmd = 256 then
57163: LD_VAR 0 1
57167: PUSH
57168: LD_INT 256
57170: EQUAL
57171: IFFALSE 57192
// SetFactoryWaypoint ( unit , x , y ) ;
57173: LD_VAR 0 2
57177: PPUSH
57178: LD_VAR 0 4
57182: PPUSH
57183: LD_VAR 0 5
57187: PPUSH
57188: CALL 63167 0 3
// if cmd = 257 then
57192: LD_VAR 0 1
57196: PUSH
57197: LD_INT 257
57199: EQUAL
57200: IFFALSE 57221
// SetWarehouseGatheringPoint ( unit , x , y ) ;
57202: LD_VAR 0 2
57206: PPUSH
57207: LD_VAR 0 4
57211: PPUSH
57212: LD_VAR 0 5
57216: PPUSH
57217: CALL 63663 0 3
// if cmd = 258 then
57221: LD_VAR 0 1
57225: PUSH
57226: LD_INT 258
57228: EQUAL
57229: IFFALSE 57253
// BurnTreeXYR ( unit , x , y , 8 ) ;
57231: LD_VAR 0 2
57235: PPUSH
57236: LD_VAR 0 4
57240: PPUSH
57241: LD_VAR 0 5
57245: PPUSH
57246: LD_INT 8
57248: PPUSH
57249: CALL 57754 0 4
// end ;
57253: LD_VAR 0 6
57257: RET
// export function ComRadiation ( un ) ; var eff ; begin
57258: LD_INT 0
57260: PPUSH
57261: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
57262: LD_VAR 0 1
57266: PPUSH
57267: CALL_OW 264
57271: PUSH
57272: LD_INT 91
57274: NONEQUAL
57275: IFFALSE 57279
// exit ;
57277: GO 57349
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
57279: LD_INT 68
57281: PPUSH
57282: LD_VAR 0 1
57286: PPUSH
57287: CALL_OW 255
57291: PPUSH
57292: CALL_OW 321
57296: PUSH
57297: LD_INT 2
57299: EQUAL
57300: IFFALSE 57312
// eff := 50 else
57302: LD_ADDR_VAR 0 3
57306: PUSH
57307: LD_INT 50
57309: ST_TO_ADDR
57310: GO 57320
// eff := 25 ;
57312: LD_ADDR_VAR 0 3
57316: PUSH
57317: LD_INT 25
57319: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
57320: LD_VAR 0 1
57324: PPUSH
57325: CALL_OW 250
57329: PPUSH
57330: LD_VAR 0 1
57334: PPUSH
57335: CALL_OW 251
57339: PPUSH
57340: LD_VAR 0 3
57344: PPUSH
57345: CALL_OW 495
// end ;
57349: LD_VAR 0 2
57353: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
57354: LD_INT 0
57356: PPUSH
57357: PPUSH
57358: PPUSH
57359: PPUSH
57360: PPUSH
57361: PPUSH
57362: PPUSH
57363: PPUSH
57364: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
57365: LD_VAR 0 1
57369: PPUSH
57370: CALL_OW 302
57374: NOT
57375: IFTRUE 57394
57377: PUSH
57378: LD_VAR 0 2
57382: PPUSH
57383: LD_VAR 0 3
57387: PPUSH
57388: CALL_OW 488
57392: NOT
57393: OR
57394: IFTRUE 57403
57396: PUSH
57397: LD_VAR 0 4
57401: NOT
57402: OR
57403: IFFALSE 57407
// exit ;
57405: GO 57749
// list := [ ] ;
57407: LD_ADDR_VAR 0 13
57411: PUSH
57412: EMPTY
57413: ST_TO_ADDR
// if x - r < 0 then
57414: LD_VAR 0 2
57418: PUSH
57419: LD_VAR 0 4
57423: MINUS
57424: PUSH
57425: LD_INT 0
57427: LESS
57428: IFFALSE 57440
// min_x := 0 else
57430: LD_ADDR_VAR 0 7
57434: PUSH
57435: LD_INT 0
57437: ST_TO_ADDR
57438: GO 57456
// min_x := x - r ;
57440: LD_ADDR_VAR 0 7
57444: PUSH
57445: LD_VAR 0 2
57449: PUSH
57450: LD_VAR 0 4
57454: MINUS
57455: ST_TO_ADDR
// if y - r < 0 then
57456: LD_VAR 0 3
57460: PUSH
57461: LD_VAR 0 4
57465: MINUS
57466: PUSH
57467: LD_INT 0
57469: LESS
57470: IFFALSE 57482
// min_y := 0 else
57472: LD_ADDR_VAR 0 8
57476: PUSH
57477: LD_INT 0
57479: ST_TO_ADDR
57480: GO 57498
// min_y := y - r ;
57482: LD_ADDR_VAR 0 8
57486: PUSH
57487: LD_VAR 0 3
57491: PUSH
57492: LD_VAR 0 4
57496: MINUS
57497: ST_TO_ADDR
// max_x := x + r ;
57498: LD_ADDR_VAR 0 9
57502: PUSH
57503: LD_VAR 0 2
57507: PUSH
57508: LD_VAR 0 4
57512: PLUS
57513: ST_TO_ADDR
// max_y := y + r ;
57514: LD_ADDR_VAR 0 10
57518: PUSH
57519: LD_VAR 0 3
57523: PUSH
57524: LD_VAR 0 4
57528: PLUS
57529: ST_TO_ADDR
// for _x = min_x to max_x do
57530: LD_ADDR_VAR 0 11
57534: PUSH
57535: DOUBLE
57536: LD_VAR 0 7
57540: DEC
57541: ST_TO_ADDR
57542: LD_VAR 0 9
57546: PUSH
57547: FOR_TO
57548: IFFALSE 57667
// for _y = min_y to max_y do
57550: LD_ADDR_VAR 0 12
57554: PUSH
57555: DOUBLE
57556: LD_VAR 0 8
57560: DEC
57561: ST_TO_ADDR
57562: LD_VAR 0 10
57566: PUSH
57567: FOR_TO
57568: IFFALSE 57663
// begin if not ValidHex ( _x , _y ) then
57570: LD_VAR 0 11
57574: PPUSH
57575: LD_VAR 0 12
57579: PPUSH
57580: CALL_OW 488
57584: NOT
57585: IFFALSE 57589
// continue ;
57587: GO 57567
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
57589: LD_VAR 0 11
57593: PPUSH
57594: LD_VAR 0 12
57598: PPUSH
57599: CALL_OW 351
57603: IFFALSE 57621
57605: PUSH
57606: LD_VAR 0 11
57610: PPUSH
57611: LD_VAR 0 12
57615: PPUSH
57616: CALL_OW 554
57620: AND
57621: IFFALSE 57661
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
57623: LD_ADDR_VAR 0 13
57627: PUSH
57628: LD_VAR 0 13
57632: PPUSH
57633: LD_VAR 0 13
57637: PUSH
57638: LD_INT 1
57640: PLUS
57641: PPUSH
57642: LD_VAR 0 11
57646: PUSH
57647: LD_VAR 0 12
57651: PUSH
57652: EMPTY
57653: LIST
57654: LIST
57655: PPUSH
57656: CALL_OW 2
57660: ST_TO_ADDR
// end ;
57661: GO 57567
57663: POP
57664: POP
57665: GO 57547
57667: POP
57668: POP
// if not list then
57669: LD_VAR 0 13
57673: NOT
57674: IFFALSE 57678
// exit ;
57676: GO 57749
// for i in list do
57678: LD_ADDR_VAR 0 6
57682: PUSH
57683: LD_VAR 0 13
57687: PUSH
57688: FOR_IN
57689: IFFALSE 57747
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
57691: LD_VAR 0 1
57695: PPUSH
57696: LD_STRING M
57698: PUSH
57699: LD_VAR 0 6
57703: PUSH
57704: LD_INT 1
57706: ARRAY
57707: PUSH
57708: LD_VAR 0 6
57712: PUSH
57713: LD_INT 2
57715: ARRAY
57716: PUSH
57717: LD_INT 0
57719: PUSH
57720: LD_INT 0
57722: PUSH
57723: LD_INT 0
57725: PUSH
57726: LD_INT 0
57728: PUSH
57729: EMPTY
57730: LIST
57731: LIST
57732: LIST
57733: LIST
57734: LIST
57735: LIST
57736: LIST
57737: PUSH
57738: EMPTY
57739: LIST
57740: PPUSH
57741: CALL_OW 447
57745: GO 57688
57747: POP
57748: POP
// end ;
57749: LD_VAR 0 5
57753: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
57754: LD_INT 0
57756: PPUSH
57757: PPUSH
57758: PPUSH
57759: PPUSH
57760: PPUSH
57761: PPUSH
57762: PPUSH
57763: PPUSH
57764: PPUSH
57765: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
57766: LD_VAR 0 1
57770: PPUSH
57771: CALL_OW 302
57775: NOT
57776: IFTRUE 57795
57778: PUSH
57779: LD_VAR 0 2
57783: PPUSH
57784: LD_VAR 0 3
57788: PPUSH
57789: CALL_OW 488
57793: NOT
57794: OR
57795: IFTRUE 57804
57797: PUSH
57798: LD_VAR 0 4
57802: NOT
57803: OR
57804: IFFALSE 57808
// exit ;
57806: GO 58325
// list := [ ] ;
57808: LD_ADDR_VAR 0 13
57812: PUSH
57813: EMPTY
57814: ST_TO_ADDR
// if x - r < 0 then
57815: LD_VAR 0 2
57819: PUSH
57820: LD_VAR 0 4
57824: MINUS
57825: PUSH
57826: LD_INT 0
57828: LESS
57829: IFFALSE 57841
// min_x := 0 else
57831: LD_ADDR_VAR 0 7
57835: PUSH
57836: LD_INT 0
57838: ST_TO_ADDR
57839: GO 57857
// min_x := x - r ;
57841: LD_ADDR_VAR 0 7
57845: PUSH
57846: LD_VAR 0 2
57850: PUSH
57851: LD_VAR 0 4
57855: MINUS
57856: ST_TO_ADDR
// if y - r < 0 then
57857: LD_VAR 0 3
57861: PUSH
57862: LD_VAR 0 4
57866: MINUS
57867: PUSH
57868: LD_INT 0
57870: LESS
57871: IFFALSE 57883
// min_y := 0 else
57873: LD_ADDR_VAR 0 8
57877: PUSH
57878: LD_INT 0
57880: ST_TO_ADDR
57881: GO 57899
// min_y := y - r ;
57883: LD_ADDR_VAR 0 8
57887: PUSH
57888: LD_VAR 0 3
57892: PUSH
57893: LD_VAR 0 4
57897: MINUS
57898: ST_TO_ADDR
// max_x := x + r ;
57899: LD_ADDR_VAR 0 9
57903: PUSH
57904: LD_VAR 0 2
57908: PUSH
57909: LD_VAR 0 4
57913: PLUS
57914: ST_TO_ADDR
// max_y := y + r ;
57915: LD_ADDR_VAR 0 10
57919: PUSH
57920: LD_VAR 0 3
57924: PUSH
57925: LD_VAR 0 4
57929: PLUS
57930: ST_TO_ADDR
// for _x = min_x to max_x do
57931: LD_ADDR_VAR 0 11
57935: PUSH
57936: DOUBLE
57937: LD_VAR 0 7
57941: DEC
57942: ST_TO_ADDR
57943: LD_VAR 0 9
57947: PUSH
57948: FOR_TO
57949: IFFALSE 58068
// for _y = min_y to max_y do
57951: LD_ADDR_VAR 0 12
57955: PUSH
57956: DOUBLE
57957: LD_VAR 0 8
57961: DEC
57962: ST_TO_ADDR
57963: LD_VAR 0 10
57967: PUSH
57968: FOR_TO
57969: IFFALSE 58064
// begin if not ValidHex ( _x , _y ) then
57971: LD_VAR 0 11
57975: PPUSH
57976: LD_VAR 0 12
57980: PPUSH
57981: CALL_OW 488
57985: NOT
57986: IFFALSE 57990
// continue ;
57988: GO 57968
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
57990: LD_VAR 0 11
57994: PPUSH
57995: LD_VAR 0 12
57999: PPUSH
58000: CALL_OW 351
58004: IFFALSE 58022
58006: PUSH
58007: LD_VAR 0 11
58011: PPUSH
58012: LD_VAR 0 12
58016: PPUSH
58017: CALL_OW 554
58021: AND
58022: IFFALSE 58062
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
58024: LD_ADDR_VAR 0 13
58028: PUSH
58029: LD_VAR 0 13
58033: PPUSH
58034: LD_VAR 0 13
58038: PUSH
58039: LD_INT 1
58041: PLUS
58042: PPUSH
58043: LD_VAR 0 11
58047: PUSH
58048: LD_VAR 0 12
58052: PUSH
58053: EMPTY
58054: LIST
58055: LIST
58056: PPUSH
58057: CALL_OW 2
58061: ST_TO_ADDR
// end ;
58062: GO 57968
58064: POP
58065: POP
58066: GO 57948
58068: POP
58069: POP
// if not list then
58070: LD_VAR 0 13
58074: NOT
58075: IFFALSE 58079
// exit ;
58077: GO 58325
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
58079: LD_ADDR_VAR 0 13
58083: PUSH
58084: LD_VAR 0 1
58088: PPUSH
58089: LD_VAR 0 13
58093: PPUSH
58094: LD_INT 1
58096: PPUSH
58097: LD_INT 1
58099: PPUSH
58100: CALL 8449 0 4
58104: ST_TO_ADDR
// ComStop ( flame ) ;
58105: LD_VAR 0 1
58109: PPUSH
58110: CALL_OW 141
// for i in list do
58114: LD_ADDR_VAR 0 6
58118: PUSH
58119: LD_VAR 0 13
58123: PUSH
58124: FOR_IN
58125: IFFALSE 58156
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
58127: LD_VAR 0 1
58131: PPUSH
58132: LD_VAR 0 6
58136: PUSH
58137: LD_INT 1
58139: ARRAY
58140: PPUSH
58141: LD_VAR 0 6
58145: PUSH
58146: LD_INT 2
58148: ARRAY
58149: PPUSH
58150: CALL_OW 176
58154: GO 58124
58156: POP
58157: POP
// repeat wait ( 0 0$1 ) ;
58158: LD_INT 35
58160: PPUSH
58161: CALL_OW 67
// task := GetTaskList ( flame ) ;
58165: LD_ADDR_VAR 0 14
58169: PUSH
58170: LD_VAR 0 1
58174: PPUSH
58175: CALL_OW 437
58179: ST_TO_ADDR
// if not task then
58180: LD_VAR 0 14
58184: NOT
58185: IFFALSE 58189
// exit ;
58187: GO 58325
// if task [ 1 ] [ 1 ] <> | then
58189: LD_VAR 0 14
58193: PUSH
58194: LD_INT 1
58196: ARRAY
58197: PUSH
58198: LD_INT 1
58200: ARRAY
58201: PUSH
58202: LD_STRING |
58204: NONEQUAL
58205: IFFALSE 58209
// exit ;
58207: GO 58325
// _x := task [ 1 ] [ 2 ] ;
58209: LD_ADDR_VAR 0 11
58213: PUSH
58214: LD_VAR 0 14
58218: PUSH
58219: LD_INT 1
58221: ARRAY
58222: PUSH
58223: LD_INT 2
58225: ARRAY
58226: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
58227: LD_ADDR_VAR 0 12
58231: PUSH
58232: LD_VAR 0 14
58236: PUSH
58237: LD_INT 1
58239: ARRAY
58240: PUSH
58241: LD_INT 3
58243: ARRAY
58244: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
58245: LD_VAR 0 11
58249: PPUSH
58250: LD_VAR 0 12
58254: PPUSH
58255: CALL_OW 351
58259: NOT
58260: IFTRUE 58279
58262: PUSH
58263: LD_VAR 0 11
58267: PPUSH
58268: LD_VAR 0 12
58272: PPUSH
58273: CALL_OW 554
58277: NOT
58278: OR
58279: IFFALSE 58313
// begin task := Delete ( task , 1 ) ;
58281: LD_ADDR_VAR 0 14
58285: PUSH
58286: LD_VAR 0 14
58290: PPUSH
58291: LD_INT 1
58293: PPUSH
58294: CALL_OW 3
58298: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
58299: LD_VAR 0 1
58303: PPUSH
58304: LD_VAR 0 14
58308: PPUSH
58309: CALL_OW 446
// end ; until not HasTask ( flame ) ;
58313: LD_VAR 0 1
58317: PPUSH
58318: CALL_OW 314
58322: NOT
58323: IFFALSE 58158
// end ;
58325: LD_VAR 0 5
58329: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
58330: LD_EXP 48
58334: NOT
58335: IFFALSE 58385
58337: GO 58339
58339: DISABLE
// begin initHack := true ;
58340: LD_ADDR_EXP 48
58344: PUSH
58345: LD_INT 1
58347: ST_TO_ADDR
// hackTanks := [ ] ;
58348: LD_ADDR_EXP 49
58352: PUSH
58353: EMPTY
58354: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
58355: LD_ADDR_EXP 50
58359: PUSH
58360: EMPTY
58361: ST_TO_ADDR
// hackLimit := 3 ;
58362: LD_ADDR_EXP 51
58366: PUSH
58367: LD_INT 3
58369: ST_TO_ADDR
// hackDist := 12 ;
58370: LD_ADDR_EXP 52
58374: PUSH
58375: LD_INT 12
58377: ST_TO_ADDR
// hackCounter := [ ] ;
58378: LD_ADDR_EXP 53
58382: PUSH
58383: EMPTY
58384: ST_TO_ADDR
// end ;
58385: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
58386: LD_EXP 48
58390: IFFALSE 58408
58392: PUSH
58393: LD_INT 34
58395: PUSH
58396: LD_INT 99
58398: PUSH
58399: EMPTY
58400: LIST
58401: LIST
58402: PPUSH
58403: CALL_OW 69
58407: AND
58408: IFFALSE 58661
58410: GO 58412
58412: DISABLE
58413: LD_INT 0
58415: PPUSH
58416: PPUSH
// begin enable ;
58417: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
58418: LD_ADDR_VAR 0 1
58422: PUSH
58423: LD_INT 34
58425: PUSH
58426: LD_INT 99
58428: PUSH
58429: EMPTY
58430: LIST
58431: LIST
58432: PPUSH
58433: CALL_OW 69
58437: PUSH
58438: FOR_IN
58439: IFFALSE 58659
// begin if not i in hackTanks then
58441: LD_VAR 0 1
58445: PUSH
58446: LD_EXP 49
58450: IN
58451: NOT
58452: IFFALSE 58535
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
58454: LD_ADDR_EXP 49
58458: PUSH
58459: LD_EXP 49
58463: PPUSH
58464: LD_EXP 49
58468: PUSH
58469: LD_INT 1
58471: PLUS
58472: PPUSH
58473: LD_VAR 0 1
58477: PPUSH
58478: CALL_OW 1
58482: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
58483: LD_ADDR_EXP 50
58487: PUSH
58488: LD_EXP 50
58492: PPUSH
58493: LD_EXP 50
58497: PUSH
58498: LD_INT 1
58500: PLUS
58501: PPUSH
58502: EMPTY
58503: PPUSH
58504: CALL_OW 1
58508: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
58509: LD_ADDR_EXP 53
58513: PUSH
58514: LD_EXP 53
58518: PPUSH
58519: LD_EXP 53
58523: PUSH
58524: LD_INT 1
58526: PLUS
58527: PPUSH
58528: EMPTY
58529: PPUSH
58530: CALL_OW 1
58534: ST_TO_ADDR
// end ; if not IsOk ( i ) then
58535: LD_VAR 0 1
58539: PPUSH
58540: CALL_OW 302
58544: NOT
58545: IFFALSE 58558
// begin HackUnlinkAll ( i ) ;
58547: LD_VAR 0 1
58551: PPUSH
58552: CALL 58664 0 1
// continue ;
58556: GO 58438
// end ; HackCheckCapturedStatus ( i ) ;
58558: LD_VAR 0 1
58562: PPUSH
58563: CALL 59109 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
58567: LD_ADDR_VAR 0 2
58571: PUSH
58572: LD_INT 81
58574: PUSH
58575: LD_VAR 0 1
58579: PPUSH
58580: CALL_OW 255
58584: PUSH
58585: EMPTY
58586: LIST
58587: LIST
58588: PUSH
58589: LD_INT 33
58591: PUSH
58592: LD_INT 3
58594: PUSH
58595: EMPTY
58596: LIST
58597: LIST
58598: PUSH
58599: LD_INT 91
58601: PUSH
58602: LD_VAR 0 1
58606: PUSH
58607: LD_EXP 52
58611: PUSH
58612: EMPTY
58613: LIST
58614: LIST
58615: LIST
58616: PUSH
58617: LD_INT 50
58619: PUSH
58620: EMPTY
58621: LIST
58622: PUSH
58623: EMPTY
58624: LIST
58625: LIST
58626: LIST
58627: LIST
58628: PPUSH
58629: CALL_OW 69
58633: ST_TO_ADDR
// if not tmp then
58634: LD_VAR 0 2
58638: NOT
58639: IFFALSE 58643
// continue ;
58641: GO 58438
// HackLink ( i , tmp ) ;
58643: LD_VAR 0 1
58647: PPUSH
58648: LD_VAR 0 2
58652: PPUSH
58653: CALL 58800 0 2
// end ;
58657: GO 58438
58659: POP
58660: POP
// end ;
58661: PPOPN 2
58663: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
58664: LD_INT 0
58666: PPUSH
58667: PPUSH
58668: PPUSH
// if not hack in hackTanks then
58669: LD_VAR 0 1
58673: PUSH
58674: LD_EXP 49
58678: IN
58679: NOT
58680: IFFALSE 58684
// exit ;
58682: GO 58795
// index := GetElementIndex ( hackTanks , hack ) ;
58684: LD_ADDR_VAR 0 4
58688: PUSH
58689: LD_EXP 49
58693: PPUSH
58694: LD_VAR 0 1
58698: PPUSH
58699: CALL 7744 0 2
58703: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
58704: LD_EXP 50
58708: PUSH
58709: LD_VAR 0 4
58713: ARRAY
58714: IFFALSE 58795
// begin for i in hackTanksCaptured [ index ] do
58716: LD_ADDR_VAR 0 3
58720: PUSH
58721: LD_EXP 50
58725: PUSH
58726: LD_VAR 0 4
58730: ARRAY
58731: PUSH
58732: FOR_IN
58733: IFFALSE 58759
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
58735: LD_VAR 0 3
58739: PUSH
58740: LD_INT 1
58742: ARRAY
58743: PPUSH
58744: LD_VAR 0 3
58748: PUSH
58749: LD_INT 2
58751: ARRAY
58752: PPUSH
58753: CALL_OW 235
58757: GO 58732
58759: POP
58760: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
58761: LD_ADDR_EXP 50
58765: PUSH
58766: LD_EXP 50
58770: PPUSH
58771: LD_VAR 0 4
58775: PPUSH
58776: EMPTY
58777: PPUSH
58778: CALL_OW 1
58782: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
58783: LD_VAR 0 1
58787: PPUSH
58788: LD_INT 0
58790: PPUSH
58791: CALL_OW 505
// end ; end ;
58795: LD_VAR 0 2
58799: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
58800: LD_INT 0
58802: PPUSH
58803: PPUSH
58804: PPUSH
// if not hack in hackTanks or not vehicles then
58805: LD_VAR 0 1
58809: PUSH
58810: LD_EXP 49
58814: IN
58815: NOT
58816: IFTRUE 58825
58818: PUSH
58819: LD_VAR 0 2
58823: NOT
58824: OR
58825: IFFALSE 58829
// exit ;
58827: GO 59104
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
58829: LD_ADDR_VAR 0 2
58833: PUSH
58834: LD_VAR 0 1
58838: PPUSH
58839: LD_VAR 0 2
58843: PPUSH
58844: LD_INT 1
58846: PPUSH
58847: LD_INT 1
58849: PPUSH
58850: CALL 8396 0 4
58854: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
58855: LD_ADDR_VAR 0 5
58859: PUSH
58860: LD_EXP 49
58864: PPUSH
58865: LD_VAR 0 1
58869: PPUSH
58870: CALL 7744 0 2
58874: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
58875: LD_EXP 50
58879: PUSH
58880: LD_VAR 0 5
58884: ARRAY
58885: PUSH
58886: LD_EXP 51
58890: LESS
58891: IFFALSE 59080
// begin for i := 1 to vehicles do
58893: LD_ADDR_VAR 0 4
58897: PUSH
58898: DOUBLE
58899: LD_INT 1
58901: DEC
58902: ST_TO_ADDR
58903: LD_VAR 0 2
58907: PUSH
58908: FOR_TO
58909: IFFALSE 59078
// begin if hackTanksCaptured [ index ] = hackLimit then
58911: LD_EXP 50
58915: PUSH
58916: LD_VAR 0 5
58920: ARRAY
58921: PUSH
58922: LD_EXP 51
58926: EQUAL
58927: IFFALSE 58931
// break ;
58929: GO 59078
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
58931: LD_ADDR_EXP 53
58935: PUSH
58936: LD_EXP 53
58940: PPUSH
58941: LD_VAR 0 5
58945: PPUSH
58946: LD_EXP 53
58950: PUSH
58951: LD_VAR 0 5
58955: ARRAY
58956: PUSH
58957: LD_INT 1
58959: PLUS
58960: PPUSH
58961: CALL_OW 1
58965: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
58966: LD_ADDR_EXP 50
58970: PUSH
58971: LD_EXP 50
58975: PPUSH
58976: LD_VAR 0 5
58980: PUSH
58981: LD_EXP 50
58985: PUSH
58986: LD_VAR 0 5
58990: ARRAY
58991: PUSH
58992: LD_INT 1
58994: PLUS
58995: PUSH
58996: EMPTY
58997: LIST
58998: LIST
58999: PPUSH
59000: LD_VAR 0 2
59004: PUSH
59005: LD_VAR 0 4
59009: ARRAY
59010: PUSH
59011: LD_VAR 0 2
59015: PUSH
59016: LD_VAR 0 4
59020: ARRAY
59021: PPUSH
59022: CALL_OW 255
59026: PUSH
59027: EMPTY
59028: LIST
59029: LIST
59030: PPUSH
59031: CALL 7961 0 3
59035: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
59036: LD_VAR 0 2
59040: PUSH
59041: LD_VAR 0 4
59045: ARRAY
59046: PPUSH
59047: LD_VAR 0 1
59051: PPUSH
59052: CALL_OW 255
59056: PPUSH
59057: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
59061: LD_VAR 0 2
59065: PUSH
59066: LD_VAR 0 4
59070: ARRAY
59071: PPUSH
59072: CALL_OW 141
// end ;
59076: GO 58908
59078: POP
59079: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
59080: LD_VAR 0 1
59084: PPUSH
59085: LD_EXP 50
59089: PUSH
59090: LD_VAR 0 5
59094: ARRAY
59095: PUSH
59096: LD_INT 0
59098: PLUS
59099: PPUSH
59100: CALL_OW 505
// end ;
59104: LD_VAR 0 3
59108: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
59109: LD_INT 0
59111: PPUSH
59112: PPUSH
59113: PPUSH
59114: PPUSH
// if not hack in hackTanks then
59115: LD_VAR 0 1
59119: PUSH
59120: LD_EXP 49
59124: IN
59125: NOT
59126: IFFALSE 59130
// exit ;
59128: GO 59374
// index := GetElementIndex ( hackTanks , hack ) ;
59130: LD_ADDR_VAR 0 4
59134: PUSH
59135: LD_EXP 49
59139: PPUSH
59140: LD_VAR 0 1
59144: PPUSH
59145: CALL 7744 0 2
59149: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
59150: LD_ADDR_VAR 0 3
59154: PUSH
59155: DOUBLE
59156: LD_EXP 50
59160: PUSH
59161: LD_VAR 0 4
59165: ARRAY
59166: INC
59167: ST_TO_ADDR
59168: LD_INT 1
59170: PUSH
59171: FOR_DOWNTO
59172: IFFALSE 59348
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
59174: LD_ADDR_VAR 0 5
59178: PUSH
59179: LD_EXP 50
59183: PUSH
59184: LD_VAR 0 4
59188: ARRAY
59189: PUSH
59190: LD_VAR 0 3
59194: ARRAY
59195: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
59196: LD_VAR 0 5
59200: PUSH
59201: LD_INT 1
59203: ARRAY
59204: PPUSH
59205: CALL_OW 302
59209: NOT
59210: IFTRUE 59238
59212: PUSH
59213: LD_VAR 0 5
59217: PUSH
59218: LD_INT 1
59220: ARRAY
59221: PPUSH
59222: CALL_OW 255
59226: PUSH
59227: LD_VAR 0 1
59231: PPUSH
59232: CALL_OW 255
59236: NONEQUAL
59237: OR
59238: IFFALSE 59346
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
59240: LD_VAR 0 5
59244: PUSH
59245: LD_INT 1
59247: ARRAY
59248: PPUSH
59249: CALL_OW 305
59253: IFFALSE 59281
59255: PUSH
59256: LD_VAR 0 5
59260: PUSH
59261: LD_INT 1
59263: ARRAY
59264: PPUSH
59265: CALL_OW 255
59269: PUSH
59270: LD_VAR 0 1
59274: PPUSH
59275: CALL_OW 255
59279: EQUAL
59280: AND
59281: IFFALSE 59305
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
59283: LD_VAR 0 5
59287: PUSH
59288: LD_INT 1
59290: ARRAY
59291: PPUSH
59292: LD_VAR 0 5
59296: PUSH
59297: LD_INT 2
59299: ARRAY
59300: PPUSH
59301: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
59305: LD_ADDR_EXP 50
59309: PUSH
59310: LD_EXP 50
59314: PPUSH
59315: LD_VAR 0 4
59319: PPUSH
59320: LD_EXP 50
59324: PUSH
59325: LD_VAR 0 4
59329: ARRAY
59330: PPUSH
59331: LD_VAR 0 3
59335: PPUSH
59336: CALL_OW 3
59340: PPUSH
59341: CALL_OW 1
59345: ST_TO_ADDR
// end ; end ;
59346: GO 59171
59348: POP
59349: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
59350: LD_VAR 0 1
59354: PPUSH
59355: LD_EXP 50
59359: PUSH
59360: LD_VAR 0 4
59364: ARRAY
59365: PUSH
59366: LD_INT 0
59368: PLUS
59369: PPUSH
59370: CALL_OW 505
// end ;
59374: LD_VAR 0 2
59378: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
59379: LD_INT 0
59381: PPUSH
59382: PPUSH
59383: PPUSH
59384: PPUSH
// if not hack in hackTanks then
59385: LD_VAR 0 1
59389: PUSH
59390: LD_EXP 49
59394: IN
59395: NOT
59396: IFFALSE 59400
// exit ;
59398: GO 59485
// index := GetElementIndex ( hackTanks , hack ) ;
59400: LD_ADDR_VAR 0 5
59404: PUSH
59405: LD_EXP 49
59409: PPUSH
59410: LD_VAR 0 1
59414: PPUSH
59415: CALL 7744 0 2
59419: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
59420: LD_ADDR_VAR 0 4
59424: PUSH
59425: DOUBLE
59426: LD_INT 1
59428: DEC
59429: ST_TO_ADDR
59430: LD_EXP 50
59434: PUSH
59435: LD_VAR 0 5
59439: ARRAY
59440: PUSH
59441: FOR_TO
59442: IFFALSE 59483
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
59444: LD_EXP 50
59448: PUSH
59449: LD_VAR 0 5
59453: ARRAY
59454: PUSH
59455: LD_VAR 0 4
59459: ARRAY
59460: PUSH
59461: LD_INT 1
59463: ARRAY
59464: PUSH
59465: LD_VAR 0 2
59469: EQUAL
59470: IFFALSE 59481
// KillUnit ( vehicle ) ;
59472: LD_VAR 0 2
59476: PPUSH
59477: CALL_OW 66
59481: GO 59441
59483: POP
59484: POP
// end ;
59485: LD_VAR 0 3
59489: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
59490: LD_EXP 54
59494: NOT
59495: IFFALSE 59628
59497: GO 59499
59499: DISABLE
59500: LD_INT 0
59502: PPUSH
// begin initMiner := true ;
59503: LD_ADDR_EXP 54
59507: PUSH
59508: LD_INT 1
59510: ST_TO_ADDR
// minersList := [ ] ;
59511: LD_ADDR_EXP 55
59515: PUSH
59516: EMPTY
59517: ST_TO_ADDR
// minerMinesList := [ ] ;
59518: LD_ADDR_EXP 56
59522: PUSH
59523: EMPTY
59524: ST_TO_ADDR
// minesLimitPerVehicle := 6 ;
59525: LD_ADDR_EXP 57
59529: PUSH
59530: LD_INT 6
59532: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
59533: LD_ADDR_VAR 0 1
59537: PUSH
59538: LD_INT 34
59540: PUSH
59541: LD_INT 81
59543: PUSH
59544: EMPTY
59545: LIST
59546: LIST
59547: PPUSH
59548: CALL_OW 69
59552: PUSH
59553: FOR_IN
59554: IFFALSE 59626
// begin if not i in minersList then
59556: LD_VAR 0 1
59560: PUSH
59561: LD_EXP 55
59565: IN
59566: NOT
59567: IFFALSE 59624
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
59569: LD_ADDR_EXP 55
59573: PUSH
59574: LD_EXP 55
59578: PPUSH
59579: LD_EXP 55
59583: PUSH
59584: LD_INT 1
59586: PLUS
59587: PPUSH
59588: LD_VAR 0 1
59592: PPUSH
59593: CALL_OW 1
59597: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
59598: LD_ADDR_EXP 56
59602: PUSH
59603: LD_EXP 56
59607: PPUSH
59608: LD_EXP 56
59612: PUSH
59613: LD_INT 1
59615: PLUS
59616: PPUSH
59617: EMPTY
59618: PPUSH
59619: CALL_OW 1
59623: ST_TO_ADDR
// end end ;
59624: GO 59553
59626: POP
59627: POP
// end ;
59628: PPOPN 1
59630: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
59631: LD_EXP 54
59635: IFFALSE 59666
59637: PUSH
59638: LD_EXP 56
59642: PPUSH
59643: CALL 5043 0 1
59647: IFTRUE 59665
59649: PUSH
59650: LD_INT 34
59652: PUSH
59653: LD_INT 81
59655: PUSH
59656: EMPTY
59657: LIST
59658: LIST
59659: PPUSH
59660: CALL_OW 69
59664: OR
59665: AND
59666: IFFALSE 60165
59668: GO 59670
59670: DISABLE
59671: LD_INT 0
59673: PPUSH
59674: PPUSH
59675: PPUSH
59676: PPUSH
// begin enable ;
59677: ENABLE
// for i := minerMinesList downto 1 do
59678: LD_ADDR_VAR 0 1
59682: PUSH
59683: DOUBLE
59684: LD_EXP 56
59688: INC
59689: ST_TO_ADDR
59690: LD_INT 1
59692: PUSH
59693: FOR_DOWNTO
59694: IFFALSE 60163
// begin if IsLive ( minersList [ i ] ) then
59696: LD_EXP 55
59700: PUSH
59701: LD_VAR 0 1
59705: ARRAY
59706: PPUSH
59707: CALL_OW 300
59711: IFFALSE 59744
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
59713: LD_EXP 55
59717: PUSH
59718: LD_VAR 0 1
59722: ARRAY
59723: PPUSH
59724: LD_EXP 56
59728: PUSH
59729: LD_VAR 0 1
59733: ARRAY
59734: PPUSH
59735: CALL 5043 0 1
59739: PPUSH
59740: CALL_OW 505
// if not minerMinesList [ i ] then
59744: LD_EXP 56
59748: PUSH
59749: LD_VAR 0 1
59753: ARRAY
59754: NOT
59755: IFFALSE 59759
// continue ;
59757: GO 59693
// for j := minerMinesList [ i ] downto 1 do
59759: LD_ADDR_VAR 0 2
59763: PUSH
59764: DOUBLE
59765: LD_EXP 56
59769: PUSH
59770: LD_VAR 0 1
59774: ARRAY
59775: INC
59776: ST_TO_ADDR
59777: LD_INT 1
59779: PUSH
59780: FOR_DOWNTO
59781: IFFALSE 60159
// begin side := GetSide ( minersList [ i ] ) ;
59783: LD_ADDR_VAR 0 3
59787: PUSH
59788: LD_EXP 55
59792: PUSH
59793: LD_VAR 0 1
59797: ARRAY
59798: PPUSH
59799: CALL_OW 255
59803: ST_TO_ADDR
// if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
59804: LD_EXP 55
59808: PUSH
59809: LD_VAR 0 1
59813: ARRAY
59814: PPUSH
59815: CALL_OW 301
59819: IFTRUE 59839
59821: PUSH
59822: LD_EXP 55
59826: PUSH
59827: LD_VAR 0 1
59831: ARRAY
59832: PPUSH
59833: CALL_OW 305
59837: NOT
59838: OR
59839: IFFALSE 59930
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
59841: LD_EXP 56
59845: PUSH
59846: LD_VAR 0 1
59850: ARRAY
59851: PUSH
59852: LD_VAR 0 2
59856: ARRAY
59857: PUSH
59858: LD_INT 1
59860: ARRAY
59861: PPUSH
59862: LD_EXP 56
59866: PUSH
59867: LD_VAR 0 1
59871: ARRAY
59872: PUSH
59873: LD_VAR 0 2
59877: ARRAY
59878: PUSH
59879: LD_INT 2
59881: ARRAY
59882: PPUSH
59883: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
59887: LD_ADDR_EXP 56
59891: PUSH
59892: LD_EXP 56
59896: PPUSH
59897: LD_VAR 0 1
59901: PPUSH
59902: LD_EXP 56
59906: PUSH
59907: LD_VAR 0 1
59911: ARRAY
59912: PPUSH
59913: LD_VAR 0 2
59917: PPUSH
59918: CALL_OW 3
59922: PPUSH
59923: CALL_OW 1
59927: ST_TO_ADDR
// continue ;
59928: GO 59780
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
59930: LD_ADDR_VAR 0 4
59934: PUSH
59935: LD_EXP 56
59939: PUSH
59940: LD_VAR 0 1
59944: ARRAY
59945: PUSH
59946: LD_VAR 0 2
59950: ARRAY
59951: PUSH
59952: LD_INT 1
59954: ARRAY
59955: PPUSH
59956: LD_EXP 56
59960: PUSH
59961: LD_VAR 0 1
59965: ARRAY
59966: PUSH
59967: LD_VAR 0 2
59971: ARRAY
59972: PUSH
59973: LD_INT 2
59975: ARRAY
59976: PPUSH
59977: CALL_OW 428
59981: ST_TO_ADDR
// if not tmp then
59982: LD_VAR 0 4
59986: NOT
59987: IFFALSE 59991
// continue ;
59989: GO 59780
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
59991: LD_VAR 0 4
59995: PUSH
59996: LD_INT 81
59998: PUSH
59999: LD_VAR 0 3
60003: PUSH
60004: EMPTY
60005: LIST
60006: LIST
60007: PPUSH
60008: CALL_OW 69
60012: IN
60013: IFFALSE 60063
60015: PUSH
60016: LD_EXP 56
60020: PUSH
60021: LD_VAR 0 1
60025: ARRAY
60026: PUSH
60027: LD_VAR 0 2
60031: ARRAY
60032: PUSH
60033: LD_INT 1
60035: ARRAY
60036: PPUSH
60037: LD_EXP 56
60041: PUSH
60042: LD_VAR 0 1
60046: ARRAY
60047: PUSH
60048: LD_VAR 0 2
60052: ARRAY
60053: PUSH
60054: LD_INT 2
60056: ARRAY
60057: PPUSH
60058: CALL_OW 458
60062: AND
60063: IFFALSE 60157
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
60065: LD_EXP 56
60069: PUSH
60070: LD_VAR 0 1
60074: ARRAY
60075: PUSH
60076: LD_VAR 0 2
60080: ARRAY
60081: PUSH
60082: LD_INT 1
60084: ARRAY
60085: PPUSH
60086: LD_EXP 56
60090: PUSH
60091: LD_VAR 0 1
60095: ARRAY
60096: PUSH
60097: LD_VAR 0 2
60101: ARRAY
60102: PUSH
60103: LD_INT 2
60105: ARRAY
60106: PPUSH
60107: LD_VAR 0 3
60111: PPUSH
60112: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
60116: LD_ADDR_EXP 56
60120: PUSH
60121: LD_EXP 56
60125: PPUSH
60126: LD_VAR 0 1
60130: PPUSH
60131: LD_EXP 56
60135: PUSH
60136: LD_VAR 0 1
60140: ARRAY
60141: PPUSH
60142: LD_VAR 0 2
60146: PPUSH
60147: CALL_OW 3
60151: PPUSH
60152: CALL_OW 1
60156: ST_TO_ADDR
// end ; end ;
60157: GO 59780
60159: POP
60160: POP
// end ;
60161: GO 59693
60163: POP
60164: POP
// end ;
60165: PPOPN 4
60167: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
60168: LD_INT 0
60170: PPUSH
60171: PPUSH
60172: PPUSH
60173: PPUSH
// result := false ;
60174: LD_ADDR_VAR 0 4
60178: PUSH
60179: LD_INT 0
60181: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
60182: LD_VAR 0 1
60186: PPUSH
60187: CALL_OW 264
60191: PUSH
60192: LD_INT 81
60194: EQUAL
60195: NOT
60196: IFFALSE 60200
// exit ;
60198: GO 60570
// side := GetSide ( unit ) ;
60200: LD_ADDR_VAR 0 6
60204: PUSH
60205: LD_VAR 0 1
60209: PPUSH
60210: CALL_OW 255
60214: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
60215: LD_ADDR_VAR 0 5
60219: PUSH
60220: LD_EXP 55
60224: PPUSH
60225: LD_VAR 0 1
60229: PPUSH
60230: CALL 7744 0 2
60234: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
60235: LD_EXP 56
60239: PUSH
60240: LD_VAR 0 5
60244: ARRAY
60245: PUSH
60246: LD_EXP 57
60250: GREATEREQUAL
60251: IFFALSE 60255
// exit ;
60253: GO 60570
// ComMoveXY ( unit , x , y ) ;
60255: LD_VAR 0 1
60259: PPUSH
60260: LD_VAR 0 2
60264: PPUSH
60265: LD_VAR 0 3
60269: PPUSH
60270: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
60274: LD_INT 35
60276: PPUSH
60277: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
60281: LD_VAR 0 1
60285: PPUSH
60286: LD_VAR 0 2
60290: PPUSH
60291: LD_VAR 0 3
60295: PPUSH
60296: CALL 39790 0 3
60300: NOT
60301: IFFALSE 60314
60303: PUSH
60304: LD_VAR 0 1
60308: PPUSH
60309: CALL_OW 314
60313: AND
60314: IFFALSE 60318
// exit ;
60316: GO 60570
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
60318: LD_VAR 0 2
60322: PPUSH
60323: LD_VAR 0 3
60327: PPUSH
60328: CALL_OW 428
60332: PUSH
60333: LD_VAR 0 1
60337: EQUAL
60338: IFFALSE 60352
60340: PUSH
60341: LD_VAR 0 1
60345: PPUSH
60346: CALL_OW 314
60350: NOT
60351: AND
60352: IFFALSE 60274
// if MineAtPos ( x , y ) then
60354: LD_VAR 0 2
60358: PPUSH
60359: LD_VAR 0 3
60363: PPUSH
60364: CALL_OW 458
60368: IFFALSE 60372
// exit ;
60370: GO 60570
// if your_side = side then
60372: LD_OWVAR 2
60376: PUSH
60377: LD_VAR 0 6
60381: EQUAL
60382: IFFALSE 60401
// PlaySoundXY ( x , y , PlantMine ) ;
60384: LD_VAR 0 2
60388: PPUSH
60389: LD_VAR 0 3
60393: PPUSH
60394: LD_STRING PlantMine
60396: PPUSH
60397: CALL_OW 366
// repeat wait ( 1 ) ;
60401: LD_INT 1
60403: PPUSH
60404: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
60408: LD_VAR 0 2
60412: PPUSH
60413: LD_VAR 0 3
60417: PPUSH
60418: LD_VAR 0 6
60422: PPUSH
60423: LD_INT 0
60425: PPUSH
60426: CALL_OW 454
60430: IFFALSE 60401
// if MineAtPos ( x , y ) then
60432: LD_VAR 0 2
60436: PPUSH
60437: LD_VAR 0 3
60441: PPUSH
60442: CALL_OW 458
60446: IFFALSE 60562
// begin for i in minerMinesList [ index ] do
60448: LD_ADDR_VAR 0 7
60452: PUSH
60453: LD_EXP 56
60457: PUSH
60458: LD_VAR 0 5
60462: ARRAY
60463: PUSH
60464: FOR_IN
60465: IFFALSE 60507
// if i [ 1 ] = x and i [ 2 ] = y then
60467: LD_VAR 0 7
60471: PUSH
60472: LD_INT 1
60474: ARRAY
60475: PUSH
60476: LD_VAR 0 2
60480: EQUAL
60481: IFFALSE 60499
60483: PUSH
60484: LD_VAR 0 7
60488: PUSH
60489: LD_INT 2
60491: ARRAY
60492: PUSH
60493: LD_VAR 0 3
60497: EQUAL
60498: AND
60499: IFFALSE 60505
// exit ;
60501: POP
60502: POP
60503: GO 60570
60505: GO 60464
60507: POP
60508: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
60509: LD_ADDR_EXP 56
60513: PUSH
60514: LD_EXP 56
60518: PPUSH
60519: LD_VAR 0 5
60523: PUSH
60524: LD_EXP 56
60528: PUSH
60529: LD_VAR 0 5
60533: ARRAY
60534: PUSH
60535: LD_INT 1
60537: PLUS
60538: PUSH
60539: EMPTY
60540: LIST
60541: LIST
60542: PPUSH
60543: LD_VAR 0 2
60547: PUSH
60548: LD_VAR 0 3
60552: PUSH
60553: EMPTY
60554: LIST
60555: LIST
60556: PPUSH
60557: CALL 7961 0 3
60561: ST_TO_ADDR
// end ; result := true ;
60562: LD_ADDR_VAR 0 4
60566: PUSH
60567: LD_INT 1
60569: ST_TO_ADDR
// end ;
60570: LD_VAR 0 4
60574: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
60575: LD_INT 0
60577: PPUSH
60578: PPUSH
60579: PPUSH
// if not unit in minersList then
60580: LD_VAR 0 1
60584: PUSH
60585: LD_EXP 55
60589: IN
60590: NOT
60591: IFFALSE 60595
// exit ;
60593: GO 60802
// index := GetElementIndex ( minersList , unit ) ;
60595: LD_ADDR_VAR 0 6
60599: PUSH
60600: LD_EXP 55
60604: PPUSH
60605: LD_VAR 0 1
60609: PPUSH
60610: CALL 7744 0 2
60614: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
60615: LD_ADDR_VAR 0 5
60619: PUSH
60620: DOUBLE
60621: LD_EXP 56
60625: PUSH
60626: LD_VAR 0 6
60630: ARRAY
60631: INC
60632: ST_TO_ADDR
60633: LD_INT 1
60635: PUSH
60636: FOR_DOWNTO
60637: IFFALSE 60800
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
60639: LD_EXP 56
60643: PUSH
60644: LD_VAR 0 6
60648: ARRAY
60649: PUSH
60650: LD_VAR 0 5
60654: ARRAY
60655: PUSH
60656: LD_INT 1
60658: ARRAY
60659: PPUSH
60660: LD_EXP 56
60664: PUSH
60665: LD_VAR 0 6
60669: ARRAY
60670: PUSH
60671: LD_VAR 0 5
60675: ARRAY
60676: PUSH
60677: LD_INT 2
60679: ARRAY
60680: PPUSH
60681: LD_VAR 0 2
60685: PPUSH
60686: LD_VAR 0 3
60690: PPUSH
60691: CALL_OW 298
60695: PUSH
60696: LD_INT 6
60698: LESS
60699: IFFALSE 60798
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
60701: LD_EXP 56
60705: PUSH
60706: LD_VAR 0 6
60710: ARRAY
60711: PUSH
60712: LD_VAR 0 5
60716: ARRAY
60717: PUSH
60718: LD_INT 1
60720: ARRAY
60721: PPUSH
60722: LD_EXP 56
60726: PUSH
60727: LD_VAR 0 6
60731: ARRAY
60732: PUSH
60733: LD_VAR 0 5
60737: ARRAY
60738: PUSH
60739: LD_INT 2
60741: ARRAY
60742: PPUSH
60743: LD_VAR 0 1
60747: PPUSH
60748: CALL_OW 255
60752: PPUSH
60753: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
60757: LD_ADDR_EXP 56
60761: PUSH
60762: LD_EXP 56
60766: PPUSH
60767: LD_VAR 0 6
60771: PPUSH
60772: LD_EXP 56
60776: PUSH
60777: LD_VAR 0 6
60781: ARRAY
60782: PPUSH
60783: LD_VAR 0 5
60787: PPUSH
60788: CALL_OW 3
60792: PPUSH
60793: CALL_OW 1
60797: ST_TO_ADDR
// end ; end ;
60798: GO 60636
60800: POP
60801: POP
// end ;
60802: LD_VAR 0 4
60806: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
60807: LD_INT 0
60809: PPUSH
60810: PPUSH
60811: PPUSH
60812: PPUSH
60813: PPUSH
60814: PPUSH
60815: PPUSH
60816: PPUSH
60817: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
60818: LD_VAR 0 1
60822: PPUSH
60823: CALL_OW 264
60827: PUSH
60828: LD_INT 81
60830: EQUAL
60831: NOT
60832: IFTRUE 60847
60834: PUSH
60835: LD_VAR 0 1
60839: PUSH
60840: LD_EXP 55
60844: IN
60845: NOT
60846: OR
60847: IFFALSE 60851
// exit ;
60849: GO 61177
// index := GetElementIndex ( minersList , unit ) ;
60851: LD_ADDR_VAR 0 6
60855: PUSH
60856: LD_EXP 55
60860: PPUSH
60861: LD_VAR 0 1
60865: PPUSH
60866: CALL 7744 0 2
60870: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
60871: LD_ADDR_VAR 0 8
60875: PUSH
60876: LD_EXP 57
60880: PUSH
60881: LD_EXP 56
60885: PUSH
60886: LD_VAR 0 6
60890: ARRAY
60891: MINUS
60892: ST_TO_ADDR
// if not minesFreeAmount then
60893: LD_VAR 0 8
60897: NOT
60898: IFFALSE 60902
// exit ;
60900: GO 61177
// tmp := [ ] ;
60902: LD_ADDR_VAR 0 7
60906: PUSH
60907: EMPTY
60908: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
60909: LD_ADDR_VAR 0 5
60913: PUSH
60914: DOUBLE
60915: LD_INT 1
60917: DEC
60918: ST_TO_ADDR
60919: LD_VAR 0 8
60923: PUSH
60924: FOR_TO
60925: IFFALSE 61124
// begin _d := rand ( 0 , 5 ) ;
60927: LD_ADDR_VAR 0 11
60931: PUSH
60932: LD_INT 0
60934: PPUSH
60935: LD_INT 5
60937: PPUSH
60938: CALL_OW 12
60942: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
60943: LD_ADDR_VAR 0 12
60947: PUSH
60948: LD_INT 2
60950: PPUSH
60951: LD_INT 6
60953: PPUSH
60954: CALL_OW 12
60958: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
60959: LD_ADDR_VAR 0 9
60963: PUSH
60964: LD_VAR 0 2
60968: PPUSH
60969: LD_VAR 0 11
60973: PPUSH
60974: LD_VAR 0 12
60978: PPUSH
60979: CALL_OW 272
60983: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
60984: LD_ADDR_VAR 0 10
60988: PUSH
60989: LD_VAR 0 3
60993: PPUSH
60994: LD_VAR 0 11
60998: PPUSH
60999: LD_VAR 0 12
61003: PPUSH
61004: CALL_OW 273
61008: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
61009: LD_VAR 0 9
61013: PPUSH
61014: LD_VAR 0 10
61018: PPUSH
61019: CALL_OW 488
61023: IFFALSE 61047
61025: PUSH
61026: LD_VAR 0 9
61030: PUSH
61031: LD_VAR 0 10
61035: PUSH
61036: EMPTY
61037: LIST
61038: LIST
61039: PUSH
61040: LD_VAR 0 7
61044: IN
61045: NOT
61046: AND
61047: IFFALSE 61066
61049: PUSH
61050: LD_VAR 0 9
61054: PPUSH
61055: LD_VAR 0 10
61059: PPUSH
61060: CALL_OW 458
61064: NOT
61065: AND
61066: IFFALSE 61108
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
61068: LD_ADDR_VAR 0 7
61072: PUSH
61073: LD_VAR 0 7
61077: PPUSH
61078: LD_VAR 0 7
61082: PUSH
61083: LD_INT 1
61085: PLUS
61086: PPUSH
61087: LD_VAR 0 9
61091: PUSH
61092: LD_VAR 0 10
61096: PUSH
61097: EMPTY
61098: LIST
61099: LIST
61100: PPUSH
61101: CALL_OW 1
61105: ST_TO_ADDR
61106: GO 61122
// i := i - 1 ;
61108: LD_ADDR_VAR 0 5
61112: PUSH
61113: LD_VAR 0 5
61117: PUSH
61118: LD_INT 1
61120: MINUS
61121: ST_TO_ADDR
// end ;
61122: GO 60924
61124: POP
61125: POP
// for i in tmp do
61126: LD_ADDR_VAR 0 5
61130: PUSH
61131: LD_VAR 0 7
61135: PUSH
61136: FOR_IN
61137: IFFALSE 61175
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
61139: LD_VAR 0 1
61143: PPUSH
61144: LD_VAR 0 5
61148: PUSH
61149: LD_INT 1
61151: ARRAY
61152: PPUSH
61153: LD_VAR 0 5
61157: PUSH
61158: LD_INT 2
61160: ARRAY
61161: PPUSH
61162: CALL 60168 0 3
61166: NOT
61167: IFFALSE 61173
// exit ;
61169: POP
61170: POP
61171: GO 61177
61173: GO 61136
61175: POP
61176: POP
// end ;
61177: LD_VAR 0 4
61181: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
61182: LD_INT 0
61184: PPUSH
61185: PPUSH
61186: PPUSH
61187: PPUSH
61188: PPUSH
61189: PPUSH
61190: PPUSH
61191: PPUSH
61192: PPUSH
// if GetClass ( unit ) <> class_sniper then
61193: LD_VAR 0 1
61197: PPUSH
61198: CALL_OW 257
61202: PUSH
61203: LD_INT 5
61205: NONEQUAL
61206: IFFALSE 61210
// exit ;
61208: GO 61680
// dist := 8 ;
61210: LD_ADDR_VAR 0 5
61214: PUSH
61215: LD_INT 8
61217: ST_TO_ADDR
// viewRange := 12 ;
61218: LD_ADDR_VAR 0 8
61222: PUSH
61223: LD_INT 12
61225: ST_TO_ADDR
// side := GetSide ( unit ) ;
61226: LD_ADDR_VAR 0 6
61230: PUSH
61231: LD_VAR 0 1
61235: PPUSH
61236: CALL_OW 255
61240: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
61241: LD_INT 61
61243: PPUSH
61244: LD_VAR 0 6
61248: PPUSH
61249: CALL_OW 321
61253: PUSH
61254: LD_INT 2
61256: EQUAL
61257: IFFALSE 61267
// viewRange := 16 ;
61259: LD_ADDR_VAR 0 8
61263: PUSH
61264: LD_INT 16
61266: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
61267: LD_VAR 0 1
61271: PPUSH
61272: LD_VAR 0 2
61276: PPUSH
61277: LD_VAR 0 3
61281: PPUSH
61282: CALL_OW 297
61286: PUSH
61287: LD_VAR 0 5
61291: GREATER
61292: IFFALSE 61371
// begin ComMoveXY ( unit , x , y ) ;
61294: LD_VAR 0 1
61298: PPUSH
61299: LD_VAR 0 2
61303: PPUSH
61304: LD_VAR 0 3
61308: PPUSH
61309: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
61313: LD_INT 35
61315: PPUSH
61316: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
61320: LD_VAR 0 1
61324: PPUSH
61325: LD_VAR 0 2
61329: PPUSH
61330: LD_VAR 0 3
61334: PPUSH
61335: CALL 39790 0 3
61339: NOT
61340: IFFALSE 61344
// exit ;
61342: GO 61680
// until GetDistUnitXY ( unit , x , y ) < dist ;
61344: LD_VAR 0 1
61348: PPUSH
61349: LD_VAR 0 2
61353: PPUSH
61354: LD_VAR 0 3
61358: PPUSH
61359: CALL_OW 297
61363: PUSH
61364: LD_VAR 0 5
61368: LESS
61369: IFFALSE 61313
// end ; ComTurnXY ( unit , x , y ) ;
61371: LD_VAR 0 1
61375: PPUSH
61376: LD_VAR 0 2
61380: PPUSH
61381: LD_VAR 0 3
61385: PPUSH
61386: CALL_OW 118
// repeat if Multiplayer then
61390: LD_OWVAR 4
61394: IFFALSE 61405
// wait ( 35 ) else
61396: LD_INT 35
61398: PPUSH
61399: CALL_OW 67
61403: GO 61412
// wait ( 5 ) ;
61405: LD_INT 5
61407: PPUSH
61408: CALL_OW 67
// _d := GetDir ( unit ) ;
61412: LD_ADDR_VAR 0 11
61416: PUSH
61417: LD_VAR 0 1
61421: PPUSH
61422: CALL_OW 254
61426: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
61427: LD_ADDR_VAR 0 7
61431: PUSH
61432: LD_VAR 0 1
61436: PPUSH
61437: CALL_OW 250
61441: PPUSH
61442: LD_VAR 0 1
61446: PPUSH
61447: CALL_OW 251
61451: PPUSH
61452: LD_VAR 0 2
61456: PPUSH
61457: LD_VAR 0 3
61461: PPUSH
61462: CALL 42426 0 4
61466: ST_TO_ADDR
// until dir = _d ;
61467: LD_VAR 0 7
61471: PUSH
61472: LD_VAR 0 11
61476: EQUAL
61477: IFFALSE 61390
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
61479: LD_ADDR_VAR 0 9
61483: PUSH
61484: LD_VAR 0 1
61488: PPUSH
61489: CALL_OW 250
61493: PPUSH
61494: LD_VAR 0 7
61498: PPUSH
61499: LD_VAR 0 5
61503: PPUSH
61504: CALL_OW 272
61508: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
61509: LD_ADDR_VAR 0 10
61513: PUSH
61514: LD_VAR 0 1
61518: PPUSH
61519: CALL_OW 251
61523: PPUSH
61524: LD_VAR 0 7
61528: PPUSH
61529: LD_VAR 0 5
61533: PPUSH
61534: CALL_OW 273
61538: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
61539: LD_VAR 0 9
61543: PPUSH
61544: LD_VAR 0 10
61548: PPUSH
61549: CALL_OW 488
61553: NOT
61554: IFFALSE 61558
// exit ;
61556: GO 61680
// ComAnimCustom ( unit , 1 ) ;
61558: LD_VAR 0 1
61562: PPUSH
61563: LD_INT 1
61565: PPUSH
61566: CALL_OW 592
// p := 0 ;
61570: LD_ADDR_VAR 0 12
61574: PUSH
61575: LD_INT 0
61577: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
61578: LD_VAR 0 9
61582: PPUSH
61583: LD_VAR 0 10
61587: PPUSH
61588: LD_VAR 0 6
61592: PPUSH
61593: LD_VAR 0 8
61597: PPUSH
61598: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
61602: LD_INT 35
61604: PPUSH
61605: CALL_OW 67
// p := Inc ( p ) ;
61609: LD_ADDR_VAR 0 12
61613: PUSH
61614: LD_VAR 0 12
61618: PPUSH
61619: CALL 42382 0 1
61623: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
61624: LD_VAR 0 12
61628: PUSH
61629: LD_INT 3
61631: EQUAL
61632: IFTRUE 61646
61634: PUSH
61635: LD_VAR 0 1
61639: PPUSH
61640: CALL_OW 302
61644: NOT
61645: OR
61646: IFTRUE 61659
61648: PUSH
61649: LD_VAR 0 1
61653: PPUSH
61654: CALL_OW 301
61658: OR
61659: IFFALSE 61602
// RemoveSeeing ( _x , _y , side ) ;
61661: LD_VAR 0 9
61665: PPUSH
61666: LD_VAR 0 10
61670: PPUSH
61671: LD_VAR 0 6
61675: PPUSH
61676: CALL_OW 331
// end ;
61680: LD_VAR 0 4
61684: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
61685: LD_INT 0
61687: PPUSH
61688: PPUSH
61689: PPUSH
61690: PPUSH
61691: PPUSH
61692: PPUSH
61693: PPUSH
61694: PPUSH
61695: PPUSH
61696: PPUSH
61697: PPUSH
// if not unit then
61698: LD_VAR 0 1
61702: NOT
61703: IFFALSE 61707
// exit ;
61705: GO 61978
// side := GetSide ( unit ) ;
61707: LD_ADDR_VAR 0 3
61711: PUSH
61712: LD_VAR 0 1
61716: PPUSH
61717: CALL_OW 255
61721: ST_TO_ADDR
// x := GetX ( unit ) ;
61722: LD_ADDR_VAR 0 5
61726: PUSH
61727: LD_VAR 0 1
61731: PPUSH
61732: CALL_OW 250
61736: ST_TO_ADDR
// y := GetY ( unit ) ;
61737: LD_ADDR_VAR 0 6
61741: PUSH
61742: LD_VAR 0 1
61746: PPUSH
61747: CALL_OW 251
61751: ST_TO_ADDR
// r := 8 ;
61752: LD_ADDR_VAR 0 4
61756: PUSH
61757: LD_INT 8
61759: ST_TO_ADDR
// if x - r < 0 then
61760: LD_VAR 0 5
61764: PUSH
61765: LD_VAR 0 4
61769: MINUS
61770: PUSH
61771: LD_INT 0
61773: LESS
61774: IFFALSE 61786
// min_x := 0 else
61776: LD_ADDR_VAR 0 7
61780: PUSH
61781: LD_INT 0
61783: ST_TO_ADDR
61784: GO 61802
// min_x := x - r ;
61786: LD_ADDR_VAR 0 7
61790: PUSH
61791: LD_VAR 0 5
61795: PUSH
61796: LD_VAR 0 4
61800: MINUS
61801: ST_TO_ADDR
// if y - r < 0 then
61802: LD_VAR 0 6
61806: PUSH
61807: LD_VAR 0 4
61811: MINUS
61812: PUSH
61813: LD_INT 0
61815: LESS
61816: IFFALSE 61828
// min_y := 0 else
61818: LD_ADDR_VAR 0 8
61822: PUSH
61823: LD_INT 0
61825: ST_TO_ADDR
61826: GO 61844
// min_y := y - r ;
61828: LD_ADDR_VAR 0 8
61832: PUSH
61833: LD_VAR 0 6
61837: PUSH
61838: LD_VAR 0 4
61842: MINUS
61843: ST_TO_ADDR
// max_x := x + r ;
61844: LD_ADDR_VAR 0 9
61848: PUSH
61849: LD_VAR 0 5
61853: PUSH
61854: LD_VAR 0 4
61858: PLUS
61859: ST_TO_ADDR
// max_y := y + r ;
61860: LD_ADDR_VAR 0 10
61864: PUSH
61865: LD_VAR 0 6
61869: PUSH
61870: LD_VAR 0 4
61874: PLUS
61875: ST_TO_ADDR
// for _x = min_x to max_x do
61876: LD_ADDR_VAR 0 11
61880: PUSH
61881: DOUBLE
61882: LD_VAR 0 7
61886: DEC
61887: ST_TO_ADDR
61888: LD_VAR 0 9
61892: PUSH
61893: FOR_TO
61894: IFFALSE 61976
// for _y = min_y to max_y do
61896: LD_ADDR_VAR 0 12
61900: PUSH
61901: DOUBLE
61902: LD_VAR 0 8
61906: DEC
61907: ST_TO_ADDR
61908: LD_VAR 0 10
61912: PUSH
61913: FOR_TO
61914: IFFALSE 61972
// begin if not ValidHex ( _x , _y ) then
61916: LD_VAR 0 11
61920: PPUSH
61921: LD_VAR 0 12
61925: PPUSH
61926: CALL_OW 488
61930: NOT
61931: IFFALSE 61935
// continue ;
61933: GO 61913
// if MineAtPos ( _x , _y ) then
61935: LD_VAR 0 11
61939: PPUSH
61940: LD_VAR 0 12
61944: PPUSH
61945: CALL_OW 458
61949: IFFALSE 61970
// ViewMineAtPos ( _x , _y , side ) ;
61951: LD_VAR 0 11
61955: PPUSH
61956: LD_VAR 0 12
61960: PPUSH
61961: LD_VAR 0 3
61965: PPUSH
61966: CALL_OW 457
// end ;
61970: GO 61913
61972: POP
61973: POP
61974: GO 61893
61976: POP
61977: POP
// end ;
61978: LD_VAR 0 2
61982: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer ; begin
61983: LD_INT 0
61985: PPUSH
61986: PPUSH
61987: PPUSH
61988: PPUSH
61989: PPUSH
61990: PPUSH
// if not units then
61991: LD_VAR 0 1
61995: NOT
61996: IFFALSE 62000
// exit ;
61998: GO 62430
// scaners := [ ] ;
62000: LD_ADDR_VAR 0 6
62004: PUSH
62005: EMPTY
62006: ST_TO_ADDR
// for i in units do
62007: LD_ADDR_VAR 0 3
62011: PUSH
62012: LD_VAR 0 1
62016: PUSH
62017: FOR_IN
62018: IFFALSE 62175
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
62020: LD_VAR 0 3
62024: PPUSH
62025: CALL_OW 264
62029: PUSH
62030: LD_INT 11
62032: NONEQUAL
62033: IFTRUE 62047
62035: PUSH
62036: LD_VAR 0 3
62040: PPUSH
62041: CALL_OW 302
62045: NOT
62046: OR
62047: IFTRUE 62064
62049: PUSH
62050: LD_VAR 0 3
62054: PPUSH
62055: CALL_OW 110
62059: PUSH
62060: LD_INT 502
62062: EQUAL
62063: OR
62064: IFFALSE 62068
// continue ;
62066: GO 62017
// ComStop ( i ) ;
62068: LD_VAR 0 3
62072: PPUSH
62073: CALL_OW 141
// x := GetX ( i ) ;
62077: LD_ADDR_VAR 0 4
62081: PUSH
62082: LD_VAR 0 3
62086: PPUSH
62087: CALL_OW 250
62091: ST_TO_ADDR
// y := GetY ( i ) ;
62092: LD_ADDR_VAR 0 5
62096: PUSH
62097: LD_VAR 0 3
62101: PPUSH
62102: CALL_OW 251
62106: ST_TO_ADDR
// if GetSide ( i ) = your_side then
62107: LD_VAR 0 3
62111: PPUSH
62112: CALL_OW 255
62116: PUSH
62117: LD_OWVAR 2
62121: EQUAL
62122: IFFALSE 62141
// PlaySoundXY ( x , y , mineDetector ) ;
62124: LD_VAR 0 4
62128: PPUSH
62129: LD_VAR 0 5
62133: PPUSH
62134: LD_STRING mineDetector
62136: PPUSH
62137: CALL_OW 366
// scaners := Join ( scaners , i ) ;
62141: LD_ADDR_VAR 0 6
62145: PUSH
62146: LD_VAR 0 6
62150: PPUSH
62151: LD_VAR 0 3
62155: PPUSH
62156: CALL 41009 0 2
62160: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
62161: LD_VAR 0 3
62165: PPUSH
62166: LD_INT 502
62168: PPUSH
62169: CALL_OW 109
// end ;
62173: GO 62017
62175: POP
62176: POP
// if not scaners then
62177: LD_VAR 0 6
62181: NOT
62182: IFFALSE 62186
// exit ;
62184: GO 62430
// wait ( 3 ) ;
62186: LD_INT 3
62188: PPUSH
62189: CALL_OW 67
// timer := 6 ;
62193: LD_ADDR_VAR 0 7
62197: PUSH
62198: LD_INT 6
62200: ST_TO_ADDR
// repeat for i in scaners do
62201: LD_ADDR_VAR 0 3
62205: PUSH
62206: LD_VAR 0 6
62210: PUSH
62211: FOR_IN
62212: IFFALSE 62328
// begin if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
62214: LD_VAR 0 3
62218: PPUSH
62219: CALL_OW 302
62223: NOT
62224: IFTRUE 62237
62226: PUSH
62227: LD_VAR 0 3
62231: PPUSH
62232: CALL_OW 314
62236: OR
62237: IFTRUE 62268
62239: PUSH
62240: LD_VAR 0 3
62244: PPUSH
62245: CALL_OW 263
62249: PUSH
62250: LD_INT 1
62252: EQUAL
62253: IFFALSE 62267
62255: PUSH
62256: LD_VAR 0 3
62260: PPUSH
62261: CALL_OW 311
62265: NOT
62266: AND
62267: OR
62268: IFFALSE 62312
// begin SetUnitDisplayNumber ( i , 0 ) ;
62270: LD_VAR 0 3
62274: PPUSH
62275: LD_INT 0
62277: PPUSH
62278: CALL_OW 505
// SetTag ( i , 0 ) ;
62282: LD_VAR 0 3
62286: PPUSH
62287: LD_INT 0
62289: PPUSH
62290: CALL_OW 109
// scaners := scaners diff i ;
62294: LD_ADDR_VAR 0 6
62298: PUSH
62299: LD_VAR 0 6
62303: PUSH
62304: LD_VAR 0 3
62308: DIFF
62309: ST_TO_ADDR
// continue ;
62310: GO 62211
// end ; SetUnitDisplayNumber ( i , timer ) ;
62312: LD_VAR 0 3
62316: PPUSH
62317: LD_VAR 0 7
62321: PPUSH
62322: CALL_OW 505
// end ;
62326: GO 62211
62328: POP
62329: POP
// if not scaners then
62330: LD_VAR 0 6
62334: NOT
62335: IFFALSE 62339
// exit ;
62337: GO 62430
// timer := Dec ( timer ) ;
62339: LD_ADDR_VAR 0 7
62343: PUSH
62344: LD_VAR 0 7
62348: PPUSH
62349: CALL 42404 0 1
62353: ST_TO_ADDR
// wait ( 0 0$1 ) ;
62354: LD_INT 35
62356: PPUSH
62357: CALL_OW 67
// until timer = 0 ;
62361: LD_VAR 0 7
62365: PUSH
62366: LD_INT 0
62368: EQUAL
62369: IFFALSE 62201
// if not scaners then
62371: LD_VAR 0 6
62375: NOT
62376: IFFALSE 62380
// exit ;
62378: GO 62430
// for i in scaners do
62380: LD_ADDR_VAR 0 3
62384: PUSH
62385: LD_VAR 0 6
62389: PUSH
62390: FOR_IN
62391: IFFALSE 62428
// begin SetUnitDisplayNumber ( i , 0 ) ;
62393: LD_VAR 0 3
62397: PPUSH
62398: LD_INT 0
62400: PPUSH
62401: CALL_OW 505
// SetTag ( i , 0 ) ;
62405: LD_VAR 0 3
62409: PPUSH
62410: LD_INT 0
62412: PPUSH
62413: CALL_OW 109
// RevealDetectorMine ( i ) ;
62417: LD_VAR 0 3
62421: PPUSH
62422: CALL 61685 0 1
// end ;
62426: GO 62390
62428: POP
62429: POP
// end ;
62430: LD_VAR 0 2
62434: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
62435: LD_INT 0
62437: PPUSH
// if p1 = mine_detector_mode then
62438: LD_VAR 0 2
62442: PUSH
62443: LD_INT 103
62445: EQUAL
62446: IFFALSE 62457
// DetectMine ( units ) ;
62448: LD_VAR 0 1
62452: PPUSH
62453: CALL 61983 0 1
// end ; end_of_file
62457: LD_VAR 0 7
62461: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
62462: PPOPN 6
62464: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
62465: LD_INT 0
62467: PPUSH
// begin if not units then
62468: LD_VAR 0 1
62472: NOT
62473: IFFALSE 62477
// exit ;
62475: GO 62511
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
62477: LD_VAR 0 1
62481: PPUSH
62482: LD_VAR 0 2
62486: PPUSH
62487: LD_VAR 0 3
62491: PPUSH
62492: LD_VAR 0 4
62496: PPUSH
62497: LD_VAR 0 5
62501: PPUSH
62502: LD_VAR 0 6
62506: PPUSH
62507: CALL 62435 0 6
// end ;
62511: PPOPN 7
62513: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
62514: LD_EXP 1
62518: PUSH
62519: LD_INT 4
62521: EQUAL
62522: IFFALSE 62558
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
62524: LD_STRING setGameDifficulty(
62526: PUSH
62527: LD_OWVAR 67
62531: STR
62532: PUSH
62533: LD_STRING )
62535: STR
62536: PPUSH
62537: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
62541: LD_STRING displayDifficulty(
62543: PUSH
62544: LD_OWVAR 67
62548: STR
62549: PUSH
62550: LD_STRING )
62552: STR
62553: PPUSH
62554: CALL_OW 559
// end ; SOS_MapStart ( ) ;
62558: CALL 62587 0 0
// end ; end_of_file
62562: PPOPN 1
62564: END
// every 0 0$1 do
62565: GO 62567
62567: DISABLE
// begin enable ;
62568: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
62569: LD_STRING updateTimer(
62571: PUSH
62572: LD_OWVAR 1
62576: STR
62577: PUSH
62578: LD_STRING );
62580: STR
62581: PPUSH
62582: CALL_OW 559
// end ;
62586: END
// export function SOS_MapStart ( ) ; begin
62587: LD_INT 0
62589: PPUSH
// UpdateFactoryWaypoints ( ) ;
62590: CALL 63521 0 0
// UpdateWarehouseGatheringPoints ( ) ;
62594: CALL 63773 0 0
// ParseMultiDataToLua ( ) ;
62598: CALL 63920 0 0
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
62602: LD_STRING setSpecLogoNumber(
62604: PUSH
62605: LD_INT 2
62607: STR
62608: PUSH
62609: LD_STRING ,
62611: STR
62612: PUSH
62613: LD_INT 1
62615: STR
62616: PUSH
62617: LD_STRING )
62619: STR
62620: PPUSH
62621: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
62625: LD_STRING setSpecLogoNumber(
62627: PUSH
62628: LD_INT 3
62630: STR
62631: PUSH
62632: LD_STRING ,
62634: STR
62635: PUSH
62636: LD_INT 2
62638: STR
62639: PUSH
62640: LD_STRING )
62642: STR
62643: PPUSH
62644: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
62648: LD_STRING setSpecLogoNumber(
62650: PUSH
62651: LD_INT 4
62653: STR
62654: PUSH
62655: LD_STRING ,
62657: STR
62658: PUSH
62659: LD_INT 3
62661: STR
62662: PUSH
62663: LD_STRING )
62665: STR
62666: PPUSH
62667: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
62671: LD_STRING setSpecLogoNumber(
62673: PUSH
62674: LD_INT 5
62676: STR
62677: PUSH
62678: LD_STRING ,
62680: STR
62681: PUSH
62682: LD_INT 4
62684: STR
62685: PUSH
62686: LD_STRING )
62688: STR
62689: PPUSH
62690: CALL_OW 559
// end ;
62694: LD_VAR 0 1
62698: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
62699: LD_INT 0
62701: PPUSH
62702: PPUSH
62703: PPUSH
62704: PPUSH
62705: PPUSH
62706: PPUSH
62707: PPUSH
62708: PPUSH
62709: PPUSH
// for i := 1 to 8 do
62710: LD_ADDR_VAR 0 2
62714: PUSH
62715: DOUBLE
62716: LD_INT 1
62718: DEC
62719: ST_TO_ADDR
62720: LD_INT 8
62722: PUSH
62723: FOR_TO
62724: IFFALSE 63109
// begin if mpSidePositions [ i ] then
62726: LD_EXP 5
62730: PUSH
62731: LD_VAR 0 2
62735: ARRAY
62736: IFFALSE 63107
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
62738: LD_ADDR_VAR 0 7
62742: PUSH
62743: LD_INT 22
62745: PUSH
62746: LD_VAR 0 2
62750: PUSH
62751: EMPTY
62752: LIST
62753: LIST
62754: PUSH
62755: LD_INT 21
62757: PUSH
62758: LD_INT 1
62760: PUSH
62761: EMPTY
62762: LIST
62763: LIST
62764: PUSH
62765: EMPTY
62766: LIST
62767: LIST
62768: PPUSH
62769: CALL_OW 69
62773: PPUSH
62774: CALL 5043 0 1
62778: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
62779: LD_ADDR_VAR 0 9
62783: PUSH
62784: LD_INT 22
62786: PUSH
62787: LD_VAR 0 2
62791: PUSH
62792: EMPTY
62793: LIST
62794: LIST
62795: PUSH
62796: LD_INT 2
62798: PUSH
62799: LD_INT 30
62801: PUSH
62802: LD_INT 0
62804: PUSH
62805: EMPTY
62806: LIST
62807: LIST
62808: PUSH
62809: LD_INT 30
62811: PUSH
62812: LD_INT 1
62814: PUSH
62815: EMPTY
62816: LIST
62817: LIST
62818: PUSH
62819: EMPTY
62820: LIST
62821: LIST
62822: LIST
62823: PUSH
62824: EMPTY
62825: LIST
62826: LIST
62827: PPUSH
62828: CALL_OW 69
62832: ST_TO_ADDR
// crates := 0 ;
62833: LD_ADDR_VAR 0 4
62837: PUSH
62838: LD_INT 0
62840: ST_TO_ADDR
// oil := 0 ;
62841: LD_ADDR_VAR 0 5
62845: PUSH
62846: LD_INT 0
62848: ST_TO_ADDR
// sib := 0 ;
62849: LD_ADDR_VAR 0 6
62853: PUSH
62854: LD_INT 0
62856: ST_TO_ADDR
// if bases then
62857: LD_VAR 0 9
62861: IFFALSE 62967
// begin for j in bases do
62863: LD_ADDR_VAR 0 3
62867: PUSH
62868: LD_VAR 0 9
62872: PUSH
62873: FOR_IN
62874: IFFALSE 62965
// begin base := GetBase ( j ) ;
62876: LD_ADDR_VAR 0 8
62880: PUSH
62881: LD_VAR 0 3
62885: PPUSH
62886: CALL_OW 274
62890: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
62891: LD_ADDR_VAR 0 4
62895: PUSH
62896: LD_VAR 0 4
62900: PUSH
62901: LD_VAR 0 8
62905: PPUSH
62906: LD_INT 1
62908: PPUSH
62909: CALL_OW 275
62913: PLUS
62914: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
62915: LD_ADDR_VAR 0 5
62919: PUSH
62920: LD_VAR 0 5
62924: PUSH
62925: LD_VAR 0 8
62929: PPUSH
62930: LD_INT 2
62932: PPUSH
62933: CALL_OW 275
62937: PLUS
62938: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
62939: LD_ADDR_VAR 0 6
62943: PUSH
62944: LD_VAR 0 6
62948: PUSH
62949: LD_VAR 0 8
62953: PPUSH
62954: LD_INT 3
62956: PPUSH
62957: CALL_OW 275
62961: PLUS
62962: ST_TO_ADDR
// end ;
62963: GO 62873
62965: POP
62966: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
62967: LD_STRING setSpecText(
62969: PUSH
62970: LD_VAR 0 2
62974: STR
62975: PUSH
62976: LD_STRING ,
62978: STR
62979: PUSH
62980: LD_INT 2
62982: STR
62983: PUSH
62984: LD_STRING ,
62986: STR
62987: PUSH
62988: LD_VAR 0 4
62992: STR
62993: PUSH
62994: LD_STRING )
62996: STR
62997: PPUSH
62998: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
63002: LD_STRING setSpecText(
63004: PUSH
63005: LD_VAR 0 2
63009: STR
63010: PUSH
63011: LD_STRING ,
63013: STR
63014: PUSH
63015: LD_INT 3
63017: STR
63018: PUSH
63019: LD_STRING ,
63021: STR
63022: PUSH
63023: LD_VAR 0 5
63027: STR
63028: PUSH
63029: LD_STRING )
63031: STR
63032: PPUSH
63033: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
63037: LD_STRING setSpecText(
63039: PUSH
63040: LD_VAR 0 2
63044: STR
63045: PUSH
63046: LD_STRING ,
63048: STR
63049: PUSH
63050: LD_INT 4
63052: STR
63053: PUSH
63054: LD_STRING ,
63056: STR
63057: PUSH
63058: LD_VAR 0 6
63062: STR
63063: PUSH
63064: LD_STRING )
63066: STR
63067: PPUSH
63068: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
63072: LD_STRING setSpecText(
63074: PUSH
63075: LD_VAR 0 2
63079: STR
63080: PUSH
63081: LD_STRING ,
63083: STR
63084: PUSH
63085: LD_INT 5
63087: STR
63088: PUSH
63089: LD_STRING ,
63091: STR
63092: PUSH
63093: LD_VAR 0 7
63097: STR
63098: PUSH
63099: LD_STRING )
63101: STR
63102: PPUSH
63103: CALL_OW 559
// end ; end ;
63107: GO 62723
63109: POP
63110: POP
// end ;
63111: LD_VAR 0 1
63115: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
63116: LD_INT 2
63118: PUSH
63119: LD_INT 30
63121: PUSH
63122: LD_INT 0
63124: PUSH
63125: EMPTY
63126: LIST
63127: LIST
63128: PUSH
63129: LD_INT 30
63131: PUSH
63132: LD_INT 1
63134: PUSH
63135: EMPTY
63136: LIST
63137: LIST
63138: PUSH
63139: EMPTY
63140: LIST
63141: LIST
63142: LIST
63143: PPUSH
63144: CALL_OW 69
63148: IFFALSE 63158
63150: GO 63152
63152: DISABLE
// begin enable ;
63153: ENABLE
// UpdateSpectatorBar ;
63154: CALL 62699 0 0
// end ;
63158: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
63159: LD_INT 0
63161: PPUSH
// end ;
63162: LD_VAR 0 12
63166: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
63167: LD_INT 0
63169: PPUSH
63170: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
63171: LD_VAR 0 1
63175: NOT
63176: IFTRUE 63195
63178: PUSH
63179: LD_VAR 0 2
63183: PPUSH
63184: LD_VAR 0 3
63188: PPUSH
63189: CALL_OW 488
63193: NOT
63194: OR
63195: IFTRUE 63230
63197: PUSH
63198: LD_VAR 0 1
63202: PPUSH
63203: CALL_OW 266
63207: PUSH
63208: LD_INT 3
63210: NONEQUAL
63211: IFFALSE 63229
63213: PUSH
63214: LD_VAR 0 1
63218: PPUSH
63219: CALL_OW 247
63223: PUSH
63224: LD_INT 1
63226: EQUAL
63227: NOT
63228: AND
63229: OR
63230: IFFALSE 63234
// exit ;
63232: GO 63516
// if GetType ( factory ) = unit_human then
63234: LD_VAR 0 1
63238: PPUSH
63239: CALL_OW 247
63243: PUSH
63244: LD_INT 1
63246: EQUAL
63247: IFFALSE 63264
// factory := IsInUnit ( factory ) ;
63249: LD_ADDR_VAR 0 1
63253: PUSH
63254: LD_VAR 0 1
63258: PPUSH
63259: CALL_OW 310
63263: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
63264: LD_VAR 0 1
63268: PPUSH
63269: CALL_OW 266
63273: PUSH
63274: LD_INT 3
63276: NONEQUAL
63277: IFFALSE 63281
// exit ;
63279: GO 63516
// for i := 1 to Count ( factoryWaypoints ) do
63281: LD_ADDR_VAR 0 5
63285: PUSH
63286: DOUBLE
63287: LD_INT 1
63289: DEC
63290: ST_TO_ADDR
63291: LD_EXP 58
63295: PPUSH
63296: CALL 5043 0 1
63300: PUSH
63301: FOR_TO
63302: IFFALSE 63464
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
63304: LD_VAR 0 2
63308: PPUSH
63309: LD_VAR 0 3
63313: PPUSH
63314: CALL_OW 428
63318: PUSH
63319: LD_EXP 58
63323: PUSH
63324: LD_VAR 0 5
63328: ARRAY
63329: PUSH
63330: LD_INT 2
63332: ARRAY
63333: EQUAL
63334: IFFALSE 63366
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
63336: LD_ADDR_EXP 58
63340: PUSH
63341: LD_EXP 58
63345: PPUSH
63346: LD_VAR 0 5
63350: PPUSH
63351: CALL_OW 3
63355: ST_TO_ADDR
// UpdateFactoryWaypoints ;
63356: CALL 63521 0 0
// exit ;
63360: POP
63361: POP
63362: GO 63516
// end else
63364: GO 63462
// if factory = factoryWaypoints [ i ] [ 2 ] then
63366: LD_VAR 0 1
63370: PUSH
63371: LD_EXP 58
63375: PUSH
63376: LD_VAR 0 5
63380: ARRAY
63381: PUSH
63382: LD_INT 2
63384: ARRAY
63385: EQUAL
63386: IFFALSE 63462
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
63388: LD_ADDR_EXP 58
63392: PUSH
63393: LD_EXP 58
63397: PPUSH
63398: LD_VAR 0 5
63402: PPUSH
63403: CALL_OW 3
63407: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
63408: LD_ADDR_EXP 58
63412: PUSH
63413: LD_EXP 58
63417: PPUSH
63418: LD_VAR 0 1
63422: PPUSH
63423: CALL_OW 255
63427: PUSH
63428: LD_VAR 0 1
63432: PUSH
63433: LD_VAR 0 2
63437: PUSH
63438: LD_VAR 0 3
63442: PUSH
63443: EMPTY
63444: LIST
63445: LIST
63446: LIST
63447: LIST
63448: PPUSH
63449: CALL 41009 0 2
63453: ST_TO_ADDR
// UpdateFactoryWaypoints ;
63454: CALL 63521 0 0
// exit ;
63458: POP
63459: POP
63460: GO 63516
// end ; end ;
63462: GO 63301
63464: POP
63465: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
63466: LD_ADDR_EXP 58
63470: PUSH
63471: LD_EXP 58
63475: PPUSH
63476: LD_VAR 0 1
63480: PPUSH
63481: CALL_OW 255
63485: PUSH
63486: LD_VAR 0 1
63490: PUSH
63491: LD_VAR 0 2
63495: PUSH
63496: LD_VAR 0 3
63500: PUSH
63501: EMPTY
63502: LIST
63503: LIST
63504: LIST
63505: LIST
63506: PPUSH
63507: CALL 41009 0 2
63511: ST_TO_ADDR
// UpdateFactoryWaypoints ;
63512: CALL 63521 0 0
// end ;
63516: LD_VAR 0 4
63520: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
63521: LD_INT 0
63523: PPUSH
63524: PPUSH
63525: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
63526: LD_STRING resetFactoryWaypoint();
63528: PPUSH
63529: CALL_OW 559
// if factoryWaypoints then
63533: LD_EXP 58
63537: IFFALSE 63658
// begin list := factoryWaypoints ;
63539: LD_ADDR_VAR 0 3
63543: PUSH
63544: LD_EXP 58
63548: ST_TO_ADDR
// for i := 1 to list do
63549: LD_ADDR_VAR 0 2
63553: PUSH
63554: DOUBLE
63555: LD_INT 1
63557: DEC
63558: ST_TO_ADDR
63559: LD_VAR 0 3
63563: PUSH
63564: FOR_TO
63565: IFFALSE 63656
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
63567: LD_STRING setFactoryWaypointXY(
63569: PUSH
63570: LD_VAR 0 3
63574: PUSH
63575: LD_VAR 0 2
63579: ARRAY
63580: PUSH
63581: LD_INT 1
63583: ARRAY
63584: STR
63585: PUSH
63586: LD_STRING ,
63588: STR
63589: PUSH
63590: LD_VAR 0 3
63594: PUSH
63595: LD_VAR 0 2
63599: ARRAY
63600: PUSH
63601: LD_INT 2
63603: ARRAY
63604: STR
63605: PUSH
63606: LD_STRING ,
63608: STR
63609: PUSH
63610: LD_VAR 0 3
63614: PUSH
63615: LD_VAR 0 2
63619: ARRAY
63620: PUSH
63621: LD_INT 3
63623: ARRAY
63624: STR
63625: PUSH
63626: LD_STRING ,
63628: STR
63629: PUSH
63630: LD_VAR 0 3
63634: PUSH
63635: LD_VAR 0 2
63639: ARRAY
63640: PUSH
63641: LD_INT 4
63643: ARRAY
63644: STR
63645: PUSH
63646: LD_STRING )
63648: STR
63649: PPUSH
63650: CALL_OW 559
63654: GO 63564
63656: POP
63657: POP
// end ; end ;
63658: LD_VAR 0 1
63662: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
63663: LD_INT 0
63665: PPUSH
// if HexInfo ( x , y ) = warehouse then
63666: LD_VAR 0 2
63670: PPUSH
63671: LD_VAR 0 3
63675: PPUSH
63676: CALL_OW 428
63680: PUSH
63681: LD_VAR 0 1
63685: EQUAL
63686: IFFALSE 63713
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
63688: LD_ADDR_EXP 60
63692: PUSH
63693: LD_EXP 60
63697: PPUSH
63698: LD_VAR 0 1
63702: PPUSH
63703: LD_INT 0
63705: PPUSH
63706: CALL_OW 1
63710: ST_TO_ADDR
63711: GO 63764
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
63713: LD_ADDR_EXP 60
63717: PUSH
63718: LD_EXP 60
63722: PPUSH
63723: LD_VAR 0 1
63727: PPUSH
63728: LD_VAR 0 1
63732: PPUSH
63733: CALL_OW 255
63737: PUSH
63738: LD_VAR 0 1
63742: PUSH
63743: LD_VAR 0 2
63747: PUSH
63748: LD_VAR 0 3
63752: PUSH
63753: EMPTY
63754: LIST
63755: LIST
63756: LIST
63757: LIST
63758: PPUSH
63759: CALL_OW 1
63763: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
63764: CALL 63773 0 0
// end ;
63768: LD_VAR 0 4
63772: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
63773: LD_INT 0
63775: PPUSH
63776: PPUSH
63777: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
63778: LD_STRING resetWarehouseGatheringPoints();
63780: PPUSH
63781: CALL_OW 559
// if warehouseGatheringPoints then
63785: LD_EXP 60
63789: IFFALSE 63915
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
63791: LD_ADDR_VAR 0 3
63795: PUSH
63796: LD_EXP 60
63800: PPUSH
63801: CALL 44943 0 1
63805: ST_TO_ADDR
// for i := 1 to list do
63806: LD_ADDR_VAR 0 2
63810: PUSH
63811: DOUBLE
63812: LD_INT 1
63814: DEC
63815: ST_TO_ADDR
63816: LD_VAR 0 3
63820: PUSH
63821: FOR_TO
63822: IFFALSE 63913
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
63824: LD_STRING setWarehouseGatheringPointXY(
63826: PUSH
63827: LD_VAR 0 3
63831: PUSH
63832: LD_VAR 0 2
63836: ARRAY
63837: PUSH
63838: LD_INT 1
63840: ARRAY
63841: STR
63842: PUSH
63843: LD_STRING ,
63845: STR
63846: PUSH
63847: LD_VAR 0 3
63851: PUSH
63852: LD_VAR 0 2
63856: ARRAY
63857: PUSH
63858: LD_INT 2
63860: ARRAY
63861: STR
63862: PUSH
63863: LD_STRING ,
63865: STR
63866: PUSH
63867: LD_VAR 0 3
63871: PUSH
63872: LD_VAR 0 2
63876: ARRAY
63877: PUSH
63878: LD_INT 3
63880: ARRAY
63881: STR
63882: PUSH
63883: LD_STRING ,
63885: STR
63886: PUSH
63887: LD_VAR 0 3
63891: PUSH
63892: LD_VAR 0 2
63896: ARRAY
63897: PUSH
63898: LD_INT 4
63900: ARRAY
63901: STR
63902: PUSH
63903: LD_STRING )
63905: STR
63906: PPUSH
63907: CALL_OW 559
63911: GO 63821
63913: POP
63914: POP
// end ; end ;
63915: LD_VAR 0 1
63919: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
63920: LD_INT 0
63922: PPUSH
63923: PPUSH
// if not mpSidePositions then
63924: LD_EXP 5
63928: NOT
63929: IFFALSE 63933
// exit ;
63931: GO 64004
// result :=  ;
63933: LD_ADDR_VAR 0 1
63937: PUSH
63938: LD_STRING 
63940: ST_TO_ADDR
// for i := 1 to 8 do
63941: LD_ADDR_VAR 0 2
63945: PUSH
63946: DOUBLE
63947: LD_INT 1
63949: DEC
63950: ST_TO_ADDR
63951: LD_INT 8
63953: PUSH
63954: FOR_TO
63955: IFFALSE 63985
// begin result := result & mpSidePositions [ i ] & ; ;
63957: LD_ADDR_VAR 0 1
63961: PUSH
63962: LD_VAR 0 1
63966: PUSH
63967: LD_EXP 5
63971: PUSH
63972: LD_VAR 0 2
63976: ARRAY
63977: STR
63978: PUSH
63979: LD_STRING ;
63981: STR
63982: ST_TO_ADDR
// end ;
63983: GO 63954
63985: POP
63986: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
63987: LD_STRING setMultiplayerRealPosition("
63989: PUSH
63990: LD_VAR 0 1
63994: STR
63995: PUSH
63996: LD_STRING ");
63998: STR
63999: PPUSH
64000: CALL_OW 559
// end ;
64004: LD_VAR 0 1
64008: RET
