// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 2292 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 2715 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 1 , 1 ] ;
  20: LD_ADDR_EXP 4
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 1
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ 0 , 1 , 2 , 4 ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 5
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: EMPTY
 123: LIST
 124: LIST
 125: PUSH
 126: LD_INT 9
 128: PUSH
 129: LD_INT 12
 131: PUSH
 132: LD_INT 15
 134: PUSH
 135: LD_INT 24
 137: PUSH
 138: EMPTY
 139: LIST
 140: LIST
 141: LIST
 142: LIST
 143: PUSH
 144: LD_INT 1
 146: PUSH
 147: LD_INT 3
 149: PUSH
 150: LD_INT 5
 152: PUSH
 153: LD_INT 7
 155: PUSH
 156: EMPTY
 157: LIST
 158: LIST
 159: LIST
 160: LIST
 161: PUSH
 162: LD_INT 0
 164: PUSH
 165: LD_INT 0
 167: PUSH
 168: LD_INT 0
 170: PUSH
 171: EMPTY
 172: LIST
 173: LIST
 174: LIST
 175: PUSH
 176: LD_INT 100
 178: PUSH
 179: LD_INT 30
 181: PUSH
 182: LD_INT 0
 184: PUSH
 185: EMPTY
 186: LIST
 187: LIST
 188: LIST
 189: PUSH
 190: LD_INT 200
 192: PUSH
 193: LD_INT 75
 195: PUSH
 196: LD_INT 10
 198: PUSH
 199: EMPTY
 200: LIST
 201: LIST
 202: LIST
 203: PUSH
 204: LD_INT 500
 206: PUSH
 207: LD_INT 150
 209: PUSH
 210: LD_INT 30
 212: PUSH
 213: EMPTY
 214: LIST
 215: LIST
 216: LIST
 217: PUSH
 218: EMPTY
 219: LIST
 220: LIST
 221: LIST
 222: LIST
 223: PUSH
 224: LD_INT 1
 226: PUSH
 227: LD_INT 2
 229: PUSH
 230: LD_INT 3
 232: PUSH
 233: LD_INT 4
 235: PUSH
 236: EMPTY
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: PUSH
 242: LD_INT 0
 244: PUSH
 245: LD_INT 1
 247: PUSH
 248: LD_INT 2
 250: PUSH
 251: EMPTY
 252: LIST
 253: LIST
 254: LIST
 255: PUSH
 256: LD_INT 0
 258: PUSH
 259: LD_INT 1
 261: PUSH
 262: LD_INT 2
 264: PUSH
 265: EMPTY
 266: LIST
 267: LIST
 268: LIST
 269: PUSH
 270: LD_INT 250
 272: PUSH
 273: LD_INT 350
 275: PUSH
 276: LD_INT 500
 278: PUSH
 279: LD_INT 1000
 281: PUSH
 282: LD_INT 2000
 284: PUSH
 285: EMPTY
 286: LIST
 287: LIST
 288: LIST
 289: LIST
 290: LIST
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: LD_INT 2
 297: PUSH
 298: EMPTY
 299: LIST
 300: LIST
 301: PUSH
 302: LD_INT 0
 304: PUSH
 305: LD_INT 10500
 307: PUSH
 308: LD_INT 21000
 310: PUSH
 311: LD_INT 31500
 313: PUSH
 314: LD_INT 42000
 316: PUSH
 317: LD_INT 63000
 319: PUSH
 320: EMPTY
 321: LIST
 322: LIST
 323: LIST
 324: LIST
 325: LIST
 326: LIST
 327: PUSH
 328: LD_INT 0
 330: PUSH
 331: LD_INT 1
 333: PUSH
 334: EMPTY
 335: LIST
 336: LIST
 337: PUSH
 338: LD_INT 1
 340: NEG
 341: PUSH
 342: LD_INT 350
 344: PUSH
 345: LD_INT 700
 347: PUSH
 348: LD_INT 1400
 350: PUSH
 351: LD_INT 0
 353: PUSH
 354: EMPTY
 355: LIST
 356: LIST
 357: LIST
 358: LIST
 359: LIST
 360: PUSH
 361: LD_INT 0
 363: PUSH
 364: LD_INT 1
 366: PUSH
 367: EMPTY
 368: LIST
 369: LIST
 370: PUSH
 371: LD_INT 0
 373: PUSH
 374: LD_INT 13650
 376: PUSH
 377: LD_INT 7350
 379: PUSH
 380: EMPTY
 381: LIST
 382: LIST
 383: LIST
 384: PUSH
 385: LD_INT 0
 387: PUSH
 388: LD_INT 2
 390: PUSH
 391: LD_INT 4
 393: PUSH
 394: LD_INT 6
 396: PUSH
 397: EMPTY
 398: LIST
 399: LIST
 400: LIST
 401: LIST
 402: PUSH
 403: EMPTY
 404: PUSH
 405: EMPTY
 406: PUSH
 407: LD_INT 0
 409: PUSH
 410: LD_INT 1
 412: PUSH
 413: LD_INT 31500
 415: PUSH
 416: LD_INT 52500
 418: PUSH
 419: LD_INT 63000
 421: PUSH
 422: LD_INT 94500
 424: PUSH
 425: LD_INT 126000
 427: PUSH
 428: LD_INT 189000
 430: PUSH
 431: LD_INT 210000
 433: PUSH
 434: LD_INT 252000
 436: PUSH
 437: LD_INT 378000
 439: PUSH
 440: EMPTY
 441: LIST
 442: LIST
 443: LIST
 444: LIST
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: PUSH
 453: EMPTY
 454: PUSH
 455: LD_INT 0
 457: PUSH
 458: LD_INT 1
 460: PUSH
 461: LD_INT 2
 463: PUSH
 464: LD_INT 4
 466: PUSH
 467: EMPTY
 468: LIST
 469: LIST
 470: LIST
 471: LIST
 472: PUSH
 473: LD_INT 0
 475: PUSH
 476: LD_INT 6300
 478: PUSH
 479: LD_INT 10500
 481: PUSH
 482: LD_INT 16800
 484: PUSH
 485: LD_INT 21000
 487: PUSH
 488: LD_INT 25200
 490: PUSH
 491: LD_INT 31500
 493: PUSH
 494: LD_INT 42000
 496: PUSH
 497: LD_INT 63000
 499: PUSH
 500: EMPTY
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: PUSH
 511: EMPTY
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: LIST
 522: LIST
 523: LIST
 524: LIST
 525: LIST
 526: LIST
 527: LIST
 528: LIST
 529: LIST
 530: LIST
 531: LIST
 532: LIST
 533: ST_TO_ADDR
// mpGameSettings := [ 1 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 0 , 0 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 3 3$0 ] ;
 534: LD_ADDR_EXP 6
 538: PUSH
 539: LD_INT 1
 541: PUSH
 542: LD_INT 15
 544: PUSH
 545: LD_INT 4
 547: PUSH
 548: LD_INT 100
 550: PUSH
 551: LD_INT 30
 553: PUSH
 554: LD_INT 0
 556: PUSH
 557: EMPTY
 558: LIST
 559: LIST
 560: LIST
 561: PUSH
 562: LD_INT 3
 564: PUSH
 565: LD_INT 1
 567: PUSH
 568: LD_INT 2
 570: PUSH
 571: LD_INT 250
 573: PUSH
 574: LD_INT 0
 576: PUSH
 577: LD_INT 0
 579: PUSH
 580: LD_INT 1
 582: PUSH
 583: LD_INT 700
 585: PUSH
 586: LD_INT 1
 588: PUSH
 589: LD_INT 700
 591: PUSH
 592: LD_INT 3
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 0
 600: PUSH
 601: LD_INT 31500
 603: PUSH
 604: LD_INT 0
 606: PUSH
 607: LD_INT 0
 609: PUSH
 610: LD_INT 6300
 612: PUSH
 613: EMPTY
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: LIST
 624: LIST
 625: LIST
 626: LIST
 627: LIST
 628: LIST
 629: LIST
 630: LIST
 631: LIST
 632: LIST
 633: LIST
 634: LIST
 635: ST_TO_ADDR
// mpGameType := GameTypeNormal ;
 636: LD_ADDR_EXP 3
 640: PUSH
 641: LD_INT 1
 643: ST_TO_ADDR
// your_side := 1 ;
 644: LD_ADDR_OWVAR 2
 648: PUSH
 649: LD_INT 1
 651: ST_TO_ADDR
// mpSidePositions := [ 1 , 2 , 3 , 4 , 0 , 0 , 0 , 0 ] ;
 652: LD_ADDR_EXP 7
 656: PUSH
 657: LD_INT 1
 659: PUSH
 660: LD_INT 2
 662: PUSH
 663: LD_INT 3
 665: PUSH
 666: LD_INT 4
 668: PUSH
 669: LD_INT 0
 671: PUSH
 672: LD_INT 0
 674: PUSH
 675: LD_INT 0
 677: PUSH
 678: LD_INT 0
 680: PUSH
 681: EMPTY
 682: LIST
 683: LIST
 684: LIST
 685: LIST
 686: LIST
 687: LIST
 688: LIST
 689: LIST
 690: ST_TO_ADDR
// mpSideTeams := [ 1 , 1 , 2 , 2 , 0 , 0 , 0 , 0 ] ;
 691: LD_ADDR_EXP 8
 695: PUSH
 696: LD_INT 1
 698: PUSH
 699: LD_INT 1
 701: PUSH
 702: LD_INT 2
 704: PUSH
 705: LD_INT 2
 707: PUSH
 708: LD_INT 0
 710: PUSH
 711: LD_INT 0
 713: PUSH
 714: LD_INT 0
 716: PUSH
 717: LD_INT 0
 719: PUSH
 720: EMPTY
 721: LIST
 722: LIST
 723: LIST
 724: LIST
 725: LIST
 726: LIST
 727: LIST
 728: LIST
 729: ST_TO_ADDR
// mpSideNations := [ 3 , 3 , 3 , 3 , 0 , 0 , 0 , 0 ] ;
 730: LD_ADDR_EXP 9
 734: PUSH
 735: LD_INT 3
 737: PUSH
 738: LD_INT 3
 740: PUSH
 741: LD_INT 3
 743: PUSH
 744: LD_INT 3
 746: PUSH
 747: LD_INT 0
 749: PUSH
 750: LD_INT 0
 752: PUSH
 753: LD_INT 0
 755: PUSH
 756: LD_INT 0
 758: PUSH
 759: EMPTY
 760: LIST
 761: LIST
 762: LIST
 763: LIST
 764: LIST
 765: LIST
 766: LIST
 767: LIST
 768: ST_TO_ADDR
// mpTeams := [ [ 1 , 2 ] , [ 3 , 4 ] ] ;
 769: LD_ADDR_EXP 10
 773: PUSH
 774: LD_INT 1
 776: PUSH
 777: LD_INT 2
 779: PUSH
 780: EMPTY
 781: LIST
 782: LIST
 783: PUSH
 784: LD_INT 3
 786: PUSH
 787: LD_INT 4
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: PUSH
 794: EMPTY
 795: LIST
 796: LIST
 797: ST_TO_ADDR
// mpTeamGame := true ;
 798: LD_ADDR_EXP 11
 802: PUSH
 803: LD_INT 1
 805: ST_TO_ADDR
// mpMapSize := [ 100 , 120 ] ;
 806: LD_ADDR_EXP 29
 810: PUSH
 811: LD_INT 100
 813: PUSH
 814: LD_INT 120
 816: PUSH
 817: EMPTY
 818: LIST
 819: LIST
 820: ST_TO_ADDR
// end ;
 821: LD_VAR 0 1
 825: RET
// export kingArea , kingCamArea ; export function GetMultiplayerMapData ( gameType ) ; var i , all , area , hasOil , hasSib , baseLevel , startPos ; begin
 826: LD_INT 0
 828: PPUSH
 829: PPUSH
 830: PPUSH
 831: PPUSH
 832: PPUSH
 833: PPUSH
 834: PPUSH
 835: PPUSH
// mpBuildUpAreas := [ BaseArea1 , BaseArea2 , BaseArea3 , BaseArea4 ] ;
 836: LD_ADDR_EXP 19
 840: PUSH
 841: LD_INT 3
 843: PUSH
 844: LD_INT 5
 846: PUSH
 847: LD_INT 4
 849: PUSH
 850: LD_INT 6
 852: PUSH
 853: EMPTY
 854: LIST
 855: LIST
 856: LIST
 857: LIST
 858: ST_TO_ADDR
// mpMarkedAreas := [ ] union mpBuildUpAreas ;
 859: LD_ADDR_EXP 18
 863: PUSH
 864: EMPTY
 865: PUSH
 866: LD_EXP 19
 870: UNION
 871: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 872: LD_VAR 0 1
 876: PUSH
 877: LD_INT 2
 879: EQUAL
 880: IFFALSE 892
// baseLevel := 1 else
 882: LD_ADDR_VAR 0 8
 886: PUSH
 887: LD_INT 1
 889: ST_TO_ADDR
 890: GO 906
// baseLevel := mpGameSettings [ 1 ] ;
 892: LD_ADDR_VAR 0 8
 896: PUSH
 897: LD_EXP 6
 901: PUSH
 902: LD_INT 1
 904: ARRAY
 905: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 906: LD_ADDR_EXP 24
 910: PUSH
 911: LD_EXP 6
 915: PUSH
 916: LD_INT 2
 918: ARRAY
 919: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 920: LD_ADDR_EXP 25
 924: PUSH
 925: LD_EXP 6
 929: PUSH
 930: LD_INT 3
 932: ARRAY
 933: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 934: LD_ADDR_EXP 15
 938: PUSH
 939: LD_EXP 6
 943: PUSH
 944: LD_INT 4
 946: ARRAY
 947: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 948: LD_ADDR_EXP 27
 952: PUSH
 953: LD_EXP 6
 957: PUSH
 958: LD_INT 5
 960: ARRAY
 961: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
 962: LD_ADDR_VAR 0 6
 966: PUSH
 967: LD_EXP 6
 971: PUSH
 972: LD_INT 6
 974: ARRAY
 975: PUSH
 976: LD_INT 0
 978: GREATER
 979: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
 980: LD_ADDR_VAR 0 7
 984: PUSH
 985: LD_EXP 6
 989: PUSH
 990: LD_INT 7
 992: ARRAY
 993: PUSH
 994: LD_INT 0
 996: GREATER
 997: ST_TO_ADDR
// mpKingArea := 0 ;
 998: LD_ADDR_EXP 34
1002: PUSH
1003: LD_INT 0
1005: ST_TO_ADDR
// mpPoints := 0 ;
1006: LD_ADDR_EXP 35
1010: PUSH
1011: LD_INT 0
1013: ST_TO_ADDR
// mpEmissions := 0 ;
1014: LD_ADDR_EXP 37
1018: PUSH
1019: LD_INT 0
1021: ST_TO_ADDR
// kingArea := 0 ;
1022: LD_ADDR_EXP 1
1026: PUSH
1027: LD_INT 0
1029: ST_TO_ADDR
// kingCamArea := 0 ;
1030: LD_ADDR_EXP 2
1034: PUSH
1035: LD_INT 0
1037: ST_TO_ADDR
// if mpGameSettings [ 9 ] then
1038: LD_EXP 6
1042: PUSH
1043: LD_INT 9
1045: ARRAY
1046: IFFALSE 1178
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1048: LD_ADDR_EXP 36
1052: PUSH
1053: LD_INT 1
1055: PUSH
1056: LD_INT 1
1058: PUSH
1059: LD_INT 1
1061: PUSH
1062: LD_INT 2
1064: PUSH
1065: EMPTY
1066: LIST
1067: LIST
1068: LIST
1069: LIST
1070: PUSH
1071: LD_INT 1
1073: PUSH
1074: LD_INT 1
1076: PUSH
1077: LD_INT 1
1079: PUSH
1080: LD_INT 3
1082: PUSH
1083: EMPTY
1084: LIST
1085: LIST
1086: LIST
1087: LIST
1088: PUSH
1089: EMPTY
1090: LIST
1091: LIST
1092: PUSH
1093: LD_INT 12
1095: PUSH
1096: LD_INT 1
1098: PUSH
1099: LD_INT 1
1101: PUSH
1102: LD_INT 24
1104: PUSH
1105: EMPTY
1106: LIST
1107: LIST
1108: LIST
1109: LIST
1110: PUSH
1111: LD_INT 12
1113: PUSH
1114: LD_INT 1
1116: PUSH
1117: LD_INT 1
1119: PUSH
1120: LD_INT 23
1122: PUSH
1123: EMPTY
1124: LIST
1125: LIST
1126: LIST
1127: LIST
1128: PUSH
1129: EMPTY
1130: LIST
1131: LIST
1132: PUSH
1133: LD_INT 21
1135: PUSH
1136: LD_INT 1
1138: PUSH
1139: LD_INT 1
1141: PUSH
1142: LD_INT 42
1144: PUSH
1145: EMPTY
1146: LIST
1147: LIST
1148: LIST
1149: LIST
1150: PUSH
1151: LD_INT 21
1153: PUSH
1154: LD_INT 1
1156: PUSH
1157: LD_INT 1
1159: PUSH
1160: LD_INT 42
1162: PUSH
1163: EMPTY
1164: LIST
1165: LIST
1166: LIST
1167: LIST
1168: PUSH
1169: EMPTY
1170: LIST
1171: LIST
1172: PUSH
1173: EMPTY
1174: LIST
1175: LIST
1176: LIST
1177: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1178: LD_ADDR_EXP 16
1182: PUSH
1183: LD_EXP 6
1187: PUSH
1188: LD_INT 11
1190: ARRAY
1191: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1192: LD_ADDR_EXP 22
1196: PUSH
1197: LD_EXP 6
1201: PUSH
1202: LD_INT 12
1204: ARRAY
1205: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1206: LD_ADDR_EXP 26
1210: PUSH
1211: LD_EXP 6
1215: PUSH
1216: LD_INT 13
1218: ARRAY
1219: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1220: LD_ADDR_EXP 33
1224: PUSH
1225: LD_EXP 6
1229: PUSH
1230: LD_INT 14
1232: ARRAY
1233: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1234: LD_ADDR_EXP 30
1238: PUSH
1239: LD_EXP 6
1243: PUSH
1244: LD_INT 15
1246: ARRAY
1247: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1248: LD_ADDR_EXP 28
1252: PUSH
1253: LD_EXP 6
1257: PUSH
1258: LD_INT 18
1260: ARRAY
1261: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1262: LD_ADDR_EXP 20
1266: PUSH
1267: LD_EXP 6
1271: PUSH
1272: LD_INT 21
1274: ARRAY
1275: ST_TO_ADDR
// mpApemansArea := [ ApeArea1 , ApeArea2 , ApeArea3 , ApeArea4 ] ;
1276: LD_ADDR_EXP 31
1280: PUSH
1281: LD_INT 9
1283: PUSH
1284: LD_INT 10
1286: PUSH
1287: LD_INT 12
1289: PUSH
1290: LD_INT 11
1292: PUSH
1293: EMPTY
1294: LIST
1295: LIST
1296: LIST
1297: LIST
1298: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( DepotArea1 , 2 ) , GetBuildingFromArea ( DepotArea2 , 0 ) , GetBuildingFromArea ( DepotArea3 , 3 ) , GetBuildingFromArea ( DepotArea4 , 5 ) ] ;
1299: LD_ADDR_VAR 0 9
1303: PUSH
1304: LD_INT 13
1306: PPUSH
1307: LD_INT 2
1309: PPUSH
1310: CALL 54187 0 2
1314: PUSH
1315: LD_INT 16
1317: PPUSH
1318: LD_INT 0
1320: PPUSH
1321: CALL 54187 0 2
1325: PUSH
1326: LD_INT 19
1328: PPUSH
1329: LD_INT 3
1331: PPUSH
1332: CALL 54187 0 2
1336: PUSH
1337: LD_INT 22
1339: PPUSH
1340: LD_INT 5
1342: PPUSH
1343: CALL 54187 0 2
1347: PUSH
1348: EMPTY
1349: LIST
1350: LIST
1351: LIST
1352: LIST
1353: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1354: LD_ADDR_VAR 0 3
1358: PUSH
1359: DOUBLE
1360: LD_INT 1
1362: DEC
1363: ST_TO_ADDR
1364: LD_VAR 0 9
1368: PPUSH
1369: CALL 13492 0 1
1373: PUSH
1374: FOR_TO
1375: IFFALSE 1479
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1377: LD_ADDR_EXP 21
1381: PUSH
1382: LD_EXP 21
1386: PPUSH
1387: LD_VAR 0 3
1391: PPUSH
1392: LD_VAR 0 9
1396: PUSH
1397: LD_VAR 0 3
1401: ARRAY
1402: PUSH
1403: LD_INT 1
1405: ARRAY
1406: PPUSH
1407: LD_VAR 0 9
1411: PUSH
1412: LD_VAR 0 3
1416: ARRAY
1417: PUSH
1418: LD_INT 3
1420: ARRAY
1421: PPUSH
1422: LD_INT 10
1424: PPUSH
1425: CALL_OW 272
1429: PUSH
1430: LD_VAR 0 9
1434: PUSH
1435: LD_VAR 0 3
1439: ARRAY
1440: PUSH
1441: LD_INT 2
1443: ARRAY
1444: PPUSH
1445: LD_VAR 0 9
1449: PUSH
1450: LD_VAR 0 3
1454: ARRAY
1455: PUSH
1456: LD_INT 3
1458: ARRAY
1459: PPUSH
1460: LD_INT 10
1462: PPUSH
1463: CALL_OW 273
1467: PUSH
1468: EMPTY
1469: LIST
1470: LIST
1471: PPUSH
1472: CALL_OW 1
1476: ST_TO_ADDR
1477: GO 1374
1479: POP
1480: POP
// if baseLevel >= 1 then
1481: LD_VAR 0 8
1485: PUSH
1486: LD_INT 1
1488: GREATEREQUAL
1489: IFFALSE 1501
// mpDepots := startPos ;
1491: LD_ADDR_EXP 14
1495: PUSH
1496: LD_VAR 0 9
1500: ST_TO_ADDR
// if hasOil then
1501: LD_VAR 0 6
1505: IFFALSE 1588
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1507: LD_ADDR_VAR 0 4
1511: PUSH
1512: LD_EXP 6
1516: PUSH
1517: LD_INT 6
1519: ARRAY
1520: PUSH
1521: LD_INT 2
1523: EQUAL
1524: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( OilArea1 , all ) , GetSourcesFromArea ( OilArea2 , all ) , GetSourcesFromArea ( OilArea3 , all ) , GetSourcesFromArea ( OilArea4 , all ) ] ;
1525: LD_ADDR_EXP 12
1529: PUSH
1530: LD_INT 14
1532: PPUSH
1533: LD_VAR 0 4
1537: PPUSH
1538: CALL 54020 0 2
1542: PUSH
1543: LD_INT 17
1545: PPUSH
1546: LD_VAR 0 4
1550: PPUSH
1551: CALL 54020 0 2
1555: PUSH
1556: LD_INT 20
1558: PPUSH
1559: LD_VAR 0 4
1563: PPUSH
1564: CALL 54020 0 2
1568: PUSH
1569: LD_INT 23
1571: PPUSH
1572: LD_VAR 0 4
1576: PPUSH
1577: CALL 54020 0 2
1581: PUSH
1582: EMPTY
1583: LIST
1584: LIST
1585: LIST
1586: LIST
1587: ST_TO_ADDR
// end ; if hasSib then
1588: LD_VAR 0 7
1592: IFFALSE 1675
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1594: LD_ADDR_VAR 0 4
1598: PUSH
1599: LD_EXP 6
1603: PUSH
1604: LD_INT 7
1606: ARRAY
1607: PUSH
1608: LD_INT 2
1610: EQUAL
1611: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( SibArea1 , all ) , GetSourcesFromArea ( SibArea2 , all ) , GetSourcesFromArea ( SibArea3 , all ) , GetSourcesFromArea ( SibArea4 , all ) ] ;
1612: LD_ADDR_EXP 13
1616: PUSH
1617: LD_INT 15
1619: PPUSH
1620: LD_VAR 0 4
1624: PPUSH
1625: CALL 54020 0 2
1629: PUSH
1630: LD_INT 18
1632: PPUSH
1633: LD_VAR 0 4
1637: PPUSH
1638: CALL 54020 0 2
1642: PUSH
1643: LD_INT 21
1645: PPUSH
1646: LD_VAR 0 4
1650: PPUSH
1651: CALL 54020 0 2
1655: PUSH
1656: LD_INT 24
1658: PPUSH
1659: LD_VAR 0 4
1663: PPUSH
1664: CALL 54020 0 2
1668: PUSH
1669: EMPTY
1670: LIST
1671: LIST
1672: LIST
1673: LIST
1674: ST_TO_ADDR
// end ; end ;
1675: LD_VAR 0 2
1679: RET
// every 0 0$2 marked mpActive do var i , x , tmp , time , areas , normalTime , delayTime , maxTime ;
1680: GO 1682
1682: DISABLE
1683: LD_INT 0
1685: PPUSH
1686: PPUSH
1687: PPUSH
1688: PPUSH
1689: PPUSH
1690: PPUSH
1691: PPUSH
1692: PPUSH
// begin if not mpShipments then
1693: LD_EXP 27
1697: NOT
1698: IFFALSE 1702
// exit ;
1700: GO 2129
// case mpShipments of 1 :
1702: LD_EXP 27
1706: PUSH
1707: LD_INT 1
1709: DOUBLE
1710: EQUAL
1711: IFTRUE 1715
1713: GO 1750
1715: POP
// begin time := 0 0$20 ;
1716: LD_ADDR_VAR 0 4
1720: PUSH
1721: LD_INT 700
1723: ST_TO_ADDR
// normalTime := 0 0$20 ;
1724: LD_ADDR_VAR 0 6
1728: PUSH
1729: LD_INT 700
1731: ST_TO_ADDR
// maxTime := 1 1$20 ;
1732: LD_ADDR_VAR 0 8
1736: PUSH
1737: LD_INT 2800
1739: ST_TO_ADDR
// delayTime := 0 0$4 ;
1740: LD_ADDR_VAR 0 7
1744: PUSH
1745: LD_INT 140
1747: ST_TO_ADDR
// end ; 2 :
1748: GO 1880
1750: LD_INT 2
1752: DOUBLE
1753: EQUAL
1754: IFTRUE 1758
1756: GO 1793
1758: POP
// begin time := 0 0$17 ;
1759: LD_ADDR_VAR 0 4
1763: PUSH
1764: LD_INT 595
1766: ST_TO_ADDR
// normalTime := 0 0$17 ;
1767: LD_ADDR_VAR 0 6
1771: PUSH
1772: LD_INT 595
1774: ST_TO_ADDR
// maxTime := 1 1$10 ;
1775: LD_ADDR_VAR 0 8
1779: PUSH
1780: LD_INT 2450
1782: ST_TO_ADDR
// delayTime := 0 0$3 ;
1783: LD_ADDR_VAR 0 7
1787: PUSH
1788: LD_INT 105
1790: ST_TO_ADDR
// end ; 3 :
1791: GO 1880
1793: LD_INT 3
1795: DOUBLE
1796: EQUAL
1797: IFTRUE 1801
1799: GO 1836
1801: POP
// begin time := 0 0$15 ;
1802: LD_ADDR_VAR 0 4
1806: PUSH
1807: LD_INT 525
1809: ST_TO_ADDR
// normalTime := 0 0$15 ;
1810: LD_ADDR_VAR 0 6
1814: PUSH
1815: LD_INT 525
1817: ST_TO_ADDR
// maxTime := 1 1$00 ;
1818: LD_ADDR_VAR 0 8
1822: PUSH
1823: LD_INT 2100
1825: ST_TO_ADDR
// delayTime := 0 0$2 ;
1826: LD_ADDR_VAR 0 7
1830: PUSH
1831: LD_INT 70
1833: ST_TO_ADDR
// end ; 4 :
1834: GO 1880
1836: LD_INT 4
1838: DOUBLE
1839: EQUAL
1840: IFTRUE 1844
1842: GO 1879
1844: POP
// begin time := 0 0$12 ;
1845: LD_ADDR_VAR 0 4
1849: PUSH
1850: LD_INT 420
1852: ST_TO_ADDR
// normalTime := 0 0$12 ;
1853: LD_ADDR_VAR 0 6
1857: PUSH
1858: LD_INT 420
1860: ST_TO_ADDR
// maxTime := 0 0$55 ;
1861: LD_ADDR_VAR 0 8
1865: PUSH
1866: LD_INT 1925
1868: ST_TO_ADDR
// delayTime := 0 0$1 ;
1869: LD_ADDR_VAR 0 7
1873: PUSH
1874: LD_INT 35
1876: ST_TO_ADDR
// end ; end ;
1877: GO 1880
1879: POP
// tmp := [ BaseArea1 , BaseArea2 , BaseArea3 , BaseArea4 ] ;
1880: LD_ADDR_VAR 0 3
1884: PUSH
1885: LD_INT 3
1887: PUSH
1888: LD_INT 5
1890: PUSH
1891: LD_INT 4
1893: PUSH
1894: LD_INT 6
1896: PUSH
1897: EMPTY
1898: LIST
1899: LIST
1900: LIST
1901: LIST
1902: ST_TO_ADDR
// areas := [ CenterOuterArea , HillArea , CenterInnerArea ] ;
1903: LD_ADDR_VAR 0 5
1907: PUSH
1908: LD_INT 1
1910: PUSH
1911: LD_INT 2
1913: PUSH
1914: LD_INT 7
1916: PUSH
1917: EMPTY
1918: LIST
1919: LIST
1920: LIST
1921: ST_TO_ADDR
// for i := 1 to 8 do
1922: LD_ADDR_VAR 0 1
1926: PUSH
1927: DOUBLE
1928: LD_INT 1
1930: DEC
1931: ST_TO_ADDR
1932: LD_INT 8
1934: PUSH
1935: FOR_TO
1936: IFFALSE 1983
// begin if not mpSidePositions [ i ] then
1938: LD_EXP 7
1942: PUSH
1943: LD_VAR 0 1
1947: ARRAY
1948: NOT
1949: IFFALSE 1953
// continue ;
1951: GO 1935
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
1953: LD_ADDR_VAR 0 5
1957: PUSH
1958: LD_VAR 0 5
1962: PUSH
1963: LD_VAR 0 3
1967: PUSH
1968: LD_EXP 7
1972: PUSH
1973: LD_VAR 0 1
1977: ARRAY
1978: ARRAY
1979: ADD
1980: ST_TO_ADDR
// end ;
1981: GO 1935
1983: POP
1984: POP
// x := 1 ;
1985: LD_ADDR_VAR 0 2
1989: PUSH
1990: LD_INT 1
1992: ST_TO_ADDR
// repeat wait ( time ) ;
1993: LD_VAR 0 4
1997: PPUSH
1998: CALL_OW 67
// x := Inc ( x ) ;
2002: LD_ADDR_VAR 0 2
2006: PUSH
2007: LD_VAR 0 2
2011: PPUSH
2012: CALL 50841 0 1
2016: ST_TO_ADDR
// if x > 5 then
2017: LD_VAR 0 2
2021: PUSH
2022: LD_INT 5
2024: GREATER
2025: IFFALSE 2035
// x := 1 ;
2027: LD_ADDR_VAR 0 2
2031: PUSH
2032: LD_INT 1
2034: ST_TO_ADDR
// for i in areas do
2035: LD_ADDR_VAR 0 1
2039: PUSH
2040: LD_VAR 0 5
2044: PUSH
2045: FOR_IN
2046: IFFALSE 2085
// begin if GetResourceArea ( i , mat_cans ) < 30 then
2048: LD_VAR 0 1
2052: PPUSH
2053: LD_INT 1
2055: PPUSH
2056: CALL_OW 287
2060: PUSH
2061: LD_INT 30
2063: LESS
2064: IFFALSE 2083
// begin CreateCratesArea ( x , i , true ) ;
2066: LD_VAR 0 2
2070: PPUSH
2071: LD_VAR 0 1
2075: PPUSH
2076: LD_INT 1
2078: PPUSH
2079: CALL_OW 55
// end ; end ;
2083: GO 2045
2085: POP
2086: POP
// time := time + delayTime ;
2087: LD_ADDR_VAR 0 4
2091: PUSH
2092: LD_VAR 0 4
2096: PUSH
2097: LD_VAR 0 7
2101: PLUS
2102: ST_TO_ADDR
// if time > maxTime then
2103: LD_VAR 0 4
2107: PUSH
2108: LD_VAR 0 8
2112: GREATER
2113: IFFALSE 2125
// time := normalTime ;
2115: LD_ADDR_VAR 0 4
2119: PUSH
2120: LD_VAR 0 6
2124: ST_TO_ADDR
// until false ;
2125: LD_INT 0
2127: IFFALSE 1993
// end ; end_of_file
2129: PPOPN 8
2131: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2132: LD_VAR 0 1
2136: PPUSH
2137: CALL 54985 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2141: LD_VAR 0 1
2145: PPUSH
2146: CALL 7838 0 1
// end ;
2150: PPOPN 1
2152: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2153: LD_VAR 0 1
2157: PPUSH
2158: CALL 55002 0 1
// end ;
2162: PPOPN 1
2164: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2165: LD_VAR 0 1
2169: PPUSH
2170: CALL 8891 0 1
2174: PPOPN 1
2176: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2177: LD_VAR 0 1
2181: PPUSH
2182: LD_VAR 0 2
2186: PPUSH
2187: CALL 55043 0 2
2191: PPOPN 2
2193: END
// on VehicleConstruction_ApeConsumed ( factory , un ) do Multiplayer_VehicleConstruction_ApeConsumed ( factory , un ) ;
2194: LD_VAR 0 1
2198: PPUSH
2199: LD_VAR 0 2
2203: PPUSH
2204: CALL 8644 0 2
2208: PPOPN 2
2210: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ;
2211: LD_VAR 0 1
2215: PPUSH
2216: LD_VAR 0 2
2220: PPUSH
2221: LD_VAR 0 3
2225: PPUSH
2226: CALL 8944 0 3
2230: PPOPN 3
2232: END
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ;
2233: LD_VAR 0 1
2237: PPUSH
2238: LD_VAR 0 2
2242: PPUSH
2243: LD_VAR 0 3
2247: PPUSH
2248: LD_VAR 0 4
2252: PPUSH
2253: LD_VAR 0 5
2257: PPUSH
2258: CALL 9628 0 5
// end ;
2262: PPOPN 5
2264: END
// on VehicleCaptured ( newId , oldId , oldSide , unit ) do Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; end_of_file
2265: LD_VAR 0 1
2269: PPUSH
2270: LD_VAR 0 2
2274: PPUSH
2275: LD_VAR 0 3
2279: PPUSH
2280: LD_VAR 0 4
2284: PPUSH
2285: CALL 9731 0 4
2289: PPOPN 4
2291: END
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpCommanders , mpGlobalOilDeposits , mpGlobalSibDeposits , mpTeleports , mpArtifacts , mpTimeToWin , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
2292: LD_INT 0
2294: PPUSH
2295: PPUSH
// disable ( mpActive ) ;
2296: LD_INT 100
2298: DISABLE_MARKED
// disable ( mpWin ) ;
2299: LD_INT 101
2301: DISABLE_MARKED
// disable ( mpLose ) ;
2302: LD_INT 102
2304: DISABLE_MARKED
// mpGameType := 0 ;
2305: LD_ADDR_EXP 3
2309: PUSH
2310: LD_INT 0
2312: ST_TO_ADDR
// mpGameSettings := [ ] ;
2313: LD_ADDR_EXP 6
2317: PUSH
2318: EMPTY
2319: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
2320: LD_ADDR_EXP 4
2324: PUSH
2325: EMPTY
2326: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
2327: LD_ADDR_EXP 5
2331: PUSH
2332: EMPTY
2333: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
2334: LD_ADDR_EXP 29
2338: PUSH
2339: LD_INT 2
2341: PUSH
2342: LD_INT 2
2344: PUSH
2345: EMPTY
2346: LIST
2347: LIST
2348: ST_TO_ADDR
// mpOilDeposits := [ ] ;
2349: LD_ADDR_EXP 12
2353: PUSH
2354: EMPTY
2355: ST_TO_ADDR
// mpSibDeposits := [ ] ;
2356: LD_ADDR_EXP 13
2360: PUSH
2361: EMPTY
2362: ST_TO_ADDR
// mpGlobalOilDeposits := [ ] ;
2363: LD_ADDR_EXP 42
2367: PUSH
2368: EMPTY
2369: ST_TO_ADDR
// mpGlobalSibDeposits := [ ] ;
2370: LD_ADDR_EXP 43
2374: PUSH
2375: EMPTY
2376: ST_TO_ADDR
// mpDepots := [ ] ;
2377: LD_ADDR_EXP 14
2381: PUSH
2382: EMPTY
2383: ST_TO_ADDR
// mpBuildings := [ ] ;
2384: LD_ADDR_EXP 17
2388: PUSH
2389: EMPTY
2390: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
2391: LD_ADDR_EXP 18
2395: PUSH
2396: EMPTY
2397: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
2398: LD_ADDR_EXP 19
2402: PUSH
2403: EMPTY
2404: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
2405: LD_ADDR_EXP 20
2409: PUSH
2410: EMPTY
2411: ST_TO_ADDR
// mpStartingResources := [ ] ;
2412: LD_ADDR_EXP 15
2416: PUSH
2417: EMPTY
2418: ST_TO_ADDR
// mpStartPos := [ ] ;
2419: LD_ADDR_EXP 21
2423: PUSH
2424: EMPTY
2425: ST_TO_ADDR
// mpBattleFlag := - 1 ;
2426: LD_ADDR_EXP 22
2430: PUSH
2431: LD_INT 1
2433: NEG
2434: ST_TO_ADDR
// mpBattleFlags := [ ] ;
2435: LD_ADDR_EXP 23
2439: PUSH
2440: EMPTY
2441: ST_TO_ADDR
// mpApemans := [ ] ;
2442: LD_ADDR_EXP 30
2446: PUSH
2447: EMPTY
2448: ST_TO_ADDR
// mpApemansArea := [ ] ;
2449: LD_ADDR_EXP 31
2453: PUSH
2454: EMPTY
2455: ST_TO_ADDR
// mpRespawn := [ ] ;
2456: LD_ADDR_EXP 33
2460: PUSH
2461: EMPTY
2462: ST_TO_ADDR
// mpKingArea := 0 ;
2463: LD_ADDR_EXP 34
2467: PUSH
2468: LD_INT 0
2470: ST_TO_ADDR
// mpPoints := [ ] ;
2471: LD_ADDR_EXP 35
2475: PUSH
2476: EMPTY
2477: ST_TO_ADDR
// mpVehicles := 0 ;
2478: LD_ADDR_EXP 36
2482: PUSH
2483: LD_INT 0
2485: ST_TO_ADDR
// mpShipments := 0 ;
2486: LD_ADDR_EXP 27
2490: PUSH
2491: LD_INT 0
2493: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
2494: LD_ADDR_EXP 40
2498: PUSH
2499: EMPTY
2500: PUSH
2501: EMPTY
2502: PUSH
2503: EMPTY
2504: PUSH
2505: EMPTY
2506: PUSH
2507: EMPTY
2508: PUSH
2509: EMPTY
2510: PUSH
2511: EMPTY
2512: PUSH
2513: EMPTY
2514: PUSH
2515: EMPTY
2516: LIST
2517: LIST
2518: LIST
2519: LIST
2520: LIST
2521: LIST
2522: LIST
2523: LIST
2524: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
2525: LD_ADDR_EXP 32
2529: PUSH
2530: EMPTY
2531: PUSH
2532: EMPTY
2533: PUSH
2534: EMPTY
2535: PUSH
2536: EMPTY
2537: PUSH
2538: EMPTY
2539: PUSH
2540: EMPTY
2541: PUSH
2542: EMPTY
2543: PUSH
2544: EMPTY
2545: PUSH
2546: EMPTY
2547: LIST
2548: LIST
2549: LIST
2550: LIST
2551: LIST
2552: LIST
2553: LIST
2554: LIST
2555: ST_TO_ADDR
// mpCommanders := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
2556: LD_ADDR_EXP 41
2560: PUSH
2561: LD_INT 0
2563: PUSH
2564: LD_INT 0
2566: PUSH
2567: LD_INT 0
2569: PUSH
2570: LD_INT 0
2572: PUSH
2573: LD_INT 0
2575: PUSH
2576: LD_INT 0
2578: PUSH
2579: LD_INT 0
2581: PUSH
2582: LD_INT 0
2584: PUSH
2585: EMPTY
2586: LIST
2587: LIST
2588: LIST
2589: LIST
2590: LIST
2591: LIST
2592: LIST
2593: LIST
2594: ST_TO_ADDR
// mpEmissions := 0 ;
2595: LD_ADDR_EXP 37
2599: PUSH
2600: LD_INT 0
2602: ST_TO_ADDR
// mpTeleports := 0 ;
2603: LD_ADDR_EXP 44
2607: PUSH
2608: LD_INT 0
2610: ST_TO_ADDR
// mpArtifacts := 0 ;
2611: LD_ADDR_EXP 45
2615: PUSH
2616: LD_INT 0
2618: ST_TO_ADDR
// mpTimeToWin := 0 0$0 ;
2619: LD_ADDR_EXP 46
2623: PUSH
2624: LD_INT 0
2626: ST_TO_ADDR
// mpPeopleSkill := 3 ;
2627: LD_ADDR_EXP 25
2631: PUSH
2632: LD_INT 3
2634: ST_TO_ADDR
// mpPeopleAmount := 15 ;
2635: LD_ADDR_EXP 24
2639: PUSH
2640: LD_INT 15
2642: ST_TO_ADDR
// mpDisplayStrings := 0 ;
2643: LD_ADDR_EXP 38
2647: PUSH
2648: LD_INT 0
2650: ST_TO_ADDR
// mpGameActive := false ;
2651: LD_ADDR_EXP 39
2655: PUSH
2656: LD_INT 0
2658: ST_TO_ADDR
// mpBlockRespThread := false ;
2659: LD_ADDR_EXP 47
2663: PUSH
2664: LD_INT 0
2666: ST_TO_ADDR
// for i := 1 to 32 do
2667: LD_ADDR_VAR 0 2
2671: PUSH
2672: DOUBLE
2673: LD_INT 1
2675: DEC
2676: ST_TO_ADDR
2677: LD_INT 32
2679: PUSH
2680: FOR_TO
2681: IFFALSE 2708
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
2683: LD_ADDR_EXP 6
2687: PUSH
2688: LD_EXP 6
2692: PPUSH
2693: LD_VAR 0 2
2697: PPUSH
2698: LD_INT 0
2700: PPUSH
2701: CALL_OW 1
2705: ST_TO_ADDR
2706: GO 2680
2708: POP
2709: POP
// end ;
2710: LD_VAR 0 1
2714: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
2715: LD_INT 0
2717: PPUSH
2718: PPUSH
2719: PPUSH
2720: PPUSH
2721: PPUSH
2722: PPUSH
2723: PPUSH
2724: PPUSH
2725: PPUSH
2726: PPUSH
2727: PPUSH
2728: PPUSH
2729: PPUSH
2730: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact , GameTypeSurvivalHardcore ] ;
2731: LD_ADDR_VAR 0 14
2735: PUSH
2736: LD_INT 1
2738: PUSH
2739: LD_INT 2
2741: PUSH
2742: LD_INT 3
2744: PUSH
2745: LD_INT 5
2747: PUSH
2748: LD_INT 6
2750: PUSH
2751: LD_INT 7
2753: PUSH
2754: LD_INT 8
2756: PUSH
2757: EMPTY
2758: LIST
2759: LIST
2760: LIST
2761: LIST
2762: LIST
2763: LIST
2764: LIST
2765: ST_TO_ADDR
// for i in gameTypes do
2766: LD_ADDR_VAR 0 2
2770: PUSH
2771: LD_VAR 0 14
2775: PUSH
2776: FOR_IN
2777: IFFALSE 2786
// disable ( i ) ;
2779: LD_VAR 0 2
2783: DISABLE_MARKED
2784: GO 2776
2786: POP
2787: POP
// if Multiplayer then
2788: LD_OWVAR 4
2792: IFFALSE 2976
// begin mpGameType := mp_game_type ;
2794: LD_ADDR_EXP 3
2798: PUSH
2799: LD_OWVAR 6
2803: ST_TO_ADDR
// your_side := mp_player_side ;
2804: LD_ADDR_OWVAR 2
2808: PUSH
2809: LD_OWVAR 7
2813: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
2814: LD_ADDR_EXP 7
2818: PUSH
2819: LD_OWVAR 17
2823: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
2824: LD_ADDR_EXP 8
2828: PUSH
2829: LD_OWVAR 15
2833: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
2834: LD_ADDR_EXP 9
2838: PUSH
2839: LD_OWVAR 16
2843: ST_TO_ADDR
// mpTeams := mp_teams ;
2844: LD_ADDR_EXP 10
2848: PUSH
2849: LD_OWVAR 12
2853: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
2854: LD_ADDR_VAR 0 2
2858: PUSH
2859: DOUBLE
2860: LD_INT 1
2862: DEC
2863: ST_TO_ADDR
2864: LD_EXP 4
2868: PPUSH
2869: CALL 13492 0 1
2873: PUSH
2874: FOR_TO
2875: IFFALSE 2951
// begin setting := mpGameSettingsKeys [ i ] ;
2877: LD_ADDR_VAR 0 12
2881: PUSH
2882: LD_EXP 4
2886: PUSH
2887: LD_VAR 0 2
2891: ARRAY
2892: ST_TO_ADDR
// if setting then
2893: LD_VAR 0 12
2897: IFFALSE 2949
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
2899: LD_ADDR_EXP 6
2903: PUSH
2904: LD_EXP 6
2908: PPUSH
2909: LD_VAR 0 2
2913: PPUSH
2914: LD_EXP 5
2918: PUSH
2919: LD_VAR 0 2
2923: ARRAY
2924: PUSH
2925: LD_VAR 0 2
2929: PUSH
2930: LD_INT 1
2932: MINUS
2933: PPUSH
2934: CALL_OW 426
2938: PUSH
2939: LD_INT 1
2941: PLUS
2942: ARRAY
2943: PPUSH
2944: CALL_OW 1
2948: ST_TO_ADDR
// end ;
2949: GO 2874
2951: POP
2952: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
2953: LD_ADDR_EXP 11
2957: PUSH
2958: LD_EXP 8
2962: PUSH
2963: LD_INT 0
2965: PUSH
2966: EMPTY
2967: LIST
2968: DIFF
2969: PUSH
2970: LD_INT 1
2972: GREATER
2973: ST_TO_ADDR
// end else
2974: GO 2976
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
2976: LD_EXP 3
2980: PPUSH
2981: CALL 826 0 1
// if Count ( mpMarkedAreas ) then
2985: LD_EXP 18
2989: PPUSH
2990: CALL 13492 0 1
2994: IFFALSE 3025
// begin for i in mpMarkedAreas do
2996: LD_ADDR_VAR 0 2
3000: PUSH
3001: LD_EXP 18
3005: PUSH
3006: FOR_IN
3007: IFFALSE 3023
// SetAreaMapShow ( i , 0 ) ;
3009: LD_VAR 0 2
3013: PPUSH
3014: LD_INT 0
3016: PPUSH
3017: CALL_OW 424
3021: GO 3006
3023: POP
3024: POP
// end ; for i := 1 to 8 do
3025: LD_ADDR_VAR 0 2
3029: PUSH
3030: DOUBLE
3031: LD_INT 1
3033: DEC
3034: ST_TO_ADDR
3035: LD_INT 8
3037: PUSH
3038: FOR_TO
3039: IFFALSE 4498
// begin if not mpSidePositions [ i ] then
3041: LD_EXP 7
3045: PUSH
3046: LD_VAR 0 2
3050: ARRAY
3051: NOT
3052: IFFALSE 3056
// continue ;
3054: GO 3038
// side := i ;
3056: LD_ADDR_VAR 0 7
3060: PUSH
3061: LD_VAR 0 2
3065: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
3066: LD_ADDR_VAR 0 9
3070: PUSH
3071: LD_EXP 9
3075: PUSH
3076: LD_VAR 0 2
3080: ARRAY
3081: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
3082: LD_ADDR_VAR 0 8
3086: PUSH
3087: LD_EXP 7
3091: PUSH
3092: LD_VAR 0 2
3096: ARRAY
3097: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
3098: LD_EXP 12
3102: PPUSH
3103: CALL 13492 0 1
3107: IFFALSE 3184
// begin for j in mpOilDeposits [ pos ] do
3109: LD_ADDR_VAR 0 3
3113: PUSH
3114: LD_EXP 12
3118: PUSH
3119: LD_VAR 0 8
3123: ARRAY
3124: PUSH
3125: FOR_IN
3126: IFFALSE 3182
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
3128: LD_VAR 0 3
3132: PUSH
3133: LD_INT 1
3135: ARRAY
3136: PPUSH
3137: LD_VAR 0 3
3141: PUSH
3142: LD_INT 2
3144: ARRAY
3145: PPUSH
3146: LD_INT 2
3148: PPUSH
3149: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3153: LD_VAR 0 3
3157: PUSH
3158: LD_INT 1
3160: ARRAY
3161: PPUSH
3162: LD_VAR 0 3
3166: PUSH
3167: LD_INT 2
3169: ARRAY
3170: PPUSH
3171: LD_VAR 0 7
3175: PPUSH
3176: CALL_OW 441
// end ;
3180: GO 3125
3182: POP
3183: POP
// end ; if Count ( mpSibDeposits ) then
3184: LD_EXP 13
3188: PPUSH
3189: CALL 13492 0 1
3193: IFFALSE 3270
// begin for j in mpSibDeposits [ pos ] do
3195: LD_ADDR_VAR 0 3
3199: PUSH
3200: LD_EXP 13
3204: PUSH
3205: LD_VAR 0 8
3209: ARRAY
3210: PUSH
3211: FOR_IN
3212: IFFALSE 3268
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
3214: LD_VAR 0 3
3218: PUSH
3219: LD_INT 1
3221: ARRAY
3222: PPUSH
3223: LD_VAR 0 3
3227: PUSH
3228: LD_INT 2
3230: ARRAY
3231: PPUSH
3232: LD_INT 3
3234: PPUSH
3235: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3239: LD_VAR 0 3
3243: PUSH
3244: LD_INT 1
3246: ARRAY
3247: PPUSH
3248: LD_VAR 0 3
3252: PUSH
3253: LD_INT 2
3255: ARRAY
3256: PPUSH
3257: LD_VAR 0 7
3261: PPUSH
3262: CALL_OW 441
// end ;
3266: GO 3211
3268: POP
3269: POP
// end ; InitBc ;
3270: CALL_OW 21
// InitUc ;
3274: CALL_OW 18
// uc_side := side ;
3278: LD_ADDR_OWVAR 20
3282: PUSH
3283: LD_VAR 0 7
3287: ST_TO_ADDR
// uc_nation := nation ;
3288: LD_ADDR_OWVAR 21
3292: PUSH
3293: LD_VAR 0 9
3297: ST_TO_ADDR
// if mpBattleFlag > - 1 then
3298: LD_EXP 22
3302: PUSH
3303: LD_INT 1
3305: NEG
3306: GREATER
3307: IFFALSE 3466
// begin x := mpStartPos [ pos ] [ 1 ] ;
3309: LD_ADDR_VAR 0 5
3313: PUSH
3314: LD_EXP 21
3318: PUSH
3319: LD_VAR 0 8
3323: ARRAY
3324: PUSH
3325: LD_INT 1
3327: ARRAY
3328: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
3329: LD_ADDR_VAR 0 6
3333: PUSH
3334: LD_EXP 21
3338: PUSH
3339: LD_VAR 0 8
3343: ARRAY
3344: PUSH
3345: LD_INT 2
3347: ARRAY
3348: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3349: LD_VAR 0 5
3353: PPUSH
3354: LD_VAR 0 6
3358: PPUSH
3359: LD_INT 12
3361: PPUSH
3362: LD_INT 2
3364: PPUSH
3365: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
3369: LD_ADDR_EXP 23
3373: PUSH
3374: LD_EXP 23
3378: PPUSH
3379: LD_VAR 0 7
3383: PPUSH
3384: LD_VAR 0 7
3388: PPUSH
3389: LD_VAR 0 5
3393: PPUSH
3394: LD_VAR 0 6
3398: PPUSH
3399: LD_INT 1
3401: PUSH
3402: LD_INT 100
3404: PUSH
3405: EMPTY
3406: LIST
3407: LIST
3408: PUSH
3409: LD_INT 2
3411: PUSH
3412: LD_INT 70
3414: PUSH
3415: EMPTY
3416: LIST
3417: LIST
3418: PUSH
3419: LD_INT 3
3421: PUSH
3422: LD_INT 40
3424: PUSH
3425: EMPTY
3426: LIST
3427: LIST
3428: PUSH
3429: LD_INT 10
3431: PUSH
3432: LD_INT 25
3434: PUSH
3435: EMPTY
3436: LIST
3437: LIST
3438: PUSH
3439: LD_INT 20
3441: PUSH
3442: LD_INT 100
3444: PUSH
3445: EMPTY
3446: LIST
3447: LIST
3448: PUSH
3449: EMPTY
3450: LIST
3451: LIST
3452: LIST
3453: LIST
3454: LIST
3455: PPUSH
3456: CALL_OW 418
3460: PPUSH
3461: CALL_OW 1
3465: ST_TO_ADDR
// end ; if Count ( mpDepots ) then
3466: LD_EXP 14
3470: PPUSH
3471: CALL 13492 0 1
3475: IFFALSE 3674
// begin if mpGameType in [ GameTypeSurvival , GameTypeSurvivalHardcore , GameTypeArmsRace , GameTypeArmsArtifact ] then
3477: LD_EXP 3
3481: PUSH
3482: LD_INT 2
3484: PUSH
3485: LD_INT 8
3487: PUSH
3488: LD_INT 6
3490: PUSH
3491: LD_INT 7
3493: PUSH
3494: EMPTY
3495: LIST
3496: LIST
3497: LIST
3498: LIST
3499: IN
3500: IFFALSE 3520
// begin bc_level := 10 ;
3502: LD_ADDR_OWVAR 43
3506: PUSH
3507: LD_INT 10
3509: ST_TO_ADDR
// bc_type := b_warehouse ;
3510: LD_ADDR_OWVAR 42
3514: PUSH
3515: LD_INT 1
3517: ST_TO_ADDR
// end else
3518: GO 3536
// begin bc_level := 0 ;
3520: LD_ADDR_OWVAR 43
3524: PUSH
3525: LD_INT 0
3527: ST_TO_ADDR
// bc_type := b_depot ;
3528: LD_ADDR_OWVAR 42
3532: PUSH
3533: LD_INT 0
3535: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
3536: LD_ADDR_VAR 0 4
3540: PUSH
3541: LD_EXP 14
3545: PUSH
3546: LD_VAR 0 8
3550: ARRAY
3551: PUSH
3552: LD_INT 1
3554: ARRAY
3555: PPUSH
3556: LD_EXP 14
3560: PUSH
3561: LD_VAR 0 8
3565: ARRAY
3566: PUSH
3567: LD_INT 2
3569: ARRAY
3570: PPUSH
3571: LD_EXP 14
3575: PUSH
3576: LD_VAR 0 8
3580: ARRAY
3581: PUSH
3582: LD_INT 3
3584: ARRAY
3585: PPUSH
3586: CALL_OW 47
3590: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
3591: LD_VAR 0 4
3595: PPUSH
3596: LD_STRING @
3598: PUSH
3599: LD_VAR 0 7
3603: STR
3604: PPUSH
3605: CALL_OW 500
// if Count ( mpStartingResources ) then
3609: LD_EXP 15
3613: PPUSH
3614: CALL 13492 0 1
3618: IFFALSE 3672
// begin for j := 1 to mpStartingResources do
3620: LD_ADDR_VAR 0 3
3624: PUSH
3625: DOUBLE
3626: LD_INT 1
3628: DEC
3629: ST_TO_ADDR
3630: LD_EXP 15
3634: PUSH
3635: FOR_TO
3636: IFFALSE 3670
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
3638: LD_VAR 0 4
3642: PPUSH
3643: CALL_OW 274
3647: PPUSH
3648: LD_VAR 0 3
3652: PPUSH
3653: LD_EXP 15
3657: PUSH
3658: LD_VAR 0 3
3662: ARRAY
3663: PPUSH
3664: CALL_OW 277
3668: GO 3635
3670: POP
3671: POP
// end ; end else
3672: GO 3881
// if Count ( mpStartingResources ) then
3674: LD_EXP 15
3678: PPUSH
3679: CALL 13492 0 1
3683: IFFALSE 3881
// begin x := mpStartPos [ pos ] [ 1 ] ;
3685: LD_ADDR_VAR 0 5
3689: PUSH
3690: LD_EXP 21
3694: PUSH
3695: LD_VAR 0 8
3699: ARRAY
3700: PUSH
3701: LD_INT 1
3703: ARRAY
3704: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
3705: LD_ADDR_VAR 0 6
3709: PUSH
3710: LD_EXP 21
3714: PUSH
3715: LD_VAR 0 8
3719: ARRAY
3720: PUSH
3721: LD_INT 2
3723: ARRAY
3724: ST_TO_ADDR
// for j := 1 to mpStartingResources do
3725: LD_ADDR_VAR 0 3
3729: PUSH
3730: DOUBLE
3731: LD_INT 1
3733: DEC
3734: ST_TO_ADDR
3735: LD_EXP 15
3739: PUSH
3740: FOR_TO
3741: IFFALSE 3879
// begin resources := mpStartingResources [ j ] ;
3743: LD_ADDR_VAR 0 13
3747: PUSH
3748: LD_EXP 15
3752: PUSH
3753: LD_VAR 0 3
3757: ARRAY
3758: ST_TO_ADDR
// if resources = 0 then
3759: LD_VAR 0 13
3763: PUSH
3764: LD_INT 0
3766: EQUAL
3767: IFFALSE 3771
// continue ;
3769: GO 3740
// repeat if resources >= 50 then
3771: LD_VAR 0 13
3775: PUSH
3776: LD_INT 50
3778: GREATEREQUAL
3779: IFFALSE 3825
// begin CreateResourcesXYR ( j , 5 , x , y , 6 , false ) ;
3781: LD_VAR 0 3
3785: PPUSH
3786: LD_INT 5
3788: PPUSH
3789: LD_VAR 0 5
3793: PPUSH
3794: LD_VAR 0 6
3798: PPUSH
3799: LD_INT 6
3801: PPUSH
3802: LD_INT 0
3804: PPUSH
3805: CALL_OW 60
// resources := resources - 50 ;
3809: LD_ADDR_VAR 0 13
3813: PUSH
3814: LD_VAR 0 13
3818: PUSH
3819: LD_INT 50
3821: MINUS
3822: ST_TO_ADDR
// end else
3823: GO 3867
// begin CreateResourcesXYR ( j , resources div 10 , x , y , 6 , false ) ;
3825: LD_VAR 0 3
3829: PPUSH
3830: LD_VAR 0 13
3834: PUSH
3835: LD_INT 10
3837: DIV
3838: PPUSH
3839: LD_VAR 0 5
3843: PPUSH
3844: LD_VAR 0 6
3848: PPUSH
3849: LD_INT 6
3851: PPUSH
3852: LD_INT 0
3854: PPUSH
3855: CALL_OW 60
// resources := 0 ;
3859: LD_ADDR_VAR 0 13
3863: PUSH
3864: LD_INT 0
3866: ST_TO_ADDR
// end ; until resources <= 0 ;
3867: LD_VAR 0 13
3871: PUSH
3872: LD_INT 0
3874: LESSEQUAL
3875: IFFALSE 3771
// end ;
3877: GO 3740
3879: POP
3880: POP
// end ; if Count ( mpBuildings ) and not mpGameType in [ GameTypeSurvival , GameTypeSurvivalHardcore ] then
3881: LD_EXP 17
3885: PPUSH
3886: CALL 13492 0 1
3890: IFFALSE 3910
3892: PUSH
3893: LD_EXP 3
3897: PUSH
3898: LD_INT 2
3900: PUSH
3901: LD_INT 8
3903: PUSH
3904: EMPTY
3905: LIST
3906: LIST
3907: IN
3908: NOT
3909: AND
3910: IFFALSE 3988
// begin for j in mpBuildings [ pos ] do
3912: LD_ADDR_VAR 0 3
3916: PUSH
3917: LD_EXP 17
3921: PUSH
3922: LD_VAR 0 8
3926: ARRAY
3927: PUSH
3928: FOR_IN
3929: IFFALSE 3986
// begin bc_level := 0 ;
3931: LD_ADDR_OWVAR 43
3935: PUSH
3936: LD_INT 0
3938: ST_TO_ADDR
// bc_type := j [ 1 ] ;
3939: LD_ADDR_OWVAR 42
3943: PUSH
3944: LD_VAR 0 3
3948: PUSH
3949: LD_INT 1
3951: ARRAY
3952: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
3953: LD_VAR 0 3
3957: PUSH
3958: LD_INT 2
3960: ARRAY
3961: PPUSH
3962: LD_VAR 0 3
3966: PUSH
3967: LD_INT 3
3969: ARRAY
3970: PPUSH
3971: LD_VAR 0 3
3975: PUSH
3976: LD_INT 4
3978: ARRAY
3979: PPUSH
3980: CALL_OW 47
// end ;
3984: GO 3928
3986: POP
3987: POP
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
3988: LD_EXP 26
3992: IFFALSE 4012
3994: PUSH
3995: LD_INT 20
3997: PPUSH
3998: LD_VAR 0 7
4002: PPUSH
4003: CALL_OW 321
4007: PUSH
4008: LD_INT 1
4010: EQUAL
4011: AND
4012: IFFALSE 4029
// SetTech ( tech_SibDet , side , state_researched ) ;
4014: LD_INT 20
4016: PPUSH
4017: LD_VAR 0 7
4021: PPUSH
4022: LD_INT 2
4024: PPUSH
4025: CALL_OW 322
// if not mpArtifacts then
4029: LD_EXP 45
4033: NOT
4034: IFFALSE 4051
// SetTech ( tech_artifact , side , state_disabled ) ;
4036: LD_INT 24
4038: PPUSH
4039: LD_VAR 0 7
4043: PPUSH
4044: LD_INT 0
4046: PPUSH
4047: CALL_OW 322
// if mpSibBomb = 1 then
4051: LD_EXP 28
4055: PUSH
4056: LD_INT 1
4058: EQUAL
4059: IFFALSE 4078
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4061: LD_INT 25
4063: PPUSH
4064: LD_VAR 0 7
4068: PPUSH
4069: LD_INT 1
4071: PPUSH
4072: CALL_OW 322
// end else
4076: GO 4093
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4078: LD_INT 25
4080: PPUSH
4081: LD_VAR 0 7
4085: PPUSH
4086: LD_INT 0
4088: PPUSH
4089: CALL_OW 322
// end ; if mpVehicles then
4093: LD_EXP 36
4097: IFFALSE 4196
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
4099: LD_ADDR_VAR 0 3
4103: PUSH
4104: LD_VAR 0 7
4108: PPUSH
4109: LD_VAR 0 9
4113: PPUSH
4114: LD_EXP 36
4118: PPUSH
4119: CALL 5455 0 3
4123: PUSH
4124: FOR_IN
4125: IFFALSE 4194
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
4127: LD_VAR 0 3
4131: PPUSH
4132: LD_INT 0
4134: PPUSH
4135: LD_INT 5
4137: PPUSH
4138: CALL_OW 12
4142: PPUSH
4143: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4147: LD_VAR 0 3
4151: PPUSH
4152: LD_EXP 21
4156: PUSH
4157: LD_VAR 0 8
4161: ARRAY
4162: PUSH
4163: LD_INT 1
4165: ARRAY
4166: PPUSH
4167: LD_EXP 21
4171: PUSH
4172: LD_VAR 0 8
4176: ARRAY
4177: PUSH
4178: LD_INT 2
4180: ARRAY
4181: PPUSH
4182: LD_INT 12
4184: PPUSH
4185: LD_INT 0
4187: PPUSH
4188: CALL_OW 50
// end ;
4192: GO 4124
4194: POP
4195: POP
// end ; uc_nation := nation ;
4196: LD_ADDR_OWVAR 21
4200: PUSH
4201: LD_VAR 0 9
4205: ST_TO_ADDR
// if mpGameType in [ GameTypeArmsRace , GameTypeArmsArtifact ] and mpSidePositions [ i ] in [ 1 , 2 ] then
4206: LD_EXP 3
4210: PUSH
4211: LD_INT 6
4213: PUSH
4214: LD_INT 7
4216: PUSH
4217: EMPTY
4218: LIST
4219: LIST
4220: IN
4221: IFFALSE 4246
4223: PUSH
4224: LD_EXP 7
4228: PUSH
4229: LD_VAR 0 2
4233: ARRAY
4234: PUSH
4235: LD_INT 1
4237: PUSH
4238: LD_INT 2
4240: PUSH
4241: EMPTY
4242: LIST
4243: LIST
4244: IN
4245: AND
4246: IFFALSE 4294
// team := mpPrepareTeam ( side , nation , mpPeopleAmount + ( mpPeopleAmount div 2 ) , mpPeopleSkill + 1 ) else
4248: LD_ADDR_VAR 0 11
4252: PUSH
4253: LD_VAR 0 7
4257: PPUSH
4258: LD_VAR 0 9
4262: PPUSH
4263: LD_EXP 24
4267: PUSH
4268: LD_EXP 24
4272: PUSH
4273: LD_INT 2
4275: DIV
4276: PLUS
4277: PPUSH
4278: LD_EXP 25
4282: PUSH
4283: LD_INT 1
4285: PLUS
4286: PPUSH
4287: CALL 4910 0 4
4291: ST_TO_ADDR
4292: GO 4324
// team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
4294: LD_ADDR_VAR 0 11
4298: PUSH
4299: LD_VAR 0 7
4303: PPUSH
4304: LD_VAR 0 9
4308: PPUSH
4309: LD_EXP 24
4313: PPUSH
4314: LD_EXP 25
4318: PPUSH
4319: CALL 4910 0 4
4323: ST_TO_ADDR
// for j in team do
4324: LD_ADDR_VAR 0 3
4328: PUSH
4329: LD_VAR 0 11
4333: PUSH
4334: FOR_IN
4335: IFFALSE 4384
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4337: LD_VAR 0 3
4341: PPUSH
4342: LD_EXP 21
4346: PUSH
4347: LD_VAR 0 8
4351: ARRAY
4352: PUSH
4353: LD_INT 1
4355: ARRAY
4356: PPUSH
4357: LD_EXP 21
4361: PUSH
4362: LD_VAR 0 8
4366: ARRAY
4367: PUSH
4368: LD_INT 2
4370: ARRAY
4371: PPUSH
4372: LD_INT 12
4374: PPUSH
4375: LD_INT 0
4377: PPUSH
4378: CALL_OW 50
4382: GO 4334
4384: POP
4385: POP
// if mpApemans then
4386: LD_EXP 30
4390: IFFALSE 4496
// begin for j := 1 to mpApemans do
4392: LD_ADDR_VAR 0 3
4396: PUSH
4397: DOUBLE
4398: LD_INT 1
4400: DEC
4401: ST_TO_ADDR
4402: LD_EXP 30
4406: PUSH
4407: FOR_TO
4408: IFFALSE 4494
// begin PrepareApeman ( - 5 ) ;
4410: LD_INT 5
4412: NEG
4413: PPUSH
4414: CALL 45595 0 1
// ape := CreateHuman ;
4418: LD_ADDR_VAR 0 10
4422: PUSH
4423: CALL_OW 44
4427: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
4428: LD_ADDR_EXP 32
4432: PUSH
4433: LD_EXP 32
4437: PPUSH
4438: LD_VAR 0 8
4442: PPUSH
4443: LD_EXP 32
4447: PUSH
4448: LD_VAR 0 8
4452: ARRAY
4453: PPUSH
4454: LD_VAR 0 10
4458: PPUSH
4459: CALL 49468 0 2
4463: PPUSH
4464: CALL_OW 1
4468: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
4469: LD_VAR 0 10
4473: PPUSH
4474: LD_EXP 31
4478: PUSH
4479: LD_VAR 0 8
4483: ARRAY
4484: PPUSH
4485: LD_INT 0
4487: PPUSH
4488: CALL_OW 49
// end ;
4492: GO 4407
4494: POP
4495: POP
// end ; end ;
4496: GO 3038
4498: POP
4499: POP
// if not mpTeamGame then
4500: LD_EXP 11
4504: NOT
4505: IFFALSE 4603
// begin for i := 1 to 8 do
4507: LD_ADDR_VAR 0 2
4511: PUSH
4512: DOUBLE
4513: LD_INT 1
4515: DEC
4516: ST_TO_ADDR
4517: LD_INT 8
4519: PUSH
4520: FOR_TO
4521: IFFALSE 4599
// for j := 1 to 8 do
4523: LD_ADDR_VAR 0 3
4527: PUSH
4528: DOUBLE
4529: LD_INT 1
4531: DEC
4532: ST_TO_ADDR
4533: LD_INT 8
4535: PUSH
4536: FOR_TO
4537: IFFALSE 4595
// if i <> j then
4539: LD_VAR 0 2
4543: PUSH
4544: LD_VAR 0 3
4548: NONEQUAL
4549: IFFALSE 4573
// SetAttitude ( i , j , att_neutral , true ) else
4551: LD_VAR 0 2
4555: PPUSH
4556: LD_VAR 0 3
4560: PPUSH
4561: LD_INT 0
4563: PPUSH
4564: LD_INT 1
4566: PPUSH
4567: CALL_OW 80
4571: GO 4593
// SetAttitude ( i , j , att_friend , true ) ;
4573: LD_VAR 0 2
4577: PPUSH
4578: LD_VAR 0 3
4582: PPUSH
4583: LD_INT 1
4585: PPUSH
4586: LD_INT 1
4588: PPUSH
4589: CALL_OW 80
4593: GO 4536
4595: POP
4596: POP
4597: GO 4520
4599: POP
4600: POP
// end else
4601: GO 4778
// begin if mpSharedVision then
4603: LD_EXP 16
4607: IFFALSE 4672
// begin for i in mpTeams do
4609: LD_ADDR_VAR 0 2
4613: PUSH
4614: LD_EXP 10
4618: PUSH
4619: FOR_IN
4620: IFFALSE 4670
// for j := 2 to i do
4622: LD_ADDR_VAR 0 3
4626: PUSH
4627: DOUBLE
4628: LD_INT 2
4630: DEC
4631: ST_TO_ADDR
4632: LD_VAR 0 2
4636: PUSH
4637: FOR_TO
4638: IFFALSE 4666
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
4640: LD_VAR 0 2
4644: PUSH
4645: LD_VAR 0 3
4649: ARRAY
4650: PPUSH
4651: LD_VAR 0 2
4655: PUSH
4656: LD_INT 1
4658: ARRAY
4659: PPUSH
4660: CALL_OW 343
4664: GO 4637
4666: POP
4667: POP
4668: GO 4619
4670: POP
4671: POP
// end ; for i := 1 to 8 do
4672: LD_ADDR_VAR 0 2
4676: PUSH
4677: DOUBLE
4678: LD_INT 1
4680: DEC
4681: ST_TO_ADDR
4682: LD_INT 8
4684: PUSH
4685: FOR_TO
4686: IFFALSE 4776
// for j := 1 to 8 do
4688: LD_ADDR_VAR 0 3
4692: PUSH
4693: DOUBLE
4694: LD_INT 1
4696: DEC
4697: ST_TO_ADDR
4698: LD_INT 8
4700: PUSH
4701: FOR_TO
4702: IFFALSE 4772
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
4704: LD_EXP 8
4708: PUSH
4709: LD_VAR 0 2
4713: ARRAY
4714: PUSH
4715: LD_EXP 8
4719: PUSH
4720: LD_VAR 0 3
4724: ARRAY
4725: EQUAL
4726: IFFALSE 4750
// SetAttitude ( i , j , att_friend , true ) else
4728: LD_VAR 0 2
4732: PPUSH
4733: LD_VAR 0 3
4737: PPUSH
4738: LD_INT 1
4740: PPUSH
4741: LD_INT 1
4743: PPUSH
4744: CALL_OW 80
4748: GO 4770
// SetAttitude ( i , j , att_enemy , true ) ;
4750: LD_VAR 0 2
4754: PPUSH
4755: LD_VAR 0 3
4759: PPUSH
4760: LD_INT 2
4762: PPUSH
4763: LD_INT 1
4765: PPUSH
4766: CALL_OW 80
4770: GO 4701
4772: POP
4773: POP
4774: GO 4685
4776: POP
4777: POP
// end ; music_nat := mpSideNations [ your_side ] ;
4778: LD_ADDR_OWVAR 71
4782: PUSH
4783: LD_EXP 9
4787: PUSH
4788: LD_OWVAR 2
4792: ARRAY
4793: ST_TO_ADDR
// if IAmSpec then
4794: CALL_OW 531
4798: IFFALSE 4839
// begin FogOff ( true ) ;
4800: LD_INT 1
4802: PPUSH
4803: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
4807: LD_EXP 29
4811: PUSH
4812: LD_INT 1
4814: ARRAY
4815: PUSH
4816: LD_INT 2
4818: DIV
4819: PPUSH
4820: LD_EXP 29
4824: PUSH
4825: LD_INT 2
4827: ARRAY
4828: PUSH
4829: LD_INT 2
4831: DIV
4832: PPUSH
4833: CALL_OW 86
// end else
4837: GO 4885
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
4839: LD_EXP 21
4843: PUSH
4844: LD_EXP 7
4848: PUSH
4849: LD_OWVAR 2
4853: ARRAY
4854: ARRAY
4855: PUSH
4856: LD_INT 1
4858: ARRAY
4859: PPUSH
4860: LD_EXP 21
4864: PUSH
4865: LD_EXP 7
4869: PUSH
4870: LD_OWVAR 2
4874: ARRAY
4875: ARRAY
4876: PUSH
4877: LD_INT 2
4879: ARRAY
4880: PPUSH
4881: CALL_OW 86
// end ; BeginBuildUp ;
4885: CALL 5988 0 0
// enable ( mpActive ) ;
4889: LD_INT 100
4891: ENABLE_MARKED
// enable ( mpGameType ) ;
4892: LD_EXP 3
4896: ENABLE_MARKED
// mpGameActive := true ;
4897: LD_ADDR_EXP 39
4901: PUSH
4902: LD_INT 1
4904: ST_TO_ADDR
// end ;
4905: LD_VAR 0 1
4909: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class , commander ; begin
4910: LD_INT 0
4912: PPUSH
4913: PPUSH
4914: PPUSH
4915: PPUSH
4916: PPUSH
// result := [ ] ;
4917: LD_ADDR_VAR 0 5
4921: PUSH
4922: EMPTY
4923: ST_TO_ADDR
// class := class_soldier ;
4924: LD_ADDR_VAR 0 8
4928: PUSH
4929: LD_INT 1
4931: ST_TO_ADDR
// uc_side := side ;
4932: LD_ADDR_OWVAR 20
4936: PUSH
4937: LD_VAR 0 1
4941: ST_TO_ADDR
// uc_nation := nation ;
4942: LD_ADDR_OWVAR 21
4946: PUSH
4947: LD_VAR 0 2
4951: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
4952: LD_ADDR_OWVAR 26
4956: PUSH
4957: LD_OWVAR 19
4961: PUSH
4962: LD_VAR 0 1
4966: ARRAY
4967: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
4968: LD_INT 1
4970: PPUSH
4971: LD_INT 2
4973: PPUSH
4974: CALL_OW 12
4978: PPUSH
4979: LD_VAR 0 8
4983: PPUSH
4984: LD_VAR 0 4
4988: PUSH
4989: LD_INT 2
4991: PLUS
4992: PPUSH
4993: CALL_OW 380
// hc_importance := 105 ;
4997: LD_ADDR_OWVAR 32
5001: PUSH
5002: LD_INT 105
5004: ST_TO_ADDR
// if Multiplayer then
5005: LD_OWVAR 4
5009: IFFALSE 5049
// begin hc_gallery := MULTIAVATARS ;
5011: LD_ADDR_OWVAR 33
5015: PUSH
5016: LD_STRING MULTIAVATARS
5018: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
5019: LD_ADDR_OWVAR 34
5023: PUSH
5024: LD_VAR 0 1
5028: PPUSH
5029: CALL_OW 525
5033: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
5034: LD_ADDR_OWVAR 27
5038: PUSH
5039: LD_VAR 0 1
5043: PPUSH
5044: CALL_OW 526
5048: ST_TO_ADDR
// end ; commander := CreateHuman ;
5049: LD_ADDR_VAR 0 9
5053: PUSH
5054: CALL_OW 44
5058: ST_TO_ADDR
// result := Join ( result , commander ) ;
5059: LD_ADDR_VAR 0 5
5063: PUSH
5064: LD_VAR 0 5
5068: PPUSH
5069: LD_VAR 0 9
5073: PPUSH
5074: CALL 49468 0 2
5078: ST_TO_ADDR
// mpCommanders := Replace ( mpCommanders , side , commander ) ;
5079: LD_ADDR_EXP 41
5083: PUSH
5084: LD_EXP 41
5088: PPUSH
5089: LD_VAR 0 1
5093: PPUSH
5094: LD_VAR 0 9
5098: PPUSH
5099: CALL_OW 1
5103: ST_TO_ADDR
// if mpTeamPreset then
5104: LD_LOC 1
5108: IFFALSE 5204
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
5110: LD_LOC 1
5114: PUSH
5115: LD_INT 1
5117: ARRAY
5118: PPUSH
5119: LD_VAR 0 5
5123: PUSH
5124: LD_VAR 0 5
5128: ARRAY
5129: PPUSH
5130: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
5134: LD_VAR 0 5
5138: PUSH
5139: LD_VAR 0 5
5143: ARRAY
5144: PPUSH
5145: LD_INT 1
5147: PPUSH
5148: LD_LOC 1
5152: PUSH
5153: LD_INT 1
5155: ARRAY
5156: PPUSH
5157: LD_INT 1
5159: PPUSH
5160: CALL_OW 260
5164: PPUSH
5165: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
5169: LD_VAR 0 5
5173: PUSH
5174: LD_VAR 0 5
5178: ARRAY
5179: PPUSH
5180: LD_INT 2
5182: PPUSH
5183: LD_LOC 1
5187: PUSH
5188: LD_INT 1
5190: ARRAY
5191: PPUSH
5192: LD_INT 2
5194: PPUSH
5195: CALL_OW 260
5199: PPUSH
5200: CALL_OW 239
// end ; InitHc_All ( ) ;
5204: CALL_OW 584
// class := 2 ;
5208: LD_ADDR_VAR 0 8
5212: PUSH
5213: LD_INT 2
5215: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
5216: LD_ADDR_VAR 0 6
5220: PUSH
5221: DOUBLE
5222: LD_INT 1
5224: DEC
5225: ST_TO_ADDR
5226: LD_VAR 0 3
5230: PUSH
5231: LD_INT 1
5233: MINUS
5234: PUSH
5235: FOR_TO
5236: IFFALSE 5431
// begin PrepareHuman ( false , class , skill ) ;
5238: LD_INT 0
5240: PPUSH
5241: LD_VAR 0 8
5245: PPUSH
5246: LD_VAR 0 4
5250: PPUSH
5251: CALL_OW 380
// un := CreateHuman ;
5255: LD_ADDR_VAR 0 7
5259: PUSH
5260: CALL_OW 44
5264: ST_TO_ADDR
// result := Join ( result , un ) ;
5265: LD_ADDR_VAR 0 5
5269: PUSH
5270: LD_VAR 0 5
5274: PPUSH
5275: LD_VAR 0 7
5279: PPUSH
5280: CALL 49468 0 2
5284: ST_TO_ADDR
// if Count ( mpTeamPreset ) >= amount then
5285: LD_LOC 1
5289: PPUSH
5290: CALL 13492 0 1
5294: PUSH
5295: LD_VAR 0 3
5299: GREATEREQUAL
5300: IFFALSE 5396
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
5302: LD_LOC 1
5306: PUSH
5307: LD_VAR 0 6
5311: PUSH
5312: LD_INT 1
5314: PLUS
5315: ARRAY
5316: PPUSH
5317: LD_VAR 0 7
5321: PPUSH
5322: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
5326: LD_VAR 0 7
5330: PPUSH
5331: LD_INT 1
5333: PPUSH
5334: LD_LOC 1
5338: PUSH
5339: LD_VAR 0 6
5343: PUSH
5344: LD_INT 1
5346: PLUS
5347: ARRAY
5348: PPUSH
5349: LD_INT 1
5351: PPUSH
5352: CALL_OW 260
5356: PPUSH
5357: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
5361: LD_VAR 0 7
5365: PPUSH
5366: LD_INT 2
5368: PPUSH
5369: LD_LOC 1
5373: PUSH
5374: LD_VAR 0 6
5378: PUSH
5379: LD_INT 1
5381: PLUS
5382: ARRAY
5383: PPUSH
5384: LD_INT 2
5386: PPUSH
5387: CALL_OW 260
5391: PPUSH
5392: CALL_OW 239
// end ; class := Inc ( class ) ;
5396: LD_ADDR_VAR 0 8
5400: PUSH
5401: LD_VAR 0 8
5405: PPUSH
5406: CALL 50841 0 1
5410: ST_TO_ADDR
// if class = 5 then
5411: LD_VAR 0 8
5415: PUSH
5416: LD_INT 5
5418: EQUAL
5419: IFFALSE 5429
// class := 1 ;
5421: LD_ADDR_VAR 0 8
5425: PUSH
5426: LD_INT 1
5428: ST_TO_ADDR
// end ;
5429: GO 5235
5431: POP
5432: POP
// if not mpTeamPreset then
5433: LD_LOC 1
5437: NOT
5438: IFFALSE 5450
// mpTeamPreset := result ;
5440: LD_ADDR_LOC 1
5444: PUSH
5445: LD_VAR 0 5
5449: ST_TO_ADDR
// end ;
5450: LD_VAR 0 5
5454: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
5455: LD_INT 0
5457: PPUSH
5458: PPUSH
// result := [ ] ;
5459: LD_ADDR_VAR 0 4
5463: PUSH
5464: EMPTY
5465: ST_TO_ADDR
// if not vehicles then
5466: LD_VAR 0 3
5470: NOT
5471: IFFALSE 5475
// exit ;
5473: GO 5689
// for i := 1 to vehicles [ nation ] do
5475: LD_ADDR_VAR 0 5
5479: PUSH
5480: DOUBLE
5481: LD_INT 1
5483: DEC
5484: ST_TO_ADDR
5485: LD_VAR 0 3
5489: PUSH
5490: LD_VAR 0 2
5494: ARRAY
5495: PUSH
5496: FOR_TO
5497: IFFALSE 5687
// begin uc_side := side ;
5499: LD_ADDR_OWVAR 20
5503: PUSH
5504: LD_VAR 0 1
5508: ST_TO_ADDR
// if Count ( vehicles [ nation ] [ i ] ) > 4 then
5509: LD_VAR 0 3
5513: PUSH
5514: LD_VAR 0 2
5518: ARRAY
5519: PUSH
5520: LD_VAR 0 5
5524: ARRAY
5525: PPUSH
5526: CALL 13492 0 1
5530: PUSH
5531: LD_INT 4
5533: GREATER
5534: IFFALSE 5564
// uc_nation := vehicles [ nation ] [ i ] [ 5 ] else
5536: LD_ADDR_OWVAR 21
5540: PUSH
5541: LD_VAR 0 3
5545: PUSH
5546: LD_VAR 0 2
5550: ARRAY
5551: PUSH
5552: LD_VAR 0 5
5556: ARRAY
5557: PUSH
5558: LD_INT 5
5560: ARRAY
5561: ST_TO_ADDR
5562: GO 5574
// uc_nation := nation ;
5564: LD_ADDR_OWVAR 21
5568: PUSH
5569: LD_VAR 0 2
5573: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
5574: LD_VAR 0 3
5578: PUSH
5579: LD_VAR 0 2
5583: ARRAY
5584: PUSH
5585: LD_VAR 0 5
5589: ARRAY
5590: PUSH
5591: LD_INT 1
5593: ARRAY
5594: PPUSH
5595: LD_VAR 0 3
5599: PUSH
5600: LD_VAR 0 2
5604: ARRAY
5605: PUSH
5606: LD_VAR 0 5
5610: ARRAY
5611: PUSH
5612: LD_INT 2
5614: ARRAY
5615: PPUSH
5616: LD_VAR 0 3
5620: PUSH
5621: LD_VAR 0 2
5625: ARRAY
5626: PUSH
5627: LD_VAR 0 5
5631: ARRAY
5632: PUSH
5633: LD_INT 3
5635: ARRAY
5636: PPUSH
5637: LD_VAR 0 3
5641: PUSH
5642: LD_VAR 0 2
5646: ARRAY
5647: PUSH
5648: LD_VAR 0 5
5652: ARRAY
5653: PUSH
5654: LD_INT 4
5656: ARRAY
5657: PPUSH
5658: LD_INT 80
5660: PPUSH
5661: CALL 16288 0 5
// result := Join ( result , CreateVehicle ) ;
5665: LD_ADDR_VAR 0 4
5669: PUSH
5670: LD_VAR 0 4
5674: PPUSH
5675: CALL_OW 45
5679: PPUSH
5680: CALL 49468 0 2
5684: ST_TO_ADDR
// end ;
5685: GO 5496
5687: POP
5688: POP
// end ;
5689: LD_VAR 0 4
5693: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
5694: LD_INT 0
5696: PPUSH
5697: PPUSH
// for i in mpBattleFlags do
5698: LD_ADDR_VAR 0 3
5702: PUSH
5703: LD_EXP 23
5707: PUSH
5708: FOR_IN
5709: IFFALSE 5786
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
5711: LD_VAR 0 3
5715: PPUSH
5716: LD_INT 1
5718: PUSH
5719: LD_VAR 0 1
5723: PUSH
5724: EMPTY
5725: LIST
5726: LIST
5727: PUSH
5728: LD_INT 2
5730: PUSH
5731: LD_VAR 0 1
5735: PUSH
5736: LD_REAL  7.00000000000000E-0001
5739: MUL
5740: PUSH
5741: EMPTY
5742: LIST
5743: LIST
5744: PUSH
5745: LD_INT 3
5747: PUSH
5748: LD_VAR 0 1
5752: PUSH
5753: LD_REAL  4.00000000000000E-0001
5756: MUL
5757: PUSH
5758: EMPTY
5759: LIST
5760: LIST
5761: PUSH
5762: LD_INT 20
5764: PUSH
5765: LD_VAR 0 1
5769: PUSH
5770: EMPTY
5771: LIST
5772: LIST
5773: PUSH
5774: EMPTY
5775: LIST
5776: LIST
5777: LIST
5778: LIST
5779: PPUSH
5780: CALL_OW 423
5784: GO 5708
5786: POP
5787: POP
// end ;
5788: LD_VAR 0 2
5792: RET
// every 0 0$1 trigger mpActive do var i , strength ;
5793: LD_INT 100
5795: IFFALSE 5890
5797: GO 5799
5799: DISABLE
5800: LD_INT 0
5802: PPUSH
5803: PPUSH
// begin if mpBattleFlag <= 0 then
5804: LD_EXP 22
5808: PUSH
5809: LD_INT 0
5811: LESSEQUAL
5812: IFFALSE 5816
// exit ;
5814: GO 5890
// strength := 100 ;
5816: LD_ADDR_VAR 0 2
5820: PUSH
5821: LD_INT 100
5823: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
5824: LD_EXP 22
5828: PPUSH
5829: CALL_OW 67
// strength := Dec ( strength ) ;
5833: LD_ADDR_VAR 0 2
5837: PUSH
5838: LD_VAR 0 2
5842: PPUSH
5843: CALL 50863 0 1
5847: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
5848: LD_VAR 0 2
5852: PPUSH
5853: CALL 5694 0 1
// until not strength ;
5857: LD_VAR 0 2
5861: NOT
5862: IFFALSE 5824
// for i in mpBattleFlags do
5864: LD_ADDR_VAR 0 1
5868: PUSH
5869: LD_EXP 23
5873: PUSH
5874: FOR_IN
5875: IFFALSE 5888
// KillBattleFlag ( i ) ;
5877: LD_VAR 0 1
5881: PPUSH
5882: CALL_OW 419
5886: GO 5874
5888: POP
5889: POP
// end ;
5890: PPOPN 2
5892: END
// every 0 0$1 marked mpActive do var side , tmp ;
5893: GO 5895
5895: DISABLE
5896: LD_INT 0
5898: PPUSH
5899: PPUSH
// begin if mpSibBomb <= 1 then
5900: LD_EXP 28
5904: PUSH
5905: LD_INT 1
5907: LESSEQUAL
5908: IFFALSE 5912
// exit ;
5910: GO 5985
// tmp := mpSibBomb ;
5912: LD_ADDR_VAR 0 2
5916: PUSH
5917: LD_EXP 28
5921: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5922: LD_INT 35
5924: PPUSH
5925: CALL_OW 67
// tmp := tmp - 0 0$1 ;
5929: LD_ADDR_VAR 0 2
5933: PUSH
5934: LD_VAR 0 2
5938: PUSH
5939: LD_INT 35
5941: MINUS
5942: ST_TO_ADDR
// until not tmp ;
5943: LD_VAR 0 2
5947: NOT
5948: IFFALSE 5922
// for side := 1 to 8 do
5950: LD_ADDR_VAR 0 1
5954: PUSH
5955: DOUBLE
5956: LD_INT 1
5958: DEC
5959: ST_TO_ADDR
5960: LD_INT 8
5962: PUSH
5963: FOR_TO
5964: IFFALSE 5983
// SetTech ( tech_SibFiss , side , state_enabled ) ;
5966: LD_INT 25
5968: PPUSH
5969: LD_VAR 0 1
5973: PPUSH
5974: LD_INT 1
5976: PPUSH
5977: CALL_OW 322
5981: GO 5963
5983: POP
5984: POP
// end ;
5985: PPOPN 2
5987: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
5988: LD_INT 0
5990: PPUSH
5991: PPUSH
5992: PPUSH
// mpBuildUpTimeDelay := 0 ;
5993: LD_ADDR_EXP 48
5997: PUSH
5998: LD_INT 0
6000: ST_TO_ADDR
// if not mpBuildUpTime then
6001: LD_EXP 20
6005: NOT
6006: IFFALSE 6010
// exit ;
6008: GO 6199
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
6010: LD_ADDR_EXP 48
6014: PUSH
6015: LD_INT 8400
6017: PUSH
6018: LD_INT 2100
6020: PUSH
6021: LD_EXP 20
6025: MUL
6026: PLUS
6027: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
6028: LD_ADDR_EXP 49
6032: PUSH
6033: LD_INT 1
6035: ST_TO_ADDR
// for i := 1 to 8 do
6036: LD_ADDR_VAR 0 2
6040: PUSH
6041: DOUBLE
6042: LD_INT 1
6044: DEC
6045: ST_TO_ADDR
6046: LD_INT 8
6048: PUSH
6049: FOR_TO
6050: IFFALSE 6197
// if mpSidePositions [ i ] then
6052: LD_EXP 7
6056: PUSH
6057: LD_VAR 0 2
6061: ARRAY
6062: IFFALSE 6195
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
6064: LD_EXP 19
6068: PUSH
6069: LD_EXP 7
6073: PUSH
6074: LD_VAR 0 2
6078: ARRAY
6079: ARRAY
6080: PPUSH
6081: LD_INT 5
6083: PPUSH
6084: CALL_OW 424
// for j := 1 to 8 do
6088: LD_ADDR_VAR 0 3
6092: PUSH
6093: DOUBLE
6094: LD_INT 1
6096: DEC
6097: ST_TO_ADDR
6098: LD_INT 8
6100: PUSH
6101: FOR_TO
6102: IFFALSE 6193
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6104: LD_EXP 7
6108: PUSH
6109: LD_VAR 0 3
6113: ARRAY
6114: IFFALSE 6163
6116: PUSH
6117: LD_EXP 8
6121: PUSH
6122: LD_VAR 0 2
6126: ARRAY
6127: PUSH
6128: LD_EXP 8
6132: PUSH
6133: LD_VAR 0 3
6137: ARRAY
6138: NONEQUAL
6139: IFTRUE 6162
6141: PUSH
6142: LD_EXP 11
6146: NOT
6147: IFFALSE 6161
6149: PUSH
6150: LD_VAR 0 2
6154: PUSH
6155: LD_VAR 0 3
6159: NONEQUAL
6160: AND
6161: OR
6162: AND
6163: IFFALSE 6191
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6165: LD_VAR 0 3
6169: PPUSH
6170: LD_EXP 19
6174: PUSH
6175: LD_EXP 7
6179: PUSH
6180: LD_VAR 0 2
6184: ARRAY
6185: ARRAY
6186: PPUSH
6187: CALL_OW 333
6191: GO 6101
6193: POP
6194: POP
// end ;
6195: GO 6049
6197: POP
6198: POP
// end ;
6199: LD_VAR 0 1
6203: RET
// function EndBuildUp ; var i , j ; begin
6204: LD_INT 0
6206: PPUSH
6207: PPUSH
6208: PPUSH
// mpBuildUpTimeActive := false ;
6209: LD_ADDR_EXP 49
6213: PUSH
6214: LD_INT 0
6216: ST_TO_ADDR
// for i := 1 to 8 do
6217: LD_ADDR_VAR 0 2
6221: PUSH
6222: DOUBLE
6223: LD_INT 1
6225: DEC
6226: ST_TO_ADDR
6227: LD_INT 8
6229: PUSH
6230: FOR_TO
6231: IFFALSE 6378
// if mpSidePositions [ i ] then
6233: LD_EXP 7
6237: PUSH
6238: LD_VAR 0 2
6242: ARRAY
6243: IFFALSE 6376
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
6245: LD_EXP 19
6249: PUSH
6250: LD_EXP 7
6254: PUSH
6255: LD_VAR 0 2
6259: ARRAY
6260: ARRAY
6261: PPUSH
6262: LD_INT 0
6264: PPUSH
6265: CALL_OW 424
// for j := 1 to 8 do
6269: LD_ADDR_VAR 0 3
6273: PUSH
6274: DOUBLE
6275: LD_INT 1
6277: DEC
6278: ST_TO_ADDR
6279: LD_INT 8
6281: PUSH
6282: FOR_TO
6283: IFFALSE 6374
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6285: LD_EXP 7
6289: PUSH
6290: LD_VAR 0 3
6294: ARRAY
6295: IFFALSE 6344
6297: PUSH
6298: LD_EXP 8
6302: PUSH
6303: LD_VAR 0 2
6307: ARRAY
6308: PUSH
6309: LD_EXP 8
6313: PUSH
6314: LD_VAR 0 3
6318: ARRAY
6319: NONEQUAL
6320: IFTRUE 6343
6322: PUSH
6323: LD_EXP 11
6327: NOT
6328: IFFALSE 6342
6330: PUSH
6331: LD_VAR 0 2
6335: PUSH
6336: LD_VAR 0 3
6340: NONEQUAL
6341: AND
6342: OR
6343: AND
6344: IFFALSE 6372
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6346: LD_VAR 0 3
6350: PPUSH
6351: LD_EXP 19
6355: PUSH
6356: LD_EXP 7
6360: PUSH
6361: LD_VAR 0 2
6365: ARRAY
6366: ARRAY
6367: PPUSH
6368: CALL_OW 334
6372: GO 6282
6374: POP
6375: POP
// end ;
6376: GO 6230
6378: POP
6379: POP
// end ;
6380: LD_VAR 0 1
6384: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
6385: LD_EXP 49
6389: IFFALSE 6568
6391: GO 6393
6393: DISABLE
6394: LD_INT 0
6396: PPUSH
6397: PPUSH
// begin for i := 1 to 8 do
6398: LD_ADDR_VAR 0 1
6402: PUSH
6403: DOUBLE
6404: LD_INT 1
6406: DEC
6407: ST_TO_ADDR
6408: LD_INT 8
6410: PUSH
6411: FOR_TO
6412: IFFALSE 6565
// if mpSidePositions [ i ] then
6414: LD_EXP 7
6418: PUSH
6419: LD_VAR 0 1
6423: ARRAY
6424: IFFALSE 6563
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
6426: LD_ADDR_VAR 0 2
6430: PUSH
6431: LD_EXP 19
6435: PUSH
6436: LD_EXP 7
6440: PUSH
6441: LD_VAR 0 1
6445: ARRAY
6446: ARRAY
6447: PPUSH
6448: LD_INT 2
6450: PUSH
6451: LD_INT 21
6453: PUSH
6454: LD_INT 1
6456: PUSH
6457: EMPTY
6458: LIST
6459: LIST
6460: PUSH
6461: LD_INT 21
6463: PUSH
6464: LD_INT 2
6466: PUSH
6467: EMPTY
6468: LIST
6469: LIST
6470: PUSH
6471: EMPTY
6472: LIST
6473: LIST
6474: LIST
6475: PUSH
6476: LD_INT 22
6478: PUSH
6479: LD_OWVAR 2
6483: PUSH
6484: EMPTY
6485: LIST
6486: LIST
6487: PUSH
6488: EMPTY
6489: LIST
6490: LIST
6491: PPUSH
6492: CALL_OW 70
6496: PUSH
6497: FOR_IN
6498: IFFALSE 6561
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
6500: LD_EXP 8
6504: PUSH
6505: LD_VAR 0 1
6509: ARRAY
6510: PUSH
6511: LD_EXP 8
6515: PUSH
6516: LD_OWVAR 2
6520: ARRAY
6521: NONEQUAL
6522: IFTRUE 6545
6524: PUSH
6525: LD_EXP 11
6529: NOT
6530: IFFALSE 6544
6532: PUSH
6533: LD_VAR 0 1
6537: PUSH
6538: LD_OWVAR 2
6542: NONEQUAL
6543: AND
6544: OR
6545: IFFALSE 6559
// ComMoveToArea ( un , BuildUpEscape ) ;
6547: LD_VAR 0 2
6551: PPUSH
6552: LD_INT 8
6554: PPUSH
6555: CALL_OW 113
6559: GO 6497
6561: POP
6562: POP
6563: GO 6411
6565: POP
6566: POP
// enable ;
6567: ENABLE
// end ;
6568: PPOPN 2
6570: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
6571: LD_EXP 20
6575: IFFALSE 6625
6577: GO 6579
6579: DISABLE
6580: LD_INT 0
6582: PPUSH
// begin tmp := mpBuildUpTime ;
6583: LD_ADDR_VAR 0 1
6587: PUSH
6588: LD_EXP 20
6592: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6593: LD_INT 35
6595: PPUSH
6596: CALL_OW 67
// tmp := tmp - 0 0$1 ;
6600: LD_ADDR_VAR 0 1
6604: PUSH
6605: LD_VAR 0 1
6609: PUSH
6610: LD_INT 35
6612: MINUS
6613: ST_TO_ADDR
// until not tmp ;
6614: LD_VAR 0 1
6618: NOT
6619: IFFALSE 6593
// EndBuildUp ;
6621: CALL 6204 0 0
// end ;
6625: PPOPN 1
6627: END
// every 0 0$1 trigger mpActive marked mpWin do
6628: LD_INT 100
6630: IFFALSE 6664
6632: GO 6634
6634: DISABLE
// begin if IAmServer then
6635: CALL_OW 518
6639: IFFALSE 6648
// wait ( 0 0$3 ) ;
6641: LD_INT 105
6643: PPUSH
6644: CALL_OW 67
// if Multiplayer then
6648: LD_OWVAR 4
6652: IFFALSE 6660
// YouWinInMultiplayer else
6654: CALL_OW 106
6658: GO 6664
// YouWin ;
6660: CALL_OW 103
// end ;
6664: END
// export function HasPowerByGameType ( gameType , side ) ; begin
6665: LD_INT 0
6667: PPUSH
// result := false ;
6668: LD_ADDR_VAR 0 3
6672: PUSH
6673: LD_INT 0
6675: ST_TO_ADDR
// case gameType of GameTypeNormal , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact :
6676: LD_VAR 0 1
6680: PUSH
6681: LD_INT 1
6683: DOUBLE
6684: EQUAL
6685: IFTRUE 6707
6687: LD_INT 5
6689: DOUBLE
6690: EQUAL
6691: IFTRUE 6707
6693: LD_INT 6
6695: DOUBLE
6696: EQUAL
6697: IFTRUE 6707
6699: LD_INT 7
6701: DOUBLE
6702: EQUAL
6703: IFTRUE 6707
6705: GO 6780
6707: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
6708: LD_ADDR_VAR 0 3
6712: PUSH
6713: LD_INT 22
6715: PUSH
6716: LD_VAR 0 2
6720: PUSH
6721: EMPTY
6722: LIST
6723: LIST
6724: PUSH
6725: LD_INT 2
6727: PUSH
6728: LD_INT 21
6730: PUSH
6731: LD_INT 1
6733: PUSH
6734: EMPTY
6735: LIST
6736: LIST
6737: PUSH
6738: LD_INT 33
6740: PUSH
6741: LD_INT 3
6743: PUSH
6744: EMPTY
6745: LIST
6746: LIST
6747: PUSH
6748: LD_INT 33
6750: PUSH
6751: LD_INT 5
6753: PUSH
6754: EMPTY
6755: LIST
6756: LIST
6757: PUSH
6758: EMPTY
6759: LIST
6760: LIST
6761: LIST
6762: LIST
6763: PUSH
6764: EMPTY
6765: LIST
6766: LIST
6767: PPUSH
6768: CALL_OW 69
6772: PPUSH
6773: CALL 13492 0 1
6777: ST_TO_ADDR
// end ; GameTypeSurvival :
6778: GO 7176
6780: LD_INT 2
6782: DOUBLE
6783: EQUAL
6784: IFTRUE 6788
6786: GO 6918
6788: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
6789: LD_ADDR_VAR 0 3
6793: PUSH
6794: LD_INT 22
6796: PUSH
6797: LD_VAR 0 2
6801: PUSH
6802: EMPTY
6803: LIST
6804: LIST
6805: PUSH
6806: LD_INT 2
6808: PUSH
6809: LD_INT 30
6811: PUSH
6812: LD_INT 0
6814: PUSH
6815: EMPTY
6816: LIST
6817: LIST
6818: PUSH
6819: LD_INT 30
6821: PUSH
6822: LD_INT 1
6824: PUSH
6825: EMPTY
6826: LIST
6827: LIST
6828: PUSH
6829: EMPTY
6830: LIST
6831: LIST
6832: LIST
6833: PUSH
6834: EMPTY
6835: LIST
6836: LIST
6837: PPUSH
6838: CALL_OW 69
6842: PPUSH
6843: CALL 13492 0 1
6847: IFFALSE 6915
6849: PUSH
6850: LD_INT 22
6852: PUSH
6853: LD_VAR 0 2
6857: PUSH
6858: EMPTY
6859: LIST
6860: LIST
6861: PUSH
6862: LD_INT 2
6864: PUSH
6865: LD_INT 21
6867: PUSH
6868: LD_INT 1
6870: PUSH
6871: EMPTY
6872: LIST
6873: LIST
6874: PUSH
6875: LD_INT 33
6877: PUSH
6878: LD_INT 3
6880: PUSH
6881: EMPTY
6882: LIST
6883: LIST
6884: PUSH
6885: LD_INT 33
6887: PUSH
6888: LD_INT 5
6890: PUSH
6891: EMPTY
6892: LIST
6893: LIST
6894: PUSH
6895: EMPTY
6896: LIST
6897: LIST
6898: LIST
6899: LIST
6900: PUSH
6901: EMPTY
6902: LIST
6903: LIST
6904: PPUSH
6905: CALL_OW 69
6909: PPUSH
6910: CALL 13492 0 1
6914: AND
6915: ST_TO_ADDR
// end ; GameTypeSurvivalHardcore :
6916: GO 7176
6918: LD_INT 8
6920: DOUBLE
6921: EQUAL
6922: IFTRUE 6926
6924: GO 7075
6926: POP
// begin result := IsLive ( mpCommanders [ side ] ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
6927: LD_ADDR_VAR 0 3
6931: PUSH
6932: LD_EXP 41
6936: PUSH
6937: LD_VAR 0 2
6941: ARRAY
6942: PPUSH
6943: CALL_OW 300
6947: IFFALSE 7004
6949: PUSH
6950: LD_INT 22
6952: PUSH
6953: LD_VAR 0 2
6957: PUSH
6958: EMPTY
6959: LIST
6960: LIST
6961: PUSH
6962: LD_INT 2
6964: PUSH
6965: LD_INT 30
6967: PUSH
6968: LD_INT 0
6970: PUSH
6971: EMPTY
6972: LIST
6973: LIST
6974: PUSH
6975: LD_INT 30
6977: PUSH
6978: LD_INT 1
6980: PUSH
6981: EMPTY
6982: LIST
6983: LIST
6984: PUSH
6985: EMPTY
6986: LIST
6987: LIST
6988: LIST
6989: PUSH
6990: EMPTY
6991: LIST
6992: LIST
6993: PPUSH
6994: CALL_OW 69
6998: PPUSH
6999: CALL 13492 0 1
7003: AND
7004: IFFALSE 7072
7006: PUSH
7007: LD_INT 22
7009: PUSH
7010: LD_VAR 0 2
7014: PUSH
7015: EMPTY
7016: LIST
7017: LIST
7018: PUSH
7019: LD_INT 2
7021: PUSH
7022: LD_INT 21
7024: PUSH
7025: LD_INT 1
7027: PUSH
7028: EMPTY
7029: LIST
7030: LIST
7031: PUSH
7032: LD_INT 33
7034: PUSH
7035: LD_INT 3
7037: PUSH
7038: EMPTY
7039: LIST
7040: LIST
7041: PUSH
7042: LD_INT 33
7044: PUSH
7045: LD_INT 5
7047: PUSH
7048: EMPTY
7049: LIST
7050: LIST
7051: PUSH
7052: EMPTY
7053: LIST
7054: LIST
7055: LIST
7056: LIST
7057: PUSH
7058: EMPTY
7059: LIST
7060: LIST
7061: PPUSH
7062: CALL_OW 69
7066: PPUSH
7067: CALL 13492 0 1
7071: AND
7072: ST_TO_ADDR
// end ; GameTypeKing :
7073: GO 7176
7075: LD_INT 3
7077: DOUBLE
7078: EQUAL
7079: IFTRUE 7083
7081: GO 7175
7083: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
7084: LD_ADDR_VAR 0 3
7088: PUSH
7089: LD_INT 22
7091: PUSH
7092: LD_VAR 0 2
7096: PUSH
7097: EMPTY
7098: LIST
7099: LIST
7100: PUSH
7101: LD_INT 2
7103: PUSH
7104: LD_INT 21
7106: PUSH
7107: LD_INT 1
7109: PUSH
7110: EMPTY
7111: LIST
7112: LIST
7113: PUSH
7114: LD_INT 33
7116: PUSH
7117: LD_INT 3
7119: PUSH
7120: EMPTY
7121: LIST
7122: LIST
7123: PUSH
7124: LD_INT 33
7126: PUSH
7127: LD_INT 5
7129: PUSH
7130: EMPTY
7131: LIST
7132: LIST
7133: PUSH
7134: EMPTY
7135: LIST
7136: LIST
7137: LIST
7138: LIST
7139: PUSH
7140: EMPTY
7141: LIST
7142: LIST
7143: PPUSH
7144: CALL_OW 69
7148: PPUSH
7149: CALL 13492 0 1
7153: IFFALSE 7172
7155: PUSH
7156: LD_VAR 0 2
7160: PPUSH
7161: CALL 62480 0 1
7165: PUSH
7166: LD_EXP 35
7170: LESS
7171: AND
7172: ST_TO_ADDR
// end ; end ;
7173: GO 7176
7175: POP
// end ;
7176: LD_VAR 0 3
7180: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
7181: LD_INT 100
7183: IFFALSE 7413
7185: GO 7187
7187: DISABLE
7188: LD_INT 0
7190: PPUSH
7191: PPUSH
// begin if Multiplayer then
7192: LD_OWVAR 4
7196: IFFALSE 7204
// SetPlayerSpectator ( ) else
7198: CALL_OW 572
7202: GO 7213
// FogOff ( your_side ) ;
7204: LD_OWVAR 2
7208: PPUSH
7209: CALL_OW 344
// repeat gameIsOn := false ;
7213: LD_ADDR_VAR 0 1
7217: PUSH
7218: LD_INT 0
7220: ST_TO_ADDR
// for i := 1 to 8 do
7221: LD_ADDR_VAR 0 2
7225: PUSH
7226: DOUBLE
7227: LD_INT 1
7229: DEC
7230: ST_TO_ADDR
7231: LD_INT 8
7233: PUSH
7234: FOR_TO
7235: IFFALSE 7365
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
7237: LD_EXP 7
7241: PUSH
7242: LD_VAR 0 2
7246: ARRAY
7247: IFFALSE 7260
7249: PUSH
7250: LD_VAR 0 2
7254: PPUSH
7255: CALL_OW 108
7259: AND
7260: IFFALSE 7274
7262: PUSH
7263: LD_VAR 0 2
7267: PUSH
7268: LD_OWVAR 2
7272: NONEQUAL
7273: AND
7274: IFFALSE 7363
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
7276: LD_EXP 8
7280: PUSH
7281: LD_VAR 0 2
7285: ARRAY
7286: NOT
7287: IFTRUE 7335
7289: PUSH
7290: LD_EXP 8
7294: PUSH
7295: LD_VAR 0 2
7299: ARRAY
7300: PUSH
7301: LD_EXP 8
7305: PUSH
7306: LD_OWVAR 2
7310: ARRAY
7311: NONEQUAL
7312: IFFALSE 7334
7314: PUSH
7315: LD_OWVAR 2
7319: PPUSH
7320: LD_VAR 0 2
7324: PPUSH
7325: CALL_OW 81
7329: PUSH
7330: LD_INT 1
7332: NONEQUAL
7333: AND
7334: OR
7335: IFFALSE 7363
// if HasPowerByGameType ( mpGameType , i ) then
7337: LD_EXP 3
7341: PPUSH
7342: LD_VAR 0 2
7346: PPUSH
7347: CALL 6665 0 2
7351: IFFALSE 7363
// begin gameIsOn := true ;
7353: LD_ADDR_VAR 0 1
7357: PUSH
7358: LD_INT 1
7360: ST_TO_ADDR
// break ;
7361: GO 7365
// end ;
7363: GO 7234
7365: POP
7366: POP
// wait ( 100 ) ;
7367: LD_INT 100
7369: PPUSH
7370: CALL_OW 67
// until not gameIsOn ;
7374: LD_VAR 0 1
7378: NOT
7379: IFFALSE 7213
// if IAmServer then
7381: CALL_OW 518
7385: IFFALSE 7394
// wait ( 0 0$3 ) ;
7387: LD_INT 105
7389: PPUSH
7390: CALL_OW 67
// if Multiplayer then
7394: LD_OWVAR 4
7398: IFFALSE 7406
// YouLostInMultiplayer else
7400: CALL_OW 107
7404: GO 7413
// YouLost (  ) ;
7406: LD_STRING 
7408: PPUSH
7409: CALL_OW 104
// end ;
7413: PPOPN 2
7415: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
7416: LD_EXP 33
7420: IFFALSE 7804
7422: GO 7424
7424: DISABLE
7425: LD_INT 0
7427: PPUSH
7428: PPUSH
7429: PPUSH
7430: PPUSH
7431: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
7432: LD_ADDR_VAR 0 5
7436: PUSH
7437: LD_INT 1
7439: PUSH
7440: LD_INT 2
7442: PUSH
7443: LD_INT 3
7445: PUSH
7446: LD_INT 4
7448: PUSH
7449: LD_INT 5
7451: PUSH
7452: LD_INT 6
7454: PUSH
7455: LD_INT 7
7457: PUSH
7458: LD_INT 8
7460: PUSH
7461: EMPTY
7462: LIST
7463: LIST
7464: LIST
7465: LIST
7466: LIST
7467: LIST
7468: LIST
7469: LIST
7470: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
7471: LD_INT 350
7473: PPUSH
7474: CALL_OW 67
// for i := 1 to 8 do
7478: LD_ADDR_VAR 0 1
7482: PUSH
7483: DOUBLE
7484: LD_INT 1
7486: DEC
7487: ST_TO_ADDR
7488: LD_INT 8
7490: PUSH
7491: FOR_TO
7492: IFFALSE 7774
// begin j := sides [ i ] ;
7494: LD_ADDR_VAR 0 2
7498: PUSH
7499: LD_VAR 0 5
7503: PUSH
7504: LD_VAR 0 1
7508: ARRAY
7509: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
7510: LD_EXP 40
7514: PUSH
7515: LD_VAR 0 2
7519: ARRAY
7520: PPUSH
7521: CALL 13492 0 1
7525: IFFALSE 7538
7527: PUSH
7528: LD_VAR 0 2
7532: PPUSH
7533: CALL_OW 108
7537: AND
7538: IFFALSE 7556
7540: PUSH
7541: LD_EXP 3
7545: PPUSH
7546: LD_VAR 0 2
7550: PPUSH
7551: CALL 6665 0 2
7555: AND
7556: IFFALSE 7772
// begin wait ( mpRespawn div 2 ) ;
7558: LD_EXP 33
7562: PUSH
7563: LD_INT 2
7565: DIV
7566: PPUSH
7567: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7571: LD_ADDR_VAR 0 3
7575: PUSH
7576: LD_INT 22
7578: PUSH
7579: LD_VAR 0 2
7583: PUSH
7584: EMPTY
7585: LIST
7586: LIST
7587: PUSH
7588: LD_INT 50
7590: PUSH
7591: EMPTY
7592: LIST
7593: PUSH
7594: LD_INT 2
7596: PUSH
7597: LD_INT 30
7599: PUSH
7600: LD_INT 0
7602: PUSH
7603: EMPTY
7604: LIST
7605: LIST
7606: PUSH
7607: LD_INT 30
7609: PUSH
7610: LD_INT 1
7612: PUSH
7613: EMPTY
7614: LIST
7615: LIST
7616: PUSH
7617: EMPTY
7618: LIST
7619: LIST
7620: LIST
7621: PUSH
7622: EMPTY
7623: LIST
7624: LIST
7625: LIST
7626: PPUSH
7627: CALL_OW 69
7631: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
7632: LD_VAR 0 3
7636: NOT
7637: IFTRUE 7651
7639: PUSH
7640: LD_VAR 0 2
7644: PPUSH
7645: CALL_OW 108
7649: NOT
7650: OR
7651: IFTRUE 7670
7653: PUSH
7654: LD_EXP 3
7658: PPUSH
7659: LD_VAR 0 2
7663: PPUSH
7664: CALL 6665 0 2
7668: NOT
7669: OR
7670: IFFALSE 7674
// continue ;
7672: GO 7491
// spawn := tmp [ 1 ] ;
7674: LD_ADDR_VAR 0 4
7678: PUSH
7679: LD_VAR 0 3
7683: PUSH
7684: LD_INT 1
7686: ARRAY
7687: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
7688: LD_EXP 40
7692: PUSH
7693: LD_VAR 0 2
7697: ARRAY
7698: PUSH
7699: LD_INT 1
7701: ARRAY
7702: PPUSH
7703: LD_VAR 0 4
7707: PPUSH
7708: CALL_OW 250
7712: PPUSH
7713: LD_VAR 0 4
7717: PPUSH
7718: CALL_OW 251
7722: PPUSH
7723: LD_INT 32
7725: PPUSH
7726: LD_INT 1
7728: PPUSH
7729: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
7733: LD_ADDR_EXP 40
7737: PUSH
7738: LD_EXP 40
7742: PPUSH
7743: LD_VAR 0 2
7747: PPUSH
7748: LD_EXP 40
7752: PUSH
7753: LD_VAR 0 2
7757: ARRAY
7758: PPUSH
7759: LD_INT 1
7761: PPUSH
7762: CALL_OW 3
7766: PPUSH
7767: CALL_OW 1
7771: ST_TO_ADDR
// end ; end ;
7772: GO 7491
7774: POP
7775: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
7776: LD_ADDR_VAR 0 5
7780: PUSH
7781: LD_VAR 0 5
7785: PPUSH
7786: LD_INT 1
7788: PPUSH
7789: LD_INT 8
7791: PPUSH
7792: LD_INT 1
7794: PPUSH
7795: CALL 15818 0 4
7799: ST_TO_ADDR
// until false ;
7800: LD_INT 0
7802: IFFALSE 7471
// end ;
7804: PPOPN 5
7806: END
// every 0 0$1 marked mpActive do
7807: GO 7809
7809: DISABLE
// begin enable ;
7810: ENABLE
// if not mpDisplayStrings then
7811: LD_EXP 38
7815: NOT
7816: IFFALSE 7827
// begin display_strings := [ ] ;
7818: LD_ADDR_OWVAR 47
7822: PUSH
7823: EMPTY
7824: ST_TO_ADDR
// exit ;
7825: GO 7837
// end ; display_strings := mpDisplayStrings ;
7827: LD_ADDR_OWVAR 47
7831: PUSH
7832: LD_EXP 38
7836: ST_TO_ADDR
// end ; end_of_file
7837: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
7838: LD_INT 0
7840: PPUSH
7841: PPUSH
7842: PPUSH
7843: PPUSH
7844: PPUSH
7845: PPUSH
7846: PPUSH
7847: PPUSH
7848: PPUSH
// if GetType ( un ) = unit_vehicle then
7849: LD_VAR 0 1
7853: PPUSH
7854: CALL_OW 247
7858: PUSH
7859: LD_INT 2
7861: EQUAL
7862: IFFALSE 7866
// exit ;
7864: GO 8639
// side := GetSide ( un ) ;
7866: LD_ADDR_VAR 0 9
7870: PUSH
7871: LD_VAR 0 1
7875: PPUSH
7876: CALL_OW 255
7880: ST_TO_ADDR
// if mpGameType in [ GameTypeSurvival , GameTypeSurvivalHardcore ] then
7881: LD_EXP 3
7885: PUSH
7886: LD_INT 2
7888: PUSH
7889: LD_INT 8
7891: PUSH
7892: EMPTY
7893: LIST
7894: LIST
7895: IN
7896: IFFALSE 7990
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
7898: LD_VAR 0 1
7902: PPUSH
7903: CALL_OW 266
7907: PUSH
7908: LD_INT 0
7910: PUSH
7911: LD_INT 1
7913: PUSH
7914: EMPTY
7915: LIST
7916: LIST
7917: IN
7918: IFFALSE 7990
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
7920: LD_ADDR_VAR 0 3
7924: PUSH
7925: LD_INT 22
7927: PUSH
7928: LD_VAR 0 9
7932: PUSH
7933: EMPTY
7934: LIST
7935: LIST
7936: PUSH
7937: LD_INT 2
7939: PUSH
7940: LD_INT 21
7942: PUSH
7943: LD_INT 1
7945: PUSH
7946: EMPTY
7947: LIST
7948: LIST
7949: PUSH
7950: LD_INT 33
7952: PUSH
7953: LD_INT 3
7955: PUSH
7956: EMPTY
7957: LIST
7958: LIST
7959: PUSH
7960: EMPTY
7961: LIST
7962: LIST
7963: LIST
7964: PUSH
7965: EMPTY
7966: LIST
7967: LIST
7968: PPUSH
7969: CALL_OW 69
7973: PUSH
7974: FOR_IN
7975: IFFALSE 7988
// KillUnit ( i ) ;
7977: LD_VAR 0 3
7981: PPUSH
7982: CALL_OW 66
7986: GO 7974
7988: POP
7989: POP
// end ; if mpGameType = GameTypeSurvivalHardcore then
7990: LD_EXP 3
7994: PUSH
7995: LD_INT 8
7997: EQUAL
7998: IFFALSE 8082
// if un in mpCommanders then
8000: LD_VAR 0 1
8004: PUSH
8005: LD_EXP 41
8009: IN
8010: IFFALSE 8082
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
8012: LD_ADDR_VAR 0 3
8016: PUSH
8017: LD_INT 22
8019: PUSH
8020: LD_VAR 0 9
8024: PUSH
8025: EMPTY
8026: LIST
8027: LIST
8028: PUSH
8029: LD_INT 2
8031: PUSH
8032: LD_INT 21
8034: PUSH
8035: LD_INT 1
8037: PUSH
8038: EMPTY
8039: LIST
8040: LIST
8041: PUSH
8042: LD_INT 33
8044: PUSH
8045: LD_INT 3
8047: PUSH
8048: EMPTY
8049: LIST
8050: LIST
8051: PUSH
8052: EMPTY
8053: LIST
8054: LIST
8055: LIST
8056: PUSH
8057: EMPTY
8058: LIST
8059: LIST
8060: PPUSH
8061: CALL_OW 69
8065: PUSH
8066: FOR_IN
8067: IFFALSE 8080
// KillUnit ( i ) ;
8069: LD_VAR 0 3
8073: PPUSH
8074: CALL_OW 66
8078: GO 8066
8080: POP
8081: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
8082: LD_VAR 0 1
8086: PPUSH
8087: CALL_OW 257
8091: PUSH
8092: LD_INT 12
8094: PUSH
8095: LD_INT 17
8097: PUSH
8098: LD_INT 15
8100: PUSH
8101: LD_INT 16
8103: PUSH
8104: EMPTY
8105: LIST
8106: LIST
8107: LIST
8108: LIST
8109: IN
8110: IFTRUE 8127
8112: PUSH
8113: LD_VAR 0 1
8117: PPUSH
8118: CALL_OW 263
8122: PUSH
8123: LD_INT 5
8125: EQUAL
8126: OR
8127: IFFALSE 8364
// begin tag := 0 ;
8129: LD_ADDR_VAR 0 5
8133: PUSH
8134: LD_INT 0
8136: ST_TO_ADDR
// for i := 1 to 8 do
8137: LD_ADDR_VAR 0 3
8141: PUSH
8142: DOUBLE
8143: LD_INT 1
8145: DEC
8146: ST_TO_ADDR
8147: LD_INT 8
8149: PUSH
8150: FOR_TO
8151: IFFALSE 8185
// if un in mpApePosIndex [ i ] then
8153: LD_VAR 0 1
8157: PUSH
8158: LD_EXP 32
8162: PUSH
8163: LD_VAR 0 3
8167: ARRAY
8168: IN
8169: IFFALSE 8183
// begin tag := i ;
8171: LD_ADDR_VAR 0 5
8175: PUSH
8176: LD_VAR 0 3
8180: ST_TO_ADDR
// break ;
8181: GO 8185
// end ;
8183: GO 8150
8185: POP
8186: POP
// if not tag then
8187: LD_VAR 0 5
8191: NOT
8192: IFFALSE 8196
// exit ;
8194: GO 8639
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
8196: LD_ADDR_VAR 0 7
8200: PUSH
8201: LD_EXP 31
8205: PUSH
8206: LD_EXP 7
8210: PUSH
8211: LD_VAR 0 5
8215: ARRAY
8216: ARRAY
8217: ST_TO_ADDR
// if not area then
8218: LD_VAR 0 7
8222: NOT
8223: IFFALSE 8227
// exit ;
8225: GO 8639
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
8227: LD_INT 14700
8229: PUSH
8230: LD_VAR 0 1
8234: PUSH
8235: LD_INT 5
8237: MOD
8238: PUSH
8239: LD_INT 1
8241: PLUS
8242: PUSH
8243: LD_INT 700
8245: MUL
8246: PLUS
8247: PPUSH
8248: CALL_OW 67
// repeat wait ( 10 ) ;
8252: LD_INT 10
8254: PPUSH
8255: CALL_OW 67
// until not mpBlockRespThread ;
8259: LD_EXP 47
8263: NOT
8264: IFFALSE 8252
// mpBlockRespThread := true ;
8266: LD_ADDR_EXP 47
8270: PUSH
8271: LD_INT 1
8273: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
8274: LD_INT 0
8276: PPUSH
8277: CALL 45595 0 1
// ape := CreateHuman ;
8281: LD_ADDR_VAR 0 4
8285: PUSH
8286: CALL_OW 44
8290: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
8291: LD_ADDR_EXP 32
8295: PUSH
8296: LD_EXP 32
8300: PPUSH
8301: LD_VAR 0 5
8305: PPUSH
8306: LD_EXP 32
8310: PUSH
8311: LD_VAR 0 5
8315: ARRAY
8316: PPUSH
8317: LD_VAR 0 4
8321: PPUSH
8322: CALL 49468 0 2
8326: PPUSH
8327: CALL_OW 1
8331: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
8332: LD_VAR 0 4
8336: PPUSH
8337: LD_VAR 0 7
8341: PPUSH
8342: LD_INT 0
8344: PPUSH
8345: CALL_OW 49
// wait ( 10 ) ;
8349: LD_INT 10
8351: PPUSH
8352: CALL_OW 67
// mpBlockRespThread := false ;
8356: LD_ADDR_EXP 47
8360: PUSH
8361: LD_INT 0
8363: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
8364: LD_VAR 0 1
8368: PPUSH
8369: CALL_OW 247
8373: PUSH
8374: LD_INT 1
8376: EQUAL
8377: IFFALSE 8394
8379: PUSH
8380: LD_VAR 0 1
8384: PPUSH
8385: CALL_OW 248
8389: PUSH
8390: LD_INT 0
8392: GREATER
8393: AND
8394: IFFALSE 8639
// begin if not mpRespawn then
8396: LD_EXP 33
8400: NOT
8401: IFFALSE 8405
// exit ;
8403: GO 8639
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
8405: LD_VAR 0 9
8409: PPUSH
8410: CALL_OW 108
8414: NOT
8415: IFFALSE 8434
8417: PUSH
8418: LD_EXP 3
8422: PPUSH
8423: LD_VAR 0 9
8427: PPUSH
8428: CALL 6665 0 2
8432: NOT
8433: AND
8434: IFFALSE 8438
// exit ;
8436: GO 8639
// side := GetSide ( un ) ;
8438: LD_ADDR_VAR 0 9
8442: PUSH
8443: LD_VAR 0 1
8447: PPUSH
8448: CALL_OW 255
8452: ST_TO_ADDR
// nation := GetNation ( un ) ;
8453: LD_ADDR_VAR 0 8
8457: PUSH
8458: LD_VAR 0 1
8462: PPUSH
8463: CALL_OW 248
8467: ST_TO_ADDR
// class := GetClass ( un ) ;
8468: LD_ADDR_VAR 0 6
8472: PUSH
8473: LD_VAR 0 1
8477: PPUSH
8478: CALL_OW 257
8482: ST_TO_ADDR
// if class > 4 then
8483: LD_VAR 0 6
8487: PUSH
8488: LD_INT 4
8490: GREATER
8491: IFFALSE 8501
// class := 1 ;
8493: LD_ADDR_VAR 0 6
8497: PUSH
8498: LD_INT 1
8500: ST_TO_ADDR
// repeat wait ( 10 ) ;
8501: LD_INT 10
8503: PPUSH
8504: CALL_OW 67
// until not mpBlockRespThread ;
8508: LD_EXP 47
8512: NOT
8513: IFFALSE 8501
// mpBlockRespThread := true ;
8515: LD_ADDR_EXP 47
8519: PUSH
8520: LD_INT 1
8522: ST_TO_ADDR
// uc_side := side ;
8523: LD_ADDR_OWVAR 20
8527: PUSH
8528: LD_VAR 0 9
8532: ST_TO_ADDR
// uc_nation := nation ;
8533: LD_ADDR_OWVAR 21
8537: PUSH
8538: LD_VAR 0 8
8542: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
8543: LD_INT 0
8545: PPUSH
8546: LD_VAR 0 6
8550: PPUSH
8551: LD_INT 2
8553: PPUSH
8554: CALL_OW 380
// un := CreateHuman ;
8558: LD_ADDR_VAR 0 1
8562: PUSH
8563: CALL_OW 44
8567: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
8568: LD_ADDR_EXP 40
8572: PUSH
8573: LD_EXP 40
8577: PPUSH
8578: LD_VAR 0 9
8582: PPUSH
8583: LD_EXP 40
8587: PUSH
8588: LD_VAR 0 9
8592: ARRAY
8593: PPUSH
8594: LD_EXP 40
8598: PUSH
8599: LD_VAR 0 9
8603: ARRAY
8604: PUSH
8605: LD_INT 1
8607: PLUS
8608: PPUSH
8609: LD_VAR 0 1
8613: PPUSH
8614: CALL_OW 1
8618: PPUSH
8619: CALL_OW 1
8623: ST_TO_ADDR
// wait ( 10 ) ;
8624: LD_INT 10
8626: PPUSH
8627: CALL_OW 67
// mpBlockRespThread := false ;
8631: LD_ADDR_EXP 47
8635: PUSH
8636: LD_INT 0
8638: ST_TO_ADDR
// end ; end ;
8639: LD_VAR 0 2
8643: RET
// export function Multiplayer_VehicleConstruction_ApeConsumed ( factory , un ) ; var i , tag , area , ape ; begin
8644: LD_INT 0
8646: PPUSH
8647: PPUSH
8648: PPUSH
8649: PPUSH
8650: PPUSH
// tag := 0 ;
8651: LD_ADDR_VAR 0 5
8655: PUSH
8656: LD_INT 0
8658: ST_TO_ADDR
// for i := 1 to 8 do
8659: LD_ADDR_VAR 0 4
8663: PUSH
8664: DOUBLE
8665: LD_INT 1
8667: DEC
8668: ST_TO_ADDR
8669: LD_INT 8
8671: PUSH
8672: FOR_TO
8673: IFFALSE 8707
// if un in mpApePosIndex [ i ] then
8675: LD_VAR 0 2
8679: PUSH
8680: LD_EXP 32
8684: PUSH
8685: LD_VAR 0 4
8689: ARRAY
8690: IN
8691: IFFALSE 8705
// begin tag := i ;
8693: LD_ADDR_VAR 0 5
8697: PUSH
8698: LD_VAR 0 4
8702: ST_TO_ADDR
// break ;
8703: GO 8707
// end ;
8705: GO 8672
8707: POP
8708: POP
// if not tag then
8709: LD_VAR 0 5
8713: NOT
8714: IFFALSE 8718
// exit ;
8716: GO 8886
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
8718: LD_ADDR_VAR 0 6
8722: PUSH
8723: LD_EXP 31
8727: PUSH
8728: LD_EXP 7
8732: PUSH
8733: LD_VAR 0 5
8737: ARRAY
8738: ARRAY
8739: ST_TO_ADDR
// if not area then
8740: LD_VAR 0 6
8744: NOT
8745: IFFALSE 8749
// exit ;
8747: GO 8886
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
8749: LD_INT 14700
8751: PUSH
8752: LD_VAR 0 2
8756: PUSH
8757: LD_INT 5
8759: MOD
8760: PUSH
8761: LD_INT 1
8763: PLUS
8764: PUSH
8765: LD_INT 700
8767: MUL
8768: PLUS
8769: PPUSH
8770: CALL_OW 67
// repeat wait ( 10 ) ;
8774: LD_INT 10
8776: PPUSH
8777: CALL_OW 67
// until not mpBlockRespThread ;
8781: LD_EXP 47
8785: NOT
8786: IFFALSE 8774
// mpBlockRespThread := true ;
8788: LD_ADDR_EXP 47
8792: PUSH
8793: LD_INT 1
8795: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
8796: LD_INT 0
8798: PPUSH
8799: CALL 45595 0 1
// ape := CreateHuman ;
8803: LD_ADDR_VAR 0 7
8807: PUSH
8808: CALL_OW 44
8812: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
8813: LD_ADDR_EXP 32
8817: PUSH
8818: LD_EXP 32
8822: PPUSH
8823: LD_VAR 0 5
8827: PPUSH
8828: LD_EXP 32
8832: PUSH
8833: LD_VAR 0 5
8837: ARRAY
8838: PPUSH
8839: LD_VAR 0 7
8843: PPUSH
8844: CALL 49468 0 2
8848: PPUSH
8849: CALL_OW 1
8853: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
8854: LD_VAR 0 7
8858: PPUSH
8859: LD_VAR 0 6
8863: PPUSH
8864: LD_INT 0
8866: PPUSH
8867: CALL_OW 49
// wait ( 10 ) ;
8871: LD_INT 10
8873: PPUSH
8874: CALL_OW 67
// mpBlockRespThread := false ;
8878: LD_ADDR_EXP 47
8882: PUSH
8883: LD_INT 0
8885: ST_TO_ADDR
// end ;
8886: LD_VAR 0 3
8890: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
8891: LD_INT 0
8893: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
8894: LD_VAR 0 1
8898: PPUSH
8899: CALL_OW 266
8903: PUSH
8904: LD_INT 0
8906: PUSH
8907: LD_INT 1
8909: PUSH
8910: EMPTY
8911: LIST
8912: LIST
8913: IN
8914: IFFALSE 8939
// SetBName ( building , @ & GetSide ( building ) ) ;
8916: LD_VAR 0 1
8920: PPUSH
8921: LD_STRING @
8923: PUSH
8924: LD_VAR 0 1
8928: PPUSH
8929: CALL_OW 255
8933: STR
8934: PPUSH
8935: CALL_OW 500
// end ;
8939: LD_VAR 0 2
8943: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
8944: LD_INT 0
8946: PPUSH
8947: PPUSH
// if mpGameType in [ GameTypeSurvival , GameTypeSurvivalHardcore ] and GetBType ( building ) in [ b_depot , b_warehouse ] then
8948: LD_EXP 3
8952: PUSH
8953: LD_INT 2
8955: PUSH
8956: LD_INT 8
8958: PUSH
8959: EMPTY
8960: LIST
8961: LIST
8962: IN
8963: IFFALSE 8987
8965: PUSH
8966: LD_VAR 0 1
8970: PPUSH
8971: CALL_OW 266
8975: PUSH
8976: LD_INT 0
8978: PUSH
8979: LD_INT 1
8981: PUSH
8982: EMPTY
8983: LIST
8984: LIST
8985: IN
8986: AND
8987: IFFALSE 9066
// begin SetSide ( building , oldSide ) ;
8989: LD_VAR 0 1
8993: PPUSH
8994: LD_VAR 0 2
8998: PPUSH
8999: CALL_OW 235
// KillUnit ( building ) ;
9003: LD_VAR 0 1
9007: PPUSH
9008: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
9012: LD_ADDR_VAR 0 5
9016: PUSH
9017: LD_INT 22
9019: PUSH
9020: LD_VAR 0 2
9024: PUSH
9025: EMPTY
9026: LIST
9027: LIST
9028: PUSH
9029: LD_INT 21
9031: PUSH
9032: LD_INT 1
9034: PUSH
9035: EMPTY
9036: LIST
9037: LIST
9038: PUSH
9039: EMPTY
9040: LIST
9041: LIST
9042: PPUSH
9043: CALL_OW 69
9047: PUSH
9048: FOR_IN
9049: IFFALSE 9062
// KillUnit ( i ) ;
9051: LD_VAR 0 5
9055: PPUSH
9056: CALL_OW 66
9060: GO 9048
9062: POP
9063: POP
// exit ;
9064: GO 9111
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
9066: LD_VAR 0 1
9070: PPUSH
9071: CALL_OW 266
9075: PUSH
9076: LD_INT 0
9078: PUSH
9079: LD_INT 1
9081: PUSH
9082: EMPTY
9083: LIST
9084: LIST
9085: IN
9086: IFFALSE 9111
// SetBName ( building , @ & GetSide ( building ) ) ;
9088: LD_VAR 0 1
9092: PPUSH
9093: LD_STRING @
9095: PUSH
9096: LD_VAR 0 1
9100: PPUSH
9101: CALL_OW 255
9105: STR
9106: PPUSH
9107: CALL_OW 500
// end ;
9111: LD_VAR 0 4
9115: RET
// export function Multiplayer_OilExtracted ( building , side , base , amount ) ; var i , value ; begin
9116: LD_INT 0
9118: PPUSH
9119: PPUSH
9120: PPUSH
// if mpGameType <> GameTypeFamine then
9121: LD_EXP 3
9125: PUSH
9126: LD_INT 5
9128: NONEQUAL
9129: IFFALSE 9133
// exit ;
9131: GO 9367
// for i := 1 to mpGlobalOilDeposits do
9133: LD_ADDR_VAR 0 6
9137: PUSH
9138: DOUBLE
9139: LD_INT 1
9141: DEC
9142: ST_TO_ADDR
9143: LD_EXP 42
9147: PUSH
9148: FOR_TO
9149: IFFALSE 9365
// begin if HexInfo ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) = building then
9151: LD_EXP 42
9155: PUSH
9156: LD_VAR 0 6
9160: ARRAY
9161: PUSH
9162: LD_INT 1
9164: ARRAY
9165: PPUSH
9166: LD_EXP 42
9170: PUSH
9171: LD_VAR 0 6
9175: ARRAY
9176: PUSH
9177: LD_INT 2
9179: ARRAY
9180: PPUSH
9181: CALL_OW 428
9185: PUSH
9186: LD_VAR 0 1
9190: EQUAL
9191: IFFALSE 9363
// begin value := mpGlobalOilDeposits [ i ] [ 3 ] ;
9193: LD_ADDR_VAR 0 7
9197: PUSH
9198: LD_EXP 42
9202: PUSH
9203: LD_VAR 0 6
9207: ARRAY
9208: PUSH
9209: LD_INT 3
9211: ARRAY
9212: ST_TO_ADDR
// value := value - amount ;
9213: LD_ADDR_VAR 0 7
9217: PUSH
9218: LD_VAR 0 7
9222: PUSH
9223: LD_VAR 0 4
9227: MINUS
9228: ST_TO_ADDR
// mpGlobalOilDeposits := Replace ( mpGlobalOilDeposits , i , Replace ( mpGlobalOilDeposits [ i ] , 3 , value ) ) ;
9229: LD_ADDR_EXP 42
9233: PUSH
9234: LD_EXP 42
9238: PPUSH
9239: LD_VAR 0 6
9243: PPUSH
9244: LD_EXP 42
9248: PUSH
9249: LD_VAR 0 6
9253: ARRAY
9254: PPUSH
9255: LD_INT 3
9257: PPUSH
9258: LD_VAR 0 7
9262: PPUSH
9263: CALL_OW 1
9267: PPUSH
9268: CALL_OW 1
9272: ST_TO_ADDR
// if side in [ your_side , 9 ] then
9273: LD_VAR 0 2
9277: PUSH
9278: LD_OWVAR 2
9282: PUSH
9283: LD_INT 9
9285: PUSH
9286: EMPTY
9287: LIST
9288: LIST
9289: IN
9290: IFFALSE 9306
// SetUnitDisplayNumber ( building , value ) ;
9292: LD_VAR 0 1
9296: PPUSH
9297: LD_VAR 0 7
9301: PPUSH
9302: CALL_OW 505
// if value <= 0 then
9306: LD_VAR 0 7
9310: PUSH
9311: LD_INT 0
9313: LESSEQUAL
9314: IFFALSE 9363
// begin RemoveDepositXY ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) ;
9316: LD_EXP 42
9320: PUSH
9321: LD_VAR 0 6
9325: ARRAY
9326: PUSH
9327: LD_INT 1
9329: ARRAY
9330: PPUSH
9331: LD_EXP 42
9335: PUSH
9336: LD_VAR 0 6
9340: ARRAY
9341: PUSH
9342: LD_INT 2
9344: ARRAY
9345: PPUSH
9346: CALL_OW 63
// KillUnit ( building ) ;
9350: LD_VAR 0 1
9354: PPUSH
9355: CALL_OW 66
// exit ;
9359: POP
9360: POP
9361: GO 9367
// end ; end ; end ;
9363: GO 9148
9365: POP
9366: POP
// end ;
9367: LD_VAR 0 5
9371: RET
// export function Multiplayer_SibExtracted ( building , side , base , amount ) ; var i , value ; begin
9372: LD_INT 0
9374: PPUSH
9375: PPUSH
9376: PPUSH
// if mpGameType <> GameTypeFamine then
9377: LD_EXP 3
9381: PUSH
9382: LD_INT 5
9384: NONEQUAL
9385: IFFALSE 9389
// exit ;
9387: GO 9623
// for i := 1 to mpGlobalSibDeposits do
9389: LD_ADDR_VAR 0 6
9393: PUSH
9394: DOUBLE
9395: LD_INT 1
9397: DEC
9398: ST_TO_ADDR
9399: LD_EXP 43
9403: PUSH
9404: FOR_TO
9405: IFFALSE 9621
// begin if HexInfo ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) = building then
9407: LD_EXP 43
9411: PUSH
9412: LD_VAR 0 6
9416: ARRAY
9417: PUSH
9418: LD_INT 1
9420: ARRAY
9421: PPUSH
9422: LD_EXP 43
9426: PUSH
9427: LD_VAR 0 6
9431: ARRAY
9432: PUSH
9433: LD_INT 2
9435: ARRAY
9436: PPUSH
9437: CALL_OW 428
9441: PUSH
9442: LD_VAR 0 1
9446: EQUAL
9447: IFFALSE 9619
// begin value := mpGlobalSibDeposits [ i ] [ 3 ] ;
9449: LD_ADDR_VAR 0 7
9453: PUSH
9454: LD_EXP 43
9458: PUSH
9459: LD_VAR 0 6
9463: ARRAY
9464: PUSH
9465: LD_INT 3
9467: ARRAY
9468: ST_TO_ADDR
// value := value - amount ;
9469: LD_ADDR_VAR 0 7
9473: PUSH
9474: LD_VAR 0 7
9478: PUSH
9479: LD_VAR 0 4
9483: MINUS
9484: ST_TO_ADDR
// mpGlobalSibDeposits := Replace ( mpGlobalSibDeposits , i , Replace ( mpGlobalSibDeposits [ i ] , 3 , value ) ) ;
9485: LD_ADDR_EXP 43
9489: PUSH
9490: LD_EXP 43
9494: PPUSH
9495: LD_VAR 0 6
9499: PPUSH
9500: LD_EXP 43
9504: PUSH
9505: LD_VAR 0 6
9509: ARRAY
9510: PPUSH
9511: LD_INT 3
9513: PPUSH
9514: LD_VAR 0 7
9518: PPUSH
9519: CALL_OW 1
9523: PPUSH
9524: CALL_OW 1
9528: ST_TO_ADDR
// if side in [ your_side , 9 ] then
9529: LD_VAR 0 2
9533: PUSH
9534: LD_OWVAR 2
9538: PUSH
9539: LD_INT 9
9541: PUSH
9542: EMPTY
9543: LIST
9544: LIST
9545: IN
9546: IFFALSE 9562
// SetUnitDisplayNumber ( building , value ) ;
9548: LD_VAR 0 1
9552: PPUSH
9553: LD_VAR 0 7
9557: PPUSH
9558: CALL_OW 505
// if value <= 0 then
9562: LD_VAR 0 7
9566: PUSH
9567: LD_INT 0
9569: LESSEQUAL
9570: IFFALSE 9619
// begin RemoveDepositXY ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) ;
9572: LD_EXP 43
9576: PUSH
9577: LD_VAR 0 6
9581: ARRAY
9582: PUSH
9583: LD_INT 1
9585: ARRAY
9586: PPUSH
9587: LD_EXP 43
9591: PUSH
9592: LD_VAR 0 6
9596: ARRAY
9597: PUSH
9598: LD_INT 2
9600: ARRAY
9601: PPUSH
9602: CALL_OW 63
// KillUnit ( building ) ;
9606: LD_VAR 0 1
9610: PPUSH
9611: CALL_OW 66
// exit ;
9615: POP
9616: POP
9617: GO 9623
// end ; end ; end ;
9619: GO 9404
9621: POP
9622: POP
// end ;
9623: LD_VAR 0 5
9627: RET
// export function Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ; var side ; begin
9628: LD_INT 0
9630: PPUSH
9631: PPUSH
// side := GetSide ( factory ) ;
9632: LD_ADDR_VAR 0 7
9636: PUSH
9637: LD_VAR 0 1
9641: PPUSH
9642: CALL_OW 255
9646: ST_TO_ADDR
// if weapon = ar_miner and FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , ar_miner ] ] ) > 0 then
9647: LD_VAR 0 5
9651: PUSH
9652: LD_INT 81
9654: EQUAL
9655: IFFALSE 9693
9657: PUSH
9658: LD_INT 22
9660: PUSH
9661: LD_VAR 0 7
9665: PUSH
9666: EMPTY
9667: LIST
9668: LIST
9669: PUSH
9670: LD_INT 34
9672: PUSH
9673: LD_INT 81
9675: PUSH
9676: EMPTY
9677: LIST
9678: LIST
9679: PUSH
9680: EMPTY
9681: LIST
9682: LIST
9683: PPUSH
9684: CALL_OW 69
9688: PUSH
9689: LD_INT 0
9691: GREATER
9692: AND
9693: IFFALSE 9726
// begin ComCancel ( factory ) ;
9695: LD_VAR 0 1
9699: PPUSH
9700: CALL_OW 127
// if side = your_side then
9704: LD_VAR 0 7
9708: PUSH
9709: LD_OWVAR 2
9713: EQUAL
9714: IFFALSE 9726
// HintSpec ( VehLimit , 2 ) ;
9716: LD_STRING VehLimit
9718: PPUSH
9719: LD_INT 2
9721: PPUSH
9722: CALL_OW 338
// end ; end ;
9726: LD_VAR 0 6
9730: RET
// export function Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; var i , j ; begin
9731: LD_INT 0
9733: PPUSH
9734: PPUSH
9735: PPUSH
// if GetWeapon ( newId ) = ar_miner and GetControl ( newId ) = control_manual then
9736: LD_VAR 0 1
9740: PPUSH
9741: CALL_OW 264
9745: PUSH
9746: LD_INT 81
9748: EQUAL
9749: IFFALSE 9766
9751: PUSH
9752: LD_VAR 0 1
9756: PPUSH
9757: CALL_OW 263
9761: PUSH
9762: LD_INT 1
9764: EQUAL
9765: AND
9766: IFFALSE 10046
// begin for i := 1 to Count ( minersList ) do
9768: LD_ADDR_VAR 0 6
9772: PUSH
9773: DOUBLE
9774: LD_INT 1
9776: DEC
9777: ST_TO_ADDR
9778: LD_EXP 57
9782: PPUSH
9783: CALL 13492 0 1
9787: PUSH
9788: FOR_TO
9789: IFFALSE 9907
// begin if minersList [ i ] = oldId then
9791: LD_EXP 57
9795: PUSH
9796: LD_VAR 0 6
9800: ARRAY
9801: PUSH
9802: LD_VAR 0 2
9806: EQUAL
9807: IFFALSE 9905
// begin for j := 1 to minerMinesList [ i ] do
9809: LD_ADDR_VAR 0 7
9813: PUSH
9814: DOUBLE
9815: LD_INT 1
9817: DEC
9818: ST_TO_ADDR
9819: LD_EXP 58
9823: PUSH
9824: LD_VAR 0 6
9828: ARRAY
9829: PUSH
9830: FOR_TO
9831: IFFALSE 9881
// RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
9833: LD_EXP 58
9837: PUSH
9838: LD_VAR 0 6
9842: ARRAY
9843: PUSH
9844: LD_VAR 0 7
9848: ARRAY
9849: PUSH
9850: LD_INT 1
9852: ARRAY
9853: PPUSH
9854: LD_EXP 58
9858: PUSH
9859: LD_VAR 0 6
9863: ARRAY
9864: PUSH
9865: LD_VAR 0 7
9869: ARRAY
9870: PUSH
9871: LD_INT 2
9873: ARRAY
9874: PPUSH
9875: CALL_OW 612
9879: GO 9830
9881: POP
9882: POP
// minerMinesList := Delete ( minerMinesList , i ) ;
9883: LD_ADDR_EXP 58
9887: PUSH
9888: LD_EXP 58
9892: PPUSH
9893: LD_VAR 0 6
9897: PPUSH
9898: CALL_OW 3
9902: ST_TO_ADDR
// break ;
9903: GO 9907
// end ; end ;
9905: GO 9788
9907: POP
9908: POP
// minersList := minersList diff oldId ;
9909: LD_ADDR_EXP 57
9913: PUSH
9914: LD_EXP 57
9918: PUSH
9919: LD_VAR 0 2
9923: DIFF
9924: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_weapon , ar_miner ] ] ) > 1 then
9925: LD_INT 22
9927: PUSH
9928: LD_VAR 0 4
9932: PPUSH
9933: CALL_OW 255
9937: PUSH
9938: EMPTY
9939: LIST
9940: LIST
9941: PUSH
9942: LD_INT 34
9944: PUSH
9945: LD_INT 81
9947: PUSH
9948: EMPTY
9949: LIST
9950: LIST
9951: PUSH
9952: EMPTY
9953: LIST
9954: LIST
9955: PPUSH
9956: CALL_OW 69
9960: PUSH
9961: LD_INT 1
9963: GREATER
9964: IFFALSE 9991
// begin ComExit ( unit ) ;
9966: LD_VAR 0 4
9970: PPUSH
9971: CALL 49866 0 1
// SetSide ( newId , oldSide ) ;
9975: LD_VAR 0 1
9979: PPUSH
9980: LD_VAR 0 3
9984: PPUSH
9985: CALL_OW 235
// exit ;
9989: GO 10046
// end ; minersList := Replace ( minersList , minersList + 1 , newId ) ;
9991: LD_ADDR_EXP 57
9995: PUSH
9996: LD_EXP 57
10000: PPUSH
10001: LD_EXP 57
10005: PUSH
10006: LD_INT 1
10008: PLUS
10009: PPUSH
10010: LD_VAR 0 1
10014: PPUSH
10015: CALL_OW 1
10019: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
10020: LD_ADDR_EXP 58
10024: PUSH
10025: LD_EXP 58
10029: PPUSH
10030: LD_EXP 58
10034: PUSH
10035: LD_INT 1
10037: PLUS
10038: PPUSH
10039: EMPTY
10040: PPUSH
10041: CALL_OW 1
10045: ST_TO_ADDR
// end ; end ; end_of_file
10046: LD_VAR 0 5
10050: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
10051: LD_EXP 39
10055: IFFALSE 10063
10057: PUSH
10058: CALL 10273 0 0
10062: AND
10063: IFFALSE 10071
10065: PUSH
10066: LD_OWVAR 4
10070: AND
10071: IFFALSE 10270
10073: GO 10075
10075: DISABLE
10076: LD_INT 0
10078: PPUSH
10079: PPUSH
// begin canWin := false ;
10080: LD_ADDR_VAR 0 2
10084: PUSH
10085: LD_INT 0
10087: ST_TO_ADDR
// if not HasPower ( your_side ) then
10088: LD_OWVAR 2
10092: PPUSH
10093: CALL 10315 0 1
10097: NOT
10098: IFFALSE 10109
// begin Multiplayer_Loose_Message ;
10100: CALL_OW 521
// enable ( mpLose ) ;
10104: LD_INT 102
10106: ENABLE_MARKED
// end else
10107: GO 10270
// begin canWin := true ;
10109: LD_ADDR_VAR 0 2
10113: PUSH
10114: LD_INT 1
10116: ST_TO_ADDR
// for i := 1 to 8 do
10117: LD_ADDR_VAR 0 1
10121: PUSH
10122: DOUBLE
10123: LD_INT 1
10125: DEC
10126: ST_TO_ADDR
10127: LD_INT 8
10129: PUSH
10130: FOR_TO
10131: IFFALSE 10256
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
10133: LD_EXP 7
10137: PUSH
10138: LD_VAR 0 1
10142: ARRAY
10143: IFFALSE 10156
10145: PUSH
10146: LD_VAR 0 1
10150: PPUSH
10151: CALL_OW 108
10155: AND
10156: IFFALSE 10170
10158: PUSH
10159: LD_VAR 0 1
10163: PUSH
10164: LD_OWVAR 2
10168: NONEQUAL
10169: AND
10170: IFFALSE 10254
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
10172: LD_EXP 8
10176: PUSH
10177: LD_VAR 0 1
10181: ARRAY
10182: NOT
10183: IFTRUE 10231
10185: PUSH
10186: LD_EXP 8
10190: PUSH
10191: LD_VAR 0 1
10195: ARRAY
10196: PUSH
10197: LD_EXP 8
10201: PUSH
10202: LD_OWVAR 2
10206: ARRAY
10207: NONEQUAL
10208: IFFALSE 10230
10210: PUSH
10211: LD_OWVAR 2
10215: PPUSH
10216: LD_VAR 0 1
10220: PPUSH
10221: CALL_OW 81
10225: PUSH
10226: LD_INT 1
10228: NONEQUAL
10229: AND
10230: OR
10231: IFFALSE 10254
// if HasPower ( i ) then
10233: LD_VAR 0 1
10237: PPUSH
10238: CALL 10315 0 1
10242: IFFALSE 10254
// begin canWin := false ;
10244: LD_ADDR_VAR 0 2
10248: PUSH
10249: LD_INT 0
10251: ST_TO_ADDR
// break ;
10252: GO 10256
// end ;
10254: GO 10130
10256: POP
10257: POP
// if canWin then
10258: LD_VAR 0 2
10262: IFFALSE 10269
// enable ( mpWin ) else
10264: LD_INT 101
10266: ENABLE_MARKED
10267: GO 10270
// enable ;
10269: ENABLE
// end ; end ;
10270: PPOPN 2
10272: END
// function CanWinLoose ; begin
10273: LD_INT 0
10275: PPUSH
// result := true ;
10276: LD_ADDR_VAR 0 1
10280: PUSH
10281: LD_INT 1
10283: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
10284: CALL_OW 531
10288: IFFALSE 10300
10290: PUSH
10291: CALL_OW 519
10295: PUSH
10296: LD_INT 1
10298: GREATER
10299: AND
10300: IFFALSE 10310
// result := false ;
10302: LD_ADDR_VAR 0 1
10306: PUSH
10307: LD_INT 0
10309: ST_TO_ADDR
// end ;
10310: LD_VAR 0 1
10314: RET
// function HasPower ( i ) ; begin
10315: LD_INT 0
10317: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
10318: LD_ADDR_VAR 0 2
10322: PUSH
10323: LD_INT 22
10325: PUSH
10326: LD_VAR 0 1
10330: PUSH
10331: EMPTY
10332: LIST
10333: LIST
10334: PUSH
10335: LD_INT 2
10337: PUSH
10338: LD_INT 21
10340: PUSH
10341: LD_INT 1
10343: PUSH
10344: EMPTY
10345: LIST
10346: LIST
10347: PUSH
10348: LD_INT 33
10350: PUSH
10351: LD_INT 3
10353: PUSH
10354: EMPTY
10355: LIST
10356: LIST
10357: PUSH
10358: LD_INT 33
10360: PUSH
10361: LD_INT 5
10363: PUSH
10364: EMPTY
10365: LIST
10366: LIST
10367: PUSH
10368: EMPTY
10369: LIST
10370: LIST
10371: LIST
10372: LIST
10373: PUSH
10374: EMPTY
10375: LIST
10376: LIST
10377: PPUSH
10378: CALL_OW 69
10382: ST_TO_ADDR
// end ; end_of_file
10383: LD_VAR 0 2
10387: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
10388: LD_EXP 39
10392: IFFALSE 10435
10394: GO 10396
10396: DISABLE
10397: LD_INT 0
10399: PPUSH
// begin for i := 1 to 8 do
10400: LD_ADDR_VAR 0 1
10404: PUSH
10405: DOUBLE
10406: LD_INT 1
10408: DEC
10409: ST_TO_ADDR
10410: LD_INT 8
10412: PUSH
10413: FOR_TO
10414: IFFALSE 10433
// SetRestrict ( b_depot , i , state_disabled ) ;
10416: LD_INT 0
10418: PPUSH
10419: LD_VAR 0 1
10423: PPUSH
10424: LD_INT 0
10426: PPUSH
10427: CALL_OW 324
10431: GO 10413
10433: POP
10434: POP
// end ;
10435: PPOPN 1
10437: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
10438: LD_EXP 39
10442: IFFALSE 10450
10444: PUSH
10445: CALL 10660 0 0
10449: AND
10450: IFFALSE 10458
10452: PUSH
10453: LD_OWVAR 4
10457: AND
10458: IFFALSE 10657
10460: GO 10462
10462: DISABLE
10463: LD_INT 0
10465: PPUSH
10466: PPUSH
// begin canWin := false ;
10467: LD_ADDR_VAR 0 2
10471: PUSH
10472: LD_INT 0
10474: ST_TO_ADDR
// if not HasPower ( your_side ) then
10475: LD_OWVAR 2
10479: PPUSH
10480: CALL 10702 0 1
10484: NOT
10485: IFFALSE 10496
// begin Multiplayer_Loose_Message ;
10487: CALL_OW 521
// enable ( mpLose ) ;
10491: LD_INT 102
10493: ENABLE_MARKED
// end else
10494: GO 10657
// begin canWin := true ;
10496: LD_ADDR_VAR 0 2
10500: PUSH
10501: LD_INT 1
10503: ST_TO_ADDR
// for i := 1 to 8 do
10504: LD_ADDR_VAR 0 1
10508: PUSH
10509: DOUBLE
10510: LD_INT 1
10512: DEC
10513: ST_TO_ADDR
10514: LD_INT 8
10516: PUSH
10517: FOR_TO
10518: IFFALSE 10643
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
10520: LD_EXP 7
10524: PUSH
10525: LD_VAR 0 1
10529: ARRAY
10530: IFFALSE 10543
10532: PUSH
10533: LD_VAR 0 1
10537: PPUSH
10538: CALL_OW 108
10542: AND
10543: IFFALSE 10557
10545: PUSH
10546: LD_VAR 0 1
10550: PUSH
10551: LD_OWVAR 2
10555: NONEQUAL
10556: AND
10557: IFFALSE 10641
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
10559: LD_EXP 8
10563: PUSH
10564: LD_VAR 0 1
10568: ARRAY
10569: NOT
10570: IFTRUE 10618
10572: PUSH
10573: LD_EXP 8
10577: PUSH
10578: LD_VAR 0 1
10582: ARRAY
10583: PUSH
10584: LD_EXP 8
10588: PUSH
10589: LD_OWVAR 2
10593: ARRAY
10594: NONEQUAL
10595: IFFALSE 10617
10597: PUSH
10598: LD_OWVAR 2
10602: PPUSH
10603: LD_VAR 0 1
10607: PPUSH
10608: CALL_OW 81
10612: PUSH
10613: LD_INT 1
10615: NONEQUAL
10616: AND
10617: OR
10618: IFFALSE 10641
// if HasPower ( i ) then
10620: LD_VAR 0 1
10624: PPUSH
10625: CALL 10702 0 1
10629: IFFALSE 10641
// begin canWin := false ;
10631: LD_ADDR_VAR 0 2
10635: PUSH
10636: LD_INT 0
10638: ST_TO_ADDR
// break ;
10639: GO 10643
// end ;
10641: GO 10517
10643: POP
10644: POP
// if canWin then
10645: LD_VAR 0 2
10649: IFFALSE 10656
// enable ( mpWin ) else
10651: LD_INT 101
10653: ENABLE_MARKED
10654: GO 10657
// enable ;
10656: ENABLE
// end ; end ;
10657: PPOPN 2
10659: END
// function CanWinLoose ; begin
10660: LD_INT 0
10662: PPUSH
// result := true ;
10663: LD_ADDR_VAR 0 1
10667: PUSH
10668: LD_INT 1
10670: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
10671: CALL_OW 531
10675: IFFALSE 10687
10677: PUSH
10678: CALL_OW 519
10682: PUSH
10683: LD_INT 1
10685: GREATER
10686: AND
10687: IFFALSE 10697
// result := false ;
10689: LD_ADDR_VAR 0 1
10693: PUSH
10694: LD_INT 0
10696: ST_TO_ADDR
// end ;
10697: LD_VAR 0 1
10701: RET
// function HasPower ( i ) ; begin
10702: LD_INT 0
10704: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
10705: LD_INT 22
10707: PUSH
10708: LD_VAR 0 1
10712: PUSH
10713: EMPTY
10714: LIST
10715: LIST
10716: PUSH
10717: LD_INT 2
10719: PUSH
10720: LD_INT 30
10722: PUSH
10723: LD_INT 0
10725: PUSH
10726: EMPTY
10727: LIST
10728: LIST
10729: PUSH
10730: LD_INT 30
10732: PUSH
10733: LD_INT 1
10735: PUSH
10736: EMPTY
10737: LIST
10738: LIST
10739: PUSH
10740: EMPTY
10741: LIST
10742: LIST
10743: LIST
10744: PUSH
10745: EMPTY
10746: LIST
10747: LIST
10748: PPUSH
10749: CALL_OW 69
10753: NOT
10754: IFFALSE 10758
// exit ;
10756: GO 10823
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
10758: LD_ADDR_VAR 0 2
10762: PUSH
10763: LD_INT 22
10765: PUSH
10766: LD_VAR 0 1
10770: PUSH
10771: EMPTY
10772: LIST
10773: LIST
10774: PUSH
10775: LD_INT 2
10777: PUSH
10778: LD_INT 21
10780: PUSH
10781: LD_INT 1
10783: PUSH
10784: EMPTY
10785: LIST
10786: LIST
10787: PUSH
10788: LD_INT 33
10790: PUSH
10791: LD_INT 3
10793: PUSH
10794: EMPTY
10795: LIST
10796: LIST
10797: PUSH
10798: LD_INT 33
10800: PUSH
10801: LD_INT 5
10803: PUSH
10804: EMPTY
10805: LIST
10806: LIST
10807: PUSH
10808: EMPTY
10809: LIST
10810: LIST
10811: LIST
10812: LIST
10813: PUSH
10814: EMPTY
10815: LIST
10816: LIST
10817: PPUSH
10818: CALL_OW 69
10822: ST_TO_ADDR
// end ; end_of_file
10823: LD_VAR 0 2
10827: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvivalHardcore do var i ;
10828: LD_EXP 39
10832: IFFALSE 10875
10834: GO 10836
10836: DISABLE
10837: LD_INT 0
10839: PPUSH
// begin for i := 1 to 8 do
10840: LD_ADDR_VAR 0 1
10844: PUSH
10845: DOUBLE
10846: LD_INT 1
10848: DEC
10849: ST_TO_ADDR
10850: LD_INT 8
10852: PUSH
10853: FOR_TO
10854: IFFALSE 10873
// SetRestrict ( b_depot , i , state_disabled ) ;
10856: LD_INT 0
10858: PPUSH
10859: LD_VAR 0 1
10863: PPUSH
10864: LD_INT 0
10866: PPUSH
10867: CALL_OW 324
10871: GO 10853
10873: POP
10874: POP
// end ;
10875: PPOPN 1
10877: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvivalHardcore do var i , canWin ;
10878: LD_EXP 39
10882: IFFALSE 10890
10884: PUSH
10885: CALL 11100 0 0
10889: AND
10890: IFFALSE 10898
10892: PUSH
10893: LD_OWVAR 4
10897: AND
10898: IFFALSE 11097
10900: GO 10902
10902: DISABLE
10903: LD_INT 0
10905: PPUSH
10906: PPUSH
// begin canWin := false ;
10907: LD_ADDR_VAR 0 2
10911: PUSH
10912: LD_INT 0
10914: ST_TO_ADDR
// if not HasPower ( your_side ) then
10915: LD_OWVAR 2
10919: PPUSH
10920: CALL 11142 0 1
10924: NOT
10925: IFFALSE 10936
// begin Multiplayer_Loose_Message ;
10927: CALL_OW 521
// enable ( mpLose ) ;
10931: LD_INT 102
10933: ENABLE_MARKED
// end else
10934: GO 11097
// begin canWin := true ;
10936: LD_ADDR_VAR 0 2
10940: PUSH
10941: LD_INT 1
10943: ST_TO_ADDR
// for i := 1 to 8 do
10944: LD_ADDR_VAR 0 1
10948: PUSH
10949: DOUBLE
10950: LD_INT 1
10952: DEC
10953: ST_TO_ADDR
10954: LD_INT 8
10956: PUSH
10957: FOR_TO
10958: IFFALSE 11083
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
10960: LD_EXP 7
10964: PUSH
10965: LD_VAR 0 1
10969: ARRAY
10970: IFFALSE 10983
10972: PUSH
10973: LD_VAR 0 1
10977: PPUSH
10978: CALL_OW 108
10982: AND
10983: IFFALSE 10997
10985: PUSH
10986: LD_VAR 0 1
10990: PUSH
10991: LD_OWVAR 2
10995: NONEQUAL
10996: AND
10997: IFFALSE 11081
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
10999: LD_EXP 8
11003: PUSH
11004: LD_VAR 0 1
11008: ARRAY
11009: NOT
11010: IFTRUE 11058
11012: PUSH
11013: LD_EXP 8
11017: PUSH
11018: LD_VAR 0 1
11022: ARRAY
11023: PUSH
11024: LD_EXP 8
11028: PUSH
11029: LD_OWVAR 2
11033: ARRAY
11034: NONEQUAL
11035: IFFALSE 11057
11037: PUSH
11038: LD_OWVAR 2
11042: PPUSH
11043: LD_VAR 0 1
11047: PPUSH
11048: CALL_OW 81
11052: PUSH
11053: LD_INT 1
11055: NONEQUAL
11056: AND
11057: OR
11058: IFFALSE 11081
// if HasPower ( i ) then
11060: LD_VAR 0 1
11064: PPUSH
11065: CALL 11142 0 1
11069: IFFALSE 11081
// begin canWin := false ;
11071: LD_ADDR_VAR 0 2
11075: PUSH
11076: LD_INT 0
11078: ST_TO_ADDR
// break ;
11079: GO 11083
// end ;
11081: GO 10957
11083: POP
11084: POP
// if canWin then
11085: LD_VAR 0 2
11089: IFFALSE 11096
// enable ( mpWin ) else
11091: LD_INT 101
11093: ENABLE_MARKED
11094: GO 11097
// enable ;
11096: ENABLE
// end ; end ;
11097: PPOPN 2
11099: END
// function CanWinLoose ; begin
11100: LD_INT 0
11102: PPUSH
// result := true ;
11103: LD_ADDR_VAR 0 1
11107: PUSH
11108: LD_INT 1
11110: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
11111: CALL_OW 531
11115: IFFALSE 11127
11117: PUSH
11118: CALL_OW 519
11122: PUSH
11123: LD_INT 1
11125: GREATER
11126: AND
11127: IFFALSE 11137
// result := false ;
11129: LD_ADDR_VAR 0 1
11133: PUSH
11134: LD_INT 0
11136: ST_TO_ADDR
// end ;
11137: LD_VAR 0 1
11141: RET
// function HasPower ( i ) ; begin
11142: LD_INT 0
11144: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
11145: LD_INT 22
11147: PUSH
11148: LD_VAR 0 1
11152: PUSH
11153: EMPTY
11154: LIST
11155: LIST
11156: PUSH
11157: LD_INT 2
11159: PUSH
11160: LD_INT 30
11162: PUSH
11163: LD_INT 0
11165: PUSH
11166: EMPTY
11167: LIST
11168: LIST
11169: PUSH
11170: LD_INT 30
11172: PUSH
11173: LD_INT 1
11175: PUSH
11176: EMPTY
11177: LIST
11178: LIST
11179: PUSH
11180: EMPTY
11181: LIST
11182: LIST
11183: LIST
11184: PUSH
11185: EMPTY
11186: LIST
11187: LIST
11188: PPUSH
11189: CALL_OW 69
11193: NOT
11194: IFFALSE 11198
// exit ;
11196: GO 11263
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
11198: LD_ADDR_VAR 0 2
11202: PUSH
11203: LD_INT 22
11205: PUSH
11206: LD_VAR 0 1
11210: PUSH
11211: EMPTY
11212: LIST
11213: LIST
11214: PUSH
11215: LD_INT 2
11217: PUSH
11218: LD_INT 21
11220: PUSH
11221: LD_INT 1
11223: PUSH
11224: EMPTY
11225: LIST
11226: LIST
11227: PUSH
11228: LD_INT 33
11230: PUSH
11231: LD_INT 3
11233: PUSH
11234: EMPTY
11235: LIST
11236: LIST
11237: PUSH
11238: LD_INT 33
11240: PUSH
11241: LD_INT 5
11243: PUSH
11244: EMPTY
11245: LIST
11246: LIST
11247: PUSH
11248: EMPTY
11249: LIST
11250: LIST
11251: LIST
11252: LIST
11253: PUSH
11254: EMPTY
11255: LIST
11256: LIST
11257: PPUSH
11258: CALL_OW 69
11262: ST_TO_ADDR
// end ; end_of_file
11263: LD_VAR 0 2
11267: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
11268: LD_INT 0
11270: PPUSH
11271: PPUSH
// if exist_mode then
11272: LD_VAR 0 2
11276: IFFALSE 11322
// begin unit := CreateCharacter ( prefix & ident ) ;
11278: LD_ADDR_VAR 0 5
11282: PUSH
11283: LD_VAR 0 3
11287: PUSH
11288: LD_VAR 0 1
11292: STR
11293: PPUSH
11294: CALL_OW 34
11298: ST_TO_ADDR
// if unit then
11299: LD_VAR 0 5
11303: IFFALSE 11320
// DeleteCharacters ( prefix & ident ) ;
11305: LD_VAR 0 3
11309: PUSH
11310: LD_VAR 0 1
11314: STR
11315: PPUSH
11316: CALL_OW 40
// end else
11320: GO 11337
// unit := NewCharacter ( ident ) ;
11322: LD_ADDR_VAR 0 5
11326: PUSH
11327: LD_VAR 0 1
11331: PPUSH
11332: CALL_OW 25
11336: ST_TO_ADDR
// result := unit ;
11337: LD_ADDR_VAR 0 4
11341: PUSH
11342: LD_VAR 0 5
11346: ST_TO_ADDR
// end ;
11347: LD_VAR 0 4
11351: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
11352: LD_INT 0
11354: PPUSH
11355: PPUSH
// if exist_mode then
11356: LD_VAR 0 2
11360: IFFALSE 11385
// unit := CreateCharacter ( prefix & ident ) else
11362: LD_ADDR_VAR 0 5
11366: PUSH
11367: LD_VAR 0 3
11371: PUSH
11372: LD_VAR 0 1
11376: STR
11377: PPUSH
11378: CALL_OW 34
11382: ST_TO_ADDR
11383: GO 11400
// unit := NewCharacter ( ident ) ;
11385: LD_ADDR_VAR 0 5
11389: PUSH
11390: LD_VAR 0 1
11394: PPUSH
11395: CALL_OW 25
11399: ST_TO_ADDR
// result := unit ;
11400: LD_ADDR_VAR 0 4
11404: PUSH
11405: LD_VAR 0 5
11409: ST_TO_ADDR
// end ;
11410: LD_VAR 0 4
11414: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
11415: LD_INT 0
11417: PPUSH
11418: PPUSH
// if not side or not nation then
11419: LD_VAR 0 1
11423: NOT
11424: IFTRUE 11433
11426: PUSH
11427: LD_VAR 0 2
11431: NOT
11432: OR
11433: IFFALSE 11437
// exit ;
11435: GO 12231
// case nation of nation_american :
11437: LD_VAR 0 2
11441: PUSH
11442: LD_INT 1
11444: DOUBLE
11445: EQUAL
11446: IFTRUE 11450
11448: GO 11672
11450: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
11451: LD_ADDR_VAR 0 4
11455: PUSH
11456: LD_INT 35
11458: PUSH
11459: LD_INT 45
11461: PUSH
11462: LD_INT 46
11464: PUSH
11465: LD_INT 47
11467: PUSH
11468: LD_INT 82
11470: PUSH
11471: LD_INT 83
11473: PUSH
11474: LD_INT 84
11476: PUSH
11477: LD_INT 85
11479: PUSH
11480: LD_INT 86
11482: PUSH
11483: LD_INT 1
11485: PUSH
11486: LD_INT 2
11488: PUSH
11489: LD_INT 6
11491: PUSH
11492: LD_INT 15
11494: PUSH
11495: LD_INT 16
11497: PUSH
11498: LD_INT 7
11500: PUSH
11501: LD_INT 12
11503: PUSH
11504: LD_INT 13
11506: PUSH
11507: LD_INT 10
11509: PUSH
11510: LD_INT 14
11512: PUSH
11513: LD_INT 20
11515: PUSH
11516: LD_INT 21
11518: PUSH
11519: LD_INT 22
11521: PUSH
11522: LD_INT 25
11524: PUSH
11525: LD_INT 32
11527: PUSH
11528: LD_INT 27
11530: PUSH
11531: LD_INT 36
11533: PUSH
11534: LD_INT 69
11536: PUSH
11537: LD_INT 39
11539: PUSH
11540: LD_INT 34
11542: PUSH
11543: LD_INT 40
11545: PUSH
11546: LD_INT 48
11548: PUSH
11549: LD_INT 49
11551: PUSH
11552: LD_INT 50
11554: PUSH
11555: LD_INT 51
11557: PUSH
11558: LD_INT 52
11560: PUSH
11561: LD_INT 53
11563: PUSH
11564: LD_INT 54
11566: PUSH
11567: LD_INT 55
11569: PUSH
11570: LD_INT 56
11572: PUSH
11573: LD_INT 57
11575: PUSH
11576: LD_INT 58
11578: PUSH
11579: LD_INT 59
11581: PUSH
11582: LD_INT 60
11584: PUSH
11585: LD_INT 61
11587: PUSH
11588: LD_INT 62
11590: PUSH
11591: LD_INT 80
11593: PUSH
11594: LD_INT 82
11596: PUSH
11597: LD_INT 83
11599: PUSH
11600: LD_INT 84
11602: PUSH
11603: LD_INT 85
11605: PUSH
11606: LD_INT 86
11608: PUSH
11609: LD_INT 90
11611: PUSH
11612: LD_INT 93
11614: PUSH
11615: EMPTY
11616: LIST
11617: LIST
11618: LIST
11619: LIST
11620: LIST
11621: LIST
11622: LIST
11623: LIST
11624: LIST
11625: LIST
11626: LIST
11627: LIST
11628: LIST
11629: LIST
11630: LIST
11631: LIST
11632: LIST
11633: LIST
11634: LIST
11635: LIST
11636: LIST
11637: LIST
11638: LIST
11639: LIST
11640: LIST
11641: LIST
11642: LIST
11643: LIST
11644: LIST
11645: LIST
11646: LIST
11647: LIST
11648: LIST
11649: LIST
11650: LIST
11651: LIST
11652: LIST
11653: LIST
11654: LIST
11655: LIST
11656: LIST
11657: LIST
11658: LIST
11659: LIST
11660: LIST
11661: LIST
11662: LIST
11663: LIST
11664: LIST
11665: LIST
11666: LIST
11667: LIST
11668: LIST
11669: ST_TO_ADDR
11670: GO 12153
11672: LD_INT 2
11674: DOUBLE
11675: EQUAL
11676: IFTRUE 11680
11678: GO 11914
11680: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
11681: LD_ADDR_VAR 0 4
11685: PUSH
11686: LD_INT 35
11688: PUSH
11689: LD_INT 45
11691: PUSH
11692: LD_INT 46
11694: PUSH
11695: LD_INT 47
11697: PUSH
11698: LD_INT 82
11700: PUSH
11701: LD_INT 83
11703: PUSH
11704: LD_INT 84
11706: PUSH
11707: LD_INT 85
11709: PUSH
11710: LD_INT 87
11712: PUSH
11713: LD_INT 70
11715: PUSH
11716: LD_INT 1
11718: PUSH
11719: LD_INT 11
11721: PUSH
11722: LD_INT 3
11724: PUSH
11725: LD_INT 4
11727: PUSH
11728: LD_INT 5
11730: PUSH
11731: LD_INT 6
11733: PUSH
11734: LD_INT 15
11736: PUSH
11737: LD_INT 18
11739: PUSH
11740: LD_INT 7
11742: PUSH
11743: LD_INT 17
11745: PUSH
11746: LD_INT 8
11748: PUSH
11749: LD_INT 20
11751: PUSH
11752: LD_INT 21
11754: PUSH
11755: LD_INT 22
11757: PUSH
11758: LD_INT 72
11760: PUSH
11761: LD_INT 26
11763: PUSH
11764: LD_INT 69
11766: PUSH
11767: LD_INT 39
11769: PUSH
11770: LD_INT 40
11772: PUSH
11773: LD_INT 41
11775: PUSH
11776: LD_INT 42
11778: PUSH
11779: LD_INT 43
11781: PUSH
11782: LD_INT 48
11784: PUSH
11785: LD_INT 49
11787: PUSH
11788: LD_INT 50
11790: PUSH
11791: LD_INT 51
11793: PUSH
11794: LD_INT 52
11796: PUSH
11797: LD_INT 53
11799: PUSH
11800: LD_INT 54
11802: PUSH
11803: LD_INT 55
11805: PUSH
11806: LD_INT 56
11808: PUSH
11809: LD_INT 60
11811: PUSH
11812: LD_INT 61
11814: PUSH
11815: LD_INT 62
11817: PUSH
11818: LD_INT 66
11820: PUSH
11821: LD_INT 67
11823: PUSH
11824: LD_INT 68
11826: PUSH
11827: LD_INT 81
11829: PUSH
11830: LD_INT 82
11832: PUSH
11833: LD_INT 83
11835: PUSH
11836: LD_INT 84
11838: PUSH
11839: LD_INT 85
11841: PUSH
11842: LD_INT 87
11844: PUSH
11845: LD_INT 88
11847: PUSH
11848: LD_INT 92
11850: PUSH
11851: LD_INT 94
11853: PUSH
11854: EMPTY
11855: LIST
11856: LIST
11857: LIST
11858: LIST
11859: LIST
11860: LIST
11861: LIST
11862: LIST
11863: LIST
11864: LIST
11865: LIST
11866: LIST
11867: LIST
11868: LIST
11869: LIST
11870: LIST
11871: LIST
11872: LIST
11873: LIST
11874: LIST
11875: LIST
11876: LIST
11877: LIST
11878: LIST
11879: LIST
11880: LIST
11881: LIST
11882: LIST
11883: LIST
11884: LIST
11885: LIST
11886: LIST
11887: LIST
11888: LIST
11889: LIST
11890: LIST
11891: LIST
11892: LIST
11893: LIST
11894: LIST
11895: LIST
11896: LIST
11897: LIST
11898: LIST
11899: LIST
11900: LIST
11901: LIST
11902: LIST
11903: LIST
11904: LIST
11905: LIST
11906: LIST
11907: LIST
11908: LIST
11909: LIST
11910: LIST
11911: ST_TO_ADDR
11912: GO 12153
11914: LD_INT 3
11916: DOUBLE
11917: EQUAL
11918: IFTRUE 11922
11920: GO 12152
11922: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
11923: LD_ADDR_VAR 0 4
11927: PUSH
11928: LD_INT 46
11930: PUSH
11931: LD_INT 47
11933: PUSH
11934: LD_INT 1
11936: PUSH
11937: LD_INT 2
11939: PUSH
11940: LD_INT 82
11942: PUSH
11943: LD_INT 83
11945: PUSH
11946: LD_INT 84
11948: PUSH
11949: LD_INT 85
11951: PUSH
11952: LD_INT 86
11954: PUSH
11955: LD_INT 11
11957: PUSH
11958: LD_INT 9
11960: PUSH
11961: LD_INT 20
11963: PUSH
11964: LD_INT 19
11966: PUSH
11967: LD_INT 21
11969: PUSH
11970: LD_INT 24
11972: PUSH
11973: LD_INT 22
11975: PUSH
11976: LD_INT 25
11978: PUSH
11979: LD_INT 28
11981: PUSH
11982: LD_INT 29
11984: PUSH
11985: LD_INT 30
11987: PUSH
11988: LD_INT 31
11990: PUSH
11991: LD_INT 37
11993: PUSH
11994: LD_INT 38
11996: PUSH
11997: LD_INT 32
11999: PUSH
12000: LD_INT 27
12002: PUSH
12003: LD_INT 33
12005: PUSH
12006: LD_INT 69
12008: PUSH
12009: LD_INT 39
12011: PUSH
12012: LD_INT 34
12014: PUSH
12015: LD_INT 40
12017: PUSH
12018: LD_INT 71
12020: PUSH
12021: LD_INT 23
12023: PUSH
12024: LD_INT 44
12026: PUSH
12027: LD_INT 48
12029: PUSH
12030: LD_INT 49
12032: PUSH
12033: LD_INT 50
12035: PUSH
12036: LD_INT 51
12038: PUSH
12039: LD_INT 52
12041: PUSH
12042: LD_INT 53
12044: PUSH
12045: LD_INT 54
12047: PUSH
12048: LD_INT 55
12050: PUSH
12051: LD_INT 56
12053: PUSH
12054: LD_INT 57
12056: PUSH
12057: LD_INT 58
12059: PUSH
12060: LD_INT 59
12062: PUSH
12063: LD_INT 63
12065: PUSH
12066: LD_INT 64
12068: PUSH
12069: LD_INT 65
12071: PUSH
12072: LD_INT 82
12074: PUSH
12075: LD_INT 83
12077: PUSH
12078: LD_INT 84
12080: PUSH
12081: LD_INT 85
12083: PUSH
12084: LD_INT 86
12086: PUSH
12087: LD_INT 89
12089: PUSH
12090: LD_INT 91
12092: PUSH
12093: EMPTY
12094: LIST
12095: LIST
12096: LIST
12097: LIST
12098: LIST
12099: LIST
12100: LIST
12101: LIST
12102: LIST
12103: LIST
12104: LIST
12105: LIST
12106: LIST
12107: LIST
12108: LIST
12109: LIST
12110: LIST
12111: LIST
12112: LIST
12113: LIST
12114: LIST
12115: LIST
12116: LIST
12117: LIST
12118: LIST
12119: LIST
12120: LIST
12121: LIST
12122: LIST
12123: LIST
12124: LIST
12125: LIST
12126: LIST
12127: LIST
12128: LIST
12129: LIST
12130: LIST
12131: LIST
12132: LIST
12133: LIST
12134: LIST
12135: LIST
12136: LIST
12137: LIST
12138: LIST
12139: LIST
12140: LIST
12141: LIST
12142: LIST
12143: LIST
12144: LIST
12145: LIST
12146: LIST
12147: LIST
12148: LIST
12149: ST_TO_ADDR
12150: GO 12153
12152: POP
// if state > - 1 and state < 3 then
12153: LD_VAR 0 3
12157: PUSH
12158: LD_INT 1
12160: NEG
12161: GREATER
12162: IFFALSE 12174
12164: PUSH
12165: LD_VAR 0 3
12169: PUSH
12170: LD_INT 3
12172: LESS
12173: AND
12174: IFFALSE 12231
// for i in result do
12176: LD_ADDR_VAR 0 5
12180: PUSH
12181: LD_VAR 0 4
12185: PUSH
12186: FOR_IN
12187: IFFALSE 12229
// if GetTech ( i , side ) <> state then
12189: LD_VAR 0 5
12193: PPUSH
12194: LD_VAR 0 1
12198: PPUSH
12199: CALL_OW 321
12203: PUSH
12204: LD_VAR 0 3
12208: NONEQUAL
12209: IFFALSE 12227
// result := result diff i ;
12211: LD_ADDR_VAR 0 4
12215: PUSH
12216: LD_VAR 0 4
12220: PUSH
12221: LD_VAR 0 5
12225: DIFF
12226: ST_TO_ADDR
12227: GO 12186
12229: POP
12230: POP
// end ;
12231: LD_VAR 0 4
12235: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
12236: LD_INT 0
12238: PPUSH
12239: PPUSH
12240: PPUSH
// result := true ;
12241: LD_ADDR_VAR 0 3
12245: PUSH
12246: LD_INT 1
12248: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
12249: LD_ADDR_VAR 0 5
12253: PUSH
12254: LD_VAR 0 2
12258: PPUSH
12259: CALL_OW 480
12263: ST_TO_ADDR
// if not tmp then
12264: LD_VAR 0 5
12268: NOT
12269: IFFALSE 12273
// exit ;
12271: GO 12322
// for i in tmp do
12273: LD_ADDR_VAR 0 4
12277: PUSH
12278: LD_VAR 0 5
12282: PUSH
12283: FOR_IN
12284: IFFALSE 12320
// if GetTech ( i , side ) <> state_researched then
12286: LD_VAR 0 4
12290: PPUSH
12291: LD_VAR 0 1
12295: PPUSH
12296: CALL_OW 321
12300: PUSH
12301: LD_INT 2
12303: NONEQUAL
12304: IFFALSE 12318
// begin result := false ;
12306: LD_ADDR_VAR 0 3
12310: PUSH
12311: LD_INT 0
12313: ST_TO_ADDR
// exit ;
12314: POP
12315: POP
12316: GO 12322
// end ;
12318: GO 12283
12320: POP
12321: POP
// end ;
12322: LD_VAR 0 3
12326: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
12327: LD_INT 0
12329: PPUSH
12330: PPUSH
12331: PPUSH
12332: PPUSH
12333: PPUSH
12334: PPUSH
12335: PPUSH
12336: PPUSH
12337: PPUSH
12338: PPUSH
12339: PPUSH
12340: PPUSH
12341: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
12342: LD_VAR 0 1
12346: NOT
12347: IFTRUE 12364
12349: PUSH
12350: LD_VAR 0 1
12354: PPUSH
12355: CALL_OW 257
12359: PUSH
12360: LD_INT 9
12362: NONEQUAL
12363: OR
12364: IFFALSE 12368
// exit ;
12366: GO 12947
// side := GetSide ( unit ) ;
12368: LD_ADDR_VAR 0 9
12372: PUSH
12373: LD_VAR 0 1
12377: PPUSH
12378: CALL_OW 255
12382: ST_TO_ADDR
// tech_space := tech_spacanom ;
12383: LD_ADDR_VAR 0 12
12387: PUSH
12388: LD_INT 29
12390: ST_TO_ADDR
// tech_time := tech_taurad ;
12391: LD_ADDR_VAR 0 13
12395: PUSH
12396: LD_INT 28
12398: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
12399: LD_ADDR_VAR 0 11
12403: PUSH
12404: LD_VAR 0 1
12408: PPUSH
12409: CALL_OW 310
12413: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
12414: LD_VAR 0 11
12418: PPUSH
12419: CALL_OW 247
12423: PUSH
12424: LD_INT 2
12426: EQUAL
12427: IFFALSE 12431
// exit ;
12429: GO 12947
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
12431: LD_ADDR_VAR 0 8
12435: PUSH
12436: LD_INT 81
12438: PUSH
12439: LD_VAR 0 9
12443: PUSH
12444: EMPTY
12445: LIST
12446: LIST
12447: PUSH
12448: LD_INT 3
12450: PUSH
12451: LD_INT 21
12453: PUSH
12454: LD_INT 3
12456: PUSH
12457: EMPTY
12458: LIST
12459: LIST
12460: PUSH
12461: EMPTY
12462: LIST
12463: LIST
12464: PUSH
12465: EMPTY
12466: LIST
12467: LIST
12468: PPUSH
12469: CALL_OW 69
12473: ST_TO_ADDR
// if not tmp then
12474: LD_VAR 0 8
12478: NOT
12479: IFFALSE 12483
// exit ;
12481: GO 12947
// if in_unit then
12483: LD_VAR 0 11
12487: IFFALSE 12511
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
12489: LD_ADDR_VAR 0 10
12493: PUSH
12494: LD_VAR 0 8
12498: PPUSH
12499: LD_VAR 0 11
12503: PPUSH
12504: CALL_OW 74
12508: ST_TO_ADDR
12509: GO 12531
// enemy := NearestUnitToUnit ( tmp , unit ) ;
12511: LD_ADDR_VAR 0 10
12515: PUSH
12516: LD_VAR 0 8
12520: PPUSH
12521: LD_VAR 0 1
12525: PPUSH
12526: CALL_OW 74
12530: ST_TO_ADDR
// if not enemy then
12531: LD_VAR 0 10
12535: NOT
12536: IFFALSE 12540
// exit ;
12538: GO 12947
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
12540: LD_VAR 0 11
12544: IFFALSE 12566
12546: PUSH
12547: LD_VAR 0 11
12551: PPUSH
12552: LD_VAR 0 10
12556: PPUSH
12557: CALL_OW 296
12561: PUSH
12562: LD_INT 13
12564: GREATER
12565: AND
12566: IFTRUE 12588
12568: PUSH
12569: LD_VAR 0 1
12573: PPUSH
12574: LD_VAR 0 10
12578: PPUSH
12579: CALL_OW 296
12583: PUSH
12584: LD_INT 12
12586: GREATER
12587: OR
12588: IFFALSE 12592
// exit ;
12590: GO 12947
// missile := [ 1 ] ;
12592: LD_ADDR_VAR 0 14
12596: PUSH
12597: LD_INT 1
12599: PUSH
12600: EMPTY
12601: LIST
12602: ST_TO_ADDR
// if Researched ( side , tech_space ) then
12603: LD_VAR 0 9
12607: PPUSH
12608: LD_VAR 0 12
12612: PPUSH
12613: CALL_OW 325
12617: IFFALSE 12646
// missile := Replace ( missile , missile + 1 , 2 ) ;
12619: LD_ADDR_VAR 0 14
12623: PUSH
12624: LD_VAR 0 14
12628: PPUSH
12629: LD_VAR 0 14
12633: PUSH
12634: LD_INT 1
12636: PLUS
12637: PPUSH
12638: LD_INT 2
12640: PPUSH
12641: CALL_OW 1
12645: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
12646: LD_VAR 0 9
12650: PPUSH
12651: LD_VAR 0 13
12655: PPUSH
12656: CALL_OW 325
12660: IFFALSE 12684
12662: PUSH
12663: LD_VAR 0 10
12667: PPUSH
12668: CALL_OW 255
12672: PPUSH
12673: LD_VAR 0 13
12677: PPUSH
12678: CALL_OW 325
12682: NOT
12683: AND
12684: IFFALSE 12713
// missile := Replace ( missile , missile + 1 , 3 ) ;
12686: LD_ADDR_VAR 0 14
12690: PUSH
12691: LD_VAR 0 14
12695: PPUSH
12696: LD_VAR 0 14
12700: PUSH
12701: LD_INT 1
12703: PLUS
12704: PPUSH
12705: LD_INT 3
12707: PPUSH
12708: CALL_OW 1
12712: ST_TO_ADDR
// if missile < 2 then
12713: LD_VAR 0 14
12717: PUSH
12718: LD_INT 2
12720: LESS
12721: IFFALSE 12725
// exit ;
12723: GO 12947
// x := GetX ( enemy ) ;
12725: LD_ADDR_VAR 0 4
12729: PUSH
12730: LD_VAR 0 10
12734: PPUSH
12735: CALL_OW 250
12739: ST_TO_ADDR
// y := GetY ( enemy ) ;
12740: LD_ADDR_VAR 0 5
12744: PUSH
12745: LD_VAR 0 10
12749: PPUSH
12750: CALL_OW 251
12754: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
12755: LD_ADDR_VAR 0 6
12759: PUSH
12760: LD_VAR 0 4
12764: PUSH
12765: LD_INT 1
12767: NEG
12768: PPUSH
12769: LD_INT 1
12771: PPUSH
12772: CALL_OW 12
12776: PLUS
12777: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
12778: LD_ADDR_VAR 0 7
12782: PUSH
12783: LD_VAR 0 5
12787: PUSH
12788: LD_INT 1
12790: NEG
12791: PPUSH
12792: LD_INT 1
12794: PPUSH
12795: CALL_OW 12
12799: PLUS
12800: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
12801: LD_VAR 0 6
12805: PPUSH
12806: LD_VAR 0 7
12810: PPUSH
12811: CALL_OW 488
12815: NOT
12816: IFFALSE 12838
// begin _x := x ;
12818: LD_ADDR_VAR 0 6
12822: PUSH
12823: LD_VAR 0 4
12827: ST_TO_ADDR
// _y := y ;
12828: LD_ADDR_VAR 0 7
12832: PUSH
12833: LD_VAR 0 5
12837: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
12838: LD_ADDR_VAR 0 3
12842: PUSH
12843: LD_INT 1
12845: PPUSH
12846: LD_VAR 0 14
12850: PPUSH
12851: CALL_OW 12
12855: ST_TO_ADDR
// case i of 1 :
12856: LD_VAR 0 3
12860: PUSH
12861: LD_INT 1
12863: DOUBLE
12864: EQUAL
12865: IFTRUE 12869
12867: GO 12886
12869: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
12870: LD_VAR 0 1
12874: PPUSH
12875: LD_VAR 0 10
12879: PPUSH
12880: CALL_OW 115
12884: GO 12947
12886: LD_INT 2
12888: DOUBLE
12889: EQUAL
12890: IFTRUE 12894
12892: GO 12916
12894: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
12895: LD_VAR 0 1
12899: PPUSH
12900: LD_VAR 0 6
12904: PPUSH
12905: LD_VAR 0 7
12909: PPUSH
12910: CALL_OW 153
12914: GO 12947
12916: LD_INT 3
12918: DOUBLE
12919: EQUAL
12920: IFTRUE 12924
12922: GO 12946
12924: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
12925: LD_VAR 0 1
12929: PPUSH
12930: LD_VAR 0 6
12934: PPUSH
12935: LD_VAR 0 7
12939: PPUSH
12940: CALL_OW 154
12944: GO 12947
12946: POP
// end ;
12947: LD_VAR 0 2
12951: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
12952: LD_INT 0
12954: PPUSH
12955: PPUSH
12956: PPUSH
12957: PPUSH
12958: PPUSH
12959: PPUSH
// if not unit or not building then
12960: LD_VAR 0 1
12964: NOT
12965: IFTRUE 12974
12967: PUSH
12968: LD_VAR 0 2
12972: NOT
12973: OR
12974: IFFALSE 12978
// exit ;
12976: GO 13136
// x := GetX ( building ) ;
12978: LD_ADDR_VAR 0 5
12982: PUSH
12983: LD_VAR 0 2
12987: PPUSH
12988: CALL_OW 250
12992: ST_TO_ADDR
// y := GetY ( building ) ;
12993: LD_ADDR_VAR 0 6
12997: PUSH
12998: LD_VAR 0 2
13002: PPUSH
13003: CALL_OW 251
13007: ST_TO_ADDR
// for i := 0 to 5 do
13008: LD_ADDR_VAR 0 4
13012: PUSH
13013: DOUBLE
13014: LD_INT 0
13016: DEC
13017: ST_TO_ADDR
13018: LD_INT 5
13020: PUSH
13021: FOR_TO
13022: IFFALSE 13134
// begin _x := ShiftX ( x , i , 3 ) ;
13024: LD_ADDR_VAR 0 7
13028: PUSH
13029: LD_VAR 0 5
13033: PPUSH
13034: LD_VAR 0 4
13038: PPUSH
13039: LD_INT 3
13041: PPUSH
13042: CALL_OW 272
13046: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
13047: LD_ADDR_VAR 0 8
13051: PUSH
13052: LD_VAR 0 6
13056: PPUSH
13057: LD_VAR 0 4
13061: PPUSH
13062: LD_INT 3
13064: PPUSH
13065: CALL_OW 273
13069: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
13070: LD_VAR 0 7
13074: PPUSH
13075: LD_VAR 0 8
13079: PPUSH
13080: CALL_OW 488
13084: NOT
13085: IFFALSE 13089
// continue ;
13087: GO 13021
// if HexInfo ( _x , _y ) = 0 then
13089: LD_VAR 0 7
13093: PPUSH
13094: LD_VAR 0 8
13098: PPUSH
13099: CALL_OW 428
13103: PUSH
13104: LD_INT 0
13106: EQUAL
13107: IFFALSE 13132
// begin ComMoveXY ( unit , _x , _y ) ;
13109: LD_VAR 0 1
13113: PPUSH
13114: LD_VAR 0 7
13118: PPUSH
13119: LD_VAR 0 8
13123: PPUSH
13124: CALL_OW 111
// exit ;
13128: POP
13129: POP
13130: GO 13136
// end ; end ;
13132: GO 13021
13134: POP
13135: POP
// end ;
13136: LD_VAR 0 3
13140: RET
// export function ScanBase ( side , base_area ) ; begin
13141: LD_INT 0
13143: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
13144: LD_ADDR_VAR 0 3
13148: PUSH
13149: LD_VAR 0 2
13153: PPUSH
13154: LD_INT 81
13156: PUSH
13157: LD_VAR 0 1
13161: PUSH
13162: EMPTY
13163: LIST
13164: LIST
13165: PPUSH
13166: CALL_OW 70
13170: ST_TO_ADDR
// end ;
13171: LD_VAR 0 3
13175: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
13176: LD_INT 0
13178: PPUSH
13179: PPUSH
13180: PPUSH
13181: PPUSH
// result := false ;
13182: LD_ADDR_VAR 0 2
13186: PUSH
13187: LD_INT 0
13189: ST_TO_ADDR
// side := GetSide ( unit ) ;
13190: LD_ADDR_VAR 0 3
13194: PUSH
13195: LD_VAR 0 1
13199: PPUSH
13200: CALL_OW 255
13204: ST_TO_ADDR
// nat := GetNation ( unit ) ;
13205: LD_ADDR_VAR 0 4
13209: PUSH
13210: LD_VAR 0 1
13214: PPUSH
13215: CALL_OW 248
13219: ST_TO_ADDR
// case nat of 1 :
13220: LD_VAR 0 4
13224: PUSH
13225: LD_INT 1
13227: DOUBLE
13228: EQUAL
13229: IFTRUE 13233
13231: GO 13244
13233: POP
// tech := tech_lassight ; 2 :
13234: LD_ADDR_VAR 0 5
13238: PUSH
13239: LD_INT 12
13241: ST_TO_ADDR
13242: GO 13283
13244: LD_INT 2
13246: DOUBLE
13247: EQUAL
13248: IFTRUE 13252
13250: GO 13263
13252: POP
// tech := tech_mortar ; 3 :
13253: LD_ADDR_VAR 0 5
13257: PUSH
13258: LD_INT 41
13260: ST_TO_ADDR
13261: GO 13283
13263: LD_INT 3
13265: DOUBLE
13266: EQUAL
13267: IFTRUE 13271
13269: GO 13282
13271: POP
// tech := tech_bazooka ; end ;
13272: LD_ADDR_VAR 0 5
13276: PUSH
13277: LD_INT 44
13279: ST_TO_ADDR
13280: GO 13283
13282: POP
// if Researched ( side , tech ) then
13283: LD_VAR 0 3
13287: PPUSH
13288: LD_VAR 0 5
13292: PPUSH
13293: CALL_OW 325
13297: IFFALSE 13324
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
13299: LD_ADDR_VAR 0 2
13303: PUSH
13304: LD_INT 5
13306: PUSH
13307: LD_INT 8
13309: PUSH
13310: LD_INT 9
13312: PUSH
13313: EMPTY
13314: LIST
13315: LIST
13316: LIST
13317: PUSH
13318: LD_VAR 0 4
13322: ARRAY
13323: ST_TO_ADDR
// end ;
13324: LD_VAR 0 2
13328: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
13329: LD_INT 0
13331: PPUSH
13332: PPUSH
13333: PPUSH
// if not mines then
13334: LD_VAR 0 2
13338: NOT
13339: IFFALSE 13343
// exit ;
13341: GO 13487
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
13343: LD_ADDR_VAR 0 5
13347: PUSH
13348: LD_INT 81
13350: PUSH
13351: LD_VAR 0 1
13355: PUSH
13356: EMPTY
13357: LIST
13358: LIST
13359: PUSH
13360: LD_INT 3
13362: PUSH
13363: LD_INT 21
13365: PUSH
13366: LD_INT 3
13368: PUSH
13369: EMPTY
13370: LIST
13371: LIST
13372: PUSH
13373: EMPTY
13374: LIST
13375: LIST
13376: PUSH
13377: EMPTY
13378: LIST
13379: LIST
13380: PPUSH
13381: CALL_OW 69
13385: ST_TO_ADDR
// for i in mines do
13386: LD_ADDR_VAR 0 4
13390: PUSH
13391: LD_VAR 0 2
13395: PUSH
13396: FOR_IN
13397: IFFALSE 13485
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
13399: LD_VAR 0 4
13403: PUSH
13404: LD_INT 1
13406: ARRAY
13407: PPUSH
13408: LD_VAR 0 4
13412: PUSH
13413: LD_INT 2
13415: ARRAY
13416: PPUSH
13417: CALL_OW 458
13421: NOT
13422: IFFALSE 13426
// continue ;
13424: GO 13396
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
13426: LD_VAR 0 4
13430: PUSH
13431: LD_INT 1
13433: ARRAY
13434: PPUSH
13435: LD_VAR 0 4
13439: PUSH
13440: LD_INT 2
13442: ARRAY
13443: PPUSH
13444: CALL_OW 428
13448: PUSH
13449: LD_VAR 0 5
13453: IN
13454: IFFALSE 13483
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
13456: LD_VAR 0 4
13460: PUSH
13461: LD_INT 1
13463: ARRAY
13464: PPUSH
13465: LD_VAR 0 4
13469: PUSH
13470: LD_INT 2
13472: ARRAY
13473: PPUSH
13474: LD_VAR 0 1
13478: PPUSH
13479: CALL_OW 456
// end ;
13483: GO 13396
13485: POP
13486: POP
// end ;
13487: LD_VAR 0 3
13491: RET
// export function Count ( array ) ; begin
13492: LD_INT 0
13494: PPUSH
// result := array + 0 ;
13495: LD_ADDR_VAR 0 2
13499: PUSH
13500: LD_VAR 0 1
13504: PUSH
13505: LD_INT 0
13507: PLUS
13508: ST_TO_ADDR
// end ;
13509: LD_VAR 0 2
13513: RET
// export function IsEmpty ( building ) ; begin
13514: LD_INT 0
13516: PPUSH
// if not building then
13517: LD_VAR 0 1
13521: NOT
13522: IFFALSE 13526
// exit ;
13524: GO 13569
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
13526: LD_ADDR_VAR 0 2
13530: PUSH
13531: LD_VAR 0 1
13535: PUSH
13536: LD_INT 22
13538: PUSH
13539: LD_VAR 0 1
13543: PPUSH
13544: CALL_OW 255
13548: PUSH
13549: EMPTY
13550: LIST
13551: LIST
13552: PUSH
13553: LD_INT 58
13555: PUSH
13556: EMPTY
13557: LIST
13558: PUSH
13559: EMPTY
13560: LIST
13561: LIST
13562: PPUSH
13563: CALL_OW 69
13567: IN
13568: ST_TO_ADDR
// end ;
13569: LD_VAR 0 2
13573: RET
// export function IsNotFull ( building ) ; var places ; begin
13574: LD_INT 0
13576: PPUSH
13577: PPUSH
// if not building then
13578: LD_VAR 0 1
13582: NOT
13583: IFFALSE 13587
// exit ;
13585: GO 13615
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
13587: LD_ADDR_VAR 0 2
13591: PUSH
13592: LD_VAR 0 1
13596: PPUSH
13597: LD_INT 3
13599: PUSH
13600: LD_INT 62
13602: PUSH
13603: EMPTY
13604: LIST
13605: PUSH
13606: EMPTY
13607: LIST
13608: LIST
13609: PPUSH
13610: CALL_OW 72
13614: ST_TO_ADDR
// end ;
13615: LD_VAR 0 2
13619: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
13620: LD_INT 0
13622: PPUSH
13623: PPUSH
13624: PPUSH
13625: PPUSH
// tmp := [ ] ;
13626: LD_ADDR_VAR 0 3
13630: PUSH
13631: EMPTY
13632: ST_TO_ADDR
// list := [ ] ;
13633: LD_ADDR_VAR 0 5
13637: PUSH
13638: EMPTY
13639: ST_TO_ADDR
// for i = 16 to 25 do
13640: LD_ADDR_VAR 0 4
13644: PUSH
13645: DOUBLE
13646: LD_INT 16
13648: DEC
13649: ST_TO_ADDR
13650: LD_INT 25
13652: PUSH
13653: FOR_TO
13654: IFFALSE 13727
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
13656: LD_ADDR_VAR 0 3
13660: PUSH
13661: LD_VAR 0 3
13665: PUSH
13666: LD_INT 22
13668: PUSH
13669: LD_VAR 0 1
13673: PPUSH
13674: CALL_OW 255
13678: PUSH
13679: EMPTY
13680: LIST
13681: LIST
13682: PUSH
13683: LD_INT 91
13685: PUSH
13686: LD_VAR 0 1
13690: PUSH
13691: LD_INT 6
13693: PUSH
13694: EMPTY
13695: LIST
13696: LIST
13697: LIST
13698: PUSH
13699: LD_INT 30
13701: PUSH
13702: LD_VAR 0 4
13706: PUSH
13707: EMPTY
13708: LIST
13709: LIST
13710: PUSH
13711: EMPTY
13712: LIST
13713: LIST
13714: LIST
13715: PUSH
13716: EMPTY
13717: LIST
13718: PPUSH
13719: CALL_OW 69
13723: ADD
13724: ST_TO_ADDR
13725: GO 13653
13727: POP
13728: POP
// for i = 1 to tmp do
13729: LD_ADDR_VAR 0 4
13733: PUSH
13734: DOUBLE
13735: LD_INT 1
13737: DEC
13738: ST_TO_ADDR
13739: LD_VAR 0 3
13743: PUSH
13744: FOR_TO
13745: IFFALSE 13833
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
13747: LD_ADDR_VAR 0 5
13751: PUSH
13752: LD_VAR 0 5
13756: PUSH
13757: LD_VAR 0 3
13761: PUSH
13762: LD_VAR 0 4
13766: ARRAY
13767: PPUSH
13768: CALL_OW 266
13772: PUSH
13773: LD_VAR 0 3
13777: PUSH
13778: LD_VAR 0 4
13782: ARRAY
13783: PPUSH
13784: CALL_OW 250
13788: PUSH
13789: LD_VAR 0 3
13793: PUSH
13794: LD_VAR 0 4
13798: ARRAY
13799: PPUSH
13800: CALL_OW 251
13804: PUSH
13805: LD_VAR 0 3
13809: PUSH
13810: LD_VAR 0 4
13814: ARRAY
13815: PPUSH
13816: CALL_OW 254
13820: PUSH
13821: EMPTY
13822: LIST
13823: LIST
13824: LIST
13825: LIST
13826: PUSH
13827: EMPTY
13828: LIST
13829: ADD
13830: ST_TO_ADDR
13831: GO 13744
13833: POP
13834: POP
// result := list ;
13835: LD_ADDR_VAR 0 2
13839: PUSH
13840: LD_VAR 0 5
13844: ST_TO_ADDR
// end ;
13845: LD_VAR 0 2
13849: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
13850: LD_INT 0
13852: PPUSH
13853: PPUSH
13854: PPUSH
13855: PPUSH
13856: PPUSH
13857: PPUSH
13858: PPUSH
// if not factory then
13859: LD_VAR 0 1
13863: NOT
13864: IFFALSE 13868
// exit ;
13866: GO 14471
// if control = control_apeman then
13868: LD_VAR 0 4
13872: PUSH
13873: LD_INT 5
13875: EQUAL
13876: IFFALSE 13985
// begin tmp := UnitsInside ( factory ) ;
13878: LD_ADDR_VAR 0 8
13882: PUSH
13883: LD_VAR 0 1
13887: PPUSH
13888: CALL_OW 313
13892: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
13893: LD_VAR 0 8
13897: PPUSH
13898: LD_INT 25
13900: PUSH
13901: LD_INT 12
13903: PUSH
13904: EMPTY
13905: LIST
13906: LIST
13907: PPUSH
13908: CALL_OW 72
13912: NOT
13913: IFFALSE 13923
// control := control_manual ;
13915: LD_ADDR_VAR 0 4
13919: PUSH
13920: LD_INT 1
13922: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
13923: LD_ADDR_VAR 0 8
13927: PUSH
13928: LD_VAR 0 1
13932: PPUSH
13933: CALL 13620 0 1
13937: ST_TO_ADDR
// if tmp then
13938: LD_VAR 0 8
13942: IFFALSE 13985
// begin for i in tmp do
13944: LD_ADDR_VAR 0 7
13948: PUSH
13949: LD_VAR 0 8
13953: PUSH
13954: FOR_IN
13955: IFFALSE 13983
// if i [ 1 ] = b_ext_radio then
13957: LD_VAR 0 7
13961: PUSH
13962: LD_INT 1
13964: ARRAY
13965: PUSH
13966: LD_INT 22
13968: EQUAL
13969: IFFALSE 13981
// begin control := control_remote ;
13971: LD_ADDR_VAR 0 4
13975: PUSH
13976: LD_INT 2
13978: ST_TO_ADDR
// break ;
13979: GO 13983
// end ;
13981: GO 13954
13983: POP
13984: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
13985: LD_VAR 0 1
13989: PPUSH
13990: LD_VAR 0 2
13994: PPUSH
13995: LD_VAR 0 3
13999: PPUSH
14000: LD_VAR 0 4
14004: PPUSH
14005: LD_VAR 0 5
14009: PPUSH
14010: CALL_OW 448
14014: IFFALSE 14049
// begin result := [ chassis , engine , control , weapon ] ;
14016: LD_ADDR_VAR 0 6
14020: PUSH
14021: LD_VAR 0 2
14025: PUSH
14026: LD_VAR 0 3
14030: PUSH
14031: LD_VAR 0 4
14035: PUSH
14036: LD_VAR 0 5
14040: PUSH
14041: EMPTY
14042: LIST
14043: LIST
14044: LIST
14045: LIST
14046: ST_TO_ADDR
// exit ;
14047: GO 14471
// end ; _chassis := AvailableChassisList ( factory ) ;
14049: LD_ADDR_VAR 0 9
14053: PUSH
14054: LD_VAR 0 1
14058: PPUSH
14059: CALL_OW 475
14063: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
14064: LD_ADDR_VAR 0 11
14068: PUSH
14069: LD_VAR 0 1
14073: PPUSH
14074: CALL_OW 476
14078: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
14079: LD_ADDR_VAR 0 12
14083: PUSH
14084: LD_VAR 0 1
14088: PPUSH
14089: CALL_OW 477
14093: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
14094: LD_ADDR_VAR 0 10
14098: PUSH
14099: LD_VAR 0 1
14103: PPUSH
14104: CALL_OW 478
14108: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
14109: LD_VAR 0 9
14113: NOT
14114: IFTRUE 14123
14116: PUSH
14117: LD_VAR 0 11
14121: NOT
14122: OR
14123: IFTRUE 14132
14125: PUSH
14126: LD_VAR 0 12
14130: NOT
14131: OR
14132: IFTRUE 14141
14134: PUSH
14135: LD_VAR 0 10
14139: NOT
14140: OR
14141: IFFALSE 14176
// begin result := [ chassis , engine , control , weapon ] ;
14143: LD_ADDR_VAR 0 6
14147: PUSH
14148: LD_VAR 0 2
14152: PUSH
14153: LD_VAR 0 3
14157: PUSH
14158: LD_VAR 0 4
14162: PUSH
14163: LD_VAR 0 5
14167: PUSH
14168: EMPTY
14169: LIST
14170: LIST
14171: LIST
14172: LIST
14173: ST_TO_ADDR
// exit ;
14174: GO 14471
// end ; if not chassis in _chassis then
14176: LD_VAR 0 2
14180: PUSH
14181: LD_VAR 0 9
14185: IN
14186: NOT
14187: IFFALSE 14213
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
14189: LD_ADDR_VAR 0 2
14193: PUSH
14194: LD_VAR 0 9
14198: PUSH
14199: LD_INT 1
14201: PPUSH
14202: LD_VAR 0 9
14206: PPUSH
14207: CALL_OW 12
14211: ARRAY
14212: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
14213: LD_VAR 0 2
14217: PPUSH
14218: LD_VAR 0 3
14222: PPUSH
14223: CALL 14476 0 2
14227: NOT
14228: IFFALSE 14289
// repeat engine := _engine [ 1 ] ;
14230: LD_ADDR_VAR 0 3
14234: PUSH
14235: LD_VAR 0 11
14239: PUSH
14240: LD_INT 1
14242: ARRAY
14243: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
14244: LD_ADDR_VAR 0 11
14248: PUSH
14249: LD_VAR 0 11
14253: PPUSH
14254: LD_INT 1
14256: PPUSH
14257: CALL_OW 3
14261: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
14262: LD_VAR 0 2
14266: PPUSH
14267: LD_VAR 0 3
14271: PPUSH
14272: CALL 14476 0 2
14276: IFTRUE 14287
14278: PUSH
14279: LD_VAR 0 11
14283: PUSH
14284: EMPTY
14285: EQUAL
14286: OR
14287: IFFALSE 14230
// if not control in _control then
14289: LD_VAR 0 4
14293: PUSH
14294: LD_VAR 0 12
14298: IN
14299: NOT
14300: IFFALSE 14326
// control := _control [ rand ( 1 , _control ) ] ;
14302: LD_ADDR_VAR 0 4
14306: PUSH
14307: LD_VAR 0 12
14311: PUSH
14312: LD_INT 1
14314: PPUSH
14315: LD_VAR 0 12
14319: PPUSH
14320: CALL_OW 12
14324: ARRAY
14325: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
14326: LD_VAR 0 2
14330: PPUSH
14331: LD_VAR 0 5
14335: PPUSH
14336: CALL 14698 0 2
14340: NOT
14341: IFFALSE 14402
// repeat weapon := _weapon [ 1 ] ;
14343: LD_ADDR_VAR 0 5
14347: PUSH
14348: LD_VAR 0 10
14352: PUSH
14353: LD_INT 1
14355: ARRAY
14356: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
14357: LD_ADDR_VAR 0 10
14361: PUSH
14362: LD_VAR 0 10
14366: PPUSH
14367: LD_INT 1
14369: PPUSH
14370: CALL_OW 3
14374: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
14375: LD_VAR 0 2
14379: PPUSH
14380: LD_VAR 0 5
14384: PPUSH
14385: CALL 14698 0 2
14389: IFTRUE 14400
14391: PUSH
14392: LD_VAR 0 10
14396: PUSH
14397: EMPTY
14398: EQUAL
14399: OR
14400: IFFALSE 14343
// result := [ ] ;
14402: LD_ADDR_VAR 0 6
14406: PUSH
14407: EMPTY
14408: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
14409: LD_VAR 0 1
14413: PPUSH
14414: LD_VAR 0 2
14418: PPUSH
14419: LD_VAR 0 3
14423: PPUSH
14424: LD_VAR 0 4
14428: PPUSH
14429: LD_VAR 0 5
14433: PPUSH
14434: CALL_OW 448
14438: IFFALSE 14471
// result := [ chassis , engine , control , weapon ] ;
14440: LD_ADDR_VAR 0 6
14444: PUSH
14445: LD_VAR 0 2
14449: PUSH
14450: LD_VAR 0 3
14454: PUSH
14455: LD_VAR 0 4
14459: PUSH
14460: LD_VAR 0 5
14464: PUSH
14465: EMPTY
14466: LIST
14467: LIST
14468: LIST
14469: LIST
14470: ST_TO_ADDR
// end ;
14471: LD_VAR 0 6
14475: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
14476: LD_INT 0
14478: PPUSH
// if not chassis or not engine then
14479: LD_VAR 0 1
14483: NOT
14484: IFTRUE 14493
14486: PUSH
14487: LD_VAR 0 2
14491: NOT
14492: OR
14493: IFFALSE 14497
// exit ;
14495: GO 14693
// case engine of engine_solar :
14497: LD_VAR 0 2
14501: PUSH
14502: LD_INT 2
14504: DOUBLE
14505: EQUAL
14506: IFTRUE 14510
14508: GO 14548
14510: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
14511: LD_ADDR_VAR 0 3
14515: PUSH
14516: LD_INT 11
14518: PUSH
14519: LD_INT 12
14521: PUSH
14522: LD_INT 13
14524: PUSH
14525: LD_INT 14
14527: PUSH
14528: LD_INT 1
14530: PUSH
14531: LD_INT 2
14533: PUSH
14534: LD_INT 3
14536: PUSH
14537: EMPTY
14538: LIST
14539: LIST
14540: LIST
14541: LIST
14542: LIST
14543: LIST
14544: LIST
14545: ST_TO_ADDR
14546: GO 14677
14548: LD_INT 1
14550: DOUBLE
14551: EQUAL
14552: IFTRUE 14556
14554: GO 14618
14556: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
14557: LD_ADDR_VAR 0 3
14561: PUSH
14562: LD_INT 11
14564: PUSH
14565: LD_INT 12
14567: PUSH
14568: LD_INT 13
14570: PUSH
14571: LD_INT 14
14573: PUSH
14574: LD_INT 1
14576: PUSH
14577: LD_INT 2
14579: PUSH
14580: LD_INT 3
14582: PUSH
14583: LD_INT 4
14585: PUSH
14586: LD_INT 5
14588: PUSH
14589: LD_INT 21
14591: PUSH
14592: LD_INT 23
14594: PUSH
14595: LD_INT 22
14597: PUSH
14598: LD_INT 24
14600: PUSH
14601: EMPTY
14602: LIST
14603: LIST
14604: LIST
14605: LIST
14606: LIST
14607: LIST
14608: LIST
14609: LIST
14610: LIST
14611: LIST
14612: LIST
14613: LIST
14614: LIST
14615: ST_TO_ADDR
14616: GO 14677
14618: LD_INT 3
14620: DOUBLE
14621: EQUAL
14622: IFTRUE 14626
14624: GO 14676
14626: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
14627: LD_ADDR_VAR 0 3
14631: PUSH
14632: LD_INT 13
14634: PUSH
14635: LD_INT 14
14637: PUSH
14638: LD_INT 2
14640: PUSH
14641: LD_INT 3
14643: PUSH
14644: LD_INT 4
14646: PUSH
14647: LD_INT 5
14649: PUSH
14650: LD_INT 21
14652: PUSH
14653: LD_INT 22
14655: PUSH
14656: LD_INT 23
14658: PUSH
14659: LD_INT 24
14661: PUSH
14662: EMPTY
14663: LIST
14664: LIST
14665: LIST
14666: LIST
14667: LIST
14668: LIST
14669: LIST
14670: LIST
14671: LIST
14672: LIST
14673: ST_TO_ADDR
14674: GO 14677
14676: POP
// result := ( chassis in result ) ;
14677: LD_ADDR_VAR 0 3
14681: PUSH
14682: LD_VAR 0 1
14686: PUSH
14687: LD_VAR 0 3
14691: IN
14692: ST_TO_ADDR
// end ;
14693: LD_VAR 0 3
14697: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
14698: LD_INT 0
14700: PPUSH
// if not chassis or not weapon then
14701: LD_VAR 0 1
14705: NOT
14706: IFTRUE 14715
14708: PUSH
14709: LD_VAR 0 2
14713: NOT
14714: OR
14715: IFFALSE 14719
// exit ;
14717: GO 15813
// case weapon of us_machine_gun :
14719: LD_VAR 0 2
14723: PUSH
14724: LD_INT 2
14726: DOUBLE
14727: EQUAL
14728: IFTRUE 14732
14730: GO 14762
14732: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
14733: LD_ADDR_VAR 0 3
14737: PUSH
14738: LD_INT 1
14740: PUSH
14741: LD_INT 2
14743: PUSH
14744: LD_INT 3
14746: PUSH
14747: LD_INT 4
14749: PUSH
14750: LD_INT 5
14752: PUSH
14753: EMPTY
14754: LIST
14755: LIST
14756: LIST
14757: LIST
14758: LIST
14759: ST_TO_ADDR
14760: GO 15797
14762: LD_INT 3
14764: DOUBLE
14765: EQUAL
14766: IFTRUE 14770
14768: GO 14800
14770: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
14771: LD_ADDR_VAR 0 3
14775: PUSH
14776: LD_INT 1
14778: PUSH
14779: LD_INT 2
14781: PUSH
14782: LD_INT 3
14784: PUSH
14785: LD_INT 4
14787: PUSH
14788: LD_INT 5
14790: PUSH
14791: EMPTY
14792: LIST
14793: LIST
14794: LIST
14795: LIST
14796: LIST
14797: ST_TO_ADDR
14798: GO 15797
14800: LD_INT 11
14802: DOUBLE
14803: EQUAL
14804: IFTRUE 14808
14806: GO 14838
14808: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
14809: LD_ADDR_VAR 0 3
14813: PUSH
14814: LD_INT 1
14816: PUSH
14817: LD_INT 2
14819: PUSH
14820: LD_INT 3
14822: PUSH
14823: LD_INT 4
14825: PUSH
14826: LD_INT 5
14828: PUSH
14829: EMPTY
14830: LIST
14831: LIST
14832: LIST
14833: LIST
14834: LIST
14835: ST_TO_ADDR
14836: GO 15797
14838: LD_INT 4
14840: DOUBLE
14841: EQUAL
14842: IFTRUE 14846
14844: GO 14872
14846: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
14847: LD_ADDR_VAR 0 3
14851: PUSH
14852: LD_INT 2
14854: PUSH
14855: LD_INT 3
14857: PUSH
14858: LD_INT 4
14860: PUSH
14861: LD_INT 5
14863: PUSH
14864: EMPTY
14865: LIST
14866: LIST
14867: LIST
14868: LIST
14869: ST_TO_ADDR
14870: GO 15797
14872: LD_INT 5
14874: DOUBLE
14875: EQUAL
14876: IFTRUE 14880
14878: GO 14906
14880: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
14881: LD_ADDR_VAR 0 3
14885: PUSH
14886: LD_INT 2
14888: PUSH
14889: LD_INT 3
14891: PUSH
14892: LD_INT 4
14894: PUSH
14895: LD_INT 5
14897: PUSH
14898: EMPTY
14899: LIST
14900: LIST
14901: LIST
14902: LIST
14903: ST_TO_ADDR
14904: GO 15797
14906: LD_INT 9
14908: DOUBLE
14909: EQUAL
14910: IFTRUE 14914
14912: GO 14940
14914: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
14915: LD_ADDR_VAR 0 3
14919: PUSH
14920: LD_INT 2
14922: PUSH
14923: LD_INT 3
14925: PUSH
14926: LD_INT 4
14928: PUSH
14929: LD_INT 5
14931: PUSH
14932: EMPTY
14933: LIST
14934: LIST
14935: LIST
14936: LIST
14937: ST_TO_ADDR
14938: GO 15797
14940: LD_INT 7
14942: DOUBLE
14943: EQUAL
14944: IFTRUE 14948
14946: GO 14974
14948: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
14949: LD_ADDR_VAR 0 3
14953: PUSH
14954: LD_INT 2
14956: PUSH
14957: LD_INT 3
14959: PUSH
14960: LD_INT 4
14962: PUSH
14963: LD_INT 5
14965: PUSH
14966: EMPTY
14967: LIST
14968: LIST
14969: LIST
14970: LIST
14971: ST_TO_ADDR
14972: GO 15797
14974: LD_INT 12
14976: DOUBLE
14977: EQUAL
14978: IFTRUE 14982
14980: GO 15008
14982: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
14983: LD_ADDR_VAR 0 3
14987: PUSH
14988: LD_INT 2
14990: PUSH
14991: LD_INT 3
14993: PUSH
14994: LD_INT 4
14996: PUSH
14997: LD_INT 5
14999: PUSH
15000: EMPTY
15001: LIST
15002: LIST
15003: LIST
15004: LIST
15005: ST_TO_ADDR
15006: GO 15797
15008: LD_INT 13
15010: DOUBLE
15011: EQUAL
15012: IFTRUE 15016
15014: GO 15042
15016: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
15017: LD_ADDR_VAR 0 3
15021: PUSH
15022: LD_INT 2
15024: PUSH
15025: LD_INT 3
15027: PUSH
15028: LD_INT 4
15030: PUSH
15031: LD_INT 5
15033: PUSH
15034: EMPTY
15035: LIST
15036: LIST
15037: LIST
15038: LIST
15039: ST_TO_ADDR
15040: GO 15797
15042: LD_INT 14
15044: DOUBLE
15045: EQUAL
15046: IFTRUE 15050
15048: GO 15068
15050: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
15051: LD_ADDR_VAR 0 3
15055: PUSH
15056: LD_INT 4
15058: PUSH
15059: LD_INT 5
15061: PUSH
15062: EMPTY
15063: LIST
15064: LIST
15065: ST_TO_ADDR
15066: GO 15797
15068: LD_INT 6
15070: DOUBLE
15071: EQUAL
15072: IFTRUE 15076
15074: GO 15094
15076: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
15077: LD_ADDR_VAR 0 3
15081: PUSH
15082: LD_INT 4
15084: PUSH
15085: LD_INT 5
15087: PUSH
15088: EMPTY
15089: LIST
15090: LIST
15091: ST_TO_ADDR
15092: GO 15797
15094: LD_INT 10
15096: DOUBLE
15097: EQUAL
15098: IFTRUE 15102
15100: GO 15120
15102: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
15103: LD_ADDR_VAR 0 3
15107: PUSH
15108: LD_INT 4
15110: PUSH
15111: LD_INT 5
15113: PUSH
15114: EMPTY
15115: LIST
15116: LIST
15117: ST_TO_ADDR
15118: GO 15797
15120: LD_INT 22
15122: DOUBLE
15123: EQUAL
15124: IFTRUE 15128
15126: GO 15154
15128: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
15129: LD_ADDR_VAR 0 3
15133: PUSH
15134: LD_INT 11
15136: PUSH
15137: LD_INT 12
15139: PUSH
15140: LD_INT 13
15142: PUSH
15143: LD_INT 14
15145: PUSH
15146: EMPTY
15147: LIST
15148: LIST
15149: LIST
15150: LIST
15151: ST_TO_ADDR
15152: GO 15797
15154: LD_INT 23
15156: DOUBLE
15157: EQUAL
15158: IFTRUE 15162
15160: GO 15188
15162: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
15163: LD_ADDR_VAR 0 3
15167: PUSH
15168: LD_INT 11
15170: PUSH
15171: LD_INT 12
15173: PUSH
15174: LD_INT 13
15176: PUSH
15177: LD_INT 14
15179: PUSH
15180: EMPTY
15181: LIST
15182: LIST
15183: LIST
15184: LIST
15185: ST_TO_ADDR
15186: GO 15797
15188: LD_INT 24
15190: DOUBLE
15191: EQUAL
15192: IFTRUE 15196
15194: GO 15222
15196: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
15197: LD_ADDR_VAR 0 3
15201: PUSH
15202: LD_INT 11
15204: PUSH
15205: LD_INT 12
15207: PUSH
15208: LD_INT 13
15210: PUSH
15211: LD_INT 14
15213: PUSH
15214: EMPTY
15215: LIST
15216: LIST
15217: LIST
15218: LIST
15219: ST_TO_ADDR
15220: GO 15797
15222: LD_INT 30
15224: DOUBLE
15225: EQUAL
15226: IFTRUE 15230
15228: GO 15256
15230: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
15231: LD_ADDR_VAR 0 3
15235: PUSH
15236: LD_INT 11
15238: PUSH
15239: LD_INT 12
15241: PUSH
15242: LD_INT 13
15244: PUSH
15245: LD_INT 14
15247: PUSH
15248: EMPTY
15249: LIST
15250: LIST
15251: LIST
15252: LIST
15253: ST_TO_ADDR
15254: GO 15797
15256: LD_INT 25
15258: DOUBLE
15259: EQUAL
15260: IFTRUE 15264
15262: GO 15282
15264: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
15265: LD_ADDR_VAR 0 3
15269: PUSH
15270: LD_INT 13
15272: PUSH
15273: LD_INT 14
15275: PUSH
15276: EMPTY
15277: LIST
15278: LIST
15279: ST_TO_ADDR
15280: GO 15797
15282: LD_INT 27
15284: DOUBLE
15285: EQUAL
15286: IFTRUE 15290
15288: GO 15308
15290: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
15291: LD_ADDR_VAR 0 3
15295: PUSH
15296: LD_INT 13
15298: PUSH
15299: LD_INT 14
15301: PUSH
15302: EMPTY
15303: LIST
15304: LIST
15305: ST_TO_ADDR
15306: GO 15797
15308: LD_INT 92
15310: DOUBLE
15311: EQUAL
15312: IFTRUE 15316
15314: GO 15342
15316: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
15317: LD_ADDR_VAR 0 3
15321: PUSH
15322: LD_INT 11
15324: PUSH
15325: LD_INT 12
15327: PUSH
15328: LD_INT 13
15330: PUSH
15331: LD_INT 14
15333: PUSH
15334: EMPTY
15335: LIST
15336: LIST
15337: LIST
15338: LIST
15339: ST_TO_ADDR
15340: GO 15797
15342: LD_INT 28
15344: DOUBLE
15345: EQUAL
15346: IFTRUE 15350
15348: GO 15368
15350: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
15351: LD_ADDR_VAR 0 3
15355: PUSH
15356: LD_INT 13
15358: PUSH
15359: LD_INT 14
15361: PUSH
15362: EMPTY
15363: LIST
15364: LIST
15365: ST_TO_ADDR
15366: GO 15797
15368: LD_INT 29
15370: DOUBLE
15371: EQUAL
15372: IFTRUE 15376
15374: GO 15394
15376: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
15377: LD_ADDR_VAR 0 3
15381: PUSH
15382: LD_INT 13
15384: PUSH
15385: LD_INT 14
15387: PUSH
15388: EMPTY
15389: LIST
15390: LIST
15391: ST_TO_ADDR
15392: GO 15797
15394: LD_INT 31
15396: DOUBLE
15397: EQUAL
15398: IFTRUE 15402
15400: GO 15420
15402: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
15403: LD_ADDR_VAR 0 3
15407: PUSH
15408: LD_INT 13
15410: PUSH
15411: LD_INT 14
15413: PUSH
15414: EMPTY
15415: LIST
15416: LIST
15417: ST_TO_ADDR
15418: GO 15797
15420: LD_INT 26
15422: DOUBLE
15423: EQUAL
15424: IFTRUE 15428
15426: GO 15446
15428: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
15429: LD_ADDR_VAR 0 3
15433: PUSH
15434: LD_INT 13
15436: PUSH
15437: LD_INT 14
15439: PUSH
15440: EMPTY
15441: LIST
15442: LIST
15443: ST_TO_ADDR
15444: GO 15797
15446: LD_INT 42
15448: DOUBLE
15449: EQUAL
15450: IFTRUE 15454
15452: GO 15480
15454: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
15455: LD_ADDR_VAR 0 3
15459: PUSH
15460: LD_INT 21
15462: PUSH
15463: LD_INT 22
15465: PUSH
15466: LD_INT 23
15468: PUSH
15469: LD_INT 24
15471: PUSH
15472: EMPTY
15473: LIST
15474: LIST
15475: LIST
15476: LIST
15477: ST_TO_ADDR
15478: GO 15797
15480: LD_INT 43
15482: DOUBLE
15483: EQUAL
15484: IFTRUE 15488
15486: GO 15514
15488: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
15489: LD_ADDR_VAR 0 3
15493: PUSH
15494: LD_INT 21
15496: PUSH
15497: LD_INT 22
15499: PUSH
15500: LD_INT 23
15502: PUSH
15503: LD_INT 24
15505: PUSH
15506: EMPTY
15507: LIST
15508: LIST
15509: LIST
15510: LIST
15511: ST_TO_ADDR
15512: GO 15797
15514: LD_INT 44
15516: DOUBLE
15517: EQUAL
15518: IFTRUE 15522
15520: GO 15548
15522: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
15523: LD_ADDR_VAR 0 3
15527: PUSH
15528: LD_INT 21
15530: PUSH
15531: LD_INT 22
15533: PUSH
15534: LD_INT 23
15536: PUSH
15537: LD_INT 24
15539: PUSH
15540: EMPTY
15541: LIST
15542: LIST
15543: LIST
15544: LIST
15545: ST_TO_ADDR
15546: GO 15797
15548: LD_INT 45
15550: DOUBLE
15551: EQUAL
15552: IFTRUE 15556
15554: GO 15582
15556: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
15557: LD_ADDR_VAR 0 3
15561: PUSH
15562: LD_INT 21
15564: PUSH
15565: LD_INT 22
15567: PUSH
15568: LD_INT 23
15570: PUSH
15571: LD_INT 24
15573: PUSH
15574: EMPTY
15575: LIST
15576: LIST
15577: LIST
15578: LIST
15579: ST_TO_ADDR
15580: GO 15797
15582: LD_INT 49
15584: DOUBLE
15585: EQUAL
15586: IFTRUE 15590
15588: GO 15616
15590: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
15591: LD_ADDR_VAR 0 3
15595: PUSH
15596: LD_INT 21
15598: PUSH
15599: LD_INT 22
15601: PUSH
15602: LD_INT 23
15604: PUSH
15605: LD_INT 24
15607: PUSH
15608: EMPTY
15609: LIST
15610: LIST
15611: LIST
15612: LIST
15613: ST_TO_ADDR
15614: GO 15797
15616: LD_INT 51
15618: DOUBLE
15619: EQUAL
15620: IFTRUE 15624
15622: GO 15650
15624: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
15625: LD_ADDR_VAR 0 3
15629: PUSH
15630: LD_INT 21
15632: PUSH
15633: LD_INT 22
15635: PUSH
15636: LD_INT 23
15638: PUSH
15639: LD_INT 24
15641: PUSH
15642: EMPTY
15643: LIST
15644: LIST
15645: LIST
15646: LIST
15647: ST_TO_ADDR
15648: GO 15797
15650: LD_INT 52
15652: DOUBLE
15653: EQUAL
15654: IFTRUE 15658
15656: GO 15684
15658: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
15659: LD_ADDR_VAR 0 3
15663: PUSH
15664: LD_INT 21
15666: PUSH
15667: LD_INT 22
15669: PUSH
15670: LD_INT 23
15672: PUSH
15673: LD_INT 24
15675: PUSH
15676: EMPTY
15677: LIST
15678: LIST
15679: LIST
15680: LIST
15681: ST_TO_ADDR
15682: GO 15797
15684: LD_INT 53
15686: DOUBLE
15687: EQUAL
15688: IFTRUE 15692
15690: GO 15710
15692: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
15693: LD_ADDR_VAR 0 3
15697: PUSH
15698: LD_INT 23
15700: PUSH
15701: LD_INT 24
15703: PUSH
15704: EMPTY
15705: LIST
15706: LIST
15707: ST_TO_ADDR
15708: GO 15797
15710: LD_INT 46
15712: DOUBLE
15713: EQUAL
15714: IFTRUE 15718
15716: GO 15736
15718: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
15719: LD_ADDR_VAR 0 3
15723: PUSH
15724: LD_INT 23
15726: PUSH
15727: LD_INT 24
15729: PUSH
15730: EMPTY
15731: LIST
15732: LIST
15733: ST_TO_ADDR
15734: GO 15797
15736: LD_INT 47
15738: DOUBLE
15739: EQUAL
15740: IFTRUE 15744
15742: GO 15762
15744: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
15745: LD_ADDR_VAR 0 3
15749: PUSH
15750: LD_INT 23
15752: PUSH
15753: LD_INT 24
15755: PUSH
15756: EMPTY
15757: LIST
15758: LIST
15759: ST_TO_ADDR
15760: GO 15797
15762: LD_INT 98
15764: DOUBLE
15765: EQUAL
15766: IFTRUE 15770
15768: GO 15796
15770: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
15771: LD_ADDR_VAR 0 3
15775: PUSH
15776: LD_INT 21
15778: PUSH
15779: LD_INT 22
15781: PUSH
15782: LD_INT 23
15784: PUSH
15785: LD_INT 24
15787: PUSH
15788: EMPTY
15789: LIST
15790: LIST
15791: LIST
15792: LIST
15793: ST_TO_ADDR
15794: GO 15797
15796: POP
// result := ( chassis in result ) ;
15797: LD_ADDR_VAR 0 3
15801: PUSH
15802: LD_VAR 0 1
15806: PUSH
15807: LD_VAR 0 3
15811: IN
15812: ST_TO_ADDR
// end ;
15813: LD_VAR 0 3
15817: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
15818: LD_INT 0
15820: PPUSH
15821: PPUSH
15822: PPUSH
15823: PPUSH
15824: PPUSH
15825: PPUSH
15826: PPUSH
// result := array ;
15827: LD_ADDR_VAR 0 5
15831: PUSH
15832: LD_VAR 0 1
15836: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
15837: LD_VAR 0 1
15841: NOT
15842: IFTRUE 15851
15844: PUSH
15845: LD_VAR 0 2
15849: NOT
15850: OR
15851: IFTRUE 15860
15853: PUSH
15854: LD_VAR 0 3
15858: NOT
15859: OR
15860: IFTRUE 15874
15862: PUSH
15863: LD_VAR 0 2
15867: PUSH
15868: LD_VAR 0 1
15872: GREATER
15873: OR
15874: IFTRUE 15888
15876: PUSH
15877: LD_VAR 0 3
15881: PUSH
15882: LD_VAR 0 1
15886: GREATER
15887: OR
15888: IFFALSE 15892
// exit ;
15890: GO 16188
// if direction then
15892: LD_VAR 0 4
15896: IFFALSE 15960
// begin d := 1 ;
15898: LD_ADDR_VAR 0 9
15902: PUSH
15903: LD_INT 1
15905: ST_TO_ADDR
// if i_from > i_to then
15906: LD_VAR 0 2
15910: PUSH
15911: LD_VAR 0 3
15915: GREATER
15916: IFFALSE 15942
// length := ( array - i_from ) + i_to else
15918: LD_ADDR_VAR 0 11
15922: PUSH
15923: LD_VAR 0 1
15927: PUSH
15928: LD_VAR 0 2
15932: MINUS
15933: PUSH
15934: LD_VAR 0 3
15938: PLUS
15939: ST_TO_ADDR
15940: GO 15958
// length := i_to - i_from ;
15942: LD_ADDR_VAR 0 11
15946: PUSH
15947: LD_VAR 0 3
15951: PUSH
15952: LD_VAR 0 2
15956: MINUS
15957: ST_TO_ADDR
// end else
15958: GO 16021
// begin d := - 1 ;
15960: LD_ADDR_VAR 0 9
15964: PUSH
15965: LD_INT 1
15967: NEG
15968: ST_TO_ADDR
// if i_from > i_to then
15969: LD_VAR 0 2
15973: PUSH
15974: LD_VAR 0 3
15978: GREATER
15979: IFFALSE 15999
// length := i_from - i_to else
15981: LD_ADDR_VAR 0 11
15985: PUSH
15986: LD_VAR 0 2
15990: PUSH
15991: LD_VAR 0 3
15995: MINUS
15996: ST_TO_ADDR
15997: GO 16021
// length := ( array - i_to ) + i_from ;
15999: LD_ADDR_VAR 0 11
16003: PUSH
16004: LD_VAR 0 1
16008: PUSH
16009: LD_VAR 0 3
16013: MINUS
16014: PUSH
16015: LD_VAR 0 2
16019: PLUS
16020: ST_TO_ADDR
// end ; if not length then
16021: LD_VAR 0 11
16025: NOT
16026: IFFALSE 16030
// exit ;
16028: GO 16188
// tmp := array ;
16030: LD_ADDR_VAR 0 10
16034: PUSH
16035: LD_VAR 0 1
16039: ST_TO_ADDR
// for i = 1 to length do
16040: LD_ADDR_VAR 0 6
16044: PUSH
16045: DOUBLE
16046: LD_INT 1
16048: DEC
16049: ST_TO_ADDR
16050: LD_VAR 0 11
16054: PUSH
16055: FOR_TO
16056: IFFALSE 16176
// begin for j = 1 to array do
16058: LD_ADDR_VAR 0 7
16062: PUSH
16063: DOUBLE
16064: LD_INT 1
16066: DEC
16067: ST_TO_ADDR
16068: LD_VAR 0 1
16072: PUSH
16073: FOR_TO
16074: IFFALSE 16162
// begin k := j + d ;
16076: LD_ADDR_VAR 0 8
16080: PUSH
16081: LD_VAR 0 7
16085: PUSH
16086: LD_VAR 0 9
16090: PLUS
16091: ST_TO_ADDR
// if k > array then
16092: LD_VAR 0 8
16096: PUSH
16097: LD_VAR 0 1
16101: GREATER
16102: IFFALSE 16112
// k := 1 ;
16104: LD_ADDR_VAR 0 8
16108: PUSH
16109: LD_INT 1
16111: ST_TO_ADDR
// if not k then
16112: LD_VAR 0 8
16116: NOT
16117: IFFALSE 16129
// k := array ;
16119: LD_ADDR_VAR 0 8
16123: PUSH
16124: LD_VAR 0 1
16128: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
16129: LD_ADDR_VAR 0 10
16133: PUSH
16134: LD_VAR 0 10
16138: PPUSH
16139: LD_VAR 0 8
16143: PPUSH
16144: LD_VAR 0 1
16148: PUSH
16149: LD_VAR 0 7
16153: ARRAY
16154: PPUSH
16155: CALL_OW 1
16159: ST_TO_ADDR
// end ;
16160: GO 16073
16162: POP
16163: POP
// array := tmp ;
16164: LD_ADDR_VAR 0 1
16168: PUSH
16169: LD_VAR 0 10
16173: ST_TO_ADDR
// end ;
16174: GO 16055
16176: POP
16177: POP
// result := array ;
16178: LD_ADDR_VAR 0 5
16182: PUSH
16183: LD_VAR 0 1
16187: ST_TO_ADDR
// end ;
16188: LD_VAR 0 5
16192: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
16193: LD_INT 0
16195: PPUSH
16196: PPUSH
// result := 0 ;
16197: LD_ADDR_VAR 0 3
16201: PUSH
16202: LD_INT 0
16204: ST_TO_ADDR
// if not array or not value in array then
16205: LD_VAR 0 1
16209: NOT
16210: IFTRUE 16225
16212: PUSH
16213: LD_VAR 0 2
16217: PUSH
16218: LD_VAR 0 1
16222: IN
16223: NOT
16224: OR
16225: IFFALSE 16229
// exit ;
16227: GO 16283
// for i = 1 to array do
16229: LD_ADDR_VAR 0 4
16233: PUSH
16234: DOUBLE
16235: LD_INT 1
16237: DEC
16238: ST_TO_ADDR
16239: LD_VAR 0 1
16243: PUSH
16244: FOR_TO
16245: IFFALSE 16281
// if value = array [ i ] then
16247: LD_VAR 0 2
16251: PUSH
16252: LD_VAR 0 1
16256: PUSH
16257: LD_VAR 0 4
16261: ARRAY
16262: EQUAL
16263: IFFALSE 16279
// begin result := i ;
16265: LD_ADDR_VAR 0 3
16269: PUSH
16270: LD_VAR 0 4
16274: ST_TO_ADDR
// exit ;
16275: POP
16276: POP
16277: GO 16283
// end ;
16279: GO 16244
16281: POP
16282: POP
// end ;
16283: LD_VAR 0 3
16287: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
16288: LD_INT 0
16290: PPUSH
// vc_chassis := chassis ;
16291: LD_ADDR_OWVAR 37
16295: PUSH
16296: LD_VAR 0 1
16300: ST_TO_ADDR
// vc_engine := engine ;
16301: LD_ADDR_OWVAR 39
16305: PUSH
16306: LD_VAR 0 2
16310: ST_TO_ADDR
// vc_control := control ;
16311: LD_ADDR_OWVAR 38
16315: PUSH
16316: LD_VAR 0 3
16320: ST_TO_ADDR
// vc_weapon := weapon ;
16321: LD_ADDR_OWVAR 40
16325: PUSH
16326: LD_VAR 0 4
16330: ST_TO_ADDR
// vc_fuel_battery := fuel ;
16331: LD_ADDR_OWVAR 41
16335: PUSH
16336: LD_VAR 0 5
16340: ST_TO_ADDR
// end ;
16341: LD_VAR 0 6
16345: RET
// export function WantPlant ( unit ) ; var task ; begin
16346: LD_INT 0
16348: PPUSH
16349: PPUSH
// result := false ;
16350: LD_ADDR_VAR 0 2
16354: PUSH
16355: LD_INT 0
16357: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
16358: LD_ADDR_VAR 0 3
16362: PUSH
16363: LD_VAR 0 1
16367: PPUSH
16368: CALL_OW 437
16372: ST_TO_ADDR
// if task then
16373: LD_VAR 0 3
16377: IFFALSE 16405
// if task [ 1 ] [ 1 ] = p then
16379: LD_VAR 0 3
16383: PUSH
16384: LD_INT 1
16386: ARRAY
16387: PUSH
16388: LD_INT 1
16390: ARRAY
16391: PUSH
16392: LD_STRING p
16394: EQUAL
16395: IFFALSE 16405
// result := true ;
16397: LD_ADDR_VAR 0 2
16401: PUSH
16402: LD_INT 1
16404: ST_TO_ADDR
// end ;
16405: LD_VAR 0 2
16409: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
16410: LD_INT 0
16412: PPUSH
16413: PPUSH
16414: PPUSH
16415: PPUSH
// if pos < 1 then
16416: LD_VAR 0 2
16420: PUSH
16421: LD_INT 1
16423: LESS
16424: IFFALSE 16428
// exit ;
16426: GO 16731
// if pos = 1 then
16428: LD_VAR 0 2
16432: PUSH
16433: LD_INT 1
16435: EQUAL
16436: IFFALSE 16469
// result := Replace ( arr , pos [ 1 ] , value ) else
16438: LD_ADDR_VAR 0 4
16442: PUSH
16443: LD_VAR 0 1
16447: PPUSH
16448: LD_VAR 0 2
16452: PUSH
16453: LD_INT 1
16455: ARRAY
16456: PPUSH
16457: LD_VAR 0 3
16461: PPUSH
16462: CALL_OW 1
16466: ST_TO_ADDR
16467: GO 16731
// begin tmp := arr ;
16469: LD_ADDR_VAR 0 6
16473: PUSH
16474: LD_VAR 0 1
16478: ST_TO_ADDR
// s_arr := [ tmp ] ;
16479: LD_ADDR_VAR 0 7
16483: PUSH
16484: LD_VAR 0 6
16488: PUSH
16489: EMPTY
16490: LIST
16491: ST_TO_ADDR
// for i = 1 to pos - 1 do
16492: LD_ADDR_VAR 0 5
16496: PUSH
16497: DOUBLE
16498: LD_INT 1
16500: DEC
16501: ST_TO_ADDR
16502: LD_VAR 0 2
16506: PUSH
16507: LD_INT 1
16509: MINUS
16510: PUSH
16511: FOR_TO
16512: IFFALSE 16557
// begin tmp := tmp [ pos [ i ] ] ;
16514: LD_ADDR_VAR 0 6
16518: PUSH
16519: LD_VAR 0 6
16523: PUSH
16524: LD_VAR 0 2
16528: PUSH
16529: LD_VAR 0 5
16533: ARRAY
16534: ARRAY
16535: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
16536: LD_ADDR_VAR 0 7
16540: PUSH
16541: LD_VAR 0 7
16545: PUSH
16546: LD_VAR 0 6
16550: PUSH
16551: EMPTY
16552: LIST
16553: ADD
16554: ST_TO_ADDR
// end ;
16555: GO 16511
16557: POP
16558: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
16559: LD_ADDR_VAR 0 6
16563: PUSH
16564: LD_VAR 0 6
16568: PPUSH
16569: LD_VAR 0 2
16573: PUSH
16574: LD_VAR 0 2
16578: ARRAY
16579: PPUSH
16580: LD_VAR 0 3
16584: PPUSH
16585: CALL_OW 1
16589: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
16590: LD_ADDR_VAR 0 7
16594: PUSH
16595: LD_VAR 0 7
16599: PPUSH
16600: LD_VAR 0 7
16604: PPUSH
16605: LD_VAR 0 6
16609: PPUSH
16610: CALL_OW 1
16614: ST_TO_ADDR
// for i = s_arr downto 2 do
16615: LD_ADDR_VAR 0 5
16619: PUSH
16620: DOUBLE
16621: LD_VAR 0 7
16625: INC
16626: ST_TO_ADDR
16627: LD_INT 2
16629: PUSH
16630: FOR_DOWNTO
16631: IFFALSE 16715
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
16633: LD_ADDR_VAR 0 6
16637: PUSH
16638: LD_VAR 0 7
16642: PUSH
16643: LD_VAR 0 5
16647: PUSH
16648: LD_INT 1
16650: MINUS
16651: ARRAY
16652: PPUSH
16653: LD_VAR 0 2
16657: PUSH
16658: LD_VAR 0 5
16662: PUSH
16663: LD_INT 1
16665: MINUS
16666: ARRAY
16667: PPUSH
16668: LD_VAR 0 7
16672: PUSH
16673: LD_VAR 0 5
16677: ARRAY
16678: PPUSH
16679: CALL_OW 1
16683: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
16684: LD_ADDR_VAR 0 7
16688: PUSH
16689: LD_VAR 0 7
16693: PPUSH
16694: LD_VAR 0 5
16698: PUSH
16699: LD_INT 1
16701: MINUS
16702: PPUSH
16703: LD_VAR 0 6
16707: PPUSH
16708: CALL_OW 1
16712: ST_TO_ADDR
// end ;
16713: GO 16630
16715: POP
16716: POP
// result := s_arr [ 1 ] ;
16717: LD_ADDR_VAR 0 4
16721: PUSH
16722: LD_VAR 0 7
16726: PUSH
16727: LD_INT 1
16729: ARRAY
16730: ST_TO_ADDR
// end ; end ;
16731: LD_VAR 0 4
16735: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
16736: LD_INT 0
16738: PPUSH
16739: PPUSH
// if not list then
16740: LD_VAR 0 1
16744: NOT
16745: IFFALSE 16749
// exit ;
16747: GO 16840
// i := list [ pos1 ] ;
16749: LD_ADDR_VAR 0 5
16753: PUSH
16754: LD_VAR 0 1
16758: PUSH
16759: LD_VAR 0 2
16763: ARRAY
16764: ST_TO_ADDR
// if not i then
16765: LD_VAR 0 5
16769: NOT
16770: IFFALSE 16774
// exit ;
16772: GO 16840
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
16774: LD_ADDR_VAR 0 1
16778: PUSH
16779: LD_VAR 0 1
16783: PPUSH
16784: LD_VAR 0 2
16788: PPUSH
16789: LD_VAR 0 1
16793: PUSH
16794: LD_VAR 0 3
16798: ARRAY
16799: PPUSH
16800: CALL_OW 1
16804: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
16805: LD_ADDR_VAR 0 1
16809: PUSH
16810: LD_VAR 0 1
16814: PPUSH
16815: LD_VAR 0 3
16819: PPUSH
16820: LD_VAR 0 5
16824: PPUSH
16825: CALL_OW 1
16829: ST_TO_ADDR
// result := list ;
16830: LD_ADDR_VAR 0 4
16834: PUSH
16835: LD_VAR 0 1
16839: ST_TO_ADDR
// end ;
16840: LD_VAR 0 4
16844: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
16845: LD_INT 0
16847: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
16848: LD_ADDR_VAR 0 5
16852: PUSH
16853: LD_VAR 0 1
16857: PPUSH
16858: CALL_OW 250
16862: PPUSH
16863: LD_VAR 0 1
16867: PPUSH
16868: CALL_OW 251
16872: PPUSH
16873: LD_VAR 0 2
16877: PPUSH
16878: LD_VAR 0 3
16882: PPUSH
16883: LD_VAR 0 4
16887: PPUSH
16888: CALL 17270 0 5
16892: ST_TO_ADDR
// end ;
16893: LD_VAR 0 5
16897: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
16898: LD_INT 0
16900: PPUSH
16901: PPUSH
16902: PPUSH
16903: PPUSH
// if not list or not unit then
16904: LD_VAR 0 2
16908: NOT
16909: IFTRUE 16918
16911: PUSH
16912: LD_VAR 0 1
16916: NOT
16917: OR
16918: IFFALSE 16922
// exit ;
16920: GO 17265
// result := [ ] ;
16922: LD_ADDR_VAR 0 5
16926: PUSH
16927: EMPTY
16928: ST_TO_ADDR
// for i in list do
16929: LD_ADDR_VAR 0 6
16933: PUSH
16934: LD_VAR 0 2
16938: PUSH
16939: FOR_IN
16940: IFFALSE 17158
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
16942: LD_ADDR_VAR 0 8
16946: PUSH
16947: LD_VAR 0 1
16951: PPUSH
16952: LD_VAR 0 6
16956: PUSH
16957: LD_INT 1
16959: ARRAY
16960: PPUSH
16961: LD_VAR 0 6
16965: PUSH
16966: LD_INT 2
16968: ARRAY
16969: PPUSH
16970: CALL_OW 297
16974: ST_TO_ADDR
// if not Count ( result ) then
16975: LD_VAR 0 5
16979: PPUSH
16980: CALL 13492 0 1
16984: NOT
16985: IFFALSE 17018
// begin result := Join ( result , [ i , tmp ] ) ;
16987: LD_ADDR_VAR 0 5
16991: PUSH
16992: LD_VAR 0 5
16996: PPUSH
16997: LD_VAR 0 6
17001: PUSH
17002: LD_VAR 0 8
17006: PUSH
17007: EMPTY
17008: LIST
17009: LIST
17010: PPUSH
17011: CALL 49468 0 2
17015: ST_TO_ADDR
// continue ;
17016: GO 16939
// end ; if result [ result ] [ 2 ] <= tmp then
17018: LD_VAR 0 5
17022: PUSH
17023: LD_VAR 0 5
17027: ARRAY
17028: PUSH
17029: LD_INT 2
17031: ARRAY
17032: PUSH
17033: LD_VAR 0 8
17037: LESSEQUAL
17038: IFFALSE 17071
// result := Join ( result , [ i , tmp ] ) else
17040: LD_ADDR_VAR 0 5
17044: PUSH
17045: LD_VAR 0 5
17049: PPUSH
17050: LD_VAR 0 6
17054: PUSH
17055: LD_VAR 0 8
17059: PUSH
17060: EMPTY
17061: LIST
17062: LIST
17063: PPUSH
17064: CALL 49468 0 2
17068: ST_TO_ADDR
17069: GO 17156
// begin for j := 1 to Count ( result ) do
17071: LD_ADDR_VAR 0 7
17075: PUSH
17076: DOUBLE
17077: LD_INT 1
17079: DEC
17080: ST_TO_ADDR
17081: LD_VAR 0 5
17085: PPUSH
17086: CALL 13492 0 1
17090: PUSH
17091: FOR_TO
17092: IFFALSE 17154
// begin if tmp < result [ j ] [ 2 ] then
17094: LD_VAR 0 8
17098: PUSH
17099: LD_VAR 0 5
17103: PUSH
17104: LD_VAR 0 7
17108: ARRAY
17109: PUSH
17110: LD_INT 2
17112: ARRAY
17113: LESS
17114: IFFALSE 17152
// begin result := Insert ( result , j , [ i , tmp ] ) ;
17116: LD_ADDR_VAR 0 5
17120: PUSH
17121: LD_VAR 0 5
17125: PPUSH
17126: LD_VAR 0 7
17130: PPUSH
17131: LD_VAR 0 6
17135: PUSH
17136: LD_VAR 0 8
17140: PUSH
17141: EMPTY
17142: LIST
17143: LIST
17144: PPUSH
17145: CALL_OW 2
17149: ST_TO_ADDR
// break ;
17150: GO 17154
// end ; end ;
17152: GO 17091
17154: POP
17155: POP
// end ; end ;
17156: GO 16939
17158: POP
17159: POP
// if result and not asc then
17160: LD_VAR 0 5
17164: IFFALSE 17173
17166: PUSH
17167: LD_VAR 0 3
17171: NOT
17172: AND
17173: IFFALSE 17190
// result := ReverseArray ( result ) ;
17175: LD_ADDR_VAR 0 5
17179: PUSH
17180: LD_VAR 0 5
17184: PPUSH
17185: CALL 44548 0 1
17189: ST_TO_ADDR
// tmp := [ ] ;
17190: LD_ADDR_VAR 0 8
17194: PUSH
17195: EMPTY
17196: ST_TO_ADDR
// if mode then
17197: LD_VAR 0 4
17201: IFFALSE 17265
// begin for i := 1 to result do
17203: LD_ADDR_VAR 0 6
17207: PUSH
17208: DOUBLE
17209: LD_INT 1
17211: DEC
17212: ST_TO_ADDR
17213: LD_VAR 0 5
17217: PUSH
17218: FOR_TO
17219: IFFALSE 17253
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
17221: LD_ADDR_VAR 0 8
17225: PUSH
17226: LD_VAR 0 8
17230: PPUSH
17231: LD_VAR 0 5
17235: PUSH
17236: LD_VAR 0 6
17240: ARRAY
17241: PUSH
17242: LD_INT 1
17244: ARRAY
17245: PPUSH
17246: CALL 49468 0 2
17250: ST_TO_ADDR
17251: GO 17218
17253: POP
17254: POP
// result := tmp ;
17255: LD_ADDR_VAR 0 5
17259: PUSH
17260: LD_VAR 0 8
17264: ST_TO_ADDR
// end ; end ;
17265: LD_VAR 0 5
17269: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
17270: LD_INT 0
17272: PPUSH
17273: PPUSH
17274: PPUSH
17275: PPUSH
// if not list then
17276: LD_VAR 0 3
17280: NOT
17281: IFFALSE 17285
// exit ;
17283: GO 17675
// result := [ ] ;
17285: LD_ADDR_VAR 0 6
17289: PUSH
17290: EMPTY
17291: ST_TO_ADDR
// for i in list do
17292: LD_ADDR_VAR 0 7
17296: PUSH
17297: LD_VAR 0 3
17301: PUSH
17302: FOR_IN
17303: IFFALSE 17505
// begin tmp := GetDistUnitXY ( i , x , y ) ;
17305: LD_ADDR_VAR 0 9
17309: PUSH
17310: LD_VAR 0 7
17314: PPUSH
17315: LD_VAR 0 1
17319: PPUSH
17320: LD_VAR 0 2
17324: PPUSH
17325: CALL_OW 297
17329: ST_TO_ADDR
// if not result then
17330: LD_VAR 0 6
17334: NOT
17335: IFFALSE 17361
// result := [ [ i , tmp ] ] else
17337: LD_ADDR_VAR 0 6
17341: PUSH
17342: LD_VAR 0 7
17346: PUSH
17347: LD_VAR 0 9
17351: PUSH
17352: EMPTY
17353: LIST
17354: LIST
17355: PUSH
17356: EMPTY
17357: LIST
17358: ST_TO_ADDR
17359: GO 17503
// begin if result [ result ] [ 2 ] <= tmp then
17361: LD_VAR 0 6
17365: PUSH
17366: LD_VAR 0 6
17370: ARRAY
17371: PUSH
17372: LD_INT 2
17374: ARRAY
17375: PUSH
17376: LD_VAR 0 9
17380: LESSEQUAL
17381: IFFALSE 17423
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
17383: LD_ADDR_VAR 0 6
17387: PUSH
17388: LD_VAR 0 6
17392: PPUSH
17393: LD_VAR 0 6
17397: PUSH
17398: LD_INT 1
17400: PLUS
17401: PPUSH
17402: LD_VAR 0 7
17406: PUSH
17407: LD_VAR 0 9
17411: PUSH
17412: EMPTY
17413: LIST
17414: LIST
17415: PPUSH
17416: CALL_OW 2
17420: ST_TO_ADDR
17421: GO 17503
// for j := 1 to result do
17423: LD_ADDR_VAR 0 8
17427: PUSH
17428: DOUBLE
17429: LD_INT 1
17431: DEC
17432: ST_TO_ADDR
17433: LD_VAR 0 6
17437: PUSH
17438: FOR_TO
17439: IFFALSE 17501
// begin if tmp < result [ j ] [ 2 ] then
17441: LD_VAR 0 9
17445: PUSH
17446: LD_VAR 0 6
17450: PUSH
17451: LD_VAR 0 8
17455: ARRAY
17456: PUSH
17457: LD_INT 2
17459: ARRAY
17460: LESS
17461: IFFALSE 17499
// begin result := Insert ( result , j , [ i , tmp ] ) ;
17463: LD_ADDR_VAR 0 6
17467: PUSH
17468: LD_VAR 0 6
17472: PPUSH
17473: LD_VAR 0 8
17477: PPUSH
17478: LD_VAR 0 7
17482: PUSH
17483: LD_VAR 0 9
17487: PUSH
17488: EMPTY
17489: LIST
17490: LIST
17491: PPUSH
17492: CALL_OW 2
17496: ST_TO_ADDR
// break ;
17497: GO 17501
// end ; end ;
17499: GO 17438
17501: POP
17502: POP
// end ; end ;
17503: GO 17302
17505: POP
17506: POP
// if result and not asc then
17507: LD_VAR 0 6
17511: IFFALSE 17520
17513: PUSH
17514: LD_VAR 0 4
17518: NOT
17519: AND
17520: IFFALSE 17595
// begin tmp := result ;
17522: LD_ADDR_VAR 0 9
17526: PUSH
17527: LD_VAR 0 6
17531: ST_TO_ADDR
// for i = tmp downto 1 do
17532: LD_ADDR_VAR 0 7
17536: PUSH
17537: DOUBLE
17538: LD_VAR 0 9
17542: INC
17543: ST_TO_ADDR
17544: LD_INT 1
17546: PUSH
17547: FOR_DOWNTO
17548: IFFALSE 17593
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
17550: LD_ADDR_VAR 0 6
17554: PUSH
17555: LD_VAR 0 6
17559: PPUSH
17560: LD_VAR 0 9
17564: PUSH
17565: LD_VAR 0 7
17569: MINUS
17570: PUSH
17571: LD_INT 1
17573: PLUS
17574: PPUSH
17575: LD_VAR 0 9
17579: PUSH
17580: LD_VAR 0 7
17584: ARRAY
17585: PPUSH
17586: CALL_OW 1
17590: ST_TO_ADDR
17591: GO 17547
17593: POP
17594: POP
// end ; tmp := [ ] ;
17595: LD_ADDR_VAR 0 9
17599: PUSH
17600: EMPTY
17601: ST_TO_ADDR
// if mode then
17602: LD_VAR 0 5
17606: IFFALSE 17675
// begin for i = 1 to result do
17608: LD_ADDR_VAR 0 7
17612: PUSH
17613: DOUBLE
17614: LD_INT 1
17616: DEC
17617: ST_TO_ADDR
17618: LD_VAR 0 6
17622: PUSH
17623: FOR_TO
17624: IFFALSE 17663
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
17626: LD_ADDR_VAR 0 9
17630: PUSH
17631: LD_VAR 0 9
17635: PPUSH
17636: LD_VAR 0 7
17640: PPUSH
17641: LD_VAR 0 6
17645: PUSH
17646: LD_VAR 0 7
17650: ARRAY
17651: PUSH
17652: LD_INT 1
17654: ARRAY
17655: PPUSH
17656: CALL_OW 1
17660: ST_TO_ADDR
17661: GO 17623
17663: POP
17664: POP
// result := tmp ;
17665: LD_ADDR_VAR 0 6
17669: PUSH
17670: LD_VAR 0 9
17674: ST_TO_ADDR
// end ; end ;
17675: LD_VAR 0 6
17679: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
17680: LD_INT 0
17682: PPUSH
17683: PPUSH
17684: PPUSH
17685: PPUSH
17686: PPUSH
17687: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
17688: LD_ADDR_VAR 0 5
17692: PUSH
17693: LD_INT 0
17695: PUSH
17696: LD_INT 0
17698: PUSH
17699: LD_INT 0
17701: PUSH
17702: EMPTY
17703: PUSH
17704: EMPTY
17705: LIST
17706: LIST
17707: LIST
17708: LIST
17709: ST_TO_ADDR
// if not x or not y then
17710: LD_VAR 0 2
17714: NOT
17715: IFTRUE 17724
17717: PUSH
17718: LD_VAR 0 3
17722: NOT
17723: OR
17724: IFFALSE 17728
// exit ;
17726: GO 19384
// if not range then
17728: LD_VAR 0 4
17732: NOT
17733: IFFALSE 17743
// range := 10 ;
17735: LD_ADDR_VAR 0 4
17739: PUSH
17740: LD_INT 10
17742: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17743: LD_ADDR_VAR 0 8
17747: PUSH
17748: LD_INT 81
17750: PUSH
17751: LD_VAR 0 1
17755: PUSH
17756: EMPTY
17757: LIST
17758: LIST
17759: PUSH
17760: LD_INT 92
17762: PUSH
17763: LD_VAR 0 2
17767: PUSH
17768: LD_VAR 0 3
17772: PUSH
17773: LD_VAR 0 4
17777: PUSH
17778: EMPTY
17779: LIST
17780: LIST
17781: LIST
17782: LIST
17783: PUSH
17784: LD_INT 3
17786: PUSH
17787: LD_INT 21
17789: PUSH
17790: LD_INT 3
17792: PUSH
17793: EMPTY
17794: LIST
17795: LIST
17796: PUSH
17797: EMPTY
17798: LIST
17799: LIST
17800: PUSH
17801: EMPTY
17802: LIST
17803: LIST
17804: LIST
17805: PPUSH
17806: CALL_OW 69
17810: ST_TO_ADDR
// if not tmp then
17811: LD_VAR 0 8
17815: NOT
17816: IFFALSE 17820
// exit ;
17818: GO 19384
// for i in tmp do
17820: LD_ADDR_VAR 0 6
17824: PUSH
17825: LD_VAR 0 8
17829: PUSH
17830: FOR_IN
17831: IFFALSE 19359
// begin points := [ 0 , 0 , 0 ] ;
17833: LD_ADDR_VAR 0 9
17837: PUSH
17838: LD_INT 0
17840: PUSH
17841: LD_INT 0
17843: PUSH
17844: LD_INT 0
17846: PUSH
17847: EMPTY
17848: LIST
17849: LIST
17850: LIST
17851: ST_TO_ADDR
// bpoints := 1 ;
17852: LD_ADDR_VAR 0 10
17856: PUSH
17857: LD_INT 1
17859: ST_TO_ADDR
// case GetType ( i ) of unit_human :
17860: LD_VAR 0 6
17864: PPUSH
17865: CALL_OW 247
17869: PUSH
17870: LD_INT 1
17872: DOUBLE
17873: EQUAL
17874: IFTRUE 17878
17876: GO 18460
17878: POP
// begin if GetClass ( i ) = 1 then
17879: LD_VAR 0 6
17883: PPUSH
17884: CALL_OW 257
17888: PUSH
17889: LD_INT 1
17891: EQUAL
17892: IFFALSE 17913
// points := [ 10 , 5 , 3 ] ;
17894: LD_ADDR_VAR 0 9
17898: PUSH
17899: LD_INT 10
17901: PUSH
17902: LD_INT 5
17904: PUSH
17905: LD_INT 3
17907: PUSH
17908: EMPTY
17909: LIST
17910: LIST
17911: LIST
17912: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
17913: LD_VAR 0 6
17917: PPUSH
17918: CALL_OW 257
17922: PUSH
17923: LD_INT 2
17925: PUSH
17926: LD_INT 3
17928: PUSH
17929: LD_INT 4
17931: PUSH
17932: EMPTY
17933: LIST
17934: LIST
17935: LIST
17936: IN
17937: IFFALSE 17958
// points := [ 3 , 2 , 1 ] ;
17939: LD_ADDR_VAR 0 9
17943: PUSH
17944: LD_INT 3
17946: PUSH
17947: LD_INT 2
17949: PUSH
17950: LD_INT 1
17952: PUSH
17953: EMPTY
17954: LIST
17955: LIST
17956: LIST
17957: ST_TO_ADDR
// if GetClass ( i ) = 5 then
17958: LD_VAR 0 6
17962: PPUSH
17963: CALL_OW 257
17967: PUSH
17968: LD_INT 5
17970: EQUAL
17971: IFFALSE 17992
// points := [ 130 , 5 , 2 ] ;
17973: LD_ADDR_VAR 0 9
17977: PUSH
17978: LD_INT 130
17980: PUSH
17981: LD_INT 5
17983: PUSH
17984: LD_INT 2
17986: PUSH
17987: EMPTY
17988: LIST
17989: LIST
17990: LIST
17991: ST_TO_ADDR
// if GetClass ( i ) = 8 then
17992: LD_VAR 0 6
17996: PPUSH
17997: CALL_OW 257
18001: PUSH
18002: LD_INT 8
18004: EQUAL
18005: IFFALSE 18026
// points := [ 35 , 35 , 30 ] ;
18007: LD_ADDR_VAR 0 9
18011: PUSH
18012: LD_INT 35
18014: PUSH
18015: LD_INT 35
18017: PUSH
18018: LD_INT 30
18020: PUSH
18021: EMPTY
18022: LIST
18023: LIST
18024: LIST
18025: ST_TO_ADDR
// if GetClass ( i ) = 9 then
18026: LD_VAR 0 6
18030: PPUSH
18031: CALL_OW 257
18035: PUSH
18036: LD_INT 9
18038: EQUAL
18039: IFFALSE 18060
// points := [ 20 , 55 , 40 ] ;
18041: LD_ADDR_VAR 0 9
18045: PUSH
18046: LD_INT 20
18048: PUSH
18049: LD_INT 55
18051: PUSH
18052: LD_INT 40
18054: PUSH
18055: EMPTY
18056: LIST
18057: LIST
18058: LIST
18059: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
18060: LD_VAR 0 6
18064: PPUSH
18065: CALL_OW 257
18069: PUSH
18070: LD_INT 12
18072: PUSH
18073: LD_INT 16
18075: PUSH
18076: EMPTY
18077: LIST
18078: LIST
18079: IN
18080: IFFALSE 18101
// points := [ 5 , 3 , 2 ] ;
18082: LD_ADDR_VAR 0 9
18086: PUSH
18087: LD_INT 5
18089: PUSH
18090: LD_INT 3
18092: PUSH
18093: LD_INT 2
18095: PUSH
18096: EMPTY
18097: LIST
18098: LIST
18099: LIST
18100: ST_TO_ADDR
// if GetClass ( i ) = 17 then
18101: LD_VAR 0 6
18105: PPUSH
18106: CALL_OW 257
18110: PUSH
18111: LD_INT 17
18113: EQUAL
18114: IFFALSE 18135
// points := [ 100 , 50 , 75 ] ;
18116: LD_ADDR_VAR 0 9
18120: PUSH
18121: LD_INT 100
18123: PUSH
18124: LD_INT 50
18126: PUSH
18127: LD_INT 75
18129: PUSH
18130: EMPTY
18131: LIST
18132: LIST
18133: LIST
18134: ST_TO_ADDR
// if GetClass ( i ) = 15 then
18135: LD_VAR 0 6
18139: PPUSH
18140: CALL_OW 257
18144: PUSH
18145: LD_INT 15
18147: EQUAL
18148: IFFALSE 18169
// points := [ 10 , 5 , 3 ] ;
18150: LD_ADDR_VAR 0 9
18154: PUSH
18155: LD_INT 10
18157: PUSH
18158: LD_INT 5
18160: PUSH
18161: LD_INT 3
18163: PUSH
18164: EMPTY
18165: LIST
18166: LIST
18167: LIST
18168: ST_TO_ADDR
// if GetClass ( i ) = 14 then
18169: LD_VAR 0 6
18173: PPUSH
18174: CALL_OW 257
18178: PUSH
18179: LD_INT 14
18181: EQUAL
18182: IFFALSE 18203
// points := [ 10 , 0 , 0 ] ;
18184: LD_ADDR_VAR 0 9
18188: PUSH
18189: LD_INT 10
18191: PUSH
18192: LD_INT 0
18194: PUSH
18195: LD_INT 0
18197: PUSH
18198: EMPTY
18199: LIST
18200: LIST
18201: LIST
18202: ST_TO_ADDR
// if GetClass ( i ) = 11 then
18203: LD_VAR 0 6
18207: PPUSH
18208: CALL_OW 257
18212: PUSH
18213: LD_INT 11
18215: EQUAL
18216: IFFALSE 18237
// points := [ 30 , 10 , 5 ] ;
18218: LD_ADDR_VAR 0 9
18222: PUSH
18223: LD_INT 30
18225: PUSH
18226: LD_INT 10
18228: PUSH
18229: LD_INT 5
18231: PUSH
18232: EMPTY
18233: LIST
18234: LIST
18235: LIST
18236: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
18237: LD_VAR 0 1
18241: PPUSH
18242: LD_INT 5
18244: PPUSH
18245: CALL_OW 321
18249: PUSH
18250: LD_INT 2
18252: EQUAL
18253: IFFALSE 18270
// bpoints := bpoints * 1.8 ;
18255: LD_ADDR_VAR 0 10
18259: PUSH
18260: LD_VAR 0 10
18264: PUSH
18265: LD_REAL  1.80000000000000E+0000
18268: MUL
18269: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
18270: LD_VAR 0 6
18274: PPUSH
18275: CALL_OW 257
18279: PUSH
18280: LD_INT 1
18282: PUSH
18283: LD_INT 2
18285: PUSH
18286: LD_INT 3
18288: PUSH
18289: LD_INT 4
18291: PUSH
18292: EMPTY
18293: LIST
18294: LIST
18295: LIST
18296: LIST
18297: IN
18298: IFFALSE 18318
18300: PUSH
18301: LD_VAR 0 1
18305: PPUSH
18306: LD_INT 51
18308: PPUSH
18309: CALL_OW 321
18313: PUSH
18314: LD_INT 2
18316: EQUAL
18317: AND
18318: IFFALSE 18335
// bpoints := bpoints * 1.2 ;
18320: LD_ADDR_VAR 0 10
18324: PUSH
18325: LD_VAR 0 10
18329: PUSH
18330: LD_REAL  1.20000000000000E+0000
18333: MUL
18334: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
18335: LD_VAR 0 6
18339: PPUSH
18340: CALL_OW 257
18344: PUSH
18345: LD_INT 5
18347: PUSH
18348: LD_INT 7
18350: PUSH
18351: LD_INT 9
18353: PUSH
18354: EMPTY
18355: LIST
18356: LIST
18357: LIST
18358: IN
18359: IFFALSE 18379
18361: PUSH
18362: LD_VAR 0 1
18366: PPUSH
18367: LD_INT 52
18369: PPUSH
18370: CALL_OW 321
18374: PUSH
18375: LD_INT 2
18377: EQUAL
18378: AND
18379: IFFALSE 18396
// bpoints := bpoints * 1.5 ;
18381: LD_ADDR_VAR 0 10
18385: PUSH
18386: LD_VAR 0 10
18390: PUSH
18391: LD_REAL  1.50000000000000E+0000
18394: MUL
18395: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
18396: LD_VAR 0 1
18400: PPUSH
18401: LD_INT 66
18403: PPUSH
18404: CALL_OW 321
18408: PUSH
18409: LD_INT 2
18411: EQUAL
18412: IFFALSE 18429
// bpoints := bpoints * 1.1 ;
18414: LD_ADDR_VAR 0 10
18418: PUSH
18419: LD_VAR 0 10
18423: PUSH
18424: LD_REAL  1.10000000000000E+0000
18427: MUL
18428: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
18429: LD_ADDR_VAR 0 10
18433: PUSH
18434: LD_VAR 0 10
18438: PUSH
18439: LD_VAR 0 6
18443: PPUSH
18444: LD_INT 1
18446: PPUSH
18447: CALL_OW 259
18451: PUSH
18452: LD_REAL  1.15000000000000E+0000
18455: MUL
18456: MUL
18457: ST_TO_ADDR
// end ; unit_vehicle :
18458: GO 19288
18460: LD_INT 2
18462: DOUBLE
18463: EQUAL
18464: IFTRUE 18468
18466: GO 19276
18468: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
18469: LD_VAR 0 6
18473: PPUSH
18474: CALL_OW 264
18478: PUSH
18479: LD_INT 2
18481: PUSH
18482: LD_INT 42
18484: PUSH
18485: LD_INT 24
18487: PUSH
18488: EMPTY
18489: LIST
18490: LIST
18491: LIST
18492: IN
18493: IFFALSE 18514
// points := [ 25 , 5 , 3 ] ;
18495: LD_ADDR_VAR 0 9
18499: PUSH
18500: LD_INT 25
18502: PUSH
18503: LD_INT 5
18505: PUSH
18506: LD_INT 3
18508: PUSH
18509: EMPTY
18510: LIST
18511: LIST
18512: LIST
18513: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
18514: LD_VAR 0 6
18518: PPUSH
18519: CALL_OW 264
18523: PUSH
18524: LD_INT 4
18526: PUSH
18527: LD_INT 43
18529: PUSH
18530: LD_INT 25
18532: PUSH
18533: EMPTY
18534: LIST
18535: LIST
18536: LIST
18537: IN
18538: IFFALSE 18559
// points := [ 40 , 15 , 5 ] ;
18540: LD_ADDR_VAR 0 9
18544: PUSH
18545: LD_INT 40
18547: PUSH
18548: LD_INT 15
18550: PUSH
18551: LD_INT 5
18553: PUSH
18554: EMPTY
18555: LIST
18556: LIST
18557: LIST
18558: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
18559: LD_VAR 0 6
18563: PPUSH
18564: CALL_OW 264
18568: PUSH
18569: LD_INT 3
18571: PUSH
18572: LD_INT 23
18574: PUSH
18575: EMPTY
18576: LIST
18577: LIST
18578: IN
18579: IFFALSE 18600
// points := [ 7 , 25 , 8 ] ;
18581: LD_ADDR_VAR 0 9
18585: PUSH
18586: LD_INT 7
18588: PUSH
18589: LD_INT 25
18591: PUSH
18592: LD_INT 8
18594: PUSH
18595: EMPTY
18596: LIST
18597: LIST
18598: LIST
18599: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
18600: LD_VAR 0 6
18604: PPUSH
18605: CALL_OW 264
18609: PUSH
18610: LD_INT 5
18612: PUSH
18613: LD_INT 27
18615: PUSH
18616: LD_INT 44
18618: PUSH
18619: EMPTY
18620: LIST
18621: LIST
18622: LIST
18623: IN
18624: IFFALSE 18645
// points := [ 14 , 50 , 16 ] ;
18626: LD_ADDR_VAR 0 9
18630: PUSH
18631: LD_INT 14
18633: PUSH
18634: LD_INT 50
18636: PUSH
18637: LD_INT 16
18639: PUSH
18640: EMPTY
18641: LIST
18642: LIST
18643: LIST
18644: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
18645: LD_VAR 0 6
18649: PPUSH
18650: CALL_OW 264
18654: PUSH
18655: LD_INT 6
18657: PUSH
18658: LD_INT 46
18660: PUSH
18661: EMPTY
18662: LIST
18663: LIST
18664: IN
18665: IFFALSE 18686
// points := [ 32 , 120 , 70 ] ;
18667: LD_ADDR_VAR 0 9
18671: PUSH
18672: LD_INT 32
18674: PUSH
18675: LD_INT 120
18677: PUSH
18678: LD_INT 70
18680: PUSH
18681: EMPTY
18682: LIST
18683: LIST
18684: LIST
18685: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
18686: LD_VAR 0 6
18690: PPUSH
18691: CALL_OW 264
18695: PUSH
18696: LD_INT 7
18698: PUSH
18699: LD_INT 28
18701: PUSH
18702: LD_INT 45
18704: PUSH
18705: LD_INT 92
18707: PUSH
18708: EMPTY
18709: LIST
18710: LIST
18711: LIST
18712: LIST
18713: IN
18714: IFFALSE 18735
// points := [ 35 , 20 , 45 ] ;
18716: LD_ADDR_VAR 0 9
18720: PUSH
18721: LD_INT 35
18723: PUSH
18724: LD_INT 20
18726: PUSH
18727: LD_INT 45
18729: PUSH
18730: EMPTY
18731: LIST
18732: LIST
18733: LIST
18734: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
18735: LD_VAR 0 6
18739: PPUSH
18740: CALL_OW 264
18744: PUSH
18745: LD_INT 47
18747: PUSH
18748: EMPTY
18749: LIST
18750: IN
18751: IFFALSE 18772
// points := [ 67 , 45 , 75 ] ;
18753: LD_ADDR_VAR 0 9
18757: PUSH
18758: LD_INT 67
18760: PUSH
18761: LD_INT 45
18763: PUSH
18764: LD_INT 75
18766: PUSH
18767: EMPTY
18768: LIST
18769: LIST
18770: LIST
18771: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
18772: LD_VAR 0 6
18776: PPUSH
18777: CALL_OW 264
18781: PUSH
18782: LD_INT 26
18784: PUSH
18785: EMPTY
18786: LIST
18787: IN
18788: IFFALSE 18809
// points := [ 120 , 30 , 80 ] ;
18790: LD_ADDR_VAR 0 9
18794: PUSH
18795: LD_INT 120
18797: PUSH
18798: LD_INT 30
18800: PUSH
18801: LD_INT 80
18803: PUSH
18804: EMPTY
18805: LIST
18806: LIST
18807: LIST
18808: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
18809: LD_VAR 0 6
18813: PPUSH
18814: CALL_OW 264
18818: PUSH
18819: LD_INT 22
18821: PUSH
18822: EMPTY
18823: LIST
18824: IN
18825: IFFALSE 18846
// points := [ 40 , 1 , 1 ] ;
18827: LD_ADDR_VAR 0 9
18831: PUSH
18832: LD_INT 40
18834: PUSH
18835: LD_INT 1
18837: PUSH
18838: LD_INT 1
18840: PUSH
18841: EMPTY
18842: LIST
18843: LIST
18844: LIST
18845: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
18846: LD_VAR 0 6
18850: PPUSH
18851: CALL_OW 264
18855: PUSH
18856: LD_INT 29
18858: PUSH
18859: EMPTY
18860: LIST
18861: IN
18862: IFFALSE 18883
// points := [ 70 , 200 , 400 ] ;
18864: LD_ADDR_VAR 0 9
18868: PUSH
18869: LD_INT 70
18871: PUSH
18872: LD_INT 200
18874: PUSH
18875: LD_INT 400
18877: PUSH
18878: EMPTY
18879: LIST
18880: LIST
18881: LIST
18882: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
18883: LD_VAR 0 6
18887: PPUSH
18888: CALL_OW 264
18892: PUSH
18893: LD_INT 14
18895: PUSH
18896: LD_INT 53
18898: PUSH
18899: EMPTY
18900: LIST
18901: LIST
18902: IN
18903: IFFALSE 18924
// points := [ 40 , 10 , 20 ] ;
18905: LD_ADDR_VAR 0 9
18909: PUSH
18910: LD_INT 40
18912: PUSH
18913: LD_INT 10
18915: PUSH
18916: LD_INT 20
18918: PUSH
18919: EMPTY
18920: LIST
18921: LIST
18922: LIST
18923: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
18924: LD_VAR 0 6
18928: PPUSH
18929: CALL_OW 264
18933: PUSH
18934: LD_INT 9
18936: PUSH
18937: EMPTY
18938: LIST
18939: IN
18940: IFFALSE 18961
// points := [ 5 , 70 , 20 ] ;
18942: LD_ADDR_VAR 0 9
18946: PUSH
18947: LD_INT 5
18949: PUSH
18950: LD_INT 70
18952: PUSH
18953: LD_INT 20
18955: PUSH
18956: EMPTY
18957: LIST
18958: LIST
18959: LIST
18960: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
18961: LD_VAR 0 6
18965: PPUSH
18966: CALL_OW 264
18970: PUSH
18971: LD_INT 10
18973: PUSH
18974: EMPTY
18975: LIST
18976: IN
18977: IFFALSE 18998
// points := [ 35 , 110 , 70 ] ;
18979: LD_ADDR_VAR 0 9
18983: PUSH
18984: LD_INT 35
18986: PUSH
18987: LD_INT 110
18989: PUSH
18990: LD_INT 70
18992: PUSH
18993: EMPTY
18994: LIST
18995: LIST
18996: LIST
18997: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
18998: LD_VAR 0 6
19002: PPUSH
19003: CALL_OW 265
19007: PUSH
19008: LD_INT 25
19010: EQUAL
19011: IFFALSE 19032
// points := [ 80 , 65 , 100 ] ;
19013: LD_ADDR_VAR 0 9
19017: PUSH
19018: LD_INT 80
19020: PUSH
19021: LD_INT 65
19023: PUSH
19024: LD_INT 100
19026: PUSH
19027: EMPTY
19028: LIST
19029: LIST
19030: LIST
19031: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
19032: LD_VAR 0 6
19036: PPUSH
19037: CALL_OW 263
19041: PUSH
19042: LD_INT 1
19044: EQUAL
19045: IFFALSE 19080
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
19047: LD_ADDR_VAR 0 10
19051: PUSH
19052: LD_VAR 0 10
19056: PUSH
19057: LD_VAR 0 6
19061: PPUSH
19062: CALL_OW 311
19066: PPUSH
19067: LD_INT 3
19069: PPUSH
19070: CALL_OW 259
19074: PUSH
19075: LD_INT 4
19077: MUL
19078: MUL
19079: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
19080: LD_VAR 0 6
19084: PPUSH
19085: CALL_OW 263
19089: PUSH
19090: LD_INT 2
19092: EQUAL
19093: IFFALSE 19144
// begin j := IsControledBy ( i ) ;
19095: LD_ADDR_VAR 0 7
19099: PUSH
19100: LD_VAR 0 6
19104: PPUSH
19105: CALL_OW 312
19109: ST_TO_ADDR
// if j then
19110: LD_VAR 0 7
19114: IFFALSE 19144
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
19116: LD_ADDR_VAR 0 10
19120: PUSH
19121: LD_VAR 0 10
19125: PUSH
19126: LD_VAR 0 7
19130: PPUSH
19131: LD_INT 3
19133: PPUSH
19134: CALL_OW 259
19138: PUSH
19139: LD_INT 3
19141: MUL
19142: MUL
19143: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
19144: LD_VAR 0 6
19148: PPUSH
19149: CALL_OW 264
19153: PUSH
19154: LD_INT 5
19156: PUSH
19157: LD_INT 6
19159: PUSH
19160: LD_INT 46
19162: PUSH
19163: LD_INT 44
19165: PUSH
19166: LD_INT 47
19168: PUSH
19169: LD_INT 45
19171: PUSH
19172: LD_INT 28
19174: PUSH
19175: LD_INT 7
19177: PUSH
19178: LD_INT 27
19180: PUSH
19181: LD_INT 29
19183: PUSH
19184: EMPTY
19185: LIST
19186: LIST
19187: LIST
19188: LIST
19189: LIST
19190: LIST
19191: LIST
19192: LIST
19193: LIST
19194: LIST
19195: IN
19196: IFFALSE 19216
19198: PUSH
19199: LD_VAR 0 1
19203: PPUSH
19204: LD_INT 52
19206: PPUSH
19207: CALL_OW 321
19211: PUSH
19212: LD_INT 2
19214: EQUAL
19215: AND
19216: IFFALSE 19233
// bpoints := bpoints * 1.2 ;
19218: LD_ADDR_VAR 0 10
19222: PUSH
19223: LD_VAR 0 10
19227: PUSH
19228: LD_REAL  1.20000000000000E+0000
19231: MUL
19232: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
19233: LD_VAR 0 6
19237: PPUSH
19238: CALL_OW 264
19242: PUSH
19243: LD_INT 6
19245: PUSH
19246: LD_INT 46
19248: PUSH
19249: LD_INT 47
19251: PUSH
19252: EMPTY
19253: LIST
19254: LIST
19255: LIST
19256: IN
19257: IFFALSE 19274
// bpoints := bpoints * 1.2 ;
19259: LD_ADDR_VAR 0 10
19263: PUSH
19264: LD_VAR 0 10
19268: PUSH
19269: LD_REAL  1.20000000000000E+0000
19272: MUL
19273: ST_TO_ADDR
// end ; unit_building :
19274: GO 19288
19276: LD_INT 3
19278: DOUBLE
19279: EQUAL
19280: IFTRUE 19284
19282: GO 19287
19284: POP
// ; end ;
19285: GO 19288
19287: POP
// for j = 1 to 3 do
19288: LD_ADDR_VAR 0 7
19292: PUSH
19293: DOUBLE
19294: LD_INT 1
19296: DEC
19297: ST_TO_ADDR
19298: LD_INT 3
19300: PUSH
19301: FOR_TO
19302: IFFALSE 19355
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
19304: LD_ADDR_VAR 0 5
19308: PUSH
19309: LD_VAR 0 5
19313: PPUSH
19314: LD_VAR 0 7
19318: PPUSH
19319: LD_VAR 0 5
19323: PUSH
19324: LD_VAR 0 7
19328: ARRAY
19329: PUSH
19330: LD_VAR 0 9
19334: PUSH
19335: LD_VAR 0 7
19339: ARRAY
19340: PUSH
19341: LD_VAR 0 10
19345: MUL
19346: PLUS
19347: PPUSH
19348: CALL_OW 1
19352: ST_TO_ADDR
19353: GO 19301
19355: POP
19356: POP
// end ;
19357: GO 17830
19359: POP
19360: POP
// result := Replace ( result , 4 , tmp ) ;
19361: LD_ADDR_VAR 0 5
19365: PUSH
19366: LD_VAR 0 5
19370: PPUSH
19371: LD_INT 4
19373: PPUSH
19374: LD_VAR 0 8
19378: PPUSH
19379: CALL_OW 1
19383: ST_TO_ADDR
// end ;
19384: LD_VAR 0 5
19388: RET
// export function DangerAtRange ( unit , range ) ; begin
19389: LD_INT 0
19391: PPUSH
// if not unit then
19392: LD_VAR 0 1
19396: NOT
19397: IFFALSE 19401
// exit ;
19399: GO 19446
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
19401: LD_ADDR_VAR 0 3
19405: PUSH
19406: LD_VAR 0 1
19410: PPUSH
19411: CALL_OW 255
19415: PPUSH
19416: LD_VAR 0 1
19420: PPUSH
19421: CALL_OW 250
19425: PPUSH
19426: LD_VAR 0 1
19430: PPUSH
19431: CALL_OW 251
19435: PPUSH
19436: LD_VAR 0 2
19440: PPUSH
19441: CALL 17680 0 4
19445: ST_TO_ADDR
// end ;
19446: LD_VAR 0 3
19450: RET
// export function DangerInArea ( side , area ) ; begin
19451: LD_INT 0
19453: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
19454: LD_ADDR_VAR 0 3
19458: PUSH
19459: LD_VAR 0 2
19463: PPUSH
19464: LD_INT 81
19466: PUSH
19467: LD_VAR 0 1
19471: PUSH
19472: EMPTY
19473: LIST
19474: LIST
19475: PPUSH
19476: CALL_OW 70
19480: ST_TO_ADDR
// end ;
19481: LD_VAR 0 3
19485: RET
// export function IsExtension ( b ) ; begin
19486: LD_INT 0
19488: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
19489: LD_ADDR_VAR 0 2
19493: PUSH
19494: LD_VAR 0 1
19498: PUSH
19499: LD_INT 23
19501: PUSH
19502: LD_INT 20
19504: PUSH
19505: LD_INT 22
19507: PUSH
19508: LD_INT 17
19510: PUSH
19511: LD_INT 24
19513: PUSH
19514: LD_INT 21
19516: PUSH
19517: LD_INT 19
19519: PUSH
19520: LD_INT 16
19522: PUSH
19523: LD_INT 25
19525: PUSH
19526: LD_INT 18
19528: PUSH
19529: EMPTY
19530: LIST
19531: LIST
19532: LIST
19533: LIST
19534: LIST
19535: LIST
19536: LIST
19537: LIST
19538: LIST
19539: LIST
19540: IN
19541: ST_TO_ADDR
// end ;
19542: LD_VAR 0 2
19546: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
19547: LD_INT 0
19549: PPUSH
19550: PPUSH
19551: PPUSH
// result := [ ] ;
19552: LD_ADDR_VAR 0 4
19556: PUSH
19557: EMPTY
19558: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
19559: LD_ADDR_VAR 0 5
19563: PUSH
19564: LD_VAR 0 2
19568: PPUSH
19569: LD_INT 21
19571: PUSH
19572: LD_INT 3
19574: PUSH
19575: EMPTY
19576: LIST
19577: LIST
19578: PPUSH
19579: CALL_OW 70
19583: ST_TO_ADDR
// if not tmp then
19584: LD_VAR 0 5
19588: NOT
19589: IFFALSE 19593
// exit ;
19591: GO 19657
// if checkLink then
19593: LD_VAR 0 3
19597: IFFALSE 19647
// begin for i in tmp do
19599: LD_ADDR_VAR 0 6
19603: PUSH
19604: LD_VAR 0 5
19608: PUSH
19609: FOR_IN
19610: IFFALSE 19645
// if GetBase ( i ) <> base then
19612: LD_VAR 0 6
19616: PPUSH
19617: CALL_OW 274
19621: PUSH
19622: LD_VAR 0 1
19626: NONEQUAL
19627: IFFALSE 19643
// ComLinkToBase ( base , i ) ;
19629: LD_VAR 0 1
19633: PPUSH
19634: LD_VAR 0 6
19638: PPUSH
19639: CALL_OW 169
19643: GO 19609
19645: POP
19646: POP
// end ; result := tmp ;
19647: LD_ADDR_VAR 0 4
19651: PUSH
19652: LD_VAR 0 5
19656: ST_TO_ADDR
// end ;
19657: LD_VAR 0 4
19661: RET
// export function ComComplete ( units , b ) ; var i ; begin
19662: LD_INT 0
19664: PPUSH
19665: PPUSH
// if not units then
19666: LD_VAR 0 1
19670: NOT
19671: IFFALSE 19675
// exit ;
19673: GO 19765
// for i in units do
19675: LD_ADDR_VAR 0 4
19679: PUSH
19680: LD_VAR 0 1
19684: PUSH
19685: FOR_IN
19686: IFFALSE 19763
// if BuildingStatus ( b ) = bs_build then
19688: LD_VAR 0 2
19692: PPUSH
19693: CALL_OW 461
19697: PUSH
19698: LD_INT 1
19700: EQUAL
19701: IFFALSE 19761
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
19703: LD_VAR 0 4
19707: PPUSH
19708: LD_STRING h
19710: PUSH
19711: LD_VAR 0 2
19715: PPUSH
19716: CALL_OW 250
19720: PUSH
19721: LD_VAR 0 2
19725: PPUSH
19726: CALL_OW 251
19730: PUSH
19731: LD_VAR 0 2
19735: PUSH
19736: LD_INT 0
19738: PUSH
19739: LD_INT 0
19741: PUSH
19742: LD_INT 0
19744: PUSH
19745: EMPTY
19746: LIST
19747: LIST
19748: LIST
19749: LIST
19750: LIST
19751: LIST
19752: LIST
19753: PUSH
19754: EMPTY
19755: LIST
19756: PPUSH
19757: CALL_OW 446
19761: GO 19685
19763: POP
19764: POP
// end ;
19765: LD_VAR 0 3
19769: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
19770: LD_INT 0
19772: PPUSH
19773: PPUSH
19774: PPUSH
19775: PPUSH
19776: PPUSH
19777: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
19778: LD_VAR 0 1
19782: NOT
19783: IFTRUE 19800
19785: PUSH
19786: LD_VAR 0 1
19790: PPUSH
19791: CALL_OW 263
19795: PUSH
19796: LD_INT 2
19798: NONEQUAL
19799: OR
19800: IFFALSE 19804
// exit ;
19802: GO 20120
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
19804: LD_ADDR_VAR 0 6
19808: PUSH
19809: LD_INT 22
19811: PUSH
19812: LD_VAR 0 1
19816: PPUSH
19817: CALL_OW 255
19821: PUSH
19822: EMPTY
19823: LIST
19824: LIST
19825: PUSH
19826: LD_INT 2
19828: PUSH
19829: LD_INT 30
19831: PUSH
19832: LD_INT 36
19834: PUSH
19835: EMPTY
19836: LIST
19837: LIST
19838: PUSH
19839: LD_INT 34
19841: PUSH
19842: LD_INT 31
19844: PUSH
19845: EMPTY
19846: LIST
19847: LIST
19848: PUSH
19849: EMPTY
19850: LIST
19851: LIST
19852: LIST
19853: PUSH
19854: EMPTY
19855: LIST
19856: LIST
19857: PPUSH
19858: CALL_OW 69
19862: ST_TO_ADDR
// if not tmp then
19863: LD_VAR 0 6
19867: NOT
19868: IFFALSE 19872
// exit ;
19870: GO 20120
// result := [ ] ;
19872: LD_ADDR_VAR 0 2
19876: PUSH
19877: EMPTY
19878: ST_TO_ADDR
// for i in tmp do
19879: LD_ADDR_VAR 0 3
19883: PUSH
19884: LD_VAR 0 6
19888: PUSH
19889: FOR_IN
19890: IFFALSE 19961
// begin t := UnitsInside ( i ) ;
19892: LD_ADDR_VAR 0 4
19896: PUSH
19897: LD_VAR 0 3
19901: PPUSH
19902: CALL_OW 313
19906: ST_TO_ADDR
// if t then
19907: LD_VAR 0 4
19911: IFFALSE 19959
// for j in t do
19913: LD_ADDR_VAR 0 7
19917: PUSH
19918: LD_VAR 0 4
19922: PUSH
19923: FOR_IN
19924: IFFALSE 19957
// result := Replace ( result , result + 1 , j ) ;
19926: LD_ADDR_VAR 0 2
19930: PUSH
19931: LD_VAR 0 2
19935: PPUSH
19936: LD_VAR 0 2
19940: PUSH
19941: LD_INT 1
19943: PLUS
19944: PPUSH
19945: LD_VAR 0 7
19949: PPUSH
19950: CALL_OW 1
19954: ST_TO_ADDR
19955: GO 19923
19957: POP
19958: POP
// end ;
19959: GO 19889
19961: POP
19962: POP
// if not result then
19963: LD_VAR 0 2
19967: NOT
19968: IFFALSE 19972
// exit ;
19970: GO 20120
// mech := result [ 1 ] ;
19972: LD_ADDR_VAR 0 5
19976: PUSH
19977: LD_VAR 0 2
19981: PUSH
19982: LD_INT 1
19984: ARRAY
19985: ST_TO_ADDR
// if result > 1 then
19986: LD_VAR 0 2
19990: PUSH
19991: LD_INT 1
19993: GREATER
19994: IFFALSE 20106
// begin for i = 2 to result do
19996: LD_ADDR_VAR 0 3
20000: PUSH
20001: DOUBLE
20002: LD_INT 2
20004: DEC
20005: ST_TO_ADDR
20006: LD_VAR 0 2
20010: PUSH
20011: FOR_TO
20012: IFFALSE 20104
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
20014: LD_ADDR_VAR 0 4
20018: PUSH
20019: LD_VAR 0 2
20023: PUSH
20024: LD_VAR 0 3
20028: ARRAY
20029: PPUSH
20030: LD_INT 3
20032: PPUSH
20033: CALL_OW 259
20037: PUSH
20038: LD_VAR 0 2
20042: PUSH
20043: LD_VAR 0 3
20047: ARRAY
20048: PPUSH
20049: CALL_OW 432
20053: MINUS
20054: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
20055: LD_VAR 0 4
20059: PUSH
20060: LD_VAR 0 5
20064: PPUSH
20065: LD_INT 3
20067: PPUSH
20068: CALL_OW 259
20072: PUSH
20073: LD_VAR 0 5
20077: PPUSH
20078: CALL_OW 432
20082: MINUS
20083: GREATEREQUAL
20084: IFFALSE 20102
// mech := result [ i ] ;
20086: LD_ADDR_VAR 0 5
20090: PUSH
20091: LD_VAR 0 2
20095: PUSH
20096: LD_VAR 0 3
20100: ARRAY
20101: ST_TO_ADDR
// end ;
20102: GO 20011
20104: POP
20105: POP
// end ; ComLinkTo ( vehicle , mech ) ;
20106: LD_VAR 0 1
20110: PPUSH
20111: LD_VAR 0 5
20115: PPUSH
20116: CALL_OW 135
// end ;
20120: LD_VAR 0 2
20124: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
20125: LD_INT 0
20127: PPUSH
20128: PPUSH
20129: PPUSH
20130: PPUSH
20131: PPUSH
20132: PPUSH
20133: PPUSH
20134: PPUSH
20135: PPUSH
20136: PPUSH
20137: PPUSH
20138: PPUSH
20139: PPUSH
// result := [ ] ;
20140: LD_ADDR_VAR 0 7
20144: PUSH
20145: EMPTY
20146: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
20147: LD_VAR 0 1
20151: PPUSH
20152: CALL_OW 266
20156: PUSH
20157: LD_INT 0
20159: PUSH
20160: LD_INT 1
20162: PUSH
20163: EMPTY
20164: LIST
20165: LIST
20166: IN
20167: NOT
20168: IFFALSE 20172
// exit ;
20170: GO 21812
// if name then
20172: LD_VAR 0 3
20176: IFFALSE 20192
// SetBName ( base_dep , name ) ;
20178: LD_VAR 0 1
20182: PPUSH
20183: LD_VAR 0 3
20187: PPUSH
20188: CALL_OW 500
// base := GetBase ( base_dep ) ;
20192: LD_ADDR_VAR 0 15
20196: PUSH
20197: LD_VAR 0 1
20201: PPUSH
20202: CALL_OW 274
20206: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
20207: LD_ADDR_VAR 0 16
20211: PUSH
20212: LD_VAR 0 1
20216: PPUSH
20217: CALL_OW 255
20221: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
20222: LD_ADDR_VAR 0 17
20226: PUSH
20227: LD_VAR 0 1
20231: PPUSH
20232: CALL_OW 248
20236: ST_TO_ADDR
// if sources then
20237: LD_VAR 0 5
20241: IFFALSE 20288
// for i = 1 to 3 do
20243: LD_ADDR_VAR 0 8
20247: PUSH
20248: DOUBLE
20249: LD_INT 1
20251: DEC
20252: ST_TO_ADDR
20253: LD_INT 3
20255: PUSH
20256: FOR_TO
20257: IFFALSE 20286
// AddResourceType ( base , i , sources [ i ] ) ;
20259: LD_VAR 0 15
20263: PPUSH
20264: LD_VAR 0 8
20268: PPUSH
20269: LD_VAR 0 5
20273: PUSH
20274: LD_VAR 0 8
20278: ARRAY
20279: PPUSH
20280: CALL_OW 276
20284: GO 20256
20286: POP
20287: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
20288: LD_ADDR_VAR 0 18
20292: PUSH
20293: LD_VAR 0 15
20297: PPUSH
20298: LD_VAR 0 2
20302: PPUSH
20303: LD_INT 1
20305: PPUSH
20306: CALL 19547 0 3
20310: ST_TO_ADDR
// InitHc ;
20311: CALL_OW 19
// InitUc ;
20315: CALL_OW 18
// uc_side := side ;
20319: LD_ADDR_OWVAR 20
20323: PUSH
20324: LD_VAR 0 16
20328: ST_TO_ADDR
// uc_nation := nation ;
20329: LD_ADDR_OWVAR 21
20333: PUSH
20334: LD_VAR 0 17
20338: ST_TO_ADDR
// if buildings then
20339: LD_VAR 0 18
20343: IFFALSE 21671
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
20345: LD_ADDR_VAR 0 19
20349: PUSH
20350: LD_VAR 0 18
20354: PPUSH
20355: LD_INT 2
20357: PUSH
20358: LD_INT 30
20360: PUSH
20361: LD_INT 29
20363: PUSH
20364: EMPTY
20365: LIST
20366: LIST
20367: PUSH
20368: LD_INT 30
20370: PUSH
20371: LD_INT 30
20373: PUSH
20374: EMPTY
20375: LIST
20376: LIST
20377: PUSH
20378: EMPTY
20379: LIST
20380: LIST
20381: LIST
20382: PPUSH
20383: CALL_OW 72
20387: ST_TO_ADDR
// if tmp then
20388: LD_VAR 0 19
20392: IFFALSE 20440
// for i in tmp do
20394: LD_ADDR_VAR 0 8
20398: PUSH
20399: LD_VAR 0 19
20403: PUSH
20404: FOR_IN
20405: IFFALSE 20438
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
20407: LD_VAR 0 8
20411: PPUSH
20412: CALL_OW 250
20416: PPUSH
20417: LD_VAR 0 8
20421: PPUSH
20422: CALL_OW 251
20426: PPUSH
20427: LD_VAR 0 16
20431: PPUSH
20432: CALL_OW 441
20436: GO 20404
20438: POP
20439: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
20440: LD_VAR 0 18
20444: PPUSH
20445: LD_INT 2
20447: PUSH
20448: LD_INT 30
20450: PUSH
20451: LD_INT 32
20453: PUSH
20454: EMPTY
20455: LIST
20456: LIST
20457: PUSH
20458: LD_INT 30
20460: PUSH
20461: LD_INT 33
20463: PUSH
20464: EMPTY
20465: LIST
20466: LIST
20467: PUSH
20468: EMPTY
20469: LIST
20470: LIST
20471: LIST
20472: PPUSH
20473: CALL_OW 72
20477: IFFALSE 20565
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
20479: LD_ADDR_VAR 0 8
20483: PUSH
20484: LD_VAR 0 18
20488: PPUSH
20489: LD_INT 2
20491: PUSH
20492: LD_INT 30
20494: PUSH
20495: LD_INT 32
20497: PUSH
20498: EMPTY
20499: LIST
20500: LIST
20501: PUSH
20502: LD_INT 30
20504: PUSH
20505: LD_INT 33
20507: PUSH
20508: EMPTY
20509: LIST
20510: LIST
20511: PUSH
20512: EMPTY
20513: LIST
20514: LIST
20515: LIST
20516: PPUSH
20517: CALL_OW 72
20521: PUSH
20522: FOR_IN
20523: IFFALSE 20563
// begin if not GetBWeapon ( i ) then
20525: LD_VAR 0 8
20529: PPUSH
20530: CALL_OW 269
20534: NOT
20535: IFFALSE 20561
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
20537: LD_VAR 0 8
20541: PPUSH
20542: LD_VAR 0 8
20546: PPUSH
20547: LD_VAR 0 2
20551: PPUSH
20552: CALL 21817 0 2
20556: PPUSH
20557: CALL_OW 431
// end ;
20561: GO 20522
20563: POP
20564: POP
// end ; for i = 1 to personel do
20565: LD_ADDR_VAR 0 8
20569: PUSH
20570: DOUBLE
20571: LD_INT 1
20573: DEC
20574: ST_TO_ADDR
20575: LD_VAR 0 6
20579: PUSH
20580: FOR_TO
20581: IFFALSE 21651
// begin if i > 4 then
20583: LD_VAR 0 8
20587: PUSH
20588: LD_INT 4
20590: GREATER
20591: IFFALSE 20595
// break ;
20593: GO 21651
// case i of 1 :
20595: LD_VAR 0 8
20599: PUSH
20600: LD_INT 1
20602: DOUBLE
20603: EQUAL
20604: IFTRUE 20608
20606: GO 20688
20608: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
20609: LD_ADDR_VAR 0 12
20613: PUSH
20614: LD_VAR 0 18
20618: PPUSH
20619: LD_INT 22
20621: PUSH
20622: LD_VAR 0 16
20626: PUSH
20627: EMPTY
20628: LIST
20629: LIST
20630: PUSH
20631: LD_INT 58
20633: PUSH
20634: EMPTY
20635: LIST
20636: PUSH
20637: LD_INT 2
20639: PUSH
20640: LD_INT 30
20642: PUSH
20643: LD_INT 32
20645: PUSH
20646: EMPTY
20647: LIST
20648: LIST
20649: PUSH
20650: LD_INT 30
20652: PUSH
20653: LD_INT 4
20655: PUSH
20656: EMPTY
20657: LIST
20658: LIST
20659: PUSH
20660: LD_INT 30
20662: PUSH
20663: LD_INT 5
20665: PUSH
20666: EMPTY
20667: LIST
20668: LIST
20669: PUSH
20670: EMPTY
20671: LIST
20672: LIST
20673: LIST
20674: LIST
20675: PUSH
20676: EMPTY
20677: LIST
20678: LIST
20679: LIST
20680: PPUSH
20681: CALL_OW 72
20685: ST_TO_ADDR
20686: GO 20910
20688: LD_INT 2
20690: DOUBLE
20691: EQUAL
20692: IFTRUE 20696
20694: GO 20758
20696: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
20697: LD_ADDR_VAR 0 12
20701: PUSH
20702: LD_VAR 0 18
20706: PPUSH
20707: LD_INT 22
20709: PUSH
20710: LD_VAR 0 16
20714: PUSH
20715: EMPTY
20716: LIST
20717: LIST
20718: PUSH
20719: LD_INT 2
20721: PUSH
20722: LD_INT 30
20724: PUSH
20725: LD_INT 0
20727: PUSH
20728: EMPTY
20729: LIST
20730: LIST
20731: PUSH
20732: LD_INT 30
20734: PUSH
20735: LD_INT 1
20737: PUSH
20738: EMPTY
20739: LIST
20740: LIST
20741: PUSH
20742: EMPTY
20743: LIST
20744: LIST
20745: LIST
20746: PUSH
20747: EMPTY
20748: LIST
20749: LIST
20750: PPUSH
20751: CALL_OW 72
20755: ST_TO_ADDR
20756: GO 20910
20758: LD_INT 3
20760: DOUBLE
20761: EQUAL
20762: IFTRUE 20766
20764: GO 20828
20766: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
20767: LD_ADDR_VAR 0 12
20771: PUSH
20772: LD_VAR 0 18
20776: PPUSH
20777: LD_INT 22
20779: PUSH
20780: LD_VAR 0 16
20784: PUSH
20785: EMPTY
20786: LIST
20787: LIST
20788: PUSH
20789: LD_INT 2
20791: PUSH
20792: LD_INT 30
20794: PUSH
20795: LD_INT 2
20797: PUSH
20798: EMPTY
20799: LIST
20800: LIST
20801: PUSH
20802: LD_INT 30
20804: PUSH
20805: LD_INT 3
20807: PUSH
20808: EMPTY
20809: LIST
20810: LIST
20811: PUSH
20812: EMPTY
20813: LIST
20814: LIST
20815: LIST
20816: PUSH
20817: EMPTY
20818: LIST
20819: LIST
20820: PPUSH
20821: CALL_OW 72
20825: ST_TO_ADDR
20826: GO 20910
20828: LD_INT 4
20830: DOUBLE
20831: EQUAL
20832: IFTRUE 20836
20834: GO 20909
20836: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
20837: LD_ADDR_VAR 0 12
20841: PUSH
20842: LD_VAR 0 18
20846: PPUSH
20847: LD_INT 22
20849: PUSH
20850: LD_VAR 0 16
20854: PUSH
20855: EMPTY
20856: LIST
20857: LIST
20858: PUSH
20859: LD_INT 2
20861: PUSH
20862: LD_INT 30
20864: PUSH
20865: LD_INT 6
20867: PUSH
20868: EMPTY
20869: LIST
20870: LIST
20871: PUSH
20872: LD_INT 30
20874: PUSH
20875: LD_INT 7
20877: PUSH
20878: EMPTY
20879: LIST
20880: LIST
20881: PUSH
20882: LD_INT 30
20884: PUSH
20885: LD_INT 8
20887: PUSH
20888: EMPTY
20889: LIST
20890: LIST
20891: PUSH
20892: EMPTY
20893: LIST
20894: LIST
20895: LIST
20896: LIST
20897: PUSH
20898: EMPTY
20899: LIST
20900: LIST
20901: PPUSH
20902: CALL_OW 72
20906: ST_TO_ADDR
20907: GO 20910
20909: POP
// if i = 1 then
20910: LD_VAR 0 8
20914: PUSH
20915: LD_INT 1
20917: EQUAL
20918: IFFALSE 21029
// begin tmp := [ ] ;
20920: LD_ADDR_VAR 0 19
20924: PUSH
20925: EMPTY
20926: ST_TO_ADDR
// for j in f do
20927: LD_ADDR_VAR 0 9
20931: PUSH
20932: LD_VAR 0 12
20936: PUSH
20937: FOR_IN
20938: IFFALSE 21011
// if GetBType ( j ) = b_bunker then
20940: LD_VAR 0 9
20944: PPUSH
20945: CALL_OW 266
20949: PUSH
20950: LD_INT 32
20952: EQUAL
20953: IFFALSE 20980
// tmp := Insert ( tmp , 1 , j ) else
20955: LD_ADDR_VAR 0 19
20959: PUSH
20960: LD_VAR 0 19
20964: PPUSH
20965: LD_INT 1
20967: PPUSH
20968: LD_VAR 0 9
20972: PPUSH
20973: CALL_OW 2
20977: ST_TO_ADDR
20978: GO 21009
// tmp := Insert ( tmp , tmp + 1 , j ) ;
20980: LD_ADDR_VAR 0 19
20984: PUSH
20985: LD_VAR 0 19
20989: PPUSH
20990: LD_VAR 0 19
20994: PUSH
20995: LD_INT 1
20997: PLUS
20998: PPUSH
20999: LD_VAR 0 9
21003: PPUSH
21004: CALL_OW 2
21008: ST_TO_ADDR
21009: GO 20937
21011: POP
21012: POP
// if tmp then
21013: LD_VAR 0 19
21017: IFFALSE 21029
// f := tmp ;
21019: LD_ADDR_VAR 0 12
21023: PUSH
21024: LD_VAR 0 19
21028: ST_TO_ADDR
// end ; x := personel [ i ] ;
21029: LD_ADDR_VAR 0 13
21033: PUSH
21034: LD_VAR 0 6
21038: PUSH
21039: LD_VAR 0 8
21043: ARRAY
21044: ST_TO_ADDR
// if x = - 1 then
21045: LD_VAR 0 13
21049: PUSH
21050: LD_INT 1
21052: NEG
21053: EQUAL
21054: IFFALSE 21265
// begin for j in f do
21056: LD_ADDR_VAR 0 9
21060: PUSH
21061: LD_VAR 0 12
21065: PUSH
21066: FOR_IN
21067: IFFALSE 21261
// repeat InitHc ;
21069: CALL_OW 19
// if GetBType ( j ) = b_barracks then
21073: LD_VAR 0 9
21077: PPUSH
21078: CALL_OW 266
21082: PUSH
21083: LD_INT 5
21085: EQUAL
21086: IFFALSE 21156
// begin if UnitsInside ( j ) < 3 then
21088: LD_VAR 0 9
21092: PPUSH
21093: CALL_OW 313
21097: PUSH
21098: LD_INT 3
21100: LESS
21101: IFFALSE 21137
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
21103: LD_INT 0
21105: PPUSH
21106: LD_INT 5
21108: PUSH
21109: LD_INT 8
21111: PUSH
21112: LD_INT 9
21114: PUSH
21115: EMPTY
21116: LIST
21117: LIST
21118: LIST
21119: PUSH
21120: LD_VAR 0 17
21124: ARRAY
21125: PPUSH
21126: LD_VAR 0 4
21130: PPUSH
21131: CALL_OW 380
21135: GO 21154
// PrepareHuman ( false , i , skill ) ;
21137: LD_INT 0
21139: PPUSH
21140: LD_VAR 0 8
21144: PPUSH
21145: LD_VAR 0 4
21149: PPUSH
21150: CALL_OW 380
// end else
21154: GO 21173
// PrepareHuman ( false , i , skill ) ;
21156: LD_INT 0
21158: PPUSH
21159: LD_VAR 0 8
21163: PPUSH
21164: LD_VAR 0 4
21168: PPUSH
21169: CALL_OW 380
// un := CreateHuman ;
21173: LD_ADDR_VAR 0 14
21177: PUSH
21178: CALL_OW 44
21182: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
21183: LD_ADDR_VAR 0 7
21187: PUSH
21188: LD_VAR 0 7
21192: PPUSH
21193: LD_INT 1
21195: PPUSH
21196: LD_VAR 0 14
21200: PPUSH
21201: CALL_OW 2
21205: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
21206: LD_VAR 0 14
21210: PPUSH
21211: LD_VAR 0 9
21215: PPUSH
21216: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
21220: LD_VAR 0 9
21224: PPUSH
21225: CALL_OW 313
21229: PUSH
21230: LD_INT 6
21232: EQUAL
21233: IFTRUE 21257
21235: PUSH
21236: LD_VAR 0 9
21240: PPUSH
21241: CALL_OW 266
21245: PUSH
21246: LD_INT 32
21248: PUSH
21249: LD_INT 31
21251: PUSH
21252: EMPTY
21253: LIST
21254: LIST
21255: IN
21256: OR
21257: IFFALSE 21069
21259: GO 21066
21261: POP
21262: POP
// end else
21263: GO 21649
// for j = 1 to x do
21265: LD_ADDR_VAR 0 9
21269: PUSH
21270: DOUBLE
21271: LD_INT 1
21273: DEC
21274: ST_TO_ADDR
21275: LD_VAR 0 13
21279: PUSH
21280: FOR_TO
21281: IFFALSE 21647
// begin InitHc ;
21283: CALL_OW 19
// if not f then
21287: LD_VAR 0 12
21291: NOT
21292: IFFALSE 21381
// begin PrepareHuman ( false , i , skill ) ;
21294: LD_INT 0
21296: PPUSH
21297: LD_VAR 0 8
21301: PPUSH
21302: LD_VAR 0 4
21306: PPUSH
21307: CALL_OW 380
// un := CreateHuman ;
21311: LD_ADDR_VAR 0 14
21315: PUSH
21316: CALL_OW 44
21320: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
21321: LD_ADDR_VAR 0 7
21325: PUSH
21326: LD_VAR 0 7
21330: PPUSH
21331: LD_INT 1
21333: PPUSH
21334: LD_VAR 0 14
21338: PPUSH
21339: CALL_OW 2
21343: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
21344: LD_VAR 0 14
21348: PPUSH
21349: LD_VAR 0 1
21353: PPUSH
21354: CALL_OW 250
21358: PPUSH
21359: LD_VAR 0 1
21363: PPUSH
21364: CALL_OW 251
21368: PPUSH
21369: LD_INT 10
21371: PPUSH
21372: LD_INT 0
21374: PPUSH
21375: CALL_OW 50
// continue ;
21379: GO 21280
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
21381: LD_VAR 0 12
21385: PUSH
21386: LD_INT 1
21388: ARRAY
21389: PPUSH
21390: CALL_OW 313
21394: IFFALSE 21422
21396: PUSH
21397: LD_VAR 0 12
21401: PUSH
21402: LD_INT 1
21404: ARRAY
21405: PPUSH
21406: CALL_OW 266
21410: PUSH
21411: LD_INT 32
21413: PUSH
21414: LD_INT 31
21416: PUSH
21417: EMPTY
21418: LIST
21419: LIST
21420: IN
21421: AND
21422: IFTRUE 21443
21424: PUSH
21425: LD_VAR 0 12
21429: PUSH
21430: LD_INT 1
21432: ARRAY
21433: PPUSH
21434: CALL_OW 313
21438: PUSH
21439: LD_INT 6
21441: EQUAL
21442: OR
21443: IFFALSE 21463
// f := Delete ( f , 1 ) ;
21445: LD_ADDR_VAR 0 12
21449: PUSH
21450: LD_VAR 0 12
21454: PPUSH
21455: LD_INT 1
21457: PPUSH
21458: CALL_OW 3
21462: ST_TO_ADDR
// if not f then
21463: LD_VAR 0 12
21467: NOT
21468: IFFALSE 21486
// begin x := x + 2 ;
21470: LD_ADDR_VAR 0 13
21474: PUSH
21475: LD_VAR 0 13
21479: PUSH
21480: LD_INT 2
21482: PLUS
21483: ST_TO_ADDR
// continue ;
21484: GO 21280
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
21486: LD_VAR 0 12
21490: PUSH
21491: LD_INT 1
21493: ARRAY
21494: PPUSH
21495: CALL_OW 266
21499: PUSH
21500: LD_INT 5
21502: EQUAL
21503: IFFALSE 21577
// begin if UnitsInside ( f [ 1 ] ) < 3 then
21505: LD_VAR 0 12
21509: PUSH
21510: LD_INT 1
21512: ARRAY
21513: PPUSH
21514: CALL_OW 313
21518: PUSH
21519: LD_INT 3
21521: LESS
21522: IFFALSE 21558
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
21524: LD_INT 0
21526: PPUSH
21527: LD_INT 5
21529: PUSH
21530: LD_INT 8
21532: PUSH
21533: LD_INT 9
21535: PUSH
21536: EMPTY
21537: LIST
21538: LIST
21539: LIST
21540: PUSH
21541: LD_VAR 0 17
21545: ARRAY
21546: PPUSH
21547: LD_VAR 0 4
21551: PPUSH
21552: CALL_OW 380
21556: GO 21575
// PrepareHuman ( false , i , skill ) ;
21558: LD_INT 0
21560: PPUSH
21561: LD_VAR 0 8
21565: PPUSH
21566: LD_VAR 0 4
21570: PPUSH
21571: CALL_OW 380
// end else
21575: GO 21594
// PrepareHuman ( false , i , skill ) ;
21577: LD_INT 0
21579: PPUSH
21580: LD_VAR 0 8
21584: PPUSH
21585: LD_VAR 0 4
21589: PPUSH
21590: CALL_OW 380
// un := CreateHuman ;
21594: LD_ADDR_VAR 0 14
21598: PUSH
21599: CALL_OW 44
21603: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
21604: LD_ADDR_VAR 0 7
21608: PUSH
21609: LD_VAR 0 7
21613: PPUSH
21614: LD_INT 1
21616: PPUSH
21617: LD_VAR 0 14
21621: PPUSH
21622: CALL_OW 2
21626: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
21627: LD_VAR 0 14
21631: PPUSH
21632: LD_VAR 0 12
21636: PUSH
21637: LD_INT 1
21639: ARRAY
21640: PPUSH
21641: CALL_OW 52
// end ;
21645: GO 21280
21647: POP
21648: POP
// end ;
21649: GO 20580
21651: POP
21652: POP
// result := result ^ buildings ;
21653: LD_ADDR_VAR 0 7
21657: PUSH
21658: LD_VAR 0 7
21662: PUSH
21663: LD_VAR 0 18
21667: ADD
21668: ST_TO_ADDR
// end else
21669: GO 21812
// begin for i = 1 to personel do
21671: LD_ADDR_VAR 0 8
21675: PUSH
21676: DOUBLE
21677: LD_INT 1
21679: DEC
21680: ST_TO_ADDR
21681: LD_VAR 0 6
21685: PUSH
21686: FOR_TO
21687: IFFALSE 21810
// begin if i > 4 then
21689: LD_VAR 0 8
21693: PUSH
21694: LD_INT 4
21696: GREATER
21697: IFFALSE 21701
// break ;
21699: GO 21810
// x := personel [ i ] ;
21701: LD_ADDR_VAR 0 13
21705: PUSH
21706: LD_VAR 0 6
21710: PUSH
21711: LD_VAR 0 8
21715: ARRAY
21716: ST_TO_ADDR
// if x = - 1 then
21717: LD_VAR 0 13
21721: PUSH
21722: LD_INT 1
21724: NEG
21725: EQUAL
21726: IFFALSE 21730
// continue ;
21728: GO 21686
// PrepareHuman ( false , i , skill ) ;
21730: LD_INT 0
21732: PPUSH
21733: LD_VAR 0 8
21737: PPUSH
21738: LD_VAR 0 4
21742: PPUSH
21743: CALL_OW 380
// un := CreateHuman ;
21747: LD_ADDR_VAR 0 14
21751: PUSH
21752: CALL_OW 44
21756: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
21757: LD_VAR 0 14
21761: PPUSH
21762: LD_VAR 0 1
21766: PPUSH
21767: CALL_OW 250
21771: PPUSH
21772: LD_VAR 0 1
21776: PPUSH
21777: CALL_OW 251
21781: PPUSH
21782: LD_INT 10
21784: PPUSH
21785: LD_INT 0
21787: PPUSH
21788: CALL_OW 50
// result := result ^ un ;
21792: LD_ADDR_VAR 0 7
21796: PUSH
21797: LD_VAR 0 7
21801: PUSH
21802: LD_VAR 0 14
21806: ADD
21807: ST_TO_ADDR
// end ;
21808: GO 21686
21810: POP
21811: POP
// end ; end ;
21812: LD_VAR 0 7
21816: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
21817: LD_INT 0
21819: PPUSH
21820: PPUSH
21821: PPUSH
21822: PPUSH
21823: PPUSH
21824: PPUSH
21825: PPUSH
21826: PPUSH
21827: PPUSH
21828: PPUSH
21829: PPUSH
21830: PPUSH
21831: PPUSH
21832: PPUSH
21833: PPUSH
21834: PPUSH
// result := false ;
21835: LD_ADDR_VAR 0 3
21839: PUSH
21840: LD_INT 0
21842: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
21843: LD_VAR 0 1
21847: NOT
21848: IFTRUE 21873
21850: PUSH
21851: LD_VAR 0 1
21855: PPUSH
21856: CALL_OW 266
21860: PUSH
21861: LD_INT 32
21863: PUSH
21864: LD_INT 33
21866: PUSH
21867: EMPTY
21868: LIST
21869: LIST
21870: IN
21871: NOT
21872: OR
21873: IFFALSE 21877
// exit ;
21875: GO 23012
// nat := GetNation ( tower ) ;
21877: LD_ADDR_VAR 0 12
21881: PUSH
21882: LD_VAR 0 1
21886: PPUSH
21887: CALL_OW 248
21891: ST_TO_ADDR
// side := GetSide ( tower ) ;
21892: LD_ADDR_VAR 0 16
21896: PUSH
21897: LD_VAR 0 1
21901: PPUSH
21902: CALL_OW 255
21906: ST_TO_ADDR
// x := GetX ( tower ) ;
21907: LD_ADDR_VAR 0 10
21911: PUSH
21912: LD_VAR 0 1
21916: PPUSH
21917: CALL_OW 250
21921: ST_TO_ADDR
// y := GetY ( tower ) ;
21922: LD_ADDR_VAR 0 11
21926: PUSH
21927: LD_VAR 0 1
21931: PPUSH
21932: CALL_OW 251
21936: ST_TO_ADDR
// if not x or not y then
21937: LD_VAR 0 10
21941: NOT
21942: IFTRUE 21951
21944: PUSH
21945: LD_VAR 0 11
21949: NOT
21950: OR
21951: IFFALSE 21955
// exit ;
21953: GO 23012
// weapon := 0 ;
21955: LD_ADDR_VAR 0 18
21959: PUSH
21960: LD_INT 0
21962: ST_TO_ADDR
// fac_list := [ ] ;
21963: LD_ADDR_VAR 0 17
21967: PUSH
21968: EMPTY
21969: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
21970: LD_ADDR_VAR 0 6
21974: PUSH
21975: LD_VAR 0 1
21979: PPUSH
21980: CALL_OW 274
21984: PPUSH
21985: LD_VAR 0 2
21989: PPUSH
21990: LD_INT 0
21992: PPUSH
21993: CALL 19547 0 3
21997: PPUSH
21998: LD_INT 30
22000: PUSH
22001: LD_INT 3
22003: PUSH
22004: EMPTY
22005: LIST
22006: LIST
22007: PPUSH
22008: CALL_OW 72
22012: ST_TO_ADDR
// if not factories then
22013: LD_VAR 0 6
22017: NOT
22018: IFFALSE 22022
// exit ;
22020: GO 23012
// for i in factories do
22022: LD_ADDR_VAR 0 8
22026: PUSH
22027: LD_VAR 0 6
22031: PUSH
22032: FOR_IN
22033: IFFALSE 22058
// fac_list := fac_list union AvailableWeaponList ( i ) ;
22035: LD_ADDR_VAR 0 17
22039: PUSH
22040: LD_VAR 0 17
22044: PUSH
22045: LD_VAR 0 8
22049: PPUSH
22050: CALL_OW 478
22054: UNION
22055: ST_TO_ADDR
22056: GO 22032
22058: POP
22059: POP
// if not fac_list then
22060: LD_VAR 0 17
22064: NOT
22065: IFFALSE 22069
// exit ;
22067: GO 23012
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
22069: LD_ADDR_VAR 0 5
22073: PUSH
22074: LD_INT 4
22076: PUSH
22077: LD_INT 5
22079: PUSH
22080: LD_INT 9
22082: PUSH
22083: LD_INT 10
22085: PUSH
22086: LD_INT 6
22088: PUSH
22089: LD_INT 7
22091: PUSH
22092: LD_INT 11
22094: PUSH
22095: EMPTY
22096: LIST
22097: LIST
22098: LIST
22099: LIST
22100: LIST
22101: LIST
22102: LIST
22103: PUSH
22104: LD_INT 27
22106: PUSH
22107: LD_INT 28
22109: PUSH
22110: LD_INT 26
22112: PUSH
22113: LD_INT 30
22115: PUSH
22116: EMPTY
22117: LIST
22118: LIST
22119: LIST
22120: LIST
22121: PUSH
22122: LD_INT 43
22124: PUSH
22125: LD_INT 44
22127: PUSH
22128: LD_INT 46
22130: PUSH
22131: LD_INT 45
22133: PUSH
22134: LD_INT 47
22136: PUSH
22137: LD_INT 49
22139: PUSH
22140: EMPTY
22141: LIST
22142: LIST
22143: LIST
22144: LIST
22145: LIST
22146: LIST
22147: PUSH
22148: EMPTY
22149: LIST
22150: LIST
22151: LIST
22152: PUSH
22153: LD_VAR 0 12
22157: ARRAY
22158: ST_TO_ADDR
// list := list isect fac_list ;
22159: LD_ADDR_VAR 0 5
22163: PUSH
22164: LD_VAR 0 5
22168: PUSH
22169: LD_VAR 0 17
22173: ISECT
22174: ST_TO_ADDR
// if not list then
22175: LD_VAR 0 5
22179: NOT
22180: IFFALSE 22184
// exit ;
22182: GO 23012
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
22184: LD_VAR 0 12
22188: PUSH
22189: LD_INT 3
22191: EQUAL
22192: IFFALSE 22204
22194: PUSH
22195: LD_INT 49
22197: PUSH
22198: LD_VAR 0 5
22202: IN
22203: AND
22204: IFFALSE 22224
22206: PUSH
22207: LD_INT 31
22209: PPUSH
22210: LD_VAR 0 16
22214: PPUSH
22215: CALL_OW 321
22219: PUSH
22220: LD_INT 2
22222: EQUAL
22223: AND
22224: IFFALSE 22284
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
22226: LD_INT 22
22228: PUSH
22229: LD_VAR 0 16
22233: PUSH
22234: EMPTY
22235: LIST
22236: LIST
22237: PUSH
22238: LD_INT 35
22240: PUSH
22241: LD_INT 49
22243: PUSH
22244: EMPTY
22245: LIST
22246: LIST
22247: PUSH
22248: LD_INT 91
22250: PUSH
22251: LD_VAR 0 1
22255: PUSH
22256: LD_INT 10
22258: PUSH
22259: EMPTY
22260: LIST
22261: LIST
22262: LIST
22263: PUSH
22264: EMPTY
22265: LIST
22266: LIST
22267: LIST
22268: PPUSH
22269: CALL_OW 69
22273: NOT
22274: IFFALSE 22284
// weapon := ru_time_lapser ;
22276: LD_ADDR_VAR 0 18
22280: PUSH
22281: LD_INT 49
22283: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
22284: LD_VAR 0 12
22288: PUSH
22289: LD_INT 1
22291: PUSH
22292: LD_INT 2
22294: PUSH
22295: EMPTY
22296: LIST
22297: LIST
22298: IN
22299: IFFALSE 22323
22301: PUSH
22302: LD_INT 11
22304: PUSH
22305: LD_VAR 0 5
22309: IN
22310: IFTRUE 22322
22312: PUSH
22313: LD_INT 30
22315: PUSH
22316: LD_VAR 0 5
22320: IN
22321: OR
22322: AND
22323: IFFALSE 22343
22325: PUSH
22326: LD_INT 6
22328: PPUSH
22329: LD_VAR 0 16
22333: PPUSH
22334: CALL_OW 321
22338: PUSH
22339: LD_INT 2
22341: EQUAL
22342: AND
22343: IFFALSE 22510
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
22345: LD_INT 22
22347: PUSH
22348: LD_VAR 0 16
22352: PUSH
22353: EMPTY
22354: LIST
22355: LIST
22356: PUSH
22357: LD_INT 2
22359: PUSH
22360: LD_INT 35
22362: PUSH
22363: LD_INT 11
22365: PUSH
22366: EMPTY
22367: LIST
22368: LIST
22369: PUSH
22370: LD_INT 35
22372: PUSH
22373: LD_INT 30
22375: PUSH
22376: EMPTY
22377: LIST
22378: LIST
22379: PUSH
22380: EMPTY
22381: LIST
22382: LIST
22383: LIST
22384: PUSH
22385: LD_INT 91
22387: PUSH
22388: LD_VAR 0 1
22392: PUSH
22393: LD_INT 18
22395: PUSH
22396: EMPTY
22397: LIST
22398: LIST
22399: LIST
22400: PUSH
22401: EMPTY
22402: LIST
22403: LIST
22404: LIST
22405: PPUSH
22406: CALL_OW 69
22410: NOT
22411: IFFALSE 22487
22413: PUSH
22414: LD_INT 22
22416: PUSH
22417: LD_VAR 0 16
22421: PUSH
22422: EMPTY
22423: LIST
22424: LIST
22425: PUSH
22426: LD_INT 2
22428: PUSH
22429: LD_INT 30
22431: PUSH
22432: LD_INT 32
22434: PUSH
22435: EMPTY
22436: LIST
22437: LIST
22438: PUSH
22439: LD_INT 30
22441: PUSH
22442: LD_INT 33
22444: PUSH
22445: EMPTY
22446: LIST
22447: LIST
22448: PUSH
22449: EMPTY
22450: LIST
22451: LIST
22452: LIST
22453: PUSH
22454: LD_INT 91
22456: PUSH
22457: LD_VAR 0 1
22461: PUSH
22462: LD_INT 12
22464: PUSH
22465: EMPTY
22466: LIST
22467: LIST
22468: LIST
22469: PUSH
22470: EMPTY
22471: LIST
22472: LIST
22473: LIST
22474: PUSH
22475: EMPTY
22476: LIST
22477: PPUSH
22478: CALL_OW 69
22482: PUSH
22483: LD_INT 2
22485: GREATER
22486: AND
22487: IFFALSE 22510
// weapon := [ us_radar , ar_radar ] [ nat ] ;
22489: LD_ADDR_VAR 0 18
22493: PUSH
22494: LD_INT 11
22496: PUSH
22497: LD_INT 30
22499: PUSH
22500: EMPTY
22501: LIST
22502: LIST
22503: PUSH
22504: LD_VAR 0 12
22508: ARRAY
22509: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
22510: LD_VAR 0 18
22514: NOT
22515: IFFALSE 22535
22517: PUSH
22518: LD_INT 40
22520: PPUSH
22521: LD_VAR 0 16
22525: PPUSH
22526: CALL_OW 321
22530: PUSH
22531: LD_INT 2
22533: EQUAL
22534: AND
22535: IFFALSE 22571
22537: PUSH
22538: LD_INT 7
22540: PUSH
22541: LD_VAR 0 5
22545: IN
22546: IFTRUE 22558
22548: PUSH
22549: LD_INT 28
22551: PUSH
22552: LD_VAR 0 5
22556: IN
22557: OR
22558: IFTRUE 22570
22560: PUSH
22561: LD_INT 45
22563: PUSH
22564: LD_VAR 0 5
22568: IN
22569: OR
22570: AND
22571: IFFALSE 22825
// begin hex := GetHexInfo ( x , y ) ;
22573: LD_ADDR_VAR 0 4
22577: PUSH
22578: LD_VAR 0 10
22582: PPUSH
22583: LD_VAR 0 11
22587: PPUSH
22588: CALL_OW 546
22592: ST_TO_ADDR
// if hex [ 1 ] then
22593: LD_VAR 0 4
22597: PUSH
22598: LD_INT 1
22600: ARRAY
22601: IFFALSE 22605
// exit ;
22603: GO 23012
// height := hex [ 2 ] ;
22605: LD_ADDR_VAR 0 15
22609: PUSH
22610: LD_VAR 0 4
22614: PUSH
22615: LD_INT 2
22617: ARRAY
22618: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
22619: LD_ADDR_VAR 0 14
22623: PUSH
22624: LD_INT 0
22626: PUSH
22627: LD_INT 2
22629: PUSH
22630: LD_INT 3
22632: PUSH
22633: LD_INT 5
22635: PUSH
22636: EMPTY
22637: LIST
22638: LIST
22639: LIST
22640: LIST
22641: ST_TO_ADDR
// for i in tmp do
22642: LD_ADDR_VAR 0 8
22646: PUSH
22647: LD_VAR 0 14
22651: PUSH
22652: FOR_IN
22653: IFFALSE 22823
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
22655: LD_ADDR_VAR 0 9
22659: PUSH
22660: LD_VAR 0 10
22664: PPUSH
22665: LD_VAR 0 8
22669: PPUSH
22670: LD_INT 5
22672: PPUSH
22673: CALL_OW 272
22677: PUSH
22678: LD_VAR 0 11
22682: PPUSH
22683: LD_VAR 0 8
22687: PPUSH
22688: LD_INT 5
22690: PPUSH
22691: CALL_OW 273
22695: PUSH
22696: EMPTY
22697: LIST
22698: LIST
22699: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
22700: LD_VAR 0 9
22704: PUSH
22705: LD_INT 1
22707: ARRAY
22708: PPUSH
22709: LD_VAR 0 9
22713: PUSH
22714: LD_INT 2
22716: ARRAY
22717: PPUSH
22718: CALL_OW 488
22722: IFFALSE 22821
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
22724: LD_ADDR_VAR 0 4
22728: PUSH
22729: LD_VAR 0 9
22733: PUSH
22734: LD_INT 1
22736: ARRAY
22737: PPUSH
22738: LD_VAR 0 9
22742: PUSH
22743: LD_INT 2
22745: ARRAY
22746: PPUSH
22747: CALL_OW 546
22751: ST_TO_ADDR
// if hex [ 1 ] then
22752: LD_VAR 0 4
22756: PUSH
22757: LD_INT 1
22759: ARRAY
22760: IFFALSE 22764
// continue ;
22762: GO 22652
// h := hex [ 2 ] ;
22764: LD_ADDR_VAR 0 13
22768: PUSH
22769: LD_VAR 0 4
22773: PUSH
22774: LD_INT 2
22776: ARRAY
22777: ST_TO_ADDR
// if h + 7 < height then
22778: LD_VAR 0 13
22782: PUSH
22783: LD_INT 7
22785: PLUS
22786: PUSH
22787: LD_VAR 0 15
22791: LESS
22792: IFFALSE 22821
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
22794: LD_ADDR_VAR 0 18
22798: PUSH
22799: LD_INT 7
22801: PUSH
22802: LD_INT 28
22804: PUSH
22805: LD_INT 45
22807: PUSH
22808: EMPTY
22809: LIST
22810: LIST
22811: LIST
22812: PUSH
22813: LD_VAR 0 12
22817: ARRAY
22818: ST_TO_ADDR
// break ;
22819: GO 22823
// end ; end ; end ;
22821: GO 22652
22823: POP
22824: POP
// end ; if not weapon then
22825: LD_VAR 0 18
22829: NOT
22830: IFFALSE 22890
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
22832: LD_ADDR_VAR 0 5
22836: PUSH
22837: LD_VAR 0 5
22841: PUSH
22842: LD_INT 11
22844: PUSH
22845: LD_INT 30
22847: PUSH
22848: LD_INT 49
22850: PUSH
22851: EMPTY
22852: LIST
22853: LIST
22854: LIST
22855: DIFF
22856: ST_TO_ADDR
// if not list then
22857: LD_VAR 0 5
22861: NOT
22862: IFFALSE 22866
// exit ;
22864: GO 23012
// weapon := list [ rand ( 1 , list ) ] ;
22866: LD_ADDR_VAR 0 18
22870: PUSH
22871: LD_VAR 0 5
22875: PUSH
22876: LD_INT 1
22878: PPUSH
22879: LD_VAR 0 5
22883: PPUSH
22884: CALL_OW 12
22888: ARRAY
22889: ST_TO_ADDR
// end ; if weapon then
22890: LD_VAR 0 18
22894: IFFALSE 23012
// begin tmp := CostOfWeapon ( weapon ) ;
22896: LD_ADDR_VAR 0 14
22900: PUSH
22901: LD_VAR 0 18
22905: PPUSH
22906: CALL_OW 451
22910: ST_TO_ADDR
// j := GetBase ( tower ) ;
22911: LD_ADDR_VAR 0 9
22915: PUSH
22916: LD_VAR 0 1
22920: PPUSH
22921: CALL_OW 274
22925: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
22926: LD_VAR 0 9
22930: PPUSH
22931: LD_INT 1
22933: PPUSH
22934: CALL_OW 275
22938: PUSH
22939: LD_VAR 0 14
22943: PUSH
22944: LD_INT 1
22946: ARRAY
22947: GREATEREQUAL
22948: IFFALSE 22974
22950: PUSH
22951: LD_VAR 0 9
22955: PPUSH
22956: LD_INT 2
22958: PPUSH
22959: CALL_OW 275
22963: PUSH
22964: LD_VAR 0 14
22968: PUSH
22969: LD_INT 2
22971: ARRAY
22972: GREATEREQUAL
22973: AND
22974: IFFALSE 23000
22976: PUSH
22977: LD_VAR 0 9
22981: PPUSH
22982: LD_INT 3
22984: PPUSH
22985: CALL_OW 275
22989: PUSH
22990: LD_VAR 0 14
22994: PUSH
22995: LD_INT 3
22997: ARRAY
22998: GREATEREQUAL
22999: AND
23000: IFFALSE 23012
// result := weapon ;
23002: LD_ADDR_VAR 0 3
23006: PUSH
23007: LD_VAR 0 18
23011: ST_TO_ADDR
// end ; end ;
23012: LD_VAR 0 3
23016: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
23017: LD_INT 0
23019: PPUSH
23020: PPUSH
// result := true ;
23021: LD_ADDR_VAR 0 3
23025: PUSH
23026: LD_INT 1
23028: ST_TO_ADDR
// if array1 = array2 then
23029: LD_VAR 0 1
23033: PUSH
23034: LD_VAR 0 2
23038: EQUAL
23039: IFFALSE 23099
// begin for i = 1 to array1 do
23041: LD_ADDR_VAR 0 4
23045: PUSH
23046: DOUBLE
23047: LD_INT 1
23049: DEC
23050: ST_TO_ADDR
23051: LD_VAR 0 1
23055: PUSH
23056: FOR_TO
23057: IFFALSE 23095
// if array1 [ i ] <> array2 [ i ] then
23059: LD_VAR 0 1
23063: PUSH
23064: LD_VAR 0 4
23068: ARRAY
23069: PUSH
23070: LD_VAR 0 2
23074: PUSH
23075: LD_VAR 0 4
23079: ARRAY
23080: NONEQUAL
23081: IFFALSE 23093
// begin result := false ;
23083: LD_ADDR_VAR 0 3
23087: PUSH
23088: LD_INT 0
23090: ST_TO_ADDR
// break ;
23091: GO 23095
// end ;
23093: GO 23056
23095: POP
23096: POP
// end else
23097: GO 23107
// result := false ;
23099: LD_ADDR_VAR 0 3
23103: PUSH
23104: LD_INT 0
23106: ST_TO_ADDR
// end ;
23107: LD_VAR 0 3
23111: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
23112: LD_INT 0
23114: PPUSH
23115: PPUSH
// if not array1 or not array2 then
23116: LD_VAR 0 1
23120: NOT
23121: IFTRUE 23130
23123: PUSH
23124: LD_VAR 0 2
23128: NOT
23129: OR
23130: IFFALSE 23134
// exit ;
23132: GO 23198
// result := true ;
23134: LD_ADDR_VAR 0 3
23138: PUSH
23139: LD_INT 1
23141: ST_TO_ADDR
// for i = 1 to array1 do
23142: LD_ADDR_VAR 0 4
23146: PUSH
23147: DOUBLE
23148: LD_INT 1
23150: DEC
23151: ST_TO_ADDR
23152: LD_VAR 0 1
23156: PUSH
23157: FOR_TO
23158: IFFALSE 23196
// if array1 [ i ] <> array2 [ i ] then
23160: LD_VAR 0 1
23164: PUSH
23165: LD_VAR 0 4
23169: ARRAY
23170: PUSH
23171: LD_VAR 0 2
23175: PUSH
23176: LD_VAR 0 4
23180: ARRAY
23181: NONEQUAL
23182: IFFALSE 23194
// begin result := false ;
23184: LD_ADDR_VAR 0 3
23188: PUSH
23189: LD_INT 0
23191: ST_TO_ADDR
// break ;
23192: GO 23196
// end ;
23194: GO 23157
23196: POP
23197: POP
// end ;
23198: LD_VAR 0 3
23202: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
23203: LD_INT 0
23205: PPUSH
23206: PPUSH
23207: PPUSH
// pom := GetBase ( fac ) ;
23208: LD_ADDR_VAR 0 5
23212: PUSH
23213: LD_VAR 0 1
23217: PPUSH
23218: CALL_OW 274
23222: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
23223: LD_ADDR_VAR 0 4
23227: PUSH
23228: LD_VAR 0 2
23232: PUSH
23233: LD_INT 1
23235: ARRAY
23236: PPUSH
23237: LD_VAR 0 2
23241: PUSH
23242: LD_INT 2
23244: ARRAY
23245: PPUSH
23246: LD_VAR 0 2
23250: PUSH
23251: LD_INT 3
23253: ARRAY
23254: PPUSH
23255: LD_VAR 0 2
23259: PUSH
23260: LD_INT 4
23262: ARRAY
23263: PPUSH
23264: CALL_OW 449
23268: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
23269: LD_ADDR_VAR 0 3
23273: PUSH
23274: LD_VAR 0 5
23278: PPUSH
23279: LD_INT 1
23281: PPUSH
23282: CALL_OW 275
23286: PUSH
23287: LD_VAR 0 4
23291: PUSH
23292: LD_INT 1
23294: ARRAY
23295: GREATEREQUAL
23296: IFFALSE 23322
23298: PUSH
23299: LD_VAR 0 5
23303: PPUSH
23304: LD_INT 2
23306: PPUSH
23307: CALL_OW 275
23311: PUSH
23312: LD_VAR 0 4
23316: PUSH
23317: LD_INT 2
23319: ARRAY
23320: GREATEREQUAL
23321: AND
23322: IFFALSE 23348
23324: PUSH
23325: LD_VAR 0 5
23329: PPUSH
23330: LD_INT 3
23332: PPUSH
23333: CALL_OW 275
23337: PUSH
23338: LD_VAR 0 4
23342: PUSH
23343: LD_INT 3
23345: ARRAY
23346: GREATEREQUAL
23347: AND
23348: ST_TO_ADDR
// end ;
23349: LD_VAR 0 3
23353: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
23354: LD_INT 0
23356: PPUSH
23357: PPUSH
23358: PPUSH
23359: PPUSH
// pom := GetBase ( building ) ;
23360: LD_ADDR_VAR 0 3
23364: PUSH
23365: LD_VAR 0 1
23369: PPUSH
23370: CALL_OW 274
23374: ST_TO_ADDR
// if not pom then
23375: LD_VAR 0 3
23379: NOT
23380: IFFALSE 23384
// exit ;
23382: GO 23558
// btype := GetBType ( building ) ;
23384: LD_ADDR_VAR 0 5
23388: PUSH
23389: LD_VAR 0 1
23393: PPUSH
23394: CALL_OW 266
23398: ST_TO_ADDR
// if btype = b_armoury then
23399: LD_VAR 0 5
23403: PUSH
23404: LD_INT 4
23406: EQUAL
23407: IFFALSE 23417
// btype := b_barracks ;
23409: LD_ADDR_VAR 0 5
23413: PUSH
23414: LD_INT 5
23416: ST_TO_ADDR
// if btype = b_depot then
23417: LD_VAR 0 5
23421: PUSH
23422: LD_INT 0
23424: EQUAL
23425: IFFALSE 23435
// btype := b_warehouse ;
23427: LD_ADDR_VAR 0 5
23431: PUSH
23432: LD_INT 1
23434: ST_TO_ADDR
// if btype = b_workshop then
23435: LD_VAR 0 5
23439: PUSH
23440: LD_INT 2
23442: EQUAL
23443: IFFALSE 23453
// btype := b_factory ;
23445: LD_ADDR_VAR 0 5
23449: PUSH
23450: LD_INT 3
23452: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
23453: LD_ADDR_VAR 0 4
23457: PUSH
23458: LD_VAR 0 5
23462: PPUSH
23463: LD_VAR 0 1
23467: PPUSH
23468: CALL_OW 248
23472: PPUSH
23473: CALL_OW 450
23477: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
23478: LD_ADDR_VAR 0 2
23482: PUSH
23483: LD_VAR 0 3
23487: PPUSH
23488: LD_INT 1
23490: PPUSH
23491: CALL_OW 275
23495: PUSH
23496: LD_VAR 0 4
23500: PUSH
23501: LD_INT 1
23503: ARRAY
23504: GREATEREQUAL
23505: IFFALSE 23531
23507: PUSH
23508: LD_VAR 0 3
23512: PPUSH
23513: LD_INT 2
23515: PPUSH
23516: CALL_OW 275
23520: PUSH
23521: LD_VAR 0 4
23525: PUSH
23526: LD_INT 2
23528: ARRAY
23529: GREATEREQUAL
23530: AND
23531: IFFALSE 23557
23533: PUSH
23534: LD_VAR 0 3
23538: PPUSH
23539: LD_INT 3
23541: PPUSH
23542: CALL_OW 275
23546: PUSH
23547: LD_VAR 0 4
23551: PUSH
23552: LD_INT 3
23554: ARRAY
23555: GREATEREQUAL
23556: AND
23557: ST_TO_ADDR
// end ;
23558: LD_VAR 0 2
23562: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
23563: LD_INT 0
23565: PPUSH
23566: PPUSH
23567: PPUSH
// pom := GetBase ( building ) ;
23568: LD_ADDR_VAR 0 4
23572: PUSH
23573: LD_VAR 0 1
23577: PPUSH
23578: CALL_OW 274
23582: ST_TO_ADDR
// if not pom then
23583: LD_VAR 0 4
23587: NOT
23588: IFFALSE 23592
// exit ;
23590: GO 23697
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
23592: LD_ADDR_VAR 0 5
23596: PUSH
23597: LD_VAR 0 2
23601: PPUSH
23602: LD_VAR 0 1
23606: PPUSH
23607: CALL_OW 248
23611: PPUSH
23612: CALL_OW 450
23616: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
23617: LD_ADDR_VAR 0 3
23621: PUSH
23622: LD_VAR 0 4
23626: PPUSH
23627: LD_INT 1
23629: PPUSH
23630: CALL_OW 275
23634: PUSH
23635: LD_VAR 0 5
23639: PUSH
23640: LD_INT 1
23642: ARRAY
23643: GREATEREQUAL
23644: IFFALSE 23670
23646: PUSH
23647: LD_VAR 0 4
23651: PPUSH
23652: LD_INT 2
23654: PPUSH
23655: CALL_OW 275
23659: PUSH
23660: LD_VAR 0 5
23664: PUSH
23665: LD_INT 2
23667: ARRAY
23668: GREATEREQUAL
23669: AND
23670: IFFALSE 23696
23672: PUSH
23673: LD_VAR 0 4
23677: PPUSH
23678: LD_INT 3
23680: PPUSH
23681: CALL_OW 275
23685: PUSH
23686: LD_VAR 0 5
23690: PUSH
23691: LD_INT 3
23693: ARRAY
23694: GREATEREQUAL
23695: AND
23696: ST_TO_ADDR
// end ;
23697: LD_VAR 0 3
23701: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
23702: LD_INT 0
23704: PPUSH
23705: PPUSH
23706: PPUSH
23707: PPUSH
23708: PPUSH
23709: PPUSH
23710: PPUSH
23711: PPUSH
23712: PPUSH
23713: PPUSH
23714: PPUSH
// result := false ;
23715: LD_ADDR_VAR 0 8
23719: PUSH
23720: LD_INT 0
23722: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
23723: LD_VAR 0 5
23727: NOT
23728: IFTRUE 23737
23730: PUSH
23731: LD_VAR 0 1
23735: NOT
23736: OR
23737: IFTRUE 23746
23739: PUSH
23740: LD_VAR 0 2
23744: NOT
23745: OR
23746: IFTRUE 23755
23748: PUSH
23749: LD_VAR 0 3
23753: NOT
23754: OR
23755: IFFALSE 23759
// exit ;
23757: GO 24585
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
23759: LD_ADDR_VAR 0 14
23763: PUSH
23764: LD_VAR 0 1
23768: PPUSH
23769: LD_VAR 0 2
23773: PPUSH
23774: LD_VAR 0 3
23778: PPUSH
23779: LD_VAR 0 4
23783: PPUSH
23784: LD_VAR 0 5
23788: PUSH
23789: LD_INT 1
23791: ARRAY
23792: PPUSH
23793: CALL_OW 248
23797: PPUSH
23798: LD_INT 0
23800: PPUSH
23801: CALL 25866 0 6
23805: ST_TO_ADDR
// if not hexes then
23806: LD_VAR 0 14
23810: NOT
23811: IFFALSE 23815
// exit ;
23813: GO 24585
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23815: LD_ADDR_VAR 0 17
23819: PUSH
23820: LD_VAR 0 5
23824: PPUSH
23825: LD_INT 22
23827: PUSH
23828: LD_VAR 0 13
23832: PPUSH
23833: CALL_OW 255
23837: PUSH
23838: EMPTY
23839: LIST
23840: LIST
23841: PUSH
23842: LD_INT 2
23844: PUSH
23845: LD_INT 30
23847: PUSH
23848: LD_INT 0
23850: PUSH
23851: EMPTY
23852: LIST
23853: LIST
23854: PUSH
23855: LD_INT 30
23857: PUSH
23858: LD_INT 1
23860: PUSH
23861: EMPTY
23862: LIST
23863: LIST
23864: PUSH
23865: EMPTY
23866: LIST
23867: LIST
23868: LIST
23869: PUSH
23870: EMPTY
23871: LIST
23872: LIST
23873: PPUSH
23874: CALL_OW 72
23878: ST_TO_ADDR
// for i = 1 to hexes do
23879: LD_ADDR_VAR 0 9
23883: PUSH
23884: DOUBLE
23885: LD_INT 1
23887: DEC
23888: ST_TO_ADDR
23889: LD_VAR 0 14
23893: PUSH
23894: FOR_TO
23895: IFFALSE 24583
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
23897: LD_ADDR_VAR 0 13
23901: PUSH
23902: LD_VAR 0 14
23906: PUSH
23907: LD_VAR 0 9
23911: ARRAY
23912: PUSH
23913: LD_INT 1
23915: ARRAY
23916: PPUSH
23917: LD_VAR 0 14
23921: PUSH
23922: LD_VAR 0 9
23926: ARRAY
23927: PUSH
23928: LD_INT 2
23930: ARRAY
23931: PPUSH
23932: CALL_OW 428
23936: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
23937: LD_VAR 0 14
23941: PUSH
23942: LD_VAR 0 9
23946: ARRAY
23947: PUSH
23948: LD_INT 1
23950: ARRAY
23951: PPUSH
23952: LD_VAR 0 14
23956: PUSH
23957: LD_VAR 0 9
23961: ARRAY
23962: PUSH
23963: LD_INT 2
23965: ARRAY
23966: PPUSH
23967: CALL_OW 351
23971: IFTRUE 24010
23973: PUSH
23974: LD_VAR 0 14
23978: PUSH
23979: LD_VAR 0 9
23983: ARRAY
23984: PUSH
23985: LD_INT 1
23987: ARRAY
23988: PPUSH
23989: LD_VAR 0 14
23993: PUSH
23994: LD_VAR 0 9
23998: ARRAY
23999: PUSH
24000: LD_INT 2
24002: ARRAY
24003: PPUSH
24004: CALL_OW 488
24008: NOT
24009: OR
24010: IFTRUE 24027
24012: PUSH
24013: LD_VAR 0 13
24017: PPUSH
24018: CALL_OW 247
24022: PUSH
24023: LD_INT 3
24025: EQUAL
24026: OR
24027: IFFALSE 24033
// exit ;
24029: POP
24030: POP
24031: GO 24585
// if not tmp then
24033: LD_VAR 0 13
24037: NOT
24038: IFFALSE 24042
// continue ;
24040: GO 23894
// result := true ;
24042: LD_ADDR_VAR 0 8
24046: PUSH
24047: LD_INT 1
24049: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
24050: LD_VAR 0 6
24054: IFFALSE 24071
24056: PUSH
24057: LD_VAR 0 13
24061: PPUSH
24062: CALL_OW 247
24066: PUSH
24067: LD_INT 2
24069: EQUAL
24070: AND
24071: IFFALSE 24088
24073: PUSH
24074: LD_VAR 0 13
24078: PPUSH
24079: CALL_OW 263
24083: PUSH
24084: LD_INT 1
24086: EQUAL
24087: AND
24088: IFFALSE 24252
// begin if IsDrivenBy ( tmp ) then
24090: LD_VAR 0 13
24094: PPUSH
24095: CALL_OW 311
24099: IFFALSE 24103
// continue ;
24101: GO 23894
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
24103: LD_VAR 0 6
24107: PPUSH
24108: LD_INT 3
24110: PUSH
24111: LD_INT 60
24113: PUSH
24114: EMPTY
24115: LIST
24116: PUSH
24117: EMPTY
24118: LIST
24119: LIST
24120: PUSH
24121: LD_INT 3
24123: PUSH
24124: LD_INT 55
24126: PUSH
24127: EMPTY
24128: LIST
24129: PUSH
24130: EMPTY
24131: LIST
24132: LIST
24133: PUSH
24134: EMPTY
24135: LIST
24136: LIST
24137: PPUSH
24138: CALL_OW 72
24142: IFFALSE 24250
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
24144: LD_ADDR_VAR 0 18
24148: PUSH
24149: LD_VAR 0 6
24153: PPUSH
24154: LD_INT 3
24156: PUSH
24157: LD_INT 60
24159: PUSH
24160: EMPTY
24161: LIST
24162: PUSH
24163: EMPTY
24164: LIST
24165: LIST
24166: PUSH
24167: LD_INT 3
24169: PUSH
24170: LD_INT 55
24172: PUSH
24173: EMPTY
24174: LIST
24175: PUSH
24176: EMPTY
24177: LIST
24178: LIST
24179: PUSH
24180: EMPTY
24181: LIST
24182: LIST
24183: PPUSH
24184: CALL_OW 72
24188: PUSH
24189: LD_INT 1
24191: ARRAY
24192: ST_TO_ADDR
// if IsInUnit ( driver ) then
24193: LD_VAR 0 18
24197: PPUSH
24198: CALL_OW 310
24202: IFFALSE 24213
// ComExit ( driver ) ;
24204: LD_VAR 0 18
24208: PPUSH
24209: CALL 49866 0 1
// AddComEnterUnit ( driver , tmp ) ;
24213: LD_VAR 0 18
24217: PPUSH
24218: LD_VAR 0 13
24222: PPUSH
24223: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
24227: LD_VAR 0 18
24231: PPUSH
24232: LD_VAR 0 7
24236: PPUSH
24237: CALL_OW 173
// AddComExitVehicle ( driver ) ;
24241: LD_VAR 0 18
24245: PPUSH
24246: CALL_OW 181
// end ; continue ;
24250: GO 23894
// end ; if not cleaners or not tmp in cleaners then
24252: LD_VAR 0 6
24256: NOT
24257: IFTRUE 24272
24259: PUSH
24260: LD_VAR 0 13
24264: PUSH
24265: LD_VAR 0 6
24269: IN
24270: NOT
24271: OR
24272: IFFALSE 24581
// begin if dep then
24274: LD_VAR 0 17
24278: IFFALSE 24414
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
24280: LD_ADDR_VAR 0 16
24284: PUSH
24285: LD_VAR 0 17
24289: PUSH
24290: LD_INT 1
24292: ARRAY
24293: PPUSH
24294: CALL_OW 250
24298: PPUSH
24299: LD_VAR 0 17
24303: PUSH
24304: LD_INT 1
24306: ARRAY
24307: PPUSH
24308: CALL_OW 254
24312: PPUSH
24313: LD_INT 5
24315: PPUSH
24316: CALL_OW 272
24320: PUSH
24321: LD_VAR 0 17
24325: PUSH
24326: LD_INT 1
24328: ARRAY
24329: PPUSH
24330: CALL_OW 251
24334: PPUSH
24335: LD_VAR 0 17
24339: PUSH
24340: LD_INT 1
24342: ARRAY
24343: PPUSH
24344: CALL_OW 254
24348: PPUSH
24349: LD_INT 5
24351: PPUSH
24352: CALL_OW 273
24356: PUSH
24357: EMPTY
24358: LIST
24359: LIST
24360: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
24361: LD_VAR 0 16
24365: PUSH
24366: LD_INT 1
24368: ARRAY
24369: PPUSH
24370: LD_VAR 0 16
24374: PUSH
24375: LD_INT 2
24377: ARRAY
24378: PPUSH
24379: CALL_OW 488
24383: IFFALSE 24414
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
24385: LD_VAR 0 13
24389: PPUSH
24390: LD_VAR 0 16
24394: PUSH
24395: LD_INT 1
24397: ARRAY
24398: PPUSH
24399: LD_VAR 0 16
24403: PUSH
24404: LD_INT 2
24406: ARRAY
24407: PPUSH
24408: CALL_OW 111
// continue ;
24412: GO 23894
// end ; end ; r := GetDir ( tmp ) ;
24414: LD_ADDR_VAR 0 15
24418: PUSH
24419: LD_VAR 0 13
24423: PPUSH
24424: CALL_OW 254
24428: ST_TO_ADDR
// if r = 5 then
24429: LD_VAR 0 15
24433: PUSH
24434: LD_INT 5
24436: EQUAL
24437: IFFALSE 24447
// r := 0 ;
24439: LD_ADDR_VAR 0 15
24443: PUSH
24444: LD_INT 0
24446: ST_TO_ADDR
// for j = r to 5 do
24447: LD_ADDR_VAR 0 10
24451: PUSH
24452: DOUBLE
24453: LD_VAR 0 15
24457: DEC
24458: ST_TO_ADDR
24459: LD_INT 5
24461: PUSH
24462: FOR_TO
24463: IFFALSE 24579
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
24465: LD_ADDR_VAR 0 11
24469: PUSH
24470: LD_VAR 0 13
24474: PPUSH
24475: CALL_OW 250
24479: PPUSH
24480: LD_VAR 0 10
24484: PPUSH
24485: LD_INT 2
24487: PPUSH
24488: CALL_OW 272
24492: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
24493: LD_ADDR_VAR 0 12
24497: PUSH
24498: LD_VAR 0 13
24502: PPUSH
24503: CALL_OW 251
24507: PPUSH
24508: LD_VAR 0 10
24512: PPUSH
24513: LD_INT 2
24515: PPUSH
24516: CALL_OW 273
24520: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
24521: LD_VAR 0 11
24525: PPUSH
24526: LD_VAR 0 12
24530: PPUSH
24531: CALL_OW 488
24535: IFFALSE 24554
24537: PUSH
24538: LD_VAR 0 11
24542: PPUSH
24543: LD_VAR 0 12
24547: PPUSH
24548: CALL_OW 428
24552: NOT
24553: AND
24554: IFFALSE 24577
// begin ComMoveXY ( tmp , _x , _y ) ;
24556: LD_VAR 0 13
24560: PPUSH
24561: LD_VAR 0 11
24565: PPUSH
24566: LD_VAR 0 12
24570: PPUSH
24571: CALL_OW 111
// break ;
24575: GO 24579
// end ; end ;
24577: GO 24462
24579: POP
24580: POP
// end ; end ;
24581: GO 23894
24583: POP
24584: POP
// end ;
24585: LD_VAR 0 8
24589: RET
// export function BuildingTechInvented ( side , btype ) ; begin
24590: LD_INT 0
24592: PPUSH
// result := true ;
24593: LD_ADDR_VAR 0 3
24597: PUSH
24598: LD_INT 1
24600: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
24601: LD_VAR 0 2
24605: PUSH
24606: LD_INT 24
24608: DOUBLE
24609: EQUAL
24610: IFTRUE 24620
24612: LD_INT 33
24614: DOUBLE
24615: EQUAL
24616: IFTRUE 24620
24618: GO 24645
24620: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
24621: LD_ADDR_VAR 0 3
24625: PUSH
24626: LD_INT 32
24628: PPUSH
24629: LD_VAR 0 1
24633: PPUSH
24634: CALL_OW 321
24638: PUSH
24639: LD_INT 2
24641: EQUAL
24642: ST_TO_ADDR
24643: GO 24961
24645: LD_INT 20
24647: DOUBLE
24648: EQUAL
24649: IFTRUE 24653
24651: GO 24678
24653: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
24654: LD_ADDR_VAR 0 3
24658: PUSH
24659: LD_INT 6
24661: PPUSH
24662: LD_VAR 0 1
24666: PPUSH
24667: CALL_OW 321
24671: PUSH
24672: LD_INT 2
24674: EQUAL
24675: ST_TO_ADDR
24676: GO 24961
24678: LD_INT 22
24680: DOUBLE
24681: EQUAL
24682: IFTRUE 24692
24684: LD_INT 36
24686: DOUBLE
24687: EQUAL
24688: IFTRUE 24692
24690: GO 24717
24692: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
24693: LD_ADDR_VAR 0 3
24697: PUSH
24698: LD_INT 15
24700: PPUSH
24701: LD_VAR 0 1
24705: PPUSH
24706: CALL_OW 321
24710: PUSH
24711: LD_INT 2
24713: EQUAL
24714: ST_TO_ADDR
24715: GO 24961
24717: LD_INT 30
24719: DOUBLE
24720: EQUAL
24721: IFTRUE 24725
24723: GO 24750
24725: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
24726: LD_ADDR_VAR 0 3
24730: PUSH
24731: LD_INT 20
24733: PPUSH
24734: LD_VAR 0 1
24738: PPUSH
24739: CALL_OW 321
24743: PUSH
24744: LD_INT 2
24746: EQUAL
24747: ST_TO_ADDR
24748: GO 24961
24750: LD_INT 28
24752: DOUBLE
24753: EQUAL
24754: IFTRUE 24764
24756: LD_INT 21
24758: DOUBLE
24759: EQUAL
24760: IFTRUE 24764
24762: GO 24789
24764: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
24765: LD_ADDR_VAR 0 3
24769: PUSH
24770: LD_INT 21
24772: PPUSH
24773: LD_VAR 0 1
24777: PPUSH
24778: CALL_OW 321
24782: PUSH
24783: LD_INT 2
24785: EQUAL
24786: ST_TO_ADDR
24787: GO 24961
24789: LD_INT 16
24791: DOUBLE
24792: EQUAL
24793: IFTRUE 24797
24795: GO 24822
24797: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
24798: LD_ADDR_VAR 0 3
24802: PUSH
24803: LD_INT 84
24805: PPUSH
24806: LD_VAR 0 1
24810: PPUSH
24811: CALL_OW 321
24815: PUSH
24816: LD_INT 2
24818: EQUAL
24819: ST_TO_ADDR
24820: GO 24961
24822: LD_INT 19
24824: DOUBLE
24825: EQUAL
24826: IFTRUE 24836
24828: LD_INT 23
24830: DOUBLE
24831: EQUAL
24832: IFTRUE 24836
24834: GO 24861
24836: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
24837: LD_ADDR_VAR 0 3
24841: PUSH
24842: LD_INT 83
24844: PPUSH
24845: LD_VAR 0 1
24849: PPUSH
24850: CALL_OW 321
24854: PUSH
24855: LD_INT 2
24857: EQUAL
24858: ST_TO_ADDR
24859: GO 24961
24861: LD_INT 17
24863: DOUBLE
24864: EQUAL
24865: IFTRUE 24869
24867: GO 24894
24869: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
24870: LD_ADDR_VAR 0 3
24874: PUSH
24875: LD_INT 39
24877: PPUSH
24878: LD_VAR 0 1
24882: PPUSH
24883: CALL_OW 321
24887: PUSH
24888: LD_INT 2
24890: EQUAL
24891: ST_TO_ADDR
24892: GO 24961
24894: LD_INT 18
24896: DOUBLE
24897: EQUAL
24898: IFTRUE 24902
24900: GO 24927
24902: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
24903: LD_ADDR_VAR 0 3
24907: PUSH
24908: LD_INT 40
24910: PPUSH
24911: LD_VAR 0 1
24915: PPUSH
24916: CALL_OW 321
24920: PUSH
24921: LD_INT 2
24923: EQUAL
24924: ST_TO_ADDR
24925: GO 24961
24927: LD_INT 27
24929: DOUBLE
24930: EQUAL
24931: IFTRUE 24935
24933: GO 24960
24935: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
24936: LD_ADDR_VAR 0 3
24940: PUSH
24941: LD_INT 35
24943: PPUSH
24944: LD_VAR 0 1
24948: PPUSH
24949: CALL_OW 321
24953: PUSH
24954: LD_INT 2
24956: EQUAL
24957: ST_TO_ADDR
24958: GO 24961
24960: POP
// end ;
24961: LD_VAR 0 3
24965: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
24966: LD_INT 0
24968: PPUSH
24969: PPUSH
24970: PPUSH
24971: PPUSH
24972: PPUSH
24973: PPUSH
24974: PPUSH
24975: PPUSH
24976: PPUSH
24977: PPUSH
24978: PPUSH
// result := false ;
24979: LD_ADDR_VAR 0 6
24983: PUSH
24984: LD_INT 0
24986: ST_TO_ADDR
// if btype = b_depot then
24987: LD_VAR 0 2
24991: PUSH
24992: LD_INT 0
24994: EQUAL
24995: IFFALSE 25007
// begin result := true ;
24997: LD_ADDR_VAR 0 6
25001: PUSH
25002: LD_INT 1
25004: ST_TO_ADDR
// exit ;
25005: GO 25861
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
25007: LD_VAR 0 1
25011: NOT
25012: IFTRUE 25037
25014: PUSH
25015: LD_VAR 0 1
25019: PPUSH
25020: CALL_OW 266
25024: PUSH
25025: LD_INT 0
25027: PUSH
25028: LD_INT 1
25030: PUSH
25031: EMPTY
25032: LIST
25033: LIST
25034: IN
25035: NOT
25036: OR
25037: IFTRUE 25046
25039: PUSH
25040: LD_VAR 0 2
25044: NOT
25045: OR
25046: IFTRUE 25082
25048: PUSH
25049: LD_VAR 0 5
25053: PUSH
25054: LD_INT 0
25056: PUSH
25057: LD_INT 1
25059: PUSH
25060: LD_INT 2
25062: PUSH
25063: LD_INT 3
25065: PUSH
25066: LD_INT 4
25068: PUSH
25069: LD_INT 5
25071: PUSH
25072: EMPTY
25073: LIST
25074: LIST
25075: LIST
25076: LIST
25077: LIST
25078: LIST
25079: IN
25080: NOT
25081: OR
25082: IFTRUE 25101
25084: PUSH
25085: LD_VAR 0 3
25089: PPUSH
25090: LD_VAR 0 4
25094: PPUSH
25095: CALL_OW 488
25099: NOT
25100: OR
25101: IFFALSE 25105
// exit ;
25103: GO 25861
// side := GetSide ( depot ) ;
25105: LD_ADDR_VAR 0 9
25109: PUSH
25110: LD_VAR 0 1
25114: PPUSH
25115: CALL_OW 255
25119: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
25120: LD_VAR 0 9
25124: PPUSH
25125: LD_VAR 0 2
25129: PPUSH
25130: CALL 24590 0 2
25134: NOT
25135: IFFALSE 25139
// exit ;
25137: GO 25861
// pom := GetBase ( depot ) ;
25139: LD_ADDR_VAR 0 10
25143: PUSH
25144: LD_VAR 0 1
25148: PPUSH
25149: CALL_OW 274
25153: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
25154: LD_ADDR_VAR 0 11
25158: PUSH
25159: LD_VAR 0 2
25163: PPUSH
25164: LD_VAR 0 1
25168: PPUSH
25169: CALL_OW 248
25173: PPUSH
25174: CALL_OW 450
25178: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
25179: LD_VAR 0 10
25183: PPUSH
25184: LD_INT 1
25186: PPUSH
25187: CALL_OW 275
25191: PUSH
25192: LD_VAR 0 11
25196: PUSH
25197: LD_INT 1
25199: ARRAY
25200: GREATEREQUAL
25201: IFFALSE 25227
25203: PUSH
25204: LD_VAR 0 10
25208: PPUSH
25209: LD_INT 2
25211: PPUSH
25212: CALL_OW 275
25216: PUSH
25217: LD_VAR 0 11
25221: PUSH
25222: LD_INT 2
25224: ARRAY
25225: GREATEREQUAL
25226: AND
25227: IFFALSE 25253
25229: PUSH
25230: LD_VAR 0 10
25234: PPUSH
25235: LD_INT 3
25237: PPUSH
25238: CALL_OW 275
25242: PUSH
25243: LD_VAR 0 11
25247: PUSH
25248: LD_INT 3
25250: ARRAY
25251: GREATEREQUAL
25252: AND
25253: NOT
25254: IFFALSE 25258
// exit ;
25256: GO 25861
// if GetBType ( depot ) = b_depot then
25258: LD_VAR 0 1
25262: PPUSH
25263: CALL_OW 266
25267: PUSH
25268: LD_INT 0
25270: EQUAL
25271: IFFALSE 25283
// dist := 28 else
25273: LD_ADDR_VAR 0 14
25277: PUSH
25278: LD_INT 28
25280: ST_TO_ADDR
25281: GO 25291
// dist := 36 ;
25283: LD_ADDR_VAR 0 14
25287: PUSH
25288: LD_INT 36
25290: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
25291: LD_VAR 0 1
25295: PPUSH
25296: LD_VAR 0 3
25300: PPUSH
25301: LD_VAR 0 4
25305: PPUSH
25306: CALL_OW 297
25310: PUSH
25311: LD_VAR 0 14
25315: GREATER
25316: IFFALSE 25320
// exit ;
25318: GO 25861
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
25320: LD_ADDR_VAR 0 12
25324: PUSH
25325: LD_VAR 0 2
25329: PPUSH
25330: LD_VAR 0 3
25334: PPUSH
25335: LD_VAR 0 4
25339: PPUSH
25340: LD_VAR 0 5
25344: PPUSH
25345: LD_VAR 0 1
25349: PPUSH
25350: CALL_OW 248
25354: PPUSH
25355: LD_INT 0
25357: PPUSH
25358: CALL 25866 0 6
25362: ST_TO_ADDR
// if not hexes then
25363: LD_VAR 0 12
25367: NOT
25368: IFFALSE 25372
// exit ;
25370: GO 25861
// hex := GetHexInfo ( x , y ) ;
25372: LD_ADDR_VAR 0 15
25376: PUSH
25377: LD_VAR 0 3
25381: PPUSH
25382: LD_VAR 0 4
25386: PPUSH
25387: CALL_OW 546
25391: ST_TO_ADDR
// if hex [ 1 ] then
25392: LD_VAR 0 15
25396: PUSH
25397: LD_INT 1
25399: ARRAY
25400: IFFALSE 25404
// exit ;
25402: GO 25861
// height := hex [ 2 ] ;
25404: LD_ADDR_VAR 0 13
25408: PUSH
25409: LD_VAR 0 15
25413: PUSH
25414: LD_INT 2
25416: ARRAY
25417: ST_TO_ADDR
// for i = 1 to hexes do
25418: LD_ADDR_VAR 0 7
25422: PUSH
25423: DOUBLE
25424: LD_INT 1
25426: DEC
25427: ST_TO_ADDR
25428: LD_VAR 0 12
25432: PUSH
25433: FOR_TO
25434: IFFALSE 25778
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
25436: LD_VAR 0 12
25440: PUSH
25441: LD_VAR 0 7
25445: ARRAY
25446: PUSH
25447: LD_INT 1
25449: ARRAY
25450: PPUSH
25451: LD_VAR 0 12
25455: PUSH
25456: LD_VAR 0 7
25460: ARRAY
25461: PUSH
25462: LD_INT 2
25464: ARRAY
25465: PPUSH
25466: CALL_OW 488
25470: NOT
25471: IFTRUE 25513
25473: PUSH
25474: LD_VAR 0 12
25478: PUSH
25479: LD_VAR 0 7
25483: ARRAY
25484: PUSH
25485: LD_INT 1
25487: ARRAY
25488: PPUSH
25489: LD_VAR 0 12
25493: PUSH
25494: LD_VAR 0 7
25498: ARRAY
25499: PUSH
25500: LD_INT 2
25502: ARRAY
25503: PPUSH
25504: CALL_OW 428
25508: PUSH
25509: LD_INT 0
25511: GREATER
25512: OR
25513: IFTRUE 25551
25515: PUSH
25516: LD_VAR 0 12
25520: PUSH
25521: LD_VAR 0 7
25525: ARRAY
25526: PUSH
25527: LD_INT 1
25529: ARRAY
25530: PPUSH
25531: LD_VAR 0 12
25535: PUSH
25536: LD_VAR 0 7
25540: ARRAY
25541: PUSH
25542: LD_INT 2
25544: ARRAY
25545: PPUSH
25546: CALL_OW 351
25550: OR
25551: IFFALSE 25557
// exit ;
25553: POP
25554: POP
25555: GO 25861
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
25557: LD_ADDR_VAR 0 8
25561: PUSH
25562: LD_VAR 0 12
25566: PUSH
25567: LD_VAR 0 7
25571: ARRAY
25572: PUSH
25573: LD_INT 1
25575: ARRAY
25576: PPUSH
25577: LD_VAR 0 12
25581: PUSH
25582: LD_VAR 0 7
25586: ARRAY
25587: PUSH
25588: LD_INT 2
25590: ARRAY
25591: PPUSH
25592: CALL_OW 546
25596: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
25597: LD_VAR 0 8
25601: PUSH
25602: LD_INT 1
25604: ARRAY
25605: IFTRUE 25627
25607: PUSH
25608: LD_VAR 0 8
25612: PUSH
25613: LD_INT 2
25615: ARRAY
25616: PUSH
25617: LD_VAR 0 13
25621: PUSH
25622: LD_INT 2
25624: PLUS
25625: GREATER
25626: OR
25627: IFTRUE 25649
25629: PUSH
25630: LD_VAR 0 8
25634: PUSH
25635: LD_INT 2
25637: ARRAY
25638: PUSH
25639: LD_VAR 0 13
25643: PUSH
25644: LD_INT 2
25646: MINUS
25647: LESS
25648: OR
25649: IFTRUE 25717
25651: PUSH
25652: LD_VAR 0 8
25656: PUSH
25657: LD_INT 3
25659: ARRAY
25660: PUSH
25661: LD_INT 0
25663: PUSH
25664: LD_INT 8
25666: PUSH
25667: LD_INT 9
25669: PUSH
25670: LD_INT 10
25672: PUSH
25673: LD_INT 11
25675: PUSH
25676: LD_INT 12
25678: PUSH
25679: LD_INT 13
25681: PUSH
25682: LD_INT 16
25684: PUSH
25685: LD_INT 17
25687: PUSH
25688: LD_INT 18
25690: PUSH
25691: LD_INT 19
25693: PUSH
25694: LD_INT 20
25696: PUSH
25697: LD_INT 21
25699: PUSH
25700: EMPTY
25701: LIST
25702: LIST
25703: LIST
25704: LIST
25705: LIST
25706: LIST
25707: LIST
25708: LIST
25709: LIST
25710: LIST
25711: LIST
25712: LIST
25713: LIST
25714: IN
25715: NOT
25716: OR
25717: IFTRUE 25730
25719: PUSH
25720: LD_VAR 0 8
25724: PUSH
25725: LD_INT 5
25727: ARRAY
25728: NOT
25729: OR
25730: IFTRUE 25770
25732: PUSH
25733: LD_VAR 0 8
25737: PUSH
25738: LD_INT 6
25740: ARRAY
25741: PUSH
25742: LD_INT 1
25744: PUSH
25745: LD_INT 2
25747: PUSH
25748: LD_INT 7
25750: PUSH
25751: LD_INT 9
25753: PUSH
25754: LD_INT 10
25756: PUSH
25757: LD_INT 11
25759: PUSH
25760: EMPTY
25761: LIST
25762: LIST
25763: LIST
25764: LIST
25765: LIST
25766: LIST
25767: IN
25768: NOT
25769: OR
25770: IFFALSE 25776
// exit ;
25772: POP
25773: POP
25774: GO 25861
// end ;
25776: GO 25433
25778: POP
25779: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
25780: LD_VAR 0 9
25784: PPUSH
25785: LD_VAR 0 3
25789: PPUSH
25790: LD_VAR 0 4
25794: PPUSH
25795: LD_INT 20
25797: PPUSH
25798: CALL 17680 0 4
25802: PUSH
25803: LD_INT 4
25805: ARRAY
25806: IFFALSE 25810
// exit ;
25808: GO 25861
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
25810: LD_VAR 0 2
25814: PUSH
25815: LD_INT 29
25817: PUSH
25818: LD_INT 30
25820: PUSH
25821: EMPTY
25822: LIST
25823: LIST
25824: IN
25825: IFFALSE 25849
25827: PUSH
25828: LD_VAR 0 3
25832: PPUSH
25833: LD_VAR 0 4
25837: PPUSH
25838: LD_VAR 0 9
25842: PPUSH
25843: CALL_OW 440
25847: NOT
25848: AND
25849: IFFALSE 25853
// exit ;
25851: GO 25861
// result := true ;
25853: LD_ADDR_VAR 0 6
25857: PUSH
25858: LD_INT 1
25860: ST_TO_ADDR
// end ;
25861: LD_VAR 0 6
25865: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
25866: LD_INT 0
25868: PPUSH
25869: PPUSH
25870: PPUSH
25871: PPUSH
25872: PPUSH
25873: PPUSH
25874: PPUSH
25875: PPUSH
25876: PPUSH
25877: PPUSH
25878: PPUSH
25879: PPUSH
25880: PPUSH
25881: PPUSH
25882: PPUSH
25883: PPUSH
25884: PPUSH
25885: PPUSH
25886: PPUSH
25887: PPUSH
25888: PPUSH
25889: PPUSH
25890: PPUSH
25891: PPUSH
25892: PPUSH
25893: PPUSH
25894: PPUSH
25895: PPUSH
25896: PPUSH
25897: PPUSH
25898: PPUSH
25899: PPUSH
25900: PPUSH
25901: PPUSH
25902: PPUSH
25903: PPUSH
25904: PPUSH
25905: PPUSH
25906: PPUSH
25907: PPUSH
25908: PPUSH
25909: PPUSH
25910: PPUSH
25911: PPUSH
25912: PPUSH
25913: PPUSH
25914: PPUSH
25915: PPUSH
25916: PPUSH
25917: PPUSH
25918: PPUSH
25919: PPUSH
25920: PPUSH
25921: PPUSH
25922: PPUSH
25923: PPUSH
25924: PPUSH
25925: PPUSH
// result = [ ] ;
25926: LD_ADDR_VAR 0 7
25930: PUSH
25931: EMPTY
25932: ST_TO_ADDR
// temp_list = [ ] ;
25933: LD_ADDR_VAR 0 9
25937: PUSH
25938: EMPTY
25939: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
25940: LD_VAR 0 4
25944: PUSH
25945: LD_INT 0
25947: PUSH
25948: LD_INT 1
25950: PUSH
25951: LD_INT 2
25953: PUSH
25954: LD_INT 3
25956: PUSH
25957: LD_INT 4
25959: PUSH
25960: LD_INT 5
25962: PUSH
25963: EMPTY
25964: LIST
25965: LIST
25966: LIST
25967: LIST
25968: LIST
25969: LIST
25970: IN
25971: NOT
25972: IFTRUE 26015
25974: PUSH
25975: LD_VAR 0 1
25979: PUSH
25980: LD_INT 0
25982: PUSH
25983: LD_INT 1
25985: PUSH
25986: EMPTY
25987: LIST
25988: LIST
25989: IN
25990: IFFALSE 26014
25992: PUSH
25993: LD_VAR 0 5
25997: PUSH
25998: LD_INT 1
26000: PUSH
26001: LD_INT 2
26003: PUSH
26004: LD_INT 3
26006: PUSH
26007: EMPTY
26008: LIST
26009: LIST
26010: LIST
26011: IN
26012: NOT
26013: AND
26014: OR
26015: IFFALSE 26019
// exit ;
26017: GO 44418
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
26019: LD_VAR 0 1
26023: PUSH
26024: LD_INT 6
26026: PUSH
26027: LD_INT 7
26029: PUSH
26030: LD_INT 8
26032: PUSH
26033: LD_INT 13
26035: PUSH
26036: LD_INT 12
26038: PUSH
26039: LD_INT 15
26041: PUSH
26042: LD_INT 11
26044: PUSH
26045: LD_INT 14
26047: PUSH
26048: LD_INT 10
26050: PUSH
26051: EMPTY
26052: LIST
26053: LIST
26054: LIST
26055: LIST
26056: LIST
26057: LIST
26058: LIST
26059: LIST
26060: LIST
26061: IN
26062: IFFALSE 26072
// btype = b_lab ;
26064: LD_ADDR_VAR 0 1
26068: PUSH
26069: LD_INT 6
26071: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
26072: LD_VAR 0 6
26076: PUSH
26077: LD_INT 0
26079: PUSH
26080: LD_INT 1
26082: PUSH
26083: LD_INT 2
26085: PUSH
26086: EMPTY
26087: LIST
26088: LIST
26089: LIST
26090: IN
26091: NOT
26092: IFTRUE 26160
26094: PUSH
26095: LD_VAR 0 1
26099: PUSH
26100: LD_INT 0
26102: PUSH
26103: LD_INT 1
26105: PUSH
26106: LD_INT 2
26108: PUSH
26109: LD_INT 3
26111: PUSH
26112: LD_INT 6
26114: PUSH
26115: LD_INT 36
26117: PUSH
26118: LD_INT 4
26120: PUSH
26121: LD_INT 5
26123: PUSH
26124: LD_INT 31
26126: PUSH
26127: LD_INT 32
26129: PUSH
26130: LD_INT 33
26132: PUSH
26133: EMPTY
26134: LIST
26135: LIST
26136: LIST
26137: LIST
26138: LIST
26139: LIST
26140: LIST
26141: LIST
26142: LIST
26143: LIST
26144: LIST
26145: IN
26146: NOT
26147: IFFALSE 26159
26149: PUSH
26150: LD_VAR 0 6
26154: PUSH
26155: LD_INT 1
26157: EQUAL
26158: AND
26159: OR
26160: IFTRUE 26192
26162: PUSH
26163: LD_VAR 0 1
26167: PUSH
26168: LD_INT 2
26170: PUSH
26171: LD_INT 3
26173: PUSH
26174: EMPTY
26175: LIST
26176: LIST
26177: IN
26178: NOT
26179: IFFALSE 26191
26181: PUSH
26182: LD_VAR 0 6
26186: PUSH
26187: LD_INT 2
26189: EQUAL
26190: AND
26191: OR
26192: IFFALSE 26202
// mode = 0 ;
26194: LD_ADDR_VAR 0 6
26198: PUSH
26199: LD_INT 0
26201: ST_TO_ADDR
// case mode of 0 :
26202: LD_VAR 0 6
26206: PUSH
26207: LD_INT 0
26209: DOUBLE
26210: EQUAL
26211: IFTRUE 26215
26213: GO 37668
26215: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
26216: LD_ADDR_VAR 0 11
26220: PUSH
26221: LD_INT 0
26223: PUSH
26224: LD_INT 0
26226: PUSH
26227: EMPTY
26228: LIST
26229: LIST
26230: PUSH
26231: LD_INT 0
26233: PUSH
26234: LD_INT 1
26236: NEG
26237: PUSH
26238: EMPTY
26239: LIST
26240: LIST
26241: PUSH
26242: LD_INT 1
26244: PUSH
26245: LD_INT 0
26247: PUSH
26248: EMPTY
26249: LIST
26250: LIST
26251: PUSH
26252: LD_INT 1
26254: PUSH
26255: LD_INT 1
26257: PUSH
26258: EMPTY
26259: LIST
26260: LIST
26261: PUSH
26262: LD_INT 0
26264: PUSH
26265: LD_INT 1
26267: PUSH
26268: EMPTY
26269: LIST
26270: LIST
26271: PUSH
26272: LD_INT 1
26274: NEG
26275: PUSH
26276: LD_INT 0
26278: PUSH
26279: EMPTY
26280: LIST
26281: LIST
26282: PUSH
26283: LD_INT 1
26285: NEG
26286: PUSH
26287: LD_INT 1
26289: NEG
26290: PUSH
26291: EMPTY
26292: LIST
26293: LIST
26294: PUSH
26295: LD_INT 1
26297: NEG
26298: PUSH
26299: LD_INT 2
26301: NEG
26302: PUSH
26303: EMPTY
26304: LIST
26305: LIST
26306: PUSH
26307: LD_INT 0
26309: PUSH
26310: LD_INT 2
26312: NEG
26313: PUSH
26314: EMPTY
26315: LIST
26316: LIST
26317: PUSH
26318: LD_INT 1
26320: PUSH
26321: LD_INT 1
26323: NEG
26324: PUSH
26325: EMPTY
26326: LIST
26327: LIST
26328: PUSH
26329: LD_INT 1
26331: PUSH
26332: LD_INT 2
26334: PUSH
26335: EMPTY
26336: LIST
26337: LIST
26338: PUSH
26339: LD_INT 0
26341: PUSH
26342: LD_INT 2
26344: PUSH
26345: EMPTY
26346: LIST
26347: LIST
26348: PUSH
26349: LD_INT 1
26351: NEG
26352: PUSH
26353: LD_INT 1
26355: PUSH
26356: EMPTY
26357: LIST
26358: LIST
26359: PUSH
26360: LD_INT 1
26362: PUSH
26363: LD_INT 3
26365: PUSH
26366: EMPTY
26367: LIST
26368: LIST
26369: PUSH
26370: LD_INT 0
26372: PUSH
26373: LD_INT 3
26375: PUSH
26376: EMPTY
26377: LIST
26378: LIST
26379: PUSH
26380: LD_INT 1
26382: NEG
26383: PUSH
26384: LD_INT 2
26386: PUSH
26387: EMPTY
26388: LIST
26389: LIST
26390: PUSH
26391: EMPTY
26392: LIST
26393: LIST
26394: LIST
26395: LIST
26396: LIST
26397: LIST
26398: LIST
26399: LIST
26400: LIST
26401: LIST
26402: LIST
26403: LIST
26404: LIST
26405: LIST
26406: LIST
26407: LIST
26408: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26409: LD_ADDR_VAR 0 12
26413: PUSH
26414: LD_INT 0
26416: PUSH
26417: LD_INT 0
26419: PUSH
26420: EMPTY
26421: LIST
26422: LIST
26423: PUSH
26424: LD_INT 0
26426: PUSH
26427: LD_INT 1
26429: NEG
26430: PUSH
26431: EMPTY
26432: LIST
26433: LIST
26434: PUSH
26435: LD_INT 1
26437: PUSH
26438: LD_INT 0
26440: PUSH
26441: EMPTY
26442: LIST
26443: LIST
26444: PUSH
26445: LD_INT 1
26447: PUSH
26448: LD_INT 1
26450: PUSH
26451: EMPTY
26452: LIST
26453: LIST
26454: PUSH
26455: LD_INT 0
26457: PUSH
26458: LD_INT 1
26460: PUSH
26461: EMPTY
26462: LIST
26463: LIST
26464: PUSH
26465: LD_INT 1
26467: NEG
26468: PUSH
26469: LD_INT 0
26471: PUSH
26472: EMPTY
26473: LIST
26474: LIST
26475: PUSH
26476: LD_INT 1
26478: NEG
26479: PUSH
26480: LD_INT 1
26482: NEG
26483: PUSH
26484: EMPTY
26485: LIST
26486: LIST
26487: PUSH
26488: LD_INT 1
26490: PUSH
26491: LD_INT 1
26493: NEG
26494: PUSH
26495: EMPTY
26496: LIST
26497: LIST
26498: PUSH
26499: LD_INT 2
26501: PUSH
26502: LD_INT 0
26504: PUSH
26505: EMPTY
26506: LIST
26507: LIST
26508: PUSH
26509: LD_INT 2
26511: PUSH
26512: LD_INT 1
26514: PUSH
26515: EMPTY
26516: LIST
26517: LIST
26518: PUSH
26519: LD_INT 1
26521: NEG
26522: PUSH
26523: LD_INT 1
26525: PUSH
26526: EMPTY
26527: LIST
26528: LIST
26529: PUSH
26530: LD_INT 2
26532: NEG
26533: PUSH
26534: LD_INT 0
26536: PUSH
26537: EMPTY
26538: LIST
26539: LIST
26540: PUSH
26541: LD_INT 2
26543: NEG
26544: PUSH
26545: LD_INT 1
26547: NEG
26548: PUSH
26549: EMPTY
26550: LIST
26551: LIST
26552: PUSH
26553: LD_INT 2
26555: NEG
26556: PUSH
26557: LD_INT 1
26559: PUSH
26560: EMPTY
26561: LIST
26562: LIST
26563: PUSH
26564: LD_INT 3
26566: NEG
26567: PUSH
26568: LD_INT 0
26570: PUSH
26571: EMPTY
26572: LIST
26573: LIST
26574: PUSH
26575: LD_INT 3
26577: NEG
26578: PUSH
26579: LD_INT 1
26581: NEG
26582: PUSH
26583: EMPTY
26584: LIST
26585: LIST
26586: PUSH
26587: EMPTY
26588: LIST
26589: LIST
26590: LIST
26591: LIST
26592: LIST
26593: LIST
26594: LIST
26595: LIST
26596: LIST
26597: LIST
26598: LIST
26599: LIST
26600: LIST
26601: LIST
26602: LIST
26603: LIST
26604: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26605: LD_ADDR_VAR 0 13
26609: PUSH
26610: LD_INT 0
26612: PUSH
26613: LD_INT 0
26615: PUSH
26616: EMPTY
26617: LIST
26618: LIST
26619: PUSH
26620: LD_INT 0
26622: PUSH
26623: LD_INT 1
26625: NEG
26626: PUSH
26627: EMPTY
26628: LIST
26629: LIST
26630: PUSH
26631: LD_INT 1
26633: PUSH
26634: LD_INT 0
26636: PUSH
26637: EMPTY
26638: LIST
26639: LIST
26640: PUSH
26641: LD_INT 1
26643: PUSH
26644: LD_INT 1
26646: PUSH
26647: EMPTY
26648: LIST
26649: LIST
26650: PUSH
26651: LD_INT 0
26653: PUSH
26654: LD_INT 1
26656: PUSH
26657: EMPTY
26658: LIST
26659: LIST
26660: PUSH
26661: LD_INT 1
26663: NEG
26664: PUSH
26665: LD_INT 0
26667: PUSH
26668: EMPTY
26669: LIST
26670: LIST
26671: PUSH
26672: LD_INT 1
26674: NEG
26675: PUSH
26676: LD_INT 1
26678: NEG
26679: PUSH
26680: EMPTY
26681: LIST
26682: LIST
26683: PUSH
26684: LD_INT 1
26686: NEG
26687: PUSH
26688: LD_INT 2
26690: NEG
26691: PUSH
26692: EMPTY
26693: LIST
26694: LIST
26695: PUSH
26696: LD_INT 2
26698: PUSH
26699: LD_INT 1
26701: PUSH
26702: EMPTY
26703: LIST
26704: LIST
26705: PUSH
26706: LD_INT 2
26708: PUSH
26709: LD_INT 2
26711: PUSH
26712: EMPTY
26713: LIST
26714: LIST
26715: PUSH
26716: LD_INT 1
26718: PUSH
26719: LD_INT 2
26721: PUSH
26722: EMPTY
26723: LIST
26724: LIST
26725: PUSH
26726: LD_INT 2
26728: NEG
26729: PUSH
26730: LD_INT 1
26732: NEG
26733: PUSH
26734: EMPTY
26735: LIST
26736: LIST
26737: PUSH
26738: LD_INT 2
26740: NEG
26741: PUSH
26742: LD_INT 2
26744: NEG
26745: PUSH
26746: EMPTY
26747: LIST
26748: LIST
26749: PUSH
26750: LD_INT 2
26752: NEG
26753: PUSH
26754: LD_INT 3
26756: NEG
26757: PUSH
26758: EMPTY
26759: LIST
26760: LIST
26761: PUSH
26762: LD_INT 3
26764: NEG
26765: PUSH
26766: LD_INT 2
26768: NEG
26769: PUSH
26770: EMPTY
26771: LIST
26772: LIST
26773: PUSH
26774: LD_INT 3
26776: NEG
26777: PUSH
26778: LD_INT 3
26780: NEG
26781: PUSH
26782: EMPTY
26783: LIST
26784: LIST
26785: PUSH
26786: EMPTY
26787: LIST
26788: LIST
26789: LIST
26790: LIST
26791: LIST
26792: LIST
26793: LIST
26794: LIST
26795: LIST
26796: LIST
26797: LIST
26798: LIST
26799: LIST
26800: LIST
26801: LIST
26802: LIST
26803: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
26804: LD_ADDR_VAR 0 14
26808: PUSH
26809: LD_INT 0
26811: PUSH
26812: LD_INT 0
26814: PUSH
26815: EMPTY
26816: LIST
26817: LIST
26818: PUSH
26819: LD_INT 0
26821: PUSH
26822: LD_INT 1
26824: NEG
26825: PUSH
26826: EMPTY
26827: LIST
26828: LIST
26829: PUSH
26830: LD_INT 1
26832: PUSH
26833: LD_INT 0
26835: PUSH
26836: EMPTY
26837: LIST
26838: LIST
26839: PUSH
26840: LD_INT 1
26842: PUSH
26843: LD_INT 1
26845: PUSH
26846: EMPTY
26847: LIST
26848: LIST
26849: PUSH
26850: LD_INT 0
26852: PUSH
26853: LD_INT 1
26855: PUSH
26856: EMPTY
26857: LIST
26858: LIST
26859: PUSH
26860: LD_INT 1
26862: NEG
26863: PUSH
26864: LD_INT 0
26866: PUSH
26867: EMPTY
26868: LIST
26869: LIST
26870: PUSH
26871: LD_INT 1
26873: NEG
26874: PUSH
26875: LD_INT 1
26877: NEG
26878: PUSH
26879: EMPTY
26880: LIST
26881: LIST
26882: PUSH
26883: LD_INT 1
26885: NEG
26886: PUSH
26887: LD_INT 2
26889: NEG
26890: PUSH
26891: EMPTY
26892: LIST
26893: LIST
26894: PUSH
26895: LD_INT 0
26897: PUSH
26898: LD_INT 2
26900: NEG
26901: PUSH
26902: EMPTY
26903: LIST
26904: LIST
26905: PUSH
26906: LD_INT 1
26908: PUSH
26909: LD_INT 1
26911: NEG
26912: PUSH
26913: EMPTY
26914: LIST
26915: LIST
26916: PUSH
26917: LD_INT 1
26919: PUSH
26920: LD_INT 2
26922: PUSH
26923: EMPTY
26924: LIST
26925: LIST
26926: PUSH
26927: LD_INT 0
26929: PUSH
26930: LD_INT 2
26932: PUSH
26933: EMPTY
26934: LIST
26935: LIST
26936: PUSH
26937: LD_INT 1
26939: NEG
26940: PUSH
26941: LD_INT 1
26943: PUSH
26944: EMPTY
26945: LIST
26946: LIST
26947: PUSH
26948: LD_INT 1
26950: NEG
26951: PUSH
26952: LD_INT 3
26954: NEG
26955: PUSH
26956: EMPTY
26957: LIST
26958: LIST
26959: PUSH
26960: LD_INT 0
26962: PUSH
26963: LD_INT 3
26965: NEG
26966: PUSH
26967: EMPTY
26968: LIST
26969: LIST
26970: PUSH
26971: LD_INT 1
26973: PUSH
26974: LD_INT 2
26976: NEG
26977: PUSH
26978: EMPTY
26979: LIST
26980: LIST
26981: PUSH
26982: EMPTY
26983: LIST
26984: LIST
26985: LIST
26986: LIST
26987: LIST
26988: LIST
26989: LIST
26990: LIST
26991: LIST
26992: LIST
26993: LIST
26994: LIST
26995: LIST
26996: LIST
26997: LIST
26998: LIST
26999: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27000: LD_ADDR_VAR 0 15
27004: PUSH
27005: LD_INT 0
27007: PUSH
27008: LD_INT 0
27010: PUSH
27011: EMPTY
27012: LIST
27013: LIST
27014: PUSH
27015: LD_INT 0
27017: PUSH
27018: LD_INT 1
27020: NEG
27021: PUSH
27022: EMPTY
27023: LIST
27024: LIST
27025: PUSH
27026: LD_INT 1
27028: PUSH
27029: LD_INT 0
27031: PUSH
27032: EMPTY
27033: LIST
27034: LIST
27035: PUSH
27036: LD_INT 1
27038: PUSH
27039: LD_INT 1
27041: PUSH
27042: EMPTY
27043: LIST
27044: LIST
27045: PUSH
27046: LD_INT 0
27048: PUSH
27049: LD_INT 1
27051: PUSH
27052: EMPTY
27053: LIST
27054: LIST
27055: PUSH
27056: LD_INT 1
27058: NEG
27059: PUSH
27060: LD_INT 0
27062: PUSH
27063: EMPTY
27064: LIST
27065: LIST
27066: PUSH
27067: LD_INT 1
27069: NEG
27070: PUSH
27071: LD_INT 1
27073: NEG
27074: PUSH
27075: EMPTY
27076: LIST
27077: LIST
27078: PUSH
27079: LD_INT 1
27081: PUSH
27082: LD_INT 1
27084: NEG
27085: PUSH
27086: EMPTY
27087: LIST
27088: LIST
27089: PUSH
27090: LD_INT 2
27092: PUSH
27093: LD_INT 0
27095: PUSH
27096: EMPTY
27097: LIST
27098: LIST
27099: PUSH
27100: LD_INT 2
27102: PUSH
27103: LD_INT 1
27105: PUSH
27106: EMPTY
27107: LIST
27108: LIST
27109: PUSH
27110: LD_INT 1
27112: NEG
27113: PUSH
27114: LD_INT 1
27116: PUSH
27117: EMPTY
27118: LIST
27119: LIST
27120: PUSH
27121: LD_INT 2
27123: NEG
27124: PUSH
27125: LD_INT 0
27127: PUSH
27128: EMPTY
27129: LIST
27130: LIST
27131: PUSH
27132: LD_INT 2
27134: NEG
27135: PUSH
27136: LD_INT 1
27138: NEG
27139: PUSH
27140: EMPTY
27141: LIST
27142: LIST
27143: PUSH
27144: LD_INT 2
27146: PUSH
27147: LD_INT 1
27149: NEG
27150: PUSH
27151: EMPTY
27152: LIST
27153: LIST
27154: PUSH
27155: LD_INT 3
27157: PUSH
27158: LD_INT 0
27160: PUSH
27161: EMPTY
27162: LIST
27163: LIST
27164: PUSH
27165: LD_INT 3
27167: PUSH
27168: LD_INT 1
27170: PUSH
27171: EMPTY
27172: LIST
27173: LIST
27174: PUSH
27175: EMPTY
27176: LIST
27177: LIST
27178: LIST
27179: LIST
27180: LIST
27181: LIST
27182: LIST
27183: LIST
27184: LIST
27185: LIST
27186: LIST
27187: LIST
27188: LIST
27189: LIST
27190: LIST
27191: LIST
27192: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27193: LD_ADDR_VAR 0 16
27197: PUSH
27198: LD_INT 0
27200: PUSH
27201: LD_INT 0
27203: PUSH
27204: EMPTY
27205: LIST
27206: LIST
27207: PUSH
27208: LD_INT 0
27210: PUSH
27211: LD_INT 1
27213: NEG
27214: PUSH
27215: EMPTY
27216: LIST
27217: LIST
27218: PUSH
27219: LD_INT 1
27221: PUSH
27222: LD_INT 0
27224: PUSH
27225: EMPTY
27226: LIST
27227: LIST
27228: PUSH
27229: LD_INT 1
27231: PUSH
27232: LD_INT 1
27234: PUSH
27235: EMPTY
27236: LIST
27237: LIST
27238: PUSH
27239: LD_INT 0
27241: PUSH
27242: LD_INT 1
27244: PUSH
27245: EMPTY
27246: LIST
27247: LIST
27248: PUSH
27249: LD_INT 1
27251: NEG
27252: PUSH
27253: LD_INT 0
27255: PUSH
27256: EMPTY
27257: LIST
27258: LIST
27259: PUSH
27260: LD_INT 1
27262: NEG
27263: PUSH
27264: LD_INT 1
27266: NEG
27267: PUSH
27268: EMPTY
27269: LIST
27270: LIST
27271: PUSH
27272: LD_INT 1
27274: NEG
27275: PUSH
27276: LD_INT 2
27278: NEG
27279: PUSH
27280: EMPTY
27281: LIST
27282: LIST
27283: PUSH
27284: LD_INT 2
27286: PUSH
27287: LD_INT 1
27289: PUSH
27290: EMPTY
27291: LIST
27292: LIST
27293: PUSH
27294: LD_INT 2
27296: PUSH
27297: LD_INT 2
27299: PUSH
27300: EMPTY
27301: LIST
27302: LIST
27303: PUSH
27304: LD_INT 1
27306: PUSH
27307: LD_INT 2
27309: PUSH
27310: EMPTY
27311: LIST
27312: LIST
27313: PUSH
27314: LD_INT 2
27316: NEG
27317: PUSH
27318: LD_INT 1
27320: NEG
27321: PUSH
27322: EMPTY
27323: LIST
27324: LIST
27325: PUSH
27326: LD_INT 2
27328: NEG
27329: PUSH
27330: LD_INT 2
27332: NEG
27333: PUSH
27334: EMPTY
27335: LIST
27336: LIST
27337: PUSH
27338: LD_INT 3
27340: PUSH
27341: LD_INT 2
27343: PUSH
27344: EMPTY
27345: LIST
27346: LIST
27347: PUSH
27348: LD_INT 3
27350: PUSH
27351: LD_INT 3
27353: PUSH
27354: EMPTY
27355: LIST
27356: LIST
27357: PUSH
27358: LD_INT 2
27360: PUSH
27361: LD_INT 3
27363: PUSH
27364: EMPTY
27365: LIST
27366: LIST
27367: PUSH
27368: EMPTY
27369: LIST
27370: LIST
27371: LIST
27372: LIST
27373: LIST
27374: LIST
27375: LIST
27376: LIST
27377: LIST
27378: LIST
27379: LIST
27380: LIST
27381: LIST
27382: LIST
27383: LIST
27384: LIST
27385: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27386: LD_ADDR_VAR 0 17
27390: PUSH
27391: LD_INT 0
27393: PUSH
27394: LD_INT 0
27396: PUSH
27397: EMPTY
27398: LIST
27399: LIST
27400: PUSH
27401: LD_INT 0
27403: PUSH
27404: LD_INT 1
27406: NEG
27407: PUSH
27408: EMPTY
27409: LIST
27410: LIST
27411: PUSH
27412: LD_INT 1
27414: PUSH
27415: LD_INT 0
27417: PUSH
27418: EMPTY
27419: LIST
27420: LIST
27421: PUSH
27422: LD_INT 1
27424: PUSH
27425: LD_INT 1
27427: PUSH
27428: EMPTY
27429: LIST
27430: LIST
27431: PUSH
27432: LD_INT 0
27434: PUSH
27435: LD_INT 1
27437: PUSH
27438: EMPTY
27439: LIST
27440: LIST
27441: PUSH
27442: LD_INT 1
27444: NEG
27445: PUSH
27446: LD_INT 0
27448: PUSH
27449: EMPTY
27450: LIST
27451: LIST
27452: PUSH
27453: LD_INT 1
27455: NEG
27456: PUSH
27457: LD_INT 1
27459: NEG
27460: PUSH
27461: EMPTY
27462: LIST
27463: LIST
27464: PUSH
27465: LD_INT 1
27467: NEG
27468: PUSH
27469: LD_INT 2
27471: NEG
27472: PUSH
27473: EMPTY
27474: LIST
27475: LIST
27476: PUSH
27477: LD_INT 0
27479: PUSH
27480: LD_INT 2
27482: NEG
27483: PUSH
27484: EMPTY
27485: LIST
27486: LIST
27487: PUSH
27488: LD_INT 1
27490: PUSH
27491: LD_INT 1
27493: NEG
27494: PUSH
27495: EMPTY
27496: LIST
27497: LIST
27498: PUSH
27499: LD_INT 2
27501: PUSH
27502: LD_INT 0
27504: PUSH
27505: EMPTY
27506: LIST
27507: LIST
27508: PUSH
27509: LD_INT 2
27511: PUSH
27512: LD_INT 1
27514: PUSH
27515: EMPTY
27516: LIST
27517: LIST
27518: PUSH
27519: LD_INT 2
27521: PUSH
27522: LD_INT 2
27524: PUSH
27525: EMPTY
27526: LIST
27527: LIST
27528: PUSH
27529: LD_INT 1
27531: PUSH
27532: LD_INT 2
27534: PUSH
27535: EMPTY
27536: LIST
27537: LIST
27538: PUSH
27539: LD_INT 0
27541: PUSH
27542: LD_INT 2
27544: PUSH
27545: EMPTY
27546: LIST
27547: LIST
27548: PUSH
27549: LD_INT 1
27551: NEG
27552: PUSH
27553: LD_INT 1
27555: PUSH
27556: EMPTY
27557: LIST
27558: LIST
27559: PUSH
27560: LD_INT 2
27562: NEG
27563: PUSH
27564: LD_INT 0
27566: PUSH
27567: EMPTY
27568: LIST
27569: LIST
27570: PUSH
27571: LD_INT 2
27573: NEG
27574: PUSH
27575: LD_INT 1
27577: NEG
27578: PUSH
27579: EMPTY
27580: LIST
27581: LIST
27582: PUSH
27583: LD_INT 2
27585: NEG
27586: PUSH
27587: LD_INT 2
27589: NEG
27590: PUSH
27591: EMPTY
27592: LIST
27593: LIST
27594: PUSH
27595: EMPTY
27596: LIST
27597: LIST
27598: LIST
27599: LIST
27600: LIST
27601: LIST
27602: LIST
27603: LIST
27604: LIST
27605: LIST
27606: LIST
27607: LIST
27608: LIST
27609: LIST
27610: LIST
27611: LIST
27612: LIST
27613: LIST
27614: LIST
27615: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27616: LD_ADDR_VAR 0 18
27620: PUSH
27621: LD_INT 0
27623: PUSH
27624: LD_INT 0
27626: PUSH
27627: EMPTY
27628: LIST
27629: LIST
27630: PUSH
27631: LD_INT 0
27633: PUSH
27634: LD_INT 1
27636: NEG
27637: PUSH
27638: EMPTY
27639: LIST
27640: LIST
27641: PUSH
27642: LD_INT 1
27644: PUSH
27645: LD_INT 0
27647: PUSH
27648: EMPTY
27649: LIST
27650: LIST
27651: PUSH
27652: LD_INT 1
27654: PUSH
27655: LD_INT 1
27657: PUSH
27658: EMPTY
27659: LIST
27660: LIST
27661: PUSH
27662: LD_INT 0
27664: PUSH
27665: LD_INT 1
27667: PUSH
27668: EMPTY
27669: LIST
27670: LIST
27671: PUSH
27672: LD_INT 1
27674: NEG
27675: PUSH
27676: LD_INT 0
27678: PUSH
27679: EMPTY
27680: LIST
27681: LIST
27682: PUSH
27683: LD_INT 1
27685: NEG
27686: PUSH
27687: LD_INT 1
27689: NEG
27690: PUSH
27691: EMPTY
27692: LIST
27693: LIST
27694: PUSH
27695: LD_INT 1
27697: NEG
27698: PUSH
27699: LD_INT 2
27701: NEG
27702: PUSH
27703: EMPTY
27704: LIST
27705: LIST
27706: PUSH
27707: LD_INT 0
27709: PUSH
27710: LD_INT 2
27712: NEG
27713: PUSH
27714: EMPTY
27715: LIST
27716: LIST
27717: PUSH
27718: LD_INT 1
27720: PUSH
27721: LD_INT 1
27723: NEG
27724: PUSH
27725: EMPTY
27726: LIST
27727: LIST
27728: PUSH
27729: LD_INT 2
27731: PUSH
27732: LD_INT 0
27734: PUSH
27735: EMPTY
27736: LIST
27737: LIST
27738: PUSH
27739: LD_INT 2
27741: PUSH
27742: LD_INT 1
27744: PUSH
27745: EMPTY
27746: LIST
27747: LIST
27748: PUSH
27749: LD_INT 2
27751: PUSH
27752: LD_INT 2
27754: PUSH
27755: EMPTY
27756: LIST
27757: LIST
27758: PUSH
27759: LD_INT 1
27761: PUSH
27762: LD_INT 2
27764: PUSH
27765: EMPTY
27766: LIST
27767: LIST
27768: PUSH
27769: LD_INT 0
27771: PUSH
27772: LD_INT 2
27774: PUSH
27775: EMPTY
27776: LIST
27777: LIST
27778: PUSH
27779: LD_INT 1
27781: NEG
27782: PUSH
27783: LD_INT 1
27785: PUSH
27786: EMPTY
27787: LIST
27788: LIST
27789: PUSH
27790: LD_INT 2
27792: NEG
27793: PUSH
27794: LD_INT 0
27796: PUSH
27797: EMPTY
27798: LIST
27799: LIST
27800: PUSH
27801: LD_INT 2
27803: NEG
27804: PUSH
27805: LD_INT 1
27807: NEG
27808: PUSH
27809: EMPTY
27810: LIST
27811: LIST
27812: PUSH
27813: LD_INT 2
27815: NEG
27816: PUSH
27817: LD_INT 2
27819: NEG
27820: PUSH
27821: EMPTY
27822: LIST
27823: LIST
27824: PUSH
27825: EMPTY
27826: LIST
27827: LIST
27828: LIST
27829: LIST
27830: LIST
27831: LIST
27832: LIST
27833: LIST
27834: LIST
27835: LIST
27836: LIST
27837: LIST
27838: LIST
27839: LIST
27840: LIST
27841: LIST
27842: LIST
27843: LIST
27844: LIST
27845: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27846: LD_ADDR_VAR 0 19
27850: PUSH
27851: LD_INT 0
27853: PUSH
27854: LD_INT 0
27856: PUSH
27857: EMPTY
27858: LIST
27859: LIST
27860: PUSH
27861: LD_INT 0
27863: PUSH
27864: LD_INT 1
27866: NEG
27867: PUSH
27868: EMPTY
27869: LIST
27870: LIST
27871: PUSH
27872: LD_INT 1
27874: PUSH
27875: LD_INT 0
27877: PUSH
27878: EMPTY
27879: LIST
27880: LIST
27881: PUSH
27882: LD_INT 1
27884: PUSH
27885: LD_INT 1
27887: PUSH
27888: EMPTY
27889: LIST
27890: LIST
27891: PUSH
27892: LD_INT 0
27894: PUSH
27895: LD_INT 1
27897: PUSH
27898: EMPTY
27899: LIST
27900: LIST
27901: PUSH
27902: LD_INT 1
27904: NEG
27905: PUSH
27906: LD_INT 0
27908: PUSH
27909: EMPTY
27910: LIST
27911: LIST
27912: PUSH
27913: LD_INT 1
27915: NEG
27916: PUSH
27917: LD_INT 1
27919: NEG
27920: PUSH
27921: EMPTY
27922: LIST
27923: LIST
27924: PUSH
27925: LD_INT 1
27927: NEG
27928: PUSH
27929: LD_INT 2
27931: NEG
27932: PUSH
27933: EMPTY
27934: LIST
27935: LIST
27936: PUSH
27937: LD_INT 0
27939: PUSH
27940: LD_INT 2
27942: NEG
27943: PUSH
27944: EMPTY
27945: LIST
27946: LIST
27947: PUSH
27948: LD_INT 1
27950: PUSH
27951: LD_INT 1
27953: NEG
27954: PUSH
27955: EMPTY
27956: LIST
27957: LIST
27958: PUSH
27959: LD_INT 2
27961: PUSH
27962: LD_INT 0
27964: PUSH
27965: EMPTY
27966: LIST
27967: LIST
27968: PUSH
27969: LD_INT 2
27971: PUSH
27972: LD_INT 1
27974: PUSH
27975: EMPTY
27976: LIST
27977: LIST
27978: PUSH
27979: LD_INT 2
27981: PUSH
27982: LD_INT 2
27984: PUSH
27985: EMPTY
27986: LIST
27987: LIST
27988: PUSH
27989: LD_INT 1
27991: PUSH
27992: LD_INT 2
27994: PUSH
27995: EMPTY
27996: LIST
27997: LIST
27998: PUSH
27999: LD_INT 0
28001: PUSH
28002: LD_INT 2
28004: PUSH
28005: EMPTY
28006: LIST
28007: LIST
28008: PUSH
28009: LD_INT 1
28011: NEG
28012: PUSH
28013: LD_INT 1
28015: PUSH
28016: EMPTY
28017: LIST
28018: LIST
28019: PUSH
28020: LD_INT 2
28022: NEG
28023: PUSH
28024: LD_INT 0
28026: PUSH
28027: EMPTY
28028: LIST
28029: LIST
28030: PUSH
28031: LD_INT 2
28033: NEG
28034: PUSH
28035: LD_INT 1
28037: NEG
28038: PUSH
28039: EMPTY
28040: LIST
28041: LIST
28042: PUSH
28043: LD_INT 2
28045: NEG
28046: PUSH
28047: LD_INT 2
28049: NEG
28050: PUSH
28051: EMPTY
28052: LIST
28053: LIST
28054: PUSH
28055: EMPTY
28056: LIST
28057: LIST
28058: LIST
28059: LIST
28060: LIST
28061: LIST
28062: LIST
28063: LIST
28064: LIST
28065: LIST
28066: LIST
28067: LIST
28068: LIST
28069: LIST
28070: LIST
28071: LIST
28072: LIST
28073: LIST
28074: LIST
28075: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28076: LD_ADDR_VAR 0 20
28080: PUSH
28081: LD_INT 0
28083: PUSH
28084: LD_INT 0
28086: PUSH
28087: EMPTY
28088: LIST
28089: LIST
28090: PUSH
28091: LD_INT 0
28093: PUSH
28094: LD_INT 1
28096: NEG
28097: PUSH
28098: EMPTY
28099: LIST
28100: LIST
28101: PUSH
28102: LD_INT 1
28104: PUSH
28105: LD_INT 0
28107: PUSH
28108: EMPTY
28109: LIST
28110: LIST
28111: PUSH
28112: LD_INT 1
28114: PUSH
28115: LD_INT 1
28117: PUSH
28118: EMPTY
28119: LIST
28120: LIST
28121: PUSH
28122: LD_INT 0
28124: PUSH
28125: LD_INT 1
28127: PUSH
28128: EMPTY
28129: LIST
28130: LIST
28131: PUSH
28132: LD_INT 1
28134: NEG
28135: PUSH
28136: LD_INT 0
28138: PUSH
28139: EMPTY
28140: LIST
28141: LIST
28142: PUSH
28143: LD_INT 1
28145: NEG
28146: PUSH
28147: LD_INT 1
28149: NEG
28150: PUSH
28151: EMPTY
28152: LIST
28153: LIST
28154: PUSH
28155: LD_INT 1
28157: NEG
28158: PUSH
28159: LD_INT 2
28161: NEG
28162: PUSH
28163: EMPTY
28164: LIST
28165: LIST
28166: PUSH
28167: LD_INT 0
28169: PUSH
28170: LD_INT 2
28172: NEG
28173: PUSH
28174: EMPTY
28175: LIST
28176: LIST
28177: PUSH
28178: LD_INT 1
28180: PUSH
28181: LD_INT 1
28183: NEG
28184: PUSH
28185: EMPTY
28186: LIST
28187: LIST
28188: PUSH
28189: LD_INT 2
28191: PUSH
28192: LD_INT 0
28194: PUSH
28195: EMPTY
28196: LIST
28197: LIST
28198: PUSH
28199: LD_INT 2
28201: PUSH
28202: LD_INT 1
28204: PUSH
28205: EMPTY
28206: LIST
28207: LIST
28208: PUSH
28209: LD_INT 2
28211: PUSH
28212: LD_INT 2
28214: PUSH
28215: EMPTY
28216: LIST
28217: LIST
28218: PUSH
28219: LD_INT 1
28221: PUSH
28222: LD_INT 2
28224: PUSH
28225: EMPTY
28226: LIST
28227: LIST
28228: PUSH
28229: LD_INT 0
28231: PUSH
28232: LD_INT 2
28234: PUSH
28235: EMPTY
28236: LIST
28237: LIST
28238: PUSH
28239: LD_INT 1
28241: NEG
28242: PUSH
28243: LD_INT 1
28245: PUSH
28246: EMPTY
28247: LIST
28248: LIST
28249: PUSH
28250: LD_INT 2
28252: NEG
28253: PUSH
28254: LD_INT 0
28256: PUSH
28257: EMPTY
28258: LIST
28259: LIST
28260: PUSH
28261: LD_INT 2
28263: NEG
28264: PUSH
28265: LD_INT 1
28267: NEG
28268: PUSH
28269: EMPTY
28270: LIST
28271: LIST
28272: PUSH
28273: LD_INT 2
28275: NEG
28276: PUSH
28277: LD_INT 2
28279: NEG
28280: PUSH
28281: EMPTY
28282: LIST
28283: LIST
28284: PUSH
28285: EMPTY
28286: LIST
28287: LIST
28288: LIST
28289: LIST
28290: LIST
28291: LIST
28292: LIST
28293: LIST
28294: LIST
28295: LIST
28296: LIST
28297: LIST
28298: LIST
28299: LIST
28300: LIST
28301: LIST
28302: LIST
28303: LIST
28304: LIST
28305: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28306: LD_ADDR_VAR 0 21
28310: PUSH
28311: LD_INT 0
28313: PUSH
28314: LD_INT 0
28316: PUSH
28317: EMPTY
28318: LIST
28319: LIST
28320: PUSH
28321: LD_INT 0
28323: PUSH
28324: LD_INT 1
28326: NEG
28327: PUSH
28328: EMPTY
28329: LIST
28330: LIST
28331: PUSH
28332: LD_INT 1
28334: PUSH
28335: LD_INT 0
28337: PUSH
28338: EMPTY
28339: LIST
28340: LIST
28341: PUSH
28342: LD_INT 1
28344: PUSH
28345: LD_INT 1
28347: PUSH
28348: EMPTY
28349: LIST
28350: LIST
28351: PUSH
28352: LD_INT 0
28354: PUSH
28355: LD_INT 1
28357: PUSH
28358: EMPTY
28359: LIST
28360: LIST
28361: PUSH
28362: LD_INT 1
28364: NEG
28365: PUSH
28366: LD_INT 0
28368: PUSH
28369: EMPTY
28370: LIST
28371: LIST
28372: PUSH
28373: LD_INT 1
28375: NEG
28376: PUSH
28377: LD_INT 1
28379: NEG
28380: PUSH
28381: EMPTY
28382: LIST
28383: LIST
28384: PUSH
28385: LD_INT 1
28387: NEG
28388: PUSH
28389: LD_INT 2
28391: NEG
28392: PUSH
28393: EMPTY
28394: LIST
28395: LIST
28396: PUSH
28397: LD_INT 0
28399: PUSH
28400: LD_INT 2
28402: NEG
28403: PUSH
28404: EMPTY
28405: LIST
28406: LIST
28407: PUSH
28408: LD_INT 1
28410: PUSH
28411: LD_INT 1
28413: NEG
28414: PUSH
28415: EMPTY
28416: LIST
28417: LIST
28418: PUSH
28419: LD_INT 2
28421: PUSH
28422: LD_INT 0
28424: PUSH
28425: EMPTY
28426: LIST
28427: LIST
28428: PUSH
28429: LD_INT 2
28431: PUSH
28432: LD_INT 1
28434: PUSH
28435: EMPTY
28436: LIST
28437: LIST
28438: PUSH
28439: LD_INT 2
28441: PUSH
28442: LD_INT 2
28444: PUSH
28445: EMPTY
28446: LIST
28447: LIST
28448: PUSH
28449: LD_INT 1
28451: PUSH
28452: LD_INT 2
28454: PUSH
28455: EMPTY
28456: LIST
28457: LIST
28458: PUSH
28459: LD_INT 0
28461: PUSH
28462: LD_INT 2
28464: PUSH
28465: EMPTY
28466: LIST
28467: LIST
28468: PUSH
28469: LD_INT 1
28471: NEG
28472: PUSH
28473: LD_INT 1
28475: PUSH
28476: EMPTY
28477: LIST
28478: LIST
28479: PUSH
28480: LD_INT 2
28482: NEG
28483: PUSH
28484: LD_INT 0
28486: PUSH
28487: EMPTY
28488: LIST
28489: LIST
28490: PUSH
28491: LD_INT 2
28493: NEG
28494: PUSH
28495: LD_INT 1
28497: NEG
28498: PUSH
28499: EMPTY
28500: LIST
28501: LIST
28502: PUSH
28503: LD_INT 2
28505: NEG
28506: PUSH
28507: LD_INT 2
28509: NEG
28510: PUSH
28511: EMPTY
28512: LIST
28513: LIST
28514: PUSH
28515: EMPTY
28516: LIST
28517: LIST
28518: LIST
28519: LIST
28520: LIST
28521: LIST
28522: LIST
28523: LIST
28524: LIST
28525: LIST
28526: LIST
28527: LIST
28528: LIST
28529: LIST
28530: LIST
28531: LIST
28532: LIST
28533: LIST
28534: LIST
28535: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28536: LD_ADDR_VAR 0 22
28540: PUSH
28541: LD_INT 0
28543: PUSH
28544: LD_INT 0
28546: PUSH
28547: EMPTY
28548: LIST
28549: LIST
28550: PUSH
28551: LD_INT 0
28553: PUSH
28554: LD_INT 1
28556: NEG
28557: PUSH
28558: EMPTY
28559: LIST
28560: LIST
28561: PUSH
28562: LD_INT 1
28564: PUSH
28565: LD_INT 0
28567: PUSH
28568: EMPTY
28569: LIST
28570: LIST
28571: PUSH
28572: LD_INT 1
28574: PUSH
28575: LD_INT 1
28577: PUSH
28578: EMPTY
28579: LIST
28580: LIST
28581: PUSH
28582: LD_INT 0
28584: PUSH
28585: LD_INT 1
28587: PUSH
28588: EMPTY
28589: LIST
28590: LIST
28591: PUSH
28592: LD_INT 1
28594: NEG
28595: PUSH
28596: LD_INT 0
28598: PUSH
28599: EMPTY
28600: LIST
28601: LIST
28602: PUSH
28603: LD_INT 1
28605: NEG
28606: PUSH
28607: LD_INT 1
28609: NEG
28610: PUSH
28611: EMPTY
28612: LIST
28613: LIST
28614: PUSH
28615: LD_INT 1
28617: NEG
28618: PUSH
28619: LD_INT 2
28621: NEG
28622: PUSH
28623: EMPTY
28624: LIST
28625: LIST
28626: PUSH
28627: LD_INT 0
28629: PUSH
28630: LD_INT 2
28632: NEG
28633: PUSH
28634: EMPTY
28635: LIST
28636: LIST
28637: PUSH
28638: LD_INT 1
28640: PUSH
28641: LD_INT 1
28643: NEG
28644: PUSH
28645: EMPTY
28646: LIST
28647: LIST
28648: PUSH
28649: LD_INT 2
28651: PUSH
28652: LD_INT 0
28654: PUSH
28655: EMPTY
28656: LIST
28657: LIST
28658: PUSH
28659: LD_INT 2
28661: PUSH
28662: LD_INT 1
28664: PUSH
28665: EMPTY
28666: LIST
28667: LIST
28668: PUSH
28669: LD_INT 2
28671: PUSH
28672: LD_INT 2
28674: PUSH
28675: EMPTY
28676: LIST
28677: LIST
28678: PUSH
28679: LD_INT 1
28681: PUSH
28682: LD_INT 2
28684: PUSH
28685: EMPTY
28686: LIST
28687: LIST
28688: PUSH
28689: LD_INT 0
28691: PUSH
28692: LD_INT 2
28694: PUSH
28695: EMPTY
28696: LIST
28697: LIST
28698: PUSH
28699: LD_INT 1
28701: NEG
28702: PUSH
28703: LD_INT 1
28705: PUSH
28706: EMPTY
28707: LIST
28708: LIST
28709: PUSH
28710: LD_INT 2
28712: NEG
28713: PUSH
28714: LD_INT 0
28716: PUSH
28717: EMPTY
28718: LIST
28719: LIST
28720: PUSH
28721: LD_INT 2
28723: NEG
28724: PUSH
28725: LD_INT 1
28727: NEG
28728: PUSH
28729: EMPTY
28730: LIST
28731: LIST
28732: PUSH
28733: LD_INT 2
28735: NEG
28736: PUSH
28737: LD_INT 2
28739: NEG
28740: PUSH
28741: EMPTY
28742: LIST
28743: LIST
28744: PUSH
28745: EMPTY
28746: LIST
28747: LIST
28748: LIST
28749: LIST
28750: LIST
28751: LIST
28752: LIST
28753: LIST
28754: LIST
28755: LIST
28756: LIST
28757: LIST
28758: LIST
28759: LIST
28760: LIST
28761: LIST
28762: LIST
28763: LIST
28764: LIST
28765: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
28766: LD_ADDR_VAR 0 23
28770: PUSH
28771: LD_INT 0
28773: PUSH
28774: LD_INT 0
28776: PUSH
28777: EMPTY
28778: LIST
28779: LIST
28780: PUSH
28781: LD_INT 0
28783: PUSH
28784: LD_INT 1
28786: NEG
28787: PUSH
28788: EMPTY
28789: LIST
28790: LIST
28791: PUSH
28792: LD_INT 1
28794: PUSH
28795: LD_INT 0
28797: PUSH
28798: EMPTY
28799: LIST
28800: LIST
28801: PUSH
28802: LD_INT 1
28804: PUSH
28805: LD_INT 1
28807: PUSH
28808: EMPTY
28809: LIST
28810: LIST
28811: PUSH
28812: LD_INT 0
28814: PUSH
28815: LD_INT 1
28817: PUSH
28818: EMPTY
28819: LIST
28820: LIST
28821: PUSH
28822: LD_INT 1
28824: NEG
28825: PUSH
28826: LD_INT 0
28828: PUSH
28829: EMPTY
28830: LIST
28831: LIST
28832: PUSH
28833: LD_INT 1
28835: NEG
28836: PUSH
28837: LD_INT 1
28839: NEG
28840: PUSH
28841: EMPTY
28842: LIST
28843: LIST
28844: PUSH
28845: LD_INT 1
28847: NEG
28848: PUSH
28849: LD_INT 2
28851: NEG
28852: PUSH
28853: EMPTY
28854: LIST
28855: LIST
28856: PUSH
28857: LD_INT 0
28859: PUSH
28860: LD_INT 2
28862: NEG
28863: PUSH
28864: EMPTY
28865: LIST
28866: LIST
28867: PUSH
28868: LD_INT 1
28870: PUSH
28871: LD_INT 1
28873: NEG
28874: PUSH
28875: EMPTY
28876: LIST
28877: LIST
28878: PUSH
28879: LD_INT 2
28881: PUSH
28882: LD_INT 0
28884: PUSH
28885: EMPTY
28886: LIST
28887: LIST
28888: PUSH
28889: LD_INT 2
28891: PUSH
28892: LD_INT 1
28894: PUSH
28895: EMPTY
28896: LIST
28897: LIST
28898: PUSH
28899: LD_INT 2
28901: PUSH
28902: LD_INT 2
28904: PUSH
28905: EMPTY
28906: LIST
28907: LIST
28908: PUSH
28909: LD_INT 1
28911: PUSH
28912: LD_INT 2
28914: PUSH
28915: EMPTY
28916: LIST
28917: LIST
28918: PUSH
28919: LD_INT 0
28921: PUSH
28922: LD_INT 2
28924: PUSH
28925: EMPTY
28926: LIST
28927: LIST
28928: PUSH
28929: LD_INT 1
28931: NEG
28932: PUSH
28933: LD_INT 1
28935: PUSH
28936: EMPTY
28937: LIST
28938: LIST
28939: PUSH
28940: LD_INT 2
28942: NEG
28943: PUSH
28944: LD_INT 0
28946: PUSH
28947: EMPTY
28948: LIST
28949: LIST
28950: PUSH
28951: LD_INT 2
28953: NEG
28954: PUSH
28955: LD_INT 1
28957: NEG
28958: PUSH
28959: EMPTY
28960: LIST
28961: LIST
28962: PUSH
28963: LD_INT 2
28965: NEG
28966: PUSH
28967: LD_INT 2
28969: NEG
28970: PUSH
28971: EMPTY
28972: LIST
28973: LIST
28974: PUSH
28975: LD_INT 2
28977: NEG
28978: PUSH
28979: LD_INT 3
28981: NEG
28982: PUSH
28983: EMPTY
28984: LIST
28985: LIST
28986: PUSH
28987: LD_INT 1
28989: NEG
28990: PUSH
28991: LD_INT 3
28993: NEG
28994: PUSH
28995: EMPTY
28996: LIST
28997: LIST
28998: PUSH
28999: LD_INT 1
29001: PUSH
29002: LD_INT 2
29004: NEG
29005: PUSH
29006: EMPTY
29007: LIST
29008: LIST
29009: PUSH
29010: LD_INT 2
29012: PUSH
29013: LD_INT 1
29015: NEG
29016: PUSH
29017: EMPTY
29018: LIST
29019: LIST
29020: PUSH
29021: EMPTY
29022: LIST
29023: LIST
29024: LIST
29025: LIST
29026: LIST
29027: LIST
29028: LIST
29029: LIST
29030: LIST
29031: LIST
29032: LIST
29033: LIST
29034: LIST
29035: LIST
29036: LIST
29037: LIST
29038: LIST
29039: LIST
29040: LIST
29041: LIST
29042: LIST
29043: LIST
29044: LIST
29045: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
29046: LD_ADDR_VAR 0 24
29050: PUSH
29051: LD_INT 0
29053: PUSH
29054: LD_INT 0
29056: PUSH
29057: EMPTY
29058: LIST
29059: LIST
29060: PUSH
29061: LD_INT 0
29063: PUSH
29064: LD_INT 1
29066: NEG
29067: PUSH
29068: EMPTY
29069: LIST
29070: LIST
29071: PUSH
29072: LD_INT 1
29074: PUSH
29075: LD_INT 0
29077: PUSH
29078: EMPTY
29079: LIST
29080: LIST
29081: PUSH
29082: LD_INT 1
29084: PUSH
29085: LD_INT 1
29087: PUSH
29088: EMPTY
29089: LIST
29090: LIST
29091: PUSH
29092: LD_INT 0
29094: PUSH
29095: LD_INT 1
29097: PUSH
29098: EMPTY
29099: LIST
29100: LIST
29101: PUSH
29102: LD_INT 1
29104: NEG
29105: PUSH
29106: LD_INT 0
29108: PUSH
29109: EMPTY
29110: LIST
29111: LIST
29112: PUSH
29113: LD_INT 1
29115: NEG
29116: PUSH
29117: LD_INT 1
29119: NEG
29120: PUSH
29121: EMPTY
29122: LIST
29123: LIST
29124: PUSH
29125: LD_INT 1
29127: NEG
29128: PUSH
29129: LD_INT 2
29131: NEG
29132: PUSH
29133: EMPTY
29134: LIST
29135: LIST
29136: PUSH
29137: LD_INT 0
29139: PUSH
29140: LD_INT 2
29142: NEG
29143: PUSH
29144: EMPTY
29145: LIST
29146: LIST
29147: PUSH
29148: LD_INT 1
29150: PUSH
29151: LD_INT 1
29153: NEG
29154: PUSH
29155: EMPTY
29156: LIST
29157: LIST
29158: PUSH
29159: LD_INT 2
29161: PUSH
29162: LD_INT 0
29164: PUSH
29165: EMPTY
29166: LIST
29167: LIST
29168: PUSH
29169: LD_INT 2
29171: PUSH
29172: LD_INT 1
29174: PUSH
29175: EMPTY
29176: LIST
29177: LIST
29178: PUSH
29179: LD_INT 2
29181: PUSH
29182: LD_INT 2
29184: PUSH
29185: EMPTY
29186: LIST
29187: LIST
29188: PUSH
29189: LD_INT 1
29191: PUSH
29192: LD_INT 2
29194: PUSH
29195: EMPTY
29196: LIST
29197: LIST
29198: PUSH
29199: LD_INT 0
29201: PUSH
29202: LD_INT 2
29204: PUSH
29205: EMPTY
29206: LIST
29207: LIST
29208: PUSH
29209: LD_INT 1
29211: NEG
29212: PUSH
29213: LD_INT 1
29215: PUSH
29216: EMPTY
29217: LIST
29218: LIST
29219: PUSH
29220: LD_INT 2
29222: NEG
29223: PUSH
29224: LD_INT 0
29226: PUSH
29227: EMPTY
29228: LIST
29229: LIST
29230: PUSH
29231: LD_INT 2
29233: NEG
29234: PUSH
29235: LD_INT 1
29237: NEG
29238: PUSH
29239: EMPTY
29240: LIST
29241: LIST
29242: PUSH
29243: LD_INT 2
29245: NEG
29246: PUSH
29247: LD_INT 2
29249: NEG
29250: PUSH
29251: EMPTY
29252: LIST
29253: LIST
29254: PUSH
29255: LD_INT 1
29257: PUSH
29258: LD_INT 2
29260: NEG
29261: PUSH
29262: EMPTY
29263: LIST
29264: LIST
29265: PUSH
29266: LD_INT 2
29268: PUSH
29269: LD_INT 1
29271: NEG
29272: PUSH
29273: EMPTY
29274: LIST
29275: LIST
29276: PUSH
29277: LD_INT 3
29279: PUSH
29280: LD_INT 1
29282: PUSH
29283: EMPTY
29284: LIST
29285: LIST
29286: PUSH
29287: LD_INT 3
29289: PUSH
29290: LD_INT 2
29292: PUSH
29293: EMPTY
29294: LIST
29295: LIST
29296: PUSH
29297: EMPTY
29298: LIST
29299: LIST
29300: LIST
29301: LIST
29302: LIST
29303: LIST
29304: LIST
29305: LIST
29306: LIST
29307: LIST
29308: LIST
29309: LIST
29310: LIST
29311: LIST
29312: LIST
29313: LIST
29314: LIST
29315: LIST
29316: LIST
29317: LIST
29318: LIST
29319: LIST
29320: LIST
29321: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
29322: LD_ADDR_VAR 0 25
29326: PUSH
29327: LD_INT 0
29329: PUSH
29330: LD_INT 0
29332: PUSH
29333: EMPTY
29334: LIST
29335: LIST
29336: PUSH
29337: LD_INT 0
29339: PUSH
29340: LD_INT 1
29342: NEG
29343: PUSH
29344: EMPTY
29345: LIST
29346: LIST
29347: PUSH
29348: LD_INT 1
29350: PUSH
29351: LD_INT 0
29353: PUSH
29354: EMPTY
29355: LIST
29356: LIST
29357: PUSH
29358: LD_INT 1
29360: PUSH
29361: LD_INT 1
29363: PUSH
29364: EMPTY
29365: LIST
29366: LIST
29367: PUSH
29368: LD_INT 0
29370: PUSH
29371: LD_INT 1
29373: PUSH
29374: EMPTY
29375: LIST
29376: LIST
29377: PUSH
29378: LD_INT 1
29380: NEG
29381: PUSH
29382: LD_INT 0
29384: PUSH
29385: EMPTY
29386: LIST
29387: LIST
29388: PUSH
29389: LD_INT 1
29391: NEG
29392: PUSH
29393: LD_INT 1
29395: NEG
29396: PUSH
29397: EMPTY
29398: LIST
29399: LIST
29400: PUSH
29401: LD_INT 1
29403: NEG
29404: PUSH
29405: LD_INT 2
29407: NEG
29408: PUSH
29409: EMPTY
29410: LIST
29411: LIST
29412: PUSH
29413: LD_INT 0
29415: PUSH
29416: LD_INT 2
29418: NEG
29419: PUSH
29420: EMPTY
29421: LIST
29422: LIST
29423: PUSH
29424: LD_INT 1
29426: PUSH
29427: LD_INT 1
29429: NEG
29430: PUSH
29431: EMPTY
29432: LIST
29433: LIST
29434: PUSH
29435: LD_INT 2
29437: PUSH
29438: LD_INT 0
29440: PUSH
29441: EMPTY
29442: LIST
29443: LIST
29444: PUSH
29445: LD_INT 2
29447: PUSH
29448: LD_INT 1
29450: PUSH
29451: EMPTY
29452: LIST
29453: LIST
29454: PUSH
29455: LD_INT 2
29457: PUSH
29458: LD_INT 2
29460: PUSH
29461: EMPTY
29462: LIST
29463: LIST
29464: PUSH
29465: LD_INT 1
29467: PUSH
29468: LD_INT 2
29470: PUSH
29471: EMPTY
29472: LIST
29473: LIST
29474: PUSH
29475: LD_INT 0
29477: PUSH
29478: LD_INT 2
29480: PUSH
29481: EMPTY
29482: LIST
29483: LIST
29484: PUSH
29485: LD_INT 1
29487: NEG
29488: PUSH
29489: LD_INT 1
29491: PUSH
29492: EMPTY
29493: LIST
29494: LIST
29495: PUSH
29496: LD_INT 2
29498: NEG
29499: PUSH
29500: LD_INT 0
29502: PUSH
29503: EMPTY
29504: LIST
29505: LIST
29506: PUSH
29507: LD_INT 2
29509: NEG
29510: PUSH
29511: LD_INT 1
29513: NEG
29514: PUSH
29515: EMPTY
29516: LIST
29517: LIST
29518: PUSH
29519: LD_INT 2
29521: NEG
29522: PUSH
29523: LD_INT 2
29525: NEG
29526: PUSH
29527: EMPTY
29528: LIST
29529: LIST
29530: PUSH
29531: LD_INT 3
29533: PUSH
29534: LD_INT 1
29536: PUSH
29537: EMPTY
29538: LIST
29539: LIST
29540: PUSH
29541: LD_INT 3
29543: PUSH
29544: LD_INT 2
29546: PUSH
29547: EMPTY
29548: LIST
29549: LIST
29550: PUSH
29551: LD_INT 2
29553: PUSH
29554: LD_INT 3
29556: PUSH
29557: EMPTY
29558: LIST
29559: LIST
29560: PUSH
29561: LD_INT 1
29563: PUSH
29564: LD_INT 3
29566: PUSH
29567: EMPTY
29568: LIST
29569: LIST
29570: PUSH
29571: EMPTY
29572: LIST
29573: LIST
29574: LIST
29575: LIST
29576: LIST
29577: LIST
29578: LIST
29579: LIST
29580: LIST
29581: LIST
29582: LIST
29583: LIST
29584: LIST
29585: LIST
29586: LIST
29587: LIST
29588: LIST
29589: LIST
29590: LIST
29591: LIST
29592: LIST
29593: LIST
29594: LIST
29595: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
29596: LD_ADDR_VAR 0 26
29600: PUSH
29601: LD_INT 0
29603: PUSH
29604: LD_INT 0
29606: PUSH
29607: EMPTY
29608: LIST
29609: LIST
29610: PUSH
29611: LD_INT 0
29613: PUSH
29614: LD_INT 1
29616: NEG
29617: PUSH
29618: EMPTY
29619: LIST
29620: LIST
29621: PUSH
29622: LD_INT 1
29624: PUSH
29625: LD_INT 0
29627: PUSH
29628: EMPTY
29629: LIST
29630: LIST
29631: PUSH
29632: LD_INT 1
29634: PUSH
29635: LD_INT 1
29637: PUSH
29638: EMPTY
29639: LIST
29640: LIST
29641: PUSH
29642: LD_INT 0
29644: PUSH
29645: LD_INT 1
29647: PUSH
29648: EMPTY
29649: LIST
29650: LIST
29651: PUSH
29652: LD_INT 1
29654: NEG
29655: PUSH
29656: LD_INT 0
29658: PUSH
29659: EMPTY
29660: LIST
29661: LIST
29662: PUSH
29663: LD_INT 1
29665: NEG
29666: PUSH
29667: LD_INT 1
29669: NEG
29670: PUSH
29671: EMPTY
29672: LIST
29673: LIST
29674: PUSH
29675: LD_INT 1
29677: NEG
29678: PUSH
29679: LD_INT 2
29681: NEG
29682: PUSH
29683: EMPTY
29684: LIST
29685: LIST
29686: PUSH
29687: LD_INT 0
29689: PUSH
29690: LD_INT 2
29692: NEG
29693: PUSH
29694: EMPTY
29695: LIST
29696: LIST
29697: PUSH
29698: LD_INT 1
29700: PUSH
29701: LD_INT 1
29703: NEG
29704: PUSH
29705: EMPTY
29706: LIST
29707: LIST
29708: PUSH
29709: LD_INT 2
29711: PUSH
29712: LD_INT 0
29714: PUSH
29715: EMPTY
29716: LIST
29717: LIST
29718: PUSH
29719: LD_INT 2
29721: PUSH
29722: LD_INT 1
29724: PUSH
29725: EMPTY
29726: LIST
29727: LIST
29728: PUSH
29729: LD_INT 2
29731: PUSH
29732: LD_INT 2
29734: PUSH
29735: EMPTY
29736: LIST
29737: LIST
29738: PUSH
29739: LD_INT 1
29741: PUSH
29742: LD_INT 2
29744: PUSH
29745: EMPTY
29746: LIST
29747: LIST
29748: PUSH
29749: LD_INT 0
29751: PUSH
29752: LD_INT 2
29754: PUSH
29755: EMPTY
29756: LIST
29757: LIST
29758: PUSH
29759: LD_INT 1
29761: NEG
29762: PUSH
29763: LD_INT 1
29765: PUSH
29766: EMPTY
29767: LIST
29768: LIST
29769: PUSH
29770: LD_INT 2
29772: NEG
29773: PUSH
29774: LD_INT 0
29776: PUSH
29777: EMPTY
29778: LIST
29779: LIST
29780: PUSH
29781: LD_INT 2
29783: NEG
29784: PUSH
29785: LD_INT 1
29787: NEG
29788: PUSH
29789: EMPTY
29790: LIST
29791: LIST
29792: PUSH
29793: LD_INT 2
29795: NEG
29796: PUSH
29797: LD_INT 2
29799: NEG
29800: PUSH
29801: EMPTY
29802: LIST
29803: LIST
29804: PUSH
29805: LD_INT 2
29807: PUSH
29808: LD_INT 3
29810: PUSH
29811: EMPTY
29812: LIST
29813: LIST
29814: PUSH
29815: LD_INT 1
29817: PUSH
29818: LD_INT 3
29820: PUSH
29821: EMPTY
29822: LIST
29823: LIST
29824: PUSH
29825: LD_INT 1
29827: NEG
29828: PUSH
29829: LD_INT 2
29831: PUSH
29832: EMPTY
29833: LIST
29834: LIST
29835: PUSH
29836: LD_INT 2
29838: NEG
29839: PUSH
29840: LD_INT 1
29842: PUSH
29843: EMPTY
29844: LIST
29845: LIST
29846: PUSH
29847: EMPTY
29848: LIST
29849: LIST
29850: LIST
29851: LIST
29852: LIST
29853: LIST
29854: LIST
29855: LIST
29856: LIST
29857: LIST
29858: LIST
29859: LIST
29860: LIST
29861: LIST
29862: LIST
29863: LIST
29864: LIST
29865: LIST
29866: LIST
29867: LIST
29868: LIST
29869: LIST
29870: LIST
29871: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29872: LD_ADDR_VAR 0 27
29876: PUSH
29877: LD_INT 0
29879: PUSH
29880: LD_INT 0
29882: PUSH
29883: EMPTY
29884: LIST
29885: LIST
29886: PUSH
29887: LD_INT 0
29889: PUSH
29890: LD_INT 1
29892: NEG
29893: PUSH
29894: EMPTY
29895: LIST
29896: LIST
29897: PUSH
29898: LD_INT 1
29900: PUSH
29901: LD_INT 0
29903: PUSH
29904: EMPTY
29905: LIST
29906: LIST
29907: PUSH
29908: LD_INT 1
29910: PUSH
29911: LD_INT 1
29913: PUSH
29914: EMPTY
29915: LIST
29916: LIST
29917: PUSH
29918: LD_INT 0
29920: PUSH
29921: LD_INT 1
29923: PUSH
29924: EMPTY
29925: LIST
29926: LIST
29927: PUSH
29928: LD_INT 1
29930: NEG
29931: PUSH
29932: LD_INT 0
29934: PUSH
29935: EMPTY
29936: LIST
29937: LIST
29938: PUSH
29939: LD_INT 1
29941: NEG
29942: PUSH
29943: LD_INT 1
29945: NEG
29946: PUSH
29947: EMPTY
29948: LIST
29949: LIST
29950: PUSH
29951: LD_INT 1
29953: NEG
29954: PUSH
29955: LD_INT 2
29957: NEG
29958: PUSH
29959: EMPTY
29960: LIST
29961: LIST
29962: PUSH
29963: LD_INT 0
29965: PUSH
29966: LD_INT 2
29968: NEG
29969: PUSH
29970: EMPTY
29971: LIST
29972: LIST
29973: PUSH
29974: LD_INT 1
29976: PUSH
29977: LD_INT 1
29979: NEG
29980: PUSH
29981: EMPTY
29982: LIST
29983: LIST
29984: PUSH
29985: LD_INT 2
29987: PUSH
29988: LD_INT 0
29990: PUSH
29991: EMPTY
29992: LIST
29993: LIST
29994: PUSH
29995: LD_INT 2
29997: PUSH
29998: LD_INT 1
30000: PUSH
30001: EMPTY
30002: LIST
30003: LIST
30004: PUSH
30005: LD_INT 2
30007: PUSH
30008: LD_INT 2
30010: PUSH
30011: EMPTY
30012: LIST
30013: LIST
30014: PUSH
30015: LD_INT 1
30017: PUSH
30018: LD_INT 2
30020: PUSH
30021: EMPTY
30022: LIST
30023: LIST
30024: PUSH
30025: LD_INT 0
30027: PUSH
30028: LD_INT 2
30030: PUSH
30031: EMPTY
30032: LIST
30033: LIST
30034: PUSH
30035: LD_INT 1
30037: NEG
30038: PUSH
30039: LD_INT 1
30041: PUSH
30042: EMPTY
30043: LIST
30044: LIST
30045: PUSH
30046: LD_INT 2
30048: NEG
30049: PUSH
30050: LD_INT 0
30052: PUSH
30053: EMPTY
30054: LIST
30055: LIST
30056: PUSH
30057: LD_INT 2
30059: NEG
30060: PUSH
30061: LD_INT 1
30063: NEG
30064: PUSH
30065: EMPTY
30066: LIST
30067: LIST
30068: PUSH
30069: LD_INT 2
30071: NEG
30072: PUSH
30073: LD_INT 2
30075: NEG
30076: PUSH
30077: EMPTY
30078: LIST
30079: LIST
30080: PUSH
30081: LD_INT 1
30083: NEG
30084: PUSH
30085: LD_INT 2
30087: PUSH
30088: EMPTY
30089: LIST
30090: LIST
30091: PUSH
30092: LD_INT 2
30094: NEG
30095: PUSH
30096: LD_INT 1
30098: PUSH
30099: EMPTY
30100: LIST
30101: LIST
30102: PUSH
30103: LD_INT 3
30105: NEG
30106: PUSH
30107: LD_INT 1
30109: NEG
30110: PUSH
30111: EMPTY
30112: LIST
30113: LIST
30114: PUSH
30115: LD_INT 3
30117: NEG
30118: PUSH
30119: LD_INT 2
30121: NEG
30122: PUSH
30123: EMPTY
30124: LIST
30125: LIST
30126: PUSH
30127: EMPTY
30128: LIST
30129: LIST
30130: LIST
30131: LIST
30132: LIST
30133: LIST
30134: LIST
30135: LIST
30136: LIST
30137: LIST
30138: LIST
30139: LIST
30140: LIST
30141: LIST
30142: LIST
30143: LIST
30144: LIST
30145: LIST
30146: LIST
30147: LIST
30148: LIST
30149: LIST
30150: LIST
30151: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
30152: LD_ADDR_VAR 0 28
30156: PUSH
30157: LD_INT 0
30159: PUSH
30160: LD_INT 0
30162: PUSH
30163: EMPTY
30164: LIST
30165: LIST
30166: PUSH
30167: LD_INT 0
30169: PUSH
30170: LD_INT 1
30172: NEG
30173: PUSH
30174: EMPTY
30175: LIST
30176: LIST
30177: PUSH
30178: LD_INT 1
30180: PUSH
30181: LD_INT 0
30183: PUSH
30184: EMPTY
30185: LIST
30186: LIST
30187: PUSH
30188: LD_INT 1
30190: PUSH
30191: LD_INT 1
30193: PUSH
30194: EMPTY
30195: LIST
30196: LIST
30197: PUSH
30198: LD_INT 0
30200: PUSH
30201: LD_INT 1
30203: PUSH
30204: EMPTY
30205: LIST
30206: LIST
30207: PUSH
30208: LD_INT 1
30210: NEG
30211: PUSH
30212: LD_INT 0
30214: PUSH
30215: EMPTY
30216: LIST
30217: LIST
30218: PUSH
30219: LD_INT 1
30221: NEG
30222: PUSH
30223: LD_INT 1
30225: NEG
30226: PUSH
30227: EMPTY
30228: LIST
30229: LIST
30230: PUSH
30231: LD_INT 1
30233: NEG
30234: PUSH
30235: LD_INT 2
30237: NEG
30238: PUSH
30239: EMPTY
30240: LIST
30241: LIST
30242: PUSH
30243: LD_INT 0
30245: PUSH
30246: LD_INT 2
30248: NEG
30249: PUSH
30250: EMPTY
30251: LIST
30252: LIST
30253: PUSH
30254: LD_INT 1
30256: PUSH
30257: LD_INT 1
30259: NEG
30260: PUSH
30261: EMPTY
30262: LIST
30263: LIST
30264: PUSH
30265: LD_INT 2
30267: PUSH
30268: LD_INT 0
30270: PUSH
30271: EMPTY
30272: LIST
30273: LIST
30274: PUSH
30275: LD_INT 2
30277: PUSH
30278: LD_INT 1
30280: PUSH
30281: EMPTY
30282: LIST
30283: LIST
30284: PUSH
30285: LD_INT 2
30287: PUSH
30288: LD_INT 2
30290: PUSH
30291: EMPTY
30292: LIST
30293: LIST
30294: PUSH
30295: LD_INT 1
30297: PUSH
30298: LD_INT 2
30300: PUSH
30301: EMPTY
30302: LIST
30303: LIST
30304: PUSH
30305: LD_INT 0
30307: PUSH
30308: LD_INT 2
30310: PUSH
30311: EMPTY
30312: LIST
30313: LIST
30314: PUSH
30315: LD_INT 1
30317: NEG
30318: PUSH
30319: LD_INT 1
30321: PUSH
30322: EMPTY
30323: LIST
30324: LIST
30325: PUSH
30326: LD_INT 2
30328: NEG
30329: PUSH
30330: LD_INT 0
30332: PUSH
30333: EMPTY
30334: LIST
30335: LIST
30336: PUSH
30337: LD_INT 2
30339: NEG
30340: PUSH
30341: LD_INT 1
30343: NEG
30344: PUSH
30345: EMPTY
30346: LIST
30347: LIST
30348: PUSH
30349: LD_INT 2
30351: NEG
30352: PUSH
30353: LD_INT 2
30355: NEG
30356: PUSH
30357: EMPTY
30358: LIST
30359: LIST
30360: PUSH
30361: LD_INT 2
30363: NEG
30364: PUSH
30365: LD_INT 3
30367: NEG
30368: PUSH
30369: EMPTY
30370: LIST
30371: LIST
30372: PUSH
30373: LD_INT 1
30375: NEG
30376: PUSH
30377: LD_INT 3
30379: NEG
30380: PUSH
30381: EMPTY
30382: LIST
30383: LIST
30384: PUSH
30385: LD_INT 3
30387: NEG
30388: PUSH
30389: LD_INT 1
30391: NEG
30392: PUSH
30393: EMPTY
30394: LIST
30395: LIST
30396: PUSH
30397: LD_INT 3
30399: NEG
30400: PUSH
30401: LD_INT 2
30403: NEG
30404: PUSH
30405: EMPTY
30406: LIST
30407: LIST
30408: PUSH
30409: EMPTY
30410: LIST
30411: LIST
30412: LIST
30413: LIST
30414: LIST
30415: LIST
30416: LIST
30417: LIST
30418: LIST
30419: LIST
30420: LIST
30421: LIST
30422: LIST
30423: LIST
30424: LIST
30425: LIST
30426: LIST
30427: LIST
30428: LIST
30429: LIST
30430: LIST
30431: LIST
30432: LIST
30433: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
30434: LD_ADDR_VAR 0 29
30438: PUSH
30439: LD_INT 0
30441: PUSH
30442: LD_INT 0
30444: PUSH
30445: EMPTY
30446: LIST
30447: LIST
30448: PUSH
30449: LD_INT 0
30451: PUSH
30452: LD_INT 1
30454: NEG
30455: PUSH
30456: EMPTY
30457: LIST
30458: LIST
30459: PUSH
30460: LD_INT 1
30462: PUSH
30463: LD_INT 0
30465: PUSH
30466: EMPTY
30467: LIST
30468: LIST
30469: PUSH
30470: LD_INT 1
30472: PUSH
30473: LD_INT 1
30475: PUSH
30476: EMPTY
30477: LIST
30478: LIST
30479: PUSH
30480: LD_INT 0
30482: PUSH
30483: LD_INT 1
30485: PUSH
30486: EMPTY
30487: LIST
30488: LIST
30489: PUSH
30490: LD_INT 1
30492: NEG
30493: PUSH
30494: LD_INT 0
30496: PUSH
30497: EMPTY
30498: LIST
30499: LIST
30500: PUSH
30501: LD_INT 1
30503: NEG
30504: PUSH
30505: LD_INT 1
30507: NEG
30508: PUSH
30509: EMPTY
30510: LIST
30511: LIST
30512: PUSH
30513: LD_INT 1
30515: NEG
30516: PUSH
30517: LD_INT 2
30519: NEG
30520: PUSH
30521: EMPTY
30522: LIST
30523: LIST
30524: PUSH
30525: LD_INT 0
30527: PUSH
30528: LD_INT 2
30530: NEG
30531: PUSH
30532: EMPTY
30533: LIST
30534: LIST
30535: PUSH
30536: LD_INT 1
30538: PUSH
30539: LD_INT 1
30541: NEG
30542: PUSH
30543: EMPTY
30544: LIST
30545: LIST
30546: PUSH
30547: LD_INT 2
30549: PUSH
30550: LD_INT 0
30552: PUSH
30553: EMPTY
30554: LIST
30555: LIST
30556: PUSH
30557: LD_INT 2
30559: PUSH
30560: LD_INT 1
30562: PUSH
30563: EMPTY
30564: LIST
30565: LIST
30566: PUSH
30567: LD_INT 1
30569: PUSH
30570: LD_INT 2
30572: PUSH
30573: EMPTY
30574: LIST
30575: LIST
30576: PUSH
30577: LD_INT 0
30579: PUSH
30580: LD_INT 2
30582: PUSH
30583: EMPTY
30584: LIST
30585: LIST
30586: PUSH
30587: LD_INT 1
30589: NEG
30590: PUSH
30591: LD_INT 1
30593: PUSH
30594: EMPTY
30595: LIST
30596: LIST
30597: PUSH
30598: LD_INT 2
30600: NEG
30601: PUSH
30602: LD_INT 1
30604: NEG
30605: PUSH
30606: EMPTY
30607: LIST
30608: LIST
30609: PUSH
30610: LD_INT 2
30612: NEG
30613: PUSH
30614: LD_INT 2
30616: NEG
30617: PUSH
30618: EMPTY
30619: LIST
30620: LIST
30621: PUSH
30622: LD_INT 2
30624: NEG
30625: PUSH
30626: LD_INT 3
30628: NEG
30629: PUSH
30630: EMPTY
30631: LIST
30632: LIST
30633: PUSH
30634: LD_INT 2
30636: PUSH
30637: LD_INT 1
30639: NEG
30640: PUSH
30641: EMPTY
30642: LIST
30643: LIST
30644: PUSH
30645: LD_INT 3
30647: PUSH
30648: LD_INT 1
30650: PUSH
30651: EMPTY
30652: LIST
30653: LIST
30654: PUSH
30655: LD_INT 1
30657: PUSH
30658: LD_INT 3
30660: PUSH
30661: EMPTY
30662: LIST
30663: LIST
30664: PUSH
30665: LD_INT 1
30667: NEG
30668: PUSH
30669: LD_INT 2
30671: PUSH
30672: EMPTY
30673: LIST
30674: LIST
30675: PUSH
30676: LD_INT 3
30678: NEG
30679: PUSH
30680: LD_INT 2
30682: NEG
30683: PUSH
30684: EMPTY
30685: LIST
30686: LIST
30687: PUSH
30688: EMPTY
30689: LIST
30690: LIST
30691: LIST
30692: LIST
30693: LIST
30694: LIST
30695: LIST
30696: LIST
30697: LIST
30698: LIST
30699: LIST
30700: LIST
30701: LIST
30702: LIST
30703: LIST
30704: LIST
30705: LIST
30706: LIST
30707: LIST
30708: LIST
30709: LIST
30710: LIST
30711: LIST
30712: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30713: LD_ADDR_VAR 0 30
30717: PUSH
30718: LD_INT 0
30720: PUSH
30721: LD_INT 0
30723: PUSH
30724: EMPTY
30725: LIST
30726: LIST
30727: PUSH
30728: LD_INT 0
30730: PUSH
30731: LD_INT 1
30733: NEG
30734: PUSH
30735: EMPTY
30736: LIST
30737: LIST
30738: PUSH
30739: LD_INT 1
30741: PUSH
30742: LD_INT 0
30744: PUSH
30745: EMPTY
30746: LIST
30747: LIST
30748: PUSH
30749: LD_INT 1
30751: PUSH
30752: LD_INT 1
30754: PUSH
30755: EMPTY
30756: LIST
30757: LIST
30758: PUSH
30759: LD_INT 0
30761: PUSH
30762: LD_INT 1
30764: PUSH
30765: EMPTY
30766: LIST
30767: LIST
30768: PUSH
30769: LD_INT 1
30771: NEG
30772: PUSH
30773: LD_INT 0
30775: PUSH
30776: EMPTY
30777: LIST
30778: LIST
30779: PUSH
30780: LD_INT 1
30782: NEG
30783: PUSH
30784: LD_INT 1
30786: NEG
30787: PUSH
30788: EMPTY
30789: LIST
30790: LIST
30791: PUSH
30792: LD_INT 1
30794: NEG
30795: PUSH
30796: LD_INT 2
30798: NEG
30799: PUSH
30800: EMPTY
30801: LIST
30802: LIST
30803: PUSH
30804: LD_INT 0
30806: PUSH
30807: LD_INT 2
30809: NEG
30810: PUSH
30811: EMPTY
30812: LIST
30813: LIST
30814: PUSH
30815: LD_INT 1
30817: PUSH
30818: LD_INT 1
30820: NEG
30821: PUSH
30822: EMPTY
30823: LIST
30824: LIST
30825: PUSH
30826: LD_INT 2
30828: PUSH
30829: LD_INT 0
30831: PUSH
30832: EMPTY
30833: LIST
30834: LIST
30835: PUSH
30836: LD_INT 2
30838: PUSH
30839: LD_INT 1
30841: PUSH
30842: EMPTY
30843: LIST
30844: LIST
30845: PUSH
30846: LD_INT 2
30848: PUSH
30849: LD_INT 2
30851: PUSH
30852: EMPTY
30853: LIST
30854: LIST
30855: PUSH
30856: LD_INT 1
30858: PUSH
30859: LD_INT 2
30861: PUSH
30862: EMPTY
30863: LIST
30864: LIST
30865: PUSH
30866: LD_INT 1
30868: NEG
30869: PUSH
30870: LD_INT 1
30872: PUSH
30873: EMPTY
30874: LIST
30875: LIST
30876: PUSH
30877: LD_INT 2
30879: NEG
30880: PUSH
30881: LD_INT 0
30883: PUSH
30884: EMPTY
30885: LIST
30886: LIST
30887: PUSH
30888: LD_INT 2
30890: NEG
30891: PUSH
30892: LD_INT 1
30894: NEG
30895: PUSH
30896: EMPTY
30897: LIST
30898: LIST
30899: PUSH
30900: LD_INT 1
30902: NEG
30903: PUSH
30904: LD_INT 3
30906: NEG
30907: PUSH
30908: EMPTY
30909: LIST
30910: LIST
30911: PUSH
30912: LD_INT 1
30914: PUSH
30915: LD_INT 2
30917: NEG
30918: PUSH
30919: EMPTY
30920: LIST
30921: LIST
30922: PUSH
30923: LD_INT 3
30925: PUSH
30926: LD_INT 2
30928: PUSH
30929: EMPTY
30930: LIST
30931: LIST
30932: PUSH
30933: LD_INT 2
30935: PUSH
30936: LD_INT 3
30938: PUSH
30939: EMPTY
30940: LIST
30941: LIST
30942: PUSH
30943: LD_INT 2
30945: NEG
30946: PUSH
30947: LD_INT 1
30949: PUSH
30950: EMPTY
30951: LIST
30952: LIST
30953: PUSH
30954: LD_INT 3
30956: NEG
30957: PUSH
30958: LD_INT 1
30960: NEG
30961: PUSH
30962: EMPTY
30963: LIST
30964: LIST
30965: PUSH
30966: EMPTY
30967: LIST
30968: LIST
30969: LIST
30970: LIST
30971: LIST
30972: LIST
30973: LIST
30974: LIST
30975: LIST
30976: LIST
30977: LIST
30978: LIST
30979: LIST
30980: LIST
30981: LIST
30982: LIST
30983: LIST
30984: LIST
30985: LIST
30986: LIST
30987: LIST
30988: LIST
30989: LIST
30990: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
30991: LD_ADDR_VAR 0 31
30995: PUSH
30996: LD_INT 0
30998: PUSH
30999: LD_INT 0
31001: PUSH
31002: EMPTY
31003: LIST
31004: LIST
31005: PUSH
31006: LD_INT 0
31008: PUSH
31009: LD_INT 1
31011: NEG
31012: PUSH
31013: EMPTY
31014: LIST
31015: LIST
31016: PUSH
31017: LD_INT 1
31019: PUSH
31020: LD_INT 0
31022: PUSH
31023: EMPTY
31024: LIST
31025: LIST
31026: PUSH
31027: LD_INT 1
31029: PUSH
31030: LD_INT 1
31032: PUSH
31033: EMPTY
31034: LIST
31035: LIST
31036: PUSH
31037: LD_INT 0
31039: PUSH
31040: LD_INT 1
31042: PUSH
31043: EMPTY
31044: LIST
31045: LIST
31046: PUSH
31047: LD_INT 1
31049: NEG
31050: PUSH
31051: LD_INT 0
31053: PUSH
31054: EMPTY
31055: LIST
31056: LIST
31057: PUSH
31058: LD_INT 1
31060: NEG
31061: PUSH
31062: LD_INT 1
31064: NEG
31065: PUSH
31066: EMPTY
31067: LIST
31068: LIST
31069: PUSH
31070: LD_INT 1
31072: NEG
31073: PUSH
31074: LD_INT 2
31076: NEG
31077: PUSH
31078: EMPTY
31079: LIST
31080: LIST
31081: PUSH
31082: LD_INT 1
31084: PUSH
31085: LD_INT 1
31087: NEG
31088: PUSH
31089: EMPTY
31090: LIST
31091: LIST
31092: PUSH
31093: LD_INT 2
31095: PUSH
31096: LD_INT 0
31098: PUSH
31099: EMPTY
31100: LIST
31101: LIST
31102: PUSH
31103: LD_INT 2
31105: PUSH
31106: LD_INT 1
31108: PUSH
31109: EMPTY
31110: LIST
31111: LIST
31112: PUSH
31113: LD_INT 2
31115: PUSH
31116: LD_INT 2
31118: PUSH
31119: EMPTY
31120: LIST
31121: LIST
31122: PUSH
31123: LD_INT 1
31125: PUSH
31126: LD_INT 2
31128: PUSH
31129: EMPTY
31130: LIST
31131: LIST
31132: PUSH
31133: LD_INT 0
31135: PUSH
31136: LD_INT 2
31138: PUSH
31139: EMPTY
31140: LIST
31141: LIST
31142: PUSH
31143: LD_INT 1
31145: NEG
31146: PUSH
31147: LD_INT 1
31149: PUSH
31150: EMPTY
31151: LIST
31152: LIST
31153: PUSH
31154: LD_INT 2
31156: NEG
31157: PUSH
31158: LD_INT 1
31160: NEG
31161: PUSH
31162: EMPTY
31163: LIST
31164: LIST
31165: PUSH
31166: LD_INT 2
31168: NEG
31169: PUSH
31170: LD_INT 2
31172: NEG
31173: PUSH
31174: EMPTY
31175: LIST
31176: LIST
31177: PUSH
31178: LD_INT 2
31180: NEG
31181: PUSH
31182: LD_INT 3
31184: NEG
31185: PUSH
31186: EMPTY
31187: LIST
31188: LIST
31189: PUSH
31190: LD_INT 2
31192: PUSH
31193: LD_INT 1
31195: NEG
31196: PUSH
31197: EMPTY
31198: LIST
31199: LIST
31200: PUSH
31201: LD_INT 3
31203: PUSH
31204: LD_INT 1
31206: PUSH
31207: EMPTY
31208: LIST
31209: LIST
31210: PUSH
31211: LD_INT 1
31213: PUSH
31214: LD_INT 3
31216: PUSH
31217: EMPTY
31218: LIST
31219: LIST
31220: PUSH
31221: LD_INT 1
31223: NEG
31224: PUSH
31225: LD_INT 2
31227: PUSH
31228: EMPTY
31229: LIST
31230: LIST
31231: PUSH
31232: LD_INT 3
31234: NEG
31235: PUSH
31236: LD_INT 2
31238: NEG
31239: PUSH
31240: EMPTY
31241: LIST
31242: LIST
31243: PUSH
31244: EMPTY
31245: LIST
31246: LIST
31247: LIST
31248: LIST
31249: LIST
31250: LIST
31251: LIST
31252: LIST
31253: LIST
31254: LIST
31255: LIST
31256: LIST
31257: LIST
31258: LIST
31259: LIST
31260: LIST
31261: LIST
31262: LIST
31263: LIST
31264: LIST
31265: LIST
31266: LIST
31267: LIST
31268: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31269: LD_ADDR_VAR 0 32
31273: PUSH
31274: LD_INT 0
31276: PUSH
31277: LD_INT 0
31279: PUSH
31280: EMPTY
31281: LIST
31282: LIST
31283: PUSH
31284: LD_INT 0
31286: PUSH
31287: LD_INT 1
31289: NEG
31290: PUSH
31291: EMPTY
31292: LIST
31293: LIST
31294: PUSH
31295: LD_INT 1
31297: PUSH
31298: LD_INT 0
31300: PUSH
31301: EMPTY
31302: LIST
31303: LIST
31304: PUSH
31305: LD_INT 1
31307: PUSH
31308: LD_INT 1
31310: PUSH
31311: EMPTY
31312: LIST
31313: LIST
31314: PUSH
31315: LD_INT 0
31317: PUSH
31318: LD_INT 1
31320: PUSH
31321: EMPTY
31322: LIST
31323: LIST
31324: PUSH
31325: LD_INT 1
31327: NEG
31328: PUSH
31329: LD_INT 0
31331: PUSH
31332: EMPTY
31333: LIST
31334: LIST
31335: PUSH
31336: LD_INT 1
31338: NEG
31339: PUSH
31340: LD_INT 1
31342: NEG
31343: PUSH
31344: EMPTY
31345: LIST
31346: LIST
31347: PUSH
31348: LD_INT 1
31350: NEG
31351: PUSH
31352: LD_INT 2
31354: NEG
31355: PUSH
31356: EMPTY
31357: LIST
31358: LIST
31359: PUSH
31360: LD_INT 0
31362: PUSH
31363: LD_INT 2
31365: NEG
31366: PUSH
31367: EMPTY
31368: LIST
31369: LIST
31370: PUSH
31371: LD_INT 1
31373: PUSH
31374: LD_INT 1
31376: NEG
31377: PUSH
31378: EMPTY
31379: LIST
31380: LIST
31381: PUSH
31382: LD_INT 2
31384: PUSH
31385: LD_INT 1
31387: PUSH
31388: EMPTY
31389: LIST
31390: LIST
31391: PUSH
31392: LD_INT 2
31394: PUSH
31395: LD_INT 2
31397: PUSH
31398: EMPTY
31399: LIST
31400: LIST
31401: PUSH
31402: LD_INT 1
31404: PUSH
31405: LD_INT 2
31407: PUSH
31408: EMPTY
31409: LIST
31410: LIST
31411: PUSH
31412: LD_INT 0
31414: PUSH
31415: LD_INT 2
31417: PUSH
31418: EMPTY
31419: LIST
31420: LIST
31421: PUSH
31422: LD_INT 1
31424: NEG
31425: PUSH
31426: LD_INT 1
31428: PUSH
31429: EMPTY
31430: LIST
31431: LIST
31432: PUSH
31433: LD_INT 2
31435: NEG
31436: PUSH
31437: LD_INT 0
31439: PUSH
31440: EMPTY
31441: LIST
31442: LIST
31443: PUSH
31444: LD_INT 2
31446: NEG
31447: PUSH
31448: LD_INT 1
31450: NEG
31451: PUSH
31452: EMPTY
31453: LIST
31454: LIST
31455: PUSH
31456: LD_INT 1
31458: NEG
31459: PUSH
31460: LD_INT 3
31462: NEG
31463: PUSH
31464: EMPTY
31465: LIST
31466: LIST
31467: PUSH
31468: LD_INT 1
31470: PUSH
31471: LD_INT 2
31473: NEG
31474: PUSH
31475: EMPTY
31476: LIST
31477: LIST
31478: PUSH
31479: LD_INT 3
31481: PUSH
31482: LD_INT 2
31484: PUSH
31485: EMPTY
31486: LIST
31487: LIST
31488: PUSH
31489: LD_INT 2
31491: PUSH
31492: LD_INT 3
31494: PUSH
31495: EMPTY
31496: LIST
31497: LIST
31498: PUSH
31499: LD_INT 2
31501: NEG
31502: PUSH
31503: LD_INT 1
31505: PUSH
31506: EMPTY
31507: LIST
31508: LIST
31509: PUSH
31510: LD_INT 3
31512: NEG
31513: PUSH
31514: LD_INT 1
31516: NEG
31517: PUSH
31518: EMPTY
31519: LIST
31520: LIST
31521: PUSH
31522: EMPTY
31523: LIST
31524: LIST
31525: LIST
31526: LIST
31527: LIST
31528: LIST
31529: LIST
31530: LIST
31531: LIST
31532: LIST
31533: LIST
31534: LIST
31535: LIST
31536: LIST
31537: LIST
31538: LIST
31539: LIST
31540: LIST
31541: LIST
31542: LIST
31543: LIST
31544: LIST
31545: LIST
31546: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
31547: LD_ADDR_VAR 0 33
31551: PUSH
31552: LD_INT 0
31554: PUSH
31555: LD_INT 0
31557: PUSH
31558: EMPTY
31559: LIST
31560: LIST
31561: PUSH
31562: LD_INT 0
31564: PUSH
31565: LD_INT 1
31567: NEG
31568: PUSH
31569: EMPTY
31570: LIST
31571: LIST
31572: PUSH
31573: LD_INT 1
31575: PUSH
31576: LD_INT 0
31578: PUSH
31579: EMPTY
31580: LIST
31581: LIST
31582: PUSH
31583: LD_INT 1
31585: PUSH
31586: LD_INT 1
31588: PUSH
31589: EMPTY
31590: LIST
31591: LIST
31592: PUSH
31593: LD_INT 0
31595: PUSH
31596: LD_INT 1
31598: PUSH
31599: EMPTY
31600: LIST
31601: LIST
31602: PUSH
31603: LD_INT 1
31605: NEG
31606: PUSH
31607: LD_INT 0
31609: PUSH
31610: EMPTY
31611: LIST
31612: LIST
31613: PUSH
31614: LD_INT 1
31616: NEG
31617: PUSH
31618: LD_INT 1
31620: NEG
31621: PUSH
31622: EMPTY
31623: LIST
31624: LIST
31625: PUSH
31626: LD_INT 1
31628: NEG
31629: PUSH
31630: LD_INT 2
31632: NEG
31633: PUSH
31634: EMPTY
31635: LIST
31636: LIST
31637: PUSH
31638: LD_INT 1
31640: PUSH
31641: LD_INT 1
31643: NEG
31644: PUSH
31645: EMPTY
31646: LIST
31647: LIST
31648: PUSH
31649: LD_INT 2
31651: PUSH
31652: LD_INT 0
31654: PUSH
31655: EMPTY
31656: LIST
31657: LIST
31658: PUSH
31659: LD_INT 2
31661: PUSH
31662: LD_INT 1
31664: PUSH
31665: EMPTY
31666: LIST
31667: LIST
31668: PUSH
31669: LD_INT 1
31671: PUSH
31672: LD_INT 2
31674: PUSH
31675: EMPTY
31676: LIST
31677: LIST
31678: PUSH
31679: LD_INT 0
31681: PUSH
31682: LD_INT 2
31684: PUSH
31685: EMPTY
31686: LIST
31687: LIST
31688: PUSH
31689: LD_INT 1
31691: NEG
31692: PUSH
31693: LD_INT 1
31695: PUSH
31696: EMPTY
31697: LIST
31698: LIST
31699: PUSH
31700: LD_INT 2
31702: NEG
31703: PUSH
31704: LD_INT 0
31706: PUSH
31707: EMPTY
31708: LIST
31709: LIST
31710: PUSH
31711: LD_INT 2
31713: NEG
31714: PUSH
31715: LD_INT 1
31717: NEG
31718: PUSH
31719: EMPTY
31720: LIST
31721: LIST
31722: PUSH
31723: LD_INT 2
31725: NEG
31726: PUSH
31727: LD_INT 2
31729: NEG
31730: PUSH
31731: EMPTY
31732: LIST
31733: LIST
31734: PUSH
31735: LD_INT 2
31737: NEG
31738: PUSH
31739: LD_INT 3
31741: NEG
31742: PUSH
31743: EMPTY
31744: LIST
31745: LIST
31746: PUSH
31747: LD_INT 2
31749: PUSH
31750: LD_INT 1
31752: NEG
31753: PUSH
31754: EMPTY
31755: LIST
31756: LIST
31757: PUSH
31758: LD_INT 3
31760: PUSH
31761: LD_INT 1
31763: PUSH
31764: EMPTY
31765: LIST
31766: LIST
31767: PUSH
31768: LD_INT 1
31770: PUSH
31771: LD_INT 3
31773: PUSH
31774: EMPTY
31775: LIST
31776: LIST
31777: PUSH
31778: LD_INT 1
31780: NEG
31781: PUSH
31782: LD_INT 2
31784: PUSH
31785: EMPTY
31786: LIST
31787: LIST
31788: PUSH
31789: LD_INT 3
31791: NEG
31792: PUSH
31793: LD_INT 2
31795: NEG
31796: PUSH
31797: EMPTY
31798: LIST
31799: LIST
31800: PUSH
31801: EMPTY
31802: LIST
31803: LIST
31804: LIST
31805: LIST
31806: LIST
31807: LIST
31808: LIST
31809: LIST
31810: LIST
31811: LIST
31812: LIST
31813: LIST
31814: LIST
31815: LIST
31816: LIST
31817: LIST
31818: LIST
31819: LIST
31820: LIST
31821: LIST
31822: LIST
31823: LIST
31824: LIST
31825: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31826: LD_ADDR_VAR 0 34
31830: PUSH
31831: LD_INT 0
31833: PUSH
31834: LD_INT 0
31836: PUSH
31837: EMPTY
31838: LIST
31839: LIST
31840: PUSH
31841: LD_INT 0
31843: PUSH
31844: LD_INT 1
31846: NEG
31847: PUSH
31848: EMPTY
31849: LIST
31850: LIST
31851: PUSH
31852: LD_INT 1
31854: PUSH
31855: LD_INT 0
31857: PUSH
31858: EMPTY
31859: LIST
31860: LIST
31861: PUSH
31862: LD_INT 1
31864: PUSH
31865: LD_INT 1
31867: PUSH
31868: EMPTY
31869: LIST
31870: LIST
31871: PUSH
31872: LD_INT 0
31874: PUSH
31875: LD_INT 1
31877: PUSH
31878: EMPTY
31879: LIST
31880: LIST
31881: PUSH
31882: LD_INT 1
31884: NEG
31885: PUSH
31886: LD_INT 0
31888: PUSH
31889: EMPTY
31890: LIST
31891: LIST
31892: PUSH
31893: LD_INT 1
31895: NEG
31896: PUSH
31897: LD_INT 1
31899: NEG
31900: PUSH
31901: EMPTY
31902: LIST
31903: LIST
31904: PUSH
31905: LD_INT 1
31907: NEG
31908: PUSH
31909: LD_INT 2
31911: NEG
31912: PUSH
31913: EMPTY
31914: LIST
31915: LIST
31916: PUSH
31917: LD_INT 0
31919: PUSH
31920: LD_INT 2
31922: NEG
31923: PUSH
31924: EMPTY
31925: LIST
31926: LIST
31927: PUSH
31928: LD_INT 1
31930: PUSH
31931: LD_INT 1
31933: NEG
31934: PUSH
31935: EMPTY
31936: LIST
31937: LIST
31938: PUSH
31939: LD_INT 2
31941: PUSH
31942: LD_INT 1
31944: PUSH
31945: EMPTY
31946: LIST
31947: LIST
31948: PUSH
31949: LD_INT 2
31951: PUSH
31952: LD_INT 2
31954: PUSH
31955: EMPTY
31956: LIST
31957: LIST
31958: PUSH
31959: LD_INT 1
31961: PUSH
31962: LD_INT 2
31964: PUSH
31965: EMPTY
31966: LIST
31967: LIST
31968: PUSH
31969: LD_INT 1
31971: NEG
31972: PUSH
31973: LD_INT 1
31975: PUSH
31976: EMPTY
31977: LIST
31978: LIST
31979: PUSH
31980: LD_INT 2
31982: NEG
31983: PUSH
31984: LD_INT 0
31986: PUSH
31987: EMPTY
31988: LIST
31989: LIST
31990: PUSH
31991: LD_INT 2
31993: NEG
31994: PUSH
31995: LD_INT 1
31997: NEG
31998: PUSH
31999: EMPTY
32000: LIST
32001: LIST
32002: PUSH
32003: LD_INT 2
32005: NEG
32006: PUSH
32007: LD_INT 2
32009: NEG
32010: PUSH
32011: EMPTY
32012: LIST
32013: LIST
32014: PUSH
32015: LD_INT 1
32017: NEG
32018: PUSH
32019: LD_INT 3
32021: NEG
32022: PUSH
32023: EMPTY
32024: LIST
32025: LIST
32026: PUSH
32027: LD_INT 1
32029: PUSH
32030: LD_INT 2
32032: NEG
32033: PUSH
32034: EMPTY
32035: LIST
32036: LIST
32037: PUSH
32038: LD_INT 3
32040: PUSH
32041: LD_INT 2
32043: PUSH
32044: EMPTY
32045: LIST
32046: LIST
32047: PUSH
32048: LD_INT 2
32050: PUSH
32051: LD_INT 3
32053: PUSH
32054: EMPTY
32055: LIST
32056: LIST
32057: PUSH
32058: LD_INT 2
32060: NEG
32061: PUSH
32062: LD_INT 1
32064: PUSH
32065: EMPTY
32066: LIST
32067: LIST
32068: PUSH
32069: LD_INT 3
32071: NEG
32072: PUSH
32073: LD_INT 1
32075: NEG
32076: PUSH
32077: EMPTY
32078: LIST
32079: LIST
32080: PUSH
32081: EMPTY
32082: LIST
32083: LIST
32084: LIST
32085: LIST
32086: LIST
32087: LIST
32088: LIST
32089: LIST
32090: LIST
32091: LIST
32092: LIST
32093: LIST
32094: LIST
32095: LIST
32096: LIST
32097: LIST
32098: LIST
32099: LIST
32100: LIST
32101: LIST
32102: LIST
32103: LIST
32104: LIST
32105: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
32106: LD_ADDR_VAR 0 35
32110: PUSH
32111: LD_INT 0
32113: PUSH
32114: LD_INT 0
32116: PUSH
32117: EMPTY
32118: LIST
32119: LIST
32120: PUSH
32121: LD_INT 0
32123: PUSH
32124: LD_INT 1
32126: NEG
32127: PUSH
32128: EMPTY
32129: LIST
32130: LIST
32131: PUSH
32132: LD_INT 1
32134: PUSH
32135: LD_INT 0
32137: PUSH
32138: EMPTY
32139: LIST
32140: LIST
32141: PUSH
32142: LD_INT 1
32144: PUSH
32145: LD_INT 1
32147: PUSH
32148: EMPTY
32149: LIST
32150: LIST
32151: PUSH
32152: LD_INT 0
32154: PUSH
32155: LD_INT 1
32157: PUSH
32158: EMPTY
32159: LIST
32160: LIST
32161: PUSH
32162: LD_INT 1
32164: NEG
32165: PUSH
32166: LD_INT 0
32168: PUSH
32169: EMPTY
32170: LIST
32171: LIST
32172: PUSH
32173: LD_INT 1
32175: NEG
32176: PUSH
32177: LD_INT 1
32179: NEG
32180: PUSH
32181: EMPTY
32182: LIST
32183: LIST
32184: PUSH
32185: LD_INT 2
32187: PUSH
32188: LD_INT 1
32190: PUSH
32191: EMPTY
32192: LIST
32193: LIST
32194: PUSH
32195: LD_INT 2
32197: NEG
32198: PUSH
32199: LD_INT 1
32201: NEG
32202: PUSH
32203: EMPTY
32204: LIST
32205: LIST
32206: PUSH
32207: EMPTY
32208: LIST
32209: LIST
32210: LIST
32211: LIST
32212: LIST
32213: LIST
32214: LIST
32215: LIST
32216: LIST
32217: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
32218: LD_ADDR_VAR 0 36
32222: PUSH
32223: LD_INT 0
32225: PUSH
32226: LD_INT 0
32228: PUSH
32229: EMPTY
32230: LIST
32231: LIST
32232: PUSH
32233: LD_INT 0
32235: PUSH
32236: LD_INT 1
32238: NEG
32239: PUSH
32240: EMPTY
32241: LIST
32242: LIST
32243: PUSH
32244: LD_INT 1
32246: PUSH
32247: LD_INT 0
32249: PUSH
32250: EMPTY
32251: LIST
32252: LIST
32253: PUSH
32254: LD_INT 1
32256: PUSH
32257: LD_INT 1
32259: PUSH
32260: EMPTY
32261: LIST
32262: LIST
32263: PUSH
32264: LD_INT 0
32266: PUSH
32267: LD_INT 1
32269: PUSH
32270: EMPTY
32271: LIST
32272: LIST
32273: PUSH
32274: LD_INT 1
32276: NEG
32277: PUSH
32278: LD_INT 0
32280: PUSH
32281: EMPTY
32282: LIST
32283: LIST
32284: PUSH
32285: LD_INT 1
32287: NEG
32288: PUSH
32289: LD_INT 1
32291: NEG
32292: PUSH
32293: EMPTY
32294: LIST
32295: LIST
32296: PUSH
32297: LD_INT 1
32299: NEG
32300: PUSH
32301: LD_INT 2
32303: NEG
32304: PUSH
32305: EMPTY
32306: LIST
32307: LIST
32308: PUSH
32309: LD_INT 1
32311: PUSH
32312: LD_INT 2
32314: PUSH
32315: EMPTY
32316: LIST
32317: LIST
32318: PUSH
32319: EMPTY
32320: LIST
32321: LIST
32322: LIST
32323: LIST
32324: LIST
32325: LIST
32326: LIST
32327: LIST
32328: LIST
32329: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
32330: LD_ADDR_VAR 0 37
32334: PUSH
32335: LD_INT 0
32337: PUSH
32338: LD_INT 0
32340: PUSH
32341: EMPTY
32342: LIST
32343: LIST
32344: PUSH
32345: LD_INT 0
32347: PUSH
32348: LD_INT 1
32350: NEG
32351: PUSH
32352: EMPTY
32353: LIST
32354: LIST
32355: PUSH
32356: LD_INT 1
32358: PUSH
32359: LD_INT 0
32361: PUSH
32362: EMPTY
32363: LIST
32364: LIST
32365: PUSH
32366: LD_INT 1
32368: PUSH
32369: LD_INT 1
32371: PUSH
32372: EMPTY
32373: LIST
32374: LIST
32375: PUSH
32376: LD_INT 0
32378: PUSH
32379: LD_INT 1
32381: PUSH
32382: EMPTY
32383: LIST
32384: LIST
32385: PUSH
32386: LD_INT 1
32388: NEG
32389: PUSH
32390: LD_INT 0
32392: PUSH
32393: EMPTY
32394: LIST
32395: LIST
32396: PUSH
32397: LD_INT 1
32399: NEG
32400: PUSH
32401: LD_INT 1
32403: NEG
32404: PUSH
32405: EMPTY
32406: LIST
32407: LIST
32408: PUSH
32409: LD_INT 1
32411: PUSH
32412: LD_INT 1
32414: NEG
32415: PUSH
32416: EMPTY
32417: LIST
32418: LIST
32419: PUSH
32420: LD_INT 1
32422: NEG
32423: PUSH
32424: LD_INT 1
32426: PUSH
32427: EMPTY
32428: LIST
32429: LIST
32430: PUSH
32431: EMPTY
32432: LIST
32433: LIST
32434: LIST
32435: LIST
32436: LIST
32437: LIST
32438: LIST
32439: LIST
32440: LIST
32441: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
32442: LD_ADDR_VAR 0 38
32446: PUSH
32447: LD_INT 0
32449: PUSH
32450: LD_INT 0
32452: PUSH
32453: EMPTY
32454: LIST
32455: LIST
32456: PUSH
32457: LD_INT 0
32459: PUSH
32460: LD_INT 1
32462: NEG
32463: PUSH
32464: EMPTY
32465: LIST
32466: LIST
32467: PUSH
32468: LD_INT 1
32470: PUSH
32471: LD_INT 0
32473: PUSH
32474: EMPTY
32475: LIST
32476: LIST
32477: PUSH
32478: LD_INT 1
32480: PUSH
32481: LD_INT 1
32483: PUSH
32484: EMPTY
32485: LIST
32486: LIST
32487: PUSH
32488: LD_INT 0
32490: PUSH
32491: LD_INT 1
32493: PUSH
32494: EMPTY
32495: LIST
32496: LIST
32497: PUSH
32498: LD_INT 1
32500: NEG
32501: PUSH
32502: LD_INT 0
32504: PUSH
32505: EMPTY
32506: LIST
32507: LIST
32508: PUSH
32509: LD_INT 1
32511: NEG
32512: PUSH
32513: LD_INT 1
32515: NEG
32516: PUSH
32517: EMPTY
32518: LIST
32519: LIST
32520: PUSH
32521: LD_INT 2
32523: PUSH
32524: LD_INT 1
32526: PUSH
32527: EMPTY
32528: LIST
32529: LIST
32530: PUSH
32531: LD_INT 2
32533: NEG
32534: PUSH
32535: LD_INT 1
32537: NEG
32538: PUSH
32539: EMPTY
32540: LIST
32541: LIST
32542: PUSH
32543: EMPTY
32544: LIST
32545: LIST
32546: LIST
32547: LIST
32548: LIST
32549: LIST
32550: LIST
32551: LIST
32552: LIST
32553: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
32554: LD_ADDR_VAR 0 39
32558: PUSH
32559: LD_INT 0
32561: PUSH
32562: LD_INT 0
32564: PUSH
32565: EMPTY
32566: LIST
32567: LIST
32568: PUSH
32569: LD_INT 0
32571: PUSH
32572: LD_INT 1
32574: NEG
32575: PUSH
32576: EMPTY
32577: LIST
32578: LIST
32579: PUSH
32580: LD_INT 1
32582: PUSH
32583: LD_INT 0
32585: PUSH
32586: EMPTY
32587: LIST
32588: LIST
32589: PUSH
32590: LD_INT 1
32592: PUSH
32593: LD_INT 1
32595: PUSH
32596: EMPTY
32597: LIST
32598: LIST
32599: PUSH
32600: LD_INT 0
32602: PUSH
32603: LD_INT 1
32605: PUSH
32606: EMPTY
32607: LIST
32608: LIST
32609: PUSH
32610: LD_INT 1
32612: NEG
32613: PUSH
32614: LD_INT 0
32616: PUSH
32617: EMPTY
32618: LIST
32619: LIST
32620: PUSH
32621: LD_INT 1
32623: NEG
32624: PUSH
32625: LD_INT 1
32627: NEG
32628: PUSH
32629: EMPTY
32630: LIST
32631: LIST
32632: PUSH
32633: LD_INT 1
32635: NEG
32636: PUSH
32637: LD_INT 2
32639: NEG
32640: PUSH
32641: EMPTY
32642: LIST
32643: LIST
32644: PUSH
32645: LD_INT 1
32647: PUSH
32648: LD_INT 2
32650: PUSH
32651: EMPTY
32652: LIST
32653: LIST
32654: PUSH
32655: EMPTY
32656: LIST
32657: LIST
32658: LIST
32659: LIST
32660: LIST
32661: LIST
32662: LIST
32663: LIST
32664: LIST
32665: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
32666: LD_ADDR_VAR 0 40
32670: PUSH
32671: LD_INT 0
32673: PUSH
32674: LD_INT 0
32676: PUSH
32677: EMPTY
32678: LIST
32679: LIST
32680: PUSH
32681: LD_INT 0
32683: PUSH
32684: LD_INT 1
32686: NEG
32687: PUSH
32688: EMPTY
32689: LIST
32690: LIST
32691: PUSH
32692: LD_INT 1
32694: PUSH
32695: LD_INT 0
32697: PUSH
32698: EMPTY
32699: LIST
32700: LIST
32701: PUSH
32702: LD_INT 1
32704: PUSH
32705: LD_INT 1
32707: PUSH
32708: EMPTY
32709: LIST
32710: LIST
32711: PUSH
32712: LD_INT 0
32714: PUSH
32715: LD_INT 1
32717: PUSH
32718: EMPTY
32719: LIST
32720: LIST
32721: PUSH
32722: LD_INT 1
32724: NEG
32725: PUSH
32726: LD_INT 0
32728: PUSH
32729: EMPTY
32730: LIST
32731: LIST
32732: PUSH
32733: LD_INT 1
32735: NEG
32736: PUSH
32737: LD_INT 1
32739: NEG
32740: PUSH
32741: EMPTY
32742: LIST
32743: LIST
32744: PUSH
32745: LD_INT 1
32747: PUSH
32748: LD_INT 1
32750: NEG
32751: PUSH
32752: EMPTY
32753: LIST
32754: LIST
32755: PUSH
32756: LD_INT 1
32758: NEG
32759: PUSH
32760: LD_INT 1
32762: PUSH
32763: EMPTY
32764: LIST
32765: LIST
32766: PUSH
32767: EMPTY
32768: LIST
32769: LIST
32770: LIST
32771: LIST
32772: LIST
32773: LIST
32774: LIST
32775: LIST
32776: LIST
32777: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32778: LD_ADDR_VAR 0 41
32782: PUSH
32783: LD_INT 0
32785: PUSH
32786: LD_INT 0
32788: PUSH
32789: EMPTY
32790: LIST
32791: LIST
32792: PUSH
32793: LD_INT 0
32795: PUSH
32796: LD_INT 1
32798: NEG
32799: PUSH
32800: EMPTY
32801: LIST
32802: LIST
32803: PUSH
32804: LD_INT 1
32806: PUSH
32807: LD_INT 0
32809: PUSH
32810: EMPTY
32811: LIST
32812: LIST
32813: PUSH
32814: LD_INT 1
32816: PUSH
32817: LD_INT 1
32819: PUSH
32820: EMPTY
32821: LIST
32822: LIST
32823: PUSH
32824: LD_INT 0
32826: PUSH
32827: LD_INT 1
32829: PUSH
32830: EMPTY
32831: LIST
32832: LIST
32833: PUSH
32834: LD_INT 1
32836: NEG
32837: PUSH
32838: LD_INT 0
32840: PUSH
32841: EMPTY
32842: LIST
32843: LIST
32844: PUSH
32845: LD_INT 1
32847: NEG
32848: PUSH
32849: LD_INT 1
32851: NEG
32852: PUSH
32853: EMPTY
32854: LIST
32855: LIST
32856: PUSH
32857: LD_INT 1
32859: NEG
32860: PUSH
32861: LD_INT 2
32863: NEG
32864: PUSH
32865: EMPTY
32866: LIST
32867: LIST
32868: PUSH
32869: LD_INT 1
32871: PUSH
32872: LD_INT 1
32874: NEG
32875: PUSH
32876: EMPTY
32877: LIST
32878: LIST
32879: PUSH
32880: LD_INT 2
32882: PUSH
32883: LD_INT 0
32885: PUSH
32886: EMPTY
32887: LIST
32888: LIST
32889: PUSH
32890: LD_INT 2
32892: PUSH
32893: LD_INT 1
32895: PUSH
32896: EMPTY
32897: LIST
32898: LIST
32899: PUSH
32900: LD_INT 2
32902: PUSH
32903: LD_INT 2
32905: PUSH
32906: EMPTY
32907: LIST
32908: LIST
32909: PUSH
32910: LD_INT 1
32912: PUSH
32913: LD_INT 2
32915: PUSH
32916: EMPTY
32917: LIST
32918: LIST
32919: PUSH
32920: LD_INT 1
32922: NEG
32923: PUSH
32924: LD_INT 1
32926: PUSH
32927: EMPTY
32928: LIST
32929: LIST
32930: PUSH
32931: LD_INT 2
32933: NEG
32934: PUSH
32935: LD_INT 0
32937: PUSH
32938: EMPTY
32939: LIST
32940: LIST
32941: PUSH
32942: LD_INT 2
32944: NEG
32945: PUSH
32946: LD_INT 1
32948: NEG
32949: PUSH
32950: EMPTY
32951: LIST
32952: LIST
32953: PUSH
32954: LD_INT 2
32956: NEG
32957: PUSH
32958: LD_INT 2
32960: NEG
32961: PUSH
32962: EMPTY
32963: LIST
32964: LIST
32965: PUSH
32966: LD_INT 2
32968: NEG
32969: PUSH
32970: LD_INT 3
32972: NEG
32973: PUSH
32974: EMPTY
32975: LIST
32976: LIST
32977: PUSH
32978: LD_INT 2
32980: PUSH
32981: LD_INT 1
32983: NEG
32984: PUSH
32985: EMPTY
32986: LIST
32987: LIST
32988: PUSH
32989: LD_INT 3
32991: PUSH
32992: LD_INT 0
32994: PUSH
32995: EMPTY
32996: LIST
32997: LIST
32998: PUSH
32999: LD_INT 3
33001: PUSH
33002: LD_INT 1
33004: PUSH
33005: EMPTY
33006: LIST
33007: LIST
33008: PUSH
33009: LD_INT 3
33011: PUSH
33012: LD_INT 2
33014: PUSH
33015: EMPTY
33016: LIST
33017: LIST
33018: PUSH
33019: LD_INT 3
33021: PUSH
33022: LD_INT 3
33024: PUSH
33025: EMPTY
33026: LIST
33027: LIST
33028: PUSH
33029: LD_INT 2
33031: PUSH
33032: LD_INT 3
33034: PUSH
33035: EMPTY
33036: LIST
33037: LIST
33038: PUSH
33039: LD_INT 2
33041: NEG
33042: PUSH
33043: LD_INT 1
33045: PUSH
33046: EMPTY
33047: LIST
33048: LIST
33049: PUSH
33050: LD_INT 3
33052: NEG
33053: PUSH
33054: LD_INT 0
33056: PUSH
33057: EMPTY
33058: LIST
33059: LIST
33060: PUSH
33061: LD_INT 3
33063: NEG
33064: PUSH
33065: LD_INT 1
33067: NEG
33068: PUSH
33069: EMPTY
33070: LIST
33071: LIST
33072: PUSH
33073: LD_INT 3
33075: NEG
33076: PUSH
33077: LD_INT 2
33079: NEG
33080: PUSH
33081: EMPTY
33082: LIST
33083: LIST
33084: PUSH
33085: LD_INT 3
33087: NEG
33088: PUSH
33089: LD_INT 3
33091: NEG
33092: PUSH
33093: EMPTY
33094: LIST
33095: LIST
33096: PUSH
33097: EMPTY
33098: LIST
33099: LIST
33100: LIST
33101: LIST
33102: LIST
33103: LIST
33104: LIST
33105: LIST
33106: LIST
33107: LIST
33108: LIST
33109: LIST
33110: LIST
33111: LIST
33112: LIST
33113: LIST
33114: LIST
33115: LIST
33116: LIST
33117: LIST
33118: LIST
33119: LIST
33120: LIST
33121: LIST
33122: LIST
33123: LIST
33124: LIST
33125: LIST
33126: LIST
33127: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33128: LD_ADDR_VAR 0 42
33132: PUSH
33133: LD_INT 0
33135: PUSH
33136: LD_INT 0
33138: PUSH
33139: EMPTY
33140: LIST
33141: LIST
33142: PUSH
33143: LD_INT 0
33145: PUSH
33146: LD_INT 1
33148: NEG
33149: PUSH
33150: EMPTY
33151: LIST
33152: LIST
33153: PUSH
33154: LD_INT 1
33156: PUSH
33157: LD_INT 0
33159: PUSH
33160: EMPTY
33161: LIST
33162: LIST
33163: PUSH
33164: LD_INT 1
33166: PUSH
33167: LD_INT 1
33169: PUSH
33170: EMPTY
33171: LIST
33172: LIST
33173: PUSH
33174: LD_INT 0
33176: PUSH
33177: LD_INT 1
33179: PUSH
33180: EMPTY
33181: LIST
33182: LIST
33183: PUSH
33184: LD_INT 1
33186: NEG
33187: PUSH
33188: LD_INT 0
33190: PUSH
33191: EMPTY
33192: LIST
33193: LIST
33194: PUSH
33195: LD_INT 1
33197: NEG
33198: PUSH
33199: LD_INT 1
33201: NEG
33202: PUSH
33203: EMPTY
33204: LIST
33205: LIST
33206: PUSH
33207: LD_INT 1
33209: NEG
33210: PUSH
33211: LD_INT 2
33213: NEG
33214: PUSH
33215: EMPTY
33216: LIST
33217: LIST
33218: PUSH
33219: LD_INT 0
33221: PUSH
33222: LD_INT 2
33224: NEG
33225: PUSH
33226: EMPTY
33227: LIST
33228: LIST
33229: PUSH
33230: LD_INT 1
33232: PUSH
33233: LD_INT 1
33235: NEG
33236: PUSH
33237: EMPTY
33238: LIST
33239: LIST
33240: PUSH
33241: LD_INT 2
33243: PUSH
33244: LD_INT 1
33246: PUSH
33247: EMPTY
33248: LIST
33249: LIST
33250: PUSH
33251: LD_INT 2
33253: PUSH
33254: LD_INT 2
33256: PUSH
33257: EMPTY
33258: LIST
33259: LIST
33260: PUSH
33261: LD_INT 1
33263: PUSH
33264: LD_INT 2
33266: PUSH
33267: EMPTY
33268: LIST
33269: LIST
33270: PUSH
33271: LD_INT 0
33273: PUSH
33274: LD_INT 2
33276: PUSH
33277: EMPTY
33278: LIST
33279: LIST
33280: PUSH
33281: LD_INT 1
33283: NEG
33284: PUSH
33285: LD_INT 1
33287: PUSH
33288: EMPTY
33289: LIST
33290: LIST
33291: PUSH
33292: LD_INT 2
33294: NEG
33295: PUSH
33296: LD_INT 1
33298: NEG
33299: PUSH
33300: EMPTY
33301: LIST
33302: LIST
33303: PUSH
33304: LD_INT 2
33306: NEG
33307: PUSH
33308: LD_INT 2
33310: NEG
33311: PUSH
33312: EMPTY
33313: LIST
33314: LIST
33315: PUSH
33316: LD_INT 2
33318: NEG
33319: PUSH
33320: LD_INT 3
33322: NEG
33323: PUSH
33324: EMPTY
33325: LIST
33326: LIST
33327: PUSH
33328: LD_INT 1
33330: NEG
33331: PUSH
33332: LD_INT 3
33334: NEG
33335: PUSH
33336: EMPTY
33337: LIST
33338: LIST
33339: PUSH
33340: LD_INT 0
33342: PUSH
33343: LD_INT 3
33345: NEG
33346: PUSH
33347: EMPTY
33348: LIST
33349: LIST
33350: PUSH
33351: LD_INT 1
33353: PUSH
33354: LD_INT 2
33356: NEG
33357: PUSH
33358: EMPTY
33359: LIST
33360: LIST
33361: PUSH
33362: LD_INT 3
33364: PUSH
33365: LD_INT 2
33367: PUSH
33368: EMPTY
33369: LIST
33370: LIST
33371: PUSH
33372: LD_INT 3
33374: PUSH
33375: LD_INT 3
33377: PUSH
33378: EMPTY
33379: LIST
33380: LIST
33381: PUSH
33382: LD_INT 2
33384: PUSH
33385: LD_INT 3
33387: PUSH
33388: EMPTY
33389: LIST
33390: LIST
33391: PUSH
33392: LD_INT 1
33394: PUSH
33395: LD_INT 3
33397: PUSH
33398: EMPTY
33399: LIST
33400: LIST
33401: PUSH
33402: LD_INT 0
33404: PUSH
33405: LD_INT 3
33407: PUSH
33408: EMPTY
33409: LIST
33410: LIST
33411: PUSH
33412: LD_INT 1
33414: NEG
33415: PUSH
33416: LD_INT 2
33418: PUSH
33419: EMPTY
33420: LIST
33421: LIST
33422: PUSH
33423: LD_INT 3
33425: NEG
33426: PUSH
33427: LD_INT 2
33429: NEG
33430: PUSH
33431: EMPTY
33432: LIST
33433: LIST
33434: PUSH
33435: LD_INT 3
33437: NEG
33438: PUSH
33439: LD_INT 3
33441: NEG
33442: PUSH
33443: EMPTY
33444: LIST
33445: LIST
33446: PUSH
33447: EMPTY
33448: LIST
33449: LIST
33450: LIST
33451: LIST
33452: LIST
33453: LIST
33454: LIST
33455: LIST
33456: LIST
33457: LIST
33458: LIST
33459: LIST
33460: LIST
33461: LIST
33462: LIST
33463: LIST
33464: LIST
33465: LIST
33466: LIST
33467: LIST
33468: LIST
33469: LIST
33470: LIST
33471: LIST
33472: LIST
33473: LIST
33474: LIST
33475: LIST
33476: LIST
33477: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33478: LD_ADDR_VAR 0 43
33482: PUSH
33483: LD_INT 0
33485: PUSH
33486: LD_INT 0
33488: PUSH
33489: EMPTY
33490: LIST
33491: LIST
33492: PUSH
33493: LD_INT 0
33495: PUSH
33496: LD_INT 1
33498: NEG
33499: PUSH
33500: EMPTY
33501: LIST
33502: LIST
33503: PUSH
33504: LD_INT 1
33506: PUSH
33507: LD_INT 0
33509: PUSH
33510: EMPTY
33511: LIST
33512: LIST
33513: PUSH
33514: LD_INT 1
33516: PUSH
33517: LD_INT 1
33519: PUSH
33520: EMPTY
33521: LIST
33522: LIST
33523: PUSH
33524: LD_INT 0
33526: PUSH
33527: LD_INT 1
33529: PUSH
33530: EMPTY
33531: LIST
33532: LIST
33533: PUSH
33534: LD_INT 1
33536: NEG
33537: PUSH
33538: LD_INT 0
33540: PUSH
33541: EMPTY
33542: LIST
33543: LIST
33544: PUSH
33545: LD_INT 1
33547: NEG
33548: PUSH
33549: LD_INT 1
33551: NEG
33552: PUSH
33553: EMPTY
33554: LIST
33555: LIST
33556: PUSH
33557: LD_INT 1
33559: NEG
33560: PUSH
33561: LD_INT 2
33563: NEG
33564: PUSH
33565: EMPTY
33566: LIST
33567: LIST
33568: PUSH
33569: LD_INT 0
33571: PUSH
33572: LD_INT 2
33574: NEG
33575: PUSH
33576: EMPTY
33577: LIST
33578: LIST
33579: PUSH
33580: LD_INT 1
33582: PUSH
33583: LD_INT 1
33585: NEG
33586: PUSH
33587: EMPTY
33588: LIST
33589: LIST
33590: PUSH
33591: LD_INT 2
33593: PUSH
33594: LD_INT 0
33596: PUSH
33597: EMPTY
33598: LIST
33599: LIST
33600: PUSH
33601: LD_INT 2
33603: PUSH
33604: LD_INT 1
33606: PUSH
33607: EMPTY
33608: LIST
33609: LIST
33610: PUSH
33611: LD_INT 1
33613: PUSH
33614: LD_INT 2
33616: PUSH
33617: EMPTY
33618: LIST
33619: LIST
33620: PUSH
33621: LD_INT 0
33623: PUSH
33624: LD_INT 2
33626: PUSH
33627: EMPTY
33628: LIST
33629: LIST
33630: PUSH
33631: LD_INT 1
33633: NEG
33634: PUSH
33635: LD_INT 1
33637: PUSH
33638: EMPTY
33639: LIST
33640: LIST
33641: PUSH
33642: LD_INT 2
33644: NEG
33645: PUSH
33646: LD_INT 0
33648: PUSH
33649: EMPTY
33650: LIST
33651: LIST
33652: PUSH
33653: LD_INT 2
33655: NEG
33656: PUSH
33657: LD_INT 1
33659: NEG
33660: PUSH
33661: EMPTY
33662: LIST
33663: LIST
33664: PUSH
33665: LD_INT 1
33667: NEG
33668: PUSH
33669: LD_INT 3
33671: NEG
33672: PUSH
33673: EMPTY
33674: LIST
33675: LIST
33676: PUSH
33677: LD_INT 0
33679: PUSH
33680: LD_INT 3
33682: NEG
33683: PUSH
33684: EMPTY
33685: LIST
33686: LIST
33687: PUSH
33688: LD_INT 1
33690: PUSH
33691: LD_INT 2
33693: NEG
33694: PUSH
33695: EMPTY
33696: LIST
33697: LIST
33698: PUSH
33699: LD_INT 2
33701: PUSH
33702: LD_INT 1
33704: NEG
33705: PUSH
33706: EMPTY
33707: LIST
33708: LIST
33709: PUSH
33710: LD_INT 3
33712: PUSH
33713: LD_INT 0
33715: PUSH
33716: EMPTY
33717: LIST
33718: LIST
33719: PUSH
33720: LD_INT 3
33722: PUSH
33723: LD_INT 1
33725: PUSH
33726: EMPTY
33727: LIST
33728: LIST
33729: PUSH
33730: LD_INT 1
33732: PUSH
33733: LD_INT 3
33735: PUSH
33736: EMPTY
33737: LIST
33738: LIST
33739: PUSH
33740: LD_INT 0
33742: PUSH
33743: LD_INT 3
33745: PUSH
33746: EMPTY
33747: LIST
33748: LIST
33749: PUSH
33750: LD_INT 1
33752: NEG
33753: PUSH
33754: LD_INT 2
33756: PUSH
33757: EMPTY
33758: LIST
33759: LIST
33760: PUSH
33761: LD_INT 2
33763: NEG
33764: PUSH
33765: LD_INT 1
33767: PUSH
33768: EMPTY
33769: LIST
33770: LIST
33771: PUSH
33772: LD_INT 3
33774: NEG
33775: PUSH
33776: LD_INT 0
33778: PUSH
33779: EMPTY
33780: LIST
33781: LIST
33782: PUSH
33783: LD_INT 3
33785: NEG
33786: PUSH
33787: LD_INT 1
33789: NEG
33790: PUSH
33791: EMPTY
33792: LIST
33793: LIST
33794: PUSH
33795: EMPTY
33796: LIST
33797: LIST
33798: LIST
33799: LIST
33800: LIST
33801: LIST
33802: LIST
33803: LIST
33804: LIST
33805: LIST
33806: LIST
33807: LIST
33808: LIST
33809: LIST
33810: LIST
33811: LIST
33812: LIST
33813: LIST
33814: LIST
33815: LIST
33816: LIST
33817: LIST
33818: LIST
33819: LIST
33820: LIST
33821: LIST
33822: LIST
33823: LIST
33824: LIST
33825: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33826: LD_ADDR_VAR 0 44
33830: PUSH
33831: LD_INT 0
33833: PUSH
33834: LD_INT 0
33836: PUSH
33837: EMPTY
33838: LIST
33839: LIST
33840: PUSH
33841: LD_INT 0
33843: PUSH
33844: LD_INT 1
33846: NEG
33847: PUSH
33848: EMPTY
33849: LIST
33850: LIST
33851: PUSH
33852: LD_INT 1
33854: PUSH
33855: LD_INT 0
33857: PUSH
33858: EMPTY
33859: LIST
33860: LIST
33861: PUSH
33862: LD_INT 1
33864: PUSH
33865: LD_INT 1
33867: PUSH
33868: EMPTY
33869: LIST
33870: LIST
33871: PUSH
33872: LD_INT 0
33874: PUSH
33875: LD_INT 1
33877: PUSH
33878: EMPTY
33879: LIST
33880: LIST
33881: PUSH
33882: LD_INT 1
33884: NEG
33885: PUSH
33886: LD_INT 0
33888: PUSH
33889: EMPTY
33890: LIST
33891: LIST
33892: PUSH
33893: LD_INT 1
33895: NEG
33896: PUSH
33897: LD_INT 1
33899: NEG
33900: PUSH
33901: EMPTY
33902: LIST
33903: LIST
33904: PUSH
33905: LD_INT 1
33907: NEG
33908: PUSH
33909: LD_INT 2
33911: NEG
33912: PUSH
33913: EMPTY
33914: LIST
33915: LIST
33916: PUSH
33917: LD_INT 1
33919: PUSH
33920: LD_INT 1
33922: NEG
33923: PUSH
33924: EMPTY
33925: LIST
33926: LIST
33927: PUSH
33928: LD_INT 2
33930: PUSH
33931: LD_INT 0
33933: PUSH
33934: EMPTY
33935: LIST
33936: LIST
33937: PUSH
33938: LD_INT 2
33940: PUSH
33941: LD_INT 1
33943: PUSH
33944: EMPTY
33945: LIST
33946: LIST
33947: PUSH
33948: LD_INT 2
33950: PUSH
33951: LD_INT 2
33953: PUSH
33954: EMPTY
33955: LIST
33956: LIST
33957: PUSH
33958: LD_INT 1
33960: PUSH
33961: LD_INT 2
33963: PUSH
33964: EMPTY
33965: LIST
33966: LIST
33967: PUSH
33968: LD_INT 1
33970: NEG
33971: PUSH
33972: LD_INT 1
33974: PUSH
33975: EMPTY
33976: LIST
33977: LIST
33978: PUSH
33979: LD_INT 2
33981: NEG
33982: PUSH
33983: LD_INT 0
33985: PUSH
33986: EMPTY
33987: LIST
33988: LIST
33989: PUSH
33990: LD_INT 2
33992: NEG
33993: PUSH
33994: LD_INT 1
33996: NEG
33997: PUSH
33998: EMPTY
33999: LIST
34000: LIST
34001: PUSH
34002: LD_INT 2
34004: NEG
34005: PUSH
34006: LD_INT 2
34008: NEG
34009: PUSH
34010: EMPTY
34011: LIST
34012: LIST
34013: PUSH
34014: LD_INT 2
34016: NEG
34017: PUSH
34018: LD_INT 3
34020: NEG
34021: PUSH
34022: EMPTY
34023: LIST
34024: LIST
34025: PUSH
34026: LD_INT 2
34028: PUSH
34029: LD_INT 1
34031: NEG
34032: PUSH
34033: EMPTY
34034: LIST
34035: LIST
34036: PUSH
34037: LD_INT 3
34039: PUSH
34040: LD_INT 0
34042: PUSH
34043: EMPTY
34044: LIST
34045: LIST
34046: PUSH
34047: LD_INT 3
34049: PUSH
34050: LD_INT 1
34052: PUSH
34053: EMPTY
34054: LIST
34055: LIST
34056: PUSH
34057: LD_INT 3
34059: PUSH
34060: LD_INT 2
34062: PUSH
34063: EMPTY
34064: LIST
34065: LIST
34066: PUSH
34067: LD_INT 3
34069: PUSH
34070: LD_INT 3
34072: PUSH
34073: EMPTY
34074: LIST
34075: LIST
34076: PUSH
34077: LD_INT 2
34079: PUSH
34080: LD_INT 3
34082: PUSH
34083: EMPTY
34084: LIST
34085: LIST
34086: PUSH
34087: LD_INT 2
34089: NEG
34090: PUSH
34091: LD_INT 1
34093: PUSH
34094: EMPTY
34095: LIST
34096: LIST
34097: PUSH
34098: LD_INT 3
34100: NEG
34101: PUSH
34102: LD_INT 0
34104: PUSH
34105: EMPTY
34106: LIST
34107: LIST
34108: PUSH
34109: LD_INT 3
34111: NEG
34112: PUSH
34113: LD_INT 1
34115: NEG
34116: PUSH
34117: EMPTY
34118: LIST
34119: LIST
34120: PUSH
34121: LD_INT 3
34123: NEG
34124: PUSH
34125: LD_INT 2
34127: NEG
34128: PUSH
34129: EMPTY
34130: LIST
34131: LIST
34132: PUSH
34133: LD_INT 3
34135: NEG
34136: PUSH
34137: LD_INT 3
34139: NEG
34140: PUSH
34141: EMPTY
34142: LIST
34143: LIST
34144: PUSH
34145: EMPTY
34146: LIST
34147: LIST
34148: LIST
34149: LIST
34150: LIST
34151: LIST
34152: LIST
34153: LIST
34154: LIST
34155: LIST
34156: LIST
34157: LIST
34158: LIST
34159: LIST
34160: LIST
34161: LIST
34162: LIST
34163: LIST
34164: LIST
34165: LIST
34166: LIST
34167: LIST
34168: LIST
34169: LIST
34170: LIST
34171: LIST
34172: LIST
34173: LIST
34174: LIST
34175: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34176: LD_ADDR_VAR 0 45
34180: PUSH
34181: LD_INT 0
34183: PUSH
34184: LD_INT 0
34186: PUSH
34187: EMPTY
34188: LIST
34189: LIST
34190: PUSH
34191: LD_INT 0
34193: PUSH
34194: LD_INT 1
34196: NEG
34197: PUSH
34198: EMPTY
34199: LIST
34200: LIST
34201: PUSH
34202: LD_INT 1
34204: PUSH
34205: LD_INT 0
34207: PUSH
34208: EMPTY
34209: LIST
34210: LIST
34211: PUSH
34212: LD_INT 1
34214: PUSH
34215: LD_INT 1
34217: PUSH
34218: EMPTY
34219: LIST
34220: LIST
34221: PUSH
34222: LD_INT 0
34224: PUSH
34225: LD_INT 1
34227: PUSH
34228: EMPTY
34229: LIST
34230: LIST
34231: PUSH
34232: LD_INT 1
34234: NEG
34235: PUSH
34236: LD_INT 0
34238: PUSH
34239: EMPTY
34240: LIST
34241: LIST
34242: PUSH
34243: LD_INT 1
34245: NEG
34246: PUSH
34247: LD_INT 1
34249: NEG
34250: PUSH
34251: EMPTY
34252: LIST
34253: LIST
34254: PUSH
34255: LD_INT 1
34257: NEG
34258: PUSH
34259: LD_INT 2
34261: NEG
34262: PUSH
34263: EMPTY
34264: LIST
34265: LIST
34266: PUSH
34267: LD_INT 0
34269: PUSH
34270: LD_INT 2
34272: NEG
34273: PUSH
34274: EMPTY
34275: LIST
34276: LIST
34277: PUSH
34278: LD_INT 1
34280: PUSH
34281: LD_INT 1
34283: NEG
34284: PUSH
34285: EMPTY
34286: LIST
34287: LIST
34288: PUSH
34289: LD_INT 2
34291: PUSH
34292: LD_INT 1
34294: PUSH
34295: EMPTY
34296: LIST
34297: LIST
34298: PUSH
34299: LD_INT 2
34301: PUSH
34302: LD_INT 2
34304: PUSH
34305: EMPTY
34306: LIST
34307: LIST
34308: PUSH
34309: LD_INT 1
34311: PUSH
34312: LD_INT 2
34314: PUSH
34315: EMPTY
34316: LIST
34317: LIST
34318: PUSH
34319: LD_INT 0
34321: PUSH
34322: LD_INT 2
34324: PUSH
34325: EMPTY
34326: LIST
34327: LIST
34328: PUSH
34329: LD_INT 1
34331: NEG
34332: PUSH
34333: LD_INT 1
34335: PUSH
34336: EMPTY
34337: LIST
34338: LIST
34339: PUSH
34340: LD_INT 2
34342: NEG
34343: PUSH
34344: LD_INT 1
34346: NEG
34347: PUSH
34348: EMPTY
34349: LIST
34350: LIST
34351: PUSH
34352: LD_INT 2
34354: NEG
34355: PUSH
34356: LD_INT 2
34358: NEG
34359: PUSH
34360: EMPTY
34361: LIST
34362: LIST
34363: PUSH
34364: LD_INT 2
34366: NEG
34367: PUSH
34368: LD_INT 3
34370: NEG
34371: PUSH
34372: EMPTY
34373: LIST
34374: LIST
34375: PUSH
34376: LD_INT 1
34378: NEG
34379: PUSH
34380: LD_INT 3
34382: NEG
34383: PUSH
34384: EMPTY
34385: LIST
34386: LIST
34387: PUSH
34388: LD_INT 0
34390: PUSH
34391: LD_INT 3
34393: NEG
34394: PUSH
34395: EMPTY
34396: LIST
34397: LIST
34398: PUSH
34399: LD_INT 1
34401: PUSH
34402: LD_INT 2
34404: NEG
34405: PUSH
34406: EMPTY
34407: LIST
34408: LIST
34409: PUSH
34410: LD_INT 3
34412: PUSH
34413: LD_INT 2
34415: PUSH
34416: EMPTY
34417: LIST
34418: LIST
34419: PUSH
34420: LD_INT 3
34422: PUSH
34423: LD_INT 3
34425: PUSH
34426: EMPTY
34427: LIST
34428: LIST
34429: PUSH
34430: LD_INT 2
34432: PUSH
34433: LD_INT 3
34435: PUSH
34436: EMPTY
34437: LIST
34438: LIST
34439: PUSH
34440: LD_INT 1
34442: PUSH
34443: LD_INT 3
34445: PUSH
34446: EMPTY
34447: LIST
34448: LIST
34449: PUSH
34450: LD_INT 0
34452: PUSH
34453: LD_INT 3
34455: PUSH
34456: EMPTY
34457: LIST
34458: LIST
34459: PUSH
34460: LD_INT 1
34462: NEG
34463: PUSH
34464: LD_INT 2
34466: PUSH
34467: EMPTY
34468: LIST
34469: LIST
34470: PUSH
34471: LD_INT 3
34473: NEG
34474: PUSH
34475: LD_INT 2
34477: NEG
34478: PUSH
34479: EMPTY
34480: LIST
34481: LIST
34482: PUSH
34483: LD_INT 3
34485: NEG
34486: PUSH
34487: LD_INT 3
34489: NEG
34490: PUSH
34491: EMPTY
34492: LIST
34493: LIST
34494: PUSH
34495: EMPTY
34496: LIST
34497: LIST
34498: LIST
34499: LIST
34500: LIST
34501: LIST
34502: LIST
34503: LIST
34504: LIST
34505: LIST
34506: LIST
34507: LIST
34508: LIST
34509: LIST
34510: LIST
34511: LIST
34512: LIST
34513: LIST
34514: LIST
34515: LIST
34516: LIST
34517: LIST
34518: LIST
34519: LIST
34520: LIST
34521: LIST
34522: LIST
34523: LIST
34524: LIST
34525: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34526: LD_ADDR_VAR 0 46
34530: PUSH
34531: LD_INT 0
34533: PUSH
34534: LD_INT 0
34536: PUSH
34537: EMPTY
34538: LIST
34539: LIST
34540: PUSH
34541: LD_INT 0
34543: PUSH
34544: LD_INT 1
34546: NEG
34547: PUSH
34548: EMPTY
34549: LIST
34550: LIST
34551: PUSH
34552: LD_INT 1
34554: PUSH
34555: LD_INT 0
34557: PUSH
34558: EMPTY
34559: LIST
34560: LIST
34561: PUSH
34562: LD_INT 1
34564: PUSH
34565: LD_INT 1
34567: PUSH
34568: EMPTY
34569: LIST
34570: LIST
34571: PUSH
34572: LD_INT 0
34574: PUSH
34575: LD_INT 1
34577: PUSH
34578: EMPTY
34579: LIST
34580: LIST
34581: PUSH
34582: LD_INT 1
34584: NEG
34585: PUSH
34586: LD_INT 0
34588: PUSH
34589: EMPTY
34590: LIST
34591: LIST
34592: PUSH
34593: LD_INT 1
34595: NEG
34596: PUSH
34597: LD_INT 1
34599: NEG
34600: PUSH
34601: EMPTY
34602: LIST
34603: LIST
34604: PUSH
34605: LD_INT 1
34607: NEG
34608: PUSH
34609: LD_INT 2
34611: NEG
34612: PUSH
34613: EMPTY
34614: LIST
34615: LIST
34616: PUSH
34617: LD_INT 0
34619: PUSH
34620: LD_INT 2
34622: NEG
34623: PUSH
34624: EMPTY
34625: LIST
34626: LIST
34627: PUSH
34628: LD_INT 1
34630: PUSH
34631: LD_INT 1
34633: NEG
34634: PUSH
34635: EMPTY
34636: LIST
34637: LIST
34638: PUSH
34639: LD_INT 2
34641: PUSH
34642: LD_INT 0
34644: PUSH
34645: EMPTY
34646: LIST
34647: LIST
34648: PUSH
34649: LD_INT 2
34651: PUSH
34652: LD_INT 1
34654: PUSH
34655: EMPTY
34656: LIST
34657: LIST
34658: PUSH
34659: LD_INT 1
34661: PUSH
34662: LD_INT 2
34664: PUSH
34665: EMPTY
34666: LIST
34667: LIST
34668: PUSH
34669: LD_INT 0
34671: PUSH
34672: LD_INT 2
34674: PUSH
34675: EMPTY
34676: LIST
34677: LIST
34678: PUSH
34679: LD_INT 1
34681: NEG
34682: PUSH
34683: LD_INT 1
34685: PUSH
34686: EMPTY
34687: LIST
34688: LIST
34689: PUSH
34690: LD_INT 2
34692: NEG
34693: PUSH
34694: LD_INT 0
34696: PUSH
34697: EMPTY
34698: LIST
34699: LIST
34700: PUSH
34701: LD_INT 2
34703: NEG
34704: PUSH
34705: LD_INT 1
34707: NEG
34708: PUSH
34709: EMPTY
34710: LIST
34711: LIST
34712: PUSH
34713: LD_INT 1
34715: NEG
34716: PUSH
34717: LD_INT 3
34719: NEG
34720: PUSH
34721: EMPTY
34722: LIST
34723: LIST
34724: PUSH
34725: LD_INT 0
34727: PUSH
34728: LD_INT 3
34730: NEG
34731: PUSH
34732: EMPTY
34733: LIST
34734: LIST
34735: PUSH
34736: LD_INT 1
34738: PUSH
34739: LD_INT 2
34741: NEG
34742: PUSH
34743: EMPTY
34744: LIST
34745: LIST
34746: PUSH
34747: LD_INT 2
34749: PUSH
34750: LD_INT 1
34752: NEG
34753: PUSH
34754: EMPTY
34755: LIST
34756: LIST
34757: PUSH
34758: LD_INT 3
34760: PUSH
34761: LD_INT 0
34763: PUSH
34764: EMPTY
34765: LIST
34766: LIST
34767: PUSH
34768: LD_INT 3
34770: PUSH
34771: LD_INT 1
34773: PUSH
34774: EMPTY
34775: LIST
34776: LIST
34777: PUSH
34778: LD_INT 1
34780: PUSH
34781: LD_INT 3
34783: PUSH
34784: EMPTY
34785: LIST
34786: LIST
34787: PUSH
34788: LD_INT 0
34790: PUSH
34791: LD_INT 3
34793: PUSH
34794: EMPTY
34795: LIST
34796: LIST
34797: PUSH
34798: LD_INT 1
34800: NEG
34801: PUSH
34802: LD_INT 2
34804: PUSH
34805: EMPTY
34806: LIST
34807: LIST
34808: PUSH
34809: LD_INT 2
34811: NEG
34812: PUSH
34813: LD_INT 1
34815: PUSH
34816: EMPTY
34817: LIST
34818: LIST
34819: PUSH
34820: LD_INT 3
34822: NEG
34823: PUSH
34824: LD_INT 0
34826: PUSH
34827: EMPTY
34828: LIST
34829: LIST
34830: PUSH
34831: LD_INT 3
34833: NEG
34834: PUSH
34835: LD_INT 1
34837: NEG
34838: PUSH
34839: EMPTY
34840: LIST
34841: LIST
34842: PUSH
34843: EMPTY
34844: LIST
34845: LIST
34846: LIST
34847: LIST
34848: LIST
34849: LIST
34850: LIST
34851: LIST
34852: LIST
34853: LIST
34854: LIST
34855: LIST
34856: LIST
34857: LIST
34858: LIST
34859: LIST
34860: LIST
34861: LIST
34862: LIST
34863: LIST
34864: LIST
34865: LIST
34866: LIST
34867: LIST
34868: LIST
34869: LIST
34870: LIST
34871: LIST
34872: LIST
34873: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34874: LD_ADDR_VAR 0 47
34878: PUSH
34879: LD_INT 0
34881: PUSH
34882: LD_INT 0
34884: PUSH
34885: EMPTY
34886: LIST
34887: LIST
34888: PUSH
34889: LD_INT 0
34891: PUSH
34892: LD_INT 1
34894: NEG
34895: PUSH
34896: EMPTY
34897: LIST
34898: LIST
34899: PUSH
34900: LD_INT 1
34902: PUSH
34903: LD_INT 0
34905: PUSH
34906: EMPTY
34907: LIST
34908: LIST
34909: PUSH
34910: LD_INT 1
34912: PUSH
34913: LD_INT 1
34915: PUSH
34916: EMPTY
34917: LIST
34918: LIST
34919: PUSH
34920: LD_INT 0
34922: PUSH
34923: LD_INT 1
34925: PUSH
34926: EMPTY
34927: LIST
34928: LIST
34929: PUSH
34930: LD_INT 1
34932: NEG
34933: PUSH
34934: LD_INT 0
34936: PUSH
34937: EMPTY
34938: LIST
34939: LIST
34940: PUSH
34941: LD_INT 1
34943: NEG
34944: PUSH
34945: LD_INT 1
34947: NEG
34948: PUSH
34949: EMPTY
34950: LIST
34951: LIST
34952: PUSH
34953: LD_INT 1
34955: NEG
34956: PUSH
34957: LD_INT 2
34959: NEG
34960: PUSH
34961: EMPTY
34962: LIST
34963: LIST
34964: PUSH
34965: LD_INT 0
34967: PUSH
34968: LD_INT 2
34970: NEG
34971: PUSH
34972: EMPTY
34973: LIST
34974: LIST
34975: PUSH
34976: LD_INT 1
34978: PUSH
34979: LD_INT 1
34981: NEG
34982: PUSH
34983: EMPTY
34984: LIST
34985: LIST
34986: PUSH
34987: LD_INT 2
34989: NEG
34990: PUSH
34991: LD_INT 1
34993: NEG
34994: PUSH
34995: EMPTY
34996: LIST
34997: LIST
34998: PUSH
34999: LD_INT 2
35001: NEG
35002: PUSH
35003: LD_INT 2
35005: NEG
35006: PUSH
35007: EMPTY
35008: LIST
35009: LIST
35010: PUSH
35011: EMPTY
35012: LIST
35013: LIST
35014: LIST
35015: LIST
35016: LIST
35017: LIST
35018: LIST
35019: LIST
35020: LIST
35021: LIST
35022: LIST
35023: LIST
35024: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
35025: LD_ADDR_VAR 0 48
35029: PUSH
35030: LD_INT 0
35032: PUSH
35033: LD_INT 0
35035: PUSH
35036: EMPTY
35037: LIST
35038: LIST
35039: PUSH
35040: LD_INT 0
35042: PUSH
35043: LD_INT 1
35045: NEG
35046: PUSH
35047: EMPTY
35048: LIST
35049: LIST
35050: PUSH
35051: LD_INT 1
35053: PUSH
35054: LD_INT 0
35056: PUSH
35057: EMPTY
35058: LIST
35059: LIST
35060: PUSH
35061: LD_INT 1
35063: PUSH
35064: LD_INT 1
35066: PUSH
35067: EMPTY
35068: LIST
35069: LIST
35070: PUSH
35071: LD_INT 0
35073: PUSH
35074: LD_INT 1
35076: PUSH
35077: EMPTY
35078: LIST
35079: LIST
35080: PUSH
35081: LD_INT 1
35083: NEG
35084: PUSH
35085: LD_INT 0
35087: PUSH
35088: EMPTY
35089: LIST
35090: LIST
35091: PUSH
35092: LD_INT 1
35094: NEG
35095: PUSH
35096: LD_INT 1
35098: NEG
35099: PUSH
35100: EMPTY
35101: LIST
35102: LIST
35103: PUSH
35104: LD_INT 1
35106: NEG
35107: PUSH
35108: LD_INT 2
35110: NEG
35111: PUSH
35112: EMPTY
35113: LIST
35114: LIST
35115: PUSH
35116: LD_INT 0
35118: PUSH
35119: LD_INT 2
35121: NEG
35122: PUSH
35123: EMPTY
35124: LIST
35125: LIST
35126: PUSH
35127: LD_INT 1
35129: PUSH
35130: LD_INT 1
35132: NEG
35133: PUSH
35134: EMPTY
35135: LIST
35136: LIST
35137: PUSH
35138: LD_INT 2
35140: PUSH
35141: LD_INT 0
35143: PUSH
35144: EMPTY
35145: LIST
35146: LIST
35147: PUSH
35148: LD_INT 2
35150: PUSH
35151: LD_INT 1
35153: PUSH
35154: EMPTY
35155: LIST
35156: LIST
35157: PUSH
35158: EMPTY
35159: LIST
35160: LIST
35161: LIST
35162: LIST
35163: LIST
35164: LIST
35165: LIST
35166: LIST
35167: LIST
35168: LIST
35169: LIST
35170: LIST
35171: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
35172: LD_ADDR_VAR 0 49
35176: PUSH
35177: LD_INT 0
35179: PUSH
35180: LD_INT 0
35182: PUSH
35183: EMPTY
35184: LIST
35185: LIST
35186: PUSH
35187: LD_INT 0
35189: PUSH
35190: LD_INT 1
35192: NEG
35193: PUSH
35194: EMPTY
35195: LIST
35196: LIST
35197: PUSH
35198: LD_INT 1
35200: PUSH
35201: LD_INT 0
35203: PUSH
35204: EMPTY
35205: LIST
35206: LIST
35207: PUSH
35208: LD_INT 1
35210: PUSH
35211: LD_INT 1
35213: PUSH
35214: EMPTY
35215: LIST
35216: LIST
35217: PUSH
35218: LD_INT 0
35220: PUSH
35221: LD_INT 1
35223: PUSH
35224: EMPTY
35225: LIST
35226: LIST
35227: PUSH
35228: LD_INT 1
35230: NEG
35231: PUSH
35232: LD_INT 0
35234: PUSH
35235: EMPTY
35236: LIST
35237: LIST
35238: PUSH
35239: LD_INT 1
35241: NEG
35242: PUSH
35243: LD_INT 1
35245: NEG
35246: PUSH
35247: EMPTY
35248: LIST
35249: LIST
35250: PUSH
35251: LD_INT 1
35253: PUSH
35254: LD_INT 1
35256: NEG
35257: PUSH
35258: EMPTY
35259: LIST
35260: LIST
35261: PUSH
35262: LD_INT 2
35264: PUSH
35265: LD_INT 0
35267: PUSH
35268: EMPTY
35269: LIST
35270: LIST
35271: PUSH
35272: LD_INT 2
35274: PUSH
35275: LD_INT 1
35277: PUSH
35278: EMPTY
35279: LIST
35280: LIST
35281: PUSH
35282: LD_INT 2
35284: PUSH
35285: LD_INT 2
35287: PUSH
35288: EMPTY
35289: LIST
35290: LIST
35291: PUSH
35292: LD_INT 1
35294: PUSH
35295: LD_INT 2
35297: PUSH
35298: EMPTY
35299: LIST
35300: LIST
35301: PUSH
35302: EMPTY
35303: LIST
35304: LIST
35305: LIST
35306: LIST
35307: LIST
35308: LIST
35309: LIST
35310: LIST
35311: LIST
35312: LIST
35313: LIST
35314: LIST
35315: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
35316: LD_ADDR_VAR 0 50
35320: PUSH
35321: LD_INT 0
35323: PUSH
35324: LD_INT 0
35326: PUSH
35327: EMPTY
35328: LIST
35329: LIST
35330: PUSH
35331: LD_INT 0
35333: PUSH
35334: LD_INT 1
35336: NEG
35337: PUSH
35338: EMPTY
35339: LIST
35340: LIST
35341: PUSH
35342: LD_INT 1
35344: PUSH
35345: LD_INT 0
35347: PUSH
35348: EMPTY
35349: LIST
35350: LIST
35351: PUSH
35352: LD_INT 1
35354: PUSH
35355: LD_INT 1
35357: PUSH
35358: EMPTY
35359: LIST
35360: LIST
35361: PUSH
35362: LD_INT 0
35364: PUSH
35365: LD_INT 1
35367: PUSH
35368: EMPTY
35369: LIST
35370: LIST
35371: PUSH
35372: LD_INT 1
35374: NEG
35375: PUSH
35376: LD_INT 0
35378: PUSH
35379: EMPTY
35380: LIST
35381: LIST
35382: PUSH
35383: LD_INT 1
35385: NEG
35386: PUSH
35387: LD_INT 1
35389: NEG
35390: PUSH
35391: EMPTY
35392: LIST
35393: LIST
35394: PUSH
35395: LD_INT 2
35397: PUSH
35398: LD_INT 1
35400: PUSH
35401: EMPTY
35402: LIST
35403: LIST
35404: PUSH
35405: LD_INT 2
35407: PUSH
35408: LD_INT 2
35410: PUSH
35411: EMPTY
35412: LIST
35413: LIST
35414: PUSH
35415: LD_INT 1
35417: PUSH
35418: LD_INT 2
35420: PUSH
35421: EMPTY
35422: LIST
35423: LIST
35424: PUSH
35425: LD_INT 0
35427: PUSH
35428: LD_INT 2
35430: PUSH
35431: EMPTY
35432: LIST
35433: LIST
35434: PUSH
35435: LD_INT 1
35437: NEG
35438: PUSH
35439: LD_INT 1
35441: PUSH
35442: EMPTY
35443: LIST
35444: LIST
35445: PUSH
35446: EMPTY
35447: LIST
35448: LIST
35449: LIST
35450: LIST
35451: LIST
35452: LIST
35453: LIST
35454: LIST
35455: LIST
35456: LIST
35457: LIST
35458: LIST
35459: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
35460: LD_ADDR_VAR 0 51
35464: PUSH
35465: LD_INT 0
35467: PUSH
35468: LD_INT 0
35470: PUSH
35471: EMPTY
35472: LIST
35473: LIST
35474: PUSH
35475: LD_INT 0
35477: PUSH
35478: LD_INT 1
35480: NEG
35481: PUSH
35482: EMPTY
35483: LIST
35484: LIST
35485: PUSH
35486: LD_INT 1
35488: PUSH
35489: LD_INT 0
35491: PUSH
35492: EMPTY
35493: LIST
35494: LIST
35495: PUSH
35496: LD_INT 1
35498: PUSH
35499: LD_INT 1
35501: PUSH
35502: EMPTY
35503: LIST
35504: LIST
35505: PUSH
35506: LD_INT 0
35508: PUSH
35509: LD_INT 1
35511: PUSH
35512: EMPTY
35513: LIST
35514: LIST
35515: PUSH
35516: LD_INT 1
35518: NEG
35519: PUSH
35520: LD_INT 0
35522: PUSH
35523: EMPTY
35524: LIST
35525: LIST
35526: PUSH
35527: LD_INT 1
35529: NEG
35530: PUSH
35531: LD_INT 1
35533: NEG
35534: PUSH
35535: EMPTY
35536: LIST
35537: LIST
35538: PUSH
35539: LD_INT 1
35541: PUSH
35542: LD_INT 2
35544: PUSH
35545: EMPTY
35546: LIST
35547: LIST
35548: PUSH
35549: LD_INT 0
35551: PUSH
35552: LD_INT 2
35554: PUSH
35555: EMPTY
35556: LIST
35557: LIST
35558: PUSH
35559: LD_INT 1
35561: NEG
35562: PUSH
35563: LD_INT 1
35565: PUSH
35566: EMPTY
35567: LIST
35568: LIST
35569: PUSH
35570: LD_INT 2
35572: NEG
35573: PUSH
35574: LD_INT 0
35576: PUSH
35577: EMPTY
35578: LIST
35579: LIST
35580: PUSH
35581: LD_INT 2
35583: NEG
35584: PUSH
35585: LD_INT 1
35587: NEG
35588: PUSH
35589: EMPTY
35590: LIST
35591: LIST
35592: PUSH
35593: EMPTY
35594: LIST
35595: LIST
35596: LIST
35597: LIST
35598: LIST
35599: LIST
35600: LIST
35601: LIST
35602: LIST
35603: LIST
35604: LIST
35605: LIST
35606: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35607: LD_ADDR_VAR 0 52
35611: PUSH
35612: LD_INT 0
35614: PUSH
35615: LD_INT 0
35617: PUSH
35618: EMPTY
35619: LIST
35620: LIST
35621: PUSH
35622: LD_INT 0
35624: PUSH
35625: LD_INT 1
35627: NEG
35628: PUSH
35629: EMPTY
35630: LIST
35631: LIST
35632: PUSH
35633: LD_INT 1
35635: PUSH
35636: LD_INT 0
35638: PUSH
35639: EMPTY
35640: LIST
35641: LIST
35642: PUSH
35643: LD_INT 1
35645: PUSH
35646: LD_INT 1
35648: PUSH
35649: EMPTY
35650: LIST
35651: LIST
35652: PUSH
35653: LD_INT 0
35655: PUSH
35656: LD_INT 1
35658: PUSH
35659: EMPTY
35660: LIST
35661: LIST
35662: PUSH
35663: LD_INT 1
35665: NEG
35666: PUSH
35667: LD_INT 0
35669: PUSH
35670: EMPTY
35671: LIST
35672: LIST
35673: PUSH
35674: LD_INT 1
35676: NEG
35677: PUSH
35678: LD_INT 1
35680: NEG
35681: PUSH
35682: EMPTY
35683: LIST
35684: LIST
35685: PUSH
35686: LD_INT 1
35688: NEG
35689: PUSH
35690: LD_INT 2
35692: NEG
35693: PUSH
35694: EMPTY
35695: LIST
35696: LIST
35697: PUSH
35698: LD_INT 1
35700: NEG
35701: PUSH
35702: LD_INT 1
35704: PUSH
35705: EMPTY
35706: LIST
35707: LIST
35708: PUSH
35709: LD_INT 2
35711: NEG
35712: PUSH
35713: LD_INT 0
35715: PUSH
35716: EMPTY
35717: LIST
35718: LIST
35719: PUSH
35720: LD_INT 2
35722: NEG
35723: PUSH
35724: LD_INT 1
35726: NEG
35727: PUSH
35728: EMPTY
35729: LIST
35730: LIST
35731: PUSH
35732: LD_INT 2
35734: NEG
35735: PUSH
35736: LD_INT 2
35738: NEG
35739: PUSH
35740: EMPTY
35741: LIST
35742: LIST
35743: PUSH
35744: EMPTY
35745: LIST
35746: LIST
35747: LIST
35748: LIST
35749: LIST
35750: LIST
35751: LIST
35752: LIST
35753: LIST
35754: LIST
35755: LIST
35756: LIST
35757: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35758: LD_ADDR_VAR 0 53
35762: PUSH
35763: LD_INT 0
35765: PUSH
35766: LD_INT 0
35768: PUSH
35769: EMPTY
35770: LIST
35771: LIST
35772: PUSH
35773: LD_INT 0
35775: PUSH
35776: LD_INT 1
35778: NEG
35779: PUSH
35780: EMPTY
35781: LIST
35782: LIST
35783: PUSH
35784: LD_INT 1
35786: PUSH
35787: LD_INT 0
35789: PUSH
35790: EMPTY
35791: LIST
35792: LIST
35793: PUSH
35794: LD_INT 1
35796: PUSH
35797: LD_INT 1
35799: PUSH
35800: EMPTY
35801: LIST
35802: LIST
35803: PUSH
35804: LD_INT 0
35806: PUSH
35807: LD_INT 1
35809: PUSH
35810: EMPTY
35811: LIST
35812: LIST
35813: PUSH
35814: LD_INT 1
35816: NEG
35817: PUSH
35818: LD_INT 0
35820: PUSH
35821: EMPTY
35822: LIST
35823: LIST
35824: PUSH
35825: LD_INT 1
35827: NEG
35828: PUSH
35829: LD_INT 1
35831: NEG
35832: PUSH
35833: EMPTY
35834: LIST
35835: LIST
35836: PUSH
35837: LD_INT 1
35839: NEG
35840: PUSH
35841: LD_INT 2
35843: NEG
35844: PUSH
35845: EMPTY
35846: LIST
35847: LIST
35848: PUSH
35849: LD_INT 0
35851: PUSH
35852: LD_INT 2
35854: NEG
35855: PUSH
35856: EMPTY
35857: LIST
35858: LIST
35859: PUSH
35860: LD_INT 1
35862: PUSH
35863: LD_INT 1
35865: NEG
35866: PUSH
35867: EMPTY
35868: LIST
35869: LIST
35870: PUSH
35871: LD_INT 2
35873: PUSH
35874: LD_INT 0
35876: PUSH
35877: EMPTY
35878: LIST
35879: LIST
35880: PUSH
35881: LD_INT 2
35883: PUSH
35884: LD_INT 1
35886: PUSH
35887: EMPTY
35888: LIST
35889: LIST
35890: PUSH
35891: LD_INT 2
35893: PUSH
35894: LD_INT 2
35896: PUSH
35897: EMPTY
35898: LIST
35899: LIST
35900: PUSH
35901: LD_INT 1
35903: PUSH
35904: LD_INT 2
35906: PUSH
35907: EMPTY
35908: LIST
35909: LIST
35910: PUSH
35911: LD_INT 0
35913: PUSH
35914: LD_INT 2
35916: PUSH
35917: EMPTY
35918: LIST
35919: LIST
35920: PUSH
35921: LD_INT 1
35923: NEG
35924: PUSH
35925: LD_INT 1
35927: PUSH
35928: EMPTY
35929: LIST
35930: LIST
35931: PUSH
35932: LD_INT 2
35934: NEG
35935: PUSH
35936: LD_INT 0
35938: PUSH
35939: EMPTY
35940: LIST
35941: LIST
35942: PUSH
35943: LD_INT 2
35945: NEG
35946: PUSH
35947: LD_INT 1
35949: NEG
35950: PUSH
35951: EMPTY
35952: LIST
35953: LIST
35954: PUSH
35955: LD_INT 2
35957: NEG
35958: PUSH
35959: LD_INT 2
35961: NEG
35962: PUSH
35963: EMPTY
35964: LIST
35965: LIST
35966: PUSH
35967: EMPTY
35968: LIST
35969: LIST
35970: LIST
35971: LIST
35972: LIST
35973: LIST
35974: LIST
35975: LIST
35976: LIST
35977: LIST
35978: LIST
35979: LIST
35980: LIST
35981: LIST
35982: LIST
35983: LIST
35984: LIST
35985: LIST
35986: LIST
35987: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35988: LD_ADDR_VAR 0 54
35992: PUSH
35993: LD_INT 0
35995: PUSH
35996: LD_INT 0
35998: PUSH
35999: EMPTY
36000: LIST
36001: LIST
36002: PUSH
36003: LD_INT 0
36005: PUSH
36006: LD_INT 1
36008: NEG
36009: PUSH
36010: EMPTY
36011: LIST
36012: LIST
36013: PUSH
36014: LD_INT 1
36016: PUSH
36017: LD_INT 0
36019: PUSH
36020: EMPTY
36021: LIST
36022: LIST
36023: PUSH
36024: LD_INT 1
36026: PUSH
36027: LD_INT 1
36029: PUSH
36030: EMPTY
36031: LIST
36032: LIST
36033: PUSH
36034: LD_INT 0
36036: PUSH
36037: LD_INT 1
36039: PUSH
36040: EMPTY
36041: LIST
36042: LIST
36043: PUSH
36044: LD_INT 1
36046: NEG
36047: PUSH
36048: LD_INT 0
36050: PUSH
36051: EMPTY
36052: LIST
36053: LIST
36054: PUSH
36055: LD_INT 1
36057: NEG
36058: PUSH
36059: LD_INT 1
36061: NEG
36062: PUSH
36063: EMPTY
36064: LIST
36065: LIST
36066: PUSH
36067: LD_INT 1
36069: NEG
36070: PUSH
36071: LD_INT 2
36073: NEG
36074: PUSH
36075: EMPTY
36076: LIST
36077: LIST
36078: PUSH
36079: LD_INT 0
36081: PUSH
36082: LD_INT 2
36084: NEG
36085: PUSH
36086: EMPTY
36087: LIST
36088: LIST
36089: PUSH
36090: LD_INT 1
36092: PUSH
36093: LD_INT 1
36095: NEG
36096: PUSH
36097: EMPTY
36098: LIST
36099: LIST
36100: PUSH
36101: LD_INT 2
36103: PUSH
36104: LD_INT 0
36106: PUSH
36107: EMPTY
36108: LIST
36109: LIST
36110: PUSH
36111: LD_INT 2
36113: PUSH
36114: LD_INT 1
36116: PUSH
36117: EMPTY
36118: LIST
36119: LIST
36120: PUSH
36121: LD_INT 2
36123: PUSH
36124: LD_INT 2
36126: PUSH
36127: EMPTY
36128: LIST
36129: LIST
36130: PUSH
36131: LD_INT 1
36133: PUSH
36134: LD_INT 2
36136: PUSH
36137: EMPTY
36138: LIST
36139: LIST
36140: PUSH
36141: LD_INT 0
36143: PUSH
36144: LD_INT 2
36146: PUSH
36147: EMPTY
36148: LIST
36149: LIST
36150: PUSH
36151: LD_INT 1
36153: NEG
36154: PUSH
36155: LD_INT 1
36157: PUSH
36158: EMPTY
36159: LIST
36160: LIST
36161: PUSH
36162: LD_INT 2
36164: NEG
36165: PUSH
36166: LD_INT 0
36168: PUSH
36169: EMPTY
36170: LIST
36171: LIST
36172: PUSH
36173: LD_INT 2
36175: NEG
36176: PUSH
36177: LD_INT 1
36179: NEG
36180: PUSH
36181: EMPTY
36182: LIST
36183: LIST
36184: PUSH
36185: LD_INT 2
36187: NEG
36188: PUSH
36189: LD_INT 2
36191: NEG
36192: PUSH
36193: EMPTY
36194: LIST
36195: LIST
36196: PUSH
36197: EMPTY
36198: LIST
36199: LIST
36200: LIST
36201: LIST
36202: LIST
36203: LIST
36204: LIST
36205: LIST
36206: LIST
36207: LIST
36208: LIST
36209: LIST
36210: LIST
36211: LIST
36212: LIST
36213: LIST
36214: LIST
36215: LIST
36216: LIST
36217: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36218: LD_ADDR_VAR 0 55
36222: PUSH
36223: LD_INT 0
36225: PUSH
36226: LD_INT 0
36228: PUSH
36229: EMPTY
36230: LIST
36231: LIST
36232: PUSH
36233: LD_INT 0
36235: PUSH
36236: LD_INT 1
36238: NEG
36239: PUSH
36240: EMPTY
36241: LIST
36242: LIST
36243: PUSH
36244: LD_INT 1
36246: PUSH
36247: LD_INT 0
36249: PUSH
36250: EMPTY
36251: LIST
36252: LIST
36253: PUSH
36254: LD_INT 1
36256: PUSH
36257: LD_INT 1
36259: PUSH
36260: EMPTY
36261: LIST
36262: LIST
36263: PUSH
36264: LD_INT 0
36266: PUSH
36267: LD_INT 1
36269: PUSH
36270: EMPTY
36271: LIST
36272: LIST
36273: PUSH
36274: LD_INT 1
36276: NEG
36277: PUSH
36278: LD_INT 0
36280: PUSH
36281: EMPTY
36282: LIST
36283: LIST
36284: PUSH
36285: LD_INT 1
36287: NEG
36288: PUSH
36289: LD_INT 1
36291: NEG
36292: PUSH
36293: EMPTY
36294: LIST
36295: LIST
36296: PUSH
36297: LD_INT 1
36299: NEG
36300: PUSH
36301: LD_INT 2
36303: NEG
36304: PUSH
36305: EMPTY
36306: LIST
36307: LIST
36308: PUSH
36309: LD_INT 0
36311: PUSH
36312: LD_INT 2
36314: NEG
36315: PUSH
36316: EMPTY
36317: LIST
36318: LIST
36319: PUSH
36320: LD_INT 1
36322: PUSH
36323: LD_INT 1
36325: NEG
36326: PUSH
36327: EMPTY
36328: LIST
36329: LIST
36330: PUSH
36331: LD_INT 2
36333: PUSH
36334: LD_INT 0
36336: PUSH
36337: EMPTY
36338: LIST
36339: LIST
36340: PUSH
36341: LD_INT 2
36343: PUSH
36344: LD_INT 1
36346: PUSH
36347: EMPTY
36348: LIST
36349: LIST
36350: PUSH
36351: LD_INT 2
36353: PUSH
36354: LD_INT 2
36356: PUSH
36357: EMPTY
36358: LIST
36359: LIST
36360: PUSH
36361: LD_INT 1
36363: PUSH
36364: LD_INT 2
36366: PUSH
36367: EMPTY
36368: LIST
36369: LIST
36370: PUSH
36371: LD_INT 0
36373: PUSH
36374: LD_INT 2
36376: PUSH
36377: EMPTY
36378: LIST
36379: LIST
36380: PUSH
36381: LD_INT 1
36383: NEG
36384: PUSH
36385: LD_INT 1
36387: PUSH
36388: EMPTY
36389: LIST
36390: LIST
36391: PUSH
36392: LD_INT 2
36394: NEG
36395: PUSH
36396: LD_INT 0
36398: PUSH
36399: EMPTY
36400: LIST
36401: LIST
36402: PUSH
36403: LD_INT 2
36405: NEG
36406: PUSH
36407: LD_INT 1
36409: NEG
36410: PUSH
36411: EMPTY
36412: LIST
36413: LIST
36414: PUSH
36415: LD_INT 2
36417: NEG
36418: PUSH
36419: LD_INT 2
36421: NEG
36422: PUSH
36423: EMPTY
36424: LIST
36425: LIST
36426: PUSH
36427: EMPTY
36428: LIST
36429: LIST
36430: LIST
36431: LIST
36432: LIST
36433: LIST
36434: LIST
36435: LIST
36436: LIST
36437: LIST
36438: LIST
36439: LIST
36440: LIST
36441: LIST
36442: LIST
36443: LIST
36444: LIST
36445: LIST
36446: LIST
36447: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36448: LD_ADDR_VAR 0 56
36452: PUSH
36453: LD_INT 0
36455: PUSH
36456: LD_INT 0
36458: PUSH
36459: EMPTY
36460: LIST
36461: LIST
36462: PUSH
36463: LD_INT 0
36465: PUSH
36466: LD_INT 1
36468: NEG
36469: PUSH
36470: EMPTY
36471: LIST
36472: LIST
36473: PUSH
36474: LD_INT 1
36476: PUSH
36477: LD_INT 0
36479: PUSH
36480: EMPTY
36481: LIST
36482: LIST
36483: PUSH
36484: LD_INT 1
36486: PUSH
36487: LD_INT 1
36489: PUSH
36490: EMPTY
36491: LIST
36492: LIST
36493: PUSH
36494: LD_INT 0
36496: PUSH
36497: LD_INT 1
36499: PUSH
36500: EMPTY
36501: LIST
36502: LIST
36503: PUSH
36504: LD_INT 1
36506: NEG
36507: PUSH
36508: LD_INT 0
36510: PUSH
36511: EMPTY
36512: LIST
36513: LIST
36514: PUSH
36515: LD_INT 1
36517: NEG
36518: PUSH
36519: LD_INT 1
36521: NEG
36522: PUSH
36523: EMPTY
36524: LIST
36525: LIST
36526: PUSH
36527: LD_INT 1
36529: NEG
36530: PUSH
36531: LD_INT 2
36533: NEG
36534: PUSH
36535: EMPTY
36536: LIST
36537: LIST
36538: PUSH
36539: LD_INT 0
36541: PUSH
36542: LD_INT 2
36544: NEG
36545: PUSH
36546: EMPTY
36547: LIST
36548: LIST
36549: PUSH
36550: LD_INT 1
36552: PUSH
36553: LD_INT 1
36555: NEG
36556: PUSH
36557: EMPTY
36558: LIST
36559: LIST
36560: PUSH
36561: LD_INT 2
36563: PUSH
36564: LD_INT 0
36566: PUSH
36567: EMPTY
36568: LIST
36569: LIST
36570: PUSH
36571: LD_INT 2
36573: PUSH
36574: LD_INT 1
36576: PUSH
36577: EMPTY
36578: LIST
36579: LIST
36580: PUSH
36581: LD_INT 2
36583: PUSH
36584: LD_INT 2
36586: PUSH
36587: EMPTY
36588: LIST
36589: LIST
36590: PUSH
36591: LD_INT 1
36593: PUSH
36594: LD_INT 2
36596: PUSH
36597: EMPTY
36598: LIST
36599: LIST
36600: PUSH
36601: LD_INT 0
36603: PUSH
36604: LD_INT 2
36606: PUSH
36607: EMPTY
36608: LIST
36609: LIST
36610: PUSH
36611: LD_INT 1
36613: NEG
36614: PUSH
36615: LD_INT 1
36617: PUSH
36618: EMPTY
36619: LIST
36620: LIST
36621: PUSH
36622: LD_INT 2
36624: NEG
36625: PUSH
36626: LD_INT 0
36628: PUSH
36629: EMPTY
36630: LIST
36631: LIST
36632: PUSH
36633: LD_INT 2
36635: NEG
36636: PUSH
36637: LD_INT 1
36639: NEG
36640: PUSH
36641: EMPTY
36642: LIST
36643: LIST
36644: PUSH
36645: LD_INT 2
36647: NEG
36648: PUSH
36649: LD_INT 2
36651: NEG
36652: PUSH
36653: EMPTY
36654: LIST
36655: LIST
36656: PUSH
36657: EMPTY
36658: LIST
36659: LIST
36660: LIST
36661: LIST
36662: LIST
36663: LIST
36664: LIST
36665: LIST
36666: LIST
36667: LIST
36668: LIST
36669: LIST
36670: LIST
36671: LIST
36672: LIST
36673: LIST
36674: LIST
36675: LIST
36676: LIST
36677: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36678: LD_ADDR_VAR 0 57
36682: PUSH
36683: LD_INT 0
36685: PUSH
36686: LD_INT 0
36688: PUSH
36689: EMPTY
36690: LIST
36691: LIST
36692: PUSH
36693: LD_INT 0
36695: PUSH
36696: LD_INT 1
36698: NEG
36699: PUSH
36700: EMPTY
36701: LIST
36702: LIST
36703: PUSH
36704: LD_INT 1
36706: PUSH
36707: LD_INT 0
36709: PUSH
36710: EMPTY
36711: LIST
36712: LIST
36713: PUSH
36714: LD_INT 1
36716: PUSH
36717: LD_INT 1
36719: PUSH
36720: EMPTY
36721: LIST
36722: LIST
36723: PUSH
36724: LD_INT 0
36726: PUSH
36727: LD_INT 1
36729: PUSH
36730: EMPTY
36731: LIST
36732: LIST
36733: PUSH
36734: LD_INT 1
36736: NEG
36737: PUSH
36738: LD_INT 0
36740: PUSH
36741: EMPTY
36742: LIST
36743: LIST
36744: PUSH
36745: LD_INT 1
36747: NEG
36748: PUSH
36749: LD_INT 1
36751: NEG
36752: PUSH
36753: EMPTY
36754: LIST
36755: LIST
36756: PUSH
36757: LD_INT 1
36759: NEG
36760: PUSH
36761: LD_INT 2
36763: NEG
36764: PUSH
36765: EMPTY
36766: LIST
36767: LIST
36768: PUSH
36769: LD_INT 0
36771: PUSH
36772: LD_INT 2
36774: NEG
36775: PUSH
36776: EMPTY
36777: LIST
36778: LIST
36779: PUSH
36780: LD_INT 1
36782: PUSH
36783: LD_INT 1
36785: NEG
36786: PUSH
36787: EMPTY
36788: LIST
36789: LIST
36790: PUSH
36791: LD_INT 2
36793: PUSH
36794: LD_INT 0
36796: PUSH
36797: EMPTY
36798: LIST
36799: LIST
36800: PUSH
36801: LD_INT 2
36803: PUSH
36804: LD_INT 1
36806: PUSH
36807: EMPTY
36808: LIST
36809: LIST
36810: PUSH
36811: LD_INT 2
36813: PUSH
36814: LD_INT 2
36816: PUSH
36817: EMPTY
36818: LIST
36819: LIST
36820: PUSH
36821: LD_INT 1
36823: PUSH
36824: LD_INT 2
36826: PUSH
36827: EMPTY
36828: LIST
36829: LIST
36830: PUSH
36831: LD_INT 0
36833: PUSH
36834: LD_INT 2
36836: PUSH
36837: EMPTY
36838: LIST
36839: LIST
36840: PUSH
36841: LD_INT 1
36843: NEG
36844: PUSH
36845: LD_INT 1
36847: PUSH
36848: EMPTY
36849: LIST
36850: LIST
36851: PUSH
36852: LD_INT 2
36854: NEG
36855: PUSH
36856: LD_INT 0
36858: PUSH
36859: EMPTY
36860: LIST
36861: LIST
36862: PUSH
36863: LD_INT 2
36865: NEG
36866: PUSH
36867: LD_INT 1
36869: NEG
36870: PUSH
36871: EMPTY
36872: LIST
36873: LIST
36874: PUSH
36875: LD_INT 2
36877: NEG
36878: PUSH
36879: LD_INT 2
36881: NEG
36882: PUSH
36883: EMPTY
36884: LIST
36885: LIST
36886: PUSH
36887: EMPTY
36888: LIST
36889: LIST
36890: LIST
36891: LIST
36892: LIST
36893: LIST
36894: LIST
36895: LIST
36896: LIST
36897: LIST
36898: LIST
36899: LIST
36900: LIST
36901: LIST
36902: LIST
36903: LIST
36904: LIST
36905: LIST
36906: LIST
36907: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36908: LD_ADDR_VAR 0 58
36912: PUSH
36913: LD_INT 0
36915: PUSH
36916: LD_INT 0
36918: PUSH
36919: EMPTY
36920: LIST
36921: LIST
36922: PUSH
36923: LD_INT 0
36925: PUSH
36926: LD_INT 1
36928: NEG
36929: PUSH
36930: EMPTY
36931: LIST
36932: LIST
36933: PUSH
36934: LD_INT 1
36936: PUSH
36937: LD_INT 0
36939: PUSH
36940: EMPTY
36941: LIST
36942: LIST
36943: PUSH
36944: LD_INT 1
36946: PUSH
36947: LD_INT 1
36949: PUSH
36950: EMPTY
36951: LIST
36952: LIST
36953: PUSH
36954: LD_INT 0
36956: PUSH
36957: LD_INT 1
36959: PUSH
36960: EMPTY
36961: LIST
36962: LIST
36963: PUSH
36964: LD_INT 1
36966: NEG
36967: PUSH
36968: LD_INT 0
36970: PUSH
36971: EMPTY
36972: LIST
36973: LIST
36974: PUSH
36975: LD_INT 1
36977: NEG
36978: PUSH
36979: LD_INT 1
36981: NEG
36982: PUSH
36983: EMPTY
36984: LIST
36985: LIST
36986: PUSH
36987: LD_INT 1
36989: NEG
36990: PUSH
36991: LD_INT 2
36993: NEG
36994: PUSH
36995: EMPTY
36996: LIST
36997: LIST
36998: PUSH
36999: LD_INT 0
37001: PUSH
37002: LD_INT 2
37004: NEG
37005: PUSH
37006: EMPTY
37007: LIST
37008: LIST
37009: PUSH
37010: LD_INT 1
37012: PUSH
37013: LD_INT 1
37015: NEG
37016: PUSH
37017: EMPTY
37018: LIST
37019: LIST
37020: PUSH
37021: LD_INT 2
37023: PUSH
37024: LD_INT 0
37026: PUSH
37027: EMPTY
37028: LIST
37029: LIST
37030: PUSH
37031: LD_INT 2
37033: PUSH
37034: LD_INT 1
37036: PUSH
37037: EMPTY
37038: LIST
37039: LIST
37040: PUSH
37041: LD_INT 2
37043: PUSH
37044: LD_INT 2
37046: PUSH
37047: EMPTY
37048: LIST
37049: LIST
37050: PUSH
37051: LD_INT 1
37053: PUSH
37054: LD_INT 2
37056: PUSH
37057: EMPTY
37058: LIST
37059: LIST
37060: PUSH
37061: LD_INT 0
37063: PUSH
37064: LD_INT 2
37066: PUSH
37067: EMPTY
37068: LIST
37069: LIST
37070: PUSH
37071: LD_INT 1
37073: NEG
37074: PUSH
37075: LD_INT 1
37077: PUSH
37078: EMPTY
37079: LIST
37080: LIST
37081: PUSH
37082: LD_INT 2
37084: NEG
37085: PUSH
37086: LD_INT 0
37088: PUSH
37089: EMPTY
37090: LIST
37091: LIST
37092: PUSH
37093: LD_INT 2
37095: NEG
37096: PUSH
37097: LD_INT 1
37099: NEG
37100: PUSH
37101: EMPTY
37102: LIST
37103: LIST
37104: PUSH
37105: LD_INT 2
37107: NEG
37108: PUSH
37109: LD_INT 2
37111: NEG
37112: PUSH
37113: EMPTY
37114: LIST
37115: LIST
37116: PUSH
37117: EMPTY
37118: LIST
37119: LIST
37120: LIST
37121: LIST
37122: LIST
37123: LIST
37124: LIST
37125: LIST
37126: LIST
37127: LIST
37128: LIST
37129: LIST
37130: LIST
37131: LIST
37132: LIST
37133: LIST
37134: LIST
37135: LIST
37136: LIST
37137: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37138: LD_ADDR_VAR 0 59
37142: PUSH
37143: LD_INT 0
37145: PUSH
37146: LD_INT 0
37148: PUSH
37149: EMPTY
37150: LIST
37151: LIST
37152: PUSH
37153: LD_INT 0
37155: PUSH
37156: LD_INT 1
37158: NEG
37159: PUSH
37160: EMPTY
37161: LIST
37162: LIST
37163: PUSH
37164: LD_INT 1
37166: PUSH
37167: LD_INT 0
37169: PUSH
37170: EMPTY
37171: LIST
37172: LIST
37173: PUSH
37174: LD_INT 1
37176: PUSH
37177: LD_INT 1
37179: PUSH
37180: EMPTY
37181: LIST
37182: LIST
37183: PUSH
37184: LD_INT 0
37186: PUSH
37187: LD_INT 1
37189: PUSH
37190: EMPTY
37191: LIST
37192: LIST
37193: PUSH
37194: LD_INT 1
37196: NEG
37197: PUSH
37198: LD_INT 0
37200: PUSH
37201: EMPTY
37202: LIST
37203: LIST
37204: PUSH
37205: LD_INT 1
37207: NEG
37208: PUSH
37209: LD_INT 1
37211: NEG
37212: PUSH
37213: EMPTY
37214: LIST
37215: LIST
37216: PUSH
37217: EMPTY
37218: LIST
37219: LIST
37220: LIST
37221: LIST
37222: LIST
37223: LIST
37224: LIST
37225: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37226: LD_ADDR_VAR 0 60
37230: PUSH
37231: LD_INT 0
37233: PUSH
37234: LD_INT 0
37236: PUSH
37237: EMPTY
37238: LIST
37239: LIST
37240: PUSH
37241: LD_INT 0
37243: PUSH
37244: LD_INT 1
37246: NEG
37247: PUSH
37248: EMPTY
37249: LIST
37250: LIST
37251: PUSH
37252: LD_INT 1
37254: PUSH
37255: LD_INT 0
37257: PUSH
37258: EMPTY
37259: LIST
37260: LIST
37261: PUSH
37262: LD_INT 1
37264: PUSH
37265: LD_INT 1
37267: PUSH
37268: EMPTY
37269: LIST
37270: LIST
37271: PUSH
37272: LD_INT 0
37274: PUSH
37275: LD_INT 1
37277: PUSH
37278: EMPTY
37279: LIST
37280: LIST
37281: PUSH
37282: LD_INT 1
37284: NEG
37285: PUSH
37286: LD_INT 0
37288: PUSH
37289: EMPTY
37290: LIST
37291: LIST
37292: PUSH
37293: LD_INT 1
37295: NEG
37296: PUSH
37297: LD_INT 1
37299: NEG
37300: PUSH
37301: EMPTY
37302: LIST
37303: LIST
37304: PUSH
37305: EMPTY
37306: LIST
37307: LIST
37308: LIST
37309: LIST
37310: LIST
37311: LIST
37312: LIST
37313: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37314: LD_ADDR_VAR 0 61
37318: PUSH
37319: LD_INT 0
37321: PUSH
37322: LD_INT 0
37324: PUSH
37325: EMPTY
37326: LIST
37327: LIST
37328: PUSH
37329: LD_INT 0
37331: PUSH
37332: LD_INT 1
37334: NEG
37335: PUSH
37336: EMPTY
37337: LIST
37338: LIST
37339: PUSH
37340: LD_INT 1
37342: PUSH
37343: LD_INT 0
37345: PUSH
37346: EMPTY
37347: LIST
37348: LIST
37349: PUSH
37350: LD_INT 1
37352: PUSH
37353: LD_INT 1
37355: PUSH
37356: EMPTY
37357: LIST
37358: LIST
37359: PUSH
37360: LD_INT 0
37362: PUSH
37363: LD_INT 1
37365: PUSH
37366: EMPTY
37367: LIST
37368: LIST
37369: PUSH
37370: LD_INT 1
37372: NEG
37373: PUSH
37374: LD_INT 0
37376: PUSH
37377: EMPTY
37378: LIST
37379: LIST
37380: PUSH
37381: LD_INT 1
37383: NEG
37384: PUSH
37385: LD_INT 1
37387: NEG
37388: PUSH
37389: EMPTY
37390: LIST
37391: LIST
37392: PUSH
37393: EMPTY
37394: LIST
37395: LIST
37396: LIST
37397: LIST
37398: LIST
37399: LIST
37400: LIST
37401: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37402: LD_ADDR_VAR 0 62
37406: PUSH
37407: LD_INT 0
37409: PUSH
37410: LD_INT 0
37412: PUSH
37413: EMPTY
37414: LIST
37415: LIST
37416: PUSH
37417: LD_INT 0
37419: PUSH
37420: LD_INT 1
37422: NEG
37423: PUSH
37424: EMPTY
37425: LIST
37426: LIST
37427: PUSH
37428: LD_INT 1
37430: PUSH
37431: LD_INT 0
37433: PUSH
37434: EMPTY
37435: LIST
37436: LIST
37437: PUSH
37438: LD_INT 1
37440: PUSH
37441: LD_INT 1
37443: PUSH
37444: EMPTY
37445: LIST
37446: LIST
37447: PUSH
37448: LD_INT 0
37450: PUSH
37451: LD_INT 1
37453: PUSH
37454: EMPTY
37455: LIST
37456: LIST
37457: PUSH
37458: LD_INT 1
37460: NEG
37461: PUSH
37462: LD_INT 0
37464: PUSH
37465: EMPTY
37466: LIST
37467: LIST
37468: PUSH
37469: LD_INT 1
37471: NEG
37472: PUSH
37473: LD_INT 1
37475: NEG
37476: PUSH
37477: EMPTY
37478: LIST
37479: LIST
37480: PUSH
37481: EMPTY
37482: LIST
37483: LIST
37484: LIST
37485: LIST
37486: LIST
37487: LIST
37488: LIST
37489: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37490: LD_ADDR_VAR 0 63
37494: PUSH
37495: LD_INT 0
37497: PUSH
37498: LD_INT 0
37500: PUSH
37501: EMPTY
37502: LIST
37503: LIST
37504: PUSH
37505: LD_INT 0
37507: PUSH
37508: LD_INT 1
37510: NEG
37511: PUSH
37512: EMPTY
37513: LIST
37514: LIST
37515: PUSH
37516: LD_INT 1
37518: PUSH
37519: LD_INT 0
37521: PUSH
37522: EMPTY
37523: LIST
37524: LIST
37525: PUSH
37526: LD_INT 1
37528: PUSH
37529: LD_INT 1
37531: PUSH
37532: EMPTY
37533: LIST
37534: LIST
37535: PUSH
37536: LD_INT 0
37538: PUSH
37539: LD_INT 1
37541: PUSH
37542: EMPTY
37543: LIST
37544: LIST
37545: PUSH
37546: LD_INT 1
37548: NEG
37549: PUSH
37550: LD_INT 0
37552: PUSH
37553: EMPTY
37554: LIST
37555: LIST
37556: PUSH
37557: LD_INT 1
37559: NEG
37560: PUSH
37561: LD_INT 1
37563: NEG
37564: PUSH
37565: EMPTY
37566: LIST
37567: LIST
37568: PUSH
37569: EMPTY
37570: LIST
37571: LIST
37572: LIST
37573: LIST
37574: LIST
37575: LIST
37576: LIST
37577: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37578: LD_ADDR_VAR 0 64
37582: PUSH
37583: LD_INT 0
37585: PUSH
37586: LD_INT 0
37588: PUSH
37589: EMPTY
37590: LIST
37591: LIST
37592: PUSH
37593: LD_INT 0
37595: PUSH
37596: LD_INT 1
37598: NEG
37599: PUSH
37600: EMPTY
37601: LIST
37602: LIST
37603: PUSH
37604: LD_INT 1
37606: PUSH
37607: LD_INT 0
37609: PUSH
37610: EMPTY
37611: LIST
37612: LIST
37613: PUSH
37614: LD_INT 1
37616: PUSH
37617: LD_INT 1
37619: PUSH
37620: EMPTY
37621: LIST
37622: LIST
37623: PUSH
37624: LD_INT 0
37626: PUSH
37627: LD_INT 1
37629: PUSH
37630: EMPTY
37631: LIST
37632: LIST
37633: PUSH
37634: LD_INT 1
37636: NEG
37637: PUSH
37638: LD_INT 0
37640: PUSH
37641: EMPTY
37642: LIST
37643: LIST
37644: PUSH
37645: LD_INT 1
37647: NEG
37648: PUSH
37649: LD_INT 1
37651: NEG
37652: PUSH
37653: EMPTY
37654: LIST
37655: LIST
37656: PUSH
37657: EMPTY
37658: LIST
37659: LIST
37660: LIST
37661: LIST
37662: LIST
37663: LIST
37664: LIST
37665: ST_TO_ADDR
// end ; 1 :
37666: GO 43563
37668: LD_INT 1
37670: DOUBLE
37671: EQUAL
37672: IFTRUE 37676
37674: GO 40299
37676: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37677: LD_ADDR_VAR 0 11
37681: PUSH
37682: LD_INT 1
37684: NEG
37685: PUSH
37686: LD_INT 3
37688: NEG
37689: PUSH
37690: EMPTY
37691: LIST
37692: LIST
37693: PUSH
37694: LD_INT 0
37696: PUSH
37697: LD_INT 3
37699: NEG
37700: PUSH
37701: EMPTY
37702: LIST
37703: LIST
37704: PUSH
37705: LD_INT 1
37707: PUSH
37708: LD_INT 2
37710: NEG
37711: PUSH
37712: EMPTY
37713: LIST
37714: LIST
37715: PUSH
37716: EMPTY
37717: LIST
37718: LIST
37719: LIST
37720: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37721: LD_ADDR_VAR 0 12
37725: PUSH
37726: LD_INT 2
37728: PUSH
37729: LD_INT 1
37731: NEG
37732: PUSH
37733: EMPTY
37734: LIST
37735: LIST
37736: PUSH
37737: LD_INT 3
37739: PUSH
37740: LD_INT 0
37742: PUSH
37743: EMPTY
37744: LIST
37745: LIST
37746: PUSH
37747: LD_INT 3
37749: PUSH
37750: LD_INT 1
37752: PUSH
37753: EMPTY
37754: LIST
37755: LIST
37756: PUSH
37757: EMPTY
37758: LIST
37759: LIST
37760: LIST
37761: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37762: LD_ADDR_VAR 0 13
37766: PUSH
37767: LD_INT 3
37769: PUSH
37770: LD_INT 2
37772: PUSH
37773: EMPTY
37774: LIST
37775: LIST
37776: PUSH
37777: LD_INT 3
37779: PUSH
37780: LD_INT 3
37782: PUSH
37783: EMPTY
37784: LIST
37785: LIST
37786: PUSH
37787: LD_INT 2
37789: PUSH
37790: LD_INT 3
37792: PUSH
37793: EMPTY
37794: LIST
37795: LIST
37796: PUSH
37797: EMPTY
37798: LIST
37799: LIST
37800: LIST
37801: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37802: LD_ADDR_VAR 0 14
37806: PUSH
37807: LD_INT 1
37809: PUSH
37810: LD_INT 3
37812: PUSH
37813: EMPTY
37814: LIST
37815: LIST
37816: PUSH
37817: LD_INT 0
37819: PUSH
37820: LD_INT 3
37822: PUSH
37823: EMPTY
37824: LIST
37825: LIST
37826: PUSH
37827: LD_INT 1
37829: NEG
37830: PUSH
37831: LD_INT 2
37833: PUSH
37834: EMPTY
37835: LIST
37836: LIST
37837: PUSH
37838: EMPTY
37839: LIST
37840: LIST
37841: LIST
37842: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37843: LD_ADDR_VAR 0 15
37847: PUSH
37848: LD_INT 2
37850: NEG
37851: PUSH
37852: LD_INT 1
37854: PUSH
37855: EMPTY
37856: LIST
37857: LIST
37858: PUSH
37859: LD_INT 3
37861: NEG
37862: PUSH
37863: LD_INT 0
37865: PUSH
37866: EMPTY
37867: LIST
37868: LIST
37869: PUSH
37870: LD_INT 3
37872: NEG
37873: PUSH
37874: LD_INT 1
37876: NEG
37877: PUSH
37878: EMPTY
37879: LIST
37880: LIST
37881: PUSH
37882: EMPTY
37883: LIST
37884: LIST
37885: LIST
37886: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37887: LD_ADDR_VAR 0 16
37891: PUSH
37892: LD_INT 2
37894: NEG
37895: PUSH
37896: LD_INT 3
37898: NEG
37899: PUSH
37900: EMPTY
37901: LIST
37902: LIST
37903: PUSH
37904: LD_INT 3
37906: NEG
37907: PUSH
37908: LD_INT 2
37910: NEG
37911: PUSH
37912: EMPTY
37913: LIST
37914: LIST
37915: PUSH
37916: LD_INT 3
37918: NEG
37919: PUSH
37920: LD_INT 3
37922: NEG
37923: PUSH
37924: EMPTY
37925: LIST
37926: LIST
37927: PUSH
37928: EMPTY
37929: LIST
37930: LIST
37931: LIST
37932: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37933: LD_ADDR_VAR 0 17
37937: PUSH
37938: LD_INT 1
37940: NEG
37941: PUSH
37942: LD_INT 3
37944: NEG
37945: PUSH
37946: EMPTY
37947: LIST
37948: LIST
37949: PUSH
37950: LD_INT 0
37952: PUSH
37953: LD_INT 3
37955: NEG
37956: PUSH
37957: EMPTY
37958: LIST
37959: LIST
37960: PUSH
37961: LD_INT 1
37963: PUSH
37964: LD_INT 2
37966: NEG
37967: PUSH
37968: EMPTY
37969: LIST
37970: LIST
37971: PUSH
37972: EMPTY
37973: LIST
37974: LIST
37975: LIST
37976: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37977: LD_ADDR_VAR 0 18
37981: PUSH
37982: LD_INT 2
37984: PUSH
37985: LD_INT 1
37987: NEG
37988: PUSH
37989: EMPTY
37990: LIST
37991: LIST
37992: PUSH
37993: LD_INT 3
37995: PUSH
37996: LD_INT 0
37998: PUSH
37999: EMPTY
38000: LIST
38001: LIST
38002: PUSH
38003: LD_INT 3
38005: PUSH
38006: LD_INT 1
38008: PUSH
38009: EMPTY
38010: LIST
38011: LIST
38012: PUSH
38013: EMPTY
38014: LIST
38015: LIST
38016: LIST
38017: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38018: LD_ADDR_VAR 0 19
38022: PUSH
38023: LD_INT 3
38025: PUSH
38026: LD_INT 2
38028: PUSH
38029: EMPTY
38030: LIST
38031: LIST
38032: PUSH
38033: LD_INT 3
38035: PUSH
38036: LD_INT 3
38038: PUSH
38039: EMPTY
38040: LIST
38041: LIST
38042: PUSH
38043: LD_INT 2
38045: PUSH
38046: LD_INT 3
38048: PUSH
38049: EMPTY
38050: LIST
38051: LIST
38052: PUSH
38053: EMPTY
38054: LIST
38055: LIST
38056: LIST
38057: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38058: LD_ADDR_VAR 0 20
38062: PUSH
38063: LD_INT 1
38065: PUSH
38066: LD_INT 3
38068: PUSH
38069: EMPTY
38070: LIST
38071: LIST
38072: PUSH
38073: LD_INT 0
38075: PUSH
38076: LD_INT 3
38078: PUSH
38079: EMPTY
38080: LIST
38081: LIST
38082: PUSH
38083: LD_INT 1
38085: NEG
38086: PUSH
38087: LD_INT 2
38089: PUSH
38090: EMPTY
38091: LIST
38092: LIST
38093: PUSH
38094: EMPTY
38095: LIST
38096: LIST
38097: LIST
38098: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38099: LD_ADDR_VAR 0 21
38103: PUSH
38104: LD_INT 2
38106: NEG
38107: PUSH
38108: LD_INT 1
38110: PUSH
38111: EMPTY
38112: LIST
38113: LIST
38114: PUSH
38115: LD_INT 3
38117: NEG
38118: PUSH
38119: LD_INT 0
38121: PUSH
38122: EMPTY
38123: LIST
38124: LIST
38125: PUSH
38126: LD_INT 3
38128: NEG
38129: PUSH
38130: LD_INT 1
38132: NEG
38133: PUSH
38134: EMPTY
38135: LIST
38136: LIST
38137: PUSH
38138: EMPTY
38139: LIST
38140: LIST
38141: LIST
38142: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38143: LD_ADDR_VAR 0 22
38147: PUSH
38148: LD_INT 2
38150: NEG
38151: PUSH
38152: LD_INT 3
38154: NEG
38155: PUSH
38156: EMPTY
38157: LIST
38158: LIST
38159: PUSH
38160: LD_INT 3
38162: NEG
38163: PUSH
38164: LD_INT 2
38166: NEG
38167: PUSH
38168: EMPTY
38169: LIST
38170: LIST
38171: PUSH
38172: LD_INT 3
38174: NEG
38175: PUSH
38176: LD_INT 3
38178: NEG
38179: PUSH
38180: EMPTY
38181: LIST
38182: LIST
38183: PUSH
38184: EMPTY
38185: LIST
38186: LIST
38187: LIST
38188: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
38189: LD_ADDR_VAR 0 23
38193: PUSH
38194: LD_INT 0
38196: PUSH
38197: LD_INT 3
38199: NEG
38200: PUSH
38201: EMPTY
38202: LIST
38203: LIST
38204: PUSH
38205: LD_INT 1
38207: NEG
38208: PUSH
38209: LD_INT 4
38211: NEG
38212: PUSH
38213: EMPTY
38214: LIST
38215: LIST
38216: PUSH
38217: LD_INT 1
38219: PUSH
38220: LD_INT 3
38222: NEG
38223: PUSH
38224: EMPTY
38225: LIST
38226: LIST
38227: PUSH
38228: EMPTY
38229: LIST
38230: LIST
38231: LIST
38232: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
38233: LD_ADDR_VAR 0 24
38237: PUSH
38238: LD_INT 3
38240: PUSH
38241: LD_INT 0
38243: PUSH
38244: EMPTY
38245: LIST
38246: LIST
38247: PUSH
38248: LD_INT 3
38250: PUSH
38251: LD_INT 1
38253: NEG
38254: PUSH
38255: EMPTY
38256: LIST
38257: LIST
38258: PUSH
38259: LD_INT 4
38261: PUSH
38262: LD_INT 1
38264: PUSH
38265: EMPTY
38266: LIST
38267: LIST
38268: PUSH
38269: EMPTY
38270: LIST
38271: LIST
38272: LIST
38273: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
38274: LD_ADDR_VAR 0 25
38278: PUSH
38279: LD_INT 3
38281: PUSH
38282: LD_INT 3
38284: PUSH
38285: EMPTY
38286: LIST
38287: LIST
38288: PUSH
38289: LD_INT 4
38291: PUSH
38292: LD_INT 3
38294: PUSH
38295: EMPTY
38296: LIST
38297: LIST
38298: PUSH
38299: LD_INT 3
38301: PUSH
38302: LD_INT 4
38304: PUSH
38305: EMPTY
38306: LIST
38307: LIST
38308: PUSH
38309: EMPTY
38310: LIST
38311: LIST
38312: LIST
38313: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
38314: LD_ADDR_VAR 0 26
38318: PUSH
38319: LD_INT 0
38321: PUSH
38322: LD_INT 3
38324: PUSH
38325: EMPTY
38326: LIST
38327: LIST
38328: PUSH
38329: LD_INT 1
38331: PUSH
38332: LD_INT 4
38334: PUSH
38335: EMPTY
38336: LIST
38337: LIST
38338: PUSH
38339: LD_INT 1
38341: NEG
38342: PUSH
38343: LD_INT 3
38345: PUSH
38346: EMPTY
38347: LIST
38348: LIST
38349: PUSH
38350: EMPTY
38351: LIST
38352: LIST
38353: LIST
38354: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
38355: LD_ADDR_VAR 0 27
38359: PUSH
38360: LD_INT 3
38362: NEG
38363: PUSH
38364: LD_INT 0
38366: PUSH
38367: EMPTY
38368: LIST
38369: LIST
38370: PUSH
38371: LD_INT 3
38373: NEG
38374: PUSH
38375: LD_INT 1
38377: PUSH
38378: EMPTY
38379: LIST
38380: LIST
38381: PUSH
38382: LD_INT 4
38384: NEG
38385: PUSH
38386: LD_INT 1
38388: NEG
38389: PUSH
38390: EMPTY
38391: LIST
38392: LIST
38393: PUSH
38394: EMPTY
38395: LIST
38396: LIST
38397: LIST
38398: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
38399: LD_ADDR_VAR 0 28
38403: PUSH
38404: LD_INT 3
38406: NEG
38407: PUSH
38408: LD_INT 3
38410: NEG
38411: PUSH
38412: EMPTY
38413: LIST
38414: LIST
38415: PUSH
38416: LD_INT 3
38418: NEG
38419: PUSH
38420: LD_INT 4
38422: NEG
38423: PUSH
38424: EMPTY
38425: LIST
38426: LIST
38427: PUSH
38428: LD_INT 4
38430: NEG
38431: PUSH
38432: LD_INT 3
38434: NEG
38435: PUSH
38436: EMPTY
38437: LIST
38438: LIST
38439: PUSH
38440: EMPTY
38441: LIST
38442: LIST
38443: LIST
38444: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
38445: LD_ADDR_VAR 0 29
38449: PUSH
38450: LD_INT 1
38452: NEG
38453: PUSH
38454: LD_INT 3
38456: NEG
38457: PUSH
38458: EMPTY
38459: LIST
38460: LIST
38461: PUSH
38462: LD_INT 0
38464: PUSH
38465: LD_INT 3
38467: NEG
38468: PUSH
38469: EMPTY
38470: LIST
38471: LIST
38472: PUSH
38473: LD_INT 1
38475: PUSH
38476: LD_INT 2
38478: NEG
38479: PUSH
38480: EMPTY
38481: LIST
38482: LIST
38483: PUSH
38484: LD_INT 1
38486: NEG
38487: PUSH
38488: LD_INT 4
38490: NEG
38491: PUSH
38492: EMPTY
38493: LIST
38494: LIST
38495: PUSH
38496: LD_INT 0
38498: PUSH
38499: LD_INT 4
38501: NEG
38502: PUSH
38503: EMPTY
38504: LIST
38505: LIST
38506: PUSH
38507: LD_INT 1
38509: PUSH
38510: LD_INT 3
38512: NEG
38513: PUSH
38514: EMPTY
38515: LIST
38516: LIST
38517: PUSH
38518: LD_INT 1
38520: NEG
38521: PUSH
38522: LD_INT 5
38524: NEG
38525: PUSH
38526: EMPTY
38527: LIST
38528: LIST
38529: PUSH
38530: LD_INT 0
38532: PUSH
38533: LD_INT 5
38535: NEG
38536: PUSH
38537: EMPTY
38538: LIST
38539: LIST
38540: PUSH
38541: LD_INT 1
38543: PUSH
38544: LD_INT 4
38546: NEG
38547: PUSH
38548: EMPTY
38549: LIST
38550: LIST
38551: PUSH
38552: LD_INT 1
38554: NEG
38555: PUSH
38556: LD_INT 6
38558: NEG
38559: PUSH
38560: EMPTY
38561: LIST
38562: LIST
38563: PUSH
38564: LD_INT 0
38566: PUSH
38567: LD_INT 6
38569: NEG
38570: PUSH
38571: EMPTY
38572: LIST
38573: LIST
38574: PUSH
38575: LD_INT 1
38577: PUSH
38578: LD_INT 5
38580: NEG
38581: PUSH
38582: EMPTY
38583: LIST
38584: LIST
38585: PUSH
38586: EMPTY
38587: LIST
38588: LIST
38589: LIST
38590: LIST
38591: LIST
38592: LIST
38593: LIST
38594: LIST
38595: LIST
38596: LIST
38597: LIST
38598: LIST
38599: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
38600: LD_ADDR_VAR 0 30
38604: PUSH
38605: LD_INT 2
38607: PUSH
38608: LD_INT 1
38610: NEG
38611: PUSH
38612: EMPTY
38613: LIST
38614: LIST
38615: PUSH
38616: LD_INT 3
38618: PUSH
38619: LD_INT 0
38621: PUSH
38622: EMPTY
38623: LIST
38624: LIST
38625: PUSH
38626: LD_INT 3
38628: PUSH
38629: LD_INT 1
38631: PUSH
38632: EMPTY
38633: LIST
38634: LIST
38635: PUSH
38636: LD_INT 3
38638: PUSH
38639: LD_INT 1
38641: NEG
38642: PUSH
38643: EMPTY
38644: LIST
38645: LIST
38646: PUSH
38647: LD_INT 4
38649: PUSH
38650: LD_INT 0
38652: PUSH
38653: EMPTY
38654: LIST
38655: LIST
38656: PUSH
38657: LD_INT 4
38659: PUSH
38660: LD_INT 1
38662: PUSH
38663: EMPTY
38664: LIST
38665: LIST
38666: PUSH
38667: LD_INT 4
38669: PUSH
38670: LD_INT 1
38672: NEG
38673: PUSH
38674: EMPTY
38675: LIST
38676: LIST
38677: PUSH
38678: LD_INT 5
38680: PUSH
38681: LD_INT 0
38683: PUSH
38684: EMPTY
38685: LIST
38686: LIST
38687: PUSH
38688: LD_INT 5
38690: PUSH
38691: LD_INT 1
38693: PUSH
38694: EMPTY
38695: LIST
38696: LIST
38697: PUSH
38698: LD_INT 5
38700: PUSH
38701: LD_INT 1
38703: NEG
38704: PUSH
38705: EMPTY
38706: LIST
38707: LIST
38708: PUSH
38709: LD_INT 6
38711: PUSH
38712: LD_INT 0
38714: PUSH
38715: EMPTY
38716: LIST
38717: LIST
38718: PUSH
38719: LD_INT 6
38721: PUSH
38722: LD_INT 1
38724: PUSH
38725: EMPTY
38726: LIST
38727: LIST
38728: PUSH
38729: EMPTY
38730: LIST
38731: LIST
38732: LIST
38733: LIST
38734: LIST
38735: LIST
38736: LIST
38737: LIST
38738: LIST
38739: LIST
38740: LIST
38741: LIST
38742: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
38743: LD_ADDR_VAR 0 31
38747: PUSH
38748: LD_INT 3
38750: PUSH
38751: LD_INT 2
38753: PUSH
38754: EMPTY
38755: LIST
38756: LIST
38757: PUSH
38758: LD_INT 3
38760: PUSH
38761: LD_INT 3
38763: PUSH
38764: EMPTY
38765: LIST
38766: LIST
38767: PUSH
38768: LD_INT 2
38770: PUSH
38771: LD_INT 3
38773: PUSH
38774: EMPTY
38775: LIST
38776: LIST
38777: PUSH
38778: LD_INT 4
38780: PUSH
38781: LD_INT 3
38783: PUSH
38784: EMPTY
38785: LIST
38786: LIST
38787: PUSH
38788: LD_INT 4
38790: PUSH
38791: LD_INT 4
38793: PUSH
38794: EMPTY
38795: LIST
38796: LIST
38797: PUSH
38798: LD_INT 3
38800: PUSH
38801: LD_INT 4
38803: PUSH
38804: EMPTY
38805: LIST
38806: LIST
38807: PUSH
38808: LD_INT 5
38810: PUSH
38811: LD_INT 4
38813: PUSH
38814: EMPTY
38815: LIST
38816: LIST
38817: PUSH
38818: LD_INT 5
38820: PUSH
38821: LD_INT 5
38823: PUSH
38824: EMPTY
38825: LIST
38826: LIST
38827: PUSH
38828: LD_INT 4
38830: PUSH
38831: LD_INT 5
38833: PUSH
38834: EMPTY
38835: LIST
38836: LIST
38837: PUSH
38838: LD_INT 6
38840: PUSH
38841: LD_INT 5
38843: PUSH
38844: EMPTY
38845: LIST
38846: LIST
38847: PUSH
38848: LD_INT 6
38850: PUSH
38851: LD_INT 6
38853: PUSH
38854: EMPTY
38855: LIST
38856: LIST
38857: PUSH
38858: LD_INT 5
38860: PUSH
38861: LD_INT 6
38863: PUSH
38864: EMPTY
38865: LIST
38866: LIST
38867: PUSH
38868: EMPTY
38869: LIST
38870: LIST
38871: LIST
38872: LIST
38873: LIST
38874: LIST
38875: LIST
38876: LIST
38877: LIST
38878: LIST
38879: LIST
38880: LIST
38881: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
38882: LD_ADDR_VAR 0 32
38886: PUSH
38887: LD_INT 1
38889: PUSH
38890: LD_INT 3
38892: PUSH
38893: EMPTY
38894: LIST
38895: LIST
38896: PUSH
38897: LD_INT 0
38899: PUSH
38900: LD_INT 3
38902: PUSH
38903: EMPTY
38904: LIST
38905: LIST
38906: PUSH
38907: LD_INT 1
38909: NEG
38910: PUSH
38911: LD_INT 2
38913: PUSH
38914: EMPTY
38915: LIST
38916: LIST
38917: PUSH
38918: LD_INT 1
38920: PUSH
38921: LD_INT 4
38923: PUSH
38924: EMPTY
38925: LIST
38926: LIST
38927: PUSH
38928: LD_INT 0
38930: PUSH
38931: LD_INT 4
38933: PUSH
38934: EMPTY
38935: LIST
38936: LIST
38937: PUSH
38938: LD_INT 1
38940: NEG
38941: PUSH
38942: LD_INT 3
38944: PUSH
38945: EMPTY
38946: LIST
38947: LIST
38948: PUSH
38949: LD_INT 1
38951: PUSH
38952: LD_INT 5
38954: PUSH
38955: EMPTY
38956: LIST
38957: LIST
38958: PUSH
38959: LD_INT 0
38961: PUSH
38962: LD_INT 5
38964: PUSH
38965: EMPTY
38966: LIST
38967: LIST
38968: PUSH
38969: LD_INT 1
38971: NEG
38972: PUSH
38973: LD_INT 4
38975: PUSH
38976: EMPTY
38977: LIST
38978: LIST
38979: PUSH
38980: LD_INT 1
38982: PUSH
38983: LD_INT 6
38985: PUSH
38986: EMPTY
38987: LIST
38988: LIST
38989: PUSH
38990: LD_INT 0
38992: PUSH
38993: LD_INT 6
38995: PUSH
38996: EMPTY
38997: LIST
38998: LIST
38999: PUSH
39000: LD_INT 1
39002: NEG
39003: PUSH
39004: LD_INT 5
39006: PUSH
39007: EMPTY
39008: LIST
39009: LIST
39010: PUSH
39011: EMPTY
39012: LIST
39013: LIST
39014: LIST
39015: LIST
39016: LIST
39017: LIST
39018: LIST
39019: LIST
39020: LIST
39021: LIST
39022: LIST
39023: LIST
39024: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
39025: LD_ADDR_VAR 0 33
39029: PUSH
39030: LD_INT 2
39032: NEG
39033: PUSH
39034: LD_INT 1
39036: PUSH
39037: EMPTY
39038: LIST
39039: LIST
39040: PUSH
39041: LD_INT 3
39043: NEG
39044: PUSH
39045: LD_INT 0
39047: PUSH
39048: EMPTY
39049: LIST
39050: LIST
39051: PUSH
39052: LD_INT 3
39054: NEG
39055: PUSH
39056: LD_INT 1
39058: NEG
39059: PUSH
39060: EMPTY
39061: LIST
39062: LIST
39063: PUSH
39064: LD_INT 3
39066: NEG
39067: PUSH
39068: LD_INT 1
39070: PUSH
39071: EMPTY
39072: LIST
39073: LIST
39074: PUSH
39075: LD_INT 4
39077: NEG
39078: PUSH
39079: LD_INT 0
39081: PUSH
39082: EMPTY
39083: LIST
39084: LIST
39085: PUSH
39086: LD_INT 4
39088: NEG
39089: PUSH
39090: LD_INT 1
39092: NEG
39093: PUSH
39094: EMPTY
39095: LIST
39096: LIST
39097: PUSH
39098: LD_INT 4
39100: NEG
39101: PUSH
39102: LD_INT 1
39104: PUSH
39105: EMPTY
39106: LIST
39107: LIST
39108: PUSH
39109: LD_INT 5
39111: NEG
39112: PUSH
39113: LD_INT 0
39115: PUSH
39116: EMPTY
39117: LIST
39118: LIST
39119: PUSH
39120: LD_INT 5
39122: NEG
39123: PUSH
39124: LD_INT 1
39126: NEG
39127: PUSH
39128: EMPTY
39129: LIST
39130: LIST
39131: PUSH
39132: LD_INT 5
39134: NEG
39135: PUSH
39136: LD_INT 1
39138: PUSH
39139: EMPTY
39140: LIST
39141: LIST
39142: PUSH
39143: LD_INT 6
39145: NEG
39146: PUSH
39147: LD_INT 0
39149: PUSH
39150: EMPTY
39151: LIST
39152: LIST
39153: PUSH
39154: LD_INT 6
39156: NEG
39157: PUSH
39158: LD_INT 1
39160: NEG
39161: PUSH
39162: EMPTY
39163: LIST
39164: LIST
39165: PUSH
39166: EMPTY
39167: LIST
39168: LIST
39169: LIST
39170: LIST
39171: LIST
39172: LIST
39173: LIST
39174: LIST
39175: LIST
39176: LIST
39177: LIST
39178: LIST
39179: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
39180: LD_ADDR_VAR 0 34
39184: PUSH
39185: LD_INT 2
39187: NEG
39188: PUSH
39189: LD_INT 3
39191: NEG
39192: PUSH
39193: EMPTY
39194: LIST
39195: LIST
39196: PUSH
39197: LD_INT 3
39199: NEG
39200: PUSH
39201: LD_INT 2
39203: NEG
39204: PUSH
39205: EMPTY
39206: LIST
39207: LIST
39208: PUSH
39209: LD_INT 3
39211: NEG
39212: PUSH
39213: LD_INT 3
39215: NEG
39216: PUSH
39217: EMPTY
39218: LIST
39219: LIST
39220: PUSH
39221: LD_INT 3
39223: NEG
39224: PUSH
39225: LD_INT 4
39227: NEG
39228: PUSH
39229: EMPTY
39230: LIST
39231: LIST
39232: PUSH
39233: LD_INT 4
39235: NEG
39236: PUSH
39237: LD_INT 3
39239: NEG
39240: PUSH
39241: EMPTY
39242: LIST
39243: LIST
39244: PUSH
39245: LD_INT 4
39247: NEG
39248: PUSH
39249: LD_INT 4
39251: NEG
39252: PUSH
39253: EMPTY
39254: LIST
39255: LIST
39256: PUSH
39257: LD_INT 4
39259: NEG
39260: PUSH
39261: LD_INT 5
39263: NEG
39264: PUSH
39265: EMPTY
39266: LIST
39267: LIST
39268: PUSH
39269: LD_INT 5
39271: NEG
39272: PUSH
39273: LD_INT 4
39275: NEG
39276: PUSH
39277: EMPTY
39278: LIST
39279: LIST
39280: PUSH
39281: LD_INT 5
39283: NEG
39284: PUSH
39285: LD_INT 5
39287: NEG
39288: PUSH
39289: EMPTY
39290: LIST
39291: LIST
39292: PUSH
39293: LD_INT 5
39295: NEG
39296: PUSH
39297: LD_INT 6
39299: NEG
39300: PUSH
39301: EMPTY
39302: LIST
39303: LIST
39304: PUSH
39305: LD_INT 6
39307: NEG
39308: PUSH
39309: LD_INT 5
39311: NEG
39312: PUSH
39313: EMPTY
39314: LIST
39315: LIST
39316: PUSH
39317: LD_INT 6
39319: NEG
39320: PUSH
39321: LD_INT 6
39323: NEG
39324: PUSH
39325: EMPTY
39326: LIST
39327: LIST
39328: PUSH
39329: EMPTY
39330: LIST
39331: LIST
39332: LIST
39333: LIST
39334: LIST
39335: LIST
39336: LIST
39337: LIST
39338: LIST
39339: LIST
39340: LIST
39341: LIST
39342: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
39343: LD_ADDR_VAR 0 41
39347: PUSH
39348: LD_INT 0
39350: PUSH
39351: LD_INT 2
39353: NEG
39354: PUSH
39355: EMPTY
39356: LIST
39357: LIST
39358: PUSH
39359: LD_INT 1
39361: NEG
39362: PUSH
39363: LD_INT 3
39365: NEG
39366: PUSH
39367: EMPTY
39368: LIST
39369: LIST
39370: PUSH
39371: LD_INT 1
39373: PUSH
39374: LD_INT 2
39376: NEG
39377: PUSH
39378: EMPTY
39379: LIST
39380: LIST
39381: PUSH
39382: EMPTY
39383: LIST
39384: LIST
39385: LIST
39386: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
39387: LD_ADDR_VAR 0 42
39391: PUSH
39392: LD_INT 2
39394: PUSH
39395: LD_INT 0
39397: PUSH
39398: EMPTY
39399: LIST
39400: LIST
39401: PUSH
39402: LD_INT 2
39404: PUSH
39405: LD_INT 1
39407: NEG
39408: PUSH
39409: EMPTY
39410: LIST
39411: LIST
39412: PUSH
39413: LD_INT 3
39415: PUSH
39416: LD_INT 1
39418: PUSH
39419: EMPTY
39420: LIST
39421: LIST
39422: PUSH
39423: EMPTY
39424: LIST
39425: LIST
39426: LIST
39427: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
39428: LD_ADDR_VAR 0 43
39432: PUSH
39433: LD_INT 2
39435: PUSH
39436: LD_INT 2
39438: PUSH
39439: EMPTY
39440: LIST
39441: LIST
39442: PUSH
39443: LD_INT 3
39445: PUSH
39446: LD_INT 2
39448: PUSH
39449: EMPTY
39450: LIST
39451: LIST
39452: PUSH
39453: LD_INT 2
39455: PUSH
39456: LD_INT 3
39458: PUSH
39459: EMPTY
39460: LIST
39461: LIST
39462: PUSH
39463: EMPTY
39464: LIST
39465: LIST
39466: LIST
39467: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
39468: LD_ADDR_VAR 0 44
39472: PUSH
39473: LD_INT 0
39475: PUSH
39476: LD_INT 2
39478: PUSH
39479: EMPTY
39480: LIST
39481: LIST
39482: PUSH
39483: LD_INT 1
39485: PUSH
39486: LD_INT 3
39488: PUSH
39489: EMPTY
39490: LIST
39491: LIST
39492: PUSH
39493: LD_INT 1
39495: NEG
39496: PUSH
39497: LD_INT 2
39499: PUSH
39500: EMPTY
39501: LIST
39502: LIST
39503: PUSH
39504: EMPTY
39505: LIST
39506: LIST
39507: LIST
39508: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39509: LD_ADDR_VAR 0 45
39513: PUSH
39514: LD_INT 2
39516: NEG
39517: PUSH
39518: LD_INT 0
39520: PUSH
39521: EMPTY
39522: LIST
39523: LIST
39524: PUSH
39525: LD_INT 2
39527: NEG
39528: PUSH
39529: LD_INT 1
39531: PUSH
39532: EMPTY
39533: LIST
39534: LIST
39535: PUSH
39536: LD_INT 3
39538: NEG
39539: PUSH
39540: LD_INT 1
39542: NEG
39543: PUSH
39544: EMPTY
39545: LIST
39546: LIST
39547: PUSH
39548: EMPTY
39549: LIST
39550: LIST
39551: LIST
39552: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
39553: LD_ADDR_VAR 0 46
39557: PUSH
39558: LD_INT 2
39560: NEG
39561: PUSH
39562: LD_INT 2
39564: NEG
39565: PUSH
39566: EMPTY
39567: LIST
39568: LIST
39569: PUSH
39570: LD_INT 2
39572: NEG
39573: PUSH
39574: LD_INT 3
39576: NEG
39577: PUSH
39578: EMPTY
39579: LIST
39580: LIST
39581: PUSH
39582: LD_INT 3
39584: NEG
39585: PUSH
39586: LD_INT 2
39588: NEG
39589: PUSH
39590: EMPTY
39591: LIST
39592: LIST
39593: PUSH
39594: EMPTY
39595: LIST
39596: LIST
39597: LIST
39598: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
39599: LD_ADDR_VAR 0 47
39603: PUSH
39604: LD_INT 2
39606: NEG
39607: PUSH
39608: LD_INT 3
39610: NEG
39611: PUSH
39612: EMPTY
39613: LIST
39614: LIST
39615: PUSH
39616: LD_INT 1
39618: NEG
39619: PUSH
39620: LD_INT 3
39622: NEG
39623: PUSH
39624: EMPTY
39625: LIST
39626: LIST
39627: PUSH
39628: EMPTY
39629: LIST
39630: LIST
39631: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
39632: LD_ADDR_VAR 0 48
39636: PUSH
39637: LD_INT 1
39639: PUSH
39640: LD_INT 2
39642: NEG
39643: PUSH
39644: EMPTY
39645: LIST
39646: LIST
39647: PUSH
39648: LD_INT 2
39650: PUSH
39651: LD_INT 1
39653: NEG
39654: PUSH
39655: EMPTY
39656: LIST
39657: LIST
39658: PUSH
39659: EMPTY
39660: LIST
39661: LIST
39662: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
39663: LD_ADDR_VAR 0 49
39667: PUSH
39668: LD_INT 3
39670: PUSH
39671: LD_INT 1
39673: PUSH
39674: EMPTY
39675: LIST
39676: LIST
39677: PUSH
39678: LD_INT 3
39680: PUSH
39681: LD_INT 2
39683: PUSH
39684: EMPTY
39685: LIST
39686: LIST
39687: PUSH
39688: EMPTY
39689: LIST
39690: LIST
39691: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
39692: LD_ADDR_VAR 0 50
39696: PUSH
39697: LD_INT 2
39699: PUSH
39700: LD_INT 3
39702: PUSH
39703: EMPTY
39704: LIST
39705: LIST
39706: PUSH
39707: LD_INT 1
39709: PUSH
39710: LD_INT 3
39712: PUSH
39713: EMPTY
39714: LIST
39715: LIST
39716: PUSH
39717: EMPTY
39718: LIST
39719: LIST
39720: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
39721: LD_ADDR_VAR 0 51
39725: PUSH
39726: LD_INT 1
39728: NEG
39729: PUSH
39730: LD_INT 2
39732: PUSH
39733: EMPTY
39734: LIST
39735: LIST
39736: PUSH
39737: LD_INT 2
39739: NEG
39740: PUSH
39741: LD_INT 1
39743: PUSH
39744: EMPTY
39745: LIST
39746: LIST
39747: PUSH
39748: EMPTY
39749: LIST
39750: LIST
39751: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39752: LD_ADDR_VAR 0 52
39756: PUSH
39757: LD_INT 3
39759: NEG
39760: PUSH
39761: LD_INT 1
39763: NEG
39764: PUSH
39765: EMPTY
39766: LIST
39767: LIST
39768: PUSH
39769: LD_INT 3
39771: NEG
39772: PUSH
39773: LD_INT 2
39775: NEG
39776: PUSH
39777: EMPTY
39778: LIST
39779: LIST
39780: PUSH
39781: EMPTY
39782: LIST
39783: LIST
39784: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39785: LD_ADDR_VAR 0 53
39789: PUSH
39790: LD_INT 1
39792: NEG
39793: PUSH
39794: LD_INT 3
39796: NEG
39797: PUSH
39798: EMPTY
39799: LIST
39800: LIST
39801: PUSH
39802: LD_INT 0
39804: PUSH
39805: LD_INT 3
39807: NEG
39808: PUSH
39809: EMPTY
39810: LIST
39811: LIST
39812: PUSH
39813: LD_INT 1
39815: PUSH
39816: LD_INT 2
39818: NEG
39819: PUSH
39820: EMPTY
39821: LIST
39822: LIST
39823: PUSH
39824: EMPTY
39825: LIST
39826: LIST
39827: LIST
39828: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39829: LD_ADDR_VAR 0 54
39833: PUSH
39834: LD_INT 2
39836: PUSH
39837: LD_INT 1
39839: NEG
39840: PUSH
39841: EMPTY
39842: LIST
39843: LIST
39844: PUSH
39845: LD_INT 3
39847: PUSH
39848: LD_INT 0
39850: PUSH
39851: EMPTY
39852: LIST
39853: LIST
39854: PUSH
39855: LD_INT 3
39857: PUSH
39858: LD_INT 1
39860: PUSH
39861: EMPTY
39862: LIST
39863: LIST
39864: PUSH
39865: EMPTY
39866: LIST
39867: LIST
39868: LIST
39869: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
39870: LD_ADDR_VAR 0 55
39874: PUSH
39875: LD_INT 3
39877: PUSH
39878: LD_INT 2
39880: PUSH
39881: EMPTY
39882: LIST
39883: LIST
39884: PUSH
39885: LD_INT 3
39887: PUSH
39888: LD_INT 3
39890: PUSH
39891: EMPTY
39892: LIST
39893: LIST
39894: PUSH
39895: LD_INT 2
39897: PUSH
39898: LD_INT 3
39900: PUSH
39901: EMPTY
39902: LIST
39903: LIST
39904: PUSH
39905: EMPTY
39906: LIST
39907: LIST
39908: LIST
39909: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39910: LD_ADDR_VAR 0 56
39914: PUSH
39915: LD_INT 1
39917: PUSH
39918: LD_INT 3
39920: PUSH
39921: EMPTY
39922: LIST
39923: LIST
39924: PUSH
39925: LD_INT 0
39927: PUSH
39928: LD_INT 3
39930: PUSH
39931: EMPTY
39932: LIST
39933: LIST
39934: PUSH
39935: LD_INT 1
39937: NEG
39938: PUSH
39939: LD_INT 2
39941: PUSH
39942: EMPTY
39943: LIST
39944: LIST
39945: PUSH
39946: EMPTY
39947: LIST
39948: LIST
39949: LIST
39950: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39951: LD_ADDR_VAR 0 57
39955: PUSH
39956: LD_INT 2
39958: NEG
39959: PUSH
39960: LD_INT 1
39962: PUSH
39963: EMPTY
39964: LIST
39965: LIST
39966: PUSH
39967: LD_INT 3
39969: NEG
39970: PUSH
39971: LD_INT 0
39973: PUSH
39974: EMPTY
39975: LIST
39976: LIST
39977: PUSH
39978: LD_INT 3
39980: NEG
39981: PUSH
39982: LD_INT 1
39984: NEG
39985: PUSH
39986: EMPTY
39987: LIST
39988: LIST
39989: PUSH
39990: EMPTY
39991: LIST
39992: LIST
39993: LIST
39994: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39995: LD_ADDR_VAR 0 58
39999: PUSH
40000: LD_INT 2
40002: NEG
40003: PUSH
40004: LD_INT 3
40006: NEG
40007: PUSH
40008: EMPTY
40009: LIST
40010: LIST
40011: PUSH
40012: LD_INT 3
40014: NEG
40015: PUSH
40016: LD_INT 2
40018: NEG
40019: PUSH
40020: EMPTY
40021: LIST
40022: LIST
40023: PUSH
40024: LD_INT 3
40026: NEG
40027: PUSH
40028: LD_INT 3
40030: NEG
40031: PUSH
40032: EMPTY
40033: LIST
40034: LIST
40035: PUSH
40036: EMPTY
40037: LIST
40038: LIST
40039: LIST
40040: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
40041: LD_ADDR_VAR 0 59
40045: PUSH
40046: LD_INT 1
40048: NEG
40049: PUSH
40050: LD_INT 2
40052: NEG
40053: PUSH
40054: EMPTY
40055: LIST
40056: LIST
40057: PUSH
40058: LD_INT 0
40060: PUSH
40061: LD_INT 2
40063: NEG
40064: PUSH
40065: EMPTY
40066: LIST
40067: LIST
40068: PUSH
40069: LD_INT 1
40071: PUSH
40072: LD_INT 1
40074: NEG
40075: PUSH
40076: EMPTY
40077: LIST
40078: LIST
40079: PUSH
40080: EMPTY
40081: LIST
40082: LIST
40083: LIST
40084: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
40085: LD_ADDR_VAR 0 60
40089: PUSH
40090: LD_INT 1
40092: PUSH
40093: LD_INT 1
40095: NEG
40096: PUSH
40097: EMPTY
40098: LIST
40099: LIST
40100: PUSH
40101: LD_INT 2
40103: PUSH
40104: LD_INT 0
40106: PUSH
40107: EMPTY
40108: LIST
40109: LIST
40110: PUSH
40111: LD_INT 2
40113: PUSH
40114: LD_INT 1
40116: PUSH
40117: EMPTY
40118: LIST
40119: LIST
40120: PUSH
40121: EMPTY
40122: LIST
40123: LIST
40124: LIST
40125: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
40126: LD_ADDR_VAR 0 61
40130: PUSH
40131: LD_INT 2
40133: PUSH
40134: LD_INT 1
40136: PUSH
40137: EMPTY
40138: LIST
40139: LIST
40140: PUSH
40141: LD_INT 2
40143: PUSH
40144: LD_INT 2
40146: PUSH
40147: EMPTY
40148: LIST
40149: LIST
40150: PUSH
40151: LD_INT 1
40153: PUSH
40154: LD_INT 2
40156: PUSH
40157: EMPTY
40158: LIST
40159: LIST
40160: PUSH
40161: EMPTY
40162: LIST
40163: LIST
40164: LIST
40165: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
40166: LD_ADDR_VAR 0 62
40170: PUSH
40171: LD_INT 1
40173: PUSH
40174: LD_INT 2
40176: PUSH
40177: EMPTY
40178: LIST
40179: LIST
40180: PUSH
40181: LD_INT 0
40183: PUSH
40184: LD_INT 2
40186: PUSH
40187: EMPTY
40188: LIST
40189: LIST
40190: PUSH
40191: LD_INT 1
40193: NEG
40194: PUSH
40195: LD_INT 1
40197: PUSH
40198: EMPTY
40199: LIST
40200: LIST
40201: PUSH
40202: EMPTY
40203: LIST
40204: LIST
40205: LIST
40206: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
40207: LD_ADDR_VAR 0 63
40211: PUSH
40212: LD_INT 1
40214: NEG
40215: PUSH
40216: LD_INT 1
40218: PUSH
40219: EMPTY
40220: LIST
40221: LIST
40222: PUSH
40223: LD_INT 2
40225: NEG
40226: PUSH
40227: LD_INT 0
40229: PUSH
40230: EMPTY
40231: LIST
40232: LIST
40233: PUSH
40234: LD_INT 2
40236: NEG
40237: PUSH
40238: LD_INT 1
40240: NEG
40241: PUSH
40242: EMPTY
40243: LIST
40244: LIST
40245: PUSH
40246: EMPTY
40247: LIST
40248: LIST
40249: LIST
40250: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40251: LD_ADDR_VAR 0 64
40255: PUSH
40256: LD_INT 1
40258: NEG
40259: PUSH
40260: LD_INT 2
40262: NEG
40263: PUSH
40264: EMPTY
40265: LIST
40266: LIST
40267: PUSH
40268: LD_INT 2
40270: NEG
40271: PUSH
40272: LD_INT 1
40274: NEG
40275: PUSH
40276: EMPTY
40277: LIST
40278: LIST
40279: PUSH
40280: LD_INT 2
40282: NEG
40283: PUSH
40284: LD_INT 2
40286: NEG
40287: PUSH
40288: EMPTY
40289: LIST
40290: LIST
40291: PUSH
40292: EMPTY
40293: LIST
40294: LIST
40295: LIST
40296: ST_TO_ADDR
// end ; 2 :
40297: GO 43563
40299: LD_INT 2
40301: DOUBLE
40302: EQUAL
40303: IFTRUE 40307
40305: GO 43562
40307: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
40308: LD_ADDR_VAR 0 29
40312: PUSH
40313: LD_INT 4
40315: PUSH
40316: LD_INT 0
40318: PUSH
40319: EMPTY
40320: LIST
40321: LIST
40322: PUSH
40323: LD_INT 4
40325: PUSH
40326: LD_INT 1
40328: NEG
40329: PUSH
40330: EMPTY
40331: LIST
40332: LIST
40333: PUSH
40334: LD_INT 5
40336: PUSH
40337: LD_INT 0
40339: PUSH
40340: EMPTY
40341: LIST
40342: LIST
40343: PUSH
40344: LD_INT 5
40346: PUSH
40347: LD_INT 1
40349: PUSH
40350: EMPTY
40351: LIST
40352: LIST
40353: PUSH
40354: LD_INT 4
40356: PUSH
40357: LD_INT 1
40359: PUSH
40360: EMPTY
40361: LIST
40362: LIST
40363: PUSH
40364: LD_INT 3
40366: PUSH
40367: LD_INT 0
40369: PUSH
40370: EMPTY
40371: LIST
40372: LIST
40373: PUSH
40374: LD_INT 3
40376: PUSH
40377: LD_INT 1
40379: NEG
40380: PUSH
40381: EMPTY
40382: LIST
40383: LIST
40384: PUSH
40385: LD_INT 3
40387: PUSH
40388: LD_INT 2
40390: NEG
40391: PUSH
40392: EMPTY
40393: LIST
40394: LIST
40395: PUSH
40396: LD_INT 5
40398: PUSH
40399: LD_INT 2
40401: PUSH
40402: EMPTY
40403: LIST
40404: LIST
40405: PUSH
40406: LD_INT 3
40408: PUSH
40409: LD_INT 3
40411: PUSH
40412: EMPTY
40413: LIST
40414: LIST
40415: PUSH
40416: LD_INT 3
40418: PUSH
40419: LD_INT 2
40421: PUSH
40422: EMPTY
40423: LIST
40424: LIST
40425: PUSH
40426: LD_INT 4
40428: PUSH
40429: LD_INT 3
40431: PUSH
40432: EMPTY
40433: LIST
40434: LIST
40435: PUSH
40436: LD_INT 4
40438: PUSH
40439: LD_INT 4
40441: PUSH
40442: EMPTY
40443: LIST
40444: LIST
40445: PUSH
40446: LD_INT 3
40448: PUSH
40449: LD_INT 4
40451: PUSH
40452: EMPTY
40453: LIST
40454: LIST
40455: PUSH
40456: LD_INT 2
40458: PUSH
40459: LD_INT 3
40461: PUSH
40462: EMPTY
40463: LIST
40464: LIST
40465: PUSH
40466: LD_INT 2
40468: PUSH
40469: LD_INT 2
40471: PUSH
40472: EMPTY
40473: LIST
40474: LIST
40475: PUSH
40476: LD_INT 4
40478: PUSH
40479: LD_INT 2
40481: PUSH
40482: EMPTY
40483: LIST
40484: LIST
40485: PUSH
40486: LD_INT 2
40488: PUSH
40489: LD_INT 4
40491: PUSH
40492: EMPTY
40493: LIST
40494: LIST
40495: PUSH
40496: LD_INT 0
40498: PUSH
40499: LD_INT 4
40501: PUSH
40502: EMPTY
40503: LIST
40504: LIST
40505: PUSH
40506: LD_INT 0
40508: PUSH
40509: LD_INT 3
40511: PUSH
40512: EMPTY
40513: LIST
40514: LIST
40515: PUSH
40516: LD_INT 1
40518: PUSH
40519: LD_INT 4
40521: PUSH
40522: EMPTY
40523: LIST
40524: LIST
40525: PUSH
40526: LD_INT 1
40528: PUSH
40529: LD_INT 5
40531: PUSH
40532: EMPTY
40533: LIST
40534: LIST
40535: PUSH
40536: LD_INT 0
40538: PUSH
40539: LD_INT 5
40541: PUSH
40542: EMPTY
40543: LIST
40544: LIST
40545: PUSH
40546: LD_INT 1
40548: NEG
40549: PUSH
40550: LD_INT 4
40552: PUSH
40553: EMPTY
40554: LIST
40555: LIST
40556: PUSH
40557: LD_INT 1
40559: NEG
40560: PUSH
40561: LD_INT 3
40563: PUSH
40564: EMPTY
40565: LIST
40566: LIST
40567: PUSH
40568: LD_INT 2
40570: PUSH
40571: LD_INT 5
40573: PUSH
40574: EMPTY
40575: LIST
40576: LIST
40577: PUSH
40578: LD_INT 2
40580: NEG
40581: PUSH
40582: LD_INT 3
40584: PUSH
40585: EMPTY
40586: LIST
40587: LIST
40588: PUSH
40589: LD_INT 3
40591: NEG
40592: PUSH
40593: LD_INT 0
40595: PUSH
40596: EMPTY
40597: LIST
40598: LIST
40599: PUSH
40600: LD_INT 3
40602: NEG
40603: PUSH
40604: LD_INT 1
40606: NEG
40607: PUSH
40608: EMPTY
40609: LIST
40610: LIST
40611: PUSH
40612: LD_INT 2
40614: NEG
40615: PUSH
40616: LD_INT 0
40618: PUSH
40619: EMPTY
40620: LIST
40621: LIST
40622: PUSH
40623: LD_INT 2
40625: NEG
40626: PUSH
40627: LD_INT 1
40629: PUSH
40630: EMPTY
40631: LIST
40632: LIST
40633: PUSH
40634: LD_INT 3
40636: NEG
40637: PUSH
40638: LD_INT 1
40640: PUSH
40641: EMPTY
40642: LIST
40643: LIST
40644: PUSH
40645: LD_INT 4
40647: NEG
40648: PUSH
40649: LD_INT 0
40651: PUSH
40652: EMPTY
40653: LIST
40654: LIST
40655: PUSH
40656: LD_INT 4
40658: NEG
40659: PUSH
40660: LD_INT 1
40662: NEG
40663: PUSH
40664: EMPTY
40665: LIST
40666: LIST
40667: PUSH
40668: LD_INT 4
40670: NEG
40671: PUSH
40672: LD_INT 2
40674: NEG
40675: PUSH
40676: EMPTY
40677: LIST
40678: LIST
40679: PUSH
40680: LD_INT 2
40682: NEG
40683: PUSH
40684: LD_INT 2
40686: PUSH
40687: EMPTY
40688: LIST
40689: LIST
40690: PUSH
40691: LD_INT 4
40693: NEG
40694: PUSH
40695: LD_INT 4
40697: NEG
40698: PUSH
40699: EMPTY
40700: LIST
40701: LIST
40702: PUSH
40703: LD_INT 4
40705: NEG
40706: PUSH
40707: LD_INT 5
40709: NEG
40710: PUSH
40711: EMPTY
40712: LIST
40713: LIST
40714: PUSH
40715: LD_INT 3
40717: NEG
40718: PUSH
40719: LD_INT 4
40721: NEG
40722: PUSH
40723: EMPTY
40724: LIST
40725: LIST
40726: PUSH
40727: LD_INT 3
40729: NEG
40730: PUSH
40731: LD_INT 3
40733: NEG
40734: PUSH
40735: EMPTY
40736: LIST
40737: LIST
40738: PUSH
40739: LD_INT 4
40741: NEG
40742: PUSH
40743: LD_INT 3
40745: NEG
40746: PUSH
40747: EMPTY
40748: LIST
40749: LIST
40750: PUSH
40751: LD_INT 5
40753: NEG
40754: PUSH
40755: LD_INT 4
40757: NEG
40758: PUSH
40759: EMPTY
40760: LIST
40761: LIST
40762: PUSH
40763: LD_INT 5
40765: NEG
40766: PUSH
40767: LD_INT 5
40769: NEG
40770: PUSH
40771: EMPTY
40772: LIST
40773: LIST
40774: PUSH
40775: LD_INT 3
40777: NEG
40778: PUSH
40779: LD_INT 5
40781: NEG
40782: PUSH
40783: EMPTY
40784: LIST
40785: LIST
40786: PUSH
40787: LD_INT 5
40789: NEG
40790: PUSH
40791: LD_INT 3
40793: NEG
40794: PUSH
40795: EMPTY
40796: LIST
40797: LIST
40798: PUSH
40799: EMPTY
40800: LIST
40801: LIST
40802: LIST
40803: LIST
40804: LIST
40805: LIST
40806: LIST
40807: LIST
40808: LIST
40809: LIST
40810: LIST
40811: LIST
40812: LIST
40813: LIST
40814: LIST
40815: LIST
40816: LIST
40817: LIST
40818: LIST
40819: LIST
40820: LIST
40821: LIST
40822: LIST
40823: LIST
40824: LIST
40825: LIST
40826: LIST
40827: LIST
40828: LIST
40829: LIST
40830: LIST
40831: LIST
40832: LIST
40833: LIST
40834: LIST
40835: LIST
40836: LIST
40837: LIST
40838: LIST
40839: LIST
40840: LIST
40841: LIST
40842: LIST
40843: LIST
40844: LIST
40845: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
40846: LD_ADDR_VAR 0 30
40850: PUSH
40851: LD_INT 4
40853: PUSH
40854: LD_INT 4
40856: PUSH
40857: EMPTY
40858: LIST
40859: LIST
40860: PUSH
40861: LD_INT 4
40863: PUSH
40864: LD_INT 3
40866: PUSH
40867: EMPTY
40868: LIST
40869: LIST
40870: PUSH
40871: LD_INT 5
40873: PUSH
40874: LD_INT 4
40876: PUSH
40877: EMPTY
40878: LIST
40879: LIST
40880: PUSH
40881: LD_INT 5
40883: PUSH
40884: LD_INT 5
40886: PUSH
40887: EMPTY
40888: LIST
40889: LIST
40890: PUSH
40891: LD_INT 4
40893: PUSH
40894: LD_INT 5
40896: PUSH
40897: EMPTY
40898: LIST
40899: LIST
40900: PUSH
40901: LD_INT 3
40903: PUSH
40904: LD_INT 4
40906: PUSH
40907: EMPTY
40908: LIST
40909: LIST
40910: PUSH
40911: LD_INT 3
40913: PUSH
40914: LD_INT 3
40916: PUSH
40917: EMPTY
40918: LIST
40919: LIST
40920: PUSH
40921: LD_INT 5
40923: PUSH
40924: LD_INT 3
40926: PUSH
40927: EMPTY
40928: LIST
40929: LIST
40930: PUSH
40931: LD_INT 3
40933: PUSH
40934: LD_INT 5
40936: PUSH
40937: EMPTY
40938: LIST
40939: LIST
40940: PUSH
40941: LD_INT 0
40943: PUSH
40944: LD_INT 3
40946: PUSH
40947: EMPTY
40948: LIST
40949: LIST
40950: PUSH
40951: LD_INT 0
40953: PUSH
40954: LD_INT 2
40956: PUSH
40957: EMPTY
40958: LIST
40959: LIST
40960: PUSH
40961: LD_INT 1
40963: PUSH
40964: LD_INT 3
40966: PUSH
40967: EMPTY
40968: LIST
40969: LIST
40970: PUSH
40971: LD_INT 1
40973: PUSH
40974: LD_INT 4
40976: PUSH
40977: EMPTY
40978: LIST
40979: LIST
40980: PUSH
40981: LD_INT 0
40983: PUSH
40984: LD_INT 4
40986: PUSH
40987: EMPTY
40988: LIST
40989: LIST
40990: PUSH
40991: LD_INT 1
40993: NEG
40994: PUSH
40995: LD_INT 3
40997: PUSH
40998: EMPTY
40999: LIST
41000: LIST
41001: PUSH
41002: LD_INT 1
41004: NEG
41005: PUSH
41006: LD_INT 2
41008: PUSH
41009: EMPTY
41010: LIST
41011: LIST
41012: PUSH
41013: LD_INT 2
41015: PUSH
41016: LD_INT 4
41018: PUSH
41019: EMPTY
41020: LIST
41021: LIST
41022: PUSH
41023: LD_INT 2
41025: NEG
41026: PUSH
41027: LD_INT 2
41029: PUSH
41030: EMPTY
41031: LIST
41032: LIST
41033: PUSH
41034: LD_INT 4
41036: NEG
41037: PUSH
41038: LD_INT 0
41040: PUSH
41041: EMPTY
41042: LIST
41043: LIST
41044: PUSH
41045: LD_INT 4
41047: NEG
41048: PUSH
41049: LD_INT 1
41051: NEG
41052: PUSH
41053: EMPTY
41054: LIST
41055: LIST
41056: PUSH
41057: LD_INT 3
41059: NEG
41060: PUSH
41061: LD_INT 0
41063: PUSH
41064: EMPTY
41065: LIST
41066: LIST
41067: PUSH
41068: LD_INT 3
41070: NEG
41071: PUSH
41072: LD_INT 1
41074: PUSH
41075: EMPTY
41076: LIST
41077: LIST
41078: PUSH
41079: LD_INT 4
41081: NEG
41082: PUSH
41083: LD_INT 1
41085: PUSH
41086: EMPTY
41087: LIST
41088: LIST
41089: PUSH
41090: LD_INT 5
41092: NEG
41093: PUSH
41094: LD_INT 0
41096: PUSH
41097: EMPTY
41098: LIST
41099: LIST
41100: PUSH
41101: LD_INT 5
41103: NEG
41104: PUSH
41105: LD_INT 1
41107: NEG
41108: PUSH
41109: EMPTY
41110: LIST
41111: LIST
41112: PUSH
41113: LD_INT 5
41115: NEG
41116: PUSH
41117: LD_INT 2
41119: NEG
41120: PUSH
41121: EMPTY
41122: LIST
41123: LIST
41124: PUSH
41125: LD_INT 3
41127: NEG
41128: PUSH
41129: LD_INT 2
41131: PUSH
41132: EMPTY
41133: LIST
41134: LIST
41135: PUSH
41136: LD_INT 3
41138: NEG
41139: PUSH
41140: LD_INT 3
41142: NEG
41143: PUSH
41144: EMPTY
41145: LIST
41146: LIST
41147: PUSH
41148: LD_INT 3
41150: NEG
41151: PUSH
41152: LD_INT 4
41154: NEG
41155: PUSH
41156: EMPTY
41157: LIST
41158: LIST
41159: PUSH
41160: LD_INT 2
41162: NEG
41163: PUSH
41164: LD_INT 3
41166: NEG
41167: PUSH
41168: EMPTY
41169: LIST
41170: LIST
41171: PUSH
41172: LD_INT 2
41174: NEG
41175: PUSH
41176: LD_INT 2
41178: NEG
41179: PUSH
41180: EMPTY
41181: LIST
41182: LIST
41183: PUSH
41184: LD_INT 3
41186: NEG
41187: PUSH
41188: LD_INT 2
41190: NEG
41191: PUSH
41192: EMPTY
41193: LIST
41194: LIST
41195: PUSH
41196: LD_INT 4
41198: NEG
41199: PUSH
41200: LD_INT 3
41202: NEG
41203: PUSH
41204: EMPTY
41205: LIST
41206: LIST
41207: PUSH
41208: LD_INT 4
41210: NEG
41211: PUSH
41212: LD_INT 4
41214: NEG
41215: PUSH
41216: EMPTY
41217: LIST
41218: LIST
41219: PUSH
41220: LD_INT 2
41222: NEG
41223: PUSH
41224: LD_INT 4
41226: NEG
41227: PUSH
41228: EMPTY
41229: LIST
41230: LIST
41231: PUSH
41232: LD_INT 4
41234: NEG
41235: PUSH
41236: LD_INT 2
41238: NEG
41239: PUSH
41240: EMPTY
41241: LIST
41242: LIST
41243: PUSH
41244: LD_INT 0
41246: PUSH
41247: LD_INT 4
41249: NEG
41250: PUSH
41251: EMPTY
41252: LIST
41253: LIST
41254: PUSH
41255: LD_INT 0
41257: PUSH
41258: LD_INT 5
41260: NEG
41261: PUSH
41262: EMPTY
41263: LIST
41264: LIST
41265: PUSH
41266: LD_INT 1
41268: PUSH
41269: LD_INT 4
41271: NEG
41272: PUSH
41273: EMPTY
41274: LIST
41275: LIST
41276: PUSH
41277: LD_INT 1
41279: PUSH
41280: LD_INT 3
41282: NEG
41283: PUSH
41284: EMPTY
41285: LIST
41286: LIST
41287: PUSH
41288: LD_INT 0
41290: PUSH
41291: LD_INT 3
41293: NEG
41294: PUSH
41295: EMPTY
41296: LIST
41297: LIST
41298: PUSH
41299: LD_INT 1
41301: NEG
41302: PUSH
41303: LD_INT 4
41305: NEG
41306: PUSH
41307: EMPTY
41308: LIST
41309: LIST
41310: PUSH
41311: LD_INT 1
41313: NEG
41314: PUSH
41315: LD_INT 5
41317: NEG
41318: PUSH
41319: EMPTY
41320: LIST
41321: LIST
41322: PUSH
41323: LD_INT 2
41325: PUSH
41326: LD_INT 3
41328: NEG
41329: PUSH
41330: EMPTY
41331: LIST
41332: LIST
41333: PUSH
41334: LD_INT 2
41336: NEG
41337: PUSH
41338: LD_INT 5
41340: NEG
41341: PUSH
41342: EMPTY
41343: LIST
41344: LIST
41345: PUSH
41346: EMPTY
41347: LIST
41348: LIST
41349: LIST
41350: LIST
41351: LIST
41352: LIST
41353: LIST
41354: LIST
41355: LIST
41356: LIST
41357: LIST
41358: LIST
41359: LIST
41360: LIST
41361: LIST
41362: LIST
41363: LIST
41364: LIST
41365: LIST
41366: LIST
41367: LIST
41368: LIST
41369: LIST
41370: LIST
41371: LIST
41372: LIST
41373: LIST
41374: LIST
41375: LIST
41376: LIST
41377: LIST
41378: LIST
41379: LIST
41380: LIST
41381: LIST
41382: LIST
41383: LIST
41384: LIST
41385: LIST
41386: LIST
41387: LIST
41388: LIST
41389: LIST
41390: LIST
41391: LIST
41392: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
41393: LD_ADDR_VAR 0 31
41397: PUSH
41398: LD_INT 0
41400: PUSH
41401: LD_INT 4
41403: PUSH
41404: EMPTY
41405: LIST
41406: LIST
41407: PUSH
41408: LD_INT 0
41410: PUSH
41411: LD_INT 3
41413: PUSH
41414: EMPTY
41415: LIST
41416: LIST
41417: PUSH
41418: LD_INT 1
41420: PUSH
41421: LD_INT 4
41423: PUSH
41424: EMPTY
41425: LIST
41426: LIST
41427: PUSH
41428: LD_INT 1
41430: PUSH
41431: LD_INT 5
41433: PUSH
41434: EMPTY
41435: LIST
41436: LIST
41437: PUSH
41438: LD_INT 0
41440: PUSH
41441: LD_INT 5
41443: PUSH
41444: EMPTY
41445: LIST
41446: LIST
41447: PUSH
41448: LD_INT 1
41450: NEG
41451: PUSH
41452: LD_INT 4
41454: PUSH
41455: EMPTY
41456: LIST
41457: LIST
41458: PUSH
41459: LD_INT 1
41461: NEG
41462: PUSH
41463: LD_INT 3
41465: PUSH
41466: EMPTY
41467: LIST
41468: LIST
41469: PUSH
41470: LD_INT 2
41472: PUSH
41473: LD_INT 5
41475: PUSH
41476: EMPTY
41477: LIST
41478: LIST
41479: PUSH
41480: LD_INT 2
41482: NEG
41483: PUSH
41484: LD_INT 3
41486: PUSH
41487: EMPTY
41488: LIST
41489: LIST
41490: PUSH
41491: LD_INT 3
41493: NEG
41494: PUSH
41495: LD_INT 0
41497: PUSH
41498: EMPTY
41499: LIST
41500: LIST
41501: PUSH
41502: LD_INT 3
41504: NEG
41505: PUSH
41506: LD_INT 1
41508: NEG
41509: PUSH
41510: EMPTY
41511: LIST
41512: LIST
41513: PUSH
41514: LD_INT 2
41516: NEG
41517: PUSH
41518: LD_INT 0
41520: PUSH
41521: EMPTY
41522: LIST
41523: LIST
41524: PUSH
41525: LD_INT 2
41527: NEG
41528: PUSH
41529: LD_INT 1
41531: PUSH
41532: EMPTY
41533: LIST
41534: LIST
41535: PUSH
41536: LD_INT 3
41538: NEG
41539: PUSH
41540: LD_INT 1
41542: PUSH
41543: EMPTY
41544: LIST
41545: LIST
41546: PUSH
41547: LD_INT 4
41549: NEG
41550: PUSH
41551: LD_INT 0
41553: PUSH
41554: EMPTY
41555: LIST
41556: LIST
41557: PUSH
41558: LD_INT 4
41560: NEG
41561: PUSH
41562: LD_INT 1
41564: NEG
41565: PUSH
41566: EMPTY
41567: LIST
41568: LIST
41569: PUSH
41570: LD_INT 4
41572: NEG
41573: PUSH
41574: LD_INT 2
41576: NEG
41577: PUSH
41578: EMPTY
41579: LIST
41580: LIST
41581: PUSH
41582: LD_INT 2
41584: NEG
41585: PUSH
41586: LD_INT 2
41588: PUSH
41589: EMPTY
41590: LIST
41591: LIST
41592: PUSH
41593: LD_INT 4
41595: NEG
41596: PUSH
41597: LD_INT 4
41599: NEG
41600: PUSH
41601: EMPTY
41602: LIST
41603: LIST
41604: PUSH
41605: LD_INT 4
41607: NEG
41608: PUSH
41609: LD_INT 5
41611: NEG
41612: PUSH
41613: EMPTY
41614: LIST
41615: LIST
41616: PUSH
41617: LD_INT 3
41619: NEG
41620: PUSH
41621: LD_INT 4
41623: NEG
41624: PUSH
41625: EMPTY
41626: LIST
41627: LIST
41628: PUSH
41629: LD_INT 3
41631: NEG
41632: PUSH
41633: LD_INT 3
41635: NEG
41636: PUSH
41637: EMPTY
41638: LIST
41639: LIST
41640: PUSH
41641: LD_INT 4
41643: NEG
41644: PUSH
41645: LD_INT 3
41647: NEG
41648: PUSH
41649: EMPTY
41650: LIST
41651: LIST
41652: PUSH
41653: LD_INT 5
41655: NEG
41656: PUSH
41657: LD_INT 4
41659: NEG
41660: PUSH
41661: EMPTY
41662: LIST
41663: LIST
41664: PUSH
41665: LD_INT 5
41667: NEG
41668: PUSH
41669: LD_INT 5
41671: NEG
41672: PUSH
41673: EMPTY
41674: LIST
41675: LIST
41676: PUSH
41677: LD_INT 3
41679: NEG
41680: PUSH
41681: LD_INT 5
41683: NEG
41684: PUSH
41685: EMPTY
41686: LIST
41687: LIST
41688: PUSH
41689: LD_INT 5
41691: NEG
41692: PUSH
41693: LD_INT 3
41695: NEG
41696: PUSH
41697: EMPTY
41698: LIST
41699: LIST
41700: PUSH
41701: LD_INT 0
41703: PUSH
41704: LD_INT 3
41706: NEG
41707: PUSH
41708: EMPTY
41709: LIST
41710: LIST
41711: PUSH
41712: LD_INT 0
41714: PUSH
41715: LD_INT 4
41717: NEG
41718: PUSH
41719: EMPTY
41720: LIST
41721: LIST
41722: PUSH
41723: LD_INT 1
41725: PUSH
41726: LD_INT 3
41728: NEG
41729: PUSH
41730: EMPTY
41731: LIST
41732: LIST
41733: PUSH
41734: LD_INT 1
41736: PUSH
41737: LD_INT 2
41739: NEG
41740: PUSH
41741: EMPTY
41742: LIST
41743: LIST
41744: PUSH
41745: LD_INT 0
41747: PUSH
41748: LD_INT 2
41750: NEG
41751: PUSH
41752: EMPTY
41753: LIST
41754: LIST
41755: PUSH
41756: LD_INT 1
41758: NEG
41759: PUSH
41760: LD_INT 3
41762: NEG
41763: PUSH
41764: EMPTY
41765: LIST
41766: LIST
41767: PUSH
41768: LD_INT 1
41770: NEG
41771: PUSH
41772: LD_INT 4
41774: NEG
41775: PUSH
41776: EMPTY
41777: LIST
41778: LIST
41779: PUSH
41780: LD_INT 2
41782: PUSH
41783: LD_INT 2
41785: NEG
41786: PUSH
41787: EMPTY
41788: LIST
41789: LIST
41790: PUSH
41791: LD_INT 2
41793: NEG
41794: PUSH
41795: LD_INT 4
41797: NEG
41798: PUSH
41799: EMPTY
41800: LIST
41801: LIST
41802: PUSH
41803: LD_INT 4
41805: PUSH
41806: LD_INT 0
41808: PUSH
41809: EMPTY
41810: LIST
41811: LIST
41812: PUSH
41813: LD_INT 4
41815: PUSH
41816: LD_INT 1
41818: NEG
41819: PUSH
41820: EMPTY
41821: LIST
41822: LIST
41823: PUSH
41824: LD_INT 5
41826: PUSH
41827: LD_INT 0
41829: PUSH
41830: EMPTY
41831: LIST
41832: LIST
41833: PUSH
41834: LD_INT 5
41836: PUSH
41837: LD_INT 1
41839: PUSH
41840: EMPTY
41841: LIST
41842: LIST
41843: PUSH
41844: LD_INT 4
41846: PUSH
41847: LD_INT 1
41849: PUSH
41850: EMPTY
41851: LIST
41852: LIST
41853: PUSH
41854: LD_INT 3
41856: PUSH
41857: LD_INT 0
41859: PUSH
41860: EMPTY
41861: LIST
41862: LIST
41863: PUSH
41864: LD_INT 3
41866: PUSH
41867: LD_INT 1
41869: NEG
41870: PUSH
41871: EMPTY
41872: LIST
41873: LIST
41874: PUSH
41875: LD_INT 3
41877: PUSH
41878: LD_INT 2
41880: NEG
41881: PUSH
41882: EMPTY
41883: LIST
41884: LIST
41885: PUSH
41886: LD_INT 5
41888: PUSH
41889: LD_INT 2
41891: PUSH
41892: EMPTY
41893: LIST
41894: LIST
41895: PUSH
41896: EMPTY
41897: LIST
41898: LIST
41899: LIST
41900: LIST
41901: LIST
41902: LIST
41903: LIST
41904: LIST
41905: LIST
41906: LIST
41907: LIST
41908: LIST
41909: LIST
41910: LIST
41911: LIST
41912: LIST
41913: LIST
41914: LIST
41915: LIST
41916: LIST
41917: LIST
41918: LIST
41919: LIST
41920: LIST
41921: LIST
41922: LIST
41923: LIST
41924: LIST
41925: LIST
41926: LIST
41927: LIST
41928: LIST
41929: LIST
41930: LIST
41931: LIST
41932: LIST
41933: LIST
41934: LIST
41935: LIST
41936: LIST
41937: LIST
41938: LIST
41939: LIST
41940: LIST
41941: LIST
41942: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
41943: LD_ADDR_VAR 0 32
41947: PUSH
41948: LD_INT 4
41950: NEG
41951: PUSH
41952: LD_INT 0
41954: PUSH
41955: EMPTY
41956: LIST
41957: LIST
41958: PUSH
41959: LD_INT 4
41961: NEG
41962: PUSH
41963: LD_INT 1
41965: NEG
41966: PUSH
41967: EMPTY
41968: LIST
41969: LIST
41970: PUSH
41971: LD_INT 3
41973: NEG
41974: PUSH
41975: LD_INT 0
41977: PUSH
41978: EMPTY
41979: LIST
41980: LIST
41981: PUSH
41982: LD_INT 3
41984: NEG
41985: PUSH
41986: LD_INT 1
41988: PUSH
41989: EMPTY
41990: LIST
41991: LIST
41992: PUSH
41993: LD_INT 4
41995: NEG
41996: PUSH
41997: LD_INT 1
41999: PUSH
42000: EMPTY
42001: LIST
42002: LIST
42003: PUSH
42004: LD_INT 5
42006: NEG
42007: PUSH
42008: LD_INT 0
42010: PUSH
42011: EMPTY
42012: LIST
42013: LIST
42014: PUSH
42015: LD_INT 5
42017: NEG
42018: PUSH
42019: LD_INT 1
42021: NEG
42022: PUSH
42023: EMPTY
42024: LIST
42025: LIST
42026: PUSH
42027: LD_INT 5
42029: NEG
42030: PUSH
42031: LD_INT 2
42033: NEG
42034: PUSH
42035: EMPTY
42036: LIST
42037: LIST
42038: PUSH
42039: LD_INT 3
42041: NEG
42042: PUSH
42043: LD_INT 2
42045: PUSH
42046: EMPTY
42047: LIST
42048: LIST
42049: PUSH
42050: LD_INT 3
42052: NEG
42053: PUSH
42054: LD_INT 3
42056: NEG
42057: PUSH
42058: EMPTY
42059: LIST
42060: LIST
42061: PUSH
42062: LD_INT 3
42064: NEG
42065: PUSH
42066: LD_INT 4
42068: NEG
42069: PUSH
42070: EMPTY
42071: LIST
42072: LIST
42073: PUSH
42074: LD_INT 2
42076: NEG
42077: PUSH
42078: LD_INT 3
42080: NEG
42081: PUSH
42082: EMPTY
42083: LIST
42084: LIST
42085: PUSH
42086: LD_INT 2
42088: NEG
42089: PUSH
42090: LD_INT 2
42092: NEG
42093: PUSH
42094: EMPTY
42095: LIST
42096: LIST
42097: PUSH
42098: LD_INT 3
42100: NEG
42101: PUSH
42102: LD_INT 2
42104: NEG
42105: PUSH
42106: EMPTY
42107: LIST
42108: LIST
42109: PUSH
42110: LD_INT 4
42112: NEG
42113: PUSH
42114: LD_INT 3
42116: NEG
42117: PUSH
42118: EMPTY
42119: LIST
42120: LIST
42121: PUSH
42122: LD_INT 4
42124: NEG
42125: PUSH
42126: LD_INT 4
42128: NEG
42129: PUSH
42130: EMPTY
42131: LIST
42132: LIST
42133: PUSH
42134: LD_INT 2
42136: NEG
42137: PUSH
42138: LD_INT 4
42140: NEG
42141: PUSH
42142: EMPTY
42143: LIST
42144: LIST
42145: PUSH
42146: LD_INT 4
42148: NEG
42149: PUSH
42150: LD_INT 2
42152: NEG
42153: PUSH
42154: EMPTY
42155: LIST
42156: LIST
42157: PUSH
42158: LD_INT 0
42160: PUSH
42161: LD_INT 4
42163: NEG
42164: PUSH
42165: EMPTY
42166: LIST
42167: LIST
42168: PUSH
42169: LD_INT 0
42171: PUSH
42172: LD_INT 5
42174: NEG
42175: PUSH
42176: EMPTY
42177: LIST
42178: LIST
42179: PUSH
42180: LD_INT 1
42182: PUSH
42183: LD_INT 4
42185: NEG
42186: PUSH
42187: EMPTY
42188: LIST
42189: LIST
42190: PUSH
42191: LD_INT 1
42193: PUSH
42194: LD_INT 3
42196: NEG
42197: PUSH
42198: EMPTY
42199: LIST
42200: LIST
42201: PUSH
42202: LD_INT 0
42204: PUSH
42205: LD_INT 3
42207: NEG
42208: PUSH
42209: EMPTY
42210: LIST
42211: LIST
42212: PUSH
42213: LD_INT 1
42215: NEG
42216: PUSH
42217: LD_INT 4
42219: NEG
42220: PUSH
42221: EMPTY
42222: LIST
42223: LIST
42224: PUSH
42225: LD_INT 1
42227: NEG
42228: PUSH
42229: LD_INT 5
42231: NEG
42232: PUSH
42233: EMPTY
42234: LIST
42235: LIST
42236: PUSH
42237: LD_INT 2
42239: PUSH
42240: LD_INT 3
42242: NEG
42243: PUSH
42244: EMPTY
42245: LIST
42246: LIST
42247: PUSH
42248: LD_INT 2
42250: NEG
42251: PUSH
42252: LD_INT 5
42254: NEG
42255: PUSH
42256: EMPTY
42257: LIST
42258: LIST
42259: PUSH
42260: LD_INT 3
42262: PUSH
42263: LD_INT 0
42265: PUSH
42266: EMPTY
42267: LIST
42268: LIST
42269: PUSH
42270: LD_INT 3
42272: PUSH
42273: LD_INT 1
42275: NEG
42276: PUSH
42277: EMPTY
42278: LIST
42279: LIST
42280: PUSH
42281: LD_INT 4
42283: PUSH
42284: LD_INT 0
42286: PUSH
42287: EMPTY
42288: LIST
42289: LIST
42290: PUSH
42291: LD_INT 4
42293: PUSH
42294: LD_INT 1
42296: PUSH
42297: EMPTY
42298: LIST
42299: LIST
42300: PUSH
42301: LD_INT 3
42303: PUSH
42304: LD_INT 1
42306: PUSH
42307: EMPTY
42308: LIST
42309: LIST
42310: PUSH
42311: LD_INT 2
42313: PUSH
42314: LD_INT 0
42316: PUSH
42317: EMPTY
42318: LIST
42319: LIST
42320: PUSH
42321: LD_INT 2
42323: PUSH
42324: LD_INT 1
42326: NEG
42327: PUSH
42328: EMPTY
42329: LIST
42330: LIST
42331: PUSH
42332: LD_INT 2
42334: PUSH
42335: LD_INT 2
42337: NEG
42338: PUSH
42339: EMPTY
42340: LIST
42341: LIST
42342: PUSH
42343: LD_INT 4
42345: PUSH
42346: LD_INT 2
42348: PUSH
42349: EMPTY
42350: LIST
42351: LIST
42352: PUSH
42353: LD_INT 4
42355: PUSH
42356: LD_INT 4
42358: PUSH
42359: EMPTY
42360: LIST
42361: LIST
42362: PUSH
42363: LD_INT 4
42365: PUSH
42366: LD_INT 3
42368: PUSH
42369: EMPTY
42370: LIST
42371: LIST
42372: PUSH
42373: LD_INT 5
42375: PUSH
42376: LD_INT 4
42378: PUSH
42379: EMPTY
42380: LIST
42381: LIST
42382: PUSH
42383: LD_INT 5
42385: PUSH
42386: LD_INT 5
42388: PUSH
42389: EMPTY
42390: LIST
42391: LIST
42392: PUSH
42393: LD_INT 4
42395: PUSH
42396: LD_INT 5
42398: PUSH
42399: EMPTY
42400: LIST
42401: LIST
42402: PUSH
42403: LD_INT 3
42405: PUSH
42406: LD_INT 4
42408: PUSH
42409: EMPTY
42410: LIST
42411: LIST
42412: PUSH
42413: LD_INT 3
42415: PUSH
42416: LD_INT 3
42418: PUSH
42419: EMPTY
42420: LIST
42421: LIST
42422: PUSH
42423: LD_INT 5
42425: PUSH
42426: LD_INT 3
42428: PUSH
42429: EMPTY
42430: LIST
42431: LIST
42432: PUSH
42433: LD_INT 3
42435: PUSH
42436: LD_INT 5
42438: PUSH
42439: EMPTY
42440: LIST
42441: LIST
42442: PUSH
42443: EMPTY
42444: LIST
42445: LIST
42446: LIST
42447: LIST
42448: LIST
42449: LIST
42450: LIST
42451: LIST
42452: LIST
42453: LIST
42454: LIST
42455: LIST
42456: LIST
42457: LIST
42458: LIST
42459: LIST
42460: LIST
42461: LIST
42462: LIST
42463: LIST
42464: LIST
42465: LIST
42466: LIST
42467: LIST
42468: LIST
42469: LIST
42470: LIST
42471: LIST
42472: LIST
42473: LIST
42474: LIST
42475: LIST
42476: LIST
42477: LIST
42478: LIST
42479: LIST
42480: LIST
42481: LIST
42482: LIST
42483: LIST
42484: LIST
42485: LIST
42486: LIST
42487: LIST
42488: LIST
42489: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
42490: LD_ADDR_VAR 0 33
42494: PUSH
42495: LD_INT 4
42497: NEG
42498: PUSH
42499: LD_INT 4
42501: NEG
42502: PUSH
42503: EMPTY
42504: LIST
42505: LIST
42506: PUSH
42507: LD_INT 4
42509: NEG
42510: PUSH
42511: LD_INT 5
42513: NEG
42514: PUSH
42515: EMPTY
42516: LIST
42517: LIST
42518: PUSH
42519: LD_INT 3
42521: NEG
42522: PUSH
42523: LD_INT 4
42525: NEG
42526: PUSH
42527: EMPTY
42528: LIST
42529: LIST
42530: PUSH
42531: LD_INT 3
42533: NEG
42534: PUSH
42535: LD_INT 3
42537: NEG
42538: PUSH
42539: EMPTY
42540: LIST
42541: LIST
42542: PUSH
42543: LD_INT 4
42545: NEG
42546: PUSH
42547: LD_INT 3
42549: NEG
42550: PUSH
42551: EMPTY
42552: LIST
42553: LIST
42554: PUSH
42555: LD_INT 5
42557: NEG
42558: PUSH
42559: LD_INT 4
42561: NEG
42562: PUSH
42563: EMPTY
42564: LIST
42565: LIST
42566: PUSH
42567: LD_INT 5
42569: NEG
42570: PUSH
42571: LD_INT 5
42573: NEG
42574: PUSH
42575: EMPTY
42576: LIST
42577: LIST
42578: PUSH
42579: LD_INT 3
42581: NEG
42582: PUSH
42583: LD_INT 5
42585: NEG
42586: PUSH
42587: EMPTY
42588: LIST
42589: LIST
42590: PUSH
42591: LD_INT 5
42593: NEG
42594: PUSH
42595: LD_INT 3
42597: NEG
42598: PUSH
42599: EMPTY
42600: LIST
42601: LIST
42602: PUSH
42603: LD_INT 0
42605: PUSH
42606: LD_INT 3
42608: NEG
42609: PUSH
42610: EMPTY
42611: LIST
42612: LIST
42613: PUSH
42614: LD_INT 0
42616: PUSH
42617: LD_INT 4
42619: NEG
42620: PUSH
42621: EMPTY
42622: LIST
42623: LIST
42624: PUSH
42625: LD_INT 1
42627: PUSH
42628: LD_INT 3
42630: NEG
42631: PUSH
42632: EMPTY
42633: LIST
42634: LIST
42635: PUSH
42636: LD_INT 1
42638: PUSH
42639: LD_INT 2
42641: NEG
42642: PUSH
42643: EMPTY
42644: LIST
42645: LIST
42646: PUSH
42647: LD_INT 0
42649: PUSH
42650: LD_INT 2
42652: NEG
42653: PUSH
42654: EMPTY
42655: LIST
42656: LIST
42657: PUSH
42658: LD_INT 1
42660: NEG
42661: PUSH
42662: LD_INT 3
42664: NEG
42665: PUSH
42666: EMPTY
42667: LIST
42668: LIST
42669: PUSH
42670: LD_INT 1
42672: NEG
42673: PUSH
42674: LD_INT 4
42676: NEG
42677: PUSH
42678: EMPTY
42679: LIST
42680: LIST
42681: PUSH
42682: LD_INT 2
42684: PUSH
42685: LD_INT 2
42687: NEG
42688: PUSH
42689: EMPTY
42690: LIST
42691: LIST
42692: PUSH
42693: LD_INT 2
42695: NEG
42696: PUSH
42697: LD_INT 4
42699: NEG
42700: PUSH
42701: EMPTY
42702: LIST
42703: LIST
42704: PUSH
42705: LD_INT 4
42707: PUSH
42708: LD_INT 0
42710: PUSH
42711: EMPTY
42712: LIST
42713: LIST
42714: PUSH
42715: LD_INT 4
42717: PUSH
42718: LD_INT 1
42720: NEG
42721: PUSH
42722: EMPTY
42723: LIST
42724: LIST
42725: PUSH
42726: LD_INT 5
42728: PUSH
42729: LD_INT 0
42731: PUSH
42732: EMPTY
42733: LIST
42734: LIST
42735: PUSH
42736: LD_INT 5
42738: PUSH
42739: LD_INT 1
42741: PUSH
42742: EMPTY
42743: LIST
42744: LIST
42745: PUSH
42746: LD_INT 4
42748: PUSH
42749: LD_INT 1
42751: PUSH
42752: EMPTY
42753: LIST
42754: LIST
42755: PUSH
42756: LD_INT 3
42758: PUSH
42759: LD_INT 0
42761: PUSH
42762: EMPTY
42763: LIST
42764: LIST
42765: PUSH
42766: LD_INT 3
42768: PUSH
42769: LD_INT 1
42771: NEG
42772: PUSH
42773: EMPTY
42774: LIST
42775: LIST
42776: PUSH
42777: LD_INT 3
42779: PUSH
42780: LD_INT 2
42782: NEG
42783: PUSH
42784: EMPTY
42785: LIST
42786: LIST
42787: PUSH
42788: LD_INT 5
42790: PUSH
42791: LD_INT 2
42793: PUSH
42794: EMPTY
42795: LIST
42796: LIST
42797: PUSH
42798: LD_INT 3
42800: PUSH
42801: LD_INT 3
42803: PUSH
42804: EMPTY
42805: LIST
42806: LIST
42807: PUSH
42808: LD_INT 3
42810: PUSH
42811: LD_INT 2
42813: PUSH
42814: EMPTY
42815: LIST
42816: LIST
42817: PUSH
42818: LD_INT 4
42820: PUSH
42821: LD_INT 3
42823: PUSH
42824: EMPTY
42825: LIST
42826: LIST
42827: PUSH
42828: LD_INT 4
42830: PUSH
42831: LD_INT 4
42833: PUSH
42834: EMPTY
42835: LIST
42836: LIST
42837: PUSH
42838: LD_INT 3
42840: PUSH
42841: LD_INT 4
42843: PUSH
42844: EMPTY
42845: LIST
42846: LIST
42847: PUSH
42848: LD_INT 2
42850: PUSH
42851: LD_INT 3
42853: PUSH
42854: EMPTY
42855: LIST
42856: LIST
42857: PUSH
42858: LD_INT 2
42860: PUSH
42861: LD_INT 2
42863: PUSH
42864: EMPTY
42865: LIST
42866: LIST
42867: PUSH
42868: LD_INT 4
42870: PUSH
42871: LD_INT 2
42873: PUSH
42874: EMPTY
42875: LIST
42876: LIST
42877: PUSH
42878: LD_INT 2
42880: PUSH
42881: LD_INT 4
42883: PUSH
42884: EMPTY
42885: LIST
42886: LIST
42887: PUSH
42888: LD_INT 0
42890: PUSH
42891: LD_INT 4
42893: PUSH
42894: EMPTY
42895: LIST
42896: LIST
42897: PUSH
42898: LD_INT 0
42900: PUSH
42901: LD_INT 3
42903: PUSH
42904: EMPTY
42905: LIST
42906: LIST
42907: PUSH
42908: LD_INT 1
42910: PUSH
42911: LD_INT 4
42913: PUSH
42914: EMPTY
42915: LIST
42916: LIST
42917: PUSH
42918: LD_INT 1
42920: PUSH
42921: LD_INT 5
42923: PUSH
42924: EMPTY
42925: LIST
42926: LIST
42927: PUSH
42928: LD_INT 0
42930: PUSH
42931: LD_INT 5
42933: PUSH
42934: EMPTY
42935: LIST
42936: LIST
42937: PUSH
42938: LD_INT 1
42940: NEG
42941: PUSH
42942: LD_INT 4
42944: PUSH
42945: EMPTY
42946: LIST
42947: LIST
42948: PUSH
42949: LD_INT 1
42951: NEG
42952: PUSH
42953: LD_INT 3
42955: PUSH
42956: EMPTY
42957: LIST
42958: LIST
42959: PUSH
42960: LD_INT 2
42962: PUSH
42963: LD_INT 5
42965: PUSH
42966: EMPTY
42967: LIST
42968: LIST
42969: PUSH
42970: LD_INT 2
42972: NEG
42973: PUSH
42974: LD_INT 3
42976: PUSH
42977: EMPTY
42978: LIST
42979: LIST
42980: PUSH
42981: EMPTY
42982: LIST
42983: LIST
42984: LIST
42985: LIST
42986: LIST
42987: LIST
42988: LIST
42989: LIST
42990: LIST
42991: LIST
42992: LIST
42993: LIST
42994: LIST
42995: LIST
42996: LIST
42997: LIST
42998: LIST
42999: LIST
43000: LIST
43001: LIST
43002: LIST
43003: LIST
43004: LIST
43005: LIST
43006: LIST
43007: LIST
43008: LIST
43009: LIST
43010: LIST
43011: LIST
43012: LIST
43013: LIST
43014: LIST
43015: LIST
43016: LIST
43017: LIST
43018: LIST
43019: LIST
43020: LIST
43021: LIST
43022: LIST
43023: LIST
43024: LIST
43025: LIST
43026: LIST
43027: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
43028: LD_ADDR_VAR 0 34
43032: PUSH
43033: LD_INT 0
43035: PUSH
43036: LD_INT 4
43038: NEG
43039: PUSH
43040: EMPTY
43041: LIST
43042: LIST
43043: PUSH
43044: LD_INT 0
43046: PUSH
43047: LD_INT 5
43049: NEG
43050: PUSH
43051: EMPTY
43052: LIST
43053: LIST
43054: PUSH
43055: LD_INT 1
43057: PUSH
43058: LD_INT 4
43060: NEG
43061: PUSH
43062: EMPTY
43063: LIST
43064: LIST
43065: PUSH
43066: LD_INT 1
43068: PUSH
43069: LD_INT 3
43071: NEG
43072: PUSH
43073: EMPTY
43074: LIST
43075: LIST
43076: PUSH
43077: LD_INT 0
43079: PUSH
43080: LD_INT 3
43082: NEG
43083: PUSH
43084: EMPTY
43085: LIST
43086: LIST
43087: PUSH
43088: LD_INT 1
43090: NEG
43091: PUSH
43092: LD_INT 4
43094: NEG
43095: PUSH
43096: EMPTY
43097: LIST
43098: LIST
43099: PUSH
43100: LD_INT 1
43102: NEG
43103: PUSH
43104: LD_INT 5
43106: NEG
43107: PUSH
43108: EMPTY
43109: LIST
43110: LIST
43111: PUSH
43112: LD_INT 2
43114: PUSH
43115: LD_INT 3
43117: NEG
43118: PUSH
43119: EMPTY
43120: LIST
43121: LIST
43122: PUSH
43123: LD_INT 2
43125: NEG
43126: PUSH
43127: LD_INT 5
43129: NEG
43130: PUSH
43131: EMPTY
43132: LIST
43133: LIST
43134: PUSH
43135: LD_INT 3
43137: PUSH
43138: LD_INT 0
43140: PUSH
43141: EMPTY
43142: LIST
43143: LIST
43144: PUSH
43145: LD_INT 3
43147: PUSH
43148: LD_INT 1
43150: NEG
43151: PUSH
43152: EMPTY
43153: LIST
43154: LIST
43155: PUSH
43156: LD_INT 4
43158: PUSH
43159: LD_INT 0
43161: PUSH
43162: EMPTY
43163: LIST
43164: LIST
43165: PUSH
43166: LD_INT 4
43168: PUSH
43169: LD_INT 1
43171: PUSH
43172: EMPTY
43173: LIST
43174: LIST
43175: PUSH
43176: LD_INT 3
43178: PUSH
43179: LD_INT 1
43181: PUSH
43182: EMPTY
43183: LIST
43184: LIST
43185: PUSH
43186: LD_INT 2
43188: PUSH
43189: LD_INT 0
43191: PUSH
43192: EMPTY
43193: LIST
43194: LIST
43195: PUSH
43196: LD_INT 2
43198: PUSH
43199: LD_INT 1
43201: NEG
43202: PUSH
43203: EMPTY
43204: LIST
43205: LIST
43206: PUSH
43207: LD_INT 2
43209: PUSH
43210: LD_INT 2
43212: NEG
43213: PUSH
43214: EMPTY
43215: LIST
43216: LIST
43217: PUSH
43218: LD_INT 4
43220: PUSH
43221: LD_INT 2
43223: PUSH
43224: EMPTY
43225: LIST
43226: LIST
43227: PUSH
43228: LD_INT 4
43230: PUSH
43231: LD_INT 4
43233: PUSH
43234: EMPTY
43235: LIST
43236: LIST
43237: PUSH
43238: LD_INT 4
43240: PUSH
43241: LD_INT 3
43243: PUSH
43244: EMPTY
43245: LIST
43246: LIST
43247: PUSH
43248: LD_INT 5
43250: PUSH
43251: LD_INT 4
43253: PUSH
43254: EMPTY
43255: LIST
43256: LIST
43257: PUSH
43258: LD_INT 5
43260: PUSH
43261: LD_INT 5
43263: PUSH
43264: EMPTY
43265: LIST
43266: LIST
43267: PUSH
43268: LD_INT 4
43270: PUSH
43271: LD_INT 5
43273: PUSH
43274: EMPTY
43275: LIST
43276: LIST
43277: PUSH
43278: LD_INT 3
43280: PUSH
43281: LD_INT 4
43283: PUSH
43284: EMPTY
43285: LIST
43286: LIST
43287: PUSH
43288: LD_INT 3
43290: PUSH
43291: LD_INT 3
43293: PUSH
43294: EMPTY
43295: LIST
43296: LIST
43297: PUSH
43298: LD_INT 5
43300: PUSH
43301: LD_INT 3
43303: PUSH
43304: EMPTY
43305: LIST
43306: LIST
43307: PUSH
43308: LD_INT 3
43310: PUSH
43311: LD_INT 5
43313: PUSH
43314: EMPTY
43315: LIST
43316: LIST
43317: PUSH
43318: LD_INT 0
43320: PUSH
43321: LD_INT 3
43323: PUSH
43324: EMPTY
43325: LIST
43326: LIST
43327: PUSH
43328: LD_INT 0
43330: PUSH
43331: LD_INT 2
43333: PUSH
43334: EMPTY
43335: LIST
43336: LIST
43337: PUSH
43338: LD_INT 1
43340: PUSH
43341: LD_INT 3
43343: PUSH
43344: EMPTY
43345: LIST
43346: LIST
43347: PUSH
43348: LD_INT 1
43350: PUSH
43351: LD_INT 4
43353: PUSH
43354: EMPTY
43355: LIST
43356: LIST
43357: PUSH
43358: LD_INT 0
43360: PUSH
43361: LD_INT 4
43363: PUSH
43364: EMPTY
43365: LIST
43366: LIST
43367: PUSH
43368: LD_INT 1
43370: NEG
43371: PUSH
43372: LD_INT 3
43374: PUSH
43375: EMPTY
43376: LIST
43377: LIST
43378: PUSH
43379: LD_INT 1
43381: NEG
43382: PUSH
43383: LD_INT 2
43385: PUSH
43386: EMPTY
43387: LIST
43388: LIST
43389: PUSH
43390: LD_INT 2
43392: PUSH
43393: LD_INT 4
43395: PUSH
43396: EMPTY
43397: LIST
43398: LIST
43399: PUSH
43400: LD_INT 2
43402: NEG
43403: PUSH
43404: LD_INT 2
43406: PUSH
43407: EMPTY
43408: LIST
43409: LIST
43410: PUSH
43411: LD_INT 4
43413: NEG
43414: PUSH
43415: LD_INT 0
43417: PUSH
43418: EMPTY
43419: LIST
43420: LIST
43421: PUSH
43422: LD_INT 4
43424: NEG
43425: PUSH
43426: LD_INT 1
43428: NEG
43429: PUSH
43430: EMPTY
43431: LIST
43432: LIST
43433: PUSH
43434: LD_INT 3
43436: NEG
43437: PUSH
43438: LD_INT 0
43440: PUSH
43441: EMPTY
43442: LIST
43443: LIST
43444: PUSH
43445: LD_INT 3
43447: NEG
43448: PUSH
43449: LD_INT 1
43451: PUSH
43452: EMPTY
43453: LIST
43454: LIST
43455: PUSH
43456: LD_INT 4
43458: NEG
43459: PUSH
43460: LD_INT 1
43462: PUSH
43463: EMPTY
43464: LIST
43465: LIST
43466: PUSH
43467: LD_INT 5
43469: NEG
43470: PUSH
43471: LD_INT 0
43473: PUSH
43474: EMPTY
43475: LIST
43476: LIST
43477: PUSH
43478: LD_INT 5
43480: NEG
43481: PUSH
43482: LD_INT 1
43484: NEG
43485: PUSH
43486: EMPTY
43487: LIST
43488: LIST
43489: PUSH
43490: LD_INT 5
43492: NEG
43493: PUSH
43494: LD_INT 2
43496: NEG
43497: PUSH
43498: EMPTY
43499: LIST
43500: LIST
43501: PUSH
43502: LD_INT 3
43504: NEG
43505: PUSH
43506: LD_INT 2
43508: PUSH
43509: EMPTY
43510: LIST
43511: LIST
43512: PUSH
43513: EMPTY
43514: LIST
43515: LIST
43516: LIST
43517: LIST
43518: LIST
43519: LIST
43520: LIST
43521: LIST
43522: LIST
43523: LIST
43524: LIST
43525: LIST
43526: LIST
43527: LIST
43528: LIST
43529: LIST
43530: LIST
43531: LIST
43532: LIST
43533: LIST
43534: LIST
43535: LIST
43536: LIST
43537: LIST
43538: LIST
43539: LIST
43540: LIST
43541: LIST
43542: LIST
43543: LIST
43544: LIST
43545: LIST
43546: LIST
43547: LIST
43548: LIST
43549: LIST
43550: LIST
43551: LIST
43552: LIST
43553: LIST
43554: LIST
43555: LIST
43556: LIST
43557: LIST
43558: LIST
43559: ST_TO_ADDR
// end ; end ;
43560: GO 43563
43562: POP
// case btype of b_depot , b_warehouse :
43563: LD_VAR 0 1
43567: PUSH
43568: LD_INT 0
43570: DOUBLE
43571: EQUAL
43572: IFTRUE 43582
43574: LD_INT 1
43576: DOUBLE
43577: EQUAL
43578: IFTRUE 43582
43580: GO 43783
43582: POP
// case nation of nation_american :
43583: LD_VAR 0 5
43587: PUSH
43588: LD_INT 1
43590: DOUBLE
43591: EQUAL
43592: IFTRUE 43596
43594: GO 43652
43596: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
43597: LD_ADDR_VAR 0 9
43601: PUSH
43602: LD_VAR 0 11
43606: PUSH
43607: LD_VAR 0 12
43611: PUSH
43612: LD_VAR 0 13
43616: PUSH
43617: LD_VAR 0 14
43621: PUSH
43622: LD_VAR 0 15
43626: PUSH
43627: LD_VAR 0 16
43631: PUSH
43632: EMPTY
43633: LIST
43634: LIST
43635: LIST
43636: LIST
43637: LIST
43638: LIST
43639: PUSH
43640: LD_VAR 0 4
43644: PUSH
43645: LD_INT 1
43647: PLUS
43648: ARRAY
43649: ST_TO_ADDR
43650: GO 43781
43652: LD_INT 2
43654: DOUBLE
43655: EQUAL
43656: IFTRUE 43660
43658: GO 43716
43660: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
43661: LD_ADDR_VAR 0 9
43665: PUSH
43666: LD_VAR 0 17
43670: PUSH
43671: LD_VAR 0 18
43675: PUSH
43676: LD_VAR 0 19
43680: PUSH
43681: LD_VAR 0 20
43685: PUSH
43686: LD_VAR 0 21
43690: PUSH
43691: LD_VAR 0 22
43695: PUSH
43696: EMPTY
43697: LIST
43698: LIST
43699: LIST
43700: LIST
43701: LIST
43702: LIST
43703: PUSH
43704: LD_VAR 0 4
43708: PUSH
43709: LD_INT 1
43711: PLUS
43712: ARRAY
43713: ST_TO_ADDR
43714: GO 43781
43716: LD_INT 3
43718: DOUBLE
43719: EQUAL
43720: IFTRUE 43724
43722: GO 43780
43724: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
43725: LD_ADDR_VAR 0 9
43729: PUSH
43730: LD_VAR 0 23
43734: PUSH
43735: LD_VAR 0 24
43739: PUSH
43740: LD_VAR 0 25
43744: PUSH
43745: LD_VAR 0 26
43749: PUSH
43750: LD_VAR 0 27
43754: PUSH
43755: LD_VAR 0 28
43759: PUSH
43760: EMPTY
43761: LIST
43762: LIST
43763: LIST
43764: LIST
43765: LIST
43766: LIST
43767: PUSH
43768: LD_VAR 0 4
43772: PUSH
43773: LD_INT 1
43775: PLUS
43776: ARRAY
43777: ST_TO_ADDR
43778: GO 43781
43780: POP
43781: GO 44336
43783: LD_INT 2
43785: DOUBLE
43786: EQUAL
43787: IFTRUE 43797
43789: LD_INT 3
43791: DOUBLE
43792: EQUAL
43793: IFTRUE 43797
43795: GO 43853
43797: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
43798: LD_ADDR_VAR 0 9
43802: PUSH
43803: LD_VAR 0 29
43807: PUSH
43808: LD_VAR 0 30
43812: PUSH
43813: LD_VAR 0 31
43817: PUSH
43818: LD_VAR 0 32
43822: PUSH
43823: LD_VAR 0 33
43827: PUSH
43828: LD_VAR 0 34
43832: PUSH
43833: EMPTY
43834: LIST
43835: LIST
43836: LIST
43837: LIST
43838: LIST
43839: LIST
43840: PUSH
43841: LD_VAR 0 4
43845: PUSH
43846: LD_INT 1
43848: PLUS
43849: ARRAY
43850: ST_TO_ADDR
43851: GO 44336
43853: LD_INT 16
43855: DOUBLE
43856: EQUAL
43857: IFTRUE 43915
43859: LD_INT 17
43861: DOUBLE
43862: EQUAL
43863: IFTRUE 43915
43865: LD_INT 18
43867: DOUBLE
43868: EQUAL
43869: IFTRUE 43915
43871: LD_INT 19
43873: DOUBLE
43874: EQUAL
43875: IFTRUE 43915
43877: LD_INT 22
43879: DOUBLE
43880: EQUAL
43881: IFTRUE 43915
43883: LD_INT 20
43885: DOUBLE
43886: EQUAL
43887: IFTRUE 43915
43889: LD_INT 21
43891: DOUBLE
43892: EQUAL
43893: IFTRUE 43915
43895: LD_INT 23
43897: DOUBLE
43898: EQUAL
43899: IFTRUE 43915
43901: LD_INT 24
43903: DOUBLE
43904: EQUAL
43905: IFTRUE 43915
43907: LD_INT 25
43909: DOUBLE
43910: EQUAL
43911: IFTRUE 43915
43913: GO 43971
43915: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
43916: LD_ADDR_VAR 0 9
43920: PUSH
43921: LD_VAR 0 35
43925: PUSH
43926: LD_VAR 0 36
43930: PUSH
43931: LD_VAR 0 37
43935: PUSH
43936: LD_VAR 0 38
43940: PUSH
43941: LD_VAR 0 39
43945: PUSH
43946: LD_VAR 0 40
43950: PUSH
43951: EMPTY
43952: LIST
43953: LIST
43954: LIST
43955: LIST
43956: LIST
43957: LIST
43958: PUSH
43959: LD_VAR 0 4
43963: PUSH
43964: LD_INT 1
43966: PLUS
43967: ARRAY
43968: ST_TO_ADDR
43969: GO 44336
43971: LD_INT 6
43973: DOUBLE
43974: EQUAL
43975: IFTRUE 44027
43977: LD_INT 7
43979: DOUBLE
43980: EQUAL
43981: IFTRUE 44027
43983: LD_INT 8
43985: DOUBLE
43986: EQUAL
43987: IFTRUE 44027
43989: LD_INT 13
43991: DOUBLE
43992: EQUAL
43993: IFTRUE 44027
43995: LD_INT 12
43997: DOUBLE
43998: EQUAL
43999: IFTRUE 44027
44001: LD_INT 15
44003: DOUBLE
44004: EQUAL
44005: IFTRUE 44027
44007: LD_INT 11
44009: DOUBLE
44010: EQUAL
44011: IFTRUE 44027
44013: LD_INT 14
44015: DOUBLE
44016: EQUAL
44017: IFTRUE 44027
44019: LD_INT 10
44021: DOUBLE
44022: EQUAL
44023: IFTRUE 44027
44025: GO 44083
44027: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
44028: LD_ADDR_VAR 0 9
44032: PUSH
44033: LD_VAR 0 41
44037: PUSH
44038: LD_VAR 0 42
44042: PUSH
44043: LD_VAR 0 43
44047: PUSH
44048: LD_VAR 0 44
44052: PUSH
44053: LD_VAR 0 45
44057: PUSH
44058: LD_VAR 0 46
44062: PUSH
44063: EMPTY
44064: LIST
44065: LIST
44066: LIST
44067: LIST
44068: LIST
44069: LIST
44070: PUSH
44071: LD_VAR 0 4
44075: PUSH
44076: LD_INT 1
44078: PLUS
44079: ARRAY
44080: ST_TO_ADDR
44081: GO 44336
44083: LD_INT 36
44085: DOUBLE
44086: EQUAL
44087: IFTRUE 44091
44089: GO 44147
44091: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
44092: LD_ADDR_VAR 0 9
44096: PUSH
44097: LD_VAR 0 47
44101: PUSH
44102: LD_VAR 0 48
44106: PUSH
44107: LD_VAR 0 49
44111: PUSH
44112: LD_VAR 0 50
44116: PUSH
44117: LD_VAR 0 51
44121: PUSH
44122: LD_VAR 0 52
44126: PUSH
44127: EMPTY
44128: LIST
44129: LIST
44130: LIST
44131: LIST
44132: LIST
44133: LIST
44134: PUSH
44135: LD_VAR 0 4
44139: PUSH
44140: LD_INT 1
44142: PLUS
44143: ARRAY
44144: ST_TO_ADDR
44145: GO 44336
44147: LD_INT 4
44149: DOUBLE
44150: EQUAL
44151: IFTRUE 44173
44153: LD_INT 5
44155: DOUBLE
44156: EQUAL
44157: IFTRUE 44173
44159: LD_INT 34
44161: DOUBLE
44162: EQUAL
44163: IFTRUE 44173
44165: LD_INT 37
44167: DOUBLE
44168: EQUAL
44169: IFTRUE 44173
44171: GO 44229
44173: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
44174: LD_ADDR_VAR 0 9
44178: PUSH
44179: LD_VAR 0 53
44183: PUSH
44184: LD_VAR 0 54
44188: PUSH
44189: LD_VAR 0 55
44193: PUSH
44194: LD_VAR 0 56
44198: PUSH
44199: LD_VAR 0 57
44203: PUSH
44204: LD_VAR 0 58
44208: PUSH
44209: EMPTY
44210: LIST
44211: LIST
44212: LIST
44213: LIST
44214: LIST
44215: LIST
44216: PUSH
44217: LD_VAR 0 4
44221: PUSH
44222: LD_INT 1
44224: PLUS
44225: ARRAY
44226: ST_TO_ADDR
44227: GO 44336
44229: LD_INT 31
44231: DOUBLE
44232: EQUAL
44233: IFTRUE 44279
44235: LD_INT 32
44237: DOUBLE
44238: EQUAL
44239: IFTRUE 44279
44241: LD_INT 33
44243: DOUBLE
44244: EQUAL
44245: IFTRUE 44279
44247: LD_INT 27
44249: DOUBLE
44250: EQUAL
44251: IFTRUE 44279
44253: LD_INT 26
44255: DOUBLE
44256: EQUAL
44257: IFTRUE 44279
44259: LD_INT 28
44261: DOUBLE
44262: EQUAL
44263: IFTRUE 44279
44265: LD_INT 29
44267: DOUBLE
44268: EQUAL
44269: IFTRUE 44279
44271: LD_INT 30
44273: DOUBLE
44274: EQUAL
44275: IFTRUE 44279
44277: GO 44335
44279: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
44280: LD_ADDR_VAR 0 9
44284: PUSH
44285: LD_VAR 0 59
44289: PUSH
44290: LD_VAR 0 60
44294: PUSH
44295: LD_VAR 0 61
44299: PUSH
44300: LD_VAR 0 62
44304: PUSH
44305: LD_VAR 0 63
44309: PUSH
44310: LD_VAR 0 64
44314: PUSH
44315: EMPTY
44316: LIST
44317: LIST
44318: LIST
44319: LIST
44320: LIST
44321: LIST
44322: PUSH
44323: LD_VAR 0 4
44327: PUSH
44328: LD_INT 1
44330: PLUS
44331: ARRAY
44332: ST_TO_ADDR
44333: GO 44336
44335: POP
// temp_list2 = [ ] ;
44336: LD_ADDR_VAR 0 10
44340: PUSH
44341: EMPTY
44342: ST_TO_ADDR
// for i in temp_list do
44343: LD_ADDR_VAR 0 8
44347: PUSH
44348: LD_VAR 0 9
44352: PUSH
44353: FOR_IN
44354: IFFALSE 44406
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
44356: LD_ADDR_VAR 0 10
44360: PUSH
44361: LD_VAR 0 10
44365: PUSH
44366: LD_VAR 0 8
44370: PUSH
44371: LD_INT 1
44373: ARRAY
44374: PUSH
44375: LD_VAR 0 2
44379: PLUS
44380: PUSH
44381: LD_VAR 0 8
44385: PUSH
44386: LD_INT 2
44388: ARRAY
44389: PUSH
44390: LD_VAR 0 3
44394: PLUS
44395: PUSH
44396: EMPTY
44397: LIST
44398: LIST
44399: PUSH
44400: EMPTY
44401: LIST
44402: ADD
44403: ST_TO_ADDR
44404: GO 44353
44406: POP
44407: POP
// result = temp_list2 ;
44408: LD_ADDR_VAR 0 7
44412: PUSH
44413: LD_VAR 0 10
44417: ST_TO_ADDR
// end ;
44418: LD_VAR 0 7
44422: RET
// export function EnemyInRange ( unit , dist ) ; begin
44423: LD_INT 0
44425: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
44426: LD_ADDR_VAR 0 3
44430: PUSH
44431: LD_VAR 0 1
44435: PPUSH
44436: CALL_OW 255
44440: PPUSH
44441: LD_VAR 0 1
44445: PPUSH
44446: CALL_OW 250
44450: PPUSH
44451: LD_VAR 0 1
44455: PPUSH
44456: CALL_OW 251
44460: PPUSH
44461: LD_VAR 0 2
44465: PPUSH
44466: CALL 17680 0 4
44470: PUSH
44471: LD_INT 4
44473: ARRAY
44474: ST_TO_ADDR
// end ;
44475: LD_VAR 0 3
44479: RET
// export function PlayerSeeMe ( unit ) ; begin
44480: LD_INT 0
44482: PPUSH
// result := See ( your_side , unit ) ;
44483: LD_ADDR_VAR 0 2
44487: PUSH
44488: LD_OWVAR 2
44492: PPUSH
44493: LD_VAR 0 1
44497: PPUSH
44498: CALL_OW 292
44502: ST_TO_ADDR
// end ;
44503: LD_VAR 0 2
44507: RET
// export function ReverseDir ( unit ) ; begin
44508: LD_INT 0
44510: PPUSH
// if not unit then
44511: LD_VAR 0 1
44515: NOT
44516: IFFALSE 44520
// exit ;
44518: GO 44543
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
44520: LD_ADDR_VAR 0 2
44524: PUSH
44525: LD_VAR 0 1
44529: PPUSH
44530: CALL_OW 254
44534: PUSH
44535: LD_INT 3
44537: PLUS
44538: PUSH
44539: LD_INT 6
44541: MOD
44542: ST_TO_ADDR
// end ;
44543: LD_VAR 0 2
44547: RET
// export function ReverseArray ( array ) ; var i ; begin
44548: LD_INT 0
44550: PPUSH
44551: PPUSH
// if not array then
44552: LD_VAR 0 1
44556: NOT
44557: IFFALSE 44561
// exit ;
44559: GO 44616
// result := [ ] ;
44561: LD_ADDR_VAR 0 2
44565: PUSH
44566: EMPTY
44567: ST_TO_ADDR
// for i := array downto 1 do
44568: LD_ADDR_VAR 0 3
44572: PUSH
44573: DOUBLE
44574: LD_VAR 0 1
44578: INC
44579: ST_TO_ADDR
44580: LD_INT 1
44582: PUSH
44583: FOR_DOWNTO
44584: IFFALSE 44614
// result := Join ( result , array [ i ] ) ;
44586: LD_ADDR_VAR 0 2
44590: PUSH
44591: LD_VAR 0 2
44595: PPUSH
44596: LD_VAR 0 1
44600: PUSH
44601: LD_VAR 0 3
44605: ARRAY
44606: PPUSH
44607: CALL 49468 0 2
44611: ST_TO_ADDR
44612: GO 44583
44614: POP
44615: POP
// end ;
44616: LD_VAR 0 2
44620: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
44621: LD_INT 0
44623: PPUSH
44624: PPUSH
44625: PPUSH
44626: PPUSH
44627: PPUSH
44628: PPUSH
// if not unit or not hexes then
44629: LD_VAR 0 1
44633: NOT
44634: IFTRUE 44643
44636: PUSH
44637: LD_VAR 0 2
44641: NOT
44642: OR
44643: IFFALSE 44647
// exit ;
44645: GO 44770
// dist := 9999 ;
44647: LD_ADDR_VAR 0 5
44651: PUSH
44652: LD_INT 9999
44654: ST_TO_ADDR
// for i = 1 to hexes do
44655: LD_ADDR_VAR 0 4
44659: PUSH
44660: DOUBLE
44661: LD_INT 1
44663: DEC
44664: ST_TO_ADDR
44665: LD_VAR 0 2
44669: PUSH
44670: FOR_TO
44671: IFFALSE 44758
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44673: LD_ADDR_VAR 0 6
44677: PUSH
44678: LD_VAR 0 1
44682: PPUSH
44683: LD_VAR 0 2
44687: PUSH
44688: LD_VAR 0 4
44692: ARRAY
44693: PUSH
44694: LD_INT 1
44696: ARRAY
44697: PPUSH
44698: LD_VAR 0 2
44702: PUSH
44703: LD_VAR 0 4
44707: ARRAY
44708: PUSH
44709: LD_INT 2
44711: ARRAY
44712: PPUSH
44713: CALL_OW 297
44717: ST_TO_ADDR
// if tdist < dist then
44718: LD_VAR 0 6
44722: PUSH
44723: LD_VAR 0 5
44727: LESS
44728: IFFALSE 44756
// begin hex := hexes [ i ] ;
44730: LD_ADDR_VAR 0 8
44734: PUSH
44735: LD_VAR 0 2
44739: PUSH
44740: LD_VAR 0 4
44744: ARRAY
44745: ST_TO_ADDR
// dist := tdist ;
44746: LD_ADDR_VAR 0 5
44750: PUSH
44751: LD_VAR 0 6
44755: ST_TO_ADDR
// end ; end ;
44756: GO 44670
44758: POP
44759: POP
// result := hex ;
44760: LD_ADDR_VAR 0 3
44764: PUSH
44765: LD_VAR 0 8
44769: ST_TO_ADDR
// end ;
44770: LD_VAR 0 3
44774: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
44775: LD_INT 0
44777: PPUSH
44778: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
44779: LD_VAR 0 1
44783: NOT
44784: IFTRUE 44823
44786: PUSH
44787: LD_VAR 0 1
44791: PUSH
44792: LD_INT 21
44794: PUSH
44795: LD_INT 2
44797: PUSH
44798: EMPTY
44799: LIST
44800: LIST
44801: PUSH
44802: LD_INT 23
44804: PUSH
44805: LD_INT 2
44807: PUSH
44808: EMPTY
44809: LIST
44810: LIST
44811: PUSH
44812: EMPTY
44813: LIST
44814: LIST
44815: PPUSH
44816: CALL_OW 69
44820: IN
44821: NOT
44822: OR
44823: IFFALSE 44827
// exit ;
44825: GO 44874
// for i = 1 to 3 do
44827: LD_ADDR_VAR 0 3
44831: PUSH
44832: DOUBLE
44833: LD_INT 1
44835: DEC
44836: ST_TO_ADDR
44837: LD_INT 3
44839: PUSH
44840: FOR_TO
44841: IFFALSE 44872
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
44843: LD_VAR 0 1
44847: PPUSH
44848: CALL_OW 250
44852: PPUSH
44853: LD_VAR 0 1
44857: PPUSH
44858: CALL_OW 251
44862: PPUSH
44863: LD_INT 1
44865: PPUSH
44866: CALL_OW 453
44870: GO 44840
44872: POP
44873: POP
// end ;
44874: LD_VAR 0 2
44878: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
44879: LD_INT 0
44881: PPUSH
44882: PPUSH
44883: PPUSH
44884: PPUSH
44885: PPUSH
44886: PPUSH
// if not unit or not enemy_unit then
44887: LD_VAR 0 1
44891: NOT
44892: IFTRUE 44901
44894: PUSH
44895: LD_VAR 0 2
44899: NOT
44900: OR
44901: IFFALSE 44905
// exit ;
44903: GO 45386
// if GetLives ( i ) < 250 then
44905: LD_VAR 0 4
44909: PPUSH
44910: CALL_OW 256
44914: PUSH
44915: LD_INT 250
44917: LESS
44918: IFFALSE 44931
// begin ComAutodestruct ( i ) ;
44920: LD_VAR 0 4
44924: PPUSH
44925: CALL 44775 0 1
// exit ;
44929: GO 45386
// end ; x := GetX ( enemy_unit ) ;
44931: LD_ADDR_VAR 0 7
44935: PUSH
44936: LD_VAR 0 2
44940: PPUSH
44941: CALL_OW 250
44945: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
44946: LD_ADDR_VAR 0 8
44950: PUSH
44951: LD_VAR 0 2
44955: PPUSH
44956: CALL_OW 251
44960: ST_TO_ADDR
// if not x or not y then
44961: LD_VAR 0 7
44965: NOT
44966: IFTRUE 44975
44968: PUSH
44969: LD_VAR 0 8
44973: NOT
44974: OR
44975: IFFALSE 44979
// exit ;
44977: GO 45386
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
44979: LD_ADDR_VAR 0 6
44983: PUSH
44984: LD_VAR 0 7
44988: PPUSH
44989: LD_INT 0
44991: PPUSH
44992: LD_INT 4
44994: PPUSH
44995: CALL_OW 272
44999: PUSH
45000: LD_VAR 0 8
45004: PPUSH
45005: LD_INT 0
45007: PPUSH
45008: LD_INT 4
45010: PPUSH
45011: CALL_OW 273
45015: PUSH
45016: EMPTY
45017: LIST
45018: LIST
45019: PUSH
45020: LD_VAR 0 7
45024: PPUSH
45025: LD_INT 1
45027: PPUSH
45028: LD_INT 4
45030: PPUSH
45031: CALL_OW 272
45035: PUSH
45036: LD_VAR 0 8
45040: PPUSH
45041: LD_INT 1
45043: PPUSH
45044: LD_INT 4
45046: PPUSH
45047: CALL_OW 273
45051: PUSH
45052: EMPTY
45053: LIST
45054: LIST
45055: PUSH
45056: LD_VAR 0 7
45060: PPUSH
45061: LD_INT 2
45063: PPUSH
45064: LD_INT 4
45066: PPUSH
45067: CALL_OW 272
45071: PUSH
45072: LD_VAR 0 8
45076: PPUSH
45077: LD_INT 2
45079: PPUSH
45080: LD_INT 4
45082: PPUSH
45083: CALL_OW 273
45087: PUSH
45088: EMPTY
45089: LIST
45090: LIST
45091: PUSH
45092: LD_VAR 0 7
45096: PPUSH
45097: LD_INT 3
45099: PPUSH
45100: LD_INT 4
45102: PPUSH
45103: CALL_OW 272
45107: PUSH
45108: LD_VAR 0 8
45112: PPUSH
45113: LD_INT 3
45115: PPUSH
45116: LD_INT 4
45118: PPUSH
45119: CALL_OW 273
45123: PUSH
45124: EMPTY
45125: LIST
45126: LIST
45127: PUSH
45128: LD_VAR 0 7
45132: PPUSH
45133: LD_INT 4
45135: PPUSH
45136: LD_INT 4
45138: PPUSH
45139: CALL_OW 272
45143: PUSH
45144: LD_VAR 0 8
45148: PPUSH
45149: LD_INT 4
45151: PPUSH
45152: LD_INT 4
45154: PPUSH
45155: CALL_OW 273
45159: PUSH
45160: EMPTY
45161: LIST
45162: LIST
45163: PUSH
45164: LD_VAR 0 7
45168: PPUSH
45169: LD_INT 5
45171: PPUSH
45172: LD_INT 4
45174: PPUSH
45175: CALL_OW 272
45179: PUSH
45180: LD_VAR 0 8
45184: PPUSH
45185: LD_INT 5
45187: PPUSH
45188: LD_INT 4
45190: PPUSH
45191: CALL_OW 273
45195: PUSH
45196: EMPTY
45197: LIST
45198: LIST
45199: PUSH
45200: EMPTY
45201: LIST
45202: LIST
45203: LIST
45204: LIST
45205: LIST
45206: LIST
45207: ST_TO_ADDR
// for i = tmp downto 1 do
45208: LD_ADDR_VAR 0 4
45212: PUSH
45213: DOUBLE
45214: LD_VAR 0 6
45218: INC
45219: ST_TO_ADDR
45220: LD_INT 1
45222: PUSH
45223: FOR_DOWNTO
45224: IFFALSE 45327
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
45226: LD_VAR 0 6
45230: PUSH
45231: LD_VAR 0 4
45235: ARRAY
45236: PUSH
45237: LD_INT 1
45239: ARRAY
45240: PPUSH
45241: LD_VAR 0 6
45245: PUSH
45246: LD_VAR 0 4
45250: ARRAY
45251: PUSH
45252: LD_INT 2
45254: ARRAY
45255: PPUSH
45256: CALL_OW 488
45260: NOT
45261: IFTRUE 45303
45263: PUSH
45264: LD_VAR 0 6
45268: PUSH
45269: LD_VAR 0 4
45273: ARRAY
45274: PUSH
45275: LD_INT 1
45277: ARRAY
45278: PPUSH
45279: LD_VAR 0 6
45283: PUSH
45284: LD_VAR 0 4
45288: ARRAY
45289: PUSH
45290: LD_INT 2
45292: ARRAY
45293: PPUSH
45294: CALL_OW 428
45298: PUSH
45299: LD_INT 0
45301: NONEQUAL
45302: OR
45303: IFFALSE 45325
// tmp := Delete ( tmp , i ) ;
45305: LD_ADDR_VAR 0 6
45309: PUSH
45310: LD_VAR 0 6
45314: PPUSH
45315: LD_VAR 0 4
45319: PPUSH
45320: CALL_OW 3
45324: ST_TO_ADDR
45325: GO 45223
45327: POP
45328: POP
// j := GetClosestHex ( unit , tmp ) ;
45329: LD_ADDR_VAR 0 5
45333: PUSH
45334: LD_VAR 0 1
45338: PPUSH
45339: LD_VAR 0 6
45343: PPUSH
45344: CALL 44621 0 2
45348: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
45349: LD_VAR 0 1
45353: PPUSH
45354: LD_VAR 0 5
45358: PUSH
45359: LD_INT 1
45361: ARRAY
45362: PPUSH
45363: LD_VAR 0 5
45367: PUSH
45368: LD_INT 2
45370: ARRAY
45371: PPUSH
45372: CALL_OW 111
// result := j ;
45376: LD_ADDR_VAR 0 3
45380: PUSH
45381: LD_VAR 0 5
45385: ST_TO_ADDR
// end ;
45386: LD_VAR 0 3
45390: RET
// export function PrepareApemanSoldier ( ) ; begin
45391: LD_INT 0
45393: PPUSH
// uc_nation := 0 ;
45394: LD_ADDR_OWVAR 21
45398: PUSH
45399: LD_INT 0
45401: ST_TO_ADDR
// hc_sex := sex_male ;
45402: LD_ADDR_OWVAR 27
45406: PUSH
45407: LD_INT 1
45409: ST_TO_ADDR
// hc_name :=  ;
45410: LD_ADDR_OWVAR 26
45414: PUSH
45415: LD_STRING 
45417: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
45418: LD_ADDR_OWVAR 28
45422: PUSH
45423: LD_INT 15
45425: ST_TO_ADDR
// hc_gallery :=  ;
45426: LD_ADDR_OWVAR 33
45430: PUSH
45431: LD_STRING 
45433: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
45434: LD_ADDR_OWVAR 31
45438: PUSH
45439: LD_INT 0
45441: PPUSH
45442: LD_INT 3
45444: PPUSH
45445: CALL_OW 12
45449: PUSH
45450: LD_INT 0
45452: PPUSH
45453: LD_INT 3
45455: PPUSH
45456: CALL_OW 12
45460: PUSH
45461: LD_INT 0
45463: PUSH
45464: LD_INT 0
45466: PUSH
45467: EMPTY
45468: LIST
45469: LIST
45470: LIST
45471: LIST
45472: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
45473: LD_ADDR_OWVAR 29
45477: PUSH
45478: LD_INT 10
45480: PUSH
45481: LD_INT 12
45483: PUSH
45484: EMPTY
45485: LIST
45486: LIST
45487: ST_TO_ADDR
// end ;
45488: LD_VAR 0 1
45492: RET
// export function PrepareApemanEngineer ( ) ; begin
45493: LD_INT 0
45495: PPUSH
// uc_nation := 0 ;
45496: LD_ADDR_OWVAR 21
45500: PUSH
45501: LD_INT 0
45503: ST_TO_ADDR
// hc_sex := sex_male ;
45504: LD_ADDR_OWVAR 27
45508: PUSH
45509: LD_INT 1
45511: ST_TO_ADDR
// hc_name :=  ;
45512: LD_ADDR_OWVAR 26
45516: PUSH
45517: LD_STRING 
45519: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
45520: LD_ADDR_OWVAR 28
45524: PUSH
45525: LD_INT 16
45527: ST_TO_ADDR
// hc_gallery :=  ;
45528: LD_ADDR_OWVAR 33
45532: PUSH
45533: LD_STRING 
45535: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
45536: LD_ADDR_OWVAR 31
45540: PUSH
45541: LD_INT 0
45543: PPUSH
45544: LD_INT 3
45546: PPUSH
45547: CALL_OW 12
45551: PUSH
45552: LD_INT 0
45554: PPUSH
45555: LD_INT 3
45557: PPUSH
45558: CALL_OW 12
45562: PUSH
45563: LD_INT 0
45565: PUSH
45566: LD_INT 0
45568: PUSH
45569: EMPTY
45570: LIST
45571: LIST
45572: LIST
45573: LIST
45574: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
45575: LD_ADDR_OWVAR 29
45579: PUSH
45580: LD_INT 10
45582: PUSH
45583: LD_INT 12
45585: PUSH
45586: EMPTY
45587: LIST
45588: LIST
45589: ST_TO_ADDR
// end ;
45590: LD_VAR 0 1
45594: RET
// export function PrepareApeman ( agressivity ) ; begin
45595: LD_INT 0
45597: PPUSH
// uc_side := 0 ;
45598: LD_ADDR_OWVAR 20
45602: PUSH
45603: LD_INT 0
45605: ST_TO_ADDR
// uc_nation := 0 ;
45606: LD_ADDR_OWVAR 21
45610: PUSH
45611: LD_INT 0
45613: ST_TO_ADDR
// hc_sex := sex_male ;
45614: LD_ADDR_OWVAR 27
45618: PUSH
45619: LD_INT 1
45621: ST_TO_ADDR
// hc_class := class_apeman ;
45622: LD_ADDR_OWVAR 28
45626: PUSH
45627: LD_INT 12
45629: ST_TO_ADDR
// hc_gallery :=  ;
45630: LD_ADDR_OWVAR 33
45634: PUSH
45635: LD_STRING 
45637: ST_TO_ADDR
// hc_name :=  ;
45638: LD_ADDR_OWVAR 26
45642: PUSH
45643: LD_STRING 
45645: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
45646: LD_ADDR_OWVAR 29
45650: PUSH
45651: LD_INT 10
45653: PUSH
45654: LD_INT 12
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: ST_TO_ADDR
// if agressivity = 0 then
45661: LD_VAR 0 1
45665: PUSH
45666: LD_INT 0
45668: EQUAL
45669: IFFALSE 45681
// hc_agressivity := 0 else
45671: LD_ADDR_OWVAR 35
45675: PUSH
45676: LD_INT 0
45678: ST_TO_ADDR
45679: GO 45702
// hc_agressivity := rand ( - agressivity , agressivity ) ;
45681: LD_ADDR_OWVAR 35
45685: PUSH
45686: LD_VAR 0 1
45690: NEG
45691: PPUSH
45692: LD_VAR 0 1
45696: PPUSH
45697: CALL_OW 12
45701: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
45702: LD_ADDR_OWVAR 31
45706: PUSH
45707: LD_INT 0
45709: PPUSH
45710: LD_INT 3
45712: PPUSH
45713: CALL_OW 12
45717: PUSH
45718: LD_INT 0
45720: PPUSH
45721: LD_INT 3
45723: PPUSH
45724: CALL_OW 12
45728: PUSH
45729: LD_INT 0
45731: PUSH
45732: LD_INT 0
45734: PUSH
45735: EMPTY
45736: LIST
45737: LIST
45738: LIST
45739: LIST
45740: ST_TO_ADDR
// end ;
45741: LD_VAR 0 2
45745: RET
// export function PrepareTiger ( agressivity ) ; begin
45746: LD_INT 0
45748: PPUSH
// uc_side := 0 ;
45749: LD_ADDR_OWVAR 20
45753: PUSH
45754: LD_INT 0
45756: ST_TO_ADDR
// uc_nation := 0 ;
45757: LD_ADDR_OWVAR 21
45761: PUSH
45762: LD_INT 0
45764: ST_TO_ADDR
// InitHc ;
45765: CALL_OW 19
// hc_class := class_tiger ;
45769: LD_ADDR_OWVAR 28
45773: PUSH
45774: LD_INT 14
45776: ST_TO_ADDR
// hc_gallery :=  ;
45777: LD_ADDR_OWVAR 33
45781: PUSH
45782: LD_STRING 
45784: ST_TO_ADDR
// hc_name :=  ;
45785: LD_ADDR_OWVAR 26
45789: PUSH
45790: LD_STRING 
45792: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
45793: LD_ADDR_OWVAR 35
45797: PUSH
45798: LD_VAR 0 1
45802: NEG
45803: PPUSH
45804: LD_VAR 0 1
45808: PPUSH
45809: CALL_OW 12
45813: ST_TO_ADDR
// end ;
45814: LD_VAR 0 2
45818: RET
// export function PrepareEnchidna ( ) ; begin
45819: LD_INT 0
45821: PPUSH
// uc_side := 0 ;
45822: LD_ADDR_OWVAR 20
45826: PUSH
45827: LD_INT 0
45829: ST_TO_ADDR
// uc_nation := 0 ;
45830: LD_ADDR_OWVAR 21
45834: PUSH
45835: LD_INT 0
45837: ST_TO_ADDR
// InitHc ;
45838: CALL_OW 19
// hc_class := class_baggie ;
45842: LD_ADDR_OWVAR 28
45846: PUSH
45847: LD_INT 13
45849: ST_TO_ADDR
// hc_gallery :=  ;
45850: LD_ADDR_OWVAR 33
45854: PUSH
45855: LD_STRING 
45857: ST_TO_ADDR
// hc_name :=  ;
45858: LD_ADDR_OWVAR 26
45862: PUSH
45863: LD_STRING 
45865: ST_TO_ADDR
// end ;
45866: LD_VAR 0 1
45870: RET
// export function PrepareFrog ( ) ; begin
45871: LD_INT 0
45873: PPUSH
// uc_side := 0 ;
45874: LD_ADDR_OWVAR 20
45878: PUSH
45879: LD_INT 0
45881: ST_TO_ADDR
// uc_nation := 0 ;
45882: LD_ADDR_OWVAR 21
45886: PUSH
45887: LD_INT 0
45889: ST_TO_ADDR
// InitHc ;
45890: CALL_OW 19
// hc_class := class_frog ;
45894: LD_ADDR_OWVAR 28
45898: PUSH
45899: LD_INT 19
45901: ST_TO_ADDR
// hc_gallery :=  ;
45902: LD_ADDR_OWVAR 33
45906: PUSH
45907: LD_STRING 
45909: ST_TO_ADDR
// hc_name :=  ;
45910: LD_ADDR_OWVAR 26
45914: PUSH
45915: LD_STRING 
45917: ST_TO_ADDR
// end ;
45918: LD_VAR 0 1
45922: RET
// export function PrepareFish ( ) ; begin
45923: LD_INT 0
45925: PPUSH
// uc_side := 0 ;
45926: LD_ADDR_OWVAR 20
45930: PUSH
45931: LD_INT 0
45933: ST_TO_ADDR
// uc_nation := 0 ;
45934: LD_ADDR_OWVAR 21
45938: PUSH
45939: LD_INT 0
45941: ST_TO_ADDR
// InitHc ;
45942: CALL_OW 19
// hc_class := class_fish ;
45946: LD_ADDR_OWVAR 28
45950: PUSH
45951: LD_INT 20
45953: ST_TO_ADDR
// hc_gallery :=  ;
45954: LD_ADDR_OWVAR 33
45958: PUSH
45959: LD_STRING 
45961: ST_TO_ADDR
// hc_name :=  ;
45962: LD_ADDR_OWVAR 26
45966: PUSH
45967: LD_STRING 
45969: ST_TO_ADDR
// end ;
45970: LD_VAR 0 1
45974: RET
// export function PrepareBird ( ) ; begin
45975: LD_INT 0
45977: PPUSH
// uc_side := 0 ;
45978: LD_ADDR_OWVAR 20
45982: PUSH
45983: LD_INT 0
45985: ST_TO_ADDR
// uc_nation := 0 ;
45986: LD_ADDR_OWVAR 21
45990: PUSH
45991: LD_INT 0
45993: ST_TO_ADDR
// InitHc ;
45994: CALL_OW 19
// hc_class := class_phororhacos ;
45998: LD_ADDR_OWVAR 28
46002: PUSH
46003: LD_INT 18
46005: ST_TO_ADDR
// hc_gallery :=  ;
46006: LD_ADDR_OWVAR 33
46010: PUSH
46011: LD_STRING 
46013: ST_TO_ADDR
// hc_name :=  ;
46014: LD_ADDR_OWVAR 26
46018: PUSH
46019: LD_STRING 
46021: ST_TO_ADDR
// end ;
46022: LD_VAR 0 1
46026: RET
// export function PrepareHorse ( ) ; begin
46027: LD_INT 0
46029: PPUSH
// uc_side := 0 ;
46030: LD_ADDR_OWVAR 20
46034: PUSH
46035: LD_INT 0
46037: ST_TO_ADDR
// uc_nation := 0 ;
46038: LD_ADDR_OWVAR 21
46042: PUSH
46043: LD_INT 0
46045: ST_TO_ADDR
// InitHc ;
46046: CALL_OW 19
// hc_class := class_horse ;
46050: LD_ADDR_OWVAR 28
46054: PUSH
46055: LD_INT 21
46057: ST_TO_ADDR
// hc_gallery :=  ;
46058: LD_ADDR_OWVAR 33
46062: PUSH
46063: LD_STRING 
46065: ST_TO_ADDR
// hc_name :=  ;
46066: LD_ADDR_OWVAR 26
46070: PUSH
46071: LD_STRING 
46073: ST_TO_ADDR
// end ;
46074: LD_VAR 0 1
46078: RET
// export function PrepareMastodont ( ) ; begin
46079: LD_INT 0
46081: PPUSH
// uc_side := 0 ;
46082: LD_ADDR_OWVAR 20
46086: PUSH
46087: LD_INT 0
46089: ST_TO_ADDR
// uc_nation := 0 ;
46090: LD_ADDR_OWVAR 21
46094: PUSH
46095: LD_INT 0
46097: ST_TO_ADDR
// vc_chassis := class_mastodont ;
46098: LD_ADDR_OWVAR 37
46102: PUSH
46103: LD_INT 31
46105: ST_TO_ADDR
// vc_control := control_rider ;
46106: LD_ADDR_OWVAR 38
46110: PUSH
46111: LD_INT 4
46113: ST_TO_ADDR
// end ;
46114: LD_VAR 0 1
46118: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
46119: LD_INT 0
46121: PPUSH
46122: PPUSH
46123: PPUSH
// uc_side = 0 ;
46124: LD_ADDR_OWVAR 20
46128: PUSH
46129: LD_INT 0
46131: ST_TO_ADDR
// uc_nation = 0 ;
46132: LD_ADDR_OWVAR 21
46136: PUSH
46137: LD_INT 0
46139: ST_TO_ADDR
// InitHc_All ( ) ;
46140: CALL_OW 584
// InitVc ;
46144: CALL_OW 20
// if mastodonts then
46148: LD_VAR 0 6
46152: IFFALSE 46219
// for i = 1 to mastodonts do
46154: LD_ADDR_VAR 0 11
46158: PUSH
46159: DOUBLE
46160: LD_INT 1
46162: DEC
46163: ST_TO_ADDR
46164: LD_VAR 0 6
46168: PUSH
46169: FOR_TO
46170: IFFALSE 46217
// begin vc_chassis := 31 ;
46172: LD_ADDR_OWVAR 37
46176: PUSH
46177: LD_INT 31
46179: ST_TO_ADDR
// vc_control := control_rider ;
46180: LD_ADDR_OWVAR 38
46184: PUSH
46185: LD_INT 4
46187: ST_TO_ADDR
// animal := CreateVehicle ;
46188: LD_ADDR_VAR 0 12
46192: PUSH
46193: CALL_OW 45
46197: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46198: LD_VAR 0 12
46202: PPUSH
46203: LD_VAR 0 8
46207: PPUSH
46208: LD_INT 0
46210: PPUSH
46211: CALL 48361 0 3
// end ;
46215: GO 46169
46217: POP
46218: POP
// if horses then
46219: LD_VAR 0 5
46223: IFFALSE 46290
// for i = 1 to horses do
46225: LD_ADDR_VAR 0 11
46229: PUSH
46230: DOUBLE
46231: LD_INT 1
46233: DEC
46234: ST_TO_ADDR
46235: LD_VAR 0 5
46239: PUSH
46240: FOR_TO
46241: IFFALSE 46288
// begin hc_class := 21 ;
46243: LD_ADDR_OWVAR 28
46247: PUSH
46248: LD_INT 21
46250: ST_TO_ADDR
// hc_gallery :=  ;
46251: LD_ADDR_OWVAR 33
46255: PUSH
46256: LD_STRING 
46258: ST_TO_ADDR
// animal := CreateHuman ;
46259: LD_ADDR_VAR 0 12
46263: PUSH
46264: CALL_OW 44
46268: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46269: LD_VAR 0 12
46273: PPUSH
46274: LD_VAR 0 8
46278: PPUSH
46279: LD_INT 0
46281: PPUSH
46282: CALL 48361 0 3
// end ;
46286: GO 46240
46288: POP
46289: POP
// if birds then
46290: LD_VAR 0 1
46294: IFFALSE 46361
// for i = 1 to birds do
46296: LD_ADDR_VAR 0 11
46300: PUSH
46301: DOUBLE
46302: LD_INT 1
46304: DEC
46305: ST_TO_ADDR
46306: LD_VAR 0 1
46310: PUSH
46311: FOR_TO
46312: IFFALSE 46359
// begin hc_class := 18 ;
46314: LD_ADDR_OWVAR 28
46318: PUSH
46319: LD_INT 18
46321: ST_TO_ADDR
// hc_gallery =  ;
46322: LD_ADDR_OWVAR 33
46326: PUSH
46327: LD_STRING 
46329: ST_TO_ADDR
// animal := CreateHuman ;
46330: LD_ADDR_VAR 0 12
46334: PUSH
46335: CALL_OW 44
46339: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46340: LD_VAR 0 12
46344: PPUSH
46345: LD_VAR 0 8
46349: PPUSH
46350: LD_INT 0
46352: PPUSH
46353: CALL 48361 0 3
// end ;
46357: GO 46311
46359: POP
46360: POP
// if tigers then
46361: LD_VAR 0 2
46365: IFFALSE 46449
// for i = 1 to tigers do
46367: LD_ADDR_VAR 0 11
46371: PUSH
46372: DOUBLE
46373: LD_INT 1
46375: DEC
46376: ST_TO_ADDR
46377: LD_VAR 0 2
46381: PUSH
46382: FOR_TO
46383: IFFALSE 46447
// begin hc_class = class_tiger ;
46385: LD_ADDR_OWVAR 28
46389: PUSH
46390: LD_INT 14
46392: ST_TO_ADDR
// hc_gallery =  ;
46393: LD_ADDR_OWVAR 33
46397: PUSH
46398: LD_STRING 
46400: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
46401: LD_ADDR_OWVAR 35
46405: PUSH
46406: LD_INT 7
46408: NEG
46409: PPUSH
46410: LD_INT 7
46412: PPUSH
46413: CALL_OW 12
46417: ST_TO_ADDR
// animal := CreateHuman ;
46418: LD_ADDR_VAR 0 12
46422: PUSH
46423: CALL_OW 44
46427: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46428: LD_VAR 0 12
46432: PPUSH
46433: LD_VAR 0 8
46437: PPUSH
46438: LD_INT 0
46440: PPUSH
46441: CALL 48361 0 3
// end ;
46445: GO 46382
46447: POP
46448: POP
// if apemans then
46449: LD_VAR 0 3
46453: IFFALSE 46576
// for i = 1 to apemans do
46455: LD_ADDR_VAR 0 11
46459: PUSH
46460: DOUBLE
46461: LD_INT 1
46463: DEC
46464: ST_TO_ADDR
46465: LD_VAR 0 3
46469: PUSH
46470: FOR_TO
46471: IFFALSE 46574
// begin hc_class = class_apeman ;
46473: LD_ADDR_OWVAR 28
46477: PUSH
46478: LD_INT 12
46480: ST_TO_ADDR
// hc_gallery =  ;
46481: LD_ADDR_OWVAR 33
46485: PUSH
46486: LD_STRING 
46488: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
46489: LD_ADDR_OWVAR 35
46493: PUSH
46494: LD_INT 2
46496: NEG
46497: PPUSH
46498: LD_INT 2
46500: PPUSH
46501: CALL_OW 12
46505: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
46506: LD_ADDR_OWVAR 31
46510: PUSH
46511: LD_INT 1
46513: PPUSH
46514: LD_INT 3
46516: PPUSH
46517: CALL_OW 12
46521: PUSH
46522: LD_INT 1
46524: PPUSH
46525: LD_INT 3
46527: PPUSH
46528: CALL_OW 12
46532: PUSH
46533: LD_INT 0
46535: PUSH
46536: LD_INT 0
46538: PUSH
46539: EMPTY
46540: LIST
46541: LIST
46542: LIST
46543: LIST
46544: ST_TO_ADDR
// animal := CreateHuman ;
46545: LD_ADDR_VAR 0 12
46549: PUSH
46550: CALL_OW 44
46554: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46555: LD_VAR 0 12
46559: PPUSH
46560: LD_VAR 0 8
46564: PPUSH
46565: LD_INT 0
46567: PPUSH
46568: CALL 48361 0 3
// end ;
46572: GO 46470
46574: POP
46575: POP
// if enchidnas then
46576: LD_VAR 0 4
46580: IFFALSE 46647
// for i = 1 to enchidnas do
46582: LD_ADDR_VAR 0 11
46586: PUSH
46587: DOUBLE
46588: LD_INT 1
46590: DEC
46591: ST_TO_ADDR
46592: LD_VAR 0 4
46596: PUSH
46597: FOR_TO
46598: IFFALSE 46645
// begin hc_class = 13 ;
46600: LD_ADDR_OWVAR 28
46604: PUSH
46605: LD_INT 13
46607: ST_TO_ADDR
// hc_gallery =  ;
46608: LD_ADDR_OWVAR 33
46612: PUSH
46613: LD_STRING 
46615: ST_TO_ADDR
// animal := CreateHuman ;
46616: LD_ADDR_VAR 0 12
46620: PUSH
46621: CALL_OW 44
46625: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46626: LD_VAR 0 12
46630: PPUSH
46631: LD_VAR 0 8
46635: PPUSH
46636: LD_INT 0
46638: PPUSH
46639: CALL 48361 0 3
// end ;
46643: GO 46597
46645: POP
46646: POP
// if fishes then
46647: LD_VAR 0 7
46651: IFFALSE 46718
// for i = 1 to fishes do
46653: LD_ADDR_VAR 0 11
46657: PUSH
46658: DOUBLE
46659: LD_INT 1
46661: DEC
46662: ST_TO_ADDR
46663: LD_VAR 0 7
46667: PUSH
46668: FOR_TO
46669: IFFALSE 46716
// begin hc_class = 20 ;
46671: LD_ADDR_OWVAR 28
46675: PUSH
46676: LD_INT 20
46678: ST_TO_ADDR
// hc_gallery =  ;
46679: LD_ADDR_OWVAR 33
46683: PUSH
46684: LD_STRING 
46686: ST_TO_ADDR
// animal := CreateHuman ;
46687: LD_ADDR_VAR 0 12
46691: PUSH
46692: CALL_OW 44
46696: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
46697: LD_VAR 0 12
46701: PPUSH
46702: LD_VAR 0 9
46706: PPUSH
46707: LD_INT 0
46709: PPUSH
46710: CALL 48361 0 3
// end ;
46714: GO 46668
46716: POP
46717: POP
// end ;
46718: LD_VAR 0 10
46722: RET
// export function WantHeal ( sci , unit ) ; begin
46723: LD_INT 0
46725: PPUSH
// if GetTaskList ( sci ) > 0 then
46726: LD_VAR 0 1
46730: PPUSH
46731: CALL_OW 437
46735: PUSH
46736: LD_INT 0
46738: GREATER
46739: IFFALSE 46811
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
46741: LD_VAR 0 1
46745: PPUSH
46746: CALL_OW 437
46750: PUSH
46751: LD_INT 1
46753: ARRAY
46754: PUSH
46755: LD_INT 1
46757: ARRAY
46758: PUSH
46759: LD_STRING l
46761: EQUAL
46762: IFFALSE 46789
46764: PUSH
46765: LD_VAR 0 1
46769: PPUSH
46770: CALL_OW 437
46774: PUSH
46775: LD_INT 1
46777: ARRAY
46778: PUSH
46779: LD_INT 4
46781: ARRAY
46782: PUSH
46783: LD_VAR 0 2
46787: EQUAL
46788: AND
46789: IFFALSE 46801
// result := true else
46791: LD_ADDR_VAR 0 3
46795: PUSH
46796: LD_INT 1
46798: ST_TO_ADDR
46799: GO 46809
// result := false ;
46801: LD_ADDR_VAR 0 3
46805: PUSH
46806: LD_INT 0
46808: ST_TO_ADDR
// end else
46809: GO 46819
// result := false ;
46811: LD_ADDR_VAR 0 3
46815: PUSH
46816: LD_INT 0
46818: ST_TO_ADDR
// end ;
46819: LD_VAR 0 3
46823: RET
// export function HealTarget ( sci ) ; begin
46824: LD_INT 0
46826: PPUSH
// if not sci then
46827: LD_VAR 0 1
46831: NOT
46832: IFFALSE 46836
// exit ;
46834: GO 46901
// result := 0 ;
46836: LD_ADDR_VAR 0 2
46840: PUSH
46841: LD_INT 0
46843: ST_TO_ADDR
// if GetTaskList ( sci ) then
46844: LD_VAR 0 1
46848: PPUSH
46849: CALL_OW 437
46853: IFFALSE 46901
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
46855: LD_VAR 0 1
46859: PPUSH
46860: CALL_OW 437
46864: PUSH
46865: LD_INT 1
46867: ARRAY
46868: PUSH
46869: LD_INT 1
46871: ARRAY
46872: PUSH
46873: LD_STRING l
46875: EQUAL
46876: IFFALSE 46901
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
46878: LD_ADDR_VAR 0 2
46882: PUSH
46883: LD_VAR 0 1
46887: PPUSH
46888: CALL_OW 437
46892: PUSH
46893: LD_INT 1
46895: ARRAY
46896: PUSH
46897: LD_INT 4
46899: ARRAY
46900: ST_TO_ADDR
// end ;
46901: LD_VAR 0 2
46905: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
46906: LD_INT 0
46908: PPUSH
46909: PPUSH
46910: PPUSH
46911: PPUSH
// if not base_units then
46912: LD_VAR 0 1
46916: NOT
46917: IFFALSE 46921
// exit ;
46919: GO 47008
// result := false ;
46921: LD_ADDR_VAR 0 2
46925: PUSH
46926: LD_INT 0
46928: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
46929: LD_ADDR_VAR 0 5
46933: PUSH
46934: LD_VAR 0 1
46938: PPUSH
46939: LD_INT 21
46941: PUSH
46942: LD_INT 3
46944: PUSH
46945: EMPTY
46946: LIST
46947: LIST
46948: PPUSH
46949: CALL_OW 72
46953: ST_TO_ADDR
// if not tmp then
46954: LD_VAR 0 5
46958: NOT
46959: IFFALSE 46963
// exit ;
46961: GO 47008
// for i in tmp do
46963: LD_ADDR_VAR 0 3
46967: PUSH
46968: LD_VAR 0 5
46972: PUSH
46973: FOR_IN
46974: IFFALSE 47006
// begin result := EnemyInRange ( i , 22 ) ;
46976: LD_ADDR_VAR 0 2
46980: PUSH
46981: LD_VAR 0 3
46985: PPUSH
46986: LD_INT 22
46988: PPUSH
46989: CALL 44423 0 2
46993: ST_TO_ADDR
// if result then
46994: LD_VAR 0 2
46998: IFFALSE 47004
// exit ;
47000: POP
47001: POP
47002: GO 47008
// end ;
47004: GO 46973
47006: POP
47007: POP
// end ;
47008: LD_VAR 0 2
47012: RET
// export function FilterByTag ( units , tag ) ; begin
47013: LD_INT 0
47015: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
47016: LD_ADDR_VAR 0 3
47020: PUSH
47021: LD_VAR 0 1
47025: PPUSH
47026: LD_INT 120
47028: PUSH
47029: LD_VAR 0 2
47033: PUSH
47034: EMPTY
47035: LIST
47036: LIST
47037: PPUSH
47038: CALL_OW 72
47042: ST_TO_ADDR
// end ;
47043: LD_VAR 0 3
47047: RET
// export function IsDriver ( un ) ; begin
47048: LD_INT 0
47050: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
47051: LD_ADDR_VAR 0 2
47055: PUSH
47056: LD_VAR 0 1
47060: PUSH
47061: LD_INT 55
47063: PUSH
47064: EMPTY
47065: LIST
47066: PPUSH
47067: CALL_OW 69
47071: IN
47072: ST_TO_ADDR
// end ;
47073: LD_VAR 0 2
47077: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
47078: LD_INT 0
47080: PPUSH
47081: PPUSH
// list := [ ] ;
47082: LD_ADDR_VAR 0 5
47086: PUSH
47087: EMPTY
47088: ST_TO_ADDR
// case d of 0 :
47089: LD_VAR 0 3
47093: PUSH
47094: LD_INT 0
47096: DOUBLE
47097: EQUAL
47098: IFTRUE 47102
47100: GO 47235
47102: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
47103: LD_ADDR_VAR 0 5
47107: PUSH
47108: LD_VAR 0 1
47112: PUSH
47113: LD_INT 4
47115: MINUS
47116: PUSH
47117: LD_VAR 0 2
47121: PUSH
47122: LD_INT 4
47124: MINUS
47125: PUSH
47126: LD_INT 2
47128: PUSH
47129: EMPTY
47130: LIST
47131: LIST
47132: LIST
47133: PUSH
47134: LD_VAR 0 1
47138: PUSH
47139: LD_INT 3
47141: MINUS
47142: PUSH
47143: LD_VAR 0 2
47147: PUSH
47148: LD_INT 1
47150: PUSH
47151: EMPTY
47152: LIST
47153: LIST
47154: LIST
47155: PUSH
47156: LD_VAR 0 1
47160: PUSH
47161: LD_INT 4
47163: PLUS
47164: PUSH
47165: LD_VAR 0 2
47169: PUSH
47170: LD_INT 4
47172: PUSH
47173: EMPTY
47174: LIST
47175: LIST
47176: LIST
47177: PUSH
47178: LD_VAR 0 1
47182: PUSH
47183: LD_INT 3
47185: PLUS
47186: PUSH
47187: LD_VAR 0 2
47191: PUSH
47192: LD_INT 3
47194: PLUS
47195: PUSH
47196: LD_INT 5
47198: PUSH
47199: EMPTY
47200: LIST
47201: LIST
47202: LIST
47203: PUSH
47204: LD_VAR 0 1
47208: PUSH
47209: LD_VAR 0 2
47213: PUSH
47214: LD_INT 4
47216: PLUS
47217: PUSH
47218: LD_INT 0
47220: PUSH
47221: EMPTY
47222: LIST
47223: LIST
47224: LIST
47225: PUSH
47226: EMPTY
47227: LIST
47228: LIST
47229: LIST
47230: LIST
47231: LIST
47232: ST_TO_ADDR
// end ; 1 :
47233: GO 47933
47235: LD_INT 1
47237: DOUBLE
47238: EQUAL
47239: IFTRUE 47243
47241: GO 47376
47243: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
47244: LD_ADDR_VAR 0 5
47248: PUSH
47249: LD_VAR 0 1
47253: PUSH
47254: LD_VAR 0 2
47258: PUSH
47259: LD_INT 4
47261: MINUS
47262: PUSH
47263: LD_INT 3
47265: PUSH
47266: EMPTY
47267: LIST
47268: LIST
47269: LIST
47270: PUSH
47271: LD_VAR 0 1
47275: PUSH
47276: LD_INT 3
47278: MINUS
47279: PUSH
47280: LD_VAR 0 2
47284: PUSH
47285: LD_INT 3
47287: MINUS
47288: PUSH
47289: LD_INT 2
47291: PUSH
47292: EMPTY
47293: LIST
47294: LIST
47295: LIST
47296: PUSH
47297: LD_VAR 0 1
47301: PUSH
47302: LD_INT 4
47304: MINUS
47305: PUSH
47306: LD_VAR 0 2
47310: PUSH
47311: LD_INT 1
47313: PUSH
47314: EMPTY
47315: LIST
47316: LIST
47317: LIST
47318: PUSH
47319: LD_VAR 0 1
47323: PUSH
47324: LD_VAR 0 2
47328: PUSH
47329: LD_INT 3
47331: PLUS
47332: PUSH
47333: LD_INT 0
47335: PUSH
47336: EMPTY
47337: LIST
47338: LIST
47339: LIST
47340: PUSH
47341: LD_VAR 0 1
47345: PUSH
47346: LD_INT 4
47348: PLUS
47349: PUSH
47350: LD_VAR 0 2
47354: PUSH
47355: LD_INT 4
47357: PLUS
47358: PUSH
47359: LD_INT 5
47361: PUSH
47362: EMPTY
47363: LIST
47364: LIST
47365: LIST
47366: PUSH
47367: EMPTY
47368: LIST
47369: LIST
47370: LIST
47371: LIST
47372: LIST
47373: ST_TO_ADDR
// end ; 2 :
47374: GO 47933
47376: LD_INT 2
47378: DOUBLE
47379: EQUAL
47380: IFTRUE 47384
47382: GO 47513
47384: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
47385: LD_ADDR_VAR 0 5
47389: PUSH
47390: LD_VAR 0 1
47394: PUSH
47395: LD_VAR 0 2
47399: PUSH
47400: LD_INT 3
47402: MINUS
47403: PUSH
47404: LD_INT 3
47406: PUSH
47407: EMPTY
47408: LIST
47409: LIST
47410: LIST
47411: PUSH
47412: LD_VAR 0 1
47416: PUSH
47417: LD_INT 4
47419: PLUS
47420: PUSH
47421: LD_VAR 0 2
47425: PUSH
47426: LD_INT 4
47428: PUSH
47429: EMPTY
47430: LIST
47431: LIST
47432: LIST
47433: PUSH
47434: LD_VAR 0 1
47438: PUSH
47439: LD_VAR 0 2
47443: PUSH
47444: LD_INT 4
47446: PLUS
47447: PUSH
47448: LD_INT 0
47450: PUSH
47451: EMPTY
47452: LIST
47453: LIST
47454: LIST
47455: PUSH
47456: LD_VAR 0 1
47460: PUSH
47461: LD_INT 3
47463: MINUS
47464: PUSH
47465: LD_VAR 0 2
47469: PUSH
47470: LD_INT 1
47472: PUSH
47473: EMPTY
47474: LIST
47475: LIST
47476: LIST
47477: PUSH
47478: LD_VAR 0 1
47482: PUSH
47483: LD_INT 4
47485: MINUS
47486: PUSH
47487: LD_VAR 0 2
47491: PUSH
47492: LD_INT 4
47494: MINUS
47495: PUSH
47496: LD_INT 2
47498: PUSH
47499: EMPTY
47500: LIST
47501: LIST
47502: LIST
47503: PUSH
47504: EMPTY
47505: LIST
47506: LIST
47507: LIST
47508: LIST
47509: LIST
47510: ST_TO_ADDR
// end ; 3 :
47511: GO 47933
47513: LD_INT 3
47515: DOUBLE
47516: EQUAL
47517: IFTRUE 47521
47519: GO 47654
47521: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
47522: LD_ADDR_VAR 0 5
47526: PUSH
47527: LD_VAR 0 1
47531: PUSH
47532: LD_INT 3
47534: PLUS
47535: PUSH
47536: LD_VAR 0 2
47540: PUSH
47541: LD_INT 4
47543: PUSH
47544: EMPTY
47545: LIST
47546: LIST
47547: LIST
47548: PUSH
47549: LD_VAR 0 1
47553: PUSH
47554: LD_INT 4
47556: PLUS
47557: PUSH
47558: LD_VAR 0 2
47562: PUSH
47563: LD_INT 4
47565: PLUS
47566: PUSH
47567: LD_INT 5
47569: PUSH
47570: EMPTY
47571: LIST
47572: LIST
47573: LIST
47574: PUSH
47575: LD_VAR 0 1
47579: PUSH
47580: LD_INT 4
47582: MINUS
47583: PUSH
47584: LD_VAR 0 2
47588: PUSH
47589: LD_INT 1
47591: PUSH
47592: EMPTY
47593: LIST
47594: LIST
47595: LIST
47596: PUSH
47597: LD_VAR 0 1
47601: PUSH
47602: LD_VAR 0 2
47606: PUSH
47607: LD_INT 4
47609: MINUS
47610: PUSH
47611: LD_INT 3
47613: PUSH
47614: EMPTY
47615: LIST
47616: LIST
47617: LIST
47618: PUSH
47619: LD_VAR 0 1
47623: PUSH
47624: LD_INT 3
47626: MINUS
47627: PUSH
47628: LD_VAR 0 2
47632: PUSH
47633: LD_INT 3
47635: MINUS
47636: PUSH
47637: LD_INT 2
47639: PUSH
47640: EMPTY
47641: LIST
47642: LIST
47643: LIST
47644: PUSH
47645: EMPTY
47646: LIST
47647: LIST
47648: LIST
47649: LIST
47650: LIST
47651: ST_TO_ADDR
// end ; 4 :
47652: GO 47933
47654: LD_INT 4
47656: DOUBLE
47657: EQUAL
47658: IFTRUE 47662
47660: GO 47795
47662: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
47663: LD_ADDR_VAR 0 5
47667: PUSH
47668: LD_VAR 0 1
47672: PUSH
47673: LD_VAR 0 2
47677: PUSH
47678: LD_INT 4
47680: PLUS
47681: PUSH
47682: LD_INT 0
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: LIST
47689: PUSH
47690: LD_VAR 0 1
47694: PUSH
47695: LD_INT 3
47697: PLUS
47698: PUSH
47699: LD_VAR 0 2
47703: PUSH
47704: LD_INT 3
47706: PLUS
47707: PUSH
47708: LD_INT 5
47710: PUSH
47711: EMPTY
47712: LIST
47713: LIST
47714: LIST
47715: PUSH
47716: LD_VAR 0 1
47720: PUSH
47721: LD_INT 4
47723: PLUS
47724: PUSH
47725: LD_VAR 0 2
47729: PUSH
47730: LD_INT 4
47732: PUSH
47733: EMPTY
47734: LIST
47735: LIST
47736: LIST
47737: PUSH
47738: LD_VAR 0 1
47742: PUSH
47743: LD_VAR 0 2
47747: PUSH
47748: LD_INT 3
47750: MINUS
47751: PUSH
47752: LD_INT 3
47754: PUSH
47755: EMPTY
47756: LIST
47757: LIST
47758: LIST
47759: PUSH
47760: LD_VAR 0 1
47764: PUSH
47765: LD_INT 4
47767: MINUS
47768: PUSH
47769: LD_VAR 0 2
47773: PUSH
47774: LD_INT 4
47776: MINUS
47777: PUSH
47778: LD_INT 2
47780: PUSH
47781: EMPTY
47782: LIST
47783: LIST
47784: LIST
47785: PUSH
47786: EMPTY
47787: LIST
47788: LIST
47789: LIST
47790: LIST
47791: LIST
47792: ST_TO_ADDR
// end ; 5 :
47793: GO 47933
47795: LD_INT 5
47797: DOUBLE
47798: EQUAL
47799: IFTRUE 47803
47801: GO 47932
47803: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
47804: LD_ADDR_VAR 0 5
47808: PUSH
47809: LD_VAR 0 1
47813: PUSH
47814: LD_INT 4
47816: MINUS
47817: PUSH
47818: LD_VAR 0 2
47822: PUSH
47823: LD_INT 1
47825: PUSH
47826: EMPTY
47827: LIST
47828: LIST
47829: LIST
47830: PUSH
47831: LD_VAR 0 1
47835: PUSH
47836: LD_VAR 0 2
47840: PUSH
47841: LD_INT 4
47843: MINUS
47844: PUSH
47845: LD_INT 3
47847: PUSH
47848: EMPTY
47849: LIST
47850: LIST
47851: LIST
47852: PUSH
47853: LD_VAR 0 1
47857: PUSH
47858: LD_INT 4
47860: PLUS
47861: PUSH
47862: LD_VAR 0 2
47866: PUSH
47867: LD_INT 4
47869: PLUS
47870: PUSH
47871: LD_INT 5
47873: PUSH
47874: EMPTY
47875: LIST
47876: LIST
47877: LIST
47878: PUSH
47879: LD_VAR 0 1
47883: PUSH
47884: LD_INT 3
47886: PLUS
47887: PUSH
47888: LD_VAR 0 2
47892: PUSH
47893: LD_INT 4
47895: PUSH
47896: EMPTY
47897: LIST
47898: LIST
47899: LIST
47900: PUSH
47901: LD_VAR 0 1
47905: PUSH
47906: LD_VAR 0 2
47910: PUSH
47911: LD_INT 3
47913: PLUS
47914: PUSH
47915: LD_INT 0
47917: PUSH
47918: EMPTY
47919: LIST
47920: LIST
47921: LIST
47922: PUSH
47923: EMPTY
47924: LIST
47925: LIST
47926: LIST
47927: LIST
47928: LIST
47929: ST_TO_ADDR
// end ; end ;
47930: GO 47933
47932: POP
// result := list ;
47933: LD_ADDR_VAR 0 4
47937: PUSH
47938: LD_VAR 0 5
47942: ST_TO_ADDR
// end ;
47943: LD_VAR 0 4
47947: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
47948: LD_INT 0
47950: PPUSH
47951: PPUSH
47952: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
47953: LD_VAR 0 1
47957: NOT
47958: IFTRUE 47986
47960: PUSH
47961: LD_VAR 0 2
47965: PUSH
47966: LD_INT 1
47968: PUSH
47969: LD_INT 2
47971: PUSH
47972: LD_INT 3
47974: PUSH
47975: LD_INT 4
47977: PUSH
47978: EMPTY
47979: LIST
47980: LIST
47981: LIST
47982: LIST
47983: IN
47984: NOT
47985: OR
47986: IFFALSE 47990
// exit ;
47988: GO 48073
// tmp := [ ] ;
47990: LD_ADDR_VAR 0 5
47994: PUSH
47995: EMPTY
47996: ST_TO_ADDR
// for i in units do
47997: LD_ADDR_VAR 0 4
48001: PUSH
48002: LD_VAR 0 1
48006: PUSH
48007: FOR_IN
48008: IFFALSE 48042
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
48010: LD_ADDR_VAR 0 5
48014: PUSH
48015: LD_VAR 0 5
48019: PPUSH
48020: LD_VAR 0 4
48024: PPUSH
48025: LD_VAR 0 2
48029: PPUSH
48030: CALL_OW 259
48034: PPUSH
48035: CALL 49468 0 2
48039: ST_TO_ADDR
48040: GO 48007
48042: POP
48043: POP
// if not tmp then
48044: LD_VAR 0 5
48048: NOT
48049: IFFALSE 48053
// exit ;
48051: GO 48073
// result := SortListByListDesc ( units , tmp ) ;
48053: LD_ADDR_VAR 0 3
48057: PUSH
48058: LD_VAR 0 1
48062: PPUSH
48063: LD_VAR 0 5
48067: PPUSH
48068: CALL_OW 77
48072: ST_TO_ADDR
// end ;
48073: LD_VAR 0 3
48077: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
48078: LD_INT 0
48080: PPUSH
48081: PPUSH
48082: PPUSH
// result := false ;
48083: LD_ADDR_VAR 0 3
48087: PUSH
48088: LD_INT 0
48090: ST_TO_ADDR
// if not building then
48091: LD_VAR 0 2
48095: NOT
48096: IFFALSE 48100
// exit ;
48098: GO 48244
// x := GetX ( building ) ;
48100: LD_ADDR_VAR 0 4
48104: PUSH
48105: LD_VAR 0 2
48109: PPUSH
48110: CALL_OW 250
48114: ST_TO_ADDR
// y := GetY ( building ) ;
48115: LD_ADDR_VAR 0 5
48119: PUSH
48120: LD_VAR 0 2
48124: PPUSH
48125: CALL_OW 251
48129: ST_TO_ADDR
// if not x or not y then
48130: LD_VAR 0 4
48134: NOT
48135: IFTRUE 48144
48137: PUSH
48138: LD_VAR 0 5
48142: NOT
48143: OR
48144: IFFALSE 48148
// exit ;
48146: GO 48244
// if GetTaskList ( unit ) then
48148: LD_VAR 0 1
48152: PPUSH
48153: CALL_OW 437
48157: IFFALSE 48244
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
48159: LD_STRING e
48161: PUSH
48162: LD_VAR 0 1
48166: PPUSH
48167: CALL_OW 437
48171: PUSH
48172: LD_INT 1
48174: ARRAY
48175: PUSH
48176: LD_INT 1
48178: ARRAY
48179: EQUAL
48180: IFFALSE 48207
48182: PUSH
48183: LD_VAR 0 4
48187: PUSH
48188: LD_VAR 0 1
48192: PPUSH
48193: CALL_OW 437
48197: PUSH
48198: LD_INT 1
48200: ARRAY
48201: PUSH
48202: LD_INT 2
48204: ARRAY
48205: EQUAL
48206: AND
48207: IFFALSE 48234
48209: PUSH
48210: LD_VAR 0 5
48214: PUSH
48215: LD_VAR 0 1
48219: PPUSH
48220: CALL_OW 437
48224: PUSH
48225: LD_INT 1
48227: ARRAY
48228: PUSH
48229: LD_INT 3
48231: ARRAY
48232: EQUAL
48233: AND
48234: IFFALSE 48244
// result := true end ;
48236: LD_ADDR_VAR 0 3
48240: PUSH
48241: LD_INT 1
48243: ST_TO_ADDR
// end ;
48244: LD_VAR 0 3
48248: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
48249: LD_INT 0
48251: PPUSH
// result := false ;
48252: LD_ADDR_VAR 0 4
48256: PUSH
48257: LD_INT 0
48259: ST_TO_ADDR
// if GetTaskList ( unit ) then
48260: LD_VAR 0 1
48264: PPUSH
48265: CALL_OW 437
48269: IFFALSE 48356
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
48271: LD_STRING M
48273: PUSH
48274: LD_VAR 0 1
48278: PPUSH
48279: CALL_OW 437
48283: PUSH
48284: LD_INT 1
48286: ARRAY
48287: PUSH
48288: LD_INT 1
48290: ARRAY
48291: EQUAL
48292: IFFALSE 48319
48294: PUSH
48295: LD_VAR 0 2
48299: PUSH
48300: LD_VAR 0 1
48304: PPUSH
48305: CALL_OW 437
48309: PUSH
48310: LD_INT 1
48312: ARRAY
48313: PUSH
48314: LD_INT 2
48316: ARRAY
48317: EQUAL
48318: AND
48319: IFFALSE 48346
48321: PUSH
48322: LD_VAR 0 3
48326: PUSH
48327: LD_VAR 0 1
48331: PPUSH
48332: CALL_OW 437
48336: PUSH
48337: LD_INT 1
48339: ARRAY
48340: PUSH
48341: LD_INT 3
48343: ARRAY
48344: EQUAL
48345: AND
48346: IFFALSE 48356
// result := true ;
48348: LD_ADDR_VAR 0 4
48352: PUSH
48353: LD_INT 1
48355: ST_TO_ADDR
// end ; end ;
48356: LD_VAR 0 4
48360: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
48361: LD_INT 0
48363: PPUSH
48364: PPUSH
48365: PPUSH
48366: PPUSH
// if not unit or not area then
48367: LD_VAR 0 1
48371: NOT
48372: IFTRUE 48381
48374: PUSH
48375: LD_VAR 0 2
48379: NOT
48380: OR
48381: IFFALSE 48385
// exit ;
48383: GO 48561
// tmp := AreaToList ( area , i ) ;
48385: LD_ADDR_VAR 0 6
48389: PUSH
48390: LD_VAR 0 2
48394: PPUSH
48395: LD_VAR 0 5
48399: PPUSH
48400: CALL_OW 517
48404: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
48405: LD_ADDR_VAR 0 5
48409: PUSH
48410: DOUBLE
48411: LD_INT 1
48413: DEC
48414: ST_TO_ADDR
48415: LD_VAR 0 6
48419: PUSH
48420: LD_INT 1
48422: ARRAY
48423: PUSH
48424: FOR_TO
48425: IFFALSE 48559
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
48427: LD_ADDR_VAR 0 7
48431: PUSH
48432: LD_VAR 0 6
48436: PUSH
48437: LD_INT 1
48439: ARRAY
48440: PUSH
48441: LD_VAR 0 5
48445: ARRAY
48446: PUSH
48447: LD_VAR 0 6
48451: PUSH
48452: LD_INT 2
48454: ARRAY
48455: PUSH
48456: LD_VAR 0 5
48460: ARRAY
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
48466: LD_INT 92
48468: PUSH
48469: LD_VAR 0 7
48473: PUSH
48474: LD_INT 1
48476: ARRAY
48477: PUSH
48478: LD_VAR 0 7
48482: PUSH
48483: LD_INT 2
48485: ARRAY
48486: PUSH
48487: LD_INT 2
48489: PUSH
48490: EMPTY
48491: LIST
48492: LIST
48493: LIST
48494: LIST
48495: PPUSH
48496: CALL_OW 69
48500: PUSH
48501: LD_INT 0
48503: EQUAL
48504: IFFALSE 48557
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
48506: LD_VAR 0 1
48510: PPUSH
48511: LD_VAR 0 7
48515: PUSH
48516: LD_INT 1
48518: ARRAY
48519: PPUSH
48520: LD_VAR 0 7
48524: PUSH
48525: LD_INT 2
48527: ARRAY
48528: PPUSH
48529: LD_VAR 0 3
48533: PPUSH
48534: CALL_OW 48
// result := IsPlaced ( unit ) ;
48538: LD_ADDR_VAR 0 4
48542: PUSH
48543: LD_VAR 0 1
48547: PPUSH
48548: CALL_OW 305
48552: ST_TO_ADDR
// exit ;
48553: POP
48554: POP
48555: GO 48561
// end ; end ;
48557: GO 48424
48559: POP
48560: POP
// end ;
48561: LD_VAR 0 4
48565: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
48566: LD_INT 0
48568: PPUSH
48569: PPUSH
48570: PPUSH
// if not side or side > 8 then
48571: LD_VAR 0 1
48575: NOT
48576: IFTRUE 48588
48578: PUSH
48579: LD_VAR 0 1
48583: PUSH
48584: LD_INT 8
48586: GREATER
48587: OR
48588: IFFALSE 48592
// exit ;
48590: GO 48779
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
48592: LD_ADDR_VAR 0 4
48596: PUSH
48597: LD_INT 22
48599: PUSH
48600: LD_VAR 0 1
48604: PUSH
48605: EMPTY
48606: LIST
48607: LIST
48608: PUSH
48609: LD_INT 21
48611: PUSH
48612: LD_INT 3
48614: PUSH
48615: EMPTY
48616: LIST
48617: LIST
48618: PUSH
48619: EMPTY
48620: LIST
48621: LIST
48622: PPUSH
48623: CALL_OW 69
48627: ST_TO_ADDR
// if not tmp then
48628: LD_VAR 0 4
48632: NOT
48633: IFFALSE 48637
// exit ;
48635: GO 48779
// enable_addtolog := true ;
48637: LD_ADDR_OWVAR 81
48641: PUSH
48642: LD_INT 1
48644: ST_TO_ADDR
// AddToLog ( [ ) ;
48645: LD_STRING [
48647: PPUSH
48648: CALL_OW 561
// for i in tmp do
48652: LD_ADDR_VAR 0 3
48656: PUSH
48657: LD_VAR 0 4
48661: PUSH
48662: FOR_IN
48663: IFFALSE 48770
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
48665: LD_STRING [
48667: PUSH
48668: LD_VAR 0 3
48672: PPUSH
48673: CALL_OW 266
48677: STR
48678: PUSH
48679: LD_STRING , 
48681: STR
48682: PUSH
48683: LD_VAR 0 3
48687: PPUSH
48688: CALL_OW 250
48692: STR
48693: PUSH
48694: LD_STRING , 
48696: STR
48697: PUSH
48698: LD_VAR 0 3
48702: PPUSH
48703: CALL_OW 251
48707: STR
48708: PUSH
48709: LD_STRING , 
48711: STR
48712: PUSH
48713: LD_VAR 0 3
48717: PPUSH
48718: CALL_OW 254
48722: STR
48723: PUSH
48724: LD_STRING , 
48726: STR
48727: PUSH
48728: LD_VAR 0 3
48732: PPUSH
48733: LD_INT 1
48735: PPUSH
48736: CALL_OW 268
48740: STR
48741: PUSH
48742: LD_STRING , 
48744: STR
48745: PUSH
48746: LD_VAR 0 3
48750: PPUSH
48751: LD_INT 2
48753: PPUSH
48754: CALL_OW 268
48758: STR
48759: PUSH
48760: LD_STRING ],
48762: STR
48763: PPUSH
48764: CALL_OW 561
// end ;
48768: GO 48662
48770: POP
48771: POP
// AddToLog ( ]; ) ;
48772: LD_STRING ];
48774: PPUSH
48775: CALL_OW 561
// end ;
48779: LD_VAR 0 2
48783: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
48784: LD_INT 0
48786: PPUSH
48787: PPUSH
48788: PPUSH
48789: PPUSH
48790: PPUSH
// if not area or not rate or not max then
48791: LD_VAR 0 1
48795: NOT
48796: IFTRUE 48805
48798: PUSH
48799: LD_VAR 0 2
48803: NOT
48804: OR
48805: IFTRUE 48814
48807: PUSH
48808: LD_VAR 0 4
48812: NOT
48813: OR
48814: IFFALSE 48818
// exit ;
48816: GO 49007
// while 1 do
48818: LD_INT 1
48820: IFFALSE 49007
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
48822: LD_ADDR_VAR 0 9
48826: PUSH
48827: LD_VAR 0 1
48831: PPUSH
48832: LD_INT 1
48834: PPUSH
48835: CALL_OW 287
48839: PUSH
48840: LD_INT 10
48842: MUL
48843: ST_TO_ADDR
// r := rate / 10 ;
48844: LD_ADDR_VAR 0 7
48848: PUSH
48849: LD_VAR 0 2
48853: PUSH
48854: LD_INT 10
48856: DIVREAL
48857: ST_TO_ADDR
// time := 1 1$00 ;
48858: LD_ADDR_VAR 0 8
48862: PUSH
48863: LD_INT 2100
48865: ST_TO_ADDR
// if amount < min then
48866: LD_VAR 0 9
48870: PUSH
48871: LD_VAR 0 3
48875: LESS
48876: IFFALSE 48894
// r := r * 2 else
48878: LD_ADDR_VAR 0 7
48882: PUSH
48883: LD_VAR 0 7
48887: PUSH
48888: LD_INT 2
48890: MUL
48891: ST_TO_ADDR
48892: GO 48920
// if amount > max then
48894: LD_VAR 0 9
48898: PUSH
48899: LD_VAR 0 4
48903: GREATER
48904: IFFALSE 48920
// r := r / 2 ;
48906: LD_ADDR_VAR 0 7
48910: PUSH
48911: LD_VAR 0 7
48915: PUSH
48916: LD_INT 2
48918: DIVREAL
48919: ST_TO_ADDR
// time := time / r ;
48920: LD_ADDR_VAR 0 8
48924: PUSH
48925: LD_VAR 0 8
48929: PUSH
48930: LD_VAR 0 7
48934: DIVREAL
48935: ST_TO_ADDR
// if time < 0 then
48936: LD_VAR 0 8
48940: PUSH
48941: LD_INT 0
48943: LESS
48944: IFFALSE 48961
// time := time * - 1 ;
48946: LD_ADDR_VAR 0 8
48950: PUSH
48951: LD_VAR 0 8
48955: PUSH
48956: LD_INT 1
48958: NEG
48959: MUL
48960: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
48961: LD_VAR 0 8
48965: PUSH
48966: LD_INT 35
48968: PPUSH
48969: LD_INT 875
48971: PPUSH
48972: CALL_OW 12
48976: PLUS
48977: PPUSH
48978: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
48982: LD_INT 1
48984: PPUSH
48985: LD_INT 5
48987: PPUSH
48988: CALL_OW 12
48992: PPUSH
48993: LD_VAR 0 1
48997: PPUSH
48998: LD_INT 1
49000: PPUSH
49001: CALL_OW 55
// end ;
49005: GO 48818
// end ;
49007: LD_VAR 0 5
49011: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
49012: LD_INT 0
49014: PPUSH
49015: PPUSH
49016: PPUSH
49017: PPUSH
49018: PPUSH
49019: PPUSH
49020: PPUSH
49021: PPUSH
// if not turrets or not factories then
49022: LD_VAR 0 1
49026: NOT
49027: IFTRUE 49036
49029: PUSH
49030: LD_VAR 0 2
49034: NOT
49035: OR
49036: IFFALSE 49040
// exit ;
49038: GO 49347
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
49040: LD_ADDR_VAR 0 10
49044: PUSH
49045: LD_INT 5
49047: PUSH
49048: LD_INT 6
49050: PUSH
49051: EMPTY
49052: LIST
49053: LIST
49054: PUSH
49055: LD_INT 2
49057: PUSH
49058: LD_INT 4
49060: PUSH
49061: EMPTY
49062: LIST
49063: LIST
49064: PUSH
49065: LD_INT 3
49067: PUSH
49068: LD_INT 5
49070: PUSH
49071: EMPTY
49072: LIST
49073: LIST
49074: PUSH
49075: EMPTY
49076: LIST
49077: LIST
49078: LIST
49079: PUSH
49080: LD_INT 24
49082: PUSH
49083: LD_INT 25
49085: PUSH
49086: EMPTY
49087: LIST
49088: LIST
49089: PUSH
49090: LD_INT 23
49092: PUSH
49093: LD_INT 27
49095: PUSH
49096: EMPTY
49097: LIST
49098: LIST
49099: PUSH
49100: EMPTY
49101: LIST
49102: LIST
49103: PUSH
49104: LD_INT 42
49106: PUSH
49107: LD_INT 43
49109: PUSH
49110: EMPTY
49111: LIST
49112: LIST
49113: PUSH
49114: LD_INT 44
49116: PUSH
49117: LD_INT 46
49119: PUSH
49120: EMPTY
49121: LIST
49122: LIST
49123: PUSH
49124: LD_INT 45
49126: PUSH
49127: LD_INT 47
49129: PUSH
49130: EMPTY
49131: LIST
49132: LIST
49133: PUSH
49134: EMPTY
49135: LIST
49136: LIST
49137: LIST
49138: PUSH
49139: EMPTY
49140: LIST
49141: LIST
49142: LIST
49143: ST_TO_ADDR
// result := [ ] ;
49144: LD_ADDR_VAR 0 3
49148: PUSH
49149: EMPTY
49150: ST_TO_ADDR
// for i in turrets do
49151: LD_ADDR_VAR 0 4
49155: PUSH
49156: LD_VAR 0 1
49160: PUSH
49161: FOR_IN
49162: IFFALSE 49345
// begin nat := GetNation ( i ) ;
49164: LD_ADDR_VAR 0 7
49168: PUSH
49169: LD_VAR 0 4
49173: PPUSH
49174: CALL_OW 248
49178: ST_TO_ADDR
// weapon := 0 ;
49179: LD_ADDR_VAR 0 8
49183: PUSH
49184: LD_INT 0
49186: ST_TO_ADDR
// if not nat then
49187: LD_VAR 0 7
49191: NOT
49192: IFFALSE 49196
// continue ;
49194: GO 49161
// for j in list [ nat ] do
49196: LD_ADDR_VAR 0 5
49200: PUSH
49201: LD_VAR 0 10
49205: PUSH
49206: LD_VAR 0 7
49210: ARRAY
49211: PUSH
49212: FOR_IN
49213: IFFALSE 49254
// if GetBWeapon ( i ) = j [ 1 ] then
49215: LD_VAR 0 4
49219: PPUSH
49220: CALL_OW 269
49224: PUSH
49225: LD_VAR 0 5
49229: PUSH
49230: LD_INT 1
49232: ARRAY
49233: EQUAL
49234: IFFALSE 49252
// begin weapon := j [ 2 ] ;
49236: LD_ADDR_VAR 0 8
49240: PUSH
49241: LD_VAR 0 5
49245: PUSH
49246: LD_INT 2
49248: ARRAY
49249: ST_TO_ADDR
// break ;
49250: GO 49254
// end ;
49252: GO 49212
49254: POP
49255: POP
// if not weapon then
49256: LD_VAR 0 8
49260: NOT
49261: IFFALSE 49265
// continue ;
49263: GO 49161
// for k in factories do
49265: LD_ADDR_VAR 0 6
49269: PUSH
49270: LD_VAR 0 2
49274: PUSH
49275: FOR_IN
49276: IFFALSE 49341
// begin weapons := AvailableWeaponList ( k ) ;
49278: LD_ADDR_VAR 0 9
49282: PUSH
49283: LD_VAR 0 6
49287: PPUSH
49288: CALL_OW 478
49292: ST_TO_ADDR
// if not weapons then
49293: LD_VAR 0 9
49297: NOT
49298: IFFALSE 49302
// continue ;
49300: GO 49275
// if weapon in weapons then
49302: LD_VAR 0 8
49306: PUSH
49307: LD_VAR 0 9
49311: IN
49312: IFFALSE 49339
// begin result := [ i , weapon ] ;
49314: LD_ADDR_VAR 0 3
49318: PUSH
49319: LD_VAR 0 4
49323: PUSH
49324: LD_VAR 0 8
49328: PUSH
49329: EMPTY
49330: LIST
49331: LIST
49332: ST_TO_ADDR
// exit ;
49333: POP
49334: POP
49335: POP
49336: POP
49337: GO 49347
// end ; end ;
49339: GO 49275
49341: POP
49342: POP
// end ;
49343: GO 49161
49345: POP
49346: POP
// end ;
49347: LD_VAR 0 3
49351: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
49352: LD_INT 0
49354: PPUSH
// if not side or side > 8 then
49355: LD_VAR 0 3
49359: NOT
49360: IFTRUE 49372
49362: PUSH
49363: LD_VAR 0 3
49367: PUSH
49368: LD_INT 8
49370: GREATER
49371: OR
49372: IFFALSE 49376
// exit ;
49374: GO 49435
// if not range then
49376: LD_VAR 0 4
49380: NOT
49381: IFFALSE 49392
// range := - 12 ;
49383: LD_ADDR_VAR 0 4
49387: PUSH
49388: LD_INT 12
49390: NEG
49391: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
49392: LD_VAR 0 1
49396: PPUSH
49397: LD_VAR 0 2
49401: PPUSH
49402: LD_VAR 0 3
49406: PPUSH
49407: LD_VAR 0 4
49411: PPUSH
49412: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
49416: LD_VAR 0 1
49420: PPUSH
49421: LD_VAR 0 2
49425: PPUSH
49426: LD_VAR 0 3
49430: PPUSH
49431: CALL_OW 331
// end ;
49435: LD_VAR 0 5
49439: RET
// export function Video ( mode ) ; begin
49440: LD_INT 0
49442: PPUSH
// ingame_video = mode ;
49443: LD_ADDR_OWVAR 52
49447: PUSH
49448: LD_VAR 0 1
49452: ST_TO_ADDR
// interface_hidden = mode ;
49453: LD_ADDR_OWVAR 54
49457: PUSH
49458: LD_VAR 0 1
49462: ST_TO_ADDR
// end ;
49463: LD_VAR 0 2
49467: RET
// export function Join ( array , element ) ; begin
49468: LD_INT 0
49470: PPUSH
// result := Replace ( array , array + 1 , element ) ;
49471: LD_ADDR_VAR 0 3
49475: PUSH
49476: LD_VAR 0 1
49480: PPUSH
49481: LD_VAR 0 1
49485: PUSH
49486: LD_INT 1
49488: PLUS
49489: PPUSH
49490: LD_VAR 0 2
49494: PPUSH
49495: CALL_OW 1
49499: ST_TO_ADDR
// end ;
49500: LD_VAR 0 3
49504: RET
// export function JoinUnion ( array , element ) ; begin
49505: LD_INT 0
49507: PPUSH
// result := array union element ;
49508: LD_ADDR_VAR 0 3
49512: PUSH
49513: LD_VAR 0 1
49517: PUSH
49518: LD_VAR 0 2
49522: UNION
49523: ST_TO_ADDR
// end ;
49524: LD_VAR 0 3
49528: RET
// export function GetBehemoths ( side ) ; begin
49529: LD_INT 0
49531: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
49532: LD_ADDR_VAR 0 2
49536: PUSH
49537: LD_INT 22
49539: PUSH
49540: LD_VAR 0 1
49544: PUSH
49545: EMPTY
49546: LIST
49547: LIST
49548: PUSH
49549: LD_INT 31
49551: PUSH
49552: LD_INT 25
49554: PUSH
49555: EMPTY
49556: LIST
49557: LIST
49558: PUSH
49559: EMPTY
49560: LIST
49561: LIST
49562: PPUSH
49563: CALL_OW 69
49567: ST_TO_ADDR
// end ;
49568: LD_VAR 0 2
49572: RET
// export function Shuffle ( array ) ; var i , index ; begin
49573: LD_INT 0
49575: PPUSH
49576: PPUSH
49577: PPUSH
// result := [ ] ;
49578: LD_ADDR_VAR 0 2
49582: PUSH
49583: EMPTY
49584: ST_TO_ADDR
// if not array then
49585: LD_VAR 0 1
49589: NOT
49590: IFFALSE 49594
// exit ;
49592: GO 49693
// Randomize ;
49594: CALL_OW 10
// for i = array downto 1 do
49598: LD_ADDR_VAR 0 3
49602: PUSH
49603: DOUBLE
49604: LD_VAR 0 1
49608: INC
49609: ST_TO_ADDR
49610: LD_INT 1
49612: PUSH
49613: FOR_DOWNTO
49614: IFFALSE 49691
// begin index := rand ( 1 , array ) ;
49616: LD_ADDR_VAR 0 4
49620: PUSH
49621: LD_INT 1
49623: PPUSH
49624: LD_VAR 0 1
49628: PPUSH
49629: CALL_OW 12
49633: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
49634: LD_ADDR_VAR 0 2
49638: PUSH
49639: LD_VAR 0 2
49643: PPUSH
49644: LD_VAR 0 2
49648: PUSH
49649: LD_INT 1
49651: PLUS
49652: PPUSH
49653: LD_VAR 0 1
49657: PUSH
49658: LD_VAR 0 4
49662: ARRAY
49663: PPUSH
49664: CALL_OW 2
49668: ST_TO_ADDR
// array := Delete ( array , index ) ;
49669: LD_ADDR_VAR 0 1
49673: PUSH
49674: LD_VAR 0 1
49678: PPUSH
49679: LD_VAR 0 4
49683: PPUSH
49684: CALL_OW 3
49688: ST_TO_ADDR
// end ;
49689: GO 49613
49691: POP
49692: POP
// end ;
49693: LD_VAR 0 2
49697: RET
// export function GetBaseMaterials ( base ) ; begin
49698: LD_INT 0
49700: PPUSH
// result := [ 0 , 0 , 0 ] ;
49701: LD_ADDR_VAR 0 2
49705: PUSH
49706: LD_INT 0
49708: PUSH
49709: LD_INT 0
49711: PUSH
49712: LD_INT 0
49714: PUSH
49715: EMPTY
49716: LIST
49717: LIST
49718: LIST
49719: ST_TO_ADDR
// if not base then
49720: LD_VAR 0 1
49724: NOT
49725: IFFALSE 49729
// exit ;
49727: GO 49778
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
49729: LD_ADDR_VAR 0 2
49733: PUSH
49734: LD_VAR 0 1
49738: PPUSH
49739: LD_INT 1
49741: PPUSH
49742: CALL_OW 275
49746: PUSH
49747: LD_VAR 0 1
49751: PPUSH
49752: LD_INT 2
49754: PPUSH
49755: CALL_OW 275
49759: PUSH
49760: LD_VAR 0 1
49764: PPUSH
49765: LD_INT 3
49767: PPUSH
49768: CALL_OW 275
49772: PUSH
49773: EMPTY
49774: LIST
49775: LIST
49776: LIST
49777: ST_TO_ADDR
// end ;
49778: LD_VAR 0 2
49782: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
49783: LD_INT 0
49785: PPUSH
49786: PPUSH
// result := array ;
49787: LD_ADDR_VAR 0 3
49791: PUSH
49792: LD_VAR 0 1
49796: ST_TO_ADDR
// if size >= result then
49797: LD_VAR 0 2
49801: PUSH
49802: LD_VAR 0 3
49806: GREATEREQUAL
49807: IFFALSE 49811
// exit ;
49809: GO 49861
// if size then
49811: LD_VAR 0 2
49815: IFFALSE 49861
// for i := array downto size do
49817: LD_ADDR_VAR 0 4
49821: PUSH
49822: DOUBLE
49823: LD_VAR 0 1
49827: INC
49828: ST_TO_ADDR
49829: LD_VAR 0 2
49833: PUSH
49834: FOR_DOWNTO
49835: IFFALSE 49859
// result := Delete ( result , result ) ;
49837: LD_ADDR_VAR 0 3
49841: PUSH
49842: LD_VAR 0 3
49846: PPUSH
49847: LD_VAR 0 3
49851: PPUSH
49852: CALL_OW 3
49856: ST_TO_ADDR
49857: GO 49834
49859: POP
49860: POP
// end ;
49861: LD_VAR 0 3
49865: RET
// export function ComExit ( unit ) ; var tmp ; begin
49866: LD_INT 0
49868: PPUSH
49869: PPUSH
// if not IsInUnit ( unit ) then
49870: LD_VAR 0 1
49874: PPUSH
49875: CALL_OW 310
49879: NOT
49880: IFFALSE 49884
// exit ;
49882: GO 49944
// tmp := IsInUnit ( unit ) ;
49884: LD_ADDR_VAR 0 3
49888: PUSH
49889: LD_VAR 0 1
49893: PPUSH
49894: CALL_OW 310
49898: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
49899: LD_VAR 0 3
49903: PPUSH
49904: CALL_OW 247
49908: PUSH
49909: LD_INT 2
49911: EQUAL
49912: IFFALSE 49925
// ComExitVehicle ( unit ) else
49914: LD_VAR 0 1
49918: PPUSH
49919: CALL_OW 121
49923: GO 49934
// ComExitBuilding ( unit ) ;
49925: LD_VAR 0 1
49929: PPUSH
49930: CALL_OW 122
// result := tmp ;
49934: LD_ADDR_VAR 0 2
49938: PUSH
49939: LD_VAR 0 3
49943: ST_TO_ADDR
// end ;
49944: LD_VAR 0 2
49948: RET
// export function ComExitAll ( units ) ; var i ; begin
49949: LD_INT 0
49951: PPUSH
49952: PPUSH
// if not units then
49953: LD_VAR 0 1
49957: NOT
49958: IFFALSE 49962
// exit ;
49960: GO 49988
// for i in units do
49962: LD_ADDR_VAR 0 3
49966: PUSH
49967: LD_VAR 0 1
49971: PUSH
49972: FOR_IN
49973: IFFALSE 49986
// ComExit ( i ) ;
49975: LD_VAR 0 3
49979: PPUSH
49980: CALL 49866 0 1
49984: GO 49972
49986: POP
49987: POP
// end ;
49988: LD_VAR 0 2
49992: RET
// export function ResetHc ; begin
49993: LD_INT 0
49995: PPUSH
// InitHc ;
49996: CALL_OW 19
// hc_importance := 0 ;
50000: LD_ADDR_OWVAR 32
50004: PUSH
50005: LD_INT 0
50007: ST_TO_ADDR
// end ;
50008: LD_VAR 0 1
50012: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
50013: LD_INT 0
50015: PPUSH
50016: PPUSH
50017: PPUSH
// _x := ( x1 + x2 ) div 2 ;
50018: LD_ADDR_VAR 0 6
50022: PUSH
50023: LD_VAR 0 1
50027: PUSH
50028: LD_VAR 0 3
50032: PLUS
50033: PUSH
50034: LD_INT 2
50036: DIV
50037: ST_TO_ADDR
// if _x < 0 then
50038: LD_VAR 0 6
50042: PUSH
50043: LD_INT 0
50045: LESS
50046: IFFALSE 50063
// _x := _x * - 1 ;
50048: LD_ADDR_VAR 0 6
50052: PUSH
50053: LD_VAR 0 6
50057: PUSH
50058: LD_INT 1
50060: NEG
50061: MUL
50062: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
50063: LD_ADDR_VAR 0 7
50067: PUSH
50068: LD_VAR 0 2
50072: PUSH
50073: LD_VAR 0 4
50077: PLUS
50078: PUSH
50079: LD_INT 2
50081: DIV
50082: ST_TO_ADDR
// if _y < 0 then
50083: LD_VAR 0 7
50087: PUSH
50088: LD_INT 0
50090: LESS
50091: IFFALSE 50108
// _y := _y * - 1 ;
50093: LD_ADDR_VAR 0 7
50097: PUSH
50098: LD_VAR 0 7
50102: PUSH
50103: LD_INT 1
50105: NEG
50106: MUL
50107: ST_TO_ADDR
// result := [ _x , _y ] ;
50108: LD_ADDR_VAR 0 5
50112: PUSH
50113: LD_VAR 0 6
50117: PUSH
50118: LD_VAR 0 7
50122: PUSH
50123: EMPTY
50124: LIST
50125: LIST
50126: ST_TO_ADDR
// end ;
50127: LD_VAR 0 5
50131: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
50132: LD_INT 0
50134: PPUSH
50135: PPUSH
50136: PPUSH
50137: PPUSH
// task := GetTaskList ( unit ) ;
50138: LD_ADDR_VAR 0 7
50142: PUSH
50143: LD_VAR 0 1
50147: PPUSH
50148: CALL_OW 437
50152: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
50153: LD_VAR 0 7
50157: NOT
50158: IFFALSE 50177
50160: PUSH
50161: LD_VAR 0 1
50165: PPUSH
50166: LD_VAR 0 2
50170: PPUSH
50171: CALL_OW 308
50175: NOT
50176: AND
50177: IFFALSE 50181
// exit ;
50179: GO 50299
// if IsInArea ( unit , area ) then
50181: LD_VAR 0 1
50185: PPUSH
50186: LD_VAR 0 2
50190: PPUSH
50191: CALL_OW 308
50195: IFFALSE 50213
// begin ComMoveToArea ( unit , goAway ) ;
50197: LD_VAR 0 1
50201: PPUSH
50202: LD_VAR 0 3
50206: PPUSH
50207: CALL_OW 113
// exit ;
50211: GO 50299
// end ; if task [ 1 ] [ 1 ] <> M then
50213: LD_VAR 0 7
50217: PUSH
50218: LD_INT 1
50220: ARRAY
50221: PUSH
50222: LD_INT 1
50224: ARRAY
50225: PUSH
50226: LD_STRING M
50228: NONEQUAL
50229: IFFALSE 50233
// exit ;
50231: GO 50299
// x := task [ 1 ] [ 2 ] ;
50233: LD_ADDR_VAR 0 5
50237: PUSH
50238: LD_VAR 0 7
50242: PUSH
50243: LD_INT 1
50245: ARRAY
50246: PUSH
50247: LD_INT 2
50249: ARRAY
50250: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
50251: LD_ADDR_VAR 0 6
50255: PUSH
50256: LD_VAR 0 7
50260: PUSH
50261: LD_INT 1
50263: ARRAY
50264: PUSH
50265: LD_INT 3
50267: ARRAY
50268: ST_TO_ADDR
// if InArea ( x , y , area ) then
50269: LD_VAR 0 5
50273: PPUSH
50274: LD_VAR 0 6
50278: PPUSH
50279: LD_VAR 0 2
50283: PPUSH
50284: CALL_OW 309
50288: IFFALSE 50299
// ComStop ( unit ) ;
50290: LD_VAR 0 1
50294: PPUSH
50295: CALL_OW 141
// end ;
50299: LD_VAR 0 4
50303: RET
// export function Abs ( value ) ; begin
50304: LD_INT 0
50306: PPUSH
// result := value ;
50307: LD_ADDR_VAR 0 2
50311: PUSH
50312: LD_VAR 0 1
50316: ST_TO_ADDR
// if value < 0 then
50317: LD_VAR 0 1
50321: PUSH
50322: LD_INT 0
50324: LESS
50325: IFFALSE 50342
// result := value * - 1 ;
50327: LD_ADDR_VAR 0 2
50331: PUSH
50332: LD_VAR 0 1
50336: PUSH
50337: LD_INT 1
50339: NEG
50340: MUL
50341: ST_TO_ADDR
// end ;
50342: LD_VAR 0 2
50346: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
50347: LD_INT 0
50349: PPUSH
50350: PPUSH
50351: PPUSH
50352: PPUSH
50353: PPUSH
50354: PPUSH
50355: PPUSH
50356: PPUSH
// if not unit or not building then
50357: LD_VAR 0 1
50361: NOT
50362: IFTRUE 50371
50364: PUSH
50365: LD_VAR 0 2
50369: NOT
50370: OR
50371: IFFALSE 50375
// exit ;
50373: GO 50603
// x := GetX ( building ) ;
50375: LD_ADDR_VAR 0 4
50379: PUSH
50380: LD_VAR 0 2
50384: PPUSH
50385: CALL_OW 250
50389: ST_TO_ADDR
// y := GetY ( building ) ;
50390: LD_ADDR_VAR 0 6
50394: PUSH
50395: LD_VAR 0 2
50399: PPUSH
50400: CALL_OW 251
50404: ST_TO_ADDR
// d := GetDir ( building ) ;
50405: LD_ADDR_VAR 0 8
50409: PUSH
50410: LD_VAR 0 2
50414: PPUSH
50415: CALL_OW 254
50419: ST_TO_ADDR
// r := 4 ;
50420: LD_ADDR_VAR 0 9
50424: PUSH
50425: LD_INT 4
50427: ST_TO_ADDR
// for i := 1 to 5 do
50428: LD_ADDR_VAR 0 10
50432: PUSH
50433: DOUBLE
50434: LD_INT 1
50436: DEC
50437: ST_TO_ADDR
50438: LD_INT 5
50440: PUSH
50441: FOR_TO
50442: IFFALSE 50601
// begin _x := ShiftX ( x , d , r + i ) ;
50444: LD_ADDR_VAR 0 5
50448: PUSH
50449: LD_VAR 0 4
50453: PPUSH
50454: LD_VAR 0 8
50458: PPUSH
50459: LD_VAR 0 9
50463: PUSH
50464: LD_VAR 0 10
50468: PLUS
50469: PPUSH
50470: CALL_OW 272
50474: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
50475: LD_ADDR_VAR 0 7
50479: PUSH
50480: LD_VAR 0 6
50484: PPUSH
50485: LD_VAR 0 8
50489: PPUSH
50490: LD_VAR 0 9
50494: PUSH
50495: LD_VAR 0 10
50499: PLUS
50500: PPUSH
50501: CALL_OW 273
50505: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
50506: LD_VAR 0 5
50510: PPUSH
50511: LD_VAR 0 7
50515: PPUSH
50516: CALL_OW 488
50520: IFFALSE 50555
50522: PUSH
50523: LD_VAR 0 5
50527: PPUSH
50528: LD_VAR 0 7
50532: PPUSH
50533: CALL_OW 428
50537: PPUSH
50538: CALL_OW 247
50542: PUSH
50543: LD_INT 3
50545: PUSH
50546: LD_INT 2
50548: PUSH
50549: EMPTY
50550: LIST
50551: LIST
50552: IN
50553: NOT
50554: AND
50555: IFFALSE 50599
// begin ComMoveXY ( unit , _x , _y ) ;
50557: LD_VAR 0 1
50561: PPUSH
50562: LD_VAR 0 5
50566: PPUSH
50567: LD_VAR 0 7
50571: PPUSH
50572: CALL_OW 111
// result := [ _x , _y ] ;
50576: LD_ADDR_VAR 0 3
50580: PUSH
50581: LD_VAR 0 5
50585: PUSH
50586: LD_VAR 0 7
50590: PUSH
50591: EMPTY
50592: LIST
50593: LIST
50594: ST_TO_ADDR
// exit ;
50595: POP
50596: POP
50597: GO 50603
// end ; end ;
50599: GO 50441
50601: POP
50602: POP
// end ;
50603: LD_VAR 0 3
50607: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
50608: LD_INT 0
50610: PPUSH
50611: PPUSH
50612: PPUSH
// result := 0 ;
50613: LD_ADDR_VAR 0 3
50617: PUSH
50618: LD_INT 0
50620: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
50621: LD_VAR 0 1
50625: PUSH
50626: LD_INT 0
50628: LESS
50629: IFTRUE 50641
50631: PUSH
50632: LD_VAR 0 1
50636: PUSH
50637: LD_INT 8
50639: GREATER
50640: OR
50641: IFTRUE 50653
50643: PUSH
50644: LD_VAR 0 2
50648: PUSH
50649: LD_INT 0
50651: LESS
50652: OR
50653: IFTRUE 50665
50655: PUSH
50656: LD_VAR 0 2
50660: PUSH
50661: LD_INT 8
50663: GREATER
50664: OR
50665: IFFALSE 50669
// exit ;
50667: GO 50744
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
50669: LD_ADDR_VAR 0 4
50673: PUSH
50674: LD_INT 22
50676: PUSH
50677: LD_VAR 0 2
50681: PUSH
50682: EMPTY
50683: LIST
50684: LIST
50685: PPUSH
50686: CALL_OW 69
50690: PUSH
50691: FOR_IN
50692: IFFALSE 50742
// begin un := UnitShoot ( i ) ;
50694: LD_ADDR_VAR 0 5
50698: PUSH
50699: LD_VAR 0 4
50703: PPUSH
50704: CALL_OW 504
50708: ST_TO_ADDR
// if GetSide ( un ) = side1 then
50709: LD_VAR 0 5
50713: PPUSH
50714: CALL_OW 255
50718: PUSH
50719: LD_VAR 0 1
50723: EQUAL
50724: IFFALSE 50740
// begin result := un ;
50726: LD_ADDR_VAR 0 3
50730: PUSH
50731: LD_VAR 0 5
50735: ST_TO_ADDR
// exit ;
50736: POP
50737: POP
50738: GO 50744
// end ; end ;
50740: GO 50691
50742: POP
50743: POP
// end ;
50744: LD_VAR 0 3
50748: RET
// export function GetCargoBay ( units ) ; begin
50749: LD_INT 0
50751: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
50752: LD_ADDR_VAR 0 2
50756: PUSH
50757: LD_VAR 0 1
50761: PPUSH
50762: LD_INT 2
50764: PUSH
50765: LD_INT 34
50767: PUSH
50768: LD_INT 12
50770: PUSH
50771: EMPTY
50772: LIST
50773: LIST
50774: PUSH
50775: LD_INT 34
50777: PUSH
50778: LD_INT 51
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: PUSH
50785: LD_INT 34
50787: PUSH
50788: LD_INT 32
50790: PUSH
50791: EMPTY
50792: LIST
50793: LIST
50794: PUSH
50795: LD_INT 34
50797: PUSH
50798: LD_INT 89
50800: PUSH
50801: EMPTY
50802: LIST
50803: LIST
50804: PUSH
50805: EMPTY
50806: LIST
50807: LIST
50808: LIST
50809: LIST
50810: LIST
50811: PPUSH
50812: CALL_OW 72
50816: ST_TO_ADDR
// end ;
50817: LD_VAR 0 2
50821: RET
// export function Negate ( value ) ; begin
50822: LD_INT 0
50824: PPUSH
// result := not value ;
50825: LD_ADDR_VAR 0 2
50829: PUSH
50830: LD_VAR 0 1
50834: NOT
50835: ST_TO_ADDR
// end ;
50836: LD_VAR 0 2
50840: RET
// export function Inc ( value ) ; begin
50841: LD_INT 0
50843: PPUSH
// result := value + 1 ;
50844: LD_ADDR_VAR 0 2
50848: PUSH
50849: LD_VAR 0 1
50853: PUSH
50854: LD_INT 1
50856: PLUS
50857: ST_TO_ADDR
// end ;
50858: LD_VAR 0 2
50862: RET
// export function Dec ( value ) ; begin
50863: LD_INT 0
50865: PPUSH
// result := value - 1 ;
50866: LD_ADDR_VAR 0 2
50870: PUSH
50871: LD_VAR 0 1
50875: PUSH
50876: LD_INT 1
50878: MINUS
50879: ST_TO_ADDR
// end ;
50880: LD_VAR 0 2
50884: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
50885: LD_INT 0
50887: PPUSH
50888: PPUSH
50889: PPUSH
50890: PPUSH
50891: PPUSH
50892: PPUSH
50893: PPUSH
50894: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
50895: LD_VAR 0 1
50899: PPUSH
50900: LD_VAR 0 2
50904: PPUSH
50905: CALL_OW 488
50909: NOT
50910: IFTRUE 50929
50912: PUSH
50913: LD_VAR 0 3
50917: PPUSH
50918: LD_VAR 0 4
50922: PPUSH
50923: CALL_OW 488
50927: NOT
50928: OR
50929: IFFALSE 50942
// begin result := - 1 ;
50931: LD_ADDR_VAR 0 5
50935: PUSH
50936: LD_INT 1
50938: NEG
50939: ST_TO_ADDR
// exit ;
50940: GO 51177
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
50942: LD_ADDR_VAR 0 12
50946: PUSH
50947: LD_VAR 0 1
50951: PPUSH
50952: LD_VAR 0 2
50956: PPUSH
50957: LD_VAR 0 3
50961: PPUSH
50962: LD_VAR 0 4
50966: PPUSH
50967: CALL 50013 0 4
50971: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
50972: LD_ADDR_VAR 0 11
50976: PUSH
50977: LD_VAR 0 1
50981: PPUSH
50982: LD_VAR 0 2
50986: PPUSH
50987: LD_VAR 0 12
50991: PUSH
50992: LD_INT 1
50994: ARRAY
50995: PPUSH
50996: LD_VAR 0 12
51000: PUSH
51001: LD_INT 2
51003: ARRAY
51004: PPUSH
51005: CALL_OW 298
51009: ST_TO_ADDR
// distance := 9999 ;
51010: LD_ADDR_VAR 0 10
51014: PUSH
51015: LD_INT 9999
51017: ST_TO_ADDR
// for i := 0 to 5 do
51018: LD_ADDR_VAR 0 6
51022: PUSH
51023: DOUBLE
51024: LD_INT 0
51026: DEC
51027: ST_TO_ADDR
51028: LD_INT 5
51030: PUSH
51031: FOR_TO
51032: IFFALSE 51175
// begin _x := ShiftX ( x1 , i , centerDist ) ;
51034: LD_ADDR_VAR 0 7
51038: PUSH
51039: LD_VAR 0 1
51043: PPUSH
51044: LD_VAR 0 6
51048: PPUSH
51049: LD_VAR 0 11
51053: PPUSH
51054: CALL_OW 272
51058: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
51059: LD_ADDR_VAR 0 8
51063: PUSH
51064: LD_VAR 0 2
51068: PPUSH
51069: LD_VAR 0 6
51073: PPUSH
51074: LD_VAR 0 11
51078: PPUSH
51079: CALL_OW 273
51083: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
51084: LD_VAR 0 7
51088: PPUSH
51089: LD_VAR 0 8
51093: PPUSH
51094: CALL_OW 488
51098: NOT
51099: IFFALSE 51103
// continue ;
51101: GO 51031
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
51103: LD_ADDR_VAR 0 9
51107: PUSH
51108: LD_VAR 0 12
51112: PUSH
51113: LD_INT 1
51115: ARRAY
51116: PPUSH
51117: LD_VAR 0 12
51121: PUSH
51122: LD_INT 2
51124: ARRAY
51125: PPUSH
51126: LD_VAR 0 7
51130: PPUSH
51131: LD_VAR 0 8
51135: PPUSH
51136: CALL_OW 298
51140: ST_TO_ADDR
// if tmp < distance then
51141: LD_VAR 0 9
51145: PUSH
51146: LD_VAR 0 10
51150: LESS
51151: IFFALSE 51173
// begin result := i ;
51153: LD_ADDR_VAR 0 5
51157: PUSH
51158: LD_VAR 0 6
51162: ST_TO_ADDR
// distance := tmp ;
51163: LD_ADDR_VAR 0 10
51167: PUSH
51168: LD_VAR 0 9
51172: ST_TO_ADDR
// end ; end ;
51173: GO 51031
51175: POP
51176: POP
// end ;
51177: LD_VAR 0 5
51181: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
51182: LD_INT 0
51184: PPUSH
51185: PPUSH
// if not driver or not IsInUnit ( driver ) then
51186: LD_VAR 0 1
51190: NOT
51191: IFTRUE 51205
51193: PUSH
51194: LD_VAR 0 1
51198: PPUSH
51199: CALL_OW 310
51203: NOT
51204: OR
51205: IFFALSE 51209
// exit ;
51207: GO 51299
// vehicle := IsInUnit ( driver ) ;
51209: LD_ADDR_VAR 0 3
51213: PUSH
51214: LD_VAR 0 1
51218: PPUSH
51219: CALL_OW 310
51223: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
51224: LD_VAR 0 1
51228: PPUSH
51229: LD_STRING \
51231: PUSH
51232: LD_INT 0
51234: PUSH
51235: LD_INT 0
51237: PUSH
51238: LD_INT 0
51240: PUSH
51241: LD_INT 0
51243: PUSH
51244: LD_INT 0
51246: PUSH
51247: LD_INT 0
51249: PUSH
51250: EMPTY
51251: LIST
51252: LIST
51253: LIST
51254: LIST
51255: LIST
51256: LIST
51257: LIST
51258: PUSH
51259: LD_STRING E
51261: PUSH
51262: LD_INT 0
51264: PUSH
51265: LD_INT 0
51267: PUSH
51268: LD_VAR 0 3
51272: PUSH
51273: LD_INT 0
51275: PUSH
51276: LD_INT 0
51278: PUSH
51279: LD_INT 0
51281: PUSH
51282: EMPTY
51283: LIST
51284: LIST
51285: LIST
51286: LIST
51287: LIST
51288: LIST
51289: LIST
51290: PUSH
51291: EMPTY
51292: LIST
51293: LIST
51294: PPUSH
51295: CALL_OW 446
// end ;
51299: LD_VAR 0 2
51303: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
51304: LD_INT 0
51306: PPUSH
51307: PPUSH
// if not driver or not IsInUnit ( driver ) then
51308: LD_VAR 0 1
51312: NOT
51313: IFTRUE 51327
51315: PUSH
51316: LD_VAR 0 1
51320: PPUSH
51321: CALL_OW 310
51325: NOT
51326: OR
51327: IFFALSE 51331
// exit ;
51329: GO 51421
// vehicle := IsInUnit ( driver ) ;
51331: LD_ADDR_VAR 0 3
51335: PUSH
51336: LD_VAR 0 1
51340: PPUSH
51341: CALL_OW 310
51345: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
51346: LD_VAR 0 1
51350: PPUSH
51351: LD_STRING \
51353: PUSH
51354: LD_INT 0
51356: PUSH
51357: LD_INT 0
51359: PUSH
51360: LD_INT 0
51362: PUSH
51363: LD_INT 0
51365: PUSH
51366: LD_INT 0
51368: PUSH
51369: LD_INT 0
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: LIST
51376: LIST
51377: LIST
51378: LIST
51379: LIST
51380: PUSH
51381: LD_STRING E
51383: PUSH
51384: LD_INT 0
51386: PUSH
51387: LD_INT 0
51389: PUSH
51390: LD_VAR 0 3
51394: PUSH
51395: LD_INT 0
51397: PUSH
51398: LD_INT 0
51400: PUSH
51401: LD_INT 0
51403: PUSH
51404: EMPTY
51405: LIST
51406: LIST
51407: LIST
51408: LIST
51409: LIST
51410: LIST
51411: LIST
51412: PUSH
51413: EMPTY
51414: LIST
51415: LIST
51416: PPUSH
51417: CALL_OW 447
// end ;
51421: LD_VAR 0 2
51425: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
51426: LD_INT 0
51428: PPUSH
51429: PPUSH
51430: PPUSH
// tmp := [ ] ;
51431: LD_ADDR_VAR 0 5
51435: PUSH
51436: EMPTY
51437: ST_TO_ADDR
// for i in units do
51438: LD_ADDR_VAR 0 4
51442: PUSH
51443: LD_VAR 0 1
51447: PUSH
51448: FOR_IN
51449: IFFALSE 51487
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
51451: LD_ADDR_VAR 0 5
51455: PUSH
51456: LD_VAR 0 5
51460: PPUSH
51461: LD_VAR 0 5
51465: PUSH
51466: LD_INT 1
51468: PLUS
51469: PPUSH
51470: LD_VAR 0 4
51474: PPUSH
51475: CALL_OW 256
51479: PPUSH
51480: CALL_OW 2
51484: ST_TO_ADDR
51485: GO 51448
51487: POP
51488: POP
// if not tmp then
51489: LD_VAR 0 5
51493: NOT
51494: IFFALSE 51498
// exit ;
51496: GO 51546
// if asc then
51498: LD_VAR 0 2
51502: IFFALSE 51526
// result := SortListByListAsc ( units , tmp ) else
51504: LD_ADDR_VAR 0 3
51508: PUSH
51509: LD_VAR 0 1
51513: PPUSH
51514: LD_VAR 0 5
51518: PPUSH
51519: CALL_OW 76
51523: ST_TO_ADDR
51524: GO 51546
// result := SortListByListDesc ( units , tmp ) ;
51526: LD_ADDR_VAR 0 3
51530: PUSH
51531: LD_VAR 0 1
51535: PPUSH
51536: LD_VAR 0 5
51540: PPUSH
51541: CALL_OW 77
51545: ST_TO_ADDR
// end ;
51546: LD_VAR 0 3
51550: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
51551: LD_INT 0
51553: PPUSH
51554: PPUSH
// task := GetTaskList ( mech ) ;
51555: LD_ADDR_VAR 0 4
51559: PUSH
51560: LD_VAR 0 1
51564: PPUSH
51565: CALL_OW 437
51569: ST_TO_ADDR
// if not task then
51570: LD_VAR 0 4
51574: NOT
51575: IFFALSE 51579
// exit ;
51577: GO 51623
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
51579: LD_ADDR_VAR 0 3
51583: PUSH
51584: LD_VAR 0 4
51588: PUSH
51589: LD_INT 1
51591: ARRAY
51592: PUSH
51593: LD_INT 1
51595: ARRAY
51596: PUSH
51597: LD_STRING r
51599: EQUAL
51600: IFFALSE 51622
51602: PUSH
51603: LD_VAR 0 4
51607: PUSH
51608: LD_INT 1
51610: ARRAY
51611: PUSH
51612: LD_INT 4
51614: ARRAY
51615: PUSH
51616: LD_VAR 0 2
51620: EQUAL
51621: AND
51622: ST_TO_ADDR
// end ;
51623: LD_VAR 0 3
51627: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
51628: LD_INT 0
51630: PPUSH
// SetDir ( unit , d ) ;
51631: LD_VAR 0 1
51635: PPUSH
51636: LD_VAR 0 4
51640: PPUSH
51641: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
51645: LD_ADDR_VAR 0 6
51649: PUSH
51650: LD_VAR 0 1
51654: PPUSH
51655: LD_VAR 0 2
51659: PPUSH
51660: LD_VAR 0 3
51664: PPUSH
51665: LD_VAR 0 5
51669: PPUSH
51670: CALL_OW 48
51674: ST_TO_ADDR
// end ;
51675: LD_VAR 0 6
51679: RET
// export function ToNaturalNumber ( number ) ; begin
51680: LD_INT 0
51682: PPUSH
// result := number div 1 ;
51683: LD_ADDR_VAR 0 2
51687: PUSH
51688: LD_VAR 0 1
51692: PUSH
51693: LD_INT 1
51695: DIV
51696: ST_TO_ADDR
// if number < 0 then
51697: LD_VAR 0 1
51701: PUSH
51702: LD_INT 0
51704: LESS
51705: IFFALSE 51715
// result := 0 ;
51707: LD_ADDR_VAR 0 2
51711: PUSH
51712: LD_INT 0
51714: ST_TO_ADDR
// end ;
51715: LD_VAR 0 2
51719: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
51720: LD_INT 0
51722: PPUSH
51723: PPUSH
51724: PPUSH
// if not buildings then
51725: LD_VAR 0 1
51729: NOT
51730: IFFALSE 51734
// exit ;
51732: GO 51849
// tmp := [ ] ;
51734: LD_ADDR_VAR 0 5
51738: PUSH
51739: EMPTY
51740: ST_TO_ADDR
// for b in buildings do
51741: LD_ADDR_VAR 0 4
51745: PUSH
51746: LD_VAR 0 1
51750: PUSH
51751: FOR_IN
51752: IFFALSE 51790
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
51754: LD_ADDR_VAR 0 5
51758: PUSH
51759: LD_VAR 0 5
51763: PPUSH
51764: LD_VAR 0 5
51768: PUSH
51769: LD_INT 1
51771: PLUS
51772: PPUSH
51773: LD_VAR 0 4
51777: PPUSH
51778: CALL_OW 266
51782: PPUSH
51783: CALL_OW 1
51787: ST_TO_ADDR
51788: GO 51751
51790: POP
51791: POP
// if not tmp then
51792: LD_VAR 0 5
51796: NOT
51797: IFFALSE 51801
// exit ;
51799: GO 51849
// if asc then
51801: LD_VAR 0 2
51805: IFFALSE 51829
// result := SortListByListAsc ( buildings , tmp ) else
51807: LD_ADDR_VAR 0 3
51811: PUSH
51812: LD_VAR 0 1
51816: PPUSH
51817: LD_VAR 0 5
51821: PPUSH
51822: CALL_OW 76
51826: ST_TO_ADDR
51827: GO 51849
// result := SortListByListDesc ( buildings , tmp ) ;
51829: LD_ADDR_VAR 0 3
51833: PUSH
51834: LD_VAR 0 1
51838: PPUSH
51839: LD_VAR 0 5
51843: PPUSH
51844: CALL_OW 77
51848: ST_TO_ADDR
// end ;
51849: LD_VAR 0 3
51853: RET
// export function SortByClass ( units , class ) ; var un ; begin
51854: LD_INT 0
51856: PPUSH
51857: PPUSH
// if not units or not class then
51858: LD_VAR 0 1
51862: NOT
51863: IFTRUE 51872
51865: PUSH
51866: LD_VAR 0 2
51870: NOT
51871: OR
51872: IFFALSE 51876
// exit ;
51874: GO 51971
// result := [ ] ;
51876: LD_ADDR_VAR 0 3
51880: PUSH
51881: EMPTY
51882: ST_TO_ADDR
// for un in units do
51883: LD_ADDR_VAR 0 4
51887: PUSH
51888: LD_VAR 0 1
51892: PUSH
51893: FOR_IN
51894: IFFALSE 51969
// if GetClass ( un ) = class then
51896: LD_VAR 0 4
51900: PPUSH
51901: CALL_OW 257
51905: PUSH
51906: LD_VAR 0 2
51910: EQUAL
51911: IFFALSE 51938
// result := Insert ( result , 1 , un ) else
51913: LD_ADDR_VAR 0 3
51917: PUSH
51918: LD_VAR 0 3
51922: PPUSH
51923: LD_INT 1
51925: PPUSH
51926: LD_VAR 0 4
51930: PPUSH
51931: CALL_OW 2
51935: ST_TO_ADDR
51936: GO 51967
// result := Replace ( result , result + 1 , un ) ;
51938: LD_ADDR_VAR 0 3
51942: PUSH
51943: LD_VAR 0 3
51947: PPUSH
51948: LD_VAR 0 3
51952: PUSH
51953: LD_INT 1
51955: PLUS
51956: PPUSH
51957: LD_VAR 0 4
51961: PPUSH
51962: CALL_OW 1
51966: ST_TO_ADDR
51967: GO 51893
51969: POP
51970: POP
// end ;
51971: LD_VAR 0 3
51975: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
51976: LD_INT 0
51978: PPUSH
51979: PPUSH
51980: PPUSH
51981: PPUSH
51982: PPUSH
51983: PPUSH
51984: PPUSH
// result := [ ] ;
51985: LD_ADDR_VAR 0 4
51989: PUSH
51990: EMPTY
51991: ST_TO_ADDR
// if x - r < 0 then
51992: LD_VAR 0 1
51996: PUSH
51997: LD_VAR 0 3
52001: MINUS
52002: PUSH
52003: LD_INT 0
52005: LESS
52006: IFFALSE 52018
// min_x := 0 else
52008: LD_ADDR_VAR 0 8
52012: PUSH
52013: LD_INT 0
52015: ST_TO_ADDR
52016: GO 52034
// min_x := x - r ;
52018: LD_ADDR_VAR 0 8
52022: PUSH
52023: LD_VAR 0 1
52027: PUSH
52028: LD_VAR 0 3
52032: MINUS
52033: ST_TO_ADDR
// if y - r < 0 then
52034: LD_VAR 0 2
52038: PUSH
52039: LD_VAR 0 3
52043: MINUS
52044: PUSH
52045: LD_INT 0
52047: LESS
52048: IFFALSE 52060
// min_y := 0 else
52050: LD_ADDR_VAR 0 7
52054: PUSH
52055: LD_INT 0
52057: ST_TO_ADDR
52058: GO 52076
// min_y := y - r ;
52060: LD_ADDR_VAR 0 7
52064: PUSH
52065: LD_VAR 0 2
52069: PUSH
52070: LD_VAR 0 3
52074: MINUS
52075: ST_TO_ADDR
// max_x := x + r ;
52076: LD_ADDR_VAR 0 9
52080: PUSH
52081: LD_VAR 0 1
52085: PUSH
52086: LD_VAR 0 3
52090: PLUS
52091: ST_TO_ADDR
// max_y := y + r ;
52092: LD_ADDR_VAR 0 10
52096: PUSH
52097: LD_VAR 0 2
52101: PUSH
52102: LD_VAR 0 3
52106: PLUS
52107: ST_TO_ADDR
// for _x = min_x to max_x do
52108: LD_ADDR_VAR 0 5
52112: PUSH
52113: DOUBLE
52114: LD_VAR 0 8
52118: DEC
52119: ST_TO_ADDR
52120: LD_VAR 0 9
52124: PUSH
52125: FOR_TO
52126: IFFALSE 52227
// for _y = min_y to max_y do
52128: LD_ADDR_VAR 0 6
52132: PUSH
52133: DOUBLE
52134: LD_VAR 0 7
52138: DEC
52139: ST_TO_ADDR
52140: LD_VAR 0 10
52144: PUSH
52145: FOR_TO
52146: IFFALSE 52223
// begin if not ValidHex ( _x , _y ) then
52148: LD_VAR 0 5
52152: PPUSH
52153: LD_VAR 0 6
52157: PPUSH
52158: CALL_OW 488
52162: NOT
52163: IFFALSE 52167
// continue ;
52165: GO 52145
// if GetResourceTypeXY ( _x , _y ) then
52167: LD_VAR 0 5
52171: PPUSH
52172: LD_VAR 0 6
52176: PPUSH
52177: CALL_OW 283
52181: IFFALSE 52221
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
52183: LD_ADDR_VAR 0 4
52187: PUSH
52188: LD_VAR 0 4
52192: PPUSH
52193: LD_VAR 0 4
52197: PUSH
52198: LD_INT 1
52200: PLUS
52201: PPUSH
52202: LD_VAR 0 5
52206: PUSH
52207: LD_VAR 0 6
52211: PUSH
52212: EMPTY
52213: LIST
52214: LIST
52215: PPUSH
52216: CALL_OW 1
52220: ST_TO_ADDR
// end ;
52221: GO 52145
52223: POP
52224: POP
52225: GO 52125
52227: POP
52228: POP
// end ;
52229: LD_VAR 0 4
52233: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
52234: LD_INT 0
52236: PPUSH
52237: PPUSH
52238: PPUSH
52239: PPUSH
52240: PPUSH
52241: PPUSH
52242: PPUSH
52243: PPUSH
// if not units then
52244: LD_VAR 0 1
52248: NOT
52249: IFFALSE 52253
// exit ;
52251: GO 52785
// result := UnitFilter ( units , [ f_ok ] ) ;
52253: LD_ADDR_VAR 0 3
52257: PUSH
52258: LD_VAR 0 1
52262: PPUSH
52263: LD_INT 50
52265: PUSH
52266: EMPTY
52267: LIST
52268: PPUSH
52269: CALL_OW 72
52273: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
52274: LD_ADDR_VAR 0 8
52278: PUSH
52279: LD_VAR 0 1
52283: PUSH
52284: LD_INT 1
52286: ARRAY
52287: PPUSH
52288: CALL_OW 255
52292: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
52293: LD_ADDR_VAR 0 10
52297: PUSH
52298: LD_INT 29
52300: PUSH
52301: LD_INT 91
52303: PUSH
52304: LD_INT 49
52306: PUSH
52307: EMPTY
52308: LIST
52309: LIST
52310: LIST
52311: ST_TO_ADDR
// if not result then
52312: LD_VAR 0 3
52316: NOT
52317: IFFALSE 52321
// exit ;
52319: GO 52785
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
52321: LD_ADDR_VAR 0 5
52325: PUSH
52326: LD_INT 81
52328: PUSH
52329: LD_VAR 0 8
52333: PUSH
52334: EMPTY
52335: LIST
52336: LIST
52337: PPUSH
52338: CALL_OW 69
52342: ST_TO_ADDR
// for i in result do
52343: LD_ADDR_VAR 0 4
52347: PUSH
52348: LD_VAR 0 3
52352: PUSH
52353: FOR_IN
52354: IFFALSE 52783
// begin tag := GetTag ( i ) + 1 ;
52356: LD_ADDR_VAR 0 9
52360: PUSH
52361: LD_VAR 0 4
52365: PPUSH
52366: CALL_OW 110
52370: PUSH
52371: LD_INT 1
52373: PLUS
52374: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
52375: LD_ADDR_VAR 0 7
52379: PUSH
52380: LD_VAR 0 4
52384: PPUSH
52385: CALL_OW 250
52389: PPUSH
52390: LD_VAR 0 4
52394: PPUSH
52395: CALL_OW 251
52399: PPUSH
52400: LD_INT 4
52402: PPUSH
52403: CALL 51976 0 3
52407: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
52408: LD_VAR 0 4
52412: PPUSH
52413: CALL_OW 247
52417: PUSH
52418: LD_INT 2
52420: EQUAL
52421: IFFALSE 52433
52423: PUSH
52424: LD_VAR 0 7
52428: PUSH
52429: LD_INT 2
52431: GREATER
52432: AND
52433: IFFALSE 52453
52435: PUSH
52436: LD_VAR 0 4
52440: PPUSH
52441: CALL_OW 264
52445: PUSH
52446: LD_VAR 0 10
52450: IN
52451: NOT
52452: AND
52453: IFFALSE 52492
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
52455: LD_VAR 0 4
52459: PPUSH
52460: LD_VAR 0 7
52464: PUSH
52465: LD_INT 1
52467: ARRAY
52468: PUSH
52469: LD_INT 1
52471: ARRAY
52472: PPUSH
52473: LD_VAR 0 7
52477: PUSH
52478: LD_INT 1
52480: ARRAY
52481: PUSH
52482: LD_INT 2
52484: ARRAY
52485: PPUSH
52486: CALL_OW 116
52490: GO 52781
// if path > tag then
52492: LD_VAR 0 2
52496: PUSH
52497: LD_VAR 0 9
52501: GREATER
52502: IFFALSE 52710
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
52504: LD_ADDR_VAR 0 6
52508: PUSH
52509: LD_VAR 0 5
52513: PPUSH
52514: LD_INT 91
52516: PUSH
52517: LD_VAR 0 4
52521: PUSH
52522: LD_INT 8
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: LIST
52529: PPUSH
52530: CALL_OW 72
52534: ST_TO_ADDR
// if nearEnemy then
52535: LD_VAR 0 6
52539: IFFALSE 52608
// begin if GetWeapon ( i ) = ru_time_lapser then
52541: LD_VAR 0 4
52545: PPUSH
52546: CALL_OW 264
52550: PUSH
52551: LD_INT 49
52553: EQUAL
52554: IFFALSE 52582
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
52556: LD_VAR 0 4
52560: PPUSH
52561: LD_VAR 0 6
52565: PPUSH
52566: LD_VAR 0 4
52570: PPUSH
52571: CALL_OW 74
52575: PPUSH
52576: CALL_OW 112
52580: GO 52606
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
52582: LD_VAR 0 4
52586: PPUSH
52587: LD_VAR 0 6
52591: PPUSH
52592: LD_VAR 0 4
52596: PPUSH
52597: CALL_OW 74
52601: PPUSH
52602: CALL 53866 0 2
// end else
52606: GO 52708
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
52608: LD_VAR 0 4
52612: PPUSH
52613: LD_VAR 0 2
52617: PUSH
52618: LD_VAR 0 9
52622: ARRAY
52623: PUSH
52624: LD_INT 1
52626: ARRAY
52627: PPUSH
52628: LD_VAR 0 2
52632: PUSH
52633: LD_VAR 0 9
52637: ARRAY
52638: PUSH
52639: LD_INT 2
52641: ARRAY
52642: PPUSH
52643: CALL_OW 297
52647: PUSH
52648: LD_INT 6
52650: GREATER
52651: IFFALSE 52694
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
52653: LD_VAR 0 4
52657: PPUSH
52658: LD_VAR 0 2
52662: PUSH
52663: LD_VAR 0 9
52667: ARRAY
52668: PUSH
52669: LD_INT 1
52671: ARRAY
52672: PPUSH
52673: LD_VAR 0 2
52677: PUSH
52678: LD_VAR 0 9
52682: ARRAY
52683: PUSH
52684: LD_INT 2
52686: ARRAY
52687: PPUSH
52688: CALL_OW 114
52692: GO 52708
// SetTag ( i , tag ) ;
52694: LD_VAR 0 4
52698: PPUSH
52699: LD_VAR 0 9
52703: PPUSH
52704: CALL_OW 109
// end else
52708: GO 52781
// if enemy then
52710: LD_VAR 0 5
52714: IFFALSE 52781
// begin if GetWeapon ( i ) = ru_time_lapser then
52716: LD_VAR 0 4
52720: PPUSH
52721: CALL_OW 264
52725: PUSH
52726: LD_INT 49
52728: EQUAL
52729: IFFALSE 52757
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
52731: LD_VAR 0 4
52735: PPUSH
52736: LD_VAR 0 5
52740: PPUSH
52741: LD_VAR 0 4
52745: PPUSH
52746: CALL_OW 74
52750: PPUSH
52751: CALL_OW 112
52755: GO 52781
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
52757: LD_VAR 0 4
52761: PPUSH
52762: LD_VAR 0 5
52766: PPUSH
52767: LD_VAR 0 4
52771: PPUSH
52772: CALL_OW 74
52776: PPUSH
52777: CALL 53866 0 2
// end ; end ;
52781: GO 52353
52783: POP
52784: POP
// end ;
52785: LD_VAR 0 3
52789: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
52790: LD_INT 0
52792: PPUSH
52793: PPUSH
52794: PPUSH
// if not unit or IsInUnit ( unit ) then
52795: LD_VAR 0 1
52799: NOT
52800: IFTRUE 52813
52802: PUSH
52803: LD_VAR 0 1
52807: PPUSH
52808: CALL_OW 310
52812: OR
52813: IFFALSE 52817
// exit ;
52815: GO 52908
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
52817: LD_ADDR_VAR 0 4
52821: PUSH
52822: LD_VAR 0 1
52826: PPUSH
52827: CALL_OW 250
52831: PPUSH
52832: LD_VAR 0 2
52836: PPUSH
52837: LD_INT 1
52839: PPUSH
52840: CALL_OW 272
52844: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
52845: LD_ADDR_VAR 0 5
52849: PUSH
52850: LD_VAR 0 1
52854: PPUSH
52855: CALL_OW 251
52859: PPUSH
52860: LD_VAR 0 2
52864: PPUSH
52865: LD_INT 1
52867: PPUSH
52868: CALL_OW 273
52872: ST_TO_ADDR
// if ValidHex ( x , y ) then
52873: LD_VAR 0 4
52877: PPUSH
52878: LD_VAR 0 5
52882: PPUSH
52883: CALL_OW 488
52887: IFFALSE 52908
// ComTurnXY ( unit , x , y ) ;
52889: LD_VAR 0 1
52893: PPUSH
52894: LD_VAR 0 4
52898: PPUSH
52899: LD_VAR 0 5
52903: PPUSH
52904: CALL_OW 118
// end ;
52908: LD_VAR 0 3
52912: RET
// export function SeeUnits ( side , units ) ; var i ; begin
52913: LD_INT 0
52915: PPUSH
52916: PPUSH
// result := false ;
52917: LD_ADDR_VAR 0 3
52921: PUSH
52922: LD_INT 0
52924: ST_TO_ADDR
// if not units then
52925: LD_VAR 0 2
52929: NOT
52930: IFFALSE 52934
// exit ;
52932: GO 52979
// for i in units do
52934: LD_ADDR_VAR 0 4
52938: PUSH
52939: LD_VAR 0 2
52943: PUSH
52944: FOR_IN
52945: IFFALSE 52977
// if See ( side , i ) then
52947: LD_VAR 0 1
52951: PPUSH
52952: LD_VAR 0 4
52956: PPUSH
52957: CALL_OW 292
52961: IFFALSE 52975
// begin result := true ;
52963: LD_ADDR_VAR 0 3
52967: PUSH
52968: LD_INT 1
52970: ST_TO_ADDR
// exit ;
52971: POP
52972: POP
52973: GO 52979
// end ;
52975: GO 52944
52977: POP
52978: POP
// end ;
52979: LD_VAR 0 3
52983: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
52984: LD_INT 0
52986: PPUSH
52987: PPUSH
52988: PPUSH
52989: PPUSH
// if not unit or not points then
52990: LD_VAR 0 1
52994: NOT
52995: IFTRUE 53004
52997: PUSH
52998: LD_VAR 0 2
53002: NOT
53003: OR
53004: IFFALSE 53008
// exit ;
53006: GO 53098
// dist := 99999 ;
53008: LD_ADDR_VAR 0 5
53012: PUSH
53013: LD_INT 99999
53015: ST_TO_ADDR
// for i in points do
53016: LD_ADDR_VAR 0 4
53020: PUSH
53021: LD_VAR 0 2
53025: PUSH
53026: FOR_IN
53027: IFFALSE 53096
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
53029: LD_ADDR_VAR 0 6
53033: PUSH
53034: LD_VAR 0 1
53038: PPUSH
53039: LD_VAR 0 4
53043: PUSH
53044: LD_INT 1
53046: ARRAY
53047: PPUSH
53048: LD_VAR 0 4
53052: PUSH
53053: LD_INT 2
53055: ARRAY
53056: PPUSH
53057: CALL_OW 297
53061: ST_TO_ADDR
// if tmpDist < dist then
53062: LD_VAR 0 6
53066: PUSH
53067: LD_VAR 0 5
53071: LESS
53072: IFFALSE 53094
// begin result := i ;
53074: LD_ADDR_VAR 0 3
53078: PUSH
53079: LD_VAR 0 4
53083: ST_TO_ADDR
// dist := tmpDist ;
53084: LD_ADDR_VAR 0 5
53088: PUSH
53089: LD_VAR 0 6
53093: ST_TO_ADDR
// end ; end ;
53094: GO 53026
53096: POP
53097: POP
// end ;
53098: LD_VAR 0 3
53102: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
53103: LD_INT 0
53105: PPUSH
// uc_side := side ;
53106: LD_ADDR_OWVAR 20
53110: PUSH
53111: LD_VAR 0 1
53115: ST_TO_ADDR
// uc_nation := 3 ;
53116: LD_ADDR_OWVAR 21
53120: PUSH
53121: LD_INT 3
53123: ST_TO_ADDR
// vc_chassis := 25 ;
53124: LD_ADDR_OWVAR 37
53128: PUSH
53129: LD_INT 25
53131: ST_TO_ADDR
// vc_engine := engine_siberite ;
53132: LD_ADDR_OWVAR 39
53136: PUSH
53137: LD_INT 3
53139: ST_TO_ADDR
// vc_control := control_computer ;
53140: LD_ADDR_OWVAR 38
53144: PUSH
53145: LD_INT 3
53147: ST_TO_ADDR
// vc_weapon := 59 ;
53148: LD_ADDR_OWVAR 40
53152: PUSH
53153: LD_INT 59
53155: ST_TO_ADDR
// result := CreateVehicle ;
53156: LD_ADDR_VAR 0 5
53160: PUSH
53161: CALL_OW 45
53165: ST_TO_ADDR
// SetDir ( result , d ) ;
53166: LD_VAR 0 5
53170: PPUSH
53171: LD_VAR 0 4
53175: PPUSH
53176: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
53180: LD_VAR 0 5
53184: PPUSH
53185: LD_VAR 0 2
53189: PPUSH
53190: LD_VAR 0 3
53194: PPUSH
53195: LD_INT 0
53197: PPUSH
53198: CALL_OW 48
// end ;
53202: LD_VAR 0 5
53206: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
53207: LD_INT 0
53209: PPUSH
53210: PPUSH
53211: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
53212: LD_ADDR_VAR 0 2
53216: PUSH
53217: LD_INT 0
53219: PUSH
53220: LD_INT 0
53222: PUSH
53223: LD_INT 0
53225: PUSH
53226: LD_INT 0
53228: PUSH
53229: EMPTY
53230: LIST
53231: LIST
53232: LIST
53233: LIST
53234: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
53235: LD_VAR 0 1
53239: NOT
53240: IFTRUE 53273
53242: PUSH
53243: LD_VAR 0 1
53247: PPUSH
53248: CALL_OW 264
53252: PUSH
53253: LD_INT 12
53255: PUSH
53256: LD_INT 51
53258: PUSH
53259: LD_INT 32
53261: PUSH
53262: LD_INT 89
53264: PUSH
53265: EMPTY
53266: LIST
53267: LIST
53268: LIST
53269: LIST
53270: IN
53271: NOT
53272: OR
53273: IFFALSE 53277
// exit ;
53275: GO 53375
// for i := 1 to 3 do
53277: LD_ADDR_VAR 0 3
53281: PUSH
53282: DOUBLE
53283: LD_INT 1
53285: DEC
53286: ST_TO_ADDR
53287: LD_INT 3
53289: PUSH
53290: FOR_TO
53291: IFFALSE 53373
// begin tmp := GetCargo ( cargo , i ) ;
53293: LD_ADDR_VAR 0 4
53297: PUSH
53298: LD_VAR 0 1
53302: PPUSH
53303: LD_VAR 0 3
53307: PPUSH
53308: CALL_OW 289
53312: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
53313: LD_ADDR_VAR 0 2
53317: PUSH
53318: LD_VAR 0 2
53322: PPUSH
53323: LD_VAR 0 3
53327: PPUSH
53328: LD_VAR 0 4
53332: PPUSH
53333: CALL_OW 1
53337: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
53338: LD_ADDR_VAR 0 2
53342: PUSH
53343: LD_VAR 0 2
53347: PPUSH
53348: LD_INT 4
53350: PPUSH
53351: LD_VAR 0 2
53355: PUSH
53356: LD_INT 4
53358: ARRAY
53359: PUSH
53360: LD_VAR 0 4
53364: PLUS
53365: PPUSH
53366: CALL_OW 1
53370: ST_TO_ADDR
// end ;
53371: GO 53290
53373: POP
53374: POP
// end ;
53375: LD_VAR 0 2
53379: RET
// export function Length ( array ) ; begin
53380: LD_INT 0
53382: PPUSH
// result := array + 0 ;
53383: LD_ADDR_VAR 0 2
53387: PUSH
53388: LD_VAR 0 1
53392: PUSH
53393: LD_INT 0
53395: PLUS
53396: ST_TO_ADDR
// end ;
53397: LD_VAR 0 2
53401: RET
// export function PrepareArray ( array ) ; begin
53402: LD_INT 0
53404: PPUSH
// result := array diff 0 ;
53405: LD_ADDR_VAR 0 2
53409: PUSH
53410: LD_VAR 0 1
53414: PUSH
53415: LD_INT 0
53417: DIFF
53418: ST_TO_ADDR
// if not result [ 1 ] then
53419: LD_VAR 0 2
53423: PUSH
53424: LD_INT 1
53426: ARRAY
53427: NOT
53428: IFFALSE 53448
// result := Delete ( result , 1 ) ;
53430: LD_ADDR_VAR 0 2
53434: PUSH
53435: LD_VAR 0 2
53439: PPUSH
53440: LD_INT 1
53442: PPUSH
53443: CALL_OW 3
53447: ST_TO_ADDR
// end ;
53448: LD_VAR 0 2
53452: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
53453: LD_INT 0
53455: PPUSH
53456: PPUSH
53457: PPUSH
53458: PPUSH
// sibRocketRange := 25 ;
53459: LD_ADDR_VAR 0 6
53463: PUSH
53464: LD_INT 25
53466: ST_TO_ADDR
// result := false ;
53467: LD_ADDR_VAR 0 4
53471: PUSH
53472: LD_INT 0
53474: ST_TO_ADDR
// for i := 0 to 5 do
53475: LD_ADDR_VAR 0 5
53479: PUSH
53480: DOUBLE
53481: LD_INT 0
53483: DEC
53484: ST_TO_ADDR
53485: LD_INT 5
53487: PUSH
53488: FOR_TO
53489: IFFALSE 53556
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
53491: LD_VAR 0 1
53495: PPUSH
53496: LD_VAR 0 5
53500: PPUSH
53501: LD_VAR 0 6
53505: PPUSH
53506: CALL_OW 272
53510: PPUSH
53511: LD_VAR 0 2
53515: PPUSH
53516: LD_VAR 0 5
53520: PPUSH
53521: LD_VAR 0 6
53525: PPUSH
53526: CALL_OW 273
53530: PPUSH
53531: LD_VAR 0 3
53535: PPUSH
53536: CALL_OW 309
53540: IFFALSE 53554
// begin result := true ;
53542: LD_ADDR_VAR 0 4
53546: PUSH
53547: LD_INT 1
53549: ST_TO_ADDR
// exit ;
53550: POP
53551: POP
53552: GO 53558
// end ;
53554: GO 53488
53556: POP
53557: POP
// end ;
53558: LD_VAR 0 4
53562: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
53563: LD_INT 0
53565: PPUSH
53566: PPUSH
53567: PPUSH
// if btype = b_depot then
53568: LD_VAR 0 2
53572: PUSH
53573: LD_INT 0
53575: EQUAL
53576: IFFALSE 53588
// begin result := true ;
53578: LD_ADDR_VAR 0 3
53582: PUSH
53583: LD_INT 1
53585: ST_TO_ADDR
// exit ;
53586: GO 53708
// end ; pom := GetBase ( depot ) ;
53588: LD_ADDR_VAR 0 4
53592: PUSH
53593: LD_VAR 0 1
53597: PPUSH
53598: CALL_OW 274
53602: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
53603: LD_ADDR_VAR 0 5
53607: PUSH
53608: LD_VAR 0 2
53612: PPUSH
53613: LD_VAR 0 1
53617: PPUSH
53618: CALL_OW 248
53622: PPUSH
53623: CALL_OW 450
53627: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
53628: LD_ADDR_VAR 0 3
53632: PUSH
53633: LD_VAR 0 4
53637: PPUSH
53638: LD_INT 1
53640: PPUSH
53641: CALL_OW 275
53645: PUSH
53646: LD_VAR 0 5
53650: PUSH
53651: LD_INT 1
53653: ARRAY
53654: GREATEREQUAL
53655: IFFALSE 53681
53657: PUSH
53658: LD_VAR 0 4
53662: PPUSH
53663: LD_INT 2
53665: PPUSH
53666: CALL_OW 275
53670: PUSH
53671: LD_VAR 0 5
53675: PUSH
53676: LD_INT 2
53678: ARRAY
53679: GREATEREQUAL
53680: AND
53681: IFFALSE 53707
53683: PUSH
53684: LD_VAR 0 4
53688: PPUSH
53689: LD_INT 3
53691: PPUSH
53692: CALL_OW 275
53696: PUSH
53697: LD_VAR 0 5
53701: PUSH
53702: LD_INT 3
53704: ARRAY
53705: GREATEREQUAL
53706: AND
53707: ST_TO_ADDR
// end ;
53708: LD_VAR 0 3
53712: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
53713: LD_INT 0
53715: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
53716: LD_VAR 0 1
53720: PPUSH
53721: LD_VAR 0 2
53725: PPUSH
53726: LD_INT 0
53728: PPUSH
53729: LD_INT 0
53731: PPUSH
53732: LD_INT 1
53734: PPUSH
53735: LD_INT 0
53737: PPUSH
53738: CALL_OW 587
// end ;
53742: LD_VAR 0 3
53746: RET
// export function CenterOnNow ( unit ) ; begin
53747: LD_INT 0
53749: PPUSH
// result := IsInUnit ( unit ) ;
53750: LD_ADDR_VAR 0 2
53754: PUSH
53755: LD_VAR 0 1
53759: PPUSH
53760: CALL_OW 310
53764: ST_TO_ADDR
// if not result then
53765: LD_VAR 0 2
53769: NOT
53770: IFFALSE 53782
// result := unit ;
53772: LD_ADDR_VAR 0 2
53776: PUSH
53777: LD_VAR 0 1
53781: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
53782: LD_VAR 0 1
53786: PPUSH
53787: CALL_OW 87
// end ;
53791: LD_VAR 0 2
53795: RET
// export function ComMoveHex ( unit , hex ) ; begin
53796: LD_INT 0
53798: PPUSH
// if not hex then
53799: LD_VAR 0 2
53803: NOT
53804: IFFALSE 53808
// exit ;
53806: GO 53861
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
53808: LD_VAR 0 2
53812: PUSH
53813: LD_INT 1
53815: ARRAY
53816: PPUSH
53817: LD_VAR 0 2
53821: PUSH
53822: LD_INT 2
53824: ARRAY
53825: PPUSH
53826: CALL_OW 428
53830: IFFALSE 53834
// exit ;
53832: GO 53861
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
53834: LD_VAR 0 1
53838: PPUSH
53839: LD_VAR 0 2
53843: PUSH
53844: LD_INT 1
53846: ARRAY
53847: PPUSH
53848: LD_VAR 0 2
53852: PUSH
53853: LD_INT 2
53855: ARRAY
53856: PPUSH
53857: CALL_OW 111
// end ;
53861: LD_VAR 0 3
53865: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
53866: LD_INT 0
53868: PPUSH
53869: PPUSH
53870: PPUSH
// if not unit or not enemy then
53871: LD_VAR 0 1
53875: NOT
53876: IFTRUE 53885
53878: PUSH
53879: LD_VAR 0 2
53883: NOT
53884: OR
53885: IFFALSE 53889
// exit ;
53887: GO 54015
// x := GetX ( enemy ) ;
53889: LD_ADDR_VAR 0 4
53893: PUSH
53894: LD_VAR 0 2
53898: PPUSH
53899: CALL_OW 250
53903: ST_TO_ADDR
// y := GetY ( enemy ) ;
53904: LD_ADDR_VAR 0 5
53908: PUSH
53909: LD_VAR 0 2
53913: PPUSH
53914: CALL_OW 251
53918: ST_TO_ADDR
// if ValidHex ( x , y ) then
53919: LD_VAR 0 4
53923: PPUSH
53924: LD_VAR 0 5
53928: PPUSH
53929: CALL_OW 488
53933: IFFALSE 54015
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
53935: LD_VAR 0 2
53939: PPUSH
53940: CALL_OW 247
53944: PUSH
53945: LD_INT 3
53947: PUSH
53948: LD_INT 2
53950: PUSH
53951: EMPTY
53952: LIST
53953: LIST
53954: IN
53955: IFTRUE 53978
53957: PUSH
53958: LD_VAR 0 1
53962: PPUSH
53963: CALL_OW 255
53967: PPUSH
53968: LD_VAR 0 2
53972: PPUSH
53973: CALL_OW 292
53977: OR
53978: IFFALSE 53996
// ComAttackUnit ( unit , enemy ) else
53980: LD_VAR 0 1
53984: PPUSH
53985: LD_VAR 0 2
53989: PPUSH
53990: CALL_OW 115
53994: GO 54015
// ComAgressiveMove ( unit , x , y ) ;
53996: LD_VAR 0 1
54000: PPUSH
54001: LD_VAR 0 4
54005: PPUSH
54006: LD_VAR 0 5
54010: PPUSH
54011: CALL_OW 114
// end ;
54015: LD_VAR 0 3
54019: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
54020: LD_INT 0
54022: PPUSH
54023: PPUSH
54024: PPUSH
// list := AreaToList ( area , 0 ) ;
54025: LD_ADDR_VAR 0 5
54029: PUSH
54030: LD_VAR 0 1
54034: PPUSH
54035: LD_INT 0
54037: PPUSH
54038: CALL_OW 517
54042: ST_TO_ADDR
// if not list then
54043: LD_VAR 0 5
54047: NOT
54048: IFFALSE 54052
// exit ;
54050: GO 54182
// if all then
54052: LD_VAR 0 2
54056: IFFALSE 54144
// begin for i := 1 to list [ 1 ] do
54058: LD_ADDR_VAR 0 4
54062: PUSH
54063: DOUBLE
54064: LD_INT 1
54066: DEC
54067: ST_TO_ADDR
54068: LD_VAR 0 5
54072: PUSH
54073: LD_INT 1
54075: ARRAY
54076: PUSH
54077: FOR_TO
54078: IFFALSE 54140
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
54080: LD_ADDR_VAR 0 3
54084: PUSH
54085: LD_VAR 0 3
54089: PPUSH
54090: LD_VAR 0 3
54094: PUSH
54095: LD_INT 1
54097: PLUS
54098: PPUSH
54099: LD_VAR 0 5
54103: PUSH
54104: LD_INT 1
54106: ARRAY
54107: PUSH
54108: LD_VAR 0 4
54112: ARRAY
54113: PUSH
54114: LD_VAR 0 5
54118: PUSH
54119: LD_INT 2
54121: ARRAY
54122: PUSH
54123: LD_VAR 0 4
54127: ARRAY
54128: PUSH
54129: EMPTY
54130: LIST
54131: LIST
54132: PPUSH
54133: CALL_OW 1
54137: ST_TO_ADDR
54138: GO 54077
54140: POP
54141: POP
// exit ;
54142: GO 54182
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
54144: LD_ADDR_VAR 0 3
54148: PUSH
54149: LD_VAR 0 5
54153: PUSH
54154: LD_INT 1
54156: ARRAY
54157: PUSH
54158: LD_INT 1
54160: ARRAY
54161: PUSH
54162: LD_VAR 0 5
54166: PUSH
54167: LD_INT 2
54169: ARRAY
54170: PUSH
54171: LD_INT 1
54173: ARRAY
54174: PUSH
54175: EMPTY
54176: LIST
54177: LIST
54178: PUSH
54179: EMPTY
54180: LIST
54181: ST_TO_ADDR
// end ;
54182: LD_VAR 0 3
54186: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
54187: LD_INT 0
54189: PPUSH
54190: PPUSH
// list := AreaToList ( area , 0 ) ;
54191: LD_ADDR_VAR 0 4
54195: PUSH
54196: LD_VAR 0 1
54200: PPUSH
54201: LD_INT 0
54203: PPUSH
54204: CALL_OW 517
54208: ST_TO_ADDR
// if not list then
54209: LD_VAR 0 4
54213: NOT
54214: IFFALSE 54218
// exit ;
54216: GO 54259
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
54218: LD_ADDR_VAR 0 3
54222: PUSH
54223: LD_VAR 0 4
54227: PUSH
54228: LD_INT 1
54230: ARRAY
54231: PUSH
54232: LD_INT 1
54234: ARRAY
54235: PUSH
54236: LD_VAR 0 4
54240: PUSH
54241: LD_INT 2
54243: ARRAY
54244: PUSH
54245: LD_INT 1
54247: ARRAY
54248: PUSH
54249: LD_VAR 0 2
54253: PUSH
54254: EMPTY
54255: LIST
54256: LIST
54257: LIST
54258: ST_TO_ADDR
// end ;
54259: LD_VAR 0 3
54263: RET
// export function First ( array ) ; begin
54264: LD_INT 0
54266: PPUSH
// if not array then
54267: LD_VAR 0 1
54271: NOT
54272: IFFALSE 54276
// exit ;
54274: GO 54290
// result := array [ 1 ] ;
54276: LD_ADDR_VAR 0 2
54280: PUSH
54281: LD_VAR 0 1
54285: PUSH
54286: LD_INT 1
54288: ARRAY
54289: ST_TO_ADDR
// end ;
54290: LD_VAR 0 2
54294: RET
// export function Last ( array ) ; begin
54295: LD_INT 0
54297: PPUSH
// if not array then
54298: LD_VAR 0 1
54302: NOT
54303: IFFALSE 54307
// exit ;
54305: GO 54323
// result := array [ array ] ;
54307: LD_ADDR_VAR 0 2
54311: PUSH
54312: LD_VAR 0 1
54316: PUSH
54317: LD_VAR 0 1
54321: ARRAY
54322: ST_TO_ADDR
// end ;
54323: LD_VAR 0 2
54327: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
54328: LD_INT 0
54330: PPUSH
54331: PPUSH
// result := [ ] ;
54332: LD_ADDR_VAR 0 5
54336: PUSH
54337: EMPTY
54338: ST_TO_ADDR
// if not array then
54339: LD_VAR 0 1
54343: NOT
54344: IFFALSE 54348
// exit ;
54346: GO 54460
// for i := 1 to array do
54348: LD_ADDR_VAR 0 6
54352: PUSH
54353: DOUBLE
54354: LD_INT 1
54356: DEC
54357: ST_TO_ADDR
54358: LD_VAR 0 1
54362: PUSH
54363: FOR_TO
54364: IFFALSE 54458
// if array [ i ] [ index ] = value then
54366: LD_VAR 0 1
54370: PUSH
54371: LD_VAR 0 6
54375: ARRAY
54376: PUSH
54377: LD_VAR 0 2
54381: ARRAY
54382: PUSH
54383: LD_VAR 0 3
54387: EQUAL
54388: IFFALSE 54456
// begin if indexColumn then
54390: LD_VAR 0 4
54394: IFFALSE 54430
// result := Join ( result , array [ i ] [ indexColumn ] ) else
54396: LD_ADDR_VAR 0 5
54400: PUSH
54401: LD_VAR 0 5
54405: PPUSH
54406: LD_VAR 0 1
54410: PUSH
54411: LD_VAR 0 6
54415: ARRAY
54416: PUSH
54417: LD_VAR 0 4
54421: ARRAY
54422: PPUSH
54423: CALL 49468 0 2
54427: ST_TO_ADDR
54428: GO 54456
// result := Join ( result , array [ i ] ) ;
54430: LD_ADDR_VAR 0 5
54434: PUSH
54435: LD_VAR 0 5
54439: PPUSH
54440: LD_VAR 0 1
54444: PUSH
54445: LD_VAR 0 6
54449: ARRAY
54450: PPUSH
54451: CALL 49468 0 2
54455: ST_TO_ADDR
// end ;
54456: GO 54363
54458: POP
54459: POP
// end ;
54460: LD_VAR 0 5
54464: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
54465: LD_INT 0
54467: PPUSH
// if not vehicles or not parkingPoint then
54468: LD_VAR 0 1
54472: NOT
54473: IFTRUE 54482
54475: PUSH
54476: LD_VAR 0 2
54480: NOT
54481: OR
54482: IFFALSE 54486
// exit ;
54484: GO 54584
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
54486: LD_ADDR_VAR 0 1
54490: PUSH
54491: LD_VAR 0 1
54495: PPUSH
54496: LD_INT 50
54498: PUSH
54499: EMPTY
54500: LIST
54501: PUSH
54502: LD_INT 3
54504: PUSH
54505: LD_INT 92
54507: PUSH
54508: LD_VAR 0 2
54512: PUSH
54513: LD_INT 1
54515: ARRAY
54516: PUSH
54517: LD_VAR 0 2
54521: PUSH
54522: LD_INT 2
54524: ARRAY
54525: PUSH
54526: LD_INT 8
54528: PUSH
54529: EMPTY
54530: LIST
54531: LIST
54532: LIST
54533: LIST
54534: PUSH
54535: EMPTY
54536: LIST
54537: LIST
54538: PUSH
54539: EMPTY
54540: LIST
54541: LIST
54542: PPUSH
54543: CALL_OW 72
54547: ST_TO_ADDR
// if not vehicles then
54548: LD_VAR 0 1
54552: NOT
54553: IFFALSE 54557
// exit ;
54555: GO 54584
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
54557: LD_VAR 0 1
54561: PPUSH
54562: LD_VAR 0 2
54566: PUSH
54567: LD_INT 1
54569: ARRAY
54570: PPUSH
54571: LD_VAR 0 2
54575: PUSH
54576: LD_INT 2
54578: ARRAY
54579: PPUSH
54580: CALL_OW 111
// end ;
54584: LD_VAR 0 3
54588: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
54589: LD_INT 0
54591: PPUSH
54592: PPUSH
54593: PPUSH
// if not side or not area then
54594: LD_VAR 0 1
54598: NOT
54599: IFTRUE 54608
54601: PUSH
54602: LD_VAR 0 2
54606: NOT
54607: OR
54608: IFFALSE 54612
// exit ;
54610: GO 54731
// tmp := AreaToList ( area , 0 ) ;
54612: LD_ADDR_VAR 0 5
54616: PUSH
54617: LD_VAR 0 2
54621: PPUSH
54622: LD_INT 0
54624: PPUSH
54625: CALL_OW 517
54629: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
54630: LD_ADDR_VAR 0 4
54634: PUSH
54635: DOUBLE
54636: LD_INT 1
54638: DEC
54639: ST_TO_ADDR
54640: LD_VAR 0 5
54644: PUSH
54645: LD_INT 1
54647: ARRAY
54648: PUSH
54649: FOR_TO
54650: IFFALSE 54729
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
54652: LD_VAR 0 5
54656: PUSH
54657: LD_INT 1
54659: ARRAY
54660: PUSH
54661: LD_VAR 0 4
54665: ARRAY
54666: PPUSH
54667: LD_VAR 0 5
54671: PUSH
54672: LD_INT 2
54674: ARRAY
54675: PUSH
54676: LD_VAR 0 4
54680: ARRAY
54681: PPUSH
54682: CALL_OW 351
54686: IFFALSE 54727
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
54688: LD_VAR 0 5
54692: PUSH
54693: LD_INT 1
54695: ARRAY
54696: PUSH
54697: LD_VAR 0 4
54701: ARRAY
54702: PPUSH
54703: LD_VAR 0 5
54707: PUSH
54708: LD_INT 2
54710: ARRAY
54711: PUSH
54712: LD_VAR 0 4
54716: ARRAY
54717: PPUSH
54718: LD_VAR 0 1
54722: PPUSH
54723: CALL_OW 244
// end ;
54727: GO 54649
54729: POP
54730: POP
// end ;
54731: LD_VAR 0 3
54735: RET
// export function UniqueArray ( array ) ; var i ; begin
54736: LD_INT 0
54738: PPUSH
54739: PPUSH
// result := [ ] ;
54740: LD_ADDR_VAR 0 2
54744: PUSH
54745: EMPTY
54746: ST_TO_ADDR
// if not array then
54747: LD_VAR 0 1
54751: NOT
54752: IFFALSE 54756
// exit ;
54754: GO 54817
// for i := 1 to array do
54756: LD_ADDR_VAR 0 3
54760: PUSH
54761: DOUBLE
54762: LD_INT 1
54764: DEC
54765: ST_TO_ADDR
54766: LD_VAR 0 1
54770: PUSH
54771: FOR_TO
54772: IFFALSE 54815
// if not array [ i ] in result then
54774: LD_VAR 0 1
54778: PUSH
54779: LD_VAR 0 3
54783: ARRAY
54784: PUSH
54785: LD_VAR 0 2
54789: IN
54790: NOT
54791: IFFALSE 54813
// result := Join ( result , i ) ;
54793: LD_ADDR_VAR 0 2
54797: PUSH
54798: LD_VAR 0 2
54802: PPUSH
54803: LD_VAR 0 3
54807: PPUSH
54808: CALL 49468 0 2
54812: ST_TO_ADDR
54813: GO 54771
54815: POP
54816: POP
// end ; end_of_file
54817: LD_VAR 0 2
54821: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
54822: LD_VAR 0 1
54826: PUSH
54827: LD_INT 200
54829: DOUBLE
54830: GREATEREQUAL
54831: IFFALSE 54839
54833: LD_INT 299
54835: DOUBLE
54836: LESSEQUAL
54837: IFTRUE 54841
54839: GO 54873
54841: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
54842: LD_VAR 0 1
54846: PPUSH
54847: LD_VAR 0 2
54851: PPUSH
54852: LD_VAR 0 3
54856: PPUSH
54857: LD_VAR 0 4
54861: PPUSH
54862: LD_VAR 0 5
54866: PPUSH
54867: CALL 55735 0 5
54871: GO 54950
54873: LD_INT 300
54875: DOUBLE
54876: GREATEREQUAL
54877: IFFALSE 54885
54879: LD_INT 399
54881: DOUBLE
54882: LESSEQUAL
54883: IFTRUE 54887
54885: GO 54949
54887: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
54888: LD_VAR 0 1
54892: PPUSH
54893: LD_VAR 0 2
54897: PPUSH
54898: LD_VAR 0 3
54902: PPUSH
54903: LD_VAR 0 4
54907: PPUSH
54908: LD_VAR 0 5
54912: PPUSH
54913: LD_VAR 0 6
54917: PPUSH
54918: LD_VAR 0 7
54922: PPUSH
54923: LD_VAR 0 8
54927: PPUSH
54928: LD_VAR 0 9
54932: PPUSH
54933: LD_VAR 0 10
54937: PPUSH
54938: LD_VAR 0 11
54942: PPUSH
54943: CALL 63844 0 11
54947: GO 54950
54949: POP
// end ;
54950: PPOPN 11
54952: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
54953: LD_VAR 0 1
54957: PPUSH
54958: LD_VAR 0 2
54962: PPUSH
54963: LD_VAR 0 3
54967: PPUSH
54968: LD_VAR 0 4
54972: PPUSH
54973: LD_VAR 0 5
54977: PPUSH
54978: CALL 55035 0 5
// end ; end_of_file
54982: PPOPN 5
54984: END
// export function SOS_UnitDestroyed ( un ) ; begin
54985: LD_INT 0
54987: PPUSH
// ComRadiation ( un ) ;
54988: LD_VAR 0 1
54992: PPUSH
54993: CALL 56155 0 1
// end ;
54997: LD_VAR 0 2
55001: RET
// export function SOS_UnitKamikazed ( un ) ; begin
55002: LD_INT 0
55004: PPUSH
// ComRadiation ( un ) ;
55005: LD_VAR 0 1
55009: PPUSH
55010: CALL 56155 0 1
// end ;
55014: LD_VAR 0 2
55018: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
55019: LD_INT 0
55021: PPUSH
// end ;
55022: LD_VAR 0 4
55026: RET
// export function SOS_Command ( cmd ) ; begin
55027: LD_INT 0
55029: PPUSH
// end ;
55030: LD_VAR 0 2
55034: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
55035: LD_INT 0
55037: PPUSH
// end ;
55038: LD_VAR 0 6
55042: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
55043: LD_INT 0
55045: PPUSH
55046: PPUSH
55047: PPUSH
55048: PPUSH
55049: PPUSH
// if not vehicle or not factory then
55050: LD_VAR 0 1
55054: NOT
55055: IFTRUE 55064
55057: PUSH
55058: LD_VAR 0 2
55062: NOT
55063: OR
55064: IFFALSE 55068
// exit ;
55066: GO 55730
// weapon := GetWeapon ( vehicle ) ;
55068: LD_ADDR_VAR 0 7
55072: PUSH
55073: LD_VAR 0 1
55077: PPUSH
55078: CALL_OW 264
55082: ST_TO_ADDR
// if weapon = ar_miner then
55083: LD_VAR 0 7
55087: PUSH
55088: LD_INT 81
55090: EQUAL
55091: IFFALSE 55148
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
55093: LD_ADDR_EXP 57
55097: PUSH
55098: LD_EXP 57
55102: PPUSH
55103: LD_EXP 57
55107: PUSH
55108: LD_INT 1
55110: PLUS
55111: PPUSH
55112: LD_VAR 0 1
55116: PPUSH
55117: CALL_OW 1
55121: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
55122: LD_ADDR_EXP 58
55126: PUSH
55127: LD_EXP 58
55131: PPUSH
55132: LD_EXP 58
55136: PUSH
55137: LD_INT 1
55139: PLUS
55140: PPUSH
55141: EMPTY
55142: PPUSH
55143: CALL_OW 1
55147: ST_TO_ADDR
// end ; if not factoryWaypoints then
55148: LD_EXP 61
55152: NOT
55153: IFFALSE 55157
// exit ;
55155: GO 55730
// for i := 1 to Count ( factoryWaypoints ) do
55157: LD_ADDR_VAR 0 4
55161: PUSH
55162: DOUBLE
55163: LD_INT 1
55165: DEC
55166: ST_TO_ADDR
55167: LD_EXP 61
55171: PPUSH
55172: CALL 13492 0 1
55176: PUSH
55177: FOR_TO
55178: IFFALSE 55728
// if factoryWaypoints [ i ] [ 2 ] = factory then
55180: LD_EXP 61
55184: PUSH
55185: LD_VAR 0 4
55189: ARRAY
55190: PUSH
55191: LD_INT 2
55193: ARRAY
55194: PUSH
55195: LD_VAR 0 2
55199: EQUAL
55200: IFFALSE 55726
// begin if GetControl ( vehicle ) = control_manual then
55202: LD_VAR 0 1
55206: PPUSH
55207: CALL_OW 263
55211: PUSH
55212: LD_INT 1
55214: EQUAL
55215: IFFALSE 55579
// begin driver := IsDrivenBy ( vehicle ) ;
55217: LD_ADDR_VAR 0 5
55221: PUSH
55222: LD_VAR 0 1
55226: PPUSH
55227: CALL_OW 311
55231: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
55232: LD_VAR 0 5
55236: PUSH
55237: LD_EXP 62
55241: IN
55242: IFTRUE 55256
55244: PUSH
55245: LD_VAR 0 1
55249: PUSH
55250: LD_EXP 62
55254: IN
55255: OR
55256: IFFALSE 55262
// exit ;
55258: POP
55259: POP
55260: GO 55730
// if not HasTask ( driver ) then
55262: LD_VAR 0 5
55266: PPUSH
55267: CALL_OW 314
55271: NOT
55272: IFFALSE 55577
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
55274: LD_ADDR_EXP 62
55278: PUSH
55279: LD_EXP 62
55283: PPUSH
55284: LD_VAR 0 5
55288: PPUSH
55289: CALL 49468 0 2
55293: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
55294: LD_ADDR_EXP 62
55298: PUSH
55299: LD_EXP 62
55303: PPUSH
55304: LD_VAR 0 1
55308: PPUSH
55309: CALL 49468 0 2
55313: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
55314: LD_ADDR_VAR 0 6
55318: PUSH
55319: LD_EXP 61
55323: PUSH
55324: LD_VAR 0 4
55328: ARRAY
55329: PUSH
55330: LD_INT 3
55332: ARRAY
55333: PPUSH
55334: LD_EXP 61
55338: PUSH
55339: LD_VAR 0 4
55343: ARRAY
55344: PUSH
55345: LD_INT 4
55347: ARRAY
55348: PPUSH
55349: CALL_OW 428
55353: ST_TO_ADDR
// if hex then
55354: LD_VAR 0 6
55358: IFFALSE 55376
// ComMoveUnit ( driver , hex ) else
55360: LD_VAR 0 5
55364: PPUSH
55365: LD_VAR 0 6
55369: PPUSH
55370: CALL_OW 112
55374: GO 55460
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
55376: LD_VAR 0 1
55380: PPUSH
55381: LD_EXP 61
55385: PUSH
55386: LD_VAR 0 4
55390: ARRAY
55391: PUSH
55392: LD_INT 3
55394: ARRAY
55395: PPUSH
55396: LD_EXP 61
55400: PUSH
55401: LD_VAR 0 4
55405: ARRAY
55406: PUSH
55407: LD_INT 4
55409: ARRAY
55410: PPUSH
55411: CALL_OW 297
55415: PUSH
55416: LD_INT 0
55418: GREATER
55419: IFFALSE 55460
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
55421: LD_VAR 0 5
55425: PPUSH
55426: LD_EXP 61
55430: PUSH
55431: LD_VAR 0 4
55435: ARRAY
55436: PUSH
55437: LD_INT 3
55439: ARRAY
55440: PPUSH
55441: LD_EXP 61
55445: PUSH
55446: LD_VAR 0 4
55450: ARRAY
55451: PUSH
55452: LD_INT 4
55454: ARRAY
55455: PPUSH
55456: CALL_OW 111
// AddComExitVehicle ( driver ) ;
55460: LD_VAR 0 5
55464: PPUSH
55465: CALL_OW 181
// if Multiplayer then
55469: LD_OWVAR 4
55473: IFFALSE 55522
// begin repeat wait ( 10 ) ;
55475: LD_INT 10
55477: PPUSH
55478: CALL_OW 67
// until not IsInUnit ( driver ) ;
55482: LD_VAR 0 5
55486: PPUSH
55487: CALL_OW 310
55491: NOT
55492: IFFALSE 55475
// if not HasTask ( driver ) then
55494: LD_VAR 0 5
55498: PPUSH
55499: CALL_OW 314
55503: NOT
55504: IFFALSE 55520
// ComEnterUnit ( driver , factory ) ;
55506: LD_VAR 0 5
55510: PPUSH
55511: LD_VAR 0 2
55515: PPUSH
55516: CALL_OW 120
// end else
55520: GO 55536
// AddComEnterUnit ( driver , factory ) ;
55522: LD_VAR 0 5
55526: PPUSH
55527: LD_VAR 0 2
55531: PPUSH
55532: CALL_OW 180
// wait ( 0 0$1 ) ;
55536: LD_INT 35
55538: PPUSH
55539: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
55543: LD_ADDR_EXP 62
55547: PUSH
55548: LD_EXP 62
55552: PUSH
55553: LD_VAR 0 5
55557: DIFF
55558: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
55559: LD_ADDR_EXP 62
55563: PUSH
55564: LD_EXP 62
55568: PUSH
55569: LD_VAR 0 1
55573: DIFF
55574: ST_TO_ADDR
// break ;
55575: GO 55728
// end ; end else
55577: GO 55726
// if GetControl ( vehicle ) = control_remote then
55579: LD_VAR 0 1
55583: PPUSH
55584: CALL_OW 263
55588: PUSH
55589: LD_INT 2
55591: EQUAL
55592: IFFALSE 55678
// begin wait ( 0 0$2 ) ;
55594: LD_INT 70
55596: PPUSH
55597: CALL_OW 67
// repeat wait ( 10 ) ;
55601: LD_INT 10
55603: PPUSH
55604: CALL_OW 67
// Connect ( vehicle ) ;
55608: LD_VAR 0 1
55612: PPUSH
55613: CALL 19770 0 1
// until IsControledBy ( vehicle ) ;
55617: LD_VAR 0 1
55621: PPUSH
55622: CALL_OW 312
55626: IFFALSE 55601
// wait ( 10 ) ;
55628: LD_INT 10
55630: PPUSH
55631: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
55635: LD_VAR 0 1
55639: PPUSH
55640: LD_EXP 61
55644: PUSH
55645: LD_VAR 0 4
55649: ARRAY
55650: PUSH
55651: LD_INT 3
55653: ARRAY
55654: PPUSH
55655: LD_EXP 61
55659: PUSH
55660: LD_VAR 0 4
55664: ARRAY
55665: PUSH
55666: LD_INT 4
55668: ARRAY
55669: PPUSH
55670: CALL_OW 111
// break ;
55674: GO 55728
// end else
55676: GO 55726
// begin wait ( 0 0$3 ) ;
55678: LD_INT 105
55680: PPUSH
55681: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
55685: LD_VAR 0 1
55689: PPUSH
55690: LD_EXP 61
55694: PUSH
55695: LD_VAR 0 4
55699: ARRAY
55700: PUSH
55701: LD_INT 3
55703: ARRAY
55704: PPUSH
55705: LD_EXP 61
55709: PUSH
55710: LD_VAR 0 4
55714: ARRAY
55715: PUSH
55716: LD_INT 4
55718: ARRAY
55719: PPUSH
55720: CALL_OW 111
// break ;
55724: GO 55728
// end ; end ;
55726: GO 55177
55728: POP
55729: POP
// end ;
55730: LD_VAR 0 3
55734: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
55735: LD_INT 0
55737: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
55738: LD_VAR 0 1
55742: PUSH
55743: LD_INT 250
55745: EQUAL
55746: IFFALSE 55763
55748: PUSH
55749: LD_VAR 0 2
55753: PPUSH
55754: CALL_OW 264
55758: PUSH
55759: LD_INT 81
55761: EQUAL
55762: AND
55763: IFFALSE 55784
// MinerPlaceMine ( unit , x , y ) ;
55765: LD_VAR 0 2
55769: PPUSH
55770: LD_VAR 0 4
55774: PPUSH
55775: LD_VAR 0 5
55779: PPUSH
55780: CALL 59130 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
55784: LD_VAR 0 1
55788: PUSH
55789: LD_INT 251
55791: EQUAL
55792: IFFALSE 55809
55794: PUSH
55795: LD_VAR 0 2
55799: PPUSH
55800: CALL_OW 264
55804: PUSH
55805: LD_INT 81
55807: EQUAL
55808: AND
55809: IFFALSE 55830
// MinerDetonateMine ( unit , x , y ) ;
55811: LD_VAR 0 2
55815: PPUSH
55816: LD_VAR 0 4
55820: PPUSH
55821: LD_VAR 0 5
55825: PPUSH
55826: CALL 59537 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
55830: LD_VAR 0 1
55834: PUSH
55835: LD_INT 252
55837: EQUAL
55838: IFFALSE 55855
55840: PUSH
55841: LD_VAR 0 2
55845: PPUSH
55846: CALL_OW 264
55850: PUSH
55851: LD_INT 81
55853: EQUAL
55854: AND
55855: IFFALSE 55876
// MinerCreateMinefield ( unit , x , y ) ;
55857: LD_VAR 0 2
55861: PPUSH
55862: LD_VAR 0 4
55866: PPUSH
55867: LD_VAR 0 5
55871: PPUSH
55872: CALL 59769 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
55876: LD_VAR 0 1
55880: PUSH
55881: LD_INT 253
55883: EQUAL
55884: IFFALSE 55901
55886: PUSH
55887: LD_VAR 0 2
55891: PPUSH
55892: CALL_OW 257
55896: PUSH
55897: LD_INT 5
55899: EQUAL
55900: AND
55901: IFFALSE 55922
// ComBinocular ( unit , x , y ) ;
55903: LD_VAR 0 2
55907: PPUSH
55908: LD_VAR 0 4
55912: PPUSH
55913: LD_VAR 0 5
55917: PPUSH
55918: CALL 60144 0 3
// if selectedUnit then
55922: LD_VAR 0 3
55926: IFFALSE 55986
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
55928: LD_VAR 0 1
55932: PUSH
55933: LD_INT 254
55935: EQUAL
55936: IFFALSE 55953
55938: PUSH
55939: LD_VAR 0 2
55943: PPUSH
55944: CALL_OW 264
55948: PUSH
55949: LD_INT 99
55951: EQUAL
55952: AND
55953: IFFALSE 55970
55955: PUSH
55956: LD_VAR 0 3
55960: PPUSH
55961: CALL_OW 263
55965: PUSH
55966: LD_INT 3
55968: EQUAL
55969: AND
55970: IFFALSE 55986
// HackDestroyVehicle ( unit , selectedUnit ) ;
55972: LD_VAR 0 2
55976: PPUSH
55977: LD_VAR 0 3
55981: PPUSH
55982: CALL 58320 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
55986: LD_VAR 0 1
55990: PUSH
55991: LD_INT 255
55993: EQUAL
55994: IFFALSE 56018
55996: PUSH
55997: LD_VAR 0 2
56001: PPUSH
56002: CALL_OW 264
56006: PUSH
56007: LD_INT 14
56009: PUSH
56010: LD_INT 53
56012: PUSH
56013: EMPTY
56014: LIST
56015: LIST
56016: IN
56017: AND
56018: IFFALSE 56036
56020: PUSH
56021: LD_VAR 0 4
56025: PPUSH
56026: LD_VAR 0 5
56030: PPUSH
56031: CALL_OW 488
56035: AND
56036: IFFALSE 56060
// CutTreeXYR ( unit , x , y , 12 ) ;
56038: LD_VAR 0 2
56042: PPUSH
56043: LD_VAR 0 4
56047: PPUSH
56048: LD_VAR 0 5
56052: PPUSH
56053: LD_INT 12
56055: PPUSH
56056: CALL 56251 0 4
// if cmd = 256 then
56060: LD_VAR 0 1
56064: PUSH
56065: LD_INT 256
56067: EQUAL
56068: IFFALSE 56089
// SetFactoryWaypoint ( unit , x , y ) ;
56070: LD_VAR 0 2
56074: PPUSH
56075: LD_VAR 0 4
56079: PPUSH
56080: LD_VAR 0 5
56084: PPUSH
56085: CALL 63852 0 3
// if cmd = 257 then
56089: LD_VAR 0 1
56093: PUSH
56094: LD_INT 257
56096: EQUAL
56097: IFFALSE 56118
// SetWarehouseGatheringPoint ( unit , x , y ) ;
56099: LD_VAR 0 2
56103: PPUSH
56104: LD_VAR 0 4
56108: PPUSH
56109: LD_VAR 0 5
56113: PPUSH
56114: CALL 64348 0 3
// if cmd = 258 then
56118: LD_VAR 0 1
56122: PUSH
56123: LD_INT 258
56125: EQUAL
56126: IFFALSE 56150
// BurnTreeXYR ( unit , x , y , 8 ) ;
56128: LD_VAR 0 2
56132: PPUSH
56133: LD_VAR 0 4
56137: PPUSH
56138: LD_VAR 0 5
56142: PPUSH
56143: LD_INT 8
56145: PPUSH
56146: CALL 56673 0 4
// end ;
56150: LD_VAR 0 6
56154: RET
// export function ComRadiation ( un ) ; var eff ; begin
56155: LD_INT 0
56157: PPUSH
56158: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
56159: LD_VAR 0 1
56163: PPUSH
56164: CALL_OW 264
56168: PUSH
56169: LD_INT 91
56171: NONEQUAL
56172: IFFALSE 56176
// exit ;
56174: GO 56246
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
56176: LD_INT 68
56178: PPUSH
56179: LD_VAR 0 1
56183: PPUSH
56184: CALL_OW 255
56188: PPUSH
56189: CALL_OW 321
56193: PUSH
56194: LD_INT 2
56196: EQUAL
56197: IFFALSE 56209
// eff := 50 else
56199: LD_ADDR_VAR 0 3
56203: PUSH
56204: LD_INT 50
56206: ST_TO_ADDR
56207: GO 56217
// eff := 25 ;
56209: LD_ADDR_VAR 0 3
56213: PUSH
56214: LD_INT 25
56216: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
56217: LD_VAR 0 1
56221: PPUSH
56222: CALL_OW 250
56226: PPUSH
56227: LD_VAR 0 1
56231: PPUSH
56232: CALL_OW 251
56236: PPUSH
56237: LD_VAR 0 3
56241: PPUSH
56242: CALL_OW 495
// end ;
56246: LD_VAR 0 2
56250: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
56251: LD_INT 0
56253: PPUSH
56254: PPUSH
56255: PPUSH
56256: PPUSH
56257: PPUSH
56258: PPUSH
56259: PPUSH
56260: PPUSH
56261: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
56262: LD_VAR 0 1
56266: PPUSH
56267: CALL_OW 302
56271: NOT
56272: IFTRUE 56291
56274: PUSH
56275: LD_VAR 0 2
56279: PPUSH
56280: LD_VAR 0 3
56284: PPUSH
56285: CALL_OW 488
56289: NOT
56290: OR
56291: IFTRUE 56300
56293: PUSH
56294: LD_VAR 0 4
56298: NOT
56299: OR
56300: IFFALSE 56304
// exit ;
56302: GO 56668
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
56304: LD_VAR 0 1
56308: PPUSH
56309: CALL_OW 437
56313: PPUSH
56314: CALL 13492 0 1
56318: PUSH
56319: LD_INT 10
56321: GREATER
56322: IFFALSE 56326
// exit ;
56324: GO 56668
// list := [ ] ;
56326: LD_ADDR_VAR 0 13
56330: PUSH
56331: EMPTY
56332: ST_TO_ADDR
// if x - r < 0 then
56333: LD_VAR 0 2
56337: PUSH
56338: LD_VAR 0 4
56342: MINUS
56343: PUSH
56344: LD_INT 0
56346: LESS
56347: IFFALSE 56359
// min_x := 0 else
56349: LD_ADDR_VAR 0 7
56353: PUSH
56354: LD_INT 0
56356: ST_TO_ADDR
56357: GO 56375
// min_x := x - r ;
56359: LD_ADDR_VAR 0 7
56363: PUSH
56364: LD_VAR 0 2
56368: PUSH
56369: LD_VAR 0 4
56373: MINUS
56374: ST_TO_ADDR
// if y - r < 0 then
56375: LD_VAR 0 3
56379: PUSH
56380: LD_VAR 0 4
56384: MINUS
56385: PUSH
56386: LD_INT 0
56388: LESS
56389: IFFALSE 56401
// min_y := 0 else
56391: LD_ADDR_VAR 0 8
56395: PUSH
56396: LD_INT 0
56398: ST_TO_ADDR
56399: GO 56417
// min_y := y - r ;
56401: LD_ADDR_VAR 0 8
56405: PUSH
56406: LD_VAR 0 3
56410: PUSH
56411: LD_VAR 0 4
56415: MINUS
56416: ST_TO_ADDR
// max_x := x + r ;
56417: LD_ADDR_VAR 0 9
56421: PUSH
56422: LD_VAR 0 2
56426: PUSH
56427: LD_VAR 0 4
56431: PLUS
56432: ST_TO_ADDR
// max_y := y + r ;
56433: LD_ADDR_VAR 0 10
56437: PUSH
56438: LD_VAR 0 3
56442: PUSH
56443: LD_VAR 0 4
56447: PLUS
56448: ST_TO_ADDR
// for _x = min_x to max_x do
56449: LD_ADDR_VAR 0 11
56453: PUSH
56454: DOUBLE
56455: LD_VAR 0 7
56459: DEC
56460: ST_TO_ADDR
56461: LD_VAR 0 9
56465: PUSH
56466: FOR_TO
56467: IFFALSE 56586
// for _y = min_y to max_y do
56469: LD_ADDR_VAR 0 12
56473: PUSH
56474: DOUBLE
56475: LD_VAR 0 8
56479: DEC
56480: ST_TO_ADDR
56481: LD_VAR 0 10
56485: PUSH
56486: FOR_TO
56487: IFFALSE 56582
// begin if not ValidHex ( _x , _y ) then
56489: LD_VAR 0 11
56493: PPUSH
56494: LD_VAR 0 12
56498: PPUSH
56499: CALL_OW 488
56503: NOT
56504: IFFALSE 56508
// continue ;
56506: GO 56486
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
56508: LD_VAR 0 11
56512: PPUSH
56513: LD_VAR 0 12
56517: PPUSH
56518: CALL_OW 351
56522: IFFALSE 56540
56524: PUSH
56525: LD_VAR 0 11
56529: PPUSH
56530: LD_VAR 0 12
56534: PPUSH
56535: CALL_OW 554
56539: AND
56540: IFFALSE 56580
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
56542: LD_ADDR_VAR 0 13
56546: PUSH
56547: LD_VAR 0 13
56551: PPUSH
56552: LD_VAR 0 13
56556: PUSH
56557: LD_INT 1
56559: PLUS
56560: PPUSH
56561: LD_VAR 0 11
56565: PUSH
56566: LD_VAR 0 12
56570: PUSH
56571: EMPTY
56572: LIST
56573: LIST
56574: PPUSH
56575: CALL_OW 2
56579: ST_TO_ADDR
// end ;
56580: GO 56486
56582: POP
56583: POP
56584: GO 56466
56586: POP
56587: POP
// if not list then
56588: LD_VAR 0 13
56592: NOT
56593: IFFALSE 56597
// exit ;
56595: GO 56668
// for i in list do
56597: LD_ADDR_VAR 0 6
56601: PUSH
56602: LD_VAR 0 13
56606: PUSH
56607: FOR_IN
56608: IFFALSE 56666
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
56610: LD_VAR 0 1
56614: PPUSH
56615: LD_STRING M
56617: PUSH
56618: LD_VAR 0 6
56622: PUSH
56623: LD_INT 1
56625: ARRAY
56626: PUSH
56627: LD_VAR 0 6
56631: PUSH
56632: LD_INT 2
56634: ARRAY
56635: PUSH
56636: LD_INT 0
56638: PUSH
56639: LD_INT 0
56641: PUSH
56642: LD_INT 0
56644: PUSH
56645: LD_INT 0
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: LIST
56652: LIST
56653: LIST
56654: LIST
56655: LIST
56656: PUSH
56657: EMPTY
56658: LIST
56659: PPUSH
56660: CALL_OW 447
56664: GO 56607
56666: POP
56667: POP
// end ;
56668: LD_VAR 0 5
56672: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
56673: LD_INT 0
56675: PPUSH
56676: PPUSH
56677: PPUSH
56678: PPUSH
56679: PPUSH
56680: PPUSH
56681: PPUSH
56682: PPUSH
56683: PPUSH
56684: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
56685: LD_VAR 0 1
56689: PPUSH
56690: CALL_OW 302
56694: NOT
56695: IFTRUE 56714
56697: PUSH
56698: LD_VAR 0 2
56702: PPUSH
56703: LD_VAR 0 3
56707: PPUSH
56708: CALL_OW 488
56712: NOT
56713: OR
56714: IFTRUE 56723
56716: PUSH
56717: LD_VAR 0 4
56721: NOT
56722: OR
56723: IFFALSE 56727
// exit ;
56725: GO 57266
// if Count ( GetTaskList ( flame ) ) > 10 then
56727: LD_VAR 0 1
56731: PPUSH
56732: CALL_OW 437
56736: PPUSH
56737: CALL 13492 0 1
56741: PUSH
56742: LD_INT 10
56744: GREATER
56745: IFFALSE 56749
// exit ;
56747: GO 57266
// list := [ ] ;
56749: LD_ADDR_VAR 0 13
56753: PUSH
56754: EMPTY
56755: ST_TO_ADDR
// if x - r < 0 then
56756: LD_VAR 0 2
56760: PUSH
56761: LD_VAR 0 4
56765: MINUS
56766: PUSH
56767: LD_INT 0
56769: LESS
56770: IFFALSE 56782
// min_x := 0 else
56772: LD_ADDR_VAR 0 7
56776: PUSH
56777: LD_INT 0
56779: ST_TO_ADDR
56780: GO 56798
// min_x := x - r ;
56782: LD_ADDR_VAR 0 7
56786: PUSH
56787: LD_VAR 0 2
56791: PUSH
56792: LD_VAR 0 4
56796: MINUS
56797: ST_TO_ADDR
// if y - r < 0 then
56798: LD_VAR 0 3
56802: PUSH
56803: LD_VAR 0 4
56807: MINUS
56808: PUSH
56809: LD_INT 0
56811: LESS
56812: IFFALSE 56824
// min_y := 0 else
56814: LD_ADDR_VAR 0 8
56818: PUSH
56819: LD_INT 0
56821: ST_TO_ADDR
56822: GO 56840
// min_y := y - r ;
56824: LD_ADDR_VAR 0 8
56828: PUSH
56829: LD_VAR 0 3
56833: PUSH
56834: LD_VAR 0 4
56838: MINUS
56839: ST_TO_ADDR
// max_x := x + r ;
56840: LD_ADDR_VAR 0 9
56844: PUSH
56845: LD_VAR 0 2
56849: PUSH
56850: LD_VAR 0 4
56854: PLUS
56855: ST_TO_ADDR
// max_y := y + r ;
56856: LD_ADDR_VAR 0 10
56860: PUSH
56861: LD_VAR 0 3
56865: PUSH
56866: LD_VAR 0 4
56870: PLUS
56871: ST_TO_ADDR
// for _x = min_x to max_x do
56872: LD_ADDR_VAR 0 11
56876: PUSH
56877: DOUBLE
56878: LD_VAR 0 7
56882: DEC
56883: ST_TO_ADDR
56884: LD_VAR 0 9
56888: PUSH
56889: FOR_TO
56890: IFFALSE 57009
// for _y = min_y to max_y do
56892: LD_ADDR_VAR 0 12
56896: PUSH
56897: DOUBLE
56898: LD_VAR 0 8
56902: DEC
56903: ST_TO_ADDR
56904: LD_VAR 0 10
56908: PUSH
56909: FOR_TO
56910: IFFALSE 57005
// begin if not ValidHex ( _x , _y ) then
56912: LD_VAR 0 11
56916: PPUSH
56917: LD_VAR 0 12
56921: PPUSH
56922: CALL_OW 488
56926: NOT
56927: IFFALSE 56931
// continue ;
56929: GO 56909
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
56931: LD_VAR 0 11
56935: PPUSH
56936: LD_VAR 0 12
56940: PPUSH
56941: CALL_OW 351
56945: IFFALSE 56963
56947: PUSH
56948: LD_VAR 0 11
56952: PPUSH
56953: LD_VAR 0 12
56957: PPUSH
56958: CALL_OW 554
56962: AND
56963: IFFALSE 57003
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
56965: LD_ADDR_VAR 0 13
56969: PUSH
56970: LD_VAR 0 13
56974: PPUSH
56975: LD_VAR 0 13
56979: PUSH
56980: LD_INT 1
56982: PLUS
56983: PPUSH
56984: LD_VAR 0 11
56988: PUSH
56989: LD_VAR 0 12
56993: PUSH
56994: EMPTY
56995: LIST
56996: LIST
56997: PPUSH
56998: CALL_OW 2
57002: ST_TO_ADDR
// end ;
57003: GO 56909
57005: POP
57006: POP
57007: GO 56889
57009: POP
57010: POP
// if not list then
57011: LD_VAR 0 13
57015: NOT
57016: IFFALSE 57020
// exit ;
57018: GO 57266
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
57020: LD_ADDR_VAR 0 13
57024: PUSH
57025: LD_VAR 0 1
57029: PPUSH
57030: LD_VAR 0 13
57034: PPUSH
57035: LD_INT 1
57037: PPUSH
57038: LD_INT 1
57040: PPUSH
57041: CALL 16898 0 4
57045: ST_TO_ADDR
// ComStop ( flame ) ;
57046: LD_VAR 0 1
57050: PPUSH
57051: CALL_OW 141
// for i in list do
57055: LD_ADDR_VAR 0 6
57059: PUSH
57060: LD_VAR 0 13
57064: PUSH
57065: FOR_IN
57066: IFFALSE 57097
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
57068: LD_VAR 0 1
57072: PPUSH
57073: LD_VAR 0 6
57077: PUSH
57078: LD_INT 1
57080: ARRAY
57081: PPUSH
57082: LD_VAR 0 6
57086: PUSH
57087: LD_INT 2
57089: ARRAY
57090: PPUSH
57091: CALL_OW 176
57095: GO 57065
57097: POP
57098: POP
// repeat wait ( 0 0$1 ) ;
57099: LD_INT 35
57101: PPUSH
57102: CALL_OW 67
// task := GetTaskList ( flame ) ;
57106: LD_ADDR_VAR 0 14
57110: PUSH
57111: LD_VAR 0 1
57115: PPUSH
57116: CALL_OW 437
57120: ST_TO_ADDR
// if not task then
57121: LD_VAR 0 14
57125: NOT
57126: IFFALSE 57130
// exit ;
57128: GO 57266
// if task [ 1 ] [ 1 ] <> | then
57130: LD_VAR 0 14
57134: PUSH
57135: LD_INT 1
57137: ARRAY
57138: PUSH
57139: LD_INT 1
57141: ARRAY
57142: PUSH
57143: LD_STRING |
57145: NONEQUAL
57146: IFFALSE 57150
// exit ;
57148: GO 57266
// _x := task [ 1 ] [ 2 ] ;
57150: LD_ADDR_VAR 0 11
57154: PUSH
57155: LD_VAR 0 14
57159: PUSH
57160: LD_INT 1
57162: ARRAY
57163: PUSH
57164: LD_INT 2
57166: ARRAY
57167: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
57168: LD_ADDR_VAR 0 12
57172: PUSH
57173: LD_VAR 0 14
57177: PUSH
57178: LD_INT 1
57180: ARRAY
57181: PUSH
57182: LD_INT 3
57184: ARRAY
57185: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
57186: LD_VAR 0 11
57190: PPUSH
57191: LD_VAR 0 12
57195: PPUSH
57196: CALL_OW 351
57200: NOT
57201: IFTRUE 57220
57203: PUSH
57204: LD_VAR 0 11
57208: PPUSH
57209: LD_VAR 0 12
57213: PPUSH
57214: CALL_OW 554
57218: NOT
57219: OR
57220: IFFALSE 57254
// begin task := Delete ( task , 1 ) ;
57222: LD_ADDR_VAR 0 14
57226: PUSH
57227: LD_VAR 0 14
57231: PPUSH
57232: LD_INT 1
57234: PPUSH
57235: CALL_OW 3
57239: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
57240: LD_VAR 0 1
57244: PPUSH
57245: LD_VAR 0 14
57249: PPUSH
57250: CALL_OW 446
// end ; until not HasTask ( flame ) ;
57254: LD_VAR 0 1
57258: PPUSH
57259: CALL_OW 314
57263: NOT
57264: IFFALSE 57099
// end ;
57266: LD_VAR 0 5
57270: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
57271: LD_EXP 50
57275: NOT
57276: IFFALSE 57326
57278: GO 57280
57280: DISABLE
// begin initHack := true ;
57281: LD_ADDR_EXP 50
57285: PUSH
57286: LD_INT 1
57288: ST_TO_ADDR
// hackTanks := [ ] ;
57289: LD_ADDR_EXP 51
57293: PUSH
57294: EMPTY
57295: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
57296: LD_ADDR_EXP 52
57300: PUSH
57301: EMPTY
57302: ST_TO_ADDR
// hackLimit := 3 ;
57303: LD_ADDR_EXP 53
57307: PUSH
57308: LD_INT 3
57310: ST_TO_ADDR
// hackDist := 12 ;
57311: LD_ADDR_EXP 54
57315: PUSH
57316: LD_INT 12
57318: ST_TO_ADDR
// hackCounter := [ ] ;
57319: LD_ADDR_EXP 55
57323: PUSH
57324: EMPTY
57325: ST_TO_ADDR
// end ;
57326: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
57327: LD_EXP 50
57331: IFFALSE 57349
57333: PUSH
57334: LD_INT 34
57336: PUSH
57337: LD_INT 99
57339: PUSH
57340: EMPTY
57341: LIST
57342: LIST
57343: PPUSH
57344: CALL_OW 69
57348: AND
57349: IFFALSE 57602
57351: GO 57353
57353: DISABLE
57354: LD_INT 0
57356: PPUSH
57357: PPUSH
// begin enable ;
57358: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
57359: LD_ADDR_VAR 0 1
57363: PUSH
57364: LD_INT 34
57366: PUSH
57367: LD_INT 99
57369: PUSH
57370: EMPTY
57371: LIST
57372: LIST
57373: PPUSH
57374: CALL_OW 69
57378: PUSH
57379: FOR_IN
57380: IFFALSE 57600
// begin if not i in hackTanks then
57382: LD_VAR 0 1
57386: PUSH
57387: LD_EXP 51
57391: IN
57392: NOT
57393: IFFALSE 57476
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
57395: LD_ADDR_EXP 51
57399: PUSH
57400: LD_EXP 51
57404: PPUSH
57405: LD_EXP 51
57409: PUSH
57410: LD_INT 1
57412: PLUS
57413: PPUSH
57414: LD_VAR 0 1
57418: PPUSH
57419: CALL_OW 1
57423: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
57424: LD_ADDR_EXP 52
57428: PUSH
57429: LD_EXP 52
57433: PPUSH
57434: LD_EXP 52
57438: PUSH
57439: LD_INT 1
57441: PLUS
57442: PPUSH
57443: EMPTY
57444: PPUSH
57445: CALL_OW 1
57449: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
57450: LD_ADDR_EXP 55
57454: PUSH
57455: LD_EXP 55
57459: PPUSH
57460: LD_EXP 55
57464: PUSH
57465: LD_INT 1
57467: PLUS
57468: PPUSH
57469: EMPTY
57470: PPUSH
57471: CALL_OW 1
57475: ST_TO_ADDR
// end ; if not IsOk ( i ) then
57476: LD_VAR 0 1
57480: PPUSH
57481: CALL_OW 302
57485: NOT
57486: IFFALSE 57499
// begin HackUnlinkAll ( i ) ;
57488: LD_VAR 0 1
57492: PPUSH
57493: CALL 57605 0 1
// continue ;
57497: GO 57379
// end ; HackCheckCapturedStatus ( i ) ;
57499: LD_VAR 0 1
57503: PPUSH
57504: CALL 58050 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
57508: LD_ADDR_VAR 0 2
57512: PUSH
57513: LD_INT 81
57515: PUSH
57516: LD_VAR 0 1
57520: PPUSH
57521: CALL_OW 255
57525: PUSH
57526: EMPTY
57527: LIST
57528: LIST
57529: PUSH
57530: LD_INT 33
57532: PUSH
57533: LD_INT 3
57535: PUSH
57536: EMPTY
57537: LIST
57538: LIST
57539: PUSH
57540: LD_INT 91
57542: PUSH
57543: LD_VAR 0 1
57547: PUSH
57548: LD_EXP 54
57552: PUSH
57553: EMPTY
57554: LIST
57555: LIST
57556: LIST
57557: PUSH
57558: LD_INT 50
57560: PUSH
57561: EMPTY
57562: LIST
57563: PUSH
57564: EMPTY
57565: LIST
57566: LIST
57567: LIST
57568: LIST
57569: PPUSH
57570: CALL_OW 69
57574: ST_TO_ADDR
// if not tmp then
57575: LD_VAR 0 2
57579: NOT
57580: IFFALSE 57584
// continue ;
57582: GO 57379
// HackLink ( i , tmp ) ;
57584: LD_VAR 0 1
57588: PPUSH
57589: LD_VAR 0 2
57593: PPUSH
57594: CALL 57741 0 2
// end ;
57598: GO 57379
57600: POP
57601: POP
// end ;
57602: PPOPN 2
57604: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
57605: LD_INT 0
57607: PPUSH
57608: PPUSH
57609: PPUSH
// if not hack in hackTanks then
57610: LD_VAR 0 1
57614: PUSH
57615: LD_EXP 51
57619: IN
57620: NOT
57621: IFFALSE 57625
// exit ;
57623: GO 57736
// index := GetElementIndex ( hackTanks , hack ) ;
57625: LD_ADDR_VAR 0 4
57629: PUSH
57630: LD_EXP 51
57634: PPUSH
57635: LD_VAR 0 1
57639: PPUSH
57640: CALL 16193 0 2
57644: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
57645: LD_EXP 52
57649: PUSH
57650: LD_VAR 0 4
57654: ARRAY
57655: IFFALSE 57736
// begin for i in hackTanksCaptured [ index ] do
57657: LD_ADDR_VAR 0 3
57661: PUSH
57662: LD_EXP 52
57666: PUSH
57667: LD_VAR 0 4
57671: ARRAY
57672: PUSH
57673: FOR_IN
57674: IFFALSE 57700
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
57676: LD_VAR 0 3
57680: PUSH
57681: LD_INT 1
57683: ARRAY
57684: PPUSH
57685: LD_VAR 0 3
57689: PUSH
57690: LD_INT 2
57692: ARRAY
57693: PPUSH
57694: CALL_OW 235
57698: GO 57673
57700: POP
57701: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
57702: LD_ADDR_EXP 52
57706: PUSH
57707: LD_EXP 52
57711: PPUSH
57712: LD_VAR 0 4
57716: PPUSH
57717: EMPTY
57718: PPUSH
57719: CALL_OW 1
57723: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
57724: LD_VAR 0 1
57728: PPUSH
57729: LD_INT 0
57731: PPUSH
57732: CALL_OW 505
// end ; end ;
57736: LD_VAR 0 2
57740: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
57741: LD_INT 0
57743: PPUSH
57744: PPUSH
57745: PPUSH
// if not hack in hackTanks or not vehicles then
57746: LD_VAR 0 1
57750: PUSH
57751: LD_EXP 51
57755: IN
57756: NOT
57757: IFTRUE 57766
57759: PUSH
57760: LD_VAR 0 2
57764: NOT
57765: OR
57766: IFFALSE 57770
// exit ;
57768: GO 58045
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
57770: LD_ADDR_VAR 0 2
57774: PUSH
57775: LD_VAR 0 1
57779: PPUSH
57780: LD_VAR 0 2
57784: PPUSH
57785: LD_INT 1
57787: PPUSH
57788: LD_INT 1
57790: PPUSH
57791: CALL 16845 0 4
57795: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
57796: LD_ADDR_VAR 0 5
57800: PUSH
57801: LD_EXP 51
57805: PPUSH
57806: LD_VAR 0 1
57810: PPUSH
57811: CALL 16193 0 2
57815: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
57816: LD_EXP 52
57820: PUSH
57821: LD_VAR 0 5
57825: ARRAY
57826: PUSH
57827: LD_EXP 53
57831: LESS
57832: IFFALSE 58021
// begin for i := 1 to vehicles do
57834: LD_ADDR_VAR 0 4
57838: PUSH
57839: DOUBLE
57840: LD_INT 1
57842: DEC
57843: ST_TO_ADDR
57844: LD_VAR 0 2
57848: PUSH
57849: FOR_TO
57850: IFFALSE 58019
// begin if hackTanksCaptured [ index ] = hackLimit then
57852: LD_EXP 52
57856: PUSH
57857: LD_VAR 0 5
57861: ARRAY
57862: PUSH
57863: LD_EXP 53
57867: EQUAL
57868: IFFALSE 57872
// break ;
57870: GO 58019
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
57872: LD_ADDR_EXP 55
57876: PUSH
57877: LD_EXP 55
57881: PPUSH
57882: LD_VAR 0 5
57886: PPUSH
57887: LD_EXP 55
57891: PUSH
57892: LD_VAR 0 5
57896: ARRAY
57897: PUSH
57898: LD_INT 1
57900: PLUS
57901: PPUSH
57902: CALL_OW 1
57906: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
57907: LD_ADDR_EXP 52
57911: PUSH
57912: LD_EXP 52
57916: PPUSH
57917: LD_VAR 0 5
57921: PUSH
57922: LD_EXP 52
57926: PUSH
57927: LD_VAR 0 5
57931: ARRAY
57932: PUSH
57933: LD_INT 1
57935: PLUS
57936: PUSH
57937: EMPTY
57938: LIST
57939: LIST
57940: PPUSH
57941: LD_VAR 0 2
57945: PUSH
57946: LD_VAR 0 4
57950: ARRAY
57951: PUSH
57952: LD_VAR 0 2
57956: PUSH
57957: LD_VAR 0 4
57961: ARRAY
57962: PPUSH
57963: CALL_OW 255
57967: PUSH
57968: EMPTY
57969: LIST
57970: LIST
57971: PPUSH
57972: CALL 16410 0 3
57976: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
57977: LD_VAR 0 2
57981: PUSH
57982: LD_VAR 0 4
57986: ARRAY
57987: PPUSH
57988: LD_VAR 0 1
57992: PPUSH
57993: CALL_OW 255
57997: PPUSH
57998: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
58002: LD_VAR 0 2
58006: PUSH
58007: LD_VAR 0 4
58011: ARRAY
58012: PPUSH
58013: CALL_OW 141
// end ;
58017: GO 57849
58019: POP
58020: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
58021: LD_VAR 0 1
58025: PPUSH
58026: LD_EXP 52
58030: PUSH
58031: LD_VAR 0 5
58035: ARRAY
58036: PUSH
58037: LD_INT 0
58039: PLUS
58040: PPUSH
58041: CALL_OW 505
// end ;
58045: LD_VAR 0 3
58049: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
58050: LD_INT 0
58052: PPUSH
58053: PPUSH
58054: PPUSH
58055: PPUSH
// if not hack in hackTanks then
58056: LD_VAR 0 1
58060: PUSH
58061: LD_EXP 51
58065: IN
58066: NOT
58067: IFFALSE 58071
// exit ;
58069: GO 58315
// index := GetElementIndex ( hackTanks , hack ) ;
58071: LD_ADDR_VAR 0 4
58075: PUSH
58076: LD_EXP 51
58080: PPUSH
58081: LD_VAR 0 1
58085: PPUSH
58086: CALL 16193 0 2
58090: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
58091: LD_ADDR_VAR 0 3
58095: PUSH
58096: DOUBLE
58097: LD_EXP 52
58101: PUSH
58102: LD_VAR 0 4
58106: ARRAY
58107: INC
58108: ST_TO_ADDR
58109: LD_INT 1
58111: PUSH
58112: FOR_DOWNTO
58113: IFFALSE 58289
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
58115: LD_ADDR_VAR 0 5
58119: PUSH
58120: LD_EXP 52
58124: PUSH
58125: LD_VAR 0 4
58129: ARRAY
58130: PUSH
58131: LD_VAR 0 3
58135: ARRAY
58136: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
58137: LD_VAR 0 5
58141: PUSH
58142: LD_INT 1
58144: ARRAY
58145: PPUSH
58146: CALL_OW 302
58150: NOT
58151: IFTRUE 58179
58153: PUSH
58154: LD_VAR 0 5
58158: PUSH
58159: LD_INT 1
58161: ARRAY
58162: PPUSH
58163: CALL_OW 255
58167: PUSH
58168: LD_VAR 0 1
58172: PPUSH
58173: CALL_OW 255
58177: NONEQUAL
58178: OR
58179: IFFALSE 58287
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
58181: LD_VAR 0 5
58185: PUSH
58186: LD_INT 1
58188: ARRAY
58189: PPUSH
58190: CALL_OW 305
58194: IFFALSE 58222
58196: PUSH
58197: LD_VAR 0 5
58201: PUSH
58202: LD_INT 1
58204: ARRAY
58205: PPUSH
58206: CALL_OW 255
58210: PUSH
58211: LD_VAR 0 1
58215: PPUSH
58216: CALL_OW 255
58220: EQUAL
58221: AND
58222: IFFALSE 58246
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
58224: LD_VAR 0 5
58228: PUSH
58229: LD_INT 1
58231: ARRAY
58232: PPUSH
58233: LD_VAR 0 5
58237: PUSH
58238: LD_INT 2
58240: ARRAY
58241: PPUSH
58242: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
58246: LD_ADDR_EXP 52
58250: PUSH
58251: LD_EXP 52
58255: PPUSH
58256: LD_VAR 0 4
58260: PPUSH
58261: LD_EXP 52
58265: PUSH
58266: LD_VAR 0 4
58270: ARRAY
58271: PPUSH
58272: LD_VAR 0 3
58276: PPUSH
58277: CALL_OW 3
58281: PPUSH
58282: CALL_OW 1
58286: ST_TO_ADDR
// end ; end ;
58287: GO 58112
58289: POP
58290: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
58291: LD_VAR 0 1
58295: PPUSH
58296: LD_EXP 52
58300: PUSH
58301: LD_VAR 0 4
58305: ARRAY
58306: PUSH
58307: LD_INT 0
58309: PLUS
58310: PPUSH
58311: CALL_OW 505
// end ;
58315: LD_VAR 0 2
58319: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
58320: LD_INT 0
58322: PPUSH
58323: PPUSH
58324: PPUSH
58325: PPUSH
// if not hack in hackTanks then
58326: LD_VAR 0 1
58330: PUSH
58331: LD_EXP 51
58335: IN
58336: NOT
58337: IFFALSE 58341
// exit ;
58339: GO 58426
// index := GetElementIndex ( hackTanks , hack ) ;
58341: LD_ADDR_VAR 0 5
58345: PUSH
58346: LD_EXP 51
58350: PPUSH
58351: LD_VAR 0 1
58355: PPUSH
58356: CALL 16193 0 2
58360: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
58361: LD_ADDR_VAR 0 4
58365: PUSH
58366: DOUBLE
58367: LD_INT 1
58369: DEC
58370: ST_TO_ADDR
58371: LD_EXP 52
58375: PUSH
58376: LD_VAR 0 5
58380: ARRAY
58381: PUSH
58382: FOR_TO
58383: IFFALSE 58424
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
58385: LD_EXP 52
58389: PUSH
58390: LD_VAR 0 5
58394: ARRAY
58395: PUSH
58396: LD_VAR 0 4
58400: ARRAY
58401: PUSH
58402: LD_INT 1
58404: ARRAY
58405: PUSH
58406: LD_VAR 0 2
58410: EQUAL
58411: IFFALSE 58422
// KillUnit ( vehicle ) ;
58413: LD_VAR 0 2
58417: PPUSH
58418: CALL_OW 66
58422: GO 58382
58424: POP
58425: POP
// end ;
58426: LD_VAR 0 3
58430: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
58431: LD_EXP 56
58435: NOT
58436: IFFALSE 58569
58438: GO 58440
58440: DISABLE
58441: LD_INT 0
58443: PPUSH
// begin initMiner := true ;
58444: LD_ADDR_EXP 56
58448: PUSH
58449: LD_INT 1
58451: ST_TO_ADDR
// minersList := [ ] ;
58452: LD_ADDR_EXP 57
58456: PUSH
58457: EMPTY
58458: ST_TO_ADDR
// minerMinesList := [ ] ;
58459: LD_ADDR_EXP 58
58463: PUSH
58464: EMPTY
58465: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
58466: LD_ADDR_EXP 59
58470: PUSH
58471: LD_INT 10
58473: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
58474: LD_ADDR_VAR 0 1
58478: PUSH
58479: LD_INT 34
58481: PUSH
58482: LD_INT 81
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: PPUSH
58489: CALL_OW 69
58493: PUSH
58494: FOR_IN
58495: IFFALSE 58567
// begin if not i in minersList then
58497: LD_VAR 0 1
58501: PUSH
58502: LD_EXP 57
58506: IN
58507: NOT
58508: IFFALSE 58565
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
58510: LD_ADDR_EXP 57
58514: PUSH
58515: LD_EXP 57
58519: PPUSH
58520: LD_EXP 57
58524: PUSH
58525: LD_INT 1
58527: PLUS
58528: PPUSH
58529: LD_VAR 0 1
58533: PPUSH
58534: CALL_OW 1
58538: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
58539: LD_ADDR_EXP 58
58543: PUSH
58544: LD_EXP 58
58548: PPUSH
58549: LD_EXP 58
58553: PUSH
58554: LD_INT 1
58556: PLUS
58557: PPUSH
58558: EMPTY
58559: PPUSH
58560: CALL_OW 1
58564: ST_TO_ADDR
// end end ;
58565: GO 58494
58567: POP
58568: POP
// end ;
58569: PPOPN 1
58571: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
58572: LD_EXP 56
58576: IFFALSE 58607
58578: PUSH
58579: LD_EXP 58
58583: PPUSH
58584: CALL 13492 0 1
58588: IFTRUE 58606
58590: PUSH
58591: LD_INT 34
58593: PUSH
58594: LD_INT 81
58596: PUSH
58597: EMPTY
58598: LIST
58599: LIST
58600: PPUSH
58601: CALL_OW 69
58605: OR
58606: AND
58607: IFFALSE 59127
58609: GO 58611
58611: DISABLE
58612: LD_INT 0
58614: PPUSH
58615: PPUSH
58616: PPUSH
58617: PPUSH
// begin enable ;
58618: ENABLE
// for i := minerMinesList downto 1 do
58619: LD_ADDR_VAR 0 1
58623: PUSH
58624: DOUBLE
58625: LD_EXP 58
58629: INC
58630: ST_TO_ADDR
58631: LD_INT 1
58633: PUSH
58634: FOR_DOWNTO
58635: IFFALSE 59125
// begin side := GetSide ( minersList [ i ] ) ;
58637: LD_ADDR_VAR 0 3
58641: PUSH
58642: LD_EXP 57
58646: PUSH
58647: LD_VAR 0 1
58651: ARRAY
58652: PPUSH
58653: CALL_OW 255
58657: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
58658: LD_EXP 57
58662: PUSH
58663: LD_VAR 0 1
58667: ARRAY
58668: PPUSH
58669: CALL_OW 300
58673: IFFALSE 58694
58675: PUSH
58676: LD_VAR 0 3
58680: PUSH
58681: LD_OWVAR 2
58685: PUSH
58686: LD_INT 9
58688: PUSH
58689: EMPTY
58690: LIST
58691: LIST
58692: IN
58693: AND
58694: IFFALSE 58727
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
58696: LD_EXP 57
58700: PUSH
58701: LD_VAR 0 1
58705: ARRAY
58706: PPUSH
58707: LD_EXP 58
58711: PUSH
58712: LD_VAR 0 1
58716: ARRAY
58717: PPUSH
58718: CALL 13492 0 1
58722: PPUSH
58723: CALL_OW 505
// if not minerMinesList [ i ] then
58727: LD_EXP 58
58731: PUSH
58732: LD_VAR 0 1
58736: ARRAY
58737: NOT
58738: IFFALSE 58742
// continue ;
58740: GO 58634
// for j := minerMinesList [ i ] downto 1 do
58742: LD_ADDR_VAR 0 2
58746: PUSH
58747: DOUBLE
58748: LD_EXP 58
58752: PUSH
58753: LD_VAR 0 1
58757: ARRAY
58758: INC
58759: ST_TO_ADDR
58760: LD_INT 1
58762: PUSH
58763: FOR_DOWNTO
58764: IFFALSE 59121
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
58766: LD_EXP 57
58770: PUSH
58771: LD_VAR 0 1
58775: ARRAY
58776: PPUSH
58777: CALL_OW 301
58781: IFTRUE 58801
58783: PUSH
58784: LD_EXP 57
58788: PUSH
58789: LD_VAR 0 1
58793: ARRAY
58794: PPUSH
58795: CALL_OW 305
58799: NOT
58800: OR
58801: IFFALSE 58892
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
58803: LD_EXP 58
58807: PUSH
58808: LD_VAR 0 1
58812: ARRAY
58813: PUSH
58814: LD_VAR 0 2
58818: ARRAY
58819: PUSH
58820: LD_INT 1
58822: ARRAY
58823: PPUSH
58824: LD_EXP 58
58828: PUSH
58829: LD_VAR 0 1
58833: ARRAY
58834: PUSH
58835: LD_VAR 0 2
58839: ARRAY
58840: PUSH
58841: LD_INT 2
58843: ARRAY
58844: PPUSH
58845: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
58849: LD_ADDR_EXP 58
58853: PUSH
58854: LD_EXP 58
58858: PPUSH
58859: LD_VAR 0 1
58863: PPUSH
58864: LD_EXP 58
58868: PUSH
58869: LD_VAR 0 1
58873: ARRAY
58874: PPUSH
58875: LD_VAR 0 2
58879: PPUSH
58880: CALL_OW 3
58884: PPUSH
58885: CALL_OW 1
58889: ST_TO_ADDR
// continue ;
58890: GO 58763
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
58892: LD_ADDR_VAR 0 4
58896: PUSH
58897: LD_EXP 58
58901: PUSH
58902: LD_VAR 0 1
58906: ARRAY
58907: PUSH
58908: LD_VAR 0 2
58912: ARRAY
58913: PUSH
58914: LD_INT 1
58916: ARRAY
58917: PPUSH
58918: LD_EXP 58
58922: PUSH
58923: LD_VAR 0 1
58927: ARRAY
58928: PUSH
58929: LD_VAR 0 2
58933: ARRAY
58934: PUSH
58935: LD_INT 2
58937: ARRAY
58938: PPUSH
58939: CALL_OW 428
58943: ST_TO_ADDR
// if not tmp then
58944: LD_VAR 0 4
58948: NOT
58949: IFFALSE 58953
// continue ;
58951: GO 58763
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
58953: LD_VAR 0 4
58957: PUSH
58958: LD_INT 81
58960: PUSH
58961: LD_VAR 0 3
58965: PUSH
58966: EMPTY
58967: LIST
58968: LIST
58969: PPUSH
58970: CALL_OW 69
58974: IN
58975: IFFALSE 59025
58977: PUSH
58978: LD_EXP 58
58982: PUSH
58983: LD_VAR 0 1
58987: ARRAY
58988: PUSH
58989: LD_VAR 0 2
58993: ARRAY
58994: PUSH
58995: LD_INT 1
58997: ARRAY
58998: PPUSH
58999: LD_EXP 58
59003: PUSH
59004: LD_VAR 0 1
59008: ARRAY
59009: PUSH
59010: LD_VAR 0 2
59014: ARRAY
59015: PUSH
59016: LD_INT 2
59018: ARRAY
59019: PPUSH
59020: CALL_OW 458
59024: AND
59025: IFFALSE 59119
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
59027: LD_EXP 58
59031: PUSH
59032: LD_VAR 0 1
59036: ARRAY
59037: PUSH
59038: LD_VAR 0 2
59042: ARRAY
59043: PUSH
59044: LD_INT 1
59046: ARRAY
59047: PPUSH
59048: LD_EXP 58
59052: PUSH
59053: LD_VAR 0 1
59057: ARRAY
59058: PUSH
59059: LD_VAR 0 2
59063: ARRAY
59064: PUSH
59065: LD_INT 2
59067: ARRAY
59068: PPUSH
59069: LD_VAR 0 3
59073: PPUSH
59074: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
59078: LD_ADDR_EXP 58
59082: PUSH
59083: LD_EXP 58
59087: PPUSH
59088: LD_VAR 0 1
59092: PPUSH
59093: LD_EXP 58
59097: PUSH
59098: LD_VAR 0 1
59102: ARRAY
59103: PPUSH
59104: LD_VAR 0 2
59108: PPUSH
59109: CALL_OW 3
59113: PPUSH
59114: CALL_OW 1
59118: ST_TO_ADDR
// end ; end ;
59119: GO 58763
59121: POP
59122: POP
// end ;
59123: GO 58634
59125: POP
59126: POP
// end ;
59127: PPOPN 4
59129: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
59130: LD_INT 0
59132: PPUSH
59133: PPUSH
59134: PPUSH
59135: PPUSH
// result := false ;
59136: LD_ADDR_VAR 0 4
59140: PUSH
59141: LD_INT 0
59143: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
59144: LD_VAR 0 1
59148: PPUSH
59149: CALL_OW 264
59153: PUSH
59154: LD_INT 81
59156: EQUAL
59157: NOT
59158: IFFALSE 59162
// exit ;
59160: GO 59532
// side := GetSide ( unit ) ;
59162: LD_ADDR_VAR 0 6
59166: PUSH
59167: LD_VAR 0 1
59171: PPUSH
59172: CALL_OW 255
59176: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
59177: LD_ADDR_VAR 0 5
59181: PUSH
59182: LD_EXP 57
59186: PPUSH
59187: LD_VAR 0 1
59191: PPUSH
59192: CALL 16193 0 2
59196: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
59197: LD_EXP 58
59201: PUSH
59202: LD_VAR 0 5
59206: ARRAY
59207: PUSH
59208: LD_EXP 59
59212: GREATEREQUAL
59213: IFFALSE 59217
// exit ;
59215: GO 59532
// ComMoveXY ( unit , x , y ) ;
59217: LD_VAR 0 1
59221: PPUSH
59222: LD_VAR 0 2
59226: PPUSH
59227: LD_VAR 0 3
59231: PPUSH
59232: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
59236: LD_INT 35
59238: PPUSH
59239: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
59243: LD_VAR 0 1
59247: PPUSH
59248: LD_VAR 0 2
59252: PPUSH
59253: LD_VAR 0 3
59257: PPUSH
59258: CALL 48249 0 3
59262: NOT
59263: IFFALSE 59276
59265: PUSH
59266: LD_VAR 0 1
59270: PPUSH
59271: CALL_OW 314
59275: AND
59276: IFFALSE 59280
// exit ;
59278: GO 59532
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
59280: LD_VAR 0 2
59284: PPUSH
59285: LD_VAR 0 3
59289: PPUSH
59290: CALL_OW 428
59294: PUSH
59295: LD_VAR 0 1
59299: EQUAL
59300: IFFALSE 59314
59302: PUSH
59303: LD_VAR 0 1
59307: PPUSH
59308: CALL_OW 314
59312: NOT
59313: AND
59314: IFFALSE 59236
// if MineAtPos ( x , y ) then
59316: LD_VAR 0 2
59320: PPUSH
59321: LD_VAR 0 3
59325: PPUSH
59326: CALL_OW 458
59330: IFFALSE 59334
// exit ;
59332: GO 59532
// if your_side = side then
59334: LD_OWVAR 2
59338: PUSH
59339: LD_VAR 0 6
59343: EQUAL
59344: IFFALSE 59363
// PlaySoundXY ( x , y , PlantMine ) ;
59346: LD_VAR 0 2
59350: PPUSH
59351: LD_VAR 0 3
59355: PPUSH
59356: LD_STRING PlantMine
59358: PPUSH
59359: CALL_OW 366
// repeat wait ( 1 ) ;
59363: LD_INT 1
59365: PPUSH
59366: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
59370: LD_VAR 0 2
59374: PPUSH
59375: LD_VAR 0 3
59379: PPUSH
59380: LD_VAR 0 6
59384: PPUSH
59385: LD_INT 0
59387: PPUSH
59388: CALL_OW 454
59392: IFFALSE 59363
// if MineAtPos ( x , y ) then
59394: LD_VAR 0 2
59398: PPUSH
59399: LD_VAR 0 3
59403: PPUSH
59404: CALL_OW 458
59408: IFFALSE 59524
// begin for i in minerMinesList [ index ] do
59410: LD_ADDR_VAR 0 7
59414: PUSH
59415: LD_EXP 58
59419: PUSH
59420: LD_VAR 0 5
59424: ARRAY
59425: PUSH
59426: FOR_IN
59427: IFFALSE 59469
// if i [ 1 ] = x and i [ 2 ] = y then
59429: LD_VAR 0 7
59433: PUSH
59434: LD_INT 1
59436: ARRAY
59437: PUSH
59438: LD_VAR 0 2
59442: EQUAL
59443: IFFALSE 59461
59445: PUSH
59446: LD_VAR 0 7
59450: PUSH
59451: LD_INT 2
59453: ARRAY
59454: PUSH
59455: LD_VAR 0 3
59459: EQUAL
59460: AND
59461: IFFALSE 59467
// exit ;
59463: POP
59464: POP
59465: GO 59532
59467: GO 59426
59469: POP
59470: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
59471: LD_ADDR_EXP 58
59475: PUSH
59476: LD_EXP 58
59480: PPUSH
59481: LD_VAR 0 5
59485: PUSH
59486: LD_EXP 58
59490: PUSH
59491: LD_VAR 0 5
59495: ARRAY
59496: PUSH
59497: LD_INT 1
59499: PLUS
59500: PUSH
59501: EMPTY
59502: LIST
59503: LIST
59504: PPUSH
59505: LD_VAR 0 2
59509: PUSH
59510: LD_VAR 0 3
59514: PUSH
59515: EMPTY
59516: LIST
59517: LIST
59518: PPUSH
59519: CALL 16410 0 3
59523: ST_TO_ADDR
// end ; result := true ;
59524: LD_ADDR_VAR 0 4
59528: PUSH
59529: LD_INT 1
59531: ST_TO_ADDR
// end ;
59532: LD_VAR 0 4
59536: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
59537: LD_INT 0
59539: PPUSH
59540: PPUSH
59541: PPUSH
// if not unit in minersList then
59542: LD_VAR 0 1
59546: PUSH
59547: LD_EXP 57
59551: IN
59552: NOT
59553: IFFALSE 59557
// exit ;
59555: GO 59764
// index := GetElementIndex ( minersList , unit ) ;
59557: LD_ADDR_VAR 0 6
59561: PUSH
59562: LD_EXP 57
59566: PPUSH
59567: LD_VAR 0 1
59571: PPUSH
59572: CALL 16193 0 2
59576: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
59577: LD_ADDR_VAR 0 5
59581: PUSH
59582: DOUBLE
59583: LD_EXP 58
59587: PUSH
59588: LD_VAR 0 6
59592: ARRAY
59593: INC
59594: ST_TO_ADDR
59595: LD_INT 1
59597: PUSH
59598: FOR_DOWNTO
59599: IFFALSE 59762
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
59601: LD_EXP 58
59605: PUSH
59606: LD_VAR 0 6
59610: ARRAY
59611: PUSH
59612: LD_VAR 0 5
59616: ARRAY
59617: PUSH
59618: LD_INT 1
59620: ARRAY
59621: PPUSH
59622: LD_EXP 58
59626: PUSH
59627: LD_VAR 0 6
59631: ARRAY
59632: PUSH
59633: LD_VAR 0 5
59637: ARRAY
59638: PUSH
59639: LD_INT 2
59641: ARRAY
59642: PPUSH
59643: LD_VAR 0 2
59647: PPUSH
59648: LD_VAR 0 3
59652: PPUSH
59653: CALL_OW 298
59657: PUSH
59658: LD_INT 6
59660: LESS
59661: IFFALSE 59760
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
59663: LD_EXP 58
59667: PUSH
59668: LD_VAR 0 6
59672: ARRAY
59673: PUSH
59674: LD_VAR 0 5
59678: ARRAY
59679: PUSH
59680: LD_INT 1
59682: ARRAY
59683: PPUSH
59684: LD_EXP 58
59688: PUSH
59689: LD_VAR 0 6
59693: ARRAY
59694: PUSH
59695: LD_VAR 0 5
59699: ARRAY
59700: PUSH
59701: LD_INT 2
59703: ARRAY
59704: PPUSH
59705: LD_VAR 0 1
59709: PPUSH
59710: CALL_OW 255
59714: PPUSH
59715: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
59719: LD_ADDR_EXP 58
59723: PUSH
59724: LD_EXP 58
59728: PPUSH
59729: LD_VAR 0 6
59733: PPUSH
59734: LD_EXP 58
59738: PUSH
59739: LD_VAR 0 6
59743: ARRAY
59744: PPUSH
59745: LD_VAR 0 5
59749: PPUSH
59750: CALL_OW 3
59754: PPUSH
59755: CALL_OW 1
59759: ST_TO_ADDR
// end ; end ;
59760: GO 59598
59762: POP
59763: POP
// end ;
59764: LD_VAR 0 4
59768: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
59769: LD_INT 0
59771: PPUSH
59772: PPUSH
59773: PPUSH
59774: PPUSH
59775: PPUSH
59776: PPUSH
59777: PPUSH
59778: PPUSH
59779: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
59780: LD_VAR 0 1
59784: PPUSH
59785: CALL_OW 264
59789: PUSH
59790: LD_INT 81
59792: EQUAL
59793: NOT
59794: IFTRUE 59809
59796: PUSH
59797: LD_VAR 0 1
59801: PUSH
59802: LD_EXP 57
59806: IN
59807: NOT
59808: OR
59809: IFFALSE 59813
// exit ;
59811: GO 60139
// index := GetElementIndex ( minersList , unit ) ;
59813: LD_ADDR_VAR 0 6
59817: PUSH
59818: LD_EXP 57
59822: PPUSH
59823: LD_VAR 0 1
59827: PPUSH
59828: CALL 16193 0 2
59832: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
59833: LD_ADDR_VAR 0 8
59837: PUSH
59838: LD_EXP 59
59842: PUSH
59843: LD_EXP 58
59847: PUSH
59848: LD_VAR 0 6
59852: ARRAY
59853: MINUS
59854: ST_TO_ADDR
// if not minesFreeAmount then
59855: LD_VAR 0 8
59859: NOT
59860: IFFALSE 59864
// exit ;
59862: GO 60139
// tmp := [ ] ;
59864: LD_ADDR_VAR 0 7
59868: PUSH
59869: EMPTY
59870: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
59871: LD_ADDR_VAR 0 5
59875: PUSH
59876: DOUBLE
59877: LD_INT 1
59879: DEC
59880: ST_TO_ADDR
59881: LD_VAR 0 8
59885: PUSH
59886: FOR_TO
59887: IFFALSE 60086
// begin _d := rand ( 0 , 5 ) ;
59889: LD_ADDR_VAR 0 11
59893: PUSH
59894: LD_INT 0
59896: PPUSH
59897: LD_INT 5
59899: PPUSH
59900: CALL_OW 12
59904: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
59905: LD_ADDR_VAR 0 12
59909: PUSH
59910: LD_INT 2
59912: PPUSH
59913: LD_INT 6
59915: PPUSH
59916: CALL_OW 12
59920: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
59921: LD_ADDR_VAR 0 9
59925: PUSH
59926: LD_VAR 0 2
59930: PPUSH
59931: LD_VAR 0 11
59935: PPUSH
59936: LD_VAR 0 12
59940: PPUSH
59941: CALL_OW 272
59945: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
59946: LD_ADDR_VAR 0 10
59950: PUSH
59951: LD_VAR 0 3
59955: PPUSH
59956: LD_VAR 0 11
59960: PPUSH
59961: LD_VAR 0 12
59965: PPUSH
59966: CALL_OW 273
59970: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
59971: LD_VAR 0 9
59975: PPUSH
59976: LD_VAR 0 10
59980: PPUSH
59981: CALL_OW 488
59985: IFFALSE 60009
59987: PUSH
59988: LD_VAR 0 9
59992: PUSH
59993: LD_VAR 0 10
59997: PUSH
59998: EMPTY
59999: LIST
60000: LIST
60001: PUSH
60002: LD_VAR 0 7
60006: IN
60007: NOT
60008: AND
60009: IFFALSE 60028
60011: PUSH
60012: LD_VAR 0 9
60016: PPUSH
60017: LD_VAR 0 10
60021: PPUSH
60022: CALL_OW 458
60026: NOT
60027: AND
60028: IFFALSE 60070
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
60030: LD_ADDR_VAR 0 7
60034: PUSH
60035: LD_VAR 0 7
60039: PPUSH
60040: LD_VAR 0 7
60044: PUSH
60045: LD_INT 1
60047: PLUS
60048: PPUSH
60049: LD_VAR 0 9
60053: PUSH
60054: LD_VAR 0 10
60058: PUSH
60059: EMPTY
60060: LIST
60061: LIST
60062: PPUSH
60063: CALL_OW 1
60067: ST_TO_ADDR
60068: GO 60084
// i := i - 1 ;
60070: LD_ADDR_VAR 0 5
60074: PUSH
60075: LD_VAR 0 5
60079: PUSH
60080: LD_INT 1
60082: MINUS
60083: ST_TO_ADDR
// end ;
60084: GO 59886
60086: POP
60087: POP
// for i in tmp do
60088: LD_ADDR_VAR 0 5
60092: PUSH
60093: LD_VAR 0 7
60097: PUSH
60098: FOR_IN
60099: IFFALSE 60137
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
60101: LD_VAR 0 1
60105: PPUSH
60106: LD_VAR 0 5
60110: PUSH
60111: LD_INT 1
60113: ARRAY
60114: PPUSH
60115: LD_VAR 0 5
60119: PUSH
60120: LD_INT 2
60122: ARRAY
60123: PPUSH
60124: CALL 59130 0 3
60128: NOT
60129: IFFALSE 60135
// exit ;
60131: POP
60132: POP
60133: GO 60139
60135: GO 60098
60137: POP
60138: POP
// end ;
60139: LD_VAR 0 4
60143: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
60144: LD_INT 0
60146: PPUSH
60147: PPUSH
60148: PPUSH
60149: PPUSH
60150: PPUSH
60151: PPUSH
60152: PPUSH
60153: PPUSH
60154: PPUSH
// if GetClass ( unit ) <> class_sniper then
60155: LD_VAR 0 1
60159: PPUSH
60160: CALL_OW 257
60164: PUSH
60165: LD_INT 5
60167: NONEQUAL
60168: IFFALSE 60172
// exit ;
60170: GO 60642
// dist := 8 ;
60172: LD_ADDR_VAR 0 5
60176: PUSH
60177: LD_INT 8
60179: ST_TO_ADDR
// viewRange := 12 ;
60180: LD_ADDR_VAR 0 8
60184: PUSH
60185: LD_INT 12
60187: ST_TO_ADDR
// side := GetSide ( unit ) ;
60188: LD_ADDR_VAR 0 6
60192: PUSH
60193: LD_VAR 0 1
60197: PPUSH
60198: CALL_OW 255
60202: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
60203: LD_INT 61
60205: PPUSH
60206: LD_VAR 0 6
60210: PPUSH
60211: CALL_OW 321
60215: PUSH
60216: LD_INT 2
60218: EQUAL
60219: IFFALSE 60229
// viewRange := 16 ;
60221: LD_ADDR_VAR 0 8
60225: PUSH
60226: LD_INT 16
60228: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
60229: LD_VAR 0 1
60233: PPUSH
60234: LD_VAR 0 2
60238: PPUSH
60239: LD_VAR 0 3
60243: PPUSH
60244: CALL_OW 297
60248: PUSH
60249: LD_VAR 0 5
60253: GREATER
60254: IFFALSE 60333
// begin ComMoveXY ( unit , x , y ) ;
60256: LD_VAR 0 1
60260: PPUSH
60261: LD_VAR 0 2
60265: PPUSH
60266: LD_VAR 0 3
60270: PPUSH
60271: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
60275: LD_INT 35
60277: PPUSH
60278: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
60282: LD_VAR 0 1
60286: PPUSH
60287: LD_VAR 0 2
60291: PPUSH
60292: LD_VAR 0 3
60296: PPUSH
60297: CALL 48249 0 3
60301: NOT
60302: IFFALSE 60306
// exit ;
60304: GO 60642
// until GetDistUnitXY ( unit , x , y ) < dist ;
60306: LD_VAR 0 1
60310: PPUSH
60311: LD_VAR 0 2
60315: PPUSH
60316: LD_VAR 0 3
60320: PPUSH
60321: CALL_OW 297
60325: PUSH
60326: LD_VAR 0 5
60330: LESS
60331: IFFALSE 60275
// end ; ComTurnXY ( unit , x , y ) ;
60333: LD_VAR 0 1
60337: PPUSH
60338: LD_VAR 0 2
60342: PPUSH
60343: LD_VAR 0 3
60347: PPUSH
60348: CALL_OW 118
// repeat if Multiplayer then
60352: LD_OWVAR 4
60356: IFFALSE 60367
// wait ( 35 ) else
60358: LD_INT 35
60360: PPUSH
60361: CALL_OW 67
60365: GO 60374
// wait ( 5 ) ;
60367: LD_INT 5
60369: PPUSH
60370: CALL_OW 67
// _d := GetDir ( unit ) ;
60374: LD_ADDR_VAR 0 11
60378: PUSH
60379: LD_VAR 0 1
60383: PPUSH
60384: CALL_OW 254
60388: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
60389: LD_ADDR_VAR 0 7
60393: PUSH
60394: LD_VAR 0 1
60398: PPUSH
60399: CALL_OW 250
60403: PPUSH
60404: LD_VAR 0 1
60408: PPUSH
60409: CALL_OW 251
60413: PPUSH
60414: LD_VAR 0 2
60418: PPUSH
60419: LD_VAR 0 3
60423: PPUSH
60424: CALL 50885 0 4
60428: ST_TO_ADDR
// until dir = _d ;
60429: LD_VAR 0 7
60433: PUSH
60434: LD_VAR 0 11
60438: EQUAL
60439: IFFALSE 60352
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
60441: LD_ADDR_VAR 0 9
60445: PUSH
60446: LD_VAR 0 1
60450: PPUSH
60451: CALL_OW 250
60455: PPUSH
60456: LD_VAR 0 7
60460: PPUSH
60461: LD_VAR 0 5
60465: PPUSH
60466: CALL_OW 272
60470: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
60471: LD_ADDR_VAR 0 10
60475: PUSH
60476: LD_VAR 0 1
60480: PPUSH
60481: CALL_OW 251
60485: PPUSH
60486: LD_VAR 0 7
60490: PPUSH
60491: LD_VAR 0 5
60495: PPUSH
60496: CALL_OW 273
60500: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
60501: LD_VAR 0 9
60505: PPUSH
60506: LD_VAR 0 10
60510: PPUSH
60511: CALL_OW 488
60515: NOT
60516: IFFALSE 60520
// exit ;
60518: GO 60642
// ComAnimCustom ( unit , 1 ) ;
60520: LD_VAR 0 1
60524: PPUSH
60525: LD_INT 1
60527: PPUSH
60528: CALL_OW 592
// p := 0 ;
60532: LD_ADDR_VAR 0 12
60536: PUSH
60537: LD_INT 0
60539: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
60540: LD_VAR 0 9
60544: PPUSH
60545: LD_VAR 0 10
60549: PPUSH
60550: LD_VAR 0 6
60554: PPUSH
60555: LD_VAR 0 8
60559: PPUSH
60560: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
60564: LD_INT 35
60566: PPUSH
60567: CALL_OW 67
// p := Inc ( p ) ;
60571: LD_ADDR_VAR 0 12
60575: PUSH
60576: LD_VAR 0 12
60580: PPUSH
60581: CALL 50841 0 1
60585: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
60586: LD_VAR 0 12
60590: PUSH
60591: LD_INT 3
60593: EQUAL
60594: IFTRUE 60608
60596: PUSH
60597: LD_VAR 0 1
60601: PPUSH
60602: CALL_OW 302
60606: NOT
60607: OR
60608: IFTRUE 60621
60610: PUSH
60611: LD_VAR 0 1
60615: PPUSH
60616: CALL_OW 301
60620: OR
60621: IFFALSE 60564
// RemoveSeeing ( _x , _y , side ) ;
60623: LD_VAR 0 9
60627: PPUSH
60628: LD_VAR 0 10
60632: PPUSH
60633: LD_VAR 0 6
60637: PPUSH
60638: CALL_OW 331
// end ;
60642: LD_VAR 0 4
60646: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
60647: LD_INT 0
60649: PPUSH
60650: PPUSH
60651: PPUSH
60652: PPUSH
60653: PPUSH
60654: PPUSH
60655: PPUSH
60656: PPUSH
60657: PPUSH
60658: PPUSH
60659: PPUSH
// if not unit then
60660: LD_VAR 0 1
60664: NOT
60665: IFFALSE 60669
// exit ;
60667: GO 60940
// side := GetSide ( unit ) ;
60669: LD_ADDR_VAR 0 3
60673: PUSH
60674: LD_VAR 0 1
60678: PPUSH
60679: CALL_OW 255
60683: ST_TO_ADDR
// x := GetX ( unit ) ;
60684: LD_ADDR_VAR 0 5
60688: PUSH
60689: LD_VAR 0 1
60693: PPUSH
60694: CALL_OW 250
60698: ST_TO_ADDR
// y := GetY ( unit ) ;
60699: LD_ADDR_VAR 0 6
60703: PUSH
60704: LD_VAR 0 1
60708: PPUSH
60709: CALL_OW 251
60713: ST_TO_ADDR
// r := 8 ;
60714: LD_ADDR_VAR 0 4
60718: PUSH
60719: LD_INT 8
60721: ST_TO_ADDR
// if x - r < 0 then
60722: LD_VAR 0 5
60726: PUSH
60727: LD_VAR 0 4
60731: MINUS
60732: PUSH
60733: LD_INT 0
60735: LESS
60736: IFFALSE 60748
// min_x := 0 else
60738: LD_ADDR_VAR 0 7
60742: PUSH
60743: LD_INT 0
60745: ST_TO_ADDR
60746: GO 60764
// min_x := x - r ;
60748: LD_ADDR_VAR 0 7
60752: PUSH
60753: LD_VAR 0 5
60757: PUSH
60758: LD_VAR 0 4
60762: MINUS
60763: ST_TO_ADDR
// if y - r < 0 then
60764: LD_VAR 0 6
60768: PUSH
60769: LD_VAR 0 4
60773: MINUS
60774: PUSH
60775: LD_INT 0
60777: LESS
60778: IFFALSE 60790
// min_y := 0 else
60780: LD_ADDR_VAR 0 8
60784: PUSH
60785: LD_INT 0
60787: ST_TO_ADDR
60788: GO 60806
// min_y := y - r ;
60790: LD_ADDR_VAR 0 8
60794: PUSH
60795: LD_VAR 0 6
60799: PUSH
60800: LD_VAR 0 4
60804: MINUS
60805: ST_TO_ADDR
// max_x := x + r ;
60806: LD_ADDR_VAR 0 9
60810: PUSH
60811: LD_VAR 0 5
60815: PUSH
60816: LD_VAR 0 4
60820: PLUS
60821: ST_TO_ADDR
// max_y := y + r ;
60822: LD_ADDR_VAR 0 10
60826: PUSH
60827: LD_VAR 0 6
60831: PUSH
60832: LD_VAR 0 4
60836: PLUS
60837: ST_TO_ADDR
// for _x = min_x to max_x do
60838: LD_ADDR_VAR 0 11
60842: PUSH
60843: DOUBLE
60844: LD_VAR 0 7
60848: DEC
60849: ST_TO_ADDR
60850: LD_VAR 0 9
60854: PUSH
60855: FOR_TO
60856: IFFALSE 60938
// for _y = min_y to max_y do
60858: LD_ADDR_VAR 0 12
60862: PUSH
60863: DOUBLE
60864: LD_VAR 0 8
60868: DEC
60869: ST_TO_ADDR
60870: LD_VAR 0 10
60874: PUSH
60875: FOR_TO
60876: IFFALSE 60934
// begin if not ValidHex ( _x , _y ) then
60878: LD_VAR 0 11
60882: PPUSH
60883: LD_VAR 0 12
60887: PPUSH
60888: CALL_OW 488
60892: NOT
60893: IFFALSE 60897
// continue ;
60895: GO 60875
// if MineAtPos ( _x , _y ) then
60897: LD_VAR 0 11
60901: PPUSH
60902: LD_VAR 0 12
60906: PPUSH
60907: CALL_OW 458
60911: IFFALSE 60932
// ViewMineAtPos ( _x , _y , side ) ;
60913: LD_VAR 0 11
60917: PPUSH
60918: LD_VAR 0 12
60922: PPUSH
60923: LD_VAR 0 3
60927: PPUSH
60928: CALL_OW 457
// end ;
60932: GO 60875
60934: POP
60935: POP
60936: GO 60855
60938: POP
60939: POP
// end ;
60940: LD_VAR 0 2
60944: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
60945: LD_INT 0
60947: PPUSH
60948: PPUSH
60949: PPUSH
60950: PPUSH
60951: PPUSH
60952: PPUSH
60953: PPUSH
// if not units then
60954: LD_VAR 0 1
60958: NOT
60959: IFFALSE 60963
// exit ;
60961: GO 61427
// scaners := [ ] ;
60963: LD_ADDR_VAR 0 6
60967: PUSH
60968: EMPTY
60969: ST_TO_ADDR
// for i in units do
60970: LD_ADDR_VAR 0 3
60974: PUSH
60975: LD_VAR 0 1
60979: PUSH
60980: FOR_IN
60981: IFFALSE 61138
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
60983: LD_VAR 0 3
60987: PPUSH
60988: CALL_OW 264
60992: PUSH
60993: LD_INT 11
60995: NONEQUAL
60996: IFTRUE 61010
60998: PUSH
60999: LD_VAR 0 3
61003: PPUSH
61004: CALL_OW 302
61008: NOT
61009: OR
61010: IFTRUE 61027
61012: PUSH
61013: LD_VAR 0 3
61017: PPUSH
61018: CALL_OW 110
61022: PUSH
61023: LD_INT 502
61025: EQUAL
61026: OR
61027: IFFALSE 61031
// continue ;
61029: GO 60980
// ComStop ( i ) ;
61031: LD_VAR 0 3
61035: PPUSH
61036: CALL_OW 141
// x := GetX ( i ) ;
61040: LD_ADDR_VAR 0 4
61044: PUSH
61045: LD_VAR 0 3
61049: PPUSH
61050: CALL_OW 250
61054: ST_TO_ADDR
// y := GetY ( i ) ;
61055: LD_ADDR_VAR 0 5
61059: PUSH
61060: LD_VAR 0 3
61064: PPUSH
61065: CALL_OW 251
61069: ST_TO_ADDR
// if GetSide ( i ) = your_side then
61070: LD_VAR 0 3
61074: PPUSH
61075: CALL_OW 255
61079: PUSH
61080: LD_OWVAR 2
61084: EQUAL
61085: IFFALSE 61104
// PlaySoundXY ( x , y , mineDetector ) ;
61087: LD_VAR 0 4
61091: PPUSH
61092: LD_VAR 0 5
61096: PPUSH
61097: LD_STRING mineDetector
61099: PPUSH
61100: CALL_OW 366
// scaners := Join ( scaners , i ) ;
61104: LD_ADDR_VAR 0 6
61108: PUSH
61109: LD_VAR 0 6
61113: PPUSH
61114: LD_VAR 0 3
61118: PPUSH
61119: CALL 49468 0 2
61123: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
61124: LD_VAR 0 3
61128: PPUSH
61129: LD_INT 502
61131: PPUSH
61132: CALL_OW 109
// end ;
61136: GO 60980
61138: POP
61139: POP
// if not scaners then
61140: LD_VAR 0 6
61144: NOT
61145: IFFALSE 61149
// exit ;
61147: GO 61427
// wait ( 3 ) ;
61149: LD_INT 3
61151: PPUSH
61152: CALL_OW 67
// timer := 6 ;
61156: LD_ADDR_VAR 0 7
61160: PUSH
61161: LD_INT 6
61163: ST_TO_ADDR
// repeat for i in scaners do
61164: LD_ADDR_VAR 0 3
61168: PUSH
61169: LD_VAR 0 6
61173: PUSH
61174: FOR_IN
61175: IFFALSE 61325
// begin side := GetSide ( i ) ;
61177: LD_ADDR_VAR 0 8
61181: PUSH
61182: LD_VAR 0 3
61186: PPUSH
61187: CALL_OW 255
61191: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
61192: LD_VAR 0 3
61196: PPUSH
61197: CALL_OW 302
61201: NOT
61202: IFTRUE 61215
61204: PUSH
61205: LD_VAR 0 3
61209: PPUSH
61210: CALL_OW 314
61214: OR
61215: IFTRUE 61246
61217: PUSH
61218: LD_VAR 0 3
61222: PPUSH
61223: CALL_OW 263
61227: PUSH
61228: LD_INT 1
61230: EQUAL
61231: IFFALSE 61245
61233: PUSH
61234: LD_VAR 0 3
61238: PPUSH
61239: CALL_OW 311
61243: NOT
61244: AND
61245: OR
61246: IFFALSE 61290
// begin SetUnitDisplayNumber ( i , 0 ) ;
61248: LD_VAR 0 3
61252: PPUSH
61253: LD_INT 0
61255: PPUSH
61256: CALL_OW 505
// SetTag ( i , 0 ) ;
61260: LD_VAR 0 3
61264: PPUSH
61265: LD_INT 0
61267: PPUSH
61268: CALL_OW 109
// scaners := scaners diff i ;
61272: LD_ADDR_VAR 0 6
61276: PUSH
61277: LD_VAR 0 6
61281: PUSH
61282: LD_VAR 0 3
61286: DIFF
61287: ST_TO_ADDR
// continue ;
61288: GO 61174
// end ; if side in [ your_side , 9 ] then
61290: LD_VAR 0 8
61294: PUSH
61295: LD_OWVAR 2
61299: PUSH
61300: LD_INT 9
61302: PUSH
61303: EMPTY
61304: LIST
61305: LIST
61306: IN
61307: IFFALSE 61323
// SetUnitDisplayNumber ( i , timer ) ;
61309: LD_VAR 0 3
61313: PPUSH
61314: LD_VAR 0 7
61318: PPUSH
61319: CALL_OW 505
// end ;
61323: GO 61174
61325: POP
61326: POP
// if not scaners then
61327: LD_VAR 0 6
61331: NOT
61332: IFFALSE 61336
// exit ;
61334: GO 61427
// timer := Dec ( timer ) ;
61336: LD_ADDR_VAR 0 7
61340: PUSH
61341: LD_VAR 0 7
61345: PPUSH
61346: CALL 50863 0 1
61350: ST_TO_ADDR
// wait ( 0 0$1 ) ;
61351: LD_INT 35
61353: PPUSH
61354: CALL_OW 67
// until timer = 0 ;
61358: LD_VAR 0 7
61362: PUSH
61363: LD_INT 0
61365: EQUAL
61366: IFFALSE 61164
// if not scaners then
61368: LD_VAR 0 6
61372: NOT
61373: IFFALSE 61377
// exit ;
61375: GO 61427
// for i in scaners do
61377: LD_ADDR_VAR 0 3
61381: PUSH
61382: LD_VAR 0 6
61386: PUSH
61387: FOR_IN
61388: IFFALSE 61425
// begin SetUnitDisplayNumber ( i , 0 ) ;
61390: LD_VAR 0 3
61394: PPUSH
61395: LD_INT 0
61397: PPUSH
61398: CALL_OW 505
// SetTag ( i , 0 ) ;
61402: LD_VAR 0 3
61406: PPUSH
61407: LD_INT 0
61409: PPUSH
61410: CALL_OW 109
// RevealDetectorMine ( i ) ;
61414: LD_VAR 0 3
61418: PPUSH
61419: CALL 60647 0 1
// end ;
61423: GO 61387
61425: POP
61426: POP
// end ;
61427: LD_VAR 0 2
61431: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
61432: LD_INT 0
61434: PPUSH
// if p1 = mine_detector_mode then
61435: LD_VAR 0 2
61439: PUSH
61440: LD_INT 103
61442: EQUAL
61443: IFFALSE 61454
// DetectMine ( units ) ;
61445: LD_VAR 0 1
61449: PPUSH
61450: CALL 60945 0 1
// end ; end_of_file
61454: LD_VAR 0 7
61458: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
61459: LD_EXP 39
61463: IFFALSE 61804
61465: GO 61467
61467: DISABLE
61468: LD_INT 0
61470: PPUSH
61471: PPUSH
61472: PPUSH
// begin mpKingPoints := [ ] ;
61473: LD_ADDR_EXP 60
61477: PUSH
61478: EMPTY
61479: ST_TO_ADDR
// if mpTeamGame then
61480: LD_EXP 11
61484: IFFALSE 61538
// begin for i := 1 to Count ( mpTeams ) do
61486: LD_ADDR_VAR 0 1
61490: PUSH
61491: DOUBLE
61492: LD_INT 1
61494: DEC
61495: ST_TO_ADDR
61496: LD_EXP 10
61500: PPUSH
61501: CALL 13492 0 1
61505: PUSH
61506: FOR_TO
61507: IFFALSE 61534
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
61509: LD_ADDR_EXP 60
61513: PUSH
61514: LD_EXP 60
61518: PPUSH
61519: LD_VAR 0 1
61523: PPUSH
61524: LD_INT 0
61526: PPUSH
61527: CALL_OW 1
61531: ST_TO_ADDR
61532: GO 61506
61534: POP
61535: POP
// end else
61536: GO 61581
// begin for i := 1 to 8 do
61538: LD_ADDR_VAR 0 1
61542: PUSH
61543: DOUBLE
61544: LD_INT 1
61546: DEC
61547: ST_TO_ADDR
61548: LD_INT 8
61550: PUSH
61551: FOR_TO
61552: IFFALSE 61579
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
61554: LD_ADDR_EXP 60
61558: PUSH
61559: LD_EXP 60
61563: PPUSH
61564: LD_VAR 0 1
61568: PPUSH
61569: LD_INT 0
61571: PPUSH
61572: CALL_OW 1
61576: ST_TO_ADDR
61577: GO 61551
61579: POP
61580: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
61581: LD_ADDR_VAR 0 3
61585: PUSH
61586: LD_EXP 2
61590: PPUSH
61591: LD_INT 0
61593: PPUSH
61594: CALL_OW 517
61598: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
61599: LD_ADDR_VAR 0 1
61603: PUSH
61604: DOUBLE
61605: LD_INT 1
61607: DEC
61608: ST_TO_ADDR
61609: LD_VAR 0 3
61613: PUSH
61614: LD_INT 1
61616: ARRAY
61617: PUSH
61618: FOR_TO
61619: IFFALSE 61686
// for j := 1 to 8 do
61621: LD_ADDR_VAR 0 2
61625: PUSH
61626: DOUBLE
61627: LD_INT 1
61629: DEC
61630: ST_TO_ADDR
61631: LD_INT 8
61633: PUSH
61634: FOR_TO
61635: IFFALSE 61682
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
61637: LD_VAR 0 3
61641: PUSH
61642: LD_INT 1
61644: ARRAY
61645: PUSH
61646: LD_VAR 0 1
61650: ARRAY
61651: PPUSH
61652: LD_VAR 0 3
61656: PUSH
61657: LD_INT 2
61659: ARRAY
61660: PUSH
61661: LD_VAR 0 1
61665: ARRAY
61666: PPUSH
61667: LD_VAR 0 2
61671: PPUSH
61672: LD_INT 12
61674: NEG
61675: PPUSH
61676: CALL_OW 330
61680: GO 61634
61682: POP
61683: POP
61684: GO 61618
61686: POP
61687: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
61688: LD_EXP 34
61692: PPUSH
61693: LD_INT 1
61695: PPUSH
61696: CALL_OW 424
// UpdateCounter ;
61700: CALL 62310 0 0
// repeat wait ( 0 0$1 ) ;
61704: LD_INT 35
61706: PPUSH
61707: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
61711: LD_ADDR_VAR 0 3
61715: PUSH
61716: LD_EXP 34
61720: PPUSH
61721: LD_INT 3
61723: PUSH
61724: LD_INT 57
61726: PUSH
61727: EMPTY
61728: LIST
61729: PUSH
61730: EMPTY
61731: LIST
61732: LIST
61733: PUSH
61734: LD_INT 50
61736: PUSH
61737: EMPTY
61738: LIST
61739: PUSH
61740: LD_INT 2
61742: PUSH
61743: LD_INT 30
61745: PUSH
61746: LD_INT 0
61748: PUSH
61749: EMPTY
61750: LIST
61751: LIST
61752: PUSH
61753: LD_INT 30
61755: PUSH
61756: LD_INT 1
61758: PUSH
61759: EMPTY
61760: LIST
61761: LIST
61762: PUSH
61763: EMPTY
61764: LIST
61765: LIST
61766: LIST
61767: PUSH
61768: EMPTY
61769: LIST
61770: LIST
61771: LIST
61772: PPUSH
61773: CALL_OW 70
61777: ST_TO_ADDR
// if not tmp then
61778: LD_VAR 0 3
61782: NOT
61783: IFFALSE 61787
// continue ;
61785: GO 61704
// AddPoints ( tmp ) ;
61787: LD_VAR 0 3
61791: PPUSH
61792: CALL 61988 0 1
// UpdateCounter ;
61796: CALL 62310 0 0
// until false ;
61800: LD_INT 0
61802: IFFALSE 61704
// end ;
61804: PPOPN 3
61806: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
61807: LD_EXP 39
61811: IFFALSE 61819
61813: PUSH
61814: LD_EXP 37
61818: AND
61819: IFFALSE 61985
61821: GO 61823
61823: DISABLE
61824: LD_INT 0
61826: PPUSH
61827: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
61828: LD_ADDR_VAR 0 2
61832: PUSH
61833: LD_EXP 2
61837: PPUSH
61838: LD_INT 0
61840: PPUSH
61841: CALL_OW 517
61845: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
61846: LD_ADDR_VAR 0 1
61850: PUSH
61851: DOUBLE
61852: LD_INT 1
61854: DEC
61855: ST_TO_ADDR
61856: LD_VAR 0 2
61860: PUSH
61861: LD_INT 1
61863: ARRAY
61864: PUSH
61865: FOR_TO
61866: IFFALSE 61907
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
61868: LD_VAR 0 2
61872: PUSH
61873: LD_INT 1
61875: ARRAY
61876: PUSH
61877: LD_VAR 0 1
61881: ARRAY
61882: PPUSH
61883: LD_VAR 0 2
61887: PUSH
61888: LD_INT 2
61890: ARRAY
61891: PUSH
61892: LD_VAR 0 1
61896: ARRAY
61897: PPUSH
61898: LD_INT 125
61900: PPUSH
61901: CALL_OW 495
61905: GO 61865
61907: POP
61908: POP
// repeat wait ( mpEmissions ) ;
61909: LD_EXP 37
61913: PPUSH
61914: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
61918: LD_ADDR_VAR 0 1
61922: PUSH
61923: DOUBLE
61924: LD_INT 1
61926: DEC
61927: ST_TO_ADDR
61928: LD_VAR 0 2
61932: PUSH
61933: LD_INT 1
61935: ARRAY
61936: PUSH
61937: FOR_TO
61938: IFFALSE 61979
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
61940: LD_VAR 0 2
61944: PUSH
61945: LD_INT 1
61947: ARRAY
61948: PUSH
61949: LD_VAR 0 1
61953: ARRAY
61954: PPUSH
61955: LD_VAR 0 2
61959: PUSH
61960: LD_INT 2
61962: ARRAY
61963: PUSH
61964: LD_VAR 0 1
61968: ARRAY
61969: PPUSH
61970: LD_INT 15
61972: PPUSH
61973: CALL_OW 495
61977: GO 61937
61979: POP
61980: POP
// until false ;
61981: LD_INT 0
61983: IFFALSE 61909
// end ;
61985: PPOPN 2
61987: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
61988: LD_INT 0
61990: PPUSH
61991: PPUSH
61992: PPUSH
61993: PPUSH
61994: PPUSH
// if mpTeamGame then
61995: LD_EXP 11
61999: IFFALSE 62196
// begin first := depots [ 1 ] ;
62001: LD_ADDR_VAR 0 4
62005: PUSH
62006: LD_VAR 0 1
62010: PUSH
62011: LD_INT 1
62013: ARRAY
62014: ST_TO_ADDR
// side := GetSide ( first ) ;
62015: LD_ADDR_VAR 0 6
62019: PUSH
62020: LD_VAR 0 4
62024: PPUSH
62025: CALL_OW 255
62029: ST_TO_ADDR
// for i := 1 to mpTeams do
62030: LD_ADDR_VAR 0 3
62034: PUSH
62035: DOUBLE
62036: LD_INT 1
62038: DEC
62039: ST_TO_ADDR
62040: LD_EXP 10
62044: PUSH
62045: FOR_TO
62046: IFFALSE 62080
// if side in mpTeams [ i ] then
62048: LD_VAR 0 6
62052: PUSH
62053: LD_EXP 10
62057: PUSH
62058: LD_VAR 0 3
62062: ARRAY
62063: IN
62064: IFFALSE 62078
// begin team := i ;
62066: LD_ADDR_VAR 0 5
62070: PUSH
62071: LD_VAR 0 3
62075: ST_TO_ADDR
// break ;
62076: GO 62080
// end ;
62078: GO 62045
62080: POP
62081: POP
// if not team then
62082: LD_VAR 0 5
62086: NOT
62087: IFFALSE 62091
// exit ;
62089: GO 62305
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
62091: LD_EXP 34
62095: PPUSH
62096: LD_INT 81
62098: PUSH
62099: LD_VAR 0 6
62103: PUSH
62104: EMPTY
62105: LIST
62106: LIST
62107: PPUSH
62108: CALL_OW 70
62112: IFFALSE 62116
// exit ;
62114: GO 62305
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
62116: LD_ADDR_EXP 60
62120: PUSH
62121: LD_EXP 60
62125: PPUSH
62126: LD_VAR 0 5
62130: PPUSH
62131: LD_EXP 60
62135: PUSH
62136: LD_VAR 0 5
62140: ARRAY
62141: PUSH
62142: LD_INT 1
62144: PLUS
62145: PPUSH
62146: CALL_OW 1
62150: ST_TO_ADDR
// for i in mpTeams [ team ] do
62151: LD_ADDR_VAR 0 3
62155: PUSH
62156: LD_EXP 10
62160: PUSH
62161: LD_VAR 0 5
62165: ARRAY
62166: PUSH
62167: FOR_IN
62168: IFFALSE 62192
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
62170: LD_VAR 0 3
62174: PPUSH
62175: LD_EXP 60
62179: PUSH
62180: LD_VAR 0 5
62184: ARRAY
62185: PPUSH
62186: CALL_OW 506
62190: GO 62167
62192: POP
62193: POP
// end else
62194: GO 62305
// begin first := depots [ 1 ] ;
62196: LD_ADDR_VAR 0 4
62200: PUSH
62201: LD_VAR 0 1
62205: PUSH
62206: LD_INT 1
62208: ARRAY
62209: ST_TO_ADDR
// side := GetSide ( first ) ;
62210: LD_ADDR_VAR 0 6
62214: PUSH
62215: LD_VAR 0 4
62219: PPUSH
62220: CALL_OW 255
62224: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
62225: LD_EXP 34
62229: PPUSH
62230: LD_INT 81
62232: PUSH
62233: LD_VAR 0 6
62237: PUSH
62238: EMPTY
62239: LIST
62240: LIST
62241: PPUSH
62242: CALL_OW 70
62246: IFFALSE 62250
// exit ;
62248: GO 62305
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
62250: LD_ADDR_EXP 60
62254: PUSH
62255: LD_EXP 60
62259: PPUSH
62260: LD_VAR 0 6
62264: PPUSH
62265: LD_EXP 60
62269: PUSH
62270: LD_VAR 0 6
62274: ARRAY
62275: PUSH
62276: LD_INT 1
62278: PLUS
62279: PPUSH
62280: CALL_OW 1
62284: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
62285: LD_VAR 0 6
62289: PPUSH
62290: LD_EXP 60
62294: PUSH
62295: LD_VAR 0 6
62299: ARRAY
62300: PPUSH
62301: CALL_OW 506
// end ; end ;
62305: LD_VAR 0 2
62309: RET
// function UpdateCounter ; var i ; begin
62310: LD_INT 0
62312: PPUSH
62313: PPUSH
// result := [ ] ;
62314: LD_ADDR_VAR 0 1
62318: PUSH
62319: EMPTY
62320: ST_TO_ADDR
// if mpTeamGame then
62321: LD_EXP 11
62325: IFFALSE 62392
// begin for i := 1 to mpTeams do
62327: LD_ADDR_VAR 0 2
62331: PUSH
62332: DOUBLE
62333: LD_INT 1
62335: DEC
62336: ST_TO_ADDR
62337: LD_EXP 10
62341: PUSH
62342: FOR_TO
62343: IFFALSE 62388
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
62345: LD_ADDR_VAR 0 1
62349: PUSH
62350: LD_VAR 0 1
62354: PUSH
62355: LD_STRING #KingoftheHill-Team
62357: PUSH
62358: LD_VAR 0 2
62362: PUSH
62363: LD_EXP 60
62367: PUSH
62368: LD_VAR 0 2
62372: ARRAY
62373: PUSH
62374: LD_EXP 35
62378: PUSH
62379: EMPTY
62380: LIST
62381: LIST
62382: LIST
62383: LIST
62384: ADD
62385: ST_TO_ADDR
62386: GO 62342
62388: POP
62389: POP
// end else
62390: GO 62465
// begin for i := 1 to 8 do
62392: LD_ADDR_VAR 0 2
62396: PUSH
62397: DOUBLE
62398: LD_INT 1
62400: DEC
62401: ST_TO_ADDR
62402: LD_INT 8
62404: PUSH
62405: FOR_TO
62406: IFFALSE 62463
// if mpSidePositions [ i ] then
62408: LD_EXP 7
62412: PUSH
62413: LD_VAR 0 2
62417: ARRAY
62418: IFFALSE 62461
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
62420: LD_ADDR_VAR 0 1
62424: PUSH
62425: LD_VAR 0 1
62429: PUSH
62430: LD_STRING #KingoftheHill-Player
62432: PUSH
62433: LD_VAR 0 2
62437: PUSH
62438: LD_EXP 60
62442: PUSH
62443: LD_VAR 0 2
62447: ARRAY
62448: PUSH
62449: LD_EXP 35
62453: PUSH
62454: EMPTY
62455: LIST
62456: LIST
62457: LIST
62458: LIST
62459: ADD
62460: ST_TO_ADDR
62461: GO 62405
62463: POP
62464: POP
// end ; mpDisplayStrings := result ;
62465: LD_ADDR_EXP 38
62469: PUSH
62470: LD_VAR 0 1
62474: ST_TO_ADDR
// end ;
62475: LD_VAR 0 1
62479: RET
// export function HowMuchPointsKing ( side ) ; begin
62480: LD_INT 0
62482: PPUSH
// result := HowMuchPoints ( side ) ;
62483: LD_ADDR_VAR 0 2
62487: PUSH
62488: LD_VAR 0 1
62492: PPUSH
62493: CALL 62503 0 1
62497: ST_TO_ADDR
// end ;
62498: LD_VAR 0 2
62502: RET
// function HowMuchPoints ( side ) ; var i ; begin
62503: LD_INT 0
62505: PPUSH
62506: PPUSH
// if mpTeamGame then
62507: LD_EXP 11
62511: IFFALSE 62580
// begin for i := 1 to Count ( mpTeams ) do
62513: LD_ADDR_VAR 0 3
62517: PUSH
62518: DOUBLE
62519: LD_INT 1
62521: DEC
62522: ST_TO_ADDR
62523: LD_EXP 10
62527: PPUSH
62528: CALL 13492 0 1
62532: PUSH
62533: FOR_TO
62534: IFFALSE 62576
// begin if side in mpTeams [ i ] then
62536: LD_VAR 0 1
62540: PUSH
62541: LD_EXP 10
62545: PUSH
62546: LD_VAR 0 3
62550: ARRAY
62551: IN
62552: IFFALSE 62574
// begin result := mpKingPoints [ i ] ;
62554: LD_ADDR_VAR 0 2
62558: PUSH
62559: LD_EXP 60
62563: PUSH
62564: LD_VAR 0 3
62568: ARRAY
62569: ST_TO_ADDR
// exit ;
62570: POP
62571: POP
62572: GO 62596
// end ; end ;
62574: GO 62533
62576: POP
62577: POP
// end else
62578: GO 62596
// result := mpKingPoints [ side ] ;
62580: LD_ADDR_VAR 0 2
62584: PUSH
62585: LD_EXP 60
62589: PUSH
62590: LD_VAR 0 1
62594: ARRAY
62595: ST_TO_ADDR
// end ;
62596: LD_VAR 0 2
62600: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
62601: LD_EXP 39
62605: IFFALSE 62613
62607: PUSH
62608: CALL 63025 0 0
62612: AND
62613: IFFALSE 62621
62615: PUSH
62616: LD_OWVAR 4
62620: AND
62621: IFFALSE 62874
62623: GO 62625
62625: DISABLE
62626: LD_INT 0
62628: PPUSH
62629: PPUSH
// begin canWin := false ;
62630: LD_ADDR_VAR 0 2
62634: PUSH
62635: LD_INT 0
62637: ST_TO_ADDR
// if not HasPower ( your_side ) then
62638: LD_OWVAR 2
62642: PPUSH
62643: CALL 63067 0 1
62647: NOT
62648: IFFALSE 62659
// begin Multiplayer_Loose_Message ;
62650: CALL_OW 521
// enable ( mpLose ) ;
62654: LD_INT 102
62656: ENABLE_MARKED
// end else
62657: GO 62874
// begin if not EnemiesInGame then
62659: CALL 62877 0 0
62663: NOT
62664: IFFALSE 62671
// begin enable ( mpWin ) ;
62666: LD_INT 101
62668: ENABLE_MARKED
// exit ;
62669: GO 62874
// end ; canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) ;
62671: LD_ADDR_VAR 0 2
62675: PUSH
62676: LD_OWVAR 2
62680: PPUSH
62681: CALL 62503 0 1
62685: PUSH
62686: LD_EXP 35
62690: GREATEREQUAL
62691: IFFALSE 62704
62693: PUSH
62694: LD_OWVAR 2
62698: PPUSH
62699: CALL 63067 0 1
62703: AND
62704: ST_TO_ADDR
// for i := 1 to 8 do
62705: LD_ADDR_VAR 0 1
62709: PUSH
62710: DOUBLE
62711: LD_INT 1
62713: DEC
62714: ST_TO_ADDR
62715: LD_INT 8
62717: PUSH
62718: FOR_TO
62719: IFFALSE 62860
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
62721: LD_EXP 7
62725: PUSH
62726: LD_VAR 0 1
62730: ARRAY
62731: IFFALSE 62744
62733: PUSH
62734: LD_VAR 0 1
62738: PPUSH
62739: CALL_OW 108
62743: AND
62744: IFFALSE 62758
62746: PUSH
62747: LD_VAR 0 1
62751: PUSH
62752: LD_OWVAR 2
62756: NONEQUAL
62757: AND
62758: IFFALSE 62858
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
62760: LD_EXP 8
62764: PUSH
62765: LD_VAR 0 1
62769: ARRAY
62770: NOT
62771: IFTRUE 62819
62773: PUSH
62774: LD_EXP 8
62778: PUSH
62779: LD_VAR 0 1
62783: ARRAY
62784: PUSH
62785: LD_EXP 8
62789: PUSH
62790: LD_OWVAR 2
62794: ARRAY
62795: NONEQUAL
62796: IFFALSE 62818
62798: PUSH
62799: LD_OWVAR 2
62803: PPUSH
62804: LD_VAR 0 1
62808: PPUSH
62809: CALL_OW 81
62813: PUSH
62814: LD_INT 1
62816: NONEQUAL
62817: AND
62818: OR
62819: IFFALSE 62858
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
62821: LD_VAR 0 1
62825: PPUSH
62826: CALL 62503 0 1
62830: PUSH
62831: LD_EXP 35
62835: GREATEREQUAL
62836: IFFALSE 62849
62838: PUSH
62839: LD_VAR 0 1
62843: PPUSH
62844: CALL 63067 0 1
62848: AND
62849: IFFALSE 62858
// begin enable ( mpLose ) ;
62851: LD_INT 102
62853: ENABLE_MARKED
// exit ;
62854: POP
62855: POP
62856: GO 62874
// end ;
62858: GO 62718
62860: POP
62861: POP
// if canWin then
62862: LD_VAR 0 2
62866: IFFALSE 62873
// enable ( mpWin ) else
62868: LD_INT 101
62870: ENABLE_MARKED
62871: GO 62874
// enable ;
62873: ENABLE
// end ; end ;
62874: PPOPN 2
62876: END
// function EnemiesInGame ; var i ; begin
62877: LD_INT 0
62879: PPUSH
62880: PPUSH
// result := false ;
62881: LD_ADDR_VAR 0 1
62885: PUSH
62886: LD_INT 0
62888: ST_TO_ADDR
// for i := 1 to 8 do
62889: LD_ADDR_VAR 0 2
62893: PUSH
62894: DOUBLE
62895: LD_INT 1
62897: DEC
62898: ST_TO_ADDR
62899: LD_INT 8
62901: PUSH
62902: FOR_TO
62903: IFFALSE 63018
// if i <> your_side and HasPower ( i ) and MultiplayerSideAlive ( i ) then
62905: LD_VAR 0 2
62909: PUSH
62910: LD_OWVAR 2
62914: NONEQUAL
62915: IFFALSE 62928
62917: PUSH
62918: LD_VAR 0 2
62922: PPUSH
62923: CALL 63067 0 1
62927: AND
62928: IFFALSE 62941
62930: PUSH
62931: LD_VAR 0 2
62935: PPUSH
62936: CALL_OW 108
62940: AND
62941: IFFALSE 63016
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
62943: LD_EXP 8
62947: PUSH
62948: LD_VAR 0 2
62952: ARRAY
62953: NOT
62954: IFTRUE 63002
62956: PUSH
62957: LD_EXP 8
62961: PUSH
62962: LD_VAR 0 2
62966: ARRAY
62967: PUSH
62968: LD_EXP 8
62972: PUSH
62973: LD_OWVAR 2
62977: ARRAY
62978: NONEQUAL
62979: IFFALSE 63001
62981: PUSH
62982: LD_OWVAR 2
62986: PPUSH
62987: LD_VAR 0 2
62991: PPUSH
62992: CALL_OW 81
62996: PUSH
62997: LD_INT 1
62999: NONEQUAL
63000: AND
63001: OR
63002: IFFALSE 63016
// begin result := true ;
63004: LD_ADDR_VAR 0 1
63008: PUSH
63009: LD_INT 1
63011: ST_TO_ADDR
// exit ;
63012: POP
63013: POP
63014: GO 63020
// end ;
63016: GO 62902
63018: POP
63019: POP
// end ;
63020: LD_VAR 0 1
63024: RET
// function CanWinLoose ; begin
63025: LD_INT 0
63027: PPUSH
// result := true ;
63028: LD_ADDR_VAR 0 1
63032: PUSH
63033: LD_INT 1
63035: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
63036: CALL_OW 531
63040: IFFALSE 63052
63042: PUSH
63043: CALL_OW 519
63047: PUSH
63048: LD_INT 1
63050: GREATER
63051: AND
63052: IFFALSE 63062
// result := false ;
63054: LD_ADDR_VAR 0 1
63058: PUSH
63059: LD_INT 0
63061: ST_TO_ADDR
// end ;
63062: LD_VAR 0 1
63066: RET
// function HasPower ( i ) ; begin
63067: LD_INT 0
63069: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
63070: LD_ADDR_VAR 0 2
63074: PUSH
63075: LD_INT 22
63077: PUSH
63078: LD_VAR 0 1
63082: PUSH
63083: EMPTY
63084: LIST
63085: LIST
63086: PUSH
63087: LD_INT 2
63089: PUSH
63090: LD_INT 21
63092: PUSH
63093: LD_INT 1
63095: PUSH
63096: EMPTY
63097: LIST
63098: LIST
63099: PUSH
63100: LD_INT 33
63102: PUSH
63103: LD_INT 3
63105: PUSH
63106: EMPTY
63107: LIST
63108: LIST
63109: PUSH
63110: LD_INT 33
63112: PUSH
63113: LD_INT 5
63115: PUSH
63116: EMPTY
63117: LIST
63118: LIST
63119: PUSH
63120: EMPTY
63121: LIST
63122: LIST
63123: LIST
63124: LIST
63125: PUSH
63126: EMPTY
63127: LIST
63128: LIST
63129: PPUSH
63130: CALL_OW 69
63134: ST_TO_ADDR
// end ; end_of_file
63135: LD_VAR 0 2
63139: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
63140: PPOPN 6
63142: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
63143: LD_INT 0
63145: PPUSH
// begin if not units then
63146: LD_VAR 0 1
63150: NOT
63151: IFFALSE 63155
// exit ;
63153: GO 63189
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
63155: LD_VAR 0 1
63159: PPUSH
63160: LD_VAR 0 2
63164: PPUSH
63165: LD_VAR 0 3
63169: PPUSH
63170: LD_VAR 0 4
63174: PPUSH
63175: LD_VAR 0 5
63179: PPUSH
63180: LD_VAR 0 6
63184: PPUSH
63185: CALL 61432 0 6
// end ;
63189: PPOPN 7
63191: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
63192: LD_EXP 3
63196: PUSH
63197: LD_INT 4
63199: EQUAL
63200: IFFALSE 63236
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
63202: LD_STRING setGameDifficulty(
63204: PUSH
63205: LD_OWVAR 67
63209: STR
63210: PUSH
63211: LD_STRING )
63213: STR
63214: PPUSH
63215: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
63219: LD_STRING displayDifficulty(
63221: PUSH
63222: LD_OWVAR 67
63226: STR
63227: PUSH
63228: LD_STRING )
63230: STR
63231: PPUSH
63232: CALL_OW 559
// end ; SOS_MapStart ( ) ;
63236: CALL 63265 0 0
// end ; end_of_file
63240: PPOPN 1
63242: END
// every 0 0$1 do
63243: GO 63245
63245: DISABLE
// begin enable ;
63246: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
63247: LD_STRING updateTimer(
63249: PUSH
63250: LD_OWVAR 1
63254: STR
63255: PUSH
63256: LD_STRING );
63258: STR
63259: PPUSH
63260: CALL_OW 559
// end ;
63264: END
// export function SOS_MapStart ( ) ; begin
63265: LD_INT 0
63267: PPUSH
// UpdateFactoryWaypoints ( ) ;
63268: CALL 64206 0 0
// UpdateWarehouseGatheringPoints ( ) ;
63272: CALL 64458 0 0
// ParseMultiDataToLua ( ) ;
63276: CALL 64605 0 0
// ToLua ( LFC_UNITS_CUSTOM_ICON = {}; ) ;
63280: LD_STRING LFC_UNITS_CUSTOM_ICON = {};
63282: PPUSH
63283: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
63287: LD_STRING setSpecLogoNumber(
63289: PUSH
63290: LD_INT 2
63292: STR
63293: PUSH
63294: LD_STRING ,
63296: STR
63297: PUSH
63298: LD_INT 1
63300: STR
63301: PUSH
63302: LD_STRING )
63304: STR
63305: PPUSH
63306: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
63310: LD_STRING setSpecLogoNumber(
63312: PUSH
63313: LD_INT 3
63315: STR
63316: PUSH
63317: LD_STRING ,
63319: STR
63320: PUSH
63321: LD_INT 2
63323: STR
63324: PUSH
63325: LD_STRING )
63327: STR
63328: PPUSH
63329: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
63333: LD_STRING setSpecLogoNumber(
63335: PUSH
63336: LD_INT 4
63338: STR
63339: PUSH
63340: LD_STRING ,
63342: STR
63343: PUSH
63344: LD_INT 3
63346: STR
63347: PUSH
63348: LD_STRING )
63350: STR
63351: PPUSH
63352: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
63356: LD_STRING setSpecLogoNumber(
63358: PUSH
63359: LD_INT 5
63361: STR
63362: PUSH
63363: LD_STRING ,
63365: STR
63366: PUSH
63367: LD_INT 4
63369: STR
63370: PUSH
63371: LD_STRING )
63373: STR
63374: PPUSH
63375: CALL_OW 559
// end ;
63379: LD_VAR 0 1
63383: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
63384: LD_INT 0
63386: PPUSH
63387: PPUSH
63388: PPUSH
63389: PPUSH
63390: PPUSH
63391: PPUSH
63392: PPUSH
63393: PPUSH
63394: PPUSH
// for i := 1 to 8 do
63395: LD_ADDR_VAR 0 2
63399: PUSH
63400: DOUBLE
63401: LD_INT 1
63403: DEC
63404: ST_TO_ADDR
63405: LD_INT 8
63407: PUSH
63408: FOR_TO
63409: IFFALSE 63794
// begin if mpSidePositions [ i ] then
63411: LD_EXP 7
63415: PUSH
63416: LD_VAR 0 2
63420: ARRAY
63421: IFFALSE 63792
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
63423: LD_ADDR_VAR 0 7
63427: PUSH
63428: LD_INT 22
63430: PUSH
63431: LD_VAR 0 2
63435: PUSH
63436: EMPTY
63437: LIST
63438: LIST
63439: PUSH
63440: LD_INT 21
63442: PUSH
63443: LD_INT 1
63445: PUSH
63446: EMPTY
63447: LIST
63448: LIST
63449: PUSH
63450: EMPTY
63451: LIST
63452: LIST
63453: PPUSH
63454: CALL_OW 69
63458: PPUSH
63459: CALL 13492 0 1
63463: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
63464: LD_ADDR_VAR 0 9
63468: PUSH
63469: LD_INT 22
63471: PUSH
63472: LD_VAR 0 2
63476: PUSH
63477: EMPTY
63478: LIST
63479: LIST
63480: PUSH
63481: LD_INT 2
63483: PUSH
63484: LD_INT 30
63486: PUSH
63487: LD_INT 0
63489: PUSH
63490: EMPTY
63491: LIST
63492: LIST
63493: PUSH
63494: LD_INT 30
63496: PUSH
63497: LD_INT 1
63499: PUSH
63500: EMPTY
63501: LIST
63502: LIST
63503: PUSH
63504: EMPTY
63505: LIST
63506: LIST
63507: LIST
63508: PUSH
63509: EMPTY
63510: LIST
63511: LIST
63512: PPUSH
63513: CALL_OW 69
63517: ST_TO_ADDR
// crates := 0 ;
63518: LD_ADDR_VAR 0 4
63522: PUSH
63523: LD_INT 0
63525: ST_TO_ADDR
// oil := 0 ;
63526: LD_ADDR_VAR 0 5
63530: PUSH
63531: LD_INT 0
63533: ST_TO_ADDR
// sib := 0 ;
63534: LD_ADDR_VAR 0 6
63538: PUSH
63539: LD_INT 0
63541: ST_TO_ADDR
// if bases then
63542: LD_VAR 0 9
63546: IFFALSE 63652
// begin for j in bases do
63548: LD_ADDR_VAR 0 3
63552: PUSH
63553: LD_VAR 0 9
63557: PUSH
63558: FOR_IN
63559: IFFALSE 63650
// begin base := GetBase ( j ) ;
63561: LD_ADDR_VAR 0 8
63565: PUSH
63566: LD_VAR 0 3
63570: PPUSH
63571: CALL_OW 274
63575: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
63576: LD_ADDR_VAR 0 4
63580: PUSH
63581: LD_VAR 0 4
63585: PUSH
63586: LD_VAR 0 8
63590: PPUSH
63591: LD_INT 1
63593: PPUSH
63594: CALL_OW 275
63598: PLUS
63599: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
63600: LD_ADDR_VAR 0 5
63604: PUSH
63605: LD_VAR 0 5
63609: PUSH
63610: LD_VAR 0 8
63614: PPUSH
63615: LD_INT 2
63617: PPUSH
63618: CALL_OW 275
63622: PLUS
63623: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
63624: LD_ADDR_VAR 0 6
63628: PUSH
63629: LD_VAR 0 6
63633: PUSH
63634: LD_VAR 0 8
63638: PPUSH
63639: LD_INT 3
63641: PPUSH
63642: CALL_OW 275
63646: PLUS
63647: ST_TO_ADDR
// end ;
63648: GO 63558
63650: POP
63651: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
63652: LD_STRING setSpecText(
63654: PUSH
63655: LD_VAR 0 2
63659: STR
63660: PUSH
63661: LD_STRING ,
63663: STR
63664: PUSH
63665: LD_INT 2
63667: STR
63668: PUSH
63669: LD_STRING ,
63671: STR
63672: PUSH
63673: LD_VAR 0 4
63677: STR
63678: PUSH
63679: LD_STRING )
63681: STR
63682: PPUSH
63683: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
63687: LD_STRING setSpecText(
63689: PUSH
63690: LD_VAR 0 2
63694: STR
63695: PUSH
63696: LD_STRING ,
63698: STR
63699: PUSH
63700: LD_INT 3
63702: STR
63703: PUSH
63704: LD_STRING ,
63706: STR
63707: PUSH
63708: LD_VAR 0 5
63712: STR
63713: PUSH
63714: LD_STRING )
63716: STR
63717: PPUSH
63718: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
63722: LD_STRING setSpecText(
63724: PUSH
63725: LD_VAR 0 2
63729: STR
63730: PUSH
63731: LD_STRING ,
63733: STR
63734: PUSH
63735: LD_INT 4
63737: STR
63738: PUSH
63739: LD_STRING ,
63741: STR
63742: PUSH
63743: LD_VAR 0 6
63747: STR
63748: PUSH
63749: LD_STRING )
63751: STR
63752: PPUSH
63753: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
63757: LD_STRING setSpecText(
63759: PUSH
63760: LD_VAR 0 2
63764: STR
63765: PUSH
63766: LD_STRING ,
63768: STR
63769: PUSH
63770: LD_INT 5
63772: STR
63773: PUSH
63774: LD_STRING ,
63776: STR
63777: PUSH
63778: LD_VAR 0 7
63782: STR
63783: PUSH
63784: LD_STRING )
63786: STR
63787: PPUSH
63788: CALL_OW 559
// end ; end ;
63792: GO 63408
63794: POP
63795: POP
// end ;
63796: LD_VAR 0 1
63800: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
63801: LD_INT 2
63803: PUSH
63804: LD_INT 30
63806: PUSH
63807: LD_INT 0
63809: PUSH
63810: EMPTY
63811: LIST
63812: LIST
63813: PUSH
63814: LD_INT 30
63816: PUSH
63817: LD_INT 1
63819: PUSH
63820: EMPTY
63821: LIST
63822: LIST
63823: PUSH
63824: EMPTY
63825: LIST
63826: LIST
63827: LIST
63828: PPUSH
63829: CALL_OW 69
63833: IFFALSE 63843
63835: GO 63837
63837: DISABLE
// begin enable ;
63838: ENABLE
// UpdateSpectatorBar ;
63839: CALL 63384 0 0
// end ;
63843: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
63844: LD_INT 0
63846: PPUSH
// end ;
63847: LD_VAR 0 12
63851: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
63852: LD_INT 0
63854: PPUSH
63855: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
63856: LD_VAR 0 1
63860: NOT
63861: IFTRUE 63880
63863: PUSH
63864: LD_VAR 0 2
63868: PPUSH
63869: LD_VAR 0 3
63873: PPUSH
63874: CALL_OW 488
63878: NOT
63879: OR
63880: IFTRUE 63915
63882: PUSH
63883: LD_VAR 0 1
63887: PPUSH
63888: CALL_OW 266
63892: PUSH
63893: LD_INT 3
63895: NONEQUAL
63896: IFFALSE 63914
63898: PUSH
63899: LD_VAR 0 1
63903: PPUSH
63904: CALL_OW 247
63908: PUSH
63909: LD_INT 1
63911: EQUAL
63912: NOT
63913: AND
63914: OR
63915: IFFALSE 63919
// exit ;
63917: GO 64201
// if GetType ( factory ) = unit_human then
63919: LD_VAR 0 1
63923: PPUSH
63924: CALL_OW 247
63928: PUSH
63929: LD_INT 1
63931: EQUAL
63932: IFFALSE 63949
// factory := IsInUnit ( factory ) ;
63934: LD_ADDR_VAR 0 1
63938: PUSH
63939: LD_VAR 0 1
63943: PPUSH
63944: CALL_OW 310
63948: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
63949: LD_VAR 0 1
63953: PPUSH
63954: CALL_OW 266
63958: PUSH
63959: LD_INT 3
63961: NONEQUAL
63962: IFFALSE 63966
// exit ;
63964: GO 64201
// for i := 1 to Count ( factoryWaypoints ) do
63966: LD_ADDR_VAR 0 5
63970: PUSH
63971: DOUBLE
63972: LD_INT 1
63974: DEC
63975: ST_TO_ADDR
63976: LD_EXP 61
63980: PPUSH
63981: CALL 13492 0 1
63985: PUSH
63986: FOR_TO
63987: IFFALSE 64149
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
63989: LD_VAR 0 2
63993: PPUSH
63994: LD_VAR 0 3
63998: PPUSH
63999: CALL_OW 428
64003: PUSH
64004: LD_EXP 61
64008: PUSH
64009: LD_VAR 0 5
64013: ARRAY
64014: PUSH
64015: LD_INT 2
64017: ARRAY
64018: EQUAL
64019: IFFALSE 64051
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
64021: LD_ADDR_EXP 61
64025: PUSH
64026: LD_EXP 61
64030: PPUSH
64031: LD_VAR 0 5
64035: PPUSH
64036: CALL_OW 3
64040: ST_TO_ADDR
// UpdateFactoryWaypoints ;
64041: CALL 64206 0 0
// exit ;
64045: POP
64046: POP
64047: GO 64201
// end else
64049: GO 64147
// if factory = factoryWaypoints [ i ] [ 2 ] then
64051: LD_VAR 0 1
64055: PUSH
64056: LD_EXP 61
64060: PUSH
64061: LD_VAR 0 5
64065: ARRAY
64066: PUSH
64067: LD_INT 2
64069: ARRAY
64070: EQUAL
64071: IFFALSE 64147
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
64073: LD_ADDR_EXP 61
64077: PUSH
64078: LD_EXP 61
64082: PPUSH
64083: LD_VAR 0 5
64087: PPUSH
64088: CALL_OW 3
64092: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
64093: LD_ADDR_EXP 61
64097: PUSH
64098: LD_EXP 61
64102: PPUSH
64103: LD_VAR 0 1
64107: PPUSH
64108: CALL_OW 255
64112: PUSH
64113: LD_VAR 0 1
64117: PUSH
64118: LD_VAR 0 2
64122: PUSH
64123: LD_VAR 0 3
64127: PUSH
64128: EMPTY
64129: LIST
64130: LIST
64131: LIST
64132: LIST
64133: PPUSH
64134: CALL 49468 0 2
64138: ST_TO_ADDR
// UpdateFactoryWaypoints ;
64139: CALL 64206 0 0
// exit ;
64143: POP
64144: POP
64145: GO 64201
// end ; end ;
64147: GO 63986
64149: POP
64150: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
64151: LD_ADDR_EXP 61
64155: PUSH
64156: LD_EXP 61
64160: PPUSH
64161: LD_VAR 0 1
64165: PPUSH
64166: CALL_OW 255
64170: PUSH
64171: LD_VAR 0 1
64175: PUSH
64176: LD_VAR 0 2
64180: PUSH
64181: LD_VAR 0 3
64185: PUSH
64186: EMPTY
64187: LIST
64188: LIST
64189: LIST
64190: LIST
64191: PPUSH
64192: CALL 49468 0 2
64196: ST_TO_ADDR
// UpdateFactoryWaypoints ;
64197: CALL 64206 0 0
// end ;
64201: LD_VAR 0 4
64205: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
64206: LD_INT 0
64208: PPUSH
64209: PPUSH
64210: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
64211: LD_STRING resetFactoryWaypoint();
64213: PPUSH
64214: CALL_OW 559
// if factoryWaypoints then
64218: LD_EXP 61
64222: IFFALSE 64343
// begin list := factoryWaypoints ;
64224: LD_ADDR_VAR 0 3
64228: PUSH
64229: LD_EXP 61
64233: ST_TO_ADDR
// for i := 1 to list do
64234: LD_ADDR_VAR 0 2
64238: PUSH
64239: DOUBLE
64240: LD_INT 1
64242: DEC
64243: ST_TO_ADDR
64244: LD_VAR 0 3
64248: PUSH
64249: FOR_TO
64250: IFFALSE 64341
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
64252: LD_STRING setFactoryWaypointXY(
64254: PUSH
64255: LD_VAR 0 3
64259: PUSH
64260: LD_VAR 0 2
64264: ARRAY
64265: PUSH
64266: LD_INT 1
64268: ARRAY
64269: STR
64270: PUSH
64271: LD_STRING ,
64273: STR
64274: PUSH
64275: LD_VAR 0 3
64279: PUSH
64280: LD_VAR 0 2
64284: ARRAY
64285: PUSH
64286: LD_INT 2
64288: ARRAY
64289: STR
64290: PUSH
64291: LD_STRING ,
64293: STR
64294: PUSH
64295: LD_VAR 0 3
64299: PUSH
64300: LD_VAR 0 2
64304: ARRAY
64305: PUSH
64306: LD_INT 3
64308: ARRAY
64309: STR
64310: PUSH
64311: LD_STRING ,
64313: STR
64314: PUSH
64315: LD_VAR 0 3
64319: PUSH
64320: LD_VAR 0 2
64324: ARRAY
64325: PUSH
64326: LD_INT 4
64328: ARRAY
64329: STR
64330: PUSH
64331: LD_STRING )
64333: STR
64334: PPUSH
64335: CALL_OW 559
64339: GO 64249
64341: POP
64342: POP
// end ; end ;
64343: LD_VAR 0 1
64347: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
64348: LD_INT 0
64350: PPUSH
// if HexInfo ( x , y ) = warehouse then
64351: LD_VAR 0 2
64355: PPUSH
64356: LD_VAR 0 3
64360: PPUSH
64361: CALL_OW 428
64365: PUSH
64366: LD_VAR 0 1
64370: EQUAL
64371: IFFALSE 64398
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
64373: LD_ADDR_EXP 63
64377: PUSH
64378: LD_EXP 63
64382: PPUSH
64383: LD_VAR 0 1
64387: PPUSH
64388: LD_INT 0
64390: PPUSH
64391: CALL_OW 1
64395: ST_TO_ADDR
64396: GO 64449
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
64398: LD_ADDR_EXP 63
64402: PUSH
64403: LD_EXP 63
64407: PPUSH
64408: LD_VAR 0 1
64412: PPUSH
64413: LD_VAR 0 1
64417: PPUSH
64418: CALL_OW 255
64422: PUSH
64423: LD_VAR 0 1
64427: PUSH
64428: LD_VAR 0 2
64432: PUSH
64433: LD_VAR 0 3
64437: PUSH
64438: EMPTY
64439: LIST
64440: LIST
64441: LIST
64442: LIST
64443: PPUSH
64444: CALL_OW 1
64448: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
64449: CALL 64458 0 0
// end ;
64453: LD_VAR 0 4
64457: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
64458: LD_INT 0
64460: PPUSH
64461: PPUSH
64462: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
64463: LD_STRING resetWarehouseGatheringPoints();
64465: PPUSH
64466: CALL_OW 559
// if warehouseGatheringPoints then
64470: LD_EXP 63
64474: IFFALSE 64600
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
64476: LD_ADDR_VAR 0 3
64480: PUSH
64481: LD_EXP 63
64485: PPUSH
64486: CALL 53402 0 1
64490: ST_TO_ADDR
// for i := 1 to list do
64491: LD_ADDR_VAR 0 2
64495: PUSH
64496: DOUBLE
64497: LD_INT 1
64499: DEC
64500: ST_TO_ADDR
64501: LD_VAR 0 3
64505: PUSH
64506: FOR_TO
64507: IFFALSE 64598
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
64509: LD_STRING setWarehouseGatheringPointXY(
64511: PUSH
64512: LD_VAR 0 3
64516: PUSH
64517: LD_VAR 0 2
64521: ARRAY
64522: PUSH
64523: LD_INT 1
64525: ARRAY
64526: STR
64527: PUSH
64528: LD_STRING ,
64530: STR
64531: PUSH
64532: LD_VAR 0 3
64536: PUSH
64537: LD_VAR 0 2
64541: ARRAY
64542: PUSH
64543: LD_INT 2
64545: ARRAY
64546: STR
64547: PUSH
64548: LD_STRING ,
64550: STR
64551: PUSH
64552: LD_VAR 0 3
64556: PUSH
64557: LD_VAR 0 2
64561: ARRAY
64562: PUSH
64563: LD_INT 3
64565: ARRAY
64566: STR
64567: PUSH
64568: LD_STRING ,
64570: STR
64571: PUSH
64572: LD_VAR 0 3
64576: PUSH
64577: LD_VAR 0 2
64581: ARRAY
64582: PUSH
64583: LD_INT 4
64585: ARRAY
64586: STR
64587: PUSH
64588: LD_STRING )
64590: STR
64591: PPUSH
64592: CALL_OW 559
64596: GO 64506
64598: POP
64599: POP
// end ; end ;
64600: LD_VAR 0 1
64604: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
64605: LD_INT 0
64607: PPUSH
64608: PPUSH
// if not mpSidePositions then
64609: LD_EXP 7
64613: NOT
64614: IFFALSE 64618
// exit ;
64616: GO 64689
// result :=  ;
64618: LD_ADDR_VAR 0 1
64622: PUSH
64623: LD_STRING 
64625: ST_TO_ADDR
// for i := 1 to 8 do
64626: LD_ADDR_VAR 0 2
64630: PUSH
64631: DOUBLE
64632: LD_INT 1
64634: DEC
64635: ST_TO_ADDR
64636: LD_INT 8
64638: PUSH
64639: FOR_TO
64640: IFFALSE 64670
// begin result := result & mpSidePositions [ i ] & ; ;
64642: LD_ADDR_VAR 0 1
64646: PUSH
64647: LD_VAR 0 1
64651: PUSH
64652: LD_EXP 7
64656: PUSH
64657: LD_VAR 0 2
64661: ARRAY
64662: STR
64663: PUSH
64664: LD_STRING ;
64666: STR
64667: ST_TO_ADDR
// end ;
64668: GO 64639
64670: POP
64671: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
64672: LD_STRING setMultiplayerRealPosition("
64674: PUSH
64675: LD_VAR 0 1
64679: STR
64680: PUSH
64681: LD_STRING ");
64683: STR
64684: PPUSH
64685: CALL_OW 559
// end ;
64689: LD_VAR 0 1
64693: RET
