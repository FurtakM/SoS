// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 46428 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 46804 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 4
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 5
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: EMPTY
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: LD_INT 6300
 466: PUSH
 467: LD_INT 10500
 469: PUSH
 470: LD_INT 16800
 472: PUSH
 473: LD_INT 21000
 475: PUSH
 476: LD_INT 25200
 478: PUSH
 479: LD_INT 31500
 481: PUSH
 482: LD_INT 42000
 484: PUSH
 485: LD_INT 63000
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 2 , 5 5$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 3 3$0 ] ;
 522: LD_ADDR_EXP 6
 526: PUSH
 527: LD_INT 2
 529: PUSH
 530: LD_INT 15
 532: PUSH
 533: LD_INT 4
 535: PUSH
 536: LD_INT 100
 538: PUSH
 539: LD_INT 30
 541: PUSH
 542: LD_INT 0
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 3
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: LD_INT 2
 558: PUSH
 559: LD_INT 250
 561: PUSH
 562: LD_INT 2
 564: PUSH
 565: LD_INT 10500
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: LD_INT 700
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: LD_INT 700
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 31500
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 6300
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: ST_TO_ADDR
// mpGameType := GameTypeNormal ;
 624: LD_ADDR_EXP 3
 628: PUSH
 629: LD_INT 1
 631: ST_TO_ADDR
// your_side := 1 ;
 632: LD_ADDR_OWVAR 2
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// mpSidePositions := [ 8 , 2 , 3 , 4 , 5 , 6 , 7 , 1 ] ;
 640: LD_ADDR_EXP 7
 644: PUSH
 645: LD_INT 8
 647: PUSH
 648: LD_INT 2
 650: PUSH
 651: LD_INT 3
 653: PUSH
 654: LD_INT 4
 656: PUSH
 657: LD_INT 5
 659: PUSH
 660: LD_INT 6
 662: PUSH
 663: LD_INT 7
 665: PUSH
 666: LD_INT 1
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// mpSideTeams := [ 1 , 2 , 2 , 3 , 3 , 4 , 4 , 1 ] ;
 679: LD_ADDR_EXP 8
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 2
 689: PUSH
 690: LD_INT 2
 692: PUSH
 693: LD_INT 3
 695: PUSH
 696: LD_INT 3
 698: PUSH
 699: LD_INT 4
 701: PUSH
 702: LD_INT 4
 704: PUSH
 705: LD_INT 1
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: ST_TO_ADDR
// mpSideNations := [ 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 ] ;
 718: LD_ADDR_EXP 9
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: LD_INT 2
 728: PUSH
 729: LD_INT 3
 731: PUSH
 732: LD_INT 1
 734: PUSH
 735: LD_INT 2
 737: PUSH
 738: LD_INT 3
 740: PUSH
 741: LD_INT 1
 743: PUSH
 744: LD_INT 2
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: ST_TO_ADDR
// mpTeams := [ [ 1 , 8 ] , [ 2 , 3 ] , [ 4 , 5 ] , [ 6 , 7 ] ] ;
 757: LD_ADDR_EXP 10
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: LD_INT 8
 767: PUSH
 768: EMPTY
 769: LIST
 770: LIST
 771: PUSH
 772: LD_INT 2
 774: PUSH
 775: LD_INT 3
 777: PUSH
 778: EMPTY
 779: LIST
 780: LIST
 781: PUSH
 782: LD_INT 4
 784: PUSH
 785: LD_INT 5
 787: PUSH
 788: EMPTY
 789: LIST
 790: LIST
 791: PUSH
 792: LD_INT 6
 794: PUSH
 795: LD_INT 7
 797: PUSH
 798: EMPTY
 799: LIST
 800: LIST
 801: PUSH
 802: EMPTY
 803: LIST
 804: LIST
 805: LIST
 806: LIST
 807: ST_TO_ADDR
// mpTeamGame := true ;
 808: LD_ADDR_EXP 11
 812: PUSH
 813: LD_INT 1
 815: ST_TO_ADDR
// mpMapSize := [ 200 , 230 ] ;
 816: LD_ADDR_EXP 29
 820: PUSH
 821: LD_INT 200
 823: PUSH
 824: LD_INT 230
 826: PUSH
 827: EMPTY
 828: LIST
 829: LIST
 830: ST_TO_ADDR
// end ;
 831: LD_VAR 0 1
 835: RET
// export kingArea , kingCamArea ; export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 836: LD_INT 0
 838: PPUSH
 839: PPUSH
 840: PPUSH
 841: PPUSH
 842: PPUSH
 843: PPUSH
 844: PPUSH
// mpBuildUpAreas := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
 845: LD_ADDR_EXP 19
 849: PUSH
 850: LD_INT 1
 852: PUSH
 853: LD_INT 2
 855: PUSH
 856: LD_INT 3
 858: PUSH
 859: LD_INT 4
 861: PUSH
 862: LD_INT 5
 864: PUSH
 865: LD_INT 6
 867: PUSH
 868: LD_INT 7
 870: PUSH
 871: LD_INT 8
 873: PUSH
 874: EMPTY
 875: LIST
 876: LIST
 877: LIST
 878: LIST
 879: LIST
 880: LIST
 881: LIST
 882: LIST
 883: ST_TO_ADDR
// mpMarkedAreas := [ Between1 , Between2 , Between3 , Between4 , Center1 , Center2 ] union mpBuildUpAreas ;
 884: LD_ADDR_EXP 18
 888: PUSH
 889: LD_INT 10
 891: PUSH
 892: LD_INT 11
 894: PUSH
 895: LD_INT 12
 897: PUSH
 898: LD_INT 13
 900: PUSH
 901: LD_INT 14
 903: PUSH
 904: LD_INT 15
 906: PUSH
 907: EMPTY
 908: LIST
 909: LIST
 910: LIST
 911: LIST
 912: LIST
 913: LIST
 914: PUSH
 915: LD_EXP 19
 919: UNION
 920: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 921: LD_VAR 0 1
 925: PUSH
 926: LD_INT 2
 928: EQUAL
 929: IFFALSE 941
// baseLevel := 1 else
 931: LD_ADDR_VAR 0 7
 935: PUSH
 936: LD_INT 1
 938: ST_TO_ADDR
 939: GO 955
// baseLevel := mpGameSettings [ 1 ] ;
 941: LD_ADDR_VAR 0 7
 945: PUSH
 946: LD_EXP 6
 950: PUSH
 951: LD_INT 1
 953: ARRAY
 954: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 955: LD_ADDR_EXP 24
 959: PUSH
 960: LD_EXP 6
 964: PUSH
 965: LD_INT 2
 967: ARRAY
 968: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 969: LD_ADDR_EXP 25
 973: PUSH
 974: LD_EXP 6
 978: PUSH
 979: LD_INT 3
 981: ARRAY
 982: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 983: LD_ADDR_EXP 15
 987: PUSH
 988: LD_EXP 6
 992: PUSH
 993: LD_INT 4
 995: ARRAY
 996: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 997: LD_ADDR_EXP 27
1001: PUSH
1002: LD_EXP 6
1006: PUSH
1007: LD_INT 5
1009: ARRAY
1010: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
1011: LD_ADDR_VAR 0 5
1015: PUSH
1016: LD_EXP 6
1020: PUSH
1021: LD_INT 6
1023: ARRAY
1024: PUSH
1025: LD_INT 0
1027: GREATER
1028: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
1029: LD_ADDR_VAR 0 6
1033: PUSH
1034: LD_EXP 6
1038: PUSH
1039: LD_INT 7
1041: ARRAY
1042: PUSH
1043: LD_INT 0
1045: GREATER
1046: ST_TO_ADDR
// kingCamArea := 0 ;
1047: LD_ADDR_EXP 2
1051: PUSH
1052: LD_INT 0
1054: ST_TO_ADDR
// kingArea := 0 ;
1055: LD_ADDR_EXP 1
1059: PUSH
1060: LD_INT 0
1062: ST_TO_ADDR
// if gameType = GameTypeKing then
1063: LD_VAR 0 1
1067: PUSH
1068: LD_INT 3
1070: EQUAL
1071: IFFALSE 1111
// begin mpKingArea := 0 ;
1073: LD_ADDR_EXP 34
1077: PUSH
1078: LD_INT 0
1080: ST_TO_ADDR
// mpPoints := mpGameSettings [ 8 ] ;
1081: LD_ADDR_EXP 35
1085: PUSH
1086: LD_EXP 6
1090: PUSH
1091: LD_INT 8
1093: ARRAY
1094: ST_TO_ADDR
// mpEmissions := mpGameSettings [ 10 ] ;
1095: LD_ADDR_EXP 37
1099: PUSH
1100: LD_EXP 6
1104: PUSH
1105: LD_INT 10
1107: ARRAY
1108: ST_TO_ADDR
// end else
1109: GO 1135
// begin mpKingArea := 0 ;
1111: LD_ADDR_EXP 34
1115: PUSH
1116: LD_INT 0
1118: ST_TO_ADDR
// mpPoints := 0 ;
1119: LD_ADDR_EXP 35
1123: PUSH
1124: LD_INT 0
1126: ST_TO_ADDR
// mpEmissions := 0 ;
1127: LD_ADDR_EXP 37
1131: PUSH
1132: LD_INT 0
1134: ST_TO_ADDR
// end ; if mpGameSettings [ 9 ] then
1135: LD_EXP 6
1139: PUSH
1140: LD_INT 9
1142: ARRAY
1143: IFFALSE 1275
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1145: LD_ADDR_EXP 36
1149: PUSH
1150: LD_INT 1
1152: PUSH
1153: LD_INT 1
1155: PUSH
1156: LD_INT 1
1158: PUSH
1159: LD_INT 2
1161: PUSH
1162: EMPTY
1163: LIST
1164: LIST
1165: LIST
1166: LIST
1167: PUSH
1168: LD_INT 1
1170: PUSH
1171: LD_INT 1
1173: PUSH
1174: LD_INT 1
1176: PUSH
1177: LD_INT 3
1179: PUSH
1180: EMPTY
1181: LIST
1182: LIST
1183: LIST
1184: LIST
1185: PUSH
1186: EMPTY
1187: LIST
1188: LIST
1189: PUSH
1190: LD_INT 12
1192: PUSH
1193: LD_INT 1
1195: PUSH
1196: LD_INT 1
1198: PUSH
1199: LD_INT 24
1201: PUSH
1202: EMPTY
1203: LIST
1204: LIST
1205: LIST
1206: LIST
1207: PUSH
1208: LD_INT 12
1210: PUSH
1211: LD_INT 1
1213: PUSH
1214: LD_INT 1
1216: PUSH
1217: LD_INT 23
1219: PUSH
1220: EMPTY
1221: LIST
1222: LIST
1223: LIST
1224: LIST
1225: PUSH
1226: EMPTY
1227: LIST
1228: LIST
1229: PUSH
1230: LD_INT 21
1232: PUSH
1233: LD_INT 1
1235: PUSH
1236: LD_INT 1
1238: PUSH
1239: LD_INT 42
1241: PUSH
1242: EMPTY
1243: LIST
1244: LIST
1245: LIST
1246: LIST
1247: PUSH
1248: LD_INT 21
1250: PUSH
1251: LD_INT 1
1253: PUSH
1254: LD_INT 1
1256: PUSH
1257: LD_INT 42
1259: PUSH
1260: EMPTY
1261: LIST
1262: LIST
1263: LIST
1264: LIST
1265: PUSH
1266: EMPTY
1267: LIST
1268: LIST
1269: PUSH
1270: EMPTY
1271: LIST
1272: LIST
1273: LIST
1274: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1275: LD_ADDR_EXP 16
1279: PUSH
1280: LD_EXP 6
1284: PUSH
1285: LD_INT 11
1287: ARRAY
1288: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1289: LD_ADDR_EXP 22
1293: PUSH
1294: LD_EXP 6
1298: PUSH
1299: LD_INT 12
1301: ARRAY
1302: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1303: LD_ADDR_EXP 26
1307: PUSH
1308: LD_EXP 6
1312: PUSH
1313: LD_INT 13
1315: ARRAY
1316: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1317: LD_ADDR_EXP 33
1321: PUSH
1322: LD_EXP 6
1326: PUSH
1327: LD_INT 14
1329: ARRAY
1330: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1331: LD_ADDR_EXP 30
1335: PUSH
1336: LD_EXP 6
1340: PUSH
1341: LD_INT 15
1343: ARRAY
1344: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1345: LD_ADDR_EXP 28
1349: PUSH
1350: LD_EXP 6
1354: PUSH
1355: LD_INT 18
1357: ARRAY
1358: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1359: LD_ADDR_EXP 20
1363: PUSH
1364: LD_EXP 6
1368: PUSH
1369: LD_INT 21
1371: ARRAY
1372: ST_TO_ADDR
// mpApemansArea := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , Base7ApeArea , Base8ApeArea ] ;
1373: LD_ADDR_EXP 31
1377: PUSH
1378: LD_INT 16
1380: PUSH
1381: LD_INT 17
1383: PUSH
1384: LD_INT 18
1386: PUSH
1387: LD_INT 19
1389: PUSH
1390: LD_INT 20
1392: PUSH
1393: LD_INT 21
1395: PUSH
1396: LD_INT 22
1398: PUSH
1399: LD_INT 23
1401: PUSH
1402: EMPTY
1403: LIST
1404: LIST
1405: LIST
1406: LIST
1407: LIST
1408: LIST
1409: LIST
1410: LIST
1411: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 2 ) , GetBuildingFromArea ( depotArea2 , 2 ) , GetBuildingFromArea ( depotArea3 , 3 ) , GetBuildingFromArea ( depotArea4 , 4 ) , GetBuildingFromArea ( depotArea5 , 5 ) , GetBuildingFromArea ( depotArea6 , 5 ) , GetBuildingFromArea ( depotArea7 , 0 ) , GetBuildingFromArea ( depotArea8 , 1 ) ] ;
1412: LD_ADDR_VAR 0 8
1416: PUSH
1417: LD_INT 24
1419: PPUSH
1420: LD_INT 2
1422: PPUSH
1423: CALL 45793 0 2
1427: PUSH
1428: LD_INT 30
1430: PPUSH
1431: LD_INT 2
1433: PPUSH
1434: CALL 45793 0 2
1438: PUSH
1439: LD_INT 36
1441: PPUSH
1442: LD_INT 3
1444: PPUSH
1445: CALL 45793 0 2
1449: PUSH
1450: LD_INT 42
1452: PPUSH
1453: LD_INT 4
1455: PPUSH
1456: CALL 45793 0 2
1460: PUSH
1461: LD_INT 48
1463: PPUSH
1464: LD_INT 5
1466: PPUSH
1467: CALL 45793 0 2
1471: PUSH
1472: LD_INT 51
1474: PPUSH
1475: LD_INT 5
1477: PPUSH
1478: CALL 45793 0 2
1482: PUSH
1483: LD_INT 57
1485: PPUSH
1486: LD_INT 0
1488: PPUSH
1489: CALL 45793 0 2
1493: PUSH
1494: LD_INT 63
1496: PPUSH
1497: LD_INT 1
1499: PPUSH
1500: CALL 45793 0 2
1504: PUSH
1505: EMPTY
1506: LIST
1507: LIST
1508: LIST
1509: LIST
1510: LIST
1511: LIST
1512: LIST
1513: LIST
1514: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1515: LD_ADDR_VAR 0 3
1519: PUSH
1520: DOUBLE
1521: LD_INT 1
1523: DEC
1524: ST_TO_ADDR
1525: LD_VAR 0 8
1529: PPUSH
1530: CALL 5142 0 1
1534: PUSH
1535: FOR_TO
1536: IFFALSE 1640
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1538: LD_ADDR_EXP 21
1542: PUSH
1543: LD_EXP 21
1547: PPUSH
1548: LD_VAR 0 3
1552: PPUSH
1553: LD_VAR 0 8
1557: PUSH
1558: LD_VAR 0 3
1562: ARRAY
1563: PUSH
1564: LD_INT 1
1566: ARRAY
1567: PPUSH
1568: LD_VAR 0 8
1572: PUSH
1573: LD_VAR 0 3
1577: ARRAY
1578: PUSH
1579: LD_INT 3
1581: ARRAY
1582: PPUSH
1583: LD_INT 10
1585: PPUSH
1586: CALL_OW 272
1590: PUSH
1591: LD_VAR 0 8
1595: PUSH
1596: LD_VAR 0 3
1600: ARRAY
1601: PUSH
1602: LD_INT 2
1604: ARRAY
1605: PPUSH
1606: LD_VAR 0 8
1610: PUSH
1611: LD_VAR 0 3
1615: ARRAY
1616: PUSH
1617: LD_INT 3
1619: ARRAY
1620: PPUSH
1621: LD_INT 10
1623: PPUSH
1624: CALL_OW 273
1628: PUSH
1629: EMPTY
1630: LIST
1631: LIST
1632: PPUSH
1633: CALL_OW 1
1637: ST_TO_ADDR
1638: GO 1535
1640: POP
1641: POP
// if hasOil then
1642: LD_VAR 0 5
1646: IFFALSE 1785
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1648: LD_ADDR_VAR 0 4
1652: PUSH
1653: LD_EXP 6
1657: PUSH
1658: LD_INT 6
1660: ARRAY
1661: PUSH
1662: LD_INT 2
1664: EQUAL
1665: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) , GetSourcesFromArea ( oilArea7 , all ) , GetSourcesFromArea ( oilArea8 , all ) ] ;
1666: LD_ADDR_EXP 12
1670: PUSH
1671: LD_INT 25
1673: PPUSH
1674: LD_VAR 0 4
1678: PPUSH
1679: CALL 45626 0 2
1683: PUSH
1684: LD_INT 31
1686: PPUSH
1687: LD_VAR 0 4
1691: PPUSH
1692: CALL 45626 0 2
1696: PUSH
1697: LD_INT 37
1699: PPUSH
1700: LD_VAR 0 4
1704: PPUSH
1705: CALL 45626 0 2
1709: PUSH
1710: LD_INT 43
1712: PPUSH
1713: LD_VAR 0 4
1717: PPUSH
1718: CALL 45626 0 2
1722: PUSH
1723: LD_INT 49
1725: PPUSH
1726: LD_VAR 0 4
1730: PPUSH
1731: CALL 45626 0 2
1735: PUSH
1736: LD_INT 52
1738: PPUSH
1739: LD_VAR 0 4
1743: PPUSH
1744: CALL 45626 0 2
1748: PUSH
1749: LD_INT 58
1751: PPUSH
1752: LD_VAR 0 4
1756: PPUSH
1757: CALL 45626 0 2
1761: PUSH
1762: LD_INT 64
1764: PPUSH
1765: LD_VAR 0 4
1769: PPUSH
1770: CALL 45626 0 2
1774: PUSH
1775: EMPTY
1776: LIST
1777: LIST
1778: LIST
1779: LIST
1780: LIST
1781: LIST
1782: LIST
1783: LIST
1784: ST_TO_ADDR
// end ; if hasSib then
1785: LD_VAR 0 6
1789: IFFALSE 1928
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1791: LD_ADDR_VAR 0 4
1795: PUSH
1796: LD_EXP 6
1800: PUSH
1801: LD_INT 7
1803: ARRAY
1804: PUSH
1805: LD_INT 2
1807: EQUAL
1808: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) , GetSourcesFromArea ( sibArea7 , all ) , GetSourcesFromArea ( sibArea8 , all ) ] ;
1809: LD_ADDR_EXP 13
1813: PUSH
1814: LD_INT 26
1816: PPUSH
1817: LD_VAR 0 4
1821: PPUSH
1822: CALL 45626 0 2
1826: PUSH
1827: LD_INT 32
1829: PPUSH
1830: LD_VAR 0 4
1834: PPUSH
1835: CALL 45626 0 2
1839: PUSH
1840: LD_INT 38
1842: PPUSH
1843: LD_VAR 0 4
1847: PPUSH
1848: CALL 45626 0 2
1852: PUSH
1853: LD_INT 44
1855: PPUSH
1856: LD_VAR 0 4
1860: PPUSH
1861: CALL 45626 0 2
1865: PUSH
1866: LD_INT 50
1868: PPUSH
1869: LD_VAR 0 4
1873: PPUSH
1874: CALL 45626 0 2
1878: PUSH
1879: LD_INT 53
1881: PPUSH
1882: LD_VAR 0 4
1886: PPUSH
1887: CALL 45626 0 2
1891: PUSH
1892: LD_INT 59
1894: PPUSH
1895: LD_VAR 0 4
1899: PPUSH
1900: CALL 45626 0 2
1904: PUSH
1905: LD_INT 65
1907: PPUSH
1908: LD_VAR 0 4
1912: PPUSH
1913: CALL 45626 0 2
1917: PUSH
1918: EMPTY
1919: LIST
1920: LIST
1921: LIST
1922: LIST
1923: LIST
1924: LIST
1925: LIST
1926: LIST
1927: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1928: LD_VAR 0 7
1932: PUSH
1933: LD_INT 1
1935: GREATEREQUAL
1936: IFFALSE 1948
// mpDepots := startPos ;
1938: LD_ADDR_EXP 14
1942: PUSH
1943: LD_VAR 0 8
1947: ST_TO_ADDR
// if baseLevel >= 2 then
1948: LD_VAR 0 7
1952: PUSH
1953: LD_INT 2
1955: GREATEREQUAL
1956: IFFALSE 2373
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunArea1a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea1 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea2a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2b , 0 ) , b_armoury ^ GetBuildingFromArea ( armArea2 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea3a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea3 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea4a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4b , 0 ) , b_armoury ^ GetBuildingFromArea ( armArea4 , 1 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea5a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea5 , 2 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea6a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea6 , 2 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea7a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea7b , 3 ) , b_armoury ^ GetBuildingFromArea ( armArea7 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea8a , 3 ) , b_breastwork ^ GetBuildingFromArea ( bunArea8b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea8 , 4 ) ] ] ;
1958: LD_ADDR_EXP 17
1962: PUSH
1963: LD_INT 31
1965: PUSH
1966: LD_INT 27
1968: PPUSH
1969: LD_INT 5
1971: PPUSH
1972: CALL 45793 0 2
1976: ADD
1977: PUSH
1978: LD_INT 31
1980: PUSH
1981: LD_INT 28
1983: PPUSH
1984: LD_INT 4
1986: PPUSH
1987: CALL 45793 0 2
1991: ADD
1992: PUSH
1993: LD_INT 4
1995: PUSH
1996: LD_INT 29
1998: PPUSH
1999: LD_INT 4
2001: PPUSH
2002: CALL 45793 0 2
2006: ADD
2007: PUSH
2008: EMPTY
2009: LIST
2010: LIST
2011: LIST
2012: PUSH
2013: LD_INT 31
2015: PUSH
2016: LD_INT 33
2018: PPUSH
2019: LD_INT 5
2021: PPUSH
2022: CALL 45793 0 2
2026: ADD
2027: PUSH
2028: LD_INT 31
2030: PUSH
2031: LD_INT 34
2033: PPUSH
2034: LD_INT 0
2036: PPUSH
2037: CALL 45793 0 2
2041: ADD
2042: PUSH
2043: LD_INT 4
2045: PUSH
2046: LD_INT 35
2048: PPUSH
2049: LD_INT 5
2051: PPUSH
2052: CALL 45793 0 2
2056: ADD
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: LIST
2062: PUSH
2063: LD_INT 31
2065: PUSH
2066: LD_INT 39
2068: PPUSH
2069: LD_INT 0
2071: PPUSH
2072: CALL 45793 0 2
2076: ADD
2077: PUSH
2078: LD_INT 31
2080: PUSH
2081: LD_INT 40
2083: PPUSH
2084: LD_INT 5
2086: PPUSH
2087: CALL 45793 0 2
2091: ADD
2092: PUSH
2093: LD_INT 4
2095: PUSH
2096: LD_INT 41
2098: PPUSH
2099: LD_INT 0
2101: PPUSH
2102: CALL 45793 0 2
2106: ADD
2107: PUSH
2108: EMPTY
2109: LIST
2110: LIST
2111: LIST
2112: PUSH
2113: LD_INT 31
2115: PUSH
2116: LD_INT 45
2118: PPUSH
2119: LD_INT 1
2121: PPUSH
2122: CALL 45793 0 2
2126: ADD
2127: PUSH
2128: LD_INT 31
2130: PUSH
2131: LD_INT 46
2133: PPUSH
2134: LD_INT 0
2136: PPUSH
2137: CALL 45793 0 2
2141: ADD
2142: PUSH
2143: LD_INT 4
2145: PUSH
2146: LD_INT 47
2148: PPUSH
2149: LD_INT 1
2151: PPUSH
2152: CALL 45793 0 2
2156: ADD
2157: PUSH
2158: EMPTY
2159: LIST
2160: LIST
2161: LIST
2162: PUSH
2163: LD_INT 31
2165: PUSH
2166: LD_INT 69
2168: PPUSH
2169: LD_INT 2
2171: PPUSH
2172: CALL 45793 0 2
2176: ADD
2177: PUSH
2178: LD_INT 31
2180: PUSH
2181: LD_INT 70
2183: PPUSH
2184: LD_INT 2
2186: PPUSH
2187: CALL 45793 0 2
2191: ADD
2192: PUSH
2193: LD_INT 4
2195: PUSH
2196: LD_INT 71
2198: PPUSH
2199: LD_INT 2
2201: PPUSH
2202: CALL 45793 0 2
2206: ADD
2207: PUSH
2208: EMPTY
2209: LIST
2210: LIST
2211: LIST
2212: PUSH
2213: LD_INT 31
2215: PUSH
2216: LD_INT 54
2218: PPUSH
2219: LD_INT 2
2221: PPUSH
2222: CALL 45793 0 2
2226: ADD
2227: PUSH
2228: LD_INT 31
2230: PUSH
2231: LD_INT 55
2233: PPUSH
2234: LD_INT 2
2236: PPUSH
2237: CALL 45793 0 2
2241: ADD
2242: PUSH
2243: LD_INT 4
2245: PUSH
2246: LD_INT 56
2248: PPUSH
2249: LD_INT 2
2251: PPUSH
2252: CALL 45793 0 2
2256: ADD
2257: PUSH
2258: EMPTY
2259: LIST
2260: LIST
2261: LIST
2262: PUSH
2263: LD_INT 31
2265: PUSH
2266: LD_INT 60
2268: PPUSH
2269: LD_INT 4
2271: PPUSH
2272: CALL 45793 0 2
2276: ADD
2277: PUSH
2278: LD_INT 31
2280: PUSH
2281: LD_INT 61
2283: PPUSH
2284: LD_INT 3
2286: PPUSH
2287: CALL 45793 0 2
2291: ADD
2292: PUSH
2293: LD_INT 4
2295: PUSH
2296: LD_INT 62
2298: PPUSH
2299: LD_INT 3
2301: PPUSH
2302: CALL 45793 0 2
2306: ADD
2307: PUSH
2308: EMPTY
2309: LIST
2310: LIST
2311: LIST
2312: PUSH
2313: LD_INT 31
2315: PUSH
2316: LD_INT 66
2318: PPUSH
2319: LD_INT 3
2321: PPUSH
2322: CALL 45793 0 2
2326: ADD
2327: PUSH
2328: LD_INT 31
2330: PUSH
2331: LD_INT 67
2333: PPUSH
2334: LD_INT 4
2336: PPUSH
2337: CALL 45793 0 2
2341: ADD
2342: PUSH
2343: LD_INT 4
2345: PUSH
2346: LD_INT 68
2348: PPUSH
2349: LD_INT 4
2351: PPUSH
2352: CALL 45793 0 2
2356: ADD
2357: PUSH
2358: EMPTY
2359: LIST
2360: LIST
2361: LIST
2362: PUSH
2363: EMPTY
2364: LIST
2365: LIST
2366: LIST
2367: LIST
2368: LIST
2369: LIST
2370: LIST
2371: LIST
2372: ST_TO_ADDR
// end ; end ;
2373: LD_VAR 0 2
2377: RET
// every 0 0$2 marked mpActive do var i , x , tmp , areas , time , normalTime , delayTime , maxTime ;
2378: GO 2380
2380: DISABLE
2381: LD_INT 0
2383: PPUSH
2384: PPUSH
2385: PPUSH
2386: PPUSH
2387: PPUSH
2388: PPUSH
2389: PPUSH
2390: PPUSH
// begin if not mpShipments then
2391: LD_EXP 27
2395: NOT
2396: IFFALSE 2400
// exit ;
2398: GO 2855
// case mpShipments of 1 :
2400: LD_EXP 27
2404: PUSH
2405: LD_INT 1
2407: DOUBLE
2408: EQUAL
2409: IFTRUE 2413
2411: GO 2448
2413: POP
// begin time := 0 0$30 ;
2414: LD_ADDR_VAR 0 5
2418: PUSH
2419: LD_INT 1050
2421: ST_TO_ADDR
// normalTime := 0 0$30 ;
2422: LD_ADDR_VAR 0 6
2426: PUSH
2427: LD_INT 1050
2429: ST_TO_ADDR
// maxTime := 1 1$20 ;
2430: LD_ADDR_VAR 0 8
2434: PUSH
2435: LD_INT 2800
2437: ST_TO_ADDR
// delayTime := 0 0$5 ;
2438: LD_ADDR_VAR 0 7
2442: PUSH
2443: LD_INT 175
2445: ST_TO_ADDR
// end ; 2 :
2446: GO 2578
2448: LD_INT 2
2450: DOUBLE
2451: EQUAL
2452: IFTRUE 2456
2454: GO 2491
2456: POP
// begin time := 0 0$25 ;
2457: LD_ADDR_VAR 0 5
2461: PUSH
2462: LD_INT 875
2464: ST_TO_ADDR
// normalTime := 0 0$25 ;
2465: LD_ADDR_VAR 0 6
2469: PUSH
2470: LD_INT 875
2472: ST_TO_ADDR
// maxTime := 1 1$10 ;
2473: LD_ADDR_VAR 0 8
2477: PUSH
2478: LD_INT 2450
2480: ST_TO_ADDR
// delayTime := 0 0$4 ;
2481: LD_ADDR_VAR 0 7
2485: PUSH
2486: LD_INT 140
2488: ST_TO_ADDR
// end ; 3 :
2489: GO 2578
2491: LD_INT 3
2493: DOUBLE
2494: EQUAL
2495: IFTRUE 2499
2497: GO 2534
2499: POP
// begin time := 0 0$20 ;
2500: LD_ADDR_VAR 0 5
2504: PUSH
2505: LD_INT 700
2507: ST_TO_ADDR
// normalTime := 0 0$20 ;
2508: LD_ADDR_VAR 0 6
2512: PUSH
2513: LD_INT 700
2515: ST_TO_ADDR
// maxTime := 1 1$00 ;
2516: LD_ADDR_VAR 0 8
2520: PUSH
2521: LD_INT 2100
2523: ST_TO_ADDR
// delayTime := 0 0$3 ;
2524: LD_ADDR_VAR 0 7
2528: PUSH
2529: LD_INT 105
2531: ST_TO_ADDR
// end ; 4 :
2532: GO 2578
2534: LD_INT 4
2536: DOUBLE
2537: EQUAL
2538: IFTRUE 2542
2540: GO 2577
2542: POP
// begin time := 0 0$15 ;
2543: LD_ADDR_VAR 0 5
2547: PUSH
2548: LD_INT 525
2550: ST_TO_ADDR
// normalTime := 0 0$15 ;
2551: LD_ADDR_VAR 0 6
2555: PUSH
2556: LD_INT 525
2558: ST_TO_ADDR
// maxTime := 0 0$55 ;
2559: LD_ADDR_VAR 0 8
2563: PUSH
2564: LD_INT 1925
2566: ST_TO_ADDR
// delayTime := 0 0$2 ;
2567: LD_ADDR_VAR 0 7
2571: PUSH
2572: LD_INT 70
2574: ST_TO_ADDR
// end ; end ;
2575: GO 2578
2577: POP
// areas := [ Between1 , Between2 , Between3 , Between4 , Center1 , Center2 ] ;
2578: LD_ADDR_VAR 0 4
2582: PUSH
2583: LD_INT 10
2585: PUSH
2586: LD_INT 11
2588: PUSH
2589: LD_INT 12
2591: PUSH
2592: LD_INT 13
2594: PUSH
2595: LD_INT 14
2597: PUSH
2598: LD_INT 15
2600: PUSH
2601: EMPTY
2602: LIST
2603: LIST
2604: LIST
2605: LIST
2606: LIST
2607: LIST
2608: ST_TO_ADDR
// tmp := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
2609: LD_ADDR_VAR 0 3
2613: PUSH
2614: LD_INT 1
2616: PUSH
2617: LD_INT 2
2619: PUSH
2620: LD_INT 3
2622: PUSH
2623: LD_INT 4
2625: PUSH
2626: LD_INT 5
2628: PUSH
2629: LD_INT 6
2631: PUSH
2632: LD_INT 7
2634: PUSH
2635: LD_INT 8
2637: PUSH
2638: EMPTY
2639: LIST
2640: LIST
2641: LIST
2642: LIST
2643: LIST
2644: LIST
2645: LIST
2646: LIST
2647: ST_TO_ADDR
// for i := 1 to 8 do
2648: LD_ADDR_VAR 0 1
2652: PUSH
2653: DOUBLE
2654: LD_INT 1
2656: DEC
2657: ST_TO_ADDR
2658: LD_INT 8
2660: PUSH
2661: FOR_TO
2662: IFFALSE 2709
// begin if not mpSidePositions [ i ] then
2664: LD_EXP 7
2668: PUSH
2669: LD_VAR 0 1
2673: ARRAY
2674: NOT
2675: IFFALSE 2679
// continue ;
2677: GO 2661
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2679: LD_ADDR_VAR 0 4
2683: PUSH
2684: LD_VAR 0 4
2688: PUSH
2689: LD_VAR 0 3
2693: PUSH
2694: LD_EXP 7
2698: PUSH
2699: LD_VAR 0 1
2703: ARRAY
2704: ARRAY
2705: ADD
2706: ST_TO_ADDR
// end ;
2707: GO 2661
2709: POP
2710: POP
// x := 1 ;
2711: LD_ADDR_VAR 0 2
2715: PUSH
2716: LD_INT 1
2718: ST_TO_ADDR
// repeat wait ( time ) ;
2719: LD_VAR 0 5
2723: PPUSH
2724: CALL_OW 67
// x := Inc ( x ) ;
2728: LD_ADDR_VAR 0 2
2732: PUSH
2733: LD_VAR 0 2
2737: PPUSH
2738: CALL 42447 0 1
2742: ST_TO_ADDR
// if x > 5 then
2743: LD_VAR 0 2
2747: PUSH
2748: LD_INT 5
2750: GREATER
2751: IFFALSE 2761
// x := 1 ;
2753: LD_ADDR_VAR 0 2
2757: PUSH
2758: LD_INT 1
2760: ST_TO_ADDR
// for i in areas do
2761: LD_ADDR_VAR 0 1
2765: PUSH
2766: LD_VAR 0 4
2770: PUSH
2771: FOR_IN
2772: IFFALSE 2811
// begin if GetResourceArea ( i , mat_cans ) < 30 then
2774: LD_VAR 0 1
2778: PPUSH
2779: LD_INT 1
2781: PPUSH
2782: CALL_OW 287
2786: PUSH
2787: LD_INT 30
2789: LESS
2790: IFFALSE 2809
// begin CreateCratesArea ( x , i , true ) ;
2792: LD_VAR 0 2
2796: PPUSH
2797: LD_VAR 0 1
2801: PPUSH
2802: LD_INT 1
2804: PPUSH
2805: CALL_OW 55
// end ; end ;
2809: GO 2771
2811: POP
2812: POP
// time := time + delayTime ;
2813: LD_ADDR_VAR 0 5
2817: PUSH
2818: LD_VAR 0 5
2822: PUSH
2823: LD_VAR 0 7
2827: PLUS
2828: ST_TO_ADDR
// if time > maxTime then
2829: LD_VAR 0 5
2833: PUSH
2834: LD_VAR 0 8
2838: GREATER
2839: IFFALSE 2851
// time := normalTime ;
2841: LD_ADDR_VAR 0 5
2845: PUSH
2846: LD_VAR 0 6
2850: ST_TO_ADDR
// until false ;
2851: LD_INT 0
2853: IFFALSE 2719
// end ; end_of_file
2855: PPOPN 8
2857: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2858: LD_VAR 0 1
2862: PPUSH
2863: CALL 55481 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2867: LD_VAR 0 1
2871: PPUSH
2872: CALL 51576 0 1
// end ;
2876: PPOPN 1
2878: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2879: LD_VAR 0 1
2883: PPUSH
2884: CALL 55498 0 1
// end ;
2888: PPOPN 1
2890: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2891: LD_VAR 0 1
2895: PPUSH
2896: CALL 52247 0 1
2900: PPOPN 1
2902: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2903: LD_VAR 0 1
2907: PPUSH
2908: LD_VAR 0 2
2912: PPUSH
2913: CALL 55539 0 2
2917: PPOPN 2
2919: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; end_of_file
2920: LD_VAR 0 1
2924: PPUSH
2925: LD_VAR 0 2
2929: PPUSH
2930: LD_VAR 0 3
2934: PPUSH
2935: CALL 52300 0 3
2939: PPOPN 3
2941: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
2942: LD_INT 0
2944: PPUSH
2945: PPUSH
// if exist_mode then
2946: LD_VAR 0 2
2950: IFFALSE 2996
// begin unit := CreateCharacter ( prefix & ident ) ;
2952: LD_ADDR_VAR 0 5
2956: PUSH
2957: LD_VAR 0 3
2961: PUSH
2962: LD_VAR 0 1
2966: STR
2967: PPUSH
2968: CALL_OW 34
2972: ST_TO_ADDR
// if unit then
2973: LD_VAR 0 5
2977: IFFALSE 2994
// DeleteCharacters ( prefix & ident ) ;
2979: LD_VAR 0 3
2983: PUSH
2984: LD_VAR 0 1
2988: STR
2989: PPUSH
2990: CALL_OW 40
// end else
2994: GO 3011
// unit := NewCharacter ( ident ) ;
2996: LD_ADDR_VAR 0 5
3000: PUSH
3001: LD_VAR 0 1
3005: PPUSH
3006: CALL_OW 25
3010: ST_TO_ADDR
// result := unit ;
3011: LD_ADDR_VAR 0 4
3015: PUSH
3016: LD_VAR 0 5
3020: ST_TO_ADDR
// end ;
3021: LD_VAR 0 4
3025: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
3026: LD_INT 0
3028: PPUSH
3029: PPUSH
// if exist_mode then
3030: LD_VAR 0 2
3034: IFFALSE 3059
// unit := CreateCharacter ( prefix & ident ) else
3036: LD_ADDR_VAR 0 5
3040: PUSH
3041: LD_VAR 0 3
3045: PUSH
3046: LD_VAR 0 1
3050: STR
3051: PPUSH
3052: CALL_OW 34
3056: ST_TO_ADDR
3057: GO 3074
// unit := NewCharacter ( ident ) ;
3059: LD_ADDR_VAR 0 5
3063: PUSH
3064: LD_VAR 0 1
3068: PPUSH
3069: CALL_OW 25
3073: ST_TO_ADDR
// result := unit ;
3074: LD_ADDR_VAR 0 4
3078: PUSH
3079: LD_VAR 0 5
3083: ST_TO_ADDR
// end ;
3084: LD_VAR 0 4
3088: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
3089: LD_INT 0
3091: PPUSH
3092: PPUSH
// if not side or not nation then
3093: LD_VAR 0 1
3097: NOT
3098: IFTRUE 3107
3100: PUSH
3101: LD_VAR 0 2
3105: NOT
3106: OR
3107: IFFALSE 3111
// exit ;
3109: GO 3881
// case nation of nation_american :
3111: LD_VAR 0 2
3115: PUSH
3116: LD_INT 1
3118: DOUBLE
3119: EQUAL
3120: IFTRUE 3124
3122: GO 3338
3124: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
3125: LD_ADDR_VAR 0 4
3129: PUSH
3130: LD_INT 35
3132: PUSH
3133: LD_INT 45
3135: PUSH
3136: LD_INT 46
3138: PUSH
3139: LD_INT 47
3141: PUSH
3142: LD_INT 82
3144: PUSH
3145: LD_INT 83
3147: PUSH
3148: LD_INT 84
3150: PUSH
3151: LD_INT 85
3153: PUSH
3154: LD_INT 86
3156: PUSH
3157: LD_INT 1
3159: PUSH
3160: LD_INT 2
3162: PUSH
3163: LD_INT 6
3165: PUSH
3166: LD_INT 15
3168: PUSH
3169: LD_INT 16
3171: PUSH
3172: LD_INT 7
3174: PUSH
3175: LD_INT 12
3177: PUSH
3178: LD_INT 13
3180: PUSH
3181: LD_INT 10
3183: PUSH
3184: LD_INT 14
3186: PUSH
3187: LD_INT 20
3189: PUSH
3190: LD_INT 21
3192: PUSH
3193: LD_INT 22
3195: PUSH
3196: LD_INT 25
3198: PUSH
3199: LD_INT 32
3201: PUSH
3202: LD_INT 27
3204: PUSH
3205: LD_INT 36
3207: PUSH
3208: LD_INT 69
3210: PUSH
3211: LD_INT 39
3213: PUSH
3214: LD_INT 34
3216: PUSH
3217: LD_INT 40
3219: PUSH
3220: LD_INT 48
3222: PUSH
3223: LD_INT 49
3225: PUSH
3226: LD_INT 50
3228: PUSH
3229: LD_INT 51
3231: PUSH
3232: LD_INT 52
3234: PUSH
3235: LD_INT 53
3237: PUSH
3238: LD_INT 54
3240: PUSH
3241: LD_INT 55
3243: PUSH
3244: LD_INT 56
3246: PUSH
3247: LD_INT 57
3249: PUSH
3250: LD_INT 58
3252: PUSH
3253: LD_INT 59
3255: PUSH
3256: LD_INT 60
3258: PUSH
3259: LD_INT 61
3261: PUSH
3262: LD_INT 62
3264: PUSH
3265: LD_INT 80
3267: PUSH
3268: LD_INT 82
3270: PUSH
3271: LD_INT 83
3273: PUSH
3274: LD_INT 84
3276: PUSH
3277: LD_INT 85
3279: PUSH
3280: LD_INT 86
3282: PUSH
3283: EMPTY
3284: LIST
3285: LIST
3286: LIST
3287: LIST
3288: LIST
3289: LIST
3290: LIST
3291: LIST
3292: LIST
3293: LIST
3294: LIST
3295: LIST
3296: LIST
3297: LIST
3298: LIST
3299: LIST
3300: LIST
3301: LIST
3302: LIST
3303: LIST
3304: LIST
3305: LIST
3306: LIST
3307: LIST
3308: LIST
3309: LIST
3310: LIST
3311: LIST
3312: LIST
3313: LIST
3314: LIST
3315: LIST
3316: LIST
3317: LIST
3318: LIST
3319: LIST
3320: LIST
3321: LIST
3322: LIST
3323: LIST
3324: LIST
3325: LIST
3326: LIST
3327: LIST
3328: LIST
3329: LIST
3330: LIST
3331: LIST
3332: LIST
3333: LIST
3334: LIST
3335: ST_TO_ADDR
3336: GO 3803
3338: LD_INT 2
3340: DOUBLE
3341: EQUAL
3342: IFTRUE 3346
3344: GO 3572
3346: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
3347: LD_ADDR_VAR 0 4
3351: PUSH
3352: LD_INT 35
3354: PUSH
3355: LD_INT 45
3357: PUSH
3358: LD_INT 46
3360: PUSH
3361: LD_INT 47
3363: PUSH
3364: LD_INT 82
3366: PUSH
3367: LD_INT 83
3369: PUSH
3370: LD_INT 84
3372: PUSH
3373: LD_INT 85
3375: PUSH
3376: LD_INT 87
3378: PUSH
3379: LD_INT 70
3381: PUSH
3382: LD_INT 1
3384: PUSH
3385: LD_INT 11
3387: PUSH
3388: LD_INT 3
3390: PUSH
3391: LD_INT 4
3393: PUSH
3394: LD_INT 5
3396: PUSH
3397: LD_INT 6
3399: PUSH
3400: LD_INT 15
3402: PUSH
3403: LD_INT 18
3405: PUSH
3406: LD_INT 7
3408: PUSH
3409: LD_INT 17
3411: PUSH
3412: LD_INT 8
3414: PUSH
3415: LD_INT 20
3417: PUSH
3418: LD_INT 21
3420: PUSH
3421: LD_INT 22
3423: PUSH
3424: LD_INT 72
3426: PUSH
3427: LD_INT 26
3429: PUSH
3430: LD_INT 69
3432: PUSH
3433: LD_INT 39
3435: PUSH
3436: LD_INT 40
3438: PUSH
3439: LD_INT 41
3441: PUSH
3442: LD_INT 42
3444: PUSH
3445: LD_INT 43
3447: PUSH
3448: LD_INT 48
3450: PUSH
3451: LD_INT 49
3453: PUSH
3454: LD_INT 50
3456: PUSH
3457: LD_INT 51
3459: PUSH
3460: LD_INT 52
3462: PUSH
3463: LD_INT 53
3465: PUSH
3466: LD_INT 54
3468: PUSH
3469: LD_INT 55
3471: PUSH
3472: LD_INT 56
3474: PUSH
3475: LD_INT 60
3477: PUSH
3478: LD_INT 61
3480: PUSH
3481: LD_INT 62
3483: PUSH
3484: LD_INT 66
3486: PUSH
3487: LD_INT 67
3489: PUSH
3490: LD_INT 68
3492: PUSH
3493: LD_INT 81
3495: PUSH
3496: LD_INT 82
3498: PUSH
3499: LD_INT 83
3501: PUSH
3502: LD_INT 84
3504: PUSH
3505: LD_INT 85
3507: PUSH
3508: LD_INT 87
3510: PUSH
3511: LD_INT 88
3513: PUSH
3514: EMPTY
3515: LIST
3516: LIST
3517: LIST
3518: LIST
3519: LIST
3520: LIST
3521: LIST
3522: LIST
3523: LIST
3524: LIST
3525: LIST
3526: LIST
3527: LIST
3528: LIST
3529: LIST
3530: LIST
3531: LIST
3532: LIST
3533: LIST
3534: LIST
3535: LIST
3536: LIST
3537: LIST
3538: LIST
3539: LIST
3540: LIST
3541: LIST
3542: LIST
3543: LIST
3544: LIST
3545: LIST
3546: LIST
3547: LIST
3548: LIST
3549: LIST
3550: LIST
3551: LIST
3552: LIST
3553: LIST
3554: LIST
3555: LIST
3556: LIST
3557: LIST
3558: LIST
3559: LIST
3560: LIST
3561: LIST
3562: LIST
3563: LIST
3564: LIST
3565: LIST
3566: LIST
3567: LIST
3568: LIST
3569: ST_TO_ADDR
3570: GO 3803
3572: LD_INT 3
3574: DOUBLE
3575: EQUAL
3576: IFTRUE 3580
3578: GO 3802
3580: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
3581: LD_ADDR_VAR 0 4
3585: PUSH
3586: LD_INT 46
3588: PUSH
3589: LD_INT 47
3591: PUSH
3592: LD_INT 1
3594: PUSH
3595: LD_INT 2
3597: PUSH
3598: LD_INT 82
3600: PUSH
3601: LD_INT 83
3603: PUSH
3604: LD_INT 84
3606: PUSH
3607: LD_INT 85
3609: PUSH
3610: LD_INT 86
3612: PUSH
3613: LD_INT 11
3615: PUSH
3616: LD_INT 9
3618: PUSH
3619: LD_INT 20
3621: PUSH
3622: LD_INT 19
3624: PUSH
3625: LD_INT 21
3627: PUSH
3628: LD_INT 24
3630: PUSH
3631: LD_INT 22
3633: PUSH
3634: LD_INT 25
3636: PUSH
3637: LD_INT 28
3639: PUSH
3640: LD_INT 29
3642: PUSH
3643: LD_INT 30
3645: PUSH
3646: LD_INT 31
3648: PUSH
3649: LD_INT 37
3651: PUSH
3652: LD_INT 38
3654: PUSH
3655: LD_INT 32
3657: PUSH
3658: LD_INT 27
3660: PUSH
3661: LD_INT 33
3663: PUSH
3664: LD_INT 69
3666: PUSH
3667: LD_INT 39
3669: PUSH
3670: LD_INT 34
3672: PUSH
3673: LD_INT 40
3675: PUSH
3676: LD_INT 71
3678: PUSH
3679: LD_INT 23
3681: PUSH
3682: LD_INT 44
3684: PUSH
3685: LD_INT 48
3687: PUSH
3688: LD_INT 49
3690: PUSH
3691: LD_INT 50
3693: PUSH
3694: LD_INT 51
3696: PUSH
3697: LD_INT 52
3699: PUSH
3700: LD_INT 53
3702: PUSH
3703: LD_INT 54
3705: PUSH
3706: LD_INT 55
3708: PUSH
3709: LD_INT 56
3711: PUSH
3712: LD_INT 57
3714: PUSH
3715: LD_INT 58
3717: PUSH
3718: LD_INT 59
3720: PUSH
3721: LD_INT 63
3723: PUSH
3724: LD_INT 64
3726: PUSH
3727: LD_INT 65
3729: PUSH
3730: LD_INT 82
3732: PUSH
3733: LD_INT 83
3735: PUSH
3736: LD_INT 84
3738: PUSH
3739: LD_INT 85
3741: PUSH
3742: LD_INT 86
3744: PUSH
3745: EMPTY
3746: LIST
3747: LIST
3748: LIST
3749: LIST
3750: LIST
3751: LIST
3752: LIST
3753: LIST
3754: LIST
3755: LIST
3756: LIST
3757: LIST
3758: LIST
3759: LIST
3760: LIST
3761: LIST
3762: LIST
3763: LIST
3764: LIST
3765: LIST
3766: LIST
3767: LIST
3768: LIST
3769: LIST
3770: LIST
3771: LIST
3772: LIST
3773: LIST
3774: LIST
3775: LIST
3776: LIST
3777: LIST
3778: LIST
3779: LIST
3780: LIST
3781: LIST
3782: LIST
3783: LIST
3784: LIST
3785: LIST
3786: LIST
3787: LIST
3788: LIST
3789: LIST
3790: LIST
3791: LIST
3792: LIST
3793: LIST
3794: LIST
3795: LIST
3796: LIST
3797: LIST
3798: LIST
3799: ST_TO_ADDR
3800: GO 3803
3802: POP
// if state > - 1 and state < 3 then
3803: LD_VAR 0 3
3807: PUSH
3808: LD_INT 1
3810: NEG
3811: GREATER
3812: IFFALSE 3824
3814: PUSH
3815: LD_VAR 0 3
3819: PUSH
3820: LD_INT 3
3822: LESS
3823: AND
3824: IFFALSE 3881
// for i in result do
3826: LD_ADDR_VAR 0 5
3830: PUSH
3831: LD_VAR 0 4
3835: PUSH
3836: FOR_IN
3837: IFFALSE 3879
// if GetTech ( i , side ) <> state then
3839: LD_VAR 0 5
3843: PPUSH
3844: LD_VAR 0 1
3848: PPUSH
3849: CALL_OW 321
3853: PUSH
3854: LD_VAR 0 3
3858: NONEQUAL
3859: IFFALSE 3877
// result := result diff i ;
3861: LD_ADDR_VAR 0 4
3865: PUSH
3866: LD_VAR 0 4
3870: PUSH
3871: LD_VAR 0 5
3875: DIFF
3876: ST_TO_ADDR
3877: GO 3836
3879: POP
3880: POP
// end ;
3881: LD_VAR 0 4
3885: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
3886: LD_INT 0
3888: PPUSH
3889: PPUSH
3890: PPUSH
// result := true ;
3891: LD_ADDR_VAR 0 3
3895: PUSH
3896: LD_INT 1
3898: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
3899: LD_ADDR_VAR 0 5
3903: PUSH
3904: LD_VAR 0 2
3908: PPUSH
3909: CALL_OW 480
3913: ST_TO_ADDR
// if not tmp then
3914: LD_VAR 0 5
3918: NOT
3919: IFFALSE 3923
// exit ;
3921: GO 3972
// for i in tmp do
3923: LD_ADDR_VAR 0 4
3927: PUSH
3928: LD_VAR 0 5
3932: PUSH
3933: FOR_IN
3934: IFFALSE 3970
// if GetTech ( i , side ) <> state_researched then
3936: LD_VAR 0 4
3940: PPUSH
3941: LD_VAR 0 1
3945: PPUSH
3946: CALL_OW 321
3950: PUSH
3951: LD_INT 2
3953: NONEQUAL
3954: IFFALSE 3968
// begin result := false ;
3956: LD_ADDR_VAR 0 3
3960: PUSH
3961: LD_INT 0
3963: ST_TO_ADDR
// exit ;
3964: POP
3965: POP
3966: GO 3972
// end ;
3968: GO 3933
3970: POP
3971: POP
// end ;
3972: LD_VAR 0 3
3976: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
3977: LD_INT 0
3979: PPUSH
3980: PPUSH
3981: PPUSH
3982: PPUSH
3983: PPUSH
3984: PPUSH
3985: PPUSH
3986: PPUSH
3987: PPUSH
3988: PPUSH
3989: PPUSH
3990: PPUSH
3991: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
3992: LD_VAR 0 1
3996: NOT
3997: IFTRUE 4014
3999: PUSH
4000: LD_VAR 0 1
4004: PPUSH
4005: CALL_OW 257
4009: PUSH
4010: LD_INT 9
4012: NONEQUAL
4013: OR
4014: IFFALSE 4018
// exit ;
4016: GO 4597
// side := GetSide ( unit ) ;
4018: LD_ADDR_VAR 0 9
4022: PUSH
4023: LD_VAR 0 1
4027: PPUSH
4028: CALL_OW 255
4032: ST_TO_ADDR
// tech_space := tech_spacanom ;
4033: LD_ADDR_VAR 0 12
4037: PUSH
4038: LD_INT 29
4040: ST_TO_ADDR
// tech_time := tech_taurad ;
4041: LD_ADDR_VAR 0 13
4045: PUSH
4046: LD_INT 28
4048: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
4049: LD_ADDR_VAR 0 11
4053: PUSH
4054: LD_VAR 0 1
4058: PPUSH
4059: CALL_OW 310
4063: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
4064: LD_VAR 0 11
4068: PPUSH
4069: CALL_OW 247
4073: PUSH
4074: LD_INT 2
4076: EQUAL
4077: IFFALSE 4081
// exit ;
4079: GO 4597
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4081: LD_ADDR_VAR 0 8
4085: PUSH
4086: LD_INT 81
4088: PUSH
4089: LD_VAR 0 9
4093: PUSH
4094: EMPTY
4095: LIST
4096: LIST
4097: PUSH
4098: LD_INT 3
4100: PUSH
4101: LD_INT 21
4103: PUSH
4104: LD_INT 3
4106: PUSH
4107: EMPTY
4108: LIST
4109: LIST
4110: PUSH
4111: EMPTY
4112: LIST
4113: LIST
4114: PUSH
4115: EMPTY
4116: LIST
4117: LIST
4118: PPUSH
4119: CALL_OW 69
4123: ST_TO_ADDR
// if not tmp then
4124: LD_VAR 0 8
4128: NOT
4129: IFFALSE 4133
// exit ;
4131: GO 4597
// if in_unit then
4133: LD_VAR 0 11
4137: IFFALSE 4161
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
4139: LD_ADDR_VAR 0 10
4143: PUSH
4144: LD_VAR 0 8
4148: PPUSH
4149: LD_VAR 0 11
4153: PPUSH
4154: CALL_OW 74
4158: ST_TO_ADDR
4159: GO 4181
// enemy := NearestUnitToUnit ( tmp , unit ) ;
4161: LD_ADDR_VAR 0 10
4165: PUSH
4166: LD_VAR 0 8
4170: PPUSH
4171: LD_VAR 0 1
4175: PPUSH
4176: CALL_OW 74
4180: ST_TO_ADDR
// if not enemy then
4181: LD_VAR 0 10
4185: NOT
4186: IFFALSE 4190
// exit ;
4188: GO 4597
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
4190: LD_VAR 0 11
4194: IFFALSE 4216
4196: PUSH
4197: LD_VAR 0 11
4201: PPUSH
4202: LD_VAR 0 10
4206: PPUSH
4207: CALL_OW 296
4211: PUSH
4212: LD_INT 13
4214: GREATER
4215: AND
4216: IFTRUE 4238
4218: PUSH
4219: LD_VAR 0 1
4223: PPUSH
4224: LD_VAR 0 10
4228: PPUSH
4229: CALL_OW 296
4233: PUSH
4234: LD_INT 12
4236: GREATER
4237: OR
4238: IFFALSE 4242
// exit ;
4240: GO 4597
// missile := [ 1 ] ;
4242: LD_ADDR_VAR 0 14
4246: PUSH
4247: LD_INT 1
4249: PUSH
4250: EMPTY
4251: LIST
4252: ST_TO_ADDR
// if Researched ( side , tech_space ) then
4253: LD_VAR 0 9
4257: PPUSH
4258: LD_VAR 0 12
4262: PPUSH
4263: CALL_OW 325
4267: IFFALSE 4296
// missile := Replace ( missile , missile + 1 , 2 ) ;
4269: LD_ADDR_VAR 0 14
4273: PUSH
4274: LD_VAR 0 14
4278: PPUSH
4279: LD_VAR 0 14
4283: PUSH
4284: LD_INT 1
4286: PLUS
4287: PPUSH
4288: LD_INT 2
4290: PPUSH
4291: CALL_OW 1
4295: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
4296: LD_VAR 0 9
4300: PPUSH
4301: LD_VAR 0 13
4305: PPUSH
4306: CALL_OW 325
4310: IFFALSE 4334
4312: PUSH
4313: LD_VAR 0 10
4317: PPUSH
4318: CALL_OW 255
4322: PPUSH
4323: LD_VAR 0 13
4327: PPUSH
4328: CALL_OW 325
4332: NOT
4333: AND
4334: IFFALSE 4363
// missile := Replace ( missile , missile + 1 , 3 ) ;
4336: LD_ADDR_VAR 0 14
4340: PUSH
4341: LD_VAR 0 14
4345: PPUSH
4346: LD_VAR 0 14
4350: PUSH
4351: LD_INT 1
4353: PLUS
4354: PPUSH
4355: LD_INT 3
4357: PPUSH
4358: CALL_OW 1
4362: ST_TO_ADDR
// if missile < 2 then
4363: LD_VAR 0 14
4367: PUSH
4368: LD_INT 2
4370: LESS
4371: IFFALSE 4375
// exit ;
4373: GO 4597
// x := GetX ( enemy ) ;
4375: LD_ADDR_VAR 0 4
4379: PUSH
4380: LD_VAR 0 10
4384: PPUSH
4385: CALL_OW 250
4389: ST_TO_ADDR
// y := GetY ( enemy ) ;
4390: LD_ADDR_VAR 0 5
4394: PUSH
4395: LD_VAR 0 10
4399: PPUSH
4400: CALL_OW 251
4404: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
4405: LD_ADDR_VAR 0 6
4409: PUSH
4410: LD_VAR 0 4
4414: PUSH
4415: LD_INT 1
4417: NEG
4418: PPUSH
4419: LD_INT 1
4421: PPUSH
4422: CALL_OW 12
4426: PLUS
4427: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
4428: LD_ADDR_VAR 0 7
4432: PUSH
4433: LD_VAR 0 5
4437: PUSH
4438: LD_INT 1
4440: NEG
4441: PPUSH
4442: LD_INT 1
4444: PPUSH
4445: CALL_OW 12
4449: PLUS
4450: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4451: LD_VAR 0 6
4455: PPUSH
4456: LD_VAR 0 7
4460: PPUSH
4461: CALL_OW 488
4465: NOT
4466: IFFALSE 4488
// begin _x := x ;
4468: LD_ADDR_VAR 0 6
4472: PUSH
4473: LD_VAR 0 4
4477: ST_TO_ADDR
// _y := y ;
4478: LD_ADDR_VAR 0 7
4482: PUSH
4483: LD_VAR 0 5
4487: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
4488: LD_ADDR_VAR 0 3
4492: PUSH
4493: LD_INT 1
4495: PPUSH
4496: LD_VAR 0 14
4500: PPUSH
4501: CALL_OW 12
4505: ST_TO_ADDR
// case i of 1 :
4506: LD_VAR 0 3
4510: PUSH
4511: LD_INT 1
4513: DOUBLE
4514: EQUAL
4515: IFTRUE 4519
4517: GO 4536
4519: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
4520: LD_VAR 0 1
4524: PPUSH
4525: LD_VAR 0 10
4529: PPUSH
4530: CALL_OW 115
4534: GO 4597
4536: LD_INT 2
4538: DOUBLE
4539: EQUAL
4540: IFTRUE 4544
4542: GO 4566
4544: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
4545: LD_VAR 0 1
4549: PPUSH
4550: LD_VAR 0 6
4554: PPUSH
4555: LD_VAR 0 7
4559: PPUSH
4560: CALL_OW 153
4564: GO 4597
4566: LD_INT 3
4568: DOUBLE
4569: EQUAL
4570: IFTRUE 4574
4572: GO 4596
4574: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
4575: LD_VAR 0 1
4579: PPUSH
4580: LD_VAR 0 6
4584: PPUSH
4585: LD_VAR 0 7
4589: PPUSH
4590: CALL_OW 154
4594: GO 4597
4596: POP
// end ;
4597: LD_VAR 0 2
4601: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
4602: LD_INT 0
4604: PPUSH
4605: PPUSH
4606: PPUSH
4607: PPUSH
4608: PPUSH
4609: PPUSH
// if not unit or not building then
4610: LD_VAR 0 1
4614: NOT
4615: IFTRUE 4624
4617: PUSH
4618: LD_VAR 0 2
4622: NOT
4623: OR
4624: IFFALSE 4628
// exit ;
4626: GO 4786
// x := GetX ( building ) ;
4628: LD_ADDR_VAR 0 5
4632: PUSH
4633: LD_VAR 0 2
4637: PPUSH
4638: CALL_OW 250
4642: ST_TO_ADDR
// y := GetY ( building ) ;
4643: LD_ADDR_VAR 0 6
4647: PUSH
4648: LD_VAR 0 2
4652: PPUSH
4653: CALL_OW 251
4657: ST_TO_ADDR
// for i := 0 to 5 do
4658: LD_ADDR_VAR 0 4
4662: PUSH
4663: DOUBLE
4664: LD_INT 0
4666: DEC
4667: ST_TO_ADDR
4668: LD_INT 5
4670: PUSH
4671: FOR_TO
4672: IFFALSE 4784
// begin _x := ShiftX ( x , i , 3 ) ;
4674: LD_ADDR_VAR 0 7
4678: PUSH
4679: LD_VAR 0 5
4683: PPUSH
4684: LD_VAR 0 4
4688: PPUSH
4689: LD_INT 3
4691: PPUSH
4692: CALL_OW 272
4696: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
4697: LD_ADDR_VAR 0 8
4701: PUSH
4702: LD_VAR 0 6
4706: PPUSH
4707: LD_VAR 0 4
4711: PPUSH
4712: LD_INT 3
4714: PPUSH
4715: CALL_OW 273
4719: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4720: LD_VAR 0 7
4724: PPUSH
4725: LD_VAR 0 8
4729: PPUSH
4730: CALL_OW 488
4734: NOT
4735: IFFALSE 4739
// continue ;
4737: GO 4671
// if HexInfo ( _x , _y ) = 0 then
4739: LD_VAR 0 7
4743: PPUSH
4744: LD_VAR 0 8
4748: PPUSH
4749: CALL_OW 428
4753: PUSH
4754: LD_INT 0
4756: EQUAL
4757: IFFALSE 4782
// begin ComMoveXY ( unit , _x , _y ) ;
4759: LD_VAR 0 1
4763: PPUSH
4764: LD_VAR 0 7
4768: PPUSH
4769: LD_VAR 0 8
4773: PPUSH
4774: CALL_OW 111
// exit ;
4778: POP
4779: POP
4780: GO 4786
// end ; end ;
4782: GO 4671
4784: POP
4785: POP
// end ;
4786: LD_VAR 0 3
4790: RET
// export function ScanBase ( side , base_area ) ; begin
4791: LD_INT 0
4793: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
4794: LD_ADDR_VAR 0 3
4798: PUSH
4799: LD_VAR 0 2
4803: PPUSH
4804: LD_INT 81
4806: PUSH
4807: LD_VAR 0 1
4811: PUSH
4812: EMPTY
4813: LIST
4814: LIST
4815: PPUSH
4816: CALL_OW 70
4820: ST_TO_ADDR
// end ;
4821: LD_VAR 0 3
4825: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
4826: LD_INT 0
4828: PPUSH
4829: PPUSH
4830: PPUSH
4831: PPUSH
// result := false ;
4832: LD_ADDR_VAR 0 2
4836: PUSH
4837: LD_INT 0
4839: ST_TO_ADDR
// side := GetSide ( unit ) ;
4840: LD_ADDR_VAR 0 3
4844: PUSH
4845: LD_VAR 0 1
4849: PPUSH
4850: CALL_OW 255
4854: ST_TO_ADDR
// nat := GetNation ( unit ) ;
4855: LD_ADDR_VAR 0 4
4859: PUSH
4860: LD_VAR 0 1
4864: PPUSH
4865: CALL_OW 248
4869: ST_TO_ADDR
// case nat of 1 :
4870: LD_VAR 0 4
4874: PUSH
4875: LD_INT 1
4877: DOUBLE
4878: EQUAL
4879: IFTRUE 4883
4881: GO 4894
4883: POP
// tech := tech_lassight ; 2 :
4884: LD_ADDR_VAR 0 5
4888: PUSH
4889: LD_INT 12
4891: ST_TO_ADDR
4892: GO 4933
4894: LD_INT 2
4896: DOUBLE
4897: EQUAL
4898: IFTRUE 4902
4900: GO 4913
4902: POP
// tech := tech_mortar ; 3 :
4903: LD_ADDR_VAR 0 5
4907: PUSH
4908: LD_INT 41
4910: ST_TO_ADDR
4911: GO 4933
4913: LD_INT 3
4915: DOUBLE
4916: EQUAL
4917: IFTRUE 4921
4919: GO 4932
4921: POP
// tech := tech_bazooka ; end ;
4922: LD_ADDR_VAR 0 5
4926: PUSH
4927: LD_INT 44
4929: ST_TO_ADDR
4930: GO 4933
4932: POP
// if Researched ( side , tech ) then
4933: LD_VAR 0 3
4937: PPUSH
4938: LD_VAR 0 5
4942: PPUSH
4943: CALL_OW 325
4947: IFFALSE 4974
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
4949: LD_ADDR_VAR 0 2
4953: PUSH
4954: LD_INT 5
4956: PUSH
4957: LD_INT 8
4959: PUSH
4960: LD_INT 9
4962: PUSH
4963: EMPTY
4964: LIST
4965: LIST
4966: LIST
4967: PUSH
4968: LD_VAR 0 4
4972: ARRAY
4973: ST_TO_ADDR
// end ;
4974: LD_VAR 0 2
4978: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
4979: LD_INT 0
4981: PPUSH
4982: PPUSH
4983: PPUSH
// if not mines then
4984: LD_VAR 0 2
4988: NOT
4989: IFFALSE 4993
// exit ;
4991: GO 5137
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4993: LD_ADDR_VAR 0 5
4997: PUSH
4998: LD_INT 81
5000: PUSH
5001: LD_VAR 0 1
5005: PUSH
5006: EMPTY
5007: LIST
5008: LIST
5009: PUSH
5010: LD_INT 3
5012: PUSH
5013: LD_INT 21
5015: PUSH
5016: LD_INT 3
5018: PUSH
5019: EMPTY
5020: LIST
5021: LIST
5022: PUSH
5023: EMPTY
5024: LIST
5025: LIST
5026: PUSH
5027: EMPTY
5028: LIST
5029: LIST
5030: PPUSH
5031: CALL_OW 69
5035: ST_TO_ADDR
// for i in mines do
5036: LD_ADDR_VAR 0 4
5040: PUSH
5041: LD_VAR 0 2
5045: PUSH
5046: FOR_IN
5047: IFFALSE 5135
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
5049: LD_VAR 0 4
5053: PUSH
5054: LD_INT 1
5056: ARRAY
5057: PPUSH
5058: LD_VAR 0 4
5062: PUSH
5063: LD_INT 2
5065: ARRAY
5066: PPUSH
5067: CALL_OW 458
5071: NOT
5072: IFFALSE 5076
// continue ;
5074: GO 5046
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
5076: LD_VAR 0 4
5080: PUSH
5081: LD_INT 1
5083: ARRAY
5084: PPUSH
5085: LD_VAR 0 4
5089: PUSH
5090: LD_INT 2
5092: ARRAY
5093: PPUSH
5094: CALL_OW 428
5098: PUSH
5099: LD_VAR 0 5
5103: IN
5104: IFFALSE 5133
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
5106: LD_VAR 0 4
5110: PUSH
5111: LD_INT 1
5113: ARRAY
5114: PPUSH
5115: LD_VAR 0 4
5119: PUSH
5120: LD_INT 2
5122: ARRAY
5123: PPUSH
5124: LD_VAR 0 1
5128: PPUSH
5129: CALL_OW 456
// end ;
5133: GO 5046
5135: POP
5136: POP
// end ;
5137: LD_VAR 0 3
5141: RET
// export function Count ( array ) ; begin
5142: LD_INT 0
5144: PPUSH
// result := array + 0 ;
5145: LD_ADDR_VAR 0 2
5149: PUSH
5150: LD_VAR 0 1
5154: PUSH
5155: LD_INT 0
5157: PLUS
5158: ST_TO_ADDR
// end ;
5159: LD_VAR 0 2
5163: RET
// export function IsEmpty ( building ) ; begin
5164: LD_INT 0
5166: PPUSH
// if not building then
5167: LD_VAR 0 1
5171: NOT
5172: IFFALSE 5176
// exit ;
5174: GO 5219
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
5176: LD_ADDR_VAR 0 2
5180: PUSH
5181: LD_VAR 0 1
5185: PUSH
5186: LD_INT 22
5188: PUSH
5189: LD_VAR 0 1
5193: PPUSH
5194: CALL_OW 255
5198: PUSH
5199: EMPTY
5200: LIST
5201: LIST
5202: PUSH
5203: LD_INT 58
5205: PUSH
5206: EMPTY
5207: LIST
5208: PUSH
5209: EMPTY
5210: LIST
5211: LIST
5212: PPUSH
5213: CALL_OW 69
5217: IN
5218: ST_TO_ADDR
// end ;
5219: LD_VAR 0 2
5223: RET
// export function IsNotFull ( building ) ; var places ; begin
5224: LD_INT 0
5226: PPUSH
5227: PPUSH
// if not building then
5228: LD_VAR 0 1
5232: NOT
5233: IFFALSE 5237
// exit ;
5235: GO 5265
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
5237: LD_ADDR_VAR 0 2
5241: PUSH
5242: LD_VAR 0 1
5246: PPUSH
5247: LD_INT 3
5249: PUSH
5250: LD_INT 62
5252: PUSH
5253: EMPTY
5254: LIST
5255: PUSH
5256: EMPTY
5257: LIST
5258: LIST
5259: PPUSH
5260: CALL_OW 72
5264: ST_TO_ADDR
// end ;
5265: LD_VAR 0 2
5269: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
5270: LD_INT 0
5272: PPUSH
5273: PPUSH
5274: PPUSH
5275: PPUSH
// tmp := [ ] ;
5276: LD_ADDR_VAR 0 3
5280: PUSH
5281: EMPTY
5282: ST_TO_ADDR
// list := [ ] ;
5283: LD_ADDR_VAR 0 5
5287: PUSH
5288: EMPTY
5289: ST_TO_ADDR
// for i = 16 to 25 do
5290: LD_ADDR_VAR 0 4
5294: PUSH
5295: DOUBLE
5296: LD_INT 16
5298: DEC
5299: ST_TO_ADDR
5300: LD_INT 25
5302: PUSH
5303: FOR_TO
5304: IFFALSE 5377
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
5306: LD_ADDR_VAR 0 3
5310: PUSH
5311: LD_VAR 0 3
5315: PUSH
5316: LD_INT 22
5318: PUSH
5319: LD_VAR 0 1
5323: PPUSH
5324: CALL_OW 255
5328: PUSH
5329: EMPTY
5330: LIST
5331: LIST
5332: PUSH
5333: LD_INT 91
5335: PUSH
5336: LD_VAR 0 1
5340: PUSH
5341: LD_INT 6
5343: PUSH
5344: EMPTY
5345: LIST
5346: LIST
5347: LIST
5348: PUSH
5349: LD_INT 30
5351: PUSH
5352: LD_VAR 0 4
5356: PUSH
5357: EMPTY
5358: LIST
5359: LIST
5360: PUSH
5361: EMPTY
5362: LIST
5363: LIST
5364: LIST
5365: PUSH
5366: EMPTY
5367: LIST
5368: PPUSH
5369: CALL_OW 69
5373: ADD
5374: ST_TO_ADDR
5375: GO 5303
5377: POP
5378: POP
// for i = 1 to tmp do
5379: LD_ADDR_VAR 0 4
5383: PUSH
5384: DOUBLE
5385: LD_INT 1
5387: DEC
5388: ST_TO_ADDR
5389: LD_VAR 0 3
5393: PUSH
5394: FOR_TO
5395: IFFALSE 5483
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
5397: LD_ADDR_VAR 0 5
5401: PUSH
5402: LD_VAR 0 5
5406: PUSH
5407: LD_VAR 0 3
5411: PUSH
5412: LD_VAR 0 4
5416: ARRAY
5417: PPUSH
5418: CALL_OW 266
5422: PUSH
5423: LD_VAR 0 3
5427: PUSH
5428: LD_VAR 0 4
5432: ARRAY
5433: PPUSH
5434: CALL_OW 250
5438: PUSH
5439: LD_VAR 0 3
5443: PUSH
5444: LD_VAR 0 4
5448: ARRAY
5449: PPUSH
5450: CALL_OW 251
5454: PUSH
5455: LD_VAR 0 3
5459: PUSH
5460: LD_VAR 0 4
5464: ARRAY
5465: PPUSH
5466: CALL_OW 254
5470: PUSH
5471: EMPTY
5472: LIST
5473: LIST
5474: LIST
5475: LIST
5476: PUSH
5477: EMPTY
5478: LIST
5479: ADD
5480: ST_TO_ADDR
5481: GO 5394
5483: POP
5484: POP
// result := list ;
5485: LD_ADDR_VAR 0 2
5489: PUSH
5490: LD_VAR 0 5
5494: ST_TO_ADDR
// end ;
5495: LD_VAR 0 2
5499: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
5500: LD_INT 0
5502: PPUSH
5503: PPUSH
5504: PPUSH
5505: PPUSH
5506: PPUSH
5507: PPUSH
5508: PPUSH
// if not factory then
5509: LD_VAR 0 1
5513: NOT
5514: IFFALSE 5518
// exit ;
5516: GO 6121
// if control = control_apeman then
5518: LD_VAR 0 4
5522: PUSH
5523: LD_INT 5
5525: EQUAL
5526: IFFALSE 5635
// begin tmp := UnitsInside ( factory ) ;
5528: LD_ADDR_VAR 0 8
5532: PUSH
5533: LD_VAR 0 1
5537: PPUSH
5538: CALL_OW 313
5542: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
5543: LD_VAR 0 8
5547: PPUSH
5548: LD_INT 25
5550: PUSH
5551: LD_INT 12
5553: PUSH
5554: EMPTY
5555: LIST
5556: LIST
5557: PPUSH
5558: CALL_OW 72
5562: NOT
5563: IFFALSE 5573
// control := control_manual ;
5565: LD_ADDR_VAR 0 4
5569: PUSH
5570: LD_INT 1
5572: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
5573: LD_ADDR_VAR 0 8
5577: PUSH
5578: LD_VAR 0 1
5582: PPUSH
5583: CALL 5270 0 1
5587: ST_TO_ADDR
// if tmp then
5588: LD_VAR 0 8
5592: IFFALSE 5635
// begin for i in tmp do
5594: LD_ADDR_VAR 0 7
5598: PUSH
5599: LD_VAR 0 8
5603: PUSH
5604: FOR_IN
5605: IFFALSE 5633
// if i [ 1 ] = b_ext_radio then
5607: LD_VAR 0 7
5611: PUSH
5612: LD_INT 1
5614: ARRAY
5615: PUSH
5616: LD_INT 22
5618: EQUAL
5619: IFFALSE 5631
// begin control := control_remote ;
5621: LD_ADDR_VAR 0 4
5625: PUSH
5626: LD_INT 2
5628: ST_TO_ADDR
// break ;
5629: GO 5633
// end ;
5631: GO 5604
5633: POP
5634: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5635: LD_VAR 0 1
5639: PPUSH
5640: LD_VAR 0 2
5644: PPUSH
5645: LD_VAR 0 3
5649: PPUSH
5650: LD_VAR 0 4
5654: PPUSH
5655: LD_VAR 0 5
5659: PPUSH
5660: CALL_OW 448
5664: IFFALSE 5699
// begin result := [ chassis , engine , control , weapon ] ;
5666: LD_ADDR_VAR 0 6
5670: PUSH
5671: LD_VAR 0 2
5675: PUSH
5676: LD_VAR 0 3
5680: PUSH
5681: LD_VAR 0 4
5685: PUSH
5686: LD_VAR 0 5
5690: PUSH
5691: EMPTY
5692: LIST
5693: LIST
5694: LIST
5695: LIST
5696: ST_TO_ADDR
// exit ;
5697: GO 6121
// end ; _chassis := AvailableChassisList ( factory ) ;
5699: LD_ADDR_VAR 0 9
5703: PUSH
5704: LD_VAR 0 1
5708: PPUSH
5709: CALL_OW 475
5713: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
5714: LD_ADDR_VAR 0 11
5718: PUSH
5719: LD_VAR 0 1
5723: PPUSH
5724: CALL_OW 476
5728: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
5729: LD_ADDR_VAR 0 12
5733: PUSH
5734: LD_VAR 0 1
5738: PPUSH
5739: CALL_OW 477
5743: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
5744: LD_ADDR_VAR 0 10
5748: PUSH
5749: LD_VAR 0 1
5753: PPUSH
5754: CALL_OW 478
5758: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
5759: LD_VAR 0 9
5763: NOT
5764: IFTRUE 5773
5766: PUSH
5767: LD_VAR 0 11
5771: NOT
5772: OR
5773: IFTRUE 5782
5775: PUSH
5776: LD_VAR 0 12
5780: NOT
5781: OR
5782: IFTRUE 5791
5784: PUSH
5785: LD_VAR 0 10
5789: NOT
5790: OR
5791: IFFALSE 5826
// begin result := [ chassis , engine , control , weapon ] ;
5793: LD_ADDR_VAR 0 6
5797: PUSH
5798: LD_VAR 0 2
5802: PUSH
5803: LD_VAR 0 3
5807: PUSH
5808: LD_VAR 0 4
5812: PUSH
5813: LD_VAR 0 5
5817: PUSH
5818: EMPTY
5819: LIST
5820: LIST
5821: LIST
5822: LIST
5823: ST_TO_ADDR
// exit ;
5824: GO 6121
// end ; if not chassis in _chassis then
5826: LD_VAR 0 2
5830: PUSH
5831: LD_VAR 0 9
5835: IN
5836: NOT
5837: IFFALSE 5863
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
5839: LD_ADDR_VAR 0 2
5843: PUSH
5844: LD_VAR 0 9
5848: PUSH
5849: LD_INT 1
5851: PPUSH
5852: LD_VAR 0 9
5856: PPUSH
5857: CALL_OW 12
5861: ARRAY
5862: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
5863: LD_VAR 0 2
5867: PPUSH
5868: LD_VAR 0 3
5872: PPUSH
5873: CALL 6126 0 2
5877: NOT
5878: IFFALSE 5939
// repeat engine := _engine [ 1 ] ;
5880: LD_ADDR_VAR 0 3
5884: PUSH
5885: LD_VAR 0 11
5889: PUSH
5890: LD_INT 1
5892: ARRAY
5893: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
5894: LD_ADDR_VAR 0 11
5898: PUSH
5899: LD_VAR 0 11
5903: PPUSH
5904: LD_INT 1
5906: PPUSH
5907: CALL_OW 3
5911: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
5912: LD_VAR 0 2
5916: PPUSH
5917: LD_VAR 0 3
5921: PPUSH
5922: CALL 6126 0 2
5926: IFTRUE 5937
5928: PUSH
5929: LD_VAR 0 11
5933: PUSH
5934: EMPTY
5935: EQUAL
5936: OR
5937: IFFALSE 5880
// if not control in _control then
5939: LD_VAR 0 4
5943: PUSH
5944: LD_VAR 0 12
5948: IN
5949: NOT
5950: IFFALSE 5976
// control := _control [ rand ( 1 , _control ) ] ;
5952: LD_ADDR_VAR 0 4
5956: PUSH
5957: LD_VAR 0 12
5961: PUSH
5962: LD_INT 1
5964: PPUSH
5965: LD_VAR 0 12
5969: PPUSH
5970: CALL_OW 12
5974: ARRAY
5975: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
5976: LD_VAR 0 2
5980: PPUSH
5981: LD_VAR 0 5
5985: PPUSH
5986: CALL 6348 0 2
5990: NOT
5991: IFFALSE 6052
// repeat weapon := _weapon [ 1 ] ;
5993: LD_ADDR_VAR 0 5
5997: PUSH
5998: LD_VAR 0 10
6002: PUSH
6003: LD_INT 1
6005: ARRAY
6006: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
6007: LD_ADDR_VAR 0 10
6011: PUSH
6012: LD_VAR 0 10
6016: PPUSH
6017: LD_INT 1
6019: PPUSH
6020: CALL_OW 3
6024: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
6025: LD_VAR 0 2
6029: PPUSH
6030: LD_VAR 0 5
6034: PPUSH
6035: CALL 6348 0 2
6039: IFTRUE 6050
6041: PUSH
6042: LD_VAR 0 10
6046: PUSH
6047: EMPTY
6048: EQUAL
6049: OR
6050: IFFALSE 5993
// result := [ ] ;
6052: LD_ADDR_VAR 0 6
6056: PUSH
6057: EMPTY
6058: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
6059: LD_VAR 0 1
6063: PPUSH
6064: LD_VAR 0 2
6068: PPUSH
6069: LD_VAR 0 3
6073: PPUSH
6074: LD_VAR 0 4
6078: PPUSH
6079: LD_VAR 0 5
6083: PPUSH
6084: CALL_OW 448
6088: IFFALSE 6121
// result := [ chassis , engine , control , weapon ] ;
6090: LD_ADDR_VAR 0 6
6094: PUSH
6095: LD_VAR 0 2
6099: PUSH
6100: LD_VAR 0 3
6104: PUSH
6105: LD_VAR 0 4
6109: PUSH
6110: LD_VAR 0 5
6114: PUSH
6115: EMPTY
6116: LIST
6117: LIST
6118: LIST
6119: LIST
6120: ST_TO_ADDR
// end ;
6121: LD_VAR 0 6
6125: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
6126: LD_INT 0
6128: PPUSH
// if not chassis or not engine then
6129: LD_VAR 0 1
6133: NOT
6134: IFTRUE 6143
6136: PUSH
6137: LD_VAR 0 2
6141: NOT
6142: OR
6143: IFFALSE 6147
// exit ;
6145: GO 6343
// case engine of engine_solar :
6147: LD_VAR 0 2
6151: PUSH
6152: LD_INT 2
6154: DOUBLE
6155: EQUAL
6156: IFTRUE 6160
6158: GO 6198
6160: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
6161: LD_ADDR_VAR 0 3
6165: PUSH
6166: LD_INT 11
6168: PUSH
6169: LD_INT 12
6171: PUSH
6172: LD_INT 13
6174: PUSH
6175: LD_INT 14
6177: PUSH
6178: LD_INT 1
6180: PUSH
6181: LD_INT 2
6183: PUSH
6184: LD_INT 3
6186: PUSH
6187: EMPTY
6188: LIST
6189: LIST
6190: LIST
6191: LIST
6192: LIST
6193: LIST
6194: LIST
6195: ST_TO_ADDR
6196: GO 6327
6198: LD_INT 1
6200: DOUBLE
6201: EQUAL
6202: IFTRUE 6206
6204: GO 6268
6206: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
6207: LD_ADDR_VAR 0 3
6211: PUSH
6212: LD_INT 11
6214: PUSH
6215: LD_INT 12
6217: PUSH
6218: LD_INT 13
6220: PUSH
6221: LD_INT 14
6223: PUSH
6224: LD_INT 1
6226: PUSH
6227: LD_INT 2
6229: PUSH
6230: LD_INT 3
6232: PUSH
6233: LD_INT 4
6235: PUSH
6236: LD_INT 5
6238: PUSH
6239: LD_INT 21
6241: PUSH
6242: LD_INT 23
6244: PUSH
6245: LD_INT 22
6247: PUSH
6248: LD_INT 24
6250: PUSH
6251: EMPTY
6252: LIST
6253: LIST
6254: LIST
6255: LIST
6256: LIST
6257: LIST
6258: LIST
6259: LIST
6260: LIST
6261: LIST
6262: LIST
6263: LIST
6264: LIST
6265: ST_TO_ADDR
6266: GO 6327
6268: LD_INT 3
6270: DOUBLE
6271: EQUAL
6272: IFTRUE 6276
6274: GO 6326
6276: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
6277: LD_ADDR_VAR 0 3
6281: PUSH
6282: LD_INT 13
6284: PUSH
6285: LD_INT 14
6287: PUSH
6288: LD_INT 2
6290: PUSH
6291: LD_INT 3
6293: PUSH
6294: LD_INT 4
6296: PUSH
6297: LD_INT 5
6299: PUSH
6300: LD_INT 21
6302: PUSH
6303: LD_INT 22
6305: PUSH
6306: LD_INT 23
6308: PUSH
6309: LD_INT 24
6311: PUSH
6312: EMPTY
6313: LIST
6314: LIST
6315: LIST
6316: LIST
6317: LIST
6318: LIST
6319: LIST
6320: LIST
6321: LIST
6322: LIST
6323: ST_TO_ADDR
6324: GO 6327
6326: POP
// result := ( chassis in result ) ;
6327: LD_ADDR_VAR 0 3
6331: PUSH
6332: LD_VAR 0 1
6336: PUSH
6337: LD_VAR 0 3
6341: IN
6342: ST_TO_ADDR
// end ;
6343: LD_VAR 0 3
6347: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
6348: LD_INT 0
6350: PPUSH
// if not chassis or not weapon then
6351: LD_VAR 0 1
6355: NOT
6356: IFTRUE 6365
6358: PUSH
6359: LD_VAR 0 2
6363: NOT
6364: OR
6365: IFFALSE 6369
// exit ;
6367: GO 7429
// case weapon of us_machine_gun :
6369: LD_VAR 0 2
6373: PUSH
6374: LD_INT 2
6376: DOUBLE
6377: EQUAL
6378: IFTRUE 6382
6380: GO 6412
6382: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
6383: LD_ADDR_VAR 0 3
6387: PUSH
6388: LD_INT 1
6390: PUSH
6391: LD_INT 2
6393: PUSH
6394: LD_INT 3
6396: PUSH
6397: LD_INT 4
6399: PUSH
6400: LD_INT 5
6402: PUSH
6403: EMPTY
6404: LIST
6405: LIST
6406: LIST
6407: LIST
6408: LIST
6409: ST_TO_ADDR
6410: GO 7413
6412: LD_INT 3
6414: DOUBLE
6415: EQUAL
6416: IFTRUE 6420
6418: GO 6450
6420: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
6421: LD_ADDR_VAR 0 3
6425: PUSH
6426: LD_INT 1
6428: PUSH
6429: LD_INT 2
6431: PUSH
6432: LD_INT 3
6434: PUSH
6435: LD_INT 4
6437: PUSH
6438: LD_INT 5
6440: PUSH
6441: EMPTY
6442: LIST
6443: LIST
6444: LIST
6445: LIST
6446: LIST
6447: ST_TO_ADDR
6448: GO 7413
6450: LD_INT 11
6452: DOUBLE
6453: EQUAL
6454: IFTRUE 6458
6456: GO 6488
6458: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
6459: LD_ADDR_VAR 0 3
6463: PUSH
6464: LD_INT 1
6466: PUSH
6467: LD_INT 2
6469: PUSH
6470: LD_INT 3
6472: PUSH
6473: LD_INT 4
6475: PUSH
6476: LD_INT 5
6478: PUSH
6479: EMPTY
6480: LIST
6481: LIST
6482: LIST
6483: LIST
6484: LIST
6485: ST_TO_ADDR
6486: GO 7413
6488: LD_INT 4
6490: DOUBLE
6491: EQUAL
6492: IFTRUE 6496
6494: GO 6522
6496: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
6497: LD_ADDR_VAR 0 3
6501: PUSH
6502: LD_INT 2
6504: PUSH
6505: LD_INT 3
6507: PUSH
6508: LD_INT 4
6510: PUSH
6511: LD_INT 5
6513: PUSH
6514: EMPTY
6515: LIST
6516: LIST
6517: LIST
6518: LIST
6519: ST_TO_ADDR
6520: GO 7413
6522: LD_INT 5
6524: DOUBLE
6525: EQUAL
6526: IFTRUE 6530
6528: GO 6556
6530: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
6531: LD_ADDR_VAR 0 3
6535: PUSH
6536: LD_INT 2
6538: PUSH
6539: LD_INT 3
6541: PUSH
6542: LD_INT 4
6544: PUSH
6545: LD_INT 5
6547: PUSH
6548: EMPTY
6549: LIST
6550: LIST
6551: LIST
6552: LIST
6553: ST_TO_ADDR
6554: GO 7413
6556: LD_INT 9
6558: DOUBLE
6559: EQUAL
6560: IFTRUE 6564
6562: GO 6590
6564: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
6565: LD_ADDR_VAR 0 3
6569: PUSH
6570: LD_INT 2
6572: PUSH
6573: LD_INT 3
6575: PUSH
6576: LD_INT 4
6578: PUSH
6579: LD_INT 5
6581: PUSH
6582: EMPTY
6583: LIST
6584: LIST
6585: LIST
6586: LIST
6587: ST_TO_ADDR
6588: GO 7413
6590: LD_INT 7
6592: DOUBLE
6593: EQUAL
6594: IFTRUE 6598
6596: GO 6624
6598: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
6599: LD_ADDR_VAR 0 3
6603: PUSH
6604: LD_INT 2
6606: PUSH
6607: LD_INT 3
6609: PUSH
6610: LD_INT 4
6612: PUSH
6613: LD_INT 5
6615: PUSH
6616: EMPTY
6617: LIST
6618: LIST
6619: LIST
6620: LIST
6621: ST_TO_ADDR
6622: GO 7413
6624: LD_INT 12
6626: DOUBLE
6627: EQUAL
6628: IFTRUE 6632
6630: GO 6658
6632: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
6633: LD_ADDR_VAR 0 3
6637: PUSH
6638: LD_INT 2
6640: PUSH
6641: LD_INT 3
6643: PUSH
6644: LD_INT 4
6646: PUSH
6647: LD_INT 5
6649: PUSH
6650: EMPTY
6651: LIST
6652: LIST
6653: LIST
6654: LIST
6655: ST_TO_ADDR
6656: GO 7413
6658: LD_INT 13
6660: DOUBLE
6661: EQUAL
6662: IFTRUE 6666
6664: GO 6692
6666: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
6667: LD_ADDR_VAR 0 3
6671: PUSH
6672: LD_INT 2
6674: PUSH
6675: LD_INT 3
6677: PUSH
6678: LD_INT 4
6680: PUSH
6681: LD_INT 5
6683: PUSH
6684: EMPTY
6685: LIST
6686: LIST
6687: LIST
6688: LIST
6689: ST_TO_ADDR
6690: GO 7413
6692: LD_INT 14
6694: DOUBLE
6695: EQUAL
6696: IFTRUE 6700
6698: GO 6718
6700: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
6701: LD_ADDR_VAR 0 3
6705: PUSH
6706: LD_INT 4
6708: PUSH
6709: LD_INT 5
6711: PUSH
6712: EMPTY
6713: LIST
6714: LIST
6715: ST_TO_ADDR
6716: GO 7413
6718: LD_INT 6
6720: DOUBLE
6721: EQUAL
6722: IFTRUE 6726
6724: GO 6744
6726: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
6727: LD_ADDR_VAR 0 3
6731: PUSH
6732: LD_INT 4
6734: PUSH
6735: LD_INT 5
6737: PUSH
6738: EMPTY
6739: LIST
6740: LIST
6741: ST_TO_ADDR
6742: GO 7413
6744: LD_INT 10
6746: DOUBLE
6747: EQUAL
6748: IFTRUE 6752
6750: GO 6770
6752: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
6753: LD_ADDR_VAR 0 3
6757: PUSH
6758: LD_INT 4
6760: PUSH
6761: LD_INT 5
6763: PUSH
6764: EMPTY
6765: LIST
6766: LIST
6767: ST_TO_ADDR
6768: GO 7413
6770: LD_INT 22
6772: DOUBLE
6773: EQUAL
6774: IFTRUE 6778
6776: GO 6804
6778: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
6779: LD_ADDR_VAR 0 3
6783: PUSH
6784: LD_INT 11
6786: PUSH
6787: LD_INT 12
6789: PUSH
6790: LD_INT 13
6792: PUSH
6793: LD_INT 14
6795: PUSH
6796: EMPTY
6797: LIST
6798: LIST
6799: LIST
6800: LIST
6801: ST_TO_ADDR
6802: GO 7413
6804: LD_INT 23
6806: DOUBLE
6807: EQUAL
6808: IFTRUE 6812
6810: GO 6838
6812: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
6813: LD_ADDR_VAR 0 3
6817: PUSH
6818: LD_INT 11
6820: PUSH
6821: LD_INT 12
6823: PUSH
6824: LD_INT 13
6826: PUSH
6827: LD_INT 14
6829: PUSH
6830: EMPTY
6831: LIST
6832: LIST
6833: LIST
6834: LIST
6835: ST_TO_ADDR
6836: GO 7413
6838: LD_INT 24
6840: DOUBLE
6841: EQUAL
6842: IFTRUE 6846
6844: GO 6872
6846: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
6847: LD_ADDR_VAR 0 3
6851: PUSH
6852: LD_INT 11
6854: PUSH
6855: LD_INT 12
6857: PUSH
6858: LD_INT 13
6860: PUSH
6861: LD_INT 14
6863: PUSH
6864: EMPTY
6865: LIST
6866: LIST
6867: LIST
6868: LIST
6869: ST_TO_ADDR
6870: GO 7413
6872: LD_INT 30
6874: DOUBLE
6875: EQUAL
6876: IFTRUE 6880
6878: GO 6906
6880: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
6881: LD_ADDR_VAR 0 3
6885: PUSH
6886: LD_INT 11
6888: PUSH
6889: LD_INT 12
6891: PUSH
6892: LD_INT 13
6894: PUSH
6895: LD_INT 14
6897: PUSH
6898: EMPTY
6899: LIST
6900: LIST
6901: LIST
6902: LIST
6903: ST_TO_ADDR
6904: GO 7413
6906: LD_INT 25
6908: DOUBLE
6909: EQUAL
6910: IFTRUE 6914
6912: GO 6932
6914: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
6915: LD_ADDR_VAR 0 3
6919: PUSH
6920: LD_INT 13
6922: PUSH
6923: LD_INT 14
6925: PUSH
6926: EMPTY
6927: LIST
6928: LIST
6929: ST_TO_ADDR
6930: GO 7413
6932: LD_INT 27
6934: DOUBLE
6935: EQUAL
6936: IFTRUE 6940
6938: GO 6958
6940: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
6941: LD_ADDR_VAR 0 3
6945: PUSH
6946: LD_INT 13
6948: PUSH
6949: LD_INT 14
6951: PUSH
6952: EMPTY
6953: LIST
6954: LIST
6955: ST_TO_ADDR
6956: GO 7413
6958: LD_INT 92
6960: DOUBLE
6961: EQUAL
6962: IFTRUE 6966
6964: GO 6992
6966: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
6967: LD_ADDR_VAR 0 3
6971: PUSH
6972: LD_INT 11
6974: PUSH
6975: LD_INT 12
6977: PUSH
6978: LD_INT 13
6980: PUSH
6981: LD_INT 14
6983: PUSH
6984: EMPTY
6985: LIST
6986: LIST
6987: LIST
6988: LIST
6989: ST_TO_ADDR
6990: GO 7413
6992: LD_INT 28
6994: DOUBLE
6995: EQUAL
6996: IFTRUE 7000
6998: GO 7018
7000: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
7001: LD_ADDR_VAR 0 3
7005: PUSH
7006: LD_INT 13
7008: PUSH
7009: LD_INT 14
7011: PUSH
7012: EMPTY
7013: LIST
7014: LIST
7015: ST_TO_ADDR
7016: GO 7413
7018: LD_INT 29
7020: DOUBLE
7021: EQUAL
7022: IFTRUE 7026
7024: GO 7044
7026: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
7027: LD_ADDR_VAR 0 3
7031: PUSH
7032: LD_INT 13
7034: PUSH
7035: LD_INT 14
7037: PUSH
7038: EMPTY
7039: LIST
7040: LIST
7041: ST_TO_ADDR
7042: GO 7413
7044: LD_INT 31
7046: DOUBLE
7047: EQUAL
7048: IFTRUE 7052
7050: GO 7070
7052: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
7053: LD_ADDR_VAR 0 3
7057: PUSH
7058: LD_INT 13
7060: PUSH
7061: LD_INT 14
7063: PUSH
7064: EMPTY
7065: LIST
7066: LIST
7067: ST_TO_ADDR
7068: GO 7413
7070: LD_INT 26
7072: DOUBLE
7073: EQUAL
7074: IFTRUE 7078
7076: GO 7096
7078: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
7079: LD_ADDR_VAR 0 3
7083: PUSH
7084: LD_INT 13
7086: PUSH
7087: LD_INT 14
7089: PUSH
7090: EMPTY
7091: LIST
7092: LIST
7093: ST_TO_ADDR
7094: GO 7413
7096: LD_INT 42
7098: DOUBLE
7099: EQUAL
7100: IFTRUE 7104
7102: GO 7130
7104: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
7105: LD_ADDR_VAR 0 3
7109: PUSH
7110: LD_INT 21
7112: PUSH
7113: LD_INT 22
7115: PUSH
7116: LD_INT 23
7118: PUSH
7119: LD_INT 24
7121: PUSH
7122: EMPTY
7123: LIST
7124: LIST
7125: LIST
7126: LIST
7127: ST_TO_ADDR
7128: GO 7413
7130: LD_INT 43
7132: DOUBLE
7133: EQUAL
7134: IFTRUE 7138
7136: GO 7164
7138: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
7139: LD_ADDR_VAR 0 3
7143: PUSH
7144: LD_INT 21
7146: PUSH
7147: LD_INT 22
7149: PUSH
7150: LD_INT 23
7152: PUSH
7153: LD_INT 24
7155: PUSH
7156: EMPTY
7157: LIST
7158: LIST
7159: LIST
7160: LIST
7161: ST_TO_ADDR
7162: GO 7413
7164: LD_INT 44
7166: DOUBLE
7167: EQUAL
7168: IFTRUE 7172
7170: GO 7198
7172: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
7173: LD_ADDR_VAR 0 3
7177: PUSH
7178: LD_INT 21
7180: PUSH
7181: LD_INT 22
7183: PUSH
7184: LD_INT 23
7186: PUSH
7187: LD_INT 24
7189: PUSH
7190: EMPTY
7191: LIST
7192: LIST
7193: LIST
7194: LIST
7195: ST_TO_ADDR
7196: GO 7413
7198: LD_INT 45
7200: DOUBLE
7201: EQUAL
7202: IFTRUE 7206
7204: GO 7232
7206: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
7207: LD_ADDR_VAR 0 3
7211: PUSH
7212: LD_INT 21
7214: PUSH
7215: LD_INT 22
7217: PUSH
7218: LD_INT 23
7220: PUSH
7221: LD_INT 24
7223: PUSH
7224: EMPTY
7225: LIST
7226: LIST
7227: LIST
7228: LIST
7229: ST_TO_ADDR
7230: GO 7413
7232: LD_INT 49
7234: DOUBLE
7235: EQUAL
7236: IFTRUE 7240
7238: GO 7266
7240: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
7241: LD_ADDR_VAR 0 3
7245: PUSH
7246: LD_INT 21
7248: PUSH
7249: LD_INT 22
7251: PUSH
7252: LD_INT 23
7254: PUSH
7255: LD_INT 24
7257: PUSH
7258: EMPTY
7259: LIST
7260: LIST
7261: LIST
7262: LIST
7263: ST_TO_ADDR
7264: GO 7413
7266: LD_INT 51
7268: DOUBLE
7269: EQUAL
7270: IFTRUE 7274
7272: GO 7300
7274: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
7275: LD_ADDR_VAR 0 3
7279: PUSH
7280: LD_INT 21
7282: PUSH
7283: LD_INT 22
7285: PUSH
7286: LD_INT 23
7288: PUSH
7289: LD_INT 24
7291: PUSH
7292: EMPTY
7293: LIST
7294: LIST
7295: LIST
7296: LIST
7297: ST_TO_ADDR
7298: GO 7413
7300: LD_INT 52
7302: DOUBLE
7303: EQUAL
7304: IFTRUE 7308
7306: GO 7334
7308: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
7309: LD_ADDR_VAR 0 3
7313: PUSH
7314: LD_INT 21
7316: PUSH
7317: LD_INT 22
7319: PUSH
7320: LD_INT 23
7322: PUSH
7323: LD_INT 24
7325: PUSH
7326: EMPTY
7327: LIST
7328: LIST
7329: LIST
7330: LIST
7331: ST_TO_ADDR
7332: GO 7413
7334: LD_INT 53
7336: DOUBLE
7337: EQUAL
7338: IFTRUE 7342
7340: GO 7360
7342: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
7343: LD_ADDR_VAR 0 3
7347: PUSH
7348: LD_INT 23
7350: PUSH
7351: LD_INT 24
7353: PUSH
7354: EMPTY
7355: LIST
7356: LIST
7357: ST_TO_ADDR
7358: GO 7413
7360: LD_INT 46
7362: DOUBLE
7363: EQUAL
7364: IFTRUE 7368
7366: GO 7386
7368: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
7369: LD_ADDR_VAR 0 3
7373: PUSH
7374: LD_INT 23
7376: PUSH
7377: LD_INT 24
7379: PUSH
7380: EMPTY
7381: LIST
7382: LIST
7383: ST_TO_ADDR
7384: GO 7413
7386: LD_INT 47
7388: DOUBLE
7389: EQUAL
7390: IFTRUE 7394
7392: GO 7412
7394: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
7395: LD_ADDR_VAR 0 3
7399: PUSH
7400: LD_INT 23
7402: PUSH
7403: LD_INT 24
7405: PUSH
7406: EMPTY
7407: LIST
7408: LIST
7409: ST_TO_ADDR
7410: GO 7413
7412: POP
// result := ( chassis in result ) ;
7413: LD_ADDR_VAR 0 3
7417: PUSH
7418: LD_VAR 0 1
7422: PUSH
7423: LD_VAR 0 3
7427: IN
7428: ST_TO_ADDR
// end ;
7429: LD_VAR 0 3
7433: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
7434: LD_INT 0
7436: PPUSH
7437: PPUSH
7438: PPUSH
7439: PPUSH
7440: PPUSH
7441: PPUSH
7442: PPUSH
// result := array ;
7443: LD_ADDR_VAR 0 5
7447: PUSH
7448: LD_VAR 0 1
7452: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
7453: LD_VAR 0 1
7457: NOT
7458: IFTRUE 7467
7460: PUSH
7461: LD_VAR 0 2
7465: NOT
7466: OR
7467: IFTRUE 7476
7469: PUSH
7470: LD_VAR 0 3
7474: NOT
7475: OR
7476: IFTRUE 7490
7478: PUSH
7479: LD_VAR 0 2
7483: PUSH
7484: LD_VAR 0 1
7488: GREATER
7489: OR
7490: IFTRUE 7504
7492: PUSH
7493: LD_VAR 0 3
7497: PUSH
7498: LD_VAR 0 1
7502: GREATER
7503: OR
7504: IFFALSE 7508
// exit ;
7506: GO 7804
// if direction then
7508: LD_VAR 0 4
7512: IFFALSE 7576
// begin d := 1 ;
7514: LD_ADDR_VAR 0 9
7518: PUSH
7519: LD_INT 1
7521: ST_TO_ADDR
// if i_from > i_to then
7522: LD_VAR 0 2
7526: PUSH
7527: LD_VAR 0 3
7531: GREATER
7532: IFFALSE 7558
// length := ( array - i_from ) + i_to else
7534: LD_ADDR_VAR 0 11
7538: PUSH
7539: LD_VAR 0 1
7543: PUSH
7544: LD_VAR 0 2
7548: MINUS
7549: PUSH
7550: LD_VAR 0 3
7554: PLUS
7555: ST_TO_ADDR
7556: GO 7574
// length := i_to - i_from ;
7558: LD_ADDR_VAR 0 11
7562: PUSH
7563: LD_VAR 0 3
7567: PUSH
7568: LD_VAR 0 2
7572: MINUS
7573: ST_TO_ADDR
// end else
7574: GO 7637
// begin d := - 1 ;
7576: LD_ADDR_VAR 0 9
7580: PUSH
7581: LD_INT 1
7583: NEG
7584: ST_TO_ADDR
// if i_from > i_to then
7585: LD_VAR 0 2
7589: PUSH
7590: LD_VAR 0 3
7594: GREATER
7595: IFFALSE 7615
// length := i_from - i_to else
7597: LD_ADDR_VAR 0 11
7601: PUSH
7602: LD_VAR 0 2
7606: PUSH
7607: LD_VAR 0 3
7611: MINUS
7612: ST_TO_ADDR
7613: GO 7637
// length := ( array - i_to ) + i_from ;
7615: LD_ADDR_VAR 0 11
7619: PUSH
7620: LD_VAR 0 1
7624: PUSH
7625: LD_VAR 0 3
7629: MINUS
7630: PUSH
7631: LD_VAR 0 2
7635: PLUS
7636: ST_TO_ADDR
// end ; if not length then
7637: LD_VAR 0 11
7641: NOT
7642: IFFALSE 7646
// exit ;
7644: GO 7804
// tmp := array ;
7646: LD_ADDR_VAR 0 10
7650: PUSH
7651: LD_VAR 0 1
7655: ST_TO_ADDR
// for i = 1 to length do
7656: LD_ADDR_VAR 0 6
7660: PUSH
7661: DOUBLE
7662: LD_INT 1
7664: DEC
7665: ST_TO_ADDR
7666: LD_VAR 0 11
7670: PUSH
7671: FOR_TO
7672: IFFALSE 7792
// begin for j = 1 to array do
7674: LD_ADDR_VAR 0 7
7678: PUSH
7679: DOUBLE
7680: LD_INT 1
7682: DEC
7683: ST_TO_ADDR
7684: LD_VAR 0 1
7688: PUSH
7689: FOR_TO
7690: IFFALSE 7778
// begin k := j + d ;
7692: LD_ADDR_VAR 0 8
7696: PUSH
7697: LD_VAR 0 7
7701: PUSH
7702: LD_VAR 0 9
7706: PLUS
7707: ST_TO_ADDR
// if k > array then
7708: LD_VAR 0 8
7712: PUSH
7713: LD_VAR 0 1
7717: GREATER
7718: IFFALSE 7728
// k := 1 ;
7720: LD_ADDR_VAR 0 8
7724: PUSH
7725: LD_INT 1
7727: ST_TO_ADDR
// if not k then
7728: LD_VAR 0 8
7732: NOT
7733: IFFALSE 7745
// k := array ;
7735: LD_ADDR_VAR 0 8
7739: PUSH
7740: LD_VAR 0 1
7744: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
7745: LD_ADDR_VAR 0 10
7749: PUSH
7750: LD_VAR 0 10
7754: PPUSH
7755: LD_VAR 0 8
7759: PPUSH
7760: LD_VAR 0 1
7764: PUSH
7765: LD_VAR 0 7
7769: ARRAY
7770: PPUSH
7771: CALL_OW 1
7775: ST_TO_ADDR
// end ;
7776: GO 7689
7778: POP
7779: POP
// array := tmp ;
7780: LD_ADDR_VAR 0 1
7784: PUSH
7785: LD_VAR 0 10
7789: ST_TO_ADDR
// end ;
7790: GO 7671
7792: POP
7793: POP
// result := array ;
7794: LD_ADDR_VAR 0 5
7798: PUSH
7799: LD_VAR 0 1
7803: ST_TO_ADDR
// end ;
7804: LD_VAR 0 5
7808: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
7809: LD_INT 0
7811: PPUSH
7812: PPUSH
// result := 0 ;
7813: LD_ADDR_VAR 0 3
7817: PUSH
7818: LD_INT 0
7820: ST_TO_ADDR
// if not array or not value in array then
7821: LD_VAR 0 1
7825: NOT
7826: IFTRUE 7841
7828: PUSH
7829: LD_VAR 0 2
7833: PUSH
7834: LD_VAR 0 1
7838: IN
7839: NOT
7840: OR
7841: IFFALSE 7845
// exit ;
7843: GO 7899
// for i = 1 to array do
7845: LD_ADDR_VAR 0 4
7849: PUSH
7850: DOUBLE
7851: LD_INT 1
7853: DEC
7854: ST_TO_ADDR
7855: LD_VAR 0 1
7859: PUSH
7860: FOR_TO
7861: IFFALSE 7897
// if value = array [ i ] then
7863: LD_VAR 0 2
7867: PUSH
7868: LD_VAR 0 1
7872: PUSH
7873: LD_VAR 0 4
7877: ARRAY
7878: EQUAL
7879: IFFALSE 7895
// begin result := i ;
7881: LD_ADDR_VAR 0 3
7885: PUSH
7886: LD_VAR 0 4
7890: ST_TO_ADDR
// exit ;
7891: POP
7892: POP
7893: GO 7899
// end ;
7895: GO 7860
7897: POP
7898: POP
// end ;
7899: LD_VAR 0 3
7903: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
7904: LD_INT 0
7906: PPUSH
// vc_chassis := chassis ;
7907: LD_ADDR_OWVAR 37
7911: PUSH
7912: LD_VAR 0 1
7916: ST_TO_ADDR
// vc_engine := engine ;
7917: LD_ADDR_OWVAR 39
7921: PUSH
7922: LD_VAR 0 2
7926: ST_TO_ADDR
// vc_control := control ;
7927: LD_ADDR_OWVAR 38
7931: PUSH
7932: LD_VAR 0 3
7936: ST_TO_ADDR
// vc_weapon := weapon ;
7937: LD_ADDR_OWVAR 40
7941: PUSH
7942: LD_VAR 0 4
7946: ST_TO_ADDR
// vc_fuel_battery := fuel ;
7947: LD_ADDR_OWVAR 41
7951: PUSH
7952: LD_VAR 0 5
7956: ST_TO_ADDR
// end ;
7957: LD_VAR 0 6
7961: RET
// export function WantPlant ( unit ) ; var task ; begin
7962: LD_INT 0
7964: PPUSH
7965: PPUSH
// result := false ;
7966: LD_ADDR_VAR 0 2
7970: PUSH
7971: LD_INT 0
7973: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
7974: LD_ADDR_VAR 0 3
7978: PUSH
7979: LD_VAR 0 1
7983: PPUSH
7984: CALL_OW 437
7988: ST_TO_ADDR
// if task then
7989: LD_VAR 0 3
7993: IFFALSE 8021
// if task [ 1 ] [ 1 ] = p then
7995: LD_VAR 0 3
7999: PUSH
8000: LD_INT 1
8002: ARRAY
8003: PUSH
8004: LD_INT 1
8006: ARRAY
8007: PUSH
8008: LD_STRING p
8010: EQUAL
8011: IFFALSE 8021
// result := true ;
8013: LD_ADDR_VAR 0 2
8017: PUSH
8018: LD_INT 1
8020: ST_TO_ADDR
// end ;
8021: LD_VAR 0 2
8025: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
8026: LD_INT 0
8028: PPUSH
8029: PPUSH
8030: PPUSH
8031: PPUSH
// if pos < 1 then
8032: LD_VAR 0 2
8036: PUSH
8037: LD_INT 1
8039: LESS
8040: IFFALSE 8044
// exit ;
8042: GO 8347
// if pos = 1 then
8044: LD_VAR 0 2
8048: PUSH
8049: LD_INT 1
8051: EQUAL
8052: IFFALSE 8085
// result := Replace ( arr , pos [ 1 ] , value ) else
8054: LD_ADDR_VAR 0 4
8058: PUSH
8059: LD_VAR 0 1
8063: PPUSH
8064: LD_VAR 0 2
8068: PUSH
8069: LD_INT 1
8071: ARRAY
8072: PPUSH
8073: LD_VAR 0 3
8077: PPUSH
8078: CALL_OW 1
8082: ST_TO_ADDR
8083: GO 8347
// begin tmp := arr ;
8085: LD_ADDR_VAR 0 6
8089: PUSH
8090: LD_VAR 0 1
8094: ST_TO_ADDR
// s_arr := [ tmp ] ;
8095: LD_ADDR_VAR 0 7
8099: PUSH
8100: LD_VAR 0 6
8104: PUSH
8105: EMPTY
8106: LIST
8107: ST_TO_ADDR
// for i = 1 to pos - 1 do
8108: LD_ADDR_VAR 0 5
8112: PUSH
8113: DOUBLE
8114: LD_INT 1
8116: DEC
8117: ST_TO_ADDR
8118: LD_VAR 0 2
8122: PUSH
8123: LD_INT 1
8125: MINUS
8126: PUSH
8127: FOR_TO
8128: IFFALSE 8173
// begin tmp := tmp [ pos [ i ] ] ;
8130: LD_ADDR_VAR 0 6
8134: PUSH
8135: LD_VAR 0 6
8139: PUSH
8140: LD_VAR 0 2
8144: PUSH
8145: LD_VAR 0 5
8149: ARRAY
8150: ARRAY
8151: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
8152: LD_ADDR_VAR 0 7
8156: PUSH
8157: LD_VAR 0 7
8161: PUSH
8162: LD_VAR 0 6
8166: PUSH
8167: EMPTY
8168: LIST
8169: ADD
8170: ST_TO_ADDR
// end ;
8171: GO 8127
8173: POP
8174: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
8175: LD_ADDR_VAR 0 6
8179: PUSH
8180: LD_VAR 0 6
8184: PPUSH
8185: LD_VAR 0 2
8189: PUSH
8190: LD_VAR 0 2
8194: ARRAY
8195: PPUSH
8196: LD_VAR 0 3
8200: PPUSH
8201: CALL_OW 1
8205: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
8206: LD_ADDR_VAR 0 7
8210: PUSH
8211: LD_VAR 0 7
8215: PPUSH
8216: LD_VAR 0 7
8220: PPUSH
8221: LD_VAR 0 6
8225: PPUSH
8226: CALL_OW 1
8230: ST_TO_ADDR
// for i = s_arr downto 2 do
8231: LD_ADDR_VAR 0 5
8235: PUSH
8236: DOUBLE
8237: LD_VAR 0 7
8241: INC
8242: ST_TO_ADDR
8243: LD_INT 2
8245: PUSH
8246: FOR_DOWNTO
8247: IFFALSE 8331
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
8249: LD_ADDR_VAR 0 6
8253: PUSH
8254: LD_VAR 0 7
8258: PUSH
8259: LD_VAR 0 5
8263: PUSH
8264: LD_INT 1
8266: MINUS
8267: ARRAY
8268: PPUSH
8269: LD_VAR 0 2
8273: PUSH
8274: LD_VAR 0 5
8278: PUSH
8279: LD_INT 1
8281: MINUS
8282: ARRAY
8283: PPUSH
8284: LD_VAR 0 7
8288: PUSH
8289: LD_VAR 0 5
8293: ARRAY
8294: PPUSH
8295: CALL_OW 1
8299: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
8300: LD_ADDR_VAR 0 7
8304: PUSH
8305: LD_VAR 0 7
8309: PPUSH
8310: LD_VAR 0 5
8314: PUSH
8315: LD_INT 1
8317: MINUS
8318: PPUSH
8319: LD_VAR 0 6
8323: PPUSH
8324: CALL_OW 1
8328: ST_TO_ADDR
// end ;
8329: GO 8246
8331: POP
8332: POP
// result := s_arr [ 1 ] ;
8333: LD_ADDR_VAR 0 4
8337: PUSH
8338: LD_VAR 0 7
8342: PUSH
8343: LD_INT 1
8345: ARRAY
8346: ST_TO_ADDR
// end ; end ;
8347: LD_VAR 0 4
8351: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
8352: LD_INT 0
8354: PPUSH
8355: PPUSH
// if not list then
8356: LD_VAR 0 1
8360: NOT
8361: IFFALSE 8365
// exit ;
8363: GO 8456
// i := list [ pos1 ] ;
8365: LD_ADDR_VAR 0 5
8369: PUSH
8370: LD_VAR 0 1
8374: PUSH
8375: LD_VAR 0 2
8379: ARRAY
8380: ST_TO_ADDR
// if not i then
8381: LD_VAR 0 5
8385: NOT
8386: IFFALSE 8390
// exit ;
8388: GO 8456
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
8390: LD_ADDR_VAR 0 1
8394: PUSH
8395: LD_VAR 0 1
8399: PPUSH
8400: LD_VAR 0 2
8404: PPUSH
8405: LD_VAR 0 1
8409: PUSH
8410: LD_VAR 0 3
8414: ARRAY
8415: PPUSH
8416: CALL_OW 1
8420: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
8421: LD_ADDR_VAR 0 1
8425: PUSH
8426: LD_VAR 0 1
8430: PPUSH
8431: LD_VAR 0 3
8435: PPUSH
8436: LD_VAR 0 5
8440: PPUSH
8441: CALL_OW 1
8445: ST_TO_ADDR
// result := list ;
8446: LD_ADDR_VAR 0 4
8450: PUSH
8451: LD_VAR 0 1
8455: ST_TO_ADDR
// end ;
8456: LD_VAR 0 4
8460: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
8461: LD_INT 0
8463: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
8464: LD_ADDR_VAR 0 5
8468: PUSH
8469: LD_VAR 0 1
8473: PPUSH
8474: CALL_OW 250
8478: PPUSH
8479: LD_VAR 0 1
8483: PPUSH
8484: CALL_OW 251
8488: PPUSH
8489: LD_VAR 0 2
8493: PPUSH
8494: LD_VAR 0 3
8498: PPUSH
8499: LD_VAR 0 4
8503: PPUSH
8504: CALL 8886 0 5
8508: ST_TO_ADDR
// end ;
8509: LD_VAR 0 5
8513: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
8514: LD_INT 0
8516: PPUSH
8517: PPUSH
8518: PPUSH
8519: PPUSH
// if not list or not unit then
8520: LD_VAR 0 2
8524: NOT
8525: IFTRUE 8534
8527: PUSH
8528: LD_VAR 0 1
8532: NOT
8533: OR
8534: IFFALSE 8538
// exit ;
8536: GO 8881
// result := [ ] ;
8538: LD_ADDR_VAR 0 5
8542: PUSH
8543: EMPTY
8544: ST_TO_ADDR
// for i in list do
8545: LD_ADDR_VAR 0 6
8549: PUSH
8550: LD_VAR 0 2
8554: PUSH
8555: FOR_IN
8556: IFFALSE 8774
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
8558: LD_ADDR_VAR 0 8
8562: PUSH
8563: LD_VAR 0 1
8567: PPUSH
8568: LD_VAR 0 6
8572: PUSH
8573: LD_INT 1
8575: ARRAY
8576: PPUSH
8577: LD_VAR 0 6
8581: PUSH
8582: LD_INT 2
8584: ARRAY
8585: PPUSH
8586: CALL_OW 297
8590: ST_TO_ADDR
// if not Count ( result ) then
8591: LD_VAR 0 5
8595: PPUSH
8596: CALL 5142 0 1
8600: NOT
8601: IFFALSE 8634
// begin result := Join ( result , [ i , tmp ] ) ;
8603: LD_ADDR_VAR 0 5
8607: PUSH
8608: LD_VAR 0 5
8612: PPUSH
8613: LD_VAR 0 6
8617: PUSH
8618: LD_VAR 0 8
8622: PUSH
8623: EMPTY
8624: LIST
8625: LIST
8626: PPUSH
8627: CALL 41074 0 2
8631: ST_TO_ADDR
// continue ;
8632: GO 8555
// end ; if result [ result ] [ 2 ] <= tmp then
8634: LD_VAR 0 5
8638: PUSH
8639: LD_VAR 0 5
8643: ARRAY
8644: PUSH
8645: LD_INT 2
8647: ARRAY
8648: PUSH
8649: LD_VAR 0 8
8653: LESSEQUAL
8654: IFFALSE 8687
// result := Join ( result , [ i , tmp ] ) else
8656: LD_ADDR_VAR 0 5
8660: PUSH
8661: LD_VAR 0 5
8665: PPUSH
8666: LD_VAR 0 6
8670: PUSH
8671: LD_VAR 0 8
8675: PUSH
8676: EMPTY
8677: LIST
8678: LIST
8679: PPUSH
8680: CALL 41074 0 2
8684: ST_TO_ADDR
8685: GO 8772
// begin for j := 1 to Count ( result ) do
8687: LD_ADDR_VAR 0 7
8691: PUSH
8692: DOUBLE
8693: LD_INT 1
8695: DEC
8696: ST_TO_ADDR
8697: LD_VAR 0 5
8701: PPUSH
8702: CALL 5142 0 1
8706: PUSH
8707: FOR_TO
8708: IFFALSE 8770
// begin if tmp < result [ j ] [ 2 ] then
8710: LD_VAR 0 8
8714: PUSH
8715: LD_VAR 0 5
8719: PUSH
8720: LD_VAR 0 7
8724: ARRAY
8725: PUSH
8726: LD_INT 2
8728: ARRAY
8729: LESS
8730: IFFALSE 8768
// begin result := Insert ( result , j , [ i , tmp ] ) ;
8732: LD_ADDR_VAR 0 5
8736: PUSH
8737: LD_VAR 0 5
8741: PPUSH
8742: LD_VAR 0 7
8746: PPUSH
8747: LD_VAR 0 6
8751: PUSH
8752: LD_VAR 0 8
8756: PUSH
8757: EMPTY
8758: LIST
8759: LIST
8760: PPUSH
8761: CALL_OW 2
8765: ST_TO_ADDR
// break ;
8766: GO 8770
// end ; end ;
8768: GO 8707
8770: POP
8771: POP
// end ; end ;
8772: GO 8555
8774: POP
8775: POP
// if result and not asc then
8776: LD_VAR 0 5
8780: IFFALSE 8789
8782: PUSH
8783: LD_VAR 0 3
8787: NOT
8788: AND
8789: IFFALSE 8806
// result := ReverseArray ( result ) ;
8791: LD_ADDR_VAR 0 5
8795: PUSH
8796: LD_VAR 0 5
8800: PPUSH
8801: CALL 36164 0 1
8805: ST_TO_ADDR
// tmp := [ ] ;
8806: LD_ADDR_VAR 0 8
8810: PUSH
8811: EMPTY
8812: ST_TO_ADDR
// if mode then
8813: LD_VAR 0 4
8817: IFFALSE 8881
// begin for i := 1 to result do
8819: LD_ADDR_VAR 0 6
8823: PUSH
8824: DOUBLE
8825: LD_INT 1
8827: DEC
8828: ST_TO_ADDR
8829: LD_VAR 0 5
8833: PUSH
8834: FOR_TO
8835: IFFALSE 8869
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
8837: LD_ADDR_VAR 0 8
8841: PUSH
8842: LD_VAR 0 8
8846: PPUSH
8847: LD_VAR 0 5
8851: PUSH
8852: LD_VAR 0 6
8856: ARRAY
8857: PUSH
8858: LD_INT 1
8860: ARRAY
8861: PPUSH
8862: CALL 41074 0 2
8866: ST_TO_ADDR
8867: GO 8834
8869: POP
8870: POP
// result := tmp ;
8871: LD_ADDR_VAR 0 5
8875: PUSH
8876: LD_VAR 0 8
8880: ST_TO_ADDR
// end ; end ;
8881: LD_VAR 0 5
8885: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
8886: LD_INT 0
8888: PPUSH
8889: PPUSH
8890: PPUSH
8891: PPUSH
// if not list then
8892: LD_VAR 0 3
8896: NOT
8897: IFFALSE 8901
// exit ;
8899: GO 9291
// result := [ ] ;
8901: LD_ADDR_VAR 0 6
8905: PUSH
8906: EMPTY
8907: ST_TO_ADDR
// for i in list do
8908: LD_ADDR_VAR 0 7
8912: PUSH
8913: LD_VAR 0 3
8917: PUSH
8918: FOR_IN
8919: IFFALSE 9121
// begin tmp := GetDistUnitXY ( i , x , y ) ;
8921: LD_ADDR_VAR 0 9
8925: PUSH
8926: LD_VAR 0 7
8930: PPUSH
8931: LD_VAR 0 1
8935: PPUSH
8936: LD_VAR 0 2
8940: PPUSH
8941: CALL_OW 297
8945: ST_TO_ADDR
// if not result then
8946: LD_VAR 0 6
8950: NOT
8951: IFFALSE 8977
// result := [ [ i , tmp ] ] else
8953: LD_ADDR_VAR 0 6
8957: PUSH
8958: LD_VAR 0 7
8962: PUSH
8963: LD_VAR 0 9
8967: PUSH
8968: EMPTY
8969: LIST
8970: LIST
8971: PUSH
8972: EMPTY
8973: LIST
8974: ST_TO_ADDR
8975: GO 9119
// begin if result [ result ] [ 2 ] <= tmp then
8977: LD_VAR 0 6
8981: PUSH
8982: LD_VAR 0 6
8986: ARRAY
8987: PUSH
8988: LD_INT 2
8990: ARRAY
8991: PUSH
8992: LD_VAR 0 9
8996: LESSEQUAL
8997: IFFALSE 9039
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
8999: LD_ADDR_VAR 0 6
9003: PUSH
9004: LD_VAR 0 6
9008: PPUSH
9009: LD_VAR 0 6
9013: PUSH
9014: LD_INT 1
9016: PLUS
9017: PPUSH
9018: LD_VAR 0 7
9022: PUSH
9023: LD_VAR 0 9
9027: PUSH
9028: EMPTY
9029: LIST
9030: LIST
9031: PPUSH
9032: CALL_OW 2
9036: ST_TO_ADDR
9037: GO 9119
// for j := 1 to result do
9039: LD_ADDR_VAR 0 8
9043: PUSH
9044: DOUBLE
9045: LD_INT 1
9047: DEC
9048: ST_TO_ADDR
9049: LD_VAR 0 6
9053: PUSH
9054: FOR_TO
9055: IFFALSE 9117
// begin if tmp < result [ j ] [ 2 ] then
9057: LD_VAR 0 9
9061: PUSH
9062: LD_VAR 0 6
9066: PUSH
9067: LD_VAR 0 8
9071: ARRAY
9072: PUSH
9073: LD_INT 2
9075: ARRAY
9076: LESS
9077: IFFALSE 9115
// begin result := Insert ( result , j , [ i , tmp ] ) ;
9079: LD_ADDR_VAR 0 6
9083: PUSH
9084: LD_VAR 0 6
9088: PPUSH
9089: LD_VAR 0 8
9093: PPUSH
9094: LD_VAR 0 7
9098: PUSH
9099: LD_VAR 0 9
9103: PUSH
9104: EMPTY
9105: LIST
9106: LIST
9107: PPUSH
9108: CALL_OW 2
9112: ST_TO_ADDR
// break ;
9113: GO 9117
// end ; end ;
9115: GO 9054
9117: POP
9118: POP
// end ; end ;
9119: GO 8918
9121: POP
9122: POP
// if result and not asc then
9123: LD_VAR 0 6
9127: IFFALSE 9136
9129: PUSH
9130: LD_VAR 0 4
9134: NOT
9135: AND
9136: IFFALSE 9211
// begin tmp := result ;
9138: LD_ADDR_VAR 0 9
9142: PUSH
9143: LD_VAR 0 6
9147: ST_TO_ADDR
// for i = tmp downto 1 do
9148: LD_ADDR_VAR 0 7
9152: PUSH
9153: DOUBLE
9154: LD_VAR 0 9
9158: INC
9159: ST_TO_ADDR
9160: LD_INT 1
9162: PUSH
9163: FOR_DOWNTO
9164: IFFALSE 9209
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
9166: LD_ADDR_VAR 0 6
9170: PUSH
9171: LD_VAR 0 6
9175: PPUSH
9176: LD_VAR 0 9
9180: PUSH
9181: LD_VAR 0 7
9185: MINUS
9186: PUSH
9187: LD_INT 1
9189: PLUS
9190: PPUSH
9191: LD_VAR 0 9
9195: PUSH
9196: LD_VAR 0 7
9200: ARRAY
9201: PPUSH
9202: CALL_OW 1
9206: ST_TO_ADDR
9207: GO 9163
9209: POP
9210: POP
// end ; tmp := [ ] ;
9211: LD_ADDR_VAR 0 9
9215: PUSH
9216: EMPTY
9217: ST_TO_ADDR
// if mode then
9218: LD_VAR 0 5
9222: IFFALSE 9291
// begin for i = 1 to result do
9224: LD_ADDR_VAR 0 7
9228: PUSH
9229: DOUBLE
9230: LD_INT 1
9232: DEC
9233: ST_TO_ADDR
9234: LD_VAR 0 6
9238: PUSH
9239: FOR_TO
9240: IFFALSE 9279
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
9242: LD_ADDR_VAR 0 9
9246: PUSH
9247: LD_VAR 0 9
9251: PPUSH
9252: LD_VAR 0 7
9256: PPUSH
9257: LD_VAR 0 6
9261: PUSH
9262: LD_VAR 0 7
9266: ARRAY
9267: PUSH
9268: LD_INT 1
9270: ARRAY
9271: PPUSH
9272: CALL_OW 1
9276: ST_TO_ADDR
9277: GO 9239
9279: POP
9280: POP
// result := tmp ;
9281: LD_ADDR_VAR 0 6
9285: PUSH
9286: LD_VAR 0 9
9290: ST_TO_ADDR
// end ; end ;
9291: LD_VAR 0 6
9295: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
9296: LD_INT 0
9298: PPUSH
9299: PPUSH
9300: PPUSH
9301: PPUSH
9302: PPUSH
9303: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
9304: LD_ADDR_VAR 0 5
9308: PUSH
9309: LD_INT 0
9311: PUSH
9312: LD_INT 0
9314: PUSH
9315: LD_INT 0
9317: PUSH
9318: EMPTY
9319: PUSH
9320: EMPTY
9321: LIST
9322: LIST
9323: LIST
9324: LIST
9325: ST_TO_ADDR
// if not x or not y then
9326: LD_VAR 0 2
9330: NOT
9331: IFTRUE 9340
9333: PUSH
9334: LD_VAR 0 3
9338: NOT
9339: OR
9340: IFFALSE 9344
// exit ;
9342: GO 11000
// if not range then
9344: LD_VAR 0 4
9348: NOT
9349: IFFALSE 9359
// range := 10 ;
9351: LD_ADDR_VAR 0 4
9355: PUSH
9356: LD_INT 10
9358: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9359: LD_ADDR_VAR 0 8
9363: PUSH
9364: LD_INT 81
9366: PUSH
9367: LD_VAR 0 1
9371: PUSH
9372: EMPTY
9373: LIST
9374: LIST
9375: PUSH
9376: LD_INT 92
9378: PUSH
9379: LD_VAR 0 2
9383: PUSH
9384: LD_VAR 0 3
9388: PUSH
9389: LD_VAR 0 4
9393: PUSH
9394: EMPTY
9395: LIST
9396: LIST
9397: LIST
9398: LIST
9399: PUSH
9400: LD_INT 3
9402: PUSH
9403: LD_INT 21
9405: PUSH
9406: LD_INT 3
9408: PUSH
9409: EMPTY
9410: LIST
9411: LIST
9412: PUSH
9413: EMPTY
9414: LIST
9415: LIST
9416: PUSH
9417: EMPTY
9418: LIST
9419: LIST
9420: LIST
9421: PPUSH
9422: CALL_OW 69
9426: ST_TO_ADDR
// if not tmp then
9427: LD_VAR 0 8
9431: NOT
9432: IFFALSE 9436
// exit ;
9434: GO 11000
// for i in tmp do
9436: LD_ADDR_VAR 0 6
9440: PUSH
9441: LD_VAR 0 8
9445: PUSH
9446: FOR_IN
9447: IFFALSE 10975
// begin points := [ 0 , 0 , 0 ] ;
9449: LD_ADDR_VAR 0 9
9453: PUSH
9454: LD_INT 0
9456: PUSH
9457: LD_INT 0
9459: PUSH
9460: LD_INT 0
9462: PUSH
9463: EMPTY
9464: LIST
9465: LIST
9466: LIST
9467: ST_TO_ADDR
// bpoints := 1 ;
9468: LD_ADDR_VAR 0 10
9472: PUSH
9473: LD_INT 1
9475: ST_TO_ADDR
// case GetType ( i ) of unit_human :
9476: LD_VAR 0 6
9480: PPUSH
9481: CALL_OW 247
9485: PUSH
9486: LD_INT 1
9488: DOUBLE
9489: EQUAL
9490: IFTRUE 9494
9492: GO 10076
9494: POP
// begin if GetClass ( i ) = 1 then
9495: LD_VAR 0 6
9499: PPUSH
9500: CALL_OW 257
9504: PUSH
9505: LD_INT 1
9507: EQUAL
9508: IFFALSE 9529
// points := [ 10 , 5 , 3 ] ;
9510: LD_ADDR_VAR 0 9
9514: PUSH
9515: LD_INT 10
9517: PUSH
9518: LD_INT 5
9520: PUSH
9521: LD_INT 3
9523: PUSH
9524: EMPTY
9525: LIST
9526: LIST
9527: LIST
9528: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
9529: LD_VAR 0 6
9533: PPUSH
9534: CALL_OW 257
9538: PUSH
9539: LD_INT 2
9541: PUSH
9542: LD_INT 3
9544: PUSH
9545: LD_INT 4
9547: PUSH
9548: EMPTY
9549: LIST
9550: LIST
9551: LIST
9552: IN
9553: IFFALSE 9574
// points := [ 3 , 2 , 1 ] ;
9555: LD_ADDR_VAR 0 9
9559: PUSH
9560: LD_INT 3
9562: PUSH
9563: LD_INT 2
9565: PUSH
9566: LD_INT 1
9568: PUSH
9569: EMPTY
9570: LIST
9571: LIST
9572: LIST
9573: ST_TO_ADDR
// if GetClass ( i ) = 5 then
9574: LD_VAR 0 6
9578: PPUSH
9579: CALL_OW 257
9583: PUSH
9584: LD_INT 5
9586: EQUAL
9587: IFFALSE 9608
// points := [ 130 , 5 , 2 ] ;
9589: LD_ADDR_VAR 0 9
9593: PUSH
9594: LD_INT 130
9596: PUSH
9597: LD_INT 5
9599: PUSH
9600: LD_INT 2
9602: PUSH
9603: EMPTY
9604: LIST
9605: LIST
9606: LIST
9607: ST_TO_ADDR
// if GetClass ( i ) = 8 then
9608: LD_VAR 0 6
9612: PPUSH
9613: CALL_OW 257
9617: PUSH
9618: LD_INT 8
9620: EQUAL
9621: IFFALSE 9642
// points := [ 35 , 35 , 30 ] ;
9623: LD_ADDR_VAR 0 9
9627: PUSH
9628: LD_INT 35
9630: PUSH
9631: LD_INT 35
9633: PUSH
9634: LD_INT 30
9636: PUSH
9637: EMPTY
9638: LIST
9639: LIST
9640: LIST
9641: ST_TO_ADDR
// if GetClass ( i ) = 9 then
9642: LD_VAR 0 6
9646: PPUSH
9647: CALL_OW 257
9651: PUSH
9652: LD_INT 9
9654: EQUAL
9655: IFFALSE 9676
// points := [ 20 , 55 , 40 ] ;
9657: LD_ADDR_VAR 0 9
9661: PUSH
9662: LD_INT 20
9664: PUSH
9665: LD_INT 55
9667: PUSH
9668: LD_INT 40
9670: PUSH
9671: EMPTY
9672: LIST
9673: LIST
9674: LIST
9675: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
9676: LD_VAR 0 6
9680: PPUSH
9681: CALL_OW 257
9685: PUSH
9686: LD_INT 12
9688: PUSH
9689: LD_INT 16
9691: PUSH
9692: EMPTY
9693: LIST
9694: LIST
9695: IN
9696: IFFALSE 9717
// points := [ 5 , 3 , 2 ] ;
9698: LD_ADDR_VAR 0 9
9702: PUSH
9703: LD_INT 5
9705: PUSH
9706: LD_INT 3
9708: PUSH
9709: LD_INT 2
9711: PUSH
9712: EMPTY
9713: LIST
9714: LIST
9715: LIST
9716: ST_TO_ADDR
// if GetClass ( i ) = 17 then
9717: LD_VAR 0 6
9721: PPUSH
9722: CALL_OW 257
9726: PUSH
9727: LD_INT 17
9729: EQUAL
9730: IFFALSE 9751
// points := [ 100 , 50 , 75 ] ;
9732: LD_ADDR_VAR 0 9
9736: PUSH
9737: LD_INT 100
9739: PUSH
9740: LD_INT 50
9742: PUSH
9743: LD_INT 75
9745: PUSH
9746: EMPTY
9747: LIST
9748: LIST
9749: LIST
9750: ST_TO_ADDR
// if GetClass ( i ) = 15 then
9751: LD_VAR 0 6
9755: PPUSH
9756: CALL_OW 257
9760: PUSH
9761: LD_INT 15
9763: EQUAL
9764: IFFALSE 9785
// points := [ 10 , 5 , 3 ] ;
9766: LD_ADDR_VAR 0 9
9770: PUSH
9771: LD_INT 10
9773: PUSH
9774: LD_INT 5
9776: PUSH
9777: LD_INT 3
9779: PUSH
9780: EMPTY
9781: LIST
9782: LIST
9783: LIST
9784: ST_TO_ADDR
// if GetClass ( i ) = 14 then
9785: LD_VAR 0 6
9789: PPUSH
9790: CALL_OW 257
9794: PUSH
9795: LD_INT 14
9797: EQUAL
9798: IFFALSE 9819
// points := [ 10 , 0 , 0 ] ;
9800: LD_ADDR_VAR 0 9
9804: PUSH
9805: LD_INT 10
9807: PUSH
9808: LD_INT 0
9810: PUSH
9811: LD_INT 0
9813: PUSH
9814: EMPTY
9815: LIST
9816: LIST
9817: LIST
9818: ST_TO_ADDR
// if GetClass ( i ) = 11 then
9819: LD_VAR 0 6
9823: PPUSH
9824: CALL_OW 257
9828: PUSH
9829: LD_INT 11
9831: EQUAL
9832: IFFALSE 9853
// points := [ 30 , 10 , 5 ] ;
9834: LD_ADDR_VAR 0 9
9838: PUSH
9839: LD_INT 30
9841: PUSH
9842: LD_INT 10
9844: PUSH
9845: LD_INT 5
9847: PUSH
9848: EMPTY
9849: LIST
9850: LIST
9851: LIST
9852: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
9853: LD_VAR 0 1
9857: PPUSH
9858: LD_INT 5
9860: PPUSH
9861: CALL_OW 321
9865: PUSH
9866: LD_INT 2
9868: EQUAL
9869: IFFALSE 9886
// bpoints := bpoints * 1.8 ;
9871: LD_ADDR_VAR 0 10
9875: PUSH
9876: LD_VAR 0 10
9880: PUSH
9881: LD_REAL  1.80000000000000E+0000
9884: MUL
9885: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
9886: LD_VAR 0 6
9890: PPUSH
9891: CALL_OW 257
9895: PUSH
9896: LD_INT 1
9898: PUSH
9899: LD_INT 2
9901: PUSH
9902: LD_INT 3
9904: PUSH
9905: LD_INT 4
9907: PUSH
9908: EMPTY
9909: LIST
9910: LIST
9911: LIST
9912: LIST
9913: IN
9914: IFFALSE 9934
9916: PUSH
9917: LD_VAR 0 1
9921: PPUSH
9922: LD_INT 51
9924: PPUSH
9925: CALL_OW 321
9929: PUSH
9930: LD_INT 2
9932: EQUAL
9933: AND
9934: IFFALSE 9951
// bpoints := bpoints * 1.2 ;
9936: LD_ADDR_VAR 0 10
9940: PUSH
9941: LD_VAR 0 10
9945: PUSH
9946: LD_REAL  1.20000000000000E+0000
9949: MUL
9950: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
9951: LD_VAR 0 6
9955: PPUSH
9956: CALL_OW 257
9960: PUSH
9961: LD_INT 5
9963: PUSH
9964: LD_INT 7
9966: PUSH
9967: LD_INT 9
9969: PUSH
9970: EMPTY
9971: LIST
9972: LIST
9973: LIST
9974: IN
9975: IFFALSE 9995
9977: PUSH
9978: LD_VAR 0 1
9982: PPUSH
9983: LD_INT 52
9985: PPUSH
9986: CALL_OW 321
9990: PUSH
9991: LD_INT 2
9993: EQUAL
9994: AND
9995: IFFALSE 10012
// bpoints := bpoints * 1.5 ;
9997: LD_ADDR_VAR 0 10
10001: PUSH
10002: LD_VAR 0 10
10006: PUSH
10007: LD_REAL  1.50000000000000E+0000
10010: MUL
10011: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
10012: LD_VAR 0 1
10016: PPUSH
10017: LD_INT 66
10019: PPUSH
10020: CALL_OW 321
10024: PUSH
10025: LD_INT 2
10027: EQUAL
10028: IFFALSE 10045
// bpoints := bpoints * 1.1 ;
10030: LD_ADDR_VAR 0 10
10034: PUSH
10035: LD_VAR 0 10
10039: PUSH
10040: LD_REAL  1.10000000000000E+0000
10043: MUL
10044: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
10045: LD_ADDR_VAR 0 10
10049: PUSH
10050: LD_VAR 0 10
10054: PUSH
10055: LD_VAR 0 6
10059: PPUSH
10060: LD_INT 1
10062: PPUSH
10063: CALL_OW 259
10067: PUSH
10068: LD_REAL  1.15000000000000E+0000
10071: MUL
10072: MUL
10073: ST_TO_ADDR
// end ; unit_vehicle :
10074: GO 10904
10076: LD_INT 2
10078: DOUBLE
10079: EQUAL
10080: IFTRUE 10084
10082: GO 10892
10084: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
10085: LD_VAR 0 6
10089: PPUSH
10090: CALL_OW 264
10094: PUSH
10095: LD_INT 2
10097: PUSH
10098: LD_INT 42
10100: PUSH
10101: LD_INT 24
10103: PUSH
10104: EMPTY
10105: LIST
10106: LIST
10107: LIST
10108: IN
10109: IFFALSE 10130
// points := [ 25 , 5 , 3 ] ;
10111: LD_ADDR_VAR 0 9
10115: PUSH
10116: LD_INT 25
10118: PUSH
10119: LD_INT 5
10121: PUSH
10122: LD_INT 3
10124: PUSH
10125: EMPTY
10126: LIST
10127: LIST
10128: LIST
10129: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
10130: LD_VAR 0 6
10134: PPUSH
10135: CALL_OW 264
10139: PUSH
10140: LD_INT 4
10142: PUSH
10143: LD_INT 43
10145: PUSH
10146: LD_INT 25
10148: PUSH
10149: EMPTY
10150: LIST
10151: LIST
10152: LIST
10153: IN
10154: IFFALSE 10175
// points := [ 40 , 15 , 5 ] ;
10156: LD_ADDR_VAR 0 9
10160: PUSH
10161: LD_INT 40
10163: PUSH
10164: LD_INT 15
10166: PUSH
10167: LD_INT 5
10169: PUSH
10170: EMPTY
10171: LIST
10172: LIST
10173: LIST
10174: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
10175: LD_VAR 0 6
10179: PPUSH
10180: CALL_OW 264
10184: PUSH
10185: LD_INT 3
10187: PUSH
10188: LD_INT 23
10190: PUSH
10191: EMPTY
10192: LIST
10193: LIST
10194: IN
10195: IFFALSE 10216
// points := [ 7 , 25 , 8 ] ;
10197: LD_ADDR_VAR 0 9
10201: PUSH
10202: LD_INT 7
10204: PUSH
10205: LD_INT 25
10207: PUSH
10208: LD_INT 8
10210: PUSH
10211: EMPTY
10212: LIST
10213: LIST
10214: LIST
10215: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
10216: LD_VAR 0 6
10220: PPUSH
10221: CALL_OW 264
10225: PUSH
10226: LD_INT 5
10228: PUSH
10229: LD_INT 27
10231: PUSH
10232: LD_INT 44
10234: PUSH
10235: EMPTY
10236: LIST
10237: LIST
10238: LIST
10239: IN
10240: IFFALSE 10261
// points := [ 14 , 50 , 16 ] ;
10242: LD_ADDR_VAR 0 9
10246: PUSH
10247: LD_INT 14
10249: PUSH
10250: LD_INT 50
10252: PUSH
10253: LD_INT 16
10255: PUSH
10256: EMPTY
10257: LIST
10258: LIST
10259: LIST
10260: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
10261: LD_VAR 0 6
10265: PPUSH
10266: CALL_OW 264
10270: PUSH
10271: LD_INT 6
10273: PUSH
10274: LD_INT 46
10276: PUSH
10277: EMPTY
10278: LIST
10279: LIST
10280: IN
10281: IFFALSE 10302
// points := [ 32 , 120 , 70 ] ;
10283: LD_ADDR_VAR 0 9
10287: PUSH
10288: LD_INT 32
10290: PUSH
10291: LD_INT 120
10293: PUSH
10294: LD_INT 70
10296: PUSH
10297: EMPTY
10298: LIST
10299: LIST
10300: LIST
10301: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
10302: LD_VAR 0 6
10306: PPUSH
10307: CALL_OW 264
10311: PUSH
10312: LD_INT 7
10314: PUSH
10315: LD_INT 28
10317: PUSH
10318: LD_INT 45
10320: PUSH
10321: LD_INT 92
10323: PUSH
10324: EMPTY
10325: LIST
10326: LIST
10327: LIST
10328: LIST
10329: IN
10330: IFFALSE 10351
// points := [ 35 , 20 , 45 ] ;
10332: LD_ADDR_VAR 0 9
10336: PUSH
10337: LD_INT 35
10339: PUSH
10340: LD_INT 20
10342: PUSH
10343: LD_INT 45
10345: PUSH
10346: EMPTY
10347: LIST
10348: LIST
10349: LIST
10350: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
10351: LD_VAR 0 6
10355: PPUSH
10356: CALL_OW 264
10360: PUSH
10361: LD_INT 47
10363: PUSH
10364: EMPTY
10365: LIST
10366: IN
10367: IFFALSE 10388
// points := [ 67 , 45 , 75 ] ;
10369: LD_ADDR_VAR 0 9
10373: PUSH
10374: LD_INT 67
10376: PUSH
10377: LD_INT 45
10379: PUSH
10380: LD_INT 75
10382: PUSH
10383: EMPTY
10384: LIST
10385: LIST
10386: LIST
10387: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
10388: LD_VAR 0 6
10392: PPUSH
10393: CALL_OW 264
10397: PUSH
10398: LD_INT 26
10400: PUSH
10401: EMPTY
10402: LIST
10403: IN
10404: IFFALSE 10425
// points := [ 120 , 30 , 80 ] ;
10406: LD_ADDR_VAR 0 9
10410: PUSH
10411: LD_INT 120
10413: PUSH
10414: LD_INT 30
10416: PUSH
10417: LD_INT 80
10419: PUSH
10420: EMPTY
10421: LIST
10422: LIST
10423: LIST
10424: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
10425: LD_VAR 0 6
10429: PPUSH
10430: CALL_OW 264
10434: PUSH
10435: LD_INT 22
10437: PUSH
10438: EMPTY
10439: LIST
10440: IN
10441: IFFALSE 10462
// points := [ 40 , 1 , 1 ] ;
10443: LD_ADDR_VAR 0 9
10447: PUSH
10448: LD_INT 40
10450: PUSH
10451: LD_INT 1
10453: PUSH
10454: LD_INT 1
10456: PUSH
10457: EMPTY
10458: LIST
10459: LIST
10460: LIST
10461: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
10462: LD_VAR 0 6
10466: PPUSH
10467: CALL_OW 264
10471: PUSH
10472: LD_INT 29
10474: PUSH
10475: EMPTY
10476: LIST
10477: IN
10478: IFFALSE 10499
// points := [ 70 , 200 , 400 ] ;
10480: LD_ADDR_VAR 0 9
10484: PUSH
10485: LD_INT 70
10487: PUSH
10488: LD_INT 200
10490: PUSH
10491: LD_INT 400
10493: PUSH
10494: EMPTY
10495: LIST
10496: LIST
10497: LIST
10498: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
10499: LD_VAR 0 6
10503: PPUSH
10504: CALL_OW 264
10508: PUSH
10509: LD_INT 14
10511: PUSH
10512: LD_INT 53
10514: PUSH
10515: EMPTY
10516: LIST
10517: LIST
10518: IN
10519: IFFALSE 10540
// points := [ 40 , 10 , 20 ] ;
10521: LD_ADDR_VAR 0 9
10525: PUSH
10526: LD_INT 40
10528: PUSH
10529: LD_INT 10
10531: PUSH
10532: LD_INT 20
10534: PUSH
10535: EMPTY
10536: LIST
10537: LIST
10538: LIST
10539: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
10540: LD_VAR 0 6
10544: PPUSH
10545: CALL_OW 264
10549: PUSH
10550: LD_INT 9
10552: PUSH
10553: EMPTY
10554: LIST
10555: IN
10556: IFFALSE 10577
// points := [ 5 , 70 , 20 ] ;
10558: LD_ADDR_VAR 0 9
10562: PUSH
10563: LD_INT 5
10565: PUSH
10566: LD_INT 70
10568: PUSH
10569: LD_INT 20
10571: PUSH
10572: EMPTY
10573: LIST
10574: LIST
10575: LIST
10576: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
10577: LD_VAR 0 6
10581: PPUSH
10582: CALL_OW 264
10586: PUSH
10587: LD_INT 10
10589: PUSH
10590: EMPTY
10591: LIST
10592: IN
10593: IFFALSE 10614
// points := [ 35 , 110 , 70 ] ;
10595: LD_ADDR_VAR 0 9
10599: PUSH
10600: LD_INT 35
10602: PUSH
10603: LD_INT 110
10605: PUSH
10606: LD_INT 70
10608: PUSH
10609: EMPTY
10610: LIST
10611: LIST
10612: LIST
10613: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
10614: LD_VAR 0 6
10618: PPUSH
10619: CALL_OW 265
10623: PUSH
10624: LD_INT 25
10626: EQUAL
10627: IFFALSE 10648
// points := [ 80 , 65 , 100 ] ;
10629: LD_ADDR_VAR 0 9
10633: PUSH
10634: LD_INT 80
10636: PUSH
10637: LD_INT 65
10639: PUSH
10640: LD_INT 100
10642: PUSH
10643: EMPTY
10644: LIST
10645: LIST
10646: LIST
10647: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
10648: LD_VAR 0 6
10652: PPUSH
10653: CALL_OW 263
10657: PUSH
10658: LD_INT 1
10660: EQUAL
10661: IFFALSE 10696
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
10663: LD_ADDR_VAR 0 10
10667: PUSH
10668: LD_VAR 0 10
10672: PUSH
10673: LD_VAR 0 6
10677: PPUSH
10678: CALL_OW 311
10682: PPUSH
10683: LD_INT 3
10685: PPUSH
10686: CALL_OW 259
10690: PUSH
10691: LD_INT 4
10693: MUL
10694: MUL
10695: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
10696: LD_VAR 0 6
10700: PPUSH
10701: CALL_OW 263
10705: PUSH
10706: LD_INT 2
10708: EQUAL
10709: IFFALSE 10760
// begin j := IsControledBy ( i ) ;
10711: LD_ADDR_VAR 0 7
10715: PUSH
10716: LD_VAR 0 6
10720: PPUSH
10721: CALL_OW 312
10725: ST_TO_ADDR
// if j then
10726: LD_VAR 0 7
10730: IFFALSE 10760
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
10732: LD_ADDR_VAR 0 10
10736: PUSH
10737: LD_VAR 0 10
10741: PUSH
10742: LD_VAR 0 7
10746: PPUSH
10747: LD_INT 3
10749: PPUSH
10750: CALL_OW 259
10754: PUSH
10755: LD_INT 3
10757: MUL
10758: MUL
10759: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
10760: LD_VAR 0 6
10764: PPUSH
10765: CALL_OW 264
10769: PUSH
10770: LD_INT 5
10772: PUSH
10773: LD_INT 6
10775: PUSH
10776: LD_INT 46
10778: PUSH
10779: LD_INT 44
10781: PUSH
10782: LD_INT 47
10784: PUSH
10785: LD_INT 45
10787: PUSH
10788: LD_INT 28
10790: PUSH
10791: LD_INT 7
10793: PUSH
10794: LD_INT 27
10796: PUSH
10797: LD_INT 29
10799: PUSH
10800: EMPTY
10801: LIST
10802: LIST
10803: LIST
10804: LIST
10805: LIST
10806: LIST
10807: LIST
10808: LIST
10809: LIST
10810: LIST
10811: IN
10812: IFFALSE 10832
10814: PUSH
10815: LD_VAR 0 1
10819: PPUSH
10820: LD_INT 52
10822: PPUSH
10823: CALL_OW 321
10827: PUSH
10828: LD_INT 2
10830: EQUAL
10831: AND
10832: IFFALSE 10849
// bpoints := bpoints * 1.2 ;
10834: LD_ADDR_VAR 0 10
10838: PUSH
10839: LD_VAR 0 10
10843: PUSH
10844: LD_REAL  1.20000000000000E+0000
10847: MUL
10848: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
10849: LD_VAR 0 6
10853: PPUSH
10854: CALL_OW 264
10858: PUSH
10859: LD_INT 6
10861: PUSH
10862: LD_INT 46
10864: PUSH
10865: LD_INT 47
10867: PUSH
10868: EMPTY
10869: LIST
10870: LIST
10871: LIST
10872: IN
10873: IFFALSE 10890
// bpoints := bpoints * 1.2 ;
10875: LD_ADDR_VAR 0 10
10879: PUSH
10880: LD_VAR 0 10
10884: PUSH
10885: LD_REAL  1.20000000000000E+0000
10888: MUL
10889: ST_TO_ADDR
// end ; unit_building :
10890: GO 10904
10892: LD_INT 3
10894: DOUBLE
10895: EQUAL
10896: IFTRUE 10900
10898: GO 10903
10900: POP
// ; end ;
10901: GO 10904
10903: POP
// for j = 1 to 3 do
10904: LD_ADDR_VAR 0 7
10908: PUSH
10909: DOUBLE
10910: LD_INT 1
10912: DEC
10913: ST_TO_ADDR
10914: LD_INT 3
10916: PUSH
10917: FOR_TO
10918: IFFALSE 10971
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
10920: LD_ADDR_VAR 0 5
10924: PUSH
10925: LD_VAR 0 5
10929: PPUSH
10930: LD_VAR 0 7
10934: PPUSH
10935: LD_VAR 0 5
10939: PUSH
10940: LD_VAR 0 7
10944: ARRAY
10945: PUSH
10946: LD_VAR 0 9
10950: PUSH
10951: LD_VAR 0 7
10955: ARRAY
10956: PUSH
10957: LD_VAR 0 10
10961: MUL
10962: PLUS
10963: PPUSH
10964: CALL_OW 1
10968: ST_TO_ADDR
10969: GO 10917
10971: POP
10972: POP
// end ;
10973: GO 9446
10975: POP
10976: POP
// result := Replace ( result , 4 , tmp ) ;
10977: LD_ADDR_VAR 0 5
10981: PUSH
10982: LD_VAR 0 5
10986: PPUSH
10987: LD_INT 4
10989: PPUSH
10990: LD_VAR 0 8
10994: PPUSH
10995: CALL_OW 1
10999: ST_TO_ADDR
// end ;
11000: LD_VAR 0 5
11004: RET
// export function DangerAtRange ( unit , range ) ; begin
11005: LD_INT 0
11007: PPUSH
// if not unit then
11008: LD_VAR 0 1
11012: NOT
11013: IFFALSE 11017
// exit ;
11015: GO 11062
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
11017: LD_ADDR_VAR 0 3
11021: PUSH
11022: LD_VAR 0 1
11026: PPUSH
11027: CALL_OW 255
11031: PPUSH
11032: LD_VAR 0 1
11036: PPUSH
11037: CALL_OW 250
11041: PPUSH
11042: LD_VAR 0 1
11046: PPUSH
11047: CALL_OW 251
11051: PPUSH
11052: LD_VAR 0 2
11056: PPUSH
11057: CALL 9296 0 4
11061: ST_TO_ADDR
// end ;
11062: LD_VAR 0 3
11066: RET
// export function DangerInArea ( side , area ) ; begin
11067: LD_INT 0
11069: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
11070: LD_ADDR_VAR 0 3
11074: PUSH
11075: LD_VAR 0 2
11079: PPUSH
11080: LD_INT 81
11082: PUSH
11083: LD_VAR 0 1
11087: PUSH
11088: EMPTY
11089: LIST
11090: LIST
11091: PPUSH
11092: CALL_OW 70
11096: ST_TO_ADDR
// end ;
11097: LD_VAR 0 3
11101: RET
// export function IsExtension ( b ) ; begin
11102: LD_INT 0
11104: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
11105: LD_ADDR_VAR 0 2
11109: PUSH
11110: LD_VAR 0 1
11114: PUSH
11115: LD_INT 23
11117: PUSH
11118: LD_INT 20
11120: PUSH
11121: LD_INT 22
11123: PUSH
11124: LD_INT 17
11126: PUSH
11127: LD_INT 24
11129: PUSH
11130: LD_INT 21
11132: PUSH
11133: LD_INT 19
11135: PUSH
11136: LD_INT 16
11138: PUSH
11139: LD_INT 25
11141: PUSH
11142: LD_INT 18
11144: PUSH
11145: EMPTY
11146: LIST
11147: LIST
11148: LIST
11149: LIST
11150: LIST
11151: LIST
11152: LIST
11153: LIST
11154: LIST
11155: LIST
11156: IN
11157: ST_TO_ADDR
// end ;
11158: LD_VAR 0 2
11162: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
11163: LD_INT 0
11165: PPUSH
11166: PPUSH
11167: PPUSH
// result := [ ] ;
11168: LD_ADDR_VAR 0 4
11172: PUSH
11173: EMPTY
11174: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
11175: LD_ADDR_VAR 0 5
11179: PUSH
11180: LD_VAR 0 2
11184: PPUSH
11185: LD_INT 21
11187: PUSH
11188: LD_INT 3
11190: PUSH
11191: EMPTY
11192: LIST
11193: LIST
11194: PPUSH
11195: CALL_OW 70
11199: ST_TO_ADDR
// if not tmp then
11200: LD_VAR 0 5
11204: NOT
11205: IFFALSE 11209
// exit ;
11207: GO 11273
// if checkLink then
11209: LD_VAR 0 3
11213: IFFALSE 11263
// begin for i in tmp do
11215: LD_ADDR_VAR 0 6
11219: PUSH
11220: LD_VAR 0 5
11224: PUSH
11225: FOR_IN
11226: IFFALSE 11261
// if GetBase ( i ) <> base then
11228: LD_VAR 0 6
11232: PPUSH
11233: CALL_OW 274
11237: PUSH
11238: LD_VAR 0 1
11242: NONEQUAL
11243: IFFALSE 11259
// ComLinkToBase ( base , i ) ;
11245: LD_VAR 0 1
11249: PPUSH
11250: LD_VAR 0 6
11254: PPUSH
11255: CALL_OW 169
11259: GO 11225
11261: POP
11262: POP
// end ; result := tmp ;
11263: LD_ADDR_VAR 0 4
11267: PUSH
11268: LD_VAR 0 5
11272: ST_TO_ADDR
// end ;
11273: LD_VAR 0 4
11277: RET
// export function ComComplete ( units , b ) ; var i ; begin
11278: LD_INT 0
11280: PPUSH
11281: PPUSH
// if not units then
11282: LD_VAR 0 1
11286: NOT
11287: IFFALSE 11291
// exit ;
11289: GO 11381
// for i in units do
11291: LD_ADDR_VAR 0 4
11295: PUSH
11296: LD_VAR 0 1
11300: PUSH
11301: FOR_IN
11302: IFFALSE 11379
// if BuildingStatus ( b ) = bs_build then
11304: LD_VAR 0 2
11308: PPUSH
11309: CALL_OW 461
11313: PUSH
11314: LD_INT 1
11316: EQUAL
11317: IFFALSE 11377
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
11319: LD_VAR 0 4
11323: PPUSH
11324: LD_STRING h
11326: PUSH
11327: LD_VAR 0 2
11331: PPUSH
11332: CALL_OW 250
11336: PUSH
11337: LD_VAR 0 2
11341: PPUSH
11342: CALL_OW 251
11346: PUSH
11347: LD_VAR 0 2
11351: PUSH
11352: LD_INT 0
11354: PUSH
11355: LD_INT 0
11357: PUSH
11358: LD_INT 0
11360: PUSH
11361: EMPTY
11362: LIST
11363: LIST
11364: LIST
11365: LIST
11366: LIST
11367: LIST
11368: LIST
11369: PUSH
11370: EMPTY
11371: LIST
11372: PPUSH
11373: CALL_OW 446
11377: GO 11301
11379: POP
11380: POP
// end ;
11381: LD_VAR 0 3
11385: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
11386: LD_INT 0
11388: PPUSH
11389: PPUSH
11390: PPUSH
11391: PPUSH
11392: PPUSH
11393: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
11394: LD_VAR 0 1
11398: NOT
11399: IFTRUE 11416
11401: PUSH
11402: LD_VAR 0 1
11406: PPUSH
11407: CALL_OW 263
11411: PUSH
11412: LD_INT 2
11414: NONEQUAL
11415: OR
11416: IFFALSE 11420
// exit ;
11418: GO 11736
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
11420: LD_ADDR_VAR 0 6
11424: PUSH
11425: LD_INT 22
11427: PUSH
11428: LD_VAR 0 1
11432: PPUSH
11433: CALL_OW 255
11437: PUSH
11438: EMPTY
11439: LIST
11440: LIST
11441: PUSH
11442: LD_INT 2
11444: PUSH
11445: LD_INT 30
11447: PUSH
11448: LD_INT 36
11450: PUSH
11451: EMPTY
11452: LIST
11453: LIST
11454: PUSH
11455: LD_INT 34
11457: PUSH
11458: LD_INT 31
11460: PUSH
11461: EMPTY
11462: LIST
11463: LIST
11464: PUSH
11465: EMPTY
11466: LIST
11467: LIST
11468: LIST
11469: PUSH
11470: EMPTY
11471: LIST
11472: LIST
11473: PPUSH
11474: CALL_OW 69
11478: ST_TO_ADDR
// if not tmp then
11479: LD_VAR 0 6
11483: NOT
11484: IFFALSE 11488
// exit ;
11486: GO 11736
// result := [ ] ;
11488: LD_ADDR_VAR 0 2
11492: PUSH
11493: EMPTY
11494: ST_TO_ADDR
// for i in tmp do
11495: LD_ADDR_VAR 0 3
11499: PUSH
11500: LD_VAR 0 6
11504: PUSH
11505: FOR_IN
11506: IFFALSE 11577
// begin t := UnitsInside ( i ) ;
11508: LD_ADDR_VAR 0 4
11512: PUSH
11513: LD_VAR 0 3
11517: PPUSH
11518: CALL_OW 313
11522: ST_TO_ADDR
// if t then
11523: LD_VAR 0 4
11527: IFFALSE 11575
// for j in t do
11529: LD_ADDR_VAR 0 7
11533: PUSH
11534: LD_VAR 0 4
11538: PUSH
11539: FOR_IN
11540: IFFALSE 11573
// result := Replace ( result , result + 1 , j ) ;
11542: LD_ADDR_VAR 0 2
11546: PUSH
11547: LD_VAR 0 2
11551: PPUSH
11552: LD_VAR 0 2
11556: PUSH
11557: LD_INT 1
11559: PLUS
11560: PPUSH
11561: LD_VAR 0 7
11565: PPUSH
11566: CALL_OW 1
11570: ST_TO_ADDR
11571: GO 11539
11573: POP
11574: POP
// end ;
11575: GO 11505
11577: POP
11578: POP
// if not result then
11579: LD_VAR 0 2
11583: NOT
11584: IFFALSE 11588
// exit ;
11586: GO 11736
// mech := result [ 1 ] ;
11588: LD_ADDR_VAR 0 5
11592: PUSH
11593: LD_VAR 0 2
11597: PUSH
11598: LD_INT 1
11600: ARRAY
11601: ST_TO_ADDR
// if result > 1 then
11602: LD_VAR 0 2
11606: PUSH
11607: LD_INT 1
11609: GREATER
11610: IFFALSE 11722
// begin for i = 2 to result do
11612: LD_ADDR_VAR 0 3
11616: PUSH
11617: DOUBLE
11618: LD_INT 2
11620: DEC
11621: ST_TO_ADDR
11622: LD_VAR 0 2
11626: PUSH
11627: FOR_TO
11628: IFFALSE 11720
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
11630: LD_ADDR_VAR 0 4
11634: PUSH
11635: LD_VAR 0 2
11639: PUSH
11640: LD_VAR 0 3
11644: ARRAY
11645: PPUSH
11646: LD_INT 3
11648: PPUSH
11649: CALL_OW 259
11653: PUSH
11654: LD_VAR 0 2
11658: PUSH
11659: LD_VAR 0 3
11663: ARRAY
11664: PPUSH
11665: CALL_OW 432
11669: MINUS
11670: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
11671: LD_VAR 0 4
11675: PUSH
11676: LD_VAR 0 5
11680: PPUSH
11681: LD_INT 3
11683: PPUSH
11684: CALL_OW 259
11688: PUSH
11689: LD_VAR 0 5
11693: PPUSH
11694: CALL_OW 432
11698: MINUS
11699: GREATEREQUAL
11700: IFFALSE 11718
// mech := result [ i ] ;
11702: LD_ADDR_VAR 0 5
11706: PUSH
11707: LD_VAR 0 2
11711: PUSH
11712: LD_VAR 0 3
11716: ARRAY
11717: ST_TO_ADDR
// end ;
11718: GO 11627
11720: POP
11721: POP
// end ; ComLinkTo ( vehicle , mech ) ;
11722: LD_VAR 0 1
11726: PPUSH
11727: LD_VAR 0 5
11731: PPUSH
11732: CALL_OW 135
// end ;
11736: LD_VAR 0 2
11740: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
11741: LD_INT 0
11743: PPUSH
11744: PPUSH
11745: PPUSH
11746: PPUSH
11747: PPUSH
11748: PPUSH
11749: PPUSH
11750: PPUSH
11751: PPUSH
11752: PPUSH
11753: PPUSH
11754: PPUSH
11755: PPUSH
// result := [ ] ;
11756: LD_ADDR_VAR 0 7
11760: PUSH
11761: EMPTY
11762: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
11763: LD_VAR 0 1
11767: PPUSH
11768: CALL_OW 266
11772: PUSH
11773: LD_INT 0
11775: PUSH
11776: LD_INT 1
11778: PUSH
11779: EMPTY
11780: LIST
11781: LIST
11782: IN
11783: NOT
11784: IFFALSE 11788
// exit ;
11786: GO 13428
// if name then
11788: LD_VAR 0 3
11792: IFFALSE 11808
// SetBName ( base_dep , name ) ;
11794: LD_VAR 0 1
11798: PPUSH
11799: LD_VAR 0 3
11803: PPUSH
11804: CALL_OW 500
// base := GetBase ( base_dep ) ;
11808: LD_ADDR_VAR 0 15
11812: PUSH
11813: LD_VAR 0 1
11817: PPUSH
11818: CALL_OW 274
11822: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
11823: LD_ADDR_VAR 0 16
11827: PUSH
11828: LD_VAR 0 1
11832: PPUSH
11833: CALL_OW 255
11837: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
11838: LD_ADDR_VAR 0 17
11842: PUSH
11843: LD_VAR 0 1
11847: PPUSH
11848: CALL_OW 248
11852: ST_TO_ADDR
// if sources then
11853: LD_VAR 0 5
11857: IFFALSE 11904
// for i = 1 to 3 do
11859: LD_ADDR_VAR 0 8
11863: PUSH
11864: DOUBLE
11865: LD_INT 1
11867: DEC
11868: ST_TO_ADDR
11869: LD_INT 3
11871: PUSH
11872: FOR_TO
11873: IFFALSE 11902
// AddResourceType ( base , i , sources [ i ] ) ;
11875: LD_VAR 0 15
11879: PPUSH
11880: LD_VAR 0 8
11884: PPUSH
11885: LD_VAR 0 5
11889: PUSH
11890: LD_VAR 0 8
11894: ARRAY
11895: PPUSH
11896: CALL_OW 276
11900: GO 11872
11902: POP
11903: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
11904: LD_ADDR_VAR 0 18
11908: PUSH
11909: LD_VAR 0 15
11913: PPUSH
11914: LD_VAR 0 2
11918: PPUSH
11919: LD_INT 1
11921: PPUSH
11922: CALL 11163 0 3
11926: ST_TO_ADDR
// InitHc ;
11927: CALL_OW 19
// InitUc ;
11931: CALL_OW 18
// uc_side := side ;
11935: LD_ADDR_OWVAR 20
11939: PUSH
11940: LD_VAR 0 16
11944: ST_TO_ADDR
// uc_nation := nation ;
11945: LD_ADDR_OWVAR 21
11949: PUSH
11950: LD_VAR 0 17
11954: ST_TO_ADDR
// if buildings then
11955: LD_VAR 0 18
11959: IFFALSE 13287
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
11961: LD_ADDR_VAR 0 19
11965: PUSH
11966: LD_VAR 0 18
11970: PPUSH
11971: LD_INT 2
11973: PUSH
11974: LD_INT 30
11976: PUSH
11977: LD_INT 29
11979: PUSH
11980: EMPTY
11981: LIST
11982: LIST
11983: PUSH
11984: LD_INT 30
11986: PUSH
11987: LD_INT 30
11989: PUSH
11990: EMPTY
11991: LIST
11992: LIST
11993: PUSH
11994: EMPTY
11995: LIST
11996: LIST
11997: LIST
11998: PPUSH
11999: CALL_OW 72
12003: ST_TO_ADDR
// if tmp then
12004: LD_VAR 0 19
12008: IFFALSE 12056
// for i in tmp do
12010: LD_ADDR_VAR 0 8
12014: PUSH
12015: LD_VAR 0 19
12019: PUSH
12020: FOR_IN
12021: IFFALSE 12054
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
12023: LD_VAR 0 8
12027: PPUSH
12028: CALL_OW 250
12032: PPUSH
12033: LD_VAR 0 8
12037: PPUSH
12038: CALL_OW 251
12042: PPUSH
12043: LD_VAR 0 16
12047: PPUSH
12048: CALL_OW 441
12052: GO 12020
12054: POP
12055: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
12056: LD_VAR 0 18
12060: PPUSH
12061: LD_INT 2
12063: PUSH
12064: LD_INT 30
12066: PUSH
12067: LD_INT 32
12069: PUSH
12070: EMPTY
12071: LIST
12072: LIST
12073: PUSH
12074: LD_INT 30
12076: PUSH
12077: LD_INT 33
12079: PUSH
12080: EMPTY
12081: LIST
12082: LIST
12083: PUSH
12084: EMPTY
12085: LIST
12086: LIST
12087: LIST
12088: PPUSH
12089: CALL_OW 72
12093: IFFALSE 12181
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
12095: LD_ADDR_VAR 0 8
12099: PUSH
12100: LD_VAR 0 18
12104: PPUSH
12105: LD_INT 2
12107: PUSH
12108: LD_INT 30
12110: PUSH
12111: LD_INT 32
12113: PUSH
12114: EMPTY
12115: LIST
12116: LIST
12117: PUSH
12118: LD_INT 30
12120: PUSH
12121: LD_INT 33
12123: PUSH
12124: EMPTY
12125: LIST
12126: LIST
12127: PUSH
12128: EMPTY
12129: LIST
12130: LIST
12131: LIST
12132: PPUSH
12133: CALL_OW 72
12137: PUSH
12138: FOR_IN
12139: IFFALSE 12179
// begin if not GetBWeapon ( i ) then
12141: LD_VAR 0 8
12145: PPUSH
12146: CALL_OW 269
12150: NOT
12151: IFFALSE 12177
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
12153: LD_VAR 0 8
12157: PPUSH
12158: LD_VAR 0 8
12162: PPUSH
12163: LD_VAR 0 2
12167: PPUSH
12168: CALL 13433 0 2
12172: PPUSH
12173: CALL_OW 431
// end ;
12177: GO 12138
12179: POP
12180: POP
// end ; for i = 1 to personel do
12181: LD_ADDR_VAR 0 8
12185: PUSH
12186: DOUBLE
12187: LD_INT 1
12189: DEC
12190: ST_TO_ADDR
12191: LD_VAR 0 6
12195: PUSH
12196: FOR_TO
12197: IFFALSE 13267
// begin if i > 4 then
12199: LD_VAR 0 8
12203: PUSH
12204: LD_INT 4
12206: GREATER
12207: IFFALSE 12211
// break ;
12209: GO 13267
// case i of 1 :
12211: LD_VAR 0 8
12215: PUSH
12216: LD_INT 1
12218: DOUBLE
12219: EQUAL
12220: IFTRUE 12224
12222: GO 12304
12224: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
12225: LD_ADDR_VAR 0 12
12229: PUSH
12230: LD_VAR 0 18
12234: PPUSH
12235: LD_INT 22
12237: PUSH
12238: LD_VAR 0 16
12242: PUSH
12243: EMPTY
12244: LIST
12245: LIST
12246: PUSH
12247: LD_INT 58
12249: PUSH
12250: EMPTY
12251: LIST
12252: PUSH
12253: LD_INT 2
12255: PUSH
12256: LD_INT 30
12258: PUSH
12259: LD_INT 32
12261: PUSH
12262: EMPTY
12263: LIST
12264: LIST
12265: PUSH
12266: LD_INT 30
12268: PUSH
12269: LD_INT 4
12271: PUSH
12272: EMPTY
12273: LIST
12274: LIST
12275: PUSH
12276: LD_INT 30
12278: PUSH
12279: LD_INT 5
12281: PUSH
12282: EMPTY
12283: LIST
12284: LIST
12285: PUSH
12286: EMPTY
12287: LIST
12288: LIST
12289: LIST
12290: LIST
12291: PUSH
12292: EMPTY
12293: LIST
12294: LIST
12295: LIST
12296: PPUSH
12297: CALL_OW 72
12301: ST_TO_ADDR
12302: GO 12526
12304: LD_INT 2
12306: DOUBLE
12307: EQUAL
12308: IFTRUE 12312
12310: GO 12374
12312: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
12313: LD_ADDR_VAR 0 12
12317: PUSH
12318: LD_VAR 0 18
12322: PPUSH
12323: LD_INT 22
12325: PUSH
12326: LD_VAR 0 16
12330: PUSH
12331: EMPTY
12332: LIST
12333: LIST
12334: PUSH
12335: LD_INT 2
12337: PUSH
12338: LD_INT 30
12340: PUSH
12341: LD_INT 0
12343: PUSH
12344: EMPTY
12345: LIST
12346: LIST
12347: PUSH
12348: LD_INT 30
12350: PUSH
12351: LD_INT 1
12353: PUSH
12354: EMPTY
12355: LIST
12356: LIST
12357: PUSH
12358: EMPTY
12359: LIST
12360: LIST
12361: LIST
12362: PUSH
12363: EMPTY
12364: LIST
12365: LIST
12366: PPUSH
12367: CALL_OW 72
12371: ST_TO_ADDR
12372: GO 12526
12374: LD_INT 3
12376: DOUBLE
12377: EQUAL
12378: IFTRUE 12382
12380: GO 12444
12382: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
12383: LD_ADDR_VAR 0 12
12387: PUSH
12388: LD_VAR 0 18
12392: PPUSH
12393: LD_INT 22
12395: PUSH
12396: LD_VAR 0 16
12400: PUSH
12401: EMPTY
12402: LIST
12403: LIST
12404: PUSH
12405: LD_INT 2
12407: PUSH
12408: LD_INT 30
12410: PUSH
12411: LD_INT 2
12413: PUSH
12414: EMPTY
12415: LIST
12416: LIST
12417: PUSH
12418: LD_INT 30
12420: PUSH
12421: LD_INT 3
12423: PUSH
12424: EMPTY
12425: LIST
12426: LIST
12427: PUSH
12428: EMPTY
12429: LIST
12430: LIST
12431: LIST
12432: PUSH
12433: EMPTY
12434: LIST
12435: LIST
12436: PPUSH
12437: CALL_OW 72
12441: ST_TO_ADDR
12442: GO 12526
12444: LD_INT 4
12446: DOUBLE
12447: EQUAL
12448: IFTRUE 12452
12450: GO 12525
12452: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
12453: LD_ADDR_VAR 0 12
12457: PUSH
12458: LD_VAR 0 18
12462: PPUSH
12463: LD_INT 22
12465: PUSH
12466: LD_VAR 0 16
12470: PUSH
12471: EMPTY
12472: LIST
12473: LIST
12474: PUSH
12475: LD_INT 2
12477: PUSH
12478: LD_INT 30
12480: PUSH
12481: LD_INT 6
12483: PUSH
12484: EMPTY
12485: LIST
12486: LIST
12487: PUSH
12488: LD_INT 30
12490: PUSH
12491: LD_INT 7
12493: PUSH
12494: EMPTY
12495: LIST
12496: LIST
12497: PUSH
12498: LD_INT 30
12500: PUSH
12501: LD_INT 8
12503: PUSH
12504: EMPTY
12505: LIST
12506: LIST
12507: PUSH
12508: EMPTY
12509: LIST
12510: LIST
12511: LIST
12512: LIST
12513: PUSH
12514: EMPTY
12515: LIST
12516: LIST
12517: PPUSH
12518: CALL_OW 72
12522: ST_TO_ADDR
12523: GO 12526
12525: POP
// if i = 1 then
12526: LD_VAR 0 8
12530: PUSH
12531: LD_INT 1
12533: EQUAL
12534: IFFALSE 12645
// begin tmp := [ ] ;
12536: LD_ADDR_VAR 0 19
12540: PUSH
12541: EMPTY
12542: ST_TO_ADDR
// for j in f do
12543: LD_ADDR_VAR 0 9
12547: PUSH
12548: LD_VAR 0 12
12552: PUSH
12553: FOR_IN
12554: IFFALSE 12627
// if GetBType ( j ) = b_bunker then
12556: LD_VAR 0 9
12560: PPUSH
12561: CALL_OW 266
12565: PUSH
12566: LD_INT 32
12568: EQUAL
12569: IFFALSE 12596
// tmp := Insert ( tmp , 1 , j ) else
12571: LD_ADDR_VAR 0 19
12575: PUSH
12576: LD_VAR 0 19
12580: PPUSH
12581: LD_INT 1
12583: PPUSH
12584: LD_VAR 0 9
12588: PPUSH
12589: CALL_OW 2
12593: ST_TO_ADDR
12594: GO 12625
// tmp := Insert ( tmp , tmp + 1 , j ) ;
12596: LD_ADDR_VAR 0 19
12600: PUSH
12601: LD_VAR 0 19
12605: PPUSH
12606: LD_VAR 0 19
12610: PUSH
12611: LD_INT 1
12613: PLUS
12614: PPUSH
12615: LD_VAR 0 9
12619: PPUSH
12620: CALL_OW 2
12624: ST_TO_ADDR
12625: GO 12553
12627: POP
12628: POP
// if tmp then
12629: LD_VAR 0 19
12633: IFFALSE 12645
// f := tmp ;
12635: LD_ADDR_VAR 0 12
12639: PUSH
12640: LD_VAR 0 19
12644: ST_TO_ADDR
// end ; x := personel [ i ] ;
12645: LD_ADDR_VAR 0 13
12649: PUSH
12650: LD_VAR 0 6
12654: PUSH
12655: LD_VAR 0 8
12659: ARRAY
12660: ST_TO_ADDR
// if x = - 1 then
12661: LD_VAR 0 13
12665: PUSH
12666: LD_INT 1
12668: NEG
12669: EQUAL
12670: IFFALSE 12881
// begin for j in f do
12672: LD_ADDR_VAR 0 9
12676: PUSH
12677: LD_VAR 0 12
12681: PUSH
12682: FOR_IN
12683: IFFALSE 12877
// repeat InitHc ;
12685: CALL_OW 19
// if GetBType ( j ) = b_barracks then
12689: LD_VAR 0 9
12693: PPUSH
12694: CALL_OW 266
12698: PUSH
12699: LD_INT 5
12701: EQUAL
12702: IFFALSE 12772
// begin if UnitsInside ( j ) < 3 then
12704: LD_VAR 0 9
12708: PPUSH
12709: CALL_OW 313
12713: PUSH
12714: LD_INT 3
12716: LESS
12717: IFFALSE 12753
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12719: LD_INT 0
12721: PPUSH
12722: LD_INT 5
12724: PUSH
12725: LD_INT 8
12727: PUSH
12728: LD_INT 9
12730: PUSH
12731: EMPTY
12732: LIST
12733: LIST
12734: LIST
12735: PUSH
12736: LD_VAR 0 17
12740: ARRAY
12741: PPUSH
12742: LD_VAR 0 4
12746: PPUSH
12747: CALL_OW 380
12751: GO 12770
// PrepareHuman ( false , i , skill ) ;
12753: LD_INT 0
12755: PPUSH
12756: LD_VAR 0 8
12760: PPUSH
12761: LD_VAR 0 4
12765: PPUSH
12766: CALL_OW 380
// end else
12770: GO 12789
// PrepareHuman ( false , i , skill ) ;
12772: LD_INT 0
12774: PPUSH
12775: LD_VAR 0 8
12779: PPUSH
12780: LD_VAR 0 4
12784: PPUSH
12785: CALL_OW 380
// un := CreateHuman ;
12789: LD_ADDR_VAR 0 14
12793: PUSH
12794: CALL_OW 44
12798: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12799: LD_ADDR_VAR 0 7
12803: PUSH
12804: LD_VAR 0 7
12808: PPUSH
12809: LD_INT 1
12811: PPUSH
12812: LD_VAR 0 14
12816: PPUSH
12817: CALL_OW 2
12821: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
12822: LD_VAR 0 14
12826: PPUSH
12827: LD_VAR 0 9
12831: PPUSH
12832: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
12836: LD_VAR 0 9
12840: PPUSH
12841: CALL_OW 313
12845: PUSH
12846: LD_INT 6
12848: EQUAL
12849: IFTRUE 12873
12851: PUSH
12852: LD_VAR 0 9
12856: PPUSH
12857: CALL_OW 266
12861: PUSH
12862: LD_INT 32
12864: PUSH
12865: LD_INT 31
12867: PUSH
12868: EMPTY
12869: LIST
12870: LIST
12871: IN
12872: OR
12873: IFFALSE 12685
12875: GO 12682
12877: POP
12878: POP
// end else
12879: GO 13265
// for j = 1 to x do
12881: LD_ADDR_VAR 0 9
12885: PUSH
12886: DOUBLE
12887: LD_INT 1
12889: DEC
12890: ST_TO_ADDR
12891: LD_VAR 0 13
12895: PUSH
12896: FOR_TO
12897: IFFALSE 13263
// begin InitHc ;
12899: CALL_OW 19
// if not f then
12903: LD_VAR 0 12
12907: NOT
12908: IFFALSE 12997
// begin PrepareHuman ( false , i , skill ) ;
12910: LD_INT 0
12912: PPUSH
12913: LD_VAR 0 8
12917: PPUSH
12918: LD_VAR 0 4
12922: PPUSH
12923: CALL_OW 380
// un := CreateHuman ;
12927: LD_ADDR_VAR 0 14
12931: PUSH
12932: CALL_OW 44
12936: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12937: LD_ADDR_VAR 0 7
12941: PUSH
12942: LD_VAR 0 7
12946: PPUSH
12947: LD_INT 1
12949: PPUSH
12950: LD_VAR 0 14
12954: PPUSH
12955: CALL_OW 2
12959: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
12960: LD_VAR 0 14
12964: PPUSH
12965: LD_VAR 0 1
12969: PPUSH
12970: CALL_OW 250
12974: PPUSH
12975: LD_VAR 0 1
12979: PPUSH
12980: CALL_OW 251
12984: PPUSH
12985: LD_INT 10
12987: PPUSH
12988: LD_INT 0
12990: PPUSH
12991: CALL_OW 50
// continue ;
12995: GO 12896
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
12997: LD_VAR 0 12
13001: PUSH
13002: LD_INT 1
13004: ARRAY
13005: PPUSH
13006: CALL_OW 313
13010: IFFALSE 13038
13012: PUSH
13013: LD_VAR 0 12
13017: PUSH
13018: LD_INT 1
13020: ARRAY
13021: PPUSH
13022: CALL_OW 266
13026: PUSH
13027: LD_INT 32
13029: PUSH
13030: LD_INT 31
13032: PUSH
13033: EMPTY
13034: LIST
13035: LIST
13036: IN
13037: AND
13038: IFTRUE 13059
13040: PUSH
13041: LD_VAR 0 12
13045: PUSH
13046: LD_INT 1
13048: ARRAY
13049: PPUSH
13050: CALL_OW 313
13054: PUSH
13055: LD_INT 6
13057: EQUAL
13058: OR
13059: IFFALSE 13079
// f := Delete ( f , 1 ) ;
13061: LD_ADDR_VAR 0 12
13065: PUSH
13066: LD_VAR 0 12
13070: PPUSH
13071: LD_INT 1
13073: PPUSH
13074: CALL_OW 3
13078: ST_TO_ADDR
// if not f then
13079: LD_VAR 0 12
13083: NOT
13084: IFFALSE 13102
// begin x := x + 2 ;
13086: LD_ADDR_VAR 0 13
13090: PUSH
13091: LD_VAR 0 13
13095: PUSH
13096: LD_INT 2
13098: PLUS
13099: ST_TO_ADDR
// continue ;
13100: GO 12896
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
13102: LD_VAR 0 12
13106: PUSH
13107: LD_INT 1
13109: ARRAY
13110: PPUSH
13111: CALL_OW 266
13115: PUSH
13116: LD_INT 5
13118: EQUAL
13119: IFFALSE 13193
// begin if UnitsInside ( f [ 1 ] ) < 3 then
13121: LD_VAR 0 12
13125: PUSH
13126: LD_INT 1
13128: ARRAY
13129: PPUSH
13130: CALL_OW 313
13134: PUSH
13135: LD_INT 3
13137: LESS
13138: IFFALSE 13174
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
13140: LD_INT 0
13142: PPUSH
13143: LD_INT 5
13145: PUSH
13146: LD_INT 8
13148: PUSH
13149: LD_INT 9
13151: PUSH
13152: EMPTY
13153: LIST
13154: LIST
13155: LIST
13156: PUSH
13157: LD_VAR 0 17
13161: ARRAY
13162: PPUSH
13163: LD_VAR 0 4
13167: PPUSH
13168: CALL_OW 380
13172: GO 13191
// PrepareHuman ( false , i , skill ) ;
13174: LD_INT 0
13176: PPUSH
13177: LD_VAR 0 8
13181: PPUSH
13182: LD_VAR 0 4
13186: PPUSH
13187: CALL_OW 380
// end else
13191: GO 13210
// PrepareHuman ( false , i , skill ) ;
13193: LD_INT 0
13195: PPUSH
13196: LD_VAR 0 8
13200: PPUSH
13201: LD_VAR 0 4
13205: PPUSH
13206: CALL_OW 380
// un := CreateHuman ;
13210: LD_ADDR_VAR 0 14
13214: PUSH
13215: CALL_OW 44
13219: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13220: LD_ADDR_VAR 0 7
13224: PUSH
13225: LD_VAR 0 7
13229: PPUSH
13230: LD_INT 1
13232: PPUSH
13233: LD_VAR 0 14
13237: PPUSH
13238: CALL_OW 2
13242: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
13243: LD_VAR 0 14
13247: PPUSH
13248: LD_VAR 0 12
13252: PUSH
13253: LD_INT 1
13255: ARRAY
13256: PPUSH
13257: CALL_OW 52
// end ;
13261: GO 12896
13263: POP
13264: POP
// end ;
13265: GO 12196
13267: POP
13268: POP
// result := result ^ buildings ;
13269: LD_ADDR_VAR 0 7
13273: PUSH
13274: LD_VAR 0 7
13278: PUSH
13279: LD_VAR 0 18
13283: ADD
13284: ST_TO_ADDR
// end else
13285: GO 13428
// begin for i = 1 to personel do
13287: LD_ADDR_VAR 0 8
13291: PUSH
13292: DOUBLE
13293: LD_INT 1
13295: DEC
13296: ST_TO_ADDR
13297: LD_VAR 0 6
13301: PUSH
13302: FOR_TO
13303: IFFALSE 13426
// begin if i > 4 then
13305: LD_VAR 0 8
13309: PUSH
13310: LD_INT 4
13312: GREATER
13313: IFFALSE 13317
// break ;
13315: GO 13426
// x := personel [ i ] ;
13317: LD_ADDR_VAR 0 13
13321: PUSH
13322: LD_VAR 0 6
13326: PUSH
13327: LD_VAR 0 8
13331: ARRAY
13332: ST_TO_ADDR
// if x = - 1 then
13333: LD_VAR 0 13
13337: PUSH
13338: LD_INT 1
13340: NEG
13341: EQUAL
13342: IFFALSE 13346
// continue ;
13344: GO 13302
// PrepareHuman ( false , i , skill ) ;
13346: LD_INT 0
13348: PPUSH
13349: LD_VAR 0 8
13353: PPUSH
13354: LD_VAR 0 4
13358: PPUSH
13359: CALL_OW 380
// un := CreateHuman ;
13363: LD_ADDR_VAR 0 14
13367: PUSH
13368: CALL_OW 44
13372: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13373: LD_VAR 0 14
13377: PPUSH
13378: LD_VAR 0 1
13382: PPUSH
13383: CALL_OW 250
13387: PPUSH
13388: LD_VAR 0 1
13392: PPUSH
13393: CALL_OW 251
13397: PPUSH
13398: LD_INT 10
13400: PPUSH
13401: LD_INT 0
13403: PPUSH
13404: CALL_OW 50
// result := result ^ un ;
13408: LD_ADDR_VAR 0 7
13412: PUSH
13413: LD_VAR 0 7
13417: PUSH
13418: LD_VAR 0 14
13422: ADD
13423: ST_TO_ADDR
// end ;
13424: GO 13302
13426: POP
13427: POP
// end ; end ;
13428: LD_VAR 0 7
13432: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
13433: LD_INT 0
13435: PPUSH
13436: PPUSH
13437: PPUSH
13438: PPUSH
13439: PPUSH
13440: PPUSH
13441: PPUSH
13442: PPUSH
13443: PPUSH
13444: PPUSH
13445: PPUSH
13446: PPUSH
13447: PPUSH
13448: PPUSH
13449: PPUSH
13450: PPUSH
// result := false ;
13451: LD_ADDR_VAR 0 3
13455: PUSH
13456: LD_INT 0
13458: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
13459: LD_VAR 0 1
13463: NOT
13464: IFTRUE 13489
13466: PUSH
13467: LD_VAR 0 1
13471: PPUSH
13472: CALL_OW 266
13476: PUSH
13477: LD_INT 32
13479: PUSH
13480: LD_INT 33
13482: PUSH
13483: EMPTY
13484: LIST
13485: LIST
13486: IN
13487: NOT
13488: OR
13489: IFFALSE 13493
// exit ;
13491: GO 14628
// nat := GetNation ( tower ) ;
13493: LD_ADDR_VAR 0 12
13497: PUSH
13498: LD_VAR 0 1
13502: PPUSH
13503: CALL_OW 248
13507: ST_TO_ADDR
// side := GetSide ( tower ) ;
13508: LD_ADDR_VAR 0 16
13512: PUSH
13513: LD_VAR 0 1
13517: PPUSH
13518: CALL_OW 255
13522: ST_TO_ADDR
// x := GetX ( tower ) ;
13523: LD_ADDR_VAR 0 10
13527: PUSH
13528: LD_VAR 0 1
13532: PPUSH
13533: CALL_OW 250
13537: ST_TO_ADDR
// y := GetY ( tower ) ;
13538: LD_ADDR_VAR 0 11
13542: PUSH
13543: LD_VAR 0 1
13547: PPUSH
13548: CALL_OW 251
13552: ST_TO_ADDR
// if not x or not y then
13553: LD_VAR 0 10
13557: NOT
13558: IFTRUE 13567
13560: PUSH
13561: LD_VAR 0 11
13565: NOT
13566: OR
13567: IFFALSE 13571
// exit ;
13569: GO 14628
// weapon := 0 ;
13571: LD_ADDR_VAR 0 18
13575: PUSH
13576: LD_INT 0
13578: ST_TO_ADDR
// fac_list := [ ] ;
13579: LD_ADDR_VAR 0 17
13583: PUSH
13584: EMPTY
13585: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
13586: LD_ADDR_VAR 0 6
13590: PUSH
13591: LD_VAR 0 1
13595: PPUSH
13596: CALL_OW 274
13600: PPUSH
13601: LD_VAR 0 2
13605: PPUSH
13606: LD_INT 0
13608: PPUSH
13609: CALL 11163 0 3
13613: PPUSH
13614: LD_INT 30
13616: PUSH
13617: LD_INT 3
13619: PUSH
13620: EMPTY
13621: LIST
13622: LIST
13623: PPUSH
13624: CALL_OW 72
13628: ST_TO_ADDR
// if not factories then
13629: LD_VAR 0 6
13633: NOT
13634: IFFALSE 13638
// exit ;
13636: GO 14628
// for i in factories do
13638: LD_ADDR_VAR 0 8
13642: PUSH
13643: LD_VAR 0 6
13647: PUSH
13648: FOR_IN
13649: IFFALSE 13674
// fac_list := fac_list union AvailableWeaponList ( i ) ;
13651: LD_ADDR_VAR 0 17
13655: PUSH
13656: LD_VAR 0 17
13660: PUSH
13661: LD_VAR 0 8
13665: PPUSH
13666: CALL_OW 478
13670: UNION
13671: ST_TO_ADDR
13672: GO 13648
13674: POP
13675: POP
// if not fac_list then
13676: LD_VAR 0 17
13680: NOT
13681: IFFALSE 13685
// exit ;
13683: GO 14628
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
13685: LD_ADDR_VAR 0 5
13689: PUSH
13690: LD_INT 4
13692: PUSH
13693: LD_INT 5
13695: PUSH
13696: LD_INT 9
13698: PUSH
13699: LD_INT 10
13701: PUSH
13702: LD_INT 6
13704: PUSH
13705: LD_INT 7
13707: PUSH
13708: LD_INT 11
13710: PUSH
13711: EMPTY
13712: LIST
13713: LIST
13714: LIST
13715: LIST
13716: LIST
13717: LIST
13718: LIST
13719: PUSH
13720: LD_INT 27
13722: PUSH
13723: LD_INT 28
13725: PUSH
13726: LD_INT 26
13728: PUSH
13729: LD_INT 30
13731: PUSH
13732: EMPTY
13733: LIST
13734: LIST
13735: LIST
13736: LIST
13737: PUSH
13738: LD_INT 43
13740: PUSH
13741: LD_INT 44
13743: PUSH
13744: LD_INT 46
13746: PUSH
13747: LD_INT 45
13749: PUSH
13750: LD_INT 47
13752: PUSH
13753: LD_INT 49
13755: PUSH
13756: EMPTY
13757: LIST
13758: LIST
13759: LIST
13760: LIST
13761: LIST
13762: LIST
13763: PUSH
13764: EMPTY
13765: LIST
13766: LIST
13767: LIST
13768: PUSH
13769: LD_VAR 0 12
13773: ARRAY
13774: ST_TO_ADDR
// list := list isect fac_list ;
13775: LD_ADDR_VAR 0 5
13779: PUSH
13780: LD_VAR 0 5
13784: PUSH
13785: LD_VAR 0 17
13789: ISECT
13790: ST_TO_ADDR
// if not list then
13791: LD_VAR 0 5
13795: NOT
13796: IFFALSE 13800
// exit ;
13798: GO 14628
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
13800: LD_VAR 0 12
13804: PUSH
13805: LD_INT 3
13807: EQUAL
13808: IFFALSE 13820
13810: PUSH
13811: LD_INT 49
13813: PUSH
13814: LD_VAR 0 5
13818: IN
13819: AND
13820: IFFALSE 13840
13822: PUSH
13823: LD_INT 31
13825: PPUSH
13826: LD_VAR 0 16
13830: PPUSH
13831: CALL_OW 321
13835: PUSH
13836: LD_INT 2
13838: EQUAL
13839: AND
13840: IFFALSE 13900
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
13842: LD_INT 22
13844: PUSH
13845: LD_VAR 0 16
13849: PUSH
13850: EMPTY
13851: LIST
13852: LIST
13853: PUSH
13854: LD_INT 35
13856: PUSH
13857: LD_INT 49
13859: PUSH
13860: EMPTY
13861: LIST
13862: LIST
13863: PUSH
13864: LD_INT 91
13866: PUSH
13867: LD_VAR 0 1
13871: PUSH
13872: LD_INT 10
13874: PUSH
13875: EMPTY
13876: LIST
13877: LIST
13878: LIST
13879: PUSH
13880: EMPTY
13881: LIST
13882: LIST
13883: LIST
13884: PPUSH
13885: CALL_OW 69
13889: NOT
13890: IFFALSE 13900
// weapon := ru_time_lapser ;
13892: LD_ADDR_VAR 0 18
13896: PUSH
13897: LD_INT 49
13899: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
13900: LD_VAR 0 12
13904: PUSH
13905: LD_INT 1
13907: PUSH
13908: LD_INT 2
13910: PUSH
13911: EMPTY
13912: LIST
13913: LIST
13914: IN
13915: IFFALSE 13939
13917: PUSH
13918: LD_INT 11
13920: PUSH
13921: LD_VAR 0 5
13925: IN
13926: IFTRUE 13938
13928: PUSH
13929: LD_INT 30
13931: PUSH
13932: LD_VAR 0 5
13936: IN
13937: OR
13938: AND
13939: IFFALSE 13959
13941: PUSH
13942: LD_INT 6
13944: PPUSH
13945: LD_VAR 0 16
13949: PPUSH
13950: CALL_OW 321
13954: PUSH
13955: LD_INT 2
13957: EQUAL
13958: AND
13959: IFFALSE 14126
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
13961: LD_INT 22
13963: PUSH
13964: LD_VAR 0 16
13968: PUSH
13969: EMPTY
13970: LIST
13971: LIST
13972: PUSH
13973: LD_INT 2
13975: PUSH
13976: LD_INT 35
13978: PUSH
13979: LD_INT 11
13981: PUSH
13982: EMPTY
13983: LIST
13984: LIST
13985: PUSH
13986: LD_INT 35
13988: PUSH
13989: LD_INT 30
13991: PUSH
13992: EMPTY
13993: LIST
13994: LIST
13995: PUSH
13996: EMPTY
13997: LIST
13998: LIST
13999: LIST
14000: PUSH
14001: LD_INT 91
14003: PUSH
14004: LD_VAR 0 1
14008: PUSH
14009: LD_INT 18
14011: PUSH
14012: EMPTY
14013: LIST
14014: LIST
14015: LIST
14016: PUSH
14017: EMPTY
14018: LIST
14019: LIST
14020: LIST
14021: PPUSH
14022: CALL_OW 69
14026: NOT
14027: IFFALSE 14103
14029: PUSH
14030: LD_INT 22
14032: PUSH
14033: LD_VAR 0 16
14037: PUSH
14038: EMPTY
14039: LIST
14040: LIST
14041: PUSH
14042: LD_INT 2
14044: PUSH
14045: LD_INT 30
14047: PUSH
14048: LD_INT 32
14050: PUSH
14051: EMPTY
14052: LIST
14053: LIST
14054: PUSH
14055: LD_INT 30
14057: PUSH
14058: LD_INT 33
14060: PUSH
14061: EMPTY
14062: LIST
14063: LIST
14064: PUSH
14065: EMPTY
14066: LIST
14067: LIST
14068: LIST
14069: PUSH
14070: LD_INT 91
14072: PUSH
14073: LD_VAR 0 1
14077: PUSH
14078: LD_INT 12
14080: PUSH
14081: EMPTY
14082: LIST
14083: LIST
14084: LIST
14085: PUSH
14086: EMPTY
14087: LIST
14088: LIST
14089: LIST
14090: PUSH
14091: EMPTY
14092: LIST
14093: PPUSH
14094: CALL_OW 69
14098: PUSH
14099: LD_INT 2
14101: GREATER
14102: AND
14103: IFFALSE 14126
// weapon := [ us_radar , ar_radar ] [ nat ] ;
14105: LD_ADDR_VAR 0 18
14109: PUSH
14110: LD_INT 11
14112: PUSH
14113: LD_INT 30
14115: PUSH
14116: EMPTY
14117: LIST
14118: LIST
14119: PUSH
14120: LD_VAR 0 12
14124: ARRAY
14125: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
14126: LD_VAR 0 18
14130: NOT
14131: IFFALSE 14151
14133: PUSH
14134: LD_INT 40
14136: PPUSH
14137: LD_VAR 0 16
14141: PPUSH
14142: CALL_OW 321
14146: PUSH
14147: LD_INT 2
14149: EQUAL
14150: AND
14151: IFFALSE 14187
14153: PUSH
14154: LD_INT 7
14156: PUSH
14157: LD_VAR 0 5
14161: IN
14162: IFTRUE 14174
14164: PUSH
14165: LD_INT 28
14167: PUSH
14168: LD_VAR 0 5
14172: IN
14173: OR
14174: IFTRUE 14186
14176: PUSH
14177: LD_INT 45
14179: PUSH
14180: LD_VAR 0 5
14184: IN
14185: OR
14186: AND
14187: IFFALSE 14441
// begin hex := GetHexInfo ( x , y ) ;
14189: LD_ADDR_VAR 0 4
14193: PUSH
14194: LD_VAR 0 10
14198: PPUSH
14199: LD_VAR 0 11
14203: PPUSH
14204: CALL_OW 546
14208: ST_TO_ADDR
// if hex [ 1 ] then
14209: LD_VAR 0 4
14213: PUSH
14214: LD_INT 1
14216: ARRAY
14217: IFFALSE 14221
// exit ;
14219: GO 14628
// height := hex [ 2 ] ;
14221: LD_ADDR_VAR 0 15
14225: PUSH
14226: LD_VAR 0 4
14230: PUSH
14231: LD_INT 2
14233: ARRAY
14234: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
14235: LD_ADDR_VAR 0 14
14239: PUSH
14240: LD_INT 0
14242: PUSH
14243: LD_INT 2
14245: PUSH
14246: LD_INT 3
14248: PUSH
14249: LD_INT 5
14251: PUSH
14252: EMPTY
14253: LIST
14254: LIST
14255: LIST
14256: LIST
14257: ST_TO_ADDR
// for i in tmp do
14258: LD_ADDR_VAR 0 8
14262: PUSH
14263: LD_VAR 0 14
14267: PUSH
14268: FOR_IN
14269: IFFALSE 14439
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
14271: LD_ADDR_VAR 0 9
14275: PUSH
14276: LD_VAR 0 10
14280: PPUSH
14281: LD_VAR 0 8
14285: PPUSH
14286: LD_INT 5
14288: PPUSH
14289: CALL_OW 272
14293: PUSH
14294: LD_VAR 0 11
14298: PPUSH
14299: LD_VAR 0 8
14303: PPUSH
14304: LD_INT 5
14306: PPUSH
14307: CALL_OW 273
14311: PUSH
14312: EMPTY
14313: LIST
14314: LIST
14315: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
14316: LD_VAR 0 9
14320: PUSH
14321: LD_INT 1
14323: ARRAY
14324: PPUSH
14325: LD_VAR 0 9
14329: PUSH
14330: LD_INT 2
14332: ARRAY
14333: PPUSH
14334: CALL_OW 488
14338: IFFALSE 14437
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
14340: LD_ADDR_VAR 0 4
14344: PUSH
14345: LD_VAR 0 9
14349: PUSH
14350: LD_INT 1
14352: ARRAY
14353: PPUSH
14354: LD_VAR 0 9
14358: PUSH
14359: LD_INT 2
14361: ARRAY
14362: PPUSH
14363: CALL_OW 546
14367: ST_TO_ADDR
// if hex [ 1 ] then
14368: LD_VAR 0 4
14372: PUSH
14373: LD_INT 1
14375: ARRAY
14376: IFFALSE 14380
// continue ;
14378: GO 14268
// h := hex [ 2 ] ;
14380: LD_ADDR_VAR 0 13
14384: PUSH
14385: LD_VAR 0 4
14389: PUSH
14390: LD_INT 2
14392: ARRAY
14393: ST_TO_ADDR
// if h + 7 < height then
14394: LD_VAR 0 13
14398: PUSH
14399: LD_INT 7
14401: PLUS
14402: PUSH
14403: LD_VAR 0 15
14407: LESS
14408: IFFALSE 14437
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
14410: LD_ADDR_VAR 0 18
14414: PUSH
14415: LD_INT 7
14417: PUSH
14418: LD_INT 28
14420: PUSH
14421: LD_INT 45
14423: PUSH
14424: EMPTY
14425: LIST
14426: LIST
14427: LIST
14428: PUSH
14429: LD_VAR 0 12
14433: ARRAY
14434: ST_TO_ADDR
// break ;
14435: GO 14439
// end ; end ; end ;
14437: GO 14268
14439: POP
14440: POP
// end ; if not weapon then
14441: LD_VAR 0 18
14445: NOT
14446: IFFALSE 14506
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
14448: LD_ADDR_VAR 0 5
14452: PUSH
14453: LD_VAR 0 5
14457: PUSH
14458: LD_INT 11
14460: PUSH
14461: LD_INT 30
14463: PUSH
14464: LD_INT 49
14466: PUSH
14467: EMPTY
14468: LIST
14469: LIST
14470: LIST
14471: DIFF
14472: ST_TO_ADDR
// if not list then
14473: LD_VAR 0 5
14477: NOT
14478: IFFALSE 14482
// exit ;
14480: GO 14628
// weapon := list [ rand ( 1 , list ) ] ;
14482: LD_ADDR_VAR 0 18
14486: PUSH
14487: LD_VAR 0 5
14491: PUSH
14492: LD_INT 1
14494: PPUSH
14495: LD_VAR 0 5
14499: PPUSH
14500: CALL_OW 12
14504: ARRAY
14505: ST_TO_ADDR
// end ; if weapon then
14506: LD_VAR 0 18
14510: IFFALSE 14628
// begin tmp := CostOfWeapon ( weapon ) ;
14512: LD_ADDR_VAR 0 14
14516: PUSH
14517: LD_VAR 0 18
14521: PPUSH
14522: CALL_OW 451
14526: ST_TO_ADDR
// j := GetBase ( tower ) ;
14527: LD_ADDR_VAR 0 9
14531: PUSH
14532: LD_VAR 0 1
14536: PPUSH
14537: CALL_OW 274
14541: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
14542: LD_VAR 0 9
14546: PPUSH
14547: LD_INT 1
14549: PPUSH
14550: CALL_OW 275
14554: PUSH
14555: LD_VAR 0 14
14559: PUSH
14560: LD_INT 1
14562: ARRAY
14563: GREATEREQUAL
14564: IFFALSE 14590
14566: PUSH
14567: LD_VAR 0 9
14571: PPUSH
14572: LD_INT 2
14574: PPUSH
14575: CALL_OW 275
14579: PUSH
14580: LD_VAR 0 14
14584: PUSH
14585: LD_INT 2
14587: ARRAY
14588: GREATEREQUAL
14589: AND
14590: IFFALSE 14616
14592: PUSH
14593: LD_VAR 0 9
14597: PPUSH
14598: LD_INT 3
14600: PPUSH
14601: CALL_OW 275
14605: PUSH
14606: LD_VAR 0 14
14610: PUSH
14611: LD_INT 3
14613: ARRAY
14614: GREATEREQUAL
14615: AND
14616: IFFALSE 14628
// result := weapon ;
14618: LD_ADDR_VAR 0 3
14622: PUSH
14623: LD_VAR 0 18
14627: ST_TO_ADDR
// end ; end ;
14628: LD_VAR 0 3
14632: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
14633: LD_INT 0
14635: PPUSH
14636: PPUSH
// result := true ;
14637: LD_ADDR_VAR 0 3
14641: PUSH
14642: LD_INT 1
14644: ST_TO_ADDR
// if array1 = array2 then
14645: LD_VAR 0 1
14649: PUSH
14650: LD_VAR 0 2
14654: EQUAL
14655: IFFALSE 14715
// begin for i = 1 to array1 do
14657: LD_ADDR_VAR 0 4
14661: PUSH
14662: DOUBLE
14663: LD_INT 1
14665: DEC
14666: ST_TO_ADDR
14667: LD_VAR 0 1
14671: PUSH
14672: FOR_TO
14673: IFFALSE 14711
// if array1 [ i ] <> array2 [ i ] then
14675: LD_VAR 0 1
14679: PUSH
14680: LD_VAR 0 4
14684: ARRAY
14685: PUSH
14686: LD_VAR 0 2
14690: PUSH
14691: LD_VAR 0 4
14695: ARRAY
14696: NONEQUAL
14697: IFFALSE 14709
// begin result := false ;
14699: LD_ADDR_VAR 0 3
14703: PUSH
14704: LD_INT 0
14706: ST_TO_ADDR
// break ;
14707: GO 14711
// end ;
14709: GO 14672
14711: POP
14712: POP
// end else
14713: GO 14723
// result := false ;
14715: LD_ADDR_VAR 0 3
14719: PUSH
14720: LD_INT 0
14722: ST_TO_ADDR
// end ;
14723: LD_VAR 0 3
14727: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
14728: LD_INT 0
14730: PPUSH
14731: PPUSH
// if not array1 or not array2 then
14732: LD_VAR 0 1
14736: NOT
14737: IFTRUE 14746
14739: PUSH
14740: LD_VAR 0 2
14744: NOT
14745: OR
14746: IFFALSE 14750
// exit ;
14748: GO 14814
// result := true ;
14750: LD_ADDR_VAR 0 3
14754: PUSH
14755: LD_INT 1
14757: ST_TO_ADDR
// for i = 1 to array1 do
14758: LD_ADDR_VAR 0 4
14762: PUSH
14763: DOUBLE
14764: LD_INT 1
14766: DEC
14767: ST_TO_ADDR
14768: LD_VAR 0 1
14772: PUSH
14773: FOR_TO
14774: IFFALSE 14812
// if array1 [ i ] <> array2 [ i ] then
14776: LD_VAR 0 1
14780: PUSH
14781: LD_VAR 0 4
14785: ARRAY
14786: PUSH
14787: LD_VAR 0 2
14791: PUSH
14792: LD_VAR 0 4
14796: ARRAY
14797: NONEQUAL
14798: IFFALSE 14810
// begin result := false ;
14800: LD_ADDR_VAR 0 3
14804: PUSH
14805: LD_INT 0
14807: ST_TO_ADDR
// break ;
14808: GO 14812
// end ;
14810: GO 14773
14812: POP
14813: POP
// end ;
14814: LD_VAR 0 3
14818: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
14819: LD_INT 0
14821: PPUSH
14822: PPUSH
14823: PPUSH
// pom := GetBase ( fac ) ;
14824: LD_ADDR_VAR 0 5
14828: PUSH
14829: LD_VAR 0 1
14833: PPUSH
14834: CALL_OW 274
14838: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
14839: LD_ADDR_VAR 0 4
14843: PUSH
14844: LD_VAR 0 2
14848: PUSH
14849: LD_INT 1
14851: ARRAY
14852: PPUSH
14853: LD_VAR 0 2
14857: PUSH
14858: LD_INT 2
14860: ARRAY
14861: PPUSH
14862: LD_VAR 0 2
14866: PUSH
14867: LD_INT 3
14869: ARRAY
14870: PPUSH
14871: LD_VAR 0 2
14875: PUSH
14876: LD_INT 4
14878: ARRAY
14879: PPUSH
14880: CALL_OW 449
14884: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14885: LD_ADDR_VAR 0 3
14889: PUSH
14890: LD_VAR 0 5
14894: PPUSH
14895: LD_INT 1
14897: PPUSH
14898: CALL_OW 275
14902: PUSH
14903: LD_VAR 0 4
14907: PUSH
14908: LD_INT 1
14910: ARRAY
14911: GREATEREQUAL
14912: IFFALSE 14938
14914: PUSH
14915: LD_VAR 0 5
14919: PPUSH
14920: LD_INT 2
14922: PPUSH
14923: CALL_OW 275
14927: PUSH
14928: LD_VAR 0 4
14932: PUSH
14933: LD_INT 2
14935: ARRAY
14936: GREATEREQUAL
14937: AND
14938: IFFALSE 14964
14940: PUSH
14941: LD_VAR 0 5
14945: PPUSH
14946: LD_INT 3
14948: PPUSH
14949: CALL_OW 275
14953: PUSH
14954: LD_VAR 0 4
14958: PUSH
14959: LD_INT 3
14961: ARRAY
14962: GREATEREQUAL
14963: AND
14964: ST_TO_ADDR
// end ;
14965: LD_VAR 0 3
14969: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
14970: LD_INT 0
14972: PPUSH
14973: PPUSH
14974: PPUSH
14975: PPUSH
// pom := GetBase ( building ) ;
14976: LD_ADDR_VAR 0 3
14980: PUSH
14981: LD_VAR 0 1
14985: PPUSH
14986: CALL_OW 274
14990: ST_TO_ADDR
// if not pom then
14991: LD_VAR 0 3
14995: NOT
14996: IFFALSE 15000
// exit ;
14998: GO 15174
// btype := GetBType ( building ) ;
15000: LD_ADDR_VAR 0 5
15004: PUSH
15005: LD_VAR 0 1
15009: PPUSH
15010: CALL_OW 266
15014: ST_TO_ADDR
// if btype = b_armoury then
15015: LD_VAR 0 5
15019: PUSH
15020: LD_INT 4
15022: EQUAL
15023: IFFALSE 15033
// btype := b_barracks ;
15025: LD_ADDR_VAR 0 5
15029: PUSH
15030: LD_INT 5
15032: ST_TO_ADDR
// if btype = b_depot then
15033: LD_VAR 0 5
15037: PUSH
15038: LD_INT 0
15040: EQUAL
15041: IFFALSE 15051
// btype := b_warehouse ;
15043: LD_ADDR_VAR 0 5
15047: PUSH
15048: LD_INT 1
15050: ST_TO_ADDR
// if btype = b_workshop then
15051: LD_VAR 0 5
15055: PUSH
15056: LD_INT 2
15058: EQUAL
15059: IFFALSE 15069
// btype := b_factory ;
15061: LD_ADDR_VAR 0 5
15065: PUSH
15066: LD_INT 3
15068: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15069: LD_ADDR_VAR 0 4
15073: PUSH
15074: LD_VAR 0 5
15078: PPUSH
15079: LD_VAR 0 1
15083: PPUSH
15084: CALL_OW 248
15088: PPUSH
15089: CALL_OW 450
15093: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15094: LD_ADDR_VAR 0 2
15098: PUSH
15099: LD_VAR 0 3
15103: PPUSH
15104: LD_INT 1
15106: PPUSH
15107: CALL_OW 275
15111: PUSH
15112: LD_VAR 0 4
15116: PUSH
15117: LD_INT 1
15119: ARRAY
15120: GREATEREQUAL
15121: IFFALSE 15147
15123: PUSH
15124: LD_VAR 0 3
15128: PPUSH
15129: LD_INT 2
15131: PPUSH
15132: CALL_OW 275
15136: PUSH
15137: LD_VAR 0 4
15141: PUSH
15142: LD_INT 2
15144: ARRAY
15145: GREATEREQUAL
15146: AND
15147: IFFALSE 15173
15149: PUSH
15150: LD_VAR 0 3
15154: PPUSH
15155: LD_INT 3
15157: PPUSH
15158: CALL_OW 275
15162: PUSH
15163: LD_VAR 0 4
15167: PUSH
15168: LD_INT 3
15170: ARRAY
15171: GREATEREQUAL
15172: AND
15173: ST_TO_ADDR
// end ;
15174: LD_VAR 0 2
15178: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
15179: LD_INT 0
15181: PPUSH
15182: PPUSH
15183: PPUSH
// pom := GetBase ( building ) ;
15184: LD_ADDR_VAR 0 4
15188: PUSH
15189: LD_VAR 0 1
15193: PPUSH
15194: CALL_OW 274
15198: ST_TO_ADDR
// if not pom then
15199: LD_VAR 0 4
15203: NOT
15204: IFFALSE 15208
// exit ;
15206: GO 15313
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15208: LD_ADDR_VAR 0 5
15212: PUSH
15213: LD_VAR 0 2
15217: PPUSH
15218: LD_VAR 0 1
15222: PPUSH
15223: CALL_OW 248
15227: PPUSH
15228: CALL_OW 450
15232: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15233: LD_ADDR_VAR 0 3
15237: PUSH
15238: LD_VAR 0 4
15242: PPUSH
15243: LD_INT 1
15245: PPUSH
15246: CALL_OW 275
15250: PUSH
15251: LD_VAR 0 5
15255: PUSH
15256: LD_INT 1
15258: ARRAY
15259: GREATEREQUAL
15260: IFFALSE 15286
15262: PUSH
15263: LD_VAR 0 4
15267: PPUSH
15268: LD_INT 2
15270: PPUSH
15271: CALL_OW 275
15275: PUSH
15276: LD_VAR 0 5
15280: PUSH
15281: LD_INT 2
15283: ARRAY
15284: GREATEREQUAL
15285: AND
15286: IFFALSE 15312
15288: PUSH
15289: LD_VAR 0 4
15293: PPUSH
15294: LD_INT 3
15296: PPUSH
15297: CALL_OW 275
15301: PUSH
15302: LD_VAR 0 5
15306: PUSH
15307: LD_INT 3
15309: ARRAY
15310: GREATEREQUAL
15311: AND
15312: ST_TO_ADDR
// end ;
15313: LD_VAR 0 3
15317: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
15318: LD_INT 0
15320: PPUSH
15321: PPUSH
15322: PPUSH
15323: PPUSH
15324: PPUSH
15325: PPUSH
15326: PPUSH
15327: PPUSH
15328: PPUSH
15329: PPUSH
15330: PPUSH
// result := false ;
15331: LD_ADDR_VAR 0 8
15335: PUSH
15336: LD_INT 0
15338: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
15339: LD_VAR 0 5
15343: NOT
15344: IFTRUE 15353
15346: PUSH
15347: LD_VAR 0 1
15351: NOT
15352: OR
15353: IFTRUE 15362
15355: PUSH
15356: LD_VAR 0 2
15360: NOT
15361: OR
15362: IFTRUE 15371
15364: PUSH
15365: LD_VAR 0 3
15369: NOT
15370: OR
15371: IFFALSE 15375
// exit ;
15373: GO 16201
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
15375: LD_ADDR_VAR 0 14
15379: PUSH
15380: LD_VAR 0 1
15384: PPUSH
15385: LD_VAR 0 2
15389: PPUSH
15390: LD_VAR 0 3
15394: PPUSH
15395: LD_VAR 0 4
15399: PPUSH
15400: LD_VAR 0 5
15404: PUSH
15405: LD_INT 1
15407: ARRAY
15408: PPUSH
15409: CALL_OW 248
15413: PPUSH
15414: LD_INT 0
15416: PPUSH
15417: CALL 17482 0 6
15421: ST_TO_ADDR
// if not hexes then
15422: LD_VAR 0 14
15426: NOT
15427: IFFALSE 15431
// exit ;
15429: GO 16201
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15431: LD_ADDR_VAR 0 17
15435: PUSH
15436: LD_VAR 0 5
15440: PPUSH
15441: LD_INT 22
15443: PUSH
15444: LD_VAR 0 13
15448: PPUSH
15449: CALL_OW 255
15453: PUSH
15454: EMPTY
15455: LIST
15456: LIST
15457: PUSH
15458: LD_INT 2
15460: PUSH
15461: LD_INT 30
15463: PUSH
15464: LD_INT 0
15466: PUSH
15467: EMPTY
15468: LIST
15469: LIST
15470: PUSH
15471: LD_INT 30
15473: PUSH
15474: LD_INT 1
15476: PUSH
15477: EMPTY
15478: LIST
15479: LIST
15480: PUSH
15481: EMPTY
15482: LIST
15483: LIST
15484: LIST
15485: PUSH
15486: EMPTY
15487: LIST
15488: LIST
15489: PPUSH
15490: CALL_OW 72
15494: ST_TO_ADDR
// for i = 1 to hexes do
15495: LD_ADDR_VAR 0 9
15499: PUSH
15500: DOUBLE
15501: LD_INT 1
15503: DEC
15504: ST_TO_ADDR
15505: LD_VAR 0 14
15509: PUSH
15510: FOR_TO
15511: IFFALSE 16199
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15513: LD_ADDR_VAR 0 13
15517: PUSH
15518: LD_VAR 0 14
15522: PUSH
15523: LD_VAR 0 9
15527: ARRAY
15528: PUSH
15529: LD_INT 1
15531: ARRAY
15532: PPUSH
15533: LD_VAR 0 14
15537: PUSH
15538: LD_VAR 0 9
15542: ARRAY
15543: PUSH
15544: LD_INT 2
15546: ARRAY
15547: PPUSH
15548: CALL_OW 428
15552: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
15553: LD_VAR 0 14
15557: PUSH
15558: LD_VAR 0 9
15562: ARRAY
15563: PUSH
15564: LD_INT 1
15566: ARRAY
15567: PPUSH
15568: LD_VAR 0 14
15572: PUSH
15573: LD_VAR 0 9
15577: ARRAY
15578: PUSH
15579: LD_INT 2
15581: ARRAY
15582: PPUSH
15583: CALL_OW 351
15587: IFTRUE 15626
15589: PUSH
15590: LD_VAR 0 14
15594: PUSH
15595: LD_VAR 0 9
15599: ARRAY
15600: PUSH
15601: LD_INT 1
15603: ARRAY
15604: PPUSH
15605: LD_VAR 0 14
15609: PUSH
15610: LD_VAR 0 9
15614: ARRAY
15615: PUSH
15616: LD_INT 2
15618: ARRAY
15619: PPUSH
15620: CALL_OW 488
15624: NOT
15625: OR
15626: IFTRUE 15643
15628: PUSH
15629: LD_VAR 0 13
15633: PPUSH
15634: CALL_OW 247
15638: PUSH
15639: LD_INT 3
15641: EQUAL
15642: OR
15643: IFFALSE 15649
// exit ;
15645: POP
15646: POP
15647: GO 16201
// if not tmp then
15649: LD_VAR 0 13
15653: NOT
15654: IFFALSE 15658
// continue ;
15656: GO 15510
// result := true ;
15658: LD_ADDR_VAR 0 8
15662: PUSH
15663: LD_INT 1
15665: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
15666: LD_VAR 0 6
15670: IFFALSE 15687
15672: PUSH
15673: LD_VAR 0 13
15677: PPUSH
15678: CALL_OW 247
15682: PUSH
15683: LD_INT 2
15685: EQUAL
15686: AND
15687: IFFALSE 15704
15689: PUSH
15690: LD_VAR 0 13
15694: PPUSH
15695: CALL_OW 263
15699: PUSH
15700: LD_INT 1
15702: EQUAL
15703: AND
15704: IFFALSE 15868
// begin if IsDrivenBy ( tmp ) then
15706: LD_VAR 0 13
15710: PPUSH
15711: CALL_OW 311
15715: IFFALSE 15719
// continue ;
15717: GO 15510
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
15719: LD_VAR 0 6
15723: PPUSH
15724: LD_INT 3
15726: PUSH
15727: LD_INT 60
15729: PUSH
15730: EMPTY
15731: LIST
15732: PUSH
15733: EMPTY
15734: LIST
15735: LIST
15736: PUSH
15737: LD_INT 3
15739: PUSH
15740: LD_INT 55
15742: PUSH
15743: EMPTY
15744: LIST
15745: PUSH
15746: EMPTY
15747: LIST
15748: LIST
15749: PUSH
15750: EMPTY
15751: LIST
15752: LIST
15753: PPUSH
15754: CALL_OW 72
15758: IFFALSE 15866
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
15760: LD_ADDR_VAR 0 18
15764: PUSH
15765: LD_VAR 0 6
15769: PPUSH
15770: LD_INT 3
15772: PUSH
15773: LD_INT 60
15775: PUSH
15776: EMPTY
15777: LIST
15778: PUSH
15779: EMPTY
15780: LIST
15781: LIST
15782: PUSH
15783: LD_INT 3
15785: PUSH
15786: LD_INT 55
15788: PUSH
15789: EMPTY
15790: LIST
15791: PUSH
15792: EMPTY
15793: LIST
15794: LIST
15795: PUSH
15796: EMPTY
15797: LIST
15798: LIST
15799: PPUSH
15800: CALL_OW 72
15804: PUSH
15805: LD_INT 1
15807: ARRAY
15808: ST_TO_ADDR
// if IsInUnit ( driver ) then
15809: LD_VAR 0 18
15813: PPUSH
15814: CALL_OW 310
15818: IFFALSE 15829
// ComExit ( driver ) ;
15820: LD_VAR 0 18
15824: PPUSH
15825: CALL 41472 0 1
// AddComEnterUnit ( driver , tmp ) ;
15829: LD_VAR 0 18
15833: PPUSH
15834: LD_VAR 0 13
15838: PPUSH
15839: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
15843: LD_VAR 0 18
15847: PPUSH
15848: LD_VAR 0 7
15852: PPUSH
15853: CALL_OW 173
// AddComExitVehicle ( driver ) ;
15857: LD_VAR 0 18
15861: PPUSH
15862: CALL_OW 181
// end ; continue ;
15866: GO 15510
// end ; if not cleaners or not tmp in cleaners then
15868: LD_VAR 0 6
15872: NOT
15873: IFTRUE 15888
15875: PUSH
15876: LD_VAR 0 13
15880: PUSH
15881: LD_VAR 0 6
15885: IN
15886: NOT
15887: OR
15888: IFFALSE 16197
// begin if dep then
15890: LD_VAR 0 17
15894: IFFALSE 16030
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
15896: LD_ADDR_VAR 0 16
15900: PUSH
15901: LD_VAR 0 17
15905: PUSH
15906: LD_INT 1
15908: ARRAY
15909: PPUSH
15910: CALL_OW 250
15914: PPUSH
15915: LD_VAR 0 17
15919: PUSH
15920: LD_INT 1
15922: ARRAY
15923: PPUSH
15924: CALL_OW 254
15928: PPUSH
15929: LD_INT 5
15931: PPUSH
15932: CALL_OW 272
15936: PUSH
15937: LD_VAR 0 17
15941: PUSH
15942: LD_INT 1
15944: ARRAY
15945: PPUSH
15946: CALL_OW 251
15950: PPUSH
15951: LD_VAR 0 17
15955: PUSH
15956: LD_INT 1
15958: ARRAY
15959: PPUSH
15960: CALL_OW 254
15964: PPUSH
15965: LD_INT 5
15967: PPUSH
15968: CALL_OW 273
15972: PUSH
15973: EMPTY
15974: LIST
15975: LIST
15976: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
15977: LD_VAR 0 16
15981: PUSH
15982: LD_INT 1
15984: ARRAY
15985: PPUSH
15986: LD_VAR 0 16
15990: PUSH
15991: LD_INT 2
15993: ARRAY
15994: PPUSH
15995: CALL_OW 488
15999: IFFALSE 16030
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
16001: LD_VAR 0 13
16005: PPUSH
16006: LD_VAR 0 16
16010: PUSH
16011: LD_INT 1
16013: ARRAY
16014: PPUSH
16015: LD_VAR 0 16
16019: PUSH
16020: LD_INT 2
16022: ARRAY
16023: PPUSH
16024: CALL_OW 111
// continue ;
16028: GO 15510
// end ; end ; r := GetDir ( tmp ) ;
16030: LD_ADDR_VAR 0 15
16034: PUSH
16035: LD_VAR 0 13
16039: PPUSH
16040: CALL_OW 254
16044: ST_TO_ADDR
// if r = 5 then
16045: LD_VAR 0 15
16049: PUSH
16050: LD_INT 5
16052: EQUAL
16053: IFFALSE 16063
// r := 0 ;
16055: LD_ADDR_VAR 0 15
16059: PUSH
16060: LD_INT 0
16062: ST_TO_ADDR
// for j = r to 5 do
16063: LD_ADDR_VAR 0 10
16067: PUSH
16068: DOUBLE
16069: LD_VAR 0 15
16073: DEC
16074: ST_TO_ADDR
16075: LD_INT 5
16077: PUSH
16078: FOR_TO
16079: IFFALSE 16195
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
16081: LD_ADDR_VAR 0 11
16085: PUSH
16086: LD_VAR 0 13
16090: PPUSH
16091: CALL_OW 250
16095: PPUSH
16096: LD_VAR 0 10
16100: PPUSH
16101: LD_INT 2
16103: PPUSH
16104: CALL_OW 272
16108: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
16109: LD_ADDR_VAR 0 12
16113: PUSH
16114: LD_VAR 0 13
16118: PPUSH
16119: CALL_OW 251
16123: PPUSH
16124: LD_VAR 0 10
16128: PPUSH
16129: LD_INT 2
16131: PPUSH
16132: CALL_OW 273
16136: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
16137: LD_VAR 0 11
16141: PPUSH
16142: LD_VAR 0 12
16146: PPUSH
16147: CALL_OW 488
16151: IFFALSE 16170
16153: PUSH
16154: LD_VAR 0 11
16158: PPUSH
16159: LD_VAR 0 12
16163: PPUSH
16164: CALL_OW 428
16168: NOT
16169: AND
16170: IFFALSE 16193
// begin ComMoveXY ( tmp , _x , _y ) ;
16172: LD_VAR 0 13
16176: PPUSH
16177: LD_VAR 0 11
16181: PPUSH
16182: LD_VAR 0 12
16186: PPUSH
16187: CALL_OW 111
// break ;
16191: GO 16195
// end ; end ;
16193: GO 16078
16195: POP
16196: POP
// end ; end ;
16197: GO 15510
16199: POP
16200: POP
// end ;
16201: LD_VAR 0 8
16205: RET
// export function BuildingTechInvented ( side , btype ) ; begin
16206: LD_INT 0
16208: PPUSH
// result := true ;
16209: LD_ADDR_VAR 0 3
16213: PUSH
16214: LD_INT 1
16216: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
16217: LD_VAR 0 2
16221: PUSH
16222: LD_INT 24
16224: DOUBLE
16225: EQUAL
16226: IFTRUE 16236
16228: LD_INT 33
16230: DOUBLE
16231: EQUAL
16232: IFTRUE 16236
16234: GO 16261
16236: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
16237: LD_ADDR_VAR 0 3
16241: PUSH
16242: LD_INT 32
16244: PPUSH
16245: LD_VAR 0 1
16249: PPUSH
16250: CALL_OW 321
16254: PUSH
16255: LD_INT 2
16257: EQUAL
16258: ST_TO_ADDR
16259: GO 16577
16261: LD_INT 20
16263: DOUBLE
16264: EQUAL
16265: IFTRUE 16269
16267: GO 16294
16269: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
16270: LD_ADDR_VAR 0 3
16274: PUSH
16275: LD_INT 6
16277: PPUSH
16278: LD_VAR 0 1
16282: PPUSH
16283: CALL_OW 321
16287: PUSH
16288: LD_INT 2
16290: EQUAL
16291: ST_TO_ADDR
16292: GO 16577
16294: LD_INT 22
16296: DOUBLE
16297: EQUAL
16298: IFTRUE 16308
16300: LD_INT 36
16302: DOUBLE
16303: EQUAL
16304: IFTRUE 16308
16306: GO 16333
16308: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
16309: LD_ADDR_VAR 0 3
16313: PUSH
16314: LD_INT 15
16316: PPUSH
16317: LD_VAR 0 1
16321: PPUSH
16322: CALL_OW 321
16326: PUSH
16327: LD_INT 2
16329: EQUAL
16330: ST_TO_ADDR
16331: GO 16577
16333: LD_INT 30
16335: DOUBLE
16336: EQUAL
16337: IFTRUE 16341
16339: GO 16366
16341: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
16342: LD_ADDR_VAR 0 3
16346: PUSH
16347: LD_INT 20
16349: PPUSH
16350: LD_VAR 0 1
16354: PPUSH
16355: CALL_OW 321
16359: PUSH
16360: LD_INT 2
16362: EQUAL
16363: ST_TO_ADDR
16364: GO 16577
16366: LD_INT 28
16368: DOUBLE
16369: EQUAL
16370: IFTRUE 16380
16372: LD_INT 21
16374: DOUBLE
16375: EQUAL
16376: IFTRUE 16380
16378: GO 16405
16380: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
16381: LD_ADDR_VAR 0 3
16385: PUSH
16386: LD_INT 21
16388: PPUSH
16389: LD_VAR 0 1
16393: PPUSH
16394: CALL_OW 321
16398: PUSH
16399: LD_INT 2
16401: EQUAL
16402: ST_TO_ADDR
16403: GO 16577
16405: LD_INT 16
16407: DOUBLE
16408: EQUAL
16409: IFTRUE 16413
16411: GO 16438
16413: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
16414: LD_ADDR_VAR 0 3
16418: PUSH
16419: LD_INT 84
16421: PPUSH
16422: LD_VAR 0 1
16426: PPUSH
16427: CALL_OW 321
16431: PUSH
16432: LD_INT 2
16434: EQUAL
16435: ST_TO_ADDR
16436: GO 16577
16438: LD_INT 19
16440: DOUBLE
16441: EQUAL
16442: IFTRUE 16452
16444: LD_INT 23
16446: DOUBLE
16447: EQUAL
16448: IFTRUE 16452
16450: GO 16477
16452: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
16453: LD_ADDR_VAR 0 3
16457: PUSH
16458: LD_INT 83
16460: PPUSH
16461: LD_VAR 0 1
16465: PPUSH
16466: CALL_OW 321
16470: PUSH
16471: LD_INT 2
16473: EQUAL
16474: ST_TO_ADDR
16475: GO 16577
16477: LD_INT 17
16479: DOUBLE
16480: EQUAL
16481: IFTRUE 16485
16483: GO 16510
16485: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
16486: LD_ADDR_VAR 0 3
16490: PUSH
16491: LD_INT 39
16493: PPUSH
16494: LD_VAR 0 1
16498: PPUSH
16499: CALL_OW 321
16503: PUSH
16504: LD_INT 2
16506: EQUAL
16507: ST_TO_ADDR
16508: GO 16577
16510: LD_INT 18
16512: DOUBLE
16513: EQUAL
16514: IFTRUE 16518
16516: GO 16543
16518: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
16519: LD_ADDR_VAR 0 3
16523: PUSH
16524: LD_INT 40
16526: PPUSH
16527: LD_VAR 0 1
16531: PPUSH
16532: CALL_OW 321
16536: PUSH
16537: LD_INT 2
16539: EQUAL
16540: ST_TO_ADDR
16541: GO 16577
16543: LD_INT 27
16545: DOUBLE
16546: EQUAL
16547: IFTRUE 16551
16549: GO 16576
16551: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
16552: LD_ADDR_VAR 0 3
16556: PUSH
16557: LD_INT 35
16559: PPUSH
16560: LD_VAR 0 1
16564: PPUSH
16565: CALL_OW 321
16569: PUSH
16570: LD_INT 2
16572: EQUAL
16573: ST_TO_ADDR
16574: GO 16577
16576: POP
// end ;
16577: LD_VAR 0 3
16581: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
16582: LD_INT 0
16584: PPUSH
16585: PPUSH
16586: PPUSH
16587: PPUSH
16588: PPUSH
16589: PPUSH
16590: PPUSH
16591: PPUSH
16592: PPUSH
16593: PPUSH
16594: PPUSH
// result := false ;
16595: LD_ADDR_VAR 0 6
16599: PUSH
16600: LD_INT 0
16602: ST_TO_ADDR
// if btype = b_depot then
16603: LD_VAR 0 2
16607: PUSH
16608: LD_INT 0
16610: EQUAL
16611: IFFALSE 16623
// begin result := true ;
16613: LD_ADDR_VAR 0 6
16617: PUSH
16618: LD_INT 1
16620: ST_TO_ADDR
// exit ;
16621: GO 17477
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
16623: LD_VAR 0 1
16627: NOT
16628: IFTRUE 16653
16630: PUSH
16631: LD_VAR 0 1
16635: PPUSH
16636: CALL_OW 266
16640: PUSH
16641: LD_INT 0
16643: PUSH
16644: LD_INT 1
16646: PUSH
16647: EMPTY
16648: LIST
16649: LIST
16650: IN
16651: NOT
16652: OR
16653: IFTRUE 16662
16655: PUSH
16656: LD_VAR 0 2
16660: NOT
16661: OR
16662: IFTRUE 16698
16664: PUSH
16665: LD_VAR 0 5
16669: PUSH
16670: LD_INT 0
16672: PUSH
16673: LD_INT 1
16675: PUSH
16676: LD_INT 2
16678: PUSH
16679: LD_INT 3
16681: PUSH
16682: LD_INT 4
16684: PUSH
16685: LD_INT 5
16687: PUSH
16688: EMPTY
16689: LIST
16690: LIST
16691: LIST
16692: LIST
16693: LIST
16694: LIST
16695: IN
16696: NOT
16697: OR
16698: IFTRUE 16717
16700: PUSH
16701: LD_VAR 0 3
16705: PPUSH
16706: LD_VAR 0 4
16710: PPUSH
16711: CALL_OW 488
16715: NOT
16716: OR
16717: IFFALSE 16721
// exit ;
16719: GO 17477
// side := GetSide ( depot ) ;
16721: LD_ADDR_VAR 0 9
16725: PUSH
16726: LD_VAR 0 1
16730: PPUSH
16731: CALL_OW 255
16735: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
16736: LD_VAR 0 9
16740: PPUSH
16741: LD_VAR 0 2
16745: PPUSH
16746: CALL 16206 0 2
16750: NOT
16751: IFFALSE 16755
// exit ;
16753: GO 17477
// pom := GetBase ( depot ) ;
16755: LD_ADDR_VAR 0 10
16759: PUSH
16760: LD_VAR 0 1
16764: PPUSH
16765: CALL_OW 274
16769: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
16770: LD_ADDR_VAR 0 11
16774: PUSH
16775: LD_VAR 0 2
16779: PPUSH
16780: LD_VAR 0 1
16784: PPUSH
16785: CALL_OW 248
16789: PPUSH
16790: CALL_OW 450
16794: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
16795: LD_VAR 0 10
16799: PPUSH
16800: LD_INT 1
16802: PPUSH
16803: CALL_OW 275
16807: PUSH
16808: LD_VAR 0 11
16812: PUSH
16813: LD_INT 1
16815: ARRAY
16816: GREATEREQUAL
16817: IFFALSE 16843
16819: PUSH
16820: LD_VAR 0 10
16824: PPUSH
16825: LD_INT 2
16827: PPUSH
16828: CALL_OW 275
16832: PUSH
16833: LD_VAR 0 11
16837: PUSH
16838: LD_INT 2
16840: ARRAY
16841: GREATEREQUAL
16842: AND
16843: IFFALSE 16869
16845: PUSH
16846: LD_VAR 0 10
16850: PPUSH
16851: LD_INT 3
16853: PPUSH
16854: CALL_OW 275
16858: PUSH
16859: LD_VAR 0 11
16863: PUSH
16864: LD_INT 3
16866: ARRAY
16867: GREATEREQUAL
16868: AND
16869: NOT
16870: IFFALSE 16874
// exit ;
16872: GO 17477
// if GetBType ( depot ) = b_depot then
16874: LD_VAR 0 1
16878: PPUSH
16879: CALL_OW 266
16883: PUSH
16884: LD_INT 0
16886: EQUAL
16887: IFFALSE 16899
// dist := 28 else
16889: LD_ADDR_VAR 0 14
16893: PUSH
16894: LD_INT 28
16896: ST_TO_ADDR
16897: GO 16907
// dist := 36 ;
16899: LD_ADDR_VAR 0 14
16903: PUSH
16904: LD_INT 36
16906: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
16907: LD_VAR 0 1
16911: PPUSH
16912: LD_VAR 0 3
16916: PPUSH
16917: LD_VAR 0 4
16921: PPUSH
16922: CALL_OW 297
16926: PUSH
16927: LD_VAR 0 14
16931: GREATER
16932: IFFALSE 16936
// exit ;
16934: GO 17477
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
16936: LD_ADDR_VAR 0 12
16940: PUSH
16941: LD_VAR 0 2
16945: PPUSH
16946: LD_VAR 0 3
16950: PPUSH
16951: LD_VAR 0 4
16955: PPUSH
16956: LD_VAR 0 5
16960: PPUSH
16961: LD_VAR 0 1
16965: PPUSH
16966: CALL_OW 248
16970: PPUSH
16971: LD_INT 0
16973: PPUSH
16974: CALL 17482 0 6
16978: ST_TO_ADDR
// if not hexes then
16979: LD_VAR 0 12
16983: NOT
16984: IFFALSE 16988
// exit ;
16986: GO 17477
// hex := GetHexInfo ( x , y ) ;
16988: LD_ADDR_VAR 0 15
16992: PUSH
16993: LD_VAR 0 3
16997: PPUSH
16998: LD_VAR 0 4
17002: PPUSH
17003: CALL_OW 546
17007: ST_TO_ADDR
// if hex [ 1 ] then
17008: LD_VAR 0 15
17012: PUSH
17013: LD_INT 1
17015: ARRAY
17016: IFFALSE 17020
// exit ;
17018: GO 17477
// height := hex [ 2 ] ;
17020: LD_ADDR_VAR 0 13
17024: PUSH
17025: LD_VAR 0 15
17029: PUSH
17030: LD_INT 2
17032: ARRAY
17033: ST_TO_ADDR
// for i = 1 to hexes do
17034: LD_ADDR_VAR 0 7
17038: PUSH
17039: DOUBLE
17040: LD_INT 1
17042: DEC
17043: ST_TO_ADDR
17044: LD_VAR 0 12
17048: PUSH
17049: FOR_TO
17050: IFFALSE 17394
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
17052: LD_VAR 0 12
17056: PUSH
17057: LD_VAR 0 7
17061: ARRAY
17062: PUSH
17063: LD_INT 1
17065: ARRAY
17066: PPUSH
17067: LD_VAR 0 12
17071: PUSH
17072: LD_VAR 0 7
17076: ARRAY
17077: PUSH
17078: LD_INT 2
17080: ARRAY
17081: PPUSH
17082: CALL_OW 488
17086: NOT
17087: IFTRUE 17129
17089: PUSH
17090: LD_VAR 0 12
17094: PUSH
17095: LD_VAR 0 7
17099: ARRAY
17100: PUSH
17101: LD_INT 1
17103: ARRAY
17104: PPUSH
17105: LD_VAR 0 12
17109: PUSH
17110: LD_VAR 0 7
17114: ARRAY
17115: PUSH
17116: LD_INT 2
17118: ARRAY
17119: PPUSH
17120: CALL_OW 428
17124: PUSH
17125: LD_INT 0
17127: GREATER
17128: OR
17129: IFTRUE 17167
17131: PUSH
17132: LD_VAR 0 12
17136: PUSH
17137: LD_VAR 0 7
17141: ARRAY
17142: PUSH
17143: LD_INT 1
17145: ARRAY
17146: PPUSH
17147: LD_VAR 0 12
17151: PUSH
17152: LD_VAR 0 7
17156: ARRAY
17157: PUSH
17158: LD_INT 2
17160: ARRAY
17161: PPUSH
17162: CALL_OW 351
17166: OR
17167: IFFALSE 17173
// exit ;
17169: POP
17170: POP
17171: GO 17477
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
17173: LD_ADDR_VAR 0 8
17177: PUSH
17178: LD_VAR 0 12
17182: PUSH
17183: LD_VAR 0 7
17187: ARRAY
17188: PUSH
17189: LD_INT 1
17191: ARRAY
17192: PPUSH
17193: LD_VAR 0 12
17197: PUSH
17198: LD_VAR 0 7
17202: ARRAY
17203: PUSH
17204: LD_INT 2
17206: ARRAY
17207: PPUSH
17208: CALL_OW 546
17212: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
17213: LD_VAR 0 8
17217: PUSH
17218: LD_INT 1
17220: ARRAY
17221: IFTRUE 17243
17223: PUSH
17224: LD_VAR 0 8
17228: PUSH
17229: LD_INT 2
17231: ARRAY
17232: PUSH
17233: LD_VAR 0 13
17237: PUSH
17238: LD_INT 2
17240: PLUS
17241: GREATER
17242: OR
17243: IFTRUE 17265
17245: PUSH
17246: LD_VAR 0 8
17250: PUSH
17251: LD_INT 2
17253: ARRAY
17254: PUSH
17255: LD_VAR 0 13
17259: PUSH
17260: LD_INT 2
17262: MINUS
17263: LESS
17264: OR
17265: IFTRUE 17333
17267: PUSH
17268: LD_VAR 0 8
17272: PUSH
17273: LD_INT 3
17275: ARRAY
17276: PUSH
17277: LD_INT 0
17279: PUSH
17280: LD_INT 8
17282: PUSH
17283: LD_INT 9
17285: PUSH
17286: LD_INT 10
17288: PUSH
17289: LD_INT 11
17291: PUSH
17292: LD_INT 12
17294: PUSH
17295: LD_INT 13
17297: PUSH
17298: LD_INT 16
17300: PUSH
17301: LD_INT 17
17303: PUSH
17304: LD_INT 18
17306: PUSH
17307: LD_INT 19
17309: PUSH
17310: LD_INT 20
17312: PUSH
17313: LD_INT 21
17315: PUSH
17316: EMPTY
17317: LIST
17318: LIST
17319: LIST
17320: LIST
17321: LIST
17322: LIST
17323: LIST
17324: LIST
17325: LIST
17326: LIST
17327: LIST
17328: LIST
17329: LIST
17330: IN
17331: NOT
17332: OR
17333: IFTRUE 17346
17335: PUSH
17336: LD_VAR 0 8
17340: PUSH
17341: LD_INT 5
17343: ARRAY
17344: NOT
17345: OR
17346: IFTRUE 17386
17348: PUSH
17349: LD_VAR 0 8
17353: PUSH
17354: LD_INT 6
17356: ARRAY
17357: PUSH
17358: LD_INT 1
17360: PUSH
17361: LD_INT 2
17363: PUSH
17364: LD_INT 7
17366: PUSH
17367: LD_INT 9
17369: PUSH
17370: LD_INT 10
17372: PUSH
17373: LD_INT 11
17375: PUSH
17376: EMPTY
17377: LIST
17378: LIST
17379: LIST
17380: LIST
17381: LIST
17382: LIST
17383: IN
17384: NOT
17385: OR
17386: IFFALSE 17392
// exit ;
17388: POP
17389: POP
17390: GO 17477
// end ;
17392: GO 17049
17394: POP
17395: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
17396: LD_VAR 0 9
17400: PPUSH
17401: LD_VAR 0 3
17405: PPUSH
17406: LD_VAR 0 4
17410: PPUSH
17411: LD_INT 20
17413: PPUSH
17414: CALL 9296 0 4
17418: PUSH
17419: LD_INT 4
17421: ARRAY
17422: IFFALSE 17426
// exit ;
17424: GO 17477
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
17426: LD_VAR 0 2
17430: PUSH
17431: LD_INT 29
17433: PUSH
17434: LD_INT 30
17436: PUSH
17437: EMPTY
17438: LIST
17439: LIST
17440: IN
17441: IFFALSE 17465
17443: PUSH
17444: LD_VAR 0 3
17448: PPUSH
17449: LD_VAR 0 4
17453: PPUSH
17454: LD_VAR 0 9
17458: PPUSH
17459: CALL_OW 440
17463: NOT
17464: AND
17465: IFFALSE 17469
// exit ;
17467: GO 17477
// result := true ;
17469: LD_ADDR_VAR 0 6
17473: PUSH
17474: LD_INT 1
17476: ST_TO_ADDR
// end ;
17477: LD_VAR 0 6
17481: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
17482: LD_INT 0
17484: PPUSH
17485: PPUSH
17486: PPUSH
17487: PPUSH
17488: PPUSH
17489: PPUSH
17490: PPUSH
17491: PPUSH
17492: PPUSH
17493: PPUSH
17494: PPUSH
17495: PPUSH
17496: PPUSH
17497: PPUSH
17498: PPUSH
17499: PPUSH
17500: PPUSH
17501: PPUSH
17502: PPUSH
17503: PPUSH
17504: PPUSH
17505: PPUSH
17506: PPUSH
17507: PPUSH
17508: PPUSH
17509: PPUSH
17510: PPUSH
17511: PPUSH
17512: PPUSH
17513: PPUSH
17514: PPUSH
17515: PPUSH
17516: PPUSH
17517: PPUSH
17518: PPUSH
17519: PPUSH
17520: PPUSH
17521: PPUSH
17522: PPUSH
17523: PPUSH
17524: PPUSH
17525: PPUSH
17526: PPUSH
17527: PPUSH
17528: PPUSH
17529: PPUSH
17530: PPUSH
17531: PPUSH
17532: PPUSH
17533: PPUSH
17534: PPUSH
17535: PPUSH
17536: PPUSH
17537: PPUSH
17538: PPUSH
17539: PPUSH
17540: PPUSH
17541: PPUSH
// result = [ ] ;
17542: LD_ADDR_VAR 0 7
17546: PUSH
17547: EMPTY
17548: ST_TO_ADDR
// temp_list = [ ] ;
17549: LD_ADDR_VAR 0 9
17553: PUSH
17554: EMPTY
17555: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
17556: LD_VAR 0 4
17560: PUSH
17561: LD_INT 0
17563: PUSH
17564: LD_INT 1
17566: PUSH
17567: LD_INT 2
17569: PUSH
17570: LD_INT 3
17572: PUSH
17573: LD_INT 4
17575: PUSH
17576: LD_INT 5
17578: PUSH
17579: EMPTY
17580: LIST
17581: LIST
17582: LIST
17583: LIST
17584: LIST
17585: LIST
17586: IN
17587: NOT
17588: IFTRUE 17631
17590: PUSH
17591: LD_VAR 0 1
17595: PUSH
17596: LD_INT 0
17598: PUSH
17599: LD_INT 1
17601: PUSH
17602: EMPTY
17603: LIST
17604: LIST
17605: IN
17606: IFFALSE 17630
17608: PUSH
17609: LD_VAR 0 5
17613: PUSH
17614: LD_INT 1
17616: PUSH
17617: LD_INT 2
17619: PUSH
17620: LD_INT 3
17622: PUSH
17623: EMPTY
17624: LIST
17625: LIST
17626: LIST
17627: IN
17628: NOT
17629: AND
17630: OR
17631: IFFALSE 17635
// exit ;
17633: GO 36034
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
17635: LD_VAR 0 1
17639: PUSH
17640: LD_INT 6
17642: PUSH
17643: LD_INT 7
17645: PUSH
17646: LD_INT 8
17648: PUSH
17649: LD_INT 13
17651: PUSH
17652: LD_INT 12
17654: PUSH
17655: LD_INT 15
17657: PUSH
17658: LD_INT 11
17660: PUSH
17661: LD_INT 14
17663: PUSH
17664: LD_INT 10
17666: PUSH
17667: EMPTY
17668: LIST
17669: LIST
17670: LIST
17671: LIST
17672: LIST
17673: LIST
17674: LIST
17675: LIST
17676: LIST
17677: IN
17678: IFFALSE 17688
// btype = b_lab ;
17680: LD_ADDR_VAR 0 1
17684: PUSH
17685: LD_INT 6
17687: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
17688: LD_VAR 0 6
17692: PUSH
17693: LD_INT 0
17695: PUSH
17696: LD_INT 1
17698: PUSH
17699: LD_INT 2
17701: PUSH
17702: EMPTY
17703: LIST
17704: LIST
17705: LIST
17706: IN
17707: NOT
17708: IFTRUE 17776
17710: PUSH
17711: LD_VAR 0 1
17715: PUSH
17716: LD_INT 0
17718: PUSH
17719: LD_INT 1
17721: PUSH
17722: LD_INT 2
17724: PUSH
17725: LD_INT 3
17727: PUSH
17728: LD_INT 6
17730: PUSH
17731: LD_INT 36
17733: PUSH
17734: LD_INT 4
17736: PUSH
17737: LD_INT 5
17739: PUSH
17740: LD_INT 31
17742: PUSH
17743: LD_INT 32
17745: PUSH
17746: LD_INT 33
17748: PUSH
17749: EMPTY
17750: LIST
17751: LIST
17752: LIST
17753: LIST
17754: LIST
17755: LIST
17756: LIST
17757: LIST
17758: LIST
17759: LIST
17760: LIST
17761: IN
17762: NOT
17763: IFFALSE 17775
17765: PUSH
17766: LD_VAR 0 6
17770: PUSH
17771: LD_INT 1
17773: EQUAL
17774: AND
17775: OR
17776: IFTRUE 17808
17778: PUSH
17779: LD_VAR 0 1
17783: PUSH
17784: LD_INT 2
17786: PUSH
17787: LD_INT 3
17789: PUSH
17790: EMPTY
17791: LIST
17792: LIST
17793: IN
17794: NOT
17795: IFFALSE 17807
17797: PUSH
17798: LD_VAR 0 6
17802: PUSH
17803: LD_INT 2
17805: EQUAL
17806: AND
17807: OR
17808: IFFALSE 17818
// mode = 0 ;
17810: LD_ADDR_VAR 0 6
17814: PUSH
17815: LD_INT 0
17817: ST_TO_ADDR
// case mode of 0 :
17818: LD_VAR 0 6
17822: PUSH
17823: LD_INT 0
17825: DOUBLE
17826: EQUAL
17827: IFTRUE 17831
17829: GO 29284
17831: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
17832: LD_ADDR_VAR 0 11
17836: PUSH
17837: LD_INT 0
17839: PUSH
17840: LD_INT 0
17842: PUSH
17843: EMPTY
17844: LIST
17845: LIST
17846: PUSH
17847: LD_INT 0
17849: PUSH
17850: LD_INT 1
17852: NEG
17853: PUSH
17854: EMPTY
17855: LIST
17856: LIST
17857: PUSH
17858: LD_INT 1
17860: PUSH
17861: LD_INT 0
17863: PUSH
17864: EMPTY
17865: LIST
17866: LIST
17867: PUSH
17868: LD_INT 1
17870: PUSH
17871: LD_INT 1
17873: PUSH
17874: EMPTY
17875: LIST
17876: LIST
17877: PUSH
17878: LD_INT 0
17880: PUSH
17881: LD_INT 1
17883: PUSH
17884: EMPTY
17885: LIST
17886: LIST
17887: PUSH
17888: LD_INT 1
17890: NEG
17891: PUSH
17892: LD_INT 0
17894: PUSH
17895: EMPTY
17896: LIST
17897: LIST
17898: PUSH
17899: LD_INT 1
17901: NEG
17902: PUSH
17903: LD_INT 1
17905: NEG
17906: PUSH
17907: EMPTY
17908: LIST
17909: LIST
17910: PUSH
17911: LD_INT 1
17913: NEG
17914: PUSH
17915: LD_INT 2
17917: NEG
17918: PUSH
17919: EMPTY
17920: LIST
17921: LIST
17922: PUSH
17923: LD_INT 0
17925: PUSH
17926: LD_INT 2
17928: NEG
17929: PUSH
17930: EMPTY
17931: LIST
17932: LIST
17933: PUSH
17934: LD_INT 1
17936: PUSH
17937: LD_INT 1
17939: NEG
17940: PUSH
17941: EMPTY
17942: LIST
17943: LIST
17944: PUSH
17945: LD_INT 1
17947: PUSH
17948: LD_INT 2
17950: PUSH
17951: EMPTY
17952: LIST
17953: LIST
17954: PUSH
17955: LD_INT 0
17957: PUSH
17958: LD_INT 2
17960: PUSH
17961: EMPTY
17962: LIST
17963: LIST
17964: PUSH
17965: LD_INT 1
17967: NEG
17968: PUSH
17969: LD_INT 1
17971: PUSH
17972: EMPTY
17973: LIST
17974: LIST
17975: PUSH
17976: LD_INT 1
17978: PUSH
17979: LD_INT 3
17981: PUSH
17982: EMPTY
17983: LIST
17984: LIST
17985: PUSH
17986: LD_INT 0
17988: PUSH
17989: LD_INT 3
17991: PUSH
17992: EMPTY
17993: LIST
17994: LIST
17995: PUSH
17996: LD_INT 1
17998: NEG
17999: PUSH
18000: LD_INT 2
18002: PUSH
18003: EMPTY
18004: LIST
18005: LIST
18006: PUSH
18007: EMPTY
18008: LIST
18009: LIST
18010: LIST
18011: LIST
18012: LIST
18013: LIST
18014: LIST
18015: LIST
18016: LIST
18017: LIST
18018: LIST
18019: LIST
18020: LIST
18021: LIST
18022: LIST
18023: LIST
18024: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
18025: LD_ADDR_VAR 0 12
18029: PUSH
18030: LD_INT 0
18032: PUSH
18033: LD_INT 0
18035: PUSH
18036: EMPTY
18037: LIST
18038: LIST
18039: PUSH
18040: LD_INT 0
18042: PUSH
18043: LD_INT 1
18045: NEG
18046: PUSH
18047: EMPTY
18048: LIST
18049: LIST
18050: PUSH
18051: LD_INT 1
18053: PUSH
18054: LD_INT 0
18056: PUSH
18057: EMPTY
18058: LIST
18059: LIST
18060: PUSH
18061: LD_INT 1
18063: PUSH
18064: LD_INT 1
18066: PUSH
18067: EMPTY
18068: LIST
18069: LIST
18070: PUSH
18071: LD_INT 0
18073: PUSH
18074: LD_INT 1
18076: PUSH
18077: EMPTY
18078: LIST
18079: LIST
18080: PUSH
18081: LD_INT 1
18083: NEG
18084: PUSH
18085: LD_INT 0
18087: PUSH
18088: EMPTY
18089: LIST
18090: LIST
18091: PUSH
18092: LD_INT 1
18094: NEG
18095: PUSH
18096: LD_INT 1
18098: NEG
18099: PUSH
18100: EMPTY
18101: LIST
18102: LIST
18103: PUSH
18104: LD_INT 1
18106: PUSH
18107: LD_INT 1
18109: NEG
18110: PUSH
18111: EMPTY
18112: LIST
18113: LIST
18114: PUSH
18115: LD_INT 2
18117: PUSH
18118: LD_INT 0
18120: PUSH
18121: EMPTY
18122: LIST
18123: LIST
18124: PUSH
18125: LD_INT 2
18127: PUSH
18128: LD_INT 1
18130: PUSH
18131: EMPTY
18132: LIST
18133: LIST
18134: PUSH
18135: LD_INT 1
18137: NEG
18138: PUSH
18139: LD_INT 1
18141: PUSH
18142: EMPTY
18143: LIST
18144: LIST
18145: PUSH
18146: LD_INT 2
18148: NEG
18149: PUSH
18150: LD_INT 0
18152: PUSH
18153: EMPTY
18154: LIST
18155: LIST
18156: PUSH
18157: LD_INT 2
18159: NEG
18160: PUSH
18161: LD_INT 1
18163: NEG
18164: PUSH
18165: EMPTY
18166: LIST
18167: LIST
18168: PUSH
18169: LD_INT 2
18171: NEG
18172: PUSH
18173: LD_INT 1
18175: PUSH
18176: EMPTY
18177: LIST
18178: LIST
18179: PUSH
18180: LD_INT 3
18182: NEG
18183: PUSH
18184: LD_INT 0
18186: PUSH
18187: EMPTY
18188: LIST
18189: LIST
18190: PUSH
18191: LD_INT 3
18193: NEG
18194: PUSH
18195: LD_INT 1
18197: NEG
18198: PUSH
18199: EMPTY
18200: LIST
18201: LIST
18202: PUSH
18203: EMPTY
18204: LIST
18205: LIST
18206: LIST
18207: LIST
18208: LIST
18209: LIST
18210: LIST
18211: LIST
18212: LIST
18213: LIST
18214: LIST
18215: LIST
18216: LIST
18217: LIST
18218: LIST
18219: LIST
18220: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
18221: LD_ADDR_VAR 0 13
18225: PUSH
18226: LD_INT 0
18228: PUSH
18229: LD_INT 0
18231: PUSH
18232: EMPTY
18233: LIST
18234: LIST
18235: PUSH
18236: LD_INT 0
18238: PUSH
18239: LD_INT 1
18241: NEG
18242: PUSH
18243: EMPTY
18244: LIST
18245: LIST
18246: PUSH
18247: LD_INT 1
18249: PUSH
18250: LD_INT 0
18252: PUSH
18253: EMPTY
18254: LIST
18255: LIST
18256: PUSH
18257: LD_INT 1
18259: PUSH
18260: LD_INT 1
18262: PUSH
18263: EMPTY
18264: LIST
18265: LIST
18266: PUSH
18267: LD_INT 0
18269: PUSH
18270: LD_INT 1
18272: PUSH
18273: EMPTY
18274: LIST
18275: LIST
18276: PUSH
18277: LD_INT 1
18279: NEG
18280: PUSH
18281: LD_INT 0
18283: PUSH
18284: EMPTY
18285: LIST
18286: LIST
18287: PUSH
18288: LD_INT 1
18290: NEG
18291: PUSH
18292: LD_INT 1
18294: NEG
18295: PUSH
18296: EMPTY
18297: LIST
18298: LIST
18299: PUSH
18300: LD_INT 1
18302: NEG
18303: PUSH
18304: LD_INT 2
18306: NEG
18307: PUSH
18308: EMPTY
18309: LIST
18310: LIST
18311: PUSH
18312: LD_INT 2
18314: PUSH
18315: LD_INT 1
18317: PUSH
18318: EMPTY
18319: LIST
18320: LIST
18321: PUSH
18322: LD_INT 2
18324: PUSH
18325: LD_INT 2
18327: PUSH
18328: EMPTY
18329: LIST
18330: LIST
18331: PUSH
18332: LD_INT 1
18334: PUSH
18335: LD_INT 2
18337: PUSH
18338: EMPTY
18339: LIST
18340: LIST
18341: PUSH
18342: LD_INT 2
18344: NEG
18345: PUSH
18346: LD_INT 1
18348: NEG
18349: PUSH
18350: EMPTY
18351: LIST
18352: LIST
18353: PUSH
18354: LD_INT 2
18356: NEG
18357: PUSH
18358: LD_INT 2
18360: NEG
18361: PUSH
18362: EMPTY
18363: LIST
18364: LIST
18365: PUSH
18366: LD_INT 2
18368: NEG
18369: PUSH
18370: LD_INT 3
18372: NEG
18373: PUSH
18374: EMPTY
18375: LIST
18376: LIST
18377: PUSH
18378: LD_INT 3
18380: NEG
18381: PUSH
18382: LD_INT 2
18384: NEG
18385: PUSH
18386: EMPTY
18387: LIST
18388: LIST
18389: PUSH
18390: LD_INT 3
18392: NEG
18393: PUSH
18394: LD_INT 3
18396: NEG
18397: PUSH
18398: EMPTY
18399: LIST
18400: LIST
18401: PUSH
18402: EMPTY
18403: LIST
18404: LIST
18405: LIST
18406: LIST
18407: LIST
18408: LIST
18409: LIST
18410: LIST
18411: LIST
18412: LIST
18413: LIST
18414: LIST
18415: LIST
18416: LIST
18417: LIST
18418: LIST
18419: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
18420: LD_ADDR_VAR 0 14
18424: PUSH
18425: LD_INT 0
18427: PUSH
18428: LD_INT 0
18430: PUSH
18431: EMPTY
18432: LIST
18433: LIST
18434: PUSH
18435: LD_INT 0
18437: PUSH
18438: LD_INT 1
18440: NEG
18441: PUSH
18442: EMPTY
18443: LIST
18444: LIST
18445: PUSH
18446: LD_INT 1
18448: PUSH
18449: LD_INT 0
18451: PUSH
18452: EMPTY
18453: LIST
18454: LIST
18455: PUSH
18456: LD_INT 1
18458: PUSH
18459: LD_INT 1
18461: PUSH
18462: EMPTY
18463: LIST
18464: LIST
18465: PUSH
18466: LD_INT 0
18468: PUSH
18469: LD_INT 1
18471: PUSH
18472: EMPTY
18473: LIST
18474: LIST
18475: PUSH
18476: LD_INT 1
18478: NEG
18479: PUSH
18480: LD_INT 0
18482: PUSH
18483: EMPTY
18484: LIST
18485: LIST
18486: PUSH
18487: LD_INT 1
18489: NEG
18490: PUSH
18491: LD_INT 1
18493: NEG
18494: PUSH
18495: EMPTY
18496: LIST
18497: LIST
18498: PUSH
18499: LD_INT 1
18501: NEG
18502: PUSH
18503: LD_INT 2
18505: NEG
18506: PUSH
18507: EMPTY
18508: LIST
18509: LIST
18510: PUSH
18511: LD_INT 0
18513: PUSH
18514: LD_INT 2
18516: NEG
18517: PUSH
18518: EMPTY
18519: LIST
18520: LIST
18521: PUSH
18522: LD_INT 1
18524: PUSH
18525: LD_INT 1
18527: NEG
18528: PUSH
18529: EMPTY
18530: LIST
18531: LIST
18532: PUSH
18533: LD_INT 1
18535: PUSH
18536: LD_INT 2
18538: PUSH
18539: EMPTY
18540: LIST
18541: LIST
18542: PUSH
18543: LD_INT 0
18545: PUSH
18546: LD_INT 2
18548: PUSH
18549: EMPTY
18550: LIST
18551: LIST
18552: PUSH
18553: LD_INT 1
18555: NEG
18556: PUSH
18557: LD_INT 1
18559: PUSH
18560: EMPTY
18561: LIST
18562: LIST
18563: PUSH
18564: LD_INT 1
18566: NEG
18567: PUSH
18568: LD_INT 3
18570: NEG
18571: PUSH
18572: EMPTY
18573: LIST
18574: LIST
18575: PUSH
18576: LD_INT 0
18578: PUSH
18579: LD_INT 3
18581: NEG
18582: PUSH
18583: EMPTY
18584: LIST
18585: LIST
18586: PUSH
18587: LD_INT 1
18589: PUSH
18590: LD_INT 2
18592: NEG
18593: PUSH
18594: EMPTY
18595: LIST
18596: LIST
18597: PUSH
18598: EMPTY
18599: LIST
18600: LIST
18601: LIST
18602: LIST
18603: LIST
18604: LIST
18605: LIST
18606: LIST
18607: LIST
18608: LIST
18609: LIST
18610: LIST
18611: LIST
18612: LIST
18613: LIST
18614: LIST
18615: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
18616: LD_ADDR_VAR 0 15
18620: PUSH
18621: LD_INT 0
18623: PUSH
18624: LD_INT 0
18626: PUSH
18627: EMPTY
18628: LIST
18629: LIST
18630: PUSH
18631: LD_INT 0
18633: PUSH
18634: LD_INT 1
18636: NEG
18637: PUSH
18638: EMPTY
18639: LIST
18640: LIST
18641: PUSH
18642: LD_INT 1
18644: PUSH
18645: LD_INT 0
18647: PUSH
18648: EMPTY
18649: LIST
18650: LIST
18651: PUSH
18652: LD_INT 1
18654: PUSH
18655: LD_INT 1
18657: PUSH
18658: EMPTY
18659: LIST
18660: LIST
18661: PUSH
18662: LD_INT 0
18664: PUSH
18665: LD_INT 1
18667: PUSH
18668: EMPTY
18669: LIST
18670: LIST
18671: PUSH
18672: LD_INT 1
18674: NEG
18675: PUSH
18676: LD_INT 0
18678: PUSH
18679: EMPTY
18680: LIST
18681: LIST
18682: PUSH
18683: LD_INT 1
18685: NEG
18686: PUSH
18687: LD_INT 1
18689: NEG
18690: PUSH
18691: EMPTY
18692: LIST
18693: LIST
18694: PUSH
18695: LD_INT 1
18697: PUSH
18698: LD_INT 1
18700: NEG
18701: PUSH
18702: EMPTY
18703: LIST
18704: LIST
18705: PUSH
18706: LD_INT 2
18708: PUSH
18709: LD_INT 0
18711: PUSH
18712: EMPTY
18713: LIST
18714: LIST
18715: PUSH
18716: LD_INT 2
18718: PUSH
18719: LD_INT 1
18721: PUSH
18722: EMPTY
18723: LIST
18724: LIST
18725: PUSH
18726: LD_INT 1
18728: NEG
18729: PUSH
18730: LD_INT 1
18732: PUSH
18733: EMPTY
18734: LIST
18735: LIST
18736: PUSH
18737: LD_INT 2
18739: NEG
18740: PUSH
18741: LD_INT 0
18743: PUSH
18744: EMPTY
18745: LIST
18746: LIST
18747: PUSH
18748: LD_INT 2
18750: NEG
18751: PUSH
18752: LD_INT 1
18754: NEG
18755: PUSH
18756: EMPTY
18757: LIST
18758: LIST
18759: PUSH
18760: LD_INT 2
18762: PUSH
18763: LD_INT 1
18765: NEG
18766: PUSH
18767: EMPTY
18768: LIST
18769: LIST
18770: PUSH
18771: LD_INT 3
18773: PUSH
18774: LD_INT 0
18776: PUSH
18777: EMPTY
18778: LIST
18779: LIST
18780: PUSH
18781: LD_INT 3
18783: PUSH
18784: LD_INT 1
18786: PUSH
18787: EMPTY
18788: LIST
18789: LIST
18790: PUSH
18791: EMPTY
18792: LIST
18793: LIST
18794: LIST
18795: LIST
18796: LIST
18797: LIST
18798: LIST
18799: LIST
18800: LIST
18801: LIST
18802: LIST
18803: LIST
18804: LIST
18805: LIST
18806: LIST
18807: LIST
18808: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
18809: LD_ADDR_VAR 0 16
18813: PUSH
18814: LD_INT 0
18816: PUSH
18817: LD_INT 0
18819: PUSH
18820: EMPTY
18821: LIST
18822: LIST
18823: PUSH
18824: LD_INT 0
18826: PUSH
18827: LD_INT 1
18829: NEG
18830: PUSH
18831: EMPTY
18832: LIST
18833: LIST
18834: PUSH
18835: LD_INT 1
18837: PUSH
18838: LD_INT 0
18840: PUSH
18841: EMPTY
18842: LIST
18843: LIST
18844: PUSH
18845: LD_INT 1
18847: PUSH
18848: LD_INT 1
18850: PUSH
18851: EMPTY
18852: LIST
18853: LIST
18854: PUSH
18855: LD_INT 0
18857: PUSH
18858: LD_INT 1
18860: PUSH
18861: EMPTY
18862: LIST
18863: LIST
18864: PUSH
18865: LD_INT 1
18867: NEG
18868: PUSH
18869: LD_INT 0
18871: PUSH
18872: EMPTY
18873: LIST
18874: LIST
18875: PUSH
18876: LD_INT 1
18878: NEG
18879: PUSH
18880: LD_INT 1
18882: NEG
18883: PUSH
18884: EMPTY
18885: LIST
18886: LIST
18887: PUSH
18888: LD_INT 1
18890: NEG
18891: PUSH
18892: LD_INT 2
18894: NEG
18895: PUSH
18896: EMPTY
18897: LIST
18898: LIST
18899: PUSH
18900: LD_INT 2
18902: PUSH
18903: LD_INT 1
18905: PUSH
18906: EMPTY
18907: LIST
18908: LIST
18909: PUSH
18910: LD_INT 2
18912: PUSH
18913: LD_INT 2
18915: PUSH
18916: EMPTY
18917: LIST
18918: LIST
18919: PUSH
18920: LD_INT 1
18922: PUSH
18923: LD_INT 2
18925: PUSH
18926: EMPTY
18927: LIST
18928: LIST
18929: PUSH
18930: LD_INT 2
18932: NEG
18933: PUSH
18934: LD_INT 1
18936: NEG
18937: PUSH
18938: EMPTY
18939: LIST
18940: LIST
18941: PUSH
18942: LD_INT 2
18944: NEG
18945: PUSH
18946: LD_INT 2
18948: NEG
18949: PUSH
18950: EMPTY
18951: LIST
18952: LIST
18953: PUSH
18954: LD_INT 3
18956: PUSH
18957: LD_INT 2
18959: PUSH
18960: EMPTY
18961: LIST
18962: LIST
18963: PUSH
18964: LD_INT 3
18966: PUSH
18967: LD_INT 3
18969: PUSH
18970: EMPTY
18971: LIST
18972: LIST
18973: PUSH
18974: LD_INT 2
18976: PUSH
18977: LD_INT 3
18979: PUSH
18980: EMPTY
18981: LIST
18982: LIST
18983: PUSH
18984: EMPTY
18985: LIST
18986: LIST
18987: LIST
18988: LIST
18989: LIST
18990: LIST
18991: LIST
18992: LIST
18993: LIST
18994: LIST
18995: LIST
18996: LIST
18997: LIST
18998: LIST
18999: LIST
19000: LIST
19001: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19002: LD_ADDR_VAR 0 17
19006: PUSH
19007: LD_INT 0
19009: PUSH
19010: LD_INT 0
19012: PUSH
19013: EMPTY
19014: LIST
19015: LIST
19016: PUSH
19017: LD_INT 0
19019: PUSH
19020: LD_INT 1
19022: NEG
19023: PUSH
19024: EMPTY
19025: LIST
19026: LIST
19027: PUSH
19028: LD_INT 1
19030: PUSH
19031: LD_INT 0
19033: PUSH
19034: EMPTY
19035: LIST
19036: LIST
19037: PUSH
19038: LD_INT 1
19040: PUSH
19041: LD_INT 1
19043: PUSH
19044: EMPTY
19045: LIST
19046: LIST
19047: PUSH
19048: LD_INT 0
19050: PUSH
19051: LD_INT 1
19053: PUSH
19054: EMPTY
19055: LIST
19056: LIST
19057: PUSH
19058: LD_INT 1
19060: NEG
19061: PUSH
19062: LD_INT 0
19064: PUSH
19065: EMPTY
19066: LIST
19067: LIST
19068: PUSH
19069: LD_INT 1
19071: NEG
19072: PUSH
19073: LD_INT 1
19075: NEG
19076: PUSH
19077: EMPTY
19078: LIST
19079: LIST
19080: PUSH
19081: LD_INT 1
19083: NEG
19084: PUSH
19085: LD_INT 2
19087: NEG
19088: PUSH
19089: EMPTY
19090: LIST
19091: LIST
19092: PUSH
19093: LD_INT 0
19095: PUSH
19096: LD_INT 2
19098: NEG
19099: PUSH
19100: EMPTY
19101: LIST
19102: LIST
19103: PUSH
19104: LD_INT 1
19106: PUSH
19107: LD_INT 1
19109: NEG
19110: PUSH
19111: EMPTY
19112: LIST
19113: LIST
19114: PUSH
19115: LD_INT 2
19117: PUSH
19118: LD_INT 0
19120: PUSH
19121: EMPTY
19122: LIST
19123: LIST
19124: PUSH
19125: LD_INT 2
19127: PUSH
19128: LD_INT 1
19130: PUSH
19131: EMPTY
19132: LIST
19133: LIST
19134: PUSH
19135: LD_INT 2
19137: PUSH
19138: LD_INT 2
19140: PUSH
19141: EMPTY
19142: LIST
19143: LIST
19144: PUSH
19145: LD_INT 1
19147: PUSH
19148: LD_INT 2
19150: PUSH
19151: EMPTY
19152: LIST
19153: LIST
19154: PUSH
19155: LD_INT 0
19157: PUSH
19158: LD_INT 2
19160: PUSH
19161: EMPTY
19162: LIST
19163: LIST
19164: PUSH
19165: LD_INT 1
19167: NEG
19168: PUSH
19169: LD_INT 1
19171: PUSH
19172: EMPTY
19173: LIST
19174: LIST
19175: PUSH
19176: LD_INT 2
19178: NEG
19179: PUSH
19180: LD_INT 0
19182: PUSH
19183: EMPTY
19184: LIST
19185: LIST
19186: PUSH
19187: LD_INT 2
19189: NEG
19190: PUSH
19191: LD_INT 1
19193: NEG
19194: PUSH
19195: EMPTY
19196: LIST
19197: LIST
19198: PUSH
19199: LD_INT 2
19201: NEG
19202: PUSH
19203: LD_INT 2
19205: NEG
19206: PUSH
19207: EMPTY
19208: LIST
19209: LIST
19210: PUSH
19211: EMPTY
19212: LIST
19213: LIST
19214: LIST
19215: LIST
19216: LIST
19217: LIST
19218: LIST
19219: LIST
19220: LIST
19221: LIST
19222: LIST
19223: LIST
19224: LIST
19225: LIST
19226: LIST
19227: LIST
19228: LIST
19229: LIST
19230: LIST
19231: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19232: LD_ADDR_VAR 0 18
19236: PUSH
19237: LD_INT 0
19239: PUSH
19240: LD_INT 0
19242: PUSH
19243: EMPTY
19244: LIST
19245: LIST
19246: PUSH
19247: LD_INT 0
19249: PUSH
19250: LD_INT 1
19252: NEG
19253: PUSH
19254: EMPTY
19255: LIST
19256: LIST
19257: PUSH
19258: LD_INT 1
19260: PUSH
19261: LD_INT 0
19263: PUSH
19264: EMPTY
19265: LIST
19266: LIST
19267: PUSH
19268: LD_INT 1
19270: PUSH
19271: LD_INT 1
19273: PUSH
19274: EMPTY
19275: LIST
19276: LIST
19277: PUSH
19278: LD_INT 0
19280: PUSH
19281: LD_INT 1
19283: PUSH
19284: EMPTY
19285: LIST
19286: LIST
19287: PUSH
19288: LD_INT 1
19290: NEG
19291: PUSH
19292: LD_INT 0
19294: PUSH
19295: EMPTY
19296: LIST
19297: LIST
19298: PUSH
19299: LD_INT 1
19301: NEG
19302: PUSH
19303: LD_INT 1
19305: NEG
19306: PUSH
19307: EMPTY
19308: LIST
19309: LIST
19310: PUSH
19311: LD_INT 1
19313: NEG
19314: PUSH
19315: LD_INT 2
19317: NEG
19318: PUSH
19319: EMPTY
19320: LIST
19321: LIST
19322: PUSH
19323: LD_INT 0
19325: PUSH
19326: LD_INT 2
19328: NEG
19329: PUSH
19330: EMPTY
19331: LIST
19332: LIST
19333: PUSH
19334: LD_INT 1
19336: PUSH
19337: LD_INT 1
19339: NEG
19340: PUSH
19341: EMPTY
19342: LIST
19343: LIST
19344: PUSH
19345: LD_INT 2
19347: PUSH
19348: LD_INT 0
19350: PUSH
19351: EMPTY
19352: LIST
19353: LIST
19354: PUSH
19355: LD_INT 2
19357: PUSH
19358: LD_INT 1
19360: PUSH
19361: EMPTY
19362: LIST
19363: LIST
19364: PUSH
19365: LD_INT 2
19367: PUSH
19368: LD_INT 2
19370: PUSH
19371: EMPTY
19372: LIST
19373: LIST
19374: PUSH
19375: LD_INT 1
19377: PUSH
19378: LD_INT 2
19380: PUSH
19381: EMPTY
19382: LIST
19383: LIST
19384: PUSH
19385: LD_INT 0
19387: PUSH
19388: LD_INT 2
19390: PUSH
19391: EMPTY
19392: LIST
19393: LIST
19394: PUSH
19395: LD_INT 1
19397: NEG
19398: PUSH
19399: LD_INT 1
19401: PUSH
19402: EMPTY
19403: LIST
19404: LIST
19405: PUSH
19406: LD_INT 2
19408: NEG
19409: PUSH
19410: LD_INT 0
19412: PUSH
19413: EMPTY
19414: LIST
19415: LIST
19416: PUSH
19417: LD_INT 2
19419: NEG
19420: PUSH
19421: LD_INT 1
19423: NEG
19424: PUSH
19425: EMPTY
19426: LIST
19427: LIST
19428: PUSH
19429: LD_INT 2
19431: NEG
19432: PUSH
19433: LD_INT 2
19435: NEG
19436: PUSH
19437: EMPTY
19438: LIST
19439: LIST
19440: PUSH
19441: EMPTY
19442: LIST
19443: LIST
19444: LIST
19445: LIST
19446: LIST
19447: LIST
19448: LIST
19449: LIST
19450: LIST
19451: LIST
19452: LIST
19453: LIST
19454: LIST
19455: LIST
19456: LIST
19457: LIST
19458: LIST
19459: LIST
19460: LIST
19461: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19462: LD_ADDR_VAR 0 19
19466: PUSH
19467: LD_INT 0
19469: PUSH
19470: LD_INT 0
19472: PUSH
19473: EMPTY
19474: LIST
19475: LIST
19476: PUSH
19477: LD_INT 0
19479: PUSH
19480: LD_INT 1
19482: NEG
19483: PUSH
19484: EMPTY
19485: LIST
19486: LIST
19487: PUSH
19488: LD_INT 1
19490: PUSH
19491: LD_INT 0
19493: PUSH
19494: EMPTY
19495: LIST
19496: LIST
19497: PUSH
19498: LD_INT 1
19500: PUSH
19501: LD_INT 1
19503: PUSH
19504: EMPTY
19505: LIST
19506: LIST
19507: PUSH
19508: LD_INT 0
19510: PUSH
19511: LD_INT 1
19513: PUSH
19514: EMPTY
19515: LIST
19516: LIST
19517: PUSH
19518: LD_INT 1
19520: NEG
19521: PUSH
19522: LD_INT 0
19524: PUSH
19525: EMPTY
19526: LIST
19527: LIST
19528: PUSH
19529: LD_INT 1
19531: NEG
19532: PUSH
19533: LD_INT 1
19535: NEG
19536: PUSH
19537: EMPTY
19538: LIST
19539: LIST
19540: PUSH
19541: LD_INT 1
19543: NEG
19544: PUSH
19545: LD_INT 2
19547: NEG
19548: PUSH
19549: EMPTY
19550: LIST
19551: LIST
19552: PUSH
19553: LD_INT 0
19555: PUSH
19556: LD_INT 2
19558: NEG
19559: PUSH
19560: EMPTY
19561: LIST
19562: LIST
19563: PUSH
19564: LD_INT 1
19566: PUSH
19567: LD_INT 1
19569: NEG
19570: PUSH
19571: EMPTY
19572: LIST
19573: LIST
19574: PUSH
19575: LD_INT 2
19577: PUSH
19578: LD_INT 0
19580: PUSH
19581: EMPTY
19582: LIST
19583: LIST
19584: PUSH
19585: LD_INT 2
19587: PUSH
19588: LD_INT 1
19590: PUSH
19591: EMPTY
19592: LIST
19593: LIST
19594: PUSH
19595: LD_INT 2
19597: PUSH
19598: LD_INT 2
19600: PUSH
19601: EMPTY
19602: LIST
19603: LIST
19604: PUSH
19605: LD_INT 1
19607: PUSH
19608: LD_INT 2
19610: PUSH
19611: EMPTY
19612: LIST
19613: LIST
19614: PUSH
19615: LD_INT 0
19617: PUSH
19618: LD_INT 2
19620: PUSH
19621: EMPTY
19622: LIST
19623: LIST
19624: PUSH
19625: LD_INT 1
19627: NEG
19628: PUSH
19629: LD_INT 1
19631: PUSH
19632: EMPTY
19633: LIST
19634: LIST
19635: PUSH
19636: LD_INT 2
19638: NEG
19639: PUSH
19640: LD_INT 0
19642: PUSH
19643: EMPTY
19644: LIST
19645: LIST
19646: PUSH
19647: LD_INT 2
19649: NEG
19650: PUSH
19651: LD_INT 1
19653: NEG
19654: PUSH
19655: EMPTY
19656: LIST
19657: LIST
19658: PUSH
19659: LD_INT 2
19661: NEG
19662: PUSH
19663: LD_INT 2
19665: NEG
19666: PUSH
19667: EMPTY
19668: LIST
19669: LIST
19670: PUSH
19671: EMPTY
19672: LIST
19673: LIST
19674: LIST
19675: LIST
19676: LIST
19677: LIST
19678: LIST
19679: LIST
19680: LIST
19681: LIST
19682: LIST
19683: LIST
19684: LIST
19685: LIST
19686: LIST
19687: LIST
19688: LIST
19689: LIST
19690: LIST
19691: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19692: LD_ADDR_VAR 0 20
19696: PUSH
19697: LD_INT 0
19699: PUSH
19700: LD_INT 0
19702: PUSH
19703: EMPTY
19704: LIST
19705: LIST
19706: PUSH
19707: LD_INT 0
19709: PUSH
19710: LD_INT 1
19712: NEG
19713: PUSH
19714: EMPTY
19715: LIST
19716: LIST
19717: PUSH
19718: LD_INT 1
19720: PUSH
19721: LD_INT 0
19723: PUSH
19724: EMPTY
19725: LIST
19726: LIST
19727: PUSH
19728: LD_INT 1
19730: PUSH
19731: LD_INT 1
19733: PUSH
19734: EMPTY
19735: LIST
19736: LIST
19737: PUSH
19738: LD_INT 0
19740: PUSH
19741: LD_INT 1
19743: PUSH
19744: EMPTY
19745: LIST
19746: LIST
19747: PUSH
19748: LD_INT 1
19750: NEG
19751: PUSH
19752: LD_INT 0
19754: PUSH
19755: EMPTY
19756: LIST
19757: LIST
19758: PUSH
19759: LD_INT 1
19761: NEG
19762: PUSH
19763: LD_INT 1
19765: NEG
19766: PUSH
19767: EMPTY
19768: LIST
19769: LIST
19770: PUSH
19771: LD_INT 1
19773: NEG
19774: PUSH
19775: LD_INT 2
19777: NEG
19778: PUSH
19779: EMPTY
19780: LIST
19781: LIST
19782: PUSH
19783: LD_INT 0
19785: PUSH
19786: LD_INT 2
19788: NEG
19789: PUSH
19790: EMPTY
19791: LIST
19792: LIST
19793: PUSH
19794: LD_INT 1
19796: PUSH
19797: LD_INT 1
19799: NEG
19800: PUSH
19801: EMPTY
19802: LIST
19803: LIST
19804: PUSH
19805: LD_INT 2
19807: PUSH
19808: LD_INT 0
19810: PUSH
19811: EMPTY
19812: LIST
19813: LIST
19814: PUSH
19815: LD_INT 2
19817: PUSH
19818: LD_INT 1
19820: PUSH
19821: EMPTY
19822: LIST
19823: LIST
19824: PUSH
19825: LD_INT 2
19827: PUSH
19828: LD_INT 2
19830: PUSH
19831: EMPTY
19832: LIST
19833: LIST
19834: PUSH
19835: LD_INT 1
19837: PUSH
19838: LD_INT 2
19840: PUSH
19841: EMPTY
19842: LIST
19843: LIST
19844: PUSH
19845: LD_INT 0
19847: PUSH
19848: LD_INT 2
19850: PUSH
19851: EMPTY
19852: LIST
19853: LIST
19854: PUSH
19855: LD_INT 1
19857: NEG
19858: PUSH
19859: LD_INT 1
19861: PUSH
19862: EMPTY
19863: LIST
19864: LIST
19865: PUSH
19866: LD_INT 2
19868: NEG
19869: PUSH
19870: LD_INT 0
19872: PUSH
19873: EMPTY
19874: LIST
19875: LIST
19876: PUSH
19877: LD_INT 2
19879: NEG
19880: PUSH
19881: LD_INT 1
19883: NEG
19884: PUSH
19885: EMPTY
19886: LIST
19887: LIST
19888: PUSH
19889: LD_INT 2
19891: NEG
19892: PUSH
19893: LD_INT 2
19895: NEG
19896: PUSH
19897: EMPTY
19898: LIST
19899: LIST
19900: PUSH
19901: EMPTY
19902: LIST
19903: LIST
19904: LIST
19905: LIST
19906: LIST
19907: LIST
19908: LIST
19909: LIST
19910: LIST
19911: LIST
19912: LIST
19913: LIST
19914: LIST
19915: LIST
19916: LIST
19917: LIST
19918: LIST
19919: LIST
19920: LIST
19921: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19922: LD_ADDR_VAR 0 21
19926: PUSH
19927: LD_INT 0
19929: PUSH
19930: LD_INT 0
19932: PUSH
19933: EMPTY
19934: LIST
19935: LIST
19936: PUSH
19937: LD_INT 0
19939: PUSH
19940: LD_INT 1
19942: NEG
19943: PUSH
19944: EMPTY
19945: LIST
19946: LIST
19947: PUSH
19948: LD_INT 1
19950: PUSH
19951: LD_INT 0
19953: PUSH
19954: EMPTY
19955: LIST
19956: LIST
19957: PUSH
19958: LD_INT 1
19960: PUSH
19961: LD_INT 1
19963: PUSH
19964: EMPTY
19965: LIST
19966: LIST
19967: PUSH
19968: LD_INT 0
19970: PUSH
19971: LD_INT 1
19973: PUSH
19974: EMPTY
19975: LIST
19976: LIST
19977: PUSH
19978: LD_INT 1
19980: NEG
19981: PUSH
19982: LD_INT 0
19984: PUSH
19985: EMPTY
19986: LIST
19987: LIST
19988: PUSH
19989: LD_INT 1
19991: NEG
19992: PUSH
19993: LD_INT 1
19995: NEG
19996: PUSH
19997: EMPTY
19998: LIST
19999: LIST
20000: PUSH
20001: LD_INT 1
20003: NEG
20004: PUSH
20005: LD_INT 2
20007: NEG
20008: PUSH
20009: EMPTY
20010: LIST
20011: LIST
20012: PUSH
20013: LD_INT 0
20015: PUSH
20016: LD_INT 2
20018: NEG
20019: PUSH
20020: EMPTY
20021: LIST
20022: LIST
20023: PUSH
20024: LD_INT 1
20026: PUSH
20027: LD_INT 1
20029: NEG
20030: PUSH
20031: EMPTY
20032: LIST
20033: LIST
20034: PUSH
20035: LD_INT 2
20037: PUSH
20038: LD_INT 0
20040: PUSH
20041: EMPTY
20042: LIST
20043: LIST
20044: PUSH
20045: LD_INT 2
20047: PUSH
20048: LD_INT 1
20050: PUSH
20051: EMPTY
20052: LIST
20053: LIST
20054: PUSH
20055: LD_INT 2
20057: PUSH
20058: LD_INT 2
20060: PUSH
20061: EMPTY
20062: LIST
20063: LIST
20064: PUSH
20065: LD_INT 1
20067: PUSH
20068: LD_INT 2
20070: PUSH
20071: EMPTY
20072: LIST
20073: LIST
20074: PUSH
20075: LD_INT 0
20077: PUSH
20078: LD_INT 2
20080: PUSH
20081: EMPTY
20082: LIST
20083: LIST
20084: PUSH
20085: LD_INT 1
20087: NEG
20088: PUSH
20089: LD_INT 1
20091: PUSH
20092: EMPTY
20093: LIST
20094: LIST
20095: PUSH
20096: LD_INT 2
20098: NEG
20099: PUSH
20100: LD_INT 0
20102: PUSH
20103: EMPTY
20104: LIST
20105: LIST
20106: PUSH
20107: LD_INT 2
20109: NEG
20110: PUSH
20111: LD_INT 1
20113: NEG
20114: PUSH
20115: EMPTY
20116: LIST
20117: LIST
20118: PUSH
20119: LD_INT 2
20121: NEG
20122: PUSH
20123: LD_INT 2
20125: NEG
20126: PUSH
20127: EMPTY
20128: LIST
20129: LIST
20130: PUSH
20131: EMPTY
20132: LIST
20133: LIST
20134: LIST
20135: LIST
20136: LIST
20137: LIST
20138: LIST
20139: LIST
20140: LIST
20141: LIST
20142: LIST
20143: LIST
20144: LIST
20145: LIST
20146: LIST
20147: LIST
20148: LIST
20149: LIST
20150: LIST
20151: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20152: LD_ADDR_VAR 0 22
20156: PUSH
20157: LD_INT 0
20159: PUSH
20160: LD_INT 0
20162: PUSH
20163: EMPTY
20164: LIST
20165: LIST
20166: PUSH
20167: LD_INT 0
20169: PUSH
20170: LD_INT 1
20172: NEG
20173: PUSH
20174: EMPTY
20175: LIST
20176: LIST
20177: PUSH
20178: LD_INT 1
20180: PUSH
20181: LD_INT 0
20183: PUSH
20184: EMPTY
20185: LIST
20186: LIST
20187: PUSH
20188: LD_INT 1
20190: PUSH
20191: LD_INT 1
20193: PUSH
20194: EMPTY
20195: LIST
20196: LIST
20197: PUSH
20198: LD_INT 0
20200: PUSH
20201: LD_INT 1
20203: PUSH
20204: EMPTY
20205: LIST
20206: LIST
20207: PUSH
20208: LD_INT 1
20210: NEG
20211: PUSH
20212: LD_INT 0
20214: PUSH
20215: EMPTY
20216: LIST
20217: LIST
20218: PUSH
20219: LD_INT 1
20221: NEG
20222: PUSH
20223: LD_INT 1
20225: NEG
20226: PUSH
20227: EMPTY
20228: LIST
20229: LIST
20230: PUSH
20231: LD_INT 1
20233: NEG
20234: PUSH
20235: LD_INT 2
20237: NEG
20238: PUSH
20239: EMPTY
20240: LIST
20241: LIST
20242: PUSH
20243: LD_INT 0
20245: PUSH
20246: LD_INT 2
20248: NEG
20249: PUSH
20250: EMPTY
20251: LIST
20252: LIST
20253: PUSH
20254: LD_INT 1
20256: PUSH
20257: LD_INT 1
20259: NEG
20260: PUSH
20261: EMPTY
20262: LIST
20263: LIST
20264: PUSH
20265: LD_INT 2
20267: PUSH
20268: LD_INT 0
20270: PUSH
20271: EMPTY
20272: LIST
20273: LIST
20274: PUSH
20275: LD_INT 2
20277: PUSH
20278: LD_INT 1
20280: PUSH
20281: EMPTY
20282: LIST
20283: LIST
20284: PUSH
20285: LD_INT 2
20287: PUSH
20288: LD_INT 2
20290: PUSH
20291: EMPTY
20292: LIST
20293: LIST
20294: PUSH
20295: LD_INT 1
20297: PUSH
20298: LD_INT 2
20300: PUSH
20301: EMPTY
20302: LIST
20303: LIST
20304: PUSH
20305: LD_INT 0
20307: PUSH
20308: LD_INT 2
20310: PUSH
20311: EMPTY
20312: LIST
20313: LIST
20314: PUSH
20315: LD_INT 1
20317: NEG
20318: PUSH
20319: LD_INT 1
20321: PUSH
20322: EMPTY
20323: LIST
20324: LIST
20325: PUSH
20326: LD_INT 2
20328: NEG
20329: PUSH
20330: LD_INT 0
20332: PUSH
20333: EMPTY
20334: LIST
20335: LIST
20336: PUSH
20337: LD_INT 2
20339: NEG
20340: PUSH
20341: LD_INT 1
20343: NEG
20344: PUSH
20345: EMPTY
20346: LIST
20347: LIST
20348: PUSH
20349: LD_INT 2
20351: NEG
20352: PUSH
20353: LD_INT 2
20355: NEG
20356: PUSH
20357: EMPTY
20358: LIST
20359: LIST
20360: PUSH
20361: EMPTY
20362: LIST
20363: LIST
20364: LIST
20365: LIST
20366: LIST
20367: LIST
20368: LIST
20369: LIST
20370: LIST
20371: LIST
20372: LIST
20373: LIST
20374: LIST
20375: LIST
20376: LIST
20377: LIST
20378: LIST
20379: LIST
20380: LIST
20381: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
20382: LD_ADDR_VAR 0 23
20386: PUSH
20387: LD_INT 0
20389: PUSH
20390: LD_INT 0
20392: PUSH
20393: EMPTY
20394: LIST
20395: LIST
20396: PUSH
20397: LD_INT 0
20399: PUSH
20400: LD_INT 1
20402: NEG
20403: PUSH
20404: EMPTY
20405: LIST
20406: LIST
20407: PUSH
20408: LD_INT 1
20410: PUSH
20411: LD_INT 0
20413: PUSH
20414: EMPTY
20415: LIST
20416: LIST
20417: PUSH
20418: LD_INT 1
20420: PUSH
20421: LD_INT 1
20423: PUSH
20424: EMPTY
20425: LIST
20426: LIST
20427: PUSH
20428: LD_INT 0
20430: PUSH
20431: LD_INT 1
20433: PUSH
20434: EMPTY
20435: LIST
20436: LIST
20437: PUSH
20438: LD_INT 1
20440: NEG
20441: PUSH
20442: LD_INT 0
20444: PUSH
20445: EMPTY
20446: LIST
20447: LIST
20448: PUSH
20449: LD_INT 1
20451: NEG
20452: PUSH
20453: LD_INT 1
20455: NEG
20456: PUSH
20457: EMPTY
20458: LIST
20459: LIST
20460: PUSH
20461: LD_INT 1
20463: NEG
20464: PUSH
20465: LD_INT 2
20467: NEG
20468: PUSH
20469: EMPTY
20470: LIST
20471: LIST
20472: PUSH
20473: LD_INT 0
20475: PUSH
20476: LD_INT 2
20478: NEG
20479: PUSH
20480: EMPTY
20481: LIST
20482: LIST
20483: PUSH
20484: LD_INT 1
20486: PUSH
20487: LD_INT 1
20489: NEG
20490: PUSH
20491: EMPTY
20492: LIST
20493: LIST
20494: PUSH
20495: LD_INT 2
20497: PUSH
20498: LD_INT 0
20500: PUSH
20501: EMPTY
20502: LIST
20503: LIST
20504: PUSH
20505: LD_INT 2
20507: PUSH
20508: LD_INT 1
20510: PUSH
20511: EMPTY
20512: LIST
20513: LIST
20514: PUSH
20515: LD_INT 2
20517: PUSH
20518: LD_INT 2
20520: PUSH
20521: EMPTY
20522: LIST
20523: LIST
20524: PUSH
20525: LD_INT 1
20527: PUSH
20528: LD_INT 2
20530: PUSH
20531: EMPTY
20532: LIST
20533: LIST
20534: PUSH
20535: LD_INT 0
20537: PUSH
20538: LD_INT 2
20540: PUSH
20541: EMPTY
20542: LIST
20543: LIST
20544: PUSH
20545: LD_INT 1
20547: NEG
20548: PUSH
20549: LD_INT 1
20551: PUSH
20552: EMPTY
20553: LIST
20554: LIST
20555: PUSH
20556: LD_INT 2
20558: NEG
20559: PUSH
20560: LD_INT 0
20562: PUSH
20563: EMPTY
20564: LIST
20565: LIST
20566: PUSH
20567: LD_INT 2
20569: NEG
20570: PUSH
20571: LD_INT 1
20573: NEG
20574: PUSH
20575: EMPTY
20576: LIST
20577: LIST
20578: PUSH
20579: LD_INT 2
20581: NEG
20582: PUSH
20583: LD_INT 2
20585: NEG
20586: PUSH
20587: EMPTY
20588: LIST
20589: LIST
20590: PUSH
20591: LD_INT 2
20593: NEG
20594: PUSH
20595: LD_INT 3
20597: NEG
20598: PUSH
20599: EMPTY
20600: LIST
20601: LIST
20602: PUSH
20603: LD_INT 1
20605: NEG
20606: PUSH
20607: LD_INT 3
20609: NEG
20610: PUSH
20611: EMPTY
20612: LIST
20613: LIST
20614: PUSH
20615: LD_INT 1
20617: PUSH
20618: LD_INT 2
20620: NEG
20621: PUSH
20622: EMPTY
20623: LIST
20624: LIST
20625: PUSH
20626: LD_INT 2
20628: PUSH
20629: LD_INT 1
20631: NEG
20632: PUSH
20633: EMPTY
20634: LIST
20635: LIST
20636: PUSH
20637: EMPTY
20638: LIST
20639: LIST
20640: LIST
20641: LIST
20642: LIST
20643: LIST
20644: LIST
20645: LIST
20646: LIST
20647: LIST
20648: LIST
20649: LIST
20650: LIST
20651: LIST
20652: LIST
20653: LIST
20654: LIST
20655: LIST
20656: LIST
20657: LIST
20658: LIST
20659: LIST
20660: LIST
20661: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
20662: LD_ADDR_VAR 0 24
20666: PUSH
20667: LD_INT 0
20669: PUSH
20670: LD_INT 0
20672: PUSH
20673: EMPTY
20674: LIST
20675: LIST
20676: PUSH
20677: LD_INT 0
20679: PUSH
20680: LD_INT 1
20682: NEG
20683: PUSH
20684: EMPTY
20685: LIST
20686: LIST
20687: PUSH
20688: LD_INT 1
20690: PUSH
20691: LD_INT 0
20693: PUSH
20694: EMPTY
20695: LIST
20696: LIST
20697: PUSH
20698: LD_INT 1
20700: PUSH
20701: LD_INT 1
20703: PUSH
20704: EMPTY
20705: LIST
20706: LIST
20707: PUSH
20708: LD_INT 0
20710: PUSH
20711: LD_INT 1
20713: PUSH
20714: EMPTY
20715: LIST
20716: LIST
20717: PUSH
20718: LD_INT 1
20720: NEG
20721: PUSH
20722: LD_INT 0
20724: PUSH
20725: EMPTY
20726: LIST
20727: LIST
20728: PUSH
20729: LD_INT 1
20731: NEG
20732: PUSH
20733: LD_INT 1
20735: NEG
20736: PUSH
20737: EMPTY
20738: LIST
20739: LIST
20740: PUSH
20741: LD_INT 1
20743: NEG
20744: PUSH
20745: LD_INT 2
20747: NEG
20748: PUSH
20749: EMPTY
20750: LIST
20751: LIST
20752: PUSH
20753: LD_INT 0
20755: PUSH
20756: LD_INT 2
20758: NEG
20759: PUSH
20760: EMPTY
20761: LIST
20762: LIST
20763: PUSH
20764: LD_INT 1
20766: PUSH
20767: LD_INT 1
20769: NEG
20770: PUSH
20771: EMPTY
20772: LIST
20773: LIST
20774: PUSH
20775: LD_INT 2
20777: PUSH
20778: LD_INT 0
20780: PUSH
20781: EMPTY
20782: LIST
20783: LIST
20784: PUSH
20785: LD_INT 2
20787: PUSH
20788: LD_INT 1
20790: PUSH
20791: EMPTY
20792: LIST
20793: LIST
20794: PUSH
20795: LD_INT 2
20797: PUSH
20798: LD_INT 2
20800: PUSH
20801: EMPTY
20802: LIST
20803: LIST
20804: PUSH
20805: LD_INT 1
20807: PUSH
20808: LD_INT 2
20810: PUSH
20811: EMPTY
20812: LIST
20813: LIST
20814: PUSH
20815: LD_INT 0
20817: PUSH
20818: LD_INT 2
20820: PUSH
20821: EMPTY
20822: LIST
20823: LIST
20824: PUSH
20825: LD_INT 1
20827: NEG
20828: PUSH
20829: LD_INT 1
20831: PUSH
20832: EMPTY
20833: LIST
20834: LIST
20835: PUSH
20836: LD_INT 2
20838: NEG
20839: PUSH
20840: LD_INT 0
20842: PUSH
20843: EMPTY
20844: LIST
20845: LIST
20846: PUSH
20847: LD_INT 2
20849: NEG
20850: PUSH
20851: LD_INT 1
20853: NEG
20854: PUSH
20855: EMPTY
20856: LIST
20857: LIST
20858: PUSH
20859: LD_INT 2
20861: NEG
20862: PUSH
20863: LD_INT 2
20865: NEG
20866: PUSH
20867: EMPTY
20868: LIST
20869: LIST
20870: PUSH
20871: LD_INT 1
20873: PUSH
20874: LD_INT 2
20876: NEG
20877: PUSH
20878: EMPTY
20879: LIST
20880: LIST
20881: PUSH
20882: LD_INT 2
20884: PUSH
20885: LD_INT 1
20887: NEG
20888: PUSH
20889: EMPTY
20890: LIST
20891: LIST
20892: PUSH
20893: LD_INT 3
20895: PUSH
20896: LD_INT 1
20898: PUSH
20899: EMPTY
20900: LIST
20901: LIST
20902: PUSH
20903: LD_INT 3
20905: PUSH
20906: LD_INT 2
20908: PUSH
20909: EMPTY
20910: LIST
20911: LIST
20912: PUSH
20913: EMPTY
20914: LIST
20915: LIST
20916: LIST
20917: LIST
20918: LIST
20919: LIST
20920: LIST
20921: LIST
20922: LIST
20923: LIST
20924: LIST
20925: LIST
20926: LIST
20927: LIST
20928: LIST
20929: LIST
20930: LIST
20931: LIST
20932: LIST
20933: LIST
20934: LIST
20935: LIST
20936: LIST
20937: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
20938: LD_ADDR_VAR 0 25
20942: PUSH
20943: LD_INT 0
20945: PUSH
20946: LD_INT 0
20948: PUSH
20949: EMPTY
20950: LIST
20951: LIST
20952: PUSH
20953: LD_INT 0
20955: PUSH
20956: LD_INT 1
20958: NEG
20959: PUSH
20960: EMPTY
20961: LIST
20962: LIST
20963: PUSH
20964: LD_INT 1
20966: PUSH
20967: LD_INT 0
20969: PUSH
20970: EMPTY
20971: LIST
20972: LIST
20973: PUSH
20974: LD_INT 1
20976: PUSH
20977: LD_INT 1
20979: PUSH
20980: EMPTY
20981: LIST
20982: LIST
20983: PUSH
20984: LD_INT 0
20986: PUSH
20987: LD_INT 1
20989: PUSH
20990: EMPTY
20991: LIST
20992: LIST
20993: PUSH
20994: LD_INT 1
20996: NEG
20997: PUSH
20998: LD_INT 0
21000: PUSH
21001: EMPTY
21002: LIST
21003: LIST
21004: PUSH
21005: LD_INT 1
21007: NEG
21008: PUSH
21009: LD_INT 1
21011: NEG
21012: PUSH
21013: EMPTY
21014: LIST
21015: LIST
21016: PUSH
21017: LD_INT 1
21019: NEG
21020: PUSH
21021: LD_INT 2
21023: NEG
21024: PUSH
21025: EMPTY
21026: LIST
21027: LIST
21028: PUSH
21029: LD_INT 0
21031: PUSH
21032: LD_INT 2
21034: NEG
21035: PUSH
21036: EMPTY
21037: LIST
21038: LIST
21039: PUSH
21040: LD_INT 1
21042: PUSH
21043: LD_INT 1
21045: NEG
21046: PUSH
21047: EMPTY
21048: LIST
21049: LIST
21050: PUSH
21051: LD_INT 2
21053: PUSH
21054: LD_INT 0
21056: PUSH
21057: EMPTY
21058: LIST
21059: LIST
21060: PUSH
21061: LD_INT 2
21063: PUSH
21064: LD_INT 1
21066: PUSH
21067: EMPTY
21068: LIST
21069: LIST
21070: PUSH
21071: LD_INT 2
21073: PUSH
21074: LD_INT 2
21076: PUSH
21077: EMPTY
21078: LIST
21079: LIST
21080: PUSH
21081: LD_INT 1
21083: PUSH
21084: LD_INT 2
21086: PUSH
21087: EMPTY
21088: LIST
21089: LIST
21090: PUSH
21091: LD_INT 0
21093: PUSH
21094: LD_INT 2
21096: PUSH
21097: EMPTY
21098: LIST
21099: LIST
21100: PUSH
21101: LD_INT 1
21103: NEG
21104: PUSH
21105: LD_INT 1
21107: PUSH
21108: EMPTY
21109: LIST
21110: LIST
21111: PUSH
21112: LD_INT 2
21114: NEG
21115: PUSH
21116: LD_INT 0
21118: PUSH
21119: EMPTY
21120: LIST
21121: LIST
21122: PUSH
21123: LD_INT 2
21125: NEG
21126: PUSH
21127: LD_INT 1
21129: NEG
21130: PUSH
21131: EMPTY
21132: LIST
21133: LIST
21134: PUSH
21135: LD_INT 2
21137: NEG
21138: PUSH
21139: LD_INT 2
21141: NEG
21142: PUSH
21143: EMPTY
21144: LIST
21145: LIST
21146: PUSH
21147: LD_INT 3
21149: PUSH
21150: LD_INT 1
21152: PUSH
21153: EMPTY
21154: LIST
21155: LIST
21156: PUSH
21157: LD_INT 3
21159: PUSH
21160: LD_INT 2
21162: PUSH
21163: EMPTY
21164: LIST
21165: LIST
21166: PUSH
21167: LD_INT 2
21169: PUSH
21170: LD_INT 3
21172: PUSH
21173: EMPTY
21174: LIST
21175: LIST
21176: PUSH
21177: LD_INT 1
21179: PUSH
21180: LD_INT 3
21182: PUSH
21183: EMPTY
21184: LIST
21185: LIST
21186: PUSH
21187: EMPTY
21188: LIST
21189: LIST
21190: LIST
21191: LIST
21192: LIST
21193: LIST
21194: LIST
21195: LIST
21196: LIST
21197: LIST
21198: LIST
21199: LIST
21200: LIST
21201: LIST
21202: LIST
21203: LIST
21204: LIST
21205: LIST
21206: LIST
21207: LIST
21208: LIST
21209: LIST
21210: LIST
21211: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
21212: LD_ADDR_VAR 0 26
21216: PUSH
21217: LD_INT 0
21219: PUSH
21220: LD_INT 0
21222: PUSH
21223: EMPTY
21224: LIST
21225: LIST
21226: PUSH
21227: LD_INT 0
21229: PUSH
21230: LD_INT 1
21232: NEG
21233: PUSH
21234: EMPTY
21235: LIST
21236: LIST
21237: PUSH
21238: LD_INT 1
21240: PUSH
21241: LD_INT 0
21243: PUSH
21244: EMPTY
21245: LIST
21246: LIST
21247: PUSH
21248: LD_INT 1
21250: PUSH
21251: LD_INT 1
21253: PUSH
21254: EMPTY
21255: LIST
21256: LIST
21257: PUSH
21258: LD_INT 0
21260: PUSH
21261: LD_INT 1
21263: PUSH
21264: EMPTY
21265: LIST
21266: LIST
21267: PUSH
21268: LD_INT 1
21270: NEG
21271: PUSH
21272: LD_INT 0
21274: PUSH
21275: EMPTY
21276: LIST
21277: LIST
21278: PUSH
21279: LD_INT 1
21281: NEG
21282: PUSH
21283: LD_INT 1
21285: NEG
21286: PUSH
21287: EMPTY
21288: LIST
21289: LIST
21290: PUSH
21291: LD_INT 1
21293: NEG
21294: PUSH
21295: LD_INT 2
21297: NEG
21298: PUSH
21299: EMPTY
21300: LIST
21301: LIST
21302: PUSH
21303: LD_INT 0
21305: PUSH
21306: LD_INT 2
21308: NEG
21309: PUSH
21310: EMPTY
21311: LIST
21312: LIST
21313: PUSH
21314: LD_INT 1
21316: PUSH
21317: LD_INT 1
21319: NEG
21320: PUSH
21321: EMPTY
21322: LIST
21323: LIST
21324: PUSH
21325: LD_INT 2
21327: PUSH
21328: LD_INT 0
21330: PUSH
21331: EMPTY
21332: LIST
21333: LIST
21334: PUSH
21335: LD_INT 2
21337: PUSH
21338: LD_INT 1
21340: PUSH
21341: EMPTY
21342: LIST
21343: LIST
21344: PUSH
21345: LD_INT 2
21347: PUSH
21348: LD_INT 2
21350: PUSH
21351: EMPTY
21352: LIST
21353: LIST
21354: PUSH
21355: LD_INT 1
21357: PUSH
21358: LD_INT 2
21360: PUSH
21361: EMPTY
21362: LIST
21363: LIST
21364: PUSH
21365: LD_INT 0
21367: PUSH
21368: LD_INT 2
21370: PUSH
21371: EMPTY
21372: LIST
21373: LIST
21374: PUSH
21375: LD_INT 1
21377: NEG
21378: PUSH
21379: LD_INT 1
21381: PUSH
21382: EMPTY
21383: LIST
21384: LIST
21385: PUSH
21386: LD_INT 2
21388: NEG
21389: PUSH
21390: LD_INT 0
21392: PUSH
21393: EMPTY
21394: LIST
21395: LIST
21396: PUSH
21397: LD_INT 2
21399: NEG
21400: PUSH
21401: LD_INT 1
21403: NEG
21404: PUSH
21405: EMPTY
21406: LIST
21407: LIST
21408: PUSH
21409: LD_INT 2
21411: NEG
21412: PUSH
21413: LD_INT 2
21415: NEG
21416: PUSH
21417: EMPTY
21418: LIST
21419: LIST
21420: PUSH
21421: LD_INT 2
21423: PUSH
21424: LD_INT 3
21426: PUSH
21427: EMPTY
21428: LIST
21429: LIST
21430: PUSH
21431: LD_INT 1
21433: PUSH
21434: LD_INT 3
21436: PUSH
21437: EMPTY
21438: LIST
21439: LIST
21440: PUSH
21441: LD_INT 1
21443: NEG
21444: PUSH
21445: LD_INT 2
21447: PUSH
21448: EMPTY
21449: LIST
21450: LIST
21451: PUSH
21452: LD_INT 2
21454: NEG
21455: PUSH
21456: LD_INT 1
21458: PUSH
21459: EMPTY
21460: LIST
21461: LIST
21462: PUSH
21463: EMPTY
21464: LIST
21465: LIST
21466: LIST
21467: LIST
21468: LIST
21469: LIST
21470: LIST
21471: LIST
21472: LIST
21473: LIST
21474: LIST
21475: LIST
21476: LIST
21477: LIST
21478: LIST
21479: LIST
21480: LIST
21481: LIST
21482: LIST
21483: LIST
21484: LIST
21485: LIST
21486: LIST
21487: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21488: LD_ADDR_VAR 0 27
21492: PUSH
21493: LD_INT 0
21495: PUSH
21496: LD_INT 0
21498: PUSH
21499: EMPTY
21500: LIST
21501: LIST
21502: PUSH
21503: LD_INT 0
21505: PUSH
21506: LD_INT 1
21508: NEG
21509: PUSH
21510: EMPTY
21511: LIST
21512: LIST
21513: PUSH
21514: LD_INT 1
21516: PUSH
21517: LD_INT 0
21519: PUSH
21520: EMPTY
21521: LIST
21522: LIST
21523: PUSH
21524: LD_INT 1
21526: PUSH
21527: LD_INT 1
21529: PUSH
21530: EMPTY
21531: LIST
21532: LIST
21533: PUSH
21534: LD_INT 0
21536: PUSH
21537: LD_INT 1
21539: PUSH
21540: EMPTY
21541: LIST
21542: LIST
21543: PUSH
21544: LD_INT 1
21546: NEG
21547: PUSH
21548: LD_INT 0
21550: PUSH
21551: EMPTY
21552: LIST
21553: LIST
21554: PUSH
21555: LD_INT 1
21557: NEG
21558: PUSH
21559: LD_INT 1
21561: NEG
21562: PUSH
21563: EMPTY
21564: LIST
21565: LIST
21566: PUSH
21567: LD_INT 1
21569: NEG
21570: PUSH
21571: LD_INT 2
21573: NEG
21574: PUSH
21575: EMPTY
21576: LIST
21577: LIST
21578: PUSH
21579: LD_INT 0
21581: PUSH
21582: LD_INT 2
21584: NEG
21585: PUSH
21586: EMPTY
21587: LIST
21588: LIST
21589: PUSH
21590: LD_INT 1
21592: PUSH
21593: LD_INT 1
21595: NEG
21596: PUSH
21597: EMPTY
21598: LIST
21599: LIST
21600: PUSH
21601: LD_INT 2
21603: PUSH
21604: LD_INT 0
21606: PUSH
21607: EMPTY
21608: LIST
21609: LIST
21610: PUSH
21611: LD_INT 2
21613: PUSH
21614: LD_INT 1
21616: PUSH
21617: EMPTY
21618: LIST
21619: LIST
21620: PUSH
21621: LD_INT 2
21623: PUSH
21624: LD_INT 2
21626: PUSH
21627: EMPTY
21628: LIST
21629: LIST
21630: PUSH
21631: LD_INT 1
21633: PUSH
21634: LD_INT 2
21636: PUSH
21637: EMPTY
21638: LIST
21639: LIST
21640: PUSH
21641: LD_INT 0
21643: PUSH
21644: LD_INT 2
21646: PUSH
21647: EMPTY
21648: LIST
21649: LIST
21650: PUSH
21651: LD_INT 1
21653: NEG
21654: PUSH
21655: LD_INT 1
21657: PUSH
21658: EMPTY
21659: LIST
21660: LIST
21661: PUSH
21662: LD_INT 2
21664: NEG
21665: PUSH
21666: LD_INT 0
21668: PUSH
21669: EMPTY
21670: LIST
21671: LIST
21672: PUSH
21673: LD_INT 2
21675: NEG
21676: PUSH
21677: LD_INT 1
21679: NEG
21680: PUSH
21681: EMPTY
21682: LIST
21683: LIST
21684: PUSH
21685: LD_INT 2
21687: NEG
21688: PUSH
21689: LD_INT 2
21691: NEG
21692: PUSH
21693: EMPTY
21694: LIST
21695: LIST
21696: PUSH
21697: LD_INT 1
21699: NEG
21700: PUSH
21701: LD_INT 2
21703: PUSH
21704: EMPTY
21705: LIST
21706: LIST
21707: PUSH
21708: LD_INT 2
21710: NEG
21711: PUSH
21712: LD_INT 1
21714: PUSH
21715: EMPTY
21716: LIST
21717: LIST
21718: PUSH
21719: LD_INT 3
21721: NEG
21722: PUSH
21723: LD_INT 1
21725: NEG
21726: PUSH
21727: EMPTY
21728: LIST
21729: LIST
21730: PUSH
21731: LD_INT 3
21733: NEG
21734: PUSH
21735: LD_INT 2
21737: NEG
21738: PUSH
21739: EMPTY
21740: LIST
21741: LIST
21742: PUSH
21743: EMPTY
21744: LIST
21745: LIST
21746: LIST
21747: LIST
21748: LIST
21749: LIST
21750: LIST
21751: LIST
21752: LIST
21753: LIST
21754: LIST
21755: LIST
21756: LIST
21757: LIST
21758: LIST
21759: LIST
21760: LIST
21761: LIST
21762: LIST
21763: LIST
21764: LIST
21765: LIST
21766: LIST
21767: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21768: LD_ADDR_VAR 0 28
21772: PUSH
21773: LD_INT 0
21775: PUSH
21776: LD_INT 0
21778: PUSH
21779: EMPTY
21780: LIST
21781: LIST
21782: PUSH
21783: LD_INT 0
21785: PUSH
21786: LD_INT 1
21788: NEG
21789: PUSH
21790: EMPTY
21791: LIST
21792: LIST
21793: PUSH
21794: LD_INT 1
21796: PUSH
21797: LD_INT 0
21799: PUSH
21800: EMPTY
21801: LIST
21802: LIST
21803: PUSH
21804: LD_INT 1
21806: PUSH
21807: LD_INT 1
21809: PUSH
21810: EMPTY
21811: LIST
21812: LIST
21813: PUSH
21814: LD_INT 0
21816: PUSH
21817: LD_INT 1
21819: PUSH
21820: EMPTY
21821: LIST
21822: LIST
21823: PUSH
21824: LD_INT 1
21826: NEG
21827: PUSH
21828: LD_INT 0
21830: PUSH
21831: EMPTY
21832: LIST
21833: LIST
21834: PUSH
21835: LD_INT 1
21837: NEG
21838: PUSH
21839: LD_INT 1
21841: NEG
21842: PUSH
21843: EMPTY
21844: LIST
21845: LIST
21846: PUSH
21847: LD_INT 1
21849: NEG
21850: PUSH
21851: LD_INT 2
21853: NEG
21854: PUSH
21855: EMPTY
21856: LIST
21857: LIST
21858: PUSH
21859: LD_INT 0
21861: PUSH
21862: LD_INT 2
21864: NEG
21865: PUSH
21866: EMPTY
21867: LIST
21868: LIST
21869: PUSH
21870: LD_INT 1
21872: PUSH
21873: LD_INT 1
21875: NEG
21876: PUSH
21877: EMPTY
21878: LIST
21879: LIST
21880: PUSH
21881: LD_INT 2
21883: PUSH
21884: LD_INT 0
21886: PUSH
21887: EMPTY
21888: LIST
21889: LIST
21890: PUSH
21891: LD_INT 2
21893: PUSH
21894: LD_INT 1
21896: PUSH
21897: EMPTY
21898: LIST
21899: LIST
21900: PUSH
21901: LD_INT 2
21903: PUSH
21904: LD_INT 2
21906: PUSH
21907: EMPTY
21908: LIST
21909: LIST
21910: PUSH
21911: LD_INT 1
21913: PUSH
21914: LD_INT 2
21916: PUSH
21917: EMPTY
21918: LIST
21919: LIST
21920: PUSH
21921: LD_INT 0
21923: PUSH
21924: LD_INT 2
21926: PUSH
21927: EMPTY
21928: LIST
21929: LIST
21930: PUSH
21931: LD_INT 1
21933: NEG
21934: PUSH
21935: LD_INT 1
21937: PUSH
21938: EMPTY
21939: LIST
21940: LIST
21941: PUSH
21942: LD_INT 2
21944: NEG
21945: PUSH
21946: LD_INT 0
21948: PUSH
21949: EMPTY
21950: LIST
21951: LIST
21952: PUSH
21953: LD_INT 2
21955: NEG
21956: PUSH
21957: LD_INT 1
21959: NEG
21960: PUSH
21961: EMPTY
21962: LIST
21963: LIST
21964: PUSH
21965: LD_INT 2
21967: NEG
21968: PUSH
21969: LD_INT 2
21971: NEG
21972: PUSH
21973: EMPTY
21974: LIST
21975: LIST
21976: PUSH
21977: LD_INT 2
21979: NEG
21980: PUSH
21981: LD_INT 3
21983: NEG
21984: PUSH
21985: EMPTY
21986: LIST
21987: LIST
21988: PUSH
21989: LD_INT 1
21991: NEG
21992: PUSH
21993: LD_INT 3
21995: NEG
21996: PUSH
21997: EMPTY
21998: LIST
21999: LIST
22000: PUSH
22001: LD_INT 3
22003: NEG
22004: PUSH
22005: LD_INT 1
22007: NEG
22008: PUSH
22009: EMPTY
22010: LIST
22011: LIST
22012: PUSH
22013: LD_INT 3
22015: NEG
22016: PUSH
22017: LD_INT 2
22019: NEG
22020: PUSH
22021: EMPTY
22022: LIST
22023: LIST
22024: PUSH
22025: EMPTY
22026: LIST
22027: LIST
22028: LIST
22029: LIST
22030: LIST
22031: LIST
22032: LIST
22033: LIST
22034: LIST
22035: LIST
22036: LIST
22037: LIST
22038: LIST
22039: LIST
22040: LIST
22041: LIST
22042: LIST
22043: LIST
22044: LIST
22045: LIST
22046: LIST
22047: LIST
22048: LIST
22049: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22050: LD_ADDR_VAR 0 29
22054: PUSH
22055: LD_INT 0
22057: PUSH
22058: LD_INT 0
22060: PUSH
22061: EMPTY
22062: LIST
22063: LIST
22064: PUSH
22065: LD_INT 0
22067: PUSH
22068: LD_INT 1
22070: NEG
22071: PUSH
22072: EMPTY
22073: LIST
22074: LIST
22075: PUSH
22076: LD_INT 1
22078: PUSH
22079: LD_INT 0
22081: PUSH
22082: EMPTY
22083: LIST
22084: LIST
22085: PUSH
22086: LD_INT 1
22088: PUSH
22089: LD_INT 1
22091: PUSH
22092: EMPTY
22093: LIST
22094: LIST
22095: PUSH
22096: LD_INT 0
22098: PUSH
22099: LD_INT 1
22101: PUSH
22102: EMPTY
22103: LIST
22104: LIST
22105: PUSH
22106: LD_INT 1
22108: NEG
22109: PUSH
22110: LD_INT 0
22112: PUSH
22113: EMPTY
22114: LIST
22115: LIST
22116: PUSH
22117: LD_INT 1
22119: NEG
22120: PUSH
22121: LD_INT 1
22123: NEG
22124: PUSH
22125: EMPTY
22126: LIST
22127: LIST
22128: PUSH
22129: LD_INT 1
22131: NEG
22132: PUSH
22133: LD_INT 2
22135: NEG
22136: PUSH
22137: EMPTY
22138: LIST
22139: LIST
22140: PUSH
22141: LD_INT 0
22143: PUSH
22144: LD_INT 2
22146: NEG
22147: PUSH
22148: EMPTY
22149: LIST
22150: LIST
22151: PUSH
22152: LD_INT 1
22154: PUSH
22155: LD_INT 1
22157: NEG
22158: PUSH
22159: EMPTY
22160: LIST
22161: LIST
22162: PUSH
22163: LD_INT 2
22165: PUSH
22166: LD_INT 0
22168: PUSH
22169: EMPTY
22170: LIST
22171: LIST
22172: PUSH
22173: LD_INT 2
22175: PUSH
22176: LD_INT 1
22178: PUSH
22179: EMPTY
22180: LIST
22181: LIST
22182: PUSH
22183: LD_INT 1
22185: PUSH
22186: LD_INT 2
22188: PUSH
22189: EMPTY
22190: LIST
22191: LIST
22192: PUSH
22193: LD_INT 0
22195: PUSH
22196: LD_INT 2
22198: PUSH
22199: EMPTY
22200: LIST
22201: LIST
22202: PUSH
22203: LD_INT 1
22205: NEG
22206: PUSH
22207: LD_INT 1
22209: PUSH
22210: EMPTY
22211: LIST
22212: LIST
22213: PUSH
22214: LD_INT 2
22216: NEG
22217: PUSH
22218: LD_INT 1
22220: NEG
22221: PUSH
22222: EMPTY
22223: LIST
22224: LIST
22225: PUSH
22226: LD_INT 2
22228: NEG
22229: PUSH
22230: LD_INT 2
22232: NEG
22233: PUSH
22234: EMPTY
22235: LIST
22236: LIST
22237: PUSH
22238: LD_INT 2
22240: NEG
22241: PUSH
22242: LD_INT 3
22244: NEG
22245: PUSH
22246: EMPTY
22247: LIST
22248: LIST
22249: PUSH
22250: LD_INT 2
22252: PUSH
22253: LD_INT 1
22255: NEG
22256: PUSH
22257: EMPTY
22258: LIST
22259: LIST
22260: PUSH
22261: LD_INT 3
22263: PUSH
22264: LD_INT 1
22266: PUSH
22267: EMPTY
22268: LIST
22269: LIST
22270: PUSH
22271: LD_INT 1
22273: PUSH
22274: LD_INT 3
22276: PUSH
22277: EMPTY
22278: LIST
22279: LIST
22280: PUSH
22281: LD_INT 1
22283: NEG
22284: PUSH
22285: LD_INT 2
22287: PUSH
22288: EMPTY
22289: LIST
22290: LIST
22291: PUSH
22292: LD_INT 3
22294: NEG
22295: PUSH
22296: LD_INT 2
22298: NEG
22299: PUSH
22300: EMPTY
22301: LIST
22302: LIST
22303: PUSH
22304: EMPTY
22305: LIST
22306: LIST
22307: LIST
22308: LIST
22309: LIST
22310: LIST
22311: LIST
22312: LIST
22313: LIST
22314: LIST
22315: LIST
22316: LIST
22317: LIST
22318: LIST
22319: LIST
22320: LIST
22321: LIST
22322: LIST
22323: LIST
22324: LIST
22325: LIST
22326: LIST
22327: LIST
22328: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22329: LD_ADDR_VAR 0 30
22333: PUSH
22334: LD_INT 0
22336: PUSH
22337: LD_INT 0
22339: PUSH
22340: EMPTY
22341: LIST
22342: LIST
22343: PUSH
22344: LD_INT 0
22346: PUSH
22347: LD_INT 1
22349: NEG
22350: PUSH
22351: EMPTY
22352: LIST
22353: LIST
22354: PUSH
22355: LD_INT 1
22357: PUSH
22358: LD_INT 0
22360: PUSH
22361: EMPTY
22362: LIST
22363: LIST
22364: PUSH
22365: LD_INT 1
22367: PUSH
22368: LD_INT 1
22370: PUSH
22371: EMPTY
22372: LIST
22373: LIST
22374: PUSH
22375: LD_INT 0
22377: PUSH
22378: LD_INT 1
22380: PUSH
22381: EMPTY
22382: LIST
22383: LIST
22384: PUSH
22385: LD_INT 1
22387: NEG
22388: PUSH
22389: LD_INT 0
22391: PUSH
22392: EMPTY
22393: LIST
22394: LIST
22395: PUSH
22396: LD_INT 1
22398: NEG
22399: PUSH
22400: LD_INT 1
22402: NEG
22403: PUSH
22404: EMPTY
22405: LIST
22406: LIST
22407: PUSH
22408: LD_INT 1
22410: NEG
22411: PUSH
22412: LD_INT 2
22414: NEG
22415: PUSH
22416: EMPTY
22417: LIST
22418: LIST
22419: PUSH
22420: LD_INT 0
22422: PUSH
22423: LD_INT 2
22425: NEG
22426: PUSH
22427: EMPTY
22428: LIST
22429: LIST
22430: PUSH
22431: LD_INT 1
22433: PUSH
22434: LD_INT 1
22436: NEG
22437: PUSH
22438: EMPTY
22439: LIST
22440: LIST
22441: PUSH
22442: LD_INT 2
22444: PUSH
22445: LD_INT 0
22447: PUSH
22448: EMPTY
22449: LIST
22450: LIST
22451: PUSH
22452: LD_INT 2
22454: PUSH
22455: LD_INT 1
22457: PUSH
22458: EMPTY
22459: LIST
22460: LIST
22461: PUSH
22462: LD_INT 2
22464: PUSH
22465: LD_INT 2
22467: PUSH
22468: EMPTY
22469: LIST
22470: LIST
22471: PUSH
22472: LD_INT 1
22474: PUSH
22475: LD_INT 2
22477: PUSH
22478: EMPTY
22479: LIST
22480: LIST
22481: PUSH
22482: LD_INT 1
22484: NEG
22485: PUSH
22486: LD_INT 1
22488: PUSH
22489: EMPTY
22490: LIST
22491: LIST
22492: PUSH
22493: LD_INT 2
22495: NEG
22496: PUSH
22497: LD_INT 0
22499: PUSH
22500: EMPTY
22501: LIST
22502: LIST
22503: PUSH
22504: LD_INT 2
22506: NEG
22507: PUSH
22508: LD_INT 1
22510: NEG
22511: PUSH
22512: EMPTY
22513: LIST
22514: LIST
22515: PUSH
22516: LD_INT 1
22518: NEG
22519: PUSH
22520: LD_INT 3
22522: NEG
22523: PUSH
22524: EMPTY
22525: LIST
22526: LIST
22527: PUSH
22528: LD_INT 1
22530: PUSH
22531: LD_INT 2
22533: NEG
22534: PUSH
22535: EMPTY
22536: LIST
22537: LIST
22538: PUSH
22539: LD_INT 3
22541: PUSH
22542: LD_INT 2
22544: PUSH
22545: EMPTY
22546: LIST
22547: LIST
22548: PUSH
22549: LD_INT 2
22551: PUSH
22552: LD_INT 3
22554: PUSH
22555: EMPTY
22556: LIST
22557: LIST
22558: PUSH
22559: LD_INT 2
22561: NEG
22562: PUSH
22563: LD_INT 1
22565: PUSH
22566: EMPTY
22567: LIST
22568: LIST
22569: PUSH
22570: LD_INT 3
22572: NEG
22573: PUSH
22574: LD_INT 1
22576: NEG
22577: PUSH
22578: EMPTY
22579: LIST
22580: LIST
22581: PUSH
22582: EMPTY
22583: LIST
22584: LIST
22585: LIST
22586: LIST
22587: LIST
22588: LIST
22589: LIST
22590: LIST
22591: LIST
22592: LIST
22593: LIST
22594: LIST
22595: LIST
22596: LIST
22597: LIST
22598: LIST
22599: LIST
22600: LIST
22601: LIST
22602: LIST
22603: LIST
22604: LIST
22605: LIST
22606: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22607: LD_ADDR_VAR 0 31
22611: PUSH
22612: LD_INT 0
22614: PUSH
22615: LD_INT 0
22617: PUSH
22618: EMPTY
22619: LIST
22620: LIST
22621: PUSH
22622: LD_INT 0
22624: PUSH
22625: LD_INT 1
22627: NEG
22628: PUSH
22629: EMPTY
22630: LIST
22631: LIST
22632: PUSH
22633: LD_INT 1
22635: PUSH
22636: LD_INT 0
22638: PUSH
22639: EMPTY
22640: LIST
22641: LIST
22642: PUSH
22643: LD_INT 1
22645: PUSH
22646: LD_INT 1
22648: PUSH
22649: EMPTY
22650: LIST
22651: LIST
22652: PUSH
22653: LD_INT 0
22655: PUSH
22656: LD_INT 1
22658: PUSH
22659: EMPTY
22660: LIST
22661: LIST
22662: PUSH
22663: LD_INT 1
22665: NEG
22666: PUSH
22667: LD_INT 0
22669: PUSH
22670: EMPTY
22671: LIST
22672: LIST
22673: PUSH
22674: LD_INT 1
22676: NEG
22677: PUSH
22678: LD_INT 1
22680: NEG
22681: PUSH
22682: EMPTY
22683: LIST
22684: LIST
22685: PUSH
22686: LD_INT 1
22688: NEG
22689: PUSH
22690: LD_INT 2
22692: NEG
22693: PUSH
22694: EMPTY
22695: LIST
22696: LIST
22697: PUSH
22698: LD_INT 1
22700: PUSH
22701: LD_INT 1
22703: NEG
22704: PUSH
22705: EMPTY
22706: LIST
22707: LIST
22708: PUSH
22709: LD_INT 2
22711: PUSH
22712: LD_INT 0
22714: PUSH
22715: EMPTY
22716: LIST
22717: LIST
22718: PUSH
22719: LD_INT 2
22721: PUSH
22722: LD_INT 1
22724: PUSH
22725: EMPTY
22726: LIST
22727: LIST
22728: PUSH
22729: LD_INT 2
22731: PUSH
22732: LD_INT 2
22734: PUSH
22735: EMPTY
22736: LIST
22737: LIST
22738: PUSH
22739: LD_INT 1
22741: PUSH
22742: LD_INT 2
22744: PUSH
22745: EMPTY
22746: LIST
22747: LIST
22748: PUSH
22749: LD_INT 0
22751: PUSH
22752: LD_INT 2
22754: PUSH
22755: EMPTY
22756: LIST
22757: LIST
22758: PUSH
22759: LD_INT 1
22761: NEG
22762: PUSH
22763: LD_INT 1
22765: PUSH
22766: EMPTY
22767: LIST
22768: LIST
22769: PUSH
22770: LD_INT 2
22772: NEG
22773: PUSH
22774: LD_INT 1
22776: NEG
22777: PUSH
22778: EMPTY
22779: LIST
22780: LIST
22781: PUSH
22782: LD_INT 2
22784: NEG
22785: PUSH
22786: LD_INT 2
22788: NEG
22789: PUSH
22790: EMPTY
22791: LIST
22792: LIST
22793: PUSH
22794: LD_INT 2
22796: NEG
22797: PUSH
22798: LD_INT 3
22800: NEG
22801: PUSH
22802: EMPTY
22803: LIST
22804: LIST
22805: PUSH
22806: LD_INT 2
22808: PUSH
22809: LD_INT 1
22811: NEG
22812: PUSH
22813: EMPTY
22814: LIST
22815: LIST
22816: PUSH
22817: LD_INT 3
22819: PUSH
22820: LD_INT 1
22822: PUSH
22823: EMPTY
22824: LIST
22825: LIST
22826: PUSH
22827: LD_INT 1
22829: PUSH
22830: LD_INT 3
22832: PUSH
22833: EMPTY
22834: LIST
22835: LIST
22836: PUSH
22837: LD_INT 1
22839: NEG
22840: PUSH
22841: LD_INT 2
22843: PUSH
22844: EMPTY
22845: LIST
22846: LIST
22847: PUSH
22848: LD_INT 3
22850: NEG
22851: PUSH
22852: LD_INT 2
22854: NEG
22855: PUSH
22856: EMPTY
22857: LIST
22858: LIST
22859: PUSH
22860: EMPTY
22861: LIST
22862: LIST
22863: LIST
22864: LIST
22865: LIST
22866: LIST
22867: LIST
22868: LIST
22869: LIST
22870: LIST
22871: LIST
22872: LIST
22873: LIST
22874: LIST
22875: LIST
22876: LIST
22877: LIST
22878: LIST
22879: LIST
22880: LIST
22881: LIST
22882: LIST
22883: LIST
22884: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22885: LD_ADDR_VAR 0 32
22889: PUSH
22890: LD_INT 0
22892: PUSH
22893: LD_INT 0
22895: PUSH
22896: EMPTY
22897: LIST
22898: LIST
22899: PUSH
22900: LD_INT 0
22902: PUSH
22903: LD_INT 1
22905: NEG
22906: PUSH
22907: EMPTY
22908: LIST
22909: LIST
22910: PUSH
22911: LD_INT 1
22913: PUSH
22914: LD_INT 0
22916: PUSH
22917: EMPTY
22918: LIST
22919: LIST
22920: PUSH
22921: LD_INT 1
22923: PUSH
22924: LD_INT 1
22926: PUSH
22927: EMPTY
22928: LIST
22929: LIST
22930: PUSH
22931: LD_INT 0
22933: PUSH
22934: LD_INT 1
22936: PUSH
22937: EMPTY
22938: LIST
22939: LIST
22940: PUSH
22941: LD_INT 1
22943: NEG
22944: PUSH
22945: LD_INT 0
22947: PUSH
22948: EMPTY
22949: LIST
22950: LIST
22951: PUSH
22952: LD_INT 1
22954: NEG
22955: PUSH
22956: LD_INT 1
22958: NEG
22959: PUSH
22960: EMPTY
22961: LIST
22962: LIST
22963: PUSH
22964: LD_INT 1
22966: NEG
22967: PUSH
22968: LD_INT 2
22970: NEG
22971: PUSH
22972: EMPTY
22973: LIST
22974: LIST
22975: PUSH
22976: LD_INT 0
22978: PUSH
22979: LD_INT 2
22981: NEG
22982: PUSH
22983: EMPTY
22984: LIST
22985: LIST
22986: PUSH
22987: LD_INT 1
22989: PUSH
22990: LD_INT 1
22992: NEG
22993: PUSH
22994: EMPTY
22995: LIST
22996: LIST
22997: PUSH
22998: LD_INT 2
23000: PUSH
23001: LD_INT 1
23003: PUSH
23004: EMPTY
23005: LIST
23006: LIST
23007: PUSH
23008: LD_INT 2
23010: PUSH
23011: LD_INT 2
23013: PUSH
23014: EMPTY
23015: LIST
23016: LIST
23017: PUSH
23018: LD_INT 1
23020: PUSH
23021: LD_INT 2
23023: PUSH
23024: EMPTY
23025: LIST
23026: LIST
23027: PUSH
23028: LD_INT 0
23030: PUSH
23031: LD_INT 2
23033: PUSH
23034: EMPTY
23035: LIST
23036: LIST
23037: PUSH
23038: LD_INT 1
23040: NEG
23041: PUSH
23042: LD_INT 1
23044: PUSH
23045: EMPTY
23046: LIST
23047: LIST
23048: PUSH
23049: LD_INT 2
23051: NEG
23052: PUSH
23053: LD_INT 0
23055: PUSH
23056: EMPTY
23057: LIST
23058: LIST
23059: PUSH
23060: LD_INT 2
23062: NEG
23063: PUSH
23064: LD_INT 1
23066: NEG
23067: PUSH
23068: EMPTY
23069: LIST
23070: LIST
23071: PUSH
23072: LD_INT 1
23074: NEG
23075: PUSH
23076: LD_INT 3
23078: NEG
23079: PUSH
23080: EMPTY
23081: LIST
23082: LIST
23083: PUSH
23084: LD_INT 1
23086: PUSH
23087: LD_INT 2
23089: NEG
23090: PUSH
23091: EMPTY
23092: LIST
23093: LIST
23094: PUSH
23095: LD_INT 3
23097: PUSH
23098: LD_INT 2
23100: PUSH
23101: EMPTY
23102: LIST
23103: LIST
23104: PUSH
23105: LD_INT 2
23107: PUSH
23108: LD_INT 3
23110: PUSH
23111: EMPTY
23112: LIST
23113: LIST
23114: PUSH
23115: LD_INT 2
23117: NEG
23118: PUSH
23119: LD_INT 1
23121: PUSH
23122: EMPTY
23123: LIST
23124: LIST
23125: PUSH
23126: LD_INT 3
23128: NEG
23129: PUSH
23130: LD_INT 1
23132: NEG
23133: PUSH
23134: EMPTY
23135: LIST
23136: LIST
23137: PUSH
23138: EMPTY
23139: LIST
23140: LIST
23141: LIST
23142: LIST
23143: LIST
23144: LIST
23145: LIST
23146: LIST
23147: LIST
23148: LIST
23149: LIST
23150: LIST
23151: LIST
23152: LIST
23153: LIST
23154: LIST
23155: LIST
23156: LIST
23157: LIST
23158: LIST
23159: LIST
23160: LIST
23161: LIST
23162: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23163: LD_ADDR_VAR 0 33
23167: PUSH
23168: LD_INT 0
23170: PUSH
23171: LD_INT 0
23173: PUSH
23174: EMPTY
23175: LIST
23176: LIST
23177: PUSH
23178: LD_INT 0
23180: PUSH
23181: LD_INT 1
23183: NEG
23184: PUSH
23185: EMPTY
23186: LIST
23187: LIST
23188: PUSH
23189: LD_INT 1
23191: PUSH
23192: LD_INT 0
23194: PUSH
23195: EMPTY
23196: LIST
23197: LIST
23198: PUSH
23199: LD_INT 1
23201: PUSH
23202: LD_INT 1
23204: PUSH
23205: EMPTY
23206: LIST
23207: LIST
23208: PUSH
23209: LD_INT 0
23211: PUSH
23212: LD_INT 1
23214: PUSH
23215: EMPTY
23216: LIST
23217: LIST
23218: PUSH
23219: LD_INT 1
23221: NEG
23222: PUSH
23223: LD_INT 0
23225: PUSH
23226: EMPTY
23227: LIST
23228: LIST
23229: PUSH
23230: LD_INT 1
23232: NEG
23233: PUSH
23234: LD_INT 1
23236: NEG
23237: PUSH
23238: EMPTY
23239: LIST
23240: LIST
23241: PUSH
23242: LD_INT 1
23244: NEG
23245: PUSH
23246: LD_INT 2
23248: NEG
23249: PUSH
23250: EMPTY
23251: LIST
23252: LIST
23253: PUSH
23254: LD_INT 1
23256: PUSH
23257: LD_INT 1
23259: NEG
23260: PUSH
23261: EMPTY
23262: LIST
23263: LIST
23264: PUSH
23265: LD_INT 2
23267: PUSH
23268: LD_INT 0
23270: PUSH
23271: EMPTY
23272: LIST
23273: LIST
23274: PUSH
23275: LD_INT 2
23277: PUSH
23278: LD_INT 1
23280: PUSH
23281: EMPTY
23282: LIST
23283: LIST
23284: PUSH
23285: LD_INT 1
23287: PUSH
23288: LD_INT 2
23290: PUSH
23291: EMPTY
23292: LIST
23293: LIST
23294: PUSH
23295: LD_INT 0
23297: PUSH
23298: LD_INT 2
23300: PUSH
23301: EMPTY
23302: LIST
23303: LIST
23304: PUSH
23305: LD_INT 1
23307: NEG
23308: PUSH
23309: LD_INT 1
23311: PUSH
23312: EMPTY
23313: LIST
23314: LIST
23315: PUSH
23316: LD_INT 2
23318: NEG
23319: PUSH
23320: LD_INT 0
23322: PUSH
23323: EMPTY
23324: LIST
23325: LIST
23326: PUSH
23327: LD_INT 2
23329: NEG
23330: PUSH
23331: LD_INT 1
23333: NEG
23334: PUSH
23335: EMPTY
23336: LIST
23337: LIST
23338: PUSH
23339: LD_INT 2
23341: NEG
23342: PUSH
23343: LD_INT 2
23345: NEG
23346: PUSH
23347: EMPTY
23348: LIST
23349: LIST
23350: PUSH
23351: LD_INT 2
23353: NEG
23354: PUSH
23355: LD_INT 3
23357: NEG
23358: PUSH
23359: EMPTY
23360: LIST
23361: LIST
23362: PUSH
23363: LD_INT 2
23365: PUSH
23366: LD_INT 1
23368: NEG
23369: PUSH
23370: EMPTY
23371: LIST
23372: LIST
23373: PUSH
23374: LD_INT 3
23376: PUSH
23377: LD_INT 1
23379: PUSH
23380: EMPTY
23381: LIST
23382: LIST
23383: PUSH
23384: LD_INT 1
23386: PUSH
23387: LD_INT 3
23389: PUSH
23390: EMPTY
23391: LIST
23392: LIST
23393: PUSH
23394: LD_INT 1
23396: NEG
23397: PUSH
23398: LD_INT 2
23400: PUSH
23401: EMPTY
23402: LIST
23403: LIST
23404: PUSH
23405: LD_INT 3
23407: NEG
23408: PUSH
23409: LD_INT 2
23411: NEG
23412: PUSH
23413: EMPTY
23414: LIST
23415: LIST
23416: PUSH
23417: EMPTY
23418: LIST
23419: LIST
23420: LIST
23421: LIST
23422: LIST
23423: LIST
23424: LIST
23425: LIST
23426: LIST
23427: LIST
23428: LIST
23429: LIST
23430: LIST
23431: LIST
23432: LIST
23433: LIST
23434: LIST
23435: LIST
23436: LIST
23437: LIST
23438: LIST
23439: LIST
23440: LIST
23441: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23442: LD_ADDR_VAR 0 34
23446: PUSH
23447: LD_INT 0
23449: PUSH
23450: LD_INT 0
23452: PUSH
23453: EMPTY
23454: LIST
23455: LIST
23456: PUSH
23457: LD_INT 0
23459: PUSH
23460: LD_INT 1
23462: NEG
23463: PUSH
23464: EMPTY
23465: LIST
23466: LIST
23467: PUSH
23468: LD_INT 1
23470: PUSH
23471: LD_INT 0
23473: PUSH
23474: EMPTY
23475: LIST
23476: LIST
23477: PUSH
23478: LD_INT 1
23480: PUSH
23481: LD_INT 1
23483: PUSH
23484: EMPTY
23485: LIST
23486: LIST
23487: PUSH
23488: LD_INT 0
23490: PUSH
23491: LD_INT 1
23493: PUSH
23494: EMPTY
23495: LIST
23496: LIST
23497: PUSH
23498: LD_INT 1
23500: NEG
23501: PUSH
23502: LD_INT 0
23504: PUSH
23505: EMPTY
23506: LIST
23507: LIST
23508: PUSH
23509: LD_INT 1
23511: NEG
23512: PUSH
23513: LD_INT 1
23515: NEG
23516: PUSH
23517: EMPTY
23518: LIST
23519: LIST
23520: PUSH
23521: LD_INT 1
23523: NEG
23524: PUSH
23525: LD_INT 2
23527: NEG
23528: PUSH
23529: EMPTY
23530: LIST
23531: LIST
23532: PUSH
23533: LD_INT 0
23535: PUSH
23536: LD_INT 2
23538: NEG
23539: PUSH
23540: EMPTY
23541: LIST
23542: LIST
23543: PUSH
23544: LD_INT 1
23546: PUSH
23547: LD_INT 1
23549: NEG
23550: PUSH
23551: EMPTY
23552: LIST
23553: LIST
23554: PUSH
23555: LD_INT 2
23557: PUSH
23558: LD_INT 1
23560: PUSH
23561: EMPTY
23562: LIST
23563: LIST
23564: PUSH
23565: LD_INT 2
23567: PUSH
23568: LD_INT 2
23570: PUSH
23571: EMPTY
23572: LIST
23573: LIST
23574: PUSH
23575: LD_INT 1
23577: PUSH
23578: LD_INT 2
23580: PUSH
23581: EMPTY
23582: LIST
23583: LIST
23584: PUSH
23585: LD_INT 1
23587: NEG
23588: PUSH
23589: LD_INT 1
23591: PUSH
23592: EMPTY
23593: LIST
23594: LIST
23595: PUSH
23596: LD_INT 2
23598: NEG
23599: PUSH
23600: LD_INT 0
23602: PUSH
23603: EMPTY
23604: LIST
23605: LIST
23606: PUSH
23607: LD_INT 2
23609: NEG
23610: PUSH
23611: LD_INT 1
23613: NEG
23614: PUSH
23615: EMPTY
23616: LIST
23617: LIST
23618: PUSH
23619: LD_INT 2
23621: NEG
23622: PUSH
23623: LD_INT 2
23625: NEG
23626: PUSH
23627: EMPTY
23628: LIST
23629: LIST
23630: PUSH
23631: LD_INT 1
23633: NEG
23634: PUSH
23635: LD_INT 3
23637: NEG
23638: PUSH
23639: EMPTY
23640: LIST
23641: LIST
23642: PUSH
23643: LD_INT 1
23645: PUSH
23646: LD_INT 2
23648: NEG
23649: PUSH
23650: EMPTY
23651: LIST
23652: LIST
23653: PUSH
23654: LD_INT 3
23656: PUSH
23657: LD_INT 2
23659: PUSH
23660: EMPTY
23661: LIST
23662: LIST
23663: PUSH
23664: LD_INT 2
23666: PUSH
23667: LD_INT 3
23669: PUSH
23670: EMPTY
23671: LIST
23672: LIST
23673: PUSH
23674: LD_INT 2
23676: NEG
23677: PUSH
23678: LD_INT 1
23680: PUSH
23681: EMPTY
23682: LIST
23683: LIST
23684: PUSH
23685: LD_INT 3
23687: NEG
23688: PUSH
23689: LD_INT 1
23691: NEG
23692: PUSH
23693: EMPTY
23694: LIST
23695: LIST
23696: PUSH
23697: EMPTY
23698: LIST
23699: LIST
23700: LIST
23701: LIST
23702: LIST
23703: LIST
23704: LIST
23705: LIST
23706: LIST
23707: LIST
23708: LIST
23709: LIST
23710: LIST
23711: LIST
23712: LIST
23713: LIST
23714: LIST
23715: LIST
23716: LIST
23717: LIST
23718: LIST
23719: LIST
23720: LIST
23721: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23722: LD_ADDR_VAR 0 35
23726: PUSH
23727: LD_INT 0
23729: PUSH
23730: LD_INT 0
23732: PUSH
23733: EMPTY
23734: LIST
23735: LIST
23736: PUSH
23737: LD_INT 0
23739: PUSH
23740: LD_INT 1
23742: NEG
23743: PUSH
23744: EMPTY
23745: LIST
23746: LIST
23747: PUSH
23748: LD_INT 1
23750: PUSH
23751: LD_INT 0
23753: PUSH
23754: EMPTY
23755: LIST
23756: LIST
23757: PUSH
23758: LD_INT 1
23760: PUSH
23761: LD_INT 1
23763: PUSH
23764: EMPTY
23765: LIST
23766: LIST
23767: PUSH
23768: LD_INT 0
23770: PUSH
23771: LD_INT 1
23773: PUSH
23774: EMPTY
23775: LIST
23776: LIST
23777: PUSH
23778: LD_INT 1
23780: NEG
23781: PUSH
23782: LD_INT 0
23784: PUSH
23785: EMPTY
23786: LIST
23787: LIST
23788: PUSH
23789: LD_INT 1
23791: NEG
23792: PUSH
23793: LD_INT 1
23795: NEG
23796: PUSH
23797: EMPTY
23798: LIST
23799: LIST
23800: PUSH
23801: LD_INT 2
23803: PUSH
23804: LD_INT 1
23806: PUSH
23807: EMPTY
23808: LIST
23809: LIST
23810: PUSH
23811: LD_INT 2
23813: NEG
23814: PUSH
23815: LD_INT 1
23817: NEG
23818: PUSH
23819: EMPTY
23820: LIST
23821: LIST
23822: PUSH
23823: EMPTY
23824: LIST
23825: LIST
23826: LIST
23827: LIST
23828: LIST
23829: LIST
23830: LIST
23831: LIST
23832: LIST
23833: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23834: LD_ADDR_VAR 0 36
23838: PUSH
23839: LD_INT 0
23841: PUSH
23842: LD_INT 0
23844: PUSH
23845: EMPTY
23846: LIST
23847: LIST
23848: PUSH
23849: LD_INT 0
23851: PUSH
23852: LD_INT 1
23854: NEG
23855: PUSH
23856: EMPTY
23857: LIST
23858: LIST
23859: PUSH
23860: LD_INT 1
23862: PUSH
23863: LD_INT 0
23865: PUSH
23866: EMPTY
23867: LIST
23868: LIST
23869: PUSH
23870: LD_INT 1
23872: PUSH
23873: LD_INT 1
23875: PUSH
23876: EMPTY
23877: LIST
23878: LIST
23879: PUSH
23880: LD_INT 0
23882: PUSH
23883: LD_INT 1
23885: PUSH
23886: EMPTY
23887: LIST
23888: LIST
23889: PUSH
23890: LD_INT 1
23892: NEG
23893: PUSH
23894: LD_INT 0
23896: PUSH
23897: EMPTY
23898: LIST
23899: LIST
23900: PUSH
23901: LD_INT 1
23903: NEG
23904: PUSH
23905: LD_INT 1
23907: NEG
23908: PUSH
23909: EMPTY
23910: LIST
23911: LIST
23912: PUSH
23913: LD_INT 1
23915: NEG
23916: PUSH
23917: LD_INT 2
23919: NEG
23920: PUSH
23921: EMPTY
23922: LIST
23923: LIST
23924: PUSH
23925: LD_INT 1
23927: PUSH
23928: LD_INT 2
23930: PUSH
23931: EMPTY
23932: LIST
23933: LIST
23934: PUSH
23935: EMPTY
23936: LIST
23937: LIST
23938: LIST
23939: LIST
23940: LIST
23941: LIST
23942: LIST
23943: LIST
23944: LIST
23945: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
23946: LD_ADDR_VAR 0 37
23950: PUSH
23951: LD_INT 0
23953: PUSH
23954: LD_INT 0
23956: PUSH
23957: EMPTY
23958: LIST
23959: LIST
23960: PUSH
23961: LD_INT 0
23963: PUSH
23964: LD_INT 1
23966: NEG
23967: PUSH
23968: EMPTY
23969: LIST
23970: LIST
23971: PUSH
23972: LD_INT 1
23974: PUSH
23975: LD_INT 0
23977: PUSH
23978: EMPTY
23979: LIST
23980: LIST
23981: PUSH
23982: LD_INT 1
23984: PUSH
23985: LD_INT 1
23987: PUSH
23988: EMPTY
23989: LIST
23990: LIST
23991: PUSH
23992: LD_INT 0
23994: PUSH
23995: LD_INT 1
23997: PUSH
23998: EMPTY
23999: LIST
24000: LIST
24001: PUSH
24002: LD_INT 1
24004: NEG
24005: PUSH
24006: LD_INT 0
24008: PUSH
24009: EMPTY
24010: LIST
24011: LIST
24012: PUSH
24013: LD_INT 1
24015: NEG
24016: PUSH
24017: LD_INT 1
24019: NEG
24020: PUSH
24021: EMPTY
24022: LIST
24023: LIST
24024: PUSH
24025: LD_INT 1
24027: PUSH
24028: LD_INT 1
24030: NEG
24031: PUSH
24032: EMPTY
24033: LIST
24034: LIST
24035: PUSH
24036: LD_INT 1
24038: NEG
24039: PUSH
24040: LD_INT 1
24042: PUSH
24043: EMPTY
24044: LIST
24045: LIST
24046: PUSH
24047: EMPTY
24048: LIST
24049: LIST
24050: LIST
24051: LIST
24052: LIST
24053: LIST
24054: LIST
24055: LIST
24056: LIST
24057: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
24058: LD_ADDR_VAR 0 38
24062: PUSH
24063: LD_INT 0
24065: PUSH
24066: LD_INT 0
24068: PUSH
24069: EMPTY
24070: LIST
24071: LIST
24072: PUSH
24073: LD_INT 0
24075: PUSH
24076: LD_INT 1
24078: NEG
24079: PUSH
24080: EMPTY
24081: LIST
24082: LIST
24083: PUSH
24084: LD_INT 1
24086: PUSH
24087: LD_INT 0
24089: PUSH
24090: EMPTY
24091: LIST
24092: LIST
24093: PUSH
24094: LD_INT 1
24096: PUSH
24097: LD_INT 1
24099: PUSH
24100: EMPTY
24101: LIST
24102: LIST
24103: PUSH
24104: LD_INT 0
24106: PUSH
24107: LD_INT 1
24109: PUSH
24110: EMPTY
24111: LIST
24112: LIST
24113: PUSH
24114: LD_INT 1
24116: NEG
24117: PUSH
24118: LD_INT 0
24120: PUSH
24121: EMPTY
24122: LIST
24123: LIST
24124: PUSH
24125: LD_INT 1
24127: NEG
24128: PUSH
24129: LD_INT 1
24131: NEG
24132: PUSH
24133: EMPTY
24134: LIST
24135: LIST
24136: PUSH
24137: LD_INT 2
24139: PUSH
24140: LD_INT 1
24142: PUSH
24143: EMPTY
24144: LIST
24145: LIST
24146: PUSH
24147: LD_INT 2
24149: NEG
24150: PUSH
24151: LD_INT 1
24153: NEG
24154: PUSH
24155: EMPTY
24156: LIST
24157: LIST
24158: PUSH
24159: EMPTY
24160: LIST
24161: LIST
24162: LIST
24163: LIST
24164: LIST
24165: LIST
24166: LIST
24167: LIST
24168: LIST
24169: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
24170: LD_ADDR_VAR 0 39
24174: PUSH
24175: LD_INT 0
24177: PUSH
24178: LD_INT 0
24180: PUSH
24181: EMPTY
24182: LIST
24183: LIST
24184: PUSH
24185: LD_INT 0
24187: PUSH
24188: LD_INT 1
24190: NEG
24191: PUSH
24192: EMPTY
24193: LIST
24194: LIST
24195: PUSH
24196: LD_INT 1
24198: PUSH
24199: LD_INT 0
24201: PUSH
24202: EMPTY
24203: LIST
24204: LIST
24205: PUSH
24206: LD_INT 1
24208: PUSH
24209: LD_INT 1
24211: PUSH
24212: EMPTY
24213: LIST
24214: LIST
24215: PUSH
24216: LD_INT 0
24218: PUSH
24219: LD_INT 1
24221: PUSH
24222: EMPTY
24223: LIST
24224: LIST
24225: PUSH
24226: LD_INT 1
24228: NEG
24229: PUSH
24230: LD_INT 0
24232: PUSH
24233: EMPTY
24234: LIST
24235: LIST
24236: PUSH
24237: LD_INT 1
24239: NEG
24240: PUSH
24241: LD_INT 1
24243: NEG
24244: PUSH
24245: EMPTY
24246: LIST
24247: LIST
24248: PUSH
24249: LD_INT 1
24251: NEG
24252: PUSH
24253: LD_INT 2
24255: NEG
24256: PUSH
24257: EMPTY
24258: LIST
24259: LIST
24260: PUSH
24261: LD_INT 1
24263: PUSH
24264: LD_INT 2
24266: PUSH
24267: EMPTY
24268: LIST
24269: LIST
24270: PUSH
24271: EMPTY
24272: LIST
24273: LIST
24274: LIST
24275: LIST
24276: LIST
24277: LIST
24278: LIST
24279: LIST
24280: LIST
24281: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24282: LD_ADDR_VAR 0 40
24286: PUSH
24287: LD_INT 0
24289: PUSH
24290: LD_INT 0
24292: PUSH
24293: EMPTY
24294: LIST
24295: LIST
24296: PUSH
24297: LD_INT 0
24299: PUSH
24300: LD_INT 1
24302: NEG
24303: PUSH
24304: EMPTY
24305: LIST
24306: LIST
24307: PUSH
24308: LD_INT 1
24310: PUSH
24311: LD_INT 0
24313: PUSH
24314: EMPTY
24315: LIST
24316: LIST
24317: PUSH
24318: LD_INT 1
24320: PUSH
24321: LD_INT 1
24323: PUSH
24324: EMPTY
24325: LIST
24326: LIST
24327: PUSH
24328: LD_INT 0
24330: PUSH
24331: LD_INT 1
24333: PUSH
24334: EMPTY
24335: LIST
24336: LIST
24337: PUSH
24338: LD_INT 1
24340: NEG
24341: PUSH
24342: LD_INT 0
24344: PUSH
24345: EMPTY
24346: LIST
24347: LIST
24348: PUSH
24349: LD_INT 1
24351: NEG
24352: PUSH
24353: LD_INT 1
24355: NEG
24356: PUSH
24357: EMPTY
24358: LIST
24359: LIST
24360: PUSH
24361: LD_INT 1
24363: PUSH
24364: LD_INT 1
24366: NEG
24367: PUSH
24368: EMPTY
24369: LIST
24370: LIST
24371: PUSH
24372: LD_INT 1
24374: NEG
24375: PUSH
24376: LD_INT 1
24378: PUSH
24379: EMPTY
24380: LIST
24381: LIST
24382: PUSH
24383: EMPTY
24384: LIST
24385: LIST
24386: LIST
24387: LIST
24388: LIST
24389: LIST
24390: LIST
24391: LIST
24392: LIST
24393: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24394: LD_ADDR_VAR 0 41
24398: PUSH
24399: LD_INT 0
24401: PUSH
24402: LD_INT 0
24404: PUSH
24405: EMPTY
24406: LIST
24407: LIST
24408: PUSH
24409: LD_INT 0
24411: PUSH
24412: LD_INT 1
24414: NEG
24415: PUSH
24416: EMPTY
24417: LIST
24418: LIST
24419: PUSH
24420: LD_INT 1
24422: PUSH
24423: LD_INT 0
24425: PUSH
24426: EMPTY
24427: LIST
24428: LIST
24429: PUSH
24430: LD_INT 1
24432: PUSH
24433: LD_INT 1
24435: PUSH
24436: EMPTY
24437: LIST
24438: LIST
24439: PUSH
24440: LD_INT 0
24442: PUSH
24443: LD_INT 1
24445: PUSH
24446: EMPTY
24447: LIST
24448: LIST
24449: PUSH
24450: LD_INT 1
24452: NEG
24453: PUSH
24454: LD_INT 0
24456: PUSH
24457: EMPTY
24458: LIST
24459: LIST
24460: PUSH
24461: LD_INT 1
24463: NEG
24464: PUSH
24465: LD_INT 1
24467: NEG
24468: PUSH
24469: EMPTY
24470: LIST
24471: LIST
24472: PUSH
24473: LD_INT 1
24475: NEG
24476: PUSH
24477: LD_INT 2
24479: NEG
24480: PUSH
24481: EMPTY
24482: LIST
24483: LIST
24484: PUSH
24485: LD_INT 1
24487: PUSH
24488: LD_INT 1
24490: NEG
24491: PUSH
24492: EMPTY
24493: LIST
24494: LIST
24495: PUSH
24496: LD_INT 2
24498: PUSH
24499: LD_INT 0
24501: PUSH
24502: EMPTY
24503: LIST
24504: LIST
24505: PUSH
24506: LD_INT 2
24508: PUSH
24509: LD_INT 1
24511: PUSH
24512: EMPTY
24513: LIST
24514: LIST
24515: PUSH
24516: LD_INT 2
24518: PUSH
24519: LD_INT 2
24521: PUSH
24522: EMPTY
24523: LIST
24524: LIST
24525: PUSH
24526: LD_INT 1
24528: PUSH
24529: LD_INT 2
24531: PUSH
24532: EMPTY
24533: LIST
24534: LIST
24535: PUSH
24536: LD_INT 1
24538: NEG
24539: PUSH
24540: LD_INT 1
24542: PUSH
24543: EMPTY
24544: LIST
24545: LIST
24546: PUSH
24547: LD_INT 2
24549: NEG
24550: PUSH
24551: LD_INT 0
24553: PUSH
24554: EMPTY
24555: LIST
24556: LIST
24557: PUSH
24558: LD_INT 2
24560: NEG
24561: PUSH
24562: LD_INT 1
24564: NEG
24565: PUSH
24566: EMPTY
24567: LIST
24568: LIST
24569: PUSH
24570: LD_INT 2
24572: NEG
24573: PUSH
24574: LD_INT 2
24576: NEG
24577: PUSH
24578: EMPTY
24579: LIST
24580: LIST
24581: PUSH
24582: LD_INT 2
24584: NEG
24585: PUSH
24586: LD_INT 3
24588: NEG
24589: PUSH
24590: EMPTY
24591: LIST
24592: LIST
24593: PUSH
24594: LD_INT 2
24596: PUSH
24597: LD_INT 1
24599: NEG
24600: PUSH
24601: EMPTY
24602: LIST
24603: LIST
24604: PUSH
24605: LD_INT 3
24607: PUSH
24608: LD_INT 0
24610: PUSH
24611: EMPTY
24612: LIST
24613: LIST
24614: PUSH
24615: LD_INT 3
24617: PUSH
24618: LD_INT 1
24620: PUSH
24621: EMPTY
24622: LIST
24623: LIST
24624: PUSH
24625: LD_INT 3
24627: PUSH
24628: LD_INT 2
24630: PUSH
24631: EMPTY
24632: LIST
24633: LIST
24634: PUSH
24635: LD_INT 3
24637: PUSH
24638: LD_INT 3
24640: PUSH
24641: EMPTY
24642: LIST
24643: LIST
24644: PUSH
24645: LD_INT 2
24647: PUSH
24648: LD_INT 3
24650: PUSH
24651: EMPTY
24652: LIST
24653: LIST
24654: PUSH
24655: LD_INT 2
24657: NEG
24658: PUSH
24659: LD_INT 1
24661: PUSH
24662: EMPTY
24663: LIST
24664: LIST
24665: PUSH
24666: LD_INT 3
24668: NEG
24669: PUSH
24670: LD_INT 0
24672: PUSH
24673: EMPTY
24674: LIST
24675: LIST
24676: PUSH
24677: LD_INT 3
24679: NEG
24680: PUSH
24681: LD_INT 1
24683: NEG
24684: PUSH
24685: EMPTY
24686: LIST
24687: LIST
24688: PUSH
24689: LD_INT 3
24691: NEG
24692: PUSH
24693: LD_INT 2
24695: NEG
24696: PUSH
24697: EMPTY
24698: LIST
24699: LIST
24700: PUSH
24701: LD_INT 3
24703: NEG
24704: PUSH
24705: LD_INT 3
24707: NEG
24708: PUSH
24709: EMPTY
24710: LIST
24711: LIST
24712: PUSH
24713: EMPTY
24714: LIST
24715: LIST
24716: LIST
24717: LIST
24718: LIST
24719: LIST
24720: LIST
24721: LIST
24722: LIST
24723: LIST
24724: LIST
24725: LIST
24726: LIST
24727: LIST
24728: LIST
24729: LIST
24730: LIST
24731: LIST
24732: LIST
24733: LIST
24734: LIST
24735: LIST
24736: LIST
24737: LIST
24738: LIST
24739: LIST
24740: LIST
24741: LIST
24742: LIST
24743: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24744: LD_ADDR_VAR 0 42
24748: PUSH
24749: LD_INT 0
24751: PUSH
24752: LD_INT 0
24754: PUSH
24755: EMPTY
24756: LIST
24757: LIST
24758: PUSH
24759: LD_INT 0
24761: PUSH
24762: LD_INT 1
24764: NEG
24765: PUSH
24766: EMPTY
24767: LIST
24768: LIST
24769: PUSH
24770: LD_INT 1
24772: PUSH
24773: LD_INT 0
24775: PUSH
24776: EMPTY
24777: LIST
24778: LIST
24779: PUSH
24780: LD_INT 1
24782: PUSH
24783: LD_INT 1
24785: PUSH
24786: EMPTY
24787: LIST
24788: LIST
24789: PUSH
24790: LD_INT 0
24792: PUSH
24793: LD_INT 1
24795: PUSH
24796: EMPTY
24797: LIST
24798: LIST
24799: PUSH
24800: LD_INT 1
24802: NEG
24803: PUSH
24804: LD_INT 0
24806: PUSH
24807: EMPTY
24808: LIST
24809: LIST
24810: PUSH
24811: LD_INT 1
24813: NEG
24814: PUSH
24815: LD_INT 1
24817: NEG
24818: PUSH
24819: EMPTY
24820: LIST
24821: LIST
24822: PUSH
24823: LD_INT 1
24825: NEG
24826: PUSH
24827: LD_INT 2
24829: NEG
24830: PUSH
24831: EMPTY
24832: LIST
24833: LIST
24834: PUSH
24835: LD_INT 0
24837: PUSH
24838: LD_INT 2
24840: NEG
24841: PUSH
24842: EMPTY
24843: LIST
24844: LIST
24845: PUSH
24846: LD_INT 1
24848: PUSH
24849: LD_INT 1
24851: NEG
24852: PUSH
24853: EMPTY
24854: LIST
24855: LIST
24856: PUSH
24857: LD_INT 2
24859: PUSH
24860: LD_INT 1
24862: PUSH
24863: EMPTY
24864: LIST
24865: LIST
24866: PUSH
24867: LD_INT 2
24869: PUSH
24870: LD_INT 2
24872: PUSH
24873: EMPTY
24874: LIST
24875: LIST
24876: PUSH
24877: LD_INT 1
24879: PUSH
24880: LD_INT 2
24882: PUSH
24883: EMPTY
24884: LIST
24885: LIST
24886: PUSH
24887: LD_INT 0
24889: PUSH
24890: LD_INT 2
24892: PUSH
24893: EMPTY
24894: LIST
24895: LIST
24896: PUSH
24897: LD_INT 1
24899: NEG
24900: PUSH
24901: LD_INT 1
24903: PUSH
24904: EMPTY
24905: LIST
24906: LIST
24907: PUSH
24908: LD_INT 2
24910: NEG
24911: PUSH
24912: LD_INT 1
24914: NEG
24915: PUSH
24916: EMPTY
24917: LIST
24918: LIST
24919: PUSH
24920: LD_INT 2
24922: NEG
24923: PUSH
24924: LD_INT 2
24926: NEG
24927: PUSH
24928: EMPTY
24929: LIST
24930: LIST
24931: PUSH
24932: LD_INT 2
24934: NEG
24935: PUSH
24936: LD_INT 3
24938: NEG
24939: PUSH
24940: EMPTY
24941: LIST
24942: LIST
24943: PUSH
24944: LD_INT 1
24946: NEG
24947: PUSH
24948: LD_INT 3
24950: NEG
24951: PUSH
24952: EMPTY
24953: LIST
24954: LIST
24955: PUSH
24956: LD_INT 0
24958: PUSH
24959: LD_INT 3
24961: NEG
24962: PUSH
24963: EMPTY
24964: LIST
24965: LIST
24966: PUSH
24967: LD_INT 1
24969: PUSH
24970: LD_INT 2
24972: NEG
24973: PUSH
24974: EMPTY
24975: LIST
24976: LIST
24977: PUSH
24978: LD_INT 3
24980: PUSH
24981: LD_INT 2
24983: PUSH
24984: EMPTY
24985: LIST
24986: LIST
24987: PUSH
24988: LD_INT 3
24990: PUSH
24991: LD_INT 3
24993: PUSH
24994: EMPTY
24995: LIST
24996: LIST
24997: PUSH
24998: LD_INT 2
25000: PUSH
25001: LD_INT 3
25003: PUSH
25004: EMPTY
25005: LIST
25006: LIST
25007: PUSH
25008: LD_INT 1
25010: PUSH
25011: LD_INT 3
25013: PUSH
25014: EMPTY
25015: LIST
25016: LIST
25017: PUSH
25018: LD_INT 0
25020: PUSH
25021: LD_INT 3
25023: PUSH
25024: EMPTY
25025: LIST
25026: LIST
25027: PUSH
25028: LD_INT 1
25030: NEG
25031: PUSH
25032: LD_INT 2
25034: PUSH
25035: EMPTY
25036: LIST
25037: LIST
25038: PUSH
25039: LD_INT 3
25041: NEG
25042: PUSH
25043: LD_INT 2
25045: NEG
25046: PUSH
25047: EMPTY
25048: LIST
25049: LIST
25050: PUSH
25051: LD_INT 3
25053: NEG
25054: PUSH
25055: LD_INT 3
25057: NEG
25058: PUSH
25059: EMPTY
25060: LIST
25061: LIST
25062: PUSH
25063: EMPTY
25064: LIST
25065: LIST
25066: LIST
25067: LIST
25068: LIST
25069: LIST
25070: LIST
25071: LIST
25072: LIST
25073: LIST
25074: LIST
25075: LIST
25076: LIST
25077: LIST
25078: LIST
25079: LIST
25080: LIST
25081: LIST
25082: LIST
25083: LIST
25084: LIST
25085: LIST
25086: LIST
25087: LIST
25088: LIST
25089: LIST
25090: LIST
25091: LIST
25092: LIST
25093: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25094: LD_ADDR_VAR 0 43
25098: PUSH
25099: LD_INT 0
25101: PUSH
25102: LD_INT 0
25104: PUSH
25105: EMPTY
25106: LIST
25107: LIST
25108: PUSH
25109: LD_INT 0
25111: PUSH
25112: LD_INT 1
25114: NEG
25115: PUSH
25116: EMPTY
25117: LIST
25118: LIST
25119: PUSH
25120: LD_INT 1
25122: PUSH
25123: LD_INT 0
25125: PUSH
25126: EMPTY
25127: LIST
25128: LIST
25129: PUSH
25130: LD_INT 1
25132: PUSH
25133: LD_INT 1
25135: PUSH
25136: EMPTY
25137: LIST
25138: LIST
25139: PUSH
25140: LD_INT 0
25142: PUSH
25143: LD_INT 1
25145: PUSH
25146: EMPTY
25147: LIST
25148: LIST
25149: PUSH
25150: LD_INT 1
25152: NEG
25153: PUSH
25154: LD_INT 0
25156: PUSH
25157: EMPTY
25158: LIST
25159: LIST
25160: PUSH
25161: LD_INT 1
25163: NEG
25164: PUSH
25165: LD_INT 1
25167: NEG
25168: PUSH
25169: EMPTY
25170: LIST
25171: LIST
25172: PUSH
25173: LD_INT 1
25175: NEG
25176: PUSH
25177: LD_INT 2
25179: NEG
25180: PUSH
25181: EMPTY
25182: LIST
25183: LIST
25184: PUSH
25185: LD_INT 0
25187: PUSH
25188: LD_INT 2
25190: NEG
25191: PUSH
25192: EMPTY
25193: LIST
25194: LIST
25195: PUSH
25196: LD_INT 1
25198: PUSH
25199: LD_INT 1
25201: NEG
25202: PUSH
25203: EMPTY
25204: LIST
25205: LIST
25206: PUSH
25207: LD_INT 2
25209: PUSH
25210: LD_INT 0
25212: PUSH
25213: EMPTY
25214: LIST
25215: LIST
25216: PUSH
25217: LD_INT 2
25219: PUSH
25220: LD_INT 1
25222: PUSH
25223: EMPTY
25224: LIST
25225: LIST
25226: PUSH
25227: LD_INT 1
25229: PUSH
25230: LD_INT 2
25232: PUSH
25233: EMPTY
25234: LIST
25235: LIST
25236: PUSH
25237: LD_INT 0
25239: PUSH
25240: LD_INT 2
25242: PUSH
25243: EMPTY
25244: LIST
25245: LIST
25246: PUSH
25247: LD_INT 1
25249: NEG
25250: PUSH
25251: LD_INT 1
25253: PUSH
25254: EMPTY
25255: LIST
25256: LIST
25257: PUSH
25258: LD_INT 2
25260: NEG
25261: PUSH
25262: LD_INT 0
25264: PUSH
25265: EMPTY
25266: LIST
25267: LIST
25268: PUSH
25269: LD_INT 2
25271: NEG
25272: PUSH
25273: LD_INT 1
25275: NEG
25276: PUSH
25277: EMPTY
25278: LIST
25279: LIST
25280: PUSH
25281: LD_INT 1
25283: NEG
25284: PUSH
25285: LD_INT 3
25287: NEG
25288: PUSH
25289: EMPTY
25290: LIST
25291: LIST
25292: PUSH
25293: LD_INT 0
25295: PUSH
25296: LD_INT 3
25298: NEG
25299: PUSH
25300: EMPTY
25301: LIST
25302: LIST
25303: PUSH
25304: LD_INT 1
25306: PUSH
25307: LD_INT 2
25309: NEG
25310: PUSH
25311: EMPTY
25312: LIST
25313: LIST
25314: PUSH
25315: LD_INT 2
25317: PUSH
25318: LD_INT 1
25320: NEG
25321: PUSH
25322: EMPTY
25323: LIST
25324: LIST
25325: PUSH
25326: LD_INT 3
25328: PUSH
25329: LD_INT 0
25331: PUSH
25332: EMPTY
25333: LIST
25334: LIST
25335: PUSH
25336: LD_INT 3
25338: PUSH
25339: LD_INT 1
25341: PUSH
25342: EMPTY
25343: LIST
25344: LIST
25345: PUSH
25346: LD_INT 1
25348: PUSH
25349: LD_INT 3
25351: PUSH
25352: EMPTY
25353: LIST
25354: LIST
25355: PUSH
25356: LD_INT 0
25358: PUSH
25359: LD_INT 3
25361: PUSH
25362: EMPTY
25363: LIST
25364: LIST
25365: PUSH
25366: LD_INT 1
25368: NEG
25369: PUSH
25370: LD_INT 2
25372: PUSH
25373: EMPTY
25374: LIST
25375: LIST
25376: PUSH
25377: LD_INT 2
25379: NEG
25380: PUSH
25381: LD_INT 1
25383: PUSH
25384: EMPTY
25385: LIST
25386: LIST
25387: PUSH
25388: LD_INT 3
25390: NEG
25391: PUSH
25392: LD_INT 0
25394: PUSH
25395: EMPTY
25396: LIST
25397: LIST
25398: PUSH
25399: LD_INT 3
25401: NEG
25402: PUSH
25403: LD_INT 1
25405: NEG
25406: PUSH
25407: EMPTY
25408: LIST
25409: LIST
25410: PUSH
25411: EMPTY
25412: LIST
25413: LIST
25414: LIST
25415: LIST
25416: LIST
25417: LIST
25418: LIST
25419: LIST
25420: LIST
25421: LIST
25422: LIST
25423: LIST
25424: LIST
25425: LIST
25426: LIST
25427: LIST
25428: LIST
25429: LIST
25430: LIST
25431: LIST
25432: LIST
25433: LIST
25434: LIST
25435: LIST
25436: LIST
25437: LIST
25438: LIST
25439: LIST
25440: LIST
25441: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25442: LD_ADDR_VAR 0 44
25446: PUSH
25447: LD_INT 0
25449: PUSH
25450: LD_INT 0
25452: PUSH
25453: EMPTY
25454: LIST
25455: LIST
25456: PUSH
25457: LD_INT 0
25459: PUSH
25460: LD_INT 1
25462: NEG
25463: PUSH
25464: EMPTY
25465: LIST
25466: LIST
25467: PUSH
25468: LD_INT 1
25470: PUSH
25471: LD_INT 0
25473: PUSH
25474: EMPTY
25475: LIST
25476: LIST
25477: PUSH
25478: LD_INT 1
25480: PUSH
25481: LD_INT 1
25483: PUSH
25484: EMPTY
25485: LIST
25486: LIST
25487: PUSH
25488: LD_INT 0
25490: PUSH
25491: LD_INT 1
25493: PUSH
25494: EMPTY
25495: LIST
25496: LIST
25497: PUSH
25498: LD_INT 1
25500: NEG
25501: PUSH
25502: LD_INT 0
25504: PUSH
25505: EMPTY
25506: LIST
25507: LIST
25508: PUSH
25509: LD_INT 1
25511: NEG
25512: PUSH
25513: LD_INT 1
25515: NEG
25516: PUSH
25517: EMPTY
25518: LIST
25519: LIST
25520: PUSH
25521: LD_INT 1
25523: NEG
25524: PUSH
25525: LD_INT 2
25527: NEG
25528: PUSH
25529: EMPTY
25530: LIST
25531: LIST
25532: PUSH
25533: LD_INT 1
25535: PUSH
25536: LD_INT 1
25538: NEG
25539: PUSH
25540: EMPTY
25541: LIST
25542: LIST
25543: PUSH
25544: LD_INT 2
25546: PUSH
25547: LD_INT 0
25549: PUSH
25550: EMPTY
25551: LIST
25552: LIST
25553: PUSH
25554: LD_INT 2
25556: PUSH
25557: LD_INT 1
25559: PUSH
25560: EMPTY
25561: LIST
25562: LIST
25563: PUSH
25564: LD_INT 2
25566: PUSH
25567: LD_INT 2
25569: PUSH
25570: EMPTY
25571: LIST
25572: LIST
25573: PUSH
25574: LD_INT 1
25576: PUSH
25577: LD_INT 2
25579: PUSH
25580: EMPTY
25581: LIST
25582: LIST
25583: PUSH
25584: LD_INT 1
25586: NEG
25587: PUSH
25588: LD_INT 1
25590: PUSH
25591: EMPTY
25592: LIST
25593: LIST
25594: PUSH
25595: LD_INT 2
25597: NEG
25598: PUSH
25599: LD_INT 0
25601: PUSH
25602: EMPTY
25603: LIST
25604: LIST
25605: PUSH
25606: LD_INT 2
25608: NEG
25609: PUSH
25610: LD_INT 1
25612: NEG
25613: PUSH
25614: EMPTY
25615: LIST
25616: LIST
25617: PUSH
25618: LD_INT 2
25620: NEG
25621: PUSH
25622: LD_INT 2
25624: NEG
25625: PUSH
25626: EMPTY
25627: LIST
25628: LIST
25629: PUSH
25630: LD_INT 2
25632: NEG
25633: PUSH
25634: LD_INT 3
25636: NEG
25637: PUSH
25638: EMPTY
25639: LIST
25640: LIST
25641: PUSH
25642: LD_INT 2
25644: PUSH
25645: LD_INT 1
25647: NEG
25648: PUSH
25649: EMPTY
25650: LIST
25651: LIST
25652: PUSH
25653: LD_INT 3
25655: PUSH
25656: LD_INT 0
25658: PUSH
25659: EMPTY
25660: LIST
25661: LIST
25662: PUSH
25663: LD_INT 3
25665: PUSH
25666: LD_INT 1
25668: PUSH
25669: EMPTY
25670: LIST
25671: LIST
25672: PUSH
25673: LD_INT 3
25675: PUSH
25676: LD_INT 2
25678: PUSH
25679: EMPTY
25680: LIST
25681: LIST
25682: PUSH
25683: LD_INT 3
25685: PUSH
25686: LD_INT 3
25688: PUSH
25689: EMPTY
25690: LIST
25691: LIST
25692: PUSH
25693: LD_INT 2
25695: PUSH
25696: LD_INT 3
25698: PUSH
25699: EMPTY
25700: LIST
25701: LIST
25702: PUSH
25703: LD_INT 2
25705: NEG
25706: PUSH
25707: LD_INT 1
25709: PUSH
25710: EMPTY
25711: LIST
25712: LIST
25713: PUSH
25714: LD_INT 3
25716: NEG
25717: PUSH
25718: LD_INT 0
25720: PUSH
25721: EMPTY
25722: LIST
25723: LIST
25724: PUSH
25725: LD_INT 3
25727: NEG
25728: PUSH
25729: LD_INT 1
25731: NEG
25732: PUSH
25733: EMPTY
25734: LIST
25735: LIST
25736: PUSH
25737: LD_INT 3
25739: NEG
25740: PUSH
25741: LD_INT 2
25743: NEG
25744: PUSH
25745: EMPTY
25746: LIST
25747: LIST
25748: PUSH
25749: LD_INT 3
25751: NEG
25752: PUSH
25753: LD_INT 3
25755: NEG
25756: PUSH
25757: EMPTY
25758: LIST
25759: LIST
25760: PUSH
25761: EMPTY
25762: LIST
25763: LIST
25764: LIST
25765: LIST
25766: LIST
25767: LIST
25768: LIST
25769: LIST
25770: LIST
25771: LIST
25772: LIST
25773: LIST
25774: LIST
25775: LIST
25776: LIST
25777: LIST
25778: LIST
25779: LIST
25780: LIST
25781: LIST
25782: LIST
25783: LIST
25784: LIST
25785: LIST
25786: LIST
25787: LIST
25788: LIST
25789: LIST
25790: LIST
25791: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25792: LD_ADDR_VAR 0 45
25796: PUSH
25797: LD_INT 0
25799: PUSH
25800: LD_INT 0
25802: PUSH
25803: EMPTY
25804: LIST
25805: LIST
25806: PUSH
25807: LD_INT 0
25809: PUSH
25810: LD_INT 1
25812: NEG
25813: PUSH
25814: EMPTY
25815: LIST
25816: LIST
25817: PUSH
25818: LD_INT 1
25820: PUSH
25821: LD_INT 0
25823: PUSH
25824: EMPTY
25825: LIST
25826: LIST
25827: PUSH
25828: LD_INT 1
25830: PUSH
25831: LD_INT 1
25833: PUSH
25834: EMPTY
25835: LIST
25836: LIST
25837: PUSH
25838: LD_INT 0
25840: PUSH
25841: LD_INT 1
25843: PUSH
25844: EMPTY
25845: LIST
25846: LIST
25847: PUSH
25848: LD_INT 1
25850: NEG
25851: PUSH
25852: LD_INT 0
25854: PUSH
25855: EMPTY
25856: LIST
25857: LIST
25858: PUSH
25859: LD_INT 1
25861: NEG
25862: PUSH
25863: LD_INT 1
25865: NEG
25866: PUSH
25867: EMPTY
25868: LIST
25869: LIST
25870: PUSH
25871: LD_INT 1
25873: NEG
25874: PUSH
25875: LD_INT 2
25877: NEG
25878: PUSH
25879: EMPTY
25880: LIST
25881: LIST
25882: PUSH
25883: LD_INT 0
25885: PUSH
25886: LD_INT 2
25888: NEG
25889: PUSH
25890: EMPTY
25891: LIST
25892: LIST
25893: PUSH
25894: LD_INT 1
25896: PUSH
25897: LD_INT 1
25899: NEG
25900: PUSH
25901: EMPTY
25902: LIST
25903: LIST
25904: PUSH
25905: LD_INT 2
25907: PUSH
25908: LD_INT 1
25910: PUSH
25911: EMPTY
25912: LIST
25913: LIST
25914: PUSH
25915: LD_INT 2
25917: PUSH
25918: LD_INT 2
25920: PUSH
25921: EMPTY
25922: LIST
25923: LIST
25924: PUSH
25925: LD_INT 1
25927: PUSH
25928: LD_INT 2
25930: PUSH
25931: EMPTY
25932: LIST
25933: LIST
25934: PUSH
25935: LD_INT 0
25937: PUSH
25938: LD_INT 2
25940: PUSH
25941: EMPTY
25942: LIST
25943: LIST
25944: PUSH
25945: LD_INT 1
25947: NEG
25948: PUSH
25949: LD_INT 1
25951: PUSH
25952: EMPTY
25953: LIST
25954: LIST
25955: PUSH
25956: LD_INT 2
25958: NEG
25959: PUSH
25960: LD_INT 1
25962: NEG
25963: PUSH
25964: EMPTY
25965: LIST
25966: LIST
25967: PUSH
25968: LD_INT 2
25970: NEG
25971: PUSH
25972: LD_INT 2
25974: NEG
25975: PUSH
25976: EMPTY
25977: LIST
25978: LIST
25979: PUSH
25980: LD_INT 2
25982: NEG
25983: PUSH
25984: LD_INT 3
25986: NEG
25987: PUSH
25988: EMPTY
25989: LIST
25990: LIST
25991: PUSH
25992: LD_INT 1
25994: NEG
25995: PUSH
25996: LD_INT 3
25998: NEG
25999: PUSH
26000: EMPTY
26001: LIST
26002: LIST
26003: PUSH
26004: LD_INT 0
26006: PUSH
26007: LD_INT 3
26009: NEG
26010: PUSH
26011: EMPTY
26012: LIST
26013: LIST
26014: PUSH
26015: LD_INT 1
26017: PUSH
26018: LD_INT 2
26020: NEG
26021: PUSH
26022: EMPTY
26023: LIST
26024: LIST
26025: PUSH
26026: LD_INT 3
26028: PUSH
26029: LD_INT 2
26031: PUSH
26032: EMPTY
26033: LIST
26034: LIST
26035: PUSH
26036: LD_INT 3
26038: PUSH
26039: LD_INT 3
26041: PUSH
26042: EMPTY
26043: LIST
26044: LIST
26045: PUSH
26046: LD_INT 2
26048: PUSH
26049: LD_INT 3
26051: PUSH
26052: EMPTY
26053: LIST
26054: LIST
26055: PUSH
26056: LD_INT 1
26058: PUSH
26059: LD_INT 3
26061: PUSH
26062: EMPTY
26063: LIST
26064: LIST
26065: PUSH
26066: LD_INT 0
26068: PUSH
26069: LD_INT 3
26071: PUSH
26072: EMPTY
26073: LIST
26074: LIST
26075: PUSH
26076: LD_INT 1
26078: NEG
26079: PUSH
26080: LD_INT 2
26082: PUSH
26083: EMPTY
26084: LIST
26085: LIST
26086: PUSH
26087: LD_INT 3
26089: NEG
26090: PUSH
26091: LD_INT 2
26093: NEG
26094: PUSH
26095: EMPTY
26096: LIST
26097: LIST
26098: PUSH
26099: LD_INT 3
26101: NEG
26102: PUSH
26103: LD_INT 3
26105: NEG
26106: PUSH
26107: EMPTY
26108: LIST
26109: LIST
26110: PUSH
26111: EMPTY
26112: LIST
26113: LIST
26114: LIST
26115: LIST
26116: LIST
26117: LIST
26118: LIST
26119: LIST
26120: LIST
26121: LIST
26122: LIST
26123: LIST
26124: LIST
26125: LIST
26126: LIST
26127: LIST
26128: LIST
26129: LIST
26130: LIST
26131: LIST
26132: LIST
26133: LIST
26134: LIST
26135: LIST
26136: LIST
26137: LIST
26138: LIST
26139: LIST
26140: LIST
26141: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26142: LD_ADDR_VAR 0 46
26146: PUSH
26147: LD_INT 0
26149: PUSH
26150: LD_INT 0
26152: PUSH
26153: EMPTY
26154: LIST
26155: LIST
26156: PUSH
26157: LD_INT 0
26159: PUSH
26160: LD_INT 1
26162: NEG
26163: PUSH
26164: EMPTY
26165: LIST
26166: LIST
26167: PUSH
26168: LD_INT 1
26170: PUSH
26171: LD_INT 0
26173: PUSH
26174: EMPTY
26175: LIST
26176: LIST
26177: PUSH
26178: LD_INT 1
26180: PUSH
26181: LD_INT 1
26183: PUSH
26184: EMPTY
26185: LIST
26186: LIST
26187: PUSH
26188: LD_INT 0
26190: PUSH
26191: LD_INT 1
26193: PUSH
26194: EMPTY
26195: LIST
26196: LIST
26197: PUSH
26198: LD_INT 1
26200: NEG
26201: PUSH
26202: LD_INT 0
26204: PUSH
26205: EMPTY
26206: LIST
26207: LIST
26208: PUSH
26209: LD_INT 1
26211: NEG
26212: PUSH
26213: LD_INT 1
26215: NEG
26216: PUSH
26217: EMPTY
26218: LIST
26219: LIST
26220: PUSH
26221: LD_INT 1
26223: NEG
26224: PUSH
26225: LD_INT 2
26227: NEG
26228: PUSH
26229: EMPTY
26230: LIST
26231: LIST
26232: PUSH
26233: LD_INT 0
26235: PUSH
26236: LD_INT 2
26238: NEG
26239: PUSH
26240: EMPTY
26241: LIST
26242: LIST
26243: PUSH
26244: LD_INT 1
26246: PUSH
26247: LD_INT 1
26249: NEG
26250: PUSH
26251: EMPTY
26252: LIST
26253: LIST
26254: PUSH
26255: LD_INT 2
26257: PUSH
26258: LD_INT 0
26260: PUSH
26261: EMPTY
26262: LIST
26263: LIST
26264: PUSH
26265: LD_INT 2
26267: PUSH
26268: LD_INT 1
26270: PUSH
26271: EMPTY
26272: LIST
26273: LIST
26274: PUSH
26275: LD_INT 1
26277: PUSH
26278: LD_INT 2
26280: PUSH
26281: EMPTY
26282: LIST
26283: LIST
26284: PUSH
26285: LD_INT 0
26287: PUSH
26288: LD_INT 2
26290: PUSH
26291: EMPTY
26292: LIST
26293: LIST
26294: PUSH
26295: LD_INT 1
26297: NEG
26298: PUSH
26299: LD_INT 1
26301: PUSH
26302: EMPTY
26303: LIST
26304: LIST
26305: PUSH
26306: LD_INT 2
26308: NEG
26309: PUSH
26310: LD_INT 0
26312: PUSH
26313: EMPTY
26314: LIST
26315: LIST
26316: PUSH
26317: LD_INT 2
26319: NEG
26320: PUSH
26321: LD_INT 1
26323: NEG
26324: PUSH
26325: EMPTY
26326: LIST
26327: LIST
26328: PUSH
26329: LD_INT 1
26331: NEG
26332: PUSH
26333: LD_INT 3
26335: NEG
26336: PUSH
26337: EMPTY
26338: LIST
26339: LIST
26340: PUSH
26341: LD_INT 0
26343: PUSH
26344: LD_INT 3
26346: NEG
26347: PUSH
26348: EMPTY
26349: LIST
26350: LIST
26351: PUSH
26352: LD_INT 1
26354: PUSH
26355: LD_INT 2
26357: NEG
26358: PUSH
26359: EMPTY
26360: LIST
26361: LIST
26362: PUSH
26363: LD_INT 2
26365: PUSH
26366: LD_INT 1
26368: NEG
26369: PUSH
26370: EMPTY
26371: LIST
26372: LIST
26373: PUSH
26374: LD_INT 3
26376: PUSH
26377: LD_INT 0
26379: PUSH
26380: EMPTY
26381: LIST
26382: LIST
26383: PUSH
26384: LD_INT 3
26386: PUSH
26387: LD_INT 1
26389: PUSH
26390: EMPTY
26391: LIST
26392: LIST
26393: PUSH
26394: LD_INT 1
26396: PUSH
26397: LD_INT 3
26399: PUSH
26400: EMPTY
26401: LIST
26402: LIST
26403: PUSH
26404: LD_INT 0
26406: PUSH
26407: LD_INT 3
26409: PUSH
26410: EMPTY
26411: LIST
26412: LIST
26413: PUSH
26414: LD_INT 1
26416: NEG
26417: PUSH
26418: LD_INT 2
26420: PUSH
26421: EMPTY
26422: LIST
26423: LIST
26424: PUSH
26425: LD_INT 2
26427: NEG
26428: PUSH
26429: LD_INT 1
26431: PUSH
26432: EMPTY
26433: LIST
26434: LIST
26435: PUSH
26436: LD_INT 3
26438: NEG
26439: PUSH
26440: LD_INT 0
26442: PUSH
26443: EMPTY
26444: LIST
26445: LIST
26446: PUSH
26447: LD_INT 3
26449: NEG
26450: PUSH
26451: LD_INT 1
26453: NEG
26454: PUSH
26455: EMPTY
26456: LIST
26457: LIST
26458: PUSH
26459: EMPTY
26460: LIST
26461: LIST
26462: LIST
26463: LIST
26464: LIST
26465: LIST
26466: LIST
26467: LIST
26468: LIST
26469: LIST
26470: LIST
26471: LIST
26472: LIST
26473: LIST
26474: LIST
26475: LIST
26476: LIST
26477: LIST
26478: LIST
26479: LIST
26480: LIST
26481: LIST
26482: LIST
26483: LIST
26484: LIST
26485: LIST
26486: LIST
26487: LIST
26488: LIST
26489: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26490: LD_ADDR_VAR 0 47
26494: PUSH
26495: LD_INT 0
26497: PUSH
26498: LD_INT 0
26500: PUSH
26501: EMPTY
26502: LIST
26503: LIST
26504: PUSH
26505: LD_INT 0
26507: PUSH
26508: LD_INT 1
26510: NEG
26511: PUSH
26512: EMPTY
26513: LIST
26514: LIST
26515: PUSH
26516: LD_INT 1
26518: PUSH
26519: LD_INT 0
26521: PUSH
26522: EMPTY
26523: LIST
26524: LIST
26525: PUSH
26526: LD_INT 1
26528: PUSH
26529: LD_INT 1
26531: PUSH
26532: EMPTY
26533: LIST
26534: LIST
26535: PUSH
26536: LD_INT 0
26538: PUSH
26539: LD_INT 1
26541: PUSH
26542: EMPTY
26543: LIST
26544: LIST
26545: PUSH
26546: LD_INT 1
26548: NEG
26549: PUSH
26550: LD_INT 0
26552: PUSH
26553: EMPTY
26554: LIST
26555: LIST
26556: PUSH
26557: LD_INT 1
26559: NEG
26560: PUSH
26561: LD_INT 1
26563: NEG
26564: PUSH
26565: EMPTY
26566: LIST
26567: LIST
26568: PUSH
26569: LD_INT 1
26571: NEG
26572: PUSH
26573: LD_INT 2
26575: NEG
26576: PUSH
26577: EMPTY
26578: LIST
26579: LIST
26580: PUSH
26581: LD_INT 0
26583: PUSH
26584: LD_INT 2
26586: NEG
26587: PUSH
26588: EMPTY
26589: LIST
26590: LIST
26591: PUSH
26592: LD_INT 1
26594: PUSH
26595: LD_INT 1
26597: NEG
26598: PUSH
26599: EMPTY
26600: LIST
26601: LIST
26602: PUSH
26603: LD_INT 2
26605: NEG
26606: PUSH
26607: LD_INT 1
26609: NEG
26610: PUSH
26611: EMPTY
26612: LIST
26613: LIST
26614: PUSH
26615: LD_INT 2
26617: NEG
26618: PUSH
26619: LD_INT 2
26621: NEG
26622: PUSH
26623: EMPTY
26624: LIST
26625: LIST
26626: PUSH
26627: EMPTY
26628: LIST
26629: LIST
26630: LIST
26631: LIST
26632: LIST
26633: LIST
26634: LIST
26635: LIST
26636: LIST
26637: LIST
26638: LIST
26639: LIST
26640: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
26641: LD_ADDR_VAR 0 48
26645: PUSH
26646: LD_INT 0
26648: PUSH
26649: LD_INT 0
26651: PUSH
26652: EMPTY
26653: LIST
26654: LIST
26655: PUSH
26656: LD_INT 0
26658: PUSH
26659: LD_INT 1
26661: NEG
26662: PUSH
26663: EMPTY
26664: LIST
26665: LIST
26666: PUSH
26667: LD_INT 1
26669: PUSH
26670: LD_INT 0
26672: PUSH
26673: EMPTY
26674: LIST
26675: LIST
26676: PUSH
26677: LD_INT 1
26679: PUSH
26680: LD_INT 1
26682: PUSH
26683: EMPTY
26684: LIST
26685: LIST
26686: PUSH
26687: LD_INT 0
26689: PUSH
26690: LD_INT 1
26692: PUSH
26693: EMPTY
26694: LIST
26695: LIST
26696: PUSH
26697: LD_INT 1
26699: NEG
26700: PUSH
26701: LD_INT 0
26703: PUSH
26704: EMPTY
26705: LIST
26706: LIST
26707: PUSH
26708: LD_INT 1
26710: NEG
26711: PUSH
26712: LD_INT 1
26714: NEG
26715: PUSH
26716: EMPTY
26717: LIST
26718: LIST
26719: PUSH
26720: LD_INT 1
26722: NEG
26723: PUSH
26724: LD_INT 2
26726: NEG
26727: PUSH
26728: EMPTY
26729: LIST
26730: LIST
26731: PUSH
26732: LD_INT 0
26734: PUSH
26735: LD_INT 2
26737: NEG
26738: PUSH
26739: EMPTY
26740: LIST
26741: LIST
26742: PUSH
26743: LD_INT 1
26745: PUSH
26746: LD_INT 1
26748: NEG
26749: PUSH
26750: EMPTY
26751: LIST
26752: LIST
26753: PUSH
26754: LD_INT 2
26756: PUSH
26757: LD_INT 0
26759: PUSH
26760: EMPTY
26761: LIST
26762: LIST
26763: PUSH
26764: LD_INT 2
26766: PUSH
26767: LD_INT 1
26769: PUSH
26770: EMPTY
26771: LIST
26772: LIST
26773: PUSH
26774: EMPTY
26775: LIST
26776: LIST
26777: LIST
26778: LIST
26779: LIST
26780: LIST
26781: LIST
26782: LIST
26783: LIST
26784: LIST
26785: LIST
26786: LIST
26787: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
26788: LD_ADDR_VAR 0 49
26792: PUSH
26793: LD_INT 0
26795: PUSH
26796: LD_INT 0
26798: PUSH
26799: EMPTY
26800: LIST
26801: LIST
26802: PUSH
26803: LD_INT 0
26805: PUSH
26806: LD_INT 1
26808: NEG
26809: PUSH
26810: EMPTY
26811: LIST
26812: LIST
26813: PUSH
26814: LD_INT 1
26816: PUSH
26817: LD_INT 0
26819: PUSH
26820: EMPTY
26821: LIST
26822: LIST
26823: PUSH
26824: LD_INT 1
26826: PUSH
26827: LD_INT 1
26829: PUSH
26830: EMPTY
26831: LIST
26832: LIST
26833: PUSH
26834: LD_INT 0
26836: PUSH
26837: LD_INT 1
26839: PUSH
26840: EMPTY
26841: LIST
26842: LIST
26843: PUSH
26844: LD_INT 1
26846: NEG
26847: PUSH
26848: LD_INT 0
26850: PUSH
26851: EMPTY
26852: LIST
26853: LIST
26854: PUSH
26855: LD_INT 1
26857: NEG
26858: PUSH
26859: LD_INT 1
26861: NEG
26862: PUSH
26863: EMPTY
26864: LIST
26865: LIST
26866: PUSH
26867: LD_INT 1
26869: PUSH
26870: LD_INT 1
26872: NEG
26873: PUSH
26874: EMPTY
26875: LIST
26876: LIST
26877: PUSH
26878: LD_INT 2
26880: PUSH
26881: LD_INT 0
26883: PUSH
26884: EMPTY
26885: LIST
26886: LIST
26887: PUSH
26888: LD_INT 2
26890: PUSH
26891: LD_INT 1
26893: PUSH
26894: EMPTY
26895: LIST
26896: LIST
26897: PUSH
26898: LD_INT 2
26900: PUSH
26901: LD_INT 2
26903: PUSH
26904: EMPTY
26905: LIST
26906: LIST
26907: PUSH
26908: LD_INT 1
26910: PUSH
26911: LD_INT 2
26913: PUSH
26914: EMPTY
26915: LIST
26916: LIST
26917: PUSH
26918: EMPTY
26919: LIST
26920: LIST
26921: LIST
26922: LIST
26923: LIST
26924: LIST
26925: LIST
26926: LIST
26927: LIST
26928: LIST
26929: LIST
26930: LIST
26931: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
26932: LD_ADDR_VAR 0 50
26936: PUSH
26937: LD_INT 0
26939: PUSH
26940: LD_INT 0
26942: PUSH
26943: EMPTY
26944: LIST
26945: LIST
26946: PUSH
26947: LD_INT 0
26949: PUSH
26950: LD_INT 1
26952: NEG
26953: PUSH
26954: EMPTY
26955: LIST
26956: LIST
26957: PUSH
26958: LD_INT 1
26960: PUSH
26961: LD_INT 0
26963: PUSH
26964: EMPTY
26965: LIST
26966: LIST
26967: PUSH
26968: LD_INT 1
26970: PUSH
26971: LD_INT 1
26973: PUSH
26974: EMPTY
26975: LIST
26976: LIST
26977: PUSH
26978: LD_INT 0
26980: PUSH
26981: LD_INT 1
26983: PUSH
26984: EMPTY
26985: LIST
26986: LIST
26987: PUSH
26988: LD_INT 1
26990: NEG
26991: PUSH
26992: LD_INT 0
26994: PUSH
26995: EMPTY
26996: LIST
26997: LIST
26998: PUSH
26999: LD_INT 1
27001: NEG
27002: PUSH
27003: LD_INT 1
27005: NEG
27006: PUSH
27007: EMPTY
27008: LIST
27009: LIST
27010: PUSH
27011: LD_INT 2
27013: PUSH
27014: LD_INT 1
27016: PUSH
27017: EMPTY
27018: LIST
27019: LIST
27020: PUSH
27021: LD_INT 2
27023: PUSH
27024: LD_INT 2
27026: PUSH
27027: EMPTY
27028: LIST
27029: LIST
27030: PUSH
27031: LD_INT 1
27033: PUSH
27034: LD_INT 2
27036: PUSH
27037: EMPTY
27038: LIST
27039: LIST
27040: PUSH
27041: LD_INT 0
27043: PUSH
27044: LD_INT 2
27046: PUSH
27047: EMPTY
27048: LIST
27049: LIST
27050: PUSH
27051: LD_INT 1
27053: NEG
27054: PUSH
27055: LD_INT 1
27057: PUSH
27058: EMPTY
27059: LIST
27060: LIST
27061: PUSH
27062: EMPTY
27063: LIST
27064: LIST
27065: LIST
27066: LIST
27067: LIST
27068: LIST
27069: LIST
27070: LIST
27071: LIST
27072: LIST
27073: LIST
27074: LIST
27075: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
27076: LD_ADDR_VAR 0 51
27080: PUSH
27081: LD_INT 0
27083: PUSH
27084: LD_INT 0
27086: PUSH
27087: EMPTY
27088: LIST
27089: LIST
27090: PUSH
27091: LD_INT 0
27093: PUSH
27094: LD_INT 1
27096: NEG
27097: PUSH
27098: EMPTY
27099: LIST
27100: LIST
27101: PUSH
27102: LD_INT 1
27104: PUSH
27105: LD_INT 0
27107: PUSH
27108: EMPTY
27109: LIST
27110: LIST
27111: PUSH
27112: LD_INT 1
27114: PUSH
27115: LD_INT 1
27117: PUSH
27118: EMPTY
27119: LIST
27120: LIST
27121: PUSH
27122: LD_INT 0
27124: PUSH
27125: LD_INT 1
27127: PUSH
27128: EMPTY
27129: LIST
27130: LIST
27131: PUSH
27132: LD_INT 1
27134: NEG
27135: PUSH
27136: LD_INT 0
27138: PUSH
27139: EMPTY
27140: LIST
27141: LIST
27142: PUSH
27143: LD_INT 1
27145: NEG
27146: PUSH
27147: LD_INT 1
27149: NEG
27150: PUSH
27151: EMPTY
27152: LIST
27153: LIST
27154: PUSH
27155: LD_INT 1
27157: PUSH
27158: LD_INT 2
27160: PUSH
27161: EMPTY
27162: LIST
27163: LIST
27164: PUSH
27165: LD_INT 0
27167: PUSH
27168: LD_INT 2
27170: PUSH
27171: EMPTY
27172: LIST
27173: LIST
27174: PUSH
27175: LD_INT 1
27177: NEG
27178: PUSH
27179: LD_INT 1
27181: PUSH
27182: EMPTY
27183: LIST
27184: LIST
27185: PUSH
27186: LD_INT 2
27188: NEG
27189: PUSH
27190: LD_INT 0
27192: PUSH
27193: EMPTY
27194: LIST
27195: LIST
27196: PUSH
27197: LD_INT 2
27199: NEG
27200: PUSH
27201: LD_INT 1
27203: NEG
27204: PUSH
27205: EMPTY
27206: LIST
27207: LIST
27208: PUSH
27209: EMPTY
27210: LIST
27211: LIST
27212: LIST
27213: LIST
27214: LIST
27215: LIST
27216: LIST
27217: LIST
27218: LIST
27219: LIST
27220: LIST
27221: LIST
27222: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27223: LD_ADDR_VAR 0 52
27227: PUSH
27228: LD_INT 0
27230: PUSH
27231: LD_INT 0
27233: PUSH
27234: EMPTY
27235: LIST
27236: LIST
27237: PUSH
27238: LD_INT 0
27240: PUSH
27241: LD_INT 1
27243: NEG
27244: PUSH
27245: EMPTY
27246: LIST
27247: LIST
27248: PUSH
27249: LD_INT 1
27251: PUSH
27252: LD_INT 0
27254: PUSH
27255: EMPTY
27256: LIST
27257: LIST
27258: PUSH
27259: LD_INT 1
27261: PUSH
27262: LD_INT 1
27264: PUSH
27265: EMPTY
27266: LIST
27267: LIST
27268: PUSH
27269: LD_INT 0
27271: PUSH
27272: LD_INT 1
27274: PUSH
27275: EMPTY
27276: LIST
27277: LIST
27278: PUSH
27279: LD_INT 1
27281: NEG
27282: PUSH
27283: LD_INT 0
27285: PUSH
27286: EMPTY
27287: LIST
27288: LIST
27289: PUSH
27290: LD_INT 1
27292: NEG
27293: PUSH
27294: LD_INT 1
27296: NEG
27297: PUSH
27298: EMPTY
27299: LIST
27300: LIST
27301: PUSH
27302: LD_INT 1
27304: NEG
27305: PUSH
27306: LD_INT 2
27308: NEG
27309: PUSH
27310: EMPTY
27311: LIST
27312: LIST
27313: PUSH
27314: LD_INT 1
27316: NEG
27317: PUSH
27318: LD_INT 1
27320: PUSH
27321: EMPTY
27322: LIST
27323: LIST
27324: PUSH
27325: LD_INT 2
27327: NEG
27328: PUSH
27329: LD_INT 0
27331: PUSH
27332: EMPTY
27333: LIST
27334: LIST
27335: PUSH
27336: LD_INT 2
27338: NEG
27339: PUSH
27340: LD_INT 1
27342: NEG
27343: PUSH
27344: EMPTY
27345: LIST
27346: LIST
27347: PUSH
27348: LD_INT 2
27350: NEG
27351: PUSH
27352: LD_INT 2
27354: NEG
27355: PUSH
27356: EMPTY
27357: LIST
27358: LIST
27359: PUSH
27360: EMPTY
27361: LIST
27362: LIST
27363: LIST
27364: LIST
27365: LIST
27366: LIST
27367: LIST
27368: LIST
27369: LIST
27370: LIST
27371: LIST
27372: LIST
27373: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27374: LD_ADDR_VAR 0 53
27378: PUSH
27379: LD_INT 0
27381: PUSH
27382: LD_INT 0
27384: PUSH
27385: EMPTY
27386: LIST
27387: LIST
27388: PUSH
27389: LD_INT 0
27391: PUSH
27392: LD_INT 1
27394: NEG
27395: PUSH
27396: EMPTY
27397: LIST
27398: LIST
27399: PUSH
27400: LD_INT 1
27402: PUSH
27403: LD_INT 0
27405: PUSH
27406: EMPTY
27407: LIST
27408: LIST
27409: PUSH
27410: LD_INT 1
27412: PUSH
27413: LD_INT 1
27415: PUSH
27416: EMPTY
27417: LIST
27418: LIST
27419: PUSH
27420: LD_INT 0
27422: PUSH
27423: LD_INT 1
27425: PUSH
27426: EMPTY
27427: LIST
27428: LIST
27429: PUSH
27430: LD_INT 1
27432: NEG
27433: PUSH
27434: LD_INT 0
27436: PUSH
27437: EMPTY
27438: LIST
27439: LIST
27440: PUSH
27441: LD_INT 1
27443: NEG
27444: PUSH
27445: LD_INT 1
27447: NEG
27448: PUSH
27449: EMPTY
27450: LIST
27451: LIST
27452: PUSH
27453: LD_INT 1
27455: NEG
27456: PUSH
27457: LD_INT 2
27459: NEG
27460: PUSH
27461: EMPTY
27462: LIST
27463: LIST
27464: PUSH
27465: LD_INT 0
27467: PUSH
27468: LD_INT 2
27470: NEG
27471: PUSH
27472: EMPTY
27473: LIST
27474: LIST
27475: PUSH
27476: LD_INT 1
27478: PUSH
27479: LD_INT 1
27481: NEG
27482: PUSH
27483: EMPTY
27484: LIST
27485: LIST
27486: PUSH
27487: LD_INT 2
27489: PUSH
27490: LD_INT 0
27492: PUSH
27493: EMPTY
27494: LIST
27495: LIST
27496: PUSH
27497: LD_INT 2
27499: PUSH
27500: LD_INT 1
27502: PUSH
27503: EMPTY
27504: LIST
27505: LIST
27506: PUSH
27507: LD_INT 2
27509: PUSH
27510: LD_INT 2
27512: PUSH
27513: EMPTY
27514: LIST
27515: LIST
27516: PUSH
27517: LD_INT 1
27519: PUSH
27520: LD_INT 2
27522: PUSH
27523: EMPTY
27524: LIST
27525: LIST
27526: PUSH
27527: LD_INT 0
27529: PUSH
27530: LD_INT 2
27532: PUSH
27533: EMPTY
27534: LIST
27535: LIST
27536: PUSH
27537: LD_INT 1
27539: NEG
27540: PUSH
27541: LD_INT 1
27543: PUSH
27544: EMPTY
27545: LIST
27546: LIST
27547: PUSH
27548: LD_INT 2
27550: NEG
27551: PUSH
27552: LD_INT 0
27554: PUSH
27555: EMPTY
27556: LIST
27557: LIST
27558: PUSH
27559: LD_INT 2
27561: NEG
27562: PUSH
27563: LD_INT 1
27565: NEG
27566: PUSH
27567: EMPTY
27568: LIST
27569: LIST
27570: PUSH
27571: LD_INT 2
27573: NEG
27574: PUSH
27575: LD_INT 2
27577: NEG
27578: PUSH
27579: EMPTY
27580: LIST
27581: LIST
27582: PUSH
27583: EMPTY
27584: LIST
27585: LIST
27586: LIST
27587: LIST
27588: LIST
27589: LIST
27590: LIST
27591: LIST
27592: LIST
27593: LIST
27594: LIST
27595: LIST
27596: LIST
27597: LIST
27598: LIST
27599: LIST
27600: LIST
27601: LIST
27602: LIST
27603: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27604: LD_ADDR_VAR 0 54
27608: PUSH
27609: LD_INT 0
27611: PUSH
27612: LD_INT 0
27614: PUSH
27615: EMPTY
27616: LIST
27617: LIST
27618: PUSH
27619: LD_INT 0
27621: PUSH
27622: LD_INT 1
27624: NEG
27625: PUSH
27626: EMPTY
27627: LIST
27628: LIST
27629: PUSH
27630: LD_INT 1
27632: PUSH
27633: LD_INT 0
27635: PUSH
27636: EMPTY
27637: LIST
27638: LIST
27639: PUSH
27640: LD_INT 1
27642: PUSH
27643: LD_INT 1
27645: PUSH
27646: EMPTY
27647: LIST
27648: LIST
27649: PUSH
27650: LD_INT 0
27652: PUSH
27653: LD_INT 1
27655: PUSH
27656: EMPTY
27657: LIST
27658: LIST
27659: PUSH
27660: LD_INT 1
27662: NEG
27663: PUSH
27664: LD_INT 0
27666: PUSH
27667: EMPTY
27668: LIST
27669: LIST
27670: PUSH
27671: LD_INT 1
27673: NEG
27674: PUSH
27675: LD_INT 1
27677: NEG
27678: PUSH
27679: EMPTY
27680: LIST
27681: LIST
27682: PUSH
27683: LD_INT 1
27685: NEG
27686: PUSH
27687: LD_INT 2
27689: NEG
27690: PUSH
27691: EMPTY
27692: LIST
27693: LIST
27694: PUSH
27695: LD_INT 0
27697: PUSH
27698: LD_INT 2
27700: NEG
27701: PUSH
27702: EMPTY
27703: LIST
27704: LIST
27705: PUSH
27706: LD_INT 1
27708: PUSH
27709: LD_INT 1
27711: NEG
27712: PUSH
27713: EMPTY
27714: LIST
27715: LIST
27716: PUSH
27717: LD_INT 2
27719: PUSH
27720: LD_INT 0
27722: PUSH
27723: EMPTY
27724: LIST
27725: LIST
27726: PUSH
27727: LD_INT 2
27729: PUSH
27730: LD_INT 1
27732: PUSH
27733: EMPTY
27734: LIST
27735: LIST
27736: PUSH
27737: LD_INT 2
27739: PUSH
27740: LD_INT 2
27742: PUSH
27743: EMPTY
27744: LIST
27745: LIST
27746: PUSH
27747: LD_INT 1
27749: PUSH
27750: LD_INT 2
27752: PUSH
27753: EMPTY
27754: LIST
27755: LIST
27756: PUSH
27757: LD_INT 0
27759: PUSH
27760: LD_INT 2
27762: PUSH
27763: EMPTY
27764: LIST
27765: LIST
27766: PUSH
27767: LD_INT 1
27769: NEG
27770: PUSH
27771: LD_INT 1
27773: PUSH
27774: EMPTY
27775: LIST
27776: LIST
27777: PUSH
27778: LD_INT 2
27780: NEG
27781: PUSH
27782: LD_INT 0
27784: PUSH
27785: EMPTY
27786: LIST
27787: LIST
27788: PUSH
27789: LD_INT 2
27791: NEG
27792: PUSH
27793: LD_INT 1
27795: NEG
27796: PUSH
27797: EMPTY
27798: LIST
27799: LIST
27800: PUSH
27801: LD_INT 2
27803: NEG
27804: PUSH
27805: LD_INT 2
27807: NEG
27808: PUSH
27809: EMPTY
27810: LIST
27811: LIST
27812: PUSH
27813: EMPTY
27814: LIST
27815: LIST
27816: LIST
27817: LIST
27818: LIST
27819: LIST
27820: LIST
27821: LIST
27822: LIST
27823: LIST
27824: LIST
27825: LIST
27826: LIST
27827: LIST
27828: LIST
27829: LIST
27830: LIST
27831: LIST
27832: LIST
27833: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27834: LD_ADDR_VAR 0 55
27838: PUSH
27839: LD_INT 0
27841: PUSH
27842: LD_INT 0
27844: PUSH
27845: EMPTY
27846: LIST
27847: LIST
27848: PUSH
27849: LD_INT 0
27851: PUSH
27852: LD_INT 1
27854: NEG
27855: PUSH
27856: EMPTY
27857: LIST
27858: LIST
27859: PUSH
27860: LD_INT 1
27862: PUSH
27863: LD_INT 0
27865: PUSH
27866: EMPTY
27867: LIST
27868: LIST
27869: PUSH
27870: LD_INT 1
27872: PUSH
27873: LD_INT 1
27875: PUSH
27876: EMPTY
27877: LIST
27878: LIST
27879: PUSH
27880: LD_INT 0
27882: PUSH
27883: LD_INT 1
27885: PUSH
27886: EMPTY
27887: LIST
27888: LIST
27889: PUSH
27890: LD_INT 1
27892: NEG
27893: PUSH
27894: LD_INT 0
27896: PUSH
27897: EMPTY
27898: LIST
27899: LIST
27900: PUSH
27901: LD_INT 1
27903: NEG
27904: PUSH
27905: LD_INT 1
27907: NEG
27908: PUSH
27909: EMPTY
27910: LIST
27911: LIST
27912: PUSH
27913: LD_INT 1
27915: NEG
27916: PUSH
27917: LD_INT 2
27919: NEG
27920: PUSH
27921: EMPTY
27922: LIST
27923: LIST
27924: PUSH
27925: LD_INT 0
27927: PUSH
27928: LD_INT 2
27930: NEG
27931: PUSH
27932: EMPTY
27933: LIST
27934: LIST
27935: PUSH
27936: LD_INT 1
27938: PUSH
27939: LD_INT 1
27941: NEG
27942: PUSH
27943: EMPTY
27944: LIST
27945: LIST
27946: PUSH
27947: LD_INT 2
27949: PUSH
27950: LD_INT 0
27952: PUSH
27953: EMPTY
27954: LIST
27955: LIST
27956: PUSH
27957: LD_INT 2
27959: PUSH
27960: LD_INT 1
27962: PUSH
27963: EMPTY
27964: LIST
27965: LIST
27966: PUSH
27967: LD_INT 2
27969: PUSH
27970: LD_INT 2
27972: PUSH
27973: EMPTY
27974: LIST
27975: LIST
27976: PUSH
27977: LD_INT 1
27979: PUSH
27980: LD_INT 2
27982: PUSH
27983: EMPTY
27984: LIST
27985: LIST
27986: PUSH
27987: LD_INT 0
27989: PUSH
27990: LD_INT 2
27992: PUSH
27993: EMPTY
27994: LIST
27995: LIST
27996: PUSH
27997: LD_INT 1
27999: NEG
28000: PUSH
28001: LD_INT 1
28003: PUSH
28004: EMPTY
28005: LIST
28006: LIST
28007: PUSH
28008: LD_INT 2
28010: NEG
28011: PUSH
28012: LD_INT 0
28014: PUSH
28015: EMPTY
28016: LIST
28017: LIST
28018: PUSH
28019: LD_INT 2
28021: NEG
28022: PUSH
28023: LD_INT 1
28025: NEG
28026: PUSH
28027: EMPTY
28028: LIST
28029: LIST
28030: PUSH
28031: LD_INT 2
28033: NEG
28034: PUSH
28035: LD_INT 2
28037: NEG
28038: PUSH
28039: EMPTY
28040: LIST
28041: LIST
28042: PUSH
28043: EMPTY
28044: LIST
28045: LIST
28046: LIST
28047: LIST
28048: LIST
28049: LIST
28050: LIST
28051: LIST
28052: LIST
28053: LIST
28054: LIST
28055: LIST
28056: LIST
28057: LIST
28058: LIST
28059: LIST
28060: LIST
28061: LIST
28062: LIST
28063: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28064: LD_ADDR_VAR 0 56
28068: PUSH
28069: LD_INT 0
28071: PUSH
28072: LD_INT 0
28074: PUSH
28075: EMPTY
28076: LIST
28077: LIST
28078: PUSH
28079: LD_INT 0
28081: PUSH
28082: LD_INT 1
28084: NEG
28085: PUSH
28086: EMPTY
28087: LIST
28088: LIST
28089: PUSH
28090: LD_INT 1
28092: PUSH
28093: LD_INT 0
28095: PUSH
28096: EMPTY
28097: LIST
28098: LIST
28099: PUSH
28100: LD_INT 1
28102: PUSH
28103: LD_INT 1
28105: PUSH
28106: EMPTY
28107: LIST
28108: LIST
28109: PUSH
28110: LD_INT 0
28112: PUSH
28113: LD_INT 1
28115: PUSH
28116: EMPTY
28117: LIST
28118: LIST
28119: PUSH
28120: LD_INT 1
28122: NEG
28123: PUSH
28124: LD_INT 0
28126: PUSH
28127: EMPTY
28128: LIST
28129: LIST
28130: PUSH
28131: LD_INT 1
28133: NEG
28134: PUSH
28135: LD_INT 1
28137: NEG
28138: PUSH
28139: EMPTY
28140: LIST
28141: LIST
28142: PUSH
28143: LD_INT 1
28145: NEG
28146: PUSH
28147: LD_INT 2
28149: NEG
28150: PUSH
28151: EMPTY
28152: LIST
28153: LIST
28154: PUSH
28155: LD_INT 0
28157: PUSH
28158: LD_INT 2
28160: NEG
28161: PUSH
28162: EMPTY
28163: LIST
28164: LIST
28165: PUSH
28166: LD_INT 1
28168: PUSH
28169: LD_INT 1
28171: NEG
28172: PUSH
28173: EMPTY
28174: LIST
28175: LIST
28176: PUSH
28177: LD_INT 2
28179: PUSH
28180: LD_INT 0
28182: PUSH
28183: EMPTY
28184: LIST
28185: LIST
28186: PUSH
28187: LD_INT 2
28189: PUSH
28190: LD_INT 1
28192: PUSH
28193: EMPTY
28194: LIST
28195: LIST
28196: PUSH
28197: LD_INT 2
28199: PUSH
28200: LD_INT 2
28202: PUSH
28203: EMPTY
28204: LIST
28205: LIST
28206: PUSH
28207: LD_INT 1
28209: PUSH
28210: LD_INT 2
28212: PUSH
28213: EMPTY
28214: LIST
28215: LIST
28216: PUSH
28217: LD_INT 0
28219: PUSH
28220: LD_INT 2
28222: PUSH
28223: EMPTY
28224: LIST
28225: LIST
28226: PUSH
28227: LD_INT 1
28229: NEG
28230: PUSH
28231: LD_INT 1
28233: PUSH
28234: EMPTY
28235: LIST
28236: LIST
28237: PUSH
28238: LD_INT 2
28240: NEG
28241: PUSH
28242: LD_INT 0
28244: PUSH
28245: EMPTY
28246: LIST
28247: LIST
28248: PUSH
28249: LD_INT 2
28251: NEG
28252: PUSH
28253: LD_INT 1
28255: NEG
28256: PUSH
28257: EMPTY
28258: LIST
28259: LIST
28260: PUSH
28261: LD_INT 2
28263: NEG
28264: PUSH
28265: LD_INT 2
28267: NEG
28268: PUSH
28269: EMPTY
28270: LIST
28271: LIST
28272: PUSH
28273: EMPTY
28274: LIST
28275: LIST
28276: LIST
28277: LIST
28278: LIST
28279: LIST
28280: LIST
28281: LIST
28282: LIST
28283: LIST
28284: LIST
28285: LIST
28286: LIST
28287: LIST
28288: LIST
28289: LIST
28290: LIST
28291: LIST
28292: LIST
28293: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28294: LD_ADDR_VAR 0 57
28298: PUSH
28299: LD_INT 0
28301: PUSH
28302: LD_INT 0
28304: PUSH
28305: EMPTY
28306: LIST
28307: LIST
28308: PUSH
28309: LD_INT 0
28311: PUSH
28312: LD_INT 1
28314: NEG
28315: PUSH
28316: EMPTY
28317: LIST
28318: LIST
28319: PUSH
28320: LD_INT 1
28322: PUSH
28323: LD_INT 0
28325: PUSH
28326: EMPTY
28327: LIST
28328: LIST
28329: PUSH
28330: LD_INT 1
28332: PUSH
28333: LD_INT 1
28335: PUSH
28336: EMPTY
28337: LIST
28338: LIST
28339: PUSH
28340: LD_INT 0
28342: PUSH
28343: LD_INT 1
28345: PUSH
28346: EMPTY
28347: LIST
28348: LIST
28349: PUSH
28350: LD_INT 1
28352: NEG
28353: PUSH
28354: LD_INT 0
28356: PUSH
28357: EMPTY
28358: LIST
28359: LIST
28360: PUSH
28361: LD_INT 1
28363: NEG
28364: PUSH
28365: LD_INT 1
28367: NEG
28368: PUSH
28369: EMPTY
28370: LIST
28371: LIST
28372: PUSH
28373: LD_INT 1
28375: NEG
28376: PUSH
28377: LD_INT 2
28379: NEG
28380: PUSH
28381: EMPTY
28382: LIST
28383: LIST
28384: PUSH
28385: LD_INT 0
28387: PUSH
28388: LD_INT 2
28390: NEG
28391: PUSH
28392: EMPTY
28393: LIST
28394: LIST
28395: PUSH
28396: LD_INT 1
28398: PUSH
28399: LD_INT 1
28401: NEG
28402: PUSH
28403: EMPTY
28404: LIST
28405: LIST
28406: PUSH
28407: LD_INT 2
28409: PUSH
28410: LD_INT 0
28412: PUSH
28413: EMPTY
28414: LIST
28415: LIST
28416: PUSH
28417: LD_INT 2
28419: PUSH
28420: LD_INT 1
28422: PUSH
28423: EMPTY
28424: LIST
28425: LIST
28426: PUSH
28427: LD_INT 2
28429: PUSH
28430: LD_INT 2
28432: PUSH
28433: EMPTY
28434: LIST
28435: LIST
28436: PUSH
28437: LD_INT 1
28439: PUSH
28440: LD_INT 2
28442: PUSH
28443: EMPTY
28444: LIST
28445: LIST
28446: PUSH
28447: LD_INT 0
28449: PUSH
28450: LD_INT 2
28452: PUSH
28453: EMPTY
28454: LIST
28455: LIST
28456: PUSH
28457: LD_INT 1
28459: NEG
28460: PUSH
28461: LD_INT 1
28463: PUSH
28464: EMPTY
28465: LIST
28466: LIST
28467: PUSH
28468: LD_INT 2
28470: NEG
28471: PUSH
28472: LD_INT 0
28474: PUSH
28475: EMPTY
28476: LIST
28477: LIST
28478: PUSH
28479: LD_INT 2
28481: NEG
28482: PUSH
28483: LD_INT 1
28485: NEG
28486: PUSH
28487: EMPTY
28488: LIST
28489: LIST
28490: PUSH
28491: LD_INT 2
28493: NEG
28494: PUSH
28495: LD_INT 2
28497: NEG
28498: PUSH
28499: EMPTY
28500: LIST
28501: LIST
28502: PUSH
28503: EMPTY
28504: LIST
28505: LIST
28506: LIST
28507: LIST
28508: LIST
28509: LIST
28510: LIST
28511: LIST
28512: LIST
28513: LIST
28514: LIST
28515: LIST
28516: LIST
28517: LIST
28518: LIST
28519: LIST
28520: LIST
28521: LIST
28522: LIST
28523: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28524: LD_ADDR_VAR 0 58
28528: PUSH
28529: LD_INT 0
28531: PUSH
28532: LD_INT 0
28534: PUSH
28535: EMPTY
28536: LIST
28537: LIST
28538: PUSH
28539: LD_INT 0
28541: PUSH
28542: LD_INT 1
28544: NEG
28545: PUSH
28546: EMPTY
28547: LIST
28548: LIST
28549: PUSH
28550: LD_INT 1
28552: PUSH
28553: LD_INT 0
28555: PUSH
28556: EMPTY
28557: LIST
28558: LIST
28559: PUSH
28560: LD_INT 1
28562: PUSH
28563: LD_INT 1
28565: PUSH
28566: EMPTY
28567: LIST
28568: LIST
28569: PUSH
28570: LD_INT 0
28572: PUSH
28573: LD_INT 1
28575: PUSH
28576: EMPTY
28577: LIST
28578: LIST
28579: PUSH
28580: LD_INT 1
28582: NEG
28583: PUSH
28584: LD_INT 0
28586: PUSH
28587: EMPTY
28588: LIST
28589: LIST
28590: PUSH
28591: LD_INT 1
28593: NEG
28594: PUSH
28595: LD_INT 1
28597: NEG
28598: PUSH
28599: EMPTY
28600: LIST
28601: LIST
28602: PUSH
28603: LD_INT 1
28605: NEG
28606: PUSH
28607: LD_INT 2
28609: NEG
28610: PUSH
28611: EMPTY
28612: LIST
28613: LIST
28614: PUSH
28615: LD_INT 0
28617: PUSH
28618: LD_INT 2
28620: NEG
28621: PUSH
28622: EMPTY
28623: LIST
28624: LIST
28625: PUSH
28626: LD_INT 1
28628: PUSH
28629: LD_INT 1
28631: NEG
28632: PUSH
28633: EMPTY
28634: LIST
28635: LIST
28636: PUSH
28637: LD_INT 2
28639: PUSH
28640: LD_INT 0
28642: PUSH
28643: EMPTY
28644: LIST
28645: LIST
28646: PUSH
28647: LD_INT 2
28649: PUSH
28650: LD_INT 1
28652: PUSH
28653: EMPTY
28654: LIST
28655: LIST
28656: PUSH
28657: LD_INT 2
28659: PUSH
28660: LD_INT 2
28662: PUSH
28663: EMPTY
28664: LIST
28665: LIST
28666: PUSH
28667: LD_INT 1
28669: PUSH
28670: LD_INT 2
28672: PUSH
28673: EMPTY
28674: LIST
28675: LIST
28676: PUSH
28677: LD_INT 0
28679: PUSH
28680: LD_INT 2
28682: PUSH
28683: EMPTY
28684: LIST
28685: LIST
28686: PUSH
28687: LD_INT 1
28689: NEG
28690: PUSH
28691: LD_INT 1
28693: PUSH
28694: EMPTY
28695: LIST
28696: LIST
28697: PUSH
28698: LD_INT 2
28700: NEG
28701: PUSH
28702: LD_INT 0
28704: PUSH
28705: EMPTY
28706: LIST
28707: LIST
28708: PUSH
28709: LD_INT 2
28711: NEG
28712: PUSH
28713: LD_INT 1
28715: NEG
28716: PUSH
28717: EMPTY
28718: LIST
28719: LIST
28720: PUSH
28721: LD_INT 2
28723: NEG
28724: PUSH
28725: LD_INT 2
28727: NEG
28728: PUSH
28729: EMPTY
28730: LIST
28731: LIST
28732: PUSH
28733: EMPTY
28734: LIST
28735: LIST
28736: LIST
28737: LIST
28738: LIST
28739: LIST
28740: LIST
28741: LIST
28742: LIST
28743: LIST
28744: LIST
28745: LIST
28746: LIST
28747: LIST
28748: LIST
28749: LIST
28750: LIST
28751: LIST
28752: LIST
28753: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28754: LD_ADDR_VAR 0 59
28758: PUSH
28759: LD_INT 0
28761: PUSH
28762: LD_INT 0
28764: PUSH
28765: EMPTY
28766: LIST
28767: LIST
28768: PUSH
28769: LD_INT 0
28771: PUSH
28772: LD_INT 1
28774: NEG
28775: PUSH
28776: EMPTY
28777: LIST
28778: LIST
28779: PUSH
28780: LD_INT 1
28782: PUSH
28783: LD_INT 0
28785: PUSH
28786: EMPTY
28787: LIST
28788: LIST
28789: PUSH
28790: LD_INT 1
28792: PUSH
28793: LD_INT 1
28795: PUSH
28796: EMPTY
28797: LIST
28798: LIST
28799: PUSH
28800: LD_INT 0
28802: PUSH
28803: LD_INT 1
28805: PUSH
28806: EMPTY
28807: LIST
28808: LIST
28809: PUSH
28810: LD_INT 1
28812: NEG
28813: PUSH
28814: LD_INT 0
28816: PUSH
28817: EMPTY
28818: LIST
28819: LIST
28820: PUSH
28821: LD_INT 1
28823: NEG
28824: PUSH
28825: LD_INT 1
28827: NEG
28828: PUSH
28829: EMPTY
28830: LIST
28831: LIST
28832: PUSH
28833: EMPTY
28834: LIST
28835: LIST
28836: LIST
28837: LIST
28838: LIST
28839: LIST
28840: LIST
28841: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28842: LD_ADDR_VAR 0 60
28846: PUSH
28847: LD_INT 0
28849: PUSH
28850: LD_INT 0
28852: PUSH
28853: EMPTY
28854: LIST
28855: LIST
28856: PUSH
28857: LD_INT 0
28859: PUSH
28860: LD_INT 1
28862: NEG
28863: PUSH
28864: EMPTY
28865: LIST
28866: LIST
28867: PUSH
28868: LD_INT 1
28870: PUSH
28871: LD_INT 0
28873: PUSH
28874: EMPTY
28875: LIST
28876: LIST
28877: PUSH
28878: LD_INT 1
28880: PUSH
28881: LD_INT 1
28883: PUSH
28884: EMPTY
28885: LIST
28886: LIST
28887: PUSH
28888: LD_INT 0
28890: PUSH
28891: LD_INT 1
28893: PUSH
28894: EMPTY
28895: LIST
28896: LIST
28897: PUSH
28898: LD_INT 1
28900: NEG
28901: PUSH
28902: LD_INT 0
28904: PUSH
28905: EMPTY
28906: LIST
28907: LIST
28908: PUSH
28909: LD_INT 1
28911: NEG
28912: PUSH
28913: LD_INT 1
28915: NEG
28916: PUSH
28917: EMPTY
28918: LIST
28919: LIST
28920: PUSH
28921: EMPTY
28922: LIST
28923: LIST
28924: LIST
28925: LIST
28926: LIST
28927: LIST
28928: LIST
28929: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28930: LD_ADDR_VAR 0 61
28934: PUSH
28935: LD_INT 0
28937: PUSH
28938: LD_INT 0
28940: PUSH
28941: EMPTY
28942: LIST
28943: LIST
28944: PUSH
28945: LD_INT 0
28947: PUSH
28948: LD_INT 1
28950: NEG
28951: PUSH
28952: EMPTY
28953: LIST
28954: LIST
28955: PUSH
28956: LD_INT 1
28958: PUSH
28959: LD_INT 0
28961: PUSH
28962: EMPTY
28963: LIST
28964: LIST
28965: PUSH
28966: LD_INT 1
28968: PUSH
28969: LD_INT 1
28971: PUSH
28972: EMPTY
28973: LIST
28974: LIST
28975: PUSH
28976: LD_INT 0
28978: PUSH
28979: LD_INT 1
28981: PUSH
28982: EMPTY
28983: LIST
28984: LIST
28985: PUSH
28986: LD_INT 1
28988: NEG
28989: PUSH
28990: LD_INT 0
28992: PUSH
28993: EMPTY
28994: LIST
28995: LIST
28996: PUSH
28997: LD_INT 1
28999: NEG
29000: PUSH
29001: LD_INT 1
29003: NEG
29004: PUSH
29005: EMPTY
29006: LIST
29007: LIST
29008: PUSH
29009: EMPTY
29010: LIST
29011: LIST
29012: LIST
29013: LIST
29014: LIST
29015: LIST
29016: LIST
29017: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29018: LD_ADDR_VAR 0 62
29022: PUSH
29023: LD_INT 0
29025: PUSH
29026: LD_INT 0
29028: PUSH
29029: EMPTY
29030: LIST
29031: LIST
29032: PUSH
29033: LD_INT 0
29035: PUSH
29036: LD_INT 1
29038: NEG
29039: PUSH
29040: EMPTY
29041: LIST
29042: LIST
29043: PUSH
29044: LD_INT 1
29046: PUSH
29047: LD_INT 0
29049: PUSH
29050: EMPTY
29051: LIST
29052: LIST
29053: PUSH
29054: LD_INT 1
29056: PUSH
29057: LD_INT 1
29059: PUSH
29060: EMPTY
29061: LIST
29062: LIST
29063: PUSH
29064: LD_INT 0
29066: PUSH
29067: LD_INT 1
29069: PUSH
29070: EMPTY
29071: LIST
29072: LIST
29073: PUSH
29074: LD_INT 1
29076: NEG
29077: PUSH
29078: LD_INT 0
29080: PUSH
29081: EMPTY
29082: LIST
29083: LIST
29084: PUSH
29085: LD_INT 1
29087: NEG
29088: PUSH
29089: LD_INT 1
29091: NEG
29092: PUSH
29093: EMPTY
29094: LIST
29095: LIST
29096: PUSH
29097: EMPTY
29098: LIST
29099: LIST
29100: LIST
29101: LIST
29102: LIST
29103: LIST
29104: LIST
29105: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29106: LD_ADDR_VAR 0 63
29110: PUSH
29111: LD_INT 0
29113: PUSH
29114: LD_INT 0
29116: PUSH
29117: EMPTY
29118: LIST
29119: LIST
29120: PUSH
29121: LD_INT 0
29123: PUSH
29124: LD_INT 1
29126: NEG
29127: PUSH
29128: EMPTY
29129: LIST
29130: LIST
29131: PUSH
29132: LD_INT 1
29134: PUSH
29135: LD_INT 0
29137: PUSH
29138: EMPTY
29139: LIST
29140: LIST
29141: PUSH
29142: LD_INT 1
29144: PUSH
29145: LD_INT 1
29147: PUSH
29148: EMPTY
29149: LIST
29150: LIST
29151: PUSH
29152: LD_INT 0
29154: PUSH
29155: LD_INT 1
29157: PUSH
29158: EMPTY
29159: LIST
29160: LIST
29161: PUSH
29162: LD_INT 1
29164: NEG
29165: PUSH
29166: LD_INT 0
29168: PUSH
29169: EMPTY
29170: LIST
29171: LIST
29172: PUSH
29173: LD_INT 1
29175: NEG
29176: PUSH
29177: LD_INT 1
29179: NEG
29180: PUSH
29181: EMPTY
29182: LIST
29183: LIST
29184: PUSH
29185: EMPTY
29186: LIST
29187: LIST
29188: LIST
29189: LIST
29190: LIST
29191: LIST
29192: LIST
29193: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29194: LD_ADDR_VAR 0 64
29198: PUSH
29199: LD_INT 0
29201: PUSH
29202: LD_INT 0
29204: PUSH
29205: EMPTY
29206: LIST
29207: LIST
29208: PUSH
29209: LD_INT 0
29211: PUSH
29212: LD_INT 1
29214: NEG
29215: PUSH
29216: EMPTY
29217: LIST
29218: LIST
29219: PUSH
29220: LD_INT 1
29222: PUSH
29223: LD_INT 0
29225: PUSH
29226: EMPTY
29227: LIST
29228: LIST
29229: PUSH
29230: LD_INT 1
29232: PUSH
29233: LD_INT 1
29235: PUSH
29236: EMPTY
29237: LIST
29238: LIST
29239: PUSH
29240: LD_INT 0
29242: PUSH
29243: LD_INT 1
29245: PUSH
29246: EMPTY
29247: LIST
29248: LIST
29249: PUSH
29250: LD_INT 1
29252: NEG
29253: PUSH
29254: LD_INT 0
29256: PUSH
29257: EMPTY
29258: LIST
29259: LIST
29260: PUSH
29261: LD_INT 1
29263: NEG
29264: PUSH
29265: LD_INT 1
29267: NEG
29268: PUSH
29269: EMPTY
29270: LIST
29271: LIST
29272: PUSH
29273: EMPTY
29274: LIST
29275: LIST
29276: LIST
29277: LIST
29278: LIST
29279: LIST
29280: LIST
29281: ST_TO_ADDR
// end ; 1 :
29282: GO 35179
29284: LD_INT 1
29286: DOUBLE
29287: EQUAL
29288: IFTRUE 29292
29290: GO 31915
29292: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29293: LD_ADDR_VAR 0 11
29297: PUSH
29298: LD_INT 1
29300: NEG
29301: PUSH
29302: LD_INT 3
29304: NEG
29305: PUSH
29306: EMPTY
29307: LIST
29308: LIST
29309: PUSH
29310: LD_INT 0
29312: PUSH
29313: LD_INT 3
29315: NEG
29316: PUSH
29317: EMPTY
29318: LIST
29319: LIST
29320: PUSH
29321: LD_INT 1
29323: PUSH
29324: LD_INT 2
29326: NEG
29327: PUSH
29328: EMPTY
29329: LIST
29330: LIST
29331: PUSH
29332: EMPTY
29333: LIST
29334: LIST
29335: LIST
29336: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29337: LD_ADDR_VAR 0 12
29341: PUSH
29342: LD_INT 2
29344: PUSH
29345: LD_INT 1
29347: NEG
29348: PUSH
29349: EMPTY
29350: LIST
29351: LIST
29352: PUSH
29353: LD_INT 3
29355: PUSH
29356: LD_INT 0
29358: PUSH
29359: EMPTY
29360: LIST
29361: LIST
29362: PUSH
29363: LD_INT 3
29365: PUSH
29366: LD_INT 1
29368: PUSH
29369: EMPTY
29370: LIST
29371: LIST
29372: PUSH
29373: EMPTY
29374: LIST
29375: LIST
29376: LIST
29377: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29378: LD_ADDR_VAR 0 13
29382: PUSH
29383: LD_INT 3
29385: PUSH
29386: LD_INT 2
29388: PUSH
29389: EMPTY
29390: LIST
29391: LIST
29392: PUSH
29393: LD_INT 3
29395: PUSH
29396: LD_INT 3
29398: PUSH
29399: EMPTY
29400: LIST
29401: LIST
29402: PUSH
29403: LD_INT 2
29405: PUSH
29406: LD_INT 3
29408: PUSH
29409: EMPTY
29410: LIST
29411: LIST
29412: PUSH
29413: EMPTY
29414: LIST
29415: LIST
29416: LIST
29417: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29418: LD_ADDR_VAR 0 14
29422: PUSH
29423: LD_INT 1
29425: PUSH
29426: LD_INT 3
29428: PUSH
29429: EMPTY
29430: LIST
29431: LIST
29432: PUSH
29433: LD_INT 0
29435: PUSH
29436: LD_INT 3
29438: PUSH
29439: EMPTY
29440: LIST
29441: LIST
29442: PUSH
29443: LD_INT 1
29445: NEG
29446: PUSH
29447: LD_INT 2
29449: PUSH
29450: EMPTY
29451: LIST
29452: LIST
29453: PUSH
29454: EMPTY
29455: LIST
29456: LIST
29457: LIST
29458: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29459: LD_ADDR_VAR 0 15
29463: PUSH
29464: LD_INT 2
29466: NEG
29467: PUSH
29468: LD_INT 1
29470: PUSH
29471: EMPTY
29472: LIST
29473: LIST
29474: PUSH
29475: LD_INT 3
29477: NEG
29478: PUSH
29479: LD_INT 0
29481: PUSH
29482: EMPTY
29483: LIST
29484: LIST
29485: PUSH
29486: LD_INT 3
29488: NEG
29489: PUSH
29490: LD_INT 1
29492: NEG
29493: PUSH
29494: EMPTY
29495: LIST
29496: LIST
29497: PUSH
29498: EMPTY
29499: LIST
29500: LIST
29501: LIST
29502: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29503: LD_ADDR_VAR 0 16
29507: PUSH
29508: LD_INT 2
29510: NEG
29511: PUSH
29512: LD_INT 3
29514: NEG
29515: PUSH
29516: EMPTY
29517: LIST
29518: LIST
29519: PUSH
29520: LD_INT 3
29522: NEG
29523: PUSH
29524: LD_INT 2
29526: NEG
29527: PUSH
29528: EMPTY
29529: LIST
29530: LIST
29531: PUSH
29532: LD_INT 3
29534: NEG
29535: PUSH
29536: LD_INT 3
29538: NEG
29539: PUSH
29540: EMPTY
29541: LIST
29542: LIST
29543: PUSH
29544: EMPTY
29545: LIST
29546: LIST
29547: LIST
29548: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29549: LD_ADDR_VAR 0 17
29553: PUSH
29554: LD_INT 1
29556: NEG
29557: PUSH
29558: LD_INT 3
29560: NEG
29561: PUSH
29562: EMPTY
29563: LIST
29564: LIST
29565: PUSH
29566: LD_INT 0
29568: PUSH
29569: LD_INT 3
29571: NEG
29572: PUSH
29573: EMPTY
29574: LIST
29575: LIST
29576: PUSH
29577: LD_INT 1
29579: PUSH
29580: LD_INT 2
29582: NEG
29583: PUSH
29584: EMPTY
29585: LIST
29586: LIST
29587: PUSH
29588: EMPTY
29589: LIST
29590: LIST
29591: LIST
29592: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29593: LD_ADDR_VAR 0 18
29597: PUSH
29598: LD_INT 2
29600: PUSH
29601: LD_INT 1
29603: NEG
29604: PUSH
29605: EMPTY
29606: LIST
29607: LIST
29608: PUSH
29609: LD_INT 3
29611: PUSH
29612: LD_INT 0
29614: PUSH
29615: EMPTY
29616: LIST
29617: LIST
29618: PUSH
29619: LD_INT 3
29621: PUSH
29622: LD_INT 1
29624: PUSH
29625: EMPTY
29626: LIST
29627: LIST
29628: PUSH
29629: EMPTY
29630: LIST
29631: LIST
29632: LIST
29633: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29634: LD_ADDR_VAR 0 19
29638: PUSH
29639: LD_INT 3
29641: PUSH
29642: LD_INT 2
29644: PUSH
29645: EMPTY
29646: LIST
29647: LIST
29648: PUSH
29649: LD_INT 3
29651: PUSH
29652: LD_INT 3
29654: PUSH
29655: EMPTY
29656: LIST
29657: LIST
29658: PUSH
29659: LD_INT 2
29661: PUSH
29662: LD_INT 3
29664: PUSH
29665: EMPTY
29666: LIST
29667: LIST
29668: PUSH
29669: EMPTY
29670: LIST
29671: LIST
29672: LIST
29673: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29674: LD_ADDR_VAR 0 20
29678: PUSH
29679: LD_INT 1
29681: PUSH
29682: LD_INT 3
29684: PUSH
29685: EMPTY
29686: LIST
29687: LIST
29688: PUSH
29689: LD_INT 0
29691: PUSH
29692: LD_INT 3
29694: PUSH
29695: EMPTY
29696: LIST
29697: LIST
29698: PUSH
29699: LD_INT 1
29701: NEG
29702: PUSH
29703: LD_INT 2
29705: PUSH
29706: EMPTY
29707: LIST
29708: LIST
29709: PUSH
29710: EMPTY
29711: LIST
29712: LIST
29713: LIST
29714: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29715: LD_ADDR_VAR 0 21
29719: PUSH
29720: LD_INT 2
29722: NEG
29723: PUSH
29724: LD_INT 1
29726: PUSH
29727: EMPTY
29728: LIST
29729: LIST
29730: PUSH
29731: LD_INT 3
29733: NEG
29734: PUSH
29735: LD_INT 0
29737: PUSH
29738: EMPTY
29739: LIST
29740: LIST
29741: PUSH
29742: LD_INT 3
29744: NEG
29745: PUSH
29746: LD_INT 1
29748: NEG
29749: PUSH
29750: EMPTY
29751: LIST
29752: LIST
29753: PUSH
29754: EMPTY
29755: LIST
29756: LIST
29757: LIST
29758: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29759: LD_ADDR_VAR 0 22
29763: PUSH
29764: LD_INT 2
29766: NEG
29767: PUSH
29768: LD_INT 3
29770: NEG
29771: PUSH
29772: EMPTY
29773: LIST
29774: LIST
29775: PUSH
29776: LD_INT 3
29778: NEG
29779: PUSH
29780: LD_INT 2
29782: NEG
29783: PUSH
29784: EMPTY
29785: LIST
29786: LIST
29787: PUSH
29788: LD_INT 3
29790: NEG
29791: PUSH
29792: LD_INT 3
29794: NEG
29795: PUSH
29796: EMPTY
29797: LIST
29798: LIST
29799: PUSH
29800: EMPTY
29801: LIST
29802: LIST
29803: LIST
29804: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
29805: LD_ADDR_VAR 0 23
29809: PUSH
29810: LD_INT 0
29812: PUSH
29813: LD_INT 3
29815: NEG
29816: PUSH
29817: EMPTY
29818: LIST
29819: LIST
29820: PUSH
29821: LD_INT 1
29823: NEG
29824: PUSH
29825: LD_INT 4
29827: NEG
29828: PUSH
29829: EMPTY
29830: LIST
29831: LIST
29832: PUSH
29833: LD_INT 1
29835: PUSH
29836: LD_INT 3
29838: NEG
29839: PUSH
29840: EMPTY
29841: LIST
29842: LIST
29843: PUSH
29844: EMPTY
29845: LIST
29846: LIST
29847: LIST
29848: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
29849: LD_ADDR_VAR 0 24
29853: PUSH
29854: LD_INT 3
29856: PUSH
29857: LD_INT 0
29859: PUSH
29860: EMPTY
29861: LIST
29862: LIST
29863: PUSH
29864: LD_INT 3
29866: PUSH
29867: LD_INT 1
29869: NEG
29870: PUSH
29871: EMPTY
29872: LIST
29873: LIST
29874: PUSH
29875: LD_INT 4
29877: PUSH
29878: LD_INT 1
29880: PUSH
29881: EMPTY
29882: LIST
29883: LIST
29884: PUSH
29885: EMPTY
29886: LIST
29887: LIST
29888: LIST
29889: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
29890: LD_ADDR_VAR 0 25
29894: PUSH
29895: LD_INT 3
29897: PUSH
29898: LD_INT 3
29900: PUSH
29901: EMPTY
29902: LIST
29903: LIST
29904: PUSH
29905: LD_INT 4
29907: PUSH
29908: LD_INT 3
29910: PUSH
29911: EMPTY
29912: LIST
29913: LIST
29914: PUSH
29915: LD_INT 3
29917: PUSH
29918: LD_INT 4
29920: PUSH
29921: EMPTY
29922: LIST
29923: LIST
29924: PUSH
29925: EMPTY
29926: LIST
29927: LIST
29928: LIST
29929: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
29930: LD_ADDR_VAR 0 26
29934: PUSH
29935: LD_INT 0
29937: PUSH
29938: LD_INT 3
29940: PUSH
29941: EMPTY
29942: LIST
29943: LIST
29944: PUSH
29945: LD_INT 1
29947: PUSH
29948: LD_INT 4
29950: PUSH
29951: EMPTY
29952: LIST
29953: LIST
29954: PUSH
29955: LD_INT 1
29957: NEG
29958: PUSH
29959: LD_INT 3
29961: PUSH
29962: EMPTY
29963: LIST
29964: LIST
29965: PUSH
29966: EMPTY
29967: LIST
29968: LIST
29969: LIST
29970: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
29971: LD_ADDR_VAR 0 27
29975: PUSH
29976: LD_INT 3
29978: NEG
29979: PUSH
29980: LD_INT 0
29982: PUSH
29983: EMPTY
29984: LIST
29985: LIST
29986: PUSH
29987: LD_INT 3
29989: NEG
29990: PUSH
29991: LD_INT 1
29993: PUSH
29994: EMPTY
29995: LIST
29996: LIST
29997: PUSH
29998: LD_INT 4
30000: NEG
30001: PUSH
30002: LD_INT 1
30004: NEG
30005: PUSH
30006: EMPTY
30007: LIST
30008: LIST
30009: PUSH
30010: EMPTY
30011: LIST
30012: LIST
30013: LIST
30014: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
30015: LD_ADDR_VAR 0 28
30019: PUSH
30020: LD_INT 3
30022: NEG
30023: PUSH
30024: LD_INT 3
30026: NEG
30027: PUSH
30028: EMPTY
30029: LIST
30030: LIST
30031: PUSH
30032: LD_INT 3
30034: NEG
30035: PUSH
30036: LD_INT 4
30038: NEG
30039: PUSH
30040: EMPTY
30041: LIST
30042: LIST
30043: PUSH
30044: LD_INT 4
30046: NEG
30047: PUSH
30048: LD_INT 3
30050: NEG
30051: PUSH
30052: EMPTY
30053: LIST
30054: LIST
30055: PUSH
30056: EMPTY
30057: LIST
30058: LIST
30059: LIST
30060: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
30061: LD_ADDR_VAR 0 29
30065: PUSH
30066: LD_INT 1
30068: NEG
30069: PUSH
30070: LD_INT 3
30072: NEG
30073: PUSH
30074: EMPTY
30075: LIST
30076: LIST
30077: PUSH
30078: LD_INT 0
30080: PUSH
30081: LD_INT 3
30083: NEG
30084: PUSH
30085: EMPTY
30086: LIST
30087: LIST
30088: PUSH
30089: LD_INT 1
30091: PUSH
30092: LD_INT 2
30094: NEG
30095: PUSH
30096: EMPTY
30097: LIST
30098: LIST
30099: PUSH
30100: LD_INT 1
30102: NEG
30103: PUSH
30104: LD_INT 4
30106: NEG
30107: PUSH
30108: EMPTY
30109: LIST
30110: LIST
30111: PUSH
30112: LD_INT 0
30114: PUSH
30115: LD_INT 4
30117: NEG
30118: PUSH
30119: EMPTY
30120: LIST
30121: LIST
30122: PUSH
30123: LD_INT 1
30125: PUSH
30126: LD_INT 3
30128: NEG
30129: PUSH
30130: EMPTY
30131: LIST
30132: LIST
30133: PUSH
30134: LD_INT 1
30136: NEG
30137: PUSH
30138: LD_INT 5
30140: NEG
30141: PUSH
30142: EMPTY
30143: LIST
30144: LIST
30145: PUSH
30146: LD_INT 0
30148: PUSH
30149: LD_INT 5
30151: NEG
30152: PUSH
30153: EMPTY
30154: LIST
30155: LIST
30156: PUSH
30157: LD_INT 1
30159: PUSH
30160: LD_INT 4
30162: NEG
30163: PUSH
30164: EMPTY
30165: LIST
30166: LIST
30167: PUSH
30168: LD_INT 1
30170: NEG
30171: PUSH
30172: LD_INT 6
30174: NEG
30175: PUSH
30176: EMPTY
30177: LIST
30178: LIST
30179: PUSH
30180: LD_INT 0
30182: PUSH
30183: LD_INT 6
30185: NEG
30186: PUSH
30187: EMPTY
30188: LIST
30189: LIST
30190: PUSH
30191: LD_INT 1
30193: PUSH
30194: LD_INT 5
30196: NEG
30197: PUSH
30198: EMPTY
30199: LIST
30200: LIST
30201: PUSH
30202: EMPTY
30203: LIST
30204: LIST
30205: LIST
30206: LIST
30207: LIST
30208: LIST
30209: LIST
30210: LIST
30211: LIST
30212: LIST
30213: LIST
30214: LIST
30215: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
30216: LD_ADDR_VAR 0 30
30220: PUSH
30221: LD_INT 2
30223: PUSH
30224: LD_INT 1
30226: NEG
30227: PUSH
30228: EMPTY
30229: LIST
30230: LIST
30231: PUSH
30232: LD_INT 3
30234: PUSH
30235: LD_INT 0
30237: PUSH
30238: EMPTY
30239: LIST
30240: LIST
30241: PUSH
30242: LD_INT 3
30244: PUSH
30245: LD_INT 1
30247: PUSH
30248: EMPTY
30249: LIST
30250: LIST
30251: PUSH
30252: LD_INT 3
30254: PUSH
30255: LD_INT 1
30257: NEG
30258: PUSH
30259: EMPTY
30260: LIST
30261: LIST
30262: PUSH
30263: LD_INT 4
30265: PUSH
30266: LD_INT 0
30268: PUSH
30269: EMPTY
30270: LIST
30271: LIST
30272: PUSH
30273: LD_INT 4
30275: PUSH
30276: LD_INT 1
30278: PUSH
30279: EMPTY
30280: LIST
30281: LIST
30282: PUSH
30283: LD_INT 4
30285: PUSH
30286: LD_INT 1
30288: NEG
30289: PUSH
30290: EMPTY
30291: LIST
30292: LIST
30293: PUSH
30294: LD_INT 5
30296: PUSH
30297: LD_INT 0
30299: PUSH
30300: EMPTY
30301: LIST
30302: LIST
30303: PUSH
30304: LD_INT 5
30306: PUSH
30307: LD_INT 1
30309: PUSH
30310: EMPTY
30311: LIST
30312: LIST
30313: PUSH
30314: LD_INT 5
30316: PUSH
30317: LD_INT 1
30319: NEG
30320: PUSH
30321: EMPTY
30322: LIST
30323: LIST
30324: PUSH
30325: LD_INT 6
30327: PUSH
30328: LD_INT 0
30330: PUSH
30331: EMPTY
30332: LIST
30333: LIST
30334: PUSH
30335: LD_INT 6
30337: PUSH
30338: LD_INT 1
30340: PUSH
30341: EMPTY
30342: LIST
30343: LIST
30344: PUSH
30345: EMPTY
30346: LIST
30347: LIST
30348: LIST
30349: LIST
30350: LIST
30351: LIST
30352: LIST
30353: LIST
30354: LIST
30355: LIST
30356: LIST
30357: LIST
30358: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
30359: LD_ADDR_VAR 0 31
30363: PUSH
30364: LD_INT 3
30366: PUSH
30367: LD_INT 2
30369: PUSH
30370: EMPTY
30371: LIST
30372: LIST
30373: PUSH
30374: LD_INT 3
30376: PUSH
30377: LD_INT 3
30379: PUSH
30380: EMPTY
30381: LIST
30382: LIST
30383: PUSH
30384: LD_INT 2
30386: PUSH
30387: LD_INT 3
30389: PUSH
30390: EMPTY
30391: LIST
30392: LIST
30393: PUSH
30394: LD_INT 4
30396: PUSH
30397: LD_INT 3
30399: PUSH
30400: EMPTY
30401: LIST
30402: LIST
30403: PUSH
30404: LD_INT 4
30406: PUSH
30407: LD_INT 4
30409: PUSH
30410: EMPTY
30411: LIST
30412: LIST
30413: PUSH
30414: LD_INT 3
30416: PUSH
30417: LD_INT 4
30419: PUSH
30420: EMPTY
30421: LIST
30422: LIST
30423: PUSH
30424: LD_INT 5
30426: PUSH
30427: LD_INT 4
30429: PUSH
30430: EMPTY
30431: LIST
30432: LIST
30433: PUSH
30434: LD_INT 5
30436: PUSH
30437: LD_INT 5
30439: PUSH
30440: EMPTY
30441: LIST
30442: LIST
30443: PUSH
30444: LD_INT 4
30446: PUSH
30447: LD_INT 5
30449: PUSH
30450: EMPTY
30451: LIST
30452: LIST
30453: PUSH
30454: LD_INT 6
30456: PUSH
30457: LD_INT 5
30459: PUSH
30460: EMPTY
30461: LIST
30462: LIST
30463: PUSH
30464: LD_INT 6
30466: PUSH
30467: LD_INT 6
30469: PUSH
30470: EMPTY
30471: LIST
30472: LIST
30473: PUSH
30474: LD_INT 5
30476: PUSH
30477: LD_INT 6
30479: PUSH
30480: EMPTY
30481: LIST
30482: LIST
30483: PUSH
30484: EMPTY
30485: LIST
30486: LIST
30487: LIST
30488: LIST
30489: LIST
30490: LIST
30491: LIST
30492: LIST
30493: LIST
30494: LIST
30495: LIST
30496: LIST
30497: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
30498: LD_ADDR_VAR 0 32
30502: PUSH
30503: LD_INT 1
30505: PUSH
30506: LD_INT 3
30508: PUSH
30509: EMPTY
30510: LIST
30511: LIST
30512: PUSH
30513: LD_INT 0
30515: PUSH
30516: LD_INT 3
30518: PUSH
30519: EMPTY
30520: LIST
30521: LIST
30522: PUSH
30523: LD_INT 1
30525: NEG
30526: PUSH
30527: LD_INT 2
30529: PUSH
30530: EMPTY
30531: LIST
30532: LIST
30533: PUSH
30534: LD_INT 1
30536: PUSH
30537: LD_INT 4
30539: PUSH
30540: EMPTY
30541: LIST
30542: LIST
30543: PUSH
30544: LD_INT 0
30546: PUSH
30547: LD_INT 4
30549: PUSH
30550: EMPTY
30551: LIST
30552: LIST
30553: PUSH
30554: LD_INT 1
30556: NEG
30557: PUSH
30558: LD_INT 3
30560: PUSH
30561: EMPTY
30562: LIST
30563: LIST
30564: PUSH
30565: LD_INT 1
30567: PUSH
30568: LD_INT 5
30570: PUSH
30571: EMPTY
30572: LIST
30573: LIST
30574: PUSH
30575: LD_INT 0
30577: PUSH
30578: LD_INT 5
30580: PUSH
30581: EMPTY
30582: LIST
30583: LIST
30584: PUSH
30585: LD_INT 1
30587: NEG
30588: PUSH
30589: LD_INT 4
30591: PUSH
30592: EMPTY
30593: LIST
30594: LIST
30595: PUSH
30596: LD_INT 1
30598: PUSH
30599: LD_INT 6
30601: PUSH
30602: EMPTY
30603: LIST
30604: LIST
30605: PUSH
30606: LD_INT 0
30608: PUSH
30609: LD_INT 6
30611: PUSH
30612: EMPTY
30613: LIST
30614: LIST
30615: PUSH
30616: LD_INT 1
30618: NEG
30619: PUSH
30620: LD_INT 5
30622: PUSH
30623: EMPTY
30624: LIST
30625: LIST
30626: PUSH
30627: EMPTY
30628: LIST
30629: LIST
30630: LIST
30631: LIST
30632: LIST
30633: LIST
30634: LIST
30635: LIST
30636: LIST
30637: LIST
30638: LIST
30639: LIST
30640: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
30641: LD_ADDR_VAR 0 33
30645: PUSH
30646: LD_INT 2
30648: NEG
30649: PUSH
30650: LD_INT 1
30652: PUSH
30653: EMPTY
30654: LIST
30655: LIST
30656: PUSH
30657: LD_INT 3
30659: NEG
30660: PUSH
30661: LD_INT 0
30663: PUSH
30664: EMPTY
30665: LIST
30666: LIST
30667: PUSH
30668: LD_INT 3
30670: NEG
30671: PUSH
30672: LD_INT 1
30674: NEG
30675: PUSH
30676: EMPTY
30677: LIST
30678: LIST
30679: PUSH
30680: LD_INT 3
30682: NEG
30683: PUSH
30684: LD_INT 1
30686: PUSH
30687: EMPTY
30688: LIST
30689: LIST
30690: PUSH
30691: LD_INT 4
30693: NEG
30694: PUSH
30695: LD_INT 0
30697: PUSH
30698: EMPTY
30699: LIST
30700: LIST
30701: PUSH
30702: LD_INT 4
30704: NEG
30705: PUSH
30706: LD_INT 1
30708: NEG
30709: PUSH
30710: EMPTY
30711: LIST
30712: LIST
30713: PUSH
30714: LD_INT 4
30716: NEG
30717: PUSH
30718: LD_INT 1
30720: PUSH
30721: EMPTY
30722: LIST
30723: LIST
30724: PUSH
30725: LD_INT 5
30727: NEG
30728: PUSH
30729: LD_INT 0
30731: PUSH
30732: EMPTY
30733: LIST
30734: LIST
30735: PUSH
30736: LD_INT 5
30738: NEG
30739: PUSH
30740: LD_INT 1
30742: NEG
30743: PUSH
30744: EMPTY
30745: LIST
30746: LIST
30747: PUSH
30748: LD_INT 5
30750: NEG
30751: PUSH
30752: LD_INT 1
30754: PUSH
30755: EMPTY
30756: LIST
30757: LIST
30758: PUSH
30759: LD_INT 6
30761: NEG
30762: PUSH
30763: LD_INT 0
30765: PUSH
30766: EMPTY
30767: LIST
30768: LIST
30769: PUSH
30770: LD_INT 6
30772: NEG
30773: PUSH
30774: LD_INT 1
30776: NEG
30777: PUSH
30778: EMPTY
30779: LIST
30780: LIST
30781: PUSH
30782: EMPTY
30783: LIST
30784: LIST
30785: LIST
30786: LIST
30787: LIST
30788: LIST
30789: LIST
30790: LIST
30791: LIST
30792: LIST
30793: LIST
30794: LIST
30795: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
30796: LD_ADDR_VAR 0 34
30800: PUSH
30801: LD_INT 2
30803: NEG
30804: PUSH
30805: LD_INT 3
30807: NEG
30808: PUSH
30809: EMPTY
30810: LIST
30811: LIST
30812: PUSH
30813: LD_INT 3
30815: NEG
30816: PUSH
30817: LD_INT 2
30819: NEG
30820: PUSH
30821: EMPTY
30822: LIST
30823: LIST
30824: PUSH
30825: LD_INT 3
30827: NEG
30828: PUSH
30829: LD_INT 3
30831: NEG
30832: PUSH
30833: EMPTY
30834: LIST
30835: LIST
30836: PUSH
30837: LD_INT 3
30839: NEG
30840: PUSH
30841: LD_INT 4
30843: NEG
30844: PUSH
30845: EMPTY
30846: LIST
30847: LIST
30848: PUSH
30849: LD_INT 4
30851: NEG
30852: PUSH
30853: LD_INT 3
30855: NEG
30856: PUSH
30857: EMPTY
30858: LIST
30859: LIST
30860: PUSH
30861: LD_INT 4
30863: NEG
30864: PUSH
30865: LD_INT 4
30867: NEG
30868: PUSH
30869: EMPTY
30870: LIST
30871: LIST
30872: PUSH
30873: LD_INT 4
30875: NEG
30876: PUSH
30877: LD_INT 5
30879: NEG
30880: PUSH
30881: EMPTY
30882: LIST
30883: LIST
30884: PUSH
30885: LD_INT 5
30887: NEG
30888: PUSH
30889: LD_INT 4
30891: NEG
30892: PUSH
30893: EMPTY
30894: LIST
30895: LIST
30896: PUSH
30897: LD_INT 5
30899: NEG
30900: PUSH
30901: LD_INT 5
30903: NEG
30904: PUSH
30905: EMPTY
30906: LIST
30907: LIST
30908: PUSH
30909: LD_INT 5
30911: NEG
30912: PUSH
30913: LD_INT 6
30915: NEG
30916: PUSH
30917: EMPTY
30918: LIST
30919: LIST
30920: PUSH
30921: LD_INT 6
30923: NEG
30924: PUSH
30925: LD_INT 5
30927: NEG
30928: PUSH
30929: EMPTY
30930: LIST
30931: LIST
30932: PUSH
30933: LD_INT 6
30935: NEG
30936: PUSH
30937: LD_INT 6
30939: NEG
30940: PUSH
30941: EMPTY
30942: LIST
30943: LIST
30944: PUSH
30945: EMPTY
30946: LIST
30947: LIST
30948: LIST
30949: LIST
30950: LIST
30951: LIST
30952: LIST
30953: LIST
30954: LIST
30955: LIST
30956: LIST
30957: LIST
30958: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
30959: LD_ADDR_VAR 0 41
30963: PUSH
30964: LD_INT 0
30966: PUSH
30967: LD_INT 2
30969: NEG
30970: PUSH
30971: EMPTY
30972: LIST
30973: LIST
30974: PUSH
30975: LD_INT 1
30977: NEG
30978: PUSH
30979: LD_INT 3
30981: NEG
30982: PUSH
30983: EMPTY
30984: LIST
30985: LIST
30986: PUSH
30987: LD_INT 1
30989: PUSH
30990: LD_INT 2
30992: NEG
30993: PUSH
30994: EMPTY
30995: LIST
30996: LIST
30997: PUSH
30998: EMPTY
30999: LIST
31000: LIST
31001: LIST
31002: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
31003: LD_ADDR_VAR 0 42
31007: PUSH
31008: LD_INT 2
31010: PUSH
31011: LD_INT 0
31013: PUSH
31014: EMPTY
31015: LIST
31016: LIST
31017: PUSH
31018: LD_INT 2
31020: PUSH
31021: LD_INT 1
31023: NEG
31024: PUSH
31025: EMPTY
31026: LIST
31027: LIST
31028: PUSH
31029: LD_INT 3
31031: PUSH
31032: LD_INT 1
31034: PUSH
31035: EMPTY
31036: LIST
31037: LIST
31038: PUSH
31039: EMPTY
31040: LIST
31041: LIST
31042: LIST
31043: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
31044: LD_ADDR_VAR 0 43
31048: PUSH
31049: LD_INT 2
31051: PUSH
31052: LD_INT 2
31054: PUSH
31055: EMPTY
31056: LIST
31057: LIST
31058: PUSH
31059: LD_INT 3
31061: PUSH
31062: LD_INT 2
31064: PUSH
31065: EMPTY
31066: LIST
31067: LIST
31068: PUSH
31069: LD_INT 2
31071: PUSH
31072: LD_INT 3
31074: PUSH
31075: EMPTY
31076: LIST
31077: LIST
31078: PUSH
31079: EMPTY
31080: LIST
31081: LIST
31082: LIST
31083: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
31084: LD_ADDR_VAR 0 44
31088: PUSH
31089: LD_INT 0
31091: PUSH
31092: LD_INT 2
31094: PUSH
31095: EMPTY
31096: LIST
31097: LIST
31098: PUSH
31099: LD_INT 1
31101: PUSH
31102: LD_INT 3
31104: PUSH
31105: EMPTY
31106: LIST
31107: LIST
31108: PUSH
31109: LD_INT 1
31111: NEG
31112: PUSH
31113: LD_INT 2
31115: PUSH
31116: EMPTY
31117: LIST
31118: LIST
31119: PUSH
31120: EMPTY
31121: LIST
31122: LIST
31123: LIST
31124: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31125: LD_ADDR_VAR 0 45
31129: PUSH
31130: LD_INT 2
31132: NEG
31133: PUSH
31134: LD_INT 0
31136: PUSH
31137: EMPTY
31138: LIST
31139: LIST
31140: PUSH
31141: LD_INT 2
31143: NEG
31144: PUSH
31145: LD_INT 1
31147: PUSH
31148: EMPTY
31149: LIST
31150: LIST
31151: PUSH
31152: LD_INT 3
31154: NEG
31155: PUSH
31156: LD_INT 1
31158: NEG
31159: PUSH
31160: EMPTY
31161: LIST
31162: LIST
31163: PUSH
31164: EMPTY
31165: LIST
31166: LIST
31167: LIST
31168: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
31169: LD_ADDR_VAR 0 46
31173: PUSH
31174: LD_INT 2
31176: NEG
31177: PUSH
31178: LD_INT 2
31180: NEG
31181: PUSH
31182: EMPTY
31183: LIST
31184: LIST
31185: PUSH
31186: LD_INT 2
31188: NEG
31189: PUSH
31190: LD_INT 3
31192: NEG
31193: PUSH
31194: EMPTY
31195: LIST
31196: LIST
31197: PUSH
31198: LD_INT 3
31200: NEG
31201: PUSH
31202: LD_INT 2
31204: NEG
31205: PUSH
31206: EMPTY
31207: LIST
31208: LIST
31209: PUSH
31210: EMPTY
31211: LIST
31212: LIST
31213: LIST
31214: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
31215: LD_ADDR_VAR 0 47
31219: PUSH
31220: LD_INT 2
31222: NEG
31223: PUSH
31224: LD_INT 3
31226: NEG
31227: PUSH
31228: EMPTY
31229: LIST
31230: LIST
31231: PUSH
31232: LD_INT 1
31234: NEG
31235: PUSH
31236: LD_INT 3
31238: NEG
31239: PUSH
31240: EMPTY
31241: LIST
31242: LIST
31243: PUSH
31244: EMPTY
31245: LIST
31246: LIST
31247: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
31248: LD_ADDR_VAR 0 48
31252: PUSH
31253: LD_INT 1
31255: PUSH
31256: LD_INT 2
31258: NEG
31259: PUSH
31260: EMPTY
31261: LIST
31262: LIST
31263: PUSH
31264: LD_INT 2
31266: PUSH
31267: LD_INT 1
31269: NEG
31270: PUSH
31271: EMPTY
31272: LIST
31273: LIST
31274: PUSH
31275: EMPTY
31276: LIST
31277: LIST
31278: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
31279: LD_ADDR_VAR 0 49
31283: PUSH
31284: LD_INT 3
31286: PUSH
31287: LD_INT 1
31289: PUSH
31290: EMPTY
31291: LIST
31292: LIST
31293: PUSH
31294: LD_INT 3
31296: PUSH
31297: LD_INT 2
31299: PUSH
31300: EMPTY
31301: LIST
31302: LIST
31303: PUSH
31304: EMPTY
31305: LIST
31306: LIST
31307: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
31308: LD_ADDR_VAR 0 50
31312: PUSH
31313: LD_INT 2
31315: PUSH
31316: LD_INT 3
31318: PUSH
31319: EMPTY
31320: LIST
31321: LIST
31322: PUSH
31323: LD_INT 1
31325: PUSH
31326: LD_INT 3
31328: PUSH
31329: EMPTY
31330: LIST
31331: LIST
31332: PUSH
31333: EMPTY
31334: LIST
31335: LIST
31336: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
31337: LD_ADDR_VAR 0 51
31341: PUSH
31342: LD_INT 1
31344: NEG
31345: PUSH
31346: LD_INT 2
31348: PUSH
31349: EMPTY
31350: LIST
31351: LIST
31352: PUSH
31353: LD_INT 2
31355: NEG
31356: PUSH
31357: LD_INT 1
31359: PUSH
31360: EMPTY
31361: LIST
31362: LIST
31363: PUSH
31364: EMPTY
31365: LIST
31366: LIST
31367: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
31368: LD_ADDR_VAR 0 52
31372: PUSH
31373: LD_INT 3
31375: NEG
31376: PUSH
31377: LD_INT 1
31379: NEG
31380: PUSH
31381: EMPTY
31382: LIST
31383: LIST
31384: PUSH
31385: LD_INT 3
31387: NEG
31388: PUSH
31389: LD_INT 2
31391: NEG
31392: PUSH
31393: EMPTY
31394: LIST
31395: LIST
31396: PUSH
31397: EMPTY
31398: LIST
31399: LIST
31400: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31401: LD_ADDR_VAR 0 53
31405: PUSH
31406: LD_INT 1
31408: NEG
31409: PUSH
31410: LD_INT 3
31412: NEG
31413: PUSH
31414: EMPTY
31415: LIST
31416: LIST
31417: PUSH
31418: LD_INT 0
31420: PUSH
31421: LD_INT 3
31423: NEG
31424: PUSH
31425: EMPTY
31426: LIST
31427: LIST
31428: PUSH
31429: LD_INT 1
31431: PUSH
31432: LD_INT 2
31434: NEG
31435: PUSH
31436: EMPTY
31437: LIST
31438: LIST
31439: PUSH
31440: EMPTY
31441: LIST
31442: LIST
31443: LIST
31444: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31445: LD_ADDR_VAR 0 54
31449: PUSH
31450: LD_INT 2
31452: PUSH
31453: LD_INT 1
31455: NEG
31456: PUSH
31457: EMPTY
31458: LIST
31459: LIST
31460: PUSH
31461: LD_INT 3
31463: PUSH
31464: LD_INT 0
31466: PUSH
31467: EMPTY
31468: LIST
31469: LIST
31470: PUSH
31471: LD_INT 3
31473: PUSH
31474: LD_INT 1
31476: PUSH
31477: EMPTY
31478: LIST
31479: LIST
31480: PUSH
31481: EMPTY
31482: LIST
31483: LIST
31484: LIST
31485: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31486: LD_ADDR_VAR 0 55
31490: PUSH
31491: LD_INT 3
31493: PUSH
31494: LD_INT 2
31496: PUSH
31497: EMPTY
31498: LIST
31499: LIST
31500: PUSH
31501: LD_INT 3
31503: PUSH
31504: LD_INT 3
31506: PUSH
31507: EMPTY
31508: LIST
31509: LIST
31510: PUSH
31511: LD_INT 2
31513: PUSH
31514: LD_INT 3
31516: PUSH
31517: EMPTY
31518: LIST
31519: LIST
31520: PUSH
31521: EMPTY
31522: LIST
31523: LIST
31524: LIST
31525: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31526: LD_ADDR_VAR 0 56
31530: PUSH
31531: LD_INT 1
31533: PUSH
31534: LD_INT 3
31536: PUSH
31537: EMPTY
31538: LIST
31539: LIST
31540: PUSH
31541: LD_INT 0
31543: PUSH
31544: LD_INT 3
31546: PUSH
31547: EMPTY
31548: LIST
31549: LIST
31550: PUSH
31551: LD_INT 1
31553: NEG
31554: PUSH
31555: LD_INT 2
31557: PUSH
31558: EMPTY
31559: LIST
31560: LIST
31561: PUSH
31562: EMPTY
31563: LIST
31564: LIST
31565: LIST
31566: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31567: LD_ADDR_VAR 0 57
31571: PUSH
31572: LD_INT 2
31574: NEG
31575: PUSH
31576: LD_INT 1
31578: PUSH
31579: EMPTY
31580: LIST
31581: LIST
31582: PUSH
31583: LD_INT 3
31585: NEG
31586: PUSH
31587: LD_INT 0
31589: PUSH
31590: EMPTY
31591: LIST
31592: LIST
31593: PUSH
31594: LD_INT 3
31596: NEG
31597: PUSH
31598: LD_INT 1
31600: NEG
31601: PUSH
31602: EMPTY
31603: LIST
31604: LIST
31605: PUSH
31606: EMPTY
31607: LIST
31608: LIST
31609: LIST
31610: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31611: LD_ADDR_VAR 0 58
31615: PUSH
31616: LD_INT 2
31618: NEG
31619: PUSH
31620: LD_INT 3
31622: NEG
31623: PUSH
31624: EMPTY
31625: LIST
31626: LIST
31627: PUSH
31628: LD_INT 3
31630: NEG
31631: PUSH
31632: LD_INT 2
31634: NEG
31635: PUSH
31636: EMPTY
31637: LIST
31638: LIST
31639: PUSH
31640: LD_INT 3
31642: NEG
31643: PUSH
31644: LD_INT 3
31646: NEG
31647: PUSH
31648: EMPTY
31649: LIST
31650: LIST
31651: PUSH
31652: EMPTY
31653: LIST
31654: LIST
31655: LIST
31656: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
31657: LD_ADDR_VAR 0 59
31661: PUSH
31662: LD_INT 1
31664: NEG
31665: PUSH
31666: LD_INT 2
31668: NEG
31669: PUSH
31670: EMPTY
31671: LIST
31672: LIST
31673: PUSH
31674: LD_INT 0
31676: PUSH
31677: LD_INT 2
31679: NEG
31680: PUSH
31681: EMPTY
31682: LIST
31683: LIST
31684: PUSH
31685: LD_INT 1
31687: PUSH
31688: LD_INT 1
31690: NEG
31691: PUSH
31692: EMPTY
31693: LIST
31694: LIST
31695: PUSH
31696: EMPTY
31697: LIST
31698: LIST
31699: LIST
31700: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
31701: LD_ADDR_VAR 0 60
31705: PUSH
31706: LD_INT 1
31708: PUSH
31709: LD_INT 1
31711: NEG
31712: PUSH
31713: EMPTY
31714: LIST
31715: LIST
31716: PUSH
31717: LD_INT 2
31719: PUSH
31720: LD_INT 0
31722: PUSH
31723: EMPTY
31724: LIST
31725: LIST
31726: PUSH
31727: LD_INT 2
31729: PUSH
31730: LD_INT 1
31732: PUSH
31733: EMPTY
31734: LIST
31735: LIST
31736: PUSH
31737: EMPTY
31738: LIST
31739: LIST
31740: LIST
31741: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
31742: LD_ADDR_VAR 0 61
31746: PUSH
31747: LD_INT 2
31749: PUSH
31750: LD_INT 1
31752: PUSH
31753: EMPTY
31754: LIST
31755: LIST
31756: PUSH
31757: LD_INT 2
31759: PUSH
31760: LD_INT 2
31762: PUSH
31763: EMPTY
31764: LIST
31765: LIST
31766: PUSH
31767: LD_INT 1
31769: PUSH
31770: LD_INT 2
31772: PUSH
31773: EMPTY
31774: LIST
31775: LIST
31776: PUSH
31777: EMPTY
31778: LIST
31779: LIST
31780: LIST
31781: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
31782: LD_ADDR_VAR 0 62
31786: PUSH
31787: LD_INT 1
31789: PUSH
31790: LD_INT 2
31792: PUSH
31793: EMPTY
31794: LIST
31795: LIST
31796: PUSH
31797: LD_INT 0
31799: PUSH
31800: LD_INT 2
31802: PUSH
31803: EMPTY
31804: LIST
31805: LIST
31806: PUSH
31807: LD_INT 1
31809: NEG
31810: PUSH
31811: LD_INT 1
31813: PUSH
31814: EMPTY
31815: LIST
31816: LIST
31817: PUSH
31818: EMPTY
31819: LIST
31820: LIST
31821: LIST
31822: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
31823: LD_ADDR_VAR 0 63
31827: PUSH
31828: LD_INT 1
31830: NEG
31831: PUSH
31832: LD_INT 1
31834: PUSH
31835: EMPTY
31836: LIST
31837: LIST
31838: PUSH
31839: LD_INT 2
31841: NEG
31842: PUSH
31843: LD_INT 0
31845: PUSH
31846: EMPTY
31847: LIST
31848: LIST
31849: PUSH
31850: LD_INT 2
31852: NEG
31853: PUSH
31854: LD_INT 1
31856: NEG
31857: PUSH
31858: EMPTY
31859: LIST
31860: LIST
31861: PUSH
31862: EMPTY
31863: LIST
31864: LIST
31865: LIST
31866: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31867: LD_ADDR_VAR 0 64
31871: PUSH
31872: LD_INT 1
31874: NEG
31875: PUSH
31876: LD_INT 2
31878: NEG
31879: PUSH
31880: EMPTY
31881: LIST
31882: LIST
31883: PUSH
31884: LD_INT 2
31886: NEG
31887: PUSH
31888: LD_INT 1
31890: NEG
31891: PUSH
31892: EMPTY
31893: LIST
31894: LIST
31895: PUSH
31896: LD_INT 2
31898: NEG
31899: PUSH
31900: LD_INT 2
31902: NEG
31903: PUSH
31904: EMPTY
31905: LIST
31906: LIST
31907: PUSH
31908: EMPTY
31909: LIST
31910: LIST
31911: LIST
31912: ST_TO_ADDR
// end ; 2 :
31913: GO 35179
31915: LD_INT 2
31917: DOUBLE
31918: EQUAL
31919: IFTRUE 31923
31921: GO 35178
31923: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
31924: LD_ADDR_VAR 0 29
31928: PUSH
31929: LD_INT 4
31931: PUSH
31932: LD_INT 0
31934: PUSH
31935: EMPTY
31936: LIST
31937: LIST
31938: PUSH
31939: LD_INT 4
31941: PUSH
31942: LD_INT 1
31944: NEG
31945: PUSH
31946: EMPTY
31947: LIST
31948: LIST
31949: PUSH
31950: LD_INT 5
31952: PUSH
31953: LD_INT 0
31955: PUSH
31956: EMPTY
31957: LIST
31958: LIST
31959: PUSH
31960: LD_INT 5
31962: PUSH
31963: LD_INT 1
31965: PUSH
31966: EMPTY
31967: LIST
31968: LIST
31969: PUSH
31970: LD_INT 4
31972: PUSH
31973: LD_INT 1
31975: PUSH
31976: EMPTY
31977: LIST
31978: LIST
31979: PUSH
31980: LD_INT 3
31982: PUSH
31983: LD_INT 0
31985: PUSH
31986: EMPTY
31987: LIST
31988: LIST
31989: PUSH
31990: LD_INT 3
31992: PUSH
31993: LD_INT 1
31995: NEG
31996: PUSH
31997: EMPTY
31998: LIST
31999: LIST
32000: PUSH
32001: LD_INT 3
32003: PUSH
32004: LD_INT 2
32006: NEG
32007: PUSH
32008: EMPTY
32009: LIST
32010: LIST
32011: PUSH
32012: LD_INT 5
32014: PUSH
32015: LD_INT 2
32017: PUSH
32018: EMPTY
32019: LIST
32020: LIST
32021: PUSH
32022: LD_INT 3
32024: PUSH
32025: LD_INT 3
32027: PUSH
32028: EMPTY
32029: LIST
32030: LIST
32031: PUSH
32032: LD_INT 3
32034: PUSH
32035: LD_INT 2
32037: PUSH
32038: EMPTY
32039: LIST
32040: LIST
32041: PUSH
32042: LD_INT 4
32044: PUSH
32045: LD_INT 3
32047: PUSH
32048: EMPTY
32049: LIST
32050: LIST
32051: PUSH
32052: LD_INT 4
32054: PUSH
32055: LD_INT 4
32057: PUSH
32058: EMPTY
32059: LIST
32060: LIST
32061: PUSH
32062: LD_INT 3
32064: PUSH
32065: LD_INT 4
32067: PUSH
32068: EMPTY
32069: LIST
32070: LIST
32071: PUSH
32072: LD_INT 2
32074: PUSH
32075: LD_INT 3
32077: PUSH
32078: EMPTY
32079: LIST
32080: LIST
32081: PUSH
32082: LD_INT 2
32084: PUSH
32085: LD_INT 2
32087: PUSH
32088: EMPTY
32089: LIST
32090: LIST
32091: PUSH
32092: LD_INT 4
32094: PUSH
32095: LD_INT 2
32097: PUSH
32098: EMPTY
32099: LIST
32100: LIST
32101: PUSH
32102: LD_INT 2
32104: PUSH
32105: LD_INT 4
32107: PUSH
32108: EMPTY
32109: LIST
32110: LIST
32111: PUSH
32112: LD_INT 0
32114: PUSH
32115: LD_INT 4
32117: PUSH
32118: EMPTY
32119: LIST
32120: LIST
32121: PUSH
32122: LD_INT 0
32124: PUSH
32125: LD_INT 3
32127: PUSH
32128: EMPTY
32129: LIST
32130: LIST
32131: PUSH
32132: LD_INT 1
32134: PUSH
32135: LD_INT 4
32137: PUSH
32138: EMPTY
32139: LIST
32140: LIST
32141: PUSH
32142: LD_INT 1
32144: PUSH
32145: LD_INT 5
32147: PUSH
32148: EMPTY
32149: LIST
32150: LIST
32151: PUSH
32152: LD_INT 0
32154: PUSH
32155: LD_INT 5
32157: PUSH
32158: EMPTY
32159: LIST
32160: LIST
32161: PUSH
32162: LD_INT 1
32164: NEG
32165: PUSH
32166: LD_INT 4
32168: PUSH
32169: EMPTY
32170: LIST
32171: LIST
32172: PUSH
32173: LD_INT 1
32175: NEG
32176: PUSH
32177: LD_INT 3
32179: PUSH
32180: EMPTY
32181: LIST
32182: LIST
32183: PUSH
32184: LD_INT 2
32186: PUSH
32187: LD_INT 5
32189: PUSH
32190: EMPTY
32191: LIST
32192: LIST
32193: PUSH
32194: LD_INT 2
32196: NEG
32197: PUSH
32198: LD_INT 3
32200: PUSH
32201: EMPTY
32202: LIST
32203: LIST
32204: PUSH
32205: LD_INT 3
32207: NEG
32208: PUSH
32209: LD_INT 0
32211: PUSH
32212: EMPTY
32213: LIST
32214: LIST
32215: PUSH
32216: LD_INT 3
32218: NEG
32219: PUSH
32220: LD_INT 1
32222: NEG
32223: PUSH
32224: EMPTY
32225: LIST
32226: LIST
32227: PUSH
32228: LD_INT 2
32230: NEG
32231: PUSH
32232: LD_INT 0
32234: PUSH
32235: EMPTY
32236: LIST
32237: LIST
32238: PUSH
32239: LD_INT 2
32241: NEG
32242: PUSH
32243: LD_INT 1
32245: PUSH
32246: EMPTY
32247: LIST
32248: LIST
32249: PUSH
32250: LD_INT 3
32252: NEG
32253: PUSH
32254: LD_INT 1
32256: PUSH
32257: EMPTY
32258: LIST
32259: LIST
32260: PUSH
32261: LD_INT 4
32263: NEG
32264: PUSH
32265: LD_INT 0
32267: PUSH
32268: EMPTY
32269: LIST
32270: LIST
32271: PUSH
32272: LD_INT 4
32274: NEG
32275: PUSH
32276: LD_INT 1
32278: NEG
32279: PUSH
32280: EMPTY
32281: LIST
32282: LIST
32283: PUSH
32284: LD_INT 4
32286: NEG
32287: PUSH
32288: LD_INT 2
32290: NEG
32291: PUSH
32292: EMPTY
32293: LIST
32294: LIST
32295: PUSH
32296: LD_INT 2
32298: NEG
32299: PUSH
32300: LD_INT 2
32302: PUSH
32303: EMPTY
32304: LIST
32305: LIST
32306: PUSH
32307: LD_INT 4
32309: NEG
32310: PUSH
32311: LD_INT 4
32313: NEG
32314: PUSH
32315: EMPTY
32316: LIST
32317: LIST
32318: PUSH
32319: LD_INT 4
32321: NEG
32322: PUSH
32323: LD_INT 5
32325: NEG
32326: PUSH
32327: EMPTY
32328: LIST
32329: LIST
32330: PUSH
32331: LD_INT 3
32333: NEG
32334: PUSH
32335: LD_INT 4
32337: NEG
32338: PUSH
32339: EMPTY
32340: LIST
32341: LIST
32342: PUSH
32343: LD_INT 3
32345: NEG
32346: PUSH
32347: LD_INT 3
32349: NEG
32350: PUSH
32351: EMPTY
32352: LIST
32353: LIST
32354: PUSH
32355: LD_INT 4
32357: NEG
32358: PUSH
32359: LD_INT 3
32361: NEG
32362: PUSH
32363: EMPTY
32364: LIST
32365: LIST
32366: PUSH
32367: LD_INT 5
32369: NEG
32370: PUSH
32371: LD_INT 4
32373: NEG
32374: PUSH
32375: EMPTY
32376: LIST
32377: LIST
32378: PUSH
32379: LD_INT 5
32381: NEG
32382: PUSH
32383: LD_INT 5
32385: NEG
32386: PUSH
32387: EMPTY
32388: LIST
32389: LIST
32390: PUSH
32391: LD_INT 3
32393: NEG
32394: PUSH
32395: LD_INT 5
32397: NEG
32398: PUSH
32399: EMPTY
32400: LIST
32401: LIST
32402: PUSH
32403: LD_INT 5
32405: NEG
32406: PUSH
32407: LD_INT 3
32409: NEG
32410: PUSH
32411: EMPTY
32412: LIST
32413: LIST
32414: PUSH
32415: EMPTY
32416: LIST
32417: LIST
32418: LIST
32419: LIST
32420: LIST
32421: LIST
32422: LIST
32423: LIST
32424: LIST
32425: LIST
32426: LIST
32427: LIST
32428: LIST
32429: LIST
32430: LIST
32431: LIST
32432: LIST
32433: LIST
32434: LIST
32435: LIST
32436: LIST
32437: LIST
32438: LIST
32439: LIST
32440: LIST
32441: LIST
32442: LIST
32443: LIST
32444: LIST
32445: LIST
32446: LIST
32447: LIST
32448: LIST
32449: LIST
32450: LIST
32451: LIST
32452: LIST
32453: LIST
32454: LIST
32455: LIST
32456: LIST
32457: LIST
32458: LIST
32459: LIST
32460: LIST
32461: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
32462: LD_ADDR_VAR 0 30
32466: PUSH
32467: LD_INT 4
32469: PUSH
32470: LD_INT 4
32472: PUSH
32473: EMPTY
32474: LIST
32475: LIST
32476: PUSH
32477: LD_INT 4
32479: PUSH
32480: LD_INT 3
32482: PUSH
32483: EMPTY
32484: LIST
32485: LIST
32486: PUSH
32487: LD_INT 5
32489: PUSH
32490: LD_INT 4
32492: PUSH
32493: EMPTY
32494: LIST
32495: LIST
32496: PUSH
32497: LD_INT 5
32499: PUSH
32500: LD_INT 5
32502: PUSH
32503: EMPTY
32504: LIST
32505: LIST
32506: PUSH
32507: LD_INT 4
32509: PUSH
32510: LD_INT 5
32512: PUSH
32513: EMPTY
32514: LIST
32515: LIST
32516: PUSH
32517: LD_INT 3
32519: PUSH
32520: LD_INT 4
32522: PUSH
32523: EMPTY
32524: LIST
32525: LIST
32526: PUSH
32527: LD_INT 3
32529: PUSH
32530: LD_INT 3
32532: PUSH
32533: EMPTY
32534: LIST
32535: LIST
32536: PUSH
32537: LD_INT 5
32539: PUSH
32540: LD_INT 3
32542: PUSH
32543: EMPTY
32544: LIST
32545: LIST
32546: PUSH
32547: LD_INT 3
32549: PUSH
32550: LD_INT 5
32552: PUSH
32553: EMPTY
32554: LIST
32555: LIST
32556: PUSH
32557: LD_INT 0
32559: PUSH
32560: LD_INT 3
32562: PUSH
32563: EMPTY
32564: LIST
32565: LIST
32566: PUSH
32567: LD_INT 0
32569: PUSH
32570: LD_INT 2
32572: PUSH
32573: EMPTY
32574: LIST
32575: LIST
32576: PUSH
32577: LD_INT 1
32579: PUSH
32580: LD_INT 3
32582: PUSH
32583: EMPTY
32584: LIST
32585: LIST
32586: PUSH
32587: LD_INT 1
32589: PUSH
32590: LD_INT 4
32592: PUSH
32593: EMPTY
32594: LIST
32595: LIST
32596: PUSH
32597: LD_INT 0
32599: PUSH
32600: LD_INT 4
32602: PUSH
32603: EMPTY
32604: LIST
32605: LIST
32606: PUSH
32607: LD_INT 1
32609: NEG
32610: PUSH
32611: LD_INT 3
32613: PUSH
32614: EMPTY
32615: LIST
32616: LIST
32617: PUSH
32618: LD_INT 1
32620: NEG
32621: PUSH
32622: LD_INT 2
32624: PUSH
32625: EMPTY
32626: LIST
32627: LIST
32628: PUSH
32629: LD_INT 2
32631: PUSH
32632: LD_INT 4
32634: PUSH
32635: EMPTY
32636: LIST
32637: LIST
32638: PUSH
32639: LD_INT 2
32641: NEG
32642: PUSH
32643: LD_INT 2
32645: PUSH
32646: EMPTY
32647: LIST
32648: LIST
32649: PUSH
32650: LD_INT 4
32652: NEG
32653: PUSH
32654: LD_INT 0
32656: PUSH
32657: EMPTY
32658: LIST
32659: LIST
32660: PUSH
32661: LD_INT 4
32663: NEG
32664: PUSH
32665: LD_INT 1
32667: NEG
32668: PUSH
32669: EMPTY
32670: LIST
32671: LIST
32672: PUSH
32673: LD_INT 3
32675: NEG
32676: PUSH
32677: LD_INT 0
32679: PUSH
32680: EMPTY
32681: LIST
32682: LIST
32683: PUSH
32684: LD_INT 3
32686: NEG
32687: PUSH
32688: LD_INT 1
32690: PUSH
32691: EMPTY
32692: LIST
32693: LIST
32694: PUSH
32695: LD_INT 4
32697: NEG
32698: PUSH
32699: LD_INT 1
32701: PUSH
32702: EMPTY
32703: LIST
32704: LIST
32705: PUSH
32706: LD_INT 5
32708: NEG
32709: PUSH
32710: LD_INT 0
32712: PUSH
32713: EMPTY
32714: LIST
32715: LIST
32716: PUSH
32717: LD_INT 5
32719: NEG
32720: PUSH
32721: LD_INT 1
32723: NEG
32724: PUSH
32725: EMPTY
32726: LIST
32727: LIST
32728: PUSH
32729: LD_INT 5
32731: NEG
32732: PUSH
32733: LD_INT 2
32735: NEG
32736: PUSH
32737: EMPTY
32738: LIST
32739: LIST
32740: PUSH
32741: LD_INT 3
32743: NEG
32744: PUSH
32745: LD_INT 2
32747: PUSH
32748: EMPTY
32749: LIST
32750: LIST
32751: PUSH
32752: LD_INT 3
32754: NEG
32755: PUSH
32756: LD_INT 3
32758: NEG
32759: PUSH
32760: EMPTY
32761: LIST
32762: LIST
32763: PUSH
32764: LD_INT 3
32766: NEG
32767: PUSH
32768: LD_INT 4
32770: NEG
32771: PUSH
32772: EMPTY
32773: LIST
32774: LIST
32775: PUSH
32776: LD_INT 2
32778: NEG
32779: PUSH
32780: LD_INT 3
32782: NEG
32783: PUSH
32784: EMPTY
32785: LIST
32786: LIST
32787: PUSH
32788: LD_INT 2
32790: NEG
32791: PUSH
32792: LD_INT 2
32794: NEG
32795: PUSH
32796: EMPTY
32797: LIST
32798: LIST
32799: PUSH
32800: LD_INT 3
32802: NEG
32803: PUSH
32804: LD_INT 2
32806: NEG
32807: PUSH
32808: EMPTY
32809: LIST
32810: LIST
32811: PUSH
32812: LD_INT 4
32814: NEG
32815: PUSH
32816: LD_INT 3
32818: NEG
32819: PUSH
32820: EMPTY
32821: LIST
32822: LIST
32823: PUSH
32824: LD_INT 4
32826: NEG
32827: PUSH
32828: LD_INT 4
32830: NEG
32831: PUSH
32832: EMPTY
32833: LIST
32834: LIST
32835: PUSH
32836: LD_INT 2
32838: NEG
32839: PUSH
32840: LD_INT 4
32842: NEG
32843: PUSH
32844: EMPTY
32845: LIST
32846: LIST
32847: PUSH
32848: LD_INT 4
32850: NEG
32851: PUSH
32852: LD_INT 2
32854: NEG
32855: PUSH
32856: EMPTY
32857: LIST
32858: LIST
32859: PUSH
32860: LD_INT 0
32862: PUSH
32863: LD_INT 4
32865: NEG
32866: PUSH
32867: EMPTY
32868: LIST
32869: LIST
32870: PUSH
32871: LD_INT 0
32873: PUSH
32874: LD_INT 5
32876: NEG
32877: PUSH
32878: EMPTY
32879: LIST
32880: LIST
32881: PUSH
32882: LD_INT 1
32884: PUSH
32885: LD_INT 4
32887: NEG
32888: PUSH
32889: EMPTY
32890: LIST
32891: LIST
32892: PUSH
32893: LD_INT 1
32895: PUSH
32896: LD_INT 3
32898: NEG
32899: PUSH
32900: EMPTY
32901: LIST
32902: LIST
32903: PUSH
32904: LD_INT 0
32906: PUSH
32907: LD_INT 3
32909: NEG
32910: PUSH
32911: EMPTY
32912: LIST
32913: LIST
32914: PUSH
32915: LD_INT 1
32917: NEG
32918: PUSH
32919: LD_INT 4
32921: NEG
32922: PUSH
32923: EMPTY
32924: LIST
32925: LIST
32926: PUSH
32927: LD_INT 1
32929: NEG
32930: PUSH
32931: LD_INT 5
32933: NEG
32934: PUSH
32935: EMPTY
32936: LIST
32937: LIST
32938: PUSH
32939: LD_INT 2
32941: PUSH
32942: LD_INT 3
32944: NEG
32945: PUSH
32946: EMPTY
32947: LIST
32948: LIST
32949: PUSH
32950: LD_INT 2
32952: NEG
32953: PUSH
32954: LD_INT 5
32956: NEG
32957: PUSH
32958: EMPTY
32959: LIST
32960: LIST
32961: PUSH
32962: EMPTY
32963: LIST
32964: LIST
32965: LIST
32966: LIST
32967: LIST
32968: LIST
32969: LIST
32970: LIST
32971: LIST
32972: LIST
32973: LIST
32974: LIST
32975: LIST
32976: LIST
32977: LIST
32978: LIST
32979: LIST
32980: LIST
32981: LIST
32982: LIST
32983: LIST
32984: LIST
32985: LIST
32986: LIST
32987: LIST
32988: LIST
32989: LIST
32990: LIST
32991: LIST
32992: LIST
32993: LIST
32994: LIST
32995: LIST
32996: LIST
32997: LIST
32998: LIST
32999: LIST
33000: LIST
33001: LIST
33002: LIST
33003: LIST
33004: LIST
33005: LIST
33006: LIST
33007: LIST
33008: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
33009: LD_ADDR_VAR 0 31
33013: PUSH
33014: LD_INT 0
33016: PUSH
33017: LD_INT 4
33019: PUSH
33020: EMPTY
33021: LIST
33022: LIST
33023: PUSH
33024: LD_INT 0
33026: PUSH
33027: LD_INT 3
33029: PUSH
33030: EMPTY
33031: LIST
33032: LIST
33033: PUSH
33034: LD_INT 1
33036: PUSH
33037: LD_INT 4
33039: PUSH
33040: EMPTY
33041: LIST
33042: LIST
33043: PUSH
33044: LD_INT 1
33046: PUSH
33047: LD_INT 5
33049: PUSH
33050: EMPTY
33051: LIST
33052: LIST
33053: PUSH
33054: LD_INT 0
33056: PUSH
33057: LD_INT 5
33059: PUSH
33060: EMPTY
33061: LIST
33062: LIST
33063: PUSH
33064: LD_INT 1
33066: NEG
33067: PUSH
33068: LD_INT 4
33070: PUSH
33071: EMPTY
33072: LIST
33073: LIST
33074: PUSH
33075: LD_INT 1
33077: NEG
33078: PUSH
33079: LD_INT 3
33081: PUSH
33082: EMPTY
33083: LIST
33084: LIST
33085: PUSH
33086: LD_INT 2
33088: PUSH
33089: LD_INT 5
33091: PUSH
33092: EMPTY
33093: LIST
33094: LIST
33095: PUSH
33096: LD_INT 2
33098: NEG
33099: PUSH
33100: LD_INT 3
33102: PUSH
33103: EMPTY
33104: LIST
33105: LIST
33106: PUSH
33107: LD_INT 3
33109: NEG
33110: PUSH
33111: LD_INT 0
33113: PUSH
33114: EMPTY
33115: LIST
33116: LIST
33117: PUSH
33118: LD_INT 3
33120: NEG
33121: PUSH
33122: LD_INT 1
33124: NEG
33125: PUSH
33126: EMPTY
33127: LIST
33128: LIST
33129: PUSH
33130: LD_INT 2
33132: NEG
33133: PUSH
33134: LD_INT 0
33136: PUSH
33137: EMPTY
33138: LIST
33139: LIST
33140: PUSH
33141: LD_INT 2
33143: NEG
33144: PUSH
33145: LD_INT 1
33147: PUSH
33148: EMPTY
33149: LIST
33150: LIST
33151: PUSH
33152: LD_INT 3
33154: NEG
33155: PUSH
33156: LD_INT 1
33158: PUSH
33159: EMPTY
33160: LIST
33161: LIST
33162: PUSH
33163: LD_INT 4
33165: NEG
33166: PUSH
33167: LD_INT 0
33169: PUSH
33170: EMPTY
33171: LIST
33172: LIST
33173: PUSH
33174: LD_INT 4
33176: NEG
33177: PUSH
33178: LD_INT 1
33180: NEG
33181: PUSH
33182: EMPTY
33183: LIST
33184: LIST
33185: PUSH
33186: LD_INT 4
33188: NEG
33189: PUSH
33190: LD_INT 2
33192: NEG
33193: PUSH
33194: EMPTY
33195: LIST
33196: LIST
33197: PUSH
33198: LD_INT 2
33200: NEG
33201: PUSH
33202: LD_INT 2
33204: PUSH
33205: EMPTY
33206: LIST
33207: LIST
33208: PUSH
33209: LD_INT 4
33211: NEG
33212: PUSH
33213: LD_INT 4
33215: NEG
33216: PUSH
33217: EMPTY
33218: LIST
33219: LIST
33220: PUSH
33221: LD_INT 4
33223: NEG
33224: PUSH
33225: LD_INT 5
33227: NEG
33228: PUSH
33229: EMPTY
33230: LIST
33231: LIST
33232: PUSH
33233: LD_INT 3
33235: NEG
33236: PUSH
33237: LD_INT 4
33239: NEG
33240: PUSH
33241: EMPTY
33242: LIST
33243: LIST
33244: PUSH
33245: LD_INT 3
33247: NEG
33248: PUSH
33249: LD_INT 3
33251: NEG
33252: PUSH
33253: EMPTY
33254: LIST
33255: LIST
33256: PUSH
33257: LD_INT 4
33259: NEG
33260: PUSH
33261: LD_INT 3
33263: NEG
33264: PUSH
33265: EMPTY
33266: LIST
33267: LIST
33268: PUSH
33269: LD_INT 5
33271: NEG
33272: PUSH
33273: LD_INT 4
33275: NEG
33276: PUSH
33277: EMPTY
33278: LIST
33279: LIST
33280: PUSH
33281: LD_INT 5
33283: NEG
33284: PUSH
33285: LD_INT 5
33287: NEG
33288: PUSH
33289: EMPTY
33290: LIST
33291: LIST
33292: PUSH
33293: LD_INT 3
33295: NEG
33296: PUSH
33297: LD_INT 5
33299: NEG
33300: PUSH
33301: EMPTY
33302: LIST
33303: LIST
33304: PUSH
33305: LD_INT 5
33307: NEG
33308: PUSH
33309: LD_INT 3
33311: NEG
33312: PUSH
33313: EMPTY
33314: LIST
33315: LIST
33316: PUSH
33317: LD_INT 0
33319: PUSH
33320: LD_INT 3
33322: NEG
33323: PUSH
33324: EMPTY
33325: LIST
33326: LIST
33327: PUSH
33328: LD_INT 0
33330: PUSH
33331: LD_INT 4
33333: NEG
33334: PUSH
33335: EMPTY
33336: LIST
33337: LIST
33338: PUSH
33339: LD_INT 1
33341: PUSH
33342: LD_INT 3
33344: NEG
33345: PUSH
33346: EMPTY
33347: LIST
33348: LIST
33349: PUSH
33350: LD_INT 1
33352: PUSH
33353: LD_INT 2
33355: NEG
33356: PUSH
33357: EMPTY
33358: LIST
33359: LIST
33360: PUSH
33361: LD_INT 0
33363: PUSH
33364: LD_INT 2
33366: NEG
33367: PUSH
33368: EMPTY
33369: LIST
33370: LIST
33371: PUSH
33372: LD_INT 1
33374: NEG
33375: PUSH
33376: LD_INT 3
33378: NEG
33379: PUSH
33380: EMPTY
33381: LIST
33382: LIST
33383: PUSH
33384: LD_INT 1
33386: NEG
33387: PUSH
33388: LD_INT 4
33390: NEG
33391: PUSH
33392: EMPTY
33393: LIST
33394: LIST
33395: PUSH
33396: LD_INT 2
33398: PUSH
33399: LD_INT 2
33401: NEG
33402: PUSH
33403: EMPTY
33404: LIST
33405: LIST
33406: PUSH
33407: LD_INT 2
33409: NEG
33410: PUSH
33411: LD_INT 4
33413: NEG
33414: PUSH
33415: EMPTY
33416: LIST
33417: LIST
33418: PUSH
33419: LD_INT 4
33421: PUSH
33422: LD_INT 0
33424: PUSH
33425: EMPTY
33426: LIST
33427: LIST
33428: PUSH
33429: LD_INT 4
33431: PUSH
33432: LD_INT 1
33434: NEG
33435: PUSH
33436: EMPTY
33437: LIST
33438: LIST
33439: PUSH
33440: LD_INT 5
33442: PUSH
33443: LD_INT 0
33445: PUSH
33446: EMPTY
33447: LIST
33448: LIST
33449: PUSH
33450: LD_INT 5
33452: PUSH
33453: LD_INT 1
33455: PUSH
33456: EMPTY
33457: LIST
33458: LIST
33459: PUSH
33460: LD_INT 4
33462: PUSH
33463: LD_INT 1
33465: PUSH
33466: EMPTY
33467: LIST
33468: LIST
33469: PUSH
33470: LD_INT 3
33472: PUSH
33473: LD_INT 0
33475: PUSH
33476: EMPTY
33477: LIST
33478: LIST
33479: PUSH
33480: LD_INT 3
33482: PUSH
33483: LD_INT 1
33485: NEG
33486: PUSH
33487: EMPTY
33488: LIST
33489: LIST
33490: PUSH
33491: LD_INT 3
33493: PUSH
33494: LD_INT 2
33496: NEG
33497: PUSH
33498: EMPTY
33499: LIST
33500: LIST
33501: PUSH
33502: LD_INT 5
33504: PUSH
33505: LD_INT 2
33507: PUSH
33508: EMPTY
33509: LIST
33510: LIST
33511: PUSH
33512: EMPTY
33513: LIST
33514: LIST
33515: LIST
33516: LIST
33517: LIST
33518: LIST
33519: LIST
33520: LIST
33521: LIST
33522: LIST
33523: LIST
33524: LIST
33525: LIST
33526: LIST
33527: LIST
33528: LIST
33529: LIST
33530: LIST
33531: LIST
33532: LIST
33533: LIST
33534: LIST
33535: LIST
33536: LIST
33537: LIST
33538: LIST
33539: LIST
33540: LIST
33541: LIST
33542: LIST
33543: LIST
33544: LIST
33545: LIST
33546: LIST
33547: LIST
33548: LIST
33549: LIST
33550: LIST
33551: LIST
33552: LIST
33553: LIST
33554: LIST
33555: LIST
33556: LIST
33557: LIST
33558: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
33559: LD_ADDR_VAR 0 32
33563: PUSH
33564: LD_INT 4
33566: NEG
33567: PUSH
33568: LD_INT 0
33570: PUSH
33571: EMPTY
33572: LIST
33573: LIST
33574: PUSH
33575: LD_INT 4
33577: NEG
33578: PUSH
33579: LD_INT 1
33581: NEG
33582: PUSH
33583: EMPTY
33584: LIST
33585: LIST
33586: PUSH
33587: LD_INT 3
33589: NEG
33590: PUSH
33591: LD_INT 0
33593: PUSH
33594: EMPTY
33595: LIST
33596: LIST
33597: PUSH
33598: LD_INT 3
33600: NEG
33601: PUSH
33602: LD_INT 1
33604: PUSH
33605: EMPTY
33606: LIST
33607: LIST
33608: PUSH
33609: LD_INT 4
33611: NEG
33612: PUSH
33613: LD_INT 1
33615: PUSH
33616: EMPTY
33617: LIST
33618: LIST
33619: PUSH
33620: LD_INT 5
33622: NEG
33623: PUSH
33624: LD_INT 0
33626: PUSH
33627: EMPTY
33628: LIST
33629: LIST
33630: PUSH
33631: LD_INT 5
33633: NEG
33634: PUSH
33635: LD_INT 1
33637: NEG
33638: PUSH
33639: EMPTY
33640: LIST
33641: LIST
33642: PUSH
33643: LD_INT 5
33645: NEG
33646: PUSH
33647: LD_INT 2
33649: NEG
33650: PUSH
33651: EMPTY
33652: LIST
33653: LIST
33654: PUSH
33655: LD_INT 3
33657: NEG
33658: PUSH
33659: LD_INT 2
33661: PUSH
33662: EMPTY
33663: LIST
33664: LIST
33665: PUSH
33666: LD_INT 3
33668: NEG
33669: PUSH
33670: LD_INT 3
33672: NEG
33673: PUSH
33674: EMPTY
33675: LIST
33676: LIST
33677: PUSH
33678: LD_INT 3
33680: NEG
33681: PUSH
33682: LD_INT 4
33684: NEG
33685: PUSH
33686: EMPTY
33687: LIST
33688: LIST
33689: PUSH
33690: LD_INT 2
33692: NEG
33693: PUSH
33694: LD_INT 3
33696: NEG
33697: PUSH
33698: EMPTY
33699: LIST
33700: LIST
33701: PUSH
33702: LD_INT 2
33704: NEG
33705: PUSH
33706: LD_INT 2
33708: NEG
33709: PUSH
33710: EMPTY
33711: LIST
33712: LIST
33713: PUSH
33714: LD_INT 3
33716: NEG
33717: PUSH
33718: LD_INT 2
33720: NEG
33721: PUSH
33722: EMPTY
33723: LIST
33724: LIST
33725: PUSH
33726: LD_INT 4
33728: NEG
33729: PUSH
33730: LD_INT 3
33732: NEG
33733: PUSH
33734: EMPTY
33735: LIST
33736: LIST
33737: PUSH
33738: LD_INT 4
33740: NEG
33741: PUSH
33742: LD_INT 4
33744: NEG
33745: PUSH
33746: EMPTY
33747: LIST
33748: LIST
33749: PUSH
33750: LD_INT 2
33752: NEG
33753: PUSH
33754: LD_INT 4
33756: NEG
33757: PUSH
33758: EMPTY
33759: LIST
33760: LIST
33761: PUSH
33762: LD_INT 4
33764: NEG
33765: PUSH
33766: LD_INT 2
33768: NEG
33769: PUSH
33770: EMPTY
33771: LIST
33772: LIST
33773: PUSH
33774: LD_INT 0
33776: PUSH
33777: LD_INT 4
33779: NEG
33780: PUSH
33781: EMPTY
33782: LIST
33783: LIST
33784: PUSH
33785: LD_INT 0
33787: PUSH
33788: LD_INT 5
33790: NEG
33791: PUSH
33792: EMPTY
33793: LIST
33794: LIST
33795: PUSH
33796: LD_INT 1
33798: PUSH
33799: LD_INT 4
33801: NEG
33802: PUSH
33803: EMPTY
33804: LIST
33805: LIST
33806: PUSH
33807: LD_INT 1
33809: PUSH
33810: LD_INT 3
33812: NEG
33813: PUSH
33814: EMPTY
33815: LIST
33816: LIST
33817: PUSH
33818: LD_INT 0
33820: PUSH
33821: LD_INT 3
33823: NEG
33824: PUSH
33825: EMPTY
33826: LIST
33827: LIST
33828: PUSH
33829: LD_INT 1
33831: NEG
33832: PUSH
33833: LD_INT 4
33835: NEG
33836: PUSH
33837: EMPTY
33838: LIST
33839: LIST
33840: PUSH
33841: LD_INT 1
33843: NEG
33844: PUSH
33845: LD_INT 5
33847: NEG
33848: PUSH
33849: EMPTY
33850: LIST
33851: LIST
33852: PUSH
33853: LD_INT 2
33855: PUSH
33856: LD_INT 3
33858: NEG
33859: PUSH
33860: EMPTY
33861: LIST
33862: LIST
33863: PUSH
33864: LD_INT 2
33866: NEG
33867: PUSH
33868: LD_INT 5
33870: NEG
33871: PUSH
33872: EMPTY
33873: LIST
33874: LIST
33875: PUSH
33876: LD_INT 3
33878: PUSH
33879: LD_INT 0
33881: PUSH
33882: EMPTY
33883: LIST
33884: LIST
33885: PUSH
33886: LD_INT 3
33888: PUSH
33889: LD_INT 1
33891: NEG
33892: PUSH
33893: EMPTY
33894: LIST
33895: LIST
33896: PUSH
33897: LD_INT 4
33899: PUSH
33900: LD_INT 0
33902: PUSH
33903: EMPTY
33904: LIST
33905: LIST
33906: PUSH
33907: LD_INT 4
33909: PUSH
33910: LD_INT 1
33912: PUSH
33913: EMPTY
33914: LIST
33915: LIST
33916: PUSH
33917: LD_INT 3
33919: PUSH
33920: LD_INT 1
33922: PUSH
33923: EMPTY
33924: LIST
33925: LIST
33926: PUSH
33927: LD_INT 2
33929: PUSH
33930: LD_INT 0
33932: PUSH
33933: EMPTY
33934: LIST
33935: LIST
33936: PUSH
33937: LD_INT 2
33939: PUSH
33940: LD_INT 1
33942: NEG
33943: PUSH
33944: EMPTY
33945: LIST
33946: LIST
33947: PUSH
33948: LD_INT 2
33950: PUSH
33951: LD_INT 2
33953: NEG
33954: PUSH
33955: EMPTY
33956: LIST
33957: LIST
33958: PUSH
33959: LD_INT 4
33961: PUSH
33962: LD_INT 2
33964: PUSH
33965: EMPTY
33966: LIST
33967: LIST
33968: PUSH
33969: LD_INT 4
33971: PUSH
33972: LD_INT 4
33974: PUSH
33975: EMPTY
33976: LIST
33977: LIST
33978: PUSH
33979: LD_INT 4
33981: PUSH
33982: LD_INT 3
33984: PUSH
33985: EMPTY
33986: LIST
33987: LIST
33988: PUSH
33989: LD_INT 5
33991: PUSH
33992: LD_INT 4
33994: PUSH
33995: EMPTY
33996: LIST
33997: LIST
33998: PUSH
33999: LD_INT 5
34001: PUSH
34002: LD_INT 5
34004: PUSH
34005: EMPTY
34006: LIST
34007: LIST
34008: PUSH
34009: LD_INT 4
34011: PUSH
34012: LD_INT 5
34014: PUSH
34015: EMPTY
34016: LIST
34017: LIST
34018: PUSH
34019: LD_INT 3
34021: PUSH
34022: LD_INT 4
34024: PUSH
34025: EMPTY
34026: LIST
34027: LIST
34028: PUSH
34029: LD_INT 3
34031: PUSH
34032: LD_INT 3
34034: PUSH
34035: EMPTY
34036: LIST
34037: LIST
34038: PUSH
34039: LD_INT 5
34041: PUSH
34042: LD_INT 3
34044: PUSH
34045: EMPTY
34046: LIST
34047: LIST
34048: PUSH
34049: LD_INT 3
34051: PUSH
34052: LD_INT 5
34054: PUSH
34055: EMPTY
34056: LIST
34057: LIST
34058: PUSH
34059: EMPTY
34060: LIST
34061: LIST
34062: LIST
34063: LIST
34064: LIST
34065: LIST
34066: LIST
34067: LIST
34068: LIST
34069: LIST
34070: LIST
34071: LIST
34072: LIST
34073: LIST
34074: LIST
34075: LIST
34076: LIST
34077: LIST
34078: LIST
34079: LIST
34080: LIST
34081: LIST
34082: LIST
34083: LIST
34084: LIST
34085: LIST
34086: LIST
34087: LIST
34088: LIST
34089: LIST
34090: LIST
34091: LIST
34092: LIST
34093: LIST
34094: LIST
34095: LIST
34096: LIST
34097: LIST
34098: LIST
34099: LIST
34100: LIST
34101: LIST
34102: LIST
34103: LIST
34104: LIST
34105: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
34106: LD_ADDR_VAR 0 33
34110: PUSH
34111: LD_INT 4
34113: NEG
34114: PUSH
34115: LD_INT 4
34117: NEG
34118: PUSH
34119: EMPTY
34120: LIST
34121: LIST
34122: PUSH
34123: LD_INT 4
34125: NEG
34126: PUSH
34127: LD_INT 5
34129: NEG
34130: PUSH
34131: EMPTY
34132: LIST
34133: LIST
34134: PUSH
34135: LD_INT 3
34137: NEG
34138: PUSH
34139: LD_INT 4
34141: NEG
34142: PUSH
34143: EMPTY
34144: LIST
34145: LIST
34146: PUSH
34147: LD_INT 3
34149: NEG
34150: PUSH
34151: LD_INT 3
34153: NEG
34154: PUSH
34155: EMPTY
34156: LIST
34157: LIST
34158: PUSH
34159: LD_INT 4
34161: NEG
34162: PUSH
34163: LD_INT 3
34165: NEG
34166: PUSH
34167: EMPTY
34168: LIST
34169: LIST
34170: PUSH
34171: LD_INT 5
34173: NEG
34174: PUSH
34175: LD_INT 4
34177: NEG
34178: PUSH
34179: EMPTY
34180: LIST
34181: LIST
34182: PUSH
34183: LD_INT 5
34185: NEG
34186: PUSH
34187: LD_INT 5
34189: NEG
34190: PUSH
34191: EMPTY
34192: LIST
34193: LIST
34194: PUSH
34195: LD_INT 3
34197: NEG
34198: PUSH
34199: LD_INT 5
34201: NEG
34202: PUSH
34203: EMPTY
34204: LIST
34205: LIST
34206: PUSH
34207: LD_INT 5
34209: NEG
34210: PUSH
34211: LD_INT 3
34213: NEG
34214: PUSH
34215: EMPTY
34216: LIST
34217: LIST
34218: PUSH
34219: LD_INT 0
34221: PUSH
34222: LD_INT 3
34224: NEG
34225: PUSH
34226: EMPTY
34227: LIST
34228: LIST
34229: PUSH
34230: LD_INT 0
34232: PUSH
34233: LD_INT 4
34235: NEG
34236: PUSH
34237: EMPTY
34238: LIST
34239: LIST
34240: PUSH
34241: LD_INT 1
34243: PUSH
34244: LD_INT 3
34246: NEG
34247: PUSH
34248: EMPTY
34249: LIST
34250: LIST
34251: PUSH
34252: LD_INT 1
34254: PUSH
34255: LD_INT 2
34257: NEG
34258: PUSH
34259: EMPTY
34260: LIST
34261: LIST
34262: PUSH
34263: LD_INT 0
34265: PUSH
34266: LD_INT 2
34268: NEG
34269: PUSH
34270: EMPTY
34271: LIST
34272: LIST
34273: PUSH
34274: LD_INT 1
34276: NEG
34277: PUSH
34278: LD_INT 3
34280: NEG
34281: PUSH
34282: EMPTY
34283: LIST
34284: LIST
34285: PUSH
34286: LD_INT 1
34288: NEG
34289: PUSH
34290: LD_INT 4
34292: NEG
34293: PUSH
34294: EMPTY
34295: LIST
34296: LIST
34297: PUSH
34298: LD_INT 2
34300: PUSH
34301: LD_INT 2
34303: NEG
34304: PUSH
34305: EMPTY
34306: LIST
34307: LIST
34308: PUSH
34309: LD_INT 2
34311: NEG
34312: PUSH
34313: LD_INT 4
34315: NEG
34316: PUSH
34317: EMPTY
34318: LIST
34319: LIST
34320: PUSH
34321: LD_INT 4
34323: PUSH
34324: LD_INT 0
34326: PUSH
34327: EMPTY
34328: LIST
34329: LIST
34330: PUSH
34331: LD_INT 4
34333: PUSH
34334: LD_INT 1
34336: NEG
34337: PUSH
34338: EMPTY
34339: LIST
34340: LIST
34341: PUSH
34342: LD_INT 5
34344: PUSH
34345: LD_INT 0
34347: PUSH
34348: EMPTY
34349: LIST
34350: LIST
34351: PUSH
34352: LD_INT 5
34354: PUSH
34355: LD_INT 1
34357: PUSH
34358: EMPTY
34359: LIST
34360: LIST
34361: PUSH
34362: LD_INT 4
34364: PUSH
34365: LD_INT 1
34367: PUSH
34368: EMPTY
34369: LIST
34370: LIST
34371: PUSH
34372: LD_INT 3
34374: PUSH
34375: LD_INT 0
34377: PUSH
34378: EMPTY
34379: LIST
34380: LIST
34381: PUSH
34382: LD_INT 3
34384: PUSH
34385: LD_INT 1
34387: NEG
34388: PUSH
34389: EMPTY
34390: LIST
34391: LIST
34392: PUSH
34393: LD_INT 3
34395: PUSH
34396: LD_INT 2
34398: NEG
34399: PUSH
34400: EMPTY
34401: LIST
34402: LIST
34403: PUSH
34404: LD_INT 5
34406: PUSH
34407: LD_INT 2
34409: PUSH
34410: EMPTY
34411: LIST
34412: LIST
34413: PUSH
34414: LD_INT 3
34416: PUSH
34417: LD_INT 3
34419: PUSH
34420: EMPTY
34421: LIST
34422: LIST
34423: PUSH
34424: LD_INT 3
34426: PUSH
34427: LD_INT 2
34429: PUSH
34430: EMPTY
34431: LIST
34432: LIST
34433: PUSH
34434: LD_INT 4
34436: PUSH
34437: LD_INT 3
34439: PUSH
34440: EMPTY
34441: LIST
34442: LIST
34443: PUSH
34444: LD_INT 4
34446: PUSH
34447: LD_INT 4
34449: PUSH
34450: EMPTY
34451: LIST
34452: LIST
34453: PUSH
34454: LD_INT 3
34456: PUSH
34457: LD_INT 4
34459: PUSH
34460: EMPTY
34461: LIST
34462: LIST
34463: PUSH
34464: LD_INT 2
34466: PUSH
34467: LD_INT 3
34469: PUSH
34470: EMPTY
34471: LIST
34472: LIST
34473: PUSH
34474: LD_INT 2
34476: PUSH
34477: LD_INT 2
34479: PUSH
34480: EMPTY
34481: LIST
34482: LIST
34483: PUSH
34484: LD_INT 4
34486: PUSH
34487: LD_INT 2
34489: PUSH
34490: EMPTY
34491: LIST
34492: LIST
34493: PUSH
34494: LD_INT 2
34496: PUSH
34497: LD_INT 4
34499: PUSH
34500: EMPTY
34501: LIST
34502: LIST
34503: PUSH
34504: LD_INT 0
34506: PUSH
34507: LD_INT 4
34509: PUSH
34510: EMPTY
34511: LIST
34512: LIST
34513: PUSH
34514: LD_INT 0
34516: PUSH
34517: LD_INT 3
34519: PUSH
34520: EMPTY
34521: LIST
34522: LIST
34523: PUSH
34524: LD_INT 1
34526: PUSH
34527: LD_INT 4
34529: PUSH
34530: EMPTY
34531: LIST
34532: LIST
34533: PUSH
34534: LD_INT 1
34536: PUSH
34537: LD_INT 5
34539: PUSH
34540: EMPTY
34541: LIST
34542: LIST
34543: PUSH
34544: LD_INT 0
34546: PUSH
34547: LD_INT 5
34549: PUSH
34550: EMPTY
34551: LIST
34552: LIST
34553: PUSH
34554: LD_INT 1
34556: NEG
34557: PUSH
34558: LD_INT 4
34560: PUSH
34561: EMPTY
34562: LIST
34563: LIST
34564: PUSH
34565: LD_INT 1
34567: NEG
34568: PUSH
34569: LD_INT 3
34571: PUSH
34572: EMPTY
34573: LIST
34574: LIST
34575: PUSH
34576: LD_INT 2
34578: PUSH
34579: LD_INT 5
34581: PUSH
34582: EMPTY
34583: LIST
34584: LIST
34585: PUSH
34586: LD_INT 2
34588: NEG
34589: PUSH
34590: LD_INT 3
34592: PUSH
34593: EMPTY
34594: LIST
34595: LIST
34596: PUSH
34597: EMPTY
34598: LIST
34599: LIST
34600: LIST
34601: LIST
34602: LIST
34603: LIST
34604: LIST
34605: LIST
34606: LIST
34607: LIST
34608: LIST
34609: LIST
34610: LIST
34611: LIST
34612: LIST
34613: LIST
34614: LIST
34615: LIST
34616: LIST
34617: LIST
34618: LIST
34619: LIST
34620: LIST
34621: LIST
34622: LIST
34623: LIST
34624: LIST
34625: LIST
34626: LIST
34627: LIST
34628: LIST
34629: LIST
34630: LIST
34631: LIST
34632: LIST
34633: LIST
34634: LIST
34635: LIST
34636: LIST
34637: LIST
34638: LIST
34639: LIST
34640: LIST
34641: LIST
34642: LIST
34643: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
34644: LD_ADDR_VAR 0 34
34648: PUSH
34649: LD_INT 0
34651: PUSH
34652: LD_INT 4
34654: NEG
34655: PUSH
34656: EMPTY
34657: LIST
34658: LIST
34659: PUSH
34660: LD_INT 0
34662: PUSH
34663: LD_INT 5
34665: NEG
34666: PUSH
34667: EMPTY
34668: LIST
34669: LIST
34670: PUSH
34671: LD_INT 1
34673: PUSH
34674: LD_INT 4
34676: NEG
34677: PUSH
34678: EMPTY
34679: LIST
34680: LIST
34681: PUSH
34682: LD_INT 1
34684: PUSH
34685: LD_INT 3
34687: NEG
34688: PUSH
34689: EMPTY
34690: LIST
34691: LIST
34692: PUSH
34693: LD_INT 0
34695: PUSH
34696: LD_INT 3
34698: NEG
34699: PUSH
34700: EMPTY
34701: LIST
34702: LIST
34703: PUSH
34704: LD_INT 1
34706: NEG
34707: PUSH
34708: LD_INT 4
34710: NEG
34711: PUSH
34712: EMPTY
34713: LIST
34714: LIST
34715: PUSH
34716: LD_INT 1
34718: NEG
34719: PUSH
34720: LD_INT 5
34722: NEG
34723: PUSH
34724: EMPTY
34725: LIST
34726: LIST
34727: PUSH
34728: LD_INT 2
34730: PUSH
34731: LD_INT 3
34733: NEG
34734: PUSH
34735: EMPTY
34736: LIST
34737: LIST
34738: PUSH
34739: LD_INT 2
34741: NEG
34742: PUSH
34743: LD_INT 5
34745: NEG
34746: PUSH
34747: EMPTY
34748: LIST
34749: LIST
34750: PUSH
34751: LD_INT 3
34753: PUSH
34754: LD_INT 0
34756: PUSH
34757: EMPTY
34758: LIST
34759: LIST
34760: PUSH
34761: LD_INT 3
34763: PUSH
34764: LD_INT 1
34766: NEG
34767: PUSH
34768: EMPTY
34769: LIST
34770: LIST
34771: PUSH
34772: LD_INT 4
34774: PUSH
34775: LD_INT 0
34777: PUSH
34778: EMPTY
34779: LIST
34780: LIST
34781: PUSH
34782: LD_INT 4
34784: PUSH
34785: LD_INT 1
34787: PUSH
34788: EMPTY
34789: LIST
34790: LIST
34791: PUSH
34792: LD_INT 3
34794: PUSH
34795: LD_INT 1
34797: PUSH
34798: EMPTY
34799: LIST
34800: LIST
34801: PUSH
34802: LD_INT 2
34804: PUSH
34805: LD_INT 0
34807: PUSH
34808: EMPTY
34809: LIST
34810: LIST
34811: PUSH
34812: LD_INT 2
34814: PUSH
34815: LD_INT 1
34817: NEG
34818: PUSH
34819: EMPTY
34820: LIST
34821: LIST
34822: PUSH
34823: LD_INT 2
34825: PUSH
34826: LD_INT 2
34828: NEG
34829: PUSH
34830: EMPTY
34831: LIST
34832: LIST
34833: PUSH
34834: LD_INT 4
34836: PUSH
34837: LD_INT 2
34839: PUSH
34840: EMPTY
34841: LIST
34842: LIST
34843: PUSH
34844: LD_INT 4
34846: PUSH
34847: LD_INT 4
34849: PUSH
34850: EMPTY
34851: LIST
34852: LIST
34853: PUSH
34854: LD_INT 4
34856: PUSH
34857: LD_INT 3
34859: PUSH
34860: EMPTY
34861: LIST
34862: LIST
34863: PUSH
34864: LD_INT 5
34866: PUSH
34867: LD_INT 4
34869: PUSH
34870: EMPTY
34871: LIST
34872: LIST
34873: PUSH
34874: LD_INT 5
34876: PUSH
34877: LD_INT 5
34879: PUSH
34880: EMPTY
34881: LIST
34882: LIST
34883: PUSH
34884: LD_INT 4
34886: PUSH
34887: LD_INT 5
34889: PUSH
34890: EMPTY
34891: LIST
34892: LIST
34893: PUSH
34894: LD_INT 3
34896: PUSH
34897: LD_INT 4
34899: PUSH
34900: EMPTY
34901: LIST
34902: LIST
34903: PUSH
34904: LD_INT 3
34906: PUSH
34907: LD_INT 3
34909: PUSH
34910: EMPTY
34911: LIST
34912: LIST
34913: PUSH
34914: LD_INT 5
34916: PUSH
34917: LD_INT 3
34919: PUSH
34920: EMPTY
34921: LIST
34922: LIST
34923: PUSH
34924: LD_INT 3
34926: PUSH
34927: LD_INT 5
34929: PUSH
34930: EMPTY
34931: LIST
34932: LIST
34933: PUSH
34934: LD_INT 0
34936: PUSH
34937: LD_INT 3
34939: PUSH
34940: EMPTY
34941: LIST
34942: LIST
34943: PUSH
34944: LD_INT 0
34946: PUSH
34947: LD_INT 2
34949: PUSH
34950: EMPTY
34951: LIST
34952: LIST
34953: PUSH
34954: LD_INT 1
34956: PUSH
34957: LD_INT 3
34959: PUSH
34960: EMPTY
34961: LIST
34962: LIST
34963: PUSH
34964: LD_INT 1
34966: PUSH
34967: LD_INT 4
34969: PUSH
34970: EMPTY
34971: LIST
34972: LIST
34973: PUSH
34974: LD_INT 0
34976: PUSH
34977: LD_INT 4
34979: PUSH
34980: EMPTY
34981: LIST
34982: LIST
34983: PUSH
34984: LD_INT 1
34986: NEG
34987: PUSH
34988: LD_INT 3
34990: PUSH
34991: EMPTY
34992: LIST
34993: LIST
34994: PUSH
34995: LD_INT 1
34997: NEG
34998: PUSH
34999: LD_INT 2
35001: PUSH
35002: EMPTY
35003: LIST
35004: LIST
35005: PUSH
35006: LD_INT 2
35008: PUSH
35009: LD_INT 4
35011: PUSH
35012: EMPTY
35013: LIST
35014: LIST
35015: PUSH
35016: LD_INT 2
35018: NEG
35019: PUSH
35020: LD_INT 2
35022: PUSH
35023: EMPTY
35024: LIST
35025: LIST
35026: PUSH
35027: LD_INT 4
35029: NEG
35030: PUSH
35031: LD_INT 0
35033: PUSH
35034: EMPTY
35035: LIST
35036: LIST
35037: PUSH
35038: LD_INT 4
35040: NEG
35041: PUSH
35042: LD_INT 1
35044: NEG
35045: PUSH
35046: EMPTY
35047: LIST
35048: LIST
35049: PUSH
35050: LD_INT 3
35052: NEG
35053: PUSH
35054: LD_INT 0
35056: PUSH
35057: EMPTY
35058: LIST
35059: LIST
35060: PUSH
35061: LD_INT 3
35063: NEG
35064: PUSH
35065: LD_INT 1
35067: PUSH
35068: EMPTY
35069: LIST
35070: LIST
35071: PUSH
35072: LD_INT 4
35074: NEG
35075: PUSH
35076: LD_INT 1
35078: PUSH
35079: EMPTY
35080: LIST
35081: LIST
35082: PUSH
35083: LD_INT 5
35085: NEG
35086: PUSH
35087: LD_INT 0
35089: PUSH
35090: EMPTY
35091: LIST
35092: LIST
35093: PUSH
35094: LD_INT 5
35096: NEG
35097: PUSH
35098: LD_INT 1
35100: NEG
35101: PUSH
35102: EMPTY
35103: LIST
35104: LIST
35105: PUSH
35106: LD_INT 5
35108: NEG
35109: PUSH
35110: LD_INT 2
35112: NEG
35113: PUSH
35114: EMPTY
35115: LIST
35116: LIST
35117: PUSH
35118: LD_INT 3
35120: NEG
35121: PUSH
35122: LD_INT 2
35124: PUSH
35125: EMPTY
35126: LIST
35127: LIST
35128: PUSH
35129: EMPTY
35130: LIST
35131: LIST
35132: LIST
35133: LIST
35134: LIST
35135: LIST
35136: LIST
35137: LIST
35138: LIST
35139: LIST
35140: LIST
35141: LIST
35142: LIST
35143: LIST
35144: LIST
35145: LIST
35146: LIST
35147: LIST
35148: LIST
35149: LIST
35150: LIST
35151: LIST
35152: LIST
35153: LIST
35154: LIST
35155: LIST
35156: LIST
35157: LIST
35158: LIST
35159: LIST
35160: LIST
35161: LIST
35162: LIST
35163: LIST
35164: LIST
35165: LIST
35166: LIST
35167: LIST
35168: LIST
35169: LIST
35170: LIST
35171: LIST
35172: LIST
35173: LIST
35174: LIST
35175: ST_TO_ADDR
// end ; end ;
35176: GO 35179
35178: POP
// case btype of b_depot , b_warehouse :
35179: LD_VAR 0 1
35183: PUSH
35184: LD_INT 0
35186: DOUBLE
35187: EQUAL
35188: IFTRUE 35198
35190: LD_INT 1
35192: DOUBLE
35193: EQUAL
35194: IFTRUE 35198
35196: GO 35399
35198: POP
// case nation of nation_american :
35199: LD_VAR 0 5
35203: PUSH
35204: LD_INT 1
35206: DOUBLE
35207: EQUAL
35208: IFTRUE 35212
35210: GO 35268
35212: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
35213: LD_ADDR_VAR 0 9
35217: PUSH
35218: LD_VAR 0 11
35222: PUSH
35223: LD_VAR 0 12
35227: PUSH
35228: LD_VAR 0 13
35232: PUSH
35233: LD_VAR 0 14
35237: PUSH
35238: LD_VAR 0 15
35242: PUSH
35243: LD_VAR 0 16
35247: PUSH
35248: EMPTY
35249: LIST
35250: LIST
35251: LIST
35252: LIST
35253: LIST
35254: LIST
35255: PUSH
35256: LD_VAR 0 4
35260: PUSH
35261: LD_INT 1
35263: PLUS
35264: ARRAY
35265: ST_TO_ADDR
35266: GO 35397
35268: LD_INT 2
35270: DOUBLE
35271: EQUAL
35272: IFTRUE 35276
35274: GO 35332
35276: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
35277: LD_ADDR_VAR 0 9
35281: PUSH
35282: LD_VAR 0 17
35286: PUSH
35287: LD_VAR 0 18
35291: PUSH
35292: LD_VAR 0 19
35296: PUSH
35297: LD_VAR 0 20
35301: PUSH
35302: LD_VAR 0 21
35306: PUSH
35307: LD_VAR 0 22
35311: PUSH
35312: EMPTY
35313: LIST
35314: LIST
35315: LIST
35316: LIST
35317: LIST
35318: LIST
35319: PUSH
35320: LD_VAR 0 4
35324: PUSH
35325: LD_INT 1
35327: PLUS
35328: ARRAY
35329: ST_TO_ADDR
35330: GO 35397
35332: LD_INT 3
35334: DOUBLE
35335: EQUAL
35336: IFTRUE 35340
35338: GO 35396
35340: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
35341: LD_ADDR_VAR 0 9
35345: PUSH
35346: LD_VAR 0 23
35350: PUSH
35351: LD_VAR 0 24
35355: PUSH
35356: LD_VAR 0 25
35360: PUSH
35361: LD_VAR 0 26
35365: PUSH
35366: LD_VAR 0 27
35370: PUSH
35371: LD_VAR 0 28
35375: PUSH
35376: EMPTY
35377: LIST
35378: LIST
35379: LIST
35380: LIST
35381: LIST
35382: LIST
35383: PUSH
35384: LD_VAR 0 4
35388: PUSH
35389: LD_INT 1
35391: PLUS
35392: ARRAY
35393: ST_TO_ADDR
35394: GO 35397
35396: POP
35397: GO 35952
35399: LD_INT 2
35401: DOUBLE
35402: EQUAL
35403: IFTRUE 35413
35405: LD_INT 3
35407: DOUBLE
35408: EQUAL
35409: IFTRUE 35413
35411: GO 35469
35413: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
35414: LD_ADDR_VAR 0 9
35418: PUSH
35419: LD_VAR 0 29
35423: PUSH
35424: LD_VAR 0 30
35428: PUSH
35429: LD_VAR 0 31
35433: PUSH
35434: LD_VAR 0 32
35438: PUSH
35439: LD_VAR 0 33
35443: PUSH
35444: LD_VAR 0 34
35448: PUSH
35449: EMPTY
35450: LIST
35451: LIST
35452: LIST
35453: LIST
35454: LIST
35455: LIST
35456: PUSH
35457: LD_VAR 0 4
35461: PUSH
35462: LD_INT 1
35464: PLUS
35465: ARRAY
35466: ST_TO_ADDR
35467: GO 35952
35469: LD_INT 16
35471: DOUBLE
35472: EQUAL
35473: IFTRUE 35531
35475: LD_INT 17
35477: DOUBLE
35478: EQUAL
35479: IFTRUE 35531
35481: LD_INT 18
35483: DOUBLE
35484: EQUAL
35485: IFTRUE 35531
35487: LD_INT 19
35489: DOUBLE
35490: EQUAL
35491: IFTRUE 35531
35493: LD_INT 22
35495: DOUBLE
35496: EQUAL
35497: IFTRUE 35531
35499: LD_INT 20
35501: DOUBLE
35502: EQUAL
35503: IFTRUE 35531
35505: LD_INT 21
35507: DOUBLE
35508: EQUAL
35509: IFTRUE 35531
35511: LD_INT 23
35513: DOUBLE
35514: EQUAL
35515: IFTRUE 35531
35517: LD_INT 24
35519: DOUBLE
35520: EQUAL
35521: IFTRUE 35531
35523: LD_INT 25
35525: DOUBLE
35526: EQUAL
35527: IFTRUE 35531
35529: GO 35587
35531: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
35532: LD_ADDR_VAR 0 9
35536: PUSH
35537: LD_VAR 0 35
35541: PUSH
35542: LD_VAR 0 36
35546: PUSH
35547: LD_VAR 0 37
35551: PUSH
35552: LD_VAR 0 38
35556: PUSH
35557: LD_VAR 0 39
35561: PUSH
35562: LD_VAR 0 40
35566: PUSH
35567: EMPTY
35568: LIST
35569: LIST
35570: LIST
35571: LIST
35572: LIST
35573: LIST
35574: PUSH
35575: LD_VAR 0 4
35579: PUSH
35580: LD_INT 1
35582: PLUS
35583: ARRAY
35584: ST_TO_ADDR
35585: GO 35952
35587: LD_INT 6
35589: DOUBLE
35590: EQUAL
35591: IFTRUE 35643
35593: LD_INT 7
35595: DOUBLE
35596: EQUAL
35597: IFTRUE 35643
35599: LD_INT 8
35601: DOUBLE
35602: EQUAL
35603: IFTRUE 35643
35605: LD_INT 13
35607: DOUBLE
35608: EQUAL
35609: IFTRUE 35643
35611: LD_INT 12
35613: DOUBLE
35614: EQUAL
35615: IFTRUE 35643
35617: LD_INT 15
35619: DOUBLE
35620: EQUAL
35621: IFTRUE 35643
35623: LD_INT 11
35625: DOUBLE
35626: EQUAL
35627: IFTRUE 35643
35629: LD_INT 14
35631: DOUBLE
35632: EQUAL
35633: IFTRUE 35643
35635: LD_INT 10
35637: DOUBLE
35638: EQUAL
35639: IFTRUE 35643
35641: GO 35699
35643: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
35644: LD_ADDR_VAR 0 9
35648: PUSH
35649: LD_VAR 0 41
35653: PUSH
35654: LD_VAR 0 42
35658: PUSH
35659: LD_VAR 0 43
35663: PUSH
35664: LD_VAR 0 44
35668: PUSH
35669: LD_VAR 0 45
35673: PUSH
35674: LD_VAR 0 46
35678: PUSH
35679: EMPTY
35680: LIST
35681: LIST
35682: LIST
35683: LIST
35684: LIST
35685: LIST
35686: PUSH
35687: LD_VAR 0 4
35691: PUSH
35692: LD_INT 1
35694: PLUS
35695: ARRAY
35696: ST_TO_ADDR
35697: GO 35952
35699: LD_INT 36
35701: DOUBLE
35702: EQUAL
35703: IFTRUE 35707
35705: GO 35763
35707: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
35708: LD_ADDR_VAR 0 9
35712: PUSH
35713: LD_VAR 0 47
35717: PUSH
35718: LD_VAR 0 48
35722: PUSH
35723: LD_VAR 0 49
35727: PUSH
35728: LD_VAR 0 50
35732: PUSH
35733: LD_VAR 0 51
35737: PUSH
35738: LD_VAR 0 52
35742: PUSH
35743: EMPTY
35744: LIST
35745: LIST
35746: LIST
35747: LIST
35748: LIST
35749: LIST
35750: PUSH
35751: LD_VAR 0 4
35755: PUSH
35756: LD_INT 1
35758: PLUS
35759: ARRAY
35760: ST_TO_ADDR
35761: GO 35952
35763: LD_INT 4
35765: DOUBLE
35766: EQUAL
35767: IFTRUE 35789
35769: LD_INT 5
35771: DOUBLE
35772: EQUAL
35773: IFTRUE 35789
35775: LD_INT 34
35777: DOUBLE
35778: EQUAL
35779: IFTRUE 35789
35781: LD_INT 37
35783: DOUBLE
35784: EQUAL
35785: IFTRUE 35789
35787: GO 35845
35789: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
35790: LD_ADDR_VAR 0 9
35794: PUSH
35795: LD_VAR 0 53
35799: PUSH
35800: LD_VAR 0 54
35804: PUSH
35805: LD_VAR 0 55
35809: PUSH
35810: LD_VAR 0 56
35814: PUSH
35815: LD_VAR 0 57
35819: PUSH
35820: LD_VAR 0 58
35824: PUSH
35825: EMPTY
35826: LIST
35827: LIST
35828: LIST
35829: LIST
35830: LIST
35831: LIST
35832: PUSH
35833: LD_VAR 0 4
35837: PUSH
35838: LD_INT 1
35840: PLUS
35841: ARRAY
35842: ST_TO_ADDR
35843: GO 35952
35845: LD_INT 31
35847: DOUBLE
35848: EQUAL
35849: IFTRUE 35895
35851: LD_INT 32
35853: DOUBLE
35854: EQUAL
35855: IFTRUE 35895
35857: LD_INT 33
35859: DOUBLE
35860: EQUAL
35861: IFTRUE 35895
35863: LD_INT 27
35865: DOUBLE
35866: EQUAL
35867: IFTRUE 35895
35869: LD_INT 26
35871: DOUBLE
35872: EQUAL
35873: IFTRUE 35895
35875: LD_INT 28
35877: DOUBLE
35878: EQUAL
35879: IFTRUE 35895
35881: LD_INT 29
35883: DOUBLE
35884: EQUAL
35885: IFTRUE 35895
35887: LD_INT 30
35889: DOUBLE
35890: EQUAL
35891: IFTRUE 35895
35893: GO 35951
35895: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
35896: LD_ADDR_VAR 0 9
35900: PUSH
35901: LD_VAR 0 59
35905: PUSH
35906: LD_VAR 0 60
35910: PUSH
35911: LD_VAR 0 61
35915: PUSH
35916: LD_VAR 0 62
35920: PUSH
35921: LD_VAR 0 63
35925: PUSH
35926: LD_VAR 0 64
35930: PUSH
35931: EMPTY
35932: LIST
35933: LIST
35934: LIST
35935: LIST
35936: LIST
35937: LIST
35938: PUSH
35939: LD_VAR 0 4
35943: PUSH
35944: LD_INT 1
35946: PLUS
35947: ARRAY
35948: ST_TO_ADDR
35949: GO 35952
35951: POP
// temp_list2 = [ ] ;
35952: LD_ADDR_VAR 0 10
35956: PUSH
35957: EMPTY
35958: ST_TO_ADDR
// for i in temp_list do
35959: LD_ADDR_VAR 0 8
35963: PUSH
35964: LD_VAR 0 9
35968: PUSH
35969: FOR_IN
35970: IFFALSE 36022
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
35972: LD_ADDR_VAR 0 10
35976: PUSH
35977: LD_VAR 0 10
35981: PUSH
35982: LD_VAR 0 8
35986: PUSH
35987: LD_INT 1
35989: ARRAY
35990: PUSH
35991: LD_VAR 0 2
35995: PLUS
35996: PUSH
35997: LD_VAR 0 8
36001: PUSH
36002: LD_INT 2
36004: ARRAY
36005: PUSH
36006: LD_VAR 0 3
36010: PLUS
36011: PUSH
36012: EMPTY
36013: LIST
36014: LIST
36015: PUSH
36016: EMPTY
36017: LIST
36018: ADD
36019: ST_TO_ADDR
36020: GO 35969
36022: POP
36023: POP
// result = temp_list2 ;
36024: LD_ADDR_VAR 0 7
36028: PUSH
36029: LD_VAR 0 10
36033: ST_TO_ADDR
// end ;
36034: LD_VAR 0 7
36038: RET
// export function EnemyInRange ( unit , dist ) ; begin
36039: LD_INT 0
36041: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
36042: LD_ADDR_VAR 0 3
36046: PUSH
36047: LD_VAR 0 1
36051: PPUSH
36052: CALL_OW 255
36056: PPUSH
36057: LD_VAR 0 1
36061: PPUSH
36062: CALL_OW 250
36066: PPUSH
36067: LD_VAR 0 1
36071: PPUSH
36072: CALL_OW 251
36076: PPUSH
36077: LD_VAR 0 2
36081: PPUSH
36082: CALL 9296 0 4
36086: PUSH
36087: LD_INT 4
36089: ARRAY
36090: ST_TO_ADDR
// end ;
36091: LD_VAR 0 3
36095: RET
// export function PlayerSeeMe ( unit ) ; begin
36096: LD_INT 0
36098: PPUSH
// result := See ( your_side , unit ) ;
36099: LD_ADDR_VAR 0 2
36103: PUSH
36104: LD_OWVAR 2
36108: PPUSH
36109: LD_VAR 0 1
36113: PPUSH
36114: CALL_OW 292
36118: ST_TO_ADDR
// end ;
36119: LD_VAR 0 2
36123: RET
// export function ReverseDir ( unit ) ; begin
36124: LD_INT 0
36126: PPUSH
// if not unit then
36127: LD_VAR 0 1
36131: NOT
36132: IFFALSE 36136
// exit ;
36134: GO 36159
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
36136: LD_ADDR_VAR 0 2
36140: PUSH
36141: LD_VAR 0 1
36145: PPUSH
36146: CALL_OW 254
36150: PUSH
36151: LD_INT 3
36153: PLUS
36154: PUSH
36155: LD_INT 6
36157: MOD
36158: ST_TO_ADDR
// end ;
36159: LD_VAR 0 2
36163: RET
// export function ReverseArray ( array ) ; var i ; begin
36164: LD_INT 0
36166: PPUSH
36167: PPUSH
// if not array then
36168: LD_VAR 0 1
36172: NOT
36173: IFFALSE 36177
// exit ;
36175: GO 36232
// result := [ ] ;
36177: LD_ADDR_VAR 0 2
36181: PUSH
36182: EMPTY
36183: ST_TO_ADDR
// for i := array downto 1 do
36184: LD_ADDR_VAR 0 3
36188: PUSH
36189: DOUBLE
36190: LD_VAR 0 1
36194: INC
36195: ST_TO_ADDR
36196: LD_INT 1
36198: PUSH
36199: FOR_DOWNTO
36200: IFFALSE 36230
// result := Join ( result , array [ i ] ) ;
36202: LD_ADDR_VAR 0 2
36206: PUSH
36207: LD_VAR 0 2
36211: PPUSH
36212: LD_VAR 0 1
36216: PUSH
36217: LD_VAR 0 3
36221: ARRAY
36222: PPUSH
36223: CALL 41074 0 2
36227: ST_TO_ADDR
36228: GO 36199
36230: POP
36231: POP
// end ;
36232: LD_VAR 0 2
36236: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
36237: LD_INT 0
36239: PPUSH
36240: PPUSH
36241: PPUSH
36242: PPUSH
36243: PPUSH
36244: PPUSH
// if not unit or not hexes then
36245: LD_VAR 0 1
36249: NOT
36250: IFTRUE 36259
36252: PUSH
36253: LD_VAR 0 2
36257: NOT
36258: OR
36259: IFFALSE 36263
// exit ;
36261: GO 36386
// dist := 9999 ;
36263: LD_ADDR_VAR 0 5
36267: PUSH
36268: LD_INT 9999
36270: ST_TO_ADDR
// for i = 1 to hexes do
36271: LD_ADDR_VAR 0 4
36275: PUSH
36276: DOUBLE
36277: LD_INT 1
36279: DEC
36280: ST_TO_ADDR
36281: LD_VAR 0 2
36285: PUSH
36286: FOR_TO
36287: IFFALSE 36374
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36289: LD_ADDR_VAR 0 6
36293: PUSH
36294: LD_VAR 0 1
36298: PPUSH
36299: LD_VAR 0 2
36303: PUSH
36304: LD_VAR 0 4
36308: ARRAY
36309: PUSH
36310: LD_INT 1
36312: ARRAY
36313: PPUSH
36314: LD_VAR 0 2
36318: PUSH
36319: LD_VAR 0 4
36323: ARRAY
36324: PUSH
36325: LD_INT 2
36327: ARRAY
36328: PPUSH
36329: CALL_OW 297
36333: ST_TO_ADDR
// if tdist < dist then
36334: LD_VAR 0 6
36338: PUSH
36339: LD_VAR 0 5
36343: LESS
36344: IFFALSE 36372
// begin hex := hexes [ i ] ;
36346: LD_ADDR_VAR 0 8
36350: PUSH
36351: LD_VAR 0 2
36355: PUSH
36356: LD_VAR 0 4
36360: ARRAY
36361: ST_TO_ADDR
// dist := tdist ;
36362: LD_ADDR_VAR 0 5
36366: PUSH
36367: LD_VAR 0 6
36371: ST_TO_ADDR
// end ; end ;
36372: GO 36286
36374: POP
36375: POP
// result := hex ;
36376: LD_ADDR_VAR 0 3
36380: PUSH
36381: LD_VAR 0 8
36385: ST_TO_ADDR
// end ;
36386: LD_VAR 0 3
36390: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
36391: LD_INT 0
36393: PPUSH
36394: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
36395: LD_VAR 0 1
36399: NOT
36400: IFTRUE 36439
36402: PUSH
36403: LD_VAR 0 1
36407: PUSH
36408: LD_INT 21
36410: PUSH
36411: LD_INT 2
36413: PUSH
36414: EMPTY
36415: LIST
36416: LIST
36417: PUSH
36418: LD_INT 23
36420: PUSH
36421: LD_INT 2
36423: PUSH
36424: EMPTY
36425: LIST
36426: LIST
36427: PUSH
36428: EMPTY
36429: LIST
36430: LIST
36431: PPUSH
36432: CALL_OW 69
36436: IN
36437: NOT
36438: OR
36439: IFFALSE 36443
// exit ;
36441: GO 36490
// for i = 1 to 3 do
36443: LD_ADDR_VAR 0 3
36447: PUSH
36448: DOUBLE
36449: LD_INT 1
36451: DEC
36452: ST_TO_ADDR
36453: LD_INT 3
36455: PUSH
36456: FOR_TO
36457: IFFALSE 36488
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
36459: LD_VAR 0 1
36463: PPUSH
36464: CALL_OW 250
36468: PPUSH
36469: LD_VAR 0 1
36473: PPUSH
36474: CALL_OW 251
36478: PPUSH
36479: LD_INT 1
36481: PPUSH
36482: CALL_OW 453
36486: GO 36456
36488: POP
36489: POP
// end ;
36490: LD_VAR 0 2
36494: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
36495: LD_INT 0
36497: PPUSH
36498: PPUSH
36499: PPUSH
36500: PPUSH
36501: PPUSH
36502: PPUSH
// if not unit or not enemy_unit then
36503: LD_VAR 0 1
36507: NOT
36508: IFTRUE 36517
36510: PUSH
36511: LD_VAR 0 2
36515: NOT
36516: OR
36517: IFFALSE 36521
// exit ;
36519: GO 36992
// if GetLives ( i ) < 250 then
36521: LD_VAR 0 4
36525: PPUSH
36526: CALL_OW 256
36530: PUSH
36531: LD_INT 250
36533: LESS
36534: IFFALSE 36547
// begin ComAutodestruct ( i ) ;
36536: LD_VAR 0 4
36540: PPUSH
36541: CALL 36391 0 1
// exit ;
36545: GO 36992
// end ; x := GetX ( enemy_unit ) ;
36547: LD_ADDR_VAR 0 7
36551: PUSH
36552: LD_VAR 0 2
36556: PPUSH
36557: CALL_OW 250
36561: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
36562: LD_ADDR_VAR 0 8
36566: PUSH
36567: LD_VAR 0 2
36571: PPUSH
36572: CALL_OW 251
36576: ST_TO_ADDR
// if not x or not y then
36577: LD_VAR 0 7
36581: NOT
36582: IFTRUE 36591
36584: PUSH
36585: LD_VAR 0 8
36589: NOT
36590: OR
36591: IFFALSE 36595
// exit ;
36593: GO 36992
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
36595: LD_ADDR_VAR 0 6
36599: PUSH
36600: LD_VAR 0 7
36604: PPUSH
36605: LD_INT 0
36607: PPUSH
36608: LD_INT 4
36610: PPUSH
36611: CALL_OW 272
36615: PUSH
36616: LD_VAR 0 8
36620: PPUSH
36621: LD_INT 0
36623: PPUSH
36624: LD_INT 4
36626: PPUSH
36627: CALL_OW 273
36631: PUSH
36632: EMPTY
36633: LIST
36634: LIST
36635: PUSH
36636: LD_VAR 0 7
36640: PPUSH
36641: LD_INT 1
36643: PPUSH
36644: LD_INT 4
36646: PPUSH
36647: CALL_OW 272
36651: PUSH
36652: LD_VAR 0 8
36656: PPUSH
36657: LD_INT 1
36659: PPUSH
36660: LD_INT 4
36662: PPUSH
36663: CALL_OW 273
36667: PUSH
36668: EMPTY
36669: LIST
36670: LIST
36671: PUSH
36672: LD_VAR 0 7
36676: PPUSH
36677: LD_INT 2
36679: PPUSH
36680: LD_INT 4
36682: PPUSH
36683: CALL_OW 272
36687: PUSH
36688: LD_VAR 0 8
36692: PPUSH
36693: LD_INT 2
36695: PPUSH
36696: LD_INT 4
36698: PPUSH
36699: CALL_OW 273
36703: PUSH
36704: EMPTY
36705: LIST
36706: LIST
36707: PUSH
36708: LD_VAR 0 7
36712: PPUSH
36713: LD_INT 3
36715: PPUSH
36716: LD_INT 4
36718: PPUSH
36719: CALL_OW 272
36723: PUSH
36724: LD_VAR 0 8
36728: PPUSH
36729: LD_INT 3
36731: PPUSH
36732: LD_INT 4
36734: PPUSH
36735: CALL_OW 273
36739: PUSH
36740: EMPTY
36741: LIST
36742: LIST
36743: PUSH
36744: LD_VAR 0 7
36748: PPUSH
36749: LD_INT 4
36751: PPUSH
36752: LD_INT 4
36754: PPUSH
36755: CALL_OW 272
36759: PUSH
36760: LD_VAR 0 8
36764: PPUSH
36765: LD_INT 4
36767: PPUSH
36768: LD_INT 4
36770: PPUSH
36771: CALL_OW 273
36775: PUSH
36776: EMPTY
36777: LIST
36778: LIST
36779: PUSH
36780: LD_VAR 0 7
36784: PPUSH
36785: LD_INT 5
36787: PPUSH
36788: LD_INT 4
36790: PPUSH
36791: CALL_OW 272
36795: PUSH
36796: LD_VAR 0 8
36800: PPUSH
36801: LD_INT 5
36803: PPUSH
36804: LD_INT 4
36806: PPUSH
36807: CALL_OW 273
36811: PUSH
36812: EMPTY
36813: LIST
36814: LIST
36815: PUSH
36816: EMPTY
36817: LIST
36818: LIST
36819: LIST
36820: LIST
36821: LIST
36822: LIST
36823: ST_TO_ADDR
// for i = tmp downto 1 do
36824: LD_ADDR_VAR 0 4
36828: PUSH
36829: DOUBLE
36830: LD_VAR 0 6
36834: INC
36835: ST_TO_ADDR
36836: LD_INT 1
36838: PUSH
36839: FOR_DOWNTO
36840: IFFALSE 36943
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
36842: LD_VAR 0 6
36846: PUSH
36847: LD_VAR 0 4
36851: ARRAY
36852: PUSH
36853: LD_INT 1
36855: ARRAY
36856: PPUSH
36857: LD_VAR 0 6
36861: PUSH
36862: LD_VAR 0 4
36866: ARRAY
36867: PUSH
36868: LD_INT 2
36870: ARRAY
36871: PPUSH
36872: CALL_OW 488
36876: NOT
36877: IFTRUE 36919
36879: PUSH
36880: LD_VAR 0 6
36884: PUSH
36885: LD_VAR 0 4
36889: ARRAY
36890: PUSH
36891: LD_INT 1
36893: ARRAY
36894: PPUSH
36895: LD_VAR 0 6
36899: PUSH
36900: LD_VAR 0 4
36904: ARRAY
36905: PUSH
36906: LD_INT 2
36908: ARRAY
36909: PPUSH
36910: CALL_OW 428
36914: PUSH
36915: LD_INT 0
36917: NONEQUAL
36918: OR
36919: IFFALSE 36941
// tmp := Delete ( tmp , i ) ;
36921: LD_ADDR_VAR 0 6
36925: PUSH
36926: LD_VAR 0 6
36930: PPUSH
36931: LD_VAR 0 4
36935: PPUSH
36936: CALL_OW 3
36940: ST_TO_ADDR
36941: GO 36839
36943: POP
36944: POP
// j := GetClosestHex ( unit , tmp ) ;
36945: LD_ADDR_VAR 0 5
36949: PUSH
36950: LD_VAR 0 1
36954: PPUSH
36955: LD_VAR 0 6
36959: PPUSH
36960: CALL 36237 0 2
36964: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
36965: LD_VAR 0 1
36969: PPUSH
36970: LD_VAR 0 5
36974: PUSH
36975: LD_INT 1
36977: ARRAY
36978: PPUSH
36979: LD_VAR 0 5
36983: PUSH
36984: LD_INT 2
36986: ARRAY
36987: PPUSH
36988: CALL_OW 111
// end ;
36992: LD_VAR 0 3
36996: RET
// export function PrepareApemanSoldier ( ) ; begin
36997: LD_INT 0
36999: PPUSH
// uc_nation := 0 ;
37000: LD_ADDR_OWVAR 21
37004: PUSH
37005: LD_INT 0
37007: ST_TO_ADDR
// hc_sex := sex_male ;
37008: LD_ADDR_OWVAR 27
37012: PUSH
37013: LD_INT 1
37015: ST_TO_ADDR
// hc_name :=  ;
37016: LD_ADDR_OWVAR 26
37020: PUSH
37021: LD_STRING 
37023: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
37024: LD_ADDR_OWVAR 28
37028: PUSH
37029: LD_INT 15
37031: ST_TO_ADDR
// hc_gallery :=  ;
37032: LD_ADDR_OWVAR 33
37036: PUSH
37037: LD_STRING 
37039: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37040: LD_ADDR_OWVAR 31
37044: PUSH
37045: LD_INT 0
37047: PPUSH
37048: LD_INT 3
37050: PPUSH
37051: CALL_OW 12
37055: PUSH
37056: LD_INT 0
37058: PPUSH
37059: LD_INT 3
37061: PPUSH
37062: CALL_OW 12
37066: PUSH
37067: LD_INT 0
37069: PUSH
37070: LD_INT 0
37072: PUSH
37073: EMPTY
37074: LIST
37075: LIST
37076: LIST
37077: LIST
37078: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
37079: LD_ADDR_OWVAR 29
37083: PUSH
37084: LD_INT 12
37086: PUSH
37087: LD_INT 12
37089: PUSH
37090: EMPTY
37091: LIST
37092: LIST
37093: ST_TO_ADDR
// end ;
37094: LD_VAR 0 1
37098: RET
// export function PrepareApemanEngineer ( ) ; begin
37099: LD_INT 0
37101: PPUSH
// uc_nation := 0 ;
37102: LD_ADDR_OWVAR 21
37106: PUSH
37107: LD_INT 0
37109: ST_TO_ADDR
// hc_sex := sex_male ;
37110: LD_ADDR_OWVAR 27
37114: PUSH
37115: LD_INT 1
37117: ST_TO_ADDR
// hc_name :=  ;
37118: LD_ADDR_OWVAR 26
37122: PUSH
37123: LD_STRING 
37125: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
37126: LD_ADDR_OWVAR 28
37130: PUSH
37131: LD_INT 16
37133: ST_TO_ADDR
// hc_gallery :=  ;
37134: LD_ADDR_OWVAR 33
37138: PUSH
37139: LD_STRING 
37141: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37142: LD_ADDR_OWVAR 31
37146: PUSH
37147: LD_INT 0
37149: PPUSH
37150: LD_INT 3
37152: PPUSH
37153: CALL_OW 12
37157: PUSH
37158: LD_INT 0
37160: PPUSH
37161: LD_INT 3
37163: PPUSH
37164: CALL_OW 12
37168: PUSH
37169: LD_INT 0
37171: PUSH
37172: LD_INT 0
37174: PUSH
37175: EMPTY
37176: LIST
37177: LIST
37178: LIST
37179: LIST
37180: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
37181: LD_ADDR_OWVAR 29
37185: PUSH
37186: LD_INT 12
37188: PUSH
37189: LD_INT 12
37191: PUSH
37192: EMPTY
37193: LIST
37194: LIST
37195: ST_TO_ADDR
// end ;
37196: LD_VAR 0 1
37200: RET
// export function PrepareApeman ( agressivity ) ; begin
37201: LD_INT 0
37203: PPUSH
// uc_side := 0 ;
37204: LD_ADDR_OWVAR 20
37208: PUSH
37209: LD_INT 0
37211: ST_TO_ADDR
// uc_nation := 0 ;
37212: LD_ADDR_OWVAR 21
37216: PUSH
37217: LD_INT 0
37219: ST_TO_ADDR
// hc_sex := sex_male ;
37220: LD_ADDR_OWVAR 27
37224: PUSH
37225: LD_INT 1
37227: ST_TO_ADDR
// hc_class := class_apeman ;
37228: LD_ADDR_OWVAR 28
37232: PUSH
37233: LD_INT 12
37235: ST_TO_ADDR
// hc_gallery :=  ;
37236: LD_ADDR_OWVAR 33
37240: PUSH
37241: LD_STRING 
37243: ST_TO_ADDR
// hc_name :=  ;
37244: LD_ADDR_OWVAR 26
37248: PUSH
37249: LD_STRING 
37251: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
37252: LD_ADDR_OWVAR 29
37256: PUSH
37257: LD_INT 12
37259: PUSH
37260: LD_INT 12
37262: PUSH
37263: EMPTY
37264: LIST
37265: LIST
37266: ST_TO_ADDR
// if agressivity = 0 then
37267: LD_VAR 0 1
37271: PUSH
37272: LD_INT 0
37274: EQUAL
37275: IFFALSE 37287
// hc_agressivity := 0 else
37277: LD_ADDR_OWVAR 35
37281: PUSH
37282: LD_INT 0
37284: ST_TO_ADDR
37285: GO 37308
// hc_agressivity := rand ( - agressivity , agressivity ) ;
37287: LD_ADDR_OWVAR 35
37291: PUSH
37292: LD_VAR 0 1
37296: NEG
37297: PPUSH
37298: LD_VAR 0 1
37302: PPUSH
37303: CALL_OW 12
37307: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37308: LD_ADDR_OWVAR 31
37312: PUSH
37313: LD_INT 0
37315: PPUSH
37316: LD_INT 3
37318: PPUSH
37319: CALL_OW 12
37323: PUSH
37324: LD_INT 0
37326: PPUSH
37327: LD_INT 3
37329: PPUSH
37330: CALL_OW 12
37334: PUSH
37335: LD_INT 0
37337: PUSH
37338: LD_INT 0
37340: PUSH
37341: EMPTY
37342: LIST
37343: LIST
37344: LIST
37345: LIST
37346: ST_TO_ADDR
// end ;
37347: LD_VAR 0 2
37351: RET
// export function PrepareTiger ( agressivity ) ; begin
37352: LD_INT 0
37354: PPUSH
// uc_side := 0 ;
37355: LD_ADDR_OWVAR 20
37359: PUSH
37360: LD_INT 0
37362: ST_TO_ADDR
// uc_nation := 0 ;
37363: LD_ADDR_OWVAR 21
37367: PUSH
37368: LD_INT 0
37370: ST_TO_ADDR
// InitHc ;
37371: CALL_OW 19
// hc_class := class_tiger ;
37375: LD_ADDR_OWVAR 28
37379: PUSH
37380: LD_INT 14
37382: ST_TO_ADDR
// hc_gallery :=  ;
37383: LD_ADDR_OWVAR 33
37387: PUSH
37388: LD_STRING 
37390: ST_TO_ADDR
// hc_name :=  ;
37391: LD_ADDR_OWVAR 26
37395: PUSH
37396: LD_STRING 
37398: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
37399: LD_ADDR_OWVAR 35
37403: PUSH
37404: LD_VAR 0 1
37408: NEG
37409: PPUSH
37410: LD_VAR 0 1
37414: PPUSH
37415: CALL_OW 12
37419: ST_TO_ADDR
// end ;
37420: LD_VAR 0 2
37424: RET
// export function PrepareEnchidna ( ) ; begin
37425: LD_INT 0
37427: PPUSH
// uc_side := 0 ;
37428: LD_ADDR_OWVAR 20
37432: PUSH
37433: LD_INT 0
37435: ST_TO_ADDR
// uc_nation := 0 ;
37436: LD_ADDR_OWVAR 21
37440: PUSH
37441: LD_INT 0
37443: ST_TO_ADDR
// InitHc ;
37444: CALL_OW 19
// hc_class := class_baggie ;
37448: LD_ADDR_OWVAR 28
37452: PUSH
37453: LD_INT 13
37455: ST_TO_ADDR
// hc_gallery :=  ;
37456: LD_ADDR_OWVAR 33
37460: PUSH
37461: LD_STRING 
37463: ST_TO_ADDR
// hc_name :=  ;
37464: LD_ADDR_OWVAR 26
37468: PUSH
37469: LD_STRING 
37471: ST_TO_ADDR
// end ;
37472: LD_VAR 0 1
37476: RET
// export function PrepareFrog ( ) ; begin
37477: LD_INT 0
37479: PPUSH
// uc_side := 0 ;
37480: LD_ADDR_OWVAR 20
37484: PUSH
37485: LD_INT 0
37487: ST_TO_ADDR
// uc_nation := 0 ;
37488: LD_ADDR_OWVAR 21
37492: PUSH
37493: LD_INT 0
37495: ST_TO_ADDR
// InitHc ;
37496: CALL_OW 19
// hc_class := class_frog ;
37500: LD_ADDR_OWVAR 28
37504: PUSH
37505: LD_INT 19
37507: ST_TO_ADDR
// hc_gallery :=  ;
37508: LD_ADDR_OWVAR 33
37512: PUSH
37513: LD_STRING 
37515: ST_TO_ADDR
// hc_name :=  ;
37516: LD_ADDR_OWVAR 26
37520: PUSH
37521: LD_STRING 
37523: ST_TO_ADDR
// end ;
37524: LD_VAR 0 1
37528: RET
// export function PrepareFish ( ) ; begin
37529: LD_INT 0
37531: PPUSH
// uc_side := 0 ;
37532: LD_ADDR_OWVAR 20
37536: PUSH
37537: LD_INT 0
37539: ST_TO_ADDR
// uc_nation := 0 ;
37540: LD_ADDR_OWVAR 21
37544: PUSH
37545: LD_INT 0
37547: ST_TO_ADDR
// InitHc ;
37548: CALL_OW 19
// hc_class := class_fish ;
37552: LD_ADDR_OWVAR 28
37556: PUSH
37557: LD_INT 20
37559: ST_TO_ADDR
// hc_gallery :=  ;
37560: LD_ADDR_OWVAR 33
37564: PUSH
37565: LD_STRING 
37567: ST_TO_ADDR
// hc_name :=  ;
37568: LD_ADDR_OWVAR 26
37572: PUSH
37573: LD_STRING 
37575: ST_TO_ADDR
// end ;
37576: LD_VAR 0 1
37580: RET
// export function PrepareBird ( ) ; begin
37581: LD_INT 0
37583: PPUSH
// uc_side := 0 ;
37584: LD_ADDR_OWVAR 20
37588: PUSH
37589: LD_INT 0
37591: ST_TO_ADDR
// uc_nation := 0 ;
37592: LD_ADDR_OWVAR 21
37596: PUSH
37597: LD_INT 0
37599: ST_TO_ADDR
// InitHc ;
37600: CALL_OW 19
// hc_class := class_phororhacos ;
37604: LD_ADDR_OWVAR 28
37608: PUSH
37609: LD_INT 18
37611: ST_TO_ADDR
// hc_gallery :=  ;
37612: LD_ADDR_OWVAR 33
37616: PUSH
37617: LD_STRING 
37619: ST_TO_ADDR
// hc_name :=  ;
37620: LD_ADDR_OWVAR 26
37624: PUSH
37625: LD_STRING 
37627: ST_TO_ADDR
// end ;
37628: LD_VAR 0 1
37632: RET
// export function PrepareHorse ( ) ; begin
37633: LD_INT 0
37635: PPUSH
// uc_side := 0 ;
37636: LD_ADDR_OWVAR 20
37640: PUSH
37641: LD_INT 0
37643: ST_TO_ADDR
// uc_nation := 0 ;
37644: LD_ADDR_OWVAR 21
37648: PUSH
37649: LD_INT 0
37651: ST_TO_ADDR
// InitHc ;
37652: CALL_OW 19
// hc_class := class_horse ;
37656: LD_ADDR_OWVAR 28
37660: PUSH
37661: LD_INT 21
37663: ST_TO_ADDR
// hc_gallery :=  ;
37664: LD_ADDR_OWVAR 33
37668: PUSH
37669: LD_STRING 
37671: ST_TO_ADDR
// hc_name :=  ;
37672: LD_ADDR_OWVAR 26
37676: PUSH
37677: LD_STRING 
37679: ST_TO_ADDR
// end ;
37680: LD_VAR 0 1
37684: RET
// export function PrepareMastodont ( ) ; begin
37685: LD_INT 0
37687: PPUSH
// uc_side := 0 ;
37688: LD_ADDR_OWVAR 20
37692: PUSH
37693: LD_INT 0
37695: ST_TO_ADDR
// uc_nation := 0 ;
37696: LD_ADDR_OWVAR 21
37700: PUSH
37701: LD_INT 0
37703: ST_TO_ADDR
// vc_chassis := class_mastodont ;
37704: LD_ADDR_OWVAR 37
37708: PUSH
37709: LD_INT 31
37711: ST_TO_ADDR
// vc_control := control_rider ;
37712: LD_ADDR_OWVAR 38
37716: PUSH
37717: LD_INT 4
37719: ST_TO_ADDR
// end ;
37720: LD_VAR 0 1
37724: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
37725: LD_INT 0
37727: PPUSH
37728: PPUSH
37729: PPUSH
// uc_side = 0 ;
37730: LD_ADDR_OWVAR 20
37734: PUSH
37735: LD_INT 0
37737: ST_TO_ADDR
// uc_nation = 0 ;
37738: LD_ADDR_OWVAR 21
37742: PUSH
37743: LD_INT 0
37745: ST_TO_ADDR
// InitHc_All ( ) ;
37746: CALL_OW 584
// InitVc ;
37750: CALL_OW 20
// if mastodonts then
37754: LD_VAR 0 6
37758: IFFALSE 37825
// for i = 1 to mastodonts do
37760: LD_ADDR_VAR 0 11
37764: PUSH
37765: DOUBLE
37766: LD_INT 1
37768: DEC
37769: ST_TO_ADDR
37770: LD_VAR 0 6
37774: PUSH
37775: FOR_TO
37776: IFFALSE 37823
// begin vc_chassis := 31 ;
37778: LD_ADDR_OWVAR 37
37782: PUSH
37783: LD_INT 31
37785: ST_TO_ADDR
// vc_control := control_rider ;
37786: LD_ADDR_OWVAR 38
37790: PUSH
37791: LD_INT 4
37793: ST_TO_ADDR
// animal := CreateVehicle ;
37794: LD_ADDR_VAR 0 12
37798: PUSH
37799: CALL_OW 45
37803: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37804: LD_VAR 0 12
37808: PPUSH
37809: LD_VAR 0 8
37813: PPUSH
37814: LD_INT 0
37816: PPUSH
37817: CALL 39967 0 3
// end ;
37821: GO 37775
37823: POP
37824: POP
// if horses then
37825: LD_VAR 0 5
37829: IFFALSE 37896
// for i = 1 to horses do
37831: LD_ADDR_VAR 0 11
37835: PUSH
37836: DOUBLE
37837: LD_INT 1
37839: DEC
37840: ST_TO_ADDR
37841: LD_VAR 0 5
37845: PUSH
37846: FOR_TO
37847: IFFALSE 37894
// begin hc_class := 21 ;
37849: LD_ADDR_OWVAR 28
37853: PUSH
37854: LD_INT 21
37856: ST_TO_ADDR
// hc_gallery :=  ;
37857: LD_ADDR_OWVAR 33
37861: PUSH
37862: LD_STRING 
37864: ST_TO_ADDR
// animal := CreateHuman ;
37865: LD_ADDR_VAR 0 12
37869: PUSH
37870: CALL_OW 44
37874: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37875: LD_VAR 0 12
37879: PPUSH
37880: LD_VAR 0 8
37884: PPUSH
37885: LD_INT 0
37887: PPUSH
37888: CALL 39967 0 3
// end ;
37892: GO 37846
37894: POP
37895: POP
// if birds then
37896: LD_VAR 0 1
37900: IFFALSE 37967
// for i = 1 to birds do
37902: LD_ADDR_VAR 0 11
37906: PUSH
37907: DOUBLE
37908: LD_INT 1
37910: DEC
37911: ST_TO_ADDR
37912: LD_VAR 0 1
37916: PUSH
37917: FOR_TO
37918: IFFALSE 37965
// begin hc_class := 18 ;
37920: LD_ADDR_OWVAR 28
37924: PUSH
37925: LD_INT 18
37927: ST_TO_ADDR
// hc_gallery =  ;
37928: LD_ADDR_OWVAR 33
37932: PUSH
37933: LD_STRING 
37935: ST_TO_ADDR
// animal := CreateHuman ;
37936: LD_ADDR_VAR 0 12
37940: PUSH
37941: CALL_OW 44
37945: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37946: LD_VAR 0 12
37950: PPUSH
37951: LD_VAR 0 8
37955: PPUSH
37956: LD_INT 0
37958: PPUSH
37959: CALL 39967 0 3
// end ;
37963: GO 37917
37965: POP
37966: POP
// if tigers then
37967: LD_VAR 0 2
37971: IFFALSE 38055
// for i = 1 to tigers do
37973: LD_ADDR_VAR 0 11
37977: PUSH
37978: DOUBLE
37979: LD_INT 1
37981: DEC
37982: ST_TO_ADDR
37983: LD_VAR 0 2
37987: PUSH
37988: FOR_TO
37989: IFFALSE 38053
// begin hc_class = class_tiger ;
37991: LD_ADDR_OWVAR 28
37995: PUSH
37996: LD_INT 14
37998: ST_TO_ADDR
// hc_gallery =  ;
37999: LD_ADDR_OWVAR 33
38003: PUSH
38004: LD_STRING 
38006: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
38007: LD_ADDR_OWVAR 35
38011: PUSH
38012: LD_INT 7
38014: NEG
38015: PPUSH
38016: LD_INT 7
38018: PPUSH
38019: CALL_OW 12
38023: ST_TO_ADDR
// animal := CreateHuman ;
38024: LD_ADDR_VAR 0 12
38028: PUSH
38029: CALL_OW 44
38033: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38034: LD_VAR 0 12
38038: PPUSH
38039: LD_VAR 0 8
38043: PPUSH
38044: LD_INT 0
38046: PPUSH
38047: CALL 39967 0 3
// end ;
38051: GO 37988
38053: POP
38054: POP
// if apemans then
38055: LD_VAR 0 3
38059: IFFALSE 38182
// for i = 1 to apemans do
38061: LD_ADDR_VAR 0 11
38065: PUSH
38066: DOUBLE
38067: LD_INT 1
38069: DEC
38070: ST_TO_ADDR
38071: LD_VAR 0 3
38075: PUSH
38076: FOR_TO
38077: IFFALSE 38180
// begin hc_class = class_apeman ;
38079: LD_ADDR_OWVAR 28
38083: PUSH
38084: LD_INT 12
38086: ST_TO_ADDR
// hc_gallery =  ;
38087: LD_ADDR_OWVAR 33
38091: PUSH
38092: LD_STRING 
38094: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
38095: LD_ADDR_OWVAR 35
38099: PUSH
38100: LD_INT 2
38102: NEG
38103: PPUSH
38104: LD_INT 2
38106: PPUSH
38107: CALL_OW 12
38111: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
38112: LD_ADDR_OWVAR 31
38116: PUSH
38117: LD_INT 1
38119: PPUSH
38120: LD_INT 3
38122: PPUSH
38123: CALL_OW 12
38127: PUSH
38128: LD_INT 1
38130: PPUSH
38131: LD_INT 3
38133: PPUSH
38134: CALL_OW 12
38138: PUSH
38139: LD_INT 0
38141: PUSH
38142: LD_INT 0
38144: PUSH
38145: EMPTY
38146: LIST
38147: LIST
38148: LIST
38149: LIST
38150: ST_TO_ADDR
// animal := CreateHuman ;
38151: LD_ADDR_VAR 0 12
38155: PUSH
38156: CALL_OW 44
38160: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38161: LD_VAR 0 12
38165: PPUSH
38166: LD_VAR 0 8
38170: PPUSH
38171: LD_INT 0
38173: PPUSH
38174: CALL 39967 0 3
// end ;
38178: GO 38076
38180: POP
38181: POP
// if enchidnas then
38182: LD_VAR 0 4
38186: IFFALSE 38253
// for i = 1 to enchidnas do
38188: LD_ADDR_VAR 0 11
38192: PUSH
38193: DOUBLE
38194: LD_INT 1
38196: DEC
38197: ST_TO_ADDR
38198: LD_VAR 0 4
38202: PUSH
38203: FOR_TO
38204: IFFALSE 38251
// begin hc_class = 13 ;
38206: LD_ADDR_OWVAR 28
38210: PUSH
38211: LD_INT 13
38213: ST_TO_ADDR
// hc_gallery =  ;
38214: LD_ADDR_OWVAR 33
38218: PUSH
38219: LD_STRING 
38221: ST_TO_ADDR
// animal := CreateHuman ;
38222: LD_ADDR_VAR 0 12
38226: PUSH
38227: CALL_OW 44
38231: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38232: LD_VAR 0 12
38236: PPUSH
38237: LD_VAR 0 8
38241: PPUSH
38242: LD_INT 0
38244: PPUSH
38245: CALL 39967 0 3
// end ;
38249: GO 38203
38251: POP
38252: POP
// if fishes then
38253: LD_VAR 0 7
38257: IFFALSE 38324
// for i = 1 to fishes do
38259: LD_ADDR_VAR 0 11
38263: PUSH
38264: DOUBLE
38265: LD_INT 1
38267: DEC
38268: ST_TO_ADDR
38269: LD_VAR 0 7
38273: PUSH
38274: FOR_TO
38275: IFFALSE 38322
// begin hc_class = 20 ;
38277: LD_ADDR_OWVAR 28
38281: PUSH
38282: LD_INT 20
38284: ST_TO_ADDR
// hc_gallery =  ;
38285: LD_ADDR_OWVAR 33
38289: PUSH
38290: LD_STRING 
38292: ST_TO_ADDR
// animal := CreateHuman ;
38293: LD_ADDR_VAR 0 12
38297: PUSH
38298: CALL_OW 44
38302: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
38303: LD_VAR 0 12
38307: PPUSH
38308: LD_VAR 0 9
38312: PPUSH
38313: LD_INT 0
38315: PPUSH
38316: CALL 39967 0 3
// end ;
38320: GO 38274
38322: POP
38323: POP
// end ;
38324: LD_VAR 0 10
38328: RET
// export function WantHeal ( sci , unit ) ; begin
38329: LD_INT 0
38331: PPUSH
// if GetTaskList ( sci ) > 0 then
38332: LD_VAR 0 1
38336: PPUSH
38337: CALL_OW 437
38341: PUSH
38342: LD_INT 0
38344: GREATER
38345: IFFALSE 38417
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
38347: LD_VAR 0 1
38351: PPUSH
38352: CALL_OW 437
38356: PUSH
38357: LD_INT 1
38359: ARRAY
38360: PUSH
38361: LD_INT 1
38363: ARRAY
38364: PUSH
38365: LD_STRING l
38367: EQUAL
38368: IFFALSE 38395
38370: PUSH
38371: LD_VAR 0 1
38375: PPUSH
38376: CALL_OW 437
38380: PUSH
38381: LD_INT 1
38383: ARRAY
38384: PUSH
38385: LD_INT 4
38387: ARRAY
38388: PUSH
38389: LD_VAR 0 2
38393: EQUAL
38394: AND
38395: IFFALSE 38407
// result := true else
38397: LD_ADDR_VAR 0 3
38401: PUSH
38402: LD_INT 1
38404: ST_TO_ADDR
38405: GO 38415
// result := false ;
38407: LD_ADDR_VAR 0 3
38411: PUSH
38412: LD_INT 0
38414: ST_TO_ADDR
// end else
38415: GO 38425
// result := false ;
38417: LD_ADDR_VAR 0 3
38421: PUSH
38422: LD_INT 0
38424: ST_TO_ADDR
// end ;
38425: LD_VAR 0 3
38429: RET
// export function HealTarget ( sci ) ; begin
38430: LD_INT 0
38432: PPUSH
// if not sci then
38433: LD_VAR 0 1
38437: NOT
38438: IFFALSE 38442
// exit ;
38440: GO 38507
// result := 0 ;
38442: LD_ADDR_VAR 0 2
38446: PUSH
38447: LD_INT 0
38449: ST_TO_ADDR
// if GetTaskList ( sci ) then
38450: LD_VAR 0 1
38454: PPUSH
38455: CALL_OW 437
38459: IFFALSE 38507
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
38461: LD_VAR 0 1
38465: PPUSH
38466: CALL_OW 437
38470: PUSH
38471: LD_INT 1
38473: ARRAY
38474: PUSH
38475: LD_INT 1
38477: ARRAY
38478: PUSH
38479: LD_STRING l
38481: EQUAL
38482: IFFALSE 38507
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
38484: LD_ADDR_VAR 0 2
38488: PUSH
38489: LD_VAR 0 1
38493: PPUSH
38494: CALL_OW 437
38498: PUSH
38499: LD_INT 1
38501: ARRAY
38502: PUSH
38503: LD_INT 4
38505: ARRAY
38506: ST_TO_ADDR
// end ;
38507: LD_VAR 0 2
38511: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
38512: LD_INT 0
38514: PPUSH
38515: PPUSH
38516: PPUSH
38517: PPUSH
// if not base_units then
38518: LD_VAR 0 1
38522: NOT
38523: IFFALSE 38527
// exit ;
38525: GO 38614
// result := false ;
38527: LD_ADDR_VAR 0 2
38531: PUSH
38532: LD_INT 0
38534: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
38535: LD_ADDR_VAR 0 5
38539: PUSH
38540: LD_VAR 0 1
38544: PPUSH
38545: LD_INT 21
38547: PUSH
38548: LD_INT 3
38550: PUSH
38551: EMPTY
38552: LIST
38553: LIST
38554: PPUSH
38555: CALL_OW 72
38559: ST_TO_ADDR
// if not tmp then
38560: LD_VAR 0 5
38564: NOT
38565: IFFALSE 38569
// exit ;
38567: GO 38614
// for i in tmp do
38569: LD_ADDR_VAR 0 3
38573: PUSH
38574: LD_VAR 0 5
38578: PUSH
38579: FOR_IN
38580: IFFALSE 38612
// begin result := EnemyInRange ( i , 22 ) ;
38582: LD_ADDR_VAR 0 2
38586: PUSH
38587: LD_VAR 0 3
38591: PPUSH
38592: LD_INT 22
38594: PPUSH
38595: CALL 36039 0 2
38599: ST_TO_ADDR
// if result then
38600: LD_VAR 0 2
38604: IFFALSE 38610
// exit ;
38606: POP
38607: POP
38608: GO 38614
// end ;
38610: GO 38579
38612: POP
38613: POP
// end ;
38614: LD_VAR 0 2
38618: RET
// export function FilterByTag ( units , tag ) ; begin
38619: LD_INT 0
38621: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
38622: LD_ADDR_VAR 0 3
38626: PUSH
38627: LD_VAR 0 1
38631: PPUSH
38632: LD_INT 120
38634: PUSH
38635: LD_VAR 0 2
38639: PUSH
38640: EMPTY
38641: LIST
38642: LIST
38643: PPUSH
38644: CALL_OW 72
38648: ST_TO_ADDR
// end ;
38649: LD_VAR 0 3
38653: RET
// export function IsDriver ( un ) ; begin
38654: LD_INT 0
38656: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
38657: LD_ADDR_VAR 0 2
38661: PUSH
38662: LD_VAR 0 1
38666: PUSH
38667: LD_INT 55
38669: PUSH
38670: EMPTY
38671: LIST
38672: PPUSH
38673: CALL_OW 69
38677: IN
38678: ST_TO_ADDR
// end ;
38679: LD_VAR 0 2
38683: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
38684: LD_INT 0
38686: PPUSH
38687: PPUSH
// list := [ ] ;
38688: LD_ADDR_VAR 0 5
38692: PUSH
38693: EMPTY
38694: ST_TO_ADDR
// case d of 0 :
38695: LD_VAR 0 3
38699: PUSH
38700: LD_INT 0
38702: DOUBLE
38703: EQUAL
38704: IFTRUE 38708
38706: GO 38841
38708: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
38709: LD_ADDR_VAR 0 5
38713: PUSH
38714: LD_VAR 0 1
38718: PUSH
38719: LD_INT 4
38721: MINUS
38722: PUSH
38723: LD_VAR 0 2
38727: PUSH
38728: LD_INT 4
38730: MINUS
38731: PUSH
38732: LD_INT 2
38734: PUSH
38735: EMPTY
38736: LIST
38737: LIST
38738: LIST
38739: PUSH
38740: LD_VAR 0 1
38744: PUSH
38745: LD_INT 3
38747: MINUS
38748: PUSH
38749: LD_VAR 0 2
38753: PUSH
38754: LD_INT 1
38756: PUSH
38757: EMPTY
38758: LIST
38759: LIST
38760: LIST
38761: PUSH
38762: LD_VAR 0 1
38766: PUSH
38767: LD_INT 4
38769: PLUS
38770: PUSH
38771: LD_VAR 0 2
38775: PUSH
38776: LD_INT 4
38778: PUSH
38779: EMPTY
38780: LIST
38781: LIST
38782: LIST
38783: PUSH
38784: LD_VAR 0 1
38788: PUSH
38789: LD_INT 3
38791: PLUS
38792: PUSH
38793: LD_VAR 0 2
38797: PUSH
38798: LD_INT 3
38800: PLUS
38801: PUSH
38802: LD_INT 5
38804: PUSH
38805: EMPTY
38806: LIST
38807: LIST
38808: LIST
38809: PUSH
38810: LD_VAR 0 1
38814: PUSH
38815: LD_VAR 0 2
38819: PUSH
38820: LD_INT 4
38822: PLUS
38823: PUSH
38824: LD_INT 0
38826: PUSH
38827: EMPTY
38828: LIST
38829: LIST
38830: LIST
38831: PUSH
38832: EMPTY
38833: LIST
38834: LIST
38835: LIST
38836: LIST
38837: LIST
38838: ST_TO_ADDR
// end ; 1 :
38839: GO 39539
38841: LD_INT 1
38843: DOUBLE
38844: EQUAL
38845: IFTRUE 38849
38847: GO 38982
38849: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
38850: LD_ADDR_VAR 0 5
38854: PUSH
38855: LD_VAR 0 1
38859: PUSH
38860: LD_VAR 0 2
38864: PUSH
38865: LD_INT 4
38867: MINUS
38868: PUSH
38869: LD_INT 3
38871: PUSH
38872: EMPTY
38873: LIST
38874: LIST
38875: LIST
38876: PUSH
38877: LD_VAR 0 1
38881: PUSH
38882: LD_INT 3
38884: MINUS
38885: PUSH
38886: LD_VAR 0 2
38890: PUSH
38891: LD_INT 3
38893: MINUS
38894: PUSH
38895: LD_INT 2
38897: PUSH
38898: EMPTY
38899: LIST
38900: LIST
38901: LIST
38902: PUSH
38903: LD_VAR 0 1
38907: PUSH
38908: LD_INT 4
38910: MINUS
38911: PUSH
38912: LD_VAR 0 2
38916: PUSH
38917: LD_INT 1
38919: PUSH
38920: EMPTY
38921: LIST
38922: LIST
38923: LIST
38924: PUSH
38925: LD_VAR 0 1
38929: PUSH
38930: LD_VAR 0 2
38934: PUSH
38935: LD_INT 3
38937: PLUS
38938: PUSH
38939: LD_INT 0
38941: PUSH
38942: EMPTY
38943: LIST
38944: LIST
38945: LIST
38946: PUSH
38947: LD_VAR 0 1
38951: PUSH
38952: LD_INT 4
38954: PLUS
38955: PUSH
38956: LD_VAR 0 2
38960: PUSH
38961: LD_INT 4
38963: PLUS
38964: PUSH
38965: LD_INT 5
38967: PUSH
38968: EMPTY
38969: LIST
38970: LIST
38971: LIST
38972: PUSH
38973: EMPTY
38974: LIST
38975: LIST
38976: LIST
38977: LIST
38978: LIST
38979: ST_TO_ADDR
// end ; 2 :
38980: GO 39539
38982: LD_INT 2
38984: DOUBLE
38985: EQUAL
38986: IFTRUE 38990
38988: GO 39119
38990: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
38991: LD_ADDR_VAR 0 5
38995: PUSH
38996: LD_VAR 0 1
39000: PUSH
39001: LD_VAR 0 2
39005: PUSH
39006: LD_INT 3
39008: MINUS
39009: PUSH
39010: LD_INT 3
39012: PUSH
39013: EMPTY
39014: LIST
39015: LIST
39016: LIST
39017: PUSH
39018: LD_VAR 0 1
39022: PUSH
39023: LD_INT 4
39025: PLUS
39026: PUSH
39027: LD_VAR 0 2
39031: PUSH
39032: LD_INT 4
39034: PUSH
39035: EMPTY
39036: LIST
39037: LIST
39038: LIST
39039: PUSH
39040: LD_VAR 0 1
39044: PUSH
39045: LD_VAR 0 2
39049: PUSH
39050: LD_INT 4
39052: PLUS
39053: PUSH
39054: LD_INT 0
39056: PUSH
39057: EMPTY
39058: LIST
39059: LIST
39060: LIST
39061: PUSH
39062: LD_VAR 0 1
39066: PUSH
39067: LD_INT 3
39069: MINUS
39070: PUSH
39071: LD_VAR 0 2
39075: PUSH
39076: LD_INT 1
39078: PUSH
39079: EMPTY
39080: LIST
39081: LIST
39082: LIST
39083: PUSH
39084: LD_VAR 0 1
39088: PUSH
39089: LD_INT 4
39091: MINUS
39092: PUSH
39093: LD_VAR 0 2
39097: PUSH
39098: LD_INT 4
39100: MINUS
39101: PUSH
39102: LD_INT 2
39104: PUSH
39105: EMPTY
39106: LIST
39107: LIST
39108: LIST
39109: PUSH
39110: EMPTY
39111: LIST
39112: LIST
39113: LIST
39114: LIST
39115: LIST
39116: ST_TO_ADDR
// end ; 3 :
39117: GO 39539
39119: LD_INT 3
39121: DOUBLE
39122: EQUAL
39123: IFTRUE 39127
39125: GO 39260
39127: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
39128: LD_ADDR_VAR 0 5
39132: PUSH
39133: LD_VAR 0 1
39137: PUSH
39138: LD_INT 3
39140: PLUS
39141: PUSH
39142: LD_VAR 0 2
39146: PUSH
39147: LD_INT 4
39149: PUSH
39150: EMPTY
39151: LIST
39152: LIST
39153: LIST
39154: PUSH
39155: LD_VAR 0 1
39159: PUSH
39160: LD_INT 4
39162: PLUS
39163: PUSH
39164: LD_VAR 0 2
39168: PUSH
39169: LD_INT 4
39171: PLUS
39172: PUSH
39173: LD_INT 5
39175: PUSH
39176: EMPTY
39177: LIST
39178: LIST
39179: LIST
39180: PUSH
39181: LD_VAR 0 1
39185: PUSH
39186: LD_INT 4
39188: MINUS
39189: PUSH
39190: LD_VAR 0 2
39194: PUSH
39195: LD_INT 1
39197: PUSH
39198: EMPTY
39199: LIST
39200: LIST
39201: LIST
39202: PUSH
39203: LD_VAR 0 1
39207: PUSH
39208: LD_VAR 0 2
39212: PUSH
39213: LD_INT 4
39215: MINUS
39216: PUSH
39217: LD_INT 3
39219: PUSH
39220: EMPTY
39221: LIST
39222: LIST
39223: LIST
39224: PUSH
39225: LD_VAR 0 1
39229: PUSH
39230: LD_INT 3
39232: MINUS
39233: PUSH
39234: LD_VAR 0 2
39238: PUSH
39239: LD_INT 3
39241: MINUS
39242: PUSH
39243: LD_INT 2
39245: PUSH
39246: EMPTY
39247: LIST
39248: LIST
39249: LIST
39250: PUSH
39251: EMPTY
39252: LIST
39253: LIST
39254: LIST
39255: LIST
39256: LIST
39257: ST_TO_ADDR
// end ; 4 :
39258: GO 39539
39260: LD_INT 4
39262: DOUBLE
39263: EQUAL
39264: IFTRUE 39268
39266: GO 39401
39268: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
39269: LD_ADDR_VAR 0 5
39273: PUSH
39274: LD_VAR 0 1
39278: PUSH
39279: LD_VAR 0 2
39283: PUSH
39284: LD_INT 4
39286: PLUS
39287: PUSH
39288: LD_INT 0
39290: PUSH
39291: EMPTY
39292: LIST
39293: LIST
39294: LIST
39295: PUSH
39296: LD_VAR 0 1
39300: PUSH
39301: LD_INT 3
39303: PLUS
39304: PUSH
39305: LD_VAR 0 2
39309: PUSH
39310: LD_INT 3
39312: PLUS
39313: PUSH
39314: LD_INT 5
39316: PUSH
39317: EMPTY
39318: LIST
39319: LIST
39320: LIST
39321: PUSH
39322: LD_VAR 0 1
39326: PUSH
39327: LD_INT 4
39329: PLUS
39330: PUSH
39331: LD_VAR 0 2
39335: PUSH
39336: LD_INT 4
39338: PUSH
39339: EMPTY
39340: LIST
39341: LIST
39342: LIST
39343: PUSH
39344: LD_VAR 0 1
39348: PUSH
39349: LD_VAR 0 2
39353: PUSH
39354: LD_INT 3
39356: MINUS
39357: PUSH
39358: LD_INT 3
39360: PUSH
39361: EMPTY
39362: LIST
39363: LIST
39364: LIST
39365: PUSH
39366: LD_VAR 0 1
39370: PUSH
39371: LD_INT 4
39373: MINUS
39374: PUSH
39375: LD_VAR 0 2
39379: PUSH
39380: LD_INT 4
39382: MINUS
39383: PUSH
39384: LD_INT 2
39386: PUSH
39387: EMPTY
39388: LIST
39389: LIST
39390: LIST
39391: PUSH
39392: EMPTY
39393: LIST
39394: LIST
39395: LIST
39396: LIST
39397: LIST
39398: ST_TO_ADDR
// end ; 5 :
39399: GO 39539
39401: LD_INT 5
39403: DOUBLE
39404: EQUAL
39405: IFTRUE 39409
39407: GO 39538
39409: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
39410: LD_ADDR_VAR 0 5
39414: PUSH
39415: LD_VAR 0 1
39419: PUSH
39420: LD_INT 4
39422: MINUS
39423: PUSH
39424: LD_VAR 0 2
39428: PUSH
39429: LD_INT 1
39431: PUSH
39432: EMPTY
39433: LIST
39434: LIST
39435: LIST
39436: PUSH
39437: LD_VAR 0 1
39441: PUSH
39442: LD_VAR 0 2
39446: PUSH
39447: LD_INT 4
39449: MINUS
39450: PUSH
39451: LD_INT 3
39453: PUSH
39454: EMPTY
39455: LIST
39456: LIST
39457: LIST
39458: PUSH
39459: LD_VAR 0 1
39463: PUSH
39464: LD_INT 4
39466: PLUS
39467: PUSH
39468: LD_VAR 0 2
39472: PUSH
39473: LD_INT 4
39475: PLUS
39476: PUSH
39477: LD_INT 5
39479: PUSH
39480: EMPTY
39481: LIST
39482: LIST
39483: LIST
39484: PUSH
39485: LD_VAR 0 1
39489: PUSH
39490: LD_INT 3
39492: PLUS
39493: PUSH
39494: LD_VAR 0 2
39498: PUSH
39499: LD_INT 4
39501: PUSH
39502: EMPTY
39503: LIST
39504: LIST
39505: LIST
39506: PUSH
39507: LD_VAR 0 1
39511: PUSH
39512: LD_VAR 0 2
39516: PUSH
39517: LD_INT 3
39519: PLUS
39520: PUSH
39521: LD_INT 0
39523: PUSH
39524: EMPTY
39525: LIST
39526: LIST
39527: LIST
39528: PUSH
39529: EMPTY
39530: LIST
39531: LIST
39532: LIST
39533: LIST
39534: LIST
39535: ST_TO_ADDR
// end ; end ;
39536: GO 39539
39538: POP
// result := list ;
39539: LD_ADDR_VAR 0 4
39543: PUSH
39544: LD_VAR 0 5
39548: ST_TO_ADDR
// end ;
39549: LD_VAR 0 4
39553: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
39554: LD_INT 0
39556: PPUSH
39557: PPUSH
39558: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
39559: LD_VAR 0 1
39563: NOT
39564: IFTRUE 39592
39566: PUSH
39567: LD_VAR 0 2
39571: PUSH
39572: LD_INT 1
39574: PUSH
39575: LD_INT 2
39577: PUSH
39578: LD_INT 3
39580: PUSH
39581: LD_INT 4
39583: PUSH
39584: EMPTY
39585: LIST
39586: LIST
39587: LIST
39588: LIST
39589: IN
39590: NOT
39591: OR
39592: IFFALSE 39596
// exit ;
39594: GO 39679
// tmp := [ ] ;
39596: LD_ADDR_VAR 0 5
39600: PUSH
39601: EMPTY
39602: ST_TO_ADDR
// for i in units do
39603: LD_ADDR_VAR 0 4
39607: PUSH
39608: LD_VAR 0 1
39612: PUSH
39613: FOR_IN
39614: IFFALSE 39648
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
39616: LD_ADDR_VAR 0 5
39620: PUSH
39621: LD_VAR 0 5
39625: PPUSH
39626: LD_VAR 0 4
39630: PPUSH
39631: LD_VAR 0 2
39635: PPUSH
39636: CALL_OW 259
39640: PPUSH
39641: CALL 41074 0 2
39645: ST_TO_ADDR
39646: GO 39613
39648: POP
39649: POP
// if not tmp then
39650: LD_VAR 0 5
39654: NOT
39655: IFFALSE 39659
// exit ;
39657: GO 39679
// result := SortListByListDesc ( units , tmp ) ;
39659: LD_ADDR_VAR 0 3
39663: PUSH
39664: LD_VAR 0 1
39668: PPUSH
39669: LD_VAR 0 5
39673: PPUSH
39674: CALL_OW 77
39678: ST_TO_ADDR
// end ;
39679: LD_VAR 0 3
39683: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
39684: LD_INT 0
39686: PPUSH
39687: PPUSH
39688: PPUSH
// result := false ;
39689: LD_ADDR_VAR 0 3
39693: PUSH
39694: LD_INT 0
39696: ST_TO_ADDR
// if not building then
39697: LD_VAR 0 2
39701: NOT
39702: IFFALSE 39706
// exit ;
39704: GO 39850
// x := GetX ( building ) ;
39706: LD_ADDR_VAR 0 4
39710: PUSH
39711: LD_VAR 0 2
39715: PPUSH
39716: CALL_OW 250
39720: ST_TO_ADDR
// y := GetY ( building ) ;
39721: LD_ADDR_VAR 0 5
39725: PUSH
39726: LD_VAR 0 2
39730: PPUSH
39731: CALL_OW 251
39735: ST_TO_ADDR
// if not x or not y then
39736: LD_VAR 0 4
39740: NOT
39741: IFTRUE 39750
39743: PUSH
39744: LD_VAR 0 5
39748: NOT
39749: OR
39750: IFFALSE 39754
// exit ;
39752: GO 39850
// if GetTaskList ( unit ) then
39754: LD_VAR 0 1
39758: PPUSH
39759: CALL_OW 437
39763: IFFALSE 39850
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39765: LD_STRING e
39767: PUSH
39768: LD_VAR 0 1
39772: PPUSH
39773: CALL_OW 437
39777: PUSH
39778: LD_INT 1
39780: ARRAY
39781: PUSH
39782: LD_INT 1
39784: ARRAY
39785: EQUAL
39786: IFFALSE 39813
39788: PUSH
39789: LD_VAR 0 4
39793: PUSH
39794: LD_VAR 0 1
39798: PPUSH
39799: CALL_OW 437
39803: PUSH
39804: LD_INT 1
39806: ARRAY
39807: PUSH
39808: LD_INT 2
39810: ARRAY
39811: EQUAL
39812: AND
39813: IFFALSE 39840
39815: PUSH
39816: LD_VAR 0 5
39820: PUSH
39821: LD_VAR 0 1
39825: PPUSH
39826: CALL_OW 437
39830: PUSH
39831: LD_INT 1
39833: ARRAY
39834: PUSH
39835: LD_INT 3
39837: ARRAY
39838: EQUAL
39839: AND
39840: IFFALSE 39850
// result := true end ;
39842: LD_ADDR_VAR 0 3
39846: PUSH
39847: LD_INT 1
39849: ST_TO_ADDR
// end ;
39850: LD_VAR 0 3
39854: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
39855: LD_INT 0
39857: PPUSH
// result := false ;
39858: LD_ADDR_VAR 0 4
39862: PUSH
39863: LD_INT 0
39865: ST_TO_ADDR
// if GetTaskList ( unit ) then
39866: LD_VAR 0 1
39870: PPUSH
39871: CALL_OW 437
39875: IFFALSE 39962
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39877: LD_STRING M
39879: PUSH
39880: LD_VAR 0 1
39884: PPUSH
39885: CALL_OW 437
39889: PUSH
39890: LD_INT 1
39892: ARRAY
39893: PUSH
39894: LD_INT 1
39896: ARRAY
39897: EQUAL
39898: IFFALSE 39925
39900: PUSH
39901: LD_VAR 0 2
39905: PUSH
39906: LD_VAR 0 1
39910: PPUSH
39911: CALL_OW 437
39915: PUSH
39916: LD_INT 1
39918: ARRAY
39919: PUSH
39920: LD_INT 2
39922: ARRAY
39923: EQUAL
39924: AND
39925: IFFALSE 39952
39927: PUSH
39928: LD_VAR 0 3
39932: PUSH
39933: LD_VAR 0 1
39937: PPUSH
39938: CALL_OW 437
39942: PUSH
39943: LD_INT 1
39945: ARRAY
39946: PUSH
39947: LD_INT 3
39949: ARRAY
39950: EQUAL
39951: AND
39952: IFFALSE 39962
// result := true ;
39954: LD_ADDR_VAR 0 4
39958: PUSH
39959: LD_INT 1
39961: ST_TO_ADDR
// end ; end ;
39962: LD_VAR 0 4
39966: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
39967: LD_INT 0
39969: PPUSH
39970: PPUSH
39971: PPUSH
39972: PPUSH
// if not unit or not area then
39973: LD_VAR 0 1
39977: NOT
39978: IFTRUE 39987
39980: PUSH
39981: LD_VAR 0 2
39985: NOT
39986: OR
39987: IFFALSE 39991
// exit ;
39989: GO 40167
// tmp := AreaToList ( area , i ) ;
39991: LD_ADDR_VAR 0 6
39995: PUSH
39996: LD_VAR 0 2
40000: PPUSH
40001: LD_VAR 0 5
40005: PPUSH
40006: CALL_OW 517
40010: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
40011: LD_ADDR_VAR 0 5
40015: PUSH
40016: DOUBLE
40017: LD_INT 1
40019: DEC
40020: ST_TO_ADDR
40021: LD_VAR 0 6
40025: PUSH
40026: LD_INT 1
40028: ARRAY
40029: PUSH
40030: FOR_TO
40031: IFFALSE 40165
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
40033: LD_ADDR_VAR 0 7
40037: PUSH
40038: LD_VAR 0 6
40042: PUSH
40043: LD_INT 1
40045: ARRAY
40046: PUSH
40047: LD_VAR 0 5
40051: ARRAY
40052: PUSH
40053: LD_VAR 0 6
40057: PUSH
40058: LD_INT 2
40060: ARRAY
40061: PUSH
40062: LD_VAR 0 5
40066: ARRAY
40067: PUSH
40068: EMPTY
40069: LIST
40070: LIST
40071: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
40072: LD_INT 92
40074: PUSH
40075: LD_VAR 0 7
40079: PUSH
40080: LD_INT 1
40082: ARRAY
40083: PUSH
40084: LD_VAR 0 7
40088: PUSH
40089: LD_INT 2
40091: ARRAY
40092: PUSH
40093: LD_INT 2
40095: PUSH
40096: EMPTY
40097: LIST
40098: LIST
40099: LIST
40100: LIST
40101: PPUSH
40102: CALL_OW 69
40106: PUSH
40107: LD_INT 0
40109: EQUAL
40110: IFFALSE 40163
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
40112: LD_VAR 0 1
40116: PPUSH
40117: LD_VAR 0 7
40121: PUSH
40122: LD_INT 1
40124: ARRAY
40125: PPUSH
40126: LD_VAR 0 7
40130: PUSH
40131: LD_INT 2
40133: ARRAY
40134: PPUSH
40135: LD_VAR 0 3
40139: PPUSH
40140: CALL_OW 48
// result := IsPlaced ( unit ) ;
40144: LD_ADDR_VAR 0 4
40148: PUSH
40149: LD_VAR 0 1
40153: PPUSH
40154: CALL_OW 305
40158: ST_TO_ADDR
// exit ;
40159: POP
40160: POP
40161: GO 40167
// end ; end ;
40163: GO 40030
40165: POP
40166: POP
// end ;
40167: LD_VAR 0 4
40171: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
40172: LD_INT 0
40174: PPUSH
40175: PPUSH
40176: PPUSH
// if not side or side > 8 then
40177: LD_VAR 0 1
40181: NOT
40182: IFTRUE 40194
40184: PUSH
40185: LD_VAR 0 1
40189: PUSH
40190: LD_INT 8
40192: GREATER
40193: OR
40194: IFFALSE 40198
// exit ;
40196: GO 40385
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
40198: LD_ADDR_VAR 0 4
40202: PUSH
40203: LD_INT 22
40205: PUSH
40206: LD_VAR 0 1
40210: PUSH
40211: EMPTY
40212: LIST
40213: LIST
40214: PUSH
40215: LD_INT 21
40217: PUSH
40218: LD_INT 3
40220: PUSH
40221: EMPTY
40222: LIST
40223: LIST
40224: PUSH
40225: EMPTY
40226: LIST
40227: LIST
40228: PPUSH
40229: CALL_OW 69
40233: ST_TO_ADDR
// if not tmp then
40234: LD_VAR 0 4
40238: NOT
40239: IFFALSE 40243
// exit ;
40241: GO 40385
// enable_addtolog := true ;
40243: LD_ADDR_OWVAR 81
40247: PUSH
40248: LD_INT 1
40250: ST_TO_ADDR
// AddToLog ( [ ) ;
40251: LD_STRING [
40253: PPUSH
40254: CALL_OW 561
// for i in tmp do
40258: LD_ADDR_VAR 0 3
40262: PUSH
40263: LD_VAR 0 4
40267: PUSH
40268: FOR_IN
40269: IFFALSE 40376
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
40271: LD_STRING [
40273: PUSH
40274: LD_VAR 0 3
40278: PPUSH
40279: CALL_OW 266
40283: STR
40284: PUSH
40285: LD_STRING , 
40287: STR
40288: PUSH
40289: LD_VAR 0 3
40293: PPUSH
40294: CALL_OW 250
40298: STR
40299: PUSH
40300: LD_STRING , 
40302: STR
40303: PUSH
40304: LD_VAR 0 3
40308: PPUSH
40309: CALL_OW 251
40313: STR
40314: PUSH
40315: LD_STRING , 
40317: STR
40318: PUSH
40319: LD_VAR 0 3
40323: PPUSH
40324: CALL_OW 254
40328: STR
40329: PUSH
40330: LD_STRING , 
40332: STR
40333: PUSH
40334: LD_VAR 0 3
40338: PPUSH
40339: LD_INT 1
40341: PPUSH
40342: CALL_OW 268
40346: STR
40347: PUSH
40348: LD_STRING , 
40350: STR
40351: PUSH
40352: LD_VAR 0 3
40356: PPUSH
40357: LD_INT 2
40359: PPUSH
40360: CALL_OW 268
40364: STR
40365: PUSH
40366: LD_STRING ],
40368: STR
40369: PPUSH
40370: CALL_OW 561
// end ;
40374: GO 40268
40376: POP
40377: POP
// AddToLog ( ]; ) ;
40378: LD_STRING ];
40380: PPUSH
40381: CALL_OW 561
// end ;
40385: LD_VAR 0 2
40389: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
40390: LD_INT 0
40392: PPUSH
40393: PPUSH
40394: PPUSH
40395: PPUSH
40396: PPUSH
// if not area or not rate or not max then
40397: LD_VAR 0 1
40401: NOT
40402: IFTRUE 40411
40404: PUSH
40405: LD_VAR 0 2
40409: NOT
40410: OR
40411: IFTRUE 40420
40413: PUSH
40414: LD_VAR 0 4
40418: NOT
40419: OR
40420: IFFALSE 40424
// exit ;
40422: GO 40613
// while 1 do
40424: LD_INT 1
40426: IFFALSE 40613
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
40428: LD_ADDR_VAR 0 9
40432: PUSH
40433: LD_VAR 0 1
40437: PPUSH
40438: LD_INT 1
40440: PPUSH
40441: CALL_OW 287
40445: PUSH
40446: LD_INT 10
40448: MUL
40449: ST_TO_ADDR
// r := rate / 10 ;
40450: LD_ADDR_VAR 0 7
40454: PUSH
40455: LD_VAR 0 2
40459: PUSH
40460: LD_INT 10
40462: DIVREAL
40463: ST_TO_ADDR
// time := 1 1$00 ;
40464: LD_ADDR_VAR 0 8
40468: PUSH
40469: LD_INT 2100
40471: ST_TO_ADDR
// if amount < min then
40472: LD_VAR 0 9
40476: PUSH
40477: LD_VAR 0 3
40481: LESS
40482: IFFALSE 40500
// r := r * 2 else
40484: LD_ADDR_VAR 0 7
40488: PUSH
40489: LD_VAR 0 7
40493: PUSH
40494: LD_INT 2
40496: MUL
40497: ST_TO_ADDR
40498: GO 40526
// if amount > max then
40500: LD_VAR 0 9
40504: PUSH
40505: LD_VAR 0 4
40509: GREATER
40510: IFFALSE 40526
// r := r / 2 ;
40512: LD_ADDR_VAR 0 7
40516: PUSH
40517: LD_VAR 0 7
40521: PUSH
40522: LD_INT 2
40524: DIVREAL
40525: ST_TO_ADDR
// time := time / r ;
40526: LD_ADDR_VAR 0 8
40530: PUSH
40531: LD_VAR 0 8
40535: PUSH
40536: LD_VAR 0 7
40540: DIVREAL
40541: ST_TO_ADDR
// if time < 0 then
40542: LD_VAR 0 8
40546: PUSH
40547: LD_INT 0
40549: LESS
40550: IFFALSE 40567
// time := time * - 1 ;
40552: LD_ADDR_VAR 0 8
40556: PUSH
40557: LD_VAR 0 8
40561: PUSH
40562: LD_INT 1
40564: NEG
40565: MUL
40566: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
40567: LD_VAR 0 8
40571: PUSH
40572: LD_INT 35
40574: PPUSH
40575: LD_INT 875
40577: PPUSH
40578: CALL_OW 12
40582: PLUS
40583: PPUSH
40584: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
40588: LD_INT 1
40590: PPUSH
40591: LD_INT 5
40593: PPUSH
40594: CALL_OW 12
40598: PPUSH
40599: LD_VAR 0 1
40603: PPUSH
40604: LD_INT 1
40606: PPUSH
40607: CALL_OW 55
// end ;
40611: GO 40424
// end ;
40613: LD_VAR 0 5
40617: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
40618: LD_INT 0
40620: PPUSH
40621: PPUSH
40622: PPUSH
40623: PPUSH
40624: PPUSH
40625: PPUSH
40626: PPUSH
40627: PPUSH
// if not turrets or not factories then
40628: LD_VAR 0 1
40632: NOT
40633: IFTRUE 40642
40635: PUSH
40636: LD_VAR 0 2
40640: NOT
40641: OR
40642: IFFALSE 40646
// exit ;
40644: GO 40953
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
40646: LD_ADDR_VAR 0 10
40650: PUSH
40651: LD_INT 5
40653: PUSH
40654: LD_INT 6
40656: PUSH
40657: EMPTY
40658: LIST
40659: LIST
40660: PUSH
40661: LD_INT 2
40663: PUSH
40664: LD_INT 4
40666: PUSH
40667: EMPTY
40668: LIST
40669: LIST
40670: PUSH
40671: LD_INT 3
40673: PUSH
40674: LD_INT 5
40676: PUSH
40677: EMPTY
40678: LIST
40679: LIST
40680: PUSH
40681: EMPTY
40682: LIST
40683: LIST
40684: LIST
40685: PUSH
40686: LD_INT 24
40688: PUSH
40689: LD_INT 25
40691: PUSH
40692: EMPTY
40693: LIST
40694: LIST
40695: PUSH
40696: LD_INT 23
40698: PUSH
40699: LD_INT 27
40701: PUSH
40702: EMPTY
40703: LIST
40704: LIST
40705: PUSH
40706: EMPTY
40707: LIST
40708: LIST
40709: PUSH
40710: LD_INT 42
40712: PUSH
40713: LD_INT 43
40715: PUSH
40716: EMPTY
40717: LIST
40718: LIST
40719: PUSH
40720: LD_INT 44
40722: PUSH
40723: LD_INT 46
40725: PUSH
40726: EMPTY
40727: LIST
40728: LIST
40729: PUSH
40730: LD_INT 45
40732: PUSH
40733: LD_INT 47
40735: PUSH
40736: EMPTY
40737: LIST
40738: LIST
40739: PUSH
40740: EMPTY
40741: LIST
40742: LIST
40743: LIST
40744: PUSH
40745: EMPTY
40746: LIST
40747: LIST
40748: LIST
40749: ST_TO_ADDR
// result := [ ] ;
40750: LD_ADDR_VAR 0 3
40754: PUSH
40755: EMPTY
40756: ST_TO_ADDR
// for i in turrets do
40757: LD_ADDR_VAR 0 4
40761: PUSH
40762: LD_VAR 0 1
40766: PUSH
40767: FOR_IN
40768: IFFALSE 40951
// begin nat := GetNation ( i ) ;
40770: LD_ADDR_VAR 0 7
40774: PUSH
40775: LD_VAR 0 4
40779: PPUSH
40780: CALL_OW 248
40784: ST_TO_ADDR
// weapon := 0 ;
40785: LD_ADDR_VAR 0 8
40789: PUSH
40790: LD_INT 0
40792: ST_TO_ADDR
// if not nat then
40793: LD_VAR 0 7
40797: NOT
40798: IFFALSE 40802
// continue ;
40800: GO 40767
// for j in list [ nat ] do
40802: LD_ADDR_VAR 0 5
40806: PUSH
40807: LD_VAR 0 10
40811: PUSH
40812: LD_VAR 0 7
40816: ARRAY
40817: PUSH
40818: FOR_IN
40819: IFFALSE 40860
// if GetBWeapon ( i ) = j [ 1 ] then
40821: LD_VAR 0 4
40825: PPUSH
40826: CALL_OW 269
40830: PUSH
40831: LD_VAR 0 5
40835: PUSH
40836: LD_INT 1
40838: ARRAY
40839: EQUAL
40840: IFFALSE 40858
// begin weapon := j [ 2 ] ;
40842: LD_ADDR_VAR 0 8
40846: PUSH
40847: LD_VAR 0 5
40851: PUSH
40852: LD_INT 2
40854: ARRAY
40855: ST_TO_ADDR
// break ;
40856: GO 40860
// end ;
40858: GO 40818
40860: POP
40861: POP
// if not weapon then
40862: LD_VAR 0 8
40866: NOT
40867: IFFALSE 40871
// continue ;
40869: GO 40767
// for k in factories do
40871: LD_ADDR_VAR 0 6
40875: PUSH
40876: LD_VAR 0 2
40880: PUSH
40881: FOR_IN
40882: IFFALSE 40947
// begin weapons := AvailableWeaponList ( k ) ;
40884: LD_ADDR_VAR 0 9
40888: PUSH
40889: LD_VAR 0 6
40893: PPUSH
40894: CALL_OW 478
40898: ST_TO_ADDR
// if not weapons then
40899: LD_VAR 0 9
40903: NOT
40904: IFFALSE 40908
// continue ;
40906: GO 40881
// if weapon in weapons then
40908: LD_VAR 0 8
40912: PUSH
40913: LD_VAR 0 9
40917: IN
40918: IFFALSE 40945
// begin result := [ i , weapon ] ;
40920: LD_ADDR_VAR 0 3
40924: PUSH
40925: LD_VAR 0 4
40929: PUSH
40930: LD_VAR 0 8
40934: PUSH
40935: EMPTY
40936: LIST
40937: LIST
40938: ST_TO_ADDR
// exit ;
40939: POP
40940: POP
40941: POP
40942: POP
40943: GO 40953
// end ; end ;
40945: GO 40881
40947: POP
40948: POP
// end ;
40949: GO 40767
40951: POP
40952: POP
// end ;
40953: LD_VAR 0 3
40957: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
40958: LD_INT 0
40960: PPUSH
// if not side or side > 8 then
40961: LD_VAR 0 3
40965: NOT
40966: IFTRUE 40978
40968: PUSH
40969: LD_VAR 0 3
40973: PUSH
40974: LD_INT 8
40976: GREATER
40977: OR
40978: IFFALSE 40982
// exit ;
40980: GO 41041
// if not range then
40982: LD_VAR 0 4
40986: NOT
40987: IFFALSE 40998
// range := - 12 ;
40989: LD_ADDR_VAR 0 4
40993: PUSH
40994: LD_INT 12
40996: NEG
40997: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
40998: LD_VAR 0 1
41002: PPUSH
41003: LD_VAR 0 2
41007: PPUSH
41008: LD_VAR 0 3
41012: PPUSH
41013: LD_VAR 0 4
41017: PPUSH
41018: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
41022: LD_VAR 0 1
41026: PPUSH
41027: LD_VAR 0 2
41031: PPUSH
41032: LD_VAR 0 3
41036: PPUSH
41037: CALL_OW 331
// end ;
41041: LD_VAR 0 5
41045: RET
// export function Video ( mode ) ; begin
41046: LD_INT 0
41048: PPUSH
// ingame_video = mode ;
41049: LD_ADDR_OWVAR 52
41053: PUSH
41054: LD_VAR 0 1
41058: ST_TO_ADDR
// interface_hidden = mode ;
41059: LD_ADDR_OWVAR 54
41063: PUSH
41064: LD_VAR 0 1
41068: ST_TO_ADDR
// end ;
41069: LD_VAR 0 2
41073: RET
// export function Join ( array , element ) ; begin
41074: LD_INT 0
41076: PPUSH
// result := Replace ( array , array + 1 , element ) ;
41077: LD_ADDR_VAR 0 3
41081: PUSH
41082: LD_VAR 0 1
41086: PPUSH
41087: LD_VAR 0 1
41091: PUSH
41092: LD_INT 1
41094: PLUS
41095: PPUSH
41096: LD_VAR 0 2
41100: PPUSH
41101: CALL_OW 1
41105: ST_TO_ADDR
// end ;
41106: LD_VAR 0 3
41110: RET
// export function JoinUnion ( array , element ) ; begin
41111: LD_INT 0
41113: PPUSH
// result := array union element ;
41114: LD_ADDR_VAR 0 3
41118: PUSH
41119: LD_VAR 0 1
41123: PUSH
41124: LD_VAR 0 2
41128: UNION
41129: ST_TO_ADDR
// end ;
41130: LD_VAR 0 3
41134: RET
// export function GetBehemoths ( side ) ; begin
41135: LD_INT 0
41137: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
41138: LD_ADDR_VAR 0 2
41142: PUSH
41143: LD_INT 22
41145: PUSH
41146: LD_VAR 0 1
41150: PUSH
41151: EMPTY
41152: LIST
41153: LIST
41154: PUSH
41155: LD_INT 31
41157: PUSH
41158: LD_INT 25
41160: PUSH
41161: EMPTY
41162: LIST
41163: LIST
41164: PUSH
41165: EMPTY
41166: LIST
41167: LIST
41168: PPUSH
41169: CALL_OW 69
41173: ST_TO_ADDR
// end ;
41174: LD_VAR 0 2
41178: RET
// export function Shuffle ( array ) ; var i , index ; begin
41179: LD_INT 0
41181: PPUSH
41182: PPUSH
41183: PPUSH
// result := [ ] ;
41184: LD_ADDR_VAR 0 2
41188: PUSH
41189: EMPTY
41190: ST_TO_ADDR
// if not array then
41191: LD_VAR 0 1
41195: NOT
41196: IFFALSE 41200
// exit ;
41198: GO 41299
// Randomize ;
41200: CALL_OW 10
// for i = array downto 1 do
41204: LD_ADDR_VAR 0 3
41208: PUSH
41209: DOUBLE
41210: LD_VAR 0 1
41214: INC
41215: ST_TO_ADDR
41216: LD_INT 1
41218: PUSH
41219: FOR_DOWNTO
41220: IFFALSE 41297
// begin index := rand ( 1 , array ) ;
41222: LD_ADDR_VAR 0 4
41226: PUSH
41227: LD_INT 1
41229: PPUSH
41230: LD_VAR 0 1
41234: PPUSH
41235: CALL_OW 12
41239: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
41240: LD_ADDR_VAR 0 2
41244: PUSH
41245: LD_VAR 0 2
41249: PPUSH
41250: LD_VAR 0 2
41254: PUSH
41255: LD_INT 1
41257: PLUS
41258: PPUSH
41259: LD_VAR 0 1
41263: PUSH
41264: LD_VAR 0 4
41268: ARRAY
41269: PPUSH
41270: CALL_OW 2
41274: ST_TO_ADDR
// array := Delete ( array , index ) ;
41275: LD_ADDR_VAR 0 1
41279: PUSH
41280: LD_VAR 0 1
41284: PPUSH
41285: LD_VAR 0 4
41289: PPUSH
41290: CALL_OW 3
41294: ST_TO_ADDR
// end ;
41295: GO 41219
41297: POP
41298: POP
// end ;
41299: LD_VAR 0 2
41303: RET
// export function GetBaseMaterials ( base ) ; begin
41304: LD_INT 0
41306: PPUSH
// result := [ 0 , 0 , 0 ] ;
41307: LD_ADDR_VAR 0 2
41311: PUSH
41312: LD_INT 0
41314: PUSH
41315: LD_INT 0
41317: PUSH
41318: LD_INT 0
41320: PUSH
41321: EMPTY
41322: LIST
41323: LIST
41324: LIST
41325: ST_TO_ADDR
// if not base then
41326: LD_VAR 0 1
41330: NOT
41331: IFFALSE 41335
// exit ;
41333: GO 41384
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
41335: LD_ADDR_VAR 0 2
41339: PUSH
41340: LD_VAR 0 1
41344: PPUSH
41345: LD_INT 1
41347: PPUSH
41348: CALL_OW 275
41352: PUSH
41353: LD_VAR 0 1
41357: PPUSH
41358: LD_INT 2
41360: PPUSH
41361: CALL_OW 275
41365: PUSH
41366: LD_VAR 0 1
41370: PPUSH
41371: LD_INT 3
41373: PPUSH
41374: CALL_OW 275
41378: PUSH
41379: EMPTY
41380: LIST
41381: LIST
41382: LIST
41383: ST_TO_ADDR
// end ;
41384: LD_VAR 0 2
41388: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
41389: LD_INT 0
41391: PPUSH
41392: PPUSH
// result := array ;
41393: LD_ADDR_VAR 0 3
41397: PUSH
41398: LD_VAR 0 1
41402: ST_TO_ADDR
// if size >= result then
41403: LD_VAR 0 2
41407: PUSH
41408: LD_VAR 0 3
41412: GREATEREQUAL
41413: IFFALSE 41417
// exit ;
41415: GO 41467
// if size then
41417: LD_VAR 0 2
41421: IFFALSE 41467
// for i := array downto size do
41423: LD_ADDR_VAR 0 4
41427: PUSH
41428: DOUBLE
41429: LD_VAR 0 1
41433: INC
41434: ST_TO_ADDR
41435: LD_VAR 0 2
41439: PUSH
41440: FOR_DOWNTO
41441: IFFALSE 41465
// result := Delete ( result , result ) ;
41443: LD_ADDR_VAR 0 3
41447: PUSH
41448: LD_VAR 0 3
41452: PPUSH
41453: LD_VAR 0 3
41457: PPUSH
41458: CALL_OW 3
41462: ST_TO_ADDR
41463: GO 41440
41465: POP
41466: POP
// end ;
41467: LD_VAR 0 3
41471: RET
// export function ComExit ( unit ) ; var tmp ; begin
41472: LD_INT 0
41474: PPUSH
41475: PPUSH
// if not IsInUnit ( unit ) then
41476: LD_VAR 0 1
41480: PPUSH
41481: CALL_OW 310
41485: NOT
41486: IFFALSE 41490
// exit ;
41488: GO 41550
// tmp := IsInUnit ( unit ) ;
41490: LD_ADDR_VAR 0 3
41494: PUSH
41495: LD_VAR 0 1
41499: PPUSH
41500: CALL_OW 310
41504: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
41505: LD_VAR 0 3
41509: PPUSH
41510: CALL_OW 247
41514: PUSH
41515: LD_INT 2
41517: EQUAL
41518: IFFALSE 41531
// ComExitVehicle ( unit ) else
41520: LD_VAR 0 1
41524: PPUSH
41525: CALL_OW 121
41529: GO 41540
// ComExitBuilding ( unit ) ;
41531: LD_VAR 0 1
41535: PPUSH
41536: CALL_OW 122
// result := tmp ;
41540: LD_ADDR_VAR 0 2
41544: PUSH
41545: LD_VAR 0 3
41549: ST_TO_ADDR
// end ;
41550: LD_VAR 0 2
41554: RET
// export function ComExitAll ( units ) ; var i ; begin
41555: LD_INT 0
41557: PPUSH
41558: PPUSH
// if not units then
41559: LD_VAR 0 1
41563: NOT
41564: IFFALSE 41568
// exit ;
41566: GO 41594
// for i in units do
41568: LD_ADDR_VAR 0 3
41572: PUSH
41573: LD_VAR 0 1
41577: PUSH
41578: FOR_IN
41579: IFFALSE 41592
// ComExit ( i ) ;
41581: LD_VAR 0 3
41585: PPUSH
41586: CALL 41472 0 1
41590: GO 41578
41592: POP
41593: POP
// end ;
41594: LD_VAR 0 2
41598: RET
// export function ResetHc ; begin
41599: LD_INT 0
41601: PPUSH
// InitHc ;
41602: CALL_OW 19
// hc_importance := 0 ;
41606: LD_ADDR_OWVAR 32
41610: PUSH
41611: LD_INT 0
41613: ST_TO_ADDR
// end ;
41614: LD_VAR 0 1
41618: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
41619: LD_INT 0
41621: PPUSH
41622: PPUSH
41623: PPUSH
// _x := ( x1 + x2 ) div 2 ;
41624: LD_ADDR_VAR 0 6
41628: PUSH
41629: LD_VAR 0 1
41633: PUSH
41634: LD_VAR 0 3
41638: PLUS
41639: PUSH
41640: LD_INT 2
41642: DIV
41643: ST_TO_ADDR
// if _x < 0 then
41644: LD_VAR 0 6
41648: PUSH
41649: LD_INT 0
41651: LESS
41652: IFFALSE 41669
// _x := _x * - 1 ;
41654: LD_ADDR_VAR 0 6
41658: PUSH
41659: LD_VAR 0 6
41663: PUSH
41664: LD_INT 1
41666: NEG
41667: MUL
41668: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
41669: LD_ADDR_VAR 0 7
41673: PUSH
41674: LD_VAR 0 2
41678: PUSH
41679: LD_VAR 0 4
41683: PLUS
41684: PUSH
41685: LD_INT 2
41687: DIV
41688: ST_TO_ADDR
// if _y < 0 then
41689: LD_VAR 0 7
41693: PUSH
41694: LD_INT 0
41696: LESS
41697: IFFALSE 41714
// _y := _y * - 1 ;
41699: LD_ADDR_VAR 0 7
41703: PUSH
41704: LD_VAR 0 7
41708: PUSH
41709: LD_INT 1
41711: NEG
41712: MUL
41713: ST_TO_ADDR
// result := [ _x , _y ] ;
41714: LD_ADDR_VAR 0 5
41718: PUSH
41719: LD_VAR 0 6
41723: PUSH
41724: LD_VAR 0 7
41728: PUSH
41729: EMPTY
41730: LIST
41731: LIST
41732: ST_TO_ADDR
// end ;
41733: LD_VAR 0 5
41737: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
41738: LD_INT 0
41740: PPUSH
41741: PPUSH
41742: PPUSH
41743: PPUSH
// task := GetTaskList ( unit ) ;
41744: LD_ADDR_VAR 0 7
41748: PUSH
41749: LD_VAR 0 1
41753: PPUSH
41754: CALL_OW 437
41758: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
41759: LD_VAR 0 7
41763: NOT
41764: IFFALSE 41783
41766: PUSH
41767: LD_VAR 0 1
41771: PPUSH
41772: LD_VAR 0 2
41776: PPUSH
41777: CALL_OW 308
41781: NOT
41782: AND
41783: IFFALSE 41787
// exit ;
41785: GO 41905
// if IsInArea ( unit , area ) then
41787: LD_VAR 0 1
41791: PPUSH
41792: LD_VAR 0 2
41796: PPUSH
41797: CALL_OW 308
41801: IFFALSE 41819
// begin ComMoveToArea ( unit , goAway ) ;
41803: LD_VAR 0 1
41807: PPUSH
41808: LD_VAR 0 3
41812: PPUSH
41813: CALL_OW 113
// exit ;
41817: GO 41905
// end ; if task [ 1 ] [ 1 ] <> M then
41819: LD_VAR 0 7
41823: PUSH
41824: LD_INT 1
41826: ARRAY
41827: PUSH
41828: LD_INT 1
41830: ARRAY
41831: PUSH
41832: LD_STRING M
41834: NONEQUAL
41835: IFFALSE 41839
// exit ;
41837: GO 41905
// x := task [ 1 ] [ 2 ] ;
41839: LD_ADDR_VAR 0 5
41843: PUSH
41844: LD_VAR 0 7
41848: PUSH
41849: LD_INT 1
41851: ARRAY
41852: PUSH
41853: LD_INT 2
41855: ARRAY
41856: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
41857: LD_ADDR_VAR 0 6
41861: PUSH
41862: LD_VAR 0 7
41866: PUSH
41867: LD_INT 1
41869: ARRAY
41870: PUSH
41871: LD_INT 3
41873: ARRAY
41874: ST_TO_ADDR
// if InArea ( x , y , area ) then
41875: LD_VAR 0 5
41879: PPUSH
41880: LD_VAR 0 6
41884: PPUSH
41885: LD_VAR 0 2
41889: PPUSH
41890: CALL_OW 309
41894: IFFALSE 41905
// ComStop ( unit ) ;
41896: LD_VAR 0 1
41900: PPUSH
41901: CALL_OW 141
// end ;
41905: LD_VAR 0 4
41909: RET
// export function Abs ( value ) ; begin
41910: LD_INT 0
41912: PPUSH
// result := value ;
41913: LD_ADDR_VAR 0 2
41917: PUSH
41918: LD_VAR 0 1
41922: ST_TO_ADDR
// if value < 0 then
41923: LD_VAR 0 1
41927: PUSH
41928: LD_INT 0
41930: LESS
41931: IFFALSE 41948
// result := value * - 1 ;
41933: LD_ADDR_VAR 0 2
41937: PUSH
41938: LD_VAR 0 1
41942: PUSH
41943: LD_INT 1
41945: NEG
41946: MUL
41947: ST_TO_ADDR
// end ;
41948: LD_VAR 0 2
41952: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
41953: LD_INT 0
41955: PPUSH
41956: PPUSH
41957: PPUSH
41958: PPUSH
41959: PPUSH
41960: PPUSH
41961: PPUSH
41962: PPUSH
// if not unit or not building then
41963: LD_VAR 0 1
41967: NOT
41968: IFTRUE 41977
41970: PUSH
41971: LD_VAR 0 2
41975: NOT
41976: OR
41977: IFFALSE 41981
// exit ;
41979: GO 42209
// x := GetX ( building ) ;
41981: LD_ADDR_VAR 0 4
41985: PUSH
41986: LD_VAR 0 2
41990: PPUSH
41991: CALL_OW 250
41995: ST_TO_ADDR
// y := GetY ( building ) ;
41996: LD_ADDR_VAR 0 6
42000: PUSH
42001: LD_VAR 0 2
42005: PPUSH
42006: CALL_OW 251
42010: ST_TO_ADDR
// d := GetDir ( building ) ;
42011: LD_ADDR_VAR 0 8
42015: PUSH
42016: LD_VAR 0 2
42020: PPUSH
42021: CALL_OW 254
42025: ST_TO_ADDR
// r := 4 ;
42026: LD_ADDR_VAR 0 9
42030: PUSH
42031: LD_INT 4
42033: ST_TO_ADDR
// for i := 1 to 5 do
42034: LD_ADDR_VAR 0 10
42038: PUSH
42039: DOUBLE
42040: LD_INT 1
42042: DEC
42043: ST_TO_ADDR
42044: LD_INT 5
42046: PUSH
42047: FOR_TO
42048: IFFALSE 42207
// begin _x := ShiftX ( x , d , r + i ) ;
42050: LD_ADDR_VAR 0 5
42054: PUSH
42055: LD_VAR 0 4
42059: PPUSH
42060: LD_VAR 0 8
42064: PPUSH
42065: LD_VAR 0 9
42069: PUSH
42070: LD_VAR 0 10
42074: PLUS
42075: PPUSH
42076: CALL_OW 272
42080: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
42081: LD_ADDR_VAR 0 7
42085: PUSH
42086: LD_VAR 0 6
42090: PPUSH
42091: LD_VAR 0 8
42095: PPUSH
42096: LD_VAR 0 9
42100: PUSH
42101: LD_VAR 0 10
42105: PLUS
42106: PPUSH
42107: CALL_OW 273
42111: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
42112: LD_VAR 0 5
42116: PPUSH
42117: LD_VAR 0 7
42121: PPUSH
42122: CALL_OW 488
42126: IFFALSE 42161
42128: PUSH
42129: LD_VAR 0 5
42133: PPUSH
42134: LD_VAR 0 7
42138: PPUSH
42139: CALL_OW 428
42143: PPUSH
42144: CALL_OW 247
42148: PUSH
42149: LD_INT 3
42151: PUSH
42152: LD_INT 2
42154: PUSH
42155: EMPTY
42156: LIST
42157: LIST
42158: IN
42159: NOT
42160: AND
42161: IFFALSE 42205
// begin ComMoveXY ( unit , _x , _y ) ;
42163: LD_VAR 0 1
42167: PPUSH
42168: LD_VAR 0 5
42172: PPUSH
42173: LD_VAR 0 7
42177: PPUSH
42178: CALL_OW 111
// result := [ _x , _y ] ;
42182: LD_ADDR_VAR 0 3
42186: PUSH
42187: LD_VAR 0 5
42191: PUSH
42192: LD_VAR 0 7
42196: PUSH
42197: EMPTY
42198: LIST
42199: LIST
42200: ST_TO_ADDR
// exit ;
42201: POP
42202: POP
42203: GO 42209
// end ; end ;
42205: GO 42047
42207: POP
42208: POP
// end ;
42209: LD_VAR 0 3
42213: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
42214: LD_INT 0
42216: PPUSH
42217: PPUSH
42218: PPUSH
// result := 0 ;
42219: LD_ADDR_VAR 0 3
42223: PUSH
42224: LD_INT 0
42226: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
42227: LD_VAR 0 1
42231: PUSH
42232: LD_INT 0
42234: LESS
42235: IFTRUE 42247
42237: PUSH
42238: LD_VAR 0 1
42242: PUSH
42243: LD_INT 8
42245: GREATER
42246: OR
42247: IFTRUE 42259
42249: PUSH
42250: LD_VAR 0 2
42254: PUSH
42255: LD_INT 0
42257: LESS
42258: OR
42259: IFTRUE 42271
42261: PUSH
42262: LD_VAR 0 2
42266: PUSH
42267: LD_INT 8
42269: GREATER
42270: OR
42271: IFFALSE 42275
// exit ;
42273: GO 42350
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
42275: LD_ADDR_VAR 0 4
42279: PUSH
42280: LD_INT 22
42282: PUSH
42283: LD_VAR 0 2
42287: PUSH
42288: EMPTY
42289: LIST
42290: LIST
42291: PPUSH
42292: CALL_OW 69
42296: PUSH
42297: FOR_IN
42298: IFFALSE 42348
// begin un := UnitShoot ( i ) ;
42300: LD_ADDR_VAR 0 5
42304: PUSH
42305: LD_VAR 0 4
42309: PPUSH
42310: CALL_OW 504
42314: ST_TO_ADDR
// if GetSide ( un ) = side1 then
42315: LD_VAR 0 5
42319: PPUSH
42320: CALL_OW 255
42324: PUSH
42325: LD_VAR 0 1
42329: EQUAL
42330: IFFALSE 42346
// begin result := un ;
42332: LD_ADDR_VAR 0 3
42336: PUSH
42337: LD_VAR 0 5
42341: ST_TO_ADDR
// exit ;
42342: POP
42343: POP
42344: GO 42350
// end ; end ;
42346: GO 42297
42348: POP
42349: POP
// end ;
42350: LD_VAR 0 3
42354: RET
// export function GetCargoBay ( units ) ; begin
42355: LD_INT 0
42357: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
42358: LD_ADDR_VAR 0 2
42362: PUSH
42363: LD_VAR 0 1
42367: PPUSH
42368: LD_INT 2
42370: PUSH
42371: LD_INT 34
42373: PUSH
42374: LD_INT 12
42376: PUSH
42377: EMPTY
42378: LIST
42379: LIST
42380: PUSH
42381: LD_INT 34
42383: PUSH
42384: LD_INT 51
42386: PUSH
42387: EMPTY
42388: LIST
42389: LIST
42390: PUSH
42391: LD_INT 34
42393: PUSH
42394: LD_INT 32
42396: PUSH
42397: EMPTY
42398: LIST
42399: LIST
42400: PUSH
42401: LD_INT 34
42403: PUSH
42404: LD_INT 89
42406: PUSH
42407: EMPTY
42408: LIST
42409: LIST
42410: PUSH
42411: EMPTY
42412: LIST
42413: LIST
42414: LIST
42415: LIST
42416: LIST
42417: PPUSH
42418: CALL_OW 72
42422: ST_TO_ADDR
// end ;
42423: LD_VAR 0 2
42427: RET
// export function Negate ( value ) ; begin
42428: LD_INT 0
42430: PPUSH
// result := not value ;
42431: LD_ADDR_VAR 0 2
42435: PUSH
42436: LD_VAR 0 1
42440: NOT
42441: ST_TO_ADDR
// end ;
42442: LD_VAR 0 2
42446: RET
// export function Inc ( value ) ; begin
42447: LD_INT 0
42449: PPUSH
// result := value + 1 ;
42450: LD_ADDR_VAR 0 2
42454: PUSH
42455: LD_VAR 0 1
42459: PUSH
42460: LD_INT 1
42462: PLUS
42463: ST_TO_ADDR
// end ;
42464: LD_VAR 0 2
42468: RET
// export function Dec ( value ) ; begin
42469: LD_INT 0
42471: PPUSH
// result := value - 1 ;
42472: LD_ADDR_VAR 0 2
42476: PUSH
42477: LD_VAR 0 1
42481: PUSH
42482: LD_INT 1
42484: MINUS
42485: ST_TO_ADDR
// end ;
42486: LD_VAR 0 2
42490: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
42491: LD_INT 0
42493: PPUSH
42494: PPUSH
42495: PPUSH
42496: PPUSH
42497: PPUSH
42498: PPUSH
42499: PPUSH
42500: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
42501: LD_VAR 0 1
42505: PPUSH
42506: LD_VAR 0 2
42510: PPUSH
42511: CALL_OW 488
42515: NOT
42516: IFTRUE 42535
42518: PUSH
42519: LD_VAR 0 3
42523: PPUSH
42524: LD_VAR 0 4
42528: PPUSH
42529: CALL_OW 488
42533: NOT
42534: OR
42535: IFFALSE 42548
// begin result := - 1 ;
42537: LD_ADDR_VAR 0 5
42541: PUSH
42542: LD_INT 1
42544: NEG
42545: ST_TO_ADDR
// exit ;
42546: GO 42783
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
42548: LD_ADDR_VAR 0 12
42552: PUSH
42553: LD_VAR 0 1
42557: PPUSH
42558: LD_VAR 0 2
42562: PPUSH
42563: LD_VAR 0 3
42567: PPUSH
42568: LD_VAR 0 4
42572: PPUSH
42573: CALL 41619 0 4
42577: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
42578: LD_ADDR_VAR 0 11
42582: PUSH
42583: LD_VAR 0 1
42587: PPUSH
42588: LD_VAR 0 2
42592: PPUSH
42593: LD_VAR 0 12
42597: PUSH
42598: LD_INT 1
42600: ARRAY
42601: PPUSH
42602: LD_VAR 0 12
42606: PUSH
42607: LD_INT 2
42609: ARRAY
42610: PPUSH
42611: CALL_OW 298
42615: ST_TO_ADDR
// distance := 9999 ;
42616: LD_ADDR_VAR 0 10
42620: PUSH
42621: LD_INT 9999
42623: ST_TO_ADDR
// for i := 0 to 5 do
42624: LD_ADDR_VAR 0 6
42628: PUSH
42629: DOUBLE
42630: LD_INT 0
42632: DEC
42633: ST_TO_ADDR
42634: LD_INT 5
42636: PUSH
42637: FOR_TO
42638: IFFALSE 42781
// begin _x := ShiftX ( x1 , i , centerDist ) ;
42640: LD_ADDR_VAR 0 7
42644: PUSH
42645: LD_VAR 0 1
42649: PPUSH
42650: LD_VAR 0 6
42654: PPUSH
42655: LD_VAR 0 11
42659: PPUSH
42660: CALL_OW 272
42664: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
42665: LD_ADDR_VAR 0 8
42669: PUSH
42670: LD_VAR 0 2
42674: PPUSH
42675: LD_VAR 0 6
42679: PPUSH
42680: LD_VAR 0 11
42684: PPUSH
42685: CALL_OW 273
42689: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42690: LD_VAR 0 7
42694: PPUSH
42695: LD_VAR 0 8
42699: PPUSH
42700: CALL_OW 488
42704: NOT
42705: IFFALSE 42709
// continue ;
42707: GO 42637
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
42709: LD_ADDR_VAR 0 9
42713: PUSH
42714: LD_VAR 0 12
42718: PUSH
42719: LD_INT 1
42721: ARRAY
42722: PPUSH
42723: LD_VAR 0 12
42727: PUSH
42728: LD_INT 2
42730: ARRAY
42731: PPUSH
42732: LD_VAR 0 7
42736: PPUSH
42737: LD_VAR 0 8
42741: PPUSH
42742: CALL_OW 298
42746: ST_TO_ADDR
// if tmp < distance then
42747: LD_VAR 0 9
42751: PUSH
42752: LD_VAR 0 10
42756: LESS
42757: IFFALSE 42779
// begin result := i ;
42759: LD_ADDR_VAR 0 5
42763: PUSH
42764: LD_VAR 0 6
42768: ST_TO_ADDR
// distance := tmp ;
42769: LD_ADDR_VAR 0 10
42773: PUSH
42774: LD_VAR 0 9
42778: ST_TO_ADDR
// end ; end ;
42779: GO 42637
42781: POP
42782: POP
// end ;
42783: LD_VAR 0 5
42787: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42788: LD_INT 0
42790: PPUSH
42791: PPUSH
// if not driver or not IsInUnit ( driver ) then
42792: LD_VAR 0 1
42796: NOT
42797: IFTRUE 42811
42799: PUSH
42800: LD_VAR 0 1
42804: PPUSH
42805: CALL_OW 310
42809: NOT
42810: OR
42811: IFFALSE 42815
// exit ;
42813: GO 42905
// vehicle := IsInUnit ( driver ) ;
42815: LD_ADDR_VAR 0 3
42819: PUSH
42820: LD_VAR 0 1
42824: PPUSH
42825: CALL_OW 310
42829: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42830: LD_VAR 0 1
42834: PPUSH
42835: LD_STRING \
42837: PUSH
42838: LD_INT 0
42840: PUSH
42841: LD_INT 0
42843: PUSH
42844: LD_INT 0
42846: PUSH
42847: LD_INT 0
42849: PUSH
42850: LD_INT 0
42852: PUSH
42853: LD_INT 0
42855: PUSH
42856: EMPTY
42857: LIST
42858: LIST
42859: LIST
42860: LIST
42861: LIST
42862: LIST
42863: LIST
42864: PUSH
42865: LD_STRING E
42867: PUSH
42868: LD_INT 0
42870: PUSH
42871: LD_INT 0
42873: PUSH
42874: LD_VAR 0 3
42878: PUSH
42879: LD_INT 0
42881: PUSH
42882: LD_INT 0
42884: PUSH
42885: LD_INT 0
42887: PUSH
42888: EMPTY
42889: LIST
42890: LIST
42891: LIST
42892: LIST
42893: LIST
42894: LIST
42895: LIST
42896: PUSH
42897: EMPTY
42898: LIST
42899: LIST
42900: PPUSH
42901: CALL_OW 446
// end ;
42905: LD_VAR 0 2
42909: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42910: LD_INT 0
42912: PPUSH
42913: PPUSH
// if not driver or not IsInUnit ( driver ) then
42914: LD_VAR 0 1
42918: NOT
42919: IFTRUE 42933
42921: PUSH
42922: LD_VAR 0 1
42926: PPUSH
42927: CALL_OW 310
42931: NOT
42932: OR
42933: IFFALSE 42937
// exit ;
42935: GO 43027
// vehicle := IsInUnit ( driver ) ;
42937: LD_ADDR_VAR 0 3
42941: PUSH
42942: LD_VAR 0 1
42946: PPUSH
42947: CALL_OW 310
42951: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42952: LD_VAR 0 1
42956: PPUSH
42957: LD_STRING \
42959: PUSH
42960: LD_INT 0
42962: PUSH
42963: LD_INT 0
42965: PUSH
42966: LD_INT 0
42968: PUSH
42969: LD_INT 0
42971: PUSH
42972: LD_INT 0
42974: PUSH
42975: LD_INT 0
42977: PUSH
42978: EMPTY
42979: LIST
42980: LIST
42981: LIST
42982: LIST
42983: LIST
42984: LIST
42985: LIST
42986: PUSH
42987: LD_STRING E
42989: PUSH
42990: LD_INT 0
42992: PUSH
42993: LD_INT 0
42995: PUSH
42996: LD_VAR 0 3
43000: PUSH
43001: LD_INT 0
43003: PUSH
43004: LD_INT 0
43006: PUSH
43007: LD_INT 0
43009: PUSH
43010: EMPTY
43011: LIST
43012: LIST
43013: LIST
43014: LIST
43015: LIST
43016: LIST
43017: LIST
43018: PUSH
43019: EMPTY
43020: LIST
43021: LIST
43022: PPUSH
43023: CALL_OW 447
// end ;
43027: LD_VAR 0 2
43031: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
43032: LD_INT 0
43034: PPUSH
43035: PPUSH
43036: PPUSH
// tmp := [ ] ;
43037: LD_ADDR_VAR 0 5
43041: PUSH
43042: EMPTY
43043: ST_TO_ADDR
// for i in units do
43044: LD_ADDR_VAR 0 4
43048: PUSH
43049: LD_VAR 0 1
43053: PUSH
43054: FOR_IN
43055: IFFALSE 43093
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
43057: LD_ADDR_VAR 0 5
43061: PUSH
43062: LD_VAR 0 5
43066: PPUSH
43067: LD_VAR 0 5
43071: PUSH
43072: LD_INT 1
43074: PLUS
43075: PPUSH
43076: LD_VAR 0 4
43080: PPUSH
43081: CALL_OW 256
43085: PPUSH
43086: CALL_OW 2
43090: ST_TO_ADDR
43091: GO 43054
43093: POP
43094: POP
// if not tmp then
43095: LD_VAR 0 5
43099: NOT
43100: IFFALSE 43104
// exit ;
43102: GO 43152
// if asc then
43104: LD_VAR 0 2
43108: IFFALSE 43132
// result := SortListByListAsc ( units , tmp ) else
43110: LD_ADDR_VAR 0 3
43114: PUSH
43115: LD_VAR 0 1
43119: PPUSH
43120: LD_VAR 0 5
43124: PPUSH
43125: CALL_OW 76
43129: ST_TO_ADDR
43130: GO 43152
// result := SortListByListDesc ( units , tmp ) ;
43132: LD_ADDR_VAR 0 3
43136: PUSH
43137: LD_VAR 0 1
43141: PPUSH
43142: LD_VAR 0 5
43146: PPUSH
43147: CALL_OW 77
43151: ST_TO_ADDR
// end ;
43152: LD_VAR 0 3
43156: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
43157: LD_INT 0
43159: PPUSH
43160: PPUSH
// task := GetTaskList ( mech ) ;
43161: LD_ADDR_VAR 0 4
43165: PUSH
43166: LD_VAR 0 1
43170: PPUSH
43171: CALL_OW 437
43175: ST_TO_ADDR
// if not task then
43176: LD_VAR 0 4
43180: NOT
43181: IFFALSE 43185
// exit ;
43183: GO 43229
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
43185: LD_ADDR_VAR 0 3
43189: PUSH
43190: LD_VAR 0 4
43194: PUSH
43195: LD_INT 1
43197: ARRAY
43198: PUSH
43199: LD_INT 1
43201: ARRAY
43202: PUSH
43203: LD_STRING r
43205: EQUAL
43206: IFFALSE 43228
43208: PUSH
43209: LD_VAR 0 4
43213: PUSH
43214: LD_INT 1
43216: ARRAY
43217: PUSH
43218: LD_INT 4
43220: ARRAY
43221: PUSH
43222: LD_VAR 0 2
43226: EQUAL
43227: AND
43228: ST_TO_ADDR
// end ;
43229: LD_VAR 0 3
43233: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
43234: LD_INT 0
43236: PPUSH
// SetDir ( unit , d ) ;
43237: LD_VAR 0 1
43241: PPUSH
43242: LD_VAR 0 4
43246: PPUSH
43247: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
43251: LD_ADDR_VAR 0 6
43255: PUSH
43256: LD_VAR 0 1
43260: PPUSH
43261: LD_VAR 0 2
43265: PPUSH
43266: LD_VAR 0 3
43270: PPUSH
43271: LD_VAR 0 5
43275: PPUSH
43276: CALL_OW 48
43280: ST_TO_ADDR
// end ;
43281: LD_VAR 0 6
43285: RET
// export function ToNaturalNumber ( number ) ; begin
43286: LD_INT 0
43288: PPUSH
// result := number div 1 ;
43289: LD_ADDR_VAR 0 2
43293: PUSH
43294: LD_VAR 0 1
43298: PUSH
43299: LD_INT 1
43301: DIV
43302: ST_TO_ADDR
// if number < 0 then
43303: LD_VAR 0 1
43307: PUSH
43308: LD_INT 0
43310: LESS
43311: IFFALSE 43321
// result := 0 ;
43313: LD_ADDR_VAR 0 2
43317: PUSH
43318: LD_INT 0
43320: ST_TO_ADDR
// end ;
43321: LD_VAR 0 2
43325: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
43326: LD_INT 0
43328: PPUSH
43329: PPUSH
43330: PPUSH
// if not buildings then
43331: LD_VAR 0 1
43335: NOT
43336: IFFALSE 43340
// exit ;
43338: GO 43455
// tmp := [ ] ;
43340: LD_ADDR_VAR 0 5
43344: PUSH
43345: EMPTY
43346: ST_TO_ADDR
// for b in buildings do
43347: LD_ADDR_VAR 0 4
43351: PUSH
43352: LD_VAR 0 1
43356: PUSH
43357: FOR_IN
43358: IFFALSE 43396
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
43360: LD_ADDR_VAR 0 5
43364: PUSH
43365: LD_VAR 0 5
43369: PPUSH
43370: LD_VAR 0 5
43374: PUSH
43375: LD_INT 1
43377: PLUS
43378: PPUSH
43379: LD_VAR 0 4
43383: PPUSH
43384: CALL_OW 266
43388: PPUSH
43389: CALL_OW 1
43393: ST_TO_ADDR
43394: GO 43357
43396: POP
43397: POP
// if not tmp then
43398: LD_VAR 0 5
43402: NOT
43403: IFFALSE 43407
// exit ;
43405: GO 43455
// if asc then
43407: LD_VAR 0 2
43411: IFFALSE 43435
// result := SortListByListAsc ( buildings , tmp ) else
43413: LD_ADDR_VAR 0 3
43417: PUSH
43418: LD_VAR 0 1
43422: PPUSH
43423: LD_VAR 0 5
43427: PPUSH
43428: CALL_OW 76
43432: ST_TO_ADDR
43433: GO 43455
// result := SortListByListDesc ( buildings , tmp ) ;
43435: LD_ADDR_VAR 0 3
43439: PUSH
43440: LD_VAR 0 1
43444: PPUSH
43445: LD_VAR 0 5
43449: PPUSH
43450: CALL_OW 77
43454: ST_TO_ADDR
// end ;
43455: LD_VAR 0 3
43459: RET
// export function SortByClass ( units , class ) ; var un ; begin
43460: LD_INT 0
43462: PPUSH
43463: PPUSH
// if not units or not class then
43464: LD_VAR 0 1
43468: NOT
43469: IFTRUE 43478
43471: PUSH
43472: LD_VAR 0 2
43476: NOT
43477: OR
43478: IFFALSE 43482
// exit ;
43480: GO 43577
// result := [ ] ;
43482: LD_ADDR_VAR 0 3
43486: PUSH
43487: EMPTY
43488: ST_TO_ADDR
// for un in units do
43489: LD_ADDR_VAR 0 4
43493: PUSH
43494: LD_VAR 0 1
43498: PUSH
43499: FOR_IN
43500: IFFALSE 43575
// if GetClass ( un ) = class then
43502: LD_VAR 0 4
43506: PPUSH
43507: CALL_OW 257
43511: PUSH
43512: LD_VAR 0 2
43516: EQUAL
43517: IFFALSE 43544
// result := Insert ( result , 1 , un ) else
43519: LD_ADDR_VAR 0 3
43523: PUSH
43524: LD_VAR 0 3
43528: PPUSH
43529: LD_INT 1
43531: PPUSH
43532: LD_VAR 0 4
43536: PPUSH
43537: CALL_OW 2
43541: ST_TO_ADDR
43542: GO 43573
// result := Replace ( result , result + 1 , un ) ;
43544: LD_ADDR_VAR 0 3
43548: PUSH
43549: LD_VAR 0 3
43553: PPUSH
43554: LD_VAR 0 3
43558: PUSH
43559: LD_INT 1
43561: PLUS
43562: PPUSH
43563: LD_VAR 0 4
43567: PPUSH
43568: CALL_OW 1
43572: ST_TO_ADDR
43573: GO 43499
43575: POP
43576: POP
// end ;
43577: LD_VAR 0 3
43581: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
43582: LD_INT 0
43584: PPUSH
43585: PPUSH
43586: PPUSH
43587: PPUSH
43588: PPUSH
43589: PPUSH
43590: PPUSH
// result := [ ] ;
43591: LD_ADDR_VAR 0 4
43595: PUSH
43596: EMPTY
43597: ST_TO_ADDR
// if x - r < 0 then
43598: LD_VAR 0 1
43602: PUSH
43603: LD_VAR 0 3
43607: MINUS
43608: PUSH
43609: LD_INT 0
43611: LESS
43612: IFFALSE 43624
// min_x := 0 else
43614: LD_ADDR_VAR 0 8
43618: PUSH
43619: LD_INT 0
43621: ST_TO_ADDR
43622: GO 43640
// min_x := x - r ;
43624: LD_ADDR_VAR 0 8
43628: PUSH
43629: LD_VAR 0 1
43633: PUSH
43634: LD_VAR 0 3
43638: MINUS
43639: ST_TO_ADDR
// if y - r < 0 then
43640: LD_VAR 0 2
43644: PUSH
43645: LD_VAR 0 3
43649: MINUS
43650: PUSH
43651: LD_INT 0
43653: LESS
43654: IFFALSE 43666
// min_y := 0 else
43656: LD_ADDR_VAR 0 7
43660: PUSH
43661: LD_INT 0
43663: ST_TO_ADDR
43664: GO 43682
// min_y := y - r ;
43666: LD_ADDR_VAR 0 7
43670: PUSH
43671: LD_VAR 0 2
43675: PUSH
43676: LD_VAR 0 3
43680: MINUS
43681: ST_TO_ADDR
// max_x := x + r ;
43682: LD_ADDR_VAR 0 9
43686: PUSH
43687: LD_VAR 0 1
43691: PUSH
43692: LD_VAR 0 3
43696: PLUS
43697: ST_TO_ADDR
// max_y := y + r ;
43698: LD_ADDR_VAR 0 10
43702: PUSH
43703: LD_VAR 0 2
43707: PUSH
43708: LD_VAR 0 3
43712: PLUS
43713: ST_TO_ADDR
// for _x = min_x to max_x do
43714: LD_ADDR_VAR 0 5
43718: PUSH
43719: DOUBLE
43720: LD_VAR 0 8
43724: DEC
43725: ST_TO_ADDR
43726: LD_VAR 0 9
43730: PUSH
43731: FOR_TO
43732: IFFALSE 43833
// for _y = min_y to max_y do
43734: LD_ADDR_VAR 0 6
43738: PUSH
43739: DOUBLE
43740: LD_VAR 0 7
43744: DEC
43745: ST_TO_ADDR
43746: LD_VAR 0 10
43750: PUSH
43751: FOR_TO
43752: IFFALSE 43829
// begin if not ValidHex ( _x , _y ) then
43754: LD_VAR 0 5
43758: PPUSH
43759: LD_VAR 0 6
43763: PPUSH
43764: CALL_OW 488
43768: NOT
43769: IFFALSE 43773
// continue ;
43771: GO 43751
// if GetResourceTypeXY ( _x , _y ) then
43773: LD_VAR 0 5
43777: PPUSH
43778: LD_VAR 0 6
43782: PPUSH
43783: CALL_OW 283
43787: IFFALSE 43827
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
43789: LD_ADDR_VAR 0 4
43793: PUSH
43794: LD_VAR 0 4
43798: PPUSH
43799: LD_VAR 0 4
43803: PUSH
43804: LD_INT 1
43806: PLUS
43807: PPUSH
43808: LD_VAR 0 5
43812: PUSH
43813: LD_VAR 0 6
43817: PUSH
43818: EMPTY
43819: LIST
43820: LIST
43821: PPUSH
43822: CALL_OW 1
43826: ST_TO_ADDR
// end ;
43827: GO 43751
43829: POP
43830: POP
43831: GO 43731
43833: POP
43834: POP
// end ;
43835: LD_VAR 0 4
43839: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
43840: LD_INT 0
43842: PPUSH
43843: PPUSH
43844: PPUSH
43845: PPUSH
43846: PPUSH
43847: PPUSH
43848: PPUSH
43849: PPUSH
// if not units then
43850: LD_VAR 0 1
43854: NOT
43855: IFFALSE 43859
// exit ;
43857: GO 44391
// result := UnitFilter ( units , [ f_ok ] ) ;
43859: LD_ADDR_VAR 0 3
43863: PUSH
43864: LD_VAR 0 1
43868: PPUSH
43869: LD_INT 50
43871: PUSH
43872: EMPTY
43873: LIST
43874: PPUSH
43875: CALL_OW 72
43879: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
43880: LD_ADDR_VAR 0 8
43884: PUSH
43885: LD_VAR 0 1
43889: PUSH
43890: LD_INT 1
43892: ARRAY
43893: PPUSH
43894: CALL_OW 255
43898: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
43899: LD_ADDR_VAR 0 10
43903: PUSH
43904: LD_INT 29
43906: PUSH
43907: LD_INT 91
43909: PUSH
43910: LD_INT 49
43912: PUSH
43913: EMPTY
43914: LIST
43915: LIST
43916: LIST
43917: ST_TO_ADDR
// if not result then
43918: LD_VAR 0 3
43922: NOT
43923: IFFALSE 43927
// exit ;
43925: GO 44391
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
43927: LD_ADDR_VAR 0 5
43931: PUSH
43932: LD_INT 81
43934: PUSH
43935: LD_VAR 0 8
43939: PUSH
43940: EMPTY
43941: LIST
43942: LIST
43943: PPUSH
43944: CALL_OW 69
43948: ST_TO_ADDR
// for i in result do
43949: LD_ADDR_VAR 0 4
43953: PUSH
43954: LD_VAR 0 3
43958: PUSH
43959: FOR_IN
43960: IFFALSE 44389
// begin tag := GetTag ( i ) + 1 ;
43962: LD_ADDR_VAR 0 9
43966: PUSH
43967: LD_VAR 0 4
43971: PPUSH
43972: CALL_OW 110
43976: PUSH
43977: LD_INT 1
43979: PLUS
43980: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
43981: LD_ADDR_VAR 0 7
43985: PUSH
43986: LD_VAR 0 4
43990: PPUSH
43991: CALL_OW 250
43995: PPUSH
43996: LD_VAR 0 4
44000: PPUSH
44001: CALL_OW 251
44005: PPUSH
44006: LD_INT 4
44008: PPUSH
44009: CALL 43582 0 3
44013: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
44014: LD_VAR 0 4
44018: PPUSH
44019: CALL_OW 247
44023: PUSH
44024: LD_INT 2
44026: EQUAL
44027: IFFALSE 44039
44029: PUSH
44030: LD_VAR 0 7
44034: PUSH
44035: LD_INT 2
44037: GREATER
44038: AND
44039: IFFALSE 44059
44041: PUSH
44042: LD_VAR 0 4
44046: PPUSH
44047: CALL_OW 264
44051: PUSH
44052: LD_VAR 0 10
44056: IN
44057: NOT
44058: AND
44059: IFFALSE 44098
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
44061: LD_VAR 0 4
44065: PPUSH
44066: LD_VAR 0 7
44070: PUSH
44071: LD_INT 1
44073: ARRAY
44074: PUSH
44075: LD_INT 1
44077: ARRAY
44078: PPUSH
44079: LD_VAR 0 7
44083: PUSH
44084: LD_INT 1
44086: ARRAY
44087: PUSH
44088: LD_INT 2
44090: ARRAY
44091: PPUSH
44092: CALL_OW 116
44096: GO 44387
// if path > tag then
44098: LD_VAR 0 2
44102: PUSH
44103: LD_VAR 0 9
44107: GREATER
44108: IFFALSE 44316
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
44110: LD_ADDR_VAR 0 6
44114: PUSH
44115: LD_VAR 0 5
44119: PPUSH
44120: LD_INT 91
44122: PUSH
44123: LD_VAR 0 4
44127: PUSH
44128: LD_INT 8
44130: PUSH
44131: EMPTY
44132: LIST
44133: LIST
44134: LIST
44135: PPUSH
44136: CALL_OW 72
44140: ST_TO_ADDR
// if nearEnemy then
44141: LD_VAR 0 6
44145: IFFALSE 44214
// begin if GetWeapon ( i ) = ru_time_lapser then
44147: LD_VAR 0 4
44151: PPUSH
44152: CALL_OW 264
44156: PUSH
44157: LD_INT 49
44159: EQUAL
44160: IFFALSE 44188
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
44162: LD_VAR 0 4
44166: PPUSH
44167: LD_VAR 0 6
44171: PPUSH
44172: LD_VAR 0 4
44176: PPUSH
44177: CALL_OW 74
44181: PPUSH
44182: CALL_OW 112
44186: GO 44212
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
44188: LD_VAR 0 4
44192: PPUSH
44193: LD_VAR 0 6
44197: PPUSH
44198: LD_VAR 0 4
44202: PPUSH
44203: CALL_OW 74
44207: PPUSH
44208: CALL 45472 0 2
// end else
44212: GO 44314
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
44214: LD_VAR 0 4
44218: PPUSH
44219: LD_VAR 0 2
44223: PUSH
44224: LD_VAR 0 9
44228: ARRAY
44229: PUSH
44230: LD_INT 1
44232: ARRAY
44233: PPUSH
44234: LD_VAR 0 2
44238: PUSH
44239: LD_VAR 0 9
44243: ARRAY
44244: PUSH
44245: LD_INT 2
44247: ARRAY
44248: PPUSH
44249: CALL_OW 297
44253: PUSH
44254: LD_INT 6
44256: GREATER
44257: IFFALSE 44300
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
44259: LD_VAR 0 4
44263: PPUSH
44264: LD_VAR 0 2
44268: PUSH
44269: LD_VAR 0 9
44273: ARRAY
44274: PUSH
44275: LD_INT 1
44277: ARRAY
44278: PPUSH
44279: LD_VAR 0 2
44283: PUSH
44284: LD_VAR 0 9
44288: ARRAY
44289: PUSH
44290: LD_INT 2
44292: ARRAY
44293: PPUSH
44294: CALL_OW 114
44298: GO 44314
// SetTag ( i , tag ) ;
44300: LD_VAR 0 4
44304: PPUSH
44305: LD_VAR 0 9
44309: PPUSH
44310: CALL_OW 109
// end else
44314: GO 44387
// if enemy then
44316: LD_VAR 0 5
44320: IFFALSE 44387
// begin if GetWeapon ( i ) = ru_time_lapser then
44322: LD_VAR 0 4
44326: PPUSH
44327: CALL_OW 264
44331: PUSH
44332: LD_INT 49
44334: EQUAL
44335: IFFALSE 44363
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
44337: LD_VAR 0 4
44341: PPUSH
44342: LD_VAR 0 5
44346: PPUSH
44347: LD_VAR 0 4
44351: PPUSH
44352: CALL_OW 74
44356: PPUSH
44357: CALL_OW 112
44361: GO 44387
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
44363: LD_VAR 0 4
44367: PPUSH
44368: LD_VAR 0 5
44372: PPUSH
44373: LD_VAR 0 4
44377: PPUSH
44378: CALL_OW 74
44382: PPUSH
44383: CALL 45472 0 2
// end ; end ;
44387: GO 43959
44389: POP
44390: POP
// end ;
44391: LD_VAR 0 3
44395: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
44396: LD_INT 0
44398: PPUSH
44399: PPUSH
44400: PPUSH
// if not unit or IsInUnit ( unit ) then
44401: LD_VAR 0 1
44405: NOT
44406: IFTRUE 44419
44408: PUSH
44409: LD_VAR 0 1
44413: PPUSH
44414: CALL_OW 310
44418: OR
44419: IFFALSE 44423
// exit ;
44421: GO 44514
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
44423: LD_ADDR_VAR 0 4
44427: PUSH
44428: LD_VAR 0 1
44432: PPUSH
44433: CALL_OW 250
44437: PPUSH
44438: LD_VAR 0 2
44442: PPUSH
44443: LD_INT 1
44445: PPUSH
44446: CALL_OW 272
44450: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
44451: LD_ADDR_VAR 0 5
44455: PUSH
44456: LD_VAR 0 1
44460: PPUSH
44461: CALL_OW 251
44465: PPUSH
44466: LD_VAR 0 2
44470: PPUSH
44471: LD_INT 1
44473: PPUSH
44474: CALL_OW 273
44478: ST_TO_ADDR
// if ValidHex ( x , y ) then
44479: LD_VAR 0 4
44483: PPUSH
44484: LD_VAR 0 5
44488: PPUSH
44489: CALL_OW 488
44493: IFFALSE 44514
// ComTurnXY ( unit , x , y ) ;
44495: LD_VAR 0 1
44499: PPUSH
44500: LD_VAR 0 4
44504: PPUSH
44505: LD_VAR 0 5
44509: PPUSH
44510: CALL_OW 118
// end ;
44514: LD_VAR 0 3
44518: RET
// export function SeeUnits ( side , units ) ; var i ; begin
44519: LD_INT 0
44521: PPUSH
44522: PPUSH
// result := false ;
44523: LD_ADDR_VAR 0 3
44527: PUSH
44528: LD_INT 0
44530: ST_TO_ADDR
// if not units then
44531: LD_VAR 0 2
44535: NOT
44536: IFFALSE 44540
// exit ;
44538: GO 44585
// for i in units do
44540: LD_ADDR_VAR 0 4
44544: PUSH
44545: LD_VAR 0 2
44549: PUSH
44550: FOR_IN
44551: IFFALSE 44583
// if See ( side , i ) then
44553: LD_VAR 0 1
44557: PPUSH
44558: LD_VAR 0 4
44562: PPUSH
44563: CALL_OW 292
44567: IFFALSE 44581
// begin result := true ;
44569: LD_ADDR_VAR 0 3
44573: PUSH
44574: LD_INT 1
44576: ST_TO_ADDR
// exit ;
44577: POP
44578: POP
44579: GO 44585
// end ;
44581: GO 44550
44583: POP
44584: POP
// end ;
44585: LD_VAR 0 3
44589: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
44590: LD_INT 0
44592: PPUSH
44593: PPUSH
44594: PPUSH
44595: PPUSH
// if not unit or not points then
44596: LD_VAR 0 1
44600: NOT
44601: IFTRUE 44610
44603: PUSH
44604: LD_VAR 0 2
44608: NOT
44609: OR
44610: IFFALSE 44614
// exit ;
44612: GO 44704
// dist := 99999 ;
44614: LD_ADDR_VAR 0 5
44618: PUSH
44619: LD_INT 99999
44621: ST_TO_ADDR
// for i in points do
44622: LD_ADDR_VAR 0 4
44626: PUSH
44627: LD_VAR 0 2
44631: PUSH
44632: FOR_IN
44633: IFFALSE 44702
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
44635: LD_ADDR_VAR 0 6
44639: PUSH
44640: LD_VAR 0 1
44644: PPUSH
44645: LD_VAR 0 4
44649: PUSH
44650: LD_INT 1
44652: ARRAY
44653: PPUSH
44654: LD_VAR 0 4
44658: PUSH
44659: LD_INT 2
44661: ARRAY
44662: PPUSH
44663: CALL_OW 297
44667: ST_TO_ADDR
// if tmpDist < dist then
44668: LD_VAR 0 6
44672: PUSH
44673: LD_VAR 0 5
44677: LESS
44678: IFFALSE 44700
// begin result := i ;
44680: LD_ADDR_VAR 0 3
44684: PUSH
44685: LD_VAR 0 4
44689: ST_TO_ADDR
// dist := tmpDist ;
44690: LD_ADDR_VAR 0 5
44694: PUSH
44695: LD_VAR 0 6
44699: ST_TO_ADDR
// end ; end ;
44700: GO 44632
44702: POP
44703: POP
// end ;
44704: LD_VAR 0 3
44708: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
44709: LD_INT 0
44711: PPUSH
// uc_side := side ;
44712: LD_ADDR_OWVAR 20
44716: PUSH
44717: LD_VAR 0 1
44721: ST_TO_ADDR
// uc_nation := 3 ;
44722: LD_ADDR_OWVAR 21
44726: PUSH
44727: LD_INT 3
44729: ST_TO_ADDR
// vc_chassis := 25 ;
44730: LD_ADDR_OWVAR 37
44734: PUSH
44735: LD_INT 25
44737: ST_TO_ADDR
// vc_engine := engine_siberite ;
44738: LD_ADDR_OWVAR 39
44742: PUSH
44743: LD_INT 3
44745: ST_TO_ADDR
// vc_control := control_computer ;
44746: LD_ADDR_OWVAR 38
44750: PUSH
44751: LD_INT 3
44753: ST_TO_ADDR
// vc_weapon := 59 ;
44754: LD_ADDR_OWVAR 40
44758: PUSH
44759: LD_INT 59
44761: ST_TO_ADDR
// result := CreateVehicle ;
44762: LD_ADDR_VAR 0 5
44766: PUSH
44767: CALL_OW 45
44771: ST_TO_ADDR
// SetDir ( result , d ) ;
44772: LD_VAR 0 5
44776: PPUSH
44777: LD_VAR 0 4
44781: PPUSH
44782: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
44786: LD_VAR 0 5
44790: PPUSH
44791: LD_VAR 0 2
44795: PPUSH
44796: LD_VAR 0 3
44800: PPUSH
44801: LD_INT 0
44803: PPUSH
44804: CALL_OW 48
// end ;
44808: LD_VAR 0 5
44812: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
44813: LD_INT 0
44815: PPUSH
44816: PPUSH
44817: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
44818: LD_ADDR_VAR 0 2
44822: PUSH
44823: LD_INT 0
44825: PUSH
44826: LD_INT 0
44828: PUSH
44829: LD_INT 0
44831: PUSH
44832: LD_INT 0
44834: PUSH
44835: EMPTY
44836: LIST
44837: LIST
44838: LIST
44839: LIST
44840: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
44841: LD_VAR 0 1
44845: NOT
44846: IFTRUE 44879
44848: PUSH
44849: LD_VAR 0 1
44853: PPUSH
44854: CALL_OW 264
44858: PUSH
44859: LD_INT 12
44861: PUSH
44862: LD_INT 51
44864: PUSH
44865: LD_INT 32
44867: PUSH
44868: LD_INT 89
44870: PUSH
44871: EMPTY
44872: LIST
44873: LIST
44874: LIST
44875: LIST
44876: IN
44877: NOT
44878: OR
44879: IFFALSE 44883
// exit ;
44881: GO 44981
// for i := 1 to 3 do
44883: LD_ADDR_VAR 0 3
44887: PUSH
44888: DOUBLE
44889: LD_INT 1
44891: DEC
44892: ST_TO_ADDR
44893: LD_INT 3
44895: PUSH
44896: FOR_TO
44897: IFFALSE 44979
// begin tmp := GetCargo ( cargo , i ) ;
44899: LD_ADDR_VAR 0 4
44903: PUSH
44904: LD_VAR 0 1
44908: PPUSH
44909: LD_VAR 0 3
44913: PPUSH
44914: CALL_OW 289
44918: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
44919: LD_ADDR_VAR 0 2
44923: PUSH
44924: LD_VAR 0 2
44928: PPUSH
44929: LD_VAR 0 3
44933: PPUSH
44934: LD_VAR 0 4
44938: PPUSH
44939: CALL_OW 1
44943: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
44944: LD_ADDR_VAR 0 2
44948: PUSH
44949: LD_VAR 0 2
44953: PPUSH
44954: LD_INT 4
44956: PPUSH
44957: LD_VAR 0 2
44961: PUSH
44962: LD_INT 4
44964: ARRAY
44965: PUSH
44966: LD_VAR 0 4
44970: PLUS
44971: PPUSH
44972: CALL_OW 1
44976: ST_TO_ADDR
// end ;
44977: GO 44896
44979: POP
44980: POP
// end ;
44981: LD_VAR 0 2
44985: RET
// export function Length ( array ) ; begin
44986: LD_INT 0
44988: PPUSH
// result := array + 0 ;
44989: LD_ADDR_VAR 0 2
44993: PUSH
44994: LD_VAR 0 1
44998: PUSH
44999: LD_INT 0
45001: PLUS
45002: ST_TO_ADDR
// end ;
45003: LD_VAR 0 2
45007: RET
// export function PrepareArray ( array ) ; begin
45008: LD_INT 0
45010: PPUSH
// result := array diff 0 ;
45011: LD_ADDR_VAR 0 2
45015: PUSH
45016: LD_VAR 0 1
45020: PUSH
45021: LD_INT 0
45023: DIFF
45024: ST_TO_ADDR
// if not result [ 1 ] then
45025: LD_VAR 0 2
45029: PUSH
45030: LD_INT 1
45032: ARRAY
45033: NOT
45034: IFFALSE 45054
// result := Delete ( result , 1 ) ;
45036: LD_ADDR_VAR 0 2
45040: PUSH
45041: LD_VAR 0 2
45045: PPUSH
45046: LD_INT 1
45048: PPUSH
45049: CALL_OW 3
45053: ST_TO_ADDR
// end ;
45054: LD_VAR 0 2
45058: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
45059: LD_INT 0
45061: PPUSH
45062: PPUSH
45063: PPUSH
45064: PPUSH
// sibRocketRange := 25 ;
45065: LD_ADDR_VAR 0 6
45069: PUSH
45070: LD_INT 25
45072: ST_TO_ADDR
// result := false ;
45073: LD_ADDR_VAR 0 4
45077: PUSH
45078: LD_INT 0
45080: ST_TO_ADDR
// for i := 0 to 5 do
45081: LD_ADDR_VAR 0 5
45085: PUSH
45086: DOUBLE
45087: LD_INT 0
45089: DEC
45090: ST_TO_ADDR
45091: LD_INT 5
45093: PUSH
45094: FOR_TO
45095: IFFALSE 45162
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
45097: LD_VAR 0 1
45101: PPUSH
45102: LD_VAR 0 5
45106: PPUSH
45107: LD_VAR 0 6
45111: PPUSH
45112: CALL_OW 272
45116: PPUSH
45117: LD_VAR 0 2
45121: PPUSH
45122: LD_VAR 0 5
45126: PPUSH
45127: LD_VAR 0 6
45131: PPUSH
45132: CALL_OW 273
45136: PPUSH
45137: LD_VAR 0 3
45141: PPUSH
45142: CALL_OW 309
45146: IFFALSE 45160
// begin result := true ;
45148: LD_ADDR_VAR 0 4
45152: PUSH
45153: LD_INT 1
45155: ST_TO_ADDR
// exit ;
45156: POP
45157: POP
45158: GO 45164
// end ;
45160: GO 45094
45162: POP
45163: POP
// end ;
45164: LD_VAR 0 4
45168: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
45169: LD_INT 0
45171: PPUSH
45172: PPUSH
45173: PPUSH
// if btype = b_depot then
45174: LD_VAR 0 2
45178: PUSH
45179: LD_INT 0
45181: EQUAL
45182: IFFALSE 45194
// begin result := true ;
45184: LD_ADDR_VAR 0 3
45188: PUSH
45189: LD_INT 1
45191: ST_TO_ADDR
// exit ;
45192: GO 45314
// end ; pom := GetBase ( depot ) ;
45194: LD_ADDR_VAR 0 4
45198: PUSH
45199: LD_VAR 0 1
45203: PPUSH
45204: CALL_OW 274
45208: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
45209: LD_ADDR_VAR 0 5
45213: PUSH
45214: LD_VAR 0 2
45218: PPUSH
45219: LD_VAR 0 1
45223: PPUSH
45224: CALL_OW 248
45228: PPUSH
45229: CALL_OW 450
45233: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
45234: LD_ADDR_VAR 0 3
45238: PUSH
45239: LD_VAR 0 4
45243: PPUSH
45244: LD_INT 1
45246: PPUSH
45247: CALL_OW 275
45251: PUSH
45252: LD_VAR 0 5
45256: PUSH
45257: LD_INT 1
45259: ARRAY
45260: GREATEREQUAL
45261: IFFALSE 45287
45263: PUSH
45264: LD_VAR 0 4
45268: PPUSH
45269: LD_INT 2
45271: PPUSH
45272: CALL_OW 275
45276: PUSH
45277: LD_VAR 0 5
45281: PUSH
45282: LD_INT 2
45284: ARRAY
45285: GREATEREQUAL
45286: AND
45287: IFFALSE 45313
45289: PUSH
45290: LD_VAR 0 4
45294: PPUSH
45295: LD_INT 3
45297: PPUSH
45298: CALL_OW 275
45302: PUSH
45303: LD_VAR 0 5
45307: PUSH
45308: LD_INT 3
45310: ARRAY
45311: GREATEREQUAL
45312: AND
45313: ST_TO_ADDR
// end ;
45314: LD_VAR 0 3
45318: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
45319: LD_INT 0
45321: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
45322: LD_VAR 0 1
45326: PPUSH
45327: LD_VAR 0 2
45331: PPUSH
45332: LD_INT 0
45334: PPUSH
45335: LD_INT 0
45337: PPUSH
45338: LD_INT 1
45340: PPUSH
45341: LD_INT 0
45343: PPUSH
45344: CALL_OW 587
// end ;
45348: LD_VAR 0 3
45352: RET
// export function CenterOnNow ( unit ) ; begin
45353: LD_INT 0
45355: PPUSH
// result := IsInUnit ( unit ) ;
45356: LD_ADDR_VAR 0 2
45360: PUSH
45361: LD_VAR 0 1
45365: PPUSH
45366: CALL_OW 310
45370: ST_TO_ADDR
// if not result then
45371: LD_VAR 0 2
45375: NOT
45376: IFFALSE 45388
// result := unit ;
45378: LD_ADDR_VAR 0 2
45382: PUSH
45383: LD_VAR 0 1
45387: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
45388: LD_VAR 0 1
45392: PPUSH
45393: CALL_OW 87
// end ;
45397: LD_VAR 0 2
45401: RET
// export function ComMoveHex ( unit , hex ) ; begin
45402: LD_INT 0
45404: PPUSH
// if not hex then
45405: LD_VAR 0 2
45409: NOT
45410: IFFALSE 45414
// exit ;
45412: GO 45467
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
45414: LD_VAR 0 2
45418: PUSH
45419: LD_INT 1
45421: ARRAY
45422: PPUSH
45423: LD_VAR 0 2
45427: PUSH
45428: LD_INT 2
45430: ARRAY
45431: PPUSH
45432: CALL_OW 428
45436: IFFALSE 45440
// exit ;
45438: GO 45467
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
45440: LD_VAR 0 1
45444: PPUSH
45445: LD_VAR 0 2
45449: PUSH
45450: LD_INT 1
45452: ARRAY
45453: PPUSH
45454: LD_VAR 0 2
45458: PUSH
45459: LD_INT 2
45461: ARRAY
45462: PPUSH
45463: CALL_OW 111
// end ;
45467: LD_VAR 0 3
45471: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
45472: LD_INT 0
45474: PPUSH
45475: PPUSH
45476: PPUSH
// if not unit or not enemy then
45477: LD_VAR 0 1
45481: NOT
45482: IFTRUE 45491
45484: PUSH
45485: LD_VAR 0 2
45489: NOT
45490: OR
45491: IFFALSE 45495
// exit ;
45493: GO 45621
// x := GetX ( enemy ) ;
45495: LD_ADDR_VAR 0 4
45499: PUSH
45500: LD_VAR 0 2
45504: PPUSH
45505: CALL_OW 250
45509: ST_TO_ADDR
// y := GetY ( enemy ) ;
45510: LD_ADDR_VAR 0 5
45514: PUSH
45515: LD_VAR 0 2
45519: PPUSH
45520: CALL_OW 251
45524: ST_TO_ADDR
// if ValidHex ( x , y ) then
45525: LD_VAR 0 4
45529: PPUSH
45530: LD_VAR 0 5
45534: PPUSH
45535: CALL_OW 488
45539: IFFALSE 45621
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
45541: LD_VAR 0 2
45545: PPUSH
45546: CALL_OW 247
45550: PUSH
45551: LD_INT 3
45553: PUSH
45554: LD_INT 2
45556: PUSH
45557: EMPTY
45558: LIST
45559: LIST
45560: IN
45561: IFTRUE 45584
45563: PUSH
45564: LD_VAR 0 1
45568: PPUSH
45569: CALL_OW 255
45573: PPUSH
45574: LD_VAR 0 2
45578: PPUSH
45579: CALL_OW 292
45583: OR
45584: IFFALSE 45602
// ComAttackUnit ( unit , enemy ) else
45586: LD_VAR 0 1
45590: PPUSH
45591: LD_VAR 0 2
45595: PPUSH
45596: CALL_OW 115
45600: GO 45621
// ComAgressiveMove ( unit , x , y ) ;
45602: LD_VAR 0 1
45606: PPUSH
45607: LD_VAR 0 4
45611: PPUSH
45612: LD_VAR 0 5
45616: PPUSH
45617: CALL_OW 114
// end ;
45621: LD_VAR 0 3
45625: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
45626: LD_INT 0
45628: PPUSH
45629: PPUSH
45630: PPUSH
// list := AreaToList ( area , 0 ) ;
45631: LD_ADDR_VAR 0 5
45635: PUSH
45636: LD_VAR 0 1
45640: PPUSH
45641: LD_INT 0
45643: PPUSH
45644: CALL_OW 517
45648: ST_TO_ADDR
// if not list then
45649: LD_VAR 0 5
45653: NOT
45654: IFFALSE 45658
// exit ;
45656: GO 45788
// if all then
45658: LD_VAR 0 2
45662: IFFALSE 45750
// begin for i := 1 to list [ 1 ] do
45664: LD_ADDR_VAR 0 4
45668: PUSH
45669: DOUBLE
45670: LD_INT 1
45672: DEC
45673: ST_TO_ADDR
45674: LD_VAR 0 5
45678: PUSH
45679: LD_INT 1
45681: ARRAY
45682: PUSH
45683: FOR_TO
45684: IFFALSE 45746
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
45686: LD_ADDR_VAR 0 3
45690: PUSH
45691: LD_VAR 0 3
45695: PPUSH
45696: LD_VAR 0 3
45700: PUSH
45701: LD_INT 1
45703: PLUS
45704: PPUSH
45705: LD_VAR 0 5
45709: PUSH
45710: LD_INT 1
45712: ARRAY
45713: PUSH
45714: LD_VAR 0 4
45718: ARRAY
45719: PUSH
45720: LD_VAR 0 5
45724: PUSH
45725: LD_INT 2
45727: ARRAY
45728: PUSH
45729: LD_VAR 0 4
45733: ARRAY
45734: PUSH
45735: EMPTY
45736: LIST
45737: LIST
45738: PPUSH
45739: CALL_OW 1
45743: ST_TO_ADDR
45744: GO 45683
45746: POP
45747: POP
// exit ;
45748: GO 45788
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
45750: LD_ADDR_VAR 0 3
45754: PUSH
45755: LD_VAR 0 5
45759: PUSH
45760: LD_INT 1
45762: ARRAY
45763: PUSH
45764: LD_INT 1
45766: ARRAY
45767: PUSH
45768: LD_VAR 0 5
45772: PUSH
45773: LD_INT 2
45775: ARRAY
45776: PUSH
45777: LD_INT 1
45779: ARRAY
45780: PUSH
45781: EMPTY
45782: LIST
45783: LIST
45784: PUSH
45785: EMPTY
45786: LIST
45787: ST_TO_ADDR
// end ;
45788: LD_VAR 0 3
45792: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
45793: LD_INT 0
45795: PPUSH
45796: PPUSH
// list := AreaToList ( area , 0 ) ;
45797: LD_ADDR_VAR 0 4
45801: PUSH
45802: LD_VAR 0 1
45806: PPUSH
45807: LD_INT 0
45809: PPUSH
45810: CALL_OW 517
45814: ST_TO_ADDR
// if not list then
45815: LD_VAR 0 4
45819: NOT
45820: IFFALSE 45824
// exit ;
45822: GO 45865
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
45824: LD_ADDR_VAR 0 3
45828: PUSH
45829: LD_VAR 0 4
45833: PUSH
45834: LD_INT 1
45836: ARRAY
45837: PUSH
45838: LD_INT 1
45840: ARRAY
45841: PUSH
45842: LD_VAR 0 4
45846: PUSH
45847: LD_INT 2
45849: ARRAY
45850: PUSH
45851: LD_INT 1
45853: ARRAY
45854: PUSH
45855: LD_VAR 0 2
45859: PUSH
45860: EMPTY
45861: LIST
45862: LIST
45863: LIST
45864: ST_TO_ADDR
// end ;
45865: LD_VAR 0 3
45869: RET
// export function First ( array ) ; begin
45870: LD_INT 0
45872: PPUSH
// if not array then
45873: LD_VAR 0 1
45877: NOT
45878: IFFALSE 45882
// exit ;
45880: GO 45896
// result := array [ 1 ] ;
45882: LD_ADDR_VAR 0 2
45886: PUSH
45887: LD_VAR 0 1
45891: PUSH
45892: LD_INT 1
45894: ARRAY
45895: ST_TO_ADDR
// end ;
45896: LD_VAR 0 2
45900: RET
// export function Last ( array ) ; begin
45901: LD_INT 0
45903: PPUSH
// if not array then
45904: LD_VAR 0 1
45908: NOT
45909: IFFALSE 45913
// exit ;
45911: GO 45929
// result := array [ array ] ;
45913: LD_ADDR_VAR 0 2
45917: PUSH
45918: LD_VAR 0 1
45922: PUSH
45923: LD_VAR 0 1
45927: ARRAY
45928: ST_TO_ADDR
// end ;
45929: LD_VAR 0 2
45933: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
45934: LD_INT 0
45936: PPUSH
45937: PPUSH
// result := [ ] ;
45938: LD_ADDR_VAR 0 5
45942: PUSH
45943: EMPTY
45944: ST_TO_ADDR
// if not array then
45945: LD_VAR 0 1
45949: NOT
45950: IFFALSE 45954
// exit ;
45952: GO 46066
// for i := 1 to array do
45954: LD_ADDR_VAR 0 6
45958: PUSH
45959: DOUBLE
45960: LD_INT 1
45962: DEC
45963: ST_TO_ADDR
45964: LD_VAR 0 1
45968: PUSH
45969: FOR_TO
45970: IFFALSE 46064
// if array [ i ] [ index ] = value then
45972: LD_VAR 0 1
45976: PUSH
45977: LD_VAR 0 6
45981: ARRAY
45982: PUSH
45983: LD_VAR 0 2
45987: ARRAY
45988: PUSH
45989: LD_VAR 0 3
45993: EQUAL
45994: IFFALSE 46062
// begin if indexColumn then
45996: LD_VAR 0 4
46000: IFFALSE 46036
// result := Join ( result , array [ i ] [ indexColumn ] ) else
46002: LD_ADDR_VAR 0 5
46006: PUSH
46007: LD_VAR 0 5
46011: PPUSH
46012: LD_VAR 0 1
46016: PUSH
46017: LD_VAR 0 6
46021: ARRAY
46022: PUSH
46023: LD_VAR 0 4
46027: ARRAY
46028: PPUSH
46029: CALL 41074 0 2
46033: ST_TO_ADDR
46034: GO 46062
// result := Join ( result , array [ i ] ) ;
46036: LD_ADDR_VAR 0 5
46040: PUSH
46041: LD_VAR 0 5
46045: PPUSH
46046: LD_VAR 0 1
46050: PUSH
46051: LD_VAR 0 6
46055: ARRAY
46056: PPUSH
46057: CALL 41074 0 2
46061: ST_TO_ADDR
// end ;
46062: GO 45969
46064: POP
46065: POP
// end ;
46066: LD_VAR 0 5
46070: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
46071: LD_INT 0
46073: PPUSH
// if not vehicles or not parkingPoint then
46074: LD_VAR 0 1
46078: NOT
46079: IFTRUE 46088
46081: PUSH
46082: LD_VAR 0 2
46086: NOT
46087: OR
46088: IFFALSE 46092
// exit ;
46090: GO 46190
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
46092: LD_ADDR_VAR 0 1
46096: PUSH
46097: LD_VAR 0 1
46101: PPUSH
46102: LD_INT 50
46104: PUSH
46105: EMPTY
46106: LIST
46107: PUSH
46108: LD_INT 3
46110: PUSH
46111: LD_INT 92
46113: PUSH
46114: LD_VAR 0 2
46118: PUSH
46119: LD_INT 1
46121: ARRAY
46122: PUSH
46123: LD_VAR 0 2
46127: PUSH
46128: LD_INT 2
46130: ARRAY
46131: PUSH
46132: LD_INT 8
46134: PUSH
46135: EMPTY
46136: LIST
46137: LIST
46138: LIST
46139: LIST
46140: PUSH
46141: EMPTY
46142: LIST
46143: LIST
46144: PUSH
46145: EMPTY
46146: LIST
46147: LIST
46148: PPUSH
46149: CALL_OW 72
46153: ST_TO_ADDR
// if not vehicles then
46154: LD_VAR 0 1
46158: NOT
46159: IFFALSE 46163
// exit ;
46161: GO 46190
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
46163: LD_VAR 0 1
46167: PPUSH
46168: LD_VAR 0 2
46172: PUSH
46173: LD_INT 1
46175: ARRAY
46176: PPUSH
46177: LD_VAR 0 2
46181: PUSH
46182: LD_INT 2
46184: ARRAY
46185: PPUSH
46186: CALL_OW 111
// end ;
46190: LD_VAR 0 3
46194: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
46195: LD_INT 0
46197: PPUSH
46198: PPUSH
46199: PPUSH
// if not side or not area then
46200: LD_VAR 0 1
46204: NOT
46205: IFTRUE 46214
46207: PUSH
46208: LD_VAR 0 2
46212: NOT
46213: OR
46214: IFFALSE 46218
// exit ;
46216: GO 46337
// tmp := AreaToList ( area , 0 ) ;
46218: LD_ADDR_VAR 0 5
46222: PUSH
46223: LD_VAR 0 2
46227: PPUSH
46228: LD_INT 0
46230: PPUSH
46231: CALL_OW 517
46235: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
46236: LD_ADDR_VAR 0 4
46240: PUSH
46241: DOUBLE
46242: LD_INT 1
46244: DEC
46245: ST_TO_ADDR
46246: LD_VAR 0 5
46250: PUSH
46251: LD_INT 1
46253: ARRAY
46254: PUSH
46255: FOR_TO
46256: IFFALSE 46335
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
46258: LD_VAR 0 5
46262: PUSH
46263: LD_INT 1
46265: ARRAY
46266: PUSH
46267: LD_VAR 0 4
46271: ARRAY
46272: PPUSH
46273: LD_VAR 0 5
46277: PUSH
46278: LD_INT 2
46280: ARRAY
46281: PUSH
46282: LD_VAR 0 4
46286: ARRAY
46287: PPUSH
46288: CALL_OW 351
46292: IFFALSE 46333
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
46294: LD_VAR 0 5
46298: PUSH
46299: LD_INT 1
46301: ARRAY
46302: PUSH
46303: LD_VAR 0 4
46307: ARRAY
46308: PPUSH
46309: LD_VAR 0 5
46313: PUSH
46314: LD_INT 2
46316: ARRAY
46317: PUSH
46318: LD_VAR 0 4
46322: ARRAY
46323: PPUSH
46324: LD_VAR 0 1
46328: PPUSH
46329: CALL_OW 244
// end ;
46333: GO 46255
46335: POP
46336: POP
// end ;
46337: LD_VAR 0 3
46341: RET
// export function UniqueArray ( array ) ; var i ; begin
46342: LD_INT 0
46344: PPUSH
46345: PPUSH
// result := [ ] ;
46346: LD_ADDR_VAR 0 2
46350: PUSH
46351: EMPTY
46352: ST_TO_ADDR
// if not array then
46353: LD_VAR 0 1
46357: NOT
46358: IFFALSE 46362
// exit ;
46360: GO 46423
// for i := 1 to array do
46362: LD_ADDR_VAR 0 3
46366: PUSH
46367: DOUBLE
46368: LD_INT 1
46370: DEC
46371: ST_TO_ADDR
46372: LD_VAR 0 1
46376: PUSH
46377: FOR_TO
46378: IFFALSE 46421
// if not array [ i ] in result then
46380: LD_VAR 0 1
46384: PUSH
46385: LD_VAR 0 3
46389: ARRAY
46390: PUSH
46391: LD_VAR 0 2
46395: IN
46396: NOT
46397: IFFALSE 46419
// result := Join ( result , i ) ;
46399: LD_ADDR_VAR 0 2
46403: PUSH
46404: LD_VAR 0 2
46408: PPUSH
46409: LD_VAR 0 3
46413: PPUSH
46414: CALL 41074 0 2
46418: ST_TO_ADDR
46419: GO 46377
46421: POP
46422: POP
// end ; end_of_file
46423: LD_VAR 0 2
46427: RET
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpGlobalOilDeposits , mpGlobalSibDeposits , mpTeleports , mpArtifacts , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
46428: LD_INT 0
46430: PPUSH
46431: PPUSH
// disable ( mpActive ) ;
46432: LD_INT 100
46434: DISABLE_MARKED
// disable ( mpWin ) ;
46435: LD_INT 101
46437: DISABLE_MARKED
// disable ( mpLose ) ;
46438: LD_INT 102
46440: DISABLE_MARKED
// mpGameType := 0 ;
46441: LD_ADDR_EXP 3
46445: PUSH
46446: LD_INT 0
46448: ST_TO_ADDR
// mpGameSettings := [ ] ;
46449: LD_ADDR_EXP 6
46453: PUSH
46454: EMPTY
46455: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
46456: LD_ADDR_EXP 4
46460: PUSH
46461: EMPTY
46462: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
46463: LD_ADDR_EXP 5
46467: PUSH
46468: EMPTY
46469: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
46470: LD_ADDR_EXP 29
46474: PUSH
46475: LD_INT 2
46477: PUSH
46478: LD_INT 2
46480: PUSH
46481: EMPTY
46482: LIST
46483: LIST
46484: ST_TO_ADDR
// mpOilDeposits := [ ] ;
46485: LD_ADDR_EXP 12
46489: PUSH
46490: EMPTY
46491: ST_TO_ADDR
// mpSibDeposits := [ ] ;
46492: LD_ADDR_EXP 13
46496: PUSH
46497: EMPTY
46498: ST_TO_ADDR
// mpGlobalOilDeposits := [ ] ;
46499: LD_ADDR_EXP 41
46503: PUSH
46504: EMPTY
46505: ST_TO_ADDR
// mpGlobalSibDeposits := [ ] ;
46506: LD_ADDR_EXP 42
46510: PUSH
46511: EMPTY
46512: ST_TO_ADDR
// mpDepots := [ ] ;
46513: LD_ADDR_EXP 14
46517: PUSH
46518: EMPTY
46519: ST_TO_ADDR
// mpBuildings := [ ] ;
46520: LD_ADDR_EXP 17
46524: PUSH
46525: EMPTY
46526: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
46527: LD_ADDR_EXP 18
46531: PUSH
46532: EMPTY
46533: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
46534: LD_ADDR_EXP 19
46538: PUSH
46539: EMPTY
46540: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
46541: LD_ADDR_EXP 20
46545: PUSH
46546: EMPTY
46547: ST_TO_ADDR
// mpStartingResources := [ ] ;
46548: LD_ADDR_EXP 15
46552: PUSH
46553: EMPTY
46554: ST_TO_ADDR
// mpStartPos := [ ] ;
46555: LD_ADDR_EXP 21
46559: PUSH
46560: EMPTY
46561: ST_TO_ADDR
// mpBattleFlag := - 1 ;
46562: LD_ADDR_EXP 22
46566: PUSH
46567: LD_INT 1
46569: NEG
46570: ST_TO_ADDR
// mpBattleFlags := [ ] ;
46571: LD_ADDR_EXP 23
46575: PUSH
46576: EMPTY
46577: ST_TO_ADDR
// mpApemans := [ ] ;
46578: LD_ADDR_EXP 30
46582: PUSH
46583: EMPTY
46584: ST_TO_ADDR
// mpApemansArea := [ ] ;
46585: LD_ADDR_EXP 31
46589: PUSH
46590: EMPTY
46591: ST_TO_ADDR
// mpRespawn := [ ] ;
46592: LD_ADDR_EXP 33
46596: PUSH
46597: EMPTY
46598: ST_TO_ADDR
// mpKingArea := 0 ;
46599: LD_ADDR_EXP 34
46603: PUSH
46604: LD_INT 0
46606: ST_TO_ADDR
// mpPoints := [ ] ;
46607: LD_ADDR_EXP 35
46611: PUSH
46612: EMPTY
46613: ST_TO_ADDR
// mpVehicles := 0 ;
46614: LD_ADDR_EXP 36
46618: PUSH
46619: LD_INT 0
46621: ST_TO_ADDR
// mpShipments := 0 ;
46622: LD_ADDR_EXP 27
46626: PUSH
46627: LD_INT 0
46629: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
46630: LD_ADDR_EXP 40
46634: PUSH
46635: EMPTY
46636: PUSH
46637: EMPTY
46638: PUSH
46639: EMPTY
46640: PUSH
46641: EMPTY
46642: PUSH
46643: EMPTY
46644: PUSH
46645: EMPTY
46646: PUSH
46647: EMPTY
46648: PUSH
46649: EMPTY
46650: PUSH
46651: EMPTY
46652: LIST
46653: LIST
46654: LIST
46655: LIST
46656: LIST
46657: LIST
46658: LIST
46659: LIST
46660: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
46661: LD_ADDR_EXP 32
46665: PUSH
46666: EMPTY
46667: PUSH
46668: EMPTY
46669: PUSH
46670: EMPTY
46671: PUSH
46672: EMPTY
46673: PUSH
46674: EMPTY
46675: PUSH
46676: EMPTY
46677: PUSH
46678: EMPTY
46679: PUSH
46680: EMPTY
46681: PUSH
46682: EMPTY
46683: LIST
46684: LIST
46685: LIST
46686: LIST
46687: LIST
46688: LIST
46689: LIST
46690: LIST
46691: ST_TO_ADDR
// mpEmissions := 0 ;
46692: LD_ADDR_EXP 37
46696: PUSH
46697: LD_INT 0
46699: ST_TO_ADDR
// mpTeleports := 0 ;
46700: LD_ADDR_EXP 43
46704: PUSH
46705: LD_INT 0
46707: ST_TO_ADDR
// mpArtifacts := 0 ;
46708: LD_ADDR_EXP 44
46712: PUSH
46713: LD_INT 0
46715: ST_TO_ADDR
// mpPeopleSkill := 3 ;
46716: LD_ADDR_EXP 25
46720: PUSH
46721: LD_INT 3
46723: ST_TO_ADDR
// mpPeopleAmount := 15 ;
46724: LD_ADDR_EXP 24
46728: PUSH
46729: LD_INT 15
46731: ST_TO_ADDR
// mpDisplayStrings := 0 ;
46732: LD_ADDR_EXP 38
46736: PUSH
46737: LD_INT 0
46739: ST_TO_ADDR
// mpGameActive := false ;
46740: LD_ADDR_EXP 39
46744: PUSH
46745: LD_INT 0
46747: ST_TO_ADDR
// mpBlockRespThread := false ;
46748: LD_ADDR_EXP 45
46752: PUSH
46753: LD_INT 0
46755: ST_TO_ADDR
// for i := 1 to 32 do
46756: LD_ADDR_VAR 0 2
46760: PUSH
46761: DOUBLE
46762: LD_INT 1
46764: DEC
46765: ST_TO_ADDR
46766: LD_INT 32
46768: PUSH
46769: FOR_TO
46770: IFFALSE 46797
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
46772: LD_ADDR_EXP 6
46776: PUSH
46777: LD_EXP 6
46781: PPUSH
46782: LD_VAR 0 2
46786: PPUSH
46787: LD_INT 0
46789: PPUSH
46790: CALL_OW 1
46794: ST_TO_ADDR
46795: GO 46769
46797: POP
46798: POP
// end ;
46799: LD_VAR 0 1
46803: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
46804: LD_INT 0
46806: PPUSH
46807: PPUSH
46808: PPUSH
46809: PPUSH
46810: PPUSH
46811: PPUSH
46812: PPUSH
46813: PPUSH
46814: PPUSH
46815: PPUSH
46816: PPUSH
46817: PPUSH
46818: PPUSH
46819: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing , GameTypeFamine ] ;
46820: LD_ADDR_VAR 0 14
46824: PUSH
46825: LD_INT 1
46827: PUSH
46828: LD_INT 2
46830: PUSH
46831: LD_INT 3
46833: PUSH
46834: LD_INT 5
46836: PUSH
46837: EMPTY
46838: LIST
46839: LIST
46840: LIST
46841: LIST
46842: ST_TO_ADDR
// for i in gameTypes do
46843: LD_ADDR_VAR 0 2
46847: PUSH
46848: LD_VAR 0 14
46852: PUSH
46853: FOR_IN
46854: IFFALSE 46863
// disable ( i ) ;
46856: LD_VAR 0 2
46860: DISABLE_MARKED
46861: GO 46853
46863: POP
46864: POP
// if Multiplayer then
46865: LD_OWVAR 4
46869: IFFALSE 47053
// begin mpGameType := mp_game_type ;
46871: LD_ADDR_EXP 3
46875: PUSH
46876: LD_OWVAR 6
46880: ST_TO_ADDR
// your_side := mp_player_side ;
46881: LD_ADDR_OWVAR 2
46885: PUSH
46886: LD_OWVAR 7
46890: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
46891: LD_ADDR_EXP 7
46895: PUSH
46896: LD_OWVAR 17
46900: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
46901: LD_ADDR_EXP 8
46905: PUSH
46906: LD_OWVAR 15
46910: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
46911: LD_ADDR_EXP 9
46915: PUSH
46916: LD_OWVAR 16
46920: ST_TO_ADDR
// mpTeams := mp_teams ;
46921: LD_ADDR_EXP 10
46925: PUSH
46926: LD_OWVAR 12
46930: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
46931: LD_ADDR_VAR 0 2
46935: PUSH
46936: DOUBLE
46937: LD_INT 1
46939: DEC
46940: ST_TO_ADDR
46941: LD_EXP 4
46945: PPUSH
46946: CALL 5142 0 1
46950: PUSH
46951: FOR_TO
46952: IFFALSE 47028
// begin setting := mpGameSettingsKeys [ i ] ;
46954: LD_ADDR_VAR 0 12
46958: PUSH
46959: LD_EXP 4
46963: PUSH
46964: LD_VAR 0 2
46968: ARRAY
46969: ST_TO_ADDR
// if setting then
46970: LD_VAR 0 12
46974: IFFALSE 47026
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
46976: LD_ADDR_EXP 6
46980: PUSH
46981: LD_EXP 6
46985: PPUSH
46986: LD_VAR 0 2
46990: PPUSH
46991: LD_EXP 5
46995: PUSH
46996: LD_VAR 0 2
47000: ARRAY
47001: PUSH
47002: LD_VAR 0 2
47006: PUSH
47007: LD_INT 1
47009: MINUS
47010: PPUSH
47011: CALL_OW 426
47015: PUSH
47016: LD_INT 1
47018: PLUS
47019: ARRAY
47020: PPUSH
47021: CALL_OW 1
47025: ST_TO_ADDR
// end ;
47026: GO 46951
47028: POP
47029: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
47030: LD_ADDR_EXP 11
47034: PUSH
47035: LD_EXP 8
47039: PUSH
47040: LD_INT 0
47042: PUSH
47043: EMPTY
47044: LIST
47045: DIFF
47046: PUSH
47047: LD_INT 1
47049: GREATER
47050: ST_TO_ADDR
// end else
47051: GO 47053
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
47053: LD_EXP 3
47057: PPUSH
47058: CALL 836 0 1
// if Count ( mpMarkedAreas ) then
47062: LD_EXP 18
47066: PPUSH
47067: CALL 5142 0 1
47071: IFFALSE 47102
// begin for i in mpMarkedAreas do
47073: LD_ADDR_VAR 0 2
47077: PUSH
47078: LD_EXP 18
47082: PUSH
47083: FOR_IN
47084: IFFALSE 47100
// SetAreaMapShow ( i , 0 ) ;
47086: LD_VAR 0 2
47090: PPUSH
47091: LD_INT 0
47093: PPUSH
47094: CALL_OW 424
47098: GO 47083
47100: POP
47101: POP
// end ; for i := 1 to 8 do
47102: LD_ADDR_VAR 0 2
47106: PUSH
47107: DOUBLE
47108: LD_INT 1
47110: DEC
47111: ST_TO_ADDR
47112: LD_INT 8
47114: PUSH
47115: FOR_TO
47116: IFFALSE 48452
// begin if not mpSidePositions [ i ] then
47118: LD_EXP 7
47122: PUSH
47123: LD_VAR 0 2
47127: ARRAY
47128: NOT
47129: IFFALSE 47133
// continue ;
47131: GO 47115
// side := i ;
47133: LD_ADDR_VAR 0 7
47137: PUSH
47138: LD_VAR 0 2
47142: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
47143: LD_ADDR_VAR 0 9
47147: PUSH
47148: LD_EXP 9
47152: PUSH
47153: LD_VAR 0 2
47157: ARRAY
47158: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
47159: LD_ADDR_VAR 0 8
47163: PUSH
47164: LD_EXP 7
47168: PUSH
47169: LD_VAR 0 2
47173: ARRAY
47174: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
47175: LD_EXP 12
47179: PPUSH
47180: CALL 5142 0 1
47184: IFFALSE 47261
// begin for j in mpOilDeposits [ pos ] do
47186: LD_ADDR_VAR 0 3
47190: PUSH
47191: LD_EXP 12
47195: PUSH
47196: LD_VAR 0 8
47200: ARRAY
47201: PUSH
47202: FOR_IN
47203: IFFALSE 47259
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
47205: LD_VAR 0 3
47209: PUSH
47210: LD_INT 1
47212: ARRAY
47213: PPUSH
47214: LD_VAR 0 3
47218: PUSH
47219: LD_INT 2
47221: ARRAY
47222: PPUSH
47223: LD_INT 2
47225: PPUSH
47226: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
47230: LD_VAR 0 3
47234: PUSH
47235: LD_INT 1
47237: ARRAY
47238: PPUSH
47239: LD_VAR 0 3
47243: PUSH
47244: LD_INT 2
47246: ARRAY
47247: PPUSH
47248: LD_VAR 0 7
47252: PPUSH
47253: CALL_OW 441
// end ;
47257: GO 47202
47259: POP
47260: POP
// end ; if Count ( mpSibDeposits ) then
47261: LD_EXP 13
47265: PPUSH
47266: CALL 5142 0 1
47270: IFFALSE 47347
// begin for j in mpSibDeposits [ pos ] do
47272: LD_ADDR_VAR 0 3
47276: PUSH
47277: LD_EXP 13
47281: PUSH
47282: LD_VAR 0 8
47286: ARRAY
47287: PUSH
47288: FOR_IN
47289: IFFALSE 47345
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
47291: LD_VAR 0 3
47295: PUSH
47296: LD_INT 1
47298: ARRAY
47299: PPUSH
47300: LD_VAR 0 3
47304: PUSH
47305: LD_INT 2
47307: ARRAY
47308: PPUSH
47309: LD_INT 3
47311: PPUSH
47312: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
47316: LD_VAR 0 3
47320: PUSH
47321: LD_INT 1
47323: ARRAY
47324: PPUSH
47325: LD_VAR 0 3
47329: PUSH
47330: LD_INT 2
47332: ARRAY
47333: PPUSH
47334: LD_VAR 0 7
47338: PPUSH
47339: CALL_OW 441
// end ;
47343: GO 47288
47345: POP
47346: POP
// end ; InitBc ;
47347: CALL_OW 21
// InitUc ;
47351: CALL_OW 18
// uc_side := side ;
47355: LD_ADDR_OWVAR 20
47359: PUSH
47360: LD_VAR 0 7
47364: ST_TO_ADDR
// uc_nation := nation ;
47365: LD_ADDR_OWVAR 21
47369: PUSH
47370: LD_VAR 0 9
47374: ST_TO_ADDR
// if mpBattleFlag > - 1 then
47375: LD_EXP 22
47379: PUSH
47380: LD_INT 1
47382: NEG
47383: GREATER
47384: IFFALSE 47543
// begin x := mpStartPos [ pos ] [ 1 ] ;
47386: LD_ADDR_VAR 0 5
47390: PUSH
47391: LD_EXP 21
47395: PUSH
47396: LD_VAR 0 8
47400: ARRAY
47401: PUSH
47402: LD_INT 1
47404: ARRAY
47405: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
47406: LD_ADDR_VAR 0 6
47410: PUSH
47411: LD_EXP 21
47415: PUSH
47416: LD_VAR 0 8
47420: ARRAY
47421: PUSH
47422: LD_INT 2
47424: ARRAY
47425: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
47426: LD_VAR 0 5
47430: PPUSH
47431: LD_VAR 0 6
47435: PPUSH
47436: LD_INT 12
47438: PPUSH
47439: LD_INT 2
47441: PPUSH
47442: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
47446: LD_ADDR_EXP 23
47450: PUSH
47451: LD_EXP 23
47455: PPUSH
47456: LD_VAR 0 7
47460: PPUSH
47461: LD_VAR 0 7
47465: PPUSH
47466: LD_VAR 0 5
47470: PPUSH
47471: LD_VAR 0 6
47475: PPUSH
47476: LD_INT 1
47478: PUSH
47479: LD_INT 100
47481: PUSH
47482: EMPTY
47483: LIST
47484: LIST
47485: PUSH
47486: LD_INT 2
47488: PUSH
47489: LD_INT 70
47491: PUSH
47492: EMPTY
47493: LIST
47494: LIST
47495: PUSH
47496: LD_INT 3
47498: PUSH
47499: LD_INT 40
47501: PUSH
47502: EMPTY
47503: LIST
47504: LIST
47505: PUSH
47506: LD_INT 10
47508: PUSH
47509: LD_INT 25
47511: PUSH
47512: EMPTY
47513: LIST
47514: LIST
47515: PUSH
47516: LD_INT 20
47518: PUSH
47519: LD_INT 100
47521: PUSH
47522: EMPTY
47523: LIST
47524: LIST
47525: PUSH
47526: EMPTY
47527: LIST
47528: LIST
47529: LIST
47530: LIST
47531: LIST
47532: PPUSH
47533: CALL_OW 418
47537: PPUSH
47538: CALL_OW 1
47542: ST_TO_ADDR
// end ; if Count ( mpDepots ) then
47543: LD_EXP 14
47547: PPUSH
47548: CALL 5142 0 1
47552: IFFALSE 47736
// begin if mpGameType = GameTypeSurvival then
47554: LD_EXP 3
47558: PUSH
47559: LD_INT 2
47561: EQUAL
47562: IFFALSE 47582
// begin bc_level := 10 ;
47564: LD_ADDR_OWVAR 43
47568: PUSH
47569: LD_INT 10
47571: ST_TO_ADDR
// bc_type := b_warehouse ;
47572: LD_ADDR_OWVAR 42
47576: PUSH
47577: LD_INT 1
47579: ST_TO_ADDR
// end else
47580: GO 47598
// begin bc_level := 0 ;
47582: LD_ADDR_OWVAR 43
47586: PUSH
47587: LD_INT 0
47589: ST_TO_ADDR
// bc_type := b_depot ;
47590: LD_ADDR_OWVAR 42
47594: PUSH
47595: LD_INT 0
47597: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
47598: LD_ADDR_VAR 0 4
47602: PUSH
47603: LD_EXP 14
47607: PUSH
47608: LD_VAR 0 8
47612: ARRAY
47613: PUSH
47614: LD_INT 1
47616: ARRAY
47617: PPUSH
47618: LD_EXP 14
47622: PUSH
47623: LD_VAR 0 8
47627: ARRAY
47628: PUSH
47629: LD_INT 2
47631: ARRAY
47632: PPUSH
47633: LD_EXP 14
47637: PUSH
47638: LD_VAR 0 8
47642: ARRAY
47643: PUSH
47644: LD_INT 3
47646: ARRAY
47647: PPUSH
47648: CALL_OW 47
47652: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
47653: LD_VAR 0 4
47657: PPUSH
47658: LD_STRING @
47660: PUSH
47661: LD_VAR 0 7
47665: STR
47666: PPUSH
47667: CALL_OW 500
// if Count ( mpStartingResources ) then
47671: LD_EXP 15
47675: PPUSH
47676: CALL 5142 0 1
47680: IFFALSE 47734
// begin for j := 1 to mpStartingResources do
47682: LD_ADDR_VAR 0 3
47686: PUSH
47687: DOUBLE
47688: LD_INT 1
47690: DEC
47691: ST_TO_ADDR
47692: LD_EXP 15
47696: PUSH
47697: FOR_TO
47698: IFFALSE 47732
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
47700: LD_VAR 0 4
47704: PPUSH
47705: CALL_OW 274
47709: PPUSH
47710: LD_VAR 0 3
47714: PPUSH
47715: LD_EXP 15
47719: PUSH
47720: LD_VAR 0 3
47724: ARRAY
47725: PPUSH
47726: CALL_OW 277
47730: GO 47697
47732: POP
47733: POP
// end ; end else
47734: GO 47943
// if Count ( mpStartingResources ) then
47736: LD_EXP 15
47740: PPUSH
47741: CALL 5142 0 1
47745: IFFALSE 47943
// begin x := mpStartPos [ pos ] [ 1 ] ;
47747: LD_ADDR_VAR 0 5
47751: PUSH
47752: LD_EXP 21
47756: PUSH
47757: LD_VAR 0 8
47761: ARRAY
47762: PUSH
47763: LD_INT 1
47765: ARRAY
47766: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
47767: LD_ADDR_VAR 0 6
47771: PUSH
47772: LD_EXP 21
47776: PUSH
47777: LD_VAR 0 8
47781: ARRAY
47782: PUSH
47783: LD_INT 2
47785: ARRAY
47786: ST_TO_ADDR
// for j := 1 to mpStartingResources do
47787: LD_ADDR_VAR 0 3
47791: PUSH
47792: DOUBLE
47793: LD_INT 1
47795: DEC
47796: ST_TO_ADDR
47797: LD_EXP 15
47801: PUSH
47802: FOR_TO
47803: IFFALSE 47941
// begin resources := mpStartingResources [ j ] ;
47805: LD_ADDR_VAR 0 13
47809: PUSH
47810: LD_EXP 15
47814: PUSH
47815: LD_VAR 0 3
47819: ARRAY
47820: ST_TO_ADDR
// if resources = 0 then
47821: LD_VAR 0 13
47825: PUSH
47826: LD_INT 0
47828: EQUAL
47829: IFFALSE 47833
// continue ;
47831: GO 47802
// repeat if resources >= 50 then
47833: LD_VAR 0 13
47837: PUSH
47838: LD_INT 50
47840: GREATEREQUAL
47841: IFFALSE 47887
// begin CreateResourcesXYR ( j , 5 , x , y , 6 , false ) ;
47843: LD_VAR 0 3
47847: PPUSH
47848: LD_INT 5
47850: PPUSH
47851: LD_VAR 0 5
47855: PPUSH
47856: LD_VAR 0 6
47860: PPUSH
47861: LD_INT 6
47863: PPUSH
47864: LD_INT 0
47866: PPUSH
47867: CALL_OW 60
// resources := resources - 50 ;
47871: LD_ADDR_VAR 0 13
47875: PUSH
47876: LD_VAR 0 13
47880: PUSH
47881: LD_INT 50
47883: MINUS
47884: ST_TO_ADDR
// end else
47885: GO 47929
// begin CreateResourcesXYR ( j , resources div 10 , x , y , 6 , false ) ;
47887: LD_VAR 0 3
47891: PPUSH
47892: LD_VAR 0 13
47896: PUSH
47897: LD_INT 10
47899: DIV
47900: PPUSH
47901: LD_VAR 0 5
47905: PPUSH
47906: LD_VAR 0 6
47910: PPUSH
47911: LD_INT 6
47913: PPUSH
47914: LD_INT 0
47916: PPUSH
47917: CALL_OW 60
// resources := 0 ;
47921: LD_ADDR_VAR 0 13
47925: PUSH
47926: LD_INT 0
47928: ST_TO_ADDR
// end ; until resources <= 0 ;
47929: LD_VAR 0 13
47933: PUSH
47934: LD_INT 0
47936: LESSEQUAL
47937: IFFALSE 47833
// end ;
47939: GO 47802
47941: POP
47942: POP
// end ; if Count ( mpBuildings ) then
47943: LD_EXP 17
47947: PPUSH
47948: CALL 5142 0 1
47952: IFFALSE 48030
// begin for j in mpBuildings [ pos ] do
47954: LD_ADDR_VAR 0 3
47958: PUSH
47959: LD_EXP 17
47963: PUSH
47964: LD_VAR 0 8
47968: ARRAY
47969: PUSH
47970: FOR_IN
47971: IFFALSE 48028
// begin bc_level := 0 ;
47973: LD_ADDR_OWVAR 43
47977: PUSH
47978: LD_INT 0
47980: ST_TO_ADDR
// bc_type := j [ 1 ] ;
47981: LD_ADDR_OWVAR 42
47985: PUSH
47986: LD_VAR 0 3
47990: PUSH
47991: LD_INT 1
47993: ARRAY
47994: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
47995: LD_VAR 0 3
47999: PUSH
48000: LD_INT 2
48002: ARRAY
48003: PPUSH
48004: LD_VAR 0 3
48008: PUSH
48009: LD_INT 3
48011: ARRAY
48012: PPUSH
48013: LD_VAR 0 3
48017: PUSH
48018: LD_INT 4
48020: ARRAY
48021: PPUSH
48022: CALL_OW 47
// end ;
48026: GO 47970
48028: POP
48029: POP
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
48030: LD_EXP 26
48034: IFFALSE 48054
48036: PUSH
48037: LD_INT 20
48039: PPUSH
48040: LD_VAR 0 7
48044: PPUSH
48045: CALL_OW 321
48049: PUSH
48050: LD_INT 1
48052: EQUAL
48053: AND
48054: IFFALSE 48071
// SetTech ( tech_SibDet , side , state_researched ) ;
48056: LD_INT 20
48058: PPUSH
48059: LD_VAR 0 7
48063: PPUSH
48064: LD_INT 2
48066: PPUSH
48067: CALL_OW 322
// if not mpArtifacts then
48071: LD_EXP 44
48075: NOT
48076: IFFALSE 48093
// SetTech ( tech_artifact , side , state_disabled ) ;
48078: LD_INT 24
48080: PPUSH
48081: LD_VAR 0 7
48085: PPUSH
48086: LD_INT 0
48088: PPUSH
48089: CALL_OW 322
// if mpSibBomb = 1 then
48093: LD_EXP 28
48097: PUSH
48098: LD_INT 1
48100: EQUAL
48101: IFFALSE 48120
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
48103: LD_INT 25
48105: PPUSH
48106: LD_VAR 0 7
48110: PPUSH
48111: LD_INT 1
48113: PPUSH
48114: CALL_OW 322
// end else
48118: GO 48135
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
48120: LD_INT 25
48122: PPUSH
48123: LD_VAR 0 7
48127: PPUSH
48128: LD_INT 0
48130: PPUSH
48131: CALL_OW 322
// end ; if mpVehicles then
48135: LD_EXP 36
48139: IFFALSE 48238
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
48141: LD_ADDR_VAR 0 3
48145: PUSH
48146: LD_VAR 0 7
48150: PPUSH
48151: LD_VAR 0 9
48155: PPUSH
48156: LD_EXP 36
48160: PPUSH
48161: CALL 49362 0 3
48165: PUSH
48166: FOR_IN
48167: IFFALSE 48236
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
48169: LD_VAR 0 3
48173: PPUSH
48174: LD_INT 0
48176: PPUSH
48177: LD_INT 5
48179: PPUSH
48180: CALL_OW 12
48184: PPUSH
48185: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
48189: LD_VAR 0 3
48193: PPUSH
48194: LD_EXP 21
48198: PUSH
48199: LD_VAR 0 8
48203: ARRAY
48204: PUSH
48205: LD_INT 1
48207: ARRAY
48208: PPUSH
48209: LD_EXP 21
48213: PUSH
48214: LD_VAR 0 8
48218: ARRAY
48219: PUSH
48220: LD_INT 2
48222: ARRAY
48223: PPUSH
48224: LD_INT 12
48226: PPUSH
48227: LD_INT 0
48229: PPUSH
48230: CALL_OW 50
// end ;
48234: GO 48166
48236: POP
48237: POP
// end ; uc_nation := nation ;
48238: LD_ADDR_OWVAR 21
48242: PUSH
48243: LD_VAR 0 9
48247: ST_TO_ADDR
// team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
48248: LD_ADDR_VAR 0 11
48252: PUSH
48253: LD_VAR 0 7
48257: PPUSH
48258: LD_VAR 0 9
48262: PPUSH
48263: LD_EXP 24
48267: PPUSH
48268: LD_EXP 25
48272: PPUSH
48273: CALL 48864 0 4
48277: ST_TO_ADDR
// for j in team do
48278: LD_ADDR_VAR 0 3
48282: PUSH
48283: LD_VAR 0 11
48287: PUSH
48288: FOR_IN
48289: IFFALSE 48338
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
48291: LD_VAR 0 3
48295: PPUSH
48296: LD_EXP 21
48300: PUSH
48301: LD_VAR 0 8
48305: ARRAY
48306: PUSH
48307: LD_INT 1
48309: ARRAY
48310: PPUSH
48311: LD_EXP 21
48315: PUSH
48316: LD_VAR 0 8
48320: ARRAY
48321: PUSH
48322: LD_INT 2
48324: ARRAY
48325: PPUSH
48326: LD_INT 12
48328: PPUSH
48329: LD_INT 0
48331: PPUSH
48332: CALL_OW 50
48336: GO 48288
48338: POP
48339: POP
// if mpApemans then
48340: LD_EXP 30
48344: IFFALSE 48450
// begin for j := 1 to mpApemans do
48346: LD_ADDR_VAR 0 3
48350: PUSH
48351: DOUBLE
48352: LD_INT 1
48354: DEC
48355: ST_TO_ADDR
48356: LD_EXP 30
48360: PUSH
48361: FOR_TO
48362: IFFALSE 48448
// begin PrepareApeman ( - 5 ) ;
48364: LD_INT 5
48366: NEG
48367: PPUSH
48368: CALL 37201 0 1
// ape := CreateHuman ;
48372: LD_ADDR_VAR 0 10
48376: PUSH
48377: CALL_OW 44
48381: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
48382: LD_ADDR_EXP 32
48386: PUSH
48387: LD_EXP 32
48391: PPUSH
48392: LD_VAR 0 8
48396: PPUSH
48397: LD_EXP 32
48401: PUSH
48402: LD_VAR 0 8
48406: ARRAY
48407: PPUSH
48408: LD_VAR 0 10
48412: PPUSH
48413: CALL 41074 0 2
48417: PPUSH
48418: CALL_OW 1
48422: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
48423: LD_VAR 0 10
48427: PPUSH
48428: LD_EXP 31
48432: PUSH
48433: LD_VAR 0 8
48437: ARRAY
48438: PPUSH
48439: LD_INT 0
48441: PPUSH
48442: CALL_OW 49
// end ;
48446: GO 48361
48448: POP
48449: POP
// end ; end ;
48450: GO 47115
48452: POP
48453: POP
// if not mpTeamGame then
48454: LD_EXP 11
48458: NOT
48459: IFFALSE 48557
// begin for i := 1 to 8 do
48461: LD_ADDR_VAR 0 2
48465: PUSH
48466: DOUBLE
48467: LD_INT 1
48469: DEC
48470: ST_TO_ADDR
48471: LD_INT 8
48473: PUSH
48474: FOR_TO
48475: IFFALSE 48553
// for j := 1 to 8 do
48477: LD_ADDR_VAR 0 3
48481: PUSH
48482: DOUBLE
48483: LD_INT 1
48485: DEC
48486: ST_TO_ADDR
48487: LD_INT 8
48489: PUSH
48490: FOR_TO
48491: IFFALSE 48549
// if i <> j then
48493: LD_VAR 0 2
48497: PUSH
48498: LD_VAR 0 3
48502: NONEQUAL
48503: IFFALSE 48527
// SetAttitude ( i , j , att_neutral , true ) else
48505: LD_VAR 0 2
48509: PPUSH
48510: LD_VAR 0 3
48514: PPUSH
48515: LD_INT 0
48517: PPUSH
48518: LD_INT 1
48520: PPUSH
48521: CALL_OW 80
48525: GO 48547
// SetAttitude ( i , j , att_friend , true ) ;
48527: LD_VAR 0 2
48531: PPUSH
48532: LD_VAR 0 3
48536: PPUSH
48537: LD_INT 1
48539: PPUSH
48540: LD_INT 1
48542: PPUSH
48543: CALL_OW 80
48547: GO 48490
48549: POP
48550: POP
48551: GO 48474
48553: POP
48554: POP
// end else
48555: GO 48732
// begin if mpSharedVision then
48557: LD_EXP 16
48561: IFFALSE 48626
// begin for i in mpTeams do
48563: LD_ADDR_VAR 0 2
48567: PUSH
48568: LD_EXP 10
48572: PUSH
48573: FOR_IN
48574: IFFALSE 48624
// for j := 2 to i do
48576: LD_ADDR_VAR 0 3
48580: PUSH
48581: DOUBLE
48582: LD_INT 2
48584: DEC
48585: ST_TO_ADDR
48586: LD_VAR 0 2
48590: PUSH
48591: FOR_TO
48592: IFFALSE 48620
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
48594: LD_VAR 0 2
48598: PUSH
48599: LD_VAR 0 3
48603: ARRAY
48604: PPUSH
48605: LD_VAR 0 2
48609: PUSH
48610: LD_INT 1
48612: ARRAY
48613: PPUSH
48614: CALL_OW 343
48618: GO 48591
48620: POP
48621: POP
48622: GO 48573
48624: POP
48625: POP
// end ; for i := 1 to 8 do
48626: LD_ADDR_VAR 0 2
48630: PUSH
48631: DOUBLE
48632: LD_INT 1
48634: DEC
48635: ST_TO_ADDR
48636: LD_INT 8
48638: PUSH
48639: FOR_TO
48640: IFFALSE 48730
// for j := 1 to 8 do
48642: LD_ADDR_VAR 0 3
48646: PUSH
48647: DOUBLE
48648: LD_INT 1
48650: DEC
48651: ST_TO_ADDR
48652: LD_INT 8
48654: PUSH
48655: FOR_TO
48656: IFFALSE 48726
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
48658: LD_EXP 8
48662: PUSH
48663: LD_VAR 0 2
48667: ARRAY
48668: PUSH
48669: LD_EXP 8
48673: PUSH
48674: LD_VAR 0 3
48678: ARRAY
48679: EQUAL
48680: IFFALSE 48704
// SetAttitude ( i , j , att_friend , true ) else
48682: LD_VAR 0 2
48686: PPUSH
48687: LD_VAR 0 3
48691: PPUSH
48692: LD_INT 1
48694: PPUSH
48695: LD_INT 1
48697: PPUSH
48698: CALL_OW 80
48702: GO 48724
// SetAttitude ( i , j , att_enemy , true ) ;
48704: LD_VAR 0 2
48708: PPUSH
48709: LD_VAR 0 3
48713: PPUSH
48714: LD_INT 2
48716: PPUSH
48717: LD_INT 1
48719: PPUSH
48720: CALL_OW 80
48724: GO 48655
48726: POP
48727: POP
48728: GO 48639
48730: POP
48731: POP
// end ; music_nat := mpSideNations [ your_side ] ;
48732: LD_ADDR_OWVAR 71
48736: PUSH
48737: LD_EXP 9
48741: PUSH
48742: LD_OWVAR 2
48746: ARRAY
48747: ST_TO_ADDR
// if IAmSpec then
48748: CALL_OW 531
48752: IFFALSE 48793
// begin FogOff ( true ) ;
48754: LD_INT 1
48756: PPUSH
48757: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
48761: LD_EXP 29
48765: PUSH
48766: LD_INT 1
48768: ARRAY
48769: PUSH
48770: LD_INT 2
48772: DIV
48773: PPUSH
48774: LD_EXP 29
48778: PUSH
48779: LD_INT 2
48781: ARRAY
48782: PUSH
48783: LD_INT 2
48785: DIV
48786: PPUSH
48787: CALL_OW 86
// end else
48791: GO 48839
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
48793: LD_EXP 21
48797: PUSH
48798: LD_EXP 7
48802: PUSH
48803: LD_OWVAR 2
48807: ARRAY
48808: ARRAY
48809: PUSH
48810: LD_INT 1
48812: ARRAY
48813: PPUSH
48814: LD_EXP 21
48818: PUSH
48819: LD_EXP 7
48823: PUSH
48824: LD_OWVAR 2
48828: ARRAY
48829: ARRAY
48830: PUSH
48831: LD_INT 2
48833: ARRAY
48834: PPUSH
48835: CALL_OW 86
// end ; BeginBuildUp ;
48839: CALL 49895 0 0
// enable ( mpActive ) ;
48843: LD_INT 100
48845: ENABLE_MARKED
// enable ( mpGameType ) ;
48846: LD_EXP 3
48850: ENABLE_MARKED
// mpGameActive := true ;
48851: LD_ADDR_EXP 39
48855: PUSH
48856: LD_INT 1
48858: ST_TO_ADDR
// end ;
48859: LD_VAR 0 1
48863: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class ; begin
48864: LD_INT 0
48866: PPUSH
48867: PPUSH
48868: PPUSH
48869: PPUSH
// result := [ ] ;
48870: LD_ADDR_VAR 0 5
48874: PUSH
48875: EMPTY
48876: ST_TO_ADDR
// class := class_soldier ;
48877: LD_ADDR_VAR 0 8
48881: PUSH
48882: LD_INT 1
48884: ST_TO_ADDR
// uc_side := side ;
48885: LD_ADDR_OWVAR 20
48889: PUSH
48890: LD_VAR 0 1
48894: ST_TO_ADDR
// uc_nation := nation ;
48895: LD_ADDR_OWVAR 21
48899: PUSH
48900: LD_VAR 0 2
48904: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
48905: LD_ADDR_OWVAR 26
48909: PUSH
48910: LD_OWVAR 19
48914: PUSH
48915: LD_VAR 0 1
48919: ARRAY
48920: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
48921: LD_INT 1
48923: PPUSH
48924: LD_INT 2
48926: PPUSH
48927: CALL_OW 12
48931: PPUSH
48932: LD_VAR 0 8
48936: PPUSH
48937: LD_VAR 0 4
48941: PUSH
48942: LD_INT 2
48944: PLUS
48945: PPUSH
48946: CALL_OW 380
// hc_importance := 105 ;
48950: LD_ADDR_OWVAR 32
48954: PUSH
48955: LD_INT 105
48957: ST_TO_ADDR
// if Multiplayer then
48958: LD_OWVAR 4
48962: IFFALSE 49002
// begin hc_gallery := MULTIAVATARS ;
48964: LD_ADDR_OWVAR 33
48968: PUSH
48969: LD_STRING MULTIAVATARS
48971: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
48972: LD_ADDR_OWVAR 34
48976: PUSH
48977: LD_VAR 0 1
48981: PPUSH
48982: CALL_OW 525
48986: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
48987: LD_ADDR_OWVAR 27
48991: PUSH
48992: LD_VAR 0 1
48996: PPUSH
48997: CALL_OW 526
49001: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
49002: LD_ADDR_VAR 0 5
49006: PUSH
49007: LD_VAR 0 5
49011: PPUSH
49012: CALL_OW 44
49016: PPUSH
49017: CALL 41074 0 2
49021: ST_TO_ADDR
// if mpTeamPreset then
49022: LD_LOC 1
49026: IFFALSE 49122
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
49028: LD_LOC 1
49032: PUSH
49033: LD_INT 1
49035: ARRAY
49036: PPUSH
49037: LD_VAR 0 5
49041: PUSH
49042: LD_VAR 0 5
49046: ARRAY
49047: PPUSH
49048: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
49052: LD_VAR 0 5
49056: PUSH
49057: LD_VAR 0 5
49061: ARRAY
49062: PPUSH
49063: LD_INT 1
49065: PPUSH
49066: LD_LOC 1
49070: PUSH
49071: LD_INT 1
49073: ARRAY
49074: PPUSH
49075: LD_INT 1
49077: PPUSH
49078: CALL_OW 260
49082: PPUSH
49083: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
49087: LD_VAR 0 5
49091: PUSH
49092: LD_VAR 0 5
49096: ARRAY
49097: PPUSH
49098: LD_INT 2
49100: PPUSH
49101: LD_LOC 1
49105: PUSH
49106: LD_INT 1
49108: ARRAY
49109: PPUSH
49110: LD_INT 2
49112: PPUSH
49113: CALL_OW 260
49117: PPUSH
49118: CALL_OW 239
// end ; InitHc_All ( ) ;
49122: CALL_OW 584
// class := 2 ;
49126: LD_ADDR_VAR 0 8
49130: PUSH
49131: LD_INT 2
49133: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
49134: LD_ADDR_VAR 0 6
49138: PUSH
49139: DOUBLE
49140: LD_INT 1
49142: DEC
49143: ST_TO_ADDR
49144: LD_VAR 0 3
49148: PUSH
49149: LD_INT 1
49151: MINUS
49152: PUSH
49153: FOR_TO
49154: IFFALSE 49338
// begin PrepareHuman ( false , class , skill ) ;
49156: LD_INT 0
49158: PPUSH
49159: LD_VAR 0 8
49163: PPUSH
49164: LD_VAR 0 4
49168: PPUSH
49169: CALL_OW 380
// un := CreateHuman ;
49173: LD_ADDR_VAR 0 7
49177: PUSH
49178: CALL_OW 44
49182: ST_TO_ADDR
// result := Join ( result , un ) ;
49183: LD_ADDR_VAR 0 5
49187: PUSH
49188: LD_VAR 0 5
49192: PPUSH
49193: LD_VAR 0 7
49197: PPUSH
49198: CALL 41074 0 2
49202: ST_TO_ADDR
// if mpTeamPreset then
49203: LD_LOC 1
49207: IFFALSE 49303
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
49209: LD_LOC 1
49213: PUSH
49214: LD_VAR 0 6
49218: PUSH
49219: LD_INT 1
49221: PLUS
49222: ARRAY
49223: PPUSH
49224: LD_VAR 0 7
49228: PPUSH
49229: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
49233: LD_VAR 0 7
49237: PPUSH
49238: LD_INT 1
49240: PPUSH
49241: LD_LOC 1
49245: PUSH
49246: LD_VAR 0 6
49250: PUSH
49251: LD_INT 1
49253: PLUS
49254: ARRAY
49255: PPUSH
49256: LD_INT 1
49258: PPUSH
49259: CALL_OW 260
49263: PPUSH
49264: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
49268: LD_VAR 0 7
49272: PPUSH
49273: LD_INT 2
49275: PPUSH
49276: LD_LOC 1
49280: PUSH
49281: LD_VAR 0 6
49285: PUSH
49286: LD_INT 1
49288: PLUS
49289: ARRAY
49290: PPUSH
49291: LD_INT 2
49293: PPUSH
49294: CALL_OW 260
49298: PPUSH
49299: CALL_OW 239
// end ; class := Inc ( class ) ;
49303: LD_ADDR_VAR 0 8
49307: PUSH
49308: LD_VAR 0 8
49312: PPUSH
49313: CALL 42447 0 1
49317: ST_TO_ADDR
// if class = 5 then
49318: LD_VAR 0 8
49322: PUSH
49323: LD_INT 5
49325: EQUAL
49326: IFFALSE 49336
// class := 1 ;
49328: LD_ADDR_VAR 0 8
49332: PUSH
49333: LD_INT 1
49335: ST_TO_ADDR
// end ;
49336: GO 49153
49338: POP
49339: POP
// if not mpTeamPreset then
49340: LD_LOC 1
49344: NOT
49345: IFFALSE 49357
// mpTeamPreset := result ;
49347: LD_ADDR_LOC 1
49351: PUSH
49352: LD_VAR 0 5
49356: ST_TO_ADDR
// end ;
49357: LD_VAR 0 5
49361: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
49362: LD_INT 0
49364: PPUSH
49365: PPUSH
// result := [ ] ;
49366: LD_ADDR_VAR 0 4
49370: PUSH
49371: EMPTY
49372: ST_TO_ADDR
// if not vehicles then
49373: LD_VAR 0 3
49377: NOT
49378: IFFALSE 49382
// exit ;
49380: GO 49596
// for i := 1 to vehicles [ nation ] do
49382: LD_ADDR_VAR 0 5
49386: PUSH
49387: DOUBLE
49388: LD_INT 1
49390: DEC
49391: ST_TO_ADDR
49392: LD_VAR 0 3
49396: PUSH
49397: LD_VAR 0 2
49401: ARRAY
49402: PUSH
49403: FOR_TO
49404: IFFALSE 49594
// begin uc_side := side ;
49406: LD_ADDR_OWVAR 20
49410: PUSH
49411: LD_VAR 0 1
49415: ST_TO_ADDR
// if Count ( vehicles [ nation ] [ i ] ) > 4 then
49416: LD_VAR 0 3
49420: PUSH
49421: LD_VAR 0 2
49425: ARRAY
49426: PUSH
49427: LD_VAR 0 5
49431: ARRAY
49432: PPUSH
49433: CALL 5142 0 1
49437: PUSH
49438: LD_INT 4
49440: GREATER
49441: IFFALSE 49471
// uc_nation := vehicles [ nation ] [ i ] [ 5 ] else
49443: LD_ADDR_OWVAR 21
49447: PUSH
49448: LD_VAR 0 3
49452: PUSH
49453: LD_VAR 0 2
49457: ARRAY
49458: PUSH
49459: LD_VAR 0 5
49463: ARRAY
49464: PUSH
49465: LD_INT 5
49467: ARRAY
49468: ST_TO_ADDR
49469: GO 49481
// uc_nation := nation ;
49471: LD_ADDR_OWVAR 21
49475: PUSH
49476: LD_VAR 0 2
49480: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
49481: LD_VAR 0 3
49485: PUSH
49486: LD_VAR 0 2
49490: ARRAY
49491: PUSH
49492: LD_VAR 0 5
49496: ARRAY
49497: PUSH
49498: LD_INT 1
49500: ARRAY
49501: PPUSH
49502: LD_VAR 0 3
49506: PUSH
49507: LD_VAR 0 2
49511: ARRAY
49512: PUSH
49513: LD_VAR 0 5
49517: ARRAY
49518: PUSH
49519: LD_INT 2
49521: ARRAY
49522: PPUSH
49523: LD_VAR 0 3
49527: PUSH
49528: LD_VAR 0 2
49532: ARRAY
49533: PUSH
49534: LD_VAR 0 5
49538: ARRAY
49539: PUSH
49540: LD_INT 3
49542: ARRAY
49543: PPUSH
49544: LD_VAR 0 3
49548: PUSH
49549: LD_VAR 0 2
49553: ARRAY
49554: PUSH
49555: LD_VAR 0 5
49559: ARRAY
49560: PUSH
49561: LD_INT 4
49563: ARRAY
49564: PPUSH
49565: LD_INT 80
49567: PPUSH
49568: CALL 7904 0 5
// result := Join ( result , CreateVehicle ) ;
49572: LD_ADDR_VAR 0 4
49576: PUSH
49577: LD_VAR 0 4
49581: PPUSH
49582: CALL_OW 45
49586: PPUSH
49587: CALL 41074 0 2
49591: ST_TO_ADDR
// end ;
49592: GO 49403
49594: POP
49595: POP
// end ;
49596: LD_VAR 0 4
49600: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
49601: LD_INT 0
49603: PPUSH
49604: PPUSH
// for i in mpBattleFlags do
49605: LD_ADDR_VAR 0 3
49609: PUSH
49610: LD_EXP 23
49614: PUSH
49615: FOR_IN
49616: IFFALSE 49693
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
49618: LD_VAR 0 3
49622: PPUSH
49623: LD_INT 1
49625: PUSH
49626: LD_VAR 0 1
49630: PUSH
49631: EMPTY
49632: LIST
49633: LIST
49634: PUSH
49635: LD_INT 2
49637: PUSH
49638: LD_VAR 0 1
49642: PUSH
49643: LD_REAL  7.00000000000000E-0001
49646: MUL
49647: PUSH
49648: EMPTY
49649: LIST
49650: LIST
49651: PUSH
49652: LD_INT 3
49654: PUSH
49655: LD_VAR 0 1
49659: PUSH
49660: LD_REAL  4.00000000000000E-0001
49663: MUL
49664: PUSH
49665: EMPTY
49666: LIST
49667: LIST
49668: PUSH
49669: LD_INT 20
49671: PUSH
49672: LD_VAR 0 1
49676: PUSH
49677: EMPTY
49678: LIST
49679: LIST
49680: PUSH
49681: EMPTY
49682: LIST
49683: LIST
49684: LIST
49685: LIST
49686: PPUSH
49687: CALL_OW 423
49691: GO 49615
49693: POP
49694: POP
// end ;
49695: LD_VAR 0 2
49699: RET
// every 0 0$1 trigger mpActive do var i , strength ;
49700: LD_INT 100
49702: IFFALSE 49797
49704: GO 49706
49706: DISABLE
49707: LD_INT 0
49709: PPUSH
49710: PPUSH
// begin if mpBattleFlag <= 0 then
49711: LD_EXP 22
49715: PUSH
49716: LD_INT 0
49718: LESSEQUAL
49719: IFFALSE 49723
// exit ;
49721: GO 49797
// strength := 100 ;
49723: LD_ADDR_VAR 0 2
49727: PUSH
49728: LD_INT 100
49730: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
49731: LD_EXP 22
49735: PPUSH
49736: CALL_OW 67
// strength := Dec ( strength ) ;
49740: LD_ADDR_VAR 0 2
49744: PUSH
49745: LD_VAR 0 2
49749: PPUSH
49750: CALL 42469 0 1
49754: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
49755: LD_VAR 0 2
49759: PPUSH
49760: CALL 49601 0 1
// until not strength ;
49764: LD_VAR 0 2
49768: NOT
49769: IFFALSE 49731
// for i in mpBattleFlags do
49771: LD_ADDR_VAR 0 1
49775: PUSH
49776: LD_EXP 23
49780: PUSH
49781: FOR_IN
49782: IFFALSE 49795
// KillBattleFlag ( i ) ;
49784: LD_VAR 0 1
49788: PPUSH
49789: CALL_OW 419
49793: GO 49781
49795: POP
49796: POP
// end ;
49797: PPOPN 2
49799: END
// every 0 0$1 marked mpActive do var side , tmp ;
49800: GO 49802
49802: DISABLE
49803: LD_INT 0
49805: PPUSH
49806: PPUSH
// begin if mpSibBomb <= 1 then
49807: LD_EXP 28
49811: PUSH
49812: LD_INT 1
49814: LESSEQUAL
49815: IFFALSE 49819
// exit ;
49817: GO 49892
// tmp := mpSibBomb ;
49819: LD_ADDR_VAR 0 2
49823: PUSH
49824: LD_EXP 28
49828: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
49829: LD_INT 35
49831: PPUSH
49832: CALL_OW 67
// tmp := tmp - 0 0$1 ;
49836: LD_ADDR_VAR 0 2
49840: PUSH
49841: LD_VAR 0 2
49845: PUSH
49846: LD_INT 35
49848: MINUS
49849: ST_TO_ADDR
// until not tmp ;
49850: LD_VAR 0 2
49854: NOT
49855: IFFALSE 49829
// for side := 1 to 8 do
49857: LD_ADDR_VAR 0 1
49861: PUSH
49862: DOUBLE
49863: LD_INT 1
49865: DEC
49866: ST_TO_ADDR
49867: LD_INT 8
49869: PUSH
49870: FOR_TO
49871: IFFALSE 49890
// SetTech ( tech_SibFiss , side , state_enabled ) ;
49873: LD_INT 25
49875: PPUSH
49876: LD_VAR 0 1
49880: PPUSH
49881: LD_INT 1
49883: PPUSH
49884: CALL_OW 322
49888: GO 49870
49890: POP
49891: POP
// end ;
49892: PPOPN 2
49894: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
49895: LD_INT 0
49897: PPUSH
49898: PPUSH
49899: PPUSH
// mpBuildUpTimeDelay := 0 ;
49900: LD_ADDR_EXP 46
49904: PUSH
49905: LD_INT 0
49907: ST_TO_ADDR
// if not mpBuildUpTime then
49908: LD_EXP 20
49912: NOT
49913: IFFALSE 49917
// exit ;
49915: GO 50106
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
49917: LD_ADDR_EXP 46
49921: PUSH
49922: LD_INT 8400
49924: PUSH
49925: LD_INT 2100
49927: PUSH
49928: LD_EXP 20
49932: MUL
49933: PLUS
49934: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
49935: LD_ADDR_EXP 47
49939: PUSH
49940: LD_INT 1
49942: ST_TO_ADDR
// for i := 1 to 8 do
49943: LD_ADDR_VAR 0 2
49947: PUSH
49948: DOUBLE
49949: LD_INT 1
49951: DEC
49952: ST_TO_ADDR
49953: LD_INT 8
49955: PUSH
49956: FOR_TO
49957: IFFALSE 50104
// if mpSidePositions [ i ] then
49959: LD_EXP 7
49963: PUSH
49964: LD_VAR 0 2
49968: ARRAY
49969: IFFALSE 50102
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
49971: LD_EXP 19
49975: PUSH
49976: LD_EXP 7
49980: PUSH
49981: LD_VAR 0 2
49985: ARRAY
49986: ARRAY
49987: PPUSH
49988: LD_INT 5
49990: PPUSH
49991: CALL_OW 424
// for j := 1 to 8 do
49995: LD_ADDR_VAR 0 3
49999: PUSH
50000: DOUBLE
50001: LD_INT 1
50003: DEC
50004: ST_TO_ADDR
50005: LD_INT 8
50007: PUSH
50008: FOR_TO
50009: IFFALSE 50100
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
50011: LD_EXP 7
50015: PUSH
50016: LD_VAR 0 3
50020: ARRAY
50021: IFFALSE 50070
50023: PUSH
50024: LD_EXP 8
50028: PUSH
50029: LD_VAR 0 2
50033: ARRAY
50034: PUSH
50035: LD_EXP 8
50039: PUSH
50040: LD_VAR 0 3
50044: ARRAY
50045: NONEQUAL
50046: IFTRUE 50069
50048: PUSH
50049: LD_EXP 11
50053: NOT
50054: IFFALSE 50068
50056: PUSH
50057: LD_VAR 0 2
50061: PUSH
50062: LD_VAR 0 3
50066: NONEQUAL
50067: AND
50068: OR
50069: AND
50070: IFFALSE 50098
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
50072: LD_VAR 0 3
50076: PPUSH
50077: LD_EXP 19
50081: PUSH
50082: LD_EXP 7
50086: PUSH
50087: LD_VAR 0 2
50091: ARRAY
50092: ARRAY
50093: PPUSH
50094: CALL_OW 333
50098: GO 50008
50100: POP
50101: POP
// end ;
50102: GO 49956
50104: POP
50105: POP
// end ;
50106: LD_VAR 0 1
50110: RET
// function EndBuildUp ; var i , j ; begin
50111: LD_INT 0
50113: PPUSH
50114: PPUSH
50115: PPUSH
// mpBuildUpTimeActive := false ;
50116: LD_ADDR_EXP 47
50120: PUSH
50121: LD_INT 0
50123: ST_TO_ADDR
// for i := 1 to 8 do
50124: LD_ADDR_VAR 0 2
50128: PUSH
50129: DOUBLE
50130: LD_INT 1
50132: DEC
50133: ST_TO_ADDR
50134: LD_INT 8
50136: PUSH
50137: FOR_TO
50138: IFFALSE 50285
// if mpSidePositions [ i ] then
50140: LD_EXP 7
50144: PUSH
50145: LD_VAR 0 2
50149: ARRAY
50150: IFFALSE 50283
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
50152: LD_EXP 19
50156: PUSH
50157: LD_EXP 7
50161: PUSH
50162: LD_VAR 0 2
50166: ARRAY
50167: ARRAY
50168: PPUSH
50169: LD_INT 0
50171: PPUSH
50172: CALL_OW 424
// for j := 1 to 8 do
50176: LD_ADDR_VAR 0 3
50180: PUSH
50181: DOUBLE
50182: LD_INT 1
50184: DEC
50185: ST_TO_ADDR
50186: LD_INT 8
50188: PUSH
50189: FOR_TO
50190: IFFALSE 50281
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
50192: LD_EXP 7
50196: PUSH
50197: LD_VAR 0 3
50201: ARRAY
50202: IFFALSE 50251
50204: PUSH
50205: LD_EXP 8
50209: PUSH
50210: LD_VAR 0 2
50214: ARRAY
50215: PUSH
50216: LD_EXP 8
50220: PUSH
50221: LD_VAR 0 3
50225: ARRAY
50226: NONEQUAL
50227: IFTRUE 50250
50229: PUSH
50230: LD_EXP 11
50234: NOT
50235: IFFALSE 50249
50237: PUSH
50238: LD_VAR 0 2
50242: PUSH
50243: LD_VAR 0 3
50247: NONEQUAL
50248: AND
50249: OR
50250: AND
50251: IFFALSE 50279
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
50253: LD_VAR 0 3
50257: PPUSH
50258: LD_EXP 19
50262: PUSH
50263: LD_EXP 7
50267: PUSH
50268: LD_VAR 0 2
50272: ARRAY
50273: ARRAY
50274: PPUSH
50275: CALL_OW 334
50279: GO 50189
50281: POP
50282: POP
// end ;
50283: GO 50137
50285: POP
50286: POP
// end ;
50287: LD_VAR 0 1
50291: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
50292: LD_EXP 47
50296: IFFALSE 50475
50298: GO 50300
50300: DISABLE
50301: LD_INT 0
50303: PPUSH
50304: PPUSH
// begin for i := 1 to 8 do
50305: LD_ADDR_VAR 0 1
50309: PUSH
50310: DOUBLE
50311: LD_INT 1
50313: DEC
50314: ST_TO_ADDR
50315: LD_INT 8
50317: PUSH
50318: FOR_TO
50319: IFFALSE 50472
// if mpSidePositions [ i ] then
50321: LD_EXP 7
50325: PUSH
50326: LD_VAR 0 1
50330: ARRAY
50331: IFFALSE 50470
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
50333: LD_ADDR_VAR 0 2
50337: PUSH
50338: LD_EXP 19
50342: PUSH
50343: LD_EXP 7
50347: PUSH
50348: LD_VAR 0 1
50352: ARRAY
50353: ARRAY
50354: PPUSH
50355: LD_INT 2
50357: PUSH
50358: LD_INT 21
50360: PUSH
50361: LD_INT 1
50363: PUSH
50364: EMPTY
50365: LIST
50366: LIST
50367: PUSH
50368: LD_INT 21
50370: PUSH
50371: LD_INT 2
50373: PUSH
50374: EMPTY
50375: LIST
50376: LIST
50377: PUSH
50378: EMPTY
50379: LIST
50380: LIST
50381: LIST
50382: PUSH
50383: LD_INT 22
50385: PUSH
50386: LD_OWVAR 2
50390: PUSH
50391: EMPTY
50392: LIST
50393: LIST
50394: PUSH
50395: EMPTY
50396: LIST
50397: LIST
50398: PPUSH
50399: CALL_OW 70
50403: PUSH
50404: FOR_IN
50405: IFFALSE 50468
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
50407: LD_EXP 8
50411: PUSH
50412: LD_VAR 0 1
50416: ARRAY
50417: PUSH
50418: LD_EXP 8
50422: PUSH
50423: LD_OWVAR 2
50427: ARRAY
50428: NONEQUAL
50429: IFTRUE 50452
50431: PUSH
50432: LD_EXP 11
50436: NOT
50437: IFFALSE 50451
50439: PUSH
50440: LD_VAR 0 1
50444: PUSH
50445: LD_OWVAR 2
50449: NONEQUAL
50450: AND
50451: OR
50452: IFFALSE 50466
// ComMoveToArea ( un , BuildUpEscape ) ;
50454: LD_VAR 0 2
50458: PPUSH
50459: LD_INT 9
50461: PPUSH
50462: CALL_OW 113
50466: GO 50404
50468: POP
50469: POP
50470: GO 50318
50472: POP
50473: POP
// enable ;
50474: ENABLE
// end ;
50475: PPOPN 2
50477: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
50478: LD_EXP 20
50482: IFFALSE 50532
50484: GO 50486
50486: DISABLE
50487: LD_INT 0
50489: PPUSH
// begin tmp := mpBuildUpTime ;
50490: LD_ADDR_VAR 0 1
50494: PUSH
50495: LD_EXP 20
50499: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
50500: LD_INT 35
50502: PPUSH
50503: CALL_OW 67
// tmp := tmp - 0 0$1 ;
50507: LD_ADDR_VAR 0 1
50511: PUSH
50512: LD_VAR 0 1
50516: PUSH
50517: LD_INT 35
50519: MINUS
50520: ST_TO_ADDR
// until not tmp ;
50521: LD_VAR 0 1
50525: NOT
50526: IFFALSE 50500
// EndBuildUp ;
50528: CALL 50111 0 0
// end ;
50532: PPOPN 1
50534: END
// every 0 0$1 trigger mpActive marked mpWin do
50535: LD_INT 100
50537: IFFALSE 50571
50539: GO 50541
50541: DISABLE
// begin if IAmServer then
50542: CALL_OW 518
50546: IFFALSE 50555
// wait ( 0 0$3 ) ;
50548: LD_INT 105
50550: PPUSH
50551: CALL_OW 67
// if Multiplayer then
50555: LD_OWVAR 4
50559: IFFALSE 50567
// YouWinInMultiplayer else
50561: CALL_OW 106
50565: GO 50571
// YouWin ;
50567: CALL_OW 103
// end ;
50571: END
// export function HasPowerByGameType ( gameType , side ) ; begin
50572: LD_INT 0
50574: PPUSH
// result := false ;
50575: LD_ADDR_VAR 0 3
50579: PUSH
50580: LD_INT 0
50582: ST_TO_ADDR
// case gameType of GameTypeNormal , GameTypeFamine :
50583: LD_VAR 0 1
50587: PUSH
50588: LD_INT 1
50590: DOUBLE
50591: EQUAL
50592: IFTRUE 50602
50594: LD_INT 5
50596: DOUBLE
50597: EQUAL
50598: IFTRUE 50602
50600: GO 50675
50602: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
50603: LD_ADDR_VAR 0 3
50607: PUSH
50608: LD_INT 22
50610: PUSH
50611: LD_VAR 0 2
50615: PUSH
50616: EMPTY
50617: LIST
50618: LIST
50619: PUSH
50620: LD_INT 2
50622: PUSH
50623: LD_INT 21
50625: PUSH
50626: LD_INT 1
50628: PUSH
50629: EMPTY
50630: LIST
50631: LIST
50632: PUSH
50633: LD_INT 33
50635: PUSH
50636: LD_INT 3
50638: PUSH
50639: EMPTY
50640: LIST
50641: LIST
50642: PUSH
50643: LD_INT 33
50645: PUSH
50646: LD_INT 5
50648: PUSH
50649: EMPTY
50650: LIST
50651: LIST
50652: PUSH
50653: EMPTY
50654: LIST
50655: LIST
50656: LIST
50657: LIST
50658: PUSH
50659: EMPTY
50660: LIST
50661: LIST
50662: PPUSH
50663: CALL_OW 69
50667: PPUSH
50668: CALL 5142 0 1
50672: ST_TO_ADDR
// end ; GameTypeSurvival :
50673: GO 50914
50675: LD_INT 2
50677: DOUBLE
50678: EQUAL
50679: IFTRUE 50683
50681: GO 50813
50683: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
50684: LD_ADDR_VAR 0 3
50688: PUSH
50689: LD_INT 22
50691: PUSH
50692: LD_VAR 0 2
50696: PUSH
50697: EMPTY
50698: LIST
50699: LIST
50700: PUSH
50701: LD_INT 2
50703: PUSH
50704: LD_INT 30
50706: PUSH
50707: LD_INT 0
50709: PUSH
50710: EMPTY
50711: LIST
50712: LIST
50713: PUSH
50714: LD_INT 30
50716: PUSH
50717: LD_INT 1
50719: PUSH
50720: EMPTY
50721: LIST
50722: LIST
50723: PUSH
50724: EMPTY
50725: LIST
50726: LIST
50727: LIST
50728: PUSH
50729: EMPTY
50730: LIST
50731: LIST
50732: PPUSH
50733: CALL_OW 69
50737: PPUSH
50738: CALL 5142 0 1
50742: IFFALSE 50810
50744: PUSH
50745: LD_INT 22
50747: PUSH
50748: LD_VAR 0 2
50752: PUSH
50753: EMPTY
50754: LIST
50755: LIST
50756: PUSH
50757: LD_INT 2
50759: PUSH
50760: LD_INT 21
50762: PUSH
50763: LD_INT 1
50765: PUSH
50766: EMPTY
50767: LIST
50768: LIST
50769: PUSH
50770: LD_INT 33
50772: PUSH
50773: LD_INT 3
50775: PUSH
50776: EMPTY
50777: LIST
50778: LIST
50779: PUSH
50780: LD_INT 33
50782: PUSH
50783: LD_INT 5
50785: PUSH
50786: EMPTY
50787: LIST
50788: LIST
50789: PUSH
50790: EMPTY
50791: LIST
50792: LIST
50793: LIST
50794: LIST
50795: PUSH
50796: EMPTY
50797: LIST
50798: LIST
50799: PPUSH
50800: CALL_OW 69
50804: PPUSH
50805: CALL 5142 0 1
50809: AND
50810: ST_TO_ADDR
// end ; GameTypeKing :
50811: GO 50914
50813: LD_INT 3
50815: DOUBLE
50816: EQUAL
50817: IFTRUE 50821
50819: GO 50913
50821: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
50822: LD_ADDR_VAR 0 3
50826: PUSH
50827: LD_INT 22
50829: PUSH
50830: LD_VAR 0 2
50834: PUSH
50835: EMPTY
50836: LIST
50837: LIST
50838: PUSH
50839: LD_INT 2
50841: PUSH
50842: LD_INT 21
50844: PUSH
50845: LD_INT 1
50847: PUSH
50848: EMPTY
50849: LIST
50850: LIST
50851: PUSH
50852: LD_INT 33
50854: PUSH
50855: LD_INT 3
50857: PUSH
50858: EMPTY
50859: LIST
50860: LIST
50861: PUSH
50862: LD_INT 33
50864: PUSH
50865: LD_INT 5
50867: PUSH
50868: EMPTY
50869: LIST
50870: LIST
50871: PUSH
50872: EMPTY
50873: LIST
50874: LIST
50875: LIST
50876: LIST
50877: PUSH
50878: EMPTY
50879: LIST
50880: LIST
50881: PPUSH
50882: CALL_OW 69
50886: PPUSH
50887: CALL 5142 0 1
50891: IFFALSE 50910
50893: PUSH
50894: LD_VAR 0 2
50898: PPUSH
50899: CALL 54735 0 1
50903: PUSH
50904: LD_EXP 35
50908: LESS
50909: AND
50910: ST_TO_ADDR
// end ; end ;
50911: GO 50914
50913: POP
// end ;
50914: LD_VAR 0 3
50918: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
50919: LD_INT 100
50921: IFFALSE 51151
50923: GO 50925
50925: DISABLE
50926: LD_INT 0
50928: PPUSH
50929: PPUSH
// begin if Multiplayer then
50930: LD_OWVAR 4
50934: IFFALSE 50942
// SetPlayerSpectator ( ) else
50936: CALL_OW 572
50940: GO 50951
// FogOff ( your_side ) ;
50942: LD_OWVAR 2
50946: PPUSH
50947: CALL_OW 344
// repeat gameIsOn := false ;
50951: LD_ADDR_VAR 0 1
50955: PUSH
50956: LD_INT 0
50958: ST_TO_ADDR
// for i := 1 to 8 do
50959: LD_ADDR_VAR 0 2
50963: PUSH
50964: DOUBLE
50965: LD_INT 1
50967: DEC
50968: ST_TO_ADDR
50969: LD_INT 8
50971: PUSH
50972: FOR_TO
50973: IFFALSE 51103
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
50975: LD_EXP 7
50979: PUSH
50980: LD_VAR 0 2
50984: ARRAY
50985: IFFALSE 50998
50987: PUSH
50988: LD_VAR 0 2
50992: PPUSH
50993: CALL_OW 108
50997: AND
50998: IFFALSE 51012
51000: PUSH
51001: LD_VAR 0 2
51005: PUSH
51006: LD_OWVAR 2
51010: NONEQUAL
51011: AND
51012: IFFALSE 51101
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
51014: LD_EXP 8
51018: PUSH
51019: LD_VAR 0 2
51023: ARRAY
51024: NOT
51025: IFTRUE 51073
51027: PUSH
51028: LD_EXP 8
51032: PUSH
51033: LD_VAR 0 2
51037: ARRAY
51038: PUSH
51039: LD_EXP 8
51043: PUSH
51044: LD_OWVAR 2
51048: ARRAY
51049: NONEQUAL
51050: IFFALSE 51072
51052: PUSH
51053: LD_OWVAR 2
51057: PPUSH
51058: LD_VAR 0 2
51062: PPUSH
51063: CALL_OW 81
51067: PUSH
51068: LD_INT 1
51070: NONEQUAL
51071: AND
51072: OR
51073: IFFALSE 51101
// if HasPowerByGameType ( mpGameType , i ) then
51075: LD_EXP 3
51079: PPUSH
51080: LD_VAR 0 2
51084: PPUSH
51085: CALL 50572 0 2
51089: IFFALSE 51101
// begin gameIsOn := true ;
51091: LD_ADDR_VAR 0 1
51095: PUSH
51096: LD_INT 1
51098: ST_TO_ADDR
// break ;
51099: GO 51103
// end ;
51101: GO 50972
51103: POP
51104: POP
// wait ( 100 ) ;
51105: LD_INT 100
51107: PPUSH
51108: CALL_OW 67
// until not gameIsOn ;
51112: LD_VAR 0 1
51116: NOT
51117: IFFALSE 50951
// if IAmServer then
51119: CALL_OW 518
51123: IFFALSE 51132
// wait ( 0 0$3 ) ;
51125: LD_INT 105
51127: PPUSH
51128: CALL_OW 67
// if Multiplayer then
51132: LD_OWVAR 4
51136: IFFALSE 51144
// YouLostInMultiplayer else
51138: CALL_OW 107
51142: GO 51151
// YouLost (  ) ;
51144: LD_STRING 
51146: PPUSH
51147: CALL_OW 104
// end ;
51151: PPOPN 2
51153: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
51154: LD_EXP 33
51158: IFFALSE 51542
51160: GO 51162
51162: DISABLE
51163: LD_INT 0
51165: PPUSH
51166: PPUSH
51167: PPUSH
51168: PPUSH
51169: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
51170: LD_ADDR_VAR 0 5
51174: PUSH
51175: LD_INT 1
51177: PUSH
51178: LD_INT 2
51180: PUSH
51181: LD_INT 3
51183: PUSH
51184: LD_INT 4
51186: PUSH
51187: LD_INT 5
51189: PUSH
51190: LD_INT 6
51192: PUSH
51193: LD_INT 7
51195: PUSH
51196: LD_INT 8
51198: PUSH
51199: EMPTY
51200: LIST
51201: LIST
51202: LIST
51203: LIST
51204: LIST
51205: LIST
51206: LIST
51207: LIST
51208: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
51209: LD_INT 350
51211: PPUSH
51212: CALL_OW 67
// for i := 1 to 8 do
51216: LD_ADDR_VAR 0 1
51220: PUSH
51221: DOUBLE
51222: LD_INT 1
51224: DEC
51225: ST_TO_ADDR
51226: LD_INT 8
51228: PUSH
51229: FOR_TO
51230: IFFALSE 51512
// begin j := sides [ i ] ;
51232: LD_ADDR_VAR 0 2
51236: PUSH
51237: LD_VAR 0 5
51241: PUSH
51242: LD_VAR 0 1
51246: ARRAY
51247: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
51248: LD_EXP 40
51252: PUSH
51253: LD_VAR 0 2
51257: ARRAY
51258: PPUSH
51259: CALL 5142 0 1
51263: IFFALSE 51276
51265: PUSH
51266: LD_VAR 0 2
51270: PPUSH
51271: CALL_OW 108
51275: AND
51276: IFFALSE 51294
51278: PUSH
51279: LD_EXP 3
51283: PPUSH
51284: LD_VAR 0 2
51288: PPUSH
51289: CALL 50572 0 2
51293: AND
51294: IFFALSE 51510
// begin wait ( mpRespawn div 3 ) ;
51296: LD_EXP 33
51300: PUSH
51301: LD_INT 3
51303: DIV
51304: PPUSH
51305: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
51309: LD_ADDR_VAR 0 3
51313: PUSH
51314: LD_INT 22
51316: PUSH
51317: LD_VAR 0 2
51321: PUSH
51322: EMPTY
51323: LIST
51324: LIST
51325: PUSH
51326: LD_INT 50
51328: PUSH
51329: EMPTY
51330: LIST
51331: PUSH
51332: LD_INT 2
51334: PUSH
51335: LD_INT 30
51337: PUSH
51338: LD_INT 0
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: PUSH
51345: LD_INT 30
51347: PUSH
51348: LD_INT 1
51350: PUSH
51351: EMPTY
51352: LIST
51353: LIST
51354: PUSH
51355: EMPTY
51356: LIST
51357: LIST
51358: LIST
51359: PUSH
51360: EMPTY
51361: LIST
51362: LIST
51363: LIST
51364: PPUSH
51365: CALL_OW 69
51369: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
51370: LD_VAR 0 3
51374: NOT
51375: IFTRUE 51389
51377: PUSH
51378: LD_VAR 0 2
51382: PPUSH
51383: CALL_OW 108
51387: NOT
51388: OR
51389: IFTRUE 51408
51391: PUSH
51392: LD_EXP 3
51396: PPUSH
51397: LD_VAR 0 2
51401: PPUSH
51402: CALL 50572 0 2
51406: NOT
51407: OR
51408: IFFALSE 51412
// continue ;
51410: GO 51229
// spawn := tmp [ 1 ] ;
51412: LD_ADDR_VAR 0 4
51416: PUSH
51417: LD_VAR 0 3
51421: PUSH
51422: LD_INT 1
51424: ARRAY
51425: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
51426: LD_EXP 40
51430: PUSH
51431: LD_VAR 0 2
51435: ARRAY
51436: PUSH
51437: LD_INT 1
51439: ARRAY
51440: PPUSH
51441: LD_VAR 0 4
51445: PPUSH
51446: CALL_OW 250
51450: PPUSH
51451: LD_VAR 0 4
51455: PPUSH
51456: CALL_OW 251
51460: PPUSH
51461: LD_INT 32
51463: PPUSH
51464: LD_INT 1
51466: PPUSH
51467: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
51471: LD_ADDR_EXP 40
51475: PUSH
51476: LD_EXP 40
51480: PPUSH
51481: LD_VAR 0 2
51485: PPUSH
51486: LD_EXP 40
51490: PUSH
51491: LD_VAR 0 2
51495: ARRAY
51496: PPUSH
51497: LD_INT 1
51499: PPUSH
51500: CALL_OW 3
51504: PPUSH
51505: CALL_OW 1
51509: ST_TO_ADDR
// end ; end ;
51510: GO 51229
51512: POP
51513: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
51514: LD_ADDR_VAR 0 5
51518: PUSH
51519: LD_VAR 0 5
51523: PPUSH
51524: LD_INT 1
51526: PPUSH
51527: LD_INT 8
51529: PPUSH
51530: LD_INT 1
51532: PPUSH
51533: CALL 7434 0 4
51537: ST_TO_ADDR
// until false ;
51538: LD_INT 0
51540: IFFALSE 51209
// end ;
51542: PPOPN 5
51544: END
// every 0 0$1 marked mpActive do
51545: GO 51547
51547: DISABLE
// begin enable ;
51548: ENABLE
// if not mpDisplayStrings then
51549: LD_EXP 38
51553: NOT
51554: IFFALSE 51565
// begin display_strings := [ ] ;
51556: LD_ADDR_OWVAR 47
51560: PUSH
51561: EMPTY
51562: ST_TO_ADDR
// exit ;
51563: GO 51575
// end ; display_strings := mpDisplayStrings ;
51565: LD_ADDR_OWVAR 47
51569: PUSH
51570: LD_EXP 38
51574: ST_TO_ADDR
// end ; end_of_file
51575: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
51576: LD_INT 0
51578: PPUSH
51579: PPUSH
51580: PPUSH
51581: PPUSH
51582: PPUSH
51583: PPUSH
51584: PPUSH
51585: PPUSH
51586: PPUSH
// if GetType ( un ) = unit_vehicle then
51587: LD_VAR 0 1
51591: PPUSH
51592: CALL_OW 247
51596: PUSH
51597: LD_INT 2
51599: EQUAL
51600: IFFALSE 51604
// exit ;
51602: GO 52242
// side := GetSide ( un ) ;
51604: LD_ADDR_VAR 0 9
51608: PUSH
51609: LD_VAR 0 1
51613: PPUSH
51614: CALL_OW 255
51618: ST_TO_ADDR
// if mpGameType = GameTypeSurvival then
51619: LD_EXP 3
51623: PUSH
51624: LD_INT 2
51626: EQUAL
51627: IFFALSE 51703
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
51629: LD_VAR 0 1
51633: PPUSH
51634: CALL_OW 266
51638: PUSH
51639: LD_INT 0
51641: PUSH
51642: LD_INT 1
51644: PUSH
51645: EMPTY
51646: LIST
51647: LIST
51648: IN
51649: IFFALSE 51703
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) do
51651: LD_ADDR_VAR 0 3
51655: PUSH
51656: LD_INT 22
51658: PUSH
51659: LD_VAR 0 9
51663: PUSH
51664: EMPTY
51665: LIST
51666: LIST
51667: PUSH
51668: LD_INT 21
51670: PUSH
51671: LD_INT 1
51673: PUSH
51674: EMPTY
51675: LIST
51676: LIST
51677: PUSH
51678: EMPTY
51679: LIST
51680: LIST
51681: PPUSH
51682: CALL_OW 69
51686: PUSH
51687: FOR_IN
51688: IFFALSE 51701
// KillUnit ( i ) ;
51690: LD_VAR 0 3
51694: PPUSH
51695: CALL_OW 66
51699: GO 51687
51701: POP
51702: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
51703: LD_VAR 0 1
51707: PPUSH
51708: CALL_OW 257
51712: PUSH
51713: LD_INT 12
51715: PUSH
51716: LD_INT 17
51718: PUSH
51719: LD_INT 15
51721: PUSH
51722: LD_INT 16
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: LIST
51729: LIST
51730: IN
51731: IFTRUE 51748
51733: PUSH
51734: LD_VAR 0 1
51738: PPUSH
51739: CALL_OW 263
51743: PUSH
51744: LD_INT 5
51746: EQUAL
51747: OR
51748: IFFALSE 51967
// begin tag := 0 ;
51750: LD_ADDR_VAR 0 5
51754: PUSH
51755: LD_INT 0
51757: ST_TO_ADDR
// for i := 1 to 8 do
51758: LD_ADDR_VAR 0 3
51762: PUSH
51763: DOUBLE
51764: LD_INT 1
51766: DEC
51767: ST_TO_ADDR
51768: LD_INT 8
51770: PUSH
51771: FOR_TO
51772: IFFALSE 51806
// if un in mpApePosIndex [ i ] then
51774: LD_VAR 0 1
51778: PUSH
51779: LD_EXP 32
51783: PUSH
51784: LD_VAR 0 3
51788: ARRAY
51789: IN
51790: IFFALSE 51804
// begin tag := i ;
51792: LD_ADDR_VAR 0 5
51796: PUSH
51797: LD_VAR 0 3
51801: ST_TO_ADDR
// break ;
51802: GO 51806
// end ;
51804: GO 51771
51806: POP
51807: POP
// if not tag then
51808: LD_VAR 0 5
51812: NOT
51813: IFFALSE 51817
// exit ;
51815: GO 52242
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
51817: LD_ADDR_VAR 0 7
51821: PUSH
51822: LD_EXP 31
51826: PUSH
51827: LD_EXP 7
51831: PUSH
51832: LD_VAR 0 5
51836: ARRAY
51837: ARRAY
51838: ST_TO_ADDR
// if not area then
51839: LD_VAR 0 7
51843: NOT
51844: IFFALSE 51848
// exit ;
51846: GO 52242
// wait ( 4 4$00 ) ;
51848: LD_INT 8400
51850: PPUSH
51851: CALL_OW 67
// repeat wait ( 10 ) ;
51855: LD_INT 10
51857: PPUSH
51858: CALL_OW 67
// until not mpBlockRespThread ;
51862: LD_EXP 45
51866: NOT
51867: IFFALSE 51855
// mpBlockRespThread := true ;
51869: LD_ADDR_EXP 45
51873: PUSH
51874: LD_INT 1
51876: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
51877: LD_INT 0
51879: PPUSH
51880: CALL 37201 0 1
// ape := CreateHuman ;
51884: LD_ADDR_VAR 0 4
51888: PUSH
51889: CALL_OW 44
51893: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
51894: LD_ADDR_EXP 32
51898: PUSH
51899: LD_EXP 32
51903: PPUSH
51904: LD_VAR 0 5
51908: PPUSH
51909: LD_EXP 32
51913: PUSH
51914: LD_VAR 0 5
51918: ARRAY
51919: PPUSH
51920: LD_VAR 0 4
51924: PPUSH
51925: CALL 41074 0 2
51929: PPUSH
51930: CALL_OW 1
51934: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
51935: LD_VAR 0 4
51939: PPUSH
51940: LD_VAR 0 7
51944: PPUSH
51945: LD_INT 0
51947: PPUSH
51948: CALL_OW 49
// wait ( 10 ) ;
51952: LD_INT 10
51954: PPUSH
51955: CALL_OW 67
// mpBlockRespThread := false ;
51959: LD_ADDR_EXP 45
51963: PUSH
51964: LD_INT 0
51966: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
51967: LD_VAR 0 1
51971: PPUSH
51972: CALL_OW 247
51976: PUSH
51977: LD_INT 1
51979: EQUAL
51980: IFFALSE 51997
51982: PUSH
51983: LD_VAR 0 1
51987: PPUSH
51988: CALL_OW 248
51992: PUSH
51993: LD_INT 0
51995: GREATER
51996: AND
51997: IFFALSE 52242
// begin if not mpRespawn then
51999: LD_EXP 33
52003: NOT
52004: IFFALSE 52008
// exit ;
52006: GO 52242
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
52008: LD_VAR 0 9
52012: PPUSH
52013: CALL_OW 108
52017: NOT
52018: IFFALSE 52037
52020: PUSH
52021: LD_EXP 3
52025: PPUSH
52026: LD_VAR 0 9
52030: PPUSH
52031: CALL 50572 0 2
52035: NOT
52036: AND
52037: IFFALSE 52041
// exit ;
52039: GO 52242
// side := GetSide ( un ) ;
52041: LD_ADDR_VAR 0 9
52045: PUSH
52046: LD_VAR 0 1
52050: PPUSH
52051: CALL_OW 255
52055: ST_TO_ADDR
// nation := GetNation ( un ) ;
52056: LD_ADDR_VAR 0 8
52060: PUSH
52061: LD_VAR 0 1
52065: PPUSH
52066: CALL_OW 248
52070: ST_TO_ADDR
// class := GetClass ( un ) ;
52071: LD_ADDR_VAR 0 6
52075: PUSH
52076: LD_VAR 0 1
52080: PPUSH
52081: CALL_OW 257
52085: ST_TO_ADDR
// if class > 4 then
52086: LD_VAR 0 6
52090: PUSH
52091: LD_INT 4
52093: GREATER
52094: IFFALSE 52104
// class := 1 ;
52096: LD_ADDR_VAR 0 6
52100: PUSH
52101: LD_INT 1
52103: ST_TO_ADDR
// repeat wait ( 10 ) ;
52104: LD_INT 10
52106: PPUSH
52107: CALL_OW 67
// until not mpBlockRespThread ;
52111: LD_EXP 45
52115: NOT
52116: IFFALSE 52104
// mpBlockRespThread := true ;
52118: LD_ADDR_EXP 45
52122: PUSH
52123: LD_INT 1
52125: ST_TO_ADDR
// uc_side := side ;
52126: LD_ADDR_OWVAR 20
52130: PUSH
52131: LD_VAR 0 9
52135: ST_TO_ADDR
// uc_nation := nation ;
52136: LD_ADDR_OWVAR 21
52140: PUSH
52141: LD_VAR 0 8
52145: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
52146: LD_INT 0
52148: PPUSH
52149: LD_VAR 0 6
52153: PPUSH
52154: LD_INT 2
52156: PPUSH
52157: CALL_OW 380
// un := CreateHuman ;
52161: LD_ADDR_VAR 0 1
52165: PUSH
52166: CALL_OW 44
52170: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
52171: LD_ADDR_EXP 40
52175: PUSH
52176: LD_EXP 40
52180: PPUSH
52181: LD_VAR 0 9
52185: PPUSH
52186: LD_EXP 40
52190: PUSH
52191: LD_VAR 0 9
52195: ARRAY
52196: PPUSH
52197: LD_EXP 40
52201: PUSH
52202: LD_VAR 0 9
52206: ARRAY
52207: PUSH
52208: LD_INT 1
52210: PLUS
52211: PPUSH
52212: LD_VAR 0 1
52216: PPUSH
52217: CALL_OW 1
52221: PPUSH
52222: CALL_OW 1
52226: ST_TO_ADDR
// wait ( 10 ) ;
52227: LD_INT 10
52229: PPUSH
52230: CALL_OW 67
// mpBlockRespThread := false ;
52234: LD_ADDR_EXP 45
52238: PUSH
52239: LD_INT 0
52241: ST_TO_ADDR
// end ; end ;
52242: LD_VAR 0 2
52246: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
52247: LD_INT 0
52249: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
52250: LD_VAR 0 1
52254: PPUSH
52255: CALL_OW 266
52259: PUSH
52260: LD_INT 0
52262: PUSH
52263: LD_INT 1
52265: PUSH
52266: EMPTY
52267: LIST
52268: LIST
52269: IN
52270: IFFALSE 52295
// SetBName ( building , @ & GetSide ( building ) ) ;
52272: LD_VAR 0 1
52276: PPUSH
52277: LD_STRING @
52279: PUSH
52280: LD_VAR 0 1
52284: PPUSH
52285: CALL_OW 255
52289: STR
52290: PPUSH
52291: CALL_OW 500
// end ;
52295: LD_VAR 0 2
52299: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
52300: LD_INT 0
52302: PPUSH
52303: PPUSH
// if mpGameType = GameTypeSurvival and GetBType ( building ) in [ b_depot , b_warehouse ] then
52304: LD_EXP 3
52308: PUSH
52309: LD_INT 2
52311: EQUAL
52312: IFFALSE 52336
52314: PUSH
52315: LD_VAR 0 1
52319: PPUSH
52320: CALL_OW 266
52324: PUSH
52325: LD_INT 0
52327: PUSH
52328: LD_INT 1
52330: PUSH
52331: EMPTY
52332: LIST
52333: LIST
52334: IN
52335: AND
52336: IFFALSE 52415
// begin SetSide ( building , oldSide ) ;
52338: LD_VAR 0 1
52342: PPUSH
52343: LD_VAR 0 2
52347: PPUSH
52348: CALL_OW 235
// KillUnit ( building ) ;
52352: LD_VAR 0 1
52356: PPUSH
52357: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
52361: LD_ADDR_VAR 0 5
52365: PUSH
52366: LD_INT 22
52368: PUSH
52369: LD_VAR 0 2
52373: PUSH
52374: EMPTY
52375: LIST
52376: LIST
52377: PUSH
52378: LD_INT 21
52380: PUSH
52381: LD_INT 1
52383: PUSH
52384: EMPTY
52385: LIST
52386: LIST
52387: PUSH
52388: EMPTY
52389: LIST
52390: LIST
52391: PPUSH
52392: CALL_OW 69
52396: PUSH
52397: FOR_IN
52398: IFFALSE 52411
// KillUnit ( i ) ;
52400: LD_VAR 0 5
52404: PPUSH
52405: CALL_OW 66
52409: GO 52397
52411: POP
52412: POP
// exit ;
52413: GO 52460
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
52415: LD_VAR 0 1
52419: PPUSH
52420: CALL_OW 266
52424: PUSH
52425: LD_INT 0
52427: PUSH
52428: LD_INT 1
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: IN
52435: IFFALSE 52460
// SetBName ( building , @ & GetSide ( building ) ) ;
52437: LD_VAR 0 1
52441: PPUSH
52442: LD_STRING @
52444: PUSH
52445: LD_VAR 0 1
52449: PPUSH
52450: CALL_OW 255
52454: STR
52455: PPUSH
52456: CALL_OW 500
// end ;
52460: LD_VAR 0 4
52464: RET
// export function Multiplayer_OilExtracted ( building , side , base , amount ) ; var i , value ; begin
52465: LD_INT 0
52467: PPUSH
52468: PPUSH
52469: PPUSH
// if mpGameType <> GameTypeFamine then
52470: LD_EXP 3
52474: PUSH
52475: LD_INT 5
52477: NONEQUAL
52478: IFFALSE 52482
// exit ;
52480: GO 52696
// for i := 1 to mpGlobalOilDeposits do
52482: LD_ADDR_VAR 0 6
52486: PUSH
52487: DOUBLE
52488: LD_INT 1
52490: DEC
52491: ST_TO_ADDR
52492: LD_EXP 41
52496: PUSH
52497: FOR_TO
52498: IFFALSE 52694
// begin if HexInfo ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) = building then
52500: LD_EXP 41
52504: PUSH
52505: LD_VAR 0 6
52509: ARRAY
52510: PUSH
52511: LD_INT 1
52513: ARRAY
52514: PPUSH
52515: LD_EXP 41
52519: PUSH
52520: LD_VAR 0 6
52524: ARRAY
52525: PUSH
52526: LD_INT 2
52528: ARRAY
52529: PPUSH
52530: CALL_OW 428
52534: PUSH
52535: LD_VAR 0 1
52539: EQUAL
52540: IFFALSE 52692
// begin value := mpGlobalOilDeposits [ i ] [ 3 ] ;
52542: LD_ADDR_VAR 0 7
52546: PUSH
52547: LD_EXP 41
52551: PUSH
52552: LD_VAR 0 6
52556: ARRAY
52557: PUSH
52558: LD_INT 3
52560: ARRAY
52561: ST_TO_ADDR
// value := Dec ( value ) ;
52562: LD_ADDR_VAR 0 7
52566: PUSH
52567: LD_VAR 0 7
52571: PPUSH
52572: CALL 42469 0 1
52576: ST_TO_ADDR
// mpGlobalOilDeposits := Replace ( mpGlobalOilDeposits , i , Replace ( mpGlobalOilDeposits [ i ] , 3 , value ) ) ;
52577: LD_ADDR_EXP 41
52581: PUSH
52582: LD_EXP 41
52586: PPUSH
52587: LD_VAR 0 6
52591: PPUSH
52592: LD_EXP 41
52596: PUSH
52597: LD_VAR 0 6
52601: ARRAY
52602: PPUSH
52603: LD_INT 3
52605: PPUSH
52606: LD_VAR 0 7
52610: PPUSH
52611: CALL_OW 1
52615: PPUSH
52616: CALL_OW 1
52620: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
52621: LD_VAR 0 1
52625: PPUSH
52626: LD_VAR 0 7
52630: PPUSH
52631: CALL_OW 505
// if value = 0 then
52635: LD_VAR 0 7
52639: PUSH
52640: LD_INT 0
52642: EQUAL
52643: IFFALSE 52692
// begin RemoveDepositXY ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) ;
52645: LD_EXP 41
52649: PUSH
52650: LD_VAR 0 6
52654: ARRAY
52655: PUSH
52656: LD_INT 1
52658: ARRAY
52659: PPUSH
52660: LD_EXP 41
52664: PUSH
52665: LD_VAR 0 6
52669: ARRAY
52670: PUSH
52671: LD_INT 2
52673: ARRAY
52674: PPUSH
52675: CALL_OW 63
// KillUnit ( building ) ;
52679: LD_VAR 0 1
52683: PPUSH
52684: CALL_OW 66
// exit ;
52688: POP
52689: POP
52690: GO 52696
// end ; end ; end ;
52692: GO 52497
52694: POP
52695: POP
// end ;
52696: LD_VAR 0 5
52700: RET
// export function Multiplayer_SibExtracted ( building , side , base , amount ) ; var i , value ; begin
52701: LD_INT 0
52703: PPUSH
52704: PPUSH
52705: PPUSH
// if mpGameType <> GameTypeFamine then
52706: LD_EXP 3
52710: PUSH
52711: LD_INT 5
52713: NONEQUAL
52714: IFFALSE 52718
// exit ;
52716: GO 52932
// for i := 1 to mpGlobalSibDeposits do
52718: LD_ADDR_VAR 0 6
52722: PUSH
52723: DOUBLE
52724: LD_INT 1
52726: DEC
52727: ST_TO_ADDR
52728: LD_EXP 42
52732: PUSH
52733: FOR_TO
52734: IFFALSE 52930
// begin if HexInfo ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) = building then
52736: LD_EXP 42
52740: PUSH
52741: LD_VAR 0 6
52745: ARRAY
52746: PUSH
52747: LD_INT 1
52749: ARRAY
52750: PPUSH
52751: LD_EXP 42
52755: PUSH
52756: LD_VAR 0 6
52760: ARRAY
52761: PUSH
52762: LD_INT 2
52764: ARRAY
52765: PPUSH
52766: CALL_OW 428
52770: PUSH
52771: LD_VAR 0 1
52775: EQUAL
52776: IFFALSE 52928
// begin value := mpGlobalSibDeposits [ i ] [ 3 ] ;
52778: LD_ADDR_VAR 0 7
52782: PUSH
52783: LD_EXP 42
52787: PUSH
52788: LD_VAR 0 6
52792: ARRAY
52793: PUSH
52794: LD_INT 3
52796: ARRAY
52797: ST_TO_ADDR
// value := Dec ( value ) ;
52798: LD_ADDR_VAR 0 7
52802: PUSH
52803: LD_VAR 0 7
52807: PPUSH
52808: CALL 42469 0 1
52812: ST_TO_ADDR
// mpGlobalSibDeposits := Replace ( mpGlobalSibDeposits , i , Replace ( mpGlobalSibDeposits [ i ] , 3 , value ) ) ;
52813: LD_ADDR_EXP 42
52817: PUSH
52818: LD_EXP 42
52822: PPUSH
52823: LD_VAR 0 6
52827: PPUSH
52828: LD_EXP 42
52832: PUSH
52833: LD_VAR 0 6
52837: ARRAY
52838: PPUSH
52839: LD_INT 3
52841: PPUSH
52842: LD_VAR 0 7
52846: PPUSH
52847: CALL_OW 1
52851: PPUSH
52852: CALL_OW 1
52856: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
52857: LD_VAR 0 1
52861: PPUSH
52862: LD_VAR 0 7
52866: PPUSH
52867: CALL_OW 505
// if value = 0 then
52871: LD_VAR 0 7
52875: PUSH
52876: LD_INT 0
52878: EQUAL
52879: IFFALSE 52928
// begin RemoveDepositXY ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) ;
52881: LD_EXP 42
52885: PUSH
52886: LD_VAR 0 6
52890: ARRAY
52891: PUSH
52892: LD_INT 1
52894: ARRAY
52895: PPUSH
52896: LD_EXP 42
52900: PUSH
52901: LD_VAR 0 6
52905: ARRAY
52906: PUSH
52907: LD_INT 2
52909: ARRAY
52910: PPUSH
52911: CALL_OW 63
// KillUnit ( building ) ;
52915: LD_VAR 0 1
52919: PPUSH
52920: CALL_OW 66
// exit ;
52924: POP
52925: POP
52926: GO 52932
// end ; end ; end ;
52928: GO 52733
52930: POP
52931: POP
// end ; end_of_file
52932: LD_VAR 0 5
52936: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
52937: LD_EXP 39
52941: IFFALSE 52949
52943: PUSH
52944: CALL 53159 0 0
52948: AND
52949: IFFALSE 52957
52951: PUSH
52952: LD_OWVAR 4
52956: AND
52957: IFFALSE 53156
52959: GO 52961
52961: DISABLE
52962: LD_INT 0
52964: PPUSH
52965: PPUSH
// begin canWin := false ;
52966: LD_ADDR_VAR 0 2
52970: PUSH
52971: LD_INT 0
52973: ST_TO_ADDR
// if not HasPower ( your_side ) then
52974: LD_OWVAR 2
52978: PPUSH
52979: CALL 53201 0 1
52983: NOT
52984: IFFALSE 52995
// begin Multiplayer_Loose_Message ;
52986: CALL_OW 521
// enable ( mpLose ) ;
52990: LD_INT 102
52992: ENABLE_MARKED
// end else
52993: GO 53156
// begin canWin := true ;
52995: LD_ADDR_VAR 0 2
52999: PUSH
53000: LD_INT 1
53002: ST_TO_ADDR
// for i := 1 to 8 do
53003: LD_ADDR_VAR 0 1
53007: PUSH
53008: DOUBLE
53009: LD_INT 1
53011: DEC
53012: ST_TO_ADDR
53013: LD_INT 8
53015: PUSH
53016: FOR_TO
53017: IFFALSE 53142
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
53019: LD_EXP 7
53023: PUSH
53024: LD_VAR 0 1
53028: ARRAY
53029: IFFALSE 53042
53031: PUSH
53032: LD_VAR 0 1
53036: PPUSH
53037: CALL_OW 108
53041: AND
53042: IFFALSE 53056
53044: PUSH
53045: LD_VAR 0 1
53049: PUSH
53050: LD_OWVAR 2
53054: NONEQUAL
53055: AND
53056: IFFALSE 53140
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
53058: LD_EXP 8
53062: PUSH
53063: LD_VAR 0 1
53067: ARRAY
53068: NOT
53069: IFTRUE 53117
53071: PUSH
53072: LD_EXP 8
53076: PUSH
53077: LD_VAR 0 1
53081: ARRAY
53082: PUSH
53083: LD_EXP 8
53087: PUSH
53088: LD_OWVAR 2
53092: ARRAY
53093: NONEQUAL
53094: IFFALSE 53116
53096: PUSH
53097: LD_OWVAR 2
53101: PPUSH
53102: LD_VAR 0 1
53106: PPUSH
53107: CALL_OW 81
53111: PUSH
53112: LD_INT 1
53114: NONEQUAL
53115: AND
53116: OR
53117: IFFALSE 53140
// if HasPower ( i ) then
53119: LD_VAR 0 1
53123: PPUSH
53124: CALL 53201 0 1
53128: IFFALSE 53140
// begin canWin := false ;
53130: LD_ADDR_VAR 0 2
53134: PUSH
53135: LD_INT 0
53137: ST_TO_ADDR
// break ;
53138: GO 53142
// end ;
53140: GO 53016
53142: POP
53143: POP
// if canWin then
53144: LD_VAR 0 2
53148: IFFALSE 53155
// enable ( mpWin ) else
53150: LD_INT 101
53152: ENABLE_MARKED
53153: GO 53156
// enable ;
53155: ENABLE
// end ; end ;
53156: PPOPN 2
53158: END
// function CanWinLoose ; begin
53159: LD_INT 0
53161: PPUSH
// result := true ;
53162: LD_ADDR_VAR 0 1
53166: PUSH
53167: LD_INT 1
53169: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
53170: CALL_OW 531
53174: IFFALSE 53186
53176: PUSH
53177: CALL_OW 519
53181: PUSH
53182: LD_INT 1
53184: GREATER
53185: AND
53186: IFFALSE 53196
// result := false ;
53188: LD_ADDR_VAR 0 1
53192: PUSH
53193: LD_INT 0
53195: ST_TO_ADDR
// end ;
53196: LD_VAR 0 1
53200: RET
// function HasPower ( i ) ; begin
53201: LD_INT 0
53203: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
53204: LD_ADDR_VAR 0 2
53208: PUSH
53209: LD_INT 22
53211: PUSH
53212: LD_VAR 0 1
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: PUSH
53221: LD_INT 2
53223: PUSH
53224: LD_INT 21
53226: PUSH
53227: LD_INT 1
53229: PUSH
53230: EMPTY
53231: LIST
53232: LIST
53233: PUSH
53234: LD_INT 33
53236: PUSH
53237: LD_INT 3
53239: PUSH
53240: EMPTY
53241: LIST
53242: LIST
53243: PUSH
53244: LD_INT 33
53246: PUSH
53247: LD_INT 5
53249: PUSH
53250: EMPTY
53251: LIST
53252: LIST
53253: PUSH
53254: EMPTY
53255: LIST
53256: LIST
53257: LIST
53258: LIST
53259: PUSH
53260: EMPTY
53261: LIST
53262: LIST
53263: PPUSH
53264: CALL_OW 69
53268: ST_TO_ADDR
// end ; end_of_file
53269: LD_VAR 0 2
53273: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
53274: LD_EXP 39
53278: IFFALSE 53321
53280: GO 53282
53282: DISABLE
53283: LD_INT 0
53285: PPUSH
// begin for i := 1 to 8 do
53286: LD_ADDR_VAR 0 1
53290: PUSH
53291: DOUBLE
53292: LD_INT 1
53294: DEC
53295: ST_TO_ADDR
53296: LD_INT 8
53298: PUSH
53299: FOR_TO
53300: IFFALSE 53319
// SetRestrict ( b_depot , i , state_disabled ) ;
53302: LD_INT 0
53304: PPUSH
53305: LD_VAR 0 1
53309: PPUSH
53310: LD_INT 0
53312: PPUSH
53313: CALL_OW 324
53317: GO 53299
53319: POP
53320: POP
// end ;
53321: PPOPN 1
53323: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
53324: LD_EXP 39
53328: IFFALSE 53336
53330: PUSH
53331: CALL 53546 0 0
53335: AND
53336: IFFALSE 53344
53338: PUSH
53339: LD_OWVAR 4
53343: AND
53344: IFFALSE 53543
53346: GO 53348
53348: DISABLE
53349: LD_INT 0
53351: PPUSH
53352: PPUSH
// begin canWin := false ;
53353: LD_ADDR_VAR 0 2
53357: PUSH
53358: LD_INT 0
53360: ST_TO_ADDR
// if not HasPower ( your_side ) then
53361: LD_OWVAR 2
53365: PPUSH
53366: CALL 53588 0 1
53370: NOT
53371: IFFALSE 53382
// begin Multiplayer_Loose_Message ;
53373: CALL_OW 521
// enable ( mpLose ) ;
53377: LD_INT 102
53379: ENABLE_MARKED
// end else
53380: GO 53543
// begin canWin := true ;
53382: LD_ADDR_VAR 0 2
53386: PUSH
53387: LD_INT 1
53389: ST_TO_ADDR
// for i := 1 to 8 do
53390: LD_ADDR_VAR 0 1
53394: PUSH
53395: DOUBLE
53396: LD_INT 1
53398: DEC
53399: ST_TO_ADDR
53400: LD_INT 8
53402: PUSH
53403: FOR_TO
53404: IFFALSE 53529
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
53406: LD_EXP 7
53410: PUSH
53411: LD_VAR 0 1
53415: ARRAY
53416: IFFALSE 53429
53418: PUSH
53419: LD_VAR 0 1
53423: PPUSH
53424: CALL_OW 108
53428: AND
53429: IFFALSE 53443
53431: PUSH
53432: LD_VAR 0 1
53436: PUSH
53437: LD_OWVAR 2
53441: NONEQUAL
53442: AND
53443: IFFALSE 53527
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
53445: LD_EXP 8
53449: PUSH
53450: LD_VAR 0 1
53454: ARRAY
53455: NOT
53456: IFTRUE 53504
53458: PUSH
53459: LD_EXP 8
53463: PUSH
53464: LD_VAR 0 1
53468: ARRAY
53469: PUSH
53470: LD_EXP 8
53474: PUSH
53475: LD_OWVAR 2
53479: ARRAY
53480: NONEQUAL
53481: IFFALSE 53503
53483: PUSH
53484: LD_OWVAR 2
53488: PPUSH
53489: LD_VAR 0 1
53493: PPUSH
53494: CALL_OW 81
53498: PUSH
53499: LD_INT 1
53501: NONEQUAL
53502: AND
53503: OR
53504: IFFALSE 53527
// if HasPower ( i ) then
53506: LD_VAR 0 1
53510: PPUSH
53511: CALL 53588 0 1
53515: IFFALSE 53527
// begin canWin := false ;
53517: LD_ADDR_VAR 0 2
53521: PUSH
53522: LD_INT 0
53524: ST_TO_ADDR
// break ;
53525: GO 53529
// end ;
53527: GO 53403
53529: POP
53530: POP
// if canWin then
53531: LD_VAR 0 2
53535: IFFALSE 53542
// enable ( mpWin ) else
53537: LD_INT 101
53539: ENABLE_MARKED
53540: GO 53543
// enable ;
53542: ENABLE
// end ; end ;
53543: PPOPN 2
53545: END
// function CanWinLoose ; begin
53546: LD_INT 0
53548: PPUSH
// result := true ;
53549: LD_ADDR_VAR 0 1
53553: PUSH
53554: LD_INT 1
53556: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
53557: CALL_OW 531
53561: IFFALSE 53573
53563: PUSH
53564: CALL_OW 519
53568: PUSH
53569: LD_INT 1
53571: GREATER
53572: AND
53573: IFFALSE 53583
// result := false ;
53575: LD_ADDR_VAR 0 1
53579: PUSH
53580: LD_INT 0
53582: ST_TO_ADDR
// end ;
53583: LD_VAR 0 1
53587: RET
// function HasPower ( i ) ; begin
53588: LD_INT 0
53590: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
53591: LD_INT 22
53593: PUSH
53594: LD_VAR 0 1
53598: PUSH
53599: EMPTY
53600: LIST
53601: LIST
53602: PUSH
53603: LD_INT 2
53605: PUSH
53606: LD_INT 30
53608: PUSH
53609: LD_INT 0
53611: PUSH
53612: EMPTY
53613: LIST
53614: LIST
53615: PUSH
53616: LD_INT 30
53618: PUSH
53619: LD_INT 1
53621: PUSH
53622: EMPTY
53623: LIST
53624: LIST
53625: PUSH
53626: EMPTY
53627: LIST
53628: LIST
53629: LIST
53630: PUSH
53631: EMPTY
53632: LIST
53633: LIST
53634: PPUSH
53635: CALL_OW 69
53639: NOT
53640: IFFALSE 53644
// exit ;
53642: GO 53709
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
53644: LD_ADDR_VAR 0 2
53648: PUSH
53649: LD_INT 22
53651: PUSH
53652: LD_VAR 0 1
53656: PUSH
53657: EMPTY
53658: LIST
53659: LIST
53660: PUSH
53661: LD_INT 2
53663: PUSH
53664: LD_INT 21
53666: PUSH
53667: LD_INT 1
53669: PUSH
53670: EMPTY
53671: LIST
53672: LIST
53673: PUSH
53674: LD_INT 33
53676: PUSH
53677: LD_INT 3
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: PUSH
53684: LD_INT 33
53686: PUSH
53687: LD_INT 5
53689: PUSH
53690: EMPTY
53691: LIST
53692: LIST
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: LIST
53698: LIST
53699: PUSH
53700: EMPTY
53701: LIST
53702: LIST
53703: PPUSH
53704: CALL_OW 69
53708: ST_TO_ADDR
// end ; end_of_file
53709: LD_VAR 0 2
53713: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
53714: LD_EXP 39
53718: IFFALSE 54059
53720: GO 53722
53722: DISABLE
53723: LD_INT 0
53725: PPUSH
53726: PPUSH
53727: PPUSH
// begin mpKingPoints := [ ] ;
53728: LD_ADDR_EXP 48
53732: PUSH
53733: EMPTY
53734: ST_TO_ADDR
// if mpTeamGame then
53735: LD_EXP 11
53739: IFFALSE 53793
// begin for i := 1 to Count ( mpTeams ) do
53741: LD_ADDR_VAR 0 1
53745: PUSH
53746: DOUBLE
53747: LD_INT 1
53749: DEC
53750: ST_TO_ADDR
53751: LD_EXP 10
53755: PPUSH
53756: CALL 5142 0 1
53760: PUSH
53761: FOR_TO
53762: IFFALSE 53789
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
53764: LD_ADDR_EXP 48
53768: PUSH
53769: LD_EXP 48
53773: PPUSH
53774: LD_VAR 0 1
53778: PPUSH
53779: LD_INT 0
53781: PPUSH
53782: CALL_OW 1
53786: ST_TO_ADDR
53787: GO 53761
53789: POP
53790: POP
// end else
53791: GO 53836
// begin for i := 1 to 8 do
53793: LD_ADDR_VAR 0 1
53797: PUSH
53798: DOUBLE
53799: LD_INT 1
53801: DEC
53802: ST_TO_ADDR
53803: LD_INT 8
53805: PUSH
53806: FOR_TO
53807: IFFALSE 53834
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
53809: LD_ADDR_EXP 48
53813: PUSH
53814: LD_EXP 48
53818: PPUSH
53819: LD_VAR 0 1
53823: PPUSH
53824: LD_INT 0
53826: PPUSH
53827: CALL_OW 1
53831: ST_TO_ADDR
53832: GO 53806
53834: POP
53835: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
53836: LD_ADDR_VAR 0 3
53840: PUSH
53841: LD_EXP 2
53845: PPUSH
53846: LD_INT 0
53848: PPUSH
53849: CALL_OW 517
53853: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
53854: LD_ADDR_VAR 0 1
53858: PUSH
53859: DOUBLE
53860: LD_INT 1
53862: DEC
53863: ST_TO_ADDR
53864: LD_VAR 0 3
53868: PUSH
53869: LD_INT 1
53871: ARRAY
53872: PUSH
53873: FOR_TO
53874: IFFALSE 53941
// for j := 1 to 8 do
53876: LD_ADDR_VAR 0 2
53880: PUSH
53881: DOUBLE
53882: LD_INT 1
53884: DEC
53885: ST_TO_ADDR
53886: LD_INT 8
53888: PUSH
53889: FOR_TO
53890: IFFALSE 53937
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
53892: LD_VAR 0 3
53896: PUSH
53897: LD_INT 1
53899: ARRAY
53900: PUSH
53901: LD_VAR 0 1
53905: ARRAY
53906: PPUSH
53907: LD_VAR 0 3
53911: PUSH
53912: LD_INT 2
53914: ARRAY
53915: PUSH
53916: LD_VAR 0 1
53920: ARRAY
53921: PPUSH
53922: LD_VAR 0 2
53926: PPUSH
53927: LD_INT 12
53929: NEG
53930: PPUSH
53931: CALL_OW 330
53935: GO 53889
53937: POP
53938: POP
53939: GO 53873
53941: POP
53942: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
53943: LD_EXP 34
53947: PPUSH
53948: LD_INT 1
53950: PPUSH
53951: CALL_OW 424
// UpdateCounter ;
53955: CALL 54565 0 0
// repeat wait ( 0 0$1 ) ;
53959: LD_INT 35
53961: PPUSH
53962: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
53966: LD_ADDR_VAR 0 3
53970: PUSH
53971: LD_EXP 34
53975: PPUSH
53976: LD_INT 3
53978: PUSH
53979: LD_INT 57
53981: PUSH
53982: EMPTY
53983: LIST
53984: PUSH
53985: EMPTY
53986: LIST
53987: LIST
53988: PUSH
53989: LD_INT 50
53991: PUSH
53992: EMPTY
53993: LIST
53994: PUSH
53995: LD_INT 2
53997: PUSH
53998: LD_INT 30
54000: PUSH
54001: LD_INT 0
54003: PUSH
54004: EMPTY
54005: LIST
54006: LIST
54007: PUSH
54008: LD_INT 30
54010: PUSH
54011: LD_INT 1
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: PUSH
54018: EMPTY
54019: LIST
54020: LIST
54021: LIST
54022: PUSH
54023: EMPTY
54024: LIST
54025: LIST
54026: LIST
54027: PPUSH
54028: CALL_OW 70
54032: ST_TO_ADDR
// if not tmp then
54033: LD_VAR 0 3
54037: NOT
54038: IFFALSE 54042
// continue ;
54040: GO 53959
// AddPoints ( tmp ) ;
54042: LD_VAR 0 3
54046: PPUSH
54047: CALL 54243 0 1
// UpdateCounter ;
54051: CALL 54565 0 0
// until false ;
54055: LD_INT 0
54057: IFFALSE 53959
// end ;
54059: PPOPN 3
54061: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
54062: LD_EXP 39
54066: IFFALSE 54074
54068: PUSH
54069: LD_EXP 37
54073: AND
54074: IFFALSE 54240
54076: GO 54078
54078: DISABLE
54079: LD_INT 0
54081: PPUSH
54082: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
54083: LD_ADDR_VAR 0 2
54087: PUSH
54088: LD_EXP 2
54092: PPUSH
54093: LD_INT 0
54095: PPUSH
54096: CALL_OW 517
54100: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
54101: LD_ADDR_VAR 0 1
54105: PUSH
54106: DOUBLE
54107: LD_INT 1
54109: DEC
54110: ST_TO_ADDR
54111: LD_VAR 0 2
54115: PUSH
54116: LD_INT 1
54118: ARRAY
54119: PUSH
54120: FOR_TO
54121: IFFALSE 54162
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
54123: LD_VAR 0 2
54127: PUSH
54128: LD_INT 1
54130: ARRAY
54131: PUSH
54132: LD_VAR 0 1
54136: ARRAY
54137: PPUSH
54138: LD_VAR 0 2
54142: PUSH
54143: LD_INT 2
54145: ARRAY
54146: PUSH
54147: LD_VAR 0 1
54151: ARRAY
54152: PPUSH
54153: LD_INT 125
54155: PPUSH
54156: CALL_OW 495
54160: GO 54120
54162: POP
54163: POP
// repeat wait ( mpEmissions ) ;
54164: LD_EXP 37
54168: PPUSH
54169: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
54173: LD_ADDR_VAR 0 1
54177: PUSH
54178: DOUBLE
54179: LD_INT 1
54181: DEC
54182: ST_TO_ADDR
54183: LD_VAR 0 2
54187: PUSH
54188: LD_INT 1
54190: ARRAY
54191: PUSH
54192: FOR_TO
54193: IFFALSE 54234
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
54195: LD_VAR 0 2
54199: PUSH
54200: LD_INT 1
54202: ARRAY
54203: PUSH
54204: LD_VAR 0 1
54208: ARRAY
54209: PPUSH
54210: LD_VAR 0 2
54214: PUSH
54215: LD_INT 2
54217: ARRAY
54218: PUSH
54219: LD_VAR 0 1
54223: ARRAY
54224: PPUSH
54225: LD_INT 15
54227: PPUSH
54228: CALL_OW 495
54232: GO 54192
54234: POP
54235: POP
// until false ;
54236: LD_INT 0
54238: IFFALSE 54164
// end ;
54240: PPOPN 2
54242: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
54243: LD_INT 0
54245: PPUSH
54246: PPUSH
54247: PPUSH
54248: PPUSH
54249: PPUSH
// if mpTeamGame then
54250: LD_EXP 11
54254: IFFALSE 54451
// begin first := depots [ 1 ] ;
54256: LD_ADDR_VAR 0 4
54260: PUSH
54261: LD_VAR 0 1
54265: PUSH
54266: LD_INT 1
54268: ARRAY
54269: ST_TO_ADDR
// side := GetSide ( first ) ;
54270: LD_ADDR_VAR 0 6
54274: PUSH
54275: LD_VAR 0 4
54279: PPUSH
54280: CALL_OW 255
54284: ST_TO_ADDR
// for i := 1 to mpTeams do
54285: LD_ADDR_VAR 0 3
54289: PUSH
54290: DOUBLE
54291: LD_INT 1
54293: DEC
54294: ST_TO_ADDR
54295: LD_EXP 10
54299: PUSH
54300: FOR_TO
54301: IFFALSE 54335
// if side in mpTeams [ i ] then
54303: LD_VAR 0 6
54307: PUSH
54308: LD_EXP 10
54312: PUSH
54313: LD_VAR 0 3
54317: ARRAY
54318: IN
54319: IFFALSE 54333
// begin team := i ;
54321: LD_ADDR_VAR 0 5
54325: PUSH
54326: LD_VAR 0 3
54330: ST_TO_ADDR
// break ;
54331: GO 54335
// end ;
54333: GO 54300
54335: POP
54336: POP
// if not team then
54337: LD_VAR 0 5
54341: NOT
54342: IFFALSE 54346
// exit ;
54344: GO 54560
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
54346: LD_EXP 34
54350: PPUSH
54351: LD_INT 81
54353: PUSH
54354: LD_VAR 0 6
54358: PUSH
54359: EMPTY
54360: LIST
54361: LIST
54362: PPUSH
54363: CALL_OW 70
54367: IFFALSE 54371
// exit ;
54369: GO 54560
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
54371: LD_ADDR_EXP 48
54375: PUSH
54376: LD_EXP 48
54380: PPUSH
54381: LD_VAR 0 5
54385: PPUSH
54386: LD_EXP 48
54390: PUSH
54391: LD_VAR 0 5
54395: ARRAY
54396: PUSH
54397: LD_INT 1
54399: PLUS
54400: PPUSH
54401: CALL_OW 1
54405: ST_TO_ADDR
// for i in mpTeams [ team ] do
54406: LD_ADDR_VAR 0 3
54410: PUSH
54411: LD_EXP 10
54415: PUSH
54416: LD_VAR 0 5
54420: ARRAY
54421: PUSH
54422: FOR_IN
54423: IFFALSE 54447
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
54425: LD_VAR 0 3
54429: PPUSH
54430: LD_EXP 48
54434: PUSH
54435: LD_VAR 0 5
54439: ARRAY
54440: PPUSH
54441: CALL_OW 506
54445: GO 54422
54447: POP
54448: POP
// end else
54449: GO 54560
// begin first := depots [ 1 ] ;
54451: LD_ADDR_VAR 0 4
54455: PUSH
54456: LD_VAR 0 1
54460: PUSH
54461: LD_INT 1
54463: ARRAY
54464: ST_TO_ADDR
// side := GetSide ( first ) ;
54465: LD_ADDR_VAR 0 6
54469: PUSH
54470: LD_VAR 0 4
54474: PPUSH
54475: CALL_OW 255
54479: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
54480: LD_EXP 34
54484: PPUSH
54485: LD_INT 81
54487: PUSH
54488: LD_VAR 0 6
54492: PUSH
54493: EMPTY
54494: LIST
54495: LIST
54496: PPUSH
54497: CALL_OW 70
54501: IFFALSE 54505
// exit ;
54503: GO 54560
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
54505: LD_ADDR_EXP 48
54509: PUSH
54510: LD_EXP 48
54514: PPUSH
54515: LD_VAR 0 6
54519: PPUSH
54520: LD_EXP 48
54524: PUSH
54525: LD_VAR 0 6
54529: ARRAY
54530: PUSH
54531: LD_INT 1
54533: PLUS
54534: PPUSH
54535: CALL_OW 1
54539: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
54540: LD_VAR 0 6
54544: PPUSH
54545: LD_EXP 48
54549: PUSH
54550: LD_VAR 0 6
54554: ARRAY
54555: PPUSH
54556: CALL_OW 506
// end ; end ;
54560: LD_VAR 0 2
54564: RET
// function UpdateCounter ; var i ; begin
54565: LD_INT 0
54567: PPUSH
54568: PPUSH
// result := [ ] ;
54569: LD_ADDR_VAR 0 1
54573: PUSH
54574: EMPTY
54575: ST_TO_ADDR
// if mpTeamGame then
54576: LD_EXP 11
54580: IFFALSE 54647
// begin for i := 1 to mpTeams do
54582: LD_ADDR_VAR 0 2
54586: PUSH
54587: DOUBLE
54588: LD_INT 1
54590: DEC
54591: ST_TO_ADDR
54592: LD_EXP 10
54596: PUSH
54597: FOR_TO
54598: IFFALSE 54643
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
54600: LD_ADDR_VAR 0 1
54604: PUSH
54605: LD_VAR 0 1
54609: PUSH
54610: LD_STRING #KingoftheHill-Team
54612: PUSH
54613: LD_VAR 0 2
54617: PUSH
54618: LD_EXP 48
54622: PUSH
54623: LD_VAR 0 2
54627: ARRAY
54628: PUSH
54629: LD_EXP 35
54633: PUSH
54634: EMPTY
54635: LIST
54636: LIST
54637: LIST
54638: LIST
54639: ADD
54640: ST_TO_ADDR
54641: GO 54597
54643: POP
54644: POP
// end else
54645: GO 54720
// begin for i := 1 to 8 do
54647: LD_ADDR_VAR 0 2
54651: PUSH
54652: DOUBLE
54653: LD_INT 1
54655: DEC
54656: ST_TO_ADDR
54657: LD_INT 8
54659: PUSH
54660: FOR_TO
54661: IFFALSE 54718
// if mpSidePositions [ i ] then
54663: LD_EXP 7
54667: PUSH
54668: LD_VAR 0 2
54672: ARRAY
54673: IFFALSE 54716
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
54675: LD_ADDR_VAR 0 1
54679: PUSH
54680: LD_VAR 0 1
54684: PUSH
54685: LD_STRING #KingoftheHill-Player
54687: PUSH
54688: LD_VAR 0 2
54692: PUSH
54693: LD_EXP 48
54697: PUSH
54698: LD_VAR 0 2
54702: ARRAY
54703: PUSH
54704: LD_EXP 35
54708: PUSH
54709: EMPTY
54710: LIST
54711: LIST
54712: LIST
54713: LIST
54714: ADD
54715: ST_TO_ADDR
54716: GO 54660
54718: POP
54719: POP
// end ; mpDisplayStrings := result ;
54720: LD_ADDR_EXP 38
54724: PUSH
54725: LD_VAR 0 1
54729: ST_TO_ADDR
// end ;
54730: LD_VAR 0 1
54734: RET
// export function HowMuchPointsKing ( side ) ; begin
54735: LD_INT 0
54737: PPUSH
// result := HowMuchPoints ( side ) ;
54738: LD_ADDR_VAR 0 2
54742: PUSH
54743: LD_VAR 0 1
54747: PPUSH
54748: CALL 54758 0 1
54752: ST_TO_ADDR
// end ;
54753: LD_VAR 0 2
54757: RET
// function HowMuchPoints ( side ) ; var i ; begin
54758: LD_INT 0
54760: PPUSH
54761: PPUSH
// if mpTeamGame then
54762: LD_EXP 11
54766: IFFALSE 54835
// begin for i := 1 to Count ( mpTeams ) do
54768: LD_ADDR_VAR 0 3
54772: PUSH
54773: DOUBLE
54774: LD_INT 1
54776: DEC
54777: ST_TO_ADDR
54778: LD_EXP 10
54782: PPUSH
54783: CALL 5142 0 1
54787: PUSH
54788: FOR_TO
54789: IFFALSE 54831
// begin if side in mpTeams [ i ] then
54791: LD_VAR 0 1
54795: PUSH
54796: LD_EXP 10
54800: PUSH
54801: LD_VAR 0 3
54805: ARRAY
54806: IN
54807: IFFALSE 54829
// begin result := mpKingPoints [ i ] ;
54809: LD_ADDR_VAR 0 2
54813: PUSH
54814: LD_EXP 48
54818: PUSH
54819: LD_VAR 0 3
54823: ARRAY
54824: ST_TO_ADDR
// exit ;
54825: POP
54826: POP
54827: GO 54851
// end ; end ;
54829: GO 54788
54831: POP
54832: POP
// end else
54833: GO 54851
// result := mpKingPoints [ side ] ;
54835: LD_ADDR_VAR 0 2
54839: PUSH
54840: LD_EXP 48
54844: PUSH
54845: LD_VAR 0 1
54849: ARRAY
54850: ST_TO_ADDR
// end ;
54851: LD_VAR 0 2
54855: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
54856: LD_EXP 39
54860: IFFALSE 54868
54862: PUSH
54863: CALL 55203 0 0
54867: AND
54868: IFFALSE 54876
54870: PUSH
54871: LD_OWVAR 4
54875: AND
54876: IFFALSE 55126
54878: GO 54880
54880: DISABLE
54881: LD_INT 0
54883: PPUSH
54884: PPUSH
// begin canWin := false ;
54885: LD_ADDR_VAR 0 2
54889: PUSH
54890: LD_INT 0
54892: ST_TO_ADDR
// if not HasPower ( your_side ) then
54893: LD_OWVAR 2
54897: PPUSH
54898: CALL 55245 0 1
54902: NOT
54903: IFFALSE 54914
// begin Multiplayer_Loose_Message ;
54905: CALL_OW 521
// enable ( mpLose ) ;
54909: LD_INT 102
54911: ENABLE_MARKED
// end else
54912: GO 55126
// begin canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) or not EnemiesInGame ;
54914: LD_ADDR_VAR 0 2
54918: PUSH
54919: LD_OWVAR 2
54923: PPUSH
54924: CALL 54758 0 1
54928: PUSH
54929: LD_EXP 35
54933: GREATEREQUAL
54934: IFFALSE 54947
54936: PUSH
54937: LD_OWVAR 2
54941: PPUSH
54942: CALL 55245 0 1
54946: AND
54947: IFTRUE 54956
54949: PUSH
54950: CALL 55129 0 0
54954: NOT
54955: OR
54956: ST_TO_ADDR
// for i := 1 to 8 do
54957: LD_ADDR_VAR 0 1
54961: PUSH
54962: DOUBLE
54963: LD_INT 1
54965: DEC
54966: ST_TO_ADDR
54967: LD_INT 8
54969: PUSH
54970: FOR_TO
54971: IFFALSE 55112
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
54973: LD_EXP 7
54977: PUSH
54978: LD_VAR 0 1
54982: ARRAY
54983: IFFALSE 54996
54985: PUSH
54986: LD_VAR 0 1
54990: PPUSH
54991: CALL_OW 108
54995: AND
54996: IFFALSE 55010
54998: PUSH
54999: LD_VAR 0 1
55003: PUSH
55004: LD_OWVAR 2
55008: NONEQUAL
55009: AND
55010: IFFALSE 55110
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
55012: LD_EXP 8
55016: PUSH
55017: LD_VAR 0 1
55021: ARRAY
55022: NOT
55023: IFTRUE 55071
55025: PUSH
55026: LD_EXP 8
55030: PUSH
55031: LD_VAR 0 1
55035: ARRAY
55036: PUSH
55037: LD_EXP 8
55041: PUSH
55042: LD_OWVAR 2
55046: ARRAY
55047: NONEQUAL
55048: IFFALSE 55070
55050: PUSH
55051: LD_OWVAR 2
55055: PPUSH
55056: LD_VAR 0 1
55060: PPUSH
55061: CALL_OW 81
55065: PUSH
55066: LD_INT 1
55068: NONEQUAL
55069: AND
55070: OR
55071: IFFALSE 55110
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
55073: LD_VAR 0 1
55077: PPUSH
55078: CALL 54758 0 1
55082: PUSH
55083: LD_EXP 35
55087: GREATEREQUAL
55088: IFFALSE 55101
55090: PUSH
55091: LD_VAR 0 1
55095: PPUSH
55096: CALL 55245 0 1
55100: AND
55101: IFFALSE 55110
// begin enable ( mpLose ) ;
55103: LD_INT 102
55105: ENABLE_MARKED
// exit ;
55106: POP
55107: POP
55108: GO 55126
// end ;
55110: GO 54970
55112: POP
55113: POP
// if canWin then
55114: LD_VAR 0 2
55118: IFFALSE 55125
// enable ( mpWin ) else
55120: LD_INT 101
55122: ENABLE_MARKED
55123: GO 55126
// enable ;
55125: ENABLE
// end ; end ;
55126: PPOPN 2
55128: END
// function EnemiesInGame ; var i ; begin
55129: LD_INT 0
55131: PPUSH
55132: PPUSH
// result := false ;
55133: LD_ADDR_VAR 0 1
55137: PUSH
55138: LD_INT 0
55140: ST_TO_ADDR
// for i := 1 to 8 do
55141: LD_ADDR_VAR 0 2
55145: PUSH
55146: DOUBLE
55147: LD_INT 1
55149: DEC
55150: ST_TO_ADDR
55151: LD_INT 8
55153: PUSH
55154: FOR_TO
55155: IFFALSE 55196
// if i <> your_side and HasPower ( i ) then
55157: LD_VAR 0 2
55161: PUSH
55162: LD_OWVAR 2
55166: NONEQUAL
55167: IFFALSE 55180
55169: PUSH
55170: LD_VAR 0 2
55174: PPUSH
55175: CALL 55245 0 1
55179: AND
55180: IFFALSE 55194
// begin result := true ;
55182: LD_ADDR_VAR 0 1
55186: PUSH
55187: LD_INT 1
55189: ST_TO_ADDR
// exit ;
55190: POP
55191: POP
55192: GO 55198
// end ;
55194: GO 55154
55196: POP
55197: POP
// end ;
55198: LD_VAR 0 1
55202: RET
// function CanWinLoose ; begin
55203: LD_INT 0
55205: PPUSH
// result := true ;
55206: LD_ADDR_VAR 0 1
55210: PUSH
55211: LD_INT 1
55213: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
55214: CALL_OW 531
55218: IFFALSE 55230
55220: PUSH
55221: CALL_OW 519
55225: PUSH
55226: LD_INT 1
55228: GREATER
55229: AND
55230: IFFALSE 55240
// result := false ;
55232: LD_ADDR_VAR 0 1
55236: PUSH
55237: LD_INT 0
55239: ST_TO_ADDR
// end ;
55240: LD_VAR 0 1
55244: RET
// function HasPower ( i ) ; begin
55245: LD_INT 0
55247: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
55248: LD_ADDR_VAR 0 2
55252: PUSH
55253: LD_INT 22
55255: PUSH
55256: LD_VAR 0 1
55260: PUSH
55261: EMPTY
55262: LIST
55263: LIST
55264: PUSH
55265: LD_INT 2
55267: PUSH
55268: LD_INT 21
55270: PUSH
55271: LD_INT 1
55273: PUSH
55274: EMPTY
55275: LIST
55276: LIST
55277: PUSH
55278: LD_INT 33
55280: PUSH
55281: LD_INT 3
55283: PUSH
55284: EMPTY
55285: LIST
55286: LIST
55287: PUSH
55288: LD_INT 33
55290: PUSH
55291: LD_INT 5
55293: PUSH
55294: EMPTY
55295: LIST
55296: LIST
55297: PUSH
55298: EMPTY
55299: LIST
55300: LIST
55301: LIST
55302: LIST
55303: PUSH
55304: EMPTY
55305: LIST
55306: LIST
55307: PPUSH
55308: CALL_OW 69
55312: ST_TO_ADDR
// end ; end_of_file end_of_file
55313: LD_VAR 0 2
55317: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
55318: LD_VAR 0 1
55322: PUSH
55323: LD_INT 200
55325: DOUBLE
55326: GREATEREQUAL
55327: IFFALSE 55335
55329: LD_INT 299
55331: DOUBLE
55332: LESSEQUAL
55333: IFTRUE 55337
55335: GO 55369
55337: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
55338: LD_VAR 0 1
55342: PPUSH
55343: LD_VAR 0 2
55347: PPUSH
55348: LD_VAR 0 3
55352: PPUSH
55353: LD_VAR 0 4
55357: PPUSH
55358: LD_VAR 0 5
55362: PPUSH
55363: CALL 56150 0 5
55367: GO 55446
55369: LD_INT 300
55371: DOUBLE
55372: GREATEREQUAL
55373: IFFALSE 55381
55375: LD_INT 399
55377: DOUBLE
55378: LESSEQUAL
55379: IFTRUE 55383
55381: GO 55445
55383: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
55384: LD_VAR 0 1
55388: PPUSH
55389: LD_VAR 0 2
55393: PPUSH
55394: LD_VAR 0 3
55398: PPUSH
55399: LD_VAR 0 4
55403: PPUSH
55404: LD_VAR 0 5
55408: PPUSH
55409: LD_VAR 0 6
55413: PPUSH
55414: LD_VAR 0 7
55418: PPUSH
55419: LD_VAR 0 8
55423: PPUSH
55424: LD_VAR 0 9
55428: PPUSH
55429: LD_VAR 0 10
55433: PPUSH
55434: LD_VAR 0 11
55438: PPUSH
55439: CALL 61555 0 11
55443: GO 55446
55445: POP
// end ;
55446: PPOPN 11
55448: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
55449: LD_VAR 0 1
55453: PPUSH
55454: LD_VAR 0 2
55458: PPUSH
55459: LD_VAR 0 3
55463: PPUSH
55464: LD_VAR 0 4
55468: PPUSH
55469: LD_VAR 0 5
55473: PPUSH
55474: CALL 55531 0 5
// end ; end_of_file
55478: PPOPN 5
55480: END
// export function SOS_UnitDestroyed ( un ) ; begin
55481: LD_INT 0
55483: PPUSH
// ComRadiation ( un ) ;
55484: LD_VAR 0 1
55488: PPUSH
55489: CALL 56570 0 1
// end ;
55493: LD_VAR 0 2
55497: RET
// export function SOS_UnitKamikazed ( un ) ; begin
55498: LD_INT 0
55500: PPUSH
// ComRadiation ( un ) ;
55501: LD_VAR 0 1
55505: PPUSH
55506: CALL 56570 0 1
// end ;
55510: LD_VAR 0 2
55514: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
55515: LD_INT 0
55517: PPUSH
// end ;
55518: LD_VAR 0 4
55522: RET
// export function SOS_Command ( cmd ) ; begin
55523: LD_INT 0
55525: PPUSH
// end ;
55526: LD_VAR 0 2
55530: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
55531: LD_INT 0
55533: PPUSH
// end ;
55534: LD_VAR 0 6
55538: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
55539: LD_INT 0
55541: PPUSH
55542: PPUSH
55543: PPUSH
55544: PPUSH
// if not vehicle or not factory then
55545: LD_VAR 0 1
55549: NOT
55550: IFTRUE 55559
55552: PUSH
55553: LD_VAR 0 2
55557: NOT
55558: OR
55559: IFFALSE 55563
// exit ;
55561: GO 56145
// if not factoryWaypoints then
55563: LD_EXP 59
55567: NOT
55568: IFFALSE 55572
// exit ;
55570: GO 56145
// for i := 1 to Count ( factoryWaypoints ) do
55572: LD_ADDR_VAR 0 4
55576: PUSH
55577: DOUBLE
55578: LD_INT 1
55580: DEC
55581: ST_TO_ADDR
55582: LD_EXP 59
55586: PPUSH
55587: CALL 5142 0 1
55591: PUSH
55592: FOR_TO
55593: IFFALSE 56143
// if factoryWaypoints [ i ] [ 2 ] = factory then
55595: LD_EXP 59
55599: PUSH
55600: LD_VAR 0 4
55604: ARRAY
55605: PUSH
55606: LD_INT 2
55608: ARRAY
55609: PUSH
55610: LD_VAR 0 2
55614: EQUAL
55615: IFFALSE 56141
// begin if GetControl ( vehicle ) = control_manual then
55617: LD_VAR 0 1
55621: PPUSH
55622: CALL_OW 263
55626: PUSH
55627: LD_INT 1
55629: EQUAL
55630: IFFALSE 55994
// begin driver := IsDrivenBy ( vehicle ) ;
55632: LD_ADDR_VAR 0 5
55636: PUSH
55637: LD_VAR 0 1
55641: PPUSH
55642: CALL_OW 311
55646: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
55647: LD_VAR 0 5
55651: PUSH
55652: LD_EXP 60
55656: IN
55657: IFTRUE 55671
55659: PUSH
55660: LD_VAR 0 1
55664: PUSH
55665: LD_EXP 60
55669: IN
55670: OR
55671: IFFALSE 55677
// exit ;
55673: POP
55674: POP
55675: GO 56145
// if not HasTask ( driver ) then
55677: LD_VAR 0 5
55681: PPUSH
55682: CALL_OW 314
55686: NOT
55687: IFFALSE 55992
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
55689: LD_ADDR_EXP 60
55693: PUSH
55694: LD_EXP 60
55698: PPUSH
55699: LD_VAR 0 5
55703: PPUSH
55704: CALL 41074 0 2
55708: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
55709: LD_ADDR_EXP 60
55713: PUSH
55714: LD_EXP 60
55718: PPUSH
55719: LD_VAR 0 1
55723: PPUSH
55724: CALL 41074 0 2
55728: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
55729: LD_ADDR_VAR 0 6
55733: PUSH
55734: LD_EXP 59
55738: PUSH
55739: LD_VAR 0 4
55743: ARRAY
55744: PUSH
55745: LD_INT 3
55747: ARRAY
55748: PPUSH
55749: LD_EXP 59
55753: PUSH
55754: LD_VAR 0 4
55758: ARRAY
55759: PUSH
55760: LD_INT 4
55762: ARRAY
55763: PPUSH
55764: CALL_OW 428
55768: ST_TO_ADDR
// if hex then
55769: LD_VAR 0 6
55773: IFFALSE 55791
// ComMoveUnit ( driver , hex ) else
55775: LD_VAR 0 5
55779: PPUSH
55780: LD_VAR 0 6
55784: PPUSH
55785: CALL_OW 112
55789: GO 55875
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
55791: LD_VAR 0 1
55795: PPUSH
55796: LD_EXP 59
55800: PUSH
55801: LD_VAR 0 4
55805: ARRAY
55806: PUSH
55807: LD_INT 3
55809: ARRAY
55810: PPUSH
55811: LD_EXP 59
55815: PUSH
55816: LD_VAR 0 4
55820: ARRAY
55821: PUSH
55822: LD_INT 4
55824: ARRAY
55825: PPUSH
55826: CALL_OW 297
55830: PUSH
55831: LD_INT 0
55833: GREATER
55834: IFFALSE 55875
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
55836: LD_VAR 0 5
55840: PPUSH
55841: LD_EXP 59
55845: PUSH
55846: LD_VAR 0 4
55850: ARRAY
55851: PUSH
55852: LD_INT 3
55854: ARRAY
55855: PPUSH
55856: LD_EXP 59
55860: PUSH
55861: LD_VAR 0 4
55865: ARRAY
55866: PUSH
55867: LD_INT 4
55869: ARRAY
55870: PPUSH
55871: CALL_OW 111
// AddComExitVehicle ( driver ) ;
55875: LD_VAR 0 5
55879: PPUSH
55880: CALL_OW 181
// if Multiplayer then
55884: LD_OWVAR 4
55888: IFFALSE 55937
// begin repeat wait ( 10 ) ;
55890: LD_INT 10
55892: PPUSH
55893: CALL_OW 67
// until not IsInUnit ( driver ) ;
55897: LD_VAR 0 5
55901: PPUSH
55902: CALL_OW 310
55906: NOT
55907: IFFALSE 55890
// if not HasTask ( driver ) then
55909: LD_VAR 0 5
55913: PPUSH
55914: CALL_OW 314
55918: NOT
55919: IFFALSE 55935
// ComEnterUnit ( driver , factory ) ;
55921: LD_VAR 0 5
55925: PPUSH
55926: LD_VAR 0 2
55930: PPUSH
55931: CALL_OW 120
// end else
55935: GO 55951
// AddComEnterUnit ( driver , factory ) ;
55937: LD_VAR 0 5
55941: PPUSH
55942: LD_VAR 0 2
55946: PPUSH
55947: CALL_OW 180
// wait ( 0 0$1 ) ;
55951: LD_INT 35
55953: PPUSH
55954: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
55958: LD_ADDR_EXP 60
55962: PUSH
55963: LD_EXP 60
55967: PUSH
55968: LD_VAR 0 5
55972: DIFF
55973: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
55974: LD_ADDR_EXP 60
55978: PUSH
55979: LD_EXP 60
55983: PUSH
55984: LD_VAR 0 1
55988: DIFF
55989: ST_TO_ADDR
// break ;
55990: GO 56143
// end ; end else
55992: GO 56141
// if GetControl ( vehicle ) = control_remote then
55994: LD_VAR 0 1
55998: PPUSH
55999: CALL_OW 263
56003: PUSH
56004: LD_INT 2
56006: EQUAL
56007: IFFALSE 56093
// begin wait ( 0 0$2 ) ;
56009: LD_INT 70
56011: PPUSH
56012: CALL_OW 67
// repeat wait ( 10 ) ;
56016: LD_INT 10
56018: PPUSH
56019: CALL_OW 67
// Connect ( vehicle ) ;
56023: LD_VAR 0 1
56027: PPUSH
56028: CALL 11386 0 1
// until IsControledBy ( vehicle ) ;
56032: LD_VAR 0 1
56036: PPUSH
56037: CALL_OW 312
56041: IFFALSE 56016
// wait ( 10 ) ;
56043: LD_INT 10
56045: PPUSH
56046: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
56050: LD_VAR 0 1
56054: PPUSH
56055: LD_EXP 59
56059: PUSH
56060: LD_VAR 0 4
56064: ARRAY
56065: PUSH
56066: LD_INT 3
56068: ARRAY
56069: PPUSH
56070: LD_EXP 59
56074: PUSH
56075: LD_VAR 0 4
56079: ARRAY
56080: PUSH
56081: LD_INT 4
56083: ARRAY
56084: PPUSH
56085: CALL_OW 111
// break ;
56089: GO 56143
// end else
56091: GO 56141
// begin wait ( 0 0$3 ) ;
56093: LD_INT 105
56095: PPUSH
56096: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
56100: LD_VAR 0 1
56104: PPUSH
56105: LD_EXP 59
56109: PUSH
56110: LD_VAR 0 4
56114: ARRAY
56115: PUSH
56116: LD_INT 3
56118: ARRAY
56119: PPUSH
56120: LD_EXP 59
56124: PUSH
56125: LD_VAR 0 4
56129: ARRAY
56130: PUSH
56131: LD_INT 4
56133: ARRAY
56134: PPUSH
56135: CALL_OW 111
// break ;
56139: GO 56143
// end ; end ;
56141: GO 55592
56143: POP
56144: POP
// end ;
56145: LD_VAR 0 3
56149: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
56150: LD_INT 0
56152: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
56153: LD_VAR 0 1
56157: PUSH
56158: LD_INT 250
56160: EQUAL
56161: IFFALSE 56178
56163: PUSH
56164: LD_VAR 0 2
56168: PPUSH
56169: CALL_OW 264
56173: PUSH
56174: LD_INT 81
56176: EQUAL
56177: AND
56178: IFFALSE 56199
// MinerPlaceMine ( unit , x , y ) ;
56180: LD_VAR 0 2
56184: PPUSH
56185: LD_VAR 0 4
56189: PPUSH
56190: LD_VAR 0 5
56194: PPUSH
56195: CALL 59331 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
56199: LD_VAR 0 1
56203: PUSH
56204: LD_INT 251
56206: EQUAL
56207: IFFALSE 56224
56209: PUSH
56210: LD_VAR 0 2
56214: PPUSH
56215: CALL_OW 264
56219: PUSH
56220: LD_INT 81
56222: EQUAL
56223: AND
56224: IFFALSE 56245
// MinerDetonateMine ( unit , x , y ) ;
56226: LD_VAR 0 2
56230: PPUSH
56231: LD_VAR 0 4
56235: PPUSH
56236: LD_VAR 0 5
56240: PPUSH
56241: CALL 59610 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
56245: LD_VAR 0 1
56249: PUSH
56250: LD_INT 252
56252: EQUAL
56253: IFFALSE 56270
56255: PUSH
56256: LD_VAR 0 2
56260: PPUSH
56261: CALL_OW 264
56265: PUSH
56266: LD_INT 81
56268: EQUAL
56269: AND
56270: IFFALSE 56291
// MinerCreateMinefield ( unit , x , y ) ;
56272: LD_VAR 0 2
56276: PPUSH
56277: LD_VAR 0 4
56281: PPUSH
56282: LD_VAR 0 5
56286: PPUSH
56287: CALL 60029 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
56291: LD_VAR 0 1
56295: PUSH
56296: LD_INT 253
56298: EQUAL
56299: IFFALSE 56316
56301: PUSH
56302: LD_VAR 0 2
56306: PPUSH
56307: CALL_OW 257
56311: PUSH
56312: LD_INT 5
56314: EQUAL
56315: AND
56316: IFFALSE 56337
// ComBinocular ( unit , x , y ) ;
56318: LD_VAR 0 2
56322: PPUSH
56323: LD_VAR 0 4
56327: PPUSH
56328: LD_VAR 0 5
56332: PPUSH
56333: CALL 60404 0 3
// if selectedUnit then
56337: LD_VAR 0 3
56341: IFFALSE 56401
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
56343: LD_VAR 0 1
56347: PUSH
56348: LD_INT 254
56350: EQUAL
56351: IFFALSE 56368
56353: PUSH
56354: LD_VAR 0 2
56358: PPUSH
56359: CALL_OW 264
56363: PUSH
56364: LD_INT 99
56366: EQUAL
56367: AND
56368: IFFALSE 56385
56370: PUSH
56371: LD_VAR 0 3
56375: PPUSH
56376: CALL_OW 263
56380: PUSH
56381: LD_INT 3
56383: EQUAL
56384: AND
56385: IFFALSE 56401
// HackDestroyVehicle ( unit , selectedUnit ) ;
56387: LD_VAR 0 2
56391: PPUSH
56392: LD_VAR 0 3
56396: PPUSH
56397: CALL 58691 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
56401: LD_VAR 0 1
56405: PUSH
56406: LD_INT 255
56408: EQUAL
56409: IFFALSE 56433
56411: PUSH
56412: LD_VAR 0 2
56416: PPUSH
56417: CALL_OW 264
56421: PUSH
56422: LD_INT 14
56424: PUSH
56425: LD_INT 53
56427: PUSH
56428: EMPTY
56429: LIST
56430: LIST
56431: IN
56432: AND
56433: IFFALSE 56451
56435: PUSH
56436: LD_VAR 0 4
56440: PPUSH
56441: LD_VAR 0 5
56445: PPUSH
56446: CALL_OW 488
56450: AND
56451: IFFALSE 56475
// CutTreeXYR ( unit , x , y , 12 ) ;
56453: LD_VAR 0 2
56457: PPUSH
56458: LD_VAR 0 4
56462: PPUSH
56463: LD_VAR 0 5
56467: PPUSH
56468: LD_INT 12
56470: PPUSH
56471: CALL 56666 0 4
// if cmd = 256 then
56475: LD_VAR 0 1
56479: PUSH
56480: LD_INT 256
56482: EQUAL
56483: IFFALSE 56504
// SetFactoryWaypoint ( unit , x , y ) ;
56485: LD_VAR 0 2
56489: PPUSH
56490: LD_VAR 0 4
56494: PPUSH
56495: LD_VAR 0 5
56499: PPUSH
56500: CALL 61563 0 3
// if cmd = 257 then
56504: LD_VAR 0 1
56508: PUSH
56509: LD_INT 257
56511: EQUAL
56512: IFFALSE 56533
// SetWarehouseGatheringPoint ( unit , x , y ) ;
56514: LD_VAR 0 2
56518: PPUSH
56519: LD_VAR 0 4
56523: PPUSH
56524: LD_VAR 0 5
56528: PPUSH
56529: CALL 62059 0 3
// if cmd = 258 then
56533: LD_VAR 0 1
56537: PUSH
56538: LD_INT 258
56540: EQUAL
56541: IFFALSE 56565
// BurnTreeXYR ( unit , x , y , 8 ) ;
56543: LD_VAR 0 2
56547: PPUSH
56548: LD_VAR 0 4
56552: PPUSH
56553: LD_VAR 0 5
56557: PPUSH
56558: LD_INT 8
56560: PPUSH
56561: CALL 57066 0 4
// end ;
56565: LD_VAR 0 6
56569: RET
// export function ComRadiation ( un ) ; var eff ; begin
56570: LD_INT 0
56572: PPUSH
56573: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
56574: LD_VAR 0 1
56578: PPUSH
56579: CALL_OW 264
56583: PUSH
56584: LD_INT 91
56586: NONEQUAL
56587: IFFALSE 56591
// exit ;
56589: GO 56661
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
56591: LD_INT 68
56593: PPUSH
56594: LD_VAR 0 1
56598: PPUSH
56599: CALL_OW 255
56603: PPUSH
56604: CALL_OW 321
56608: PUSH
56609: LD_INT 2
56611: EQUAL
56612: IFFALSE 56624
// eff := 50 else
56614: LD_ADDR_VAR 0 3
56618: PUSH
56619: LD_INT 50
56621: ST_TO_ADDR
56622: GO 56632
// eff := 25 ;
56624: LD_ADDR_VAR 0 3
56628: PUSH
56629: LD_INT 25
56631: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
56632: LD_VAR 0 1
56636: PPUSH
56637: CALL_OW 250
56641: PPUSH
56642: LD_VAR 0 1
56646: PPUSH
56647: CALL_OW 251
56651: PPUSH
56652: LD_VAR 0 3
56656: PPUSH
56657: CALL_OW 495
// end ;
56661: LD_VAR 0 2
56665: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
56666: LD_INT 0
56668: PPUSH
56669: PPUSH
56670: PPUSH
56671: PPUSH
56672: PPUSH
56673: PPUSH
56674: PPUSH
56675: PPUSH
56676: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
56677: LD_VAR 0 1
56681: PPUSH
56682: CALL_OW 302
56686: NOT
56687: IFTRUE 56706
56689: PUSH
56690: LD_VAR 0 2
56694: PPUSH
56695: LD_VAR 0 3
56699: PPUSH
56700: CALL_OW 488
56704: NOT
56705: OR
56706: IFTRUE 56715
56708: PUSH
56709: LD_VAR 0 4
56713: NOT
56714: OR
56715: IFFALSE 56719
// exit ;
56717: GO 57061
// list := [ ] ;
56719: LD_ADDR_VAR 0 13
56723: PUSH
56724: EMPTY
56725: ST_TO_ADDR
// if x - r < 0 then
56726: LD_VAR 0 2
56730: PUSH
56731: LD_VAR 0 4
56735: MINUS
56736: PUSH
56737: LD_INT 0
56739: LESS
56740: IFFALSE 56752
// min_x := 0 else
56742: LD_ADDR_VAR 0 7
56746: PUSH
56747: LD_INT 0
56749: ST_TO_ADDR
56750: GO 56768
// min_x := x - r ;
56752: LD_ADDR_VAR 0 7
56756: PUSH
56757: LD_VAR 0 2
56761: PUSH
56762: LD_VAR 0 4
56766: MINUS
56767: ST_TO_ADDR
// if y - r < 0 then
56768: LD_VAR 0 3
56772: PUSH
56773: LD_VAR 0 4
56777: MINUS
56778: PUSH
56779: LD_INT 0
56781: LESS
56782: IFFALSE 56794
// min_y := 0 else
56784: LD_ADDR_VAR 0 8
56788: PUSH
56789: LD_INT 0
56791: ST_TO_ADDR
56792: GO 56810
// min_y := y - r ;
56794: LD_ADDR_VAR 0 8
56798: PUSH
56799: LD_VAR 0 3
56803: PUSH
56804: LD_VAR 0 4
56808: MINUS
56809: ST_TO_ADDR
// max_x := x + r ;
56810: LD_ADDR_VAR 0 9
56814: PUSH
56815: LD_VAR 0 2
56819: PUSH
56820: LD_VAR 0 4
56824: PLUS
56825: ST_TO_ADDR
// max_y := y + r ;
56826: LD_ADDR_VAR 0 10
56830: PUSH
56831: LD_VAR 0 3
56835: PUSH
56836: LD_VAR 0 4
56840: PLUS
56841: ST_TO_ADDR
// for _x = min_x to max_x do
56842: LD_ADDR_VAR 0 11
56846: PUSH
56847: DOUBLE
56848: LD_VAR 0 7
56852: DEC
56853: ST_TO_ADDR
56854: LD_VAR 0 9
56858: PUSH
56859: FOR_TO
56860: IFFALSE 56979
// for _y = min_y to max_y do
56862: LD_ADDR_VAR 0 12
56866: PUSH
56867: DOUBLE
56868: LD_VAR 0 8
56872: DEC
56873: ST_TO_ADDR
56874: LD_VAR 0 10
56878: PUSH
56879: FOR_TO
56880: IFFALSE 56975
// begin if not ValidHex ( _x , _y ) then
56882: LD_VAR 0 11
56886: PPUSH
56887: LD_VAR 0 12
56891: PPUSH
56892: CALL_OW 488
56896: NOT
56897: IFFALSE 56901
// continue ;
56899: GO 56879
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
56901: LD_VAR 0 11
56905: PPUSH
56906: LD_VAR 0 12
56910: PPUSH
56911: CALL_OW 351
56915: IFFALSE 56933
56917: PUSH
56918: LD_VAR 0 11
56922: PPUSH
56923: LD_VAR 0 12
56927: PPUSH
56928: CALL_OW 554
56932: AND
56933: IFFALSE 56973
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
56935: LD_ADDR_VAR 0 13
56939: PUSH
56940: LD_VAR 0 13
56944: PPUSH
56945: LD_VAR 0 13
56949: PUSH
56950: LD_INT 1
56952: PLUS
56953: PPUSH
56954: LD_VAR 0 11
56958: PUSH
56959: LD_VAR 0 12
56963: PUSH
56964: EMPTY
56965: LIST
56966: LIST
56967: PPUSH
56968: CALL_OW 2
56972: ST_TO_ADDR
// end ;
56973: GO 56879
56975: POP
56976: POP
56977: GO 56859
56979: POP
56980: POP
// if not list then
56981: LD_VAR 0 13
56985: NOT
56986: IFFALSE 56990
// exit ;
56988: GO 57061
// for i in list do
56990: LD_ADDR_VAR 0 6
56994: PUSH
56995: LD_VAR 0 13
56999: PUSH
57000: FOR_IN
57001: IFFALSE 57059
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
57003: LD_VAR 0 1
57007: PPUSH
57008: LD_STRING M
57010: PUSH
57011: LD_VAR 0 6
57015: PUSH
57016: LD_INT 1
57018: ARRAY
57019: PUSH
57020: LD_VAR 0 6
57024: PUSH
57025: LD_INT 2
57027: ARRAY
57028: PUSH
57029: LD_INT 0
57031: PUSH
57032: LD_INT 0
57034: PUSH
57035: LD_INT 0
57037: PUSH
57038: LD_INT 0
57040: PUSH
57041: EMPTY
57042: LIST
57043: LIST
57044: LIST
57045: LIST
57046: LIST
57047: LIST
57048: LIST
57049: PUSH
57050: EMPTY
57051: LIST
57052: PPUSH
57053: CALL_OW 447
57057: GO 57000
57059: POP
57060: POP
// end ;
57061: LD_VAR 0 5
57065: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
57066: LD_INT 0
57068: PPUSH
57069: PPUSH
57070: PPUSH
57071: PPUSH
57072: PPUSH
57073: PPUSH
57074: PPUSH
57075: PPUSH
57076: PPUSH
57077: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
57078: LD_VAR 0 1
57082: PPUSH
57083: CALL_OW 302
57087: NOT
57088: IFTRUE 57107
57090: PUSH
57091: LD_VAR 0 2
57095: PPUSH
57096: LD_VAR 0 3
57100: PPUSH
57101: CALL_OW 488
57105: NOT
57106: OR
57107: IFTRUE 57116
57109: PUSH
57110: LD_VAR 0 4
57114: NOT
57115: OR
57116: IFFALSE 57120
// exit ;
57118: GO 57637
// list := [ ] ;
57120: LD_ADDR_VAR 0 13
57124: PUSH
57125: EMPTY
57126: ST_TO_ADDR
// if x - r < 0 then
57127: LD_VAR 0 2
57131: PUSH
57132: LD_VAR 0 4
57136: MINUS
57137: PUSH
57138: LD_INT 0
57140: LESS
57141: IFFALSE 57153
// min_x := 0 else
57143: LD_ADDR_VAR 0 7
57147: PUSH
57148: LD_INT 0
57150: ST_TO_ADDR
57151: GO 57169
// min_x := x - r ;
57153: LD_ADDR_VAR 0 7
57157: PUSH
57158: LD_VAR 0 2
57162: PUSH
57163: LD_VAR 0 4
57167: MINUS
57168: ST_TO_ADDR
// if y - r < 0 then
57169: LD_VAR 0 3
57173: PUSH
57174: LD_VAR 0 4
57178: MINUS
57179: PUSH
57180: LD_INT 0
57182: LESS
57183: IFFALSE 57195
// min_y := 0 else
57185: LD_ADDR_VAR 0 8
57189: PUSH
57190: LD_INT 0
57192: ST_TO_ADDR
57193: GO 57211
// min_y := y - r ;
57195: LD_ADDR_VAR 0 8
57199: PUSH
57200: LD_VAR 0 3
57204: PUSH
57205: LD_VAR 0 4
57209: MINUS
57210: ST_TO_ADDR
// max_x := x + r ;
57211: LD_ADDR_VAR 0 9
57215: PUSH
57216: LD_VAR 0 2
57220: PUSH
57221: LD_VAR 0 4
57225: PLUS
57226: ST_TO_ADDR
// max_y := y + r ;
57227: LD_ADDR_VAR 0 10
57231: PUSH
57232: LD_VAR 0 3
57236: PUSH
57237: LD_VAR 0 4
57241: PLUS
57242: ST_TO_ADDR
// for _x = min_x to max_x do
57243: LD_ADDR_VAR 0 11
57247: PUSH
57248: DOUBLE
57249: LD_VAR 0 7
57253: DEC
57254: ST_TO_ADDR
57255: LD_VAR 0 9
57259: PUSH
57260: FOR_TO
57261: IFFALSE 57380
// for _y = min_y to max_y do
57263: LD_ADDR_VAR 0 12
57267: PUSH
57268: DOUBLE
57269: LD_VAR 0 8
57273: DEC
57274: ST_TO_ADDR
57275: LD_VAR 0 10
57279: PUSH
57280: FOR_TO
57281: IFFALSE 57376
// begin if not ValidHex ( _x , _y ) then
57283: LD_VAR 0 11
57287: PPUSH
57288: LD_VAR 0 12
57292: PPUSH
57293: CALL_OW 488
57297: NOT
57298: IFFALSE 57302
// continue ;
57300: GO 57280
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
57302: LD_VAR 0 11
57306: PPUSH
57307: LD_VAR 0 12
57311: PPUSH
57312: CALL_OW 351
57316: IFFALSE 57334
57318: PUSH
57319: LD_VAR 0 11
57323: PPUSH
57324: LD_VAR 0 12
57328: PPUSH
57329: CALL_OW 554
57333: AND
57334: IFFALSE 57374
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
57336: LD_ADDR_VAR 0 13
57340: PUSH
57341: LD_VAR 0 13
57345: PPUSH
57346: LD_VAR 0 13
57350: PUSH
57351: LD_INT 1
57353: PLUS
57354: PPUSH
57355: LD_VAR 0 11
57359: PUSH
57360: LD_VAR 0 12
57364: PUSH
57365: EMPTY
57366: LIST
57367: LIST
57368: PPUSH
57369: CALL_OW 2
57373: ST_TO_ADDR
// end ;
57374: GO 57280
57376: POP
57377: POP
57378: GO 57260
57380: POP
57381: POP
// if not list then
57382: LD_VAR 0 13
57386: NOT
57387: IFFALSE 57391
// exit ;
57389: GO 57637
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
57391: LD_ADDR_VAR 0 13
57395: PUSH
57396: LD_VAR 0 1
57400: PPUSH
57401: LD_VAR 0 13
57405: PPUSH
57406: LD_INT 1
57408: PPUSH
57409: LD_INT 1
57411: PPUSH
57412: CALL 8514 0 4
57416: ST_TO_ADDR
// ComStop ( flame ) ;
57417: LD_VAR 0 1
57421: PPUSH
57422: CALL_OW 141
// for i in list do
57426: LD_ADDR_VAR 0 6
57430: PUSH
57431: LD_VAR 0 13
57435: PUSH
57436: FOR_IN
57437: IFFALSE 57468
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
57439: LD_VAR 0 1
57443: PPUSH
57444: LD_VAR 0 6
57448: PUSH
57449: LD_INT 1
57451: ARRAY
57452: PPUSH
57453: LD_VAR 0 6
57457: PUSH
57458: LD_INT 2
57460: ARRAY
57461: PPUSH
57462: CALL_OW 176
57466: GO 57436
57468: POP
57469: POP
// repeat wait ( 0 0$1 ) ;
57470: LD_INT 35
57472: PPUSH
57473: CALL_OW 67
// task := GetTaskList ( flame ) ;
57477: LD_ADDR_VAR 0 14
57481: PUSH
57482: LD_VAR 0 1
57486: PPUSH
57487: CALL_OW 437
57491: ST_TO_ADDR
// if not task then
57492: LD_VAR 0 14
57496: NOT
57497: IFFALSE 57501
// exit ;
57499: GO 57637
// if task [ 1 ] [ 1 ] <> | then
57501: LD_VAR 0 14
57505: PUSH
57506: LD_INT 1
57508: ARRAY
57509: PUSH
57510: LD_INT 1
57512: ARRAY
57513: PUSH
57514: LD_STRING |
57516: NONEQUAL
57517: IFFALSE 57521
// exit ;
57519: GO 57637
// _x := task [ 1 ] [ 2 ] ;
57521: LD_ADDR_VAR 0 11
57525: PUSH
57526: LD_VAR 0 14
57530: PUSH
57531: LD_INT 1
57533: ARRAY
57534: PUSH
57535: LD_INT 2
57537: ARRAY
57538: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
57539: LD_ADDR_VAR 0 12
57543: PUSH
57544: LD_VAR 0 14
57548: PUSH
57549: LD_INT 1
57551: ARRAY
57552: PUSH
57553: LD_INT 3
57555: ARRAY
57556: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
57557: LD_VAR 0 11
57561: PPUSH
57562: LD_VAR 0 12
57566: PPUSH
57567: CALL_OW 351
57571: NOT
57572: IFTRUE 57591
57574: PUSH
57575: LD_VAR 0 11
57579: PPUSH
57580: LD_VAR 0 12
57584: PPUSH
57585: CALL_OW 554
57589: NOT
57590: OR
57591: IFFALSE 57625
// begin task := Delete ( task , 1 ) ;
57593: LD_ADDR_VAR 0 14
57597: PUSH
57598: LD_VAR 0 14
57602: PPUSH
57603: LD_INT 1
57605: PPUSH
57606: CALL_OW 3
57610: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
57611: LD_VAR 0 1
57615: PPUSH
57616: LD_VAR 0 14
57620: PPUSH
57621: CALL_OW 446
// end ; until not HasTask ( flame ) ;
57625: LD_VAR 0 1
57629: PPUSH
57630: CALL_OW 314
57634: NOT
57635: IFFALSE 57470
// end ;
57637: LD_VAR 0 5
57641: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
57642: LD_EXP 49
57646: NOT
57647: IFFALSE 57697
57649: GO 57651
57651: DISABLE
// begin initHack := true ;
57652: LD_ADDR_EXP 49
57656: PUSH
57657: LD_INT 1
57659: ST_TO_ADDR
// hackTanks := [ ] ;
57660: LD_ADDR_EXP 50
57664: PUSH
57665: EMPTY
57666: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
57667: LD_ADDR_EXP 51
57671: PUSH
57672: EMPTY
57673: ST_TO_ADDR
// hackLimit := 3 ;
57674: LD_ADDR_EXP 52
57678: PUSH
57679: LD_INT 3
57681: ST_TO_ADDR
// hackDist := 12 ;
57682: LD_ADDR_EXP 53
57686: PUSH
57687: LD_INT 12
57689: ST_TO_ADDR
// hackCounter := [ ] ;
57690: LD_ADDR_EXP 54
57694: PUSH
57695: EMPTY
57696: ST_TO_ADDR
// end ;
57697: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
57698: LD_EXP 49
57702: IFFALSE 57720
57704: PUSH
57705: LD_INT 34
57707: PUSH
57708: LD_INT 99
57710: PUSH
57711: EMPTY
57712: LIST
57713: LIST
57714: PPUSH
57715: CALL_OW 69
57719: AND
57720: IFFALSE 57973
57722: GO 57724
57724: DISABLE
57725: LD_INT 0
57727: PPUSH
57728: PPUSH
// begin enable ;
57729: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
57730: LD_ADDR_VAR 0 1
57734: PUSH
57735: LD_INT 34
57737: PUSH
57738: LD_INT 99
57740: PUSH
57741: EMPTY
57742: LIST
57743: LIST
57744: PPUSH
57745: CALL_OW 69
57749: PUSH
57750: FOR_IN
57751: IFFALSE 57971
// begin if not i in hackTanks then
57753: LD_VAR 0 1
57757: PUSH
57758: LD_EXP 50
57762: IN
57763: NOT
57764: IFFALSE 57847
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
57766: LD_ADDR_EXP 50
57770: PUSH
57771: LD_EXP 50
57775: PPUSH
57776: LD_EXP 50
57780: PUSH
57781: LD_INT 1
57783: PLUS
57784: PPUSH
57785: LD_VAR 0 1
57789: PPUSH
57790: CALL_OW 1
57794: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
57795: LD_ADDR_EXP 51
57799: PUSH
57800: LD_EXP 51
57804: PPUSH
57805: LD_EXP 51
57809: PUSH
57810: LD_INT 1
57812: PLUS
57813: PPUSH
57814: EMPTY
57815: PPUSH
57816: CALL_OW 1
57820: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
57821: LD_ADDR_EXP 54
57825: PUSH
57826: LD_EXP 54
57830: PPUSH
57831: LD_EXP 54
57835: PUSH
57836: LD_INT 1
57838: PLUS
57839: PPUSH
57840: EMPTY
57841: PPUSH
57842: CALL_OW 1
57846: ST_TO_ADDR
// end ; if not IsOk ( i ) then
57847: LD_VAR 0 1
57851: PPUSH
57852: CALL_OW 302
57856: NOT
57857: IFFALSE 57870
// begin HackUnlinkAll ( i ) ;
57859: LD_VAR 0 1
57863: PPUSH
57864: CALL 57976 0 1
// continue ;
57868: GO 57750
// end ; HackCheckCapturedStatus ( i ) ;
57870: LD_VAR 0 1
57874: PPUSH
57875: CALL 58421 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
57879: LD_ADDR_VAR 0 2
57883: PUSH
57884: LD_INT 81
57886: PUSH
57887: LD_VAR 0 1
57891: PPUSH
57892: CALL_OW 255
57896: PUSH
57897: EMPTY
57898: LIST
57899: LIST
57900: PUSH
57901: LD_INT 33
57903: PUSH
57904: LD_INT 3
57906: PUSH
57907: EMPTY
57908: LIST
57909: LIST
57910: PUSH
57911: LD_INT 91
57913: PUSH
57914: LD_VAR 0 1
57918: PUSH
57919: LD_EXP 53
57923: PUSH
57924: EMPTY
57925: LIST
57926: LIST
57927: LIST
57928: PUSH
57929: LD_INT 50
57931: PUSH
57932: EMPTY
57933: LIST
57934: PUSH
57935: EMPTY
57936: LIST
57937: LIST
57938: LIST
57939: LIST
57940: PPUSH
57941: CALL_OW 69
57945: ST_TO_ADDR
// if not tmp then
57946: LD_VAR 0 2
57950: NOT
57951: IFFALSE 57955
// continue ;
57953: GO 57750
// HackLink ( i , tmp ) ;
57955: LD_VAR 0 1
57959: PPUSH
57960: LD_VAR 0 2
57964: PPUSH
57965: CALL 58112 0 2
// end ;
57969: GO 57750
57971: POP
57972: POP
// end ;
57973: PPOPN 2
57975: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
57976: LD_INT 0
57978: PPUSH
57979: PPUSH
57980: PPUSH
// if not hack in hackTanks then
57981: LD_VAR 0 1
57985: PUSH
57986: LD_EXP 50
57990: IN
57991: NOT
57992: IFFALSE 57996
// exit ;
57994: GO 58107
// index := GetElementIndex ( hackTanks , hack ) ;
57996: LD_ADDR_VAR 0 4
58000: PUSH
58001: LD_EXP 50
58005: PPUSH
58006: LD_VAR 0 1
58010: PPUSH
58011: CALL 7809 0 2
58015: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
58016: LD_EXP 51
58020: PUSH
58021: LD_VAR 0 4
58025: ARRAY
58026: IFFALSE 58107
// begin for i in hackTanksCaptured [ index ] do
58028: LD_ADDR_VAR 0 3
58032: PUSH
58033: LD_EXP 51
58037: PUSH
58038: LD_VAR 0 4
58042: ARRAY
58043: PUSH
58044: FOR_IN
58045: IFFALSE 58071
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
58047: LD_VAR 0 3
58051: PUSH
58052: LD_INT 1
58054: ARRAY
58055: PPUSH
58056: LD_VAR 0 3
58060: PUSH
58061: LD_INT 2
58063: ARRAY
58064: PPUSH
58065: CALL_OW 235
58069: GO 58044
58071: POP
58072: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
58073: LD_ADDR_EXP 51
58077: PUSH
58078: LD_EXP 51
58082: PPUSH
58083: LD_VAR 0 4
58087: PPUSH
58088: EMPTY
58089: PPUSH
58090: CALL_OW 1
58094: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
58095: LD_VAR 0 1
58099: PPUSH
58100: LD_INT 0
58102: PPUSH
58103: CALL_OW 505
// end ; end ;
58107: LD_VAR 0 2
58111: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
58112: LD_INT 0
58114: PPUSH
58115: PPUSH
58116: PPUSH
// if not hack in hackTanks or not vehicles then
58117: LD_VAR 0 1
58121: PUSH
58122: LD_EXP 50
58126: IN
58127: NOT
58128: IFTRUE 58137
58130: PUSH
58131: LD_VAR 0 2
58135: NOT
58136: OR
58137: IFFALSE 58141
// exit ;
58139: GO 58416
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
58141: LD_ADDR_VAR 0 2
58145: PUSH
58146: LD_VAR 0 1
58150: PPUSH
58151: LD_VAR 0 2
58155: PPUSH
58156: LD_INT 1
58158: PPUSH
58159: LD_INT 1
58161: PPUSH
58162: CALL 8461 0 4
58166: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
58167: LD_ADDR_VAR 0 5
58171: PUSH
58172: LD_EXP 50
58176: PPUSH
58177: LD_VAR 0 1
58181: PPUSH
58182: CALL 7809 0 2
58186: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
58187: LD_EXP 51
58191: PUSH
58192: LD_VAR 0 5
58196: ARRAY
58197: PUSH
58198: LD_EXP 52
58202: LESS
58203: IFFALSE 58392
// begin for i := 1 to vehicles do
58205: LD_ADDR_VAR 0 4
58209: PUSH
58210: DOUBLE
58211: LD_INT 1
58213: DEC
58214: ST_TO_ADDR
58215: LD_VAR 0 2
58219: PUSH
58220: FOR_TO
58221: IFFALSE 58390
// begin if hackTanksCaptured [ index ] = hackLimit then
58223: LD_EXP 51
58227: PUSH
58228: LD_VAR 0 5
58232: ARRAY
58233: PUSH
58234: LD_EXP 52
58238: EQUAL
58239: IFFALSE 58243
// break ;
58241: GO 58390
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
58243: LD_ADDR_EXP 54
58247: PUSH
58248: LD_EXP 54
58252: PPUSH
58253: LD_VAR 0 5
58257: PPUSH
58258: LD_EXP 54
58262: PUSH
58263: LD_VAR 0 5
58267: ARRAY
58268: PUSH
58269: LD_INT 1
58271: PLUS
58272: PPUSH
58273: CALL_OW 1
58277: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
58278: LD_ADDR_EXP 51
58282: PUSH
58283: LD_EXP 51
58287: PPUSH
58288: LD_VAR 0 5
58292: PUSH
58293: LD_EXP 51
58297: PUSH
58298: LD_VAR 0 5
58302: ARRAY
58303: PUSH
58304: LD_INT 1
58306: PLUS
58307: PUSH
58308: EMPTY
58309: LIST
58310: LIST
58311: PPUSH
58312: LD_VAR 0 2
58316: PUSH
58317: LD_VAR 0 4
58321: ARRAY
58322: PUSH
58323: LD_VAR 0 2
58327: PUSH
58328: LD_VAR 0 4
58332: ARRAY
58333: PPUSH
58334: CALL_OW 255
58338: PUSH
58339: EMPTY
58340: LIST
58341: LIST
58342: PPUSH
58343: CALL 8026 0 3
58347: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
58348: LD_VAR 0 2
58352: PUSH
58353: LD_VAR 0 4
58357: ARRAY
58358: PPUSH
58359: LD_VAR 0 1
58363: PPUSH
58364: CALL_OW 255
58368: PPUSH
58369: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
58373: LD_VAR 0 2
58377: PUSH
58378: LD_VAR 0 4
58382: ARRAY
58383: PPUSH
58384: CALL_OW 141
// end ;
58388: GO 58220
58390: POP
58391: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
58392: LD_VAR 0 1
58396: PPUSH
58397: LD_EXP 51
58401: PUSH
58402: LD_VAR 0 5
58406: ARRAY
58407: PUSH
58408: LD_INT 0
58410: PLUS
58411: PPUSH
58412: CALL_OW 505
// end ;
58416: LD_VAR 0 3
58420: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
58421: LD_INT 0
58423: PPUSH
58424: PPUSH
58425: PPUSH
58426: PPUSH
// if not hack in hackTanks then
58427: LD_VAR 0 1
58431: PUSH
58432: LD_EXP 50
58436: IN
58437: NOT
58438: IFFALSE 58442
// exit ;
58440: GO 58686
// index := GetElementIndex ( hackTanks , hack ) ;
58442: LD_ADDR_VAR 0 4
58446: PUSH
58447: LD_EXP 50
58451: PPUSH
58452: LD_VAR 0 1
58456: PPUSH
58457: CALL 7809 0 2
58461: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
58462: LD_ADDR_VAR 0 3
58466: PUSH
58467: DOUBLE
58468: LD_EXP 51
58472: PUSH
58473: LD_VAR 0 4
58477: ARRAY
58478: INC
58479: ST_TO_ADDR
58480: LD_INT 1
58482: PUSH
58483: FOR_DOWNTO
58484: IFFALSE 58660
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
58486: LD_ADDR_VAR 0 5
58490: PUSH
58491: LD_EXP 51
58495: PUSH
58496: LD_VAR 0 4
58500: ARRAY
58501: PUSH
58502: LD_VAR 0 3
58506: ARRAY
58507: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
58508: LD_VAR 0 5
58512: PUSH
58513: LD_INT 1
58515: ARRAY
58516: PPUSH
58517: CALL_OW 302
58521: NOT
58522: IFTRUE 58550
58524: PUSH
58525: LD_VAR 0 5
58529: PUSH
58530: LD_INT 1
58532: ARRAY
58533: PPUSH
58534: CALL_OW 255
58538: PUSH
58539: LD_VAR 0 1
58543: PPUSH
58544: CALL_OW 255
58548: NONEQUAL
58549: OR
58550: IFFALSE 58658
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
58552: LD_VAR 0 5
58556: PUSH
58557: LD_INT 1
58559: ARRAY
58560: PPUSH
58561: CALL_OW 305
58565: IFFALSE 58593
58567: PUSH
58568: LD_VAR 0 5
58572: PUSH
58573: LD_INT 1
58575: ARRAY
58576: PPUSH
58577: CALL_OW 255
58581: PUSH
58582: LD_VAR 0 1
58586: PPUSH
58587: CALL_OW 255
58591: EQUAL
58592: AND
58593: IFFALSE 58617
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
58595: LD_VAR 0 5
58599: PUSH
58600: LD_INT 1
58602: ARRAY
58603: PPUSH
58604: LD_VAR 0 5
58608: PUSH
58609: LD_INT 2
58611: ARRAY
58612: PPUSH
58613: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
58617: LD_ADDR_EXP 51
58621: PUSH
58622: LD_EXP 51
58626: PPUSH
58627: LD_VAR 0 4
58631: PPUSH
58632: LD_EXP 51
58636: PUSH
58637: LD_VAR 0 4
58641: ARRAY
58642: PPUSH
58643: LD_VAR 0 3
58647: PPUSH
58648: CALL_OW 3
58652: PPUSH
58653: CALL_OW 1
58657: ST_TO_ADDR
// end ; end ;
58658: GO 58483
58660: POP
58661: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
58662: LD_VAR 0 1
58666: PPUSH
58667: LD_EXP 51
58671: PUSH
58672: LD_VAR 0 4
58676: ARRAY
58677: PUSH
58678: LD_INT 0
58680: PLUS
58681: PPUSH
58682: CALL_OW 505
// end ;
58686: LD_VAR 0 2
58690: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
58691: LD_INT 0
58693: PPUSH
58694: PPUSH
58695: PPUSH
58696: PPUSH
// if not hack in hackTanks then
58697: LD_VAR 0 1
58701: PUSH
58702: LD_EXP 50
58706: IN
58707: NOT
58708: IFFALSE 58712
// exit ;
58710: GO 58797
// index := GetElementIndex ( hackTanks , hack ) ;
58712: LD_ADDR_VAR 0 5
58716: PUSH
58717: LD_EXP 50
58721: PPUSH
58722: LD_VAR 0 1
58726: PPUSH
58727: CALL 7809 0 2
58731: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
58732: LD_ADDR_VAR 0 4
58736: PUSH
58737: DOUBLE
58738: LD_INT 1
58740: DEC
58741: ST_TO_ADDR
58742: LD_EXP 51
58746: PUSH
58747: LD_VAR 0 5
58751: ARRAY
58752: PUSH
58753: FOR_TO
58754: IFFALSE 58795
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
58756: LD_EXP 51
58760: PUSH
58761: LD_VAR 0 5
58765: ARRAY
58766: PUSH
58767: LD_VAR 0 4
58771: ARRAY
58772: PUSH
58773: LD_INT 1
58775: ARRAY
58776: PUSH
58777: LD_VAR 0 2
58781: EQUAL
58782: IFFALSE 58793
// KillUnit ( vehicle ) ;
58784: LD_VAR 0 2
58788: PPUSH
58789: CALL_OW 66
58793: GO 58753
58795: POP
58796: POP
// end ;
58797: LD_VAR 0 3
58801: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
58802: LD_EXP 55
58806: NOT
58807: IFFALSE 58842
58809: GO 58811
58811: DISABLE
// begin initMiner := true ;
58812: LD_ADDR_EXP 55
58816: PUSH
58817: LD_INT 1
58819: ST_TO_ADDR
// minersList := [ ] ;
58820: LD_ADDR_EXP 56
58824: PUSH
58825: EMPTY
58826: ST_TO_ADDR
// minerMinesList := [ ] ;
58827: LD_ADDR_EXP 57
58831: PUSH
58832: EMPTY
58833: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
58834: LD_ADDR_EXP 58
58838: PUSH
58839: LD_INT 5
58841: ST_TO_ADDR
// end ;
58842: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
58843: LD_EXP 55
58847: IFFALSE 58865
58849: PUSH
58850: LD_INT 34
58852: PUSH
58853: LD_INT 81
58855: PUSH
58856: EMPTY
58857: LIST
58858: LIST
58859: PPUSH
58860: CALL_OW 69
58864: AND
58865: IFFALSE 59328
58867: GO 58869
58869: DISABLE
58870: LD_INT 0
58872: PPUSH
58873: PPUSH
58874: PPUSH
58875: PPUSH
// begin enable ;
58876: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
58877: LD_ADDR_VAR 0 1
58881: PUSH
58882: LD_INT 34
58884: PUSH
58885: LD_INT 81
58887: PUSH
58888: EMPTY
58889: LIST
58890: LIST
58891: PPUSH
58892: CALL_OW 69
58896: PUSH
58897: FOR_IN
58898: IFFALSE 58970
// begin if not i in minersList then
58900: LD_VAR 0 1
58904: PUSH
58905: LD_EXP 56
58909: IN
58910: NOT
58911: IFFALSE 58968
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
58913: LD_ADDR_EXP 56
58917: PUSH
58918: LD_EXP 56
58922: PPUSH
58923: LD_EXP 56
58927: PUSH
58928: LD_INT 1
58930: PLUS
58931: PPUSH
58932: LD_VAR 0 1
58936: PPUSH
58937: CALL_OW 1
58941: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
58942: LD_ADDR_EXP 57
58946: PUSH
58947: LD_EXP 57
58951: PPUSH
58952: LD_EXP 57
58956: PUSH
58957: LD_INT 1
58959: PLUS
58960: PPUSH
58961: EMPTY
58962: PPUSH
58963: CALL_OW 1
58967: ST_TO_ADDR
// end end ;
58968: GO 58897
58970: POP
58971: POP
// for i := minerMinesList downto 1 do
58972: LD_ADDR_VAR 0 1
58976: PUSH
58977: DOUBLE
58978: LD_EXP 57
58982: INC
58983: ST_TO_ADDR
58984: LD_INT 1
58986: PUSH
58987: FOR_DOWNTO
58988: IFFALSE 59326
// begin if IsLive ( minersList [ i ] ) then
58990: LD_EXP 56
58994: PUSH
58995: LD_VAR 0 1
58999: ARRAY
59000: PPUSH
59001: CALL_OW 300
59005: IFFALSE 59033
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
59007: LD_EXP 56
59011: PUSH
59012: LD_VAR 0 1
59016: ARRAY
59017: PPUSH
59018: LD_EXP 57
59022: PUSH
59023: LD_VAR 0 1
59027: ARRAY
59028: PPUSH
59029: CALL_OW 505
// if not minerMinesList [ i ] then
59033: LD_EXP 57
59037: PUSH
59038: LD_VAR 0 1
59042: ARRAY
59043: NOT
59044: IFFALSE 59048
// continue ;
59046: GO 58987
// for j := minerMinesList [ i ] downto 1 do
59048: LD_ADDR_VAR 0 2
59052: PUSH
59053: DOUBLE
59054: LD_EXP 57
59058: PUSH
59059: LD_VAR 0 1
59063: ARRAY
59064: INC
59065: ST_TO_ADDR
59066: LD_INT 1
59068: PUSH
59069: FOR_DOWNTO
59070: IFFALSE 59322
// begin side := GetSide ( minersList [ i ] ) ;
59072: LD_ADDR_VAR 0 3
59076: PUSH
59077: LD_EXP 56
59081: PUSH
59082: LD_VAR 0 1
59086: ARRAY
59087: PPUSH
59088: CALL_OW 255
59092: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
59093: LD_ADDR_VAR 0 4
59097: PUSH
59098: LD_EXP 57
59102: PUSH
59103: LD_VAR 0 1
59107: ARRAY
59108: PUSH
59109: LD_VAR 0 2
59113: ARRAY
59114: PUSH
59115: LD_INT 1
59117: ARRAY
59118: PPUSH
59119: LD_EXP 57
59123: PUSH
59124: LD_VAR 0 1
59128: ARRAY
59129: PUSH
59130: LD_VAR 0 2
59134: ARRAY
59135: PUSH
59136: LD_INT 2
59138: ARRAY
59139: PPUSH
59140: CALL_OW 428
59144: ST_TO_ADDR
// if not tmp then
59145: LD_VAR 0 4
59149: NOT
59150: IFFALSE 59154
// continue ;
59152: GO 59069
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
59154: LD_VAR 0 4
59158: PUSH
59159: LD_INT 81
59161: PUSH
59162: LD_VAR 0 3
59166: PUSH
59167: EMPTY
59168: LIST
59169: LIST
59170: PPUSH
59171: CALL_OW 69
59175: IN
59176: IFFALSE 59226
59178: PUSH
59179: LD_EXP 57
59183: PUSH
59184: LD_VAR 0 1
59188: ARRAY
59189: PUSH
59190: LD_VAR 0 2
59194: ARRAY
59195: PUSH
59196: LD_INT 1
59198: ARRAY
59199: PPUSH
59200: LD_EXP 57
59204: PUSH
59205: LD_VAR 0 1
59209: ARRAY
59210: PUSH
59211: LD_VAR 0 2
59215: ARRAY
59216: PUSH
59217: LD_INT 2
59219: ARRAY
59220: PPUSH
59221: CALL_OW 458
59225: AND
59226: IFFALSE 59320
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
59228: LD_EXP 57
59232: PUSH
59233: LD_VAR 0 1
59237: ARRAY
59238: PUSH
59239: LD_VAR 0 2
59243: ARRAY
59244: PUSH
59245: LD_INT 1
59247: ARRAY
59248: PPUSH
59249: LD_EXP 57
59253: PUSH
59254: LD_VAR 0 1
59258: ARRAY
59259: PUSH
59260: LD_VAR 0 2
59264: ARRAY
59265: PUSH
59266: LD_INT 2
59268: ARRAY
59269: PPUSH
59270: LD_VAR 0 3
59274: PPUSH
59275: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
59279: LD_ADDR_EXP 57
59283: PUSH
59284: LD_EXP 57
59288: PPUSH
59289: LD_VAR 0 1
59293: PPUSH
59294: LD_EXP 57
59298: PUSH
59299: LD_VAR 0 1
59303: ARRAY
59304: PPUSH
59305: LD_VAR 0 2
59309: PPUSH
59310: CALL_OW 3
59314: PPUSH
59315: CALL_OW 1
59319: ST_TO_ADDR
// end ; end ;
59320: GO 59069
59322: POP
59323: POP
// end ;
59324: GO 58987
59326: POP
59327: POP
// end ;
59328: PPOPN 4
59330: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
59331: LD_INT 0
59333: PPUSH
59334: PPUSH
// result := false ;
59335: LD_ADDR_VAR 0 4
59339: PUSH
59340: LD_INT 0
59342: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
59343: LD_VAR 0 1
59347: PPUSH
59348: CALL_OW 264
59352: PUSH
59353: LD_INT 81
59355: EQUAL
59356: NOT
59357: IFFALSE 59361
// exit ;
59359: GO 59605
// index := GetElementIndex ( minersList , unit ) ;
59361: LD_ADDR_VAR 0 5
59365: PUSH
59366: LD_EXP 56
59370: PPUSH
59371: LD_VAR 0 1
59375: PPUSH
59376: CALL 7809 0 2
59380: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
59381: LD_EXP 57
59385: PUSH
59386: LD_VAR 0 5
59390: ARRAY
59391: PUSH
59392: LD_EXP 58
59396: GREATEREQUAL
59397: IFFALSE 59401
// exit ;
59399: GO 59605
// ComMoveXY ( unit , x , y ) ;
59401: LD_VAR 0 1
59405: PPUSH
59406: LD_VAR 0 2
59410: PPUSH
59411: LD_VAR 0 3
59415: PPUSH
59416: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
59420: LD_INT 35
59422: PPUSH
59423: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
59427: LD_VAR 0 1
59431: PPUSH
59432: LD_VAR 0 2
59436: PPUSH
59437: LD_VAR 0 3
59441: PPUSH
59442: CALL 39855 0 3
59446: NOT
59447: IFFALSE 59460
59449: PUSH
59450: LD_VAR 0 1
59454: PPUSH
59455: CALL_OW 314
59459: AND
59460: IFFALSE 59464
// exit ;
59462: GO 59605
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
59464: LD_VAR 0 2
59468: PPUSH
59469: LD_VAR 0 3
59473: PPUSH
59474: CALL_OW 428
59478: PUSH
59479: LD_VAR 0 1
59483: EQUAL
59484: IFFALSE 59498
59486: PUSH
59487: LD_VAR 0 1
59491: PPUSH
59492: CALL_OW 314
59496: NOT
59497: AND
59498: IFFALSE 59420
// PlaySoundXY ( x , y , PlantMine ) ;
59500: LD_VAR 0 2
59504: PPUSH
59505: LD_VAR 0 3
59509: PPUSH
59510: LD_STRING PlantMine
59512: PPUSH
59513: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
59517: LD_VAR 0 2
59521: PPUSH
59522: LD_VAR 0 3
59526: PPUSH
59527: LD_VAR 0 1
59531: PPUSH
59532: CALL_OW 255
59536: PPUSH
59537: LD_INT 0
59539: PPUSH
59540: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
59544: LD_ADDR_EXP 57
59548: PUSH
59549: LD_EXP 57
59553: PPUSH
59554: LD_VAR 0 5
59558: PUSH
59559: LD_EXP 57
59563: PUSH
59564: LD_VAR 0 5
59568: ARRAY
59569: PUSH
59570: LD_INT 1
59572: PLUS
59573: PUSH
59574: EMPTY
59575: LIST
59576: LIST
59577: PPUSH
59578: LD_VAR 0 2
59582: PUSH
59583: LD_VAR 0 3
59587: PUSH
59588: EMPTY
59589: LIST
59590: LIST
59591: PPUSH
59592: CALL 8026 0 3
59596: ST_TO_ADDR
// result := true ;
59597: LD_ADDR_VAR 0 4
59601: PUSH
59602: LD_INT 1
59604: ST_TO_ADDR
// end ;
59605: LD_VAR 0 4
59609: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
59610: LD_INT 0
59612: PPUSH
59613: PPUSH
59614: PPUSH
// if not unit in minersList then
59615: LD_VAR 0 1
59619: PUSH
59620: LD_EXP 56
59624: IN
59625: NOT
59626: IFFALSE 59630
// exit ;
59628: GO 60024
// index := GetElementIndex ( minersList , unit ) ;
59630: LD_ADDR_VAR 0 6
59634: PUSH
59635: LD_EXP 56
59639: PPUSH
59640: LD_VAR 0 1
59644: PPUSH
59645: CALL 7809 0 2
59649: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
59650: LD_ADDR_VAR 0 5
59654: PUSH
59655: DOUBLE
59656: LD_EXP 57
59660: PUSH
59661: LD_VAR 0 6
59665: ARRAY
59666: INC
59667: ST_TO_ADDR
59668: LD_INT 1
59670: PUSH
59671: FOR_DOWNTO
59672: IFFALSE 59835
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
59674: LD_EXP 57
59678: PUSH
59679: LD_VAR 0 6
59683: ARRAY
59684: PUSH
59685: LD_VAR 0 5
59689: ARRAY
59690: PUSH
59691: LD_INT 1
59693: ARRAY
59694: PUSH
59695: LD_VAR 0 2
59699: EQUAL
59700: IFFALSE 59730
59702: PUSH
59703: LD_EXP 57
59707: PUSH
59708: LD_VAR 0 6
59712: ARRAY
59713: PUSH
59714: LD_VAR 0 5
59718: ARRAY
59719: PUSH
59720: LD_INT 2
59722: ARRAY
59723: PUSH
59724: LD_VAR 0 3
59728: EQUAL
59729: AND
59730: IFFALSE 59833
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
59732: LD_EXP 57
59736: PUSH
59737: LD_VAR 0 6
59741: ARRAY
59742: PUSH
59743: LD_VAR 0 5
59747: ARRAY
59748: PUSH
59749: LD_INT 1
59751: ARRAY
59752: PPUSH
59753: LD_EXP 57
59757: PUSH
59758: LD_VAR 0 6
59762: ARRAY
59763: PUSH
59764: LD_VAR 0 5
59768: ARRAY
59769: PUSH
59770: LD_INT 2
59772: ARRAY
59773: PPUSH
59774: LD_VAR 0 1
59778: PPUSH
59779: CALL_OW 255
59783: PPUSH
59784: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
59788: LD_ADDR_EXP 57
59792: PUSH
59793: LD_EXP 57
59797: PPUSH
59798: LD_VAR 0 6
59802: PPUSH
59803: LD_EXP 57
59807: PUSH
59808: LD_VAR 0 6
59812: ARRAY
59813: PPUSH
59814: LD_VAR 0 5
59818: PPUSH
59819: CALL_OW 3
59823: PPUSH
59824: CALL_OW 1
59828: ST_TO_ADDR
// exit ;
59829: POP
59830: POP
59831: GO 60024
// end ; end ;
59833: GO 59671
59835: POP
59836: POP
// for i := minerMinesList [ index ] downto 1 do
59837: LD_ADDR_VAR 0 5
59841: PUSH
59842: DOUBLE
59843: LD_EXP 57
59847: PUSH
59848: LD_VAR 0 6
59852: ARRAY
59853: INC
59854: ST_TO_ADDR
59855: LD_INT 1
59857: PUSH
59858: FOR_DOWNTO
59859: IFFALSE 60022
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
59861: LD_EXP 57
59865: PUSH
59866: LD_VAR 0 6
59870: ARRAY
59871: PUSH
59872: LD_VAR 0 5
59876: ARRAY
59877: PUSH
59878: LD_INT 1
59880: ARRAY
59881: PPUSH
59882: LD_EXP 57
59886: PUSH
59887: LD_VAR 0 6
59891: ARRAY
59892: PUSH
59893: LD_VAR 0 5
59897: ARRAY
59898: PUSH
59899: LD_INT 2
59901: ARRAY
59902: PPUSH
59903: LD_VAR 0 2
59907: PPUSH
59908: LD_VAR 0 3
59912: PPUSH
59913: CALL_OW 298
59917: PUSH
59918: LD_INT 6
59920: LESS
59921: IFFALSE 60020
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
59923: LD_EXP 57
59927: PUSH
59928: LD_VAR 0 6
59932: ARRAY
59933: PUSH
59934: LD_VAR 0 5
59938: ARRAY
59939: PUSH
59940: LD_INT 1
59942: ARRAY
59943: PPUSH
59944: LD_EXP 57
59948: PUSH
59949: LD_VAR 0 6
59953: ARRAY
59954: PUSH
59955: LD_VAR 0 5
59959: ARRAY
59960: PUSH
59961: LD_INT 2
59963: ARRAY
59964: PPUSH
59965: LD_VAR 0 1
59969: PPUSH
59970: CALL_OW 255
59974: PPUSH
59975: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
59979: LD_ADDR_EXP 57
59983: PUSH
59984: LD_EXP 57
59988: PPUSH
59989: LD_VAR 0 6
59993: PPUSH
59994: LD_EXP 57
59998: PUSH
59999: LD_VAR 0 6
60003: ARRAY
60004: PPUSH
60005: LD_VAR 0 5
60009: PPUSH
60010: CALL_OW 3
60014: PPUSH
60015: CALL_OW 1
60019: ST_TO_ADDR
// end ; end ;
60020: GO 59858
60022: POP
60023: POP
// end ;
60024: LD_VAR 0 4
60028: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
60029: LD_INT 0
60031: PPUSH
60032: PPUSH
60033: PPUSH
60034: PPUSH
60035: PPUSH
60036: PPUSH
60037: PPUSH
60038: PPUSH
60039: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
60040: LD_VAR 0 1
60044: PPUSH
60045: CALL_OW 264
60049: PUSH
60050: LD_INT 81
60052: EQUAL
60053: NOT
60054: IFTRUE 60069
60056: PUSH
60057: LD_VAR 0 1
60061: PUSH
60062: LD_EXP 56
60066: IN
60067: NOT
60068: OR
60069: IFFALSE 60073
// exit ;
60071: GO 60399
// index := GetElementIndex ( minersList , unit ) ;
60073: LD_ADDR_VAR 0 6
60077: PUSH
60078: LD_EXP 56
60082: PPUSH
60083: LD_VAR 0 1
60087: PPUSH
60088: CALL 7809 0 2
60092: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
60093: LD_ADDR_VAR 0 8
60097: PUSH
60098: LD_EXP 58
60102: PUSH
60103: LD_EXP 57
60107: PUSH
60108: LD_VAR 0 6
60112: ARRAY
60113: MINUS
60114: ST_TO_ADDR
// if not minesFreeAmount then
60115: LD_VAR 0 8
60119: NOT
60120: IFFALSE 60124
// exit ;
60122: GO 60399
// tmp := [ ] ;
60124: LD_ADDR_VAR 0 7
60128: PUSH
60129: EMPTY
60130: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
60131: LD_ADDR_VAR 0 5
60135: PUSH
60136: DOUBLE
60137: LD_INT 1
60139: DEC
60140: ST_TO_ADDR
60141: LD_VAR 0 8
60145: PUSH
60146: FOR_TO
60147: IFFALSE 60346
// begin _d := rand ( 0 , 5 ) ;
60149: LD_ADDR_VAR 0 11
60153: PUSH
60154: LD_INT 0
60156: PPUSH
60157: LD_INT 5
60159: PPUSH
60160: CALL_OW 12
60164: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
60165: LD_ADDR_VAR 0 12
60169: PUSH
60170: LD_INT 2
60172: PPUSH
60173: LD_INT 6
60175: PPUSH
60176: CALL_OW 12
60180: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
60181: LD_ADDR_VAR 0 9
60185: PUSH
60186: LD_VAR 0 2
60190: PPUSH
60191: LD_VAR 0 11
60195: PPUSH
60196: LD_VAR 0 12
60200: PPUSH
60201: CALL_OW 272
60205: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
60206: LD_ADDR_VAR 0 10
60210: PUSH
60211: LD_VAR 0 3
60215: PPUSH
60216: LD_VAR 0 11
60220: PPUSH
60221: LD_VAR 0 12
60225: PPUSH
60226: CALL_OW 273
60230: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
60231: LD_VAR 0 9
60235: PPUSH
60236: LD_VAR 0 10
60240: PPUSH
60241: CALL_OW 488
60245: IFFALSE 60269
60247: PUSH
60248: LD_VAR 0 9
60252: PUSH
60253: LD_VAR 0 10
60257: PUSH
60258: EMPTY
60259: LIST
60260: LIST
60261: PUSH
60262: LD_VAR 0 7
60266: IN
60267: NOT
60268: AND
60269: IFFALSE 60288
60271: PUSH
60272: LD_VAR 0 9
60276: PPUSH
60277: LD_VAR 0 10
60281: PPUSH
60282: CALL_OW 458
60286: NOT
60287: AND
60288: IFFALSE 60330
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
60290: LD_ADDR_VAR 0 7
60294: PUSH
60295: LD_VAR 0 7
60299: PPUSH
60300: LD_VAR 0 7
60304: PUSH
60305: LD_INT 1
60307: PLUS
60308: PPUSH
60309: LD_VAR 0 9
60313: PUSH
60314: LD_VAR 0 10
60318: PUSH
60319: EMPTY
60320: LIST
60321: LIST
60322: PPUSH
60323: CALL_OW 1
60327: ST_TO_ADDR
60328: GO 60344
// i := i - 1 ;
60330: LD_ADDR_VAR 0 5
60334: PUSH
60335: LD_VAR 0 5
60339: PUSH
60340: LD_INT 1
60342: MINUS
60343: ST_TO_ADDR
// end ;
60344: GO 60146
60346: POP
60347: POP
// for i in tmp do
60348: LD_ADDR_VAR 0 5
60352: PUSH
60353: LD_VAR 0 7
60357: PUSH
60358: FOR_IN
60359: IFFALSE 60397
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
60361: LD_VAR 0 1
60365: PPUSH
60366: LD_VAR 0 5
60370: PUSH
60371: LD_INT 1
60373: ARRAY
60374: PPUSH
60375: LD_VAR 0 5
60379: PUSH
60380: LD_INT 2
60382: ARRAY
60383: PPUSH
60384: CALL 59331 0 3
60388: NOT
60389: IFFALSE 60395
// exit ;
60391: POP
60392: POP
60393: GO 60399
60395: GO 60358
60397: POP
60398: POP
// end ;
60399: LD_VAR 0 4
60403: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
60404: LD_INT 0
60406: PPUSH
60407: PPUSH
60408: PPUSH
60409: PPUSH
60410: PPUSH
60411: PPUSH
60412: PPUSH
60413: PPUSH
60414: PPUSH
// if GetClass ( unit ) <> class_sniper then
60415: LD_VAR 0 1
60419: PPUSH
60420: CALL_OW 257
60424: PUSH
60425: LD_INT 5
60427: NONEQUAL
60428: IFFALSE 60432
// exit ;
60430: GO 60902
// dist := 8 ;
60432: LD_ADDR_VAR 0 5
60436: PUSH
60437: LD_INT 8
60439: ST_TO_ADDR
// viewRange := 12 ;
60440: LD_ADDR_VAR 0 8
60444: PUSH
60445: LD_INT 12
60447: ST_TO_ADDR
// side := GetSide ( unit ) ;
60448: LD_ADDR_VAR 0 6
60452: PUSH
60453: LD_VAR 0 1
60457: PPUSH
60458: CALL_OW 255
60462: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
60463: LD_INT 61
60465: PPUSH
60466: LD_VAR 0 6
60470: PPUSH
60471: CALL_OW 321
60475: PUSH
60476: LD_INT 2
60478: EQUAL
60479: IFFALSE 60489
// viewRange := 16 ;
60481: LD_ADDR_VAR 0 8
60485: PUSH
60486: LD_INT 16
60488: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
60489: LD_VAR 0 1
60493: PPUSH
60494: LD_VAR 0 2
60498: PPUSH
60499: LD_VAR 0 3
60503: PPUSH
60504: CALL_OW 297
60508: PUSH
60509: LD_VAR 0 5
60513: GREATER
60514: IFFALSE 60593
// begin ComMoveXY ( unit , x , y ) ;
60516: LD_VAR 0 1
60520: PPUSH
60521: LD_VAR 0 2
60525: PPUSH
60526: LD_VAR 0 3
60530: PPUSH
60531: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
60535: LD_INT 35
60537: PPUSH
60538: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
60542: LD_VAR 0 1
60546: PPUSH
60547: LD_VAR 0 2
60551: PPUSH
60552: LD_VAR 0 3
60556: PPUSH
60557: CALL 39855 0 3
60561: NOT
60562: IFFALSE 60566
// exit ;
60564: GO 60902
// until GetDistUnitXY ( unit , x , y ) < dist ;
60566: LD_VAR 0 1
60570: PPUSH
60571: LD_VAR 0 2
60575: PPUSH
60576: LD_VAR 0 3
60580: PPUSH
60581: CALL_OW 297
60585: PUSH
60586: LD_VAR 0 5
60590: LESS
60591: IFFALSE 60535
// end ; ComTurnXY ( unit , x , y ) ;
60593: LD_VAR 0 1
60597: PPUSH
60598: LD_VAR 0 2
60602: PPUSH
60603: LD_VAR 0 3
60607: PPUSH
60608: CALL_OW 118
// repeat if Multiplayer then
60612: LD_OWVAR 4
60616: IFFALSE 60627
// wait ( 35 ) else
60618: LD_INT 35
60620: PPUSH
60621: CALL_OW 67
60625: GO 60634
// wait ( 5 ) ;
60627: LD_INT 5
60629: PPUSH
60630: CALL_OW 67
// _d := GetDir ( unit ) ;
60634: LD_ADDR_VAR 0 11
60638: PUSH
60639: LD_VAR 0 1
60643: PPUSH
60644: CALL_OW 254
60648: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
60649: LD_ADDR_VAR 0 7
60653: PUSH
60654: LD_VAR 0 1
60658: PPUSH
60659: CALL_OW 250
60663: PPUSH
60664: LD_VAR 0 1
60668: PPUSH
60669: CALL_OW 251
60673: PPUSH
60674: LD_VAR 0 2
60678: PPUSH
60679: LD_VAR 0 3
60683: PPUSH
60684: CALL 42491 0 4
60688: ST_TO_ADDR
// until dir = _d ;
60689: LD_VAR 0 7
60693: PUSH
60694: LD_VAR 0 11
60698: EQUAL
60699: IFFALSE 60612
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
60701: LD_ADDR_VAR 0 9
60705: PUSH
60706: LD_VAR 0 1
60710: PPUSH
60711: CALL_OW 250
60715: PPUSH
60716: LD_VAR 0 7
60720: PPUSH
60721: LD_VAR 0 5
60725: PPUSH
60726: CALL_OW 272
60730: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
60731: LD_ADDR_VAR 0 10
60735: PUSH
60736: LD_VAR 0 1
60740: PPUSH
60741: CALL_OW 251
60745: PPUSH
60746: LD_VAR 0 7
60750: PPUSH
60751: LD_VAR 0 5
60755: PPUSH
60756: CALL_OW 273
60760: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
60761: LD_VAR 0 9
60765: PPUSH
60766: LD_VAR 0 10
60770: PPUSH
60771: CALL_OW 488
60775: NOT
60776: IFFALSE 60780
// exit ;
60778: GO 60902
// ComAnimCustom ( unit , 1 ) ;
60780: LD_VAR 0 1
60784: PPUSH
60785: LD_INT 1
60787: PPUSH
60788: CALL_OW 592
// p := 0 ;
60792: LD_ADDR_VAR 0 12
60796: PUSH
60797: LD_INT 0
60799: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
60800: LD_VAR 0 9
60804: PPUSH
60805: LD_VAR 0 10
60809: PPUSH
60810: LD_VAR 0 6
60814: PPUSH
60815: LD_VAR 0 8
60819: PPUSH
60820: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
60824: LD_INT 35
60826: PPUSH
60827: CALL_OW 67
// p := Inc ( p ) ;
60831: LD_ADDR_VAR 0 12
60835: PUSH
60836: LD_VAR 0 12
60840: PPUSH
60841: CALL 42447 0 1
60845: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
60846: LD_VAR 0 12
60850: PUSH
60851: LD_INT 3
60853: EQUAL
60854: IFTRUE 60868
60856: PUSH
60857: LD_VAR 0 1
60861: PPUSH
60862: CALL_OW 302
60866: NOT
60867: OR
60868: IFTRUE 60881
60870: PUSH
60871: LD_VAR 0 1
60875: PPUSH
60876: CALL_OW 301
60880: OR
60881: IFFALSE 60824
// RemoveSeeing ( _x , _y , side ) ;
60883: LD_VAR 0 9
60887: PPUSH
60888: LD_VAR 0 10
60892: PPUSH
60893: LD_VAR 0 6
60897: PPUSH
60898: CALL_OW 331
// end ; end_of_file
60902: LD_VAR 0 4
60906: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
60907: PPOPN 6
60909: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
60910: LD_EXP 3
60914: PUSH
60915: LD_INT 4
60917: EQUAL
60918: IFFALSE 60954
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
60920: LD_STRING setGameDifficulty(
60922: PUSH
60923: LD_OWVAR 67
60927: STR
60928: PUSH
60929: LD_STRING )
60931: STR
60932: PPUSH
60933: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
60937: LD_STRING displayDifficulty(
60939: PUSH
60940: LD_OWVAR 67
60944: STR
60945: PUSH
60946: LD_STRING )
60948: STR
60949: PPUSH
60950: CALL_OW 559
// end ; SOS_MapStart ( ) ;
60954: CALL 60983 0 0
// end ; end_of_file
60958: PPOPN 1
60960: END
// every 0 0$1 do
60961: GO 60963
60963: DISABLE
// begin enable ;
60964: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
60965: LD_STRING updateTimer(
60967: PUSH
60968: LD_OWVAR 1
60972: STR
60973: PUSH
60974: LD_STRING );
60976: STR
60977: PPUSH
60978: CALL_OW 559
// end ;
60982: END
// export function SOS_MapStart ( ) ; begin
60983: LD_INT 0
60985: PPUSH
// UpdateFactoryWaypoints ( ) ;
60986: CALL 61917 0 0
// UpdateWarehouseGatheringPoints ( ) ;
60990: CALL 62169 0 0
// ParseMultiDataToLua ( ) ;
60994: CALL 62316 0 0
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
60998: LD_STRING setSpecLogoNumber(
61000: PUSH
61001: LD_INT 2
61003: STR
61004: PUSH
61005: LD_STRING ,
61007: STR
61008: PUSH
61009: LD_INT 1
61011: STR
61012: PUSH
61013: LD_STRING )
61015: STR
61016: PPUSH
61017: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
61021: LD_STRING setSpecLogoNumber(
61023: PUSH
61024: LD_INT 3
61026: STR
61027: PUSH
61028: LD_STRING ,
61030: STR
61031: PUSH
61032: LD_INT 2
61034: STR
61035: PUSH
61036: LD_STRING )
61038: STR
61039: PPUSH
61040: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
61044: LD_STRING setSpecLogoNumber(
61046: PUSH
61047: LD_INT 4
61049: STR
61050: PUSH
61051: LD_STRING ,
61053: STR
61054: PUSH
61055: LD_INT 3
61057: STR
61058: PUSH
61059: LD_STRING )
61061: STR
61062: PPUSH
61063: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
61067: LD_STRING setSpecLogoNumber(
61069: PUSH
61070: LD_INT 5
61072: STR
61073: PUSH
61074: LD_STRING ,
61076: STR
61077: PUSH
61078: LD_INT 4
61080: STR
61081: PUSH
61082: LD_STRING )
61084: STR
61085: PPUSH
61086: CALL_OW 559
// end ;
61090: LD_VAR 0 1
61094: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
61095: LD_INT 0
61097: PPUSH
61098: PPUSH
61099: PPUSH
61100: PPUSH
61101: PPUSH
61102: PPUSH
61103: PPUSH
61104: PPUSH
61105: PPUSH
// for i := 1 to 8 do
61106: LD_ADDR_VAR 0 2
61110: PUSH
61111: DOUBLE
61112: LD_INT 1
61114: DEC
61115: ST_TO_ADDR
61116: LD_INT 8
61118: PUSH
61119: FOR_TO
61120: IFFALSE 61505
// begin if mpSidePositions [ i ] then
61122: LD_EXP 7
61126: PUSH
61127: LD_VAR 0 2
61131: ARRAY
61132: IFFALSE 61503
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
61134: LD_ADDR_VAR 0 7
61138: PUSH
61139: LD_INT 22
61141: PUSH
61142: LD_VAR 0 2
61146: PUSH
61147: EMPTY
61148: LIST
61149: LIST
61150: PUSH
61151: LD_INT 21
61153: PUSH
61154: LD_INT 1
61156: PUSH
61157: EMPTY
61158: LIST
61159: LIST
61160: PUSH
61161: EMPTY
61162: LIST
61163: LIST
61164: PPUSH
61165: CALL_OW 69
61169: PPUSH
61170: CALL 5142 0 1
61174: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
61175: LD_ADDR_VAR 0 9
61179: PUSH
61180: LD_INT 22
61182: PUSH
61183: LD_VAR 0 2
61187: PUSH
61188: EMPTY
61189: LIST
61190: LIST
61191: PUSH
61192: LD_INT 2
61194: PUSH
61195: LD_INT 30
61197: PUSH
61198: LD_INT 0
61200: PUSH
61201: EMPTY
61202: LIST
61203: LIST
61204: PUSH
61205: LD_INT 30
61207: PUSH
61208: LD_INT 1
61210: PUSH
61211: EMPTY
61212: LIST
61213: LIST
61214: PUSH
61215: EMPTY
61216: LIST
61217: LIST
61218: LIST
61219: PUSH
61220: EMPTY
61221: LIST
61222: LIST
61223: PPUSH
61224: CALL_OW 69
61228: ST_TO_ADDR
// crates := 0 ;
61229: LD_ADDR_VAR 0 4
61233: PUSH
61234: LD_INT 0
61236: ST_TO_ADDR
// oil := 0 ;
61237: LD_ADDR_VAR 0 5
61241: PUSH
61242: LD_INT 0
61244: ST_TO_ADDR
// sib := 0 ;
61245: LD_ADDR_VAR 0 6
61249: PUSH
61250: LD_INT 0
61252: ST_TO_ADDR
// if bases then
61253: LD_VAR 0 9
61257: IFFALSE 61363
// begin for j in bases do
61259: LD_ADDR_VAR 0 3
61263: PUSH
61264: LD_VAR 0 9
61268: PUSH
61269: FOR_IN
61270: IFFALSE 61361
// begin base := GetBase ( j ) ;
61272: LD_ADDR_VAR 0 8
61276: PUSH
61277: LD_VAR 0 3
61281: PPUSH
61282: CALL_OW 274
61286: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
61287: LD_ADDR_VAR 0 4
61291: PUSH
61292: LD_VAR 0 4
61296: PUSH
61297: LD_VAR 0 8
61301: PPUSH
61302: LD_INT 1
61304: PPUSH
61305: CALL_OW 275
61309: PLUS
61310: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
61311: LD_ADDR_VAR 0 5
61315: PUSH
61316: LD_VAR 0 5
61320: PUSH
61321: LD_VAR 0 8
61325: PPUSH
61326: LD_INT 2
61328: PPUSH
61329: CALL_OW 275
61333: PLUS
61334: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
61335: LD_ADDR_VAR 0 6
61339: PUSH
61340: LD_VAR 0 6
61344: PUSH
61345: LD_VAR 0 8
61349: PPUSH
61350: LD_INT 3
61352: PPUSH
61353: CALL_OW 275
61357: PLUS
61358: ST_TO_ADDR
// end ;
61359: GO 61269
61361: POP
61362: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
61363: LD_STRING setSpecText(
61365: PUSH
61366: LD_VAR 0 2
61370: STR
61371: PUSH
61372: LD_STRING ,
61374: STR
61375: PUSH
61376: LD_INT 2
61378: STR
61379: PUSH
61380: LD_STRING ,
61382: STR
61383: PUSH
61384: LD_VAR 0 4
61388: STR
61389: PUSH
61390: LD_STRING )
61392: STR
61393: PPUSH
61394: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
61398: LD_STRING setSpecText(
61400: PUSH
61401: LD_VAR 0 2
61405: STR
61406: PUSH
61407: LD_STRING ,
61409: STR
61410: PUSH
61411: LD_INT 3
61413: STR
61414: PUSH
61415: LD_STRING ,
61417: STR
61418: PUSH
61419: LD_VAR 0 5
61423: STR
61424: PUSH
61425: LD_STRING )
61427: STR
61428: PPUSH
61429: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
61433: LD_STRING setSpecText(
61435: PUSH
61436: LD_VAR 0 2
61440: STR
61441: PUSH
61442: LD_STRING ,
61444: STR
61445: PUSH
61446: LD_INT 4
61448: STR
61449: PUSH
61450: LD_STRING ,
61452: STR
61453: PUSH
61454: LD_VAR 0 6
61458: STR
61459: PUSH
61460: LD_STRING )
61462: STR
61463: PPUSH
61464: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
61468: LD_STRING setSpecText(
61470: PUSH
61471: LD_VAR 0 2
61475: STR
61476: PUSH
61477: LD_STRING ,
61479: STR
61480: PUSH
61481: LD_INT 5
61483: STR
61484: PUSH
61485: LD_STRING ,
61487: STR
61488: PUSH
61489: LD_VAR 0 7
61493: STR
61494: PUSH
61495: LD_STRING )
61497: STR
61498: PPUSH
61499: CALL_OW 559
// end ; end ;
61503: GO 61119
61505: POP
61506: POP
// end ;
61507: LD_VAR 0 1
61511: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
61512: LD_INT 2
61514: PUSH
61515: LD_INT 30
61517: PUSH
61518: LD_INT 0
61520: PUSH
61521: EMPTY
61522: LIST
61523: LIST
61524: PUSH
61525: LD_INT 30
61527: PUSH
61528: LD_INT 1
61530: PUSH
61531: EMPTY
61532: LIST
61533: LIST
61534: PUSH
61535: EMPTY
61536: LIST
61537: LIST
61538: LIST
61539: PPUSH
61540: CALL_OW 69
61544: IFFALSE 61554
61546: GO 61548
61548: DISABLE
// begin enable ;
61549: ENABLE
// UpdateSpectatorBar ;
61550: CALL 61095 0 0
// end ;
61554: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
61555: LD_INT 0
61557: PPUSH
// end ;
61558: LD_VAR 0 12
61562: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
61563: LD_INT 0
61565: PPUSH
61566: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
61567: LD_VAR 0 1
61571: NOT
61572: IFTRUE 61591
61574: PUSH
61575: LD_VAR 0 2
61579: PPUSH
61580: LD_VAR 0 3
61584: PPUSH
61585: CALL_OW 488
61589: NOT
61590: OR
61591: IFTRUE 61626
61593: PUSH
61594: LD_VAR 0 1
61598: PPUSH
61599: CALL_OW 266
61603: PUSH
61604: LD_INT 3
61606: NONEQUAL
61607: IFFALSE 61625
61609: PUSH
61610: LD_VAR 0 1
61614: PPUSH
61615: CALL_OW 247
61619: PUSH
61620: LD_INT 1
61622: EQUAL
61623: NOT
61624: AND
61625: OR
61626: IFFALSE 61630
// exit ;
61628: GO 61912
// if GetType ( factory ) = unit_human then
61630: LD_VAR 0 1
61634: PPUSH
61635: CALL_OW 247
61639: PUSH
61640: LD_INT 1
61642: EQUAL
61643: IFFALSE 61660
// factory := IsInUnit ( factory ) ;
61645: LD_ADDR_VAR 0 1
61649: PUSH
61650: LD_VAR 0 1
61654: PPUSH
61655: CALL_OW 310
61659: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
61660: LD_VAR 0 1
61664: PPUSH
61665: CALL_OW 266
61669: PUSH
61670: LD_INT 3
61672: NONEQUAL
61673: IFFALSE 61677
// exit ;
61675: GO 61912
// for i := 1 to Count ( factoryWaypoints ) do
61677: LD_ADDR_VAR 0 5
61681: PUSH
61682: DOUBLE
61683: LD_INT 1
61685: DEC
61686: ST_TO_ADDR
61687: LD_EXP 59
61691: PPUSH
61692: CALL 5142 0 1
61696: PUSH
61697: FOR_TO
61698: IFFALSE 61860
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
61700: LD_VAR 0 2
61704: PPUSH
61705: LD_VAR 0 3
61709: PPUSH
61710: CALL_OW 428
61714: PUSH
61715: LD_EXP 59
61719: PUSH
61720: LD_VAR 0 5
61724: ARRAY
61725: PUSH
61726: LD_INT 2
61728: ARRAY
61729: EQUAL
61730: IFFALSE 61762
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
61732: LD_ADDR_EXP 59
61736: PUSH
61737: LD_EXP 59
61741: PPUSH
61742: LD_VAR 0 5
61746: PPUSH
61747: CALL_OW 3
61751: ST_TO_ADDR
// UpdateFactoryWaypoints ;
61752: CALL 61917 0 0
// exit ;
61756: POP
61757: POP
61758: GO 61912
// end else
61760: GO 61858
// if factory = factoryWaypoints [ i ] [ 2 ] then
61762: LD_VAR 0 1
61766: PUSH
61767: LD_EXP 59
61771: PUSH
61772: LD_VAR 0 5
61776: ARRAY
61777: PUSH
61778: LD_INT 2
61780: ARRAY
61781: EQUAL
61782: IFFALSE 61858
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
61784: LD_ADDR_EXP 59
61788: PUSH
61789: LD_EXP 59
61793: PPUSH
61794: LD_VAR 0 5
61798: PPUSH
61799: CALL_OW 3
61803: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
61804: LD_ADDR_EXP 59
61808: PUSH
61809: LD_EXP 59
61813: PPUSH
61814: LD_VAR 0 1
61818: PPUSH
61819: CALL_OW 255
61823: PUSH
61824: LD_VAR 0 1
61828: PUSH
61829: LD_VAR 0 2
61833: PUSH
61834: LD_VAR 0 3
61838: PUSH
61839: EMPTY
61840: LIST
61841: LIST
61842: LIST
61843: LIST
61844: PPUSH
61845: CALL 41074 0 2
61849: ST_TO_ADDR
// UpdateFactoryWaypoints ;
61850: CALL 61917 0 0
// exit ;
61854: POP
61855: POP
61856: GO 61912
// end ; end ;
61858: GO 61697
61860: POP
61861: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
61862: LD_ADDR_EXP 59
61866: PUSH
61867: LD_EXP 59
61871: PPUSH
61872: LD_VAR 0 1
61876: PPUSH
61877: CALL_OW 255
61881: PUSH
61882: LD_VAR 0 1
61886: PUSH
61887: LD_VAR 0 2
61891: PUSH
61892: LD_VAR 0 3
61896: PUSH
61897: EMPTY
61898: LIST
61899: LIST
61900: LIST
61901: LIST
61902: PPUSH
61903: CALL 41074 0 2
61907: ST_TO_ADDR
// UpdateFactoryWaypoints ;
61908: CALL 61917 0 0
// end ;
61912: LD_VAR 0 4
61916: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
61917: LD_INT 0
61919: PPUSH
61920: PPUSH
61921: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
61922: LD_STRING resetFactoryWaypoint();
61924: PPUSH
61925: CALL_OW 559
// if factoryWaypoints then
61929: LD_EXP 59
61933: IFFALSE 62054
// begin list := factoryWaypoints ;
61935: LD_ADDR_VAR 0 3
61939: PUSH
61940: LD_EXP 59
61944: ST_TO_ADDR
// for i := 1 to list do
61945: LD_ADDR_VAR 0 2
61949: PUSH
61950: DOUBLE
61951: LD_INT 1
61953: DEC
61954: ST_TO_ADDR
61955: LD_VAR 0 3
61959: PUSH
61960: FOR_TO
61961: IFFALSE 62052
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
61963: LD_STRING setFactoryWaypointXY(
61965: PUSH
61966: LD_VAR 0 3
61970: PUSH
61971: LD_VAR 0 2
61975: ARRAY
61976: PUSH
61977: LD_INT 1
61979: ARRAY
61980: STR
61981: PUSH
61982: LD_STRING ,
61984: STR
61985: PUSH
61986: LD_VAR 0 3
61990: PUSH
61991: LD_VAR 0 2
61995: ARRAY
61996: PUSH
61997: LD_INT 2
61999: ARRAY
62000: STR
62001: PUSH
62002: LD_STRING ,
62004: STR
62005: PUSH
62006: LD_VAR 0 3
62010: PUSH
62011: LD_VAR 0 2
62015: ARRAY
62016: PUSH
62017: LD_INT 3
62019: ARRAY
62020: STR
62021: PUSH
62022: LD_STRING ,
62024: STR
62025: PUSH
62026: LD_VAR 0 3
62030: PUSH
62031: LD_VAR 0 2
62035: ARRAY
62036: PUSH
62037: LD_INT 4
62039: ARRAY
62040: STR
62041: PUSH
62042: LD_STRING )
62044: STR
62045: PPUSH
62046: CALL_OW 559
62050: GO 61960
62052: POP
62053: POP
// end ; end ;
62054: LD_VAR 0 1
62058: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
62059: LD_INT 0
62061: PPUSH
// if HexInfo ( x , y ) = warehouse then
62062: LD_VAR 0 2
62066: PPUSH
62067: LD_VAR 0 3
62071: PPUSH
62072: CALL_OW 428
62076: PUSH
62077: LD_VAR 0 1
62081: EQUAL
62082: IFFALSE 62109
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
62084: LD_ADDR_EXP 61
62088: PUSH
62089: LD_EXP 61
62093: PPUSH
62094: LD_VAR 0 1
62098: PPUSH
62099: LD_INT 0
62101: PPUSH
62102: CALL_OW 1
62106: ST_TO_ADDR
62107: GO 62160
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
62109: LD_ADDR_EXP 61
62113: PUSH
62114: LD_EXP 61
62118: PPUSH
62119: LD_VAR 0 1
62123: PPUSH
62124: LD_VAR 0 1
62128: PPUSH
62129: CALL_OW 255
62133: PUSH
62134: LD_VAR 0 1
62138: PUSH
62139: LD_VAR 0 2
62143: PUSH
62144: LD_VAR 0 3
62148: PUSH
62149: EMPTY
62150: LIST
62151: LIST
62152: LIST
62153: LIST
62154: PPUSH
62155: CALL_OW 1
62159: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
62160: CALL 62169 0 0
// end ;
62164: LD_VAR 0 4
62168: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
62169: LD_INT 0
62171: PPUSH
62172: PPUSH
62173: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
62174: LD_STRING resetWarehouseGatheringPoints();
62176: PPUSH
62177: CALL_OW 559
// if warehouseGatheringPoints then
62181: LD_EXP 61
62185: IFFALSE 62311
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
62187: LD_ADDR_VAR 0 3
62191: PUSH
62192: LD_EXP 61
62196: PPUSH
62197: CALL 45008 0 1
62201: ST_TO_ADDR
// for i := 1 to list do
62202: LD_ADDR_VAR 0 2
62206: PUSH
62207: DOUBLE
62208: LD_INT 1
62210: DEC
62211: ST_TO_ADDR
62212: LD_VAR 0 3
62216: PUSH
62217: FOR_TO
62218: IFFALSE 62309
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
62220: LD_STRING setWarehouseGatheringPointXY(
62222: PUSH
62223: LD_VAR 0 3
62227: PUSH
62228: LD_VAR 0 2
62232: ARRAY
62233: PUSH
62234: LD_INT 1
62236: ARRAY
62237: STR
62238: PUSH
62239: LD_STRING ,
62241: STR
62242: PUSH
62243: LD_VAR 0 3
62247: PUSH
62248: LD_VAR 0 2
62252: ARRAY
62253: PUSH
62254: LD_INT 2
62256: ARRAY
62257: STR
62258: PUSH
62259: LD_STRING ,
62261: STR
62262: PUSH
62263: LD_VAR 0 3
62267: PUSH
62268: LD_VAR 0 2
62272: ARRAY
62273: PUSH
62274: LD_INT 3
62276: ARRAY
62277: STR
62278: PUSH
62279: LD_STRING ,
62281: STR
62282: PUSH
62283: LD_VAR 0 3
62287: PUSH
62288: LD_VAR 0 2
62292: ARRAY
62293: PUSH
62294: LD_INT 4
62296: ARRAY
62297: STR
62298: PUSH
62299: LD_STRING )
62301: STR
62302: PPUSH
62303: CALL_OW 559
62307: GO 62217
62309: POP
62310: POP
// end ; end ;
62311: LD_VAR 0 1
62315: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
62316: LD_INT 0
62318: PPUSH
62319: PPUSH
// if not mpSidePositions then
62320: LD_EXP 7
62324: NOT
62325: IFFALSE 62329
// exit ;
62327: GO 62400
// result :=  ;
62329: LD_ADDR_VAR 0 1
62333: PUSH
62334: LD_STRING 
62336: ST_TO_ADDR
// for i := 1 to 8 do
62337: LD_ADDR_VAR 0 2
62341: PUSH
62342: DOUBLE
62343: LD_INT 1
62345: DEC
62346: ST_TO_ADDR
62347: LD_INT 8
62349: PUSH
62350: FOR_TO
62351: IFFALSE 62381
// begin result := result & mpSidePositions [ i ] & ; ;
62353: LD_ADDR_VAR 0 1
62357: PUSH
62358: LD_VAR 0 1
62362: PUSH
62363: LD_EXP 7
62367: PUSH
62368: LD_VAR 0 2
62372: ARRAY
62373: STR
62374: PUSH
62375: LD_STRING ;
62377: STR
62378: ST_TO_ADDR
// end ;
62379: GO 62350
62381: POP
62382: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
62383: LD_STRING setMultiplayerRealPosition("
62385: PUSH
62386: LD_VAR 0 1
62390: STR
62391: PUSH
62392: LD_STRING ");
62394: STR
62395: PPUSH
62396: CALL_OW 559
// end ;
62400: LD_VAR 0 1
62404: RET
