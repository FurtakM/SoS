// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 46572 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 46995 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 4
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 5
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: EMPTY
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: LD_INT 6300
 466: PUSH
 467: LD_INT 10500
 469: PUSH
 470: LD_INT 16800
 472: PUSH
 473: LD_INT 21000
 475: PUSH
 476: LD_INT 25200
 478: PUSH
 479: LD_INT 31500
 481: PUSH
 482: LD_INT 42000
 484: PUSH
 485: LD_INT 63000
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 2 , 5 5$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 3 3$0 ] ;
 522: LD_ADDR_EXP 6
 526: PUSH
 527: LD_INT 2
 529: PUSH
 530: LD_INT 15
 532: PUSH
 533: LD_INT 4
 535: PUSH
 536: LD_INT 100
 538: PUSH
 539: LD_INT 30
 541: PUSH
 542: LD_INT 0
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 3
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: LD_INT 2
 558: PUSH
 559: LD_INT 250
 561: PUSH
 562: LD_INT 2
 564: PUSH
 565: LD_INT 10500
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: LD_INT 700
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: LD_INT 700
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 31500
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 6300
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: ST_TO_ADDR
// mpGameType := GameTypeNormal ;
 624: LD_ADDR_EXP 3
 628: PUSH
 629: LD_INT 1
 631: ST_TO_ADDR
// your_side := 1 ;
 632: LD_ADDR_OWVAR 2
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// mpSidePositions := [ 8 , 2 , 3 , 4 , 5 , 6 , 7 , 1 ] ;
 640: LD_ADDR_EXP 7
 644: PUSH
 645: LD_INT 8
 647: PUSH
 648: LD_INT 2
 650: PUSH
 651: LD_INT 3
 653: PUSH
 654: LD_INT 4
 656: PUSH
 657: LD_INT 5
 659: PUSH
 660: LD_INT 6
 662: PUSH
 663: LD_INT 7
 665: PUSH
 666: LD_INT 1
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// mpSideTeams := [ 1 , 2 , 2 , 3 , 3 , 4 , 4 , 1 ] ;
 679: LD_ADDR_EXP 8
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 2
 689: PUSH
 690: LD_INT 2
 692: PUSH
 693: LD_INT 3
 695: PUSH
 696: LD_INT 3
 698: PUSH
 699: LD_INT 4
 701: PUSH
 702: LD_INT 4
 704: PUSH
 705: LD_INT 1
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: ST_TO_ADDR
// mpSideNations := [ 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 ] ;
 718: LD_ADDR_EXP 9
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: LD_INT 2
 728: PUSH
 729: LD_INT 3
 731: PUSH
 732: LD_INT 1
 734: PUSH
 735: LD_INT 2
 737: PUSH
 738: LD_INT 3
 740: PUSH
 741: LD_INT 1
 743: PUSH
 744: LD_INT 2
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: ST_TO_ADDR
// mpTeams := [ [ 1 , 8 ] , [ 2 , 3 ] , [ 4 , 5 ] , [ 6 , 7 ] ] ;
 757: LD_ADDR_EXP 10
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: LD_INT 8
 767: PUSH
 768: EMPTY
 769: LIST
 770: LIST
 771: PUSH
 772: LD_INT 2
 774: PUSH
 775: LD_INT 3
 777: PUSH
 778: EMPTY
 779: LIST
 780: LIST
 781: PUSH
 782: LD_INT 4
 784: PUSH
 785: LD_INT 5
 787: PUSH
 788: EMPTY
 789: LIST
 790: LIST
 791: PUSH
 792: LD_INT 6
 794: PUSH
 795: LD_INT 7
 797: PUSH
 798: EMPTY
 799: LIST
 800: LIST
 801: PUSH
 802: EMPTY
 803: LIST
 804: LIST
 805: LIST
 806: LIST
 807: ST_TO_ADDR
// mpTeamGame := true ;
 808: LD_ADDR_EXP 11
 812: PUSH
 813: LD_INT 1
 815: ST_TO_ADDR
// mpMapSize := [ 200 , 230 ] ;
 816: LD_ADDR_EXP 29
 820: PUSH
 821: LD_INT 200
 823: PUSH
 824: LD_INT 230
 826: PUSH
 827: EMPTY
 828: LIST
 829: LIST
 830: ST_TO_ADDR
// end ;
 831: LD_VAR 0 1
 835: RET
// export kingArea , kingCamArea ; export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 836: LD_INT 0
 838: PPUSH
 839: PPUSH
 840: PPUSH
 841: PPUSH
 842: PPUSH
 843: PPUSH
 844: PPUSH
// mpBuildUpAreas := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
 845: LD_ADDR_EXP 19
 849: PUSH
 850: LD_INT 1
 852: PUSH
 853: LD_INT 2
 855: PUSH
 856: LD_INT 3
 858: PUSH
 859: LD_INT 4
 861: PUSH
 862: LD_INT 5
 864: PUSH
 865: LD_INT 6
 867: PUSH
 868: LD_INT 7
 870: PUSH
 871: LD_INT 8
 873: PUSH
 874: EMPTY
 875: LIST
 876: LIST
 877: LIST
 878: LIST
 879: LIST
 880: LIST
 881: LIST
 882: LIST
 883: ST_TO_ADDR
// mpMarkedAreas := [ Between1 , Between2 , Between3 , Between4 , Center1 , Center2 ] union mpBuildUpAreas ;
 884: LD_ADDR_EXP 18
 888: PUSH
 889: LD_INT 10
 891: PUSH
 892: LD_INT 11
 894: PUSH
 895: LD_INT 12
 897: PUSH
 898: LD_INT 13
 900: PUSH
 901: LD_INT 14
 903: PUSH
 904: LD_INT 15
 906: PUSH
 907: EMPTY
 908: LIST
 909: LIST
 910: LIST
 911: LIST
 912: LIST
 913: LIST
 914: PUSH
 915: LD_EXP 19
 919: UNION
 920: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 921: LD_VAR 0 1
 925: PUSH
 926: LD_INT 2
 928: EQUAL
 929: IFFALSE 941
// baseLevel := 1 else
 931: LD_ADDR_VAR 0 7
 935: PUSH
 936: LD_INT 1
 938: ST_TO_ADDR
 939: GO 955
// baseLevel := mpGameSettings [ 1 ] ;
 941: LD_ADDR_VAR 0 7
 945: PUSH
 946: LD_EXP 6
 950: PUSH
 951: LD_INT 1
 953: ARRAY
 954: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 955: LD_ADDR_EXP 24
 959: PUSH
 960: LD_EXP 6
 964: PUSH
 965: LD_INT 2
 967: ARRAY
 968: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 969: LD_ADDR_EXP 25
 973: PUSH
 974: LD_EXP 6
 978: PUSH
 979: LD_INT 3
 981: ARRAY
 982: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 983: LD_ADDR_EXP 15
 987: PUSH
 988: LD_EXP 6
 992: PUSH
 993: LD_INT 4
 995: ARRAY
 996: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 997: LD_ADDR_EXP 27
1001: PUSH
1002: LD_EXP 6
1006: PUSH
1007: LD_INT 5
1009: ARRAY
1010: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
1011: LD_ADDR_VAR 0 5
1015: PUSH
1016: LD_EXP 6
1020: PUSH
1021: LD_INT 6
1023: ARRAY
1024: PUSH
1025: LD_INT 0
1027: GREATER
1028: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
1029: LD_ADDR_VAR 0 6
1033: PUSH
1034: LD_EXP 6
1038: PUSH
1039: LD_INT 7
1041: ARRAY
1042: PUSH
1043: LD_INT 0
1045: GREATER
1046: ST_TO_ADDR
// kingCamArea := 0 ;
1047: LD_ADDR_EXP 2
1051: PUSH
1052: LD_INT 0
1054: ST_TO_ADDR
// kingArea := 0 ;
1055: LD_ADDR_EXP 1
1059: PUSH
1060: LD_INT 0
1062: ST_TO_ADDR
// if gameType = GameTypeKing then
1063: LD_VAR 0 1
1067: PUSH
1068: LD_INT 3
1070: EQUAL
1071: IFFALSE 1111
// begin mpKingArea := 0 ;
1073: LD_ADDR_EXP 34
1077: PUSH
1078: LD_INT 0
1080: ST_TO_ADDR
// mpPoints := mpGameSettings [ 8 ] ;
1081: LD_ADDR_EXP 35
1085: PUSH
1086: LD_EXP 6
1090: PUSH
1091: LD_INT 8
1093: ARRAY
1094: ST_TO_ADDR
// mpEmissions := mpGameSettings [ 10 ] ;
1095: LD_ADDR_EXP 37
1099: PUSH
1100: LD_EXP 6
1104: PUSH
1105: LD_INT 10
1107: ARRAY
1108: ST_TO_ADDR
// end else
1109: GO 1135
// begin mpKingArea := 0 ;
1111: LD_ADDR_EXP 34
1115: PUSH
1116: LD_INT 0
1118: ST_TO_ADDR
// mpPoints := 0 ;
1119: LD_ADDR_EXP 35
1123: PUSH
1124: LD_INT 0
1126: ST_TO_ADDR
// mpEmissions := 0 ;
1127: LD_ADDR_EXP 37
1131: PUSH
1132: LD_INT 0
1134: ST_TO_ADDR
// end ; if mpGameSettings [ 9 ] then
1135: LD_EXP 6
1139: PUSH
1140: LD_INT 9
1142: ARRAY
1143: IFFALSE 1275
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1145: LD_ADDR_EXP 36
1149: PUSH
1150: LD_INT 1
1152: PUSH
1153: LD_INT 1
1155: PUSH
1156: LD_INT 1
1158: PUSH
1159: LD_INT 2
1161: PUSH
1162: EMPTY
1163: LIST
1164: LIST
1165: LIST
1166: LIST
1167: PUSH
1168: LD_INT 1
1170: PUSH
1171: LD_INT 1
1173: PUSH
1174: LD_INT 1
1176: PUSH
1177: LD_INT 3
1179: PUSH
1180: EMPTY
1181: LIST
1182: LIST
1183: LIST
1184: LIST
1185: PUSH
1186: EMPTY
1187: LIST
1188: LIST
1189: PUSH
1190: LD_INT 12
1192: PUSH
1193: LD_INT 1
1195: PUSH
1196: LD_INT 1
1198: PUSH
1199: LD_INT 24
1201: PUSH
1202: EMPTY
1203: LIST
1204: LIST
1205: LIST
1206: LIST
1207: PUSH
1208: LD_INT 12
1210: PUSH
1211: LD_INT 1
1213: PUSH
1214: LD_INT 1
1216: PUSH
1217: LD_INT 23
1219: PUSH
1220: EMPTY
1221: LIST
1222: LIST
1223: LIST
1224: LIST
1225: PUSH
1226: EMPTY
1227: LIST
1228: LIST
1229: PUSH
1230: LD_INT 21
1232: PUSH
1233: LD_INT 1
1235: PUSH
1236: LD_INT 1
1238: PUSH
1239: LD_INT 42
1241: PUSH
1242: EMPTY
1243: LIST
1244: LIST
1245: LIST
1246: LIST
1247: PUSH
1248: LD_INT 21
1250: PUSH
1251: LD_INT 1
1253: PUSH
1254: LD_INT 1
1256: PUSH
1257: LD_INT 42
1259: PUSH
1260: EMPTY
1261: LIST
1262: LIST
1263: LIST
1264: LIST
1265: PUSH
1266: EMPTY
1267: LIST
1268: LIST
1269: PUSH
1270: EMPTY
1271: LIST
1272: LIST
1273: LIST
1274: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1275: LD_ADDR_EXP 16
1279: PUSH
1280: LD_EXP 6
1284: PUSH
1285: LD_INT 11
1287: ARRAY
1288: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1289: LD_ADDR_EXP 22
1293: PUSH
1294: LD_EXP 6
1298: PUSH
1299: LD_INT 12
1301: ARRAY
1302: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1303: LD_ADDR_EXP 26
1307: PUSH
1308: LD_EXP 6
1312: PUSH
1313: LD_INT 13
1315: ARRAY
1316: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1317: LD_ADDR_EXP 33
1321: PUSH
1322: LD_EXP 6
1326: PUSH
1327: LD_INT 14
1329: ARRAY
1330: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1331: LD_ADDR_EXP 30
1335: PUSH
1336: LD_EXP 6
1340: PUSH
1341: LD_INT 15
1343: ARRAY
1344: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1345: LD_ADDR_EXP 28
1349: PUSH
1350: LD_EXP 6
1354: PUSH
1355: LD_INT 18
1357: ARRAY
1358: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1359: LD_ADDR_EXP 20
1363: PUSH
1364: LD_EXP 6
1368: PUSH
1369: LD_INT 21
1371: ARRAY
1372: ST_TO_ADDR
// mpApemansArea := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , Base7ApeArea , Base8ApeArea ] ;
1373: LD_ADDR_EXP 31
1377: PUSH
1378: LD_INT 16
1380: PUSH
1381: LD_INT 17
1383: PUSH
1384: LD_INT 18
1386: PUSH
1387: LD_INT 19
1389: PUSH
1390: LD_INT 20
1392: PUSH
1393: LD_INT 21
1395: PUSH
1396: LD_INT 22
1398: PUSH
1399: LD_INT 23
1401: PUSH
1402: EMPTY
1403: LIST
1404: LIST
1405: LIST
1406: LIST
1407: LIST
1408: LIST
1409: LIST
1410: LIST
1411: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 2 ) , GetBuildingFromArea ( depotArea2 , 2 ) , GetBuildingFromArea ( depotArea3 , 3 ) , GetBuildingFromArea ( depotArea4 , 4 ) , GetBuildingFromArea ( depotArea5 , 5 ) , GetBuildingFromArea ( depotArea6 , 5 ) , GetBuildingFromArea ( depotArea7 , 0 ) , GetBuildingFromArea ( depotArea8 , 1 ) ] ;
1412: LD_ADDR_VAR 0 8
1416: PUSH
1417: LD_INT 24
1419: PPUSH
1420: LD_INT 2
1422: PPUSH
1423: CALL 45937 0 2
1427: PUSH
1428: LD_INT 30
1430: PPUSH
1431: LD_INT 2
1433: PPUSH
1434: CALL 45937 0 2
1438: PUSH
1439: LD_INT 36
1441: PPUSH
1442: LD_INT 3
1444: PPUSH
1445: CALL 45937 0 2
1449: PUSH
1450: LD_INT 42
1452: PPUSH
1453: LD_INT 4
1455: PPUSH
1456: CALL 45937 0 2
1460: PUSH
1461: LD_INT 48
1463: PPUSH
1464: LD_INT 5
1466: PPUSH
1467: CALL 45937 0 2
1471: PUSH
1472: LD_INT 51
1474: PPUSH
1475: LD_INT 5
1477: PPUSH
1478: CALL 45937 0 2
1482: PUSH
1483: LD_INT 57
1485: PPUSH
1486: LD_INT 0
1488: PPUSH
1489: CALL 45937 0 2
1493: PUSH
1494: LD_INT 63
1496: PPUSH
1497: LD_INT 1
1499: PPUSH
1500: CALL 45937 0 2
1504: PUSH
1505: EMPTY
1506: LIST
1507: LIST
1508: LIST
1509: LIST
1510: LIST
1511: LIST
1512: LIST
1513: LIST
1514: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1515: LD_ADDR_VAR 0 3
1519: PUSH
1520: DOUBLE
1521: LD_INT 1
1523: DEC
1524: ST_TO_ADDR
1525: LD_VAR 0 8
1529: PPUSH
1530: CALL 5242 0 1
1534: PUSH
1535: FOR_TO
1536: IFFALSE 1640
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1538: LD_ADDR_EXP 21
1542: PUSH
1543: LD_EXP 21
1547: PPUSH
1548: LD_VAR 0 3
1552: PPUSH
1553: LD_VAR 0 8
1557: PUSH
1558: LD_VAR 0 3
1562: ARRAY
1563: PUSH
1564: LD_INT 1
1566: ARRAY
1567: PPUSH
1568: LD_VAR 0 8
1572: PUSH
1573: LD_VAR 0 3
1577: ARRAY
1578: PUSH
1579: LD_INT 3
1581: ARRAY
1582: PPUSH
1583: LD_INT 10
1585: PPUSH
1586: CALL_OW 272
1590: PUSH
1591: LD_VAR 0 8
1595: PUSH
1596: LD_VAR 0 3
1600: ARRAY
1601: PUSH
1602: LD_INT 2
1604: ARRAY
1605: PPUSH
1606: LD_VAR 0 8
1610: PUSH
1611: LD_VAR 0 3
1615: ARRAY
1616: PUSH
1617: LD_INT 3
1619: ARRAY
1620: PPUSH
1621: LD_INT 10
1623: PPUSH
1624: CALL_OW 273
1628: PUSH
1629: EMPTY
1630: LIST
1631: LIST
1632: PPUSH
1633: CALL_OW 1
1637: ST_TO_ADDR
1638: GO 1535
1640: POP
1641: POP
// if hasOil then
1642: LD_VAR 0 5
1646: IFFALSE 1785
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1648: LD_ADDR_VAR 0 4
1652: PUSH
1653: LD_EXP 6
1657: PUSH
1658: LD_INT 6
1660: ARRAY
1661: PUSH
1662: LD_INT 2
1664: EQUAL
1665: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) , GetSourcesFromArea ( oilArea7 , all ) , GetSourcesFromArea ( oilArea8 , all ) ] ;
1666: LD_ADDR_EXP 12
1670: PUSH
1671: LD_INT 25
1673: PPUSH
1674: LD_VAR 0 4
1678: PPUSH
1679: CALL 45770 0 2
1683: PUSH
1684: LD_INT 31
1686: PPUSH
1687: LD_VAR 0 4
1691: PPUSH
1692: CALL 45770 0 2
1696: PUSH
1697: LD_INT 37
1699: PPUSH
1700: LD_VAR 0 4
1704: PPUSH
1705: CALL 45770 0 2
1709: PUSH
1710: LD_INT 43
1712: PPUSH
1713: LD_VAR 0 4
1717: PPUSH
1718: CALL 45770 0 2
1722: PUSH
1723: LD_INT 49
1725: PPUSH
1726: LD_VAR 0 4
1730: PPUSH
1731: CALL 45770 0 2
1735: PUSH
1736: LD_INT 52
1738: PPUSH
1739: LD_VAR 0 4
1743: PPUSH
1744: CALL 45770 0 2
1748: PUSH
1749: LD_INT 58
1751: PPUSH
1752: LD_VAR 0 4
1756: PPUSH
1757: CALL 45770 0 2
1761: PUSH
1762: LD_INT 64
1764: PPUSH
1765: LD_VAR 0 4
1769: PPUSH
1770: CALL 45770 0 2
1774: PUSH
1775: EMPTY
1776: LIST
1777: LIST
1778: LIST
1779: LIST
1780: LIST
1781: LIST
1782: LIST
1783: LIST
1784: ST_TO_ADDR
// end ; if hasSib then
1785: LD_VAR 0 6
1789: IFFALSE 1928
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1791: LD_ADDR_VAR 0 4
1795: PUSH
1796: LD_EXP 6
1800: PUSH
1801: LD_INT 7
1803: ARRAY
1804: PUSH
1805: LD_INT 2
1807: EQUAL
1808: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) , GetSourcesFromArea ( sibArea7 , all ) , GetSourcesFromArea ( sibArea8 , all ) ] ;
1809: LD_ADDR_EXP 13
1813: PUSH
1814: LD_INT 26
1816: PPUSH
1817: LD_VAR 0 4
1821: PPUSH
1822: CALL 45770 0 2
1826: PUSH
1827: LD_INT 32
1829: PPUSH
1830: LD_VAR 0 4
1834: PPUSH
1835: CALL 45770 0 2
1839: PUSH
1840: LD_INT 38
1842: PPUSH
1843: LD_VAR 0 4
1847: PPUSH
1848: CALL 45770 0 2
1852: PUSH
1853: LD_INT 44
1855: PPUSH
1856: LD_VAR 0 4
1860: PPUSH
1861: CALL 45770 0 2
1865: PUSH
1866: LD_INT 50
1868: PPUSH
1869: LD_VAR 0 4
1873: PPUSH
1874: CALL 45770 0 2
1878: PUSH
1879: LD_INT 53
1881: PPUSH
1882: LD_VAR 0 4
1886: PPUSH
1887: CALL 45770 0 2
1891: PUSH
1892: LD_INT 59
1894: PPUSH
1895: LD_VAR 0 4
1899: PPUSH
1900: CALL 45770 0 2
1904: PUSH
1905: LD_INT 65
1907: PPUSH
1908: LD_VAR 0 4
1912: PPUSH
1913: CALL 45770 0 2
1917: PUSH
1918: EMPTY
1919: LIST
1920: LIST
1921: LIST
1922: LIST
1923: LIST
1924: LIST
1925: LIST
1926: LIST
1927: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1928: LD_VAR 0 7
1932: PUSH
1933: LD_INT 1
1935: GREATEREQUAL
1936: IFFALSE 1948
// mpDepots := startPos ;
1938: LD_ADDR_EXP 14
1942: PUSH
1943: LD_VAR 0 8
1947: ST_TO_ADDR
// if baseLevel >= 2 then
1948: LD_VAR 0 7
1952: PUSH
1953: LD_INT 2
1955: GREATEREQUAL
1956: IFFALSE 2373
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunArea1a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea1 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea2a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2b , 0 ) , b_armoury ^ GetBuildingFromArea ( armArea2 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea3a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea3 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea4a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4b , 0 ) , b_armoury ^ GetBuildingFromArea ( armArea4 , 1 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea5a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea5 , 2 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea6a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea6 , 2 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea7a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea7b , 3 ) , b_armoury ^ GetBuildingFromArea ( armArea7 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea8a , 3 ) , b_breastwork ^ GetBuildingFromArea ( bunArea8b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea8 , 4 ) ] ] ;
1958: LD_ADDR_EXP 17
1962: PUSH
1963: LD_INT 31
1965: PUSH
1966: LD_INT 27
1968: PPUSH
1969: LD_INT 5
1971: PPUSH
1972: CALL 45937 0 2
1976: ADD
1977: PUSH
1978: LD_INT 31
1980: PUSH
1981: LD_INT 28
1983: PPUSH
1984: LD_INT 4
1986: PPUSH
1987: CALL 45937 0 2
1991: ADD
1992: PUSH
1993: LD_INT 4
1995: PUSH
1996: LD_INT 29
1998: PPUSH
1999: LD_INT 4
2001: PPUSH
2002: CALL 45937 0 2
2006: ADD
2007: PUSH
2008: EMPTY
2009: LIST
2010: LIST
2011: LIST
2012: PUSH
2013: LD_INT 31
2015: PUSH
2016: LD_INT 33
2018: PPUSH
2019: LD_INT 5
2021: PPUSH
2022: CALL 45937 0 2
2026: ADD
2027: PUSH
2028: LD_INT 31
2030: PUSH
2031: LD_INT 34
2033: PPUSH
2034: LD_INT 0
2036: PPUSH
2037: CALL 45937 0 2
2041: ADD
2042: PUSH
2043: LD_INT 4
2045: PUSH
2046: LD_INT 35
2048: PPUSH
2049: LD_INT 5
2051: PPUSH
2052: CALL 45937 0 2
2056: ADD
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: LIST
2062: PUSH
2063: LD_INT 31
2065: PUSH
2066: LD_INT 39
2068: PPUSH
2069: LD_INT 0
2071: PPUSH
2072: CALL 45937 0 2
2076: ADD
2077: PUSH
2078: LD_INT 31
2080: PUSH
2081: LD_INT 40
2083: PPUSH
2084: LD_INT 5
2086: PPUSH
2087: CALL 45937 0 2
2091: ADD
2092: PUSH
2093: LD_INT 4
2095: PUSH
2096: LD_INT 41
2098: PPUSH
2099: LD_INT 0
2101: PPUSH
2102: CALL 45937 0 2
2106: ADD
2107: PUSH
2108: EMPTY
2109: LIST
2110: LIST
2111: LIST
2112: PUSH
2113: LD_INT 31
2115: PUSH
2116: LD_INT 45
2118: PPUSH
2119: LD_INT 1
2121: PPUSH
2122: CALL 45937 0 2
2126: ADD
2127: PUSH
2128: LD_INT 31
2130: PUSH
2131: LD_INT 46
2133: PPUSH
2134: LD_INT 0
2136: PPUSH
2137: CALL 45937 0 2
2141: ADD
2142: PUSH
2143: LD_INT 4
2145: PUSH
2146: LD_INT 47
2148: PPUSH
2149: LD_INT 1
2151: PPUSH
2152: CALL 45937 0 2
2156: ADD
2157: PUSH
2158: EMPTY
2159: LIST
2160: LIST
2161: LIST
2162: PUSH
2163: LD_INT 31
2165: PUSH
2166: LD_INT 69
2168: PPUSH
2169: LD_INT 2
2171: PPUSH
2172: CALL 45937 0 2
2176: ADD
2177: PUSH
2178: LD_INT 31
2180: PUSH
2181: LD_INT 70
2183: PPUSH
2184: LD_INT 2
2186: PPUSH
2187: CALL 45937 0 2
2191: ADD
2192: PUSH
2193: LD_INT 4
2195: PUSH
2196: LD_INT 71
2198: PPUSH
2199: LD_INT 2
2201: PPUSH
2202: CALL 45937 0 2
2206: ADD
2207: PUSH
2208: EMPTY
2209: LIST
2210: LIST
2211: LIST
2212: PUSH
2213: LD_INT 31
2215: PUSH
2216: LD_INT 54
2218: PPUSH
2219: LD_INT 2
2221: PPUSH
2222: CALL 45937 0 2
2226: ADD
2227: PUSH
2228: LD_INT 31
2230: PUSH
2231: LD_INT 55
2233: PPUSH
2234: LD_INT 2
2236: PPUSH
2237: CALL 45937 0 2
2241: ADD
2242: PUSH
2243: LD_INT 4
2245: PUSH
2246: LD_INT 56
2248: PPUSH
2249: LD_INT 2
2251: PPUSH
2252: CALL 45937 0 2
2256: ADD
2257: PUSH
2258: EMPTY
2259: LIST
2260: LIST
2261: LIST
2262: PUSH
2263: LD_INT 31
2265: PUSH
2266: LD_INT 60
2268: PPUSH
2269: LD_INT 4
2271: PPUSH
2272: CALL 45937 0 2
2276: ADD
2277: PUSH
2278: LD_INT 31
2280: PUSH
2281: LD_INT 61
2283: PPUSH
2284: LD_INT 3
2286: PPUSH
2287: CALL 45937 0 2
2291: ADD
2292: PUSH
2293: LD_INT 4
2295: PUSH
2296: LD_INT 62
2298: PPUSH
2299: LD_INT 3
2301: PPUSH
2302: CALL 45937 0 2
2306: ADD
2307: PUSH
2308: EMPTY
2309: LIST
2310: LIST
2311: LIST
2312: PUSH
2313: LD_INT 31
2315: PUSH
2316: LD_INT 66
2318: PPUSH
2319: LD_INT 3
2321: PPUSH
2322: CALL 45937 0 2
2326: ADD
2327: PUSH
2328: LD_INT 31
2330: PUSH
2331: LD_INT 67
2333: PPUSH
2334: LD_INT 4
2336: PPUSH
2337: CALL 45937 0 2
2341: ADD
2342: PUSH
2343: LD_INT 4
2345: PUSH
2346: LD_INT 68
2348: PPUSH
2349: LD_INT 4
2351: PPUSH
2352: CALL 45937 0 2
2356: ADD
2357: PUSH
2358: EMPTY
2359: LIST
2360: LIST
2361: LIST
2362: PUSH
2363: EMPTY
2364: LIST
2365: LIST
2366: LIST
2367: LIST
2368: LIST
2369: LIST
2370: LIST
2371: LIST
2372: ST_TO_ADDR
// end ; end ;
2373: LD_VAR 0 2
2377: RET
// every 0 0$2 marked mpActive do var i , x , tmp , areas , time , normalTime , delayTime , maxTime ;
2378: GO 2380
2380: DISABLE
2381: LD_INT 0
2383: PPUSH
2384: PPUSH
2385: PPUSH
2386: PPUSH
2387: PPUSH
2388: PPUSH
2389: PPUSH
2390: PPUSH
// begin if not mpShipments then
2391: LD_EXP 27
2395: NOT
2396: IFFALSE 2400
// exit ;
2398: GO 2855
// case mpShipments of 1 :
2400: LD_EXP 27
2404: PUSH
2405: LD_INT 1
2407: DOUBLE
2408: EQUAL
2409: IFTRUE 2413
2411: GO 2448
2413: POP
// begin time := 0 0$30 ;
2414: LD_ADDR_VAR 0 5
2418: PUSH
2419: LD_INT 1050
2421: ST_TO_ADDR
// normalTime := 0 0$30 ;
2422: LD_ADDR_VAR 0 6
2426: PUSH
2427: LD_INT 1050
2429: ST_TO_ADDR
// maxTime := 1 1$20 ;
2430: LD_ADDR_VAR 0 8
2434: PUSH
2435: LD_INT 2800
2437: ST_TO_ADDR
// delayTime := 0 0$5 ;
2438: LD_ADDR_VAR 0 7
2442: PUSH
2443: LD_INT 175
2445: ST_TO_ADDR
// end ; 2 :
2446: GO 2578
2448: LD_INT 2
2450: DOUBLE
2451: EQUAL
2452: IFTRUE 2456
2454: GO 2491
2456: POP
// begin time := 0 0$25 ;
2457: LD_ADDR_VAR 0 5
2461: PUSH
2462: LD_INT 875
2464: ST_TO_ADDR
// normalTime := 0 0$25 ;
2465: LD_ADDR_VAR 0 6
2469: PUSH
2470: LD_INT 875
2472: ST_TO_ADDR
// maxTime := 1 1$10 ;
2473: LD_ADDR_VAR 0 8
2477: PUSH
2478: LD_INT 2450
2480: ST_TO_ADDR
// delayTime := 0 0$4 ;
2481: LD_ADDR_VAR 0 7
2485: PUSH
2486: LD_INT 140
2488: ST_TO_ADDR
// end ; 3 :
2489: GO 2578
2491: LD_INT 3
2493: DOUBLE
2494: EQUAL
2495: IFTRUE 2499
2497: GO 2534
2499: POP
// begin time := 0 0$20 ;
2500: LD_ADDR_VAR 0 5
2504: PUSH
2505: LD_INT 700
2507: ST_TO_ADDR
// normalTime := 0 0$20 ;
2508: LD_ADDR_VAR 0 6
2512: PUSH
2513: LD_INT 700
2515: ST_TO_ADDR
// maxTime := 1 1$00 ;
2516: LD_ADDR_VAR 0 8
2520: PUSH
2521: LD_INT 2100
2523: ST_TO_ADDR
// delayTime := 0 0$3 ;
2524: LD_ADDR_VAR 0 7
2528: PUSH
2529: LD_INT 105
2531: ST_TO_ADDR
// end ; 4 :
2532: GO 2578
2534: LD_INT 4
2536: DOUBLE
2537: EQUAL
2538: IFTRUE 2542
2540: GO 2577
2542: POP
// begin time := 0 0$15 ;
2543: LD_ADDR_VAR 0 5
2547: PUSH
2548: LD_INT 525
2550: ST_TO_ADDR
// normalTime := 0 0$15 ;
2551: LD_ADDR_VAR 0 6
2555: PUSH
2556: LD_INT 525
2558: ST_TO_ADDR
// maxTime := 0 0$55 ;
2559: LD_ADDR_VAR 0 8
2563: PUSH
2564: LD_INT 1925
2566: ST_TO_ADDR
// delayTime := 0 0$2 ;
2567: LD_ADDR_VAR 0 7
2571: PUSH
2572: LD_INT 70
2574: ST_TO_ADDR
// end ; end ;
2575: GO 2578
2577: POP
// areas := [ Between1 , Between2 , Between3 , Between4 , Center1 , Center2 ] ;
2578: LD_ADDR_VAR 0 4
2582: PUSH
2583: LD_INT 10
2585: PUSH
2586: LD_INT 11
2588: PUSH
2589: LD_INT 12
2591: PUSH
2592: LD_INT 13
2594: PUSH
2595: LD_INT 14
2597: PUSH
2598: LD_INT 15
2600: PUSH
2601: EMPTY
2602: LIST
2603: LIST
2604: LIST
2605: LIST
2606: LIST
2607: LIST
2608: ST_TO_ADDR
// tmp := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
2609: LD_ADDR_VAR 0 3
2613: PUSH
2614: LD_INT 1
2616: PUSH
2617: LD_INT 2
2619: PUSH
2620: LD_INT 3
2622: PUSH
2623: LD_INT 4
2625: PUSH
2626: LD_INT 5
2628: PUSH
2629: LD_INT 6
2631: PUSH
2632: LD_INT 7
2634: PUSH
2635: LD_INT 8
2637: PUSH
2638: EMPTY
2639: LIST
2640: LIST
2641: LIST
2642: LIST
2643: LIST
2644: LIST
2645: LIST
2646: LIST
2647: ST_TO_ADDR
// for i := 1 to 8 do
2648: LD_ADDR_VAR 0 1
2652: PUSH
2653: DOUBLE
2654: LD_INT 1
2656: DEC
2657: ST_TO_ADDR
2658: LD_INT 8
2660: PUSH
2661: FOR_TO
2662: IFFALSE 2709
// begin if not mpSidePositions [ i ] then
2664: LD_EXP 7
2668: PUSH
2669: LD_VAR 0 1
2673: ARRAY
2674: NOT
2675: IFFALSE 2679
// continue ;
2677: GO 2661
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2679: LD_ADDR_VAR 0 4
2683: PUSH
2684: LD_VAR 0 4
2688: PUSH
2689: LD_VAR 0 3
2693: PUSH
2694: LD_EXP 7
2698: PUSH
2699: LD_VAR 0 1
2703: ARRAY
2704: ARRAY
2705: ADD
2706: ST_TO_ADDR
// end ;
2707: GO 2661
2709: POP
2710: POP
// x := 1 ;
2711: LD_ADDR_VAR 0 2
2715: PUSH
2716: LD_INT 1
2718: ST_TO_ADDR
// repeat wait ( time ) ;
2719: LD_VAR 0 5
2723: PPUSH
2724: CALL_OW 67
// x := Inc ( x ) ;
2728: LD_ADDR_VAR 0 2
2732: PUSH
2733: LD_VAR 0 2
2737: PPUSH
2738: CALL 42591 0 1
2742: ST_TO_ADDR
// if x > 5 then
2743: LD_VAR 0 2
2747: PUSH
2748: LD_INT 5
2750: GREATER
2751: IFFALSE 2761
// x := 1 ;
2753: LD_ADDR_VAR 0 2
2757: PUSH
2758: LD_INT 1
2760: ST_TO_ADDR
// for i in areas do
2761: LD_ADDR_VAR 0 1
2765: PUSH
2766: LD_VAR 0 4
2770: PUSH
2771: FOR_IN
2772: IFFALSE 2811
// begin if GetResourceArea ( i , mat_cans ) < 30 then
2774: LD_VAR 0 1
2778: PPUSH
2779: LD_INT 1
2781: PPUSH
2782: CALL_OW 287
2786: PUSH
2787: LD_INT 30
2789: LESS
2790: IFFALSE 2809
// begin CreateCratesArea ( x , i , true ) ;
2792: LD_VAR 0 2
2796: PPUSH
2797: LD_VAR 0 1
2801: PPUSH
2802: LD_INT 1
2804: PPUSH
2805: CALL_OW 55
// end ; end ;
2809: GO 2771
2811: POP
2812: POP
// time := time + delayTime ;
2813: LD_ADDR_VAR 0 5
2817: PUSH
2818: LD_VAR 0 5
2822: PUSH
2823: LD_VAR 0 7
2827: PLUS
2828: ST_TO_ADDR
// if time > maxTime then
2829: LD_VAR 0 5
2833: PUSH
2834: LD_VAR 0 8
2838: GREATER
2839: IFFALSE 2851
// time := normalTime ;
2841: LD_ADDR_VAR 0 5
2845: PUSH
2846: LD_VAR 0 6
2850: ST_TO_ADDR
// until false ;
2851: LD_INT 0
2853: IFFALSE 2719
// end ; end_of_file
2855: PPOPN 8
2857: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2858: LD_VAR 0 1
2862: PPUSH
2863: CALL 56952 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2867: LD_VAR 0 1
2871: PPUSH
2872: CALL 52118 0 1
// end ;
2876: PPOPN 1
2878: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2879: LD_VAR 0 1
2883: PPUSH
2884: CALL 56969 0 1
// end ;
2888: PPOPN 1
2890: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2891: LD_VAR 0 1
2895: PPUSH
2896: CALL 53171 0 1
2900: PPOPN 1
2902: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2903: LD_VAR 0 1
2907: PPUSH
2908: LD_VAR 0 2
2912: PPUSH
2913: CALL 57010 0 2
2917: PPOPN 2
2919: END
// on VehicleConstruction_ApeConsumed ( factory , un ) do Multiplayer_VehicleConstruction_ApeConsumed ( factory , un ) ;
2920: LD_VAR 0 1
2924: PPUSH
2925: LD_VAR 0 2
2929: PPUSH
2930: CALL 52924 0 2
2934: PPOPN 2
2936: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ;
2937: LD_VAR 0 1
2941: PPUSH
2942: LD_VAR 0 2
2946: PPUSH
2947: LD_VAR 0 3
2951: PPUSH
2952: CALL 53224 0 3
2956: PPOPN 3
2958: END
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ;
2959: LD_VAR 0 1
2963: PPUSH
2964: LD_VAR 0 2
2968: PPUSH
2969: LD_VAR 0 3
2973: PPUSH
2974: LD_VAR 0 4
2978: PPUSH
2979: LD_VAR 0 5
2983: PPUSH
2984: CALL 53908 0 5
2988: PPOPN 5
2990: END
// on VehicleCaptured ( newId , oldId , oldSide , unit ) do Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; end_of_file
2991: LD_VAR 0 1
2995: PPUSH
2996: LD_VAR 0 2
3000: PPUSH
3001: LD_VAR 0 3
3005: PPUSH
3006: LD_VAR 0 4
3010: PPUSH
3011: CALL 54011 0 4
3015: PPOPN 4
3017: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
3018: LD_INT 0
3020: PPUSH
3021: PPUSH
// if exist_mode then
3022: LD_VAR 0 2
3026: IFFALSE 3072
// begin unit := CreateCharacter ( prefix & ident ) ;
3028: LD_ADDR_VAR 0 5
3032: PUSH
3033: LD_VAR 0 3
3037: PUSH
3038: LD_VAR 0 1
3042: STR
3043: PPUSH
3044: CALL_OW 34
3048: ST_TO_ADDR
// if unit then
3049: LD_VAR 0 5
3053: IFFALSE 3070
// DeleteCharacters ( prefix & ident ) ;
3055: LD_VAR 0 3
3059: PUSH
3060: LD_VAR 0 1
3064: STR
3065: PPUSH
3066: CALL_OW 40
// end else
3070: GO 3087
// unit := NewCharacter ( ident ) ;
3072: LD_ADDR_VAR 0 5
3076: PUSH
3077: LD_VAR 0 1
3081: PPUSH
3082: CALL_OW 25
3086: ST_TO_ADDR
// result := unit ;
3087: LD_ADDR_VAR 0 4
3091: PUSH
3092: LD_VAR 0 5
3096: ST_TO_ADDR
// end ;
3097: LD_VAR 0 4
3101: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
3102: LD_INT 0
3104: PPUSH
3105: PPUSH
// if exist_mode then
3106: LD_VAR 0 2
3110: IFFALSE 3135
// unit := CreateCharacter ( prefix & ident ) else
3112: LD_ADDR_VAR 0 5
3116: PUSH
3117: LD_VAR 0 3
3121: PUSH
3122: LD_VAR 0 1
3126: STR
3127: PPUSH
3128: CALL_OW 34
3132: ST_TO_ADDR
3133: GO 3150
// unit := NewCharacter ( ident ) ;
3135: LD_ADDR_VAR 0 5
3139: PUSH
3140: LD_VAR 0 1
3144: PPUSH
3145: CALL_OW 25
3149: ST_TO_ADDR
// result := unit ;
3150: LD_ADDR_VAR 0 4
3154: PUSH
3155: LD_VAR 0 5
3159: ST_TO_ADDR
// end ;
3160: LD_VAR 0 4
3164: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
3165: LD_INT 0
3167: PPUSH
3168: PPUSH
// if not side or not nation then
3169: LD_VAR 0 1
3173: NOT
3174: IFTRUE 3183
3176: PUSH
3177: LD_VAR 0 2
3181: NOT
3182: OR
3183: IFFALSE 3187
// exit ;
3185: GO 3981
// case nation of nation_american :
3187: LD_VAR 0 2
3191: PUSH
3192: LD_INT 1
3194: DOUBLE
3195: EQUAL
3196: IFTRUE 3200
3198: GO 3422
3200: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
3201: LD_ADDR_VAR 0 4
3205: PUSH
3206: LD_INT 35
3208: PUSH
3209: LD_INT 45
3211: PUSH
3212: LD_INT 46
3214: PUSH
3215: LD_INT 47
3217: PUSH
3218: LD_INT 82
3220: PUSH
3221: LD_INT 83
3223: PUSH
3224: LD_INT 84
3226: PUSH
3227: LD_INT 85
3229: PUSH
3230: LD_INT 86
3232: PUSH
3233: LD_INT 1
3235: PUSH
3236: LD_INT 2
3238: PUSH
3239: LD_INT 6
3241: PUSH
3242: LD_INT 15
3244: PUSH
3245: LD_INT 16
3247: PUSH
3248: LD_INT 7
3250: PUSH
3251: LD_INT 12
3253: PUSH
3254: LD_INT 13
3256: PUSH
3257: LD_INT 10
3259: PUSH
3260: LD_INT 14
3262: PUSH
3263: LD_INT 20
3265: PUSH
3266: LD_INT 21
3268: PUSH
3269: LD_INT 22
3271: PUSH
3272: LD_INT 25
3274: PUSH
3275: LD_INT 32
3277: PUSH
3278: LD_INT 27
3280: PUSH
3281: LD_INT 36
3283: PUSH
3284: LD_INT 69
3286: PUSH
3287: LD_INT 39
3289: PUSH
3290: LD_INT 34
3292: PUSH
3293: LD_INT 40
3295: PUSH
3296: LD_INT 48
3298: PUSH
3299: LD_INT 49
3301: PUSH
3302: LD_INT 50
3304: PUSH
3305: LD_INT 51
3307: PUSH
3308: LD_INT 52
3310: PUSH
3311: LD_INT 53
3313: PUSH
3314: LD_INT 54
3316: PUSH
3317: LD_INT 55
3319: PUSH
3320: LD_INT 56
3322: PUSH
3323: LD_INT 57
3325: PUSH
3326: LD_INT 58
3328: PUSH
3329: LD_INT 59
3331: PUSH
3332: LD_INT 60
3334: PUSH
3335: LD_INT 61
3337: PUSH
3338: LD_INT 62
3340: PUSH
3341: LD_INT 80
3343: PUSH
3344: LD_INT 82
3346: PUSH
3347: LD_INT 83
3349: PUSH
3350: LD_INT 84
3352: PUSH
3353: LD_INT 85
3355: PUSH
3356: LD_INT 86
3358: PUSH
3359: LD_INT 90
3361: PUSH
3362: LD_INT 93
3364: PUSH
3365: EMPTY
3366: LIST
3367: LIST
3368: LIST
3369: LIST
3370: LIST
3371: LIST
3372: LIST
3373: LIST
3374: LIST
3375: LIST
3376: LIST
3377: LIST
3378: LIST
3379: LIST
3380: LIST
3381: LIST
3382: LIST
3383: LIST
3384: LIST
3385: LIST
3386: LIST
3387: LIST
3388: LIST
3389: LIST
3390: LIST
3391: LIST
3392: LIST
3393: LIST
3394: LIST
3395: LIST
3396: LIST
3397: LIST
3398: LIST
3399: LIST
3400: LIST
3401: LIST
3402: LIST
3403: LIST
3404: LIST
3405: LIST
3406: LIST
3407: LIST
3408: LIST
3409: LIST
3410: LIST
3411: LIST
3412: LIST
3413: LIST
3414: LIST
3415: LIST
3416: LIST
3417: LIST
3418: LIST
3419: ST_TO_ADDR
3420: GO 3903
3422: LD_INT 2
3424: DOUBLE
3425: EQUAL
3426: IFTRUE 3430
3428: GO 3664
3430: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
3431: LD_ADDR_VAR 0 4
3435: PUSH
3436: LD_INT 35
3438: PUSH
3439: LD_INT 45
3441: PUSH
3442: LD_INT 46
3444: PUSH
3445: LD_INT 47
3447: PUSH
3448: LD_INT 82
3450: PUSH
3451: LD_INT 83
3453: PUSH
3454: LD_INT 84
3456: PUSH
3457: LD_INT 85
3459: PUSH
3460: LD_INT 87
3462: PUSH
3463: LD_INT 70
3465: PUSH
3466: LD_INT 1
3468: PUSH
3469: LD_INT 11
3471: PUSH
3472: LD_INT 3
3474: PUSH
3475: LD_INT 4
3477: PUSH
3478: LD_INT 5
3480: PUSH
3481: LD_INT 6
3483: PUSH
3484: LD_INT 15
3486: PUSH
3487: LD_INT 18
3489: PUSH
3490: LD_INT 7
3492: PUSH
3493: LD_INT 17
3495: PUSH
3496: LD_INT 8
3498: PUSH
3499: LD_INT 20
3501: PUSH
3502: LD_INT 21
3504: PUSH
3505: LD_INT 22
3507: PUSH
3508: LD_INT 72
3510: PUSH
3511: LD_INT 26
3513: PUSH
3514: LD_INT 69
3516: PUSH
3517: LD_INT 39
3519: PUSH
3520: LD_INT 40
3522: PUSH
3523: LD_INT 41
3525: PUSH
3526: LD_INT 42
3528: PUSH
3529: LD_INT 43
3531: PUSH
3532: LD_INT 48
3534: PUSH
3535: LD_INT 49
3537: PUSH
3538: LD_INT 50
3540: PUSH
3541: LD_INT 51
3543: PUSH
3544: LD_INT 52
3546: PUSH
3547: LD_INT 53
3549: PUSH
3550: LD_INT 54
3552: PUSH
3553: LD_INT 55
3555: PUSH
3556: LD_INT 56
3558: PUSH
3559: LD_INT 60
3561: PUSH
3562: LD_INT 61
3564: PUSH
3565: LD_INT 62
3567: PUSH
3568: LD_INT 66
3570: PUSH
3571: LD_INT 67
3573: PUSH
3574: LD_INT 68
3576: PUSH
3577: LD_INT 81
3579: PUSH
3580: LD_INT 82
3582: PUSH
3583: LD_INT 83
3585: PUSH
3586: LD_INT 84
3588: PUSH
3589: LD_INT 85
3591: PUSH
3592: LD_INT 87
3594: PUSH
3595: LD_INT 88
3597: PUSH
3598: LD_INT 92
3600: PUSH
3601: LD_INT 94
3603: PUSH
3604: EMPTY
3605: LIST
3606: LIST
3607: LIST
3608: LIST
3609: LIST
3610: LIST
3611: LIST
3612: LIST
3613: LIST
3614: LIST
3615: LIST
3616: LIST
3617: LIST
3618: LIST
3619: LIST
3620: LIST
3621: LIST
3622: LIST
3623: LIST
3624: LIST
3625: LIST
3626: LIST
3627: LIST
3628: LIST
3629: LIST
3630: LIST
3631: LIST
3632: LIST
3633: LIST
3634: LIST
3635: LIST
3636: LIST
3637: LIST
3638: LIST
3639: LIST
3640: LIST
3641: LIST
3642: LIST
3643: LIST
3644: LIST
3645: LIST
3646: LIST
3647: LIST
3648: LIST
3649: LIST
3650: LIST
3651: LIST
3652: LIST
3653: LIST
3654: LIST
3655: LIST
3656: LIST
3657: LIST
3658: LIST
3659: LIST
3660: LIST
3661: ST_TO_ADDR
3662: GO 3903
3664: LD_INT 3
3666: DOUBLE
3667: EQUAL
3668: IFTRUE 3672
3670: GO 3902
3672: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
3673: LD_ADDR_VAR 0 4
3677: PUSH
3678: LD_INT 46
3680: PUSH
3681: LD_INT 47
3683: PUSH
3684: LD_INT 1
3686: PUSH
3687: LD_INT 2
3689: PUSH
3690: LD_INT 82
3692: PUSH
3693: LD_INT 83
3695: PUSH
3696: LD_INT 84
3698: PUSH
3699: LD_INT 85
3701: PUSH
3702: LD_INT 86
3704: PUSH
3705: LD_INT 11
3707: PUSH
3708: LD_INT 9
3710: PUSH
3711: LD_INT 20
3713: PUSH
3714: LD_INT 19
3716: PUSH
3717: LD_INT 21
3719: PUSH
3720: LD_INT 24
3722: PUSH
3723: LD_INT 22
3725: PUSH
3726: LD_INT 25
3728: PUSH
3729: LD_INT 28
3731: PUSH
3732: LD_INT 29
3734: PUSH
3735: LD_INT 30
3737: PUSH
3738: LD_INT 31
3740: PUSH
3741: LD_INT 37
3743: PUSH
3744: LD_INT 38
3746: PUSH
3747: LD_INT 32
3749: PUSH
3750: LD_INT 27
3752: PUSH
3753: LD_INT 33
3755: PUSH
3756: LD_INT 69
3758: PUSH
3759: LD_INT 39
3761: PUSH
3762: LD_INT 34
3764: PUSH
3765: LD_INT 40
3767: PUSH
3768: LD_INT 71
3770: PUSH
3771: LD_INT 23
3773: PUSH
3774: LD_INT 44
3776: PUSH
3777: LD_INT 48
3779: PUSH
3780: LD_INT 49
3782: PUSH
3783: LD_INT 50
3785: PUSH
3786: LD_INT 51
3788: PUSH
3789: LD_INT 52
3791: PUSH
3792: LD_INT 53
3794: PUSH
3795: LD_INT 54
3797: PUSH
3798: LD_INT 55
3800: PUSH
3801: LD_INT 56
3803: PUSH
3804: LD_INT 57
3806: PUSH
3807: LD_INT 58
3809: PUSH
3810: LD_INT 59
3812: PUSH
3813: LD_INT 63
3815: PUSH
3816: LD_INT 64
3818: PUSH
3819: LD_INT 65
3821: PUSH
3822: LD_INT 82
3824: PUSH
3825: LD_INT 83
3827: PUSH
3828: LD_INT 84
3830: PUSH
3831: LD_INT 85
3833: PUSH
3834: LD_INT 86
3836: PUSH
3837: LD_INT 89
3839: PUSH
3840: LD_INT 91
3842: PUSH
3843: EMPTY
3844: LIST
3845: LIST
3846: LIST
3847: LIST
3848: LIST
3849: LIST
3850: LIST
3851: LIST
3852: LIST
3853: LIST
3854: LIST
3855: LIST
3856: LIST
3857: LIST
3858: LIST
3859: LIST
3860: LIST
3861: LIST
3862: LIST
3863: LIST
3864: LIST
3865: LIST
3866: LIST
3867: LIST
3868: LIST
3869: LIST
3870: LIST
3871: LIST
3872: LIST
3873: LIST
3874: LIST
3875: LIST
3876: LIST
3877: LIST
3878: LIST
3879: LIST
3880: LIST
3881: LIST
3882: LIST
3883: LIST
3884: LIST
3885: LIST
3886: LIST
3887: LIST
3888: LIST
3889: LIST
3890: LIST
3891: LIST
3892: LIST
3893: LIST
3894: LIST
3895: LIST
3896: LIST
3897: LIST
3898: LIST
3899: ST_TO_ADDR
3900: GO 3903
3902: POP
// if state > - 1 and state < 3 then
3903: LD_VAR 0 3
3907: PUSH
3908: LD_INT 1
3910: NEG
3911: GREATER
3912: IFFALSE 3924
3914: PUSH
3915: LD_VAR 0 3
3919: PUSH
3920: LD_INT 3
3922: LESS
3923: AND
3924: IFFALSE 3981
// for i in result do
3926: LD_ADDR_VAR 0 5
3930: PUSH
3931: LD_VAR 0 4
3935: PUSH
3936: FOR_IN
3937: IFFALSE 3979
// if GetTech ( i , side ) <> state then
3939: LD_VAR 0 5
3943: PPUSH
3944: LD_VAR 0 1
3948: PPUSH
3949: CALL_OW 321
3953: PUSH
3954: LD_VAR 0 3
3958: NONEQUAL
3959: IFFALSE 3977
// result := result diff i ;
3961: LD_ADDR_VAR 0 4
3965: PUSH
3966: LD_VAR 0 4
3970: PUSH
3971: LD_VAR 0 5
3975: DIFF
3976: ST_TO_ADDR
3977: GO 3936
3979: POP
3980: POP
// end ;
3981: LD_VAR 0 4
3985: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
3986: LD_INT 0
3988: PPUSH
3989: PPUSH
3990: PPUSH
// result := true ;
3991: LD_ADDR_VAR 0 3
3995: PUSH
3996: LD_INT 1
3998: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
3999: LD_ADDR_VAR 0 5
4003: PUSH
4004: LD_VAR 0 2
4008: PPUSH
4009: CALL_OW 480
4013: ST_TO_ADDR
// if not tmp then
4014: LD_VAR 0 5
4018: NOT
4019: IFFALSE 4023
// exit ;
4021: GO 4072
// for i in tmp do
4023: LD_ADDR_VAR 0 4
4027: PUSH
4028: LD_VAR 0 5
4032: PUSH
4033: FOR_IN
4034: IFFALSE 4070
// if GetTech ( i , side ) <> state_researched then
4036: LD_VAR 0 4
4040: PPUSH
4041: LD_VAR 0 1
4045: PPUSH
4046: CALL_OW 321
4050: PUSH
4051: LD_INT 2
4053: NONEQUAL
4054: IFFALSE 4068
// begin result := false ;
4056: LD_ADDR_VAR 0 3
4060: PUSH
4061: LD_INT 0
4063: ST_TO_ADDR
// exit ;
4064: POP
4065: POP
4066: GO 4072
// end ;
4068: GO 4033
4070: POP
4071: POP
// end ;
4072: LD_VAR 0 3
4076: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
4077: LD_INT 0
4079: PPUSH
4080: PPUSH
4081: PPUSH
4082: PPUSH
4083: PPUSH
4084: PPUSH
4085: PPUSH
4086: PPUSH
4087: PPUSH
4088: PPUSH
4089: PPUSH
4090: PPUSH
4091: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
4092: LD_VAR 0 1
4096: NOT
4097: IFTRUE 4114
4099: PUSH
4100: LD_VAR 0 1
4104: PPUSH
4105: CALL_OW 257
4109: PUSH
4110: LD_INT 9
4112: NONEQUAL
4113: OR
4114: IFFALSE 4118
// exit ;
4116: GO 4697
// side := GetSide ( unit ) ;
4118: LD_ADDR_VAR 0 9
4122: PUSH
4123: LD_VAR 0 1
4127: PPUSH
4128: CALL_OW 255
4132: ST_TO_ADDR
// tech_space := tech_spacanom ;
4133: LD_ADDR_VAR 0 12
4137: PUSH
4138: LD_INT 29
4140: ST_TO_ADDR
// tech_time := tech_taurad ;
4141: LD_ADDR_VAR 0 13
4145: PUSH
4146: LD_INT 28
4148: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
4149: LD_ADDR_VAR 0 11
4153: PUSH
4154: LD_VAR 0 1
4158: PPUSH
4159: CALL_OW 310
4163: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
4164: LD_VAR 0 11
4168: PPUSH
4169: CALL_OW 247
4173: PUSH
4174: LD_INT 2
4176: EQUAL
4177: IFFALSE 4181
// exit ;
4179: GO 4697
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4181: LD_ADDR_VAR 0 8
4185: PUSH
4186: LD_INT 81
4188: PUSH
4189: LD_VAR 0 9
4193: PUSH
4194: EMPTY
4195: LIST
4196: LIST
4197: PUSH
4198: LD_INT 3
4200: PUSH
4201: LD_INT 21
4203: PUSH
4204: LD_INT 3
4206: PUSH
4207: EMPTY
4208: LIST
4209: LIST
4210: PUSH
4211: EMPTY
4212: LIST
4213: LIST
4214: PUSH
4215: EMPTY
4216: LIST
4217: LIST
4218: PPUSH
4219: CALL_OW 69
4223: ST_TO_ADDR
// if not tmp then
4224: LD_VAR 0 8
4228: NOT
4229: IFFALSE 4233
// exit ;
4231: GO 4697
// if in_unit then
4233: LD_VAR 0 11
4237: IFFALSE 4261
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
4239: LD_ADDR_VAR 0 10
4243: PUSH
4244: LD_VAR 0 8
4248: PPUSH
4249: LD_VAR 0 11
4253: PPUSH
4254: CALL_OW 74
4258: ST_TO_ADDR
4259: GO 4281
// enemy := NearestUnitToUnit ( tmp , unit ) ;
4261: LD_ADDR_VAR 0 10
4265: PUSH
4266: LD_VAR 0 8
4270: PPUSH
4271: LD_VAR 0 1
4275: PPUSH
4276: CALL_OW 74
4280: ST_TO_ADDR
// if not enemy then
4281: LD_VAR 0 10
4285: NOT
4286: IFFALSE 4290
// exit ;
4288: GO 4697
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
4290: LD_VAR 0 11
4294: IFFALSE 4316
4296: PUSH
4297: LD_VAR 0 11
4301: PPUSH
4302: LD_VAR 0 10
4306: PPUSH
4307: CALL_OW 296
4311: PUSH
4312: LD_INT 13
4314: GREATER
4315: AND
4316: IFTRUE 4338
4318: PUSH
4319: LD_VAR 0 1
4323: PPUSH
4324: LD_VAR 0 10
4328: PPUSH
4329: CALL_OW 296
4333: PUSH
4334: LD_INT 12
4336: GREATER
4337: OR
4338: IFFALSE 4342
// exit ;
4340: GO 4697
// missile := [ 1 ] ;
4342: LD_ADDR_VAR 0 14
4346: PUSH
4347: LD_INT 1
4349: PUSH
4350: EMPTY
4351: LIST
4352: ST_TO_ADDR
// if Researched ( side , tech_space ) then
4353: LD_VAR 0 9
4357: PPUSH
4358: LD_VAR 0 12
4362: PPUSH
4363: CALL_OW 325
4367: IFFALSE 4396
// missile := Replace ( missile , missile + 1 , 2 ) ;
4369: LD_ADDR_VAR 0 14
4373: PUSH
4374: LD_VAR 0 14
4378: PPUSH
4379: LD_VAR 0 14
4383: PUSH
4384: LD_INT 1
4386: PLUS
4387: PPUSH
4388: LD_INT 2
4390: PPUSH
4391: CALL_OW 1
4395: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
4396: LD_VAR 0 9
4400: PPUSH
4401: LD_VAR 0 13
4405: PPUSH
4406: CALL_OW 325
4410: IFFALSE 4434
4412: PUSH
4413: LD_VAR 0 10
4417: PPUSH
4418: CALL_OW 255
4422: PPUSH
4423: LD_VAR 0 13
4427: PPUSH
4428: CALL_OW 325
4432: NOT
4433: AND
4434: IFFALSE 4463
// missile := Replace ( missile , missile + 1 , 3 ) ;
4436: LD_ADDR_VAR 0 14
4440: PUSH
4441: LD_VAR 0 14
4445: PPUSH
4446: LD_VAR 0 14
4450: PUSH
4451: LD_INT 1
4453: PLUS
4454: PPUSH
4455: LD_INT 3
4457: PPUSH
4458: CALL_OW 1
4462: ST_TO_ADDR
// if missile < 2 then
4463: LD_VAR 0 14
4467: PUSH
4468: LD_INT 2
4470: LESS
4471: IFFALSE 4475
// exit ;
4473: GO 4697
// x := GetX ( enemy ) ;
4475: LD_ADDR_VAR 0 4
4479: PUSH
4480: LD_VAR 0 10
4484: PPUSH
4485: CALL_OW 250
4489: ST_TO_ADDR
// y := GetY ( enemy ) ;
4490: LD_ADDR_VAR 0 5
4494: PUSH
4495: LD_VAR 0 10
4499: PPUSH
4500: CALL_OW 251
4504: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
4505: LD_ADDR_VAR 0 6
4509: PUSH
4510: LD_VAR 0 4
4514: PUSH
4515: LD_INT 1
4517: NEG
4518: PPUSH
4519: LD_INT 1
4521: PPUSH
4522: CALL_OW 12
4526: PLUS
4527: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
4528: LD_ADDR_VAR 0 7
4532: PUSH
4533: LD_VAR 0 5
4537: PUSH
4538: LD_INT 1
4540: NEG
4541: PPUSH
4542: LD_INT 1
4544: PPUSH
4545: CALL_OW 12
4549: PLUS
4550: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4551: LD_VAR 0 6
4555: PPUSH
4556: LD_VAR 0 7
4560: PPUSH
4561: CALL_OW 488
4565: NOT
4566: IFFALSE 4588
// begin _x := x ;
4568: LD_ADDR_VAR 0 6
4572: PUSH
4573: LD_VAR 0 4
4577: ST_TO_ADDR
// _y := y ;
4578: LD_ADDR_VAR 0 7
4582: PUSH
4583: LD_VAR 0 5
4587: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
4588: LD_ADDR_VAR 0 3
4592: PUSH
4593: LD_INT 1
4595: PPUSH
4596: LD_VAR 0 14
4600: PPUSH
4601: CALL_OW 12
4605: ST_TO_ADDR
// case i of 1 :
4606: LD_VAR 0 3
4610: PUSH
4611: LD_INT 1
4613: DOUBLE
4614: EQUAL
4615: IFTRUE 4619
4617: GO 4636
4619: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
4620: LD_VAR 0 1
4624: PPUSH
4625: LD_VAR 0 10
4629: PPUSH
4630: CALL_OW 115
4634: GO 4697
4636: LD_INT 2
4638: DOUBLE
4639: EQUAL
4640: IFTRUE 4644
4642: GO 4666
4644: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
4645: LD_VAR 0 1
4649: PPUSH
4650: LD_VAR 0 6
4654: PPUSH
4655: LD_VAR 0 7
4659: PPUSH
4660: CALL_OW 153
4664: GO 4697
4666: LD_INT 3
4668: DOUBLE
4669: EQUAL
4670: IFTRUE 4674
4672: GO 4696
4674: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
4675: LD_VAR 0 1
4679: PPUSH
4680: LD_VAR 0 6
4684: PPUSH
4685: LD_VAR 0 7
4689: PPUSH
4690: CALL_OW 154
4694: GO 4697
4696: POP
// end ;
4697: LD_VAR 0 2
4701: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
4702: LD_INT 0
4704: PPUSH
4705: PPUSH
4706: PPUSH
4707: PPUSH
4708: PPUSH
4709: PPUSH
// if not unit or not building then
4710: LD_VAR 0 1
4714: NOT
4715: IFTRUE 4724
4717: PUSH
4718: LD_VAR 0 2
4722: NOT
4723: OR
4724: IFFALSE 4728
// exit ;
4726: GO 4886
// x := GetX ( building ) ;
4728: LD_ADDR_VAR 0 5
4732: PUSH
4733: LD_VAR 0 2
4737: PPUSH
4738: CALL_OW 250
4742: ST_TO_ADDR
// y := GetY ( building ) ;
4743: LD_ADDR_VAR 0 6
4747: PUSH
4748: LD_VAR 0 2
4752: PPUSH
4753: CALL_OW 251
4757: ST_TO_ADDR
// for i := 0 to 5 do
4758: LD_ADDR_VAR 0 4
4762: PUSH
4763: DOUBLE
4764: LD_INT 0
4766: DEC
4767: ST_TO_ADDR
4768: LD_INT 5
4770: PUSH
4771: FOR_TO
4772: IFFALSE 4884
// begin _x := ShiftX ( x , i , 3 ) ;
4774: LD_ADDR_VAR 0 7
4778: PUSH
4779: LD_VAR 0 5
4783: PPUSH
4784: LD_VAR 0 4
4788: PPUSH
4789: LD_INT 3
4791: PPUSH
4792: CALL_OW 272
4796: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
4797: LD_ADDR_VAR 0 8
4801: PUSH
4802: LD_VAR 0 6
4806: PPUSH
4807: LD_VAR 0 4
4811: PPUSH
4812: LD_INT 3
4814: PPUSH
4815: CALL_OW 273
4819: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4820: LD_VAR 0 7
4824: PPUSH
4825: LD_VAR 0 8
4829: PPUSH
4830: CALL_OW 488
4834: NOT
4835: IFFALSE 4839
// continue ;
4837: GO 4771
// if HexInfo ( _x , _y ) = 0 then
4839: LD_VAR 0 7
4843: PPUSH
4844: LD_VAR 0 8
4848: PPUSH
4849: CALL_OW 428
4853: PUSH
4854: LD_INT 0
4856: EQUAL
4857: IFFALSE 4882
// begin ComMoveXY ( unit , _x , _y ) ;
4859: LD_VAR 0 1
4863: PPUSH
4864: LD_VAR 0 7
4868: PPUSH
4869: LD_VAR 0 8
4873: PPUSH
4874: CALL_OW 111
// exit ;
4878: POP
4879: POP
4880: GO 4886
// end ; end ;
4882: GO 4771
4884: POP
4885: POP
// end ;
4886: LD_VAR 0 3
4890: RET
// export function ScanBase ( side , base_area ) ; begin
4891: LD_INT 0
4893: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
4894: LD_ADDR_VAR 0 3
4898: PUSH
4899: LD_VAR 0 2
4903: PPUSH
4904: LD_INT 81
4906: PUSH
4907: LD_VAR 0 1
4911: PUSH
4912: EMPTY
4913: LIST
4914: LIST
4915: PPUSH
4916: CALL_OW 70
4920: ST_TO_ADDR
// end ;
4921: LD_VAR 0 3
4925: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
4926: LD_INT 0
4928: PPUSH
4929: PPUSH
4930: PPUSH
4931: PPUSH
// result := false ;
4932: LD_ADDR_VAR 0 2
4936: PUSH
4937: LD_INT 0
4939: ST_TO_ADDR
// side := GetSide ( unit ) ;
4940: LD_ADDR_VAR 0 3
4944: PUSH
4945: LD_VAR 0 1
4949: PPUSH
4950: CALL_OW 255
4954: ST_TO_ADDR
// nat := GetNation ( unit ) ;
4955: LD_ADDR_VAR 0 4
4959: PUSH
4960: LD_VAR 0 1
4964: PPUSH
4965: CALL_OW 248
4969: ST_TO_ADDR
// case nat of 1 :
4970: LD_VAR 0 4
4974: PUSH
4975: LD_INT 1
4977: DOUBLE
4978: EQUAL
4979: IFTRUE 4983
4981: GO 4994
4983: POP
// tech := tech_lassight ; 2 :
4984: LD_ADDR_VAR 0 5
4988: PUSH
4989: LD_INT 12
4991: ST_TO_ADDR
4992: GO 5033
4994: LD_INT 2
4996: DOUBLE
4997: EQUAL
4998: IFTRUE 5002
5000: GO 5013
5002: POP
// tech := tech_mortar ; 3 :
5003: LD_ADDR_VAR 0 5
5007: PUSH
5008: LD_INT 41
5010: ST_TO_ADDR
5011: GO 5033
5013: LD_INT 3
5015: DOUBLE
5016: EQUAL
5017: IFTRUE 5021
5019: GO 5032
5021: POP
// tech := tech_bazooka ; end ;
5022: LD_ADDR_VAR 0 5
5026: PUSH
5027: LD_INT 44
5029: ST_TO_ADDR
5030: GO 5033
5032: POP
// if Researched ( side , tech ) then
5033: LD_VAR 0 3
5037: PPUSH
5038: LD_VAR 0 5
5042: PPUSH
5043: CALL_OW 325
5047: IFFALSE 5074
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
5049: LD_ADDR_VAR 0 2
5053: PUSH
5054: LD_INT 5
5056: PUSH
5057: LD_INT 8
5059: PUSH
5060: LD_INT 9
5062: PUSH
5063: EMPTY
5064: LIST
5065: LIST
5066: LIST
5067: PUSH
5068: LD_VAR 0 4
5072: ARRAY
5073: ST_TO_ADDR
// end ;
5074: LD_VAR 0 2
5078: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
5079: LD_INT 0
5081: PPUSH
5082: PPUSH
5083: PPUSH
// if not mines then
5084: LD_VAR 0 2
5088: NOT
5089: IFFALSE 5093
// exit ;
5091: GO 5237
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
5093: LD_ADDR_VAR 0 5
5097: PUSH
5098: LD_INT 81
5100: PUSH
5101: LD_VAR 0 1
5105: PUSH
5106: EMPTY
5107: LIST
5108: LIST
5109: PUSH
5110: LD_INT 3
5112: PUSH
5113: LD_INT 21
5115: PUSH
5116: LD_INT 3
5118: PUSH
5119: EMPTY
5120: LIST
5121: LIST
5122: PUSH
5123: EMPTY
5124: LIST
5125: LIST
5126: PUSH
5127: EMPTY
5128: LIST
5129: LIST
5130: PPUSH
5131: CALL_OW 69
5135: ST_TO_ADDR
// for i in mines do
5136: LD_ADDR_VAR 0 4
5140: PUSH
5141: LD_VAR 0 2
5145: PUSH
5146: FOR_IN
5147: IFFALSE 5235
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
5149: LD_VAR 0 4
5153: PUSH
5154: LD_INT 1
5156: ARRAY
5157: PPUSH
5158: LD_VAR 0 4
5162: PUSH
5163: LD_INT 2
5165: ARRAY
5166: PPUSH
5167: CALL_OW 458
5171: NOT
5172: IFFALSE 5176
// continue ;
5174: GO 5146
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
5176: LD_VAR 0 4
5180: PUSH
5181: LD_INT 1
5183: ARRAY
5184: PPUSH
5185: LD_VAR 0 4
5189: PUSH
5190: LD_INT 2
5192: ARRAY
5193: PPUSH
5194: CALL_OW 428
5198: PUSH
5199: LD_VAR 0 5
5203: IN
5204: IFFALSE 5233
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
5206: LD_VAR 0 4
5210: PUSH
5211: LD_INT 1
5213: ARRAY
5214: PPUSH
5215: LD_VAR 0 4
5219: PUSH
5220: LD_INT 2
5222: ARRAY
5223: PPUSH
5224: LD_VAR 0 1
5228: PPUSH
5229: CALL_OW 456
// end ;
5233: GO 5146
5235: POP
5236: POP
// end ;
5237: LD_VAR 0 3
5241: RET
// export function Count ( array ) ; begin
5242: LD_INT 0
5244: PPUSH
// result := array + 0 ;
5245: LD_ADDR_VAR 0 2
5249: PUSH
5250: LD_VAR 0 1
5254: PUSH
5255: LD_INT 0
5257: PLUS
5258: ST_TO_ADDR
// end ;
5259: LD_VAR 0 2
5263: RET
// export function IsEmpty ( building ) ; begin
5264: LD_INT 0
5266: PPUSH
// if not building then
5267: LD_VAR 0 1
5271: NOT
5272: IFFALSE 5276
// exit ;
5274: GO 5319
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
5276: LD_ADDR_VAR 0 2
5280: PUSH
5281: LD_VAR 0 1
5285: PUSH
5286: LD_INT 22
5288: PUSH
5289: LD_VAR 0 1
5293: PPUSH
5294: CALL_OW 255
5298: PUSH
5299: EMPTY
5300: LIST
5301: LIST
5302: PUSH
5303: LD_INT 58
5305: PUSH
5306: EMPTY
5307: LIST
5308: PUSH
5309: EMPTY
5310: LIST
5311: LIST
5312: PPUSH
5313: CALL_OW 69
5317: IN
5318: ST_TO_ADDR
// end ;
5319: LD_VAR 0 2
5323: RET
// export function IsNotFull ( building ) ; var places ; begin
5324: LD_INT 0
5326: PPUSH
5327: PPUSH
// if not building then
5328: LD_VAR 0 1
5332: NOT
5333: IFFALSE 5337
// exit ;
5335: GO 5365
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
5337: LD_ADDR_VAR 0 2
5341: PUSH
5342: LD_VAR 0 1
5346: PPUSH
5347: LD_INT 3
5349: PUSH
5350: LD_INT 62
5352: PUSH
5353: EMPTY
5354: LIST
5355: PUSH
5356: EMPTY
5357: LIST
5358: LIST
5359: PPUSH
5360: CALL_OW 72
5364: ST_TO_ADDR
// end ;
5365: LD_VAR 0 2
5369: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
5370: LD_INT 0
5372: PPUSH
5373: PPUSH
5374: PPUSH
5375: PPUSH
// tmp := [ ] ;
5376: LD_ADDR_VAR 0 3
5380: PUSH
5381: EMPTY
5382: ST_TO_ADDR
// list := [ ] ;
5383: LD_ADDR_VAR 0 5
5387: PUSH
5388: EMPTY
5389: ST_TO_ADDR
// for i = 16 to 25 do
5390: LD_ADDR_VAR 0 4
5394: PUSH
5395: DOUBLE
5396: LD_INT 16
5398: DEC
5399: ST_TO_ADDR
5400: LD_INT 25
5402: PUSH
5403: FOR_TO
5404: IFFALSE 5477
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
5406: LD_ADDR_VAR 0 3
5410: PUSH
5411: LD_VAR 0 3
5415: PUSH
5416: LD_INT 22
5418: PUSH
5419: LD_VAR 0 1
5423: PPUSH
5424: CALL_OW 255
5428: PUSH
5429: EMPTY
5430: LIST
5431: LIST
5432: PUSH
5433: LD_INT 91
5435: PUSH
5436: LD_VAR 0 1
5440: PUSH
5441: LD_INT 6
5443: PUSH
5444: EMPTY
5445: LIST
5446: LIST
5447: LIST
5448: PUSH
5449: LD_INT 30
5451: PUSH
5452: LD_VAR 0 4
5456: PUSH
5457: EMPTY
5458: LIST
5459: LIST
5460: PUSH
5461: EMPTY
5462: LIST
5463: LIST
5464: LIST
5465: PUSH
5466: EMPTY
5467: LIST
5468: PPUSH
5469: CALL_OW 69
5473: ADD
5474: ST_TO_ADDR
5475: GO 5403
5477: POP
5478: POP
// for i = 1 to tmp do
5479: LD_ADDR_VAR 0 4
5483: PUSH
5484: DOUBLE
5485: LD_INT 1
5487: DEC
5488: ST_TO_ADDR
5489: LD_VAR 0 3
5493: PUSH
5494: FOR_TO
5495: IFFALSE 5583
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
5497: LD_ADDR_VAR 0 5
5501: PUSH
5502: LD_VAR 0 5
5506: PUSH
5507: LD_VAR 0 3
5511: PUSH
5512: LD_VAR 0 4
5516: ARRAY
5517: PPUSH
5518: CALL_OW 266
5522: PUSH
5523: LD_VAR 0 3
5527: PUSH
5528: LD_VAR 0 4
5532: ARRAY
5533: PPUSH
5534: CALL_OW 250
5538: PUSH
5539: LD_VAR 0 3
5543: PUSH
5544: LD_VAR 0 4
5548: ARRAY
5549: PPUSH
5550: CALL_OW 251
5554: PUSH
5555: LD_VAR 0 3
5559: PUSH
5560: LD_VAR 0 4
5564: ARRAY
5565: PPUSH
5566: CALL_OW 254
5570: PUSH
5571: EMPTY
5572: LIST
5573: LIST
5574: LIST
5575: LIST
5576: PUSH
5577: EMPTY
5578: LIST
5579: ADD
5580: ST_TO_ADDR
5581: GO 5494
5583: POP
5584: POP
// result := list ;
5585: LD_ADDR_VAR 0 2
5589: PUSH
5590: LD_VAR 0 5
5594: ST_TO_ADDR
// end ;
5595: LD_VAR 0 2
5599: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
5600: LD_INT 0
5602: PPUSH
5603: PPUSH
5604: PPUSH
5605: PPUSH
5606: PPUSH
5607: PPUSH
5608: PPUSH
// if not factory then
5609: LD_VAR 0 1
5613: NOT
5614: IFFALSE 5618
// exit ;
5616: GO 6221
// if control = control_apeman then
5618: LD_VAR 0 4
5622: PUSH
5623: LD_INT 5
5625: EQUAL
5626: IFFALSE 5735
// begin tmp := UnitsInside ( factory ) ;
5628: LD_ADDR_VAR 0 8
5632: PUSH
5633: LD_VAR 0 1
5637: PPUSH
5638: CALL_OW 313
5642: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
5643: LD_VAR 0 8
5647: PPUSH
5648: LD_INT 25
5650: PUSH
5651: LD_INT 12
5653: PUSH
5654: EMPTY
5655: LIST
5656: LIST
5657: PPUSH
5658: CALL_OW 72
5662: NOT
5663: IFFALSE 5673
// control := control_manual ;
5665: LD_ADDR_VAR 0 4
5669: PUSH
5670: LD_INT 1
5672: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
5673: LD_ADDR_VAR 0 8
5677: PUSH
5678: LD_VAR 0 1
5682: PPUSH
5683: CALL 5370 0 1
5687: ST_TO_ADDR
// if tmp then
5688: LD_VAR 0 8
5692: IFFALSE 5735
// begin for i in tmp do
5694: LD_ADDR_VAR 0 7
5698: PUSH
5699: LD_VAR 0 8
5703: PUSH
5704: FOR_IN
5705: IFFALSE 5733
// if i [ 1 ] = b_ext_radio then
5707: LD_VAR 0 7
5711: PUSH
5712: LD_INT 1
5714: ARRAY
5715: PUSH
5716: LD_INT 22
5718: EQUAL
5719: IFFALSE 5731
// begin control := control_remote ;
5721: LD_ADDR_VAR 0 4
5725: PUSH
5726: LD_INT 2
5728: ST_TO_ADDR
// break ;
5729: GO 5733
// end ;
5731: GO 5704
5733: POP
5734: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5735: LD_VAR 0 1
5739: PPUSH
5740: LD_VAR 0 2
5744: PPUSH
5745: LD_VAR 0 3
5749: PPUSH
5750: LD_VAR 0 4
5754: PPUSH
5755: LD_VAR 0 5
5759: PPUSH
5760: CALL_OW 448
5764: IFFALSE 5799
// begin result := [ chassis , engine , control , weapon ] ;
5766: LD_ADDR_VAR 0 6
5770: PUSH
5771: LD_VAR 0 2
5775: PUSH
5776: LD_VAR 0 3
5780: PUSH
5781: LD_VAR 0 4
5785: PUSH
5786: LD_VAR 0 5
5790: PUSH
5791: EMPTY
5792: LIST
5793: LIST
5794: LIST
5795: LIST
5796: ST_TO_ADDR
// exit ;
5797: GO 6221
// end ; _chassis := AvailableChassisList ( factory ) ;
5799: LD_ADDR_VAR 0 9
5803: PUSH
5804: LD_VAR 0 1
5808: PPUSH
5809: CALL_OW 475
5813: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
5814: LD_ADDR_VAR 0 11
5818: PUSH
5819: LD_VAR 0 1
5823: PPUSH
5824: CALL_OW 476
5828: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
5829: LD_ADDR_VAR 0 12
5833: PUSH
5834: LD_VAR 0 1
5838: PPUSH
5839: CALL_OW 477
5843: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
5844: LD_ADDR_VAR 0 10
5848: PUSH
5849: LD_VAR 0 1
5853: PPUSH
5854: CALL_OW 478
5858: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
5859: LD_VAR 0 9
5863: NOT
5864: IFTRUE 5873
5866: PUSH
5867: LD_VAR 0 11
5871: NOT
5872: OR
5873: IFTRUE 5882
5875: PUSH
5876: LD_VAR 0 12
5880: NOT
5881: OR
5882: IFTRUE 5891
5884: PUSH
5885: LD_VAR 0 10
5889: NOT
5890: OR
5891: IFFALSE 5926
// begin result := [ chassis , engine , control , weapon ] ;
5893: LD_ADDR_VAR 0 6
5897: PUSH
5898: LD_VAR 0 2
5902: PUSH
5903: LD_VAR 0 3
5907: PUSH
5908: LD_VAR 0 4
5912: PUSH
5913: LD_VAR 0 5
5917: PUSH
5918: EMPTY
5919: LIST
5920: LIST
5921: LIST
5922: LIST
5923: ST_TO_ADDR
// exit ;
5924: GO 6221
// end ; if not chassis in _chassis then
5926: LD_VAR 0 2
5930: PUSH
5931: LD_VAR 0 9
5935: IN
5936: NOT
5937: IFFALSE 5963
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
5939: LD_ADDR_VAR 0 2
5943: PUSH
5944: LD_VAR 0 9
5948: PUSH
5949: LD_INT 1
5951: PPUSH
5952: LD_VAR 0 9
5956: PPUSH
5957: CALL_OW 12
5961: ARRAY
5962: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
5963: LD_VAR 0 2
5967: PPUSH
5968: LD_VAR 0 3
5972: PPUSH
5973: CALL 6226 0 2
5977: NOT
5978: IFFALSE 6039
// repeat engine := _engine [ 1 ] ;
5980: LD_ADDR_VAR 0 3
5984: PUSH
5985: LD_VAR 0 11
5989: PUSH
5990: LD_INT 1
5992: ARRAY
5993: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
5994: LD_ADDR_VAR 0 11
5998: PUSH
5999: LD_VAR 0 11
6003: PPUSH
6004: LD_INT 1
6006: PPUSH
6007: CALL_OW 3
6011: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
6012: LD_VAR 0 2
6016: PPUSH
6017: LD_VAR 0 3
6021: PPUSH
6022: CALL 6226 0 2
6026: IFTRUE 6037
6028: PUSH
6029: LD_VAR 0 11
6033: PUSH
6034: EMPTY
6035: EQUAL
6036: OR
6037: IFFALSE 5980
// if not control in _control then
6039: LD_VAR 0 4
6043: PUSH
6044: LD_VAR 0 12
6048: IN
6049: NOT
6050: IFFALSE 6076
// control := _control [ rand ( 1 , _control ) ] ;
6052: LD_ADDR_VAR 0 4
6056: PUSH
6057: LD_VAR 0 12
6061: PUSH
6062: LD_INT 1
6064: PPUSH
6065: LD_VAR 0 12
6069: PPUSH
6070: CALL_OW 12
6074: ARRAY
6075: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
6076: LD_VAR 0 2
6080: PPUSH
6081: LD_VAR 0 5
6085: PPUSH
6086: CALL 6448 0 2
6090: NOT
6091: IFFALSE 6152
// repeat weapon := _weapon [ 1 ] ;
6093: LD_ADDR_VAR 0 5
6097: PUSH
6098: LD_VAR 0 10
6102: PUSH
6103: LD_INT 1
6105: ARRAY
6106: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
6107: LD_ADDR_VAR 0 10
6111: PUSH
6112: LD_VAR 0 10
6116: PPUSH
6117: LD_INT 1
6119: PPUSH
6120: CALL_OW 3
6124: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
6125: LD_VAR 0 2
6129: PPUSH
6130: LD_VAR 0 5
6134: PPUSH
6135: CALL 6448 0 2
6139: IFTRUE 6150
6141: PUSH
6142: LD_VAR 0 10
6146: PUSH
6147: EMPTY
6148: EQUAL
6149: OR
6150: IFFALSE 6093
// result := [ ] ;
6152: LD_ADDR_VAR 0 6
6156: PUSH
6157: EMPTY
6158: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
6159: LD_VAR 0 1
6163: PPUSH
6164: LD_VAR 0 2
6168: PPUSH
6169: LD_VAR 0 3
6173: PPUSH
6174: LD_VAR 0 4
6178: PPUSH
6179: LD_VAR 0 5
6183: PPUSH
6184: CALL_OW 448
6188: IFFALSE 6221
// result := [ chassis , engine , control , weapon ] ;
6190: LD_ADDR_VAR 0 6
6194: PUSH
6195: LD_VAR 0 2
6199: PUSH
6200: LD_VAR 0 3
6204: PUSH
6205: LD_VAR 0 4
6209: PUSH
6210: LD_VAR 0 5
6214: PUSH
6215: EMPTY
6216: LIST
6217: LIST
6218: LIST
6219: LIST
6220: ST_TO_ADDR
// end ;
6221: LD_VAR 0 6
6225: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
6226: LD_INT 0
6228: PPUSH
// if not chassis or not engine then
6229: LD_VAR 0 1
6233: NOT
6234: IFTRUE 6243
6236: PUSH
6237: LD_VAR 0 2
6241: NOT
6242: OR
6243: IFFALSE 6247
// exit ;
6245: GO 6443
// case engine of engine_solar :
6247: LD_VAR 0 2
6251: PUSH
6252: LD_INT 2
6254: DOUBLE
6255: EQUAL
6256: IFTRUE 6260
6258: GO 6298
6260: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
6261: LD_ADDR_VAR 0 3
6265: PUSH
6266: LD_INT 11
6268: PUSH
6269: LD_INT 12
6271: PUSH
6272: LD_INT 13
6274: PUSH
6275: LD_INT 14
6277: PUSH
6278: LD_INT 1
6280: PUSH
6281: LD_INT 2
6283: PUSH
6284: LD_INT 3
6286: PUSH
6287: EMPTY
6288: LIST
6289: LIST
6290: LIST
6291: LIST
6292: LIST
6293: LIST
6294: LIST
6295: ST_TO_ADDR
6296: GO 6427
6298: LD_INT 1
6300: DOUBLE
6301: EQUAL
6302: IFTRUE 6306
6304: GO 6368
6306: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
6307: LD_ADDR_VAR 0 3
6311: PUSH
6312: LD_INT 11
6314: PUSH
6315: LD_INT 12
6317: PUSH
6318: LD_INT 13
6320: PUSH
6321: LD_INT 14
6323: PUSH
6324: LD_INT 1
6326: PUSH
6327: LD_INT 2
6329: PUSH
6330: LD_INT 3
6332: PUSH
6333: LD_INT 4
6335: PUSH
6336: LD_INT 5
6338: PUSH
6339: LD_INT 21
6341: PUSH
6342: LD_INT 23
6344: PUSH
6345: LD_INT 22
6347: PUSH
6348: LD_INT 24
6350: PUSH
6351: EMPTY
6352: LIST
6353: LIST
6354: LIST
6355: LIST
6356: LIST
6357: LIST
6358: LIST
6359: LIST
6360: LIST
6361: LIST
6362: LIST
6363: LIST
6364: LIST
6365: ST_TO_ADDR
6366: GO 6427
6368: LD_INT 3
6370: DOUBLE
6371: EQUAL
6372: IFTRUE 6376
6374: GO 6426
6376: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
6377: LD_ADDR_VAR 0 3
6381: PUSH
6382: LD_INT 13
6384: PUSH
6385: LD_INT 14
6387: PUSH
6388: LD_INT 2
6390: PUSH
6391: LD_INT 3
6393: PUSH
6394: LD_INT 4
6396: PUSH
6397: LD_INT 5
6399: PUSH
6400: LD_INT 21
6402: PUSH
6403: LD_INT 22
6405: PUSH
6406: LD_INT 23
6408: PUSH
6409: LD_INT 24
6411: PUSH
6412: EMPTY
6413: LIST
6414: LIST
6415: LIST
6416: LIST
6417: LIST
6418: LIST
6419: LIST
6420: LIST
6421: LIST
6422: LIST
6423: ST_TO_ADDR
6424: GO 6427
6426: POP
// result := ( chassis in result ) ;
6427: LD_ADDR_VAR 0 3
6431: PUSH
6432: LD_VAR 0 1
6436: PUSH
6437: LD_VAR 0 3
6441: IN
6442: ST_TO_ADDR
// end ;
6443: LD_VAR 0 3
6447: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
6448: LD_INT 0
6450: PPUSH
// if not chassis or not weapon then
6451: LD_VAR 0 1
6455: NOT
6456: IFTRUE 6465
6458: PUSH
6459: LD_VAR 0 2
6463: NOT
6464: OR
6465: IFFALSE 6469
// exit ;
6467: GO 7563
// case weapon of us_machine_gun :
6469: LD_VAR 0 2
6473: PUSH
6474: LD_INT 2
6476: DOUBLE
6477: EQUAL
6478: IFTRUE 6482
6480: GO 6512
6482: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
6483: LD_ADDR_VAR 0 3
6487: PUSH
6488: LD_INT 1
6490: PUSH
6491: LD_INT 2
6493: PUSH
6494: LD_INT 3
6496: PUSH
6497: LD_INT 4
6499: PUSH
6500: LD_INT 5
6502: PUSH
6503: EMPTY
6504: LIST
6505: LIST
6506: LIST
6507: LIST
6508: LIST
6509: ST_TO_ADDR
6510: GO 7547
6512: LD_INT 3
6514: DOUBLE
6515: EQUAL
6516: IFTRUE 6520
6518: GO 6550
6520: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
6521: LD_ADDR_VAR 0 3
6525: PUSH
6526: LD_INT 1
6528: PUSH
6529: LD_INT 2
6531: PUSH
6532: LD_INT 3
6534: PUSH
6535: LD_INT 4
6537: PUSH
6538: LD_INT 5
6540: PUSH
6541: EMPTY
6542: LIST
6543: LIST
6544: LIST
6545: LIST
6546: LIST
6547: ST_TO_ADDR
6548: GO 7547
6550: LD_INT 11
6552: DOUBLE
6553: EQUAL
6554: IFTRUE 6558
6556: GO 6588
6558: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
6559: LD_ADDR_VAR 0 3
6563: PUSH
6564: LD_INT 1
6566: PUSH
6567: LD_INT 2
6569: PUSH
6570: LD_INT 3
6572: PUSH
6573: LD_INT 4
6575: PUSH
6576: LD_INT 5
6578: PUSH
6579: EMPTY
6580: LIST
6581: LIST
6582: LIST
6583: LIST
6584: LIST
6585: ST_TO_ADDR
6586: GO 7547
6588: LD_INT 4
6590: DOUBLE
6591: EQUAL
6592: IFTRUE 6596
6594: GO 6622
6596: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
6597: LD_ADDR_VAR 0 3
6601: PUSH
6602: LD_INT 2
6604: PUSH
6605: LD_INT 3
6607: PUSH
6608: LD_INT 4
6610: PUSH
6611: LD_INT 5
6613: PUSH
6614: EMPTY
6615: LIST
6616: LIST
6617: LIST
6618: LIST
6619: ST_TO_ADDR
6620: GO 7547
6622: LD_INT 5
6624: DOUBLE
6625: EQUAL
6626: IFTRUE 6630
6628: GO 6656
6630: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
6631: LD_ADDR_VAR 0 3
6635: PUSH
6636: LD_INT 2
6638: PUSH
6639: LD_INT 3
6641: PUSH
6642: LD_INT 4
6644: PUSH
6645: LD_INT 5
6647: PUSH
6648: EMPTY
6649: LIST
6650: LIST
6651: LIST
6652: LIST
6653: ST_TO_ADDR
6654: GO 7547
6656: LD_INT 9
6658: DOUBLE
6659: EQUAL
6660: IFTRUE 6664
6662: GO 6690
6664: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
6665: LD_ADDR_VAR 0 3
6669: PUSH
6670: LD_INT 2
6672: PUSH
6673: LD_INT 3
6675: PUSH
6676: LD_INT 4
6678: PUSH
6679: LD_INT 5
6681: PUSH
6682: EMPTY
6683: LIST
6684: LIST
6685: LIST
6686: LIST
6687: ST_TO_ADDR
6688: GO 7547
6690: LD_INT 7
6692: DOUBLE
6693: EQUAL
6694: IFTRUE 6698
6696: GO 6724
6698: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
6699: LD_ADDR_VAR 0 3
6703: PUSH
6704: LD_INT 2
6706: PUSH
6707: LD_INT 3
6709: PUSH
6710: LD_INT 4
6712: PUSH
6713: LD_INT 5
6715: PUSH
6716: EMPTY
6717: LIST
6718: LIST
6719: LIST
6720: LIST
6721: ST_TO_ADDR
6722: GO 7547
6724: LD_INT 12
6726: DOUBLE
6727: EQUAL
6728: IFTRUE 6732
6730: GO 6758
6732: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
6733: LD_ADDR_VAR 0 3
6737: PUSH
6738: LD_INT 2
6740: PUSH
6741: LD_INT 3
6743: PUSH
6744: LD_INT 4
6746: PUSH
6747: LD_INT 5
6749: PUSH
6750: EMPTY
6751: LIST
6752: LIST
6753: LIST
6754: LIST
6755: ST_TO_ADDR
6756: GO 7547
6758: LD_INT 13
6760: DOUBLE
6761: EQUAL
6762: IFTRUE 6766
6764: GO 6792
6766: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
6767: LD_ADDR_VAR 0 3
6771: PUSH
6772: LD_INT 2
6774: PUSH
6775: LD_INT 3
6777: PUSH
6778: LD_INT 4
6780: PUSH
6781: LD_INT 5
6783: PUSH
6784: EMPTY
6785: LIST
6786: LIST
6787: LIST
6788: LIST
6789: ST_TO_ADDR
6790: GO 7547
6792: LD_INT 14
6794: DOUBLE
6795: EQUAL
6796: IFTRUE 6800
6798: GO 6818
6800: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
6801: LD_ADDR_VAR 0 3
6805: PUSH
6806: LD_INT 4
6808: PUSH
6809: LD_INT 5
6811: PUSH
6812: EMPTY
6813: LIST
6814: LIST
6815: ST_TO_ADDR
6816: GO 7547
6818: LD_INT 6
6820: DOUBLE
6821: EQUAL
6822: IFTRUE 6826
6824: GO 6844
6826: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
6827: LD_ADDR_VAR 0 3
6831: PUSH
6832: LD_INT 4
6834: PUSH
6835: LD_INT 5
6837: PUSH
6838: EMPTY
6839: LIST
6840: LIST
6841: ST_TO_ADDR
6842: GO 7547
6844: LD_INT 10
6846: DOUBLE
6847: EQUAL
6848: IFTRUE 6852
6850: GO 6870
6852: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
6853: LD_ADDR_VAR 0 3
6857: PUSH
6858: LD_INT 4
6860: PUSH
6861: LD_INT 5
6863: PUSH
6864: EMPTY
6865: LIST
6866: LIST
6867: ST_TO_ADDR
6868: GO 7547
6870: LD_INT 22
6872: DOUBLE
6873: EQUAL
6874: IFTRUE 6878
6876: GO 6904
6878: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
6879: LD_ADDR_VAR 0 3
6883: PUSH
6884: LD_INT 11
6886: PUSH
6887: LD_INT 12
6889: PUSH
6890: LD_INT 13
6892: PUSH
6893: LD_INT 14
6895: PUSH
6896: EMPTY
6897: LIST
6898: LIST
6899: LIST
6900: LIST
6901: ST_TO_ADDR
6902: GO 7547
6904: LD_INT 23
6906: DOUBLE
6907: EQUAL
6908: IFTRUE 6912
6910: GO 6938
6912: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
6913: LD_ADDR_VAR 0 3
6917: PUSH
6918: LD_INT 11
6920: PUSH
6921: LD_INT 12
6923: PUSH
6924: LD_INT 13
6926: PUSH
6927: LD_INT 14
6929: PUSH
6930: EMPTY
6931: LIST
6932: LIST
6933: LIST
6934: LIST
6935: ST_TO_ADDR
6936: GO 7547
6938: LD_INT 24
6940: DOUBLE
6941: EQUAL
6942: IFTRUE 6946
6944: GO 6972
6946: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
6947: LD_ADDR_VAR 0 3
6951: PUSH
6952: LD_INT 11
6954: PUSH
6955: LD_INT 12
6957: PUSH
6958: LD_INT 13
6960: PUSH
6961: LD_INT 14
6963: PUSH
6964: EMPTY
6965: LIST
6966: LIST
6967: LIST
6968: LIST
6969: ST_TO_ADDR
6970: GO 7547
6972: LD_INT 30
6974: DOUBLE
6975: EQUAL
6976: IFTRUE 6980
6978: GO 7006
6980: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
6981: LD_ADDR_VAR 0 3
6985: PUSH
6986: LD_INT 11
6988: PUSH
6989: LD_INT 12
6991: PUSH
6992: LD_INT 13
6994: PUSH
6995: LD_INT 14
6997: PUSH
6998: EMPTY
6999: LIST
7000: LIST
7001: LIST
7002: LIST
7003: ST_TO_ADDR
7004: GO 7547
7006: LD_INT 25
7008: DOUBLE
7009: EQUAL
7010: IFTRUE 7014
7012: GO 7032
7014: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
7015: LD_ADDR_VAR 0 3
7019: PUSH
7020: LD_INT 13
7022: PUSH
7023: LD_INT 14
7025: PUSH
7026: EMPTY
7027: LIST
7028: LIST
7029: ST_TO_ADDR
7030: GO 7547
7032: LD_INT 27
7034: DOUBLE
7035: EQUAL
7036: IFTRUE 7040
7038: GO 7058
7040: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
7041: LD_ADDR_VAR 0 3
7045: PUSH
7046: LD_INT 13
7048: PUSH
7049: LD_INT 14
7051: PUSH
7052: EMPTY
7053: LIST
7054: LIST
7055: ST_TO_ADDR
7056: GO 7547
7058: LD_INT 92
7060: DOUBLE
7061: EQUAL
7062: IFTRUE 7066
7064: GO 7092
7066: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
7067: LD_ADDR_VAR 0 3
7071: PUSH
7072: LD_INT 11
7074: PUSH
7075: LD_INT 12
7077: PUSH
7078: LD_INT 13
7080: PUSH
7081: LD_INT 14
7083: PUSH
7084: EMPTY
7085: LIST
7086: LIST
7087: LIST
7088: LIST
7089: ST_TO_ADDR
7090: GO 7547
7092: LD_INT 28
7094: DOUBLE
7095: EQUAL
7096: IFTRUE 7100
7098: GO 7118
7100: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
7101: LD_ADDR_VAR 0 3
7105: PUSH
7106: LD_INT 13
7108: PUSH
7109: LD_INT 14
7111: PUSH
7112: EMPTY
7113: LIST
7114: LIST
7115: ST_TO_ADDR
7116: GO 7547
7118: LD_INT 29
7120: DOUBLE
7121: EQUAL
7122: IFTRUE 7126
7124: GO 7144
7126: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
7127: LD_ADDR_VAR 0 3
7131: PUSH
7132: LD_INT 13
7134: PUSH
7135: LD_INT 14
7137: PUSH
7138: EMPTY
7139: LIST
7140: LIST
7141: ST_TO_ADDR
7142: GO 7547
7144: LD_INT 31
7146: DOUBLE
7147: EQUAL
7148: IFTRUE 7152
7150: GO 7170
7152: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
7153: LD_ADDR_VAR 0 3
7157: PUSH
7158: LD_INT 13
7160: PUSH
7161: LD_INT 14
7163: PUSH
7164: EMPTY
7165: LIST
7166: LIST
7167: ST_TO_ADDR
7168: GO 7547
7170: LD_INT 26
7172: DOUBLE
7173: EQUAL
7174: IFTRUE 7178
7176: GO 7196
7178: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
7179: LD_ADDR_VAR 0 3
7183: PUSH
7184: LD_INT 13
7186: PUSH
7187: LD_INT 14
7189: PUSH
7190: EMPTY
7191: LIST
7192: LIST
7193: ST_TO_ADDR
7194: GO 7547
7196: LD_INT 42
7198: DOUBLE
7199: EQUAL
7200: IFTRUE 7204
7202: GO 7230
7204: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
7205: LD_ADDR_VAR 0 3
7209: PUSH
7210: LD_INT 21
7212: PUSH
7213: LD_INT 22
7215: PUSH
7216: LD_INT 23
7218: PUSH
7219: LD_INT 24
7221: PUSH
7222: EMPTY
7223: LIST
7224: LIST
7225: LIST
7226: LIST
7227: ST_TO_ADDR
7228: GO 7547
7230: LD_INT 43
7232: DOUBLE
7233: EQUAL
7234: IFTRUE 7238
7236: GO 7264
7238: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
7239: LD_ADDR_VAR 0 3
7243: PUSH
7244: LD_INT 21
7246: PUSH
7247: LD_INT 22
7249: PUSH
7250: LD_INT 23
7252: PUSH
7253: LD_INT 24
7255: PUSH
7256: EMPTY
7257: LIST
7258: LIST
7259: LIST
7260: LIST
7261: ST_TO_ADDR
7262: GO 7547
7264: LD_INT 44
7266: DOUBLE
7267: EQUAL
7268: IFTRUE 7272
7270: GO 7298
7272: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
7273: LD_ADDR_VAR 0 3
7277: PUSH
7278: LD_INT 21
7280: PUSH
7281: LD_INT 22
7283: PUSH
7284: LD_INT 23
7286: PUSH
7287: LD_INT 24
7289: PUSH
7290: EMPTY
7291: LIST
7292: LIST
7293: LIST
7294: LIST
7295: ST_TO_ADDR
7296: GO 7547
7298: LD_INT 45
7300: DOUBLE
7301: EQUAL
7302: IFTRUE 7306
7304: GO 7332
7306: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
7307: LD_ADDR_VAR 0 3
7311: PUSH
7312: LD_INT 21
7314: PUSH
7315: LD_INT 22
7317: PUSH
7318: LD_INT 23
7320: PUSH
7321: LD_INT 24
7323: PUSH
7324: EMPTY
7325: LIST
7326: LIST
7327: LIST
7328: LIST
7329: ST_TO_ADDR
7330: GO 7547
7332: LD_INT 49
7334: DOUBLE
7335: EQUAL
7336: IFTRUE 7340
7338: GO 7366
7340: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
7341: LD_ADDR_VAR 0 3
7345: PUSH
7346: LD_INT 21
7348: PUSH
7349: LD_INT 22
7351: PUSH
7352: LD_INT 23
7354: PUSH
7355: LD_INT 24
7357: PUSH
7358: EMPTY
7359: LIST
7360: LIST
7361: LIST
7362: LIST
7363: ST_TO_ADDR
7364: GO 7547
7366: LD_INT 51
7368: DOUBLE
7369: EQUAL
7370: IFTRUE 7374
7372: GO 7400
7374: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
7375: LD_ADDR_VAR 0 3
7379: PUSH
7380: LD_INT 21
7382: PUSH
7383: LD_INT 22
7385: PUSH
7386: LD_INT 23
7388: PUSH
7389: LD_INT 24
7391: PUSH
7392: EMPTY
7393: LIST
7394: LIST
7395: LIST
7396: LIST
7397: ST_TO_ADDR
7398: GO 7547
7400: LD_INT 52
7402: DOUBLE
7403: EQUAL
7404: IFTRUE 7408
7406: GO 7434
7408: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
7409: LD_ADDR_VAR 0 3
7413: PUSH
7414: LD_INT 21
7416: PUSH
7417: LD_INT 22
7419: PUSH
7420: LD_INT 23
7422: PUSH
7423: LD_INT 24
7425: PUSH
7426: EMPTY
7427: LIST
7428: LIST
7429: LIST
7430: LIST
7431: ST_TO_ADDR
7432: GO 7547
7434: LD_INT 53
7436: DOUBLE
7437: EQUAL
7438: IFTRUE 7442
7440: GO 7460
7442: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
7443: LD_ADDR_VAR 0 3
7447: PUSH
7448: LD_INT 23
7450: PUSH
7451: LD_INT 24
7453: PUSH
7454: EMPTY
7455: LIST
7456: LIST
7457: ST_TO_ADDR
7458: GO 7547
7460: LD_INT 46
7462: DOUBLE
7463: EQUAL
7464: IFTRUE 7468
7466: GO 7486
7468: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
7469: LD_ADDR_VAR 0 3
7473: PUSH
7474: LD_INT 23
7476: PUSH
7477: LD_INT 24
7479: PUSH
7480: EMPTY
7481: LIST
7482: LIST
7483: ST_TO_ADDR
7484: GO 7547
7486: LD_INT 47
7488: DOUBLE
7489: EQUAL
7490: IFTRUE 7494
7492: GO 7512
7494: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
7495: LD_ADDR_VAR 0 3
7499: PUSH
7500: LD_INT 23
7502: PUSH
7503: LD_INT 24
7505: PUSH
7506: EMPTY
7507: LIST
7508: LIST
7509: ST_TO_ADDR
7510: GO 7547
7512: LD_INT 98
7514: DOUBLE
7515: EQUAL
7516: IFTRUE 7520
7518: GO 7546
7520: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
7521: LD_ADDR_VAR 0 3
7525: PUSH
7526: LD_INT 21
7528: PUSH
7529: LD_INT 22
7531: PUSH
7532: LD_INT 23
7534: PUSH
7535: LD_INT 24
7537: PUSH
7538: EMPTY
7539: LIST
7540: LIST
7541: LIST
7542: LIST
7543: ST_TO_ADDR
7544: GO 7547
7546: POP
// result := ( chassis in result ) ;
7547: LD_ADDR_VAR 0 3
7551: PUSH
7552: LD_VAR 0 1
7556: PUSH
7557: LD_VAR 0 3
7561: IN
7562: ST_TO_ADDR
// end ;
7563: LD_VAR 0 3
7567: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
7568: LD_INT 0
7570: PPUSH
7571: PPUSH
7572: PPUSH
7573: PPUSH
7574: PPUSH
7575: PPUSH
7576: PPUSH
// result := array ;
7577: LD_ADDR_VAR 0 5
7581: PUSH
7582: LD_VAR 0 1
7586: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
7587: LD_VAR 0 1
7591: NOT
7592: IFTRUE 7601
7594: PUSH
7595: LD_VAR 0 2
7599: NOT
7600: OR
7601: IFTRUE 7610
7603: PUSH
7604: LD_VAR 0 3
7608: NOT
7609: OR
7610: IFTRUE 7624
7612: PUSH
7613: LD_VAR 0 2
7617: PUSH
7618: LD_VAR 0 1
7622: GREATER
7623: OR
7624: IFTRUE 7638
7626: PUSH
7627: LD_VAR 0 3
7631: PUSH
7632: LD_VAR 0 1
7636: GREATER
7637: OR
7638: IFFALSE 7642
// exit ;
7640: GO 7938
// if direction then
7642: LD_VAR 0 4
7646: IFFALSE 7710
// begin d := 1 ;
7648: LD_ADDR_VAR 0 9
7652: PUSH
7653: LD_INT 1
7655: ST_TO_ADDR
// if i_from > i_to then
7656: LD_VAR 0 2
7660: PUSH
7661: LD_VAR 0 3
7665: GREATER
7666: IFFALSE 7692
// length := ( array - i_from ) + i_to else
7668: LD_ADDR_VAR 0 11
7672: PUSH
7673: LD_VAR 0 1
7677: PUSH
7678: LD_VAR 0 2
7682: MINUS
7683: PUSH
7684: LD_VAR 0 3
7688: PLUS
7689: ST_TO_ADDR
7690: GO 7708
// length := i_to - i_from ;
7692: LD_ADDR_VAR 0 11
7696: PUSH
7697: LD_VAR 0 3
7701: PUSH
7702: LD_VAR 0 2
7706: MINUS
7707: ST_TO_ADDR
// end else
7708: GO 7771
// begin d := - 1 ;
7710: LD_ADDR_VAR 0 9
7714: PUSH
7715: LD_INT 1
7717: NEG
7718: ST_TO_ADDR
// if i_from > i_to then
7719: LD_VAR 0 2
7723: PUSH
7724: LD_VAR 0 3
7728: GREATER
7729: IFFALSE 7749
// length := i_from - i_to else
7731: LD_ADDR_VAR 0 11
7735: PUSH
7736: LD_VAR 0 2
7740: PUSH
7741: LD_VAR 0 3
7745: MINUS
7746: ST_TO_ADDR
7747: GO 7771
// length := ( array - i_to ) + i_from ;
7749: LD_ADDR_VAR 0 11
7753: PUSH
7754: LD_VAR 0 1
7758: PUSH
7759: LD_VAR 0 3
7763: MINUS
7764: PUSH
7765: LD_VAR 0 2
7769: PLUS
7770: ST_TO_ADDR
// end ; if not length then
7771: LD_VAR 0 11
7775: NOT
7776: IFFALSE 7780
// exit ;
7778: GO 7938
// tmp := array ;
7780: LD_ADDR_VAR 0 10
7784: PUSH
7785: LD_VAR 0 1
7789: ST_TO_ADDR
// for i = 1 to length do
7790: LD_ADDR_VAR 0 6
7794: PUSH
7795: DOUBLE
7796: LD_INT 1
7798: DEC
7799: ST_TO_ADDR
7800: LD_VAR 0 11
7804: PUSH
7805: FOR_TO
7806: IFFALSE 7926
// begin for j = 1 to array do
7808: LD_ADDR_VAR 0 7
7812: PUSH
7813: DOUBLE
7814: LD_INT 1
7816: DEC
7817: ST_TO_ADDR
7818: LD_VAR 0 1
7822: PUSH
7823: FOR_TO
7824: IFFALSE 7912
// begin k := j + d ;
7826: LD_ADDR_VAR 0 8
7830: PUSH
7831: LD_VAR 0 7
7835: PUSH
7836: LD_VAR 0 9
7840: PLUS
7841: ST_TO_ADDR
// if k > array then
7842: LD_VAR 0 8
7846: PUSH
7847: LD_VAR 0 1
7851: GREATER
7852: IFFALSE 7862
// k := 1 ;
7854: LD_ADDR_VAR 0 8
7858: PUSH
7859: LD_INT 1
7861: ST_TO_ADDR
// if not k then
7862: LD_VAR 0 8
7866: NOT
7867: IFFALSE 7879
// k := array ;
7869: LD_ADDR_VAR 0 8
7873: PUSH
7874: LD_VAR 0 1
7878: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
7879: LD_ADDR_VAR 0 10
7883: PUSH
7884: LD_VAR 0 10
7888: PPUSH
7889: LD_VAR 0 8
7893: PPUSH
7894: LD_VAR 0 1
7898: PUSH
7899: LD_VAR 0 7
7903: ARRAY
7904: PPUSH
7905: CALL_OW 1
7909: ST_TO_ADDR
// end ;
7910: GO 7823
7912: POP
7913: POP
// array := tmp ;
7914: LD_ADDR_VAR 0 1
7918: PUSH
7919: LD_VAR 0 10
7923: ST_TO_ADDR
// end ;
7924: GO 7805
7926: POP
7927: POP
// result := array ;
7928: LD_ADDR_VAR 0 5
7932: PUSH
7933: LD_VAR 0 1
7937: ST_TO_ADDR
// end ;
7938: LD_VAR 0 5
7942: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
7943: LD_INT 0
7945: PPUSH
7946: PPUSH
// result := 0 ;
7947: LD_ADDR_VAR 0 3
7951: PUSH
7952: LD_INT 0
7954: ST_TO_ADDR
// if not array or not value in array then
7955: LD_VAR 0 1
7959: NOT
7960: IFTRUE 7975
7962: PUSH
7963: LD_VAR 0 2
7967: PUSH
7968: LD_VAR 0 1
7972: IN
7973: NOT
7974: OR
7975: IFFALSE 7979
// exit ;
7977: GO 8033
// for i = 1 to array do
7979: LD_ADDR_VAR 0 4
7983: PUSH
7984: DOUBLE
7985: LD_INT 1
7987: DEC
7988: ST_TO_ADDR
7989: LD_VAR 0 1
7993: PUSH
7994: FOR_TO
7995: IFFALSE 8031
// if value = array [ i ] then
7997: LD_VAR 0 2
8001: PUSH
8002: LD_VAR 0 1
8006: PUSH
8007: LD_VAR 0 4
8011: ARRAY
8012: EQUAL
8013: IFFALSE 8029
// begin result := i ;
8015: LD_ADDR_VAR 0 3
8019: PUSH
8020: LD_VAR 0 4
8024: ST_TO_ADDR
// exit ;
8025: POP
8026: POP
8027: GO 8033
// end ;
8029: GO 7994
8031: POP
8032: POP
// end ;
8033: LD_VAR 0 3
8037: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
8038: LD_INT 0
8040: PPUSH
// vc_chassis := chassis ;
8041: LD_ADDR_OWVAR 37
8045: PUSH
8046: LD_VAR 0 1
8050: ST_TO_ADDR
// vc_engine := engine ;
8051: LD_ADDR_OWVAR 39
8055: PUSH
8056: LD_VAR 0 2
8060: ST_TO_ADDR
// vc_control := control ;
8061: LD_ADDR_OWVAR 38
8065: PUSH
8066: LD_VAR 0 3
8070: ST_TO_ADDR
// vc_weapon := weapon ;
8071: LD_ADDR_OWVAR 40
8075: PUSH
8076: LD_VAR 0 4
8080: ST_TO_ADDR
// vc_fuel_battery := fuel ;
8081: LD_ADDR_OWVAR 41
8085: PUSH
8086: LD_VAR 0 5
8090: ST_TO_ADDR
// end ;
8091: LD_VAR 0 6
8095: RET
// export function WantPlant ( unit ) ; var task ; begin
8096: LD_INT 0
8098: PPUSH
8099: PPUSH
// result := false ;
8100: LD_ADDR_VAR 0 2
8104: PUSH
8105: LD_INT 0
8107: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
8108: LD_ADDR_VAR 0 3
8112: PUSH
8113: LD_VAR 0 1
8117: PPUSH
8118: CALL_OW 437
8122: ST_TO_ADDR
// if task then
8123: LD_VAR 0 3
8127: IFFALSE 8155
// if task [ 1 ] [ 1 ] = p then
8129: LD_VAR 0 3
8133: PUSH
8134: LD_INT 1
8136: ARRAY
8137: PUSH
8138: LD_INT 1
8140: ARRAY
8141: PUSH
8142: LD_STRING p
8144: EQUAL
8145: IFFALSE 8155
// result := true ;
8147: LD_ADDR_VAR 0 2
8151: PUSH
8152: LD_INT 1
8154: ST_TO_ADDR
// end ;
8155: LD_VAR 0 2
8159: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
8160: LD_INT 0
8162: PPUSH
8163: PPUSH
8164: PPUSH
8165: PPUSH
// if pos < 1 then
8166: LD_VAR 0 2
8170: PUSH
8171: LD_INT 1
8173: LESS
8174: IFFALSE 8178
// exit ;
8176: GO 8481
// if pos = 1 then
8178: LD_VAR 0 2
8182: PUSH
8183: LD_INT 1
8185: EQUAL
8186: IFFALSE 8219
// result := Replace ( arr , pos [ 1 ] , value ) else
8188: LD_ADDR_VAR 0 4
8192: PUSH
8193: LD_VAR 0 1
8197: PPUSH
8198: LD_VAR 0 2
8202: PUSH
8203: LD_INT 1
8205: ARRAY
8206: PPUSH
8207: LD_VAR 0 3
8211: PPUSH
8212: CALL_OW 1
8216: ST_TO_ADDR
8217: GO 8481
// begin tmp := arr ;
8219: LD_ADDR_VAR 0 6
8223: PUSH
8224: LD_VAR 0 1
8228: ST_TO_ADDR
// s_arr := [ tmp ] ;
8229: LD_ADDR_VAR 0 7
8233: PUSH
8234: LD_VAR 0 6
8238: PUSH
8239: EMPTY
8240: LIST
8241: ST_TO_ADDR
// for i = 1 to pos - 1 do
8242: LD_ADDR_VAR 0 5
8246: PUSH
8247: DOUBLE
8248: LD_INT 1
8250: DEC
8251: ST_TO_ADDR
8252: LD_VAR 0 2
8256: PUSH
8257: LD_INT 1
8259: MINUS
8260: PUSH
8261: FOR_TO
8262: IFFALSE 8307
// begin tmp := tmp [ pos [ i ] ] ;
8264: LD_ADDR_VAR 0 6
8268: PUSH
8269: LD_VAR 0 6
8273: PUSH
8274: LD_VAR 0 2
8278: PUSH
8279: LD_VAR 0 5
8283: ARRAY
8284: ARRAY
8285: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
8286: LD_ADDR_VAR 0 7
8290: PUSH
8291: LD_VAR 0 7
8295: PUSH
8296: LD_VAR 0 6
8300: PUSH
8301: EMPTY
8302: LIST
8303: ADD
8304: ST_TO_ADDR
// end ;
8305: GO 8261
8307: POP
8308: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
8309: LD_ADDR_VAR 0 6
8313: PUSH
8314: LD_VAR 0 6
8318: PPUSH
8319: LD_VAR 0 2
8323: PUSH
8324: LD_VAR 0 2
8328: ARRAY
8329: PPUSH
8330: LD_VAR 0 3
8334: PPUSH
8335: CALL_OW 1
8339: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
8340: LD_ADDR_VAR 0 7
8344: PUSH
8345: LD_VAR 0 7
8349: PPUSH
8350: LD_VAR 0 7
8354: PPUSH
8355: LD_VAR 0 6
8359: PPUSH
8360: CALL_OW 1
8364: ST_TO_ADDR
// for i = s_arr downto 2 do
8365: LD_ADDR_VAR 0 5
8369: PUSH
8370: DOUBLE
8371: LD_VAR 0 7
8375: INC
8376: ST_TO_ADDR
8377: LD_INT 2
8379: PUSH
8380: FOR_DOWNTO
8381: IFFALSE 8465
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
8383: LD_ADDR_VAR 0 6
8387: PUSH
8388: LD_VAR 0 7
8392: PUSH
8393: LD_VAR 0 5
8397: PUSH
8398: LD_INT 1
8400: MINUS
8401: ARRAY
8402: PPUSH
8403: LD_VAR 0 2
8407: PUSH
8408: LD_VAR 0 5
8412: PUSH
8413: LD_INT 1
8415: MINUS
8416: ARRAY
8417: PPUSH
8418: LD_VAR 0 7
8422: PUSH
8423: LD_VAR 0 5
8427: ARRAY
8428: PPUSH
8429: CALL_OW 1
8433: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
8434: LD_ADDR_VAR 0 7
8438: PUSH
8439: LD_VAR 0 7
8443: PPUSH
8444: LD_VAR 0 5
8448: PUSH
8449: LD_INT 1
8451: MINUS
8452: PPUSH
8453: LD_VAR 0 6
8457: PPUSH
8458: CALL_OW 1
8462: ST_TO_ADDR
// end ;
8463: GO 8380
8465: POP
8466: POP
// result := s_arr [ 1 ] ;
8467: LD_ADDR_VAR 0 4
8471: PUSH
8472: LD_VAR 0 7
8476: PUSH
8477: LD_INT 1
8479: ARRAY
8480: ST_TO_ADDR
// end ; end ;
8481: LD_VAR 0 4
8485: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
8486: LD_INT 0
8488: PPUSH
8489: PPUSH
// if not list then
8490: LD_VAR 0 1
8494: NOT
8495: IFFALSE 8499
// exit ;
8497: GO 8590
// i := list [ pos1 ] ;
8499: LD_ADDR_VAR 0 5
8503: PUSH
8504: LD_VAR 0 1
8508: PUSH
8509: LD_VAR 0 2
8513: ARRAY
8514: ST_TO_ADDR
// if not i then
8515: LD_VAR 0 5
8519: NOT
8520: IFFALSE 8524
// exit ;
8522: GO 8590
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
8524: LD_ADDR_VAR 0 1
8528: PUSH
8529: LD_VAR 0 1
8533: PPUSH
8534: LD_VAR 0 2
8538: PPUSH
8539: LD_VAR 0 1
8543: PUSH
8544: LD_VAR 0 3
8548: ARRAY
8549: PPUSH
8550: CALL_OW 1
8554: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
8555: LD_ADDR_VAR 0 1
8559: PUSH
8560: LD_VAR 0 1
8564: PPUSH
8565: LD_VAR 0 3
8569: PPUSH
8570: LD_VAR 0 5
8574: PPUSH
8575: CALL_OW 1
8579: ST_TO_ADDR
// result := list ;
8580: LD_ADDR_VAR 0 4
8584: PUSH
8585: LD_VAR 0 1
8589: ST_TO_ADDR
// end ;
8590: LD_VAR 0 4
8594: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
8595: LD_INT 0
8597: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
8598: LD_ADDR_VAR 0 5
8602: PUSH
8603: LD_VAR 0 1
8607: PPUSH
8608: CALL_OW 250
8612: PPUSH
8613: LD_VAR 0 1
8617: PPUSH
8618: CALL_OW 251
8622: PPUSH
8623: LD_VAR 0 2
8627: PPUSH
8628: LD_VAR 0 3
8632: PPUSH
8633: LD_VAR 0 4
8637: PPUSH
8638: CALL 9020 0 5
8642: ST_TO_ADDR
// end ;
8643: LD_VAR 0 5
8647: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
8648: LD_INT 0
8650: PPUSH
8651: PPUSH
8652: PPUSH
8653: PPUSH
// if not list or not unit then
8654: LD_VAR 0 2
8658: NOT
8659: IFTRUE 8668
8661: PUSH
8662: LD_VAR 0 1
8666: NOT
8667: OR
8668: IFFALSE 8672
// exit ;
8670: GO 9015
// result := [ ] ;
8672: LD_ADDR_VAR 0 5
8676: PUSH
8677: EMPTY
8678: ST_TO_ADDR
// for i in list do
8679: LD_ADDR_VAR 0 6
8683: PUSH
8684: LD_VAR 0 2
8688: PUSH
8689: FOR_IN
8690: IFFALSE 8908
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
8692: LD_ADDR_VAR 0 8
8696: PUSH
8697: LD_VAR 0 1
8701: PPUSH
8702: LD_VAR 0 6
8706: PUSH
8707: LD_INT 1
8709: ARRAY
8710: PPUSH
8711: LD_VAR 0 6
8715: PUSH
8716: LD_INT 2
8718: ARRAY
8719: PPUSH
8720: CALL_OW 297
8724: ST_TO_ADDR
// if not Count ( result ) then
8725: LD_VAR 0 5
8729: PPUSH
8730: CALL 5242 0 1
8734: NOT
8735: IFFALSE 8768
// begin result := Join ( result , [ i , tmp ] ) ;
8737: LD_ADDR_VAR 0 5
8741: PUSH
8742: LD_VAR 0 5
8746: PPUSH
8747: LD_VAR 0 6
8751: PUSH
8752: LD_VAR 0 8
8756: PUSH
8757: EMPTY
8758: LIST
8759: LIST
8760: PPUSH
8761: CALL 41218 0 2
8765: ST_TO_ADDR
// continue ;
8766: GO 8689
// end ; if result [ result ] [ 2 ] <= tmp then
8768: LD_VAR 0 5
8772: PUSH
8773: LD_VAR 0 5
8777: ARRAY
8778: PUSH
8779: LD_INT 2
8781: ARRAY
8782: PUSH
8783: LD_VAR 0 8
8787: LESSEQUAL
8788: IFFALSE 8821
// result := Join ( result , [ i , tmp ] ) else
8790: LD_ADDR_VAR 0 5
8794: PUSH
8795: LD_VAR 0 5
8799: PPUSH
8800: LD_VAR 0 6
8804: PUSH
8805: LD_VAR 0 8
8809: PUSH
8810: EMPTY
8811: LIST
8812: LIST
8813: PPUSH
8814: CALL 41218 0 2
8818: ST_TO_ADDR
8819: GO 8906
// begin for j := 1 to Count ( result ) do
8821: LD_ADDR_VAR 0 7
8825: PUSH
8826: DOUBLE
8827: LD_INT 1
8829: DEC
8830: ST_TO_ADDR
8831: LD_VAR 0 5
8835: PPUSH
8836: CALL 5242 0 1
8840: PUSH
8841: FOR_TO
8842: IFFALSE 8904
// begin if tmp < result [ j ] [ 2 ] then
8844: LD_VAR 0 8
8848: PUSH
8849: LD_VAR 0 5
8853: PUSH
8854: LD_VAR 0 7
8858: ARRAY
8859: PUSH
8860: LD_INT 2
8862: ARRAY
8863: LESS
8864: IFFALSE 8902
// begin result := Insert ( result , j , [ i , tmp ] ) ;
8866: LD_ADDR_VAR 0 5
8870: PUSH
8871: LD_VAR 0 5
8875: PPUSH
8876: LD_VAR 0 7
8880: PPUSH
8881: LD_VAR 0 6
8885: PUSH
8886: LD_VAR 0 8
8890: PUSH
8891: EMPTY
8892: LIST
8893: LIST
8894: PPUSH
8895: CALL_OW 2
8899: ST_TO_ADDR
// break ;
8900: GO 8904
// end ; end ;
8902: GO 8841
8904: POP
8905: POP
// end ; end ;
8906: GO 8689
8908: POP
8909: POP
// if result and not asc then
8910: LD_VAR 0 5
8914: IFFALSE 8923
8916: PUSH
8917: LD_VAR 0 3
8921: NOT
8922: AND
8923: IFFALSE 8940
// result := ReverseArray ( result ) ;
8925: LD_ADDR_VAR 0 5
8929: PUSH
8930: LD_VAR 0 5
8934: PPUSH
8935: CALL 36298 0 1
8939: ST_TO_ADDR
// tmp := [ ] ;
8940: LD_ADDR_VAR 0 8
8944: PUSH
8945: EMPTY
8946: ST_TO_ADDR
// if mode then
8947: LD_VAR 0 4
8951: IFFALSE 9015
// begin for i := 1 to result do
8953: LD_ADDR_VAR 0 6
8957: PUSH
8958: DOUBLE
8959: LD_INT 1
8961: DEC
8962: ST_TO_ADDR
8963: LD_VAR 0 5
8967: PUSH
8968: FOR_TO
8969: IFFALSE 9003
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
8971: LD_ADDR_VAR 0 8
8975: PUSH
8976: LD_VAR 0 8
8980: PPUSH
8981: LD_VAR 0 5
8985: PUSH
8986: LD_VAR 0 6
8990: ARRAY
8991: PUSH
8992: LD_INT 1
8994: ARRAY
8995: PPUSH
8996: CALL 41218 0 2
9000: ST_TO_ADDR
9001: GO 8968
9003: POP
9004: POP
// result := tmp ;
9005: LD_ADDR_VAR 0 5
9009: PUSH
9010: LD_VAR 0 8
9014: ST_TO_ADDR
// end ; end ;
9015: LD_VAR 0 5
9019: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
9020: LD_INT 0
9022: PPUSH
9023: PPUSH
9024: PPUSH
9025: PPUSH
// if not list then
9026: LD_VAR 0 3
9030: NOT
9031: IFFALSE 9035
// exit ;
9033: GO 9425
// result := [ ] ;
9035: LD_ADDR_VAR 0 6
9039: PUSH
9040: EMPTY
9041: ST_TO_ADDR
// for i in list do
9042: LD_ADDR_VAR 0 7
9046: PUSH
9047: LD_VAR 0 3
9051: PUSH
9052: FOR_IN
9053: IFFALSE 9255
// begin tmp := GetDistUnitXY ( i , x , y ) ;
9055: LD_ADDR_VAR 0 9
9059: PUSH
9060: LD_VAR 0 7
9064: PPUSH
9065: LD_VAR 0 1
9069: PPUSH
9070: LD_VAR 0 2
9074: PPUSH
9075: CALL_OW 297
9079: ST_TO_ADDR
// if not result then
9080: LD_VAR 0 6
9084: NOT
9085: IFFALSE 9111
// result := [ [ i , tmp ] ] else
9087: LD_ADDR_VAR 0 6
9091: PUSH
9092: LD_VAR 0 7
9096: PUSH
9097: LD_VAR 0 9
9101: PUSH
9102: EMPTY
9103: LIST
9104: LIST
9105: PUSH
9106: EMPTY
9107: LIST
9108: ST_TO_ADDR
9109: GO 9253
// begin if result [ result ] [ 2 ] <= tmp then
9111: LD_VAR 0 6
9115: PUSH
9116: LD_VAR 0 6
9120: ARRAY
9121: PUSH
9122: LD_INT 2
9124: ARRAY
9125: PUSH
9126: LD_VAR 0 9
9130: LESSEQUAL
9131: IFFALSE 9173
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
9133: LD_ADDR_VAR 0 6
9137: PUSH
9138: LD_VAR 0 6
9142: PPUSH
9143: LD_VAR 0 6
9147: PUSH
9148: LD_INT 1
9150: PLUS
9151: PPUSH
9152: LD_VAR 0 7
9156: PUSH
9157: LD_VAR 0 9
9161: PUSH
9162: EMPTY
9163: LIST
9164: LIST
9165: PPUSH
9166: CALL_OW 2
9170: ST_TO_ADDR
9171: GO 9253
// for j := 1 to result do
9173: LD_ADDR_VAR 0 8
9177: PUSH
9178: DOUBLE
9179: LD_INT 1
9181: DEC
9182: ST_TO_ADDR
9183: LD_VAR 0 6
9187: PUSH
9188: FOR_TO
9189: IFFALSE 9251
// begin if tmp < result [ j ] [ 2 ] then
9191: LD_VAR 0 9
9195: PUSH
9196: LD_VAR 0 6
9200: PUSH
9201: LD_VAR 0 8
9205: ARRAY
9206: PUSH
9207: LD_INT 2
9209: ARRAY
9210: LESS
9211: IFFALSE 9249
// begin result := Insert ( result , j , [ i , tmp ] ) ;
9213: LD_ADDR_VAR 0 6
9217: PUSH
9218: LD_VAR 0 6
9222: PPUSH
9223: LD_VAR 0 8
9227: PPUSH
9228: LD_VAR 0 7
9232: PUSH
9233: LD_VAR 0 9
9237: PUSH
9238: EMPTY
9239: LIST
9240: LIST
9241: PPUSH
9242: CALL_OW 2
9246: ST_TO_ADDR
// break ;
9247: GO 9251
// end ; end ;
9249: GO 9188
9251: POP
9252: POP
// end ; end ;
9253: GO 9052
9255: POP
9256: POP
// if result and not asc then
9257: LD_VAR 0 6
9261: IFFALSE 9270
9263: PUSH
9264: LD_VAR 0 4
9268: NOT
9269: AND
9270: IFFALSE 9345
// begin tmp := result ;
9272: LD_ADDR_VAR 0 9
9276: PUSH
9277: LD_VAR 0 6
9281: ST_TO_ADDR
// for i = tmp downto 1 do
9282: LD_ADDR_VAR 0 7
9286: PUSH
9287: DOUBLE
9288: LD_VAR 0 9
9292: INC
9293: ST_TO_ADDR
9294: LD_INT 1
9296: PUSH
9297: FOR_DOWNTO
9298: IFFALSE 9343
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
9300: LD_ADDR_VAR 0 6
9304: PUSH
9305: LD_VAR 0 6
9309: PPUSH
9310: LD_VAR 0 9
9314: PUSH
9315: LD_VAR 0 7
9319: MINUS
9320: PUSH
9321: LD_INT 1
9323: PLUS
9324: PPUSH
9325: LD_VAR 0 9
9329: PUSH
9330: LD_VAR 0 7
9334: ARRAY
9335: PPUSH
9336: CALL_OW 1
9340: ST_TO_ADDR
9341: GO 9297
9343: POP
9344: POP
// end ; tmp := [ ] ;
9345: LD_ADDR_VAR 0 9
9349: PUSH
9350: EMPTY
9351: ST_TO_ADDR
// if mode then
9352: LD_VAR 0 5
9356: IFFALSE 9425
// begin for i = 1 to result do
9358: LD_ADDR_VAR 0 7
9362: PUSH
9363: DOUBLE
9364: LD_INT 1
9366: DEC
9367: ST_TO_ADDR
9368: LD_VAR 0 6
9372: PUSH
9373: FOR_TO
9374: IFFALSE 9413
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
9376: LD_ADDR_VAR 0 9
9380: PUSH
9381: LD_VAR 0 9
9385: PPUSH
9386: LD_VAR 0 7
9390: PPUSH
9391: LD_VAR 0 6
9395: PUSH
9396: LD_VAR 0 7
9400: ARRAY
9401: PUSH
9402: LD_INT 1
9404: ARRAY
9405: PPUSH
9406: CALL_OW 1
9410: ST_TO_ADDR
9411: GO 9373
9413: POP
9414: POP
// result := tmp ;
9415: LD_ADDR_VAR 0 6
9419: PUSH
9420: LD_VAR 0 9
9424: ST_TO_ADDR
// end ; end ;
9425: LD_VAR 0 6
9429: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
9430: LD_INT 0
9432: PPUSH
9433: PPUSH
9434: PPUSH
9435: PPUSH
9436: PPUSH
9437: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
9438: LD_ADDR_VAR 0 5
9442: PUSH
9443: LD_INT 0
9445: PUSH
9446: LD_INT 0
9448: PUSH
9449: LD_INT 0
9451: PUSH
9452: EMPTY
9453: PUSH
9454: EMPTY
9455: LIST
9456: LIST
9457: LIST
9458: LIST
9459: ST_TO_ADDR
// if not x or not y then
9460: LD_VAR 0 2
9464: NOT
9465: IFTRUE 9474
9467: PUSH
9468: LD_VAR 0 3
9472: NOT
9473: OR
9474: IFFALSE 9478
// exit ;
9476: GO 11134
// if not range then
9478: LD_VAR 0 4
9482: NOT
9483: IFFALSE 9493
// range := 10 ;
9485: LD_ADDR_VAR 0 4
9489: PUSH
9490: LD_INT 10
9492: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9493: LD_ADDR_VAR 0 8
9497: PUSH
9498: LD_INT 81
9500: PUSH
9501: LD_VAR 0 1
9505: PUSH
9506: EMPTY
9507: LIST
9508: LIST
9509: PUSH
9510: LD_INT 92
9512: PUSH
9513: LD_VAR 0 2
9517: PUSH
9518: LD_VAR 0 3
9522: PUSH
9523: LD_VAR 0 4
9527: PUSH
9528: EMPTY
9529: LIST
9530: LIST
9531: LIST
9532: LIST
9533: PUSH
9534: LD_INT 3
9536: PUSH
9537: LD_INT 21
9539: PUSH
9540: LD_INT 3
9542: PUSH
9543: EMPTY
9544: LIST
9545: LIST
9546: PUSH
9547: EMPTY
9548: LIST
9549: LIST
9550: PUSH
9551: EMPTY
9552: LIST
9553: LIST
9554: LIST
9555: PPUSH
9556: CALL_OW 69
9560: ST_TO_ADDR
// if not tmp then
9561: LD_VAR 0 8
9565: NOT
9566: IFFALSE 9570
// exit ;
9568: GO 11134
// for i in tmp do
9570: LD_ADDR_VAR 0 6
9574: PUSH
9575: LD_VAR 0 8
9579: PUSH
9580: FOR_IN
9581: IFFALSE 11109
// begin points := [ 0 , 0 , 0 ] ;
9583: LD_ADDR_VAR 0 9
9587: PUSH
9588: LD_INT 0
9590: PUSH
9591: LD_INT 0
9593: PUSH
9594: LD_INT 0
9596: PUSH
9597: EMPTY
9598: LIST
9599: LIST
9600: LIST
9601: ST_TO_ADDR
// bpoints := 1 ;
9602: LD_ADDR_VAR 0 10
9606: PUSH
9607: LD_INT 1
9609: ST_TO_ADDR
// case GetType ( i ) of unit_human :
9610: LD_VAR 0 6
9614: PPUSH
9615: CALL_OW 247
9619: PUSH
9620: LD_INT 1
9622: DOUBLE
9623: EQUAL
9624: IFTRUE 9628
9626: GO 10210
9628: POP
// begin if GetClass ( i ) = 1 then
9629: LD_VAR 0 6
9633: PPUSH
9634: CALL_OW 257
9638: PUSH
9639: LD_INT 1
9641: EQUAL
9642: IFFALSE 9663
// points := [ 10 , 5 , 3 ] ;
9644: LD_ADDR_VAR 0 9
9648: PUSH
9649: LD_INT 10
9651: PUSH
9652: LD_INT 5
9654: PUSH
9655: LD_INT 3
9657: PUSH
9658: EMPTY
9659: LIST
9660: LIST
9661: LIST
9662: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
9663: LD_VAR 0 6
9667: PPUSH
9668: CALL_OW 257
9672: PUSH
9673: LD_INT 2
9675: PUSH
9676: LD_INT 3
9678: PUSH
9679: LD_INT 4
9681: PUSH
9682: EMPTY
9683: LIST
9684: LIST
9685: LIST
9686: IN
9687: IFFALSE 9708
// points := [ 3 , 2 , 1 ] ;
9689: LD_ADDR_VAR 0 9
9693: PUSH
9694: LD_INT 3
9696: PUSH
9697: LD_INT 2
9699: PUSH
9700: LD_INT 1
9702: PUSH
9703: EMPTY
9704: LIST
9705: LIST
9706: LIST
9707: ST_TO_ADDR
// if GetClass ( i ) = 5 then
9708: LD_VAR 0 6
9712: PPUSH
9713: CALL_OW 257
9717: PUSH
9718: LD_INT 5
9720: EQUAL
9721: IFFALSE 9742
// points := [ 130 , 5 , 2 ] ;
9723: LD_ADDR_VAR 0 9
9727: PUSH
9728: LD_INT 130
9730: PUSH
9731: LD_INT 5
9733: PUSH
9734: LD_INT 2
9736: PUSH
9737: EMPTY
9738: LIST
9739: LIST
9740: LIST
9741: ST_TO_ADDR
// if GetClass ( i ) = 8 then
9742: LD_VAR 0 6
9746: PPUSH
9747: CALL_OW 257
9751: PUSH
9752: LD_INT 8
9754: EQUAL
9755: IFFALSE 9776
// points := [ 35 , 35 , 30 ] ;
9757: LD_ADDR_VAR 0 9
9761: PUSH
9762: LD_INT 35
9764: PUSH
9765: LD_INT 35
9767: PUSH
9768: LD_INT 30
9770: PUSH
9771: EMPTY
9772: LIST
9773: LIST
9774: LIST
9775: ST_TO_ADDR
// if GetClass ( i ) = 9 then
9776: LD_VAR 0 6
9780: PPUSH
9781: CALL_OW 257
9785: PUSH
9786: LD_INT 9
9788: EQUAL
9789: IFFALSE 9810
// points := [ 20 , 55 , 40 ] ;
9791: LD_ADDR_VAR 0 9
9795: PUSH
9796: LD_INT 20
9798: PUSH
9799: LD_INT 55
9801: PUSH
9802: LD_INT 40
9804: PUSH
9805: EMPTY
9806: LIST
9807: LIST
9808: LIST
9809: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
9810: LD_VAR 0 6
9814: PPUSH
9815: CALL_OW 257
9819: PUSH
9820: LD_INT 12
9822: PUSH
9823: LD_INT 16
9825: PUSH
9826: EMPTY
9827: LIST
9828: LIST
9829: IN
9830: IFFALSE 9851
// points := [ 5 , 3 , 2 ] ;
9832: LD_ADDR_VAR 0 9
9836: PUSH
9837: LD_INT 5
9839: PUSH
9840: LD_INT 3
9842: PUSH
9843: LD_INT 2
9845: PUSH
9846: EMPTY
9847: LIST
9848: LIST
9849: LIST
9850: ST_TO_ADDR
// if GetClass ( i ) = 17 then
9851: LD_VAR 0 6
9855: PPUSH
9856: CALL_OW 257
9860: PUSH
9861: LD_INT 17
9863: EQUAL
9864: IFFALSE 9885
// points := [ 100 , 50 , 75 ] ;
9866: LD_ADDR_VAR 0 9
9870: PUSH
9871: LD_INT 100
9873: PUSH
9874: LD_INT 50
9876: PUSH
9877: LD_INT 75
9879: PUSH
9880: EMPTY
9881: LIST
9882: LIST
9883: LIST
9884: ST_TO_ADDR
// if GetClass ( i ) = 15 then
9885: LD_VAR 0 6
9889: PPUSH
9890: CALL_OW 257
9894: PUSH
9895: LD_INT 15
9897: EQUAL
9898: IFFALSE 9919
// points := [ 10 , 5 , 3 ] ;
9900: LD_ADDR_VAR 0 9
9904: PUSH
9905: LD_INT 10
9907: PUSH
9908: LD_INT 5
9910: PUSH
9911: LD_INT 3
9913: PUSH
9914: EMPTY
9915: LIST
9916: LIST
9917: LIST
9918: ST_TO_ADDR
// if GetClass ( i ) = 14 then
9919: LD_VAR 0 6
9923: PPUSH
9924: CALL_OW 257
9928: PUSH
9929: LD_INT 14
9931: EQUAL
9932: IFFALSE 9953
// points := [ 10 , 0 , 0 ] ;
9934: LD_ADDR_VAR 0 9
9938: PUSH
9939: LD_INT 10
9941: PUSH
9942: LD_INT 0
9944: PUSH
9945: LD_INT 0
9947: PUSH
9948: EMPTY
9949: LIST
9950: LIST
9951: LIST
9952: ST_TO_ADDR
// if GetClass ( i ) = 11 then
9953: LD_VAR 0 6
9957: PPUSH
9958: CALL_OW 257
9962: PUSH
9963: LD_INT 11
9965: EQUAL
9966: IFFALSE 9987
// points := [ 30 , 10 , 5 ] ;
9968: LD_ADDR_VAR 0 9
9972: PUSH
9973: LD_INT 30
9975: PUSH
9976: LD_INT 10
9978: PUSH
9979: LD_INT 5
9981: PUSH
9982: EMPTY
9983: LIST
9984: LIST
9985: LIST
9986: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
9987: LD_VAR 0 1
9991: PPUSH
9992: LD_INT 5
9994: PPUSH
9995: CALL_OW 321
9999: PUSH
10000: LD_INT 2
10002: EQUAL
10003: IFFALSE 10020
// bpoints := bpoints * 1.8 ;
10005: LD_ADDR_VAR 0 10
10009: PUSH
10010: LD_VAR 0 10
10014: PUSH
10015: LD_REAL  1.80000000000000E+0000
10018: MUL
10019: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
10020: LD_VAR 0 6
10024: PPUSH
10025: CALL_OW 257
10029: PUSH
10030: LD_INT 1
10032: PUSH
10033: LD_INT 2
10035: PUSH
10036: LD_INT 3
10038: PUSH
10039: LD_INT 4
10041: PUSH
10042: EMPTY
10043: LIST
10044: LIST
10045: LIST
10046: LIST
10047: IN
10048: IFFALSE 10068
10050: PUSH
10051: LD_VAR 0 1
10055: PPUSH
10056: LD_INT 51
10058: PPUSH
10059: CALL_OW 321
10063: PUSH
10064: LD_INT 2
10066: EQUAL
10067: AND
10068: IFFALSE 10085
// bpoints := bpoints * 1.2 ;
10070: LD_ADDR_VAR 0 10
10074: PUSH
10075: LD_VAR 0 10
10079: PUSH
10080: LD_REAL  1.20000000000000E+0000
10083: MUL
10084: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
10085: LD_VAR 0 6
10089: PPUSH
10090: CALL_OW 257
10094: PUSH
10095: LD_INT 5
10097: PUSH
10098: LD_INT 7
10100: PUSH
10101: LD_INT 9
10103: PUSH
10104: EMPTY
10105: LIST
10106: LIST
10107: LIST
10108: IN
10109: IFFALSE 10129
10111: PUSH
10112: LD_VAR 0 1
10116: PPUSH
10117: LD_INT 52
10119: PPUSH
10120: CALL_OW 321
10124: PUSH
10125: LD_INT 2
10127: EQUAL
10128: AND
10129: IFFALSE 10146
// bpoints := bpoints * 1.5 ;
10131: LD_ADDR_VAR 0 10
10135: PUSH
10136: LD_VAR 0 10
10140: PUSH
10141: LD_REAL  1.50000000000000E+0000
10144: MUL
10145: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
10146: LD_VAR 0 1
10150: PPUSH
10151: LD_INT 66
10153: PPUSH
10154: CALL_OW 321
10158: PUSH
10159: LD_INT 2
10161: EQUAL
10162: IFFALSE 10179
// bpoints := bpoints * 1.1 ;
10164: LD_ADDR_VAR 0 10
10168: PUSH
10169: LD_VAR 0 10
10173: PUSH
10174: LD_REAL  1.10000000000000E+0000
10177: MUL
10178: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
10179: LD_ADDR_VAR 0 10
10183: PUSH
10184: LD_VAR 0 10
10188: PUSH
10189: LD_VAR 0 6
10193: PPUSH
10194: LD_INT 1
10196: PPUSH
10197: CALL_OW 259
10201: PUSH
10202: LD_REAL  1.15000000000000E+0000
10205: MUL
10206: MUL
10207: ST_TO_ADDR
// end ; unit_vehicle :
10208: GO 11038
10210: LD_INT 2
10212: DOUBLE
10213: EQUAL
10214: IFTRUE 10218
10216: GO 11026
10218: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
10219: LD_VAR 0 6
10223: PPUSH
10224: CALL_OW 264
10228: PUSH
10229: LD_INT 2
10231: PUSH
10232: LD_INT 42
10234: PUSH
10235: LD_INT 24
10237: PUSH
10238: EMPTY
10239: LIST
10240: LIST
10241: LIST
10242: IN
10243: IFFALSE 10264
// points := [ 25 , 5 , 3 ] ;
10245: LD_ADDR_VAR 0 9
10249: PUSH
10250: LD_INT 25
10252: PUSH
10253: LD_INT 5
10255: PUSH
10256: LD_INT 3
10258: PUSH
10259: EMPTY
10260: LIST
10261: LIST
10262: LIST
10263: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
10264: LD_VAR 0 6
10268: PPUSH
10269: CALL_OW 264
10273: PUSH
10274: LD_INT 4
10276: PUSH
10277: LD_INT 43
10279: PUSH
10280: LD_INT 25
10282: PUSH
10283: EMPTY
10284: LIST
10285: LIST
10286: LIST
10287: IN
10288: IFFALSE 10309
// points := [ 40 , 15 , 5 ] ;
10290: LD_ADDR_VAR 0 9
10294: PUSH
10295: LD_INT 40
10297: PUSH
10298: LD_INT 15
10300: PUSH
10301: LD_INT 5
10303: PUSH
10304: EMPTY
10305: LIST
10306: LIST
10307: LIST
10308: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
10309: LD_VAR 0 6
10313: PPUSH
10314: CALL_OW 264
10318: PUSH
10319: LD_INT 3
10321: PUSH
10322: LD_INT 23
10324: PUSH
10325: EMPTY
10326: LIST
10327: LIST
10328: IN
10329: IFFALSE 10350
// points := [ 7 , 25 , 8 ] ;
10331: LD_ADDR_VAR 0 9
10335: PUSH
10336: LD_INT 7
10338: PUSH
10339: LD_INT 25
10341: PUSH
10342: LD_INT 8
10344: PUSH
10345: EMPTY
10346: LIST
10347: LIST
10348: LIST
10349: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
10350: LD_VAR 0 6
10354: PPUSH
10355: CALL_OW 264
10359: PUSH
10360: LD_INT 5
10362: PUSH
10363: LD_INT 27
10365: PUSH
10366: LD_INT 44
10368: PUSH
10369: EMPTY
10370: LIST
10371: LIST
10372: LIST
10373: IN
10374: IFFALSE 10395
// points := [ 14 , 50 , 16 ] ;
10376: LD_ADDR_VAR 0 9
10380: PUSH
10381: LD_INT 14
10383: PUSH
10384: LD_INT 50
10386: PUSH
10387: LD_INT 16
10389: PUSH
10390: EMPTY
10391: LIST
10392: LIST
10393: LIST
10394: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
10395: LD_VAR 0 6
10399: PPUSH
10400: CALL_OW 264
10404: PUSH
10405: LD_INT 6
10407: PUSH
10408: LD_INT 46
10410: PUSH
10411: EMPTY
10412: LIST
10413: LIST
10414: IN
10415: IFFALSE 10436
// points := [ 32 , 120 , 70 ] ;
10417: LD_ADDR_VAR 0 9
10421: PUSH
10422: LD_INT 32
10424: PUSH
10425: LD_INT 120
10427: PUSH
10428: LD_INT 70
10430: PUSH
10431: EMPTY
10432: LIST
10433: LIST
10434: LIST
10435: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
10436: LD_VAR 0 6
10440: PPUSH
10441: CALL_OW 264
10445: PUSH
10446: LD_INT 7
10448: PUSH
10449: LD_INT 28
10451: PUSH
10452: LD_INT 45
10454: PUSH
10455: LD_INT 92
10457: PUSH
10458: EMPTY
10459: LIST
10460: LIST
10461: LIST
10462: LIST
10463: IN
10464: IFFALSE 10485
// points := [ 35 , 20 , 45 ] ;
10466: LD_ADDR_VAR 0 9
10470: PUSH
10471: LD_INT 35
10473: PUSH
10474: LD_INT 20
10476: PUSH
10477: LD_INT 45
10479: PUSH
10480: EMPTY
10481: LIST
10482: LIST
10483: LIST
10484: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
10485: LD_VAR 0 6
10489: PPUSH
10490: CALL_OW 264
10494: PUSH
10495: LD_INT 47
10497: PUSH
10498: EMPTY
10499: LIST
10500: IN
10501: IFFALSE 10522
// points := [ 67 , 45 , 75 ] ;
10503: LD_ADDR_VAR 0 9
10507: PUSH
10508: LD_INT 67
10510: PUSH
10511: LD_INT 45
10513: PUSH
10514: LD_INT 75
10516: PUSH
10517: EMPTY
10518: LIST
10519: LIST
10520: LIST
10521: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
10522: LD_VAR 0 6
10526: PPUSH
10527: CALL_OW 264
10531: PUSH
10532: LD_INT 26
10534: PUSH
10535: EMPTY
10536: LIST
10537: IN
10538: IFFALSE 10559
// points := [ 120 , 30 , 80 ] ;
10540: LD_ADDR_VAR 0 9
10544: PUSH
10545: LD_INT 120
10547: PUSH
10548: LD_INT 30
10550: PUSH
10551: LD_INT 80
10553: PUSH
10554: EMPTY
10555: LIST
10556: LIST
10557: LIST
10558: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
10559: LD_VAR 0 6
10563: PPUSH
10564: CALL_OW 264
10568: PUSH
10569: LD_INT 22
10571: PUSH
10572: EMPTY
10573: LIST
10574: IN
10575: IFFALSE 10596
// points := [ 40 , 1 , 1 ] ;
10577: LD_ADDR_VAR 0 9
10581: PUSH
10582: LD_INT 40
10584: PUSH
10585: LD_INT 1
10587: PUSH
10588: LD_INT 1
10590: PUSH
10591: EMPTY
10592: LIST
10593: LIST
10594: LIST
10595: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
10596: LD_VAR 0 6
10600: PPUSH
10601: CALL_OW 264
10605: PUSH
10606: LD_INT 29
10608: PUSH
10609: EMPTY
10610: LIST
10611: IN
10612: IFFALSE 10633
// points := [ 70 , 200 , 400 ] ;
10614: LD_ADDR_VAR 0 9
10618: PUSH
10619: LD_INT 70
10621: PUSH
10622: LD_INT 200
10624: PUSH
10625: LD_INT 400
10627: PUSH
10628: EMPTY
10629: LIST
10630: LIST
10631: LIST
10632: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
10633: LD_VAR 0 6
10637: PPUSH
10638: CALL_OW 264
10642: PUSH
10643: LD_INT 14
10645: PUSH
10646: LD_INT 53
10648: PUSH
10649: EMPTY
10650: LIST
10651: LIST
10652: IN
10653: IFFALSE 10674
// points := [ 40 , 10 , 20 ] ;
10655: LD_ADDR_VAR 0 9
10659: PUSH
10660: LD_INT 40
10662: PUSH
10663: LD_INT 10
10665: PUSH
10666: LD_INT 20
10668: PUSH
10669: EMPTY
10670: LIST
10671: LIST
10672: LIST
10673: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
10674: LD_VAR 0 6
10678: PPUSH
10679: CALL_OW 264
10683: PUSH
10684: LD_INT 9
10686: PUSH
10687: EMPTY
10688: LIST
10689: IN
10690: IFFALSE 10711
// points := [ 5 , 70 , 20 ] ;
10692: LD_ADDR_VAR 0 9
10696: PUSH
10697: LD_INT 5
10699: PUSH
10700: LD_INT 70
10702: PUSH
10703: LD_INT 20
10705: PUSH
10706: EMPTY
10707: LIST
10708: LIST
10709: LIST
10710: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
10711: LD_VAR 0 6
10715: PPUSH
10716: CALL_OW 264
10720: PUSH
10721: LD_INT 10
10723: PUSH
10724: EMPTY
10725: LIST
10726: IN
10727: IFFALSE 10748
// points := [ 35 , 110 , 70 ] ;
10729: LD_ADDR_VAR 0 9
10733: PUSH
10734: LD_INT 35
10736: PUSH
10737: LD_INT 110
10739: PUSH
10740: LD_INT 70
10742: PUSH
10743: EMPTY
10744: LIST
10745: LIST
10746: LIST
10747: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
10748: LD_VAR 0 6
10752: PPUSH
10753: CALL_OW 265
10757: PUSH
10758: LD_INT 25
10760: EQUAL
10761: IFFALSE 10782
// points := [ 80 , 65 , 100 ] ;
10763: LD_ADDR_VAR 0 9
10767: PUSH
10768: LD_INT 80
10770: PUSH
10771: LD_INT 65
10773: PUSH
10774: LD_INT 100
10776: PUSH
10777: EMPTY
10778: LIST
10779: LIST
10780: LIST
10781: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
10782: LD_VAR 0 6
10786: PPUSH
10787: CALL_OW 263
10791: PUSH
10792: LD_INT 1
10794: EQUAL
10795: IFFALSE 10830
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
10797: LD_ADDR_VAR 0 10
10801: PUSH
10802: LD_VAR 0 10
10806: PUSH
10807: LD_VAR 0 6
10811: PPUSH
10812: CALL_OW 311
10816: PPUSH
10817: LD_INT 3
10819: PPUSH
10820: CALL_OW 259
10824: PUSH
10825: LD_INT 4
10827: MUL
10828: MUL
10829: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
10830: LD_VAR 0 6
10834: PPUSH
10835: CALL_OW 263
10839: PUSH
10840: LD_INT 2
10842: EQUAL
10843: IFFALSE 10894
// begin j := IsControledBy ( i ) ;
10845: LD_ADDR_VAR 0 7
10849: PUSH
10850: LD_VAR 0 6
10854: PPUSH
10855: CALL_OW 312
10859: ST_TO_ADDR
// if j then
10860: LD_VAR 0 7
10864: IFFALSE 10894
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
10866: LD_ADDR_VAR 0 10
10870: PUSH
10871: LD_VAR 0 10
10875: PUSH
10876: LD_VAR 0 7
10880: PPUSH
10881: LD_INT 3
10883: PPUSH
10884: CALL_OW 259
10888: PUSH
10889: LD_INT 3
10891: MUL
10892: MUL
10893: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
10894: LD_VAR 0 6
10898: PPUSH
10899: CALL_OW 264
10903: PUSH
10904: LD_INT 5
10906: PUSH
10907: LD_INT 6
10909: PUSH
10910: LD_INT 46
10912: PUSH
10913: LD_INT 44
10915: PUSH
10916: LD_INT 47
10918: PUSH
10919: LD_INT 45
10921: PUSH
10922: LD_INT 28
10924: PUSH
10925: LD_INT 7
10927: PUSH
10928: LD_INT 27
10930: PUSH
10931: LD_INT 29
10933: PUSH
10934: EMPTY
10935: LIST
10936: LIST
10937: LIST
10938: LIST
10939: LIST
10940: LIST
10941: LIST
10942: LIST
10943: LIST
10944: LIST
10945: IN
10946: IFFALSE 10966
10948: PUSH
10949: LD_VAR 0 1
10953: PPUSH
10954: LD_INT 52
10956: PPUSH
10957: CALL_OW 321
10961: PUSH
10962: LD_INT 2
10964: EQUAL
10965: AND
10966: IFFALSE 10983
// bpoints := bpoints * 1.2 ;
10968: LD_ADDR_VAR 0 10
10972: PUSH
10973: LD_VAR 0 10
10977: PUSH
10978: LD_REAL  1.20000000000000E+0000
10981: MUL
10982: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
10983: LD_VAR 0 6
10987: PPUSH
10988: CALL_OW 264
10992: PUSH
10993: LD_INT 6
10995: PUSH
10996: LD_INT 46
10998: PUSH
10999: LD_INT 47
11001: PUSH
11002: EMPTY
11003: LIST
11004: LIST
11005: LIST
11006: IN
11007: IFFALSE 11024
// bpoints := bpoints * 1.2 ;
11009: LD_ADDR_VAR 0 10
11013: PUSH
11014: LD_VAR 0 10
11018: PUSH
11019: LD_REAL  1.20000000000000E+0000
11022: MUL
11023: ST_TO_ADDR
// end ; unit_building :
11024: GO 11038
11026: LD_INT 3
11028: DOUBLE
11029: EQUAL
11030: IFTRUE 11034
11032: GO 11037
11034: POP
// ; end ;
11035: GO 11038
11037: POP
// for j = 1 to 3 do
11038: LD_ADDR_VAR 0 7
11042: PUSH
11043: DOUBLE
11044: LD_INT 1
11046: DEC
11047: ST_TO_ADDR
11048: LD_INT 3
11050: PUSH
11051: FOR_TO
11052: IFFALSE 11105
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
11054: LD_ADDR_VAR 0 5
11058: PUSH
11059: LD_VAR 0 5
11063: PPUSH
11064: LD_VAR 0 7
11068: PPUSH
11069: LD_VAR 0 5
11073: PUSH
11074: LD_VAR 0 7
11078: ARRAY
11079: PUSH
11080: LD_VAR 0 9
11084: PUSH
11085: LD_VAR 0 7
11089: ARRAY
11090: PUSH
11091: LD_VAR 0 10
11095: MUL
11096: PLUS
11097: PPUSH
11098: CALL_OW 1
11102: ST_TO_ADDR
11103: GO 11051
11105: POP
11106: POP
// end ;
11107: GO 9580
11109: POP
11110: POP
// result := Replace ( result , 4 , tmp ) ;
11111: LD_ADDR_VAR 0 5
11115: PUSH
11116: LD_VAR 0 5
11120: PPUSH
11121: LD_INT 4
11123: PPUSH
11124: LD_VAR 0 8
11128: PPUSH
11129: CALL_OW 1
11133: ST_TO_ADDR
// end ;
11134: LD_VAR 0 5
11138: RET
// export function DangerAtRange ( unit , range ) ; begin
11139: LD_INT 0
11141: PPUSH
// if not unit then
11142: LD_VAR 0 1
11146: NOT
11147: IFFALSE 11151
// exit ;
11149: GO 11196
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
11151: LD_ADDR_VAR 0 3
11155: PUSH
11156: LD_VAR 0 1
11160: PPUSH
11161: CALL_OW 255
11165: PPUSH
11166: LD_VAR 0 1
11170: PPUSH
11171: CALL_OW 250
11175: PPUSH
11176: LD_VAR 0 1
11180: PPUSH
11181: CALL_OW 251
11185: PPUSH
11186: LD_VAR 0 2
11190: PPUSH
11191: CALL 9430 0 4
11195: ST_TO_ADDR
// end ;
11196: LD_VAR 0 3
11200: RET
// export function DangerInArea ( side , area ) ; begin
11201: LD_INT 0
11203: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
11204: LD_ADDR_VAR 0 3
11208: PUSH
11209: LD_VAR 0 2
11213: PPUSH
11214: LD_INT 81
11216: PUSH
11217: LD_VAR 0 1
11221: PUSH
11222: EMPTY
11223: LIST
11224: LIST
11225: PPUSH
11226: CALL_OW 70
11230: ST_TO_ADDR
// end ;
11231: LD_VAR 0 3
11235: RET
// export function IsExtension ( b ) ; begin
11236: LD_INT 0
11238: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
11239: LD_ADDR_VAR 0 2
11243: PUSH
11244: LD_VAR 0 1
11248: PUSH
11249: LD_INT 23
11251: PUSH
11252: LD_INT 20
11254: PUSH
11255: LD_INT 22
11257: PUSH
11258: LD_INT 17
11260: PUSH
11261: LD_INT 24
11263: PUSH
11264: LD_INT 21
11266: PUSH
11267: LD_INT 19
11269: PUSH
11270: LD_INT 16
11272: PUSH
11273: LD_INT 25
11275: PUSH
11276: LD_INT 18
11278: PUSH
11279: EMPTY
11280: LIST
11281: LIST
11282: LIST
11283: LIST
11284: LIST
11285: LIST
11286: LIST
11287: LIST
11288: LIST
11289: LIST
11290: IN
11291: ST_TO_ADDR
// end ;
11292: LD_VAR 0 2
11296: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
11297: LD_INT 0
11299: PPUSH
11300: PPUSH
11301: PPUSH
// result := [ ] ;
11302: LD_ADDR_VAR 0 4
11306: PUSH
11307: EMPTY
11308: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
11309: LD_ADDR_VAR 0 5
11313: PUSH
11314: LD_VAR 0 2
11318: PPUSH
11319: LD_INT 21
11321: PUSH
11322: LD_INT 3
11324: PUSH
11325: EMPTY
11326: LIST
11327: LIST
11328: PPUSH
11329: CALL_OW 70
11333: ST_TO_ADDR
// if not tmp then
11334: LD_VAR 0 5
11338: NOT
11339: IFFALSE 11343
// exit ;
11341: GO 11407
// if checkLink then
11343: LD_VAR 0 3
11347: IFFALSE 11397
// begin for i in tmp do
11349: LD_ADDR_VAR 0 6
11353: PUSH
11354: LD_VAR 0 5
11358: PUSH
11359: FOR_IN
11360: IFFALSE 11395
// if GetBase ( i ) <> base then
11362: LD_VAR 0 6
11366: PPUSH
11367: CALL_OW 274
11371: PUSH
11372: LD_VAR 0 1
11376: NONEQUAL
11377: IFFALSE 11393
// ComLinkToBase ( base , i ) ;
11379: LD_VAR 0 1
11383: PPUSH
11384: LD_VAR 0 6
11388: PPUSH
11389: CALL_OW 169
11393: GO 11359
11395: POP
11396: POP
// end ; result := tmp ;
11397: LD_ADDR_VAR 0 4
11401: PUSH
11402: LD_VAR 0 5
11406: ST_TO_ADDR
// end ;
11407: LD_VAR 0 4
11411: RET
// export function ComComplete ( units , b ) ; var i ; begin
11412: LD_INT 0
11414: PPUSH
11415: PPUSH
// if not units then
11416: LD_VAR 0 1
11420: NOT
11421: IFFALSE 11425
// exit ;
11423: GO 11515
// for i in units do
11425: LD_ADDR_VAR 0 4
11429: PUSH
11430: LD_VAR 0 1
11434: PUSH
11435: FOR_IN
11436: IFFALSE 11513
// if BuildingStatus ( b ) = bs_build then
11438: LD_VAR 0 2
11442: PPUSH
11443: CALL_OW 461
11447: PUSH
11448: LD_INT 1
11450: EQUAL
11451: IFFALSE 11511
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
11453: LD_VAR 0 4
11457: PPUSH
11458: LD_STRING h
11460: PUSH
11461: LD_VAR 0 2
11465: PPUSH
11466: CALL_OW 250
11470: PUSH
11471: LD_VAR 0 2
11475: PPUSH
11476: CALL_OW 251
11480: PUSH
11481: LD_VAR 0 2
11485: PUSH
11486: LD_INT 0
11488: PUSH
11489: LD_INT 0
11491: PUSH
11492: LD_INT 0
11494: PUSH
11495: EMPTY
11496: LIST
11497: LIST
11498: LIST
11499: LIST
11500: LIST
11501: LIST
11502: LIST
11503: PUSH
11504: EMPTY
11505: LIST
11506: PPUSH
11507: CALL_OW 446
11511: GO 11435
11513: POP
11514: POP
// end ;
11515: LD_VAR 0 3
11519: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
11520: LD_INT 0
11522: PPUSH
11523: PPUSH
11524: PPUSH
11525: PPUSH
11526: PPUSH
11527: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
11528: LD_VAR 0 1
11532: NOT
11533: IFTRUE 11550
11535: PUSH
11536: LD_VAR 0 1
11540: PPUSH
11541: CALL_OW 263
11545: PUSH
11546: LD_INT 2
11548: NONEQUAL
11549: OR
11550: IFFALSE 11554
// exit ;
11552: GO 11870
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
11554: LD_ADDR_VAR 0 6
11558: PUSH
11559: LD_INT 22
11561: PUSH
11562: LD_VAR 0 1
11566: PPUSH
11567: CALL_OW 255
11571: PUSH
11572: EMPTY
11573: LIST
11574: LIST
11575: PUSH
11576: LD_INT 2
11578: PUSH
11579: LD_INT 30
11581: PUSH
11582: LD_INT 36
11584: PUSH
11585: EMPTY
11586: LIST
11587: LIST
11588: PUSH
11589: LD_INT 34
11591: PUSH
11592: LD_INT 31
11594: PUSH
11595: EMPTY
11596: LIST
11597: LIST
11598: PUSH
11599: EMPTY
11600: LIST
11601: LIST
11602: LIST
11603: PUSH
11604: EMPTY
11605: LIST
11606: LIST
11607: PPUSH
11608: CALL_OW 69
11612: ST_TO_ADDR
// if not tmp then
11613: LD_VAR 0 6
11617: NOT
11618: IFFALSE 11622
// exit ;
11620: GO 11870
// result := [ ] ;
11622: LD_ADDR_VAR 0 2
11626: PUSH
11627: EMPTY
11628: ST_TO_ADDR
// for i in tmp do
11629: LD_ADDR_VAR 0 3
11633: PUSH
11634: LD_VAR 0 6
11638: PUSH
11639: FOR_IN
11640: IFFALSE 11711
// begin t := UnitsInside ( i ) ;
11642: LD_ADDR_VAR 0 4
11646: PUSH
11647: LD_VAR 0 3
11651: PPUSH
11652: CALL_OW 313
11656: ST_TO_ADDR
// if t then
11657: LD_VAR 0 4
11661: IFFALSE 11709
// for j in t do
11663: LD_ADDR_VAR 0 7
11667: PUSH
11668: LD_VAR 0 4
11672: PUSH
11673: FOR_IN
11674: IFFALSE 11707
// result := Replace ( result , result + 1 , j ) ;
11676: LD_ADDR_VAR 0 2
11680: PUSH
11681: LD_VAR 0 2
11685: PPUSH
11686: LD_VAR 0 2
11690: PUSH
11691: LD_INT 1
11693: PLUS
11694: PPUSH
11695: LD_VAR 0 7
11699: PPUSH
11700: CALL_OW 1
11704: ST_TO_ADDR
11705: GO 11673
11707: POP
11708: POP
// end ;
11709: GO 11639
11711: POP
11712: POP
// if not result then
11713: LD_VAR 0 2
11717: NOT
11718: IFFALSE 11722
// exit ;
11720: GO 11870
// mech := result [ 1 ] ;
11722: LD_ADDR_VAR 0 5
11726: PUSH
11727: LD_VAR 0 2
11731: PUSH
11732: LD_INT 1
11734: ARRAY
11735: ST_TO_ADDR
// if result > 1 then
11736: LD_VAR 0 2
11740: PUSH
11741: LD_INT 1
11743: GREATER
11744: IFFALSE 11856
// begin for i = 2 to result do
11746: LD_ADDR_VAR 0 3
11750: PUSH
11751: DOUBLE
11752: LD_INT 2
11754: DEC
11755: ST_TO_ADDR
11756: LD_VAR 0 2
11760: PUSH
11761: FOR_TO
11762: IFFALSE 11854
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
11764: LD_ADDR_VAR 0 4
11768: PUSH
11769: LD_VAR 0 2
11773: PUSH
11774: LD_VAR 0 3
11778: ARRAY
11779: PPUSH
11780: LD_INT 3
11782: PPUSH
11783: CALL_OW 259
11787: PUSH
11788: LD_VAR 0 2
11792: PUSH
11793: LD_VAR 0 3
11797: ARRAY
11798: PPUSH
11799: CALL_OW 432
11803: MINUS
11804: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
11805: LD_VAR 0 4
11809: PUSH
11810: LD_VAR 0 5
11814: PPUSH
11815: LD_INT 3
11817: PPUSH
11818: CALL_OW 259
11822: PUSH
11823: LD_VAR 0 5
11827: PPUSH
11828: CALL_OW 432
11832: MINUS
11833: GREATEREQUAL
11834: IFFALSE 11852
// mech := result [ i ] ;
11836: LD_ADDR_VAR 0 5
11840: PUSH
11841: LD_VAR 0 2
11845: PUSH
11846: LD_VAR 0 3
11850: ARRAY
11851: ST_TO_ADDR
// end ;
11852: GO 11761
11854: POP
11855: POP
// end ; ComLinkTo ( vehicle , mech ) ;
11856: LD_VAR 0 1
11860: PPUSH
11861: LD_VAR 0 5
11865: PPUSH
11866: CALL_OW 135
// end ;
11870: LD_VAR 0 2
11874: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
11875: LD_INT 0
11877: PPUSH
11878: PPUSH
11879: PPUSH
11880: PPUSH
11881: PPUSH
11882: PPUSH
11883: PPUSH
11884: PPUSH
11885: PPUSH
11886: PPUSH
11887: PPUSH
11888: PPUSH
11889: PPUSH
// result := [ ] ;
11890: LD_ADDR_VAR 0 7
11894: PUSH
11895: EMPTY
11896: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
11897: LD_VAR 0 1
11901: PPUSH
11902: CALL_OW 266
11906: PUSH
11907: LD_INT 0
11909: PUSH
11910: LD_INT 1
11912: PUSH
11913: EMPTY
11914: LIST
11915: LIST
11916: IN
11917: NOT
11918: IFFALSE 11922
// exit ;
11920: GO 13562
// if name then
11922: LD_VAR 0 3
11926: IFFALSE 11942
// SetBName ( base_dep , name ) ;
11928: LD_VAR 0 1
11932: PPUSH
11933: LD_VAR 0 3
11937: PPUSH
11938: CALL_OW 500
// base := GetBase ( base_dep ) ;
11942: LD_ADDR_VAR 0 15
11946: PUSH
11947: LD_VAR 0 1
11951: PPUSH
11952: CALL_OW 274
11956: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
11957: LD_ADDR_VAR 0 16
11961: PUSH
11962: LD_VAR 0 1
11966: PPUSH
11967: CALL_OW 255
11971: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
11972: LD_ADDR_VAR 0 17
11976: PUSH
11977: LD_VAR 0 1
11981: PPUSH
11982: CALL_OW 248
11986: ST_TO_ADDR
// if sources then
11987: LD_VAR 0 5
11991: IFFALSE 12038
// for i = 1 to 3 do
11993: LD_ADDR_VAR 0 8
11997: PUSH
11998: DOUBLE
11999: LD_INT 1
12001: DEC
12002: ST_TO_ADDR
12003: LD_INT 3
12005: PUSH
12006: FOR_TO
12007: IFFALSE 12036
// AddResourceType ( base , i , sources [ i ] ) ;
12009: LD_VAR 0 15
12013: PPUSH
12014: LD_VAR 0 8
12018: PPUSH
12019: LD_VAR 0 5
12023: PUSH
12024: LD_VAR 0 8
12028: ARRAY
12029: PPUSH
12030: CALL_OW 276
12034: GO 12006
12036: POP
12037: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
12038: LD_ADDR_VAR 0 18
12042: PUSH
12043: LD_VAR 0 15
12047: PPUSH
12048: LD_VAR 0 2
12052: PPUSH
12053: LD_INT 1
12055: PPUSH
12056: CALL 11297 0 3
12060: ST_TO_ADDR
// InitHc ;
12061: CALL_OW 19
// InitUc ;
12065: CALL_OW 18
// uc_side := side ;
12069: LD_ADDR_OWVAR 20
12073: PUSH
12074: LD_VAR 0 16
12078: ST_TO_ADDR
// uc_nation := nation ;
12079: LD_ADDR_OWVAR 21
12083: PUSH
12084: LD_VAR 0 17
12088: ST_TO_ADDR
// if buildings then
12089: LD_VAR 0 18
12093: IFFALSE 13421
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
12095: LD_ADDR_VAR 0 19
12099: PUSH
12100: LD_VAR 0 18
12104: PPUSH
12105: LD_INT 2
12107: PUSH
12108: LD_INT 30
12110: PUSH
12111: LD_INT 29
12113: PUSH
12114: EMPTY
12115: LIST
12116: LIST
12117: PUSH
12118: LD_INT 30
12120: PUSH
12121: LD_INT 30
12123: PUSH
12124: EMPTY
12125: LIST
12126: LIST
12127: PUSH
12128: EMPTY
12129: LIST
12130: LIST
12131: LIST
12132: PPUSH
12133: CALL_OW 72
12137: ST_TO_ADDR
// if tmp then
12138: LD_VAR 0 19
12142: IFFALSE 12190
// for i in tmp do
12144: LD_ADDR_VAR 0 8
12148: PUSH
12149: LD_VAR 0 19
12153: PUSH
12154: FOR_IN
12155: IFFALSE 12188
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
12157: LD_VAR 0 8
12161: PPUSH
12162: CALL_OW 250
12166: PPUSH
12167: LD_VAR 0 8
12171: PPUSH
12172: CALL_OW 251
12176: PPUSH
12177: LD_VAR 0 16
12181: PPUSH
12182: CALL_OW 441
12186: GO 12154
12188: POP
12189: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
12190: LD_VAR 0 18
12194: PPUSH
12195: LD_INT 2
12197: PUSH
12198: LD_INT 30
12200: PUSH
12201: LD_INT 32
12203: PUSH
12204: EMPTY
12205: LIST
12206: LIST
12207: PUSH
12208: LD_INT 30
12210: PUSH
12211: LD_INT 33
12213: PUSH
12214: EMPTY
12215: LIST
12216: LIST
12217: PUSH
12218: EMPTY
12219: LIST
12220: LIST
12221: LIST
12222: PPUSH
12223: CALL_OW 72
12227: IFFALSE 12315
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
12229: LD_ADDR_VAR 0 8
12233: PUSH
12234: LD_VAR 0 18
12238: PPUSH
12239: LD_INT 2
12241: PUSH
12242: LD_INT 30
12244: PUSH
12245: LD_INT 32
12247: PUSH
12248: EMPTY
12249: LIST
12250: LIST
12251: PUSH
12252: LD_INT 30
12254: PUSH
12255: LD_INT 33
12257: PUSH
12258: EMPTY
12259: LIST
12260: LIST
12261: PUSH
12262: EMPTY
12263: LIST
12264: LIST
12265: LIST
12266: PPUSH
12267: CALL_OW 72
12271: PUSH
12272: FOR_IN
12273: IFFALSE 12313
// begin if not GetBWeapon ( i ) then
12275: LD_VAR 0 8
12279: PPUSH
12280: CALL_OW 269
12284: NOT
12285: IFFALSE 12311
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
12287: LD_VAR 0 8
12291: PPUSH
12292: LD_VAR 0 8
12296: PPUSH
12297: LD_VAR 0 2
12301: PPUSH
12302: CALL 13567 0 2
12306: PPUSH
12307: CALL_OW 431
// end ;
12311: GO 12272
12313: POP
12314: POP
// end ; for i = 1 to personel do
12315: LD_ADDR_VAR 0 8
12319: PUSH
12320: DOUBLE
12321: LD_INT 1
12323: DEC
12324: ST_TO_ADDR
12325: LD_VAR 0 6
12329: PUSH
12330: FOR_TO
12331: IFFALSE 13401
// begin if i > 4 then
12333: LD_VAR 0 8
12337: PUSH
12338: LD_INT 4
12340: GREATER
12341: IFFALSE 12345
// break ;
12343: GO 13401
// case i of 1 :
12345: LD_VAR 0 8
12349: PUSH
12350: LD_INT 1
12352: DOUBLE
12353: EQUAL
12354: IFTRUE 12358
12356: GO 12438
12358: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
12359: LD_ADDR_VAR 0 12
12363: PUSH
12364: LD_VAR 0 18
12368: PPUSH
12369: LD_INT 22
12371: PUSH
12372: LD_VAR 0 16
12376: PUSH
12377: EMPTY
12378: LIST
12379: LIST
12380: PUSH
12381: LD_INT 58
12383: PUSH
12384: EMPTY
12385: LIST
12386: PUSH
12387: LD_INT 2
12389: PUSH
12390: LD_INT 30
12392: PUSH
12393: LD_INT 32
12395: PUSH
12396: EMPTY
12397: LIST
12398: LIST
12399: PUSH
12400: LD_INT 30
12402: PUSH
12403: LD_INT 4
12405: PUSH
12406: EMPTY
12407: LIST
12408: LIST
12409: PUSH
12410: LD_INT 30
12412: PUSH
12413: LD_INT 5
12415: PUSH
12416: EMPTY
12417: LIST
12418: LIST
12419: PUSH
12420: EMPTY
12421: LIST
12422: LIST
12423: LIST
12424: LIST
12425: PUSH
12426: EMPTY
12427: LIST
12428: LIST
12429: LIST
12430: PPUSH
12431: CALL_OW 72
12435: ST_TO_ADDR
12436: GO 12660
12438: LD_INT 2
12440: DOUBLE
12441: EQUAL
12442: IFTRUE 12446
12444: GO 12508
12446: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
12447: LD_ADDR_VAR 0 12
12451: PUSH
12452: LD_VAR 0 18
12456: PPUSH
12457: LD_INT 22
12459: PUSH
12460: LD_VAR 0 16
12464: PUSH
12465: EMPTY
12466: LIST
12467: LIST
12468: PUSH
12469: LD_INT 2
12471: PUSH
12472: LD_INT 30
12474: PUSH
12475: LD_INT 0
12477: PUSH
12478: EMPTY
12479: LIST
12480: LIST
12481: PUSH
12482: LD_INT 30
12484: PUSH
12485: LD_INT 1
12487: PUSH
12488: EMPTY
12489: LIST
12490: LIST
12491: PUSH
12492: EMPTY
12493: LIST
12494: LIST
12495: LIST
12496: PUSH
12497: EMPTY
12498: LIST
12499: LIST
12500: PPUSH
12501: CALL_OW 72
12505: ST_TO_ADDR
12506: GO 12660
12508: LD_INT 3
12510: DOUBLE
12511: EQUAL
12512: IFTRUE 12516
12514: GO 12578
12516: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
12517: LD_ADDR_VAR 0 12
12521: PUSH
12522: LD_VAR 0 18
12526: PPUSH
12527: LD_INT 22
12529: PUSH
12530: LD_VAR 0 16
12534: PUSH
12535: EMPTY
12536: LIST
12537: LIST
12538: PUSH
12539: LD_INT 2
12541: PUSH
12542: LD_INT 30
12544: PUSH
12545: LD_INT 2
12547: PUSH
12548: EMPTY
12549: LIST
12550: LIST
12551: PUSH
12552: LD_INT 30
12554: PUSH
12555: LD_INT 3
12557: PUSH
12558: EMPTY
12559: LIST
12560: LIST
12561: PUSH
12562: EMPTY
12563: LIST
12564: LIST
12565: LIST
12566: PUSH
12567: EMPTY
12568: LIST
12569: LIST
12570: PPUSH
12571: CALL_OW 72
12575: ST_TO_ADDR
12576: GO 12660
12578: LD_INT 4
12580: DOUBLE
12581: EQUAL
12582: IFTRUE 12586
12584: GO 12659
12586: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
12587: LD_ADDR_VAR 0 12
12591: PUSH
12592: LD_VAR 0 18
12596: PPUSH
12597: LD_INT 22
12599: PUSH
12600: LD_VAR 0 16
12604: PUSH
12605: EMPTY
12606: LIST
12607: LIST
12608: PUSH
12609: LD_INT 2
12611: PUSH
12612: LD_INT 30
12614: PUSH
12615: LD_INT 6
12617: PUSH
12618: EMPTY
12619: LIST
12620: LIST
12621: PUSH
12622: LD_INT 30
12624: PUSH
12625: LD_INT 7
12627: PUSH
12628: EMPTY
12629: LIST
12630: LIST
12631: PUSH
12632: LD_INT 30
12634: PUSH
12635: LD_INT 8
12637: PUSH
12638: EMPTY
12639: LIST
12640: LIST
12641: PUSH
12642: EMPTY
12643: LIST
12644: LIST
12645: LIST
12646: LIST
12647: PUSH
12648: EMPTY
12649: LIST
12650: LIST
12651: PPUSH
12652: CALL_OW 72
12656: ST_TO_ADDR
12657: GO 12660
12659: POP
// if i = 1 then
12660: LD_VAR 0 8
12664: PUSH
12665: LD_INT 1
12667: EQUAL
12668: IFFALSE 12779
// begin tmp := [ ] ;
12670: LD_ADDR_VAR 0 19
12674: PUSH
12675: EMPTY
12676: ST_TO_ADDR
// for j in f do
12677: LD_ADDR_VAR 0 9
12681: PUSH
12682: LD_VAR 0 12
12686: PUSH
12687: FOR_IN
12688: IFFALSE 12761
// if GetBType ( j ) = b_bunker then
12690: LD_VAR 0 9
12694: PPUSH
12695: CALL_OW 266
12699: PUSH
12700: LD_INT 32
12702: EQUAL
12703: IFFALSE 12730
// tmp := Insert ( tmp , 1 , j ) else
12705: LD_ADDR_VAR 0 19
12709: PUSH
12710: LD_VAR 0 19
12714: PPUSH
12715: LD_INT 1
12717: PPUSH
12718: LD_VAR 0 9
12722: PPUSH
12723: CALL_OW 2
12727: ST_TO_ADDR
12728: GO 12759
// tmp := Insert ( tmp , tmp + 1 , j ) ;
12730: LD_ADDR_VAR 0 19
12734: PUSH
12735: LD_VAR 0 19
12739: PPUSH
12740: LD_VAR 0 19
12744: PUSH
12745: LD_INT 1
12747: PLUS
12748: PPUSH
12749: LD_VAR 0 9
12753: PPUSH
12754: CALL_OW 2
12758: ST_TO_ADDR
12759: GO 12687
12761: POP
12762: POP
// if tmp then
12763: LD_VAR 0 19
12767: IFFALSE 12779
// f := tmp ;
12769: LD_ADDR_VAR 0 12
12773: PUSH
12774: LD_VAR 0 19
12778: ST_TO_ADDR
// end ; x := personel [ i ] ;
12779: LD_ADDR_VAR 0 13
12783: PUSH
12784: LD_VAR 0 6
12788: PUSH
12789: LD_VAR 0 8
12793: ARRAY
12794: ST_TO_ADDR
// if x = - 1 then
12795: LD_VAR 0 13
12799: PUSH
12800: LD_INT 1
12802: NEG
12803: EQUAL
12804: IFFALSE 13015
// begin for j in f do
12806: LD_ADDR_VAR 0 9
12810: PUSH
12811: LD_VAR 0 12
12815: PUSH
12816: FOR_IN
12817: IFFALSE 13011
// repeat InitHc ;
12819: CALL_OW 19
// if GetBType ( j ) = b_barracks then
12823: LD_VAR 0 9
12827: PPUSH
12828: CALL_OW 266
12832: PUSH
12833: LD_INT 5
12835: EQUAL
12836: IFFALSE 12906
// begin if UnitsInside ( j ) < 3 then
12838: LD_VAR 0 9
12842: PPUSH
12843: CALL_OW 313
12847: PUSH
12848: LD_INT 3
12850: LESS
12851: IFFALSE 12887
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12853: LD_INT 0
12855: PPUSH
12856: LD_INT 5
12858: PUSH
12859: LD_INT 8
12861: PUSH
12862: LD_INT 9
12864: PUSH
12865: EMPTY
12866: LIST
12867: LIST
12868: LIST
12869: PUSH
12870: LD_VAR 0 17
12874: ARRAY
12875: PPUSH
12876: LD_VAR 0 4
12880: PPUSH
12881: CALL_OW 380
12885: GO 12904
// PrepareHuman ( false , i , skill ) ;
12887: LD_INT 0
12889: PPUSH
12890: LD_VAR 0 8
12894: PPUSH
12895: LD_VAR 0 4
12899: PPUSH
12900: CALL_OW 380
// end else
12904: GO 12923
// PrepareHuman ( false , i , skill ) ;
12906: LD_INT 0
12908: PPUSH
12909: LD_VAR 0 8
12913: PPUSH
12914: LD_VAR 0 4
12918: PPUSH
12919: CALL_OW 380
// un := CreateHuman ;
12923: LD_ADDR_VAR 0 14
12927: PUSH
12928: CALL_OW 44
12932: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12933: LD_ADDR_VAR 0 7
12937: PUSH
12938: LD_VAR 0 7
12942: PPUSH
12943: LD_INT 1
12945: PPUSH
12946: LD_VAR 0 14
12950: PPUSH
12951: CALL_OW 2
12955: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
12956: LD_VAR 0 14
12960: PPUSH
12961: LD_VAR 0 9
12965: PPUSH
12966: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
12970: LD_VAR 0 9
12974: PPUSH
12975: CALL_OW 313
12979: PUSH
12980: LD_INT 6
12982: EQUAL
12983: IFTRUE 13007
12985: PUSH
12986: LD_VAR 0 9
12990: PPUSH
12991: CALL_OW 266
12995: PUSH
12996: LD_INT 32
12998: PUSH
12999: LD_INT 31
13001: PUSH
13002: EMPTY
13003: LIST
13004: LIST
13005: IN
13006: OR
13007: IFFALSE 12819
13009: GO 12816
13011: POP
13012: POP
// end else
13013: GO 13399
// for j = 1 to x do
13015: LD_ADDR_VAR 0 9
13019: PUSH
13020: DOUBLE
13021: LD_INT 1
13023: DEC
13024: ST_TO_ADDR
13025: LD_VAR 0 13
13029: PUSH
13030: FOR_TO
13031: IFFALSE 13397
// begin InitHc ;
13033: CALL_OW 19
// if not f then
13037: LD_VAR 0 12
13041: NOT
13042: IFFALSE 13131
// begin PrepareHuman ( false , i , skill ) ;
13044: LD_INT 0
13046: PPUSH
13047: LD_VAR 0 8
13051: PPUSH
13052: LD_VAR 0 4
13056: PPUSH
13057: CALL_OW 380
// un := CreateHuman ;
13061: LD_ADDR_VAR 0 14
13065: PUSH
13066: CALL_OW 44
13070: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13071: LD_ADDR_VAR 0 7
13075: PUSH
13076: LD_VAR 0 7
13080: PPUSH
13081: LD_INT 1
13083: PPUSH
13084: LD_VAR 0 14
13088: PPUSH
13089: CALL_OW 2
13093: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13094: LD_VAR 0 14
13098: PPUSH
13099: LD_VAR 0 1
13103: PPUSH
13104: CALL_OW 250
13108: PPUSH
13109: LD_VAR 0 1
13113: PPUSH
13114: CALL_OW 251
13118: PPUSH
13119: LD_INT 10
13121: PPUSH
13122: LD_INT 0
13124: PPUSH
13125: CALL_OW 50
// continue ;
13129: GO 13030
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
13131: LD_VAR 0 12
13135: PUSH
13136: LD_INT 1
13138: ARRAY
13139: PPUSH
13140: CALL_OW 313
13144: IFFALSE 13172
13146: PUSH
13147: LD_VAR 0 12
13151: PUSH
13152: LD_INT 1
13154: ARRAY
13155: PPUSH
13156: CALL_OW 266
13160: PUSH
13161: LD_INT 32
13163: PUSH
13164: LD_INT 31
13166: PUSH
13167: EMPTY
13168: LIST
13169: LIST
13170: IN
13171: AND
13172: IFTRUE 13193
13174: PUSH
13175: LD_VAR 0 12
13179: PUSH
13180: LD_INT 1
13182: ARRAY
13183: PPUSH
13184: CALL_OW 313
13188: PUSH
13189: LD_INT 6
13191: EQUAL
13192: OR
13193: IFFALSE 13213
// f := Delete ( f , 1 ) ;
13195: LD_ADDR_VAR 0 12
13199: PUSH
13200: LD_VAR 0 12
13204: PPUSH
13205: LD_INT 1
13207: PPUSH
13208: CALL_OW 3
13212: ST_TO_ADDR
// if not f then
13213: LD_VAR 0 12
13217: NOT
13218: IFFALSE 13236
// begin x := x + 2 ;
13220: LD_ADDR_VAR 0 13
13224: PUSH
13225: LD_VAR 0 13
13229: PUSH
13230: LD_INT 2
13232: PLUS
13233: ST_TO_ADDR
// continue ;
13234: GO 13030
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
13236: LD_VAR 0 12
13240: PUSH
13241: LD_INT 1
13243: ARRAY
13244: PPUSH
13245: CALL_OW 266
13249: PUSH
13250: LD_INT 5
13252: EQUAL
13253: IFFALSE 13327
// begin if UnitsInside ( f [ 1 ] ) < 3 then
13255: LD_VAR 0 12
13259: PUSH
13260: LD_INT 1
13262: ARRAY
13263: PPUSH
13264: CALL_OW 313
13268: PUSH
13269: LD_INT 3
13271: LESS
13272: IFFALSE 13308
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
13274: LD_INT 0
13276: PPUSH
13277: LD_INT 5
13279: PUSH
13280: LD_INT 8
13282: PUSH
13283: LD_INT 9
13285: PUSH
13286: EMPTY
13287: LIST
13288: LIST
13289: LIST
13290: PUSH
13291: LD_VAR 0 17
13295: ARRAY
13296: PPUSH
13297: LD_VAR 0 4
13301: PPUSH
13302: CALL_OW 380
13306: GO 13325
// PrepareHuman ( false , i , skill ) ;
13308: LD_INT 0
13310: PPUSH
13311: LD_VAR 0 8
13315: PPUSH
13316: LD_VAR 0 4
13320: PPUSH
13321: CALL_OW 380
// end else
13325: GO 13344
// PrepareHuman ( false , i , skill ) ;
13327: LD_INT 0
13329: PPUSH
13330: LD_VAR 0 8
13334: PPUSH
13335: LD_VAR 0 4
13339: PPUSH
13340: CALL_OW 380
// un := CreateHuman ;
13344: LD_ADDR_VAR 0 14
13348: PUSH
13349: CALL_OW 44
13353: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13354: LD_ADDR_VAR 0 7
13358: PUSH
13359: LD_VAR 0 7
13363: PPUSH
13364: LD_INT 1
13366: PPUSH
13367: LD_VAR 0 14
13371: PPUSH
13372: CALL_OW 2
13376: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
13377: LD_VAR 0 14
13381: PPUSH
13382: LD_VAR 0 12
13386: PUSH
13387: LD_INT 1
13389: ARRAY
13390: PPUSH
13391: CALL_OW 52
// end ;
13395: GO 13030
13397: POP
13398: POP
// end ;
13399: GO 12330
13401: POP
13402: POP
// result := result ^ buildings ;
13403: LD_ADDR_VAR 0 7
13407: PUSH
13408: LD_VAR 0 7
13412: PUSH
13413: LD_VAR 0 18
13417: ADD
13418: ST_TO_ADDR
// end else
13419: GO 13562
// begin for i = 1 to personel do
13421: LD_ADDR_VAR 0 8
13425: PUSH
13426: DOUBLE
13427: LD_INT 1
13429: DEC
13430: ST_TO_ADDR
13431: LD_VAR 0 6
13435: PUSH
13436: FOR_TO
13437: IFFALSE 13560
// begin if i > 4 then
13439: LD_VAR 0 8
13443: PUSH
13444: LD_INT 4
13446: GREATER
13447: IFFALSE 13451
// break ;
13449: GO 13560
// x := personel [ i ] ;
13451: LD_ADDR_VAR 0 13
13455: PUSH
13456: LD_VAR 0 6
13460: PUSH
13461: LD_VAR 0 8
13465: ARRAY
13466: ST_TO_ADDR
// if x = - 1 then
13467: LD_VAR 0 13
13471: PUSH
13472: LD_INT 1
13474: NEG
13475: EQUAL
13476: IFFALSE 13480
// continue ;
13478: GO 13436
// PrepareHuman ( false , i , skill ) ;
13480: LD_INT 0
13482: PPUSH
13483: LD_VAR 0 8
13487: PPUSH
13488: LD_VAR 0 4
13492: PPUSH
13493: CALL_OW 380
// un := CreateHuman ;
13497: LD_ADDR_VAR 0 14
13501: PUSH
13502: CALL_OW 44
13506: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13507: LD_VAR 0 14
13511: PPUSH
13512: LD_VAR 0 1
13516: PPUSH
13517: CALL_OW 250
13521: PPUSH
13522: LD_VAR 0 1
13526: PPUSH
13527: CALL_OW 251
13531: PPUSH
13532: LD_INT 10
13534: PPUSH
13535: LD_INT 0
13537: PPUSH
13538: CALL_OW 50
// result := result ^ un ;
13542: LD_ADDR_VAR 0 7
13546: PUSH
13547: LD_VAR 0 7
13551: PUSH
13552: LD_VAR 0 14
13556: ADD
13557: ST_TO_ADDR
// end ;
13558: GO 13436
13560: POP
13561: POP
// end ; end ;
13562: LD_VAR 0 7
13566: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
13567: LD_INT 0
13569: PPUSH
13570: PPUSH
13571: PPUSH
13572: PPUSH
13573: PPUSH
13574: PPUSH
13575: PPUSH
13576: PPUSH
13577: PPUSH
13578: PPUSH
13579: PPUSH
13580: PPUSH
13581: PPUSH
13582: PPUSH
13583: PPUSH
13584: PPUSH
// result := false ;
13585: LD_ADDR_VAR 0 3
13589: PUSH
13590: LD_INT 0
13592: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
13593: LD_VAR 0 1
13597: NOT
13598: IFTRUE 13623
13600: PUSH
13601: LD_VAR 0 1
13605: PPUSH
13606: CALL_OW 266
13610: PUSH
13611: LD_INT 32
13613: PUSH
13614: LD_INT 33
13616: PUSH
13617: EMPTY
13618: LIST
13619: LIST
13620: IN
13621: NOT
13622: OR
13623: IFFALSE 13627
// exit ;
13625: GO 14762
// nat := GetNation ( tower ) ;
13627: LD_ADDR_VAR 0 12
13631: PUSH
13632: LD_VAR 0 1
13636: PPUSH
13637: CALL_OW 248
13641: ST_TO_ADDR
// side := GetSide ( tower ) ;
13642: LD_ADDR_VAR 0 16
13646: PUSH
13647: LD_VAR 0 1
13651: PPUSH
13652: CALL_OW 255
13656: ST_TO_ADDR
// x := GetX ( tower ) ;
13657: LD_ADDR_VAR 0 10
13661: PUSH
13662: LD_VAR 0 1
13666: PPUSH
13667: CALL_OW 250
13671: ST_TO_ADDR
// y := GetY ( tower ) ;
13672: LD_ADDR_VAR 0 11
13676: PUSH
13677: LD_VAR 0 1
13681: PPUSH
13682: CALL_OW 251
13686: ST_TO_ADDR
// if not x or not y then
13687: LD_VAR 0 10
13691: NOT
13692: IFTRUE 13701
13694: PUSH
13695: LD_VAR 0 11
13699: NOT
13700: OR
13701: IFFALSE 13705
// exit ;
13703: GO 14762
// weapon := 0 ;
13705: LD_ADDR_VAR 0 18
13709: PUSH
13710: LD_INT 0
13712: ST_TO_ADDR
// fac_list := [ ] ;
13713: LD_ADDR_VAR 0 17
13717: PUSH
13718: EMPTY
13719: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
13720: LD_ADDR_VAR 0 6
13724: PUSH
13725: LD_VAR 0 1
13729: PPUSH
13730: CALL_OW 274
13734: PPUSH
13735: LD_VAR 0 2
13739: PPUSH
13740: LD_INT 0
13742: PPUSH
13743: CALL 11297 0 3
13747: PPUSH
13748: LD_INT 30
13750: PUSH
13751: LD_INT 3
13753: PUSH
13754: EMPTY
13755: LIST
13756: LIST
13757: PPUSH
13758: CALL_OW 72
13762: ST_TO_ADDR
// if not factories then
13763: LD_VAR 0 6
13767: NOT
13768: IFFALSE 13772
// exit ;
13770: GO 14762
// for i in factories do
13772: LD_ADDR_VAR 0 8
13776: PUSH
13777: LD_VAR 0 6
13781: PUSH
13782: FOR_IN
13783: IFFALSE 13808
// fac_list := fac_list union AvailableWeaponList ( i ) ;
13785: LD_ADDR_VAR 0 17
13789: PUSH
13790: LD_VAR 0 17
13794: PUSH
13795: LD_VAR 0 8
13799: PPUSH
13800: CALL_OW 478
13804: UNION
13805: ST_TO_ADDR
13806: GO 13782
13808: POP
13809: POP
// if not fac_list then
13810: LD_VAR 0 17
13814: NOT
13815: IFFALSE 13819
// exit ;
13817: GO 14762
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
13819: LD_ADDR_VAR 0 5
13823: PUSH
13824: LD_INT 4
13826: PUSH
13827: LD_INT 5
13829: PUSH
13830: LD_INT 9
13832: PUSH
13833: LD_INT 10
13835: PUSH
13836: LD_INT 6
13838: PUSH
13839: LD_INT 7
13841: PUSH
13842: LD_INT 11
13844: PUSH
13845: EMPTY
13846: LIST
13847: LIST
13848: LIST
13849: LIST
13850: LIST
13851: LIST
13852: LIST
13853: PUSH
13854: LD_INT 27
13856: PUSH
13857: LD_INT 28
13859: PUSH
13860: LD_INT 26
13862: PUSH
13863: LD_INT 30
13865: PUSH
13866: EMPTY
13867: LIST
13868: LIST
13869: LIST
13870: LIST
13871: PUSH
13872: LD_INT 43
13874: PUSH
13875: LD_INT 44
13877: PUSH
13878: LD_INT 46
13880: PUSH
13881: LD_INT 45
13883: PUSH
13884: LD_INT 47
13886: PUSH
13887: LD_INT 49
13889: PUSH
13890: EMPTY
13891: LIST
13892: LIST
13893: LIST
13894: LIST
13895: LIST
13896: LIST
13897: PUSH
13898: EMPTY
13899: LIST
13900: LIST
13901: LIST
13902: PUSH
13903: LD_VAR 0 12
13907: ARRAY
13908: ST_TO_ADDR
// list := list isect fac_list ;
13909: LD_ADDR_VAR 0 5
13913: PUSH
13914: LD_VAR 0 5
13918: PUSH
13919: LD_VAR 0 17
13923: ISECT
13924: ST_TO_ADDR
// if not list then
13925: LD_VAR 0 5
13929: NOT
13930: IFFALSE 13934
// exit ;
13932: GO 14762
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
13934: LD_VAR 0 12
13938: PUSH
13939: LD_INT 3
13941: EQUAL
13942: IFFALSE 13954
13944: PUSH
13945: LD_INT 49
13947: PUSH
13948: LD_VAR 0 5
13952: IN
13953: AND
13954: IFFALSE 13974
13956: PUSH
13957: LD_INT 31
13959: PPUSH
13960: LD_VAR 0 16
13964: PPUSH
13965: CALL_OW 321
13969: PUSH
13970: LD_INT 2
13972: EQUAL
13973: AND
13974: IFFALSE 14034
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
13976: LD_INT 22
13978: PUSH
13979: LD_VAR 0 16
13983: PUSH
13984: EMPTY
13985: LIST
13986: LIST
13987: PUSH
13988: LD_INT 35
13990: PUSH
13991: LD_INT 49
13993: PUSH
13994: EMPTY
13995: LIST
13996: LIST
13997: PUSH
13998: LD_INT 91
14000: PUSH
14001: LD_VAR 0 1
14005: PUSH
14006: LD_INT 10
14008: PUSH
14009: EMPTY
14010: LIST
14011: LIST
14012: LIST
14013: PUSH
14014: EMPTY
14015: LIST
14016: LIST
14017: LIST
14018: PPUSH
14019: CALL_OW 69
14023: NOT
14024: IFFALSE 14034
// weapon := ru_time_lapser ;
14026: LD_ADDR_VAR 0 18
14030: PUSH
14031: LD_INT 49
14033: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
14034: LD_VAR 0 12
14038: PUSH
14039: LD_INT 1
14041: PUSH
14042: LD_INT 2
14044: PUSH
14045: EMPTY
14046: LIST
14047: LIST
14048: IN
14049: IFFALSE 14073
14051: PUSH
14052: LD_INT 11
14054: PUSH
14055: LD_VAR 0 5
14059: IN
14060: IFTRUE 14072
14062: PUSH
14063: LD_INT 30
14065: PUSH
14066: LD_VAR 0 5
14070: IN
14071: OR
14072: AND
14073: IFFALSE 14093
14075: PUSH
14076: LD_INT 6
14078: PPUSH
14079: LD_VAR 0 16
14083: PPUSH
14084: CALL_OW 321
14088: PUSH
14089: LD_INT 2
14091: EQUAL
14092: AND
14093: IFFALSE 14260
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
14095: LD_INT 22
14097: PUSH
14098: LD_VAR 0 16
14102: PUSH
14103: EMPTY
14104: LIST
14105: LIST
14106: PUSH
14107: LD_INT 2
14109: PUSH
14110: LD_INT 35
14112: PUSH
14113: LD_INT 11
14115: PUSH
14116: EMPTY
14117: LIST
14118: LIST
14119: PUSH
14120: LD_INT 35
14122: PUSH
14123: LD_INT 30
14125: PUSH
14126: EMPTY
14127: LIST
14128: LIST
14129: PUSH
14130: EMPTY
14131: LIST
14132: LIST
14133: LIST
14134: PUSH
14135: LD_INT 91
14137: PUSH
14138: LD_VAR 0 1
14142: PUSH
14143: LD_INT 18
14145: PUSH
14146: EMPTY
14147: LIST
14148: LIST
14149: LIST
14150: PUSH
14151: EMPTY
14152: LIST
14153: LIST
14154: LIST
14155: PPUSH
14156: CALL_OW 69
14160: NOT
14161: IFFALSE 14237
14163: PUSH
14164: LD_INT 22
14166: PUSH
14167: LD_VAR 0 16
14171: PUSH
14172: EMPTY
14173: LIST
14174: LIST
14175: PUSH
14176: LD_INT 2
14178: PUSH
14179: LD_INT 30
14181: PUSH
14182: LD_INT 32
14184: PUSH
14185: EMPTY
14186: LIST
14187: LIST
14188: PUSH
14189: LD_INT 30
14191: PUSH
14192: LD_INT 33
14194: PUSH
14195: EMPTY
14196: LIST
14197: LIST
14198: PUSH
14199: EMPTY
14200: LIST
14201: LIST
14202: LIST
14203: PUSH
14204: LD_INT 91
14206: PUSH
14207: LD_VAR 0 1
14211: PUSH
14212: LD_INT 12
14214: PUSH
14215: EMPTY
14216: LIST
14217: LIST
14218: LIST
14219: PUSH
14220: EMPTY
14221: LIST
14222: LIST
14223: LIST
14224: PUSH
14225: EMPTY
14226: LIST
14227: PPUSH
14228: CALL_OW 69
14232: PUSH
14233: LD_INT 2
14235: GREATER
14236: AND
14237: IFFALSE 14260
// weapon := [ us_radar , ar_radar ] [ nat ] ;
14239: LD_ADDR_VAR 0 18
14243: PUSH
14244: LD_INT 11
14246: PUSH
14247: LD_INT 30
14249: PUSH
14250: EMPTY
14251: LIST
14252: LIST
14253: PUSH
14254: LD_VAR 0 12
14258: ARRAY
14259: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
14260: LD_VAR 0 18
14264: NOT
14265: IFFALSE 14285
14267: PUSH
14268: LD_INT 40
14270: PPUSH
14271: LD_VAR 0 16
14275: PPUSH
14276: CALL_OW 321
14280: PUSH
14281: LD_INT 2
14283: EQUAL
14284: AND
14285: IFFALSE 14321
14287: PUSH
14288: LD_INT 7
14290: PUSH
14291: LD_VAR 0 5
14295: IN
14296: IFTRUE 14308
14298: PUSH
14299: LD_INT 28
14301: PUSH
14302: LD_VAR 0 5
14306: IN
14307: OR
14308: IFTRUE 14320
14310: PUSH
14311: LD_INT 45
14313: PUSH
14314: LD_VAR 0 5
14318: IN
14319: OR
14320: AND
14321: IFFALSE 14575
// begin hex := GetHexInfo ( x , y ) ;
14323: LD_ADDR_VAR 0 4
14327: PUSH
14328: LD_VAR 0 10
14332: PPUSH
14333: LD_VAR 0 11
14337: PPUSH
14338: CALL_OW 546
14342: ST_TO_ADDR
// if hex [ 1 ] then
14343: LD_VAR 0 4
14347: PUSH
14348: LD_INT 1
14350: ARRAY
14351: IFFALSE 14355
// exit ;
14353: GO 14762
// height := hex [ 2 ] ;
14355: LD_ADDR_VAR 0 15
14359: PUSH
14360: LD_VAR 0 4
14364: PUSH
14365: LD_INT 2
14367: ARRAY
14368: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
14369: LD_ADDR_VAR 0 14
14373: PUSH
14374: LD_INT 0
14376: PUSH
14377: LD_INT 2
14379: PUSH
14380: LD_INT 3
14382: PUSH
14383: LD_INT 5
14385: PUSH
14386: EMPTY
14387: LIST
14388: LIST
14389: LIST
14390: LIST
14391: ST_TO_ADDR
// for i in tmp do
14392: LD_ADDR_VAR 0 8
14396: PUSH
14397: LD_VAR 0 14
14401: PUSH
14402: FOR_IN
14403: IFFALSE 14573
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
14405: LD_ADDR_VAR 0 9
14409: PUSH
14410: LD_VAR 0 10
14414: PPUSH
14415: LD_VAR 0 8
14419: PPUSH
14420: LD_INT 5
14422: PPUSH
14423: CALL_OW 272
14427: PUSH
14428: LD_VAR 0 11
14432: PPUSH
14433: LD_VAR 0 8
14437: PPUSH
14438: LD_INT 5
14440: PPUSH
14441: CALL_OW 273
14445: PUSH
14446: EMPTY
14447: LIST
14448: LIST
14449: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
14450: LD_VAR 0 9
14454: PUSH
14455: LD_INT 1
14457: ARRAY
14458: PPUSH
14459: LD_VAR 0 9
14463: PUSH
14464: LD_INT 2
14466: ARRAY
14467: PPUSH
14468: CALL_OW 488
14472: IFFALSE 14571
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
14474: LD_ADDR_VAR 0 4
14478: PUSH
14479: LD_VAR 0 9
14483: PUSH
14484: LD_INT 1
14486: ARRAY
14487: PPUSH
14488: LD_VAR 0 9
14492: PUSH
14493: LD_INT 2
14495: ARRAY
14496: PPUSH
14497: CALL_OW 546
14501: ST_TO_ADDR
// if hex [ 1 ] then
14502: LD_VAR 0 4
14506: PUSH
14507: LD_INT 1
14509: ARRAY
14510: IFFALSE 14514
// continue ;
14512: GO 14402
// h := hex [ 2 ] ;
14514: LD_ADDR_VAR 0 13
14518: PUSH
14519: LD_VAR 0 4
14523: PUSH
14524: LD_INT 2
14526: ARRAY
14527: ST_TO_ADDR
// if h + 7 < height then
14528: LD_VAR 0 13
14532: PUSH
14533: LD_INT 7
14535: PLUS
14536: PUSH
14537: LD_VAR 0 15
14541: LESS
14542: IFFALSE 14571
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
14544: LD_ADDR_VAR 0 18
14548: PUSH
14549: LD_INT 7
14551: PUSH
14552: LD_INT 28
14554: PUSH
14555: LD_INT 45
14557: PUSH
14558: EMPTY
14559: LIST
14560: LIST
14561: LIST
14562: PUSH
14563: LD_VAR 0 12
14567: ARRAY
14568: ST_TO_ADDR
// break ;
14569: GO 14573
// end ; end ; end ;
14571: GO 14402
14573: POP
14574: POP
// end ; if not weapon then
14575: LD_VAR 0 18
14579: NOT
14580: IFFALSE 14640
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
14582: LD_ADDR_VAR 0 5
14586: PUSH
14587: LD_VAR 0 5
14591: PUSH
14592: LD_INT 11
14594: PUSH
14595: LD_INT 30
14597: PUSH
14598: LD_INT 49
14600: PUSH
14601: EMPTY
14602: LIST
14603: LIST
14604: LIST
14605: DIFF
14606: ST_TO_ADDR
// if not list then
14607: LD_VAR 0 5
14611: NOT
14612: IFFALSE 14616
// exit ;
14614: GO 14762
// weapon := list [ rand ( 1 , list ) ] ;
14616: LD_ADDR_VAR 0 18
14620: PUSH
14621: LD_VAR 0 5
14625: PUSH
14626: LD_INT 1
14628: PPUSH
14629: LD_VAR 0 5
14633: PPUSH
14634: CALL_OW 12
14638: ARRAY
14639: ST_TO_ADDR
// end ; if weapon then
14640: LD_VAR 0 18
14644: IFFALSE 14762
// begin tmp := CostOfWeapon ( weapon ) ;
14646: LD_ADDR_VAR 0 14
14650: PUSH
14651: LD_VAR 0 18
14655: PPUSH
14656: CALL_OW 451
14660: ST_TO_ADDR
// j := GetBase ( tower ) ;
14661: LD_ADDR_VAR 0 9
14665: PUSH
14666: LD_VAR 0 1
14670: PPUSH
14671: CALL_OW 274
14675: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
14676: LD_VAR 0 9
14680: PPUSH
14681: LD_INT 1
14683: PPUSH
14684: CALL_OW 275
14688: PUSH
14689: LD_VAR 0 14
14693: PUSH
14694: LD_INT 1
14696: ARRAY
14697: GREATEREQUAL
14698: IFFALSE 14724
14700: PUSH
14701: LD_VAR 0 9
14705: PPUSH
14706: LD_INT 2
14708: PPUSH
14709: CALL_OW 275
14713: PUSH
14714: LD_VAR 0 14
14718: PUSH
14719: LD_INT 2
14721: ARRAY
14722: GREATEREQUAL
14723: AND
14724: IFFALSE 14750
14726: PUSH
14727: LD_VAR 0 9
14731: PPUSH
14732: LD_INT 3
14734: PPUSH
14735: CALL_OW 275
14739: PUSH
14740: LD_VAR 0 14
14744: PUSH
14745: LD_INT 3
14747: ARRAY
14748: GREATEREQUAL
14749: AND
14750: IFFALSE 14762
// result := weapon ;
14752: LD_ADDR_VAR 0 3
14756: PUSH
14757: LD_VAR 0 18
14761: ST_TO_ADDR
// end ; end ;
14762: LD_VAR 0 3
14766: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
14767: LD_INT 0
14769: PPUSH
14770: PPUSH
// result := true ;
14771: LD_ADDR_VAR 0 3
14775: PUSH
14776: LD_INT 1
14778: ST_TO_ADDR
// if array1 = array2 then
14779: LD_VAR 0 1
14783: PUSH
14784: LD_VAR 0 2
14788: EQUAL
14789: IFFALSE 14849
// begin for i = 1 to array1 do
14791: LD_ADDR_VAR 0 4
14795: PUSH
14796: DOUBLE
14797: LD_INT 1
14799: DEC
14800: ST_TO_ADDR
14801: LD_VAR 0 1
14805: PUSH
14806: FOR_TO
14807: IFFALSE 14845
// if array1 [ i ] <> array2 [ i ] then
14809: LD_VAR 0 1
14813: PUSH
14814: LD_VAR 0 4
14818: ARRAY
14819: PUSH
14820: LD_VAR 0 2
14824: PUSH
14825: LD_VAR 0 4
14829: ARRAY
14830: NONEQUAL
14831: IFFALSE 14843
// begin result := false ;
14833: LD_ADDR_VAR 0 3
14837: PUSH
14838: LD_INT 0
14840: ST_TO_ADDR
// break ;
14841: GO 14845
// end ;
14843: GO 14806
14845: POP
14846: POP
// end else
14847: GO 14857
// result := false ;
14849: LD_ADDR_VAR 0 3
14853: PUSH
14854: LD_INT 0
14856: ST_TO_ADDR
// end ;
14857: LD_VAR 0 3
14861: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
14862: LD_INT 0
14864: PPUSH
14865: PPUSH
// if not array1 or not array2 then
14866: LD_VAR 0 1
14870: NOT
14871: IFTRUE 14880
14873: PUSH
14874: LD_VAR 0 2
14878: NOT
14879: OR
14880: IFFALSE 14884
// exit ;
14882: GO 14948
// result := true ;
14884: LD_ADDR_VAR 0 3
14888: PUSH
14889: LD_INT 1
14891: ST_TO_ADDR
// for i = 1 to array1 do
14892: LD_ADDR_VAR 0 4
14896: PUSH
14897: DOUBLE
14898: LD_INT 1
14900: DEC
14901: ST_TO_ADDR
14902: LD_VAR 0 1
14906: PUSH
14907: FOR_TO
14908: IFFALSE 14946
// if array1 [ i ] <> array2 [ i ] then
14910: LD_VAR 0 1
14914: PUSH
14915: LD_VAR 0 4
14919: ARRAY
14920: PUSH
14921: LD_VAR 0 2
14925: PUSH
14926: LD_VAR 0 4
14930: ARRAY
14931: NONEQUAL
14932: IFFALSE 14944
// begin result := false ;
14934: LD_ADDR_VAR 0 3
14938: PUSH
14939: LD_INT 0
14941: ST_TO_ADDR
// break ;
14942: GO 14946
// end ;
14944: GO 14907
14946: POP
14947: POP
// end ;
14948: LD_VAR 0 3
14952: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
14953: LD_INT 0
14955: PPUSH
14956: PPUSH
14957: PPUSH
// pom := GetBase ( fac ) ;
14958: LD_ADDR_VAR 0 5
14962: PUSH
14963: LD_VAR 0 1
14967: PPUSH
14968: CALL_OW 274
14972: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
14973: LD_ADDR_VAR 0 4
14977: PUSH
14978: LD_VAR 0 2
14982: PUSH
14983: LD_INT 1
14985: ARRAY
14986: PPUSH
14987: LD_VAR 0 2
14991: PUSH
14992: LD_INT 2
14994: ARRAY
14995: PPUSH
14996: LD_VAR 0 2
15000: PUSH
15001: LD_INT 3
15003: ARRAY
15004: PPUSH
15005: LD_VAR 0 2
15009: PUSH
15010: LD_INT 4
15012: ARRAY
15013: PPUSH
15014: CALL_OW 449
15018: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15019: LD_ADDR_VAR 0 3
15023: PUSH
15024: LD_VAR 0 5
15028: PPUSH
15029: LD_INT 1
15031: PPUSH
15032: CALL_OW 275
15036: PUSH
15037: LD_VAR 0 4
15041: PUSH
15042: LD_INT 1
15044: ARRAY
15045: GREATEREQUAL
15046: IFFALSE 15072
15048: PUSH
15049: LD_VAR 0 5
15053: PPUSH
15054: LD_INT 2
15056: PPUSH
15057: CALL_OW 275
15061: PUSH
15062: LD_VAR 0 4
15066: PUSH
15067: LD_INT 2
15069: ARRAY
15070: GREATEREQUAL
15071: AND
15072: IFFALSE 15098
15074: PUSH
15075: LD_VAR 0 5
15079: PPUSH
15080: LD_INT 3
15082: PPUSH
15083: CALL_OW 275
15087: PUSH
15088: LD_VAR 0 4
15092: PUSH
15093: LD_INT 3
15095: ARRAY
15096: GREATEREQUAL
15097: AND
15098: ST_TO_ADDR
// end ;
15099: LD_VAR 0 3
15103: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
15104: LD_INT 0
15106: PPUSH
15107: PPUSH
15108: PPUSH
15109: PPUSH
// pom := GetBase ( building ) ;
15110: LD_ADDR_VAR 0 3
15114: PUSH
15115: LD_VAR 0 1
15119: PPUSH
15120: CALL_OW 274
15124: ST_TO_ADDR
// if not pom then
15125: LD_VAR 0 3
15129: NOT
15130: IFFALSE 15134
// exit ;
15132: GO 15308
// btype := GetBType ( building ) ;
15134: LD_ADDR_VAR 0 5
15138: PUSH
15139: LD_VAR 0 1
15143: PPUSH
15144: CALL_OW 266
15148: ST_TO_ADDR
// if btype = b_armoury then
15149: LD_VAR 0 5
15153: PUSH
15154: LD_INT 4
15156: EQUAL
15157: IFFALSE 15167
// btype := b_barracks ;
15159: LD_ADDR_VAR 0 5
15163: PUSH
15164: LD_INT 5
15166: ST_TO_ADDR
// if btype = b_depot then
15167: LD_VAR 0 5
15171: PUSH
15172: LD_INT 0
15174: EQUAL
15175: IFFALSE 15185
// btype := b_warehouse ;
15177: LD_ADDR_VAR 0 5
15181: PUSH
15182: LD_INT 1
15184: ST_TO_ADDR
// if btype = b_workshop then
15185: LD_VAR 0 5
15189: PUSH
15190: LD_INT 2
15192: EQUAL
15193: IFFALSE 15203
// btype := b_factory ;
15195: LD_ADDR_VAR 0 5
15199: PUSH
15200: LD_INT 3
15202: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15203: LD_ADDR_VAR 0 4
15207: PUSH
15208: LD_VAR 0 5
15212: PPUSH
15213: LD_VAR 0 1
15217: PPUSH
15218: CALL_OW 248
15222: PPUSH
15223: CALL_OW 450
15227: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15228: LD_ADDR_VAR 0 2
15232: PUSH
15233: LD_VAR 0 3
15237: PPUSH
15238: LD_INT 1
15240: PPUSH
15241: CALL_OW 275
15245: PUSH
15246: LD_VAR 0 4
15250: PUSH
15251: LD_INT 1
15253: ARRAY
15254: GREATEREQUAL
15255: IFFALSE 15281
15257: PUSH
15258: LD_VAR 0 3
15262: PPUSH
15263: LD_INT 2
15265: PPUSH
15266: CALL_OW 275
15270: PUSH
15271: LD_VAR 0 4
15275: PUSH
15276: LD_INT 2
15278: ARRAY
15279: GREATEREQUAL
15280: AND
15281: IFFALSE 15307
15283: PUSH
15284: LD_VAR 0 3
15288: PPUSH
15289: LD_INT 3
15291: PPUSH
15292: CALL_OW 275
15296: PUSH
15297: LD_VAR 0 4
15301: PUSH
15302: LD_INT 3
15304: ARRAY
15305: GREATEREQUAL
15306: AND
15307: ST_TO_ADDR
// end ;
15308: LD_VAR 0 2
15312: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
15313: LD_INT 0
15315: PPUSH
15316: PPUSH
15317: PPUSH
// pom := GetBase ( building ) ;
15318: LD_ADDR_VAR 0 4
15322: PUSH
15323: LD_VAR 0 1
15327: PPUSH
15328: CALL_OW 274
15332: ST_TO_ADDR
// if not pom then
15333: LD_VAR 0 4
15337: NOT
15338: IFFALSE 15342
// exit ;
15340: GO 15447
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15342: LD_ADDR_VAR 0 5
15346: PUSH
15347: LD_VAR 0 2
15351: PPUSH
15352: LD_VAR 0 1
15356: PPUSH
15357: CALL_OW 248
15361: PPUSH
15362: CALL_OW 450
15366: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15367: LD_ADDR_VAR 0 3
15371: PUSH
15372: LD_VAR 0 4
15376: PPUSH
15377: LD_INT 1
15379: PPUSH
15380: CALL_OW 275
15384: PUSH
15385: LD_VAR 0 5
15389: PUSH
15390: LD_INT 1
15392: ARRAY
15393: GREATEREQUAL
15394: IFFALSE 15420
15396: PUSH
15397: LD_VAR 0 4
15401: PPUSH
15402: LD_INT 2
15404: PPUSH
15405: CALL_OW 275
15409: PUSH
15410: LD_VAR 0 5
15414: PUSH
15415: LD_INT 2
15417: ARRAY
15418: GREATEREQUAL
15419: AND
15420: IFFALSE 15446
15422: PUSH
15423: LD_VAR 0 4
15427: PPUSH
15428: LD_INT 3
15430: PPUSH
15431: CALL_OW 275
15435: PUSH
15436: LD_VAR 0 5
15440: PUSH
15441: LD_INT 3
15443: ARRAY
15444: GREATEREQUAL
15445: AND
15446: ST_TO_ADDR
// end ;
15447: LD_VAR 0 3
15451: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
15452: LD_INT 0
15454: PPUSH
15455: PPUSH
15456: PPUSH
15457: PPUSH
15458: PPUSH
15459: PPUSH
15460: PPUSH
15461: PPUSH
15462: PPUSH
15463: PPUSH
15464: PPUSH
// result := false ;
15465: LD_ADDR_VAR 0 8
15469: PUSH
15470: LD_INT 0
15472: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
15473: LD_VAR 0 5
15477: NOT
15478: IFTRUE 15487
15480: PUSH
15481: LD_VAR 0 1
15485: NOT
15486: OR
15487: IFTRUE 15496
15489: PUSH
15490: LD_VAR 0 2
15494: NOT
15495: OR
15496: IFTRUE 15505
15498: PUSH
15499: LD_VAR 0 3
15503: NOT
15504: OR
15505: IFFALSE 15509
// exit ;
15507: GO 16335
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
15509: LD_ADDR_VAR 0 14
15513: PUSH
15514: LD_VAR 0 1
15518: PPUSH
15519: LD_VAR 0 2
15523: PPUSH
15524: LD_VAR 0 3
15528: PPUSH
15529: LD_VAR 0 4
15533: PPUSH
15534: LD_VAR 0 5
15538: PUSH
15539: LD_INT 1
15541: ARRAY
15542: PPUSH
15543: CALL_OW 248
15547: PPUSH
15548: LD_INT 0
15550: PPUSH
15551: CALL 17616 0 6
15555: ST_TO_ADDR
// if not hexes then
15556: LD_VAR 0 14
15560: NOT
15561: IFFALSE 15565
// exit ;
15563: GO 16335
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15565: LD_ADDR_VAR 0 17
15569: PUSH
15570: LD_VAR 0 5
15574: PPUSH
15575: LD_INT 22
15577: PUSH
15578: LD_VAR 0 13
15582: PPUSH
15583: CALL_OW 255
15587: PUSH
15588: EMPTY
15589: LIST
15590: LIST
15591: PUSH
15592: LD_INT 2
15594: PUSH
15595: LD_INT 30
15597: PUSH
15598: LD_INT 0
15600: PUSH
15601: EMPTY
15602: LIST
15603: LIST
15604: PUSH
15605: LD_INT 30
15607: PUSH
15608: LD_INT 1
15610: PUSH
15611: EMPTY
15612: LIST
15613: LIST
15614: PUSH
15615: EMPTY
15616: LIST
15617: LIST
15618: LIST
15619: PUSH
15620: EMPTY
15621: LIST
15622: LIST
15623: PPUSH
15624: CALL_OW 72
15628: ST_TO_ADDR
// for i = 1 to hexes do
15629: LD_ADDR_VAR 0 9
15633: PUSH
15634: DOUBLE
15635: LD_INT 1
15637: DEC
15638: ST_TO_ADDR
15639: LD_VAR 0 14
15643: PUSH
15644: FOR_TO
15645: IFFALSE 16333
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15647: LD_ADDR_VAR 0 13
15651: PUSH
15652: LD_VAR 0 14
15656: PUSH
15657: LD_VAR 0 9
15661: ARRAY
15662: PUSH
15663: LD_INT 1
15665: ARRAY
15666: PPUSH
15667: LD_VAR 0 14
15671: PUSH
15672: LD_VAR 0 9
15676: ARRAY
15677: PUSH
15678: LD_INT 2
15680: ARRAY
15681: PPUSH
15682: CALL_OW 428
15686: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
15687: LD_VAR 0 14
15691: PUSH
15692: LD_VAR 0 9
15696: ARRAY
15697: PUSH
15698: LD_INT 1
15700: ARRAY
15701: PPUSH
15702: LD_VAR 0 14
15706: PUSH
15707: LD_VAR 0 9
15711: ARRAY
15712: PUSH
15713: LD_INT 2
15715: ARRAY
15716: PPUSH
15717: CALL_OW 351
15721: IFTRUE 15760
15723: PUSH
15724: LD_VAR 0 14
15728: PUSH
15729: LD_VAR 0 9
15733: ARRAY
15734: PUSH
15735: LD_INT 1
15737: ARRAY
15738: PPUSH
15739: LD_VAR 0 14
15743: PUSH
15744: LD_VAR 0 9
15748: ARRAY
15749: PUSH
15750: LD_INT 2
15752: ARRAY
15753: PPUSH
15754: CALL_OW 488
15758: NOT
15759: OR
15760: IFTRUE 15777
15762: PUSH
15763: LD_VAR 0 13
15767: PPUSH
15768: CALL_OW 247
15772: PUSH
15773: LD_INT 3
15775: EQUAL
15776: OR
15777: IFFALSE 15783
// exit ;
15779: POP
15780: POP
15781: GO 16335
// if not tmp then
15783: LD_VAR 0 13
15787: NOT
15788: IFFALSE 15792
// continue ;
15790: GO 15644
// result := true ;
15792: LD_ADDR_VAR 0 8
15796: PUSH
15797: LD_INT 1
15799: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
15800: LD_VAR 0 6
15804: IFFALSE 15821
15806: PUSH
15807: LD_VAR 0 13
15811: PPUSH
15812: CALL_OW 247
15816: PUSH
15817: LD_INT 2
15819: EQUAL
15820: AND
15821: IFFALSE 15838
15823: PUSH
15824: LD_VAR 0 13
15828: PPUSH
15829: CALL_OW 263
15833: PUSH
15834: LD_INT 1
15836: EQUAL
15837: AND
15838: IFFALSE 16002
// begin if IsDrivenBy ( tmp ) then
15840: LD_VAR 0 13
15844: PPUSH
15845: CALL_OW 311
15849: IFFALSE 15853
// continue ;
15851: GO 15644
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
15853: LD_VAR 0 6
15857: PPUSH
15858: LD_INT 3
15860: PUSH
15861: LD_INT 60
15863: PUSH
15864: EMPTY
15865: LIST
15866: PUSH
15867: EMPTY
15868: LIST
15869: LIST
15870: PUSH
15871: LD_INT 3
15873: PUSH
15874: LD_INT 55
15876: PUSH
15877: EMPTY
15878: LIST
15879: PUSH
15880: EMPTY
15881: LIST
15882: LIST
15883: PUSH
15884: EMPTY
15885: LIST
15886: LIST
15887: PPUSH
15888: CALL_OW 72
15892: IFFALSE 16000
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
15894: LD_ADDR_VAR 0 18
15898: PUSH
15899: LD_VAR 0 6
15903: PPUSH
15904: LD_INT 3
15906: PUSH
15907: LD_INT 60
15909: PUSH
15910: EMPTY
15911: LIST
15912: PUSH
15913: EMPTY
15914: LIST
15915: LIST
15916: PUSH
15917: LD_INT 3
15919: PUSH
15920: LD_INT 55
15922: PUSH
15923: EMPTY
15924: LIST
15925: PUSH
15926: EMPTY
15927: LIST
15928: LIST
15929: PUSH
15930: EMPTY
15931: LIST
15932: LIST
15933: PPUSH
15934: CALL_OW 72
15938: PUSH
15939: LD_INT 1
15941: ARRAY
15942: ST_TO_ADDR
// if IsInUnit ( driver ) then
15943: LD_VAR 0 18
15947: PPUSH
15948: CALL_OW 310
15952: IFFALSE 15963
// ComExit ( driver ) ;
15954: LD_VAR 0 18
15958: PPUSH
15959: CALL 41616 0 1
// AddComEnterUnit ( driver , tmp ) ;
15963: LD_VAR 0 18
15967: PPUSH
15968: LD_VAR 0 13
15972: PPUSH
15973: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
15977: LD_VAR 0 18
15981: PPUSH
15982: LD_VAR 0 7
15986: PPUSH
15987: CALL_OW 173
// AddComExitVehicle ( driver ) ;
15991: LD_VAR 0 18
15995: PPUSH
15996: CALL_OW 181
// end ; continue ;
16000: GO 15644
// end ; if not cleaners or not tmp in cleaners then
16002: LD_VAR 0 6
16006: NOT
16007: IFTRUE 16022
16009: PUSH
16010: LD_VAR 0 13
16014: PUSH
16015: LD_VAR 0 6
16019: IN
16020: NOT
16021: OR
16022: IFFALSE 16331
// begin if dep then
16024: LD_VAR 0 17
16028: IFFALSE 16164
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
16030: LD_ADDR_VAR 0 16
16034: PUSH
16035: LD_VAR 0 17
16039: PUSH
16040: LD_INT 1
16042: ARRAY
16043: PPUSH
16044: CALL_OW 250
16048: PPUSH
16049: LD_VAR 0 17
16053: PUSH
16054: LD_INT 1
16056: ARRAY
16057: PPUSH
16058: CALL_OW 254
16062: PPUSH
16063: LD_INT 5
16065: PPUSH
16066: CALL_OW 272
16070: PUSH
16071: LD_VAR 0 17
16075: PUSH
16076: LD_INT 1
16078: ARRAY
16079: PPUSH
16080: CALL_OW 251
16084: PPUSH
16085: LD_VAR 0 17
16089: PUSH
16090: LD_INT 1
16092: ARRAY
16093: PPUSH
16094: CALL_OW 254
16098: PPUSH
16099: LD_INT 5
16101: PPUSH
16102: CALL_OW 273
16106: PUSH
16107: EMPTY
16108: LIST
16109: LIST
16110: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
16111: LD_VAR 0 16
16115: PUSH
16116: LD_INT 1
16118: ARRAY
16119: PPUSH
16120: LD_VAR 0 16
16124: PUSH
16125: LD_INT 2
16127: ARRAY
16128: PPUSH
16129: CALL_OW 488
16133: IFFALSE 16164
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
16135: LD_VAR 0 13
16139: PPUSH
16140: LD_VAR 0 16
16144: PUSH
16145: LD_INT 1
16147: ARRAY
16148: PPUSH
16149: LD_VAR 0 16
16153: PUSH
16154: LD_INT 2
16156: ARRAY
16157: PPUSH
16158: CALL_OW 111
// continue ;
16162: GO 15644
// end ; end ; r := GetDir ( tmp ) ;
16164: LD_ADDR_VAR 0 15
16168: PUSH
16169: LD_VAR 0 13
16173: PPUSH
16174: CALL_OW 254
16178: ST_TO_ADDR
// if r = 5 then
16179: LD_VAR 0 15
16183: PUSH
16184: LD_INT 5
16186: EQUAL
16187: IFFALSE 16197
// r := 0 ;
16189: LD_ADDR_VAR 0 15
16193: PUSH
16194: LD_INT 0
16196: ST_TO_ADDR
// for j = r to 5 do
16197: LD_ADDR_VAR 0 10
16201: PUSH
16202: DOUBLE
16203: LD_VAR 0 15
16207: DEC
16208: ST_TO_ADDR
16209: LD_INT 5
16211: PUSH
16212: FOR_TO
16213: IFFALSE 16329
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
16215: LD_ADDR_VAR 0 11
16219: PUSH
16220: LD_VAR 0 13
16224: PPUSH
16225: CALL_OW 250
16229: PPUSH
16230: LD_VAR 0 10
16234: PPUSH
16235: LD_INT 2
16237: PPUSH
16238: CALL_OW 272
16242: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
16243: LD_ADDR_VAR 0 12
16247: PUSH
16248: LD_VAR 0 13
16252: PPUSH
16253: CALL_OW 251
16257: PPUSH
16258: LD_VAR 0 10
16262: PPUSH
16263: LD_INT 2
16265: PPUSH
16266: CALL_OW 273
16270: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
16271: LD_VAR 0 11
16275: PPUSH
16276: LD_VAR 0 12
16280: PPUSH
16281: CALL_OW 488
16285: IFFALSE 16304
16287: PUSH
16288: LD_VAR 0 11
16292: PPUSH
16293: LD_VAR 0 12
16297: PPUSH
16298: CALL_OW 428
16302: NOT
16303: AND
16304: IFFALSE 16327
// begin ComMoveXY ( tmp , _x , _y ) ;
16306: LD_VAR 0 13
16310: PPUSH
16311: LD_VAR 0 11
16315: PPUSH
16316: LD_VAR 0 12
16320: PPUSH
16321: CALL_OW 111
// break ;
16325: GO 16329
// end ; end ;
16327: GO 16212
16329: POP
16330: POP
// end ; end ;
16331: GO 15644
16333: POP
16334: POP
// end ;
16335: LD_VAR 0 8
16339: RET
// export function BuildingTechInvented ( side , btype ) ; begin
16340: LD_INT 0
16342: PPUSH
// result := true ;
16343: LD_ADDR_VAR 0 3
16347: PUSH
16348: LD_INT 1
16350: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
16351: LD_VAR 0 2
16355: PUSH
16356: LD_INT 24
16358: DOUBLE
16359: EQUAL
16360: IFTRUE 16370
16362: LD_INT 33
16364: DOUBLE
16365: EQUAL
16366: IFTRUE 16370
16368: GO 16395
16370: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
16371: LD_ADDR_VAR 0 3
16375: PUSH
16376: LD_INT 32
16378: PPUSH
16379: LD_VAR 0 1
16383: PPUSH
16384: CALL_OW 321
16388: PUSH
16389: LD_INT 2
16391: EQUAL
16392: ST_TO_ADDR
16393: GO 16711
16395: LD_INT 20
16397: DOUBLE
16398: EQUAL
16399: IFTRUE 16403
16401: GO 16428
16403: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
16404: LD_ADDR_VAR 0 3
16408: PUSH
16409: LD_INT 6
16411: PPUSH
16412: LD_VAR 0 1
16416: PPUSH
16417: CALL_OW 321
16421: PUSH
16422: LD_INT 2
16424: EQUAL
16425: ST_TO_ADDR
16426: GO 16711
16428: LD_INT 22
16430: DOUBLE
16431: EQUAL
16432: IFTRUE 16442
16434: LD_INT 36
16436: DOUBLE
16437: EQUAL
16438: IFTRUE 16442
16440: GO 16467
16442: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
16443: LD_ADDR_VAR 0 3
16447: PUSH
16448: LD_INT 15
16450: PPUSH
16451: LD_VAR 0 1
16455: PPUSH
16456: CALL_OW 321
16460: PUSH
16461: LD_INT 2
16463: EQUAL
16464: ST_TO_ADDR
16465: GO 16711
16467: LD_INT 30
16469: DOUBLE
16470: EQUAL
16471: IFTRUE 16475
16473: GO 16500
16475: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
16476: LD_ADDR_VAR 0 3
16480: PUSH
16481: LD_INT 20
16483: PPUSH
16484: LD_VAR 0 1
16488: PPUSH
16489: CALL_OW 321
16493: PUSH
16494: LD_INT 2
16496: EQUAL
16497: ST_TO_ADDR
16498: GO 16711
16500: LD_INT 28
16502: DOUBLE
16503: EQUAL
16504: IFTRUE 16514
16506: LD_INT 21
16508: DOUBLE
16509: EQUAL
16510: IFTRUE 16514
16512: GO 16539
16514: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
16515: LD_ADDR_VAR 0 3
16519: PUSH
16520: LD_INT 21
16522: PPUSH
16523: LD_VAR 0 1
16527: PPUSH
16528: CALL_OW 321
16532: PUSH
16533: LD_INT 2
16535: EQUAL
16536: ST_TO_ADDR
16537: GO 16711
16539: LD_INT 16
16541: DOUBLE
16542: EQUAL
16543: IFTRUE 16547
16545: GO 16572
16547: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
16548: LD_ADDR_VAR 0 3
16552: PUSH
16553: LD_INT 84
16555: PPUSH
16556: LD_VAR 0 1
16560: PPUSH
16561: CALL_OW 321
16565: PUSH
16566: LD_INT 2
16568: EQUAL
16569: ST_TO_ADDR
16570: GO 16711
16572: LD_INT 19
16574: DOUBLE
16575: EQUAL
16576: IFTRUE 16586
16578: LD_INT 23
16580: DOUBLE
16581: EQUAL
16582: IFTRUE 16586
16584: GO 16611
16586: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
16587: LD_ADDR_VAR 0 3
16591: PUSH
16592: LD_INT 83
16594: PPUSH
16595: LD_VAR 0 1
16599: PPUSH
16600: CALL_OW 321
16604: PUSH
16605: LD_INT 2
16607: EQUAL
16608: ST_TO_ADDR
16609: GO 16711
16611: LD_INT 17
16613: DOUBLE
16614: EQUAL
16615: IFTRUE 16619
16617: GO 16644
16619: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
16620: LD_ADDR_VAR 0 3
16624: PUSH
16625: LD_INT 39
16627: PPUSH
16628: LD_VAR 0 1
16632: PPUSH
16633: CALL_OW 321
16637: PUSH
16638: LD_INT 2
16640: EQUAL
16641: ST_TO_ADDR
16642: GO 16711
16644: LD_INT 18
16646: DOUBLE
16647: EQUAL
16648: IFTRUE 16652
16650: GO 16677
16652: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
16653: LD_ADDR_VAR 0 3
16657: PUSH
16658: LD_INT 40
16660: PPUSH
16661: LD_VAR 0 1
16665: PPUSH
16666: CALL_OW 321
16670: PUSH
16671: LD_INT 2
16673: EQUAL
16674: ST_TO_ADDR
16675: GO 16711
16677: LD_INT 27
16679: DOUBLE
16680: EQUAL
16681: IFTRUE 16685
16683: GO 16710
16685: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
16686: LD_ADDR_VAR 0 3
16690: PUSH
16691: LD_INT 35
16693: PPUSH
16694: LD_VAR 0 1
16698: PPUSH
16699: CALL_OW 321
16703: PUSH
16704: LD_INT 2
16706: EQUAL
16707: ST_TO_ADDR
16708: GO 16711
16710: POP
// end ;
16711: LD_VAR 0 3
16715: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
16716: LD_INT 0
16718: PPUSH
16719: PPUSH
16720: PPUSH
16721: PPUSH
16722: PPUSH
16723: PPUSH
16724: PPUSH
16725: PPUSH
16726: PPUSH
16727: PPUSH
16728: PPUSH
// result := false ;
16729: LD_ADDR_VAR 0 6
16733: PUSH
16734: LD_INT 0
16736: ST_TO_ADDR
// if btype = b_depot then
16737: LD_VAR 0 2
16741: PUSH
16742: LD_INT 0
16744: EQUAL
16745: IFFALSE 16757
// begin result := true ;
16747: LD_ADDR_VAR 0 6
16751: PUSH
16752: LD_INT 1
16754: ST_TO_ADDR
// exit ;
16755: GO 17611
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
16757: LD_VAR 0 1
16761: NOT
16762: IFTRUE 16787
16764: PUSH
16765: LD_VAR 0 1
16769: PPUSH
16770: CALL_OW 266
16774: PUSH
16775: LD_INT 0
16777: PUSH
16778: LD_INT 1
16780: PUSH
16781: EMPTY
16782: LIST
16783: LIST
16784: IN
16785: NOT
16786: OR
16787: IFTRUE 16796
16789: PUSH
16790: LD_VAR 0 2
16794: NOT
16795: OR
16796: IFTRUE 16832
16798: PUSH
16799: LD_VAR 0 5
16803: PUSH
16804: LD_INT 0
16806: PUSH
16807: LD_INT 1
16809: PUSH
16810: LD_INT 2
16812: PUSH
16813: LD_INT 3
16815: PUSH
16816: LD_INT 4
16818: PUSH
16819: LD_INT 5
16821: PUSH
16822: EMPTY
16823: LIST
16824: LIST
16825: LIST
16826: LIST
16827: LIST
16828: LIST
16829: IN
16830: NOT
16831: OR
16832: IFTRUE 16851
16834: PUSH
16835: LD_VAR 0 3
16839: PPUSH
16840: LD_VAR 0 4
16844: PPUSH
16845: CALL_OW 488
16849: NOT
16850: OR
16851: IFFALSE 16855
// exit ;
16853: GO 17611
// side := GetSide ( depot ) ;
16855: LD_ADDR_VAR 0 9
16859: PUSH
16860: LD_VAR 0 1
16864: PPUSH
16865: CALL_OW 255
16869: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
16870: LD_VAR 0 9
16874: PPUSH
16875: LD_VAR 0 2
16879: PPUSH
16880: CALL 16340 0 2
16884: NOT
16885: IFFALSE 16889
// exit ;
16887: GO 17611
// pom := GetBase ( depot ) ;
16889: LD_ADDR_VAR 0 10
16893: PUSH
16894: LD_VAR 0 1
16898: PPUSH
16899: CALL_OW 274
16903: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
16904: LD_ADDR_VAR 0 11
16908: PUSH
16909: LD_VAR 0 2
16913: PPUSH
16914: LD_VAR 0 1
16918: PPUSH
16919: CALL_OW 248
16923: PPUSH
16924: CALL_OW 450
16928: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
16929: LD_VAR 0 10
16933: PPUSH
16934: LD_INT 1
16936: PPUSH
16937: CALL_OW 275
16941: PUSH
16942: LD_VAR 0 11
16946: PUSH
16947: LD_INT 1
16949: ARRAY
16950: GREATEREQUAL
16951: IFFALSE 16977
16953: PUSH
16954: LD_VAR 0 10
16958: PPUSH
16959: LD_INT 2
16961: PPUSH
16962: CALL_OW 275
16966: PUSH
16967: LD_VAR 0 11
16971: PUSH
16972: LD_INT 2
16974: ARRAY
16975: GREATEREQUAL
16976: AND
16977: IFFALSE 17003
16979: PUSH
16980: LD_VAR 0 10
16984: PPUSH
16985: LD_INT 3
16987: PPUSH
16988: CALL_OW 275
16992: PUSH
16993: LD_VAR 0 11
16997: PUSH
16998: LD_INT 3
17000: ARRAY
17001: GREATEREQUAL
17002: AND
17003: NOT
17004: IFFALSE 17008
// exit ;
17006: GO 17611
// if GetBType ( depot ) = b_depot then
17008: LD_VAR 0 1
17012: PPUSH
17013: CALL_OW 266
17017: PUSH
17018: LD_INT 0
17020: EQUAL
17021: IFFALSE 17033
// dist := 28 else
17023: LD_ADDR_VAR 0 14
17027: PUSH
17028: LD_INT 28
17030: ST_TO_ADDR
17031: GO 17041
// dist := 36 ;
17033: LD_ADDR_VAR 0 14
17037: PUSH
17038: LD_INT 36
17040: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
17041: LD_VAR 0 1
17045: PPUSH
17046: LD_VAR 0 3
17050: PPUSH
17051: LD_VAR 0 4
17055: PPUSH
17056: CALL_OW 297
17060: PUSH
17061: LD_VAR 0 14
17065: GREATER
17066: IFFALSE 17070
// exit ;
17068: GO 17611
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
17070: LD_ADDR_VAR 0 12
17074: PUSH
17075: LD_VAR 0 2
17079: PPUSH
17080: LD_VAR 0 3
17084: PPUSH
17085: LD_VAR 0 4
17089: PPUSH
17090: LD_VAR 0 5
17094: PPUSH
17095: LD_VAR 0 1
17099: PPUSH
17100: CALL_OW 248
17104: PPUSH
17105: LD_INT 0
17107: PPUSH
17108: CALL 17616 0 6
17112: ST_TO_ADDR
// if not hexes then
17113: LD_VAR 0 12
17117: NOT
17118: IFFALSE 17122
// exit ;
17120: GO 17611
// hex := GetHexInfo ( x , y ) ;
17122: LD_ADDR_VAR 0 15
17126: PUSH
17127: LD_VAR 0 3
17131: PPUSH
17132: LD_VAR 0 4
17136: PPUSH
17137: CALL_OW 546
17141: ST_TO_ADDR
// if hex [ 1 ] then
17142: LD_VAR 0 15
17146: PUSH
17147: LD_INT 1
17149: ARRAY
17150: IFFALSE 17154
// exit ;
17152: GO 17611
// height := hex [ 2 ] ;
17154: LD_ADDR_VAR 0 13
17158: PUSH
17159: LD_VAR 0 15
17163: PUSH
17164: LD_INT 2
17166: ARRAY
17167: ST_TO_ADDR
// for i = 1 to hexes do
17168: LD_ADDR_VAR 0 7
17172: PUSH
17173: DOUBLE
17174: LD_INT 1
17176: DEC
17177: ST_TO_ADDR
17178: LD_VAR 0 12
17182: PUSH
17183: FOR_TO
17184: IFFALSE 17528
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
17186: LD_VAR 0 12
17190: PUSH
17191: LD_VAR 0 7
17195: ARRAY
17196: PUSH
17197: LD_INT 1
17199: ARRAY
17200: PPUSH
17201: LD_VAR 0 12
17205: PUSH
17206: LD_VAR 0 7
17210: ARRAY
17211: PUSH
17212: LD_INT 2
17214: ARRAY
17215: PPUSH
17216: CALL_OW 488
17220: NOT
17221: IFTRUE 17263
17223: PUSH
17224: LD_VAR 0 12
17228: PUSH
17229: LD_VAR 0 7
17233: ARRAY
17234: PUSH
17235: LD_INT 1
17237: ARRAY
17238: PPUSH
17239: LD_VAR 0 12
17243: PUSH
17244: LD_VAR 0 7
17248: ARRAY
17249: PUSH
17250: LD_INT 2
17252: ARRAY
17253: PPUSH
17254: CALL_OW 428
17258: PUSH
17259: LD_INT 0
17261: GREATER
17262: OR
17263: IFTRUE 17301
17265: PUSH
17266: LD_VAR 0 12
17270: PUSH
17271: LD_VAR 0 7
17275: ARRAY
17276: PUSH
17277: LD_INT 1
17279: ARRAY
17280: PPUSH
17281: LD_VAR 0 12
17285: PUSH
17286: LD_VAR 0 7
17290: ARRAY
17291: PUSH
17292: LD_INT 2
17294: ARRAY
17295: PPUSH
17296: CALL_OW 351
17300: OR
17301: IFFALSE 17307
// exit ;
17303: POP
17304: POP
17305: GO 17611
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
17307: LD_ADDR_VAR 0 8
17311: PUSH
17312: LD_VAR 0 12
17316: PUSH
17317: LD_VAR 0 7
17321: ARRAY
17322: PUSH
17323: LD_INT 1
17325: ARRAY
17326: PPUSH
17327: LD_VAR 0 12
17331: PUSH
17332: LD_VAR 0 7
17336: ARRAY
17337: PUSH
17338: LD_INT 2
17340: ARRAY
17341: PPUSH
17342: CALL_OW 546
17346: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
17347: LD_VAR 0 8
17351: PUSH
17352: LD_INT 1
17354: ARRAY
17355: IFTRUE 17377
17357: PUSH
17358: LD_VAR 0 8
17362: PUSH
17363: LD_INT 2
17365: ARRAY
17366: PUSH
17367: LD_VAR 0 13
17371: PUSH
17372: LD_INT 2
17374: PLUS
17375: GREATER
17376: OR
17377: IFTRUE 17399
17379: PUSH
17380: LD_VAR 0 8
17384: PUSH
17385: LD_INT 2
17387: ARRAY
17388: PUSH
17389: LD_VAR 0 13
17393: PUSH
17394: LD_INT 2
17396: MINUS
17397: LESS
17398: OR
17399: IFTRUE 17467
17401: PUSH
17402: LD_VAR 0 8
17406: PUSH
17407: LD_INT 3
17409: ARRAY
17410: PUSH
17411: LD_INT 0
17413: PUSH
17414: LD_INT 8
17416: PUSH
17417: LD_INT 9
17419: PUSH
17420: LD_INT 10
17422: PUSH
17423: LD_INT 11
17425: PUSH
17426: LD_INT 12
17428: PUSH
17429: LD_INT 13
17431: PUSH
17432: LD_INT 16
17434: PUSH
17435: LD_INT 17
17437: PUSH
17438: LD_INT 18
17440: PUSH
17441: LD_INT 19
17443: PUSH
17444: LD_INT 20
17446: PUSH
17447: LD_INT 21
17449: PUSH
17450: EMPTY
17451: LIST
17452: LIST
17453: LIST
17454: LIST
17455: LIST
17456: LIST
17457: LIST
17458: LIST
17459: LIST
17460: LIST
17461: LIST
17462: LIST
17463: LIST
17464: IN
17465: NOT
17466: OR
17467: IFTRUE 17480
17469: PUSH
17470: LD_VAR 0 8
17474: PUSH
17475: LD_INT 5
17477: ARRAY
17478: NOT
17479: OR
17480: IFTRUE 17520
17482: PUSH
17483: LD_VAR 0 8
17487: PUSH
17488: LD_INT 6
17490: ARRAY
17491: PUSH
17492: LD_INT 1
17494: PUSH
17495: LD_INT 2
17497: PUSH
17498: LD_INT 7
17500: PUSH
17501: LD_INT 9
17503: PUSH
17504: LD_INT 10
17506: PUSH
17507: LD_INT 11
17509: PUSH
17510: EMPTY
17511: LIST
17512: LIST
17513: LIST
17514: LIST
17515: LIST
17516: LIST
17517: IN
17518: NOT
17519: OR
17520: IFFALSE 17526
// exit ;
17522: POP
17523: POP
17524: GO 17611
// end ;
17526: GO 17183
17528: POP
17529: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
17530: LD_VAR 0 9
17534: PPUSH
17535: LD_VAR 0 3
17539: PPUSH
17540: LD_VAR 0 4
17544: PPUSH
17545: LD_INT 20
17547: PPUSH
17548: CALL 9430 0 4
17552: PUSH
17553: LD_INT 4
17555: ARRAY
17556: IFFALSE 17560
// exit ;
17558: GO 17611
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
17560: LD_VAR 0 2
17564: PUSH
17565: LD_INT 29
17567: PUSH
17568: LD_INT 30
17570: PUSH
17571: EMPTY
17572: LIST
17573: LIST
17574: IN
17575: IFFALSE 17599
17577: PUSH
17578: LD_VAR 0 3
17582: PPUSH
17583: LD_VAR 0 4
17587: PPUSH
17588: LD_VAR 0 9
17592: PPUSH
17593: CALL_OW 440
17597: NOT
17598: AND
17599: IFFALSE 17603
// exit ;
17601: GO 17611
// result := true ;
17603: LD_ADDR_VAR 0 6
17607: PUSH
17608: LD_INT 1
17610: ST_TO_ADDR
// end ;
17611: LD_VAR 0 6
17615: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
17616: LD_INT 0
17618: PPUSH
17619: PPUSH
17620: PPUSH
17621: PPUSH
17622: PPUSH
17623: PPUSH
17624: PPUSH
17625: PPUSH
17626: PPUSH
17627: PPUSH
17628: PPUSH
17629: PPUSH
17630: PPUSH
17631: PPUSH
17632: PPUSH
17633: PPUSH
17634: PPUSH
17635: PPUSH
17636: PPUSH
17637: PPUSH
17638: PPUSH
17639: PPUSH
17640: PPUSH
17641: PPUSH
17642: PPUSH
17643: PPUSH
17644: PPUSH
17645: PPUSH
17646: PPUSH
17647: PPUSH
17648: PPUSH
17649: PPUSH
17650: PPUSH
17651: PPUSH
17652: PPUSH
17653: PPUSH
17654: PPUSH
17655: PPUSH
17656: PPUSH
17657: PPUSH
17658: PPUSH
17659: PPUSH
17660: PPUSH
17661: PPUSH
17662: PPUSH
17663: PPUSH
17664: PPUSH
17665: PPUSH
17666: PPUSH
17667: PPUSH
17668: PPUSH
17669: PPUSH
17670: PPUSH
17671: PPUSH
17672: PPUSH
17673: PPUSH
17674: PPUSH
17675: PPUSH
// result = [ ] ;
17676: LD_ADDR_VAR 0 7
17680: PUSH
17681: EMPTY
17682: ST_TO_ADDR
// temp_list = [ ] ;
17683: LD_ADDR_VAR 0 9
17687: PUSH
17688: EMPTY
17689: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
17690: LD_VAR 0 4
17694: PUSH
17695: LD_INT 0
17697: PUSH
17698: LD_INT 1
17700: PUSH
17701: LD_INT 2
17703: PUSH
17704: LD_INT 3
17706: PUSH
17707: LD_INT 4
17709: PUSH
17710: LD_INT 5
17712: PUSH
17713: EMPTY
17714: LIST
17715: LIST
17716: LIST
17717: LIST
17718: LIST
17719: LIST
17720: IN
17721: NOT
17722: IFTRUE 17765
17724: PUSH
17725: LD_VAR 0 1
17729: PUSH
17730: LD_INT 0
17732: PUSH
17733: LD_INT 1
17735: PUSH
17736: EMPTY
17737: LIST
17738: LIST
17739: IN
17740: IFFALSE 17764
17742: PUSH
17743: LD_VAR 0 5
17747: PUSH
17748: LD_INT 1
17750: PUSH
17751: LD_INT 2
17753: PUSH
17754: LD_INT 3
17756: PUSH
17757: EMPTY
17758: LIST
17759: LIST
17760: LIST
17761: IN
17762: NOT
17763: AND
17764: OR
17765: IFFALSE 17769
// exit ;
17767: GO 36168
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
17769: LD_VAR 0 1
17773: PUSH
17774: LD_INT 6
17776: PUSH
17777: LD_INT 7
17779: PUSH
17780: LD_INT 8
17782: PUSH
17783: LD_INT 13
17785: PUSH
17786: LD_INT 12
17788: PUSH
17789: LD_INT 15
17791: PUSH
17792: LD_INT 11
17794: PUSH
17795: LD_INT 14
17797: PUSH
17798: LD_INT 10
17800: PUSH
17801: EMPTY
17802: LIST
17803: LIST
17804: LIST
17805: LIST
17806: LIST
17807: LIST
17808: LIST
17809: LIST
17810: LIST
17811: IN
17812: IFFALSE 17822
// btype = b_lab ;
17814: LD_ADDR_VAR 0 1
17818: PUSH
17819: LD_INT 6
17821: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
17822: LD_VAR 0 6
17826: PUSH
17827: LD_INT 0
17829: PUSH
17830: LD_INT 1
17832: PUSH
17833: LD_INT 2
17835: PUSH
17836: EMPTY
17837: LIST
17838: LIST
17839: LIST
17840: IN
17841: NOT
17842: IFTRUE 17910
17844: PUSH
17845: LD_VAR 0 1
17849: PUSH
17850: LD_INT 0
17852: PUSH
17853: LD_INT 1
17855: PUSH
17856: LD_INT 2
17858: PUSH
17859: LD_INT 3
17861: PUSH
17862: LD_INT 6
17864: PUSH
17865: LD_INT 36
17867: PUSH
17868: LD_INT 4
17870: PUSH
17871: LD_INT 5
17873: PUSH
17874: LD_INT 31
17876: PUSH
17877: LD_INT 32
17879: PUSH
17880: LD_INT 33
17882: PUSH
17883: EMPTY
17884: LIST
17885: LIST
17886: LIST
17887: LIST
17888: LIST
17889: LIST
17890: LIST
17891: LIST
17892: LIST
17893: LIST
17894: LIST
17895: IN
17896: NOT
17897: IFFALSE 17909
17899: PUSH
17900: LD_VAR 0 6
17904: PUSH
17905: LD_INT 1
17907: EQUAL
17908: AND
17909: OR
17910: IFTRUE 17942
17912: PUSH
17913: LD_VAR 0 1
17917: PUSH
17918: LD_INT 2
17920: PUSH
17921: LD_INT 3
17923: PUSH
17924: EMPTY
17925: LIST
17926: LIST
17927: IN
17928: NOT
17929: IFFALSE 17941
17931: PUSH
17932: LD_VAR 0 6
17936: PUSH
17937: LD_INT 2
17939: EQUAL
17940: AND
17941: OR
17942: IFFALSE 17952
// mode = 0 ;
17944: LD_ADDR_VAR 0 6
17948: PUSH
17949: LD_INT 0
17951: ST_TO_ADDR
// case mode of 0 :
17952: LD_VAR 0 6
17956: PUSH
17957: LD_INT 0
17959: DOUBLE
17960: EQUAL
17961: IFTRUE 17965
17963: GO 29418
17965: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
17966: LD_ADDR_VAR 0 11
17970: PUSH
17971: LD_INT 0
17973: PUSH
17974: LD_INT 0
17976: PUSH
17977: EMPTY
17978: LIST
17979: LIST
17980: PUSH
17981: LD_INT 0
17983: PUSH
17984: LD_INT 1
17986: NEG
17987: PUSH
17988: EMPTY
17989: LIST
17990: LIST
17991: PUSH
17992: LD_INT 1
17994: PUSH
17995: LD_INT 0
17997: PUSH
17998: EMPTY
17999: LIST
18000: LIST
18001: PUSH
18002: LD_INT 1
18004: PUSH
18005: LD_INT 1
18007: PUSH
18008: EMPTY
18009: LIST
18010: LIST
18011: PUSH
18012: LD_INT 0
18014: PUSH
18015: LD_INT 1
18017: PUSH
18018: EMPTY
18019: LIST
18020: LIST
18021: PUSH
18022: LD_INT 1
18024: NEG
18025: PUSH
18026: LD_INT 0
18028: PUSH
18029: EMPTY
18030: LIST
18031: LIST
18032: PUSH
18033: LD_INT 1
18035: NEG
18036: PUSH
18037: LD_INT 1
18039: NEG
18040: PUSH
18041: EMPTY
18042: LIST
18043: LIST
18044: PUSH
18045: LD_INT 1
18047: NEG
18048: PUSH
18049: LD_INT 2
18051: NEG
18052: PUSH
18053: EMPTY
18054: LIST
18055: LIST
18056: PUSH
18057: LD_INT 0
18059: PUSH
18060: LD_INT 2
18062: NEG
18063: PUSH
18064: EMPTY
18065: LIST
18066: LIST
18067: PUSH
18068: LD_INT 1
18070: PUSH
18071: LD_INT 1
18073: NEG
18074: PUSH
18075: EMPTY
18076: LIST
18077: LIST
18078: PUSH
18079: LD_INT 1
18081: PUSH
18082: LD_INT 2
18084: PUSH
18085: EMPTY
18086: LIST
18087: LIST
18088: PUSH
18089: LD_INT 0
18091: PUSH
18092: LD_INT 2
18094: PUSH
18095: EMPTY
18096: LIST
18097: LIST
18098: PUSH
18099: LD_INT 1
18101: NEG
18102: PUSH
18103: LD_INT 1
18105: PUSH
18106: EMPTY
18107: LIST
18108: LIST
18109: PUSH
18110: LD_INT 1
18112: PUSH
18113: LD_INT 3
18115: PUSH
18116: EMPTY
18117: LIST
18118: LIST
18119: PUSH
18120: LD_INT 0
18122: PUSH
18123: LD_INT 3
18125: PUSH
18126: EMPTY
18127: LIST
18128: LIST
18129: PUSH
18130: LD_INT 1
18132: NEG
18133: PUSH
18134: LD_INT 2
18136: PUSH
18137: EMPTY
18138: LIST
18139: LIST
18140: PUSH
18141: EMPTY
18142: LIST
18143: LIST
18144: LIST
18145: LIST
18146: LIST
18147: LIST
18148: LIST
18149: LIST
18150: LIST
18151: LIST
18152: LIST
18153: LIST
18154: LIST
18155: LIST
18156: LIST
18157: LIST
18158: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
18159: LD_ADDR_VAR 0 12
18163: PUSH
18164: LD_INT 0
18166: PUSH
18167: LD_INT 0
18169: PUSH
18170: EMPTY
18171: LIST
18172: LIST
18173: PUSH
18174: LD_INT 0
18176: PUSH
18177: LD_INT 1
18179: NEG
18180: PUSH
18181: EMPTY
18182: LIST
18183: LIST
18184: PUSH
18185: LD_INT 1
18187: PUSH
18188: LD_INT 0
18190: PUSH
18191: EMPTY
18192: LIST
18193: LIST
18194: PUSH
18195: LD_INT 1
18197: PUSH
18198: LD_INT 1
18200: PUSH
18201: EMPTY
18202: LIST
18203: LIST
18204: PUSH
18205: LD_INT 0
18207: PUSH
18208: LD_INT 1
18210: PUSH
18211: EMPTY
18212: LIST
18213: LIST
18214: PUSH
18215: LD_INT 1
18217: NEG
18218: PUSH
18219: LD_INT 0
18221: PUSH
18222: EMPTY
18223: LIST
18224: LIST
18225: PUSH
18226: LD_INT 1
18228: NEG
18229: PUSH
18230: LD_INT 1
18232: NEG
18233: PUSH
18234: EMPTY
18235: LIST
18236: LIST
18237: PUSH
18238: LD_INT 1
18240: PUSH
18241: LD_INT 1
18243: NEG
18244: PUSH
18245: EMPTY
18246: LIST
18247: LIST
18248: PUSH
18249: LD_INT 2
18251: PUSH
18252: LD_INT 0
18254: PUSH
18255: EMPTY
18256: LIST
18257: LIST
18258: PUSH
18259: LD_INT 2
18261: PUSH
18262: LD_INT 1
18264: PUSH
18265: EMPTY
18266: LIST
18267: LIST
18268: PUSH
18269: LD_INT 1
18271: NEG
18272: PUSH
18273: LD_INT 1
18275: PUSH
18276: EMPTY
18277: LIST
18278: LIST
18279: PUSH
18280: LD_INT 2
18282: NEG
18283: PUSH
18284: LD_INT 0
18286: PUSH
18287: EMPTY
18288: LIST
18289: LIST
18290: PUSH
18291: LD_INT 2
18293: NEG
18294: PUSH
18295: LD_INT 1
18297: NEG
18298: PUSH
18299: EMPTY
18300: LIST
18301: LIST
18302: PUSH
18303: LD_INT 2
18305: NEG
18306: PUSH
18307: LD_INT 1
18309: PUSH
18310: EMPTY
18311: LIST
18312: LIST
18313: PUSH
18314: LD_INT 3
18316: NEG
18317: PUSH
18318: LD_INT 0
18320: PUSH
18321: EMPTY
18322: LIST
18323: LIST
18324: PUSH
18325: LD_INT 3
18327: NEG
18328: PUSH
18329: LD_INT 1
18331: NEG
18332: PUSH
18333: EMPTY
18334: LIST
18335: LIST
18336: PUSH
18337: EMPTY
18338: LIST
18339: LIST
18340: LIST
18341: LIST
18342: LIST
18343: LIST
18344: LIST
18345: LIST
18346: LIST
18347: LIST
18348: LIST
18349: LIST
18350: LIST
18351: LIST
18352: LIST
18353: LIST
18354: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
18355: LD_ADDR_VAR 0 13
18359: PUSH
18360: LD_INT 0
18362: PUSH
18363: LD_INT 0
18365: PUSH
18366: EMPTY
18367: LIST
18368: LIST
18369: PUSH
18370: LD_INT 0
18372: PUSH
18373: LD_INT 1
18375: NEG
18376: PUSH
18377: EMPTY
18378: LIST
18379: LIST
18380: PUSH
18381: LD_INT 1
18383: PUSH
18384: LD_INT 0
18386: PUSH
18387: EMPTY
18388: LIST
18389: LIST
18390: PUSH
18391: LD_INT 1
18393: PUSH
18394: LD_INT 1
18396: PUSH
18397: EMPTY
18398: LIST
18399: LIST
18400: PUSH
18401: LD_INT 0
18403: PUSH
18404: LD_INT 1
18406: PUSH
18407: EMPTY
18408: LIST
18409: LIST
18410: PUSH
18411: LD_INT 1
18413: NEG
18414: PUSH
18415: LD_INT 0
18417: PUSH
18418: EMPTY
18419: LIST
18420: LIST
18421: PUSH
18422: LD_INT 1
18424: NEG
18425: PUSH
18426: LD_INT 1
18428: NEG
18429: PUSH
18430: EMPTY
18431: LIST
18432: LIST
18433: PUSH
18434: LD_INT 1
18436: NEG
18437: PUSH
18438: LD_INT 2
18440: NEG
18441: PUSH
18442: EMPTY
18443: LIST
18444: LIST
18445: PUSH
18446: LD_INT 2
18448: PUSH
18449: LD_INT 1
18451: PUSH
18452: EMPTY
18453: LIST
18454: LIST
18455: PUSH
18456: LD_INT 2
18458: PUSH
18459: LD_INT 2
18461: PUSH
18462: EMPTY
18463: LIST
18464: LIST
18465: PUSH
18466: LD_INT 1
18468: PUSH
18469: LD_INT 2
18471: PUSH
18472: EMPTY
18473: LIST
18474: LIST
18475: PUSH
18476: LD_INT 2
18478: NEG
18479: PUSH
18480: LD_INT 1
18482: NEG
18483: PUSH
18484: EMPTY
18485: LIST
18486: LIST
18487: PUSH
18488: LD_INT 2
18490: NEG
18491: PUSH
18492: LD_INT 2
18494: NEG
18495: PUSH
18496: EMPTY
18497: LIST
18498: LIST
18499: PUSH
18500: LD_INT 2
18502: NEG
18503: PUSH
18504: LD_INT 3
18506: NEG
18507: PUSH
18508: EMPTY
18509: LIST
18510: LIST
18511: PUSH
18512: LD_INT 3
18514: NEG
18515: PUSH
18516: LD_INT 2
18518: NEG
18519: PUSH
18520: EMPTY
18521: LIST
18522: LIST
18523: PUSH
18524: LD_INT 3
18526: NEG
18527: PUSH
18528: LD_INT 3
18530: NEG
18531: PUSH
18532: EMPTY
18533: LIST
18534: LIST
18535: PUSH
18536: EMPTY
18537: LIST
18538: LIST
18539: LIST
18540: LIST
18541: LIST
18542: LIST
18543: LIST
18544: LIST
18545: LIST
18546: LIST
18547: LIST
18548: LIST
18549: LIST
18550: LIST
18551: LIST
18552: LIST
18553: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
18554: LD_ADDR_VAR 0 14
18558: PUSH
18559: LD_INT 0
18561: PUSH
18562: LD_INT 0
18564: PUSH
18565: EMPTY
18566: LIST
18567: LIST
18568: PUSH
18569: LD_INT 0
18571: PUSH
18572: LD_INT 1
18574: NEG
18575: PUSH
18576: EMPTY
18577: LIST
18578: LIST
18579: PUSH
18580: LD_INT 1
18582: PUSH
18583: LD_INT 0
18585: PUSH
18586: EMPTY
18587: LIST
18588: LIST
18589: PUSH
18590: LD_INT 1
18592: PUSH
18593: LD_INT 1
18595: PUSH
18596: EMPTY
18597: LIST
18598: LIST
18599: PUSH
18600: LD_INT 0
18602: PUSH
18603: LD_INT 1
18605: PUSH
18606: EMPTY
18607: LIST
18608: LIST
18609: PUSH
18610: LD_INT 1
18612: NEG
18613: PUSH
18614: LD_INT 0
18616: PUSH
18617: EMPTY
18618: LIST
18619: LIST
18620: PUSH
18621: LD_INT 1
18623: NEG
18624: PUSH
18625: LD_INT 1
18627: NEG
18628: PUSH
18629: EMPTY
18630: LIST
18631: LIST
18632: PUSH
18633: LD_INT 1
18635: NEG
18636: PUSH
18637: LD_INT 2
18639: NEG
18640: PUSH
18641: EMPTY
18642: LIST
18643: LIST
18644: PUSH
18645: LD_INT 0
18647: PUSH
18648: LD_INT 2
18650: NEG
18651: PUSH
18652: EMPTY
18653: LIST
18654: LIST
18655: PUSH
18656: LD_INT 1
18658: PUSH
18659: LD_INT 1
18661: NEG
18662: PUSH
18663: EMPTY
18664: LIST
18665: LIST
18666: PUSH
18667: LD_INT 1
18669: PUSH
18670: LD_INT 2
18672: PUSH
18673: EMPTY
18674: LIST
18675: LIST
18676: PUSH
18677: LD_INT 0
18679: PUSH
18680: LD_INT 2
18682: PUSH
18683: EMPTY
18684: LIST
18685: LIST
18686: PUSH
18687: LD_INT 1
18689: NEG
18690: PUSH
18691: LD_INT 1
18693: PUSH
18694: EMPTY
18695: LIST
18696: LIST
18697: PUSH
18698: LD_INT 1
18700: NEG
18701: PUSH
18702: LD_INT 3
18704: NEG
18705: PUSH
18706: EMPTY
18707: LIST
18708: LIST
18709: PUSH
18710: LD_INT 0
18712: PUSH
18713: LD_INT 3
18715: NEG
18716: PUSH
18717: EMPTY
18718: LIST
18719: LIST
18720: PUSH
18721: LD_INT 1
18723: PUSH
18724: LD_INT 2
18726: NEG
18727: PUSH
18728: EMPTY
18729: LIST
18730: LIST
18731: PUSH
18732: EMPTY
18733: LIST
18734: LIST
18735: LIST
18736: LIST
18737: LIST
18738: LIST
18739: LIST
18740: LIST
18741: LIST
18742: LIST
18743: LIST
18744: LIST
18745: LIST
18746: LIST
18747: LIST
18748: LIST
18749: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
18750: LD_ADDR_VAR 0 15
18754: PUSH
18755: LD_INT 0
18757: PUSH
18758: LD_INT 0
18760: PUSH
18761: EMPTY
18762: LIST
18763: LIST
18764: PUSH
18765: LD_INT 0
18767: PUSH
18768: LD_INT 1
18770: NEG
18771: PUSH
18772: EMPTY
18773: LIST
18774: LIST
18775: PUSH
18776: LD_INT 1
18778: PUSH
18779: LD_INT 0
18781: PUSH
18782: EMPTY
18783: LIST
18784: LIST
18785: PUSH
18786: LD_INT 1
18788: PUSH
18789: LD_INT 1
18791: PUSH
18792: EMPTY
18793: LIST
18794: LIST
18795: PUSH
18796: LD_INT 0
18798: PUSH
18799: LD_INT 1
18801: PUSH
18802: EMPTY
18803: LIST
18804: LIST
18805: PUSH
18806: LD_INT 1
18808: NEG
18809: PUSH
18810: LD_INT 0
18812: PUSH
18813: EMPTY
18814: LIST
18815: LIST
18816: PUSH
18817: LD_INT 1
18819: NEG
18820: PUSH
18821: LD_INT 1
18823: NEG
18824: PUSH
18825: EMPTY
18826: LIST
18827: LIST
18828: PUSH
18829: LD_INT 1
18831: PUSH
18832: LD_INT 1
18834: NEG
18835: PUSH
18836: EMPTY
18837: LIST
18838: LIST
18839: PUSH
18840: LD_INT 2
18842: PUSH
18843: LD_INT 0
18845: PUSH
18846: EMPTY
18847: LIST
18848: LIST
18849: PUSH
18850: LD_INT 2
18852: PUSH
18853: LD_INT 1
18855: PUSH
18856: EMPTY
18857: LIST
18858: LIST
18859: PUSH
18860: LD_INT 1
18862: NEG
18863: PUSH
18864: LD_INT 1
18866: PUSH
18867: EMPTY
18868: LIST
18869: LIST
18870: PUSH
18871: LD_INT 2
18873: NEG
18874: PUSH
18875: LD_INT 0
18877: PUSH
18878: EMPTY
18879: LIST
18880: LIST
18881: PUSH
18882: LD_INT 2
18884: NEG
18885: PUSH
18886: LD_INT 1
18888: NEG
18889: PUSH
18890: EMPTY
18891: LIST
18892: LIST
18893: PUSH
18894: LD_INT 2
18896: PUSH
18897: LD_INT 1
18899: NEG
18900: PUSH
18901: EMPTY
18902: LIST
18903: LIST
18904: PUSH
18905: LD_INT 3
18907: PUSH
18908: LD_INT 0
18910: PUSH
18911: EMPTY
18912: LIST
18913: LIST
18914: PUSH
18915: LD_INT 3
18917: PUSH
18918: LD_INT 1
18920: PUSH
18921: EMPTY
18922: LIST
18923: LIST
18924: PUSH
18925: EMPTY
18926: LIST
18927: LIST
18928: LIST
18929: LIST
18930: LIST
18931: LIST
18932: LIST
18933: LIST
18934: LIST
18935: LIST
18936: LIST
18937: LIST
18938: LIST
18939: LIST
18940: LIST
18941: LIST
18942: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
18943: LD_ADDR_VAR 0 16
18947: PUSH
18948: LD_INT 0
18950: PUSH
18951: LD_INT 0
18953: PUSH
18954: EMPTY
18955: LIST
18956: LIST
18957: PUSH
18958: LD_INT 0
18960: PUSH
18961: LD_INT 1
18963: NEG
18964: PUSH
18965: EMPTY
18966: LIST
18967: LIST
18968: PUSH
18969: LD_INT 1
18971: PUSH
18972: LD_INT 0
18974: PUSH
18975: EMPTY
18976: LIST
18977: LIST
18978: PUSH
18979: LD_INT 1
18981: PUSH
18982: LD_INT 1
18984: PUSH
18985: EMPTY
18986: LIST
18987: LIST
18988: PUSH
18989: LD_INT 0
18991: PUSH
18992: LD_INT 1
18994: PUSH
18995: EMPTY
18996: LIST
18997: LIST
18998: PUSH
18999: LD_INT 1
19001: NEG
19002: PUSH
19003: LD_INT 0
19005: PUSH
19006: EMPTY
19007: LIST
19008: LIST
19009: PUSH
19010: LD_INT 1
19012: NEG
19013: PUSH
19014: LD_INT 1
19016: NEG
19017: PUSH
19018: EMPTY
19019: LIST
19020: LIST
19021: PUSH
19022: LD_INT 1
19024: NEG
19025: PUSH
19026: LD_INT 2
19028: NEG
19029: PUSH
19030: EMPTY
19031: LIST
19032: LIST
19033: PUSH
19034: LD_INT 2
19036: PUSH
19037: LD_INT 1
19039: PUSH
19040: EMPTY
19041: LIST
19042: LIST
19043: PUSH
19044: LD_INT 2
19046: PUSH
19047: LD_INT 2
19049: PUSH
19050: EMPTY
19051: LIST
19052: LIST
19053: PUSH
19054: LD_INT 1
19056: PUSH
19057: LD_INT 2
19059: PUSH
19060: EMPTY
19061: LIST
19062: LIST
19063: PUSH
19064: LD_INT 2
19066: NEG
19067: PUSH
19068: LD_INT 1
19070: NEG
19071: PUSH
19072: EMPTY
19073: LIST
19074: LIST
19075: PUSH
19076: LD_INT 2
19078: NEG
19079: PUSH
19080: LD_INT 2
19082: NEG
19083: PUSH
19084: EMPTY
19085: LIST
19086: LIST
19087: PUSH
19088: LD_INT 3
19090: PUSH
19091: LD_INT 2
19093: PUSH
19094: EMPTY
19095: LIST
19096: LIST
19097: PUSH
19098: LD_INT 3
19100: PUSH
19101: LD_INT 3
19103: PUSH
19104: EMPTY
19105: LIST
19106: LIST
19107: PUSH
19108: LD_INT 2
19110: PUSH
19111: LD_INT 3
19113: PUSH
19114: EMPTY
19115: LIST
19116: LIST
19117: PUSH
19118: EMPTY
19119: LIST
19120: LIST
19121: LIST
19122: LIST
19123: LIST
19124: LIST
19125: LIST
19126: LIST
19127: LIST
19128: LIST
19129: LIST
19130: LIST
19131: LIST
19132: LIST
19133: LIST
19134: LIST
19135: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19136: LD_ADDR_VAR 0 17
19140: PUSH
19141: LD_INT 0
19143: PUSH
19144: LD_INT 0
19146: PUSH
19147: EMPTY
19148: LIST
19149: LIST
19150: PUSH
19151: LD_INT 0
19153: PUSH
19154: LD_INT 1
19156: NEG
19157: PUSH
19158: EMPTY
19159: LIST
19160: LIST
19161: PUSH
19162: LD_INT 1
19164: PUSH
19165: LD_INT 0
19167: PUSH
19168: EMPTY
19169: LIST
19170: LIST
19171: PUSH
19172: LD_INT 1
19174: PUSH
19175: LD_INT 1
19177: PUSH
19178: EMPTY
19179: LIST
19180: LIST
19181: PUSH
19182: LD_INT 0
19184: PUSH
19185: LD_INT 1
19187: PUSH
19188: EMPTY
19189: LIST
19190: LIST
19191: PUSH
19192: LD_INT 1
19194: NEG
19195: PUSH
19196: LD_INT 0
19198: PUSH
19199: EMPTY
19200: LIST
19201: LIST
19202: PUSH
19203: LD_INT 1
19205: NEG
19206: PUSH
19207: LD_INT 1
19209: NEG
19210: PUSH
19211: EMPTY
19212: LIST
19213: LIST
19214: PUSH
19215: LD_INT 1
19217: NEG
19218: PUSH
19219: LD_INT 2
19221: NEG
19222: PUSH
19223: EMPTY
19224: LIST
19225: LIST
19226: PUSH
19227: LD_INT 0
19229: PUSH
19230: LD_INT 2
19232: NEG
19233: PUSH
19234: EMPTY
19235: LIST
19236: LIST
19237: PUSH
19238: LD_INT 1
19240: PUSH
19241: LD_INT 1
19243: NEG
19244: PUSH
19245: EMPTY
19246: LIST
19247: LIST
19248: PUSH
19249: LD_INT 2
19251: PUSH
19252: LD_INT 0
19254: PUSH
19255: EMPTY
19256: LIST
19257: LIST
19258: PUSH
19259: LD_INT 2
19261: PUSH
19262: LD_INT 1
19264: PUSH
19265: EMPTY
19266: LIST
19267: LIST
19268: PUSH
19269: LD_INT 2
19271: PUSH
19272: LD_INT 2
19274: PUSH
19275: EMPTY
19276: LIST
19277: LIST
19278: PUSH
19279: LD_INT 1
19281: PUSH
19282: LD_INT 2
19284: PUSH
19285: EMPTY
19286: LIST
19287: LIST
19288: PUSH
19289: LD_INT 0
19291: PUSH
19292: LD_INT 2
19294: PUSH
19295: EMPTY
19296: LIST
19297: LIST
19298: PUSH
19299: LD_INT 1
19301: NEG
19302: PUSH
19303: LD_INT 1
19305: PUSH
19306: EMPTY
19307: LIST
19308: LIST
19309: PUSH
19310: LD_INT 2
19312: NEG
19313: PUSH
19314: LD_INT 0
19316: PUSH
19317: EMPTY
19318: LIST
19319: LIST
19320: PUSH
19321: LD_INT 2
19323: NEG
19324: PUSH
19325: LD_INT 1
19327: NEG
19328: PUSH
19329: EMPTY
19330: LIST
19331: LIST
19332: PUSH
19333: LD_INT 2
19335: NEG
19336: PUSH
19337: LD_INT 2
19339: NEG
19340: PUSH
19341: EMPTY
19342: LIST
19343: LIST
19344: PUSH
19345: EMPTY
19346: LIST
19347: LIST
19348: LIST
19349: LIST
19350: LIST
19351: LIST
19352: LIST
19353: LIST
19354: LIST
19355: LIST
19356: LIST
19357: LIST
19358: LIST
19359: LIST
19360: LIST
19361: LIST
19362: LIST
19363: LIST
19364: LIST
19365: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19366: LD_ADDR_VAR 0 18
19370: PUSH
19371: LD_INT 0
19373: PUSH
19374: LD_INT 0
19376: PUSH
19377: EMPTY
19378: LIST
19379: LIST
19380: PUSH
19381: LD_INT 0
19383: PUSH
19384: LD_INT 1
19386: NEG
19387: PUSH
19388: EMPTY
19389: LIST
19390: LIST
19391: PUSH
19392: LD_INT 1
19394: PUSH
19395: LD_INT 0
19397: PUSH
19398: EMPTY
19399: LIST
19400: LIST
19401: PUSH
19402: LD_INT 1
19404: PUSH
19405: LD_INT 1
19407: PUSH
19408: EMPTY
19409: LIST
19410: LIST
19411: PUSH
19412: LD_INT 0
19414: PUSH
19415: LD_INT 1
19417: PUSH
19418: EMPTY
19419: LIST
19420: LIST
19421: PUSH
19422: LD_INT 1
19424: NEG
19425: PUSH
19426: LD_INT 0
19428: PUSH
19429: EMPTY
19430: LIST
19431: LIST
19432: PUSH
19433: LD_INT 1
19435: NEG
19436: PUSH
19437: LD_INT 1
19439: NEG
19440: PUSH
19441: EMPTY
19442: LIST
19443: LIST
19444: PUSH
19445: LD_INT 1
19447: NEG
19448: PUSH
19449: LD_INT 2
19451: NEG
19452: PUSH
19453: EMPTY
19454: LIST
19455: LIST
19456: PUSH
19457: LD_INT 0
19459: PUSH
19460: LD_INT 2
19462: NEG
19463: PUSH
19464: EMPTY
19465: LIST
19466: LIST
19467: PUSH
19468: LD_INT 1
19470: PUSH
19471: LD_INT 1
19473: NEG
19474: PUSH
19475: EMPTY
19476: LIST
19477: LIST
19478: PUSH
19479: LD_INT 2
19481: PUSH
19482: LD_INT 0
19484: PUSH
19485: EMPTY
19486: LIST
19487: LIST
19488: PUSH
19489: LD_INT 2
19491: PUSH
19492: LD_INT 1
19494: PUSH
19495: EMPTY
19496: LIST
19497: LIST
19498: PUSH
19499: LD_INT 2
19501: PUSH
19502: LD_INT 2
19504: PUSH
19505: EMPTY
19506: LIST
19507: LIST
19508: PUSH
19509: LD_INT 1
19511: PUSH
19512: LD_INT 2
19514: PUSH
19515: EMPTY
19516: LIST
19517: LIST
19518: PUSH
19519: LD_INT 0
19521: PUSH
19522: LD_INT 2
19524: PUSH
19525: EMPTY
19526: LIST
19527: LIST
19528: PUSH
19529: LD_INT 1
19531: NEG
19532: PUSH
19533: LD_INT 1
19535: PUSH
19536: EMPTY
19537: LIST
19538: LIST
19539: PUSH
19540: LD_INT 2
19542: NEG
19543: PUSH
19544: LD_INT 0
19546: PUSH
19547: EMPTY
19548: LIST
19549: LIST
19550: PUSH
19551: LD_INT 2
19553: NEG
19554: PUSH
19555: LD_INT 1
19557: NEG
19558: PUSH
19559: EMPTY
19560: LIST
19561: LIST
19562: PUSH
19563: LD_INT 2
19565: NEG
19566: PUSH
19567: LD_INT 2
19569: NEG
19570: PUSH
19571: EMPTY
19572: LIST
19573: LIST
19574: PUSH
19575: EMPTY
19576: LIST
19577: LIST
19578: LIST
19579: LIST
19580: LIST
19581: LIST
19582: LIST
19583: LIST
19584: LIST
19585: LIST
19586: LIST
19587: LIST
19588: LIST
19589: LIST
19590: LIST
19591: LIST
19592: LIST
19593: LIST
19594: LIST
19595: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19596: LD_ADDR_VAR 0 19
19600: PUSH
19601: LD_INT 0
19603: PUSH
19604: LD_INT 0
19606: PUSH
19607: EMPTY
19608: LIST
19609: LIST
19610: PUSH
19611: LD_INT 0
19613: PUSH
19614: LD_INT 1
19616: NEG
19617: PUSH
19618: EMPTY
19619: LIST
19620: LIST
19621: PUSH
19622: LD_INT 1
19624: PUSH
19625: LD_INT 0
19627: PUSH
19628: EMPTY
19629: LIST
19630: LIST
19631: PUSH
19632: LD_INT 1
19634: PUSH
19635: LD_INT 1
19637: PUSH
19638: EMPTY
19639: LIST
19640: LIST
19641: PUSH
19642: LD_INT 0
19644: PUSH
19645: LD_INT 1
19647: PUSH
19648: EMPTY
19649: LIST
19650: LIST
19651: PUSH
19652: LD_INT 1
19654: NEG
19655: PUSH
19656: LD_INT 0
19658: PUSH
19659: EMPTY
19660: LIST
19661: LIST
19662: PUSH
19663: LD_INT 1
19665: NEG
19666: PUSH
19667: LD_INT 1
19669: NEG
19670: PUSH
19671: EMPTY
19672: LIST
19673: LIST
19674: PUSH
19675: LD_INT 1
19677: NEG
19678: PUSH
19679: LD_INT 2
19681: NEG
19682: PUSH
19683: EMPTY
19684: LIST
19685: LIST
19686: PUSH
19687: LD_INT 0
19689: PUSH
19690: LD_INT 2
19692: NEG
19693: PUSH
19694: EMPTY
19695: LIST
19696: LIST
19697: PUSH
19698: LD_INT 1
19700: PUSH
19701: LD_INT 1
19703: NEG
19704: PUSH
19705: EMPTY
19706: LIST
19707: LIST
19708: PUSH
19709: LD_INT 2
19711: PUSH
19712: LD_INT 0
19714: PUSH
19715: EMPTY
19716: LIST
19717: LIST
19718: PUSH
19719: LD_INT 2
19721: PUSH
19722: LD_INT 1
19724: PUSH
19725: EMPTY
19726: LIST
19727: LIST
19728: PUSH
19729: LD_INT 2
19731: PUSH
19732: LD_INT 2
19734: PUSH
19735: EMPTY
19736: LIST
19737: LIST
19738: PUSH
19739: LD_INT 1
19741: PUSH
19742: LD_INT 2
19744: PUSH
19745: EMPTY
19746: LIST
19747: LIST
19748: PUSH
19749: LD_INT 0
19751: PUSH
19752: LD_INT 2
19754: PUSH
19755: EMPTY
19756: LIST
19757: LIST
19758: PUSH
19759: LD_INT 1
19761: NEG
19762: PUSH
19763: LD_INT 1
19765: PUSH
19766: EMPTY
19767: LIST
19768: LIST
19769: PUSH
19770: LD_INT 2
19772: NEG
19773: PUSH
19774: LD_INT 0
19776: PUSH
19777: EMPTY
19778: LIST
19779: LIST
19780: PUSH
19781: LD_INT 2
19783: NEG
19784: PUSH
19785: LD_INT 1
19787: NEG
19788: PUSH
19789: EMPTY
19790: LIST
19791: LIST
19792: PUSH
19793: LD_INT 2
19795: NEG
19796: PUSH
19797: LD_INT 2
19799: NEG
19800: PUSH
19801: EMPTY
19802: LIST
19803: LIST
19804: PUSH
19805: EMPTY
19806: LIST
19807: LIST
19808: LIST
19809: LIST
19810: LIST
19811: LIST
19812: LIST
19813: LIST
19814: LIST
19815: LIST
19816: LIST
19817: LIST
19818: LIST
19819: LIST
19820: LIST
19821: LIST
19822: LIST
19823: LIST
19824: LIST
19825: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19826: LD_ADDR_VAR 0 20
19830: PUSH
19831: LD_INT 0
19833: PUSH
19834: LD_INT 0
19836: PUSH
19837: EMPTY
19838: LIST
19839: LIST
19840: PUSH
19841: LD_INT 0
19843: PUSH
19844: LD_INT 1
19846: NEG
19847: PUSH
19848: EMPTY
19849: LIST
19850: LIST
19851: PUSH
19852: LD_INT 1
19854: PUSH
19855: LD_INT 0
19857: PUSH
19858: EMPTY
19859: LIST
19860: LIST
19861: PUSH
19862: LD_INT 1
19864: PUSH
19865: LD_INT 1
19867: PUSH
19868: EMPTY
19869: LIST
19870: LIST
19871: PUSH
19872: LD_INT 0
19874: PUSH
19875: LD_INT 1
19877: PUSH
19878: EMPTY
19879: LIST
19880: LIST
19881: PUSH
19882: LD_INT 1
19884: NEG
19885: PUSH
19886: LD_INT 0
19888: PUSH
19889: EMPTY
19890: LIST
19891: LIST
19892: PUSH
19893: LD_INT 1
19895: NEG
19896: PUSH
19897: LD_INT 1
19899: NEG
19900: PUSH
19901: EMPTY
19902: LIST
19903: LIST
19904: PUSH
19905: LD_INT 1
19907: NEG
19908: PUSH
19909: LD_INT 2
19911: NEG
19912: PUSH
19913: EMPTY
19914: LIST
19915: LIST
19916: PUSH
19917: LD_INT 0
19919: PUSH
19920: LD_INT 2
19922: NEG
19923: PUSH
19924: EMPTY
19925: LIST
19926: LIST
19927: PUSH
19928: LD_INT 1
19930: PUSH
19931: LD_INT 1
19933: NEG
19934: PUSH
19935: EMPTY
19936: LIST
19937: LIST
19938: PUSH
19939: LD_INT 2
19941: PUSH
19942: LD_INT 0
19944: PUSH
19945: EMPTY
19946: LIST
19947: LIST
19948: PUSH
19949: LD_INT 2
19951: PUSH
19952: LD_INT 1
19954: PUSH
19955: EMPTY
19956: LIST
19957: LIST
19958: PUSH
19959: LD_INT 2
19961: PUSH
19962: LD_INT 2
19964: PUSH
19965: EMPTY
19966: LIST
19967: LIST
19968: PUSH
19969: LD_INT 1
19971: PUSH
19972: LD_INT 2
19974: PUSH
19975: EMPTY
19976: LIST
19977: LIST
19978: PUSH
19979: LD_INT 0
19981: PUSH
19982: LD_INT 2
19984: PUSH
19985: EMPTY
19986: LIST
19987: LIST
19988: PUSH
19989: LD_INT 1
19991: NEG
19992: PUSH
19993: LD_INT 1
19995: PUSH
19996: EMPTY
19997: LIST
19998: LIST
19999: PUSH
20000: LD_INT 2
20002: NEG
20003: PUSH
20004: LD_INT 0
20006: PUSH
20007: EMPTY
20008: LIST
20009: LIST
20010: PUSH
20011: LD_INT 2
20013: NEG
20014: PUSH
20015: LD_INT 1
20017: NEG
20018: PUSH
20019: EMPTY
20020: LIST
20021: LIST
20022: PUSH
20023: LD_INT 2
20025: NEG
20026: PUSH
20027: LD_INT 2
20029: NEG
20030: PUSH
20031: EMPTY
20032: LIST
20033: LIST
20034: PUSH
20035: EMPTY
20036: LIST
20037: LIST
20038: LIST
20039: LIST
20040: LIST
20041: LIST
20042: LIST
20043: LIST
20044: LIST
20045: LIST
20046: LIST
20047: LIST
20048: LIST
20049: LIST
20050: LIST
20051: LIST
20052: LIST
20053: LIST
20054: LIST
20055: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20056: LD_ADDR_VAR 0 21
20060: PUSH
20061: LD_INT 0
20063: PUSH
20064: LD_INT 0
20066: PUSH
20067: EMPTY
20068: LIST
20069: LIST
20070: PUSH
20071: LD_INT 0
20073: PUSH
20074: LD_INT 1
20076: NEG
20077: PUSH
20078: EMPTY
20079: LIST
20080: LIST
20081: PUSH
20082: LD_INT 1
20084: PUSH
20085: LD_INT 0
20087: PUSH
20088: EMPTY
20089: LIST
20090: LIST
20091: PUSH
20092: LD_INT 1
20094: PUSH
20095: LD_INT 1
20097: PUSH
20098: EMPTY
20099: LIST
20100: LIST
20101: PUSH
20102: LD_INT 0
20104: PUSH
20105: LD_INT 1
20107: PUSH
20108: EMPTY
20109: LIST
20110: LIST
20111: PUSH
20112: LD_INT 1
20114: NEG
20115: PUSH
20116: LD_INT 0
20118: PUSH
20119: EMPTY
20120: LIST
20121: LIST
20122: PUSH
20123: LD_INT 1
20125: NEG
20126: PUSH
20127: LD_INT 1
20129: NEG
20130: PUSH
20131: EMPTY
20132: LIST
20133: LIST
20134: PUSH
20135: LD_INT 1
20137: NEG
20138: PUSH
20139: LD_INT 2
20141: NEG
20142: PUSH
20143: EMPTY
20144: LIST
20145: LIST
20146: PUSH
20147: LD_INT 0
20149: PUSH
20150: LD_INT 2
20152: NEG
20153: PUSH
20154: EMPTY
20155: LIST
20156: LIST
20157: PUSH
20158: LD_INT 1
20160: PUSH
20161: LD_INT 1
20163: NEG
20164: PUSH
20165: EMPTY
20166: LIST
20167: LIST
20168: PUSH
20169: LD_INT 2
20171: PUSH
20172: LD_INT 0
20174: PUSH
20175: EMPTY
20176: LIST
20177: LIST
20178: PUSH
20179: LD_INT 2
20181: PUSH
20182: LD_INT 1
20184: PUSH
20185: EMPTY
20186: LIST
20187: LIST
20188: PUSH
20189: LD_INT 2
20191: PUSH
20192: LD_INT 2
20194: PUSH
20195: EMPTY
20196: LIST
20197: LIST
20198: PUSH
20199: LD_INT 1
20201: PUSH
20202: LD_INT 2
20204: PUSH
20205: EMPTY
20206: LIST
20207: LIST
20208: PUSH
20209: LD_INT 0
20211: PUSH
20212: LD_INT 2
20214: PUSH
20215: EMPTY
20216: LIST
20217: LIST
20218: PUSH
20219: LD_INT 1
20221: NEG
20222: PUSH
20223: LD_INT 1
20225: PUSH
20226: EMPTY
20227: LIST
20228: LIST
20229: PUSH
20230: LD_INT 2
20232: NEG
20233: PUSH
20234: LD_INT 0
20236: PUSH
20237: EMPTY
20238: LIST
20239: LIST
20240: PUSH
20241: LD_INT 2
20243: NEG
20244: PUSH
20245: LD_INT 1
20247: NEG
20248: PUSH
20249: EMPTY
20250: LIST
20251: LIST
20252: PUSH
20253: LD_INT 2
20255: NEG
20256: PUSH
20257: LD_INT 2
20259: NEG
20260: PUSH
20261: EMPTY
20262: LIST
20263: LIST
20264: PUSH
20265: EMPTY
20266: LIST
20267: LIST
20268: LIST
20269: LIST
20270: LIST
20271: LIST
20272: LIST
20273: LIST
20274: LIST
20275: LIST
20276: LIST
20277: LIST
20278: LIST
20279: LIST
20280: LIST
20281: LIST
20282: LIST
20283: LIST
20284: LIST
20285: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20286: LD_ADDR_VAR 0 22
20290: PUSH
20291: LD_INT 0
20293: PUSH
20294: LD_INT 0
20296: PUSH
20297: EMPTY
20298: LIST
20299: LIST
20300: PUSH
20301: LD_INT 0
20303: PUSH
20304: LD_INT 1
20306: NEG
20307: PUSH
20308: EMPTY
20309: LIST
20310: LIST
20311: PUSH
20312: LD_INT 1
20314: PUSH
20315: LD_INT 0
20317: PUSH
20318: EMPTY
20319: LIST
20320: LIST
20321: PUSH
20322: LD_INT 1
20324: PUSH
20325: LD_INT 1
20327: PUSH
20328: EMPTY
20329: LIST
20330: LIST
20331: PUSH
20332: LD_INT 0
20334: PUSH
20335: LD_INT 1
20337: PUSH
20338: EMPTY
20339: LIST
20340: LIST
20341: PUSH
20342: LD_INT 1
20344: NEG
20345: PUSH
20346: LD_INT 0
20348: PUSH
20349: EMPTY
20350: LIST
20351: LIST
20352: PUSH
20353: LD_INT 1
20355: NEG
20356: PUSH
20357: LD_INT 1
20359: NEG
20360: PUSH
20361: EMPTY
20362: LIST
20363: LIST
20364: PUSH
20365: LD_INT 1
20367: NEG
20368: PUSH
20369: LD_INT 2
20371: NEG
20372: PUSH
20373: EMPTY
20374: LIST
20375: LIST
20376: PUSH
20377: LD_INT 0
20379: PUSH
20380: LD_INT 2
20382: NEG
20383: PUSH
20384: EMPTY
20385: LIST
20386: LIST
20387: PUSH
20388: LD_INT 1
20390: PUSH
20391: LD_INT 1
20393: NEG
20394: PUSH
20395: EMPTY
20396: LIST
20397: LIST
20398: PUSH
20399: LD_INT 2
20401: PUSH
20402: LD_INT 0
20404: PUSH
20405: EMPTY
20406: LIST
20407: LIST
20408: PUSH
20409: LD_INT 2
20411: PUSH
20412: LD_INT 1
20414: PUSH
20415: EMPTY
20416: LIST
20417: LIST
20418: PUSH
20419: LD_INT 2
20421: PUSH
20422: LD_INT 2
20424: PUSH
20425: EMPTY
20426: LIST
20427: LIST
20428: PUSH
20429: LD_INT 1
20431: PUSH
20432: LD_INT 2
20434: PUSH
20435: EMPTY
20436: LIST
20437: LIST
20438: PUSH
20439: LD_INT 0
20441: PUSH
20442: LD_INT 2
20444: PUSH
20445: EMPTY
20446: LIST
20447: LIST
20448: PUSH
20449: LD_INT 1
20451: NEG
20452: PUSH
20453: LD_INT 1
20455: PUSH
20456: EMPTY
20457: LIST
20458: LIST
20459: PUSH
20460: LD_INT 2
20462: NEG
20463: PUSH
20464: LD_INT 0
20466: PUSH
20467: EMPTY
20468: LIST
20469: LIST
20470: PUSH
20471: LD_INT 2
20473: NEG
20474: PUSH
20475: LD_INT 1
20477: NEG
20478: PUSH
20479: EMPTY
20480: LIST
20481: LIST
20482: PUSH
20483: LD_INT 2
20485: NEG
20486: PUSH
20487: LD_INT 2
20489: NEG
20490: PUSH
20491: EMPTY
20492: LIST
20493: LIST
20494: PUSH
20495: EMPTY
20496: LIST
20497: LIST
20498: LIST
20499: LIST
20500: LIST
20501: LIST
20502: LIST
20503: LIST
20504: LIST
20505: LIST
20506: LIST
20507: LIST
20508: LIST
20509: LIST
20510: LIST
20511: LIST
20512: LIST
20513: LIST
20514: LIST
20515: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
20516: LD_ADDR_VAR 0 23
20520: PUSH
20521: LD_INT 0
20523: PUSH
20524: LD_INT 0
20526: PUSH
20527: EMPTY
20528: LIST
20529: LIST
20530: PUSH
20531: LD_INT 0
20533: PUSH
20534: LD_INT 1
20536: NEG
20537: PUSH
20538: EMPTY
20539: LIST
20540: LIST
20541: PUSH
20542: LD_INT 1
20544: PUSH
20545: LD_INT 0
20547: PUSH
20548: EMPTY
20549: LIST
20550: LIST
20551: PUSH
20552: LD_INT 1
20554: PUSH
20555: LD_INT 1
20557: PUSH
20558: EMPTY
20559: LIST
20560: LIST
20561: PUSH
20562: LD_INT 0
20564: PUSH
20565: LD_INT 1
20567: PUSH
20568: EMPTY
20569: LIST
20570: LIST
20571: PUSH
20572: LD_INT 1
20574: NEG
20575: PUSH
20576: LD_INT 0
20578: PUSH
20579: EMPTY
20580: LIST
20581: LIST
20582: PUSH
20583: LD_INT 1
20585: NEG
20586: PUSH
20587: LD_INT 1
20589: NEG
20590: PUSH
20591: EMPTY
20592: LIST
20593: LIST
20594: PUSH
20595: LD_INT 1
20597: NEG
20598: PUSH
20599: LD_INT 2
20601: NEG
20602: PUSH
20603: EMPTY
20604: LIST
20605: LIST
20606: PUSH
20607: LD_INT 0
20609: PUSH
20610: LD_INT 2
20612: NEG
20613: PUSH
20614: EMPTY
20615: LIST
20616: LIST
20617: PUSH
20618: LD_INT 1
20620: PUSH
20621: LD_INT 1
20623: NEG
20624: PUSH
20625: EMPTY
20626: LIST
20627: LIST
20628: PUSH
20629: LD_INT 2
20631: PUSH
20632: LD_INT 0
20634: PUSH
20635: EMPTY
20636: LIST
20637: LIST
20638: PUSH
20639: LD_INT 2
20641: PUSH
20642: LD_INT 1
20644: PUSH
20645: EMPTY
20646: LIST
20647: LIST
20648: PUSH
20649: LD_INT 2
20651: PUSH
20652: LD_INT 2
20654: PUSH
20655: EMPTY
20656: LIST
20657: LIST
20658: PUSH
20659: LD_INT 1
20661: PUSH
20662: LD_INT 2
20664: PUSH
20665: EMPTY
20666: LIST
20667: LIST
20668: PUSH
20669: LD_INT 0
20671: PUSH
20672: LD_INT 2
20674: PUSH
20675: EMPTY
20676: LIST
20677: LIST
20678: PUSH
20679: LD_INT 1
20681: NEG
20682: PUSH
20683: LD_INT 1
20685: PUSH
20686: EMPTY
20687: LIST
20688: LIST
20689: PUSH
20690: LD_INT 2
20692: NEG
20693: PUSH
20694: LD_INT 0
20696: PUSH
20697: EMPTY
20698: LIST
20699: LIST
20700: PUSH
20701: LD_INT 2
20703: NEG
20704: PUSH
20705: LD_INT 1
20707: NEG
20708: PUSH
20709: EMPTY
20710: LIST
20711: LIST
20712: PUSH
20713: LD_INT 2
20715: NEG
20716: PUSH
20717: LD_INT 2
20719: NEG
20720: PUSH
20721: EMPTY
20722: LIST
20723: LIST
20724: PUSH
20725: LD_INT 2
20727: NEG
20728: PUSH
20729: LD_INT 3
20731: NEG
20732: PUSH
20733: EMPTY
20734: LIST
20735: LIST
20736: PUSH
20737: LD_INT 1
20739: NEG
20740: PUSH
20741: LD_INT 3
20743: NEG
20744: PUSH
20745: EMPTY
20746: LIST
20747: LIST
20748: PUSH
20749: LD_INT 1
20751: PUSH
20752: LD_INT 2
20754: NEG
20755: PUSH
20756: EMPTY
20757: LIST
20758: LIST
20759: PUSH
20760: LD_INT 2
20762: PUSH
20763: LD_INT 1
20765: NEG
20766: PUSH
20767: EMPTY
20768: LIST
20769: LIST
20770: PUSH
20771: EMPTY
20772: LIST
20773: LIST
20774: LIST
20775: LIST
20776: LIST
20777: LIST
20778: LIST
20779: LIST
20780: LIST
20781: LIST
20782: LIST
20783: LIST
20784: LIST
20785: LIST
20786: LIST
20787: LIST
20788: LIST
20789: LIST
20790: LIST
20791: LIST
20792: LIST
20793: LIST
20794: LIST
20795: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
20796: LD_ADDR_VAR 0 24
20800: PUSH
20801: LD_INT 0
20803: PUSH
20804: LD_INT 0
20806: PUSH
20807: EMPTY
20808: LIST
20809: LIST
20810: PUSH
20811: LD_INT 0
20813: PUSH
20814: LD_INT 1
20816: NEG
20817: PUSH
20818: EMPTY
20819: LIST
20820: LIST
20821: PUSH
20822: LD_INT 1
20824: PUSH
20825: LD_INT 0
20827: PUSH
20828: EMPTY
20829: LIST
20830: LIST
20831: PUSH
20832: LD_INT 1
20834: PUSH
20835: LD_INT 1
20837: PUSH
20838: EMPTY
20839: LIST
20840: LIST
20841: PUSH
20842: LD_INT 0
20844: PUSH
20845: LD_INT 1
20847: PUSH
20848: EMPTY
20849: LIST
20850: LIST
20851: PUSH
20852: LD_INT 1
20854: NEG
20855: PUSH
20856: LD_INT 0
20858: PUSH
20859: EMPTY
20860: LIST
20861: LIST
20862: PUSH
20863: LD_INT 1
20865: NEG
20866: PUSH
20867: LD_INT 1
20869: NEG
20870: PUSH
20871: EMPTY
20872: LIST
20873: LIST
20874: PUSH
20875: LD_INT 1
20877: NEG
20878: PUSH
20879: LD_INT 2
20881: NEG
20882: PUSH
20883: EMPTY
20884: LIST
20885: LIST
20886: PUSH
20887: LD_INT 0
20889: PUSH
20890: LD_INT 2
20892: NEG
20893: PUSH
20894: EMPTY
20895: LIST
20896: LIST
20897: PUSH
20898: LD_INT 1
20900: PUSH
20901: LD_INT 1
20903: NEG
20904: PUSH
20905: EMPTY
20906: LIST
20907: LIST
20908: PUSH
20909: LD_INT 2
20911: PUSH
20912: LD_INT 0
20914: PUSH
20915: EMPTY
20916: LIST
20917: LIST
20918: PUSH
20919: LD_INT 2
20921: PUSH
20922: LD_INT 1
20924: PUSH
20925: EMPTY
20926: LIST
20927: LIST
20928: PUSH
20929: LD_INT 2
20931: PUSH
20932: LD_INT 2
20934: PUSH
20935: EMPTY
20936: LIST
20937: LIST
20938: PUSH
20939: LD_INT 1
20941: PUSH
20942: LD_INT 2
20944: PUSH
20945: EMPTY
20946: LIST
20947: LIST
20948: PUSH
20949: LD_INT 0
20951: PUSH
20952: LD_INT 2
20954: PUSH
20955: EMPTY
20956: LIST
20957: LIST
20958: PUSH
20959: LD_INT 1
20961: NEG
20962: PUSH
20963: LD_INT 1
20965: PUSH
20966: EMPTY
20967: LIST
20968: LIST
20969: PUSH
20970: LD_INT 2
20972: NEG
20973: PUSH
20974: LD_INT 0
20976: PUSH
20977: EMPTY
20978: LIST
20979: LIST
20980: PUSH
20981: LD_INT 2
20983: NEG
20984: PUSH
20985: LD_INT 1
20987: NEG
20988: PUSH
20989: EMPTY
20990: LIST
20991: LIST
20992: PUSH
20993: LD_INT 2
20995: NEG
20996: PUSH
20997: LD_INT 2
20999: NEG
21000: PUSH
21001: EMPTY
21002: LIST
21003: LIST
21004: PUSH
21005: LD_INT 1
21007: PUSH
21008: LD_INT 2
21010: NEG
21011: PUSH
21012: EMPTY
21013: LIST
21014: LIST
21015: PUSH
21016: LD_INT 2
21018: PUSH
21019: LD_INT 1
21021: NEG
21022: PUSH
21023: EMPTY
21024: LIST
21025: LIST
21026: PUSH
21027: LD_INT 3
21029: PUSH
21030: LD_INT 1
21032: PUSH
21033: EMPTY
21034: LIST
21035: LIST
21036: PUSH
21037: LD_INT 3
21039: PUSH
21040: LD_INT 2
21042: PUSH
21043: EMPTY
21044: LIST
21045: LIST
21046: PUSH
21047: EMPTY
21048: LIST
21049: LIST
21050: LIST
21051: LIST
21052: LIST
21053: LIST
21054: LIST
21055: LIST
21056: LIST
21057: LIST
21058: LIST
21059: LIST
21060: LIST
21061: LIST
21062: LIST
21063: LIST
21064: LIST
21065: LIST
21066: LIST
21067: LIST
21068: LIST
21069: LIST
21070: LIST
21071: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
21072: LD_ADDR_VAR 0 25
21076: PUSH
21077: LD_INT 0
21079: PUSH
21080: LD_INT 0
21082: PUSH
21083: EMPTY
21084: LIST
21085: LIST
21086: PUSH
21087: LD_INT 0
21089: PUSH
21090: LD_INT 1
21092: NEG
21093: PUSH
21094: EMPTY
21095: LIST
21096: LIST
21097: PUSH
21098: LD_INT 1
21100: PUSH
21101: LD_INT 0
21103: PUSH
21104: EMPTY
21105: LIST
21106: LIST
21107: PUSH
21108: LD_INT 1
21110: PUSH
21111: LD_INT 1
21113: PUSH
21114: EMPTY
21115: LIST
21116: LIST
21117: PUSH
21118: LD_INT 0
21120: PUSH
21121: LD_INT 1
21123: PUSH
21124: EMPTY
21125: LIST
21126: LIST
21127: PUSH
21128: LD_INT 1
21130: NEG
21131: PUSH
21132: LD_INT 0
21134: PUSH
21135: EMPTY
21136: LIST
21137: LIST
21138: PUSH
21139: LD_INT 1
21141: NEG
21142: PUSH
21143: LD_INT 1
21145: NEG
21146: PUSH
21147: EMPTY
21148: LIST
21149: LIST
21150: PUSH
21151: LD_INT 1
21153: NEG
21154: PUSH
21155: LD_INT 2
21157: NEG
21158: PUSH
21159: EMPTY
21160: LIST
21161: LIST
21162: PUSH
21163: LD_INT 0
21165: PUSH
21166: LD_INT 2
21168: NEG
21169: PUSH
21170: EMPTY
21171: LIST
21172: LIST
21173: PUSH
21174: LD_INT 1
21176: PUSH
21177: LD_INT 1
21179: NEG
21180: PUSH
21181: EMPTY
21182: LIST
21183: LIST
21184: PUSH
21185: LD_INT 2
21187: PUSH
21188: LD_INT 0
21190: PUSH
21191: EMPTY
21192: LIST
21193: LIST
21194: PUSH
21195: LD_INT 2
21197: PUSH
21198: LD_INT 1
21200: PUSH
21201: EMPTY
21202: LIST
21203: LIST
21204: PUSH
21205: LD_INT 2
21207: PUSH
21208: LD_INT 2
21210: PUSH
21211: EMPTY
21212: LIST
21213: LIST
21214: PUSH
21215: LD_INT 1
21217: PUSH
21218: LD_INT 2
21220: PUSH
21221: EMPTY
21222: LIST
21223: LIST
21224: PUSH
21225: LD_INT 0
21227: PUSH
21228: LD_INT 2
21230: PUSH
21231: EMPTY
21232: LIST
21233: LIST
21234: PUSH
21235: LD_INT 1
21237: NEG
21238: PUSH
21239: LD_INT 1
21241: PUSH
21242: EMPTY
21243: LIST
21244: LIST
21245: PUSH
21246: LD_INT 2
21248: NEG
21249: PUSH
21250: LD_INT 0
21252: PUSH
21253: EMPTY
21254: LIST
21255: LIST
21256: PUSH
21257: LD_INT 2
21259: NEG
21260: PUSH
21261: LD_INT 1
21263: NEG
21264: PUSH
21265: EMPTY
21266: LIST
21267: LIST
21268: PUSH
21269: LD_INT 2
21271: NEG
21272: PUSH
21273: LD_INT 2
21275: NEG
21276: PUSH
21277: EMPTY
21278: LIST
21279: LIST
21280: PUSH
21281: LD_INT 3
21283: PUSH
21284: LD_INT 1
21286: PUSH
21287: EMPTY
21288: LIST
21289: LIST
21290: PUSH
21291: LD_INT 3
21293: PUSH
21294: LD_INT 2
21296: PUSH
21297: EMPTY
21298: LIST
21299: LIST
21300: PUSH
21301: LD_INT 2
21303: PUSH
21304: LD_INT 3
21306: PUSH
21307: EMPTY
21308: LIST
21309: LIST
21310: PUSH
21311: LD_INT 1
21313: PUSH
21314: LD_INT 3
21316: PUSH
21317: EMPTY
21318: LIST
21319: LIST
21320: PUSH
21321: EMPTY
21322: LIST
21323: LIST
21324: LIST
21325: LIST
21326: LIST
21327: LIST
21328: LIST
21329: LIST
21330: LIST
21331: LIST
21332: LIST
21333: LIST
21334: LIST
21335: LIST
21336: LIST
21337: LIST
21338: LIST
21339: LIST
21340: LIST
21341: LIST
21342: LIST
21343: LIST
21344: LIST
21345: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
21346: LD_ADDR_VAR 0 26
21350: PUSH
21351: LD_INT 0
21353: PUSH
21354: LD_INT 0
21356: PUSH
21357: EMPTY
21358: LIST
21359: LIST
21360: PUSH
21361: LD_INT 0
21363: PUSH
21364: LD_INT 1
21366: NEG
21367: PUSH
21368: EMPTY
21369: LIST
21370: LIST
21371: PUSH
21372: LD_INT 1
21374: PUSH
21375: LD_INT 0
21377: PUSH
21378: EMPTY
21379: LIST
21380: LIST
21381: PUSH
21382: LD_INT 1
21384: PUSH
21385: LD_INT 1
21387: PUSH
21388: EMPTY
21389: LIST
21390: LIST
21391: PUSH
21392: LD_INT 0
21394: PUSH
21395: LD_INT 1
21397: PUSH
21398: EMPTY
21399: LIST
21400: LIST
21401: PUSH
21402: LD_INT 1
21404: NEG
21405: PUSH
21406: LD_INT 0
21408: PUSH
21409: EMPTY
21410: LIST
21411: LIST
21412: PUSH
21413: LD_INT 1
21415: NEG
21416: PUSH
21417: LD_INT 1
21419: NEG
21420: PUSH
21421: EMPTY
21422: LIST
21423: LIST
21424: PUSH
21425: LD_INT 1
21427: NEG
21428: PUSH
21429: LD_INT 2
21431: NEG
21432: PUSH
21433: EMPTY
21434: LIST
21435: LIST
21436: PUSH
21437: LD_INT 0
21439: PUSH
21440: LD_INT 2
21442: NEG
21443: PUSH
21444: EMPTY
21445: LIST
21446: LIST
21447: PUSH
21448: LD_INT 1
21450: PUSH
21451: LD_INT 1
21453: NEG
21454: PUSH
21455: EMPTY
21456: LIST
21457: LIST
21458: PUSH
21459: LD_INT 2
21461: PUSH
21462: LD_INT 0
21464: PUSH
21465: EMPTY
21466: LIST
21467: LIST
21468: PUSH
21469: LD_INT 2
21471: PUSH
21472: LD_INT 1
21474: PUSH
21475: EMPTY
21476: LIST
21477: LIST
21478: PUSH
21479: LD_INT 2
21481: PUSH
21482: LD_INT 2
21484: PUSH
21485: EMPTY
21486: LIST
21487: LIST
21488: PUSH
21489: LD_INT 1
21491: PUSH
21492: LD_INT 2
21494: PUSH
21495: EMPTY
21496: LIST
21497: LIST
21498: PUSH
21499: LD_INT 0
21501: PUSH
21502: LD_INT 2
21504: PUSH
21505: EMPTY
21506: LIST
21507: LIST
21508: PUSH
21509: LD_INT 1
21511: NEG
21512: PUSH
21513: LD_INT 1
21515: PUSH
21516: EMPTY
21517: LIST
21518: LIST
21519: PUSH
21520: LD_INT 2
21522: NEG
21523: PUSH
21524: LD_INT 0
21526: PUSH
21527: EMPTY
21528: LIST
21529: LIST
21530: PUSH
21531: LD_INT 2
21533: NEG
21534: PUSH
21535: LD_INT 1
21537: NEG
21538: PUSH
21539: EMPTY
21540: LIST
21541: LIST
21542: PUSH
21543: LD_INT 2
21545: NEG
21546: PUSH
21547: LD_INT 2
21549: NEG
21550: PUSH
21551: EMPTY
21552: LIST
21553: LIST
21554: PUSH
21555: LD_INT 2
21557: PUSH
21558: LD_INT 3
21560: PUSH
21561: EMPTY
21562: LIST
21563: LIST
21564: PUSH
21565: LD_INT 1
21567: PUSH
21568: LD_INT 3
21570: PUSH
21571: EMPTY
21572: LIST
21573: LIST
21574: PUSH
21575: LD_INT 1
21577: NEG
21578: PUSH
21579: LD_INT 2
21581: PUSH
21582: EMPTY
21583: LIST
21584: LIST
21585: PUSH
21586: LD_INT 2
21588: NEG
21589: PUSH
21590: LD_INT 1
21592: PUSH
21593: EMPTY
21594: LIST
21595: LIST
21596: PUSH
21597: EMPTY
21598: LIST
21599: LIST
21600: LIST
21601: LIST
21602: LIST
21603: LIST
21604: LIST
21605: LIST
21606: LIST
21607: LIST
21608: LIST
21609: LIST
21610: LIST
21611: LIST
21612: LIST
21613: LIST
21614: LIST
21615: LIST
21616: LIST
21617: LIST
21618: LIST
21619: LIST
21620: LIST
21621: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21622: LD_ADDR_VAR 0 27
21626: PUSH
21627: LD_INT 0
21629: PUSH
21630: LD_INT 0
21632: PUSH
21633: EMPTY
21634: LIST
21635: LIST
21636: PUSH
21637: LD_INT 0
21639: PUSH
21640: LD_INT 1
21642: NEG
21643: PUSH
21644: EMPTY
21645: LIST
21646: LIST
21647: PUSH
21648: LD_INT 1
21650: PUSH
21651: LD_INT 0
21653: PUSH
21654: EMPTY
21655: LIST
21656: LIST
21657: PUSH
21658: LD_INT 1
21660: PUSH
21661: LD_INT 1
21663: PUSH
21664: EMPTY
21665: LIST
21666: LIST
21667: PUSH
21668: LD_INT 0
21670: PUSH
21671: LD_INT 1
21673: PUSH
21674: EMPTY
21675: LIST
21676: LIST
21677: PUSH
21678: LD_INT 1
21680: NEG
21681: PUSH
21682: LD_INT 0
21684: PUSH
21685: EMPTY
21686: LIST
21687: LIST
21688: PUSH
21689: LD_INT 1
21691: NEG
21692: PUSH
21693: LD_INT 1
21695: NEG
21696: PUSH
21697: EMPTY
21698: LIST
21699: LIST
21700: PUSH
21701: LD_INT 1
21703: NEG
21704: PUSH
21705: LD_INT 2
21707: NEG
21708: PUSH
21709: EMPTY
21710: LIST
21711: LIST
21712: PUSH
21713: LD_INT 0
21715: PUSH
21716: LD_INT 2
21718: NEG
21719: PUSH
21720: EMPTY
21721: LIST
21722: LIST
21723: PUSH
21724: LD_INT 1
21726: PUSH
21727: LD_INT 1
21729: NEG
21730: PUSH
21731: EMPTY
21732: LIST
21733: LIST
21734: PUSH
21735: LD_INT 2
21737: PUSH
21738: LD_INT 0
21740: PUSH
21741: EMPTY
21742: LIST
21743: LIST
21744: PUSH
21745: LD_INT 2
21747: PUSH
21748: LD_INT 1
21750: PUSH
21751: EMPTY
21752: LIST
21753: LIST
21754: PUSH
21755: LD_INT 2
21757: PUSH
21758: LD_INT 2
21760: PUSH
21761: EMPTY
21762: LIST
21763: LIST
21764: PUSH
21765: LD_INT 1
21767: PUSH
21768: LD_INT 2
21770: PUSH
21771: EMPTY
21772: LIST
21773: LIST
21774: PUSH
21775: LD_INT 0
21777: PUSH
21778: LD_INT 2
21780: PUSH
21781: EMPTY
21782: LIST
21783: LIST
21784: PUSH
21785: LD_INT 1
21787: NEG
21788: PUSH
21789: LD_INT 1
21791: PUSH
21792: EMPTY
21793: LIST
21794: LIST
21795: PUSH
21796: LD_INT 2
21798: NEG
21799: PUSH
21800: LD_INT 0
21802: PUSH
21803: EMPTY
21804: LIST
21805: LIST
21806: PUSH
21807: LD_INT 2
21809: NEG
21810: PUSH
21811: LD_INT 1
21813: NEG
21814: PUSH
21815: EMPTY
21816: LIST
21817: LIST
21818: PUSH
21819: LD_INT 2
21821: NEG
21822: PUSH
21823: LD_INT 2
21825: NEG
21826: PUSH
21827: EMPTY
21828: LIST
21829: LIST
21830: PUSH
21831: LD_INT 1
21833: NEG
21834: PUSH
21835: LD_INT 2
21837: PUSH
21838: EMPTY
21839: LIST
21840: LIST
21841: PUSH
21842: LD_INT 2
21844: NEG
21845: PUSH
21846: LD_INT 1
21848: PUSH
21849: EMPTY
21850: LIST
21851: LIST
21852: PUSH
21853: LD_INT 3
21855: NEG
21856: PUSH
21857: LD_INT 1
21859: NEG
21860: PUSH
21861: EMPTY
21862: LIST
21863: LIST
21864: PUSH
21865: LD_INT 3
21867: NEG
21868: PUSH
21869: LD_INT 2
21871: NEG
21872: PUSH
21873: EMPTY
21874: LIST
21875: LIST
21876: PUSH
21877: EMPTY
21878: LIST
21879: LIST
21880: LIST
21881: LIST
21882: LIST
21883: LIST
21884: LIST
21885: LIST
21886: LIST
21887: LIST
21888: LIST
21889: LIST
21890: LIST
21891: LIST
21892: LIST
21893: LIST
21894: LIST
21895: LIST
21896: LIST
21897: LIST
21898: LIST
21899: LIST
21900: LIST
21901: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21902: LD_ADDR_VAR 0 28
21906: PUSH
21907: LD_INT 0
21909: PUSH
21910: LD_INT 0
21912: PUSH
21913: EMPTY
21914: LIST
21915: LIST
21916: PUSH
21917: LD_INT 0
21919: PUSH
21920: LD_INT 1
21922: NEG
21923: PUSH
21924: EMPTY
21925: LIST
21926: LIST
21927: PUSH
21928: LD_INT 1
21930: PUSH
21931: LD_INT 0
21933: PUSH
21934: EMPTY
21935: LIST
21936: LIST
21937: PUSH
21938: LD_INT 1
21940: PUSH
21941: LD_INT 1
21943: PUSH
21944: EMPTY
21945: LIST
21946: LIST
21947: PUSH
21948: LD_INT 0
21950: PUSH
21951: LD_INT 1
21953: PUSH
21954: EMPTY
21955: LIST
21956: LIST
21957: PUSH
21958: LD_INT 1
21960: NEG
21961: PUSH
21962: LD_INT 0
21964: PUSH
21965: EMPTY
21966: LIST
21967: LIST
21968: PUSH
21969: LD_INT 1
21971: NEG
21972: PUSH
21973: LD_INT 1
21975: NEG
21976: PUSH
21977: EMPTY
21978: LIST
21979: LIST
21980: PUSH
21981: LD_INT 1
21983: NEG
21984: PUSH
21985: LD_INT 2
21987: NEG
21988: PUSH
21989: EMPTY
21990: LIST
21991: LIST
21992: PUSH
21993: LD_INT 0
21995: PUSH
21996: LD_INT 2
21998: NEG
21999: PUSH
22000: EMPTY
22001: LIST
22002: LIST
22003: PUSH
22004: LD_INT 1
22006: PUSH
22007: LD_INT 1
22009: NEG
22010: PUSH
22011: EMPTY
22012: LIST
22013: LIST
22014: PUSH
22015: LD_INT 2
22017: PUSH
22018: LD_INT 0
22020: PUSH
22021: EMPTY
22022: LIST
22023: LIST
22024: PUSH
22025: LD_INT 2
22027: PUSH
22028: LD_INT 1
22030: PUSH
22031: EMPTY
22032: LIST
22033: LIST
22034: PUSH
22035: LD_INT 2
22037: PUSH
22038: LD_INT 2
22040: PUSH
22041: EMPTY
22042: LIST
22043: LIST
22044: PUSH
22045: LD_INT 1
22047: PUSH
22048: LD_INT 2
22050: PUSH
22051: EMPTY
22052: LIST
22053: LIST
22054: PUSH
22055: LD_INT 0
22057: PUSH
22058: LD_INT 2
22060: PUSH
22061: EMPTY
22062: LIST
22063: LIST
22064: PUSH
22065: LD_INT 1
22067: NEG
22068: PUSH
22069: LD_INT 1
22071: PUSH
22072: EMPTY
22073: LIST
22074: LIST
22075: PUSH
22076: LD_INT 2
22078: NEG
22079: PUSH
22080: LD_INT 0
22082: PUSH
22083: EMPTY
22084: LIST
22085: LIST
22086: PUSH
22087: LD_INT 2
22089: NEG
22090: PUSH
22091: LD_INT 1
22093: NEG
22094: PUSH
22095: EMPTY
22096: LIST
22097: LIST
22098: PUSH
22099: LD_INT 2
22101: NEG
22102: PUSH
22103: LD_INT 2
22105: NEG
22106: PUSH
22107: EMPTY
22108: LIST
22109: LIST
22110: PUSH
22111: LD_INT 2
22113: NEG
22114: PUSH
22115: LD_INT 3
22117: NEG
22118: PUSH
22119: EMPTY
22120: LIST
22121: LIST
22122: PUSH
22123: LD_INT 1
22125: NEG
22126: PUSH
22127: LD_INT 3
22129: NEG
22130: PUSH
22131: EMPTY
22132: LIST
22133: LIST
22134: PUSH
22135: LD_INT 3
22137: NEG
22138: PUSH
22139: LD_INT 1
22141: NEG
22142: PUSH
22143: EMPTY
22144: LIST
22145: LIST
22146: PUSH
22147: LD_INT 3
22149: NEG
22150: PUSH
22151: LD_INT 2
22153: NEG
22154: PUSH
22155: EMPTY
22156: LIST
22157: LIST
22158: PUSH
22159: EMPTY
22160: LIST
22161: LIST
22162: LIST
22163: LIST
22164: LIST
22165: LIST
22166: LIST
22167: LIST
22168: LIST
22169: LIST
22170: LIST
22171: LIST
22172: LIST
22173: LIST
22174: LIST
22175: LIST
22176: LIST
22177: LIST
22178: LIST
22179: LIST
22180: LIST
22181: LIST
22182: LIST
22183: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22184: LD_ADDR_VAR 0 29
22188: PUSH
22189: LD_INT 0
22191: PUSH
22192: LD_INT 0
22194: PUSH
22195: EMPTY
22196: LIST
22197: LIST
22198: PUSH
22199: LD_INT 0
22201: PUSH
22202: LD_INT 1
22204: NEG
22205: PUSH
22206: EMPTY
22207: LIST
22208: LIST
22209: PUSH
22210: LD_INT 1
22212: PUSH
22213: LD_INT 0
22215: PUSH
22216: EMPTY
22217: LIST
22218: LIST
22219: PUSH
22220: LD_INT 1
22222: PUSH
22223: LD_INT 1
22225: PUSH
22226: EMPTY
22227: LIST
22228: LIST
22229: PUSH
22230: LD_INT 0
22232: PUSH
22233: LD_INT 1
22235: PUSH
22236: EMPTY
22237: LIST
22238: LIST
22239: PUSH
22240: LD_INT 1
22242: NEG
22243: PUSH
22244: LD_INT 0
22246: PUSH
22247: EMPTY
22248: LIST
22249: LIST
22250: PUSH
22251: LD_INT 1
22253: NEG
22254: PUSH
22255: LD_INT 1
22257: NEG
22258: PUSH
22259: EMPTY
22260: LIST
22261: LIST
22262: PUSH
22263: LD_INT 1
22265: NEG
22266: PUSH
22267: LD_INT 2
22269: NEG
22270: PUSH
22271: EMPTY
22272: LIST
22273: LIST
22274: PUSH
22275: LD_INT 0
22277: PUSH
22278: LD_INT 2
22280: NEG
22281: PUSH
22282: EMPTY
22283: LIST
22284: LIST
22285: PUSH
22286: LD_INT 1
22288: PUSH
22289: LD_INT 1
22291: NEG
22292: PUSH
22293: EMPTY
22294: LIST
22295: LIST
22296: PUSH
22297: LD_INT 2
22299: PUSH
22300: LD_INT 0
22302: PUSH
22303: EMPTY
22304: LIST
22305: LIST
22306: PUSH
22307: LD_INT 2
22309: PUSH
22310: LD_INT 1
22312: PUSH
22313: EMPTY
22314: LIST
22315: LIST
22316: PUSH
22317: LD_INT 1
22319: PUSH
22320: LD_INT 2
22322: PUSH
22323: EMPTY
22324: LIST
22325: LIST
22326: PUSH
22327: LD_INT 0
22329: PUSH
22330: LD_INT 2
22332: PUSH
22333: EMPTY
22334: LIST
22335: LIST
22336: PUSH
22337: LD_INT 1
22339: NEG
22340: PUSH
22341: LD_INT 1
22343: PUSH
22344: EMPTY
22345: LIST
22346: LIST
22347: PUSH
22348: LD_INT 2
22350: NEG
22351: PUSH
22352: LD_INT 1
22354: NEG
22355: PUSH
22356: EMPTY
22357: LIST
22358: LIST
22359: PUSH
22360: LD_INT 2
22362: NEG
22363: PUSH
22364: LD_INT 2
22366: NEG
22367: PUSH
22368: EMPTY
22369: LIST
22370: LIST
22371: PUSH
22372: LD_INT 2
22374: NEG
22375: PUSH
22376: LD_INT 3
22378: NEG
22379: PUSH
22380: EMPTY
22381: LIST
22382: LIST
22383: PUSH
22384: LD_INT 2
22386: PUSH
22387: LD_INT 1
22389: NEG
22390: PUSH
22391: EMPTY
22392: LIST
22393: LIST
22394: PUSH
22395: LD_INT 3
22397: PUSH
22398: LD_INT 1
22400: PUSH
22401: EMPTY
22402: LIST
22403: LIST
22404: PUSH
22405: LD_INT 1
22407: PUSH
22408: LD_INT 3
22410: PUSH
22411: EMPTY
22412: LIST
22413: LIST
22414: PUSH
22415: LD_INT 1
22417: NEG
22418: PUSH
22419: LD_INT 2
22421: PUSH
22422: EMPTY
22423: LIST
22424: LIST
22425: PUSH
22426: LD_INT 3
22428: NEG
22429: PUSH
22430: LD_INT 2
22432: NEG
22433: PUSH
22434: EMPTY
22435: LIST
22436: LIST
22437: PUSH
22438: EMPTY
22439: LIST
22440: LIST
22441: LIST
22442: LIST
22443: LIST
22444: LIST
22445: LIST
22446: LIST
22447: LIST
22448: LIST
22449: LIST
22450: LIST
22451: LIST
22452: LIST
22453: LIST
22454: LIST
22455: LIST
22456: LIST
22457: LIST
22458: LIST
22459: LIST
22460: LIST
22461: LIST
22462: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22463: LD_ADDR_VAR 0 30
22467: PUSH
22468: LD_INT 0
22470: PUSH
22471: LD_INT 0
22473: PUSH
22474: EMPTY
22475: LIST
22476: LIST
22477: PUSH
22478: LD_INT 0
22480: PUSH
22481: LD_INT 1
22483: NEG
22484: PUSH
22485: EMPTY
22486: LIST
22487: LIST
22488: PUSH
22489: LD_INT 1
22491: PUSH
22492: LD_INT 0
22494: PUSH
22495: EMPTY
22496: LIST
22497: LIST
22498: PUSH
22499: LD_INT 1
22501: PUSH
22502: LD_INT 1
22504: PUSH
22505: EMPTY
22506: LIST
22507: LIST
22508: PUSH
22509: LD_INT 0
22511: PUSH
22512: LD_INT 1
22514: PUSH
22515: EMPTY
22516: LIST
22517: LIST
22518: PUSH
22519: LD_INT 1
22521: NEG
22522: PUSH
22523: LD_INT 0
22525: PUSH
22526: EMPTY
22527: LIST
22528: LIST
22529: PUSH
22530: LD_INT 1
22532: NEG
22533: PUSH
22534: LD_INT 1
22536: NEG
22537: PUSH
22538: EMPTY
22539: LIST
22540: LIST
22541: PUSH
22542: LD_INT 1
22544: NEG
22545: PUSH
22546: LD_INT 2
22548: NEG
22549: PUSH
22550: EMPTY
22551: LIST
22552: LIST
22553: PUSH
22554: LD_INT 0
22556: PUSH
22557: LD_INT 2
22559: NEG
22560: PUSH
22561: EMPTY
22562: LIST
22563: LIST
22564: PUSH
22565: LD_INT 1
22567: PUSH
22568: LD_INT 1
22570: NEG
22571: PUSH
22572: EMPTY
22573: LIST
22574: LIST
22575: PUSH
22576: LD_INT 2
22578: PUSH
22579: LD_INT 0
22581: PUSH
22582: EMPTY
22583: LIST
22584: LIST
22585: PUSH
22586: LD_INT 2
22588: PUSH
22589: LD_INT 1
22591: PUSH
22592: EMPTY
22593: LIST
22594: LIST
22595: PUSH
22596: LD_INT 2
22598: PUSH
22599: LD_INT 2
22601: PUSH
22602: EMPTY
22603: LIST
22604: LIST
22605: PUSH
22606: LD_INT 1
22608: PUSH
22609: LD_INT 2
22611: PUSH
22612: EMPTY
22613: LIST
22614: LIST
22615: PUSH
22616: LD_INT 1
22618: NEG
22619: PUSH
22620: LD_INT 1
22622: PUSH
22623: EMPTY
22624: LIST
22625: LIST
22626: PUSH
22627: LD_INT 2
22629: NEG
22630: PUSH
22631: LD_INT 0
22633: PUSH
22634: EMPTY
22635: LIST
22636: LIST
22637: PUSH
22638: LD_INT 2
22640: NEG
22641: PUSH
22642: LD_INT 1
22644: NEG
22645: PUSH
22646: EMPTY
22647: LIST
22648: LIST
22649: PUSH
22650: LD_INT 1
22652: NEG
22653: PUSH
22654: LD_INT 3
22656: NEG
22657: PUSH
22658: EMPTY
22659: LIST
22660: LIST
22661: PUSH
22662: LD_INT 1
22664: PUSH
22665: LD_INT 2
22667: NEG
22668: PUSH
22669: EMPTY
22670: LIST
22671: LIST
22672: PUSH
22673: LD_INT 3
22675: PUSH
22676: LD_INT 2
22678: PUSH
22679: EMPTY
22680: LIST
22681: LIST
22682: PUSH
22683: LD_INT 2
22685: PUSH
22686: LD_INT 3
22688: PUSH
22689: EMPTY
22690: LIST
22691: LIST
22692: PUSH
22693: LD_INT 2
22695: NEG
22696: PUSH
22697: LD_INT 1
22699: PUSH
22700: EMPTY
22701: LIST
22702: LIST
22703: PUSH
22704: LD_INT 3
22706: NEG
22707: PUSH
22708: LD_INT 1
22710: NEG
22711: PUSH
22712: EMPTY
22713: LIST
22714: LIST
22715: PUSH
22716: EMPTY
22717: LIST
22718: LIST
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: LIST
22724: LIST
22725: LIST
22726: LIST
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: LIST
22732: LIST
22733: LIST
22734: LIST
22735: LIST
22736: LIST
22737: LIST
22738: LIST
22739: LIST
22740: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22741: LD_ADDR_VAR 0 31
22745: PUSH
22746: LD_INT 0
22748: PUSH
22749: LD_INT 0
22751: PUSH
22752: EMPTY
22753: LIST
22754: LIST
22755: PUSH
22756: LD_INT 0
22758: PUSH
22759: LD_INT 1
22761: NEG
22762: PUSH
22763: EMPTY
22764: LIST
22765: LIST
22766: PUSH
22767: LD_INT 1
22769: PUSH
22770: LD_INT 0
22772: PUSH
22773: EMPTY
22774: LIST
22775: LIST
22776: PUSH
22777: LD_INT 1
22779: PUSH
22780: LD_INT 1
22782: PUSH
22783: EMPTY
22784: LIST
22785: LIST
22786: PUSH
22787: LD_INT 0
22789: PUSH
22790: LD_INT 1
22792: PUSH
22793: EMPTY
22794: LIST
22795: LIST
22796: PUSH
22797: LD_INT 1
22799: NEG
22800: PUSH
22801: LD_INT 0
22803: PUSH
22804: EMPTY
22805: LIST
22806: LIST
22807: PUSH
22808: LD_INT 1
22810: NEG
22811: PUSH
22812: LD_INT 1
22814: NEG
22815: PUSH
22816: EMPTY
22817: LIST
22818: LIST
22819: PUSH
22820: LD_INT 1
22822: NEG
22823: PUSH
22824: LD_INT 2
22826: NEG
22827: PUSH
22828: EMPTY
22829: LIST
22830: LIST
22831: PUSH
22832: LD_INT 1
22834: PUSH
22835: LD_INT 1
22837: NEG
22838: PUSH
22839: EMPTY
22840: LIST
22841: LIST
22842: PUSH
22843: LD_INT 2
22845: PUSH
22846: LD_INT 0
22848: PUSH
22849: EMPTY
22850: LIST
22851: LIST
22852: PUSH
22853: LD_INT 2
22855: PUSH
22856: LD_INT 1
22858: PUSH
22859: EMPTY
22860: LIST
22861: LIST
22862: PUSH
22863: LD_INT 2
22865: PUSH
22866: LD_INT 2
22868: PUSH
22869: EMPTY
22870: LIST
22871: LIST
22872: PUSH
22873: LD_INT 1
22875: PUSH
22876: LD_INT 2
22878: PUSH
22879: EMPTY
22880: LIST
22881: LIST
22882: PUSH
22883: LD_INT 0
22885: PUSH
22886: LD_INT 2
22888: PUSH
22889: EMPTY
22890: LIST
22891: LIST
22892: PUSH
22893: LD_INT 1
22895: NEG
22896: PUSH
22897: LD_INT 1
22899: PUSH
22900: EMPTY
22901: LIST
22902: LIST
22903: PUSH
22904: LD_INT 2
22906: NEG
22907: PUSH
22908: LD_INT 1
22910: NEG
22911: PUSH
22912: EMPTY
22913: LIST
22914: LIST
22915: PUSH
22916: LD_INT 2
22918: NEG
22919: PUSH
22920: LD_INT 2
22922: NEG
22923: PUSH
22924: EMPTY
22925: LIST
22926: LIST
22927: PUSH
22928: LD_INT 2
22930: NEG
22931: PUSH
22932: LD_INT 3
22934: NEG
22935: PUSH
22936: EMPTY
22937: LIST
22938: LIST
22939: PUSH
22940: LD_INT 2
22942: PUSH
22943: LD_INT 1
22945: NEG
22946: PUSH
22947: EMPTY
22948: LIST
22949: LIST
22950: PUSH
22951: LD_INT 3
22953: PUSH
22954: LD_INT 1
22956: PUSH
22957: EMPTY
22958: LIST
22959: LIST
22960: PUSH
22961: LD_INT 1
22963: PUSH
22964: LD_INT 3
22966: PUSH
22967: EMPTY
22968: LIST
22969: LIST
22970: PUSH
22971: LD_INT 1
22973: NEG
22974: PUSH
22975: LD_INT 2
22977: PUSH
22978: EMPTY
22979: LIST
22980: LIST
22981: PUSH
22982: LD_INT 3
22984: NEG
22985: PUSH
22986: LD_INT 2
22988: NEG
22989: PUSH
22990: EMPTY
22991: LIST
22992: LIST
22993: PUSH
22994: EMPTY
22995: LIST
22996: LIST
22997: LIST
22998: LIST
22999: LIST
23000: LIST
23001: LIST
23002: LIST
23003: LIST
23004: LIST
23005: LIST
23006: LIST
23007: LIST
23008: LIST
23009: LIST
23010: LIST
23011: LIST
23012: LIST
23013: LIST
23014: LIST
23015: LIST
23016: LIST
23017: LIST
23018: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23019: LD_ADDR_VAR 0 32
23023: PUSH
23024: LD_INT 0
23026: PUSH
23027: LD_INT 0
23029: PUSH
23030: EMPTY
23031: LIST
23032: LIST
23033: PUSH
23034: LD_INT 0
23036: PUSH
23037: LD_INT 1
23039: NEG
23040: PUSH
23041: EMPTY
23042: LIST
23043: LIST
23044: PUSH
23045: LD_INT 1
23047: PUSH
23048: LD_INT 0
23050: PUSH
23051: EMPTY
23052: LIST
23053: LIST
23054: PUSH
23055: LD_INT 1
23057: PUSH
23058: LD_INT 1
23060: PUSH
23061: EMPTY
23062: LIST
23063: LIST
23064: PUSH
23065: LD_INT 0
23067: PUSH
23068: LD_INT 1
23070: PUSH
23071: EMPTY
23072: LIST
23073: LIST
23074: PUSH
23075: LD_INT 1
23077: NEG
23078: PUSH
23079: LD_INT 0
23081: PUSH
23082: EMPTY
23083: LIST
23084: LIST
23085: PUSH
23086: LD_INT 1
23088: NEG
23089: PUSH
23090: LD_INT 1
23092: NEG
23093: PUSH
23094: EMPTY
23095: LIST
23096: LIST
23097: PUSH
23098: LD_INT 1
23100: NEG
23101: PUSH
23102: LD_INT 2
23104: NEG
23105: PUSH
23106: EMPTY
23107: LIST
23108: LIST
23109: PUSH
23110: LD_INT 0
23112: PUSH
23113: LD_INT 2
23115: NEG
23116: PUSH
23117: EMPTY
23118: LIST
23119: LIST
23120: PUSH
23121: LD_INT 1
23123: PUSH
23124: LD_INT 1
23126: NEG
23127: PUSH
23128: EMPTY
23129: LIST
23130: LIST
23131: PUSH
23132: LD_INT 2
23134: PUSH
23135: LD_INT 1
23137: PUSH
23138: EMPTY
23139: LIST
23140: LIST
23141: PUSH
23142: LD_INT 2
23144: PUSH
23145: LD_INT 2
23147: PUSH
23148: EMPTY
23149: LIST
23150: LIST
23151: PUSH
23152: LD_INT 1
23154: PUSH
23155: LD_INT 2
23157: PUSH
23158: EMPTY
23159: LIST
23160: LIST
23161: PUSH
23162: LD_INT 0
23164: PUSH
23165: LD_INT 2
23167: PUSH
23168: EMPTY
23169: LIST
23170: LIST
23171: PUSH
23172: LD_INT 1
23174: NEG
23175: PUSH
23176: LD_INT 1
23178: PUSH
23179: EMPTY
23180: LIST
23181: LIST
23182: PUSH
23183: LD_INT 2
23185: NEG
23186: PUSH
23187: LD_INT 0
23189: PUSH
23190: EMPTY
23191: LIST
23192: LIST
23193: PUSH
23194: LD_INT 2
23196: NEG
23197: PUSH
23198: LD_INT 1
23200: NEG
23201: PUSH
23202: EMPTY
23203: LIST
23204: LIST
23205: PUSH
23206: LD_INT 1
23208: NEG
23209: PUSH
23210: LD_INT 3
23212: NEG
23213: PUSH
23214: EMPTY
23215: LIST
23216: LIST
23217: PUSH
23218: LD_INT 1
23220: PUSH
23221: LD_INT 2
23223: NEG
23224: PUSH
23225: EMPTY
23226: LIST
23227: LIST
23228: PUSH
23229: LD_INT 3
23231: PUSH
23232: LD_INT 2
23234: PUSH
23235: EMPTY
23236: LIST
23237: LIST
23238: PUSH
23239: LD_INT 2
23241: PUSH
23242: LD_INT 3
23244: PUSH
23245: EMPTY
23246: LIST
23247: LIST
23248: PUSH
23249: LD_INT 2
23251: NEG
23252: PUSH
23253: LD_INT 1
23255: PUSH
23256: EMPTY
23257: LIST
23258: LIST
23259: PUSH
23260: LD_INT 3
23262: NEG
23263: PUSH
23264: LD_INT 1
23266: NEG
23267: PUSH
23268: EMPTY
23269: LIST
23270: LIST
23271: PUSH
23272: EMPTY
23273: LIST
23274: LIST
23275: LIST
23276: LIST
23277: LIST
23278: LIST
23279: LIST
23280: LIST
23281: LIST
23282: LIST
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: LIST
23288: LIST
23289: LIST
23290: LIST
23291: LIST
23292: LIST
23293: LIST
23294: LIST
23295: LIST
23296: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23297: LD_ADDR_VAR 0 33
23301: PUSH
23302: LD_INT 0
23304: PUSH
23305: LD_INT 0
23307: PUSH
23308: EMPTY
23309: LIST
23310: LIST
23311: PUSH
23312: LD_INT 0
23314: PUSH
23315: LD_INT 1
23317: NEG
23318: PUSH
23319: EMPTY
23320: LIST
23321: LIST
23322: PUSH
23323: LD_INT 1
23325: PUSH
23326: LD_INT 0
23328: PUSH
23329: EMPTY
23330: LIST
23331: LIST
23332: PUSH
23333: LD_INT 1
23335: PUSH
23336: LD_INT 1
23338: PUSH
23339: EMPTY
23340: LIST
23341: LIST
23342: PUSH
23343: LD_INT 0
23345: PUSH
23346: LD_INT 1
23348: PUSH
23349: EMPTY
23350: LIST
23351: LIST
23352: PUSH
23353: LD_INT 1
23355: NEG
23356: PUSH
23357: LD_INT 0
23359: PUSH
23360: EMPTY
23361: LIST
23362: LIST
23363: PUSH
23364: LD_INT 1
23366: NEG
23367: PUSH
23368: LD_INT 1
23370: NEG
23371: PUSH
23372: EMPTY
23373: LIST
23374: LIST
23375: PUSH
23376: LD_INT 1
23378: NEG
23379: PUSH
23380: LD_INT 2
23382: NEG
23383: PUSH
23384: EMPTY
23385: LIST
23386: LIST
23387: PUSH
23388: LD_INT 1
23390: PUSH
23391: LD_INT 1
23393: NEG
23394: PUSH
23395: EMPTY
23396: LIST
23397: LIST
23398: PUSH
23399: LD_INT 2
23401: PUSH
23402: LD_INT 0
23404: PUSH
23405: EMPTY
23406: LIST
23407: LIST
23408: PUSH
23409: LD_INT 2
23411: PUSH
23412: LD_INT 1
23414: PUSH
23415: EMPTY
23416: LIST
23417: LIST
23418: PUSH
23419: LD_INT 1
23421: PUSH
23422: LD_INT 2
23424: PUSH
23425: EMPTY
23426: LIST
23427: LIST
23428: PUSH
23429: LD_INT 0
23431: PUSH
23432: LD_INT 2
23434: PUSH
23435: EMPTY
23436: LIST
23437: LIST
23438: PUSH
23439: LD_INT 1
23441: NEG
23442: PUSH
23443: LD_INT 1
23445: PUSH
23446: EMPTY
23447: LIST
23448: LIST
23449: PUSH
23450: LD_INT 2
23452: NEG
23453: PUSH
23454: LD_INT 0
23456: PUSH
23457: EMPTY
23458: LIST
23459: LIST
23460: PUSH
23461: LD_INT 2
23463: NEG
23464: PUSH
23465: LD_INT 1
23467: NEG
23468: PUSH
23469: EMPTY
23470: LIST
23471: LIST
23472: PUSH
23473: LD_INT 2
23475: NEG
23476: PUSH
23477: LD_INT 2
23479: NEG
23480: PUSH
23481: EMPTY
23482: LIST
23483: LIST
23484: PUSH
23485: LD_INT 2
23487: NEG
23488: PUSH
23489: LD_INT 3
23491: NEG
23492: PUSH
23493: EMPTY
23494: LIST
23495: LIST
23496: PUSH
23497: LD_INT 2
23499: PUSH
23500: LD_INT 1
23502: NEG
23503: PUSH
23504: EMPTY
23505: LIST
23506: LIST
23507: PUSH
23508: LD_INT 3
23510: PUSH
23511: LD_INT 1
23513: PUSH
23514: EMPTY
23515: LIST
23516: LIST
23517: PUSH
23518: LD_INT 1
23520: PUSH
23521: LD_INT 3
23523: PUSH
23524: EMPTY
23525: LIST
23526: LIST
23527: PUSH
23528: LD_INT 1
23530: NEG
23531: PUSH
23532: LD_INT 2
23534: PUSH
23535: EMPTY
23536: LIST
23537: LIST
23538: PUSH
23539: LD_INT 3
23541: NEG
23542: PUSH
23543: LD_INT 2
23545: NEG
23546: PUSH
23547: EMPTY
23548: LIST
23549: LIST
23550: PUSH
23551: EMPTY
23552: LIST
23553: LIST
23554: LIST
23555: LIST
23556: LIST
23557: LIST
23558: LIST
23559: LIST
23560: LIST
23561: LIST
23562: LIST
23563: LIST
23564: LIST
23565: LIST
23566: LIST
23567: LIST
23568: LIST
23569: LIST
23570: LIST
23571: LIST
23572: LIST
23573: LIST
23574: LIST
23575: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23576: LD_ADDR_VAR 0 34
23580: PUSH
23581: LD_INT 0
23583: PUSH
23584: LD_INT 0
23586: PUSH
23587: EMPTY
23588: LIST
23589: LIST
23590: PUSH
23591: LD_INT 0
23593: PUSH
23594: LD_INT 1
23596: NEG
23597: PUSH
23598: EMPTY
23599: LIST
23600: LIST
23601: PUSH
23602: LD_INT 1
23604: PUSH
23605: LD_INT 0
23607: PUSH
23608: EMPTY
23609: LIST
23610: LIST
23611: PUSH
23612: LD_INT 1
23614: PUSH
23615: LD_INT 1
23617: PUSH
23618: EMPTY
23619: LIST
23620: LIST
23621: PUSH
23622: LD_INT 0
23624: PUSH
23625: LD_INT 1
23627: PUSH
23628: EMPTY
23629: LIST
23630: LIST
23631: PUSH
23632: LD_INT 1
23634: NEG
23635: PUSH
23636: LD_INT 0
23638: PUSH
23639: EMPTY
23640: LIST
23641: LIST
23642: PUSH
23643: LD_INT 1
23645: NEG
23646: PUSH
23647: LD_INT 1
23649: NEG
23650: PUSH
23651: EMPTY
23652: LIST
23653: LIST
23654: PUSH
23655: LD_INT 1
23657: NEG
23658: PUSH
23659: LD_INT 2
23661: NEG
23662: PUSH
23663: EMPTY
23664: LIST
23665: LIST
23666: PUSH
23667: LD_INT 0
23669: PUSH
23670: LD_INT 2
23672: NEG
23673: PUSH
23674: EMPTY
23675: LIST
23676: LIST
23677: PUSH
23678: LD_INT 1
23680: PUSH
23681: LD_INT 1
23683: NEG
23684: PUSH
23685: EMPTY
23686: LIST
23687: LIST
23688: PUSH
23689: LD_INT 2
23691: PUSH
23692: LD_INT 1
23694: PUSH
23695: EMPTY
23696: LIST
23697: LIST
23698: PUSH
23699: LD_INT 2
23701: PUSH
23702: LD_INT 2
23704: PUSH
23705: EMPTY
23706: LIST
23707: LIST
23708: PUSH
23709: LD_INT 1
23711: PUSH
23712: LD_INT 2
23714: PUSH
23715: EMPTY
23716: LIST
23717: LIST
23718: PUSH
23719: LD_INT 1
23721: NEG
23722: PUSH
23723: LD_INT 1
23725: PUSH
23726: EMPTY
23727: LIST
23728: LIST
23729: PUSH
23730: LD_INT 2
23732: NEG
23733: PUSH
23734: LD_INT 0
23736: PUSH
23737: EMPTY
23738: LIST
23739: LIST
23740: PUSH
23741: LD_INT 2
23743: NEG
23744: PUSH
23745: LD_INT 1
23747: NEG
23748: PUSH
23749: EMPTY
23750: LIST
23751: LIST
23752: PUSH
23753: LD_INT 2
23755: NEG
23756: PUSH
23757: LD_INT 2
23759: NEG
23760: PUSH
23761: EMPTY
23762: LIST
23763: LIST
23764: PUSH
23765: LD_INT 1
23767: NEG
23768: PUSH
23769: LD_INT 3
23771: NEG
23772: PUSH
23773: EMPTY
23774: LIST
23775: LIST
23776: PUSH
23777: LD_INT 1
23779: PUSH
23780: LD_INT 2
23782: NEG
23783: PUSH
23784: EMPTY
23785: LIST
23786: LIST
23787: PUSH
23788: LD_INT 3
23790: PUSH
23791: LD_INT 2
23793: PUSH
23794: EMPTY
23795: LIST
23796: LIST
23797: PUSH
23798: LD_INT 2
23800: PUSH
23801: LD_INT 3
23803: PUSH
23804: EMPTY
23805: LIST
23806: LIST
23807: PUSH
23808: LD_INT 2
23810: NEG
23811: PUSH
23812: LD_INT 1
23814: PUSH
23815: EMPTY
23816: LIST
23817: LIST
23818: PUSH
23819: LD_INT 3
23821: NEG
23822: PUSH
23823: LD_INT 1
23825: NEG
23826: PUSH
23827: EMPTY
23828: LIST
23829: LIST
23830: PUSH
23831: EMPTY
23832: LIST
23833: LIST
23834: LIST
23835: LIST
23836: LIST
23837: LIST
23838: LIST
23839: LIST
23840: LIST
23841: LIST
23842: LIST
23843: LIST
23844: LIST
23845: LIST
23846: LIST
23847: LIST
23848: LIST
23849: LIST
23850: LIST
23851: LIST
23852: LIST
23853: LIST
23854: LIST
23855: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23856: LD_ADDR_VAR 0 35
23860: PUSH
23861: LD_INT 0
23863: PUSH
23864: LD_INT 0
23866: PUSH
23867: EMPTY
23868: LIST
23869: LIST
23870: PUSH
23871: LD_INT 0
23873: PUSH
23874: LD_INT 1
23876: NEG
23877: PUSH
23878: EMPTY
23879: LIST
23880: LIST
23881: PUSH
23882: LD_INT 1
23884: PUSH
23885: LD_INT 0
23887: PUSH
23888: EMPTY
23889: LIST
23890: LIST
23891: PUSH
23892: LD_INT 1
23894: PUSH
23895: LD_INT 1
23897: PUSH
23898: EMPTY
23899: LIST
23900: LIST
23901: PUSH
23902: LD_INT 0
23904: PUSH
23905: LD_INT 1
23907: PUSH
23908: EMPTY
23909: LIST
23910: LIST
23911: PUSH
23912: LD_INT 1
23914: NEG
23915: PUSH
23916: LD_INT 0
23918: PUSH
23919: EMPTY
23920: LIST
23921: LIST
23922: PUSH
23923: LD_INT 1
23925: NEG
23926: PUSH
23927: LD_INT 1
23929: NEG
23930: PUSH
23931: EMPTY
23932: LIST
23933: LIST
23934: PUSH
23935: LD_INT 2
23937: PUSH
23938: LD_INT 1
23940: PUSH
23941: EMPTY
23942: LIST
23943: LIST
23944: PUSH
23945: LD_INT 2
23947: NEG
23948: PUSH
23949: LD_INT 1
23951: NEG
23952: PUSH
23953: EMPTY
23954: LIST
23955: LIST
23956: PUSH
23957: EMPTY
23958: LIST
23959: LIST
23960: LIST
23961: LIST
23962: LIST
23963: LIST
23964: LIST
23965: LIST
23966: LIST
23967: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23968: LD_ADDR_VAR 0 36
23972: PUSH
23973: LD_INT 0
23975: PUSH
23976: LD_INT 0
23978: PUSH
23979: EMPTY
23980: LIST
23981: LIST
23982: PUSH
23983: LD_INT 0
23985: PUSH
23986: LD_INT 1
23988: NEG
23989: PUSH
23990: EMPTY
23991: LIST
23992: LIST
23993: PUSH
23994: LD_INT 1
23996: PUSH
23997: LD_INT 0
23999: PUSH
24000: EMPTY
24001: LIST
24002: LIST
24003: PUSH
24004: LD_INT 1
24006: PUSH
24007: LD_INT 1
24009: PUSH
24010: EMPTY
24011: LIST
24012: LIST
24013: PUSH
24014: LD_INT 0
24016: PUSH
24017: LD_INT 1
24019: PUSH
24020: EMPTY
24021: LIST
24022: LIST
24023: PUSH
24024: LD_INT 1
24026: NEG
24027: PUSH
24028: LD_INT 0
24030: PUSH
24031: EMPTY
24032: LIST
24033: LIST
24034: PUSH
24035: LD_INT 1
24037: NEG
24038: PUSH
24039: LD_INT 1
24041: NEG
24042: PUSH
24043: EMPTY
24044: LIST
24045: LIST
24046: PUSH
24047: LD_INT 1
24049: NEG
24050: PUSH
24051: LD_INT 2
24053: NEG
24054: PUSH
24055: EMPTY
24056: LIST
24057: LIST
24058: PUSH
24059: LD_INT 1
24061: PUSH
24062: LD_INT 2
24064: PUSH
24065: EMPTY
24066: LIST
24067: LIST
24068: PUSH
24069: EMPTY
24070: LIST
24071: LIST
24072: LIST
24073: LIST
24074: LIST
24075: LIST
24076: LIST
24077: LIST
24078: LIST
24079: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24080: LD_ADDR_VAR 0 37
24084: PUSH
24085: LD_INT 0
24087: PUSH
24088: LD_INT 0
24090: PUSH
24091: EMPTY
24092: LIST
24093: LIST
24094: PUSH
24095: LD_INT 0
24097: PUSH
24098: LD_INT 1
24100: NEG
24101: PUSH
24102: EMPTY
24103: LIST
24104: LIST
24105: PUSH
24106: LD_INT 1
24108: PUSH
24109: LD_INT 0
24111: PUSH
24112: EMPTY
24113: LIST
24114: LIST
24115: PUSH
24116: LD_INT 1
24118: PUSH
24119: LD_INT 1
24121: PUSH
24122: EMPTY
24123: LIST
24124: LIST
24125: PUSH
24126: LD_INT 0
24128: PUSH
24129: LD_INT 1
24131: PUSH
24132: EMPTY
24133: LIST
24134: LIST
24135: PUSH
24136: LD_INT 1
24138: NEG
24139: PUSH
24140: LD_INT 0
24142: PUSH
24143: EMPTY
24144: LIST
24145: LIST
24146: PUSH
24147: LD_INT 1
24149: NEG
24150: PUSH
24151: LD_INT 1
24153: NEG
24154: PUSH
24155: EMPTY
24156: LIST
24157: LIST
24158: PUSH
24159: LD_INT 1
24161: PUSH
24162: LD_INT 1
24164: NEG
24165: PUSH
24166: EMPTY
24167: LIST
24168: LIST
24169: PUSH
24170: LD_INT 1
24172: NEG
24173: PUSH
24174: LD_INT 1
24176: PUSH
24177: EMPTY
24178: LIST
24179: LIST
24180: PUSH
24181: EMPTY
24182: LIST
24183: LIST
24184: LIST
24185: LIST
24186: LIST
24187: LIST
24188: LIST
24189: LIST
24190: LIST
24191: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
24192: LD_ADDR_VAR 0 38
24196: PUSH
24197: LD_INT 0
24199: PUSH
24200: LD_INT 0
24202: PUSH
24203: EMPTY
24204: LIST
24205: LIST
24206: PUSH
24207: LD_INT 0
24209: PUSH
24210: LD_INT 1
24212: NEG
24213: PUSH
24214: EMPTY
24215: LIST
24216: LIST
24217: PUSH
24218: LD_INT 1
24220: PUSH
24221: LD_INT 0
24223: PUSH
24224: EMPTY
24225: LIST
24226: LIST
24227: PUSH
24228: LD_INT 1
24230: PUSH
24231: LD_INT 1
24233: PUSH
24234: EMPTY
24235: LIST
24236: LIST
24237: PUSH
24238: LD_INT 0
24240: PUSH
24241: LD_INT 1
24243: PUSH
24244: EMPTY
24245: LIST
24246: LIST
24247: PUSH
24248: LD_INT 1
24250: NEG
24251: PUSH
24252: LD_INT 0
24254: PUSH
24255: EMPTY
24256: LIST
24257: LIST
24258: PUSH
24259: LD_INT 1
24261: NEG
24262: PUSH
24263: LD_INT 1
24265: NEG
24266: PUSH
24267: EMPTY
24268: LIST
24269: LIST
24270: PUSH
24271: LD_INT 2
24273: PUSH
24274: LD_INT 1
24276: PUSH
24277: EMPTY
24278: LIST
24279: LIST
24280: PUSH
24281: LD_INT 2
24283: NEG
24284: PUSH
24285: LD_INT 1
24287: NEG
24288: PUSH
24289: EMPTY
24290: LIST
24291: LIST
24292: PUSH
24293: EMPTY
24294: LIST
24295: LIST
24296: LIST
24297: LIST
24298: LIST
24299: LIST
24300: LIST
24301: LIST
24302: LIST
24303: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
24304: LD_ADDR_VAR 0 39
24308: PUSH
24309: LD_INT 0
24311: PUSH
24312: LD_INT 0
24314: PUSH
24315: EMPTY
24316: LIST
24317: LIST
24318: PUSH
24319: LD_INT 0
24321: PUSH
24322: LD_INT 1
24324: NEG
24325: PUSH
24326: EMPTY
24327: LIST
24328: LIST
24329: PUSH
24330: LD_INT 1
24332: PUSH
24333: LD_INT 0
24335: PUSH
24336: EMPTY
24337: LIST
24338: LIST
24339: PUSH
24340: LD_INT 1
24342: PUSH
24343: LD_INT 1
24345: PUSH
24346: EMPTY
24347: LIST
24348: LIST
24349: PUSH
24350: LD_INT 0
24352: PUSH
24353: LD_INT 1
24355: PUSH
24356: EMPTY
24357: LIST
24358: LIST
24359: PUSH
24360: LD_INT 1
24362: NEG
24363: PUSH
24364: LD_INT 0
24366: PUSH
24367: EMPTY
24368: LIST
24369: LIST
24370: PUSH
24371: LD_INT 1
24373: NEG
24374: PUSH
24375: LD_INT 1
24377: NEG
24378: PUSH
24379: EMPTY
24380: LIST
24381: LIST
24382: PUSH
24383: LD_INT 1
24385: NEG
24386: PUSH
24387: LD_INT 2
24389: NEG
24390: PUSH
24391: EMPTY
24392: LIST
24393: LIST
24394: PUSH
24395: LD_INT 1
24397: PUSH
24398: LD_INT 2
24400: PUSH
24401: EMPTY
24402: LIST
24403: LIST
24404: PUSH
24405: EMPTY
24406: LIST
24407: LIST
24408: LIST
24409: LIST
24410: LIST
24411: LIST
24412: LIST
24413: LIST
24414: LIST
24415: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24416: LD_ADDR_VAR 0 40
24420: PUSH
24421: LD_INT 0
24423: PUSH
24424: LD_INT 0
24426: PUSH
24427: EMPTY
24428: LIST
24429: LIST
24430: PUSH
24431: LD_INT 0
24433: PUSH
24434: LD_INT 1
24436: NEG
24437: PUSH
24438: EMPTY
24439: LIST
24440: LIST
24441: PUSH
24442: LD_INT 1
24444: PUSH
24445: LD_INT 0
24447: PUSH
24448: EMPTY
24449: LIST
24450: LIST
24451: PUSH
24452: LD_INT 1
24454: PUSH
24455: LD_INT 1
24457: PUSH
24458: EMPTY
24459: LIST
24460: LIST
24461: PUSH
24462: LD_INT 0
24464: PUSH
24465: LD_INT 1
24467: PUSH
24468: EMPTY
24469: LIST
24470: LIST
24471: PUSH
24472: LD_INT 1
24474: NEG
24475: PUSH
24476: LD_INT 0
24478: PUSH
24479: EMPTY
24480: LIST
24481: LIST
24482: PUSH
24483: LD_INT 1
24485: NEG
24486: PUSH
24487: LD_INT 1
24489: NEG
24490: PUSH
24491: EMPTY
24492: LIST
24493: LIST
24494: PUSH
24495: LD_INT 1
24497: PUSH
24498: LD_INT 1
24500: NEG
24501: PUSH
24502: EMPTY
24503: LIST
24504: LIST
24505: PUSH
24506: LD_INT 1
24508: NEG
24509: PUSH
24510: LD_INT 1
24512: PUSH
24513: EMPTY
24514: LIST
24515: LIST
24516: PUSH
24517: EMPTY
24518: LIST
24519: LIST
24520: LIST
24521: LIST
24522: LIST
24523: LIST
24524: LIST
24525: LIST
24526: LIST
24527: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24528: LD_ADDR_VAR 0 41
24532: PUSH
24533: LD_INT 0
24535: PUSH
24536: LD_INT 0
24538: PUSH
24539: EMPTY
24540: LIST
24541: LIST
24542: PUSH
24543: LD_INT 0
24545: PUSH
24546: LD_INT 1
24548: NEG
24549: PUSH
24550: EMPTY
24551: LIST
24552: LIST
24553: PUSH
24554: LD_INT 1
24556: PUSH
24557: LD_INT 0
24559: PUSH
24560: EMPTY
24561: LIST
24562: LIST
24563: PUSH
24564: LD_INT 1
24566: PUSH
24567: LD_INT 1
24569: PUSH
24570: EMPTY
24571: LIST
24572: LIST
24573: PUSH
24574: LD_INT 0
24576: PUSH
24577: LD_INT 1
24579: PUSH
24580: EMPTY
24581: LIST
24582: LIST
24583: PUSH
24584: LD_INT 1
24586: NEG
24587: PUSH
24588: LD_INT 0
24590: PUSH
24591: EMPTY
24592: LIST
24593: LIST
24594: PUSH
24595: LD_INT 1
24597: NEG
24598: PUSH
24599: LD_INT 1
24601: NEG
24602: PUSH
24603: EMPTY
24604: LIST
24605: LIST
24606: PUSH
24607: LD_INT 1
24609: NEG
24610: PUSH
24611: LD_INT 2
24613: NEG
24614: PUSH
24615: EMPTY
24616: LIST
24617: LIST
24618: PUSH
24619: LD_INT 1
24621: PUSH
24622: LD_INT 1
24624: NEG
24625: PUSH
24626: EMPTY
24627: LIST
24628: LIST
24629: PUSH
24630: LD_INT 2
24632: PUSH
24633: LD_INT 0
24635: PUSH
24636: EMPTY
24637: LIST
24638: LIST
24639: PUSH
24640: LD_INT 2
24642: PUSH
24643: LD_INT 1
24645: PUSH
24646: EMPTY
24647: LIST
24648: LIST
24649: PUSH
24650: LD_INT 2
24652: PUSH
24653: LD_INT 2
24655: PUSH
24656: EMPTY
24657: LIST
24658: LIST
24659: PUSH
24660: LD_INT 1
24662: PUSH
24663: LD_INT 2
24665: PUSH
24666: EMPTY
24667: LIST
24668: LIST
24669: PUSH
24670: LD_INT 1
24672: NEG
24673: PUSH
24674: LD_INT 1
24676: PUSH
24677: EMPTY
24678: LIST
24679: LIST
24680: PUSH
24681: LD_INT 2
24683: NEG
24684: PUSH
24685: LD_INT 0
24687: PUSH
24688: EMPTY
24689: LIST
24690: LIST
24691: PUSH
24692: LD_INT 2
24694: NEG
24695: PUSH
24696: LD_INT 1
24698: NEG
24699: PUSH
24700: EMPTY
24701: LIST
24702: LIST
24703: PUSH
24704: LD_INT 2
24706: NEG
24707: PUSH
24708: LD_INT 2
24710: NEG
24711: PUSH
24712: EMPTY
24713: LIST
24714: LIST
24715: PUSH
24716: LD_INT 2
24718: NEG
24719: PUSH
24720: LD_INT 3
24722: NEG
24723: PUSH
24724: EMPTY
24725: LIST
24726: LIST
24727: PUSH
24728: LD_INT 2
24730: PUSH
24731: LD_INT 1
24733: NEG
24734: PUSH
24735: EMPTY
24736: LIST
24737: LIST
24738: PUSH
24739: LD_INT 3
24741: PUSH
24742: LD_INT 0
24744: PUSH
24745: EMPTY
24746: LIST
24747: LIST
24748: PUSH
24749: LD_INT 3
24751: PUSH
24752: LD_INT 1
24754: PUSH
24755: EMPTY
24756: LIST
24757: LIST
24758: PUSH
24759: LD_INT 3
24761: PUSH
24762: LD_INT 2
24764: PUSH
24765: EMPTY
24766: LIST
24767: LIST
24768: PUSH
24769: LD_INT 3
24771: PUSH
24772: LD_INT 3
24774: PUSH
24775: EMPTY
24776: LIST
24777: LIST
24778: PUSH
24779: LD_INT 2
24781: PUSH
24782: LD_INT 3
24784: PUSH
24785: EMPTY
24786: LIST
24787: LIST
24788: PUSH
24789: LD_INT 2
24791: NEG
24792: PUSH
24793: LD_INT 1
24795: PUSH
24796: EMPTY
24797: LIST
24798: LIST
24799: PUSH
24800: LD_INT 3
24802: NEG
24803: PUSH
24804: LD_INT 0
24806: PUSH
24807: EMPTY
24808: LIST
24809: LIST
24810: PUSH
24811: LD_INT 3
24813: NEG
24814: PUSH
24815: LD_INT 1
24817: NEG
24818: PUSH
24819: EMPTY
24820: LIST
24821: LIST
24822: PUSH
24823: LD_INT 3
24825: NEG
24826: PUSH
24827: LD_INT 2
24829: NEG
24830: PUSH
24831: EMPTY
24832: LIST
24833: LIST
24834: PUSH
24835: LD_INT 3
24837: NEG
24838: PUSH
24839: LD_INT 3
24841: NEG
24842: PUSH
24843: EMPTY
24844: LIST
24845: LIST
24846: PUSH
24847: EMPTY
24848: LIST
24849: LIST
24850: LIST
24851: LIST
24852: LIST
24853: LIST
24854: LIST
24855: LIST
24856: LIST
24857: LIST
24858: LIST
24859: LIST
24860: LIST
24861: LIST
24862: LIST
24863: LIST
24864: LIST
24865: LIST
24866: LIST
24867: LIST
24868: LIST
24869: LIST
24870: LIST
24871: LIST
24872: LIST
24873: LIST
24874: LIST
24875: LIST
24876: LIST
24877: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24878: LD_ADDR_VAR 0 42
24882: PUSH
24883: LD_INT 0
24885: PUSH
24886: LD_INT 0
24888: PUSH
24889: EMPTY
24890: LIST
24891: LIST
24892: PUSH
24893: LD_INT 0
24895: PUSH
24896: LD_INT 1
24898: NEG
24899: PUSH
24900: EMPTY
24901: LIST
24902: LIST
24903: PUSH
24904: LD_INT 1
24906: PUSH
24907: LD_INT 0
24909: PUSH
24910: EMPTY
24911: LIST
24912: LIST
24913: PUSH
24914: LD_INT 1
24916: PUSH
24917: LD_INT 1
24919: PUSH
24920: EMPTY
24921: LIST
24922: LIST
24923: PUSH
24924: LD_INT 0
24926: PUSH
24927: LD_INT 1
24929: PUSH
24930: EMPTY
24931: LIST
24932: LIST
24933: PUSH
24934: LD_INT 1
24936: NEG
24937: PUSH
24938: LD_INT 0
24940: PUSH
24941: EMPTY
24942: LIST
24943: LIST
24944: PUSH
24945: LD_INT 1
24947: NEG
24948: PUSH
24949: LD_INT 1
24951: NEG
24952: PUSH
24953: EMPTY
24954: LIST
24955: LIST
24956: PUSH
24957: LD_INT 1
24959: NEG
24960: PUSH
24961: LD_INT 2
24963: NEG
24964: PUSH
24965: EMPTY
24966: LIST
24967: LIST
24968: PUSH
24969: LD_INT 0
24971: PUSH
24972: LD_INT 2
24974: NEG
24975: PUSH
24976: EMPTY
24977: LIST
24978: LIST
24979: PUSH
24980: LD_INT 1
24982: PUSH
24983: LD_INT 1
24985: NEG
24986: PUSH
24987: EMPTY
24988: LIST
24989: LIST
24990: PUSH
24991: LD_INT 2
24993: PUSH
24994: LD_INT 1
24996: PUSH
24997: EMPTY
24998: LIST
24999: LIST
25000: PUSH
25001: LD_INT 2
25003: PUSH
25004: LD_INT 2
25006: PUSH
25007: EMPTY
25008: LIST
25009: LIST
25010: PUSH
25011: LD_INT 1
25013: PUSH
25014: LD_INT 2
25016: PUSH
25017: EMPTY
25018: LIST
25019: LIST
25020: PUSH
25021: LD_INT 0
25023: PUSH
25024: LD_INT 2
25026: PUSH
25027: EMPTY
25028: LIST
25029: LIST
25030: PUSH
25031: LD_INT 1
25033: NEG
25034: PUSH
25035: LD_INT 1
25037: PUSH
25038: EMPTY
25039: LIST
25040: LIST
25041: PUSH
25042: LD_INT 2
25044: NEG
25045: PUSH
25046: LD_INT 1
25048: NEG
25049: PUSH
25050: EMPTY
25051: LIST
25052: LIST
25053: PUSH
25054: LD_INT 2
25056: NEG
25057: PUSH
25058: LD_INT 2
25060: NEG
25061: PUSH
25062: EMPTY
25063: LIST
25064: LIST
25065: PUSH
25066: LD_INT 2
25068: NEG
25069: PUSH
25070: LD_INT 3
25072: NEG
25073: PUSH
25074: EMPTY
25075: LIST
25076: LIST
25077: PUSH
25078: LD_INT 1
25080: NEG
25081: PUSH
25082: LD_INT 3
25084: NEG
25085: PUSH
25086: EMPTY
25087: LIST
25088: LIST
25089: PUSH
25090: LD_INT 0
25092: PUSH
25093: LD_INT 3
25095: NEG
25096: PUSH
25097: EMPTY
25098: LIST
25099: LIST
25100: PUSH
25101: LD_INT 1
25103: PUSH
25104: LD_INT 2
25106: NEG
25107: PUSH
25108: EMPTY
25109: LIST
25110: LIST
25111: PUSH
25112: LD_INT 3
25114: PUSH
25115: LD_INT 2
25117: PUSH
25118: EMPTY
25119: LIST
25120: LIST
25121: PUSH
25122: LD_INT 3
25124: PUSH
25125: LD_INT 3
25127: PUSH
25128: EMPTY
25129: LIST
25130: LIST
25131: PUSH
25132: LD_INT 2
25134: PUSH
25135: LD_INT 3
25137: PUSH
25138: EMPTY
25139: LIST
25140: LIST
25141: PUSH
25142: LD_INT 1
25144: PUSH
25145: LD_INT 3
25147: PUSH
25148: EMPTY
25149: LIST
25150: LIST
25151: PUSH
25152: LD_INT 0
25154: PUSH
25155: LD_INT 3
25157: PUSH
25158: EMPTY
25159: LIST
25160: LIST
25161: PUSH
25162: LD_INT 1
25164: NEG
25165: PUSH
25166: LD_INT 2
25168: PUSH
25169: EMPTY
25170: LIST
25171: LIST
25172: PUSH
25173: LD_INT 3
25175: NEG
25176: PUSH
25177: LD_INT 2
25179: NEG
25180: PUSH
25181: EMPTY
25182: LIST
25183: LIST
25184: PUSH
25185: LD_INT 3
25187: NEG
25188: PUSH
25189: LD_INT 3
25191: NEG
25192: PUSH
25193: EMPTY
25194: LIST
25195: LIST
25196: PUSH
25197: EMPTY
25198: LIST
25199: LIST
25200: LIST
25201: LIST
25202: LIST
25203: LIST
25204: LIST
25205: LIST
25206: LIST
25207: LIST
25208: LIST
25209: LIST
25210: LIST
25211: LIST
25212: LIST
25213: LIST
25214: LIST
25215: LIST
25216: LIST
25217: LIST
25218: LIST
25219: LIST
25220: LIST
25221: LIST
25222: LIST
25223: LIST
25224: LIST
25225: LIST
25226: LIST
25227: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25228: LD_ADDR_VAR 0 43
25232: PUSH
25233: LD_INT 0
25235: PUSH
25236: LD_INT 0
25238: PUSH
25239: EMPTY
25240: LIST
25241: LIST
25242: PUSH
25243: LD_INT 0
25245: PUSH
25246: LD_INT 1
25248: NEG
25249: PUSH
25250: EMPTY
25251: LIST
25252: LIST
25253: PUSH
25254: LD_INT 1
25256: PUSH
25257: LD_INT 0
25259: PUSH
25260: EMPTY
25261: LIST
25262: LIST
25263: PUSH
25264: LD_INT 1
25266: PUSH
25267: LD_INT 1
25269: PUSH
25270: EMPTY
25271: LIST
25272: LIST
25273: PUSH
25274: LD_INT 0
25276: PUSH
25277: LD_INT 1
25279: PUSH
25280: EMPTY
25281: LIST
25282: LIST
25283: PUSH
25284: LD_INT 1
25286: NEG
25287: PUSH
25288: LD_INT 0
25290: PUSH
25291: EMPTY
25292: LIST
25293: LIST
25294: PUSH
25295: LD_INT 1
25297: NEG
25298: PUSH
25299: LD_INT 1
25301: NEG
25302: PUSH
25303: EMPTY
25304: LIST
25305: LIST
25306: PUSH
25307: LD_INT 1
25309: NEG
25310: PUSH
25311: LD_INT 2
25313: NEG
25314: PUSH
25315: EMPTY
25316: LIST
25317: LIST
25318: PUSH
25319: LD_INT 0
25321: PUSH
25322: LD_INT 2
25324: NEG
25325: PUSH
25326: EMPTY
25327: LIST
25328: LIST
25329: PUSH
25330: LD_INT 1
25332: PUSH
25333: LD_INT 1
25335: NEG
25336: PUSH
25337: EMPTY
25338: LIST
25339: LIST
25340: PUSH
25341: LD_INT 2
25343: PUSH
25344: LD_INT 0
25346: PUSH
25347: EMPTY
25348: LIST
25349: LIST
25350: PUSH
25351: LD_INT 2
25353: PUSH
25354: LD_INT 1
25356: PUSH
25357: EMPTY
25358: LIST
25359: LIST
25360: PUSH
25361: LD_INT 1
25363: PUSH
25364: LD_INT 2
25366: PUSH
25367: EMPTY
25368: LIST
25369: LIST
25370: PUSH
25371: LD_INT 0
25373: PUSH
25374: LD_INT 2
25376: PUSH
25377: EMPTY
25378: LIST
25379: LIST
25380: PUSH
25381: LD_INT 1
25383: NEG
25384: PUSH
25385: LD_INT 1
25387: PUSH
25388: EMPTY
25389: LIST
25390: LIST
25391: PUSH
25392: LD_INT 2
25394: NEG
25395: PUSH
25396: LD_INT 0
25398: PUSH
25399: EMPTY
25400: LIST
25401: LIST
25402: PUSH
25403: LD_INT 2
25405: NEG
25406: PUSH
25407: LD_INT 1
25409: NEG
25410: PUSH
25411: EMPTY
25412: LIST
25413: LIST
25414: PUSH
25415: LD_INT 1
25417: NEG
25418: PUSH
25419: LD_INT 3
25421: NEG
25422: PUSH
25423: EMPTY
25424: LIST
25425: LIST
25426: PUSH
25427: LD_INT 0
25429: PUSH
25430: LD_INT 3
25432: NEG
25433: PUSH
25434: EMPTY
25435: LIST
25436: LIST
25437: PUSH
25438: LD_INT 1
25440: PUSH
25441: LD_INT 2
25443: NEG
25444: PUSH
25445: EMPTY
25446: LIST
25447: LIST
25448: PUSH
25449: LD_INT 2
25451: PUSH
25452: LD_INT 1
25454: NEG
25455: PUSH
25456: EMPTY
25457: LIST
25458: LIST
25459: PUSH
25460: LD_INT 3
25462: PUSH
25463: LD_INT 0
25465: PUSH
25466: EMPTY
25467: LIST
25468: LIST
25469: PUSH
25470: LD_INT 3
25472: PUSH
25473: LD_INT 1
25475: PUSH
25476: EMPTY
25477: LIST
25478: LIST
25479: PUSH
25480: LD_INT 1
25482: PUSH
25483: LD_INT 3
25485: PUSH
25486: EMPTY
25487: LIST
25488: LIST
25489: PUSH
25490: LD_INT 0
25492: PUSH
25493: LD_INT 3
25495: PUSH
25496: EMPTY
25497: LIST
25498: LIST
25499: PUSH
25500: LD_INT 1
25502: NEG
25503: PUSH
25504: LD_INT 2
25506: PUSH
25507: EMPTY
25508: LIST
25509: LIST
25510: PUSH
25511: LD_INT 2
25513: NEG
25514: PUSH
25515: LD_INT 1
25517: PUSH
25518: EMPTY
25519: LIST
25520: LIST
25521: PUSH
25522: LD_INT 3
25524: NEG
25525: PUSH
25526: LD_INT 0
25528: PUSH
25529: EMPTY
25530: LIST
25531: LIST
25532: PUSH
25533: LD_INT 3
25535: NEG
25536: PUSH
25537: LD_INT 1
25539: NEG
25540: PUSH
25541: EMPTY
25542: LIST
25543: LIST
25544: PUSH
25545: EMPTY
25546: LIST
25547: LIST
25548: LIST
25549: LIST
25550: LIST
25551: LIST
25552: LIST
25553: LIST
25554: LIST
25555: LIST
25556: LIST
25557: LIST
25558: LIST
25559: LIST
25560: LIST
25561: LIST
25562: LIST
25563: LIST
25564: LIST
25565: LIST
25566: LIST
25567: LIST
25568: LIST
25569: LIST
25570: LIST
25571: LIST
25572: LIST
25573: LIST
25574: LIST
25575: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25576: LD_ADDR_VAR 0 44
25580: PUSH
25581: LD_INT 0
25583: PUSH
25584: LD_INT 0
25586: PUSH
25587: EMPTY
25588: LIST
25589: LIST
25590: PUSH
25591: LD_INT 0
25593: PUSH
25594: LD_INT 1
25596: NEG
25597: PUSH
25598: EMPTY
25599: LIST
25600: LIST
25601: PUSH
25602: LD_INT 1
25604: PUSH
25605: LD_INT 0
25607: PUSH
25608: EMPTY
25609: LIST
25610: LIST
25611: PUSH
25612: LD_INT 1
25614: PUSH
25615: LD_INT 1
25617: PUSH
25618: EMPTY
25619: LIST
25620: LIST
25621: PUSH
25622: LD_INT 0
25624: PUSH
25625: LD_INT 1
25627: PUSH
25628: EMPTY
25629: LIST
25630: LIST
25631: PUSH
25632: LD_INT 1
25634: NEG
25635: PUSH
25636: LD_INT 0
25638: PUSH
25639: EMPTY
25640: LIST
25641: LIST
25642: PUSH
25643: LD_INT 1
25645: NEG
25646: PUSH
25647: LD_INT 1
25649: NEG
25650: PUSH
25651: EMPTY
25652: LIST
25653: LIST
25654: PUSH
25655: LD_INT 1
25657: NEG
25658: PUSH
25659: LD_INT 2
25661: NEG
25662: PUSH
25663: EMPTY
25664: LIST
25665: LIST
25666: PUSH
25667: LD_INT 1
25669: PUSH
25670: LD_INT 1
25672: NEG
25673: PUSH
25674: EMPTY
25675: LIST
25676: LIST
25677: PUSH
25678: LD_INT 2
25680: PUSH
25681: LD_INT 0
25683: PUSH
25684: EMPTY
25685: LIST
25686: LIST
25687: PUSH
25688: LD_INT 2
25690: PUSH
25691: LD_INT 1
25693: PUSH
25694: EMPTY
25695: LIST
25696: LIST
25697: PUSH
25698: LD_INT 2
25700: PUSH
25701: LD_INT 2
25703: PUSH
25704: EMPTY
25705: LIST
25706: LIST
25707: PUSH
25708: LD_INT 1
25710: PUSH
25711: LD_INT 2
25713: PUSH
25714: EMPTY
25715: LIST
25716: LIST
25717: PUSH
25718: LD_INT 1
25720: NEG
25721: PUSH
25722: LD_INT 1
25724: PUSH
25725: EMPTY
25726: LIST
25727: LIST
25728: PUSH
25729: LD_INT 2
25731: NEG
25732: PUSH
25733: LD_INT 0
25735: PUSH
25736: EMPTY
25737: LIST
25738: LIST
25739: PUSH
25740: LD_INT 2
25742: NEG
25743: PUSH
25744: LD_INT 1
25746: NEG
25747: PUSH
25748: EMPTY
25749: LIST
25750: LIST
25751: PUSH
25752: LD_INT 2
25754: NEG
25755: PUSH
25756: LD_INT 2
25758: NEG
25759: PUSH
25760: EMPTY
25761: LIST
25762: LIST
25763: PUSH
25764: LD_INT 2
25766: NEG
25767: PUSH
25768: LD_INT 3
25770: NEG
25771: PUSH
25772: EMPTY
25773: LIST
25774: LIST
25775: PUSH
25776: LD_INT 2
25778: PUSH
25779: LD_INT 1
25781: NEG
25782: PUSH
25783: EMPTY
25784: LIST
25785: LIST
25786: PUSH
25787: LD_INT 3
25789: PUSH
25790: LD_INT 0
25792: PUSH
25793: EMPTY
25794: LIST
25795: LIST
25796: PUSH
25797: LD_INT 3
25799: PUSH
25800: LD_INT 1
25802: PUSH
25803: EMPTY
25804: LIST
25805: LIST
25806: PUSH
25807: LD_INT 3
25809: PUSH
25810: LD_INT 2
25812: PUSH
25813: EMPTY
25814: LIST
25815: LIST
25816: PUSH
25817: LD_INT 3
25819: PUSH
25820: LD_INT 3
25822: PUSH
25823: EMPTY
25824: LIST
25825: LIST
25826: PUSH
25827: LD_INT 2
25829: PUSH
25830: LD_INT 3
25832: PUSH
25833: EMPTY
25834: LIST
25835: LIST
25836: PUSH
25837: LD_INT 2
25839: NEG
25840: PUSH
25841: LD_INT 1
25843: PUSH
25844: EMPTY
25845: LIST
25846: LIST
25847: PUSH
25848: LD_INT 3
25850: NEG
25851: PUSH
25852: LD_INT 0
25854: PUSH
25855: EMPTY
25856: LIST
25857: LIST
25858: PUSH
25859: LD_INT 3
25861: NEG
25862: PUSH
25863: LD_INT 1
25865: NEG
25866: PUSH
25867: EMPTY
25868: LIST
25869: LIST
25870: PUSH
25871: LD_INT 3
25873: NEG
25874: PUSH
25875: LD_INT 2
25877: NEG
25878: PUSH
25879: EMPTY
25880: LIST
25881: LIST
25882: PUSH
25883: LD_INT 3
25885: NEG
25886: PUSH
25887: LD_INT 3
25889: NEG
25890: PUSH
25891: EMPTY
25892: LIST
25893: LIST
25894: PUSH
25895: EMPTY
25896: LIST
25897: LIST
25898: LIST
25899: LIST
25900: LIST
25901: LIST
25902: LIST
25903: LIST
25904: LIST
25905: LIST
25906: LIST
25907: LIST
25908: LIST
25909: LIST
25910: LIST
25911: LIST
25912: LIST
25913: LIST
25914: LIST
25915: LIST
25916: LIST
25917: LIST
25918: LIST
25919: LIST
25920: LIST
25921: LIST
25922: LIST
25923: LIST
25924: LIST
25925: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25926: LD_ADDR_VAR 0 45
25930: PUSH
25931: LD_INT 0
25933: PUSH
25934: LD_INT 0
25936: PUSH
25937: EMPTY
25938: LIST
25939: LIST
25940: PUSH
25941: LD_INT 0
25943: PUSH
25944: LD_INT 1
25946: NEG
25947: PUSH
25948: EMPTY
25949: LIST
25950: LIST
25951: PUSH
25952: LD_INT 1
25954: PUSH
25955: LD_INT 0
25957: PUSH
25958: EMPTY
25959: LIST
25960: LIST
25961: PUSH
25962: LD_INT 1
25964: PUSH
25965: LD_INT 1
25967: PUSH
25968: EMPTY
25969: LIST
25970: LIST
25971: PUSH
25972: LD_INT 0
25974: PUSH
25975: LD_INT 1
25977: PUSH
25978: EMPTY
25979: LIST
25980: LIST
25981: PUSH
25982: LD_INT 1
25984: NEG
25985: PUSH
25986: LD_INT 0
25988: PUSH
25989: EMPTY
25990: LIST
25991: LIST
25992: PUSH
25993: LD_INT 1
25995: NEG
25996: PUSH
25997: LD_INT 1
25999: NEG
26000: PUSH
26001: EMPTY
26002: LIST
26003: LIST
26004: PUSH
26005: LD_INT 1
26007: NEG
26008: PUSH
26009: LD_INT 2
26011: NEG
26012: PUSH
26013: EMPTY
26014: LIST
26015: LIST
26016: PUSH
26017: LD_INT 0
26019: PUSH
26020: LD_INT 2
26022: NEG
26023: PUSH
26024: EMPTY
26025: LIST
26026: LIST
26027: PUSH
26028: LD_INT 1
26030: PUSH
26031: LD_INT 1
26033: NEG
26034: PUSH
26035: EMPTY
26036: LIST
26037: LIST
26038: PUSH
26039: LD_INT 2
26041: PUSH
26042: LD_INT 1
26044: PUSH
26045: EMPTY
26046: LIST
26047: LIST
26048: PUSH
26049: LD_INT 2
26051: PUSH
26052: LD_INT 2
26054: PUSH
26055: EMPTY
26056: LIST
26057: LIST
26058: PUSH
26059: LD_INT 1
26061: PUSH
26062: LD_INT 2
26064: PUSH
26065: EMPTY
26066: LIST
26067: LIST
26068: PUSH
26069: LD_INT 0
26071: PUSH
26072: LD_INT 2
26074: PUSH
26075: EMPTY
26076: LIST
26077: LIST
26078: PUSH
26079: LD_INT 1
26081: NEG
26082: PUSH
26083: LD_INT 1
26085: PUSH
26086: EMPTY
26087: LIST
26088: LIST
26089: PUSH
26090: LD_INT 2
26092: NEG
26093: PUSH
26094: LD_INT 1
26096: NEG
26097: PUSH
26098: EMPTY
26099: LIST
26100: LIST
26101: PUSH
26102: LD_INT 2
26104: NEG
26105: PUSH
26106: LD_INT 2
26108: NEG
26109: PUSH
26110: EMPTY
26111: LIST
26112: LIST
26113: PUSH
26114: LD_INT 2
26116: NEG
26117: PUSH
26118: LD_INT 3
26120: NEG
26121: PUSH
26122: EMPTY
26123: LIST
26124: LIST
26125: PUSH
26126: LD_INT 1
26128: NEG
26129: PUSH
26130: LD_INT 3
26132: NEG
26133: PUSH
26134: EMPTY
26135: LIST
26136: LIST
26137: PUSH
26138: LD_INT 0
26140: PUSH
26141: LD_INT 3
26143: NEG
26144: PUSH
26145: EMPTY
26146: LIST
26147: LIST
26148: PUSH
26149: LD_INT 1
26151: PUSH
26152: LD_INT 2
26154: NEG
26155: PUSH
26156: EMPTY
26157: LIST
26158: LIST
26159: PUSH
26160: LD_INT 3
26162: PUSH
26163: LD_INT 2
26165: PUSH
26166: EMPTY
26167: LIST
26168: LIST
26169: PUSH
26170: LD_INT 3
26172: PUSH
26173: LD_INT 3
26175: PUSH
26176: EMPTY
26177: LIST
26178: LIST
26179: PUSH
26180: LD_INT 2
26182: PUSH
26183: LD_INT 3
26185: PUSH
26186: EMPTY
26187: LIST
26188: LIST
26189: PUSH
26190: LD_INT 1
26192: PUSH
26193: LD_INT 3
26195: PUSH
26196: EMPTY
26197: LIST
26198: LIST
26199: PUSH
26200: LD_INT 0
26202: PUSH
26203: LD_INT 3
26205: PUSH
26206: EMPTY
26207: LIST
26208: LIST
26209: PUSH
26210: LD_INT 1
26212: NEG
26213: PUSH
26214: LD_INT 2
26216: PUSH
26217: EMPTY
26218: LIST
26219: LIST
26220: PUSH
26221: LD_INT 3
26223: NEG
26224: PUSH
26225: LD_INT 2
26227: NEG
26228: PUSH
26229: EMPTY
26230: LIST
26231: LIST
26232: PUSH
26233: LD_INT 3
26235: NEG
26236: PUSH
26237: LD_INT 3
26239: NEG
26240: PUSH
26241: EMPTY
26242: LIST
26243: LIST
26244: PUSH
26245: EMPTY
26246: LIST
26247: LIST
26248: LIST
26249: LIST
26250: LIST
26251: LIST
26252: LIST
26253: LIST
26254: LIST
26255: LIST
26256: LIST
26257: LIST
26258: LIST
26259: LIST
26260: LIST
26261: LIST
26262: LIST
26263: LIST
26264: LIST
26265: LIST
26266: LIST
26267: LIST
26268: LIST
26269: LIST
26270: LIST
26271: LIST
26272: LIST
26273: LIST
26274: LIST
26275: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26276: LD_ADDR_VAR 0 46
26280: PUSH
26281: LD_INT 0
26283: PUSH
26284: LD_INT 0
26286: PUSH
26287: EMPTY
26288: LIST
26289: LIST
26290: PUSH
26291: LD_INT 0
26293: PUSH
26294: LD_INT 1
26296: NEG
26297: PUSH
26298: EMPTY
26299: LIST
26300: LIST
26301: PUSH
26302: LD_INT 1
26304: PUSH
26305: LD_INT 0
26307: PUSH
26308: EMPTY
26309: LIST
26310: LIST
26311: PUSH
26312: LD_INT 1
26314: PUSH
26315: LD_INT 1
26317: PUSH
26318: EMPTY
26319: LIST
26320: LIST
26321: PUSH
26322: LD_INT 0
26324: PUSH
26325: LD_INT 1
26327: PUSH
26328: EMPTY
26329: LIST
26330: LIST
26331: PUSH
26332: LD_INT 1
26334: NEG
26335: PUSH
26336: LD_INT 0
26338: PUSH
26339: EMPTY
26340: LIST
26341: LIST
26342: PUSH
26343: LD_INT 1
26345: NEG
26346: PUSH
26347: LD_INT 1
26349: NEG
26350: PUSH
26351: EMPTY
26352: LIST
26353: LIST
26354: PUSH
26355: LD_INT 1
26357: NEG
26358: PUSH
26359: LD_INT 2
26361: NEG
26362: PUSH
26363: EMPTY
26364: LIST
26365: LIST
26366: PUSH
26367: LD_INT 0
26369: PUSH
26370: LD_INT 2
26372: NEG
26373: PUSH
26374: EMPTY
26375: LIST
26376: LIST
26377: PUSH
26378: LD_INT 1
26380: PUSH
26381: LD_INT 1
26383: NEG
26384: PUSH
26385: EMPTY
26386: LIST
26387: LIST
26388: PUSH
26389: LD_INT 2
26391: PUSH
26392: LD_INT 0
26394: PUSH
26395: EMPTY
26396: LIST
26397: LIST
26398: PUSH
26399: LD_INT 2
26401: PUSH
26402: LD_INT 1
26404: PUSH
26405: EMPTY
26406: LIST
26407: LIST
26408: PUSH
26409: LD_INT 1
26411: PUSH
26412: LD_INT 2
26414: PUSH
26415: EMPTY
26416: LIST
26417: LIST
26418: PUSH
26419: LD_INT 0
26421: PUSH
26422: LD_INT 2
26424: PUSH
26425: EMPTY
26426: LIST
26427: LIST
26428: PUSH
26429: LD_INT 1
26431: NEG
26432: PUSH
26433: LD_INT 1
26435: PUSH
26436: EMPTY
26437: LIST
26438: LIST
26439: PUSH
26440: LD_INT 2
26442: NEG
26443: PUSH
26444: LD_INT 0
26446: PUSH
26447: EMPTY
26448: LIST
26449: LIST
26450: PUSH
26451: LD_INT 2
26453: NEG
26454: PUSH
26455: LD_INT 1
26457: NEG
26458: PUSH
26459: EMPTY
26460: LIST
26461: LIST
26462: PUSH
26463: LD_INT 1
26465: NEG
26466: PUSH
26467: LD_INT 3
26469: NEG
26470: PUSH
26471: EMPTY
26472: LIST
26473: LIST
26474: PUSH
26475: LD_INT 0
26477: PUSH
26478: LD_INT 3
26480: NEG
26481: PUSH
26482: EMPTY
26483: LIST
26484: LIST
26485: PUSH
26486: LD_INT 1
26488: PUSH
26489: LD_INT 2
26491: NEG
26492: PUSH
26493: EMPTY
26494: LIST
26495: LIST
26496: PUSH
26497: LD_INT 2
26499: PUSH
26500: LD_INT 1
26502: NEG
26503: PUSH
26504: EMPTY
26505: LIST
26506: LIST
26507: PUSH
26508: LD_INT 3
26510: PUSH
26511: LD_INT 0
26513: PUSH
26514: EMPTY
26515: LIST
26516: LIST
26517: PUSH
26518: LD_INT 3
26520: PUSH
26521: LD_INT 1
26523: PUSH
26524: EMPTY
26525: LIST
26526: LIST
26527: PUSH
26528: LD_INT 1
26530: PUSH
26531: LD_INT 3
26533: PUSH
26534: EMPTY
26535: LIST
26536: LIST
26537: PUSH
26538: LD_INT 0
26540: PUSH
26541: LD_INT 3
26543: PUSH
26544: EMPTY
26545: LIST
26546: LIST
26547: PUSH
26548: LD_INT 1
26550: NEG
26551: PUSH
26552: LD_INT 2
26554: PUSH
26555: EMPTY
26556: LIST
26557: LIST
26558: PUSH
26559: LD_INT 2
26561: NEG
26562: PUSH
26563: LD_INT 1
26565: PUSH
26566: EMPTY
26567: LIST
26568: LIST
26569: PUSH
26570: LD_INT 3
26572: NEG
26573: PUSH
26574: LD_INT 0
26576: PUSH
26577: EMPTY
26578: LIST
26579: LIST
26580: PUSH
26581: LD_INT 3
26583: NEG
26584: PUSH
26585: LD_INT 1
26587: NEG
26588: PUSH
26589: EMPTY
26590: LIST
26591: LIST
26592: PUSH
26593: EMPTY
26594: LIST
26595: LIST
26596: LIST
26597: LIST
26598: LIST
26599: LIST
26600: LIST
26601: LIST
26602: LIST
26603: LIST
26604: LIST
26605: LIST
26606: LIST
26607: LIST
26608: LIST
26609: LIST
26610: LIST
26611: LIST
26612: LIST
26613: LIST
26614: LIST
26615: LIST
26616: LIST
26617: LIST
26618: LIST
26619: LIST
26620: LIST
26621: LIST
26622: LIST
26623: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26624: LD_ADDR_VAR 0 47
26628: PUSH
26629: LD_INT 0
26631: PUSH
26632: LD_INT 0
26634: PUSH
26635: EMPTY
26636: LIST
26637: LIST
26638: PUSH
26639: LD_INT 0
26641: PUSH
26642: LD_INT 1
26644: NEG
26645: PUSH
26646: EMPTY
26647: LIST
26648: LIST
26649: PUSH
26650: LD_INT 1
26652: PUSH
26653: LD_INT 0
26655: PUSH
26656: EMPTY
26657: LIST
26658: LIST
26659: PUSH
26660: LD_INT 1
26662: PUSH
26663: LD_INT 1
26665: PUSH
26666: EMPTY
26667: LIST
26668: LIST
26669: PUSH
26670: LD_INT 0
26672: PUSH
26673: LD_INT 1
26675: PUSH
26676: EMPTY
26677: LIST
26678: LIST
26679: PUSH
26680: LD_INT 1
26682: NEG
26683: PUSH
26684: LD_INT 0
26686: PUSH
26687: EMPTY
26688: LIST
26689: LIST
26690: PUSH
26691: LD_INT 1
26693: NEG
26694: PUSH
26695: LD_INT 1
26697: NEG
26698: PUSH
26699: EMPTY
26700: LIST
26701: LIST
26702: PUSH
26703: LD_INT 1
26705: NEG
26706: PUSH
26707: LD_INT 2
26709: NEG
26710: PUSH
26711: EMPTY
26712: LIST
26713: LIST
26714: PUSH
26715: LD_INT 0
26717: PUSH
26718: LD_INT 2
26720: NEG
26721: PUSH
26722: EMPTY
26723: LIST
26724: LIST
26725: PUSH
26726: LD_INT 1
26728: PUSH
26729: LD_INT 1
26731: NEG
26732: PUSH
26733: EMPTY
26734: LIST
26735: LIST
26736: PUSH
26737: LD_INT 2
26739: NEG
26740: PUSH
26741: LD_INT 1
26743: NEG
26744: PUSH
26745: EMPTY
26746: LIST
26747: LIST
26748: PUSH
26749: LD_INT 2
26751: NEG
26752: PUSH
26753: LD_INT 2
26755: NEG
26756: PUSH
26757: EMPTY
26758: LIST
26759: LIST
26760: PUSH
26761: EMPTY
26762: LIST
26763: LIST
26764: LIST
26765: LIST
26766: LIST
26767: LIST
26768: LIST
26769: LIST
26770: LIST
26771: LIST
26772: LIST
26773: LIST
26774: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
26775: LD_ADDR_VAR 0 48
26779: PUSH
26780: LD_INT 0
26782: PUSH
26783: LD_INT 0
26785: PUSH
26786: EMPTY
26787: LIST
26788: LIST
26789: PUSH
26790: LD_INT 0
26792: PUSH
26793: LD_INT 1
26795: NEG
26796: PUSH
26797: EMPTY
26798: LIST
26799: LIST
26800: PUSH
26801: LD_INT 1
26803: PUSH
26804: LD_INT 0
26806: PUSH
26807: EMPTY
26808: LIST
26809: LIST
26810: PUSH
26811: LD_INT 1
26813: PUSH
26814: LD_INT 1
26816: PUSH
26817: EMPTY
26818: LIST
26819: LIST
26820: PUSH
26821: LD_INT 0
26823: PUSH
26824: LD_INT 1
26826: PUSH
26827: EMPTY
26828: LIST
26829: LIST
26830: PUSH
26831: LD_INT 1
26833: NEG
26834: PUSH
26835: LD_INT 0
26837: PUSH
26838: EMPTY
26839: LIST
26840: LIST
26841: PUSH
26842: LD_INT 1
26844: NEG
26845: PUSH
26846: LD_INT 1
26848: NEG
26849: PUSH
26850: EMPTY
26851: LIST
26852: LIST
26853: PUSH
26854: LD_INT 1
26856: NEG
26857: PUSH
26858: LD_INT 2
26860: NEG
26861: PUSH
26862: EMPTY
26863: LIST
26864: LIST
26865: PUSH
26866: LD_INT 0
26868: PUSH
26869: LD_INT 2
26871: NEG
26872: PUSH
26873: EMPTY
26874: LIST
26875: LIST
26876: PUSH
26877: LD_INT 1
26879: PUSH
26880: LD_INT 1
26882: NEG
26883: PUSH
26884: EMPTY
26885: LIST
26886: LIST
26887: PUSH
26888: LD_INT 2
26890: PUSH
26891: LD_INT 0
26893: PUSH
26894: EMPTY
26895: LIST
26896: LIST
26897: PUSH
26898: LD_INT 2
26900: PUSH
26901: LD_INT 1
26903: PUSH
26904: EMPTY
26905: LIST
26906: LIST
26907: PUSH
26908: EMPTY
26909: LIST
26910: LIST
26911: LIST
26912: LIST
26913: LIST
26914: LIST
26915: LIST
26916: LIST
26917: LIST
26918: LIST
26919: LIST
26920: LIST
26921: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
26922: LD_ADDR_VAR 0 49
26926: PUSH
26927: LD_INT 0
26929: PUSH
26930: LD_INT 0
26932: PUSH
26933: EMPTY
26934: LIST
26935: LIST
26936: PUSH
26937: LD_INT 0
26939: PUSH
26940: LD_INT 1
26942: NEG
26943: PUSH
26944: EMPTY
26945: LIST
26946: LIST
26947: PUSH
26948: LD_INT 1
26950: PUSH
26951: LD_INT 0
26953: PUSH
26954: EMPTY
26955: LIST
26956: LIST
26957: PUSH
26958: LD_INT 1
26960: PUSH
26961: LD_INT 1
26963: PUSH
26964: EMPTY
26965: LIST
26966: LIST
26967: PUSH
26968: LD_INT 0
26970: PUSH
26971: LD_INT 1
26973: PUSH
26974: EMPTY
26975: LIST
26976: LIST
26977: PUSH
26978: LD_INT 1
26980: NEG
26981: PUSH
26982: LD_INT 0
26984: PUSH
26985: EMPTY
26986: LIST
26987: LIST
26988: PUSH
26989: LD_INT 1
26991: NEG
26992: PUSH
26993: LD_INT 1
26995: NEG
26996: PUSH
26997: EMPTY
26998: LIST
26999: LIST
27000: PUSH
27001: LD_INT 1
27003: PUSH
27004: LD_INT 1
27006: NEG
27007: PUSH
27008: EMPTY
27009: LIST
27010: LIST
27011: PUSH
27012: LD_INT 2
27014: PUSH
27015: LD_INT 0
27017: PUSH
27018: EMPTY
27019: LIST
27020: LIST
27021: PUSH
27022: LD_INT 2
27024: PUSH
27025: LD_INT 1
27027: PUSH
27028: EMPTY
27029: LIST
27030: LIST
27031: PUSH
27032: LD_INT 2
27034: PUSH
27035: LD_INT 2
27037: PUSH
27038: EMPTY
27039: LIST
27040: LIST
27041: PUSH
27042: LD_INT 1
27044: PUSH
27045: LD_INT 2
27047: PUSH
27048: EMPTY
27049: LIST
27050: LIST
27051: PUSH
27052: EMPTY
27053: LIST
27054: LIST
27055: LIST
27056: LIST
27057: LIST
27058: LIST
27059: LIST
27060: LIST
27061: LIST
27062: LIST
27063: LIST
27064: LIST
27065: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
27066: LD_ADDR_VAR 0 50
27070: PUSH
27071: LD_INT 0
27073: PUSH
27074: LD_INT 0
27076: PUSH
27077: EMPTY
27078: LIST
27079: LIST
27080: PUSH
27081: LD_INT 0
27083: PUSH
27084: LD_INT 1
27086: NEG
27087: PUSH
27088: EMPTY
27089: LIST
27090: LIST
27091: PUSH
27092: LD_INT 1
27094: PUSH
27095: LD_INT 0
27097: PUSH
27098: EMPTY
27099: LIST
27100: LIST
27101: PUSH
27102: LD_INT 1
27104: PUSH
27105: LD_INT 1
27107: PUSH
27108: EMPTY
27109: LIST
27110: LIST
27111: PUSH
27112: LD_INT 0
27114: PUSH
27115: LD_INT 1
27117: PUSH
27118: EMPTY
27119: LIST
27120: LIST
27121: PUSH
27122: LD_INT 1
27124: NEG
27125: PUSH
27126: LD_INT 0
27128: PUSH
27129: EMPTY
27130: LIST
27131: LIST
27132: PUSH
27133: LD_INT 1
27135: NEG
27136: PUSH
27137: LD_INT 1
27139: NEG
27140: PUSH
27141: EMPTY
27142: LIST
27143: LIST
27144: PUSH
27145: LD_INT 2
27147: PUSH
27148: LD_INT 1
27150: PUSH
27151: EMPTY
27152: LIST
27153: LIST
27154: PUSH
27155: LD_INT 2
27157: PUSH
27158: LD_INT 2
27160: PUSH
27161: EMPTY
27162: LIST
27163: LIST
27164: PUSH
27165: LD_INT 1
27167: PUSH
27168: LD_INT 2
27170: PUSH
27171: EMPTY
27172: LIST
27173: LIST
27174: PUSH
27175: LD_INT 0
27177: PUSH
27178: LD_INT 2
27180: PUSH
27181: EMPTY
27182: LIST
27183: LIST
27184: PUSH
27185: LD_INT 1
27187: NEG
27188: PUSH
27189: LD_INT 1
27191: PUSH
27192: EMPTY
27193: LIST
27194: LIST
27195: PUSH
27196: EMPTY
27197: LIST
27198: LIST
27199: LIST
27200: LIST
27201: LIST
27202: LIST
27203: LIST
27204: LIST
27205: LIST
27206: LIST
27207: LIST
27208: LIST
27209: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
27210: LD_ADDR_VAR 0 51
27214: PUSH
27215: LD_INT 0
27217: PUSH
27218: LD_INT 0
27220: PUSH
27221: EMPTY
27222: LIST
27223: LIST
27224: PUSH
27225: LD_INT 0
27227: PUSH
27228: LD_INT 1
27230: NEG
27231: PUSH
27232: EMPTY
27233: LIST
27234: LIST
27235: PUSH
27236: LD_INT 1
27238: PUSH
27239: LD_INT 0
27241: PUSH
27242: EMPTY
27243: LIST
27244: LIST
27245: PUSH
27246: LD_INT 1
27248: PUSH
27249: LD_INT 1
27251: PUSH
27252: EMPTY
27253: LIST
27254: LIST
27255: PUSH
27256: LD_INT 0
27258: PUSH
27259: LD_INT 1
27261: PUSH
27262: EMPTY
27263: LIST
27264: LIST
27265: PUSH
27266: LD_INT 1
27268: NEG
27269: PUSH
27270: LD_INT 0
27272: PUSH
27273: EMPTY
27274: LIST
27275: LIST
27276: PUSH
27277: LD_INT 1
27279: NEG
27280: PUSH
27281: LD_INT 1
27283: NEG
27284: PUSH
27285: EMPTY
27286: LIST
27287: LIST
27288: PUSH
27289: LD_INT 1
27291: PUSH
27292: LD_INT 2
27294: PUSH
27295: EMPTY
27296: LIST
27297: LIST
27298: PUSH
27299: LD_INT 0
27301: PUSH
27302: LD_INT 2
27304: PUSH
27305: EMPTY
27306: LIST
27307: LIST
27308: PUSH
27309: LD_INT 1
27311: NEG
27312: PUSH
27313: LD_INT 1
27315: PUSH
27316: EMPTY
27317: LIST
27318: LIST
27319: PUSH
27320: LD_INT 2
27322: NEG
27323: PUSH
27324: LD_INT 0
27326: PUSH
27327: EMPTY
27328: LIST
27329: LIST
27330: PUSH
27331: LD_INT 2
27333: NEG
27334: PUSH
27335: LD_INT 1
27337: NEG
27338: PUSH
27339: EMPTY
27340: LIST
27341: LIST
27342: PUSH
27343: EMPTY
27344: LIST
27345: LIST
27346: LIST
27347: LIST
27348: LIST
27349: LIST
27350: LIST
27351: LIST
27352: LIST
27353: LIST
27354: LIST
27355: LIST
27356: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27357: LD_ADDR_VAR 0 52
27361: PUSH
27362: LD_INT 0
27364: PUSH
27365: LD_INT 0
27367: PUSH
27368: EMPTY
27369: LIST
27370: LIST
27371: PUSH
27372: LD_INT 0
27374: PUSH
27375: LD_INT 1
27377: NEG
27378: PUSH
27379: EMPTY
27380: LIST
27381: LIST
27382: PUSH
27383: LD_INT 1
27385: PUSH
27386: LD_INT 0
27388: PUSH
27389: EMPTY
27390: LIST
27391: LIST
27392: PUSH
27393: LD_INT 1
27395: PUSH
27396: LD_INT 1
27398: PUSH
27399: EMPTY
27400: LIST
27401: LIST
27402: PUSH
27403: LD_INT 0
27405: PUSH
27406: LD_INT 1
27408: PUSH
27409: EMPTY
27410: LIST
27411: LIST
27412: PUSH
27413: LD_INT 1
27415: NEG
27416: PUSH
27417: LD_INT 0
27419: PUSH
27420: EMPTY
27421: LIST
27422: LIST
27423: PUSH
27424: LD_INT 1
27426: NEG
27427: PUSH
27428: LD_INT 1
27430: NEG
27431: PUSH
27432: EMPTY
27433: LIST
27434: LIST
27435: PUSH
27436: LD_INT 1
27438: NEG
27439: PUSH
27440: LD_INT 2
27442: NEG
27443: PUSH
27444: EMPTY
27445: LIST
27446: LIST
27447: PUSH
27448: LD_INT 1
27450: NEG
27451: PUSH
27452: LD_INT 1
27454: PUSH
27455: EMPTY
27456: LIST
27457: LIST
27458: PUSH
27459: LD_INT 2
27461: NEG
27462: PUSH
27463: LD_INT 0
27465: PUSH
27466: EMPTY
27467: LIST
27468: LIST
27469: PUSH
27470: LD_INT 2
27472: NEG
27473: PUSH
27474: LD_INT 1
27476: NEG
27477: PUSH
27478: EMPTY
27479: LIST
27480: LIST
27481: PUSH
27482: LD_INT 2
27484: NEG
27485: PUSH
27486: LD_INT 2
27488: NEG
27489: PUSH
27490: EMPTY
27491: LIST
27492: LIST
27493: PUSH
27494: EMPTY
27495: LIST
27496: LIST
27497: LIST
27498: LIST
27499: LIST
27500: LIST
27501: LIST
27502: LIST
27503: LIST
27504: LIST
27505: LIST
27506: LIST
27507: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27508: LD_ADDR_VAR 0 53
27512: PUSH
27513: LD_INT 0
27515: PUSH
27516: LD_INT 0
27518: PUSH
27519: EMPTY
27520: LIST
27521: LIST
27522: PUSH
27523: LD_INT 0
27525: PUSH
27526: LD_INT 1
27528: NEG
27529: PUSH
27530: EMPTY
27531: LIST
27532: LIST
27533: PUSH
27534: LD_INT 1
27536: PUSH
27537: LD_INT 0
27539: PUSH
27540: EMPTY
27541: LIST
27542: LIST
27543: PUSH
27544: LD_INT 1
27546: PUSH
27547: LD_INT 1
27549: PUSH
27550: EMPTY
27551: LIST
27552: LIST
27553: PUSH
27554: LD_INT 0
27556: PUSH
27557: LD_INT 1
27559: PUSH
27560: EMPTY
27561: LIST
27562: LIST
27563: PUSH
27564: LD_INT 1
27566: NEG
27567: PUSH
27568: LD_INT 0
27570: PUSH
27571: EMPTY
27572: LIST
27573: LIST
27574: PUSH
27575: LD_INT 1
27577: NEG
27578: PUSH
27579: LD_INT 1
27581: NEG
27582: PUSH
27583: EMPTY
27584: LIST
27585: LIST
27586: PUSH
27587: LD_INT 1
27589: NEG
27590: PUSH
27591: LD_INT 2
27593: NEG
27594: PUSH
27595: EMPTY
27596: LIST
27597: LIST
27598: PUSH
27599: LD_INT 0
27601: PUSH
27602: LD_INT 2
27604: NEG
27605: PUSH
27606: EMPTY
27607: LIST
27608: LIST
27609: PUSH
27610: LD_INT 1
27612: PUSH
27613: LD_INT 1
27615: NEG
27616: PUSH
27617: EMPTY
27618: LIST
27619: LIST
27620: PUSH
27621: LD_INT 2
27623: PUSH
27624: LD_INT 0
27626: PUSH
27627: EMPTY
27628: LIST
27629: LIST
27630: PUSH
27631: LD_INT 2
27633: PUSH
27634: LD_INT 1
27636: PUSH
27637: EMPTY
27638: LIST
27639: LIST
27640: PUSH
27641: LD_INT 2
27643: PUSH
27644: LD_INT 2
27646: PUSH
27647: EMPTY
27648: LIST
27649: LIST
27650: PUSH
27651: LD_INT 1
27653: PUSH
27654: LD_INT 2
27656: PUSH
27657: EMPTY
27658: LIST
27659: LIST
27660: PUSH
27661: LD_INT 0
27663: PUSH
27664: LD_INT 2
27666: PUSH
27667: EMPTY
27668: LIST
27669: LIST
27670: PUSH
27671: LD_INT 1
27673: NEG
27674: PUSH
27675: LD_INT 1
27677: PUSH
27678: EMPTY
27679: LIST
27680: LIST
27681: PUSH
27682: LD_INT 2
27684: NEG
27685: PUSH
27686: LD_INT 0
27688: PUSH
27689: EMPTY
27690: LIST
27691: LIST
27692: PUSH
27693: LD_INT 2
27695: NEG
27696: PUSH
27697: LD_INT 1
27699: NEG
27700: PUSH
27701: EMPTY
27702: LIST
27703: LIST
27704: PUSH
27705: LD_INT 2
27707: NEG
27708: PUSH
27709: LD_INT 2
27711: NEG
27712: PUSH
27713: EMPTY
27714: LIST
27715: LIST
27716: PUSH
27717: EMPTY
27718: LIST
27719: LIST
27720: LIST
27721: LIST
27722: LIST
27723: LIST
27724: LIST
27725: LIST
27726: LIST
27727: LIST
27728: LIST
27729: LIST
27730: LIST
27731: LIST
27732: LIST
27733: LIST
27734: LIST
27735: LIST
27736: LIST
27737: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27738: LD_ADDR_VAR 0 54
27742: PUSH
27743: LD_INT 0
27745: PUSH
27746: LD_INT 0
27748: PUSH
27749: EMPTY
27750: LIST
27751: LIST
27752: PUSH
27753: LD_INT 0
27755: PUSH
27756: LD_INT 1
27758: NEG
27759: PUSH
27760: EMPTY
27761: LIST
27762: LIST
27763: PUSH
27764: LD_INT 1
27766: PUSH
27767: LD_INT 0
27769: PUSH
27770: EMPTY
27771: LIST
27772: LIST
27773: PUSH
27774: LD_INT 1
27776: PUSH
27777: LD_INT 1
27779: PUSH
27780: EMPTY
27781: LIST
27782: LIST
27783: PUSH
27784: LD_INT 0
27786: PUSH
27787: LD_INT 1
27789: PUSH
27790: EMPTY
27791: LIST
27792: LIST
27793: PUSH
27794: LD_INT 1
27796: NEG
27797: PUSH
27798: LD_INT 0
27800: PUSH
27801: EMPTY
27802: LIST
27803: LIST
27804: PUSH
27805: LD_INT 1
27807: NEG
27808: PUSH
27809: LD_INT 1
27811: NEG
27812: PUSH
27813: EMPTY
27814: LIST
27815: LIST
27816: PUSH
27817: LD_INT 1
27819: NEG
27820: PUSH
27821: LD_INT 2
27823: NEG
27824: PUSH
27825: EMPTY
27826: LIST
27827: LIST
27828: PUSH
27829: LD_INT 0
27831: PUSH
27832: LD_INT 2
27834: NEG
27835: PUSH
27836: EMPTY
27837: LIST
27838: LIST
27839: PUSH
27840: LD_INT 1
27842: PUSH
27843: LD_INT 1
27845: NEG
27846: PUSH
27847: EMPTY
27848: LIST
27849: LIST
27850: PUSH
27851: LD_INT 2
27853: PUSH
27854: LD_INT 0
27856: PUSH
27857: EMPTY
27858: LIST
27859: LIST
27860: PUSH
27861: LD_INT 2
27863: PUSH
27864: LD_INT 1
27866: PUSH
27867: EMPTY
27868: LIST
27869: LIST
27870: PUSH
27871: LD_INT 2
27873: PUSH
27874: LD_INT 2
27876: PUSH
27877: EMPTY
27878: LIST
27879: LIST
27880: PUSH
27881: LD_INT 1
27883: PUSH
27884: LD_INT 2
27886: PUSH
27887: EMPTY
27888: LIST
27889: LIST
27890: PUSH
27891: LD_INT 0
27893: PUSH
27894: LD_INT 2
27896: PUSH
27897: EMPTY
27898: LIST
27899: LIST
27900: PUSH
27901: LD_INT 1
27903: NEG
27904: PUSH
27905: LD_INT 1
27907: PUSH
27908: EMPTY
27909: LIST
27910: LIST
27911: PUSH
27912: LD_INT 2
27914: NEG
27915: PUSH
27916: LD_INT 0
27918: PUSH
27919: EMPTY
27920: LIST
27921: LIST
27922: PUSH
27923: LD_INT 2
27925: NEG
27926: PUSH
27927: LD_INT 1
27929: NEG
27930: PUSH
27931: EMPTY
27932: LIST
27933: LIST
27934: PUSH
27935: LD_INT 2
27937: NEG
27938: PUSH
27939: LD_INT 2
27941: NEG
27942: PUSH
27943: EMPTY
27944: LIST
27945: LIST
27946: PUSH
27947: EMPTY
27948: LIST
27949: LIST
27950: LIST
27951: LIST
27952: LIST
27953: LIST
27954: LIST
27955: LIST
27956: LIST
27957: LIST
27958: LIST
27959: LIST
27960: LIST
27961: LIST
27962: LIST
27963: LIST
27964: LIST
27965: LIST
27966: LIST
27967: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27968: LD_ADDR_VAR 0 55
27972: PUSH
27973: LD_INT 0
27975: PUSH
27976: LD_INT 0
27978: PUSH
27979: EMPTY
27980: LIST
27981: LIST
27982: PUSH
27983: LD_INT 0
27985: PUSH
27986: LD_INT 1
27988: NEG
27989: PUSH
27990: EMPTY
27991: LIST
27992: LIST
27993: PUSH
27994: LD_INT 1
27996: PUSH
27997: LD_INT 0
27999: PUSH
28000: EMPTY
28001: LIST
28002: LIST
28003: PUSH
28004: LD_INT 1
28006: PUSH
28007: LD_INT 1
28009: PUSH
28010: EMPTY
28011: LIST
28012: LIST
28013: PUSH
28014: LD_INT 0
28016: PUSH
28017: LD_INT 1
28019: PUSH
28020: EMPTY
28021: LIST
28022: LIST
28023: PUSH
28024: LD_INT 1
28026: NEG
28027: PUSH
28028: LD_INT 0
28030: PUSH
28031: EMPTY
28032: LIST
28033: LIST
28034: PUSH
28035: LD_INT 1
28037: NEG
28038: PUSH
28039: LD_INT 1
28041: NEG
28042: PUSH
28043: EMPTY
28044: LIST
28045: LIST
28046: PUSH
28047: LD_INT 1
28049: NEG
28050: PUSH
28051: LD_INT 2
28053: NEG
28054: PUSH
28055: EMPTY
28056: LIST
28057: LIST
28058: PUSH
28059: LD_INT 0
28061: PUSH
28062: LD_INT 2
28064: NEG
28065: PUSH
28066: EMPTY
28067: LIST
28068: LIST
28069: PUSH
28070: LD_INT 1
28072: PUSH
28073: LD_INT 1
28075: NEG
28076: PUSH
28077: EMPTY
28078: LIST
28079: LIST
28080: PUSH
28081: LD_INT 2
28083: PUSH
28084: LD_INT 0
28086: PUSH
28087: EMPTY
28088: LIST
28089: LIST
28090: PUSH
28091: LD_INT 2
28093: PUSH
28094: LD_INT 1
28096: PUSH
28097: EMPTY
28098: LIST
28099: LIST
28100: PUSH
28101: LD_INT 2
28103: PUSH
28104: LD_INT 2
28106: PUSH
28107: EMPTY
28108: LIST
28109: LIST
28110: PUSH
28111: LD_INT 1
28113: PUSH
28114: LD_INT 2
28116: PUSH
28117: EMPTY
28118: LIST
28119: LIST
28120: PUSH
28121: LD_INT 0
28123: PUSH
28124: LD_INT 2
28126: PUSH
28127: EMPTY
28128: LIST
28129: LIST
28130: PUSH
28131: LD_INT 1
28133: NEG
28134: PUSH
28135: LD_INT 1
28137: PUSH
28138: EMPTY
28139: LIST
28140: LIST
28141: PUSH
28142: LD_INT 2
28144: NEG
28145: PUSH
28146: LD_INT 0
28148: PUSH
28149: EMPTY
28150: LIST
28151: LIST
28152: PUSH
28153: LD_INT 2
28155: NEG
28156: PUSH
28157: LD_INT 1
28159: NEG
28160: PUSH
28161: EMPTY
28162: LIST
28163: LIST
28164: PUSH
28165: LD_INT 2
28167: NEG
28168: PUSH
28169: LD_INT 2
28171: NEG
28172: PUSH
28173: EMPTY
28174: LIST
28175: LIST
28176: PUSH
28177: EMPTY
28178: LIST
28179: LIST
28180: LIST
28181: LIST
28182: LIST
28183: LIST
28184: LIST
28185: LIST
28186: LIST
28187: LIST
28188: LIST
28189: LIST
28190: LIST
28191: LIST
28192: LIST
28193: LIST
28194: LIST
28195: LIST
28196: LIST
28197: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28198: LD_ADDR_VAR 0 56
28202: PUSH
28203: LD_INT 0
28205: PUSH
28206: LD_INT 0
28208: PUSH
28209: EMPTY
28210: LIST
28211: LIST
28212: PUSH
28213: LD_INT 0
28215: PUSH
28216: LD_INT 1
28218: NEG
28219: PUSH
28220: EMPTY
28221: LIST
28222: LIST
28223: PUSH
28224: LD_INT 1
28226: PUSH
28227: LD_INT 0
28229: PUSH
28230: EMPTY
28231: LIST
28232: LIST
28233: PUSH
28234: LD_INT 1
28236: PUSH
28237: LD_INT 1
28239: PUSH
28240: EMPTY
28241: LIST
28242: LIST
28243: PUSH
28244: LD_INT 0
28246: PUSH
28247: LD_INT 1
28249: PUSH
28250: EMPTY
28251: LIST
28252: LIST
28253: PUSH
28254: LD_INT 1
28256: NEG
28257: PUSH
28258: LD_INT 0
28260: PUSH
28261: EMPTY
28262: LIST
28263: LIST
28264: PUSH
28265: LD_INT 1
28267: NEG
28268: PUSH
28269: LD_INT 1
28271: NEG
28272: PUSH
28273: EMPTY
28274: LIST
28275: LIST
28276: PUSH
28277: LD_INT 1
28279: NEG
28280: PUSH
28281: LD_INT 2
28283: NEG
28284: PUSH
28285: EMPTY
28286: LIST
28287: LIST
28288: PUSH
28289: LD_INT 0
28291: PUSH
28292: LD_INT 2
28294: NEG
28295: PUSH
28296: EMPTY
28297: LIST
28298: LIST
28299: PUSH
28300: LD_INT 1
28302: PUSH
28303: LD_INT 1
28305: NEG
28306: PUSH
28307: EMPTY
28308: LIST
28309: LIST
28310: PUSH
28311: LD_INT 2
28313: PUSH
28314: LD_INT 0
28316: PUSH
28317: EMPTY
28318: LIST
28319: LIST
28320: PUSH
28321: LD_INT 2
28323: PUSH
28324: LD_INT 1
28326: PUSH
28327: EMPTY
28328: LIST
28329: LIST
28330: PUSH
28331: LD_INT 2
28333: PUSH
28334: LD_INT 2
28336: PUSH
28337: EMPTY
28338: LIST
28339: LIST
28340: PUSH
28341: LD_INT 1
28343: PUSH
28344: LD_INT 2
28346: PUSH
28347: EMPTY
28348: LIST
28349: LIST
28350: PUSH
28351: LD_INT 0
28353: PUSH
28354: LD_INT 2
28356: PUSH
28357: EMPTY
28358: LIST
28359: LIST
28360: PUSH
28361: LD_INT 1
28363: NEG
28364: PUSH
28365: LD_INT 1
28367: PUSH
28368: EMPTY
28369: LIST
28370: LIST
28371: PUSH
28372: LD_INT 2
28374: NEG
28375: PUSH
28376: LD_INT 0
28378: PUSH
28379: EMPTY
28380: LIST
28381: LIST
28382: PUSH
28383: LD_INT 2
28385: NEG
28386: PUSH
28387: LD_INT 1
28389: NEG
28390: PUSH
28391: EMPTY
28392: LIST
28393: LIST
28394: PUSH
28395: LD_INT 2
28397: NEG
28398: PUSH
28399: LD_INT 2
28401: NEG
28402: PUSH
28403: EMPTY
28404: LIST
28405: LIST
28406: PUSH
28407: EMPTY
28408: LIST
28409: LIST
28410: LIST
28411: LIST
28412: LIST
28413: LIST
28414: LIST
28415: LIST
28416: LIST
28417: LIST
28418: LIST
28419: LIST
28420: LIST
28421: LIST
28422: LIST
28423: LIST
28424: LIST
28425: LIST
28426: LIST
28427: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28428: LD_ADDR_VAR 0 57
28432: PUSH
28433: LD_INT 0
28435: PUSH
28436: LD_INT 0
28438: PUSH
28439: EMPTY
28440: LIST
28441: LIST
28442: PUSH
28443: LD_INT 0
28445: PUSH
28446: LD_INT 1
28448: NEG
28449: PUSH
28450: EMPTY
28451: LIST
28452: LIST
28453: PUSH
28454: LD_INT 1
28456: PUSH
28457: LD_INT 0
28459: PUSH
28460: EMPTY
28461: LIST
28462: LIST
28463: PUSH
28464: LD_INT 1
28466: PUSH
28467: LD_INT 1
28469: PUSH
28470: EMPTY
28471: LIST
28472: LIST
28473: PUSH
28474: LD_INT 0
28476: PUSH
28477: LD_INT 1
28479: PUSH
28480: EMPTY
28481: LIST
28482: LIST
28483: PUSH
28484: LD_INT 1
28486: NEG
28487: PUSH
28488: LD_INT 0
28490: PUSH
28491: EMPTY
28492: LIST
28493: LIST
28494: PUSH
28495: LD_INT 1
28497: NEG
28498: PUSH
28499: LD_INT 1
28501: NEG
28502: PUSH
28503: EMPTY
28504: LIST
28505: LIST
28506: PUSH
28507: LD_INT 1
28509: NEG
28510: PUSH
28511: LD_INT 2
28513: NEG
28514: PUSH
28515: EMPTY
28516: LIST
28517: LIST
28518: PUSH
28519: LD_INT 0
28521: PUSH
28522: LD_INT 2
28524: NEG
28525: PUSH
28526: EMPTY
28527: LIST
28528: LIST
28529: PUSH
28530: LD_INT 1
28532: PUSH
28533: LD_INT 1
28535: NEG
28536: PUSH
28537: EMPTY
28538: LIST
28539: LIST
28540: PUSH
28541: LD_INT 2
28543: PUSH
28544: LD_INT 0
28546: PUSH
28547: EMPTY
28548: LIST
28549: LIST
28550: PUSH
28551: LD_INT 2
28553: PUSH
28554: LD_INT 1
28556: PUSH
28557: EMPTY
28558: LIST
28559: LIST
28560: PUSH
28561: LD_INT 2
28563: PUSH
28564: LD_INT 2
28566: PUSH
28567: EMPTY
28568: LIST
28569: LIST
28570: PUSH
28571: LD_INT 1
28573: PUSH
28574: LD_INT 2
28576: PUSH
28577: EMPTY
28578: LIST
28579: LIST
28580: PUSH
28581: LD_INT 0
28583: PUSH
28584: LD_INT 2
28586: PUSH
28587: EMPTY
28588: LIST
28589: LIST
28590: PUSH
28591: LD_INT 1
28593: NEG
28594: PUSH
28595: LD_INT 1
28597: PUSH
28598: EMPTY
28599: LIST
28600: LIST
28601: PUSH
28602: LD_INT 2
28604: NEG
28605: PUSH
28606: LD_INT 0
28608: PUSH
28609: EMPTY
28610: LIST
28611: LIST
28612: PUSH
28613: LD_INT 2
28615: NEG
28616: PUSH
28617: LD_INT 1
28619: NEG
28620: PUSH
28621: EMPTY
28622: LIST
28623: LIST
28624: PUSH
28625: LD_INT 2
28627: NEG
28628: PUSH
28629: LD_INT 2
28631: NEG
28632: PUSH
28633: EMPTY
28634: LIST
28635: LIST
28636: PUSH
28637: EMPTY
28638: LIST
28639: LIST
28640: LIST
28641: LIST
28642: LIST
28643: LIST
28644: LIST
28645: LIST
28646: LIST
28647: LIST
28648: LIST
28649: LIST
28650: LIST
28651: LIST
28652: LIST
28653: LIST
28654: LIST
28655: LIST
28656: LIST
28657: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28658: LD_ADDR_VAR 0 58
28662: PUSH
28663: LD_INT 0
28665: PUSH
28666: LD_INT 0
28668: PUSH
28669: EMPTY
28670: LIST
28671: LIST
28672: PUSH
28673: LD_INT 0
28675: PUSH
28676: LD_INT 1
28678: NEG
28679: PUSH
28680: EMPTY
28681: LIST
28682: LIST
28683: PUSH
28684: LD_INT 1
28686: PUSH
28687: LD_INT 0
28689: PUSH
28690: EMPTY
28691: LIST
28692: LIST
28693: PUSH
28694: LD_INT 1
28696: PUSH
28697: LD_INT 1
28699: PUSH
28700: EMPTY
28701: LIST
28702: LIST
28703: PUSH
28704: LD_INT 0
28706: PUSH
28707: LD_INT 1
28709: PUSH
28710: EMPTY
28711: LIST
28712: LIST
28713: PUSH
28714: LD_INT 1
28716: NEG
28717: PUSH
28718: LD_INT 0
28720: PUSH
28721: EMPTY
28722: LIST
28723: LIST
28724: PUSH
28725: LD_INT 1
28727: NEG
28728: PUSH
28729: LD_INT 1
28731: NEG
28732: PUSH
28733: EMPTY
28734: LIST
28735: LIST
28736: PUSH
28737: LD_INT 1
28739: NEG
28740: PUSH
28741: LD_INT 2
28743: NEG
28744: PUSH
28745: EMPTY
28746: LIST
28747: LIST
28748: PUSH
28749: LD_INT 0
28751: PUSH
28752: LD_INT 2
28754: NEG
28755: PUSH
28756: EMPTY
28757: LIST
28758: LIST
28759: PUSH
28760: LD_INT 1
28762: PUSH
28763: LD_INT 1
28765: NEG
28766: PUSH
28767: EMPTY
28768: LIST
28769: LIST
28770: PUSH
28771: LD_INT 2
28773: PUSH
28774: LD_INT 0
28776: PUSH
28777: EMPTY
28778: LIST
28779: LIST
28780: PUSH
28781: LD_INT 2
28783: PUSH
28784: LD_INT 1
28786: PUSH
28787: EMPTY
28788: LIST
28789: LIST
28790: PUSH
28791: LD_INT 2
28793: PUSH
28794: LD_INT 2
28796: PUSH
28797: EMPTY
28798: LIST
28799: LIST
28800: PUSH
28801: LD_INT 1
28803: PUSH
28804: LD_INT 2
28806: PUSH
28807: EMPTY
28808: LIST
28809: LIST
28810: PUSH
28811: LD_INT 0
28813: PUSH
28814: LD_INT 2
28816: PUSH
28817: EMPTY
28818: LIST
28819: LIST
28820: PUSH
28821: LD_INT 1
28823: NEG
28824: PUSH
28825: LD_INT 1
28827: PUSH
28828: EMPTY
28829: LIST
28830: LIST
28831: PUSH
28832: LD_INT 2
28834: NEG
28835: PUSH
28836: LD_INT 0
28838: PUSH
28839: EMPTY
28840: LIST
28841: LIST
28842: PUSH
28843: LD_INT 2
28845: NEG
28846: PUSH
28847: LD_INT 1
28849: NEG
28850: PUSH
28851: EMPTY
28852: LIST
28853: LIST
28854: PUSH
28855: LD_INT 2
28857: NEG
28858: PUSH
28859: LD_INT 2
28861: NEG
28862: PUSH
28863: EMPTY
28864: LIST
28865: LIST
28866: PUSH
28867: EMPTY
28868: LIST
28869: LIST
28870: LIST
28871: LIST
28872: LIST
28873: LIST
28874: LIST
28875: LIST
28876: LIST
28877: LIST
28878: LIST
28879: LIST
28880: LIST
28881: LIST
28882: LIST
28883: LIST
28884: LIST
28885: LIST
28886: LIST
28887: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28888: LD_ADDR_VAR 0 59
28892: PUSH
28893: LD_INT 0
28895: PUSH
28896: LD_INT 0
28898: PUSH
28899: EMPTY
28900: LIST
28901: LIST
28902: PUSH
28903: LD_INT 0
28905: PUSH
28906: LD_INT 1
28908: NEG
28909: PUSH
28910: EMPTY
28911: LIST
28912: LIST
28913: PUSH
28914: LD_INT 1
28916: PUSH
28917: LD_INT 0
28919: PUSH
28920: EMPTY
28921: LIST
28922: LIST
28923: PUSH
28924: LD_INT 1
28926: PUSH
28927: LD_INT 1
28929: PUSH
28930: EMPTY
28931: LIST
28932: LIST
28933: PUSH
28934: LD_INT 0
28936: PUSH
28937: LD_INT 1
28939: PUSH
28940: EMPTY
28941: LIST
28942: LIST
28943: PUSH
28944: LD_INT 1
28946: NEG
28947: PUSH
28948: LD_INT 0
28950: PUSH
28951: EMPTY
28952: LIST
28953: LIST
28954: PUSH
28955: LD_INT 1
28957: NEG
28958: PUSH
28959: LD_INT 1
28961: NEG
28962: PUSH
28963: EMPTY
28964: LIST
28965: LIST
28966: PUSH
28967: EMPTY
28968: LIST
28969: LIST
28970: LIST
28971: LIST
28972: LIST
28973: LIST
28974: LIST
28975: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28976: LD_ADDR_VAR 0 60
28980: PUSH
28981: LD_INT 0
28983: PUSH
28984: LD_INT 0
28986: PUSH
28987: EMPTY
28988: LIST
28989: LIST
28990: PUSH
28991: LD_INT 0
28993: PUSH
28994: LD_INT 1
28996: NEG
28997: PUSH
28998: EMPTY
28999: LIST
29000: LIST
29001: PUSH
29002: LD_INT 1
29004: PUSH
29005: LD_INT 0
29007: PUSH
29008: EMPTY
29009: LIST
29010: LIST
29011: PUSH
29012: LD_INT 1
29014: PUSH
29015: LD_INT 1
29017: PUSH
29018: EMPTY
29019: LIST
29020: LIST
29021: PUSH
29022: LD_INT 0
29024: PUSH
29025: LD_INT 1
29027: PUSH
29028: EMPTY
29029: LIST
29030: LIST
29031: PUSH
29032: LD_INT 1
29034: NEG
29035: PUSH
29036: LD_INT 0
29038: PUSH
29039: EMPTY
29040: LIST
29041: LIST
29042: PUSH
29043: LD_INT 1
29045: NEG
29046: PUSH
29047: LD_INT 1
29049: NEG
29050: PUSH
29051: EMPTY
29052: LIST
29053: LIST
29054: PUSH
29055: EMPTY
29056: LIST
29057: LIST
29058: LIST
29059: LIST
29060: LIST
29061: LIST
29062: LIST
29063: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29064: LD_ADDR_VAR 0 61
29068: PUSH
29069: LD_INT 0
29071: PUSH
29072: LD_INT 0
29074: PUSH
29075: EMPTY
29076: LIST
29077: LIST
29078: PUSH
29079: LD_INT 0
29081: PUSH
29082: LD_INT 1
29084: NEG
29085: PUSH
29086: EMPTY
29087: LIST
29088: LIST
29089: PUSH
29090: LD_INT 1
29092: PUSH
29093: LD_INT 0
29095: PUSH
29096: EMPTY
29097: LIST
29098: LIST
29099: PUSH
29100: LD_INT 1
29102: PUSH
29103: LD_INT 1
29105: PUSH
29106: EMPTY
29107: LIST
29108: LIST
29109: PUSH
29110: LD_INT 0
29112: PUSH
29113: LD_INT 1
29115: PUSH
29116: EMPTY
29117: LIST
29118: LIST
29119: PUSH
29120: LD_INT 1
29122: NEG
29123: PUSH
29124: LD_INT 0
29126: PUSH
29127: EMPTY
29128: LIST
29129: LIST
29130: PUSH
29131: LD_INT 1
29133: NEG
29134: PUSH
29135: LD_INT 1
29137: NEG
29138: PUSH
29139: EMPTY
29140: LIST
29141: LIST
29142: PUSH
29143: EMPTY
29144: LIST
29145: LIST
29146: LIST
29147: LIST
29148: LIST
29149: LIST
29150: LIST
29151: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29152: LD_ADDR_VAR 0 62
29156: PUSH
29157: LD_INT 0
29159: PUSH
29160: LD_INT 0
29162: PUSH
29163: EMPTY
29164: LIST
29165: LIST
29166: PUSH
29167: LD_INT 0
29169: PUSH
29170: LD_INT 1
29172: NEG
29173: PUSH
29174: EMPTY
29175: LIST
29176: LIST
29177: PUSH
29178: LD_INT 1
29180: PUSH
29181: LD_INT 0
29183: PUSH
29184: EMPTY
29185: LIST
29186: LIST
29187: PUSH
29188: LD_INT 1
29190: PUSH
29191: LD_INT 1
29193: PUSH
29194: EMPTY
29195: LIST
29196: LIST
29197: PUSH
29198: LD_INT 0
29200: PUSH
29201: LD_INT 1
29203: PUSH
29204: EMPTY
29205: LIST
29206: LIST
29207: PUSH
29208: LD_INT 1
29210: NEG
29211: PUSH
29212: LD_INT 0
29214: PUSH
29215: EMPTY
29216: LIST
29217: LIST
29218: PUSH
29219: LD_INT 1
29221: NEG
29222: PUSH
29223: LD_INT 1
29225: NEG
29226: PUSH
29227: EMPTY
29228: LIST
29229: LIST
29230: PUSH
29231: EMPTY
29232: LIST
29233: LIST
29234: LIST
29235: LIST
29236: LIST
29237: LIST
29238: LIST
29239: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29240: LD_ADDR_VAR 0 63
29244: PUSH
29245: LD_INT 0
29247: PUSH
29248: LD_INT 0
29250: PUSH
29251: EMPTY
29252: LIST
29253: LIST
29254: PUSH
29255: LD_INT 0
29257: PUSH
29258: LD_INT 1
29260: NEG
29261: PUSH
29262: EMPTY
29263: LIST
29264: LIST
29265: PUSH
29266: LD_INT 1
29268: PUSH
29269: LD_INT 0
29271: PUSH
29272: EMPTY
29273: LIST
29274: LIST
29275: PUSH
29276: LD_INT 1
29278: PUSH
29279: LD_INT 1
29281: PUSH
29282: EMPTY
29283: LIST
29284: LIST
29285: PUSH
29286: LD_INT 0
29288: PUSH
29289: LD_INT 1
29291: PUSH
29292: EMPTY
29293: LIST
29294: LIST
29295: PUSH
29296: LD_INT 1
29298: NEG
29299: PUSH
29300: LD_INT 0
29302: PUSH
29303: EMPTY
29304: LIST
29305: LIST
29306: PUSH
29307: LD_INT 1
29309: NEG
29310: PUSH
29311: LD_INT 1
29313: NEG
29314: PUSH
29315: EMPTY
29316: LIST
29317: LIST
29318: PUSH
29319: EMPTY
29320: LIST
29321: LIST
29322: LIST
29323: LIST
29324: LIST
29325: LIST
29326: LIST
29327: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29328: LD_ADDR_VAR 0 64
29332: PUSH
29333: LD_INT 0
29335: PUSH
29336: LD_INT 0
29338: PUSH
29339: EMPTY
29340: LIST
29341: LIST
29342: PUSH
29343: LD_INT 0
29345: PUSH
29346: LD_INT 1
29348: NEG
29349: PUSH
29350: EMPTY
29351: LIST
29352: LIST
29353: PUSH
29354: LD_INT 1
29356: PUSH
29357: LD_INT 0
29359: PUSH
29360: EMPTY
29361: LIST
29362: LIST
29363: PUSH
29364: LD_INT 1
29366: PUSH
29367: LD_INT 1
29369: PUSH
29370: EMPTY
29371: LIST
29372: LIST
29373: PUSH
29374: LD_INT 0
29376: PUSH
29377: LD_INT 1
29379: PUSH
29380: EMPTY
29381: LIST
29382: LIST
29383: PUSH
29384: LD_INT 1
29386: NEG
29387: PUSH
29388: LD_INT 0
29390: PUSH
29391: EMPTY
29392: LIST
29393: LIST
29394: PUSH
29395: LD_INT 1
29397: NEG
29398: PUSH
29399: LD_INT 1
29401: NEG
29402: PUSH
29403: EMPTY
29404: LIST
29405: LIST
29406: PUSH
29407: EMPTY
29408: LIST
29409: LIST
29410: LIST
29411: LIST
29412: LIST
29413: LIST
29414: LIST
29415: ST_TO_ADDR
// end ; 1 :
29416: GO 35313
29418: LD_INT 1
29420: DOUBLE
29421: EQUAL
29422: IFTRUE 29426
29424: GO 32049
29426: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29427: LD_ADDR_VAR 0 11
29431: PUSH
29432: LD_INT 1
29434: NEG
29435: PUSH
29436: LD_INT 3
29438: NEG
29439: PUSH
29440: EMPTY
29441: LIST
29442: LIST
29443: PUSH
29444: LD_INT 0
29446: PUSH
29447: LD_INT 3
29449: NEG
29450: PUSH
29451: EMPTY
29452: LIST
29453: LIST
29454: PUSH
29455: LD_INT 1
29457: PUSH
29458: LD_INT 2
29460: NEG
29461: PUSH
29462: EMPTY
29463: LIST
29464: LIST
29465: PUSH
29466: EMPTY
29467: LIST
29468: LIST
29469: LIST
29470: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29471: LD_ADDR_VAR 0 12
29475: PUSH
29476: LD_INT 2
29478: PUSH
29479: LD_INT 1
29481: NEG
29482: PUSH
29483: EMPTY
29484: LIST
29485: LIST
29486: PUSH
29487: LD_INT 3
29489: PUSH
29490: LD_INT 0
29492: PUSH
29493: EMPTY
29494: LIST
29495: LIST
29496: PUSH
29497: LD_INT 3
29499: PUSH
29500: LD_INT 1
29502: PUSH
29503: EMPTY
29504: LIST
29505: LIST
29506: PUSH
29507: EMPTY
29508: LIST
29509: LIST
29510: LIST
29511: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29512: LD_ADDR_VAR 0 13
29516: PUSH
29517: LD_INT 3
29519: PUSH
29520: LD_INT 2
29522: PUSH
29523: EMPTY
29524: LIST
29525: LIST
29526: PUSH
29527: LD_INT 3
29529: PUSH
29530: LD_INT 3
29532: PUSH
29533: EMPTY
29534: LIST
29535: LIST
29536: PUSH
29537: LD_INT 2
29539: PUSH
29540: LD_INT 3
29542: PUSH
29543: EMPTY
29544: LIST
29545: LIST
29546: PUSH
29547: EMPTY
29548: LIST
29549: LIST
29550: LIST
29551: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29552: LD_ADDR_VAR 0 14
29556: PUSH
29557: LD_INT 1
29559: PUSH
29560: LD_INT 3
29562: PUSH
29563: EMPTY
29564: LIST
29565: LIST
29566: PUSH
29567: LD_INT 0
29569: PUSH
29570: LD_INT 3
29572: PUSH
29573: EMPTY
29574: LIST
29575: LIST
29576: PUSH
29577: LD_INT 1
29579: NEG
29580: PUSH
29581: LD_INT 2
29583: PUSH
29584: EMPTY
29585: LIST
29586: LIST
29587: PUSH
29588: EMPTY
29589: LIST
29590: LIST
29591: LIST
29592: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29593: LD_ADDR_VAR 0 15
29597: PUSH
29598: LD_INT 2
29600: NEG
29601: PUSH
29602: LD_INT 1
29604: PUSH
29605: EMPTY
29606: LIST
29607: LIST
29608: PUSH
29609: LD_INT 3
29611: NEG
29612: PUSH
29613: LD_INT 0
29615: PUSH
29616: EMPTY
29617: LIST
29618: LIST
29619: PUSH
29620: LD_INT 3
29622: NEG
29623: PUSH
29624: LD_INT 1
29626: NEG
29627: PUSH
29628: EMPTY
29629: LIST
29630: LIST
29631: PUSH
29632: EMPTY
29633: LIST
29634: LIST
29635: LIST
29636: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29637: LD_ADDR_VAR 0 16
29641: PUSH
29642: LD_INT 2
29644: NEG
29645: PUSH
29646: LD_INT 3
29648: NEG
29649: PUSH
29650: EMPTY
29651: LIST
29652: LIST
29653: PUSH
29654: LD_INT 3
29656: NEG
29657: PUSH
29658: LD_INT 2
29660: NEG
29661: PUSH
29662: EMPTY
29663: LIST
29664: LIST
29665: PUSH
29666: LD_INT 3
29668: NEG
29669: PUSH
29670: LD_INT 3
29672: NEG
29673: PUSH
29674: EMPTY
29675: LIST
29676: LIST
29677: PUSH
29678: EMPTY
29679: LIST
29680: LIST
29681: LIST
29682: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29683: LD_ADDR_VAR 0 17
29687: PUSH
29688: LD_INT 1
29690: NEG
29691: PUSH
29692: LD_INT 3
29694: NEG
29695: PUSH
29696: EMPTY
29697: LIST
29698: LIST
29699: PUSH
29700: LD_INT 0
29702: PUSH
29703: LD_INT 3
29705: NEG
29706: PUSH
29707: EMPTY
29708: LIST
29709: LIST
29710: PUSH
29711: LD_INT 1
29713: PUSH
29714: LD_INT 2
29716: NEG
29717: PUSH
29718: EMPTY
29719: LIST
29720: LIST
29721: PUSH
29722: EMPTY
29723: LIST
29724: LIST
29725: LIST
29726: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29727: LD_ADDR_VAR 0 18
29731: PUSH
29732: LD_INT 2
29734: PUSH
29735: LD_INT 1
29737: NEG
29738: PUSH
29739: EMPTY
29740: LIST
29741: LIST
29742: PUSH
29743: LD_INT 3
29745: PUSH
29746: LD_INT 0
29748: PUSH
29749: EMPTY
29750: LIST
29751: LIST
29752: PUSH
29753: LD_INT 3
29755: PUSH
29756: LD_INT 1
29758: PUSH
29759: EMPTY
29760: LIST
29761: LIST
29762: PUSH
29763: EMPTY
29764: LIST
29765: LIST
29766: LIST
29767: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29768: LD_ADDR_VAR 0 19
29772: PUSH
29773: LD_INT 3
29775: PUSH
29776: LD_INT 2
29778: PUSH
29779: EMPTY
29780: LIST
29781: LIST
29782: PUSH
29783: LD_INT 3
29785: PUSH
29786: LD_INT 3
29788: PUSH
29789: EMPTY
29790: LIST
29791: LIST
29792: PUSH
29793: LD_INT 2
29795: PUSH
29796: LD_INT 3
29798: PUSH
29799: EMPTY
29800: LIST
29801: LIST
29802: PUSH
29803: EMPTY
29804: LIST
29805: LIST
29806: LIST
29807: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29808: LD_ADDR_VAR 0 20
29812: PUSH
29813: LD_INT 1
29815: PUSH
29816: LD_INT 3
29818: PUSH
29819: EMPTY
29820: LIST
29821: LIST
29822: PUSH
29823: LD_INT 0
29825: PUSH
29826: LD_INT 3
29828: PUSH
29829: EMPTY
29830: LIST
29831: LIST
29832: PUSH
29833: LD_INT 1
29835: NEG
29836: PUSH
29837: LD_INT 2
29839: PUSH
29840: EMPTY
29841: LIST
29842: LIST
29843: PUSH
29844: EMPTY
29845: LIST
29846: LIST
29847: LIST
29848: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29849: LD_ADDR_VAR 0 21
29853: PUSH
29854: LD_INT 2
29856: NEG
29857: PUSH
29858: LD_INT 1
29860: PUSH
29861: EMPTY
29862: LIST
29863: LIST
29864: PUSH
29865: LD_INT 3
29867: NEG
29868: PUSH
29869: LD_INT 0
29871: PUSH
29872: EMPTY
29873: LIST
29874: LIST
29875: PUSH
29876: LD_INT 3
29878: NEG
29879: PUSH
29880: LD_INT 1
29882: NEG
29883: PUSH
29884: EMPTY
29885: LIST
29886: LIST
29887: PUSH
29888: EMPTY
29889: LIST
29890: LIST
29891: LIST
29892: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29893: LD_ADDR_VAR 0 22
29897: PUSH
29898: LD_INT 2
29900: NEG
29901: PUSH
29902: LD_INT 3
29904: NEG
29905: PUSH
29906: EMPTY
29907: LIST
29908: LIST
29909: PUSH
29910: LD_INT 3
29912: NEG
29913: PUSH
29914: LD_INT 2
29916: NEG
29917: PUSH
29918: EMPTY
29919: LIST
29920: LIST
29921: PUSH
29922: LD_INT 3
29924: NEG
29925: PUSH
29926: LD_INT 3
29928: NEG
29929: PUSH
29930: EMPTY
29931: LIST
29932: LIST
29933: PUSH
29934: EMPTY
29935: LIST
29936: LIST
29937: LIST
29938: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
29939: LD_ADDR_VAR 0 23
29943: PUSH
29944: LD_INT 0
29946: PUSH
29947: LD_INT 3
29949: NEG
29950: PUSH
29951: EMPTY
29952: LIST
29953: LIST
29954: PUSH
29955: LD_INT 1
29957: NEG
29958: PUSH
29959: LD_INT 4
29961: NEG
29962: PUSH
29963: EMPTY
29964: LIST
29965: LIST
29966: PUSH
29967: LD_INT 1
29969: PUSH
29970: LD_INT 3
29972: NEG
29973: PUSH
29974: EMPTY
29975: LIST
29976: LIST
29977: PUSH
29978: EMPTY
29979: LIST
29980: LIST
29981: LIST
29982: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
29983: LD_ADDR_VAR 0 24
29987: PUSH
29988: LD_INT 3
29990: PUSH
29991: LD_INT 0
29993: PUSH
29994: EMPTY
29995: LIST
29996: LIST
29997: PUSH
29998: LD_INT 3
30000: PUSH
30001: LD_INT 1
30003: NEG
30004: PUSH
30005: EMPTY
30006: LIST
30007: LIST
30008: PUSH
30009: LD_INT 4
30011: PUSH
30012: LD_INT 1
30014: PUSH
30015: EMPTY
30016: LIST
30017: LIST
30018: PUSH
30019: EMPTY
30020: LIST
30021: LIST
30022: LIST
30023: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
30024: LD_ADDR_VAR 0 25
30028: PUSH
30029: LD_INT 3
30031: PUSH
30032: LD_INT 3
30034: PUSH
30035: EMPTY
30036: LIST
30037: LIST
30038: PUSH
30039: LD_INT 4
30041: PUSH
30042: LD_INT 3
30044: PUSH
30045: EMPTY
30046: LIST
30047: LIST
30048: PUSH
30049: LD_INT 3
30051: PUSH
30052: LD_INT 4
30054: PUSH
30055: EMPTY
30056: LIST
30057: LIST
30058: PUSH
30059: EMPTY
30060: LIST
30061: LIST
30062: LIST
30063: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
30064: LD_ADDR_VAR 0 26
30068: PUSH
30069: LD_INT 0
30071: PUSH
30072: LD_INT 3
30074: PUSH
30075: EMPTY
30076: LIST
30077: LIST
30078: PUSH
30079: LD_INT 1
30081: PUSH
30082: LD_INT 4
30084: PUSH
30085: EMPTY
30086: LIST
30087: LIST
30088: PUSH
30089: LD_INT 1
30091: NEG
30092: PUSH
30093: LD_INT 3
30095: PUSH
30096: EMPTY
30097: LIST
30098: LIST
30099: PUSH
30100: EMPTY
30101: LIST
30102: LIST
30103: LIST
30104: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
30105: LD_ADDR_VAR 0 27
30109: PUSH
30110: LD_INT 3
30112: NEG
30113: PUSH
30114: LD_INT 0
30116: PUSH
30117: EMPTY
30118: LIST
30119: LIST
30120: PUSH
30121: LD_INT 3
30123: NEG
30124: PUSH
30125: LD_INT 1
30127: PUSH
30128: EMPTY
30129: LIST
30130: LIST
30131: PUSH
30132: LD_INT 4
30134: NEG
30135: PUSH
30136: LD_INT 1
30138: NEG
30139: PUSH
30140: EMPTY
30141: LIST
30142: LIST
30143: PUSH
30144: EMPTY
30145: LIST
30146: LIST
30147: LIST
30148: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
30149: LD_ADDR_VAR 0 28
30153: PUSH
30154: LD_INT 3
30156: NEG
30157: PUSH
30158: LD_INT 3
30160: NEG
30161: PUSH
30162: EMPTY
30163: LIST
30164: LIST
30165: PUSH
30166: LD_INT 3
30168: NEG
30169: PUSH
30170: LD_INT 4
30172: NEG
30173: PUSH
30174: EMPTY
30175: LIST
30176: LIST
30177: PUSH
30178: LD_INT 4
30180: NEG
30181: PUSH
30182: LD_INT 3
30184: NEG
30185: PUSH
30186: EMPTY
30187: LIST
30188: LIST
30189: PUSH
30190: EMPTY
30191: LIST
30192: LIST
30193: LIST
30194: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
30195: LD_ADDR_VAR 0 29
30199: PUSH
30200: LD_INT 1
30202: NEG
30203: PUSH
30204: LD_INT 3
30206: NEG
30207: PUSH
30208: EMPTY
30209: LIST
30210: LIST
30211: PUSH
30212: LD_INT 0
30214: PUSH
30215: LD_INT 3
30217: NEG
30218: PUSH
30219: EMPTY
30220: LIST
30221: LIST
30222: PUSH
30223: LD_INT 1
30225: PUSH
30226: LD_INT 2
30228: NEG
30229: PUSH
30230: EMPTY
30231: LIST
30232: LIST
30233: PUSH
30234: LD_INT 1
30236: NEG
30237: PUSH
30238: LD_INT 4
30240: NEG
30241: PUSH
30242: EMPTY
30243: LIST
30244: LIST
30245: PUSH
30246: LD_INT 0
30248: PUSH
30249: LD_INT 4
30251: NEG
30252: PUSH
30253: EMPTY
30254: LIST
30255: LIST
30256: PUSH
30257: LD_INT 1
30259: PUSH
30260: LD_INT 3
30262: NEG
30263: PUSH
30264: EMPTY
30265: LIST
30266: LIST
30267: PUSH
30268: LD_INT 1
30270: NEG
30271: PUSH
30272: LD_INT 5
30274: NEG
30275: PUSH
30276: EMPTY
30277: LIST
30278: LIST
30279: PUSH
30280: LD_INT 0
30282: PUSH
30283: LD_INT 5
30285: NEG
30286: PUSH
30287: EMPTY
30288: LIST
30289: LIST
30290: PUSH
30291: LD_INT 1
30293: PUSH
30294: LD_INT 4
30296: NEG
30297: PUSH
30298: EMPTY
30299: LIST
30300: LIST
30301: PUSH
30302: LD_INT 1
30304: NEG
30305: PUSH
30306: LD_INT 6
30308: NEG
30309: PUSH
30310: EMPTY
30311: LIST
30312: LIST
30313: PUSH
30314: LD_INT 0
30316: PUSH
30317: LD_INT 6
30319: NEG
30320: PUSH
30321: EMPTY
30322: LIST
30323: LIST
30324: PUSH
30325: LD_INT 1
30327: PUSH
30328: LD_INT 5
30330: NEG
30331: PUSH
30332: EMPTY
30333: LIST
30334: LIST
30335: PUSH
30336: EMPTY
30337: LIST
30338: LIST
30339: LIST
30340: LIST
30341: LIST
30342: LIST
30343: LIST
30344: LIST
30345: LIST
30346: LIST
30347: LIST
30348: LIST
30349: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
30350: LD_ADDR_VAR 0 30
30354: PUSH
30355: LD_INT 2
30357: PUSH
30358: LD_INT 1
30360: NEG
30361: PUSH
30362: EMPTY
30363: LIST
30364: LIST
30365: PUSH
30366: LD_INT 3
30368: PUSH
30369: LD_INT 0
30371: PUSH
30372: EMPTY
30373: LIST
30374: LIST
30375: PUSH
30376: LD_INT 3
30378: PUSH
30379: LD_INT 1
30381: PUSH
30382: EMPTY
30383: LIST
30384: LIST
30385: PUSH
30386: LD_INT 3
30388: PUSH
30389: LD_INT 1
30391: NEG
30392: PUSH
30393: EMPTY
30394: LIST
30395: LIST
30396: PUSH
30397: LD_INT 4
30399: PUSH
30400: LD_INT 0
30402: PUSH
30403: EMPTY
30404: LIST
30405: LIST
30406: PUSH
30407: LD_INT 4
30409: PUSH
30410: LD_INT 1
30412: PUSH
30413: EMPTY
30414: LIST
30415: LIST
30416: PUSH
30417: LD_INT 4
30419: PUSH
30420: LD_INT 1
30422: NEG
30423: PUSH
30424: EMPTY
30425: LIST
30426: LIST
30427: PUSH
30428: LD_INT 5
30430: PUSH
30431: LD_INT 0
30433: PUSH
30434: EMPTY
30435: LIST
30436: LIST
30437: PUSH
30438: LD_INT 5
30440: PUSH
30441: LD_INT 1
30443: PUSH
30444: EMPTY
30445: LIST
30446: LIST
30447: PUSH
30448: LD_INT 5
30450: PUSH
30451: LD_INT 1
30453: NEG
30454: PUSH
30455: EMPTY
30456: LIST
30457: LIST
30458: PUSH
30459: LD_INT 6
30461: PUSH
30462: LD_INT 0
30464: PUSH
30465: EMPTY
30466: LIST
30467: LIST
30468: PUSH
30469: LD_INT 6
30471: PUSH
30472: LD_INT 1
30474: PUSH
30475: EMPTY
30476: LIST
30477: LIST
30478: PUSH
30479: EMPTY
30480: LIST
30481: LIST
30482: LIST
30483: LIST
30484: LIST
30485: LIST
30486: LIST
30487: LIST
30488: LIST
30489: LIST
30490: LIST
30491: LIST
30492: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
30493: LD_ADDR_VAR 0 31
30497: PUSH
30498: LD_INT 3
30500: PUSH
30501: LD_INT 2
30503: PUSH
30504: EMPTY
30505: LIST
30506: LIST
30507: PUSH
30508: LD_INT 3
30510: PUSH
30511: LD_INT 3
30513: PUSH
30514: EMPTY
30515: LIST
30516: LIST
30517: PUSH
30518: LD_INT 2
30520: PUSH
30521: LD_INT 3
30523: PUSH
30524: EMPTY
30525: LIST
30526: LIST
30527: PUSH
30528: LD_INT 4
30530: PUSH
30531: LD_INT 3
30533: PUSH
30534: EMPTY
30535: LIST
30536: LIST
30537: PUSH
30538: LD_INT 4
30540: PUSH
30541: LD_INT 4
30543: PUSH
30544: EMPTY
30545: LIST
30546: LIST
30547: PUSH
30548: LD_INT 3
30550: PUSH
30551: LD_INT 4
30553: PUSH
30554: EMPTY
30555: LIST
30556: LIST
30557: PUSH
30558: LD_INT 5
30560: PUSH
30561: LD_INT 4
30563: PUSH
30564: EMPTY
30565: LIST
30566: LIST
30567: PUSH
30568: LD_INT 5
30570: PUSH
30571: LD_INT 5
30573: PUSH
30574: EMPTY
30575: LIST
30576: LIST
30577: PUSH
30578: LD_INT 4
30580: PUSH
30581: LD_INT 5
30583: PUSH
30584: EMPTY
30585: LIST
30586: LIST
30587: PUSH
30588: LD_INT 6
30590: PUSH
30591: LD_INT 5
30593: PUSH
30594: EMPTY
30595: LIST
30596: LIST
30597: PUSH
30598: LD_INT 6
30600: PUSH
30601: LD_INT 6
30603: PUSH
30604: EMPTY
30605: LIST
30606: LIST
30607: PUSH
30608: LD_INT 5
30610: PUSH
30611: LD_INT 6
30613: PUSH
30614: EMPTY
30615: LIST
30616: LIST
30617: PUSH
30618: EMPTY
30619: LIST
30620: LIST
30621: LIST
30622: LIST
30623: LIST
30624: LIST
30625: LIST
30626: LIST
30627: LIST
30628: LIST
30629: LIST
30630: LIST
30631: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
30632: LD_ADDR_VAR 0 32
30636: PUSH
30637: LD_INT 1
30639: PUSH
30640: LD_INT 3
30642: PUSH
30643: EMPTY
30644: LIST
30645: LIST
30646: PUSH
30647: LD_INT 0
30649: PUSH
30650: LD_INT 3
30652: PUSH
30653: EMPTY
30654: LIST
30655: LIST
30656: PUSH
30657: LD_INT 1
30659: NEG
30660: PUSH
30661: LD_INT 2
30663: PUSH
30664: EMPTY
30665: LIST
30666: LIST
30667: PUSH
30668: LD_INT 1
30670: PUSH
30671: LD_INT 4
30673: PUSH
30674: EMPTY
30675: LIST
30676: LIST
30677: PUSH
30678: LD_INT 0
30680: PUSH
30681: LD_INT 4
30683: PUSH
30684: EMPTY
30685: LIST
30686: LIST
30687: PUSH
30688: LD_INT 1
30690: NEG
30691: PUSH
30692: LD_INT 3
30694: PUSH
30695: EMPTY
30696: LIST
30697: LIST
30698: PUSH
30699: LD_INT 1
30701: PUSH
30702: LD_INT 5
30704: PUSH
30705: EMPTY
30706: LIST
30707: LIST
30708: PUSH
30709: LD_INT 0
30711: PUSH
30712: LD_INT 5
30714: PUSH
30715: EMPTY
30716: LIST
30717: LIST
30718: PUSH
30719: LD_INT 1
30721: NEG
30722: PUSH
30723: LD_INT 4
30725: PUSH
30726: EMPTY
30727: LIST
30728: LIST
30729: PUSH
30730: LD_INT 1
30732: PUSH
30733: LD_INT 6
30735: PUSH
30736: EMPTY
30737: LIST
30738: LIST
30739: PUSH
30740: LD_INT 0
30742: PUSH
30743: LD_INT 6
30745: PUSH
30746: EMPTY
30747: LIST
30748: LIST
30749: PUSH
30750: LD_INT 1
30752: NEG
30753: PUSH
30754: LD_INT 5
30756: PUSH
30757: EMPTY
30758: LIST
30759: LIST
30760: PUSH
30761: EMPTY
30762: LIST
30763: LIST
30764: LIST
30765: LIST
30766: LIST
30767: LIST
30768: LIST
30769: LIST
30770: LIST
30771: LIST
30772: LIST
30773: LIST
30774: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
30775: LD_ADDR_VAR 0 33
30779: PUSH
30780: LD_INT 2
30782: NEG
30783: PUSH
30784: LD_INT 1
30786: PUSH
30787: EMPTY
30788: LIST
30789: LIST
30790: PUSH
30791: LD_INT 3
30793: NEG
30794: PUSH
30795: LD_INT 0
30797: PUSH
30798: EMPTY
30799: LIST
30800: LIST
30801: PUSH
30802: LD_INT 3
30804: NEG
30805: PUSH
30806: LD_INT 1
30808: NEG
30809: PUSH
30810: EMPTY
30811: LIST
30812: LIST
30813: PUSH
30814: LD_INT 3
30816: NEG
30817: PUSH
30818: LD_INT 1
30820: PUSH
30821: EMPTY
30822: LIST
30823: LIST
30824: PUSH
30825: LD_INT 4
30827: NEG
30828: PUSH
30829: LD_INT 0
30831: PUSH
30832: EMPTY
30833: LIST
30834: LIST
30835: PUSH
30836: LD_INT 4
30838: NEG
30839: PUSH
30840: LD_INT 1
30842: NEG
30843: PUSH
30844: EMPTY
30845: LIST
30846: LIST
30847: PUSH
30848: LD_INT 4
30850: NEG
30851: PUSH
30852: LD_INT 1
30854: PUSH
30855: EMPTY
30856: LIST
30857: LIST
30858: PUSH
30859: LD_INT 5
30861: NEG
30862: PUSH
30863: LD_INT 0
30865: PUSH
30866: EMPTY
30867: LIST
30868: LIST
30869: PUSH
30870: LD_INT 5
30872: NEG
30873: PUSH
30874: LD_INT 1
30876: NEG
30877: PUSH
30878: EMPTY
30879: LIST
30880: LIST
30881: PUSH
30882: LD_INT 5
30884: NEG
30885: PUSH
30886: LD_INT 1
30888: PUSH
30889: EMPTY
30890: LIST
30891: LIST
30892: PUSH
30893: LD_INT 6
30895: NEG
30896: PUSH
30897: LD_INT 0
30899: PUSH
30900: EMPTY
30901: LIST
30902: LIST
30903: PUSH
30904: LD_INT 6
30906: NEG
30907: PUSH
30908: LD_INT 1
30910: NEG
30911: PUSH
30912: EMPTY
30913: LIST
30914: LIST
30915: PUSH
30916: EMPTY
30917: LIST
30918: LIST
30919: LIST
30920: LIST
30921: LIST
30922: LIST
30923: LIST
30924: LIST
30925: LIST
30926: LIST
30927: LIST
30928: LIST
30929: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
30930: LD_ADDR_VAR 0 34
30934: PUSH
30935: LD_INT 2
30937: NEG
30938: PUSH
30939: LD_INT 3
30941: NEG
30942: PUSH
30943: EMPTY
30944: LIST
30945: LIST
30946: PUSH
30947: LD_INT 3
30949: NEG
30950: PUSH
30951: LD_INT 2
30953: NEG
30954: PUSH
30955: EMPTY
30956: LIST
30957: LIST
30958: PUSH
30959: LD_INT 3
30961: NEG
30962: PUSH
30963: LD_INT 3
30965: NEG
30966: PUSH
30967: EMPTY
30968: LIST
30969: LIST
30970: PUSH
30971: LD_INT 3
30973: NEG
30974: PUSH
30975: LD_INT 4
30977: NEG
30978: PUSH
30979: EMPTY
30980: LIST
30981: LIST
30982: PUSH
30983: LD_INT 4
30985: NEG
30986: PUSH
30987: LD_INT 3
30989: NEG
30990: PUSH
30991: EMPTY
30992: LIST
30993: LIST
30994: PUSH
30995: LD_INT 4
30997: NEG
30998: PUSH
30999: LD_INT 4
31001: NEG
31002: PUSH
31003: EMPTY
31004: LIST
31005: LIST
31006: PUSH
31007: LD_INT 4
31009: NEG
31010: PUSH
31011: LD_INT 5
31013: NEG
31014: PUSH
31015: EMPTY
31016: LIST
31017: LIST
31018: PUSH
31019: LD_INT 5
31021: NEG
31022: PUSH
31023: LD_INT 4
31025: NEG
31026: PUSH
31027: EMPTY
31028: LIST
31029: LIST
31030: PUSH
31031: LD_INT 5
31033: NEG
31034: PUSH
31035: LD_INT 5
31037: NEG
31038: PUSH
31039: EMPTY
31040: LIST
31041: LIST
31042: PUSH
31043: LD_INT 5
31045: NEG
31046: PUSH
31047: LD_INT 6
31049: NEG
31050: PUSH
31051: EMPTY
31052: LIST
31053: LIST
31054: PUSH
31055: LD_INT 6
31057: NEG
31058: PUSH
31059: LD_INT 5
31061: NEG
31062: PUSH
31063: EMPTY
31064: LIST
31065: LIST
31066: PUSH
31067: LD_INT 6
31069: NEG
31070: PUSH
31071: LD_INT 6
31073: NEG
31074: PUSH
31075: EMPTY
31076: LIST
31077: LIST
31078: PUSH
31079: EMPTY
31080: LIST
31081: LIST
31082: LIST
31083: LIST
31084: LIST
31085: LIST
31086: LIST
31087: LIST
31088: LIST
31089: LIST
31090: LIST
31091: LIST
31092: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
31093: LD_ADDR_VAR 0 41
31097: PUSH
31098: LD_INT 0
31100: PUSH
31101: LD_INT 2
31103: NEG
31104: PUSH
31105: EMPTY
31106: LIST
31107: LIST
31108: PUSH
31109: LD_INT 1
31111: NEG
31112: PUSH
31113: LD_INT 3
31115: NEG
31116: PUSH
31117: EMPTY
31118: LIST
31119: LIST
31120: PUSH
31121: LD_INT 1
31123: PUSH
31124: LD_INT 2
31126: NEG
31127: PUSH
31128: EMPTY
31129: LIST
31130: LIST
31131: PUSH
31132: EMPTY
31133: LIST
31134: LIST
31135: LIST
31136: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
31137: LD_ADDR_VAR 0 42
31141: PUSH
31142: LD_INT 2
31144: PUSH
31145: LD_INT 0
31147: PUSH
31148: EMPTY
31149: LIST
31150: LIST
31151: PUSH
31152: LD_INT 2
31154: PUSH
31155: LD_INT 1
31157: NEG
31158: PUSH
31159: EMPTY
31160: LIST
31161: LIST
31162: PUSH
31163: LD_INT 3
31165: PUSH
31166: LD_INT 1
31168: PUSH
31169: EMPTY
31170: LIST
31171: LIST
31172: PUSH
31173: EMPTY
31174: LIST
31175: LIST
31176: LIST
31177: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
31178: LD_ADDR_VAR 0 43
31182: PUSH
31183: LD_INT 2
31185: PUSH
31186: LD_INT 2
31188: PUSH
31189: EMPTY
31190: LIST
31191: LIST
31192: PUSH
31193: LD_INT 3
31195: PUSH
31196: LD_INT 2
31198: PUSH
31199: EMPTY
31200: LIST
31201: LIST
31202: PUSH
31203: LD_INT 2
31205: PUSH
31206: LD_INT 3
31208: PUSH
31209: EMPTY
31210: LIST
31211: LIST
31212: PUSH
31213: EMPTY
31214: LIST
31215: LIST
31216: LIST
31217: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
31218: LD_ADDR_VAR 0 44
31222: PUSH
31223: LD_INT 0
31225: PUSH
31226: LD_INT 2
31228: PUSH
31229: EMPTY
31230: LIST
31231: LIST
31232: PUSH
31233: LD_INT 1
31235: PUSH
31236: LD_INT 3
31238: PUSH
31239: EMPTY
31240: LIST
31241: LIST
31242: PUSH
31243: LD_INT 1
31245: NEG
31246: PUSH
31247: LD_INT 2
31249: PUSH
31250: EMPTY
31251: LIST
31252: LIST
31253: PUSH
31254: EMPTY
31255: LIST
31256: LIST
31257: LIST
31258: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31259: LD_ADDR_VAR 0 45
31263: PUSH
31264: LD_INT 2
31266: NEG
31267: PUSH
31268: LD_INT 0
31270: PUSH
31271: EMPTY
31272: LIST
31273: LIST
31274: PUSH
31275: LD_INT 2
31277: NEG
31278: PUSH
31279: LD_INT 1
31281: PUSH
31282: EMPTY
31283: LIST
31284: LIST
31285: PUSH
31286: LD_INT 3
31288: NEG
31289: PUSH
31290: LD_INT 1
31292: NEG
31293: PUSH
31294: EMPTY
31295: LIST
31296: LIST
31297: PUSH
31298: EMPTY
31299: LIST
31300: LIST
31301: LIST
31302: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
31303: LD_ADDR_VAR 0 46
31307: PUSH
31308: LD_INT 2
31310: NEG
31311: PUSH
31312: LD_INT 2
31314: NEG
31315: PUSH
31316: EMPTY
31317: LIST
31318: LIST
31319: PUSH
31320: LD_INT 2
31322: NEG
31323: PUSH
31324: LD_INT 3
31326: NEG
31327: PUSH
31328: EMPTY
31329: LIST
31330: LIST
31331: PUSH
31332: LD_INT 3
31334: NEG
31335: PUSH
31336: LD_INT 2
31338: NEG
31339: PUSH
31340: EMPTY
31341: LIST
31342: LIST
31343: PUSH
31344: EMPTY
31345: LIST
31346: LIST
31347: LIST
31348: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
31349: LD_ADDR_VAR 0 47
31353: PUSH
31354: LD_INT 2
31356: NEG
31357: PUSH
31358: LD_INT 3
31360: NEG
31361: PUSH
31362: EMPTY
31363: LIST
31364: LIST
31365: PUSH
31366: LD_INT 1
31368: NEG
31369: PUSH
31370: LD_INT 3
31372: NEG
31373: PUSH
31374: EMPTY
31375: LIST
31376: LIST
31377: PUSH
31378: EMPTY
31379: LIST
31380: LIST
31381: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
31382: LD_ADDR_VAR 0 48
31386: PUSH
31387: LD_INT 1
31389: PUSH
31390: LD_INT 2
31392: NEG
31393: PUSH
31394: EMPTY
31395: LIST
31396: LIST
31397: PUSH
31398: LD_INT 2
31400: PUSH
31401: LD_INT 1
31403: NEG
31404: PUSH
31405: EMPTY
31406: LIST
31407: LIST
31408: PUSH
31409: EMPTY
31410: LIST
31411: LIST
31412: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
31413: LD_ADDR_VAR 0 49
31417: PUSH
31418: LD_INT 3
31420: PUSH
31421: LD_INT 1
31423: PUSH
31424: EMPTY
31425: LIST
31426: LIST
31427: PUSH
31428: LD_INT 3
31430: PUSH
31431: LD_INT 2
31433: PUSH
31434: EMPTY
31435: LIST
31436: LIST
31437: PUSH
31438: EMPTY
31439: LIST
31440: LIST
31441: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
31442: LD_ADDR_VAR 0 50
31446: PUSH
31447: LD_INT 2
31449: PUSH
31450: LD_INT 3
31452: PUSH
31453: EMPTY
31454: LIST
31455: LIST
31456: PUSH
31457: LD_INT 1
31459: PUSH
31460: LD_INT 3
31462: PUSH
31463: EMPTY
31464: LIST
31465: LIST
31466: PUSH
31467: EMPTY
31468: LIST
31469: LIST
31470: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
31471: LD_ADDR_VAR 0 51
31475: PUSH
31476: LD_INT 1
31478: NEG
31479: PUSH
31480: LD_INT 2
31482: PUSH
31483: EMPTY
31484: LIST
31485: LIST
31486: PUSH
31487: LD_INT 2
31489: NEG
31490: PUSH
31491: LD_INT 1
31493: PUSH
31494: EMPTY
31495: LIST
31496: LIST
31497: PUSH
31498: EMPTY
31499: LIST
31500: LIST
31501: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
31502: LD_ADDR_VAR 0 52
31506: PUSH
31507: LD_INT 3
31509: NEG
31510: PUSH
31511: LD_INT 1
31513: NEG
31514: PUSH
31515: EMPTY
31516: LIST
31517: LIST
31518: PUSH
31519: LD_INT 3
31521: NEG
31522: PUSH
31523: LD_INT 2
31525: NEG
31526: PUSH
31527: EMPTY
31528: LIST
31529: LIST
31530: PUSH
31531: EMPTY
31532: LIST
31533: LIST
31534: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31535: LD_ADDR_VAR 0 53
31539: PUSH
31540: LD_INT 1
31542: NEG
31543: PUSH
31544: LD_INT 3
31546: NEG
31547: PUSH
31548: EMPTY
31549: LIST
31550: LIST
31551: PUSH
31552: LD_INT 0
31554: PUSH
31555: LD_INT 3
31557: NEG
31558: PUSH
31559: EMPTY
31560: LIST
31561: LIST
31562: PUSH
31563: LD_INT 1
31565: PUSH
31566: LD_INT 2
31568: NEG
31569: PUSH
31570: EMPTY
31571: LIST
31572: LIST
31573: PUSH
31574: EMPTY
31575: LIST
31576: LIST
31577: LIST
31578: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31579: LD_ADDR_VAR 0 54
31583: PUSH
31584: LD_INT 2
31586: PUSH
31587: LD_INT 1
31589: NEG
31590: PUSH
31591: EMPTY
31592: LIST
31593: LIST
31594: PUSH
31595: LD_INT 3
31597: PUSH
31598: LD_INT 0
31600: PUSH
31601: EMPTY
31602: LIST
31603: LIST
31604: PUSH
31605: LD_INT 3
31607: PUSH
31608: LD_INT 1
31610: PUSH
31611: EMPTY
31612: LIST
31613: LIST
31614: PUSH
31615: EMPTY
31616: LIST
31617: LIST
31618: LIST
31619: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31620: LD_ADDR_VAR 0 55
31624: PUSH
31625: LD_INT 3
31627: PUSH
31628: LD_INT 2
31630: PUSH
31631: EMPTY
31632: LIST
31633: LIST
31634: PUSH
31635: LD_INT 3
31637: PUSH
31638: LD_INT 3
31640: PUSH
31641: EMPTY
31642: LIST
31643: LIST
31644: PUSH
31645: LD_INT 2
31647: PUSH
31648: LD_INT 3
31650: PUSH
31651: EMPTY
31652: LIST
31653: LIST
31654: PUSH
31655: EMPTY
31656: LIST
31657: LIST
31658: LIST
31659: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31660: LD_ADDR_VAR 0 56
31664: PUSH
31665: LD_INT 1
31667: PUSH
31668: LD_INT 3
31670: PUSH
31671: EMPTY
31672: LIST
31673: LIST
31674: PUSH
31675: LD_INT 0
31677: PUSH
31678: LD_INT 3
31680: PUSH
31681: EMPTY
31682: LIST
31683: LIST
31684: PUSH
31685: LD_INT 1
31687: NEG
31688: PUSH
31689: LD_INT 2
31691: PUSH
31692: EMPTY
31693: LIST
31694: LIST
31695: PUSH
31696: EMPTY
31697: LIST
31698: LIST
31699: LIST
31700: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31701: LD_ADDR_VAR 0 57
31705: PUSH
31706: LD_INT 2
31708: NEG
31709: PUSH
31710: LD_INT 1
31712: PUSH
31713: EMPTY
31714: LIST
31715: LIST
31716: PUSH
31717: LD_INT 3
31719: NEG
31720: PUSH
31721: LD_INT 0
31723: PUSH
31724: EMPTY
31725: LIST
31726: LIST
31727: PUSH
31728: LD_INT 3
31730: NEG
31731: PUSH
31732: LD_INT 1
31734: NEG
31735: PUSH
31736: EMPTY
31737: LIST
31738: LIST
31739: PUSH
31740: EMPTY
31741: LIST
31742: LIST
31743: LIST
31744: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31745: LD_ADDR_VAR 0 58
31749: PUSH
31750: LD_INT 2
31752: NEG
31753: PUSH
31754: LD_INT 3
31756: NEG
31757: PUSH
31758: EMPTY
31759: LIST
31760: LIST
31761: PUSH
31762: LD_INT 3
31764: NEG
31765: PUSH
31766: LD_INT 2
31768: NEG
31769: PUSH
31770: EMPTY
31771: LIST
31772: LIST
31773: PUSH
31774: LD_INT 3
31776: NEG
31777: PUSH
31778: LD_INT 3
31780: NEG
31781: PUSH
31782: EMPTY
31783: LIST
31784: LIST
31785: PUSH
31786: EMPTY
31787: LIST
31788: LIST
31789: LIST
31790: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
31791: LD_ADDR_VAR 0 59
31795: PUSH
31796: LD_INT 1
31798: NEG
31799: PUSH
31800: LD_INT 2
31802: NEG
31803: PUSH
31804: EMPTY
31805: LIST
31806: LIST
31807: PUSH
31808: LD_INT 0
31810: PUSH
31811: LD_INT 2
31813: NEG
31814: PUSH
31815: EMPTY
31816: LIST
31817: LIST
31818: PUSH
31819: LD_INT 1
31821: PUSH
31822: LD_INT 1
31824: NEG
31825: PUSH
31826: EMPTY
31827: LIST
31828: LIST
31829: PUSH
31830: EMPTY
31831: LIST
31832: LIST
31833: LIST
31834: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
31835: LD_ADDR_VAR 0 60
31839: PUSH
31840: LD_INT 1
31842: PUSH
31843: LD_INT 1
31845: NEG
31846: PUSH
31847: EMPTY
31848: LIST
31849: LIST
31850: PUSH
31851: LD_INT 2
31853: PUSH
31854: LD_INT 0
31856: PUSH
31857: EMPTY
31858: LIST
31859: LIST
31860: PUSH
31861: LD_INT 2
31863: PUSH
31864: LD_INT 1
31866: PUSH
31867: EMPTY
31868: LIST
31869: LIST
31870: PUSH
31871: EMPTY
31872: LIST
31873: LIST
31874: LIST
31875: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
31876: LD_ADDR_VAR 0 61
31880: PUSH
31881: LD_INT 2
31883: PUSH
31884: LD_INT 1
31886: PUSH
31887: EMPTY
31888: LIST
31889: LIST
31890: PUSH
31891: LD_INT 2
31893: PUSH
31894: LD_INT 2
31896: PUSH
31897: EMPTY
31898: LIST
31899: LIST
31900: PUSH
31901: LD_INT 1
31903: PUSH
31904: LD_INT 2
31906: PUSH
31907: EMPTY
31908: LIST
31909: LIST
31910: PUSH
31911: EMPTY
31912: LIST
31913: LIST
31914: LIST
31915: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
31916: LD_ADDR_VAR 0 62
31920: PUSH
31921: LD_INT 1
31923: PUSH
31924: LD_INT 2
31926: PUSH
31927: EMPTY
31928: LIST
31929: LIST
31930: PUSH
31931: LD_INT 0
31933: PUSH
31934: LD_INT 2
31936: PUSH
31937: EMPTY
31938: LIST
31939: LIST
31940: PUSH
31941: LD_INT 1
31943: NEG
31944: PUSH
31945: LD_INT 1
31947: PUSH
31948: EMPTY
31949: LIST
31950: LIST
31951: PUSH
31952: EMPTY
31953: LIST
31954: LIST
31955: LIST
31956: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
31957: LD_ADDR_VAR 0 63
31961: PUSH
31962: LD_INT 1
31964: NEG
31965: PUSH
31966: LD_INT 1
31968: PUSH
31969: EMPTY
31970: LIST
31971: LIST
31972: PUSH
31973: LD_INT 2
31975: NEG
31976: PUSH
31977: LD_INT 0
31979: PUSH
31980: EMPTY
31981: LIST
31982: LIST
31983: PUSH
31984: LD_INT 2
31986: NEG
31987: PUSH
31988: LD_INT 1
31990: NEG
31991: PUSH
31992: EMPTY
31993: LIST
31994: LIST
31995: PUSH
31996: EMPTY
31997: LIST
31998: LIST
31999: LIST
32000: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32001: LD_ADDR_VAR 0 64
32005: PUSH
32006: LD_INT 1
32008: NEG
32009: PUSH
32010: LD_INT 2
32012: NEG
32013: PUSH
32014: EMPTY
32015: LIST
32016: LIST
32017: PUSH
32018: LD_INT 2
32020: NEG
32021: PUSH
32022: LD_INT 1
32024: NEG
32025: PUSH
32026: EMPTY
32027: LIST
32028: LIST
32029: PUSH
32030: LD_INT 2
32032: NEG
32033: PUSH
32034: LD_INT 2
32036: NEG
32037: PUSH
32038: EMPTY
32039: LIST
32040: LIST
32041: PUSH
32042: EMPTY
32043: LIST
32044: LIST
32045: LIST
32046: ST_TO_ADDR
// end ; 2 :
32047: GO 35313
32049: LD_INT 2
32051: DOUBLE
32052: EQUAL
32053: IFTRUE 32057
32055: GO 35312
32057: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
32058: LD_ADDR_VAR 0 29
32062: PUSH
32063: LD_INT 4
32065: PUSH
32066: LD_INT 0
32068: PUSH
32069: EMPTY
32070: LIST
32071: LIST
32072: PUSH
32073: LD_INT 4
32075: PUSH
32076: LD_INT 1
32078: NEG
32079: PUSH
32080: EMPTY
32081: LIST
32082: LIST
32083: PUSH
32084: LD_INT 5
32086: PUSH
32087: LD_INT 0
32089: PUSH
32090: EMPTY
32091: LIST
32092: LIST
32093: PUSH
32094: LD_INT 5
32096: PUSH
32097: LD_INT 1
32099: PUSH
32100: EMPTY
32101: LIST
32102: LIST
32103: PUSH
32104: LD_INT 4
32106: PUSH
32107: LD_INT 1
32109: PUSH
32110: EMPTY
32111: LIST
32112: LIST
32113: PUSH
32114: LD_INT 3
32116: PUSH
32117: LD_INT 0
32119: PUSH
32120: EMPTY
32121: LIST
32122: LIST
32123: PUSH
32124: LD_INT 3
32126: PUSH
32127: LD_INT 1
32129: NEG
32130: PUSH
32131: EMPTY
32132: LIST
32133: LIST
32134: PUSH
32135: LD_INT 3
32137: PUSH
32138: LD_INT 2
32140: NEG
32141: PUSH
32142: EMPTY
32143: LIST
32144: LIST
32145: PUSH
32146: LD_INT 5
32148: PUSH
32149: LD_INT 2
32151: PUSH
32152: EMPTY
32153: LIST
32154: LIST
32155: PUSH
32156: LD_INT 3
32158: PUSH
32159: LD_INT 3
32161: PUSH
32162: EMPTY
32163: LIST
32164: LIST
32165: PUSH
32166: LD_INT 3
32168: PUSH
32169: LD_INT 2
32171: PUSH
32172: EMPTY
32173: LIST
32174: LIST
32175: PUSH
32176: LD_INT 4
32178: PUSH
32179: LD_INT 3
32181: PUSH
32182: EMPTY
32183: LIST
32184: LIST
32185: PUSH
32186: LD_INT 4
32188: PUSH
32189: LD_INT 4
32191: PUSH
32192: EMPTY
32193: LIST
32194: LIST
32195: PUSH
32196: LD_INT 3
32198: PUSH
32199: LD_INT 4
32201: PUSH
32202: EMPTY
32203: LIST
32204: LIST
32205: PUSH
32206: LD_INT 2
32208: PUSH
32209: LD_INT 3
32211: PUSH
32212: EMPTY
32213: LIST
32214: LIST
32215: PUSH
32216: LD_INT 2
32218: PUSH
32219: LD_INT 2
32221: PUSH
32222: EMPTY
32223: LIST
32224: LIST
32225: PUSH
32226: LD_INT 4
32228: PUSH
32229: LD_INT 2
32231: PUSH
32232: EMPTY
32233: LIST
32234: LIST
32235: PUSH
32236: LD_INT 2
32238: PUSH
32239: LD_INT 4
32241: PUSH
32242: EMPTY
32243: LIST
32244: LIST
32245: PUSH
32246: LD_INT 0
32248: PUSH
32249: LD_INT 4
32251: PUSH
32252: EMPTY
32253: LIST
32254: LIST
32255: PUSH
32256: LD_INT 0
32258: PUSH
32259: LD_INT 3
32261: PUSH
32262: EMPTY
32263: LIST
32264: LIST
32265: PUSH
32266: LD_INT 1
32268: PUSH
32269: LD_INT 4
32271: PUSH
32272: EMPTY
32273: LIST
32274: LIST
32275: PUSH
32276: LD_INT 1
32278: PUSH
32279: LD_INT 5
32281: PUSH
32282: EMPTY
32283: LIST
32284: LIST
32285: PUSH
32286: LD_INT 0
32288: PUSH
32289: LD_INT 5
32291: PUSH
32292: EMPTY
32293: LIST
32294: LIST
32295: PUSH
32296: LD_INT 1
32298: NEG
32299: PUSH
32300: LD_INT 4
32302: PUSH
32303: EMPTY
32304: LIST
32305: LIST
32306: PUSH
32307: LD_INT 1
32309: NEG
32310: PUSH
32311: LD_INT 3
32313: PUSH
32314: EMPTY
32315: LIST
32316: LIST
32317: PUSH
32318: LD_INT 2
32320: PUSH
32321: LD_INT 5
32323: PUSH
32324: EMPTY
32325: LIST
32326: LIST
32327: PUSH
32328: LD_INT 2
32330: NEG
32331: PUSH
32332: LD_INT 3
32334: PUSH
32335: EMPTY
32336: LIST
32337: LIST
32338: PUSH
32339: LD_INT 3
32341: NEG
32342: PUSH
32343: LD_INT 0
32345: PUSH
32346: EMPTY
32347: LIST
32348: LIST
32349: PUSH
32350: LD_INT 3
32352: NEG
32353: PUSH
32354: LD_INT 1
32356: NEG
32357: PUSH
32358: EMPTY
32359: LIST
32360: LIST
32361: PUSH
32362: LD_INT 2
32364: NEG
32365: PUSH
32366: LD_INT 0
32368: PUSH
32369: EMPTY
32370: LIST
32371: LIST
32372: PUSH
32373: LD_INT 2
32375: NEG
32376: PUSH
32377: LD_INT 1
32379: PUSH
32380: EMPTY
32381: LIST
32382: LIST
32383: PUSH
32384: LD_INT 3
32386: NEG
32387: PUSH
32388: LD_INT 1
32390: PUSH
32391: EMPTY
32392: LIST
32393: LIST
32394: PUSH
32395: LD_INT 4
32397: NEG
32398: PUSH
32399: LD_INT 0
32401: PUSH
32402: EMPTY
32403: LIST
32404: LIST
32405: PUSH
32406: LD_INT 4
32408: NEG
32409: PUSH
32410: LD_INT 1
32412: NEG
32413: PUSH
32414: EMPTY
32415: LIST
32416: LIST
32417: PUSH
32418: LD_INT 4
32420: NEG
32421: PUSH
32422: LD_INT 2
32424: NEG
32425: PUSH
32426: EMPTY
32427: LIST
32428: LIST
32429: PUSH
32430: LD_INT 2
32432: NEG
32433: PUSH
32434: LD_INT 2
32436: PUSH
32437: EMPTY
32438: LIST
32439: LIST
32440: PUSH
32441: LD_INT 4
32443: NEG
32444: PUSH
32445: LD_INT 4
32447: NEG
32448: PUSH
32449: EMPTY
32450: LIST
32451: LIST
32452: PUSH
32453: LD_INT 4
32455: NEG
32456: PUSH
32457: LD_INT 5
32459: NEG
32460: PUSH
32461: EMPTY
32462: LIST
32463: LIST
32464: PUSH
32465: LD_INT 3
32467: NEG
32468: PUSH
32469: LD_INT 4
32471: NEG
32472: PUSH
32473: EMPTY
32474: LIST
32475: LIST
32476: PUSH
32477: LD_INT 3
32479: NEG
32480: PUSH
32481: LD_INT 3
32483: NEG
32484: PUSH
32485: EMPTY
32486: LIST
32487: LIST
32488: PUSH
32489: LD_INT 4
32491: NEG
32492: PUSH
32493: LD_INT 3
32495: NEG
32496: PUSH
32497: EMPTY
32498: LIST
32499: LIST
32500: PUSH
32501: LD_INT 5
32503: NEG
32504: PUSH
32505: LD_INT 4
32507: NEG
32508: PUSH
32509: EMPTY
32510: LIST
32511: LIST
32512: PUSH
32513: LD_INT 5
32515: NEG
32516: PUSH
32517: LD_INT 5
32519: NEG
32520: PUSH
32521: EMPTY
32522: LIST
32523: LIST
32524: PUSH
32525: LD_INT 3
32527: NEG
32528: PUSH
32529: LD_INT 5
32531: NEG
32532: PUSH
32533: EMPTY
32534: LIST
32535: LIST
32536: PUSH
32537: LD_INT 5
32539: NEG
32540: PUSH
32541: LD_INT 3
32543: NEG
32544: PUSH
32545: EMPTY
32546: LIST
32547: LIST
32548: PUSH
32549: EMPTY
32550: LIST
32551: LIST
32552: LIST
32553: LIST
32554: LIST
32555: LIST
32556: LIST
32557: LIST
32558: LIST
32559: LIST
32560: LIST
32561: LIST
32562: LIST
32563: LIST
32564: LIST
32565: LIST
32566: LIST
32567: LIST
32568: LIST
32569: LIST
32570: LIST
32571: LIST
32572: LIST
32573: LIST
32574: LIST
32575: LIST
32576: LIST
32577: LIST
32578: LIST
32579: LIST
32580: LIST
32581: LIST
32582: LIST
32583: LIST
32584: LIST
32585: LIST
32586: LIST
32587: LIST
32588: LIST
32589: LIST
32590: LIST
32591: LIST
32592: LIST
32593: LIST
32594: LIST
32595: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
32596: LD_ADDR_VAR 0 30
32600: PUSH
32601: LD_INT 4
32603: PUSH
32604: LD_INT 4
32606: PUSH
32607: EMPTY
32608: LIST
32609: LIST
32610: PUSH
32611: LD_INT 4
32613: PUSH
32614: LD_INT 3
32616: PUSH
32617: EMPTY
32618: LIST
32619: LIST
32620: PUSH
32621: LD_INT 5
32623: PUSH
32624: LD_INT 4
32626: PUSH
32627: EMPTY
32628: LIST
32629: LIST
32630: PUSH
32631: LD_INT 5
32633: PUSH
32634: LD_INT 5
32636: PUSH
32637: EMPTY
32638: LIST
32639: LIST
32640: PUSH
32641: LD_INT 4
32643: PUSH
32644: LD_INT 5
32646: PUSH
32647: EMPTY
32648: LIST
32649: LIST
32650: PUSH
32651: LD_INT 3
32653: PUSH
32654: LD_INT 4
32656: PUSH
32657: EMPTY
32658: LIST
32659: LIST
32660: PUSH
32661: LD_INT 3
32663: PUSH
32664: LD_INT 3
32666: PUSH
32667: EMPTY
32668: LIST
32669: LIST
32670: PUSH
32671: LD_INT 5
32673: PUSH
32674: LD_INT 3
32676: PUSH
32677: EMPTY
32678: LIST
32679: LIST
32680: PUSH
32681: LD_INT 3
32683: PUSH
32684: LD_INT 5
32686: PUSH
32687: EMPTY
32688: LIST
32689: LIST
32690: PUSH
32691: LD_INT 0
32693: PUSH
32694: LD_INT 3
32696: PUSH
32697: EMPTY
32698: LIST
32699: LIST
32700: PUSH
32701: LD_INT 0
32703: PUSH
32704: LD_INT 2
32706: PUSH
32707: EMPTY
32708: LIST
32709: LIST
32710: PUSH
32711: LD_INT 1
32713: PUSH
32714: LD_INT 3
32716: PUSH
32717: EMPTY
32718: LIST
32719: LIST
32720: PUSH
32721: LD_INT 1
32723: PUSH
32724: LD_INT 4
32726: PUSH
32727: EMPTY
32728: LIST
32729: LIST
32730: PUSH
32731: LD_INT 0
32733: PUSH
32734: LD_INT 4
32736: PUSH
32737: EMPTY
32738: LIST
32739: LIST
32740: PUSH
32741: LD_INT 1
32743: NEG
32744: PUSH
32745: LD_INT 3
32747: PUSH
32748: EMPTY
32749: LIST
32750: LIST
32751: PUSH
32752: LD_INT 1
32754: NEG
32755: PUSH
32756: LD_INT 2
32758: PUSH
32759: EMPTY
32760: LIST
32761: LIST
32762: PUSH
32763: LD_INT 2
32765: PUSH
32766: LD_INT 4
32768: PUSH
32769: EMPTY
32770: LIST
32771: LIST
32772: PUSH
32773: LD_INT 2
32775: NEG
32776: PUSH
32777: LD_INT 2
32779: PUSH
32780: EMPTY
32781: LIST
32782: LIST
32783: PUSH
32784: LD_INT 4
32786: NEG
32787: PUSH
32788: LD_INT 0
32790: PUSH
32791: EMPTY
32792: LIST
32793: LIST
32794: PUSH
32795: LD_INT 4
32797: NEG
32798: PUSH
32799: LD_INT 1
32801: NEG
32802: PUSH
32803: EMPTY
32804: LIST
32805: LIST
32806: PUSH
32807: LD_INT 3
32809: NEG
32810: PUSH
32811: LD_INT 0
32813: PUSH
32814: EMPTY
32815: LIST
32816: LIST
32817: PUSH
32818: LD_INT 3
32820: NEG
32821: PUSH
32822: LD_INT 1
32824: PUSH
32825: EMPTY
32826: LIST
32827: LIST
32828: PUSH
32829: LD_INT 4
32831: NEG
32832: PUSH
32833: LD_INT 1
32835: PUSH
32836: EMPTY
32837: LIST
32838: LIST
32839: PUSH
32840: LD_INT 5
32842: NEG
32843: PUSH
32844: LD_INT 0
32846: PUSH
32847: EMPTY
32848: LIST
32849: LIST
32850: PUSH
32851: LD_INT 5
32853: NEG
32854: PUSH
32855: LD_INT 1
32857: NEG
32858: PUSH
32859: EMPTY
32860: LIST
32861: LIST
32862: PUSH
32863: LD_INT 5
32865: NEG
32866: PUSH
32867: LD_INT 2
32869: NEG
32870: PUSH
32871: EMPTY
32872: LIST
32873: LIST
32874: PUSH
32875: LD_INT 3
32877: NEG
32878: PUSH
32879: LD_INT 2
32881: PUSH
32882: EMPTY
32883: LIST
32884: LIST
32885: PUSH
32886: LD_INT 3
32888: NEG
32889: PUSH
32890: LD_INT 3
32892: NEG
32893: PUSH
32894: EMPTY
32895: LIST
32896: LIST
32897: PUSH
32898: LD_INT 3
32900: NEG
32901: PUSH
32902: LD_INT 4
32904: NEG
32905: PUSH
32906: EMPTY
32907: LIST
32908: LIST
32909: PUSH
32910: LD_INT 2
32912: NEG
32913: PUSH
32914: LD_INT 3
32916: NEG
32917: PUSH
32918: EMPTY
32919: LIST
32920: LIST
32921: PUSH
32922: LD_INT 2
32924: NEG
32925: PUSH
32926: LD_INT 2
32928: NEG
32929: PUSH
32930: EMPTY
32931: LIST
32932: LIST
32933: PUSH
32934: LD_INT 3
32936: NEG
32937: PUSH
32938: LD_INT 2
32940: NEG
32941: PUSH
32942: EMPTY
32943: LIST
32944: LIST
32945: PUSH
32946: LD_INT 4
32948: NEG
32949: PUSH
32950: LD_INT 3
32952: NEG
32953: PUSH
32954: EMPTY
32955: LIST
32956: LIST
32957: PUSH
32958: LD_INT 4
32960: NEG
32961: PUSH
32962: LD_INT 4
32964: NEG
32965: PUSH
32966: EMPTY
32967: LIST
32968: LIST
32969: PUSH
32970: LD_INT 2
32972: NEG
32973: PUSH
32974: LD_INT 4
32976: NEG
32977: PUSH
32978: EMPTY
32979: LIST
32980: LIST
32981: PUSH
32982: LD_INT 4
32984: NEG
32985: PUSH
32986: LD_INT 2
32988: NEG
32989: PUSH
32990: EMPTY
32991: LIST
32992: LIST
32993: PUSH
32994: LD_INT 0
32996: PUSH
32997: LD_INT 4
32999: NEG
33000: PUSH
33001: EMPTY
33002: LIST
33003: LIST
33004: PUSH
33005: LD_INT 0
33007: PUSH
33008: LD_INT 5
33010: NEG
33011: PUSH
33012: EMPTY
33013: LIST
33014: LIST
33015: PUSH
33016: LD_INT 1
33018: PUSH
33019: LD_INT 4
33021: NEG
33022: PUSH
33023: EMPTY
33024: LIST
33025: LIST
33026: PUSH
33027: LD_INT 1
33029: PUSH
33030: LD_INT 3
33032: NEG
33033: PUSH
33034: EMPTY
33035: LIST
33036: LIST
33037: PUSH
33038: LD_INT 0
33040: PUSH
33041: LD_INT 3
33043: NEG
33044: PUSH
33045: EMPTY
33046: LIST
33047: LIST
33048: PUSH
33049: LD_INT 1
33051: NEG
33052: PUSH
33053: LD_INT 4
33055: NEG
33056: PUSH
33057: EMPTY
33058: LIST
33059: LIST
33060: PUSH
33061: LD_INT 1
33063: NEG
33064: PUSH
33065: LD_INT 5
33067: NEG
33068: PUSH
33069: EMPTY
33070: LIST
33071: LIST
33072: PUSH
33073: LD_INT 2
33075: PUSH
33076: LD_INT 3
33078: NEG
33079: PUSH
33080: EMPTY
33081: LIST
33082: LIST
33083: PUSH
33084: LD_INT 2
33086: NEG
33087: PUSH
33088: LD_INT 5
33090: NEG
33091: PUSH
33092: EMPTY
33093: LIST
33094: LIST
33095: PUSH
33096: EMPTY
33097: LIST
33098: LIST
33099: LIST
33100: LIST
33101: LIST
33102: LIST
33103: LIST
33104: LIST
33105: LIST
33106: LIST
33107: LIST
33108: LIST
33109: LIST
33110: LIST
33111: LIST
33112: LIST
33113: LIST
33114: LIST
33115: LIST
33116: LIST
33117: LIST
33118: LIST
33119: LIST
33120: LIST
33121: LIST
33122: LIST
33123: LIST
33124: LIST
33125: LIST
33126: LIST
33127: LIST
33128: LIST
33129: LIST
33130: LIST
33131: LIST
33132: LIST
33133: LIST
33134: LIST
33135: LIST
33136: LIST
33137: LIST
33138: LIST
33139: LIST
33140: LIST
33141: LIST
33142: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
33143: LD_ADDR_VAR 0 31
33147: PUSH
33148: LD_INT 0
33150: PUSH
33151: LD_INT 4
33153: PUSH
33154: EMPTY
33155: LIST
33156: LIST
33157: PUSH
33158: LD_INT 0
33160: PUSH
33161: LD_INT 3
33163: PUSH
33164: EMPTY
33165: LIST
33166: LIST
33167: PUSH
33168: LD_INT 1
33170: PUSH
33171: LD_INT 4
33173: PUSH
33174: EMPTY
33175: LIST
33176: LIST
33177: PUSH
33178: LD_INT 1
33180: PUSH
33181: LD_INT 5
33183: PUSH
33184: EMPTY
33185: LIST
33186: LIST
33187: PUSH
33188: LD_INT 0
33190: PUSH
33191: LD_INT 5
33193: PUSH
33194: EMPTY
33195: LIST
33196: LIST
33197: PUSH
33198: LD_INT 1
33200: NEG
33201: PUSH
33202: LD_INT 4
33204: PUSH
33205: EMPTY
33206: LIST
33207: LIST
33208: PUSH
33209: LD_INT 1
33211: NEG
33212: PUSH
33213: LD_INT 3
33215: PUSH
33216: EMPTY
33217: LIST
33218: LIST
33219: PUSH
33220: LD_INT 2
33222: PUSH
33223: LD_INT 5
33225: PUSH
33226: EMPTY
33227: LIST
33228: LIST
33229: PUSH
33230: LD_INT 2
33232: NEG
33233: PUSH
33234: LD_INT 3
33236: PUSH
33237: EMPTY
33238: LIST
33239: LIST
33240: PUSH
33241: LD_INT 3
33243: NEG
33244: PUSH
33245: LD_INT 0
33247: PUSH
33248: EMPTY
33249: LIST
33250: LIST
33251: PUSH
33252: LD_INT 3
33254: NEG
33255: PUSH
33256: LD_INT 1
33258: NEG
33259: PUSH
33260: EMPTY
33261: LIST
33262: LIST
33263: PUSH
33264: LD_INT 2
33266: NEG
33267: PUSH
33268: LD_INT 0
33270: PUSH
33271: EMPTY
33272: LIST
33273: LIST
33274: PUSH
33275: LD_INT 2
33277: NEG
33278: PUSH
33279: LD_INT 1
33281: PUSH
33282: EMPTY
33283: LIST
33284: LIST
33285: PUSH
33286: LD_INT 3
33288: NEG
33289: PUSH
33290: LD_INT 1
33292: PUSH
33293: EMPTY
33294: LIST
33295: LIST
33296: PUSH
33297: LD_INT 4
33299: NEG
33300: PUSH
33301: LD_INT 0
33303: PUSH
33304: EMPTY
33305: LIST
33306: LIST
33307: PUSH
33308: LD_INT 4
33310: NEG
33311: PUSH
33312: LD_INT 1
33314: NEG
33315: PUSH
33316: EMPTY
33317: LIST
33318: LIST
33319: PUSH
33320: LD_INT 4
33322: NEG
33323: PUSH
33324: LD_INT 2
33326: NEG
33327: PUSH
33328: EMPTY
33329: LIST
33330: LIST
33331: PUSH
33332: LD_INT 2
33334: NEG
33335: PUSH
33336: LD_INT 2
33338: PUSH
33339: EMPTY
33340: LIST
33341: LIST
33342: PUSH
33343: LD_INT 4
33345: NEG
33346: PUSH
33347: LD_INT 4
33349: NEG
33350: PUSH
33351: EMPTY
33352: LIST
33353: LIST
33354: PUSH
33355: LD_INT 4
33357: NEG
33358: PUSH
33359: LD_INT 5
33361: NEG
33362: PUSH
33363: EMPTY
33364: LIST
33365: LIST
33366: PUSH
33367: LD_INT 3
33369: NEG
33370: PUSH
33371: LD_INT 4
33373: NEG
33374: PUSH
33375: EMPTY
33376: LIST
33377: LIST
33378: PUSH
33379: LD_INT 3
33381: NEG
33382: PUSH
33383: LD_INT 3
33385: NEG
33386: PUSH
33387: EMPTY
33388: LIST
33389: LIST
33390: PUSH
33391: LD_INT 4
33393: NEG
33394: PUSH
33395: LD_INT 3
33397: NEG
33398: PUSH
33399: EMPTY
33400: LIST
33401: LIST
33402: PUSH
33403: LD_INT 5
33405: NEG
33406: PUSH
33407: LD_INT 4
33409: NEG
33410: PUSH
33411: EMPTY
33412: LIST
33413: LIST
33414: PUSH
33415: LD_INT 5
33417: NEG
33418: PUSH
33419: LD_INT 5
33421: NEG
33422: PUSH
33423: EMPTY
33424: LIST
33425: LIST
33426: PUSH
33427: LD_INT 3
33429: NEG
33430: PUSH
33431: LD_INT 5
33433: NEG
33434: PUSH
33435: EMPTY
33436: LIST
33437: LIST
33438: PUSH
33439: LD_INT 5
33441: NEG
33442: PUSH
33443: LD_INT 3
33445: NEG
33446: PUSH
33447: EMPTY
33448: LIST
33449: LIST
33450: PUSH
33451: LD_INT 0
33453: PUSH
33454: LD_INT 3
33456: NEG
33457: PUSH
33458: EMPTY
33459: LIST
33460: LIST
33461: PUSH
33462: LD_INT 0
33464: PUSH
33465: LD_INT 4
33467: NEG
33468: PUSH
33469: EMPTY
33470: LIST
33471: LIST
33472: PUSH
33473: LD_INT 1
33475: PUSH
33476: LD_INT 3
33478: NEG
33479: PUSH
33480: EMPTY
33481: LIST
33482: LIST
33483: PUSH
33484: LD_INT 1
33486: PUSH
33487: LD_INT 2
33489: NEG
33490: PUSH
33491: EMPTY
33492: LIST
33493: LIST
33494: PUSH
33495: LD_INT 0
33497: PUSH
33498: LD_INT 2
33500: NEG
33501: PUSH
33502: EMPTY
33503: LIST
33504: LIST
33505: PUSH
33506: LD_INT 1
33508: NEG
33509: PUSH
33510: LD_INT 3
33512: NEG
33513: PUSH
33514: EMPTY
33515: LIST
33516: LIST
33517: PUSH
33518: LD_INT 1
33520: NEG
33521: PUSH
33522: LD_INT 4
33524: NEG
33525: PUSH
33526: EMPTY
33527: LIST
33528: LIST
33529: PUSH
33530: LD_INT 2
33532: PUSH
33533: LD_INT 2
33535: NEG
33536: PUSH
33537: EMPTY
33538: LIST
33539: LIST
33540: PUSH
33541: LD_INT 2
33543: NEG
33544: PUSH
33545: LD_INT 4
33547: NEG
33548: PUSH
33549: EMPTY
33550: LIST
33551: LIST
33552: PUSH
33553: LD_INT 4
33555: PUSH
33556: LD_INT 0
33558: PUSH
33559: EMPTY
33560: LIST
33561: LIST
33562: PUSH
33563: LD_INT 4
33565: PUSH
33566: LD_INT 1
33568: NEG
33569: PUSH
33570: EMPTY
33571: LIST
33572: LIST
33573: PUSH
33574: LD_INT 5
33576: PUSH
33577: LD_INT 0
33579: PUSH
33580: EMPTY
33581: LIST
33582: LIST
33583: PUSH
33584: LD_INT 5
33586: PUSH
33587: LD_INT 1
33589: PUSH
33590: EMPTY
33591: LIST
33592: LIST
33593: PUSH
33594: LD_INT 4
33596: PUSH
33597: LD_INT 1
33599: PUSH
33600: EMPTY
33601: LIST
33602: LIST
33603: PUSH
33604: LD_INT 3
33606: PUSH
33607: LD_INT 0
33609: PUSH
33610: EMPTY
33611: LIST
33612: LIST
33613: PUSH
33614: LD_INT 3
33616: PUSH
33617: LD_INT 1
33619: NEG
33620: PUSH
33621: EMPTY
33622: LIST
33623: LIST
33624: PUSH
33625: LD_INT 3
33627: PUSH
33628: LD_INT 2
33630: NEG
33631: PUSH
33632: EMPTY
33633: LIST
33634: LIST
33635: PUSH
33636: LD_INT 5
33638: PUSH
33639: LD_INT 2
33641: PUSH
33642: EMPTY
33643: LIST
33644: LIST
33645: PUSH
33646: EMPTY
33647: LIST
33648: LIST
33649: LIST
33650: LIST
33651: LIST
33652: LIST
33653: LIST
33654: LIST
33655: LIST
33656: LIST
33657: LIST
33658: LIST
33659: LIST
33660: LIST
33661: LIST
33662: LIST
33663: LIST
33664: LIST
33665: LIST
33666: LIST
33667: LIST
33668: LIST
33669: LIST
33670: LIST
33671: LIST
33672: LIST
33673: LIST
33674: LIST
33675: LIST
33676: LIST
33677: LIST
33678: LIST
33679: LIST
33680: LIST
33681: LIST
33682: LIST
33683: LIST
33684: LIST
33685: LIST
33686: LIST
33687: LIST
33688: LIST
33689: LIST
33690: LIST
33691: LIST
33692: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
33693: LD_ADDR_VAR 0 32
33697: PUSH
33698: LD_INT 4
33700: NEG
33701: PUSH
33702: LD_INT 0
33704: PUSH
33705: EMPTY
33706: LIST
33707: LIST
33708: PUSH
33709: LD_INT 4
33711: NEG
33712: PUSH
33713: LD_INT 1
33715: NEG
33716: PUSH
33717: EMPTY
33718: LIST
33719: LIST
33720: PUSH
33721: LD_INT 3
33723: NEG
33724: PUSH
33725: LD_INT 0
33727: PUSH
33728: EMPTY
33729: LIST
33730: LIST
33731: PUSH
33732: LD_INT 3
33734: NEG
33735: PUSH
33736: LD_INT 1
33738: PUSH
33739: EMPTY
33740: LIST
33741: LIST
33742: PUSH
33743: LD_INT 4
33745: NEG
33746: PUSH
33747: LD_INT 1
33749: PUSH
33750: EMPTY
33751: LIST
33752: LIST
33753: PUSH
33754: LD_INT 5
33756: NEG
33757: PUSH
33758: LD_INT 0
33760: PUSH
33761: EMPTY
33762: LIST
33763: LIST
33764: PUSH
33765: LD_INT 5
33767: NEG
33768: PUSH
33769: LD_INT 1
33771: NEG
33772: PUSH
33773: EMPTY
33774: LIST
33775: LIST
33776: PUSH
33777: LD_INT 5
33779: NEG
33780: PUSH
33781: LD_INT 2
33783: NEG
33784: PUSH
33785: EMPTY
33786: LIST
33787: LIST
33788: PUSH
33789: LD_INT 3
33791: NEG
33792: PUSH
33793: LD_INT 2
33795: PUSH
33796: EMPTY
33797: LIST
33798: LIST
33799: PUSH
33800: LD_INT 3
33802: NEG
33803: PUSH
33804: LD_INT 3
33806: NEG
33807: PUSH
33808: EMPTY
33809: LIST
33810: LIST
33811: PUSH
33812: LD_INT 3
33814: NEG
33815: PUSH
33816: LD_INT 4
33818: NEG
33819: PUSH
33820: EMPTY
33821: LIST
33822: LIST
33823: PUSH
33824: LD_INT 2
33826: NEG
33827: PUSH
33828: LD_INT 3
33830: NEG
33831: PUSH
33832: EMPTY
33833: LIST
33834: LIST
33835: PUSH
33836: LD_INT 2
33838: NEG
33839: PUSH
33840: LD_INT 2
33842: NEG
33843: PUSH
33844: EMPTY
33845: LIST
33846: LIST
33847: PUSH
33848: LD_INT 3
33850: NEG
33851: PUSH
33852: LD_INT 2
33854: NEG
33855: PUSH
33856: EMPTY
33857: LIST
33858: LIST
33859: PUSH
33860: LD_INT 4
33862: NEG
33863: PUSH
33864: LD_INT 3
33866: NEG
33867: PUSH
33868: EMPTY
33869: LIST
33870: LIST
33871: PUSH
33872: LD_INT 4
33874: NEG
33875: PUSH
33876: LD_INT 4
33878: NEG
33879: PUSH
33880: EMPTY
33881: LIST
33882: LIST
33883: PUSH
33884: LD_INT 2
33886: NEG
33887: PUSH
33888: LD_INT 4
33890: NEG
33891: PUSH
33892: EMPTY
33893: LIST
33894: LIST
33895: PUSH
33896: LD_INT 4
33898: NEG
33899: PUSH
33900: LD_INT 2
33902: NEG
33903: PUSH
33904: EMPTY
33905: LIST
33906: LIST
33907: PUSH
33908: LD_INT 0
33910: PUSH
33911: LD_INT 4
33913: NEG
33914: PUSH
33915: EMPTY
33916: LIST
33917: LIST
33918: PUSH
33919: LD_INT 0
33921: PUSH
33922: LD_INT 5
33924: NEG
33925: PUSH
33926: EMPTY
33927: LIST
33928: LIST
33929: PUSH
33930: LD_INT 1
33932: PUSH
33933: LD_INT 4
33935: NEG
33936: PUSH
33937: EMPTY
33938: LIST
33939: LIST
33940: PUSH
33941: LD_INT 1
33943: PUSH
33944: LD_INT 3
33946: NEG
33947: PUSH
33948: EMPTY
33949: LIST
33950: LIST
33951: PUSH
33952: LD_INT 0
33954: PUSH
33955: LD_INT 3
33957: NEG
33958: PUSH
33959: EMPTY
33960: LIST
33961: LIST
33962: PUSH
33963: LD_INT 1
33965: NEG
33966: PUSH
33967: LD_INT 4
33969: NEG
33970: PUSH
33971: EMPTY
33972: LIST
33973: LIST
33974: PUSH
33975: LD_INT 1
33977: NEG
33978: PUSH
33979: LD_INT 5
33981: NEG
33982: PUSH
33983: EMPTY
33984: LIST
33985: LIST
33986: PUSH
33987: LD_INT 2
33989: PUSH
33990: LD_INT 3
33992: NEG
33993: PUSH
33994: EMPTY
33995: LIST
33996: LIST
33997: PUSH
33998: LD_INT 2
34000: NEG
34001: PUSH
34002: LD_INT 5
34004: NEG
34005: PUSH
34006: EMPTY
34007: LIST
34008: LIST
34009: PUSH
34010: LD_INT 3
34012: PUSH
34013: LD_INT 0
34015: PUSH
34016: EMPTY
34017: LIST
34018: LIST
34019: PUSH
34020: LD_INT 3
34022: PUSH
34023: LD_INT 1
34025: NEG
34026: PUSH
34027: EMPTY
34028: LIST
34029: LIST
34030: PUSH
34031: LD_INT 4
34033: PUSH
34034: LD_INT 0
34036: PUSH
34037: EMPTY
34038: LIST
34039: LIST
34040: PUSH
34041: LD_INT 4
34043: PUSH
34044: LD_INT 1
34046: PUSH
34047: EMPTY
34048: LIST
34049: LIST
34050: PUSH
34051: LD_INT 3
34053: PUSH
34054: LD_INT 1
34056: PUSH
34057: EMPTY
34058: LIST
34059: LIST
34060: PUSH
34061: LD_INT 2
34063: PUSH
34064: LD_INT 0
34066: PUSH
34067: EMPTY
34068: LIST
34069: LIST
34070: PUSH
34071: LD_INT 2
34073: PUSH
34074: LD_INT 1
34076: NEG
34077: PUSH
34078: EMPTY
34079: LIST
34080: LIST
34081: PUSH
34082: LD_INT 2
34084: PUSH
34085: LD_INT 2
34087: NEG
34088: PUSH
34089: EMPTY
34090: LIST
34091: LIST
34092: PUSH
34093: LD_INT 4
34095: PUSH
34096: LD_INT 2
34098: PUSH
34099: EMPTY
34100: LIST
34101: LIST
34102: PUSH
34103: LD_INT 4
34105: PUSH
34106: LD_INT 4
34108: PUSH
34109: EMPTY
34110: LIST
34111: LIST
34112: PUSH
34113: LD_INT 4
34115: PUSH
34116: LD_INT 3
34118: PUSH
34119: EMPTY
34120: LIST
34121: LIST
34122: PUSH
34123: LD_INT 5
34125: PUSH
34126: LD_INT 4
34128: PUSH
34129: EMPTY
34130: LIST
34131: LIST
34132: PUSH
34133: LD_INT 5
34135: PUSH
34136: LD_INT 5
34138: PUSH
34139: EMPTY
34140: LIST
34141: LIST
34142: PUSH
34143: LD_INT 4
34145: PUSH
34146: LD_INT 5
34148: PUSH
34149: EMPTY
34150: LIST
34151: LIST
34152: PUSH
34153: LD_INT 3
34155: PUSH
34156: LD_INT 4
34158: PUSH
34159: EMPTY
34160: LIST
34161: LIST
34162: PUSH
34163: LD_INT 3
34165: PUSH
34166: LD_INT 3
34168: PUSH
34169: EMPTY
34170: LIST
34171: LIST
34172: PUSH
34173: LD_INT 5
34175: PUSH
34176: LD_INT 3
34178: PUSH
34179: EMPTY
34180: LIST
34181: LIST
34182: PUSH
34183: LD_INT 3
34185: PUSH
34186: LD_INT 5
34188: PUSH
34189: EMPTY
34190: LIST
34191: LIST
34192: PUSH
34193: EMPTY
34194: LIST
34195: LIST
34196: LIST
34197: LIST
34198: LIST
34199: LIST
34200: LIST
34201: LIST
34202: LIST
34203: LIST
34204: LIST
34205: LIST
34206: LIST
34207: LIST
34208: LIST
34209: LIST
34210: LIST
34211: LIST
34212: LIST
34213: LIST
34214: LIST
34215: LIST
34216: LIST
34217: LIST
34218: LIST
34219: LIST
34220: LIST
34221: LIST
34222: LIST
34223: LIST
34224: LIST
34225: LIST
34226: LIST
34227: LIST
34228: LIST
34229: LIST
34230: LIST
34231: LIST
34232: LIST
34233: LIST
34234: LIST
34235: LIST
34236: LIST
34237: LIST
34238: LIST
34239: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
34240: LD_ADDR_VAR 0 33
34244: PUSH
34245: LD_INT 4
34247: NEG
34248: PUSH
34249: LD_INT 4
34251: NEG
34252: PUSH
34253: EMPTY
34254: LIST
34255: LIST
34256: PUSH
34257: LD_INT 4
34259: NEG
34260: PUSH
34261: LD_INT 5
34263: NEG
34264: PUSH
34265: EMPTY
34266: LIST
34267: LIST
34268: PUSH
34269: LD_INT 3
34271: NEG
34272: PUSH
34273: LD_INT 4
34275: NEG
34276: PUSH
34277: EMPTY
34278: LIST
34279: LIST
34280: PUSH
34281: LD_INT 3
34283: NEG
34284: PUSH
34285: LD_INT 3
34287: NEG
34288: PUSH
34289: EMPTY
34290: LIST
34291: LIST
34292: PUSH
34293: LD_INT 4
34295: NEG
34296: PUSH
34297: LD_INT 3
34299: NEG
34300: PUSH
34301: EMPTY
34302: LIST
34303: LIST
34304: PUSH
34305: LD_INT 5
34307: NEG
34308: PUSH
34309: LD_INT 4
34311: NEG
34312: PUSH
34313: EMPTY
34314: LIST
34315: LIST
34316: PUSH
34317: LD_INT 5
34319: NEG
34320: PUSH
34321: LD_INT 5
34323: NEG
34324: PUSH
34325: EMPTY
34326: LIST
34327: LIST
34328: PUSH
34329: LD_INT 3
34331: NEG
34332: PUSH
34333: LD_INT 5
34335: NEG
34336: PUSH
34337: EMPTY
34338: LIST
34339: LIST
34340: PUSH
34341: LD_INT 5
34343: NEG
34344: PUSH
34345: LD_INT 3
34347: NEG
34348: PUSH
34349: EMPTY
34350: LIST
34351: LIST
34352: PUSH
34353: LD_INT 0
34355: PUSH
34356: LD_INT 3
34358: NEG
34359: PUSH
34360: EMPTY
34361: LIST
34362: LIST
34363: PUSH
34364: LD_INT 0
34366: PUSH
34367: LD_INT 4
34369: NEG
34370: PUSH
34371: EMPTY
34372: LIST
34373: LIST
34374: PUSH
34375: LD_INT 1
34377: PUSH
34378: LD_INT 3
34380: NEG
34381: PUSH
34382: EMPTY
34383: LIST
34384: LIST
34385: PUSH
34386: LD_INT 1
34388: PUSH
34389: LD_INT 2
34391: NEG
34392: PUSH
34393: EMPTY
34394: LIST
34395: LIST
34396: PUSH
34397: LD_INT 0
34399: PUSH
34400: LD_INT 2
34402: NEG
34403: PUSH
34404: EMPTY
34405: LIST
34406: LIST
34407: PUSH
34408: LD_INT 1
34410: NEG
34411: PUSH
34412: LD_INT 3
34414: NEG
34415: PUSH
34416: EMPTY
34417: LIST
34418: LIST
34419: PUSH
34420: LD_INT 1
34422: NEG
34423: PUSH
34424: LD_INT 4
34426: NEG
34427: PUSH
34428: EMPTY
34429: LIST
34430: LIST
34431: PUSH
34432: LD_INT 2
34434: PUSH
34435: LD_INT 2
34437: NEG
34438: PUSH
34439: EMPTY
34440: LIST
34441: LIST
34442: PUSH
34443: LD_INT 2
34445: NEG
34446: PUSH
34447: LD_INT 4
34449: NEG
34450: PUSH
34451: EMPTY
34452: LIST
34453: LIST
34454: PUSH
34455: LD_INT 4
34457: PUSH
34458: LD_INT 0
34460: PUSH
34461: EMPTY
34462: LIST
34463: LIST
34464: PUSH
34465: LD_INT 4
34467: PUSH
34468: LD_INT 1
34470: NEG
34471: PUSH
34472: EMPTY
34473: LIST
34474: LIST
34475: PUSH
34476: LD_INT 5
34478: PUSH
34479: LD_INT 0
34481: PUSH
34482: EMPTY
34483: LIST
34484: LIST
34485: PUSH
34486: LD_INT 5
34488: PUSH
34489: LD_INT 1
34491: PUSH
34492: EMPTY
34493: LIST
34494: LIST
34495: PUSH
34496: LD_INT 4
34498: PUSH
34499: LD_INT 1
34501: PUSH
34502: EMPTY
34503: LIST
34504: LIST
34505: PUSH
34506: LD_INT 3
34508: PUSH
34509: LD_INT 0
34511: PUSH
34512: EMPTY
34513: LIST
34514: LIST
34515: PUSH
34516: LD_INT 3
34518: PUSH
34519: LD_INT 1
34521: NEG
34522: PUSH
34523: EMPTY
34524: LIST
34525: LIST
34526: PUSH
34527: LD_INT 3
34529: PUSH
34530: LD_INT 2
34532: NEG
34533: PUSH
34534: EMPTY
34535: LIST
34536: LIST
34537: PUSH
34538: LD_INT 5
34540: PUSH
34541: LD_INT 2
34543: PUSH
34544: EMPTY
34545: LIST
34546: LIST
34547: PUSH
34548: LD_INT 3
34550: PUSH
34551: LD_INT 3
34553: PUSH
34554: EMPTY
34555: LIST
34556: LIST
34557: PUSH
34558: LD_INT 3
34560: PUSH
34561: LD_INT 2
34563: PUSH
34564: EMPTY
34565: LIST
34566: LIST
34567: PUSH
34568: LD_INT 4
34570: PUSH
34571: LD_INT 3
34573: PUSH
34574: EMPTY
34575: LIST
34576: LIST
34577: PUSH
34578: LD_INT 4
34580: PUSH
34581: LD_INT 4
34583: PUSH
34584: EMPTY
34585: LIST
34586: LIST
34587: PUSH
34588: LD_INT 3
34590: PUSH
34591: LD_INT 4
34593: PUSH
34594: EMPTY
34595: LIST
34596: LIST
34597: PUSH
34598: LD_INT 2
34600: PUSH
34601: LD_INT 3
34603: PUSH
34604: EMPTY
34605: LIST
34606: LIST
34607: PUSH
34608: LD_INT 2
34610: PUSH
34611: LD_INT 2
34613: PUSH
34614: EMPTY
34615: LIST
34616: LIST
34617: PUSH
34618: LD_INT 4
34620: PUSH
34621: LD_INT 2
34623: PUSH
34624: EMPTY
34625: LIST
34626: LIST
34627: PUSH
34628: LD_INT 2
34630: PUSH
34631: LD_INT 4
34633: PUSH
34634: EMPTY
34635: LIST
34636: LIST
34637: PUSH
34638: LD_INT 0
34640: PUSH
34641: LD_INT 4
34643: PUSH
34644: EMPTY
34645: LIST
34646: LIST
34647: PUSH
34648: LD_INT 0
34650: PUSH
34651: LD_INT 3
34653: PUSH
34654: EMPTY
34655: LIST
34656: LIST
34657: PUSH
34658: LD_INT 1
34660: PUSH
34661: LD_INT 4
34663: PUSH
34664: EMPTY
34665: LIST
34666: LIST
34667: PUSH
34668: LD_INT 1
34670: PUSH
34671: LD_INT 5
34673: PUSH
34674: EMPTY
34675: LIST
34676: LIST
34677: PUSH
34678: LD_INT 0
34680: PUSH
34681: LD_INT 5
34683: PUSH
34684: EMPTY
34685: LIST
34686: LIST
34687: PUSH
34688: LD_INT 1
34690: NEG
34691: PUSH
34692: LD_INT 4
34694: PUSH
34695: EMPTY
34696: LIST
34697: LIST
34698: PUSH
34699: LD_INT 1
34701: NEG
34702: PUSH
34703: LD_INT 3
34705: PUSH
34706: EMPTY
34707: LIST
34708: LIST
34709: PUSH
34710: LD_INT 2
34712: PUSH
34713: LD_INT 5
34715: PUSH
34716: EMPTY
34717: LIST
34718: LIST
34719: PUSH
34720: LD_INT 2
34722: NEG
34723: PUSH
34724: LD_INT 3
34726: PUSH
34727: EMPTY
34728: LIST
34729: LIST
34730: PUSH
34731: EMPTY
34732: LIST
34733: LIST
34734: LIST
34735: LIST
34736: LIST
34737: LIST
34738: LIST
34739: LIST
34740: LIST
34741: LIST
34742: LIST
34743: LIST
34744: LIST
34745: LIST
34746: LIST
34747: LIST
34748: LIST
34749: LIST
34750: LIST
34751: LIST
34752: LIST
34753: LIST
34754: LIST
34755: LIST
34756: LIST
34757: LIST
34758: LIST
34759: LIST
34760: LIST
34761: LIST
34762: LIST
34763: LIST
34764: LIST
34765: LIST
34766: LIST
34767: LIST
34768: LIST
34769: LIST
34770: LIST
34771: LIST
34772: LIST
34773: LIST
34774: LIST
34775: LIST
34776: LIST
34777: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
34778: LD_ADDR_VAR 0 34
34782: PUSH
34783: LD_INT 0
34785: PUSH
34786: LD_INT 4
34788: NEG
34789: PUSH
34790: EMPTY
34791: LIST
34792: LIST
34793: PUSH
34794: LD_INT 0
34796: PUSH
34797: LD_INT 5
34799: NEG
34800: PUSH
34801: EMPTY
34802: LIST
34803: LIST
34804: PUSH
34805: LD_INT 1
34807: PUSH
34808: LD_INT 4
34810: NEG
34811: PUSH
34812: EMPTY
34813: LIST
34814: LIST
34815: PUSH
34816: LD_INT 1
34818: PUSH
34819: LD_INT 3
34821: NEG
34822: PUSH
34823: EMPTY
34824: LIST
34825: LIST
34826: PUSH
34827: LD_INT 0
34829: PUSH
34830: LD_INT 3
34832: NEG
34833: PUSH
34834: EMPTY
34835: LIST
34836: LIST
34837: PUSH
34838: LD_INT 1
34840: NEG
34841: PUSH
34842: LD_INT 4
34844: NEG
34845: PUSH
34846: EMPTY
34847: LIST
34848: LIST
34849: PUSH
34850: LD_INT 1
34852: NEG
34853: PUSH
34854: LD_INT 5
34856: NEG
34857: PUSH
34858: EMPTY
34859: LIST
34860: LIST
34861: PUSH
34862: LD_INT 2
34864: PUSH
34865: LD_INT 3
34867: NEG
34868: PUSH
34869: EMPTY
34870: LIST
34871: LIST
34872: PUSH
34873: LD_INT 2
34875: NEG
34876: PUSH
34877: LD_INT 5
34879: NEG
34880: PUSH
34881: EMPTY
34882: LIST
34883: LIST
34884: PUSH
34885: LD_INT 3
34887: PUSH
34888: LD_INT 0
34890: PUSH
34891: EMPTY
34892: LIST
34893: LIST
34894: PUSH
34895: LD_INT 3
34897: PUSH
34898: LD_INT 1
34900: NEG
34901: PUSH
34902: EMPTY
34903: LIST
34904: LIST
34905: PUSH
34906: LD_INT 4
34908: PUSH
34909: LD_INT 0
34911: PUSH
34912: EMPTY
34913: LIST
34914: LIST
34915: PUSH
34916: LD_INT 4
34918: PUSH
34919: LD_INT 1
34921: PUSH
34922: EMPTY
34923: LIST
34924: LIST
34925: PUSH
34926: LD_INT 3
34928: PUSH
34929: LD_INT 1
34931: PUSH
34932: EMPTY
34933: LIST
34934: LIST
34935: PUSH
34936: LD_INT 2
34938: PUSH
34939: LD_INT 0
34941: PUSH
34942: EMPTY
34943: LIST
34944: LIST
34945: PUSH
34946: LD_INT 2
34948: PUSH
34949: LD_INT 1
34951: NEG
34952: PUSH
34953: EMPTY
34954: LIST
34955: LIST
34956: PUSH
34957: LD_INT 2
34959: PUSH
34960: LD_INT 2
34962: NEG
34963: PUSH
34964: EMPTY
34965: LIST
34966: LIST
34967: PUSH
34968: LD_INT 4
34970: PUSH
34971: LD_INT 2
34973: PUSH
34974: EMPTY
34975: LIST
34976: LIST
34977: PUSH
34978: LD_INT 4
34980: PUSH
34981: LD_INT 4
34983: PUSH
34984: EMPTY
34985: LIST
34986: LIST
34987: PUSH
34988: LD_INT 4
34990: PUSH
34991: LD_INT 3
34993: PUSH
34994: EMPTY
34995: LIST
34996: LIST
34997: PUSH
34998: LD_INT 5
35000: PUSH
35001: LD_INT 4
35003: PUSH
35004: EMPTY
35005: LIST
35006: LIST
35007: PUSH
35008: LD_INT 5
35010: PUSH
35011: LD_INT 5
35013: PUSH
35014: EMPTY
35015: LIST
35016: LIST
35017: PUSH
35018: LD_INT 4
35020: PUSH
35021: LD_INT 5
35023: PUSH
35024: EMPTY
35025: LIST
35026: LIST
35027: PUSH
35028: LD_INT 3
35030: PUSH
35031: LD_INT 4
35033: PUSH
35034: EMPTY
35035: LIST
35036: LIST
35037: PUSH
35038: LD_INT 3
35040: PUSH
35041: LD_INT 3
35043: PUSH
35044: EMPTY
35045: LIST
35046: LIST
35047: PUSH
35048: LD_INT 5
35050: PUSH
35051: LD_INT 3
35053: PUSH
35054: EMPTY
35055: LIST
35056: LIST
35057: PUSH
35058: LD_INT 3
35060: PUSH
35061: LD_INT 5
35063: PUSH
35064: EMPTY
35065: LIST
35066: LIST
35067: PUSH
35068: LD_INT 0
35070: PUSH
35071: LD_INT 3
35073: PUSH
35074: EMPTY
35075: LIST
35076: LIST
35077: PUSH
35078: LD_INT 0
35080: PUSH
35081: LD_INT 2
35083: PUSH
35084: EMPTY
35085: LIST
35086: LIST
35087: PUSH
35088: LD_INT 1
35090: PUSH
35091: LD_INT 3
35093: PUSH
35094: EMPTY
35095: LIST
35096: LIST
35097: PUSH
35098: LD_INT 1
35100: PUSH
35101: LD_INT 4
35103: PUSH
35104: EMPTY
35105: LIST
35106: LIST
35107: PUSH
35108: LD_INT 0
35110: PUSH
35111: LD_INT 4
35113: PUSH
35114: EMPTY
35115: LIST
35116: LIST
35117: PUSH
35118: LD_INT 1
35120: NEG
35121: PUSH
35122: LD_INT 3
35124: PUSH
35125: EMPTY
35126: LIST
35127: LIST
35128: PUSH
35129: LD_INT 1
35131: NEG
35132: PUSH
35133: LD_INT 2
35135: PUSH
35136: EMPTY
35137: LIST
35138: LIST
35139: PUSH
35140: LD_INT 2
35142: PUSH
35143: LD_INT 4
35145: PUSH
35146: EMPTY
35147: LIST
35148: LIST
35149: PUSH
35150: LD_INT 2
35152: NEG
35153: PUSH
35154: LD_INT 2
35156: PUSH
35157: EMPTY
35158: LIST
35159: LIST
35160: PUSH
35161: LD_INT 4
35163: NEG
35164: PUSH
35165: LD_INT 0
35167: PUSH
35168: EMPTY
35169: LIST
35170: LIST
35171: PUSH
35172: LD_INT 4
35174: NEG
35175: PUSH
35176: LD_INT 1
35178: NEG
35179: PUSH
35180: EMPTY
35181: LIST
35182: LIST
35183: PUSH
35184: LD_INT 3
35186: NEG
35187: PUSH
35188: LD_INT 0
35190: PUSH
35191: EMPTY
35192: LIST
35193: LIST
35194: PUSH
35195: LD_INT 3
35197: NEG
35198: PUSH
35199: LD_INT 1
35201: PUSH
35202: EMPTY
35203: LIST
35204: LIST
35205: PUSH
35206: LD_INT 4
35208: NEG
35209: PUSH
35210: LD_INT 1
35212: PUSH
35213: EMPTY
35214: LIST
35215: LIST
35216: PUSH
35217: LD_INT 5
35219: NEG
35220: PUSH
35221: LD_INT 0
35223: PUSH
35224: EMPTY
35225: LIST
35226: LIST
35227: PUSH
35228: LD_INT 5
35230: NEG
35231: PUSH
35232: LD_INT 1
35234: NEG
35235: PUSH
35236: EMPTY
35237: LIST
35238: LIST
35239: PUSH
35240: LD_INT 5
35242: NEG
35243: PUSH
35244: LD_INT 2
35246: NEG
35247: PUSH
35248: EMPTY
35249: LIST
35250: LIST
35251: PUSH
35252: LD_INT 3
35254: NEG
35255: PUSH
35256: LD_INT 2
35258: PUSH
35259: EMPTY
35260: LIST
35261: LIST
35262: PUSH
35263: EMPTY
35264: LIST
35265: LIST
35266: LIST
35267: LIST
35268: LIST
35269: LIST
35270: LIST
35271: LIST
35272: LIST
35273: LIST
35274: LIST
35275: LIST
35276: LIST
35277: LIST
35278: LIST
35279: LIST
35280: LIST
35281: LIST
35282: LIST
35283: LIST
35284: LIST
35285: LIST
35286: LIST
35287: LIST
35288: LIST
35289: LIST
35290: LIST
35291: LIST
35292: LIST
35293: LIST
35294: LIST
35295: LIST
35296: LIST
35297: LIST
35298: LIST
35299: LIST
35300: LIST
35301: LIST
35302: LIST
35303: LIST
35304: LIST
35305: LIST
35306: LIST
35307: LIST
35308: LIST
35309: ST_TO_ADDR
// end ; end ;
35310: GO 35313
35312: POP
// case btype of b_depot , b_warehouse :
35313: LD_VAR 0 1
35317: PUSH
35318: LD_INT 0
35320: DOUBLE
35321: EQUAL
35322: IFTRUE 35332
35324: LD_INT 1
35326: DOUBLE
35327: EQUAL
35328: IFTRUE 35332
35330: GO 35533
35332: POP
// case nation of nation_american :
35333: LD_VAR 0 5
35337: PUSH
35338: LD_INT 1
35340: DOUBLE
35341: EQUAL
35342: IFTRUE 35346
35344: GO 35402
35346: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
35347: LD_ADDR_VAR 0 9
35351: PUSH
35352: LD_VAR 0 11
35356: PUSH
35357: LD_VAR 0 12
35361: PUSH
35362: LD_VAR 0 13
35366: PUSH
35367: LD_VAR 0 14
35371: PUSH
35372: LD_VAR 0 15
35376: PUSH
35377: LD_VAR 0 16
35381: PUSH
35382: EMPTY
35383: LIST
35384: LIST
35385: LIST
35386: LIST
35387: LIST
35388: LIST
35389: PUSH
35390: LD_VAR 0 4
35394: PUSH
35395: LD_INT 1
35397: PLUS
35398: ARRAY
35399: ST_TO_ADDR
35400: GO 35531
35402: LD_INT 2
35404: DOUBLE
35405: EQUAL
35406: IFTRUE 35410
35408: GO 35466
35410: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
35411: LD_ADDR_VAR 0 9
35415: PUSH
35416: LD_VAR 0 17
35420: PUSH
35421: LD_VAR 0 18
35425: PUSH
35426: LD_VAR 0 19
35430: PUSH
35431: LD_VAR 0 20
35435: PUSH
35436: LD_VAR 0 21
35440: PUSH
35441: LD_VAR 0 22
35445: PUSH
35446: EMPTY
35447: LIST
35448: LIST
35449: LIST
35450: LIST
35451: LIST
35452: LIST
35453: PUSH
35454: LD_VAR 0 4
35458: PUSH
35459: LD_INT 1
35461: PLUS
35462: ARRAY
35463: ST_TO_ADDR
35464: GO 35531
35466: LD_INT 3
35468: DOUBLE
35469: EQUAL
35470: IFTRUE 35474
35472: GO 35530
35474: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
35475: LD_ADDR_VAR 0 9
35479: PUSH
35480: LD_VAR 0 23
35484: PUSH
35485: LD_VAR 0 24
35489: PUSH
35490: LD_VAR 0 25
35494: PUSH
35495: LD_VAR 0 26
35499: PUSH
35500: LD_VAR 0 27
35504: PUSH
35505: LD_VAR 0 28
35509: PUSH
35510: EMPTY
35511: LIST
35512: LIST
35513: LIST
35514: LIST
35515: LIST
35516: LIST
35517: PUSH
35518: LD_VAR 0 4
35522: PUSH
35523: LD_INT 1
35525: PLUS
35526: ARRAY
35527: ST_TO_ADDR
35528: GO 35531
35530: POP
35531: GO 36086
35533: LD_INT 2
35535: DOUBLE
35536: EQUAL
35537: IFTRUE 35547
35539: LD_INT 3
35541: DOUBLE
35542: EQUAL
35543: IFTRUE 35547
35545: GO 35603
35547: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
35548: LD_ADDR_VAR 0 9
35552: PUSH
35553: LD_VAR 0 29
35557: PUSH
35558: LD_VAR 0 30
35562: PUSH
35563: LD_VAR 0 31
35567: PUSH
35568: LD_VAR 0 32
35572: PUSH
35573: LD_VAR 0 33
35577: PUSH
35578: LD_VAR 0 34
35582: PUSH
35583: EMPTY
35584: LIST
35585: LIST
35586: LIST
35587: LIST
35588: LIST
35589: LIST
35590: PUSH
35591: LD_VAR 0 4
35595: PUSH
35596: LD_INT 1
35598: PLUS
35599: ARRAY
35600: ST_TO_ADDR
35601: GO 36086
35603: LD_INT 16
35605: DOUBLE
35606: EQUAL
35607: IFTRUE 35665
35609: LD_INT 17
35611: DOUBLE
35612: EQUAL
35613: IFTRUE 35665
35615: LD_INT 18
35617: DOUBLE
35618: EQUAL
35619: IFTRUE 35665
35621: LD_INT 19
35623: DOUBLE
35624: EQUAL
35625: IFTRUE 35665
35627: LD_INT 22
35629: DOUBLE
35630: EQUAL
35631: IFTRUE 35665
35633: LD_INT 20
35635: DOUBLE
35636: EQUAL
35637: IFTRUE 35665
35639: LD_INT 21
35641: DOUBLE
35642: EQUAL
35643: IFTRUE 35665
35645: LD_INT 23
35647: DOUBLE
35648: EQUAL
35649: IFTRUE 35665
35651: LD_INT 24
35653: DOUBLE
35654: EQUAL
35655: IFTRUE 35665
35657: LD_INT 25
35659: DOUBLE
35660: EQUAL
35661: IFTRUE 35665
35663: GO 35721
35665: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
35666: LD_ADDR_VAR 0 9
35670: PUSH
35671: LD_VAR 0 35
35675: PUSH
35676: LD_VAR 0 36
35680: PUSH
35681: LD_VAR 0 37
35685: PUSH
35686: LD_VAR 0 38
35690: PUSH
35691: LD_VAR 0 39
35695: PUSH
35696: LD_VAR 0 40
35700: PUSH
35701: EMPTY
35702: LIST
35703: LIST
35704: LIST
35705: LIST
35706: LIST
35707: LIST
35708: PUSH
35709: LD_VAR 0 4
35713: PUSH
35714: LD_INT 1
35716: PLUS
35717: ARRAY
35718: ST_TO_ADDR
35719: GO 36086
35721: LD_INT 6
35723: DOUBLE
35724: EQUAL
35725: IFTRUE 35777
35727: LD_INT 7
35729: DOUBLE
35730: EQUAL
35731: IFTRUE 35777
35733: LD_INT 8
35735: DOUBLE
35736: EQUAL
35737: IFTRUE 35777
35739: LD_INT 13
35741: DOUBLE
35742: EQUAL
35743: IFTRUE 35777
35745: LD_INT 12
35747: DOUBLE
35748: EQUAL
35749: IFTRUE 35777
35751: LD_INT 15
35753: DOUBLE
35754: EQUAL
35755: IFTRUE 35777
35757: LD_INT 11
35759: DOUBLE
35760: EQUAL
35761: IFTRUE 35777
35763: LD_INT 14
35765: DOUBLE
35766: EQUAL
35767: IFTRUE 35777
35769: LD_INT 10
35771: DOUBLE
35772: EQUAL
35773: IFTRUE 35777
35775: GO 35833
35777: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
35778: LD_ADDR_VAR 0 9
35782: PUSH
35783: LD_VAR 0 41
35787: PUSH
35788: LD_VAR 0 42
35792: PUSH
35793: LD_VAR 0 43
35797: PUSH
35798: LD_VAR 0 44
35802: PUSH
35803: LD_VAR 0 45
35807: PUSH
35808: LD_VAR 0 46
35812: PUSH
35813: EMPTY
35814: LIST
35815: LIST
35816: LIST
35817: LIST
35818: LIST
35819: LIST
35820: PUSH
35821: LD_VAR 0 4
35825: PUSH
35826: LD_INT 1
35828: PLUS
35829: ARRAY
35830: ST_TO_ADDR
35831: GO 36086
35833: LD_INT 36
35835: DOUBLE
35836: EQUAL
35837: IFTRUE 35841
35839: GO 35897
35841: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
35842: LD_ADDR_VAR 0 9
35846: PUSH
35847: LD_VAR 0 47
35851: PUSH
35852: LD_VAR 0 48
35856: PUSH
35857: LD_VAR 0 49
35861: PUSH
35862: LD_VAR 0 50
35866: PUSH
35867: LD_VAR 0 51
35871: PUSH
35872: LD_VAR 0 52
35876: PUSH
35877: EMPTY
35878: LIST
35879: LIST
35880: LIST
35881: LIST
35882: LIST
35883: LIST
35884: PUSH
35885: LD_VAR 0 4
35889: PUSH
35890: LD_INT 1
35892: PLUS
35893: ARRAY
35894: ST_TO_ADDR
35895: GO 36086
35897: LD_INT 4
35899: DOUBLE
35900: EQUAL
35901: IFTRUE 35923
35903: LD_INT 5
35905: DOUBLE
35906: EQUAL
35907: IFTRUE 35923
35909: LD_INT 34
35911: DOUBLE
35912: EQUAL
35913: IFTRUE 35923
35915: LD_INT 37
35917: DOUBLE
35918: EQUAL
35919: IFTRUE 35923
35921: GO 35979
35923: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
35924: LD_ADDR_VAR 0 9
35928: PUSH
35929: LD_VAR 0 53
35933: PUSH
35934: LD_VAR 0 54
35938: PUSH
35939: LD_VAR 0 55
35943: PUSH
35944: LD_VAR 0 56
35948: PUSH
35949: LD_VAR 0 57
35953: PUSH
35954: LD_VAR 0 58
35958: PUSH
35959: EMPTY
35960: LIST
35961: LIST
35962: LIST
35963: LIST
35964: LIST
35965: LIST
35966: PUSH
35967: LD_VAR 0 4
35971: PUSH
35972: LD_INT 1
35974: PLUS
35975: ARRAY
35976: ST_TO_ADDR
35977: GO 36086
35979: LD_INT 31
35981: DOUBLE
35982: EQUAL
35983: IFTRUE 36029
35985: LD_INT 32
35987: DOUBLE
35988: EQUAL
35989: IFTRUE 36029
35991: LD_INT 33
35993: DOUBLE
35994: EQUAL
35995: IFTRUE 36029
35997: LD_INT 27
35999: DOUBLE
36000: EQUAL
36001: IFTRUE 36029
36003: LD_INT 26
36005: DOUBLE
36006: EQUAL
36007: IFTRUE 36029
36009: LD_INT 28
36011: DOUBLE
36012: EQUAL
36013: IFTRUE 36029
36015: LD_INT 29
36017: DOUBLE
36018: EQUAL
36019: IFTRUE 36029
36021: LD_INT 30
36023: DOUBLE
36024: EQUAL
36025: IFTRUE 36029
36027: GO 36085
36029: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
36030: LD_ADDR_VAR 0 9
36034: PUSH
36035: LD_VAR 0 59
36039: PUSH
36040: LD_VAR 0 60
36044: PUSH
36045: LD_VAR 0 61
36049: PUSH
36050: LD_VAR 0 62
36054: PUSH
36055: LD_VAR 0 63
36059: PUSH
36060: LD_VAR 0 64
36064: PUSH
36065: EMPTY
36066: LIST
36067: LIST
36068: LIST
36069: LIST
36070: LIST
36071: LIST
36072: PUSH
36073: LD_VAR 0 4
36077: PUSH
36078: LD_INT 1
36080: PLUS
36081: ARRAY
36082: ST_TO_ADDR
36083: GO 36086
36085: POP
// temp_list2 = [ ] ;
36086: LD_ADDR_VAR 0 10
36090: PUSH
36091: EMPTY
36092: ST_TO_ADDR
// for i in temp_list do
36093: LD_ADDR_VAR 0 8
36097: PUSH
36098: LD_VAR 0 9
36102: PUSH
36103: FOR_IN
36104: IFFALSE 36156
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
36106: LD_ADDR_VAR 0 10
36110: PUSH
36111: LD_VAR 0 10
36115: PUSH
36116: LD_VAR 0 8
36120: PUSH
36121: LD_INT 1
36123: ARRAY
36124: PUSH
36125: LD_VAR 0 2
36129: PLUS
36130: PUSH
36131: LD_VAR 0 8
36135: PUSH
36136: LD_INT 2
36138: ARRAY
36139: PUSH
36140: LD_VAR 0 3
36144: PLUS
36145: PUSH
36146: EMPTY
36147: LIST
36148: LIST
36149: PUSH
36150: EMPTY
36151: LIST
36152: ADD
36153: ST_TO_ADDR
36154: GO 36103
36156: POP
36157: POP
// result = temp_list2 ;
36158: LD_ADDR_VAR 0 7
36162: PUSH
36163: LD_VAR 0 10
36167: ST_TO_ADDR
// end ;
36168: LD_VAR 0 7
36172: RET
// export function EnemyInRange ( unit , dist ) ; begin
36173: LD_INT 0
36175: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
36176: LD_ADDR_VAR 0 3
36180: PUSH
36181: LD_VAR 0 1
36185: PPUSH
36186: CALL_OW 255
36190: PPUSH
36191: LD_VAR 0 1
36195: PPUSH
36196: CALL_OW 250
36200: PPUSH
36201: LD_VAR 0 1
36205: PPUSH
36206: CALL_OW 251
36210: PPUSH
36211: LD_VAR 0 2
36215: PPUSH
36216: CALL 9430 0 4
36220: PUSH
36221: LD_INT 4
36223: ARRAY
36224: ST_TO_ADDR
// end ;
36225: LD_VAR 0 3
36229: RET
// export function PlayerSeeMe ( unit ) ; begin
36230: LD_INT 0
36232: PPUSH
// result := See ( your_side , unit ) ;
36233: LD_ADDR_VAR 0 2
36237: PUSH
36238: LD_OWVAR 2
36242: PPUSH
36243: LD_VAR 0 1
36247: PPUSH
36248: CALL_OW 292
36252: ST_TO_ADDR
// end ;
36253: LD_VAR 0 2
36257: RET
// export function ReverseDir ( unit ) ; begin
36258: LD_INT 0
36260: PPUSH
// if not unit then
36261: LD_VAR 0 1
36265: NOT
36266: IFFALSE 36270
// exit ;
36268: GO 36293
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
36270: LD_ADDR_VAR 0 2
36274: PUSH
36275: LD_VAR 0 1
36279: PPUSH
36280: CALL_OW 254
36284: PUSH
36285: LD_INT 3
36287: PLUS
36288: PUSH
36289: LD_INT 6
36291: MOD
36292: ST_TO_ADDR
// end ;
36293: LD_VAR 0 2
36297: RET
// export function ReverseArray ( array ) ; var i ; begin
36298: LD_INT 0
36300: PPUSH
36301: PPUSH
// if not array then
36302: LD_VAR 0 1
36306: NOT
36307: IFFALSE 36311
// exit ;
36309: GO 36366
// result := [ ] ;
36311: LD_ADDR_VAR 0 2
36315: PUSH
36316: EMPTY
36317: ST_TO_ADDR
// for i := array downto 1 do
36318: LD_ADDR_VAR 0 3
36322: PUSH
36323: DOUBLE
36324: LD_VAR 0 1
36328: INC
36329: ST_TO_ADDR
36330: LD_INT 1
36332: PUSH
36333: FOR_DOWNTO
36334: IFFALSE 36364
// result := Join ( result , array [ i ] ) ;
36336: LD_ADDR_VAR 0 2
36340: PUSH
36341: LD_VAR 0 2
36345: PPUSH
36346: LD_VAR 0 1
36350: PUSH
36351: LD_VAR 0 3
36355: ARRAY
36356: PPUSH
36357: CALL 41218 0 2
36361: ST_TO_ADDR
36362: GO 36333
36364: POP
36365: POP
// end ;
36366: LD_VAR 0 2
36370: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
36371: LD_INT 0
36373: PPUSH
36374: PPUSH
36375: PPUSH
36376: PPUSH
36377: PPUSH
36378: PPUSH
// if not unit or not hexes then
36379: LD_VAR 0 1
36383: NOT
36384: IFTRUE 36393
36386: PUSH
36387: LD_VAR 0 2
36391: NOT
36392: OR
36393: IFFALSE 36397
// exit ;
36395: GO 36520
// dist := 9999 ;
36397: LD_ADDR_VAR 0 5
36401: PUSH
36402: LD_INT 9999
36404: ST_TO_ADDR
// for i = 1 to hexes do
36405: LD_ADDR_VAR 0 4
36409: PUSH
36410: DOUBLE
36411: LD_INT 1
36413: DEC
36414: ST_TO_ADDR
36415: LD_VAR 0 2
36419: PUSH
36420: FOR_TO
36421: IFFALSE 36508
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36423: LD_ADDR_VAR 0 6
36427: PUSH
36428: LD_VAR 0 1
36432: PPUSH
36433: LD_VAR 0 2
36437: PUSH
36438: LD_VAR 0 4
36442: ARRAY
36443: PUSH
36444: LD_INT 1
36446: ARRAY
36447: PPUSH
36448: LD_VAR 0 2
36452: PUSH
36453: LD_VAR 0 4
36457: ARRAY
36458: PUSH
36459: LD_INT 2
36461: ARRAY
36462: PPUSH
36463: CALL_OW 297
36467: ST_TO_ADDR
// if tdist < dist then
36468: LD_VAR 0 6
36472: PUSH
36473: LD_VAR 0 5
36477: LESS
36478: IFFALSE 36506
// begin hex := hexes [ i ] ;
36480: LD_ADDR_VAR 0 8
36484: PUSH
36485: LD_VAR 0 2
36489: PUSH
36490: LD_VAR 0 4
36494: ARRAY
36495: ST_TO_ADDR
// dist := tdist ;
36496: LD_ADDR_VAR 0 5
36500: PUSH
36501: LD_VAR 0 6
36505: ST_TO_ADDR
// end ; end ;
36506: GO 36420
36508: POP
36509: POP
// result := hex ;
36510: LD_ADDR_VAR 0 3
36514: PUSH
36515: LD_VAR 0 8
36519: ST_TO_ADDR
// end ;
36520: LD_VAR 0 3
36524: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
36525: LD_INT 0
36527: PPUSH
36528: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
36529: LD_VAR 0 1
36533: NOT
36534: IFTRUE 36573
36536: PUSH
36537: LD_VAR 0 1
36541: PUSH
36542: LD_INT 21
36544: PUSH
36545: LD_INT 2
36547: PUSH
36548: EMPTY
36549: LIST
36550: LIST
36551: PUSH
36552: LD_INT 23
36554: PUSH
36555: LD_INT 2
36557: PUSH
36558: EMPTY
36559: LIST
36560: LIST
36561: PUSH
36562: EMPTY
36563: LIST
36564: LIST
36565: PPUSH
36566: CALL_OW 69
36570: IN
36571: NOT
36572: OR
36573: IFFALSE 36577
// exit ;
36575: GO 36624
// for i = 1 to 3 do
36577: LD_ADDR_VAR 0 3
36581: PUSH
36582: DOUBLE
36583: LD_INT 1
36585: DEC
36586: ST_TO_ADDR
36587: LD_INT 3
36589: PUSH
36590: FOR_TO
36591: IFFALSE 36622
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
36593: LD_VAR 0 1
36597: PPUSH
36598: CALL_OW 250
36602: PPUSH
36603: LD_VAR 0 1
36607: PPUSH
36608: CALL_OW 251
36612: PPUSH
36613: LD_INT 1
36615: PPUSH
36616: CALL_OW 453
36620: GO 36590
36622: POP
36623: POP
// end ;
36624: LD_VAR 0 2
36628: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
36629: LD_INT 0
36631: PPUSH
36632: PPUSH
36633: PPUSH
36634: PPUSH
36635: PPUSH
36636: PPUSH
// if not unit or not enemy_unit then
36637: LD_VAR 0 1
36641: NOT
36642: IFTRUE 36651
36644: PUSH
36645: LD_VAR 0 2
36649: NOT
36650: OR
36651: IFFALSE 36655
// exit ;
36653: GO 37136
// if GetLives ( i ) < 250 then
36655: LD_VAR 0 4
36659: PPUSH
36660: CALL_OW 256
36664: PUSH
36665: LD_INT 250
36667: LESS
36668: IFFALSE 36681
// begin ComAutodestruct ( i ) ;
36670: LD_VAR 0 4
36674: PPUSH
36675: CALL 36525 0 1
// exit ;
36679: GO 37136
// end ; x := GetX ( enemy_unit ) ;
36681: LD_ADDR_VAR 0 7
36685: PUSH
36686: LD_VAR 0 2
36690: PPUSH
36691: CALL_OW 250
36695: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
36696: LD_ADDR_VAR 0 8
36700: PUSH
36701: LD_VAR 0 2
36705: PPUSH
36706: CALL_OW 251
36710: ST_TO_ADDR
// if not x or not y then
36711: LD_VAR 0 7
36715: NOT
36716: IFTRUE 36725
36718: PUSH
36719: LD_VAR 0 8
36723: NOT
36724: OR
36725: IFFALSE 36729
// exit ;
36727: GO 37136
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
36729: LD_ADDR_VAR 0 6
36733: PUSH
36734: LD_VAR 0 7
36738: PPUSH
36739: LD_INT 0
36741: PPUSH
36742: LD_INT 4
36744: PPUSH
36745: CALL_OW 272
36749: PUSH
36750: LD_VAR 0 8
36754: PPUSH
36755: LD_INT 0
36757: PPUSH
36758: LD_INT 4
36760: PPUSH
36761: CALL_OW 273
36765: PUSH
36766: EMPTY
36767: LIST
36768: LIST
36769: PUSH
36770: LD_VAR 0 7
36774: PPUSH
36775: LD_INT 1
36777: PPUSH
36778: LD_INT 4
36780: PPUSH
36781: CALL_OW 272
36785: PUSH
36786: LD_VAR 0 8
36790: PPUSH
36791: LD_INT 1
36793: PPUSH
36794: LD_INT 4
36796: PPUSH
36797: CALL_OW 273
36801: PUSH
36802: EMPTY
36803: LIST
36804: LIST
36805: PUSH
36806: LD_VAR 0 7
36810: PPUSH
36811: LD_INT 2
36813: PPUSH
36814: LD_INT 4
36816: PPUSH
36817: CALL_OW 272
36821: PUSH
36822: LD_VAR 0 8
36826: PPUSH
36827: LD_INT 2
36829: PPUSH
36830: LD_INT 4
36832: PPUSH
36833: CALL_OW 273
36837: PUSH
36838: EMPTY
36839: LIST
36840: LIST
36841: PUSH
36842: LD_VAR 0 7
36846: PPUSH
36847: LD_INT 3
36849: PPUSH
36850: LD_INT 4
36852: PPUSH
36853: CALL_OW 272
36857: PUSH
36858: LD_VAR 0 8
36862: PPUSH
36863: LD_INT 3
36865: PPUSH
36866: LD_INT 4
36868: PPUSH
36869: CALL_OW 273
36873: PUSH
36874: EMPTY
36875: LIST
36876: LIST
36877: PUSH
36878: LD_VAR 0 7
36882: PPUSH
36883: LD_INT 4
36885: PPUSH
36886: LD_INT 4
36888: PPUSH
36889: CALL_OW 272
36893: PUSH
36894: LD_VAR 0 8
36898: PPUSH
36899: LD_INT 4
36901: PPUSH
36902: LD_INT 4
36904: PPUSH
36905: CALL_OW 273
36909: PUSH
36910: EMPTY
36911: LIST
36912: LIST
36913: PUSH
36914: LD_VAR 0 7
36918: PPUSH
36919: LD_INT 5
36921: PPUSH
36922: LD_INT 4
36924: PPUSH
36925: CALL_OW 272
36929: PUSH
36930: LD_VAR 0 8
36934: PPUSH
36935: LD_INT 5
36937: PPUSH
36938: LD_INT 4
36940: PPUSH
36941: CALL_OW 273
36945: PUSH
36946: EMPTY
36947: LIST
36948: LIST
36949: PUSH
36950: EMPTY
36951: LIST
36952: LIST
36953: LIST
36954: LIST
36955: LIST
36956: LIST
36957: ST_TO_ADDR
// for i = tmp downto 1 do
36958: LD_ADDR_VAR 0 4
36962: PUSH
36963: DOUBLE
36964: LD_VAR 0 6
36968: INC
36969: ST_TO_ADDR
36970: LD_INT 1
36972: PUSH
36973: FOR_DOWNTO
36974: IFFALSE 37077
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
36976: LD_VAR 0 6
36980: PUSH
36981: LD_VAR 0 4
36985: ARRAY
36986: PUSH
36987: LD_INT 1
36989: ARRAY
36990: PPUSH
36991: LD_VAR 0 6
36995: PUSH
36996: LD_VAR 0 4
37000: ARRAY
37001: PUSH
37002: LD_INT 2
37004: ARRAY
37005: PPUSH
37006: CALL_OW 488
37010: NOT
37011: IFTRUE 37053
37013: PUSH
37014: LD_VAR 0 6
37018: PUSH
37019: LD_VAR 0 4
37023: ARRAY
37024: PUSH
37025: LD_INT 1
37027: ARRAY
37028: PPUSH
37029: LD_VAR 0 6
37033: PUSH
37034: LD_VAR 0 4
37038: ARRAY
37039: PUSH
37040: LD_INT 2
37042: ARRAY
37043: PPUSH
37044: CALL_OW 428
37048: PUSH
37049: LD_INT 0
37051: NONEQUAL
37052: OR
37053: IFFALSE 37075
// tmp := Delete ( tmp , i ) ;
37055: LD_ADDR_VAR 0 6
37059: PUSH
37060: LD_VAR 0 6
37064: PPUSH
37065: LD_VAR 0 4
37069: PPUSH
37070: CALL_OW 3
37074: ST_TO_ADDR
37075: GO 36973
37077: POP
37078: POP
// j := GetClosestHex ( unit , tmp ) ;
37079: LD_ADDR_VAR 0 5
37083: PUSH
37084: LD_VAR 0 1
37088: PPUSH
37089: LD_VAR 0 6
37093: PPUSH
37094: CALL 36371 0 2
37098: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
37099: LD_VAR 0 1
37103: PPUSH
37104: LD_VAR 0 5
37108: PUSH
37109: LD_INT 1
37111: ARRAY
37112: PPUSH
37113: LD_VAR 0 5
37117: PUSH
37118: LD_INT 2
37120: ARRAY
37121: PPUSH
37122: CALL_OW 111
// result := j ;
37126: LD_ADDR_VAR 0 3
37130: PUSH
37131: LD_VAR 0 5
37135: ST_TO_ADDR
// end ;
37136: LD_VAR 0 3
37140: RET
// export function PrepareApemanSoldier ( ) ; begin
37141: LD_INT 0
37143: PPUSH
// uc_nation := 0 ;
37144: LD_ADDR_OWVAR 21
37148: PUSH
37149: LD_INT 0
37151: ST_TO_ADDR
// hc_sex := sex_male ;
37152: LD_ADDR_OWVAR 27
37156: PUSH
37157: LD_INT 1
37159: ST_TO_ADDR
// hc_name :=  ;
37160: LD_ADDR_OWVAR 26
37164: PUSH
37165: LD_STRING 
37167: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
37168: LD_ADDR_OWVAR 28
37172: PUSH
37173: LD_INT 15
37175: ST_TO_ADDR
// hc_gallery :=  ;
37176: LD_ADDR_OWVAR 33
37180: PUSH
37181: LD_STRING 
37183: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37184: LD_ADDR_OWVAR 31
37188: PUSH
37189: LD_INT 0
37191: PPUSH
37192: LD_INT 3
37194: PPUSH
37195: CALL_OW 12
37199: PUSH
37200: LD_INT 0
37202: PPUSH
37203: LD_INT 3
37205: PPUSH
37206: CALL_OW 12
37210: PUSH
37211: LD_INT 0
37213: PUSH
37214: LD_INT 0
37216: PUSH
37217: EMPTY
37218: LIST
37219: LIST
37220: LIST
37221: LIST
37222: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
37223: LD_ADDR_OWVAR 29
37227: PUSH
37228: LD_INT 10
37230: PUSH
37231: LD_INT 12
37233: PUSH
37234: EMPTY
37235: LIST
37236: LIST
37237: ST_TO_ADDR
// end ;
37238: LD_VAR 0 1
37242: RET
// export function PrepareApemanEngineer ( ) ; begin
37243: LD_INT 0
37245: PPUSH
// uc_nation := 0 ;
37246: LD_ADDR_OWVAR 21
37250: PUSH
37251: LD_INT 0
37253: ST_TO_ADDR
// hc_sex := sex_male ;
37254: LD_ADDR_OWVAR 27
37258: PUSH
37259: LD_INT 1
37261: ST_TO_ADDR
// hc_name :=  ;
37262: LD_ADDR_OWVAR 26
37266: PUSH
37267: LD_STRING 
37269: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
37270: LD_ADDR_OWVAR 28
37274: PUSH
37275: LD_INT 16
37277: ST_TO_ADDR
// hc_gallery :=  ;
37278: LD_ADDR_OWVAR 33
37282: PUSH
37283: LD_STRING 
37285: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37286: LD_ADDR_OWVAR 31
37290: PUSH
37291: LD_INT 0
37293: PPUSH
37294: LD_INT 3
37296: PPUSH
37297: CALL_OW 12
37301: PUSH
37302: LD_INT 0
37304: PPUSH
37305: LD_INT 3
37307: PPUSH
37308: CALL_OW 12
37312: PUSH
37313: LD_INT 0
37315: PUSH
37316: LD_INT 0
37318: PUSH
37319: EMPTY
37320: LIST
37321: LIST
37322: LIST
37323: LIST
37324: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
37325: LD_ADDR_OWVAR 29
37329: PUSH
37330: LD_INT 10
37332: PUSH
37333: LD_INT 12
37335: PUSH
37336: EMPTY
37337: LIST
37338: LIST
37339: ST_TO_ADDR
// end ;
37340: LD_VAR 0 1
37344: RET
// export function PrepareApeman ( agressivity ) ; begin
37345: LD_INT 0
37347: PPUSH
// uc_side := 0 ;
37348: LD_ADDR_OWVAR 20
37352: PUSH
37353: LD_INT 0
37355: ST_TO_ADDR
// uc_nation := 0 ;
37356: LD_ADDR_OWVAR 21
37360: PUSH
37361: LD_INT 0
37363: ST_TO_ADDR
// hc_sex := sex_male ;
37364: LD_ADDR_OWVAR 27
37368: PUSH
37369: LD_INT 1
37371: ST_TO_ADDR
// hc_class := class_apeman ;
37372: LD_ADDR_OWVAR 28
37376: PUSH
37377: LD_INT 12
37379: ST_TO_ADDR
// hc_gallery :=  ;
37380: LD_ADDR_OWVAR 33
37384: PUSH
37385: LD_STRING 
37387: ST_TO_ADDR
// hc_name :=  ;
37388: LD_ADDR_OWVAR 26
37392: PUSH
37393: LD_STRING 
37395: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
37396: LD_ADDR_OWVAR 29
37400: PUSH
37401: LD_INT 10
37403: PUSH
37404: LD_INT 12
37406: PUSH
37407: EMPTY
37408: LIST
37409: LIST
37410: ST_TO_ADDR
// if agressivity = 0 then
37411: LD_VAR 0 1
37415: PUSH
37416: LD_INT 0
37418: EQUAL
37419: IFFALSE 37431
// hc_agressivity := 0 else
37421: LD_ADDR_OWVAR 35
37425: PUSH
37426: LD_INT 0
37428: ST_TO_ADDR
37429: GO 37452
// hc_agressivity := rand ( - agressivity , agressivity ) ;
37431: LD_ADDR_OWVAR 35
37435: PUSH
37436: LD_VAR 0 1
37440: NEG
37441: PPUSH
37442: LD_VAR 0 1
37446: PPUSH
37447: CALL_OW 12
37451: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37452: LD_ADDR_OWVAR 31
37456: PUSH
37457: LD_INT 0
37459: PPUSH
37460: LD_INT 3
37462: PPUSH
37463: CALL_OW 12
37467: PUSH
37468: LD_INT 0
37470: PPUSH
37471: LD_INT 3
37473: PPUSH
37474: CALL_OW 12
37478: PUSH
37479: LD_INT 0
37481: PUSH
37482: LD_INT 0
37484: PUSH
37485: EMPTY
37486: LIST
37487: LIST
37488: LIST
37489: LIST
37490: ST_TO_ADDR
// end ;
37491: LD_VAR 0 2
37495: RET
// export function PrepareTiger ( agressivity ) ; begin
37496: LD_INT 0
37498: PPUSH
// uc_side := 0 ;
37499: LD_ADDR_OWVAR 20
37503: PUSH
37504: LD_INT 0
37506: ST_TO_ADDR
// uc_nation := 0 ;
37507: LD_ADDR_OWVAR 21
37511: PUSH
37512: LD_INT 0
37514: ST_TO_ADDR
// InitHc ;
37515: CALL_OW 19
// hc_class := class_tiger ;
37519: LD_ADDR_OWVAR 28
37523: PUSH
37524: LD_INT 14
37526: ST_TO_ADDR
// hc_gallery :=  ;
37527: LD_ADDR_OWVAR 33
37531: PUSH
37532: LD_STRING 
37534: ST_TO_ADDR
// hc_name :=  ;
37535: LD_ADDR_OWVAR 26
37539: PUSH
37540: LD_STRING 
37542: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
37543: LD_ADDR_OWVAR 35
37547: PUSH
37548: LD_VAR 0 1
37552: NEG
37553: PPUSH
37554: LD_VAR 0 1
37558: PPUSH
37559: CALL_OW 12
37563: ST_TO_ADDR
// end ;
37564: LD_VAR 0 2
37568: RET
// export function PrepareEnchidna ( ) ; begin
37569: LD_INT 0
37571: PPUSH
// uc_side := 0 ;
37572: LD_ADDR_OWVAR 20
37576: PUSH
37577: LD_INT 0
37579: ST_TO_ADDR
// uc_nation := 0 ;
37580: LD_ADDR_OWVAR 21
37584: PUSH
37585: LD_INT 0
37587: ST_TO_ADDR
// InitHc ;
37588: CALL_OW 19
// hc_class := class_baggie ;
37592: LD_ADDR_OWVAR 28
37596: PUSH
37597: LD_INT 13
37599: ST_TO_ADDR
// hc_gallery :=  ;
37600: LD_ADDR_OWVAR 33
37604: PUSH
37605: LD_STRING 
37607: ST_TO_ADDR
// hc_name :=  ;
37608: LD_ADDR_OWVAR 26
37612: PUSH
37613: LD_STRING 
37615: ST_TO_ADDR
// end ;
37616: LD_VAR 0 1
37620: RET
// export function PrepareFrog ( ) ; begin
37621: LD_INT 0
37623: PPUSH
// uc_side := 0 ;
37624: LD_ADDR_OWVAR 20
37628: PUSH
37629: LD_INT 0
37631: ST_TO_ADDR
// uc_nation := 0 ;
37632: LD_ADDR_OWVAR 21
37636: PUSH
37637: LD_INT 0
37639: ST_TO_ADDR
// InitHc ;
37640: CALL_OW 19
// hc_class := class_frog ;
37644: LD_ADDR_OWVAR 28
37648: PUSH
37649: LD_INT 19
37651: ST_TO_ADDR
// hc_gallery :=  ;
37652: LD_ADDR_OWVAR 33
37656: PUSH
37657: LD_STRING 
37659: ST_TO_ADDR
// hc_name :=  ;
37660: LD_ADDR_OWVAR 26
37664: PUSH
37665: LD_STRING 
37667: ST_TO_ADDR
// end ;
37668: LD_VAR 0 1
37672: RET
// export function PrepareFish ( ) ; begin
37673: LD_INT 0
37675: PPUSH
// uc_side := 0 ;
37676: LD_ADDR_OWVAR 20
37680: PUSH
37681: LD_INT 0
37683: ST_TO_ADDR
// uc_nation := 0 ;
37684: LD_ADDR_OWVAR 21
37688: PUSH
37689: LD_INT 0
37691: ST_TO_ADDR
// InitHc ;
37692: CALL_OW 19
// hc_class := class_fish ;
37696: LD_ADDR_OWVAR 28
37700: PUSH
37701: LD_INT 20
37703: ST_TO_ADDR
// hc_gallery :=  ;
37704: LD_ADDR_OWVAR 33
37708: PUSH
37709: LD_STRING 
37711: ST_TO_ADDR
// hc_name :=  ;
37712: LD_ADDR_OWVAR 26
37716: PUSH
37717: LD_STRING 
37719: ST_TO_ADDR
// end ;
37720: LD_VAR 0 1
37724: RET
// export function PrepareBird ( ) ; begin
37725: LD_INT 0
37727: PPUSH
// uc_side := 0 ;
37728: LD_ADDR_OWVAR 20
37732: PUSH
37733: LD_INT 0
37735: ST_TO_ADDR
// uc_nation := 0 ;
37736: LD_ADDR_OWVAR 21
37740: PUSH
37741: LD_INT 0
37743: ST_TO_ADDR
// InitHc ;
37744: CALL_OW 19
// hc_class := class_phororhacos ;
37748: LD_ADDR_OWVAR 28
37752: PUSH
37753: LD_INT 18
37755: ST_TO_ADDR
// hc_gallery :=  ;
37756: LD_ADDR_OWVAR 33
37760: PUSH
37761: LD_STRING 
37763: ST_TO_ADDR
// hc_name :=  ;
37764: LD_ADDR_OWVAR 26
37768: PUSH
37769: LD_STRING 
37771: ST_TO_ADDR
// end ;
37772: LD_VAR 0 1
37776: RET
// export function PrepareHorse ( ) ; begin
37777: LD_INT 0
37779: PPUSH
// uc_side := 0 ;
37780: LD_ADDR_OWVAR 20
37784: PUSH
37785: LD_INT 0
37787: ST_TO_ADDR
// uc_nation := 0 ;
37788: LD_ADDR_OWVAR 21
37792: PUSH
37793: LD_INT 0
37795: ST_TO_ADDR
// InitHc ;
37796: CALL_OW 19
// hc_class := class_horse ;
37800: LD_ADDR_OWVAR 28
37804: PUSH
37805: LD_INT 21
37807: ST_TO_ADDR
// hc_gallery :=  ;
37808: LD_ADDR_OWVAR 33
37812: PUSH
37813: LD_STRING 
37815: ST_TO_ADDR
// hc_name :=  ;
37816: LD_ADDR_OWVAR 26
37820: PUSH
37821: LD_STRING 
37823: ST_TO_ADDR
// end ;
37824: LD_VAR 0 1
37828: RET
// export function PrepareMastodont ( ) ; begin
37829: LD_INT 0
37831: PPUSH
// uc_side := 0 ;
37832: LD_ADDR_OWVAR 20
37836: PUSH
37837: LD_INT 0
37839: ST_TO_ADDR
// uc_nation := 0 ;
37840: LD_ADDR_OWVAR 21
37844: PUSH
37845: LD_INT 0
37847: ST_TO_ADDR
// vc_chassis := class_mastodont ;
37848: LD_ADDR_OWVAR 37
37852: PUSH
37853: LD_INT 31
37855: ST_TO_ADDR
// vc_control := control_rider ;
37856: LD_ADDR_OWVAR 38
37860: PUSH
37861: LD_INT 4
37863: ST_TO_ADDR
// end ;
37864: LD_VAR 0 1
37868: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
37869: LD_INT 0
37871: PPUSH
37872: PPUSH
37873: PPUSH
// uc_side = 0 ;
37874: LD_ADDR_OWVAR 20
37878: PUSH
37879: LD_INT 0
37881: ST_TO_ADDR
// uc_nation = 0 ;
37882: LD_ADDR_OWVAR 21
37886: PUSH
37887: LD_INT 0
37889: ST_TO_ADDR
// InitHc_All ( ) ;
37890: CALL_OW 584
// InitVc ;
37894: CALL_OW 20
// if mastodonts then
37898: LD_VAR 0 6
37902: IFFALSE 37969
// for i = 1 to mastodonts do
37904: LD_ADDR_VAR 0 11
37908: PUSH
37909: DOUBLE
37910: LD_INT 1
37912: DEC
37913: ST_TO_ADDR
37914: LD_VAR 0 6
37918: PUSH
37919: FOR_TO
37920: IFFALSE 37967
// begin vc_chassis := 31 ;
37922: LD_ADDR_OWVAR 37
37926: PUSH
37927: LD_INT 31
37929: ST_TO_ADDR
// vc_control := control_rider ;
37930: LD_ADDR_OWVAR 38
37934: PUSH
37935: LD_INT 4
37937: ST_TO_ADDR
// animal := CreateVehicle ;
37938: LD_ADDR_VAR 0 12
37942: PUSH
37943: CALL_OW 45
37947: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37948: LD_VAR 0 12
37952: PPUSH
37953: LD_VAR 0 8
37957: PPUSH
37958: LD_INT 0
37960: PPUSH
37961: CALL 40111 0 3
// end ;
37965: GO 37919
37967: POP
37968: POP
// if horses then
37969: LD_VAR 0 5
37973: IFFALSE 38040
// for i = 1 to horses do
37975: LD_ADDR_VAR 0 11
37979: PUSH
37980: DOUBLE
37981: LD_INT 1
37983: DEC
37984: ST_TO_ADDR
37985: LD_VAR 0 5
37989: PUSH
37990: FOR_TO
37991: IFFALSE 38038
// begin hc_class := 21 ;
37993: LD_ADDR_OWVAR 28
37997: PUSH
37998: LD_INT 21
38000: ST_TO_ADDR
// hc_gallery :=  ;
38001: LD_ADDR_OWVAR 33
38005: PUSH
38006: LD_STRING 
38008: ST_TO_ADDR
// animal := CreateHuman ;
38009: LD_ADDR_VAR 0 12
38013: PUSH
38014: CALL_OW 44
38018: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38019: LD_VAR 0 12
38023: PPUSH
38024: LD_VAR 0 8
38028: PPUSH
38029: LD_INT 0
38031: PPUSH
38032: CALL 40111 0 3
// end ;
38036: GO 37990
38038: POP
38039: POP
// if birds then
38040: LD_VAR 0 1
38044: IFFALSE 38111
// for i = 1 to birds do
38046: LD_ADDR_VAR 0 11
38050: PUSH
38051: DOUBLE
38052: LD_INT 1
38054: DEC
38055: ST_TO_ADDR
38056: LD_VAR 0 1
38060: PUSH
38061: FOR_TO
38062: IFFALSE 38109
// begin hc_class := 18 ;
38064: LD_ADDR_OWVAR 28
38068: PUSH
38069: LD_INT 18
38071: ST_TO_ADDR
// hc_gallery =  ;
38072: LD_ADDR_OWVAR 33
38076: PUSH
38077: LD_STRING 
38079: ST_TO_ADDR
// animal := CreateHuman ;
38080: LD_ADDR_VAR 0 12
38084: PUSH
38085: CALL_OW 44
38089: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38090: LD_VAR 0 12
38094: PPUSH
38095: LD_VAR 0 8
38099: PPUSH
38100: LD_INT 0
38102: PPUSH
38103: CALL 40111 0 3
// end ;
38107: GO 38061
38109: POP
38110: POP
// if tigers then
38111: LD_VAR 0 2
38115: IFFALSE 38199
// for i = 1 to tigers do
38117: LD_ADDR_VAR 0 11
38121: PUSH
38122: DOUBLE
38123: LD_INT 1
38125: DEC
38126: ST_TO_ADDR
38127: LD_VAR 0 2
38131: PUSH
38132: FOR_TO
38133: IFFALSE 38197
// begin hc_class = class_tiger ;
38135: LD_ADDR_OWVAR 28
38139: PUSH
38140: LD_INT 14
38142: ST_TO_ADDR
// hc_gallery =  ;
38143: LD_ADDR_OWVAR 33
38147: PUSH
38148: LD_STRING 
38150: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
38151: LD_ADDR_OWVAR 35
38155: PUSH
38156: LD_INT 7
38158: NEG
38159: PPUSH
38160: LD_INT 7
38162: PPUSH
38163: CALL_OW 12
38167: ST_TO_ADDR
// animal := CreateHuman ;
38168: LD_ADDR_VAR 0 12
38172: PUSH
38173: CALL_OW 44
38177: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38178: LD_VAR 0 12
38182: PPUSH
38183: LD_VAR 0 8
38187: PPUSH
38188: LD_INT 0
38190: PPUSH
38191: CALL 40111 0 3
// end ;
38195: GO 38132
38197: POP
38198: POP
// if apemans then
38199: LD_VAR 0 3
38203: IFFALSE 38326
// for i = 1 to apemans do
38205: LD_ADDR_VAR 0 11
38209: PUSH
38210: DOUBLE
38211: LD_INT 1
38213: DEC
38214: ST_TO_ADDR
38215: LD_VAR 0 3
38219: PUSH
38220: FOR_TO
38221: IFFALSE 38324
// begin hc_class = class_apeman ;
38223: LD_ADDR_OWVAR 28
38227: PUSH
38228: LD_INT 12
38230: ST_TO_ADDR
// hc_gallery =  ;
38231: LD_ADDR_OWVAR 33
38235: PUSH
38236: LD_STRING 
38238: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
38239: LD_ADDR_OWVAR 35
38243: PUSH
38244: LD_INT 2
38246: NEG
38247: PPUSH
38248: LD_INT 2
38250: PPUSH
38251: CALL_OW 12
38255: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
38256: LD_ADDR_OWVAR 31
38260: PUSH
38261: LD_INT 1
38263: PPUSH
38264: LD_INT 3
38266: PPUSH
38267: CALL_OW 12
38271: PUSH
38272: LD_INT 1
38274: PPUSH
38275: LD_INT 3
38277: PPUSH
38278: CALL_OW 12
38282: PUSH
38283: LD_INT 0
38285: PUSH
38286: LD_INT 0
38288: PUSH
38289: EMPTY
38290: LIST
38291: LIST
38292: LIST
38293: LIST
38294: ST_TO_ADDR
// animal := CreateHuman ;
38295: LD_ADDR_VAR 0 12
38299: PUSH
38300: CALL_OW 44
38304: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38305: LD_VAR 0 12
38309: PPUSH
38310: LD_VAR 0 8
38314: PPUSH
38315: LD_INT 0
38317: PPUSH
38318: CALL 40111 0 3
// end ;
38322: GO 38220
38324: POP
38325: POP
// if enchidnas then
38326: LD_VAR 0 4
38330: IFFALSE 38397
// for i = 1 to enchidnas do
38332: LD_ADDR_VAR 0 11
38336: PUSH
38337: DOUBLE
38338: LD_INT 1
38340: DEC
38341: ST_TO_ADDR
38342: LD_VAR 0 4
38346: PUSH
38347: FOR_TO
38348: IFFALSE 38395
// begin hc_class = 13 ;
38350: LD_ADDR_OWVAR 28
38354: PUSH
38355: LD_INT 13
38357: ST_TO_ADDR
// hc_gallery =  ;
38358: LD_ADDR_OWVAR 33
38362: PUSH
38363: LD_STRING 
38365: ST_TO_ADDR
// animal := CreateHuman ;
38366: LD_ADDR_VAR 0 12
38370: PUSH
38371: CALL_OW 44
38375: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38376: LD_VAR 0 12
38380: PPUSH
38381: LD_VAR 0 8
38385: PPUSH
38386: LD_INT 0
38388: PPUSH
38389: CALL 40111 0 3
// end ;
38393: GO 38347
38395: POP
38396: POP
// if fishes then
38397: LD_VAR 0 7
38401: IFFALSE 38468
// for i = 1 to fishes do
38403: LD_ADDR_VAR 0 11
38407: PUSH
38408: DOUBLE
38409: LD_INT 1
38411: DEC
38412: ST_TO_ADDR
38413: LD_VAR 0 7
38417: PUSH
38418: FOR_TO
38419: IFFALSE 38466
// begin hc_class = 20 ;
38421: LD_ADDR_OWVAR 28
38425: PUSH
38426: LD_INT 20
38428: ST_TO_ADDR
// hc_gallery =  ;
38429: LD_ADDR_OWVAR 33
38433: PUSH
38434: LD_STRING 
38436: ST_TO_ADDR
// animal := CreateHuman ;
38437: LD_ADDR_VAR 0 12
38441: PUSH
38442: CALL_OW 44
38446: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
38447: LD_VAR 0 12
38451: PPUSH
38452: LD_VAR 0 9
38456: PPUSH
38457: LD_INT 0
38459: PPUSH
38460: CALL 40111 0 3
// end ;
38464: GO 38418
38466: POP
38467: POP
// end ;
38468: LD_VAR 0 10
38472: RET
// export function WantHeal ( sci , unit ) ; begin
38473: LD_INT 0
38475: PPUSH
// if GetTaskList ( sci ) > 0 then
38476: LD_VAR 0 1
38480: PPUSH
38481: CALL_OW 437
38485: PUSH
38486: LD_INT 0
38488: GREATER
38489: IFFALSE 38561
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
38491: LD_VAR 0 1
38495: PPUSH
38496: CALL_OW 437
38500: PUSH
38501: LD_INT 1
38503: ARRAY
38504: PUSH
38505: LD_INT 1
38507: ARRAY
38508: PUSH
38509: LD_STRING l
38511: EQUAL
38512: IFFALSE 38539
38514: PUSH
38515: LD_VAR 0 1
38519: PPUSH
38520: CALL_OW 437
38524: PUSH
38525: LD_INT 1
38527: ARRAY
38528: PUSH
38529: LD_INT 4
38531: ARRAY
38532: PUSH
38533: LD_VAR 0 2
38537: EQUAL
38538: AND
38539: IFFALSE 38551
// result := true else
38541: LD_ADDR_VAR 0 3
38545: PUSH
38546: LD_INT 1
38548: ST_TO_ADDR
38549: GO 38559
// result := false ;
38551: LD_ADDR_VAR 0 3
38555: PUSH
38556: LD_INT 0
38558: ST_TO_ADDR
// end else
38559: GO 38569
// result := false ;
38561: LD_ADDR_VAR 0 3
38565: PUSH
38566: LD_INT 0
38568: ST_TO_ADDR
// end ;
38569: LD_VAR 0 3
38573: RET
// export function HealTarget ( sci ) ; begin
38574: LD_INT 0
38576: PPUSH
// if not sci then
38577: LD_VAR 0 1
38581: NOT
38582: IFFALSE 38586
// exit ;
38584: GO 38651
// result := 0 ;
38586: LD_ADDR_VAR 0 2
38590: PUSH
38591: LD_INT 0
38593: ST_TO_ADDR
// if GetTaskList ( sci ) then
38594: LD_VAR 0 1
38598: PPUSH
38599: CALL_OW 437
38603: IFFALSE 38651
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
38605: LD_VAR 0 1
38609: PPUSH
38610: CALL_OW 437
38614: PUSH
38615: LD_INT 1
38617: ARRAY
38618: PUSH
38619: LD_INT 1
38621: ARRAY
38622: PUSH
38623: LD_STRING l
38625: EQUAL
38626: IFFALSE 38651
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
38628: LD_ADDR_VAR 0 2
38632: PUSH
38633: LD_VAR 0 1
38637: PPUSH
38638: CALL_OW 437
38642: PUSH
38643: LD_INT 1
38645: ARRAY
38646: PUSH
38647: LD_INT 4
38649: ARRAY
38650: ST_TO_ADDR
// end ;
38651: LD_VAR 0 2
38655: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
38656: LD_INT 0
38658: PPUSH
38659: PPUSH
38660: PPUSH
38661: PPUSH
// if not base_units then
38662: LD_VAR 0 1
38666: NOT
38667: IFFALSE 38671
// exit ;
38669: GO 38758
// result := false ;
38671: LD_ADDR_VAR 0 2
38675: PUSH
38676: LD_INT 0
38678: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
38679: LD_ADDR_VAR 0 5
38683: PUSH
38684: LD_VAR 0 1
38688: PPUSH
38689: LD_INT 21
38691: PUSH
38692: LD_INT 3
38694: PUSH
38695: EMPTY
38696: LIST
38697: LIST
38698: PPUSH
38699: CALL_OW 72
38703: ST_TO_ADDR
// if not tmp then
38704: LD_VAR 0 5
38708: NOT
38709: IFFALSE 38713
// exit ;
38711: GO 38758
// for i in tmp do
38713: LD_ADDR_VAR 0 3
38717: PUSH
38718: LD_VAR 0 5
38722: PUSH
38723: FOR_IN
38724: IFFALSE 38756
// begin result := EnemyInRange ( i , 22 ) ;
38726: LD_ADDR_VAR 0 2
38730: PUSH
38731: LD_VAR 0 3
38735: PPUSH
38736: LD_INT 22
38738: PPUSH
38739: CALL 36173 0 2
38743: ST_TO_ADDR
// if result then
38744: LD_VAR 0 2
38748: IFFALSE 38754
// exit ;
38750: POP
38751: POP
38752: GO 38758
// end ;
38754: GO 38723
38756: POP
38757: POP
// end ;
38758: LD_VAR 0 2
38762: RET
// export function FilterByTag ( units , tag ) ; begin
38763: LD_INT 0
38765: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
38766: LD_ADDR_VAR 0 3
38770: PUSH
38771: LD_VAR 0 1
38775: PPUSH
38776: LD_INT 120
38778: PUSH
38779: LD_VAR 0 2
38783: PUSH
38784: EMPTY
38785: LIST
38786: LIST
38787: PPUSH
38788: CALL_OW 72
38792: ST_TO_ADDR
// end ;
38793: LD_VAR 0 3
38797: RET
// export function IsDriver ( un ) ; begin
38798: LD_INT 0
38800: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
38801: LD_ADDR_VAR 0 2
38805: PUSH
38806: LD_VAR 0 1
38810: PUSH
38811: LD_INT 55
38813: PUSH
38814: EMPTY
38815: LIST
38816: PPUSH
38817: CALL_OW 69
38821: IN
38822: ST_TO_ADDR
// end ;
38823: LD_VAR 0 2
38827: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
38828: LD_INT 0
38830: PPUSH
38831: PPUSH
// list := [ ] ;
38832: LD_ADDR_VAR 0 5
38836: PUSH
38837: EMPTY
38838: ST_TO_ADDR
// case d of 0 :
38839: LD_VAR 0 3
38843: PUSH
38844: LD_INT 0
38846: DOUBLE
38847: EQUAL
38848: IFTRUE 38852
38850: GO 38985
38852: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
38853: LD_ADDR_VAR 0 5
38857: PUSH
38858: LD_VAR 0 1
38862: PUSH
38863: LD_INT 4
38865: MINUS
38866: PUSH
38867: LD_VAR 0 2
38871: PUSH
38872: LD_INT 4
38874: MINUS
38875: PUSH
38876: LD_INT 2
38878: PUSH
38879: EMPTY
38880: LIST
38881: LIST
38882: LIST
38883: PUSH
38884: LD_VAR 0 1
38888: PUSH
38889: LD_INT 3
38891: MINUS
38892: PUSH
38893: LD_VAR 0 2
38897: PUSH
38898: LD_INT 1
38900: PUSH
38901: EMPTY
38902: LIST
38903: LIST
38904: LIST
38905: PUSH
38906: LD_VAR 0 1
38910: PUSH
38911: LD_INT 4
38913: PLUS
38914: PUSH
38915: LD_VAR 0 2
38919: PUSH
38920: LD_INT 4
38922: PUSH
38923: EMPTY
38924: LIST
38925: LIST
38926: LIST
38927: PUSH
38928: LD_VAR 0 1
38932: PUSH
38933: LD_INT 3
38935: PLUS
38936: PUSH
38937: LD_VAR 0 2
38941: PUSH
38942: LD_INT 3
38944: PLUS
38945: PUSH
38946: LD_INT 5
38948: PUSH
38949: EMPTY
38950: LIST
38951: LIST
38952: LIST
38953: PUSH
38954: LD_VAR 0 1
38958: PUSH
38959: LD_VAR 0 2
38963: PUSH
38964: LD_INT 4
38966: PLUS
38967: PUSH
38968: LD_INT 0
38970: PUSH
38971: EMPTY
38972: LIST
38973: LIST
38974: LIST
38975: PUSH
38976: EMPTY
38977: LIST
38978: LIST
38979: LIST
38980: LIST
38981: LIST
38982: ST_TO_ADDR
// end ; 1 :
38983: GO 39683
38985: LD_INT 1
38987: DOUBLE
38988: EQUAL
38989: IFTRUE 38993
38991: GO 39126
38993: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
38994: LD_ADDR_VAR 0 5
38998: PUSH
38999: LD_VAR 0 1
39003: PUSH
39004: LD_VAR 0 2
39008: PUSH
39009: LD_INT 4
39011: MINUS
39012: PUSH
39013: LD_INT 3
39015: PUSH
39016: EMPTY
39017: LIST
39018: LIST
39019: LIST
39020: PUSH
39021: LD_VAR 0 1
39025: PUSH
39026: LD_INT 3
39028: MINUS
39029: PUSH
39030: LD_VAR 0 2
39034: PUSH
39035: LD_INT 3
39037: MINUS
39038: PUSH
39039: LD_INT 2
39041: PUSH
39042: EMPTY
39043: LIST
39044: LIST
39045: LIST
39046: PUSH
39047: LD_VAR 0 1
39051: PUSH
39052: LD_INT 4
39054: MINUS
39055: PUSH
39056: LD_VAR 0 2
39060: PUSH
39061: LD_INT 1
39063: PUSH
39064: EMPTY
39065: LIST
39066: LIST
39067: LIST
39068: PUSH
39069: LD_VAR 0 1
39073: PUSH
39074: LD_VAR 0 2
39078: PUSH
39079: LD_INT 3
39081: PLUS
39082: PUSH
39083: LD_INT 0
39085: PUSH
39086: EMPTY
39087: LIST
39088: LIST
39089: LIST
39090: PUSH
39091: LD_VAR 0 1
39095: PUSH
39096: LD_INT 4
39098: PLUS
39099: PUSH
39100: LD_VAR 0 2
39104: PUSH
39105: LD_INT 4
39107: PLUS
39108: PUSH
39109: LD_INT 5
39111: PUSH
39112: EMPTY
39113: LIST
39114: LIST
39115: LIST
39116: PUSH
39117: EMPTY
39118: LIST
39119: LIST
39120: LIST
39121: LIST
39122: LIST
39123: ST_TO_ADDR
// end ; 2 :
39124: GO 39683
39126: LD_INT 2
39128: DOUBLE
39129: EQUAL
39130: IFTRUE 39134
39132: GO 39263
39134: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
39135: LD_ADDR_VAR 0 5
39139: PUSH
39140: LD_VAR 0 1
39144: PUSH
39145: LD_VAR 0 2
39149: PUSH
39150: LD_INT 3
39152: MINUS
39153: PUSH
39154: LD_INT 3
39156: PUSH
39157: EMPTY
39158: LIST
39159: LIST
39160: LIST
39161: PUSH
39162: LD_VAR 0 1
39166: PUSH
39167: LD_INT 4
39169: PLUS
39170: PUSH
39171: LD_VAR 0 2
39175: PUSH
39176: LD_INT 4
39178: PUSH
39179: EMPTY
39180: LIST
39181: LIST
39182: LIST
39183: PUSH
39184: LD_VAR 0 1
39188: PUSH
39189: LD_VAR 0 2
39193: PUSH
39194: LD_INT 4
39196: PLUS
39197: PUSH
39198: LD_INT 0
39200: PUSH
39201: EMPTY
39202: LIST
39203: LIST
39204: LIST
39205: PUSH
39206: LD_VAR 0 1
39210: PUSH
39211: LD_INT 3
39213: MINUS
39214: PUSH
39215: LD_VAR 0 2
39219: PUSH
39220: LD_INT 1
39222: PUSH
39223: EMPTY
39224: LIST
39225: LIST
39226: LIST
39227: PUSH
39228: LD_VAR 0 1
39232: PUSH
39233: LD_INT 4
39235: MINUS
39236: PUSH
39237: LD_VAR 0 2
39241: PUSH
39242: LD_INT 4
39244: MINUS
39245: PUSH
39246: LD_INT 2
39248: PUSH
39249: EMPTY
39250: LIST
39251: LIST
39252: LIST
39253: PUSH
39254: EMPTY
39255: LIST
39256: LIST
39257: LIST
39258: LIST
39259: LIST
39260: ST_TO_ADDR
// end ; 3 :
39261: GO 39683
39263: LD_INT 3
39265: DOUBLE
39266: EQUAL
39267: IFTRUE 39271
39269: GO 39404
39271: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
39272: LD_ADDR_VAR 0 5
39276: PUSH
39277: LD_VAR 0 1
39281: PUSH
39282: LD_INT 3
39284: PLUS
39285: PUSH
39286: LD_VAR 0 2
39290: PUSH
39291: LD_INT 4
39293: PUSH
39294: EMPTY
39295: LIST
39296: LIST
39297: LIST
39298: PUSH
39299: LD_VAR 0 1
39303: PUSH
39304: LD_INT 4
39306: PLUS
39307: PUSH
39308: LD_VAR 0 2
39312: PUSH
39313: LD_INT 4
39315: PLUS
39316: PUSH
39317: LD_INT 5
39319: PUSH
39320: EMPTY
39321: LIST
39322: LIST
39323: LIST
39324: PUSH
39325: LD_VAR 0 1
39329: PUSH
39330: LD_INT 4
39332: MINUS
39333: PUSH
39334: LD_VAR 0 2
39338: PUSH
39339: LD_INT 1
39341: PUSH
39342: EMPTY
39343: LIST
39344: LIST
39345: LIST
39346: PUSH
39347: LD_VAR 0 1
39351: PUSH
39352: LD_VAR 0 2
39356: PUSH
39357: LD_INT 4
39359: MINUS
39360: PUSH
39361: LD_INT 3
39363: PUSH
39364: EMPTY
39365: LIST
39366: LIST
39367: LIST
39368: PUSH
39369: LD_VAR 0 1
39373: PUSH
39374: LD_INT 3
39376: MINUS
39377: PUSH
39378: LD_VAR 0 2
39382: PUSH
39383: LD_INT 3
39385: MINUS
39386: PUSH
39387: LD_INT 2
39389: PUSH
39390: EMPTY
39391: LIST
39392: LIST
39393: LIST
39394: PUSH
39395: EMPTY
39396: LIST
39397: LIST
39398: LIST
39399: LIST
39400: LIST
39401: ST_TO_ADDR
// end ; 4 :
39402: GO 39683
39404: LD_INT 4
39406: DOUBLE
39407: EQUAL
39408: IFTRUE 39412
39410: GO 39545
39412: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
39413: LD_ADDR_VAR 0 5
39417: PUSH
39418: LD_VAR 0 1
39422: PUSH
39423: LD_VAR 0 2
39427: PUSH
39428: LD_INT 4
39430: PLUS
39431: PUSH
39432: LD_INT 0
39434: PUSH
39435: EMPTY
39436: LIST
39437: LIST
39438: LIST
39439: PUSH
39440: LD_VAR 0 1
39444: PUSH
39445: LD_INT 3
39447: PLUS
39448: PUSH
39449: LD_VAR 0 2
39453: PUSH
39454: LD_INT 3
39456: PLUS
39457: PUSH
39458: LD_INT 5
39460: PUSH
39461: EMPTY
39462: LIST
39463: LIST
39464: LIST
39465: PUSH
39466: LD_VAR 0 1
39470: PUSH
39471: LD_INT 4
39473: PLUS
39474: PUSH
39475: LD_VAR 0 2
39479: PUSH
39480: LD_INT 4
39482: PUSH
39483: EMPTY
39484: LIST
39485: LIST
39486: LIST
39487: PUSH
39488: LD_VAR 0 1
39492: PUSH
39493: LD_VAR 0 2
39497: PUSH
39498: LD_INT 3
39500: MINUS
39501: PUSH
39502: LD_INT 3
39504: PUSH
39505: EMPTY
39506: LIST
39507: LIST
39508: LIST
39509: PUSH
39510: LD_VAR 0 1
39514: PUSH
39515: LD_INT 4
39517: MINUS
39518: PUSH
39519: LD_VAR 0 2
39523: PUSH
39524: LD_INT 4
39526: MINUS
39527: PUSH
39528: LD_INT 2
39530: PUSH
39531: EMPTY
39532: LIST
39533: LIST
39534: LIST
39535: PUSH
39536: EMPTY
39537: LIST
39538: LIST
39539: LIST
39540: LIST
39541: LIST
39542: ST_TO_ADDR
// end ; 5 :
39543: GO 39683
39545: LD_INT 5
39547: DOUBLE
39548: EQUAL
39549: IFTRUE 39553
39551: GO 39682
39553: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
39554: LD_ADDR_VAR 0 5
39558: PUSH
39559: LD_VAR 0 1
39563: PUSH
39564: LD_INT 4
39566: MINUS
39567: PUSH
39568: LD_VAR 0 2
39572: PUSH
39573: LD_INT 1
39575: PUSH
39576: EMPTY
39577: LIST
39578: LIST
39579: LIST
39580: PUSH
39581: LD_VAR 0 1
39585: PUSH
39586: LD_VAR 0 2
39590: PUSH
39591: LD_INT 4
39593: MINUS
39594: PUSH
39595: LD_INT 3
39597: PUSH
39598: EMPTY
39599: LIST
39600: LIST
39601: LIST
39602: PUSH
39603: LD_VAR 0 1
39607: PUSH
39608: LD_INT 4
39610: PLUS
39611: PUSH
39612: LD_VAR 0 2
39616: PUSH
39617: LD_INT 4
39619: PLUS
39620: PUSH
39621: LD_INT 5
39623: PUSH
39624: EMPTY
39625: LIST
39626: LIST
39627: LIST
39628: PUSH
39629: LD_VAR 0 1
39633: PUSH
39634: LD_INT 3
39636: PLUS
39637: PUSH
39638: LD_VAR 0 2
39642: PUSH
39643: LD_INT 4
39645: PUSH
39646: EMPTY
39647: LIST
39648: LIST
39649: LIST
39650: PUSH
39651: LD_VAR 0 1
39655: PUSH
39656: LD_VAR 0 2
39660: PUSH
39661: LD_INT 3
39663: PLUS
39664: PUSH
39665: LD_INT 0
39667: PUSH
39668: EMPTY
39669: LIST
39670: LIST
39671: LIST
39672: PUSH
39673: EMPTY
39674: LIST
39675: LIST
39676: LIST
39677: LIST
39678: LIST
39679: ST_TO_ADDR
// end ; end ;
39680: GO 39683
39682: POP
// result := list ;
39683: LD_ADDR_VAR 0 4
39687: PUSH
39688: LD_VAR 0 5
39692: ST_TO_ADDR
// end ;
39693: LD_VAR 0 4
39697: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
39698: LD_INT 0
39700: PPUSH
39701: PPUSH
39702: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
39703: LD_VAR 0 1
39707: NOT
39708: IFTRUE 39736
39710: PUSH
39711: LD_VAR 0 2
39715: PUSH
39716: LD_INT 1
39718: PUSH
39719: LD_INT 2
39721: PUSH
39722: LD_INT 3
39724: PUSH
39725: LD_INT 4
39727: PUSH
39728: EMPTY
39729: LIST
39730: LIST
39731: LIST
39732: LIST
39733: IN
39734: NOT
39735: OR
39736: IFFALSE 39740
// exit ;
39738: GO 39823
// tmp := [ ] ;
39740: LD_ADDR_VAR 0 5
39744: PUSH
39745: EMPTY
39746: ST_TO_ADDR
// for i in units do
39747: LD_ADDR_VAR 0 4
39751: PUSH
39752: LD_VAR 0 1
39756: PUSH
39757: FOR_IN
39758: IFFALSE 39792
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
39760: LD_ADDR_VAR 0 5
39764: PUSH
39765: LD_VAR 0 5
39769: PPUSH
39770: LD_VAR 0 4
39774: PPUSH
39775: LD_VAR 0 2
39779: PPUSH
39780: CALL_OW 259
39784: PPUSH
39785: CALL 41218 0 2
39789: ST_TO_ADDR
39790: GO 39757
39792: POP
39793: POP
// if not tmp then
39794: LD_VAR 0 5
39798: NOT
39799: IFFALSE 39803
// exit ;
39801: GO 39823
// result := SortListByListDesc ( units , tmp ) ;
39803: LD_ADDR_VAR 0 3
39807: PUSH
39808: LD_VAR 0 1
39812: PPUSH
39813: LD_VAR 0 5
39817: PPUSH
39818: CALL_OW 77
39822: ST_TO_ADDR
// end ;
39823: LD_VAR 0 3
39827: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
39828: LD_INT 0
39830: PPUSH
39831: PPUSH
39832: PPUSH
// result := false ;
39833: LD_ADDR_VAR 0 3
39837: PUSH
39838: LD_INT 0
39840: ST_TO_ADDR
// if not building then
39841: LD_VAR 0 2
39845: NOT
39846: IFFALSE 39850
// exit ;
39848: GO 39994
// x := GetX ( building ) ;
39850: LD_ADDR_VAR 0 4
39854: PUSH
39855: LD_VAR 0 2
39859: PPUSH
39860: CALL_OW 250
39864: ST_TO_ADDR
// y := GetY ( building ) ;
39865: LD_ADDR_VAR 0 5
39869: PUSH
39870: LD_VAR 0 2
39874: PPUSH
39875: CALL_OW 251
39879: ST_TO_ADDR
// if not x or not y then
39880: LD_VAR 0 4
39884: NOT
39885: IFTRUE 39894
39887: PUSH
39888: LD_VAR 0 5
39892: NOT
39893: OR
39894: IFFALSE 39898
// exit ;
39896: GO 39994
// if GetTaskList ( unit ) then
39898: LD_VAR 0 1
39902: PPUSH
39903: CALL_OW 437
39907: IFFALSE 39994
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39909: LD_STRING e
39911: PUSH
39912: LD_VAR 0 1
39916: PPUSH
39917: CALL_OW 437
39921: PUSH
39922: LD_INT 1
39924: ARRAY
39925: PUSH
39926: LD_INT 1
39928: ARRAY
39929: EQUAL
39930: IFFALSE 39957
39932: PUSH
39933: LD_VAR 0 4
39937: PUSH
39938: LD_VAR 0 1
39942: PPUSH
39943: CALL_OW 437
39947: PUSH
39948: LD_INT 1
39950: ARRAY
39951: PUSH
39952: LD_INT 2
39954: ARRAY
39955: EQUAL
39956: AND
39957: IFFALSE 39984
39959: PUSH
39960: LD_VAR 0 5
39964: PUSH
39965: LD_VAR 0 1
39969: PPUSH
39970: CALL_OW 437
39974: PUSH
39975: LD_INT 1
39977: ARRAY
39978: PUSH
39979: LD_INT 3
39981: ARRAY
39982: EQUAL
39983: AND
39984: IFFALSE 39994
// result := true end ;
39986: LD_ADDR_VAR 0 3
39990: PUSH
39991: LD_INT 1
39993: ST_TO_ADDR
// end ;
39994: LD_VAR 0 3
39998: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
39999: LD_INT 0
40001: PPUSH
// result := false ;
40002: LD_ADDR_VAR 0 4
40006: PUSH
40007: LD_INT 0
40009: ST_TO_ADDR
// if GetTaskList ( unit ) then
40010: LD_VAR 0 1
40014: PPUSH
40015: CALL_OW 437
40019: IFFALSE 40106
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
40021: LD_STRING M
40023: PUSH
40024: LD_VAR 0 1
40028: PPUSH
40029: CALL_OW 437
40033: PUSH
40034: LD_INT 1
40036: ARRAY
40037: PUSH
40038: LD_INT 1
40040: ARRAY
40041: EQUAL
40042: IFFALSE 40069
40044: PUSH
40045: LD_VAR 0 2
40049: PUSH
40050: LD_VAR 0 1
40054: PPUSH
40055: CALL_OW 437
40059: PUSH
40060: LD_INT 1
40062: ARRAY
40063: PUSH
40064: LD_INT 2
40066: ARRAY
40067: EQUAL
40068: AND
40069: IFFALSE 40096
40071: PUSH
40072: LD_VAR 0 3
40076: PUSH
40077: LD_VAR 0 1
40081: PPUSH
40082: CALL_OW 437
40086: PUSH
40087: LD_INT 1
40089: ARRAY
40090: PUSH
40091: LD_INT 3
40093: ARRAY
40094: EQUAL
40095: AND
40096: IFFALSE 40106
// result := true ;
40098: LD_ADDR_VAR 0 4
40102: PUSH
40103: LD_INT 1
40105: ST_TO_ADDR
// end ; end ;
40106: LD_VAR 0 4
40110: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
40111: LD_INT 0
40113: PPUSH
40114: PPUSH
40115: PPUSH
40116: PPUSH
// if not unit or not area then
40117: LD_VAR 0 1
40121: NOT
40122: IFTRUE 40131
40124: PUSH
40125: LD_VAR 0 2
40129: NOT
40130: OR
40131: IFFALSE 40135
// exit ;
40133: GO 40311
// tmp := AreaToList ( area , i ) ;
40135: LD_ADDR_VAR 0 6
40139: PUSH
40140: LD_VAR 0 2
40144: PPUSH
40145: LD_VAR 0 5
40149: PPUSH
40150: CALL_OW 517
40154: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
40155: LD_ADDR_VAR 0 5
40159: PUSH
40160: DOUBLE
40161: LD_INT 1
40163: DEC
40164: ST_TO_ADDR
40165: LD_VAR 0 6
40169: PUSH
40170: LD_INT 1
40172: ARRAY
40173: PUSH
40174: FOR_TO
40175: IFFALSE 40309
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
40177: LD_ADDR_VAR 0 7
40181: PUSH
40182: LD_VAR 0 6
40186: PUSH
40187: LD_INT 1
40189: ARRAY
40190: PUSH
40191: LD_VAR 0 5
40195: ARRAY
40196: PUSH
40197: LD_VAR 0 6
40201: PUSH
40202: LD_INT 2
40204: ARRAY
40205: PUSH
40206: LD_VAR 0 5
40210: ARRAY
40211: PUSH
40212: EMPTY
40213: LIST
40214: LIST
40215: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
40216: LD_INT 92
40218: PUSH
40219: LD_VAR 0 7
40223: PUSH
40224: LD_INT 1
40226: ARRAY
40227: PUSH
40228: LD_VAR 0 7
40232: PUSH
40233: LD_INT 2
40235: ARRAY
40236: PUSH
40237: LD_INT 2
40239: PUSH
40240: EMPTY
40241: LIST
40242: LIST
40243: LIST
40244: LIST
40245: PPUSH
40246: CALL_OW 69
40250: PUSH
40251: LD_INT 0
40253: EQUAL
40254: IFFALSE 40307
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
40256: LD_VAR 0 1
40260: PPUSH
40261: LD_VAR 0 7
40265: PUSH
40266: LD_INT 1
40268: ARRAY
40269: PPUSH
40270: LD_VAR 0 7
40274: PUSH
40275: LD_INT 2
40277: ARRAY
40278: PPUSH
40279: LD_VAR 0 3
40283: PPUSH
40284: CALL_OW 48
// result := IsPlaced ( unit ) ;
40288: LD_ADDR_VAR 0 4
40292: PUSH
40293: LD_VAR 0 1
40297: PPUSH
40298: CALL_OW 305
40302: ST_TO_ADDR
// exit ;
40303: POP
40304: POP
40305: GO 40311
// end ; end ;
40307: GO 40174
40309: POP
40310: POP
// end ;
40311: LD_VAR 0 4
40315: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
40316: LD_INT 0
40318: PPUSH
40319: PPUSH
40320: PPUSH
// if not side or side > 8 then
40321: LD_VAR 0 1
40325: NOT
40326: IFTRUE 40338
40328: PUSH
40329: LD_VAR 0 1
40333: PUSH
40334: LD_INT 8
40336: GREATER
40337: OR
40338: IFFALSE 40342
// exit ;
40340: GO 40529
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
40342: LD_ADDR_VAR 0 4
40346: PUSH
40347: LD_INT 22
40349: PUSH
40350: LD_VAR 0 1
40354: PUSH
40355: EMPTY
40356: LIST
40357: LIST
40358: PUSH
40359: LD_INT 21
40361: PUSH
40362: LD_INT 3
40364: PUSH
40365: EMPTY
40366: LIST
40367: LIST
40368: PUSH
40369: EMPTY
40370: LIST
40371: LIST
40372: PPUSH
40373: CALL_OW 69
40377: ST_TO_ADDR
// if not tmp then
40378: LD_VAR 0 4
40382: NOT
40383: IFFALSE 40387
// exit ;
40385: GO 40529
// enable_addtolog := true ;
40387: LD_ADDR_OWVAR 81
40391: PUSH
40392: LD_INT 1
40394: ST_TO_ADDR
// AddToLog ( [ ) ;
40395: LD_STRING [
40397: PPUSH
40398: CALL_OW 561
// for i in tmp do
40402: LD_ADDR_VAR 0 3
40406: PUSH
40407: LD_VAR 0 4
40411: PUSH
40412: FOR_IN
40413: IFFALSE 40520
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
40415: LD_STRING [
40417: PUSH
40418: LD_VAR 0 3
40422: PPUSH
40423: CALL_OW 266
40427: STR
40428: PUSH
40429: LD_STRING , 
40431: STR
40432: PUSH
40433: LD_VAR 0 3
40437: PPUSH
40438: CALL_OW 250
40442: STR
40443: PUSH
40444: LD_STRING , 
40446: STR
40447: PUSH
40448: LD_VAR 0 3
40452: PPUSH
40453: CALL_OW 251
40457: STR
40458: PUSH
40459: LD_STRING , 
40461: STR
40462: PUSH
40463: LD_VAR 0 3
40467: PPUSH
40468: CALL_OW 254
40472: STR
40473: PUSH
40474: LD_STRING , 
40476: STR
40477: PUSH
40478: LD_VAR 0 3
40482: PPUSH
40483: LD_INT 1
40485: PPUSH
40486: CALL_OW 268
40490: STR
40491: PUSH
40492: LD_STRING , 
40494: STR
40495: PUSH
40496: LD_VAR 0 3
40500: PPUSH
40501: LD_INT 2
40503: PPUSH
40504: CALL_OW 268
40508: STR
40509: PUSH
40510: LD_STRING ],
40512: STR
40513: PPUSH
40514: CALL_OW 561
// end ;
40518: GO 40412
40520: POP
40521: POP
// AddToLog ( ]; ) ;
40522: LD_STRING ];
40524: PPUSH
40525: CALL_OW 561
// end ;
40529: LD_VAR 0 2
40533: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
40534: LD_INT 0
40536: PPUSH
40537: PPUSH
40538: PPUSH
40539: PPUSH
40540: PPUSH
// if not area or not rate or not max then
40541: LD_VAR 0 1
40545: NOT
40546: IFTRUE 40555
40548: PUSH
40549: LD_VAR 0 2
40553: NOT
40554: OR
40555: IFTRUE 40564
40557: PUSH
40558: LD_VAR 0 4
40562: NOT
40563: OR
40564: IFFALSE 40568
// exit ;
40566: GO 40757
// while 1 do
40568: LD_INT 1
40570: IFFALSE 40757
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
40572: LD_ADDR_VAR 0 9
40576: PUSH
40577: LD_VAR 0 1
40581: PPUSH
40582: LD_INT 1
40584: PPUSH
40585: CALL_OW 287
40589: PUSH
40590: LD_INT 10
40592: MUL
40593: ST_TO_ADDR
// r := rate / 10 ;
40594: LD_ADDR_VAR 0 7
40598: PUSH
40599: LD_VAR 0 2
40603: PUSH
40604: LD_INT 10
40606: DIVREAL
40607: ST_TO_ADDR
// time := 1 1$00 ;
40608: LD_ADDR_VAR 0 8
40612: PUSH
40613: LD_INT 2100
40615: ST_TO_ADDR
// if amount < min then
40616: LD_VAR 0 9
40620: PUSH
40621: LD_VAR 0 3
40625: LESS
40626: IFFALSE 40644
// r := r * 2 else
40628: LD_ADDR_VAR 0 7
40632: PUSH
40633: LD_VAR 0 7
40637: PUSH
40638: LD_INT 2
40640: MUL
40641: ST_TO_ADDR
40642: GO 40670
// if amount > max then
40644: LD_VAR 0 9
40648: PUSH
40649: LD_VAR 0 4
40653: GREATER
40654: IFFALSE 40670
// r := r / 2 ;
40656: LD_ADDR_VAR 0 7
40660: PUSH
40661: LD_VAR 0 7
40665: PUSH
40666: LD_INT 2
40668: DIVREAL
40669: ST_TO_ADDR
// time := time / r ;
40670: LD_ADDR_VAR 0 8
40674: PUSH
40675: LD_VAR 0 8
40679: PUSH
40680: LD_VAR 0 7
40684: DIVREAL
40685: ST_TO_ADDR
// if time < 0 then
40686: LD_VAR 0 8
40690: PUSH
40691: LD_INT 0
40693: LESS
40694: IFFALSE 40711
// time := time * - 1 ;
40696: LD_ADDR_VAR 0 8
40700: PUSH
40701: LD_VAR 0 8
40705: PUSH
40706: LD_INT 1
40708: NEG
40709: MUL
40710: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
40711: LD_VAR 0 8
40715: PUSH
40716: LD_INT 35
40718: PPUSH
40719: LD_INT 875
40721: PPUSH
40722: CALL_OW 12
40726: PLUS
40727: PPUSH
40728: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
40732: LD_INT 1
40734: PPUSH
40735: LD_INT 5
40737: PPUSH
40738: CALL_OW 12
40742: PPUSH
40743: LD_VAR 0 1
40747: PPUSH
40748: LD_INT 1
40750: PPUSH
40751: CALL_OW 55
// end ;
40755: GO 40568
// end ;
40757: LD_VAR 0 5
40761: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
40762: LD_INT 0
40764: PPUSH
40765: PPUSH
40766: PPUSH
40767: PPUSH
40768: PPUSH
40769: PPUSH
40770: PPUSH
40771: PPUSH
// if not turrets or not factories then
40772: LD_VAR 0 1
40776: NOT
40777: IFTRUE 40786
40779: PUSH
40780: LD_VAR 0 2
40784: NOT
40785: OR
40786: IFFALSE 40790
// exit ;
40788: GO 41097
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
40790: LD_ADDR_VAR 0 10
40794: PUSH
40795: LD_INT 5
40797: PUSH
40798: LD_INT 6
40800: PUSH
40801: EMPTY
40802: LIST
40803: LIST
40804: PUSH
40805: LD_INT 2
40807: PUSH
40808: LD_INT 4
40810: PUSH
40811: EMPTY
40812: LIST
40813: LIST
40814: PUSH
40815: LD_INT 3
40817: PUSH
40818: LD_INT 5
40820: PUSH
40821: EMPTY
40822: LIST
40823: LIST
40824: PUSH
40825: EMPTY
40826: LIST
40827: LIST
40828: LIST
40829: PUSH
40830: LD_INT 24
40832: PUSH
40833: LD_INT 25
40835: PUSH
40836: EMPTY
40837: LIST
40838: LIST
40839: PUSH
40840: LD_INT 23
40842: PUSH
40843: LD_INT 27
40845: PUSH
40846: EMPTY
40847: LIST
40848: LIST
40849: PUSH
40850: EMPTY
40851: LIST
40852: LIST
40853: PUSH
40854: LD_INT 42
40856: PUSH
40857: LD_INT 43
40859: PUSH
40860: EMPTY
40861: LIST
40862: LIST
40863: PUSH
40864: LD_INT 44
40866: PUSH
40867: LD_INT 46
40869: PUSH
40870: EMPTY
40871: LIST
40872: LIST
40873: PUSH
40874: LD_INT 45
40876: PUSH
40877: LD_INT 47
40879: PUSH
40880: EMPTY
40881: LIST
40882: LIST
40883: PUSH
40884: EMPTY
40885: LIST
40886: LIST
40887: LIST
40888: PUSH
40889: EMPTY
40890: LIST
40891: LIST
40892: LIST
40893: ST_TO_ADDR
// result := [ ] ;
40894: LD_ADDR_VAR 0 3
40898: PUSH
40899: EMPTY
40900: ST_TO_ADDR
// for i in turrets do
40901: LD_ADDR_VAR 0 4
40905: PUSH
40906: LD_VAR 0 1
40910: PUSH
40911: FOR_IN
40912: IFFALSE 41095
// begin nat := GetNation ( i ) ;
40914: LD_ADDR_VAR 0 7
40918: PUSH
40919: LD_VAR 0 4
40923: PPUSH
40924: CALL_OW 248
40928: ST_TO_ADDR
// weapon := 0 ;
40929: LD_ADDR_VAR 0 8
40933: PUSH
40934: LD_INT 0
40936: ST_TO_ADDR
// if not nat then
40937: LD_VAR 0 7
40941: NOT
40942: IFFALSE 40946
// continue ;
40944: GO 40911
// for j in list [ nat ] do
40946: LD_ADDR_VAR 0 5
40950: PUSH
40951: LD_VAR 0 10
40955: PUSH
40956: LD_VAR 0 7
40960: ARRAY
40961: PUSH
40962: FOR_IN
40963: IFFALSE 41004
// if GetBWeapon ( i ) = j [ 1 ] then
40965: LD_VAR 0 4
40969: PPUSH
40970: CALL_OW 269
40974: PUSH
40975: LD_VAR 0 5
40979: PUSH
40980: LD_INT 1
40982: ARRAY
40983: EQUAL
40984: IFFALSE 41002
// begin weapon := j [ 2 ] ;
40986: LD_ADDR_VAR 0 8
40990: PUSH
40991: LD_VAR 0 5
40995: PUSH
40996: LD_INT 2
40998: ARRAY
40999: ST_TO_ADDR
// break ;
41000: GO 41004
// end ;
41002: GO 40962
41004: POP
41005: POP
// if not weapon then
41006: LD_VAR 0 8
41010: NOT
41011: IFFALSE 41015
// continue ;
41013: GO 40911
// for k in factories do
41015: LD_ADDR_VAR 0 6
41019: PUSH
41020: LD_VAR 0 2
41024: PUSH
41025: FOR_IN
41026: IFFALSE 41091
// begin weapons := AvailableWeaponList ( k ) ;
41028: LD_ADDR_VAR 0 9
41032: PUSH
41033: LD_VAR 0 6
41037: PPUSH
41038: CALL_OW 478
41042: ST_TO_ADDR
// if not weapons then
41043: LD_VAR 0 9
41047: NOT
41048: IFFALSE 41052
// continue ;
41050: GO 41025
// if weapon in weapons then
41052: LD_VAR 0 8
41056: PUSH
41057: LD_VAR 0 9
41061: IN
41062: IFFALSE 41089
// begin result := [ i , weapon ] ;
41064: LD_ADDR_VAR 0 3
41068: PUSH
41069: LD_VAR 0 4
41073: PUSH
41074: LD_VAR 0 8
41078: PUSH
41079: EMPTY
41080: LIST
41081: LIST
41082: ST_TO_ADDR
// exit ;
41083: POP
41084: POP
41085: POP
41086: POP
41087: GO 41097
// end ; end ;
41089: GO 41025
41091: POP
41092: POP
// end ;
41093: GO 40911
41095: POP
41096: POP
// end ;
41097: LD_VAR 0 3
41101: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
41102: LD_INT 0
41104: PPUSH
// if not side or side > 8 then
41105: LD_VAR 0 3
41109: NOT
41110: IFTRUE 41122
41112: PUSH
41113: LD_VAR 0 3
41117: PUSH
41118: LD_INT 8
41120: GREATER
41121: OR
41122: IFFALSE 41126
// exit ;
41124: GO 41185
// if not range then
41126: LD_VAR 0 4
41130: NOT
41131: IFFALSE 41142
// range := - 12 ;
41133: LD_ADDR_VAR 0 4
41137: PUSH
41138: LD_INT 12
41140: NEG
41141: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
41142: LD_VAR 0 1
41146: PPUSH
41147: LD_VAR 0 2
41151: PPUSH
41152: LD_VAR 0 3
41156: PPUSH
41157: LD_VAR 0 4
41161: PPUSH
41162: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
41166: LD_VAR 0 1
41170: PPUSH
41171: LD_VAR 0 2
41175: PPUSH
41176: LD_VAR 0 3
41180: PPUSH
41181: CALL_OW 331
// end ;
41185: LD_VAR 0 5
41189: RET
// export function Video ( mode ) ; begin
41190: LD_INT 0
41192: PPUSH
// ingame_video = mode ;
41193: LD_ADDR_OWVAR 52
41197: PUSH
41198: LD_VAR 0 1
41202: ST_TO_ADDR
// interface_hidden = mode ;
41203: LD_ADDR_OWVAR 54
41207: PUSH
41208: LD_VAR 0 1
41212: ST_TO_ADDR
// end ;
41213: LD_VAR 0 2
41217: RET
// export function Join ( array , element ) ; begin
41218: LD_INT 0
41220: PPUSH
// result := Replace ( array , array + 1 , element ) ;
41221: LD_ADDR_VAR 0 3
41225: PUSH
41226: LD_VAR 0 1
41230: PPUSH
41231: LD_VAR 0 1
41235: PUSH
41236: LD_INT 1
41238: PLUS
41239: PPUSH
41240: LD_VAR 0 2
41244: PPUSH
41245: CALL_OW 1
41249: ST_TO_ADDR
// end ;
41250: LD_VAR 0 3
41254: RET
// export function JoinUnion ( array , element ) ; begin
41255: LD_INT 0
41257: PPUSH
// result := array union element ;
41258: LD_ADDR_VAR 0 3
41262: PUSH
41263: LD_VAR 0 1
41267: PUSH
41268: LD_VAR 0 2
41272: UNION
41273: ST_TO_ADDR
// end ;
41274: LD_VAR 0 3
41278: RET
// export function GetBehemoths ( side ) ; begin
41279: LD_INT 0
41281: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
41282: LD_ADDR_VAR 0 2
41286: PUSH
41287: LD_INT 22
41289: PUSH
41290: LD_VAR 0 1
41294: PUSH
41295: EMPTY
41296: LIST
41297: LIST
41298: PUSH
41299: LD_INT 31
41301: PUSH
41302: LD_INT 25
41304: PUSH
41305: EMPTY
41306: LIST
41307: LIST
41308: PUSH
41309: EMPTY
41310: LIST
41311: LIST
41312: PPUSH
41313: CALL_OW 69
41317: ST_TO_ADDR
// end ;
41318: LD_VAR 0 2
41322: RET
// export function Shuffle ( array ) ; var i , index ; begin
41323: LD_INT 0
41325: PPUSH
41326: PPUSH
41327: PPUSH
// result := [ ] ;
41328: LD_ADDR_VAR 0 2
41332: PUSH
41333: EMPTY
41334: ST_TO_ADDR
// if not array then
41335: LD_VAR 0 1
41339: NOT
41340: IFFALSE 41344
// exit ;
41342: GO 41443
// Randomize ;
41344: CALL_OW 10
// for i = array downto 1 do
41348: LD_ADDR_VAR 0 3
41352: PUSH
41353: DOUBLE
41354: LD_VAR 0 1
41358: INC
41359: ST_TO_ADDR
41360: LD_INT 1
41362: PUSH
41363: FOR_DOWNTO
41364: IFFALSE 41441
// begin index := rand ( 1 , array ) ;
41366: LD_ADDR_VAR 0 4
41370: PUSH
41371: LD_INT 1
41373: PPUSH
41374: LD_VAR 0 1
41378: PPUSH
41379: CALL_OW 12
41383: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
41384: LD_ADDR_VAR 0 2
41388: PUSH
41389: LD_VAR 0 2
41393: PPUSH
41394: LD_VAR 0 2
41398: PUSH
41399: LD_INT 1
41401: PLUS
41402: PPUSH
41403: LD_VAR 0 1
41407: PUSH
41408: LD_VAR 0 4
41412: ARRAY
41413: PPUSH
41414: CALL_OW 2
41418: ST_TO_ADDR
// array := Delete ( array , index ) ;
41419: LD_ADDR_VAR 0 1
41423: PUSH
41424: LD_VAR 0 1
41428: PPUSH
41429: LD_VAR 0 4
41433: PPUSH
41434: CALL_OW 3
41438: ST_TO_ADDR
// end ;
41439: GO 41363
41441: POP
41442: POP
// end ;
41443: LD_VAR 0 2
41447: RET
// export function GetBaseMaterials ( base ) ; begin
41448: LD_INT 0
41450: PPUSH
// result := [ 0 , 0 , 0 ] ;
41451: LD_ADDR_VAR 0 2
41455: PUSH
41456: LD_INT 0
41458: PUSH
41459: LD_INT 0
41461: PUSH
41462: LD_INT 0
41464: PUSH
41465: EMPTY
41466: LIST
41467: LIST
41468: LIST
41469: ST_TO_ADDR
// if not base then
41470: LD_VAR 0 1
41474: NOT
41475: IFFALSE 41479
// exit ;
41477: GO 41528
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
41479: LD_ADDR_VAR 0 2
41483: PUSH
41484: LD_VAR 0 1
41488: PPUSH
41489: LD_INT 1
41491: PPUSH
41492: CALL_OW 275
41496: PUSH
41497: LD_VAR 0 1
41501: PPUSH
41502: LD_INT 2
41504: PPUSH
41505: CALL_OW 275
41509: PUSH
41510: LD_VAR 0 1
41514: PPUSH
41515: LD_INT 3
41517: PPUSH
41518: CALL_OW 275
41522: PUSH
41523: EMPTY
41524: LIST
41525: LIST
41526: LIST
41527: ST_TO_ADDR
// end ;
41528: LD_VAR 0 2
41532: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
41533: LD_INT 0
41535: PPUSH
41536: PPUSH
// result := array ;
41537: LD_ADDR_VAR 0 3
41541: PUSH
41542: LD_VAR 0 1
41546: ST_TO_ADDR
// if size >= result then
41547: LD_VAR 0 2
41551: PUSH
41552: LD_VAR 0 3
41556: GREATEREQUAL
41557: IFFALSE 41561
// exit ;
41559: GO 41611
// if size then
41561: LD_VAR 0 2
41565: IFFALSE 41611
// for i := array downto size do
41567: LD_ADDR_VAR 0 4
41571: PUSH
41572: DOUBLE
41573: LD_VAR 0 1
41577: INC
41578: ST_TO_ADDR
41579: LD_VAR 0 2
41583: PUSH
41584: FOR_DOWNTO
41585: IFFALSE 41609
// result := Delete ( result , result ) ;
41587: LD_ADDR_VAR 0 3
41591: PUSH
41592: LD_VAR 0 3
41596: PPUSH
41597: LD_VAR 0 3
41601: PPUSH
41602: CALL_OW 3
41606: ST_TO_ADDR
41607: GO 41584
41609: POP
41610: POP
// end ;
41611: LD_VAR 0 3
41615: RET
// export function ComExit ( unit ) ; var tmp ; begin
41616: LD_INT 0
41618: PPUSH
41619: PPUSH
// if not IsInUnit ( unit ) then
41620: LD_VAR 0 1
41624: PPUSH
41625: CALL_OW 310
41629: NOT
41630: IFFALSE 41634
// exit ;
41632: GO 41694
// tmp := IsInUnit ( unit ) ;
41634: LD_ADDR_VAR 0 3
41638: PUSH
41639: LD_VAR 0 1
41643: PPUSH
41644: CALL_OW 310
41648: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
41649: LD_VAR 0 3
41653: PPUSH
41654: CALL_OW 247
41658: PUSH
41659: LD_INT 2
41661: EQUAL
41662: IFFALSE 41675
// ComExitVehicle ( unit ) else
41664: LD_VAR 0 1
41668: PPUSH
41669: CALL_OW 121
41673: GO 41684
// ComExitBuilding ( unit ) ;
41675: LD_VAR 0 1
41679: PPUSH
41680: CALL_OW 122
// result := tmp ;
41684: LD_ADDR_VAR 0 2
41688: PUSH
41689: LD_VAR 0 3
41693: ST_TO_ADDR
// end ;
41694: LD_VAR 0 2
41698: RET
// export function ComExitAll ( units ) ; var i ; begin
41699: LD_INT 0
41701: PPUSH
41702: PPUSH
// if not units then
41703: LD_VAR 0 1
41707: NOT
41708: IFFALSE 41712
// exit ;
41710: GO 41738
// for i in units do
41712: LD_ADDR_VAR 0 3
41716: PUSH
41717: LD_VAR 0 1
41721: PUSH
41722: FOR_IN
41723: IFFALSE 41736
// ComExit ( i ) ;
41725: LD_VAR 0 3
41729: PPUSH
41730: CALL 41616 0 1
41734: GO 41722
41736: POP
41737: POP
// end ;
41738: LD_VAR 0 2
41742: RET
// export function ResetHc ; begin
41743: LD_INT 0
41745: PPUSH
// InitHc ;
41746: CALL_OW 19
// hc_importance := 0 ;
41750: LD_ADDR_OWVAR 32
41754: PUSH
41755: LD_INT 0
41757: ST_TO_ADDR
// end ;
41758: LD_VAR 0 1
41762: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
41763: LD_INT 0
41765: PPUSH
41766: PPUSH
41767: PPUSH
// _x := ( x1 + x2 ) div 2 ;
41768: LD_ADDR_VAR 0 6
41772: PUSH
41773: LD_VAR 0 1
41777: PUSH
41778: LD_VAR 0 3
41782: PLUS
41783: PUSH
41784: LD_INT 2
41786: DIV
41787: ST_TO_ADDR
// if _x < 0 then
41788: LD_VAR 0 6
41792: PUSH
41793: LD_INT 0
41795: LESS
41796: IFFALSE 41813
// _x := _x * - 1 ;
41798: LD_ADDR_VAR 0 6
41802: PUSH
41803: LD_VAR 0 6
41807: PUSH
41808: LD_INT 1
41810: NEG
41811: MUL
41812: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
41813: LD_ADDR_VAR 0 7
41817: PUSH
41818: LD_VAR 0 2
41822: PUSH
41823: LD_VAR 0 4
41827: PLUS
41828: PUSH
41829: LD_INT 2
41831: DIV
41832: ST_TO_ADDR
// if _y < 0 then
41833: LD_VAR 0 7
41837: PUSH
41838: LD_INT 0
41840: LESS
41841: IFFALSE 41858
// _y := _y * - 1 ;
41843: LD_ADDR_VAR 0 7
41847: PUSH
41848: LD_VAR 0 7
41852: PUSH
41853: LD_INT 1
41855: NEG
41856: MUL
41857: ST_TO_ADDR
// result := [ _x , _y ] ;
41858: LD_ADDR_VAR 0 5
41862: PUSH
41863: LD_VAR 0 6
41867: PUSH
41868: LD_VAR 0 7
41872: PUSH
41873: EMPTY
41874: LIST
41875: LIST
41876: ST_TO_ADDR
// end ;
41877: LD_VAR 0 5
41881: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
41882: LD_INT 0
41884: PPUSH
41885: PPUSH
41886: PPUSH
41887: PPUSH
// task := GetTaskList ( unit ) ;
41888: LD_ADDR_VAR 0 7
41892: PUSH
41893: LD_VAR 0 1
41897: PPUSH
41898: CALL_OW 437
41902: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
41903: LD_VAR 0 7
41907: NOT
41908: IFFALSE 41927
41910: PUSH
41911: LD_VAR 0 1
41915: PPUSH
41916: LD_VAR 0 2
41920: PPUSH
41921: CALL_OW 308
41925: NOT
41926: AND
41927: IFFALSE 41931
// exit ;
41929: GO 42049
// if IsInArea ( unit , area ) then
41931: LD_VAR 0 1
41935: PPUSH
41936: LD_VAR 0 2
41940: PPUSH
41941: CALL_OW 308
41945: IFFALSE 41963
// begin ComMoveToArea ( unit , goAway ) ;
41947: LD_VAR 0 1
41951: PPUSH
41952: LD_VAR 0 3
41956: PPUSH
41957: CALL_OW 113
// exit ;
41961: GO 42049
// end ; if task [ 1 ] [ 1 ] <> M then
41963: LD_VAR 0 7
41967: PUSH
41968: LD_INT 1
41970: ARRAY
41971: PUSH
41972: LD_INT 1
41974: ARRAY
41975: PUSH
41976: LD_STRING M
41978: NONEQUAL
41979: IFFALSE 41983
// exit ;
41981: GO 42049
// x := task [ 1 ] [ 2 ] ;
41983: LD_ADDR_VAR 0 5
41987: PUSH
41988: LD_VAR 0 7
41992: PUSH
41993: LD_INT 1
41995: ARRAY
41996: PUSH
41997: LD_INT 2
41999: ARRAY
42000: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
42001: LD_ADDR_VAR 0 6
42005: PUSH
42006: LD_VAR 0 7
42010: PUSH
42011: LD_INT 1
42013: ARRAY
42014: PUSH
42015: LD_INT 3
42017: ARRAY
42018: ST_TO_ADDR
// if InArea ( x , y , area ) then
42019: LD_VAR 0 5
42023: PPUSH
42024: LD_VAR 0 6
42028: PPUSH
42029: LD_VAR 0 2
42033: PPUSH
42034: CALL_OW 309
42038: IFFALSE 42049
// ComStop ( unit ) ;
42040: LD_VAR 0 1
42044: PPUSH
42045: CALL_OW 141
// end ;
42049: LD_VAR 0 4
42053: RET
// export function Abs ( value ) ; begin
42054: LD_INT 0
42056: PPUSH
// result := value ;
42057: LD_ADDR_VAR 0 2
42061: PUSH
42062: LD_VAR 0 1
42066: ST_TO_ADDR
// if value < 0 then
42067: LD_VAR 0 1
42071: PUSH
42072: LD_INT 0
42074: LESS
42075: IFFALSE 42092
// result := value * - 1 ;
42077: LD_ADDR_VAR 0 2
42081: PUSH
42082: LD_VAR 0 1
42086: PUSH
42087: LD_INT 1
42089: NEG
42090: MUL
42091: ST_TO_ADDR
// end ;
42092: LD_VAR 0 2
42096: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
42097: LD_INT 0
42099: PPUSH
42100: PPUSH
42101: PPUSH
42102: PPUSH
42103: PPUSH
42104: PPUSH
42105: PPUSH
42106: PPUSH
// if not unit or not building then
42107: LD_VAR 0 1
42111: NOT
42112: IFTRUE 42121
42114: PUSH
42115: LD_VAR 0 2
42119: NOT
42120: OR
42121: IFFALSE 42125
// exit ;
42123: GO 42353
// x := GetX ( building ) ;
42125: LD_ADDR_VAR 0 4
42129: PUSH
42130: LD_VAR 0 2
42134: PPUSH
42135: CALL_OW 250
42139: ST_TO_ADDR
// y := GetY ( building ) ;
42140: LD_ADDR_VAR 0 6
42144: PUSH
42145: LD_VAR 0 2
42149: PPUSH
42150: CALL_OW 251
42154: ST_TO_ADDR
// d := GetDir ( building ) ;
42155: LD_ADDR_VAR 0 8
42159: PUSH
42160: LD_VAR 0 2
42164: PPUSH
42165: CALL_OW 254
42169: ST_TO_ADDR
// r := 4 ;
42170: LD_ADDR_VAR 0 9
42174: PUSH
42175: LD_INT 4
42177: ST_TO_ADDR
// for i := 1 to 5 do
42178: LD_ADDR_VAR 0 10
42182: PUSH
42183: DOUBLE
42184: LD_INT 1
42186: DEC
42187: ST_TO_ADDR
42188: LD_INT 5
42190: PUSH
42191: FOR_TO
42192: IFFALSE 42351
// begin _x := ShiftX ( x , d , r + i ) ;
42194: LD_ADDR_VAR 0 5
42198: PUSH
42199: LD_VAR 0 4
42203: PPUSH
42204: LD_VAR 0 8
42208: PPUSH
42209: LD_VAR 0 9
42213: PUSH
42214: LD_VAR 0 10
42218: PLUS
42219: PPUSH
42220: CALL_OW 272
42224: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
42225: LD_ADDR_VAR 0 7
42229: PUSH
42230: LD_VAR 0 6
42234: PPUSH
42235: LD_VAR 0 8
42239: PPUSH
42240: LD_VAR 0 9
42244: PUSH
42245: LD_VAR 0 10
42249: PLUS
42250: PPUSH
42251: CALL_OW 273
42255: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
42256: LD_VAR 0 5
42260: PPUSH
42261: LD_VAR 0 7
42265: PPUSH
42266: CALL_OW 488
42270: IFFALSE 42305
42272: PUSH
42273: LD_VAR 0 5
42277: PPUSH
42278: LD_VAR 0 7
42282: PPUSH
42283: CALL_OW 428
42287: PPUSH
42288: CALL_OW 247
42292: PUSH
42293: LD_INT 3
42295: PUSH
42296: LD_INT 2
42298: PUSH
42299: EMPTY
42300: LIST
42301: LIST
42302: IN
42303: NOT
42304: AND
42305: IFFALSE 42349
// begin ComMoveXY ( unit , _x , _y ) ;
42307: LD_VAR 0 1
42311: PPUSH
42312: LD_VAR 0 5
42316: PPUSH
42317: LD_VAR 0 7
42321: PPUSH
42322: CALL_OW 111
// result := [ _x , _y ] ;
42326: LD_ADDR_VAR 0 3
42330: PUSH
42331: LD_VAR 0 5
42335: PUSH
42336: LD_VAR 0 7
42340: PUSH
42341: EMPTY
42342: LIST
42343: LIST
42344: ST_TO_ADDR
// exit ;
42345: POP
42346: POP
42347: GO 42353
// end ; end ;
42349: GO 42191
42351: POP
42352: POP
// end ;
42353: LD_VAR 0 3
42357: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
42358: LD_INT 0
42360: PPUSH
42361: PPUSH
42362: PPUSH
// result := 0 ;
42363: LD_ADDR_VAR 0 3
42367: PUSH
42368: LD_INT 0
42370: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
42371: LD_VAR 0 1
42375: PUSH
42376: LD_INT 0
42378: LESS
42379: IFTRUE 42391
42381: PUSH
42382: LD_VAR 0 1
42386: PUSH
42387: LD_INT 8
42389: GREATER
42390: OR
42391: IFTRUE 42403
42393: PUSH
42394: LD_VAR 0 2
42398: PUSH
42399: LD_INT 0
42401: LESS
42402: OR
42403: IFTRUE 42415
42405: PUSH
42406: LD_VAR 0 2
42410: PUSH
42411: LD_INT 8
42413: GREATER
42414: OR
42415: IFFALSE 42419
// exit ;
42417: GO 42494
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
42419: LD_ADDR_VAR 0 4
42423: PUSH
42424: LD_INT 22
42426: PUSH
42427: LD_VAR 0 2
42431: PUSH
42432: EMPTY
42433: LIST
42434: LIST
42435: PPUSH
42436: CALL_OW 69
42440: PUSH
42441: FOR_IN
42442: IFFALSE 42492
// begin un := UnitShoot ( i ) ;
42444: LD_ADDR_VAR 0 5
42448: PUSH
42449: LD_VAR 0 4
42453: PPUSH
42454: CALL_OW 504
42458: ST_TO_ADDR
// if GetSide ( un ) = side1 then
42459: LD_VAR 0 5
42463: PPUSH
42464: CALL_OW 255
42468: PUSH
42469: LD_VAR 0 1
42473: EQUAL
42474: IFFALSE 42490
// begin result := un ;
42476: LD_ADDR_VAR 0 3
42480: PUSH
42481: LD_VAR 0 5
42485: ST_TO_ADDR
// exit ;
42486: POP
42487: POP
42488: GO 42494
// end ; end ;
42490: GO 42441
42492: POP
42493: POP
// end ;
42494: LD_VAR 0 3
42498: RET
// export function GetCargoBay ( units ) ; begin
42499: LD_INT 0
42501: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
42502: LD_ADDR_VAR 0 2
42506: PUSH
42507: LD_VAR 0 1
42511: PPUSH
42512: LD_INT 2
42514: PUSH
42515: LD_INT 34
42517: PUSH
42518: LD_INT 12
42520: PUSH
42521: EMPTY
42522: LIST
42523: LIST
42524: PUSH
42525: LD_INT 34
42527: PUSH
42528: LD_INT 51
42530: PUSH
42531: EMPTY
42532: LIST
42533: LIST
42534: PUSH
42535: LD_INT 34
42537: PUSH
42538: LD_INT 32
42540: PUSH
42541: EMPTY
42542: LIST
42543: LIST
42544: PUSH
42545: LD_INT 34
42547: PUSH
42548: LD_INT 89
42550: PUSH
42551: EMPTY
42552: LIST
42553: LIST
42554: PUSH
42555: EMPTY
42556: LIST
42557: LIST
42558: LIST
42559: LIST
42560: LIST
42561: PPUSH
42562: CALL_OW 72
42566: ST_TO_ADDR
// end ;
42567: LD_VAR 0 2
42571: RET
// export function Negate ( value ) ; begin
42572: LD_INT 0
42574: PPUSH
// result := not value ;
42575: LD_ADDR_VAR 0 2
42579: PUSH
42580: LD_VAR 0 1
42584: NOT
42585: ST_TO_ADDR
// end ;
42586: LD_VAR 0 2
42590: RET
// export function Inc ( value ) ; begin
42591: LD_INT 0
42593: PPUSH
// result := value + 1 ;
42594: LD_ADDR_VAR 0 2
42598: PUSH
42599: LD_VAR 0 1
42603: PUSH
42604: LD_INT 1
42606: PLUS
42607: ST_TO_ADDR
// end ;
42608: LD_VAR 0 2
42612: RET
// export function Dec ( value ) ; begin
42613: LD_INT 0
42615: PPUSH
// result := value - 1 ;
42616: LD_ADDR_VAR 0 2
42620: PUSH
42621: LD_VAR 0 1
42625: PUSH
42626: LD_INT 1
42628: MINUS
42629: ST_TO_ADDR
// end ;
42630: LD_VAR 0 2
42634: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
42635: LD_INT 0
42637: PPUSH
42638: PPUSH
42639: PPUSH
42640: PPUSH
42641: PPUSH
42642: PPUSH
42643: PPUSH
42644: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
42645: LD_VAR 0 1
42649: PPUSH
42650: LD_VAR 0 2
42654: PPUSH
42655: CALL_OW 488
42659: NOT
42660: IFTRUE 42679
42662: PUSH
42663: LD_VAR 0 3
42667: PPUSH
42668: LD_VAR 0 4
42672: PPUSH
42673: CALL_OW 488
42677: NOT
42678: OR
42679: IFFALSE 42692
// begin result := - 1 ;
42681: LD_ADDR_VAR 0 5
42685: PUSH
42686: LD_INT 1
42688: NEG
42689: ST_TO_ADDR
// exit ;
42690: GO 42927
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
42692: LD_ADDR_VAR 0 12
42696: PUSH
42697: LD_VAR 0 1
42701: PPUSH
42702: LD_VAR 0 2
42706: PPUSH
42707: LD_VAR 0 3
42711: PPUSH
42712: LD_VAR 0 4
42716: PPUSH
42717: CALL 41763 0 4
42721: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
42722: LD_ADDR_VAR 0 11
42726: PUSH
42727: LD_VAR 0 1
42731: PPUSH
42732: LD_VAR 0 2
42736: PPUSH
42737: LD_VAR 0 12
42741: PUSH
42742: LD_INT 1
42744: ARRAY
42745: PPUSH
42746: LD_VAR 0 12
42750: PUSH
42751: LD_INT 2
42753: ARRAY
42754: PPUSH
42755: CALL_OW 298
42759: ST_TO_ADDR
// distance := 9999 ;
42760: LD_ADDR_VAR 0 10
42764: PUSH
42765: LD_INT 9999
42767: ST_TO_ADDR
// for i := 0 to 5 do
42768: LD_ADDR_VAR 0 6
42772: PUSH
42773: DOUBLE
42774: LD_INT 0
42776: DEC
42777: ST_TO_ADDR
42778: LD_INT 5
42780: PUSH
42781: FOR_TO
42782: IFFALSE 42925
// begin _x := ShiftX ( x1 , i , centerDist ) ;
42784: LD_ADDR_VAR 0 7
42788: PUSH
42789: LD_VAR 0 1
42793: PPUSH
42794: LD_VAR 0 6
42798: PPUSH
42799: LD_VAR 0 11
42803: PPUSH
42804: CALL_OW 272
42808: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
42809: LD_ADDR_VAR 0 8
42813: PUSH
42814: LD_VAR 0 2
42818: PPUSH
42819: LD_VAR 0 6
42823: PPUSH
42824: LD_VAR 0 11
42828: PPUSH
42829: CALL_OW 273
42833: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42834: LD_VAR 0 7
42838: PPUSH
42839: LD_VAR 0 8
42843: PPUSH
42844: CALL_OW 488
42848: NOT
42849: IFFALSE 42853
// continue ;
42851: GO 42781
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
42853: LD_ADDR_VAR 0 9
42857: PUSH
42858: LD_VAR 0 12
42862: PUSH
42863: LD_INT 1
42865: ARRAY
42866: PPUSH
42867: LD_VAR 0 12
42871: PUSH
42872: LD_INT 2
42874: ARRAY
42875: PPUSH
42876: LD_VAR 0 7
42880: PPUSH
42881: LD_VAR 0 8
42885: PPUSH
42886: CALL_OW 298
42890: ST_TO_ADDR
// if tmp < distance then
42891: LD_VAR 0 9
42895: PUSH
42896: LD_VAR 0 10
42900: LESS
42901: IFFALSE 42923
// begin result := i ;
42903: LD_ADDR_VAR 0 5
42907: PUSH
42908: LD_VAR 0 6
42912: ST_TO_ADDR
// distance := tmp ;
42913: LD_ADDR_VAR 0 10
42917: PUSH
42918: LD_VAR 0 9
42922: ST_TO_ADDR
// end ; end ;
42923: GO 42781
42925: POP
42926: POP
// end ;
42927: LD_VAR 0 5
42931: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42932: LD_INT 0
42934: PPUSH
42935: PPUSH
// if not driver or not IsInUnit ( driver ) then
42936: LD_VAR 0 1
42940: NOT
42941: IFTRUE 42955
42943: PUSH
42944: LD_VAR 0 1
42948: PPUSH
42949: CALL_OW 310
42953: NOT
42954: OR
42955: IFFALSE 42959
// exit ;
42957: GO 43049
// vehicle := IsInUnit ( driver ) ;
42959: LD_ADDR_VAR 0 3
42963: PUSH
42964: LD_VAR 0 1
42968: PPUSH
42969: CALL_OW 310
42973: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42974: LD_VAR 0 1
42978: PPUSH
42979: LD_STRING \
42981: PUSH
42982: LD_INT 0
42984: PUSH
42985: LD_INT 0
42987: PUSH
42988: LD_INT 0
42990: PUSH
42991: LD_INT 0
42993: PUSH
42994: LD_INT 0
42996: PUSH
42997: LD_INT 0
42999: PUSH
43000: EMPTY
43001: LIST
43002: LIST
43003: LIST
43004: LIST
43005: LIST
43006: LIST
43007: LIST
43008: PUSH
43009: LD_STRING E
43011: PUSH
43012: LD_INT 0
43014: PUSH
43015: LD_INT 0
43017: PUSH
43018: LD_VAR 0 3
43022: PUSH
43023: LD_INT 0
43025: PUSH
43026: LD_INT 0
43028: PUSH
43029: LD_INT 0
43031: PUSH
43032: EMPTY
43033: LIST
43034: LIST
43035: LIST
43036: LIST
43037: LIST
43038: LIST
43039: LIST
43040: PUSH
43041: EMPTY
43042: LIST
43043: LIST
43044: PPUSH
43045: CALL_OW 446
// end ;
43049: LD_VAR 0 2
43053: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
43054: LD_INT 0
43056: PPUSH
43057: PPUSH
// if not driver or not IsInUnit ( driver ) then
43058: LD_VAR 0 1
43062: NOT
43063: IFTRUE 43077
43065: PUSH
43066: LD_VAR 0 1
43070: PPUSH
43071: CALL_OW 310
43075: NOT
43076: OR
43077: IFFALSE 43081
// exit ;
43079: GO 43171
// vehicle := IsInUnit ( driver ) ;
43081: LD_ADDR_VAR 0 3
43085: PUSH
43086: LD_VAR 0 1
43090: PPUSH
43091: CALL_OW 310
43095: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
43096: LD_VAR 0 1
43100: PPUSH
43101: LD_STRING \
43103: PUSH
43104: LD_INT 0
43106: PUSH
43107: LD_INT 0
43109: PUSH
43110: LD_INT 0
43112: PUSH
43113: LD_INT 0
43115: PUSH
43116: LD_INT 0
43118: PUSH
43119: LD_INT 0
43121: PUSH
43122: EMPTY
43123: LIST
43124: LIST
43125: LIST
43126: LIST
43127: LIST
43128: LIST
43129: LIST
43130: PUSH
43131: LD_STRING E
43133: PUSH
43134: LD_INT 0
43136: PUSH
43137: LD_INT 0
43139: PUSH
43140: LD_VAR 0 3
43144: PUSH
43145: LD_INT 0
43147: PUSH
43148: LD_INT 0
43150: PUSH
43151: LD_INT 0
43153: PUSH
43154: EMPTY
43155: LIST
43156: LIST
43157: LIST
43158: LIST
43159: LIST
43160: LIST
43161: LIST
43162: PUSH
43163: EMPTY
43164: LIST
43165: LIST
43166: PPUSH
43167: CALL_OW 447
// end ;
43171: LD_VAR 0 2
43175: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
43176: LD_INT 0
43178: PPUSH
43179: PPUSH
43180: PPUSH
// tmp := [ ] ;
43181: LD_ADDR_VAR 0 5
43185: PUSH
43186: EMPTY
43187: ST_TO_ADDR
// for i in units do
43188: LD_ADDR_VAR 0 4
43192: PUSH
43193: LD_VAR 0 1
43197: PUSH
43198: FOR_IN
43199: IFFALSE 43237
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
43201: LD_ADDR_VAR 0 5
43205: PUSH
43206: LD_VAR 0 5
43210: PPUSH
43211: LD_VAR 0 5
43215: PUSH
43216: LD_INT 1
43218: PLUS
43219: PPUSH
43220: LD_VAR 0 4
43224: PPUSH
43225: CALL_OW 256
43229: PPUSH
43230: CALL_OW 2
43234: ST_TO_ADDR
43235: GO 43198
43237: POP
43238: POP
// if not tmp then
43239: LD_VAR 0 5
43243: NOT
43244: IFFALSE 43248
// exit ;
43246: GO 43296
// if asc then
43248: LD_VAR 0 2
43252: IFFALSE 43276
// result := SortListByListAsc ( units , tmp ) else
43254: LD_ADDR_VAR 0 3
43258: PUSH
43259: LD_VAR 0 1
43263: PPUSH
43264: LD_VAR 0 5
43268: PPUSH
43269: CALL_OW 76
43273: ST_TO_ADDR
43274: GO 43296
// result := SortListByListDesc ( units , tmp ) ;
43276: LD_ADDR_VAR 0 3
43280: PUSH
43281: LD_VAR 0 1
43285: PPUSH
43286: LD_VAR 0 5
43290: PPUSH
43291: CALL_OW 77
43295: ST_TO_ADDR
// end ;
43296: LD_VAR 0 3
43300: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
43301: LD_INT 0
43303: PPUSH
43304: PPUSH
// task := GetTaskList ( mech ) ;
43305: LD_ADDR_VAR 0 4
43309: PUSH
43310: LD_VAR 0 1
43314: PPUSH
43315: CALL_OW 437
43319: ST_TO_ADDR
// if not task then
43320: LD_VAR 0 4
43324: NOT
43325: IFFALSE 43329
// exit ;
43327: GO 43373
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
43329: LD_ADDR_VAR 0 3
43333: PUSH
43334: LD_VAR 0 4
43338: PUSH
43339: LD_INT 1
43341: ARRAY
43342: PUSH
43343: LD_INT 1
43345: ARRAY
43346: PUSH
43347: LD_STRING r
43349: EQUAL
43350: IFFALSE 43372
43352: PUSH
43353: LD_VAR 0 4
43357: PUSH
43358: LD_INT 1
43360: ARRAY
43361: PUSH
43362: LD_INT 4
43364: ARRAY
43365: PUSH
43366: LD_VAR 0 2
43370: EQUAL
43371: AND
43372: ST_TO_ADDR
// end ;
43373: LD_VAR 0 3
43377: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
43378: LD_INT 0
43380: PPUSH
// SetDir ( unit , d ) ;
43381: LD_VAR 0 1
43385: PPUSH
43386: LD_VAR 0 4
43390: PPUSH
43391: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
43395: LD_ADDR_VAR 0 6
43399: PUSH
43400: LD_VAR 0 1
43404: PPUSH
43405: LD_VAR 0 2
43409: PPUSH
43410: LD_VAR 0 3
43414: PPUSH
43415: LD_VAR 0 5
43419: PPUSH
43420: CALL_OW 48
43424: ST_TO_ADDR
// end ;
43425: LD_VAR 0 6
43429: RET
// export function ToNaturalNumber ( number ) ; begin
43430: LD_INT 0
43432: PPUSH
// result := number div 1 ;
43433: LD_ADDR_VAR 0 2
43437: PUSH
43438: LD_VAR 0 1
43442: PUSH
43443: LD_INT 1
43445: DIV
43446: ST_TO_ADDR
// if number < 0 then
43447: LD_VAR 0 1
43451: PUSH
43452: LD_INT 0
43454: LESS
43455: IFFALSE 43465
// result := 0 ;
43457: LD_ADDR_VAR 0 2
43461: PUSH
43462: LD_INT 0
43464: ST_TO_ADDR
// end ;
43465: LD_VAR 0 2
43469: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
43470: LD_INT 0
43472: PPUSH
43473: PPUSH
43474: PPUSH
// if not buildings then
43475: LD_VAR 0 1
43479: NOT
43480: IFFALSE 43484
// exit ;
43482: GO 43599
// tmp := [ ] ;
43484: LD_ADDR_VAR 0 5
43488: PUSH
43489: EMPTY
43490: ST_TO_ADDR
// for b in buildings do
43491: LD_ADDR_VAR 0 4
43495: PUSH
43496: LD_VAR 0 1
43500: PUSH
43501: FOR_IN
43502: IFFALSE 43540
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
43504: LD_ADDR_VAR 0 5
43508: PUSH
43509: LD_VAR 0 5
43513: PPUSH
43514: LD_VAR 0 5
43518: PUSH
43519: LD_INT 1
43521: PLUS
43522: PPUSH
43523: LD_VAR 0 4
43527: PPUSH
43528: CALL_OW 266
43532: PPUSH
43533: CALL_OW 1
43537: ST_TO_ADDR
43538: GO 43501
43540: POP
43541: POP
// if not tmp then
43542: LD_VAR 0 5
43546: NOT
43547: IFFALSE 43551
// exit ;
43549: GO 43599
// if asc then
43551: LD_VAR 0 2
43555: IFFALSE 43579
// result := SortListByListAsc ( buildings , tmp ) else
43557: LD_ADDR_VAR 0 3
43561: PUSH
43562: LD_VAR 0 1
43566: PPUSH
43567: LD_VAR 0 5
43571: PPUSH
43572: CALL_OW 76
43576: ST_TO_ADDR
43577: GO 43599
// result := SortListByListDesc ( buildings , tmp ) ;
43579: LD_ADDR_VAR 0 3
43583: PUSH
43584: LD_VAR 0 1
43588: PPUSH
43589: LD_VAR 0 5
43593: PPUSH
43594: CALL_OW 77
43598: ST_TO_ADDR
// end ;
43599: LD_VAR 0 3
43603: RET
// export function SortByClass ( units , class ) ; var un ; begin
43604: LD_INT 0
43606: PPUSH
43607: PPUSH
// if not units or not class then
43608: LD_VAR 0 1
43612: NOT
43613: IFTRUE 43622
43615: PUSH
43616: LD_VAR 0 2
43620: NOT
43621: OR
43622: IFFALSE 43626
// exit ;
43624: GO 43721
// result := [ ] ;
43626: LD_ADDR_VAR 0 3
43630: PUSH
43631: EMPTY
43632: ST_TO_ADDR
// for un in units do
43633: LD_ADDR_VAR 0 4
43637: PUSH
43638: LD_VAR 0 1
43642: PUSH
43643: FOR_IN
43644: IFFALSE 43719
// if GetClass ( un ) = class then
43646: LD_VAR 0 4
43650: PPUSH
43651: CALL_OW 257
43655: PUSH
43656: LD_VAR 0 2
43660: EQUAL
43661: IFFALSE 43688
// result := Insert ( result , 1 , un ) else
43663: LD_ADDR_VAR 0 3
43667: PUSH
43668: LD_VAR 0 3
43672: PPUSH
43673: LD_INT 1
43675: PPUSH
43676: LD_VAR 0 4
43680: PPUSH
43681: CALL_OW 2
43685: ST_TO_ADDR
43686: GO 43717
// result := Replace ( result , result + 1 , un ) ;
43688: LD_ADDR_VAR 0 3
43692: PUSH
43693: LD_VAR 0 3
43697: PPUSH
43698: LD_VAR 0 3
43702: PUSH
43703: LD_INT 1
43705: PLUS
43706: PPUSH
43707: LD_VAR 0 4
43711: PPUSH
43712: CALL_OW 1
43716: ST_TO_ADDR
43717: GO 43643
43719: POP
43720: POP
// end ;
43721: LD_VAR 0 3
43725: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
43726: LD_INT 0
43728: PPUSH
43729: PPUSH
43730: PPUSH
43731: PPUSH
43732: PPUSH
43733: PPUSH
43734: PPUSH
// result := [ ] ;
43735: LD_ADDR_VAR 0 4
43739: PUSH
43740: EMPTY
43741: ST_TO_ADDR
// if x - r < 0 then
43742: LD_VAR 0 1
43746: PUSH
43747: LD_VAR 0 3
43751: MINUS
43752: PUSH
43753: LD_INT 0
43755: LESS
43756: IFFALSE 43768
// min_x := 0 else
43758: LD_ADDR_VAR 0 8
43762: PUSH
43763: LD_INT 0
43765: ST_TO_ADDR
43766: GO 43784
// min_x := x - r ;
43768: LD_ADDR_VAR 0 8
43772: PUSH
43773: LD_VAR 0 1
43777: PUSH
43778: LD_VAR 0 3
43782: MINUS
43783: ST_TO_ADDR
// if y - r < 0 then
43784: LD_VAR 0 2
43788: PUSH
43789: LD_VAR 0 3
43793: MINUS
43794: PUSH
43795: LD_INT 0
43797: LESS
43798: IFFALSE 43810
// min_y := 0 else
43800: LD_ADDR_VAR 0 7
43804: PUSH
43805: LD_INT 0
43807: ST_TO_ADDR
43808: GO 43826
// min_y := y - r ;
43810: LD_ADDR_VAR 0 7
43814: PUSH
43815: LD_VAR 0 2
43819: PUSH
43820: LD_VAR 0 3
43824: MINUS
43825: ST_TO_ADDR
// max_x := x + r ;
43826: LD_ADDR_VAR 0 9
43830: PUSH
43831: LD_VAR 0 1
43835: PUSH
43836: LD_VAR 0 3
43840: PLUS
43841: ST_TO_ADDR
// max_y := y + r ;
43842: LD_ADDR_VAR 0 10
43846: PUSH
43847: LD_VAR 0 2
43851: PUSH
43852: LD_VAR 0 3
43856: PLUS
43857: ST_TO_ADDR
// for _x = min_x to max_x do
43858: LD_ADDR_VAR 0 5
43862: PUSH
43863: DOUBLE
43864: LD_VAR 0 8
43868: DEC
43869: ST_TO_ADDR
43870: LD_VAR 0 9
43874: PUSH
43875: FOR_TO
43876: IFFALSE 43977
// for _y = min_y to max_y do
43878: LD_ADDR_VAR 0 6
43882: PUSH
43883: DOUBLE
43884: LD_VAR 0 7
43888: DEC
43889: ST_TO_ADDR
43890: LD_VAR 0 10
43894: PUSH
43895: FOR_TO
43896: IFFALSE 43973
// begin if not ValidHex ( _x , _y ) then
43898: LD_VAR 0 5
43902: PPUSH
43903: LD_VAR 0 6
43907: PPUSH
43908: CALL_OW 488
43912: NOT
43913: IFFALSE 43917
// continue ;
43915: GO 43895
// if GetResourceTypeXY ( _x , _y ) then
43917: LD_VAR 0 5
43921: PPUSH
43922: LD_VAR 0 6
43926: PPUSH
43927: CALL_OW 283
43931: IFFALSE 43971
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
43933: LD_ADDR_VAR 0 4
43937: PUSH
43938: LD_VAR 0 4
43942: PPUSH
43943: LD_VAR 0 4
43947: PUSH
43948: LD_INT 1
43950: PLUS
43951: PPUSH
43952: LD_VAR 0 5
43956: PUSH
43957: LD_VAR 0 6
43961: PUSH
43962: EMPTY
43963: LIST
43964: LIST
43965: PPUSH
43966: CALL_OW 1
43970: ST_TO_ADDR
// end ;
43971: GO 43895
43973: POP
43974: POP
43975: GO 43875
43977: POP
43978: POP
// end ;
43979: LD_VAR 0 4
43983: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
43984: LD_INT 0
43986: PPUSH
43987: PPUSH
43988: PPUSH
43989: PPUSH
43990: PPUSH
43991: PPUSH
43992: PPUSH
43993: PPUSH
// if not units then
43994: LD_VAR 0 1
43998: NOT
43999: IFFALSE 44003
// exit ;
44001: GO 44535
// result := UnitFilter ( units , [ f_ok ] ) ;
44003: LD_ADDR_VAR 0 3
44007: PUSH
44008: LD_VAR 0 1
44012: PPUSH
44013: LD_INT 50
44015: PUSH
44016: EMPTY
44017: LIST
44018: PPUSH
44019: CALL_OW 72
44023: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
44024: LD_ADDR_VAR 0 8
44028: PUSH
44029: LD_VAR 0 1
44033: PUSH
44034: LD_INT 1
44036: ARRAY
44037: PPUSH
44038: CALL_OW 255
44042: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
44043: LD_ADDR_VAR 0 10
44047: PUSH
44048: LD_INT 29
44050: PUSH
44051: LD_INT 91
44053: PUSH
44054: LD_INT 49
44056: PUSH
44057: EMPTY
44058: LIST
44059: LIST
44060: LIST
44061: ST_TO_ADDR
// if not result then
44062: LD_VAR 0 3
44066: NOT
44067: IFFALSE 44071
// exit ;
44069: GO 44535
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
44071: LD_ADDR_VAR 0 5
44075: PUSH
44076: LD_INT 81
44078: PUSH
44079: LD_VAR 0 8
44083: PUSH
44084: EMPTY
44085: LIST
44086: LIST
44087: PPUSH
44088: CALL_OW 69
44092: ST_TO_ADDR
// for i in result do
44093: LD_ADDR_VAR 0 4
44097: PUSH
44098: LD_VAR 0 3
44102: PUSH
44103: FOR_IN
44104: IFFALSE 44533
// begin tag := GetTag ( i ) + 1 ;
44106: LD_ADDR_VAR 0 9
44110: PUSH
44111: LD_VAR 0 4
44115: PPUSH
44116: CALL_OW 110
44120: PUSH
44121: LD_INT 1
44123: PLUS
44124: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
44125: LD_ADDR_VAR 0 7
44129: PUSH
44130: LD_VAR 0 4
44134: PPUSH
44135: CALL_OW 250
44139: PPUSH
44140: LD_VAR 0 4
44144: PPUSH
44145: CALL_OW 251
44149: PPUSH
44150: LD_INT 4
44152: PPUSH
44153: CALL 43726 0 3
44157: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
44158: LD_VAR 0 4
44162: PPUSH
44163: CALL_OW 247
44167: PUSH
44168: LD_INT 2
44170: EQUAL
44171: IFFALSE 44183
44173: PUSH
44174: LD_VAR 0 7
44178: PUSH
44179: LD_INT 2
44181: GREATER
44182: AND
44183: IFFALSE 44203
44185: PUSH
44186: LD_VAR 0 4
44190: PPUSH
44191: CALL_OW 264
44195: PUSH
44196: LD_VAR 0 10
44200: IN
44201: NOT
44202: AND
44203: IFFALSE 44242
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
44205: LD_VAR 0 4
44209: PPUSH
44210: LD_VAR 0 7
44214: PUSH
44215: LD_INT 1
44217: ARRAY
44218: PUSH
44219: LD_INT 1
44221: ARRAY
44222: PPUSH
44223: LD_VAR 0 7
44227: PUSH
44228: LD_INT 1
44230: ARRAY
44231: PUSH
44232: LD_INT 2
44234: ARRAY
44235: PPUSH
44236: CALL_OW 116
44240: GO 44531
// if path > tag then
44242: LD_VAR 0 2
44246: PUSH
44247: LD_VAR 0 9
44251: GREATER
44252: IFFALSE 44460
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
44254: LD_ADDR_VAR 0 6
44258: PUSH
44259: LD_VAR 0 5
44263: PPUSH
44264: LD_INT 91
44266: PUSH
44267: LD_VAR 0 4
44271: PUSH
44272: LD_INT 8
44274: PUSH
44275: EMPTY
44276: LIST
44277: LIST
44278: LIST
44279: PPUSH
44280: CALL_OW 72
44284: ST_TO_ADDR
// if nearEnemy then
44285: LD_VAR 0 6
44289: IFFALSE 44358
// begin if GetWeapon ( i ) = ru_time_lapser then
44291: LD_VAR 0 4
44295: PPUSH
44296: CALL_OW 264
44300: PUSH
44301: LD_INT 49
44303: EQUAL
44304: IFFALSE 44332
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
44306: LD_VAR 0 4
44310: PPUSH
44311: LD_VAR 0 6
44315: PPUSH
44316: LD_VAR 0 4
44320: PPUSH
44321: CALL_OW 74
44325: PPUSH
44326: CALL_OW 112
44330: GO 44356
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
44332: LD_VAR 0 4
44336: PPUSH
44337: LD_VAR 0 6
44341: PPUSH
44342: LD_VAR 0 4
44346: PPUSH
44347: CALL_OW 74
44351: PPUSH
44352: CALL 45616 0 2
// end else
44356: GO 44458
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
44358: LD_VAR 0 4
44362: PPUSH
44363: LD_VAR 0 2
44367: PUSH
44368: LD_VAR 0 9
44372: ARRAY
44373: PUSH
44374: LD_INT 1
44376: ARRAY
44377: PPUSH
44378: LD_VAR 0 2
44382: PUSH
44383: LD_VAR 0 9
44387: ARRAY
44388: PUSH
44389: LD_INT 2
44391: ARRAY
44392: PPUSH
44393: CALL_OW 297
44397: PUSH
44398: LD_INT 6
44400: GREATER
44401: IFFALSE 44444
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
44403: LD_VAR 0 4
44407: PPUSH
44408: LD_VAR 0 2
44412: PUSH
44413: LD_VAR 0 9
44417: ARRAY
44418: PUSH
44419: LD_INT 1
44421: ARRAY
44422: PPUSH
44423: LD_VAR 0 2
44427: PUSH
44428: LD_VAR 0 9
44432: ARRAY
44433: PUSH
44434: LD_INT 2
44436: ARRAY
44437: PPUSH
44438: CALL_OW 114
44442: GO 44458
// SetTag ( i , tag ) ;
44444: LD_VAR 0 4
44448: PPUSH
44449: LD_VAR 0 9
44453: PPUSH
44454: CALL_OW 109
// end else
44458: GO 44531
// if enemy then
44460: LD_VAR 0 5
44464: IFFALSE 44531
// begin if GetWeapon ( i ) = ru_time_lapser then
44466: LD_VAR 0 4
44470: PPUSH
44471: CALL_OW 264
44475: PUSH
44476: LD_INT 49
44478: EQUAL
44479: IFFALSE 44507
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
44481: LD_VAR 0 4
44485: PPUSH
44486: LD_VAR 0 5
44490: PPUSH
44491: LD_VAR 0 4
44495: PPUSH
44496: CALL_OW 74
44500: PPUSH
44501: CALL_OW 112
44505: GO 44531
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
44507: LD_VAR 0 4
44511: PPUSH
44512: LD_VAR 0 5
44516: PPUSH
44517: LD_VAR 0 4
44521: PPUSH
44522: CALL_OW 74
44526: PPUSH
44527: CALL 45616 0 2
// end ; end ;
44531: GO 44103
44533: POP
44534: POP
// end ;
44535: LD_VAR 0 3
44539: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
44540: LD_INT 0
44542: PPUSH
44543: PPUSH
44544: PPUSH
// if not unit or IsInUnit ( unit ) then
44545: LD_VAR 0 1
44549: NOT
44550: IFTRUE 44563
44552: PUSH
44553: LD_VAR 0 1
44557: PPUSH
44558: CALL_OW 310
44562: OR
44563: IFFALSE 44567
// exit ;
44565: GO 44658
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
44567: LD_ADDR_VAR 0 4
44571: PUSH
44572: LD_VAR 0 1
44576: PPUSH
44577: CALL_OW 250
44581: PPUSH
44582: LD_VAR 0 2
44586: PPUSH
44587: LD_INT 1
44589: PPUSH
44590: CALL_OW 272
44594: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
44595: LD_ADDR_VAR 0 5
44599: PUSH
44600: LD_VAR 0 1
44604: PPUSH
44605: CALL_OW 251
44609: PPUSH
44610: LD_VAR 0 2
44614: PPUSH
44615: LD_INT 1
44617: PPUSH
44618: CALL_OW 273
44622: ST_TO_ADDR
// if ValidHex ( x , y ) then
44623: LD_VAR 0 4
44627: PPUSH
44628: LD_VAR 0 5
44632: PPUSH
44633: CALL_OW 488
44637: IFFALSE 44658
// ComTurnXY ( unit , x , y ) ;
44639: LD_VAR 0 1
44643: PPUSH
44644: LD_VAR 0 4
44648: PPUSH
44649: LD_VAR 0 5
44653: PPUSH
44654: CALL_OW 118
// end ;
44658: LD_VAR 0 3
44662: RET
// export function SeeUnits ( side , units ) ; var i ; begin
44663: LD_INT 0
44665: PPUSH
44666: PPUSH
// result := false ;
44667: LD_ADDR_VAR 0 3
44671: PUSH
44672: LD_INT 0
44674: ST_TO_ADDR
// if not units then
44675: LD_VAR 0 2
44679: NOT
44680: IFFALSE 44684
// exit ;
44682: GO 44729
// for i in units do
44684: LD_ADDR_VAR 0 4
44688: PUSH
44689: LD_VAR 0 2
44693: PUSH
44694: FOR_IN
44695: IFFALSE 44727
// if See ( side , i ) then
44697: LD_VAR 0 1
44701: PPUSH
44702: LD_VAR 0 4
44706: PPUSH
44707: CALL_OW 292
44711: IFFALSE 44725
// begin result := true ;
44713: LD_ADDR_VAR 0 3
44717: PUSH
44718: LD_INT 1
44720: ST_TO_ADDR
// exit ;
44721: POP
44722: POP
44723: GO 44729
// end ;
44725: GO 44694
44727: POP
44728: POP
// end ;
44729: LD_VAR 0 3
44733: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
44734: LD_INT 0
44736: PPUSH
44737: PPUSH
44738: PPUSH
44739: PPUSH
// if not unit or not points then
44740: LD_VAR 0 1
44744: NOT
44745: IFTRUE 44754
44747: PUSH
44748: LD_VAR 0 2
44752: NOT
44753: OR
44754: IFFALSE 44758
// exit ;
44756: GO 44848
// dist := 99999 ;
44758: LD_ADDR_VAR 0 5
44762: PUSH
44763: LD_INT 99999
44765: ST_TO_ADDR
// for i in points do
44766: LD_ADDR_VAR 0 4
44770: PUSH
44771: LD_VAR 0 2
44775: PUSH
44776: FOR_IN
44777: IFFALSE 44846
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
44779: LD_ADDR_VAR 0 6
44783: PUSH
44784: LD_VAR 0 1
44788: PPUSH
44789: LD_VAR 0 4
44793: PUSH
44794: LD_INT 1
44796: ARRAY
44797: PPUSH
44798: LD_VAR 0 4
44802: PUSH
44803: LD_INT 2
44805: ARRAY
44806: PPUSH
44807: CALL_OW 297
44811: ST_TO_ADDR
// if tmpDist < dist then
44812: LD_VAR 0 6
44816: PUSH
44817: LD_VAR 0 5
44821: LESS
44822: IFFALSE 44844
// begin result := i ;
44824: LD_ADDR_VAR 0 3
44828: PUSH
44829: LD_VAR 0 4
44833: ST_TO_ADDR
// dist := tmpDist ;
44834: LD_ADDR_VAR 0 5
44838: PUSH
44839: LD_VAR 0 6
44843: ST_TO_ADDR
// end ; end ;
44844: GO 44776
44846: POP
44847: POP
// end ;
44848: LD_VAR 0 3
44852: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
44853: LD_INT 0
44855: PPUSH
// uc_side := side ;
44856: LD_ADDR_OWVAR 20
44860: PUSH
44861: LD_VAR 0 1
44865: ST_TO_ADDR
// uc_nation := 3 ;
44866: LD_ADDR_OWVAR 21
44870: PUSH
44871: LD_INT 3
44873: ST_TO_ADDR
// vc_chassis := 25 ;
44874: LD_ADDR_OWVAR 37
44878: PUSH
44879: LD_INT 25
44881: ST_TO_ADDR
// vc_engine := engine_siberite ;
44882: LD_ADDR_OWVAR 39
44886: PUSH
44887: LD_INT 3
44889: ST_TO_ADDR
// vc_control := control_computer ;
44890: LD_ADDR_OWVAR 38
44894: PUSH
44895: LD_INT 3
44897: ST_TO_ADDR
// vc_weapon := 59 ;
44898: LD_ADDR_OWVAR 40
44902: PUSH
44903: LD_INT 59
44905: ST_TO_ADDR
// result := CreateVehicle ;
44906: LD_ADDR_VAR 0 5
44910: PUSH
44911: CALL_OW 45
44915: ST_TO_ADDR
// SetDir ( result , d ) ;
44916: LD_VAR 0 5
44920: PPUSH
44921: LD_VAR 0 4
44925: PPUSH
44926: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
44930: LD_VAR 0 5
44934: PPUSH
44935: LD_VAR 0 2
44939: PPUSH
44940: LD_VAR 0 3
44944: PPUSH
44945: LD_INT 0
44947: PPUSH
44948: CALL_OW 48
// end ;
44952: LD_VAR 0 5
44956: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
44957: LD_INT 0
44959: PPUSH
44960: PPUSH
44961: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
44962: LD_ADDR_VAR 0 2
44966: PUSH
44967: LD_INT 0
44969: PUSH
44970: LD_INT 0
44972: PUSH
44973: LD_INT 0
44975: PUSH
44976: LD_INT 0
44978: PUSH
44979: EMPTY
44980: LIST
44981: LIST
44982: LIST
44983: LIST
44984: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
44985: LD_VAR 0 1
44989: NOT
44990: IFTRUE 45023
44992: PUSH
44993: LD_VAR 0 1
44997: PPUSH
44998: CALL_OW 264
45002: PUSH
45003: LD_INT 12
45005: PUSH
45006: LD_INT 51
45008: PUSH
45009: LD_INT 32
45011: PUSH
45012: LD_INT 89
45014: PUSH
45015: EMPTY
45016: LIST
45017: LIST
45018: LIST
45019: LIST
45020: IN
45021: NOT
45022: OR
45023: IFFALSE 45027
// exit ;
45025: GO 45125
// for i := 1 to 3 do
45027: LD_ADDR_VAR 0 3
45031: PUSH
45032: DOUBLE
45033: LD_INT 1
45035: DEC
45036: ST_TO_ADDR
45037: LD_INT 3
45039: PUSH
45040: FOR_TO
45041: IFFALSE 45123
// begin tmp := GetCargo ( cargo , i ) ;
45043: LD_ADDR_VAR 0 4
45047: PUSH
45048: LD_VAR 0 1
45052: PPUSH
45053: LD_VAR 0 3
45057: PPUSH
45058: CALL_OW 289
45062: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
45063: LD_ADDR_VAR 0 2
45067: PUSH
45068: LD_VAR 0 2
45072: PPUSH
45073: LD_VAR 0 3
45077: PPUSH
45078: LD_VAR 0 4
45082: PPUSH
45083: CALL_OW 1
45087: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
45088: LD_ADDR_VAR 0 2
45092: PUSH
45093: LD_VAR 0 2
45097: PPUSH
45098: LD_INT 4
45100: PPUSH
45101: LD_VAR 0 2
45105: PUSH
45106: LD_INT 4
45108: ARRAY
45109: PUSH
45110: LD_VAR 0 4
45114: PLUS
45115: PPUSH
45116: CALL_OW 1
45120: ST_TO_ADDR
// end ;
45121: GO 45040
45123: POP
45124: POP
// end ;
45125: LD_VAR 0 2
45129: RET
// export function Length ( array ) ; begin
45130: LD_INT 0
45132: PPUSH
// result := array + 0 ;
45133: LD_ADDR_VAR 0 2
45137: PUSH
45138: LD_VAR 0 1
45142: PUSH
45143: LD_INT 0
45145: PLUS
45146: ST_TO_ADDR
// end ;
45147: LD_VAR 0 2
45151: RET
// export function PrepareArray ( array ) ; begin
45152: LD_INT 0
45154: PPUSH
// result := array diff 0 ;
45155: LD_ADDR_VAR 0 2
45159: PUSH
45160: LD_VAR 0 1
45164: PUSH
45165: LD_INT 0
45167: DIFF
45168: ST_TO_ADDR
// if not result [ 1 ] then
45169: LD_VAR 0 2
45173: PUSH
45174: LD_INT 1
45176: ARRAY
45177: NOT
45178: IFFALSE 45198
// result := Delete ( result , 1 ) ;
45180: LD_ADDR_VAR 0 2
45184: PUSH
45185: LD_VAR 0 2
45189: PPUSH
45190: LD_INT 1
45192: PPUSH
45193: CALL_OW 3
45197: ST_TO_ADDR
// end ;
45198: LD_VAR 0 2
45202: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
45203: LD_INT 0
45205: PPUSH
45206: PPUSH
45207: PPUSH
45208: PPUSH
// sibRocketRange := 25 ;
45209: LD_ADDR_VAR 0 6
45213: PUSH
45214: LD_INT 25
45216: ST_TO_ADDR
// result := false ;
45217: LD_ADDR_VAR 0 4
45221: PUSH
45222: LD_INT 0
45224: ST_TO_ADDR
// for i := 0 to 5 do
45225: LD_ADDR_VAR 0 5
45229: PUSH
45230: DOUBLE
45231: LD_INT 0
45233: DEC
45234: ST_TO_ADDR
45235: LD_INT 5
45237: PUSH
45238: FOR_TO
45239: IFFALSE 45306
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
45241: LD_VAR 0 1
45245: PPUSH
45246: LD_VAR 0 5
45250: PPUSH
45251: LD_VAR 0 6
45255: PPUSH
45256: CALL_OW 272
45260: PPUSH
45261: LD_VAR 0 2
45265: PPUSH
45266: LD_VAR 0 5
45270: PPUSH
45271: LD_VAR 0 6
45275: PPUSH
45276: CALL_OW 273
45280: PPUSH
45281: LD_VAR 0 3
45285: PPUSH
45286: CALL_OW 309
45290: IFFALSE 45304
// begin result := true ;
45292: LD_ADDR_VAR 0 4
45296: PUSH
45297: LD_INT 1
45299: ST_TO_ADDR
// exit ;
45300: POP
45301: POP
45302: GO 45308
// end ;
45304: GO 45238
45306: POP
45307: POP
// end ;
45308: LD_VAR 0 4
45312: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
45313: LD_INT 0
45315: PPUSH
45316: PPUSH
45317: PPUSH
// if btype = b_depot then
45318: LD_VAR 0 2
45322: PUSH
45323: LD_INT 0
45325: EQUAL
45326: IFFALSE 45338
// begin result := true ;
45328: LD_ADDR_VAR 0 3
45332: PUSH
45333: LD_INT 1
45335: ST_TO_ADDR
// exit ;
45336: GO 45458
// end ; pom := GetBase ( depot ) ;
45338: LD_ADDR_VAR 0 4
45342: PUSH
45343: LD_VAR 0 1
45347: PPUSH
45348: CALL_OW 274
45352: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
45353: LD_ADDR_VAR 0 5
45357: PUSH
45358: LD_VAR 0 2
45362: PPUSH
45363: LD_VAR 0 1
45367: PPUSH
45368: CALL_OW 248
45372: PPUSH
45373: CALL_OW 450
45377: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
45378: LD_ADDR_VAR 0 3
45382: PUSH
45383: LD_VAR 0 4
45387: PPUSH
45388: LD_INT 1
45390: PPUSH
45391: CALL_OW 275
45395: PUSH
45396: LD_VAR 0 5
45400: PUSH
45401: LD_INT 1
45403: ARRAY
45404: GREATEREQUAL
45405: IFFALSE 45431
45407: PUSH
45408: LD_VAR 0 4
45412: PPUSH
45413: LD_INT 2
45415: PPUSH
45416: CALL_OW 275
45420: PUSH
45421: LD_VAR 0 5
45425: PUSH
45426: LD_INT 2
45428: ARRAY
45429: GREATEREQUAL
45430: AND
45431: IFFALSE 45457
45433: PUSH
45434: LD_VAR 0 4
45438: PPUSH
45439: LD_INT 3
45441: PPUSH
45442: CALL_OW 275
45446: PUSH
45447: LD_VAR 0 5
45451: PUSH
45452: LD_INT 3
45454: ARRAY
45455: GREATEREQUAL
45456: AND
45457: ST_TO_ADDR
// end ;
45458: LD_VAR 0 3
45462: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
45463: LD_INT 0
45465: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
45466: LD_VAR 0 1
45470: PPUSH
45471: LD_VAR 0 2
45475: PPUSH
45476: LD_INT 0
45478: PPUSH
45479: LD_INT 0
45481: PPUSH
45482: LD_INT 1
45484: PPUSH
45485: LD_INT 0
45487: PPUSH
45488: CALL_OW 587
// end ;
45492: LD_VAR 0 3
45496: RET
// export function CenterOnNow ( unit ) ; begin
45497: LD_INT 0
45499: PPUSH
// result := IsInUnit ( unit ) ;
45500: LD_ADDR_VAR 0 2
45504: PUSH
45505: LD_VAR 0 1
45509: PPUSH
45510: CALL_OW 310
45514: ST_TO_ADDR
// if not result then
45515: LD_VAR 0 2
45519: NOT
45520: IFFALSE 45532
// result := unit ;
45522: LD_ADDR_VAR 0 2
45526: PUSH
45527: LD_VAR 0 1
45531: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
45532: LD_VAR 0 1
45536: PPUSH
45537: CALL_OW 87
// end ;
45541: LD_VAR 0 2
45545: RET
// export function ComMoveHex ( unit , hex ) ; begin
45546: LD_INT 0
45548: PPUSH
// if not hex then
45549: LD_VAR 0 2
45553: NOT
45554: IFFALSE 45558
// exit ;
45556: GO 45611
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
45558: LD_VAR 0 2
45562: PUSH
45563: LD_INT 1
45565: ARRAY
45566: PPUSH
45567: LD_VAR 0 2
45571: PUSH
45572: LD_INT 2
45574: ARRAY
45575: PPUSH
45576: CALL_OW 428
45580: IFFALSE 45584
// exit ;
45582: GO 45611
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
45584: LD_VAR 0 1
45588: PPUSH
45589: LD_VAR 0 2
45593: PUSH
45594: LD_INT 1
45596: ARRAY
45597: PPUSH
45598: LD_VAR 0 2
45602: PUSH
45603: LD_INT 2
45605: ARRAY
45606: PPUSH
45607: CALL_OW 111
// end ;
45611: LD_VAR 0 3
45615: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
45616: LD_INT 0
45618: PPUSH
45619: PPUSH
45620: PPUSH
// if not unit or not enemy then
45621: LD_VAR 0 1
45625: NOT
45626: IFTRUE 45635
45628: PUSH
45629: LD_VAR 0 2
45633: NOT
45634: OR
45635: IFFALSE 45639
// exit ;
45637: GO 45765
// x := GetX ( enemy ) ;
45639: LD_ADDR_VAR 0 4
45643: PUSH
45644: LD_VAR 0 2
45648: PPUSH
45649: CALL_OW 250
45653: ST_TO_ADDR
// y := GetY ( enemy ) ;
45654: LD_ADDR_VAR 0 5
45658: PUSH
45659: LD_VAR 0 2
45663: PPUSH
45664: CALL_OW 251
45668: ST_TO_ADDR
// if ValidHex ( x , y ) then
45669: LD_VAR 0 4
45673: PPUSH
45674: LD_VAR 0 5
45678: PPUSH
45679: CALL_OW 488
45683: IFFALSE 45765
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
45685: LD_VAR 0 2
45689: PPUSH
45690: CALL_OW 247
45694: PUSH
45695: LD_INT 3
45697: PUSH
45698: LD_INT 2
45700: PUSH
45701: EMPTY
45702: LIST
45703: LIST
45704: IN
45705: IFTRUE 45728
45707: PUSH
45708: LD_VAR 0 1
45712: PPUSH
45713: CALL_OW 255
45717: PPUSH
45718: LD_VAR 0 2
45722: PPUSH
45723: CALL_OW 292
45727: OR
45728: IFFALSE 45746
// ComAttackUnit ( unit , enemy ) else
45730: LD_VAR 0 1
45734: PPUSH
45735: LD_VAR 0 2
45739: PPUSH
45740: CALL_OW 115
45744: GO 45765
// ComAgressiveMove ( unit , x , y ) ;
45746: LD_VAR 0 1
45750: PPUSH
45751: LD_VAR 0 4
45755: PPUSH
45756: LD_VAR 0 5
45760: PPUSH
45761: CALL_OW 114
// end ;
45765: LD_VAR 0 3
45769: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
45770: LD_INT 0
45772: PPUSH
45773: PPUSH
45774: PPUSH
// list := AreaToList ( area , 0 ) ;
45775: LD_ADDR_VAR 0 5
45779: PUSH
45780: LD_VAR 0 1
45784: PPUSH
45785: LD_INT 0
45787: PPUSH
45788: CALL_OW 517
45792: ST_TO_ADDR
// if not list then
45793: LD_VAR 0 5
45797: NOT
45798: IFFALSE 45802
// exit ;
45800: GO 45932
// if all then
45802: LD_VAR 0 2
45806: IFFALSE 45894
// begin for i := 1 to list [ 1 ] do
45808: LD_ADDR_VAR 0 4
45812: PUSH
45813: DOUBLE
45814: LD_INT 1
45816: DEC
45817: ST_TO_ADDR
45818: LD_VAR 0 5
45822: PUSH
45823: LD_INT 1
45825: ARRAY
45826: PUSH
45827: FOR_TO
45828: IFFALSE 45890
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
45830: LD_ADDR_VAR 0 3
45834: PUSH
45835: LD_VAR 0 3
45839: PPUSH
45840: LD_VAR 0 3
45844: PUSH
45845: LD_INT 1
45847: PLUS
45848: PPUSH
45849: LD_VAR 0 5
45853: PUSH
45854: LD_INT 1
45856: ARRAY
45857: PUSH
45858: LD_VAR 0 4
45862: ARRAY
45863: PUSH
45864: LD_VAR 0 5
45868: PUSH
45869: LD_INT 2
45871: ARRAY
45872: PUSH
45873: LD_VAR 0 4
45877: ARRAY
45878: PUSH
45879: EMPTY
45880: LIST
45881: LIST
45882: PPUSH
45883: CALL_OW 1
45887: ST_TO_ADDR
45888: GO 45827
45890: POP
45891: POP
// exit ;
45892: GO 45932
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
45894: LD_ADDR_VAR 0 3
45898: PUSH
45899: LD_VAR 0 5
45903: PUSH
45904: LD_INT 1
45906: ARRAY
45907: PUSH
45908: LD_INT 1
45910: ARRAY
45911: PUSH
45912: LD_VAR 0 5
45916: PUSH
45917: LD_INT 2
45919: ARRAY
45920: PUSH
45921: LD_INT 1
45923: ARRAY
45924: PUSH
45925: EMPTY
45926: LIST
45927: LIST
45928: PUSH
45929: EMPTY
45930: LIST
45931: ST_TO_ADDR
// end ;
45932: LD_VAR 0 3
45936: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
45937: LD_INT 0
45939: PPUSH
45940: PPUSH
// list := AreaToList ( area , 0 ) ;
45941: LD_ADDR_VAR 0 4
45945: PUSH
45946: LD_VAR 0 1
45950: PPUSH
45951: LD_INT 0
45953: PPUSH
45954: CALL_OW 517
45958: ST_TO_ADDR
// if not list then
45959: LD_VAR 0 4
45963: NOT
45964: IFFALSE 45968
// exit ;
45966: GO 46009
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
45968: LD_ADDR_VAR 0 3
45972: PUSH
45973: LD_VAR 0 4
45977: PUSH
45978: LD_INT 1
45980: ARRAY
45981: PUSH
45982: LD_INT 1
45984: ARRAY
45985: PUSH
45986: LD_VAR 0 4
45990: PUSH
45991: LD_INT 2
45993: ARRAY
45994: PUSH
45995: LD_INT 1
45997: ARRAY
45998: PUSH
45999: LD_VAR 0 2
46003: PUSH
46004: EMPTY
46005: LIST
46006: LIST
46007: LIST
46008: ST_TO_ADDR
// end ;
46009: LD_VAR 0 3
46013: RET
// export function First ( array ) ; begin
46014: LD_INT 0
46016: PPUSH
// if not array then
46017: LD_VAR 0 1
46021: NOT
46022: IFFALSE 46026
// exit ;
46024: GO 46040
// result := array [ 1 ] ;
46026: LD_ADDR_VAR 0 2
46030: PUSH
46031: LD_VAR 0 1
46035: PUSH
46036: LD_INT 1
46038: ARRAY
46039: ST_TO_ADDR
// end ;
46040: LD_VAR 0 2
46044: RET
// export function Last ( array ) ; begin
46045: LD_INT 0
46047: PPUSH
// if not array then
46048: LD_VAR 0 1
46052: NOT
46053: IFFALSE 46057
// exit ;
46055: GO 46073
// result := array [ array ] ;
46057: LD_ADDR_VAR 0 2
46061: PUSH
46062: LD_VAR 0 1
46066: PUSH
46067: LD_VAR 0 1
46071: ARRAY
46072: ST_TO_ADDR
// end ;
46073: LD_VAR 0 2
46077: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
46078: LD_INT 0
46080: PPUSH
46081: PPUSH
// result := [ ] ;
46082: LD_ADDR_VAR 0 5
46086: PUSH
46087: EMPTY
46088: ST_TO_ADDR
// if not array then
46089: LD_VAR 0 1
46093: NOT
46094: IFFALSE 46098
// exit ;
46096: GO 46210
// for i := 1 to array do
46098: LD_ADDR_VAR 0 6
46102: PUSH
46103: DOUBLE
46104: LD_INT 1
46106: DEC
46107: ST_TO_ADDR
46108: LD_VAR 0 1
46112: PUSH
46113: FOR_TO
46114: IFFALSE 46208
// if array [ i ] [ index ] = value then
46116: LD_VAR 0 1
46120: PUSH
46121: LD_VAR 0 6
46125: ARRAY
46126: PUSH
46127: LD_VAR 0 2
46131: ARRAY
46132: PUSH
46133: LD_VAR 0 3
46137: EQUAL
46138: IFFALSE 46206
// begin if indexColumn then
46140: LD_VAR 0 4
46144: IFFALSE 46180
// result := Join ( result , array [ i ] [ indexColumn ] ) else
46146: LD_ADDR_VAR 0 5
46150: PUSH
46151: LD_VAR 0 5
46155: PPUSH
46156: LD_VAR 0 1
46160: PUSH
46161: LD_VAR 0 6
46165: ARRAY
46166: PUSH
46167: LD_VAR 0 4
46171: ARRAY
46172: PPUSH
46173: CALL 41218 0 2
46177: ST_TO_ADDR
46178: GO 46206
// result := Join ( result , array [ i ] ) ;
46180: LD_ADDR_VAR 0 5
46184: PUSH
46185: LD_VAR 0 5
46189: PPUSH
46190: LD_VAR 0 1
46194: PUSH
46195: LD_VAR 0 6
46199: ARRAY
46200: PPUSH
46201: CALL 41218 0 2
46205: ST_TO_ADDR
// end ;
46206: GO 46113
46208: POP
46209: POP
// end ;
46210: LD_VAR 0 5
46214: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
46215: LD_INT 0
46217: PPUSH
// if not vehicles or not parkingPoint then
46218: LD_VAR 0 1
46222: NOT
46223: IFTRUE 46232
46225: PUSH
46226: LD_VAR 0 2
46230: NOT
46231: OR
46232: IFFALSE 46236
// exit ;
46234: GO 46334
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
46236: LD_ADDR_VAR 0 1
46240: PUSH
46241: LD_VAR 0 1
46245: PPUSH
46246: LD_INT 50
46248: PUSH
46249: EMPTY
46250: LIST
46251: PUSH
46252: LD_INT 3
46254: PUSH
46255: LD_INT 92
46257: PUSH
46258: LD_VAR 0 2
46262: PUSH
46263: LD_INT 1
46265: ARRAY
46266: PUSH
46267: LD_VAR 0 2
46271: PUSH
46272: LD_INT 2
46274: ARRAY
46275: PUSH
46276: LD_INT 8
46278: PUSH
46279: EMPTY
46280: LIST
46281: LIST
46282: LIST
46283: LIST
46284: PUSH
46285: EMPTY
46286: LIST
46287: LIST
46288: PUSH
46289: EMPTY
46290: LIST
46291: LIST
46292: PPUSH
46293: CALL_OW 72
46297: ST_TO_ADDR
// if not vehicles then
46298: LD_VAR 0 1
46302: NOT
46303: IFFALSE 46307
// exit ;
46305: GO 46334
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
46307: LD_VAR 0 1
46311: PPUSH
46312: LD_VAR 0 2
46316: PUSH
46317: LD_INT 1
46319: ARRAY
46320: PPUSH
46321: LD_VAR 0 2
46325: PUSH
46326: LD_INT 2
46328: ARRAY
46329: PPUSH
46330: CALL_OW 111
// end ;
46334: LD_VAR 0 3
46338: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
46339: LD_INT 0
46341: PPUSH
46342: PPUSH
46343: PPUSH
// if not side or not area then
46344: LD_VAR 0 1
46348: NOT
46349: IFTRUE 46358
46351: PUSH
46352: LD_VAR 0 2
46356: NOT
46357: OR
46358: IFFALSE 46362
// exit ;
46360: GO 46481
// tmp := AreaToList ( area , 0 ) ;
46362: LD_ADDR_VAR 0 5
46366: PUSH
46367: LD_VAR 0 2
46371: PPUSH
46372: LD_INT 0
46374: PPUSH
46375: CALL_OW 517
46379: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
46380: LD_ADDR_VAR 0 4
46384: PUSH
46385: DOUBLE
46386: LD_INT 1
46388: DEC
46389: ST_TO_ADDR
46390: LD_VAR 0 5
46394: PUSH
46395: LD_INT 1
46397: ARRAY
46398: PUSH
46399: FOR_TO
46400: IFFALSE 46479
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
46402: LD_VAR 0 5
46406: PUSH
46407: LD_INT 1
46409: ARRAY
46410: PUSH
46411: LD_VAR 0 4
46415: ARRAY
46416: PPUSH
46417: LD_VAR 0 5
46421: PUSH
46422: LD_INT 2
46424: ARRAY
46425: PUSH
46426: LD_VAR 0 4
46430: ARRAY
46431: PPUSH
46432: CALL_OW 351
46436: IFFALSE 46477
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
46438: LD_VAR 0 5
46442: PUSH
46443: LD_INT 1
46445: ARRAY
46446: PUSH
46447: LD_VAR 0 4
46451: ARRAY
46452: PPUSH
46453: LD_VAR 0 5
46457: PUSH
46458: LD_INT 2
46460: ARRAY
46461: PUSH
46462: LD_VAR 0 4
46466: ARRAY
46467: PPUSH
46468: LD_VAR 0 1
46472: PPUSH
46473: CALL_OW 244
// end ;
46477: GO 46399
46479: POP
46480: POP
// end ;
46481: LD_VAR 0 3
46485: RET
// export function UniqueArray ( array ) ; var i ; begin
46486: LD_INT 0
46488: PPUSH
46489: PPUSH
// result := [ ] ;
46490: LD_ADDR_VAR 0 2
46494: PUSH
46495: EMPTY
46496: ST_TO_ADDR
// if not array then
46497: LD_VAR 0 1
46501: NOT
46502: IFFALSE 46506
// exit ;
46504: GO 46567
// for i := 1 to array do
46506: LD_ADDR_VAR 0 3
46510: PUSH
46511: DOUBLE
46512: LD_INT 1
46514: DEC
46515: ST_TO_ADDR
46516: LD_VAR 0 1
46520: PUSH
46521: FOR_TO
46522: IFFALSE 46565
// if not array [ i ] in result then
46524: LD_VAR 0 1
46528: PUSH
46529: LD_VAR 0 3
46533: ARRAY
46534: PUSH
46535: LD_VAR 0 2
46539: IN
46540: NOT
46541: IFFALSE 46563
// result := Join ( result , i ) ;
46543: LD_ADDR_VAR 0 2
46547: PUSH
46548: LD_VAR 0 2
46552: PPUSH
46553: LD_VAR 0 3
46557: PPUSH
46558: CALL 41218 0 2
46562: ST_TO_ADDR
46563: GO 46521
46565: POP
46566: POP
// end ; end_of_file
46567: LD_VAR 0 2
46571: RET
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpCommanders , mpGlobalOilDeposits , mpGlobalSibDeposits , mpTeleports , mpArtifacts , mpTimeToWin , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
46572: LD_INT 0
46574: PPUSH
46575: PPUSH
// disable ( mpActive ) ;
46576: LD_INT 100
46578: DISABLE_MARKED
// disable ( mpWin ) ;
46579: LD_INT 101
46581: DISABLE_MARKED
// disable ( mpLose ) ;
46582: LD_INT 102
46584: DISABLE_MARKED
// mpGameType := 0 ;
46585: LD_ADDR_EXP 3
46589: PUSH
46590: LD_INT 0
46592: ST_TO_ADDR
// mpGameSettings := [ ] ;
46593: LD_ADDR_EXP 6
46597: PUSH
46598: EMPTY
46599: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
46600: LD_ADDR_EXP 4
46604: PUSH
46605: EMPTY
46606: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
46607: LD_ADDR_EXP 5
46611: PUSH
46612: EMPTY
46613: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
46614: LD_ADDR_EXP 29
46618: PUSH
46619: LD_INT 2
46621: PUSH
46622: LD_INT 2
46624: PUSH
46625: EMPTY
46626: LIST
46627: LIST
46628: ST_TO_ADDR
// mpOilDeposits := [ ] ;
46629: LD_ADDR_EXP 12
46633: PUSH
46634: EMPTY
46635: ST_TO_ADDR
// mpSibDeposits := [ ] ;
46636: LD_ADDR_EXP 13
46640: PUSH
46641: EMPTY
46642: ST_TO_ADDR
// mpGlobalOilDeposits := [ ] ;
46643: LD_ADDR_EXP 42
46647: PUSH
46648: EMPTY
46649: ST_TO_ADDR
// mpGlobalSibDeposits := [ ] ;
46650: LD_ADDR_EXP 43
46654: PUSH
46655: EMPTY
46656: ST_TO_ADDR
// mpDepots := [ ] ;
46657: LD_ADDR_EXP 14
46661: PUSH
46662: EMPTY
46663: ST_TO_ADDR
// mpBuildings := [ ] ;
46664: LD_ADDR_EXP 17
46668: PUSH
46669: EMPTY
46670: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
46671: LD_ADDR_EXP 18
46675: PUSH
46676: EMPTY
46677: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
46678: LD_ADDR_EXP 19
46682: PUSH
46683: EMPTY
46684: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
46685: LD_ADDR_EXP 20
46689: PUSH
46690: EMPTY
46691: ST_TO_ADDR
// mpStartingResources := [ ] ;
46692: LD_ADDR_EXP 15
46696: PUSH
46697: EMPTY
46698: ST_TO_ADDR
// mpStartPos := [ ] ;
46699: LD_ADDR_EXP 21
46703: PUSH
46704: EMPTY
46705: ST_TO_ADDR
// mpBattleFlag := - 1 ;
46706: LD_ADDR_EXP 22
46710: PUSH
46711: LD_INT 1
46713: NEG
46714: ST_TO_ADDR
// mpBattleFlags := [ ] ;
46715: LD_ADDR_EXP 23
46719: PUSH
46720: EMPTY
46721: ST_TO_ADDR
// mpApemans := [ ] ;
46722: LD_ADDR_EXP 30
46726: PUSH
46727: EMPTY
46728: ST_TO_ADDR
// mpApemansArea := [ ] ;
46729: LD_ADDR_EXP 31
46733: PUSH
46734: EMPTY
46735: ST_TO_ADDR
// mpRespawn := [ ] ;
46736: LD_ADDR_EXP 33
46740: PUSH
46741: EMPTY
46742: ST_TO_ADDR
// mpKingArea := 0 ;
46743: LD_ADDR_EXP 34
46747: PUSH
46748: LD_INT 0
46750: ST_TO_ADDR
// mpPoints := [ ] ;
46751: LD_ADDR_EXP 35
46755: PUSH
46756: EMPTY
46757: ST_TO_ADDR
// mpVehicles := 0 ;
46758: LD_ADDR_EXP 36
46762: PUSH
46763: LD_INT 0
46765: ST_TO_ADDR
// mpShipments := 0 ;
46766: LD_ADDR_EXP 27
46770: PUSH
46771: LD_INT 0
46773: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
46774: LD_ADDR_EXP 40
46778: PUSH
46779: EMPTY
46780: PUSH
46781: EMPTY
46782: PUSH
46783: EMPTY
46784: PUSH
46785: EMPTY
46786: PUSH
46787: EMPTY
46788: PUSH
46789: EMPTY
46790: PUSH
46791: EMPTY
46792: PUSH
46793: EMPTY
46794: PUSH
46795: EMPTY
46796: LIST
46797: LIST
46798: LIST
46799: LIST
46800: LIST
46801: LIST
46802: LIST
46803: LIST
46804: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
46805: LD_ADDR_EXP 32
46809: PUSH
46810: EMPTY
46811: PUSH
46812: EMPTY
46813: PUSH
46814: EMPTY
46815: PUSH
46816: EMPTY
46817: PUSH
46818: EMPTY
46819: PUSH
46820: EMPTY
46821: PUSH
46822: EMPTY
46823: PUSH
46824: EMPTY
46825: PUSH
46826: EMPTY
46827: LIST
46828: LIST
46829: LIST
46830: LIST
46831: LIST
46832: LIST
46833: LIST
46834: LIST
46835: ST_TO_ADDR
// mpCommanders := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
46836: LD_ADDR_EXP 41
46840: PUSH
46841: LD_INT 0
46843: PUSH
46844: LD_INT 0
46846: PUSH
46847: LD_INT 0
46849: PUSH
46850: LD_INT 0
46852: PUSH
46853: LD_INT 0
46855: PUSH
46856: LD_INT 0
46858: PUSH
46859: LD_INT 0
46861: PUSH
46862: LD_INT 0
46864: PUSH
46865: EMPTY
46866: LIST
46867: LIST
46868: LIST
46869: LIST
46870: LIST
46871: LIST
46872: LIST
46873: LIST
46874: ST_TO_ADDR
// mpEmissions := 0 ;
46875: LD_ADDR_EXP 37
46879: PUSH
46880: LD_INT 0
46882: ST_TO_ADDR
// mpTeleports := 0 ;
46883: LD_ADDR_EXP 44
46887: PUSH
46888: LD_INT 0
46890: ST_TO_ADDR
// mpArtifacts := 0 ;
46891: LD_ADDR_EXP 45
46895: PUSH
46896: LD_INT 0
46898: ST_TO_ADDR
// mpTimeToWin := 0 0$0 ;
46899: LD_ADDR_EXP 46
46903: PUSH
46904: LD_INT 0
46906: ST_TO_ADDR
// mpPeopleSkill := 3 ;
46907: LD_ADDR_EXP 25
46911: PUSH
46912: LD_INT 3
46914: ST_TO_ADDR
// mpPeopleAmount := 15 ;
46915: LD_ADDR_EXP 24
46919: PUSH
46920: LD_INT 15
46922: ST_TO_ADDR
// mpDisplayStrings := 0 ;
46923: LD_ADDR_EXP 38
46927: PUSH
46928: LD_INT 0
46930: ST_TO_ADDR
// mpGameActive := false ;
46931: LD_ADDR_EXP 39
46935: PUSH
46936: LD_INT 0
46938: ST_TO_ADDR
// mpBlockRespThread := false ;
46939: LD_ADDR_EXP 47
46943: PUSH
46944: LD_INT 0
46946: ST_TO_ADDR
// for i := 1 to 32 do
46947: LD_ADDR_VAR 0 2
46951: PUSH
46952: DOUBLE
46953: LD_INT 1
46955: DEC
46956: ST_TO_ADDR
46957: LD_INT 32
46959: PUSH
46960: FOR_TO
46961: IFFALSE 46988
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
46963: LD_ADDR_EXP 6
46967: PUSH
46968: LD_EXP 6
46972: PPUSH
46973: LD_VAR 0 2
46977: PPUSH
46978: LD_INT 0
46980: PPUSH
46981: CALL_OW 1
46985: ST_TO_ADDR
46986: GO 46960
46988: POP
46989: POP
// end ;
46990: LD_VAR 0 1
46994: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
46995: LD_INT 0
46997: PPUSH
46998: PPUSH
46999: PPUSH
47000: PPUSH
47001: PPUSH
47002: PPUSH
47003: PPUSH
47004: PPUSH
47005: PPUSH
47006: PPUSH
47007: PPUSH
47008: PPUSH
47009: PPUSH
47010: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact , GameTypeSurvivalHardcore ] ;
47011: LD_ADDR_VAR 0 14
47015: PUSH
47016: LD_INT 1
47018: PUSH
47019: LD_INT 2
47021: PUSH
47022: LD_INT 3
47024: PUSH
47025: LD_INT 5
47027: PUSH
47028: LD_INT 6
47030: PUSH
47031: LD_INT 7
47033: PUSH
47034: LD_INT 8
47036: PUSH
47037: EMPTY
47038: LIST
47039: LIST
47040: LIST
47041: LIST
47042: LIST
47043: LIST
47044: LIST
47045: ST_TO_ADDR
// for i in gameTypes do
47046: LD_ADDR_VAR 0 2
47050: PUSH
47051: LD_VAR 0 14
47055: PUSH
47056: FOR_IN
47057: IFFALSE 47066
// disable ( i ) ;
47059: LD_VAR 0 2
47063: DISABLE_MARKED
47064: GO 47056
47066: POP
47067: POP
// if Multiplayer then
47068: LD_OWVAR 4
47072: IFFALSE 47256
// begin mpGameType := mp_game_type ;
47074: LD_ADDR_EXP 3
47078: PUSH
47079: LD_OWVAR 6
47083: ST_TO_ADDR
// your_side := mp_player_side ;
47084: LD_ADDR_OWVAR 2
47088: PUSH
47089: LD_OWVAR 7
47093: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
47094: LD_ADDR_EXP 7
47098: PUSH
47099: LD_OWVAR 17
47103: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
47104: LD_ADDR_EXP 8
47108: PUSH
47109: LD_OWVAR 15
47113: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
47114: LD_ADDR_EXP 9
47118: PUSH
47119: LD_OWVAR 16
47123: ST_TO_ADDR
// mpTeams := mp_teams ;
47124: LD_ADDR_EXP 10
47128: PUSH
47129: LD_OWVAR 12
47133: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
47134: LD_ADDR_VAR 0 2
47138: PUSH
47139: DOUBLE
47140: LD_INT 1
47142: DEC
47143: ST_TO_ADDR
47144: LD_EXP 4
47148: PPUSH
47149: CALL 5242 0 1
47153: PUSH
47154: FOR_TO
47155: IFFALSE 47231
// begin setting := mpGameSettingsKeys [ i ] ;
47157: LD_ADDR_VAR 0 12
47161: PUSH
47162: LD_EXP 4
47166: PUSH
47167: LD_VAR 0 2
47171: ARRAY
47172: ST_TO_ADDR
// if setting then
47173: LD_VAR 0 12
47177: IFFALSE 47229
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
47179: LD_ADDR_EXP 6
47183: PUSH
47184: LD_EXP 6
47188: PPUSH
47189: LD_VAR 0 2
47193: PPUSH
47194: LD_EXP 5
47198: PUSH
47199: LD_VAR 0 2
47203: ARRAY
47204: PUSH
47205: LD_VAR 0 2
47209: PUSH
47210: LD_INT 1
47212: MINUS
47213: PPUSH
47214: CALL_OW 426
47218: PUSH
47219: LD_INT 1
47221: PLUS
47222: ARRAY
47223: PPUSH
47224: CALL_OW 1
47228: ST_TO_ADDR
// end ;
47229: GO 47154
47231: POP
47232: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
47233: LD_ADDR_EXP 11
47237: PUSH
47238: LD_EXP 8
47242: PUSH
47243: LD_INT 0
47245: PUSH
47246: EMPTY
47247: LIST
47248: DIFF
47249: PUSH
47250: LD_INT 1
47252: GREATER
47253: ST_TO_ADDR
// end else
47254: GO 47256
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
47256: LD_EXP 3
47260: PPUSH
47261: CALL 836 0 1
// if Count ( mpMarkedAreas ) then
47265: LD_EXP 18
47269: PPUSH
47270: CALL 5242 0 1
47274: IFFALSE 47305
// begin for i in mpMarkedAreas do
47276: LD_ADDR_VAR 0 2
47280: PUSH
47281: LD_EXP 18
47285: PUSH
47286: FOR_IN
47287: IFFALSE 47303
// SetAreaMapShow ( i , 0 ) ;
47289: LD_VAR 0 2
47293: PPUSH
47294: LD_INT 0
47296: PPUSH
47297: CALL_OW 424
47301: GO 47286
47303: POP
47304: POP
// end ; for i := 1 to 8 do
47305: LD_ADDR_VAR 0 2
47309: PUSH
47310: DOUBLE
47311: LD_INT 1
47313: DEC
47314: ST_TO_ADDR
47315: LD_INT 8
47317: PUSH
47318: FOR_TO
47319: IFFALSE 48778
// begin if not mpSidePositions [ i ] then
47321: LD_EXP 7
47325: PUSH
47326: LD_VAR 0 2
47330: ARRAY
47331: NOT
47332: IFFALSE 47336
// continue ;
47334: GO 47318
// side := i ;
47336: LD_ADDR_VAR 0 7
47340: PUSH
47341: LD_VAR 0 2
47345: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
47346: LD_ADDR_VAR 0 9
47350: PUSH
47351: LD_EXP 9
47355: PUSH
47356: LD_VAR 0 2
47360: ARRAY
47361: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
47362: LD_ADDR_VAR 0 8
47366: PUSH
47367: LD_EXP 7
47371: PUSH
47372: LD_VAR 0 2
47376: ARRAY
47377: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
47378: LD_EXP 12
47382: PPUSH
47383: CALL 5242 0 1
47387: IFFALSE 47464
// begin for j in mpOilDeposits [ pos ] do
47389: LD_ADDR_VAR 0 3
47393: PUSH
47394: LD_EXP 12
47398: PUSH
47399: LD_VAR 0 8
47403: ARRAY
47404: PUSH
47405: FOR_IN
47406: IFFALSE 47462
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
47408: LD_VAR 0 3
47412: PUSH
47413: LD_INT 1
47415: ARRAY
47416: PPUSH
47417: LD_VAR 0 3
47421: PUSH
47422: LD_INT 2
47424: ARRAY
47425: PPUSH
47426: LD_INT 2
47428: PPUSH
47429: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
47433: LD_VAR 0 3
47437: PUSH
47438: LD_INT 1
47440: ARRAY
47441: PPUSH
47442: LD_VAR 0 3
47446: PUSH
47447: LD_INT 2
47449: ARRAY
47450: PPUSH
47451: LD_VAR 0 7
47455: PPUSH
47456: CALL_OW 441
// end ;
47460: GO 47405
47462: POP
47463: POP
// end ; if Count ( mpSibDeposits ) then
47464: LD_EXP 13
47468: PPUSH
47469: CALL 5242 0 1
47473: IFFALSE 47550
// begin for j in mpSibDeposits [ pos ] do
47475: LD_ADDR_VAR 0 3
47479: PUSH
47480: LD_EXP 13
47484: PUSH
47485: LD_VAR 0 8
47489: ARRAY
47490: PUSH
47491: FOR_IN
47492: IFFALSE 47548
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
47494: LD_VAR 0 3
47498: PUSH
47499: LD_INT 1
47501: ARRAY
47502: PPUSH
47503: LD_VAR 0 3
47507: PUSH
47508: LD_INT 2
47510: ARRAY
47511: PPUSH
47512: LD_INT 3
47514: PPUSH
47515: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
47519: LD_VAR 0 3
47523: PUSH
47524: LD_INT 1
47526: ARRAY
47527: PPUSH
47528: LD_VAR 0 3
47532: PUSH
47533: LD_INT 2
47535: ARRAY
47536: PPUSH
47537: LD_VAR 0 7
47541: PPUSH
47542: CALL_OW 441
// end ;
47546: GO 47491
47548: POP
47549: POP
// end ; InitBc ;
47550: CALL_OW 21
// InitUc ;
47554: CALL_OW 18
// uc_side := side ;
47558: LD_ADDR_OWVAR 20
47562: PUSH
47563: LD_VAR 0 7
47567: ST_TO_ADDR
// uc_nation := nation ;
47568: LD_ADDR_OWVAR 21
47572: PUSH
47573: LD_VAR 0 9
47577: ST_TO_ADDR
// if mpBattleFlag > - 1 then
47578: LD_EXP 22
47582: PUSH
47583: LD_INT 1
47585: NEG
47586: GREATER
47587: IFFALSE 47746
// begin x := mpStartPos [ pos ] [ 1 ] ;
47589: LD_ADDR_VAR 0 5
47593: PUSH
47594: LD_EXP 21
47598: PUSH
47599: LD_VAR 0 8
47603: ARRAY
47604: PUSH
47605: LD_INT 1
47607: ARRAY
47608: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
47609: LD_ADDR_VAR 0 6
47613: PUSH
47614: LD_EXP 21
47618: PUSH
47619: LD_VAR 0 8
47623: ARRAY
47624: PUSH
47625: LD_INT 2
47627: ARRAY
47628: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
47629: LD_VAR 0 5
47633: PPUSH
47634: LD_VAR 0 6
47638: PPUSH
47639: LD_INT 12
47641: PPUSH
47642: LD_INT 2
47644: PPUSH
47645: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
47649: LD_ADDR_EXP 23
47653: PUSH
47654: LD_EXP 23
47658: PPUSH
47659: LD_VAR 0 7
47663: PPUSH
47664: LD_VAR 0 7
47668: PPUSH
47669: LD_VAR 0 5
47673: PPUSH
47674: LD_VAR 0 6
47678: PPUSH
47679: LD_INT 1
47681: PUSH
47682: LD_INT 100
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: PUSH
47689: LD_INT 2
47691: PUSH
47692: LD_INT 70
47694: PUSH
47695: EMPTY
47696: LIST
47697: LIST
47698: PUSH
47699: LD_INT 3
47701: PUSH
47702: LD_INT 40
47704: PUSH
47705: EMPTY
47706: LIST
47707: LIST
47708: PUSH
47709: LD_INT 10
47711: PUSH
47712: LD_INT 25
47714: PUSH
47715: EMPTY
47716: LIST
47717: LIST
47718: PUSH
47719: LD_INT 20
47721: PUSH
47722: LD_INT 100
47724: PUSH
47725: EMPTY
47726: LIST
47727: LIST
47728: PUSH
47729: EMPTY
47730: LIST
47731: LIST
47732: LIST
47733: LIST
47734: LIST
47735: PPUSH
47736: CALL_OW 418
47740: PPUSH
47741: CALL_OW 1
47745: ST_TO_ADDR
// end ; if Count ( mpDepots ) then
47746: LD_EXP 14
47750: PPUSH
47751: CALL 5242 0 1
47755: IFFALSE 47954
// begin if mpGameType in [ GameTypeSurvival , GameTypeSurvivalHardcore , GameTypeArmsRace , GameTypeArmsArtifact ] then
47757: LD_EXP 3
47761: PUSH
47762: LD_INT 2
47764: PUSH
47765: LD_INT 8
47767: PUSH
47768: LD_INT 6
47770: PUSH
47771: LD_INT 7
47773: PUSH
47774: EMPTY
47775: LIST
47776: LIST
47777: LIST
47778: LIST
47779: IN
47780: IFFALSE 47800
// begin bc_level := 10 ;
47782: LD_ADDR_OWVAR 43
47786: PUSH
47787: LD_INT 10
47789: ST_TO_ADDR
// bc_type := b_warehouse ;
47790: LD_ADDR_OWVAR 42
47794: PUSH
47795: LD_INT 1
47797: ST_TO_ADDR
// end else
47798: GO 47816
// begin bc_level := 0 ;
47800: LD_ADDR_OWVAR 43
47804: PUSH
47805: LD_INT 0
47807: ST_TO_ADDR
// bc_type := b_depot ;
47808: LD_ADDR_OWVAR 42
47812: PUSH
47813: LD_INT 0
47815: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
47816: LD_ADDR_VAR 0 4
47820: PUSH
47821: LD_EXP 14
47825: PUSH
47826: LD_VAR 0 8
47830: ARRAY
47831: PUSH
47832: LD_INT 1
47834: ARRAY
47835: PPUSH
47836: LD_EXP 14
47840: PUSH
47841: LD_VAR 0 8
47845: ARRAY
47846: PUSH
47847: LD_INT 2
47849: ARRAY
47850: PPUSH
47851: LD_EXP 14
47855: PUSH
47856: LD_VAR 0 8
47860: ARRAY
47861: PUSH
47862: LD_INT 3
47864: ARRAY
47865: PPUSH
47866: CALL_OW 47
47870: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
47871: LD_VAR 0 4
47875: PPUSH
47876: LD_STRING @
47878: PUSH
47879: LD_VAR 0 7
47883: STR
47884: PPUSH
47885: CALL_OW 500
// if Count ( mpStartingResources ) then
47889: LD_EXP 15
47893: PPUSH
47894: CALL 5242 0 1
47898: IFFALSE 47952
// begin for j := 1 to mpStartingResources do
47900: LD_ADDR_VAR 0 3
47904: PUSH
47905: DOUBLE
47906: LD_INT 1
47908: DEC
47909: ST_TO_ADDR
47910: LD_EXP 15
47914: PUSH
47915: FOR_TO
47916: IFFALSE 47950
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
47918: LD_VAR 0 4
47922: PPUSH
47923: CALL_OW 274
47927: PPUSH
47928: LD_VAR 0 3
47932: PPUSH
47933: LD_EXP 15
47937: PUSH
47938: LD_VAR 0 3
47942: ARRAY
47943: PPUSH
47944: CALL_OW 277
47948: GO 47915
47950: POP
47951: POP
// end ; end else
47952: GO 48161
// if Count ( mpStartingResources ) then
47954: LD_EXP 15
47958: PPUSH
47959: CALL 5242 0 1
47963: IFFALSE 48161
// begin x := mpStartPos [ pos ] [ 1 ] ;
47965: LD_ADDR_VAR 0 5
47969: PUSH
47970: LD_EXP 21
47974: PUSH
47975: LD_VAR 0 8
47979: ARRAY
47980: PUSH
47981: LD_INT 1
47983: ARRAY
47984: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
47985: LD_ADDR_VAR 0 6
47989: PUSH
47990: LD_EXP 21
47994: PUSH
47995: LD_VAR 0 8
47999: ARRAY
48000: PUSH
48001: LD_INT 2
48003: ARRAY
48004: ST_TO_ADDR
// for j := 1 to mpStartingResources do
48005: LD_ADDR_VAR 0 3
48009: PUSH
48010: DOUBLE
48011: LD_INT 1
48013: DEC
48014: ST_TO_ADDR
48015: LD_EXP 15
48019: PUSH
48020: FOR_TO
48021: IFFALSE 48159
// begin resources := mpStartingResources [ j ] ;
48023: LD_ADDR_VAR 0 13
48027: PUSH
48028: LD_EXP 15
48032: PUSH
48033: LD_VAR 0 3
48037: ARRAY
48038: ST_TO_ADDR
// if resources = 0 then
48039: LD_VAR 0 13
48043: PUSH
48044: LD_INT 0
48046: EQUAL
48047: IFFALSE 48051
// continue ;
48049: GO 48020
// repeat if resources >= 50 then
48051: LD_VAR 0 13
48055: PUSH
48056: LD_INT 50
48058: GREATEREQUAL
48059: IFFALSE 48105
// begin CreateResourcesXYR ( j , 5 , x , y , 6 , false ) ;
48061: LD_VAR 0 3
48065: PPUSH
48066: LD_INT 5
48068: PPUSH
48069: LD_VAR 0 5
48073: PPUSH
48074: LD_VAR 0 6
48078: PPUSH
48079: LD_INT 6
48081: PPUSH
48082: LD_INT 0
48084: PPUSH
48085: CALL_OW 60
// resources := resources - 50 ;
48089: LD_ADDR_VAR 0 13
48093: PUSH
48094: LD_VAR 0 13
48098: PUSH
48099: LD_INT 50
48101: MINUS
48102: ST_TO_ADDR
// end else
48103: GO 48147
// begin CreateResourcesXYR ( j , resources div 10 , x , y , 6 , false ) ;
48105: LD_VAR 0 3
48109: PPUSH
48110: LD_VAR 0 13
48114: PUSH
48115: LD_INT 10
48117: DIV
48118: PPUSH
48119: LD_VAR 0 5
48123: PPUSH
48124: LD_VAR 0 6
48128: PPUSH
48129: LD_INT 6
48131: PPUSH
48132: LD_INT 0
48134: PPUSH
48135: CALL_OW 60
// resources := 0 ;
48139: LD_ADDR_VAR 0 13
48143: PUSH
48144: LD_INT 0
48146: ST_TO_ADDR
// end ; until resources <= 0 ;
48147: LD_VAR 0 13
48151: PUSH
48152: LD_INT 0
48154: LESSEQUAL
48155: IFFALSE 48051
// end ;
48157: GO 48020
48159: POP
48160: POP
// end ; if Count ( mpBuildings ) and not mpGameType in [ GameTypeSurvival , GameTypeSurvivalHardcore ] then
48161: LD_EXP 17
48165: PPUSH
48166: CALL 5242 0 1
48170: IFFALSE 48190
48172: PUSH
48173: LD_EXP 3
48177: PUSH
48178: LD_INT 2
48180: PUSH
48181: LD_INT 8
48183: PUSH
48184: EMPTY
48185: LIST
48186: LIST
48187: IN
48188: NOT
48189: AND
48190: IFFALSE 48268
// begin for j in mpBuildings [ pos ] do
48192: LD_ADDR_VAR 0 3
48196: PUSH
48197: LD_EXP 17
48201: PUSH
48202: LD_VAR 0 8
48206: ARRAY
48207: PUSH
48208: FOR_IN
48209: IFFALSE 48266
// begin bc_level := 0 ;
48211: LD_ADDR_OWVAR 43
48215: PUSH
48216: LD_INT 0
48218: ST_TO_ADDR
// bc_type := j [ 1 ] ;
48219: LD_ADDR_OWVAR 42
48223: PUSH
48224: LD_VAR 0 3
48228: PUSH
48229: LD_INT 1
48231: ARRAY
48232: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
48233: LD_VAR 0 3
48237: PUSH
48238: LD_INT 2
48240: ARRAY
48241: PPUSH
48242: LD_VAR 0 3
48246: PUSH
48247: LD_INT 3
48249: ARRAY
48250: PPUSH
48251: LD_VAR 0 3
48255: PUSH
48256: LD_INT 4
48258: ARRAY
48259: PPUSH
48260: CALL_OW 47
// end ;
48264: GO 48208
48266: POP
48267: POP
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
48268: LD_EXP 26
48272: IFFALSE 48292
48274: PUSH
48275: LD_INT 20
48277: PPUSH
48278: LD_VAR 0 7
48282: PPUSH
48283: CALL_OW 321
48287: PUSH
48288: LD_INT 1
48290: EQUAL
48291: AND
48292: IFFALSE 48309
// SetTech ( tech_SibDet , side , state_researched ) ;
48294: LD_INT 20
48296: PPUSH
48297: LD_VAR 0 7
48301: PPUSH
48302: LD_INT 2
48304: PPUSH
48305: CALL_OW 322
// if not mpArtifacts then
48309: LD_EXP 45
48313: NOT
48314: IFFALSE 48331
// SetTech ( tech_artifact , side , state_disabled ) ;
48316: LD_INT 24
48318: PPUSH
48319: LD_VAR 0 7
48323: PPUSH
48324: LD_INT 0
48326: PPUSH
48327: CALL_OW 322
// if mpSibBomb = 1 then
48331: LD_EXP 28
48335: PUSH
48336: LD_INT 1
48338: EQUAL
48339: IFFALSE 48358
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
48341: LD_INT 25
48343: PPUSH
48344: LD_VAR 0 7
48348: PPUSH
48349: LD_INT 1
48351: PPUSH
48352: CALL_OW 322
// end else
48356: GO 48373
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
48358: LD_INT 25
48360: PPUSH
48361: LD_VAR 0 7
48365: PPUSH
48366: LD_INT 0
48368: PPUSH
48369: CALL_OW 322
// end ; if mpVehicles then
48373: LD_EXP 36
48377: IFFALSE 48476
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
48379: LD_ADDR_VAR 0 3
48383: PUSH
48384: LD_VAR 0 7
48388: PPUSH
48389: LD_VAR 0 9
48393: PPUSH
48394: LD_EXP 36
48398: PPUSH
48399: CALL 49735 0 3
48403: PUSH
48404: FOR_IN
48405: IFFALSE 48474
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
48407: LD_VAR 0 3
48411: PPUSH
48412: LD_INT 0
48414: PPUSH
48415: LD_INT 5
48417: PPUSH
48418: CALL_OW 12
48422: PPUSH
48423: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
48427: LD_VAR 0 3
48431: PPUSH
48432: LD_EXP 21
48436: PUSH
48437: LD_VAR 0 8
48441: ARRAY
48442: PUSH
48443: LD_INT 1
48445: ARRAY
48446: PPUSH
48447: LD_EXP 21
48451: PUSH
48452: LD_VAR 0 8
48456: ARRAY
48457: PUSH
48458: LD_INT 2
48460: ARRAY
48461: PPUSH
48462: LD_INT 12
48464: PPUSH
48465: LD_INT 0
48467: PPUSH
48468: CALL_OW 50
// end ;
48472: GO 48404
48474: POP
48475: POP
// end ; uc_nation := nation ;
48476: LD_ADDR_OWVAR 21
48480: PUSH
48481: LD_VAR 0 9
48485: ST_TO_ADDR
// if mpGameType in [ GameTypeArmsRace , GameTypeArmsArtifact ] and mpSidePositions [ i ] in [ 1 , 2 ] then
48486: LD_EXP 3
48490: PUSH
48491: LD_INT 6
48493: PUSH
48494: LD_INT 7
48496: PUSH
48497: EMPTY
48498: LIST
48499: LIST
48500: IN
48501: IFFALSE 48526
48503: PUSH
48504: LD_EXP 7
48508: PUSH
48509: LD_VAR 0 2
48513: ARRAY
48514: PUSH
48515: LD_INT 1
48517: PUSH
48518: LD_INT 2
48520: PUSH
48521: EMPTY
48522: LIST
48523: LIST
48524: IN
48525: AND
48526: IFFALSE 48574
// team := mpPrepareTeam ( side , nation , mpPeopleAmount + ( mpPeopleAmount div 2 ) , mpPeopleSkill + 1 ) else
48528: LD_ADDR_VAR 0 11
48532: PUSH
48533: LD_VAR 0 7
48537: PPUSH
48538: LD_VAR 0 9
48542: PPUSH
48543: LD_EXP 24
48547: PUSH
48548: LD_EXP 24
48552: PUSH
48553: LD_INT 2
48555: DIV
48556: PLUS
48557: PPUSH
48558: LD_EXP 25
48562: PUSH
48563: LD_INT 1
48565: PLUS
48566: PPUSH
48567: CALL 49190 0 4
48571: ST_TO_ADDR
48572: GO 48604
// team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
48574: LD_ADDR_VAR 0 11
48578: PUSH
48579: LD_VAR 0 7
48583: PPUSH
48584: LD_VAR 0 9
48588: PPUSH
48589: LD_EXP 24
48593: PPUSH
48594: LD_EXP 25
48598: PPUSH
48599: CALL 49190 0 4
48603: ST_TO_ADDR
// for j in team do
48604: LD_ADDR_VAR 0 3
48608: PUSH
48609: LD_VAR 0 11
48613: PUSH
48614: FOR_IN
48615: IFFALSE 48664
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
48617: LD_VAR 0 3
48621: PPUSH
48622: LD_EXP 21
48626: PUSH
48627: LD_VAR 0 8
48631: ARRAY
48632: PUSH
48633: LD_INT 1
48635: ARRAY
48636: PPUSH
48637: LD_EXP 21
48641: PUSH
48642: LD_VAR 0 8
48646: ARRAY
48647: PUSH
48648: LD_INT 2
48650: ARRAY
48651: PPUSH
48652: LD_INT 12
48654: PPUSH
48655: LD_INT 0
48657: PPUSH
48658: CALL_OW 50
48662: GO 48614
48664: POP
48665: POP
// if mpApemans then
48666: LD_EXP 30
48670: IFFALSE 48776
// begin for j := 1 to mpApemans do
48672: LD_ADDR_VAR 0 3
48676: PUSH
48677: DOUBLE
48678: LD_INT 1
48680: DEC
48681: ST_TO_ADDR
48682: LD_EXP 30
48686: PUSH
48687: FOR_TO
48688: IFFALSE 48774
// begin PrepareApeman ( - 5 ) ;
48690: LD_INT 5
48692: NEG
48693: PPUSH
48694: CALL 37345 0 1
// ape := CreateHuman ;
48698: LD_ADDR_VAR 0 10
48702: PUSH
48703: CALL_OW 44
48707: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
48708: LD_ADDR_EXP 32
48712: PUSH
48713: LD_EXP 32
48717: PPUSH
48718: LD_VAR 0 8
48722: PPUSH
48723: LD_EXP 32
48727: PUSH
48728: LD_VAR 0 8
48732: ARRAY
48733: PPUSH
48734: LD_VAR 0 10
48738: PPUSH
48739: CALL 41218 0 2
48743: PPUSH
48744: CALL_OW 1
48748: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
48749: LD_VAR 0 10
48753: PPUSH
48754: LD_EXP 31
48758: PUSH
48759: LD_VAR 0 8
48763: ARRAY
48764: PPUSH
48765: LD_INT 0
48767: PPUSH
48768: CALL_OW 49
// end ;
48772: GO 48687
48774: POP
48775: POP
// end ; end ;
48776: GO 47318
48778: POP
48779: POP
// if not mpTeamGame then
48780: LD_EXP 11
48784: NOT
48785: IFFALSE 48883
// begin for i := 1 to 8 do
48787: LD_ADDR_VAR 0 2
48791: PUSH
48792: DOUBLE
48793: LD_INT 1
48795: DEC
48796: ST_TO_ADDR
48797: LD_INT 8
48799: PUSH
48800: FOR_TO
48801: IFFALSE 48879
// for j := 1 to 8 do
48803: LD_ADDR_VAR 0 3
48807: PUSH
48808: DOUBLE
48809: LD_INT 1
48811: DEC
48812: ST_TO_ADDR
48813: LD_INT 8
48815: PUSH
48816: FOR_TO
48817: IFFALSE 48875
// if i <> j then
48819: LD_VAR 0 2
48823: PUSH
48824: LD_VAR 0 3
48828: NONEQUAL
48829: IFFALSE 48853
// SetAttitude ( i , j , att_neutral , true ) else
48831: LD_VAR 0 2
48835: PPUSH
48836: LD_VAR 0 3
48840: PPUSH
48841: LD_INT 0
48843: PPUSH
48844: LD_INT 1
48846: PPUSH
48847: CALL_OW 80
48851: GO 48873
// SetAttitude ( i , j , att_friend , true ) ;
48853: LD_VAR 0 2
48857: PPUSH
48858: LD_VAR 0 3
48862: PPUSH
48863: LD_INT 1
48865: PPUSH
48866: LD_INT 1
48868: PPUSH
48869: CALL_OW 80
48873: GO 48816
48875: POP
48876: POP
48877: GO 48800
48879: POP
48880: POP
// end else
48881: GO 49058
// begin if mpSharedVision then
48883: LD_EXP 16
48887: IFFALSE 48952
// begin for i in mpTeams do
48889: LD_ADDR_VAR 0 2
48893: PUSH
48894: LD_EXP 10
48898: PUSH
48899: FOR_IN
48900: IFFALSE 48950
// for j := 2 to i do
48902: LD_ADDR_VAR 0 3
48906: PUSH
48907: DOUBLE
48908: LD_INT 2
48910: DEC
48911: ST_TO_ADDR
48912: LD_VAR 0 2
48916: PUSH
48917: FOR_TO
48918: IFFALSE 48946
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
48920: LD_VAR 0 2
48924: PUSH
48925: LD_VAR 0 3
48929: ARRAY
48930: PPUSH
48931: LD_VAR 0 2
48935: PUSH
48936: LD_INT 1
48938: ARRAY
48939: PPUSH
48940: CALL_OW 343
48944: GO 48917
48946: POP
48947: POP
48948: GO 48899
48950: POP
48951: POP
// end ; for i := 1 to 8 do
48952: LD_ADDR_VAR 0 2
48956: PUSH
48957: DOUBLE
48958: LD_INT 1
48960: DEC
48961: ST_TO_ADDR
48962: LD_INT 8
48964: PUSH
48965: FOR_TO
48966: IFFALSE 49056
// for j := 1 to 8 do
48968: LD_ADDR_VAR 0 3
48972: PUSH
48973: DOUBLE
48974: LD_INT 1
48976: DEC
48977: ST_TO_ADDR
48978: LD_INT 8
48980: PUSH
48981: FOR_TO
48982: IFFALSE 49052
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
48984: LD_EXP 8
48988: PUSH
48989: LD_VAR 0 2
48993: ARRAY
48994: PUSH
48995: LD_EXP 8
48999: PUSH
49000: LD_VAR 0 3
49004: ARRAY
49005: EQUAL
49006: IFFALSE 49030
// SetAttitude ( i , j , att_friend , true ) else
49008: LD_VAR 0 2
49012: PPUSH
49013: LD_VAR 0 3
49017: PPUSH
49018: LD_INT 1
49020: PPUSH
49021: LD_INT 1
49023: PPUSH
49024: CALL_OW 80
49028: GO 49050
// SetAttitude ( i , j , att_enemy , true ) ;
49030: LD_VAR 0 2
49034: PPUSH
49035: LD_VAR 0 3
49039: PPUSH
49040: LD_INT 2
49042: PPUSH
49043: LD_INT 1
49045: PPUSH
49046: CALL_OW 80
49050: GO 48981
49052: POP
49053: POP
49054: GO 48965
49056: POP
49057: POP
// end ; music_nat := mpSideNations [ your_side ] ;
49058: LD_ADDR_OWVAR 71
49062: PUSH
49063: LD_EXP 9
49067: PUSH
49068: LD_OWVAR 2
49072: ARRAY
49073: ST_TO_ADDR
// if IAmSpec then
49074: CALL_OW 531
49078: IFFALSE 49119
// begin FogOff ( true ) ;
49080: LD_INT 1
49082: PPUSH
49083: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
49087: LD_EXP 29
49091: PUSH
49092: LD_INT 1
49094: ARRAY
49095: PUSH
49096: LD_INT 2
49098: DIV
49099: PPUSH
49100: LD_EXP 29
49104: PUSH
49105: LD_INT 2
49107: ARRAY
49108: PUSH
49109: LD_INT 2
49111: DIV
49112: PPUSH
49113: CALL_OW 86
// end else
49117: GO 49165
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
49119: LD_EXP 21
49123: PUSH
49124: LD_EXP 7
49128: PUSH
49129: LD_OWVAR 2
49133: ARRAY
49134: ARRAY
49135: PUSH
49136: LD_INT 1
49138: ARRAY
49139: PPUSH
49140: LD_EXP 21
49144: PUSH
49145: LD_EXP 7
49149: PUSH
49150: LD_OWVAR 2
49154: ARRAY
49155: ARRAY
49156: PUSH
49157: LD_INT 2
49159: ARRAY
49160: PPUSH
49161: CALL_OW 86
// end ; BeginBuildUp ;
49165: CALL 50268 0 0
// enable ( mpActive ) ;
49169: LD_INT 100
49171: ENABLE_MARKED
// enable ( mpGameType ) ;
49172: LD_EXP 3
49176: ENABLE_MARKED
// mpGameActive := true ;
49177: LD_ADDR_EXP 39
49181: PUSH
49182: LD_INT 1
49184: ST_TO_ADDR
// end ;
49185: LD_VAR 0 1
49189: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class , commander ; begin
49190: LD_INT 0
49192: PPUSH
49193: PPUSH
49194: PPUSH
49195: PPUSH
49196: PPUSH
// result := [ ] ;
49197: LD_ADDR_VAR 0 5
49201: PUSH
49202: EMPTY
49203: ST_TO_ADDR
// class := class_soldier ;
49204: LD_ADDR_VAR 0 8
49208: PUSH
49209: LD_INT 1
49211: ST_TO_ADDR
// uc_side := side ;
49212: LD_ADDR_OWVAR 20
49216: PUSH
49217: LD_VAR 0 1
49221: ST_TO_ADDR
// uc_nation := nation ;
49222: LD_ADDR_OWVAR 21
49226: PUSH
49227: LD_VAR 0 2
49231: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
49232: LD_ADDR_OWVAR 26
49236: PUSH
49237: LD_OWVAR 19
49241: PUSH
49242: LD_VAR 0 1
49246: ARRAY
49247: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
49248: LD_INT 1
49250: PPUSH
49251: LD_INT 2
49253: PPUSH
49254: CALL_OW 12
49258: PPUSH
49259: LD_VAR 0 8
49263: PPUSH
49264: LD_VAR 0 4
49268: PUSH
49269: LD_INT 2
49271: PLUS
49272: PPUSH
49273: CALL_OW 380
// hc_importance := 105 ;
49277: LD_ADDR_OWVAR 32
49281: PUSH
49282: LD_INT 105
49284: ST_TO_ADDR
// if Multiplayer then
49285: LD_OWVAR 4
49289: IFFALSE 49329
// begin hc_gallery := MULTIAVATARS ;
49291: LD_ADDR_OWVAR 33
49295: PUSH
49296: LD_STRING MULTIAVATARS
49298: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
49299: LD_ADDR_OWVAR 34
49303: PUSH
49304: LD_VAR 0 1
49308: PPUSH
49309: CALL_OW 525
49313: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
49314: LD_ADDR_OWVAR 27
49318: PUSH
49319: LD_VAR 0 1
49323: PPUSH
49324: CALL_OW 526
49328: ST_TO_ADDR
// end ; commander := CreateHuman ;
49329: LD_ADDR_VAR 0 9
49333: PUSH
49334: CALL_OW 44
49338: ST_TO_ADDR
// result := Join ( result , commander ) ;
49339: LD_ADDR_VAR 0 5
49343: PUSH
49344: LD_VAR 0 5
49348: PPUSH
49349: LD_VAR 0 9
49353: PPUSH
49354: CALL 41218 0 2
49358: ST_TO_ADDR
// mpCommanders := Replace ( mpCommanders , side , commander ) ;
49359: LD_ADDR_EXP 41
49363: PUSH
49364: LD_EXP 41
49368: PPUSH
49369: LD_VAR 0 1
49373: PPUSH
49374: LD_VAR 0 9
49378: PPUSH
49379: CALL_OW 1
49383: ST_TO_ADDR
// if mpTeamPreset then
49384: LD_LOC 1
49388: IFFALSE 49484
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
49390: LD_LOC 1
49394: PUSH
49395: LD_INT 1
49397: ARRAY
49398: PPUSH
49399: LD_VAR 0 5
49403: PUSH
49404: LD_VAR 0 5
49408: ARRAY
49409: PPUSH
49410: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
49414: LD_VAR 0 5
49418: PUSH
49419: LD_VAR 0 5
49423: ARRAY
49424: PPUSH
49425: LD_INT 1
49427: PPUSH
49428: LD_LOC 1
49432: PUSH
49433: LD_INT 1
49435: ARRAY
49436: PPUSH
49437: LD_INT 1
49439: PPUSH
49440: CALL_OW 260
49444: PPUSH
49445: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
49449: LD_VAR 0 5
49453: PUSH
49454: LD_VAR 0 5
49458: ARRAY
49459: PPUSH
49460: LD_INT 2
49462: PPUSH
49463: LD_LOC 1
49467: PUSH
49468: LD_INT 1
49470: ARRAY
49471: PPUSH
49472: LD_INT 2
49474: PPUSH
49475: CALL_OW 260
49479: PPUSH
49480: CALL_OW 239
// end ; InitHc_All ( ) ;
49484: CALL_OW 584
// class := 2 ;
49488: LD_ADDR_VAR 0 8
49492: PUSH
49493: LD_INT 2
49495: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
49496: LD_ADDR_VAR 0 6
49500: PUSH
49501: DOUBLE
49502: LD_INT 1
49504: DEC
49505: ST_TO_ADDR
49506: LD_VAR 0 3
49510: PUSH
49511: LD_INT 1
49513: MINUS
49514: PUSH
49515: FOR_TO
49516: IFFALSE 49711
// begin PrepareHuman ( false , class , skill ) ;
49518: LD_INT 0
49520: PPUSH
49521: LD_VAR 0 8
49525: PPUSH
49526: LD_VAR 0 4
49530: PPUSH
49531: CALL_OW 380
// un := CreateHuman ;
49535: LD_ADDR_VAR 0 7
49539: PUSH
49540: CALL_OW 44
49544: ST_TO_ADDR
// result := Join ( result , un ) ;
49545: LD_ADDR_VAR 0 5
49549: PUSH
49550: LD_VAR 0 5
49554: PPUSH
49555: LD_VAR 0 7
49559: PPUSH
49560: CALL 41218 0 2
49564: ST_TO_ADDR
// if Count ( mpTeamPreset ) >= amount then
49565: LD_LOC 1
49569: PPUSH
49570: CALL 5242 0 1
49574: PUSH
49575: LD_VAR 0 3
49579: GREATEREQUAL
49580: IFFALSE 49676
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
49582: LD_LOC 1
49586: PUSH
49587: LD_VAR 0 6
49591: PUSH
49592: LD_INT 1
49594: PLUS
49595: ARRAY
49596: PPUSH
49597: LD_VAR 0 7
49601: PPUSH
49602: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
49606: LD_VAR 0 7
49610: PPUSH
49611: LD_INT 1
49613: PPUSH
49614: LD_LOC 1
49618: PUSH
49619: LD_VAR 0 6
49623: PUSH
49624: LD_INT 1
49626: PLUS
49627: ARRAY
49628: PPUSH
49629: LD_INT 1
49631: PPUSH
49632: CALL_OW 260
49636: PPUSH
49637: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
49641: LD_VAR 0 7
49645: PPUSH
49646: LD_INT 2
49648: PPUSH
49649: LD_LOC 1
49653: PUSH
49654: LD_VAR 0 6
49658: PUSH
49659: LD_INT 1
49661: PLUS
49662: ARRAY
49663: PPUSH
49664: LD_INT 2
49666: PPUSH
49667: CALL_OW 260
49671: PPUSH
49672: CALL_OW 239
// end ; class := Inc ( class ) ;
49676: LD_ADDR_VAR 0 8
49680: PUSH
49681: LD_VAR 0 8
49685: PPUSH
49686: CALL 42591 0 1
49690: ST_TO_ADDR
// if class = 5 then
49691: LD_VAR 0 8
49695: PUSH
49696: LD_INT 5
49698: EQUAL
49699: IFFALSE 49709
// class := 1 ;
49701: LD_ADDR_VAR 0 8
49705: PUSH
49706: LD_INT 1
49708: ST_TO_ADDR
// end ;
49709: GO 49515
49711: POP
49712: POP
// if not mpTeamPreset then
49713: LD_LOC 1
49717: NOT
49718: IFFALSE 49730
// mpTeamPreset := result ;
49720: LD_ADDR_LOC 1
49724: PUSH
49725: LD_VAR 0 5
49729: ST_TO_ADDR
// end ;
49730: LD_VAR 0 5
49734: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
49735: LD_INT 0
49737: PPUSH
49738: PPUSH
// result := [ ] ;
49739: LD_ADDR_VAR 0 4
49743: PUSH
49744: EMPTY
49745: ST_TO_ADDR
// if not vehicles then
49746: LD_VAR 0 3
49750: NOT
49751: IFFALSE 49755
// exit ;
49753: GO 49969
// for i := 1 to vehicles [ nation ] do
49755: LD_ADDR_VAR 0 5
49759: PUSH
49760: DOUBLE
49761: LD_INT 1
49763: DEC
49764: ST_TO_ADDR
49765: LD_VAR 0 3
49769: PUSH
49770: LD_VAR 0 2
49774: ARRAY
49775: PUSH
49776: FOR_TO
49777: IFFALSE 49967
// begin uc_side := side ;
49779: LD_ADDR_OWVAR 20
49783: PUSH
49784: LD_VAR 0 1
49788: ST_TO_ADDR
// if Count ( vehicles [ nation ] [ i ] ) > 4 then
49789: LD_VAR 0 3
49793: PUSH
49794: LD_VAR 0 2
49798: ARRAY
49799: PUSH
49800: LD_VAR 0 5
49804: ARRAY
49805: PPUSH
49806: CALL 5242 0 1
49810: PUSH
49811: LD_INT 4
49813: GREATER
49814: IFFALSE 49844
// uc_nation := vehicles [ nation ] [ i ] [ 5 ] else
49816: LD_ADDR_OWVAR 21
49820: PUSH
49821: LD_VAR 0 3
49825: PUSH
49826: LD_VAR 0 2
49830: ARRAY
49831: PUSH
49832: LD_VAR 0 5
49836: ARRAY
49837: PUSH
49838: LD_INT 5
49840: ARRAY
49841: ST_TO_ADDR
49842: GO 49854
// uc_nation := nation ;
49844: LD_ADDR_OWVAR 21
49848: PUSH
49849: LD_VAR 0 2
49853: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
49854: LD_VAR 0 3
49858: PUSH
49859: LD_VAR 0 2
49863: ARRAY
49864: PUSH
49865: LD_VAR 0 5
49869: ARRAY
49870: PUSH
49871: LD_INT 1
49873: ARRAY
49874: PPUSH
49875: LD_VAR 0 3
49879: PUSH
49880: LD_VAR 0 2
49884: ARRAY
49885: PUSH
49886: LD_VAR 0 5
49890: ARRAY
49891: PUSH
49892: LD_INT 2
49894: ARRAY
49895: PPUSH
49896: LD_VAR 0 3
49900: PUSH
49901: LD_VAR 0 2
49905: ARRAY
49906: PUSH
49907: LD_VAR 0 5
49911: ARRAY
49912: PUSH
49913: LD_INT 3
49915: ARRAY
49916: PPUSH
49917: LD_VAR 0 3
49921: PUSH
49922: LD_VAR 0 2
49926: ARRAY
49927: PUSH
49928: LD_VAR 0 5
49932: ARRAY
49933: PUSH
49934: LD_INT 4
49936: ARRAY
49937: PPUSH
49938: LD_INT 80
49940: PPUSH
49941: CALL 8038 0 5
// result := Join ( result , CreateVehicle ) ;
49945: LD_ADDR_VAR 0 4
49949: PUSH
49950: LD_VAR 0 4
49954: PPUSH
49955: CALL_OW 45
49959: PPUSH
49960: CALL 41218 0 2
49964: ST_TO_ADDR
// end ;
49965: GO 49776
49967: POP
49968: POP
// end ;
49969: LD_VAR 0 4
49973: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
49974: LD_INT 0
49976: PPUSH
49977: PPUSH
// for i in mpBattleFlags do
49978: LD_ADDR_VAR 0 3
49982: PUSH
49983: LD_EXP 23
49987: PUSH
49988: FOR_IN
49989: IFFALSE 50066
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
49991: LD_VAR 0 3
49995: PPUSH
49996: LD_INT 1
49998: PUSH
49999: LD_VAR 0 1
50003: PUSH
50004: EMPTY
50005: LIST
50006: LIST
50007: PUSH
50008: LD_INT 2
50010: PUSH
50011: LD_VAR 0 1
50015: PUSH
50016: LD_REAL  7.00000000000000E-0001
50019: MUL
50020: PUSH
50021: EMPTY
50022: LIST
50023: LIST
50024: PUSH
50025: LD_INT 3
50027: PUSH
50028: LD_VAR 0 1
50032: PUSH
50033: LD_REAL  4.00000000000000E-0001
50036: MUL
50037: PUSH
50038: EMPTY
50039: LIST
50040: LIST
50041: PUSH
50042: LD_INT 20
50044: PUSH
50045: LD_VAR 0 1
50049: PUSH
50050: EMPTY
50051: LIST
50052: LIST
50053: PUSH
50054: EMPTY
50055: LIST
50056: LIST
50057: LIST
50058: LIST
50059: PPUSH
50060: CALL_OW 423
50064: GO 49988
50066: POP
50067: POP
// end ;
50068: LD_VAR 0 2
50072: RET
// every 0 0$1 trigger mpActive do var i , strength ;
50073: LD_INT 100
50075: IFFALSE 50170
50077: GO 50079
50079: DISABLE
50080: LD_INT 0
50082: PPUSH
50083: PPUSH
// begin if mpBattleFlag <= 0 then
50084: LD_EXP 22
50088: PUSH
50089: LD_INT 0
50091: LESSEQUAL
50092: IFFALSE 50096
// exit ;
50094: GO 50170
// strength := 100 ;
50096: LD_ADDR_VAR 0 2
50100: PUSH
50101: LD_INT 100
50103: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
50104: LD_EXP 22
50108: PPUSH
50109: CALL_OW 67
// strength := Dec ( strength ) ;
50113: LD_ADDR_VAR 0 2
50117: PUSH
50118: LD_VAR 0 2
50122: PPUSH
50123: CALL 42613 0 1
50127: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
50128: LD_VAR 0 2
50132: PPUSH
50133: CALL 49974 0 1
// until not strength ;
50137: LD_VAR 0 2
50141: NOT
50142: IFFALSE 50104
// for i in mpBattleFlags do
50144: LD_ADDR_VAR 0 1
50148: PUSH
50149: LD_EXP 23
50153: PUSH
50154: FOR_IN
50155: IFFALSE 50168
// KillBattleFlag ( i ) ;
50157: LD_VAR 0 1
50161: PPUSH
50162: CALL_OW 419
50166: GO 50154
50168: POP
50169: POP
// end ;
50170: PPOPN 2
50172: END
// every 0 0$1 marked mpActive do var side , tmp ;
50173: GO 50175
50175: DISABLE
50176: LD_INT 0
50178: PPUSH
50179: PPUSH
// begin if mpSibBomb <= 1 then
50180: LD_EXP 28
50184: PUSH
50185: LD_INT 1
50187: LESSEQUAL
50188: IFFALSE 50192
// exit ;
50190: GO 50265
// tmp := mpSibBomb ;
50192: LD_ADDR_VAR 0 2
50196: PUSH
50197: LD_EXP 28
50201: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
50202: LD_INT 35
50204: PPUSH
50205: CALL_OW 67
// tmp := tmp - 0 0$1 ;
50209: LD_ADDR_VAR 0 2
50213: PUSH
50214: LD_VAR 0 2
50218: PUSH
50219: LD_INT 35
50221: MINUS
50222: ST_TO_ADDR
// until not tmp ;
50223: LD_VAR 0 2
50227: NOT
50228: IFFALSE 50202
// for side := 1 to 8 do
50230: LD_ADDR_VAR 0 1
50234: PUSH
50235: DOUBLE
50236: LD_INT 1
50238: DEC
50239: ST_TO_ADDR
50240: LD_INT 8
50242: PUSH
50243: FOR_TO
50244: IFFALSE 50263
// SetTech ( tech_SibFiss , side , state_enabled ) ;
50246: LD_INT 25
50248: PPUSH
50249: LD_VAR 0 1
50253: PPUSH
50254: LD_INT 1
50256: PPUSH
50257: CALL_OW 322
50261: GO 50243
50263: POP
50264: POP
// end ;
50265: PPOPN 2
50267: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
50268: LD_INT 0
50270: PPUSH
50271: PPUSH
50272: PPUSH
// mpBuildUpTimeDelay := 0 ;
50273: LD_ADDR_EXP 48
50277: PUSH
50278: LD_INT 0
50280: ST_TO_ADDR
// if not mpBuildUpTime then
50281: LD_EXP 20
50285: NOT
50286: IFFALSE 50290
// exit ;
50288: GO 50479
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
50290: LD_ADDR_EXP 48
50294: PUSH
50295: LD_INT 8400
50297: PUSH
50298: LD_INT 2100
50300: PUSH
50301: LD_EXP 20
50305: MUL
50306: PLUS
50307: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
50308: LD_ADDR_EXP 49
50312: PUSH
50313: LD_INT 1
50315: ST_TO_ADDR
// for i := 1 to 8 do
50316: LD_ADDR_VAR 0 2
50320: PUSH
50321: DOUBLE
50322: LD_INT 1
50324: DEC
50325: ST_TO_ADDR
50326: LD_INT 8
50328: PUSH
50329: FOR_TO
50330: IFFALSE 50477
// if mpSidePositions [ i ] then
50332: LD_EXP 7
50336: PUSH
50337: LD_VAR 0 2
50341: ARRAY
50342: IFFALSE 50475
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
50344: LD_EXP 19
50348: PUSH
50349: LD_EXP 7
50353: PUSH
50354: LD_VAR 0 2
50358: ARRAY
50359: ARRAY
50360: PPUSH
50361: LD_INT 5
50363: PPUSH
50364: CALL_OW 424
// for j := 1 to 8 do
50368: LD_ADDR_VAR 0 3
50372: PUSH
50373: DOUBLE
50374: LD_INT 1
50376: DEC
50377: ST_TO_ADDR
50378: LD_INT 8
50380: PUSH
50381: FOR_TO
50382: IFFALSE 50473
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
50384: LD_EXP 7
50388: PUSH
50389: LD_VAR 0 3
50393: ARRAY
50394: IFFALSE 50443
50396: PUSH
50397: LD_EXP 8
50401: PUSH
50402: LD_VAR 0 2
50406: ARRAY
50407: PUSH
50408: LD_EXP 8
50412: PUSH
50413: LD_VAR 0 3
50417: ARRAY
50418: NONEQUAL
50419: IFTRUE 50442
50421: PUSH
50422: LD_EXP 11
50426: NOT
50427: IFFALSE 50441
50429: PUSH
50430: LD_VAR 0 2
50434: PUSH
50435: LD_VAR 0 3
50439: NONEQUAL
50440: AND
50441: OR
50442: AND
50443: IFFALSE 50471
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
50445: LD_VAR 0 3
50449: PPUSH
50450: LD_EXP 19
50454: PUSH
50455: LD_EXP 7
50459: PUSH
50460: LD_VAR 0 2
50464: ARRAY
50465: ARRAY
50466: PPUSH
50467: CALL_OW 333
50471: GO 50381
50473: POP
50474: POP
// end ;
50475: GO 50329
50477: POP
50478: POP
// end ;
50479: LD_VAR 0 1
50483: RET
// function EndBuildUp ; var i , j ; begin
50484: LD_INT 0
50486: PPUSH
50487: PPUSH
50488: PPUSH
// mpBuildUpTimeActive := false ;
50489: LD_ADDR_EXP 49
50493: PUSH
50494: LD_INT 0
50496: ST_TO_ADDR
// for i := 1 to 8 do
50497: LD_ADDR_VAR 0 2
50501: PUSH
50502: DOUBLE
50503: LD_INT 1
50505: DEC
50506: ST_TO_ADDR
50507: LD_INT 8
50509: PUSH
50510: FOR_TO
50511: IFFALSE 50658
// if mpSidePositions [ i ] then
50513: LD_EXP 7
50517: PUSH
50518: LD_VAR 0 2
50522: ARRAY
50523: IFFALSE 50656
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
50525: LD_EXP 19
50529: PUSH
50530: LD_EXP 7
50534: PUSH
50535: LD_VAR 0 2
50539: ARRAY
50540: ARRAY
50541: PPUSH
50542: LD_INT 0
50544: PPUSH
50545: CALL_OW 424
// for j := 1 to 8 do
50549: LD_ADDR_VAR 0 3
50553: PUSH
50554: DOUBLE
50555: LD_INT 1
50557: DEC
50558: ST_TO_ADDR
50559: LD_INT 8
50561: PUSH
50562: FOR_TO
50563: IFFALSE 50654
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
50565: LD_EXP 7
50569: PUSH
50570: LD_VAR 0 3
50574: ARRAY
50575: IFFALSE 50624
50577: PUSH
50578: LD_EXP 8
50582: PUSH
50583: LD_VAR 0 2
50587: ARRAY
50588: PUSH
50589: LD_EXP 8
50593: PUSH
50594: LD_VAR 0 3
50598: ARRAY
50599: NONEQUAL
50600: IFTRUE 50623
50602: PUSH
50603: LD_EXP 11
50607: NOT
50608: IFFALSE 50622
50610: PUSH
50611: LD_VAR 0 2
50615: PUSH
50616: LD_VAR 0 3
50620: NONEQUAL
50621: AND
50622: OR
50623: AND
50624: IFFALSE 50652
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
50626: LD_VAR 0 3
50630: PPUSH
50631: LD_EXP 19
50635: PUSH
50636: LD_EXP 7
50640: PUSH
50641: LD_VAR 0 2
50645: ARRAY
50646: ARRAY
50647: PPUSH
50648: CALL_OW 334
50652: GO 50562
50654: POP
50655: POP
// end ;
50656: GO 50510
50658: POP
50659: POP
// end ;
50660: LD_VAR 0 1
50664: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
50665: LD_EXP 49
50669: IFFALSE 50848
50671: GO 50673
50673: DISABLE
50674: LD_INT 0
50676: PPUSH
50677: PPUSH
// begin for i := 1 to 8 do
50678: LD_ADDR_VAR 0 1
50682: PUSH
50683: DOUBLE
50684: LD_INT 1
50686: DEC
50687: ST_TO_ADDR
50688: LD_INT 8
50690: PUSH
50691: FOR_TO
50692: IFFALSE 50845
// if mpSidePositions [ i ] then
50694: LD_EXP 7
50698: PUSH
50699: LD_VAR 0 1
50703: ARRAY
50704: IFFALSE 50843
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
50706: LD_ADDR_VAR 0 2
50710: PUSH
50711: LD_EXP 19
50715: PUSH
50716: LD_EXP 7
50720: PUSH
50721: LD_VAR 0 1
50725: ARRAY
50726: ARRAY
50727: PPUSH
50728: LD_INT 2
50730: PUSH
50731: LD_INT 21
50733: PUSH
50734: LD_INT 1
50736: PUSH
50737: EMPTY
50738: LIST
50739: LIST
50740: PUSH
50741: LD_INT 21
50743: PUSH
50744: LD_INT 2
50746: PUSH
50747: EMPTY
50748: LIST
50749: LIST
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: LIST
50755: PUSH
50756: LD_INT 22
50758: PUSH
50759: LD_OWVAR 2
50763: PUSH
50764: EMPTY
50765: LIST
50766: LIST
50767: PUSH
50768: EMPTY
50769: LIST
50770: LIST
50771: PPUSH
50772: CALL_OW 70
50776: PUSH
50777: FOR_IN
50778: IFFALSE 50841
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
50780: LD_EXP 8
50784: PUSH
50785: LD_VAR 0 1
50789: ARRAY
50790: PUSH
50791: LD_EXP 8
50795: PUSH
50796: LD_OWVAR 2
50800: ARRAY
50801: NONEQUAL
50802: IFTRUE 50825
50804: PUSH
50805: LD_EXP 11
50809: NOT
50810: IFFALSE 50824
50812: PUSH
50813: LD_VAR 0 1
50817: PUSH
50818: LD_OWVAR 2
50822: NONEQUAL
50823: AND
50824: OR
50825: IFFALSE 50839
// ComMoveToArea ( un , BuildUpEscape ) ;
50827: LD_VAR 0 2
50831: PPUSH
50832: LD_INT 9
50834: PPUSH
50835: CALL_OW 113
50839: GO 50777
50841: POP
50842: POP
50843: GO 50691
50845: POP
50846: POP
// enable ;
50847: ENABLE
// end ;
50848: PPOPN 2
50850: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
50851: LD_EXP 20
50855: IFFALSE 50905
50857: GO 50859
50859: DISABLE
50860: LD_INT 0
50862: PPUSH
// begin tmp := mpBuildUpTime ;
50863: LD_ADDR_VAR 0 1
50867: PUSH
50868: LD_EXP 20
50872: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
50873: LD_INT 35
50875: PPUSH
50876: CALL_OW 67
// tmp := tmp - 0 0$1 ;
50880: LD_ADDR_VAR 0 1
50884: PUSH
50885: LD_VAR 0 1
50889: PUSH
50890: LD_INT 35
50892: MINUS
50893: ST_TO_ADDR
// until not tmp ;
50894: LD_VAR 0 1
50898: NOT
50899: IFFALSE 50873
// EndBuildUp ;
50901: CALL 50484 0 0
// end ;
50905: PPOPN 1
50907: END
// every 0 0$1 trigger mpActive marked mpWin do
50908: LD_INT 100
50910: IFFALSE 50944
50912: GO 50914
50914: DISABLE
// begin if IAmServer then
50915: CALL_OW 518
50919: IFFALSE 50928
// wait ( 0 0$3 ) ;
50921: LD_INT 105
50923: PPUSH
50924: CALL_OW 67
// if Multiplayer then
50928: LD_OWVAR 4
50932: IFFALSE 50940
// YouWinInMultiplayer else
50934: CALL_OW 106
50938: GO 50944
// YouWin ;
50940: CALL_OW 103
// end ;
50944: END
// export function HasPowerByGameType ( gameType , side ) ; begin
50945: LD_INT 0
50947: PPUSH
// result := false ;
50948: LD_ADDR_VAR 0 3
50952: PUSH
50953: LD_INT 0
50955: ST_TO_ADDR
// case gameType of GameTypeNormal , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact :
50956: LD_VAR 0 1
50960: PUSH
50961: LD_INT 1
50963: DOUBLE
50964: EQUAL
50965: IFTRUE 50987
50967: LD_INT 5
50969: DOUBLE
50970: EQUAL
50971: IFTRUE 50987
50973: LD_INT 6
50975: DOUBLE
50976: EQUAL
50977: IFTRUE 50987
50979: LD_INT 7
50981: DOUBLE
50982: EQUAL
50983: IFTRUE 50987
50985: GO 51060
50987: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
50988: LD_ADDR_VAR 0 3
50992: PUSH
50993: LD_INT 22
50995: PUSH
50996: LD_VAR 0 2
51000: PUSH
51001: EMPTY
51002: LIST
51003: LIST
51004: PUSH
51005: LD_INT 2
51007: PUSH
51008: LD_INT 21
51010: PUSH
51011: LD_INT 1
51013: PUSH
51014: EMPTY
51015: LIST
51016: LIST
51017: PUSH
51018: LD_INT 33
51020: PUSH
51021: LD_INT 3
51023: PUSH
51024: EMPTY
51025: LIST
51026: LIST
51027: PUSH
51028: LD_INT 33
51030: PUSH
51031: LD_INT 5
51033: PUSH
51034: EMPTY
51035: LIST
51036: LIST
51037: PUSH
51038: EMPTY
51039: LIST
51040: LIST
51041: LIST
51042: LIST
51043: PUSH
51044: EMPTY
51045: LIST
51046: LIST
51047: PPUSH
51048: CALL_OW 69
51052: PPUSH
51053: CALL 5242 0 1
51057: ST_TO_ADDR
// end ; GameTypeSurvival :
51058: GO 51456
51060: LD_INT 2
51062: DOUBLE
51063: EQUAL
51064: IFTRUE 51068
51066: GO 51198
51068: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
51069: LD_ADDR_VAR 0 3
51073: PUSH
51074: LD_INT 22
51076: PUSH
51077: LD_VAR 0 2
51081: PUSH
51082: EMPTY
51083: LIST
51084: LIST
51085: PUSH
51086: LD_INT 2
51088: PUSH
51089: LD_INT 30
51091: PUSH
51092: LD_INT 0
51094: PUSH
51095: EMPTY
51096: LIST
51097: LIST
51098: PUSH
51099: LD_INT 30
51101: PUSH
51102: LD_INT 1
51104: PUSH
51105: EMPTY
51106: LIST
51107: LIST
51108: PUSH
51109: EMPTY
51110: LIST
51111: LIST
51112: LIST
51113: PUSH
51114: EMPTY
51115: LIST
51116: LIST
51117: PPUSH
51118: CALL_OW 69
51122: PPUSH
51123: CALL 5242 0 1
51127: IFFALSE 51195
51129: PUSH
51130: LD_INT 22
51132: PUSH
51133: LD_VAR 0 2
51137: PUSH
51138: EMPTY
51139: LIST
51140: LIST
51141: PUSH
51142: LD_INT 2
51144: PUSH
51145: LD_INT 21
51147: PUSH
51148: LD_INT 1
51150: PUSH
51151: EMPTY
51152: LIST
51153: LIST
51154: PUSH
51155: LD_INT 33
51157: PUSH
51158: LD_INT 3
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: PUSH
51165: LD_INT 33
51167: PUSH
51168: LD_INT 5
51170: PUSH
51171: EMPTY
51172: LIST
51173: LIST
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: LIST
51179: LIST
51180: PUSH
51181: EMPTY
51182: LIST
51183: LIST
51184: PPUSH
51185: CALL_OW 69
51189: PPUSH
51190: CALL 5242 0 1
51194: AND
51195: ST_TO_ADDR
// end ; GameTypeSurvivalHardcore :
51196: GO 51456
51198: LD_INT 8
51200: DOUBLE
51201: EQUAL
51202: IFTRUE 51206
51204: GO 51355
51206: POP
// begin result := IsLive ( mpCommanders [ side ] ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
51207: LD_ADDR_VAR 0 3
51211: PUSH
51212: LD_EXP 41
51216: PUSH
51217: LD_VAR 0 2
51221: ARRAY
51222: PPUSH
51223: CALL_OW 300
51227: IFFALSE 51284
51229: PUSH
51230: LD_INT 22
51232: PUSH
51233: LD_VAR 0 2
51237: PUSH
51238: EMPTY
51239: LIST
51240: LIST
51241: PUSH
51242: LD_INT 2
51244: PUSH
51245: LD_INT 30
51247: PUSH
51248: LD_INT 0
51250: PUSH
51251: EMPTY
51252: LIST
51253: LIST
51254: PUSH
51255: LD_INT 30
51257: PUSH
51258: LD_INT 1
51260: PUSH
51261: EMPTY
51262: LIST
51263: LIST
51264: PUSH
51265: EMPTY
51266: LIST
51267: LIST
51268: LIST
51269: PUSH
51270: EMPTY
51271: LIST
51272: LIST
51273: PPUSH
51274: CALL_OW 69
51278: PPUSH
51279: CALL 5242 0 1
51283: AND
51284: IFFALSE 51352
51286: PUSH
51287: LD_INT 22
51289: PUSH
51290: LD_VAR 0 2
51294: PUSH
51295: EMPTY
51296: LIST
51297: LIST
51298: PUSH
51299: LD_INT 2
51301: PUSH
51302: LD_INT 21
51304: PUSH
51305: LD_INT 1
51307: PUSH
51308: EMPTY
51309: LIST
51310: LIST
51311: PUSH
51312: LD_INT 33
51314: PUSH
51315: LD_INT 3
51317: PUSH
51318: EMPTY
51319: LIST
51320: LIST
51321: PUSH
51322: LD_INT 33
51324: PUSH
51325: LD_INT 5
51327: PUSH
51328: EMPTY
51329: LIST
51330: LIST
51331: PUSH
51332: EMPTY
51333: LIST
51334: LIST
51335: LIST
51336: LIST
51337: PUSH
51338: EMPTY
51339: LIST
51340: LIST
51341: PPUSH
51342: CALL_OW 69
51346: PPUSH
51347: CALL 5242 0 1
51351: AND
51352: ST_TO_ADDR
// end ; GameTypeKing :
51353: GO 51456
51355: LD_INT 3
51357: DOUBLE
51358: EQUAL
51359: IFTRUE 51363
51361: GO 51455
51363: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
51364: LD_ADDR_VAR 0 3
51368: PUSH
51369: LD_INT 22
51371: PUSH
51372: LD_VAR 0 2
51376: PUSH
51377: EMPTY
51378: LIST
51379: LIST
51380: PUSH
51381: LD_INT 2
51383: PUSH
51384: LD_INT 21
51386: PUSH
51387: LD_INT 1
51389: PUSH
51390: EMPTY
51391: LIST
51392: LIST
51393: PUSH
51394: LD_INT 33
51396: PUSH
51397: LD_INT 3
51399: PUSH
51400: EMPTY
51401: LIST
51402: LIST
51403: PUSH
51404: LD_INT 33
51406: PUSH
51407: LD_INT 5
51409: PUSH
51410: EMPTY
51411: LIST
51412: LIST
51413: PUSH
51414: EMPTY
51415: LIST
51416: LIST
51417: LIST
51418: LIST
51419: PUSH
51420: EMPTY
51421: LIST
51422: LIST
51423: PPUSH
51424: CALL_OW 69
51428: PPUSH
51429: CALL 5242 0 1
51433: IFFALSE 51452
51435: PUSH
51436: LD_VAR 0 2
51440: PPUSH
51441: CALL 56129 0 1
51445: PUSH
51446: LD_EXP 35
51450: LESS
51451: AND
51452: ST_TO_ADDR
// end ; end ;
51453: GO 51456
51455: POP
// end ;
51456: LD_VAR 0 3
51460: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
51461: LD_INT 100
51463: IFFALSE 51693
51465: GO 51467
51467: DISABLE
51468: LD_INT 0
51470: PPUSH
51471: PPUSH
// begin if Multiplayer then
51472: LD_OWVAR 4
51476: IFFALSE 51484
// SetPlayerSpectator ( ) else
51478: CALL_OW 572
51482: GO 51493
// FogOff ( your_side ) ;
51484: LD_OWVAR 2
51488: PPUSH
51489: CALL_OW 344
// repeat gameIsOn := false ;
51493: LD_ADDR_VAR 0 1
51497: PUSH
51498: LD_INT 0
51500: ST_TO_ADDR
// for i := 1 to 8 do
51501: LD_ADDR_VAR 0 2
51505: PUSH
51506: DOUBLE
51507: LD_INT 1
51509: DEC
51510: ST_TO_ADDR
51511: LD_INT 8
51513: PUSH
51514: FOR_TO
51515: IFFALSE 51645
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
51517: LD_EXP 7
51521: PUSH
51522: LD_VAR 0 2
51526: ARRAY
51527: IFFALSE 51540
51529: PUSH
51530: LD_VAR 0 2
51534: PPUSH
51535: CALL_OW 108
51539: AND
51540: IFFALSE 51554
51542: PUSH
51543: LD_VAR 0 2
51547: PUSH
51548: LD_OWVAR 2
51552: NONEQUAL
51553: AND
51554: IFFALSE 51643
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
51556: LD_EXP 8
51560: PUSH
51561: LD_VAR 0 2
51565: ARRAY
51566: NOT
51567: IFTRUE 51615
51569: PUSH
51570: LD_EXP 8
51574: PUSH
51575: LD_VAR 0 2
51579: ARRAY
51580: PUSH
51581: LD_EXP 8
51585: PUSH
51586: LD_OWVAR 2
51590: ARRAY
51591: NONEQUAL
51592: IFFALSE 51614
51594: PUSH
51595: LD_OWVAR 2
51599: PPUSH
51600: LD_VAR 0 2
51604: PPUSH
51605: CALL_OW 81
51609: PUSH
51610: LD_INT 1
51612: NONEQUAL
51613: AND
51614: OR
51615: IFFALSE 51643
// if HasPowerByGameType ( mpGameType , i ) then
51617: LD_EXP 3
51621: PPUSH
51622: LD_VAR 0 2
51626: PPUSH
51627: CALL 50945 0 2
51631: IFFALSE 51643
// begin gameIsOn := true ;
51633: LD_ADDR_VAR 0 1
51637: PUSH
51638: LD_INT 1
51640: ST_TO_ADDR
// break ;
51641: GO 51645
// end ;
51643: GO 51514
51645: POP
51646: POP
// wait ( 100 ) ;
51647: LD_INT 100
51649: PPUSH
51650: CALL_OW 67
// until not gameIsOn ;
51654: LD_VAR 0 1
51658: NOT
51659: IFFALSE 51493
// if IAmServer then
51661: CALL_OW 518
51665: IFFALSE 51674
// wait ( 0 0$3 ) ;
51667: LD_INT 105
51669: PPUSH
51670: CALL_OW 67
// if Multiplayer then
51674: LD_OWVAR 4
51678: IFFALSE 51686
// YouLostInMultiplayer else
51680: CALL_OW 107
51684: GO 51693
// YouLost (  ) ;
51686: LD_STRING 
51688: PPUSH
51689: CALL_OW 104
// end ;
51693: PPOPN 2
51695: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
51696: LD_EXP 33
51700: IFFALSE 52084
51702: GO 51704
51704: DISABLE
51705: LD_INT 0
51707: PPUSH
51708: PPUSH
51709: PPUSH
51710: PPUSH
51711: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
51712: LD_ADDR_VAR 0 5
51716: PUSH
51717: LD_INT 1
51719: PUSH
51720: LD_INT 2
51722: PUSH
51723: LD_INT 3
51725: PUSH
51726: LD_INT 4
51728: PUSH
51729: LD_INT 5
51731: PUSH
51732: LD_INT 6
51734: PUSH
51735: LD_INT 7
51737: PUSH
51738: LD_INT 8
51740: PUSH
51741: EMPTY
51742: LIST
51743: LIST
51744: LIST
51745: LIST
51746: LIST
51747: LIST
51748: LIST
51749: LIST
51750: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
51751: LD_INT 350
51753: PPUSH
51754: CALL_OW 67
// for i := 1 to 8 do
51758: LD_ADDR_VAR 0 1
51762: PUSH
51763: DOUBLE
51764: LD_INT 1
51766: DEC
51767: ST_TO_ADDR
51768: LD_INT 8
51770: PUSH
51771: FOR_TO
51772: IFFALSE 52054
// begin j := sides [ i ] ;
51774: LD_ADDR_VAR 0 2
51778: PUSH
51779: LD_VAR 0 5
51783: PUSH
51784: LD_VAR 0 1
51788: ARRAY
51789: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
51790: LD_EXP 40
51794: PUSH
51795: LD_VAR 0 2
51799: ARRAY
51800: PPUSH
51801: CALL 5242 0 1
51805: IFFALSE 51818
51807: PUSH
51808: LD_VAR 0 2
51812: PPUSH
51813: CALL_OW 108
51817: AND
51818: IFFALSE 51836
51820: PUSH
51821: LD_EXP 3
51825: PPUSH
51826: LD_VAR 0 2
51830: PPUSH
51831: CALL 50945 0 2
51835: AND
51836: IFFALSE 52052
// begin wait ( mpRespawn div 2 ) ;
51838: LD_EXP 33
51842: PUSH
51843: LD_INT 2
51845: DIV
51846: PPUSH
51847: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
51851: LD_ADDR_VAR 0 3
51855: PUSH
51856: LD_INT 22
51858: PUSH
51859: LD_VAR 0 2
51863: PUSH
51864: EMPTY
51865: LIST
51866: LIST
51867: PUSH
51868: LD_INT 50
51870: PUSH
51871: EMPTY
51872: LIST
51873: PUSH
51874: LD_INT 2
51876: PUSH
51877: LD_INT 30
51879: PUSH
51880: LD_INT 0
51882: PUSH
51883: EMPTY
51884: LIST
51885: LIST
51886: PUSH
51887: LD_INT 30
51889: PUSH
51890: LD_INT 1
51892: PUSH
51893: EMPTY
51894: LIST
51895: LIST
51896: PUSH
51897: EMPTY
51898: LIST
51899: LIST
51900: LIST
51901: PUSH
51902: EMPTY
51903: LIST
51904: LIST
51905: LIST
51906: PPUSH
51907: CALL_OW 69
51911: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
51912: LD_VAR 0 3
51916: NOT
51917: IFTRUE 51931
51919: PUSH
51920: LD_VAR 0 2
51924: PPUSH
51925: CALL_OW 108
51929: NOT
51930: OR
51931: IFTRUE 51950
51933: PUSH
51934: LD_EXP 3
51938: PPUSH
51939: LD_VAR 0 2
51943: PPUSH
51944: CALL 50945 0 2
51948: NOT
51949: OR
51950: IFFALSE 51954
// continue ;
51952: GO 51771
// spawn := tmp [ 1 ] ;
51954: LD_ADDR_VAR 0 4
51958: PUSH
51959: LD_VAR 0 3
51963: PUSH
51964: LD_INT 1
51966: ARRAY
51967: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
51968: LD_EXP 40
51972: PUSH
51973: LD_VAR 0 2
51977: ARRAY
51978: PUSH
51979: LD_INT 1
51981: ARRAY
51982: PPUSH
51983: LD_VAR 0 4
51987: PPUSH
51988: CALL_OW 250
51992: PPUSH
51993: LD_VAR 0 4
51997: PPUSH
51998: CALL_OW 251
52002: PPUSH
52003: LD_INT 32
52005: PPUSH
52006: LD_INT 1
52008: PPUSH
52009: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
52013: LD_ADDR_EXP 40
52017: PUSH
52018: LD_EXP 40
52022: PPUSH
52023: LD_VAR 0 2
52027: PPUSH
52028: LD_EXP 40
52032: PUSH
52033: LD_VAR 0 2
52037: ARRAY
52038: PPUSH
52039: LD_INT 1
52041: PPUSH
52042: CALL_OW 3
52046: PPUSH
52047: CALL_OW 1
52051: ST_TO_ADDR
// end ; end ;
52052: GO 51771
52054: POP
52055: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
52056: LD_ADDR_VAR 0 5
52060: PUSH
52061: LD_VAR 0 5
52065: PPUSH
52066: LD_INT 1
52068: PPUSH
52069: LD_INT 8
52071: PPUSH
52072: LD_INT 1
52074: PPUSH
52075: CALL 7568 0 4
52079: ST_TO_ADDR
// until false ;
52080: LD_INT 0
52082: IFFALSE 51751
// end ;
52084: PPOPN 5
52086: END
// every 0 0$1 marked mpActive do
52087: GO 52089
52089: DISABLE
// begin enable ;
52090: ENABLE
// if not mpDisplayStrings then
52091: LD_EXP 38
52095: NOT
52096: IFFALSE 52107
// begin display_strings := [ ] ;
52098: LD_ADDR_OWVAR 47
52102: PUSH
52103: EMPTY
52104: ST_TO_ADDR
// exit ;
52105: GO 52117
// end ; display_strings := mpDisplayStrings ;
52107: LD_ADDR_OWVAR 47
52111: PUSH
52112: LD_EXP 38
52116: ST_TO_ADDR
// end ; end_of_file
52117: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
52118: LD_INT 0
52120: PPUSH
52121: PPUSH
52122: PPUSH
52123: PPUSH
52124: PPUSH
52125: PPUSH
52126: PPUSH
52127: PPUSH
52128: PPUSH
// if GetType ( un ) = unit_vehicle then
52129: LD_VAR 0 1
52133: PPUSH
52134: CALL_OW 247
52138: PUSH
52139: LD_INT 2
52141: EQUAL
52142: IFFALSE 52146
// exit ;
52144: GO 52919
// side := GetSide ( un ) ;
52146: LD_ADDR_VAR 0 9
52150: PUSH
52151: LD_VAR 0 1
52155: PPUSH
52156: CALL_OW 255
52160: ST_TO_ADDR
// if mpGameType in [ GameTypeSurvival , GameTypeSurvivalHardcore ] then
52161: LD_EXP 3
52165: PUSH
52166: LD_INT 2
52168: PUSH
52169: LD_INT 8
52171: PUSH
52172: EMPTY
52173: LIST
52174: LIST
52175: IN
52176: IFFALSE 52270
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
52178: LD_VAR 0 1
52182: PPUSH
52183: CALL_OW 266
52187: PUSH
52188: LD_INT 0
52190: PUSH
52191: LD_INT 1
52193: PUSH
52194: EMPTY
52195: LIST
52196: LIST
52197: IN
52198: IFFALSE 52270
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
52200: LD_ADDR_VAR 0 3
52204: PUSH
52205: LD_INT 22
52207: PUSH
52208: LD_VAR 0 9
52212: PUSH
52213: EMPTY
52214: LIST
52215: LIST
52216: PUSH
52217: LD_INT 2
52219: PUSH
52220: LD_INT 21
52222: PUSH
52223: LD_INT 1
52225: PUSH
52226: EMPTY
52227: LIST
52228: LIST
52229: PUSH
52230: LD_INT 33
52232: PUSH
52233: LD_INT 3
52235: PUSH
52236: EMPTY
52237: LIST
52238: LIST
52239: PUSH
52240: EMPTY
52241: LIST
52242: LIST
52243: LIST
52244: PUSH
52245: EMPTY
52246: LIST
52247: LIST
52248: PPUSH
52249: CALL_OW 69
52253: PUSH
52254: FOR_IN
52255: IFFALSE 52268
// KillUnit ( i ) ;
52257: LD_VAR 0 3
52261: PPUSH
52262: CALL_OW 66
52266: GO 52254
52268: POP
52269: POP
// end ; if mpGameType = GameTypeSurvivalHardcore then
52270: LD_EXP 3
52274: PUSH
52275: LD_INT 8
52277: EQUAL
52278: IFFALSE 52362
// if un in mpCommanders then
52280: LD_VAR 0 1
52284: PUSH
52285: LD_EXP 41
52289: IN
52290: IFFALSE 52362
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
52292: LD_ADDR_VAR 0 3
52296: PUSH
52297: LD_INT 22
52299: PUSH
52300: LD_VAR 0 9
52304: PUSH
52305: EMPTY
52306: LIST
52307: LIST
52308: PUSH
52309: LD_INT 2
52311: PUSH
52312: LD_INT 21
52314: PUSH
52315: LD_INT 1
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: PUSH
52322: LD_INT 33
52324: PUSH
52325: LD_INT 3
52327: PUSH
52328: EMPTY
52329: LIST
52330: LIST
52331: PUSH
52332: EMPTY
52333: LIST
52334: LIST
52335: LIST
52336: PUSH
52337: EMPTY
52338: LIST
52339: LIST
52340: PPUSH
52341: CALL_OW 69
52345: PUSH
52346: FOR_IN
52347: IFFALSE 52360
// KillUnit ( i ) ;
52349: LD_VAR 0 3
52353: PPUSH
52354: CALL_OW 66
52358: GO 52346
52360: POP
52361: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
52362: LD_VAR 0 1
52366: PPUSH
52367: CALL_OW 257
52371: PUSH
52372: LD_INT 12
52374: PUSH
52375: LD_INT 17
52377: PUSH
52378: LD_INT 15
52380: PUSH
52381: LD_INT 16
52383: PUSH
52384: EMPTY
52385: LIST
52386: LIST
52387: LIST
52388: LIST
52389: IN
52390: IFTRUE 52407
52392: PUSH
52393: LD_VAR 0 1
52397: PPUSH
52398: CALL_OW 263
52402: PUSH
52403: LD_INT 5
52405: EQUAL
52406: OR
52407: IFFALSE 52644
// begin tag := 0 ;
52409: LD_ADDR_VAR 0 5
52413: PUSH
52414: LD_INT 0
52416: ST_TO_ADDR
// for i := 1 to 8 do
52417: LD_ADDR_VAR 0 3
52421: PUSH
52422: DOUBLE
52423: LD_INT 1
52425: DEC
52426: ST_TO_ADDR
52427: LD_INT 8
52429: PUSH
52430: FOR_TO
52431: IFFALSE 52465
// if un in mpApePosIndex [ i ] then
52433: LD_VAR 0 1
52437: PUSH
52438: LD_EXP 32
52442: PUSH
52443: LD_VAR 0 3
52447: ARRAY
52448: IN
52449: IFFALSE 52463
// begin tag := i ;
52451: LD_ADDR_VAR 0 5
52455: PUSH
52456: LD_VAR 0 3
52460: ST_TO_ADDR
// break ;
52461: GO 52465
// end ;
52463: GO 52430
52465: POP
52466: POP
// if not tag then
52467: LD_VAR 0 5
52471: NOT
52472: IFFALSE 52476
// exit ;
52474: GO 52919
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
52476: LD_ADDR_VAR 0 7
52480: PUSH
52481: LD_EXP 31
52485: PUSH
52486: LD_EXP 7
52490: PUSH
52491: LD_VAR 0 5
52495: ARRAY
52496: ARRAY
52497: ST_TO_ADDR
// if not area then
52498: LD_VAR 0 7
52502: NOT
52503: IFFALSE 52507
// exit ;
52505: GO 52919
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
52507: LD_INT 14700
52509: PUSH
52510: LD_VAR 0 1
52514: PUSH
52515: LD_INT 5
52517: MOD
52518: PUSH
52519: LD_INT 1
52521: PLUS
52522: PUSH
52523: LD_INT 700
52525: MUL
52526: PLUS
52527: PPUSH
52528: CALL_OW 67
// repeat wait ( 10 ) ;
52532: LD_INT 10
52534: PPUSH
52535: CALL_OW 67
// until not mpBlockRespThread ;
52539: LD_EXP 47
52543: NOT
52544: IFFALSE 52532
// mpBlockRespThread := true ;
52546: LD_ADDR_EXP 47
52550: PUSH
52551: LD_INT 1
52553: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
52554: LD_INT 0
52556: PPUSH
52557: CALL 37345 0 1
// ape := CreateHuman ;
52561: LD_ADDR_VAR 0 4
52565: PUSH
52566: CALL_OW 44
52570: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
52571: LD_ADDR_EXP 32
52575: PUSH
52576: LD_EXP 32
52580: PPUSH
52581: LD_VAR 0 5
52585: PPUSH
52586: LD_EXP 32
52590: PUSH
52591: LD_VAR 0 5
52595: ARRAY
52596: PPUSH
52597: LD_VAR 0 4
52601: PPUSH
52602: CALL 41218 0 2
52606: PPUSH
52607: CALL_OW 1
52611: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
52612: LD_VAR 0 4
52616: PPUSH
52617: LD_VAR 0 7
52621: PPUSH
52622: LD_INT 0
52624: PPUSH
52625: CALL_OW 49
// wait ( 10 ) ;
52629: LD_INT 10
52631: PPUSH
52632: CALL_OW 67
// mpBlockRespThread := false ;
52636: LD_ADDR_EXP 47
52640: PUSH
52641: LD_INT 0
52643: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
52644: LD_VAR 0 1
52648: PPUSH
52649: CALL_OW 247
52653: PUSH
52654: LD_INT 1
52656: EQUAL
52657: IFFALSE 52674
52659: PUSH
52660: LD_VAR 0 1
52664: PPUSH
52665: CALL_OW 248
52669: PUSH
52670: LD_INT 0
52672: GREATER
52673: AND
52674: IFFALSE 52919
// begin if not mpRespawn then
52676: LD_EXP 33
52680: NOT
52681: IFFALSE 52685
// exit ;
52683: GO 52919
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
52685: LD_VAR 0 9
52689: PPUSH
52690: CALL_OW 108
52694: NOT
52695: IFFALSE 52714
52697: PUSH
52698: LD_EXP 3
52702: PPUSH
52703: LD_VAR 0 9
52707: PPUSH
52708: CALL 50945 0 2
52712: NOT
52713: AND
52714: IFFALSE 52718
// exit ;
52716: GO 52919
// side := GetSide ( un ) ;
52718: LD_ADDR_VAR 0 9
52722: PUSH
52723: LD_VAR 0 1
52727: PPUSH
52728: CALL_OW 255
52732: ST_TO_ADDR
// nation := GetNation ( un ) ;
52733: LD_ADDR_VAR 0 8
52737: PUSH
52738: LD_VAR 0 1
52742: PPUSH
52743: CALL_OW 248
52747: ST_TO_ADDR
// class := GetClass ( un ) ;
52748: LD_ADDR_VAR 0 6
52752: PUSH
52753: LD_VAR 0 1
52757: PPUSH
52758: CALL_OW 257
52762: ST_TO_ADDR
// if class > 4 then
52763: LD_VAR 0 6
52767: PUSH
52768: LD_INT 4
52770: GREATER
52771: IFFALSE 52781
// class := 1 ;
52773: LD_ADDR_VAR 0 6
52777: PUSH
52778: LD_INT 1
52780: ST_TO_ADDR
// repeat wait ( 10 ) ;
52781: LD_INT 10
52783: PPUSH
52784: CALL_OW 67
// until not mpBlockRespThread ;
52788: LD_EXP 47
52792: NOT
52793: IFFALSE 52781
// mpBlockRespThread := true ;
52795: LD_ADDR_EXP 47
52799: PUSH
52800: LD_INT 1
52802: ST_TO_ADDR
// uc_side := side ;
52803: LD_ADDR_OWVAR 20
52807: PUSH
52808: LD_VAR 0 9
52812: ST_TO_ADDR
// uc_nation := nation ;
52813: LD_ADDR_OWVAR 21
52817: PUSH
52818: LD_VAR 0 8
52822: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
52823: LD_INT 0
52825: PPUSH
52826: LD_VAR 0 6
52830: PPUSH
52831: LD_INT 2
52833: PPUSH
52834: CALL_OW 380
// un := CreateHuman ;
52838: LD_ADDR_VAR 0 1
52842: PUSH
52843: CALL_OW 44
52847: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
52848: LD_ADDR_EXP 40
52852: PUSH
52853: LD_EXP 40
52857: PPUSH
52858: LD_VAR 0 9
52862: PPUSH
52863: LD_EXP 40
52867: PUSH
52868: LD_VAR 0 9
52872: ARRAY
52873: PPUSH
52874: LD_EXP 40
52878: PUSH
52879: LD_VAR 0 9
52883: ARRAY
52884: PUSH
52885: LD_INT 1
52887: PLUS
52888: PPUSH
52889: LD_VAR 0 1
52893: PPUSH
52894: CALL_OW 1
52898: PPUSH
52899: CALL_OW 1
52903: ST_TO_ADDR
// wait ( 10 ) ;
52904: LD_INT 10
52906: PPUSH
52907: CALL_OW 67
// mpBlockRespThread := false ;
52911: LD_ADDR_EXP 47
52915: PUSH
52916: LD_INT 0
52918: ST_TO_ADDR
// end ; end ;
52919: LD_VAR 0 2
52923: RET
// export function Multiplayer_VehicleConstruction_ApeConsumed ( factory , un ) ; var i , tag , area , ape ; begin
52924: LD_INT 0
52926: PPUSH
52927: PPUSH
52928: PPUSH
52929: PPUSH
52930: PPUSH
// tag := 0 ;
52931: LD_ADDR_VAR 0 5
52935: PUSH
52936: LD_INT 0
52938: ST_TO_ADDR
// for i := 1 to 8 do
52939: LD_ADDR_VAR 0 4
52943: PUSH
52944: DOUBLE
52945: LD_INT 1
52947: DEC
52948: ST_TO_ADDR
52949: LD_INT 8
52951: PUSH
52952: FOR_TO
52953: IFFALSE 52987
// if un in mpApePosIndex [ i ] then
52955: LD_VAR 0 2
52959: PUSH
52960: LD_EXP 32
52964: PUSH
52965: LD_VAR 0 4
52969: ARRAY
52970: IN
52971: IFFALSE 52985
// begin tag := i ;
52973: LD_ADDR_VAR 0 5
52977: PUSH
52978: LD_VAR 0 4
52982: ST_TO_ADDR
// break ;
52983: GO 52987
// end ;
52985: GO 52952
52987: POP
52988: POP
// if not tag then
52989: LD_VAR 0 5
52993: NOT
52994: IFFALSE 52998
// exit ;
52996: GO 53166
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
52998: LD_ADDR_VAR 0 6
53002: PUSH
53003: LD_EXP 31
53007: PUSH
53008: LD_EXP 7
53012: PUSH
53013: LD_VAR 0 5
53017: ARRAY
53018: ARRAY
53019: ST_TO_ADDR
// if not area then
53020: LD_VAR 0 6
53024: NOT
53025: IFFALSE 53029
// exit ;
53027: GO 53166
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
53029: LD_INT 14700
53031: PUSH
53032: LD_VAR 0 2
53036: PUSH
53037: LD_INT 5
53039: MOD
53040: PUSH
53041: LD_INT 1
53043: PLUS
53044: PUSH
53045: LD_INT 700
53047: MUL
53048: PLUS
53049: PPUSH
53050: CALL_OW 67
// repeat wait ( 10 ) ;
53054: LD_INT 10
53056: PPUSH
53057: CALL_OW 67
// until not mpBlockRespThread ;
53061: LD_EXP 47
53065: NOT
53066: IFFALSE 53054
// mpBlockRespThread := true ;
53068: LD_ADDR_EXP 47
53072: PUSH
53073: LD_INT 1
53075: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
53076: LD_INT 0
53078: PPUSH
53079: CALL 37345 0 1
// ape := CreateHuman ;
53083: LD_ADDR_VAR 0 7
53087: PUSH
53088: CALL_OW 44
53092: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
53093: LD_ADDR_EXP 32
53097: PUSH
53098: LD_EXP 32
53102: PPUSH
53103: LD_VAR 0 5
53107: PPUSH
53108: LD_EXP 32
53112: PUSH
53113: LD_VAR 0 5
53117: ARRAY
53118: PPUSH
53119: LD_VAR 0 7
53123: PPUSH
53124: CALL 41218 0 2
53128: PPUSH
53129: CALL_OW 1
53133: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
53134: LD_VAR 0 7
53138: PPUSH
53139: LD_VAR 0 6
53143: PPUSH
53144: LD_INT 0
53146: PPUSH
53147: CALL_OW 49
// wait ( 10 ) ;
53151: LD_INT 10
53153: PPUSH
53154: CALL_OW 67
// mpBlockRespThread := false ;
53158: LD_ADDR_EXP 47
53162: PUSH
53163: LD_INT 0
53165: ST_TO_ADDR
// end ;
53166: LD_VAR 0 3
53170: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
53171: LD_INT 0
53173: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
53174: LD_VAR 0 1
53178: PPUSH
53179: CALL_OW 266
53183: PUSH
53184: LD_INT 0
53186: PUSH
53187: LD_INT 1
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: IN
53194: IFFALSE 53219
// SetBName ( building , @ & GetSide ( building ) ) ;
53196: LD_VAR 0 1
53200: PPUSH
53201: LD_STRING @
53203: PUSH
53204: LD_VAR 0 1
53208: PPUSH
53209: CALL_OW 255
53213: STR
53214: PPUSH
53215: CALL_OW 500
// end ;
53219: LD_VAR 0 2
53223: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
53224: LD_INT 0
53226: PPUSH
53227: PPUSH
// if mpGameType in [ GameTypeSurvival , GameTypeSurvivalHardcore ] and GetBType ( building ) in [ b_depot , b_warehouse ] then
53228: LD_EXP 3
53232: PUSH
53233: LD_INT 2
53235: PUSH
53236: LD_INT 8
53238: PUSH
53239: EMPTY
53240: LIST
53241: LIST
53242: IN
53243: IFFALSE 53267
53245: PUSH
53246: LD_VAR 0 1
53250: PPUSH
53251: CALL_OW 266
53255: PUSH
53256: LD_INT 0
53258: PUSH
53259: LD_INT 1
53261: PUSH
53262: EMPTY
53263: LIST
53264: LIST
53265: IN
53266: AND
53267: IFFALSE 53346
// begin SetSide ( building , oldSide ) ;
53269: LD_VAR 0 1
53273: PPUSH
53274: LD_VAR 0 2
53278: PPUSH
53279: CALL_OW 235
// KillUnit ( building ) ;
53283: LD_VAR 0 1
53287: PPUSH
53288: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
53292: LD_ADDR_VAR 0 5
53296: PUSH
53297: LD_INT 22
53299: PUSH
53300: LD_VAR 0 2
53304: PUSH
53305: EMPTY
53306: LIST
53307: LIST
53308: PUSH
53309: LD_INT 21
53311: PUSH
53312: LD_INT 1
53314: PUSH
53315: EMPTY
53316: LIST
53317: LIST
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: PPUSH
53323: CALL_OW 69
53327: PUSH
53328: FOR_IN
53329: IFFALSE 53342
// KillUnit ( i ) ;
53331: LD_VAR 0 5
53335: PPUSH
53336: CALL_OW 66
53340: GO 53328
53342: POP
53343: POP
// exit ;
53344: GO 53391
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
53346: LD_VAR 0 1
53350: PPUSH
53351: CALL_OW 266
53355: PUSH
53356: LD_INT 0
53358: PUSH
53359: LD_INT 1
53361: PUSH
53362: EMPTY
53363: LIST
53364: LIST
53365: IN
53366: IFFALSE 53391
// SetBName ( building , @ & GetSide ( building ) ) ;
53368: LD_VAR 0 1
53372: PPUSH
53373: LD_STRING @
53375: PUSH
53376: LD_VAR 0 1
53380: PPUSH
53381: CALL_OW 255
53385: STR
53386: PPUSH
53387: CALL_OW 500
// end ;
53391: LD_VAR 0 4
53395: RET
// export function Multiplayer_OilExtracted ( building , side , base , amount ) ; var i , value ; begin
53396: LD_INT 0
53398: PPUSH
53399: PPUSH
53400: PPUSH
// if mpGameType <> GameTypeFamine then
53401: LD_EXP 3
53405: PUSH
53406: LD_INT 5
53408: NONEQUAL
53409: IFFALSE 53413
// exit ;
53411: GO 53647
// for i := 1 to mpGlobalOilDeposits do
53413: LD_ADDR_VAR 0 6
53417: PUSH
53418: DOUBLE
53419: LD_INT 1
53421: DEC
53422: ST_TO_ADDR
53423: LD_EXP 42
53427: PUSH
53428: FOR_TO
53429: IFFALSE 53645
// begin if HexInfo ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) = building then
53431: LD_EXP 42
53435: PUSH
53436: LD_VAR 0 6
53440: ARRAY
53441: PUSH
53442: LD_INT 1
53444: ARRAY
53445: PPUSH
53446: LD_EXP 42
53450: PUSH
53451: LD_VAR 0 6
53455: ARRAY
53456: PUSH
53457: LD_INT 2
53459: ARRAY
53460: PPUSH
53461: CALL_OW 428
53465: PUSH
53466: LD_VAR 0 1
53470: EQUAL
53471: IFFALSE 53643
// begin value := mpGlobalOilDeposits [ i ] [ 3 ] ;
53473: LD_ADDR_VAR 0 7
53477: PUSH
53478: LD_EXP 42
53482: PUSH
53483: LD_VAR 0 6
53487: ARRAY
53488: PUSH
53489: LD_INT 3
53491: ARRAY
53492: ST_TO_ADDR
// value := value - amount ;
53493: LD_ADDR_VAR 0 7
53497: PUSH
53498: LD_VAR 0 7
53502: PUSH
53503: LD_VAR 0 4
53507: MINUS
53508: ST_TO_ADDR
// mpGlobalOilDeposits := Replace ( mpGlobalOilDeposits , i , Replace ( mpGlobalOilDeposits [ i ] , 3 , value ) ) ;
53509: LD_ADDR_EXP 42
53513: PUSH
53514: LD_EXP 42
53518: PPUSH
53519: LD_VAR 0 6
53523: PPUSH
53524: LD_EXP 42
53528: PUSH
53529: LD_VAR 0 6
53533: ARRAY
53534: PPUSH
53535: LD_INT 3
53537: PPUSH
53538: LD_VAR 0 7
53542: PPUSH
53543: CALL_OW 1
53547: PPUSH
53548: CALL_OW 1
53552: ST_TO_ADDR
// if side in [ your_side , 9 ] then
53553: LD_VAR 0 2
53557: PUSH
53558: LD_OWVAR 2
53562: PUSH
53563: LD_INT 9
53565: PUSH
53566: EMPTY
53567: LIST
53568: LIST
53569: IN
53570: IFFALSE 53586
// SetUnitDisplayNumber ( building , value ) ;
53572: LD_VAR 0 1
53576: PPUSH
53577: LD_VAR 0 7
53581: PPUSH
53582: CALL_OW 505
// if value <= 0 then
53586: LD_VAR 0 7
53590: PUSH
53591: LD_INT 0
53593: LESSEQUAL
53594: IFFALSE 53643
// begin RemoveDepositXY ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) ;
53596: LD_EXP 42
53600: PUSH
53601: LD_VAR 0 6
53605: ARRAY
53606: PUSH
53607: LD_INT 1
53609: ARRAY
53610: PPUSH
53611: LD_EXP 42
53615: PUSH
53616: LD_VAR 0 6
53620: ARRAY
53621: PUSH
53622: LD_INT 2
53624: ARRAY
53625: PPUSH
53626: CALL_OW 63
// KillUnit ( building ) ;
53630: LD_VAR 0 1
53634: PPUSH
53635: CALL_OW 66
// exit ;
53639: POP
53640: POP
53641: GO 53647
// end ; end ; end ;
53643: GO 53428
53645: POP
53646: POP
// end ;
53647: LD_VAR 0 5
53651: RET
// export function Multiplayer_SibExtracted ( building , side , base , amount ) ; var i , value ; begin
53652: LD_INT 0
53654: PPUSH
53655: PPUSH
53656: PPUSH
// if mpGameType <> GameTypeFamine then
53657: LD_EXP 3
53661: PUSH
53662: LD_INT 5
53664: NONEQUAL
53665: IFFALSE 53669
// exit ;
53667: GO 53903
// for i := 1 to mpGlobalSibDeposits do
53669: LD_ADDR_VAR 0 6
53673: PUSH
53674: DOUBLE
53675: LD_INT 1
53677: DEC
53678: ST_TO_ADDR
53679: LD_EXP 43
53683: PUSH
53684: FOR_TO
53685: IFFALSE 53901
// begin if HexInfo ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) = building then
53687: LD_EXP 43
53691: PUSH
53692: LD_VAR 0 6
53696: ARRAY
53697: PUSH
53698: LD_INT 1
53700: ARRAY
53701: PPUSH
53702: LD_EXP 43
53706: PUSH
53707: LD_VAR 0 6
53711: ARRAY
53712: PUSH
53713: LD_INT 2
53715: ARRAY
53716: PPUSH
53717: CALL_OW 428
53721: PUSH
53722: LD_VAR 0 1
53726: EQUAL
53727: IFFALSE 53899
// begin value := mpGlobalSibDeposits [ i ] [ 3 ] ;
53729: LD_ADDR_VAR 0 7
53733: PUSH
53734: LD_EXP 43
53738: PUSH
53739: LD_VAR 0 6
53743: ARRAY
53744: PUSH
53745: LD_INT 3
53747: ARRAY
53748: ST_TO_ADDR
// value := value - amount ;
53749: LD_ADDR_VAR 0 7
53753: PUSH
53754: LD_VAR 0 7
53758: PUSH
53759: LD_VAR 0 4
53763: MINUS
53764: ST_TO_ADDR
// mpGlobalSibDeposits := Replace ( mpGlobalSibDeposits , i , Replace ( mpGlobalSibDeposits [ i ] , 3 , value ) ) ;
53765: LD_ADDR_EXP 43
53769: PUSH
53770: LD_EXP 43
53774: PPUSH
53775: LD_VAR 0 6
53779: PPUSH
53780: LD_EXP 43
53784: PUSH
53785: LD_VAR 0 6
53789: ARRAY
53790: PPUSH
53791: LD_INT 3
53793: PPUSH
53794: LD_VAR 0 7
53798: PPUSH
53799: CALL_OW 1
53803: PPUSH
53804: CALL_OW 1
53808: ST_TO_ADDR
// if side in [ your_side , 9 ] then
53809: LD_VAR 0 2
53813: PUSH
53814: LD_OWVAR 2
53818: PUSH
53819: LD_INT 9
53821: PUSH
53822: EMPTY
53823: LIST
53824: LIST
53825: IN
53826: IFFALSE 53842
// SetUnitDisplayNumber ( building , value ) ;
53828: LD_VAR 0 1
53832: PPUSH
53833: LD_VAR 0 7
53837: PPUSH
53838: CALL_OW 505
// if value <= 0 then
53842: LD_VAR 0 7
53846: PUSH
53847: LD_INT 0
53849: LESSEQUAL
53850: IFFALSE 53899
// begin RemoveDepositXY ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) ;
53852: LD_EXP 43
53856: PUSH
53857: LD_VAR 0 6
53861: ARRAY
53862: PUSH
53863: LD_INT 1
53865: ARRAY
53866: PPUSH
53867: LD_EXP 43
53871: PUSH
53872: LD_VAR 0 6
53876: ARRAY
53877: PUSH
53878: LD_INT 2
53880: ARRAY
53881: PPUSH
53882: CALL_OW 63
// KillUnit ( building ) ;
53886: LD_VAR 0 1
53890: PPUSH
53891: CALL_OW 66
// exit ;
53895: POP
53896: POP
53897: GO 53903
// end ; end ; end ;
53899: GO 53684
53901: POP
53902: POP
// end ;
53903: LD_VAR 0 5
53907: RET
// export function Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ; var side ; begin
53908: LD_INT 0
53910: PPUSH
53911: PPUSH
// side := GetSide ( factory ) ;
53912: LD_ADDR_VAR 0 7
53916: PUSH
53917: LD_VAR 0 1
53921: PPUSH
53922: CALL_OW 255
53926: ST_TO_ADDR
// if weapon = ar_miner and FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , ar_miner ] ] ) > 0 then
53927: LD_VAR 0 5
53931: PUSH
53932: LD_INT 81
53934: EQUAL
53935: IFFALSE 53973
53937: PUSH
53938: LD_INT 22
53940: PUSH
53941: LD_VAR 0 7
53945: PUSH
53946: EMPTY
53947: LIST
53948: LIST
53949: PUSH
53950: LD_INT 34
53952: PUSH
53953: LD_INT 81
53955: PUSH
53956: EMPTY
53957: LIST
53958: LIST
53959: PUSH
53960: EMPTY
53961: LIST
53962: LIST
53963: PPUSH
53964: CALL_OW 69
53968: PUSH
53969: LD_INT 0
53971: GREATER
53972: AND
53973: IFFALSE 54006
// begin ComCancel ( factory ) ;
53975: LD_VAR 0 1
53979: PPUSH
53980: CALL_OW 127
// if side = your_side then
53984: LD_VAR 0 7
53988: PUSH
53989: LD_OWVAR 2
53993: EQUAL
53994: IFFALSE 54006
// HintSpec ( VehLimit , 2 ) ;
53996: LD_STRING VehLimit
53998: PPUSH
53999: LD_INT 2
54001: PPUSH
54002: CALL_OW 338
// end ; end ;
54006: LD_VAR 0 6
54010: RET
// export function Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; var i , j ; begin
54011: LD_INT 0
54013: PPUSH
54014: PPUSH
54015: PPUSH
// if GetWeapon ( newId ) = ar_miner and GetControl ( newId ) = control_manual then
54016: LD_VAR 0 1
54020: PPUSH
54021: CALL_OW 264
54025: PUSH
54026: LD_INT 81
54028: EQUAL
54029: IFFALSE 54046
54031: PUSH
54032: LD_VAR 0 1
54036: PPUSH
54037: CALL_OW 263
54041: PUSH
54042: LD_INT 1
54044: EQUAL
54045: AND
54046: IFFALSE 54326
// begin for i := 1 to Count ( minersList ) do
54048: LD_ADDR_VAR 0 6
54052: PUSH
54053: DOUBLE
54054: LD_INT 1
54056: DEC
54057: ST_TO_ADDR
54058: LD_EXP 58
54062: PPUSH
54063: CALL 5242 0 1
54067: PUSH
54068: FOR_TO
54069: IFFALSE 54187
// begin if minersList [ i ] = oldId then
54071: LD_EXP 58
54075: PUSH
54076: LD_VAR 0 6
54080: ARRAY
54081: PUSH
54082: LD_VAR 0 2
54086: EQUAL
54087: IFFALSE 54185
// begin for j := 1 to minerMinesList [ i ] do
54089: LD_ADDR_VAR 0 7
54093: PUSH
54094: DOUBLE
54095: LD_INT 1
54097: DEC
54098: ST_TO_ADDR
54099: LD_EXP 59
54103: PUSH
54104: LD_VAR 0 6
54108: ARRAY
54109: PUSH
54110: FOR_TO
54111: IFFALSE 54161
// RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
54113: LD_EXP 59
54117: PUSH
54118: LD_VAR 0 6
54122: ARRAY
54123: PUSH
54124: LD_VAR 0 7
54128: ARRAY
54129: PUSH
54130: LD_INT 1
54132: ARRAY
54133: PPUSH
54134: LD_EXP 59
54138: PUSH
54139: LD_VAR 0 6
54143: ARRAY
54144: PUSH
54145: LD_VAR 0 7
54149: ARRAY
54150: PUSH
54151: LD_INT 2
54153: ARRAY
54154: PPUSH
54155: CALL_OW 612
54159: GO 54110
54161: POP
54162: POP
// minerMinesList := Delete ( minerMinesList , i ) ;
54163: LD_ADDR_EXP 59
54167: PUSH
54168: LD_EXP 59
54172: PPUSH
54173: LD_VAR 0 6
54177: PPUSH
54178: CALL_OW 3
54182: ST_TO_ADDR
// break ;
54183: GO 54187
// end ; end ;
54185: GO 54068
54187: POP
54188: POP
// minersList := minersList diff oldId ;
54189: LD_ADDR_EXP 58
54193: PUSH
54194: LD_EXP 58
54198: PUSH
54199: LD_VAR 0 2
54203: DIFF
54204: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_weapon , ar_miner ] ] ) > 1 then
54205: LD_INT 22
54207: PUSH
54208: LD_VAR 0 4
54212: PPUSH
54213: CALL_OW 255
54217: PUSH
54218: EMPTY
54219: LIST
54220: LIST
54221: PUSH
54222: LD_INT 34
54224: PUSH
54225: LD_INT 81
54227: PUSH
54228: EMPTY
54229: LIST
54230: LIST
54231: PUSH
54232: EMPTY
54233: LIST
54234: LIST
54235: PPUSH
54236: CALL_OW 69
54240: PUSH
54241: LD_INT 1
54243: GREATER
54244: IFFALSE 54271
// begin ComExit ( unit ) ;
54246: LD_VAR 0 4
54250: PPUSH
54251: CALL 41616 0 1
// SetSide ( newId , oldSide ) ;
54255: LD_VAR 0 1
54259: PPUSH
54260: LD_VAR 0 3
54264: PPUSH
54265: CALL_OW 235
// exit ;
54269: GO 54326
// end ; minersList := Replace ( minersList , minersList + 1 , newId ) ;
54271: LD_ADDR_EXP 58
54275: PUSH
54276: LD_EXP 58
54280: PPUSH
54281: LD_EXP 58
54285: PUSH
54286: LD_INT 1
54288: PLUS
54289: PPUSH
54290: LD_VAR 0 1
54294: PPUSH
54295: CALL_OW 1
54299: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
54300: LD_ADDR_EXP 59
54304: PUSH
54305: LD_EXP 59
54309: PPUSH
54310: LD_EXP 59
54314: PUSH
54315: LD_INT 1
54317: PLUS
54318: PPUSH
54319: EMPTY
54320: PPUSH
54321: CALL_OW 1
54325: ST_TO_ADDR
// end ; end ; end_of_file
54326: LD_VAR 0 5
54330: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
54331: LD_EXP 39
54335: IFFALSE 54343
54337: PUSH
54338: CALL 54553 0 0
54342: AND
54343: IFFALSE 54351
54345: PUSH
54346: LD_OWVAR 4
54350: AND
54351: IFFALSE 54550
54353: GO 54355
54355: DISABLE
54356: LD_INT 0
54358: PPUSH
54359: PPUSH
// begin canWin := false ;
54360: LD_ADDR_VAR 0 2
54364: PUSH
54365: LD_INT 0
54367: ST_TO_ADDR
// if not HasPower ( your_side ) then
54368: LD_OWVAR 2
54372: PPUSH
54373: CALL 54595 0 1
54377: NOT
54378: IFFALSE 54389
// begin Multiplayer_Loose_Message ;
54380: CALL_OW 521
// enable ( mpLose ) ;
54384: LD_INT 102
54386: ENABLE_MARKED
// end else
54387: GO 54550
// begin canWin := true ;
54389: LD_ADDR_VAR 0 2
54393: PUSH
54394: LD_INT 1
54396: ST_TO_ADDR
// for i := 1 to 8 do
54397: LD_ADDR_VAR 0 1
54401: PUSH
54402: DOUBLE
54403: LD_INT 1
54405: DEC
54406: ST_TO_ADDR
54407: LD_INT 8
54409: PUSH
54410: FOR_TO
54411: IFFALSE 54536
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
54413: LD_EXP 7
54417: PUSH
54418: LD_VAR 0 1
54422: ARRAY
54423: IFFALSE 54436
54425: PUSH
54426: LD_VAR 0 1
54430: PPUSH
54431: CALL_OW 108
54435: AND
54436: IFFALSE 54450
54438: PUSH
54439: LD_VAR 0 1
54443: PUSH
54444: LD_OWVAR 2
54448: NONEQUAL
54449: AND
54450: IFFALSE 54534
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
54452: LD_EXP 8
54456: PUSH
54457: LD_VAR 0 1
54461: ARRAY
54462: NOT
54463: IFTRUE 54511
54465: PUSH
54466: LD_EXP 8
54470: PUSH
54471: LD_VAR 0 1
54475: ARRAY
54476: PUSH
54477: LD_EXP 8
54481: PUSH
54482: LD_OWVAR 2
54486: ARRAY
54487: NONEQUAL
54488: IFFALSE 54510
54490: PUSH
54491: LD_OWVAR 2
54495: PPUSH
54496: LD_VAR 0 1
54500: PPUSH
54501: CALL_OW 81
54505: PUSH
54506: LD_INT 1
54508: NONEQUAL
54509: AND
54510: OR
54511: IFFALSE 54534
// if HasPower ( i ) then
54513: LD_VAR 0 1
54517: PPUSH
54518: CALL 54595 0 1
54522: IFFALSE 54534
// begin canWin := false ;
54524: LD_ADDR_VAR 0 2
54528: PUSH
54529: LD_INT 0
54531: ST_TO_ADDR
// break ;
54532: GO 54536
// end ;
54534: GO 54410
54536: POP
54537: POP
// if canWin then
54538: LD_VAR 0 2
54542: IFFALSE 54549
// enable ( mpWin ) else
54544: LD_INT 101
54546: ENABLE_MARKED
54547: GO 54550
// enable ;
54549: ENABLE
// end ; end ;
54550: PPOPN 2
54552: END
// function CanWinLoose ; begin
54553: LD_INT 0
54555: PPUSH
// result := true ;
54556: LD_ADDR_VAR 0 1
54560: PUSH
54561: LD_INT 1
54563: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
54564: CALL_OW 531
54568: IFFALSE 54580
54570: PUSH
54571: CALL_OW 519
54575: PUSH
54576: LD_INT 1
54578: GREATER
54579: AND
54580: IFFALSE 54590
// result := false ;
54582: LD_ADDR_VAR 0 1
54586: PUSH
54587: LD_INT 0
54589: ST_TO_ADDR
// end ;
54590: LD_VAR 0 1
54594: RET
// function HasPower ( i ) ; begin
54595: LD_INT 0
54597: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
54598: LD_ADDR_VAR 0 2
54602: PUSH
54603: LD_INT 22
54605: PUSH
54606: LD_VAR 0 1
54610: PUSH
54611: EMPTY
54612: LIST
54613: LIST
54614: PUSH
54615: LD_INT 2
54617: PUSH
54618: LD_INT 21
54620: PUSH
54621: LD_INT 1
54623: PUSH
54624: EMPTY
54625: LIST
54626: LIST
54627: PUSH
54628: LD_INT 33
54630: PUSH
54631: LD_INT 3
54633: PUSH
54634: EMPTY
54635: LIST
54636: LIST
54637: PUSH
54638: LD_INT 33
54640: PUSH
54641: LD_INT 5
54643: PUSH
54644: EMPTY
54645: LIST
54646: LIST
54647: PUSH
54648: EMPTY
54649: LIST
54650: LIST
54651: LIST
54652: LIST
54653: PUSH
54654: EMPTY
54655: LIST
54656: LIST
54657: PPUSH
54658: CALL_OW 69
54662: ST_TO_ADDR
// end ; end_of_file
54663: LD_VAR 0 2
54667: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
54668: LD_EXP 39
54672: IFFALSE 54715
54674: GO 54676
54676: DISABLE
54677: LD_INT 0
54679: PPUSH
// begin for i := 1 to 8 do
54680: LD_ADDR_VAR 0 1
54684: PUSH
54685: DOUBLE
54686: LD_INT 1
54688: DEC
54689: ST_TO_ADDR
54690: LD_INT 8
54692: PUSH
54693: FOR_TO
54694: IFFALSE 54713
// SetRestrict ( b_depot , i , state_disabled ) ;
54696: LD_INT 0
54698: PPUSH
54699: LD_VAR 0 1
54703: PPUSH
54704: LD_INT 0
54706: PPUSH
54707: CALL_OW 324
54711: GO 54693
54713: POP
54714: POP
// end ;
54715: PPOPN 1
54717: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
54718: LD_EXP 39
54722: IFFALSE 54730
54724: PUSH
54725: CALL 54940 0 0
54729: AND
54730: IFFALSE 54738
54732: PUSH
54733: LD_OWVAR 4
54737: AND
54738: IFFALSE 54937
54740: GO 54742
54742: DISABLE
54743: LD_INT 0
54745: PPUSH
54746: PPUSH
// begin canWin := false ;
54747: LD_ADDR_VAR 0 2
54751: PUSH
54752: LD_INT 0
54754: ST_TO_ADDR
// if not HasPower ( your_side ) then
54755: LD_OWVAR 2
54759: PPUSH
54760: CALL 54982 0 1
54764: NOT
54765: IFFALSE 54776
// begin Multiplayer_Loose_Message ;
54767: CALL_OW 521
// enable ( mpLose ) ;
54771: LD_INT 102
54773: ENABLE_MARKED
// end else
54774: GO 54937
// begin canWin := true ;
54776: LD_ADDR_VAR 0 2
54780: PUSH
54781: LD_INT 1
54783: ST_TO_ADDR
// for i := 1 to 8 do
54784: LD_ADDR_VAR 0 1
54788: PUSH
54789: DOUBLE
54790: LD_INT 1
54792: DEC
54793: ST_TO_ADDR
54794: LD_INT 8
54796: PUSH
54797: FOR_TO
54798: IFFALSE 54923
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
54800: LD_EXP 7
54804: PUSH
54805: LD_VAR 0 1
54809: ARRAY
54810: IFFALSE 54823
54812: PUSH
54813: LD_VAR 0 1
54817: PPUSH
54818: CALL_OW 108
54822: AND
54823: IFFALSE 54837
54825: PUSH
54826: LD_VAR 0 1
54830: PUSH
54831: LD_OWVAR 2
54835: NONEQUAL
54836: AND
54837: IFFALSE 54921
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
54839: LD_EXP 8
54843: PUSH
54844: LD_VAR 0 1
54848: ARRAY
54849: NOT
54850: IFTRUE 54898
54852: PUSH
54853: LD_EXP 8
54857: PUSH
54858: LD_VAR 0 1
54862: ARRAY
54863: PUSH
54864: LD_EXP 8
54868: PUSH
54869: LD_OWVAR 2
54873: ARRAY
54874: NONEQUAL
54875: IFFALSE 54897
54877: PUSH
54878: LD_OWVAR 2
54882: PPUSH
54883: LD_VAR 0 1
54887: PPUSH
54888: CALL_OW 81
54892: PUSH
54893: LD_INT 1
54895: NONEQUAL
54896: AND
54897: OR
54898: IFFALSE 54921
// if HasPower ( i ) then
54900: LD_VAR 0 1
54904: PPUSH
54905: CALL 54982 0 1
54909: IFFALSE 54921
// begin canWin := false ;
54911: LD_ADDR_VAR 0 2
54915: PUSH
54916: LD_INT 0
54918: ST_TO_ADDR
// break ;
54919: GO 54923
// end ;
54921: GO 54797
54923: POP
54924: POP
// if canWin then
54925: LD_VAR 0 2
54929: IFFALSE 54936
// enable ( mpWin ) else
54931: LD_INT 101
54933: ENABLE_MARKED
54934: GO 54937
// enable ;
54936: ENABLE
// end ; end ;
54937: PPOPN 2
54939: END
// function CanWinLoose ; begin
54940: LD_INT 0
54942: PPUSH
// result := true ;
54943: LD_ADDR_VAR 0 1
54947: PUSH
54948: LD_INT 1
54950: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
54951: CALL_OW 531
54955: IFFALSE 54967
54957: PUSH
54958: CALL_OW 519
54962: PUSH
54963: LD_INT 1
54965: GREATER
54966: AND
54967: IFFALSE 54977
// result := false ;
54969: LD_ADDR_VAR 0 1
54973: PUSH
54974: LD_INT 0
54976: ST_TO_ADDR
// end ;
54977: LD_VAR 0 1
54981: RET
// function HasPower ( i ) ; begin
54982: LD_INT 0
54984: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
54985: LD_INT 22
54987: PUSH
54988: LD_VAR 0 1
54992: PUSH
54993: EMPTY
54994: LIST
54995: LIST
54996: PUSH
54997: LD_INT 2
54999: PUSH
55000: LD_INT 30
55002: PUSH
55003: LD_INT 0
55005: PUSH
55006: EMPTY
55007: LIST
55008: LIST
55009: PUSH
55010: LD_INT 30
55012: PUSH
55013: LD_INT 1
55015: PUSH
55016: EMPTY
55017: LIST
55018: LIST
55019: PUSH
55020: EMPTY
55021: LIST
55022: LIST
55023: LIST
55024: PUSH
55025: EMPTY
55026: LIST
55027: LIST
55028: PPUSH
55029: CALL_OW 69
55033: NOT
55034: IFFALSE 55038
// exit ;
55036: GO 55103
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
55038: LD_ADDR_VAR 0 2
55042: PUSH
55043: LD_INT 22
55045: PUSH
55046: LD_VAR 0 1
55050: PUSH
55051: EMPTY
55052: LIST
55053: LIST
55054: PUSH
55055: LD_INT 2
55057: PUSH
55058: LD_INT 21
55060: PUSH
55061: LD_INT 1
55063: PUSH
55064: EMPTY
55065: LIST
55066: LIST
55067: PUSH
55068: LD_INT 33
55070: PUSH
55071: LD_INT 3
55073: PUSH
55074: EMPTY
55075: LIST
55076: LIST
55077: PUSH
55078: LD_INT 33
55080: PUSH
55081: LD_INT 5
55083: PUSH
55084: EMPTY
55085: LIST
55086: LIST
55087: PUSH
55088: EMPTY
55089: LIST
55090: LIST
55091: LIST
55092: LIST
55093: PUSH
55094: EMPTY
55095: LIST
55096: LIST
55097: PPUSH
55098: CALL_OW 69
55102: ST_TO_ADDR
// end ; end_of_file
55103: LD_VAR 0 2
55107: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
55108: LD_EXP 39
55112: IFFALSE 55453
55114: GO 55116
55116: DISABLE
55117: LD_INT 0
55119: PPUSH
55120: PPUSH
55121: PPUSH
// begin mpKingPoints := [ ] ;
55122: LD_ADDR_EXP 50
55126: PUSH
55127: EMPTY
55128: ST_TO_ADDR
// if mpTeamGame then
55129: LD_EXP 11
55133: IFFALSE 55187
// begin for i := 1 to Count ( mpTeams ) do
55135: LD_ADDR_VAR 0 1
55139: PUSH
55140: DOUBLE
55141: LD_INT 1
55143: DEC
55144: ST_TO_ADDR
55145: LD_EXP 10
55149: PPUSH
55150: CALL 5242 0 1
55154: PUSH
55155: FOR_TO
55156: IFFALSE 55183
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
55158: LD_ADDR_EXP 50
55162: PUSH
55163: LD_EXP 50
55167: PPUSH
55168: LD_VAR 0 1
55172: PPUSH
55173: LD_INT 0
55175: PPUSH
55176: CALL_OW 1
55180: ST_TO_ADDR
55181: GO 55155
55183: POP
55184: POP
// end else
55185: GO 55230
// begin for i := 1 to 8 do
55187: LD_ADDR_VAR 0 1
55191: PUSH
55192: DOUBLE
55193: LD_INT 1
55195: DEC
55196: ST_TO_ADDR
55197: LD_INT 8
55199: PUSH
55200: FOR_TO
55201: IFFALSE 55228
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
55203: LD_ADDR_EXP 50
55207: PUSH
55208: LD_EXP 50
55212: PPUSH
55213: LD_VAR 0 1
55217: PPUSH
55218: LD_INT 0
55220: PPUSH
55221: CALL_OW 1
55225: ST_TO_ADDR
55226: GO 55200
55228: POP
55229: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
55230: LD_ADDR_VAR 0 3
55234: PUSH
55235: LD_EXP 2
55239: PPUSH
55240: LD_INT 0
55242: PPUSH
55243: CALL_OW 517
55247: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
55248: LD_ADDR_VAR 0 1
55252: PUSH
55253: DOUBLE
55254: LD_INT 1
55256: DEC
55257: ST_TO_ADDR
55258: LD_VAR 0 3
55262: PUSH
55263: LD_INT 1
55265: ARRAY
55266: PUSH
55267: FOR_TO
55268: IFFALSE 55335
// for j := 1 to 8 do
55270: LD_ADDR_VAR 0 2
55274: PUSH
55275: DOUBLE
55276: LD_INT 1
55278: DEC
55279: ST_TO_ADDR
55280: LD_INT 8
55282: PUSH
55283: FOR_TO
55284: IFFALSE 55331
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
55286: LD_VAR 0 3
55290: PUSH
55291: LD_INT 1
55293: ARRAY
55294: PUSH
55295: LD_VAR 0 1
55299: ARRAY
55300: PPUSH
55301: LD_VAR 0 3
55305: PUSH
55306: LD_INT 2
55308: ARRAY
55309: PUSH
55310: LD_VAR 0 1
55314: ARRAY
55315: PPUSH
55316: LD_VAR 0 2
55320: PPUSH
55321: LD_INT 12
55323: NEG
55324: PPUSH
55325: CALL_OW 330
55329: GO 55283
55331: POP
55332: POP
55333: GO 55267
55335: POP
55336: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
55337: LD_EXP 34
55341: PPUSH
55342: LD_INT 1
55344: PPUSH
55345: CALL_OW 424
// UpdateCounter ;
55349: CALL 55959 0 0
// repeat wait ( 0 0$1 ) ;
55353: LD_INT 35
55355: PPUSH
55356: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
55360: LD_ADDR_VAR 0 3
55364: PUSH
55365: LD_EXP 34
55369: PPUSH
55370: LD_INT 3
55372: PUSH
55373: LD_INT 57
55375: PUSH
55376: EMPTY
55377: LIST
55378: PUSH
55379: EMPTY
55380: LIST
55381: LIST
55382: PUSH
55383: LD_INT 50
55385: PUSH
55386: EMPTY
55387: LIST
55388: PUSH
55389: LD_INT 2
55391: PUSH
55392: LD_INT 30
55394: PUSH
55395: LD_INT 0
55397: PUSH
55398: EMPTY
55399: LIST
55400: LIST
55401: PUSH
55402: LD_INT 30
55404: PUSH
55405: LD_INT 1
55407: PUSH
55408: EMPTY
55409: LIST
55410: LIST
55411: PUSH
55412: EMPTY
55413: LIST
55414: LIST
55415: LIST
55416: PUSH
55417: EMPTY
55418: LIST
55419: LIST
55420: LIST
55421: PPUSH
55422: CALL_OW 70
55426: ST_TO_ADDR
// if not tmp then
55427: LD_VAR 0 3
55431: NOT
55432: IFFALSE 55436
// continue ;
55434: GO 55353
// AddPoints ( tmp ) ;
55436: LD_VAR 0 3
55440: PPUSH
55441: CALL 55637 0 1
// UpdateCounter ;
55445: CALL 55959 0 0
// until false ;
55449: LD_INT 0
55451: IFFALSE 55353
// end ;
55453: PPOPN 3
55455: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
55456: LD_EXP 39
55460: IFFALSE 55468
55462: PUSH
55463: LD_EXP 37
55467: AND
55468: IFFALSE 55634
55470: GO 55472
55472: DISABLE
55473: LD_INT 0
55475: PPUSH
55476: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
55477: LD_ADDR_VAR 0 2
55481: PUSH
55482: LD_EXP 2
55486: PPUSH
55487: LD_INT 0
55489: PPUSH
55490: CALL_OW 517
55494: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
55495: LD_ADDR_VAR 0 1
55499: PUSH
55500: DOUBLE
55501: LD_INT 1
55503: DEC
55504: ST_TO_ADDR
55505: LD_VAR 0 2
55509: PUSH
55510: LD_INT 1
55512: ARRAY
55513: PUSH
55514: FOR_TO
55515: IFFALSE 55556
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
55517: LD_VAR 0 2
55521: PUSH
55522: LD_INT 1
55524: ARRAY
55525: PUSH
55526: LD_VAR 0 1
55530: ARRAY
55531: PPUSH
55532: LD_VAR 0 2
55536: PUSH
55537: LD_INT 2
55539: ARRAY
55540: PUSH
55541: LD_VAR 0 1
55545: ARRAY
55546: PPUSH
55547: LD_INT 125
55549: PPUSH
55550: CALL_OW 495
55554: GO 55514
55556: POP
55557: POP
// repeat wait ( mpEmissions ) ;
55558: LD_EXP 37
55562: PPUSH
55563: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
55567: LD_ADDR_VAR 0 1
55571: PUSH
55572: DOUBLE
55573: LD_INT 1
55575: DEC
55576: ST_TO_ADDR
55577: LD_VAR 0 2
55581: PUSH
55582: LD_INT 1
55584: ARRAY
55585: PUSH
55586: FOR_TO
55587: IFFALSE 55628
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
55589: LD_VAR 0 2
55593: PUSH
55594: LD_INT 1
55596: ARRAY
55597: PUSH
55598: LD_VAR 0 1
55602: ARRAY
55603: PPUSH
55604: LD_VAR 0 2
55608: PUSH
55609: LD_INT 2
55611: ARRAY
55612: PUSH
55613: LD_VAR 0 1
55617: ARRAY
55618: PPUSH
55619: LD_INT 15
55621: PPUSH
55622: CALL_OW 495
55626: GO 55586
55628: POP
55629: POP
// until false ;
55630: LD_INT 0
55632: IFFALSE 55558
// end ;
55634: PPOPN 2
55636: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
55637: LD_INT 0
55639: PPUSH
55640: PPUSH
55641: PPUSH
55642: PPUSH
55643: PPUSH
// if mpTeamGame then
55644: LD_EXP 11
55648: IFFALSE 55845
// begin first := depots [ 1 ] ;
55650: LD_ADDR_VAR 0 4
55654: PUSH
55655: LD_VAR 0 1
55659: PUSH
55660: LD_INT 1
55662: ARRAY
55663: ST_TO_ADDR
// side := GetSide ( first ) ;
55664: LD_ADDR_VAR 0 6
55668: PUSH
55669: LD_VAR 0 4
55673: PPUSH
55674: CALL_OW 255
55678: ST_TO_ADDR
// for i := 1 to mpTeams do
55679: LD_ADDR_VAR 0 3
55683: PUSH
55684: DOUBLE
55685: LD_INT 1
55687: DEC
55688: ST_TO_ADDR
55689: LD_EXP 10
55693: PUSH
55694: FOR_TO
55695: IFFALSE 55729
// if side in mpTeams [ i ] then
55697: LD_VAR 0 6
55701: PUSH
55702: LD_EXP 10
55706: PUSH
55707: LD_VAR 0 3
55711: ARRAY
55712: IN
55713: IFFALSE 55727
// begin team := i ;
55715: LD_ADDR_VAR 0 5
55719: PUSH
55720: LD_VAR 0 3
55724: ST_TO_ADDR
// break ;
55725: GO 55729
// end ;
55727: GO 55694
55729: POP
55730: POP
// if not team then
55731: LD_VAR 0 5
55735: NOT
55736: IFFALSE 55740
// exit ;
55738: GO 55954
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
55740: LD_EXP 34
55744: PPUSH
55745: LD_INT 81
55747: PUSH
55748: LD_VAR 0 6
55752: PUSH
55753: EMPTY
55754: LIST
55755: LIST
55756: PPUSH
55757: CALL_OW 70
55761: IFFALSE 55765
// exit ;
55763: GO 55954
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
55765: LD_ADDR_EXP 50
55769: PUSH
55770: LD_EXP 50
55774: PPUSH
55775: LD_VAR 0 5
55779: PPUSH
55780: LD_EXP 50
55784: PUSH
55785: LD_VAR 0 5
55789: ARRAY
55790: PUSH
55791: LD_INT 1
55793: PLUS
55794: PPUSH
55795: CALL_OW 1
55799: ST_TO_ADDR
// for i in mpTeams [ team ] do
55800: LD_ADDR_VAR 0 3
55804: PUSH
55805: LD_EXP 10
55809: PUSH
55810: LD_VAR 0 5
55814: ARRAY
55815: PUSH
55816: FOR_IN
55817: IFFALSE 55841
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
55819: LD_VAR 0 3
55823: PPUSH
55824: LD_EXP 50
55828: PUSH
55829: LD_VAR 0 5
55833: ARRAY
55834: PPUSH
55835: CALL_OW 506
55839: GO 55816
55841: POP
55842: POP
// end else
55843: GO 55954
// begin first := depots [ 1 ] ;
55845: LD_ADDR_VAR 0 4
55849: PUSH
55850: LD_VAR 0 1
55854: PUSH
55855: LD_INT 1
55857: ARRAY
55858: ST_TO_ADDR
// side := GetSide ( first ) ;
55859: LD_ADDR_VAR 0 6
55863: PUSH
55864: LD_VAR 0 4
55868: PPUSH
55869: CALL_OW 255
55873: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
55874: LD_EXP 34
55878: PPUSH
55879: LD_INT 81
55881: PUSH
55882: LD_VAR 0 6
55886: PUSH
55887: EMPTY
55888: LIST
55889: LIST
55890: PPUSH
55891: CALL_OW 70
55895: IFFALSE 55899
// exit ;
55897: GO 55954
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
55899: LD_ADDR_EXP 50
55903: PUSH
55904: LD_EXP 50
55908: PPUSH
55909: LD_VAR 0 6
55913: PPUSH
55914: LD_EXP 50
55918: PUSH
55919: LD_VAR 0 6
55923: ARRAY
55924: PUSH
55925: LD_INT 1
55927: PLUS
55928: PPUSH
55929: CALL_OW 1
55933: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
55934: LD_VAR 0 6
55938: PPUSH
55939: LD_EXP 50
55943: PUSH
55944: LD_VAR 0 6
55948: ARRAY
55949: PPUSH
55950: CALL_OW 506
// end ; end ;
55954: LD_VAR 0 2
55958: RET
// function UpdateCounter ; var i ; begin
55959: LD_INT 0
55961: PPUSH
55962: PPUSH
// result := [ ] ;
55963: LD_ADDR_VAR 0 1
55967: PUSH
55968: EMPTY
55969: ST_TO_ADDR
// if mpTeamGame then
55970: LD_EXP 11
55974: IFFALSE 56041
// begin for i := 1 to mpTeams do
55976: LD_ADDR_VAR 0 2
55980: PUSH
55981: DOUBLE
55982: LD_INT 1
55984: DEC
55985: ST_TO_ADDR
55986: LD_EXP 10
55990: PUSH
55991: FOR_TO
55992: IFFALSE 56037
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
55994: LD_ADDR_VAR 0 1
55998: PUSH
55999: LD_VAR 0 1
56003: PUSH
56004: LD_STRING #KingoftheHill-Team
56006: PUSH
56007: LD_VAR 0 2
56011: PUSH
56012: LD_EXP 50
56016: PUSH
56017: LD_VAR 0 2
56021: ARRAY
56022: PUSH
56023: LD_EXP 35
56027: PUSH
56028: EMPTY
56029: LIST
56030: LIST
56031: LIST
56032: LIST
56033: ADD
56034: ST_TO_ADDR
56035: GO 55991
56037: POP
56038: POP
// end else
56039: GO 56114
// begin for i := 1 to 8 do
56041: LD_ADDR_VAR 0 2
56045: PUSH
56046: DOUBLE
56047: LD_INT 1
56049: DEC
56050: ST_TO_ADDR
56051: LD_INT 8
56053: PUSH
56054: FOR_TO
56055: IFFALSE 56112
// if mpSidePositions [ i ] then
56057: LD_EXP 7
56061: PUSH
56062: LD_VAR 0 2
56066: ARRAY
56067: IFFALSE 56110
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
56069: LD_ADDR_VAR 0 1
56073: PUSH
56074: LD_VAR 0 1
56078: PUSH
56079: LD_STRING #KingoftheHill-Player
56081: PUSH
56082: LD_VAR 0 2
56086: PUSH
56087: LD_EXP 50
56091: PUSH
56092: LD_VAR 0 2
56096: ARRAY
56097: PUSH
56098: LD_EXP 35
56102: PUSH
56103: EMPTY
56104: LIST
56105: LIST
56106: LIST
56107: LIST
56108: ADD
56109: ST_TO_ADDR
56110: GO 56054
56112: POP
56113: POP
// end ; mpDisplayStrings := result ;
56114: LD_ADDR_EXP 38
56118: PUSH
56119: LD_VAR 0 1
56123: ST_TO_ADDR
// end ;
56124: LD_VAR 0 1
56128: RET
// export function HowMuchPointsKing ( side ) ; begin
56129: LD_INT 0
56131: PPUSH
// result := HowMuchPoints ( side ) ;
56132: LD_ADDR_VAR 0 2
56136: PUSH
56137: LD_VAR 0 1
56141: PPUSH
56142: CALL 56152 0 1
56146: ST_TO_ADDR
// end ;
56147: LD_VAR 0 2
56151: RET
// function HowMuchPoints ( side ) ; var i ; begin
56152: LD_INT 0
56154: PPUSH
56155: PPUSH
// if mpTeamGame then
56156: LD_EXP 11
56160: IFFALSE 56229
// begin for i := 1 to Count ( mpTeams ) do
56162: LD_ADDR_VAR 0 3
56166: PUSH
56167: DOUBLE
56168: LD_INT 1
56170: DEC
56171: ST_TO_ADDR
56172: LD_EXP 10
56176: PPUSH
56177: CALL 5242 0 1
56181: PUSH
56182: FOR_TO
56183: IFFALSE 56225
// begin if side in mpTeams [ i ] then
56185: LD_VAR 0 1
56189: PUSH
56190: LD_EXP 10
56194: PUSH
56195: LD_VAR 0 3
56199: ARRAY
56200: IN
56201: IFFALSE 56223
// begin result := mpKingPoints [ i ] ;
56203: LD_ADDR_VAR 0 2
56207: PUSH
56208: LD_EXP 50
56212: PUSH
56213: LD_VAR 0 3
56217: ARRAY
56218: ST_TO_ADDR
// exit ;
56219: POP
56220: POP
56221: GO 56245
// end ; end ;
56223: GO 56182
56225: POP
56226: POP
// end else
56227: GO 56245
// result := mpKingPoints [ side ] ;
56229: LD_ADDR_VAR 0 2
56233: PUSH
56234: LD_EXP 50
56238: PUSH
56239: LD_VAR 0 1
56243: ARRAY
56244: ST_TO_ADDR
// end ;
56245: LD_VAR 0 2
56249: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
56250: LD_EXP 39
56254: IFFALSE 56262
56256: PUSH
56257: CALL 56674 0 0
56261: AND
56262: IFFALSE 56270
56264: PUSH
56265: LD_OWVAR 4
56269: AND
56270: IFFALSE 56523
56272: GO 56274
56274: DISABLE
56275: LD_INT 0
56277: PPUSH
56278: PPUSH
// begin canWin := false ;
56279: LD_ADDR_VAR 0 2
56283: PUSH
56284: LD_INT 0
56286: ST_TO_ADDR
// if not HasPower ( your_side ) then
56287: LD_OWVAR 2
56291: PPUSH
56292: CALL 56716 0 1
56296: NOT
56297: IFFALSE 56308
// begin Multiplayer_Loose_Message ;
56299: CALL_OW 521
// enable ( mpLose ) ;
56303: LD_INT 102
56305: ENABLE_MARKED
// end else
56306: GO 56523
// begin if not EnemiesInGame then
56308: CALL 56526 0 0
56312: NOT
56313: IFFALSE 56320
// begin enable ( mpWin ) ;
56315: LD_INT 101
56317: ENABLE_MARKED
// exit ;
56318: GO 56523
// end ; canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) ;
56320: LD_ADDR_VAR 0 2
56324: PUSH
56325: LD_OWVAR 2
56329: PPUSH
56330: CALL 56152 0 1
56334: PUSH
56335: LD_EXP 35
56339: GREATEREQUAL
56340: IFFALSE 56353
56342: PUSH
56343: LD_OWVAR 2
56347: PPUSH
56348: CALL 56716 0 1
56352: AND
56353: ST_TO_ADDR
// for i := 1 to 8 do
56354: LD_ADDR_VAR 0 1
56358: PUSH
56359: DOUBLE
56360: LD_INT 1
56362: DEC
56363: ST_TO_ADDR
56364: LD_INT 8
56366: PUSH
56367: FOR_TO
56368: IFFALSE 56509
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
56370: LD_EXP 7
56374: PUSH
56375: LD_VAR 0 1
56379: ARRAY
56380: IFFALSE 56393
56382: PUSH
56383: LD_VAR 0 1
56387: PPUSH
56388: CALL_OW 108
56392: AND
56393: IFFALSE 56407
56395: PUSH
56396: LD_VAR 0 1
56400: PUSH
56401: LD_OWVAR 2
56405: NONEQUAL
56406: AND
56407: IFFALSE 56507
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
56409: LD_EXP 8
56413: PUSH
56414: LD_VAR 0 1
56418: ARRAY
56419: NOT
56420: IFTRUE 56468
56422: PUSH
56423: LD_EXP 8
56427: PUSH
56428: LD_VAR 0 1
56432: ARRAY
56433: PUSH
56434: LD_EXP 8
56438: PUSH
56439: LD_OWVAR 2
56443: ARRAY
56444: NONEQUAL
56445: IFFALSE 56467
56447: PUSH
56448: LD_OWVAR 2
56452: PPUSH
56453: LD_VAR 0 1
56457: PPUSH
56458: CALL_OW 81
56462: PUSH
56463: LD_INT 1
56465: NONEQUAL
56466: AND
56467: OR
56468: IFFALSE 56507
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
56470: LD_VAR 0 1
56474: PPUSH
56475: CALL 56152 0 1
56479: PUSH
56480: LD_EXP 35
56484: GREATEREQUAL
56485: IFFALSE 56498
56487: PUSH
56488: LD_VAR 0 1
56492: PPUSH
56493: CALL 56716 0 1
56497: AND
56498: IFFALSE 56507
// begin enable ( mpLose ) ;
56500: LD_INT 102
56502: ENABLE_MARKED
// exit ;
56503: POP
56504: POP
56505: GO 56523
// end ;
56507: GO 56367
56509: POP
56510: POP
// if canWin then
56511: LD_VAR 0 2
56515: IFFALSE 56522
// enable ( mpWin ) else
56517: LD_INT 101
56519: ENABLE_MARKED
56520: GO 56523
// enable ;
56522: ENABLE
// end ; end ;
56523: PPOPN 2
56525: END
// function EnemiesInGame ; var i ; begin
56526: LD_INT 0
56528: PPUSH
56529: PPUSH
// result := false ;
56530: LD_ADDR_VAR 0 1
56534: PUSH
56535: LD_INT 0
56537: ST_TO_ADDR
// for i := 1 to 8 do
56538: LD_ADDR_VAR 0 2
56542: PUSH
56543: DOUBLE
56544: LD_INT 1
56546: DEC
56547: ST_TO_ADDR
56548: LD_INT 8
56550: PUSH
56551: FOR_TO
56552: IFFALSE 56667
// if i <> your_side and HasPower ( i ) and MultiplayerSideAlive ( i ) then
56554: LD_VAR 0 2
56558: PUSH
56559: LD_OWVAR 2
56563: NONEQUAL
56564: IFFALSE 56577
56566: PUSH
56567: LD_VAR 0 2
56571: PPUSH
56572: CALL 56716 0 1
56576: AND
56577: IFFALSE 56590
56579: PUSH
56580: LD_VAR 0 2
56584: PPUSH
56585: CALL_OW 108
56589: AND
56590: IFFALSE 56665
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
56592: LD_EXP 8
56596: PUSH
56597: LD_VAR 0 2
56601: ARRAY
56602: NOT
56603: IFTRUE 56651
56605: PUSH
56606: LD_EXP 8
56610: PUSH
56611: LD_VAR 0 2
56615: ARRAY
56616: PUSH
56617: LD_EXP 8
56621: PUSH
56622: LD_OWVAR 2
56626: ARRAY
56627: NONEQUAL
56628: IFFALSE 56650
56630: PUSH
56631: LD_OWVAR 2
56635: PPUSH
56636: LD_VAR 0 2
56640: PPUSH
56641: CALL_OW 81
56645: PUSH
56646: LD_INT 1
56648: NONEQUAL
56649: AND
56650: OR
56651: IFFALSE 56665
// begin result := true ;
56653: LD_ADDR_VAR 0 1
56657: PUSH
56658: LD_INT 1
56660: ST_TO_ADDR
// exit ;
56661: POP
56662: POP
56663: GO 56669
// end ;
56665: GO 56551
56667: POP
56668: POP
// end ;
56669: LD_VAR 0 1
56673: RET
// function CanWinLoose ; begin
56674: LD_INT 0
56676: PPUSH
// result := true ;
56677: LD_ADDR_VAR 0 1
56681: PUSH
56682: LD_INT 1
56684: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
56685: CALL_OW 531
56689: IFFALSE 56701
56691: PUSH
56692: CALL_OW 519
56696: PUSH
56697: LD_INT 1
56699: GREATER
56700: AND
56701: IFFALSE 56711
// result := false ;
56703: LD_ADDR_VAR 0 1
56707: PUSH
56708: LD_INT 0
56710: ST_TO_ADDR
// end ;
56711: LD_VAR 0 1
56715: RET
// function HasPower ( i ) ; begin
56716: LD_INT 0
56718: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
56719: LD_ADDR_VAR 0 2
56723: PUSH
56724: LD_INT 22
56726: PUSH
56727: LD_VAR 0 1
56731: PUSH
56732: EMPTY
56733: LIST
56734: LIST
56735: PUSH
56736: LD_INT 2
56738: PUSH
56739: LD_INT 21
56741: PUSH
56742: LD_INT 1
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: PUSH
56749: LD_INT 33
56751: PUSH
56752: LD_INT 3
56754: PUSH
56755: EMPTY
56756: LIST
56757: LIST
56758: PUSH
56759: LD_INT 33
56761: PUSH
56762: LD_INT 5
56764: PUSH
56765: EMPTY
56766: LIST
56767: LIST
56768: PUSH
56769: EMPTY
56770: LIST
56771: LIST
56772: LIST
56773: LIST
56774: PUSH
56775: EMPTY
56776: LIST
56777: LIST
56778: PPUSH
56779: CALL_OW 69
56783: ST_TO_ADDR
// end ; end_of_file end_of_file
56784: LD_VAR 0 2
56788: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
56789: LD_VAR 0 1
56793: PUSH
56794: LD_INT 200
56796: DOUBLE
56797: GREATEREQUAL
56798: IFFALSE 56806
56800: LD_INT 299
56802: DOUBLE
56803: LESSEQUAL
56804: IFTRUE 56808
56806: GO 56840
56808: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
56809: LD_VAR 0 1
56813: PPUSH
56814: LD_VAR 0 2
56818: PPUSH
56819: LD_VAR 0 3
56823: PPUSH
56824: LD_VAR 0 4
56828: PPUSH
56829: LD_VAR 0 5
56833: PPUSH
56834: CALL 57702 0 5
56838: GO 56917
56840: LD_INT 300
56842: DOUBLE
56843: GREATEREQUAL
56844: IFFALSE 56852
56846: LD_INT 399
56848: DOUBLE
56849: LESSEQUAL
56850: IFTRUE 56854
56852: GO 56916
56854: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
56855: LD_VAR 0 1
56859: PPUSH
56860: LD_VAR 0 2
56864: PPUSH
56865: LD_VAR 0 3
56869: PPUSH
56870: LD_VAR 0 4
56874: PPUSH
56875: LD_VAR 0 5
56879: PPUSH
56880: LD_VAR 0 6
56884: PPUSH
56885: LD_VAR 0 7
56889: PPUSH
56890: LD_VAR 0 8
56894: PPUSH
56895: LD_VAR 0 9
56899: PPUSH
56900: LD_VAR 0 10
56904: PPUSH
56905: LD_VAR 0 11
56909: PPUSH
56910: CALL 64130 0 11
56914: GO 56917
56916: POP
// end ;
56917: PPOPN 11
56919: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
56920: LD_VAR 0 1
56924: PPUSH
56925: LD_VAR 0 2
56929: PPUSH
56930: LD_VAR 0 3
56934: PPUSH
56935: LD_VAR 0 4
56939: PPUSH
56940: LD_VAR 0 5
56944: PPUSH
56945: CALL 57002 0 5
// end ; end_of_file
56949: PPOPN 5
56951: END
// export function SOS_UnitDestroyed ( un ) ; begin
56952: LD_INT 0
56954: PPUSH
// ComRadiation ( un ) ;
56955: LD_VAR 0 1
56959: PPUSH
56960: CALL 58122 0 1
// end ;
56964: LD_VAR 0 2
56968: RET
// export function SOS_UnitKamikazed ( un ) ; begin
56969: LD_INT 0
56971: PPUSH
// ComRadiation ( un ) ;
56972: LD_VAR 0 1
56976: PPUSH
56977: CALL 58122 0 1
// end ;
56981: LD_VAR 0 2
56985: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
56986: LD_INT 0
56988: PPUSH
// end ;
56989: LD_VAR 0 4
56993: RET
// export function SOS_Command ( cmd ) ; begin
56994: LD_INT 0
56996: PPUSH
// end ;
56997: LD_VAR 0 2
57001: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
57002: LD_INT 0
57004: PPUSH
// end ;
57005: LD_VAR 0 6
57009: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
57010: LD_INT 0
57012: PPUSH
57013: PPUSH
57014: PPUSH
57015: PPUSH
57016: PPUSH
// if not vehicle or not factory then
57017: LD_VAR 0 1
57021: NOT
57022: IFTRUE 57031
57024: PUSH
57025: LD_VAR 0 2
57029: NOT
57030: OR
57031: IFFALSE 57035
// exit ;
57033: GO 57697
// weapon := GetWeapon ( vehicle ) ;
57035: LD_ADDR_VAR 0 7
57039: PUSH
57040: LD_VAR 0 1
57044: PPUSH
57045: CALL_OW 264
57049: ST_TO_ADDR
// if weapon = ar_miner then
57050: LD_VAR 0 7
57054: PUSH
57055: LD_INT 81
57057: EQUAL
57058: IFFALSE 57115
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
57060: LD_ADDR_EXP 58
57064: PUSH
57065: LD_EXP 58
57069: PPUSH
57070: LD_EXP 58
57074: PUSH
57075: LD_INT 1
57077: PLUS
57078: PPUSH
57079: LD_VAR 0 1
57083: PPUSH
57084: CALL_OW 1
57088: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
57089: LD_ADDR_EXP 59
57093: PUSH
57094: LD_EXP 59
57098: PPUSH
57099: LD_EXP 59
57103: PUSH
57104: LD_INT 1
57106: PLUS
57107: PPUSH
57108: EMPTY
57109: PPUSH
57110: CALL_OW 1
57114: ST_TO_ADDR
// end ; if not factoryWaypoints then
57115: LD_EXP 61
57119: NOT
57120: IFFALSE 57124
// exit ;
57122: GO 57697
// for i := 1 to Count ( factoryWaypoints ) do
57124: LD_ADDR_VAR 0 4
57128: PUSH
57129: DOUBLE
57130: LD_INT 1
57132: DEC
57133: ST_TO_ADDR
57134: LD_EXP 61
57138: PPUSH
57139: CALL 5242 0 1
57143: PUSH
57144: FOR_TO
57145: IFFALSE 57695
// if factoryWaypoints [ i ] [ 2 ] = factory then
57147: LD_EXP 61
57151: PUSH
57152: LD_VAR 0 4
57156: ARRAY
57157: PUSH
57158: LD_INT 2
57160: ARRAY
57161: PUSH
57162: LD_VAR 0 2
57166: EQUAL
57167: IFFALSE 57693
// begin if GetControl ( vehicle ) = control_manual then
57169: LD_VAR 0 1
57173: PPUSH
57174: CALL_OW 263
57178: PUSH
57179: LD_INT 1
57181: EQUAL
57182: IFFALSE 57546
// begin driver := IsDrivenBy ( vehicle ) ;
57184: LD_ADDR_VAR 0 5
57188: PUSH
57189: LD_VAR 0 1
57193: PPUSH
57194: CALL_OW 311
57198: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
57199: LD_VAR 0 5
57203: PUSH
57204: LD_EXP 62
57208: IN
57209: IFTRUE 57223
57211: PUSH
57212: LD_VAR 0 1
57216: PUSH
57217: LD_EXP 62
57221: IN
57222: OR
57223: IFFALSE 57229
// exit ;
57225: POP
57226: POP
57227: GO 57697
// if not HasTask ( driver ) then
57229: LD_VAR 0 5
57233: PPUSH
57234: CALL_OW 314
57238: NOT
57239: IFFALSE 57544
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
57241: LD_ADDR_EXP 62
57245: PUSH
57246: LD_EXP 62
57250: PPUSH
57251: LD_VAR 0 5
57255: PPUSH
57256: CALL 41218 0 2
57260: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
57261: LD_ADDR_EXP 62
57265: PUSH
57266: LD_EXP 62
57270: PPUSH
57271: LD_VAR 0 1
57275: PPUSH
57276: CALL 41218 0 2
57280: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
57281: LD_ADDR_VAR 0 6
57285: PUSH
57286: LD_EXP 61
57290: PUSH
57291: LD_VAR 0 4
57295: ARRAY
57296: PUSH
57297: LD_INT 3
57299: ARRAY
57300: PPUSH
57301: LD_EXP 61
57305: PUSH
57306: LD_VAR 0 4
57310: ARRAY
57311: PUSH
57312: LD_INT 4
57314: ARRAY
57315: PPUSH
57316: CALL_OW 428
57320: ST_TO_ADDR
// if hex then
57321: LD_VAR 0 6
57325: IFFALSE 57343
// ComMoveUnit ( driver , hex ) else
57327: LD_VAR 0 5
57331: PPUSH
57332: LD_VAR 0 6
57336: PPUSH
57337: CALL_OW 112
57341: GO 57427
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
57343: LD_VAR 0 1
57347: PPUSH
57348: LD_EXP 61
57352: PUSH
57353: LD_VAR 0 4
57357: ARRAY
57358: PUSH
57359: LD_INT 3
57361: ARRAY
57362: PPUSH
57363: LD_EXP 61
57367: PUSH
57368: LD_VAR 0 4
57372: ARRAY
57373: PUSH
57374: LD_INT 4
57376: ARRAY
57377: PPUSH
57378: CALL_OW 297
57382: PUSH
57383: LD_INT 0
57385: GREATER
57386: IFFALSE 57427
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
57388: LD_VAR 0 5
57392: PPUSH
57393: LD_EXP 61
57397: PUSH
57398: LD_VAR 0 4
57402: ARRAY
57403: PUSH
57404: LD_INT 3
57406: ARRAY
57407: PPUSH
57408: LD_EXP 61
57412: PUSH
57413: LD_VAR 0 4
57417: ARRAY
57418: PUSH
57419: LD_INT 4
57421: ARRAY
57422: PPUSH
57423: CALL_OW 111
// AddComExitVehicle ( driver ) ;
57427: LD_VAR 0 5
57431: PPUSH
57432: CALL_OW 181
// if Multiplayer then
57436: LD_OWVAR 4
57440: IFFALSE 57489
// begin repeat wait ( 10 ) ;
57442: LD_INT 10
57444: PPUSH
57445: CALL_OW 67
// until not IsInUnit ( driver ) ;
57449: LD_VAR 0 5
57453: PPUSH
57454: CALL_OW 310
57458: NOT
57459: IFFALSE 57442
// if not HasTask ( driver ) then
57461: LD_VAR 0 5
57465: PPUSH
57466: CALL_OW 314
57470: NOT
57471: IFFALSE 57487
// ComEnterUnit ( driver , factory ) ;
57473: LD_VAR 0 5
57477: PPUSH
57478: LD_VAR 0 2
57482: PPUSH
57483: CALL_OW 120
// end else
57487: GO 57503
// AddComEnterUnit ( driver , factory ) ;
57489: LD_VAR 0 5
57493: PPUSH
57494: LD_VAR 0 2
57498: PPUSH
57499: CALL_OW 180
// wait ( 0 0$1 ) ;
57503: LD_INT 35
57505: PPUSH
57506: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
57510: LD_ADDR_EXP 62
57514: PUSH
57515: LD_EXP 62
57519: PUSH
57520: LD_VAR 0 5
57524: DIFF
57525: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
57526: LD_ADDR_EXP 62
57530: PUSH
57531: LD_EXP 62
57535: PUSH
57536: LD_VAR 0 1
57540: DIFF
57541: ST_TO_ADDR
// break ;
57542: GO 57695
// end ; end else
57544: GO 57693
// if GetControl ( vehicle ) = control_remote then
57546: LD_VAR 0 1
57550: PPUSH
57551: CALL_OW 263
57555: PUSH
57556: LD_INT 2
57558: EQUAL
57559: IFFALSE 57645
// begin wait ( 0 0$2 ) ;
57561: LD_INT 70
57563: PPUSH
57564: CALL_OW 67
// repeat wait ( 10 ) ;
57568: LD_INT 10
57570: PPUSH
57571: CALL_OW 67
// Connect ( vehicle ) ;
57575: LD_VAR 0 1
57579: PPUSH
57580: CALL 11520 0 1
// until IsControledBy ( vehicle ) ;
57584: LD_VAR 0 1
57588: PPUSH
57589: CALL_OW 312
57593: IFFALSE 57568
// wait ( 10 ) ;
57595: LD_INT 10
57597: PPUSH
57598: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
57602: LD_VAR 0 1
57606: PPUSH
57607: LD_EXP 61
57611: PUSH
57612: LD_VAR 0 4
57616: ARRAY
57617: PUSH
57618: LD_INT 3
57620: ARRAY
57621: PPUSH
57622: LD_EXP 61
57626: PUSH
57627: LD_VAR 0 4
57631: ARRAY
57632: PUSH
57633: LD_INT 4
57635: ARRAY
57636: PPUSH
57637: CALL_OW 111
// break ;
57641: GO 57695
// end else
57643: GO 57693
// begin wait ( 0 0$3 ) ;
57645: LD_INT 105
57647: PPUSH
57648: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
57652: LD_VAR 0 1
57656: PPUSH
57657: LD_EXP 61
57661: PUSH
57662: LD_VAR 0 4
57666: ARRAY
57667: PUSH
57668: LD_INT 3
57670: ARRAY
57671: PPUSH
57672: LD_EXP 61
57676: PUSH
57677: LD_VAR 0 4
57681: ARRAY
57682: PUSH
57683: LD_INT 4
57685: ARRAY
57686: PPUSH
57687: CALL_OW 111
// break ;
57691: GO 57695
// end ; end ;
57693: GO 57144
57695: POP
57696: POP
// end ;
57697: LD_VAR 0 3
57701: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
57702: LD_INT 0
57704: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
57705: LD_VAR 0 1
57709: PUSH
57710: LD_INT 250
57712: EQUAL
57713: IFFALSE 57730
57715: PUSH
57716: LD_VAR 0 2
57720: PPUSH
57721: CALL_OW 264
57725: PUSH
57726: LD_INT 81
57728: EQUAL
57729: AND
57730: IFFALSE 57751
// MinerPlaceMine ( unit , x , y ) ;
57732: LD_VAR 0 2
57736: PPUSH
57737: LD_VAR 0 4
57741: PPUSH
57742: LD_VAR 0 5
57746: PPUSH
57747: CALL 61097 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
57751: LD_VAR 0 1
57755: PUSH
57756: LD_INT 251
57758: EQUAL
57759: IFFALSE 57776
57761: PUSH
57762: LD_VAR 0 2
57766: PPUSH
57767: CALL_OW 264
57771: PUSH
57772: LD_INT 81
57774: EQUAL
57775: AND
57776: IFFALSE 57797
// MinerDetonateMine ( unit , x , y ) ;
57778: LD_VAR 0 2
57782: PPUSH
57783: LD_VAR 0 4
57787: PPUSH
57788: LD_VAR 0 5
57792: PPUSH
57793: CALL 61504 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
57797: LD_VAR 0 1
57801: PUSH
57802: LD_INT 252
57804: EQUAL
57805: IFFALSE 57822
57807: PUSH
57808: LD_VAR 0 2
57812: PPUSH
57813: CALL_OW 264
57817: PUSH
57818: LD_INT 81
57820: EQUAL
57821: AND
57822: IFFALSE 57843
// MinerCreateMinefield ( unit , x , y ) ;
57824: LD_VAR 0 2
57828: PPUSH
57829: LD_VAR 0 4
57833: PPUSH
57834: LD_VAR 0 5
57838: PPUSH
57839: CALL 61736 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
57843: LD_VAR 0 1
57847: PUSH
57848: LD_INT 253
57850: EQUAL
57851: IFFALSE 57868
57853: PUSH
57854: LD_VAR 0 2
57858: PPUSH
57859: CALL_OW 257
57863: PUSH
57864: LD_INT 5
57866: EQUAL
57867: AND
57868: IFFALSE 57889
// ComBinocular ( unit , x , y ) ;
57870: LD_VAR 0 2
57874: PPUSH
57875: LD_VAR 0 4
57879: PPUSH
57880: LD_VAR 0 5
57884: PPUSH
57885: CALL 62111 0 3
// if selectedUnit then
57889: LD_VAR 0 3
57893: IFFALSE 57953
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
57895: LD_VAR 0 1
57899: PUSH
57900: LD_INT 254
57902: EQUAL
57903: IFFALSE 57920
57905: PUSH
57906: LD_VAR 0 2
57910: PPUSH
57911: CALL_OW 264
57915: PUSH
57916: LD_INT 99
57918: EQUAL
57919: AND
57920: IFFALSE 57937
57922: PUSH
57923: LD_VAR 0 3
57927: PPUSH
57928: CALL_OW 263
57932: PUSH
57933: LD_INT 3
57935: EQUAL
57936: AND
57937: IFFALSE 57953
// HackDestroyVehicle ( unit , selectedUnit ) ;
57939: LD_VAR 0 2
57943: PPUSH
57944: LD_VAR 0 3
57948: PPUSH
57949: CALL 60287 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
57953: LD_VAR 0 1
57957: PUSH
57958: LD_INT 255
57960: EQUAL
57961: IFFALSE 57985
57963: PUSH
57964: LD_VAR 0 2
57968: PPUSH
57969: CALL_OW 264
57973: PUSH
57974: LD_INT 14
57976: PUSH
57977: LD_INT 53
57979: PUSH
57980: EMPTY
57981: LIST
57982: LIST
57983: IN
57984: AND
57985: IFFALSE 58003
57987: PUSH
57988: LD_VAR 0 4
57992: PPUSH
57993: LD_VAR 0 5
57997: PPUSH
57998: CALL_OW 488
58002: AND
58003: IFFALSE 58027
// CutTreeXYR ( unit , x , y , 12 ) ;
58005: LD_VAR 0 2
58009: PPUSH
58010: LD_VAR 0 4
58014: PPUSH
58015: LD_VAR 0 5
58019: PPUSH
58020: LD_INT 12
58022: PPUSH
58023: CALL 58218 0 4
// if cmd = 256 then
58027: LD_VAR 0 1
58031: PUSH
58032: LD_INT 256
58034: EQUAL
58035: IFFALSE 58056
// SetFactoryWaypoint ( unit , x , y ) ;
58037: LD_VAR 0 2
58041: PPUSH
58042: LD_VAR 0 4
58046: PPUSH
58047: LD_VAR 0 5
58051: PPUSH
58052: CALL 64138 0 3
// if cmd = 257 then
58056: LD_VAR 0 1
58060: PUSH
58061: LD_INT 257
58063: EQUAL
58064: IFFALSE 58085
// SetWarehouseGatheringPoint ( unit , x , y ) ;
58066: LD_VAR 0 2
58070: PPUSH
58071: LD_VAR 0 4
58075: PPUSH
58076: LD_VAR 0 5
58080: PPUSH
58081: CALL 64634 0 3
// if cmd = 258 then
58085: LD_VAR 0 1
58089: PUSH
58090: LD_INT 258
58092: EQUAL
58093: IFFALSE 58117
// BurnTreeXYR ( unit , x , y , 8 ) ;
58095: LD_VAR 0 2
58099: PPUSH
58100: LD_VAR 0 4
58104: PPUSH
58105: LD_VAR 0 5
58109: PPUSH
58110: LD_INT 8
58112: PPUSH
58113: CALL 58640 0 4
// end ;
58117: LD_VAR 0 6
58121: RET
// export function ComRadiation ( un ) ; var eff ; begin
58122: LD_INT 0
58124: PPUSH
58125: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
58126: LD_VAR 0 1
58130: PPUSH
58131: CALL_OW 264
58135: PUSH
58136: LD_INT 91
58138: NONEQUAL
58139: IFFALSE 58143
// exit ;
58141: GO 58213
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
58143: LD_INT 68
58145: PPUSH
58146: LD_VAR 0 1
58150: PPUSH
58151: CALL_OW 255
58155: PPUSH
58156: CALL_OW 321
58160: PUSH
58161: LD_INT 2
58163: EQUAL
58164: IFFALSE 58176
// eff := 50 else
58166: LD_ADDR_VAR 0 3
58170: PUSH
58171: LD_INT 50
58173: ST_TO_ADDR
58174: GO 58184
// eff := 25 ;
58176: LD_ADDR_VAR 0 3
58180: PUSH
58181: LD_INT 25
58183: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
58184: LD_VAR 0 1
58188: PPUSH
58189: CALL_OW 250
58193: PPUSH
58194: LD_VAR 0 1
58198: PPUSH
58199: CALL_OW 251
58203: PPUSH
58204: LD_VAR 0 3
58208: PPUSH
58209: CALL_OW 495
// end ;
58213: LD_VAR 0 2
58217: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
58218: LD_INT 0
58220: PPUSH
58221: PPUSH
58222: PPUSH
58223: PPUSH
58224: PPUSH
58225: PPUSH
58226: PPUSH
58227: PPUSH
58228: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
58229: LD_VAR 0 1
58233: PPUSH
58234: CALL_OW 302
58238: NOT
58239: IFTRUE 58258
58241: PUSH
58242: LD_VAR 0 2
58246: PPUSH
58247: LD_VAR 0 3
58251: PPUSH
58252: CALL_OW 488
58256: NOT
58257: OR
58258: IFTRUE 58267
58260: PUSH
58261: LD_VAR 0 4
58265: NOT
58266: OR
58267: IFFALSE 58271
// exit ;
58269: GO 58635
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
58271: LD_VAR 0 1
58275: PPUSH
58276: CALL_OW 437
58280: PPUSH
58281: CALL 5242 0 1
58285: PUSH
58286: LD_INT 10
58288: GREATER
58289: IFFALSE 58293
// exit ;
58291: GO 58635
// list := [ ] ;
58293: LD_ADDR_VAR 0 13
58297: PUSH
58298: EMPTY
58299: ST_TO_ADDR
// if x - r < 0 then
58300: LD_VAR 0 2
58304: PUSH
58305: LD_VAR 0 4
58309: MINUS
58310: PUSH
58311: LD_INT 0
58313: LESS
58314: IFFALSE 58326
// min_x := 0 else
58316: LD_ADDR_VAR 0 7
58320: PUSH
58321: LD_INT 0
58323: ST_TO_ADDR
58324: GO 58342
// min_x := x - r ;
58326: LD_ADDR_VAR 0 7
58330: PUSH
58331: LD_VAR 0 2
58335: PUSH
58336: LD_VAR 0 4
58340: MINUS
58341: ST_TO_ADDR
// if y - r < 0 then
58342: LD_VAR 0 3
58346: PUSH
58347: LD_VAR 0 4
58351: MINUS
58352: PUSH
58353: LD_INT 0
58355: LESS
58356: IFFALSE 58368
// min_y := 0 else
58358: LD_ADDR_VAR 0 8
58362: PUSH
58363: LD_INT 0
58365: ST_TO_ADDR
58366: GO 58384
// min_y := y - r ;
58368: LD_ADDR_VAR 0 8
58372: PUSH
58373: LD_VAR 0 3
58377: PUSH
58378: LD_VAR 0 4
58382: MINUS
58383: ST_TO_ADDR
// max_x := x + r ;
58384: LD_ADDR_VAR 0 9
58388: PUSH
58389: LD_VAR 0 2
58393: PUSH
58394: LD_VAR 0 4
58398: PLUS
58399: ST_TO_ADDR
// max_y := y + r ;
58400: LD_ADDR_VAR 0 10
58404: PUSH
58405: LD_VAR 0 3
58409: PUSH
58410: LD_VAR 0 4
58414: PLUS
58415: ST_TO_ADDR
// for _x = min_x to max_x do
58416: LD_ADDR_VAR 0 11
58420: PUSH
58421: DOUBLE
58422: LD_VAR 0 7
58426: DEC
58427: ST_TO_ADDR
58428: LD_VAR 0 9
58432: PUSH
58433: FOR_TO
58434: IFFALSE 58553
// for _y = min_y to max_y do
58436: LD_ADDR_VAR 0 12
58440: PUSH
58441: DOUBLE
58442: LD_VAR 0 8
58446: DEC
58447: ST_TO_ADDR
58448: LD_VAR 0 10
58452: PUSH
58453: FOR_TO
58454: IFFALSE 58549
// begin if not ValidHex ( _x , _y ) then
58456: LD_VAR 0 11
58460: PPUSH
58461: LD_VAR 0 12
58465: PPUSH
58466: CALL_OW 488
58470: NOT
58471: IFFALSE 58475
// continue ;
58473: GO 58453
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
58475: LD_VAR 0 11
58479: PPUSH
58480: LD_VAR 0 12
58484: PPUSH
58485: CALL_OW 351
58489: IFFALSE 58507
58491: PUSH
58492: LD_VAR 0 11
58496: PPUSH
58497: LD_VAR 0 12
58501: PPUSH
58502: CALL_OW 554
58506: AND
58507: IFFALSE 58547
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
58509: LD_ADDR_VAR 0 13
58513: PUSH
58514: LD_VAR 0 13
58518: PPUSH
58519: LD_VAR 0 13
58523: PUSH
58524: LD_INT 1
58526: PLUS
58527: PPUSH
58528: LD_VAR 0 11
58532: PUSH
58533: LD_VAR 0 12
58537: PUSH
58538: EMPTY
58539: LIST
58540: LIST
58541: PPUSH
58542: CALL_OW 2
58546: ST_TO_ADDR
// end ;
58547: GO 58453
58549: POP
58550: POP
58551: GO 58433
58553: POP
58554: POP
// if not list then
58555: LD_VAR 0 13
58559: NOT
58560: IFFALSE 58564
// exit ;
58562: GO 58635
// for i in list do
58564: LD_ADDR_VAR 0 6
58568: PUSH
58569: LD_VAR 0 13
58573: PUSH
58574: FOR_IN
58575: IFFALSE 58633
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
58577: LD_VAR 0 1
58581: PPUSH
58582: LD_STRING M
58584: PUSH
58585: LD_VAR 0 6
58589: PUSH
58590: LD_INT 1
58592: ARRAY
58593: PUSH
58594: LD_VAR 0 6
58598: PUSH
58599: LD_INT 2
58601: ARRAY
58602: PUSH
58603: LD_INT 0
58605: PUSH
58606: LD_INT 0
58608: PUSH
58609: LD_INT 0
58611: PUSH
58612: LD_INT 0
58614: PUSH
58615: EMPTY
58616: LIST
58617: LIST
58618: LIST
58619: LIST
58620: LIST
58621: LIST
58622: LIST
58623: PUSH
58624: EMPTY
58625: LIST
58626: PPUSH
58627: CALL_OW 447
58631: GO 58574
58633: POP
58634: POP
// end ;
58635: LD_VAR 0 5
58639: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
58640: LD_INT 0
58642: PPUSH
58643: PPUSH
58644: PPUSH
58645: PPUSH
58646: PPUSH
58647: PPUSH
58648: PPUSH
58649: PPUSH
58650: PPUSH
58651: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
58652: LD_VAR 0 1
58656: PPUSH
58657: CALL_OW 302
58661: NOT
58662: IFTRUE 58681
58664: PUSH
58665: LD_VAR 0 2
58669: PPUSH
58670: LD_VAR 0 3
58674: PPUSH
58675: CALL_OW 488
58679: NOT
58680: OR
58681: IFTRUE 58690
58683: PUSH
58684: LD_VAR 0 4
58688: NOT
58689: OR
58690: IFFALSE 58694
// exit ;
58692: GO 59233
// if Count ( GetTaskList ( flame ) ) > 10 then
58694: LD_VAR 0 1
58698: PPUSH
58699: CALL_OW 437
58703: PPUSH
58704: CALL 5242 0 1
58708: PUSH
58709: LD_INT 10
58711: GREATER
58712: IFFALSE 58716
// exit ;
58714: GO 59233
// list := [ ] ;
58716: LD_ADDR_VAR 0 13
58720: PUSH
58721: EMPTY
58722: ST_TO_ADDR
// if x - r < 0 then
58723: LD_VAR 0 2
58727: PUSH
58728: LD_VAR 0 4
58732: MINUS
58733: PUSH
58734: LD_INT 0
58736: LESS
58737: IFFALSE 58749
// min_x := 0 else
58739: LD_ADDR_VAR 0 7
58743: PUSH
58744: LD_INT 0
58746: ST_TO_ADDR
58747: GO 58765
// min_x := x - r ;
58749: LD_ADDR_VAR 0 7
58753: PUSH
58754: LD_VAR 0 2
58758: PUSH
58759: LD_VAR 0 4
58763: MINUS
58764: ST_TO_ADDR
// if y - r < 0 then
58765: LD_VAR 0 3
58769: PUSH
58770: LD_VAR 0 4
58774: MINUS
58775: PUSH
58776: LD_INT 0
58778: LESS
58779: IFFALSE 58791
// min_y := 0 else
58781: LD_ADDR_VAR 0 8
58785: PUSH
58786: LD_INT 0
58788: ST_TO_ADDR
58789: GO 58807
// min_y := y - r ;
58791: LD_ADDR_VAR 0 8
58795: PUSH
58796: LD_VAR 0 3
58800: PUSH
58801: LD_VAR 0 4
58805: MINUS
58806: ST_TO_ADDR
// max_x := x + r ;
58807: LD_ADDR_VAR 0 9
58811: PUSH
58812: LD_VAR 0 2
58816: PUSH
58817: LD_VAR 0 4
58821: PLUS
58822: ST_TO_ADDR
// max_y := y + r ;
58823: LD_ADDR_VAR 0 10
58827: PUSH
58828: LD_VAR 0 3
58832: PUSH
58833: LD_VAR 0 4
58837: PLUS
58838: ST_TO_ADDR
// for _x = min_x to max_x do
58839: LD_ADDR_VAR 0 11
58843: PUSH
58844: DOUBLE
58845: LD_VAR 0 7
58849: DEC
58850: ST_TO_ADDR
58851: LD_VAR 0 9
58855: PUSH
58856: FOR_TO
58857: IFFALSE 58976
// for _y = min_y to max_y do
58859: LD_ADDR_VAR 0 12
58863: PUSH
58864: DOUBLE
58865: LD_VAR 0 8
58869: DEC
58870: ST_TO_ADDR
58871: LD_VAR 0 10
58875: PUSH
58876: FOR_TO
58877: IFFALSE 58972
// begin if not ValidHex ( _x , _y ) then
58879: LD_VAR 0 11
58883: PPUSH
58884: LD_VAR 0 12
58888: PPUSH
58889: CALL_OW 488
58893: NOT
58894: IFFALSE 58898
// continue ;
58896: GO 58876
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
58898: LD_VAR 0 11
58902: PPUSH
58903: LD_VAR 0 12
58907: PPUSH
58908: CALL_OW 351
58912: IFFALSE 58930
58914: PUSH
58915: LD_VAR 0 11
58919: PPUSH
58920: LD_VAR 0 12
58924: PPUSH
58925: CALL_OW 554
58929: AND
58930: IFFALSE 58970
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
58932: LD_ADDR_VAR 0 13
58936: PUSH
58937: LD_VAR 0 13
58941: PPUSH
58942: LD_VAR 0 13
58946: PUSH
58947: LD_INT 1
58949: PLUS
58950: PPUSH
58951: LD_VAR 0 11
58955: PUSH
58956: LD_VAR 0 12
58960: PUSH
58961: EMPTY
58962: LIST
58963: LIST
58964: PPUSH
58965: CALL_OW 2
58969: ST_TO_ADDR
// end ;
58970: GO 58876
58972: POP
58973: POP
58974: GO 58856
58976: POP
58977: POP
// if not list then
58978: LD_VAR 0 13
58982: NOT
58983: IFFALSE 58987
// exit ;
58985: GO 59233
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
58987: LD_ADDR_VAR 0 13
58991: PUSH
58992: LD_VAR 0 1
58996: PPUSH
58997: LD_VAR 0 13
59001: PPUSH
59002: LD_INT 1
59004: PPUSH
59005: LD_INT 1
59007: PPUSH
59008: CALL 8648 0 4
59012: ST_TO_ADDR
// ComStop ( flame ) ;
59013: LD_VAR 0 1
59017: PPUSH
59018: CALL_OW 141
// for i in list do
59022: LD_ADDR_VAR 0 6
59026: PUSH
59027: LD_VAR 0 13
59031: PUSH
59032: FOR_IN
59033: IFFALSE 59064
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
59035: LD_VAR 0 1
59039: PPUSH
59040: LD_VAR 0 6
59044: PUSH
59045: LD_INT 1
59047: ARRAY
59048: PPUSH
59049: LD_VAR 0 6
59053: PUSH
59054: LD_INT 2
59056: ARRAY
59057: PPUSH
59058: CALL_OW 176
59062: GO 59032
59064: POP
59065: POP
// repeat wait ( 0 0$1 ) ;
59066: LD_INT 35
59068: PPUSH
59069: CALL_OW 67
// task := GetTaskList ( flame ) ;
59073: LD_ADDR_VAR 0 14
59077: PUSH
59078: LD_VAR 0 1
59082: PPUSH
59083: CALL_OW 437
59087: ST_TO_ADDR
// if not task then
59088: LD_VAR 0 14
59092: NOT
59093: IFFALSE 59097
// exit ;
59095: GO 59233
// if task [ 1 ] [ 1 ] <> | then
59097: LD_VAR 0 14
59101: PUSH
59102: LD_INT 1
59104: ARRAY
59105: PUSH
59106: LD_INT 1
59108: ARRAY
59109: PUSH
59110: LD_STRING |
59112: NONEQUAL
59113: IFFALSE 59117
// exit ;
59115: GO 59233
// _x := task [ 1 ] [ 2 ] ;
59117: LD_ADDR_VAR 0 11
59121: PUSH
59122: LD_VAR 0 14
59126: PUSH
59127: LD_INT 1
59129: ARRAY
59130: PUSH
59131: LD_INT 2
59133: ARRAY
59134: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
59135: LD_ADDR_VAR 0 12
59139: PUSH
59140: LD_VAR 0 14
59144: PUSH
59145: LD_INT 1
59147: ARRAY
59148: PUSH
59149: LD_INT 3
59151: ARRAY
59152: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
59153: LD_VAR 0 11
59157: PPUSH
59158: LD_VAR 0 12
59162: PPUSH
59163: CALL_OW 351
59167: NOT
59168: IFTRUE 59187
59170: PUSH
59171: LD_VAR 0 11
59175: PPUSH
59176: LD_VAR 0 12
59180: PPUSH
59181: CALL_OW 554
59185: NOT
59186: OR
59187: IFFALSE 59221
// begin task := Delete ( task , 1 ) ;
59189: LD_ADDR_VAR 0 14
59193: PUSH
59194: LD_VAR 0 14
59198: PPUSH
59199: LD_INT 1
59201: PPUSH
59202: CALL_OW 3
59206: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
59207: LD_VAR 0 1
59211: PPUSH
59212: LD_VAR 0 14
59216: PPUSH
59217: CALL_OW 446
// end ; until not HasTask ( flame ) ;
59221: LD_VAR 0 1
59225: PPUSH
59226: CALL_OW 314
59230: NOT
59231: IFFALSE 59066
// end ;
59233: LD_VAR 0 5
59237: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
59238: LD_EXP 51
59242: NOT
59243: IFFALSE 59293
59245: GO 59247
59247: DISABLE
// begin initHack := true ;
59248: LD_ADDR_EXP 51
59252: PUSH
59253: LD_INT 1
59255: ST_TO_ADDR
// hackTanks := [ ] ;
59256: LD_ADDR_EXP 52
59260: PUSH
59261: EMPTY
59262: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
59263: LD_ADDR_EXP 53
59267: PUSH
59268: EMPTY
59269: ST_TO_ADDR
// hackLimit := 3 ;
59270: LD_ADDR_EXP 54
59274: PUSH
59275: LD_INT 3
59277: ST_TO_ADDR
// hackDist := 12 ;
59278: LD_ADDR_EXP 55
59282: PUSH
59283: LD_INT 12
59285: ST_TO_ADDR
// hackCounter := [ ] ;
59286: LD_ADDR_EXP 56
59290: PUSH
59291: EMPTY
59292: ST_TO_ADDR
// end ;
59293: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
59294: LD_EXP 51
59298: IFFALSE 59316
59300: PUSH
59301: LD_INT 34
59303: PUSH
59304: LD_INT 99
59306: PUSH
59307: EMPTY
59308: LIST
59309: LIST
59310: PPUSH
59311: CALL_OW 69
59315: AND
59316: IFFALSE 59569
59318: GO 59320
59320: DISABLE
59321: LD_INT 0
59323: PPUSH
59324: PPUSH
// begin enable ;
59325: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
59326: LD_ADDR_VAR 0 1
59330: PUSH
59331: LD_INT 34
59333: PUSH
59334: LD_INT 99
59336: PUSH
59337: EMPTY
59338: LIST
59339: LIST
59340: PPUSH
59341: CALL_OW 69
59345: PUSH
59346: FOR_IN
59347: IFFALSE 59567
// begin if not i in hackTanks then
59349: LD_VAR 0 1
59353: PUSH
59354: LD_EXP 52
59358: IN
59359: NOT
59360: IFFALSE 59443
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
59362: LD_ADDR_EXP 52
59366: PUSH
59367: LD_EXP 52
59371: PPUSH
59372: LD_EXP 52
59376: PUSH
59377: LD_INT 1
59379: PLUS
59380: PPUSH
59381: LD_VAR 0 1
59385: PPUSH
59386: CALL_OW 1
59390: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
59391: LD_ADDR_EXP 53
59395: PUSH
59396: LD_EXP 53
59400: PPUSH
59401: LD_EXP 53
59405: PUSH
59406: LD_INT 1
59408: PLUS
59409: PPUSH
59410: EMPTY
59411: PPUSH
59412: CALL_OW 1
59416: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
59417: LD_ADDR_EXP 56
59421: PUSH
59422: LD_EXP 56
59426: PPUSH
59427: LD_EXP 56
59431: PUSH
59432: LD_INT 1
59434: PLUS
59435: PPUSH
59436: EMPTY
59437: PPUSH
59438: CALL_OW 1
59442: ST_TO_ADDR
// end ; if not IsOk ( i ) then
59443: LD_VAR 0 1
59447: PPUSH
59448: CALL_OW 302
59452: NOT
59453: IFFALSE 59466
// begin HackUnlinkAll ( i ) ;
59455: LD_VAR 0 1
59459: PPUSH
59460: CALL 59572 0 1
// continue ;
59464: GO 59346
// end ; HackCheckCapturedStatus ( i ) ;
59466: LD_VAR 0 1
59470: PPUSH
59471: CALL 60017 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
59475: LD_ADDR_VAR 0 2
59479: PUSH
59480: LD_INT 81
59482: PUSH
59483: LD_VAR 0 1
59487: PPUSH
59488: CALL_OW 255
59492: PUSH
59493: EMPTY
59494: LIST
59495: LIST
59496: PUSH
59497: LD_INT 33
59499: PUSH
59500: LD_INT 3
59502: PUSH
59503: EMPTY
59504: LIST
59505: LIST
59506: PUSH
59507: LD_INT 91
59509: PUSH
59510: LD_VAR 0 1
59514: PUSH
59515: LD_EXP 55
59519: PUSH
59520: EMPTY
59521: LIST
59522: LIST
59523: LIST
59524: PUSH
59525: LD_INT 50
59527: PUSH
59528: EMPTY
59529: LIST
59530: PUSH
59531: EMPTY
59532: LIST
59533: LIST
59534: LIST
59535: LIST
59536: PPUSH
59537: CALL_OW 69
59541: ST_TO_ADDR
// if not tmp then
59542: LD_VAR 0 2
59546: NOT
59547: IFFALSE 59551
// continue ;
59549: GO 59346
// HackLink ( i , tmp ) ;
59551: LD_VAR 0 1
59555: PPUSH
59556: LD_VAR 0 2
59560: PPUSH
59561: CALL 59708 0 2
// end ;
59565: GO 59346
59567: POP
59568: POP
// end ;
59569: PPOPN 2
59571: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
59572: LD_INT 0
59574: PPUSH
59575: PPUSH
59576: PPUSH
// if not hack in hackTanks then
59577: LD_VAR 0 1
59581: PUSH
59582: LD_EXP 52
59586: IN
59587: NOT
59588: IFFALSE 59592
// exit ;
59590: GO 59703
// index := GetElementIndex ( hackTanks , hack ) ;
59592: LD_ADDR_VAR 0 4
59596: PUSH
59597: LD_EXP 52
59601: PPUSH
59602: LD_VAR 0 1
59606: PPUSH
59607: CALL 7943 0 2
59611: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
59612: LD_EXP 53
59616: PUSH
59617: LD_VAR 0 4
59621: ARRAY
59622: IFFALSE 59703
// begin for i in hackTanksCaptured [ index ] do
59624: LD_ADDR_VAR 0 3
59628: PUSH
59629: LD_EXP 53
59633: PUSH
59634: LD_VAR 0 4
59638: ARRAY
59639: PUSH
59640: FOR_IN
59641: IFFALSE 59667
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
59643: LD_VAR 0 3
59647: PUSH
59648: LD_INT 1
59650: ARRAY
59651: PPUSH
59652: LD_VAR 0 3
59656: PUSH
59657: LD_INT 2
59659: ARRAY
59660: PPUSH
59661: CALL_OW 235
59665: GO 59640
59667: POP
59668: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
59669: LD_ADDR_EXP 53
59673: PUSH
59674: LD_EXP 53
59678: PPUSH
59679: LD_VAR 0 4
59683: PPUSH
59684: EMPTY
59685: PPUSH
59686: CALL_OW 1
59690: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
59691: LD_VAR 0 1
59695: PPUSH
59696: LD_INT 0
59698: PPUSH
59699: CALL_OW 505
// end ; end ;
59703: LD_VAR 0 2
59707: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
59708: LD_INT 0
59710: PPUSH
59711: PPUSH
59712: PPUSH
// if not hack in hackTanks or not vehicles then
59713: LD_VAR 0 1
59717: PUSH
59718: LD_EXP 52
59722: IN
59723: NOT
59724: IFTRUE 59733
59726: PUSH
59727: LD_VAR 0 2
59731: NOT
59732: OR
59733: IFFALSE 59737
// exit ;
59735: GO 60012
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
59737: LD_ADDR_VAR 0 2
59741: PUSH
59742: LD_VAR 0 1
59746: PPUSH
59747: LD_VAR 0 2
59751: PPUSH
59752: LD_INT 1
59754: PPUSH
59755: LD_INT 1
59757: PPUSH
59758: CALL 8595 0 4
59762: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
59763: LD_ADDR_VAR 0 5
59767: PUSH
59768: LD_EXP 52
59772: PPUSH
59773: LD_VAR 0 1
59777: PPUSH
59778: CALL 7943 0 2
59782: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
59783: LD_EXP 53
59787: PUSH
59788: LD_VAR 0 5
59792: ARRAY
59793: PUSH
59794: LD_EXP 54
59798: LESS
59799: IFFALSE 59988
// begin for i := 1 to vehicles do
59801: LD_ADDR_VAR 0 4
59805: PUSH
59806: DOUBLE
59807: LD_INT 1
59809: DEC
59810: ST_TO_ADDR
59811: LD_VAR 0 2
59815: PUSH
59816: FOR_TO
59817: IFFALSE 59986
// begin if hackTanksCaptured [ index ] = hackLimit then
59819: LD_EXP 53
59823: PUSH
59824: LD_VAR 0 5
59828: ARRAY
59829: PUSH
59830: LD_EXP 54
59834: EQUAL
59835: IFFALSE 59839
// break ;
59837: GO 59986
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
59839: LD_ADDR_EXP 56
59843: PUSH
59844: LD_EXP 56
59848: PPUSH
59849: LD_VAR 0 5
59853: PPUSH
59854: LD_EXP 56
59858: PUSH
59859: LD_VAR 0 5
59863: ARRAY
59864: PUSH
59865: LD_INT 1
59867: PLUS
59868: PPUSH
59869: CALL_OW 1
59873: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
59874: LD_ADDR_EXP 53
59878: PUSH
59879: LD_EXP 53
59883: PPUSH
59884: LD_VAR 0 5
59888: PUSH
59889: LD_EXP 53
59893: PUSH
59894: LD_VAR 0 5
59898: ARRAY
59899: PUSH
59900: LD_INT 1
59902: PLUS
59903: PUSH
59904: EMPTY
59905: LIST
59906: LIST
59907: PPUSH
59908: LD_VAR 0 2
59912: PUSH
59913: LD_VAR 0 4
59917: ARRAY
59918: PUSH
59919: LD_VAR 0 2
59923: PUSH
59924: LD_VAR 0 4
59928: ARRAY
59929: PPUSH
59930: CALL_OW 255
59934: PUSH
59935: EMPTY
59936: LIST
59937: LIST
59938: PPUSH
59939: CALL 8160 0 3
59943: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
59944: LD_VAR 0 2
59948: PUSH
59949: LD_VAR 0 4
59953: ARRAY
59954: PPUSH
59955: LD_VAR 0 1
59959: PPUSH
59960: CALL_OW 255
59964: PPUSH
59965: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
59969: LD_VAR 0 2
59973: PUSH
59974: LD_VAR 0 4
59978: ARRAY
59979: PPUSH
59980: CALL_OW 141
// end ;
59984: GO 59816
59986: POP
59987: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
59988: LD_VAR 0 1
59992: PPUSH
59993: LD_EXP 53
59997: PUSH
59998: LD_VAR 0 5
60002: ARRAY
60003: PUSH
60004: LD_INT 0
60006: PLUS
60007: PPUSH
60008: CALL_OW 505
// end ;
60012: LD_VAR 0 3
60016: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
60017: LD_INT 0
60019: PPUSH
60020: PPUSH
60021: PPUSH
60022: PPUSH
// if not hack in hackTanks then
60023: LD_VAR 0 1
60027: PUSH
60028: LD_EXP 52
60032: IN
60033: NOT
60034: IFFALSE 60038
// exit ;
60036: GO 60282
// index := GetElementIndex ( hackTanks , hack ) ;
60038: LD_ADDR_VAR 0 4
60042: PUSH
60043: LD_EXP 52
60047: PPUSH
60048: LD_VAR 0 1
60052: PPUSH
60053: CALL 7943 0 2
60057: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
60058: LD_ADDR_VAR 0 3
60062: PUSH
60063: DOUBLE
60064: LD_EXP 53
60068: PUSH
60069: LD_VAR 0 4
60073: ARRAY
60074: INC
60075: ST_TO_ADDR
60076: LD_INT 1
60078: PUSH
60079: FOR_DOWNTO
60080: IFFALSE 60256
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
60082: LD_ADDR_VAR 0 5
60086: PUSH
60087: LD_EXP 53
60091: PUSH
60092: LD_VAR 0 4
60096: ARRAY
60097: PUSH
60098: LD_VAR 0 3
60102: ARRAY
60103: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
60104: LD_VAR 0 5
60108: PUSH
60109: LD_INT 1
60111: ARRAY
60112: PPUSH
60113: CALL_OW 302
60117: NOT
60118: IFTRUE 60146
60120: PUSH
60121: LD_VAR 0 5
60125: PUSH
60126: LD_INT 1
60128: ARRAY
60129: PPUSH
60130: CALL_OW 255
60134: PUSH
60135: LD_VAR 0 1
60139: PPUSH
60140: CALL_OW 255
60144: NONEQUAL
60145: OR
60146: IFFALSE 60254
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
60148: LD_VAR 0 5
60152: PUSH
60153: LD_INT 1
60155: ARRAY
60156: PPUSH
60157: CALL_OW 305
60161: IFFALSE 60189
60163: PUSH
60164: LD_VAR 0 5
60168: PUSH
60169: LD_INT 1
60171: ARRAY
60172: PPUSH
60173: CALL_OW 255
60177: PUSH
60178: LD_VAR 0 1
60182: PPUSH
60183: CALL_OW 255
60187: EQUAL
60188: AND
60189: IFFALSE 60213
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
60191: LD_VAR 0 5
60195: PUSH
60196: LD_INT 1
60198: ARRAY
60199: PPUSH
60200: LD_VAR 0 5
60204: PUSH
60205: LD_INT 2
60207: ARRAY
60208: PPUSH
60209: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
60213: LD_ADDR_EXP 53
60217: PUSH
60218: LD_EXP 53
60222: PPUSH
60223: LD_VAR 0 4
60227: PPUSH
60228: LD_EXP 53
60232: PUSH
60233: LD_VAR 0 4
60237: ARRAY
60238: PPUSH
60239: LD_VAR 0 3
60243: PPUSH
60244: CALL_OW 3
60248: PPUSH
60249: CALL_OW 1
60253: ST_TO_ADDR
// end ; end ;
60254: GO 60079
60256: POP
60257: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
60258: LD_VAR 0 1
60262: PPUSH
60263: LD_EXP 53
60267: PUSH
60268: LD_VAR 0 4
60272: ARRAY
60273: PUSH
60274: LD_INT 0
60276: PLUS
60277: PPUSH
60278: CALL_OW 505
// end ;
60282: LD_VAR 0 2
60286: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
60287: LD_INT 0
60289: PPUSH
60290: PPUSH
60291: PPUSH
60292: PPUSH
// if not hack in hackTanks then
60293: LD_VAR 0 1
60297: PUSH
60298: LD_EXP 52
60302: IN
60303: NOT
60304: IFFALSE 60308
// exit ;
60306: GO 60393
// index := GetElementIndex ( hackTanks , hack ) ;
60308: LD_ADDR_VAR 0 5
60312: PUSH
60313: LD_EXP 52
60317: PPUSH
60318: LD_VAR 0 1
60322: PPUSH
60323: CALL 7943 0 2
60327: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
60328: LD_ADDR_VAR 0 4
60332: PUSH
60333: DOUBLE
60334: LD_INT 1
60336: DEC
60337: ST_TO_ADDR
60338: LD_EXP 53
60342: PUSH
60343: LD_VAR 0 5
60347: ARRAY
60348: PUSH
60349: FOR_TO
60350: IFFALSE 60391
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
60352: LD_EXP 53
60356: PUSH
60357: LD_VAR 0 5
60361: ARRAY
60362: PUSH
60363: LD_VAR 0 4
60367: ARRAY
60368: PUSH
60369: LD_INT 1
60371: ARRAY
60372: PUSH
60373: LD_VAR 0 2
60377: EQUAL
60378: IFFALSE 60389
// KillUnit ( vehicle ) ;
60380: LD_VAR 0 2
60384: PPUSH
60385: CALL_OW 66
60389: GO 60349
60391: POP
60392: POP
// end ;
60393: LD_VAR 0 3
60397: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
60398: LD_EXP 57
60402: NOT
60403: IFFALSE 60536
60405: GO 60407
60407: DISABLE
60408: LD_INT 0
60410: PPUSH
// begin initMiner := true ;
60411: LD_ADDR_EXP 57
60415: PUSH
60416: LD_INT 1
60418: ST_TO_ADDR
// minersList := [ ] ;
60419: LD_ADDR_EXP 58
60423: PUSH
60424: EMPTY
60425: ST_TO_ADDR
// minerMinesList := [ ] ;
60426: LD_ADDR_EXP 59
60430: PUSH
60431: EMPTY
60432: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
60433: LD_ADDR_EXP 60
60437: PUSH
60438: LD_INT 10
60440: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
60441: LD_ADDR_VAR 0 1
60445: PUSH
60446: LD_INT 34
60448: PUSH
60449: LD_INT 81
60451: PUSH
60452: EMPTY
60453: LIST
60454: LIST
60455: PPUSH
60456: CALL_OW 69
60460: PUSH
60461: FOR_IN
60462: IFFALSE 60534
// begin if not i in minersList then
60464: LD_VAR 0 1
60468: PUSH
60469: LD_EXP 58
60473: IN
60474: NOT
60475: IFFALSE 60532
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
60477: LD_ADDR_EXP 58
60481: PUSH
60482: LD_EXP 58
60486: PPUSH
60487: LD_EXP 58
60491: PUSH
60492: LD_INT 1
60494: PLUS
60495: PPUSH
60496: LD_VAR 0 1
60500: PPUSH
60501: CALL_OW 1
60505: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
60506: LD_ADDR_EXP 59
60510: PUSH
60511: LD_EXP 59
60515: PPUSH
60516: LD_EXP 59
60520: PUSH
60521: LD_INT 1
60523: PLUS
60524: PPUSH
60525: EMPTY
60526: PPUSH
60527: CALL_OW 1
60531: ST_TO_ADDR
// end end ;
60532: GO 60461
60534: POP
60535: POP
// end ;
60536: PPOPN 1
60538: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
60539: LD_EXP 57
60543: IFFALSE 60574
60545: PUSH
60546: LD_EXP 59
60550: PPUSH
60551: CALL 5242 0 1
60555: IFTRUE 60573
60557: PUSH
60558: LD_INT 34
60560: PUSH
60561: LD_INT 81
60563: PUSH
60564: EMPTY
60565: LIST
60566: LIST
60567: PPUSH
60568: CALL_OW 69
60572: OR
60573: AND
60574: IFFALSE 61094
60576: GO 60578
60578: DISABLE
60579: LD_INT 0
60581: PPUSH
60582: PPUSH
60583: PPUSH
60584: PPUSH
// begin enable ;
60585: ENABLE
// for i := minerMinesList downto 1 do
60586: LD_ADDR_VAR 0 1
60590: PUSH
60591: DOUBLE
60592: LD_EXP 59
60596: INC
60597: ST_TO_ADDR
60598: LD_INT 1
60600: PUSH
60601: FOR_DOWNTO
60602: IFFALSE 61092
// begin side := GetSide ( minersList [ i ] ) ;
60604: LD_ADDR_VAR 0 3
60608: PUSH
60609: LD_EXP 58
60613: PUSH
60614: LD_VAR 0 1
60618: ARRAY
60619: PPUSH
60620: CALL_OW 255
60624: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
60625: LD_EXP 58
60629: PUSH
60630: LD_VAR 0 1
60634: ARRAY
60635: PPUSH
60636: CALL_OW 300
60640: IFFALSE 60661
60642: PUSH
60643: LD_VAR 0 3
60647: PUSH
60648: LD_OWVAR 2
60652: PUSH
60653: LD_INT 9
60655: PUSH
60656: EMPTY
60657: LIST
60658: LIST
60659: IN
60660: AND
60661: IFFALSE 60694
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
60663: LD_EXP 58
60667: PUSH
60668: LD_VAR 0 1
60672: ARRAY
60673: PPUSH
60674: LD_EXP 59
60678: PUSH
60679: LD_VAR 0 1
60683: ARRAY
60684: PPUSH
60685: CALL 5242 0 1
60689: PPUSH
60690: CALL_OW 505
// if not minerMinesList [ i ] then
60694: LD_EXP 59
60698: PUSH
60699: LD_VAR 0 1
60703: ARRAY
60704: NOT
60705: IFFALSE 60709
// continue ;
60707: GO 60601
// for j := minerMinesList [ i ] downto 1 do
60709: LD_ADDR_VAR 0 2
60713: PUSH
60714: DOUBLE
60715: LD_EXP 59
60719: PUSH
60720: LD_VAR 0 1
60724: ARRAY
60725: INC
60726: ST_TO_ADDR
60727: LD_INT 1
60729: PUSH
60730: FOR_DOWNTO
60731: IFFALSE 61088
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
60733: LD_EXP 58
60737: PUSH
60738: LD_VAR 0 1
60742: ARRAY
60743: PPUSH
60744: CALL_OW 301
60748: IFTRUE 60768
60750: PUSH
60751: LD_EXP 58
60755: PUSH
60756: LD_VAR 0 1
60760: ARRAY
60761: PPUSH
60762: CALL_OW 305
60766: NOT
60767: OR
60768: IFFALSE 60859
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
60770: LD_EXP 59
60774: PUSH
60775: LD_VAR 0 1
60779: ARRAY
60780: PUSH
60781: LD_VAR 0 2
60785: ARRAY
60786: PUSH
60787: LD_INT 1
60789: ARRAY
60790: PPUSH
60791: LD_EXP 59
60795: PUSH
60796: LD_VAR 0 1
60800: ARRAY
60801: PUSH
60802: LD_VAR 0 2
60806: ARRAY
60807: PUSH
60808: LD_INT 2
60810: ARRAY
60811: PPUSH
60812: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
60816: LD_ADDR_EXP 59
60820: PUSH
60821: LD_EXP 59
60825: PPUSH
60826: LD_VAR 0 1
60830: PPUSH
60831: LD_EXP 59
60835: PUSH
60836: LD_VAR 0 1
60840: ARRAY
60841: PPUSH
60842: LD_VAR 0 2
60846: PPUSH
60847: CALL_OW 3
60851: PPUSH
60852: CALL_OW 1
60856: ST_TO_ADDR
// continue ;
60857: GO 60730
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
60859: LD_ADDR_VAR 0 4
60863: PUSH
60864: LD_EXP 59
60868: PUSH
60869: LD_VAR 0 1
60873: ARRAY
60874: PUSH
60875: LD_VAR 0 2
60879: ARRAY
60880: PUSH
60881: LD_INT 1
60883: ARRAY
60884: PPUSH
60885: LD_EXP 59
60889: PUSH
60890: LD_VAR 0 1
60894: ARRAY
60895: PUSH
60896: LD_VAR 0 2
60900: ARRAY
60901: PUSH
60902: LD_INT 2
60904: ARRAY
60905: PPUSH
60906: CALL_OW 428
60910: ST_TO_ADDR
// if not tmp then
60911: LD_VAR 0 4
60915: NOT
60916: IFFALSE 60920
// continue ;
60918: GO 60730
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
60920: LD_VAR 0 4
60924: PUSH
60925: LD_INT 81
60927: PUSH
60928: LD_VAR 0 3
60932: PUSH
60933: EMPTY
60934: LIST
60935: LIST
60936: PPUSH
60937: CALL_OW 69
60941: IN
60942: IFFALSE 60992
60944: PUSH
60945: LD_EXP 59
60949: PUSH
60950: LD_VAR 0 1
60954: ARRAY
60955: PUSH
60956: LD_VAR 0 2
60960: ARRAY
60961: PUSH
60962: LD_INT 1
60964: ARRAY
60965: PPUSH
60966: LD_EXP 59
60970: PUSH
60971: LD_VAR 0 1
60975: ARRAY
60976: PUSH
60977: LD_VAR 0 2
60981: ARRAY
60982: PUSH
60983: LD_INT 2
60985: ARRAY
60986: PPUSH
60987: CALL_OW 458
60991: AND
60992: IFFALSE 61086
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
60994: LD_EXP 59
60998: PUSH
60999: LD_VAR 0 1
61003: ARRAY
61004: PUSH
61005: LD_VAR 0 2
61009: ARRAY
61010: PUSH
61011: LD_INT 1
61013: ARRAY
61014: PPUSH
61015: LD_EXP 59
61019: PUSH
61020: LD_VAR 0 1
61024: ARRAY
61025: PUSH
61026: LD_VAR 0 2
61030: ARRAY
61031: PUSH
61032: LD_INT 2
61034: ARRAY
61035: PPUSH
61036: LD_VAR 0 3
61040: PPUSH
61041: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
61045: LD_ADDR_EXP 59
61049: PUSH
61050: LD_EXP 59
61054: PPUSH
61055: LD_VAR 0 1
61059: PPUSH
61060: LD_EXP 59
61064: PUSH
61065: LD_VAR 0 1
61069: ARRAY
61070: PPUSH
61071: LD_VAR 0 2
61075: PPUSH
61076: CALL_OW 3
61080: PPUSH
61081: CALL_OW 1
61085: ST_TO_ADDR
// end ; end ;
61086: GO 60730
61088: POP
61089: POP
// end ;
61090: GO 60601
61092: POP
61093: POP
// end ;
61094: PPOPN 4
61096: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
61097: LD_INT 0
61099: PPUSH
61100: PPUSH
61101: PPUSH
61102: PPUSH
// result := false ;
61103: LD_ADDR_VAR 0 4
61107: PUSH
61108: LD_INT 0
61110: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
61111: LD_VAR 0 1
61115: PPUSH
61116: CALL_OW 264
61120: PUSH
61121: LD_INT 81
61123: EQUAL
61124: NOT
61125: IFFALSE 61129
// exit ;
61127: GO 61499
// side := GetSide ( unit ) ;
61129: LD_ADDR_VAR 0 6
61133: PUSH
61134: LD_VAR 0 1
61138: PPUSH
61139: CALL_OW 255
61143: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
61144: LD_ADDR_VAR 0 5
61148: PUSH
61149: LD_EXP 58
61153: PPUSH
61154: LD_VAR 0 1
61158: PPUSH
61159: CALL 7943 0 2
61163: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
61164: LD_EXP 59
61168: PUSH
61169: LD_VAR 0 5
61173: ARRAY
61174: PUSH
61175: LD_EXP 60
61179: GREATEREQUAL
61180: IFFALSE 61184
// exit ;
61182: GO 61499
// ComMoveXY ( unit , x , y ) ;
61184: LD_VAR 0 1
61188: PPUSH
61189: LD_VAR 0 2
61193: PPUSH
61194: LD_VAR 0 3
61198: PPUSH
61199: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
61203: LD_INT 35
61205: PPUSH
61206: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
61210: LD_VAR 0 1
61214: PPUSH
61215: LD_VAR 0 2
61219: PPUSH
61220: LD_VAR 0 3
61224: PPUSH
61225: CALL 39999 0 3
61229: NOT
61230: IFFALSE 61243
61232: PUSH
61233: LD_VAR 0 1
61237: PPUSH
61238: CALL_OW 314
61242: AND
61243: IFFALSE 61247
// exit ;
61245: GO 61499
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
61247: LD_VAR 0 2
61251: PPUSH
61252: LD_VAR 0 3
61256: PPUSH
61257: CALL_OW 428
61261: PUSH
61262: LD_VAR 0 1
61266: EQUAL
61267: IFFALSE 61281
61269: PUSH
61270: LD_VAR 0 1
61274: PPUSH
61275: CALL_OW 314
61279: NOT
61280: AND
61281: IFFALSE 61203
// if MineAtPos ( x , y ) then
61283: LD_VAR 0 2
61287: PPUSH
61288: LD_VAR 0 3
61292: PPUSH
61293: CALL_OW 458
61297: IFFALSE 61301
// exit ;
61299: GO 61499
// if your_side = side then
61301: LD_OWVAR 2
61305: PUSH
61306: LD_VAR 0 6
61310: EQUAL
61311: IFFALSE 61330
// PlaySoundXY ( x , y , PlantMine ) ;
61313: LD_VAR 0 2
61317: PPUSH
61318: LD_VAR 0 3
61322: PPUSH
61323: LD_STRING PlantMine
61325: PPUSH
61326: CALL_OW 366
// repeat wait ( 1 ) ;
61330: LD_INT 1
61332: PPUSH
61333: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
61337: LD_VAR 0 2
61341: PPUSH
61342: LD_VAR 0 3
61346: PPUSH
61347: LD_VAR 0 6
61351: PPUSH
61352: LD_INT 0
61354: PPUSH
61355: CALL_OW 454
61359: IFFALSE 61330
// if MineAtPos ( x , y ) then
61361: LD_VAR 0 2
61365: PPUSH
61366: LD_VAR 0 3
61370: PPUSH
61371: CALL_OW 458
61375: IFFALSE 61491
// begin for i in minerMinesList [ index ] do
61377: LD_ADDR_VAR 0 7
61381: PUSH
61382: LD_EXP 59
61386: PUSH
61387: LD_VAR 0 5
61391: ARRAY
61392: PUSH
61393: FOR_IN
61394: IFFALSE 61436
// if i [ 1 ] = x and i [ 2 ] = y then
61396: LD_VAR 0 7
61400: PUSH
61401: LD_INT 1
61403: ARRAY
61404: PUSH
61405: LD_VAR 0 2
61409: EQUAL
61410: IFFALSE 61428
61412: PUSH
61413: LD_VAR 0 7
61417: PUSH
61418: LD_INT 2
61420: ARRAY
61421: PUSH
61422: LD_VAR 0 3
61426: EQUAL
61427: AND
61428: IFFALSE 61434
// exit ;
61430: POP
61431: POP
61432: GO 61499
61434: GO 61393
61436: POP
61437: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
61438: LD_ADDR_EXP 59
61442: PUSH
61443: LD_EXP 59
61447: PPUSH
61448: LD_VAR 0 5
61452: PUSH
61453: LD_EXP 59
61457: PUSH
61458: LD_VAR 0 5
61462: ARRAY
61463: PUSH
61464: LD_INT 1
61466: PLUS
61467: PUSH
61468: EMPTY
61469: LIST
61470: LIST
61471: PPUSH
61472: LD_VAR 0 2
61476: PUSH
61477: LD_VAR 0 3
61481: PUSH
61482: EMPTY
61483: LIST
61484: LIST
61485: PPUSH
61486: CALL 8160 0 3
61490: ST_TO_ADDR
// end ; result := true ;
61491: LD_ADDR_VAR 0 4
61495: PUSH
61496: LD_INT 1
61498: ST_TO_ADDR
// end ;
61499: LD_VAR 0 4
61503: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
61504: LD_INT 0
61506: PPUSH
61507: PPUSH
61508: PPUSH
// if not unit in minersList then
61509: LD_VAR 0 1
61513: PUSH
61514: LD_EXP 58
61518: IN
61519: NOT
61520: IFFALSE 61524
// exit ;
61522: GO 61731
// index := GetElementIndex ( minersList , unit ) ;
61524: LD_ADDR_VAR 0 6
61528: PUSH
61529: LD_EXP 58
61533: PPUSH
61534: LD_VAR 0 1
61538: PPUSH
61539: CALL 7943 0 2
61543: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
61544: LD_ADDR_VAR 0 5
61548: PUSH
61549: DOUBLE
61550: LD_EXP 59
61554: PUSH
61555: LD_VAR 0 6
61559: ARRAY
61560: INC
61561: ST_TO_ADDR
61562: LD_INT 1
61564: PUSH
61565: FOR_DOWNTO
61566: IFFALSE 61729
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
61568: LD_EXP 59
61572: PUSH
61573: LD_VAR 0 6
61577: ARRAY
61578: PUSH
61579: LD_VAR 0 5
61583: ARRAY
61584: PUSH
61585: LD_INT 1
61587: ARRAY
61588: PPUSH
61589: LD_EXP 59
61593: PUSH
61594: LD_VAR 0 6
61598: ARRAY
61599: PUSH
61600: LD_VAR 0 5
61604: ARRAY
61605: PUSH
61606: LD_INT 2
61608: ARRAY
61609: PPUSH
61610: LD_VAR 0 2
61614: PPUSH
61615: LD_VAR 0 3
61619: PPUSH
61620: CALL_OW 298
61624: PUSH
61625: LD_INT 6
61627: LESS
61628: IFFALSE 61727
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
61630: LD_EXP 59
61634: PUSH
61635: LD_VAR 0 6
61639: ARRAY
61640: PUSH
61641: LD_VAR 0 5
61645: ARRAY
61646: PUSH
61647: LD_INT 1
61649: ARRAY
61650: PPUSH
61651: LD_EXP 59
61655: PUSH
61656: LD_VAR 0 6
61660: ARRAY
61661: PUSH
61662: LD_VAR 0 5
61666: ARRAY
61667: PUSH
61668: LD_INT 2
61670: ARRAY
61671: PPUSH
61672: LD_VAR 0 1
61676: PPUSH
61677: CALL_OW 255
61681: PPUSH
61682: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
61686: LD_ADDR_EXP 59
61690: PUSH
61691: LD_EXP 59
61695: PPUSH
61696: LD_VAR 0 6
61700: PPUSH
61701: LD_EXP 59
61705: PUSH
61706: LD_VAR 0 6
61710: ARRAY
61711: PPUSH
61712: LD_VAR 0 5
61716: PPUSH
61717: CALL_OW 3
61721: PPUSH
61722: CALL_OW 1
61726: ST_TO_ADDR
// end ; end ;
61727: GO 61565
61729: POP
61730: POP
// end ;
61731: LD_VAR 0 4
61735: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
61736: LD_INT 0
61738: PPUSH
61739: PPUSH
61740: PPUSH
61741: PPUSH
61742: PPUSH
61743: PPUSH
61744: PPUSH
61745: PPUSH
61746: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
61747: LD_VAR 0 1
61751: PPUSH
61752: CALL_OW 264
61756: PUSH
61757: LD_INT 81
61759: EQUAL
61760: NOT
61761: IFTRUE 61776
61763: PUSH
61764: LD_VAR 0 1
61768: PUSH
61769: LD_EXP 58
61773: IN
61774: NOT
61775: OR
61776: IFFALSE 61780
// exit ;
61778: GO 62106
// index := GetElementIndex ( minersList , unit ) ;
61780: LD_ADDR_VAR 0 6
61784: PUSH
61785: LD_EXP 58
61789: PPUSH
61790: LD_VAR 0 1
61794: PPUSH
61795: CALL 7943 0 2
61799: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
61800: LD_ADDR_VAR 0 8
61804: PUSH
61805: LD_EXP 60
61809: PUSH
61810: LD_EXP 59
61814: PUSH
61815: LD_VAR 0 6
61819: ARRAY
61820: MINUS
61821: ST_TO_ADDR
// if not minesFreeAmount then
61822: LD_VAR 0 8
61826: NOT
61827: IFFALSE 61831
// exit ;
61829: GO 62106
// tmp := [ ] ;
61831: LD_ADDR_VAR 0 7
61835: PUSH
61836: EMPTY
61837: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
61838: LD_ADDR_VAR 0 5
61842: PUSH
61843: DOUBLE
61844: LD_INT 1
61846: DEC
61847: ST_TO_ADDR
61848: LD_VAR 0 8
61852: PUSH
61853: FOR_TO
61854: IFFALSE 62053
// begin _d := rand ( 0 , 5 ) ;
61856: LD_ADDR_VAR 0 11
61860: PUSH
61861: LD_INT 0
61863: PPUSH
61864: LD_INT 5
61866: PPUSH
61867: CALL_OW 12
61871: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
61872: LD_ADDR_VAR 0 12
61876: PUSH
61877: LD_INT 2
61879: PPUSH
61880: LD_INT 6
61882: PPUSH
61883: CALL_OW 12
61887: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
61888: LD_ADDR_VAR 0 9
61892: PUSH
61893: LD_VAR 0 2
61897: PPUSH
61898: LD_VAR 0 11
61902: PPUSH
61903: LD_VAR 0 12
61907: PPUSH
61908: CALL_OW 272
61912: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
61913: LD_ADDR_VAR 0 10
61917: PUSH
61918: LD_VAR 0 3
61922: PPUSH
61923: LD_VAR 0 11
61927: PPUSH
61928: LD_VAR 0 12
61932: PPUSH
61933: CALL_OW 273
61937: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
61938: LD_VAR 0 9
61942: PPUSH
61943: LD_VAR 0 10
61947: PPUSH
61948: CALL_OW 488
61952: IFFALSE 61976
61954: PUSH
61955: LD_VAR 0 9
61959: PUSH
61960: LD_VAR 0 10
61964: PUSH
61965: EMPTY
61966: LIST
61967: LIST
61968: PUSH
61969: LD_VAR 0 7
61973: IN
61974: NOT
61975: AND
61976: IFFALSE 61995
61978: PUSH
61979: LD_VAR 0 9
61983: PPUSH
61984: LD_VAR 0 10
61988: PPUSH
61989: CALL_OW 458
61993: NOT
61994: AND
61995: IFFALSE 62037
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
61997: LD_ADDR_VAR 0 7
62001: PUSH
62002: LD_VAR 0 7
62006: PPUSH
62007: LD_VAR 0 7
62011: PUSH
62012: LD_INT 1
62014: PLUS
62015: PPUSH
62016: LD_VAR 0 9
62020: PUSH
62021: LD_VAR 0 10
62025: PUSH
62026: EMPTY
62027: LIST
62028: LIST
62029: PPUSH
62030: CALL_OW 1
62034: ST_TO_ADDR
62035: GO 62051
// i := i - 1 ;
62037: LD_ADDR_VAR 0 5
62041: PUSH
62042: LD_VAR 0 5
62046: PUSH
62047: LD_INT 1
62049: MINUS
62050: ST_TO_ADDR
// end ;
62051: GO 61853
62053: POP
62054: POP
// for i in tmp do
62055: LD_ADDR_VAR 0 5
62059: PUSH
62060: LD_VAR 0 7
62064: PUSH
62065: FOR_IN
62066: IFFALSE 62104
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
62068: LD_VAR 0 1
62072: PPUSH
62073: LD_VAR 0 5
62077: PUSH
62078: LD_INT 1
62080: ARRAY
62081: PPUSH
62082: LD_VAR 0 5
62086: PUSH
62087: LD_INT 2
62089: ARRAY
62090: PPUSH
62091: CALL 61097 0 3
62095: NOT
62096: IFFALSE 62102
// exit ;
62098: POP
62099: POP
62100: GO 62106
62102: GO 62065
62104: POP
62105: POP
// end ;
62106: LD_VAR 0 4
62110: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
62111: LD_INT 0
62113: PPUSH
62114: PPUSH
62115: PPUSH
62116: PPUSH
62117: PPUSH
62118: PPUSH
62119: PPUSH
62120: PPUSH
62121: PPUSH
// if GetClass ( unit ) <> class_sniper then
62122: LD_VAR 0 1
62126: PPUSH
62127: CALL_OW 257
62131: PUSH
62132: LD_INT 5
62134: NONEQUAL
62135: IFFALSE 62139
// exit ;
62137: GO 62609
// dist := 8 ;
62139: LD_ADDR_VAR 0 5
62143: PUSH
62144: LD_INT 8
62146: ST_TO_ADDR
// viewRange := 12 ;
62147: LD_ADDR_VAR 0 8
62151: PUSH
62152: LD_INT 12
62154: ST_TO_ADDR
// side := GetSide ( unit ) ;
62155: LD_ADDR_VAR 0 6
62159: PUSH
62160: LD_VAR 0 1
62164: PPUSH
62165: CALL_OW 255
62169: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
62170: LD_INT 61
62172: PPUSH
62173: LD_VAR 0 6
62177: PPUSH
62178: CALL_OW 321
62182: PUSH
62183: LD_INT 2
62185: EQUAL
62186: IFFALSE 62196
// viewRange := 16 ;
62188: LD_ADDR_VAR 0 8
62192: PUSH
62193: LD_INT 16
62195: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
62196: LD_VAR 0 1
62200: PPUSH
62201: LD_VAR 0 2
62205: PPUSH
62206: LD_VAR 0 3
62210: PPUSH
62211: CALL_OW 297
62215: PUSH
62216: LD_VAR 0 5
62220: GREATER
62221: IFFALSE 62300
// begin ComMoveXY ( unit , x , y ) ;
62223: LD_VAR 0 1
62227: PPUSH
62228: LD_VAR 0 2
62232: PPUSH
62233: LD_VAR 0 3
62237: PPUSH
62238: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
62242: LD_INT 35
62244: PPUSH
62245: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
62249: LD_VAR 0 1
62253: PPUSH
62254: LD_VAR 0 2
62258: PPUSH
62259: LD_VAR 0 3
62263: PPUSH
62264: CALL 39999 0 3
62268: NOT
62269: IFFALSE 62273
// exit ;
62271: GO 62609
// until GetDistUnitXY ( unit , x , y ) < dist ;
62273: LD_VAR 0 1
62277: PPUSH
62278: LD_VAR 0 2
62282: PPUSH
62283: LD_VAR 0 3
62287: PPUSH
62288: CALL_OW 297
62292: PUSH
62293: LD_VAR 0 5
62297: LESS
62298: IFFALSE 62242
// end ; ComTurnXY ( unit , x , y ) ;
62300: LD_VAR 0 1
62304: PPUSH
62305: LD_VAR 0 2
62309: PPUSH
62310: LD_VAR 0 3
62314: PPUSH
62315: CALL_OW 118
// repeat if Multiplayer then
62319: LD_OWVAR 4
62323: IFFALSE 62334
// wait ( 35 ) else
62325: LD_INT 35
62327: PPUSH
62328: CALL_OW 67
62332: GO 62341
// wait ( 5 ) ;
62334: LD_INT 5
62336: PPUSH
62337: CALL_OW 67
// _d := GetDir ( unit ) ;
62341: LD_ADDR_VAR 0 11
62345: PUSH
62346: LD_VAR 0 1
62350: PPUSH
62351: CALL_OW 254
62355: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
62356: LD_ADDR_VAR 0 7
62360: PUSH
62361: LD_VAR 0 1
62365: PPUSH
62366: CALL_OW 250
62370: PPUSH
62371: LD_VAR 0 1
62375: PPUSH
62376: CALL_OW 251
62380: PPUSH
62381: LD_VAR 0 2
62385: PPUSH
62386: LD_VAR 0 3
62390: PPUSH
62391: CALL 42635 0 4
62395: ST_TO_ADDR
// until dir = _d ;
62396: LD_VAR 0 7
62400: PUSH
62401: LD_VAR 0 11
62405: EQUAL
62406: IFFALSE 62319
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
62408: LD_ADDR_VAR 0 9
62412: PUSH
62413: LD_VAR 0 1
62417: PPUSH
62418: CALL_OW 250
62422: PPUSH
62423: LD_VAR 0 7
62427: PPUSH
62428: LD_VAR 0 5
62432: PPUSH
62433: CALL_OW 272
62437: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
62438: LD_ADDR_VAR 0 10
62442: PUSH
62443: LD_VAR 0 1
62447: PPUSH
62448: CALL_OW 251
62452: PPUSH
62453: LD_VAR 0 7
62457: PPUSH
62458: LD_VAR 0 5
62462: PPUSH
62463: CALL_OW 273
62467: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
62468: LD_VAR 0 9
62472: PPUSH
62473: LD_VAR 0 10
62477: PPUSH
62478: CALL_OW 488
62482: NOT
62483: IFFALSE 62487
// exit ;
62485: GO 62609
// ComAnimCustom ( unit , 1 ) ;
62487: LD_VAR 0 1
62491: PPUSH
62492: LD_INT 1
62494: PPUSH
62495: CALL_OW 592
// p := 0 ;
62499: LD_ADDR_VAR 0 12
62503: PUSH
62504: LD_INT 0
62506: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
62507: LD_VAR 0 9
62511: PPUSH
62512: LD_VAR 0 10
62516: PPUSH
62517: LD_VAR 0 6
62521: PPUSH
62522: LD_VAR 0 8
62526: PPUSH
62527: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
62531: LD_INT 35
62533: PPUSH
62534: CALL_OW 67
// p := Inc ( p ) ;
62538: LD_ADDR_VAR 0 12
62542: PUSH
62543: LD_VAR 0 12
62547: PPUSH
62548: CALL 42591 0 1
62552: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
62553: LD_VAR 0 12
62557: PUSH
62558: LD_INT 3
62560: EQUAL
62561: IFTRUE 62575
62563: PUSH
62564: LD_VAR 0 1
62568: PPUSH
62569: CALL_OW 302
62573: NOT
62574: OR
62575: IFTRUE 62588
62577: PUSH
62578: LD_VAR 0 1
62582: PPUSH
62583: CALL_OW 301
62587: OR
62588: IFFALSE 62531
// RemoveSeeing ( _x , _y , side ) ;
62590: LD_VAR 0 9
62594: PPUSH
62595: LD_VAR 0 10
62599: PPUSH
62600: LD_VAR 0 6
62604: PPUSH
62605: CALL_OW 331
// end ;
62609: LD_VAR 0 4
62613: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
62614: LD_INT 0
62616: PPUSH
62617: PPUSH
62618: PPUSH
62619: PPUSH
62620: PPUSH
62621: PPUSH
62622: PPUSH
62623: PPUSH
62624: PPUSH
62625: PPUSH
62626: PPUSH
// if not unit then
62627: LD_VAR 0 1
62631: NOT
62632: IFFALSE 62636
// exit ;
62634: GO 62907
// side := GetSide ( unit ) ;
62636: LD_ADDR_VAR 0 3
62640: PUSH
62641: LD_VAR 0 1
62645: PPUSH
62646: CALL_OW 255
62650: ST_TO_ADDR
// x := GetX ( unit ) ;
62651: LD_ADDR_VAR 0 5
62655: PUSH
62656: LD_VAR 0 1
62660: PPUSH
62661: CALL_OW 250
62665: ST_TO_ADDR
// y := GetY ( unit ) ;
62666: LD_ADDR_VAR 0 6
62670: PUSH
62671: LD_VAR 0 1
62675: PPUSH
62676: CALL_OW 251
62680: ST_TO_ADDR
// r := 8 ;
62681: LD_ADDR_VAR 0 4
62685: PUSH
62686: LD_INT 8
62688: ST_TO_ADDR
// if x - r < 0 then
62689: LD_VAR 0 5
62693: PUSH
62694: LD_VAR 0 4
62698: MINUS
62699: PUSH
62700: LD_INT 0
62702: LESS
62703: IFFALSE 62715
// min_x := 0 else
62705: LD_ADDR_VAR 0 7
62709: PUSH
62710: LD_INT 0
62712: ST_TO_ADDR
62713: GO 62731
// min_x := x - r ;
62715: LD_ADDR_VAR 0 7
62719: PUSH
62720: LD_VAR 0 5
62724: PUSH
62725: LD_VAR 0 4
62729: MINUS
62730: ST_TO_ADDR
// if y - r < 0 then
62731: LD_VAR 0 6
62735: PUSH
62736: LD_VAR 0 4
62740: MINUS
62741: PUSH
62742: LD_INT 0
62744: LESS
62745: IFFALSE 62757
// min_y := 0 else
62747: LD_ADDR_VAR 0 8
62751: PUSH
62752: LD_INT 0
62754: ST_TO_ADDR
62755: GO 62773
// min_y := y - r ;
62757: LD_ADDR_VAR 0 8
62761: PUSH
62762: LD_VAR 0 6
62766: PUSH
62767: LD_VAR 0 4
62771: MINUS
62772: ST_TO_ADDR
// max_x := x + r ;
62773: LD_ADDR_VAR 0 9
62777: PUSH
62778: LD_VAR 0 5
62782: PUSH
62783: LD_VAR 0 4
62787: PLUS
62788: ST_TO_ADDR
// max_y := y + r ;
62789: LD_ADDR_VAR 0 10
62793: PUSH
62794: LD_VAR 0 6
62798: PUSH
62799: LD_VAR 0 4
62803: PLUS
62804: ST_TO_ADDR
// for _x = min_x to max_x do
62805: LD_ADDR_VAR 0 11
62809: PUSH
62810: DOUBLE
62811: LD_VAR 0 7
62815: DEC
62816: ST_TO_ADDR
62817: LD_VAR 0 9
62821: PUSH
62822: FOR_TO
62823: IFFALSE 62905
// for _y = min_y to max_y do
62825: LD_ADDR_VAR 0 12
62829: PUSH
62830: DOUBLE
62831: LD_VAR 0 8
62835: DEC
62836: ST_TO_ADDR
62837: LD_VAR 0 10
62841: PUSH
62842: FOR_TO
62843: IFFALSE 62901
// begin if not ValidHex ( _x , _y ) then
62845: LD_VAR 0 11
62849: PPUSH
62850: LD_VAR 0 12
62854: PPUSH
62855: CALL_OW 488
62859: NOT
62860: IFFALSE 62864
// continue ;
62862: GO 62842
// if MineAtPos ( _x , _y ) then
62864: LD_VAR 0 11
62868: PPUSH
62869: LD_VAR 0 12
62873: PPUSH
62874: CALL_OW 458
62878: IFFALSE 62899
// ViewMineAtPos ( _x , _y , side ) ;
62880: LD_VAR 0 11
62884: PPUSH
62885: LD_VAR 0 12
62889: PPUSH
62890: LD_VAR 0 3
62894: PPUSH
62895: CALL_OW 457
// end ;
62899: GO 62842
62901: POP
62902: POP
62903: GO 62822
62905: POP
62906: POP
// end ;
62907: LD_VAR 0 2
62911: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
62912: LD_INT 0
62914: PPUSH
62915: PPUSH
62916: PPUSH
62917: PPUSH
62918: PPUSH
62919: PPUSH
62920: PPUSH
// if not units then
62921: LD_VAR 0 1
62925: NOT
62926: IFFALSE 62930
// exit ;
62928: GO 63394
// scaners := [ ] ;
62930: LD_ADDR_VAR 0 6
62934: PUSH
62935: EMPTY
62936: ST_TO_ADDR
// for i in units do
62937: LD_ADDR_VAR 0 3
62941: PUSH
62942: LD_VAR 0 1
62946: PUSH
62947: FOR_IN
62948: IFFALSE 63105
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
62950: LD_VAR 0 3
62954: PPUSH
62955: CALL_OW 264
62959: PUSH
62960: LD_INT 11
62962: NONEQUAL
62963: IFTRUE 62977
62965: PUSH
62966: LD_VAR 0 3
62970: PPUSH
62971: CALL_OW 302
62975: NOT
62976: OR
62977: IFTRUE 62994
62979: PUSH
62980: LD_VAR 0 3
62984: PPUSH
62985: CALL_OW 110
62989: PUSH
62990: LD_INT 502
62992: EQUAL
62993: OR
62994: IFFALSE 62998
// continue ;
62996: GO 62947
// ComStop ( i ) ;
62998: LD_VAR 0 3
63002: PPUSH
63003: CALL_OW 141
// x := GetX ( i ) ;
63007: LD_ADDR_VAR 0 4
63011: PUSH
63012: LD_VAR 0 3
63016: PPUSH
63017: CALL_OW 250
63021: ST_TO_ADDR
// y := GetY ( i ) ;
63022: LD_ADDR_VAR 0 5
63026: PUSH
63027: LD_VAR 0 3
63031: PPUSH
63032: CALL_OW 251
63036: ST_TO_ADDR
// if GetSide ( i ) = your_side then
63037: LD_VAR 0 3
63041: PPUSH
63042: CALL_OW 255
63046: PUSH
63047: LD_OWVAR 2
63051: EQUAL
63052: IFFALSE 63071
// PlaySoundXY ( x , y , mineDetector ) ;
63054: LD_VAR 0 4
63058: PPUSH
63059: LD_VAR 0 5
63063: PPUSH
63064: LD_STRING mineDetector
63066: PPUSH
63067: CALL_OW 366
// scaners := Join ( scaners , i ) ;
63071: LD_ADDR_VAR 0 6
63075: PUSH
63076: LD_VAR 0 6
63080: PPUSH
63081: LD_VAR 0 3
63085: PPUSH
63086: CALL 41218 0 2
63090: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
63091: LD_VAR 0 3
63095: PPUSH
63096: LD_INT 502
63098: PPUSH
63099: CALL_OW 109
// end ;
63103: GO 62947
63105: POP
63106: POP
// if not scaners then
63107: LD_VAR 0 6
63111: NOT
63112: IFFALSE 63116
// exit ;
63114: GO 63394
// wait ( 3 ) ;
63116: LD_INT 3
63118: PPUSH
63119: CALL_OW 67
// timer := 6 ;
63123: LD_ADDR_VAR 0 7
63127: PUSH
63128: LD_INT 6
63130: ST_TO_ADDR
// repeat for i in scaners do
63131: LD_ADDR_VAR 0 3
63135: PUSH
63136: LD_VAR 0 6
63140: PUSH
63141: FOR_IN
63142: IFFALSE 63292
// begin side := GetSide ( i ) ;
63144: LD_ADDR_VAR 0 8
63148: PUSH
63149: LD_VAR 0 3
63153: PPUSH
63154: CALL_OW 255
63158: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
63159: LD_VAR 0 3
63163: PPUSH
63164: CALL_OW 302
63168: NOT
63169: IFTRUE 63182
63171: PUSH
63172: LD_VAR 0 3
63176: PPUSH
63177: CALL_OW 314
63181: OR
63182: IFTRUE 63213
63184: PUSH
63185: LD_VAR 0 3
63189: PPUSH
63190: CALL_OW 263
63194: PUSH
63195: LD_INT 1
63197: EQUAL
63198: IFFALSE 63212
63200: PUSH
63201: LD_VAR 0 3
63205: PPUSH
63206: CALL_OW 311
63210: NOT
63211: AND
63212: OR
63213: IFFALSE 63257
// begin SetUnitDisplayNumber ( i , 0 ) ;
63215: LD_VAR 0 3
63219: PPUSH
63220: LD_INT 0
63222: PPUSH
63223: CALL_OW 505
// SetTag ( i , 0 ) ;
63227: LD_VAR 0 3
63231: PPUSH
63232: LD_INT 0
63234: PPUSH
63235: CALL_OW 109
// scaners := scaners diff i ;
63239: LD_ADDR_VAR 0 6
63243: PUSH
63244: LD_VAR 0 6
63248: PUSH
63249: LD_VAR 0 3
63253: DIFF
63254: ST_TO_ADDR
// continue ;
63255: GO 63141
// end ; if side in [ your_side , 9 ] then
63257: LD_VAR 0 8
63261: PUSH
63262: LD_OWVAR 2
63266: PUSH
63267: LD_INT 9
63269: PUSH
63270: EMPTY
63271: LIST
63272: LIST
63273: IN
63274: IFFALSE 63290
// SetUnitDisplayNumber ( i , timer ) ;
63276: LD_VAR 0 3
63280: PPUSH
63281: LD_VAR 0 7
63285: PPUSH
63286: CALL_OW 505
// end ;
63290: GO 63141
63292: POP
63293: POP
// if not scaners then
63294: LD_VAR 0 6
63298: NOT
63299: IFFALSE 63303
// exit ;
63301: GO 63394
// timer := Dec ( timer ) ;
63303: LD_ADDR_VAR 0 7
63307: PUSH
63308: LD_VAR 0 7
63312: PPUSH
63313: CALL 42613 0 1
63317: ST_TO_ADDR
// wait ( 0 0$1 ) ;
63318: LD_INT 35
63320: PPUSH
63321: CALL_OW 67
// until timer = 0 ;
63325: LD_VAR 0 7
63329: PUSH
63330: LD_INT 0
63332: EQUAL
63333: IFFALSE 63131
// if not scaners then
63335: LD_VAR 0 6
63339: NOT
63340: IFFALSE 63344
// exit ;
63342: GO 63394
// for i in scaners do
63344: LD_ADDR_VAR 0 3
63348: PUSH
63349: LD_VAR 0 6
63353: PUSH
63354: FOR_IN
63355: IFFALSE 63392
// begin SetUnitDisplayNumber ( i , 0 ) ;
63357: LD_VAR 0 3
63361: PPUSH
63362: LD_INT 0
63364: PPUSH
63365: CALL_OW 505
// SetTag ( i , 0 ) ;
63369: LD_VAR 0 3
63373: PPUSH
63374: LD_INT 0
63376: PPUSH
63377: CALL_OW 109
// RevealDetectorMine ( i ) ;
63381: LD_VAR 0 3
63385: PPUSH
63386: CALL 62614 0 1
// end ;
63390: GO 63354
63392: POP
63393: POP
// end ;
63394: LD_VAR 0 2
63398: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
63399: LD_INT 0
63401: PPUSH
// if p1 = mine_detector_mode then
63402: LD_VAR 0 2
63406: PUSH
63407: LD_INT 103
63409: EQUAL
63410: IFFALSE 63421
// DetectMine ( units ) ;
63412: LD_VAR 0 1
63416: PPUSH
63417: CALL 62912 0 1
// end ; end_of_file
63421: LD_VAR 0 7
63425: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
63426: PPOPN 6
63428: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
63429: LD_INT 0
63431: PPUSH
// begin if not units then
63432: LD_VAR 0 1
63436: NOT
63437: IFFALSE 63441
// exit ;
63439: GO 63475
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
63441: LD_VAR 0 1
63445: PPUSH
63446: LD_VAR 0 2
63450: PPUSH
63451: LD_VAR 0 3
63455: PPUSH
63456: LD_VAR 0 4
63460: PPUSH
63461: LD_VAR 0 5
63465: PPUSH
63466: LD_VAR 0 6
63470: PPUSH
63471: CALL 63399 0 6
// end ;
63475: PPOPN 7
63477: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
63478: LD_EXP 3
63482: PUSH
63483: LD_INT 4
63485: EQUAL
63486: IFFALSE 63522
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
63488: LD_STRING setGameDifficulty(
63490: PUSH
63491: LD_OWVAR 67
63495: STR
63496: PUSH
63497: LD_STRING )
63499: STR
63500: PPUSH
63501: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
63505: LD_STRING displayDifficulty(
63507: PUSH
63508: LD_OWVAR 67
63512: STR
63513: PUSH
63514: LD_STRING )
63516: STR
63517: PPUSH
63518: CALL_OW 559
// end ; SOS_MapStart ( ) ;
63522: CALL 63551 0 0
// end ; end_of_file
63526: PPOPN 1
63528: END
// every 0 0$1 do
63529: GO 63531
63531: DISABLE
// begin enable ;
63532: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
63533: LD_STRING updateTimer(
63535: PUSH
63536: LD_OWVAR 1
63540: STR
63541: PUSH
63542: LD_STRING );
63544: STR
63545: PPUSH
63546: CALL_OW 559
// end ;
63550: END
// export function SOS_MapStart ( ) ; begin
63551: LD_INT 0
63553: PPUSH
// UpdateFactoryWaypoints ( ) ;
63554: CALL 64492 0 0
// UpdateWarehouseGatheringPoints ( ) ;
63558: CALL 64744 0 0
// ParseMultiDataToLua ( ) ;
63562: CALL 64891 0 0
// ToLua ( LFC_UNITS_CUSTOM_ICON = {}; ) ;
63566: LD_STRING LFC_UNITS_CUSTOM_ICON = {};
63568: PPUSH
63569: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
63573: LD_STRING setSpecLogoNumber(
63575: PUSH
63576: LD_INT 2
63578: STR
63579: PUSH
63580: LD_STRING ,
63582: STR
63583: PUSH
63584: LD_INT 1
63586: STR
63587: PUSH
63588: LD_STRING )
63590: STR
63591: PPUSH
63592: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
63596: LD_STRING setSpecLogoNumber(
63598: PUSH
63599: LD_INT 3
63601: STR
63602: PUSH
63603: LD_STRING ,
63605: STR
63606: PUSH
63607: LD_INT 2
63609: STR
63610: PUSH
63611: LD_STRING )
63613: STR
63614: PPUSH
63615: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
63619: LD_STRING setSpecLogoNumber(
63621: PUSH
63622: LD_INT 4
63624: STR
63625: PUSH
63626: LD_STRING ,
63628: STR
63629: PUSH
63630: LD_INT 3
63632: STR
63633: PUSH
63634: LD_STRING )
63636: STR
63637: PPUSH
63638: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
63642: LD_STRING setSpecLogoNumber(
63644: PUSH
63645: LD_INT 5
63647: STR
63648: PUSH
63649: LD_STRING ,
63651: STR
63652: PUSH
63653: LD_INT 4
63655: STR
63656: PUSH
63657: LD_STRING )
63659: STR
63660: PPUSH
63661: CALL_OW 559
// end ;
63665: LD_VAR 0 1
63669: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
63670: LD_INT 0
63672: PPUSH
63673: PPUSH
63674: PPUSH
63675: PPUSH
63676: PPUSH
63677: PPUSH
63678: PPUSH
63679: PPUSH
63680: PPUSH
// for i := 1 to 8 do
63681: LD_ADDR_VAR 0 2
63685: PUSH
63686: DOUBLE
63687: LD_INT 1
63689: DEC
63690: ST_TO_ADDR
63691: LD_INT 8
63693: PUSH
63694: FOR_TO
63695: IFFALSE 64080
// begin if mpSidePositions [ i ] then
63697: LD_EXP 7
63701: PUSH
63702: LD_VAR 0 2
63706: ARRAY
63707: IFFALSE 64078
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
63709: LD_ADDR_VAR 0 7
63713: PUSH
63714: LD_INT 22
63716: PUSH
63717: LD_VAR 0 2
63721: PUSH
63722: EMPTY
63723: LIST
63724: LIST
63725: PUSH
63726: LD_INT 21
63728: PUSH
63729: LD_INT 1
63731: PUSH
63732: EMPTY
63733: LIST
63734: LIST
63735: PUSH
63736: EMPTY
63737: LIST
63738: LIST
63739: PPUSH
63740: CALL_OW 69
63744: PPUSH
63745: CALL 5242 0 1
63749: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
63750: LD_ADDR_VAR 0 9
63754: PUSH
63755: LD_INT 22
63757: PUSH
63758: LD_VAR 0 2
63762: PUSH
63763: EMPTY
63764: LIST
63765: LIST
63766: PUSH
63767: LD_INT 2
63769: PUSH
63770: LD_INT 30
63772: PUSH
63773: LD_INT 0
63775: PUSH
63776: EMPTY
63777: LIST
63778: LIST
63779: PUSH
63780: LD_INT 30
63782: PUSH
63783: LD_INT 1
63785: PUSH
63786: EMPTY
63787: LIST
63788: LIST
63789: PUSH
63790: EMPTY
63791: LIST
63792: LIST
63793: LIST
63794: PUSH
63795: EMPTY
63796: LIST
63797: LIST
63798: PPUSH
63799: CALL_OW 69
63803: ST_TO_ADDR
// crates := 0 ;
63804: LD_ADDR_VAR 0 4
63808: PUSH
63809: LD_INT 0
63811: ST_TO_ADDR
// oil := 0 ;
63812: LD_ADDR_VAR 0 5
63816: PUSH
63817: LD_INT 0
63819: ST_TO_ADDR
// sib := 0 ;
63820: LD_ADDR_VAR 0 6
63824: PUSH
63825: LD_INT 0
63827: ST_TO_ADDR
// if bases then
63828: LD_VAR 0 9
63832: IFFALSE 63938
// begin for j in bases do
63834: LD_ADDR_VAR 0 3
63838: PUSH
63839: LD_VAR 0 9
63843: PUSH
63844: FOR_IN
63845: IFFALSE 63936
// begin base := GetBase ( j ) ;
63847: LD_ADDR_VAR 0 8
63851: PUSH
63852: LD_VAR 0 3
63856: PPUSH
63857: CALL_OW 274
63861: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
63862: LD_ADDR_VAR 0 4
63866: PUSH
63867: LD_VAR 0 4
63871: PUSH
63872: LD_VAR 0 8
63876: PPUSH
63877: LD_INT 1
63879: PPUSH
63880: CALL_OW 275
63884: PLUS
63885: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
63886: LD_ADDR_VAR 0 5
63890: PUSH
63891: LD_VAR 0 5
63895: PUSH
63896: LD_VAR 0 8
63900: PPUSH
63901: LD_INT 2
63903: PPUSH
63904: CALL_OW 275
63908: PLUS
63909: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
63910: LD_ADDR_VAR 0 6
63914: PUSH
63915: LD_VAR 0 6
63919: PUSH
63920: LD_VAR 0 8
63924: PPUSH
63925: LD_INT 3
63927: PPUSH
63928: CALL_OW 275
63932: PLUS
63933: ST_TO_ADDR
// end ;
63934: GO 63844
63936: POP
63937: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
63938: LD_STRING setSpecText(
63940: PUSH
63941: LD_VAR 0 2
63945: STR
63946: PUSH
63947: LD_STRING ,
63949: STR
63950: PUSH
63951: LD_INT 2
63953: STR
63954: PUSH
63955: LD_STRING ,
63957: STR
63958: PUSH
63959: LD_VAR 0 4
63963: STR
63964: PUSH
63965: LD_STRING )
63967: STR
63968: PPUSH
63969: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
63973: LD_STRING setSpecText(
63975: PUSH
63976: LD_VAR 0 2
63980: STR
63981: PUSH
63982: LD_STRING ,
63984: STR
63985: PUSH
63986: LD_INT 3
63988: STR
63989: PUSH
63990: LD_STRING ,
63992: STR
63993: PUSH
63994: LD_VAR 0 5
63998: STR
63999: PUSH
64000: LD_STRING )
64002: STR
64003: PPUSH
64004: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
64008: LD_STRING setSpecText(
64010: PUSH
64011: LD_VAR 0 2
64015: STR
64016: PUSH
64017: LD_STRING ,
64019: STR
64020: PUSH
64021: LD_INT 4
64023: STR
64024: PUSH
64025: LD_STRING ,
64027: STR
64028: PUSH
64029: LD_VAR 0 6
64033: STR
64034: PUSH
64035: LD_STRING )
64037: STR
64038: PPUSH
64039: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
64043: LD_STRING setSpecText(
64045: PUSH
64046: LD_VAR 0 2
64050: STR
64051: PUSH
64052: LD_STRING ,
64054: STR
64055: PUSH
64056: LD_INT 5
64058: STR
64059: PUSH
64060: LD_STRING ,
64062: STR
64063: PUSH
64064: LD_VAR 0 7
64068: STR
64069: PUSH
64070: LD_STRING )
64072: STR
64073: PPUSH
64074: CALL_OW 559
// end ; end ;
64078: GO 63694
64080: POP
64081: POP
// end ;
64082: LD_VAR 0 1
64086: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
64087: LD_INT 2
64089: PUSH
64090: LD_INT 30
64092: PUSH
64093: LD_INT 0
64095: PUSH
64096: EMPTY
64097: LIST
64098: LIST
64099: PUSH
64100: LD_INT 30
64102: PUSH
64103: LD_INT 1
64105: PUSH
64106: EMPTY
64107: LIST
64108: LIST
64109: PUSH
64110: EMPTY
64111: LIST
64112: LIST
64113: LIST
64114: PPUSH
64115: CALL_OW 69
64119: IFFALSE 64129
64121: GO 64123
64123: DISABLE
// begin enable ;
64124: ENABLE
// UpdateSpectatorBar ;
64125: CALL 63670 0 0
// end ;
64129: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
64130: LD_INT 0
64132: PPUSH
// end ;
64133: LD_VAR 0 12
64137: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
64138: LD_INT 0
64140: PPUSH
64141: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
64142: LD_VAR 0 1
64146: NOT
64147: IFTRUE 64166
64149: PUSH
64150: LD_VAR 0 2
64154: PPUSH
64155: LD_VAR 0 3
64159: PPUSH
64160: CALL_OW 488
64164: NOT
64165: OR
64166: IFTRUE 64201
64168: PUSH
64169: LD_VAR 0 1
64173: PPUSH
64174: CALL_OW 266
64178: PUSH
64179: LD_INT 3
64181: NONEQUAL
64182: IFFALSE 64200
64184: PUSH
64185: LD_VAR 0 1
64189: PPUSH
64190: CALL_OW 247
64194: PUSH
64195: LD_INT 1
64197: EQUAL
64198: NOT
64199: AND
64200: OR
64201: IFFALSE 64205
// exit ;
64203: GO 64487
// if GetType ( factory ) = unit_human then
64205: LD_VAR 0 1
64209: PPUSH
64210: CALL_OW 247
64214: PUSH
64215: LD_INT 1
64217: EQUAL
64218: IFFALSE 64235
// factory := IsInUnit ( factory ) ;
64220: LD_ADDR_VAR 0 1
64224: PUSH
64225: LD_VAR 0 1
64229: PPUSH
64230: CALL_OW 310
64234: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
64235: LD_VAR 0 1
64239: PPUSH
64240: CALL_OW 266
64244: PUSH
64245: LD_INT 3
64247: NONEQUAL
64248: IFFALSE 64252
// exit ;
64250: GO 64487
// for i := 1 to Count ( factoryWaypoints ) do
64252: LD_ADDR_VAR 0 5
64256: PUSH
64257: DOUBLE
64258: LD_INT 1
64260: DEC
64261: ST_TO_ADDR
64262: LD_EXP 61
64266: PPUSH
64267: CALL 5242 0 1
64271: PUSH
64272: FOR_TO
64273: IFFALSE 64435
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
64275: LD_VAR 0 2
64279: PPUSH
64280: LD_VAR 0 3
64284: PPUSH
64285: CALL_OW 428
64289: PUSH
64290: LD_EXP 61
64294: PUSH
64295: LD_VAR 0 5
64299: ARRAY
64300: PUSH
64301: LD_INT 2
64303: ARRAY
64304: EQUAL
64305: IFFALSE 64337
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
64307: LD_ADDR_EXP 61
64311: PUSH
64312: LD_EXP 61
64316: PPUSH
64317: LD_VAR 0 5
64321: PPUSH
64322: CALL_OW 3
64326: ST_TO_ADDR
// UpdateFactoryWaypoints ;
64327: CALL 64492 0 0
// exit ;
64331: POP
64332: POP
64333: GO 64487
// end else
64335: GO 64433
// if factory = factoryWaypoints [ i ] [ 2 ] then
64337: LD_VAR 0 1
64341: PUSH
64342: LD_EXP 61
64346: PUSH
64347: LD_VAR 0 5
64351: ARRAY
64352: PUSH
64353: LD_INT 2
64355: ARRAY
64356: EQUAL
64357: IFFALSE 64433
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
64359: LD_ADDR_EXP 61
64363: PUSH
64364: LD_EXP 61
64368: PPUSH
64369: LD_VAR 0 5
64373: PPUSH
64374: CALL_OW 3
64378: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
64379: LD_ADDR_EXP 61
64383: PUSH
64384: LD_EXP 61
64388: PPUSH
64389: LD_VAR 0 1
64393: PPUSH
64394: CALL_OW 255
64398: PUSH
64399: LD_VAR 0 1
64403: PUSH
64404: LD_VAR 0 2
64408: PUSH
64409: LD_VAR 0 3
64413: PUSH
64414: EMPTY
64415: LIST
64416: LIST
64417: LIST
64418: LIST
64419: PPUSH
64420: CALL 41218 0 2
64424: ST_TO_ADDR
// UpdateFactoryWaypoints ;
64425: CALL 64492 0 0
// exit ;
64429: POP
64430: POP
64431: GO 64487
// end ; end ;
64433: GO 64272
64435: POP
64436: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
64437: LD_ADDR_EXP 61
64441: PUSH
64442: LD_EXP 61
64446: PPUSH
64447: LD_VAR 0 1
64451: PPUSH
64452: CALL_OW 255
64456: PUSH
64457: LD_VAR 0 1
64461: PUSH
64462: LD_VAR 0 2
64466: PUSH
64467: LD_VAR 0 3
64471: PUSH
64472: EMPTY
64473: LIST
64474: LIST
64475: LIST
64476: LIST
64477: PPUSH
64478: CALL 41218 0 2
64482: ST_TO_ADDR
// UpdateFactoryWaypoints ;
64483: CALL 64492 0 0
// end ;
64487: LD_VAR 0 4
64491: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
64492: LD_INT 0
64494: PPUSH
64495: PPUSH
64496: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
64497: LD_STRING resetFactoryWaypoint();
64499: PPUSH
64500: CALL_OW 559
// if factoryWaypoints then
64504: LD_EXP 61
64508: IFFALSE 64629
// begin list := factoryWaypoints ;
64510: LD_ADDR_VAR 0 3
64514: PUSH
64515: LD_EXP 61
64519: ST_TO_ADDR
// for i := 1 to list do
64520: LD_ADDR_VAR 0 2
64524: PUSH
64525: DOUBLE
64526: LD_INT 1
64528: DEC
64529: ST_TO_ADDR
64530: LD_VAR 0 3
64534: PUSH
64535: FOR_TO
64536: IFFALSE 64627
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
64538: LD_STRING setFactoryWaypointXY(
64540: PUSH
64541: LD_VAR 0 3
64545: PUSH
64546: LD_VAR 0 2
64550: ARRAY
64551: PUSH
64552: LD_INT 1
64554: ARRAY
64555: STR
64556: PUSH
64557: LD_STRING ,
64559: STR
64560: PUSH
64561: LD_VAR 0 3
64565: PUSH
64566: LD_VAR 0 2
64570: ARRAY
64571: PUSH
64572: LD_INT 2
64574: ARRAY
64575: STR
64576: PUSH
64577: LD_STRING ,
64579: STR
64580: PUSH
64581: LD_VAR 0 3
64585: PUSH
64586: LD_VAR 0 2
64590: ARRAY
64591: PUSH
64592: LD_INT 3
64594: ARRAY
64595: STR
64596: PUSH
64597: LD_STRING ,
64599: STR
64600: PUSH
64601: LD_VAR 0 3
64605: PUSH
64606: LD_VAR 0 2
64610: ARRAY
64611: PUSH
64612: LD_INT 4
64614: ARRAY
64615: STR
64616: PUSH
64617: LD_STRING )
64619: STR
64620: PPUSH
64621: CALL_OW 559
64625: GO 64535
64627: POP
64628: POP
// end ; end ;
64629: LD_VAR 0 1
64633: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
64634: LD_INT 0
64636: PPUSH
// if HexInfo ( x , y ) = warehouse then
64637: LD_VAR 0 2
64641: PPUSH
64642: LD_VAR 0 3
64646: PPUSH
64647: CALL_OW 428
64651: PUSH
64652: LD_VAR 0 1
64656: EQUAL
64657: IFFALSE 64684
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
64659: LD_ADDR_EXP 63
64663: PUSH
64664: LD_EXP 63
64668: PPUSH
64669: LD_VAR 0 1
64673: PPUSH
64674: LD_INT 0
64676: PPUSH
64677: CALL_OW 1
64681: ST_TO_ADDR
64682: GO 64735
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
64684: LD_ADDR_EXP 63
64688: PUSH
64689: LD_EXP 63
64693: PPUSH
64694: LD_VAR 0 1
64698: PPUSH
64699: LD_VAR 0 1
64703: PPUSH
64704: CALL_OW 255
64708: PUSH
64709: LD_VAR 0 1
64713: PUSH
64714: LD_VAR 0 2
64718: PUSH
64719: LD_VAR 0 3
64723: PUSH
64724: EMPTY
64725: LIST
64726: LIST
64727: LIST
64728: LIST
64729: PPUSH
64730: CALL_OW 1
64734: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
64735: CALL 64744 0 0
// end ;
64739: LD_VAR 0 4
64743: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
64744: LD_INT 0
64746: PPUSH
64747: PPUSH
64748: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
64749: LD_STRING resetWarehouseGatheringPoints();
64751: PPUSH
64752: CALL_OW 559
// if warehouseGatheringPoints then
64756: LD_EXP 63
64760: IFFALSE 64886
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
64762: LD_ADDR_VAR 0 3
64766: PUSH
64767: LD_EXP 63
64771: PPUSH
64772: CALL 45152 0 1
64776: ST_TO_ADDR
// for i := 1 to list do
64777: LD_ADDR_VAR 0 2
64781: PUSH
64782: DOUBLE
64783: LD_INT 1
64785: DEC
64786: ST_TO_ADDR
64787: LD_VAR 0 3
64791: PUSH
64792: FOR_TO
64793: IFFALSE 64884
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
64795: LD_STRING setWarehouseGatheringPointXY(
64797: PUSH
64798: LD_VAR 0 3
64802: PUSH
64803: LD_VAR 0 2
64807: ARRAY
64808: PUSH
64809: LD_INT 1
64811: ARRAY
64812: STR
64813: PUSH
64814: LD_STRING ,
64816: STR
64817: PUSH
64818: LD_VAR 0 3
64822: PUSH
64823: LD_VAR 0 2
64827: ARRAY
64828: PUSH
64829: LD_INT 2
64831: ARRAY
64832: STR
64833: PUSH
64834: LD_STRING ,
64836: STR
64837: PUSH
64838: LD_VAR 0 3
64842: PUSH
64843: LD_VAR 0 2
64847: ARRAY
64848: PUSH
64849: LD_INT 3
64851: ARRAY
64852: STR
64853: PUSH
64854: LD_STRING ,
64856: STR
64857: PUSH
64858: LD_VAR 0 3
64862: PUSH
64863: LD_VAR 0 2
64867: ARRAY
64868: PUSH
64869: LD_INT 4
64871: ARRAY
64872: STR
64873: PUSH
64874: LD_STRING )
64876: STR
64877: PPUSH
64878: CALL_OW 559
64882: GO 64792
64884: POP
64885: POP
// end ; end ;
64886: LD_VAR 0 1
64890: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
64891: LD_INT 0
64893: PPUSH
64894: PPUSH
// if not mpSidePositions then
64895: LD_EXP 7
64899: NOT
64900: IFFALSE 64904
// exit ;
64902: GO 64975
// result :=  ;
64904: LD_ADDR_VAR 0 1
64908: PUSH
64909: LD_STRING 
64911: ST_TO_ADDR
// for i := 1 to 8 do
64912: LD_ADDR_VAR 0 2
64916: PUSH
64917: DOUBLE
64918: LD_INT 1
64920: DEC
64921: ST_TO_ADDR
64922: LD_INT 8
64924: PUSH
64925: FOR_TO
64926: IFFALSE 64956
// begin result := result & mpSidePositions [ i ] & ; ;
64928: LD_ADDR_VAR 0 1
64932: PUSH
64933: LD_VAR 0 1
64937: PUSH
64938: LD_EXP 7
64942: PUSH
64943: LD_VAR 0 2
64947: ARRAY
64948: STR
64949: PUSH
64950: LD_STRING ;
64952: STR
64953: ST_TO_ADDR
// end ;
64954: GO 64925
64956: POP
64957: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
64958: LD_STRING setMultiplayerRealPosition("
64960: PUSH
64961: LD_VAR 0 1
64965: STR
64966: PUSH
64967: LD_STRING ");
64969: STR
64970: PPUSH
64971: CALL_OW 559
// end ; end_of_file
64975: LD_VAR 0 1
64979: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvivalHardcore do var i ;
64980: LD_EXP 39
64984: IFFALSE 65027
64986: GO 64988
64988: DISABLE
64989: LD_INT 0
64991: PPUSH
// begin for i := 1 to 8 do
64992: LD_ADDR_VAR 0 1
64996: PUSH
64997: DOUBLE
64998: LD_INT 1
65000: DEC
65001: ST_TO_ADDR
65002: LD_INT 8
65004: PUSH
65005: FOR_TO
65006: IFFALSE 65025
// SetRestrict ( b_depot , i , state_disabled ) ;
65008: LD_INT 0
65010: PPUSH
65011: LD_VAR 0 1
65015: PPUSH
65016: LD_INT 0
65018: PPUSH
65019: CALL_OW 324
65023: GO 65005
65025: POP
65026: POP
// end ;
65027: PPOPN 1
65029: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvivalHardcore do var i , canWin ;
65030: LD_EXP 39
65034: IFFALSE 65042
65036: PUSH
65037: CALL 65252 0 0
65041: AND
65042: IFFALSE 65050
65044: PUSH
65045: LD_OWVAR 4
65049: AND
65050: IFFALSE 65249
65052: GO 65054
65054: DISABLE
65055: LD_INT 0
65057: PPUSH
65058: PPUSH
// begin canWin := false ;
65059: LD_ADDR_VAR 0 2
65063: PUSH
65064: LD_INT 0
65066: ST_TO_ADDR
// if not HasPower ( your_side ) then
65067: LD_OWVAR 2
65071: PPUSH
65072: CALL 65294 0 1
65076: NOT
65077: IFFALSE 65088
// begin Multiplayer_Loose_Message ;
65079: CALL_OW 521
// enable ( mpLose ) ;
65083: LD_INT 102
65085: ENABLE_MARKED
// end else
65086: GO 65249
// begin canWin := true ;
65088: LD_ADDR_VAR 0 2
65092: PUSH
65093: LD_INT 1
65095: ST_TO_ADDR
// for i := 1 to 8 do
65096: LD_ADDR_VAR 0 1
65100: PUSH
65101: DOUBLE
65102: LD_INT 1
65104: DEC
65105: ST_TO_ADDR
65106: LD_INT 8
65108: PUSH
65109: FOR_TO
65110: IFFALSE 65235
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
65112: LD_EXP 7
65116: PUSH
65117: LD_VAR 0 1
65121: ARRAY
65122: IFFALSE 65135
65124: PUSH
65125: LD_VAR 0 1
65129: PPUSH
65130: CALL_OW 108
65134: AND
65135: IFFALSE 65149
65137: PUSH
65138: LD_VAR 0 1
65142: PUSH
65143: LD_OWVAR 2
65147: NONEQUAL
65148: AND
65149: IFFALSE 65233
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
65151: LD_EXP 8
65155: PUSH
65156: LD_VAR 0 1
65160: ARRAY
65161: NOT
65162: IFTRUE 65210
65164: PUSH
65165: LD_EXP 8
65169: PUSH
65170: LD_VAR 0 1
65174: ARRAY
65175: PUSH
65176: LD_EXP 8
65180: PUSH
65181: LD_OWVAR 2
65185: ARRAY
65186: NONEQUAL
65187: IFFALSE 65209
65189: PUSH
65190: LD_OWVAR 2
65194: PPUSH
65195: LD_VAR 0 1
65199: PPUSH
65200: CALL_OW 81
65204: PUSH
65205: LD_INT 1
65207: NONEQUAL
65208: AND
65209: OR
65210: IFFALSE 65233
// if HasPower ( i ) then
65212: LD_VAR 0 1
65216: PPUSH
65217: CALL 65294 0 1
65221: IFFALSE 65233
// begin canWin := false ;
65223: LD_ADDR_VAR 0 2
65227: PUSH
65228: LD_INT 0
65230: ST_TO_ADDR
// break ;
65231: GO 65235
// end ;
65233: GO 65109
65235: POP
65236: POP
// if canWin then
65237: LD_VAR 0 2
65241: IFFALSE 65248
// enable ( mpWin ) else
65243: LD_INT 101
65245: ENABLE_MARKED
65246: GO 65249
// enable ;
65248: ENABLE
// end ; end ;
65249: PPOPN 2
65251: END
// function CanWinLoose ; begin
65252: LD_INT 0
65254: PPUSH
// result := true ;
65255: LD_ADDR_VAR 0 1
65259: PUSH
65260: LD_INT 1
65262: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
65263: CALL_OW 531
65267: IFFALSE 65279
65269: PUSH
65270: CALL_OW 519
65274: PUSH
65275: LD_INT 1
65277: GREATER
65278: AND
65279: IFFALSE 65289
// result := false ;
65281: LD_ADDR_VAR 0 1
65285: PUSH
65286: LD_INT 0
65288: ST_TO_ADDR
// end ;
65289: LD_VAR 0 1
65293: RET
// function HasPower ( i ) ; begin
65294: LD_INT 0
65296: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
65297: LD_INT 22
65299: PUSH
65300: LD_VAR 0 1
65304: PUSH
65305: EMPTY
65306: LIST
65307: LIST
65308: PUSH
65309: LD_INT 2
65311: PUSH
65312: LD_INT 30
65314: PUSH
65315: LD_INT 0
65317: PUSH
65318: EMPTY
65319: LIST
65320: LIST
65321: PUSH
65322: LD_INT 30
65324: PUSH
65325: LD_INT 1
65327: PUSH
65328: EMPTY
65329: LIST
65330: LIST
65331: PUSH
65332: EMPTY
65333: LIST
65334: LIST
65335: LIST
65336: PUSH
65337: EMPTY
65338: LIST
65339: LIST
65340: PPUSH
65341: CALL_OW 69
65345: NOT
65346: IFFALSE 65350
// exit ;
65348: GO 65415
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
65350: LD_ADDR_VAR 0 2
65354: PUSH
65355: LD_INT 22
65357: PUSH
65358: LD_VAR 0 1
65362: PUSH
65363: EMPTY
65364: LIST
65365: LIST
65366: PUSH
65367: LD_INT 2
65369: PUSH
65370: LD_INT 21
65372: PUSH
65373: LD_INT 1
65375: PUSH
65376: EMPTY
65377: LIST
65378: LIST
65379: PUSH
65380: LD_INT 33
65382: PUSH
65383: LD_INT 3
65385: PUSH
65386: EMPTY
65387: LIST
65388: LIST
65389: PUSH
65390: LD_INT 33
65392: PUSH
65393: LD_INT 5
65395: PUSH
65396: EMPTY
65397: LIST
65398: LIST
65399: PUSH
65400: EMPTY
65401: LIST
65402: LIST
65403: LIST
65404: LIST
65405: PUSH
65406: EMPTY
65407: LIST
65408: LIST
65409: PPUSH
65410: CALL_OW 69
65414: ST_TO_ADDR
// end ;
65415: LD_VAR 0 2
65419: RET
