// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 2604 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 3027 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 1 , 1 ] ;
  20: LD_ADDR_EXP 4
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 1
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ 0 , 1 , 2 , 4 ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 5
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: EMPTY
 123: LIST
 124: LIST
 125: PUSH
 126: LD_INT 9
 128: PUSH
 129: LD_INT 12
 131: PUSH
 132: LD_INT 15
 134: PUSH
 135: LD_INT 24
 137: PUSH
 138: EMPTY
 139: LIST
 140: LIST
 141: LIST
 142: LIST
 143: PUSH
 144: LD_INT 1
 146: PUSH
 147: LD_INT 3
 149: PUSH
 150: LD_INT 5
 152: PUSH
 153: LD_INT 7
 155: PUSH
 156: EMPTY
 157: LIST
 158: LIST
 159: LIST
 160: LIST
 161: PUSH
 162: LD_INT 0
 164: PUSH
 165: LD_INT 0
 167: PUSH
 168: LD_INT 0
 170: PUSH
 171: EMPTY
 172: LIST
 173: LIST
 174: LIST
 175: PUSH
 176: LD_INT 100
 178: PUSH
 179: LD_INT 30
 181: PUSH
 182: LD_INT 0
 184: PUSH
 185: EMPTY
 186: LIST
 187: LIST
 188: LIST
 189: PUSH
 190: LD_INT 200
 192: PUSH
 193: LD_INT 75
 195: PUSH
 196: LD_INT 10
 198: PUSH
 199: EMPTY
 200: LIST
 201: LIST
 202: LIST
 203: PUSH
 204: LD_INT 500
 206: PUSH
 207: LD_INT 150
 209: PUSH
 210: LD_INT 30
 212: PUSH
 213: EMPTY
 214: LIST
 215: LIST
 216: LIST
 217: PUSH
 218: EMPTY
 219: LIST
 220: LIST
 221: LIST
 222: LIST
 223: PUSH
 224: LD_INT 1
 226: PUSH
 227: LD_INT 2
 229: PUSH
 230: LD_INT 3
 232: PUSH
 233: LD_INT 4
 235: PUSH
 236: EMPTY
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: PUSH
 242: LD_INT 0
 244: PUSH
 245: LD_INT 1
 247: PUSH
 248: LD_INT 2
 250: PUSH
 251: EMPTY
 252: LIST
 253: LIST
 254: LIST
 255: PUSH
 256: LD_INT 0
 258: PUSH
 259: LD_INT 1
 261: PUSH
 262: LD_INT 2
 264: PUSH
 265: EMPTY
 266: LIST
 267: LIST
 268: LIST
 269: PUSH
 270: LD_INT 250
 272: PUSH
 273: LD_INT 350
 275: PUSH
 276: LD_INT 500
 278: PUSH
 279: LD_INT 1000
 281: PUSH
 282: LD_INT 2000
 284: PUSH
 285: EMPTY
 286: LIST
 287: LIST
 288: LIST
 289: LIST
 290: LIST
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: LD_INT 2
 297: PUSH
 298: EMPTY
 299: LIST
 300: LIST
 301: PUSH
 302: LD_INT 0
 304: PUSH
 305: LD_INT 10500
 307: PUSH
 308: LD_INT 21000
 310: PUSH
 311: LD_INT 31500
 313: PUSH
 314: LD_INT 42000
 316: PUSH
 317: LD_INT 63000
 319: PUSH
 320: EMPTY
 321: LIST
 322: LIST
 323: LIST
 324: LIST
 325: LIST
 326: LIST
 327: PUSH
 328: LD_INT 0
 330: PUSH
 331: LD_INT 1
 333: PUSH
 334: EMPTY
 335: LIST
 336: LIST
 337: PUSH
 338: LD_INT 1
 340: NEG
 341: PUSH
 342: LD_INT 350
 344: PUSH
 345: LD_INT 700
 347: PUSH
 348: LD_INT 1400
 350: PUSH
 351: LD_INT 0
 353: PUSH
 354: EMPTY
 355: LIST
 356: LIST
 357: LIST
 358: LIST
 359: LIST
 360: PUSH
 361: LD_INT 0
 363: PUSH
 364: LD_INT 1
 366: PUSH
 367: EMPTY
 368: LIST
 369: LIST
 370: PUSH
 371: LD_INT 0
 373: PUSH
 374: LD_INT 13650
 376: PUSH
 377: LD_INT 7350
 379: PUSH
 380: EMPTY
 381: LIST
 382: LIST
 383: LIST
 384: PUSH
 385: LD_INT 0
 387: PUSH
 388: LD_INT 2
 390: PUSH
 391: LD_INT 4
 393: PUSH
 394: LD_INT 6
 396: PUSH
 397: EMPTY
 398: LIST
 399: LIST
 400: LIST
 401: LIST
 402: PUSH
 403: EMPTY
 404: PUSH
 405: EMPTY
 406: PUSH
 407: LD_INT 0
 409: PUSH
 410: LD_INT 1
 412: PUSH
 413: LD_INT 31500
 415: PUSH
 416: LD_INT 52500
 418: PUSH
 419: LD_INT 63000
 421: PUSH
 422: LD_INT 94500
 424: PUSH
 425: LD_INT 126000
 427: PUSH
 428: LD_INT 189000
 430: PUSH
 431: LD_INT 210000
 433: PUSH
 434: LD_INT 252000
 436: PUSH
 437: LD_INT 378000
 439: PUSH
 440: EMPTY
 441: LIST
 442: LIST
 443: LIST
 444: LIST
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: PUSH
 453: EMPTY
 454: PUSH
 455: LD_INT 0
 457: PUSH
 458: LD_INT 1
 460: PUSH
 461: LD_INT 2
 463: PUSH
 464: LD_INT 4
 466: PUSH
 467: EMPTY
 468: LIST
 469: LIST
 470: LIST
 471: LIST
 472: PUSH
 473: LD_INT 0
 475: PUSH
 476: LD_INT 6300
 478: PUSH
 479: LD_INT 10500
 481: PUSH
 482: LD_INT 16800
 484: PUSH
 485: LD_INT 21000
 487: PUSH
 488: LD_INT 25200
 490: PUSH
 491: LD_INT 31500
 493: PUSH
 494: LD_INT 42000
 496: PUSH
 497: LD_INT 63000
 499: PUSH
 500: EMPTY
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: PUSH
 511: EMPTY
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: LIST
 522: LIST
 523: LIST
 524: LIST
 525: LIST
 526: LIST
 527: LIST
 528: LIST
 529: LIST
 530: LIST
 531: LIST
 532: LIST
 533: ST_TO_ADDR
// mpGameSettings := [ 1 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 0 , 0 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 3 3$0 ] ;
 534: LD_ADDR_EXP 6
 538: PUSH
 539: LD_INT 1
 541: PUSH
 542: LD_INT 15
 544: PUSH
 545: LD_INT 4
 547: PUSH
 548: LD_INT 100
 550: PUSH
 551: LD_INT 30
 553: PUSH
 554: LD_INT 0
 556: PUSH
 557: EMPTY
 558: LIST
 559: LIST
 560: LIST
 561: PUSH
 562: LD_INT 3
 564: PUSH
 565: LD_INT 1
 567: PUSH
 568: LD_INT 2
 570: PUSH
 571: LD_INT 250
 573: PUSH
 574: LD_INT 0
 576: PUSH
 577: LD_INT 0
 579: PUSH
 580: LD_INT 1
 582: PUSH
 583: LD_INT 700
 585: PUSH
 586: LD_INT 1
 588: PUSH
 589: LD_INT 700
 591: PUSH
 592: LD_INT 3
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 0
 600: PUSH
 601: LD_INT 31500
 603: PUSH
 604: LD_INT 0
 606: PUSH
 607: LD_INT 0
 609: PUSH
 610: LD_INT 6300
 612: PUSH
 613: EMPTY
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: LIST
 624: LIST
 625: LIST
 626: LIST
 627: LIST
 628: LIST
 629: LIST
 630: LIST
 631: LIST
 632: LIST
 633: LIST
 634: LIST
 635: ST_TO_ADDR
// mpGameType := GameTypeNormal ;
 636: LD_ADDR_EXP 3
 640: PUSH
 641: LD_INT 1
 643: ST_TO_ADDR
// your_side := 1 ;
 644: LD_ADDR_OWVAR 2
 648: PUSH
 649: LD_INT 1
 651: ST_TO_ADDR
// mpSidePositions := [ 1 , 2 , 3 , 4 , 0 , 0 , 0 , 0 ] ;
 652: LD_ADDR_EXP 7
 656: PUSH
 657: LD_INT 1
 659: PUSH
 660: LD_INT 2
 662: PUSH
 663: LD_INT 3
 665: PUSH
 666: LD_INT 4
 668: PUSH
 669: LD_INT 0
 671: PUSH
 672: LD_INT 0
 674: PUSH
 675: LD_INT 0
 677: PUSH
 678: LD_INT 0
 680: PUSH
 681: EMPTY
 682: LIST
 683: LIST
 684: LIST
 685: LIST
 686: LIST
 687: LIST
 688: LIST
 689: LIST
 690: ST_TO_ADDR
// mpSideTeams := [ 1 , 1 , 2 , 2 , 0 , 0 , 0 , 0 ] ;
 691: LD_ADDR_EXP 8
 695: PUSH
 696: LD_INT 1
 698: PUSH
 699: LD_INT 1
 701: PUSH
 702: LD_INT 2
 704: PUSH
 705: LD_INT 2
 707: PUSH
 708: LD_INT 0
 710: PUSH
 711: LD_INT 0
 713: PUSH
 714: LD_INT 0
 716: PUSH
 717: LD_INT 0
 719: PUSH
 720: EMPTY
 721: LIST
 722: LIST
 723: LIST
 724: LIST
 725: LIST
 726: LIST
 727: LIST
 728: LIST
 729: ST_TO_ADDR
// mpSideNations := [ 3 , 3 , 3 , 3 , 0 , 0 , 0 , 0 ] ;
 730: LD_ADDR_EXP 9
 734: PUSH
 735: LD_INT 3
 737: PUSH
 738: LD_INT 3
 740: PUSH
 741: LD_INT 3
 743: PUSH
 744: LD_INT 3
 746: PUSH
 747: LD_INT 0
 749: PUSH
 750: LD_INT 0
 752: PUSH
 753: LD_INT 0
 755: PUSH
 756: LD_INT 0
 758: PUSH
 759: EMPTY
 760: LIST
 761: LIST
 762: LIST
 763: LIST
 764: LIST
 765: LIST
 766: LIST
 767: LIST
 768: ST_TO_ADDR
// mpTeams := [ [ 1 , 2 ] , [ 3 , 4 ] ] ;
 769: LD_ADDR_EXP 10
 773: PUSH
 774: LD_INT 1
 776: PUSH
 777: LD_INT 2
 779: PUSH
 780: EMPTY
 781: LIST
 782: LIST
 783: PUSH
 784: LD_INT 3
 786: PUSH
 787: LD_INT 4
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: PUSH
 794: EMPTY
 795: LIST
 796: LIST
 797: ST_TO_ADDR
// mpTeamGame := true ;
 798: LD_ADDR_EXP 11
 802: PUSH
 803: LD_INT 1
 805: ST_TO_ADDR
// mpMapSize := [ 100 , 120 ] ;
 806: LD_ADDR_EXP 29
 810: PUSH
 811: LD_INT 100
 813: PUSH
 814: LD_INT 120
 816: PUSH
 817: EMPTY
 818: LIST
 819: LIST
 820: ST_TO_ADDR
// end ;
 821: LD_VAR 0 1
 825: RET
// export kingArea , kingCamArea ; export function GetMultiplayerMapData ( gameType ) ; var i , all , area , hasOil , hasSib , baseLevel , startPos ; begin
 826: LD_INT 0
 828: PPUSH
 829: PPUSH
 830: PPUSH
 831: PPUSH
 832: PPUSH
 833: PPUSH
 834: PPUSH
 835: PPUSH
// mpBuildUpAreas := [ BaseArea1 , BaseArea2 , BaseArea3 , BaseArea4 ] ;
 836: LD_ADDR_EXP 19
 840: PUSH
 841: LD_INT 5
 843: PUSH
 844: LD_INT 7
 846: PUSH
 847: LD_INT 6
 849: PUSH
 850: LD_INT 8
 852: PUSH
 853: EMPTY
 854: LIST
 855: LIST
 856: LIST
 857: LIST
 858: ST_TO_ADDR
// mpMarkedAreas := [ ] union mpBuildUpAreas ;
 859: LD_ADDR_EXP 18
 863: PUSH
 864: EMPTY
 865: PUSH
 866: LD_EXP 19
 870: UNION
 871: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 872: LD_VAR 0 1
 876: PUSH
 877: LD_INT 2
 879: EQUAL
 880: IFFALSE 892
// baseLevel := 1 else
 882: LD_ADDR_VAR 0 8
 886: PUSH
 887: LD_INT 1
 889: ST_TO_ADDR
 890: GO 906
// baseLevel := mpGameSettings [ 1 ] ;
 892: LD_ADDR_VAR 0 8
 896: PUSH
 897: LD_EXP 6
 901: PUSH
 902: LD_INT 1
 904: ARRAY
 905: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 906: LD_ADDR_EXP 24
 910: PUSH
 911: LD_EXP 6
 915: PUSH
 916: LD_INT 2
 918: ARRAY
 919: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 920: LD_ADDR_EXP 25
 924: PUSH
 925: LD_EXP 6
 929: PUSH
 930: LD_INT 3
 932: ARRAY
 933: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 934: LD_ADDR_EXP 15
 938: PUSH
 939: LD_EXP 6
 943: PUSH
 944: LD_INT 4
 946: ARRAY
 947: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 948: LD_ADDR_EXP 27
 952: PUSH
 953: LD_EXP 6
 957: PUSH
 958: LD_INT 5
 960: ARRAY
 961: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
 962: LD_ADDR_VAR 0 6
 966: PUSH
 967: LD_EXP 6
 971: PUSH
 972: LD_INT 6
 974: ARRAY
 975: PUSH
 976: LD_INT 0
 978: GREATER
 979: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
 980: LD_ADDR_VAR 0 7
 984: PUSH
 985: LD_EXP 6
 989: PUSH
 990: LD_INT 7
 992: ARRAY
 993: PUSH
 994: LD_INT 0
 996: GREATER
 997: ST_TO_ADDR
// mpKingArea := 0 ;
 998: LD_ADDR_EXP 34
1002: PUSH
1003: LD_INT 0
1005: ST_TO_ADDR
// mpPoints := 0 ;
1006: LD_ADDR_EXP 35
1010: PUSH
1011: LD_INT 0
1013: ST_TO_ADDR
// mpEmissions := 0 ;
1014: LD_ADDR_EXP 37
1018: PUSH
1019: LD_INT 0
1021: ST_TO_ADDR
// kingArea := 0 ;
1022: LD_ADDR_EXP 1
1026: PUSH
1027: LD_INT 0
1029: ST_TO_ADDR
// kingCamArea := 0 ;
1030: LD_ADDR_EXP 2
1034: PUSH
1035: LD_INT 0
1037: ST_TO_ADDR
// if mpGameSettings [ 9 ] then
1038: LD_EXP 6
1042: PUSH
1043: LD_INT 9
1045: ARRAY
1046: IFFALSE 1249
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] , [ us_heavy_tracked , engine_combustion , control_manual , us_bulldozer , nation_american ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] , [ us_heavy_tracked , engine_combustion , control_manual , us_bulldozer , nation_american ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ us_heavy_tracked , engine_combustion , control_manual , us_bulldozer , nation_american ] ] ] ;
1048: LD_ADDR_EXP 36
1052: PUSH
1053: LD_INT 1
1055: PUSH
1056: LD_INT 1
1058: PUSH
1059: LD_INT 1
1061: PUSH
1062: LD_INT 2
1064: PUSH
1065: EMPTY
1066: LIST
1067: LIST
1068: LIST
1069: LIST
1070: PUSH
1071: LD_INT 1
1073: PUSH
1074: LD_INT 1
1076: PUSH
1077: LD_INT 1
1079: PUSH
1080: LD_INT 3
1082: PUSH
1083: EMPTY
1084: LIST
1085: LIST
1086: LIST
1087: LIST
1088: PUSH
1089: LD_INT 4
1091: PUSH
1092: LD_INT 1
1094: PUSH
1095: LD_INT 1
1097: PUSH
1098: LD_INT 14
1100: PUSH
1101: LD_INT 1
1103: PUSH
1104: EMPTY
1105: LIST
1106: LIST
1107: LIST
1108: LIST
1109: LIST
1110: PUSH
1111: EMPTY
1112: LIST
1113: LIST
1114: LIST
1115: PUSH
1116: LD_INT 12
1118: PUSH
1119: LD_INT 1
1121: PUSH
1122: LD_INT 1
1124: PUSH
1125: LD_INT 24
1127: PUSH
1128: EMPTY
1129: LIST
1130: LIST
1131: LIST
1132: LIST
1133: PUSH
1134: LD_INT 12
1136: PUSH
1137: LD_INT 1
1139: PUSH
1140: LD_INT 1
1142: PUSH
1143: LD_INT 23
1145: PUSH
1146: EMPTY
1147: LIST
1148: LIST
1149: LIST
1150: LIST
1151: PUSH
1152: LD_INT 4
1154: PUSH
1155: LD_INT 1
1157: PUSH
1158: LD_INT 1
1160: PUSH
1161: LD_INT 14
1163: PUSH
1164: LD_INT 1
1166: PUSH
1167: EMPTY
1168: LIST
1169: LIST
1170: LIST
1171: LIST
1172: LIST
1173: PUSH
1174: EMPTY
1175: LIST
1176: LIST
1177: LIST
1178: PUSH
1179: LD_INT 21
1181: PUSH
1182: LD_INT 1
1184: PUSH
1185: LD_INT 1
1187: PUSH
1188: LD_INT 42
1190: PUSH
1191: EMPTY
1192: LIST
1193: LIST
1194: LIST
1195: LIST
1196: PUSH
1197: LD_INT 21
1199: PUSH
1200: LD_INT 1
1202: PUSH
1203: LD_INT 1
1205: PUSH
1206: LD_INT 42
1208: PUSH
1209: EMPTY
1210: LIST
1211: LIST
1212: LIST
1213: LIST
1214: PUSH
1215: LD_INT 4
1217: PUSH
1218: LD_INT 1
1220: PUSH
1221: LD_INT 1
1223: PUSH
1224: LD_INT 14
1226: PUSH
1227: LD_INT 1
1229: PUSH
1230: EMPTY
1231: LIST
1232: LIST
1233: LIST
1234: LIST
1235: LIST
1236: PUSH
1237: EMPTY
1238: LIST
1239: LIST
1240: LIST
1241: PUSH
1242: EMPTY
1243: LIST
1244: LIST
1245: LIST
1246: ST_TO_ADDR
// end else
1247: GO 1334
// begin mpVehicles := [ [ [ us_heavy_tracked , engine_combustion , control_manual , us_bulldozer , nation_american ] ] , [ [ us_heavy_tracked , engine_combustion , control_manual , us_bulldozer , nation_american ] ] , [ [ us_heavy_tracked , engine_combustion , control_manual , us_bulldozer , nation_american ] ] ] ;
1249: LD_ADDR_EXP 36
1253: PUSH
1254: LD_INT 4
1256: PUSH
1257: LD_INT 1
1259: PUSH
1260: LD_INT 1
1262: PUSH
1263: LD_INT 14
1265: PUSH
1266: LD_INT 1
1268: PUSH
1269: EMPTY
1270: LIST
1271: LIST
1272: LIST
1273: LIST
1274: LIST
1275: PUSH
1276: EMPTY
1277: LIST
1278: PUSH
1279: LD_INT 4
1281: PUSH
1282: LD_INT 1
1284: PUSH
1285: LD_INT 1
1287: PUSH
1288: LD_INT 14
1290: PUSH
1291: LD_INT 1
1293: PUSH
1294: EMPTY
1295: LIST
1296: LIST
1297: LIST
1298: LIST
1299: LIST
1300: PUSH
1301: EMPTY
1302: LIST
1303: PUSH
1304: LD_INT 4
1306: PUSH
1307: LD_INT 1
1309: PUSH
1310: LD_INT 1
1312: PUSH
1313: LD_INT 14
1315: PUSH
1316: LD_INT 1
1318: PUSH
1319: EMPTY
1320: LIST
1321: LIST
1322: LIST
1323: LIST
1324: LIST
1325: PUSH
1326: EMPTY
1327: LIST
1328: PUSH
1329: EMPTY
1330: LIST
1331: LIST
1332: LIST
1333: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1334: LD_ADDR_EXP 16
1338: PUSH
1339: LD_EXP 6
1343: PUSH
1344: LD_INT 11
1346: ARRAY
1347: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1348: LD_ADDR_EXP 22
1352: PUSH
1353: LD_EXP 6
1357: PUSH
1358: LD_INT 12
1360: ARRAY
1361: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1362: LD_ADDR_EXP 26
1366: PUSH
1367: LD_EXP 6
1371: PUSH
1372: LD_INT 13
1374: ARRAY
1375: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1376: LD_ADDR_EXP 33
1380: PUSH
1381: LD_EXP 6
1385: PUSH
1386: LD_INT 14
1388: ARRAY
1389: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1390: LD_ADDR_EXP 30
1394: PUSH
1395: LD_EXP 6
1399: PUSH
1400: LD_INT 15
1402: ARRAY
1403: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1404: LD_ADDR_EXP 28
1408: PUSH
1409: LD_EXP 6
1413: PUSH
1414: LD_INT 18
1416: ARRAY
1417: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1418: LD_ADDR_EXP 20
1422: PUSH
1423: LD_EXP 6
1427: PUSH
1428: LD_INT 21
1430: ARRAY
1431: ST_TO_ADDR
// mpApemansArea := [ ApeArea1 , ApeArea2 , ApeArea3 , ApeArea4 ] ;
1432: LD_ADDR_EXP 31
1436: PUSH
1437: LD_INT 10
1439: PUSH
1440: LD_INT 11
1442: PUSH
1443: LD_INT 12
1445: PUSH
1446: LD_INT 13
1448: PUSH
1449: EMPTY
1450: LIST
1451: LIST
1452: LIST
1453: LIST
1454: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( DepotArea1 , 2 ) , GetBuildingFromArea ( DepotArea2 , 0 ) , GetBuildingFromArea ( DepotArea3 , 3 ) , GetBuildingFromArea ( DepotArea4 , 5 ) ] ;
1455: LD_ADDR_VAR 0 9
1459: PUSH
1460: LD_INT 14
1462: PPUSH
1463: LD_INT 2
1465: PPUSH
1466: CALL 54059 0 2
1470: PUSH
1471: LD_INT 15
1473: PPUSH
1474: LD_INT 0
1476: PPUSH
1477: CALL 54059 0 2
1481: PUSH
1482: LD_INT 16
1484: PPUSH
1485: LD_INT 3
1487: PPUSH
1488: CALL 54059 0 2
1492: PUSH
1493: LD_INT 17
1495: PPUSH
1496: LD_INT 5
1498: PPUSH
1499: CALL 54059 0 2
1503: PUSH
1504: EMPTY
1505: LIST
1506: LIST
1507: LIST
1508: LIST
1509: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1510: LD_ADDR_VAR 0 3
1514: PUSH
1515: DOUBLE
1516: LD_INT 1
1518: DEC
1519: ST_TO_ADDR
1520: LD_VAR 0 9
1524: PPUSH
1525: CALL 13364 0 1
1529: PUSH
1530: FOR_TO
1531: IFFALSE 1635
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1533: LD_ADDR_EXP 21
1537: PUSH
1538: LD_EXP 21
1542: PPUSH
1543: LD_VAR 0 3
1547: PPUSH
1548: LD_VAR 0 9
1552: PUSH
1553: LD_VAR 0 3
1557: ARRAY
1558: PUSH
1559: LD_INT 1
1561: ARRAY
1562: PPUSH
1563: LD_VAR 0 9
1567: PUSH
1568: LD_VAR 0 3
1572: ARRAY
1573: PUSH
1574: LD_INT 3
1576: ARRAY
1577: PPUSH
1578: LD_INT 10
1580: PPUSH
1581: CALL_OW 272
1585: PUSH
1586: LD_VAR 0 9
1590: PUSH
1591: LD_VAR 0 3
1595: ARRAY
1596: PUSH
1597: LD_INT 2
1599: ARRAY
1600: PPUSH
1601: LD_VAR 0 9
1605: PUSH
1606: LD_VAR 0 3
1610: ARRAY
1611: PUSH
1612: LD_INT 3
1614: ARRAY
1615: PPUSH
1616: LD_INT 10
1618: PPUSH
1619: CALL_OW 273
1623: PUSH
1624: EMPTY
1625: LIST
1626: LIST
1627: PPUSH
1628: CALL_OW 1
1632: ST_TO_ADDR
1633: GO 1530
1635: POP
1636: POP
// if baseLevel >= 1 then
1637: LD_VAR 0 8
1641: PUSH
1642: LD_INT 1
1644: GREATEREQUAL
1645: IFFALSE 1657
// mpDepots := startPos ;
1647: LD_ADDR_EXP 14
1651: PUSH
1652: LD_VAR 0 9
1656: ST_TO_ADDR
// if hasOil then
1657: LD_VAR 0 6
1661: IFFALSE 1744
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1663: LD_ADDR_VAR 0 4
1667: PUSH
1668: LD_EXP 6
1672: PUSH
1673: LD_INT 6
1675: ARRAY
1676: PUSH
1677: LD_INT 2
1679: EQUAL
1680: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( OilArea1 , all ) , GetSourcesFromArea ( OilArea2 , all ) , GetSourcesFromArea ( OilArea3 , all ) , GetSourcesFromArea ( OilArea4 , all ) ] ;
1681: LD_ADDR_EXP 12
1685: PUSH
1686: LD_INT 18
1688: PPUSH
1689: LD_VAR 0 4
1693: PPUSH
1694: CALL 53892 0 2
1698: PUSH
1699: LD_INT 19
1701: PPUSH
1702: LD_VAR 0 4
1706: PPUSH
1707: CALL 53892 0 2
1711: PUSH
1712: LD_INT 20
1714: PPUSH
1715: LD_VAR 0 4
1719: PPUSH
1720: CALL 53892 0 2
1724: PUSH
1725: LD_INT 21
1727: PPUSH
1728: LD_VAR 0 4
1732: PPUSH
1733: CALL 53892 0 2
1737: PUSH
1738: EMPTY
1739: LIST
1740: LIST
1741: LIST
1742: LIST
1743: ST_TO_ADDR
// end ; if hasSib then
1744: LD_VAR 0 7
1748: IFFALSE 1831
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1750: LD_ADDR_VAR 0 4
1754: PUSH
1755: LD_EXP 6
1759: PUSH
1760: LD_INT 7
1762: ARRAY
1763: PUSH
1764: LD_INT 2
1766: EQUAL
1767: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( SibArea1 , all ) , GetSourcesFromArea ( SibArea2 , all ) , GetSourcesFromArea ( SibArea3 , all ) , GetSourcesFromArea ( SibArea4 , all ) ] ;
1768: LD_ADDR_EXP 13
1772: PUSH
1773: LD_INT 22
1775: PPUSH
1776: LD_VAR 0 4
1780: PPUSH
1781: CALL 53892 0 2
1785: PUSH
1786: LD_INT 23
1788: PPUSH
1789: LD_VAR 0 4
1793: PPUSH
1794: CALL 53892 0 2
1798: PUSH
1799: LD_INT 24
1801: PPUSH
1802: LD_VAR 0 4
1806: PPUSH
1807: CALL 53892 0 2
1811: PUSH
1812: LD_INT 25
1814: PPUSH
1815: LD_VAR 0 4
1819: PPUSH
1820: CALL 53892 0 2
1824: PUSH
1825: EMPTY
1826: LIST
1827: LIST
1828: LIST
1829: LIST
1830: ST_TO_ADDR
// end ; PlaceTreesToArea ( BigForestArea , [ 21 , 22 , 24 , 21 , 22 , 24 , 38 , 39 ] , rand ( 500 , 570 ) , 50 , 2 ) ;
1831: LD_INT 1
1833: PPUSH
1834: LD_INT 21
1836: PUSH
1837: LD_INT 22
1839: PUSH
1840: LD_INT 24
1842: PUSH
1843: LD_INT 21
1845: PUSH
1846: LD_INT 22
1848: PUSH
1849: LD_INT 24
1851: PUSH
1852: LD_INT 38
1854: PUSH
1855: LD_INT 39
1857: PUSH
1858: EMPTY
1859: LIST
1860: LIST
1861: LIST
1862: LIST
1863: LIST
1864: LIST
1865: LIST
1866: LIST
1867: PPUSH
1868: LD_INT 500
1870: PPUSH
1871: LD_INT 570
1873: PPUSH
1874: CALL_OW 12
1878: PPUSH
1879: LD_INT 50
1881: PPUSH
1882: LD_INT 2
1884: PPUSH
1885: CALL_OW 352
// if baseLevel then
1889: LD_VAR 0 8
1893: IFFALSE 1905
// area := BushForestSmallArea else
1895: LD_ADDR_VAR 0 5
1899: PUSH
1900: LD_INT 4
1902: ST_TO_ADDR
1903: GO 1913
// area := BushForestBigArea ;
1905: LD_ADDR_VAR 0 5
1909: PUSH
1910: LD_INT 3
1912: ST_TO_ADDR
// PlaceTreesToArea ( area , [ 38 , 39 , 37 ] , rand ( 300 , 350 ) , 10 , 3 ) ;
1913: LD_VAR 0 5
1917: PPUSH
1918: LD_INT 38
1920: PUSH
1921: LD_INT 39
1923: PUSH
1924: LD_INT 37
1926: PUSH
1927: EMPTY
1928: LIST
1929: LIST
1930: LIST
1931: PPUSH
1932: LD_INT 300
1934: PPUSH
1935: LD_INT 350
1937: PPUSH
1938: CALL_OW 12
1942: PPUSH
1943: LD_INT 10
1945: PPUSH
1946: LD_INT 3
1948: PPUSH
1949: CALL_OW 352
// PlaceTreesToArea ( BigForestArea , [ 38 , 39 , 37 ] , 80 , 10 , 3 ) ;
1953: LD_INT 1
1955: PPUSH
1956: LD_INT 38
1958: PUSH
1959: LD_INT 39
1961: PUSH
1962: LD_INT 37
1964: PUSH
1965: EMPTY
1966: LIST
1967: LIST
1968: LIST
1969: PPUSH
1970: LD_INT 80
1972: PPUSH
1973: LD_INT 10
1975: PPUSH
1976: LD_INT 3
1978: PPUSH
1979: CALL_OW 352
// end ;
1983: LD_VAR 0 2
1987: RET
// every 0 0$2 marked mpActive do var i , x , tmp , time , areas , normalTime , delayTime , maxTime ;
1988: GO 1990
1990: DISABLE
1991: LD_INT 0
1993: PPUSH
1994: PPUSH
1995: PPUSH
1996: PPUSH
1997: PPUSH
1998: PPUSH
1999: PPUSH
2000: PPUSH
// begin if not mpShipments then
2001: LD_EXP 27
2005: NOT
2006: IFFALSE 2010
// exit ;
2008: GO 2441
// case mpShipments of 1 :
2010: LD_EXP 27
2014: PUSH
2015: LD_INT 1
2017: DOUBLE
2018: EQUAL
2019: IFTRUE 2023
2021: GO 2058
2023: POP
// begin time := 0 0$30 ;
2024: LD_ADDR_VAR 0 4
2028: PUSH
2029: LD_INT 1050
2031: ST_TO_ADDR
// normalTime := 0 0$30 ;
2032: LD_ADDR_VAR 0 6
2036: PUSH
2037: LD_INT 1050
2039: ST_TO_ADDR
// maxTime := 1 1$20 ;
2040: LD_ADDR_VAR 0 8
2044: PUSH
2045: LD_INT 2800
2047: ST_TO_ADDR
// delayTime := 0 0$5 ;
2048: LD_ADDR_VAR 0 7
2052: PUSH
2053: LD_INT 175
2055: ST_TO_ADDR
// end ; 2 :
2056: GO 2188
2058: LD_INT 2
2060: DOUBLE
2061: EQUAL
2062: IFTRUE 2066
2064: GO 2101
2066: POP
// begin time := 0 0$25 ;
2067: LD_ADDR_VAR 0 4
2071: PUSH
2072: LD_INT 875
2074: ST_TO_ADDR
// normalTime := 0 0$25 ;
2075: LD_ADDR_VAR 0 6
2079: PUSH
2080: LD_INT 875
2082: ST_TO_ADDR
// maxTime := 1 1$10 ;
2083: LD_ADDR_VAR 0 8
2087: PUSH
2088: LD_INT 2450
2090: ST_TO_ADDR
// delayTime := 0 0$4 ;
2091: LD_ADDR_VAR 0 7
2095: PUSH
2096: LD_INT 140
2098: ST_TO_ADDR
// end ; 3 :
2099: GO 2188
2101: LD_INT 3
2103: DOUBLE
2104: EQUAL
2105: IFTRUE 2109
2107: GO 2144
2109: POP
// begin time := 0 0$20 ;
2110: LD_ADDR_VAR 0 4
2114: PUSH
2115: LD_INT 700
2117: ST_TO_ADDR
// normalTime := 0 0$20 ;
2118: LD_ADDR_VAR 0 6
2122: PUSH
2123: LD_INT 700
2125: ST_TO_ADDR
// maxTime := 1 1$00 ;
2126: LD_ADDR_VAR 0 8
2130: PUSH
2131: LD_INT 2100
2133: ST_TO_ADDR
// delayTime := 0 0$3 ;
2134: LD_ADDR_VAR 0 7
2138: PUSH
2139: LD_INT 105
2141: ST_TO_ADDR
// end ; 4 :
2142: GO 2188
2144: LD_INT 4
2146: DOUBLE
2147: EQUAL
2148: IFTRUE 2152
2150: GO 2187
2152: POP
// begin time := 0 0$15 ;
2153: LD_ADDR_VAR 0 4
2157: PUSH
2158: LD_INT 525
2160: ST_TO_ADDR
// normalTime := 0 0$15 ;
2161: LD_ADDR_VAR 0 6
2165: PUSH
2166: LD_INT 525
2168: ST_TO_ADDR
// maxTime := 0 0$55 ;
2169: LD_ADDR_VAR 0 8
2173: PUSH
2174: LD_INT 1925
2176: ST_TO_ADDR
// delayTime := 0 0$2 ;
2177: LD_ADDR_VAR 0 7
2181: PUSH
2182: LD_INT 70
2184: ST_TO_ADDR
// end ; end ;
2185: GO 2188
2187: POP
// tmp := [ BaseArea1 , BaseArea2 , BaseArea3 , BaseArea4 ] ;
2188: LD_ADDR_VAR 0 3
2192: PUSH
2193: LD_INT 5
2195: PUSH
2196: LD_INT 7
2198: PUSH
2199: LD_INT 6
2201: PUSH
2202: LD_INT 8
2204: PUSH
2205: EMPTY
2206: LIST
2207: LIST
2208: LIST
2209: LIST
2210: ST_TO_ADDR
// areas := [ Center1 , Center2 , Center3 , Center4 ] ;
2211: LD_ADDR_VAR 0 5
2215: PUSH
2216: LD_INT 26
2218: PUSH
2219: LD_INT 27
2221: PUSH
2222: LD_INT 29
2224: PUSH
2225: LD_INT 28
2227: PUSH
2228: EMPTY
2229: LIST
2230: LIST
2231: LIST
2232: LIST
2233: ST_TO_ADDR
// for i := 1 to 8 do
2234: LD_ADDR_VAR 0 1
2238: PUSH
2239: DOUBLE
2240: LD_INT 1
2242: DEC
2243: ST_TO_ADDR
2244: LD_INT 8
2246: PUSH
2247: FOR_TO
2248: IFFALSE 2295
// begin if not mpSidePositions [ i ] then
2250: LD_EXP 7
2254: PUSH
2255: LD_VAR 0 1
2259: ARRAY
2260: NOT
2261: IFFALSE 2265
// continue ;
2263: GO 2247
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2265: LD_ADDR_VAR 0 5
2269: PUSH
2270: LD_VAR 0 5
2274: PUSH
2275: LD_VAR 0 3
2279: PUSH
2280: LD_EXP 7
2284: PUSH
2285: LD_VAR 0 1
2289: ARRAY
2290: ARRAY
2291: ADD
2292: ST_TO_ADDR
// end ;
2293: GO 2247
2295: POP
2296: POP
// x := 1 ;
2297: LD_ADDR_VAR 0 2
2301: PUSH
2302: LD_INT 1
2304: ST_TO_ADDR
// repeat wait ( time ) ;
2305: LD_VAR 0 4
2309: PPUSH
2310: CALL_OW 67
// x := Inc ( x ) ;
2314: LD_ADDR_VAR 0 2
2318: PUSH
2319: LD_VAR 0 2
2323: PPUSH
2324: CALL 50713 0 1
2328: ST_TO_ADDR
// if x > 5 then
2329: LD_VAR 0 2
2333: PUSH
2334: LD_INT 5
2336: GREATER
2337: IFFALSE 2347
// x := 1 ;
2339: LD_ADDR_VAR 0 2
2343: PUSH
2344: LD_INT 1
2346: ST_TO_ADDR
// for i in areas do
2347: LD_ADDR_VAR 0 1
2351: PUSH
2352: LD_VAR 0 5
2356: PUSH
2357: FOR_IN
2358: IFFALSE 2397
// begin if GetResourceArea ( i , mat_cans ) < 20 then
2360: LD_VAR 0 1
2364: PPUSH
2365: LD_INT 1
2367: PPUSH
2368: CALL_OW 287
2372: PUSH
2373: LD_INT 20
2375: LESS
2376: IFFALSE 2395
// begin CreateCratesArea ( x , i , true ) ;
2378: LD_VAR 0 2
2382: PPUSH
2383: LD_VAR 0 1
2387: PPUSH
2388: LD_INT 1
2390: PPUSH
2391: CALL_OW 55
// end ; end ;
2395: GO 2357
2397: POP
2398: POP
// time := time + delayTime ;
2399: LD_ADDR_VAR 0 4
2403: PUSH
2404: LD_VAR 0 4
2408: PUSH
2409: LD_VAR 0 7
2413: PLUS
2414: ST_TO_ADDR
// if time > maxTime then
2415: LD_VAR 0 4
2419: PUSH
2420: LD_VAR 0 8
2424: GREATER
2425: IFFALSE 2437
// time := normalTime ;
2427: LD_ADDR_VAR 0 4
2431: PUSH
2432: LD_VAR 0 6
2436: ST_TO_ADDR
// until false ;
2437: LD_INT 0
2439: IFFALSE 2305
// end ; end_of_file
2441: PPOPN 8
2443: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2444: LD_VAR 0 1
2448: PPUSH
2449: CALL 54857 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2453: LD_VAR 0 1
2457: PPUSH
2458: CALL 8150 0 1
// end ;
2462: PPOPN 1
2464: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2465: LD_VAR 0 1
2469: PPUSH
2470: CALL 54874 0 1
// end ;
2474: PPOPN 1
2476: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2477: LD_VAR 0 1
2481: PPUSH
2482: CALL 9203 0 1
2486: PPOPN 1
2488: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2489: LD_VAR 0 1
2493: PPUSH
2494: LD_VAR 0 2
2498: PPUSH
2499: CALL 54915 0 2
2503: PPOPN 2
2505: END
// on VehicleConstruction_ApeConsumed ( factory , un ) do Multiplayer_VehicleConstruction_ApeConsumed ( factory , un ) ;
2506: LD_VAR 0 1
2510: PPUSH
2511: LD_VAR 0 2
2515: PPUSH
2516: CALL 8956 0 2
2520: PPOPN 2
2522: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ;
2523: LD_VAR 0 1
2527: PPUSH
2528: LD_VAR 0 2
2532: PPUSH
2533: LD_VAR 0 3
2537: PPUSH
2538: CALL 9256 0 3
2542: PPOPN 3
2544: END
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ;
2545: LD_VAR 0 1
2549: PPUSH
2550: LD_VAR 0 2
2554: PPUSH
2555: LD_VAR 0 3
2559: PPUSH
2560: LD_VAR 0 4
2564: PPUSH
2565: LD_VAR 0 5
2569: PPUSH
2570: CALL 9940 0 5
2574: PPOPN 5
2576: END
// on VehicleCaptured ( newId , oldId , oldSide , unit ) do Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; end_of_file
2577: LD_VAR 0 1
2581: PPUSH
2582: LD_VAR 0 2
2586: PPUSH
2587: LD_VAR 0 3
2591: PPUSH
2592: LD_VAR 0 4
2596: PPUSH
2597: CALL 10043 0 4
2601: PPOPN 4
2603: END
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpCommanders , mpGlobalOilDeposits , mpGlobalSibDeposits , mpTeleports , mpArtifacts , mpTimeToWin , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
2604: LD_INT 0
2606: PPUSH
2607: PPUSH
// disable ( mpActive ) ;
2608: LD_INT 100
2610: DISABLE_MARKED
// disable ( mpWin ) ;
2611: LD_INT 101
2613: DISABLE_MARKED
// disable ( mpLose ) ;
2614: LD_INT 102
2616: DISABLE_MARKED
// mpGameType := 0 ;
2617: LD_ADDR_EXP 3
2621: PUSH
2622: LD_INT 0
2624: ST_TO_ADDR
// mpGameSettings := [ ] ;
2625: LD_ADDR_EXP 6
2629: PUSH
2630: EMPTY
2631: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
2632: LD_ADDR_EXP 4
2636: PUSH
2637: EMPTY
2638: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
2639: LD_ADDR_EXP 5
2643: PUSH
2644: EMPTY
2645: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
2646: LD_ADDR_EXP 29
2650: PUSH
2651: LD_INT 2
2653: PUSH
2654: LD_INT 2
2656: PUSH
2657: EMPTY
2658: LIST
2659: LIST
2660: ST_TO_ADDR
// mpOilDeposits := [ ] ;
2661: LD_ADDR_EXP 12
2665: PUSH
2666: EMPTY
2667: ST_TO_ADDR
// mpSibDeposits := [ ] ;
2668: LD_ADDR_EXP 13
2672: PUSH
2673: EMPTY
2674: ST_TO_ADDR
// mpGlobalOilDeposits := [ ] ;
2675: LD_ADDR_EXP 42
2679: PUSH
2680: EMPTY
2681: ST_TO_ADDR
// mpGlobalSibDeposits := [ ] ;
2682: LD_ADDR_EXP 43
2686: PUSH
2687: EMPTY
2688: ST_TO_ADDR
// mpDepots := [ ] ;
2689: LD_ADDR_EXP 14
2693: PUSH
2694: EMPTY
2695: ST_TO_ADDR
// mpBuildings := [ ] ;
2696: LD_ADDR_EXP 17
2700: PUSH
2701: EMPTY
2702: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
2703: LD_ADDR_EXP 18
2707: PUSH
2708: EMPTY
2709: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
2710: LD_ADDR_EXP 19
2714: PUSH
2715: EMPTY
2716: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
2717: LD_ADDR_EXP 20
2721: PUSH
2722: EMPTY
2723: ST_TO_ADDR
// mpStartingResources := [ ] ;
2724: LD_ADDR_EXP 15
2728: PUSH
2729: EMPTY
2730: ST_TO_ADDR
// mpStartPos := [ ] ;
2731: LD_ADDR_EXP 21
2735: PUSH
2736: EMPTY
2737: ST_TO_ADDR
// mpBattleFlag := - 1 ;
2738: LD_ADDR_EXP 22
2742: PUSH
2743: LD_INT 1
2745: NEG
2746: ST_TO_ADDR
// mpBattleFlags := [ ] ;
2747: LD_ADDR_EXP 23
2751: PUSH
2752: EMPTY
2753: ST_TO_ADDR
// mpApemans := [ ] ;
2754: LD_ADDR_EXP 30
2758: PUSH
2759: EMPTY
2760: ST_TO_ADDR
// mpApemansArea := [ ] ;
2761: LD_ADDR_EXP 31
2765: PUSH
2766: EMPTY
2767: ST_TO_ADDR
// mpRespawn := [ ] ;
2768: LD_ADDR_EXP 33
2772: PUSH
2773: EMPTY
2774: ST_TO_ADDR
// mpKingArea := 0 ;
2775: LD_ADDR_EXP 34
2779: PUSH
2780: LD_INT 0
2782: ST_TO_ADDR
// mpPoints := [ ] ;
2783: LD_ADDR_EXP 35
2787: PUSH
2788: EMPTY
2789: ST_TO_ADDR
// mpVehicles := 0 ;
2790: LD_ADDR_EXP 36
2794: PUSH
2795: LD_INT 0
2797: ST_TO_ADDR
// mpShipments := 0 ;
2798: LD_ADDR_EXP 27
2802: PUSH
2803: LD_INT 0
2805: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
2806: LD_ADDR_EXP 40
2810: PUSH
2811: EMPTY
2812: PUSH
2813: EMPTY
2814: PUSH
2815: EMPTY
2816: PUSH
2817: EMPTY
2818: PUSH
2819: EMPTY
2820: PUSH
2821: EMPTY
2822: PUSH
2823: EMPTY
2824: PUSH
2825: EMPTY
2826: PUSH
2827: EMPTY
2828: LIST
2829: LIST
2830: LIST
2831: LIST
2832: LIST
2833: LIST
2834: LIST
2835: LIST
2836: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
2837: LD_ADDR_EXP 32
2841: PUSH
2842: EMPTY
2843: PUSH
2844: EMPTY
2845: PUSH
2846: EMPTY
2847: PUSH
2848: EMPTY
2849: PUSH
2850: EMPTY
2851: PUSH
2852: EMPTY
2853: PUSH
2854: EMPTY
2855: PUSH
2856: EMPTY
2857: PUSH
2858: EMPTY
2859: LIST
2860: LIST
2861: LIST
2862: LIST
2863: LIST
2864: LIST
2865: LIST
2866: LIST
2867: ST_TO_ADDR
// mpCommanders := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
2868: LD_ADDR_EXP 41
2872: PUSH
2873: LD_INT 0
2875: PUSH
2876: LD_INT 0
2878: PUSH
2879: LD_INT 0
2881: PUSH
2882: LD_INT 0
2884: PUSH
2885: LD_INT 0
2887: PUSH
2888: LD_INT 0
2890: PUSH
2891: LD_INT 0
2893: PUSH
2894: LD_INT 0
2896: PUSH
2897: EMPTY
2898: LIST
2899: LIST
2900: LIST
2901: LIST
2902: LIST
2903: LIST
2904: LIST
2905: LIST
2906: ST_TO_ADDR
// mpEmissions := 0 ;
2907: LD_ADDR_EXP 37
2911: PUSH
2912: LD_INT 0
2914: ST_TO_ADDR
// mpTeleports := 0 ;
2915: LD_ADDR_EXP 44
2919: PUSH
2920: LD_INT 0
2922: ST_TO_ADDR
// mpArtifacts := 0 ;
2923: LD_ADDR_EXP 45
2927: PUSH
2928: LD_INT 0
2930: ST_TO_ADDR
// mpTimeToWin := 0 0$0 ;
2931: LD_ADDR_EXP 46
2935: PUSH
2936: LD_INT 0
2938: ST_TO_ADDR
// mpPeopleSkill := 3 ;
2939: LD_ADDR_EXP 25
2943: PUSH
2944: LD_INT 3
2946: ST_TO_ADDR
// mpPeopleAmount := 15 ;
2947: LD_ADDR_EXP 24
2951: PUSH
2952: LD_INT 15
2954: ST_TO_ADDR
// mpDisplayStrings := 0 ;
2955: LD_ADDR_EXP 38
2959: PUSH
2960: LD_INT 0
2962: ST_TO_ADDR
// mpGameActive := false ;
2963: LD_ADDR_EXP 39
2967: PUSH
2968: LD_INT 0
2970: ST_TO_ADDR
// mpBlockRespThread := false ;
2971: LD_ADDR_EXP 47
2975: PUSH
2976: LD_INT 0
2978: ST_TO_ADDR
// for i := 1 to 32 do
2979: LD_ADDR_VAR 0 2
2983: PUSH
2984: DOUBLE
2985: LD_INT 1
2987: DEC
2988: ST_TO_ADDR
2989: LD_INT 32
2991: PUSH
2992: FOR_TO
2993: IFFALSE 3020
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
2995: LD_ADDR_EXP 6
2999: PUSH
3000: LD_EXP 6
3004: PPUSH
3005: LD_VAR 0 2
3009: PPUSH
3010: LD_INT 0
3012: PPUSH
3013: CALL_OW 1
3017: ST_TO_ADDR
3018: GO 2992
3020: POP
3021: POP
// end ;
3022: LD_VAR 0 1
3026: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
3027: LD_INT 0
3029: PPUSH
3030: PPUSH
3031: PPUSH
3032: PPUSH
3033: PPUSH
3034: PPUSH
3035: PPUSH
3036: PPUSH
3037: PPUSH
3038: PPUSH
3039: PPUSH
3040: PPUSH
3041: PPUSH
3042: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact , GameTypeSurvivalHardcore ] ;
3043: LD_ADDR_VAR 0 14
3047: PUSH
3048: LD_INT 1
3050: PUSH
3051: LD_INT 2
3053: PUSH
3054: LD_INT 3
3056: PUSH
3057: LD_INT 5
3059: PUSH
3060: LD_INT 6
3062: PUSH
3063: LD_INT 7
3065: PUSH
3066: LD_INT 8
3068: PUSH
3069: EMPTY
3070: LIST
3071: LIST
3072: LIST
3073: LIST
3074: LIST
3075: LIST
3076: LIST
3077: ST_TO_ADDR
// for i in gameTypes do
3078: LD_ADDR_VAR 0 2
3082: PUSH
3083: LD_VAR 0 14
3087: PUSH
3088: FOR_IN
3089: IFFALSE 3098
// disable ( i ) ;
3091: LD_VAR 0 2
3095: DISABLE_MARKED
3096: GO 3088
3098: POP
3099: POP
// if Multiplayer then
3100: LD_OWVAR 4
3104: IFFALSE 3288
// begin mpGameType := mp_game_type ;
3106: LD_ADDR_EXP 3
3110: PUSH
3111: LD_OWVAR 6
3115: ST_TO_ADDR
// your_side := mp_player_side ;
3116: LD_ADDR_OWVAR 2
3120: PUSH
3121: LD_OWVAR 7
3125: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
3126: LD_ADDR_EXP 7
3130: PUSH
3131: LD_OWVAR 17
3135: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
3136: LD_ADDR_EXP 8
3140: PUSH
3141: LD_OWVAR 15
3145: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
3146: LD_ADDR_EXP 9
3150: PUSH
3151: LD_OWVAR 16
3155: ST_TO_ADDR
// mpTeams := mp_teams ;
3156: LD_ADDR_EXP 10
3160: PUSH
3161: LD_OWVAR 12
3165: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
3166: LD_ADDR_VAR 0 2
3170: PUSH
3171: DOUBLE
3172: LD_INT 1
3174: DEC
3175: ST_TO_ADDR
3176: LD_EXP 4
3180: PPUSH
3181: CALL 13364 0 1
3185: PUSH
3186: FOR_TO
3187: IFFALSE 3263
// begin setting := mpGameSettingsKeys [ i ] ;
3189: LD_ADDR_VAR 0 12
3193: PUSH
3194: LD_EXP 4
3198: PUSH
3199: LD_VAR 0 2
3203: ARRAY
3204: ST_TO_ADDR
// if setting then
3205: LD_VAR 0 12
3209: IFFALSE 3261
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
3211: LD_ADDR_EXP 6
3215: PUSH
3216: LD_EXP 6
3220: PPUSH
3221: LD_VAR 0 2
3225: PPUSH
3226: LD_EXP 5
3230: PUSH
3231: LD_VAR 0 2
3235: ARRAY
3236: PUSH
3237: LD_VAR 0 2
3241: PUSH
3242: LD_INT 1
3244: MINUS
3245: PPUSH
3246: CALL_OW 426
3250: PUSH
3251: LD_INT 1
3253: PLUS
3254: ARRAY
3255: PPUSH
3256: CALL_OW 1
3260: ST_TO_ADDR
// end ;
3261: GO 3186
3263: POP
3264: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
3265: LD_ADDR_EXP 11
3269: PUSH
3270: LD_EXP 8
3274: PUSH
3275: LD_INT 0
3277: PUSH
3278: EMPTY
3279: LIST
3280: DIFF
3281: PUSH
3282: LD_INT 1
3284: GREATER
3285: ST_TO_ADDR
// end else
3286: GO 3288
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
3288: LD_EXP 3
3292: PPUSH
3293: CALL 826 0 1
// if Count ( mpMarkedAreas ) then
3297: LD_EXP 18
3301: PPUSH
3302: CALL 13364 0 1
3306: IFFALSE 3337
// begin for i in mpMarkedAreas do
3308: LD_ADDR_VAR 0 2
3312: PUSH
3313: LD_EXP 18
3317: PUSH
3318: FOR_IN
3319: IFFALSE 3335
// SetAreaMapShow ( i , 0 ) ;
3321: LD_VAR 0 2
3325: PPUSH
3326: LD_INT 0
3328: PPUSH
3329: CALL_OW 424
3333: GO 3318
3335: POP
3336: POP
// end ; for i := 1 to 8 do
3337: LD_ADDR_VAR 0 2
3341: PUSH
3342: DOUBLE
3343: LD_INT 1
3345: DEC
3346: ST_TO_ADDR
3347: LD_INT 8
3349: PUSH
3350: FOR_TO
3351: IFFALSE 4810
// begin if not mpSidePositions [ i ] then
3353: LD_EXP 7
3357: PUSH
3358: LD_VAR 0 2
3362: ARRAY
3363: NOT
3364: IFFALSE 3368
// continue ;
3366: GO 3350
// side := i ;
3368: LD_ADDR_VAR 0 7
3372: PUSH
3373: LD_VAR 0 2
3377: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
3378: LD_ADDR_VAR 0 9
3382: PUSH
3383: LD_EXP 9
3387: PUSH
3388: LD_VAR 0 2
3392: ARRAY
3393: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
3394: LD_ADDR_VAR 0 8
3398: PUSH
3399: LD_EXP 7
3403: PUSH
3404: LD_VAR 0 2
3408: ARRAY
3409: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
3410: LD_EXP 12
3414: PPUSH
3415: CALL 13364 0 1
3419: IFFALSE 3496
// begin for j in mpOilDeposits [ pos ] do
3421: LD_ADDR_VAR 0 3
3425: PUSH
3426: LD_EXP 12
3430: PUSH
3431: LD_VAR 0 8
3435: ARRAY
3436: PUSH
3437: FOR_IN
3438: IFFALSE 3494
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
3440: LD_VAR 0 3
3444: PUSH
3445: LD_INT 1
3447: ARRAY
3448: PPUSH
3449: LD_VAR 0 3
3453: PUSH
3454: LD_INT 2
3456: ARRAY
3457: PPUSH
3458: LD_INT 2
3460: PPUSH
3461: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3465: LD_VAR 0 3
3469: PUSH
3470: LD_INT 1
3472: ARRAY
3473: PPUSH
3474: LD_VAR 0 3
3478: PUSH
3479: LD_INT 2
3481: ARRAY
3482: PPUSH
3483: LD_VAR 0 7
3487: PPUSH
3488: CALL_OW 441
// end ;
3492: GO 3437
3494: POP
3495: POP
// end ; if Count ( mpSibDeposits ) then
3496: LD_EXP 13
3500: PPUSH
3501: CALL 13364 0 1
3505: IFFALSE 3582
// begin for j in mpSibDeposits [ pos ] do
3507: LD_ADDR_VAR 0 3
3511: PUSH
3512: LD_EXP 13
3516: PUSH
3517: LD_VAR 0 8
3521: ARRAY
3522: PUSH
3523: FOR_IN
3524: IFFALSE 3580
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
3526: LD_VAR 0 3
3530: PUSH
3531: LD_INT 1
3533: ARRAY
3534: PPUSH
3535: LD_VAR 0 3
3539: PUSH
3540: LD_INT 2
3542: ARRAY
3543: PPUSH
3544: LD_INT 3
3546: PPUSH
3547: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3551: LD_VAR 0 3
3555: PUSH
3556: LD_INT 1
3558: ARRAY
3559: PPUSH
3560: LD_VAR 0 3
3564: PUSH
3565: LD_INT 2
3567: ARRAY
3568: PPUSH
3569: LD_VAR 0 7
3573: PPUSH
3574: CALL_OW 441
// end ;
3578: GO 3523
3580: POP
3581: POP
// end ; InitBc ;
3582: CALL_OW 21
// InitUc ;
3586: CALL_OW 18
// uc_side := side ;
3590: LD_ADDR_OWVAR 20
3594: PUSH
3595: LD_VAR 0 7
3599: ST_TO_ADDR
// uc_nation := nation ;
3600: LD_ADDR_OWVAR 21
3604: PUSH
3605: LD_VAR 0 9
3609: ST_TO_ADDR
// if mpBattleFlag > - 1 then
3610: LD_EXP 22
3614: PUSH
3615: LD_INT 1
3617: NEG
3618: GREATER
3619: IFFALSE 3778
// begin x := mpStartPos [ pos ] [ 1 ] ;
3621: LD_ADDR_VAR 0 5
3625: PUSH
3626: LD_EXP 21
3630: PUSH
3631: LD_VAR 0 8
3635: ARRAY
3636: PUSH
3637: LD_INT 1
3639: ARRAY
3640: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
3641: LD_ADDR_VAR 0 6
3645: PUSH
3646: LD_EXP 21
3650: PUSH
3651: LD_VAR 0 8
3655: ARRAY
3656: PUSH
3657: LD_INT 2
3659: ARRAY
3660: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3661: LD_VAR 0 5
3665: PPUSH
3666: LD_VAR 0 6
3670: PPUSH
3671: LD_INT 12
3673: PPUSH
3674: LD_INT 2
3676: PPUSH
3677: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
3681: LD_ADDR_EXP 23
3685: PUSH
3686: LD_EXP 23
3690: PPUSH
3691: LD_VAR 0 7
3695: PPUSH
3696: LD_VAR 0 7
3700: PPUSH
3701: LD_VAR 0 5
3705: PPUSH
3706: LD_VAR 0 6
3710: PPUSH
3711: LD_INT 1
3713: PUSH
3714: LD_INT 100
3716: PUSH
3717: EMPTY
3718: LIST
3719: LIST
3720: PUSH
3721: LD_INT 2
3723: PUSH
3724: LD_INT 70
3726: PUSH
3727: EMPTY
3728: LIST
3729: LIST
3730: PUSH
3731: LD_INT 3
3733: PUSH
3734: LD_INT 40
3736: PUSH
3737: EMPTY
3738: LIST
3739: LIST
3740: PUSH
3741: LD_INT 10
3743: PUSH
3744: LD_INT 25
3746: PUSH
3747: EMPTY
3748: LIST
3749: LIST
3750: PUSH
3751: LD_INT 20
3753: PUSH
3754: LD_INT 100
3756: PUSH
3757: EMPTY
3758: LIST
3759: LIST
3760: PUSH
3761: EMPTY
3762: LIST
3763: LIST
3764: LIST
3765: LIST
3766: LIST
3767: PPUSH
3768: CALL_OW 418
3772: PPUSH
3773: CALL_OW 1
3777: ST_TO_ADDR
// end ; if Count ( mpDepots ) then
3778: LD_EXP 14
3782: PPUSH
3783: CALL 13364 0 1
3787: IFFALSE 3986
// begin if mpGameType in [ GameTypeSurvival , GameTypeSurvivalHardcore , GameTypeArmsRace , GameTypeArmsArtifact ] then
3789: LD_EXP 3
3793: PUSH
3794: LD_INT 2
3796: PUSH
3797: LD_INT 8
3799: PUSH
3800: LD_INT 6
3802: PUSH
3803: LD_INT 7
3805: PUSH
3806: EMPTY
3807: LIST
3808: LIST
3809: LIST
3810: LIST
3811: IN
3812: IFFALSE 3832
// begin bc_level := 10 ;
3814: LD_ADDR_OWVAR 43
3818: PUSH
3819: LD_INT 10
3821: ST_TO_ADDR
// bc_type := b_warehouse ;
3822: LD_ADDR_OWVAR 42
3826: PUSH
3827: LD_INT 1
3829: ST_TO_ADDR
// end else
3830: GO 3848
// begin bc_level := 0 ;
3832: LD_ADDR_OWVAR 43
3836: PUSH
3837: LD_INT 0
3839: ST_TO_ADDR
// bc_type := b_depot ;
3840: LD_ADDR_OWVAR 42
3844: PUSH
3845: LD_INT 0
3847: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
3848: LD_ADDR_VAR 0 4
3852: PUSH
3853: LD_EXP 14
3857: PUSH
3858: LD_VAR 0 8
3862: ARRAY
3863: PUSH
3864: LD_INT 1
3866: ARRAY
3867: PPUSH
3868: LD_EXP 14
3872: PUSH
3873: LD_VAR 0 8
3877: ARRAY
3878: PUSH
3879: LD_INT 2
3881: ARRAY
3882: PPUSH
3883: LD_EXP 14
3887: PUSH
3888: LD_VAR 0 8
3892: ARRAY
3893: PUSH
3894: LD_INT 3
3896: ARRAY
3897: PPUSH
3898: CALL_OW 47
3902: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
3903: LD_VAR 0 4
3907: PPUSH
3908: LD_STRING @
3910: PUSH
3911: LD_VAR 0 7
3915: STR
3916: PPUSH
3917: CALL_OW 500
// if Count ( mpStartingResources ) then
3921: LD_EXP 15
3925: PPUSH
3926: CALL 13364 0 1
3930: IFFALSE 3984
// begin for j := 1 to mpStartingResources do
3932: LD_ADDR_VAR 0 3
3936: PUSH
3937: DOUBLE
3938: LD_INT 1
3940: DEC
3941: ST_TO_ADDR
3942: LD_EXP 15
3946: PUSH
3947: FOR_TO
3948: IFFALSE 3982
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
3950: LD_VAR 0 4
3954: PPUSH
3955: CALL_OW 274
3959: PPUSH
3960: LD_VAR 0 3
3964: PPUSH
3965: LD_EXP 15
3969: PUSH
3970: LD_VAR 0 3
3974: ARRAY
3975: PPUSH
3976: CALL_OW 277
3980: GO 3947
3982: POP
3983: POP
// end ; end else
3984: GO 4193
// if Count ( mpStartingResources ) then
3986: LD_EXP 15
3990: PPUSH
3991: CALL 13364 0 1
3995: IFFALSE 4193
// begin x := mpStartPos [ pos ] [ 1 ] ;
3997: LD_ADDR_VAR 0 5
4001: PUSH
4002: LD_EXP 21
4006: PUSH
4007: LD_VAR 0 8
4011: ARRAY
4012: PUSH
4013: LD_INT 1
4015: ARRAY
4016: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
4017: LD_ADDR_VAR 0 6
4021: PUSH
4022: LD_EXP 21
4026: PUSH
4027: LD_VAR 0 8
4031: ARRAY
4032: PUSH
4033: LD_INT 2
4035: ARRAY
4036: ST_TO_ADDR
// for j := 1 to mpStartingResources do
4037: LD_ADDR_VAR 0 3
4041: PUSH
4042: DOUBLE
4043: LD_INT 1
4045: DEC
4046: ST_TO_ADDR
4047: LD_EXP 15
4051: PUSH
4052: FOR_TO
4053: IFFALSE 4191
// begin resources := mpStartingResources [ j ] ;
4055: LD_ADDR_VAR 0 13
4059: PUSH
4060: LD_EXP 15
4064: PUSH
4065: LD_VAR 0 3
4069: ARRAY
4070: ST_TO_ADDR
// if resources = 0 then
4071: LD_VAR 0 13
4075: PUSH
4076: LD_INT 0
4078: EQUAL
4079: IFFALSE 4083
// continue ;
4081: GO 4052
// repeat if resources >= 50 then
4083: LD_VAR 0 13
4087: PUSH
4088: LD_INT 50
4090: GREATEREQUAL
4091: IFFALSE 4137
// begin CreateResourcesXYR ( j , 5 , x , y , 6 , false ) ;
4093: LD_VAR 0 3
4097: PPUSH
4098: LD_INT 5
4100: PPUSH
4101: LD_VAR 0 5
4105: PPUSH
4106: LD_VAR 0 6
4110: PPUSH
4111: LD_INT 6
4113: PPUSH
4114: LD_INT 0
4116: PPUSH
4117: CALL_OW 60
// resources := resources - 50 ;
4121: LD_ADDR_VAR 0 13
4125: PUSH
4126: LD_VAR 0 13
4130: PUSH
4131: LD_INT 50
4133: MINUS
4134: ST_TO_ADDR
// end else
4135: GO 4179
// begin CreateResourcesXYR ( j , resources div 10 , x , y , 6 , false ) ;
4137: LD_VAR 0 3
4141: PPUSH
4142: LD_VAR 0 13
4146: PUSH
4147: LD_INT 10
4149: DIV
4150: PPUSH
4151: LD_VAR 0 5
4155: PPUSH
4156: LD_VAR 0 6
4160: PPUSH
4161: LD_INT 6
4163: PPUSH
4164: LD_INT 0
4166: PPUSH
4167: CALL_OW 60
// resources := 0 ;
4171: LD_ADDR_VAR 0 13
4175: PUSH
4176: LD_INT 0
4178: ST_TO_ADDR
// end ; until resources <= 0 ;
4179: LD_VAR 0 13
4183: PUSH
4184: LD_INT 0
4186: LESSEQUAL
4187: IFFALSE 4083
// end ;
4189: GO 4052
4191: POP
4192: POP
// end ; if Count ( mpBuildings ) and not mpGameType in [ GameTypeSurvival , GameTypeSurvivalHardcore ] then
4193: LD_EXP 17
4197: PPUSH
4198: CALL 13364 0 1
4202: IFFALSE 4222
4204: PUSH
4205: LD_EXP 3
4209: PUSH
4210: LD_INT 2
4212: PUSH
4213: LD_INT 8
4215: PUSH
4216: EMPTY
4217: LIST
4218: LIST
4219: IN
4220: NOT
4221: AND
4222: IFFALSE 4300
// begin for j in mpBuildings [ pos ] do
4224: LD_ADDR_VAR 0 3
4228: PUSH
4229: LD_EXP 17
4233: PUSH
4234: LD_VAR 0 8
4238: ARRAY
4239: PUSH
4240: FOR_IN
4241: IFFALSE 4298
// begin bc_level := 0 ;
4243: LD_ADDR_OWVAR 43
4247: PUSH
4248: LD_INT 0
4250: ST_TO_ADDR
// bc_type := j [ 1 ] ;
4251: LD_ADDR_OWVAR 42
4255: PUSH
4256: LD_VAR 0 3
4260: PUSH
4261: LD_INT 1
4263: ARRAY
4264: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
4265: LD_VAR 0 3
4269: PUSH
4270: LD_INT 2
4272: ARRAY
4273: PPUSH
4274: LD_VAR 0 3
4278: PUSH
4279: LD_INT 3
4281: ARRAY
4282: PPUSH
4283: LD_VAR 0 3
4287: PUSH
4288: LD_INT 4
4290: ARRAY
4291: PPUSH
4292: CALL_OW 47
// end ;
4296: GO 4240
4298: POP
4299: POP
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
4300: LD_EXP 26
4304: IFFALSE 4324
4306: PUSH
4307: LD_INT 20
4309: PPUSH
4310: LD_VAR 0 7
4314: PPUSH
4315: CALL_OW 321
4319: PUSH
4320: LD_INT 1
4322: EQUAL
4323: AND
4324: IFFALSE 4341
// SetTech ( tech_SibDet , side , state_researched ) ;
4326: LD_INT 20
4328: PPUSH
4329: LD_VAR 0 7
4333: PPUSH
4334: LD_INT 2
4336: PPUSH
4337: CALL_OW 322
// if not mpArtifacts then
4341: LD_EXP 45
4345: NOT
4346: IFFALSE 4363
// SetTech ( tech_artifact , side , state_disabled ) ;
4348: LD_INT 24
4350: PPUSH
4351: LD_VAR 0 7
4355: PPUSH
4356: LD_INT 0
4358: PPUSH
4359: CALL_OW 322
// if mpSibBomb = 1 then
4363: LD_EXP 28
4367: PUSH
4368: LD_INT 1
4370: EQUAL
4371: IFFALSE 4390
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4373: LD_INT 25
4375: PPUSH
4376: LD_VAR 0 7
4380: PPUSH
4381: LD_INT 1
4383: PPUSH
4384: CALL_OW 322
// end else
4388: GO 4405
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4390: LD_INT 25
4392: PPUSH
4393: LD_VAR 0 7
4397: PPUSH
4398: LD_INT 0
4400: PPUSH
4401: CALL_OW 322
// end ; if mpVehicles then
4405: LD_EXP 36
4409: IFFALSE 4508
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
4411: LD_ADDR_VAR 0 3
4415: PUSH
4416: LD_VAR 0 7
4420: PPUSH
4421: LD_VAR 0 9
4425: PPUSH
4426: LD_EXP 36
4430: PPUSH
4431: CALL 5767 0 3
4435: PUSH
4436: FOR_IN
4437: IFFALSE 4506
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
4439: LD_VAR 0 3
4443: PPUSH
4444: LD_INT 0
4446: PPUSH
4447: LD_INT 5
4449: PPUSH
4450: CALL_OW 12
4454: PPUSH
4455: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4459: LD_VAR 0 3
4463: PPUSH
4464: LD_EXP 21
4468: PUSH
4469: LD_VAR 0 8
4473: ARRAY
4474: PUSH
4475: LD_INT 1
4477: ARRAY
4478: PPUSH
4479: LD_EXP 21
4483: PUSH
4484: LD_VAR 0 8
4488: ARRAY
4489: PUSH
4490: LD_INT 2
4492: ARRAY
4493: PPUSH
4494: LD_INT 12
4496: PPUSH
4497: LD_INT 0
4499: PPUSH
4500: CALL_OW 50
// end ;
4504: GO 4436
4506: POP
4507: POP
// end ; uc_nation := nation ;
4508: LD_ADDR_OWVAR 21
4512: PUSH
4513: LD_VAR 0 9
4517: ST_TO_ADDR
// if mpGameType in [ GameTypeArmsRace , GameTypeArmsArtifact ] and mpSidePositions [ i ] in [ 1 , 2 ] then
4518: LD_EXP 3
4522: PUSH
4523: LD_INT 6
4525: PUSH
4526: LD_INT 7
4528: PUSH
4529: EMPTY
4530: LIST
4531: LIST
4532: IN
4533: IFFALSE 4558
4535: PUSH
4536: LD_EXP 7
4540: PUSH
4541: LD_VAR 0 2
4545: ARRAY
4546: PUSH
4547: LD_INT 1
4549: PUSH
4550: LD_INT 2
4552: PUSH
4553: EMPTY
4554: LIST
4555: LIST
4556: IN
4557: AND
4558: IFFALSE 4606
// team := mpPrepareTeam ( side , nation , mpPeopleAmount + ( mpPeopleAmount div 2 ) , mpPeopleSkill + 1 ) else
4560: LD_ADDR_VAR 0 11
4564: PUSH
4565: LD_VAR 0 7
4569: PPUSH
4570: LD_VAR 0 9
4574: PPUSH
4575: LD_EXP 24
4579: PUSH
4580: LD_EXP 24
4584: PUSH
4585: LD_INT 2
4587: DIV
4588: PLUS
4589: PPUSH
4590: LD_EXP 25
4594: PUSH
4595: LD_INT 1
4597: PLUS
4598: PPUSH
4599: CALL 5222 0 4
4603: ST_TO_ADDR
4604: GO 4636
// team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
4606: LD_ADDR_VAR 0 11
4610: PUSH
4611: LD_VAR 0 7
4615: PPUSH
4616: LD_VAR 0 9
4620: PPUSH
4621: LD_EXP 24
4625: PPUSH
4626: LD_EXP 25
4630: PPUSH
4631: CALL 5222 0 4
4635: ST_TO_ADDR
// for j in team do
4636: LD_ADDR_VAR 0 3
4640: PUSH
4641: LD_VAR 0 11
4645: PUSH
4646: FOR_IN
4647: IFFALSE 4696
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4649: LD_VAR 0 3
4653: PPUSH
4654: LD_EXP 21
4658: PUSH
4659: LD_VAR 0 8
4663: ARRAY
4664: PUSH
4665: LD_INT 1
4667: ARRAY
4668: PPUSH
4669: LD_EXP 21
4673: PUSH
4674: LD_VAR 0 8
4678: ARRAY
4679: PUSH
4680: LD_INT 2
4682: ARRAY
4683: PPUSH
4684: LD_INT 12
4686: PPUSH
4687: LD_INT 0
4689: PPUSH
4690: CALL_OW 50
4694: GO 4646
4696: POP
4697: POP
// if mpApemans then
4698: LD_EXP 30
4702: IFFALSE 4808
// begin for j := 1 to mpApemans do
4704: LD_ADDR_VAR 0 3
4708: PUSH
4709: DOUBLE
4710: LD_INT 1
4712: DEC
4713: ST_TO_ADDR
4714: LD_EXP 30
4718: PUSH
4719: FOR_TO
4720: IFFALSE 4806
// begin PrepareApeman ( - 5 ) ;
4722: LD_INT 5
4724: NEG
4725: PPUSH
4726: CALL 45467 0 1
// ape := CreateHuman ;
4730: LD_ADDR_VAR 0 10
4734: PUSH
4735: CALL_OW 44
4739: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
4740: LD_ADDR_EXP 32
4744: PUSH
4745: LD_EXP 32
4749: PPUSH
4750: LD_VAR 0 8
4754: PPUSH
4755: LD_EXP 32
4759: PUSH
4760: LD_VAR 0 8
4764: ARRAY
4765: PPUSH
4766: LD_VAR 0 10
4770: PPUSH
4771: CALL 49340 0 2
4775: PPUSH
4776: CALL_OW 1
4780: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
4781: LD_VAR 0 10
4785: PPUSH
4786: LD_EXP 31
4790: PUSH
4791: LD_VAR 0 8
4795: ARRAY
4796: PPUSH
4797: LD_INT 0
4799: PPUSH
4800: CALL_OW 49
// end ;
4804: GO 4719
4806: POP
4807: POP
// end ; end ;
4808: GO 3350
4810: POP
4811: POP
// if not mpTeamGame then
4812: LD_EXP 11
4816: NOT
4817: IFFALSE 4915
// begin for i := 1 to 8 do
4819: LD_ADDR_VAR 0 2
4823: PUSH
4824: DOUBLE
4825: LD_INT 1
4827: DEC
4828: ST_TO_ADDR
4829: LD_INT 8
4831: PUSH
4832: FOR_TO
4833: IFFALSE 4911
// for j := 1 to 8 do
4835: LD_ADDR_VAR 0 3
4839: PUSH
4840: DOUBLE
4841: LD_INT 1
4843: DEC
4844: ST_TO_ADDR
4845: LD_INT 8
4847: PUSH
4848: FOR_TO
4849: IFFALSE 4907
// if i <> j then
4851: LD_VAR 0 2
4855: PUSH
4856: LD_VAR 0 3
4860: NONEQUAL
4861: IFFALSE 4885
// SetAttitude ( i , j , att_neutral , true ) else
4863: LD_VAR 0 2
4867: PPUSH
4868: LD_VAR 0 3
4872: PPUSH
4873: LD_INT 0
4875: PPUSH
4876: LD_INT 1
4878: PPUSH
4879: CALL_OW 80
4883: GO 4905
// SetAttitude ( i , j , att_friend , true ) ;
4885: LD_VAR 0 2
4889: PPUSH
4890: LD_VAR 0 3
4894: PPUSH
4895: LD_INT 1
4897: PPUSH
4898: LD_INT 1
4900: PPUSH
4901: CALL_OW 80
4905: GO 4848
4907: POP
4908: POP
4909: GO 4832
4911: POP
4912: POP
// end else
4913: GO 5090
// begin if mpSharedVision then
4915: LD_EXP 16
4919: IFFALSE 4984
// begin for i in mpTeams do
4921: LD_ADDR_VAR 0 2
4925: PUSH
4926: LD_EXP 10
4930: PUSH
4931: FOR_IN
4932: IFFALSE 4982
// for j := 2 to i do
4934: LD_ADDR_VAR 0 3
4938: PUSH
4939: DOUBLE
4940: LD_INT 2
4942: DEC
4943: ST_TO_ADDR
4944: LD_VAR 0 2
4948: PUSH
4949: FOR_TO
4950: IFFALSE 4978
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
4952: LD_VAR 0 2
4956: PUSH
4957: LD_VAR 0 3
4961: ARRAY
4962: PPUSH
4963: LD_VAR 0 2
4967: PUSH
4968: LD_INT 1
4970: ARRAY
4971: PPUSH
4972: CALL_OW 343
4976: GO 4949
4978: POP
4979: POP
4980: GO 4931
4982: POP
4983: POP
// end ; for i := 1 to 8 do
4984: LD_ADDR_VAR 0 2
4988: PUSH
4989: DOUBLE
4990: LD_INT 1
4992: DEC
4993: ST_TO_ADDR
4994: LD_INT 8
4996: PUSH
4997: FOR_TO
4998: IFFALSE 5088
// for j := 1 to 8 do
5000: LD_ADDR_VAR 0 3
5004: PUSH
5005: DOUBLE
5006: LD_INT 1
5008: DEC
5009: ST_TO_ADDR
5010: LD_INT 8
5012: PUSH
5013: FOR_TO
5014: IFFALSE 5084
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
5016: LD_EXP 8
5020: PUSH
5021: LD_VAR 0 2
5025: ARRAY
5026: PUSH
5027: LD_EXP 8
5031: PUSH
5032: LD_VAR 0 3
5036: ARRAY
5037: EQUAL
5038: IFFALSE 5062
// SetAttitude ( i , j , att_friend , true ) else
5040: LD_VAR 0 2
5044: PPUSH
5045: LD_VAR 0 3
5049: PPUSH
5050: LD_INT 1
5052: PPUSH
5053: LD_INT 1
5055: PPUSH
5056: CALL_OW 80
5060: GO 5082
// SetAttitude ( i , j , att_enemy , true ) ;
5062: LD_VAR 0 2
5066: PPUSH
5067: LD_VAR 0 3
5071: PPUSH
5072: LD_INT 2
5074: PPUSH
5075: LD_INT 1
5077: PPUSH
5078: CALL_OW 80
5082: GO 5013
5084: POP
5085: POP
5086: GO 4997
5088: POP
5089: POP
// end ; music_nat := mpSideNations [ your_side ] ;
5090: LD_ADDR_OWVAR 71
5094: PUSH
5095: LD_EXP 9
5099: PUSH
5100: LD_OWVAR 2
5104: ARRAY
5105: ST_TO_ADDR
// if IAmSpec then
5106: CALL_OW 531
5110: IFFALSE 5151
// begin FogOff ( true ) ;
5112: LD_INT 1
5114: PPUSH
5115: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
5119: LD_EXP 29
5123: PUSH
5124: LD_INT 1
5126: ARRAY
5127: PUSH
5128: LD_INT 2
5130: DIV
5131: PPUSH
5132: LD_EXP 29
5136: PUSH
5137: LD_INT 2
5139: ARRAY
5140: PUSH
5141: LD_INT 2
5143: DIV
5144: PPUSH
5145: CALL_OW 86
// end else
5149: GO 5197
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
5151: LD_EXP 21
5155: PUSH
5156: LD_EXP 7
5160: PUSH
5161: LD_OWVAR 2
5165: ARRAY
5166: ARRAY
5167: PUSH
5168: LD_INT 1
5170: ARRAY
5171: PPUSH
5172: LD_EXP 21
5176: PUSH
5177: LD_EXP 7
5181: PUSH
5182: LD_OWVAR 2
5186: ARRAY
5187: ARRAY
5188: PUSH
5189: LD_INT 2
5191: ARRAY
5192: PPUSH
5193: CALL_OW 86
// end ; BeginBuildUp ;
5197: CALL 6300 0 0
// enable ( mpActive ) ;
5201: LD_INT 100
5203: ENABLE_MARKED
// enable ( mpGameType ) ;
5204: LD_EXP 3
5208: ENABLE_MARKED
// mpGameActive := true ;
5209: LD_ADDR_EXP 39
5213: PUSH
5214: LD_INT 1
5216: ST_TO_ADDR
// end ;
5217: LD_VAR 0 1
5221: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class , commander ; begin
5222: LD_INT 0
5224: PPUSH
5225: PPUSH
5226: PPUSH
5227: PPUSH
5228: PPUSH
// result := [ ] ;
5229: LD_ADDR_VAR 0 5
5233: PUSH
5234: EMPTY
5235: ST_TO_ADDR
// class := class_soldier ;
5236: LD_ADDR_VAR 0 8
5240: PUSH
5241: LD_INT 1
5243: ST_TO_ADDR
// uc_side := side ;
5244: LD_ADDR_OWVAR 20
5248: PUSH
5249: LD_VAR 0 1
5253: ST_TO_ADDR
// uc_nation := nation ;
5254: LD_ADDR_OWVAR 21
5258: PUSH
5259: LD_VAR 0 2
5263: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
5264: LD_ADDR_OWVAR 26
5268: PUSH
5269: LD_OWVAR 19
5273: PUSH
5274: LD_VAR 0 1
5278: ARRAY
5279: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
5280: LD_INT 1
5282: PPUSH
5283: LD_INT 2
5285: PPUSH
5286: CALL_OW 12
5290: PPUSH
5291: LD_VAR 0 8
5295: PPUSH
5296: LD_VAR 0 4
5300: PUSH
5301: LD_INT 2
5303: PLUS
5304: PPUSH
5305: CALL_OW 380
// hc_importance := 105 ;
5309: LD_ADDR_OWVAR 32
5313: PUSH
5314: LD_INT 105
5316: ST_TO_ADDR
// if Multiplayer then
5317: LD_OWVAR 4
5321: IFFALSE 5361
// begin hc_gallery := MULTIAVATARS ;
5323: LD_ADDR_OWVAR 33
5327: PUSH
5328: LD_STRING MULTIAVATARS
5330: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
5331: LD_ADDR_OWVAR 34
5335: PUSH
5336: LD_VAR 0 1
5340: PPUSH
5341: CALL_OW 525
5345: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
5346: LD_ADDR_OWVAR 27
5350: PUSH
5351: LD_VAR 0 1
5355: PPUSH
5356: CALL_OW 526
5360: ST_TO_ADDR
// end ; commander := CreateHuman ;
5361: LD_ADDR_VAR 0 9
5365: PUSH
5366: CALL_OW 44
5370: ST_TO_ADDR
// result := Join ( result , commander ) ;
5371: LD_ADDR_VAR 0 5
5375: PUSH
5376: LD_VAR 0 5
5380: PPUSH
5381: LD_VAR 0 9
5385: PPUSH
5386: CALL 49340 0 2
5390: ST_TO_ADDR
// mpCommanders := Replace ( mpCommanders , side , commander ) ;
5391: LD_ADDR_EXP 41
5395: PUSH
5396: LD_EXP 41
5400: PPUSH
5401: LD_VAR 0 1
5405: PPUSH
5406: LD_VAR 0 9
5410: PPUSH
5411: CALL_OW 1
5415: ST_TO_ADDR
// if mpTeamPreset then
5416: LD_LOC 1
5420: IFFALSE 5516
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
5422: LD_LOC 1
5426: PUSH
5427: LD_INT 1
5429: ARRAY
5430: PPUSH
5431: LD_VAR 0 5
5435: PUSH
5436: LD_VAR 0 5
5440: ARRAY
5441: PPUSH
5442: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
5446: LD_VAR 0 5
5450: PUSH
5451: LD_VAR 0 5
5455: ARRAY
5456: PPUSH
5457: LD_INT 1
5459: PPUSH
5460: LD_LOC 1
5464: PUSH
5465: LD_INT 1
5467: ARRAY
5468: PPUSH
5469: LD_INT 1
5471: PPUSH
5472: CALL_OW 260
5476: PPUSH
5477: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
5481: LD_VAR 0 5
5485: PUSH
5486: LD_VAR 0 5
5490: ARRAY
5491: PPUSH
5492: LD_INT 2
5494: PPUSH
5495: LD_LOC 1
5499: PUSH
5500: LD_INT 1
5502: ARRAY
5503: PPUSH
5504: LD_INT 2
5506: PPUSH
5507: CALL_OW 260
5511: PPUSH
5512: CALL_OW 239
// end ; InitHc_All ( ) ;
5516: CALL_OW 584
// class := 2 ;
5520: LD_ADDR_VAR 0 8
5524: PUSH
5525: LD_INT 2
5527: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
5528: LD_ADDR_VAR 0 6
5532: PUSH
5533: DOUBLE
5534: LD_INT 1
5536: DEC
5537: ST_TO_ADDR
5538: LD_VAR 0 3
5542: PUSH
5543: LD_INT 1
5545: MINUS
5546: PUSH
5547: FOR_TO
5548: IFFALSE 5743
// begin PrepareHuman ( false , class , skill ) ;
5550: LD_INT 0
5552: PPUSH
5553: LD_VAR 0 8
5557: PPUSH
5558: LD_VAR 0 4
5562: PPUSH
5563: CALL_OW 380
// un := CreateHuman ;
5567: LD_ADDR_VAR 0 7
5571: PUSH
5572: CALL_OW 44
5576: ST_TO_ADDR
// result := Join ( result , un ) ;
5577: LD_ADDR_VAR 0 5
5581: PUSH
5582: LD_VAR 0 5
5586: PPUSH
5587: LD_VAR 0 7
5591: PPUSH
5592: CALL 49340 0 2
5596: ST_TO_ADDR
// if Count ( mpTeamPreset ) >= amount then
5597: LD_LOC 1
5601: PPUSH
5602: CALL 13364 0 1
5606: PUSH
5607: LD_VAR 0 3
5611: GREATEREQUAL
5612: IFFALSE 5708
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
5614: LD_LOC 1
5618: PUSH
5619: LD_VAR 0 6
5623: PUSH
5624: LD_INT 1
5626: PLUS
5627: ARRAY
5628: PPUSH
5629: LD_VAR 0 7
5633: PPUSH
5634: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
5638: LD_VAR 0 7
5642: PPUSH
5643: LD_INT 1
5645: PPUSH
5646: LD_LOC 1
5650: PUSH
5651: LD_VAR 0 6
5655: PUSH
5656: LD_INT 1
5658: PLUS
5659: ARRAY
5660: PPUSH
5661: LD_INT 1
5663: PPUSH
5664: CALL_OW 260
5668: PPUSH
5669: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
5673: LD_VAR 0 7
5677: PPUSH
5678: LD_INT 2
5680: PPUSH
5681: LD_LOC 1
5685: PUSH
5686: LD_VAR 0 6
5690: PUSH
5691: LD_INT 1
5693: PLUS
5694: ARRAY
5695: PPUSH
5696: LD_INT 2
5698: PPUSH
5699: CALL_OW 260
5703: PPUSH
5704: CALL_OW 239
// end ; class := Inc ( class ) ;
5708: LD_ADDR_VAR 0 8
5712: PUSH
5713: LD_VAR 0 8
5717: PPUSH
5718: CALL 50713 0 1
5722: ST_TO_ADDR
// if class = 5 then
5723: LD_VAR 0 8
5727: PUSH
5728: LD_INT 5
5730: EQUAL
5731: IFFALSE 5741
// class := 1 ;
5733: LD_ADDR_VAR 0 8
5737: PUSH
5738: LD_INT 1
5740: ST_TO_ADDR
// end ;
5741: GO 5547
5743: POP
5744: POP
// if not mpTeamPreset then
5745: LD_LOC 1
5749: NOT
5750: IFFALSE 5762
// mpTeamPreset := result ;
5752: LD_ADDR_LOC 1
5756: PUSH
5757: LD_VAR 0 5
5761: ST_TO_ADDR
// end ;
5762: LD_VAR 0 5
5766: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
5767: LD_INT 0
5769: PPUSH
5770: PPUSH
// result := [ ] ;
5771: LD_ADDR_VAR 0 4
5775: PUSH
5776: EMPTY
5777: ST_TO_ADDR
// if not vehicles then
5778: LD_VAR 0 3
5782: NOT
5783: IFFALSE 5787
// exit ;
5785: GO 6001
// for i := 1 to vehicles [ nation ] do
5787: LD_ADDR_VAR 0 5
5791: PUSH
5792: DOUBLE
5793: LD_INT 1
5795: DEC
5796: ST_TO_ADDR
5797: LD_VAR 0 3
5801: PUSH
5802: LD_VAR 0 2
5806: ARRAY
5807: PUSH
5808: FOR_TO
5809: IFFALSE 5999
// begin uc_side := side ;
5811: LD_ADDR_OWVAR 20
5815: PUSH
5816: LD_VAR 0 1
5820: ST_TO_ADDR
// if Count ( vehicles [ nation ] [ i ] ) > 4 then
5821: LD_VAR 0 3
5825: PUSH
5826: LD_VAR 0 2
5830: ARRAY
5831: PUSH
5832: LD_VAR 0 5
5836: ARRAY
5837: PPUSH
5838: CALL 13364 0 1
5842: PUSH
5843: LD_INT 4
5845: GREATER
5846: IFFALSE 5876
// uc_nation := vehicles [ nation ] [ i ] [ 5 ] else
5848: LD_ADDR_OWVAR 21
5852: PUSH
5853: LD_VAR 0 3
5857: PUSH
5858: LD_VAR 0 2
5862: ARRAY
5863: PUSH
5864: LD_VAR 0 5
5868: ARRAY
5869: PUSH
5870: LD_INT 5
5872: ARRAY
5873: ST_TO_ADDR
5874: GO 5886
// uc_nation := nation ;
5876: LD_ADDR_OWVAR 21
5880: PUSH
5881: LD_VAR 0 2
5885: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
5886: LD_VAR 0 3
5890: PUSH
5891: LD_VAR 0 2
5895: ARRAY
5896: PUSH
5897: LD_VAR 0 5
5901: ARRAY
5902: PUSH
5903: LD_INT 1
5905: ARRAY
5906: PPUSH
5907: LD_VAR 0 3
5911: PUSH
5912: LD_VAR 0 2
5916: ARRAY
5917: PUSH
5918: LD_VAR 0 5
5922: ARRAY
5923: PUSH
5924: LD_INT 2
5926: ARRAY
5927: PPUSH
5928: LD_VAR 0 3
5932: PUSH
5933: LD_VAR 0 2
5937: ARRAY
5938: PUSH
5939: LD_VAR 0 5
5943: ARRAY
5944: PUSH
5945: LD_INT 3
5947: ARRAY
5948: PPUSH
5949: LD_VAR 0 3
5953: PUSH
5954: LD_VAR 0 2
5958: ARRAY
5959: PUSH
5960: LD_VAR 0 5
5964: ARRAY
5965: PUSH
5966: LD_INT 4
5968: ARRAY
5969: PPUSH
5970: LD_INT 80
5972: PPUSH
5973: CALL 16160 0 5
// result := Join ( result , CreateVehicle ) ;
5977: LD_ADDR_VAR 0 4
5981: PUSH
5982: LD_VAR 0 4
5986: PPUSH
5987: CALL_OW 45
5991: PPUSH
5992: CALL 49340 0 2
5996: ST_TO_ADDR
// end ;
5997: GO 5808
5999: POP
6000: POP
// end ;
6001: LD_VAR 0 4
6005: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
6006: LD_INT 0
6008: PPUSH
6009: PPUSH
// for i in mpBattleFlags do
6010: LD_ADDR_VAR 0 3
6014: PUSH
6015: LD_EXP 23
6019: PUSH
6020: FOR_IN
6021: IFFALSE 6098
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
6023: LD_VAR 0 3
6027: PPUSH
6028: LD_INT 1
6030: PUSH
6031: LD_VAR 0 1
6035: PUSH
6036: EMPTY
6037: LIST
6038: LIST
6039: PUSH
6040: LD_INT 2
6042: PUSH
6043: LD_VAR 0 1
6047: PUSH
6048: LD_REAL  7.00000000000000E-0001
6051: MUL
6052: PUSH
6053: EMPTY
6054: LIST
6055: LIST
6056: PUSH
6057: LD_INT 3
6059: PUSH
6060: LD_VAR 0 1
6064: PUSH
6065: LD_REAL  4.00000000000000E-0001
6068: MUL
6069: PUSH
6070: EMPTY
6071: LIST
6072: LIST
6073: PUSH
6074: LD_INT 20
6076: PUSH
6077: LD_VAR 0 1
6081: PUSH
6082: EMPTY
6083: LIST
6084: LIST
6085: PUSH
6086: EMPTY
6087: LIST
6088: LIST
6089: LIST
6090: LIST
6091: PPUSH
6092: CALL_OW 423
6096: GO 6020
6098: POP
6099: POP
// end ;
6100: LD_VAR 0 2
6104: RET
// every 0 0$1 trigger mpActive do var i , strength ;
6105: LD_INT 100
6107: IFFALSE 6202
6109: GO 6111
6111: DISABLE
6112: LD_INT 0
6114: PPUSH
6115: PPUSH
// begin if mpBattleFlag <= 0 then
6116: LD_EXP 22
6120: PUSH
6121: LD_INT 0
6123: LESSEQUAL
6124: IFFALSE 6128
// exit ;
6126: GO 6202
// strength := 100 ;
6128: LD_ADDR_VAR 0 2
6132: PUSH
6133: LD_INT 100
6135: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
6136: LD_EXP 22
6140: PPUSH
6141: CALL_OW 67
// strength := Dec ( strength ) ;
6145: LD_ADDR_VAR 0 2
6149: PUSH
6150: LD_VAR 0 2
6154: PPUSH
6155: CALL 50735 0 1
6159: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
6160: LD_VAR 0 2
6164: PPUSH
6165: CALL 6006 0 1
// until not strength ;
6169: LD_VAR 0 2
6173: NOT
6174: IFFALSE 6136
// for i in mpBattleFlags do
6176: LD_ADDR_VAR 0 1
6180: PUSH
6181: LD_EXP 23
6185: PUSH
6186: FOR_IN
6187: IFFALSE 6200
// KillBattleFlag ( i ) ;
6189: LD_VAR 0 1
6193: PPUSH
6194: CALL_OW 419
6198: GO 6186
6200: POP
6201: POP
// end ;
6202: PPOPN 2
6204: END
// every 0 0$1 marked mpActive do var side , tmp ;
6205: GO 6207
6207: DISABLE
6208: LD_INT 0
6210: PPUSH
6211: PPUSH
// begin if mpSibBomb <= 1 then
6212: LD_EXP 28
6216: PUSH
6217: LD_INT 1
6219: LESSEQUAL
6220: IFFALSE 6224
// exit ;
6222: GO 6297
// tmp := mpSibBomb ;
6224: LD_ADDR_VAR 0 2
6228: PUSH
6229: LD_EXP 28
6233: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6234: LD_INT 35
6236: PPUSH
6237: CALL_OW 67
// tmp := tmp - 0 0$1 ;
6241: LD_ADDR_VAR 0 2
6245: PUSH
6246: LD_VAR 0 2
6250: PUSH
6251: LD_INT 35
6253: MINUS
6254: ST_TO_ADDR
// until not tmp ;
6255: LD_VAR 0 2
6259: NOT
6260: IFFALSE 6234
// for side := 1 to 8 do
6262: LD_ADDR_VAR 0 1
6266: PUSH
6267: DOUBLE
6268: LD_INT 1
6270: DEC
6271: ST_TO_ADDR
6272: LD_INT 8
6274: PUSH
6275: FOR_TO
6276: IFFALSE 6295
// SetTech ( tech_SibFiss , side , state_enabled ) ;
6278: LD_INT 25
6280: PPUSH
6281: LD_VAR 0 1
6285: PPUSH
6286: LD_INT 1
6288: PPUSH
6289: CALL_OW 322
6293: GO 6275
6295: POP
6296: POP
// end ;
6297: PPOPN 2
6299: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
6300: LD_INT 0
6302: PPUSH
6303: PPUSH
6304: PPUSH
// mpBuildUpTimeDelay := 0 ;
6305: LD_ADDR_EXP 48
6309: PUSH
6310: LD_INT 0
6312: ST_TO_ADDR
// if not mpBuildUpTime then
6313: LD_EXP 20
6317: NOT
6318: IFFALSE 6322
// exit ;
6320: GO 6511
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
6322: LD_ADDR_EXP 48
6326: PUSH
6327: LD_INT 8400
6329: PUSH
6330: LD_INT 2100
6332: PUSH
6333: LD_EXP 20
6337: MUL
6338: PLUS
6339: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
6340: LD_ADDR_EXP 49
6344: PUSH
6345: LD_INT 1
6347: ST_TO_ADDR
// for i := 1 to 8 do
6348: LD_ADDR_VAR 0 2
6352: PUSH
6353: DOUBLE
6354: LD_INT 1
6356: DEC
6357: ST_TO_ADDR
6358: LD_INT 8
6360: PUSH
6361: FOR_TO
6362: IFFALSE 6509
// if mpSidePositions [ i ] then
6364: LD_EXP 7
6368: PUSH
6369: LD_VAR 0 2
6373: ARRAY
6374: IFFALSE 6507
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
6376: LD_EXP 19
6380: PUSH
6381: LD_EXP 7
6385: PUSH
6386: LD_VAR 0 2
6390: ARRAY
6391: ARRAY
6392: PPUSH
6393: LD_INT 5
6395: PPUSH
6396: CALL_OW 424
// for j := 1 to 8 do
6400: LD_ADDR_VAR 0 3
6404: PUSH
6405: DOUBLE
6406: LD_INT 1
6408: DEC
6409: ST_TO_ADDR
6410: LD_INT 8
6412: PUSH
6413: FOR_TO
6414: IFFALSE 6505
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6416: LD_EXP 7
6420: PUSH
6421: LD_VAR 0 3
6425: ARRAY
6426: IFFALSE 6475
6428: PUSH
6429: LD_EXP 8
6433: PUSH
6434: LD_VAR 0 2
6438: ARRAY
6439: PUSH
6440: LD_EXP 8
6444: PUSH
6445: LD_VAR 0 3
6449: ARRAY
6450: NONEQUAL
6451: IFTRUE 6474
6453: PUSH
6454: LD_EXP 11
6458: NOT
6459: IFFALSE 6473
6461: PUSH
6462: LD_VAR 0 2
6466: PUSH
6467: LD_VAR 0 3
6471: NONEQUAL
6472: AND
6473: OR
6474: AND
6475: IFFALSE 6503
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6477: LD_VAR 0 3
6481: PPUSH
6482: LD_EXP 19
6486: PUSH
6487: LD_EXP 7
6491: PUSH
6492: LD_VAR 0 2
6496: ARRAY
6497: ARRAY
6498: PPUSH
6499: CALL_OW 333
6503: GO 6413
6505: POP
6506: POP
// end ;
6507: GO 6361
6509: POP
6510: POP
// end ;
6511: LD_VAR 0 1
6515: RET
// function EndBuildUp ; var i , j ; begin
6516: LD_INT 0
6518: PPUSH
6519: PPUSH
6520: PPUSH
// mpBuildUpTimeActive := false ;
6521: LD_ADDR_EXP 49
6525: PUSH
6526: LD_INT 0
6528: ST_TO_ADDR
// for i := 1 to 8 do
6529: LD_ADDR_VAR 0 2
6533: PUSH
6534: DOUBLE
6535: LD_INT 1
6537: DEC
6538: ST_TO_ADDR
6539: LD_INT 8
6541: PUSH
6542: FOR_TO
6543: IFFALSE 6690
// if mpSidePositions [ i ] then
6545: LD_EXP 7
6549: PUSH
6550: LD_VAR 0 2
6554: ARRAY
6555: IFFALSE 6688
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
6557: LD_EXP 19
6561: PUSH
6562: LD_EXP 7
6566: PUSH
6567: LD_VAR 0 2
6571: ARRAY
6572: ARRAY
6573: PPUSH
6574: LD_INT 0
6576: PPUSH
6577: CALL_OW 424
// for j := 1 to 8 do
6581: LD_ADDR_VAR 0 3
6585: PUSH
6586: DOUBLE
6587: LD_INT 1
6589: DEC
6590: ST_TO_ADDR
6591: LD_INT 8
6593: PUSH
6594: FOR_TO
6595: IFFALSE 6686
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6597: LD_EXP 7
6601: PUSH
6602: LD_VAR 0 3
6606: ARRAY
6607: IFFALSE 6656
6609: PUSH
6610: LD_EXP 8
6614: PUSH
6615: LD_VAR 0 2
6619: ARRAY
6620: PUSH
6621: LD_EXP 8
6625: PUSH
6626: LD_VAR 0 3
6630: ARRAY
6631: NONEQUAL
6632: IFTRUE 6655
6634: PUSH
6635: LD_EXP 11
6639: NOT
6640: IFFALSE 6654
6642: PUSH
6643: LD_VAR 0 2
6647: PUSH
6648: LD_VAR 0 3
6652: NONEQUAL
6653: AND
6654: OR
6655: AND
6656: IFFALSE 6684
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6658: LD_VAR 0 3
6662: PPUSH
6663: LD_EXP 19
6667: PUSH
6668: LD_EXP 7
6672: PUSH
6673: LD_VAR 0 2
6677: ARRAY
6678: ARRAY
6679: PPUSH
6680: CALL_OW 334
6684: GO 6594
6686: POP
6687: POP
// end ;
6688: GO 6542
6690: POP
6691: POP
// end ;
6692: LD_VAR 0 1
6696: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
6697: LD_EXP 49
6701: IFFALSE 6880
6703: GO 6705
6705: DISABLE
6706: LD_INT 0
6708: PPUSH
6709: PPUSH
// begin for i := 1 to 8 do
6710: LD_ADDR_VAR 0 1
6714: PUSH
6715: DOUBLE
6716: LD_INT 1
6718: DEC
6719: ST_TO_ADDR
6720: LD_INT 8
6722: PUSH
6723: FOR_TO
6724: IFFALSE 6877
// if mpSidePositions [ i ] then
6726: LD_EXP 7
6730: PUSH
6731: LD_VAR 0 1
6735: ARRAY
6736: IFFALSE 6875
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
6738: LD_ADDR_VAR 0 2
6742: PUSH
6743: LD_EXP 19
6747: PUSH
6748: LD_EXP 7
6752: PUSH
6753: LD_VAR 0 1
6757: ARRAY
6758: ARRAY
6759: PPUSH
6760: LD_INT 2
6762: PUSH
6763: LD_INT 21
6765: PUSH
6766: LD_INT 1
6768: PUSH
6769: EMPTY
6770: LIST
6771: LIST
6772: PUSH
6773: LD_INT 21
6775: PUSH
6776: LD_INT 2
6778: PUSH
6779: EMPTY
6780: LIST
6781: LIST
6782: PUSH
6783: EMPTY
6784: LIST
6785: LIST
6786: LIST
6787: PUSH
6788: LD_INT 22
6790: PUSH
6791: LD_OWVAR 2
6795: PUSH
6796: EMPTY
6797: LIST
6798: LIST
6799: PUSH
6800: EMPTY
6801: LIST
6802: LIST
6803: PPUSH
6804: CALL_OW 70
6808: PUSH
6809: FOR_IN
6810: IFFALSE 6873
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
6812: LD_EXP 8
6816: PUSH
6817: LD_VAR 0 1
6821: ARRAY
6822: PUSH
6823: LD_EXP 8
6827: PUSH
6828: LD_OWVAR 2
6832: ARRAY
6833: NONEQUAL
6834: IFTRUE 6857
6836: PUSH
6837: LD_EXP 11
6841: NOT
6842: IFFALSE 6856
6844: PUSH
6845: LD_VAR 0 1
6849: PUSH
6850: LD_OWVAR 2
6854: NONEQUAL
6855: AND
6856: OR
6857: IFFALSE 6871
// ComMoveToArea ( un , BuildUpEscape ) ;
6859: LD_VAR 0 2
6863: PPUSH
6864: LD_INT 9
6866: PPUSH
6867: CALL_OW 113
6871: GO 6809
6873: POP
6874: POP
6875: GO 6723
6877: POP
6878: POP
// enable ;
6879: ENABLE
// end ;
6880: PPOPN 2
6882: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
6883: LD_EXP 20
6887: IFFALSE 6937
6889: GO 6891
6891: DISABLE
6892: LD_INT 0
6894: PPUSH
// begin tmp := mpBuildUpTime ;
6895: LD_ADDR_VAR 0 1
6899: PUSH
6900: LD_EXP 20
6904: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6905: LD_INT 35
6907: PPUSH
6908: CALL_OW 67
// tmp := tmp - 0 0$1 ;
6912: LD_ADDR_VAR 0 1
6916: PUSH
6917: LD_VAR 0 1
6921: PUSH
6922: LD_INT 35
6924: MINUS
6925: ST_TO_ADDR
// until not tmp ;
6926: LD_VAR 0 1
6930: NOT
6931: IFFALSE 6905
// EndBuildUp ;
6933: CALL 6516 0 0
// end ;
6937: PPOPN 1
6939: END
// every 0 0$1 trigger mpActive marked mpWin do
6940: LD_INT 100
6942: IFFALSE 6976
6944: GO 6946
6946: DISABLE
// begin if IAmServer then
6947: CALL_OW 518
6951: IFFALSE 6960
// wait ( 0 0$3 ) ;
6953: LD_INT 105
6955: PPUSH
6956: CALL_OW 67
// if Multiplayer then
6960: LD_OWVAR 4
6964: IFFALSE 6972
// YouWinInMultiplayer else
6966: CALL_OW 106
6970: GO 6976
// YouWin ;
6972: CALL_OW 103
// end ;
6976: END
// export function HasPowerByGameType ( gameType , side ) ; begin
6977: LD_INT 0
6979: PPUSH
// result := false ;
6980: LD_ADDR_VAR 0 3
6984: PUSH
6985: LD_INT 0
6987: ST_TO_ADDR
// case gameType of GameTypeNormal , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact :
6988: LD_VAR 0 1
6992: PUSH
6993: LD_INT 1
6995: DOUBLE
6996: EQUAL
6997: IFTRUE 7019
6999: LD_INT 5
7001: DOUBLE
7002: EQUAL
7003: IFTRUE 7019
7005: LD_INT 6
7007: DOUBLE
7008: EQUAL
7009: IFTRUE 7019
7011: LD_INT 7
7013: DOUBLE
7014: EQUAL
7015: IFTRUE 7019
7017: GO 7092
7019: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
7020: LD_ADDR_VAR 0 3
7024: PUSH
7025: LD_INT 22
7027: PUSH
7028: LD_VAR 0 2
7032: PUSH
7033: EMPTY
7034: LIST
7035: LIST
7036: PUSH
7037: LD_INT 2
7039: PUSH
7040: LD_INT 21
7042: PUSH
7043: LD_INT 1
7045: PUSH
7046: EMPTY
7047: LIST
7048: LIST
7049: PUSH
7050: LD_INT 33
7052: PUSH
7053: LD_INT 3
7055: PUSH
7056: EMPTY
7057: LIST
7058: LIST
7059: PUSH
7060: LD_INT 33
7062: PUSH
7063: LD_INT 5
7065: PUSH
7066: EMPTY
7067: LIST
7068: LIST
7069: PUSH
7070: EMPTY
7071: LIST
7072: LIST
7073: LIST
7074: LIST
7075: PUSH
7076: EMPTY
7077: LIST
7078: LIST
7079: PPUSH
7080: CALL_OW 69
7084: PPUSH
7085: CALL 13364 0 1
7089: ST_TO_ADDR
// end ; GameTypeSurvival :
7090: GO 7488
7092: LD_INT 2
7094: DOUBLE
7095: EQUAL
7096: IFTRUE 7100
7098: GO 7230
7100: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
7101: LD_ADDR_VAR 0 3
7105: PUSH
7106: LD_INT 22
7108: PUSH
7109: LD_VAR 0 2
7113: PUSH
7114: EMPTY
7115: LIST
7116: LIST
7117: PUSH
7118: LD_INT 2
7120: PUSH
7121: LD_INT 30
7123: PUSH
7124: LD_INT 0
7126: PUSH
7127: EMPTY
7128: LIST
7129: LIST
7130: PUSH
7131: LD_INT 30
7133: PUSH
7134: LD_INT 1
7136: PUSH
7137: EMPTY
7138: LIST
7139: LIST
7140: PUSH
7141: EMPTY
7142: LIST
7143: LIST
7144: LIST
7145: PUSH
7146: EMPTY
7147: LIST
7148: LIST
7149: PPUSH
7150: CALL_OW 69
7154: PPUSH
7155: CALL 13364 0 1
7159: IFFALSE 7227
7161: PUSH
7162: LD_INT 22
7164: PUSH
7165: LD_VAR 0 2
7169: PUSH
7170: EMPTY
7171: LIST
7172: LIST
7173: PUSH
7174: LD_INT 2
7176: PUSH
7177: LD_INT 21
7179: PUSH
7180: LD_INT 1
7182: PUSH
7183: EMPTY
7184: LIST
7185: LIST
7186: PUSH
7187: LD_INT 33
7189: PUSH
7190: LD_INT 3
7192: PUSH
7193: EMPTY
7194: LIST
7195: LIST
7196: PUSH
7197: LD_INT 33
7199: PUSH
7200: LD_INT 5
7202: PUSH
7203: EMPTY
7204: LIST
7205: LIST
7206: PUSH
7207: EMPTY
7208: LIST
7209: LIST
7210: LIST
7211: LIST
7212: PUSH
7213: EMPTY
7214: LIST
7215: LIST
7216: PPUSH
7217: CALL_OW 69
7221: PPUSH
7222: CALL 13364 0 1
7226: AND
7227: ST_TO_ADDR
// end ; GameTypeSurvivalHardcore :
7228: GO 7488
7230: LD_INT 8
7232: DOUBLE
7233: EQUAL
7234: IFTRUE 7238
7236: GO 7387
7238: POP
// begin result := IsLive ( mpCommanders [ side ] ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
7239: LD_ADDR_VAR 0 3
7243: PUSH
7244: LD_EXP 41
7248: PUSH
7249: LD_VAR 0 2
7253: ARRAY
7254: PPUSH
7255: CALL_OW 300
7259: IFFALSE 7316
7261: PUSH
7262: LD_INT 22
7264: PUSH
7265: LD_VAR 0 2
7269: PUSH
7270: EMPTY
7271: LIST
7272: LIST
7273: PUSH
7274: LD_INT 2
7276: PUSH
7277: LD_INT 30
7279: PUSH
7280: LD_INT 0
7282: PUSH
7283: EMPTY
7284: LIST
7285: LIST
7286: PUSH
7287: LD_INT 30
7289: PUSH
7290: LD_INT 1
7292: PUSH
7293: EMPTY
7294: LIST
7295: LIST
7296: PUSH
7297: EMPTY
7298: LIST
7299: LIST
7300: LIST
7301: PUSH
7302: EMPTY
7303: LIST
7304: LIST
7305: PPUSH
7306: CALL_OW 69
7310: PPUSH
7311: CALL 13364 0 1
7315: AND
7316: IFFALSE 7384
7318: PUSH
7319: LD_INT 22
7321: PUSH
7322: LD_VAR 0 2
7326: PUSH
7327: EMPTY
7328: LIST
7329: LIST
7330: PUSH
7331: LD_INT 2
7333: PUSH
7334: LD_INT 21
7336: PUSH
7337: LD_INT 1
7339: PUSH
7340: EMPTY
7341: LIST
7342: LIST
7343: PUSH
7344: LD_INT 33
7346: PUSH
7347: LD_INT 3
7349: PUSH
7350: EMPTY
7351: LIST
7352: LIST
7353: PUSH
7354: LD_INT 33
7356: PUSH
7357: LD_INT 5
7359: PUSH
7360: EMPTY
7361: LIST
7362: LIST
7363: PUSH
7364: EMPTY
7365: LIST
7366: LIST
7367: LIST
7368: LIST
7369: PUSH
7370: EMPTY
7371: LIST
7372: LIST
7373: PPUSH
7374: CALL_OW 69
7378: PPUSH
7379: CALL 13364 0 1
7383: AND
7384: ST_TO_ADDR
// end ; GameTypeKing :
7385: GO 7488
7387: LD_INT 3
7389: DOUBLE
7390: EQUAL
7391: IFTRUE 7395
7393: GO 7487
7395: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
7396: LD_ADDR_VAR 0 3
7400: PUSH
7401: LD_INT 22
7403: PUSH
7404: LD_VAR 0 2
7408: PUSH
7409: EMPTY
7410: LIST
7411: LIST
7412: PUSH
7413: LD_INT 2
7415: PUSH
7416: LD_INT 21
7418: PUSH
7419: LD_INT 1
7421: PUSH
7422: EMPTY
7423: LIST
7424: LIST
7425: PUSH
7426: LD_INT 33
7428: PUSH
7429: LD_INT 3
7431: PUSH
7432: EMPTY
7433: LIST
7434: LIST
7435: PUSH
7436: LD_INT 33
7438: PUSH
7439: LD_INT 5
7441: PUSH
7442: EMPTY
7443: LIST
7444: LIST
7445: PUSH
7446: EMPTY
7447: LIST
7448: LIST
7449: LIST
7450: LIST
7451: PUSH
7452: EMPTY
7453: LIST
7454: LIST
7455: PPUSH
7456: CALL_OW 69
7460: PPUSH
7461: CALL 13364 0 1
7465: IFFALSE 7484
7467: PUSH
7468: LD_VAR 0 2
7472: PPUSH
7473: CALL 62352 0 1
7477: PUSH
7478: LD_EXP 35
7482: LESS
7483: AND
7484: ST_TO_ADDR
// end ; end ;
7485: GO 7488
7487: POP
// end ;
7488: LD_VAR 0 3
7492: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
7493: LD_INT 100
7495: IFFALSE 7725
7497: GO 7499
7499: DISABLE
7500: LD_INT 0
7502: PPUSH
7503: PPUSH
// begin if Multiplayer then
7504: LD_OWVAR 4
7508: IFFALSE 7516
// SetPlayerSpectator ( ) else
7510: CALL_OW 572
7514: GO 7525
// FogOff ( your_side ) ;
7516: LD_OWVAR 2
7520: PPUSH
7521: CALL_OW 344
// repeat gameIsOn := false ;
7525: LD_ADDR_VAR 0 1
7529: PUSH
7530: LD_INT 0
7532: ST_TO_ADDR
// for i := 1 to 8 do
7533: LD_ADDR_VAR 0 2
7537: PUSH
7538: DOUBLE
7539: LD_INT 1
7541: DEC
7542: ST_TO_ADDR
7543: LD_INT 8
7545: PUSH
7546: FOR_TO
7547: IFFALSE 7677
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
7549: LD_EXP 7
7553: PUSH
7554: LD_VAR 0 2
7558: ARRAY
7559: IFFALSE 7572
7561: PUSH
7562: LD_VAR 0 2
7566: PPUSH
7567: CALL_OW 108
7571: AND
7572: IFFALSE 7586
7574: PUSH
7575: LD_VAR 0 2
7579: PUSH
7580: LD_OWVAR 2
7584: NONEQUAL
7585: AND
7586: IFFALSE 7675
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
7588: LD_EXP 8
7592: PUSH
7593: LD_VAR 0 2
7597: ARRAY
7598: NOT
7599: IFTRUE 7647
7601: PUSH
7602: LD_EXP 8
7606: PUSH
7607: LD_VAR 0 2
7611: ARRAY
7612: PUSH
7613: LD_EXP 8
7617: PUSH
7618: LD_OWVAR 2
7622: ARRAY
7623: NONEQUAL
7624: IFFALSE 7646
7626: PUSH
7627: LD_OWVAR 2
7631: PPUSH
7632: LD_VAR 0 2
7636: PPUSH
7637: CALL_OW 81
7641: PUSH
7642: LD_INT 1
7644: NONEQUAL
7645: AND
7646: OR
7647: IFFALSE 7675
// if HasPowerByGameType ( mpGameType , i ) then
7649: LD_EXP 3
7653: PPUSH
7654: LD_VAR 0 2
7658: PPUSH
7659: CALL 6977 0 2
7663: IFFALSE 7675
// begin gameIsOn := true ;
7665: LD_ADDR_VAR 0 1
7669: PUSH
7670: LD_INT 1
7672: ST_TO_ADDR
// break ;
7673: GO 7677
// end ;
7675: GO 7546
7677: POP
7678: POP
// wait ( 100 ) ;
7679: LD_INT 100
7681: PPUSH
7682: CALL_OW 67
// until not gameIsOn ;
7686: LD_VAR 0 1
7690: NOT
7691: IFFALSE 7525
// if IAmServer then
7693: CALL_OW 518
7697: IFFALSE 7706
// wait ( 0 0$3 ) ;
7699: LD_INT 105
7701: PPUSH
7702: CALL_OW 67
// if Multiplayer then
7706: LD_OWVAR 4
7710: IFFALSE 7718
// YouLostInMultiplayer else
7712: CALL_OW 107
7716: GO 7725
// YouLost (  ) ;
7718: LD_STRING 
7720: PPUSH
7721: CALL_OW 104
// end ;
7725: PPOPN 2
7727: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
7728: LD_EXP 33
7732: IFFALSE 8116
7734: GO 7736
7736: DISABLE
7737: LD_INT 0
7739: PPUSH
7740: PPUSH
7741: PPUSH
7742: PPUSH
7743: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
7744: LD_ADDR_VAR 0 5
7748: PUSH
7749: LD_INT 1
7751: PUSH
7752: LD_INT 2
7754: PUSH
7755: LD_INT 3
7757: PUSH
7758: LD_INT 4
7760: PUSH
7761: LD_INT 5
7763: PUSH
7764: LD_INT 6
7766: PUSH
7767: LD_INT 7
7769: PUSH
7770: LD_INT 8
7772: PUSH
7773: EMPTY
7774: LIST
7775: LIST
7776: LIST
7777: LIST
7778: LIST
7779: LIST
7780: LIST
7781: LIST
7782: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
7783: LD_INT 350
7785: PPUSH
7786: CALL_OW 67
// for i := 1 to 8 do
7790: LD_ADDR_VAR 0 1
7794: PUSH
7795: DOUBLE
7796: LD_INT 1
7798: DEC
7799: ST_TO_ADDR
7800: LD_INT 8
7802: PUSH
7803: FOR_TO
7804: IFFALSE 8086
// begin j := sides [ i ] ;
7806: LD_ADDR_VAR 0 2
7810: PUSH
7811: LD_VAR 0 5
7815: PUSH
7816: LD_VAR 0 1
7820: ARRAY
7821: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
7822: LD_EXP 40
7826: PUSH
7827: LD_VAR 0 2
7831: ARRAY
7832: PPUSH
7833: CALL 13364 0 1
7837: IFFALSE 7850
7839: PUSH
7840: LD_VAR 0 2
7844: PPUSH
7845: CALL_OW 108
7849: AND
7850: IFFALSE 7868
7852: PUSH
7853: LD_EXP 3
7857: PPUSH
7858: LD_VAR 0 2
7862: PPUSH
7863: CALL 6977 0 2
7867: AND
7868: IFFALSE 8084
// begin wait ( mpRespawn div 2 ) ;
7870: LD_EXP 33
7874: PUSH
7875: LD_INT 2
7877: DIV
7878: PPUSH
7879: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7883: LD_ADDR_VAR 0 3
7887: PUSH
7888: LD_INT 22
7890: PUSH
7891: LD_VAR 0 2
7895: PUSH
7896: EMPTY
7897: LIST
7898: LIST
7899: PUSH
7900: LD_INT 50
7902: PUSH
7903: EMPTY
7904: LIST
7905: PUSH
7906: LD_INT 2
7908: PUSH
7909: LD_INT 30
7911: PUSH
7912: LD_INT 0
7914: PUSH
7915: EMPTY
7916: LIST
7917: LIST
7918: PUSH
7919: LD_INT 30
7921: PUSH
7922: LD_INT 1
7924: PUSH
7925: EMPTY
7926: LIST
7927: LIST
7928: PUSH
7929: EMPTY
7930: LIST
7931: LIST
7932: LIST
7933: PUSH
7934: EMPTY
7935: LIST
7936: LIST
7937: LIST
7938: PPUSH
7939: CALL_OW 69
7943: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
7944: LD_VAR 0 3
7948: NOT
7949: IFTRUE 7963
7951: PUSH
7952: LD_VAR 0 2
7956: PPUSH
7957: CALL_OW 108
7961: NOT
7962: OR
7963: IFTRUE 7982
7965: PUSH
7966: LD_EXP 3
7970: PPUSH
7971: LD_VAR 0 2
7975: PPUSH
7976: CALL 6977 0 2
7980: NOT
7981: OR
7982: IFFALSE 7986
// continue ;
7984: GO 7803
// spawn := tmp [ 1 ] ;
7986: LD_ADDR_VAR 0 4
7990: PUSH
7991: LD_VAR 0 3
7995: PUSH
7996: LD_INT 1
7998: ARRAY
7999: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
8000: LD_EXP 40
8004: PUSH
8005: LD_VAR 0 2
8009: ARRAY
8010: PUSH
8011: LD_INT 1
8013: ARRAY
8014: PPUSH
8015: LD_VAR 0 4
8019: PPUSH
8020: CALL_OW 250
8024: PPUSH
8025: LD_VAR 0 4
8029: PPUSH
8030: CALL_OW 251
8034: PPUSH
8035: LD_INT 32
8037: PPUSH
8038: LD_INT 1
8040: PPUSH
8041: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
8045: LD_ADDR_EXP 40
8049: PUSH
8050: LD_EXP 40
8054: PPUSH
8055: LD_VAR 0 2
8059: PPUSH
8060: LD_EXP 40
8064: PUSH
8065: LD_VAR 0 2
8069: ARRAY
8070: PPUSH
8071: LD_INT 1
8073: PPUSH
8074: CALL_OW 3
8078: PPUSH
8079: CALL_OW 1
8083: ST_TO_ADDR
// end ; end ;
8084: GO 7803
8086: POP
8087: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
8088: LD_ADDR_VAR 0 5
8092: PUSH
8093: LD_VAR 0 5
8097: PPUSH
8098: LD_INT 1
8100: PPUSH
8101: LD_INT 8
8103: PPUSH
8104: LD_INT 1
8106: PPUSH
8107: CALL 15690 0 4
8111: ST_TO_ADDR
// until false ;
8112: LD_INT 0
8114: IFFALSE 7783
// end ;
8116: PPOPN 5
8118: END
// every 0 0$1 marked mpActive do
8119: GO 8121
8121: DISABLE
// begin enable ;
8122: ENABLE
// if not mpDisplayStrings then
8123: LD_EXP 38
8127: NOT
8128: IFFALSE 8139
// begin display_strings := [ ] ;
8130: LD_ADDR_OWVAR 47
8134: PUSH
8135: EMPTY
8136: ST_TO_ADDR
// exit ;
8137: GO 8149
// end ; display_strings := mpDisplayStrings ;
8139: LD_ADDR_OWVAR 47
8143: PUSH
8144: LD_EXP 38
8148: ST_TO_ADDR
// end ; end_of_file
8149: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
8150: LD_INT 0
8152: PPUSH
8153: PPUSH
8154: PPUSH
8155: PPUSH
8156: PPUSH
8157: PPUSH
8158: PPUSH
8159: PPUSH
8160: PPUSH
// if GetType ( un ) = unit_vehicle then
8161: LD_VAR 0 1
8165: PPUSH
8166: CALL_OW 247
8170: PUSH
8171: LD_INT 2
8173: EQUAL
8174: IFFALSE 8178
// exit ;
8176: GO 8951
// side := GetSide ( un ) ;
8178: LD_ADDR_VAR 0 9
8182: PUSH
8183: LD_VAR 0 1
8187: PPUSH
8188: CALL_OW 255
8192: ST_TO_ADDR
// if mpGameType in [ GameTypeSurvival , GameTypeSurvivalHardcore ] then
8193: LD_EXP 3
8197: PUSH
8198: LD_INT 2
8200: PUSH
8201: LD_INT 8
8203: PUSH
8204: EMPTY
8205: LIST
8206: LIST
8207: IN
8208: IFFALSE 8302
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
8210: LD_VAR 0 1
8214: PPUSH
8215: CALL_OW 266
8219: PUSH
8220: LD_INT 0
8222: PUSH
8223: LD_INT 1
8225: PUSH
8226: EMPTY
8227: LIST
8228: LIST
8229: IN
8230: IFFALSE 8302
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
8232: LD_ADDR_VAR 0 3
8236: PUSH
8237: LD_INT 22
8239: PUSH
8240: LD_VAR 0 9
8244: PUSH
8245: EMPTY
8246: LIST
8247: LIST
8248: PUSH
8249: LD_INT 2
8251: PUSH
8252: LD_INT 21
8254: PUSH
8255: LD_INT 1
8257: PUSH
8258: EMPTY
8259: LIST
8260: LIST
8261: PUSH
8262: LD_INT 33
8264: PUSH
8265: LD_INT 3
8267: PUSH
8268: EMPTY
8269: LIST
8270: LIST
8271: PUSH
8272: EMPTY
8273: LIST
8274: LIST
8275: LIST
8276: PUSH
8277: EMPTY
8278: LIST
8279: LIST
8280: PPUSH
8281: CALL_OW 69
8285: PUSH
8286: FOR_IN
8287: IFFALSE 8300
// KillUnit ( i ) ;
8289: LD_VAR 0 3
8293: PPUSH
8294: CALL_OW 66
8298: GO 8286
8300: POP
8301: POP
// end ; if mpGameType = GameTypeSurvivalHardcore then
8302: LD_EXP 3
8306: PUSH
8307: LD_INT 8
8309: EQUAL
8310: IFFALSE 8394
// if un in mpCommanders then
8312: LD_VAR 0 1
8316: PUSH
8317: LD_EXP 41
8321: IN
8322: IFFALSE 8394
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
8324: LD_ADDR_VAR 0 3
8328: PUSH
8329: LD_INT 22
8331: PUSH
8332: LD_VAR 0 9
8336: PUSH
8337: EMPTY
8338: LIST
8339: LIST
8340: PUSH
8341: LD_INT 2
8343: PUSH
8344: LD_INT 21
8346: PUSH
8347: LD_INT 1
8349: PUSH
8350: EMPTY
8351: LIST
8352: LIST
8353: PUSH
8354: LD_INT 33
8356: PUSH
8357: LD_INT 3
8359: PUSH
8360: EMPTY
8361: LIST
8362: LIST
8363: PUSH
8364: EMPTY
8365: LIST
8366: LIST
8367: LIST
8368: PUSH
8369: EMPTY
8370: LIST
8371: LIST
8372: PPUSH
8373: CALL_OW 69
8377: PUSH
8378: FOR_IN
8379: IFFALSE 8392
// KillUnit ( i ) ;
8381: LD_VAR 0 3
8385: PPUSH
8386: CALL_OW 66
8390: GO 8378
8392: POP
8393: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
8394: LD_VAR 0 1
8398: PPUSH
8399: CALL_OW 257
8403: PUSH
8404: LD_INT 12
8406: PUSH
8407: LD_INT 17
8409: PUSH
8410: LD_INT 15
8412: PUSH
8413: LD_INT 16
8415: PUSH
8416: EMPTY
8417: LIST
8418: LIST
8419: LIST
8420: LIST
8421: IN
8422: IFTRUE 8439
8424: PUSH
8425: LD_VAR 0 1
8429: PPUSH
8430: CALL_OW 263
8434: PUSH
8435: LD_INT 5
8437: EQUAL
8438: OR
8439: IFFALSE 8676
// begin tag := 0 ;
8441: LD_ADDR_VAR 0 5
8445: PUSH
8446: LD_INT 0
8448: ST_TO_ADDR
// for i := 1 to 8 do
8449: LD_ADDR_VAR 0 3
8453: PUSH
8454: DOUBLE
8455: LD_INT 1
8457: DEC
8458: ST_TO_ADDR
8459: LD_INT 8
8461: PUSH
8462: FOR_TO
8463: IFFALSE 8497
// if un in mpApePosIndex [ i ] then
8465: LD_VAR 0 1
8469: PUSH
8470: LD_EXP 32
8474: PUSH
8475: LD_VAR 0 3
8479: ARRAY
8480: IN
8481: IFFALSE 8495
// begin tag := i ;
8483: LD_ADDR_VAR 0 5
8487: PUSH
8488: LD_VAR 0 3
8492: ST_TO_ADDR
// break ;
8493: GO 8497
// end ;
8495: GO 8462
8497: POP
8498: POP
// if not tag then
8499: LD_VAR 0 5
8503: NOT
8504: IFFALSE 8508
// exit ;
8506: GO 8951
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
8508: LD_ADDR_VAR 0 7
8512: PUSH
8513: LD_EXP 31
8517: PUSH
8518: LD_EXP 7
8522: PUSH
8523: LD_VAR 0 5
8527: ARRAY
8528: ARRAY
8529: ST_TO_ADDR
// if not area then
8530: LD_VAR 0 7
8534: NOT
8535: IFFALSE 8539
// exit ;
8537: GO 8951
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
8539: LD_INT 14700
8541: PUSH
8542: LD_VAR 0 1
8546: PUSH
8547: LD_INT 5
8549: MOD
8550: PUSH
8551: LD_INT 1
8553: PLUS
8554: PUSH
8555: LD_INT 700
8557: MUL
8558: PLUS
8559: PPUSH
8560: CALL_OW 67
// repeat wait ( 10 ) ;
8564: LD_INT 10
8566: PPUSH
8567: CALL_OW 67
// until not mpBlockRespThread ;
8571: LD_EXP 47
8575: NOT
8576: IFFALSE 8564
// mpBlockRespThread := true ;
8578: LD_ADDR_EXP 47
8582: PUSH
8583: LD_INT 1
8585: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
8586: LD_INT 0
8588: PPUSH
8589: CALL 45467 0 1
// ape := CreateHuman ;
8593: LD_ADDR_VAR 0 4
8597: PUSH
8598: CALL_OW 44
8602: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
8603: LD_ADDR_EXP 32
8607: PUSH
8608: LD_EXP 32
8612: PPUSH
8613: LD_VAR 0 5
8617: PPUSH
8618: LD_EXP 32
8622: PUSH
8623: LD_VAR 0 5
8627: ARRAY
8628: PPUSH
8629: LD_VAR 0 4
8633: PPUSH
8634: CALL 49340 0 2
8638: PPUSH
8639: CALL_OW 1
8643: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
8644: LD_VAR 0 4
8648: PPUSH
8649: LD_VAR 0 7
8653: PPUSH
8654: LD_INT 0
8656: PPUSH
8657: CALL_OW 49
// wait ( 10 ) ;
8661: LD_INT 10
8663: PPUSH
8664: CALL_OW 67
// mpBlockRespThread := false ;
8668: LD_ADDR_EXP 47
8672: PUSH
8673: LD_INT 0
8675: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
8676: LD_VAR 0 1
8680: PPUSH
8681: CALL_OW 247
8685: PUSH
8686: LD_INT 1
8688: EQUAL
8689: IFFALSE 8706
8691: PUSH
8692: LD_VAR 0 1
8696: PPUSH
8697: CALL_OW 248
8701: PUSH
8702: LD_INT 0
8704: GREATER
8705: AND
8706: IFFALSE 8951
// begin if not mpRespawn then
8708: LD_EXP 33
8712: NOT
8713: IFFALSE 8717
// exit ;
8715: GO 8951
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
8717: LD_VAR 0 9
8721: PPUSH
8722: CALL_OW 108
8726: NOT
8727: IFFALSE 8746
8729: PUSH
8730: LD_EXP 3
8734: PPUSH
8735: LD_VAR 0 9
8739: PPUSH
8740: CALL 6977 0 2
8744: NOT
8745: AND
8746: IFFALSE 8750
// exit ;
8748: GO 8951
// side := GetSide ( un ) ;
8750: LD_ADDR_VAR 0 9
8754: PUSH
8755: LD_VAR 0 1
8759: PPUSH
8760: CALL_OW 255
8764: ST_TO_ADDR
// nation := GetNation ( un ) ;
8765: LD_ADDR_VAR 0 8
8769: PUSH
8770: LD_VAR 0 1
8774: PPUSH
8775: CALL_OW 248
8779: ST_TO_ADDR
// class := GetClass ( un ) ;
8780: LD_ADDR_VAR 0 6
8784: PUSH
8785: LD_VAR 0 1
8789: PPUSH
8790: CALL_OW 257
8794: ST_TO_ADDR
// if class > 4 then
8795: LD_VAR 0 6
8799: PUSH
8800: LD_INT 4
8802: GREATER
8803: IFFALSE 8813
// class := 1 ;
8805: LD_ADDR_VAR 0 6
8809: PUSH
8810: LD_INT 1
8812: ST_TO_ADDR
// repeat wait ( 10 ) ;
8813: LD_INT 10
8815: PPUSH
8816: CALL_OW 67
// until not mpBlockRespThread ;
8820: LD_EXP 47
8824: NOT
8825: IFFALSE 8813
// mpBlockRespThread := true ;
8827: LD_ADDR_EXP 47
8831: PUSH
8832: LD_INT 1
8834: ST_TO_ADDR
// uc_side := side ;
8835: LD_ADDR_OWVAR 20
8839: PUSH
8840: LD_VAR 0 9
8844: ST_TO_ADDR
// uc_nation := nation ;
8845: LD_ADDR_OWVAR 21
8849: PUSH
8850: LD_VAR 0 8
8854: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
8855: LD_INT 0
8857: PPUSH
8858: LD_VAR 0 6
8862: PPUSH
8863: LD_INT 2
8865: PPUSH
8866: CALL_OW 380
// un := CreateHuman ;
8870: LD_ADDR_VAR 0 1
8874: PUSH
8875: CALL_OW 44
8879: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
8880: LD_ADDR_EXP 40
8884: PUSH
8885: LD_EXP 40
8889: PPUSH
8890: LD_VAR 0 9
8894: PPUSH
8895: LD_EXP 40
8899: PUSH
8900: LD_VAR 0 9
8904: ARRAY
8905: PPUSH
8906: LD_EXP 40
8910: PUSH
8911: LD_VAR 0 9
8915: ARRAY
8916: PUSH
8917: LD_INT 1
8919: PLUS
8920: PPUSH
8921: LD_VAR 0 1
8925: PPUSH
8926: CALL_OW 1
8930: PPUSH
8931: CALL_OW 1
8935: ST_TO_ADDR
// wait ( 10 ) ;
8936: LD_INT 10
8938: PPUSH
8939: CALL_OW 67
// mpBlockRespThread := false ;
8943: LD_ADDR_EXP 47
8947: PUSH
8948: LD_INT 0
8950: ST_TO_ADDR
// end ; end ;
8951: LD_VAR 0 2
8955: RET
// export function Multiplayer_VehicleConstruction_ApeConsumed ( factory , un ) ; var i , tag , area , ape ; begin
8956: LD_INT 0
8958: PPUSH
8959: PPUSH
8960: PPUSH
8961: PPUSH
8962: PPUSH
// tag := 0 ;
8963: LD_ADDR_VAR 0 5
8967: PUSH
8968: LD_INT 0
8970: ST_TO_ADDR
// for i := 1 to 8 do
8971: LD_ADDR_VAR 0 4
8975: PUSH
8976: DOUBLE
8977: LD_INT 1
8979: DEC
8980: ST_TO_ADDR
8981: LD_INT 8
8983: PUSH
8984: FOR_TO
8985: IFFALSE 9019
// if un in mpApePosIndex [ i ] then
8987: LD_VAR 0 2
8991: PUSH
8992: LD_EXP 32
8996: PUSH
8997: LD_VAR 0 4
9001: ARRAY
9002: IN
9003: IFFALSE 9017
// begin tag := i ;
9005: LD_ADDR_VAR 0 5
9009: PUSH
9010: LD_VAR 0 4
9014: ST_TO_ADDR
// break ;
9015: GO 9019
// end ;
9017: GO 8984
9019: POP
9020: POP
// if not tag then
9021: LD_VAR 0 5
9025: NOT
9026: IFFALSE 9030
// exit ;
9028: GO 9198
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
9030: LD_ADDR_VAR 0 6
9034: PUSH
9035: LD_EXP 31
9039: PUSH
9040: LD_EXP 7
9044: PUSH
9045: LD_VAR 0 5
9049: ARRAY
9050: ARRAY
9051: ST_TO_ADDR
// if not area then
9052: LD_VAR 0 6
9056: NOT
9057: IFFALSE 9061
// exit ;
9059: GO 9198
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
9061: LD_INT 14700
9063: PUSH
9064: LD_VAR 0 2
9068: PUSH
9069: LD_INT 5
9071: MOD
9072: PUSH
9073: LD_INT 1
9075: PLUS
9076: PUSH
9077: LD_INT 700
9079: MUL
9080: PLUS
9081: PPUSH
9082: CALL_OW 67
// repeat wait ( 10 ) ;
9086: LD_INT 10
9088: PPUSH
9089: CALL_OW 67
// until not mpBlockRespThread ;
9093: LD_EXP 47
9097: NOT
9098: IFFALSE 9086
// mpBlockRespThread := true ;
9100: LD_ADDR_EXP 47
9104: PUSH
9105: LD_INT 1
9107: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
9108: LD_INT 0
9110: PPUSH
9111: CALL 45467 0 1
// ape := CreateHuman ;
9115: LD_ADDR_VAR 0 7
9119: PUSH
9120: CALL_OW 44
9124: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
9125: LD_ADDR_EXP 32
9129: PUSH
9130: LD_EXP 32
9134: PPUSH
9135: LD_VAR 0 5
9139: PPUSH
9140: LD_EXP 32
9144: PUSH
9145: LD_VAR 0 5
9149: ARRAY
9150: PPUSH
9151: LD_VAR 0 7
9155: PPUSH
9156: CALL 49340 0 2
9160: PPUSH
9161: CALL_OW 1
9165: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
9166: LD_VAR 0 7
9170: PPUSH
9171: LD_VAR 0 6
9175: PPUSH
9176: LD_INT 0
9178: PPUSH
9179: CALL_OW 49
// wait ( 10 ) ;
9183: LD_INT 10
9185: PPUSH
9186: CALL_OW 67
// mpBlockRespThread := false ;
9190: LD_ADDR_EXP 47
9194: PUSH
9195: LD_INT 0
9197: ST_TO_ADDR
// end ;
9198: LD_VAR 0 3
9202: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
9203: LD_INT 0
9205: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
9206: LD_VAR 0 1
9210: PPUSH
9211: CALL_OW 266
9215: PUSH
9216: LD_INT 0
9218: PUSH
9219: LD_INT 1
9221: PUSH
9222: EMPTY
9223: LIST
9224: LIST
9225: IN
9226: IFFALSE 9251
// SetBName ( building , @ & GetSide ( building ) ) ;
9228: LD_VAR 0 1
9232: PPUSH
9233: LD_STRING @
9235: PUSH
9236: LD_VAR 0 1
9240: PPUSH
9241: CALL_OW 255
9245: STR
9246: PPUSH
9247: CALL_OW 500
// end ;
9251: LD_VAR 0 2
9255: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
9256: LD_INT 0
9258: PPUSH
9259: PPUSH
// if mpGameType in [ GameTypeSurvival , GameTypeSurvivalHardcore ] and GetBType ( building ) in [ b_depot , b_warehouse ] then
9260: LD_EXP 3
9264: PUSH
9265: LD_INT 2
9267: PUSH
9268: LD_INT 8
9270: PUSH
9271: EMPTY
9272: LIST
9273: LIST
9274: IN
9275: IFFALSE 9299
9277: PUSH
9278: LD_VAR 0 1
9282: PPUSH
9283: CALL_OW 266
9287: PUSH
9288: LD_INT 0
9290: PUSH
9291: LD_INT 1
9293: PUSH
9294: EMPTY
9295: LIST
9296: LIST
9297: IN
9298: AND
9299: IFFALSE 9378
// begin SetSide ( building , oldSide ) ;
9301: LD_VAR 0 1
9305: PPUSH
9306: LD_VAR 0 2
9310: PPUSH
9311: CALL_OW 235
// KillUnit ( building ) ;
9315: LD_VAR 0 1
9319: PPUSH
9320: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
9324: LD_ADDR_VAR 0 5
9328: PUSH
9329: LD_INT 22
9331: PUSH
9332: LD_VAR 0 2
9336: PUSH
9337: EMPTY
9338: LIST
9339: LIST
9340: PUSH
9341: LD_INT 21
9343: PUSH
9344: LD_INT 1
9346: PUSH
9347: EMPTY
9348: LIST
9349: LIST
9350: PUSH
9351: EMPTY
9352: LIST
9353: LIST
9354: PPUSH
9355: CALL_OW 69
9359: PUSH
9360: FOR_IN
9361: IFFALSE 9374
// KillUnit ( i ) ;
9363: LD_VAR 0 5
9367: PPUSH
9368: CALL_OW 66
9372: GO 9360
9374: POP
9375: POP
// exit ;
9376: GO 9423
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
9378: LD_VAR 0 1
9382: PPUSH
9383: CALL_OW 266
9387: PUSH
9388: LD_INT 0
9390: PUSH
9391: LD_INT 1
9393: PUSH
9394: EMPTY
9395: LIST
9396: LIST
9397: IN
9398: IFFALSE 9423
// SetBName ( building , @ & GetSide ( building ) ) ;
9400: LD_VAR 0 1
9404: PPUSH
9405: LD_STRING @
9407: PUSH
9408: LD_VAR 0 1
9412: PPUSH
9413: CALL_OW 255
9417: STR
9418: PPUSH
9419: CALL_OW 500
// end ;
9423: LD_VAR 0 4
9427: RET
// export function Multiplayer_OilExtracted ( building , side , base , amount ) ; var i , value ; begin
9428: LD_INT 0
9430: PPUSH
9431: PPUSH
9432: PPUSH
// if mpGameType <> GameTypeFamine then
9433: LD_EXP 3
9437: PUSH
9438: LD_INT 5
9440: NONEQUAL
9441: IFFALSE 9445
// exit ;
9443: GO 9679
// for i := 1 to mpGlobalOilDeposits do
9445: LD_ADDR_VAR 0 6
9449: PUSH
9450: DOUBLE
9451: LD_INT 1
9453: DEC
9454: ST_TO_ADDR
9455: LD_EXP 42
9459: PUSH
9460: FOR_TO
9461: IFFALSE 9677
// begin if HexInfo ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) = building then
9463: LD_EXP 42
9467: PUSH
9468: LD_VAR 0 6
9472: ARRAY
9473: PUSH
9474: LD_INT 1
9476: ARRAY
9477: PPUSH
9478: LD_EXP 42
9482: PUSH
9483: LD_VAR 0 6
9487: ARRAY
9488: PUSH
9489: LD_INT 2
9491: ARRAY
9492: PPUSH
9493: CALL_OW 428
9497: PUSH
9498: LD_VAR 0 1
9502: EQUAL
9503: IFFALSE 9675
// begin value := mpGlobalOilDeposits [ i ] [ 3 ] ;
9505: LD_ADDR_VAR 0 7
9509: PUSH
9510: LD_EXP 42
9514: PUSH
9515: LD_VAR 0 6
9519: ARRAY
9520: PUSH
9521: LD_INT 3
9523: ARRAY
9524: ST_TO_ADDR
// value := value - amount ;
9525: LD_ADDR_VAR 0 7
9529: PUSH
9530: LD_VAR 0 7
9534: PUSH
9535: LD_VAR 0 4
9539: MINUS
9540: ST_TO_ADDR
// mpGlobalOilDeposits := Replace ( mpGlobalOilDeposits , i , Replace ( mpGlobalOilDeposits [ i ] , 3 , value ) ) ;
9541: LD_ADDR_EXP 42
9545: PUSH
9546: LD_EXP 42
9550: PPUSH
9551: LD_VAR 0 6
9555: PPUSH
9556: LD_EXP 42
9560: PUSH
9561: LD_VAR 0 6
9565: ARRAY
9566: PPUSH
9567: LD_INT 3
9569: PPUSH
9570: LD_VAR 0 7
9574: PPUSH
9575: CALL_OW 1
9579: PPUSH
9580: CALL_OW 1
9584: ST_TO_ADDR
// if side in [ your_side , 9 ] then
9585: LD_VAR 0 2
9589: PUSH
9590: LD_OWVAR 2
9594: PUSH
9595: LD_INT 9
9597: PUSH
9598: EMPTY
9599: LIST
9600: LIST
9601: IN
9602: IFFALSE 9618
// SetUnitDisplayNumber ( building , value ) ;
9604: LD_VAR 0 1
9608: PPUSH
9609: LD_VAR 0 7
9613: PPUSH
9614: CALL_OW 505
// if value <= 0 then
9618: LD_VAR 0 7
9622: PUSH
9623: LD_INT 0
9625: LESSEQUAL
9626: IFFALSE 9675
// begin RemoveDepositXY ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) ;
9628: LD_EXP 42
9632: PUSH
9633: LD_VAR 0 6
9637: ARRAY
9638: PUSH
9639: LD_INT 1
9641: ARRAY
9642: PPUSH
9643: LD_EXP 42
9647: PUSH
9648: LD_VAR 0 6
9652: ARRAY
9653: PUSH
9654: LD_INT 2
9656: ARRAY
9657: PPUSH
9658: CALL_OW 63
// KillUnit ( building ) ;
9662: LD_VAR 0 1
9666: PPUSH
9667: CALL_OW 66
// exit ;
9671: POP
9672: POP
9673: GO 9679
// end ; end ; end ;
9675: GO 9460
9677: POP
9678: POP
// end ;
9679: LD_VAR 0 5
9683: RET
// export function Multiplayer_SibExtracted ( building , side , base , amount ) ; var i , value ; begin
9684: LD_INT 0
9686: PPUSH
9687: PPUSH
9688: PPUSH
// if mpGameType <> GameTypeFamine then
9689: LD_EXP 3
9693: PUSH
9694: LD_INT 5
9696: NONEQUAL
9697: IFFALSE 9701
// exit ;
9699: GO 9935
// for i := 1 to mpGlobalSibDeposits do
9701: LD_ADDR_VAR 0 6
9705: PUSH
9706: DOUBLE
9707: LD_INT 1
9709: DEC
9710: ST_TO_ADDR
9711: LD_EXP 43
9715: PUSH
9716: FOR_TO
9717: IFFALSE 9933
// begin if HexInfo ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) = building then
9719: LD_EXP 43
9723: PUSH
9724: LD_VAR 0 6
9728: ARRAY
9729: PUSH
9730: LD_INT 1
9732: ARRAY
9733: PPUSH
9734: LD_EXP 43
9738: PUSH
9739: LD_VAR 0 6
9743: ARRAY
9744: PUSH
9745: LD_INT 2
9747: ARRAY
9748: PPUSH
9749: CALL_OW 428
9753: PUSH
9754: LD_VAR 0 1
9758: EQUAL
9759: IFFALSE 9931
// begin value := mpGlobalSibDeposits [ i ] [ 3 ] ;
9761: LD_ADDR_VAR 0 7
9765: PUSH
9766: LD_EXP 43
9770: PUSH
9771: LD_VAR 0 6
9775: ARRAY
9776: PUSH
9777: LD_INT 3
9779: ARRAY
9780: ST_TO_ADDR
// value := value - amount ;
9781: LD_ADDR_VAR 0 7
9785: PUSH
9786: LD_VAR 0 7
9790: PUSH
9791: LD_VAR 0 4
9795: MINUS
9796: ST_TO_ADDR
// mpGlobalSibDeposits := Replace ( mpGlobalSibDeposits , i , Replace ( mpGlobalSibDeposits [ i ] , 3 , value ) ) ;
9797: LD_ADDR_EXP 43
9801: PUSH
9802: LD_EXP 43
9806: PPUSH
9807: LD_VAR 0 6
9811: PPUSH
9812: LD_EXP 43
9816: PUSH
9817: LD_VAR 0 6
9821: ARRAY
9822: PPUSH
9823: LD_INT 3
9825: PPUSH
9826: LD_VAR 0 7
9830: PPUSH
9831: CALL_OW 1
9835: PPUSH
9836: CALL_OW 1
9840: ST_TO_ADDR
// if side in [ your_side , 9 ] then
9841: LD_VAR 0 2
9845: PUSH
9846: LD_OWVAR 2
9850: PUSH
9851: LD_INT 9
9853: PUSH
9854: EMPTY
9855: LIST
9856: LIST
9857: IN
9858: IFFALSE 9874
// SetUnitDisplayNumber ( building , value ) ;
9860: LD_VAR 0 1
9864: PPUSH
9865: LD_VAR 0 7
9869: PPUSH
9870: CALL_OW 505
// if value <= 0 then
9874: LD_VAR 0 7
9878: PUSH
9879: LD_INT 0
9881: LESSEQUAL
9882: IFFALSE 9931
// begin RemoveDepositXY ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) ;
9884: LD_EXP 43
9888: PUSH
9889: LD_VAR 0 6
9893: ARRAY
9894: PUSH
9895: LD_INT 1
9897: ARRAY
9898: PPUSH
9899: LD_EXP 43
9903: PUSH
9904: LD_VAR 0 6
9908: ARRAY
9909: PUSH
9910: LD_INT 2
9912: ARRAY
9913: PPUSH
9914: CALL_OW 63
// KillUnit ( building ) ;
9918: LD_VAR 0 1
9922: PPUSH
9923: CALL_OW 66
// exit ;
9927: POP
9928: POP
9929: GO 9935
// end ; end ; end ;
9931: GO 9716
9933: POP
9934: POP
// end ;
9935: LD_VAR 0 5
9939: RET
// export function Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ; var side ; begin
9940: LD_INT 0
9942: PPUSH
9943: PPUSH
// side := GetSide ( factory ) ;
9944: LD_ADDR_VAR 0 7
9948: PUSH
9949: LD_VAR 0 1
9953: PPUSH
9954: CALL_OW 255
9958: ST_TO_ADDR
// if weapon = ar_miner and FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , ar_miner ] ] ) > 0 then
9959: LD_VAR 0 5
9963: PUSH
9964: LD_INT 81
9966: EQUAL
9967: IFFALSE 10005
9969: PUSH
9970: LD_INT 22
9972: PUSH
9973: LD_VAR 0 7
9977: PUSH
9978: EMPTY
9979: LIST
9980: LIST
9981: PUSH
9982: LD_INT 34
9984: PUSH
9985: LD_INT 81
9987: PUSH
9988: EMPTY
9989: LIST
9990: LIST
9991: PUSH
9992: EMPTY
9993: LIST
9994: LIST
9995: PPUSH
9996: CALL_OW 69
10000: PUSH
10001: LD_INT 0
10003: GREATER
10004: AND
10005: IFFALSE 10038
// begin ComCancel ( factory ) ;
10007: LD_VAR 0 1
10011: PPUSH
10012: CALL_OW 127
// if side = your_side then
10016: LD_VAR 0 7
10020: PUSH
10021: LD_OWVAR 2
10025: EQUAL
10026: IFFALSE 10038
// HintSpec ( VehLimit , 2 ) ;
10028: LD_STRING VehLimit
10030: PPUSH
10031: LD_INT 2
10033: PPUSH
10034: CALL_OW 338
// end ; end ;
10038: LD_VAR 0 6
10042: RET
// export function Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; var i , j ; begin
10043: LD_INT 0
10045: PPUSH
10046: PPUSH
10047: PPUSH
// if GetWeapon ( newId ) = ar_miner and GetControl ( newId ) = control_manual then
10048: LD_VAR 0 1
10052: PPUSH
10053: CALL_OW 264
10057: PUSH
10058: LD_INT 81
10060: EQUAL
10061: IFFALSE 10078
10063: PUSH
10064: LD_VAR 0 1
10068: PPUSH
10069: CALL_OW 263
10073: PUSH
10074: LD_INT 1
10076: EQUAL
10077: AND
10078: IFFALSE 10358
// begin for i := 1 to Count ( minersList ) do
10080: LD_ADDR_VAR 0 6
10084: PUSH
10085: DOUBLE
10086: LD_INT 1
10088: DEC
10089: ST_TO_ADDR
10090: LD_EXP 57
10094: PPUSH
10095: CALL 13364 0 1
10099: PUSH
10100: FOR_TO
10101: IFFALSE 10219
// begin if minersList [ i ] = oldId then
10103: LD_EXP 57
10107: PUSH
10108: LD_VAR 0 6
10112: ARRAY
10113: PUSH
10114: LD_VAR 0 2
10118: EQUAL
10119: IFFALSE 10217
// begin for j := 1 to minerMinesList [ i ] do
10121: LD_ADDR_VAR 0 7
10125: PUSH
10126: DOUBLE
10127: LD_INT 1
10129: DEC
10130: ST_TO_ADDR
10131: LD_EXP 58
10135: PUSH
10136: LD_VAR 0 6
10140: ARRAY
10141: PUSH
10142: FOR_TO
10143: IFFALSE 10193
// RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
10145: LD_EXP 58
10149: PUSH
10150: LD_VAR 0 6
10154: ARRAY
10155: PUSH
10156: LD_VAR 0 7
10160: ARRAY
10161: PUSH
10162: LD_INT 1
10164: ARRAY
10165: PPUSH
10166: LD_EXP 58
10170: PUSH
10171: LD_VAR 0 6
10175: ARRAY
10176: PUSH
10177: LD_VAR 0 7
10181: ARRAY
10182: PUSH
10183: LD_INT 2
10185: ARRAY
10186: PPUSH
10187: CALL_OW 612
10191: GO 10142
10193: POP
10194: POP
// minerMinesList := Delete ( minerMinesList , i ) ;
10195: LD_ADDR_EXP 58
10199: PUSH
10200: LD_EXP 58
10204: PPUSH
10205: LD_VAR 0 6
10209: PPUSH
10210: CALL_OW 3
10214: ST_TO_ADDR
// break ;
10215: GO 10219
// end ; end ;
10217: GO 10100
10219: POP
10220: POP
// minersList := minersList diff oldId ;
10221: LD_ADDR_EXP 57
10225: PUSH
10226: LD_EXP 57
10230: PUSH
10231: LD_VAR 0 2
10235: DIFF
10236: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_weapon , ar_miner ] ] ) > 1 then
10237: LD_INT 22
10239: PUSH
10240: LD_VAR 0 4
10244: PPUSH
10245: CALL_OW 255
10249: PUSH
10250: EMPTY
10251: LIST
10252: LIST
10253: PUSH
10254: LD_INT 34
10256: PUSH
10257: LD_INT 81
10259: PUSH
10260: EMPTY
10261: LIST
10262: LIST
10263: PUSH
10264: EMPTY
10265: LIST
10266: LIST
10267: PPUSH
10268: CALL_OW 69
10272: PUSH
10273: LD_INT 1
10275: GREATER
10276: IFFALSE 10303
// begin ComExit ( unit ) ;
10278: LD_VAR 0 4
10282: PPUSH
10283: CALL 49738 0 1
// SetSide ( newId , oldSide ) ;
10287: LD_VAR 0 1
10291: PPUSH
10292: LD_VAR 0 3
10296: PPUSH
10297: CALL_OW 235
// exit ;
10301: GO 10358
// end ; minersList := Replace ( minersList , minersList + 1 , newId ) ;
10303: LD_ADDR_EXP 57
10307: PUSH
10308: LD_EXP 57
10312: PPUSH
10313: LD_EXP 57
10317: PUSH
10318: LD_INT 1
10320: PLUS
10321: PPUSH
10322: LD_VAR 0 1
10326: PPUSH
10327: CALL_OW 1
10331: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
10332: LD_ADDR_EXP 58
10336: PUSH
10337: LD_EXP 58
10341: PPUSH
10342: LD_EXP 58
10346: PUSH
10347: LD_INT 1
10349: PLUS
10350: PPUSH
10351: EMPTY
10352: PPUSH
10353: CALL_OW 1
10357: ST_TO_ADDR
// end ; end ; end_of_file
10358: LD_VAR 0 5
10362: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
10363: LD_EXP 39
10367: IFFALSE 10375
10369: PUSH
10370: CALL 10585 0 0
10374: AND
10375: IFFALSE 10383
10377: PUSH
10378: LD_OWVAR 4
10382: AND
10383: IFFALSE 10582
10385: GO 10387
10387: DISABLE
10388: LD_INT 0
10390: PPUSH
10391: PPUSH
// begin canWin := false ;
10392: LD_ADDR_VAR 0 2
10396: PUSH
10397: LD_INT 0
10399: ST_TO_ADDR
// if not HasPower ( your_side ) then
10400: LD_OWVAR 2
10404: PPUSH
10405: CALL 10627 0 1
10409: NOT
10410: IFFALSE 10421
// begin Multiplayer_Loose_Message ;
10412: CALL_OW 521
// enable ( mpLose ) ;
10416: LD_INT 102
10418: ENABLE_MARKED
// end else
10419: GO 10582
// begin canWin := true ;
10421: LD_ADDR_VAR 0 2
10425: PUSH
10426: LD_INT 1
10428: ST_TO_ADDR
// for i := 1 to 8 do
10429: LD_ADDR_VAR 0 1
10433: PUSH
10434: DOUBLE
10435: LD_INT 1
10437: DEC
10438: ST_TO_ADDR
10439: LD_INT 8
10441: PUSH
10442: FOR_TO
10443: IFFALSE 10568
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
10445: LD_EXP 7
10449: PUSH
10450: LD_VAR 0 1
10454: ARRAY
10455: IFFALSE 10468
10457: PUSH
10458: LD_VAR 0 1
10462: PPUSH
10463: CALL_OW 108
10467: AND
10468: IFFALSE 10482
10470: PUSH
10471: LD_VAR 0 1
10475: PUSH
10476: LD_OWVAR 2
10480: NONEQUAL
10481: AND
10482: IFFALSE 10566
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
10484: LD_EXP 8
10488: PUSH
10489: LD_VAR 0 1
10493: ARRAY
10494: NOT
10495: IFTRUE 10543
10497: PUSH
10498: LD_EXP 8
10502: PUSH
10503: LD_VAR 0 1
10507: ARRAY
10508: PUSH
10509: LD_EXP 8
10513: PUSH
10514: LD_OWVAR 2
10518: ARRAY
10519: NONEQUAL
10520: IFFALSE 10542
10522: PUSH
10523: LD_OWVAR 2
10527: PPUSH
10528: LD_VAR 0 1
10532: PPUSH
10533: CALL_OW 81
10537: PUSH
10538: LD_INT 1
10540: NONEQUAL
10541: AND
10542: OR
10543: IFFALSE 10566
// if HasPower ( i ) then
10545: LD_VAR 0 1
10549: PPUSH
10550: CALL 10627 0 1
10554: IFFALSE 10566
// begin canWin := false ;
10556: LD_ADDR_VAR 0 2
10560: PUSH
10561: LD_INT 0
10563: ST_TO_ADDR
// break ;
10564: GO 10568
// end ;
10566: GO 10442
10568: POP
10569: POP
// if canWin then
10570: LD_VAR 0 2
10574: IFFALSE 10581
// enable ( mpWin ) else
10576: LD_INT 101
10578: ENABLE_MARKED
10579: GO 10582
// enable ;
10581: ENABLE
// end ; end ;
10582: PPOPN 2
10584: END
// function CanWinLoose ; begin
10585: LD_INT 0
10587: PPUSH
// result := true ;
10588: LD_ADDR_VAR 0 1
10592: PUSH
10593: LD_INT 1
10595: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
10596: CALL_OW 531
10600: IFFALSE 10612
10602: PUSH
10603: CALL_OW 519
10607: PUSH
10608: LD_INT 1
10610: GREATER
10611: AND
10612: IFFALSE 10622
// result := false ;
10614: LD_ADDR_VAR 0 1
10618: PUSH
10619: LD_INT 0
10621: ST_TO_ADDR
// end ;
10622: LD_VAR 0 1
10626: RET
// function HasPower ( i ) ; begin
10627: LD_INT 0
10629: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
10630: LD_ADDR_VAR 0 2
10634: PUSH
10635: LD_INT 22
10637: PUSH
10638: LD_VAR 0 1
10642: PUSH
10643: EMPTY
10644: LIST
10645: LIST
10646: PUSH
10647: LD_INT 2
10649: PUSH
10650: LD_INT 21
10652: PUSH
10653: LD_INT 1
10655: PUSH
10656: EMPTY
10657: LIST
10658: LIST
10659: PUSH
10660: LD_INT 33
10662: PUSH
10663: LD_INT 3
10665: PUSH
10666: EMPTY
10667: LIST
10668: LIST
10669: PUSH
10670: LD_INT 33
10672: PUSH
10673: LD_INT 5
10675: PUSH
10676: EMPTY
10677: LIST
10678: LIST
10679: PUSH
10680: EMPTY
10681: LIST
10682: LIST
10683: LIST
10684: LIST
10685: PUSH
10686: EMPTY
10687: LIST
10688: LIST
10689: PPUSH
10690: CALL_OW 69
10694: ST_TO_ADDR
// end ; end_of_file
10695: LD_VAR 0 2
10699: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
10700: LD_EXP 39
10704: IFFALSE 10747
10706: GO 10708
10708: DISABLE
10709: LD_INT 0
10711: PPUSH
// begin for i := 1 to 8 do
10712: LD_ADDR_VAR 0 1
10716: PUSH
10717: DOUBLE
10718: LD_INT 1
10720: DEC
10721: ST_TO_ADDR
10722: LD_INT 8
10724: PUSH
10725: FOR_TO
10726: IFFALSE 10745
// SetRestrict ( b_depot , i , state_disabled ) ;
10728: LD_INT 0
10730: PPUSH
10731: LD_VAR 0 1
10735: PPUSH
10736: LD_INT 0
10738: PPUSH
10739: CALL_OW 324
10743: GO 10725
10745: POP
10746: POP
// end ;
10747: PPOPN 1
10749: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
10750: LD_EXP 39
10754: IFFALSE 10762
10756: PUSH
10757: CALL 10972 0 0
10761: AND
10762: IFFALSE 10770
10764: PUSH
10765: LD_OWVAR 4
10769: AND
10770: IFFALSE 10969
10772: GO 10774
10774: DISABLE
10775: LD_INT 0
10777: PPUSH
10778: PPUSH
// begin canWin := false ;
10779: LD_ADDR_VAR 0 2
10783: PUSH
10784: LD_INT 0
10786: ST_TO_ADDR
// if not HasPower ( your_side ) then
10787: LD_OWVAR 2
10791: PPUSH
10792: CALL 11014 0 1
10796: NOT
10797: IFFALSE 10808
// begin Multiplayer_Loose_Message ;
10799: CALL_OW 521
// enable ( mpLose ) ;
10803: LD_INT 102
10805: ENABLE_MARKED
// end else
10806: GO 10969
// begin canWin := true ;
10808: LD_ADDR_VAR 0 2
10812: PUSH
10813: LD_INT 1
10815: ST_TO_ADDR
// for i := 1 to 8 do
10816: LD_ADDR_VAR 0 1
10820: PUSH
10821: DOUBLE
10822: LD_INT 1
10824: DEC
10825: ST_TO_ADDR
10826: LD_INT 8
10828: PUSH
10829: FOR_TO
10830: IFFALSE 10955
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
10832: LD_EXP 7
10836: PUSH
10837: LD_VAR 0 1
10841: ARRAY
10842: IFFALSE 10855
10844: PUSH
10845: LD_VAR 0 1
10849: PPUSH
10850: CALL_OW 108
10854: AND
10855: IFFALSE 10869
10857: PUSH
10858: LD_VAR 0 1
10862: PUSH
10863: LD_OWVAR 2
10867: NONEQUAL
10868: AND
10869: IFFALSE 10953
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
10871: LD_EXP 8
10875: PUSH
10876: LD_VAR 0 1
10880: ARRAY
10881: NOT
10882: IFTRUE 10930
10884: PUSH
10885: LD_EXP 8
10889: PUSH
10890: LD_VAR 0 1
10894: ARRAY
10895: PUSH
10896: LD_EXP 8
10900: PUSH
10901: LD_OWVAR 2
10905: ARRAY
10906: NONEQUAL
10907: IFFALSE 10929
10909: PUSH
10910: LD_OWVAR 2
10914: PPUSH
10915: LD_VAR 0 1
10919: PPUSH
10920: CALL_OW 81
10924: PUSH
10925: LD_INT 1
10927: NONEQUAL
10928: AND
10929: OR
10930: IFFALSE 10953
// if HasPower ( i ) then
10932: LD_VAR 0 1
10936: PPUSH
10937: CALL 11014 0 1
10941: IFFALSE 10953
// begin canWin := false ;
10943: LD_ADDR_VAR 0 2
10947: PUSH
10948: LD_INT 0
10950: ST_TO_ADDR
// break ;
10951: GO 10955
// end ;
10953: GO 10829
10955: POP
10956: POP
// if canWin then
10957: LD_VAR 0 2
10961: IFFALSE 10968
// enable ( mpWin ) else
10963: LD_INT 101
10965: ENABLE_MARKED
10966: GO 10969
// enable ;
10968: ENABLE
// end ; end ;
10969: PPOPN 2
10971: END
// function CanWinLoose ; begin
10972: LD_INT 0
10974: PPUSH
// result := true ;
10975: LD_ADDR_VAR 0 1
10979: PUSH
10980: LD_INT 1
10982: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
10983: CALL_OW 531
10987: IFFALSE 10999
10989: PUSH
10990: CALL_OW 519
10994: PUSH
10995: LD_INT 1
10997: GREATER
10998: AND
10999: IFFALSE 11009
// result := false ;
11001: LD_ADDR_VAR 0 1
11005: PUSH
11006: LD_INT 0
11008: ST_TO_ADDR
// end ;
11009: LD_VAR 0 1
11013: RET
// function HasPower ( i ) ; begin
11014: LD_INT 0
11016: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
11017: LD_INT 22
11019: PUSH
11020: LD_VAR 0 1
11024: PUSH
11025: EMPTY
11026: LIST
11027: LIST
11028: PUSH
11029: LD_INT 2
11031: PUSH
11032: LD_INT 30
11034: PUSH
11035: LD_INT 0
11037: PUSH
11038: EMPTY
11039: LIST
11040: LIST
11041: PUSH
11042: LD_INT 30
11044: PUSH
11045: LD_INT 1
11047: PUSH
11048: EMPTY
11049: LIST
11050: LIST
11051: PUSH
11052: EMPTY
11053: LIST
11054: LIST
11055: LIST
11056: PUSH
11057: EMPTY
11058: LIST
11059: LIST
11060: PPUSH
11061: CALL_OW 69
11065: NOT
11066: IFFALSE 11070
// exit ;
11068: GO 11135
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
11070: LD_ADDR_VAR 0 2
11074: PUSH
11075: LD_INT 22
11077: PUSH
11078: LD_VAR 0 1
11082: PUSH
11083: EMPTY
11084: LIST
11085: LIST
11086: PUSH
11087: LD_INT 2
11089: PUSH
11090: LD_INT 21
11092: PUSH
11093: LD_INT 1
11095: PUSH
11096: EMPTY
11097: LIST
11098: LIST
11099: PUSH
11100: LD_INT 33
11102: PUSH
11103: LD_INT 3
11105: PUSH
11106: EMPTY
11107: LIST
11108: LIST
11109: PUSH
11110: LD_INT 33
11112: PUSH
11113: LD_INT 5
11115: PUSH
11116: EMPTY
11117: LIST
11118: LIST
11119: PUSH
11120: EMPTY
11121: LIST
11122: LIST
11123: LIST
11124: LIST
11125: PUSH
11126: EMPTY
11127: LIST
11128: LIST
11129: PPUSH
11130: CALL_OW 69
11134: ST_TO_ADDR
// end ; end_of_file
11135: LD_VAR 0 2
11139: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
11140: LD_INT 0
11142: PPUSH
11143: PPUSH
// if exist_mode then
11144: LD_VAR 0 2
11148: IFFALSE 11194
// begin unit := CreateCharacter ( prefix & ident ) ;
11150: LD_ADDR_VAR 0 5
11154: PUSH
11155: LD_VAR 0 3
11159: PUSH
11160: LD_VAR 0 1
11164: STR
11165: PPUSH
11166: CALL_OW 34
11170: ST_TO_ADDR
// if unit then
11171: LD_VAR 0 5
11175: IFFALSE 11192
// DeleteCharacters ( prefix & ident ) ;
11177: LD_VAR 0 3
11181: PUSH
11182: LD_VAR 0 1
11186: STR
11187: PPUSH
11188: CALL_OW 40
// end else
11192: GO 11209
// unit := NewCharacter ( ident ) ;
11194: LD_ADDR_VAR 0 5
11198: PUSH
11199: LD_VAR 0 1
11203: PPUSH
11204: CALL_OW 25
11208: ST_TO_ADDR
// result := unit ;
11209: LD_ADDR_VAR 0 4
11213: PUSH
11214: LD_VAR 0 5
11218: ST_TO_ADDR
// end ;
11219: LD_VAR 0 4
11223: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
11224: LD_INT 0
11226: PPUSH
11227: PPUSH
// if exist_mode then
11228: LD_VAR 0 2
11232: IFFALSE 11257
// unit := CreateCharacter ( prefix & ident ) else
11234: LD_ADDR_VAR 0 5
11238: PUSH
11239: LD_VAR 0 3
11243: PUSH
11244: LD_VAR 0 1
11248: STR
11249: PPUSH
11250: CALL_OW 34
11254: ST_TO_ADDR
11255: GO 11272
// unit := NewCharacter ( ident ) ;
11257: LD_ADDR_VAR 0 5
11261: PUSH
11262: LD_VAR 0 1
11266: PPUSH
11267: CALL_OW 25
11271: ST_TO_ADDR
// result := unit ;
11272: LD_ADDR_VAR 0 4
11276: PUSH
11277: LD_VAR 0 5
11281: ST_TO_ADDR
// end ;
11282: LD_VAR 0 4
11286: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
11287: LD_INT 0
11289: PPUSH
11290: PPUSH
// if not side or not nation then
11291: LD_VAR 0 1
11295: NOT
11296: IFTRUE 11305
11298: PUSH
11299: LD_VAR 0 2
11303: NOT
11304: OR
11305: IFFALSE 11309
// exit ;
11307: GO 12103
// case nation of nation_american :
11309: LD_VAR 0 2
11313: PUSH
11314: LD_INT 1
11316: DOUBLE
11317: EQUAL
11318: IFTRUE 11322
11320: GO 11544
11322: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
11323: LD_ADDR_VAR 0 4
11327: PUSH
11328: LD_INT 35
11330: PUSH
11331: LD_INT 45
11333: PUSH
11334: LD_INT 46
11336: PUSH
11337: LD_INT 47
11339: PUSH
11340: LD_INT 82
11342: PUSH
11343: LD_INT 83
11345: PUSH
11346: LD_INT 84
11348: PUSH
11349: LD_INT 85
11351: PUSH
11352: LD_INT 86
11354: PUSH
11355: LD_INT 1
11357: PUSH
11358: LD_INT 2
11360: PUSH
11361: LD_INT 6
11363: PUSH
11364: LD_INT 15
11366: PUSH
11367: LD_INT 16
11369: PUSH
11370: LD_INT 7
11372: PUSH
11373: LD_INT 12
11375: PUSH
11376: LD_INT 13
11378: PUSH
11379: LD_INT 10
11381: PUSH
11382: LD_INT 14
11384: PUSH
11385: LD_INT 20
11387: PUSH
11388: LD_INT 21
11390: PUSH
11391: LD_INT 22
11393: PUSH
11394: LD_INT 25
11396: PUSH
11397: LD_INT 32
11399: PUSH
11400: LD_INT 27
11402: PUSH
11403: LD_INT 36
11405: PUSH
11406: LD_INT 69
11408: PUSH
11409: LD_INT 39
11411: PUSH
11412: LD_INT 34
11414: PUSH
11415: LD_INT 40
11417: PUSH
11418: LD_INT 48
11420: PUSH
11421: LD_INT 49
11423: PUSH
11424: LD_INT 50
11426: PUSH
11427: LD_INT 51
11429: PUSH
11430: LD_INT 52
11432: PUSH
11433: LD_INT 53
11435: PUSH
11436: LD_INT 54
11438: PUSH
11439: LD_INT 55
11441: PUSH
11442: LD_INT 56
11444: PUSH
11445: LD_INT 57
11447: PUSH
11448: LD_INT 58
11450: PUSH
11451: LD_INT 59
11453: PUSH
11454: LD_INT 60
11456: PUSH
11457: LD_INT 61
11459: PUSH
11460: LD_INT 62
11462: PUSH
11463: LD_INT 80
11465: PUSH
11466: LD_INT 82
11468: PUSH
11469: LD_INT 83
11471: PUSH
11472: LD_INT 84
11474: PUSH
11475: LD_INT 85
11477: PUSH
11478: LD_INT 86
11480: PUSH
11481: LD_INT 90
11483: PUSH
11484: LD_INT 93
11486: PUSH
11487: EMPTY
11488: LIST
11489: LIST
11490: LIST
11491: LIST
11492: LIST
11493: LIST
11494: LIST
11495: LIST
11496: LIST
11497: LIST
11498: LIST
11499: LIST
11500: LIST
11501: LIST
11502: LIST
11503: LIST
11504: LIST
11505: LIST
11506: LIST
11507: LIST
11508: LIST
11509: LIST
11510: LIST
11511: LIST
11512: LIST
11513: LIST
11514: LIST
11515: LIST
11516: LIST
11517: LIST
11518: LIST
11519: LIST
11520: LIST
11521: LIST
11522: LIST
11523: LIST
11524: LIST
11525: LIST
11526: LIST
11527: LIST
11528: LIST
11529: LIST
11530: LIST
11531: LIST
11532: LIST
11533: LIST
11534: LIST
11535: LIST
11536: LIST
11537: LIST
11538: LIST
11539: LIST
11540: LIST
11541: ST_TO_ADDR
11542: GO 12025
11544: LD_INT 2
11546: DOUBLE
11547: EQUAL
11548: IFTRUE 11552
11550: GO 11786
11552: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
11553: LD_ADDR_VAR 0 4
11557: PUSH
11558: LD_INT 35
11560: PUSH
11561: LD_INT 45
11563: PUSH
11564: LD_INT 46
11566: PUSH
11567: LD_INT 47
11569: PUSH
11570: LD_INT 82
11572: PUSH
11573: LD_INT 83
11575: PUSH
11576: LD_INT 84
11578: PUSH
11579: LD_INT 85
11581: PUSH
11582: LD_INT 87
11584: PUSH
11585: LD_INT 70
11587: PUSH
11588: LD_INT 1
11590: PUSH
11591: LD_INT 11
11593: PUSH
11594: LD_INT 3
11596: PUSH
11597: LD_INT 4
11599: PUSH
11600: LD_INT 5
11602: PUSH
11603: LD_INT 6
11605: PUSH
11606: LD_INT 15
11608: PUSH
11609: LD_INT 18
11611: PUSH
11612: LD_INT 7
11614: PUSH
11615: LD_INT 17
11617: PUSH
11618: LD_INT 8
11620: PUSH
11621: LD_INT 20
11623: PUSH
11624: LD_INT 21
11626: PUSH
11627: LD_INT 22
11629: PUSH
11630: LD_INT 72
11632: PUSH
11633: LD_INT 26
11635: PUSH
11636: LD_INT 69
11638: PUSH
11639: LD_INT 39
11641: PUSH
11642: LD_INT 40
11644: PUSH
11645: LD_INT 41
11647: PUSH
11648: LD_INT 42
11650: PUSH
11651: LD_INT 43
11653: PUSH
11654: LD_INT 48
11656: PUSH
11657: LD_INT 49
11659: PUSH
11660: LD_INT 50
11662: PUSH
11663: LD_INT 51
11665: PUSH
11666: LD_INT 52
11668: PUSH
11669: LD_INT 53
11671: PUSH
11672: LD_INT 54
11674: PUSH
11675: LD_INT 55
11677: PUSH
11678: LD_INT 56
11680: PUSH
11681: LD_INT 60
11683: PUSH
11684: LD_INT 61
11686: PUSH
11687: LD_INT 62
11689: PUSH
11690: LD_INT 66
11692: PUSH
11693: LD_INT 67
11695: PUSH
11696: LD_INT 68
11698: PUSH
11699: LD_INT 81
11701: PUSH
11702: LD_INT 82
11704: PUSH
11705: LD_INT 83
11707: PUSH
11708: LD_INT 84
11710: PUSH
11711: LD_INT 85
11713: PUSH
11714: LD_INT 87
11716: PUSH
11717: LD_INT 88
11719: PUSH
11720: LD_INT 92
11722: PUSH
11723: LD_INT 94
11725: PUSH
11726: EMPTY
11727: LIST
11728: LIST
11729: LIST
11730: LIST
11731: LIST
11732: LIST
11733: LIST
11734: LIST
11735: LIST
11736: LIST
11737: LIST
11738: LIST
11739: LIST
11740: LIST
11741: LIST
11742: LIST
11743: LIST
11744: LIST
11745: LIST
11746: LIST
11747: LIST
11748: LIST
11749: LIST
11750: LIST
11751: LIST
11752: LIST
11753: LIST
11754: LIST
11755: LIST
11756: LIST
11757: LIST
11758: LIST
11759: LIST
11760: LIST
11761: LIST
11762: LIST
11763: LIST
11764: LIST
11765: LIST
11766: LIST
11767: LIST
11768: LIST
11769: LIST
11770: LIST
11771: LIST
11772: LIST
11773: LIST
11774: LIST
11775: LIST
11776: LIST
11777: LIST
11778: LIST
11779: LIST
11780: LIST
11781: LIST
11782: LIST
11783: ST_TO_ADDR
11784: GO 12025
11786: LD_INT 3
11788: DOUBLE
11789: EQUAL
11790: IFTRUE 11794
11792: GO 12024
11794: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
11795: LD_ADDR_VAR 0 4
11799: PUSH
11800: LD_INT 46
11802: PUSH
11803: LD_INT 47
11805: PUSH
11806: LD_INT 1
11808: PUSH
11809: LD_INT 2
11811: PUSH
11812: LD_INT 82
11814: PUSH
11815: LD_INT 83
11817: PUSH
11818: LD_INT 84
11820: PUSH
11821: LD_INT 85
11823: PUSH
11824: LD_INT 86
11826: PUSH
11827: LD_INT 11
11829: PUSH
11830: LD_INT 9
11832: PUSH
11833: LD_INT 20
11835: PUSH
11836: LD_INT 19
11838: PUSH
11839: LD_INT 21
11841: PUSH
11842: LD_INT 24
11844: PUSH
11845: LD_INT 22
11847: PUSH
11848: LD_INT 25
11850: PUSH
11851: LD_INT 28
11853: PUSH
11854: LD_INT 29
11856: PUSH
11857: LD_INT 30
11859: PUSH
11860: LD_INT 31
11862: PUSH
11863: LD_INT 37
11865: PUSH
11866: LD_INT 38
11868: PUSH
11869: LD_INT 32
11871: PUSH
11872: LD_INT 27
11874: PUSH
11875: LD_INT 33
11877: PUSH
11878: LD_INT 69
11880: PUSH
11881: LD_INT 39
11883: PUSH
11884: LD_INT 34
11886: PUSH
11887: LD_INT 40
11889: PUSH
11890: LD_INT 71
11892: PUSH
11893: LD_INT 23
11895: PUSH
11896: LD_INT 44
11898: PUSH
11899: LD_INT 48
11901: PUSH
11902: LD_INT 49
11904: PUSH
11905: LD_INT 50
11907: PUSH
11908: LD_INT 51
11910: PUSH
11911: LD_INT 52
11913: PUSH
11914: LD_INT 53
11916: PUSH
11917: LD_INT 54
11919: PUSH
11920: LD_INT 55
11922: PUSH
11923: LD_INT 56
11925: PUSH
11926: LD_INT 57
11928: PUSH
11929: LD_INT 58
11931: PUSH
11932: LD_INT 59
11934: PUSH
11935: LD_INT 63
11937: PUSH
11938: LD_INT 64
11940: PUSH
11941: LD_INT 65
11943: PUSH
11944: LD_INT 82
11946: PUSH
11947: LD_INT 83
11949: PUSH
11950: LD_INT 84
11952: PUSH
11953: LD_INT 85
11955: PUSH
11956: LD_INT 86
11958: PUSH
11959: LD_INT 89
11961: PUSH
11962: LD_INT 91
11964: PUSH
11965: EMPTY
11966: LIST
11967: LIST
11968: LIST
11969: LIST
11970: LIST
11971: LIST
11972: LIST
11973: LIST
11974: LIST
11975: LIST
11976: LIST
11977: LIST
11978: LIST
11979: LIST
11980: LIST
11981: LIST
11982: LIST
11983: LIST
11984: LIST
11985: LIST
11986: LIST
11987: LIST
11988: LIST
11989: LIST
11990: LIST
11991: LIST
11992: LIST
11993: LIST
11994: LIST
11995: LIST
11996: LIST
11997: LIST
11998: LIST
11999: LIST
12000: LIST
12001: LIST
12002: LIST
12003: LIST
12004: LIST
12005: LIST
12006: LIST
12007: LIST
12008: LIST
12009: LIST
12010: LIST
12011: LIST
12012: LIST
12013: LIST
12014: LIST
12015: LIST
12016: LIST
12017: LIST
12018: LIST
12019: LIST
12020: LIST
12021: ST_TO_ADDR
12022: GO 12025
12024: POP
// if state > - 1 and state < 3 then
12025: LD_VAR 0 3
12029: PUSH
12030: LD_INT 1
12032: NEG
12033: GREATER
12034: IFFALSE 12046
12036: PUSH
12037: LD_VAR 0 3
12041: PUSH
12042: LD_INT 3
12044: LESS
12045: AND
12046: IFFALSE 12103
// for i in result do
12048: LD_ADDR_VAR 0 5
12052: PUSH
12053: LD_VAR 0 4
12057: PUSH
12058: FOR_IN
12059: IFFALSE 12101
// if GetTech ( i , side ) <> state then
12061: LD_VAR 0 5
12065: PPUSH
12066: LD_VAR 0 1
12070: PPUSH
12071: CALL_OW 321
12075: PUSH
12076: LD_VAR 0 3
12080: NONEQUAL
12081: IFFALSE 12099
// result := result diff i ;
12083: LD_ADDR_VAR 0 4
12087: PUSH
12088: LD_VAR 0 4
12092: PUSH
12093: LD_VAR 0 5
12097: DIFF
12098: ST_TO_ADDR
12099: GO 12058
12101: POP
12102: POP
// end ;
12103: LD_VAR 0 4
12107: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
12108: LD_INT 0
12110: PPUSH
12111: PPUSH
12112: PPUSH
// result := true ;
12113: LD_ADDR_VAR 0 3
12117: PUSH
12118: LD_INT 1
12120: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
12121: LD_ADDR_VAR 0 5
12125: PUSH
12126: LD_VAR 0 2
12130: PPUSH
12131: CALL_OW 480
12135: ST_TO_ADDR
// if not tmp then
12136: LD_VAR 0 5
12140: NOT
12141: IFFALSE 12145
// exit ;
12143: GO 12194
// for i in tmp do
12145: LD_ADDR_VAR 0 4
12149: PUSH
12150: LD_VAR 0 5
12154: PUSH
12155: FOR_IN
12156: IFFALSE 12192
// if GetTech ( i , side ) <> state_researched then
12158: LD_VAR 0 4
12162: PPUSH
12163: LD_VAR 0 1
12167: PPUSH
12168: CALL_OW 321
12172: PUSH
12173: LD_INT 2
12175: NONEQUAL
12176: IFFALSE 12190
// begin result := false ;
12178: LD_ADDR_VAR 0 3
12182: PUSH
12183: LD_INT 0
12185: ST_TO_ADDR
// exit ;
12186: POP
12187: POP
12188: GO 12194
// end ;
12190: GO 12155
12192: POP
12193: POP
// end ;
12194: LD_VAR 0 3
12198: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
12199: LD_INT 0
12201: PPUSH
12202: PPUSH
12203: PPUSH
12204: PPUSH
12205: PPUSH
12206: PPUSH
12207: PPUSH
12208: PPUSH
12209: PPUSH
12210: PPUSH
12211: PPUSH
12212: PPUSH
12213: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
12214: LD_VAR 0 1
12218: NOT
12219: IFTRUE 12236
12221: PUSH
12222: LD_VAR 0 1
12226: PPUSH
12227: CALL_OW 257
12231: PUSH
12232: LD_INT 9
12234: NONEQUAL
12235: OR
12236: IFFALSE 12240
// exit ;
12238: GO 12819
// side := GetSide ( unit ) ;
12240: LD_ADDR_VAR 0 9
12244: PUSH
12245: LD_VAR 0 1
12249: PPUSH
12250: CALL_OW 255
12254: ST_TO_ADDR
// tech_space := tech_spacanom ;
12255: LD_ADDR_VAR 0 12
12259: PUSH
12260: LD_INT 29
12262: ST_TO_ADDR
// tech_time := tech_taurad ;
12263: LD_ADDR_VAR 0 13
12267: PUSH
12268: LD_INT 28
12270: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
12271: LD_ADDR_VAR 0 11
12275: PUSH
12276: LD_VAR 0 1
12280: PPUSH
12281: CALL_OW 310
12285: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
12286: LD_VAR 0 11
12290: PPUSH
12291: CALL_OW 247
12295: PUSH
12296: LD_INT 2
12298: EQUAL
12299: IFFALSE 12303
// exit ;
12301: GO 12819
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
12303: LD_ADDR_VAR 0 8
12307: PUSH
12308: LD_INT 81
12310: PUSH
12311: LD_VAR 0 9
12315: PUSH
12316: EMPTY
12317: LIST
12318: LIST
12319: PUSH
12320: LD_INT 3
12322: PUSH
12323: LD_INT 21
12325: PUSH
12326: LD_INT 3
12328: PUSH
12329: EMPTY
12330: LIST
12331: LIST
12332: PUSH
12333: EMPTY
12334: LIST
12335: LIST
12336: PUSH
12337: EMPTY
12338: LIST
12339: LIST
12340: PPUSH
12341: CALL_OW 69
12345: ST_TO_ADDR
// if not tmp then
12346: LD_VAR 0 8
12350: NOT
12351: IFFALSE 12355
// exit ;
12353: GO 12819
// if in_unit then
12355: LD_VAR 0 11
12359: IFFALSE 12383
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
12361: LD_ADDR_VAR 0 10
12365: PUSH
12366: LD_VAR 0 8
12370: PPUSH
12371: LD_VAR 0 11
12375: PPUSH
12376: CALL_OW 74
12380: ST_TO_ADDR
12381: GO 12403
// enemy := NearestUnitToUnit ( tmp , unit ) ;
12383: LD_ADDR_VAR 0 10
12387: PUSH
12388: LD_VAR 0 8
12392: PPUSH
12393: LD_VAR 0 1
12397: PPUSH
12398: CALL_OW 74
12402: ST_TO_ADDR
// if not enemy then
12403: LD_VAR 0 10
12407: NOT
12408: IFFALSE 12412
// exit ;
12410: GO 12819
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
12412: LD_VAR 0 11
12416: IFFALSE 12438
12418: PUSH
12419: LD_VAR 0 11
12423: PPUSH
12424: LD_VAR 0 10
12428: PPUSH
12429: CALL_OW 296
12433: PUSH
12434: LD_INT 13
12436: GREATER
12437: AND
12438: IFTRUE 12460
12440: PUSH
12441: LD_VAR 0 1
12445: PPUSH
12446: LD_VAR 0 10
12450: PPUSH
12451: CALL_OW 296
12455: PUSH
12456: LD_INT 12
12458: GREATER
12459: OR
12460: IFFALSE 12464
// exit ;
12462: GO 12819
// missile := [ 1 ] ;
12464: LD_ADDR_VAR 0 14
12468: PUSH
12469: LD_INT 1
12471: PUSH
12472: EMPTY
12473: LIST
12474: ST_TO_ADDR
// if Researched ( side , tech_space ) then
12475: LD_VAR 0 9
12479: PPUSH
12480: LD_VAR 0 12
12484: PPUSH
12485: CALL_OW 325
12489: IFFALSE 12518
// missile := Replace ( missile , missile + 1 , 2 ) ;
12491: LD_ADDR_VAR 0 14
12495: PUSH
12496: LD_VAR 0 14
12500: PPUSH
12501: LD_VAR 0 14
12505: PUSH
12506: LD_INT 1
12508: PLUS
12509: PPUSH
12510: LD_INT 2
12512: PPUSH
12513: CALL_OW 1
12517: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
12518: LD_VAR 0 9
12522: PPUSH
12523: LD_VAR 0 13
12527: PPUSH
12528: CALL_OW 325
12532: IFFALSE 12556
12534: PUSH
12535: LD_VAR 0 10
12539: PPUSH
12540: CALL_OW 255
12544: PPUSH
12545: LD_VAR 0 13
12549: PPUSH
12550: CALL_OW 325
12554: NOT
12555: AND
12556: IFFALSE 12585
// missile := Replace ( missile , missile + 1 , 3 ) ;
12558: LD_ADDR_VAR 0 14
12562: PUSH
12563: LD_VAR 0 14
12567: PPUSH
12568: LD_VAR 0 14
12572: PUSH
12573: LD_INT 1
12575: PLUS
12576: PPUSH
12577: LD_INT 3
12579: PPUSH
12580: CALL_OW 1
12584: ST_TO_ADDR
// if missile < 2 then
12585: LD_VAR 0 14
12589: PUSH
12590: LD_INT 2
12592: LESS
12593: IFFALSE 12597
// exit ;
12595: GO 12819
// x := GetX ( enemy ) ;
12597: LD_ADDR_VAR 0 4
12601: PUSH
12602: LD_VAR 0 10
12606: PPUSH
12607: CALL_OW 250
12611: ST_TO_ADDR
// y := GetY ( enemy ) ;
12612: LD_ADDR_VAR 0 5
12616: PUSH
12617: LD_VAR 0 10
12621: PPUSH
12622: CALL_OW 251
12626: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
12627: LD_ADDR_VAR 0 6
12631: PUSH
12632: LD_VAR 0 4
12636: PUSH
12637: LD_INT 1
12639: NEG
12640: PPUSH
12641: LD_INT 1
12643: PPUSH
12644: CALL_OW 12
12648: PLUS
12649: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
12650: LD_ADDR_VAR 0 7
12654: PUSH
12655: LD_VAR 0 5
12659: PUSH
12660: LD_INT 1
12662: NEG
12663: PPUSH
12664: LD_INT 1
12666: PPUSH
12667: CALL_OW 12
12671: PLUS
12672: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
12673: LD_VAR 0 6
12677: PPUSH
12678: LD_VAR 0 7
12682: PPUSH
12683: CALL_OW 488
12687: NOT
12688: IFFALSE 12710
// begin _x := x ;
12690: LD_ADDR_VAR 0 6
12694: PUSH
12695: LD_VAR 0 4
12699: ST_TO_ADDR
// _y := y ;
12700: LD_ADDR_VAR 0 7
12704: PUSH
12705: LD_VAR 0 5
12709: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
12710: LD_ADDR_VAR 0 3
12714: PUSH
12715: LD_INT 1
12717: PPUSH
12718: LD_VAR 0 14
12722: PPUSH
12723: CALL_OW 12
12727: ST_TO_ADDR
// case i of 1 :
12728: LD_VAR 0 3
12732: PUSH
12733: LD_INT 1
12735: DOUBLE
12736: EQUAL
12737: IFTRUE 12741
12739: GO 12758
12741: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
12742: LD_VAR 0 1
12746: PPUSH
12747: LD_VAR 0 10
12751: PPUSH
12752: CALL_OW 115
12756: GO 12819
12758: LD_INT 2
12760: DOUBLE
12761: EQUAL
12762: IFTRUE 12766
12764: GO 12788
12766: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
12767: LD_VAR 0 1
12771: PPUSH
12772: LD_VAR 0 6
12776: PPUSH
12777: LD_VAR 0 7
12781: PPUSH
12782: CALL_OW 153
12786: GO 12819
12788: LD_INT 3
12790: DOUBLE
12791: EQUAL
12792: IFTRUE 12796
12794: GO 12818
12796: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
12797: LD_VAR 0 1
12801: PPUSH
12802: LD_VAR 0 6
12806: PPUSH
12807: LD_VAR 0 7
12811: PPUSH
12812: CALL_OW 154
12816: GO 12819
12818: POP
// end ;
12819: LD_VAR 0 2
12823: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
12824: LD_INT 0
12826: PPUSH
12827: PPUSH
12828: PPUSH
12829: PPUSH
12830: PPUSH
12831: PPUSH
// if not unit or not building then
12832: LD_VAR 0 1
12836: NOT
12837: IFTRUE 12846
12839: PUSH
12840: LD_VAR 0 2
12844: NOT
12845: OR
12846: IFFALSE 12850
// exit ;
12848: GO 13008
// x := GetX ( building ) ;
12850: LD_ADDR_VAR 0 5
12854: PUSH
12855: LD_VAR 0 2
12859: PPUSH
12860: CALL_OW 250
12864: ST_TO_ADDR
// y := GetY ( building ) ;
12865: LD_ADDR_VAR 0 6
12869: PUSH
12870: LD_VAR 0 2
12874: PPUSH
12875: CALL_OW 251
12879: ST_TO_ADDR
// for i := 0 to 5 do
12880: LD_ADDR_VAR 0 4
12884: PUSH
12885: DOUBLE
12886: LD_INT 0
12888: DEC
12889: ST_TO_ADDR
12890: LD_INT 5
12892: PUSH
12893: FOR_TO
12894: IFFALSE 13006
// begin _x := ShiftX ( x , i , 3 ) ;
12896: LD_ADDR_VAR 0 7
12900: PUSH
12901: LD_VAR 0 5
12905: PPUSH
12906: LD_VAR 0 4
12910: PPUSH
12911: LD_INT 3
12913: PPUSH
12914: CALL_OW 272
12918: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
12919: LD_ADDR_VAR 0 8
12923: PUSH
12924: LD_VAR 0 6
12928: PPUSH
12929: LD_VAR 0 4
12933: PPUSH
12934: LD_INT 3
12936: PPUSH
12937: CALL_OW 273
12941: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
12942: LD_VAR 0 7
12946: PPUSH
12947: LD_VAR 0 8
12951: PPUSH
12952: CALL_OW 488
12956: NOT
12957: IFFALSE 12961
// continue ;
12959: GO 12893
// if HexInfo ( _x , _y ) = 0 then
12961: LD_VAR 0 7
12965: PPUSH
12966: LD_VAR 0 8
12970: PPUSH
12971: CALL_OW 428
12975: PUSH
12976: LD_INT 0
12978: EQUAL
12979: IFFALSE 13004
// begin ComMoveXY ( unit , _x , _y ) ;
12981: LD_VAR 0 1
12985: PPUSH
12986: LD_VAR 0 7
12990: PPUSH
12991: LD_VAR 0 8
12995: PPUSH
12996: CALL_OW 111
// exit ;
13000: POP
13001: POP
13002: GO 13008
// end ; end ;
13004: GO 12893
13006: POP
13007: POP
// end ;
13008: LD_VAR 0 3
13012: RET
// export function ScanBase ( side , base_area ) ; begin
13013: LD_INT 0
13015: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
13016: LD_ADDR_VAR 0 3
13020: PUSH
13021: LD_VAR 0 2
13025: PPUSH
13026: LD_INT 81
13028: PUSH
13029: LD_VAR 0 1
13033: PUSH
13034: EMPTY
13035: LIST
13036: LIST
13037: PPUSH
13038: CALL_OW 70
13042: ST_TO_ADDR
// end ;
13043: LD_VAR 0 3
13047: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
13048: LD_INT 0
13050: PPUSH
13051: PPUSH
13052: PPUSH
13053: PPUSH
// result := false ;
13054: LD_ADDR_VAR 0 2
13058: PUSH
13059: LD_INT 0
13061: ST_TO_ADDR
// side := GetSide ( unit ) ;
13062: LD_ADDR_VAR 0 3
13066: PUSH
13067: LD_VAR 0 1
13071: PPUSH
13072: CALL_OW 255
13076: ST_TO_ADDR
// nat := GetNation ( unit ) ;
13077: LD_ADDR_VAR 0 4
13081: PUSH
13082: LD_VAR 0 1
13086: PPUSH
13087: CALL_OW 248
13091: ST_TO_ADDR
// case nat of 1 :
13092: LD_VAR 0 4
13096: PUSH
13097: LD_INT 1
13099: DOUBLE
13100: EQUAL
13101: IFTRUE 13105
13103: GO 13116
13105: POP
// tech := tech_lassight ; 2 :
13106: LD_ADDR_VAR 0 5
13110: PUSH
13111: LD_INT 12
13113: ST_TO_ADDR
13114: GO 13155
13116: LD_INT 2
13118: DOUBLE
13119: EQUAL
13120: IFTRUE 13124
13122: GO 13135
13124: POP
// tech := tech_mortar ; 3 :
13125: LD_ADDR_VAR 0 5
13129: PUSH
13130: LD_INT 41
13132: ST_TO_ADDR
13133: GO 13155
13135: LD_INT 3
13137: DOUBLE
13138: EQUAL
13139: IFTRUE 13143
13141: GO 13154
13143: POP
// tech := tech_bazooka ; end ;
13144: LD_ADDR_VAR 0 5
13148: PUSH
13149: LD_INT 44
13151: ST_TO_ADDR
13152: GO 13155
13154: POP
// if Researched ( side , tech ) then
13155: LD_VAR 0 3
13159: PPUSH
13160: LD_VAR 0 5
13164: PPUSH
13165: CALL_OW 325
13169: IFFALSE 13196
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
13171: LD_ADDR_VAR 0 2
13175: PUSH
13176: LD_INT 5
13178: PUSH
13179: LD_INT 8
13181: PUSH
13182: LD_INT 9
13184: PUSH
13185: EMPTY
13186: LIST
13187: LIST
13188: LIST
13189: PUSH
13190: LD_VAR 0 4
13194: ARRAY
13195: ST_TO_ADDR
// end ;
13196: LD_VAR 0 2
13200: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
13201: LD_INT 0
13203: PPUSH
13204: PPUSH
13205: PPUSH
// if not mines then
13206: LD_VAR 0 2
13210: NOT
13211: IFFALSE 13215
// exit ;
13213: GO 13359
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
13215: LD_ADDR_VAR 0 5
13219: PUSH
13220: LD_INT 81
13222: PUSH
13223: LD_VAR 0 1
13227: PUSH
13228: EMPTY
13229: LIST
13230: LIST
13231: PUSH
13232: LD_INT 3
13234: PUSH
13235: LD_INT 21
13237: PUSH
13238: LD_INT 3
13240: PUSH
13241: EMPTY
13242: LIST
13243: LIST
13244: PUSH
13245: EMPTY
13246: LIST
13247: LIST
13248: PUSH
13249: EMPTY
13250: LIST
13251: LIST
13252: PPUSH
13253: CALL_OW 69
13257: ST_TO_ADDR
// for i in mines do
13258: LD_ADDR_VAR 0 4
13262: PUSH
13263: LD_VAR 0 2
13267: PUSH
13268: FOR_IN
13269: IFFALSE 13357
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
13271: LD_VAR 0 4
13275: PUSH
13276: LD_INT 1
13278: ARRAY
13279: PPUSH
13280: LD_VAR 0 4
13284: PUSH
13285: LD_INT 2
13287: ARRAY
13288: PPUSH
13289: CALL_OW 458
13293: NOT
13294: IFFALSE 13298
// continue ;
13296: GO 13268
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
13298: LD_VAR 0 4
13302: PUSH
13303: LD_INT 1
13305: ARRAY
13306: PPUSH
13307: LD_VAR 0 4
13311: PUSH
13312: LD_INT 2
13314: ARRAY
13315: PPUSH
13316: CALL_OW 428
13320: PUSH
13321: LD_VAR 0 5
13325: IN
13326: IFFALSE 13355
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
13328: LD_VAR 0 4
13332: PUSH
13333: LD_INT 1
13335: ARRAY
13336: PPUSH
13337: LD_VAR 0 4
13341: PUSH
13342: LD_INT 2
13344: ARRAY
13345: PPUSH
13346: LD_VAR 0 1
13350: PPUSH
13351: CALL_OW 456
// end ;
13355: GO 13268
13357: POP
13358: POP
// end ;
13359: LD_VAR 0 3
13363: RET
// export function Count ( array ) ; begin
13364: LD_INT 0
13366: PPUSH
// result := array + 0 ;
13367: LD_ADDR_VAR 0 2
13371: PUSH
13372: LD_VAR 0 1
13376: PUSH
13377: LD_INT 0
13379: PLUS
13380: ST_TO_ADDR
// end ;
13381: LD_VAR 0 2
13385: RET
// export function IsEmpty ( building ) ; begin
13386: LD_INT 0
13388: PPUSH
// if not building then
13389: LD_VAR 0 1
13393: NOT
13394: IFFALSE 13398
// exit ;
13396: GO 13441
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
13398: LD_ADDR_VAR 0 2
13402: PUSH
13403: LD_VAR 0 1
13407: PUSH
13408: LD_INT 22
13410: PUSH
13411: LD_VAR 0 1
13415: PPUSH
13416: CALL_OW 255
13420: PUSH
13421: EMPTY
13422: LIST
13423: LIST
13424: PUSH
13425: LD_INT 58
13427: PUSH
13428: EMPTY
13429: LIST
13430: PUSH
13431: EMPTY
13432: LIST
13433: LIST
13434: PPUSH
13435: CALL_OW 69
13439: IN
13440: ST_TO_ADDR
// end ;
13441: LD_VAR 0 2
13445: RET
// export function IsNotFull ( building ) ; var places ; begin
13446: LD_INT 0
13448: PPUSH
13449: PPUSH
// if not building then
13450: LD_VAR 0 1
13454: NOT
13455: IFFALSE 13459
// exit ;
13457: GO 13487
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
13459: LD_ADDR_VAR 0 2
13463: PUSH
13464: LD_VAR 0 1
13468: PPUSH
13469: LD_INT 3
13471: PUSH
13472: LD_INT 62
13474: PUSH
13475: EMPTY
13476: LIST
13477: PUSH
13478: EMPTY
13479: LIST
13480: LIST
13481: PPUSH
13482: CALL_OW 72
13486: ST_TO_ADDR
// end ;
13487: LD_VAR 0 2
13491: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
13492: LD_INT 0
13494: PPUSH
13495: PPUSH
13496: PPUSH
13497: PPUSH
// tmp := [ ] ;
13498: LD_ADDR_VAR 0 3
13502: PUSH
13503: EMPTY
13504: ST_TO_ADDR
// list := [ ] ;
13505: LD_ADDR_VAR 0 5
13509: PUSH
13510: EMPTY
13511: ST_TO_ADDR
// for i = 16 to 25 do
13512: LD_ADDR_VAR 0 4
13516: PUSH
13517: DOUBLE
13518: LD_INT 16
13520: DEC
13521: ST_TO_ADDR
13522: LD_INT 25
13524: PUSH
13525: FOR_TO
13526: IFFALSE 13599
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
13528: LD_ADDR_VAR 0 3
13532: PUSH
13533: LD_VAR 0 3
13537: PUSH
13538: LD_INT 22
13540: PUSH
13541: LD_VAR 0 1
13545: PPUSH
13546: CALL_OW 255
13550: PUSH
13551: EMPTY
13552: LIST
13553: LIST
13554: PUSH
13555: LD_INT 91
13557: PUSH
13558: LD_VAR 0 1
13562: PUSH
13563: LD_INT 6
13565: PUSH
13566: EMPTY
13567: LIST
13568: LIST
13569: LIST
13570: PUSH
13571: LD_INT 30
13573: PUSH
13574: LD_VAR 0 4
13578: PUSH
13579: EMPTY
13580: LIST
13581: LIST
13582: PUSH
13583: EMPTY
13584: LIST
13585: LIST
13586: LIST
13587: PUSH
13588: EMPTY
13589: LIST
13590: PPUSH
13591: CALL_OW 69
13595: ADD
13596: ST_TO_ADDR
13597: GO 13525
13599: POP
13600: POP
// for i = 1 to tmp do
13601: LD_ADDR_VAR 0 4
13605: PUSH
13606: DOUBLE
13607: LD_INT 1
13609: DEC
13610: ST_TO_ADDR
13611: LD_VAR 0 3
13615: PUSH
13616: FOR_TO
13617: IFFALSE 13705
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
13619: LD_ADDR_VAR 0 5
13623: PUSH
13624: LD_VAR 0 5
13628: PUSH
13629: LD_VAR 0 3
13633: PUSH
13634: LD_VAR 0 4
13638: ARRAY
13639: PPUSH
13640: CALL_OW 266
13644: PUSH
13645: LD_VAR 0 3
13649: PUSH
13650: LD_VAR 0 4
13654: ARRAY
13655: PPUSH
13656: CALL_OW 250
13660: PUSH
13661: LD_VAR 0 3
13665: PUSH
13666: LD_VAR 0 4
13670: ARRAY
13671: PPUSH
13672: CALL_OW 251
13676: PUSH
13677: LD_VAR 0 3
13681: PUSH
13682: LD_VAR 0 4
13686: ARRAY
13687: PPUSH
13688: CALL_OW 254
13692: PUSH
13693: EMPTY
13694: LIST
13695: LIST
13696: LIST
13697: LIST
13698: PUSH
13699: EMPTY
13700: LIST
13701: ADD
13702: ST_TO_ADDR
13703: GO 13616
13705: POP
13706: POP
// result := list ;
13707: LD_ADDR_VAR 0 2
13711: PUSH
13712: LD_VAR 0 5
13716: ST_TO_ADDR
// end ;
13717: LD_VAR 0 2
13721: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
13722: LD_INT 0
13724: PPUSH
13725: PPUSH
13726: PPUSH
13727: PPUSH
13728: PPUSH
13729: PPUSH
13730: PPUSH
// if not factory then
13731: LD_VAR 0 1
13735: NOT
13736: IFFALSE 13740
// exit ;
13738: GO 14343
// if control = control_apeman then
13740: LD_VAR 0 4
13744: PUSH
13745: LD_INT 5
13747: EQUAL
13748: IFFALSE 13857
// begin tmp := UnitsInside ( factory ) ;
13750: LD_ADDR_VAR 0 8
13754: PUSH
13755: LD_VAR 0 1
13759: PPUSH
13760: CALL_OW 313
13764: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
13765: LD_VAR 0 8
13769: PPUSH
13770: LD_INT 25
13772: PUSH
13773: LD_INT 12
13775: PUSH
13776: EMPTY
13777: LIST
13778: LIST
13779: PPUSH
13780: CALL_OW 72
13784: NOT
13785: IFFALSE 13795
// control := control_manual ;
13787: LD_ADDR_VAR 0 4
13791: PUSH
13792: LD_INT 1
13794: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
13795: LD_ADDR_VAR 0 8
13799: PUSH
13800: LD_VAR 0 1
13804: PPUSH
13805: CALL 13492 0 1
13809: ST_TO_ADDR
// if tmp then
13810: LD_VAR 0 8
13814: IFFALSE 13857
// begin for i in tmp do
13816: LD_ADDR_VAR 0 7
13820: PUSH
13821: LD_VAR 0 8
13825: PUSH
13826: FOR_IN
13827: IFFALSE 13855
// if i [ 1 ] = b_ext_radio then
13829: LD_VAR 0 7
13833: PUSH
13834: LD_INT 1
13836: ARRAY
13837: PUSH
13838: LD_INT 22
13840: EQUAL
13841: IFFALSE 13853
// begin control := control_remote ;
13843: LD_ADDR_VAR 0 4
13847: PUSH
13848: LD_INT 2
13850: ST_TO_ADDR
// break ;
13851: GO 13855
// end ;
13853: GO 13826
13855: POP
13856: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
13857: LD_VAR 0 1
13861: PPUSH
13862: LD_VAR 0 2
13866: PPUSH
13867: LD_VAR 0 3
13871: PPUSH
13872: LD_VAR 0 4
13876: PPUSH
13877: LD_VAR 0 5
13881: PPUSH
13882: CALL_OW 448
13886: IFFALSE 13921
// begin result := [ chassis , engine , control , weapon ] ;
13888: LD_ADDR_VAR 0 6
13892: PUSH
13893: LD_VAR 0 2
13897: PUSH
13898: LD_VAR 0 3
13902: PUSH
13903: LD_VAR 0 4
13907: PUSH
13908: LD_VAR 0 5
13912: PUSH
13913: EMPTY
13914: LIST
13915: LIST
13916: LIST
13917: LIST
13918: ST_TO_ADDR
// exit ;
13919: GO 14343
// end ; _chassis := AvailableChassisList ( factory ) ;
13921: LD_ADDR_VAR 0 9
13925: PUSH
13926: LD_VAR 0 1
13930: PPUSH
13931: CALL_OW 475
13935: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
13936: LD_ADDR_VAR 0 11
13940: PUSH
13941: LD_VAR 0 1
13945: PPUSH
13946: CALL_OW 476
13950: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
13951: LD_ADDR_VAR 0 12
13955: PUSH
13956: LD_VAR 0 1
13960: PPUSH
13961: CALL_OW 477
13965: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
13966: LD_ADDR_VAR 0 10
13970: PUSH
13971: LD_VAR 0 1
13975: PPUSH
13976: CALL_OW 478
13980: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
13981: LD_VAR 0 9
13985: NOT
13986: IFTRUE 13995
13988: PUSH
13989: LD_VAR 0 11
13993: NOT
13994: OR
13995: IFTRUE 14004
13997: PUSH
13998: LD_VAR 0 12
14002: NOT
14003: OR
14004: IFTRUE 14013
14006: PUSH
14007: LD_VAR 0 10
14011: NOT
14012: OR
14013: IFFALSE 14048
// begin result := [ chassis , engine , control , weapon ] ;
14015: LD_ADDR_VAR 0 6
14019: PUSH
14020: LD_VAR 0 2
14024: PUSH
14025: LD_VAR 0 3
14029: PUSH
14030: LD_VAR 0 4
14034: PUSH
14035: LD_VAR 0 5
14039: PUSH
14040: EMPTY
14041: LIST
14042: LIST
14043: LIST
14044: LIST
14045: ST_TO_ADDR
// exit ;
14046: GO 14343
// end ; if not chassis in _chassis then
14048: LD_VAR 0 2
14052: PUSH
14053: LD_VAR 0 9
14057: IN
14058: NOT
14059: IFFALSE 14085
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
14061: LD_ADDR_VAR 0 2
14065: PUSH
14066: LD_VAR 0 9
14070: PUSH
14071: LD_INT 1
14073: PPUSH
14074: LD_VAR 0 9
14078: PPUSH
14079: CALL_OW 12
14083: ARRAY
14084: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
14085: LD_VAR 0 2
14089: PPUSH
14090: LD_VAR 0 3
14094: PPUSH
14095: CALL 14348 0 2
14099: NOT
14100: IFFALSE 14161
// repeat engine := _engine [ 1 ] ;
14102: LD_ADDR_VAR 0 3
14106: PUSH
14107: LD_VAR 0 11
14111: PUSH
14112: LD_INT 1
14114: ARRAY
14115: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
14116: LD_ADDR_VAR 0 11
14120: PUSH
14121: LD_VAR 0 11
14125: PPUSH
14126: LD_INT 1
14128: PPUSH
14129: CALL_OW 3
14133: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
14134: LD_VAR 0 2
14138: PPUSH
14139: LD_VAR 0 3
14143: PPUSH
14144: CALL 14348 0 2
14148: IFTRUE 14159
14150: PUSH
14151: LD_VAR 0 11
14155: PUSH
14156: EMPTY
14157: EQUAL
14158: OR
14159: IFFALSE 14102
// if not control in _control then
14161: LD_VAR 0 4
14165: PUSH
14166: LD_VAR 0 12
14170: IN
14171: NOT
14172: IFFALSE 14198
// control := _control [ rand ( 1 , _control ) ] ;
14174: LD_ADDR_VAR 0 4
14178: PUSH
14179: LD_VAR 0 12
14183: PUSH
14184: LD_INT 1
14186: PPUSH
14187: LD_VAR 0 12
14191: PPUSH
14192: CALL_OW 12
14196: ARRAY
14197: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
14198: LD_VAR 0 2
14202: PPUSH
14203: LD_VAR 0 5
14207: PPUSH
14208: CALL 14570 0 2
14212: NOT
14213: IFFALSE 14274
// repeat weapon := _weapon [ 1 ] ;
14215: LD_ADDR_VAR 0 5
14219: PUSH
14220: LD_VAR 0 10
14224: PUSH
14225: LD_INT 1
14227: ARRAY
14228: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
14229: LD_ADDR_VAR 0 10
14233: PUSH
14234: LD_VAR 0 10
14238: PPUSH
14239: LD_INT 1
14241: PPUSH
14242: CALL_OW 3
14246: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
14247: LD_VAR 0 2
14251: PPUSH
14252: LD_VAR 0 5
14256: PPUSH
14257: CALL 14570 0 2
14261: IFTRUE 14272
14263: PUSH
14264: LD_VAR 0 10
14268: PUSH
14269: EMPTY
14270: EQUAL
14271: OR
14272: IFFALSE 14215
// result := [ ] ;
14274: LD_ADDR_VAR 0 6
14278: PUSH
14279: EMPTY
14280: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
14281: LD_VAR 0 1
14285: PPUSH
14286: LD_VAR 0 2
14290: PPUSH
14291: LD_VAR 0 3
14295: PPUSH
14296: LD_VAR 0 4
14300: PPUSH
14301: LD_VAR 0 5
14305: PPUSH
14306: CALL_OW 448
14310: IFFALSE 14343
// result := [ chassis , engine , control , weapon ] ;
14312: LD_ADDR_VAR 0 6
14316: PUSH
14317: LD_VAR 0 2
14321: PUSH
14322: LD_VAR 0 3
14326: PUSH
14327: LD_VAR 0 4
14331: PUSH
14332: LD_VAR 0 5
14336: PUSH
14337: EMPTY
14338: LIST
14339: LIST
14340: LIST
14341: LIST
14342: ST_TO_ADDR
// end ;
14343: LD_VAR 0 6
14347: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
14348: LD_INT 0
14350: PPUSH
// if not chassis or not engine then
14351: LD_VAR 0 1
14355: NOT
14356: IFTRUE 14365
14358: PUSH
14359: LD_VAR 0 2
14363: NOT
14364: OR
14365: IFFALSE 14369
// exit ;
14367: GO 14565
// case engine of engine_solar :
14369: LD_VAR 0 2
14373: PUSH
14374: LD_INT 2
14376: DOUBLE
14377: EQUAL
14378: IFTRUE 14382
14380: GO 14420
14382: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
14383: LD_ADDR_VAR 0 3
14387: PUSH
14388: LD_INT 11
14390: PUSH
14391: LD_INT 12
14393: PUSH
14394: LD_INT 13
14396: PUSH
14397: LD_INT 14
14399: PUSH
14400: LD_INT 1
14402: PUSH
14403: LD_INT 2
14405: PUSH
14406: LD_INT 3
14408: PUSH
14409: EMPTY
14410: LIST
14411: LIST
14412: LIST
14413: LIST
14414: LIST
14415: LIST
14416: LIST
14417: ST_TO_ADDR
14418: GO 14549
14420: LD_INT 1
14422: DOUBLE
14423: EQUAL
14424: IFTRUE 14428
14426: GO 14490
14428: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
14429: LD_ADDR_VAR 0 3
14433: PUSH
14434: LD_INT 11
14436: PUSH
14437: LD_INT 12
14439: PUSH
14440: LD_INT 13
14442: PUSH
14443: LD_INT 14
14445: PUSH
14446: LD_INT 1
14448: PUSH
14449: LD_INT 2
14451: PUSH
14452: LD_INT 3
14454: PUSH
14455: LD_INT 4
14457: PUSH
14458: LD_INT 5
14460: PUSH
14461: LD_INT 21
14463: PUSH
14464: LD_INT 23
14466: PUSH
14467: LD_INT 22
14469: PUSH
14470: LD_INT 24
14472: PUSH
14473: EMPTY
14474: LIST
14475: LIST
14476: LIST
14477: LIST
14478: LIST
14479: LIST
14480: LIST
14481: LIST
14482: LIST
14483: LIST
14484: LIST
14485: LIST
14486: LIST
14487: ST_TO_ADDR
14488: GO 14549
14490: LD_INT 3
14492: DOUBLE
14493: EQUAL
14494: IFTRUE 14498
14496: GO 14548
14498: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
14499: LD_ADDR_VAR 0 3
14503: PUSH
14504: LD_INT 13
14506: PUSH
14507: LD_INT 14
14509: PUSH
14510: LD_INT 2
14512: PUSH
14513: LD_INT 3
14515: PUSH
14516: LD_INT 4
14518: PUSH
14519: LD_INT 5
14521: PUSH
14522: LD_INT 21
14524: PUSH
14525: LD_INT 22
14527: PUSH
14528: LD_INT 23
14530: PUSH
14531: LD_INT 24
14533: PUSH
14534: EMPTY
14535: LIST
14536: LIST
14537: LIST
14538: LIST
14539: LIST
14540: LIST
14541: LIST
14542: LIST
14543: LIST
14544: LIST
14545: ST_TO_ADDR
14546: GO 14549
14548: POP
// result := ( chassis in result ) ;
14549: LD_ADDR_VAR 0 3
14553: PUSH
14554: LD_VAR 0 1
14558: PUSH
14559: LD_VAR 0 3
14563: IN
14564: ST_TO_ADDR
// end ;
14565: LD_VAR 0 3
14569: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
14570: LD_INT 0
14572: PPUSH
// if not chassis or not weapon then
14573: LD_VAR 0 1
14577: NOT
14578: IFTRUE 14587
14580: PUSH
14581: LD_VAR 0 2
14585: NOT
14586: OR
14587: IFFALSE 14591
// exit ;
14589: GO 15685
// case weapon of us_machine_gun :
14591: LD_VAR 0 2
14595: PUSH
14596: LD_INT 2
14598: DOUBLE
14599: EQUAL
14600: IFTRUE 14604
14602: GO 14634
14604: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
14605: LD_ADDR_VAR 0 3
14609: PUSH
14610: LD_INT 1
14612: PUSH
14613: LD_INT 2
14615: PUSH
14616: LD_INT 3
14618: PUSH
14619: LD_INT 4
14621: PUSH
14622: LD_INT 5
14624: PUSH
14625: EMPTY
14626: LIST
14627: LIST
14628: LIST
14629: LIST
14630: LIST
14631: ST_TO_ADDR
14632: GO 15669
14634: LD_INT 3
14636: DOUBLE
14637: EQUAL
14638: IFTRUE 14642
14640: GO 14672
14642: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
14643: LD_ADDR_VAR 0 3
14647: PUSH
14648: LD_INT 1
14650: PUSH
14651: LD_INT 2
14653: PUSH
14654: LD_INT 3
14656: PUSH
14657: LD_INT 4
14659: PUSH
14660: LD_INT 5
14662: PUSH
14663: EMPTY
14664: LIST
14665: LIST
14666: LIST
14667: LIST
14668: LIST
14669: ST_TO_ADDR
14670: GO 15669
14672: LD_INT 11
14674: DOUBLE
14675: EQUAL
14676: IFTRUE 14680
14678: GO 14710
14680: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
14681: LD_ADDR_VAR 0 3
14685: PUSH
14686: LD_INT 1
14688: PUSH
14689: LD_INT 2
14691: PUSH
14692: LD_INT 3
14694: PUSH
14695: LD_INT 4
14697: PUSH
14698: LD_INT 5
14700: PUSH
14701: EMPTY
14702: LIST
14703: LIST
14704: LIST
14705: LIST
14706: LIST
14707: ST_TO_ADDR
14708: GO 15669
14710: LD_INT 4
14712: DOUBLE
14713: EQUAL
14714: IFTRUE 14718
14716: GO 14744
14718: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
14719: LD_ADDR_VAR 0 3
14723: PUSH
14724: LD_INT 2
14726: PUSH
14727: LD_INT 3
14729: PUSH
14730: LD_INT 4
14732: PUSH
14733: LD_INT 5
14735: PUSH
14736: EMPTY
14737: LIST
14738: LIST
14739: LIST
14740: LIST
14741: ST_TO_ADDR
14742: GO 15669
14744: LD_INT 5
14746: DOUBLE
14747: EQUAL
14748: IFTRUE 14752
14750: GO 14778
14752: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
14753: LD_ADDR_VAR 0 3
14757: PUSH
14758: LD_INT 2
14760: PUSH
14761: LD_INT 3
14763: PUSH
14764: LD_INT 4
14766: PUSH
14767: LD_INT 5
14769: PUSH
14770: EMPTY
14771: LIST
14772: LIST
14773: LIST
14774: LIST
14775: ST_TO_ADDR
14776: GO 15669
14778: LD_INT 9
14780: DOUBLE
14781: EQUAL
14782: IFTRUE 14786
14784: GO 14812
14786: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
14787: LD_ADDR_VAR 0 3
14791: PUSH
14792: LD_INT 2
14794: PUSH
14795: LD_INT 3
14797: PUSH
14798: LD_INT 4
14800: PUSH
14801: LD_INT 5
14803: PUSH
14804: EMPTY
14805: LIST
14806: LIST
14807: LIST
14808: LIST
14809: ST_TO_ADDR
14810: GO 15669
14812: LD_INT 7
14814: DOUBLE
14815: EQUAL
14816: IFTRUE 14820
14818: GO 14846
14820: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
14821: LD_ADDR_VAR 0 3
14825: PUSH
14826: LD_INT 2
14828: PUSH
14829: LD_INT 3
14831: PUSH
14832: LD_INT 4
14834: PUSH
14835: LD_INT 5
14837: PUSH
14838: EMPTY
14839: LIST
14840: LIST
14841: LIST
14842: LIST
14843: ST_TO_ADDR
14844: GO 15669
14846: LD_INT 12
14848: DOUBLE
14849: EQUAL
14850: IFTRUE 14854
14852: GO 14880
14854: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
14855: LD_ADDR_VAR 0 3
14859: PUSH
14860: LD_INT 2
14862: PUSH
14863: LD_INT 3
14865: PUSH
14866: LD_INT 4
14868: PUSH
14869: LD_INT 5
14871: PUSH
14872: EMPTY
14873: LIST
14874: LIST
14875: LIST
14876: LIST
14877: ST_TO_ADDR
14878: GO 15669
14880: LD_INT 13
14882: DOUBLE
14883: EQUAL
14884: IFTRUE 14888
14886: GO 14914
14888: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
14889: LD_ADDR_VAR 0 3
14893: PUSH
14894: LD_INT 2
14896: PUSH
14897: LD_INT 3
14899: PUSH
14900: LD_INT 4
14902: PUSH
14903: LD_INT 5
14905: PUSH
14906: EMPTY
14907: LIST
14908: LIST
14909: LIST
14910: LIST
14911: ST_TO_ADDR
14912: GO 15669
14914: LD_INT 14
14916: DOUBLE
14917: EQUAL
14918: IFTRUE 14922
14920: GO 14940
14922: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
14923: LD_ADDR_VAR 0 3
14927: PUSH
14928: LD_INT 4
14930: PUSH
14931: LD_INT 5
14933: PUSH
14934: EMPTY
14935: LIST
14936: LIST
14937: ST_TO_ADDR
14938: GO 15669
14940: LD_INT 6
14942: DOUBLE
14943: EQUAL
14944: IFTRUE 14948
14946: GO 14966
14948: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
14949: LD_ADDR_VAR 0 3
14953: PUSH
14954: LD_INT 4
14956: PUSH
14957: LD_INT 5
14959: PUSH
14960: EMPTY
14961: LIST
14962: LIST
14963: ST_TO_ADDR
14964: GO 15669
14966: LD_INT 10
14968: DOUBLE
14969: EQUAL
14970: IFTRUE 14974
14972: GO 14992
14974: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
14975: LD_ADDR_VAR 0 3
14979: PUSH
14980: LD_INT 4
14982: PUSH
14983: LD_INT 5
14985: PUSH
14986: EMPTY
14987: LIST
14988: LIST
14989: ST_TO_ADDR
14990: GO 15669
14992: LD_INT 22
14994: DOUBLE
14995: EQUAL
14996: IFTRUE 15000
14998: GO 15026
15000: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
15001: LD_ADDR_VAR 0 3
15005: PUSH
15006: LD_INT 11
15008: PUSH
15009: LD_INT 12
15011: PUSH
15012: LD_INT 13
15014: PUSH
15015: LD_INT 14
15017: PUSH
15018: EMPTY
15019: LIST
15020: LIST
15021: LIST
15022: LIST
15023: ST_TO_ADDR
15024: GO 15669
15026: LD_INT 23
15028: DOUBLE
15029: EQUAL
15030: IFTRUE 15034
15032: GO 15060
15034: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
15035: LD_ADDR_VAR 0 3
15039: PUSH
15040: LD_INT 11
15042: PUSH
15043: LD_INT 12
15045: PUSH
15046: LD_INT 13
15048: PUSH
15049: LD_INT 14
15051: PUSH
15052: EMPTY
15053: LIST
15054: LIST
15055: LIST
15056: LIST
15057: ST_TO_ADDR
15058: GO 15669
15060: LD_INT 24
15062: DOUBLE
15063: EQUAL
15064: IFTRUE 15068
15066: GO 15094
15068: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
15069: LD_ADDR_VAR 0 3
15073: PUSH
15074: LD_INT 11
15076: PUSH
15077: LD_INT 12
15079: PUSH
15080: LD_INT 13
15082: PUSH
15083: LD_INT 14
15085: PUSH
15086: EMPTY
15087: LIST
15088: LIST
15089: LIST
15090: LIST
15091: ST_TO_ADDR
15092: GO 15669
15094: LD_INT 30
15096: DOUBLE
15097: EQUAL
15098: IFTRUE 15102
15100: GO 15128
15102: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
15103: LD_ADDR_VAR 0 3
15107: PUSH
15108: LD_INT 11
15110: PUSH
15111: LD_INT 12
15113: PUSH
15114: LD_INT 13
15116: PUSH
15117: LD_INT 14
15119: PUSH
15120: EMPTY
15121: LIST
15122: LIST
15123: LIST
15124: LIST
15125: ST_TO_ADDR
15126: GO 15669
15128: LD_INT 25
15130: DOUBLE
15131: EQUAL
15132: IFTRUE 15136
15134: GO 15154
15136: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
15137: LD_ADDR_VAR 0 3
15141: PUSH
15142: LD_INT 13
15144: PUSH
15145: LD_INT 14
15147: PUSH
15148: EMPTY
15149: LIST
15150: LIST
15151: ST_TO_ADDR
15152: GO 15669
15154: LD_INT 27
15156: DOUBLE
15157: EQUAL
15158: IFTRUE 15162
15160: GO 15180
15162: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
15163: LD_ADDR_VAR 0 3
15167: PUSH
15168: LD_INT 13
15170: PUSH
15171: LD_INT 14
15173: PUSH
15174: EMPTY
15175: LIST
15176: LIST
15177: ST_TO_ADDR
15178: GO 15669
15180: LD_INT 92
15182: DOUBLE
15183: EQUAL
15184: IFTRUE 15188
15186: GO 15214
15188: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
15189: LD_ADDR_VAR 0 3
15193: PUSH
15194: LD_INT 11
15196: PUSH
15197: LD_INT 12
15199: PUSH
15200: LD_INT 13
15202: PUSH
15203: LD_INT 14
15205: PUSH
15206: EMPTY
15207: LIST
15208: LIST
15209: LIST
15210: LIST
15211: ST_TO_ADDR
15212: GO 15669
15214: LD_INT 28
15216: DOUBLE
15217: EQUAL
15218: IFTRUE 15222
15220: GO 15240
15222: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
15223: LD_ADDR_VAR 0 3
15227: PUSH
15228: LD_INT 13
15230: PUSH
15231: LD_INT 14
15233: PUSH
15234: EMPTY
15235: LIST
15236: LIST
15237: ST_TO_ADDR
15238: GO 15669
15240: LD_INT 29
15242: DOUBLE
15243: EQUAL
15244: IFTRUE 15248
15246: GO 15266
15248: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
15249: LD_ADDR_VAR 0 3
15253: PUSH
15254: LD_INT 13
15256: PUSH
15257: LD_INT 14
15259: PUSH
15260: EMPTY
15261: LIST
15262: LIST
15263: ST_TO_ADDR
15264: GO 15669
15266: LD_INT 31
15268: DOUBLE
15269: EQUAL
15270: IFTRUE 15274
15272: GO 15292
15274: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
15275: LD_ADDR_VAR 0 3
15279: PUSH
15280: LD_INT 13
15282: PUSH
15283: LD_INT 14
15285: PUSH
15286: EMPTY
15287: LIST
15288: LIST
15289: ST_TO_ADDR
15290: GO 15669
15292: LD_INT 26
15294: DOUBLE
15295: EQUAL
15296: IFTRUE 15300
15298: GO 15318
15300: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
15301: LD_ADDR_VAR 0 3
15305: PUSH
15306: LD_INT 13
15308: PUSH
15309: LD_INT 14
15311: PUSH
15312: EMPTY
15313: LIST
15314: LIST
15315: ST_TO_ADDR
15316: GO 15669
15318: LD_INT 42
15320: DOUBLE
15321: EQUAL
15322: IFTRUE 15326
15324: GO 15352
15326: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
15327: LD_ADDR_VAR 0 3
15331: PUSH
15332: LD_INT 21
15334: PUSH
15335: LD_INT 22
15337: PUSH
15338: LD_INT 23
15340: PUSH
15341: LD_INT 24
15343: PUSH
15344: EMPTY
15345: LIST
15346: LIST
15347: LIST
15348: LIST
15349: ST_TO_ADDR
15350: GO 15669
15352: LD_INT 43
15354: DOUBLE
15355: EQUAL
15356: IFTRUE 15360
15358: GO 15386
15360: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
15361: LD_ADDR_VAR 0 3
15365: PUSH
15366: LD_INT 21
15368: PUSH
15369: LD_INT 22
15371: PUSH
15372: LD_INT 23
15374: PUSH
15375: LD_INT 24
15377: PUSH
15378: EMPTY
15379: LIST
15380: LIST
15381: LIST
15382: LIST
15383: ST_TO_ADDR
15384: GO 15669
15386: LD_INT 44
15388: DOUBLE
15389: EQUAL
15390: IFTRUE 15394
15392: GO 15420
15394: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
15395: LD_ADDR_VAR 0 3
15399: PUSH
15400: LD_INT 21
15402: PUSH
15403: LD_INT 22
15405: PUSH
15406: LD_INT 23
15408: PUSH
15409: LD_INT 24
15411: PUSH
15412: EMPTY
15413: LIST
15414: LIST
15415: LIST
15416: LIST
15417: ST_TO_ADDR
15418: GO 15669
15420: LD_INT 45
15422: DOUBLE
15423: EQUAL
15424: IFTRUE 15428
15426: GO 15454
15428: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
15429: LD_ADDR_VAR 0 3
15433: PUSH
15434: LD_INT 21
15436: PUSH
15437: LD_INT 22
15439: PUSH
15440: LD_INT 23
15442: PUSH
15443: LD_INT 24
15445: PUSH
15446: EMPTY
15447: LIST
15448: LIST
15449: LIST
15450: LIST
15451: ST_TO_ADDR
15452: GO 15669
15454: LD_INT 49
15456: DOUBLE
15457: EQUAL
15458: IFTRUE 15462
15460: GO 15488
15462: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
15463: LD_ADDR_VAR 0 3
15467: PUSH
15468: LD_INT 21
15470: PUSH
15471: LD_INT 22
15473: PUSH
15474: LD_INT 23
15476: PUSH
15477: LD_INT 24
15479: PUSH
15480: EMPTY
15481: LIST
15482: LIST
15483: LIST
15484: LIST
15485: ST_TO_ADDR
15486: GO 15669
15488: LD_INT 51
15490: DOUBLE
15491: EQUAL
15492: IFTRUE 15496
15494: GO 15522
15496: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
15497: LD_ADDR_VAR 0 3
15501: PUSH
15502: LD_INT 21
15504: PUSH
15505: LD_INT 22
15507: PUSH
15508: LD_INT 23
15510: PUSH
15511: LD_INT 24
15513: PUSH
15514: EMPTY
15515: LIST
15516: LIST
15517: LIST
15518: LIST
15519: ST_TO_ADDR
15520: GO 15669
15522: LD_INT 52
15524: DOUBLE
15525: EQUAL
15526: IFTRUE 15530
15528: GO 15556
15530: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
15531: LD_ADDR_VAR 0 3
15535: PUSH
15536: LD_INT 21
15538: PUSH
15539: LD_INT 22
15541: PUSH
15542: LD_INT 23
15544: PUSH
15545: LD_INT 24
15547: PUSH
15548: EMPTY
15549: LIST
15550: LIST
15551: LIST
15552: LIST
15553: ST_TO_ADDR
15554: GO 15669
15556: LD_INT 53
15558: DOUBLE
15559: EQUAL
15560: IFTRUE 15564
15562: GO 15582
15564: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
15565: LD_ADDR_VAR 0 3
15569: PUSH
15570: LD_INT 23
15572: PUSH
15573: LD_INT 24
15575: PUSH
15576: EMPTY
15577: LIST
15578: LIST
15579: ST_TO_ADDR
15580: GO 15669
15582: LD_INT 46
15584: DOUBLE
15585: EQUAL
15586: IFTRUE 15590
15588: GO 15608
15590: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
15591: LD_ADDR_VAR 0 3
15595: PUSH
15596: LD_INT 23
15598: PUSH
15599: LD_INT 24
15601: PUSH
15602: EMPTY
15603: LIST
15604: LIST
15605: ST_TO_ADDR
15606: GO 15669
15608: LD_INT 47
15610: DOUBLE
15611: EQUAL
15612: IFTRUE 15616
15614: GO 15634
15616: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
15617: LD_ADDR_VAR 0 3
15621: PUSH
15622: LD_INT 23
15624: PUSH
15625: LD_INT 24
15627: PUSH
15628: EMPTY
15629: LIST
15630: LIST
15631: ST_TO_ADDR
15632: GO 15669
15634: LD_INT 98
15636: DOUBLE
15637: EQUAL
15638: IFTRUE 15642
15640: GO 15668
15642: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
15643: LD_ADDR_VAR 0 3
15647: PUSH
15648: LD_INT 21
15650: PUSH
15651: LD_INT 22
15653: PUSH
15654: LD_INT 23
15656: PUSH
15657: LD_INT 24
15659: PUSH
15660: EMPTY
15661: LIST
15662: LIST
15663: LIST
15664: LIST
15665: ST_TO_ADDR
15666: GO 15669
15668: POP
// result := ( chassis in result ) ;
15669: LD_ADDR_VAR 0 3
15673: PUSH
15674: LD_VAR 0 1
15678: PUSH
15679: LD_VAR 0 3
15683: IN
15684: ST_TO_ADDR
// end ;
15685: LD_VAR 0 3
15689: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
15690: LD_INT 0
15692: PPUSH
15693: PPUSH
15694: PPUSH
15695: PPUSH
15696: PPUSH
15697: PPUSH
15698: PPUSH
// result := array ;
15699: LD_ADDR_VAR 0 5
15703: PUSH
15704: LD_VAR 0 1
15708: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
15709: LD_VAR 0 1
15713: NOT
15714: IFTRUE 15723
15716: PUSH
15717: LD_VAR 0 2
15721: NOT
15722: OR
15723: IFTRUE 15732
15725: PUSH
15726: LD_VAR 0 3
15730: NOT
15731: OR
15732: IFTRUE 15746
15734: PUSH
15735: LD_VAR 0 2
15739: PUSH
15740: LD_VAR 0 1
15744: GREATER
15745: OR
15746: IFTRUE 15760
15748: PUSH
15749: LD_VAR 0 3
15753: PUSH
15754: LD_VAR 0 1
15758: GREATER
15759: OR
15760: IFFALSE 15764
// exit ;
15762: GO 16060
// if direction then
15764: LD_VAR 0 4
15768: IFFALSE 15832
// begin d := 1 ;
15770: LD_ADDR_VAR 0 9
15774: PUSH
15775: LD_INT 1
15777: ST_TO_ADDR
// if i_from > i_to then
15778: LD_VAR 0 2
15782: PUSH
15783: LD_VAR 0 3
15787: GREATER
15788: IFFALSE 15814
// length := ( array - i_from ) + i_to else
15790: LD_ADDR_VAR 0 11
15794: PUSH
15795: LD_VAR 0 1
15799: PUSH
15800: LD_VAR 0 2
15804: MINUS
15805: PUSH
15806: LD_VAR 0 3
15810: PLUS
15811: ST_TO_ADDR
15812: GO 15830
// length := i_to - i_from ;
15814: LD_ADDR_VAR 0 11
15818: PUSH
15819: LD_VAR 0 3
15823: PUSH
15824: LD_VAR 0 2
15828: MINUS
15829: ST_TO_ADDR
// end else
15830: GO 15893
// begin d := - 1 ;
15832: LD_ADDR_VAR 0 9
15836: PUSH
15837: LD_INT 1
15839: NEG
15840: ST_TO_ADDR
// if i_from > i_to then
15841: LD_VAR 0 2
15845: PUSH
15846: LD_VAR 0 3
15850: GREATER
15851: IFFALSE 15871
// length := i_from - i_to else
15853: LD_ADDR_VAR 0 11
15857: PUSH
15858: LD_VAR 0 2
15862: PUSH
15863: LD_VAR 0 3
15867: MINUS
15868: ST_TO_ADDR
15869: GO 15893
// length := ( array - i_to ) + i_from ;
15871: LD_ADDR_VAR 0 11
15875: PUSH
15876: LD_VAR 0 1
15880: PUSH
15881: LD_VAR 0 3
15885: MINUS
15886: PUSH
15887: LD_VAR 0 2
15891: PLUS
15892: ST_TO_ADDR
// end ; if not length then
15893: LD_VAR 0 11
15897: NOT
15898: IFFALSE 15902
// exit ;
15900: GO 16060
// tmp := array ;
15902: LD_ADDR_VAR 0 10
15906: PUSH
15907: LD_VAR 0 1
15911: ST_TO_ADDR
// for i = 1 to length do
15912: LD_ADDR_VAR 0 6
15916: PUSH
15917: DOUBLE
15918: LD_INT 1
15920: DEC
15921: ST_TO_ADDR
15922: LD_VAR 0 11
15926: PUSH
15927: FOR_TO
15928: IFFALSE 16048
// begin for j = 1 to array do
15930: LD_ADDR_VAR 0 7
15934: PUSH
15935: DOUBLE
15936: LD_INT 1
15938: DEC
15939: ST_TO_ADDR
15940: LD_VAR 0 1
15944: PUSH
15945: FOR_TO
15946: IFFALSE 16034
// begin k := j + d ;
15948: LD_ADDR_VAR 0 8
15952: PUSH
15953: LD_VAR 0 7
15957: PUSH
15958: LD_VAR 0 9
15962: PLUS
15963: ST_TO_ADDR
// if k > array then
15964: LD_VAR 0 8
15968: PUSH
15969: LD_VAR 0 1
15973: GREATER
15974: IFFALSE 15984
// k := 1 ;
15976: LD_ADDR_VAR 0 8
15980: PUSH
15981: LD_INT 1
15983: ST_TO_ADDR
// if not k then
15984: LD_VAR 0 8
15988: NOT
15989: IFFALSE 16001
// k := array ;
15991: LD_ADDR_VAR 0 8
15995: PUSH
15996: LD_VAR 0 1
16000: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
16001: LD_ADDR_VAR 0 10
16005: PUSH
16006: LD_VAR 0 10
16010: PPUSH
16011: LD_VAR 0 8
16015: PPUSH
16016: LD_VAR 0 1
16020: PUSH
16021: LD_VAR 0 7
16025: ARRAY
16026: PPUSH
16027: CALL_OW 1
16031: ST_TO_ADDR
// end ;
16032: GO 15945
16034: POP
16035: POP
// array := tmp ;
16036: LD_ADDR_VAR 0 1
16040: PUSH
16041: LD_VAR 0 10
16045: ST_TO_ADDR
// end ;
16046: GO 15927
16048: POP
16049: POP
// result := array ;
16050: LD_ADDR_VAR 0 5
16054: PUSH
16055: LD_VAR 0 1
16059: ST_TO_ADDR
// end ;
16060: LD_VAR 0 5
16064: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
16065: LD_INT 0
16067: PPUSH
16068: PPUSH
// result := 0 ;
16069: LD_ADDR_VAR 0 3
16073: PUSH
16074: LD_INT 0
16076: ST_TO_ADDR
// if not array or not value in array then
16077: LD_VAR 0 1
16081: NOT
16082: IFTRUE 16097
16084: PUSH
16085: LD_VAR 0 2
16089: PUSH
16090: LD_VAR 0 1
16094: IN
16095: NOT
16096: OR
16097: IFFALSE 16101
// exit ;
16099: GO 16155
// for i = 1 to array do
16101: LD_ADDR_VAR 0 4
16105: PUSH
16106: DOUBLE
16107: LD_INT 1
16109: DEC
16110: ST_TO_ADDR
16111: LD_VAR 0 1
16115: PUSH
16116: FOR_TO
16117: IFFALSE 16153
// if value = array [ i ] then
16119: LD_VAR 0 2
16123: PUSH
16124: LD_VAR 0 1
16128: PUSH
16129: LD_VAR 0 4
16133: ARRAY
16134: EQUAL
16135: IFFALSE 16151
// begin result := i ;
16137: LD_ADDR_VAR 0 3
16141: PUSH
16142: LD_VAR 0 4
16146: ST_TO_ADDR
// exit ;
16147: POP
16148: POP
16149: GO 16155
// end ;
16151: GO 16116
16153: POP
16154: POP
// end ;
16155: LD_VAR 0 3
16159: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
16160: LD_INT 0
16162: PPUSH
// vc_chassis := chassis ;
16163: LD_ADDR_OWVAR 37
16167: PUSH
16168: LD_VAR 0 1
16172: ST_TO_ADDR
// vc_engine := engine ;
16173: LD_ADDR_OWVAR 39
16177: PUSH
16178: LD_VAR 0 2
16182: ST_TO_ADDR
// vc_control := control ;
16183: LD_ADDR_OWVAR 38
16187: PUSH
16188: LD_VAR 0 3
16192: ST_TO_ADDR
// vc_weapon := weapon ;
16193: LD_ADDR_OWVAR 40
16197: PUSH
16198: LD_VAR 0 4
16202: ST_TO_ADDR
// vc_fuel_battery := fuel ;
16203: LD_ADDR_OWVAR 41
16207: PUSH
16208: LD_VAR 0 5
16212: ST_TO_ADDR
// end ;
16213: LD_VAR 0 6
16217: RET
// export function WantPlant ( unit ) ; var task ; begin
16218: LD_INT 0
16220: PPUSH
16221: PPUSH
// result := false ;
16222: LD_ADDR_VAR 0 2
16226: PUSH
16227: LD_INT 0
16229: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
16230: LD_ADDR_VAR 0 3
16234: PUSH
16235: LD_VAR 0 1
16239: PPUSH
16240: CALL_OW 437
16244: ST_TO_ADDR
// if task then
16245: LD_VAR 0 3
16249: IFFALSE 16277
// if task [ 1 ] [ 1 ] = p then
16251: LD_VAR 0 3
16255: PUSH
16256: LD_INT 1
16258: ARRAY
16259: PUSH
16260: LD_INT 1
16262: ARRAY
16263: PUSH
16264: LD_STRING p
16266: EQUAL
16267: IFFALSE 16277
// result := true ;
16269: LD_ADDR_VAR 0 2
16273: PUSH
16274: LD_INT 1
16276: ST_TO_ADDR
// end ;
16277: LD_VAR 0 2
16281: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
16282: LD_INT 0
16284: PPUSH
16285: PPUSH
16286: PPUSH
16287: PPUSH
// if pos < 1 then
16288: LD_VAR 0 2
16292: PUSH
16293: LD_INT 1
16295: LESS
16296: IFFALSE 16300
// exit ;
16298: GO 16603
// if pos = 1 then
16300: LD_VAR 0 2
16304: PUSH
16305: LD_INT 1
16307: EQUAL
16308: IFFALSE 16341
// result := Replace ( arr , pos [ 1 ] , value ) else
16310: LD_ADDR_VAR 0 4
16314: PUSH
16315: LD_VAR 0 1
16319: PPUSH
16320: LD_VAR 0 2
16324: PUSH
16325: LD_INT 1
16327: ARRAY
16328: PPUSH
16329: LD_VAR 0 3
16333: PPUSH
16334: CALL_OW 1
16338: ST_TO_ADDR
16339: GO 16603
// begin tmp := arr ;
16341: LD_ADDR_VAR 0 6
16345: PUSH
16346: LD_VAR 0 1
16350: ST_TO_ADDR
// s_arr := [ tmp ] ;
16351: LD_ADDR_VAR 0 7
16355: PUSH
16356: LD_VAR 0 6
16360: PUSH
16361: EMPTY
16362: LIST
16363: ST_TO_ADDR
// for i = 1 to pos - 1 do
16364: LD_ADDR_VAR 0 5
16368: PUSH
16369: DOUBLE
16370: LD_INT 1
16372: DEC
16373: ST_TO_ADDR
16374: LD_VAR 0 2
16378: PUSH
16379: LD_INT 1
16381: MINUS
16382: PUSH
16383: FOR_TO
16384: IFFALSE 16429
// begin tmp := tmp [ pos [ i ] ] ;
16386: LD_ADDR_VAR 0 6
16390: PUSH
16391: LD_VAR 0 6
16395: PUSH
16396: LD_VAR 0 2
16400: PUSH
16401: LD_VAR 0 5
16405: ARRAY
16406: ARRAY
16407: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
16408: LD_ADDR_VAR 0 7
16412: PUSH
16413: LD_VAR 0 7
16417: PUSH
16418: LD_VAR 0 6
16422: PUSH
16423: EMPTY
16424: LIST
16425: ADD
16426: ST_TO_ADDR
// end ;
16427: GO 16383
16429: POP
16430: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
16431: LD_ADDR_VAR 0 6
16435: PUSH
16436: LD_VAR 0 6
16440: PPUSH
16441: LD_VAR 0 2
16445: PUSH
16446: LD_VAR 0 2
16450: ARRAY
16451: PPUSH
16452: LD_VAR 0 3
16456: PPUSH
16457: CALL_OW 1
16461: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
16462: LD_ADDR_VAR 0 7
16466: PUSH
16467: LD_VAR 0 7
16471: PPUSH
16472: LD_VAR 0 7
16476: PPUSH
16477: LD_VAR 0 6
16481: PPUSH
16482: CALL_OW 1
16486: ST_TO_ADDR
// for i = s_arr downto 2 do
16487: LD_ADDR_VAR 0 5
16491: PUSH
16492: DOUBLE
16493: LD_VAR 0 7
16497: INC
16498: ST_TO_ADDR
16499: LD_INT 2
16501: PUSH
16502: FOR_DOWNTO
16503: IFFALSE 16587
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
16505: LD_ADDR_VAR 0 6
16509: PUSH
16510: LD_VAR 0 7
16514: PUSH
16515: LD_VAR 0 5
16519: PUSH
16520: LD_INT 1
16522: MINUS
16523: ARRAY
16524: PPUSH
16525: LD_VAR 0 2
16529: PUSH
16530: LD_VAR 0 5
16534: PUSH
16535: LD_INT 1
16537: MINUS
16538: ARRAY
16539: PPUSH
16540: LD_VAR 0 7
16544: PUSH
16545: LD_VAR 0 5
16549: ARRAY
16550: PPUSH
16551: CALL_OW 1
16555: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
16556: LD_ADDR_VAR 0 7
16560: PUSH
16561: LD_VAR 0 7
16565: PPUSH
16566: LD_VAR 0 5
16570: PUSH
16571: LD_INT 1
16573: MINUS
16574: PPUSH
16575: LD_VAR 0 6
16579: PPUSH
16580: CALL_OW 1
16584: ST_TO_ADDR
// end ;
16585: GO 16502
16587: POP
16588: POP
// result := s_arr [ 1 ] ;
16589: LD_ADDR_VAR 0 4
16593: PUSH
16594: LD_VAR 0 7
16598: PUSH
16599: LD_INT 1
16601: ARRAY
16602: ST_TO_ADDR
// end ; end ;
16603: LD_VAR 0 4
16607: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
16608: LD_INT 0
16610: PPUSH
16611: PPUSH
// if not list then
16612: LD_VAR 0 1
16616: NOT
16617: IFFALSE 16621
// exit ;
16619: GO 16712
// i := list [ pos1 ] ;
16621: LD_ADDR_VAR 0 5
16625: PUSH
16626: LD_VAR 0 1
16630: PUSH
16631: LD_VAR 0 2
16635: ARRAY
16636: ST_TO_ADDR
// if not i then
16637: LD_VAR 0 5
16641: NOT
16642: IFFALSE 16646
// exit ;
16644: GO 16712
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
16646: LD_ADDR_VAR 0 1
16650: PUSH
16651: LD_VAR 0 1
16655: PPUSH
16656: LD_VAR 0 2
16660: PPUSH
16661: LD_VAR 0 1
16665: PUSH
16666: LD_VAR 0 3
16670: ARRAY
16671: PPUSH
16672: CALL_OW 1
16676: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
16677: LD_ADDR_VAR 0 1
16681: PUSH
16682: LD_VAR 0 1
16686: PPUSH
16687: LD_VAR 0 3
16691: PPUSH
16692: LD_VAR 0 5
16696: PPUSH
16697: CALL_OW 1
16701: ST_TO_ADDR
// result := list ;
16702: LD_ADDR_VAR 0 4
16706: PUSH
16707: LD_VAR 0 1
16711: ST_TO_ADDR
// end ;
16712: LD_VAR 0 4
16716: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
16717: LD_INT 0
16719: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
16720: LD_ADDR_VAR 0 5
16724: PUSH
16725: LD_VAR 0 1
16729: PPUSH
16730: CALL_OW 250
16734: PPUSH
16735: LD_VAR 0 1
16739: PPUSH
16740: CALL_OW 251
16744: PPUSH
16745: LD_VAR 0 2
16749: PPUSH
16750: LD_VAR 0 3
16754: PPUSH
16755: LD_VAR 0 4
16759: PPUSH
16760: CALL 17142 0 5
16764: ST_TO_ADDR
// end ;
16765: LD_VAR 0 5
16769: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
16770: LD_INT 0
16772: PPUSH
16773: PPUSH
16774: PPUSH
16775: PPUSH
// if not list or not unit then
16776: LD_VAR 0 2
16780: NOT
16781: IFTRUE 16790
16783: PUSH
16784: LD_VAR 0 1
16788: NOT
16789: OR
16790: IFFALSE 16794
// exit ;
16792: GO 17137
// result := [ ] ;
16794: LD_ADDR_VAR 0 5
16798: PUSH
16799: EMPTY
16800: ST_TO_ADDR
// for i in list do
16801: LD_ADDR_VAR 0 6
16805: PUSH
16806: LD_VAR 0 2
16810: PUSH
16811: FOR_IN
16812: IFFALSE 17030
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
16814: LD_ADDR_VAR 0 8
16818: PUSH
16819: LD_VAR 0 1
16823: PPUSH
16824: LD_VAR 0 6
16828: PUSH
16829: LD_INT 1
16831: ARRAY
16832: PPUSH
16833: LD_VAR 0 6
16837: PUSH
16838: LD_INT 2
16840: ARRAY
16841: PPUSH
16842: CALL_OW 297
16846: ST_TO_ADDR
// if not Count ( result ) then
16847: LD_VAR 0 5
16851: PPUSH
16852: CALL 13364 0 1
16856: NOT
16857: IFFALSE 16890
// begin result := Join ( result , [ i , tmp ] ) ;
16859: LD_ADDR_VAR 0 5
16863: PUSH
16864: LD_VAR 0 5
16868: PPUSH
16869: LD_VAR 0 6
16873: PUSH
16874: LD_VAR 0 8
16878: PUSH
16879: EMPTY
16880: LIST
16881: LIST
16882: PPUSH
16883: CALL 49340 0 2
16887: ST_TO_ADDR
// continue ;
16888: GO 16811
// end ; if result [ result ] [ 2 ] <= tmp then
16890: LD_VAR 0 5
16894: PUSH
16895: LD_VAR 0 5
16899: ARRAY
16900: PUSH
16901: LD_INT 2
16903: ARRAY
16904: PUSH
16905: LD_VAR 0 8
16909: LESSEQUAL
16910: IFFALSE 16943
// result := Join ( result , [ i , tmp ] ) else
16912: LD_ADDR_VAR 0 5
16916: PUSH
16917: LD_VAR 0 5
16921: PPUSH
16922: LD_VAR 0 6
16926: PUSH
16927: LD_VAR 0 8
16931: PUSH
16932: EMPTY
16933: LIST
16934: LIST
16935: PPUSH
16936: CALL 49340 0 2
16940: ST_TO_ADDR
16941: GO 17028
// begin for j := 1 to Count ( result ) do
16943: LD_ADDR_VAR 0 7
16947: PUSH
16948: DOUBLE
16949: LD_INT 1
16951: DEC
16952: ST_TO_ADDR
16953: LD_VAR 0 5
16957: PPUSH
16958: CALL 13364 0 1
16962: PUSH
16963: FOR_TO
16964: IFFALSE 17026
// begin if tmp < result [ j ] [ 2 ] then
16966: LD_VAR 0 8
16970: PUSH
16971: LD_VAR 0 5
16975: PUSH
16976: LD_VAR 0 7
16980: ARRAY
16981: PUSH
16982: LD_INT 2
16984: ARRAY
16985: LESS
16986: IFFALSE 17024
// begin result := Insert ( result , j , [ i , tmp ] ) ;
16988: LD_ADDR_VAR 0 5
16992: PUSH
16993: LD_VAR 0 5
16997: PPUSH
16998: LD_VAR 0 7
17002: PPUSH
17003: LD_VAR 0 6
17007: PUSH
17008: LD_VAR 0 8
17012: PUSH
17013: EMPTY
17014: LIST
17015: LIST
17016: PPUSH
17017: CALL_OW 2
17021: ST_TO_ADDR
// break ;
17022: GO 17026
// end ; end ;
17024: GO 16963
17026: POP
17027: POP
// end ; end ;
17028: GO 16811
17030: POP
17031: POP
// if result and not asc then
17032: LD_VAR 0 5
17036: IFFALSE 17045
17038: PUSH
17039: LD_VAR 0 3
17043: NOT
17044: AND
17045: IFFALSE 17062
// result := ReverseArray ( result ) ;
17047: LD_ADDR_VAR 0 5
17051: PUSH
17052: LD_VAR 0 5
17056: PPUSH
17057: CALL 44420 0 1
17061: ST_TO_ADDR
// tmp := [ ] ;
17062: LD_ADDR_VAR 0 8
17066: PUSH
17067: EMPTY
17068: ST_TO_ADDR
// if mode then
17069: LD_VAR 0 4
17073: IFFALSE 17137
// begin for i := 1 to result do
17075: LD_ADDR_VAR 0 6
17079: PUSH
17080: DOUBLE
17081: LD_INT 1
17083: DEC
17084: ST_TO_ADDR
17085: LD_VAR 0 5
17089: PUSH
17090: FOR_TO
17091: IFFALSE 17125
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
17093: LD_ADDR_VAR 0 8
17097: PUSH
17098: LD_VAR 0 8
17102: PPUSH
17103: LD_VAR 0 5
17107: PUSH
17108: LD_VAR 0 6
17112: ARRAY
17113: PUSH
17114: LD_INT 1
17116: ARRAY
17117: PPUSH
17118: CALL 49340 0 2
17122: ST_TO_ADDR
17123: GO 17090
17125: POP
17126: POP
// result := tmp ;
17127: LD_ADDR_VAR 0 5
17131: PUSH
17132: LD_VAR 0 8
17136: ST_TO_ADDR
// end ; end ;
17137: LD_VAR 0 5
17141: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
17142: LD_INT 0
17144: PPUSH
17145: PPUSH
17146: PPUSH
17147: PPUSH
// if not list then
17148: LD_VAR 0 3
17152: NOT
17153: IFFALSE 17157
// exit ;
17155: GO 17547
// result := [ ] ;
17157: LD_ADDR_VAR 0 6
17161: PUSH
17162: EMPTY
17163: ST_TO_ADDR
// for i in list do
17164: LD_ADDR_VAR 0 7
17168: PUSH
17169: LD_VAR 0 3
17173: PUSH
17174: FOR_IN
17175: IFFALSE 17377
// begin tmp := GetDistUnitXY ( i , x , y ) ;
17177: LD_ADDR_VAR 0 9
17181: PUSH
17182: LD_VAR 0 7
17186: PPUSH
17187: LD_VAR 0 1
17191: PPUSH
17192: LD_VAR 0 2
17196: PPUSH
17197: CALL_OW 297
17201: ST_TO_ADDR
// if not result then
17202: LD_VAR 0 6
17206: NOT
17207: IFFALSE 17233
// result := [ [ i , tmp ] ] else
17209: LD_ADDR_VAR 0 6
17213: PUSH
17214: LD_VAR 0 7
17218: PUSH
17219: LD_VAR 0 9
17223: PUSH
17224: EMPTY
17225: LIST
17226: LIST
17227: PUSH
17228: EMPTY
17229: LIST
17230: ST_TO_ADDR
17231: GO 17375
// begin if result [ result ] [ 2 ] <= tmp then
17233: LD_VAR 0 6
17237: PUSH
17238: LD_VAR 0 6
17242: ARRAY
17243: PUSH
17244: LD_INT 2
17246: ARRAY
17247: PUSH
17248: LD_VAR 0 9
17252: LESSEQUAL
17253: IFFALSE 17295
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
17255: LD_ADDR_VAR 0 6
17259: PUSH
17260: LD_VAR 0 6
17264: PPUSH
17265: LD_VAR 0 6
17269: PUSH
17270: LD_INT 1
17272: PLUS
17273: PPUSH
17274: LD_VAR 0 7
17278: PUSH
17279: LD_VAR 0 9
17283: PUSH
17284: EMPTY
17285: LIST
17286: LIST
17287: PPUSH
17288: CALL_OW 2
17292: ST_TO_ADDR
17293: GO 17375
// for j := 1 to result do
17295: LD_ADDR_VAR 0 8
17299: PUSH
17300: DOUBLE
17301: LD_INT 1
17303: DEC
17304: ST_TO_ADDR
17305: LD_VAR 0 6
17309: PUSH
17310: FOR_TO
17311: IFFALSE 17373
// begin if tmp < result [ j ] [ 2 ] then
17313: LD_VAR 0 9
17317: PUSH
17318: LD_VAR 0 6
17322: PUSH
17323: LD_VAR 0 8
17327: ARRAY
17328: PUSH
17329: LD_INT 2
17331: ARRAY
17332: LESS
17333: IFFALSE 17371
// begin result := Insert ( result , j , [ i , tmp ] ) ;
17335: LD_ADDR_VAR 0 6
17339: PUSH
17340: LD_VAR 0 6
17344: PPUSH
17345: LD_VAR 0 8
17349: PPUSH
17350: LD_VAR 0 7
17354: PUSH
17355: LD_VAR 0 9
17359: PUSH
17360: EMPTY
17361: LIST
17362: LIST
17363: PPUSH
17364: CALL_OW 2
17368: ST_TO_ADDR
// break ;
17369: GO 17373
// end ; end ;
17371: GO 17310
17373: POP
17374: POP
// end ; end ;
17375: GO 17174
17377: POP
17378: POP
// if result and not asc then
17379: LD_VAR 0 6
17383: IFFALSE 17392
17385: PUSH
17386: LD_VAR 0 4
17390: NOT
17391: AND
17392: IFFALSE 17467
// begin tmp := result ;
17394: LD_ADDR_VAR 0 9
17398: PUSH
17399: LD_VAR 0 6
17403: ST_TO_ADDR
// for i = tmp downto 1 do
17404: LD_ADDR_VAR 0 7
17408: PUSH
17409: DOUBLE
17410: LD_VAR 0 9
17414: INC
17415: ST_TO_ADDR
17416: LD_INT 1
17418: PUSH
17419: FOR_DOWNTO
17420: IFFALSE 17465
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
17422: LD_ADDR_VAR 0 6
17426: PUSH
17427: LD_VAR 0 6
17431: PPUSH
17432: LD_VAR 0 9
17436: PUSH
17437: LD_VAR 0 7
17441: MINUS
17442: PUSH
17443: LD_INT 1
17445: PLUS
17446: PPUSH
17447: LD_VAR 0 9
17451: PUSH
17452: LD_VAR 0 7
17456: ARRAY
17457: PPUSH
17458: CALL_OW 1
17462: ST_TO_ADDR
17463: GO 17419
17465: POP
17466: POP
// end ; tmp := [ ] ;
17467: LD_ADDR_VAR 0 9
17471: PUSH
17472: EMPTY
17473: ST_TO_ADDR
// if mode then
17474: LD_VAR 0 5
17478: IFFALSE 17547
// begin for i = 1 to result do
17480: LD_ADDR_VAR 0 7
17484: PUSH
17485: DOUBLE
17486: LD_INT 1
17488: DEC
17489: ST_TO_ADDR
17490: LD_VAR 0 6
17494: PUSH
17495: FOR_TO
17496: IFFALSE 17535
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
17498: LD_ADDR_VAR 0 9
17502: PUSH
17503: LD_VAR 0 9
17507: PPUSH
17508: LD_VAR 0 7
17512: PPUSH
17513: LD_VAR 0 6
17517: PUSH
17518: LD_VAR 0 7
17522: ARRAY
17523: PUSH
17524: LD_INT 1
17526: ARRAY
17527: PPUSH
17528: CALL_OW 1
17532: ST_TO_ADDR
17533: GO 17495
17535: POP
17536: POP
// result := tmp ;
17537: LD_ADDR_VAR 0 6
17541: PUSH
17542: LD_VAR 0 9
17546: ST_TO_ADDR
// end ; end ;
17547: LD_VAR 0 6
17551: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
17552: LD_INT 0
17554: PPUSH
17555: PPUSH
17556: PPUSH
17557: PPUSH
17558: PPUSH
17559: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
17560: LD_ADDR_VAR 0 5
17564: PUSH
17565: LD_INT 0
17567: PUSH
17568: LD_INT 0
17570: PUSH
17571: LD_INT 0
17573: PUSH
17574: EMPTY
17575: PUSH
17576: EMPTY
17577: LIST
17578: LIST
17579: LIST
17580: LIST
17581: ST_TO_ADDR
// if not x or not y then
17582: LD_VAR 0 2
17586: NOT
17587: IFTRUE 17596
17589: PUSH
17590: LD_VAR 0 3
17594: NOT
17595: OR
17596: IFFALSE 17600
// exit ;
17598: GO 19256
// if not range then
17600: LD_VAR 0 4
17604: NOT
17605: IFFALSE 17615
// range := 10 ;
17607: LD_ADDR_VAR 0 4
17611: PUSH
17612: LD_INT 10
17614: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17615: LD_ADDR_VAR 0 8
17619: PUSH
17620: LD_INT 81
17622: PUSH
17623: LD_VAR 0 1
17627: PUSH
17628: EMPTY
17629: LIST
17630: LIST
17631: PUSH
17632: LD_INT 92
17634: PUSH
17635: LD_VAR 0 2
17639: PUSH
17640: LD_VAR 0 3
17644: PUSH
17645: LD_VAR 0 4
17649: PUSH
17650: EMPTY
17651: LIST
17652: LIST
17653: LIST
17654: LIST
17655: PUSH
17656: LD_INT 3
17658: PUSH
17659: LD_INT 21
17661: PUSH
17662: LD_INT 3
17664: PUSH
17665: EMPTY
17666: LIST
17667: LIST
17668: PUSH
17669: EMPTY
17670: LIST
17671: LIST
17672: PUSH
17673: EMPTY
17674: LIST
17675: LIST
17676: LIST
17677: PPUSH
17678: CALL_OW 69
17682: ST_TO_ADDR
// if not tmp then
17683: LD_VAR 0 8
17687: NOT
17688: IFFALSE 17692
// exit ;
17690: GO 19256
// for i in tmp do
17692: LD_ADDR_VAR 0 6
17696: PUSH
17697: LD_VAR 0 8
17701: PUSH
17702: FOR_IN
17703: IFFALSE 19231
// begin points := [ 0 , 0 , 0 ] ;
17705: LD_ADDR_VAR 0 9
17709: PUSH
17710: LD_INT 0
17712: PUSH
17713: LD_INT 0
17715: PUSH
17716: LD_INT 0
17718: PUSH
17719: EMPTY
17720: LIST
17721: LIST
17722: LIST
17723: ST_TO_ADDR
// bpoints := 1 ;
17724: LD_ADDR_VAR 0 10
17728: PUSH
17729: LD_INT 1
17731: ST_TO_ADDR
// case GetType ( i ) of unit_human :
17732: LD_VAR 0 6
17736: PPUSH
17737: CALL_OW 247
17741: PUSH
17742: LD_INT 1
17744: DOUBLE
17745: EQUAL
17746: IFTRUE 17750
17748: GO 18332
17750: POP
// begin if GetClass ( i ) = 1 then
17751: LD_VAR 0 6
17755: PPUSH
17756: CALL_OW 257
17760: PUSH
17761: LD_INT 1
17763: EQUAL
17764: IFFALSE 17785
// points := [ 10 , 5 , 3 ] ;
17766: LD_ADDR_VAR 0 9
17770: PUSH
17771: LD_INT 10
17773: PUSH
17774: LD_INT 5
17776: PUSH
17777: LD_INT 3
17779: PUSH
17780: EMPTY
17781: LIST
17782: LIST
17783: LIST
17784: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
17785: LD_VAR 0 6
17789: PPUSH
17790: CALL_OW 257
17794: PUSH
17795: LD_INT 2
17797: PUSH
17798: LD_INT 3
17800: PUSH
17801: LD_INT 4
17803: PUSH
17804: EMPTY
17805: LIST
17806: LIST
17807: LIST
17808: IN
17809: IFFALSE 17830
// points := [ 3 , 2 , 1 ] ;
17811: LD_ADDR_VAR 0 9
17815: PUSH
17816: LD_INT 3
17818: PUSH
17819: LD_INT 2
17821: PUSH
17822: LD_INT 1
17824: PUSH
17825: EMPTY
17826: LIST
17827: LIST
17828: LIST
17829: ST_TO_ADDR
// if GetClass ( i ) = 5 then
17830: LD_VAR 0 6
17834: PPUSH
17835: CALL_OW 257
17839: PUSH
17840: LD_INT 5
17842: EQUAL
17843: IFFALSE 17864
// points := [ 130 , 5 , 2 ] ;
17845: LD_ADDR_VAR 0 9
17849: PUSH
17850: LD_INT 130
17852: PUSH
17853: LD_INT 5
17855: PUSH
17856: LD_INT 2
17858: PUSH
17859: EMPTY
17860: LIST
17861: LIST
17862: LIST
17863: ST_TO_ADDR
// if GetClass ( i ) = 8 then
17864: LD_VAR 0 6
17868: PPUSH
17869: CALL_OW 257
17873: PUSH
17874: LD_INT 8
17876: EQUAL
17877: IFFALSE 17898
// points := [ 35 , 35 , 30 ] ;
17879: LD_ADDR_VAR 0 9
17883: PUSH
17884: LD_INT 35
17886: PUSH
17887: LD_INT 35
17889: PUSH
17890: LD_INT 30
17892: PUSH
17893: EMPTY
17894: LIST
17895: LIST
17896: LIST
17897: ST_TO_ADDR
// if GetClass ( i ) = 9 then
17898: LD_VAR 0 6
17902: PPUSH
17903: CALL_OW 257
17907: PUSH
17908: LD_INT 9
17910: EQUAL
17911: IFFALSE 17932
// points := [ 20 , 55 , 40 ] ;
17913: LD_ADDR_VAR 0 9
17917: PUSH
17918: LD_INT 20
17920: PUSH
17921: LD_INT 55
17923: PUSH
17924: LD_INT 40
17926: PUSH
17927: EMPTY
17928: LIST
17929: LIST
17930: LIST
17931: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
17932: LD_VAR 0 6
17936: PPUSH
17937: CALL_OW 257
17941: PUSH
17942: LD_INT 12
17944: PUSH
17945: LD_INT 16
17947: PUSH
17948: EMPTY
17949: LIST
17950: LIST
17951: IN
17952: IFFALSE 17973
// points := [ 5 , 3 , 2 ] ;
17954: LD_ADDR_VAR 0 9
17958: PUSH
17959: LD_INT 5
17961: PUSH
17962: LD_INT 3
17964: PUSH
17965: LD_INT 2
17967: PUSH
17968: EMPTY
17969: LIST
17970: LIST
17971: LIST
17972: ST_TO_ADDR
// if GetClass ( i ) = 17 then
17973: LD_VAR 0 6
17977: PPUSH
17978: CALL_OW 257
17982: PUSH
17983: LD_INT 17
17985: EQUAL
17986: IFFALSE 18007
// points := [ 100 , 50 , 75 ] ;
17988: LD_ADDR_VAR 0 9
17992: PUSH
17993: LD_INT 100
17995: PUSH
17996: LD_INT 50
17998: PUSH
17999: LD_INT 75
18001: PUSH
18002: EMPTY
18003: LIST
18004: LIST
18005: LIST
18006: ST_TO_ADDR
// if GetClass ( i ) = 15 then
18007: LD_VAR 0 6
18011: PPUSH
18012: CALL_OW 257
18016: PUSH
18017: LD_INT 15
18019: EQUAL
18020: IFFALSE 18041
// points := [ 10 , 5 , 3 ] ;
18022: LD_ADDR_VAR 0 9
18026: PUSH
18027: LD_INT 10
18029: PUSH
18030: LD_INT 5
18032: PUSH
18033: LD_INT 3
18035: PUSH
18036: EMPTY
18037: LIST
18038: LIST
18039: LIST
18040: ST_TO_ADDR
// if GetClass ( i ) = 14 then
18041: LD_VAR 0 6
18045: PPUSH
18046: CALL_OW 257
18050: PUSH
18051: LD_INT 14
18053: EQUAL
18054: IFFALSE 18075
// points := [ 10 , 0 , 0 ] ;
18056: LD_ADDR_VAR 0 9
18060: PUSH
18061: LD_INT 10
18063: PUSH
18064: LD_INT 0
18066: PUSH
18067: LD_INT 0
18069: PUSH
18070: EMPTY
18071: LIST
18072: LIST
18073: LIST
18074: ST_TO_ADDR
// if GetClass ( i ) = 11 then
18075: LD_VAR 0 6
18079: PPUSH
18080: CALL_OW 257
18084: PUSH
18085: LD_INT 11
18087: EQUAL
18088: IFFALSE 18109
// points := [ 30 , 10 , 5 ] ;
18090: LD_ADDR_VAR 0 9
18094: PUSH
18095: LD_INT 30
18097: PUSH
18098: LD_INT 10
18100: PUSH
18101: LD_INT 5
18103: PUSH
18104: EMPTY
18105: LIST
18106: LIST
18107: LIST
18108: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
18109: LD_VAR 0 1
18113: PPUSH
18114: LD_INT 5
18116: PPUSH
18117: CALL_OW 321
18121: PUSH
18122: LD_INT 2
18124: EQUAL
18125: IFFALSE 18142
// bpoints := bpoints * 1.8 ;
18127: LD_ADDR_VAR 0 10
18131: PUSH
18132: LD_VAR 0 10
18136: PUSH
18137: LD_REAL  1.80000000000000E+0000
18140: MUL
18141: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
18142: LD_VAR 0 6
18146: PPUSH
18147: CALL_OW 257
18151: PUSH
18152: LD_INT 1
18154: PUSH
18155: LD_INT 2
18157: PUSH
18158: LD_INT 3
18160: PUSH
18161: LD_INT 4
18163: PUSH
18164: EMPTY
18165: LIST
18166: LIST
18167: LIST
18168: LIST
18169: IN
18170: IFFALSE 18190
18172: PUSH
18173: LD_VAR 0 1
18177: PPUSH
18178: LD_INT 51
18180: PPUSH
18181: CALL_OW 321
18185: PUSH
18186: LD_INT 2
18188: EQUAL
18189: AND
18190: IFFALSE 18207
// bpoints := bpoints * 1.2 ;
18192: LD_ADDR_VAR 0 10
18196: PUSH
18197: LD_VAR 0 10
18201: PUSH
18202: LD_REAL  1.20000000000000E+0000
18205: MUL
18206: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
18207: LD_VAR 0 6
18211: PPUSH
18212: CALL_OW 257
18216: PUSH
18217: LD_INT 5
18219: PUSH
18220: LD_INT 7
18222: PUSH
18223: LD_INT 9
18225: PUSH
18226: EMPTY
18227: LIST
18228: LIST
18229: LIST
18230: IN
18231: IFFALSE 18251
18233: PUSH
18234: LD_VAR 0 1
18238: PPUSH
18239: LD_INT 52
18241: PPUSH
18242: CALL_OW 321
18246: PUSH
18247: LD_INT 2
18249: EQUAL
18250: AND
18251: IFFALSE 18268
// bpoints := bpoints * 1.5 ;
18253: LD_ADDR_VAR 0 10
18257: PUSH
18258: LD_VAR 0 10
18262: PUSH
18263: LD_REAL  1.50000000000000E+0000
18266: MUL
18267: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
18268: LD_VAR 0 1
18272: PPUSH
18273: LD_INT 66
18275: PPUSH
18276: CALL_OW 321
18280: PUSH
18281: LD_INT 2
18283: EQUAL
18284: IFFALSE 18301
// bpoints := bpoints * 1.1 ;
18286: LD_ADDR_VAR 0 10
18290: PUSH
18291: LD_VAR 0 10
18295: PUSH
18296: LD_REAL  1.10000000000000E+0000
18299: MUL
18300: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
18301: LD_ADDR_VAR 0 10
18305: PUSH
18306: LD_VAR 0 10
18310: PUSH
18311: LD_VAR 0 6
18315: PPUSH
18316: LD_INT 1
18318: PPUSH
18319: CALL_OW 259
18323: PUSH
18324: LD_REAL  1.15000000000000E+0000
18327: MUL
18328: MUL
18329: ST_TO_ADDR
// end ; unit_vehicle :
18330: GO 19160
18332: LD_INT 2
18334: DOUBLE
18335: EQUAL
18336: IFTRUE 18340
18338: GO 19148
18340: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
18341: LD_VAR 0 6
18345: PPUSH
18346: CALL_OW 264
18350: PUSH
18351: LD_INT 2
18353: PUSH
18354: LD_INT 42
18356: PUSH
18357: LD_INT 24
18359: PUSH
18360: EMPTY
18361: LIST
18362: LIST
18363: LIST
18364: IN
18365: IFFALSE 18386
// points := [ 25 , 5 , 3 ] ;
18367: LD_ADDR_VAR 0 9
18371: PUSH
18372: LD_INT 25
18374: PUSH
18375: LD_INT 5
18377: PUSH
18378: LD_INT 3
18380: PUSH
18381: EMPTY
18382: LIST
18383: LIST
18384: LIST
18385: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
18386: LD_VAR 0 6
18390: PPUSH
18391: CALL_OW 264
18395: PUSH
18396: LD_INT 4
18398: PUSH
18399: LD_INT 43
18401: PUSH
18402: LD_INT 25
18404: PUSH
18405: EMPTY
18406: LIST
18407: LIST
18408: LIST
18409: IN
18410: IFFALSE 18431
// points := [ 40 , 15 , 5 ] ;
18412: LD_ADDR_VAR 0 9
18416: PUSH
18417: LD_INT 40
18419: PUSH
18420: LD_INT 15
18422: PUSH
18423: LD_INT 5
18425: PUSH
18426: EMPTY
18427: LIST
18428: LIST
18429: LIST
18430: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
18431: LD_VAR 0 6
18435: PPUSH
18436: CALL_OW 264
18440: PUSH
18441: LD_INT 3
18443: PUSH
18444: LD_INT 23
18446: PUSH
18447: EMPTY
18448: LIST
18449: LIST
18450: IN
18451: IFFALSE 18472
// points := [ 7 , 25 , 8 ] ;
18453: LD_ADDR_VAR 0 9
18457: PUSH
18458: LD_INT 7
18460: PUSH
18461: LD_INT 25
18463: PUSH
18464: LD_INT 8
18466: PUSH
18467: EMPTY
18468: LIST
18469: LIST
18470: LIST
18471: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
18472: LD_VAR 0 6
18476: PPUSH
18477: CALL_OW 264
18481: PUSH
18482: LD_INT 5
18484: PUSH
18485: LD_INT 27
18487: PUSH
18488: LD_INT 44
18490: PUSH
18491: EMPTY
18492: LIST
18493: LIST
18494: LIST
18495: IN
18496: IFFALSE 18517
// points := [ 14 , 50 , 16 ] ;
18498: LD_ADDR_VAR 0 9
18502: PUSH
18503: LD_INT 14
18505: PUSH
18506: LD_INT 50
18508: PUSH
18509: LD_INT 16
18511: PUSH
18512: EMPTY
18513: LIST
18514: LIST
18515: LIST
18516: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
18517: LD_VAR 0 6
18521: PPUSH
18522: CALL_OW 264
18526: PUSH
18527: LD_INT 6
18529: PUSH
18530: LD_INT 46
18532: PUSH
18533: EMPTY
18534: LIST
18535: LIST
18536: IN
18537: IFFALSE 18558
// points := [ 32 , 120 , 70 ] ;
18539: LD_ADDR_VAR 0 9
18543: PUSH
18544: LD_INT 32
18546: PUSH
18547: LD_INT 120
18549: PUSH
18550: LD_INT 70
18552: PUSH
18553: EMPTY
18554: LIST
18555: LIST
18556: LIST
18557: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
18558: LD_VAR 0 6
18562: PPUSH
18563: CALL_OW 264
18567: PUSH
18568: LD_INT 7
18570: PUSH
18571: LD_INT 28
18573: PUSH
18574: LD_INT 45
18576: PUSH
18577: LD_INT 92
18579: PUSH
18580: EMPTY
18581: LIST
18582: LIST
18583: LIST
18584: LIST
18585: IN
18586: IFFALSE 18607
// points := [ 35 , 20 , 45 ] ;
18588: LD_ADDR_VAR 0 9
18592: PUSH
18593: LD_INT 35
18595: PUSH
18596: LD_INT 20
18598: PUSH
18599: LD_INT 45
18601: PUSH
18602: EMPTY
18603: LIST
18604: LIST
18605: LIST
18606: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
18607: LD_VAR 0 6
18611: PPUSH
18612: CALL_OW 264
18616: PUSH
18617: LD_INT 47
18619: PUSH
18620: EMPTY
18621: LIST
18622: IN
18623: IFFALSE 18644
// points := [ 67 , 45 , 75 ] ;
18625: LD_ADDR_VAR 0 9
18629: PUSH
18630: LD_INT 67
18632: PUSH
18633: LD_INT 45
18635: PUSH
18636: LD_INT 75
18638: PUSH
18639: EMPTY
18640: LIST
18641: LIST
18642: LIST
18643: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
18644: LD_VAR 0 6
18648: PPUSH
18649: CALL_OW 264
18653: PUSH
18654: LD_INT 26
18656: PUSH
18657: EMPTY
18658: LIST
18659: IN
18660: IFFALSE 18681
// points := [ 120 , 30 , 80 ] ;
18662: LD_ADDR_VAR 0 9
18666: PUSH
18667: LD_INT 120
18669: PUSH
18670: LD_INT 30
18672: PUSH
18673: LD_INT 80
18675: PUSH
18676: EMPTY
18677: LIST
18678: LIST
18679: LIST
18680: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
18681: LD_VAR 0 6
18685: PPUSH
18686: CALL_OW 264
18690: PUSH
18691: LD_INT 22
18693: PUSH
18694: EMPTY
18695: LIST
18696: IN
18697: IFFALSE 18718
// points := [ 40 , 1 , 1 ] ;
18699: LD_ADDR_VAR 0 9
18703: PUSH
18704: LD_INT 40
18706: PUSH
18707: LD_INT 1
18709: PUSH
18710: LD_INT 1
18712: PUSH
18713: EMPTY
18714: LIST
18715: LIST
18716: LIST
18717: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
18718: LD_VAR 0 6
18722: PPUSH
18723: CALL_OW 264
18727: PUSH
18728: LD_INT 29
18730: PUSH
18731: EMPTY
18732: LIST
18733: IN
18734: IFFALSE 18755
// points := [ 70 , 200 , 400 ] ;
18736: LD_ADDR_VAR 0 9
18740: PUSH
18741: LD_INT 70
18743: PUSH
18744: LD_INT 200
18746: PUSH
18747: LD_INT 400
18749: PUSH
18750: EMPTY
18751: LIST
18752: LIST
18753: LIST
18754: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
18755: LD_VAR 0 6
18759: PPUSH
18760: CALL_OW 264
18764: PUSH
18765: LD_INT 14
18767: PUSH
18768: LD_INT 53
18770: PUSH
18771: EMPTY
18772: LIST
18773: LIST
18774: IN
18775: IFFALSE 18796
// points := [ 40 , 10 , 20 ] ;
18777: LD_ADDR_VAR 0 9
18781: PUSH
18782: LD_INT 40
18784: PUSH
18785: LD_INT 10
18787: PUSH
18788: LD_INT 20
18790: PUSH
18791: EMPTY
18792: LIST
18793: LIST
18794: LIST
18795: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
18796: LD_VAR 0 6
18800: PPUSH
18801: CALL_OW 264
18805: PUSH
18806: LD_INT 9
18808: PUSH
18809: EMPTY
18810: LIST
18811: IN
18812: IFFALSE 18833
// points := [ 5 , 70 , 20 ] ;
18814: LD_ADDR_VAR 0 9
18818: PUSH
18819: LD_INT 5
18821: PUSH
18822: LD_INT 70
18824: PUSH
18825: LD_INT 20
18827: PUSH
18828: EMPTY
18829: LIST
18830: LIST
18831: LIST
18832: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
18833: LD_VAR 0 6
18837: PPUSH
18838: CALL_OW 264
18842: PUSH
18843: LD_INT 10
18845: PUSH
18846: EMPTY
18847: LIST
18848: IN
18849: IFFALSE 18870
// points := [ 35 , 110 , 70 ] ;
18851: LD_ADDR_VAR 0 9
18855: PUSH
18856: LD_INT 35
18858: PUSH
18859: LD_INT 110
18861: PUSH
18862: LD_INT 70
18864: PUSH
18865: EMPTY
18866: LIST
18867: LIST
18868: LIST
18869: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
18870: LD_VAR 0 6
18874: PPUSH
18875: CALL_OW 265
18879: PUSH
18880: LD_INT 25
18882: EQUAL
18883: IFFALSE 18904
// points := [ 80 , 65 , 100 ] ;
18885: LD_ADDR_VAR 0 9
18889: PUSH
18890: LD_INT 80
18892: PUSH
18893: LD_INT 65
18895: PUSH
18896: LD_INT 100
18898: PUSH
18899: EMPTY
18900: LIST
18901: LIST
18902: LIST
18903: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
18904: LD_VAR 0 6
18908: PPUSH
18909: CALL_OW 263
18913: PUSH
18914: LD_INT 1
18916: EQUAL
18917: IFFALSE 18952
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
18919: LD_ADDR_VAR 0 10
18923: PUSH
18924: LD_VAR 0 10
18928: PUSH
18929: LD_VAR 0 6
18933: PPUSH
18934: CALL_OW 311
18938: PPUSH
18939: LD_INT 3
18941: PPUSH
18942: CALL_OW 259
18946: PUSH
18947: LD_INT 4
18949: MUL
18950: MUL
18951: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
18952: LD_VAR 0 6
18956: PPUSH
18957: CALL_OW 263
18961: PUSH
18962: LD_INT 2
18964: EQUAL
18965: IFFALSE 19016
// begin j := IsControledBy ( i ) ;
18967: LD_ADDR_VAR 0 7
18971: PUSH
18972: LD_VAR 0 6
18976: PPUSH
18977: CALL_OW 312
18981: ST_TO_ADDR
// if j then
18982: LD_VAR 0 7
18986: IFFALSE 19016
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
18988: LD_ADDR_VAR 0 10
18992: PUSH
18993: LD_VAR 0 10
18997: PUSH
18998: LD_VAR 0 7
19002: PPUSH
19003: LD_INT 3
19005: PPUSH
19006: CALL_OW 259
19010: PUSH
19011: LD_INT 3
19013: MUL
19014: MUL
19015: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
19016: LD_VAR 0 6
19020: PPUSH
19021: CALL_OW 264
19025: PUSH
19026: LD_INT 5
19028: PUSH
19029: LD_INT 6
19031: PUSH
19032: LD_INT 46
19034: PUSH
19035: LD_INT 44
19037: PUSH
19038: LD_INT 47
19040: PUSH
19041: LD_INT 45
19043: PUSH
19044: LD_INT 28
19046: PUSH
19047: LD_INT 7
19049: PUSH
19050: LD_INT 27
19052: PUSH
19053: LD_INT 29
19055: PUSH
19056: EMPTY
19057: LIST
19058: LIST
19059: LIST
19060: LIST
19061: LIST
19062: LIST
19063: LIST
19064: LIST
19065: LIST
19066: LIST
19067: IN
19068: IFFALSE 19088
19070: PUSH
19071: LD_VAR 0 1
19075: PPUSH
19076: LD_INT 52
19078: PPUSH
19079: CALL_OW 321
19083: PUSH
19084: LD_INT 2
19086: EQUAL
19087: AND
19088: IFFALSE 19105
// bpoints := bpoints * 1.2 ;
19090: LD_ADDR_VAR 0 10
19094: PUSH
19095: LD_VAR 0 10
19099: PUSH
19100: LD_REAL  1.20000000000000E+0000
19103: MUL
19104: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
19105: LD_VAR 0 6
19109: PPUSH
19110: CALL_OW 264
19114: PUSH
19115: LD_INT 6
19117: PUSH
19118: LD_INT 46
19120: PUSH
19121: LD_INT 47
19123: PUSH
19124: EMPTY
19125: LIST
19126: LIST
19127: LIST
19128: IN
19129: IFFALSE 19146
// bpoints := bpoints * 1.2 ;
19131: LD_ADDR_VAR 0 10
19135: PUSH
19136: LD_VAR 0 10
19140: PUSH
19141: LD_REAL  1.20000000000000E+0000
19144: MUL
19145: ST_TO_ADDR
// end ; unit_building :
19146: GO 19160
19148: LD_INT 3
19150: DOUBLE
19151: EQUAL
19152: IFTRUE 19156
19154: GO 19159
19156: POP
// ; end ;
19157: GO 19160
19159: POP
// for j = 1 to 3 do
19160: LD_ADDR_VAR 0 7
19164: PUSH
19165: DOUBLE
19166: LD_INT 1
19168: DEC
19169: ST_TO_ADDR
19170: LD_INT 3
19172: PUSH
19173: FOR_TO
19174: IFFALSE 19227
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
19176: LD_ADDR_VAR 0 5
19180: PUSH
19181: LD_VAR 0 5
19185: PPUSH
19186: LD_VAR 0 7
19190: PPUSH
19191: LD_VAR 0 5
19195: PUSH
19196: LD_VAR 0 7
19200: ARRAY
19201: PUSH
19202: LD_VAR 0 9
19206: PUSH
19207: LD_VAR 0 7
19211: ARRAY
19212: PUSH
19213: LD_VAR 0 10
19217: MUL
19218: PLUS
19219: PPUSH
19220: CALL_OW 1
19224: ST_TO_ADDR
19225: GO 19173
19227: POP
19228: POP
// end ;
19229: GO 17702
19231: POP
19232: POP
// result := Replace ( result , 4 , tmp ) ;
19233: LD_ADDR_VAR 0 5
19237: PUSH
19238: LD_VAR 0 5
19242: PPUSH
19243: LD_INT 4
19245: PPUSH
19246: LD_VAR 0 8
19250: PPUSH
19251: CALL_OW 1
19255: ST_TO_ADDR
// end ;
19256: LD_VAR 0 5
19260: RET
// export function DangerAtRange ( unit , range ) ; begin
19261: LD_INT 0
19263: PPUSH
// if not unit then
19264: LD_VAR 0 1
19268: NOT
19269: IFFALSE 19273
// exit ;
19271: GO 19318
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
19273: LD_ADDR_VAR 0 3
19277: PUSH
19278: LD_VAR 0 1
19282: PPUSH
19283: CALL_OW 255
19287: PPUSH
19288: LD_VAR 0 1
19292: PPUSH
19293: CALL_OW 250
19297: PPUSH
19298: LD_VAR 0 1
19302: PPUSH
19303: CALL_OW 251
19307: PPUSH
19308: LD_VAR 0 2
19312: PPUSH
19313: CALL 17552 0 4
19317: ST_TO_ADDR
// end ;
19318: LD_VAR 0 3
19322: RET
// export function DangerInArea ( side , area ) ; begin
19323: LD_INT 0
19325: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
19326: LD_ADDR_VAR 0 3
19330: PUSH
19331: LD_VAR 0 2
19335: PPUSH
19336: LD_INT 81
19338: PUSH
19339: LD_VAR 0 1
19343: PUSH
19344: EMPTY
19345: LIST
19346: LIST
19347: PPUSH
19348: CALL_OW 70
19352: ST_TO_ADDR
// end ;
19353: LD_VAR 0 3
19357: RET
// export function IsExtension ( b ) ; begin
19358: LD_INT 0
19360: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
19361: LD_ADDR_VAR 0 2
19365: PUSH
19366: LD_VAR 0 1
19370: PUSH
19371: LD_INT 23
19373: PUSH
19374: LD_INT 20
19376: PUSH
19377: LD_INT 22
19379: PUSH
19380: LD_INT 17
19382: PUSH
19383: LD_INT 24
19385: PUSH
19386: LD_INT 21
19388: PUSH
19389: LD_INT 19
19391: PUSH
19392: LD_INT 16
19394: PUSH
19395: LD_INT 25
19397: PUSH
19398: LD_INT 18
19400: PUSH
19401: EMPTY
19402: LIST
19403: LIST
19404: LIST
19405: LIST
19406: LIST
19407: LIST
19408: LIST
19409: LIST
19410: LIST
19411: LIST
19412: IN
19413: ST_TO_ADDR
// end ;
19414: LD_VAR 0 2
19418: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
19419: LD_INT 0
19421: PPUSH
19422: PPUSH
19423: PPUSH
// result := [ ] ;
19424: LD_ADDR_VAR 0 4
19428: PUSH
19429: EMPTY
19430: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
19431: LD_ADDR_VAR 0 5
19435: PUSH
19436: LD_VAR 0 2
19440: PPUSH
19441: LD_INT 21
19443: PUSH
19444: LD_INT 3
19446: PUSH
19447: EMPTY
19448: LIST
19449: LIST
19450: PPUSH
19451: CALL_OW 70
19455: ST_TO_ADDR
// if not tmp then
19456: LD_VAR 0 5
19460: NOT
19461: IFFALSE 19465
// exit ;
19463: GO 19529
// if checkLink then
19465: LD_VAR 0 3
19469: IFFALSE 19519
// begin for i in tmp do
19471: LD_ADDR_VAR 0 6
19475: PUSH
19476: LD_VAR 0 5
19480: PUSH
19481: FOR_IN
19482: IFFALSE 19517
// if GetBase ( i ) <> base then
19484: LD_VAR 0 6
19488: PPUSH
19489: CALL_OW 274
19493: PUSH
19494: LD_VAR 0 1
19498: NONEQUAL
19499: IFFALSE 19515
// ComLinkToBase ( base , i ) ;
19501: LD_VAR 0 1
19505: PPUSH
19506: LD_VAR 0 6
19510: PPUSH
19511: CALL_OW 169
19515: GO 19481
19517: POP
19518: POP
// end ; result := tmp ;
19519: LD_ADDR_VAR 0 4
19523: PUSH
19524: LD_VAR 0 5
19528: ST_TO_ADDR
// end ;
19529: LD_VAR 0 4
19533: RET
// export function ComComplete ( units , b ) ; var i ; begin
19534: LD_INT 0
19536: PPUSH
19537: PPUSH
// if not units then
19538: LD_VAR 0 1
19542: NOT
19543: IFFALSE 19547
// exit ;
19545: GO 19637
// for i in units do
19547: LD_ADDR_VAR 0 4
19551: PUSH
19552: LD_VAR 0 1
19556: PUSH
19557: FOR_IN
19558: IFFALSE 19635
// if BuildingStatus ( b ) = bs_build then
19560: LD_VAR 0 2
19564: PPUSH
19565: CALL_OW 461
19569: PUSH
19570: LD_INT 1
19572: EQUAL
19573: IFFALSE 19633
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
19575: LD_VAR 0 4
19579: PPUSH
19580: LD_STRING h
19582: PUSH
19583: LD_VAR 0 2
19587: PPUSH
19588: CALL_OW 250
19592: PUSH
19593: LD_VAR 0 2
19597: PPUSH
19598: CALL_OW 251
19602: PUSH
19603: LD_VAR 0 2
19607: PUSH
19608: LD_INT 0
19610: PUSH
19611: LD_INT 0
19613: PUSH
19614: LD_INT 0
19616: PUSH
19617: EMPTY
19618: LIST
19619: LIST
19620: LIST
19621: LIST
19622: LIST
19623: LIST
19624: LIST
19625: PUSH
19626: EMPTY
19627: LIST
19628: PPUSH
19629: CALL_OW 446
19633: GO 19557
19635: POP
19636: POP
// end ;
19637: LD_VAR 0 3
19641: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
19642: LD_INT 0
19644: PPUSH
19645: PPUSH
19646: PPUSH
19647: PPUSH
19648: PPUSH
19649: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
19650: LD_VAR 0 1
19654: NOT
19655: IFTRUE 19672
19657: PUSH
19658: LD_VAR 0 1
19662: PPUSH
19663: CALL_OW 263
19667: PUSH
19668: LD_INT 2
19670: NONEQUAL
19671: OR
19672: IFFALSE 19676
// exit ;
19674: GO 19992
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
19676: LD_ADDR_VAR 0 6
19680: PUSH
19681: LD_INT 22
19683: PUSH
19684: LD_VAR 0 1
19688: PPUSH
19689: CALL_OW 255
19693: PUSH
19694: EMPTY
19695: LIST
19696: LIST
19697: PUSH
19698: LD_INT 2
19700: PUSH
19701: LD_INT 30
19703: PUSH
19704: LD_INT 36
19706: PUSH
19707: EMPTY
19708: LIST
19709: LIST
19710: PUSH
19711: LD_INT 34
19713: PUSH
19714: LD_INT 31
19716: PUSH
19717: EMPTY
19718: LIST
19719: LIST
19720: PUSH
19721: EMPTY
19722: LIST
19723: LIST
19724: LIST
19725: PUSH
19726: EMPTY
19727: LIST
19728: LIST
19729: PPUSH
19730: CALL_OW 69
19734: ST_TO_ADDR
// if not tmp then
19735: LD_VAR 0 6
19739: NOT
19740: IFFALSE 19744
// exit ;
19742: GO 19992
// result := [ ] ;
19744: LD_ADDR_VAR 0 2
19748: PUSH
19749: EMPTY
19750: ST_TO_ADDR
// for i in tmp do
19751: LD_ADDR_VAR 0 3
19755: PUSH
19756: LD_VAR 0 6
19760: PUSH
19761: FOR_IN
19762: IFFALSE 19833
// begin t := UnitsInside ( i ) ;
19764: LD_ADDR_VAR 0 4
19768: PUSH
19769: LD_VAR 0 3
19773: PPUSH
19774: CALL_OW 313
19778: ST_TO_ADDR
// if t then
19779: LD_VAR 0 4
19783: IFFALSE 19831
// for j in t do
19785: LD_ADDR_VAR 0 7
19789: PUSH
19790: LD_VAR 0 4
19794: PUSH
19795: FOR_IN
19796: IFFALSE 19829
// result := Replace ( result , result + 1 , j ) ;
19798: LD_ADDR_VAR 0 2
19802: PUSH
19803: LD_VAR 0 2
19807: PPUSH
19808: LD_VAR 0 2
19812: PUSH
19813: LD_INT 1
19815: PLUS
19816: PPUSH
19817: LD_VAR 0 7
19821: PPUSH
19822: CALL_OW 1
19826: ST_TO_ADDR
19827: GO 19795
19829: POP
19830: POP
// end ;
19831: GO 19761
19833: POP
19834: POP
// if not result then
19835: LD_VAR 0 2
19839: NOT
19840: IFFALSE 19844
// exit ;
19842: GO 19992
// mech := result [ 1 ] ;
19844: LD_ADDR_VAR 0 5
19848: PUSH
19849: LD_VAR 0 2
19853: PUSH
19854: LD_INT 1
19856: ARRAY
19857: ST_TO_ADDR
// if result > 1 then
19858: LD_VAR 0 2
19862: PUSH
19863: LD_INT 1
19865: GREATER
19866: IFFALSE 19978
// begin for i = 2 to result do
19868: LD_ADDR_VAR 0 3
19872: PUSH
19873: DOUBLE
19874: LD_INT 2
19876: DEC
19877: ST_TO_ADDR
19878: LD_VAR 0 2
19882: PUSH
19883: FOR_TO
19884: IFFALSE 19976
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
19886: LD_ADDR_VAR 0 4
19890: PUSH
19891: LD_VAR 0 2
19895: PUSH
19896: LD_VAR 0 3
19900: ARRAY
19901: PPUSH
19902: LD_INT 3
19904: PPUSH
19905: CALL_OW 259
19909: PUSH
19910: LD_VAR 0 2
19914: PUSH
19915: LD_VAR 0 3
19919: ARRAY
19920: PPUSH
19921: CALL_OW 432
19925: MINUS
19926: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
19927: LD_VAR 0 4
19931: PUSH
19932: LD_VAR 0 5
19936: PPUSH
19937: LD_INT 3
19939: PPUSH
19940: CALL_OW 259
19944: PUSH
19945: LD_VAR 0 5
19949: PPUSH
19950: CALL_OW 432
19954: MINUS
19955: GREATEREQUAL
19956: IFFALSE 19974
// mech := result [ i ] ;
19958: LD_ADDR_VAR 0 5
19962: PUSH
19963: LD_VAR 0 2
19967: PUSH
19968: LD_VAR 0 3
19972: ARRAY
19973: ST_TO_ADDR
// end ;
19974: GO 19883
19976: POP
19977: POP
// end ; ComLinkTo ( vehicle , mech ) ;
19978: LD_VAR 0 1
19982: PPUSH
19983: LD_VAR 0 5
19987: PPUSH
19988: CALL_OW 135
// end ;
19992: LD_VAR 0 2
19996: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
19997: LD_INT 0
19999: PPUSH
20000: PPUSH
20001: PPUSH
20002: PPUSH
20003: PPUSH
20004: PPUSH
20005: PPUSH
20006: PPUSH
20007: PPUSH
20008: PPUSH
20009: PPUSH
20010: PPUSH
20011: PPUSH
// result := [ ] ;
20012: LD_ADDR_VAR 0 7
20016: PUSH
20017: EMPTY
20018: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
20019: LD_VAR 0 1
20023: PPUSH
20024: CALL_OW 266
20028: PUSH
20029: LD_INT 0
20031: PUSH
20032: LD_INT 1
20034: PUSH
20035: EMPTY
20036: LIST
20037: LIST
20038: IN
20039: NOT
20040: IFFALSE 20044
// exit ;
20042: GO 21684
// if name then
20044: LD_VAR 0 3
20048: IFFALSE 20064
// SetBName ( base_dep , name ) ;
20050: LD_VAR 0 1
20054: PPUSH
20055: LD_VAR 0 3
20059: PPUSH
20060: CALL_OW 500
// base := GetBase ( base_dep ) ;
20064: LD_ADDR_VAR 0 15
20068: PUSH
20069: LD_VAR 0 1
20073: PPUSH
20074: CALL_OW 274
20078: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
20079: LD_ADDR_VAR 0 16
20083: PUSH
20084: LD_VAR 0 1
20088: PPUSH
20089: CALL_OW 255
20093: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
20094: LD_ADDR_VAR 0 17
20098: PUSH
20099: LD_VAR 0 1
20103: PPUSH
20104: CALL_OW 248
20108: ST_TO_ADDR
// if sources then
20109: LD_VAR 0 5
20113: IFFALSE 20160
// for i = 1 to 3 do
20115: LD_ADDR_VAR 0 8
20119: PUSH
20120: DOUBLE
20121: LD_INT 1
20123: DEC
20124: ST_TO_ADDR
20125: LD_INT 3
20127: PUSH
20128: FOR_TO
20129: IFFALSE 20158
// AddResourceType ( base , i , sources [ i ] ) ;
20131: LD_VAR 0 15
20135: PPUSH
20136: LD_VAR 0 8
20140: PPUSH
20141: LD_VAR 0 5
20145: PUSH
20146: LD_VAR 0 8
20150: ARRAY
20151: PPUSH
20152: CALL_OW 276
20156: GO 20128
20158: POP
20159: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
20160: LD_ADDR_VAR 0 18
20164: PUSH
20165: LD_VAR 0 15
20169: PPUSH
20170: LD_VAR 0 2
20174: PPUSH
20175: LD_INT 1
20177: PPUSH
20178: CALL 19419 0 3
20182: ST_TO_ADDR
// InitHc ;
20183: CALL_OW 19
// InitUc ;
20187: CALL_OW 18
// uc_side := side ;
20191: LD_ADDR_OWVAR 20
20195: PUSH
20196: LD_VAR 0 16
20200: ST_TO_ADDR
// uc_nation := nation ;
20201: LD_ADDR_OWVAR 21
20205: PUSH
20206: LD_VAR 0 17
20210: ST_TO_ADDR
// if buildings then
20211: LD_VAR 0 18
20215: IFFALSE 21543
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
20217: LD_ADDR_VAR 0 19
20221: PUSH
20222: LD_VAR 0 18
20226: PPUSH
20227: LD_INT 2
20229: PUSH
20230: LD_INT 30
20232: PUSH
20233: LD_INT 29
20235: PUSH
20236: EMPTY
20237: LIST
20238: LIST
20239: PUSH
20240: LD_INT 30
20242: PUSH
20243: LD_INT 30
20245: PUSH
20246: EMPTY
20247: LIST
20248: LIST
20249: PUSH
20250: EMPTY
20251: LIST
20252: LIST
20253: LIST
20254: PPUSH
20255: CALL_OW 72
20259: ST_TO_ADDR
// if tmp then
20260: LD_VAR 0 19
20264: IFFALSE 20312
// for i in tmp do
20266: LD_ADDR_VAR 0 8
20270: PUSH
20271: LD_VAR 0 19
20275: PUSH
20276: FOR_IN
20277: IFFALSE 20310
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
20279: LD_VAR 0 8
20283: PPUSH
20284: CALL_OW 250
20288: PPUSH
20289: LD_VAR 0 8
20293: PPUSH
20294: CALL_OW 251
20298: PPUSH
20299: LD_VAR 0 16
20303: PPUSH
20304: CALL_OW 441
20308: GO 20276
20310: POP
20311: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
20312: LD_VAR 0 18
20316: PPUSH
20317: LD_INT 2
20319: PUSH
20320: LD_INT 30
20322: PUSH
20323: LD_INT 32
20325: PUSH
20326: EMPTY
20327: LIST
20328: LIST
20329: PUSH
20330: LD_INT 30
20332: PUSH
20333: LD_INT 33
20335: PUSH
20336: EMPTY
20337: LIST
20338: LIST
20339: PUSH
20340: EMPTY
20341: LIST
20342: LIST
20343: LIST
20344: PPUSH
20345: CALL_OW 72
20349: IFFALSE 20437
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
20351: LD_ADDR_VAR 0 8
20355: PUSH
20356: LD_VAR 0 18
20360: PPUSH
20361: LD_INT 2
20363: PUSH
20364: LD_INT 30
20366: PUSH
20367: LD_INT 32
20369: PUSH
20370: EMPTY
20371: LIST
20372: LIST
20373: PUSH
20374: LD_INT 30
20376: PUSH
20377: LD_INT 33
20379: PUSH
20380: EMPTY
20381: LIST
20382: LIST
20383: PUSH
20384: EMPTY
20385: LIST
20386: LIST
20387: LIST
20388: PPUSH
20389: CALL_OW 72
20393: PUSH
20394: FOR_IN
20395: IFFALSE 20435
// begin if not GetBWeapon ( i ) then
20397: LD_VAR 0 8
20401: PPUSH
20402: CALL_OW 269
20406: NOT
20407: IFFALSE 20433
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
20409: LD_VAR 0 8
20413: PPUSH
20414: LD_VAR 0 8
20418: PPUSH
20419: LD_VAR 0 2
20423: PPUSH
20424: CALL 21689 0 2
20428: PPUSH
20429: CALL_OW 431
// end ;
20433: GO 20394
20435: POP
20436: POP
// end ; for i = 1 to personel do
20437: LD_ADDR_VAR 0 8
20441: PUSH
20442: DOUBLE
20443: LD_INT 1
20445: DEC
20446: ST_TO_ADDR
20447: LD_VAR 0 6
20451: PUSH
20452: FOR_TO
20453: IFFALSE 21523
// begin if i > 4 then
20455: LD_VAR 0 8
20459: PUSH
20460: LD_INT 4
20462: GREATER
20463: IFFALSE 20467
// break ;
20465: GO 21523
// case i of 1 :
20467: LD_VAR 0 8
20471: PUSH
20472: LD_INT 1
20474: DOUBLE
20475: EQUAL
20476: IFTRUE 20480
20478: GO 20560
20480: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
20481: LD_ADDR_VAR 0 12
20485: PUSH
20486: LD_VAR 0 18
20490: PPUSH
20491: LD_INT 22
20493: PUSH
20494: LD_VAR 0 16
20498: PUSH
20499: EMPTY
20500: LIST
20501: LIST
20502: PUSH
20503: LD_INT 58
20505: PUSH
20506: EMPTY
20507: LIST
20508: PUSH
20509: LD_INT 2
20511: PUSH
20512: LD_INT 30
20514: PUSH
20515: LD_INT 32
20517: PUSH
20518: EMPTY
20519: LIST
20520: LIST
20521: PUSH
20522: LD_INT 30
20524: PUSH
20525: LD_INT 4
20527: PUSH
20528: EMPTY
20529: LIST
20530: LIST
20531: PUSH
20532: LD_INT 30
20534: PUSH
20535: LD_INT 5
20537: PUSH
20538: EMPTY
20539: LIST
20540: LIST
20541: PUSH
20542: EMPTY
20543: LIST
20544: LIST
20545: LIST
20546: LIST
20547: PUSH
20548: EMPTY
20549: LIST
20550: LIST
20551: LIST
20552: PPUSH
20553: CALL_OW 72
20557: ST_TO_ADDR
20558: GO 20782
20560: LD_INT 2
20562: DOUBLE
20563: EQUAL
20564: IFTRUE 20568
20566: GO 20630
20568: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
20569: LD_ADDR_VAR 0 12
20573: PUSH
20574: LD_VAR 0 18
20578: PPUSH
20579: LD_INT 22
20581: PUSH
20582: LD_VAR 0 16
20586: PUSH
20587: EMPTY
20588: LIST
20589: LIST
20590: PUSH
20591: LD_INT 2
20593: PUSH
20594: LD_INT 30
20596: PUSH
20597: LD_INT 0
20599: PUSH
20600: EMPTY
20601: LIST
20602: LIST
20603: PUSH
20604: LD_INT 30
20606: PUSH
20607: LD_INT 1
20609: PUSH
20610: EMPTY
20611: LIST
20612: LIST
20613: PUSH
20614: EMPTY
20615: LIST
20616: LIST
20617: LIST
20618: PUSH
20619: EMPTY
20620: LIST
20621: LIST
20622: PPUSH
20623: CALL_OW 72
20627: ST_TO_ADDR
20628: GO 20782
20630: LD_INT 3
20632: DOUBLE
20633: EQUAL
20634: IFTRUE 20638
20636: GO 20700
20638: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
20639: LD_ADDR_VAR 0 12
20643: PUSH
20644: LD_VAR 0 18
20648: PPUSH
20649: LD_INT 22
20651: PUSH
20652: LD_VAR 0 16
20656: PUSH
20657: EMPTY
20658: LIST
20659: LIST
20660: PUSH
20661: LD_INT 2
20663: PUSH
20664: LD_INT 30
20666: PUSH
20667: LD_INT 2
20669: PUSH
20670: EMPTY
20671: LIST
20672: LIST
20673: PUSH
20674: LD_INT 30
20676: PUSH
20677: LD_INT 3
20679: PUSH
20680: EMPTY
20681: LIST
20682: LIST
20683: PUSH
20684: EMPTY
20685: LIST
20686: LIST
20687: LIST
20688: PUSH
20689: EMPTY
20690: LIST
20691: LIST
20692: PPUSH
20693: CALL_OW 72
20697: ST_TO_ADDR
20698: GO 20782
20700: LD_INT 4
20702: DOUBLE
20703: EQUAL
20704: IFTRUE 20708
20706: GO 20781
20708: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
20709: LD_ADDR_VAR 0 12
20713: PUSH
20714: LD_VAR 0 18
20718: PPUSH
20719: LD_INT 22
20721: PUSH
20722: LD_VAR 0 16
20726: PUSH
20727: EMPTY
20728: LIST
20729: LIST
20730: PUSH
20731: LD_INT 2
20733: PUSH
20734: LD_INT 30
20736: PUSH
20737: LD_INT 6
20739: PUSH
20740: EMPTY
20741: LIST
20742: LIST
20743: PUSH
20744: LD_INT 30
20746: PUSH
20747: LD_INT 7
20749: PUSH
20750: EMPTY
20751: LIST
20752: LIST
20753: PUSH
20754: LD_INT 30
20756: PUSH
20757: LD_INT 8
20759: PUSH
20760: EMPTY
20761: LIST
20762: LIST
20763: PUSH
20764: EMPTY
20765: LIST
20766: LIST
20767: LIST
20768: LIST
20769: PUSH
20770: EMPTY
20771: LIST
20772: LIST
20773: PPUSH
20774: CALL_OW 72
20778: ST_TO_ADDR
20779: GO 20782
20781: POP
// if i = 1 then
20782: LD_VAR 0 8
20786: PUSH
20787: LD_INT 1
20789: EQUAL
20790: IFFALSE 20901
// begin tmp := [ ] ;
20792: LD_ADDR_VAR 0 19
20796: PUSH
20797: EMPTY
20798: ST_TO_ADDR
// for j in f do
20799: LD_ADDR_VAR 0 9
20803: PUSH
20804: LD_VAR 0 12
20808: PUSH
20809: FOR_IN
20810: IFFALSE 20883
// if GetBType ( j ) = b_bunker then
20812: LD_VAR 0 9
20816: PPUSH
20817: CALL_OW 266
20821: PUSH
20822: LD_INT 32
20824: EQUAL
20825: IFFALSE 20852
// tmp := Insert ( tmp , 1 , j ) else
20827: LD_ADDR_VAR 0 19
20831: PUSH
20832: LD_VAR 0 19
20836: PPUSH
20837: LD_INT 1
20839: PPUSH
20840: LD_VAR 0 9
20844: PPUSH
20845: CALL_OW 2
20849: ST_TO_ADDR
20850: GO 20881
// tmp := Insert ( tmp , tmp + 1 , j ) ;
20852: LD_ADDR_VAR 0 19
20856: PUSH
20857: LD_VAR 0 19
20861: PPUSH
20862: LD_VAR 0 19
20866: PUSH
20867: LD_INT 1
20869: PLUS
20870: PPUSH
20871: LD_VAR 0 9
20875: PPUSH
20876: CALL_OW 2
20880: ST_TO_ADDR
20881: GO 20809
20883: POP
20884: POP
// if tmp then
20885: LD_VAR 0 19
20889: IFFALSE 20901
// f := tmp ;
20891: LD_ADDR_VAR 0 12
20895: PUSH
20896: LD_VAR 0 19
20900: ST_TO_ADDR
// end ; x := personel [ i ] ;
20901: LD_ADDR_VAR 0 13
20905: PUSH
20906: LD_VAR 0 6
20910: PUSH
20911: LD_VAR 0 8
20915: ARRAY
20916: ST_TO_ADDR
// if x = - 1 then
20917: LD_VAR 0 13
20921: PUSH
20922: LD_INT 1
20924: NEG
20925: EQUAL
20926: IFFALSE 21137
// begin for j in f do
20928: LD_ADDR_VAR 0 9
20932: PUSH
20933: LD_VAR 0 12
20937: PUSH
20938: FOR_IN
20939: IFFALSE 21133
// repeat InitHc ;
20941: CALL_OW 19
// if GetBType ( j ) = b_barracks then
20945: LD_VAR 0 9
20949: PPUSH
20950: CALL_OW 266
20954: PUSH
20955: LD_INT 5
20957: EQUAL
20958: IFFALSE 21028
// begin if UnitsInside ( j ) < 3 then
20960: LD_VAR 0 9
20964: PPUSH
20965: CALL_OW 313
20969: PUSH
20970: LD_INT 3
20972: LESS
20973: IFFALSE 21009
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
20975: LD_INT 0
20977: PPUSH
20978: LD_INT 5
20980: PUSH
20981: LD_INT 8
20983: PUSH
20984: LD_INT 9
20986: PUSH
20987: EMPTY
20988: LIST
20989: LIST
20990: LIST
20991: PUSH
20992: LD_VAR 0 17
20996: ARRAY
20997: PPUSH
20998: LD_VAR 0 4
21002: PPUSH
21003: CALL_OW 380
21007: GO 21026
// PrepareHuman ( false , i , skill ) ;
21009: LD_INT 0
21011: PPUSH
21012: LD_VAR 0 8
21016: PPUSH
21017: LD_VAR 0 4
21021: PPUSH
21022: CALL_OW 380
// end else
21026: GO 21045
// PrepareHuman ( false , i , skill ) ;
21028: LD_INT 0
21030: PPUSH
21031: LD_VAR 0 8
21035: PPUSH
21036: LD_VAR 0 4
21040: PPUSH
21041: CALL_OW 380
// un := CreateHuman ;
21045: LD_ADDR_VAR 0 14
21049: PUSH
21050: CALL_OW 44
21054: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
21055: LD_ADDR_VAR 0 7
21059: PUSH
21060: LD_VAR 0 7
21064: PPUSH
21065: LD_INT 1
21067: PPUSH
21068: LD_VAR 0 14
21072: PPUSH
21073: CALL_OW 2
21077: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
21078: LD_VAR 0 14
21082: PPUSH
21083: LD_VAR 0 9
21087: PPUSH
21088: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
21092: LD_VAR 0 9
21096: PPUSH
21097: CALL_OW 313
21101: PUSH
21102: LD_INT 6
21104: EQUAL
21105: IFTRUE 21129
21107: PUSH
21108: LD_VAR 0 9
21112: PPUSH
21113: CALL_OW 266
21117: PUSH
21118: LD_INT 32
21120: PUSH
21121: LD_INT 31
21123: PUSH
21124: EMPTY
21125: LIST
21126: LIST
21127: IN
21128: OR
21129: IFFALSE 20941
21131: GO 20938
21133: POP
21134: POP
// end else
21135: GO 21521
// for j = 1 to x do
21137: LD_ADDR_VAR 0 9
21141: PUSH
21142: DOUBLE
21143: LD_INT 1
21145: DEC
21146: ST_TO_ADDR
21147: LD_VAR 0 13
21151: PUSH
21152: FOR_TO
21153: IFFALSE 21519
// begin InitHc ;
21155: CALL_OW 19
// if not f then
21159: LD_VAR 0 12
21163: NOT
21164: IFFALSE 21253
// begin PrepareHuman ( false , i , skill ) ;
21166: LD_INT 0
21168: PPUSH
21169: LD_VAR 0 8
21173: PPUSH
21174: LD_VAR 0 4
21178: PPUSH
21179: CALL_OW 380
// un := CreateHuman ;
21183: LD_ADDR_VAR 0 14
21187: PUSH
21188: CALL_OW 44
21192: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
21193: LD_ADDR_VAR 0 7
21197: PUSH
21198: LD_VAR 0 7
21202: PPUSH
21203: LD_INT 1
21205: PPUSH
21206: LD_VAR 0 14
21210: PPUSH
21211: CALL_OW 2
21215: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
21216: LD_VAR 0 14
21220: PPUSH
21221: LD_VAR 0 1
21225: PPUSH
21226: CALL_OW 250
21230: PPUSH
21231: LD_VAR 0 1
21235: PPUSH
21236: CALL_OW 251
21240: PPUSH
21241: LD_INT 10
21243: PPUSH
21244: LD_INT 0
21246: PPUSH
21247: CALL_OW 50
// continue ;
21251: GO 21152
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
21253: LD_VAR 0 12
21257: PUSH
21258: LD_INT 1
21260: ARRAY
21261: PPUSH
21262: CALL_OW 313
21266: IFFALSE 21294
21268: PUSH
21269: LD_VAR 0 12
21273: PUSH
21274: LD_INT 1
21276: ARRAY
21277: PPUSH
21278: CALL_OW 266
21282: PUSH
21283: LD_INT 32
21285: PUSH
21286: LD_INT 31
21288: PUSH
21289: EMPTY
21290: LIST
21291: LIST
21292: IN
21293: AND
21294: IFTRUE 21315
21296: PUSH
21297: LD_VAR 0 12
21301: PUSH
21302: LD_INT 1
21304: ARRAY
21305: PPUSH
21306: CALL_OW 313
21310: PUSH
21311: LD_INT 6
21313: EQUAL
21314: OR
21315: IFFALSE 21335
// f := Delete ( f , 1 ) ;
21317: LD_ADDR_VAR 0 12
21321: PUSH
21322: LD_VAR 0 12
21326: PPUSH
21327: LD_INT 1
21329: PPUSH
21330: CALL_OW 3
21334: ST_TO_ADDR
// if not f then
21335: LD_VAR 0 12
21339: NOT
21340: IFFALSE 21358
// begin x := x + 2 ;
21342: LD_ADDR_VAR 0 13
21346: PUSH
21347: LD_VAR 0 13
21351: PUSH
21352: LD_INT 2
21354: PLUS
21355: ST_TO_ADDR
// continue ;
21356: GO 21152
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
21358: LD_VAR 0 12
21362: PUSH
21363: LD_INT 1
21365: ARRAY
21366: PPUSH
21367: CALL_OW 266
21371: PUSH
21372: LD_INT 5
21374: EQUAL
21375: IFFALSE 21449
// begin if UnitsInside ( f [ 1 ] ) < 3 then
21377: LD_VAR 0 12
21381: PUSH
21382: LD_INT 1
21384: ARRAY
21385: PPUSH
21386: CALL_OW 313
21390: PUSH
21391: LD_INT 3
21393: LESS
21394: IFFALSE 21430
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
21396: LD_INT 0
21398: PPUSH
21399: LD_INT 5
21401: PUSH
21402: LD_INT 8
21404: PUSH
21405: LD_INT 9
21407: PUSH
21408: EMPTY
21409: LIST
21410: LIST
21411: LIST
21412: PUSH
21413: LD_VAR 0 17
21417: ARRAY
21418: PPUSH
21419: LD_VAR 0 4
21423: PPUSH
21424: CALL_OW 380
21428: GO 21447
// PrepareHuman ( false , i , skill ) ;
21430: LD_INT 0
21432: PPUSH
21433: LD_VAR 0 8
21437: PPUSH
21438: LD_VAR 0 4
21442: PPUSH
21443: CALL_OW 380
// end else
21447: GO 21466
// PrepareHuman ( false , i , skill ) ;
21449: LD_INT 0
21451: PPUSH
21452: LD_VAR 0 8
21456: PPUSH
21457: LD_VAR 0 4
21461: PPUSH
21462: CALL_OW 380
// un := CreateHuman ;
21466: LD_ADDR_VAR 0 14
21470: PUSH
21471: CALL_OW 44
21475: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
21476: LD_ADDR_VAR 0 7
21480: PUSH
21481: LD_VAR 0 7
21485: PPUSH
21486: LD_INT 1
21488: PPUSH
21489: LD_VAR 0 14
21493: PPUSH
21494: CALL_OW 2
21498: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
21499: LD_VAR 0 14
21503: PPUSH
21504: LD_VAR 0 12
21508: PUSH
21509: LD_INT 1
21511: ARRAY
21512: PPUSH
21513: CALL_OW 52
// end ;
21517: GO 21152
21519: POP
21520: POP
// end ;
21521: GO 20452
21523: POP
21524: POP
// result := result ^ buildings ;
21525: LD_ADDR_VAR 0 7
21529: PUSH
21530: LD_VAR 0 7
21534: PUSH
21535: LD_VAR 0 18
21539: ADD
21540: ST_TO_ADDR
// end else
21541: GO 21684
// begin for i = 1 to personel do
21543: LD_ADDR_VAR 0 8
21547: PUSH
21548: DOUBLE
21549: LD_INT 1
21551: DEC
21552: ST_TO_ADDR
21553: LD_VAR 0 6
21557: PUSH
21558: FOR_TO
21559: IFFALSE 21682
// begin if i > 4 then
21561: LD_VAR 0 8
21565: PUSH
21566: LD_INT 4
21568: GREATER
21569: IFFALSE 21573
// break ;
21571: GO 21682
// x := personel [ i ] ;
21573: LD_ADDR_VAR 0 13
21577: PUSH
21578: LD_VAR 0 6
21582: PUSH
21583: LD_VAR 0 8
21587: ARRAY
21588: ST_TO_ADDR
// if x = - 1 then
21589: LD_VAR 0 13
21593: PUSH
21594: LD_INT 1
21596: NEG
21597: EQUAL
21598: IFFALSE 21602
// continue ;
21600: GO 21558
// PrepareHuman ( false , i , skill ) ;
21602: LD_INT 0
21604: PPUSH
21605: LD_VAR 0 8
21609: PPUSH
21610: LD_VAR 0 4
21614: PPUSH
21615: CALL_OW 380
// un := CreateHuman ;
21619: LD_ADDR_VAR 0 14
21623: PUSH
21624: CALL_OW 44
21628: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
21629: LD_VAR 0 14
21633: PPUSH
21634: LD_VAR 0 1
21638: PPUSH
21639: CALL_OW 250
21643: PPUSH
21644: LD_VAR 0 1
21648: PPUSH
21649: CALL_OW 251
21653: PPUSH
21654: LD_INT 10
21656: PPUSH
21657: LD_INT 0
21659: PPUSH
21660: CALL_OW 50
// result := result ^ un ;
21664: LD_ADDR_VAR 0 7
21668: PUSH
21669: LD_VAR 0 7
21673: PUSH
21674: LD_VAR 0 14
21678: ADD
21679: ST_TO_ADDR
// end ;
21680: GO 21558
21682: POP
21683: POP
// end ; end ;
21684: LD_VAR 0 7
21688: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
21689: LD_INT 0
21691: PPUSH
21692: PPUSH
21693: PPUSH
21694: PPUSH
21695: PPUSH
21696: PPUSH
21697: PPUSH
21698: PPUSH
21699: PPUSH
21700: PPUSH
21701: PPUSH
21702: PPUSH
21703: PPUSH
21704: PPUSH
21705: PPUSH
21706: PPUSH
// result := false ;
21707: LD_ADDR_VAR 0 3
21711: PUSH
21712: LD_INT 0
21714: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
21715: LD_VAR 0 1
21719: NOT
21720: IFTRUE 21745
21722: PUSH
21723: LD_VAR 0 1
21727: PPUSH
21728: CALL_OW 266
21732: PUSH
21733: LD_INT 32
21735: PUSH
21736: LD_INT 33
21738: PUSH
21739: EMPTY
21740: LIST
21741: LIST
21742: IN
21743: NOT
21744: OR
21745: IFFALSE 21749
// exit ;
21747: GO 22884
// nat := GetNation ( tower ) ;
21749: LD_ADDR_VAR 0 12
21753: PUSH
21754: LD_VAR 0 1
21758: PPUSH
21759: CALL_OW 248
21763: ST_TO_ADDR
// side := GetSide ( tower ) ;
21764: LD_ADDR_VAR 0 16
21768: PUSH
21769: LD_VAR 0 1
21773: PPUSH
21774: CALL_OW 255
21778: ST_TO_ADDR
// x := GetX ( tower ) ;
21779: LD_ADDR_VAR 0 10
21783: PUSH
21784: LD_VAR 0 1
21788: PPUSH
21789: CALL_OW 250
21793: ST_TO_ADDR
// y := GetY ( tower ) ;
21794: LD_ADDR_VAR 0 11
21798: PUSH
21799: LD_VAR 0 1
21803: PPUSH
21804: CALL_OW 251
21808: ST_TO_ADDR
// if not x or not y then
21809: LD_VAR 0 10
21813: NOT
21814: IFTRUE 21823
21816: PUSH
21817: LD_VAR 0 11
21821: NOT
21822: OR
21823: IFFALSE 21827
// exit ;
21825: GO 22884
// weapon := 0 ;
21827: LD_ADDR_VAR 0 18
21831: PUSH
21832: LD_INT 0
21834: ST_TO_ADDR
// fac_list := [ ] ;
21835: LD_ADDR_VAR 0 17
21839: PUSH
21840: EMPTY
21841: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
21842: LD_ADDR_VAR 0 6
21846: PUSH
21847: LD_VAR 0 1
21851: PPUSH
21852: CALL_OW 274
21856: PPUSH
21857: LD_VAR 0 2
21861: PPUSH
21862: LD_INT 0
21864: PPUSH
21865: CALL 19419 0 3
21869: PPUSH
21870: LD_INT 30
21872: PUSH
21873: LD_INT 3
21875: PUSH
21876: EMPTY
21877: LIST
21878: LIST
21879: PPUSH
21880: CALL_OW 72
21884: ST_TO_ADDR
// if not factories then
21885: LD_VAR 0 6
21889: NOT
21890: IFFALSE 21894
// exit ;
21892: GO 22884
// for i in factories do
21894: LD_ADDR_VAR 0 8
21898: PUSH
21899: LD_VAR 0 6
21903: PUSH
21904: FOR_IN
21905: IFFALSE 21930
// fac_list := fac_list union AvailableWeaponList ( i ) ;
21907: LD_ADDR_VAR 0 17
21911: PUSH
21912: LD_VAR 0 17
21916: PUSH
21917: LD_VAR 0 8
21921: PPUSH
21922: CALL_OW 478
21926: UNION
21927: ST_TO_ADDR
21928: GO 21904
21930: POP
21931: POP
// if not fac_list then
21932: LD_VAR 0 17
21936: NOT
21937: IFFALSE 21941
// exit ;
21939: GO 22884
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
21941: LD_ADDR_VAR 0 5
21945: PUSH
21946: LD_INT 4
21948: PUSH
21949: LD_INT 5
21951: PUSH
21952: LD_INT 9
21954: PUSH
21955: LD_INT 10
21957: PUSH
21958: LD_INT 6
21960: PUSH
21961: LD_INT 7
21963: PUSH
21964: LD_INT 11
21966: PUSH
21967: EMPTY
21968: LIST
21969: LIST
21970: LIST
21971: LIST
21972: LIST
21973: LIST
21974: LIST
21975: PUSH
21976: LD_INT 27
21978: PUSH
21979: LD_INT 28
21981: PUSH
21982: LD_INT 26
21984: PUSH
21985: LD_INT 30
21987: PUSH
21988: EMPTY
21989: LIST
21990: LIST
21991: LIST
21992: LIST
21993: PUSH
21994: LD_INT 43
21996: PUSH
21997: LD_INT 44
21999: PUSH
22000: LD_INT 46
22002: PUSH
22003: LD_INT 45
22005: PUSH
22006: LD_INT 47
22008: PUSH
22009: LD_INT 49
22011: PUSH
22012: EMPTY
22013: LIST
22014: LIST
22015: LIST
22016: LIST
22017: LIST
22018: LIST
22019: PUSH
22020: EMPTY
22021: LIST
22022: LIST
22023: LIST
22024: PUSH
22025: LD_VAR 0 12
22029: ARRAY
22030: ST_TO_ADDR
// list := list isect fac_list ;
22031: LD_ADDR_VAR 0 5
22035: PUSH
22036: LD_VAR 0 5
22040: PUSH
22041: LD_VAR 0 17
22045: ISECT
22046: ST_TO_ADDR
// if not list then
22047: LD_VAR 0 5
22051: NOT
22052: IFFALSE 22056
// exit ;
22054: GO 22884
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
22056: LD_VAR 0 12
22060: PUSH
22061: LD_INT 3
22063: EQUAL
22064: IFFALSE 22076
22066: PUSH
22067: LD_INT 49
22069: PUSH
22070: LD_VAR 0 5
22074: IN
22075: AND
22076: IFFALSE 22096
22078: PUSH
22079: LD_INT 31
22081: PPUSH
22082: LD_VAR 0 16
22086: PPUSH
22087: CALL_OW 321
22091: PUSH
22092: LD_INT 2
22094: EQUAL
22095: AND
22096: IFFALSE 22156
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
22098: LD_INT 22
22100: PUSH
22101: LD_VAR 0 16
22105: PUSH
22106: EMPTY
22107: LIST
22108: LIST
22109: PUSH
22110: LD_INT 35
22112: PUSH
22113: LD_INT 49
22115: PUSH
22116: EMPTY
22117: LIST
22118: LIST
22119: PUSH
22120: LD_INT 91
22122: PUSH
22123: LD_VAR 0 1
22127: PUSH
22128: LD_INT 10
22130: PUSH
22131: EMPTY
22132: LIST
22133: LIST
22134: LIST
22135: PUSH
22136: EMPTY
22137: LIST
22138: LIST
22139: LIST
22140: PPUSH
22141: CALL_OW 69
22145: NOT
22146: IFFALSE 22156
// weapon := ru_time_lapser ;
22148: LD_ADDR_VAR 0 18
22152: PUSH
22153: LD_INT 49
22155: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
22156: LD_VAR 0 12
22160: PUSH
22161: LD_INT 1
22163: PUSH
22164: LD_INT 2
22166: PUSH
22167: EMPTY
22168: LIST
22169: LIST
22170: IN
22171: IFFALSE 22195
22173: PUSH
22174: LD_INT 11
22176: PUSH
22177: LD_VAR 0 5
22181: IN
22182: IFTRUE 22194
22184: PUSH
22185: LD_INT 30
22187: PUSH
22188: LD_VAR 0 5
22192: IN
22193: OR
22194: AND
22195: IFFALSE 22215
22197: PUSH
22198: LD_INT 6
22200: PPUSH
22201: LD_VAR 0 16
22205: PPUSH
22206: CALL_OW 321
22210: PUSH
22211: LD_INT 2
22213: EQUAL
22214: AND
22215: IFFALSE 22382
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
22217: LD_INT 22
22219: PUSH
22220: LD_VAR 0 16
22224: PUSH
22225: EMPTY
22226: LIST
22227: LIST
22228: PUSH
22229: LD_INT 2
22231: PUSH
22232: LD_INT 35
22234: PUSH
22235: LD_INT 11
22237: PUSH
22238: EMPTY
22239: LIST
22240: LIST
22241: PUSH
22242: LD_INT 35
22244: PUSH
22245: LD_INT 30
22247: PUSH
22248: EMPTY
22249: LIST
22250: LIST
22251: PUSH
22252: EMPTY
22253: LIST
22254: LIST
22255: LIST
22256: PUSH
22257: LD_INT 91
22259: PUSH
22260: LD_VAR 0 1
22264: PUSH
22265: LD_INT 18
22267: PUSH
22268: EMPTY
22269: LIST
22270: LIST
22271: LIST
22272: PUSH
22273: EMPTY
22274: LIST
22275: LIST
22276: LIST
22277: PPUSH
22278: CALL_OW 69
22282: NOT
22283: IFFALSE 22359
22285: PUSH
22286: LD_INT 22
22288: PUSH
22289: LD_VAR 0 16
22293: PUSH
22294: EMPTY
22295: LIST
22296: LIST
22297: PUSH
22298: LD_INT 2
22300: PUSH
22301: LD_INT 30
22303: PUSH
22304: LD_INT 32
22306: PUSH
22307: EMPTY
22308: LIST
22309: LIST
22310: PUSH
22311: LD_INT 30
22313: PUSH
22314: LD_INT 33
22316: PUSH
22317: EMPTY
22318: LIST
22319: LIST
22320: PUSH
22321: EMPTY
22322: LIST
22323: LIST
22324: LIST
22325: PUSH
22326: LD_INT 91
22328: PUSH
22329: LD_VAR 0 1
22333: PUSH
22334: LD_INT 12
22336: PUSH
22337: EMPTY
22338: LIST
22339: LIST
22340: LIST
22341: PUSH
22342: EMPTY
22343: LIST
22344: LIST
22345: LIST
22346: PUSH
22347: EMPTY
22348: LIST
22349: PPUSH
22350: CALL_OW 69
22354: PUSH
22355: LD_INT 2
22357: GREATER
22358: AND
22359: IFFALSE 22382
// weapon := [ us_radar , ar_radar ] [ nat ] ;
22361: LD_ADDR_VAR 0 18
22365: PUSH
22366: LD_INT 11
22368: PUSH
22369: LD_INT 30
22371: PUSH
22372: EMPTY
22373: LIST
22374: LIST
22375: PUSH
22376: LD_VAR 0 12
22380: ARRAY
22381: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
22382: LD_VAR 0 18
22386: NOT
22387: IFFALSE 22407
22389: PUSH
22390: LD_INT 40
22392: PPUSH
22393: LD_VAR 0 16
22397: PPUSH
22398: CALL_OW 321
22402: PUSH
22403: LD_INT 2
22405: EQUAL
22406: AND
22407: IFFALSE 22443
22409: PUSH
22410: LD_INT 7
22412: PUSH
22413: LD_VAR 0 5
22417: IN
22418: IFTRUE 22430
22420: PUSH
22421: LD_INT 28
22423: PUSH
22424: LD_VAR 0 5
22428: IN
22429: OR
22430: IFTRUE 22442
22432: PUSH
22433: LD_INT 45
22435: PUSH
22436: LD_VAR 0 5
22440: IN
22441: OR
22442: AND
22443: IFFALSE 22697
// begin hex := GetHexInfo ( x , y ) ;
22445: LD_ADDR_VAR 0 4
22449: PUSH
22450: LD_VAR 0 10
22454: PPUSH
22455: LD_VAR 0 11
22459: PPUSH
22460: CALL_OW 546
22464: ST_TO_ADDR
// if hex [ 1 ] then
22465: LD_VAR 0 4
22469: PUSH
22470: LD_INT 1
22472: ARRAY
22473: IFFALSE 22477
// exit ;
22475: GO 22884
// height := hex [ 2 ] ;
22477: LD_ADDR_VAR 0 15
22481: PUSH
22482: LD_VAR 0 4
22486: PUSH
22487: LD_INT 2
22489: ARRAY
22490: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
22491: LD_ADDR_VAR 0 14
22495: PUSH
22496: LD_INT 0
22498: PUSH
22499: LD_INT 2
22501: PUSH
22502: LD_INT 3
22504: PUSH
22505: LD_INT 5
22507: PUSH
22508: EMPTY
22509: LIST
22510: LIST
22511: LIST
22512: LIST
22513: ST_TO_ADDR
// for i in tmp do
22514: LD_ADDR_VAR 0 8
22518: PUSH
22519: LD_VAR 0 14
22523: PUSH
22524: FOR_IN
22525: IFFALSE 22695
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
22527: LD_ADDR_VAR 0 9
22531: PUSH
22532: LD_VAR 0 10
22536: PPUSH
22537: LD_VAR 0 8
22541: PPUSH
22542: LD_INT 5
22544: PPUSH
22545: CALL_OW 272
22549: PUSH
22550: LD_VAR 0 11
22554: PPUSH
22555: LD_VAR 0 8
22559: PPUSH
22560: LD_INT 5
22562: PPUSH
22563: CALL_OW 273
22567: PUSH
22568: EMPTY
22569: LIST
22570: LIST
22571: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
22572: LD_VAR 0 9
22576: PUSH
22577: LD_INT 1
22579: ARRAY
22580: PPUSH
22581: LD_VAR 0 9
22585: PUSH
22586: LD_INT 2
22588: ARRAY
22589: PPUSH
22590: CALL_OW 488
22594: IFFALSE 22693
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
22596: LD_ADDR_VAR 0 4
22600: PUSH
22601: LD_VAR 0 9
22605: PUSH
22606: LD_INT 1
22608: ARRAY
22609: PPUSH
22610: LD_VAR 0 9
22614: PUSH
22615: LD_INT 2
22617: ARRAY
22618: PPUSH
22619: CALL_OW 546
22623: ST_TO_ADDR
// if hex [ 1 ] then
22624: LD_VAR 0 4
22628: PUSH
22629: LD_INT 1
22631: ARRAY
22632: IFFALSE 22636
// continue ;
22634: GO 22524
// h := hex [ 2 ] ;
22636: LD_ADDR_VAR 0 13
22640: PUSH
22641: LD_VAR 0 4
22645: PUSH
22646: LD_INT 2
22648: ARRAY
22649: ST_TO_ADDR
// if h + 7 < height then
22650: LD_VAR 0 13
22654: PUSH
22655: LD_INT 7
22657: PLUS
22658: PUSH
22659: LD_VAR 0 15
22663: LESS
22664: IFFALSE 22693
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
22666: LD_ADDR_VAR 0 18
22670: PUSH
22671: LD_INT 7
22673: PUSH
22674: LD_INT 28
22676: PUSH
22677: LD_INT 45
22679: PUSH
22680: EMPTY
22681: LIST
22682: LIST
22683: LIST
22684: PUSH
22685: LD_VAR 0 12
22689: ARRAY
22690: ST_TO_ADDR
// break ;
22691: GO 22695
// end ; end ; end ;
22693: GO 22524
22695: POP
22696: POP
// end ; if not weapon then
22697: LD_VAR 0 18
22701: NOT
22702: IFFALSE 22762
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
22704: LD_ADDR_VAR 0 5
22708: PUSH
22709: LD_VAR 0 5
22713: PUSH
22714: LD_INT 11
22716: PUSH
22717: LD_INT 30
22719: PUSH
22720: LD_INT 49
22722: PUSH
22723: EMPTY
22724: LIST
22725: LIST
22726: LIST
22727: DIFF
22728: ST_TO_ADDR
// if not list then
22729: LD_VAR 0 5
22733: NOT
22734: IFFALSE 22738
// exit ;
22736: GO 22884
// weapon := list [ rand ( 1 , list ) ] ;
22738: LD_ADDR_VAR 0 18
22742: PUSH
22743: LD_VAR 0 5
22747: PUSH
22748: LD_INT 1
22750: PPUSH
22751: LD_VAR 0 5
22755: PPUSH
22756: CALL_OW 12
22760: ARRAY
22761: ST_TO_ADDR
// end ; if weapon then
22762: LD_VAR 0 18
22766: IFFALSE 22884
// begin tmp := CostOfWeapon ( weapon ) ;
22768: LD_ADDR_VAR 0 14
22772: PUSH
22773: LD_VAR 0 18
22777: PPUSH
22778: CALL_OW 451
22782: ST_TO_ADDR
// j := GetBase ( tower ) ;
22783: LD_ADDR_VAR 0 9
22787: PUSH
22788: LD_VAR 0 1
22792: PPUSH
22793: CALL_OW 274
22797: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
22798: LD_VAR 0 9
22802: PPUSH
22803: LD_INT 1
22805: PPUSH
22806: CALL_OW 275
22810: PUSH
22811: LD_VAR 0 14
22815: PUSH
22816: LD_INT 1
22818: ARRAY
22819: GREATEREQUAL
22820: IFFALSE 22846
22822: PUSH
22823: LD_VAR 0 9
22827: PPUSH
22828: LD_INT 2
22830: PPUSH
22831: CALL_OW 275
22835: PUSH
22836: LD_VAR 0 14
22840: PUSH
22841: LD_INT 2
22843: ARRAY
22844: GREATEREQUAL
22845: AND
22846: IFFALSE 22872
22848: PUSH
22849: LD_VAR 0 9
22853: PPUSH
22854: LD_INT 3
22856: PPUSH
22857: CALL_OW 275
22861: PUSH
22862: LD_VAR 0 14
22866: PUSH
22867: LD_INT 3
22869: ARRAY
22870: GREATEREQUAL
22871: AND
22872: IFFALSE 22884
// result := weapon ;
22874: LD_ADDR_VAR 0 3
22878: PUSH
22879: LD_VAR 0 18
22883: ST_TO_ADDR
// end ; end ;
22884: LD_VAR 0 3
22888: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
22889: LD_INT 0
22891: PPUSH
22892: PPUSH
// result := true ;
22893: LD_ADDR_VAR 0 3
22897: PUSH
22898: LD_INT 1
22900: ST_TO_ADDR
// if array1 = array2 then
22901: LD_VAR 0 1
22905: PUSH
22906: LD_VAR 0 2
22910: EQUAL
22911: IFFALSE 22971
// begin for i = 1 to array1 do
22913: LD_ADDR_VAR 0 4
22917: PUSH
22918: DOUBLE
22919: LD_INT 1
22921: DEC
22922: ST_TO_ADDR
22923: LD_VAR 0 1
22927: PUSH
22928: FOR_TO
22929: IFFALSE 22967
// if array1 [ i ] <> array2 [ i ] then
22931: LD_VAR 0 1
22935: PUSH
22936: LD_VAR 0 4
22940: ARRAY
22941: PUSH
22942: LD_VAR 0 2
22946: PUSH
22947: LD_VAR 0 4
22951: ARRAY
22952: NONEQUAL
22953: IFFALSE 22965
// begin result := false ;
22955: LD_ADDR_VAR 0 3
22959: PUSH
22960: LD_INT 0
22962: ST_TO_ADDR
// break ;
22963: GO 22967
// end ;
22965: GO 22928
22967: POP
22968: POP
// end else
22969: GO 22979
// result := false ;
22971: LD_ADDR_VAR 0 3
22975: PUSH
22976: LD_INT 0
22978: ST_TO_ADDR
// end ;
22979: LD_VAR 0 3
22983: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
22984: LD_INT 0
22986: PPUSH
22987: PPUSH
// if not array1 or not array2 then
22988: LD_VAR 0 1
22992: NOT
22993: IFTRUE 23002
22995: PUSH
22996: LD_VAR 0 2
23000: NOT
23001: OR
23002: IFFALSE 23006
// exit ;
23004: GO 23070
// result := true ;
23006: LD_ADDR_VAR 0 3
23010: PUSH
23011: LD_INT 1
23013: ST_TO_ADDR
// for i = 1 to array1 do
23014: LD_ADDR_VAR 0 4
23018: PUSH
23019: DOUBLE
23020: LD_INT 1
23022: DEC
23023: ST_TO_ADDR
23024: LD_VAR 0 1
23028: PUSH
23029: FOR_TO
23030: IFFALSE 23068
// if array1 [ i ] <> array2 [ i ] then
23032: LD_VAR 0 1
23036: PUSH
23037: LD_VAR 0 4
23041: ARRAY
23042: PUSH
23043: LD_VAR 0 2
23047: PUSH
23048: LD_VAR 0 4
23052: ARRAY
23053: NONEQUAL
23054: IFFALSE 23066
// begin result := false ;
23056: LD_ADDR_VAR 0 3
23060: PUSH
23061: LD_INT 0
23063: ST_TO_ADDR
// break ;
23064: GO 23068
// end ;
23066: GO 23029
23068: POP
23069: POP
// end ;
23070: LD_VAR 0 3
23074: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
23075: LD_INT 0
23077: PPUSH
23078: PPUSH
23079: PPUSH
// pom := GetBase ( fac ) ;
23080: LD_ADDR_VAR 0 5
23084: PUSH
23085: LD_VAR 0 1
23089: PPUSH
23090: CALL_OW 274
23094: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
23095: LD_ADDR_VAR 0 4
23099: PUSH
23100: LD_VAR 0 2
23104: PUSH
23105: LD_INT 1
23107: ARRAY
23108: PPUSH
23109: LD_VAR 0 2
23113: PUSH
23114: LD_INT 2
23116: ARRAY
23117: PPUSH
23118: LD_VAR 0 2
23122: PUSH
23123: LD_INT 3
23125: ARRAY
23126: PPUSH
23127: LD_VAR 0 2
23131: PUSH
23132: LD_INT 4
23134: ARRAY
23135: PPUSH
23136: CALL_OW 449
23140: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
23141: LD_ADDR_VAR 0 3
23145: PUSH
23146: LD_VAR 0 5
23150: PPUSH
23151: LD_INT 1
23153: PPUSH
23154: CALL_OW 275
23158: PUSH
23159: LD_VAR 0 4
23163: PUSH
23164: LD_INT 1
23166: ARRAY
23167: GREATEREQUAL
23168: IFFALSE 23194
23170: PUSH
23171: LD_VAR 0 5
23175: PPUSH
23176: LD_INT 2
23178: PPUSH
23179: CALL_OW 275
23183: PUSH
23184: LD_VAR 0 4
23188: PUSH
23189: LD_INT 2
23191: ARRAY
23192: GREATEREQUAL
23193: AND
23194: IFFALSE 23220
23196: PUSH
23197: LD_VAR 0 5
23201: PPUSH
23202: LD_INT 3
23204: PPUSH
23205: CALL_OW 275
23209: PUSH
23210: LD_VAR 0 4
23214: PUSH
23215: LD_INT 3
23217: ARRAY
23218: GREATEREQUAL
23219: AND
23220: ST_TO_ADDR
// end ;
23221: LD_VAR 0 3
23225: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
23226: LD_INT 0
23228: PPUSH
23229: PPUSH
23230: PPUSH
23231: PPUSH
// pom := GetBase ( building ) ;
23232: LD_ADDR_VAR 0 3
23236: PUSH
23237: LD_VAR 0 1
23241: PPUSH
23242: CALL_OW 274
23246: ST_TO_ADDR
// if not pom then
23247: LD_VAR 0 3
23251: NOT
23252: IFFALSE 23256
// exit ;
23254: GO 23430
// btype := GetBType ( building ) ;
23256: LD_ADDR_VAR 0 5
23260: PUSH
23261: LD_VAR 0 1
23265: PPUSH
23266: CALL_OW 266
23270: ST_TO_ADDR
// if btype = b_armoury then
23271: LD_VAR 0 5
23275: PUSH
23276: LD_INT 4
23278: EQUAL
23279: IFFALSE 23289
// btype := b_barracks ;
23281: LD_ADDR_VAR 0 5
23285: PUSH
23286: LD_INT 5
23288: ST_TO_ADDR
// if btype = b_depot then
23289: LD_VAR 0 5
23293: PUSH
23294: LD_INT 0
23296: EQUAL
23297: IFFALSE 23307
// btype := b_warehouse ;
23299: LD_ADDR_VAR 0 5
23303: PUSH
23304: LD_INT 1
23306: ST_TO_ADDR
// if btype = b_workshop then
23307: LD_VAR 0 5
23311: PUSH
23312: LD_INT 2
23314: EQUAL
23315: IFFALSE 23325
// btype := b_factory ;
23317: LD_ADDR_VAR 0 5
23321: PUSH
23322: LD_INT 3
23324: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
23325: LD_ADDR_VAR 0 4
23329: PUSH
23330: LD_VAR 0 5
23334: PPUSH
23335: LD_VAR 0 1
23339: PPUSH
23340: CALL_OW 248
23344: PPUSH
23345: CALL_OW 450
23349: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
23350: LD_ADDR_VAR 0 2
23354: PUSH
23355: LD_VAR 0 3
23359: PPUSH
23360: LD_INT 1
23362: PPUSH
23363: CALL_OW 275
23367: PUSH
23368: LD_VAR 0 4
23372: PUSH
23373: LD_INT 1
23375: ARRAY
23376: GREATEREQUAL
23377: IFFALSE 23403
23379: PUSH
23380: LD_VAR 0 3
23384: PPUSH
23385: LD_INT 2
23387: PPUSH
23388: CALL_OW 275
23392: PUSH
23393: LD_VAR 0 4
23397: PUSH
23398: LD_INT 2
23400: ARRAY
23401: GREATEREQUAL
23402: AND
23403: IFFALSE 23429
23405: PUSH
23406: LD_VAR 0 3
23410: PPUSH
23411: LD_INT 3
23413: PPUSH
23414: CALL_OW 275
23418: PUSH
23419: LD_VAR 0 4
23423: PUSH
23424: LD_INT 3
23426: ARRAY
23427: GREATEREQUAL
23428: AND
23429: ST_TO_ADDR
// end ;
23430: LD_VAR 0 2
23434: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
23435: LD_INT 0
23437: PPUSH
23438: PPUSH
23439: PPUSH
// pom := GetBase ( building ) ;
23440: LD_ADDR_VAR 0 4
23444: PUSH
23445: LD_VAR 0 1
23449: PPUSH
23450: CALL_OW 274
23454: ST_TO_ADDR
// if not pom then
23455: LD_VAR 0 4
23459: NOT
23460: IFFALSE 23464
// exit ;
23462: GO 23569
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
23464: LD_ADDR_VAR 0 5
23468: PUSH
23469: LD_VAR 0 2
23473: PPUSH
23474: LD_VAR 0 1
23478: PPUSH
23479: CALL_OW 248
23483: PPUSH
23484: CALL_OW 450
23488: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
23489: LD_ADDR_VAR 0 3
23493: PUSH
23494: LD_VAR 0 4
23498: PPUSH
23499: LD_INT 1
23501: PPUSH
23502: CALL_OW 275
23506: PUSH
23507: LD_VAR 0 5
23511: PUSH
23512: LD_INT 1
23514: ARRAY
23515: GREATEREQUAL
23516: IFFALSE 23542
23518: PUSH
23519: LD_VAR 0 4
23523: PPUSH
23524: LD_INT 2
23526: PPUSH
23527: CALL_OW 275
23531: PUSH
23532: LD_VAR 0 5
23536: PUSH
23537: LD_INT 2
23539: ARRAY
23540: GREATEREQUAL
23541: AND
23542: IFFALSE 23568
23544: PUSH
23545: LD_VAR 0 4
23549: PPUSH
23550: LD_INT 3
23552: PPUSH
23553: CALL_OW 275
23557: PUSH
23558: LD_VAR 0 5
23562: PUSH
23563: LD_INT 3
23565: ARRAY
23566: GREATEREQUAL
23567: AND
23568: ST_TO_ADDR
// end ;
23569: LD_VAR 0 3
23573: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
23574: LD_INT 0
23576: PPUSH
23577: PPUSH
23578: PPUSH
23579: PPUSH
23580: PPUSH
23581: PPUSH
23582: PPUSH
23583: PPUSH
23584: PPUSH
23585: PPUSH
23586: PPUSH
// result := false ;
23587: LD_ADDR_VAR 0 8
23591: PUSH
23592: LD_INT 0
23594: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
23595: LD_VAR 0 5
23599: NOT
23600: IFTRUE 23609
23602: PUSH
23603: LD_VAR 0 1
23607: NOT
23608: OR
23609: IFTRUE 23618
23611: PUSH
23612: LD_VAR 0 2
23616: NOT
23617: OR
23618: IFTRUE 23627
23620: PUSH
23621: LD_VAR 0 3
23625: NOT
23626: OR
23627: IFFALSE 23631
// exit ;
23629: GO 24457
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
23631: LD_ADDR_VAR 0 14
23635: PUSH
23636: LD_VAR 0 1
23640: PPUSH
23641: LD_VAR 0 2
23645: PPUSH
23646: LD_VAR 0 3
23650: PPUSH
23651: LD_VAR 0 4
23655: PPUSH
23656: LD_VAR 0 5
23660: PUSH
23661: LD_INT 1
23663: ARRAY
23664: PPUSH
23665: CALL_OW 248
23669: PPUSH
23670: LD_INT 0
23672: PPUSH
23673: CALL 25738 0 6
23677: ST_TO_ADDR
// if not hexes then
23678: LD_VAR 0 14
23682: NOT
23683: IFFALSE 23687
// exit ;
23685: GO 24457
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23687: LD_ADDR_VAR 0 17
23691: PUSH
23692: LD_VAR 0 5
23696: PPUSH
23697: LD_INT 22
23699: PUSH
23700: LD_VAR 0 13
23704: PPUSH
23705: CALL_OW 255
23709: PUSH
23710: EMPTY
23711: LIST
23712: LIST
23713: PUSH
23714: LD_INT 2
23716: PUSH
23717: LD_INT 30
23719: PUSH
23720: LD_INT 0
23722: PUSH
23723: EMPTY
23724: LIST
23725: LIST
23726: PUSH
23727: LD_INT 30
23729: PUSH
23730: LD_INT 1
23732: PUSH
23733: EMPTY
23734: LIST
23735: LIST
23736: PUSH
23737: EMPTY
23738: LIST
23739: LIST
23740: LIST
23741: PUSH
23742: EMPTY
23743: LIST
23744: LIST
23745: PPUSH
23746: CALL_OW 72
23750: ST_TO_ADDR
// for i = 1 to hexes do
23751: LD_ADDR_VAR 0 9
23755: PUSH
23756: DOUBLE
23757: LD_INT 1
23759: DEC
23760: ST_TO_ADDR
23761: LD_VAR 0 14
23765: PUSH
23766: FOR_TO
23767: IFFALSE 24455
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
23769: LD_ADDR_VAR 0 13
23773: PUSH
23774: LD_VAR 0 14
23778: PUSH
23779: LD_VAR 0 9
23783: ARRAY
23784: PUSH
23785: LD_INT 1
23787: ARRAY
23788: PPUSH
23789: LD_VAR 0 14
23793: PUSH
23794: LD_VAR 0 9
23798: ARRAY
23799: PUSH
23800: LD_INT 2
23802: ARRAY
23803: PPUSH
23804: CALL_OW 428
23808: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
23809: LD_VAR 0 14
23813: PUSH
23814: LD_VAR 0 9
23818: ARRAY
23819: PUSH
23820: LD_INT 1
23822: ARRAY
23823: PPUSH
23824: LD_VAR 0 14
23828: PUSH
23829: LD_VAR 0 9
23833: ARRAY
23834: PUSH
23835: LD_INT 2
23837: ARRAY
23838: PPUSH
23839: CALL_OW 351
23843: IFTRUE 23882
23845: PUSH
23846: LD_VAR 0 14
23850: PUSH
23851: LD_VAR 0 9
23855: ARRAY
23856: PUSH
23857: LD_INT 1
23859: ARRAY
23860: PPUSH
23861: LD_VAR 0 14
23865: PUSH
23866: LD_VAR 0 9
23870: ARRAY
23871: PUSH
23872: LD_INT 2
23874: ARRAY
23875: PPUSH
23876: CALL_OW 488
23880: NOT
23881: OR
23882: IFTRUE 23899
23884: PUSH
23885: LD_VAR 0 13
23889: PPUSH
23890: CALL_OW 247
23894: PUSH
23895: LD_INT 3
23897: EQUAL
23898: OR
23899: IFFALSE 23905
// exit ;
23901: POP
23902: POP
23903: GO 24457
// if not tmp then
23905: LD_VAR 0 13
23909: NOT
23910: IFFALSE 23914
// continue ;
23912: GO 23766
// result := true ;
23914: LD_ADDR_VAR 0 8
23918: PUSH
23919: LD_INT 1
23921: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
23922: LD_VAR 0 6
23926: IFFALSE 23943
23928: PUSH
23929: LD_VAR 0 13
23933: PPUSH
23934: CALL_OW 247
23938: PUSH
23939: LD_INT 2
23941: EQUAL
23942: AND
23943: IFFALSE 23960
23945: PUSH
23946: LD_VAR 0 13
23950: PPUSH
23951: CALL_OW 263
23955: PUSH
23956: LD_INT 1
23958: EQUAL
23959: AND
23960: IFFALSE 24124
// begin if IsDrivenBy ( tmp ) then
23962: LD_VAR 0 13
23966: PPUSH
23967: CALL_OW 311
23971: IFFALSE 23975
// continue ;
23973: GO 23766
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
23975: LD_VAR 0 6
23979: PPUSH
23980: LD_INT 3
23982: PUSH
23983: LD_INT 60
23985: PUSH
23986: EMPTY
23987: LIST
23988: PUSH
23989: EMPTY
23990: LIST
23991: LIST
23992: PUSH
23993: LD_INT 3
23995: PUSH
23996: LD_INT 55
23998: PUSH
23999: EMPTY
24000: LIST
24001: PUSH
24002: EMPTY
24003: LIST
24004: LIST
24005: PUSH
24006: EMPTY
24007: LIST
24008: LIST
24009: PPUSH
24010: CALL_OW 72
24014: IFFALSE 24122
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
24016: LD_ADDR_VAR 0 18
24020: PUSH
24021: LD_VAR 0 6
24025: PPUSH
24026: LD_INT 3
24028: PUSH
24029: LD_INT 60
24031: PUSH
24032: EMPTY
24033: LIST
24034: PUSH
24035: EMPTY
24036: LIST
24037: LIST
24038: PUSH
24039: LD_INT 3
24041: PUSH
24042: LD_INT 55
24044: PUSH
24045: EMPTY
24046: LIST
24047: PUSH
24048: EMPTY
24049: LIST
24050: LIST
24051: PUSH
24052: EMPTY
24053: LIST
24054: LIST
24055: PPUSH
24056: CALL_OW 72
24060: PUSH
24061: LD_INT 1
24063: ARRAY
24064: ST_TO_ADDR
// if IsInUnit ( driver ) then
24065: LD_VAR 0 18
24069: PPUSH
24070: CALL_OW 310
24074: IFFALSE 24085
// ComExit ( driver ) ;
24076: LD_VAR 0 18
24080: PPUSH
24081: CALL 49738 0 1
// AddComEnterUnit ( driver , tmp ) ;
24085: LD_VAR 0 18
24089: PPUSH
24090: LD_VAR 0 13
24094: PPUSH
24095: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
24099: LD_VAR 0 18
24103: PPUSH
24104: LD_VAR 0 7
24108: PPUSH
24109: CALL_OW 173
// AddComExitVehicle ( driver ) ;
24113: LD_VAR 0 18
24117: PPUSH
24118: CALL_OW 181
// end ; continue ;
24122: GO 23766
// end ; if not cleaners or not tmp in cleaners then
24124: LD_VAR 0 6
24128: NOT
24129: IFTRUE 24144
24131: PUSH
24132: LD_VAR 0 13
24136: PUSH
24137: LD_VAR 0 6
24141: IN
24142: NOT
24143: OR
24144: IFFALSE 24453
// begin if dep then
24146: LD_VAR 0 17
24150: IFFALSE 24286
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
24152: LD_ADDR_VAR 0 16
24156: PUSH
24157: LD_VAR 0 17
24161: PUSH
24162: LD_INT 1
24164: ARRAY
24165: PPUSH
24166: CALL_OW 250
24170: PPUSH
24171: LD_VAR 0 17
24175: PUSH
24176: LD_INT 1
24178: ARRAY
24179: PPUSH
24180: CALL_OW 254
24184: PPUSH
24185: LD_INT 5
24187: PPUSH
24188: CALL_OW 272
24192: PUSH
24193: LD_VAR 0 17
24197: PUSH
24198: LD_INT 1
24200: ARRAY
24201: PPUSH
24202: CALL_OW 251
24206: PPUSH
24207: LD_VAR 0 17
24211: PUSH
24212: LD_INT 1
24214: ARRAY
24215: PPUSH
24216: CALL_OW 254
24220: PPUSH
24221: LD_INT 5
24223: PPUSH
24224: CALL_OW 273
24228: PUSH
24229: EMPTY
24230: LIST
24231: LIST
24232: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
24233: LD_VAR 0 16
24237: PUSH
24238: LD_INT 1
24240: ARRAY
24241: PPUSH
24242: LD_VAR 0 16
24246: PUSH
24247: LD_INT 2
24249: ARRAY
24250: PPUSH
24251: CALL_OW 488
24255: IFFALSE 24286
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
24257: LD_VAR 0 13
24261: PPUSH
24262: LD_VAR 0 16
24266: PUSH
24267: LD_INT 1
24269: ARRAY
24270: PPUSH
24271: LD_VAR 0 16
24275: PUSH
24276: LD_INT 2
24278: ARRAY
24279: PPUSH
24280: CALL_OW 111
// continue ;
24284: GO 23766
// end ; end ; r := GetDir ( tmp ) ;
24286: LD_ADDR_VAR 0 15
24290: PUSH
24291: LD_VAR 0 13
24295: PPUSH
24296: CALL_OW 254
24300: ST_TO_ADDR
// if r = 5 then
24301: LD_VAR 0 15
24305: PUSH
24306: LD_INT 5
24308: EQUAL
24309: IFFALSE 24319
// r := 0 ;
24311: LD_ADDR_VAR 0 15
24315: PUSH
24316: LD_INT 0
24318: ST_TO_ADDR
// for j = r to 5 do
24319: LD_ADDR_VAR 0 10
24323: PUSH
24324: DOUBLE
24325: LD_VAR 0 15
24329: DEC
24330: ST_TO_ADDR
24331: LD_INT 5
24333: PUSH
24334: FOR_TO
24335: IFFALSE 24451
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
24337: LD_ADDR_VAR 0 11
24341: PUSH
24342: LD_VAR 0 13
24346: PPUSH
24347: CALL_OW 250
24351: PPUSH
24352: LD_VAR 0 10
24356: PPUSH
24357: LD_INT 2
24359: PPUSH
24360: CALL_OW 272
24364: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
24365: LD_ADDR_VAR 0 12
24369: PUSH
24370: LD_VAR 0 13
24374: PPUSH
24375: CALL_OW 251
24379: PPUSH
24380: LD_VAR 0 10
24384: PPUSH
24385: LD_INT 2
24387: PPUSH
24388: CALL_OW 273
24392: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
24393: LD_VAR 0 11
24397: PPUSH
24398: LD_VAR 0 12
24402: PPUSH
24403: CALL_OW 488
24407: IFFALSE 24426
24409: PUSH
24410: LD_VAR 0 11
24414: PPUSH
24415: LD_VAR 0 12
24419: PPUSH
24420: CALL_OW 428
24424: NOT
24425: AND
24426: IFFALSE 24449
// begin ComMoveXY ( tmp , _x , _y ) ;
24428: LD_VAR 0 13
24432: PPUSH
24433: LD_VAR 0 11
24437: PPUSH
24438: LD_VAR 0 12
24442: PPUSH
24443: CALL_OW 111
// break ;
24447: GO 24451
// end ; end ;
24449: GO 24334
24451: POP
24452: POP
// end ; end ;
24453: GO 23766
24455: POP
24456: POP
// end ;
24457: LD_VAR 0 8
24461: RET
// export function BuildingTechInvented ( side , btype ) ; begin
24462: LD_INT 0
24464: PPUSH
// result := true ;
24465: LD_ADDR_VAR 0 3
24469: PUSH
24470: LD_INT 1
24472: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
24473: LD_VAR 0 2
24477: PUSH
24478: LD_INT 24
24480: DOUBLE
24481: EQUAL
24482: IFTRUE 24492
24484: LD_INT 33
24486: DOUBLE
24487: EQUAL
24488: IFTRUE 24492
24490: GO 24517
24492: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
24493: LD_ADDR_VAR 0 3
24497: PUSH
24498: LD_INT 32
24500: PPUSH
24501: LD_VAR 0 1
24505: PPUSH
24506: CALL_OW 321
24510: PUSH
24511: LD_INT 2
24513: EQUAL
24514: ST_TO_ADDR
24515: GO 24833
24517: LD_INT 20
24519: DOUBLE
24520: EQUAL
24521: IFTRUE 24525
24523: GO 24550
24525: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
24526: LD_ADDR_VAR 0 3
24530: PUSH
24531: LD_INT 6
24533: PPUSH
24534: LD_VAR 0 1
24538: PPUSH
24539: CALL_OW 321
24543: PUSH
24544: LD_INT 2
24546: EQUAL
24547: ST_TO_ADDR
24548: GO 24833
24550: LD_INT 22
24552: DOUBLE
24553: EQUAL
24554: IFTRUE 24564
24556: LD_INT 36
24558: DOUBLE
24559: EQUAL
24560: IFTRUE 24564
24562: GO 24589
24564: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
24565: LD_ADDR_VAR 0 3
24569: PUSH
24570: LD_INT 15
24572: PPUSH
24573: LD_VAR 0 1
24577: PPUSH
24578: CALL_OW 321
24582: PUSH
24583: LD_INT 2
24585: EQUAL
24586: ST_TO_ADDR
24587: GO 24833
24589: LD_INT 30
24591: DOUBLE
24592: EQUAL
24593: IFTRUE 24597
24595: GO 24622
24597: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
24598: LD_ADDR_VAR 0 3
24602: PUSH
24603: LD_INT 20
24605: PPUSH
24606: LD_VAR 0 1
24610: PPUSH
24611: CALL_OW 321
24615: PUSH
24616: LD_INT 2
24618: EQUAL
24619: ST_TO_ADDR
24620: GO 24833
24622: LD_INT 28
24624: DOUBLE
24625: EQUAL
24626: IFTRUE 24636
24628: LD_INT 21
24630: DOUBLE
24631: EQUAL
24632: IFTRUE 24636
24634: GO 24661
24636: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
24637: LD_ADDR_VAR 0 3
24641: PUSH
24642: LD_INT 21
24644: PPUSH
24645: LD_VAR 0 1
24649: PPUSH
24650: CALL_OW 321
24654: PUSH
24655: LD_INT 2
24657: EQUAL
24658: ST_TO_ADDR
24659: GO 24833
24661: LD_INT 16
24663: DOUBLE
24664: EQUAL
24665: IFTRUE 24669
24667: GO 24694
24669: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
24670: LD_ADDR_VAR 0 3
24674: PUSH
24675: LD_INT 84
24677: PPUSH
24678: LD_VAR 0 1
24682: PPUSH
24683: CALL_OW 321
24687: PUSH
24688: LD_INT 2
24690: EQUAL
24691: ST_TO_ADDR
24692: GO 24833
24694: LD_INT 19
24696: DOUBLE
24697: EQUAL
24698: IFTRUE 24708
24700: LD_INT 23
24702: DOUBLE
24703: EQUAL
24704: IFTRUE 24708
24706: GO 24733
24708: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
24709: LD_ADDR_VAR 0 3
24713: PUSH
24714: LD_INT 83
24716: PPUSH
24717: LD_VAR 0 1
24721: PPUSH
24722: CALL_OW 321
24726: PUSH
24727: LD_INT 2
24729: EQUAL
24730: ST_TO_ADDR
24731: GO 24833
24733: LD_INT 17
24735: DOUBLE
24736: EQUAL
24737: IFTRUE 24741
24739: GO 24766
24741: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
24742: LD_ADDR_VAR 0 3
24746: PUSH
24747: LD_INT 39
24749: PPUSH
24750: LD_VAR 0 1
24754: PPUSH
24755: CALL_OW 321
24759: PUSH
24760: LD_INT 2
24762: EQUAL
24763: ST_TO_ADDR
24764: GO 24833
24766: LD_INT 18
24768: DOUBLE
24769: EQUAL
24770: IFTRUE 24774
24772: GO 24799
24774: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
24775: LD_ADDR_VAR 0 3
24779: PUSH
24780: LD_INT 40
24782: PPUSH
24783: LD_VAR 0 1
24787: PPUSH
24788: CALL_OW 321
24792: PUSH
24793: LD_INT 2
24795: EQUAL
24796: ST_TO_ADDR
24797: GO 24833
24799: LD_INT 27
24801: DOUBLE
24802: EQUAL
24803: IFTRUE 24807
24805: GO 24832
24807: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
24808: LD_ADDR_VAR 0 3
24812: PUSH
24813: LD_INT 35
24815: PPUSH
24816: LD_VAR 0 1
24820: PPUSH
24821: CALL_OW 321
24825: PUSH
24826: LD_INT 2
24828: EQUAL
24829: ST_TO_ADDR
24830: GO 24833
24832: POP
// end ;
24833: LD_VAR 0 3
24837: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
24838: LD_INT 0
24840: PPUSH
24841: PPUSH
24842: PPUSH
24843: PPUSH
24844: PPUSH
24845: PPUSH
24846: PPUSH
24847: PPUSH
24848: PPUSH
24849: PPUSH
24850: PPUSH
// result := false ;
24851: LD_ADDR_VAR 0 6
24855: PUSH
24856: LD_INT 0
24858: ST_TO_ADDR
// if btype = b_depot then
24859: LD_VAR 0 2
24863: PUSH
24864: LD_INT 0
24866: EQUAL
24867: IFFALSE 24879
// begin result := true ;
24869: LD_ADDR_VAR 0 6
24873: PUSH
24874: LD_INT 1
24876: ST_TO_ADDR
// exit ;
24877: GO 25733
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
24879: LD_VAR 0 1
24883: NOT
24884: IFTRUE 24909
24886: PUSH
24887: LD_VAR 0 1
24891: PPUSH
24892: CALL_OW 266
24896: PUSH
24897: LD_INT 0
24899: PUSH
24900: LD_INT 1
24902: PUSH
24903: EMPTY
24904: LIST
24905: LIST
24906: IN
24907: NOT
24908: OR
24909: IFTRUE 24918
24911: PUSH
24912: LD_VAR 0 2
24916: NOT
24917: OR
24918: IFTRUE 24954
24920: PUSH
24921: LD_VAR 0 5
24925: PUSH
24926: LD_INT 0
24928: PUSH
24929: LD_INT 1
24931: PUSH
24932: LD_INT 2
24934: PUSH
24935: LD_INT 3
24937: PUSH
24938: LD_INT 4
24940: PUSH
24941: LD_INT 5
24943: PUSH
24944: EMPTY
24945: LIST
24946: LIST
24947: LIST
24948: LIST
24949: LIST
24950: LIST
24951: IN
24952: NOT
24953: OR
24954: IFTRUE 24973
24956: PUSH
24957: LD_VAR 0 3
24961: PPUSH
24962: LD_VAR 0 4
24966: PPUSH
24967: CALL_OW 488
24971: NOT
24972: OR
24973: IFFALSE 24977
// exit ;
24975: GO 25733
// side := GetSide ( depot ) ;
24977: LD_ADDR_VAR 0 9
24981: PUSH
24982: LD_VAR 0 1
24986: PPUSH
24987: CALL_OW 255
24991: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
24992: LD_VAR 0 9
24996: PPUSH
24997: LD_VAR 0 2
25001: PPUSH
25002: CALL 24462 0 2
25006: NOT
25007: IFFALSE 25011
// exit ;
25009: GO 25733
// pom := GetBase ( depot ) ;
25011: LD_ADDR_VAR 0 10
25015: PUSH
25016: LD_VAR 0 1
25020: PPUSH
25021: CALL_OW 274
25025: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
25026: LD_ADDR_VAR 0 11
25030: PUSH
25031: LD_VAR 0 2
25035: PPUSH
25036: LD_VAR 0 1
25040: PPUSH
25041: CALL_OW 248
25045: PPUSH
25046: CALL_OW 450
25050: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
25051: LD_VAR 0 10
25055: PPUSH
25056: LD_INT 1
25058: PPUSH
25059: CALL_OW 275
25063: PUSH
25064: LD_VAR 0 11
25068: PUSH
25069: LD_INT 1
25071: ARRAY
25072: GREATEREQUAL
25073: IFFALSE 25099
25075: PUSH
25076: LD_VAR 0 10
25080: PPUSH
25081: LD_INT 2
25083: PPUSH
25084: CALL_OW 275
25088: PUSH
25089: LD_VAR 0 11
25093: PUSH
25094: LD_INT 2
25096: ARRAY
25097: GREATEREQUAL
25098: AND
25099: IFFALSE 25125
25101: PUSH
25102: LD_VAR 0 10
25106: PPUSH
25107: LD_INT 3
25109: PPUSH
25110: CALL_OW 275
25114: PUSH
25115: LD_VAR 0 11
25119: PUSH
25120: LD_INT 3
25122: ARRAY
25123: GREATEREQUAL
25124: AND
25125: NOT
25126: IFFALSE 25130
// exit ;
25128: GO 25733
// if GetBType ( depot ) = b_depot then
25130: LD_VAR 0 1
25134: PPUSH
25135: CALL_OW 266
25139: PUSH
25140: LD_INT 0
25142: EQUAL
25143: IFFALSE 25155
// dist := 28 else
25145: LD_ADDR_VAR 0 14
25149: PUSH
25150: LD_INT 28
25152: ST_TO_ADDR
25153: GO 25163
// dist := 36 ;
25155: LD_ADDR_VAR 0 14
25159: PUSH
25160: LD_INT 36
25162: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
25163: LD_VAR 0 1
25167: PPUSH
25168: LD_VAR 0 3
25172: PPUSH
25173: LD_VAR 0 4
25177: PPUSH
25178: CALL_OW 297
25182: PUSH
25183: LD_VAR 0 14
25187: GREATER
25188: IFFALSE 25192
// exit ;
25190: GO 25733
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
25192: LD_ADDR_VAR 0 12
25196: PUSH
25197: LD_VAR 0 2
25201: PPUSH
25202: LD_VAR 0 3
25206: PPUSH
25207: LD_VAR 0 4
25211: PPUSH
25212: LD_VAR 0 5
25216: PPUSH
25217: LD_VAR 0 1
25221: PPUSH
25222: CALL_OW 248
25226: PPUSH
25227: LD_INT 0
25229: PPUSH
25230: CALL 25738 0 6
25234: ST_TO_ADDR
// if not hexes then
25235: LD_VAR 0 12
25239: NOT
25240: IFFALSE 25244
// exit ;
25242: GO 25733
// hex := GetHexInfo ( x , y ) ;
25244: LD_ADDR_VAR 0 15
25248: PUSH
25249: LD_VAR 0 3
25253: PPUSH
25254: LD_VAR 0 4
25258: PPUSH
25259: CALL_OW 546
25263: ST_TO_ADDR
// if hex [ 1 ] then
25264: LD_VAR 0 15
25268: PUSH
25269: LD_INT 1
25271: ARRAY
25272: IFFALSE 25276
// exit ;
25274: GO 25733
// height := hex [ 2 ] ;
25276: LD_ADDR_VAR 0 13
25280: PUSH
25281: LD_VAR 0 15
25285: PUSH
25286: LD_INT 2
25288: ARRAY
25289: ST_TO_ADDR
// for i = 1 to hexes do
25290: LD_ADDR_VAR 0 7
25294: PUSH
25295: DOUBLE
25296: LD_INT 1
25298: DEC
25299: ST_TO_ADDR
25300: LD_VAR 0 12
25304: PUSH
25305: FOR_TO
25306: IFFALSE 25650
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
25308: LD_VAR 0 12
25312: PUSH
25313: LD_VAR 0 7
25317: ARRAY
25318: PUSH
25319: LD_INT 1
25321: ARRAY
25322: PPUSH
25323: LD_VAR 0 12
25327: PUSH
25328: LD_VAR 0 7
25332: ARRAY
25333: PUSH
25334: LD_INT 2
25336: ARRAY
25337: PPUSH
25338: CALL_OW 488
25342: NOT
25343: IFTRUE 25385
25345: PUSH
25346: LD_VAR 0 12
25350: PUSH
25351: LD_VAR 0 7
25355: ARRAY
25356: PUSH
25357: LD_INT 1
25359: ARRAY
25360: PPUSH
25361: LD_VAR 0 12
25365: PUSH
25366: LD_VAR 0 7
25370: ARRAY
25371: PUSH
25372: LD_INT 2
25374: ARRAY
25375: PPUSH
25376: CALL_OW 428
25380: PUSH
25381: LD_INT 0
25383: GREATER
25384: OR
25385: IFTRUE 25423
25387: PUSH
25388: LD_VAR 0 12
25392: PUSH
25393: LD_VAR 0 7
25397: ARRAY
25398: PUSH
25399: LD_INT 1
25401: ARRAY
25402: PPUSH
25403: LD_VAR 0 12
25407: PUSH
25408: LD_VAR 0 7
25412: ARRAY
25413: PUSH
25414: LD_INT 2
25416: ARRAY
25417: PPUSH
25418: CALL_OW 351
25422: OR
25423: IFFALSE 25429
// exit ;
25425: POP
25426: POP
25427: GO 25733
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
25429: LD_ADDR_VAR 0 8
25433: PUSH
25434: LD_VAR 0 12
25438: PUSH
25439: LD_VAR 0 7
25443: ARRAY
25444: PUSH
25445: LD_INT 1
25447: ARRAY
25448: PPUSH
25449: LD_VAR 0 12
25453: PUSH
25454: LD_VAR 0 7
25458: ARRAY
25459: PUSH
25460: LD_INT 2
25462: ARRAY
25463: PPUSH
25464: CALL_OW 546
25468: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
25469: LD_VAR 0 8
25473: PUSH
25474: LD_INT 1
25476: ARRAY
25477: IFTRUE 25499
25479: PUSH
25480: LD_VAR 0 8
25484: PUSH
25485: LD_INT 2
25487: ARRAY
25488: PUSH
25489: LD_VAR 0 13
25493: PUSH
25494: LD_INT 2
25496: PLUS
25497: GREATER
25498: OR
25499: IFTRUE 25521
25501: PUSH
25502: LD_VAR 0 8
25506: PUSH
25507: LD_INT 2
25509: ARRAY
25510: PUSH
25511: LD_VAR 0 13
25515: PUSH
25516: LD_INT 2
25518: MINUS
25519: LESS
25520: OR
25521: IFTRUE 25589
25523: PUSH
25524: LD_VAR 0 8
25528: PUSH
25529: LD_INT 3
25531: ARRAY
25532: PUSH
25533: LD_INT 0
25535: PUSH
25536: LD_INT 8
25538: PUSH
25539: LD_INT 9
25541: PUSH
25542: LD_INT 10
25544: PUSH
25545: LD_INT 11
25547: PUSH
25548: LD_INT 12
25550: PUSH
25551: LD_INT 13
25553: PUSH
25554: LD_INT 16
25556: PUSH
25557: LD_INT 17
25559: PUSH
25560: LD_INT 18
25562: PUSH
25563: LD_INT 19
25565: PUSH
25566: LD_INT 20
25568: PUSH
25569: LD_INT 21
25571: PUSH
25572: EMPTY
25573: LIST
25574: LIST
25575: LIST
25576: LIST
25577: LIST
25578: LIST
25579: LIST
25580: LIST
25581: LIST
25582: LIST
25583: LIST
25584: LIST
25585: LIST
25586: IN
25587: NOT
25588: OR
25589: IFTRUE 25602
25591: PUSH
25592: LD_VAR 0 8
25596: PUSH
25597: LD_INT 5
25599: ARRAY
25600: NOT
25601: OR
25602: IFTRUE 25642
25604: PUSH
25605: LD_VAR 0 8
25609: PUSH
25610: LD_INT 6
25612: ARRAY
25613: PUSH
25614: LD_INT 1
25616: PUSH
25617: LD_INT 2
25619: PUSH
25620: LD_INT 7
25622: PUSH
25623: LD_INT 9
25625: PUSH
25626: LD_INT 10
25628: PUSH
25629: LD_INT 11
25631: PUSH
25632: EMPTY
25633: LIST
25634: LIST
25635: LIST
25636: LIST
25637: LIST
25638: LIST
25639: IN
25640: NOT
25641: OR
25642: IFFALSE 25648
// exit ;
25644: POP
25645: POP
25646: GO 25733
// end ;
25648: GO 25305
25650: POP
25651: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
25652: LD_VAR 0 9
25656: PPUSH
25657: LD_VAR 0 3
25661: PPUSH
25662: LD_VAR 0 4
25666: PPUSH
25667: LD_INT 20
25669: PPUSH
25670: CALL 17552 0 4
25674: PUSH
25675: LD_INT 4
25677: ARRAY
25678: IFFALSE 25682
// exit ;
25680: GO 25733
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
25682: LD_VAR 0 2
25686: PUSH
25687: LD_INT 29
25689: PUSH
25690: LD_INT 30
25692: PUSH
25693: EMPTY
25694: LIST
25695: LIST
25696: IN
25697: IFFALSE 25721
25699: PUSH
25700: LD_VAR 0 3
25704: PPUSH
25705: LD_VAR 0 4
25709: PPUSH
25710: LD_VAR 0 9
25714: PPUSH
25715: CALL_OW 440
25719: NOT
25720: AND
25721: IFFALSE 25725
// exit ;
25723: GO 25733
// result := true ;
25725: LD_ADDR_VAR 0 6
25729: PUSH
25730: LD_INT 1
25732: ST_TO_ADDR
// end ;
25733: LD_VAR 0 6
25737: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
25738: LD_INT 0
25740: PPUSH
25741: PPUSH
25742: PPUSH
25743: PPUSH
25744: PPUSH
25745: PPUSH
25746: PPUSH
25747: PPUSH
25748: PPUSH
25749: PPUSH
25750: PPUSH
25751: PPUSH
25752: PPUSH
25753: PPUSH
25754: PPUSH
25755: PPUSH
25756: PPUSH
25757: PPUSH
25758: PPUSH
25759: PPUSH
25760: PPUSH
25761: PPUSH
25762: PPUSH
25763: PPUSH
25764: PPUSH
25765: PPUSH
25766: PPUSH
25767: PPUSH
25768: PPUSH
25769: PPUSH
25770: PPUSH
25771: PPUSH
25772: PPUSH
25773: PPUSH
25774: PPUSH
25775: PPUSH
25776: PPUSH
25777: PPUSH
25778: PPUSH
25779: PPUSH
25780: PPUSH
25781: PPUSH
25782: PPUSH
25783: PPUSH
25784: PPUSH
25785: PPUSH
25786: PPUSH
25787: PPUSH
25788: PPUSH
25789: PPUSH
25790: PPUSH
25791: PPUSH
25792: PPUSH
25793: PPUSH
25794: PPUSH
25795: PPUSH
25796: PPUSH
25797: PPUSH
// result = [ ] ;
25798: LD_ADDR_VAR 0 7
25802: PUSH
25803: EMPTY
25804: ST_TO_ADDR
// temp_list = [ ] ;
25805: LD_ADDR_VAR 0 9
25809: PUSH
25810: EMPTY
25811: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
25812: LD_VAR 0 4
25816: PUSH
25817: LD_INT 0
25819: PUSH
25820: LD_INT 1
25822: PUSH
25823: LD_INT 2
25825: PUSH
25826: LD_INT 3
25828: PUSH
25829: LD_INT 4
25831: PUSH
25832: LD_INT 5
25834: PUSH
25835: EMPTY
25836: LIST
25837: LIST
25838: LIST
25839: LIST
25840: LIST
25841: LIST
25842: IN
25843: NOT
25844: IFTRUE 25887
25846: PUSH
25847: LD_VAR 0 1
25851: PUSH
25852: LD_INT 0
25854: PUSH
25855: LD_INT 1
25857: PUSH
25858: EMPTY
25859: LIST
25860: LIST
25861: IN
25862: IFFALSE 25886
25864: PUSH
25865: LD_VAR 0 5
25869: PUSH
25870: LD_INT 1
25872: PUSH
25873: LD_INT 2
25875: PUSH
25876: LD_INT 3
25878: PUSH
25879: EMPTY
25880: LIST
25881: LIST
25882: LIST
25883: IN
25884: NOT
25885: AND
25886: OR
25887: IFFALSE 25891
// exit ;
25889: GO 44290
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
25891: LD_VAR 0 1
25895: PUSH
25896: LD_INT 6
25898: PUSH
25899: LD_INT 7
25901: PUSH
25902: LD_INT 8
25904: PUSH
25905: LD_INT 13
25907: PUSH
25908: LD_INT 12
25910: PUSH
25911: LD_INT 15
25913: PUSH
25914: LD_INT 11
25916: PUSH
25917: LD_INT 14
25919: PUSH
25920: LD_INT 10
25922: PUSH
25923: EMPTY
25924: LIST
25925: LIST
25926: LIST
25927: LIST
25928: LIST
25929: LIST
25930: LIST
25931: LIST
25932: LIST
25933: IN
25934: IFFALSE 25944
// btype = b_lab ;
25936: LD_ADDR_VAR 0 1
25940: PUSH
25941: LD_INT 6
25943: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
25944: LD_VAR 0 6
25948: PUSH
25949: LD_INT 0
25951: PUSH
25952: LD_INT 1
25954: PUSH
25955: LD_INT 2
25957: PUSH
25958: EMPTY
25959: LIST
25960: LIST
25961: LIST
25962: IN
25963: NOT
25964: IFTRUE 26032
25966: PUSH
25967: LD_VAR 0 1
25971: PUSH
25972: LD_INT 0
25974: PUSH
25975: LD_INT 1
25977: PUSH
25978: LD_INT 2
25980: PUSH
25981: LD_INT 3
25983: PUSH
25984: LD_INT 6
25986: PUSH
25987: LD_INT 36
25989: PUSH
25990: LD_INT 4
25992: PUSH
25993: LD_INT 5
25995: PUSH
25996: LD_INT 31
25998: PUSH
25999: LD_INT 32
26001: PUSH
26002: LD_INT 33
26004: PUSH
26005: EMPTY
26006: LIST
26007: LIST
26008: LIST
26009: LIST
26010: LIST
26011: LIST
26012: LIST
26013: LIST
26014: LIST
26015: LIST
26016: LIST
26017: IN
26018: NOT
26019: IFFALSE 26031
26021: PUSH
26022: LD_VAR 0 6
26026: PUSH
26027: LD_INT 1
26029: EQUAL
26030: AND
26031: OR
26032: IFTRUE 26064
26034: PUSH
26035: LD_VAR 0 1
26039: PUSH
26040: LD_INT 2
26042: PUSH
26043: LD_INT 3
26045: PUSH
26046: EMPTY
26047: LIST
26048: LIST
26049: IN
26050: NOT
26051: IFFALSE 26063
26053: PUSH
26054: LD_VAR 0 6
26058: PUSH
26059: LD_INT 2
26061: EQUAL
26062: AND
26063: OR
26064: IFFALSE 26074
// mode = 0 ;
26066: LD_ADDR_VAR 0 6
26070: PUSH
26071: LD_INT 0
26073: ST_TO_ADDR
// case mode of 0 :
26074: LD_VAR 0 6
26078: PUSH
26079: LD_INT 0
26081: DOUBLE
26082: EQUAL
26083: IFTRUE 26087
26085: GO 37540
26087: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
26088: LD_ADDR_VAR 0 11
26092: PUSH
26093: LD_INT 0
26095: PUSH
26096: LD_INT 0
26098: PUSH
26099: EMPTY
26100: LIST
26101: LIST
26102: PUSH
26103: LD_INT 0
26105: PUSH
26106: LD_INT 1
26108: NEG
26109: PUSH
26110: EMPTY
26111: LIST
26112: LIST
26113: PUSH
26114: LD_INT 1
26116: PUSH
26117: LD_INT 0
26119: PUSH
26120: EMPTY
26121: LIST
26122: LIST
26123: PUSH
26124: LD_INT 1
26126: PUSH
26127: LD_INT 1
26129: PUSH
26130: EMPTY
26131: LIST
26132: LIST
26133: PUSH
26134: LD_INT 0
26136: PUSH
26137: LD_INT 1
26139: PUSH
26140: EMPTY
26141: LIST
26142: LIST
26143: PUSH
26144: LD_INT 1
26146: NEG
26147: PUSH
26148: LD_INT 0
26150: PUSH
26151: EMPTY
26152: LIST
26153: LIST
26154: PUSH
26155: LD_INT 1
26157: NEG
26158: PUSH
26159: LD_INT 1
26161: NEG
26162: PUSH
26163: EMPTY
26164: LIST
26165: LIST
26166: PUSH
26167: LD_INT 1
26169: NEG
26170: PUSH
26171: LD_INT 2
26173: NEG
26174: PUSH
26175: EMPTY
26176: LIST
26177: LIST
26178: PUSH
26179: LD_INT 0
26181: PUSH
26182: LD_INT 2
26184: NEG
26185: PUSH
26186: EMPTY
26187: LIST
26188: LIST
26189: PUSH
26190: LD_INT 1
26192: PUSH
26193: LD_INT 1
26195: NEG
26196: PUSH
26197: EMPTY
26198: LIST
26199: LIST
26200: PUSH
26201: LD_INT 1
26203: PUSH
26204: LD_INT 2
26206: PUSH
26207: EMPTY
26208: LIST
26209: LIST
26210: PUSH
26211: LD_INT 0
26213: PUSH
26214: LD_INT 2
26216: PUSH
26217: EMPTY
26218: LIST
26219: LIST
26220: PUSH
26221: LD_INT 1
26223: NEG
26224: PUSH
26225: LD_INT 1
26227: PUSH
26228: EMPTY
26229: LIST
26230: LIST
26231: PUSH
26232: LD_INT 1
26234: PUSH
26235: LD_INT 3
26237: PUSH
26238: EMPTY
26239: LIST
26240: LIST
26241: PUSH
26242: LD_INT 0
26244: PUSH
26245: LD_INT 3
26247: PUSH
26248: EMPTY
26249: LIST
26250: LIST
26251: PUSH
26252: LD_INT 1
26254: NEG
26255: PUSH
26256: LD_INT 2
26258: PUSH
26259: EMPTY
26260: LIST
26261: LIST
26262: PUSH
26263: EMPTY
26264: LIST
26265: LIST
26266: LIST
26267: LIST
26268: LIST
26269: LIST
26270: LIST
26271: LIST
26272: LIST
26273: LIST
26274: LIST
26275: LIST
26276: LIST
26277: LIST
26278: LIST
26279: LIST
26280: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26281: LD_ADDR_VAR 0 12
26285: PUSH
26286: LD_INT 0
26288: PUSH
26289: LD_INT 0
26291: PUSH
26292: EMPTY
26293: LIST
26294: LIST
26295: PUSH
26296: LD_INT 0
26298: PUSH
26299: LD_INT 1
26301: NEG
26302: PUSH
26303: EMPTY
26304: LIST
26305: LIST
26306: PUSH
26307: LD_INT 1
26309: PUSH
26310: LD_INT 0
26312: PUSH
26313: EMPTY
26314: LIST
26315: LIST
26316: PUSH
26317: LD_INT 1
26319: PUSH
26320: LD_INT 1
26322: PUSH
26323: EMPTY
26324: LIST
26325: LIST
26326: PUSH
26327: LD_INT 0
26329: PUSH
26330: LD_INT 1
26332: PUSH
26333: EMPTY
26334: LIST
26335: LIST
26336: PUSH
26337: LD_INT 1
26339: NEG
26340: PUSH
26341: LD_INT 0
26343: PUSH
26344: EMPTY
26345: LIST
26346: LIST
26347: PUSH
26348: LD_INT 1
26350: NEG
26351: PUSH
26352: LD_INT 1
26354: NEG
26355: PUSH
26356: EMPTY
26357: LIST
26358: LIST
26359: PUSH
26360: LD_INT 1
26362: PUSH
26363: LD_INT 1
26365: NEG
26366: PUSH
26367: EMPTY
26368: LIST
26369: LIST
26370: PUSH
26371: LD_INT 2
26373: PUSH
26374: LD_INT 0
26376: PUSH
26377: EMPTY
26378: LIST
26379: LIST
26380: PUSH
26381: LD_INT 2
26383: PUSH
26384: LD_INT 1
26386: PUSH
26387: EMPTY
26388: LIST
26389: LIST
26390: PUSH
26391: LD_INT 1
26393: NEG
26394: PUSH
26395: LD_INT 1
26397: PUSH
26398: EMPTY
26399: LIST
26400: LIST
26401: PUSH
26402: LD_INT 2
26404: NEG
26405: PUSH
26406: LD_INT 0
26408: PUSH
26409: EMPTY
26410: LIST
26411: LIST
26412: PUSH
26413: LD_INT 2
26415: NEG
26416: PUSH
26417: LD_INT 1
26419: NEG
26420: PUSH
26421: EMPTY
26422: LIST
26423: LIST
26424: PUSH
26425: LD_INT 2
26427: NEG
26428: PUSH
26429: LD_INT 1
26431: PUSH
26432: EMPTY
26433: LIST
26434: LIST
26435: PUSH
26436: LD_INT 3
26438: NEG
26439: PUSH
26440: LD_INT 0
26442: PUSH
26443: EMPTY
26444: LIST
26445: LIST
26446: PUSH
26447: LD_INT 3
26449: NEG
26450: PUSH
26451: LD_INT 1
26453: NEG
26454: PUSH
26455: EMPTY
26456: LIST
26457: LIST
26458: PUSH
26459: EMPTY
26460: LIST
26461: LIST
26462: LIST
26463: LIST
26464: LIST
26465: LIST
26466: LIST
26467: LIST
26468: LIST
26469: LIST
26470: LIST
26471: LIST
26472: LIST
26473: LIST
26474: LIST
26475: LIST
26476: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26477: LD_ADDR_VAR 0 13
26481: PUSH
26482: LD_INT 0
26484: PUSH
26485: LD_INT 0
26487: PUSH
26488: EMPTY
26489: LIST
26490: LIST
26491: PUSH
26492: LD_INT 0
26494: PUSH
26495: LD_INT 1
26497: NEG
26498: PUSH
26499: EMPTY
26500: LIST
26501: LIST
26502: PUSH
26503: LD_INT 1
26505: PUSH
26506: LD_INT 0
26508: PUSH
26509: EMPTY
26510: LIST
26511: LIST
26512: PUSH
26513: LD_INT 1
26515: PUSH
26516: LD_INT 1
26518: PUSH
26519: EMPTY
26520: LIST
26521: LIST
26522: PUSH
26523: LD_INT 0
26525: PUSH
26526: LD_INT 1
26528: PUSH
26529: EMPTY
26530: LIST
26531: LIST
26532: PUSH
26533: LD_INT 1
26535: NEG
26536: PUSH
26537: LD_INT 0
26539: PUSH
26540: EMPTY
26541: LIST
26542: LIST
26543: PUSH
26544: LD_INT 1
26546: NEG
26547: PUSH
26548: LD_INT 1
26550: NEG
26551: PUSH
26552: EMPTY
26553: LIST
26554: LIST
26555: PUSH
26556: LD_INT 1
26558: NEG
26559: PUSH
26560: LD_INT 2
26562: NEG
26563: PUSH
26564: EMPTY
26565: LIST
26566: LIST
26567: PUSH
26568: LD_INT 2
26570: PUSH
26571: LD_INT 1
26573: PUSH
26574: EMPTY
26575: LIST
26576: LIST
26577: PUSH
26578: LD_INT 2
26580: PUSH
26581: LD_INT 2
26583: PUSH
26584: EMPTY
26585: LIST
26586: LIST
26587: PUSH
26588: LD_INT 1
26590: PUSH
26591: LD_INT 2
26593: PUSH
26594: EMPTY
26595: LIST
26596: LIST
26597: PUSH
26598: LD_INT 2
26600: NEG
26601: PUSH
26602: LD_INT 1
26604: NEG
26605: PUSH
26606: EMPTY
26607: LIST
26608: LIST
26609: PUSH
26610: LD_INT 2
26612: NEG
26613: PUSH
26614: LD_INT 2
26616: NEG
26617: PUSH
26618: EMPTY
26619: LIST
26620: LIST
26621: PUSH
26622: LD_INT 2
26624: NEG
26625: PUSH
26626: LD_INT 3
26628: NEG
26629: PUSH
26630: EMPTY
26631: LIST
26632: LIST
26633: PUSH
26634: LD_INT 3
26636: NEG
26637: PUSH
26638: LD_INT 2
26640: NEG
26641: PUSH
26642: EMPTY
26643: LIST
26644: LIST
26645: PUSH
26646: LD_INT 3
26648: NEG
26649: PUSH
26650: LD_INT 3
26652: NEG
26653: PUSH
26654: EMPTY
26655: LIST
26656: LIST
26657: PUSH
26658: EMPTY
26659: LIST
26660: LIST
26661: LIST
26662: LIST
26663: LIST
26664: LIST
26665: LIST
26666: LIST
26667: LIST
26668: LIST
26669: LIST
26670: LIST
26671: LIST
26672: LIST
26673: LIST
26674: LIST
26675: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
26676: LD_ADDR_VAR 0 14
26680: PUSH
26681: LD_INT 0
26683: PUSH
26684: LD_INT 0
26686: PUSH
26687: EMPTY
26688: LIST
26689: LIST
26690: PUSH
26691: LD_INT 0
26693: PUSH
26694: LD_INT 1
26696: NEG
26697: PUSH
26698: EMPTY
26699: LIST
26700: LIST
26701: PUSH
26702: LD_INT 1
26704: PUSH
26705: LD_INT 0
26707: PUSH
26708: EMPTY
26709: LIST
26710: LIST
26711: PUSH
26712: LD_INT 1
26714: PUSH
26715: LD_INT 1
26717: PUSH
26718: EMPTY
26719: LIST
26720: LIST
26721: PUSH
26722: LD_INT 0
26724: PUSH
26725: LD_INT 1
26727: PUSH
26728: EMPTY
26729: LIST
26730: LIST
26731: PUSH
26732: LD_INT 1
26734: NEG
26735: PUSH
26736: LD_INT 0
26738: PUSH
26739: EMPTY
26740: LIST
26741: LIST
26742: PUSH
26743: LD_INT 1
26745: NEG
26746: PUSH
26747: LD_INT 1
26749: NEG
26750: PUSH
26751: EMPTY
26752: LIST
26753: LIST
26754: PUSH
26755: LD_INT 1
26757: NEG
26758: PUSH
26759: LD_INT 2
26761: NEG
26762: PUSH
26763: EMPTY
26764: LIST
26765: LIST
26766: PUSH
26767: LD_INT 0
26769: PUSH
26770: LD_INT 2
26772: NEG
26773: PUSH
26774: EMPTY
26775: LIST
26776: LIST
26777: PUSH
26778: LD_INT 1
26780: PUSH
26781: LD_INT 1
26783: NEG
26784: PUSH
26785: EMPTY
26786: LIST
26787: LIST
26788: PUSH
26789: LD_INT 1
26791: PUSH
26792: LD_INT 2
26794: PUSH
26795: EMPTY
26796: LIST
26797: LIST
26798: PUSH
26799: LD_INT 0
26801: PUSH
26802: LD_INT 2
26804: PUSH
26805: EMPTY
26806: LIST
26807: LIST
26808: PUSH
26809: LD_INT 1
26811: NEG
26812: PUSH
26813: LD_INT 1
26815: PUSH
26816: EMPTY
26817: LIST
26818: LIST
26819: PUSH
26820: LD_INT 1
26822: NEG
26823: PUSH
26824: LD_INT 3
26826: NEG
26827: PUSH
26828: EMPTY
26829: LIST
26830: LIST
26831: PUSH
26832: LD_INT 0
26834: PUSH
26835: LD_INT 3
26837: NEG
26838: PUSH
26839: EMPTY
26840: LIST
26841: LIST
26842: PUSH
26843: LD_INT 1
26845: PUSH
26846: LD_INT 2
26848: NEG
26849: PUSH
26850: EMPTY
26851: LIST
26852: LIST
26853: PUSH
26854: EMPTY
26855: LIST
26856: LIST
26857: LIST
26858: LIST
26859: LIST
26860: LIST
26861: LIST
26862: LIST
26863: LIST
26864: LIST
26865: LIST
26866: LIST
26867: LIST
26868: LIST
26869: LIST
26870: LIST
26871: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
26872: LD_ADDR_VAR 0 15
26876: PUSH
26877: LD_INT 0
26879: PUSH
26880: LD_INT 0
26882: PUSH
26883: EMPTY
26884: LIST
26885: LIST
26886: PUSH
26887: LD_INT 0
26889: PUSH
26890: LD_INT 1
26892: NEG
26893: PUSH
26894: EMPTY
26895: LIST
26896: LIST
26897: PUSH
26898: LD_INT 1
26900: PUSH
26901: LD_INT 0
26903: PUSH
26904: EMPTY
26905: LIST
26906: LIST
26907: PUSH
26908: LD_INT 1
26910: PUSH
26911: LD_INT 1
26913: PUSH
26914: EMPTY
26915: LIST
26916: LIST
26917: PUSH
26918: LD_INT 0
26920: PUSH
26921: LD_INT 1
26923: PUSH
26924: EMPTY
26925: LIST
26926: LIST
26927: PUSH
26928: LD_INT 1
26930: NEG
26931: PUSH
26932: LD_INT 0
26934: PUSH
26935: EMPTY
26936: LIST
26937: LIST
26938: PUSH
26939: LD_INT 1
26941: NEG
26942: PUSH
26943: LD_INT 1
26945: NEG
26946: PUSH
26947: EMPTY
26948: LIST
26949: LIST
26950: PUSH
26951: LD_INT 1
26953: PUSH
26954: LD_INT 1
26956: NEG
26957: PUSH
26958: EMPTY
26959: LIST
26960: LIST
26961: PUSH
26962: LD_INT 2
26964: PUSH
26965: LD_INT 0
26967: PUSH
26968: EMPTY
26969: LIST
26970: LIST
26971: PUSH
26972: LD_INT 2
26974: PUSH
26975: LD_INT 1
26977: PUSH
26978: EMPTY
26979: LIST
26980: LIST
26981: PUSH
26982: LD_INT 1
26984: NEG
26985: PUSH
26986: LD_INT 1
26988: PUSH
26989: EMPTY
26990: LIST
26991: LIST
26992: PUSH
26993: LD_INT 2
26995: NEG
26996: PUSH
26997: LD_INT 0
26999: PUSH
27000: EMPTY
27001: LIST
27002: LIST
27003: PUSH
27004: LD_INT 2
27006: NEG
27007: PUSH
27008: LD_INT 1
27010: NEG
27011: PUSH
27012: EMPTY
27013: LIST
27014: LIST
27015: PUSH
27016: LD_INT 2
27018: PUSH
27019: LD_INT 1
27021: NEG
27022: PUSH
27023: EMPTY
27024: LIST
27025: LIST
27026: PUSH
27027: LD_INT 3
27029: PUSH
27030: LD_INT 0
27032: PUSH
27033: EMPTY
27034: LIST
27035: LIST
27036: PUSH
27037: LD_INT 3
27039: PUSH
27040: LD_INT 1
27042: PUSH
27043: EMPTY
27044: LIST
27045: LIST
27046: PUSH
27047: EMPTY
27048: LIST
27049: LIST
27050: LIST
27051: LIST
27052: LIST
27053: LIST
27054: LIST
27055: LIST
27056: LIST
27057: LIST
27058: LIST
27059: LIST
27060: LIST
27061: LIST
27062: LIST
27063: LIST
27064: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27065: LD_ADDR_VAR 0 16
27069: PUSH
27070: LD_INT 0
27072: PUSH
27073: LD_INT 0
27075: PUSH
27076: EMPTY
27077: LIST
27078: LIST
27079: PUSH
27080: LD_INT 0
27082: PUSH
27083: LD_INT 1
27085: NEG
27086: PUSH
27087: EMPTY
27088: LIST
27089: LIST
27090: PUSH
27091: LD_INT 1
27093: PUSH
27094: LD_INT 0
27096: PUSH
27097: EMPTY
27098: LIST
27099: LIST
27100: PUSH
27101: LD_INT 1
27103: PUSH
27104: LD_INT 1
27106: PUSH
27107: EMPTY
27108: LIST
27109: LIST
27110: PUSH
27111: LD_INT 0
27113: PUSH
27114: LD_INT 1
27116: PUSH
27117: EMPTY
27118: LIST
27119: LIST
27120: PUSH
27121: LD_INT 1
27123: NEG
27124: PUSH
27125: LD_INT 0
27127: PUSH
27128: EMPTY
27129: LIST
27130: LIST
27131: PUSH
27132: LD_INT 1
27134: NEG
27135: PUSH
27136: LD_INT 1
27138: NEG
27139: PUSH
27140: EMPTY
27141: LIST
27142: LIST
27143: PUSH
27144: LD_INT 1
27146: NEG
27147: PUSH
27148: LD_INT 2
27150: NEG
27151: PUSH
27152: EMPTY
27153: LIST
27154: LIST
27155: PUSH
27156: LD_INT 2
27158: PUSH
27159: LD_INT 1
27161: PUSH
27162: EMPTY
27163: LIST
27164: LIST
27165: PUSH
27166: LD_INT 2
27168: PUSH
27169: LD_INT 2
27171: PUSH
27172: EMPTY
27173: LIST
27174: LIST
27175: PUSH
27176: LD_INT 1
27178: PUSH
27179: LD_INT 2
27181: PUSH
27182: EMPTY
27183: LIST
27184: LIST
27185: PUSH
27186: LD_INT 2
27188: NEG
27189: PUSH
27190: LD_INT 1
27192: NEG
27193: PUSH
27194: EMPTY
27195: LIST
27196: LIST
27197: PUSH
27198: LD_INT 2
27200: NEG
27201: PUSH
27202: LD_INT 2
27204: NEG
27205: PUSH
27206: EMPTY
27207: LIST
27208: LIST
27209: PUSH
27210: LD_INT 3
27212: PUSH
27213: LD_INT 2
27215: PUSH
27216: EMPTY
27217: LIST
27218: LIST
27219: PUSH
27220: LD_INT 3
27222: PUSH
27223: LD_INT 3
27225: PUSH
27226: EMPTY
27227: LIST
27228: LIST
27229: PUSH
27230: LD_INT 2
27232: PUSH
27233: LD_INT 3
27235: PUSH
27236: EMPTY
27237: LIST
27238: LIST
27239: PUSH
27240: EMPTY
27241: LIST
27242: LIST
27243: LIST
27244: LIST
27245: LIST
27246: LIST
27247: LIST
27248: LIST
27249: LIST
27250: LIST
27251: LIST
27252: LIST
27253: LIST
27254: LIST
27255: LIST
27256: LIST
27257: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27258: LD_ADDR_VAR 0 17
27262: PUSH
27263: LD_INT 0
27265: PUSH
27266: LD_INT 0
27268: PUSH
27269: EMPTY
27270: LIST
27271: LIST
27272: PUSH
27273: LD_INT 0
27275: PUSH
27276: LD_INT 1
27278: NEG
27279: PUSH
27280: EMPTY
27281: LIST
27282: LIST
27283: PUSH
27284: LD_INT 1
27286: PUSH
27287: LD_INT 0
27289: PUSH
27290: EMPTY
27291: LIST
27292: LIST
27293: PUSH
27294: LD_INT 1
27296: PUSH
27297: LD_INT 1
27299: PUSH
27300: EMPTY
27301: LIST
27302: LIST
27303: PUSH
27304: LD_INT 0
27306: PUSH
27307: LD_INT 1
27309: PUSH
27310: EMPTY
27311: LIST
27312: LIST
27313: PUSH
27314: LD_INT 1
27316: NEG
27317: PUSH
27318: LD_INT 0
27320: PUSH
27321: EMPTY
27322: LIST
27323: LIST
27324: PUSH
27325: LD_INT 1
27327: NEG
27328: PUSH
27329: LD_INT 1
27331: NEG
27332: PUSH
27333: EMPTY
27334: LIST
27335: LIST
27336: PUSH
27337: LD_INT 1
27339: NEG
27340: PUSH
27341: LD_INT 2
27343: NEG
27344: PUSH
27345: EMPTY
27346: LIST
27347: LIST
27348: PUSH
27349: LD_INT 0
27351: PUSH
27352: LD_INT 2
27354: NEG
27355: PUSH
27356: EMPTY
27357: LIST
27358: LIST
27359: PUSH
27360: LD_INT 1
27362: PUSH
27363: LD_INT 1
27365: NEG
27366: PUSH
27367: EMPTY
27368: LIST
27369: LIST
27370: PUSH
27371: LD_INT 2
27373: PUSH
27374: LD_INT 0
27376: PUSH
27377: EMPTY
27378: LIST
27379: LIST
27380: PUSH
27381: LD_INT 2
27383: PUSH
27384: LD_INT 1
27386: PUSH
27387: EMPTY
27388: LIST
27389: LIST
27390: PUSH
27391: LD_INT 2
27393: PUSH
27394: LD_INT 2
27396: PUSH
27397: EMPTY
27398: LIST
27399: LIST
27400: PUSH
27401: LD_INT 1
27403: PUSH
27404: LD_INT 2
27406: PUSH
27407: EMPTY
27408: LIST
27409: LIST
27410: PUSH
27411: LD_INT 0
27413: PUSH
27414: LD_INT 2
27416: PUSH
27417: EMPTY
27418: LIST
27419: LIST
27420: PUSH
27421: LD_INT 1
27423: NEG
27424: PUSH
27425: LD_INT 1
27427: PUSH
27428: EMPTY
27429: LIST
27430: LIST
27431: PUSH
27432: LD_INT 2
27434: NEG
27435: PUSH
27436: LD_INT 0
27438: PUSH
27439: EMPTY
27440: LIST
27441: LIST
27442: PUSH
27443: LD_INT 2
27445: NEG
27446: PUSH
27447: LD_INT 1
27449: NEG
27450: PUSH
27451: EMPTY
27452: LIST
27453: LIST
27454: PUSH
27455: LD_INT 2
27457: NEG
27458: PUSH
27459: LD_INT 2
27461: NEG
27462: PUSH
27463: EMPTY
27464: LIST
27465: LIST
27466: PUSH
27467: EMPTY
27468: LIST
27469: LIST
27470: LIST
27471: LIST
27472: LIST
27473: LIST
27474: LIST
27475: LIST
27476: LIST
27477: LIST
27478: LIST
27479: LIST
27480: LIST
27481: LIST
27482: LIST
27483: LIST
27484: LIST
27485: LIST
27486: LIST
27487: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27488: LD_ADDR_VAR 0 18
27492: PUSH
27493: LD_INT 0
27495: PUSH
27496: LD_INT 0
27498: PUSH
27499: EMPTY
27500: LIST
27501: LIST
27502: PUSH
27503: LD_INT 0
27505: PUSH
27506: LD_INT 1
27508: NEG
27509: PUSH
27510: EMPTY
27511: LIST
27512: LIST
27513: PUSH
27514: LD_INT 1
27516: PUSH
27517: LD_INT 0
27519: PUSH
27520: EMPTY
27521: LIST
27522: LIST
27523: PUSH
27524: LD_INT 1
27526: PUSH
27527: LD_INT 1
27529: PUSH
27530: EMPTY
27531: LIST
27532: LIST
27533: PUSH
27534: LD_INT 0
27536: PUSH
27537: LD_INT 1
27539: PUSH
27540: EMPTY
27541: LIST
27542: LIST
27543: PUSH
27544: LD_INT 1
27546: NEG
27547: PUSH
27548: LD_INT 0
27550: PUSH
27551: EMPTY
27552: LIST
27553: LIST
27554: PUSH
27555: LD_INT 1
27557: NEG
27558: PUSH
27559: LD_INT 1
27561: NEG
27562: PUSH
27563: EMPTY
27564: LIST
27565: LIST
27566: PUSH
27567: LD_INT 1
27569: NEG
27570: PUSH
27571: LD_INT 2
27573: NEG
27574: PUSH
27575: EMPTY
27576: LIST
27577: LIST
27578: PUSH
27579: LD_INT 0
27581: PUSH
27582: LD_INT 2
27584: NEG
27585: PUSH
27586: EMPTY
27587: LIST
27588: LIST
27589: PUSH
27590: LD_INT 1
27592: PUSH
27593: LD_INT 1
27595: NEG
27596: PUSH
27597: EMPTY
27598: LIST
27599: LIST
27600: PUSH
27601: LD_INT 2
27603: PUSH
27604: LD_INT 0
27606: PUSH
27607: EMPTY
27608: LIST
27609: LIST
27610: PUSH
27611: LD_INT 2
27613: PUSH
27614: LD_INT 1
27616: PUSH
27617: EMPTY
27618: LIST
27619: LIST
27620: PUSH
27621: LD_INT 2
27623: PUSH
27624: LD_INT 2
27626: PUSH
27627: EMPTY
27628: LIST
27629: LIST
27630: PUSH
27631: LD_INT 1
27633: PUSH
27634: LD_INT 2
27636: PUSH
27637: EMPTY
27638: LIST
27639: LIST
27640: PUSH
27641: LD_INT 0
27643: PUSH
27644: LD_INT 2
27646: PUSH
27647: EMPTY
27648: LIST
27649: LIST
27650: PUSH
27651: LD_INT 1
27653: NEG
27654: PUSH
27655: LD_INT 1
27657: PUSH
27658: EMPTY
27659: LIST
27660: LIST
27661: PUSH
27662: LD_INT 2
27664: NEG
27665: PUSH
27666: LD_INT 0
27668: PUSH
27669: EMPTY
27670: LIST
27671: LIST
27672: PUSH
27673: LD_INT 2
27675: NEG
27676: PUSH
27677: LD_INT 1
27679: NEG
27680: PUSH
27681: EMPTY
27682: LIST
27683: LIST
27684: PUSH
27685: LD_INT 2
27687: NEG
27688: PUSH
27689: LD_INT 2
27691: NEG
27692: PUSH
27693: EMPTY
27694: LIST
27695: LIST
27696: PUSH
27697: EMPTY
27698: LIST
27699: LIST
27700: LIST
27701: LIST
27702: LIST
27703: LIST
27704: LIST
27705: LIST
27706: LIST
27707: LIST
27708: LIST
27709: LIST
27710: LIST
27711: LIST
27712: LIST
27713: LIST
27714: LIST
27715: LIST
27716: LIST
27717: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27718: LD_ADDR_VAR 0 19
27722: PUSH
27723: LD_INT 0
27725: PUSH
27726: LD_INT 0
27728: PUSH
27729: EMPTY
27730: LIST
27731: LIST
27732: PUSH
27733: LD_INT 0
27735: PUSH
27736: LD_INT 1
27738: NEG
27739: PUSH
27740: EMPTY
27741: LIST
27742: LIST
27743: PUSH
27744: LD_INT 1
27746: PUSH
27747: LD_INT 0
27749: PUSH
27750: EMPTY
27751: LIST
27752: LIST
27753: PUSH
27754: LD_INT 1
27756: PUSH
27757: LD_INT 1
27759: PUSH
27760: EMPTY
27761: LIST
27762: LIST
27763: PUSH
27764: LD_INT 0
27766: PUSH
27767: LD_INT 1
27769: PUSH
27770: EMPTY
27771: LIST
27772: LIST
27773: PUSH
27774: LD_INT 1
27776: NEG
27777: PUSH
27778: LD_INT 0
27780: PUSH
27781: EMPTY
27782: LIST
27783: LIST
27784: PUSH
27785: LD_INT 1
27787: NEG
27788: PUSH
27789: LD_INT 1
27791: NEG
27792: PUSH
27793: EMPTY
27794: LIST
27795: LIST
27796: PUSH
27797: LD_INT 1
27799: NEG
27800: PUSH
27801: LD_INT 2
27803: NEG
27804: PUSH
27805: EMPTY
27806: LIST
27807: LIST
27808: PUSH
27809: LD_INT 0
27811: PUSH
27812: LD_INT 2
27814: NEG
27815: PUSH
27816: EMPTY
27817: LIST
27818: LIST
27819: PUSH
27820: LD_INT 1
27822: PUSH
27823: LD_INT 1
27825: NEG
27826: PUSH
27827: EMPTY
27828: LIST
27829: LIST
27830: PUSH
27831: LD_INT 2
27833: PUSH
27834: LD_INT 0
27836: PUSH
27837: EMPTY
27838: LIST
27839: LIST
27840: PUSH
27841: LD_INT 2
27843: PUSH
27844: LD_INT 1
27846: PUSH
27847: EMPTY
27848: LIST
27849: LIST
27850: PUSH
27851: LD_INT 2
27853: PUSH
27854: LD_INT 2
27856: PUSH
27857: EMPTY
27858: LIST
27859: LIST
27860: PUSH
27861: LD_INT 1
27863: PUSH
27864: LD_INT 2
27866: PUSH
27867: EMPTY
27868: LIST
27869: LIST
27870: PUSH
27871: LD_INT 0
27873: PUSH
27874: LD_INT 2
27876: PUSH
27877: EMPTY
27878: LIST
27879: LIST
27880: PUSH
27881: LD_INT 1
27883: NEG
27884: PUSH
27885: LD_INT 1
27887: PUSH
27888: EMPTY
27889: LIST
27890: LIST
27891: PUSH
27892: LD_INT 2
27894: NEG
27895: PUSH
27896: LD_INT 0
27898: PUSH
27899: EMPTY
27900: LIST
27901: LIST
27902: PUSH
27903: LD_INT 2
27905: NEG
27906: PUSH
27907: LD_INT 1
27909: NEG
27910: PUSH
27911: EMPTY
27912: LIST
27913: LIST
27914: PUSH
27915: LD_INT 2
27917: NEG
27918: PUSH
27919: LD_INT 2
27921: NEG
27922: PUSH
27923: EMPTY
27924: LIST
27925: LIST
27926: PUSH
27927: EMPTY
27928: LIST
27929: LIST
27930: LIST
27931: LIST
27932: LIST
27933: LIST
27934: LIST
27935: LIST
27936: LIST
27937: LIST
27938: LIST
27939: LIST
27940: LIST
27941: LIST
27942: LIST
27943: LIST
27944: LIST
27945: LIST
27946: LIST
27947: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27948: LD_ADDR_VAR 0 20
27952: PUSH
27953: LD_INT 0
27955: PUSH
27956: LD_INT 0
27958: PUSH
27959: EMPTY
27960: LIST
27961: LIST
27962: PUSH
27963: LD_INT 0
27965: PUSH
27966: LD_INT 1
27968: NEG
27969: PUSH
27970: EMPTY
27971: LIST
27972: LIST
27973: PUSH
27974: LD_INT 1
27976: PUSH
27977: LD_INT 0
27979: PUSH
27980: EMPTY
27981: LIST
27982: LIST
27983: PUSH
27984: LD_INT 1
27986: PUSH
27987: LD_INT 1
27989: PUSH
27990: EMPTY
27991: LIST
27992: LIST
27993: PUSH
27994: LD_INT 0
27996: PUSH
27997: LD_INT 1
27999: PUSH
28000: EMPTY
28001: LIST
28002: LIST
28003: PUSH
28004: LD_INT 1
28006: NEG
28007: PUSH
28008: LD_INT 0
28010: PUSH
28011: EMPTY
28012: LIST
28013: LIST
28014: PUSH
28015: LD_INT 1
28017: NEG
28018: PUSH
28019: LD_INT 1
28021: NEG
28022: PUSH
28023: EMPTY
28024: LIST
28025: LIST
28026: PUSH
28027: LD_INT 1
28029: NEG
28030: PUSH
28031: LD_INT 2
28033: NEG
28034: PUSH
28035: EMPTY
28036: LIST
28037: LIST
28038: PUSH
28039: LD_INT 0
28041: PUSH
28042: LD_INT 2
28044: NEG
28045: PUSH
28046: EMPTY
28047: LIST
28048: LIST
28049: PUSH
28050: LD_INT 1
28052: PUSH
28053: LD_INT 1
28055: NEG
28056: PUSH
28057: EMPTY
28058: LIST
28059: LIST
28060: PUSH
28061: LD_INT 2
28063: PUSH
28064: LD_INT 0
28066: PUSH
28067: EMPTY
28068: LIST
28069: LIST
28070: PUSH
28071: LD_INT 2
28073: PUSH
28074: LD_INT 1
28076: PUSH
28077: EMPTY
28078: LIST
28079: LIST
28080: PUSH
28081: LD_INT 2
28083: PUSH
28084: LD_INT 2
28086: PUSH
28087: EMPTY
28088: LIST
28089: LIST
28090: PUSH
28091: LD_INT 1
28093: PUSH
28094: LD_INT 2
28096: PUSH
28097: EMPTY
28098: LIST
28099: LIST
28100: PUSH
28101: LD_INT 0
28103: PUSH
28104: LD_INT 2
28106: PUSH
28107: EMPTY
28108: LIST
28109: LIST
28110: PUSH
28111: LD_INT 1
28113: NEG
28114: PUSH
28115: LD_INT 1
28117: PUSH
28118: EMPTY
28119: LIST
28120: LIST
28121: PUSH
28122: LD_INT 2
28124: NEG
28125: PUSH
28126: LD_INT 0
28128: PUSH
28129: EMPTY
28130: LIST
28131: LIST
28132: PUSH
28133: LD_INT 2
28135: NEG
28136: PUSH
28137: LD_INT 1
28139: NEG
28140: PUSH
28141: EMPTY
28142: LIST
28143: LIST
28144: PUSH
28145: LD_INT 2
28147: NEG
28148: PUSH
28149: LD_INT 2
28151: NEG
28152: PUSH
28153: EMPTY
28154: LIST
28155: LIST
28156: PUSH
28157: EMPTY
28158: LIST
28159: LIST
28160: LIST
28161: LIST
28162: LIST
28163: LIST
28164: LIST
28165: LIST
28166: LIST
28167: LIST
28168: LIST
28169: LIST
28170: LIST
28171: LIST
28172: LIST
28173: LIST
28174: LIST
28175: LIST
28176: LIST
28177: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28178: LD_ADDR_VAR 0 21
28182: PUSH
28183: LD_INT 0
28185: PUSH
28186: LD_INT 0
28188: PUSH
28189: EMPTY
28190: LIST
28191: LIST
28192: PUSH
28193: LD_INT 0
28195: PUSH
28196: LD_INT 1
28198: NEG
28199: PUSH
28200: EMPTY
28201: LIST
28202: LIST
28203: PUSH
28204: LD_INT 1
28206: PUSH
28207: LD_INT 0
28209: PUSH
28210: EMPTY
28211: LIST
28212: LIST
28213: PUSH
28214: LD_INT 1
28216: PUSH
28217: LD_INT 1
28219: PUSH
28220: EMPTY
28221: LIST
28222: LIST
28223: PUSH
28224: LD_INT 0
28226: PUSH
28227: LD_INT 1
28229: PUSH
28230: EMPTY
28231: LIST
28232: LIST
28233: PUSH
28234: LD_INT 1
28236: NEG
28237: PUSH
28238: LD_INT 0
28240: PUSH
28241: EMPTY
28242: LIST
28243: LIST
28244: PUSH
28245: LD_INT 1
28247: NEG
28248: PUSH
28249: LD_INT 1
28251: NEG
28252: PUSH
28253: EMPTY
28254: LIST
28255: LIST
28256: PUSH
28257: LD_INT 1
28259: NEG
28260: PUSH
28261: LD_INT 2
28263: NEG
28264: PUSH
28265: EMPTY
28266: LIST
28267: LIST
28268: PUSH
28269: LD_INT 0
28271: PUSH
28272: LD_INT 2
28274: NEG
28275: PUSH
28276: EMPTY
28277: LIST
28278: LIST
28279: PUSH
28280: LD_INT 1
28282: PUSH
28283: LD_INT 1
28285: NEG
28286: PUSH
28287: EMPTY
28288: LIST
28289: LIST
28290: PUSH
28291: LD_INT 2
28293: PUSH
28294: LD_INT 0
28296: PUSH
28297: EMPTY
28298: LIST
28299: LIST
28300: PUSH
28301: LD_INT 2
28303: PUSH
28304: LD_INT 1
28306: PUSH
28307: EMPTY
28308: LIST
28309: LIST
28310: PUSH
28311: LD_INT 2
28313: PUSH
28314: LD_INT 2
28316: PUSH
28317: EMPTY
28318: LIST
28319: LIST
28320: PUSH
28321: LD_INT 1
28323: PUSH
28324: LD_INT 2
28326: PUSH
28327: EMPTY
28328: LIST
28329: LIST
28330: PUSH
28331: LD_INT 0
28333: PUSH
28334: LD_INT 2
28336: PUSH
28337: EMPTY
28338: LIST
28339: LIST
28340: PUSH
28341: LD_INT 1
28343: NEG
28344: PUSH
28345: LD_INT 1
28347: PUSH
28348: EMPTY
28349: LIST
28350: LIST
28351: PUSH
28352: LD_INT 2
28354: NEG
28355: PUSH
28356: LD_INT 0
28358: PUSH
28359: EMPTY
28360: LIST
28361: LIST
28362: PUSH
28363: LD_INT 2
28365: NEG
28366: PUSH
28367: LD_INT 1
28369: NEG
28370: PUSH
28371: EMPTY
28372: LIST
28373: LIST
28374: PUSH
28375: LD_INT 2
28377: NEG
28378: PUSH
28379: LD_INT 2
28381: NEG
28382: PUSH
28383: EMPTY
28384: LIST
28385: LIST
28386: PUSH
28387: EMPTY
28388: LIST
28389: LIST
28390: LIST
28391: LIST
28392: LIST
28393: LIST
28394: LIST
28395: LIST
28396: LIST
28397: LIST
28398: LIST
28399: LIST
28400: LIST
28401: LIST
28402: LIST
28403: LIST
28404: LIST
28405: LIST
28406: LIST
28407: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28408: LD_ADDR_VAR 0 22
28412: PUSH
28413: LD_INT 0
28415: PUSH
28416: LD_INT 0
28418: PUSH
28419: EMPTY
28420: LIST
28421: LIST
28422: PUSH
28423: LD_INT 0
28425: PUSH
28426: LD_INT 1
28428: NEG
28429: PUSH
28430: EMPTY
28431: LIST
28432: LIST
28433: PUSH
28434: LD_INT 1
28436: PUSH
28437: LD_INT 0
28439: PUSH
28440: EMPTY
28441: LIST
28442: LIST
28443: PUSH
28444: LD_INT 1
28446: PUSH
28447: LD_INT 1
28449: PUSH
28450: EMPTY
28451: LIST
28452: LIST
28453: PUSH
28454: LD_INT 0
28456: PUSH
28457: LD_INT 1
28459: PUSH
28460: EMPTY
28461: LIST
28462: LIST
28463: PUSH
28464: LD_INT 1
28466: NEG
28467: PUSH
28468: LD_INT 0
28470: PUSH
28471: EMPTY
28472: LIST
28473: LIST
28474: PUSH
28475: LD_INT 1
28477: NEG
28478: PUSH
28479: LD_INT 1
28481: NEG
28482: PUSH
28483: EMPTY
28484: LIST
28485: LIST
28486: PUSH
28487: LD_INT 1
28489: NEG
28490: PUSH
28491: LD_INT 2
28493: NEG
28494: PUSH
28495: EMPTY
28496: LIST
28497: LIST
28498: PUSH
28499: LD_INT 0
28501: PUSH
28502: LD_INT 2
28504: NEG
28505: PUSH
28506: EMPTY
28507: LIST
28508: LIST
28509: PUSH
28510: LD_INT 1
28512: PUSH
28513: LD_INT 1
28515: NEG
28516: PUSH
28517: EMPTY
28518: LIST
28519: LIST
28520: PUSH
28521: LD_INT 2
28523: PUSH
28524: LD_INT 0
28526: PUSH
28527: EMPTY
28528: LIST
28529: LIST
28530: PUSH
28531: LD_INT 2
28533: PUSH
28534: LD_INT 1
28536: PUSH
28537: EMPTY
28538: LIST
28539: LIST
28540: PUSH
28541: LD_INT 2
28543: PUSH
28544: LD_INT 2
28546: PUSH
28547: EMPTY
28548: LIST
28549: LIST
28550: PUSH
28551: LD_INT 1
28553: PUSH
28554: LD_INT 2
28556: PUSH
28557: EMPTY
28558: LIST
28559: LIST
28560: PUSH
28561: LD_INT 0
28563: PUSH
28564: LD_INT 2
28566: PUSH
28567: EMPTY
28568: LIST
28569: LIST
28570: PUSH
28571: LD_INT 1
28573: NEG
28574: PUSH
28575: LD_INT 1
28577: PUSH
28578: EMPTY
28579: LIST
28580: LIST
28581: PUSH
28582: LD_INT 2
28584: NEG
28585: PUSH
28586: LD_INT 0
28588: PUSH
28589: EMPTY
28590: LIST
28591: LIST
28592: PUSH
28593: LD_INT 2
28595: NEG
28596: PUSH
28597: LD_INT 1
28599: NEG
28600: PUSH
28601: EMPTY
28602: LIST
28603: LIST
28604: PUSH
28605: LD_INT 2
28607: NEG
28608: PUSH
28609: LD_INT 2
28611: NEG
28612: PUSH
28613: EMPTY
28614: LIST
28615: LIST
28616: PUSH
28617: EMPTY
28618: LIST
28619: LIST
28620: LIST
28621: LIST
28622: LIST
28623: LIST
28624: LIST
28625: LIST
28626: LIST
28627: LIST
28628: LIST
28629: LIST
28630: LIST
28631: LIST
28632: LIST
28633: LIST
28634: LIST
28635: LIST
28636: LIST
28637: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
28638: LD_ADDR_VAR 0 23
28642: PUSH
28643: LD_INT 0
28645: PUSH
28646: LD_INT 0
28648: PUSH
28649: EMPTY
28650: LIST
28651: LIST
28652: PUSH
28653: LD_INT 0
28655: PUSH
28656: LD_INT 1
28658: NEG
28659: PUSH
28660: EMPTY
28661: LIST
28662: LIST
28663: PUSH
28664: LD_INT 1
28666: PUSH
28667: LD_INT 0
28669: PUSH
28670: EMPTY
28671: LIST
28672: LIST
28673: PUSH
28674: LD_INT 1
28676: PUSH
28677: LD_INT 1
28679: PUSH
28680: EMPTY
28681: LIST
28682: LIST
28683: PUSH
28684: LD_INT 0
28686: PUSH
28687: LD_INT 1
28689: PUSH
28690: EMPTY
28691: LIST
28692: LIST
28693: PUSH
28694: LD_INT 1
28696: NEG
28697: PUSH
28698: LD_INT 0
28700: PUSH
28701: EMPTY
28702: LIST
28703: LIST
28704: PUSH
28705: LD_INT 1
28707: NEG
28708: PUSH
28709: LD_INT 1
28711: NEG
28712: PUSH
28713: EMPTY
28714: LIST
28715: LIST
28716: PUSH
28717: LD_INT 1
28719: NEG
28720: PUSH
28721: LD_INT 2
28723: NEG
28724: PUSH
28725: EMPTY
28726: LIST
28727: LIST
28728: PUSH
28729: LD_INT 0
28731: PUSH
28732: LD_INT 2
28734: NEG
28735: PUSH
28736: EMPTY
28737: LIST
28738: LIST
28739: PUSH
28740: LD_INT 1
28742: PUSH
28743: LD_INT 1
28745: NEG
28746: PUSH
28747: EMPTY
28748: LIST
28749: LIST
28750: PUSH
28751: LD_INT 2
28753: PUSH
28754: LD_INT 0
28756: PUSH
28757: EMPTY
28758: LIST
28759: LIST
28760: PUSH
28761: LD_INT 2
28763: PUSH
28764: LD_INT 1
28766: PUSH
28767: EMPTY
28768: LIST
28769: LIST
28770: PUSH
28771: LD_INT 2
28773: PUSH
28774: LD_INT 2
28776: PUSH
28777: EMPTY
28778: LIST
28779: LIST
28780: PUSH
28781: LD_INT 1
28783: PUSH
28784: LD_INT 2
28786: PUSH
28787: EMPTY
28788: LIST
28789: LIST
28790: PUSH
28791: LD_INT 0
28793: PUSH
28794: LD_INT 2
28796: PUSH
28797: EMPTY
28798: LIST
28799: LIST
28800: PUSH
28801: LD_INT 1
28803: NEG
28804: PUSH
28805: LD_INT 1
28807: PUSH
28808: EMPTY
28809: LIST
28810: LIST
28811: PUSH
28812: LD_INT 2
28814: NEG
28815: PUSH
28816: LD_INT 0
28818: PUSH
28819: EMPTY
28820: LIST
28821: LIST
28822: PUSH
28823: LD_INT 2
28825: NEG
28826: PUSH
28827: LD_INT 1
28829: NEG
28830: PUSH
28831: EMPTY
28832: LIST
28833: LIST
28834: PUSH
28835: LD_INT 2
28837: NEG
28838: PUSH
28839: LD_INT 2
28841: NEG
28842: PUSH
28843: EMPTY
28844: LIST
28845: LIST
28846: PUSH
28847: LD_INT 2
28849: NEG
28850: PUSH
28851: LD_INT 3
28853: NEG
28854: PUSH
28855: EMPTY
28856: LIST
28857: LIST
28858: PUSH
28859: LD_INT 1
28861: NEG
28862: PUSH
28863: LD_INT 3
28865: NEG
28866: PUSH
28867: EMPTY
28868: LIST
28869: LIST
28870: PUSH
28871: LD_INT 1
28873: PUSH
28874: LD_INT 2
28876: NEG
28877: PUSH
28878: EMPTY
28879: LIST
28880: LIST
28881: PUSH
28882: LD_INT 2
28884: PUSH
28885: LD_INT 1
28887: NEG
28888: PUSH
28889: EMPTY
28890: LIST
28891: LIST
28892: PUSH
28893: EMPTY
28894: LIST
28895: LIST
28896: LIST
28897: LIST
28898: LIST
28899: LIST
28900: LIST
28901: LIST
28902: LIST
28903: LIST
28904: LIST
28905: LIST
28906: LIST
28907: LIST
28908: LIST
28909: LIST
28910: LIST
28911: LIST
28912: LIST
28913: LIST
28914: LIST
28915: LIST
28916: LIST
28917: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
28918: LD_ADDR_VAR 0 24
28922: PUSH
28923: LD_INT 0
28925: PUSH
28926: LD_INT 0
28928: PUSH
28929: EMPTY
28930: LIST
28931: LIST
28932: PUSH
28933: LD_INT 0
28935: PUSH
28936: LD_INT 1
28938: NEG
28939: PUSH
28940: EMPTY
28941: LIST
28942: LIST
28943: PUSH
28944: LD_INT 1
28946: PUSH
28947: LD_INT 0
28949: PUSH
28950: EMPTY
28951: LIST
28952: LIST
28953: PUSH
28954: LD_INT 1
28956: PUSH
28957: LD_INT 1
28959: PUSH
28960: EMPTY
28961: LIST
28962: LIST
28963: PUSH
28964: LD_INT 0
28966: PUSH
28967: LD_INT 1
28969: PUSH
28970: EMPTY
28971: LIST
28972: LIST
28973: PUSH
28974: LD_INT 1
28976: NEG
28977: PUSH
28978: LD_INT 0
28980: PUSH
28981: EMPTY
28982: LIST
28983: LIST
28984: PUSH
28985: LD_INT 1
28987: NEG
28988: PUSH
28989: LD_INT 1
28991: NEG
28992: PUSH
28993: EMPTY
28994: LIST
28995: LIST
28996: PUSH
28997: LD_INT 1
28999: NEG
29000: PUSH
29001: LD_INT 2
29003: NEG
29004: PUSH
29005: EMPTY
29006: LIST
29007: LIST
29008: PUSH
29009: LD_INT 0
29011: PUSH
29012: LD_INT 2
29014: NEG
29015: PUSH
29016: EMPTY
29017: LIST
29018: LIST
29019: PUSH
29020: LD_INT 1
29022: PUSH
29023: LD_INT 1
29025: NEG
29026: PUSH
29027: EMPTY
29028: LIST
29029: LIST
29030: PUSH
29031: LD_INT 2
29033: PUSH
29034: LD_INT 0
29036: PUSH
29037: EMPTY
29038: LIST
29039: LIST
29040: PUSH
29041: LD_INT 2
29043: PUSH
29044: LD_INT 1
29046: PUSH
29047: EMPTY
29048: LIST
29049: LIST
29050: PUSH
29051: LD_INT 2
29053: PUSH
29054: LD_INT 2
29056: PUSH
29057: EMPTY
29058: LIST
29059: LIST
29060: PUSH
29061: LD_INT 1
29063: PUSH
29064: LD_INT 2
29066: PUSH
29067: EMPTY
29068: LIST
29069: LIST
29070: PUSH
29071: LD_INT 0
29073: PUSH
29074: LD_INT 2
29076: PUSH
29077: EMPTY
29078: LIST
29079: LIST
29080: PUSH
29081: LD_INT 1
29083: NEG
29084: PUSH
29085: LD_INT 1
29087: PUSH
29088: EMPTY
29089: LIST
29090: LIST
29091: PUSH
29092: LD_INT 2
29094: NEG
29095: PUSH
29096: LD_INT 0
29098: PUSH
29099: EMPTY
29100: LIST
29101: LIST
29102: PUSH
29103: LD_INT 2
29105: NEG
29106: PUSH
29107: LD_INT 1
29109: NEG
29110: PUSH
29111: EMPTY
29112: LIST
29113: LIST
29114: PUSH
29115: LD_INT 2
29117: NEG
29118: PUSH
29119: LD_INT 2
29121: NEG
29122: PUSH
29123: EMPTY
29124: LIST
29125: LIST
29126: PUSH
29127: LD_INT 1
29129: PUSH
29130: LD_INT 2
29132: NEG
29133: PUSH
29134: EMPTY
29135: LIST
29136: LIST
29137: PUSH
29138: LD_INT 2
29140: PUSH
29141: LD_INT 1
29143: NEG
29144: PUSH
29145: EMPTY
29146: LIST
29147: LIST
29148: PUSH
29149: LD_INT 3
29151: PUSH
29152: LD_INT 1
29154: PUSH
29155: EMPTY
29156: LIST
29157: LIST
29158: PUSH
29159: LD_INT 3
29161: PUSH
29162: LD_INT 2
29164: PUSH
29165: EMPTY
29166: LIST
29167: LIST
29168: PUSH
29169: EMPTY
29170: LIST
29171: LIST
29172: LIST
29173: LIST
29174: LIST
29175: LIST
29176: LIST
29177: LIST
29178: LIST
29179: LIST
29180: LIST
29181: LIST
29182: LIST
29183: LIST
29184: LIST
29185: LIST
29186: LIST
29187: LIST
29188: LIST
29189: LIST
29190: LIST
29191: LIST
29192: LIST
29193: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
29194: LD_ADDR_VAR 0 25
29198: PUSH
29199: LD_INT 0
29201: PUSH
29202: LD_INT 0
29204: PUSH
29205: EMPTY
29206: LIST
29207: LIST
29208: PUSH
29209: LD_INT 0
29211: PUSH
29212: LD_INT 1
29214: NEG
29215: PUSH
29216: EMPTY
29217: LIST
29218: LIST
29219: PUSH
29220: LD_INT 1
29222: PUSH
29223: LD_INT 0
29225: PUSH
29226: EMPTY
29227: LIST
29228: LIST
29229: PUSH
29230: LD_INT 1
29232: PUSH
29233: LD_INT 1
29235: PUSH
29236: EMPTY
29237: LIST
29238: LIST
29239: PUSH
29240: LD_INT 0
29242: PUSH
29243: LD_INT 1
29245: PUSH
29246: EMPTY
29247: LIST
29248: LIST
29249: PUSH
29250: LD_INT 1
29252: NEG
29253: PUSH
29254: LD_INT 0
29256: PUSH
29257: EMPTY
29258: LIST
29259: LIST
29260: PUSH
29261: LD_INT 1
29263: NEG
29264: PUSH
29265: LD_INT 1
29267: NEG
29268: PUSH
29269: EMPTY
29270: LIST
29271: LIST
29272: PUSH
29273: LD_INT 1
29275: NEG
29276: PUSH
29277: LD_INT 2
29279: NEG
29280: PUSH
29281: EMPTY
29282: LIST
29283: LIST
29284: PUSH
29285: LD_INT 0
29287: PUSH
29288: LD_INT 2
29290: NEG
29291: PUSH
29292: EMPTY
29293: LIST
29294: LIST
29295: PUSH
29296: LD_INT 1
29298: PUSH
29299: LD_INT 1
29301: NEG
29302: PUSH
29303: EMPTY
29304: LIST
29305: LIST
29306: PUSH
29307: LD_INT 2
29309: PUSH
29310: LD_INT 0
29312: PUSH
29313: EMPTY
29314: LIST
29315: LIST
29316: PUSH
29317: LD_INT 2
29319: PUSH
29320: LD_INT 1
29322: PUSH
29323: EMPTY
29324: LIST
29325: LIST
29326: PUSH
29327: LD_INT 2
29329: PUSH
29330: LD_INT 2
29332: PUSH
29333: EMPTY
29334: LIST
29335: LIST
29336: PUSH
29337: LD_INT 1
29339: PUSH
29340: LD_INT 2
29342: PUSH
29343: EMPTY
29344: LIST
29345: LIST
29346: PUSH
29347: LD_INT 0
29349: PUSH
29350: LD_INT 2
29352: PUSH
29353: EMPTY
29354: LIST
29355: LIST
29356: PUSH
29357: LD_INT 1
29359: NEG
29360: PUSH
29361: LD_INT 1
29363: PUSH
29364: EMPTY
29365: LIST
29366: LIST
29367: PUSH
29368: LD_INT 2
29370: NEG
29371: PUSH
29372: LD_INT 0
29374: PUSH
29375: EMPTY
29376: LIST
29377: LIST
29378: PUSH
29379: LD_INT 2
29381: NEG
29382: PUSH
29383: LD_INT 1
29385: NEG
29386: PUSH
29387: EMPTY
29388: LIST
29389: LIST
29390: PUSH
29391: LD_INT 2
29393: NEG
29394: PUSH
29395: LD_INT 2
29397: NEG
29398: PUSH
29399: EMPTY
29400: LIST
29401: LIST
29402: PUSH
29403: LD_INT 3
29405: PUSH
29406: LD_INT 1
29408: PUSH
29409: EMPTY
29410: LIST
29411: LIST
29412: PUSH
29413: LD_INT 3
29415: PUSH
29416: LD_INT 2
29418: PUSH
29419: EMPTY
29420: LIST
29421: LIST
29422: PUSH
29423: LD_INT 2
29425: PUSH
29426: LD_INT 3
29428: PUSH
29429: EMPTY
29430: LIST
29431: LIST
29432: PUSH
29433: LD_INT 1
29435: PUSH
29436: LD_INT 3
29438: PUSH
29439: EMPTY
29440: LIST
29441: LIST
29442: PUSH
29443: EMPTY
29444: LIST
29445: LIST
29446: LIST
29447: LIST
29448: LIST
29449: LIST
29450: LIST
29451: LIST
29452: LIST
29453: LIST
29454: LIST
29455: LIST
29456: LIST
29457: LIST
29458: LIST
29459: LIST
29460: LIST
29461: LIST
29462: LIST
29463: LIST
29464: LIST
29465: LIST
29466: LIST
29467: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
29468: LD_ADDR_VAR 0 26
29472: PUSH
29473: LD_INT 0
29475: PUSH
29476: LD_INT 0
29478: PUSH
29479: EMPTY
29480: LIST
29481: LIST
29482: PUSH
29483: LD_INT 0
29485: PUSH
29486: LD_INT 1
29488: NEG
29489: PUSH
29490: EMPTY
29491: LIST
29492: LIST
29493: PUSH
29494: LD_INT 1
29496: PUSH
29497: LD_INT 0
29499: PUSH
29500: EMPTY
29501: LIST
29502: LIST
29503: PUSH
29504: LD_INT 1
29506: PUSH
29507: LD_INT 1
29509: PUSH
29510: EMPTY
29511: LIST
29512: LIST
29513: PUSH
29514: LD_INT 0
29516: PUSH
29517: LD_INT 1
29519: PUSH
29520: EMPTY
29521: LIST
29522: LIST
29523: PUSH
29524: LD_INT 1
29526: NEG
29527: PUSH
29528: LD_INT 0
29530: PUSH
29531: EMPTY
29532: LIST
29533: LIST
29534: PUSH
29535: LD_INT 1
29537: NEG
29538: PUSH
29539: LD_INT 1
29541: NEG
29542: PUSH
29543: EMPTY
29544: LIST
29545: LIST
29546: PUSH
29547: LD_INT 1
29549: NEG
29550: PUSH
29551: LD_INT 2
29553: NEG
29554: PUSH
29555: EMPTY
29556: LIST
29557: LIST
29558: PUSH
29559: LD_INT 0
29561: PUSH
29562: LD_INT 2
29564: NEG
29565: PUSH
29566: EMPTY
29567: LIST
29568: LIST
29569: PUSH
29570: LD_INT 1
29572: PUSH
29573: LD_INT 1
29575: NEG
29576: PUSH
29577: EMPTY
29578: LIST
29579: LIST
29580: PUSH
29581: LD_INT 2
29583: PUSH
29584: LD_INT 0
29586: PUSH
29587: EMPTY
29588: LIST
29589: LIST
29590: PUSH
29591: LD_INT 2
29593: PUSH
29594: LD_INT 1
29596: PUSH
29597: EMPTY
29598: LIST
29599: LIST
29600: PUSH
29601: LD_INT 2
29603: PUSH
29604: LD_INT 2
29606: PUSH
29607: EMPTY
29608: LIST
29609: LIST
29610: PUSH
29611: LD_INT 1
29613: PUSH
29614: LD_INT 2
29616: PUSH
29617: EMPTY
29618: LIST
29619: LIST
29620: PUSH
29621: LD_INT 0
29623: PUSH
29624: LD_INT 2
29626: PUSH
29627: EMPTY
29628: LIST
29629: LIST
29630: PUSH
29631: LD_INT 1
29633: NEG
29634: PUSH
29635: LD_INT 1
29637: PUSH
29638: EMPTY
29639: LIST
29640: LIST
29641: PUSH
29642: LD_INT 2
29644: NEG
29645: PUSH
29646: LD_INT 0
29648: PUSH
29649: EMPTY
29650: LIST
29651: LIST
29652: PUSH
29653: LD_INT 2
29655: NEG
29656: PUSH
29657: LD_INT 1
29659: NEG
29660: PUSH
29661: EMPTY
29662: LIST
29663: LIST
29664: PUSH
29665: LD_INT 2
29667: NEG
29668: PUSH
29669: LD_INT 2
29671: NEG
29672: PUSH
29673: EMPTY
29674: LIST
29675: LIST
29676: PUSH
29677: LD_INT 2
29679: PUSH
29680: LD_INT 3
29682: PUSH
29683: EMPTY
29684: LIST
29685: LIST
29686: PUSH
29687: LD_INT 1
29689: PUSH
29690: LD_INT 3
29692: PUSH
29693: EMPTY
29694: LIST
29695: LIST
29696: PUSH
29697: LD_INT 1
29699: NEG
29700: PUSH
29701: LD_INT 2
29703: PUSH
29704: EMPTY
29705: LIST
29706: LIST
29707: PUSH
29708: LD_INT 2
29710: NEG
29711: PUSH
29712: LD_INT 1
29714: PUSH
29715: EMPTY
29716: LIST
29717: LIST
29718: PUSH
29719: EMPTY
29720: LIST
29721: LIST
29722: LIST
29723: LIST
29724: LIST
29725: LIST
29726: LIST
29727: LIST
29728: LIST
29729: LIST
29730: LIST
29731: LIST
29732: LIST
29733: LIST
29734: LIST
29735: LIST
29736: LIST
29737: LIST
29738: LIST
29739: LIST
29740: LIST
29741: LIST
29742: LIST
29743: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29744: LD_ADDR_VAR 0 27
29748: PUSH
29749: LD_INT 0
29751: PUSH
29752: LD_INT 0
29754: PUSH
29755: EMPTY
29756: LIST
29757: LIST
29758: PUSH
29759: LD_INT 0
29761: PUSH
29762: LD_INT 1
29764: NEG
29765: PUSH
29766: EMPTY
29767: LIST
29768: LIST
29769: PUSH
29770: LD_INT 1
29772: PUSH
29773: LD_INT 0
29775: PUSH
29776: EMPTY
29777: LIST
29778: LIST
29779: PUSH
29780: LD_INT 1
29782: PUSH
29783: LD_INT 1
29785: PUSH
29786: EMPTY
29787: LIST
29788: LIST
29789: PUSH
29790: LD_INT 0
29792: PUSH
29793: LD_INT 1
29795: PUSH
29796: EMPTY
29797: LIST
29798: LIST
29799: PUSH
29800: LD_INT 1
29802: NEG
29803: PUSH
29804: LD_INT 0
29806: PUSH
29807: EMPTY
29808: LIST
29809: LIST
29810: PUSH
29811: LD_INT 1
29813: NEG
29814: PUSH
29815: LD_INT 1
29817: NEG
29818: PUSH
29819: EMPTY
29820: LIST
29821: LIST
29822: PUSH
29823: LD_INT 1
29825: NEG
29826: PUSH
29827: LD_INT 2
29829: NEG
29830: PUSH
29831: EMPTY
29832: LIST
29833: LIST
29834: PUSH
29835: LD_INT 0
29837: PUSH
29838: LD_INT 2
29840: NEG
29841: PUSH
29842: EMPTY
29843: LIST
29844: LIST
29845: PUSH
29846: LD_INT 1
29848: PUSH
29849: LD_INT 1
29851: NEG
29852: PUSH
29853: EMPTY
29854: LIST
29855: LIST
29856: PUSH
29857: LD_INT 2
29859: PUSH
29860: LD_INT 0
29862: PUSH
29863: EMPTY
29864: LIST
29865: LIST
29866: PUSH
29867: LD_INT 2
29869: PUSH
29870: LD_INT 1
29872: PUSH
29873: EMPTY
29874: LIST
29875: LIST
29876: PUSH
29877: LD_INT 2
29879: PUSH
29880: LD_INT 2
29882: PUSH
29883: EMPTY
29884: LIST
29885: LIST
29886: PUSH
29887: LD_INT 1
29889: PUSH
29890: LD_INT 2
29892: PUSH
29893: EMPTY
29894: LIST
29895: LIST
29896: PUSH
29897: LD_INT 0
29899: PUSH
29900: LD_INT 2
29902: PUSH
29903: EMPTY
29904: LIST
29905: LIST
29906: PUSH
29907: LD_INT 1
29909: NEG
29910: PUSH
29911: LD_INT 1
29913: PUSH
29914: EMPTY
29915: LIST
29916: LIST
29917: PUSH
29918: LD_INT 2
29920: NEG
29921: PUSH
29922: LD_INT 0
29924: PUSH
29925: EMPTY
29926: LIST
29927: LIST
29928: PUSH
29929: LD_INT 2
29931: NEG
29932: PUSH
29933: LD_INT 1
29935: NEG
29936: PUSH
29937: EMPTY
29938: LIST
29939: LIST
29940: PUSH
29941: LD_INT 2
29943: NEG
29944: PUSH
29945: LD_INT 2
29947: NEG
29948: PUSH
29949: EMPTY
29950: LIST
29951: LIST
29952: PUSH
29953: LD_INT 1
29955: NEG
29956: PUSH
29957: LD_INT 2
29959: PUSH
29960: EMPTY
29961: LIST
29962: LIST
29963: PUSH
29964: LD_INT 2
29966: NEG
29967: PUSH
29968: LD_INT 1
29970: PUSH
29971: EMPTY
29972: LIST
29973: LIST
29974: PUSH
29975: LD_INT 3
29977: NEG
29978: PUSH
29979: LD_INT 1
29981: NEG
29982: PUSH
29983: EMPTY
29984: LIST
29985: LIST
29986: PUSH
29987: LD_INT 3
29989: NEG
29990: PUSH
29991: LD_INT 2
29993: NEG
29994: PUSH
29995: EMPTY
29996: LIST
29997: LIST
29998: PUSH
29999: EMPTY
30000: LIST
30001: LIST
30002: LIST
30003: LIST
30004: LIST
30005: LIST
30006: LIST
30007: LIST
30008: LIST
30009: LIST
30010: LIST
30011: LIST
30012: LIST
30013: LIST
30014: LIST
30015: LIST
30016: LIST
30017: LIST
30018: LIST
30019: LIST
30020: LIST
30021: LIST
30022: LIST
30023: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
30024: LD_ADDR_VAR 0 28
30028: PUSH
30029: LD_INT 0
30031: PUSH
30032: LD_INT 0
30034: PUSH
30035: EMPTY
30036: LIST
30037: LIST
30038: PUSH
30039: LD_INT 0
30041: PUSH
30042: LD_INT 1
30044: NEG
30045: PUSH
30046: EMPTY
30047: LIST
30048: LIST
30049: PUSH
30050: LD_INT 1
30052: PUSH
30053: LD_INT 0
30055: PUSH
30056: EMPTY
30057: LIST
30058: LIST
30059: PUSH
30060: LD_INT 1
30062: PUSH
30063: LD_INT 1
30065: PUSH
30066: EMPTY
30067: LIST
30068: LIST
30069: PUSH
30070: LD_INT 0
30072: PUSH
30073: LD_INT 1
30075: PUSH
30076: EMPTY
30077: LIST
30078: LIST
30079: PUSH
30080: LD_INT 1
30082: NEG
30083: PUSH
30084: LD_INT 0
30086: PUSH
30087: EMPTY
30088: LIST
30089: LIST
30090: PUSH
30091: LD_INT 1
30093: NEG
30094: PUSH
30095: LD_INT 1
30097: NEG
30098: PUSH
30099: EMPTY
30100: LIST
30101: LIST
30102: PUSH
30103: LD_INT 1
30105: NEG
30106: PUSH
30107: LD_INT 2
30109: NEG
30110: PUSH
30111: EMPTY
30112: LIST
30113: LIST
30114: PUSH
30115: LD_INT 0
30117: PUSH
30118: LD_INT 2
30120: NEG
30121: PUSH
30122: EMPTY
30123: LIST
30124: LIST
30125: PUSH
30126: LD_INT 1
30128: PUSH
30129: LD_INT 1
30131: NEG
30132: PUSH
30133: EMPTY
30134: LIST
30135: LIST
30136: PUSH
30137: LD_INT 2
30139: PUSH
30140: LD_INT 0
30142: PUSH
30143: EMPTY
30144: LIST
30145: LIST
30146: PUSH
30147: LD_INT 2
30149: PUSH
30150: LD_INT 1
30152: PUSH
30153: EMPTY
30154: LIST
30155: LIST
30156: PUSH
30157: LD_INT 2
30159: PUSH
30160: LD_INT 2
30162: PUSH
30163: EMPTY
30164: LIST
30165: LIST
30166: PUSH
30167: LD_INT 1
30169: PUSH
30170: LD_INT 2
30172: PUSH
30173: EMPTY
30174: LIST
30175: LIST
30176: PUSH
30177: LD_INT 0
30179: PUSH
30180: LD_INT 2
30182: PUSH
30183: EMPTY
30184: LIST
30185: LIST
30186: PUSH
30187: LD_INT 1
30189: NEG
30190: PUSH
30191: LD_INT 1
30193: PUSH
30194: EMPTY
30195: LIST
30196: LIST
30197: PUSH
30198: LD_INT 2
30200: NEG
30201: PUSH
30202: LD_INT 0
30204: PUSH
30205: EMPTY
30206: LIST
30207: LIST
30208: PUSH
30209: LD_INT 2
30211: NEG
30212: PUSH
30213: LD_INT 1
30215: NEG
30216: PUSH
30217: EMPTY
30218: LIST
30219: LIST
30220: PUSH
30221: LD_INT 2
30223: NEG
30224: PUSH
30225: LD_INT 2
30227: NEG
30228: PUSH
30229: EMPTY
30230: LIST
30231: LIST
30232: PUSH
30233: LD_INT 2
30235: NEG
30236: PUSH
30237: LD_INT 3
30239: NEG
30240: PUSH
30241: EMPTY
30242: LIST
30243: LIST
30244: PUSH
30245: LD_INT 1
30247: NEG
30248: PUSH
30249: LD_INT 3
30251: NEG
30252: PUSH
30253: EMPTY
30254: LIST
30255: LIST
30256: PUSH
30257: LD_INT 3
30259: NEG
30260: PUSH
30261: LD_INT 1
30263: NEG
30264: PUSH
30265: EMPTY
30266: LIST
30267: LIST
30268: PUSH
30269: LD_INT 3
30271: NEG
30272: PUSH
30273: LD_INT 2
30275: NEG
30276: PUSH
30277: EMPTY
30278: LIST
30279: LIST
30280: PUSH
30281: EMPTY
30282: LIST
30283: LIST
30284: LIST
30285: LIST
30286: LIST
30287: LIST
30288: LIST
30289: LIST
30290: LIST
30291: LIST
30292: LIST
30293: LIST
30294: LIST
30295: LIST
30296: LIST
30297: LIST
30298: LIST
30299: LIST
30300: LIST
30301: LIST
30302: LIST
30303: LIST
30304: LIST
30305: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
30306: LD_ADDR_VAR 0 29
30310: PUSH
30311: LD_INT 0
30313: PUSH
30314: LD_INT 0
30316: PUSH
30317: EMPTY
30318: LIST
30319: LIST
30320: PUSH
30321: LD_INT 0
30323: PUSH
30324: LD_INT 1
30326: NEG
30327: PUSH
30328: EMPTY
30329: LIST
30330: LIST
30331: PUSH
30332: LD_INT 1
30334: PUSH
30335: LD_INT 0
30337: PUSH
30338: EMPTY
30339: LIST
30340: LIST
30341: PUSH
30342: LD_INT 1
30344: PUSH
30345: LD_INT 1
30347: PUSH
30348: EMPTY
30349: LIST
30350: LIST
30351: PUSH
30352: LD_INT 0
30354: PUSH
30355: LD_INT 1
30357: PUSH
30358: EMPTY
30359: LIST
30360: LIST
30361: PUSH
30362: LD_INT 1
30364: NEG
30365: PUSH
30366: LD_INT 0
30368: PUSH
30369: EMPTY
30370: LIST
30371: LIST
30372: PUSH
30373: LD_INT 1
30375: NEG
30376: PUSH
30377: LD_INT 1
30379: NEG
30380: PUSH
30381: EMPTY
30382: LIST
30383: LIST
30384: PUSH
30385: LD_INT 1
30387: NEG
30388: PUSH
30389: LD_INT 2
30391: NEG
30392: PUSH
30393: EMPTY
30394: LIST
30395: LIST
30396: PUSH
30397: LD_INT 0
30399: PUSH
30400: LD_INT 2
30402: NEG
30403: PUSH
30404: EMPTY
30405: LIST
30406: LIST
30407: PUSH
30408: LD_INT 1
30410: PUSH
30411: LD_INT 1
30413: NEG
30414: PUSH
30415: EMPTY
30416: LIST
30417: LIST
30418: PUSH
30419: LD_INT 2
30421: PUSH
30422: LD_INT 0
30424: PUSH
30425: EMPTY
30426: LIST
30427: LIST
30428: PUSH
30429: LD_INT 2
30431: PUSH
30432: LD_INT 1
30434: PUSH
30435: EMPTY
30436: LIST
30437: LIST
30438: PUSH
30439: LD_INT 1
30441: PUSH
30442: LD_INT 2
30444: PUSH
30445: EMPTY
30446: LIST
30447: LIST
30448: PUSH
30449: LD_INT 0
30451: PUSH
30452: LD_INT 2
30454: PUSH
30455: EMPTY
30456: LIST
30457: LIST
30458: PUSH
30459: LD_INT 1
30461: NEG
30462: PUSH
30463: LD_INT 1
30465: PUSH
30466: EMPTY
30467: LIST
30468: LIST
30469: PUSH
30470: LD_INT 2
30472: NEG
30473: PUSH
30474: LD_INT 1
30476: NEG
30477: PUSH
30478: EMPTY
30479: LIST
30480: LIST
30481: PUSH
30482: LD_INT 2
30484: NEG
30485: PUSH
30486: LD_INT 2
30488: NEG
30489: PUSH
30490: EMPTY
30491: LIST
30492: LIST
30493: PUSH
30494: LD_INT 2
30496: NEG
30497: PUSH
30498: LD_INT 3
30500: NEG
30501: PUSH
30502: EMPTY
30503: LIST
30504: LIST
30505: PUSH
30506: LD_INT 2
30508: PUSH
30509: LD_INT 1
30511: NEG
30512: PUSH
30513: EMPTY
30514: LIST
30515: LIST
30516: PUSH
30517: LD_INT 3
30519: PUSH
30520: LD_INT 1
30522: PUSH
30523: EMPTY
30524: LIST
30525: LIST
30526: PUSH
30527: LD_INT 1
30529: PUSH
30530: LD_INT 3
30532: PUSH
30533: EMPTY
30534: LIST
30535: LIST
30536: PUSH
30537: LD_INT 1
30539: NEG
30540: PUSH
30541: LD_INT 2
30543: PUSH
30544: EMPTY
30545: LIST
30546: LIST
30547: PUSH
30548: LD_INT 3
30550: NEG
30551: PUSH
30552: LD_INT 2
30554: NEG
30555: PUSH
30556: EMPTY
30557: LIST
30558: LIST
30559: PUSH
30560: EMPTY
30561: LIST
30562: LIST
30563: LIST
30564: LIST
30565: LIST
30566: LIST
30567: LIST
30568: LIST
30569: LIST
30570: LIST
30571: LIST
30572: LIST
30573: LIST
30574: LIST
30575: LIST
30576: LIST
30577: LIST
30578: LIST
30579: LIST
30580: LIST
30581: LIST
30582: LIST
30583: LIST
30584: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30585: LD_ADDR_VAR 0 30
30589: PUSH
30590: LD_INT 0
30592: PUSH
30593: LD_INT 0
30595: PUSH
30596: EMPTY
30597: LIST
30598: LIST
30599: PUSH
30600: LD_INT 0
30602: PUSH
30603: LD_INT 1
30605: NEG
30606: PUSH
30607: EMPTY
30608: LIST
30609: LIST
30610: PUSH
30611: LD_INT 1
30613: PUSH
30614: LD_INT 0
30616: PUSH
30617: EMPTY
30618: LIST
30619: LIST
30620: PUSH
30621: LD_INT 1
30623: PUSH
30624: LD_INT 1
30626: PUSH
30627: EMPTY
30628: LIST
30629: LIST
30630: PUSH
30631: LD_INT 0
30633: PUSH
30634: LD_INT 1
30636: PUSH
30637: EMPTY
30638: LIST
30639: LIST
30640: PUSH
30641: LD_INT 1
30643: NEG
30644: PUSH
30645: LD_INT 0
30647: PUSH
30648: EMPTY
30649: LIST
30650: LIST
30651: PUSH
30652: LD_INT 1
30654: NEG
30655: PUSH
30656: LD_INT 1
30658: NEG
30659: PUSH
30660: EMPTY
30661: LIST
30662: LIST
30663: PUSH
30664: LD_INT 1
30666: NEG
30667: PUSH
30668: LD_INT 2
30670: NEG
30671: PUSH
30672: EMPTY
30673: LIST
30674: LIST
30675: PUSH
30676: LD_INT 0
30678: PUSH
30679: LD_INT 2
30681: NEG
30682: PUSH
30683: EMPTY
30684: LIST
30685: LIST
30686: PUSH
30687: LD_INT 1
30689: PUSH
30690: LD_INT 1
30692: NEG
30693: PUSH
30694: EMPTY
30695: LIST
30696: LIST
30697: PUSH
30698: LD_INT 2
30700: PUSH
30701: LD_INT 0
30703: PUSH
30704: EMPTY
30705: LIST
30706: LIST
30707: PUSH
30708: LD_INT 2
30710: PUSH
30711: LD_INT 1
30713: PUSH
30714: EMPTY
30715: LIST
30716: LIST
30717: PUSH
30718: LD_INT 2
30720: PUSH
30721: LD_INT 2
30723: PUSH
30724: EMPTY
30725: LIST
30726: LIST
30727: PUSH
30728: LD_INT 1
30730: PUSH
30731: LD_INT 2
30733: PUSH
30734: EMPTY
30735: LIST
30736: LIST
30737: PUSH
30738: LD_INT 1
30740: NEG
30741: PUSH
30742: LD_INT 1
30744: PUSH
30745: EMPTY
30746: LIST
30747: LIST
30748: PUSH
30749: LD_INT 2
30751: NEG
30752: PUSH
30753: LD_INT 0
30755: PUSH
30756: EMPTY
30757: LIST
30758: LIST
30759: PUSH
30760: LD_INT 2
30762: NEG
30763: PUSH
30764: LD_INT 1
30766: NEG
30767: PUSH
30768: EMPTY
30769: LIST
30770: LIST
30771: PUSH
30772: LD_INT 1
30774: NEG
30775: PUSH
30776: LD_INT 3
30778: NEG
30779: PUSH
30780: EMPTY
30781: LIST
30782: LIST
30783: PUSH
30784: LD_INT 1
30786: PUSH
30787: LD_INT 2
30789: NEG
30790: PUSH
30791: EMPTY
30792: LIST
30793: LIST
30794: PUSH
30795: LD_INT 3
30797: PUSH
30798: LD_INT 2
30800: PUSH
30801: EMPTY
30802: LIST
30803: LIST
30804: PUSH
30805: LD_INT 2
30807: PUSH
30808: LD_INT 3
30810: PUSH
30811: EMPTY
30812: LIST
30813: LIST
30814: PUSH
30815: LD_INT 2
30817: NEG
30818: PUSH
30819: LD_INT 1
30821: PUSH
30822: EMPTY
30823: LIST
30824: LIST
30825: PUSH
30826: LD_INT 3
30828: NEG
30829: PUSH
30830: LD_INT 1
30832: NEG
30833: PUSH
30834: EMPTY
30835: LIST
30836: LIST
30837: PUSH
30838: EMPTY
30839: LIST
30840: LIST
30841: LIST
30842: LIST
30843: LIST
30844: LIST
30845: LIST
30846: LIST
30847: LIST
30848: LIST
30849: LIST
30850: LIST
30851: LIST
30852: LIST
30853: LIST
30854: LIST
30855: LIST
30856: LIST
30857: LIST
30858: LIST
30859: LIST
30860: LIST
30861: LIST
30862: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
30863: LD_ADDR_VAR 0 31
30867: PUSH
30868: LD_INT 0
30870: PUSH
30871: LD_INT 0
30873: PUSH
30874: EMPTY
30875: LIST
30876: LIST
30877: PUSH
30878: LD_INT 0
30880: PUSH
30881: LD_INT 1
30883: NEG
30884: PUSH
30885: EMPTY
30886: LIST
30887: LIST
30888: PUSH
30889: LD_INT 1
30891: PUSH
30892: LD_INT 0
30894: PUSH
30895: EMPTY
30896: LIST
30897: LIST
30898: PUSH
30899: LD_INT 1
30901: PUSH
30902: LD_INT 1
30904: PUSH
30905: EMPTY
30906: LIST
30907: LIST
30908: PUSH
30909: LD_INT 0
30911: PUSH
30912: LD_INT 1
30914: PUSH
30915: EMPTY
30916: LIST
30917: LIST
30918: PUSH
30919: LD_INT 1
30921: NEG
30922: PUSH
30923: LD_INT 0
30925: PUSH
30926: EMPTY
30927: LIST
30928: LIST
30929: PUSH
30930: LD_INT 1
30932: NEG
30933: PUSH
30934: LD_INT 1
30936: NEG
30937: PUSH
30938: EMPTY
30939: LIST
30940: LIST
30941: PUSH
30942: LD_INT 1
30944: NEG
30945: PUSH
30946: LD_INT 2
30948: NEG
30949: PUSH
30950: EMPTY
30951: LIST
30952: LIST
30953: PUSH
30954: LD_INT 1
30956: PUSH
30957: LD_INT 1
30959: NEG
30960: PUSH
30961: EMPTY
30962: LIST
30963: LIST
30964: PUSH
30965: LD_INT 2
30967: PUSH
30968: LD_INT 0
30970: PUSH
30971: EMPTY
30972: LIST
30973: LIST
30974: PUSH
30975: LD_INT 2
30977: PUSH
30978: LD_INT 1
30980: PUSH
30981: EMPTY
30982: LIST
30983: LIST
30984: PUSH
30985: LD_INT 2
30987: PUSH
30988: LD_INT 2
30990: PUSH
30991: EMPTY
30992: LIST
30993: LIST
30994: PUSH
30995: LD_INT 1
30997: PUSH
30998: LD_INT 2
31000: PUSH
31001: EMPTY
31002: LIST
31003: LIST
31004: PUSH
31005: LD_INT 0
31007: PUSH
31008: LD_INT 2
31010: PUSH
31011: EMPTY
31012: LIST
31013: LIST
31014: PUSH
31015: LD_INT 1
31017: NEG
31018: PUSH
31019: LD_INT 1
31021: PUSH
31022: EMPTY
31023: LIST
31024: LIST
31025: PUSH
31026: LD_INT 2
31028: NEG
31029: PUSH
31030: LD_INT 1
31032: NEG
31033: PUSH
31034: EMPTY
31035: LIST
31036: LIST
31037: PUSH
31038: LD_INT 2
31040: NEG
31041: PUSH
31042: LD_INT 2
31044: NEG
31045: PUSH
31046: EMPTY
31047: LIST
31048: LIST
31049: PUSH
31050: LD_INT 2
31052: NEG
31053: PUSH
31054: LD_INT 3
31056: NEG
31057: PUSH
31058: EMPTY
31059: LIST
31060: LIST
31061: PUSH
31062: LD_INT 2
31064: PUSH
31065: LD_INT 1
31067: NEG
31068: PUSH
31069: EMPTY
31070: LIST
31071: LIST
31072: PUSH
31073: LD_INT 3
31075: PUSH
31076: LD_INT 1
31078: PUSH
31079: EMPTY
31080: LIST
31081: LIST
31082: PUSH
31083: LD_INT 1
31085: PUSH
31086: LD_INT 3
31088: PUSH
31089: EMPTY
31090: LIST
31091: LIST
31092: PUSH
31093: LD_INT 1
31095: NEG
31096: PUSH
31097: LD_INT 2
31099: PUSH
31100: EMPTY
31101: LIST
31102: LIST
31103: PUSH
31104: LD_INT 3
31106: NEG
31107: PUSH
31108: LD_INT 2
31110: NEG
31111: PUSH
31112: EMPTY
31113: LIST
31114: LIST
31115: PUSH
31116: EMPTY
31117: LIST
31118: LIST
31119: LIST
31120: LIST
31121: LIST
31122: LIST
31123: LIST
31124: LIST
31125: LIST
31126: LIST
31127: LIST
31128: LIST
31129: LIST
31130: LIST
31131: LIST
31132: LIST
31133: LIST
31134: LIST
31135: LIST
31136: LIST
31137: LIST
31138: LIST
31139: LIST
31140: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31141: LD_ADDR_VAR 0 32
31145: PUSH
31146: LD_INT 0
31148: PUSH
31149: LD_INT 0
31151: PUSH
31152: EMPTY
31153: LIST
31154: LIST
31155: PUSH
31156: LD_INT 0
31158: PUSH
31159: LD_INT 1
31161: NEG
31162: PUSH
31163: EMPTY
31164: LIST
31165: LIST
31166: PUSH
31167: LD_INT 1
31169: PUSH
31170: LD_INT 0
31172: PUSH
31173: EMPTY
31174: LIST
31175: LIST
31176: PUSH
31177: LD_INT 1
31179: PUSH
31180: LD_INT 1
31182: PUSH
31183: EMPTY
31184: LIST
31185: LIST
31186: PUSH
31187: LD_INT 0
31189: PUSH
31190: LD_INT 1
31192: PUSH
31193: EMPTY
31194: LIST
31195: LIST
31196: PUSH
31197: LD_INT 1
31199: NEG
31200: PUSH
31201: LD_INT 0
31203: PUSH
31204: EMPTY
31205: LIST
31206: LIST
31207: PUSH
31208: LD_INT 1
31210: NEG
31211: PUSH
31212: LD_INT 1
31214: NEG
31215: PUSH
31216: EMPTY
31217: LIST
31218: LIST
31219: PUSH
31220: LD_INT 1
31222: NEG
31223: PUSH
31224: LD_INT 2
31226: NEG
31227: PUSH
31228: EMPTY
31229: LIST
31230: LIST
31231: PUSH
31232: LD_INT 0
31234: PUSH
31235: LD_INT 2
31237: NEG
31238: PUSH
31239: EMPTY
31240: LIST
31241: LIST
31242: PUSH
31243: LD_INT 1
31245: PUSH
31246: LD_INT 1
31248: NEG
31249: PUSH
31250: EMPTY
31251: LIST
31252: LIST
31253: PUSH
31254: LD_INT 2
31256: PUSH
31257: LD_INT 1
31259: PUSH
31260: EMPTY
31261: LIST
31262: LIST
31263: PUSH
31264: LD_INT 2
31266: PUSH
31267: LD_INT 2
31269: PUSH
31270: EMPTY
31271: LIST
31272: LIST
31273: PUSH
31274: LD_INT 1
31276: PUSH
31277: LD_INT 2
31279: PUSH
31280: EMPTY
31281: LIST
31282: LIST
31283: PUSH
31284: LD_INT 0
31286: PUSH
31287: LD_INT 2
31289: PUSH
31290: EMPTY
31291: LIST
31292: LIST
31293: PUSH
31294: LD_INT 1
31296: NEG
31297: PUSH
31298: LD_INT 1
31300: PUSH
31301: EMPTY
31302: LIST
31303: LIST
31304: PUSH
31305: LD_INT 2
31307: NEG
31308: PUSH
31309: LD_INT 0
31311: PUSH
31312: EMPTY
31313: LIST
31314: LIST
31315: PUSH
31316: LD_INT 2
31318: NEG
31319: PUSH
31320: LD_INT 1
31322: NEG
31323: PUSH
31324: EMPTY
31325: LIST
31326: LIST
31327: PUSH
31328: LD_INT 1
31330: NEG
31331: PUSH
31332: LD_INT 3
31334: NEG
31335: PUSH
31336: EMPTY
31337: LIST
31338: LIST
31339: PUSH
31340: LD_INT 1
31342: PUSH
31343: LD_INT 2
31345: NEG
31346: PUSH
31347: EMPTY
31348: LIST
31349: LIST
31350: PUSH
31351: LD_INT 3
31353: PUSH
31354: LD_INT 2
31356: PUSH
31357: EMPTY
31358: LIST
31359: LIST
31360: PUSH
31361: LD_INT 2
31363: PUSH
31364: LD_INT 3
31366: PUSH
31367: EMPTY
31368: LIST
31369: LIST
31370: PUSH
31371: LD_INT 2
31373: NEG
31374: PUSH
31375: LD_INT 1
31377: PUSH
31378: EMPTY
31379: LIST
31380: LIST
31381: PUSH
31382: LD_INT 3
31384: NEG
31385: PUSH
31386: LD_INT 1
31388: NEG
31389: PUSH
31390: EMPTY
31391: LIST
31392: LIST
31393: PUSH
31394: EMPTY
31395: LIST
31396: LIST
31397: LIST
31398: LIST
31399: LIST
31400: LIST
31401: LIST
31402: LIST
31403: LIST
31404: LIST
31405: LIST
31406: LIST
31407: LIST
31408: LIST
31409: LIST
31410: LIST
31411: LIST
31412: LIST
31413: LIST
31414: LIST
31415: LIST
31416: LIST
31417: LIST
31418: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
31419: LD_ADDR_VAR 0 33
31423: PUSH
31424: LD_INT 0
31426: PUSH
31427: LD_INT 0
31429: PUSH
31430: EMPTY
31431: LIST
31432: LIST
31433: PUSH
31434: LD_INT 0
31436: PUSH
31437: LD_INT 1
31439: NEG
31440: PUSH
31441: EMPTY
31442: LIST
31443: LIST
31444: PUSH
31445: LD_INT 1
31447: PUSH
31448: LD_INT 0
31450: PUSH
31451: EMPTY
31452: LIST
31453: LIST
31454: PUSH
31455: LD_INT 1
31457: PUSH
31458: LD_INT 1
31460: PUSH
31461: EMPTY
31462: LIST
31463: LIST
31464: PUSH
31465: LD_INT 0
31467: PUSH
31468: LD_INT 1
31470: PUSH
31471: EMPTY
31472: LIST
31473: LIST
31474: PUSH
31475: LD_INT 1
31477: NEG
31478: PUSH
31479: LD_INT 0
31481: PUSH
31482: EMPTY
31483: LIST
31484: LIST
31485: PUSH
31486: LD_INT 1
31488: NEG
31489: PUSH
31490: LD_INT 1
31492: NEG
31493: PUSH
31494: EMPTY
31495: LIST
31496: LIST
31497: PUSH
31498: LD_INT 1
31500: NEG
31501: PUSH
31502: LD_INT 2
31504: NEG
31505: PUSH
31506: EMPTY
31507: LIST
31508: LIST
31509: PUSH
31510: LD_INT 1
31512: PUSH
31513: LD_INT 1
31515: NEG
31516: PUSH
31517: EMPTY
31518: LIST
31519: LIST
31520: PUSH
31521: LD_INT 2
31523: PUSH
31524: LD_INT 0
31526: PUSH
31527: EMPTY
31528: LIST
31529: LIST
31530: PUSH
31531: LD_INT 2
31533: PUSH
31534: LD_INT 1
31536: PUSH
31537: EMPTY
31538: LIST
31539: LIST
31540: PUSH
31541: LD_INT 1
31543: PUSH
31544: LD_INT 2
31546: PUSH
31547: EMPTY
31548: LIST
31549: LIST
31550: PUSH
31551: LD_INT 0
31553: PUSH
31554: LD_INT 2
31556: PUSH
31557: EMPTY
31558: LIST
31559: LIST
31560: PUSH
31561: LD_INT 1
31563: NEG
31564: PUSH
31565: LD_INT 1
31567: PUSH
31568: EMPTY
31569: LIST
31570: LIST
31571: PUSH
31572: LD_INT 2
31574: NEG
31575: PUSH
31576: LD_INT 0
31578: PUSH
31579: EMPTY
31580: LIST
31581: LIST
31582: PUSH
31583: LD_INT 2
31585: NEG
31586: PUSH
31587: LD_INT 1
31589: NEG
31590: PUSH
31591: EMPTY
31592: LIST
31593: LIST
31594: PUSH
31595: LD_INT 2
31597: NEG
31598: PUSH
31599: LD_INT 2
31601: NEG
31602: PUSH
31603: EMPTY
31604: LIST
31605: LIST
31606: PUSH
31607: LD_INT 2
31609: NEG
31610: PUSH
31611: LD_INT 3
31613: NEG
31614: PUSH
31615: EMPTY
31616: LIST
31617: LIST
31618: PUSH
31619: LD_INT 2
31621: PUSH
31622: LD_INT 1
31624: NEG
31625: PUSH
31626: EMPTY
31627: LIST
31628: LIST
31629: PUSH
31630: LD_INT 3
31632: PUSH
31633: LD_INT 1
31635: PUSH
31636: EMPTY
31637: LIST
31638: LIST
31639: PUSH
31640: LD_INT 1
31642: PUSH
31643: LD_INT 3
31645: PUSH
31646: EMPTY
31647: LIST
31648: LIST
31649: PUSH
31650: LD_INT 1
31652: NEG
31653: PUSH
31654: LD_INT 2
31656: PUSH
31657: EMPTY
31658: LIST
31659: LIST
31660: PUSH
31661: LD_INT 3
31663: NEG
31664: PUSH
31665: LD_INT 2
31667: NEG
31668: PUSH
31669: EMPTY
31670: LIST
31671: LIST
31672: PUSH
31673: EMPTY
31674: LIST
31675: LIST
31676: LIST
31677: LIST
31678: LIST
31679: LIST
31680: LIST
31681: LIST
31682: LIST
31683: LIST
31684: LIST
31685: LIST
31686: LIST
31687: LIST
31688: LIST
31689: LIST
31690: LIST
31691: LIST
31692: LIST
31693: LIST
31694: LIST
31695: LIST
31696: LIST
31697: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31698: LD_ADDR_VAR 0 34
31702: PUSH
31703: LD_INT 0
31705: PUSH
31706: LD_INT 0
31708: PUSH
31709: EMPTY
31710: LIST
31711: LIST
31712: PUSH
31713: LD_INT 0
31715: PUSH
31716: LD_INT 1
31718: NEG
31719: PUSH
31720: EMPTY
31721: LIST
31722: LIST
31723: PUSH
31724: LD_INT 1
31726: PUSH
31727: LD_INT 0
31729: PUSH
31730: EMPTY
31731: LIST
31732: LIST
31733: PUSH
31734: LD_INT 1
31736: PUSH
31737: LD_INT 1
31739: PUSH
31740: EMPTY
31741: LIST
31742: LIST
31743: PUSH
31744: LD_INT 0
31746: PUSH
31747: LD_INT 1
31749: PUSH
31750: EMPTY
31751: LIST
31752: LIST
31753: PUSH
31754: LD_INT 1
31756: NEG
31757: PUSH
31758: LD_INT 0
31760: PUSH
31761: EMPTY
31762: LIST
31763: LIST
31764: PUSH
31765: LD_INT 1
31767: NEG
31768: PUSH
31769: LD_INT 1
31771: NEG
31772: PUSH
31773: EMPTY
31774: LIST
31775: LIST
31776: PUSH
31777: LD_INT 1
31779: NEG
31780: PUSH
31781: LD_INT 2
31783: NEG
31784: PUSH
31785: EMPTY
31786: LIST
31787: LIST
31788: PUSH
31789: LD_INT 0
31791: PUSH
31792: LD_INT 2
31794: NEG
31795: PUSH
31796: EMPTY
31797: LIST
31798: LIST
31799: PUSH
31800: LD_INT 1
31802: PUSH
31803: LD_INT 1
31805: NEG
31806: PUSH
31807: EMPTY
31808: LIST
31809: LIST
31810: PUSH
31811: LD_INT 2
31813: PUSH
31814: LD_INT 1
31816: PUSH
31817: EMPTY
31818: LIST
31819: LIST
31820: PUSH
31821: LD_INT 2
31823: PUSH
31824: LD_INT 2
31826: PUSH
31827: EMPTY
31828: LIST
31829: LIST
31830: PUSH
31831: LD_INT 1
31833: PUSH
31834: LD_INT 2
31836: PUSH
31837: EMPTY
31838: LIST
31839: LIST
31840: PUSH
31841: LD_INT 1
31843: NEG
31844: PUSH
31845: LD_INT 1
31847: PUSH
31848: EMPTY
31849: LIST
31850: LIST
31851: PUSH
31852: LD_INT 2
31854: NEG
31855: PUSH
31856: LD_INT 0
31858: PUSH
31859: EMPTY
31860: LIST
31861: LIST
31862: PUSH
31863: LD_INT 2
31865: NEG
31866: PUSH
31867: LD_INT 1
31869: NEG
31870: PUSH
31871: EMPTY
31872: LIST
31873: LIST
31874: PUSH
31875: LD_INT 2
31877: NEG
31878: PUSH
31879: LD_INT 2
31881: NEG
31882: PUSH
31883: EMPTY
31884: LIST
31885: LIST
31886: PUSH
31887: LD_INT 1
31889: NEG
31890: PUSH
31891: LD_INT 3
31893: NEG
31894: PUSH
31895: EMPTY
31896: LIST
31897: LIST
31898: PUSH
31899: LD_INT 1
31901: PUSH
31902: LD_INT 2
31904: NEG
31905: PUSH
31906: EMPTY
31907: LIST
31908: LIST
31909: PUSH
31910: LD_INT 3
31912: PUSH
31913: LD_INT 2
31915: PUSH
31916: EMPTY
31917: LIST
31918: LIST
31919: PUSH
31920: LD_INT 2
31922: PUSH
31923: LD_INT 3
31925: PUSH
31926: EMPTY
31927: LIST
31928: LIST
31929: PUSH
31930: LD_INT 2
31932: NEG
31933: PUSH
31934: LD_INT 1
31936: PUSH
31937: EMPTY
31938: LIST
31939: LIST
31940: PUSH
31941: LD_INT 3
31943: NEG
31944: PUSH
31945: LD_INT 1
31947: NEG
31948: PUSH
31949: EMPTY
31950: LIST
31951: LIST
31952: PUSH
31953: EMPTY
31954: LIST
31955: LIST
31956: LIST
31957: LIST
31958: LIST
31959: LIST
31960: LIST
31961: LIST
31962: LIST
31963: LIST
31964: LIST
31965: LIST
31966: LIST
31967: LIST
31968: LIST
31969: LIST
31970: LIST
31971: LIST
31972: LIST
31973: LIST
31974: LIST
31975: LIST
31976: LIST
31977: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
31978: LD_ADDR_VAR 0 35
31982: PUSH
31983: LD_INT 0
31985: PUSH
31986: LD_INT 0
31988: PUSH
31989: EMPTY
31990: LIST
31991: LIST
31992: PUSH
31993: LD_INT 0
31995: PUSH
31996: LD_INT 1
31998: NEG
31999: PUSH
32000: EMPTY
32001: LIST
32002: LIST
32003: PUSH
32004: LD_INT 1
32006: PUSH
32007: LD_INT 0
32009: PUSH
32010: EMPTY
32011: LIST
32012: LIST
32013: PUSH
32014: LD_INT 1
32016: PUSH
32017: LD_INT 1
32019: PUSH
32020: EMPTY
32021: LIST
32022: LIST
32023: PUSH
32024: LD_INT 0
32026: PUSH
32027: LD_INT 1
32029: PUSH
32030: EMPTY
32031: LIST
32032: LIST
32033: PUSH
32034: LD_INT 1
32036: NEG
32037: PUSH
32038: LD_INT 0
32040: PUSH
32041: EMPTY
32042: LIST
32043: LIST
32044: PUSH
32045: LD_INT 1
32047: NEG
32048: PUSH
32049: LD_INT 1
32051: NEG
32052: PUSH
32053: EMPTY
32054: LIST
32055: LIST
32056: PUSH
32057: LD_INT 2
32059: PUSH
32060: LD_INT 1
32062: PUSH
32063: EMPTY
32064: LIST
32065: LIST
32066: PUSH
32067: LD_INT 2
32069: NEG
32070: PUSH
32071: LD_INT 1
32073: NEG
32074: PUSH
32075: EMPTY
32076: LIST
32077: LIST
32078: PUSH
32079: EMPTY
32080: LIST
32081: LIST
32082: LIST
32083: LIST
32084: LIST
32085: LIST
32086: LIST
32087: LIST
32088: LIST
32089: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
32090: LD_ADDR_VAR 0 36
32094: PUSH
32095: LD_INT 0
32097: PUSH
32098: LD_INT 0
32100: PUSH
32101: EMPTY
32102: LIST
32103: LIST
32104: PUSH
32105: LD_INT 0
32107: PUSH
32108: LD_INT 1
32110: NEG
32111: PUSH
32112: EMPTY
32113: LIST
32114: LIST
32115: PUSH
32116: LD_INT 1
32118: PUSH
32119: LD_INT 0
32121: PUSH
32122: EMPTY
32123: LIST
32124: LIST
32125: PUSH
32126: LD_INT 1
32128: PUSH
32129: LD_INT 1
32131: PUSH
32132: EMPTY
32133: LIST
32134: LIST
32135: PUSH
32136: LD_INT 0
32138: PUSH
32139: LD_INT 1
32141: PUSH
32142: EMPTY
32143: LIST
32144: LIST
32145: PUSH
32146: LD_INT 1
32148: NEG
32149: PUSH
32150: LD_INT 0
32152: PUSH
32153: EMPTY
32154: LIST
32155: LIST
32156: PUSH
32157: LD_INT 1
32159: NEG
32160: PUSH
32161: LD_INT 1
32163: NEG
32164: PUSH
32165: EMPTY
32166: LIST
32167: LIST
32168: PUSH
32169: LD_INT 1
32171: NEG
32172: PUSH
32173: LD_INT 2
32175: NEG
32176: PUSH
32177: EMPTY
32178: LIST
32179: LIST
32180: PUSH
32181: LD_INT 1
32183: PUSH
32184: LD_INT 2
32186: PUSH
32187: EMPTY
32188: LIST
32189: LIST
32190: PUSH
32191: EMPTY
32192: LIST
32193: LIST
32194: LIST
32195: LIST
32196: LIST
32197: LIST
32198: LIST
32199: LIST
32200: LIST
32201: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
32202: LD_ADDR_VAR 0 37
32206: PUSH
32207: LD_INT 0
32209: PUSH
32210: LD_INT 0
32212: PUSH
32213: EMPTY
32214: LIST
32215: LIST
32216: PUSH
32217: LD_INT 0
32219: PUSH
32220: LD_INT 1
32222: NEG
32223: PUSH
32224: EMPTY
32225: LIST
32226: LIST
32227: PUSH
32228: LD_INT 1
32230: PUSH
32231: LD_INT 0
32233: PUSH
32234: EMPTY
32235: LIST
32236: LIST
32237: PUSH
32238: LD_INT 1
32240: PUSH
32241: LD_INT 1
32243: PUSH
32244: EMPTY
32245: LIST
32246: LIST
32247: PUSH
32248: LD_INT 0
32250: PUSH
32251: LD_INT 1
32253: PUSH
32254: EMPTY
32255: LIST
32256: LIST
32257: PUSH
32258: LD_INT 1
32260: NEG
32261: PUSH
32262: LD_INT 0
32264: PUSH
32265: EMPTY
32266: LIST
32267: LIST
32268: PUSH
32269: LD_INT 1
32271: NEG
32272: PUSH
32273: LD_INT 1
32275: NEG
32276: PUSH
32277: EMPTY
32278: LIST
32279: LIST
32280: PUSH
32281: LD_INT 1
32283: PUSH
32284: LD_INT 1
32286: NEG
32287: PUSH
32288: EMPTY
32289: LIST
32290: LIST
32291: PUSH
32292: LD_INT 1
32294: NEG
32295: PUSH
32296: LD_INT 1
32298: PUSH
32299: EMPTY
32300: LIST
32301: LIST
32302: PUSH
32303: EMPTY
32304: LIST
32305: LIST
32306: LIST
32307: LIST
32308: LIST
32309: LIST
32310: LIST
32311: LIST
32312: LIST
32313: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
32314: LD_ADDR_VAR 0 38
32318: PUSH
32319: LD_INT 0
32321: PUSH
32322: LD_INT 0
32324: PUSH
32325: EMPTY
32326: LIST
32327: LIST
32328: PUSH
32329: LD_INT 0
32331: PUSH
32332: LD_INT 1
32334: NEG
32335: PUSH
32336: EMPTY
32337: LIST
32338: LIST
32339: PUSH
32340: LD_INT 1
32342: PUSH
32343: LD_INT 0
32345: PUSH
32346: EMPTY
32347: LIST
32348: LIST
32349: PUSH
32350: LD_INT 1
32352: PUSH
32353: LD_INT 1
32355: PUSH
32356: EMPTY
32357: LIST
32358: LIST
32359: PUSH
32360: LD_INT 0
32362: PUSH
32363: LD_INT 1
32365: PUSH
32366: EMPTY
32367: LIST
32368: LIST
32369: PUSH
32370: LD_INT 1
32372: NEG
32373: PUSH
32374: LD_INT 0
32376: PUSH
32377: EMPTY
32378: LIST
32379: LIST
32380: PUSH
32381: LD_INT 1
32383: NEG
32384: PUSH
32385: LD_INT 1
32387: NEG
32388: PUSH
32389: EMPTY
32390: LIST
32391: LIST
32392: PUSH
32393: LD_INT 2
32395: PUSH
32396: LD_INT 1
32398: PUSH
32399: EMPTY
32400: LIST
32401: LIST
32402: PUSH
32403: LD_INT 2
32405: NEG
32406: PUSH
32407: LD_INT 1
32409: NEG
32410: PUSH
32411: EMPTY
32412: LIST
32413: LIST
32414: PUSH
32415: EMPTY
32416: LIST
32417: LIST
32418: LIST
32419: LIST
32420: LIST
32421: LIST
32422: LIST
32423: LIST
32424: LIST
32425: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
32426: LD_ADDR_VAR 0 39
32430: PUSH
32431: LD_INT 0
32433: PUSH
32434: LD_INT 0
32436: PUSH
32437: EMPTY
32438: LIST
32439: LIST
32440: PUSH
32441: LD_INT 0
32443: PUSH
32444: LD_INT 1
32446: NEG
32447: PUSH
32448: EMPTY
32449: LIST
32450: LIST
32451: PUSH
32452: LD_INT 1
32454: PUSH
32455: LD_INT 0
32457: PUSH
32458: EMPTY
32459: LIST
32460: LIST
32461: PUSH
32462: LD_INT 1
32464: PUSH
32465: LD_INT 1
32467: PUSH
32468: EMPTY
32469: LIST
32470: LIST
32471: PUSH
32472: LD_INT 0
32474: PUSH
32475: LD_INT 1
32477: PUSH
32478: EMPTY
32479: LIST
32480: LIST
32481: PUSH
32482: LD_INT 1
32484: NEG
32485: PUSH
32486: LD_INT 0
32488: PUSH
32489: EMPTY
32490: LIST
32491: LIST
32492: PUSH
32493: LD_INT 1
32495: NEG
32496: PUSH
32497: LD_INT 1
32499: NEG
32500: PUSH
32501: EMPTY
32502: LIST
32503: LIST
32504: PUSH
32505: LD_INT 1
32507: NEG
32508: PUSH
32509: LD_INT 2
32511: NEG
32512: PUSH
32513: EMPTY
32514: LIST
32515: LIST
32516: PUSH
32517: LD_INT 1
32519: PUSH
32520: LD_INT 2
32522: PUSH
32523: EMPTY
32524: LIST
32525: LIST
32526: PUSH
32527: EMPTY
32528: LIST
32529: LIST
32530: LIST
32531: LIST
32532: LIST
32533: LIST
32534: LIST
32535: LIST
32536: LIST
32537: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
32538: LD_ADDR_VAR 0 40
32542: PUSH
32543: LD_INT 0
32545: PUSH
32546: LD_INT 0
32548: PUSH
32549: EMPTY
32550: LIST
32551: LIST
32552: PUSH
32553: LD_INT 0
32555: PUSH
32556: LD_INT 1
32558: NEG
32559: PUSH
32560: EMPTY
32561: LIST
32562: LIST
32563: PUSH
32564: LD_INT 1
32566: PUSH
32567: LD_INT 0
32569: PUSH
32570: EMPTY
32571: LIST
32572: LIST
32573: PUSH
32574: LD_INT 1
32576: PUSH
32577: LD_INT 1
32579: PUSH
32580: EMPTY
32581: LIST
32582: LIST
32583: PUSH
32584: LD_INT 0
32586: PUSH
32587: LD_INT 1
32589: PUSH
32590: EMPTY
32591: LIST
32592: LIST
32593: PUSH
32594: LD_INT 1
32596: NEG
32597: PUSH
32598: LD_INT 0
32600: PUSH
32601: EMPTY
32602: LIST
32603: LIST
32604: PUSH
32605: LD_INT 1
32607: NEG
32608: PUSH
32609: LD_INT 1
32611: NEG
32612: PUSH
32613: EMPTY
32614: LIST
32615: LIST
32616: PUSH
32617: LD_INT 1
32619: PUSH
32620: LD_INT 1
32622: NEG
32623: PUSH
32624: EMPTY
32625: LIST
32626: LIST
32627: PUSH
32628: LD_INT 1
32630: NEG
32631: PUSH
32632: LD_INT 1
32634: PUSH
32635: EMPTY
32636: LIST
32637: LIST
32638: PUSH
32639: EMPTY
32640: LIST
32641: LIST
32642: LIST
32643: LIST
32644: LIST
32645: LIST
32646: LIST
32647: LIST
32648: LIST
32649: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32650: LD_ADDR_VAR 0 41
32654: PUSH
32655: LD_INT 0
32657: PUSH
32658: LD_INT 0
32660: PUSH
32661: EMPTY
32662: LIST
32663: LIST
32664: PUSH
32665: LD_INT 0
32667: PUSH
32668: LD_INT 1
32670: NEG
32671: PUSH
32672: EMPTY
32673: LIST
32674: LIST
32675: PUSH
32676: LD_INT 1
32678: PUSH
32679: LD_INT 0
32681: PUSH
32682: EMPTY
32683: LIST
32684: LIST
32685: PUSH
32686: LD_INT 1
32688: PUSH
32689: LD_INT 1
32691: PUSH
32692: EMPTY
32693: LIST
32694: LIST
32695: PUSH
32696: LD_INT 0
32698: PUSH
32699: LD_INT 1
32701: PUSH
32702: EMPTY
32703: LIST
32704: LIST
32705: PUSH
32706: LD_INT 1
32708: NEG
32709: PUSH
32710: LD_INT 0
32712: PUSH
32713: EMPTY
32714: LIST
32715: LIST
32716: PUSH
32717: LD_INT 1
32719: NEG
32720: PUSH
32721: LD_INT 1
32723: NEG
32724: PUSH
32725: EMPTY
32726: LIST
32727: LIST
32728: PUSH
32729: LD_INT 1
32731: NEG
32732: PUSH
32733: LD_INT 2
32735: NEG
32736: PUSH
32737: EMPTY
32738: LIST
32739: LIST
32740: PUSH
32741: LD_INT 1
32743: PUSH
32744: LD_INT 1
32746: NEG
32747: PUSH
32748: EMPTY
32749: LIST
32750: LIST
32751: PUSH
32752: LD_INT 2
32754: PUSH
32755: LD_INT 0
32757: PUSH
32758: EMPTY
32759: LIST
32760: LIST
32761: PUSH
32762: LD_INT 2
32764: PUSH
32765: LD_INT 1
32767: PUSH
32768: EMPTY
32769: LIST
32770: LIST
32771: PUSH
32772: LD_INT 2
32774: PUSH
32775: LD_INT 2
32777: PUSH
32778: EMPTY
32779: LIST
32780: LIST
32781: PUSH
32782: LD_INT 1
32784: PUSH
32785: LD_INT 2
32787: PUSH
32788: EMPTY
32789: LIST
32790: LIST
32791: PUSH
32792: LD_INT 1
32794: NEG
32795: PUSH
32796: LD_INT 1
32798: PUSH
32799: EMPTY
32800: LIST
32801: LIST
32802: PUSH
32803: LD_INT 2
32805: NEG
32806: PUSH
32807: LD_INT 0
32809: PUSH
32810: EMPTY
32811: LIST
32812: LIST
32813: PUSH
32814: LD_INT 2
32816: NEG
32817: PUSH
32818: LD_INT 1
32820: NEG
32821: PUSH
32822: EMPTY
32823: LIST
32824: LIST
32825: PUSH
32826: LD_INT 2
32828: NEG
32829: PUSH
32830: LD_INT 2
32832: NEG
32833: PUSH
32834: EMPTY
32835: LIST
32836: LIST
32837: PUSH
32838: LD_INT 2
32840: NEG
32841: PUSH
32842: LD_INT 3
32844: NEG
32845: PUSH
32846: EMPTY
32847: LIST
32848: LIST
32849: PUSH
32850: LD_INT 2
32852: PUSH
32853: LD_INT 1
32855: NEG
32856: PUSH
32857: EMPTY
32858: LIST
32859: LIST
32860: PUSH
32861: LD_INT 3
32863: PUSH
32864: LD_INT 0
32866: PUSH
32867: EMPTY
32868: LIST
32869: LIST
32870: PUSH
32871: LD_INT 3
32873: PUSH
32874: LD_INT 1
32876: PUSH
32877: EMPTY
32878: LIST
32879: LIST
32880: PUSH
32881: LD_INT 3
32883: PUSH
32884: LD_INT 2
32886: PUSH
32887: EMPTY
32888: LIST
32889: LIST
32890: PUSH
32891: LD_INT 3
32893: PUSH
32894: LD_INT 3
32896: PUSH
32897: EMPTY
32898: LIST
32899: LIST
32900: PUSH
32901: LD_INT 2
32903: PUSH
32904: LD_INT 3
32906: PUSH
32907: EMPTY
32908: LIST
32909: LIST
32910: PUSH
32911: LD_INT 2
32913: NEG
32914: PUSH
32915: LD_INT 1
32917: PUSH
32918: EMPTY
32919: LIST
32920: LIST
32921: PUSH
32922: LD_INT 3
32924: NEG
32925: PUSH
32926: LD_INT 0
32928: PUSH
32929: EMPTY
32930: LIST
32931: LIST
32932: PUSH
32933: LD_INT 3
32935: NEG
32936: PUSH
32937: LD_INT 1
32939: NEG
32940: PUSH
32941: EMPTY
32942: LIST
32943: LIST
32944: PUSH
32945: LD_INT 3
32947: NEG
32948: PUSH
32949: LD_INT 2
32951: NEG
32952: PUSH
32953: EMPTY
32954: LIST
32955: LIST
32956: PUSH
32957: LD_INT 3
32959: NEG
32960: PUSH
32961: LD_INT 3
32963: NEG
32964: PUSH
32965: EMPTY
32966: LIST
32967: LIST
32968: PUSH
32969: EMPTY
32970: LIST
32971: LIST
32972: LIST
32973: LIST
32974: LIST
32975: LIST
32976: LIST
32977: LIST
32978: LIST
32979: LIST
32980: LIST
32981: LIST
32982: LIST
32983: LIST
32984: LIST
32985: LIST
32986: LIST
32987: LIST
32988: LIST
32989: LIST
32990: LIST
32991: LIST
32992: LIST
32993: LIST
32994: LIST
32995: LIST
32996: LIST
32997: LIST
32998: LIST
32999: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33000: LD_ADDR_VAR 0 42
33004: PUSH
33005: LD_INT 0
33007: PUSH
33008: LD_INT 0
33010: PUSH
33011: EMPTY
33012: LIST
33013: LIST
33014: PUSH
33015: LD_INT 0
33017: PUSH
33018: LD_INT 1
33020: NEG
33021: PUSH
33022: EMPTY
33023: LIST
33024: LIST
33025: PUSH
33026: LD_INT 1
33028: PUSH
33029: LD_INT 0
33031: PUSH
33032: EMPTY
33033: LIST
33034: LIST
33035: PUSH
33036: LD_INT 1
33038: PUSH
33039: LD_INT 1
33041: PUSH
33042: EMPTY
33043: LIST
33044: LIST
33045: PUSH
33046: LD_INT 0
33048: PUSH
33049: LD_INT 1
33051: PUSH
33052: EMPTY
33053: LIST
33054: LIST
33055: PUSH
33056: LD_INT 1
33058: NEG
33059: PUSH
33060: LD_INT 0
33062: PUSH
33063: EMPTY
33064: LIST
33065: LIST
33066: PUSH
33067: LD_INT 1
33069: NEG
33070: PUSH
33071: LD_INT 1
33073: NEG
33074: PUSH
33075: EMPTY
33076: LIST
33077: LIST
33078: PUSH
33079: LD_INT 1
33081: NEG
33082: PUSH
33083: LD_INT 2
33085: NEG
33086: PUSH
33087: EMPTY
33088: LIST
33089: LIST
33090: PUSH
33091: LD_INT 0
33093: PUSH
33094: LD_INT 2
33096: NEG
33097: PUSH
33098: EMPTY
33099: LIST
33100: LIST
33101: PUSH
33102: LD_INT 1
33104: PUSH
33105: LD_INT 1
33107: NEG
33108: PUSH
33109: EMPTY
33110: LIST
33111: LIST
33112: PUSH
33113: LD_INT 2
33115: PUSH
33116: LD_INT 1
33118: PUSH
33119: EMPTY
33120: LIST
33121: LIST
33122: PUSH
33123: LD_INT 2
33125: PUSH
33126: LD_INT 2
33128: PUSH
33129: EMPTY
33130: LIST
33131: LIST
33132: PUSH
33133: LD_INT 1
33135: PUSH
33136: LD_INT 2
33138: PUSH
33139: EMPTY
33140: LIST
33141: LIST
33142: PUSH
33143: LD_INT 0
33145: PUSH
33146: LD_INT 2
33148: PUSH
33149: EMPTY
33150: LIST
33151: LIST
33152: PUSH
33153: LD_INT 1
33155: NEG
33156: PUSH
33157: LD_INT 1
33159: PUSH
33160: EMPTY
33161: LIST
33162: LIST
33163: PUSH
33164: LD_INT 2
33166: NEG
33167: PUSH
33168: LD_INT 1
33170: NEG
33171: PUSH
33172: EMPTY
33173: LIST
33174: LIST
33175: PUSH
33176: LD_INT 2
33178: NEG
33179: PUSH
33180: LD_INT 2
33182: NEG
33183: PUSH
33184: EMPTY
33185: LIST
33186: LIST
33187: PUSH
33188: LD_INT 2
33190: NEG
33191: PUSH
33192: LD_INT 3
33194: NEG
33195: PUSH
33196: EMPTY
33197: LIST
33198: LIST
33199: PUSH
33200: LD_INT 1
33202: NEG
33203: PUSH
33204: LD_INT 3
33206: NEG
33207: PUSH
33208: EMPTY
33209: LIST
33210: LIST
33211: PUSH
33212: LD_INT 0
33214: PUSH
33215: LD_INT 3
33217: NEG
33218: PUSH
33219: EMPTY
33220: LIST
33221: LIST
33222: PUSH
33223: LD_INT 1
33225: PUSH
33226: LD_INT 2
33228: NEG
33229: PUSH
33230: EMPTY
33231: LIST
33232: LIST
33233: PUSH
33234: LD_INT 3
33236: PUSH
33237: LD_INT 2
33239: PUSH
33240: EMPTY
33241: LIST
33242: LIST
33243: PUSH
33244: LD_INT 3
33246: PUSH
33247: LD_INT 3
33249: PUSH
33250: EMPTY
33251: LIST
33252: LIST
33253: PUSH
33254: LD_INT 2
33256: PUSH
33257: LD_INT 3
33259: PUSH
33260: EMPTY
33261: LIST
33262: LIST
33263: PUSH
33264: LD_INT 1
33266: PUSH
33267: LD_INT 3
33269: PUSH
33270: EMPTY
33271: LIST
33272: LIST
33273: PUSH
33274: LD_INT 0
33276: PUSH
33277: LD_INT 3
33279: PUSH
33280: EMPTY
33281: LIST
33282: LIST
33283: PUSH
33284: LD_INT 1
33286: NEG
33287: PUSH
33288: LD_INT 2
33290: PUSH
33291: EMPTY
33292: LIST
33293: LIST
33294: PUSH
33295: LD_INT 3
33297: NEG
33298: PUSH
33299: LD_INT 2
33301: NEG
33302: PUSH
33303: EMPTY
33304: LIST
33305: LIST
33306: PUSH
33307: LD_INT 3
33309: NEG
33310: PUSH
33311: LD_INT 3
33313: NEG
33314: PUSH
33315: EMPTY
33316: LIST
33317: LIST
33318: PUSH
33319: EMPTY
33320: LIST
33321: LIST
33322: LIST
33323: LIST
33324: LIST
33325: LIST
33326: LIST
33327: LIST
33328: LIST
33329: LIST
33330: LIST
33331: LIST
33332: LIST
33333: LIST
33334: LIST
33335: LIST
33336: LIST
33337: LIST
33338: LIST
33339: LIST
33340: LIST
33341: LIST
33342: LIST
33343: LIST
33344: LIST
33345: LIST
33346: LIST
33347: LIST
33348: LIST
33349: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33350: LD_ADDR_VAR 0 43
33354: PUSH
33355: LD_INT 0
33357: PUSH
33358: LD_INT 0
33360: PUSH
33361: EMPTY
33362: LIST
33363: LIST
33364: PUSH
33365: LD_INT 0
33367: PUSH
33368: LD_INT 1
33370: NEG
33371: PUSH
33372: EMPTY
33373: LIST
33374: LIST
33375: PUSH
33376: LD_INT 1
33378: PUSH
33379: LD_INT 0
33381: PUSH
33382: EMPTY
33383: LIST
33384: LIST
33385: PUSH
33386: LD_INT 1
33388: PUSH
33389: LD_INT 1
33391: PUSH
33392: EMPTY
33393: LIST
33394: LIST
33395: PUSH
33396: LD_INT 0
33398: PUSH
33399: LD_INT 1
33401: PUSH
33402: EMPTY
33403: LIST
33404: LIST
33405: PUSH
33406: LD_INT 1
33408: NEG
33409: PUSH
33410: LD_INT 0
33412: PUSH
33413: EMPTY
33414: LIST
33415: LIST
33416: PUSH
33417: LD_INT 1
33419: NEG
33420: PUSH
33421: LD_INT 1
33423: NEG
33424: PUSH
33425: EMPTY
33426: LIST
33427: LIST
33428: PUSH
33429: LD_INT 1
33431: NEG
33432: PUSH
33433: LD_INT 2
33435: NEG
33436: PUSH
33437: EMPTY
33438: LIST
33439: LIST
33440: PUSH
33441: LD_INT 0
33443: PUSH
33444: LD_INT 2
33446: NEG
33447: PUSH
33448: EMPTY
33449: LIST
33450: LIST
33451: PUSH
33452: LD_INT 1
33454: PUSH
33455: LD_INT 1
33457: NEG
33458: PUSH
33459: EMPTY
33460: LIST
33461: LIST
33462: PUSH
33463: LD_INT 2
33465: PUSH
33466: LD_INT 0
33468: PUSH
33469: EMPTY
33470: LIST
33471: LIST
33472: PUSH
33473: LD_INT 2
33475: PUSH
33476: LD_INT 1
33478: PUSH
33479: EMPTY
33480: LIST
33481: LIST
33482: PUSH
33483: LD_INT 1
33485: PUSH
33486: LD_INT 2
33488: PUSH
33489: EMPTY
33490: LIST
33491: LIST
33492: PUSH
33493: LD_INT 0
33495: PUSH
33496: LD_INT 2
33498: PUSH
33499: EMPTY
33500: LIST
33501: LIST
33502: PUSH
33503: LD_INT 1
33505: NEG
33506: PUSH
33507: LD_INT 1
33509: PUSH
33510: EMPTY
33511: LIST
33512: LIST
33513: PUSH
33514: LD_INT 2
33516: NEG
33517: PUSH
33518: LD_INT 0
33520: PUSH
33521: EMPTY
33522: LIST
33523: LIST
33524: PUSH
33525: LD_INT 2
33527: NEG
33528: PUSH
33529: LD_INT 1
33531: NEG
33532: PUSH
33533: EMPTY
33534: LIST
33535: LIST
33536: PUSH
33537: LD_INT 1
33539: NEG
33540: PUSH
33541: LD_INT 3
33543: NEG
33544: PUSH
33545: EMPTY
33546: LIST
33547: LIST
33548: PUSH
33549: LD_INT 0
33551: PUSH
33552: LD_INT 3
33554: NEG
33555: PUSH
33556: EMPTY
33557: LIST
33558: LIST
33559: PUSH
33560: LD_INT 1
33562: PUSH
33563: LD_INT 2
33565: NEG
33566: PUSH
33567: EMPTY
33568: LIST
33569: LIST
33570: PUSH
33571: LD_INT 2
33573: PUSH
33574: LD_INT 1
33576: NEG
33577: PUSH
33578: EMPTY
33579: LIST
33580: LIST
33581: PUSH
33582: LD_INT 3
33584: PUSH
33585: LD_INT 0
33587: PUSH
33588: EMPTY
33589: LIST
33590: LIST
33591: PUSH
33592: LD_INT 3
33594: PUSH
33595: LD_INT 1
33597: PUSH
33598: EMPTY
33599: LIST
33600: LIST
33601: PUSH
33602: LD_INT 1
33604: PUSH
33605: LD_INT 3
33607: PUSH
33608: EMPTY
33609: LIST
33610: LIST
33611: PUSH
33612: LD_INT 0
33614: PUSH
33615: LD_INT 3
33617: PUSH
33618: EMPTY
33619: LIST
33620: LIST
33621: PUSH
33622: LD_INT 1
33624: NEG
33625: PUSH
33626: LD_INT 2
33628: PUSH
33629: EMPTY
33630: LIST
33631: LIST
33632: PUSH
33633: LD_INT 2
33635: NEG
33636: PUSH
33637: LD_INT 1
33639: PUSH
33640: EMPTY
33641: LIST
33642: LIST
33643: PUSH
33644: LD_INT 3
33646: NEG
33647: PUSH
33648: LD_INT 0
33650: PUSH
33651: EMPTY
33652: LIST
33653: LIST
33654: PUSH
33655: LD_INT 3
33657: NEG
33658: PUSH
33659: LD_INT 1
33661: NEG
33662: PUSH
33663: EMPTY
33664: LIST
33665: LIST
33666: PUSH
33667: EMPTY
33668: LIST
33669: LIST
33670: LIST
33671: LIST
33672: LIST
33673: LIST
33674: LIST
33675: LIST
33676: LIST
33677: LIST
33678: LIST
33679: LIST
33680: LIST
33681: LIST
33682: LIST
33683: LIST
33684: LIST
33685: LIST
33686: LIST
33687: LIST
33688: LIST
33689: LIST
33690: LIST
33691: LIST
33692: LIST
33693: LIST
33694: LIST
33695: LIST
33696: LIST
33697: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33698: LD_ADDR_VAR 0 44
33702: PUSH
33703: LD_INT 0
33705: PUSH
33706: LD_INT 0
33708: PUSH
33709: EMPTY
33710: LIST
33711: LIST
33712: PUSH
33713: LD_INT 0
33715: PUSH
33716: LD_INT 1
33718: NEG
33719: PUSH
33720: EMPTY
33721: LIST
33722: LIST
33723: PUSH
33724: LD_INT 1
33726: PUSH
33727: LD_INT 0
33729: PUSH
33730: EMPTY
33731: LIST
33732: LIST
33733: PUSH
33734: LD_INT 1
33736: PUSH
33737: LD_INT 1
33739: PUSH
33740: EMPTY
33741: LIST
33742: LIST
33743: PUSH
33744: LD_INT 0
33746: PUSH
33747: LD_INT 1
33749: PUSH
33750: EMPTY
33751: LIST
33752: LIST
33753: PUSH
33754: LD_INT 1
33756: NEG
33757: PUSH
33758: LD_INT 0
33760: PUSH
33761: EMPTY
33762: LIST
33763: LIST
33764: PUSH
33765: LD_INT 1
33767: NEG
33768: PUSH
33769: LD_INT 1
33771: NEG
33772: PUSH
33773: EMPTY
33774: LIST
33775: LIST
33776: PUSH
33777: LD_INT 1
33779: NEG
33780: PUSH
33781: LD_INT 2
33783: NEG
33784: PUSH
33785: EMPTY
33786: LIST
33787: LIST
33788: PUSH
33789: LD_INT 1
33791: PUSH
33792: LD_INT 1
33794: NEG
33795: PUSH
33796: EMPTY
33797: LIST
33798: LIST
33799: PUSH
33800: LD_INT 2
33802: PUSH
33803: LD_INT 0
33805: PUSH
33806: EMPTY
33807: LIST
33808: LIST
33809: PUSH
33810: LD_INT 2
33812: PUSH
33813: LD_INT 1
33815: PUSH
33816: EMPTY
33817: LIST
33818: LIST
33819: PUSH
33820: LD_INT 2
33822: PUSH
33823: LD_INT 2
33825: PUSH
33826: EMPTY
33827: LIST
33828: LIST
33829: PUSH
33830: LD_INT 1
33832: PUSH
33833: LD_INT 2
33835: PUSH
33836: EMPTY
33837: LIST
33838: LIST
33839: PUSH
33840: LD_INT 1
33842: NEG
33843: PUSH
33844: LD_INT 1
33846: PUSH
33847: EMPTY
33848: LIST
33849: LIST
33850: PUSH
33851: LD_INT 2
33853: NEG
33854: PUSH
33855: LD_INT 0
33857: PUSH
33858: EMPTY
33859: LIST
33860: LIST
33861: PUSH
33862: LD_INT 2
33864: NEG
33865: PUSH
33866: LD_INT 1
33868: NEG
33869: PUSH
33870: EMPTY
33871: LIST
33872: LIST
33873: PUSH
33874: LD_INT 2
33876: NEG
33877: PUSH
33878: LD_INT 2
33880: NEG
33881: PUSH
33882: EMPTY
33883: LIST
33884: LIST
33885: PUSH
33886: LD_INT 2
33888: NEG
33889: PUSH
33890: LD_INT 3
33892: NEG
33893: PUSH
33894: EMPTY
33895: LIST
33896: LIST
33897: PUSH
33898: LD_INT 2
33900: PUSH
33901: LD_INT 1
33903: NEG
33904: PUSH
33905: EMPTY
33906: LIST
33907: LIST
33908: PUSH
33909: LD_INT 3
33911: PUSH
33912: LD_INT 0
33914: PUSH
33915: EMPTY
33916: LIST
33917: LIST
33918: PUSH
33919: LD_INT 3
33921: PUSH
33922: LD_INT 1
33924: PUSH
33925: EMPTY
33926: LIST
33927: LIST
33928: PUSH
33929: LD_INT 3
33931: PUSH
33932: LD_INT 2
33934: PUSH
33935: EMPTY
33936: LIST
33937: LIST
33938: PUSH
33939: LD_INT 3
33941: PUSH
33942: LD_INT 3
33944: PUSH
33945: EMPTY
33946: LIST
33947: LIST
33948: PUSH
33949: LD_INT 2
33951: PUSH
33952: LD_INT 3
33954: PUSH
33955: EMPTY
33956: LIST
33957: LIST
33958: PUSH
33959: LD_INT 2
33961: NEG
33962: PUSH
33963: LD_INT 1
33965: PUSH
33966: EMPTY
33967: LIST
33968: LIST
33969: PUSH
33970: LD_INT 3
33972: NEG
33973: PUSH
33974: LD_INT 0
33976: PUSH
33977: EMPTY
33978: LIST
33979: LIST
33980: PUSH
33981: LD_INT 3
33983: NEG
33984: PUSH
33985: LD_INT 1
33987: NEG
33988: PUSH
33989: EMPTY
33990: LIST
33991: LIST
33992: PUSH
33993: LD_INT 3
33995: NEG
33996: PUSH
33997: LD_INT 2
33999: NEG
34000: PUSH
34001: EMPTY
34002: LIST
34003: LIST
34004: PUSH
34005: LD_INT 3
34007: NEG
34008: PUSH
34009: LD_INT 3
34011: NEG
34012: PUSH
34013: EMPTY
34014: LIST
34015: LIST
34016: PUSH
34017: EMPTY
34018: LIST
34019: LIST
34020: LIST
34021: LIST
34022: LIST
34023: LIST
34024: LIST
34025: LIST
34026: LIST
34027: LIST
34028: LIST
34029: LIST
34030: LIST
34031: LIST
34032: LIST
34033: LIST
34034: LIST
34035: LIST
34036: LIST
34037: LIST
34038: LIST
34039: LIST
34040: LIST
34041: LIST
34042: LIST
34043: LIST
34044: LIST
34045: LIST
34046: LIST
34047: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34048: LD_ADDR_VAR 0 45
34052: PUSH
34053: LD_INT 0
34055: PUSH
34056: LD_INT 0
34058: PUSH
34059: EMPTY
34060: LIST
34061: LIST
34062: PUSH
34063: LD_INT 0
34065: PUSH
34066: LD_INT 1
34068: NEG
34069: PUSH
34070: EMPTY
34071: LIST
34072: LIST
34073: PUSH
34074: LD_INT 1
34076: PUSH
34077: LD_INT 0
34079: PUSH
34080: EMPTY
34081: LIST
34082: LIST
34083: PUSH
34084: LD_INT 1
34086: PUSH
34087: LD_INT 1
34089: PUSH
34090: EMPTY
34091: LIST
34092: LIST
34093: PUSH
34094: LD_INT 0
34096: PUSH
34097: LD_INT 1
34099: PUSH
34100: EMPTY
34101: LIST
34102: LIST
34103: PUSH
34104: LD_INT 1
34106: NEG
34107: PUSH
34108: LD_INT 0
34110: PUSH
34111: EMPTY
34112: LIST
34113: LIST
34114: PUSH
34115: LD_INT 1
34117: NEG
34118: PUSH
34119: LD_INT 1
34121: NEG
34122: PUSH
34123: EMPTY
34124: LIST
34125: LIST
34126: PUSH
34127: LD_INT 1
34129: NEG
34130: PUSH
34131: LD_INT 2
34133: NEG
34134: PUSH
34135: EMPTY
34136: LIST
34137: LIST
34138: PUSH
34139: LD_INT 0
34141: PUSH
34142: LD_INT 2
34144: NEG
34145: PUSH
34146: EMPTY
34147: LIST
34148: LIST
34149: PUSH
34150: LD_INT 1
34152: PUSH
34153: LD_INT 1
34155: NEG
34156: PUSH
34157: EMPTY
34158: LIST
34159: LIST
34160: PUSH
34161: LD_INT 2
34163: PUSH
34164: LD_INT 1
34166: PUSH
34167: EMPTY
34168: LIST
34169: LIST
34170: PUSH
34171: LD_INT 2
34173: PUSH
34174: LD_INT 2
34176: PUSH
34177: EMPTY
34178: LIST
34179: LIST
34180: PUSH
34181: LD_INT 1
34183: PUSH
34184: LD_INT 2
34186: PUSH
34187: EMPTY
34188: LIST
34189: LIST
34190: PUSH
34191: LD_INT 0
34193: PUSH
34194: LD_INT 2
34196: PUSH
34197: EMPTY
34198: LIST
34199: LIST
34200: PUSH
34201: LD_INT 1
34203: NEG
34204: PUSH
34205: LD_INT 1
34207: PUSH
34208: EMPTY
34209: LIST
34210: LIST
34211: PUSH
34212: LD_INT 2
34214: NEG
34215: PUSH
34216: LD_INT 1
34218: NEG
34219: PUSH
34220: EMPTY
34221: LIST
34222: LIST
34223: PUSH
34224: LD_INT 2
34226: NEG
34227: PUSH
34228: LD_INT 2
34230: NEG
34231: PUSH
34232: EMPTY
34233: LIST
34234: LIST
34235: PUSH
34236: LD_INT 2
34238: NEG
34239: PUSH
34240: LD_INT 3
34242: NEG
34243: PUSH
34244: EMPTY
34245: LIST
34246: LIST
34247: PUSH
34248: LD_INT 1
34250: NEG
34251: PUSH
34252: LD_INT 3
34254: NEG
34255: PUSH
34256: EMPTY
34257: LIST
34258: LIST
34259: PUSH
34260: LD_INT 0
34262: PUSH
34263: LD_INT 3
34265: NEG
34266: PUSH
34267: EMPTY
34268: LIST
34269: LIST
34270: PUSH
34271: LD_INT 1
34273: PUSH
34274: LD_INT 2
34276: NEG
34277: PUSH
34278: EMPTY
34279: LIST
34280: LIST
34281: PUSH
34282: LD_INT 3
34284: PUSH
34285: LD_INT 2
34287: PUSH
34288: EMPTY
34289: LIST
34290: LIST
34291: PUSH
34292: LD_INT 3
34294: PUSH
34295: LD_INT 3
34297: PUSH
34298: EMPTY
34299: LIST
34300: LIST
34301: PUSH
34302: LD_INT 2
34304: PUSH
34305: LD_INT 3
34307: PUSH
34308: EMPTY
34309: LIST
34310: LIST
34311: PUSH
34312: LD_INT 1
34314: PUSH
34315: LD_INT 3
34317: PUSH
34318: EMPTY
34319: LIST
34320: LIST
34321: PUSH
34322: LD_INT 0
34324: PUSH
34325: LD_INT 3
34327: PUSH
34328: EMPTY
34329: LIST
34330: LIST
34331: PUSH
34332: LD_INT 1
34334: NEG
34335: PUSH
34336: LD_INT 2
34338: PUSH
34339: EMPTY
34340: LIST
34341: LIST
34342: PUSH
34343: LD_INT 3
34345: NEG
34346: PUSH
34347: LD_INT 2
34349: NEG
34350: PUSH
34351: EMPTY
34352: LIST
34353: LIST
34354: PUSH
34355: LD_INT 3
34357: NEG
34358: PUSH
34359: LD_INT 3
34361: NEG
34362: PUSH
34363: EMPTY
34364: LIST
34365: LIST
34366: PUSH
34367: EMPTY
34368: LIST
34369: LIST
34370: LIST
34371: LIST
34372: LIST
34373: LIST
34374: LIST
34375: LIST
34376: LIST
34377: LIST
34378: LIST
34379: LIST
34380: LIST
34381: LIST
34382: LIST
34383: LIST
34384: LIST
34385: LIST
34386: LIST
34387: LIST
34388: LIST
34389: LIST
34390: LIST
34391: LIST
34392: LIST
34393: LIST
34394: LIST
34395: LIST
34396: LIST
34397: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34398: LD_ADDR_VAR 0 46
34402: PUSH
34403: LD_INT 0
34405: PUSH
34406: LD_INT 0
34408: PUSH
34409: EMPTY
34410: LIST
34411: LIST
34412: PUSH
34413: LD_INT 0
34415: PUSH
34416: LD_INT 1
34418: NEG
34419: PUSH
34420: EMPTY
34421: LIST
34422: LIST
34423: PUSH
34424: LD_INT 1
34426: PUSH
34427: LD_INT 0
34429: PUSH
34430: EMPTY
34431: LIST
34432: LIST
34433: PUSH
34434: LD_INT 1
34436: PUSH
34437: LD_INT 1
34439: PUSH
34440: EMPTY
34441: LIST
34442: LIST
34443: PUSH
34444: LD_INT 0
34446: PUSH
34447: LD_INT 1
34449: PUSH
34450: EMPTY
34451: LIST
34452: LIST
34453: PUSH
34454: LD_INT 1
34456: NEG
34457: PUSH
34458: LD_INT 0
34460: PUSH
34461: EMPTY
34462: LIST
34463: LIST
34464: PUSH
34465: LD_INT 1
34467: NEG
34468: PUSH
34469: LD_INT 1
34471: NEG
34472: PUSH
34473: EMPTY
34474: LIST
34475: LIST
34476: PUSH
34477: LD_INT 1
34479: NEG
34480: PUSH
34481: LD_INT 2
34483: NEG
34484: PUSH
34485: EMPTY
34486: LIST
34487: LIST
34488: PUSH
34489: LD_INT 0
34491: PUSH
34492: LD_INT 2
34494: NEG
34495: PUSH
34496: EMPTY
34497: LIST
34498: LIST
34499: PUSH
34500: LD_INT 1
34502: PUSH
34503: LD_INT 1
34505: NEG
34506: PUSH
34507: EMPTY
34508: LIST
34509: LIST
34510: PUSH
34511: LD_INT 2
34513: PUSH
34514: LD_INT 0
34516: PUSH
34517: EMPTY
34518: LIST
34519: LIST
34520: PUSH
34521: LD_INT 2
34523: PUSH
34524: LD_INT 1
34526: PUSH
34527: EMPTY
34528: LIST
34529: LIST
34530: PUSH
34531: LD_INT 1
34533: PUSH
34534: LD_INT 2
34536: PUSH
34537: EMPTY
34538: LIST
34539: LIST
34540: PUSH
34541: LD_INT 0
34543: PUSH
34544: LD_INT 2
34546: PUSH
34547: EMPTY
34548: LIST
34549: LIST
34550: PUSH
34551: LD_INT 1
34553: NEG
34554: PUSH
34555: LD_INT 1
34557: PUSH
34558: EMPTY
34559: LIST
34560: LIST
34561: PUSH
34562: LD_INT 2
34564: NEG
34565: PUSH
34566: LD_INT 0
34568: PUSH
34569: EMPTY
34570: LIST
34571: LIST
34572: PUSH
34573: LD_INT 2
34575: NEG
34576: PUSH
34577: LD_INT 1
34579: NEG
34580: PUSH
34581: EMPTY
34582: LIST
34583: LIST
34584: PUSH
34585: LD_INT 1
34587: NEG
34588: PUSH
34589: LD_INT 3
34591: NEG
34592: PUSH
34593: EMPTY
34594: LIST
34595: LIST
34596: PUSH
34597: LD_INT 0
34599: PUSH
34600: LD_INT 3
34602: NEG
34603: PUSH
34604: EMPTY
34605: LIST
34606: LIST
34607: PUSH
34608: LD_INT 1
34610: PUSH
34611: LD_INT 2
34613: NEG
34614: PUSH
34615: EMPTY
34616: LIST
34617: LIST
34618: PUSH
34619: LD_INT 2
34621: PUSH
34622: LD_INT 1
34624: NEG
34625: PUSH
34626: EMPTY
34627: LIST
34628: LIST
34629: PUSH
34630: LD_INT 3
34632: PUSH
34633: LD_INT 0
34635: PUSH
34636: EMPTY
34637: LIST
34638: LIST
34639: PUSH
34640: LD_INT 3
34642: PUSH
34643: LD_INT 1
34645: PUSH
34646: EMPTY
34647: LIST
34648: LIST
34649: PUSH
34650: LD_INT 1
34652: PUSH
34653: LD_INT 3
34655: PUSH
34656: EMPTY
34657: LIST
34658: LIST
34659: PUSH
34660: LD_INT 0
34662: PUSH
34663: LD_INT 3
34665: PUSH
34666: EMPTY
34667: LIST
34668: LIST
34669: PUSH
34670: LD_INT 1
34672: NEG
34673: PUSH
34674: LD_INT 2
34676: PUSH
34677: EMPTY
34678: LIST
34679: LIST
34680: PUSH
34681: LD_INT 2
34683: NEG
34684: PUSH
34685: LD_INT 1
34687: PUSH
34688: EMPTY
34689: LIST
34690: LIST
34691: PUSH
34692: LD_INT 3
34694: NEG
34695: PUSH
34696: LD_INT 0
34698: PUSH
34699: EMPTY
34700: LIST
34701: LIST
34702: PUSH
34703: LD_INT 3
34705: NEG
34706: PUSH
34707: LD_INT 1
34709: NEG
34710: PUSH
34711: EMPTY
34712: LIST
34713: LIST
34714: PUSH
34715: EMPTY
34716: LIST
34717: LIST
34718: LIST
34719: LIST
34720: LIST
34721: LIST
34722: LIST
34723: LIST
34724: LIST
34725: LIST
34726: LIST
34727: LIST
34728: LIST
34729: LIST
34730: LIST
34731: LIST
34732: LIST
34733: LIST
34734: LIST
34735: LIST
34736: LIST
34737: LIST
34738: LIST
34739: LIST
34740: LIST
34741: LIST
34742: LIST
34743: LIST
34744: LIST
34745: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34746: LD_ADDR_VAR 0 47
34750: PUSH
34751: LD_INT 0
34753: PUSH
34754: LD_INT 0
34756: PUSH
34757: EMPTY
34758: LIST
34759: LIST
34760: PUSH
34761: LD_INT 0
34763: PUSH
34764: LD_INT 1
34766: NEG
34767: PUSH
34768: EMPTY
34769: LIST
34770: LIST
34771: PUSH
34772: LD_INT 1
34774: PUSH
34775: LD_INT 0
34777: PUSH
34778: EMPTY
34779: LIST
34780: LIST
34781: PUSH
34782: LD_INT 1
34784: PUSH
34785: LD_INT 1
34787: PUSH
34788: EMPTY
34789: LIST
34790: LIST
34791: PUSH
34792: LD_INT 0
34794: PUSH
34795: LD_INT 1
34797: PUSH
34798: EMPTY
34799: LIST
34800: LIST
34801: PUSH
34802: LD_INT 1
34804: NEG
34805: PUSH
34806: LD_INT 0
34808: PUSH
34809: EMPTY
34810: LIST
34811: LIST
34812: PUSH
34813: LD_INT 1
34815: NEG
34816: PUSH
34817: LD_INT 1
34819: NEG
34820: PUSH
34821: EMPTY
34822: LIST
34823: LIST
34824: PUSH
34825: LD_INT 1
34827: NEG
34828: PUSH
34829: LD_INT 2
34831: NEG
34832: PUSH
34833: EMPTY
34834: LIST
34835: LIST
34836: PUSH
34837: LD_INT 0
34839: PUSH
34840: LD_INT 2
34842: NEG
34843: PUSH
34844: EMPTY
34845: LIST
34846: LIST
34847: PUSH
34848: LD_INT 1
34850: PUSH
34851: LD_INT 1
34853: NEG
34854: PUSH
34855: EMPTY
34856: LIST
34857: LIST
34858: PUSH
34859: LD_INT 2
34861: NEG
34862: PUSH
34863: LD_INT 1
34865: NEG
34866: PUSH
34867: EMPTY
34868: LIST
34869: LIST
34870: PUSH
34871: LD_INT 2
34873: NEG
34874: PUSH
34875: LD_INT 2
34877: NEG
34878: PUSH
34879: EMPTY
34880: LIST
34881: LIST
34882: PUSH
34883: EMPTY
34884: LIST
34885: LIST
34886: LIST
34887: LIST
34888: LIST
34889: LIST
34890: LIST
34891: LIST
34892: LIST
34893: LIST
34894: LIST
34895: LIST
34896: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
34897: LD_ADDR_VAR 0 48
34901: PUSH
34902: LD_INT 0
34904: PUSH
34905: LD_INT 0
34907: PUSH
34908: EMPTY
34909: LIST
34910: LIST
34911: PUSH
34912: LD_INT 0
34914: PUSH
34915: LD_INT 1
34917: NEG
34918: PUSH
34919: EMPTY
34920: LIST
34921: LIST
34922: PUSH
34923: LD_INT 1
34925: PUSH
34926: LD_INT 0
34928: PUSH
34929: EMPTY
34930: LIST
34931: LIST
34932: PUSH
34933: LD_INT 1
34935: PUSH
34936: LD_INT 1
34938: PUSH
34939: EMPTY
34940: LIST
34941: LIST
34942: PUSH
34943: LD_INT 0
34945: PUSH
34946: LD_INT 1
34948: PUSH
34949: EMPTY
34950: LIST
34951: LIST
34952: PUSH
34953: LD_INT 1
34955: NEG
34956: PUSH
34957: LD_INT 0
34959: PUSH
34960: EMPTY
34961: LIST
34962: LIST
34963: PUSH
34964: LD_INT 1
34966: NEG
34967: PUSH
34968: LD_INT 1
34970: NEG
34971: PUSH
34972: EMPTY
34973: LIST
34974: LIST
34975: PUSH
34976: LD_INT 1
34978: NEG
34979: PUSH
34980: LD_INT 2
34982: NEG
34983: PUSH
34984: EMPTY
34985: LIST
34986: LIST
34987: PUSH
34988: LD_INT 0
34990: PUSH
34991: LD_INT 2
34993: NEG
34994: PUSH
34995: EMPTY
34996: LIST
34997: LIST
34998: PUSH
34999: LD_INT 1
35001: PUSH
35002: LD_INT 1
35004: NEG
35005: PUSH
35006: EMPTY
35007: LIST
35008: LIST
35009: PUSH
35010: LD_INT 2
35012: PUSH
35013: LD_INT 0
35015: PUSH
35016: EMPTY
35017: LIST
35018: LIST
35019: PUSH
35020: LD_INT 2
35022: PUSH
35023: LD_INT 1
35025: PUSH
35026: EMPTY
35027: LIST
35028: LIST
35029: PUSH
35030: EMPTY
35031: LIST
35032: LIST
35033: LIST
35034: LIST
35035: LIST
35036: LIST
35037: LIST
35038: LIST
35039: LIST
35040: LIST
35041: LIST
35042: LIST
35043: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
35044: LD_ADDR_VAR 0 49
35048: PUSH
35049: LD_INT 0
35051: PUSH
35052: LD_INT 0
35054: PUSH
35055: EMPTY
35056: LIST
35057: LIST
35058: PUSH
35059: LD_INT 0
35061: PUSH
35062: LD_INT 1
35064: NEG
35065: PUSH
35066: EMPTY
35067: LIST
35068: LIST
35069: PUSH
35070: LD_INT 1
35072: PUSH
35073: LD_INT 0
35075: PUSH
35076: EMPTY
35077: LIST
35078: LIST
35079: PUSH
35080: LD_INT 1
35082: PUSH
35083: LD_INT 1
35085: PUSH
35086: EMPTY
35087: LIST
35088: LIST
35089: PUSH
35090: LD_INT 0
35092: PUSH
35093: LD_INT 1
35095: PUSH
35096: EMPTY
35097: LIST
35098: LIST
35099: PUSH
35100: LD_INT 1
35102: NEG
35103: PUSH
35104: LD_INT 0
35106: PUSH
35107: EMPTY
35108: LIST
35109: LIST
35110: PUSH
35111: LD_INT 1
35113: NEG
35114: PUSH
35115: LD_INT 1
35117: NEG
35118: PUSH
35119: EMPTY
35120: LIST
35121: LIST
35122: PUSH
35123: LD_INT 1
35125: PUSH
35126: LD_INT 1
35128: NEG
35129: PUSH
35130: EMPTY
35131: LIST
35132: LIST
35133: PUSH
35134: LD_INT 2
35136: PUSH
35137: LD_INT 0
35139: PUSH
35140: EMPTY
35141: LIST
35142: LIST
35143: PUSH
35144: LD_INT 2
35146: PUSH
35147: LD_INT 1
35149: PUSH
35150: EMPTY
35151: LIST
35152: LIST
35153: PUSH
35154: LD_INT 2
35156: PUSH
35157: LD_INT 2
35159: PUSH
35160: EMPTY
35161: LIST
35162: LIST
35163: PUSH
35164: LD_INT 1
35166: PUSH
35167: LD_INT 2
35169: PUSH
35170: EMPTY
35171: LIST
35172: LIST
35173: PUSH
35174: EMPTY
35175: LIST
35176: LIST
35177: LIST
35178: LIST
35179: LIST
35180: LIST
35181: LIST
35182: LIST
35183: LIST
35184: LIST
35185: LIST
35186: LIST
35187: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
35188: LD_ADDR_VAR 0 50
35192: PUSH
35193: LD_INT 0
35195: PUSH
35196: LD_INT 0
35198: PUSH
35199: EMPTY
35200: LIST
35201: LIST
35202: PUSH
35203: LD_INT 0
35205: PUSH
35206: LD_INT 1
35208: NEG
35209: PUSH
35210: EMPTY
35211: LIST
35212: LIST
35213: PUSH
35214: LD_INT 1
35216: PUSH
35217: LD_INT 0
35219: PUSH
35220: EMPTY
35221: LIST
35222: LIST
35223: PUSH
35224: LD_INT 1
35226: PUSH
35227: LD_INT 1
35229: PUSH
35230: EMPTY
35231: LIST
35232: LIST
35233: PUSH
35234: LD_INT 0
35236: PUSH
35237: LD_INT 1
35239: PUSH
35240: EMPTY
35241: LIST
35242: LIST
35243: PUSH
35244: LD_INT 1
35246: NEG
35247: PUSH
35248: LD_INT 0
35250: PUSH
35251: EMPTY
35252: LIST
35253: LIST
35254: PUSH
35255: LD_INT 1
35257: NEG
35258: PUSH
35259: LD_INT 1
35261: NEG
35262: PUSH
35263: EMPTY
35264: LIST
35265: LIST
35266: PUSH
35267: LD_INT 2
35269: PUSH
35270: LD_INT 1
35272: PUSH
35273: EMPTY
35274: LIST
35275: LIST
35276: PUSH
35277: LD_INT 2
35279: PUSH
35280: LD_INT 2
35282: PUSH
35283: EMPTY
35284: LIST
35285: LIST
35286: PUSH
35287: LD_INT 1
35289: PUSH
35290: LD_INT 2
35292: PUSH
35293: EMPTY
35294: LIST
35295: LIST
35296: PUSH
35297: LD_INT 0
35299: PUSH
35300: LD_INT 2
35302: PUSH
35303: EMPTY
35304: LIST
35305: LIST
35306: PUSH
35307: LD_INT 1
35309: NEG
35310: PUSH
35311: LD_INT 1
35313: PUSH
35314: EMPTY
35315: LIST
35316: LIST
35317: PUSH
35318: EMPTY
35319: LIST
35320: LIST
35321: LIST
35322: LIST
35323: LIST
35324: LIST
35325: LIST
35326: LIST
35327: LIST
35328: LIST
35329: LIST
35330: LIST
35331: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
35332: LD_ADDR_VAR 0 51
35336: PUSH
35337: LD_INT 0
35339: PUSH
35340: LD_INT 0
35342: PUSH
35343: EMPTY
35344: LIST
35345: LIST
35346: PUSH
35347: LD_INT 0
35349: PUSH
35350: LD_INT 1
35352: NEG
35353: PUSH
35354: EMPTY
35355: LIST
35356: LIST
35357: PUSH
35358: LD_INT 1
35360: PUSH
35361: LD_INT 0
35363: PUSH
35364: EMPTY
35365: LIST
35366: LIST
35367: PUSH
35368: LD_INT 1
35370: PUSH
35371: LD_INT 1
35373: PUSH
35374: EMPTY
35375: LIST
35376: LIST
35377: PUSH
35378: LD_INT 0
35380: PUSH
35381: LD_INT 1
35383: PUSH
35384: EMPTY
35385: LIST
35386: LIST
35387: PUSH
35388: LD_INT 1
35390: NEG
35391: PUSH
35392: LD_INT 0
35394: PUSH
35395: EMPTY
35396: LIST
35397: LIST
35398: PUSH
35399: LD_INT 1
35401: NEG
35402: PUSH
35403: LD_INT 1
35405: NEG
35406: PUSH
35407: EMPTY
35408: LIST
35409: LIST
35410: PUSH
35411: LD_INT 1
35413: PUSH
35414: LD_INT 2
35416: PUSH
35417: EMPTY
35418: LIST
35419: LIST
35420: PUSH
35421: LD_INT 0
35423: PUSH
35424: LD_INT 2
35426: PUSH
35427: EMPTY
35428: LIST
35429: LIST
35430: PUSH
35431: LD_INT 1
35433: NEG
35434: PUSH
35435: LD_INT 1
35437: PUSH
35438: EMPTY
35439: LIST
35440: LIST
35441: PUSH
35442: LD_INT 2
35444: NEG
35445: PUSH
35446: LD_INT 0
35448: PUSH
35449: EMPTY
35450: LIST
35451: LIST
35452: PUSH
35453: LD_INT 2
35455: NEG
35456: PUSH
35457: LD_INT 1
35459: NEG
35460: PUSH
35461: EMPTY
35462: LIST
35463: LIST
35464: PUSH
35465: EMPTY
35466: LIST
35467: LIST
35468: LIST
35469: LIST
35470: LIST
35471: LIST
35472: LIST
35473: LIST
35474: LIST
35475: LIST
35476: LIST
35477: LIST
35478: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35479: LD_ADDR_VAR 0 52
35483: PUSH
35484: LD_INT 0
35486: PUSH
35487: LD_INT 0
35489: PUSH
35490: EMPTY
35491: LIST
35492: LIST
35493: PUSH
35494: LD_INT 0
35496: PUSH
35497: LD_INT 1
35499: NEG
35500: PUSH
35501: EMPTY
35502: LIST
35503: LIST
35504: PUSH
35505: LD_INT 1
35507: PUSH
35508: LD_INT 0
35510: PUSH
35511: EMPTY
35512: LIST
35513: LIST
35514: PUSH
35515: LD_INT 1
35517: PUSH
35518: LD_INT 1
35520: PUSH
35521: EMPTY
35522: LIST
35523: LIST
35524: PUSH
35525: LD_INT 0
35527: PUSH
35528: LD_INT 1
35530: PUSH
35531: EMPTY
35532: LIST
35533: LIST
35534: PUSH
35535: LD_INT 1
35537: NEG
35538: PUSH
35539: LD_INT 0
35541: PUSH
35542: EMPTY
35543: LIST
35544: LIST
35545: PUSH
35546: LD_INT 1
35548: NEG
35549: PUSH
35550: LD_INT 1
35552: NEG
35553: PUSH
35554: EMPTY
35555: LIST
35556: LIST
35557: PUSH
35558: LD_INT 1
35560: NEG
35561: PUSH
35562: LD_INT 2
35564: NEG
35565: PUSH
35566: EMPTY
35567: LIST
35568: LIST
35569: PUSH
35570: LD_INT 1
35572: NEG
35573: PUSH
35574: LD_INT 1
35576: PUSH
35577: EMPTY
35578: LIST
35579: LIST
35580: PUSH
35581: LD_INT 2
35583: NEG
35584: PUSH
35585: LD_INT 0
35587: PUSH
35588: EMPTY
35589: LIST
35590: LIST
35591: PUSH
35592: LD_INT 2
35594: NEG
35595: PUSH
35596: LD_INT 1
35598: NEG
35599: PUSH
35600: EMPTY
35601: LIST
35602: LIST
35603: PUSH
35604: LD_INT 2
35606: NEG
35607: PUSH
35608: LD_INT 2
35610: NEG
35611: PUSH
35612: EMPTY
35613: LIST
35614: LIST
35615: PUSH
35616: EMPTY
35617: LIST
35618: LIST
35619: LIST
35620: LIST
35621: LIST
35622: LIST
35623: LIST
35624: LIST
35625: LIST
35626: LIST
35627: LIST
35628: LIST
35629: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35630: LD_ADDR_VAR 0 53
35634: PUSH
35635: LD_INT 0
35637: PUSH
35638: LD_INT 0
35640: PUSH
35641: EMPTY
35642: LIST
35643: LIST
35644: PUSH
35645: LD_INT 0
35647: PUSH
35648: LD_INT 1
35650: NEG
35651: PUSH
35652: EMPTY
35653: LIST
35654: LIST
35655: PUSH
35656: LD_INT 1
35658: PUSH
35659: LD_INT 0
35661: PUSH
35662: EMPTY
35663: LIST
35664: LIST
35665: PUSH
35666: LD_INT 1
35668: PUSH
35669: LD_INT 1
35671: PUSH
35672: EMPTY
35673: LIST
35674: LIST
35675: PUSH
35676: LD_INT 0
35678: PUSH
35679: LD_INT 1
35681: PUSH
35682: EMPTY
35683: LIST
35684: LIST
35685: PUSH
35686: LD_INT 1
35688: NEG
35689: PUSH
35690: LD_INT 0
35692: PUSH
35693: EMPTY
35694: LIST
35695: LIST
35696: PUSH
35697: LD_INT 1
35699: NEG
35700: PUSH
35701: LD_INT 1
35703: NEG
35704: PUSH
35705: EMPTY
35706: LIST
35707: LIST
35708: PUSH
35709: LD_INT 1
35711: NEG
35712: PUSH
35713: LD_INT 2
35715: NEG
35716: PUSH
35717: EMPTY
35718: LIST
35719: LIST
35720: PUSH
35721: LD_INT 0
35723: PUSH
35724: LD_INT 2
35726: NEG
35727: PUSH
35728: EMPTY
35729: LIST
35730: LIST
35731: PUSH
35732: LD_INT 1
35734: PUSH
35735: LD_INT 1
35737: NEG
35738: PUSH
35739: EMPTY
35740: LIST
35741: LIST
35742: PUSH
35743: LD_INT 2
35745: PUSH
35746: LD_INT 0
35748: PUSH
35749: EMPTY
35750: LIST
35751: LIST
35752: PUSH
35753: LD_INT 2
35755: PUSH
35756: LD_INT 1
35758: PUSH
35759: EMPTY
35760: LIST
35761: LIST
35762: PUSH
35763: LD_INT 2
35765: PUSH
35766: LD_INT 2
35768: PUSH
35769: EMPTY
35770: LIST
35771: LIST
35772: PUSH
35773: LD_INT 1
35775: PUSH
35776: LD_INT 2
35778: PUSH
35779: EMPTY
35780: LIST
35781: LIST
35782: PUSH
35783: LD_INT 0
35785: PUSH
35786: LD_INT 2
35788: PUSH
35789: EMPTY
35790: LIST
35791: LIST
35792: PUSH
35793: LD_INT 1
35795: NEG
35796: PUSH
35797: LD_INT 1
35799: PUSH
35800: EMPTY
35801: LIST
35802: LIST
35803: PUSH
35804: LD_INT 2
35806: NEG
35807: PUSH
35808: LD_INT 0
35810: PUSH
35811: EMPTY
35812: LIST
35813: LIST
35814: PUSH
35815: LD_INT 2
35817: NEG
35818: PUSH
35819: LD_INT 1
35821: NEG
35822: PUSH
35823: EMPTY
35824: LIST
35825: LIST
35826: PUSH
35827: LD_INT 2
35829: NEG
35830: PUSH
35831: LD_INT 2
35833: NEG
35834: PUSH
35835: EMPTY
35836: LIST
35837: LIST
35838: PUSH
35839: EMPTY
35840: LIST
35841: LIST
35842: LIST
35843: LIST
35844: LIST
35845: LIST
35846: LIST
35847: LIST
35848: LIST
35849: LIST
35850: LIST
35851: LIST
35852: LIST
35853: LIST
35854: LIST
35855: LIST
35856: LIST
35857: LIST
35858: LIST
35859: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35860: LD_ADDR_VAR 0 54
35864: PUSH
35865: LD_INT 0
35867: PUSH
35868: LD_INT 0
35870: PUSH
35871: EMPTY
35872: LIST
35873: LIST
35874: PUSH
35875: LD_INT 0
35877: PUSH
35878: LD_INT 1
35880: NEG
35881: PUSH
35882: EMPTY
35883: LIST
35884: LIST
35885: PUSH
35886: LD_INT 1
35888: PUSH
35889: LD_INT 0
35891: PUSH
35892: EMPTY
35893: LIST
35894: LIST
35895: PUSH
35896: LD_INT 1
35898: PUSH
35899: LD_INT 1
35901: PUSH
35902: EMPTY
35903: LIST
35904: LIST
35905: PUSH
35906: LD_INT 0
35908: PUSH
35909: LD_INT 1
35911: PUSH
35912: EMPTY
35913: LIST
35914: LIST
35915: PUSH
35916: LD_INT 1
35918: NEG
35919: PUSH
35920: LD_INT 0
35922: PUSH
35923: EMPTY
35924: LIST
35925: LIST
35926: PUSH
35927: LD_INT 1
35929: NEG
35930: PUSH
35931: LD_INT 1
35933: NEG
35934: PUSH
35935: EMPTY
35936: LIST
35937: LIST
35938: PUSH
35939: LD_INT 1
35941: NEG
35942: PUSH
35943: LD_INT 2
35945: NEG
35946: PUSH
35947: EMPTY
35948: LIST
35949: LIST
35950: PUSH
35951: LD_INT 0
35953: PUSH
35954: LD_INT 2
35956: NEG
35957: PUSH
35958: EMPTY
35959: LIST
35960: LIST
35961: PUSH
35962: LD_INT 1
35964: PUSH
35965: LD_INT 1
35967: NEG
35968: PUSH
35969: EMPTY
35970: LIST
35971: LIST
35972: PUSH
35973: LD_INT 2
35975: PUSH
35976: LD_INT 0
35978: PUSH
35979: EMPTY
35980: LIST
35981: LIST
35982: PUSH
35983: LD_INT 2
35985: PUSH
35986: LD_INT 1
35988: PUSH
35989: EMPTY
35990: LIST
35991: LIST
35992: PUSH
35993: LD_INT 2
35995: PUSH
35996: LD_INT 2
35998: PUSH
35999: EMPTY
36000: LIST
36001: LIST
36002: PUSH
36003: LD_INT 1
36005: PUSH
36006: LD_INT 2
36008: PUSH
36009: EMPTY
36010: LIST
36011: LIST
36012: PUSH
36013: LD_INT 0
36015: PUSH
36016: LD_INT 2
36018: PUSH
36019: EMPTY
36020: LIST
36021: LIST
36022: PUSH
36023: LD_INT 1
36025: NEG
36026: PUSH
36027: LD_INT 1
36029: PUSH
36030: EMPTY
36031: LIST
36032: LIST
36033: PUSH
36034: LD_INT 2
36036: NEG
36037: PUSH
36038: LD_INT 0
36040: PUSH
36041: EMPTY
36042: LIST
36043: LIST
36044: PUSH
36045: LD_INT 2
36047: NEG
36048: PUSH
36049: LD_INT 1
36051: NEG
36052: PUSH
36053: EMPTY
36054: LIST
36055: LIST
36056: PUSH
36057: LD_INT 2
36059: NEG
36060: PUSH
36061: LD_INT 2
36063: NEG
36064: PUSH
36065: EMPTY
36066: LIST
36067: LIST
36068: PUSH
36069: EMPTY
36070: LIST
36071: LIST
36072: LIST
36073: LIST
36074: LIST
36075: LIST
36076: LIST
36077: LIST
36078: LIST
36079: LIST
36080: LIST
36081: LIST
36082: LIST
36083: LIST
36084: LIST
36085: LIST
36086: LIST
36087: LIST
36088: LIST
36089: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36090: LD_ADDR_VAR 0 55
36094: PUSH
36095: LD_INT 0
36097: PUSH
36098: LD_INT 0
36100: PUSH
36101: EMPTY
36102: LIST
36103: LIST
36104: PUSH
36105: LD_INT 0
36107: PUSH
36108: LD_INT 1
36110: NEG
36111: PUSH
36112: EMPTY
36113: LIST
36114: LIST
36115: PUSH
36116: LD_INT 1
36118: PUSH
36119: LD_INT 0
36121: PUSH
36122: EMPTY
36123: LIST
36124: LIST
36125: PUSH
36126: LD_INT 1
36128: PUSH
36129: LD_INT 1
36131: PUSH
36132: EMPTY
36133: LIST
36134: LIST
36135: PUSH
36136: LD_INT 0
36138: PUSH
36139: LD_INT 1
36141: PUSH
36142: EMPTY
36143: LIST
36144: LIST
36145: PUSH
36146: LD_INT 1
36148: NEG
36149: PUSH
36150: LD_INT 0
36152: PUSH
36153: EMPTY
36154: LIST
36155: LIST
36156: PUSH
36157: LD_INT 1
36159: NEG
36160: PUSH
36161: LD_INT 1
36163: NEG
36164: PUSH
36165: EMPTY
36166: LIST
36167: LIST
36168: PUSH
36169: LD_INT 1
36171: NEG
36172: PUSH
36173: LD_INT 2
36175: NEG
36176: PUSH
36177: EMPTY
36178: LIST
36179: LIST
36180: PUSH
36181: LD_INT 0
36183: PUSH
36184: LD_INT 2
36186: NEG
36187: PUSH
36188: EMPTY
36189: LIST
36190: LIST
36191: PUSH
36192: LD_INT 1
36194: PUSH
36195: LD_INT 1
36197: NEG
36198: PUSH
36199: EMPTY
36200: LIST
36201: LIST
36202: PUSH
36203: LD_INT 2
36205: PUSH
36206: LD_INT 0
36208: PUSH
36209: EMPTY
36210: LIST
36211: LIST
36212: PUSH
36213: LD_INT 2
36215: PUSH
36216: LD_INT 1
36218: PUSH
36219: EMPTY
36220: LIST
36221: LIST
36222: PUSH
36223: LD_INT 2
36225: PUSH
36226: LD_INT 2
36228: PUSH
36229: EMPTY
36230: LIST
36231: LIST
36232: PUSH
36233: LD_INT 1
36235: PUSH
36236: LD_INT 2
36238: PUSH
36239: EMPTY
36240: LIST
36241: LIST
36242: PUSH
36243: LD_INT 0
36245: PUSH
36246: LD_INT 2
36248: PUSH
36249: EMPTY
36250: LIST
36251: LIST
36252: PUSH
36253: LD_INT 1
36255: NEG
36256: PUSH
36257: LD_INT 1
36259: PUSH
36260: EMPTY
36261: LIST
36262: LIST
36263: PUSH
36264: LD_INT 2
36266: NEG
36267: PUSH
36268: LD_INT 0
36270: PUSH
36271: EMPTY
36272: LIST
36273: LIST
36274: PUSH
36275: LD_INT 2
36277: NEG
36278: PUSH
36279: LD_INT 1
36281: NEG
36282: PUSH
36283: EMPTY
36284: LIST
36285: LIST
36286: PUSH
36287: LD_INT 2
36289: NEG
36290: PUSH
36291: LD_INT 2
36293: NEG
36294: PUSH
36295: EMPTY
36296: LIST
36297: LIST
36298: PUSH
36299: EMPTY
36300: LIST
36301: LIST
36302: LIST
36303: LIST
36304: LIST
36305: LIST
36306: LIST
36307: LIST
36308: LIST
36309: LIST
36310: LIST
36311: LIST
36312: LIST
36313: LIST
36314: LIST
36315: LIST
36316: LIST
36317: LIST
36318: LIST
36319: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36320: LD_ADDR_VAR 0 56
36324: PUSH
36325: LD_INT 0
36327: PUSH
36328: LD_INT 0
36330: PUSH
36331: EMPTY
36332: LIST
36333: LIST
36334: PUSH
36335: LD_INT 0
36337: PUSH
36338: LD_INT 1
36340: NEG
36341: PUSH
36342: EMPTY
36343: LIST
36344: LIST
36345: PUSH
36346: LD_INT 1
36348: PUSH
36349: LD_INT 0
36351: PUSH
36352: EMPTY
36353: LIST
36354: LIST
36355: PUSH
36356: LD_INT 1
36358: PUSH
36359: LD_INT 1
36361: PUSH
36362: EMPTY
36363: LIST
36364: LIST
36365: PUSH
36366: LD_INT 0
36368: PUSH
36369: LD_INT 1
36371: PUSH
36372: EMPTY
36373: LIST
36374: LIST
36375: PUSH
36376: LD_INT 1
36378: NEG
36379: PUSH
36380: LD_INT 0
36382: PUSH
36383: EMPTY
36384: LIST
36385: LIST
36386: PUSH
36387: LD_INT 1
36389: NEG
36390: PUSH
36391: LD_INT 1
36393: NEG
36394: PUSH
36395: EMPTY
36396: LIST
36397: LIST
36398: PUSH
36399: LD_INT 1
36401: NEG
36402: PUSH
36403: LD_INT 2
36405: NEG
36406: PUSH
36407: EMPTY
36408: LIST
36409: LIST
36410: PUSH
36411: LD_INT 0
36413: PUSH
36414: LD_INT 2
36416: NEG
36417: PUSH
36418: EMPTY
36419: LIST
36420: LIST
36421: PUSH
36422: LD_INT 1
36424: PUSH
36425: LD_INT 1
36427: NEG
36428: PUSH
36429: EMPTY
36430: LIST
36431: LIST
36432: PUSH
36433: LD_INT 2
36435: PUSH
36436: LD_INT 0
36438: PUSH
36439: EMPTY
36440: LIST
36441: LIST
36442: PUSH
36443: LD_INT 2
36445: PUSH
36446: LD_INT 1
36448: PUSH
36449: EMPTY
36450: LIST
36451: LIST
36452: PUSH
36453: LD_INT 2
36455: PUSH
36456: LD_INT 2
36458: PUSH
36459: EMPTY
36460: LIST
36461: LIST
36462: PUSH
36463: LD_INT 1
36465: PUSH
36466: LD_INT 2
36468: PUSH
36469: EMPTY
36470: LIST
36471: LIST
36472: PUSH
36473: LD_INT 0
36475: PUSH
36476: LD_INT 2
36478: PUSH
36479: EMPTY
36480: LIST
36481: LIST
36482: PUSH
36483: LD_INT 1
36485: NEG
36486: PUSH
36487: LD_INT 1
36489: PUSH
36490: EMPTY
36491: LIST
36492: LIST
36493: PUSH
36494: LD_INT 2
36496: NEG
36497: PUSH
36498: LD_INT 0
36500: PUSH
36501: EMPTY
36502: LIST
36503: LIST
36504: PUSH
36505: LD_INT 2
36507: NEG
36508: PUSH
36509: LD_INT 1
36511: NEG
36512: PUSH
36513: EMPTY
36514: LIST
36515: LIST
36516: PUSH
36517: LD_INT 2
36519: NEG
36520: PUSH
36521: LD_INT 2
36523: NEG
36524: PUSH
36525: EMPTY
36526: LIST
36527: LIST
36528: PUSH
36529: EMPTY
36530: LIST
36531: LIST
36532: LIST
36533: LIST
36534: LIST
36535: LIST
36536: LIST
36537: LIST
36538: LIST
36539: LIST
36540: LIST
36541: LIST
36542: LIST
36543: LIST
36544: LIST
36545: LIST
36546: LIST
36547: LIST
36548: LIST
36549: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36550: LD_ADDR_VAR 0 57
36554: PUSH
36555: LD_INT 0
36557: PUSH
36558: LD_INT 0
36560: PUSH
36561: EMPTY
36562: LIST
36563: LIST
36564: PUSH
36565: LD_INT 0
36567: PUSH
36568: LD_INT 1
36570: NEG
36571: PUSH
36572: EMPTY
36573: LIST
36574: LIST
36575: PUSH
36576: LD_INT 1
36578: PUSH
36579: LD_INT 0
36581: PUSH
36582: EMPTY
36583: LIST
36584: LIST
36585: PUSH
36586: LD_INT 1
36588: PUSH
36589: LD_INT 1
36591: PUSH
36592: EMPTY
36593: LIST
36594: LIST
36595: PUSH
36596: LD_INT 0
36598: PUSH
36599: LD_INT 1
36601: PUSH
36602: EMPTY
36603: LIST
36604: LIST
36605: PUSH
36606: LD_INT 1
36608: NEG
36609: PUSH
36610: LD_INT 0
36612: PUSH
36613: EMPTY
36614: LIST
36615: LIST
36616: PUSH
36617: LD_INT 1
36619: NEG
36620: PUSH
36621: LD_INT 1
36623: NEG
36624: PUSH
36625: EMPTY
36626: LIST
36627: LIST
36628: PUSH
36629: LD_INT 1
36631: NEG
36632: PUSH
36633: LD_INT 2
36635: NEG
36636: PUSH
36637: EMPTY
36638: LIST
36639: LIST
36640: PUSH
36641: LD_INT 0
36643: PUSH
36644: LD_INT 2
36646: NEG
36647: PUSH
36648: EMPTY
36649: LIST
36650: LIST
36651: PUSH
36652: LD_INT 1
36654: PUSH
36655: LD_INT 1
36657: NEG
36658: PUSH
36659: EMPTY
36660: LIST
36661: LIST
36662: PUSH
36663: LD_INT 2
36665: PUSH
36666: LD_INT 0
36668: PUSH
36669: EMPTY
36670: LIST
36671: LIST
36672: PUSH
36673: LD_INT 2
36675: PUSH
36676: LD_INT 1
36678: PUSH
36679: EMPTY
36680: LIST
36681: LIST
36682: PUSH
36683: LD_INT 2
36685: PUSH
36686: LD_INT 2
36688: PUSH
36689: EMPTY
36690: LIST
36691: LIST
36692: PUSH
36693: LD_INT 1
36695: PUSH
36696: LD_INT 2
36698: PUSH
36699: EMPTY
36700: LIST
36701: LIST
36702: PUSH
36703: LD_INT 0
36705: PUSH
36706: LD_INT 2
36708: PUSH
36709: EMPTY
36710: LIST
36711: LIST
36712: PUSH
36713: LD_INT 1
36715: NEG
36716: PUSH
36717: LD_INT 1
36719: PUSH
36720: EMPTY
36721: LIST
36722: LIST
36723: PUSH
36724: LD_INT 2
36726: NEG
36727: PUSH
36728: LD_INT 0
36730: PUSH
36731: EMPTY
36732: LIST
36733: LIST
36734: PUSH
36735: LD_INT 2
36737: NEG
36738: PUSH
36739: LD_INT 1
36741: NEG
36742: PUSH
36743: EMPTY
36744: LIST
36745: LIST
36746: PUSH
36747: LD_INT 2
36749: NEG
36750: PUSH
36751: LD_INT 2
36753: NEG
36754: PUSH
36755: EMPTY
36756: LIST
36757: LIST
36758: PUSH
36759: EMPTY
36760: LIST
36761: LIST
36762: LIST
36763: LIST
36764: LIST
36765: LIST
36766: LIST
36767: LIST
36768: LIST
36769: LIST
36770: LIST
36771: LIST
36772: LIST
36773: LIST
36774: LIST
36775: LIST
36776: LIST
36777: LIST
36778: LIST
36779: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36780: LD_ADDR_VAR 0 58
36784: PUSH
36785: LD_INT 0
36787: PUSH
36788: LD_INT 0
36790: PUSH
36791: EMPTY
36792: LIST
36793: LIST
36794: PUSH
36795: LD_INT 0
36797: PUSH
36798: LD_INT 1
36800: NEG
36801: PUSH
36802: EMPTY
36803: LIST
36804: LIST
36805: PUSH
36806: LD_INT 1
36808: PUSH
36809: LD_INT 0
36811: PUSH
36812: EMPTY
36813: LIST
36814: LIST
36815: PUSH
36816: LD_INT 1
36818: PUSH
36819: LD_INT 1
36821: PUSH
36822: EMPTY
36823: LIST
36824: LIST
36825: PUSH
36826: LD_INT 0
36828: PUSH
36829: LD_INT 1
36831: PUSH
36832: EMPTY
36833: LIST
36834: LIST
36835: PUSH
36836: LD_INT 1
36838: NEG
36839: PUSH
36840: LD_INT 0
36842: PUSH
36843: EMPTY
36844: LIST
36845: LIST
36846: PUSH
36847: LD_INT 1
36849: NEG
36850: PUSH
36851: LD_INT 1
36853: NEG
36854: PUSH
36855: EMPTY
36856: LIST
36857: LIST
36858: PUSH
36859: LD_INT 1
36861: NEG
36862: PUSH
36863: LD_INT 2
36865: NEG
36866: PUSH
36867: EMPTY
36868: LIST
36869: LIST
36870: PUSH
36871: LD_INT 0
36873: PUSH
36874: LD_INT 2
36876: NEG
36877: PUSH
36878: EMPTY
36879: LIST
36880: LIST
36881: PUSH
36882: LD_INT 1
36884: PUSH
36885: LD_INT 1
36887: NEG
36888: PUSH
36889: EMPTY
36890: LIST
36891: LIST
36892: PUSH
36893: LD_INT 2
36895: PUSH
36896: LD_INT 0
36898: PUSH
36899: EMPTY
36900: LIST
36901: LIST
36902: PUSH
36903: LD_INT 2
36905: PUSH
36906: LD_INT 1
36908: PUSH
36909: EMPTY
36910: LIST
36911: LIST
36912: PUSH
36913: LD_INT 2
36915: PUSH
36916: LD_INT 2
36918: PUSH
36919: EMPTY
36920: LIST
36921: LIST
36922: PUSH
36923: LD_INT 1
36925: PUSH
36926: LD_INT 2
36928: PUSH
36929: EMPTY
36930: LIST
36931: LIST
36932: PUSH
36933: LD_INT 0
36935: PUSH
36936: LD_INT 2
36938: PUSH
36939: EMPTY
36940: LIST
36941: LIST
36942: PUSH
36943: LD_INT 1
36945: NEG
36946: PUSH
36947: LD_INT 1
36949: PUSH
36950: EMPTY
36951: LIST
36952: LIST
36953: PUSH
36954: LD_INT 2
36956: NEG
36957: PUSH
36958: LD_INT 0
36960: PUSH
36961: EMPTY
36962: LIST
36963: LIST
36964: PUSH
36965: LD_INT 2
36967: NEG
36968: PUSH
36969: LD_INT 1
36971: NEG
36972: PUSH
36973: EMPTY
36974: LIST
36975: LIST
36976: PUSH
36977: LD_INT 2
36979: NEG
36980: PUSH
36981: LD_INT 2
36983: NEG
36984: PUSH
36985: EMPTY
36986: LIST
36987: LIST
36988: PUSH
36989: EMPTY
36990: LIST
36991: LIST
36992: LIST
36993: LIST
36994: LIST
36995: LIST
36996: LIST
36997: LIST
36998: LIST
36999: LIST
37000: LIST
37001: LIST
37002: LIST
37003: LIST
37004: LIST
37005: LIST
37006: LIST
37007: LIST
37008: LIST
37009: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37010: LD_ADDR_VAR 0 59
37014: PUSH
37015: LD_INT 0
37017: PUSH
37018: LD_INT 0
37020: PUSH
37021: EMPTY
37022: LIST
37023: LIST
37024: PUSH
37025: LD_INT 0
37027: PUSH
37028: LD_INT 1
37030: NEG
37031: PUSH
37032: EMPTY
37033: LIST
37034: LIST
37035: PUSH
37036: LD_INT 1
37038: PUSH
37039: LD_INT 0
37041: PUSH
37042: EMPTY
37043: LIST
37044: LIST
37045: PUSH
37046: LD_INT 1
37048: PUSH
37049: LD_INT 1
37051: PUSH
37052: EMPTY
37053: LIST
37054: LIST
37055: PUSH
37056: LD_INT 0
37058: PUSH
37059: LD_INT 1
37061: PUSH
37062: EMPTY
37063: LIST
37064: LIST
37065: PUSH
37066: LD_INT 1
37068: NEG
37069: PUSH
37070: LD_INT 0
37072: PUSH
37073: EMPTY
37074: LIST
37075: LIST
37076: PUSH
37077: LD_INT 1
37079: NEG
37080: PUSH
37081: LD_INT 1
37083: NEG
37084: PUSH
37085: EMPTY
37086: LIST
37087: LIST
37088: PUSH
37089: EMPTY
37090: LIST
37091: LIST
37092: LIST
37093: LIST
37094: LIST
37095: LIST
37096: LIST
37097: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37098: LD_ADDR_VAR 0 60
37102: PUSH
37103: LD_INT 0
37105: PUSH
37106: LD_INT 0
37108: PUSH
37109: EMPTY
37110: LIST
37111: LIST
37112: PUSH
37113: LD_INT 0
37115: PUSH
37116: LD_INT 1
37118: NEG
37119: PUSH
37120: EMPTY
37121: LIST
37122: LIST
37123: PUSH
37124: LD_INT 1
37126: PUSH
37127: LD_INT 0
37129: PUSH
37130: EMPTY
37131: LIST
37132: LIST
37133: PUSH
37134: LD_INT 1
37136: PUSH
37137: LD_INT 1
37139: PUSH
37140: EMPTY
37141: LIST
37142: LIST
37143: PUSH
37144: LD_INT 0
37146: PUSH
37147: LD_INT 1
37149: PUSH
37150: EMPTY
37151: LIST
37152: LIST
37153: PUSH
37154: LD_INT 1
37156: NEG
37157: PUSH
37158: LD_INT 0
37160: PUSH
37161: EMPTY
37162: LIST
37163: LIST
37164: PUSH
37165: LD_INT 1
37167: NEG
37168: PUSH
37169: LD_INT 1
37171: NEG
37172: PUSH
37173: EMPTY
37174: LIST
37175: LIST
37176: PUSH
37177: EMPTY
37178: LIST
37179: LIST
37180: LIST
37181: LIST
37182: LIST
37183: LIST
37184: LIST
37185: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37186: LD_ADDR_VAR 0 61
37190: PUSH
37191: LD_INT 0
37193: PUSH
37194: LD_INT 0
37196: PUSH
37197: EMPTY
37198: LIST
37199: LIST
37200: PUSH
37201: LD_INT 0
37203: PUSH
37204: LD_INT 1
37206: NEG
37207: PUSH
37208: EMPTY
37209: LIST
37210: LIST
37211: PUSH
37212: LD_INT 1
37214: PUSH
37215: LD_INT 0
37217: PUSH
37218: EMPTY
37219: LIST
37220: LIST
37221: PUSH
37222: LD_INT 1
37224: PUSH
37225: LD_INT 1
37227: PUSH
37228: EMPTY
37229: LIST
37230: LIST
37231: PUSH
37232: LD_INT 0
37234: PUSH
37235: LD_INT 1
37237: PUSH
37238: EMPTY
37239: LIST
37240: LIST
37241: PUSH
37242: LD_INT 1
37244: NEG
37245: PUSH
37246: LD_INT 0
37248: PUSH
37249: EMPTY
37250: LIST
37251: LIST
37252: PUSH
37253: LD_INT 1
37255: NEG
37256: PUSH
37257: LD_INT 1
37259: NEG
37260: PUSH
37261: EMPTY
37262: LIST
37263: LIST
37264: PUSH
37265: EMPTY
37266: LIST
37267: LIST
37268: LIST
37269: LIST
37270: LIST
37271: LIST
37272: LIST
37273: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37274: LD_ADDR_VAR 0 62
37278: PUSH
37279: LD_INT 0
37281: PUSH
37282: LD_INT 0
37284: PUSH
37285: EMPTY
37286: LIST
37287: LIST
37288: PUSH
37289: LD_INT 0
37291: PUSH
37292: LD_INT 1
37294: NEG
37295: PUSH
37296: EMPTY
37297: LIST
37298: LIST
37299: PUSH
37300: LD_INT 1
37302: PUSH
37303: LD_INT 0
37305: PUSH
37306: EMPTY
37307: LIST
37308: LIST
37309: PUSH
37310: LD_INT 1
37312: PUSH
37313: LD_INT 1
37315: PUSH
37316: EMPTY
37317: LIST
37318: LIST
37319: PUSH
37320: LD_INT 0
37322: PUSH
37323: LD_INT 1
37325: PUSH
37326: EMPTY
37327: LIST
37328: LIST
37329: PUSH
37330: LD_INT 1
37332: NEG
37333: PUSH
37334: LD_INT 0
37336: PUSH
37337: EMPTY
37338: LIST
37339: LIST
37340: PUSH
37341: LD_INT 1
37343: NEG
37344: PUSH
37345: LD_INT 1
37347: NEG
37348: PUSH
37349: EMPTY
37350: LIST
37351: LIST
37352: PUSH
37353: EMPTY
37354: LIST
37355: LIST
37356: LIST
37357: LIST
37358: LIST
37359: LIST
37360: LIST
37361: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37362: LD_ADDR_VAR 0 63
37366: PUSH
37367: LD_INT 0
37369: PUSH
37370: LD_INT 0
37372: PUSH
37373: EMPTY
37374: LIST
37375: LIST
37376: PUSH
37377: LD_INT 0
37379: PUSH
37380: LD_INT 1
37382: NEG
37383: PUSH
37384: EMPTY
37385: LIST
37386: LIST
37387: PUSH
37388: LD_INT 1
37390: PUSH
37391: LD_INT 0
37393: PUSH
37394: EMPTY
37395: LIST
37396: LIST
37397: PUSH
37398: LD_INT 1
37400: PUSH
37401: LD_INT 1
37403: PUSH
37404: EMPTY
37405: LIST
37406: LIST
37407: PUSH
37408: LD_INT 0
37410: PUSH
37411: LD_INT 1
37413: PUSH
37414: EMPTY
37415: LIST
37416: LIST
37417: PUSH
37418: LD_INT 1
37420: NEG
37421: PUSH
37422: LD_INT 0
37424: PUSH
37425: EMPTY
37426: LIST
37427: LIST
37428: PUSH
37429: LD_INT 1
37431: NEG
37432: PUSH
37433: LD_INT 1
37435: NEG
37436: PUSH
37437: EMPTY
37438: LIST
37439: LIST
37440: PUSH
37441: EMPTY
37442: LIST
37443: LIST
37444: LIST
37445: LIST
37446: LIST
37447: LIST
37448: LIST
37449: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37450: LD_ADDR_VAR 0 64
37454: PUSH
37455: LD_INT 0
37457: PUSH
37458: LD_INT 0
37460: PUSH
37461: EMPTY
37462: LIST
37463: LIST
37464: PUSH
37465: LD_INT 0
37467: PUSH
37468: LD_INT 1
37470: NEG
37471: PUSH
37472: EMPTY
37473: LIST
37474: LIST
37475: PUSH
37476: LD_INT 1
37478: PUSH
37479: LD_INT 0
37481: PUSH
37482: EMPTY
37483: LIST
37484: LIST
37485: PUSH
37486: LD_INT 1
37488: PUSH
37489: LD_INT 1
37491: PUSH
37492: EMPTY
37493: LIST
37494: LIST
37495: PUSH
37496: LD_INT 0
37498: PUSH
37499: LD_INT 1
37501: PUSH
37502: EMPTY
37503: LIST
37504: LIST
37505: PUSH
37506: LD_INT 1
37508: NEG
37509: PUSH
37510: LD_INT 0
37512: PUSH
37513: EMPTY
37514: LIST
37515: LIST
37516: PUSH
37517: LD_INT 1
37519: NEG
37520: PUSH
37521: LD_INT 1
37523: NEG
37524: PUSH
37525: EMPTY
37526: LIST
37527: LIST
37528: PUSH
37529: EMPTY
37530: LIST
37531: LIST
37532: LIST
37533: LIST
37534: LIST
37535: LIST
37536: LIST
37537: ST_TO_ADDR
// end ; 1 :
37538: GO 43435
37540: LD_INT 1
37542: DOUBLE
37543: EQUAL
37544: IFTRUE 37548
37546: GO 40171
37548: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37549: LD_ADDR_VAR 0 11
37553: PUSH
37554: LD_INT 1
37556: NEG
37557: PUSH
37558: LD_INT 3
37560: NEG
37561: PUSH
37562: EMPTY
37563: LIST
37564: LIST
37565: PUSH
37566: LD_INT 0
37568: PUSH
37569: LD_INT 3
37571: NEG
37572: PUSH
37573: EMPTY
37574: LIST
37575: LIST
37576: PUSH
37577: LD_INT 1
37579: PUSH
37580: LD_INT 2
37582: NEG
37583: PUSH
37584: EMPTY
37585: LIST
37586: LIST
37587: PUSH
37588: EMPTY
37589: LIST
37590: LIST
37591: LIST
37592: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37593: LD_ADDR_VAR 0 12
37597: PUSH
37598: LD_INT 2
37600: PUSH
37601: LD_INT 1
37603: NEG
37604: PUSH
37605: EMPTY
37606: LIST
37607: LIST
37608: PUSH
37609: LD_INT 3
37611: PUSH
37612: LD_INT 0
37614: PUSH
37615: EMPTY
37616: LIST
37617: LIST
37618: PUSH
37619: LD_INT 3
37621: PUSH
37622: LD_INT 1
37624: PUSH
37625: EMPTY
37626: LIST
37627: LIST
37628: PUSH
37629: EMPTY
37630: LIST
37631: LIST
37632: LIST
37633: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37634: LD_ADDR_VAR 0 13
37638: PUSH
37639: LD_INT 3
37641: PUSH
37642: LD_INT 2
37644: PUSH
37645: EMPTY
37646: LIST
37647: LIST
37648: PUSH
37649: LD_INT 3
37651: PUSH
37652: LD_INT 3
37654: PUSH
37655: EMPTY
37656: LIST
37657: LIST
37658: PUSH
37659: LD_INT 2
37661: PUSH
37662: LD_INT 3
37664: PUSH
37665: EMPTY
37666: LIST
37667: LIST
37668: PUSH
37669: EMPTY
37670: LIST
37671: LIST
37672: LIST
37673: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37674: LD_ADDR_VAR 0 14
37678: PUSH
37679: LD_INT 1
37681: PUSH
37682: LD_INT 3
37684: PUSH
37685: EMPTY
37686: LIST
37687: LIST
37688: PUSH
37689: LD_INT 0
37691: PUSH
37692: LD_INT 3
37694: PUSH
37695: EMPTY
37696: LIST
37697: LIST
37698: PUSH
37699: LD_INT 1
37701: NEG
37702: PUSH
37703: LD_INT 2
37705: PUSH
37706: EMPTY
37707: LIST
37708: LIST
37709: PUSH
37710: EMPTY
37711: LIST
37712: LIST
37713: LIST
37714: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37715: LD_ADDR_VAR 0 15
37719: PUSH
37720: LD_INT 2
37722: NEG
37723: PUSH
37724: LD_INT 1
37726: PUSH
37727: EMPTY
37728: LIST
37729: LIST
37730: PUSH
37731: LD_INT 3
37733: NEG
37734: PUSH
37735: LD_INT 0
37737: PUSH
37738: EMPTY
37739: LIST
37740: LIST
37741: PUSH
37742: LD_INT 3
37744: NEG
37745: PUSH
37746: LD_INT 1
37748: NEG
37749: PUSH
37750: EMPTY
37751: LIST
37752: LIST
37753: PUSH
37754: EMPTY
37755: LIST
37756: LIST
37757: LIST
37758: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37759: LD_ADDR_VAR 0 16
37763: PUSH
37764: LD_INT 2
37766: NEG
37767: PUSH
37768: LD_INT 3
37770: NEG
37771: PUSH
37772: EMPTY
37773: LIST
37774: LIST
37775: PUSH
37776: LD_INT 3
37778: NEG
37779: PUSH
37780: LD_INT 2
37782: NEG
37783: PUSH
37784: EMPTY
37785: LIST
37786: LIST
37787: PUSH
37788: LD_INT 3
37790: NEG
37791: PUSH
37792: LD_INT 3
37794: NEG
37795: PUSH
37796: EMPTY
37797: LIST
37798: LIST
37799: PUSH
37800: EMPTY
37801: LIST
37802: LIST
37803: LIST
37804: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37805: LD_ADDR_VAR 0 17
37809: PUSH
37810: LD_INT 1
37812: NEG
37813: PUSH
37814: LD_INT 3
37816: NEG
37817: PUSH
37818: EMPTY
37819: LIST
37820: LIST
37821: PUSH
37822: LD_INT 0
37824: PUSH
37825: LD_INT 3
37827: NEG
37828: PUSH
37829: EMPTY
37830: LIST
37831: LIST
37832: PUSH
37833: LD_INT 1
37835: PUSH
37836: LD_INT 2
37838: NEG
37839: PUSH
37840: EMPTY
37841: LIST
37842: LIST
37843: PUSH
37844: EMPTY
37845: LIST
37846: LIST
37847: LIST
37848: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37849: LD_ADDR_VAR 0 18
37853: PUSH
37854: LD_INT 2
37856: PUSH
37857: LD_INT 1
37859: NEG
37860: PUSH
37861: EMPTY
37862: LIST
37863: LIST
37864: PUSH
37865: LD_INT 3
37867: PUSH
37868: LD_INT 0
37870: PUSH
37871: EMPTY
37872: LIST
37873: LIST
37874: PUSH
37875: LD_INT 3
37877: PUSH
37878: LD_INT 1
37880: PUSH
37881: EMPTY
37882: LIST
37883: LIST
37884: PUSH
37885: EMPTY
37886: LIST
37887: LIST
37888: LIST
37889: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37890: LD_ADDR_VAR 0 19
37894: PUSH
37895: LD_INT 3
37897: PUSH
37898: LD_INT 2
37900: PUSH
37901: EMPTY
37902: LIST
37903: LIST
37904: PUSH
37905: LD_INT 3
37907: PUSH
37908: LD_INT 3
37910: PUSH
37911: EMPTY
37912: LIST
37913: LIST
37914: PUSH
37915: LD_INT 2
37917: PUSH
37918: LD_INT 3
37920: PUSH
37921: EMPTY
37922: LIST
37923: LIST
37924: PUSH
37925: EMPTY
37926: LIST
37927: LIST
37928: LIST
37929: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37930: LD_ADDR_VAR 0 20
37934: PUSH
37935: LD_INT 1
37937: PUSH
37938: LD_INT 3
37940: PUSH
37941: EMPTY
37942: LIST
37943: LIST
37944: PUSH
37945: LD_INT 0
37947: PUSH
37948: LD_INT 3
37950: PUSH
37951: EMPTY
37952: LIST
37953: LIST
37954: PUSH
37955: LD_INT 1
37957: NEG
37958: PUSH
37959: LD_INT 2
37961: PUSH
37962: EMPTY
37963: LIST
37964: LIST
37965: PUSH
37966: EMPTY
37967: LIST
37968: LIST
37969: LIST
37970: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37971: LD_ADDR_VAR 0 21
37975: PUSH
37976: LD_INT 2
37978: NEG
37979: PUSH
37980: LD_INT 1
37982: PUSH
37983: EMPTY
37984: LIST
37985: LIST
37986: PUSH
37987: LD_INT 3
37989: NEG
37990: PUSH
37991: LD_INT 0
37993: PUSH
37994: EMPTY
37995: LIST
37996: LIST
37997: PUSH
37998: LD_INT 3
38000: NEG
38001: PUSH
38002: LD_INT 1
38004: NEG
38005: PUSH
38006: EMPTY
38007: LIST
38008: LIST
38009: PUSH
38010: EMPTY
38011: LIST
38012: LIST
38013: LIST
38014: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38015: LD_ADDR_VAR 0 22
38019: PUSH
38020: LD_INT 2
38022: NEG
38023: PUSH
38024: LD_INT 3
38026: NEG
38027: PUSH
38028: EMPTY
38029: LIST
38030: LIST
38031: PUSH
38032: LD_INT 3
38034: NEG
38035: PUSH
38036: LD_INT 2
38038: NEG
38039: PUSH
38040: EMPTY
38041: LIST
38042: LIST
38043: PUSH
38044: LD_INT 3
38046: NEG
38047: PUSH
38048: LD_INT 3
38050: NEG
38051: PUSH
38052: EMPTY
38053: LIST
38054: LIST
38055: PUSH
38056: EMPTY
38057: LIST
38058: LIST
38059: LIST
38060: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
38061: LD_ADDR_VAR 0 23
38065: PUSH
38066: LD_INT 0
38068: PUSH
38069: LD_INT 3
38071: NEG
38072: PUSH
38073: EMPTY
38074: LIST
38075: LIST
38076: PUSH
38077: LD_INT 1
38079: NEG
38080: PUSH
38081: LD_INT 4
38083: NEG
38084: PUSH
38085: EMPTY
38086: LIST
38087: LIST
38088: PUSH
38089: LD_INT 1
38091: PUSH
38092: LD_INT 3
38094: NEG
38095: PUSH
38096: EMPTY
38097: LIST
38098: LIST
38099: PUSH
38100: EMPTY
38101: LIST
38102: LIST
38103: LIST
38104: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
38105: LD_ADDR_VAR 0 24
38109: PUSH
38110: LD_INT 3
38112: PUSH
38113: LD_INT 0
38115: PUSH
38116: EMPTY
38117: LIST
38118: LIST
38119: PUSH
38120: LD_INT 3
38122: PUSH
38123: LD_INT 1
38125: NEG
38126: PUSH
38127: EMPTY
38128: LIST
38129: LIST
38130: PUSH
38131: LD_INT 4
38133: PUSH
38134: LD_INT 1
38136: PUSH
38137: EMPTY
38138: LIST
38139: LIST
38140: PUSH
38141: EMPTY
38142: LIST
38143: LIST
38144: LIST
38145: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
38146: LD_ADDR_VAR 0 25
38150: PUSH
38151: LD_INT 3
38153: PUSH
38154: LD_INT 3
38156: PUSH
38157: EMPTY
38158: LIST
38159: LIST
38160: PUSH
38161: LD_INT 4
38163: PUSH
38164: LD_INT 3
38166: PUSH
38167: EMPTY
38168: LIST
38169: LIST
38170: PUSH
38171: LD_INT 3
38173: PUSH
38174: LD_INT 4
38176: PUSH
38177: EMPTY
38178: LIST
38179: LIST
38180: PUSH
38181: EMPTY
38182: LIST
38183: LIST
38184: LIST
38185: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
38186: LD_ADDR_VAR 0 26
38190: PUSH
38191: LD_INT 0
38193: PUSH
38194: LD_INT 3
38196: PUSH
38197: EMPTY
38198: LIST
38199: LIST
38200: PUSH
38201: LD_INT 1
38203: PUSH
38204: LD_INT 4
38206: PUSH
38207: EMPTY
38208: LIST
38209: LIST
38210: PUSH
38211: LD_INT 1
38213: NEG
38214: PUSH
38215: LD_INT 3
38217: PUSH
38218: EMPTY
38219: LIST
38220: LIST
38221: PUSH
38222: EMPTY
38223: LIST
38224: LIST
38225: LIST
38226: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
38227: LD_ADDR_VAR 0 27
38231: PUSH
38232: LD_INT 3
38234: NEG
38235: PUSH
38236: LD_INT 0
38238: PUSH
38239: EMPTY
38240: LIST
38241: LIST
38242: PUSH
38243: LD_INT 3
38245: NEG
38246: PUSH
38247: LD_INT 1
38249: PUSH
38250: EMPTY
38251: LIST
38252: LIST
38253: PUSH
38254: LD_INT 4
38256: NEG
38257: PUSH
38258: LD_INT 1
38260: NEG
38261: PUSH
38262: EMPTY
38263: LIST
38264: LIST
38265: PUSH
38266: EMPTY
38267: LIST
38268: LIST
38269: LIST
38270: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
38271: LD_ADDR_VAR 0 28
38275: PUSH
38276: LD_INT 3
38278: NEG
38279: PUSH
38280: LD_INT 3
38282: NEG
38283: PUSH
38284: EMPTY
38285: LIST
38286: LIST
38287: PUSH
38288: LD_INT 3
38290: NEG
38291: PUSH
38292: LD_INT 4
38294: NEG
38295: PUSH
38296: EMPTY
38297: LIST
38298: LIST
38299: PUSH
38300: LD_INT 4
38302: NEG
38303: PUSH
38304: LD_INT 3
38306: NEG
38307: PUSH
38308: EMPTY
38309: LIST
38310: LIST
38311: PUSH
38312: EMPTY
38313: LIST
38314: LIST
38315: LIST
38316: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
38317: LD_ADDR_VAR 0 29
38321: PUSH
38322: LD_INT 1
38324: NEG
38325: PUSH
38326: LD_INT 3
38328: NEG
38329: PUSH
38330: EMPTY
38331: LIST
38332: LIST
38333: PUSH
38334: LD_INT 0
38336: PUSH
38337: LD_INT 3
38339: NEG
38340: PUSH
38341: EMPTY
38342: LIST
38343: LIST
38344: PUSH
38345: LD_INT 1
38347: PUSH
38348: LD_INT 2
38350: NEG
38351: PUSH
38352: EMPTY
38353: LIST
38354: LIST
38355: PUSH
38356: LD_INT 1
38358: NEG
38359: PUSH
38360: LD_INT 4
38362: NEG
38363: PUSH
38364: EMPTY
38365: LIST
38366: LIST
38367: PUSH
38368: LD_INT 0
38370: PUSH
38371: LD_INT 4
38373: NEG
38374: PUSH
38375: EMPTY
38376: LIST
38377: LIST
38378: PUSH
38379: LD_INT 1
38381: PUSH
38382: LD_INT 3
38384: NEG
38385: PUSH
38386: EMPTY
38387: LIST
38388: LIST
38389: PUSH
38390: LD_INT 1
38392: NEG
38393: PUSH
38394: LD_INT 5
38396: NEG
38397: PUSH
38398: EMPTY
38399: LIST
38400: LIST
38401: PUSH
38402: LD_INT 0
38404: PUSH
38405: LD_INT 5
38407: NEG
38408: PUSH
38409: EMPTY
38410: LIST
38411: LIST
38412: PUSH
38413: LD_INT 1
38415: PUSH
38416: LD_INT 4
38418: NEG
38419: PUSH
38420: EMPTY
38421: LIST
38422: LIST
38423: PUSH
38424: LD_INT 1
38426: NEG
38427: PUSH
38428: LD_INT 6
38430: NEG
38431: PUSH
38432: EMPTY
38433: LIST
38434: LIST
38435: PUSH
38436: LD_INT 0
38438: PUSH
38439: LD_INT 6
38441: NEG
38442: PUSH
38443: EMPTY
38444: LIST
38445: LIST
38446: PUSH
38447: LD_INT 1
38449: PUSH
38450: LD_INT 5
38452: NEG
38453: PUSH
38454: EMPTY
38455: LIST
38456: LIST
38457: PUSH
38458: EMPTY
38459: LIST
38460: LIST
38461: LIST
38462: LIST
38463: LIST
38464: LIST
38465: LIST
38466: LIST
38467: LIST
38468: LIST
38469: LIST
38470: LIST
38471: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
38472: LD_ADDR_VAR 0 30
38476: PUSH
38477: LD_INT 2
38479: PUSH
38480: LD_INT 1
38482: NEG
38483: PUSH
38484: EMPTY
38485: LIST
38486: LIST
38487: PUSH
38488: LD_INT 3
38490: PUSH
38491: LD_INT 0
38493: PUSH
38494: EMPTY
38495: LIST
38496: LIST
38497: PUSH
38498: LD_INT 3
38500: PUSH
38501: LD_INT 1
38503: PUSH
38504: EMPTY
38505: LIST
38506: LIST
38507: PUSH
38508: LD_INT 3
38510: PUSH
38511: LD_INT 1
38513: NEG
38514: PUSH
38515: EMPTY
38516: LIST
38517: LIST
38518: PUSH
38519: LD_INT 4
38521: PUSH
38522: LD_INT 0
38524: PUSH
38525: EMPTY
38526: LIST
38527: LIST
38528: PUSH
38529: LD_INT 4
38531: PUSH
38532: LD_INT 1
38534: PUSH
38535: EMPTY
38536: LIST
38537: LIST
38538: PUSH
38539: LD_INT 4
38541: PUSH
38542: LD_INT 1
38544: NEG
38545: PUSH
38546: EMPTY
38547: LIST
38548: LIST
38549: PUSH
38550: LD_INT 5
38552: PUSH
38553: LD_INT 0
38555: PUSH
38556: EMPTY
38557: LIST
38558: LIST
38559: PUSH
38560: LD_INT 5
38562: PUSH
38563: LD_INT 1
38565: PUSH
38566: EMPTY
38567: LIST
38568: LIST
38569: PUSH
38570: LD_INT 5
38572: PUSH
38573: LD_INT 1
38575: NEG
38576: PUSH
38577: EMPTY
38578: LIST
38579: LIST
38580: PUSH
38581: LD_INT 6
38583: PUSH
38584: LD_INT 0
38586: PUSH
38587: EMPTY
38588: LIST
38589: LIST
38590: PUSH
38591: LD_INT 6
38593: PUSH
38594: LD_INT 1
38596: PUSH
38597: EMPTY
38598: LIST
38599: LIST
38600: PUSH
38601: EMPTY
38602: LIST
38603: LIST
38604: LIST
38605: LIST
38606: LIST
38607: LIST
38608: LIST
38609: LIST
38610: LIST
38611: LIST
38612: LIST
38613: LIST
38614: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
38615: LD_ADDR_VAR 0 31
38619: PUSH
38620: LD_INT 3
38622: PUSH
38623: LD_INT 2
38625: PUSH
38626: EMPTY
38627: LIST
38628: LIST
38629: PUSH
38630: LD_INT 3
38632: PUSH
38633: LD_INT 3
38635: PUSH
38636: EMPTY
38637: LIST
38638: LIST
38639: PUSH
38640: LD_INT 2
38642: PUSH
38643: LD_INT 3
38645: PUSH
38646: EMPTY
38647: LIST
38648: LIST
38649: PUSH
38650: LD_INT 4
38652: PUSH
38653: LD_INT 3
38655: PUSH
38656: EMPTY
38657: LIST
38658: LIST
38659: PUSH
38660: LD_INT 4
38662: PUSH
38663: LD_INT 4
38665: PUSH
38666: EMPTY
38667: LIST
38668: LIST
38669: PUSH
38670: LD_INT 3
38672: PUSH
38673: LD_INT 4
38675: PUSH
38676: EMPTY
38677: LIST
38678: LIST
38679: PUSH
38680: LD_INT 5
38682: PUSH
38683: LD_INT 4
38685: PUSH
38686: EMPTY
38687: LIST
38688: LIST
38689: PUSH
38690: LD_INT 5
38692: PUSH
38693: LD_INT 5
38695: PUSH
38696: EMPTY
38697: LIST
38698: LIST
38699: PUSH
38700: LD_INT 4
38702: PUSH
38703: LD_INT 5
38705: PUSH
38706: EMPTY
38707: LIST
38708: LIST
38709: PUSH
38710: LD_INT 6
38712: PUSH
38713: LD_INT 5
38715: PUSH
38716: EMPTY
38717: LIST
38718: LIST
38719: PUSH
38720: LD_INT 6
38722: PUSH
38723: LD_INT 6
38725: PUSH
38726: EMPTY
38727: LIST
38728: LIST
38729: PUSH
38730: LD_INT 5
38732: PUSH
38733: LD_INT 6
38735: PUSH
38736: EMPTY
38737: LIST
38738: LIST
38739: PUSH
38740: EMPTY
38741: LIST
38742: LIST
38743: LIST
38744: LIST
38745: LIST
38746: LIST
38747: LIST
38748: LIST
38749: LIST
38750: LIST
38751: LIST
38752: LIST
38753: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
38754: LD_ADDR_VAR 0 32
38758: PUSH
38759: LD_INT 1
38761: PUSH
38762: LD_INT 3
38764: PUSH
38765: EMPTY
38766: LIST
38767: LIST
38768: PUSH
38769: LD_INT 0
38771: PUSH
38772: LD_INT 3
38774: PUSH
38775: EMPTY
38776: LIST
38777: LIST
38778: PUSH
38779: LD_INT 1
38781: NEG
38782: PUSH
38783: LD_INT 2
38785: PUSH
38786: EMPTY
38787: LIST
38788: LIST
38789: PUSH
38790: LD_INT 1
38792: PUSH
38793: LD_INT 4
38795: PUSH
38796: EMPTY
38797: LIST
38798: LIST
38799: PUSH
38800: LD_INT 0
38802: PUSH
38803: LD_INT 4
38805: PUSH
38806: EMPTY
38807: LIST
38808: LIST
38809: PUSH
38810: LD_INT 1
38812: NEG
38813: PUSH
38814: LD_INT 3
38816: PUSH
38817: EMPTY
38818: LIST
38819: LIST
38820: PUSH
38821: LD_INT 1
38823: PUSH
38824: LD_INT 5
38826: PUSH
38827: EMPTY
38828: LIST
38829: LIST
38830: PUSH
38831: LD_INT 0
38833: PUSH
38834: LD_INT 5
38836: PUSH
38837: EMPTY
38838: LIST
38839: LIST
38840: PUSH
38841: LD_INT 1
38843: NEG
38844: PUSH
38845: LD_INT 4
38847: PUSH
38848: EMPTY
38849: LIST
38850: LIST
38851: PUSH
38852: LD_INT 1
38854: PUSH
38855: LD_INT 6
38857: PUSH
38858: EMPTY
38859: LIST
38860: LIST
38861: PUSH
38862: LD_INT 0
38864: PUSH
38865: LD_INT 6
38867: PUSH
38868: EMPTY
38869: LIST
38870: LIST
38871: PUSH
38872: LD_INT 1
38874: NEG
38875: PUSH
38876: LD_INT 5
38878: PUSH
38879: EMPTY
38880: LIST
38881: LIST
38882: PUSH
38883: EMPTY
38884: LIST
38885: LIST
38886: LIST
38887: LIST
38888: LIST
38889: LIST
38890: LIST
38891: LIST
38892: LIST
38893: LIST
38894: LIST
38895: LIST
38896: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
38897: LD_ADDR_VAR 0 33
38901: PUSH
38902: LD_INT 2
38904: NEG
38905: PUSH
38906: LD_INT 1
38908: PUSH
38909: EMPTY
38910: LIST
38911: LIST
38912: PUSH
38913: LD_INT 3
38915: NEG
38916: PUSH
38917: LD_INT 0
38919: PUSH
38920: EMPTY
38921: LIST
38922: LIST
38923: PUSH
38924: LD_INT 3
38926: NEG
38927: PUSH
38928: LD_INT 1
38930: NEG
38931: PUSH
38932: EMPTY
38933: LIST
38934: LIST
38935: PUSH
38936: LD_INT 3
38938: NEG
38939: PUSH
38940: LD_INT 1
38942: PUSH
38943: EMPTY
38944: LIST
38945: LIST
38946: PUSH
38947: LD_INT 4
38949: NEG
38950: PUSH
38951: LD_INT 0
38953: PUSH
38954: EMPTY
38955: LIST
38956: LIST
38957: PUSH
38958: LD_INT 4
38960: NEG
38961: PUSH
38962: LD_INT 1
38964: NEG
38965: PUSH
38966: EMPTY
38967: LIST
38968: LIST
38969: PUSH
38970: LD_INT 4
38972: NEG
38973: PUSH
38974: LD_INT 1
38976: PUSH
38977: EMPTY
38978: LIST
38979: LIST
38980: PUSH
38981: LD_INT 5
38983: NEG
38984: PUSH
38985: LD_INT 0
38987: PUSH
38988: EMPTY
38989: LIST
38990: LIST
38991: PUSH
38992: LD_INT 5
38994: NEG
38995: PUSH
38996: LD_INT 1
38998: NEG
38999: PUSH
39000: EMPTY
39001: LIST
39002: LIST
39003: PUSH
39004: LD_INT 5
39006: NEG
39007: PUSH
39008: LD_INT 1
39010: PUSH
39011: EMPTY
39012: LIST
39013: LIST
39014: PUSH
39015: LD_INT 6
39017: NEG
39018: PUSH
39019: LD_INT 0
39021: PUSH
39022: EMPTY
39023: LIST
39024: LIST
39025: PUSH
39026: LD_INT 6
39028: NEG
39029: PUSH
39030: LD_INT 1
39032: NEG
39033: PUSH
39034: EMPTY
39035: LIST
39036: LIST
39037: PUSH
39038: EMPTY
39039: LIST
39040: LIST
39041: LIST
39042: LIST
39043: LIST
39044: LIST
39045: LIST
39046: LIST
39047: LIST
39048: LIST
39049: LIST
39050: LIST
39051: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
39052: LD_ADDR_VAR 0 34
39056: PUSH
39057: LD_INT 2
39059: NEG
39060: PUSH
39061: LD_INT 3
39063: NEG
39064: PUSH
39065: EMPTY
39066: LIST
39067: LIST
39068: PUSH
39069: LD_INT 3
39071: NEG
39072: PUSH
39073: LD_INT 2
39075: NEG
39076: PUSH
39077: EMPTY
39078: LIST
39079: LIST
39080: PUSH
39081: LD_INT 3
39083: NEG
39084: PUSH
39085: LD_INT 3
39087: NEG
39088: PUSH
39089: EMPTY
39090: LIST
39091: LIST
39092: PUSH
39093: LD_INT 3
39095: NEG
39096: PUSH
39097: LD_INT 4
39099: NEG
39100: PUSH
39101: EMPTY
39102: LIST
39103: LIST
39104: PUSH
39105: LD_INT 4
39107: NEG
39108: PUSH
39109: LD_INT 3
39111: NEG
39112: PUSH
39113: EMPTY
39114: LIST
39115: LIST
39116: PUSH
39117: LD_INT 4
39119: NEG
39120: PUSH
39121: LD_INT 4
39123: NEG
39124: PUSH
39125: EMPTY
39126: LIST
39127: LIST
39128: PUSH
39129: LD_INT 4
39131: NEG
39132: PUSH
39133: LD_INT 5
39135: NEG
39136: PUSH
39137: EMPTY
39138: LIST
39139: LIST
39140: PUSH
39141: LD_INT 5
39143: NEG
39144: PUSH
39145: LD_INT 4
39147: NEG
39148: PUSH
39149: EMPTY
39150: LIST
39151: LIST
39152: PUSH
39153: LD_INT 5
39155: NEG
39156: PUSH
39157: LD_INT 5
39159: NEG
39160: PUSH
39161: EMPTY
39162: LIST
39163: LIST
39164: PUSH
39165: LD_INT 5
39167: NEG
39168: PUSH
39169: LD_INT 6
39171: NEG
39172: PUSH
39173: EMPTY
39174: LIST
39175: LIST
39176: PUSH
39177: LD_INT 6
39179: NEG
39180: PUSH
39181: LD_INT 5
39183: NEG
39184: PUSH
39185: EMPTY
39186: LIST
39187: LIST
39188: PUSH
39189: LD_INT 6
39191: NEG
39192: PUSH
39193: LD_INT 6
39195: NEG
39196: PUSH
39197: EMPTY
39198: LIST
39199: LIST
39200: PUSH
39201: EMPTY
39202: LIST
39203: LIST
39204: LIST
39205: LIST
39206: LIST
39207: LIST
39208: LIST
39209: LIST
39210: LIST
39211: LIST
39212: LIST
39213: LIST
39214: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
39215: LD_ADDR_VAR 0 41
39219: PUSH
39220: LD_INT 0
39222: PUSH
39223: LD_INT 2
39225: NEG
39226: PUSH
39227: EMPTY
39228: LIST
39229: LIST
39230: PUSH
39231: LD_INT 1
39233: NEG
39234: PUSH
39235: LD_INT 3
39237: NEG
39238: PUSH
39239: EMPTY
39240: LIST
39241: LIST
39242: PUSH
39243: LD_INT 1
39245: PUSH
39246: LD_INT 2
39248: NEG
39249: PUSH
39250: EMPTY
39251: LIST
39252: LIST
39253: PUSH
39254: EMPTY
39255: LIST
39256: LIST
39257: LIST
39258: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
39259: LD_ADDR_VAR 0 42
39263: PUSH
39264: LD_INT 2
39266: PUSH
39267: LD_INT 0
39269: PUSH
39270: EMPTY
39271: LIST
39272: LIST
39273: PUSH
39274: LD_INT 2
39276: PUSH
39277: LD_INT 1
39279: NEG
39280: PUSH
39281: EMPTY
39282: LIST
39283: LIST
39284: PUSH
39285: LD_INT 3
39287: PUSH
39288: LD_INT 1
39290: PUSH
39291: EMPTY
39292: LIST
39293: LIST
39294: PUSH
39295: EMPTY
39296: LIST
39297: LIST
39298: LIST
39299: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
39300: LD_ADDR_VAR 0 43
39304: PUSH
39305: LD_INT 2
39307: PUSH
39308: LD_INT 2
39310: PUSH
39311: EMPTY
39312: LIST
39313: LIST
39314: PUSH
39315: LD_INT 3
39317: PUSH
39318: LD_INT 2
39320: PUSH
39321: EMPTY
39322: LIST
39323: LIST
39324: PUSH
39325: LD_INT 2
39327: PUSH
39328: LD_INT 3
39330: PUSH
39331: EMPTY
39332: LIST
39333: LIST
39334: PUSH
39335: EMPTY
39336: LIST
39337: LIST
39338: LIST
39339: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
39340: LD_ADDR_VAR 0 44
39344: PUSH
39345: LD_INT 0
39347: PUSH
39348: LD_INT 2
39350: PUSH
39351: EMPTY
39352: LIST
39353: LIST
39354: PUSH
39355: LD_INT 1
39357: PUSH
39358: LD_INT 3
39360: PUSH
39361: EMPTY
39362: LIST
39363: LIST
39364: PUSH
39365: LD_INT 1
39367: NEG
39368: PUSH
39369: LD_INT 2
39371: PUSH
39372: EMPTY
39373: LIST
39374: LIST
39375: PUSH
39376: EMPTY
39377: LIST
39378: LIST
39379: LIST
39380: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39381: LD_ADDR_VAR 0 45
39385: PUSH
39386: LD_INT 2
39388: NEG
39389: PUSH
39390: LD_INT 0
39392: PUSH
39393: EMPTY
39394: LIST
39395: LIST
39396: PUSH
39397: LD_INT 2
39399: NEG
39400: PUSH
39401: LD_INT 1
39403: PUSH
39404: EMPTY
39405: LIST
39406: LIST
39407: PUSH
39408: LD_INT 3
39410: NEG
39411: PUSH
39412: LD_INT 1
39414: NEG
39415: PUSH
39416: EMPTY
39417: LIST
39418: LIST
39419: PUSH
39420: EMPTY
39421: LIST
39422: LIST
39423: LIST
39424: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
39425: LD_ADDR_VAR 0 46
39429: PUSH
39430: LD_INT 2
39432: NEG
39433: PUSH
39434: LD_INT 2
39436: NEG
39437: PUSH
39438: EMPTY
39439: LIST
39440: LIST
39441: PUSH
39442: LD_INT 2
39444: NEG
39445: PUSH
39446: LD_INT 3
39448: NEG
39449: PUSH
39450: EMPTY
39451: LIST
39452: LIST
39453: PUSH
39454: LD_INT 3
39456: NEG
39457: PUSH
39458: LD_INT 2
39460: NEG
39461: PUSH
39462: EMPTY
39463: LIST
39464: LIST
39465: PUSH
39466: EMPTY
39467: LIST
39468: LIST
39469: LIST
39470: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
39471: LD_ADDR_VAR 0 47
39475: PUSH
39476: LD_INT 2
39478: NEG
39479: PUSH
39480: LD_INT 3
39482: NEG
39483: PUSH
39484: EMPTY
39485: LIST
39486: LIST
39487: PUSH
39488: LD_INT 1
39490: NEG
39491: PUSH
39492: LD_INT 3
39494: NEG
39495: PUSH
39496: EMPTY
39497: LIST
39498: LIST
39499: PUSH
39500: EMPTY
39501: LIST
39502: LIST
39503: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
39504: LD_ADDR_VAR 0 48
39508: PUSH
39509: LD_INT 1
39511: PUSH
39512: LD_INT 2
39514: NEG
39515: PUSH
39516: EMPTY
39517: LIST
39518: LIST
39519: PUSH
39520: LD_INT 2
39522: PUSH
39523: LD_INT 1
39525: NEG
39526: PUSH
39527: EMPTY
39528: LIST
39529: LIST
39530: PUSH
39531: EMPTY
39532: LIST
39533: LIST
39534: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
39535: LD_ADDR_VAR 0 49
39539: PUSH
39540: LD_INT 3
39542: PUSH
39543: LD_INT 1
39545: PUSH
39546: EMPTY
39547: LIST
39548: LIST
39549: PUSH
39550: LD_INT 3
39552: PUSH
39553: LD_INT 2
39555: PUSH
39556: EMPTY
39557: LIST
39558: LIST
39559: PUSH
39560: EMPTY
39561: LIST
39562: LIST
39563: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
39564: LD_ADDR_VAR 0 50
39568: PUSH
39569: LD_INT 2
39571: PUSH
39572: LD_INT 3
39574: PUSH
39575: EMPTY
39576: LIST
39577: LIST
39578: PUSH
39579: LD_INT 1
39581: PUSH
39582: LD_INT 3
39584: PUSH
39585: EMPTY
39586: LIST
39587: LIST
39588: PUSH
39589: EMPTY
39590: LIST
39591: LIST
39592: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
39593: LD_ADDR_VAR 0 51
39597: PUSH
39598: LD_INT 1
39600: NEG
39601: PUSH
39602: LD_INT 2
39604: PUSH
39605: EMPTY
39606: LIST
39607: LIST
39608: PUSH
39609: LD_INT 2
39611: NEG
39612: PUSH
39613: LD_INT 1
39615: PUSH
39616: EMPTY
39617: LIST
39618: LIST
39619: PUSH
39620: EMPTY
39621: LIST
39622: LIST
39623: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39624: LD_ADDR_VAR 0 52
39628: PUSH
39629: LD_INT 3
39631: NEG
39632: PUSH
39633: LD_INT 1
39635: NEG
39636: PUSH
39637: EMPTY
39638: LIST
39639: LIST
39640: PUSH
39641: LD_INT 3
39643: NEG
39644: PUSH
39645: LD_INT 2
39647: NEG
39648: PUSH
39649: EMPTY
39650: LIST
39651: LIST
39652: PUSH
39653: EMPTY
39654: LIST
39655: LIST
39656: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39657: LD_ADDR_VAR 0 53
39661: PUSH
39662: LD_INT 1
39664: NEG
39665: PUSH
39666: LD_INT 3
39668: NEG
39669: PUSH
39670: EMPTY
39671: LIST
39672: LIST
39673: PUSH
39674: LD_INT 0
39676: PUSH
39677: LD_INT 3
39679: NEG
39680: PUSH
39681: EMPTY
39682: LIST
39683: LIST
39684: PUSH
39685: LD_INT 1
39687: PUSH
39688: LD_INT 2
39690: NEG
39691: PUSH
39692: EMPTY
39693: LIST
39694: LIST
39695: PUSH
39696: EMPTY
39697: LIST
39698: LIST
39699: LIST
39700: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39701: LD_ADDR_VAR 0 54
39705: PUSH
39706: LD_INT 2
39708: PUSH
39709: LD_INT 1
39711: NEG
39712: PUSH
39713: EMPTY
39714: LIST
39715: LIST
39716: PUSH
39717: LD_INT 3
39719: PUSH
39720: LD_INT 0
39722: PUSH
39723: EMPTY
39724: LIST
39725: LIST
39726: PUSH
39727: LD_INT 3
39729: PUSH
39730: LD_INT 1
39732: PUSH
39733: EMPTY
39734: LIST
39735: LIST
39736: PUSH
39737: EMPTY
39738: LIST
39739: LIST
39740: LIST
39741: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
39742: LD_ADDR_VAR 0 55
39746: PUSH
39747: LD_INT 3
39749: PUSH
39750: LD_INT 2
39752: PUSH
39753: EMPTY
39754: LIST
39755: LIST
39756: PUSH
39757: LD_INT 3
39759: PUSH
39760: LD_INT 3
39762: PUSH
39763: EMPTY
39764: LIST
39765: LIST
39766: PUSH
39767: LD_INT 2
39769: PUSH
39770: LD_INT 3
39772: PUSH
39773: EMPTY
39774: LIST
39775: LIST
39776: PUSH
39777: EMPTY
39778: LIST
39779: LIST
39780: LIST
39781: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39782: LD_ADDR_VAR 0 56
39786: PUSH
39787: LD_INT 1
39789: PUSH
39790: LD_INT 3
39792: PUSH
39793: EMPTY
39794: LIST
39795: LIST
39796: PUSH
39797: LD_INT 0
39799: PUSH
39800: LD_INT 3
39802: PUSH
39803: EMPTY
39804: LIST
39805: LIST
39806: PUSH
39807: LD_INT 1
39809: NEG
39810: PUSH
39811: LD_INT 2
39813: PUSH
39814: EMPTY
39815: LIST
39816: LIST
39817: PUSH
39818: EMPTY
39819: LIST
39820: LIST
39821: LIST
39822: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39823: LD_ADDR_VAR 0 57
39827: PUSH
39828: LD_INT 2
39830: NEG
39831: PUSH
39832: LD_INT 1
39834: PUSH
39835: EMPTY
39836: LIST
39837: LIST
39838: PUSH
39839: LD_INT 3
39841: NEG
39842: PUSH
39843: LD_INT 0
39845: PUSH
39846: EMPTY
39847: LIST
39848: LIST
39849: PUSH
39850: LD_INT 3
39852: NEG
39853: PUSH
39854: LD_INT 1
39856: NEG
39857: PUSH
39858: EMPTY
39859: LIST
39860: LIST
39861: PUSH
39862: EMPTY
39863: LIST
39864: LIST
39865: LIST
39866: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39867: LD_ADDR_VAR 0 58
39871: PUSH
39872: LD_INT 2
39874: NEG
39875: PUSH
39876: LD_INT 3
39878: NEG
39879: PUSH
39880: EMPTY
39881: LIST
39882: LIST
39883: PUSH
39884: LD_INT 3
39886: NEG
39887: PUSH
39888: LD_INT 2
39890: NEG
39891: PUSH
39892: EMPTY
39893: LIST
39894: LIST
39895: PUSH
39896: LD_INT 3
39898: NEG
39899: PUSH
39900: LD_INT 3
39902: NEG
39903: PUSH
39904: EMPTY
39905: LIST
39906: LIST
39907: PUSH
39908: EMPTY
39909: LIST
39910: LIST
39911: LIST
39912: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
39913: LD_ADDR_VAR 0 59
39917: PUSH
39918: LD_INT 1
39920: NEG
39921: PUSH
39922: LD_INT 2
39924: NEG
39925: PUSH
39926: EMPTY
39927: LIST
39928: LIST
39929: PUSH
39930: LD_INT 0
39932: PUSH
39933: LD_INT 2
39935: NEG
39936: PUSH
39937: EMPTY
39938: LIST
39939: LIST
39940: PUSH
39941: LD_INT 1
39943: PUSH
39944: LD_INT 1
39946: NEG
39947: PUSH
39948: EMPTY
39949: LIST
39950: LIST
39951: PUSH
39952: EMPTY
39953: LIST
39954: LIST
39955: LIST
39956: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
39957: LD_ADDR_VAR 0 60
39961: PUSH
39962: LD_INT 1
39964: PUSH
39965: LD_INT 1
39967: NEG
39968: PUSH
39969: EMPTY
39970: LIST
39971: LIST
39972: PUSH
39973: LD_INT 2
39975: PUSH
39976: LD_INT 0
39978: PUSH
39979: EMPTY
39980: LIST
39981: LIST
39982: PUSH
39983: LD_INT 2
39985: PUSH
39986: LD_INT 1
39988: PUSH
39989: EMPTY
39990: LIST
39991: LIST
39992: PUSH
39993: EMPTY
39994: LIST
39995: LIST
39996: LIST
39997: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
39998: LD_ADDR_VAR 0 61
40002: PUSH
40003: LD_INT 2
40005: PUSH
40006: LD_INT 1
40008: PUSH
40009: EMPTY
40010: LIST
40011: LIST
40012: PUSH
40013: LD_INT 2
40015: PUSH
40016: LD_INT 2
40018: PUSH
40019: EMPTY
40020: LIST
40021: LIST
40022: PUSH
40023: LD_INT 1
40025: PUSH
40026: LD_INT 2
40028: PUSH
40029: EMPTY
40030: LIST
40031: LIST
40032: PUSH
40033: EMPTY
40034: LIST
40035: LIST
40036: LIST
40037: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
40038: LD_ADDR_VAR 0 62
40042: PUSH
40043: LD_INT 1
40045: PUSH
40046: LD_INT 2
40048: PUSH
40049: EMPTY
40050: LIST
40051: LIST
40052: PUSH
40053: LD_INT 0
40055: PUSH
40056: LD_INT 2
40058: PUSH
40059: EMPTY
40060: LIST
40061: LIST
40062: PUSH
40063: LD_INT 1
40065: NEG
40066: PUSH
40067: LD_INT 1
40069: PUSH
40070: EMPTY
40071: LIST
40072: LIST
40073: PUSH
40074: EMPTY
40075: LIST
40076: LIST
40077: LIST
40078: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
40079: LD_ADDR_VAR 0 63
40083: PUSH
40084: LD_INT 1
40086: NEG
40087: PUSH
40088: LD_INT 1
40090: PUSH
40091: EMPTY
40092: LIST
40093: LIST
40094: PUSH
40095: LD_INT 2
40097: NEG
40098: PUSH
40099: LD_INT 0
40101: PUSH
40102: EMPTY
40103: LIST
40104: LIST
40105: PUSH
40106: LD_INT 2
40108: NEG
40109: PUSH
40110: LD_INT 1
40112: NEG
40113: PUSH
40114: EMPTY
40115: LIST
40116: LIST
40117: PUSH
40118: EMPTY
40119: LIST
40120: LIST
40121: LIST
40122: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40123: LD_ADDR_VAR 0 64
40127: PUSH
40128: LD_INT 1
40130: NEG
40131: PUSH
40132: LD_INT 2
40134: NEG
40135: PUSH
40136: EMPTY
40137: LIST
40138: LIST
40139: PUSH
40140: LD_INT 2
40142: NEG
40143: PUSH
40144: LD_INT 1
40146: NEG
40147: PUSH
40148: EMPTY
40149: LIST
40150: LIST
40151: PUSH
40152: LD_INT 2
40154: NEG
40155: PUSH
40156: LD_INT 2
40158: NEG
40159: PUSH
40160: EMPTY
40161: LIST
40162: LIST
40163: PUSH
40164: EMPTY
40165: LIST
40166: LIST
40167: LIST
40168: ST_TO_ADDR
// end ; 2 :
40169: GO 43435
40171: LD_INT 2
40173: DOUBLE
40174: EQUAL
40175: IFTRUE 40179
40177: GO 43434
40179: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
40180: LD_ADDR_VAR 0 29
40184: PUSH
40185: LD_INT 4
40187: PUSH
40188: LD_INT 0
40190: PUSH
40191: EMPTY
40192: LIST
40193: LIST
40194: PUSH
40195: LD_INT 4
40197: PUSH
40198: LD_INT 1
40200: NEG
40201: PUSH
40202: EMPTY
40203: LIST
40204: LIST
40205: PUSH
40206: LD_INT 5
40208: PUSH
40209: LD_INT 0
40211: PUSH
40212: EMPTY
40213: LIST
40214: LIST
40215: PUSH
40216: LD_INT 5
40218: PUSH
40219: LD_INT 1
40221: PUSH
40222: EMPTY
40223: LIST
40224: LIST
40225: PUSH
40226: LD_INT 4
40228: PUSH
40229: LD_INT 1
40231: PUSH
40232: EMPTY
40233: LIST
40234: LIST
40235: PUSH
40236: LD_INT 3
40238: PUSH
40239: LD_INT 0
40241: PUSH
40242: EMPTY
40243: LIST
40244: LIST
40245: PUSH
40246: LD_INT 3
40248: PUSH
40249: LD_INT 1
40251: NEG
40252: PUSH
40253: EMPTY
40254: LIST
40255: LIST
40256: PUSH
40257: LD_INT 3
40259: PUSH
40260: LD_INT 2
40262: NEG
40263: PUSH
40264: EMPTY
40265: LIST
40266: LIST
40267: PUSH
40268: LD_INT 5
40270: PUSH
40271: LD_INT 2
40273: PUSH
40274: EMPTY
40275: LIST
40276: LIST
40277: PUSH
40278: LD_INT 3
40280: PUSH
40281: LD_INT 3
40283: PUSH
40284: EMPTY
40285: LIST
40286: LIST
40287: PUSH
40288: LD_INT 3
40290: PUSH
40291: LD_INT 2
40293: PUSH
40294: EMPTY
40295: LIST
40296: LIST
40297: PUSH
40298: LD_INT 4
40300: PUSH
40301: LD_INT 3
40303: PUSH
40304: EMPTY
40305: LIST
40306: LIST
40307: PUSH
40308: LD_INT 4
40310: PUSH
40311: LD_INT 4
40313: PUSH
40314: EMPTY
40315: LIST
40316: LIST
40317: PUSH
40318: LD_INT 3
40320: PUSH
40321: LD_INT 4
40323: PUSH
40324: EMPTY
40325: LIST
40326: LIST
40327: PUSH
40328: LD_INT 2
40330: PUSH
40331: LD_INT 3
40333: PUSH
40334: EMPTY
40335: LIST
40336: LIST
40337: PUSH
40338: LD_INT 2
40340: PUSH
40341: LD_INT 2
40343: PUSH
40344: EMPTY
40345: LIST
40346: LIST
40347: PUSH
40348: LD_INT 4
40350: PUSH
40351: LD_INT 2
40353: PUSH
40354: EMPTY
40355: LIST
40356: LIST
40357: PUSH
40358: LD_INT 2
40360: PUSH
40361: LD_INT 4
40363: PUSH
40364: EMPTY
40365: LIST
40366: LIST
40367: PUSH
40368: LD_INT 0
40370: PUSH
40371: LD_INT 4
40373: PUSH
40374: EMPTY
40375: LIST
40376: LIST
40377: PUSH
40378: LD_INT 0
40380: PUSH
40381: LD_INT 3
40383: PUSH
40384: EMPTY
40385: LIST
40386: LIST
40387: PUSH
40388: LD_INT 1
40390: PUSH
40391: LD_INT 4
40393: PUSH
40394: EMPTY
40395: LIST
40396: LIST
40397: PUSH
40398: LD_INT 1
40400: PUSH
40401: LD_INT 5
40403: PUSH
40404: EMPTY
40405: LIST
40406: LIST
40407: PUSH
40408: LD_INT 0
40410: PUSH
40411: LD_INT 5
40413: PUSH
40414: EMPTY
40415: LIST
40416: LIST
40417: PUSH
40418: LD_INT 1
40420: NEG
40421: PUSH
40422: LD_INT 4
40424: PUSH
40425: EMPTY
40426: LIST
40427: LIST
40428: PUSH
40429: LD_INT 1
40431: NEG
40432: PUSH
40433: LD_INT 3
40435: PUSH
40436: EMPTY
40437: LIST
40438: LIST
40439: PUSH
40440: LD_INT 2
40442: PUSH
40443: LD_INT 5
40445: PUSH
40446: EMPTY
40447: LIST
40448: LIST
40449: PUSH
40450: LD_INT 2
40452: NEG
40453: PUSH
40454: LD_INT 3
40456: PUSH
40457: EMPTY
40458: LIST
40459: LIST
40460: PUSH
40461: LD_INT 3
40463: NEG
40464: PUSH
40465: LD_INT 0
40467: PUSH
40468: EMPTY
40469: LIST
40470: LIST
40471: PUSH
40472: LD_INT 3
40474: NEG
40475: PUSH
40476: LD_INT 1
40478: NEG
40479: PUSH
40480: EMPTY
40481: LIST
40482: LIST
40483: PUSH
40484: LD_INT 2
40486: NEG
40487: PUSH
40488: LD_INT 0
40490: PUSH
40491: EMPTY
40492: LIST
40493: LIST
40494: PUSH
40495: LD_INT 2
40497: NEG
40498: PUSH
40499: LD_INT 1
40501: PUSH
40502: EMPTY
40503: LIST
40504: LIST
40505: PUSH
40506: LD_INT 3
40508: NEG
40509: PUSH
40510: LD_INT 1
40512: PUSH
40513: EMPTY
40514: LIST
40515: LIST
40516: PUSH
40517: LD_INT 4
40519: NEG
40520: PUSH
40521: LD_INT 0
40523: PUSH
40524: EMPTY
40525: LIST
40526: LIST
40527: PUSH
40528: LD_INT 4
40530: NEG
40531: PUSH
40532: LD_INT 1
40534: NEG
40535: PUSH
40536: EMPTY
40537: LIST
40538: LIST
40539: PUSH
40540: LD_INT 4
40542: NEG
40543: PUSH
40544: LD_INT 2
40546: NEG
40547: PUSH
40548: EMPTY
40549: LIST
40550: LIST
40551: PUSH
40552: LD_INT 2
40554: NEG
40555: PUSH
40556: LD_INT 2
40558: PUSH
40559: EMPTY
40560: LIST
40561: LIST
40562: PUSH
40563: LD_INT 4
40565: NEG
40566: PUSH
40567: LD_INT 4
40569: NEG
40570: PUSH
40571: EMPTY
40572: LIST
40573: LIST
40574: PUSH
40575: LD_INT 4
40577: NEG
40578: PUSH
40579: LD_INT 5
40581: NEG
40582: PUSH
40583: EMPTY
40584: LIST
40585: LIST
40586: PUSH
40587: LD_INT 3
40589: NEG
40590: PUSH
40591: LD_INT 4
40593: NEG
40594: PUSH
40595: EMPTY
40596: LIST
40597: LIST
40598: PUSH
40599: LD_INT 3
40601: NEG
40602: PUSH
40603: LD_INT 3
40605: NEG
40606: PUSH
40607: EMPTY
40608: LIST
40609: LIST
40610: PUSH
40611: LD_INT 4
40613: NEG
40614: PUSH
40615: LD_INT 3
40617: NEG
40618: PUSH
40619: EMPTY
40620: LIST
40621: LIST
40622: PUSH
40623: LD_INT 5
40625: NEG
40626: PUSH
40627: LD_INT 4
40629: NEG
40630: PUSH
40631: EMPTY
40632: LIST
40633: LIST
40634: PUSH
40635: LD_INT 5
40637: NEG
40638: PUSH
40639: LD_INT 5
40641: NEG
40642: PUSH
40643: EMPTY
40644: LIST
40645: LIST
40646: PUSH
40647: LD_INT 3
40649: NEG
40650: PUSH
40651: LD_INT 5
40653: NEG
40654: PUSH
40655: EMPTY
40656: LIST
40657: LIST
40658: PUSH
40659: LD_INT 5
40661: NEG
40662: PUSH
40663: LD_INT 3
40665: NEG
40666: PUSH
40667: EMPTY
40668: LIST
40669: LIST
40670: PUSH
40671: EMPTY
40672: LIST
40673: LIST
40674: LIST
40675: LIST
40676: LIST
40677: LIST
40678: LIST
40679: LIST
40680: LIST
40681: LIST
40682: LIST
40683: LIST
40684: LIST
40685: LIST
40686: LIST
40687: LIST
40688: LIST
40689: LIST
40690: LIST
40691: LIST
40692: LIST
40693: LIST
40694: LIST
40695: LIST
40696: LIST
40697: LIST
40698: LIST
40699: LIST
40700: LIST
40701: LIST
40702: LIST
40703: LIST
40704: LIST
40705: LIST
40706: LIST
40707: LIST
40708: LIST
40709: LIST
40710: LIST
40711: LIST
40712: LIST
40713: LIST
40714: LIST
40715: LIST
40716: LIST
40717: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
40718: LD_ADDR_VAR 0 30
40722: PUSH
40723: LD_INT 4
40725: PUSH
40726: LD_INT 4
40728: PUSH
40729: EMPTY
40730: LIST
40731: LIST
40732: PUSH
40733: LD_INT 4
40735: PUSH
40736: LD_INT 3
40738: PUSH
40739: EMPTY
40740: LIST
40741: LIST
40742: PUSH
40743: LD_INT 5
40745: PUSH
40746: LD_INT 4
40748: PUSH
40749: EMPTY
40750: LIST
40751: LIST
40752: PUSH
40753: LD_INT 5
40755: PUSH
40756: LD_INT 5
40758: PUSH
40759: EMPTY
40760: LIST
40761: LIST
40762: PUSH
40763: LD_INT 4
40765: PUSH
40766: LD_INT 5
40768: PUSH
40769: EMPTY
40770: LIST
40771: LIST
40772: PUSH
40773: LD_INT 3
40775: PUSH
40776: LD_INT 4
40778: PUSH
40779: EMPTY
40780: LIST
40781: LIST
40782: PUSH
40783: LD_INT 3
40785: PUSH
40786: LD_INT 3
40788: PUSH
40789: EMPTY
40790: LIST
40791: LIST
40792: PUSH
40793: LD_INT 5
40795: PUSH
40796: LD_INT 3
40798: PUSH
40799: EMPTY
40800: LIST
40801: LIST
40802: PUSH
40803: LD_INT 3
40805: PUSH
40806: LD_INT 5
40808: PUSH
40809: EMPTY
40810: LIST
40811: LIST
40812: PUSH
40813: LD_INT 0
40815: PUSH
40816: LD_INT 3
40818: PUSH
40819: EMPTY
40820: LIST
40821: LIST
40822: PUSH
40823: LD_INT 0
40825: PUSH
40826: LD_INT 2
40828: PUSH
40829: EMPTY
40830: LIST
40831: LIST
40832: PUSH
40833: LD_INT 1
40835: PUSH
40836: LD_INT 3
40838: PUSH
40839: EMPTY
40840: LIST
40841: LIST
40842: PUSH
40843: LD_INT 1
40845: PUSH
40846: LD_INT 4
40848: PUSH
40849: EMPTY
40850: LIST
40851: LIST
40852: PUSH
40853: LD_INT 0
40855: PUSH
40856: LD_INT 4
40858: PUSH
40859: EMPTY
40860: LIST
40861: LIST
40862: PUSH
40863: LD_INT 1
40865: NEG
40866: PUSH
40867: LD_INT 3
40869: PUSH
40870: EMPTY
40871: LIST
40872: LIST
40873: PUSH
40874: LD_INT 1
40876: NEG
40877: PUSH
40878: LD_INT 2
40880: PUSH
40881: EMPTY
40882: LIST
40883: LIST
40884: PUSH
40885: LD_INT 2
40887: PUSH
40888: LD_INT 4
40890: PUSH
40891: EMPTY
40892: LIST
40893: LIST
40894: PUSH
40895: LD_INT 2
40897: NEG
40898: PUSH
40899: LD_INT 2
40901: PUSH
40902: EMPTY
40903: LIST
40904: LIST
40905: PUSH
40906: LD_INT 4
40908: NEG
40909: PUSH
40910: LD_INT 0
40912: PUSH
40913: EMPTY
40914: LIST
40915: LIST
40916: PUSH
40917: LD_INT 4
40919: NEG
40920: PUSH
40921: LD_INT 1
40923: NEG
40924: PUSH
40925: EMPTY
40926: LIST
40927: LIST
40928: PUSH
40929: LD_INT 3
40931: NEG
40932: PUSH
40933: LD_INT 0
40935: PUSH
40936: EMPTY
40937: LIST
40938: LIST
40939: PUSH
40940: LD_INT 3
40942: NEG
40943: PUSH
40944: LD_INT 1
40946: PUSH
40947: EMPTY
40948: LIST
40949: LIST
40950: PUSH
40951: LD_INT 4
40953: NEG
40954: PUSH
40955: LD_INT 1
40957: PUSH
40958: EMPTY
40959: LIST
40960: LIST
40961: PUSH
40962: LD_INT 5
40964: NEG
40965: PUSH
40966: LD_INT 0
40968: PUSH
40969: EMPTY
40970: LIST
40971: LIST
40972: PUSH
40973: LD_INT 5
40975: NEG
40976: PUSH
40977: LD_INT 1
40979: NEG
40980: PUSH
40981: EMPTY
40982: LIST
40983: LIST
40984: PUSH
40985: LD_INT 5
40987: NEG
40988: PUSH
40989: LD_INT 2
40991: NEG
40992: PUSH
40993: EMPTY
40994: LIST
40995: LIST
40996: PUSH
40997: LD_INT 3
40999: NEG
41000: PUSH
41001: LD_INT 2
41003: PUSH
41004: EMPTY
41005: LIST
41006: LIST
41007: PUSH
41008: LD_INT 3
41010: NEG
41011: PUSH
41012: LD_INT 3
41014: NEG
41015: PUSH
41016: EMPTY
41017: LIST
41018: LIST
41019: PUSH
41020: LD_INT 3
41022: NEG
41023: PUSH
41024: LD_INT 4
41026: NEG
41027: PUSH
41028: EMPTY
41029: LIST
41030: LIST
41031: PUSH
41032: LD_INT 2
41034: NEG
41035: PUSH
41036: LD_INT 3
41038: NEG
41039: PUSH
41040: EMPTY
41041: LIST
41042: LIST
41043: PUSH
41044: LD_INT 2
41046: NEG
41047: PUSH
41048: LD_INT 2
41050: NEG
41051: PUSH
41052: EMPTY
41053: LIST
41054: LIST
41055: PUSH
41056: LD_INT 3
41058: NEG
41059: PUSH
41060: LD_INT 2
41062: NEG
41063: PUSH
41064: EMPTY
41065: LIST
41066: LIST
41067: PUSH
41068: LD_INT 4
41070: NEG
41071: PUSH
41072: LD_INT 3
41074: NEG
41075: PUSH
41076: EMPTY
41077: LIST
41078: LIST
41079: PUSH
41080: LD_INT 4
41082: NEG
41083: PUSH
41084: LD_INT 4
41086: NEG
41087: PUSH
41088: EMPTY
41089: LIST
41090: LIST
41091: PUSH
41092: LD_INT 2
41094: NEG
41095: PUSH
41096: LD_INT 4
41098: NEG
41099: PUSH
41100: EMPTY
41101: LIST
41102: LIST
41103: PUSH
41104: LD_INT 4
41106: NEG
41107: PUSH
41108: LD_INT 2
41110: NEG
41111: PUSH
41112: EMPTY
41113: LIST
41114: LIST
41115: PUSH
41116: LD_INT 0
41118: PUSH
41119: LD_INT 4
41121: NEG
41122: PUSH
41123: EMPTY
41124: LIST
41125: LIST
41126: PUSH
41127: LD_INT 0
41129: PUSH
41130: LD_INT 5
41132: NEG
41133: PUSH
41134: EMPTY
41135: LIST
41136: LIST
41137: PUSH
41138: LD_INT 1
41140: PUSH
41141: LD_INT 4
41143: NEG
41144: PUSH
41145: EMPTY
41146: LIST
41147: LIST
41148: PUSH
41149: LD_INT 1
41151: PUSH
41152: LD_INT 3
41154: NEG
41155: PUSH
41156: EMPTY
41157: LIST
41158: LIST
41159: PUSH
41160: LD_INT 0
41162: PUSH
41163: LD_INT 3
41165: NEG
41166: PUSH
41167: EMPTY
41168: LIST
41169: LIST
41170: PUSH
41171: LD_INT 1
41173: NEG
41174: PUSH
41175: LD_INT 4
41177: NEG
41178: PUSH
41179: EMPTY
41180: LIST
41181: LIST
41182: PUSH
41183: LD_INT 1
41185: NEG
41186: PUSH
41187: LD_INT 5
41189: NEG
41190: PUSH
41191: EMPTY
41192: LIST
41193: LIST
41194: PUSH
41195: LD_INT 2
41197: PUSH
41198: LD_INT 3
41200: NEG
41201: PUSH
41202: EMPTY
41203: LIST
41204: LIST
41205: PUSH
41206: LD_INT 2
41208: NEG
41209: PUSH
41210: LD_INT 5
41212: NEG
41213: PUSH
41214: EMPTY
41215: LIST
41216: LIST
41217: PUSH
41218: EMPTY
41219: LIST
41220: LIST
41221: LIST
41222: LIST
41223: LIST
41224: LIST
41225: LIST
41226: LIST
41227: LIST
41228: LIST
41229: LIST
41230: LIST
41231: LIST
41232: LIST
41233: LIST
41234: LIST
41235: LIST
41236: LIST
41237: LIST
41238: LIST
41239: LIST
41240: LIST
41241: LIST
41242: LIST
41243: LIST
41244: LIST
41245: LIST
41246: LIST
41247: LIST
41248: LIST
41249: LIST
41250: LIST
41251: LIST
41252: LIST
41253: LIST
41254: LIST
41255: LIST
41256: LIST
41257: LIST
41258: LIST
41259: LIST
41260: LIST
41261: LIST
41262: LIST
41263: LIST
41264: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
41265: LD_ADDR_VAR 0 31
41269: PUSH
41270: LD_INT 0
41272: PUSH
41273: LD_INT 4
41275: PUSH
41276: EMPTY
41277: LIST
41278: LIST
41279: PUSH
41280: LD_INT 0
41282: PUSH
41283: LD_INT 3
41285: PUSH
41286: EMPTY
41287: LIST
41288: LIST
41289: PUSH
41290: LD_INT 1
41292: PUSH
41293: LD_INT 4
41295: PUSH
41296: EMPTY
41297: LIST
41298: LIST
41299: PUSH
41300: LD_INT 1
41302: PUSH
41303: LD_INT 5
41305: PUSH
41306: EMPTY
41307: LIST
41308: LIST
41309: PUSH
41310: LD_INT 0
41312: PUSH
41313: LD_INT 5
41315: PUSH
41316: EMPTY
41317: LIST
41318: LIST
41319: PUSH
41320: LD_INT 1
41322: NEG
41323: PUSH
41324: LD_INT 4
41326: PUSH
41327: EMPTY
41328: LIST
41329: LIST
41330: PUSH
41331: LD_INT 1
41333: NEG
41334: PUSH
41335: LD_INT 3
41337: PUSH
41338: EMPTY
41339: LIST
41340: LIST
41341: PUSH
41342: LD_INT 2
41344: PUSH
41345: LD_INT 5
41347: PUSH
41348: EMPTY
41349: LIST
41350: LIST
41351: PUSH
41352: LD_INT 2
41354: NEG
41355: PUSH
41356: LD_INT 3
41358: PUSH
41359: EMPTY
41360: LIST
41361: LIST
41362: PUSH
41363: LD_INT 3
41365: NEG
41366: PUSH
41367: LD_INT 0
41369: PUSH
41370: EMPTY
41371: LIST
41372: LIST
41373: PUSH
41374: LD_INT 3
41376: NEG
41377: PUSH
41378: LD_INT 1
41380: NEG
41381: PUSH
41382: EMPTY
41383: LIST
41384: LIST
41385: PUSH
41386: LD_INT 2
41388: NEG
41389: PUSH
41390: LD_INT 0
41392: PUSH
41393: EMPTY
41394: LIST
41395: LIST
41396: PUSH
41397: LD_INT 2
41399: NEG
41400: PUSH
41401: LD_INT 1
41403: PUSH
41404: EMPTY
41405: LIST
41406: LIST
41407: PUSH
41408: LD_INT 3
41410: NEG
41411: PUSH
41412: LD_INT 1
41414: PUSH
41415: EMPTY
41416: LIST
41417: LIST
41418: PUSH
41419: LD_INT 4
41421: NEG
41422: PUSH
41423: LD_INT 0
41425: PUSH
41426: EMPTY
41427: LIST
41428: LIST
41429: PUSH
41430: LD_INT 4
41432: NEG
41433: PUSH
41434: LD_INT 1
41436: NEG
41437: PUSH
41438: EMPTY
41439: LIST
41440: LIST
41441: PUSH
41442: LD_INT 4
41444: NEG
41445: PUSH
41446: LD_INT 2
41448: NEG
41449: PUSH
41450: EMPTY
41451: LIST
41452: LIST
41453: PUSH
41454: LD_INT 2
41456: NEG
41457: PUSH
41458: LD_INT 2
41460: PUSH
41461: EMPTY
41462: LIST
41463: LIST
41464: PUSH
41465: LD_INT 4
41467: NEG
41468: PUSH
41469: LD_INT 4
41471: NEG
41472: PUSH
41473: EMPTY
41474: LIST
41475: LIST
41476: PUSH
41477: LD_INT 4
41479: NEG
41480: PUSH
41481: LD_INT 5
41483: NEG
41484: PUSH
41485: EMPTY
41486: LIST
41487: LIST
41488: PUSH
41489: LD_INT 3
41491: NEG
41492: PUSH
41493: LD_INT 4
41495: NEG
41496: PUSH
41497: EMPTY
41498: LIST
41499: LIST
41500: PUSH
41501: LD_INT 3
41503: NEG
41504: PUSH
41505: LD_INT 3
41507: NEG
41508: PUSH
41509: EMPTY
41510: LIST
41511: LIST
41512: PUSH
41513: LD_INT 4
41515: NEG
41516: PUSH
41517: LD_INT 3
41519: NEG
41520: PUSH
41521: EMPTY
41522: LIST
41523: LIST
41524: PUSH
41525: LD_INT 5
41527: NEG
41528: PUSH
41529: LD_INT 4
41531: NEG
41532: PUSH
41533: EMPTY
41534: LIST
41535: LIST
41536: PUSH
41537: LD_INT 5
41539: NEG
41540: PUSH
41541: LD_INT 5
41543: NEG
41544: PUSH
41545: EMPTY
41546: LIST
41547: LIST
41548: PUSH
41549: LD_INT 3
41551: NEG
41552: PUSH
41553: LD_INT 5
41555: NEG
41556: PUSH
41557: EMPTY
41558: LIST
41559: LIST
41560: PUSH
41561: LD_INT 5
41563: NEG
41564: PUSH
41565: LD_INT 3
41567: NEG
41568: PUSH
41569: EMPTY
41570: LIST
41571: LIST
41572: PUSH
41573: LD_INT 0
41575: PUSH
41576: LD_INT 3
41578: NEG
41579: PUSH
41580: EMPTY
41581: LIST
41582: LIST
41583: PUSH
41584: LD_INT 0
41586: PUSH
41587: LD_INT 4
41589: NEG
41590: PUSH
41591: EMPTY
41592: LIST
41593: LIST
41594: PUSH
41595: LD_INT 1
41597: PUSH
41598: LD_INT 3
41600: NEG
41601: PUSH
41602: EMPTY
41603: LIST
41604: LIST
41605: PUSH
41606: LD_INT 1
41608: PUSH
41609: LD_INT 2
41611: NEG
41612: PUSH
41613: EMPTY
41614: LIST
41615: LIST
41616: PUSH
41617: LD_INT 0
41619: PUSH
41620: LD_INT 2
41622: NEG
41623: PUSH
41624: EMPTY
41625: LIST
41626: LIST
41627: PUSH
41628: LD_INT 1
41630: NEG
41631: PUSH
41632: LD_INT 3
41634: NEG
41635: PUSH
41636: EMPTY
41637: LIST
41638: LIST
41639: PUSH
41640: LD_INT 1
41642: NEG
41643: PUSH
41644: LD_INT 4
41646: NEG
41647: PUSH
41648: EMPTY
41649: LIST
41650: LIST
41651: PUSH
41652: LD_INT 2
41654: PUSH
41655: LD_INT 2
41657: NEG
41658: PUSH
41659: EMPTY
41660: LIST
41661: LIST
41662: PUSH
41663: LD_INT 2
41665: NEG
41666: PUSH
41667: LD_INT 4
41669: NEG
41670: PUSH
41671: EMPTY
41672: LIST
41673: LIST
41674: PUSH
41675: LD_INT 4
41677: PUSH
41678: LD_INT 0
41680: PUSH
41681: EMPTY
41682: LIST
41683: LIST
41684: PUSH
41685: LD_INT 4
41687: PUSH
41688: LD_INT 1
41690: NEG
41691: PUSH
41692: EMPTY
41693: LIST
41694: LIST
41695: PUSH
41696: LD_INT 5
41698: PUSH
41699: LD_INT 0
41701: PUSH
41702: EMPTY
41703: LIST
41704: LIST
41705: PUSH
41706: LD_INT 5
41708: PUSH
41709: LD_INT 1
41711: PUSH
41712: EMPTY
41713: LIST
41714: LIST
41715: PUSH
41716: LD_INT 4
41718: PUSH
41719: LD_INT 1
41721: PUSH
41722: EMPTY
41723: LIST
41724: LIST
41725: PUSH
41726: LD_INT 3
41728: PUSH
41729: LD_INT 0
41731: PUSH
41732: EMPTY
41733: LIST
41734: LIST
41735: PUSH
41736: LD_INT 3
41738: PUSH
41739: LD_INT 1
41741: NEG
41742: PUSH
41743: EMPTY
41744: LIST
41745: LIST
41746: PUSH
41747: LD_INT 3
41749: PUSH
41750: LD_INT 2
41752: NEG
41753: PUSH
41754: EMPTY
41755: LIST
41756: LIST
41757: PUSH
41758: LD_INT 5
41760: PUSH
41761: LD_INT 2
41763: PUSH
41764: EMPTY
41765: LIST
41766: LIST
41767: PUSH
41768: EMPTY
41769: LIST
41770: LIST
41771: LIST
41772: LIST
41773: LIST
41774: LIST
41775: LIST
41776: LIST
41777: LIST
41778: LIST
41779: LIST
41780: LIST
41781: LIST
41782: LIST
41783: LIST
41784: LIST
41785: LIST
41786: LIST
41787: LIST
41788: LIST
41789: LIST
41790: LIST
41791: LIST
41792: LIST
41793: LIST
41794: LIST
41795: LIST
41796: LIST
41797: LIST
41798: LIST
41799: LIST
41800: LIST
41801: LIST
41802: LIST
41803: LIST
41804: LIST
41805: LIST
41806: LIST
41807: LIST
41808: LIST
41809: LIST
41810: LIST
41811: LIST
41812: LIST
41813: LIST
41814: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
41815: LD_ADDR_VAR 0 32
41819: PUSH
41820: LD_INT 4
41822: NEG
41823: PUSH
41824: LD_INT 0
41826: PUSH
41827: EMPTY
41828: LIST
41829: LIST
41830: PUSH
41831: LD_INT 4
41833: NEG
41834: PUSH
41835: LD_INT 1
41837: NEG
41838: PUSH
41839: EMPTY
41840: LIST
41841: LIST
41842: PUSH
41843: LD_INT 3
41845: NEG
41846: PUSH
41847: LD_INT 0
41849: PUSH
41850: EMPTY
41851: LIST
41852: LIST
41853: PUSH
41854: LD_INT 3
41856: NEG
41857: PUSH
41858: LD_INT 1
41860: PUSH
41861: EMPTY
41862: LIST
41863: LIST
41864: PUSH
41865: LD_INT 4
41867: NEG
41868: PUSH
41869: LD_INT 1
41871: PUSH
41872: EMPTY
41873: LIST
41874: LIST
41875: PUSH
41876: LD_INT 5
41878: NEG
41879: PUSH
41880: LD_INT 0
41882: PUSH
41883: EMPTY
41884: LIST
41885: LIST
41886: PUSH
41887: LD_INT 5
41889: NEG
41890: PUSH
41891: LD_INT 1
41893: NEG
41894: PUSH
41895: EMPTY
41896: LIST
41897: LIST
41898: PUSH
41899: LD_INT 5
41901: NEG
41902: PUSH
41903: LD_INT 2
41905: NEG
41906: PUSH
41907: EMPTY
41908: LIST
41909: LIST
41910: PUSH
41911: LD_INT 3
41913: NEG
41914: PUSH
41915: LD_INT 2
41917: PUSH
41918: EMPTY
41919: LIST
41920: LIST
41921: PUSH
41922: LD_INT 3
41924: NEG
41925: PUSH
41926: LD_INT 3
41928: NEG
41929: PUSH
41930: EMPTY
41931: LIST
41932: LIST
41933: PUSH
41934: LD_INT 3
41936: NEG
41937: PUSH
41938: LD_INT 4
41940: NEG
41941: PUSH
41942: EMPTY
41943: LIST
41944: LIST
41945: PUSH
41946: LD_INT 2
41948: NEG
41949: PUSH
41950: LD_INT 3
41952: NEG
41953: PUSH
41954: EMPTY
41955: LIST
41956: LIST
41957: PUSH
41958: LD_INT 2
41960: NEG
41961: PUSH
41962: LD_INT 2
41964: NEG
41965: PUSH
41966: EMPTY
41967: LIST
41968: LIST
41969: PUSH
41970: LD_INT 3
41972: NEG
41973: PUSH
41974: LD_INT 2
41976: NEG
41977: PUSH
41978: EMPTY
41979: LIST
41980: LIST
41981: PUSH
41982: LD_INT 4
41984: NEG
41985: PUSH
41986: LD_INT 3
41988: NEG
41989: PUSH
41990: EMPTY
41991: LIST
41992: LIST
41993: PUSH
41994: LD_INT 4
41996: NEG
41997: PUSH
41998: LD_INT 4
42000: NEG
42001: PUSH
42002: EMPTY
42003: LIST
42004: LIST
42005: PUSH
42006: LD_INT 2
42008: NEG
42009: PUSH
42010: LD_INT 4
42012: NEG
42013: PUSH
42014: EMPTY
42015: LIST
42016: LIST
42017: PUSH
42018: LD_INT 4
42020: NEG
42021: PUSH
42022: LD_INT 2
42024: NEG
42025: PUSH
42026: EMPTY
42027: LIST
42028: LIST
42029: PUSH
42030: LD_INT 0
42032: PUSH
42033: LD_INT 4
42035: NEG
42036: PUSH
42037: EMPTY
42038: LIST
42039: LIST
42040: PUSH
42041: LD_INT 0
42043: PUSH
42044: LD_INT 5
42046: NEG
42047: PUSH
42048: EMPTY
42049: LIST
42050: LIST
42051: PUSH
42052: LD_INT 1
42054: PUSH
42055: LD_INT 4
42057: NEG
42058: PUSH
42059: EMPTY
42060: LIST
42061: LIST
42062: PUSH
42063: LD_INT 1
42065: PUSH
42066: LD_INT 3
42068: NEG
42069: PUSH
42070: EMPTY
42071: LIST
42072: LIST
42073: PUSH
42074: LD_INT 0
42076: PUSH
42077: LD_INT 3
42079: NEG
42080: PUSH
42081: EMPTY
42082: LIST
42083: LIST
42084: PUSH
42085: LD_INT 1
42087: NEG
42088: PUSH
42089: LD_INT 4
42091: NEG
42092: PUSH
42093: EMPTY
42094: LIST
42095: LIST
42096: PUSH
42097: LD_INT 1
42099: NEG
42100: PUSH
42101: LD_INT 5
42103: NEG
42104: PUSH
42105: EMPTY
42106: LIST
42107: LIST
42108: PUSH
42109: LD_INT 2
42111: PUSH
42112: LD_INT 3
42114: NEG
42115: PUSH
42116: EMPTY
42117: LIST
42118: LIST
42119: PUSH
42120: LD_INT 2
42122: NEG
42123: PUSH
42124: LD_INT 5
42126: NEG
42127: PUSH
42128: EMPTY
42129: LIST
42130: LIST
42131: PUSH
42132: LD_INT 3
42134: PUSH
42135: LD_INT 0
42137: PUSH
42138: EMPTY
42139: LIST
42140: LIST
42141: PUSH
42142: LD_INT 3
42144: PUSH
42145: LD_INT 1
42147: NEG
42148: PUSH
42149: EMPTY
42150: LIST
42151: LIST
42152: PUSH
42153: LD_INT 4
42155: PUSH
42156: LD_INT 0
42158: PUSH
42159: EMPTY
42160: LIST
42161: LIST
42162: PUSH
42163: LD_INT 4
42165: PUSH
42166: LD_INT 1
42168: PUSH
42169: EMPTY
42170: LIST
42171: LIST
42172: PUSH
42173: LD_INT 3
42175: PUSH
42176: LD_INT 1
42178: PUSH
42179: EMPTY
42180: LIST
42181: LIST
42182: PUSH
42183: LD_INT 2
42185: PUSH
42186: LD_INT 0
42188: PUSH
42189: EMPTY
42190: LIST
42191: LIST
42192: PUSH
42193: LD_INT 2
42195: PUSH
42196: LD_INT 1
42198: NEG
42199: PUSH
42200: EMPTY
42201: LIST
42202: LIST
42203: PUSH
42204: LD_INT 2
42206: PUSH
42207: LD_INT 2
42209: NEG
42210: PUSH
42211: EMPTY
42212: LIST
42213: LIST
42214: PUSH
42215: LD_INT 4
42217: PUSH
42218: LD_INT 2
42220: PUSH
42221: EMPTY
42222: LIST
42223: LIST
42224: PUSH
42225: LD_INT 4
42227: PUSH
42228: LD_INT 4
42230: PUSH
42231: EMPTY
42232: LIST
42233: LIST
42234: PUSH
42235: LD_INT 4
42237: PUSH
42238: LD_INT 3
42240: PUSH
42241: EMPTY
42242: LIST
42243: LIST
42244: PUSH
42245: LD_INT 5
42247: PUSH
42248: LD_INT 4
42250: PUSH
42251: EMPTY
42252: LIST
42253: LIST
42254: PUSH
42255: LD_INT 5
42257: PUSH
42258: LD_INT 5
42260: PUSH
42261: EMPTY
42262: LIST
42263: LIST
42264: PUSH
42265: LD_INT 4
42267: PUSH
42268: LD_INT 5
42270: PUSH
42271: EMPTY
42272: LIST
42273: LIST
42274: PUSH
42275: LD_INT 3
42277: PUSH
42278: LD_INT 4
42280: PUSH
42281: EMPTY
42282: LIST
42283: LIST
42284: PUSH
42285: LD_INT 3
42287: PUSH
42288: LD_INT 3
42290: PUSH
42291: EMPTY
42292: LIST
42293: LIST
42294: PUSH
42295: LD_INT 5
42297: PUSH
42298: LD_INT 3
42300: PUSH
42301: EMPTY
42302: LIST
42303: LIST
42304: PUSH
42305: LD_INT 3
42307: PUSH
42308: LD_INT 5
42310: PUSH
42311: EMPTY
42312: LIST
42313: LIST
42314: PUSH
42315: EMPTY
42316: LIST
42317: LIST
42318: LIST
42319: LIST
42320: LIST
42321: LIST
42322: LIST
42323: LIST
42324: LIST
42325: LIST
42326: LIST
42327: LIST
42328: LIST
42329: LIST
42330: LIST
42331: LIST
42332: LIST
42333: LIST
42334: LIST
42335: LIST
42336: LIST
42337: LIST
42338: LIST
42339: LIST
42340: LIST
42341: LIST
42342: LIST
42343: LIST
42344: LIST
42345: LIST
42346: LIST
42347: LIST
42348: LIST
42349: LIST
42350: LIST
42351: LIST
42352: LIST
42353: LIST
42354: LIST
42355: LIST
42356: LIST
42357: LIST
42358: LIST
42359: LIST
42360: LIST
42361: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
42362: LD_ADDR_VAR 0 33
42366: PUSH
42367: LD_INT 4
42369: NEG
42370: PUSH
42371: LD_INT 4
42373: NEG
42374: PUSH
42375: EMPTY
42376: LIST
42377: LIST
42378: PUSH
42379: LD_INT 4
42381: NEG
42382: PUSH
42383: LD_INT 5
42385: NEG
42386: PUSH
42387: EMPTY
42388: LIST
42389: LIST
42390: PUSH
42391: LD_INT 3
42393: NEG
42394: PUSH
42395: LD_INT 4
42397: NEG
42398: PUSH
42399: EMPTY
42400: LIST
42401: LIST
42402: PUSH
42403: LD_INT 3
42405: NEG
42406: PUSH
42407: LD_INT 3
42409: NEG
42410: PUSH
42411: EMPTY
42412: LIST
42413: LIST
42414: PUSH
42415: LD_INT 4
42417: NEG
42418: PUSH
42419: LD_INT 3
42421: NEG
42422: PUSH
42423: EMPTY
42424: LIST
42425: LIST
42426: PUSH
42427: LD_INT 5
42429: NEG
42430: PUSH
42431: LD_INT 4
42433: NEG
42434: PUSH
42435: EMPTY
42436: LIST
42437: LIST
42438: PUSH
42439: LD_INT 5
42441: NEG
42442: PUSH
42443: LD_INT 5
42445: NEG
42446: PUSH
42447: EMPTY
42448: LIST
42449: LIST
42450: PUSH
42451: LD_INT 3
42453: NEG
42454: PUSH
42455: LD_INT 5
42457: NEG
42458: PUSH
42459: EMPTY
42460: LIST
42461: LIST
42462: PUSH
42463: LD_INT 5
42465: NEG
42466: PUSH
42467: LD_INT 3
42469: NEG
42470: PUSH
42471: EMPTY
42472: LIST
42473: LIST
42474: PUSH
42475: LD_INT 0
42477: PUSH
42478: LD_INT 3
42480: NEG
42481: PUSH
42482: EMPTY
42483: LIST
42484: LIST
42485: PUSH
42486: LD_INT 0
42488: PUSH
42489: LD_INT 4
42491: NEG
42492: PUSH
42493: EMPTY
42494: LIST
42495: LIST
42496: PUSH
42497: LD_INT 1
42499: PUSH
42500: LD_INT 3
42502: NEG
42503: PUSH
42504: EMPTY
42505: LIST
42506: LIST
42507: PUSH
42508: LD_INT 1
42510: PUSH
42511: LD_INT 2
42513: NEG
42514: PUSH
42515: EMPTY
42516: LIST
42517: LIST
42518: PUSH
42519: LD_INT 0
42521: PUSH
42522: LD_INT 2
42524: NEG
42525: PUSH
42526: EMPTY
42527: LIST
42528: LIST
42529: PUSH
42530: LD_INT 1
42532: NEG
42533: PUSH
42534: LD_INT 3
42536: NEG
42537: PUSH
42538: EMPTY
42539: LIST
42540: LIST
42541: PUSH
42542: LD_INT 1
42544: NEG
42545: PUSH
42546: LD_INT 4
42548: NEG
42549: PUSH
42550: EMPTY
42551: LIST
42552: LIST
42553: PUSH
42554: LD_INT 2
42556: PUSH
42557: LD_INT 2
42559: NEG
42560: PUSH
42561: EMPTY
42562: LIST
42563: LIST
42564: PUSH
42565: LD_INT 2
42567: NEG
42568: PUSH
42569: LD_INT 4
42571: NEG
42572: PUSH
42573: EMPTY
42574: LIST
42575: LIST
42576: PUSH
42577: LD_INT 4
42579: PUSH
42580: LD_INT 0
42582: PUSH
42583: EMPTY
42584: LIST
42585: LIST
42586: PUSH
42587: LD_INT 4
42589: PUSH
42590: LD_INT 1
42592: NEG
42593: PUSH
42594: EMPTY
42595: LIST
42596: LIST
42597: PUSH
42598: LD_INT 5
42600: PUSH
42601: LD_INT 0
42603: PUSH
42604: EMPTY
42605: LIST
42606: LIST
42607: PUSH
42608: LD_INT 5
42610: PUSH
42611: LD_INT 1
42613: PUSH
42614: EMPTY
42615: LIST
42616: LIST
42617: PUSH
42618: LD_INT 4
42620: PUSH
42621: LD_INT 1
42623: PUSH
42624: EMPTY
42625: LIST
42626: LIST
42627: PUSH
42628: LD_INT 3
42630: PUSH
42631: LD_INT 0
42633: PUSH
42634: EMPTY
42635: LIST
42636: LIST
42637: PUSH
42638: LD_INT 3
42640: PUSH
42641: LD_INT 1
42643: NEG
42644: PUSH
42645: EMPTY
42646: LIST
42647: LIST
42648: PUSH
42649: LD_INT 3
42651: PUSH
42652: LD_INT 2
42654: NEG
42655: PUSH
42656: EMPTY
42657: LIST
42658: LIST
42659: PUSH
42660: LD_INT 5
42662: PUSH
42663: LD_INT 2
42665: PUSH
42666: EMPTY
42667: LIST
42668: LIST
42669: PUSH
42670: LD_INT 3
42672: PUSH
42673: LD_INT 3
42675: PUSH
42676: EMPTY
42677: LIST
42678: LIST
42679: PUSH
42680: LD_INT 3
42682: PUSH
42683: LD_INT 2
42685: PUSH
42686: EMPTY
42687: LIST
42688: LIST
42689: PUSH
42690: LD_INT 4
42692: PUSH
42693: LD_INT 3
42695: PUSH
42696: EMPTY
42697: LIST
42698: LIST
42699: PUSH
42700: LD_INT 4
42702: PUSH
42703: LD_INT 4
42705: PUSH
42706: EMPTY
42707: LIST
42708: LIST
42709: PUSH
42710: LD_INT 3
42712: PUSH
42713: LD_INT 4
42715: PUSH
42716: EMPTY
42717: LIST
42718: LIST
42719: PUSH
42720: LD_INT 2
42722: PUSH
42723: LD_INT 3
42725: PUSH
42726: EMPTY
42727: LIST
42728: LIST
42729: PUSH
42730: LD_INT 2
42732: PUSH
42733: LD_INT 2
42735: PUSH
42736: EMPTY
42737: LIST
42738: LIST
42739: PUSH
42740: LD_INT 4
42742: PUSH
42743: LD_INT 2
42745: PUSH
42746: EMPTY
42747: LIST
42748: LIST
42749: PUSH
42750: LD_INT 2
42752: PUSH
42753: LD_INT 4
42755: PUSH
42756: EMPTY
42757: LIST
42758: LIST
42759: PUSH
42760: LD_INT 0
42762: PUSH
42763: LD_INT 4
42765: PUSH
42766: EMPTY
42767: LIST
42768: LIST
42769: PUSH
42770: LD_INT 0
42772: PUSH
42773: LD_INT 3
42775: PUSH
42776: EMPTY
42777: LIST
42778: LIST
42779: PUSH
42780: LD_INT 1
42782: PUSH
42783: LD_INT 4
42785: PUSH
42786: EMPTY
42787: LIST
42788: LIST
42789: PUSH
42790: LD_INT 1
42792: PUSH
42793: LD_INT 5
42795: PUSH
42796: EMPTY
42797: LIST
42798: LIST
42799: PUSH
42800: LD_INT 0
42802: PUSH
42803: LD_INT 5
42805: PUSH
42806: EMPTY
42807: LIST
42808: LIST
42809: PUSH
42810: LD_INT 1
42812: NEG
42813: PUSH
42814: LD_INT 4
42816: PUSH
42817: EMPTY
42818: LIST
42819: LIST
42820: PUSH
42821: LD_INT 1
42823: NEG
42824: PUSH
42825: LD_INT 3
42827: PUSH
42828: EMPTY
42829: LIST
42830: LIST
42831: PUSH
42832: LD_INT 2
42834: PUSH
42835: LD_INT 5
42837: PUSH
42838: EMPTY
42839: LIST
42840: LIST
42841: PUSH
42842: LD_INT 2
42844: NEG
42845: PUSH
42846: LD_INT 3
42848: PUSH
42849: EMPTY
42850: LIST
42851: LIST
42852: PUSH
42853: EMPTY
42854: LIST
42855: LIST
42856: LIST
42857: LIST
42858: LIST
42859: LIST
42860: LIST
42861: LIST
42862: LIST
42863: LIST
42864: LIST
42865: LIST
42866: LIST
42867: LIST
42868: LIST
42869: LIST
42870: LIST
42871: LIST
42872: LIST
42873: LIST
42874: LIST
42875: LIST
42876: LIST
42877: LIST
42878: LIST
42879: LIST
42880: LIST
42881: LIST
42882: LIST
42883: LIST
42884: LIST
42885: LIST
42886: LIST
42887: LIST
42888: LIST
42889: LIST
42890: LIST
42891: LIST
42892: LIST
42893: LIST
42894: LIST
42895: LIST
42896: LIST
42897: LIST
42898: LIST
42899: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
42900: LD_ADDR_VAR 0 34
42904: PUSH
42905: LD_INT 0
42907: PUSH
42908: LD_INT 4
42910: NEG
42911: PUSH
42912: EMPTY
42913: LIST
42914: LIST
42915: PUSH
42916: LD_INT 0
42918: PUSH
42919: LD_INT 5
42921: NEG
42922: PUSH
42923: EMPTY
42924: LIST
42925: LIST
42926: PUSH
42927: LD_INT 1
42929: PUSH
42930: LD_INT 4
42932: NEG
42933: PUSH
42934: EMPTY
42935: LIST
42936: LIST
42937: PUSH
42938: LD_INT 1
42940: PUSH
42941: LD_INT 3
42943: NEG
42944: PUSH
42945: EMPTY
42946: LIST
42947: LIST
42948: PUSH
42949: LD_INT 0
42951: PUSH
42952: LD_INT 3
42954: NEG
42955: PUSH
42956: EMPTY
42957: LIST
42958: LIST
42959: PUSH
42960: LD_INT 1
42962: NEG
42963: PUSH
42964: LD_INT 4
42966: NEG
42967: PUSH
42968: EMPTY
42969: LIST
42970: LIST
42971: PUSH
42972: LD_INT 1
42974: NEG
42975: PUSH
42976: LD_INT 5
42978: NEG
42979: PUSH
42980: EMPTY
42981: LIST
42982: LIST
42983: PUSH
42984: LD_INT 2
42986: PUSH
42987: LD_INT 3
42989: NEG
42990: PUSH
42991: EMPTY
42992: LIST
42993: LIST
42994: PUSH
42995: LD_INT 2
42997: NEG
42998: PUSH
42999: LD_INT 5
43001: NEG
43002: PUSH
43003: EMPTY
43004: LIST
43005: LIST
43006: PUSH
43007: LD_INT 3
43009: PUSH
43010: LD_INT 0
43012: PUSH
43013: EMPTY
43014: LIST
43015: LIST
43016: PUSH
43017: LD_INT 3
43019: PUSH
43020: LD_INT 1
43022: NEG
43023: PUSH
43024: EMPTY
43025: LIST
43026: LIST
43027: PUSH
43028: LD_INT 4
43030: PUSH
43031: LD_INT 0
43033: PUSH
43034: EMPTY
43035: LIST
43036: LIST
43037: PUSH
43038: LD_INT 4
43040: PUSH
43041: LD_INT 1
43043: PUSH
43044: EMPTY
43045: LIST
43046: LIST
43047: PUSH
43048: LD_INT 3
43050: PUSH
43051: LD_INT 1
43053: PUSH
43054: EMPTY
43055: LIST
43056: LIST
43057: PUSH
43058: LD_INT 2
43060: PUSH
43061: LD_INT 0
43063: PUSH
43064: EMPTY
43065: LIST
43066: LIST
43067: PUSH
43068: LD_INT 2
43070: PUSH
43071: LD_INT 1
43073: NEG
43074: PUSH
43075: EMPTY
43076: LIST
43077: LIST
43078: PUSH
43079: LD_INT 2
43081: PUSH
43082: LD_INT 2
43084: NEG
43085: PUSH
43086: EMPTY
43087: LIST
43088: LIST
43089: PUSH
43090: LD_INT 4
43092: PUSH
43093: LD_INT 2
43095: PUSH
43096: EMPTY
43097: LIST
43098: LIST
43099: PUSH
43100: LD_INT 4
43102: PUSH
43103: LD_INT 4
43105: PUSH
43106: EMPTY
43107: LIST
43108: LIST
43109: PUSH
43110: LD_INT 4
43112: PUSH
43113: LD_INT 3
43115: PUSH
43116: EMPTY
43117: LIST
43118: LIST
43119: PUSH
43120: LD_INT 5
43122: PUSH
43123: LD_INT 4
43125: PUSH
43126: EMPTY
43127: LIST
43128: LIST
43129: PUSH
43130: LD_INT 5
43132: PUSH
43133: LD_INT 5
43135: PUSH
43136: EMPTY
43137: LIST
43138: LIST
43139: PUSH
43140: LD_INT 4
43142: PUSH
43143: LD_INT 5
43145: PUSH
43146: EMPTY
43147: LIST
43148: LIST
43149: PUSH
43150: LD_INT 3
43152: PUSH
43153: LD_INT 4
43155: PUSH
43156: EMPTY
43157: LIST
43158: LIST
43159: PUSH
43160: LD_INT 3
43162: PUSH
43163: LD_INT 3
43165: PUSH
43166: EMPTY
43167: LIST
43168: LIST
43169: PUSH
43170: LD_INT 5
43172: PUSH
43173: LD_INT 3
43175: PUSH
43176: EMPTY
43177: LIST
43178: LIST
43179: PUSH
43180: LD_INT 3
43182: PUSH
43183: LD_INT 5
43185: PUSH
43186: EMPTY
43187: LIST
43188: LIST
43189: PUSH
43190: LD_INT 0
43192: PUSH
43193: LD_INT 3
43195: PUSH
43196: EMPTY
43197: LIST
43198: LIST
43199: PUSH
43200: LD_INT 0
43202: PUSH
43203: LD_INT 2
43205: PUSH
43206: EMPTY
43207: LIST
43208: LIST
43209: PUSH
43210: LD_INT 1
43212: PUSH
43213: LD_INT 3
43215: PUSH
43216: EMPTY
43217: LIST
43218: LIST
43219: PUSH
43220: LD_INT 1
43222: PUSH
43223: LD_INT 4
43225: PUSH
43226: EMPTY
43227: LIST
43228: LIST
43229: PUSH
43230: LD_INT 0
43232: PUSH
43233: LD_INT 4
43235: PUSH
43236: EMPTY
43237: LIST
43238: LIST
43239: PUSH
43240: LD_INT 1
43242: NEG
43243: PUSH
43244: LD_INT 3
43246: PUSH
43247: EMPTY
43248: LIST
43249: LIST
43250: PUSH
43251: LD_INT 1
43253: NEG
43254: PUSH
43255: LD_INT 2
43257: PUSH
43258: EMPTY
43259: LIST
43260: LIST
43261: PUSH
43262: LD_INT 2
43264: PUSH
43265: LD_INT 4
43267: PUSH
43268: EMPTY
43269: LIST
43270: LIST
43271: PUSH
43272: LD_INT 2
43274: NEG
43275: PUSH
43276: LD_INT 2
43278: PUSH
43279: EMPTY
43280: LIST
43281: LIST
43282: PUSH
43283: LD_INT 4
43285: NEG
43286: PUSH
43287: LD_INT 0
43289: PUSH
43290: EMPTY
43291: LIST
43292: LIST
43293: PUSH
43294: LD_INT 4
43296: NEG
43297: PUSH
43298: LD_INT 1
43300: NEG
43301: PUSH
43302: EMPTY
43303: LIST
43304: LIST
43305: PUSH
43306: LD_INT 3
43308: NEG
43309: PUSH
43310: LD_INT 0
43312: PUSH
43313: EMPTY
43314: LIST
43315: LIST
43316: PUSH
43317: LD_INT 3
43319: NEG
43320: PUSH
43321: LD_INT 1
43323: PUSH
43324: EMPTY
43325: LIST
43326: LIST
43327: PUSH
43328: LD_INT 4
43330: NEG
43331: PUSH
43332: LD_INT 1
43334: PUSH
43335: EMPTY
43336: LIST
43337: LIST
43338: PUSH
43339: LD_INT 5
43341: NEG
43342: PUSH
43343: LD_INT 0
43345: PUSH
43346: EMPTY
43347: LIST
43348: LIST
43349: PUSH
43350: LD_INT 5
43352: NEG
43353: PUSH
43354: LD_INT 1
43356: NEG
43357: PUSH
43358: EMPTY
43359: LIST
43360: LIST
43361: PUSH
43362: LD_INT 5
43364: NEG
43365: PUSH
43366: LD_INT 2
43368: NEG
43369: PUSH
43370: EMPTY
43371: LIST
43372: LIST
43373: PUSH
43374: LD_INT 3
43376: NEG
43377: PUSH
43378: LD_INT 2
43380: PUSH
43381: EMPTY
43382: LIST
43383: LIST
43384: PUSH
43385: EMPTY
43386: LIST
43387: LIST
43388: LIST
43389: LIST
43390: LIST
43391: LIST
43392: LIST
43393: LIST
43394: LIST
43395: LIST
43396: LIST
43397: LIST
43398: LIST
43399: LIST
43400: LIST
43401: LIST
43402: LIST
43403: LIST
43404: LIST
43405: LIST
43406: LIST
43407: LIST
43408: LIST
43409: LIST
43410: LIST
43411: LIST
43412: LIST
43413: LIST
43414: LIST
43415: LIST
43416: LIST
43417: LIST
43418: LIST
43419: LIST
43420: LIST
43421: LIST
43422: LIST
43423: LIST
43424: LIST
43425: LIST
43426: LIST
43427: LIST
43428: LIST
43429: LIST
43430: LIST
43431: ST_TO_ADDR
// end ; end ;
43432: GO 43435
43434: POP
// case btype of b_depot , b_warehouse :
43435: LD_VAR 0 1
43439: PUSH
43440: LD_INT 0
43442: DOUBLE
43443: EQUAL
43444: IFTRUE 43454
43446: LD_INT 1
43448: DOUBLE
43449: EQUAL
43450: IFTRUE 43454
43452: GO 43655
43454: POP
// case nation of nation_american :
43455: LD_VAR 0 5
43459: PUSH
43460: LD_INT 1
43462: DOUBLE
43463: EQUAL
43464: IFTRUE 43468
43466: GO 43524
43468: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
43469: LD_ADDR_VAR 0 9
43473: PUSH
43474: LD_VAR 0 11
43478: PUSH
43479: LD_VAR 0 12
43483: PUSH
43484: LD_VAR 0 13
43488: PUSH
43489: LD_VAR 0 14
43493: PUSH
43494: LD_VAR 0 15
43498: PUSH
43499: LD_VAR 0 16
43503: PUSH
43504: EMPTY
43505: LIST
43506: LIST
43507: LIST
43508: LIST
43509: LIST
43510: LIST
43511: PUSH
43512: LD_VAR 0 4
43516: PUSH
43517: LD_INT 1
43519: PLUS
43520: ARRAY
43521: ST_TO_ADDR
43522: GO 43653
43524: LD_INT 2
43526: DOUBLE
43527: EQUAL
43528: IFTRUE 43532
43530: GO 43588
43532: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
43533: LD_ADDR_VAR 0 9
43537: PUSH
43538: LD_VAR 0 17
43542: PUSH
43543: LD_VAR 0 18
43547: PUSH
43548: LD_VAR 0 19
43552: PUSH
43553: LD_VAR 0 20
43557: PUSH
43558: LD_VAR 0 21
43562: PUSH
43563: LD_VAR 0 22
43567: PUSH
43568: EMPTY
43569: LIST
43570: LIST
43571: LIST
43572: LIST
43573: LIST
43574: LIST
43575: PUSH
43576: LD_VAR 0 4
43580: PUSH
43581: LD_INT 1
43583: PLUS
43584: ARRAY
43585: ST_TO_ADDR
43586: GO 43653
43588: LD_INT 3
43590: DOUBLE
43591: EQUAL
43592: IFTRUE 43596
43594: GO 43652
43596: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
43597: LD_ADDR_VAR 0 9
43601: PUSH
43602: LD_VAR 0 23
43606: PUSH
43607: LD_VAR 0 24
43611: PUSH
43612: LD_VAR 0 25
43616: PUSH
43617: LD_VAR 0 26
43621: PUSH
43622: LD_VAR 0 27
43626: PUSH
43627: LD_VAR 0 28
43631: PUSH
43632: EMPTY
43633: LIST
43634: LIST
43635: LIST
43636: LIST
43637: LIST
43638: LIST
43639: PUSH
43640: LD_VAR 0 4
43644: PUSH
43645: LD_INT 1
43647: PLUS
43648: ARRAY
43649: ST_TO_ADDR
43650: GO 43653
43652: POP
43653: GO 44208
43655: LD_INT 2
43657: DOUBLE
43658: EQUAL
43659: IFTRUE 43669
43661: LD_INT 3
43663: DOUBLE
43664: EQUAL
43665: IFTRUE 43669
43667: GO 43725
43669: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
43670: LD_ADDR_VAR 0 9
43674: PUSH
43675: LD_VAR 0 29
43679: PUSH
43680: LD_VAR 0 30
43684: PUSH
43685: LD_VAR 0 31
43689: PUSH
43690: LD_VAR 0 32
43694: PUSH
43695: LD_VAR 0 33
43699: PUSH
43700: LD_VAR 0 34
43704: PUSH
43705: EMPTY
43706: LIST
43707: LIST
43708: LIST
43709: LIST
43710: LIST
43711: LIST
43712: PUSH
43713: LD_VAR 0 4
43717: PUSH
43718: LD_INT 1
43720: PLUS
43721: ARRAY
43722: ST_TO_ADDR
43723: GO 44208
43725: LD_INT 16
43727: DOUBLE
43728: EQUAL
43729: IFTRUE 43787
43731: LD_INT 17
43733: DOUBLE
43734: EQUAL
43735: IFTRUE 43787
43737: LD_INT 18
43739: DOUBLE
43740: EQUAL
43741: IFTRUE 43787
43743: LD_INT 19
43745: DOUBLE
43746: EQUAL
43747: IFTRUE 43787
43749: LD_INT 22
43751: DOUBLE
43752: EQUAL
43753: IFTRUE 43787
43755: LD_INT 20
43757: DOUBLE
43758: EQUAL
43759: IFTRUE 43787
43761: LD_INT 21
43763: DOUBLE
43764: EQUAL
43765: IFTRUE 43787
43767: LD_INT 23
43769: DOUBLE
43770: EQUAL
43771: IFTRUE 43787
43773: LD_INT 24
43775: DOUBLE
43776: EQUAL
43777: IFTRUE 43787
43779: LD_INT 25
43781: DOUBLE
43782: EQUAL
43783: IFTRUE 43787
43785: GO 43843
43787: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
43788: LD_ADDR_VAR 0 9
43792: PUSH
43793: LD_VAR 0 35
43797: PUSH
43798: LD_VAR 0 36
43802: PUSH
43803: LD_VAR 0 37
43807: PUSH
43808: LD_VAR 0 38
43812: PUSH
43813: LD_VAR 0 39
43817: PUSH
43818: LD_VAR 0 40
43822: PUSH
43823: EMPTY
43824: LIST
43825: LIST
43826: LIST
43827: LIST
43828: LIST
43829: LIST
43830: PUSH
43831: LD_VAR 0 4
43835: PUSH
43836: LD_INT 1
43838: PLUS
43839: ARRAY
43840: ST_TO_ADDR
43841: GO 44208
43843: LD_INT 6
43845: DOUBLE
43846: EQUAL
43847: IFTRUE 43899
43849: LD_INT 7
43851: DOUBLE
43852: EQUAL
43853: IFTRUE 43899
43855: LD_INT 8
43857: DOUBLE
43858: EQUAL
43859: IFTRUE 43899
43861: LD_INT 13
43863: DOUBLE
43864: EQUAL
43865: IFTRUE 43899
43867: LD_INT 12
43869: DOUBLE
43870: EQUAL
43871: IFTRUE 43899
43873: LD_INT 15
43875: DOUBLE
43876: EQUAL
43877: IFTRUE 43899
43879: LD_INT 11
43881: DOUBLE
43882: EQUAL
43883: IFTRUE 43899
43885: LD_INT 14
43887: DOUBLE
43888: EQUAL
43889: IFTRUE 43899
43891: LD_INT 10
43893: DOUBLE
43894: EQUAL
43895: IFTRUE 43899
43897: GO 43955
43899: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
43900: LD_ADDR_VAR 0 9
43904: PUSH
43905: LD_VAR 0 41
43909: PUSH
43910: LD_VAR 0 42
43914: PUSH
43915: LD_VAR 0 43
43919: PUSH
43920: LD_VAR 0 44
43924: PUSH
43925: LD_VAR 0 45
43929: PUSH
43930: LD_VAR 0 46
43934: PUSH
43935: EMPTY
43936: LIST
43937: LIST
43938: LIST
43939: LIST
43940: LIST
43941: LIST
43942: PUSH
43943: LD_VAR 0 4
43947: PUSH
43948: LD_INT 1
43950: PLUS
43951: ARRAY
43952: ST_TO_ADDR
43953: GO 44208
43955: LD_INT 36
43957: DOUBLE
43958: EQUAL
43959: IFTRUE 43963
43961: GO 44019
43963: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
43964: LD_ADDR_VAR 0 9
43968: PUSH
43969: LD_VAR 0 47
43973: PUSH
43974: LD_VAR 0 48
43978: PUSH
43979: LD_VAR 0 49
43983: PUSH
43984: LD_VAR 0 50
43988: PUSH
43989: LD_VAR 0 51
43993: PUSH
43994: LD_VAR 0 52
43998: PUSH
43999: EMPTY
44000: LIST
44001: LIST
44002: LIST
44003: LIST
44004: LIST
44005: LIST
44006: PUSH
44007: LD_VAR 0 4
44011: PUSH
44012: LD_INT 1
44014: PLUS
44015: ARRAY
44016: ST_TO_ADDR
44017: GO 44208
44019: LD_INT 4
44021: DOUBLE
44022: EQUAL
44023: IFTRUE 44045
44025: LD_INT 5
44027: DOUBLE
44028: EQUAL
44029: IFTRUE 44045
44031: LD_INT 34
44033: DOUBLE
44034: EQUAL
44035: IFTRUE 44045
44037: LD_INT 37
44039: DOUBLE
44040: EQUAL
44041: IFTRUE 44045
44043: GO 44101
44045: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
44046: LD_ADDR_VAR 0 9
44050: PUSH
44051: LD_VAR 0 53
44055: PUSH
44056: LD_VAR 0 54
44060: PUSH
44061: LD_VAR 0 55
44065: PUSH
44066: LD_VAR 0 56
44070: PUSH
44071: LD_VAR 0 57
44075: PUSH
44076: LD_VAR 0 58
44080: PUSH
44081: EMPTY
44082: LIST
44083: LIST
44084: LIST
44085: LIST
44086: LIST
44087: LIST
44088: PUSH
44089: LD_VAR 0 4
44093: PUSH
44094: LD_INT 1
44096: PLUS
44097: ARRAY
44098: ST_TO_ADDR
44099: GO 44208
44101: LD_INT 31
44103: DOUBLE
44104: EQUAL
44105: IFTRUE 44151
44107: LD_INT 32
44109: DOUBLE
44110: EQUAL
44111: IFTRUE 44151
44113: LD_INT 33
44115: DOUBLE
44116: EQUAL
44117: IFTRUE 44151
44119: LD_INT 27
44121: DOUBLE
44122: EQUAL
44123: IFTRUE 44151
44125: LD_INT 26
44127: DOUBLE
44128: EQUAL
44129: IFTRUE 44151
44131: LD_INT 28
44133: DOUBLE
44134: EQUAL
44135: IFTRUE 44151
44137: LD_INT 29
44139: DOUBLE
44140: EQUAL
44141: IFTRUE 44151
44143: LD_INT 30
44145: DOUBLE
44146: EQUAL
44147: IFTRUE 44151
44149: GO 44207
44151: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
44152: LD_ADDR_VAR 0 9
44156: PUSH
44157: LD_VAR 0 59
44161: PUSH
44162: LD_VAR 0 60
44166: PUSH
44167: LD_VAR 0 61
44171: PUSH
44172: LD_VAR 0 62
44176: PUSH
44177: LD_VAR 0 63
44181: PUSH
44182: LD_VAR 0 64
44186: PUSH
44187: EMPTY
44188: LIST
44189: LIST
44190: LIST
44191: LIST
44192: LIST
44193: LIST
44194: PUSH
44195: LD_VAR 0 4
44199: PUSH
44200: LD_INT 1
44202: PLUS
44203: ARRAY
44204: ST_TO_ADDR
44205: GO 44208
44207: POP
// temp_list2 = [ ] ;
44208: LD_ADDR_VAR 0 10
44212: PUSH
44213: EMPTY
44214: ST_TO_ADDR
// for i in temp_list do
44215: LD_ADDR_VAR 0 8
44219: PUSH
44220: LD_VAR 0 9
44224: PUSH
44225: FOR_IN
44226: IFFALSE 44278
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
44228: LD_ADDR_VAR 0 10
44232: PUSH
44233: LD_VAR 0 10
44237: PUSH
44238: LD_VAR 0 8
44242: PUSH
44243: LD_INT 1
44245: ARRAY
44246: PUSH
44247: LD_VAR 0 2
44251: PLUS
44252: PUSH
44253: LD_VAR 0 8
44257: PUSH
44258: LD_INT 2
44260: ARRAY
44261: PUSH
44262: LD_VAR 0 3
44266: PLUS
44267: PUSH
44268: EMPTY
44269: LIST
44270: LIST
44271: PUSH
44272: EMPTY
44273: LIST
44274: ADD
44275: ST_TO_ADDR
44276: GO 44225
44278: POP
44279: POP
// result = temp_list2 ;
44280: LD_ADDR_VAR 0 7
44284: PUSH
44285: LD_VAR 0 10
44289: ST_TO_ADDR
// end ;
44290: LD_VAR 0 7
44294: RET
// export function EnemyInRange ( unit , dist ) ; begin
44295: LD_INT 0
44297: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
44298: LD_ADDR_VAR 0 3
44302: PUSH
44303: LD_VAR 0 1
44307: PPUSH
44308: CALL_OW 255
44312: PPUSH
44313: LD_VAR 0 1
44317: PPUSH
44318: CALL_OW 250
44322: PPUSH
44323: LD_VAR 0 1
44327: PPUSH
44328: CALL_OW 251
44332: PPUSH
44333: LD_VAR 0 2
44337: PPUSH
44338: CALL 17552 0 4
44342: PUSH
44343: LD_INT 4
44345: ARRAY
44346: ST_TO_ADDR
// end ;
44347: LD_VAR 0 3
44351: RET
// export function PlayerSeeMe ( unit ) ; begin
44352: LD_INT 0
44354: PPUSH
// result := See ( your_side , unit ) ;
44355: LD_ADDR_VAR 0 2
44359: PUSH
44360: LD_OWVAR 2
44364: PPUSH
44365: LD_VAR 0 1
44369: PPUSH
44370: CALL_OW 292
44374: ST_TO_ADDR
// end ;
44375: LD_VAR 0 2
44379: RET
// export function ReverseDir ( unit ) ; begin
44380: LD_INT 0
44382: PPUSH
// if not unit then
44383: LD_VAR 0 1
44387: NOT
44388: IFFALSE 44392
// exit ;
44390: GO 44415
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
44392: LD_ADDR_VAR 0 2
44396: PUSH
44397: LD_VAR 0 1
44401: PPUSH
44402: CALL_OW 254
44406: PUSH
44407: LD_INT 3
44409: PLUS
44410: PUSH
44411: LD_INT 6
44413: MOD
44414: ST_TO_ADDR
// end ;
44415: LD_VAR 0 2
44419: RET
// export function ReverseArray ( array ) ; var i ; begin
44420: LD_INT 0
44422: PPUSH
44423: PPUSH
// if not array then
44424: LD_VAR 0 1
44428: NOT
44429: IFFALSE 44433
// exit ;
44431: GO 44488
// result := [ ] ;
44433: LD_ADDR_VAR 0 2
44437: PUSH
44438: EMPTY
44439: ST_TO_ADDR
// for i := array downto 1 do
44440: LD_ADDR_VAR 0 3
44444: PUSH
44445: DOUBLE
44446: LD_VAR 0 1
44450: INC
44451: ST_TO_ADDR
44452: LD_INT 1
44454: PUSH
44455: FOR_DOWNTO
44456: IFFALSE 44486
// result := Join ( result , array [ i ] ) ;
44458: LD_ADDR_VAR 0 2
44462: PUSH
44463: LD_VAR 0 2
44467: PPUSH
44468: LD_VAR 0 1
44472: PUSH
44473: LD_VAR 0 3
44477: ARRAY
44478: PPUSH
44479: CALL 49340 0 2
44483: ST_TO_ADDR
44484: GO 44455
44486: POP
44487: POP
// end ;
44488: LD_VAR 0 2
44492: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
44493: LD_INT 0
44495: PPUSH
44496: PPUSH
44497: PPUSH
44498: PPUSH
44499: PPUSH
44500: PPUSH
// if not unit or not hexes then
44501: LD_VAR 0 1
44505: NOT
44506: IFTRUE 44515
44508: PUSH
44509: LD_VAR 0 2
44513: NOT
44514: OR
44515: IFFALSE 44519
// exit ;
44517: GO 44642
// dist := 9999 ;
44519: LD_ADDR_VAR 0 5
44523: PUSH
44524: LD_INT 9999
44526: ST_TO_ADDR
// for i = 1 to hexes do
44527: LD_ADDR_VAR 0 4
44531: PUSH
44532: DOUBLE
44533: LD_INT 1
44535: DEC
44536: ST_TO_ADDR
44537: LD_VAR 0 2
44541: PUSH
44542: FOR_TO
44543: IFFALSE 44630
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44545: LD_ADDR_VAR 0 6
44549: PUSH
44550: LD_VAR 0 1
44554: PPUSH
44555: LD_VAR 0 2
44559: PUSH
44560: LD_VAR 0 4
44564: ARRAY
44565: PUSH
44566: LD_INT 1
44568: ARRAY
44569: PPUSH
44570: LD_VAR 0 2
44574: PUSH
44575: LD_VAR 0 4
44579: ARRAY
44580: PUSH
44581: LD_INT 2
44583: ARRAY
44584: PPUSH
44585: CALL_OW 297
44589: ST_TO_ADDR
// if tdist < dist then
44590: LD_VAR 0 6
44594: PUSH
44595: LD_VAR 0 5
44599: LESS
44600: IFFALSE 44628
// begin hex := hexes [ i ] ;
44602: LD_ADDR_VAR 0 8
44606: PUSH
44607: LD_VAR 0 2
44611: PUSH
44612: LD_VAR 0 4
44616: ARRAY
44617: ST_TO_ADDR
// dist := tdist ;
44618: LD_ADDR_VAR 0 5
44622: PUSH
44623: LD_VAR 0 6
44627: ST_TO_ADDR
// end ; end ;
44628: GO 44542
44630: POP
44631: POP
// result := hex ;
44632: LD_ADDR_VAR 0 3
44636: PUSH
44637: LD_VAR 0 8
44641: ST_TO_ADDR
// end ;
44642: LD_VAR 0 3
44646: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
44647: LD_INT 0
44649: PPUSH
44650: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
44651: LD_VAR 0 1
44655: NOT
44656: IFTRUE 44695
44658: PUSH
44659: LD_VAR 0 1
44663: PUSH
44664: LD_INT 21
44666: PUSH
44667: LD_INT 2
44669: PUSH
44670: EMPTY
44671: LIST
44672: LIST
44673: PUSH
44674: LD_INT 23
44676: PUSH
44677: LD_INT 2
44679: PUSH
44680: EMPTY
44681: LIST
44682: LIST
44683: PUSH
44684: EMPTY
44685: LIST
44686: LIST
44687: PPUSH
44688: CALL_OW 69
44692: IN
44693: NOT
44694: OR
44695: IFFALSE 44699
// exit ;
44697: GO 44746
// for i = 1 to 3 do
44699: LD_ADDR_VAR 0 3
44703: PUSH
44704: DOUBLE
44705: LD_INT 1
44707: DEC
44708: ST_TO_ADDR
44709: LD_INT 3
44711: PUSH
44712: FOR_TO
44713: IFFALSE 44744
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
44715: LD_VAR 0 1
44719: PPUSH
44720: CALL_OW 250
44724: PPUSH
44725: LD_VAR 0 1
44729: PPUSH
44730: CALL_OW 251
44734: PPUSH
44735: LD_INT 1
44737: PPUSH
44738: CALL_OW 453
44742: GO 44712
44744: POP
44745: POP
// end ;
44746: LD_VAR 0 2
44750: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
44751: LD_INT 0
44753: PPUSH
44754: PPUSH
44755: PPUSH
44756: PPUSH
44757: PPUSH
44758: PPUSH
// if not unit or not enemy_unit then
44759: LD_VAR 0 1
44763: NOT
44764: IFTRUE 44773
44766: PUSH
44767: LD_VAR 0 2
44771: NOT
44772: OR
44773: IFFALSE 44777
// exit ;
44775: GO 45258
// if GetLives ( i ) < 250 then
44777: LD_VAR 0 4
44781: PPUSH
44782: CALL_OW 256
44786: PUSH
44787: LD_INT 250
44789: LESS
44790: IFFALSE 44803
// begin ComAutodestruct ( i ) ;
44792: LD_VAR 0 4
44796: PPUSH
44797: CALL 44647 0 1
// exit ;
44801: GO 45258
// end ; x := GetX ( enemy_unit ) ;
44803: LD_ADDR_VAR 0 7
44807: PUSH
44808: LD_VAR 0 2
44812: PPUSH
44813: CALL_OW 250
44817: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
44818: LD_ADDR_VAR 0 8
44822: PUSH
44823: LD_VAR 0 2
44827: PPUSH
44828: CALL_OW 251
44832: ST_TO_ADDR
// if not x or not y then
44833: LD_VAR 0 7
44837: NOT
44838: IFTRUE 44847
44840: PUSH
44841: LD_VAR 0 8
44845: NOT
44846: OR
44847: IFFALSE 44851
// exit ;
44849: GO 45258
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
44851: LD_ADDR_VAR 0 6
44855: PUSH
44856: LD_VAR 0 7
44860: PPUSH
44861: LD_INT 0
44863: PPUSH
44864: LD_INT 4
44866: PPUSH
44867: CALL_OW 272
44871: PUSH
44872: LD_VAR 0 8
44876: PPUSH
44877: LD_INT 0
44879: PPUSH
44880: LD_INT 4
44882: PPUSH
44883: CALL_OW 273
44887: PUSH
44888: EMPTY
44889: LIST
44890: LIST
44891: PUSH
44892: LD_VAR 0 7
44896: PPUSH
44897: LD_INT 1
44899: PPUSH
44900: LD_INT 4
44902: PPUSH
44903: CALL_OW 272
44907: PUSH
44908: LD_VAR 0 8
44912: PPUSH
44913: LD_INT 1
44915: PPUSH
44916: LD_INT 4
44918: PPUSH
44919: CALL_OW 273
44923: PUSH
44924: EMPTY
44925: LIST
44926: LIST
44927: PUSH
44928: LD_VAR 0 7
44932: PPUSH
44933: LD_INT 2
44935: PPUSH
44936: LD_INT 4
44938: PPUSH
44939: CALL_OW 272
44943: PUSH
44944: LD_VAR 0 8
44948: PPUSH
44949: LD_INT 2
44951: PPUSH
44952: LD_INT 4
44954: PPUSH
44955: CALL_OW 273
44959: PUSH
44960: EMPTY
44961: LIST
44962: LIST
44963: PUSH
44964: LD_VAR 0 7
44968: PPUSH
44969: LD_INT 3
44971: PPUSH
44972: LD_INT 4
44974: PPUSH
44975: CALL_OW 272
44979: PUSH
44980: LD_VAR 0 8
44984: PPUSH
44985: LD_INT 3
44987: PPUSH
44988: LD_INT 4
44990: PPUSH
44991: CALL_OW 273
44995: PUSH
44996: EMPTY
44997: LIST
44998: LIST
44999: PUSH
45000: LD_VAR 0 7
45004: PPUSH
45005: LD_INT 4
45007: PPUSH
45008: LD_INT 4
45010: PPUSH
45011: CALL_OW 272
45015: PUSH
45016: LD_VAR 0 8
45020: PPUSH
45021: LD_INT 4
45023: PPUSH
45024: LD_INT 4
45026: PPUSH
45027: CALL_OW 273
45031: PUSH
45032: EMPTY
45033: LIST
45034: LIST
45035: PUSH
45036: LD_VAR 0 7
45040: PPUSH
45041: LD_INT 5
45043: PPUSH
45044: LD_INT 4
45046: PPUSH
45047: CALL_OW 272
45051: PUSH
45052: LD_VAR 0 8
45056: PPUSH
45057: LD_INT 5
45059: PPUSH
45060: LD_INT 4
45062: PPUSH
45063: CALL_OW 273
45067: PUSH
45068: EMPTY
45069: LIST
45070: LIST
45071: PUSH
45072: EMPTY
45073: LIST
45074: LIST
45075: LIST
45076: LIST
45077: LIST
45078: LIST
45079: ST_TO_ADDR
// for i = tmp downto 1 do
45080: LD_ADDR_VAR 0 4
45084: PUSH
45085: DOUBLE
45086: LD_VAR 0 6
45090: INC
45091: ST_TO_ADDR
45092: LD_INT 1
45094: PUSH
45095: FOR_DOWNTO
45096: IFFALSE 45199
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
45098: LD_VAR 0 6
45102: PUSH
45103: LD_VAR 0 4
45107: ARRAY
45108: PUSH
45109: LD_INT 1
45111: ARRAY
45112: PPUSH
45113: LD_VAR 0 6
45117: PUSH
45118: LD_VAR 0 4
45122: ARRAY
45123: PUSH
45124: LD_INT 2
45126: ARRAY
45127: PPUSH
45128: CALL_OW 488
45132: NOT
45133: IFTRUE 45175
45135: PUSH
45136: LD_VAR 0 6
45140: PUSH
45141: LD_VAR 0 4
45145: ARRAY
45146: PUSH
45147: LD_INT 1
45149: ARRAY
45150: PPUSH
45151: LD_VAR 0 6
45155: PUSH
45156: LD_VAR 0 4
45160: ARRAY
45161: PUSH
45162: LD_INT 2
45164: ARRAY
45165: PPUSH
45166: CALL_OW 428
45170: PUSH
45171: LD_INT 0
45173: NONEQUAL
45174: OR
45175: IFFALSE 45197
// tmp := Delete ( tmp , i ) ;
45177: LD_ADDR_VAR 0 6
45181: PUSH
45182: LD_VAR 0 6
45186: PPUSH
45187: LD_VAR 0 4
45191: PPUSH
45192: CALL_OW 3
45196: ST_TO_ADDR
45197: GO 45095
45199: POP
45200: POP
// j := GetClosestHex ( unit , tmp ) ;
45201: LD_ADDR_VAR 0 5
45205: PUSH
45206: LD_VAR 0 1
45210: PPUSH
45211: LD_VAR 0 6
45215: PPUSH
45216: CALL 44493 0 2
45220: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
45221: LD_VAR 0 1
45225: PPUSH
45226: LD_VAR 0 5
45230: PUSH
45231: LD_INT 1
45233: ARRAY
45234: PPUSH
45235: LD_VAR 0 5
45239: PUSH
45240: LD_INT 2
45242: ARRAY
45243: PPUSH
45244: CALL_OW 111
// result := j ;
45248: LD_ADDR_VAR 0 3
45252: PUSH
45253: LD_VAR 0 5
45257: ST_TO_ADDR
// end ;
45258: LD_VAR 0 3
45262: RET
// export function PrepareApemanSoldier ( ) ; begin
45263: LD_INT 0
45265: PPUSH
// uc_nation := 0 ;
45266: LD_ADDR_OWVAR 21
45270: PUSH
45271: LD_INT 0
45273: ST_TO_ADDR
// hc_sex := sex_male ;
45274: LD_ADDR_OWVAR 27
45278: PUSH
45279: LD_INT 1
45281: ST_TO_ADDR
// hc_name :=  ;
45282: LD_ADDR_OWVAR 26
45286: PUSH
45287: LD_STRING 
45289: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
45290: LD_ADDR_OWVAR 28
45294: PUSH
45295: LD_INT 15
45297: ST_TO_ADDR
// hc_gallery :=  ;
45298: LD_ADDR_OWVAR 33
45302: PUSH
45303: LD_STRING 
45305: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
45306: LD_ADDR_OWVAR 31
45310: PUSH
45311: LD_INT 0
45313: PPUSH
45314: LD_INT 3
45316: PPUSH
45317: CALL_OW 12
45321: PUSH
45322: LD_INT 0
45324: PPUSH
45325: LD_INT 3
45327: PPUSH
45328: CALL_OW 12
45332: PUSH
45333: LD_INT 0
45335: PUSH
45336: LD_INT 0
45338: PUSH
45339: EMPTY
45340: LIST
45341: LIST
45342: LIST
45343: LIST
45344: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
45345: LD_ADDR_OWVAR 29
45349: PUSH
45350: LD_INT 10
45352: PUSH
45353: LD_INT 12
45355: PUSH
45356: EMPTY
45357: LIST
45358: LIST
45359: ST_TO_ADDR
// end ;
45360: LD_VAR 0 1
45364: RET
// export function PrepareApemanEngineer ( ) ; begin
45365: LD_INT 0
45367: PPUSH
// uc_nation := 0 ;
45368: LD_ADDR_OWVAR 21
45372: PUSH
45373: LD_INT 0
45375: ST_TO_ADDR
// hc_sex := sex_male ;
45376: LD_ADDR_OWVAR 27
45380: PUSH
45381: LD_INT 1
45383: ST_TO_ADDR
// hc_name :=  ;
45384: LD_ADDR_OWVAR 26
45388: PUSH
45389: LD_STRING 
45391: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
45392: LD_ADDR_OWVAR 28
45396: PUSH
45397: LD_INT 16
45399: ST_TO_ADDR
// hc_gallery :=  ;
45400: LD_ADDR_OWVAR 33
45404: PUSH
45405: LD_STRING 
45407: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
45408: LD_ADDR_OWVAR 31
45412: PUSH
45413: LD_INT 0
45415: PPUSH
45416: LD_INT 3
45418: PPUSH
45419: CALL_OW 12
45423: PUSH
45424: LD_INT 0
45426: PPUSH
45427: LD_INT 3
45429: PPUSH
45430: CALL_OW 12
45434: PUSH
45435: LD_INT 0
45437: PUSH
45438: LD_INT 0
45440: PUSH
45441: EMPTY
45442: LIST
45443: LIST
45444: LIST
45445: LIST
45446: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
45447: LD_ADDR_OWVAR 29
45451: PUSH
45452: LD_INT 10
45454: PUSH
45455: LD_INT 12
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: ST_TO_ADDR
// end ;
45462: LD_VAR 0 1
45466: RET
// export function PrepareApeman ( agressivity ) ; begin
45467: LD_INT 0
45469: PPUSH
// uc_side := 0 ;
45470: LD_ADDR_OWVAR 20
45474: PUSH
45475: LD_INT 0
45477: ST_TO_ADDR
// uc_nation := 0 ;
45478: LD_ADDR_OWVAR 21
45482: PUSH
45483: LD_INT 0
45485: ST_TO_ADDR
// hc_sex := sex_male ;
45486: LD_ADDR_OWVAR 27
45490: PUSH
45491: LD_INT 1
45493: ST_TO_ADDR
// hc_class := class_apeman ;
45494: LD_ADDR_OWVAR 28
45498: PUSH
45499: LD_INT 12
45501: ST_TO_ADDR
// hc_gallery :=  ;
45502: LD_ADDR_OWVAR 33
45506: PUSH
45507: LD_STRING 
45509: ST_TO_ADDR
// hc_name :=  ;
45510: LD_ADDR_OWVAR 26
45514: PUSH
45515: LD_STRING 
45517: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
45518: LD_ADDR_OWVAR 29
45522: PUSH
45523: LD_INT 10
45525: PUSH
45526: LD_INT 12
45528: PUSH
45529: EMPTY
45530: LIST
45531: LIST
45532: ST_TO_ADDR
// if agressivity = 0 then
45533: LD_VAR 0 1
45537: PUSH
45538: LD_INT 0
45540: EQUAL
45541: IFFALSE 45553
// hc_agressivity := 0 else
45543: LD_ADDR_OWVAR 35
45547: PUSH
45548: LD_INT 0
45550: ST_TO_ADDR
45551: GO 45574
// hc_agressivity := rand ( - agressivity , agressivity ) ;
45553: LD_ADDR_OWVAR 35
45557: PUSH
45558: LD_VAR 0 1
45562: NEG
45563: PPUSH
45564: LD_VAR 0 1
45568: PPUSH
45569: CALL_OW 12
45573: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
45574: LD_ADDR_OWVAR 31
45578: PUSH
45579: LD_INT 0
45581: PPUSH
45582: LD_INT 3
45584: PPUSH
45585: CALL_OW 12
45589: PUSH
45590: LD_INT 0
45592: PPUSH
45593: LD_INT 3
45595: PPUSH
45596: CALL_OW 12
45600: PUSH
45601: LD_INT 0
45603: PUSH
45604: LD_INT 0
45606: PUSH
45607: EMPTY
45608: LIST
45609: LIST
45610: LIST
45611: LIST
45612: ST_TO_ADDR
// end ;
45613: LD_VAR 0 2
45617: RET
// export function PrepareTiger ( agressivity ) ; begin
45618: LD_INT 0
45620: PPUSH
// uc_side := 0 ;
45621: LD_ADDR_OWVAR 20
45625: PUSH
45626: LD_INT 0
45628: ST_TO_ADDR
// uc_nation := 0 ;
45629: LD_ADDR_OWVAR 21
45633: PUSH
45634: LD_INT 0
45636: ST_TO_ADDR
// InitHc ;
45637: CALL_OW 19
// hc_class := class_tiger ;
45641: LD_ADDR_OWVAR 28
45645: PUSH
45646: LD_INT 14
45648: ST_TO_ADDR
// hc_gallery :=  ;
45649: LD_ADDR_OWVAR 33
45653: PUSH
45654: LD_STRING 
45656: ST_TO_ADDR
// hc_name :=  ;
45657: LD_ADDR_OWVAR 26
45661: PUSH
45662: LD_STRING 
45664: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
45665: LD_ADDR_OWVAR 35
45669: PUSH
45670: LD_VAR 0 1
45674: NEG
45675: PPUSH
45676: LD_VAR 0 1
45680: PPUSH
45681: CALL_OW 12
45685: ST_TO_ADDR
// end ;
45686: LD_VAR 0 2
45690: RET
// export function PrepareEnchidna ( ) ; begin
45691: LD_INT 0
45693: PPUSH
// uc_side := 0 ;
45694: LD_ADDR_OWVAR 20
45698: PUSH
45699: LD_INT 0
45701: ST_TO_ADDR
// uc_nation := 0 ;
45702: LD_ADDR_OWVAR 21
45706: PUSH
45707: LD_INT 0
45709: ST_TO_ADDR
// InitHc ;
45710: CALL_OW 19
// hc_class := class_baggie ;
45714: LD_ADDR_OWVAR 28
45718: PUSH
45719: LD_INT 13
45721: ST_TO_ADDR
// hc_gallery :=  ;
45722: LD_ADDR_OWVAR 33
45726: PUSH
45727: LD_STRING 
45729: ST_TO_ADDR
// hc_name :=  ;
45730: LD_ADDR_OWVAR 26
45734: PUSH
45735: LD_STRING 
45737: ST_TO_ADDR
// end ;
45738: LD_VAR 0 1
45742: RET
// export function PrepareFrog ( ) ; begin
45743: LD_INT 0
45745: PPUSH
// uc_side := 0 ;
45746: LD_ADDR_OWVAR 20
45750: PUSH
45751: LD_INT 0
45753: ST_TO_ADDR
// uc_nation := 0 ;
45754: LD_ADDR_OWVAR 21
45758: PUSH
45759: LD_INT 0
45761: ST_TO_ADDR
// InitHc ;
45762: CALL_OW 19
// hc_class := class_frog ;
45766: LD_ADDR_OWVAR 28
45770: PUSH
45771: LD_INT 19
45773: ST_TO_ADDR
// hc_gallery :=  ;
45774: LD_ADDR_OWVAR 33
45778: PUSH
45779: LD_STRING 
45781: ST_TO_ADDR
// hc_name :=  ;
45782: LD_ADDR_OWVAR 26
45786: PUSH
45787: LD_STRING 
45789: ST_TO_ADDR
// end ;
45790: LD_VAR 0 1
45794: RET
// export function PrepareFish ( ) ; begin
45795: LD_INT 0
45797: PPUSH
// uc_side := 0 ;
45798: LD_ADDR_OWVAR 20
45802: PUSH
45803: LD_INT 0
45805: ST_TO_ADDR
// uc_nation := 0 ;
45806: LD_ADDR_OWVAR 21
45810: PUSH
45811: LD_INT 0
45813: ST_TO_ADDR
// InitHc ;
45814: CALL_OW 19
// hc_class := class_fish ;
45818: LD_ADDR_OWVAR 28
45822: PUSH
45823: LD_INT 20
45825: ST_TO_ADDR
// hc_gallery :=  ;
45826: LD_ADDR_OWVAR 33
45830: PUSH
45831: LD_STRING 
45833: ST_TO_ADDR
// hc_name :=  ;
45834: LD_ADDR_OWVAR 26
45838: PUSH
45839: LD_STRING 
45841: ST_TO_ADDR
// end ;
45842: LD_VAR 0 1
45846: RET
// export function PrepareBird ( ) ; begin
45847: LD_INT 0
45849: PPUSH
// uc_side := 0 ;
45850: LD_ADDR_OWVAR 20
45854: PUSH
45855: LD_INT 0
45857: ST_TO_ADDR
// uc_nation := 0 ;
45858: LD_ADDR_OWVAR 21
45862: PUSH
45863: LD_INT 0
45865: ST_TO_ADDR
// InitHc ;
45866: CALL_OW 19
// hc_class := class_phororhacos ;
45870: LD_ADDR_OWVAR 28
45874: PUSH
45875: LD_INT 18
45877: ST_TO_ADDR
// hc_gallery :=  ;
45878: LD_ADDR_OWVAR 33
45882: PUSH
45883: LD_STRING 
45885: ST_TO_ADDR
// hc_name :=  ;
45886: LD_ADDR_OWVAR 26
45890: PUSH
45891: LD_STRING 
45893: ST_TO_ADDR
// end ;
45894: LD_VAR 0 1
45898: RET
// export function PrepareHorse ( ) ; begin
45899: LD_INT 0
45901: PPUSH
// uc_side := 0 ;
45902: LD_ADDR_OWVAR 20
45906: PUSH
45907: LD_INT 0
45909: ST_TO_ADDR
// uc_nation := 0 ;
45910: LD_ADDR_OWVAR 21
45914: PUSH
45915: LD_INT 0
45917: ST_TO_ADDR
// InitHc ;
45918: CALL_OW 19
// hc_class := class_horse ;
45922: LD_ADDR_OWVAR 28
45926: PUSH
45927: LD_INT 21
45929: ST_TO_ADDR
// hc_gallery :=  ;
45930: LD_ADDR_OWVAR 33
45934: PUSH
45935: LD_STRING 
45937: ST_TO_ADDR
// hc_name :=  ;
45938: LD_ADDR_OWVAR 26
45942: PUSH
45943: LD_STRING 
45945: ST_TO_ADDR
// end ;
45946: LD_VAR 0 1
45950: RET
// export function PrepareMastodont ( ) ; begin
45951: LD_INT 0
45953: PPUSH
// uc_side := 0 ;
45954: LD_ADDR_OWVAR 20
45958: PUSH
45959: LD_INT 0
45961: ST_TO_ADDR
// uc_nation := 0 ;
45962: LD_ADDR_OWVAR 21
45966: PUSH
45967: LD_INT 0
45969: ST_TO_ADDR
// vc_chassis := class_mastodont ;
45970: LD_ADDR_OWVAR 37
45974: PUSH
45975: LD_INT 31
45977: ST_TO_ADDR
// vc_control := control_rider ;
45978: LD_ADDR_OWVAR 38
45982: PUSH
45983: LD_INT 4
45985: ST_TO_ADDR
// end ;
45986: LD_VAR 0 1
45990: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
45991: LD_INT 0
45993: PPUSH
45994: PPUSH
45995: PPUSH
// uc_side = 0 ;
45996: LD_ADDR_OWVAR 20
46000: PUSH
46001: LD_INT 0
46003: ST_TO_ADDR
// uc_nation = 0 ;
46004: LD_ADDR_OWVAR 21
46008: PUSH
46009: LD_INT 0
46011: ST_TO_ADDR
// InitHc_All ( ) ;
46012: CALL_OW 584
// InitVc ;
46016: CALL_OW 20
// if mastodonts then
46020: LD_VAR 0 6
46024: IFFALSE 46091
// for i = 1 to mastodonts do
46026: LD_ADDR_VAR 0 11
46030: PUSH
46031: DOUBLE
46032: LD_INT 1
46034: DEC
46035: ST_TO_ADDR
46036: LD_VAR 0 6
46040: PUSH
46041: FOR_TO
46042: IFFALSE 46089
// begin vc_chassis := 31 ;
46044: LD_ADDR_OWVAR 37
46048: PUSH
46049: LD_INT 31
46051: ST_TO_ADDR
// vc_control := control_rider ;
46052: LD_ADDR_OWVAR 38
46056: PUSH
46057: LD_INT 4
46059: ST_TO_ADDR
// animal := CreateVehicle ;
46060: LD_ADDR_VAR 0 12
46064: PUSH
46065: CALL_OW 45
46069: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46070: LD_VAR 0 12
46074: PPUSH
46075: LD_VAR 0 8
46079: PPUSH
46080: LD_INT 0
46082: PPUSH
46083: CALL 48233 0 3
// end ;
46087: GO 46041
46089: POP
46090: POP
// if horses then
46091: LD_VAR 0 5
46095: IFFALSE 46162
// for i = 1 to horses do
46097: LD_ADDR_VAR 0 11
46101: PUSH
46102: DOUBLE
46103: LD_INT 1
46105: DEC
46106: ST_TO_ADDR
46107: LD_VAR 0 5
46111: PUSH
46112: FOR_TO
46113: IFFALSE 46160
// begin hc_class := 21 ;
46115: LD_ADDR_OWVAR 28
46119: PUSH
46120: LD_INT 21
46122: ST_TO_ADDR
// hc_gallery :=  ;
46123: LD_ADDR_OWVAR 33
46127: PUSH
46128: LD_STRING 
46130: ST_TO_ADDR
// animal := CreateHuman ;
46131: LD_ADDR_VAR 0 12
46135: PUSH
46136: CALL_OW 44
46140: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46141: LD_VAR 0 12
46145: PPUSH
46146: LD_VAR 0 8
46150: PPUSH
46151: LD_INT 0
46153: PPUSH
46154: CALL 48233 0 3
// end ;
46158: GO 46112
46160: POP
46161: POP
// if birds then
46162: LD_VAR 0 1
46166: IFFALSE 46233
// for i = 1 to birds do
46168: LD_ADDR_VAR 0 11
46172: PUSH
46173: DOUBLE
46174: LD_INT 1
46176: DEC
46177: ST_TO_ADDR
46178: LD_VAR 0 1
46182: PUSH
46183: FOR_TO
46184: IFFALSE 46231
// begin hc_class := 18 ;
46186: LD_ADDR_OWVAR 28
46190: PUSH
46191: LD_INT 18
46193: ST_TO_ADDR
// hc_gallery =  ;
46194: LD_ADDR_OWVAR 33
46198: PUSH
46199: LD_STRING 
46201: ST_TO_ADDR
// animal := CreateHuman ;
46202: LD_ADDR_VAR 0 12
46206: PUSH
46207: CALL_OW 44
46211: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46212: LD_VAR 0 12
46216: PPUSH
46217: LD_VAR 0 8
46221: PPUSH
46222: LD_INT 0
46224: PPUSH
46225: CALL 48233 0 3
// end ;
46229: GO 46183
46231: POP
46232: POP
// if tigers then
46233: LD_VAR 0 2
46237: IFFALSE 46321
// for i = 1 to tigers do
46239: LD_ADDR_VAR 0 11
46243: PUSH
46244: DOUBLE
46245: LD_INT 1
46247: DEC
46248: ST_TO_ADDR
46249: LD_VAR 0 2
46253: PUSH
46254: FOR_TO
46255: IFFALSE 46319
// begin hc_class = class_tiger ;
46257: LD_ADDR_OWVAR 28
46261: PUSH
46262: LD_INT 14
46264: ST_TO_ADDR
// hc_gallery =  ;
46265: LD_ADDR_OWVAR 33
46269: PUSH
46270: LD_STRING 
46272: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
46273: LD_ADDR_OWVAR 35
46277: PUSH
46278: LD_INT 7
46280: NEG
46281: PPUSH
46282: LD_INT 7
46284: PPUSH
46285: CALL_OW 12
46289: ST_TO_ADDR
// animal := CreateHuman ;
46290: LD_ADDR_VAR 0 12
46294: PUSH
46295: CALL_OW 44
46299: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46300: LD_VAR 0 12
46304: PPUSH
46305: LD_VAR 0 8
46309: PPUSH
46310: LD_INT 0
46312: PPUSH
46313: CALL 48233 0 3
// end ;
46317: GO 46254
46319: POP
46320: POP
// if apemans then
46321: LD_VAR 0 3
46325: IFFALSE 46448
// for i = 1 to apemans do
46327: LD_ADDR_VAR 0 11
46331: PUSH
46332: DOUBLE
46333: LD_INT 1
46335: DEC
46336: ST_TO_ADDR
46337: LD_VAR 0 3
46341: PUSH
46342: FOR_TO
46343: IFFALSE 46446
// begin hc_class = class_apeman ;
46345: LD_ADDR_OWVAR 28
46349: PUSH
46350: LD_INT 12
46352: ST_TO_ADDR
// hc_gallery =  ;
46353: LD_ADDR_OWVAR 33
46357: PUSH
46358: LD_STRING 
46360: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
46361: LD_ADDR_OWVAR 35
46365: PUSH
46366: LD_INT 2
46368: NEG
46369: PPUSH
46370: LD_INT 2
46372: PPUSH
46373: CALL_OW 12
46377: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
46378: LD_ADDR_OWVAR 31
46382: PUSH
46383: LD_INT 1
46385: PPUSH
46386: LD_INT 3
46388: PPUSH
46389: CALL_OW 12
46393: PUSH
46394: LD_INT 1
46396: PPUSH
46397: LD_INT 3
46399: PPUSH
46400: CALL_OW 12
46404: PUSH
46405: LD_INT 0
46407: PUSH
46408: LD_INT 0
46410: PUSH
46411: EMPTY
46412: LIST
46413: LIST
46414: LIST
46415: LIST
46416: ST_TO_ADDR
// animal := CreateHuman ;
46417: LD_ADDR_VAR 0 12
46421: PUSH
46422: CALL_OW 44
46426: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46427: LD_VAR 0 12
46431: PPUSH
46432: LD_VAR 0 8
46436: PPUSH
46437: LD_INT 0
46439: PPUSH
46440: CALL 48233 0 3
// end ;
46444: GO 46342
46446: POP
46447: POP
// if enchidnas then
46448: LD_VAR 0 4
46452: IFFALSE 46519
// for i = 1 to enchidnas do
46454: LD_ADDR_VAR 0 11
46458: PUSH
46459: DOUBLE
46460: LD_INT 1
46462: DEC
46463: ST_TO_ADDR
46464: LD_VAR 0 4
46468: PUSH
46469: FOR_TO
46470: IFFALSE 46517
// begin hc_class = 13 ;
46472: LD_ADDR_OWVAR 28
46476: PUSH
46477: LD_INT 13
46479: ST_TO_ADDR
// hc_gallery =  ;
46480: LD_ADDR_OWVAR 33
46484: PUSH
46485: LD_STRING 
46487: ST_TO_ADDR
// animal := CreateHuman ;
46488: LD_ADDR_VAR 0 12
46492: PUSH
46493: CALL_OW 44
46497: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46498: LD_VAR 0 12
46502: PPUSH
46503: LD_VAR 0 8
46507: PPUSH
46508: LD_INT 0
46510: PPUSH
46511: CALL 48233 0 3
// end ;
46515: GO 46469
46517: POP
46518: POP
// if fishes then
46519: LD_VAR 0 7
46523: IFFALSE 46590
// for i = 1 to fishes do
46525: LD_ADDR_VAR 0 11
46529: PUSH
46530: DOUBLE
46531: LD_INT 1
46533: DEC
46534: ST_TO_ADDR
46535: LD_VAR 0 7
46539: PUSH
46540: FOR_TO
46541: IFFALSE 46588
// begin hc_class = 20 ;
46543: LD_ADDR_OWVAR 28
46547: PUSH
46548: LD_INT 20
46550: ST_TO_ADDR
// hc_gallery =  ;
46551: LD_ADDR_OWVAR 33
46555: PUSH
46556: LD_STRING 
46558: ST_TO_ADDR
// animal := CreateHuman ;
46559: LD_ADDR_VAR 0 12
46563: PUSH
46564: CALL_OW 44
46568: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
46569: LD_VAR 0 12
46573: PPUSH
46574: LD_VAR 0 9
46578: PPUSH
46579: LD_INT 0
46581: PPUSH
46582: CALL 48233 0 3
// end ;
46586: GO 46540
46588: POP
46589: POP
// end ;
46590: LD_VAR 0 10
46594: RET
// export function WantHeal ( sci , unit ) ; begin
46595: LD_INT 0
46597: PPUSH
// if GetTaskList ( sci ) > 0 then
46598: LD_VAR 0 1
46602: PPUSH
46603: CALL_OW 437
46607: PUSH
46608: LD_INT 0
46610: GREATER
46611: IFFALSE 46683
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
46613: LD_VAR 0 1
46617: PPUSH
46618: CALL_OW 437
46622: PUSH
46623: LD_INT 1
46625: ARRAY
46626: PUSH
46627: LD_INT 1
46629: ARRAY
46630: PUSH
46631: LD_STRING l
46633: EQUAL
46634: IFFALSE 46661
46636: PUSH
46637: LD_VAR 0 1
46641: PPUSH
46642: CALL_OW 437
46646: PUSH
46647: LD_INT 1
46649: ARRAY
46650: PUSH
46651: LD_INT 4
46653: ARRAY
46654: PUSH
46655: LD_VAR 0 2
46659: EQUAL
46660: AND
46661: IFFALSE 46673
// result := true else
46663: LD_ADDR_VAR 0 3
46667: PUSH
46668: LD_INT 1
46670: ST_TO_ADDR
46671: GO 46681
// result := false ;
46673: LD_ADDR_VAR 0 3
46677: PUSH
46678: LD_INT 0
46680: ST_TO_ADDR
// end else
46681: GO 46691
// result := false ;
46683: LD_ADDR_VAR 0 3
46687: PUSH
46688: LD_INT 0
46690: ST_TO_ADDR
// end ;
46691: LD_VAR 0 3
46695: RET
// export function HealTarget ( sci ) ; begin
46696: LD_INT 0
46698: PPUSH
// if not sci then
46699: LD_VAR 0 1
46703: NOT
46704: IFFALSE 46708
// exit ;
46706: GO 46773
// result := 0 ;
46708: LD_ADDR_VAR 0 2
46712: PUSH
46713: LD_INT 0
46715: ST_TO_ADDR
// if GetTaskList ( sci ) then
46716: LD_VAR 0 1
46720: PPUSH
46721: CALL_OW 437
46725: IFFALSE 46773
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
46727: LD_VAR 0 1
46731: PPUSH
46732: CALL_OW 437
46736: PUSH
46737: LD_INT 1
46739: ARRAY
46740: PUSH
46741: LD_INT 1
46743: ARRAY
46744: PUSH
46745: LD_STRING l
46747: EQUAL
46748: IFFALSE 46773
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
46750: LD_ADDR_VAR 0 2
46754: PUSH
46755: LD_VAR 0 1
46759: PPUSH
46760: CALL_OW 437
46764: PUSH
46765: LD_INT 1
46767: ARRAY
46768: PUSH
46769: LD_INT 4
46771: ARRAY
46772: ST_TO_ADDR
// end ;
46773: LD_VAR 0 2
46777: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
46778: LD_INT 0
46780: PPUSH
46781: PPUSH
46782: PPUSH
46783: PPUSH
// if not base_units then
46784: LD_VAR 0 1
46788: NOT
46789: IFFALSE 46793
// exit ;
46791: GO 46880
// result := false ;
46793: LD_ADDR_VAR 0 2
46797: PUSH
46798: LD_INT 0
46800: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
46801: LD_ADDR_VAR 0 5
46805: PUSH
46806: LD_VAR 0 1
46810: PPUSH
46811: LD_INT 21
46813: PUSH
46814: LD_INT 3
46816: PUSH
46817: EMPTY
46818: LIST
46819: LIST
46820: PPUSH
46821: CALL_OW 72
46825: ST_TO_ADDR
// if not tmp then
46826: LD_VAR 0 5
46830: NOT
46831: IFFALSE 46835
// exit ;
46833: GO 46880
// for i in tmp do
46835: LD_ADDR_VAR 0 3
46839: PUSH
46840: LD_VAR 0 5
46844: PUSH
46845: FOR_IN
46846: IFFALSE 46878
// begin result := EnemyInRange ( i , 22 ) ;
46848: LD_ADDR_VAR 0 2
46852: PUSH
46853: LD_VAR 0 3
46857: PPUSH
46858: LD_INT 22
46860: PPUSH
46861: CALL 44295 0 2
46865: ST_TO_ADDR
// if result then
46866: LD_VAR 0 2
46870: IFFALSE 46876
// exit ;
46872: POP
46873: POP
46874: GO 46880
// end ;
46876: GO 46845
46878: POP
46879: POP
// end ;
46880: LD_VAR 0 2
46884: RET
// export function FilterByTag ( units , tag ) ; begin
46885: LD_INT 0
46887: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
46888: LD_ADDR_VAR 0 3
46892: PUSH
46893: LD_VAR 0 1
46897: PPUSH
46898: LD_INT 120
46900: PUSH
46901: LD_VAR 0 2
46905: PUSH
46906: EMPTY
46907: LIST
46908: LIST
46909: PPUSH
46910: CALL_OW 72
46914: ST_TO_ADDR
// end ;
46915: LD_VAR 0 3
46919: RET
// export function IsDriver ( un ) ; begin
46920: LD_INT 0
46922: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
46923: LD_ADDR_VAR 0 2
46927: PUSH
46928: LD_VAR 0 1
46932: PUSH
46933: LD_INT 55
46935: PUSH
46936: EMPTY
46937: LIST
46938: PPUSH
46939: CALL_OW 69
46943: IN
46944: ST_TO_ADDR
// end ;
46945: LD_VAR 0 2
46949: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
46950: LD_INT 0
46952: PPUSH
46953: PPUSH
// list := [ ] ;
46954: LD_ADDR_VAR 0 5
46958: PUSH
46959: EMPTY
46960: ST_TO_ADDR
// case d of 0 :
46961: LD_VAR 0 3
46965: PUSH
46966: LD_INT 0
46968: DOUBLE
46969: EQUAL
46970: IFTRUE 46974
46972: GO 47107
46974: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
46975: LD_ADDR_VAR 0 5
46979: PUSH
46980: LD_VAR 0 1
46984: PUSH
46985: LD_INT 4
46987: MINUS
46988: PUSH
46989: LD_VAR 0 2
46993: PUSH
46994: LD_INT 4
46996: MINUS
46997: PUSH
46998: LD_INT 2
47000: PUSH
47001: EMPTY
47002: LIST
47003: LIST
47004: LIST
47005: PUSH
47006: LD_VAR 0 1
47010: PUSH
47011: LD_INT 3
47013: MINUS
47014: PUSH
47015: LD_VAR 0 2
47019: PUSH
47020: LD_INT 1
47022: PUSH
47023: EMPTY
47024: LIST
47025: LIST
47026: LIST
47027: PUSH
47028: LD_VAR 0 1
47032: PUSH
47033: LD_INT 4
47035: PLUS
47036: PUSH
47037: LD_VAR 0 2
47041: PUSH
47042: LD_INT 4
47044: PUSH
47045: EMPTY
47046: LIST
47047: LIST
47048: LIST
47049: PUSH
47050: LD_VAR 0 1
47054: PUSH
47055: LD_INT 3
47057: PLUS
47058: PUSH
47059: LD_VAR 0 2
47063: PUSH
47064: LD_INT 3
47066: PLUS
47067: PUSH
47068: LD_INT 5
47070: PUSH
47071: EMPTY
47072: LIST
47073: LIST
47074: LIST
47075: PUSH
47076: LD_VAR 0 1
47080: PUSH
47081: LD_VAR 0 2
47085: PUSH
47086: LD_INT 4
47088: PLUS
47089: PUSH
47090: LD_INT 0
47092: PUSH
47093: EMPTY
47094: LIST
47095: LIST
47096: LIST
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: LIST
47102: LIST
47103: LIST
47104: ST_TO_ADDR
// end ; 1 :
47105: GO 47805
47107: LD_INT 1
47109: DOUBLE
47110: EQUAL
47111: IFTRUE 47115
47113: GO 47248
47115: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
47116: LD_ADDR_VAR 0 5
47120: PUSH
47121: LD_VAR 0 1
47125: PUSH
47126: LD_VAR 0 2
47130: PUSH
47131: LD_INT 4
47133: MINUS
47134: PUSH
47135: LD_INT 3
47137: PUSH
47138: EMPTY
47139: LIST
47140: LIST
47141: LIST
47142: PUSH
47143: LD_VAR 0 1
47147: PUSH
47148: LD_INT 3
47150: MINUS
47151: PUSH
47152: LD_VAR 0 2
47156: PUSH
47157: LD_INT 3
47159: MINUS
47160: PUSH
47161: LD_INT 2
47163: PUSH
47164: EMPTY
47165: LIST
47166: LIST
47167: LIST
47168: PUSH
47169: LD_VAR 0 1
47173: PUSH
47174: LD_INT 4
47176: MINUS
47177: PUSH
47178: LD_VAR 0 2
47182: PUSH
47183: LD_INT 1
47185: PUSH
47186: EMPTY
47187: LIST
47188: LIST
47189: LIST
47190: PUSH
47191: LD_VAR 0 1
47195: PUSH
47196: LD_VAR 0 2
47200: PUSH
47201: LD_INT 3
47203: PLUS
47204: PUSH
47205: LD_INT 0
47207: PUSH
47208: EMPTY
47209: LIST
47210: LIST
47211: LIST
47212: PUSH
47213: LD_VAR 0 1
47217: PUSH
47218: LD_INT 4
47220: PLUS
47221: PUSH
47222: LD_VAR 0 2
47226: PUSH
47227: LD_INT 4
47229: PLUS
47230: PUSH
47231: LD_INT 5
47233: PUSH
47234: EMPTY
47235: LIST
47236: LIST
47237: LIST
47238: PUSH
47239: EMPTY
47240: LIST
47241: LIST
47242: LIST
47243: LIST
47244: LIST
47245: ST_TO_ADDR
// end ; 2 :
47246: GO 47805
47248: LD_INT 2
47250: DOUBLE
47251: EQUAL
47252: IFTRUE 47256
47254: GO 47385
47256: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
47257: LD_ADDR_VAR 0 5
47261: PUSH
47262: LD_VAR 0 1
47266: PUSH
47267: LD_VAR 0 2
47271: PUSH
47272: LD_INT 3
47274: MINUS
47275: PUSH
47276: LD_INT 3
47278: PUSH
47279: EMPTY
47280: LIST
47281: LIST
47282: LIST
47283: PUSH
47284: LD_VAR 0 1
47288: PUSH
47289: LD_INT 4
47291: PLUS
47292: PUSH
47293: LD_VAR 0 2
47297: PUSH
47298: LD_INT 4
47300: PUSH
47301: EMPTY
47302: LIST
47303: LIST
47304: LIST
47305: PUSH
47306: LD_VAR 0 1
47310: PUSH
47311: LD_VAR 0 2
47315: PUSH
47316: LD_INT 4
47318: PLUS
47319: PUSH
47320: LD_INT 0
47322: PUSH
47323: EMPTY
47324: LIST
47325: LIST
47326: LIST
47327: PUSH
47328: LD_VAR 0 1
47332: PUSH
47333: LD_INT 3
47335: MINUS
47336: PUSH
47337: LD_VAR 0 2
47341: PUSH
47342: LD_INT 1
47344: PUSH
47345: EMPTY
47346: LIST
47347: LIST
47348: LIST
47349: PUSH
47350: LD_VAR 0 1
47354: PUSH
47355: LD_INT 4
47357: MINUS
47358: PUSH
47359: LD_VAR 0 2
47363: PUSH
47364: LD_INT 4
47366: MINUS
47367: PUSH
47368: LD_INT 2
47370: PUSH
47371: EMPTY
47372: LIST
47373: LIST
47374: LIST
47375: PUSH
47376: EMPTY
47377: LIST
47378: LIST
47379: LIST
47380: LIST
47381: LIST
47382: ST_TO_ADDR
// end ; 3 :
47383: GO 47805
47385: LD_INT 3
47387: DOUBLE
47388: EQUAL
47389: IFTRUE 47393
47391: GO 47526
47393: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
47394: LD_ADDR_VAR 0 5
47398: PUSH
47399: LD_VAR 0 1
47403: PUSH
47404: LD_INT 3
47406: PLUS
47407: PUSH
47408: LD_VAR 0 2
47412: PUSH
47413: LD_INT 4
47415: PUSH
47416: EMPTY
47417: LIST
47418: LIST
47419: LIST
47420: PUSH
47421: LD_VAR 0 1
47425: PUSH
47426: LD_INT 4
47428: PLUS
47429: PUSH
47430: LD_VAR 0 2
47434: PUSH
47435: LD_INT 4
47437: PLUS
47438: PUSH
47439: LD_INT 5
47441: PUSH
47442: EMPTY
47443: LIST
47444: LIST
47445: LIST
47446: PUSH
47447: LD_VAR 0 1
47451: PUSH
47452: LD_INT 4
47454: MINUS
47455: PUSH
47456: LD_VAR 0 2
47460: PUSH
47461: LD_INT 1
47463: PUSH
47464: EMPTY
47465: LIST
47466: LIST
47467: LIST
47468: PUSH
47469: LD_VAR 0 1
47473: PUSH
47474: LD_VAR 0 2
47478: PUSH
47479: LD_INT 4
47481: MINUS
47482: PUSH
47483: LD_INT 3
47485: PUSH
47486: EMPTY
47487: LIST
47488: LIST
47489: LIST
47490: PUSH
47491: LD_VAR 0 1
47495: PUSH
47496: LD_INT 3
47498: MINUS
47499: PUSH
47500: LD_VAR 0 2
47504: PUSH
47505: LD_INT 3
47507: MINUS
47508: PUSH
47509: LD_INT 2
47511: PUSH
47512: EMPTY
47513: LIST
47514: LIST
47515: LIST
47516: PUSH
47517: EMPTY
47518: LIST
47519: LIST
47520: LIST
47521: LIST
47522: LIST
47523: ST_TO_ADDR
// end ; 4 :
47524: GO 47805
47526: LD_INT 4
47528: DOUBLE
47529: EQUAL
47530: IFTRUE 47534
47532: GO 47667
47534: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
47535: LD_ADDR_VAR 0 5
47539: PUSH
47540: LD_VAR 0 1
47544: PUSH
47545: LD_VAR 0 2
47549: PUSH
47550: LD_INT 4
47552: PLUS
47553: PUSH
47554: LD_INT 0
47556: PUSH
47557: EMPTY
47558: LIST
47559: LIST
47560: LIST
47561: PUSH
47562: LD_VAR 0 1
47566: PUSH
47567: LD_INT 3
47569: PLUS
47570: PUSH
47571: LD_VAR 0 2
47575: PUSH
47576: LD_INT 3
47578: PLUS
47579: PUSH
47580: LD_INT 5
47582: PUSH
47583: EMPTY
47584: LIST
47585: LIST
47586: LIST
47587: PUSH
47588: LD_VAR 0 1
47592: PUSH
47593: LD_INT 4
47595: PLUS
47596: PUSH
47597: LD_VAR 0 2
47601: PUSH
47602: LD_INT 4
47604: PUSH
47605: EMPTY
47606: LIST
47607: LIST
47608: LIST
47609: PUSH
47610: LD_VAR 0 1
47614: PUSH
47615: LD_VAR 0 2
47619: PUSH
47620: LD_INT 3
47622: MINUS
47623: PUSH
47624: LD_INT 3
47626: PUSH
47627: EMPTY
47628: LIST
47629: LIST
47630: LIST
47631: PUSH
47632: LD_VAR 0 1
47636: PUSH
47637: LD_INT 4
47639: MINUS
47640: PUSH
47641: LD_VAR 0 2
47645: PUSH
47646: LD_INT 4
47648: MINUS
47649: PUSH
47650: LD_INT 2
47652: PUSH
47653: EMPTY
47654: LIST
47655: LIST
47656: LIST
47657: PUSH
47658: EMPTY
47659: LIST
47660: LIST
47661: LIST
47662: LIST
47663: LIST
47664: ST_TO_ADDR
// end ; 5 :
47665: GO 47805
47667: LD_INT 5
47669: DOUBLE
47670: EQUAL
47671: IFTRUE 47675
47673: GO 47804
47675: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
47676: LD_ADDR_VAR 0 5
47680: PUSH
47681: LD_VAR 0 1
47685: PUSH
47686: LD_INT 4
47688: MINUS
47689: PUSH
47690: LD_VAR 0 2
47694: PUSH
47695: LD_INT 1
47697: PUSH
47698: EMPTY
47699: LIST
47700: LIST
47701: LIST
47702: PUSH
47703: LD_VAR 0 1
47707: PUSH
47708: LD_VAR 0 2
47712: PUSH
47713: LD_INT 4
47715: MINUS
47716: PUSH
47717: LD_INT 3
47719: PUSH
47720: EMPTY
47721: LIST
47722: LIST
47723: LIST
47724: PUSH
47725: LD_VAR 0 1
47729: PUSH
47730: LD_INT 4
47732: PLUS
47733: PUSH
47734: LD_VAR 0 2
47738: PUSH
47739: LD_INT 4
47741: PLUS
47742: PUSH
47743: LD_INT 5
47745: PUSH
47746: EMPTY
47747: LIST
47748: LIST
47749: LIST
47750: PUSH
47751: LD_VAR 0 1
47755: PUSH
47756: LD_INT 3
47758: PLUS
47759: PUSH
47760: LD_VAR 0 2
47764: PUSH
47765: LD_INT 4
47767: PUSH
47768: EMPTY
47769: LIST
47770: LIST
47771: LIST
47772: PUSH
47773: LD_VAR 0 1
47777: PUSH
47778: LD_VAR 0 2
47782: PUSH
47783: LD_INT 3
47785: PLUS
47786: PUSH
47787: LD_INT 0
47789: PUSH
47790: EMPTY
47791: LIST
47792: LIST
47793: LIST
47794: PUSH
47795: EMPTY
47796: LIST
47797: LIST
47798: LIST
47799: LIST
47800: LIST
47801: ST_TO_ADDR
// end ; end ;
47802: GO 47805
47804: POP
// result := list ;
47805: LD_ADDR_VAR 0 4
47809: PUSH
47810: LD_VAR 0 5
47814: ST_TO_ADDR
// end ;
47815: LD_VAR 0 4
47819: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
47820: LD_INT 0
47822: PPUSH
47823: PPUSH
47824: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
47825: LD_VAR 0 1
47829: NOT
47830: IFTRUE 47858
47832: PUSH
47833: LD_VAR 0 2
47837: PUSH
47838: LD_INT 1
47840: PUSH
47841: LD_INT 2
47843: PUSH
47844: LD_INT 3
47846: PUSH
47847: LD_INT 4
47849: PUSH
47850: EMPTY
47851: LIST
47852: LIST
47853: LIST
47854: LIST
47855: IN
47856: NOT
47857: OR
47858: IFFALSE 47862
// exit ;
47860: GO 47945
// tmp := [ ] ;
47862: LD_ADDR_VAR 0 5
47866: PUSH
47867: EMPTY
47868: ST_TO_ADDR
// for i in units do
47869: LD_ADDR_VAR 0 4
47873: PUSH
47874: LD_VAR 0 1
47878: PUSH
47879: FOR_IN
47880: IFFALSE 47914
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
47882: LD_ADDR_VAR 0 5
47886: PUSH
47887: LD_VAR 0 5
47891: PPUSH
47892: LD_VAR 0 4
47896: PPUSH
47897: LD_VAR 0 2
47901: PPUSH
47902: CALL_OW 259
47906: PPUSH
47907: CALL 49340 0 2
47911: ST_TO_ADDR
47912: GO 47879
47914: POP
47915: POP
// if not tmp then
47916: LD_VAR 0 5
47920: NOT
47921: IFFALSE 47925
// exit ;
47923: GO 47945
// result := SortListByListDesc ( units , tmp ) ;
47925: LD_ADDR_VAR 0 3
47929: PUSH
47930: LD_VAR 0 1
47934: PPUSH
47935: LD_VAR 0 5
47939: PPUSH
47940: CALL_OW 77
47944: ST_TO_ADDR
// end ;
47945: LD_VAR 0 3
47949: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
47950: LD_INT 0
47952: PPUSH
47953: PPUSH
47954: PPUSH
// result := false ;
47955: LD_ADDR_VAR 0 3
47959: PUSH
47960: LD_INT 0
47962: ST_TO_ADDR
// if not building then
47963: LD_VAR 0 2
47967: NOT
47968: IFFALSE 47972
// exit ;
47970: GO 48116
// x := GetX ( building ) ;
47972: LD_ADDR_VAR 0 4
47976: PUSH
47977: LD_VAR 0 2
47981: PPUSH
47982: CALL_OW 250
47986: ST_TO_ADDR
// y := GetY ( building ) ;
47987: LD_ADDR_VAR 0 5
47991: PUSH
47992: LD_VAR 0 2
47996: PPUSH
47997: CALL_OW 251
48001: ST_TO_ADDR
// if not x or not y then
48002: LD_VAR 0 4
48006: NOT
48007: IFTRUE 48016
48009: PUSH
48010: LD_VAR 0 5
48014: NOT
48015: OR
48016: IFFALSE 48020
// exit ;
48018: GO 48116
// if GetTaskList ( unit ) then
48020: LD_VAR 0 1
48024: PPUSH
48025: CALL_OW 437
48029: IFFALSE 48116
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
48031: LD_STRING e
48033: PUSH
48034: LD_VAR 0 1
48038: PPUSH
48039: CALL_OW 437
48043: PUSH
48044: LD_INT 1
48046: ARRAY
48047: PUSH
48048: LD_INT 1
48050: ARRAY
48051: EQUAL
48052: IFFALSE 48079
48054: PUSH
48055: LD_VAR 0 4
48059: PUSH
48060: LD_VAR 0 1
48064: PPUSH
48065: CALL_OW 437
48069: PUSH
48070: LD_INT 1
48072: ARRAY
48073: PUSH
48074: LD_INT 2
48076: ARRAY
48077: EQUAL
48078: AND
48079: IFFALSE 48106
48081: PUSH
48082: LD_VAR 0 5
48086: PUSH
48087: LD_VAR 0 1
48091: PPUSH
48092: CALL_OW 437
48096: PUSH
48097: LD_INT 1
48099: ARRAY
48100: PUSH
48101: LD_INT 3
48103: ARRAY
48104: EQUAL
48105: AND
48106: IFFALSE 48116
// result := true end ;
48108: LD_ADDR_VAR 0 3
48112: PUSH
48113: LD_INT 1
48115: ST_TO_ADDR
// end ;
48116: LD_VAR 0 3
48120: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
48121: LD_INT 0
48123: PPUSH
// result := false ;
48124: LD_ADDR_VAR 0 4
48128: PUSH
48129: LD_INT 0
48131: ST_TO_ADDR
// if GetTaskList ( unit ) then
48132: LD_VAR 0 1
48136: PPUSH
48137: CALL_OW 437
48141: IFFALSE 48228
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
48143: LD_STRING M
48145: PUSH
48146: LD_VAR 0 1
48150: PPUSH
48151: CALL_OW 437
48155: PUSH
48156: LD_INT 1
48158: ARRAY
48159: PUSH
48160: LD_INT 1
48162: ARRAY
48163: EQUAL
48164: IFFALSE 48191
48166: PUSH
48167: LD_VAR 0 2
48171: PUSH
48172: LD_VAR 0 1
48176: PPUSH
48177: CALL_OW 437
48181: PUSH
48182: LD_INT 1
48184: ARRAY
48185: PUSH
48186: LD_INT 2
48188: ARRAY
48189: EQUAL
48190: AND
48191: IFFALSE 48218
48193: PUSH
48194: LD_VAR 0 3
48198: PUSH
48199: LD_VAR 0 1
48203: PPUSH
48204: CALL_OW 437
48208: PUSH
48209: LD_INT 1
48211: ARRAY
48212: PUSH
48213: LD_INT 3
48215: ARRAY
48216: EQUAL
48217: AND
48218: IFFALSE 48228
// result := true ;
48220: LD_ADDR_VAR 0 4
48224: PUSH
48225: LD_INT 1
48227: ST_TO_ADDR
// end ; end ;
48228: LD_VAR 0 4
48232: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
48233: LD_INT 0
48235: PPUSH
48236: PPUSH
48237: PPUSH
48238: PPUSH
// if not unit or not area then
48239: LD_VAR 0 1
48243: NOT
48244: IFTRUE 48253
48246: PUSH
48247: LD_VAR 0 2
48251: NOT
48252: OR
48253: IFFALSE 48257
// exit ;
48255: GO 48433
// tmp := AreaToList ( area , i ) ;
48257: LD_ADDR_VAR 0 6
48261: PUSH
48262: LD_VAR 0 2
48266: PPUSH
48267: LD_VAR 0 5
48271: PPUSH
48272: CALL_OW 517
48276: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
48277: LD_ADDR_VAR 0 5
48281: PUSH
48282: DOUBLE
48283: LD_INT 1
48285: DEC
48286: ST_TO_ADDR
48287: LD_VAR 0 6
48291: PUSH
48292: LD_INT 1
48294: ARRAY
48295: PUSH
48296: FOR_TO
48297: IFFALSE 48431
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
48299: LD_ADDR_VAR 0 7
48303: PUSH
48304: LD_VAR 0 6
48308: PUSH
48309: LD_INT 1
48311: ARRAY
48312: PUSH
48313: LD_VAR 0 5
48317: ARRAY
48318: PUSH
48319: LD_VAR 0 6
48323: PUSH
48324: LD_INT 2
48326: ARRAY
48327: PUSH
48328: LD_VAR 0 5
48332: ARRAY
48333: PUSH
48334: EMPTY
48335: LIST
48336: LIST
48337: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
48338: LD_INT 92
48340: PUSH
48341: LD_VAR 0 7
48345: PUSH
48346: LD_INT 1
48348: ARRAY
48349: PUSH
48350: LD_VAR 0 7
48354: PUSH
48355: LD_INT 2
48357: ARRAY
48358: PUSH
48359: LD_INT 2
48361: PUSH
48362: EMPTY
48363: LIST
48364: LIST
48365: LIST
48366: LIST
48367: PPUSH
48368: CALL_OW 69
48372: PUSH
48373: LD_INT 0
48375: EQUAL
48376: IFFALSE 48429
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
48378: LD_VAR 0 1
48382: PPUSH
48383: LD_VAR 0 7
48387: PUSH
48388: LD_INT 1
48390: ARRAY
48391: PPUSH
48392: LD_VAR 0 7
48396: PUSH
48397: LD_INT 2
48399: ARRAY
48400: PPUSH
48401: LD_VAR 0 3
48405: PPUSH
48406: CALL_OW 48
// result := IsPlaced ( unit ) ;
48410: LD_ADDR_VAR 0 4
48414: PUSH
48415: LD_VAR 0 1
48419: PPUSH
48420: CALL_OW 305
48424: ST_TO_ADDR
// exit ;
48425: POP
48426: POP
48427: GO 48433
// end ; end ;
48429: GO 48296
48431: POP
48432: POP
// end ;
48433: LD_VAR 0 4
48437: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
48438: LD_INT 0
48440: PPUSH
48441: PPUSH
48442: PPUSH
// if not side or side > 8 then
48443: LD_VAR 0 1
48447: NOT
48448: IFTRUE 48460
48450: PUSH
48451: LD_VAR 0 1
48455: PUSH
48456: LD_INT 8
48458: GREATER
48459: OR
48460: IFFALSE 48464
// exit ;
48462: GO 48651
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
48464: LD_ADDR_VAR 0 4
48468: PUSH
48469: LD_INT 22
48471: PUSH
48472: LD_VAR 0 1
48476: PUSH
48477: EMPTY
48478: LIST
48479: LIST
48480: PUSH
48481: LD_INT 21
48483: PUSH
48484: LD_INT 3
48486: PUSH
48487: EMPTY
48488: LIST
48489: LIST
48490: PUSH
48491: EMPTY
48492: LIST
48493: LIST
48494: PPUSH
48495: CALL_OW 69
48499: ST_TO_ADDR
// if not tmp then
48500: LD_VAR 0 4
48504: NOT
48505: IFFALSE 48509
// exit ;
48507: GO 48651
// enable_addtolog := true ;
48509: LD_ADDR_OWVAR 81
48513: PUSH
48514: LD_INT 1
48516: ST_TO_ADDR
// AddToLog ( [ ) ;
48517: LD_STRING [
48519: PPUSH
48520: CALL_OW 561
// for i in tmp do
48524: LD_ADDR_VAR 0 3
48528: PUSH
48529: LD_VAR 0 4
48533: PUSH
48534: FOR_IN
48535: IFFALSE 48642
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
48537: LD_STRING [
48539: PUSH
48540: LD_VAR 0 3
48544: PPUSH
48545: CALL_OW 266
48549: STR
48550: PUSH
48551: LD_STRING , 
48553: STR
48554: PUSH
48555: LD_VAR 0 3
48559: PPUSH
48560: CALL_OW 250
48564: STR
48565: PUSH
48566: LD_STRING , 
48568: STR
48569: PUSH
48570: LD_VAR 0 3
48574: PPUSH
48575: CALL_OW 251
48579: STR
48580: PUSH
48581: LD_STRING , 
48583: STR
48584: PUSH
48585: LD_VAR 0 3
48589: PPUSH
48590: CALL_OW 254
48594: STR
48595: PUSH
48596: LD_STRING , 
48598: STR
48599: PUSH
48600: LD_VAR 0 3
48604: PPUSH
48605: LD_INT 1
48607: PPUSH
48608: CALL_OW 268
48612: STR
48613: PUSH
48614: LD_STRING , 
48616: STR
48617: PUSH
48618: LD_VAR 0 3
48622: PPUSH
48623: LD_INT 2
48625: PPUSH
48626: CALL_OW 268
48630: STR
48631: PUSH
48632: LD_STRING ],
48634: STR
48635: PPUSH
48636: CALL_OW 561
// end ;
48640: GO 48534
48642: POP
48643: POP
// AddToLog ( ]; ) ;
48644: LD_STRING ];
48646: PPUSH
48647: CALL_OW 561
// end ;
48651: LD_VAR 0 2
48655: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
48656: LD_INT 0
48658: PPUSH
48659: PPUSH
48660: PPUSH
48661: PPUSH
48662: PPUSH
// if not area or not rate or not max then
48663: LD_VAR 0 1
48667: NOT
48668: IFTRUE 48677
48670: PUSH
48671: LD_VAR 0 2
48675: NOT
48676: OR
48677: IFTRUE 48686
48679: PUSH
48680: LD_VAR 0 4
48684: NOT
48685: OR
48686: IFFALSE 48690
// exit ;
48688: GO 48879
// while 1 do
48690: LD_INT 1
48692: IFFALSE 48879
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
48694: LD_ADDR_VAR 0 9
48698: PUSH
48699: LD_VAR 0 1
48703: PPUSH
48704: LD_INT 1
48706: PPUSH
48707: CALL_OW 287
48711: PUSH
48712: LD_INT 10
48714: MUL
48715: ST_TO_ADDR
// r := rate / 10 ;
48716: LD_ADDR_VAR 0 7
48720: PUSH
48721: LD_VAR 0 2
48725: PUSH
48726: LD_INT 10
48728: DIVREAL
48729: ST_TO_ADDR
// time := 1 1$00 ;
48730: LD_ADDR_VAR 0 8
48734: PUSH
48735: LD_INT 2100
48737: ST_TO_ADDR
// if amount < min then
48738: LD_VAR 0 9
48742: PUSH
48743: LD_VAR 0 3
48747: LESS
48748: IFFALSE 48766
// r := r * 2 else
48750: LD_ADDR_VAR 0 7
48754: PUSH
48755: LD_VAR 0 7
48759: PUSH
48760: LD_INT 2
48762: MUL
48763: ST_TO_ADDR
48764: GO 48792
// if amount > max then
48766: LD_VAR 0 9
48770: PUSH
48771: LD_VAR 0 4
48775: GREATER
48776: IFFALSE 48792
// r := r / 2 ;
48778: LD_ADDR_VAR 0 7
48782: PUSH
48783: LD_VAR 0 7
48787: PUSH
48788: LD_INT 2
48790: DIVREAL
48791: ST_TO_ADDR
// time := time / r ;
48792: LD_ADDR_VAR 0 8
48796: PUSH
48797: LD_VAR 0 8
48801: PUSH
48802: LD_VAR 0 7
48806: DIVREAL
48807: ST_TO_ADDR
// if time < 0 then
48808: LD_VAR 0 8
48812: PUSH
48813: LD_INT 0
48815: LESS
48816: IFFALSE 48833
// time := time * - 1 ;
48818: LD_ADDR_VAR 0 8
48822: PUSH
48823: LD_VAR 0 8
48827: PUSH
48828: LD_INT 1
48830: NEG
48831: MUL
48832: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
48833: LD_VAR 0 8
48837: PUSH
48838: LD_INT 35
48840: PPUSH
48841: LD_INT 875
48843: PPUSH
48844: CALL_OW 12
48848: PLUS
48849: PPUSH
48850: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
48854: LD_INT 1
48856: PPUSH
48857: LD_INT 5
48859: PPUSH
48860: CALL_OW 12
48864: PPUSH
48865: LD_VAR 0 1
48869: PPUSH
48870: LD_INT 1
48872: PPUSH
48873: CALL_OW 55
// end ;
48877: GO 48690
// end ;
48879: LD_VAR 0 5
48883: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
48884: LD_INT 0
48886: PPUSH
48887: PPUSH
48888: PPUSH
48889: PPUSH
48890: PPUSH
48891: PPUSH
48892: PPUSH
48893: PPUSH
// if not turrets or not factories then
48894: LD_VAR 0 1
48898: NOT
48899: IFTRUE 48908
48901: PUSH
48902: LD_VAR 0 2
48906: NOT
48907: OR
48908: IFFALSE 48912
// exit ;
48910: GO 49219
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
48912: LD_ADDR_VAR 0 10
48916: PUSH
48917: LD_INT 5
48919: PUSH
48920: LD_INT 6
48922: PUSH
48923: EMPTY
48924: LIST
48925: LIST
48926: PUSH
48927: LD_INT 2
48929: PUSH
48930: LD_INT 4
48932: PUSH
48933: EMPTY
48934: LIST
48935: LIST
48936: PUSH
48937: LD_INT 3
48939: PUSH
48940: LD_INT 5
48942: PUSH
48943: EMPTY
48944: LIST
48945: LIST
48946: PUSH
48947: EMPTY
48948: LIST
48949: LIST
48950: LIST
48951: PUSH
48952: LD_INT 24
48954: PUSH
48955: LD_INT 25
48957: PUSH
48958: EMPTY
48959: LIST
48960: LIST
48961: PUSH
48962: LD_INT 23
48964: PUSH
48965: LD_INT 27
48967: PUSH
48968: EMPTY
48969: LIST
48970: LIST
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: PUSH
48976: LD_INT 42
48978: PUSH
48979: LD_INT 43
48981: PUSH
48982: EMPTY
48983: LIST
48984: LIST
48985: PUSH
48986: LD_INT 44
48988: PUSH
48989: LD_INT 46
48991: PUSH
48992: EMPTY
48993: LIST
48994: LIST
48995: PUSH
48996: LD_INT 45
48998: PUSH
48999: LD_INT 47
49001: PUSH
49002: EMPTY
49003: LIST
49004: LIST
49005: PUSH
49006: EMPTY
49007: LIST
49008: LIST
49009: LIST
49010: PUSH
49011: EMPTY
49012: LIST
49013: LIST
49014: LIST
49015: ST_TO_ADDR
// result := [ ] ;
49016: LD_ADDR_VAR 0 3
49020: PUSH
49021: EMPTY
49022: ST_TO_ADDR
// for i in turrets do
49023: LD_ADDR_VAR 0 4
49027: PUSH
49028: LD_VAR 0 1
49032: PUSH
49033: FOR_IN
49034: IFFALSE 49217
// begin nat := GetNation ( i ) ;
49036: LD_ADDR_VAR 0 7
49040: PUSH
49041: LD_VAR 0 4
49045: PPUSH
49046: CALL_OW 248
49050: ST_TO_ADDR
// weapon := 0 ;
49051: LD_ADDR_VAR 0 8
49055: PUSH
49056: LD_INT 0
49058: ST_TO_ADDR
// if not nat then
49059: LD_VAR 0 7
49063: NOT
49064: IFFALSE 49068
// continue ;
49066: GO 49033
// for j in list [ nat ] do
49068: LD_ADDR_VAR 0 5
49072: PUSH
49073: LD_VAR 0 10
49077: PUSH
49078: LD_VAR 0 7
49082: ARRAY
49083: PUSH
49084: FOR_IN
49085: IFFALSE 49126
// if GetBWeapon ( i ) = j [ 1 ] then
49087: LD_VAR 0 4
49091: PPUSH
49092: CALL_OW 269
49096: PUSH
49097: LD_VAR 0 5
49101: PUSH
49102: LD_INT 1
49104: ARRAY
49105: EQUAL
49106: IFFALSE 49124
// begin weapon := j [ 2 ] ;
49108: LD_ADDR_VAR 0 8
49112: PUSH
49113: LD_VAR 0 5
49117: PUSH
49118: LD_INT 2
49120: ARRAY
49121: ST_TO_ADDR
// break ;
49122: GO 49126
// end ;
49124: GO 49084
49126: POP
49127: POP
// if not weapon then
49128: LD_VAR 0 8
49132: NOT
49133: IFFALSE 49137
// continue ;
49135: GO 49033
// for k in factories do
49137: LD_ADDR_VAR 0 6
49141: PUSH
49142: LD_VAR 0 2
49146: PUSH
49147: FOR_IN
49148: IFFALSE 49213
// begin weapons := AvailableWeaponList ( k ) ;
49150: LD_ADDR_VAR 0 9
49154: PUSH
49155: LD_VAR 0 6
49159: PPUSH
49160: CALL_OW 478
49164: ST_TO_ADDR
// if not weapons then
49165: LD_VAR 0 9
49169: NOT
49170: IFFALSE 49174
// continue ;
49172: GO 49147
// if weapon in weapons then
49174: LD_VAR 0 8
49178: PUSH
49179: LD_VAR 0 9
49183: IN
49184: IFFALSE 49211
// begin result := [ i , weapon ] ;
49186: LD_ADDR_VAR 0 3
49190: PUSH
49191: LD_VAR 0 4
49195: PUSH
49196: LD_VAR 0 8
49200: PUSH
49201: EMPTY
49202: LIST
49203: LIST
49204: ST_TO_ADDR
// exit ;
49205: POP
49206: POP
49207: POP
49208: POP
49209: GO 49219
// end ; end ;
49211: GO 49147
49213: POP
49214: POP
// end ;
49215: GO 49033
49217: POP
49218: POP
// end ;
49219: LD_VAR 0 3
49223: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
49224: LD_INT 0
49226: PPUSH
// if not side or side > 8 then
49227: LD_VAR 0 3
49231: NOT
49232: IFTRUE 49244
49234: PUSH
49235: LD_VAR 0 3
49239: PUSH
49240: LD_INT 8
49242: GREATER
49243: OR
49244: IFFALSE 49248
// exit ;
49246: GO 49307
// if not range then
49248: LD_VAR 0 4
49252: NOT
49253: IFFALSE 49264
// range := - 12 ;
49255: LD_ADDR_VAR 0 4
49259: PUSH
49260: LD_INT 12
49262: NEG
49263: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
49264: LD_VAR 0 1
49268: PPUSH
49269: LD_VAR 0 2
49273: PPUSH
49274: LD_VAR 0 3
49278: PPUSH
49279: LD_VAR 0 4
49283: PPUSH
49284: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
49288: LD_VAR 0 1
49292: PPUSH
49293: LD_VAR 0 2
49297: PPUSH
49298: LD_VAR 0 3
49302: PPUSH
49303: CALL_OW 331
// end ;
49307: LD_VAR 0 5
49311: RET
// export function Video ( mode ) ; begin
49312: LD_INT 0
49314: PPUSH
// ingame_video = mode ;
49315: LD_ADDR_OWVAR 52
49319: PUSH
49320: LD_VAR 0 1
49324: ST_TO_ADDR
// interface_hidden = mode ;
49325: LD_ADDR_OWVAR 54
49329: PUSH
49330: LD_VAR 0 1
49334: ST_TO_ADDR
// end ;
49335: LD_VAR 0 2
49339: RET
// export function Join ( array , element ) ; begin
49340: LD_INT 0
49342: PPUSH
// result := Replace ( array , array + 1 , element ) ;
49343: LD_ADDR_VAR 0 3
49347: PUSH
49348: LD_VAR 0 1
49352: PPUSH
49353: LD_VAR 0 1
49357: PUSH
49358: LD_INT 1
49360: PLUS
49361: PPUSH
49362: LD_VAR 0 2
49366: PPUSH
49367: CALL_OW 1
49371: ST_TO_ADDR
// end ;
49372: LD_VAR 0 3
49376: RET
// export function JoinUnion ( array , element ) ; begin
49377: LD_INT 0
49379: PPUSH
// result := array union element ;
49380: LD_ADDR_VAR 0 3
49384: PUSH
49385: LD_VAR 0 1
49389: PUSH
49390: LD_VAR 0 2
49394: UNION
49395: ST_TO_ADDR
// end ;
49396: LD_VAR 0 3
49400: RET
// export function GetBehemoths ( side ) ; begin
49401: LD_INT 0
49403: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
49404: LD_ADDR_VAR 0 2
49408: PUSH
49409: LD_INT 22
49411: PUSH
49412: LD_VAR 0 1
49416: PUSH
49417: EMPTY
49418: LIST
49419: LIST
49420: PUSH
49421: LD_INT 31
49423: PUSH
49424: LD_INT 25
49426: PUSH
49427: EMPTY
49428: LIST
49429: LIST
49430: PUSH
49431: EMPTY
49432: LIST
49433: LIST
49434: PPUSH
49435: CALL_OW 69
49439: ST_TO_ADDR
// end ;
49440: LD_VAR 0 2
49444: RET
// export function Shuffle ( array ) ; var i , index ; begin
49445: LD_INT 0
49447: PPUSH
49448: PPUSH
49449: PPUSH
// result := [ ] ;
49450: LD_ADDR_VAR 0 2
49454: PUSH
49455: EMPTY
49456: ST_TO_ADDR
// if not array then
49457: LD_VAR 0 1
49461: NOT
49462: IFFALSE 49466
// exit ;
49464: GO 49565
// Randomize ;
49466: CALL_OW 10
// for i = array downto 1 do
49470: LD_ADDR_VAR 0 3
49474: PUSH
49475: DOUBLE
49476: LD_VAR 0 1
49480: INC
49481: ST_TO_ADDR
49482: LD_INT 1
49484: PUSH
49485: FOR_DOWNTO
49486: IFFALSE 49563
// begin index := rand ( 1 , array ) ;
49488: LD_ADDR_VAR 0 4
49492: PUSH
49493: LD_INT 1
49495: PPUSH
49496: LD_VAR 0 1
49500: PPUSH
49501: CALL_OW 12
49505: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
49506: LD_ADDR_VAR 0 2
49510: PUSH
49511: LD_VAR 0 2
49515: PPUSH
49516: LD_VAR 0 2
49520: PUSH
49521: LD_INT 1
49523: PLUS
49524: PPUSH
49525: LD_VAR 0 1
49529: PUSH
49530: LD_VAR 0 4
49534: ARRAY
49535: PPUSH
49536: CALL_OW 2
49540: ST_TO_ADDR
// array := Delete ( array , index ) ;
49541: LD_ADDR_VAR 0 1
49545: PUSH
49546: LD_VAR 0 1
49550: PPUSH
49551: LD_VAR 0 4
49555: PPUSH
49556: CALL_OW 3
49560: ST_TO_ADDR
// end ;
49561: GO 49485
49563: POP
49564: POP
// end ;
49565: LD_VAR 0 2
49569: RET
// export function GetBaseMaterials ( base ) ; begin
49570: LD_INT 0
49572: PPUSH
// result := [ 0 , 0 , 0 ] ;
49573: LD_ADDR_VAR 0 2
49577: PUSH
49578: LD_INT 0
49580: PUSH
49581: LD_INT 0
49583: PUSH
49584: LD_INT 0
49586: PUSH
49587: EMPTY
49588: LIST
49589: LIST
49590: LIST
49591: ST_TO_ADDR
// if not base then
49592: LD_VAR 0 1
49596: NOT
49597: IFFALSE 49601
// exit ;
49599: GO 49650
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
49601: LD_ADDR_VAR 0 2
49605: PUSH
49606: LD_VAR 0 1
49610: PPUSH
49611: LD_INT 1
49613: PPUSH
49614: CALL_OW 275
49618: PUSH
49619: LD_VAR 0 1
49623: PPUSH
49624: LD_INT 2
49626: PPUSH
49627: CALL_OW 275
49631: PUSH
49632: LD_VAR 0 1
49636: PPUSH
49637: LD_INT 3
49639: PPUSH
49640: CALL_OW 275
49644: PUSH
49645: EMPTY
49646: LIST
49647: LIST
49648: LIST
49649: ST_TO_ADDR
// end ;
49650: LD_VAR 0 2
49654: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
49655: LD_INT 0
49657: PPUSH
49658: PPUSH
// result := array ;
49659: LD_ADDR_VAR 0 3
49663: PUSH
49664: LD_VAR 0 1
49668: ST_TO_ADDR
// if size >= result then
49669: LD_VAR 0 2
49673: PUSH
49674: LD_VAR 0 3
49678: GREATEREQUAL
49679: IFFALSE 49683
// exit ;
49681: GO 49733
// if size then
49683: LD_VAR 0 2
49687: IFFALSE 49733
// for i := array downto size do
49689: LD_ADDR_VAR 0 4
49693: PUSH
49694: DOUBLE
49695: LD_VAR 0 1
49699: INC
49700: ST_TO_ADDR
49701: LD_VAR 0 2
49705: PUSH
49706: FOR_DOWNTO
49707: IFFALSE 49731
// result := Delete ( result , result ) ;
49709: LD_ADDR_VAR 0 3
49713: PUSH
49714: LD_VAR 0 3
49718: PPUSH
49719: LD_VAR 0 3
49723: PPUSH
49724: CALL_OW 3
49728: ST_TO_ADDR
49729: GO 49706
49731: POP
49732: POP
// end ;
49733: LD_VAR 0 3
49737: RET
// export function ComExit ( unit ) ; var tmp ; begin
49738: LD_INT 0
49740: PPUSH
49741: PPUSH
// if not IsInUnit ( unit ) then
49742: LD_VAR 0 1
49746: PPUSH
49747: CALL_OW 310
49751: NOT
49752: IFFALSE 49756
// exit ;
49754: GO 49816
// tmp := IsInUnit ( unit ) ;
49756: LD_ADDR_VAR 0 3
49760: PUSH
49761: LD_VAR 0 1
49765: PPUSH
49766: CALL_OW 310
49770: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
49771: LD_VAR 0 3
49775: PPUSH
49776: CALL_OW 247
49780: PUSH
49781: LD_INT 2
49783: EQUAL
49784: IFFALSE 49797
// ComExitVehicle ( unit ) else
49786: LD_VAR 0 1
49790: PPUSH
49791: CALL_OW 121
49795: GO 49806
// ComExitBuilding ( unit ) ;
49797: LD_VAR 0 1
49801: PPUSH
49802: CALL_OW 122
// result := tmp ;
49806: LD_ADDR_VAR 0 2
49810: PUSH
49811: LD_VAR 0 3
49815: ST_TO_ADDR
// end ;
49816: LD_VAR 0 2
49820: RET
// export function ComExitAll ( units ) ; var i ; begin
49821: LD_INT 0
49823: PPUSH
49824: PPUSH
// if not units then
49825: LD_VAR 0 1
49829: NOT
49830: IFFALSE 49834
// exit ;
49832: GO 49860
// for i in units do
49834: LD_ADDR_VAR 0 3
49838: PUSH
49839: LD_VAR 0 1
49843: PUSH
49844: FOR_IN
49845: IFFALSE 49858
// ComExit ( i ) ;
49847: LD_VAR 0 3
49851: PPUSH
49852: CALL 49738 0 1
49856: GO 49844
49858: POP
49859: POP
// end ;
49860: LD_VAR 0 2
49864: RET
// export function ResetHc ; begin
49865: LD_INT 0
49867: PPUSH
// InitHc ;
49868: CALL_OW 19
// hc_importance := 0 ;
49872: LD_ADDR_OWVAR 32
49876: PUSH
49877: LD_INT 0
49879: ST_TO_ADDR
// end ;
49880: LD_VAR 0 1
49884: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
49885: LD_INT 0
49887: PPUSH
49888: PPUSH
49889: PPUSH
// _x := ( x1 + x2 ) div 2 ;
49890: LD_ADDR_VAR 0 6
49894: PUSH
49895: LD_VAR 0 1
49899: PUSH
49900: LD_VAR 0 3
49904: PLUS
49905: PUSH
49906: LD_INT 2
49908: DIV
49909: ST_TO_ADDR
// if _x < 0 then
49910: LD_VAR 0 6
49914: PUSH
49915: LD_INT 0
49917: LESS
49918: IFFALSE 49935
// _x := _x * - 1 ;
49920: LD_ADDR_VAR 0 6
49924: PUSH
49925: LD_VAR 0 6
49929: PUSH
49930: LD_INT 1
49932: NEG
49933: MUL
49934: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
49935: LD_ADDR_VAR 0 7
49939: PUSH
49940: LD_VAR 0 2
49944: PUSH
49945: LD_VAR 0 4
49949: PLUS
49950: PUSH
49951: LD_INT 2
49953: DIV
49954: ST_TO_ADDR
// if _y < 0 then
49955: LD_VAR 0 7
49959: PUSH
49960: LD_INT 0
49962: LESS
49963: IFFALSE 49980
// _y := _y * - 1 ;
49965: LD_ADDR_VAR 0 7
49969: PUSH
49970: LD_VAR 0 7
49974: PUSH
49975: LD_INT 1
49977: NEG
49978: MUL
49979: ST_TO_ADDR
// result := [ _x , _y ] ;
49980: LD_ADDR_VAR 0 5
49984: PUSH
49985: LD_VAR 0 6
49989: PUSH
49990: LD_VAR 0 7
49994: PUSH
49995: EMPTY
49996: LIST
49997: LIST
49998: ST_TO_ADDR
// end ;
49999: LD_VAR 0 5
50003: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
50004: LD_INT 0
50006: PPUSH
50007: PPUSH
50008: PPUSH
50009: PPUSH
// task := GetTaskList ( unit ) ;
50010: LD_ADDR_VAR 0 7
50014: PUSH
50015: LD_VAR 0 1
50019: PPUSH
50020: CALL_OW 437
50024: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
50025: LD_VAR 0 7
50029: NOT
50030: IFFALSE 50049
50032: PUSH
50033: LD_VAR 0 1
50037: PPUSH
50038: LD_VAR 0 2
50042: PPUSH
50043: CALL_OW 308
50047: NOT
50048: AND
50049: IFFALSE 50053
// exit ;
50051: GO 50171
// if IsInArea ( unit , area ) then
50053: LD_VAR 0 1
50057: PPUSH
50058: LD_VAR 0 2
50062: PPUSH
50063: CALL_OW 308
50067: IFFALSE 50085
// begin ComMoveToArea ( unit , goAway ) ;
50069: LD_VAR 0 1
50073: PPUSH
50074: LD_VAR 0 3
50078: PPUSH
50079: CALL_OW 113
// exit ;
50083: GO 50171
// end ; if task [ 1 ] [ 1 ] <> M then
50085: LD_VAR 0 7
50089: PUSH
50090: LD_INT 1
50092: ARRAY
50093: PUSH
50094: LD_INT 1
50096: ARRAY
50097: PUSH
50098: LD_STRING M
50100: NONEQUAL
50101: IFFALSE 50105
// exit ;
50103: GO 50171
// x := task [ 1 ] [ 2 ] ;
50105: LD_ADDR_VAR 0 5
50109: PUSH
50110: LD_VAR 0 7
50114: PUSH
50115: LD_INT 1
50117: ARRAY
50118: PUSH
50119: LD_INT 2
50121: ARRAY
50122: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
50123: LD_ADDR_VAR 0 6
50127: PUSH
50128: LD_VAR 0 7
50132: PUSH
50133: LD_INT 1
50135: ARRAY
50136: PUSH
50137: LD_INT 3
50139: ARRAY
50140: ST_TO_ADDR
// if InArea ( x , y , area ) then
50141: LD_VAR 0 5
50145: PPUSH
50146: LD_VAR 0 6
50150: PPUSH
50151: LD_VAR 0 2
50155: PPUSH
50156: CALL_OW 309
50160: IFFALSE 50171
// ComStop ( unit ) ;
50162: LD_VAR 0 1
50166: PPUSH
50167: CALL_OW 141
// end ;
50171: LD_VAR 0 4
50175: RET
// export function Abs ( value ) ; begin
50176: LD_INT 0
50178: PPUSH
// result := value ;
50179: LD_ADDR_VAR 0 2
50183: PUSH
50184: LD_VAR 0 1
50188: ST_TO_ADDR
// if value < 0 then
50189: LD_VAR 0 1
50193: PUSH
50194: LD_INT 0
50196: LESS
50197: IFFALSE 50214
// result := value * - 1 ;
50199: LD_ADDR_VAR 0 2
50203: PUSH
50204: LD_VAR 0 1
50208: PUSH
50209: LD_INT 1
50211: NEG
50212: MUL
50213: ST_TO_ADDR
// end ;
50214: LD_VAR 0 2
50218: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
50219: LD_INT 0
50221: PPUSH
50222: PPUSH
50223: PPUSH
50224: PPUSH
50225: PPUSH
50226: PPUSH
50227: PPUSH
50228: PPUSH
// if not unit or not building then
50229: LD_VAR 0 1
50233: NOT
50234: IFTRUE 50243
50236: PUSH
50237: LD_VAR 0 2
50241: NOT
50242: OR
50243: IFFALSE 50247
// exit ;
50245: GO 50475
// x := GetX ( building ) ;
50247: LD_ADDR_VAR 0 4
50251: PUSH
50252: LD_VAR 0 2
50256: PPUSH
50257: CALL_OW 250
50261: ST_TO_ADDR
// y := GetY ( building ) ;
50262: LD_ADDR_VAR 0 6
50266: PUSH
50267: LD_VAR 0 2
50271: PPUSH
50272: CALL_OW 251
50276: ST_TO_ADDR
// d := GetDir ( building ) ;
50277: LD_ADDR_VAR 0 8
50281: PUSH
50282: LD_VAR 0 2
50286: PPUSH
50287: CALL_OW 254
50291: ST_TO_ADDR
// r := 4 ;
50292: LD_ADDR_VAR 0 9
50296: PUSH
50297: LD_INT 4
50299: ST_TO_ADDR
// for i := 1 to 5 do
50300: LD_ADDR_VAR 0 10
50304: PUSH
50305: DOUBLE
50306: LD_INT 1
50308: DEC
50309: ST_TO_ADDR
50310: LD_INT 5
50312: PUSH
50313: FOR_TO
50314: IFFALSE 50473
// begin _x := ShiftX ( x , d , r + i ) ;
50316: LD_ADDR_VAR 0 5
50320: PUSH
50321: LD_VAR 0 4
50325: PPUSH
50326: LD_VAR 0 8
50330: PPUSH
50331: LD_VAR 0 9
50335: PUSH
50336: LD_VAR 0 10
50340: PLUS
50341: PPUSH
50342: CALL_OW 272
50346: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
50347: LD_ADDR_VAR 0 7
50351: PUSH
50352: LD_VAR 0 6
50356: PPUSH
50357: LD_VAR 0 8
50361: PPUSH
50362: LD_VAR 0 9
50366: PUSH
50367: LD_VAR 0 10
50371: PLUS
50372: PPUSH
50373: CALL_OW 273
50377: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
50378: LD_VAR 0 5
50382: PPUSH
50383: LD_VAR 0 7
50387: PPUSH
50388: CALL_OW 488
50392: IFFALSE 50427
50394: PUSH
50395: LD_VAR 0 5
50399: PPUSH
50400: LD_VAR 0 7
50404: PPUSH
50405: CALL_OW 428
50409: PPUSH
50410: CALL_OW 247
50414: PUSH
50415: LD_INT 3
50417: PUSH
50418: LD_INT 2
50420: PUSH
50421: EMPTY
50422: LIST
50423: LIST
50424: IN
50425: NOT
50426: AND
50427: IFFALSE 50471
// begin ComMoveXY ( unit , _x , _y ) ;
50429: LD_VAR 0 1
50433: PPUSH
50434: LD_VAR 0 5
50438: PPUSH
50439: LD_VAR 0 7
50443: PPUSH
50444: CALL_OW 111
// result := [ _x , _y ] ;
50448: LD_ADDR_VAR 0 3
50452: PUSH
50453: LD_VAR 0 5
50457: PUSH
50458: LD_VAR 0 7
50462: PUSH
50463: EMPTY
50464: LIST
50465: LIST
50466: ST_TO_ADDR
// exit ;
50467: POP
50468: POP
50469: GO 50475
// end ; end ;
50471: GO 50313
50473: POP
50474: POP
// end ;
50475: LD_VAR 0 3
50479: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
50480: LD_INT 0
50482: PPUSH
50483: PPUSH
50484: PPUSH
// result := 0 ;
50485: LD_ADDR_VAR 0 3
50489: PUSH
50490: LD_INT 0
50492: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
50493: LD_VAR 0 1
50497: PUSH
50498: LD_INT 0
50500: LESS
50501: IFTRUE 50513
50503: PUSH
50504: LD_VAR 0 1
50508: PUSH
50509: LD_INT 8
50511: GREATER
50512: OR
50513: IFTRUE 50525
50515: PUSH
50516: LD_VAR 0 2
50520: PUSH
50521: LD_INT 0
50523: LESS
50524: OR
50525: IFTRUE 50537
50527: PUSH
50528: LD_VAR 0 2
50532: PUSH
50533: LD_INT 8
50535: GREATER
50536: OR
50537: IFFALSE 50541
// exit ;
50539: GO 50616
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
50541: LD_ADDR_VAR 0 4
50545: PUSH
50546: LD_INT 22
50548: PUSH
50549: LD_VAR 0 2
50553: PUSH
50554: EMPTY
50555: LIST
50556: LIST
50557: PPUSH
50558: CALL_OW 69
50562: PUSH
50563: FOR_IN
50564: IFFALSE 50614
// begin un := UnitShoot ( i ) ;
50566: LD_ADDR_VAR 0 5
50570: PUSH
50571: LD_VAR 0 4
50575: PPUSH
50576: CALL_OW 504
50580: ST_TO_ADDR
// if GetSide ( un ) = side1 then
50581: LD_VAR 0 5
50585: PPUSH
50586: CALL_OW 255
50590: PUSH
50591: LD_VAR 0 1
50595: EQUAL
50596: IFFALSE 50612
// begin result := un ;
50598: LD_ADDR_VAR 0 3
50602: PUSH
50603: LD_VAR 0 5
50607: ST_TO_ADDR
// exit ;
50608: POP
50609: POP
50610: GO 50616
// end ; end ;
50612: GO 50563
50614: POP
50615: POP
// end ;
50616: LD_VAR 0 3
50620: RET
// export function GetCargoBay ( units ) ; begin
50621: LD_INT 0
50623: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
50624: LD_ADDR_VAR 0 2
50628: PUSH
50629: LD_VAR 0 1
50633: PPUSH
50634: LD_INT 2
50636: PUSH
50637: LD_INT 34
50639: PUSH
50640: LD_INT 12
50642: PUSH
50643: EMPTY
50644: LIST
50645: LIST
50646: PUSH
50647: LD_INT 34
50649: PUSH
50650: LD_INT 51
50652: PUSH
50653: EMPTY
50654: LIST
50655: LIST
50656: PUSH
50657: LD_INT 34
50659: PUSH
50660: LD_INT 32
50662: PUSH
50663: EMPTY
50664: LIST
50665: LIST
50666: PUSH
50667: LD_INT 34
50669: PUSH
50670: LD_INT 89
50672: PUSH
50673: EMPTY
50674: LIST
50675: LIST
50676: PUSH
50677: EMPTY
50678: LIST
50679: LIST
50680: LIST
50681: LIST
50682: LIST
50683: PPUSH
50684: CALL_OW 72
50688: ST_TO_ADDR
// end ;
50689: LD_VAR 0 2
50693: RET
// export function Negate ( value ) ; begin
50694: LD_INT 0
50696: PPUSH
// result := not value ;
50697: LD_ADDR_VAR 0 2
50701: PUSH
50702: LD_VAR 0 1
50706: NOT
50707: ST_TO_ADDR
// end ;
50708: LD_VAR 0 2
50712: RET
// export function Inc ( value ) ; begin
50713: LD_INT 0
50715: PPUSH
// result := value + 1 ;
50716: LD_ADDR_VAR 0 2
50720: PUSH
50721: LD_VAR 0 1
50725: PUSH
50726: LD_INT 1
50728: PLUS
50729: ST_TO_ADDR
// end ;
50730: LD_VAR 0 2
50734: RET
// export function Dec ( value ) ; begin
50735: LD_INT 0
50737: PPUSH
// result := value - 1 ;
50738: LD_ADDR_VAR 0 2
50742: PUSH
50743: LD_VAR 0 1
50747: PUSH
50748: LD_INT 1
50750: MINUS
50751: ST_TO_ADDR
// end ;
50752: LD_VAR 0 2
50756: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
50757: LD_INT 0
50759: PPUSH
50760: PPUSH
50761: PPUSH
50762: PPUSH
50763: PPUSH
50764: PPUSH
50765: PPUSH
50766: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
50767: LD_VAR 0 1
50771: PPUSH
50772: LD_VAR 0 2
50776: PPUSH
50777: CALL_OW 488
50781: NOT
50782: IFTRUE 50801
50784: PUSH
50785: LD_VAR 0 3
50789: PPUSH
50790: LD_VAR 0 4
50794: PPUSH
50795: CALL_OW 488
50799: NOT
50800: OR
50801: IFFALSE 50814
// begin result := - 1 ;
50803: LD_ADDR_VAR 0 5
50807: PUSH
50808: LD_INT 1
50810: NEG
50811: ST_TO_ADDR
// exit ;
50812: GO 51049
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
50814: LD_ADDR_VAR 0 12
50818: PUSH
50819: LD_VAR 0 1
50823: PPUSH
50824: LD_VAR 0 2
50828: PPUSH
50829: LD_VAR 0 3
50833: PPUSH
50834: LD_VAR 0 4
50838: PPUSH
50839: CALL 49885 0 4
50843: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
50844: LD_ADDR_VAR 0 11
50848: PUSH
50849: LD_VAR 0 1
50853: PPUSH
50854: LD_VAR 0 2
50858: PPUSH
50859: LD_VAR 0 12
50863: PUSH
50864: LD_INT 1
50866: ARRAY
50867: PPUSH
50868: LD_VAR 0 12
50872: PUSH
50873: LD_INT 2
50875: ARRAY
50876: PPUSH
50877: CALL_OW 298
50881: ST_TO_ADDR
// distance := 9999 ;
50882: LD_ADDR_VAR 0 10
50886: PUSH
50887: LD_INT 9999
50889: ST_TO_ADDR
// for i := 0 to 5 do
50890: LD_ADDR_VAR 0 6
50894: PUSH
50895: DOUBLE
50896: LD_INT 0
50898: DEC
50899: ST_TO_ADDR
50900: LD_INT 5
50902: PUSH
50903: FOR_TO
50904: IFFALSE 51047
// begin _x := ShiftX ( x1 , i , centerDist ) ;
50906: LD_ADDR_VAR 0 7
50910: PUSH
50911: LD_VAR 0 1
50915: PPUSH
50916: LD_VAR 0 6
50920: PPUSH
50921: LD_VAR 0 11
50925: PPUSH
50926: CALL_OW 272
50930: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
50931: LD_ADDR_VAR 0 8
50935: PUSH
50936: LD_VAR 0 2
50940: PPUSH
50941: LD_VAR 0 6
50945: PPUSH
50946: LD_VAR 0 11
50950: PPUSH
50951: CALL_OW 273
50955: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
50956: LD_VAR 0 7
50960: PPUSH
50961: LD_VAR 0 8
50965: PPUSH
50966: CALL_OW 488
50970: NOT
50971: IFFALSE 50975
// continue ;
50973: GO 50903
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
50975: LD_ADDR_VAR 0 9
50979: PUSH
50980: LD_VAR 0 12
50984: PUSH
50985: LD_INT 1
50987: ARRAY
50988: PPUSH
50989: LD_VAR 0 12
50993: PUSH
50994: LD_INT 2
50996: ARRAY
50997: PPUSH
50998: LD_VAR 0 7
51002: PPUSH
51003: LD_VAR 0 8
51007: PPUSH
51008: CALL_OW 298
51012: ST_TO_ADDR
// if tmp < distance then
51013: LD_VAR 0 9
51017: PUSH
51018: LD_VAR 0 10
51022: LESS
51023: IFFALSE 51045
// begin result := i ;
51025: LD_ADDR_VAR 0 5
51029: PUSH
51030: LD_VAR 0 6
51034: ST_TO_ADDR
// distance := tmp ;
51035: LD_ADDR_VAR 0 10
51039: PUSH
51040: LD_VAR 0 9
51044: ST_TO_ADDR
// end ; end ;
51045: GO 50903
51047: POP
51048: POP
// end ;
51049: LD_VAR 0 5
51053: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
51054: LD_INT 0
51056: PPUSH
51057: PPUSH
// if not driver or not IsInUnit ( driver ) then
51058: LD_VAR 0 1
51062: NOT
51063: IFTRUE 51077
51065: PUSH
51066: LD_VAR 0 1
51070: PPUSH
51071: CALL_OW 310
51075: NOT
51076: OR
51077: IFFALSE 51081
// exit ;
51079: GO 51171
// vehicle := IsInUnit ( driver ) ;
51081: LD_ADDR_VAR 0 3
51085: PUSH
51086: LD_VAR 0 1
51090: PPUSH
51091: CALL_OW 310
51095: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
51096: LD_VAR 0 1
51100: PPUSH
51101: LD_STRING \
51103: PUSH
51104: LD_INT 0
51106: PUSH
51107: LD_INT 0
51109: PUSH
51110: LD_INT 0
51112: PUSH
51113: LD_INT 0
51115: PUSH
51116: LD_INT 0
51118: PUSH
51119: LD_INT 0
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: LIST
51126: LIST
51127: LIST
51128: LIST
51129: LIST
51130: PUSH
51131: LD_STRING E
51133: PUSH
51134: LD_INT 0
51136: PUSH
51137: LD_INT 0
51139: PUSH
51140: LD_VAR 0 3
51144: PUSH
51145: LD_INT 0
51147: PUSH
51148: LD_INT 0
51150: PUSH
51151: LD_INT 0
51153: PUSH
51154: EMPTY
51155: LIST
51156: LIST
51157: LIST
51158: LIST
51159: LIST
51160: LIST
51161: LIST
51162: PUSH
51163: EMPTY
51164: LIST
51165: LIST
51166: PPUSH
51167: CALL_OW 446
// end ;
51171: LD_VAR 0 2
51175: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
51176: LD_INT 0
51178: PPUSH
51179: PPUSH
// if not driver or not IsInUnit ( driver ) then
51180: LD_VAR 0 1
51184: NOT
51185: IFTRUE 51199
51187: PUSH
51188: LD_VAR 0 1
51192: PPUSH
51193: CALL_OW 310
51197: NOT
51198: OR
51199: IFFALSE 51203
// exit ;
51201: GO 51293
// vehicle := IsInUnit ( driver ) ;
51203: LD_ADDR_VAR 0 3
51207: PUSH
51208: LD_VAR 0 1
51212: PPUSH
51213: CALL_OW 310
51217: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
51218: LD_VAR 0 1
51222: PPUSH
51223: LD_STRING \
51225: PUSH
51226: LD_INT 0
51228: PUSH
51229: LD_INT 0
51231: PUSH
51232: LD_INT 0
51234: PUSH
51235: LD_INT 0
51237: PUSH
51238: LD_INT 0
51240: PUSH
51241: LD_INT 0
51243: PUSH
51244: EMPTY
51245: LIST
51246: LIST
51247: LIST
51248: LIST
51249: LIST
51250: LIST
51251: LIST
51252: PUSH
51253: LD_STRING E
51255: PUSH
51256: LD_INT 0
51258: PUSH
51259: LD_INT 0
51261: PUSH
51262: LD_VAR 0 3
51266: PUSH
51267: LD_INT 0
51269: PUSH
51270: LD_INT 0
51272: PUSH
51273: LD_INT 0
51275: PUSH
51276: EMPTY
51277: LIST
51278: LIST
51279: LIST
51280: LIST
51281: LIST
51282: LIST
51283: LIST
51284: PUSH
51285: EMPTY
51286: LIST
51287: LIST
51288: PPUSH
51289: CALL_OW 447
// end ;
51293: LD_VAR 0 2
51297: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
51298: LD_INT 0
51300: PPUSH
51301: PPUSH
51302: PPUSH
// tmp := [ ] ;
51303: LD_ADDR_VAR 0 5
51307: PUSH
51308: EMPTY
51309: ST_TO_ADDR
// for i in units do
51310: LD_ADDR_VAR 0 4
51314: PUSH
51315: LD_VAR 0 1
51319: PUSH
51320: FOR_IN
51321: IFFALSE 51359
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
51323: LD_ADDR_VAR 0 5
51327: PUSH
51328: LD_VAR 0 5
51332: PPUSH
51333: LD_VAR 0 5
51337: PUSH
51338: LD_INT 1
51340: PLUS
51341: PPUSH
51342: LD_VAR 0 4
51346: PPUSH
51347: CALL_OW 256
51351: PPUSH
51352: CALL_OW 2
51356: ST_TO_ADDR
51357: GO 51320
51359: POP
51360: POP
// if not tmp then
51361: LD_VAR 0 5
51365: NOT
51366: IFFALSE 51370
// exit ;
51368: GO 51418
// if asc then
51370: LD_VAR 0 2
51374: IFFALSE 51398
// result := SortListByListAsc ( units , tmp ) else
51376: LD_ADDR_VAR 0 3
51380: PUSH
51381: LD_VAR 0 1
51385: PPUSH
51386: LD_VAR 0 5
51390: PPUSH
51391: CALL_OW 76
51395: ST_TO_ADDR
51396: GO 51418
// result := SortListByListDesc ( units , tmp ) ;
51398: LD_ADDR_VAR 0 3
51402: PUSH
51403: LD_VAR 0 1
51407: PPUSH
51408: LD_VAR 0 5
51412: PPUSH
51413: CALL_OW 77
51417: ST_TO_ADDR
// end ;
51418: LD_VAR 0 3
51422: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
51423: LD_INT 0
51425: PPUSH
51426: PPUSH
// task := GetTaskList ( mech ) ;
51427: LD_ADDR_VAR 0 4
51431: PUSH
51432: LD_VAR 0 1
51436: PPUSH
51437: CALL_OW 437
51441: ST_TO_ADDR
// if not task then
51442: LD_VAR 0 4
51446: NOT
51447: IFFALSE 51451
// exit ;
51449: GO 51495
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
51451: LD_ADDR_VAR 0 3
51455: PUSH
51456: LD_VAR 0 4
51460: PUSH
51461: LD_INT 1
51463: ARRAY
51464: PUSH
51465: LD_INT 1
51467: ARRAY
51468: PUSH
51469: LD_STRING r
51471: EQUAL
51472: IFFALSE 51494
51474: PUSH
51475: LD_VAR 0 4
51479: PUSH
51480: LD_INT 1
51482: ARRAY
51483: PUSH
51484: LD_INT 4
51486: ARRAY
51487: PUSH
51488: LD_VAR 0 2
51492: EQUAL
51493: AND
51494: ST_TO_ADDR
// end ;
51495: LD_VAR 0 3
51499: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
51500: LD_INT 0
51502: PPUSH
// SetDir ( unit , d ) ;
51503: LD_VAR 0 1
51507: PPUSH
51508: LD_VAR 0 4
51512: PPUSH
51513: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
51517: LD_ADDR_VAR 0 6
51521: PUSH
51522: LD_VAR 0 1
51526: PPUSH
51527: LD_VAR 0 2
51531: PPUSH
51532: LD_VAR 0 3
51536: PPUSH
51537: LD_VAR 0 5
51541: PPUSH
51542: CALL_OW 48
51546: ST_TO_ADDR
// end ;
51547: LD_VAR 0 6
51551: RET
// export function ToNaturalNumber ( number ) ; begin
51552: LD_INT 0
51554: PPUSH
// result := number div 1 ;
51555: LD_ADDR_VAR 0 2
51559: PUSH
51560: LD_VAR 0 1
51564: PUSH
51565: LD_INT 1
51567: DIV
51568: ST_TO_ADDR
// if number < 0 then
51569: LD_VAR 0 1
51573: PUSH
51574: LD_INT 0
51576: LESS
51577: IFFALSE 51587
// result := 0 ;
51579: LD_ADDR_VAR 0 2
51583: PUSH
51584: LD_INT 0
51586: ST_TO_ADDR
// end ;
51587: LD_VAR 0 2
51591: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
51592: LD_INT 0
51594: PPUSH
51595: PPUSH
51596: PPUSH
// if not buildings then
51597: LD_VAR 0 1
51601: NOT
51602: IFFALSE 51606
// exit ;
51604: GO 51721
// tmp := [ ] ;
51606: LD_ADDR_VAR 0 5
51610: PUSH
51611: EMPTY
51612: ST_TO_ADDR
// for b in buildings do
51613: LD_ADDR_VAR 0 4
51617: PUSH
51618: LD_VAR 0 1
51622: PUSH
51623: FOR_IN
51624: IFFALSE 51662
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
51626: LD_ADDR_VAR 0 5
51630: PUSH
51631: LD_VAR 0 5
51635: PPUSH
51636: LD_VAR 0 5
51640: PUSH
51641: LD_INT 1
51643: PLUS
51644: PPUSH
51645: LD_VAR 0 4
51649: PPUSH
51650: CALL_OW 266
51654: PPUSH
51655: CALL_OW 1
51659: ST_TO_ADDR
51660: GO 51623
51662: POP
51663: POP
// if not tmp then
51664: LD_VAR 0 5
51668: NOT
51669: IFFALSE 51673
// exit ;
51671: GO 51721
// if asc then
51673: LD_VAR 0 2
51677: IFFALSE 51701
// result := SortListByListAsc ( buildings , tmp ) else
51679: LD_ADDR_VAR 0 3
51683: PUSH
51684: LD_VAR 0 1
51688: PPUSH
51689: LD_VAR 0 5
51693: PPUSH
51694: CALL_OW 76
51698: ST_TO_ADDR
51699: GO 51721
// result := SortListByListDesc ( buildings , tmp ) ;
51701: LD_ADDR_VAR 0 3
51705: PUSH
51706: LD_VAR 0 1
51710: PPUSH
51711: LD_VAR 0 5
51715: PPUSH
51716: CALL_OW 77
51720: ST_TO_ADDR
// end ;
51721: LD_VAR 0 3
51725: RET
// export function SortByClass ( units , class ) ; var un ; begin
51726: LD_INT 0
51728: PPUSH
51729: PPUSH
// if not units or not class then
51730: LD_VAR 0 1
51734: NOT
51735: IFTRUE 51744
51737: PUSH
51738: LD_VAR 0 2
51742: NOT
51743: OR
51744: IFFALSE 51748
// exit ;
51746: GO 51843
// result := [ ] ;
51748: LD_ADDR_VAR 0 3
51752: PUSH
51753: EMPTY
51754: ST_TO_ADDR
// for un in units do
51755: LD_ADDR_VAR 0 4
51759: PUSH
51760: LD_VAR 0 1
51764: PUSH
51765: FOR_IN
51766: IFFALSE 51841
// if GetClass ( un ) = class then
51768: LD_VAR 0 4
51772: PPUSH
51773: CALL_OW 257
51777: PUSH
51778: LD_VAR 0 2
51782: EQUAL
51783: IFFALSE 51810
// result := Insert ( result , 1 , un ) else
51785: LD_ADDR_VAR 0 3
51789: PUSH
51790: LD_VAR 0 3
51794: PPUSH
51795: LD_INT 1
51797: PPUSH
51798: LD_VAR 0 4
51802: PPUSH
51803: CALL_OW 2
51807: ST_TO_ADDR
51808: GO 51839
// result := Replace ( result , result + 1 , un ) ;
51810: LD_ADDR_VAR 0 3
51814: PUSH
51815: LD_VAR 0 3
51819: PPUSH
51820: LD_VAR 0 3
51824: PUSH
51825: LD_INT 1
51827: PLUS
51828: PPUSH
51829: LD_VAR 0 4
51833: PPUSH
51834: CALL_OW 1
51838: ST_TO_ADDR
51839: GO 51765
51841: POP
51842: POP
// end ;
51843: LD_VAR 0 3
51847: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
51848: LD_INT 0
51850: PPUSH
51851: PPUSH
51852: PPUSH
51853: PPUSH
51854: PPUSH
51855: PPUSH
51856: PPUSH
// result := [ ] ;
51857: LD_ADDR_VAR 0 4
51861: PUSH
51862: EMPTY
51863: ST_TO_ADDR
// if x - r < 0 then
51864: LD_VAR 0 1
51868: PUSH
51869: LD_VAR 0 3
51873: MINUS
51874: PUSH
51875: LD_INT 0
51877: LESS
51878: IFFALSE 51890
// min_x := 0 else
51880: LD_ADDR_VAR 0 8
51884: PUSH
51885: LD_INT 0
51887: ST_TO_ADDR
51888: GO 51906
// min_x := x - r ;
51890: LD_ADDR_VAR 0 8
51894: PUSH
51895: LD_VAR 0 1
51899: PUSH
51900: LD_VAR 0 3
51904: MINUS
51905: ST_TO_ADDR
// if y - r < 0 then
51906: LD_VAR 0 2
51910: PUSH
51911: LD_VAR 0 3
51915: MINUS
51916: PUSH
51917: LD_INT 0
51919: LESS
51920: IFFALSE 51932
// min_y := 0 else
51922: LD_ADDR_VAR 0 7
51926: PUSH
51927: LD_INT 0
51929: ST_TO_ADDR
51930: GO 51948
// min_y := y - r ;
51932: LD_ADDR_VAR 0 7
51936: PUSH
51937: LD_VAR 0 2
51941: PUSH
51942: LD_VAR 0 3
51946: MINUS
51947: ST_TO_ADDR
// max_x := x + r ;
51948: LD_ADDR_VAR 0 9
51952: PUSH
51953: LD_VAR 0 1
51957: PUSH
51958: LD_VAR 0 3
51962: PLUS
51963: ST_TO_ADDR
// max_y := y + r ;
51964: LD_ADDR_VAR 0 10
51968: PUSH
51969: LD_VAR 0 2
51973: PUSH
51974: LD_VAR 0 3
51978: PLUS
51979: ST_TO_ADDR
// for _x = min_x to max_x do
51980: LD_ADDR_VAR 0 5
51984: PUSH
51985: DOUBLE
51986: LD_VAR 0 8
51990: DEC
51991: ST_TO_ADDR
51992: LD_VAR 0 9
51996: PUSH
51997: FOR_TO
51998: IFFALSE 52099
// for _y = min_y to max_y do
52000: LD_ADDR_VAR 0 6
52004: PUSH
52005: DOUBLE
52006: LD_VAR 0 7
52010: DEC
52011: ST_TO_ADDR
52012: LD_VAR 0 10
52016: PUSH
52017: FOR_TO
52018: IFFALSE 52095
// begin if not ValidHex ( _x , _y ) then
52020: LD_VAR 0 5
52024: PPUSH
52025: LD_VAR 0 6
52029: PPUSH
52030: CALL_OW 488
52034: NOT
52035: IFFALSE 52039
// continue ;
52037: GO 52017
// if GetResourceTypeXY ( _x , _y ) then
52039: LD_VAR 0 5
52043: PPUSH
52044: LD_VAR 0 6
52048: PPUSH
52049: CALL_OW 283
52053: IFFALSE 52093
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
52055: LD_ADDR_VAR 0 4
52059: PUSH
52060: LD_VAR 0 4
52064: PPUSH
52065: LD_VAR 0 4
52069: PUSH
52070: LD_INT 1
52072: PLUS
52073: PPUSH
52074: LD_VAR 0 5
52078: PUSH
52079: LD_VAR 0 6
52083: PUSH
52084: EMPTY
52085: LIST
52086: LIST
52087: PPUSH
52088: CALL_OW 1
52092: ST_TO_ADDR
// end ;
52093: GO 52017
52095: POP
52096: POP
52097: GO 51997
52099: POP
52100: POP
// end ;
52101: LD_VAR 0 4
52105: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
52106: LD_INT 0
52108: PPUSH
52109: PPUSH
52110: PPUSH
52111: PPUSH
52112: PPUSH
52113: PPUSH
52114: PPUSH
52115: PPUSH
// if not units then
52116: LD_VAR 0 1
52120: NOT
52121: IFFALSE 52125
// exit ;
52123: GO 52657
// result := UnitFilter ( units , [ f_ok ] ) ;
52125: LD_ADDR_VAR 0 3
52129: PUSH
52130: LD_VAR 0 1
52134: PPUSH
52135: LD_INT 50
52137: PUSH
52138: EMPTY
52139: LIST
52140: PPUSH
52141: CALL_OW 72
52145: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
52146: LD_ADDR_VAR 0 8
52150: PUSH
52151: LD_VAR 0 1
52155: PUSH
52156: LD_INT 1
52158: ARRAY
52159: PPUSH
52160: CALL_OW 255
52164: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
52165: LD_ADDR_VAR 0 10
52169: PUSH
52170: LD_INT 29
52172: PUSH
52173: LD_INT 91
52175: PUSH
52176: LD_INT 49
52178: PUSH
52179: EMPTY
52180: LIST
52181: LIST
52182: LIST
52183: ST_TO_ADDR
// if not result then
52184: LD_VAR 0 3
52188: NOT
52189: IFFALSE 52193
// exit ;
52191: GO 52657
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
52193: LD_ADDR_VAR 0 5
52197: PUSH
52198: LD_INT 81
52200: PUSH
52201: LD_VAR 0 8
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: PPUSH
52210: CALL_OW 69
52214: ST_TO_ADDR
// for i in result do
52215: LD_ADDR_VAR 0 4
52219: PUSH
52220: LD_VAR 0 3
52224: PUSH
52225: FOR_IN
52226: IFFALSE 52655
// begin tag := GetTag ( i ) + 1 ;
52228: LD_ADDR_VAR 0 9
52232: PUSH
52233: LD_VAR 0 4
52237: PPUSH
52238: CALL_OW 110
52242: PUSH
52243: LD_INT 1
52245: PLUS
52246: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
52247: LD_ADDR_VAR 0 7
52251: PUSH
52252: LD_VAR 0 4
52256: PPUSH
52257: CALL_OW 250
52261: PPUSH
52262: LD_VAR 0 4
52266: PPUSH
52267: CALL_OW 251
52271: PPUSH
52272: LD_INT 4
52274: PPUSH
52275: CALL 51848 0 3
52279: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
52280: LD_VAR 0 4
52284: PPUSH
52285: CALL_OW 247
52289: PUSH
52290: LD_INT 2
52292: EQUAL
52293: IFFALSE 52305
52295: PUSH
52296: LD_VAR 0 7
52300: PUSH
52301: LD_INT 2
52303: GREATER
52304: AND
52305: IFFALSE 52325
52307: PUSH
52308: LD_VAR 0 4
52312: PPUSH
52313: CALL_OW 264
52317: PUSH
52318: LD_VAR 0 10
52322: IN
52323: NOT
52324: AND
52325: IFFALSE 52364
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
52327: LD_VAR 0 4
52331: PPUSH
52332: LD_VAR 0 7
52336: PUSH
52337: LD_INT 1
52339: ARRAY
52340: PUSH
52341: LD_INT 1
52343: ARRAY
52344: PPUSH
52345: LD_VAR 0 7
52349: PUSH
52350: LD_INT 1
52352: ARRAY
52353: PUSH
52354: LD_INT 2
52356: ARRAY
52357: PPUSH
52358: CALL_OW 116
52362: GO 52653
// if path > tag then
52364: LD_VAR 0 2
52368: PUSH
52369: LD_VAR 0 9
52373: GREATER
52374: IFFALSE 52582
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
52376: LD_ADDR_VAR 0 6
52380: PUSH
52381: LD_VAR 0 5
52385: PPUSH
52386: LD_INT 91
52388: PUSH
52389: LD_VAR 0 4
52393: PUSH
52394: LD_INT 8
52396: PUSH
52397: EMPTY
52398: LIST
52399: LIST
52400: LIST
52401: PPUSH
52402: CALL_OW 72
52406: ST_TO_ADDR
// if nearEnemy then
52407: LD_VAR 0 6
52411: IFFALSE 52480
// begin if GetWeapon ( i ) = ru_time_lapser then
52413: LD_VAR 0 4
52417: PPUSH
52418: CALL_OW 264
52422: PUSH
52423: LD_INT 49
52425: EQUAL
52426: IFFALSE 52454
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
52428: LD_VAR 0 4
52432: PPUSH
52433: LD_VAR 0 6
52437: PPUSH
52438: LD_VAR 0 4
52442: PPUSH
52443: CALL_OW 74
52447: PPUSH
52448: CALL_OW 112
52452: GO 52478
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
52454: LD_VAR 0 4
52458: PPUSH
52459: LD_VAR 0 6
52463: PPUSH
52464: LD_VAR 0 4
52468: PPUSH
52469: CALL_OW 74
52473: PPUSH
52474: CALL 53738 0 2
// end else
52478: GO 52580
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
52480: LD_VAR 0 4
52484: PPUSH
52485: LD_VAR 0 2
52489: PUSH
52490: LD_VAR 0 9
52494: ARRAY
52495: PUSH
52496: LD_INT 1
52498: ARRAY
52499: PPUSH
52500: LD_VAR 0 2
52504: PUSH
52505: LD_VAR 0 9
52509: ARRAY
52510: PUSH
52511: LD_INT 2
52513: ARRAY
52514: PPUSH
52515: CALL_OW 297
52519: PUSH
52520: LD_INT 6
52522: GREATER
52523: IFFALSE 52566
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
52525: LD_VAR 0 4
52529: PPUSH
52530: LD_VAR 0 2
52534: PUSH
52535: LD_VAR 0 9
52539: ARRAY
52540: PUSH
52541: LD_INT 1
52543: ARRAY
52544: PPUSH
52545: LD_VAR 0 2
52549: PUSH
52550: LD_VAR 0 9
52554: ARRAY
52555: PUSH
52556: LD_INT 2
52558: ARRAY
52559: PPUSH
52560: CALL_OW 114
52564: GO 52580
// SetTag ( i , tag ) ;
52566: LD_VAR 0 4
52570: PPUSH
52571: LD_VAR 0 9
52575: PPUSH
52576: CALL_OW 109
// end else
52580: GO 52653
// if enemy then
52582: LD_VAR 0 5
52586: IFFALSE 52653
// begin if GetWeapon ( i ) = ru_time_lapser then
52588: LD_VAR 0 4
52592: PPUSH
52593: CALL_OW 264
52597: PUSH
52598: LD_INT 49
52600: EQUAL
52601: IFFALSE 52629
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
52603: LD_VAR 0 4
52607: PPUSH
52608: LD_VAR 0 5
52612: PPUSH
52613: LD_VAR 0 4
52617: PPUSH
52618: CALL_OW 74
52622: PPUSH
52623: CALL_OW 112
52627: GO 52653
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
52629: LD_VAR 0 4
52633: PPUSH
52634: LD_VAR 0 5
52638: PPUSH
52639: LD_VAR 0 4
52643: PPUSH
52644: CALL_OW 74
52648: PPUSH
52649: CALL 53738 0 2
// end ; end ;
52653: GO 52225
52655: POP
52656: POP
// end ;
52657: LD_VAR 0 3
52661: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
52662: LD_INT 0
52664: PPUSH
52665: PPUSH
52666: PPUSH
// if not unit or IsInUnit ( unit ) then
52667: LD_VAR 0 1
52671: NOT
52672: IFTRUE 52685
52674: PUSH
52675: LD_VAR 0 1
52679: PPUSH
52680: CALL_OW 310
52684: OR
52685: IFFALSE 52689
// exit ;
52687: GO 52780
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
52689: LD_ADDR_VAR 0 4
52693: PUSH
52694: LD_VAR 0 1
52698: PPUSH
52699: CALL_OW 250
52703: PPUSH
52704: LD_VAR 0 2
52708: PPUSH
52709: LD_INT 1
52711: PPUSH
52712: CALL_OW 272
52716: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
52717: LD_ADDR_VAR 0 5
52721: PUSH
52722: LD_VAR 0 1
52726: PPUSH
52727: CALL_OW 251
52731: PPUSH
52732: LD_VAR 0 2
52736: PPUSH
52737: LD_INT 1
52739: PPUSH
52740: CALL_OW 273
52744: ST_TO_ADDR
// if ValidHex ( x , y ) then
52745: LD_VAR 0 4
52749: PPUSH
52750: LD_VAR 0 5
52754: PPUSH
52755: CALL_OW 488
52759: IFFALSE 52780
// ComTurnXY ( unit , x , y ) ;
52761: LD_VAR 0 1
52765: PPUSH
52766: LD_VAR 0 4
52770: PPUSH
52771: LD_VAR 0 5
52775: PPUSH
52776: CALL_OW 118
// end ;
52780: LD_VAR 0 3
52784: RET
// export function SeeUnits ( side , units ) ; var i ; begin
52785: LD_INT 0
52787: PPUSH
52788: PPUSH
// result := false ;
52789: LD_ADDR_VAR 0 3
52793: PUSH
52794: LD_INT 0
52796: ST_TO_ADDR
// if not units then
52797: LD_VAR 0 2
52801: NOT
52802: IFFALSE 52806
// exit ;
52804: GO 52851
// for i in units do
52806: LD_ADDR_VAR 0 4
52810: PUSH
52811: LD_VAR 0 2
52815: PUSH
52816: FOR_IN
52817: IFFALSE 52849
// if See ( side , i ) then
52819: LD_VAR 0 1
52823: PPUSH
52824: LD_VAR 0 4
52828: PPUSH
52829: CALL_OW 292
52833: IFFALSE 52847
// begin result := true ;
52835: LD_ADDR_VAR 0 3
52839: PUSH
52840: LD_INT 1
52842: ST_TO_ADDR
// exit ;
52843: POP
52844: POP
52845: GO 52851
// end ;
52847: GO 52816
52849: POP
52850: POP
// end ;
52851: LD_VAR 0 3
52855: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
52856: LD_INT 0
52858: PPUSH
52859: PPUSH
52860: PPUSH
52861: PPUSH
// if not unit or not points then
52862: LD_VAR 0 1
52866: NOT
52867: IFTRUE 52876
52869: PUSH
52870: LD_VAR 0 2
52874: NOT
52875: OR
52876: IFFALSE 52880
// exit ;
52878: GO 52970
// dist := 99999 ;
52880: LD_ADDR_VAR 0 5
52884: PUSH
52885: LD_INT 99999
52887: ST_TO_ADDR
// for i in points do
52888: LD_ADDR_VAR 0 4
52892: PUSH
52893: LD_VAR 0 2
52897: PUSH
52898: FOR_IN
52899: IFFALSE 52968
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
52901: LD_ADDR_VAR 0 6
52905: PUSH
52906: LD_VAR 0 1
52910: PPUSH
52911: LD_VAR 0 4
52915: PUSH
52916: LD_INT 1
52918: ARRAY
52919: PPUSH
52920: LD_VAR 0 4
52924: PUSH
52925: LD_INT 2
52927: ARRAY
52928: PPUSH
52929: CALL_OW 297
52933: ST_TO_ADDR
// if tmpDist < dist then
52934: LD_VAR 0 6
52938: PUSH
52939: LD_VAR 0 5
52943: LESS
52944: IFFALSE 52966
// begin result := i ;
52946: LD_ADDR_VAR 0 3
52950: PUSH
52951: LD_VAR 0 4
52955: ST_TO_ADDR
// dist := tmpDist ;
52956: LD_ADDR_VAR 0 5
52960: PUSH
52961: LD_VAR 0 6
52965: ST_TO_ADDR
// end ; end ;
52966: GO 52898
52968: POP
52969: POP
// end ;
52970: LD_VAR 0 3
52974: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
52975: LD_INT 0
52977: PPUSH
// uc_side := side ;
52978: LD_ADDR_OWVAR 20
52982: PUSH
52983: LD_VAR 0 1
52987: ST_TO_ADDR
// uc_nation := 3 ;
52988: LD_ADDR_OWVAR 21
52992: PUSH
52993: LD_INT 3
52995: ST_TO_ADDR
// vc_chassis := 25 ;
52996: LD_ADDR_OWVAR 37
53000: PUSH
53001: LD_INT 25
53003: ST_TO_ADDR
// vc_engine := engine_siberite ;
53004: LD_ADDR_OWVAR 39
53008: PUSH
53009: LD_INT 3
53011: ST_TO_ADDR
// vc_control := control_computer ;
53012: LD_ADDR_OWVAR 38
53016: PUSH
53017: LD_INT 3
53019: ST_TO_ADDR
// vc_weapon := 59 ;
53020: LD_ADDR_OWVAR 40
53024: PUSH
53025: LD_INT 59
53027: ST_TO_ADDR
// result := CreateVehicle ;
53028: LD_ADDR_VAR 0 5
53032: PUSH
53033: CALL_OW 45
53037: ST_TO_ADDR
// SetDir ( result , d ) ;
53038: LD_VAR 0 5
53042: PPUSH
53043: LD_VAR 0 4
53047: PPUSH
53048: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
53052: LD_VAR 0 5
53056: PPUSH
53057: LD_VAR 0 2
53061: PPUSH
53062: LD_VAR 0 3
53066: PPUSH
53067: LD_INT 0
53069: PPUSH
53070: CALL_OW 48
// end ;
53074: LD_VAR 0 5
53078: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
53079: LD_INT 0
53081: PPUSH
53082: PPUSH
53083: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
53084: LD_ADDR_VAR 0 2
53088: PUSH
53089: LD_INT 0
53091: PUSH
53092: LD_INT 0
53094: PUSH
53095: LD_INT 0
53097: PUSH
53098: LD_INT 0
53100: PUSH
53101: EMPTY
53102: LIST
53103: LIST
53104: LIST
53105: LIST
53106: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
53107: LD_VAR 0 1
53111: NOT
53112: IFTRUE 53145
53114: PUSH
53115: LD_VAR 0 1
53119: PPUSH
53120: CALL_OW 264
53124: PUSH
53125: LD_INT 12
53127: PUSH
53128: LD_INT 51
53130: PUSH
53131: LD_INT 32
53133: PUSH
53134: LD_INT 89
53136: PUSH
53137: EMPTY
53138: LIST
53139: LIST
53140: LIST
53141: LIST
53142: IN
53143: NOT
53144: OR
53145: IFFALSE 53149
// exit ;
53147: GO 53247
// for i := 1 to 3 do
53149: LD_ADDR_VAR 0 3
53153: PUSH
53154: DOUBLE
53155: LD_INT 1
53157: DEC
53158: ST_TO_ADDR
53159: LD_INT 3
53161: PUSH
53162: FOR_TO
53163: IFFALSE 53245
// begin tmp := GetCargo ( cargo , i ) ;
53165: LD_ADDR_VAR 0 4
53169: PUSH
53170: LD_VAR 0 1
53174: PPUSH
53175: LD_VAR 0 3
53179: PPUSH
53180: CALL_OW 289
53184: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
53185: LD_ADDR_VAR 0 2
53189: PUSH
53190: LD_VAR 0 2
53194: PPUSH
53195: LD_VAR 0 3
53199: PPUSH
53200: LD_VAR 0 4
53204: PPUSH
53205: CALL_OW 1
53209: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
53210: LD_ADDR_VAR 0 2
53214: PUSH
53215: LD_VAR 0 2
53219: PPUSH
53220: LD_INT 4
53222: PPUSH
53223: LD_VAR 0 2
53227: PUSH
53228: LD_INT 4
53230: ARRAY
53231: PUSH
53232: LD_VAR 0 4
53236: PLUS
53237: PPUSH
53238: CALL_OW 1
53242: ST_TO_ADDR
// end ;
53243: GO 53162
53245: POP
53246: POP
// end ;
53247: LD_VAR 0 2
53251: RET
// export function Length ( array ) ; begin
53252: LD_INT 0
53254: PPUSH
// result := array + 0 ;
53255: LD_ADDR_VAR 0 2
53259: PUSH
53260: LD_VAR 0 1
53264: PUSH
53265: LD_INT 0
53267: PLUS
53268: ST_TO_ADDR
// end ;
53269: LD_VAR 0 2
53273: RET
// export function PrepareArray ( array ) ; begin
53274: LD_INT 0
53276: PPUSH
// result := array diff 0 ;
53277: LD_ADDR_VAR 0 2
53281: PUSH
53282: LD_VAR 0 1
53286: PUSH
53287: LD_INT 0
53289: DIFF
53290: ST_TO_ADDR
// if not result [ 1 ] then
53291: LD_VAR 0 2
53295: PUSH
53296: LD_INT 1
53298: ARRAY
53299: NOT
53300: IFFALSE 53320
// result := Delete ( result , 1 ) ;
53302: LD_ADDR_VAR 0 2
53306: PUSH
53307: LD_VAR 0 2
53311: PPUSH
53312: LD_INT 1
53314: PPUSH
53315: CALL_OW 3
53319: ST_TO_ADDR
// end ;
53320: LD_VAR 0 2
53324: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
53325: LD_INT 0
53327: PPUSH
53328: PPUSH
53329: PPUSH
53330: PPUSH
// sibRocketRange := 25 ;
53331: LD_ADDR_VAR 0 6
53335: PUSH
53336: LD_INT 25
53338: ST_TO_ADDR
// result := false ;
53339: LD_ADDR_VAR 0 4
53343: PUSH
53344: LD_INT 0
53346: ST_TO_ADDR
// for i := 0 to 5 do
53347: LD_ADDR_VAR 0 5
53351: PUSH
53352: DOUBLE
53353: LD_INT 0
53355: DEC
53356: ST_TO_ADDR
53357: LD_INT 5
53359: PUSH
53360: FOR_TO
53361: IFFALSE 53428
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
53363: LD_VAR 0 1
53367: PPUSH
53368: LD_VAR 0 5
53372: PPUSH
53373: LD_VAR 0 6
53377: PPUSH
53378: CALL_OW 272
53382: PPUSH
53383: LD_VAR 0 2
53387: PPUSH
53388: LD_VAR 0 5
53392: PPUSH
53393: LD_VAR 0 6
53397: PPUSH
53398: CALL_OW 273
53402: PPUSH
53403: LD_VAR 0 3
53407: PPUSH
53408: CALL_OW 309
53412: IFFALSE 53426
// begin result := true ;
53414: LD_ADDR_VAR 0 4
53418: PUSH
53419: LD_INT 1
53421: ST_TO_ADDR
// exit ;
53422: POP
53423: POP
53424: GO 53430
// end ;
53426: GO 53360
53428: POP
53429: POP
// end ;
53430: LD_VAR 0 4
53434: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
53435: LD_INT 0
53437: PPUSH
53438: PPUSH
53439: PPUSH
// if btype = b_depot then
53440: LD_VAR 0 2
53444: PUSH
53445: LD_INT 0
53447: EQUAL
53448: IFFALSE 53460
// begin result := true ;
53450: LD_ADDR_VAR 0 3
53454: PUSH
53455: LD_INT 1
53457: ST_TO_ADDR
// exit ;
53458: GO 53580
// end ; pom := GetBase ( depot ) ;
53460: LD_ADDR_VAR 0 4
53464: PUSH
53465: LD_VAR 0 1
53469: PPUSH
53470: CALL_OW 274
53474: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
53475: LD_ADDR_VAR 0 5
53479: PUSH
53480: LD_VAR 0 2
53484: PPUSH
53485: LD_VAR 0 1
53489: PPUSH
53490: CALL_OW 248
53494: PPUSH
53495: CALL_OW 450
53499: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
53500: LD_ADDR_VAR 0 3
53504: PUSH
53505: LD_VAR 0 4
53509: PPUSH
53510: LD_INT 1
53512: PPUSH
53513: CALL_OW 275
53517: PUSH
53518: LD_VAR 0 5
53522: PUSH
53523: LD_INT 1
53525: ARRAY
53526: GREATEREQUAL
53527: IFFALSE 53553
53529: PUSH
53530: LD_VAR 0 4
53534: PPUSH
53535: LD_INT 2
53537: PPUSH
53538: CALL_OW 275
53542: PUSH
53543: LD_VAR 0 5
53547: PUSH
53548: LD_INT 2
53550: ARRAY
53551: GREATEREQUAL
53552: AND
53553: IFFALSE 53579
53555: PUSH
53556: LD_VAR 0 4
53560: PPUSH
53561: LD_INT 3
53563: PPUSH
53564: CALL_OW 275
53568: PUSH
53569: LD_VAR 0 5
53573: PUSH
53574: LD_INT 3
53576: ARRAY
53577: GREATEREQUAL
53578: AND
53579: ST_TO_ADDR
// end ;
53580: LD_VAR 0 3
53584: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
53585: LD_INT 0
53587: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
53588: LD_VAR 0 1
53592: PPUSH
53593: LD_VAR 0 2
53597: PPUSH
53598: LD_INT 0
53600: PPUSH
53601: LD_INT 0
53603: PPUSH
53604: LD_INT 1
53606: PPUSH
53607: LD_INT 0
53609: PPUSH
53610: CALL_OW 587
// end ;
53614: LD_VAR 0 3
53618: RET
// export function CenterOnNow ( unit ) ; begin
53619: LD_INT 0
53621: PPUSH
// result := IsInUnit ( unit ) ;
53622: LD_ADDR_VAR 0 2
53626: PUSH
53627: LD_VAR 0 1
53631: PPUSH
53632: CALL_OW 310
53636: ST_TO_ADDR
// if not result then
53637: LD_VAR 0 2
53641: NOT
53642: IFFALSE 53654
// result := unit ;
53644: LD_ADDR_VAR 0 2
53648: PUSH
53649: LD_VAR 0 1
53653: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
53654: LD_VAR 0 1
53658: PPUSH
53659: CALL_OW 87
// end ;
53663: LD_VAR 0 2
53667: RET
// export function ComMoveHex ( unit , hex ) ; begin
53668: LD_INT 0
53670: PPUSH
// if not hex then
53671: LD_VAR 0 2
53675: NOT
53676: IFFALSE 53680
// exit ;
53678: GO 53733
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
53680: LD_VAR 0 2
53684: PUSH
53685: LD_INT 1
53687: ARRAY
53688: PPUSH
53689: LD_VAR 0 2
53693: PUSH
53694: LD_INT 2
53696: ARRAY
53697: PPUSH
53698: CALL_OW 428
53702: IFFALSE 53706
// exit ;
53704: GO 53733
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
53706: LD_VAR 0 1
53710: PPUSH
53711: LD_VAR 0 2
53715: PUSH
53716: LD_INT 1
53718: ARRAY
53719: PPUSH
53720: LD_VAR 0 2
53724: PUSH
53725: LD_INT 2
53727: ARRAY
53728: PPUSH
53729: CALL_OW 111
// end ;
53733: LD_VAR 0 3
53737: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
53738: LD_INT 0
53740: PPUSH
53741: PPUSH
53742: PPUSH
// if not unit or not enemy then
53743: LD_VAR 0 1
53747: NOT
53748: IFTRUE 53757
53750: PUSH
53751: LD_VAR 0 2
53755: NOT
53756: OR
53757: IFFALSE 53761
// exit ;
53759: GO 53887
// x := GetX ( enemy ) ;
53761: LD_ADDR_VAR 0 4
53765: PUSH
53766: LD_VAR 0 2
53770: PPUSH
53771: CALL_OW 250
53775: ST_TO_ADDR
// y := GetY ( enemy ) ;
53776: LD_ADDR_VAR 0 5
53780: PUSH
53781: LD_VAR 0 2
53785: PPUSH
53786: CALL_OW 251
53790: ST_TO_ADDR
// if ValidHex ( x , y ) then
53791: LD_VAR 0 4
53795: PPUSH
53796: LD_VAR 0 5
53800: PPUSH
53801: CALL_OW 488
53805: IFFALSE 53887
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
53807: LD_VAR 0 2
53811: PPUSH
53812: CALL_OW 247
53816: PUSH
53817: LD_INT 3
53819: PUSH
53820: LD_INT 2
53822: PUSH
53823: EMPTY
53824: LIST
53825: LIST
53826: IN
53827: IFTRUE 53850
53829: PUSH
53830: LD_VAR 0 1
53834: PPUSH
53835: CALL_OW 255
53839: PPUSH
53840: LD_VAR 0 2
53844: PPUSH
53845: CALL_OW 292
53849: OR
53850: IFFALSE 53868
// ComAttackUnit ( unit , enemy ) else
53852: LD_VAR 0 1
53856: PPUSH
53857: LD_VAR 0 2
53861: PPUSH
53862: CALL_OW 115
53866: GO 53887
// ComAgressiveMove ( unit , x , y ) ;
53868: LD_VAR 0 1
53872: PPUSH
53873: LD_VAR 0 4
53877: PPUSH
53878: LD_VAR 0 5
53882: PPUSH
53883: CALL_OW 114
// end ;
53887: LD_VAR 0 3
53891: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
53892: LD_INT 0
53894: PPUSH
53895: PPUSH
53896: PPUSH
// list := AreaToList ( area , 0 ) ;
53897: LD_ADDR_VAR 0 5
53901: PUSH
53902: LD_VAR 0 1
53906: PPUSH
53907: LD_INT 0
53909: PPUSH
53910: CALL_OW 517
53914: ST_TO_ADDR
// if not list then
53915: LD_VAR 0 5
53919: NOT
53920: IFFALSE 53924
// exit ;
53922: GO 54054
// if all then
53924: LD_VAR 0 2
53928: IFFALSE 54016
// begin for i := 1 to list [ 1 ] do
53930: LD_ADDR_VAR 0 4
53934: PUSH
53935: DOUBLE
53936: LD_INT 1
53938: DEC
53939: ST_TO_ADDR
53940: LD_VAR 0 5
53944: PUSH
53945: LD_INT 1
53947: ARRAY
53948: PUSH
53949: FOR_TO
53950: IFFALSE 54012
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
53952: LD_ADDR_VAR 0 3
53956: PUSH
53957: LD_VAR 0 3
53961: PPUSH
53962: LD_VAR 0 3
53966: PUSH
53967: LD_INT 1
53969: PLUS
53970: PPUSH
53971: LD_VAR 0 5
53975: PUSH
53976: LD_INT 1
53978: ARRAY
53979: PUSH
53980: LD_VAR 0 4
53984: ARRAY
53985: PUSH
53986: LD_VAR 0 5
53990: PUSH
53991: LD_INT 2
53993: ARRAY
53994: PUSH
53995: LD_VAR 0 4
53999: ARRAY
54000: PUSH
54001: EMPTY
54002: LIST
54003: LIST
54004: PPUSH
54005: CALL_OW 1
54009: ST_TO_ADDR
54010: GO 53949
54012: POP
54013: POP
// exit ;
54014: GO 54054
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
54016: LD_ADDR_VAR 0 3
54020: PUSH
54021: LD_VAR 0 5
54025: PUSH
54026: LD_INT 1
54028: ARRAY
54029: PUSH
54030: LD_INT 1
54032: ARRAY
54033: PUSH
54034: LD_VAR 0 5
54038: PUSH
54039: LD_INT 2
54041: ARRAY
54042: PUSH
54043: LD_INT 1
54045: ARRAY
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: PUSH
54051: EMPTY
54052: LIST
54053: ST_TO_ADDR
// end ;
54054: LD_VAR 0 3
54058: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
54059: LD_INT 0
54061: PPUSH
54062: PPUSH
// list := AreaToList ( area , 0 ) ;
54063: LD_ADDR_VAR 0 4
54067: PUSH
54068: LD_VAR 0 1
54072: PPUSH
54073: LD_INT 0
54075: PPUSH
54076: CALL_OW 517
54080: ST_TO_ADDR
// if not list then
54081: LD_VAR 0 4
54085: NOT
54086: IFFALSE 54090
// exit ;
54088: GO 54131
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
54090: LD_ADDR_VAR 0 3
54094: PUSH
54095: LD_VAR 0 4
54099: PUSH
54100: LD_INT 1
54102: ARRAY
54103: PUSH
54104: LD_INT 1
54106: ARRAY
54107: PUSH
54108: LD_VAR 0 4
54112: PUSH
54113: LD_INT 2
54115: ARRAY
54116: PUSH
54117: LD_INT 1
54119: ARRAY
54120: PUSH
54121: LD_VAR 0 2
54125: PUSH
54126: EMPTY
54127: LIST
54128: LIST
54129: LIST
54130: ST_TO_ADDR
// end ;
54131: LD_VAR 0 3
54135: RET
// export function First ( array ) ; begin
54136: LD_INT 0
54138: PPUSH
// if not array then
54139: LD_VAR 0 1
54143: NOT
54144: IFFALSE 54148
// exit ;
54146: GO 54162
// result := array [ 1 ] ;
54148: LD_ADDR_VAR 0 2
54152: PUSH
54153: LD_VAR 0 1
54157: PUSH
54158: LD_INT 1
54160: ARRAY
54161: ST_TO_ADDR
// end ;
54162: LD_VAR 0 2
54166: RET
// export function Last ( array ) ; begin
54167: LD_INT 0
54169: PPUSH
// if not array then
54170: LD_VAR 0 1
54174: NOT
54175: IFFALSE 54179
// exit ;
54177: GO 54195
// result := array [ array ] ;
54179: LD_ADDR_VAR 0 2
54183: PUSH
54184: LD_VAR 0 1
54188: PUSH
54189: LD_VAR 0 1
54193: ARRAY
54194: ST_TO_ADDR
// end ;
54195: LD_VAR 0 2
54199: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
54200: LD_INT 0
54202: PPUSH
54203: PPUSH
// result := [ ] ;
54204: LD_ADDR_VAR 0 5
54208: PUSH
54209: EMPTY
54210: ST_TO_ADDR
// if not array then
54211: LD_VAR 0 1
54215: NOT
54216: IFFALSE 54220
// exit ;
54218: GO 54332
// for i := 1 to array do
54220: LD_ADDR_VAR 0 6
54224: PUSH
54225: DOUBLE
54226: LD_INT 1
54228: DEC
54229: ST_TO_ADDR
54230: LD_VAR 0 1
54234: PUSH
54235: FOR_TO
54236: IFFALSE 54330
// if array [ i ] [ index ] = value then
54238: LD_VAR 0 1
54242: PUSH
54243: LD_VAR 0 6
54247: ARRAY
54248: PUSH
54249: LD_VAR 0 2
54253: ARRAY
54254: PUSH
54255: LD_VAR 0 3
54259: EQUAL
54260: IFFALSE 54328
// begin if indexColumn then
54262: LD_VAR 0 4
54266: IFFALSE 54302
// result := Join ( result , array [ i ] [ indexColumn ] ) else
54268: LD_ADDR_VAR 0 5
54272: PUSH
54273: LD_VAR 0 5
54277: PPUSH
54278: LD_VAR 0 1
54282: PUSH
54283: LD_VAR 0 6
54287: ARRAY
54288: PUSH
54289: LD_VAR 0 4
54293: ARRAY
54294: PPUSH
54295: CALL 49340 0 2
54299: ST_TO_ADDR
54300: GO 54328
// result := Join ( result , array [ i ] ) ;
54302: LD_ADDR_VAR 0 5
54306: PUSH
54307: LD_VAR 0 5
54311: PPUSH
54312: LD_VAR 0 1
54316: PUSH
54317: LD_VAR 0 6
54321: ARRAY
54322: PPUSH
54323: CALL 49340 0 2
54327: ST_TO_ADDR
// end ;
54328: GO 54235
54330: POP
54331: POP
// end ;
54332: LD_VAR 0 5
54336: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
54337: LD_INT 0
54339: PPUSH
// if not vehicles or not parkingPoint then
54340: LD_VAR 0 1
54344: NOT
54345: IFTRUE 54354
54347: PUSH
54348: LD_VAR 0 2
54352: NOT
54353: OR
54354: IFFALSE 54358
// exit ;
54356: GO 54456
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
54358: LD_ADDR_VAR 0 1
54362: PUSH
54363: LD_VAR 0 1
54367: PPUSH
54368: LD_INT 50
54370: PUSH
54371: EMPTY
54372: LIST
54373: PUSH
54374: LD_INT 3
54376: PUSH
54377: LD_INT 92
54379: PUSH
54380: LD_VAR 0 2
54384: PUSH
54385: LD_INT 1
54387: ARRAY
54388: PUSH
54389: LD_VAR 0 2
54393: PUSH
54394: LD_INT 2
54396: ARRAY
54397: PUSH
54398: LD_INT 8
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: LIST
54405: LIST
54406: PUSH
54407: EMPTY
54408: LIST
54409: LIST
54410: PUSH
54411: EMPTY
54412: LIST
54413: LIST
54414: PPUSH
54415: CALL_OW 72
54419: ST_TO_ADDR
// if not vehicles then
54420: LD_VAR 0 1
54424: NOT
54425: IFFALSE 54429
// exit ;
54427: GO 54456
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
54429: LD_VAR 0 1
54433: PPUSH
54434: LD_VAR 0 2
54438: PUSH
54439: LD_INT 1
54441: ARRAY
54442: PPUSH
54443: LD_VAR 0 2
54447: PUSH
54448: LD_INT 2
54450: ARRAY
54451: PPUSH
54452: CALL_OW 111
// end ;
54456: LD_VAR 0 3
54460: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
54461: LD_INT 0
54463: PPUSH
54464: PPUSH
54465: PPUSH
// if not side or not area then
54466: LD_VAR 0 1
54470: NOT
54471: IFTRUE 54480
54473: PUSH
54474: LD_VAR 0 2
54478: NOT
54479: OR
54480: IFFALSE 54484
// exit ;
54482: GO 54603
// tmp := AreaToList ( area , 0 ) ;
54484: LD_ADDR_VAR 0 5
54488: PUSH
54489: LD_VAR 0 2
54493: PPUSH
54494: LD_INT 0
54496: PPUSH
54497: CALL_OW 517
54501: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
54502: LD_ADDR_VAR 0 4
54506: PUSH
54507: DOUBLE
54508: LD_INT 1
54510: DEC
54511: ST_TO_ADDR
54512: LD_VAR 0 5
54516: PUSH
54517: LD_INT 1
54519: ARRAY
54520: PUSH
54521: FOR_TO
54522: IFFALSE 54601
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
54524: LD_VAR 0 5
54528: PUSH
54529: LD_INT 1
54531: ARRAY
54532: PUSH
54533: LD_VAR 0 4
54537: ARRAY
54538: PPUSH
54539: LD_VAR 0 5
54543: PUSH
54544: LD_INT 2
54546: ARRAY
54547: PUSH
54548: LD_VAR 0 4
54552: ARRAY
54553: PPUSH
54554: CALL_OW 351
54558: IFFALSE 54599
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
54560: LD_VAR 0 5
54564: PUSH
54565: LD_INT 1
54567: ARRAY
54568: PUSH
54569: LD_VAR 0 4
54573: ARRAY
54574: PPUSH
54575: LD_VAR 0 5
54579: PUSH
54580: LD_INT 2
54582: ARRAY
54583: PUSH
54584: LD_VAR 0 4
54588: ARRAY
54589: PPUSH
54590: LD_VAR 0 1
54594: PPUSH
54595: CALL_OW 244
// end ;
54599: GO 54521
54601: POP
54602: POP
// end ;
54603: LD_VAR 0 3
54607: RET
// export function UniqueArray ( array ) ; var i ; begin
54608: LD_INT 0
54610: PPUSH
54611: PPUSH
// result := [ ] ;
54612: LD_ADDR_VAR 0 2
54616: PUSH
54617: EMPTY
54618: ST_TO_ADDR
// if not array then
54619: LD_VAR 0 1
54623: NOT
54624: IFFALSE 54628
// exit ;
54626: GO 54689
// for i := 1 to array do
54628: LD_ADDR_VAR 0 3
54632: PUSH
54633: DOUBLE
54634: LD_INT 1
54636: DEC
54637: ST_TO_ADDR
54638: LD_VAR 0 1
54642: PUSH
54643: FOR_TO
54644: IFFALSE 54687
// if not array [ i ] in result then
54646: LD_VAR 0 1
54650: PUSH
54651: LD_VAR 0 3
54655: ARRAY
54656: PUSH
54657: LD_VAR 0 2
54661: IN
54662: NOT
54663: IFFALSE 54685
// result := Join ( result , i ) ;
54665: LD_ADDR_VAR 0 2
54669: PUSH
54670: LD_VAR 0 2
54674: PPUSH
54675: LD_VAR 0 3
54679: PPUSH
54680: CALL 49340 0 2
54684: ST_TO_ADDR
54685: GO 54643
54687: POP
54688: POP
// end ; end_of_file
54689: LD_VAR 0 2
54693: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
54694: LD_VAR 0 1
54698: PUSH
54699: LD_INT 200
54701: DOUBLE
54702: GREATEREQUAL
54703: IFFALSE 54711
54705: LD_INT 299
54707: DOUBLE
54708: LESSEQUAL
54709: IFTRUE 54713
54711: GO 54745
54713: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
54714: LD_VAR 0 1
54718: PPUSH
54719: LD_VAR 0 2
54723: PPUSH
54724: LD_VAR 0 3
54728: PPUSH
54729: LD_VAR 0 4
54733: PPUSH
54734: LD_VAR 0 5
54738: PPUSH
54739: CALL 55607 0 5
54743: GO 54822
54745: LD_INT 300
54747: DOUBLE
54748: GREATEREQUAL
54749: IFFALSE 54757
54751: LD_INT 399
54753: DOUBLE
54754: LESSEQUAL
54755: IFTRUE 54759
54757: GO 54821
54759: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
54760: LD_VAR 0 1
54764: PPUSH
54765: LD_VAR 0 2
54769: PPUSH
54770: LD_VAR 0 3
54774: PPUSH
54775: LD_VAR 0 4
54779: PPUSH
54780: LD_VAR 0 5
54784: PPUSH
54785: LD_VAR 0 6
54789: PPUSH
54790: LD_VAR 0 7
54794: PPUSH
54795: LD_VAR 0 8
54799: PPUSH
54800: LD_VAR 0 9
54804: PPUSH
54805: LD_VAR 0 10
54809: PPUSH
54810: LD_VAR 0 11
54814: PPUSH
54815: CALL 63716 0 11
54819: GO 54822
54821: POP
// end ;
54822: PPOPN 11
54824: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
54825: LD_VAR 0 1
54829: PPUSH
54830: LD_VAR 0 2
54834: PPUSH
54835: LD_VAR 0 3
54839: PPUSH
54840: LD_VAR 0 4
54844: PPUSH
54845: LD_VAR 0 5
54849: PPUSH
54850: CALL 54907 0 5
// end ; end_of_file
54854: PPOPN 5
54856: END
// export function SOS_UnitDestroyed ( un ) ; begin
54857: LD_INT 0
54859: PPUSH
// ComRadiation ( un ) ;
54860: LD_VAR 0 1
54864: PPUSH
54865: CALL 56027 0 1
// end ;
54869: LD_VAR 0 2
54873: RET
// export function SOS_UnitKamikazed ( un ) ; begin
54874: LD_INT 0
54876: PPUSH
// ComRadiation ( un ) ;
54877: LD_VAR 0 1
54881: PPUSH
54882: CALL 56027 0 1
// end ;
54886: LD_VAR 0 2
54890: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
54891: LD_INT 0
54893: PPUSH
// end ;
54894: LD_VAR 0 4
54898: RET
// export function SOS_Command ( cmd ) ; begin
54899: LD_INT 0
54901: PPUSH
// end ;
54902: LD_VAR 0 2
54906: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
54907: LD_INT 0
54909: PPUSH
// end ;
54910: LD_VAR 0 6
54914: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
54915: LD_INT 0
54917: PPUSH
54918: PPUSH
54919: PPUSH
54920: PPUSH
54921: PPUSH
// if not vehicle or not factory then
54922: LD_VAR 0 1
54926: NOT
54927: IFTRUE 54936
54929: PUSH
54930: LD_VAR 0 2
54934: NOT
54935: OR
54936: IFFALSE 54940
// exit ;
54938: GO 55602
// weapon := GetWeapon ( vehicle ) ;
54940: LD_ADDR_VAR 0 7
54944: PUSH
54945: LD_VAR 0 1
54949: PPUSH
54950: CALL_OW 264
54954: ST_TO_ADDR
// if weapon = ar_miner then
54955: LD_VAR 0 7
54959: PUSH
54960: LD_INT 81
54962: EQUAL
54963: IFFALSE 55020
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
54965: LD_ADDR_EXP 57
54969: PUSH
54970: LD_EXP 57
54974: PPUSH
54975: LD_EXP 57
54979: PUSH
54980: LD_INT 1
54982: PLUS
54983: PPUSH
54984: LD_VAR 0 1
54988: PPUSH
54989: CALL_OW 1
54993: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
54994: LD_ADDR_EXP 58
54998: PUSH
54999: LD_EXP 58
55003: PPUSH
55004: LD_EXP 58
55008: PUSH
55009: LD_INT 1
55011: PLUS
55012: PPUSH
55013: EMPTY
55014: PPUSH
55015: CALL_OW 1
55019: ST_TO_ADDR
// end ; if not factoryWaypoints then
55020: LD_EXP 61
55024: NOT
55025: IFFALSE 55029
// exit ;
55027: GO 55602
// for i := 1 to Count ( factoryWaypoints ) do
55029: LD_ADDR_VAR 0 4
55033: PUSH
55034: DOUBLE
55035: LD_INT 1
55037: DEC
55038: ST_TO_ADDR
55039: LD_EXP 61
55043: PPUSH
55044: CALL 13364 0 1
55048: PUSH
55049: FOR_TO
55050: IFFALSE 55600
// if factoryWaypoints [ i ] [ 2 ] = factory then
55052: LD_EXP 61
55056: PUSH
55057: LD_VAR 0 4
55061: ARRAY
55062: PUSH
55063: LD_INT 2
55065: ARRAY
55066: PUSH
55067: LD_VAR 0 2
55071: EQUAL
55072: IFFALSE 55598
// begin if GetControl ( vehicle ) = control_manual then
55074: LD_VAR 0 1
55078: PPUSH
55079: CALL_OW 263
55083: PUSH
55084: LD_INT 1
55086: EQUAL
55087: IFFALSE 55451
// begin driver := IsDrivenBy ( vehicle ) ;
55089: LD_ADDR_VAR 0 5
55093: PUSH
55094: LD_VAR 0 1
55098: PPUSH
55099: CALL_OW 311
55103: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
55104: LD_VAR 0 5
55108: PUSH
55109: LD_EXP 62
55113: IN
55114: IFTRUE 55128
55116: PUSH
55117: LD_VAR 0 1
55121: PUSH
55122: LD_EXP 62
55126: IN
55127: OR
55128: IFFALSE 55134
// exit ;
55130: POP
55131: POP
55132: GO 55602
// if not HasTask ( driver ) then
55134: LD_VAR 0 5
55138: PPUSH
55139: CALL_OW 314
55143: NOT
55144: IFFALSE 55449
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
55146: LD_ADDR_EXP 62
55150: PUSH
55151: LD_EXP 62
55155: PPUSH
55156: LD_VAR 0 5
55160: PPUSH
55161: CALL 49340 0 2
55165: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
55166: LD_ADDR_EXP 62
55170: PUSH
55171: LD_EXP 62
55175: PPUSH
55176: LD_VAR 0 1
55180: PPUSH
55181: CALL 49340 0 2
55185: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
55186: LD_ADDR_VAR 0 6
55190: PUSH
55191: LD_EXP 61
55195: PUSH
55196: LD_VAR 0 4
55200: ARRAY
55201: PUSH
55202: LD_INT 3
55204: ARRAY
55205: PPUSH
55206: LD_EXP 61
55210: PUSH
55211: LD_VAR 0 4
55215: ARRAY
55216: PUSH
55217: LD_INT 4
55219: ARRAY
55220: PPUSH
55221: CALL_OW 428
55225: ST_TO_ADDR
// if hex then
55226: LD_VAR 0 6
55230: IFFALSE 55248
// ComMoveUnit ( driver , hex ) else
55232: LD_VAR 0 5
55236: PPUSH
55237: LD_VAR 0 6
55241: PPUSH
55242: CALL_OW 112
55246: GO 55332
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
55248: LD_VAR 0 1
55252: PPUSH
55253: LD_EXP 61
55257: PUSH
55258: LD_VAR 0 4
55262: ARRAY
55263: PUSH
55264: LD_INT 3
55266: ARRAY
55267: PPUSH
55268: LD_EXP 61
55272: PUSH
55273: LD_VAR 0 4
55277: ARRAY
55278: PUSH
55279: LD_INT 4
55281: ARRAY
55282: PPUSH
55283: CALL_OW 297
55287: PUSH
55288: LD_INT 0
55290: GREATER
55291: IFFALSE 55332
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
55293: LD_VAR 0 5
55297: PPUSH
55298: LD_EXP 61
55302: PUSH
55303: LD_VAR 0 4
55307: ARRAY
55308: PUSH
55309: LD_INT 3
55311: ARRAY
55312: PPUSH
55313: LD_EXP 61
55317: PUSH
55318: LD_VAR 0 4
55322: ARRAY
55323: PUSH
55324: LD_INT 4
55326: ARRAY
55327: PPUSH
55328: CALL_OW 111
// AddComExitVehicle ( driver ) ;
55332: LD_VAR 0 5
55336: PPUSH
55337: CALL_OW 181
// if Multiplayer then
55341: LD_OWVAR 4
55345: IFFALSE 55394
// begin repeat wait ( 10 ) ;
55347: LD_INT 10
55349: PPUSH
55350: CALL_OW 67
// until not IsInUnit ( driver ) ;
55354: LD_VAR 0 5
55358: PPUSH
55359: CALL_OW 310
55363: NOT
55364: IFFALSE 55347
// if not HasTask ( driver ) then
55366: LD_VAR 0 5
55370: PPUSH
55371: CALL_OW 314
55375: NOT
55376: IFFALSE 55392
// ComEnterUnit ( driver , factory ) ;
55378: LD_VAR 0 5
55382: PPUSH
55383: LD_VAR 0 2
55387: PPUSH
55388: CALL_OW 120
// end else
55392: GO 55408
// AddComEnterUnit ( driver , factory ) ;
55394: LD_VAR 0 5
55398: PPUSH
55399: LD_VAR 0 2
55403: PPUSH
55404: CALL_OW 180
// wait ( 0 0$1 ) ;
55408: LD_INT 35
55410: PPUSH
55411: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
55415: LD_ADDR_EXP 62
55419: PUSH
55420: LD_EXP 62
55424: PUSH
55425: LD_VAR 0 5
55429: DIFF
55430: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
55431: LD_ADDR_EXP 62
55435: PUSH
55436: LD_EXP 62
55440: PUSH
55441: LD_VAR 0 1
55445: DIFF
55446: ST_TO_ADDR
// break ;
55447: GO 55600
// end ; end else
55449: GO 55598
// if GetControl ( vehicle ) = control_remote then
55451: LD_VAR 0 1
55455: PPUSH
55456: CALL_OW 263
55460: PUSH
55461: LD_INT 2
55463: EQUAL
55464: IFFALSE 55550
// begin wait ( 0 0$2 ) ;
55466: LD_INT 70
55468: PPUSH
55469: CALL_OW 67
// repeat wait ( 10 ) ;
55473: LD_INT 10
55475: PPUSH
55476: CALL_OW 67
// Connect ( vehicle ) ;
55480: LD_VAR 0 1
55484: PPUSH
55485: CALL 19642 0 1
// until IsControledBy ( vehicle ) ;
55489: LD_VAR 0 1
55493: PPUSH
55494: CALL_OW 312
55498: IFFALSE 55473
// wait ( 10 ) ;
55500: LD_INT 10
55502: PPUSH
55503: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
55507: LD_VAR 0 1
55511: PPUSH
55512: LD_EXP 61
55516: PUSH
55517: LD_VAR 0 4
55521: ARRAY
55522: PUSH
55523: LD_INT 3
55525: ARRAY
55526: PPUSH
55527: LD_EXP 61
55531: PUSH
55532: LD_VAR 0 4
55536: ARRAY
55537: PUSH
55538: LD_INT 4
55540: ARRAY
55541: PPUSH
55542: CALL_OW 111
// break ;
55546: GO 55600
// end else
55548: GO 55598
// begin wait ( 0 0$3 ) ;
55550: LD_INT 105
55552: PPUSH
55553: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
55557: LD_VAR 0 1
55561: PPUSH
55562: LD_EXP 61
55566: PUSH
55567: LD_VAR 0 4
55571: ARRAY
55572: PUSH
55573: LD_INT 3
55575: ARRAY
55576: PPUSH
55577: LD_EXP 61
55581: PUSH
55582: LD_VAR 0 4
55586: ARRAY
55587: PUSH
55588: LD_INT 4
55590: ARRAY
55591: PPUSH
55592: CALL_OW 111
// break ;
55596: GO 55600
// end ; end ;
55598: GO 55049
55600: POP
55601: POP
// end ;
55602: LD_VAR 0 3
55606: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
55607: LD_INT 0
55609: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
55610: LD_VAR 0 1
55614: PUSH
55615: LD_INT 250
55617: EQUAL
55618: IFFALSE 55635
55620: PUSH
55621: LD_VAR 0 2
55625: PPUSH
55626: CALL_OW 264
55630: PUSH
55631: LD_INT 81
55633: EQUAL
55634: AND
55635: IFFALSE 55656
// MinerPlaceMine ( unit , x , y ) ;
55637: LD_VAR 0 2
55641: PPUSH
55642: LD_VAR 0 4
55646: PPUSH
55647: LD_VAR 0 5
55651: PPUSH
55652: CALL 59002 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
55656: LD_VAR 0 1
55660: PUSH
55661: LD_INT 251
55663: EQUAL
55664: IFFALSE 55681
55666: PUSH
55667: LD_VAR 0 2
55671: PPUSH
55672: CALL_OW 264
55676: PUSH
55677: LD_INT 81
55679: EQUAL
55680: AND
55681: IFFALSE 55702
// MinerDetonateMine ( unit , x , y ) ;
55683: LD_VAR 0 2
55687: PPUSH
55688: LD_VAR 0 4
55692: PPUSH
55693: LD_VAR 0 5
55697: PPUSH
55698: CALL 59409 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
55702: LD_VAR 0 1
55706: PUSH
55707: LD_INT 252
55709: EQUAL
55710: IFFALSE 55727
55712: PUSH
55713: LD_VAR 0 2
55717: PPUSH
55718: CALL_OW 264
55722: PUSH
55723: LD_INT 81
55725: EQUAL
55726: AND
55727: IFFALSE 55748
// MinerCreateMinefield ( unit , x , y ) ;
55729: LD_VAR 0 2
55733: PPUSH
55734: LD_VAR 0 4
55738: PPUSH
55739: LD_VAR 0 5
55743: PPUSH
55744: CALL 59641 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
55748: LD_VAR 0 1
55752: PUSH
55753: LD_INT 253
55755: EQUAL
55756: IFFALSE 55773
55758: PUSH
55759: LD_VAR 0 2
55763: PPUSH
55764: CALL_OW 257
55768: PUSH
55769: LD_INT 5
55771: EQUAL
55772: AND
55773: IFFALSE 55794
// ComBinocular ( unit , x , y ) ;
55775: LD_VAR 0 2
55779: PPUSH
55780: LD_VAR 0 4
55784: PPUSH
55785: LD_VAR 0 5
55789: PPUSH
55790: CALL 60016 0 3
// if selectedUnit then
55794: LD_VAR 0 3
55798: IFFALSE 55858
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
55800: LD_VAR 0 1
55804: PUSH
55805: LD_INT 254
55807: EQUAL
55808: IFFALSE 55825
55810: PUSH
55811: LD_VAR 0 2
55815: PPUSH
55816: CALL_OW 264
55820: PUSH
55821: LD_INT 99
55823: EQUAL
55824: AND
55825: IFFALSE 55842
55827: PUSH
55828: LD_VAR 0 3
55832: PPUSH
55833: CALL_OW 263
55837: PUSH
55838: LD_INT 3
55840: EQUAL
55841: AND
55842: IFFALSE 55858
// HackDestroyVehicle ( unit , selectedUnit ) ;
55844: LD_VAR 0 2
55848: PPUSH
55849: LD_VAR 0 3
55853: PPUSH
55854: CALL 58192 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
55858: LD_VAR 0 1
55862: PUSH
55863: LD_INT 255
55865: EQUAL
55866: IFFALSE 55890
55868: PUSH
55869: LD_VAR 0 2
55873: PPUSH
55874: CALL_OW 264
55878: PUSH
55879: LD_INT 14
55881: PUSH
55882: LD_INT 53
55884: PUSH
55885: EMPTY
55886: LIST
55887: LIST
55888: IN
55889: AND
55890: IFFALSE 55908
55892: PUSH
55893: LD_VAR 0 4
55897: PPUSH
55898: LD_VAR 0 5
55902: PPUSH
55903: CALL_OW 488
55907: AND
55908: IFFALSE 55932
// CutTreeXYR ( unit , x , y , 12 ) ;
55910: LD_VAR 0 2
55914: PPUSH
55915: LD_VAR 0 4
55919: PPUSH
55920: LD_VAR 0 5
55924: PPUSH
55925: LD_INT 12
55927: PPUSH
55928: CALL 56123 0 4
// if cmd = 256 then
55932: LD_VAR 0 1
55936: PUSH
55937: LD_INT 256
55939: EQUAL
55940: IFFALSE 55961
// SetFactoryWaypoint ( unit , x , y ) ;
55942: LD_VAR 0 2
55946: PPUSH
55947: LD_VAR 0 4
55951: PPUSH
55952: LD_VAR 0 5
55956: PPUSH
55957: CALL 63724 0 3
// if cmd = 257 then
55961: LD_VAR 0 1
55965: PUSH
55966: LD_INT 257
55968: EQUAL
55969: IFFALSE 55990
// SetWarehouseGatheringPoint ( unit , x , y ) ;
55971: LD_VAR 0 2
55975: PPUSH
55976: LD_VAR 0 4
55980: PPUSH
55981: LD_VAR 0 5
55985: PPUSH
55986: CALL 64220 0 3
// if cmd = 258 then
55990: LD_VAR 0 1
55994: PUSH
55995: LD_INT 258
55997: EQUAL
55998: IFFALSE 56022
// BurnTreeXYR ( unit , x , y , 8 ) ;
56000: LD_VAR 0 2
56004: PPUSH
56005: LD_VAR 0 4
56009: PPUSH
56010: LD_VAR 0 5
56014: PPUSH
56015: LD_INT 8
56017: PPUSH
56018: CALL 56545 0 4
// end ;
56022: LD_VAR 0 6
56026: RET
// export function ComRadiation ( un ) ; var eff ; begin
56027: LD_INT 0
56029: PPUSH
56030: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
56031: LD_VAR 0 1
56035: PPUSH
56036: CALL_OW 264
56040: PUSH
56041: LD_INT 91
56043: NONEQUAL
56044: IFFALSE 56048
// exit ;
56046: GO 56118
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
56048: LD_INT 68
56050: PPUSH
56051: LD_VAR 0 1
56055: PPUSH
56056: CALL_OW 255
56060: PPUSH
56061: CALL_OW 321
56065: PUSH
56066: LD_INT 2
56068: EQUAL
56069: IFFALSE 56081
// eff := 50 else
56071: LD_ADDR_VAR 0 3
56075: PUSH
56076: LD_INT 50
56078: ST_TO_ADDR
56079: GO 56089
// eff := 25 ;
56081: LD_ADDR_VAR 0 3
56085: PUSH
56086: LD_INT 25
56088: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
56089: LD_VAR 0 1
56093: PPUSH
56094: CALL_OW 250
56098: PPUSH
56099: LD_VAR 0 1
56103: PPUSH
56104: CALL_OW 251
56108: PPUSH
56109: LD_VAR 0 3
56113: PPUSH
56114: CALL_OW 495
// end ;
56118: LD_VAR 0 2
56122: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
56123: LD_INT 0
56125: PPUSH
56126: PPUSH
56127: PPUSH
56128: PPUSH
56129: PPUSH
56130: PPUSH
56131: PPUSH
56132: PPUSH
56133: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
56134: LD_VAR 0 1
56138: PPUSH
56139: CALL_OW 302
56143: NOT
56144: IFTRUE 56163
56146: PUSH
56147: LD_VAR 0 2
56151: PPUSH
56152: LD_VAR 0 3
56156: PPUSH
56157: CALL_OW 488
56161: NOT
56162: OR
56163: IFTRUE 56172
56165: PUSH
56166: LD_VAR 0 4
56170: NOT
56171: OR
56172: IFFALSE 56176
// exit ;
56174: GO 56540
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
56176: LD_VAR 0 1
56180: PPUSH
56181: CALL_OW 437
56185: PPUSH
56186: CALL 13364 0 1
56190: PUSH
56191: LD_INT 10
56193: GREATER
56194: IFFALSE 56198
// exit ;
56196: GO 56540
// list := [ ] ;
56198: LD_ADDR_VAR 0 13
56202: PUSH
56203: EMPTY
56204: ST_TO_ADDR
// if x - r < 0 then
56205: LD_VAR 0 2
56209: PUSH
56210: LD_VAR 0 4
56214: MINUS
56215: PUSH
56216: LD_INT 0
56218: LESS
56219: IFFALSE 56231
// min_x := 0 else
56221: LD_ADDR_VAR 0 7
56225: PUSH
56226: LD_INT 0
56228: ST_TO_ADDR
56229: GO 56247
// min_x := x - r ;
56231: LD_ADDR_VAR 0 7
56235: PUSH
56236: LD_VAR 0 2
56240: PUSH
56241: LD_VAR 0 4
56245: MINUS
56246: ST_TO_ADDR
// if y - r < 0 then
56247: LD_VAR 0 3
56251: PUSH
56252: LD_VAR 0 4
56256: MINUS
56257: PUSH
56258: LD_INT 0
56260: LESS
56261: IFFALSE 56273
// min_y := 0 else
56263: LD_ADDR_VAR 0 8
56267: PUSH
56268: LD_INT 0
56270: ST_TO_ADDR
56271: GO 56289
// min_y := y - r ;
56273: LD_ADDR_VAR 0 8
56277: PUSH
56278: LD_VAR 0 3
56282: PUSH
56283: LD_VAR 0 4
56287: MINUS
56288: ST_TO_ADDR
// max_x := x + r ;
56289: LD_ADDR_VAR 0 9
56293: PUSH
56294: LD_VAR 0 2
56298: PUSH
56299: LD_VAR 0 4
56303: PLUS
56304: ST_TO_ADDR
// max_y := y + r ;
56305: LD_ADDR_VAR 0 10
56309: PUSH
56310: LD_VAR 0 3
56314: PUSH
56315: LD_VAR 0 4
56319: PLUS
56320: ST_TO_ADDR
// for _x = min_x to max_x do
56321: LD_ADDR_VAR 0 11
56325: PUSH
56326: DOUBLE
56327: LD_VAR 0 7
56331: DEC
56332: ST_TO_ADDR
56333: LD_VAR 0 9
56337: PUSH
56338: FOR_TO
56339: IFFALSE 56458
// for _y = min_y to max_y do
56341: LD_ADDR_VAR 0 12
56345: PUSH
56346: DOUBLE
56347: LD_VAR 0 8
56351: DEC
56352: ST_TO_ADDR
56353: LD_VAR 0 10
56357: PUSH
56358: FOR_TO
56359: IFFALSE 56454
// begin if not ValidHex ( _x , _y ) then
56361: LD_VAR 0 11
56365: PPUSH
56366: LD_VAR 0 12
56370: PPUSH
56371: CALL_OW 488
56375: NOT
56376: IFFALSE 56380
// continue ;
56378: GO 56358
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
56380: LD_VAR 0 11
56384: PPUSH
56385: LD_VAR 0 12
56389: PPUSH
56390: CALL_OW 351
56394: IFFALSE 56412
56396: PUSH
56397: LD_VAR 0 11
56401: PPUSH
56402: LD_VAR 0 12
56406: PPUSH
56407: CALL_OW 554
56411: AND
56412: IFFALSE 56452
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
56414: LD_ADDR_VAR 0 13
56418: PUSH
56419: LD_VAR 0 13
56423: PPUSH
56424: LD_VAR 0 13
56428: PUSH
56429: LD_INT 1
56431: PLUS
56432: PPUSH
56433: LD_VAR 0 11
56437: PUSH
56438: LD_VAR 0 12
56442: PUSH
56443: EMPTY
56444: LIST
56445: LIST
56446: PPUSH
56447: CALL_OW 2
56451: ST_TO_ADDR
// end ;
56452: GO 56358
56454: POP
56455: POP
56456: GO 56338
56458: POP
56459: POP
// if not list then
56460: LD_VAR 0 13
56464: NOT
56465: IFFALSE 56469
// exit ;
56467: GO 56540
// for i in list do
56469: LD_ADDR_VAR 0 6
56473: PUSH
56474: LD_VAR 0 13
56478: PUSH
56479: FOR_IN
56480: IFFALSE 56538
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
56482: LD_VAR 0 1
56486: PPUSH
56487: LD_STRING M
56489: PUSH
56490: LD_VAR 0 6
56494: PUSH
56495: LD_INT 1
56497: ARRAY
56498: PUSH
56499: LD_VAR 0 6
56503: PUSH
56504: LD_INT 2
56506: ARRAY
56507: PUSH
56508: LD_INT 0
56510: PUSH
56511: LD_INT 0
56513: PUSH
56514: LD_INT 0
56516: PUSH
56517: LD_INT 0
56519: PUSH
56520: EMPTY
56521: LIST
56522: LIST
56523: LIST
56524: LIST
56525: LIST
56526: LIST
56527: LIST
56528: PUSH
56529: EMPTY
56530: LIST
56531: PPUSH
56532: CALL_OW 447
56536: GO 56479
56538: POP
56539: POP
// end ;
56540: LD_VAR 0 5
56544: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
56545: LD_INT 0
56547: PPUSH
56548: PPUSH
56549: PPUSH
56550: PPUSH
56551: PPUSH
56552: PPUSH
56553: PPUSH
56554: PPUSH
56555: PPUSH
56556: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
56557: LD_VAR 0 1
56561: PPUSH
56562: CALL_OW 302
56566: NOT
56567: IFTRUE 56586
56569: PUSH
56570: LD_VAR 0 2
56574: PPUSH
56575: LD_VAR 0 3
56579: PPUSH
56580: CALL_OW 488
56584: NOT
56585: OR
56586: IFTRUE 56595
56588: PUSH
56589: LD_VAR 0 4
56593: NOT
56594: OR
56595: IFFALSE 56599
// exit ;
56597: GO 57138
// if Count ( GetTaskList ( flame ) ) > 10 then
56599: LD_VAR 0 1
56603: PPUSH
56604: CALL_OW 437
56608: PPUSH
56609: CALL 13364 0 1
56613: PUSH
56614: LD_INT 10
56616: GREATER
56617: IFFALSE 56621
// exit ;
56619: GO 57138
// list := [ ] ;
56621: LD_ADDR_VAR 0 13
56625: PUSH
56626: EMPTY
56627: ST_TO_ADDR
// if x - r < 0 then
56628: LD_VAR 0 2
56632: PUSH
56633: LD_VAR 0 4
56637: MINUS
56638: PUSH
56639: LD_INT 0
56641: LESS
56642: IFFALSE 56654
// min_x := 0 else
56644: LD_ADDR_VAR 0 7
56648: PUSH
56649: LD_INT 0
56651: ST_TO_ADDR
56652: GO 56670
// min_x := x - r ;
56654: LD_ADDR_VAR 0 7
56658: PUSH
56659: LD_VAR 0 2
56663: PUSH
56664: LD_VAR 0 4
56668: MINUS
56669: ST_TO_ADDR
// if y - r < 0 then
56670: LD_VAR 0 3
56674: PUSH
56675: LD_VAR 0 4
56679: MINUS
56680: PUSH
56681: LD_INT 0
56683: LESS
56684: IFFALSE 56696
// min_y := 0 else
56686: LD_ADDR_VAR 0 8
56690: PUSH
56691: LD_INT 0
56693: ST_TO_ADDR
56694: GO 56712
// min_y := y - r ;
56696: LD_ADDR_VAR 0 8
56700: PUSH
56701: LD_VAR 0 3
56705: PUSH
56706: LD_VAR 0 4
56710: MINUS
56711: ST_TO_ADDR
// max_x := x + r ;
56712: LD_ADDR_VAR 0 9
56716: PUSH
56717: LD_VAR 0 2
56721: PUSH
56722: LD_VAR 0 4
56726: PLUS
56727: ST_TO_ADDR
// max_y := y + r ;
56728: LD_ADDR_VAR 0 10
56732: PUSH
56733: LD_VAR 0 3
56737: PUSH
56738: LD_VAR 0 4
56742: PLUS
56743: ST_TO_ADDR
// for _x = min_x to max_x do
56744: LD_ADDR_VAR 0 11
56748: PUSH
56749: DOUBLE
56750: LD_VAR 0 7
56754: DEC
56755: ST_TO_ADDR
56756: LD_VAR 0 9
56760: PUSH
56761: FOR_TO
56762: IFFALSE 56881
// for _y = min_y to max_y do
56764: LD_ADDR_VAR 0 12
56768: PUSH
56769: DOUBLE
56770: LD_VAR 0 8
56774: DEC
56775: ST_TO_ADDR
56776: LD_VAR 0 10
56780: PUSH
56781: FOR_TO
56782: IFFALSE 56877
// begin if not ValidHex ( _x , _y ) then
56784: LD_VAR 0 11
56788: PPUSH
56789: LD_VAR 0 12
56793: PPUSH
56794: CALL_OW 488
56798: NOT
56799: IFFALSE 56803
// continue ;
56801: GO 56781
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
56803: LD_VAR 0 11
56807: PPUSH
56808: LD_VAR 0 12
56812: PPUSH
56813: CALL_OW 351
56817: IFFALSE 56835
56819: PUSH
56820: LD_VAR 0 11
56824: PPUSH
56825: LD_VAR 0 12
56829: PPUSH
56830: CALL_OW 554
56834: AND
56835: IFFALSE 56875
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
56837: LD_ADDR_VAR 0 13
56841: PUSH
56842: LD_VAR 0 13
56846: PPUSH
56847: LD_VAR 0 13
56851: PUSH
56852: LD_INT 1
56854: PLUS
56855: PPUSH
56856: LD_VAR 0 11
56860: PUSH
56861: LD_VAR 0 12
56865: PUSH
56866: EMPTY
56867: LIST
56868: LIST
56869: PPUSH
56870: CALL_OW 2
56874: ST_TO_ADDR
// end ;
56875: GO 56781
56877: POP
56878: POP
56879: GO 56761
56881: POP
56882: POP
// if not list then
56883: LD_VAR 0 13
56887: NOT
56888: IFFALSE 56892
// exit ;
56890: GO 57138
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
56892: LD_ADDR_VAR 0 13
56896: PUSH
56897: LD_VAR 0 1
56901: PPUSH
56902: LD_VAR 0 13
56906: PPUSH
56907: LD_INT 1
56909: PPUSH
56910: LD_INT 1
56912: PPUSH
56913: CALL 16770 0 4
56917: ST_TO_ADDR
// ComStop ( flame ) ;
56918: LD_VAR 0 1
56922: PPUSH
56923: CALL_OW 141
// for i in list do
56927: LD_ADDR_VAR 0 6
56931: PUSH
56932: LD_VAR 0 13
56936: PUSH
56937: FOR_IN
56938: IFFALSE 56969
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
56940: LD_VAR 0 1
56944: PPUSH
56945: LD_VAR 0 6
56949: PUSH
56950: LD_INT 1
56952: ARRAY
56953: PPUSH
56954: LD_VAR 0 6
56958: PUSH
56959: LD_INT 2
56961: ARRAY
56962: PPUSH
56963: CALL_OW 176
56967: GO 56937
56969: POP
56970: POP
// repeat wait ( 0 0$1 ) ;
56971: LD_INT 35
56973: PPUSH
56974: CALL_OW 67
// task := GetTaskList ( flame ) ;
56978: LD_ADDR_VAR 0 14
56982: PUSH
56983: LD_VAR 0 1
56987: PPUSH
56988: CALL_OW 437
56992: ST_TO_ADDR
// if not task then
56993: LD_VAR 0 14
56997: NOT
56998: IFFALSE 57002
// exit ;
57000: GO 57138
// if task [ 1 ] [ 1 ] <> | then
57002: LD_VAR 0 14
57006: PUSH
57007: LD_INT 1
57009: ARRAY
57010: PUSH
57011: LD_INT 1
57013: ARRAY
57014: PUSH
57015: LD_STRING |
57017: NONEQUAL
57018: IFFALSE 57022
// exit ;
57020: GO 57138
// _x := task [ 1 ] [ 2 ] ;
57022: LD_ADDR_VAR 0 11
57026: PUSH
57027: LD_VAR 0 14
57031: PUSH
57032: LD_INT 1
57034: ARRAY
57035: PUSH
57036: LD_INT 2
57038: ARRAY
57039: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
57040: LD_ADDR_VAR 0 12
57044: PUSH
57045: LD_VAR 0 14
57049: PUSH
57050: LD_INT 1
57052: ARRAY
57053: PUSH
57054: LD_INT 3
57056: ARRAY
57057: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
57058: LD_VAR 0 11
57062: PPUSH
57063: LD_VAR 0 12
57067: PPUSH
57068: CALL_OW 351
57072: NOT
57073: IFTRUE 57092
57075: PUSH
57076: LD_VAR 0 11
57080: PPUSH
57081: LD_VAR 0 12
57085: PPUSH
57086: CALL_OW 554
57090: NOT
57091: OR
57092: IFFALSE 57126
// begin task := Delete ( task , 1 ) ;
57094: LD_ADDR_VAR 0 14
57098: PUSH
57099: LD_VAR 0 14
57103: PPUSH
57104: LD_INT 1
57106: PPUSH
57107: CALL_OW 3
57111: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
57112: LD_VAR 0 1
57116: PPUSH
57117: LD_VAR 0 14
57121: PPUSH
57122: CALL_OW 446
// end ; until not HasTask ( flame ) ;
57126: LD_VAR 0 1
57130: PPUSH
57131: CALL_OW 314
57135: NOT
57136: IFFALSE 56971
// end ;
57138: LD_VAR 0 5
57142: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
57143: LD_EXP 50
57147: NOT
57148: IFFALSE 57198
57150: GO 57152
57152: DISABLE
// begin initHack := true ;
57153: LD_ADDR_EXP 50
57157: PUSH
57158: LD_INT 1
57160: ST_TO_ADDR
// hackTanks := [ ] ;
57161: LD_ADDR_EXP 51
57165: PUSH
57166: EMPTY
57167: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
57168: LD_ADDR_EXP 52
57172: PUSH
57173: EMPTY
57174: ST_TO_ADDR
// hackLimit := 3 ;
57175: LD_ADDR_EXP 53
57179: PUSH
57180: LD_INT 3
57182: ST_TO_ADDR
// hackDist := 12 ;
57183: LD_ADDR_EXP 54
57187: PUSH
57188: LD_INT 12
57190: ST_TO_ADDR
// hackCounter := [ ] ;
57191: LD_ADDR_EXP 55
57195: PUSH
57196: EMPTY
57197: ST_TO_ADDR
// end ;
57198: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
57199: LD_EXP 50
57203: IFFALSE 57221
57205: PUSH
57206: LD_INT 34
57208: PUSH
57209: LD_INT 99
57211: PUSH
57212: EMPTY
57213: LIST
57214: LIST
57215: PPUSH
57216: CALL_OW 69
57220: AND
57221: IFFALSE 57474
57223: GO 57225
57225: DISABLE
57226: LD_INT 0
57228: PPUSH
57229: PPUSH
// begin enable ;
57230: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
57231: LD_ADDR_VAR 0 1
57235: PUSH
57236: LD_INT 34
57238: PUSH
57239: LD_INT 99
57241: PUSH
57242: EMPTY
57243: LIST
57244: LIST
57245: PPUSH
57246: CALL_OW 69
57250: PUSH
57251: FOR_IN
57252: IFFALSE 57472
// begin if not i in hackTanks then
57254: LD_VAR 0 1
57258: PUSH
57259: LD_EXP 51
57263: IN
57264: NOT
57265: IFFALSE 57348
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
57267: LD_ADDR_EXP 51
57271: PUSH
57272: LD_EXP 51
57276: PPUSH
57277: LD_EXP 51
57281: PUSH
57282: LD_INT 1
57284: PLUS
57285: PPUSH
57286: LD_VAR 0 1
57290: PPUSH
57291: CALL_OW 1
57295: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
57296: LD_ADDR_EXP 52
57300: PUSH
57301: LD_EXP 52
57305: PPUSH
57306: LD_EXP 52
57310: PUSH
57311: LD_INT 1
57313: PLUS
57314: PPUSH
57315: EMPTY
57316: PPUSH
57317: CALL_OW 1
57321: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
57322: LD_ADDR_EXP 55
57326: PUSH
57327: LD_EXP 55
57331: PPUSH
57332: LD_EXP 55
57336: PUSH
57337: LD_INT 1
57339: PLUS
57340: PPUSH
57341: EMPTY
57342: PPUSH
57343: CALL_OW 1
57347: ST_TO_ADDR
// end ; if not IsOk ( i ) then
57348: LD_VAR 0 1
57352: PPUSH
57353: CALL_OW 302
57357: NOT
57358: IFFALSE 57371
// begin HackUnlinkAll ( i ) ;
57360: LD_VAR 0 1
57364: PPUSH
57365: CALL 57477 0 1
// continue ;
57369: GO 57251
// end ; HackCheckCapturedStatus ( i ) ;
57371: LD_VAR 0 1
57375: PPUSH
57376: CALL 57922 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
57380: LD_ADDR_VAR 0 2
57384: PUSH
57385: LD_INT 81
57387: PUSH
57388: LD_VAR 0 1
57392: PPUSH
57393: CALL_OW 255
57397: PUSH
57398: EMPTY
57399: LIST
57400: LIST
57401: PUSH
57402: LD_INT 33
57404: PUSH
57405: LD_INT 3
57407: PUSH
57408: EMPTY
57409: LIST
57410: LIST
57411: PUSH
57412: LD_INT 91
57414: PUSH
57415: LD_VAR 0 1
57419: PUSH
57420: LD_EXP 54
57424: PUSH
57425: EMPTY
57426: LIST
57427: LIST
57428: LIST
57429: PUSH
57430: LD_INT 50
57432: PUSH
57433: EMPTY
57434: LIST
57435: PUSH
57436: EMPTY
57437: LIST
57438: LIST
57439: LIST
57440: LIST
57441: PPUSH
57442: CALL_OW 69
57446: ST_TO_ADDR
// if not tmp then
57447: LD_VAR 0 2
57451: NOT
57452: IFFALSE 57456
// continue ;
57454: GO 57251
// HackLink ( i , tmp ) ;
57456: LD_VAR 0 1
57460: PPUSH
57461: LD_VAR 0 2
57465: PPUSH
57466: CALL 57613 0 2
// end ;
57470: GO 57251
57472: POP
57473: POP
// end ;
57474: PPOPN 2
57476: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
57477: LD_INT 0
57479: PPUSH
57480: PPUSH
57481: PPUSH
// if not hack in hackTanks then
57482: LD_VAR 0 1
57486: PUSH
57487: LD_EXP 51
57491: IN
57492: NOT
57493: IFFALSE 57497
// exit ;
57495: GO 57608
// index := GetElementIndex ( hackTanks , hack ) ;
57497: LD_ADDR_VAR 0 4
57501: PUSH
57502: LD_EXP 51
57506: PPUSH
57507: LD_VAR 0 1
57511: PPUSH
57512: CALL 16065 0 2
57516: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
57517: LD_EXP 52
57521: PUSH
57522: LD_VAR 0 4
57526: ARRAY
57527: IFFALSE 57608
// begin for i in hackTanksCaptured [ index ] do
57529: LD_ADDR_VAR 0 3
57533: PUSH
57534: LD_EXP 52
57538: PUSH
57539: LD_VAR 0 4
57543: ARRAY
57544: PUSH
57545: FOR_IN
57546: IFFALSE 57572
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
57548: LD_VAR 0 3
57552: PUSH
57553: LD_INT 1
57555: ARRAY
57556: PPUSH
57557: LD_VAR 0 3
57561: PUSH
57562: LD_INT 2
57564: ARRAY
57565: PPUSH
57566: CALL_OW 235
57570: GO 57545
57572: POP
57573: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
57574: LD_ADDR_EXP 52
57578: PUSH
57579: LD_EXP 52
57583: PPUSH
57584: LD_VAR 0 4
57588: PPUSH
57589: EMPTY
57590: PPUSH
57591: CALL_OW 1
57595: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
57596: LD_VAR 0 1
57600: PPUSH
57601: LD_INT 0
57603: PPUSH
57604: CALL_OW 505
// end ; end ;
57608: LD_VAR 0 2
57612: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
57613: LD_INT 0
57615: PPUSH
57616: PPUSH
57617: PPUSH
// if not hack in hackTanks or not vehicles then
57618: LD_VAR 0 1
57622: PUSH
57623: LD_EXP 51
57627: IN
57628: NOT
57629: IFTRUE 57638
57631: PUSH
57632: LD_VAR 0 2
57636: NOT
57637: OR
57638: IFFALSE 57642
// exit ;
57640: GO 57917
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
57642: LD_ADDR_VAR 0 2
57646: PUSH
57647: LD_VAR 0 1
57651: PPUSH
57652: LD_VAR 0 2
57656: PPUSH
57657: LD_INT 1
57659: PPUSH
57660: LD_INT 1
57662: PPUSH
57663: CALL 16717 0 4
57667: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
57668: LD_ADDR_VAR 0 5
57672: PUSH
57673: LD_EXP 51
57677: PPUSH
57678: LD_VAR 0 1
57682: PPUSH
57683: CALL 16065 0 2
57687: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
57688: LD_EXP 52
57692: PUSH
57693: LD_VAR 0 5
57697: ARRAY
57698: PUSH
57699: LD_EXP 53
57703: LESS
57704: IFFALSE 57893
// begin for i := 1 to vehicles do
57706: LD_ADDR_VAR 0 4
57710: PUSH
57711: DOUBLE
57712: LD_INT 1
57714: DEC
57715: ST_TO_ADDR
57716: LD_VAR 0 2
57720: PUSH
57721: FOR_TO
57722: IFFALSE 57891
// begin if hackTanksCaptured [ index ] = hackLimit then
57724: LD_EXP 52
57728: PUSH
57729: LD_VAR 0 5
57733: ARRAY
57734: PUSH
57735: LD_EXP 53
57739: EQUAL
57740: IFFALSE 57744
// break ;
57742: GO 57891
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
57744: LD_ADDR_EXP 55
57748: PUSH
57749: LD_EXP 55
57753: PPUSH
57754: LD_VAR 0 5
57758: PPUSH
57759: LD_EXP 55
57763: PUSH
57764: LD_VAR 0 5
57768: ARRAY
57769: PUSH
57770: LD_INT 1
57772: PLUS
57773: PPUSH
57774: CALL_OW 1
57778: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
57779: LD_ADDR_EXP 52
57783: PUSH
57784: LD_EXP 52
57788: PPUSH
57789: LD_VAR 0 5
57793: PUSH
57794: LD_EXP 52
57798: PUSH
57799: LD_VAR 0 5
57803: ARRAY
57804: PUSH
57805: LD_INT 1
57807: PLUS
57808: PUSH
57809: EMPTY
57810: LIST
57811: LIST
57812: PPUSH
57813: LD_VAR 0 2
57817: PUSH
57818: LD_VAR 0 4
57822: ARRAY
57823: PUSH
57824: LD_VAR 0 2
57828: PUSH
57829: LD_VAR 0 4
57833: ARRAY
57834: PPUSH
57835: CALL_OW 255
57839: PUSH
57840: EMPTY
57841: LIST
57842: LIST
57843: PPUSH
57844: CALL 16282 0 3
57848: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
57849: LD_VAR 0 2
57853: PUSH
57854: LD_VAR 0 4
57858: ARRAY
57859: PPUSH
57860: LD_VAR 0 1
57864: PPUSH
57865: CALL_OW 255
57869: PPUSH
57870: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
57874: LD_VAR 0 2
57878: PUSH
57879: LD_VAR 0 4
57883: ARRAY
57884: PPUSH
57885: CALL_OW 141
// end ;
57889: GO 57721
57891: POP
57892: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
57893: LD_VAR 0 1
57897: PPUSH
57898: LD_EXP 52
57902: PUSH
57903: LD_VAR 0 5
57907: ARRAY
57908: PUSH
57909: LD_INT 0
57911: PLUS
57912: PPUSH
57913: CALL_OW 505
// end ;
57917: LD_VAR 0 3
57921: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
57922: LD_INT 0
57924: PPUSH
57925: PPUSH
57926: PPUSH
57927: PPUSH
// if not hack in hackTanks then
57928: LD_VAR 0 1
57932: PUSH
57933: LD_EXP 51
57937: IN
57938: NOT
57939: IFFALSE 57943
// exit ;
57941: GO 58187
// index := GetElementIndex ( hackTanks , hack ) ;
57943: LD_ADDR_VAR 0 4
57947: PUSH
57948: LD_EXP 51
57952: PPUSH
57953: LD_VAR 0 1
57957: PPUSH
57958: CALL 16065 0 2
57962: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
57963: LD_ADDR_VAR 0 3
57967: PUSH
57968: DOUBLE
57969: LD_EXP 52
57973: PUSH
57974: LD_VAR 0 4
57978: ARRAY
57979: INC
57980: ST_TO_ADDR
57981: LD_INT 1
57983: PUSH
57984: FOR_DOWNTO
57985: IFFALSE 58161
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
57987: LD_ADDR_VAR 0 5
57991: PUSH
57992: LD_EXP 52
57996: PUSH
57997: LD_VAR 0 4
58001: ARRAY
58002: PUSH
58003: LD_VAR 0 3
58007: ARRAY
58008: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
58009: LD_VAR 0 5
58013: PUSH
58014: LD_INT 1
58016: ARRAY
58017: PPUSH
58018: CALL_OW 302
58022: NOT
58023: IFTRUE 58051
58025: PUSH
58026: LD_VAR 0 5
58030: PUSH
58031: LD_INT 1
58033: ARRAY
58034: PPUSH
58035: CALL_OW 255
58039: PUSH
58040: LD_VAR 0 1
58044: PPUSH
58045: CALL_OW 255
58049: NONEQUAL
58050: OR
58051: IFFALSE 58159
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
58053: LD_VAR 0 5
58057: PUSH
58058: LD_INT 1
58060: ARRAY
58061: PPUSH
58062: CALL_OW 305
58066: IFFALSE 58094
58068: PUSH
58069: LD_VAR 0 5
58073: PUSH
58074: LD_INT 1
58076: ARRAY
58077: PPUSH
58078: CALL_OW 255
58082: PUSH
58083: LD_VAR 0 1
58087: PPUSH
58088: CALL_OW 255
58092: EQUAL
58093: AND
58094: IFFALSE 58118
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
58096: LD_VAR 0 5
58100: PUSH
58101: LD_INT 1
58103: ARRAY
58104: PPUSH
58105: LD_VAR 0 5
58109: PUSH
58110: LD_INT 2
58112: ARRAY
58113: PPUSH
58114: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
58118: LD_ADDR_EXP 52
58122: PUSH
58123: LD_EXP 52
58127: PPUSH
58128: LD_VAR 0 4
58132: PPUSH
58133: LD_EXP 52
58137: PUSH
58138: LD_VAR 0 4
58142: ARRAY
58143: PPUSH
58144: LD_VAR 0 3
58148: PPUSH
58149: CALL_OW 3
58153: PPUSH
58154: CALL_OW 1
58158: ST_TO_ADDR
// end ; end ;
58159: GO 57984
58161: POP
58162: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
58163: LD_VAR 0 1
58167: PPUSH
58168: LD_EXP 52
58172: PUSH
58173: LD_VAR 0 4
58177: ARRAY
58178: PUSH
58179: LD_INT 0
58181: PLUS
58182: PPUSH
58183: CALL_OW 505
// end ;
58187: LD_VAR 0 2
58191: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
58192: LD_INT 0
58194: PPUSH
58195: PPUSH
58196: PPUSH
58197: PPUSH
// if not hack in hackTanks then
58198: LD_VAR 0 1
58202: PUSH
58203: LD_EXP 51
58207: IN
58208: NOT
58209: IFFALSE 58213
// exit ;
58211: GO 58298
// index := GetElementIndex ( hackTanks , hack ) ;
58213: LD_ADDR_VAR 0 5
58217: PUSH
58218: LD_EXP 51
58222: PPUSH
58223: LD_VAR 0 1
58227: PPUSH
58228: CALL 16065 0 2
58232: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
58233: LD_ADDR_VAR 0 4
58237: PUSH
58238: DOUBLE
58239: LD_INT 1
58241: DEC
58242: ST_TO_ADDR
58243: LD_EXP 52
58247: PUSH
58248: LD_VAR 0 5
58252: ARRAY
58253: PUSH
58254: FOR_TO
58255: IFFALSE 58296
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
58257: LD_EXP 52
58261: PUSH
58262: LD_VAR 0 5
58266: ARRAY
58267: PUSH
58268: LD_VAR 0 4
58272: ARRAY
58273: PUSH
58274: LD_INT 1
58276: ARRAY
58277: PUSH
58278: LD_VAR 0 2
58282: EQUAL
58283: IFFALSE 58294
// KillUnit ( vehicle ) ;
58285: LD_VAR 0 2
58289: PPUSH
58290: CALL_OW 66
58294: GO 58254
58296: POP
58297: POP
// end ;
58298: LD_VAR 0 3
58302: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
58303: LD_EXP 56
58307: NOT
58308: IFFALSE 58441
58310: GO 58312
58312: DISABLE
58313: LD_INT 0
58315: PPUSH
// begin initMiner := true ;
58316: LD_ADDR_EXP 56
58320: PUSH
58321: LD_INT 1
58323: ST_TO_ADDR
// minersList := [ ] ;
58324: LD_ADDR_EXP 57
58328: PUSH
58329: EMPTY
58330: ST_TO_ADDR
// minerMinesList := [ ] ;
58331: LD_ADDR_EXP 58
58335: PUSH
58336: EMPTY
58337: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
58338: LD_ADDR_EXP 59
58342: PUSH
58343: LD_INT 10
58345: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
58346: LD_ADDR_VAR 0 1
58350: PUSH
58351: LD_INT 34
58353: PUSH
58354: LD_INT 81
58356: PUSH
58357: EMPTY
58358: LIST
58359: LIST
58360: PPUSH
58361: CALL_OW 69
58365: PUSH
58366: FOR_IN
58367: IFFALSE 58439
// begin if not i in minersList then
58369: LD_VAR 0 1
58373: PUSH
58374: LD_EXP 57
58378: IN
58379: NOT
58380: IFFALSE 58437
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
58382: LD_ADDR_EXP 57
58386: PUSH
58387: LD_EXP 57
58391: PPUSH
58392: LD_EXP 57
58396: PUSH
58397: LD_INT 1
58399: PLUS
58400: PPUSH
58401: LD_VAR 0 1
58405: PPUSH
58406: CALL_OW 1
58410: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
58411: LD_ADDR_EXP 58
58415: PUSH
58416: LD_EXP 58
58420: PPUSH
58421: LD_EXP 58
58425: PUSH
58426: LD_INT 1
58428: PLUS
58429: PPUSH
58430: EMPTY
58431: PPUSH
58432: CALL_OW 1
58436: ST_TO_ADDR
// end end ;
58437: GO 58366
58439: POP
58440: POP
// end ;
58441: PPOPN 1
58443: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
58444: LD_EXP 56
58448: IFFALSE 58479
58450: PUSH
58451: LD_EXP 58
58455: PPUSH
58456: CALL 13364 0 1
58460: IFTRUE 58478
58462: PUSH
58463: LD_INT 34
58465: PUSH
58466: LD_INT 81
58468: PUSH
58469: EMPTY
58470: LIST
58471: LIST
58472: PPUSH
58473: CALL_OW 69
58477: OR
58478: AND
58479: IFFALSE 58999
58481: GO 58483
58483: DISABLE
58484: LD_INT 0
58486: PPUSH
58487: PPUSH
58488: PPUSH
58489: PPUSH
// begin enable ;
58490: ENABLE
// for i := minerMinesList downto 1 do
58491: LD_ADDR_VAR 0 1
58495: PUSH
58496: DOUBLE
58497: LD_EXP 58
58501: INC
58502: ST_TO_ADDR
58503: LD_INT 1
58505: PUSH
58506: FOR_DOWNTO
58507: IFFALSE 58997
// begin side := GetSide ( minersList [ i ] ) ;
58509: LD_ADDR_VAR 0 3
58513: PUSH
58514: LD_EXP 57
58518: PUSH
58519: LD_VAR 0 1
58523: ARRAY
58524: PPUSH
58525: CALL_OW 255
58529: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
58530: LD_EXP 57
58534: PUSH
58535: LD_VAR 0 1
58539: ARRAY
58540: PPUSH
58541: CALL_OW 300
58545: IFFALSE 58566
58547: PUSH
58548: LD_VAR 0 3
58552: PUSH
58553: LD_OWVAR 2
58557: PUSH
58558: LD_INT 9
58560: PUSH
58561: EMPTY
58562: LIST
58563: LIST
58564: IN
58565: AND
58566: IFFALSE 58599
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
58568: LD_EXP 57
58572: PUSH
58573: LD_VAR 0 1
58577: ARRAY
58578: PPUSH
58579: LD_EXP 58
58583: PUSH
58584: LD_VAR 0 1
58588: ARRAY
58589: PPUSH
58590: CALL 13364 0 1
58594: PPUSH
58595: CALL_OW 505
// if not minerMinesList [ i ] then
58599: LD_EXP 58
58603: PUSH
58604: LD_VAR 0 1
58608: ARRAY
58609: NOT
58610: IFFALSE 58614
// continue ;
58612: GO 58506
// for j := minerMinesList [ i ] downto 1 do
58614: LD_ADDR_VAR 0 2
58618: PUSH
58619: DOUBLE
58620: LD_EXP 58
58624: PUSH
58625: LD_VAR 0 1
58629: ARRAY
58630: INC
58631: ST_TO_ADDR
58632: LD_INT 1
58634: PUSH
58635: FOR_DOWNTO
58636: IFFALSE 58993
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
58638: LD_EXP 57
58642: PUSH
58643: LD_VAR 0 1
58647: ARRAY
58648: PPUSH
58649: CALL_OW 301
58653: IFTRUE 58673
58655: PUSH
58656: LD_EXP 57
58660: PUSH
58661: LD_VAR 0 1
58665: ARRAY
58666: PPUSH
58667: CALL_OW 305
58671: NOT
58672: OR
58673: IFFALSE 58764
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
58675: LD_EXP 58
58679: PUSH
58680: LD_VAR 0 1
58684: ARRAY
58685: PUSH
58686: LD_VAR 0 2
58690: ARRAY
58691: PUSH
58692: LD_INT 1
58694: ARRAY
58695: PPUSH
58696: LD_EXP 58
58700: PUSH
58701: LD_VAR 0 1
58705: ARRAY
58706: PUSH
58707: LD_VAR 0 2
58711: ARRAY
58712: PUSH
58713: LD_INT 2
58715: ARRAY
58716: PPUSH
58717: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
58721: LD_ADDR_EXP 58
58725: PUSH
58726: LD_EXP 58
58730: PPUSH
58731: LD_VAR 0 1
58735: PPUSH
58736: LD_EXP 58
58740: PUSH
58741: LD_VAR 0 1
58745: ARRAY
58746: PPUSH
58747: LD_VAR 0 2
58751: PPUSH
58752: CALL_OW 3
58756: PPUSH
58757: CALL_OW 1
58761: ST_TO_ADDR
// continue ;
58762: GO 58635
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
58764: LD_ADDR_VAR 0 4
58768: PUSH
58769: LD_EXP 58
58773: PUSH
58774: LD_VAR 0 1
58778: ARRAY
58779: PUSH
58780: LD_VAR 0 2
58784: ARRAY
58785: PUSH
58786: LD_INT 1
58788: ARRAY
58789: PPUSH
58790: LD_EXP 58
58794: PUSH
58795: LD_VAR 0 1
58799: ARRAY
58800: PUSH
58801: LD_VAR 0 2
58805: ARRAY
58806: PUSH
58807: LD_INT 2
58809: ARRAY
58810: PPUSH
58811: CALL_OW 428
58815: ST_TO_ADDR
// if not tmp then
58816: LD_VAR 0 4
58820: NOT
58821: IFFALSE 58825
// continue ;
58823: GO 58635
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
58825: LD_VAR 0 4
58829: PUSH
58830: LD_INT 81
58832: PUSH
58833: LD_VAR 0 3
58837: PUSH
58838: EMPTY
58839: LIST
58840: LIST
58841: PPUSH
58842: CALL_OW 69
58846: IN
58847: IFFALSE 58897
58849: PUSH
58850: LD_EXP 58
58854: PUSH
58855: LD_VAR 0 1
58859: ARRAY
58860: PUSH
58861: LD_VAR 0 2
58865: ARRAY
58866: PUSH
58867: LD_INT 1
58869: ARRAY
58870: PPUSH
58871: LD_EXP 58
58875: PUSH
58876: LD_VAR 0 1
58880: ARRAY
58881: PUSH
58882: LD_VAR 0 2
58886: ARRAY
58887: PUSH
58888: LD_INT 2
58890: ARRAY
58891: PPUSH
58892: CALL_OW 458
58896: AND
58897: IFFALSE 58991
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
58899: LD_EXP 58
58903: PUSH
58904: LD_VAR 0 1
58908: ARRAY
58909: PUSH
58910: LD_VAR 0 2
58914: ARRAY
58915: PUSH
58916: LD_INT 1
58918: ARRAY
58919: PPUSH
58920: LD_EXP 58
58924: PUSH
58925: LD_VAR 0 1
58929: ARRAY
58930: PUSH
58931: LD_VAR 0 2
58935: ARRAY
58936: PUSH
58937: LD_INT 2
58939: ARRAY
58940: PPUSH
58941: LD_VAR 0 3
58945: PPUSH
58946: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
58950: LD_ADDR_EXP 58
58954: PUSH
58955: LD_EXP 58
58959: PPUSH
58960: LD_VAR 0 1
58964: PPUSH
58965: LD_EXP 58
58969: PUSH
58970: LD_VAR 0 1
58974: ARRAY
58975: PPUSH
58976: LD_VAR 0 2
58980: PPUSH
58981: CALL_OW 3
58985: PPUSH
58986: CALL_OW 1
58990: ST_TO_ADDR
// end ; end ;
58991: GO 58635
58993: POP
58994: POP
// end ;
58995: GO 58506
58997: POP
58998: POP
// end ;
58999: PPOPN 4
59001: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
59002: LD_INT 0
59004: PPUSH
59005: PPUSH
59006: PPUSH
59007: PPUSH
// result := false ;
59008: LD_ADDR_VAR 0 4
59012: PUSH
59013: LD_INT 0
59015: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
59016: LD_VAR 0 1
59020: PPUSH
59021: CALL_OW 264
59025: PUSH
59026: LD_INT 81
59028: EQUAL
59029: NOT
59030: IFFALSE 59034
// exit ;
59032: GO 59404
// side := GetSide ( unit ) ;
59034: LD_ADDR_VAR 0 6
59038: PUSH
59039: LD_VAR 0 1
59043: PPUSH
59044: CALL_OW 255
59048: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
59049: LD_ADDR_VAR 0 5
59053: PUSH
59054: LD_EXP 57
59058: PPUSH
59059: LD_VAR 0 1
59063: PPUSH
59064: CALL 16065 0 2
59068: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
59069: LD_EXP 58
59073: PUSH
59074: LD_VAR 0 5
59078: ARRAY
59079: PUSH
59080: LD_EXP 59
59084: GREATEREQUAL
59085: IFFALSE 59089
// exit ;
59087: GO 59404
// ComMoveXY ( unit , x , y ) ;
59089: LD_VAR 0 1
59093: PPUSH
59094: LD_VAR 0 2
59098: PPUSH
59099: LD_VAR 0 3
59103: PPUSH
59104: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
59108: LD_INT 35
59110: PPUSH
59111: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
59115: LD_VAR 0 1
59119: PPUSH
59120: LD_VAR 0 2
59124: PPUSH
59125: LD_VAR 0 3
59129: PPUSH
59130: CALL 48121 0 3
59134: NOT
59135: IFFALSE 59148
59137: PUSH
59138: LD_VAR 0 1
59142: PPUSH
59143: CALL_OW 314
59147: AND
59148: IFFALSE 59152
// exit ;
59150: GO 59404
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
59152: LD_VAR 0 2
59156: PPUSH
59157: LD_VAR 0 3
59161: PPUSH
59162: CALL_OW 428
59166: PUSH
59167: LD_VAR 0 1
59171: EQUAL
59172: IFFALSE 59186
59174: PUSH
59175: LD_VAR 0 1
59179: PPUSH
59180: CALL_OW 314
59184: NOT
59185: AND
59186: IFFALSE 59108
// if MineAtPos ( x , y ) then
59188: LD_VAR 0 2
59192: PPUSH
59193: LD_VAR 0 3
59197: PPUSH
59198: CALL_OW 458
59202: IFFALSE 59206
// exit ;
59204: GO 59404
// if your_side = side then
59206: LD_OWVAR 2
59210: PUSH
59211: LD_VAR 0 6
59215: EQUAL
59216: IFFALSE 59235
// PlaySoundXY ( x , y , PlantMine ) ;
59218: LD_VAR 0 2
59222: PPUSH
59223: LD_VAR 0 3
59227: PPUSH
59228: LD_STRING PlantMine
59230: PPUSH
59231: CALL_OW 366
// repeat wait ( 1 ) ;
59235: LD_INT 1
59237: PPUSH
59238: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
59242: LD_VAR 0 2
59246: PPUSH
59247: LD_VAR 0 3
59251: PPUSH
59252: LD_VAR 0 6
59256: PPUSH
59257: LD_INT 0
59259: PPUSH
59260: CALL_OW 454
59264: IFFALSE 59235
// if MineAtPos ( x , y ) then
59266: LD_VAR 0 2
59270: PPUSH
59271: LD_VAR 0 3
59275: PPUSH
59276: CALL_OW 458
59280: IFFALSE 59396
// begin for i in minerMinesList [ index ] do
59282: LD_ADDR_VAR 0 7
59286: PUSH
59287: LD_EXP 58
59291: PUSH
59292: LD_VAR 0 5
59296: ARRAY
59297: PUSH
59298: FOR_IN
59299: IFFALSE 59341
// if i [ 1 ] = x and i [ 2 ] = y then
59301: LD_VAR 0 7
59305: PUSH
59306: LD_INT 1
59308: ARRAY
59309: PUSH
59310: LD_VAR 0 2
59314: EQUAL
59315: IFFALSE 59333
59317: PUSH
59318: LD_VAR 0 7
59322: PUSH
59323: LD_INT 2
59325: ARRAY
59326: PUSH
59327: LD_VAR 0 3
59331: EQUAL
59332: AND
59333: IFFALSE 59339
// exit ;
59335: POP
59336: POP
59337: GO 59404
59339: GO 59298
59341: POP
59342: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
59343: LD_ADDR_EXP 58
59347: PUSH
59348: LD_EXP 58
59352: PPUSH
59353: LD_VAR 0 5
59357: PUSH
59358: LD_EXP 58
59362: PUSH
59363: LD_VAR 0 5
59367: ARRAY
59368: PUSH
59369: LD_INT 1
59371: PLUS
59372: PUSH
59373: EMPTY
59374: LIST
59375: LIST
59376: PPUSH
59377: LD_VAR 0 2
59381: PUSH
59382: LD_VAR 0 3
59386: PUSH
59387: EMPTY
59388: LIST
59389: LIST
59390: PPUSH
59391: CALL 16282 0 3
59395: ST_TO_ADDR
// end ; result := true ;
59396: LD_ADDR_VAR 0 4
59400: PUSH
59401: LD_INT 1
59403: ST_TO_ADDR
// end ;
59404: LD_VAR 0 4
59408: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
59409: LD_INT 0
59411: PPUSH
59412: PPUSH
59413: PPUSH
// if not unit in minersList then
59414: LD_VAR 0 1
59418: PUSH
59419: LD_EXP 57
59423: IN
59424: NOT
59425: IFFALSE 59429
// exit ;
59427: GO 59636
// index := GetElementIndex ( minersList , unit ) ;
59429: LD_ADDR_VAR 0 6
59433: PUSH
59434: LD_EXP 57
59438: PPUSH
59439: LD_VAR 0 1
59443: PPUSH
59444: CALL 16065 0 2
59448: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
59449: LD_ADDR_VAR 0 5
59453: PUSH
59454: DOUBLE
59455: LD_EXP 58
59459: PUSH
59460: LD_VAR 0 6
59464: ARRAY
59465: INC
59466: ST_TO_ADDR
59467: LD_INT 1
59469: PUSH
59470: FOR_DOWNTO
59471: IFFALSE 59634
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
59473: LD_EXP 58
59477: PUSH
59478: LD_VAR 0 6
59482: ARRAY
59483: PUSH
59484: LD_VAR 0 5
59488: ARRAY
59489: PUSH
59490: LD_INT 1
59492: ARRAY
59493: PPUSH
59494: LD_EXP 58
59498: PUSH
59499: LD_VAR 0 6
59503: ARRAY
59504: PUSH
59505: LD_VAR 0 5
59509: ARRAY
59510: PUSH
59511: LD_INT 2
59513: ARRAY
59514: PPUSH
59515: LD_VAR 0 2
59519: PPUSH
59520: LD_VAR 0 3
59524: PPUSH
59525: CALL_OW 298
59529: PUSH
59530: LD_INT 6
59532: LESS
59533: IFFALSE 59632
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
59535: LD_EXP 58
59539: PUSH
59540: LD_VAR 0 6
59544: ARRAY
59545: PUSH
59546: LD_VAR 0 5
59550: ARRAY
59551: PUSH
59552: LD_INT 1
59554: ARRAY
59555: PPUSH
59556: LD_EXP 58
59560: PUSH
59561: LD_VAR 0 6
59565: ARRAY
59566: PUSH
59567: LD_VAR 0 5
59571: ARRAY
59572: PUSH
59573: LD_INT 2
59575: ARRAY
59576: PPUSH
59577: LD_VAR 0 1
59581: PPUSH
59582: CALL_OW 255
59586: PPUSH
59587: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
59591: LD_ADDR_EXP 58
59595: PUSH
59596: LD_EXP 58
59600: PPUSH
59601: LD_VAR 0 6
59605: PPUSH
59606: LD_EXP 58
59610: PUSH
59611: LD_VAR 0 6
59615: ARRAY
59616: PPUSH
59617: LD_VAR 0 5
59621: PPUSH
59622: CALL_OW 3
59626: PPUSH
59627: CALL_OW 1
59631: ST_TO_ADDR
// end ; end ;
59632: GO 59470
59634: POP
59635: POP
// end ;
59636: LD_VAR 0 4
59640: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
59641: LD_INT 0
59643: PPUSH
59644: PPUSH
59645: PPUSH
59646: PPUSH
59647: PPUSH
59648: PPUSH
59649: PPUSH
59650: PPUSH
59651: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
59652: LD_VAR 0 1
59656: PPUSH
59657: CALL_OW 264
59661: PUSH
59662: LD_INT 81
59664: EQUAL
59665: NOT
59666: IFTRUE 59681
59668: PUSH
59669: LD_VAR 0 1
59673: PUSH
59674: LD_EXP 57
59678: IN
59679: NOT
59680: OR
59681: IFFALSE 59685
// exit ;
59683: GO 60011
// index := GetElementIndex ( minersList , unit ) ;
59685: LD_ADDR_VAR 0 6
59689: PUSH
59690: LD_EXP 57
59694: PPUSH
59695: LD_VAR 0 1
59699: PPUSH
59700: CALL 16065 0 2
59704: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
59705: LD_ADDR_VAR 0 8
59709: PUSH
59710: LD_EXP 59
59714: PUSH
59715: LD_EXP 58
59719: PUSH
59720: LD_VAR 0 6
59724: ARRAY
59725: MINUS
59726: ST_TO_ADDR
// if not minesFreeAmount then
59727: LD_VAR 0 8
59731: NOT
59732: IFFALSE 59736
// exit ;
59734: GO 60011
// tmp := [ ] ;
59736: LD_ADDR_VAR 0 7
59740: PUSH
59741: EMPTY
59742: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
59743: LD_ADDR_VAR 0 5
59747: PUSH
59748: DOUBLE
59749: LD_INT 1
59751: DEC
59752: ST_TO_ADDR
59753: LD_VAR 0 8
59757: PUSH
59758: FOR_TO
59759: IFFALSE 59958
// begin _d := rand ( 0 , 5 ) ;
59761: LD_ADDR_VAR 0 11
59765: PUSH
59766: LD_INT 0
59768: PPUSH
59769: LD_INT 5
59771: PPUSH
59772: CALL_OW 12
59776: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
59777: LD_ADDR_VAR 0 12
59781: PUSH
59782: LD_INT 2
59784: PPUSH
59785: LD_INT 6
59787: PPUSH
59788: CALL_OW 12
59792: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
59793: LD_ADDR_VAR 0 9
59797: PUSH
59798: LD_VAR 0 2
59802: PPUSH
59803: LD_VAR 0 11
59807: PPUSH
59808: LD_VAR 0 12
59812: PPUSH
59813: CALL_OW 272
59817: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
59818: LD_ADDR_VAR 0 10
59822: PUSH
59823: LD_VAR 0 3
59827: PPUSH
59828: LD_VAR 0 11
59832: PPUSH
59833: LD_VAR 0 12
59837: PPUSH
59838: CALL_OW 273
59842: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
59843: LD_VAR 0 9
59847: PPUSH
59848: LD_VAR 0 10
59852: PPUSH
59853: CALL_OW 488
59857: IFFALSE 59881
59859: PUSH
59860: LD_VAR 0 9
59864: PUSH
59865: LD_VAR 0 10
59869: PUSH
59870: EMPTY
59871: LIST
59872: LIST
59873: PUSH
59874: LD_VAR 0 7
59878: IN
59879: NOT
59880: AND
59881: IFFALSE 59900
59883: PUSH
59884: LD_VAR 0 9
59888: PPUSH
59889: LD_VAR 0 10
59893: PPUSH
59894: CALL_OW 458
59898: NOT
59899: AND
59900: IFFALSE 59942
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
59902: LD_ADDR_VAR 0 7
59906: PUSH
59907: LD_VAR 0 7
59911: PPUSH
59912: LD_VAR 0 7
59916: PUSH
59917: LD_INT 1
59919: PLUS
59920: PPUSH
59921: LD_VAR 0 9
59925: PUSH
59926: LD_VAR 0 10
59930: PUSH
59931: EMPTY
59932: LIST
59933: LIST
59934: PPUSH
59935: CALL_OW 1
59939: ST_TO_ADDR
59940: GO 59956
// i := i - 1 ;
59942: LD_ADDR_VAR 0 5
59946: PUSH
59947: LD_VAR 0 5
59951: PUSH
59952: LD_INT 1
59954: MINUS
59955: ST_TO_ADDR
// end ;
59956: GO 59758
59958: POP
59959: POP
// for i in tmp do
59960: LD_ADDR_VAR 0 5
59964: PUSH
59965: LD_VAR 0 7
59969: PUSH
59970: FOR_IN
59971: IFFALSE 60009
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
59973: LD_VAR 0 1
59977: PPUSH
59978: LD_VAR 0 5
59982: PUSH
59983: LD_INT 1
59985: ARRAY
59986: PPUSH
59987: LD_VAR 0 5
59991: PUSH
59992: LD_INT 2
59994: ARRAY
59995: PPUSH
59996: CALL 59002 0 3
60000: NOT
60001: IFFALSE 60007
// exit ;
60003: POP
60004: POP
60005: GO 60011
60007: GO 59970
60009: POP
60010: POP
// end ;
60011: LD_VAR 0 4
60015: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
60016: LD_INT 0
60018: PPUSH
60019: PPUSH
60020: PPUSH
60021: PPUSH
60022: PPUSH
60023: PPUSH
60024: PPUSH
60025: PPUSH
60026: PPUSH
// if GetClass ( unit ) <> class_sniper then
60027: LD_VAR 0 1
60031: PPUSH
60032: CALL_OW 257
60036: PUSH
60037: LD_INT 5
60039: NONEQUAL
60040: IFFALSE 60044
// exit ;
60042: GO 60514
// dist := 8 ;
60044: LD_ADDR_VAR 0 5
60048: PUSH
60049: LD_INT 8
60051: ST_TO_ADDR
// viewRange := 12 ;
60052: LD_ADDR_VAR 0 8
60056: PUSH
60057: LD_INT 12
60059: ST_TO_ADDR
// side := GetSide ( unit ) ;
60060: LD_ADDR_VAR 0 6
60064: PUSH
60065: LD_VAR 0 1
60069: PPUSH
60070: CALL_OW 255
60074: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
60075: LD_INT 61
60077: PPUSH
60078: LD_VAR 0 6
60082: PPUSH
60083: CALL_OW 321
60087: PUSH
60088: LD_INT 2
60090: EQUAL
60091: IFFALSE 60101
// viewRange := 16 ;
60093: LD_ADDR_VAR 0 8
60097: PUSH
60098: LD_INT 16
60100: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
60101: LD_VAR 0 1
60105: PPUSH
60106: LD_VAR 0 2
60110: PPUSH
60111: LD_VAR 0 3
60115: PPUSH
60116: CALL_OW 297
60120: PUSH
60121: LD_VAR 0 5
60125: GREATER
60126: IFFALSE 60205
// begin ComMoveXY ( unit , x , y ) ;
60128: LD_VAR 0 1
60132: PPUSH
60133: LD_VAR 0 2
60137: PPUSH
60138: LD_VAR 0 3
60142: PPUSH
60143: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
60147: LD_INT 35
60149: PPUSH
60150: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
60154: LD_VAR 0 1
60158: PPUSH
60159: LD_VAR 0 2
60163: PPUSH
60164: LD_VAR 0 3
60168: PPUSH
60169: CALL 48121 0 3
60173: NOT
60174: IFFALSE 60178
// exit ;
60176: GO 60514
// until GetDistUnitXY ( unit , x , y ) < dist ;
60178: LD_VAR 0 1
60182: PPUSH
60183: LD_VAR 0 2
60187: PPUSH
60188: LD_VAR 0 3
60192: PPUSH
60193: CALL_OW 297
60197: PUSH
60198: LD_VAR 0 5
60202: LESS
60203: IFFALSE 60147
// end ; ComTurnXY ( unit , x , y ) ;
60205: LD_VAR 0 1
60209: PPUSH
60210: LD_VAR 0 2
60214: PPUSH
60215: LD_VAR 0 3
60219: PPUSH
60220: CALL_OW 118
// repeat if Multiplayer then
60224: LD_OWVAR 4
60228: IFFALSE 60239
// wait ( 35 ) else
60230: LD_INT 35
60232: PPUSH
60233: CALL_OW 67
60237: GO 60246
// wait ( 5 ) ;
60239: LD_INT 5
60241: PPUSH
60242: CALL_OW 67
// _d := GetDir ( unit ) ;
60246: LD_ADDR_VAR 0 11
60250: PUSH
60251: LD_VAR 0 1
60255: PPUSH
60256: CALL_OW 254
60260: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
60261: LD_ADDR_VAR 0 7
60265: PUSH
60266: LD_VAR 0 1
60270: PPUSH
60271: CALL_OW 250
60275: PPUSH
60276: LD_VAR 0 1
60280: PPUSH
60281: CALL_OW 251
60285: PPUSH
60286: LD_VAR 0 2
60290: PPUSH
60291: LD_VAR 0 3
60295: PPUSH
60296: CALL 50757 0 4
60300: ST_TO_ADDR
// until dir = _d ;
60301: LD_VAR 0 7
60305: PUSH
60306: LD_VAR 0 11
60310: EQUAL
60311: IFFALSE 60224
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
60313: LD_ADDR_VAR 0 9
60317: PUSH
60318: LD_VAR 0 1
60322: PPUSH
60323: CALL_OW 250
60327: PPUSH
60328: LD_VAR 0 7
60332: PPUSH
60333: LD_VAR 0 5
60337: PPUSH
60338: CALL_OW 272
60342: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
60343: LD_ADDR_VAR 0 10
60347: PUSH
60348: LD_VAR 0 1
60352: PPUSH
60353: CALL_OW 251
60357: PPUSH
60358: LD_VAR 0 7
60362: PPUSH
60363: LD_VAR 0 5
60367: PPUSH
60368: CALL_OW 273
60372: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
60373: LD_VAR 0 9
60377: PPUSH
60378: LD_VAR 0 10
60382: PPUSH
60383: CALL_OW 488
60387: NOT
60388: IFFALSE 60392
// exit ;
60390: GO 60514
// ComAnimCustom ( unit , 1 ) ;
60392: LD_VAR 0 1
60396: PPUSH
60397: LD_INT 1
60399: PPUSH
60400: CALL_OW 592
// p := 0 ;
60404: LD_ADDR_VAR 0 12
60408: PUSH
60409: LD_INT 0
60411: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
60412: LD_VAR 0 9
60416: PPUSH
60417: LD_VAR 0 10
60421: PPUSH
60422: LD_VAR 0 6
60426: PPUSH
60427: LD_VAR 0 8
60431: PPUSH
60432: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
60436: LD_INT 35
60438: PPUSH
60439: CALL_OW 67
// p := Inc ( p ) ;
60443: LD_ADDR_VAR 0 12
60447: PUSH
60448: LD_VAR 0 12
60452: PPUSH
60453: CALL 50713 0 1
60457: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
60458: LD_VAR 0 12
60462: PUSH
60463: LD_INT 3
60465: EQUAL
60466: IFTRUE 60480
60468: PUSH
60469: LD_VAR 0 1
60473: PPUSH
60474: CALL_OW 302
60478: NOT
60479: OR
60480: IFTRUE 60493
60482: PUSH
60483: LD_VAR 0 1
60487: PPUSH
60488: CALL_OW 301
60492: OR
60493: IFFALSE 60436
// RemoveSeeing ( _x , _y , side ) ;
60495: LD_VAR 0 9
60499: PPUSH
60500: LD_VAR 0 10
60504: PPUSH
60505: LD_VAR 0 6
60509: PPUSH
60510: CALL_OW 331
// end ;
60514: LD_VAR 0 4
60518: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
60519: LD_INT 0
60521: PPUSH
60522: PPUSH
60523: PPUSH
60524: PPUSH
60525: PPUSH
60526: PPUSH
60527: PPUSH
60528: PPUSH
60529: PPUSH
60530: PPUSH
60531: PPUSH
// if not unit then
60532: LD_VAR 0 1
60536: NOT
60537: IFFALSE 60541
// exit ;
60539: GO 60812
// side := GetSide ( unit ) ;
60541: LD_ADDR_VAR 0 3
60545: PUSH
60546: LD_VAR 0 1
60550: PPUSH
60551: CALL_OW 255
60555: ST_TO_ADDR
// x := GetX ( unit ) ;
60556: LD_ADDR_VAR 0 5
60560: PUSH
60561: LD_VAR 0 1
60565: PPUSH
60566: CALL_OW 250
60570: ST_TO_ADDR
// y := GetY ( unit ) ;
60571: LD_ADDR_VAR 0 6
60575: PUSH
60576: LD_VAR 0 1
60580: PPUSH
60581: CALL_OW 251
60585: ST_TO_ADDR
// r := 8 ;
60586: LD_ADDR_VAR 0 4
60590: PUSH
60591: LD_INT 8
60593: ST_TO_ADDR
// if x - r < 0 then
60594: LD_VAR 0 5
60598: PUSH
60599: LD_VAR 0 4
60603: MINUS
60604: PUSH
60605: LD_INT 0
60607: LESS
60608: IFFALSE 60620
// min_x := 0 else
60610: LD_ADDR_VAR 0 7
60614: PUSH
60615: LD_INT 0
60617: ST_TO_ADDR
60618: GO 60636
// min_x := x - r ;
60620: LD_ADDR_VAR 0 7
60624: PUSH
60625: LD_VAR 0 5
60629: PUSH
60630: LD_VAR 0 4
60634: MINUS
60635: ST_TO_ADDR
// if y - r < 0 then
60636: LD_VAR 0 6
60640: PUSH
60641: LD_VAR 0 4
60645: MINUS
60646: PUSH
60647: LD_INT 0
60649: LESS
60650: IFFALSE 60662
// min_y := 0 else
60652: LD_ADDR_VAR 0 8
60656: PUSH
60657: LD_INT 0
60659: ST_TO_ADDR
60660: GO 60678
// min_y := y - r ;
60662: LD_ADDR_VAR 0 8
60666: PUSH
60667: LD_VAR 0 6
60671: PUSH
60672: LD_VAR 0 4
60676: MINUS
60677: ST_TO_ADDR
// max_x := x + r ;
60678: LD_ADDR_VAR 0 9
60682: PUSH
60683: LD_VAR 0 5
60687: PUSH
60688: LD_VAR 0 4
60692: PLUS
60693: ST_TO_ADDR
// max_y := y + r ;
60694: LD_ADDR_VAR 0 10
60698: PUSH
60699: LD_VAR 0 6
60703: PUSH
60704: LD_VAR 0 4
60708: PLUS
60709: ST_TO_ADDR
// for _x = min_x to max_x do
60710: LD_ADDR_VAR 0 11
60714: PUSH
60715: DOUBLE
60716: LD_VAR 0 7
60720: DEC
60721: ST_TO_ADDR
60722: LD_VAR 0 9
60726: PUSH
60727: FOR_TO
60728: IFFALSE 60810
// for _y = min_y to max_y do
60730: LD_ADDR_VAR 0 12
60734: PUSH
60735: DOUBLE
60736: LD_VAR 0 8
60740: DEC
60741: ST_TO_ADDR
60742: LD_VAR 0 10
60746: PUSH
60747: FOR_TO
60748: IFFALSE 60806
// begin if not ValidHex ( _x , _y ) then
60750: LD_VAR 0 11
60754: PPUSH
60755: LD_VAR 0 12
60759: PPUSH
60760: CALL_OW 488
60764: NOT
60765: IFFALSE 60769
// continue ;
60767: GO 60747
// if MineAtPos ( _x , _y ) then
60769: LD_VAR 0 11
60773: PPUSH
60774: LD_VAR 0 12
60778: PPUSH
60779: CALL_OW 458
60783: IFFALSE 60804
// ViewMineAtPos ( _x , _y , side ) ;
60785: LD_VAR 0 11
60789: PPUSH
60790: LD_VAR 0 12
60794: PPUSH
60795: LD_VAR 0 3
60799: PPUSH
60800: CALL_OW 457
// end ;
60804: GO 60747
60806: POP
60807: POP
60808: GO 60727
60810: POP
60811: POP
// end ;
60812: LD_VAR 0 2
60816: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
60817: LD_INT 0
60819: PPUSH
60820: PPUSH
60821: PPUSH
60822: PPUSH
60823: PPUSH
60824: PPUSH
60825: PPUSH
// if not units then
60826: LD_VAR 0 1
60830: NOT
60831: IFFALSE 60835
// exit ;
60833: GO 61299
// scaners := [ ] ;
60835: LD_ADDR_VAR 0 6
60839: PUSH
60840: EMPTY
60841: ST_TO_ADDR
// for i in units do
60842: LD_ADDR_VAR 0 3
60846: PUSH
60847: LD_VAR 0 1
60851: PUSH
60852: FOR_IN
60853: IFFALSE 61010
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
60855: LD_VAR 0 3
60859: PPUSH
60860: CALL_OW 264
60864: PUSH
60865: LD_INT 11
60867: NONEQUAL
60868: IFTRUE 60882
60870: PUSH
60871: LD_VAR 0 3
60875: PPUSH
60876: CALL_OW 302
60880: NOT
60881: OR
60882: IFTRUE 60899
60884: PUSH
60885: LD_VAR 0 3
60889: PPUSH
60890: CALL_OW 110
60894: PUSH
60895: LD_INT 502
60897: EQUAL
60898: OR
60899: IFFALSE 60903
// continue ;
60901: GO 60852
// ComStop ( i ) ;
60903: LD_VAR 0 3
60907: PPUSH
60908: CALL_OW 141
// x := GetX ( i ) ;
60912: LD_ADDR_VAR 0 4
60916: PUSH
60917: LD_VAR 0 3
60921: PPUSH
60922: CALL_OW 250
60926: ST_TO_ADDR
// y := GetY ( i ) ;
60927: LD_ADDR_VAR 0 5
60931: PUSH
60932: LD_VAR 0 3
60936: PPUSH
60937: CALL_OW 251
60941: ST_TO_ADDR
// if GetSide ( i ) = your_side then
60942: LD_VAR 0 3
60946: PPUSH
60947: CALL_OW 255
60951: PUSH
60952: LD_OWVAR 2
60956: EQUAL
60957: IFFALSE 60976
// PlaySoundXY ( x , y , mineDetector ) ;
60959: LD_VAR 0 4
60963: PPUSH
60964: LD_VAR 0 5
60968: PPUSH
60969: LD_STRING mineDetector
60971: PPUSH
60972: CALL_OW 366
// scaners := Join ( scaners , i ) ;
60976: LD_ADDR_VAR 0 6
60980: PUSH
60981: LD_VAR 0 6
60985: PPUSH
60986: LD_VAR 0 3
60990: PPUSH
60991: CALL 49340 0 2
60995: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
60996: LD_VAR 0 3
61000: PPUSH
61001: LD_INT 502
61003: PPUSH
61004: CALL_OW 109
// end ;
61008: GO 60852
61010: POP
61011: POP
// if not scaners then
61012: LD_VAR 0 6
61016: NOT
61017: IFFALSE 61021
// exit ;
61019: GO 61299
// wait ( 3 ) ;
61021: LD_INT 3
61023: PPUSH
61024: CALL_OW 67
// timer := 6 ;
61028: LD_ADDR_VAR 0 7
61032: PUSH
61033: LD_INT 6
61035: ST_TO_ADDR
// repeat for i in scaners do
61036: LD_ADDR_VAR 0 3
61040: PUSH
61041: LD_VAR 0 6
61045: PUSH
61046: FOR_IN
61047: IFFALSE 61197
// begin side := GetSide ( i ) ;
61049: LD_ADDR_VAR 0 8
61053: PUSH
61054: LD_VAR 0 3
61058: PPUSH
61059: CALL_OW 255
61063: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
61064: LD_VAR 0 3
61068: PPUSH
61069: CALL_OW 302
61073: NOT
61074: IFTRUE 61087
61076: PUSH
61077: LD_VAR 0 3
61081: PPUSH
61082: CALL_OW 314
61086: OR
61087: IFTRUE 61118
61089: PUSH
61090: LD_VAR 0 3
61094: PPUSH
61095: CALL_OW 263
61099: PUSH
61100: LD_INT 1
61102: EQUAL
61103: IFFALSE 61117
61105: PUSH
61106: LD_VAR 0 3
61110: PPUSH
61111: CALL_OW 311
61115: NOT
61116: AND
61117: OR
61118: IFFALSE 61162
// begin SetUnitDisplayNumber ( i , 0 ) ;
61120: LD_VAR 0 3
61124: PPUSH
61125: LD_INT 0
61127: PPUSH
61128: CALL_OW 505
// SetTag ( i , 0 ) ;
61132: LD_VAR 0 3
61136: PPUSH
61137: LD_INT 0
61139: PPUSH
61140: CALL_OW 109
// scaners := scaners diff i ;
61144: LD_ADDR_VAR 0 6
61148: PUSH
61149: LD_VAR 0 6
61153: PUSH
61154: LD_VAR 0 3
61158: DIFF
61159: ST_TO_ADDR
// continue ;
61160: GO 61046
// end ; if side in [ your_side , 9 ] then
61162: LD_VAR 0 8
61166: PUSH
61167: LD_OWVAR 2
61171: PUSH
61172: LD_INT 9
61174: PUSH
61175: EMPTY
61176: LIST
61177: LIST
61178: IN
61179: IFFALSE 61195
// SetUnitDisplayNumber ( i , timer ) ;
61181: LD_VAR 0 3
61185: PPUSH
61186: LD_VAR 0 7
61190: PPUSH
61191: CALL_OW 505
// end ;
61195: GO 61046
61197: POP
61198: POP
// if not scaners then
61199: LD_VAR 0 6
61203: NOT
61204: IFFALSE 61208
// exit ;
61206: GO 61299
// timer := Dec ( timer ) ;
61208: LD_ADDR_VAR 0 7
61212: PUSH
61213: LD_VAR 0 7
61217: PPUSH
61218: CALL 50735 0 1
61222: ST_TO_ADDR
// wait ( 0 0$1 ) ;
61223: LD_INT 35
61225: PPUSH
61226: CALL_OW 67
// until timer = 0 ;
61230: LD_VAR 0 7
61234: PUSH
61235: LD_INT 0
61237: EQUAL
61238: IFFALSE 61036
// if not scaners then
61240: LD_VAR 0 6
61244: NOT
61245: IFFALSE 61249
// exit ;
61247: GO 61299
// for i in scaners do
61249: LD_ADDR_VAR 0 3
61253: PUSH
61254: LD_VAR 0 6
61258: PUSH
61259: FOR_IN
61260: IFFALSE 61297
// begin SetUnitDisplayNumber ( i , 0 ) ;
61262: LD_VAR 0 3
61266: PPUSH
61267: LD_INT 0
61269: PPUSH
61270: CALL_OW 505
// SetTag ( i , 0 ) ;
61274: LD_VAR 0 3
61278: PPUSH
61279: LD_INT 0
61281: PPUSH
61282: CALL_OW 109
// RevealDetectorMine ( i ) ;
61286: LD_VAR 0 3
61290: PPUSH
61291: CALL 60519 0 1
// end ;
61295: GO 61259
61297: POP
61298: POP
// end ;
61299: LD_VAR 0 2
61303: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
61304: LD_INT 0
61306: PPUSH
// if p1 = mine_detector_mode then
61307: LD_VAR 0 2
61311: PUSH
61312: LD_INT 103
61314: EQUAL
61315: IFFALSE 61326
// DetectMine ( units ) ;
61317: LD_VAR 0 1
61321: PPUSH
61322: CALL 60817 0 1
// end ; end_of_file
61326: LD_VAR 0 7
61330: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
61331: LD_EXP 39
61335: IFFALSE 61676
61337: GO 61339
61339: DISABLE
61340: LD_INT 0
61342: PPUSH
61343: PPUSH
61344: PPUSH
// begin mpKingPoints := [ ] ;
61345: LD_ADDR_EXP 60
61349: PUSH
61350: EMPTY
61351: ST_TO_ADDR
// if mpTeamGame then
61352: LD_EXP 11
61356: IFFALSE 61410
// begin for i := 1 to Count ( mpTeams ) do
61358: LD_ADDR_VAR 0 1
61362: PUSH
61363: DOUBLE
61364: LD_INT 1
61366: DEC
61367: ST_TO_ADDR
61368: LD_EXP 10
61372: PPUSH
61373: CALL 13364 0 1
61377: PUSH
61378: FOR_TO
61379: IFFALSE 61406
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
61381: LD_ADDR_EXP 60
61385: PUSH
61386: LD_EXP 60
61390: PPUSH
61391: LD_VAR 0 1
61395: PPUSH
61396: LD_INT 0
61398: PPUSH
61399: CALL_OW 1
61403: ST_TO_ADDR
61404: GO 61378
61406: POP
61407: POP
// end else
61408: GO 61453
// begin for i := 1 to 8 do
61410: LD_ADDR_VAR 0 1
61414: PUSH
61415: DOUBLE
61416: LD_INT 1
61418: DEC
61419: ST_TO_ADDR
61420: LD_INT 8
61422: PUSH
61423: FOR_TO
61424: IFFALSE 61451
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
61426: LD_ADDR_EXP 60
61430: PUSH
61431: LD_EXP 60
61435: PPUSH
61436: LD_VAR 0 1
61440: PPUSH
61441: LD_INT 0
61443: PPUSH
61444: CALL_OW 1
61448: ST_TO_ADDR
61449: GO 61423
61451: POP
61452: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
61453: LD_ADDR_VAR 0 3
61457: PUSH
61458: LD_EXP 2
61462: PPUSH
61463: LD_INT 0
61465: PPUSH
61466: CALL_OW 517
61470: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
61471: LD_ADDR_VAR 0 1
61475: PUSH
61476: DOUBLE
61477: LD_INT 1
61479: DEC
61480: ST_TO_ADDR
61481: LD_VAR 0 3
61485: PUSH
61486: LD_INT 1
61488: ARRAY
61489: PUSH
61490: FOR_TO
61491: IFFALSE 61558
// for j := 1 to 8 do
61493: LD_ADDR_VAR 0 2
61497: PUSH
61498: DOUBLE
61499: LD_INT 1
61501: DEC
61502: ST_TO_ADDR
61503: LD_INT 8
61505: PUSH
61506: FOR_TO
61507: IFFALSE 61554
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
61509: LD_VAR 0 3
61513: PUSH
61514: LD_INT 1
61516: ARRAY
61517: PUSH
61518: LD_VAR 0 1
61522: ARRAY
61523: PPUSH
61524: LD_VAR 0 3
61528: PUSH
61529: LD_INT 2
61531: ARRAY
61532: PUSH
61533: LD_VAR 0 1
61537: ARRAY
61538: PPUSH
61539: LD_VAR 0 2
61543: PPUSH
61544: LD_INT 12
61546: NEG
61547: PPUSH
61548: CALL_OW 330
61552: GO 61506
61554: POP
61555: POP
61556: GO 61490
61558: POP
61559: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
61560: LD_EXP 34
61564: PPUSH
61565: LD_INT 1
61567: PPUSH
61568: CALL_OW 424
// UpdateCounter ;
61572: CALL 62182 0 0
// repeat wait ( 0 0$1 ) ;
61576: LD_INT 35
61578: PPUSH
61579: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
61583: LD_ADDR_VAR 0 3
61587: PUSH
61588: LD_EXP 34
61592: PPUSH
61593: LD_INT 3
61595: PUSH
61596: LD_INT 57
61598: PUSH
61599: EMPTY
61600: LIST
61601: PUSH
61602: EMPTY
61603: LIST
61604: LIST
61605: PUSH
61606: LD_INT 50
61608: PUSH
61609: EMPTY
61610: LIST
61611: PUSH
61612: LD_INT 2
61614: PUSH
61615: LD_INT 30
61617: PUSH
61618: LD_INT 0
61620: PUSH
61621: EMPTY
61622: LIST
61623: LIST
61624: PUSH
61625: LD_INT 30
61627: PUSH
61628: LD_INT 1
61630: PUSH
61631: EMPTY
61632: LIST
61633: LIST
61634: PUSH
61635: EMPTY
61636: LIST
61637: LIST
61638: LIST
61639: PUSH
61640: EMPTY
61641: LIST
61642: LIST
61643: LIST
61644: PPUSH
61645: CALL_OW 70
61649: ST_TO_ADDR
// if not tmp then
61650: LD_VAR 0 3
61654: NOT
61655: IFFALSE 61659
// continue ;
61657: GO 61576
// AddPoints ( tmp ) ;
61659: LD_VAR 0 3
61663: PPUSH
61664: CALL 61860 0 1
// UpdateCounter ;
61668: CALL 62182 0 0
// until false ;
61672: LD_INT 0
61674: IFFALSE 61576
// end ;
61676: PPOPN 3
61678: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
61679: LD_EXP 39
61683: IFFALSE 61691
61685: PUSH
61686: LD_EXP 37
61690: AND
61691: IFFALSE 61857
61693: GO 61695
61695: DISABLE
61696: LD_INT 0
61698: PPUSH
61699: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
61700: LD_ADDR_VAR 0 2
61704: PUSH
61705: LD_EXP 2
61709: PPUSH
61710: LD_INT 0
61712: PPUSH
61713: CALL_OW 517
61717: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
61718: LD_ADDR_VAR 0 1
61722: PUSH
61723: DOUBLE
61724: LD_INT 1
61726: DEC
61727: ST_TO_ADDR
61728: LD_VAR 0 2
61732: PUSH
61733: LD_INT 1
61735: ARRAY
61736: PUSH
61737: FOR_TO
61738: IFFALSE 61779
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
61740: LD_VAR 0 2
61744: PUSH
61745: LD_INT 1
61747: ARRAY
61748: PUSH
61749: LD_VAR 0 1
61753: ARRAY
61754: PPUSH
61755: LD_VAR 0 2
61759: PUSH
61760: LD_INT 2
61762: ARRAY
61763: PUSH
61764: LD_VAR 0 1
61768: ARRAY
61769: PPUSH
61770: LD_INT 125
61772: PPUSH
61773: CALL_OW 495
61777: GO 61737
61779: POP
61780: POP
// repeat wait ( mpEmissions ) ;
61781: LD_EXP 37
61785: PPUSH
61786: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
61790: LD_ADDR_VAR 0 1
61794: PUSH
61795: DOUBLE
61796: LD_INT 1
61798: DEC
61799: ST_TO_ADDR
61800: LD_VAR 0 2
61804: PUSH
61805: LD_INT 1
61807: ARRAY
61808: PUSH
61809: FOR_TO
61810: IFFALSE 61851
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
61812: LD_VAR 0 2
61816: PUSH
61817: LD_INT 1
61819: ARRAY
61820: PUSH
61821: LD_VAR 0 1
61825: ARRAY
61826: PPUSH
61827: LD_VAR 0 2
61831: PUSH
61832: LD_INT 2
61834: ARRAY
61835: PUSH
61836: LD_VAR 0 1
61840: ARRAY
61841: PPUSH
61842: LD_INT 15
61844: PPUSH
61845: CALL_OW 495
61849: GO 61809
61851: POP
61852: POP
// until false ;
61853: LD_INT 0
61855: IFFALSE 61781
// end ;
61857: PPOPN 2
61859: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
61860: LD_INT 0
61862: PPUSH
61863: PPUSH
61864: PPUSH
61865: PPUSH
61866: PPUSH
// if mpTeamGame then
61867: LD_EXP 11
61871: IFFALSE 62068
// begin first := depots [ 1 ] ;
61873: LD_ADDR_VAR 0 4
61877: PUSH
61878: LD_VAR 0 1
61882: PUSH
61883: LD_INT 1
61885: ARRAY
61886: ST_TO_ADDR
// side := GetSide ( first ) ;
61887: LD_ADDR_VAR 0 6
61891: PUSH
61892: LD_VAR 0 4
61896: PPUSH
61897: CALL_OW 255
61901: ST_TO_ADDR
// for i := 1 to mpTeams do
61902: LD_ADDR_VAR 0 3
61906: PUSH
61907: DOUBLE
61908: LD_INT 1
61910: DEC
61911: ST_TO_ADDR
61912: LD_EXP 10
61916: PUSH
61917: FOR_TO
61918: IFFALSE 61952
// if side in mpTeams [ i ] then
61920: LD_VAR 0 6
61924: PUSH
61925: LD_EXP 10
61929: PUSH
61930: LD_VAR 0 3
61934: ARRAY
61935: IN
61936: IFFALSE 61950
// begin team := i ;
61938: LD_ADDR_VAR 0 5
61942: PUSH
61943: LD_VAR 0 3
61947: ST_TO_ADDR
// break ;
61948: GO 61952
// end ;
61950: GO 61917
61952: POP
61953: POP
// if not team then
61954: LD_VAR 0 5
61958: NOT
61959: IFFALSE 61963
// exit ;
61961: GO 62177
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
61963: LD_EXP 34
61967: PPUSH
61968: LD_INT 81
61970: PUSH
61971: LD_VAR 0 6
61975: PUSH
61976: EMPTY
61977: LIST
61978: LIST
61979: PPUSH
61980: CALL_OW 70
61984: IFFALSE 61988
// exit ;
61986: GO 62177
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
61988: LD_ADDR_EXP 60
61992: PUSH
61993: LD_EXP 60
61997: PPUSH
61998: LD_VAR 0 5
62002: PPUSH
62003: LD_EXP 60
62007: PUSH
62008: LD_VAR 0 5
62012: ARRAY
62013: PUSH
62014: LD_INT 1
62016: PLUS
62017: PPUSH
62018: CALL_OW 1
62022: ST_TO_ADDR
// for i in mpTeams [ team ] do
62023: LD_ADDR_VAR 0 3
62027: PUSH
62028: LD_EXP 10
62032: PUSH
62033: LD_VAR 0 5
62037: ARRAY
62038: PUSH
62039: FOR_IN
62040: IFFALSE 62064
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
62042: LD_VAR 0 3
62046: PPUSH
62047: LD_EXP 60
62051: PUSH
62052: LD_VAR 0 5
62056: ARRAY
62057: PPUSH
62058: CALL_OW 506
62062: GO 62039
62064: POP
62065: POP
// end else
62066: GO 62177
// begin first := depots [ 1 ] ;
62068: LD_ADDR_VAR 0 4
62072: PUSH
62073: LD_VAR 0 1
62077: PUSH
62078: LD_INT 1
62080: ARRAY
62081: ST_TO_ADDR
// side := GetSide ( first ) ;
62082: LD_ADDR_VAR 0 6
62086: PUSH
62087: LD_VAR 0 4
62091: PPUSH
62092: CALL_OW 255
62096: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
62097: LD_EXP 34
62101: PPUSH
62102: LD_INT 81
62104: PUSH
62105: LD_VAR 0 6
62109: PUSH
62110: EMPTY
62111: LIST
62112: LIST
62113: PPUSH
62114: CALL_OW 70
62118: IFFALSE 62122
// exit ;
62120: GO 62177
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
62122: LD_ADDR_EXP 60
62126: PUSH
62127: LD_EXP 60
62131: PPUSH
62132: LD_VAR 0 6
62136: PPUSH
62137: LD_EXP 60
62141: PUSH
62142: LD_VAR 0 6
62146: ARRAY
62147: PUSH
62148: LD_INT 1
62150: PLUS
62151: PPUSH
62152: CALL_OW 1
62156: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
62157: LD_VAR 0 6
62161: PPUSH
62162: LD_EXP 60
62166: PUSH
62167: LD_VAR 0 6
62171: ARRAY
62172: PPUSH
62173: CALL_OW 506
// end ; end ;
62177: LD_VAR 0 2
62181: RET
// function UpdateCounter ; var i ; begin
62182: LD_INT 0
62184: PPUSH
62185: PPUSH
// result := [ ] ;
62186: LD_ADDR_VAR 0 1
62190: PUSH
62191: EMPTY
62192: ST_TO_ADDR
// if mpTeamGame then
62193: LD_EXP 11
62197: IFFALSE 62264
// begin for i := 1 to mpTeams do
62199: LD_ADDR_VAR 0 2
62203: PUSH
62204: DOUBLE
62205: LD_INT 1
62207: DEC
62208: ST_TO_ADDR
62209: LD_EXP 10
62213: PUSH
62214: FOR_TO
62215: IFFALSE 62260
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
62217: LD_ADDR_VAR 0 1
62221: PUSH
62222: LD_VAR 0 1
62226: PUSH
62227: LD_STRING #KingoftheHill-Team
62229: PUSH
62230: LD_VAR 0 2
62234: PUSH
62235: LD_EXP 60
62239: PUSH
62240: LD_VAR 0 2
62244: ARRAY
62245: PUSH
62246: LD_EXP 35
62250: PUSH
62251: EMPTY
62252: LIST
62253: LIST
62254: LIST
62255: LIST
62256: ADD
62257: ST_TO_ADDR
62258: GO 62214
62260: POP
62261: POP
// end else
62262: GO 62337
// begin for i := 1 to 8 do
62264: LD_ADDR_VAR 0 2
62268: PUSH
62269: DOUBLE
62270: LD_INT 1
62272: DEC
62273: ST_TO_ADDR
62274: LD_INT 8
62276: PUSH
62277: FOR_TO
62278: IFFALSE 62335
// if mpSidePositions [ i ] then
62280: LD_EXP 7
62284: PUSH
62285: LD_VAR 0 2
62289: ARRAY
62290: IFFALSE 62333
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
62292: LD_ADDR_VAR 0 1
62296: PUSH
62297: LD_VAR 0 1
62301: PUSH
62302: LD_STRING #KingoftheHill-Player
62304: PUSH
62305: LD_VAR 0 2
62309: PUSH
62310: LD_EXP 60
62314: PUSH
62315: LD_VAR 0 2
62319: ARRAY
62320: PUSH
62321: LD_EXP 35
62325: PUSH
62326: EMPTY
62327: LIST
62328: LIST
62329: LIST
62330: LIST
62331: ADD
62332: ST_TO_ADDR
62333: GO 62277
62335: POP
62336: POP
// end ; mpDisplayStrings := result ;
62337: LD_ADDR_EXP 38
62341: PUSH
62342: LD_VAR 0 1
62346: ST_TO_ADDR
// end ;
62347: LD_VAR 0 1
62351: RET
// export function HowMuchPointsKing ( side ) ; begin
62352: LD_INT 0
62354: PPUSH
// result := HowMuchPoints ( side ) ;
62355: LD_ADDR_VAR 0 2
62359: PUSH
62360: LD_VAR 0 1
62364: PPUSH
62365: CALL 62375 0 1
62369: ST_TO_ADDR
// end ;
62370: LD_VAR 0 2
62374: RET
// function HowMuchPoints ( side ) ; var i ; begin
62375: LD_INT 0
62377: PPUSH
62378: PPUSH
// if mpTeamGame then
62379: LD_EXP 11
62383: IFFALSE 62452
// begin for i := 1 to Count ( mpTeams ) do
62385: LD_ADDR_VAR 0 3
62389: PUSH
62390: DOUBLE
62391: LD_INT 1
62393: DEC
62394: ST_TO_ADDR
62395: LD_EXP 10
62399: PPUSH
62400: CALL 13364 0 1
62404: PUSH
62405: FOR_TO
62406: IFFALSE 62448
// begin if side in mpTeams [ i ] then
62408: LD_VAR 0 1
62412: PUSH
62413: LD_EXP 10
62417: PUSH
62418: LD_VAR 0 3
62422: ARRAY
62423: IN
62424: IFFALSE 62446
// begin result := mpKingPoints [ i ] ;
62426: LD_ADDR_VAR 0 2
62430: PUSH
62431: LD_EXP 60
62435: PUSH
62436: LD_VAR 0 3
62440: ARRAY
62441: ST_TO_ADDR
// exit ;
62442: POP
62443: POP
62444: GO 62468
// end ; end ;
62446: GO 62405
62448: POP
62449: POP
// end else
62450: GO 62468
// result := mpKingPoints [ side ] ;
62452: LD_ADDR_VAR 0 2
62456: PUSH
62457: LD_EXP 60
62461: PUSH
62462: LD_VAR 0 1
62466: ARRAY
62467: ST_TO_ADDR
// end ;
62468: LD_VAR 0 2
62472: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
62473: LD_EXP 39
62477: IFFALSE 62485
62479: PUSH
62480: CALL 62897 0 0
62484: AND
62485: IFFALSE 62493
62487: PUSH
62488: LD_OWVAR 4
62492: AND
62493: IFFALSE 62746
62495: GO 62497
62497: DISABLE
62498: LD_INT 0
62500: PPUSH
62501: PPUSH
// begin canWin := false ;
62502: LD_ADDR_VAR 0 2
62506: PUSH
62507: LD_INT 0
62509: ST_TO_ADDR
// if not HasPower ( your_side ) then
62510: LD_OWVAR 2
62514: PPUSH
62515: CALL 62939 0 1
62519: NOT
62520: IFFALSE 62531
// begin Multiplayer_Loose_Message ;
62522: CALL_OW 521
// enable ( mpLose ) ;
62526: LD_INT 102
62528: ENABLE_MARKED
// end else
62529: GO 62746
// begin if not EnemiesInGame then
62531: CALL 62749 0 0
62535: NOT
62536: IFFALSE 62543
// begin enable ( mpWin ) ;
62538: LD_INT 101
62540: ENABLE_MARKED
// exit ;
62541: GO 62746
// end ; canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) ;
62543: LD_ADDR_VAR 0 2
62547: PUSH
62548: LD_OWVAR 2
62552: PPUSH
62553: CALL 62375 0 1
62557: PUSH
62558: LD_EXP 35
62562: GREATEREQUAL
62563: IFFALSE 62576
62565: PUSH
62566: LD_OWVAR 2
62570: PPUSH
62571: CALL 62939 0 1
62575: AND
62576: ST_TO_ADDR
// for i := 1 to 8 do
62577: LD_ADDR_VAR 0 1
62581: PUSH
62582: DOUBLE
62583: LD_INT 1
62585: DEC
62586: ST_TO_ADDR
62587: LD_INT 8
62589: PUSH
62590: FOR_TO
62591: IFFALSE 62732
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
62593: LD_EXP 7
62597: PUSH
62598: LD_VAR 0 1
62602: ARRAY
62603: IFFALSE 62616
62605: PUSH
62606: LD_VAR 0 1
62610: PPUSH
62611: CALL_OW 108
62615: AND
62616: IFFALSE 62630
62618: PUSH
62619: LD_VAR 0 1
62623: PUSH
62624: LD_OWVAR 2
62628: NONEQUAL
62629: AND
62630: IFFALSE 62730
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
62632: LD_EXP 8
62636: PUSH
62637: LD_VAR 0 1
62641: ARRAY
62642: NOT
62643: IFTRUE 62691
62645: PUSH
62646: LD_EXP 8
62650: PUSH
62651: LD_VAR 0 1
62655: ARRAY
62656: PUSH
62657: LD_EXP 8
62661: PUSH
62662: LD_OWVAR 2
62666: ARRAY
62667: NONEQUAL
62668: IFFALSE 62690
62670: PUSH
62671: LD_OWVAR 2
62675: PPUSH
62676: LD_VAR 0 1
62680: PPUSH
62681: CALL_OW 81
62685: PUSH
62686: LD_INT 1
62688: NONEQUAL
62689: AND
62690: OR
62691: IFFALSE 62730
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
62693: LD_VAR 0 1
62697: PPUSH
62698: CALL 62375 0 1
62702: PUSH
62703: LD_EXP 35
62707: GREATEREQUAL
62708: IFFALSE 62721
62710: PUSH
62711: LD_VAR 0 1
62715: PPUSH
62716: CALL 62939 0 1
62720: AND
62721: IFFALSE 62730
// begin enable ( mpLose ) ;
62723: LD_INT 102
62725: ENABLE_MARKED
// exit ;
62726: POP
62727: POP
62728: GO 62746
// end ;
62730: GO 62590
62732: POP
62733: POP
// if canWin then
62734: LD_VAR 0 2
62738: IFFALSE 62745
// enable ( mpWin ) else
62740: LD_INT 101
62742: ENABLE_MARKED
62743: GO 62746
// enable ;
62745: ENABLE
// end ; end ;
62746: PPOPN 2
62748: END
// function EnemiesInGame ; var i ; begin
62749: LD_INT 0
62751: PPUSH
62752: PPUSH
// result := false ;
62753: LD_ADDR_VAR 0 1
62757: PUSH
62758: LD_INT 0
62760: ST_TO_ADDR
// for i := 1 to 8 do
62761: LD_ADDR_VAR 0 2
62765: PUSH
62766: DOUBLE
62767: LD_INT 1
62769: DEC
62770: ST_TO_ADDR
62771: LD_INT 8
62773: PUSH
62774: FOR_TO
62775: IFFALSE 62890
// if i <> your_side and HasPower ( i ) and MultiplayerSideAlive ( i ) then
62777: LD_VAR 0 2
62781: PUSH
62782: LD_OWVAR 2
62786: NONEQUAL
62787: IFFALSE 62800
62789: PUSH
62790: LD_VAR 0 2
62794: PPUSH
62795: CALL 62939 0 1
62799: AND
62800: IFFALSE 62813
62802: PUSH
62803: LD_VAR 0 2
62807: PPUSH
62808: CALL_OW 108
62812: AND
62813: IFFALSE 62888
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
62815: LD_EXP 8
62819: PUSH
62820: LD_VAR 0 2
62824: ARRAY
62825: NOT
62826: IFTRUE 62874
62828: PUSH
62829: LD_EXP 8
62833: PUSH
62834: LD_VAR 0 2
62838: ARRAY
62839: PUSH
62840: LD_EXP 8
62844: PUSH
62845: LD_OWVAR 2
62849: ARRAY
62850: NONEQUAL
62851: IFFALSE 62873
62853: PUSH
62854: LD_OWVAR 2
62858: PPUSH
62859: LD_VAR 0 2
62863: PPUSH
62864: CALL_OW 81
62868: PUSH
62869: LD_INT 1
62871: NONEQUAL
62872: AND
62873: OR
62874: IFFALSE 62888
// begin result := true ;
62876: LD_ADDR_VAR 0 1
62880: PUSH
62881: LD_INT 1
62883: ST_TO_ADDR
// exit ;
62884: POP
62885: POP
62886: GO 62892
// end ;
62888: GO 62774
62890: POP
62891: POP
// end ;
62892: LD_VAR 0 1
62896: RET
// function CanWinLoose ; begin
62897: LD_INT 0
62899: PPUSH
// result := true ;
62900: LD_ADDR_VAR 0 1
62904: PUSH
62905: LD_INT 1
62907: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
62908: CALL_OW 531
62912: IFFALSE 62924
62914: PUSH
62915: CALL_OW 519
62919: PUSH
62920: LD_INT 1
62922: GREATER
62923: AND
62924: IFFALSE 62934
// result := false ;
62926: LD_ADDR_VAR 0 1
62930: PUSH
62931: LD_INT 0
62933: ST_TO_ADDR
// end ;
62934: LD_VAR 0 1
62938: RET
// function HasPower ( i ) ; begin
62939: LD_INT 0
62941: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
62942: LD_ADDR_VAR 0 2
62946: PUSH
62947: LD_INT 22
62949: PUSH
62950: LD_VAR 0 1
62954: PUSH
62955: EMPTY
62956: LIST
62957: LIST
62958: PUSH
62959: LD_INT 2
62961: PUSH
62962: LD_INT 21
62964: PUSH
62965: LD_INT 1
62967: PUSH
62968: EMPTY
62969: LIST
62970: LIST
62971: PUSH
62972: LD_INT 33
62974: PUSH
62975: LD_INT 3
62977: PUSH
62978: EMPTY
62979: LIST
62980: LIST
62981: PUSH
62982: LD_INT 33
62984: PUSH
62985: LD_INT 5
62987: PUSH
62988: EMPTY
62989: LIST
62990: LIST
62991: PUSH
62992: EMPTY
62993: LIST
62994: LIST
62995: LIST
62996: LIST
62997: PUSH
62998: EMPTY
62999: LIST
63000: LIST
63001: PPUSH
63002: CALL_OW 69
63006: ST_TO_ADDR
// end ; end_of_file
63007: LD_VAR 0 2
63011: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
63012: PPOPN 6
63014: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
63015: LD_INT 0
63017: PPUSH
// begin if not units then
63018: LD_VAR 0 1
63022: NOT
63023: IFFALSE 63027
// exit ;
63025: GO 63061
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
63027: LD_VAR 0 1
63031: PPUSH
63032: LD_VAR 0 2
63036: PPUSH
63037: LD_VAR 0 3
63041: PPUSH
63042: LD_VAR 0 4
63046: PPUSH
63047: LD_VAR 0 5
63051: PPUSH
63052: LD_VAR 0 6
63056: PPUSH
63057: CALL 61304 0 6
// end ;
63061: PPOPN 7
63063: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
63064: LD_EXP 3
63068: PUSH
63069: LD_INT 4
63071: EQUAL
63072: IFFALSE 63108
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
63074: LD_STRING setGameDifficulty(
63076: PUSH
63077: LD_OWVAR 67
63081: STR
63082: PUSH
63083: LD_STRING )
63085: STR
63086: PPUSH
63087: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
63091: LD_STRING displayDifficulty(
63093: PUSH
63094: LD_OWVAR 67
63098: STR
63099: PUSH
63100: LD_STRING )
63102: STR
63103: PPUSH
63104: CALL_OW 559
// end ; SOS_MapStart ( ) ;
63108: CALL 63137 0 0
// end ; end_of_file
63112: PPOPN 1
63114: END
// every 0 0$1 do
63115: GO 63117
63117: DISABLE
// begin enable ;
63118: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
63119: LD_STRING updateTimer(
63121: PUSH
63122: LD_OWVAR 1
63126: STR
63127: PUSH
63128: LD_STRING );
63130: STR
63131: PPUSH
63132: CALL_OW 559
// end ;
63136: END
// export function SOS_MapStart ( ) ; begin
63137: LD_INT 0
63139: PPUSH
// UpdateFactoryWaypoints ( ) ;
63140: CALL 64078 0 0
// UpdateWarehouseGatheringPoints ( ) ;
63144: CALL 64330 0 0
// ParseMultiDataToLua ( ) ;
63148: CALL 64477 0 0
// ToLua ( LFC_UNITS_CUSTOM_ICON = {}; ) ;
63152: LD_STRING LFC_UNITS_CUSTOM_ICON = {};
63154: PPUSH
63155: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
63159: LD_STRING setSpecLogoNumber(
63161: PUSH
63162: LD_INT 2
63164: STR
63165: PUSH
63166: LD_STRING ,
63168: STR
63169: PUSH
63170: LD_INT 1
63172: STR
63173: PUSH
63174: LD_STRING )
63176: STR
63177: PPUSH
63178: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
63182: LD_STRING setSpecLogoNumber(
63184: PUSH
63185: LD_INT 3
63187: STR
63188: PUSH
63189: LD_STRING ,
63191: STR
63192: PUSH
63193: LD_INT 2
63195: STR
63196: PUSH
63197: LD_STRING )
63199: STR
63200: PPUSH
63201: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
63205: LD_STRING setSpecLogoNumber(
63207: PUSH
63208: LD_INT 4
63210: STR
63211: PUSH
63212: LD_STRING ,
63214: STR
63215: PUSH
63216: LD_INT 3
63218: STR
63219: PUSH
63220: LD_STRING )
63222: STR
63223: PPUSH
63224: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
63228: LD_STRING setSpecLogoNumber(
63230: PUSH
63231: LD_INT 5
63233: STR
63234: PUSH
63235: LD_STRING ,
63237: STR
63238: PUSH
63239: LD_INT 4
63241: STR
63242: PUSH
63243: LD_STRING )
63245: STR
63246: PPUSH
63247: CALL_OW 559
// end ;
63251: LD_VAR 0 1
63255: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
63256: LD_INT 0
63258: PPUSH
63259: PPUSH
63260: PPUSH
63261: PPUSH
63262: PPUSH
63263: PPUSH
63264: PPUSH
63265: PPUSH
63266: PPUSH
// for i := 1 to 8 do
63267: LD_ADDR_VAR 0 2
63271: PUSH
63272: DOUBLE
63273: LD_INT 1
63275: DEC
63276: ST_TO_ADDR
63277: LD_INT 8
63279: PUSH
63280: FOR_TO
63281: IFFALSE 63666
// begin if mpSidePositions [ i ] then
63283: LD_EXP 7
63287: PUSH
63288: LD_VAR 0 2
63292: ARRAY
63293: IFFALSE 63664
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
63295: LD_ADDR_VAR 0 7
63299: PUSH
63300: LD_INT 22
63302: PUSH
63303: LD_VAR 0 2
63307: PUSH
63308: EMPTY
63309: LIST
63310: LIST
63311: PUSH
63312: LD_INT 21
63314: PUSH
63315: LD_INT 1
63317: PUSH
63318: EMPTY
63319: LIST
63320: LIST
63321: PUSH
63322: EMPTY
63323: LIST
63324: LIST
63325: PPUSH
63326: CALL_OW 69
63330: PPUSH
63331: CALL 13364 0 1
63335: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
63336: LD_ADDR_VAR 0 9
63340: PUSH
63341: LD_INT 22
63343: PUSH
63344: LD_VAR 0 2
63348: PUSH
63349: EMPTY
63350: LIST
63351: LIST
63352: PUSH
63353: LD_INT 2
63355: PUSH
63356: LD_INT 30
63358: PUSH
63359: LD_INT 0
63361: PUSH
63362: EMPTY
63363: LIST
63364: LIST
63365: PUSH
63366: LD_INT 30
63368: PUSH
63369: LD_INT 1
63371: PUSH
63372: EMPTY
63373: LIST
63374: LIST
63375: PUSH
63376: EMPTY
63377: LIST
63378: LIST
63379: LIST
63380: PUSH
63381: EMPTY
63382: LIST
63383: LIST
63384: PPUSH
63385: CALL_OW 69
63389: ST_TO_ADDR
// crates := 0 ;
63390: LD_ADDR_VAR 0 4
63394: PUSH
63395: LD_INT 0
63397: ST_TO_ADDR
// oil := 0 ;
63398: LD_ADDR_VAR 0 5
63402: PUSH
63403: LD_INT 0
63405: ST_TO_ADDR
// sib := 0 ;
63406: LD_ADDR_VAR 0 6
63410: PUSH
63411: LD_INT 0
63413: ST_TO_ADDR
// if bases then
63414: LD_VAR 0 9
63418: IFFALSE 63524
// begin for j in bases do
63420: LD_ADDR_VAR 0 3
63424: PUSH
63425: LD_VAR 0 9
63429: PUSH
63430: FOR_IN
63431: IFFALSE 63522
// begin base := GetBase ( j ) ;
63433: LD_ADDR_VAR 0 8
63437: PUSH
63438: LD_VAR 0 3
63442: PPUSH
63443: CALL_OW 274
63447: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
63448: LD_ADDR_VAR 0 4
63452: PUSH
63453: LD_VAR 0 4
63457: PUSH
63458: LD_VAR 0 8
63462: PPUSH
63463: LD_INT 1
63465: PPUSH
63466: CALL_OW 275
63470: PLUS
63471: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
63472: LD_ADDR_VAR 0 5
63476: PUSH
63477: LD_VAR 0 5
63481: PUSH
63482: LD_VAR 0 8
63486: PPUSH
63487: LD_INT 2
63489: PPUSH
63490: CALL_OW 275
63494: PLUS
63495: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
63496: LD_ADDR_VAR 0 6
63500: PUSH
63501: LD_VAR 0 6
63505: PUSH
63506: LD_VAR 0 8
63510: PPUSH
63511: LD_INT 3
63513: PPUSH
63514: CALL_OW 275
63518: PLUS
63519: ST_TO_ADDR
// end ;
63520: GO 63430
63522: POP
63523: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
63524: LD_STRING setSpecText(
63526: PUSH
63527: LD_VAR 0 2
63531: STR
63532: PUSH
63533: LD_STRING ,
63535: STR
63536: PUSH
63537: LD_INT 2
63539: STR
63540: PUSH
63541: LD_STRING ,
63543: STR
63544: PUSH
63545: LD_VAR 0 4
63549: STR
63550: PUSH
63551: LD_STRING )
63553: STR
63554: PPUSH
63555: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
63559: LD_STRING setSpecText(
63561: PUSH
63562: LD_VAR 0 2
63566: STR
63567: PUSH
63568: LD_STRING ,
63570: STR
63571: PUSH
63572: LD_INT 3
63574: STR
63575: PUSH
63576: LD_STRING ,
63578: STR
63579: PUSH
63580: LD_VAR 0 5
63584: STR
63585: PUSH
63586: LD_STRING )
63588: STR
63589: PPUSH
63590: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
63594: LD_STRING setSpecText(
63596: PUSH
63597: LD_VAR 0 2
63601: STR
63602: PUSH
63603: LD_STRING ,
63605: STR
63606: PUSH
63607: LD_INT 4
63609: STR
63610: PUSH
63611: LD_STRING ,
63613: STR
63614: PUSH
63615: LD_VAR 0 6
63619: STR
63620: PUSH
63621: LD_STRING )
63623: STR
63624: PPUSH
63625: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
63629: LD_STRING setSpecText(
63631: PUSH
63632: LD_VAR 0 2
63636: STR
63637: PUSH
63638: LD_STRING ,
63640: STR
63641: PUSH
63642: LD_INT 5
63644: STR
63645: PUSH
63646: LD_STRING ,
63648: STR
63649: PUSH
63650: LD_VAR 0 7
63654: STR
63655: PUSH
63656: LD_STRING )
63658: STR
63659: PPUSH
63660: CALL_OW 559
// end ; end ;
63664: GO 63280
63666: POP
63667: POP
// end ;
63668: LD_VAR 0 1
63672: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
63673: LD_INT 2
63675: PUSH
63676: LD_INT 30
63678: PUSH
63679: LD_INT 0
63681: PUSH
63682: EMPTY
63683: LIST
63684: LIST
63685: PUSH
63686: LD_INT 30
63688: PUSH
63689: LD_INT 1
63691: PUSH
63692: EMPTY
63693: LIST
63694: LIST
63695: PUSH
63696: EMPTY
63697: LIST
63698: LIST
63699: LIST
63700: PPUSH
63701: CALL_OW 69
63705: IFFALSE 63715
63707: GO 63709
63709: DISABLE
// begin enable ;
63710: ENABLE
// UpdateSpectatorBar ;
63711: CALL 63256 0 0
// end ;
63715: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
63716: LD_INT 0
63718: PPUSH
// end ;
63719: LD_VAR 0 12
63723: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
63724: LD_INT 0
63726: PPUSH
63727: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
63728: LD_VAR 0 1
63732: NOT
63733: IFTRUE 63752
63735: PUSH
63736: LD_VAR 0 2
63740: PPUSH
63741: LD_VAR 0 3
63745: PPUSH
63746: CALL_OW 488
63750: NOT
63751: OR
63752: IFTRUE 63787
63754: PUSH
63755: LD_VAR 0 1
63759: PPUSH
63760: CALL_OW 266
63764: PUSH
63765: LD_INT 3
63767: NONEQUAL
63768: IFFALSE 63786
63770: PUSH
63771: LD_VAR 0 1
63775: PPUSH
63776: CALL_OW 247
63780: PUSH
63781: LD_INT 1
63783: EQUAL
63784: NOT
63785: AND
63786: OR
63787: IFFALSE 63791
// exit ;
63789: GO 64073
// if GetType ( factory ) = unit_human then
63791: LD_VAR 0 1
63795: PPUSH
63796: CALL_OW 247
63800: PUSH
63801: LD_INT 1
63803: EQUAL
63804: IFFALSE 63821
// factory := IsInUnit ( factory ) ;
63806: LD_ADDR_VAR 0 1
63810: PUSH
63811: LD_VAR 0 1
63815: PPUSH
63816: CALL_OW 310
63820: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
63821: LD_VAR 0 1
63825: PPUSH
63826: CALL_OW 266
63830: PUSH
63831: LD_INT 3
63833: NONEQUAL
63834: IFFALSE 63838
// exit ;
63836: GO 64073
// for i := 1 to Count ( factoryWaypoints ) do
63838: LD_ADDR_VAR 0 5
63842: PUSH
63843: DOUBLE
63844: LD_INT 1
63846: DEC
63847: ST_TO_ADDR
63848: LD_EXP 61
63852: PPUSH
63853: CALL 13364 0 1
63857: PUSH
63858: FOR_TO
63859: IFFALSE 64021
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
63861: LD_VAR 0 2
63865: PPUSH
63866: LD_VAR 0 3
63870: PPUSH
63871: CALL_OW 428
63875: PUSH
63876: LD_EXP 61
63880: PUSH
63881: LD_VAR 0 5
63885: ARRAY
63886: PUSH
63887: LD_INT 2
63889: ARRAY
63890: EQUAL
63891: IFFALSE 63923
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
63893: LD_ADDR_EXP 61
63897: PUSH
63898: LD_EXP 61
63902: PPUSH
63903: LD_VAR 0 5
63907: PPUSH
63908: CALL_OW 3
63912: ST_TO_ADDR
// UpdateFactoryWaypoints ;
63913: CALL 64078 0 0
// exit ;
63917: POP
63918: POP
63919: GO 64073
// end else
63921: GO 64019
// if factory = factoryWaypoints [ i ] [ 2 ] then
63923: LD_VAR 0 1
63927: PUSH
63928: LD_EXP 61
63932: PUSH
63933: LD_VAR 0 5
63937: ARRAY
63938: PUSH
63939: LD_INT 2
63941: ARRAY
63942: EQUAL
63943: IFFALSE 64019
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
63945: LD_ADDR_EXP 61
63949: PUSH
63950: LD_EXP 61
63954: PPUSH
63955: LD_VAR 0 5
63959: PPUSH
63960: CALL_OW 3
63964: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
63965: LD_ADDR_EXP 61
63969: PUSH
63970: LD_EXP 61
63974: PPUSH
63975: LD_VAR 0 1
63979: PPUSH
63980: CALL_OW 255
63984: PUSH
63985: LD_VAR 0 1
63989: PUSH
63990: LD_VAR 0 2
63994: PUSH
63995: LD_VAR 0 3
63999: PUSH
64000: EMPTY
64001: LIST
64002: LIST
64003: LIST
64004: LIST
64005: PPUSH
64006: CALL 49340 0 2
64010: ST_TO_ADDR
// UpdateFactoryWaypoints ;
64011: CALL 64078 0 0
// exit ;
64015: POP
64016: POP
64017: GO 64073
// end ; end ;
64019: GO 63858
64021: POP
64022: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
64023: LD_ADDR_EXP 61
64027: PUSH
64028: LD_EXP 61
64032: PPUSH
64033: LD_VAR 0 1
64037: PPUSH
64038: CALL_OW 255
64042: PUSH
64043: LD_VAR 0 1
64047: PUSH
64048: LD_VAR 0 2
64052: PUSH
64053: LD_VAR 0 3
64057: PUSH
64058: EMPTY
64059: LIST
64060: LIST
64061: LIST
64062: LIST
64063: PPUSH
64064: CALL 49340 0 2
64068: ST_TO_ADDR
// UpdateFactoryWaypoints ;
64069: CALL 64078 0 0
// end ;
64073: LD_VAR 0 4
64077: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
64078: LD_INT 0
64080: PPUSH
64081: PPUSH
64082: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
64083: LD_STRING resetFactoryWaypoint();
64085: PPUSH
64086: CALL_OW 559
// if factoryWaypoints then
64090: LD_EXP 61
64094: IFFALSE 64215
// begin list := factoryWaypoints ;
64096: LD_ADDR_VAR 0 3
64100: PUSH
64101: LD_EXP 61
64105: ST_TO_ADDR
// for i := 1 to list do
64106: LD_ADDR_VAR 0 2
64110: PUSH
64111: DOUBLE
64112: LD_INT 1
64114: DEC
64115: ST_TO_ADDR
64116: LD_VAR 0 3
64120: PUSH
64121: FOR_TO
64122: IFFALSE 64213
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
64124: LD_STRING setFactoryWaypointXY(
64126: PUSH
64127: LD_VAR 0 3
64131: PUSH
64132: LD_VAR 0 2
64136: ARRAY
64137: PUSH
64138: LD_INT 1
64140: ARRAY
64141: STR
64142: PUSH
64143: LD_STRING ,
64145: STR
64146: PUSH
64147: LD_VAR 0 3
64151: PUSH
64152: LD_VAR 0 2
64156: ARRAY
64157: PUSH
64158: LD_INT 2
64160: ARRAY
64161: STR
64162: PUSH
64163: LD_STRING ,
64165: STR
64166: PUSH
64167: LD_VAR 0 3
64171: PUSH
64172: LD_VAR 0 2
64176: ARRAY
64177: PUSH
64178: LD_INT 3
64180: ARRAY
64181: STR
64182: PUSH
64183: LD_STRING ,
64185: STR
64186: PUSH
64187: LD_VAR 0 3
64191: PUSH
64192: LD_VAR 0 2
64196: ARRAY
64197: PUSH
64198: LD_INT 4
64200: ARRAY
64201: STR
64202: PUSH
64203: LD_STRING )
64205: STR
64206: PPUSH
64207: CALL_OW 559
64211: GO 64121
64213: POP
64214: POP
// end ; end ;
64215: LD_VAR 0 1
64219: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
64220: LD_INT 0
64222: PPUSH
// if HexInfo ( x , y ) = warehouse then
64223: LD_VAR 0 2
64227: PPUSH
64228: LD_VAR 0 3
64232: PPUSH
64233: CALL_OW 428
64237: PUSH
64238: LD_VAR 0 1
64242: EQUAL
64243: IFFALSE 64270
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
64245: LD_ADDR_EXP 63
64249: PUSH
64250: LD_EXP 63
64254: PPUSH
64255: LD_VAR 0 1
64259: PPUSH
64260: LD_INT 0
64262: PPUSH
64263: CALL_OW 1
64267: ST_TO_ADDR
64268: GO 64321
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
64270: LD_ADDR_EXP 63
64274: PUSH
64275: LD_EXP 63
64279: PPUSH
64280: LD_VAR 0 1
64284: PPUSH
64285: LD_VAR 0 1
64289: PPUSH
64290: CALL_OW 255
64294: PUSH
64295: LD_VAR 0 1
64299: PUSH
64300: LD_VAR 0 2
64304: PUSH
64305: LD_VAR 0 3
64309: PUSH
64310: EMPTY
64311: LIST
64312: LIST
64313: LIST
64314: LIST
64315: PPUSH
64316: CALL_OW 1
64320: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
64321: CALL 64330 0 0
// end ;
64325: LD_VAR 0 4
64329: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
64330: LD_INT 0
64332: PPUSH
64333: PPUSH
64334: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
64335: LD_STRING resetWarehouseGatheringPoints();
64337: PPUSH
64338: CALL_OW 559
// if warehouseGatheringPoints then
64342: LD_EXP 63
64346: IFFALSE 64472
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
64348: LD_ADDR_VAR 0 3
64352: PUSH
64353: LD_EXP 63
64357: PPUSH
64358: CALL 53274 0 1
64362: ST_TO_ADDR
// for i := 1 to list do
64363: LD_ADDR_VAR 0 2
64367: PUSH
64368: DOUBLE
64369: LD_INT 1
64371: DEC
64372: ST_TO_ADDR
64373: LD_VAR 0 3
64377: PUSH
64378: FOR_TO
64379: IFFALSE 64470
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
64381: LD_STRING setWarehouseGatheringPointXY(
64383: PUSH
64384: LD_VAR 0 3
64388: PUSH
64389: LD_VAR 0 2
64393: ARRAY
64394: PUSH
64395: LD_INT 1
64397: ARRAY
64398: STR
64399: PUSH
64400: LD_STRING ,
64402: STR
64403: PUSH
64404: LD_VAR 0 3
64408: PUSH
64409: LD_VAR 0 2
64413: ARRAY
64414: PUSH
64415: LD_INT 2
64417: ARRAY
64418: STR
64419: PUSH
64420: LD_STRING ,
64422: STR
64423: PUSH
64424: LD_VAR 0 3
64428: PUSH
64429: LD_VAR 0 2
64433: ARRAY
64434: PUSH
64435: LD_INT 3
64437: ARRAY
64438: STR
64439: PUSH
64440: LD_STRING ,
64442: STR
64443: PUSH
64444: LD_VAR 0 3
64448: PUSH
64449: LD_VAR 0 2
64453: ARRAY
64454: PUSH
64455: LD_INT 4
64457: ARRAY
64458: STR
64459: PUSH
64460: LD_STRING )
64462: STR
64463: PPUSH
64464: CALL_OW 559
64468: GO 64378
64470: POP
64471: POP
// end ; end ;
64472: LD_VAR 0 1
64476: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
64477: LD_INT 0
64479: PPUSH
64480: PPUSH
// if not mpSidePositions then
64481: LD_EXP 7
64485: NOT
64486: IFFALSE 64490
// exit ;
64488: GO 64561
// result :=  ;
64490: LD_ADDR_VAR 0 1
64494: PUSH
64495: LD_STRING 
64497: ST_TO_ADDR
// for i := 1 to 8 do
64498: LD_ADDR_VAR 0 2
64502: PUSH
64503: DOUBLE
64504: LD_INT 1
64506: DEC
64507: ST_TO_ADDR
64508: LD_INT 8
64510: PUSH
64511: FOR_TO
64512: IFFALSE 64542
// begin result := result & mpSidePositions [ i ] & ; ;
64514: LD_ADDR_VAR 0 1
64518: PUSH
64519: LD_VAR 0 1
64523: PUSH
64524: LD_EXP 7
64528: PUSH
64529: LD_VAR 0 2
64533: ARRAY
64534: STR
64535: PUSH
64536: LD_STRING ;
64538: STR
64539: ST_TO_ADDR
// end ;
64540: GO 64511
64542: POP
64543: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
64544: LD_STRING setMultiplayerRealPosition("
64546: PUSH
64547: LD_VAR 0 1
64551: STR
64552: PUSH
64553: LD_STRING ");
64555: STR
64556: PPUSH
64557: CALL_OW 559
// end ; end_of_file
64561: LD_VAR 0 1
64565: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvivalHardcore do var i ;
64566: LD_EXP 39
64570: IFFALSE 64613
64572: GO 64574
64574: DISABLE
64575: LD_INT 0
64577: PPUSH
// begin for i := 1 to 8 do
64578: LD_ADDR_VAR 0 1
64582: PUSH
64583: DOUBLE
64584: LD_INT 1
64586: DEC
64587: ST_TO_ADDR
64588: LD_INT 8
64590: PUSH
64591: FOR_TO
64592: IFFALSE 64611
// SetRestrict ( b_depot , i , state_disabled ) ;
64594: LD_INT 0
64596: PPUSH
64597: LD_VAR 0 1
64601: PPUSH
64602: LD_INT 0
64604: PPUSH
64605: CALL_OW 324
64609: GO 64591
64611: POP
64612: POP
// end ;
64613: PPOPN 1
64615: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvivalHardcore do var i , canWin ;
64616: LD_EXP 39
64620: IFFALSE 64628
64622: PUSH
64623: CALL 64838 0 0
64627: AND
64628: IFFALSE 64636
64630: PUSH
64631: LD_OWVAR 4
64635: AND
64636: IFFALSE 64835
64638: GO 64640
64640: DISABLE
64641: LD_INT 0
64643: PPUSH
64644: PPUSH
// begin canWin := false ;
64645: LD_ADDR_VAR 0 2
64649: PUSH
64650: LD_INT 0
64652: ST_TO_ADDR
// if not HasPower ( your_side ) then
64653: LD_OWVAR 2
64657: PPUSH
64658: CALL 64880 0 1
64662: NOT
64663: IFFALSE 64674
// begin Multiplayer_Loose_Message ;
64665: CALL_OW 521
// enable ( mpLose ) ;
64669: LD_INT 102
64671: ENABLE_MARKED
// end else
64672: GO 64835
// begin canWin := true ;
64674: LD_ADDR_VAR 0 2
64678: PUSH
64679: LD_INT 1
64681: ST_TO_ADDR
// for i := 1 to 8 do
64682: LD_ADDR_VAR 0 1
64686: PUSH
64687: DOUBLE
64688: LD_INT 1
64690: DEC
64691: ST_TO_ADDR
64692: LD_INT 8
64694: PUSH
64695: FOR_TO
64696: IFFALSE 64821
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
64698: LD_EXP 7
64702: PUSH
64703: LD_VAR 0 1
64707: ARRAY
64708: IFFALSE 64721
64710: PUSH
64711: LD_VAR 0 1
64715: PPUSH
64716: CALL_OW 108
64720: AND
64721: IFFALSE 64735
64723: PUSH
64724: LD_VAR 0 1
64728: PUSH
64729: LD_OWVAR 2
64733: NONEQUAL
64734: AND
64735: IFFALSE 64819
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
64737: LD_EXP 8
64741: PUSH
64742: LD_VAR 0 1
64746: ARRAY
64747: NOT
64748: IFTRUE 64796
64750: PUSH
64751: LD_EXP 8
64755: PUSH
64756: LD_VAR 0 1
64760: ARRAY
64761: PUSH
64762: LD_EXP 8
64766: PUSH
64767: LD_OWVAR 2
64771: ARRAY
64772: NONEQUAL
64773: IFFALSE 64795
64775: PUSH
64776: LD_OWVAR 2
64780: PPUSH
64781: LD_VAR 0 1
64785: PPUSH
64786: CALL_OW 81
64790: PUSH
64791: LD_INT 1
64793: NONEQUAL
64794: AND
64795: OR
64796: IFFALSE 64819
// if HasPower ( i ) then
64798: LD_VAR 0 1
64802: PPUSH
64803: CALL 64880 0 1
64807: IFFALSE 64819
// begin canWin := false ;
64809: LD_ADDR_VAR 0 2
64813: PUSH
64814: LD_INT 0
64816: ST_TO_ADDR
// break ;
64817: GO 64821
// end ;
64819: GO 64695
64821: POP
64822: POP
// if canWin then
64823: LD_VAR 0 2
64827: IFFALSE 64834
// enable ( mpWin ) else
64829: LD_INT 101
64831: ENABLE_MARKED
64832: GO 64835
// enable ;
64834: ENABLE
// end ; end ;
64835: PPOPN 2
64837: END
// function CanWinLoose ; begin
64838: LD_INT 0
64840: PPUSH
// result := true ;
64841: LD_ADDR_VAR 0 1
64845: PUSH
64846: LD_INT 1
64848: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
64849: CALL_OW 531
64853: IFFALSE 64865
64855: PUSH
64856: CALL_OW 519
64860: PUSH
64861: LD_INT 1
64863: GREATER
64864: AND
64865: IFFALSE 64875
// result := false ;
64867: LD_ADDR_VAR 0 1
64871: PUSH
64872: LD_INT 0
64874: ST_TO_ADDR
// end ;
64875: LD_VAR 0 1
64879: RET
// function HasPower ( i ) ; begin
64880: LD_INT 0
64882: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
64883: LD_INT 22
64885: PUSH
64886: LD_VAR 0 1
64890: PUSH
64891: EMPTY
64892: LIST
64893: LIST
64894: PUSH
64895: LD_INT 2
64897: PUSH
64898: LD_INT 30
64900: PUSH
64901: LD_INT 0
64903: PUSH
64904: EMPTY
64905: LIST
64906: LIST
64907: PUSH
64908: LD_INT 30
64910: PUSH
64911: LD_INT 1
64913: PUSH
64914: EMPTY
64915: LIST
64916: LIST
64917: PUSH
64918: EMPTY
64919: LIST
64920: LIST
64921: LIST
64922: PUSH
64923: EMPTY
64924: LIST
64925: LIST
64926: PPUSH
64927: CALL_OW 69
64931: NOT
64932: IFFALSE 64936
// exit ;
64934: GO 65001
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
64936: LD_ADDR_VAR 0 2
64940: PUSH
64941: LD_INT 22
64943: PUSH
64944: LD_VAR 0 1
64948: PUSH
64949: EMPTY
64950: LIST
64951: LIST
64952: PUSH
64953: LD_INT 2
64955: PUSH
64956: LD_INT 21
64958: PUSH
64959: LD_INT 1
64961: PUSH
64962: EMPTY
64963: LIST
64964: LIST
64965: PUSH
64966: LD_INT 33
64968: PUSH
64969: LD_INT 3
64971: PUSH
64972: EMPTY
64973: LIST
64974: LIST
64975: PUSH
64976: LD_INT 33
64978: PUSH
64979: LD_INT 5
64981: PUSH
64982: EMPTY
64983: LIST
64984: LIST
64985: PUSH
64986: EMPTY
64987: LIST
64988: LIST
64989: LIST
64990: LIST
64991: PUSH
64992: EMPTY
64993: LIST
64994: LIST
64995: PPUSH
64996: CALL_OW 69
65000: ST_TO_ADDR
// end ;
65001: LD_VAR 0 2
65005: RET
